
GatorScribe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007d4c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00407d4c  00407d4c  00017d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a08  20400000  00407d54  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000468e4  20404000  0040c000  00024000  2**14
                  ALLOC
  4 .stack        00002004  2044a8e4  004528e4  00024000  2**0
                  ALLOC
  5 .heap         00000200  2044c8e8  004548e8  00024000  2**0
                  ALLOC
  6 .ARM.attributes 0000002c  00000000  00000000  00020a08  2**0
                  CONTENTS, READONLY
  7 .comment      000000b4  00000000  00000000  00020a34  2**0
                  CONTENTS, READONLY
  8 .debug_info   00020709  00000000  00000000  00020ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004bb0  00000000  00000000  000411f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009b52  00000000  00000000  00045da1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000cf0  00000000  00000000  0004f8f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001f28  00000000  00000000  000505e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00025dab  00000000  00000000  0005250b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00014ced  00000000  00000000  000782b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009d361  00000000  00000000  0008cfa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002d40  00000000  00000000  0012a304  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e8 c8 44 20 71 24 40 00 69 24 40 00 6d 24 40 00     ..D q$@.i$@.m$@.
  400010:	69 24 40 00 69 24 40 00 69 24 40 00 00 00 00 00     i$@.i$@.i$@.....
	...
  40002c:	69 24 40 00 69 24 40 00 00 00 00 00 69 24 40 00     i$@.i$@.....i$@.
  40003c:	69 24 40 00 69 24 40 00 69 24 40 00 69 24 40 00     i$@.i$@.i$@.i$@.
  40004c:	69 24 40 00 69 24 40 00 69 24 40 00 69 24 40 00     i$@.i$@.i$@.i$@.
  40005c:	69 24 40 00 69 24 40 00 00 00 00 00 a9 1e 40 00     i$@.i$@.......@.
  40006c:	75 1f 40 00 41 20 40 00 69 24 40 00 fd 26 40 00     u.@.A @.i$@..&@.
  40007c:	69 24 40 00 0d 21 40 00 d9 21 40 00 69 24 40 00     i$@..!@..!@.i$@.
  40008c:	69 24 40 00 69 24 40 00 69 24 40 00 69 24 40 00     i$@.i$@.i$@.i$@.
  40009c:	69 24 40 00 69 24 40 00 69 24 40 00 69 24 40 00     i$@.i$@.i$@.i$@.
  4000ac:	69 24 40 00 69 24 40 00 69 24 40 00 69 24 40 00     i$@.i$@.i$@.i$@.
  4000bc:	69 24 40 00 69 24 40 00 69 24 40 00 69 24 40 00     i$@.i$@.i$@.i$@.
  4000cc:	69 24 40 00 00 00 00 00 69 24 40 00 00 00 00 00     i$@.....i$@.....
  4000dc:	69 24 40 00 69 24 40 00 69 24 40 00 69 24 40 00     i$@.i$@.i$@.i$@.
  4000ec:	69 24 40 00 69 24 40 00 69 24 40 00 69 24 40 00     i$@.i$@.i$@.i$@.
  4000fc:	69 24 40 00 69 24 40 00 69 24 40 00 69 24 40 00     i$@.i$@.i$@.i$@.
  40010c:	69 24 40 00 69 24 40 00 69 24 40 00 00 00 00 00     i$@.i$@.i$@.....
  40011c:	00 00 00 00 69 24 40 00 69 24 40 00 ad 01 40 00     ....i$@.i$@...@.
  40012c:	69 24 40 00 69 24 40 00 00 00 00 00 69 24 40 00     i$@.i$@.....i$@.
  40013c:	69 24 40 00                                         i$@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20404000 	.word	0x20404000
  40015c:	00000000 	.word	0x00000000
  400160:	00407d54 	.word	0x00407d54

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00407d54 	.word	0x00407d54
  4001a0:	20404004 	.word	0x20404004
  4001a4:	00407d54 	.word	0x00407d54
  4001a8:	00000000 	.word	0x00000000

004001ac <XDMAC_Handler>:
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4001ac:	4b1d      	ldr	r3, [pc, #116]	; (400224 <XDMAC_Handler+0x78>)
/********************************** Public Variables End **********************************/

#define One_over_max_int16 0.0000305185f 
/******************************* XDMAC Interrupt Handler Start *******************************/ 
void XDMAC_Handler(void)
{
  4001ae:	b470      	push	{r4, r5, r6}
  4001b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    uint32_t dma_status;
    
    dma_status = xdmac_channel_get_interrupt_status(XDMAC, XDMA_CH_SSC_RX);
    if (dma_status & XDMAC_CIS_BIS)
  4001b2:	07da      	lsls	r2, r3, #31
  4001b4:	d522      	bpl.n	4001fc <XDMAC_Handler+0x50>
    {
		// update input buffer to be used 
		if(inPingMode)
  4001b6:	4c1c      	ldr	r4, [pc, #112]	; (400228 <XDMAC_Handler+0x7c>)
		{
			inBuffer = inPingBuffer; 
		}
		else 
		{
			inBuffer = inPongBuffer; 
  4001b8:	4a1c      	ldr	r2, [pc, #112]	; (40022c <XDMAC_Handler+0x80>)
		if(inPingMode)
  4001ba:	7821      	ldrb	r1, [r4, #0]
			inBuffer = inPongBuffer; 
  4001bc:	4b1c      	ldr	r3, [pc, #112]	; (400230 <XDMAC_Handler+0x84>)
		}
		inPingMode = !inPingMode; 
  4001be:	7825      	ldrb	r5, [r4, #0]
			inBuffer = inPongBuffer; 
  4001c0:	2900      	cmp	r1, #0
  4001c2:	bf08      	it	eq
  4001c4:	4613      	moveq	r3, r2
  4001c6:	4a1b      	ldr	r2, [pc, #108]	; (400234 <XDMAC_Handler+0x88>)
		inPingMode = !inPingMode; 
  4001c8:	f085 0501 	eor.w	r5, r5, #1
  4001cc:	4e1a      	ldr	r6, [pc, #104]	; (400238 <XDMAC_Handler+0x8c>)
  4001ce:	4619      	mov	r1, r3
  4001d0:	f502 5080 	add.w	r0, r2, #4096	; 0x1000
		
		// fill process buffer - only left channel 
		uint32_t processIdx = 0; 
		for(uint32_t i = 0; i < IO_BUF_SIZE; i+=2, processIdx++)
		{
			processBuffer[processIdx] = ((float )(int16_t)inBuffer[i]) * One_over_max_int16; 
  4001d4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 40023c <XDMAC_Handler+0x90>
		inPingMode = !inPingMode; 
  4001d8:	7025      	strb	r5, [r4, #0]
  4001da:	6033      	str	r3, [r6, #0]
			processBuffer[processIdx] = ((float )(int16_t)inBuffer[i]) * One_over_max_int16; 
  4001dc:	f831 3b04 	ldrh.w	r3, [r1], #4
  4001e0:	b21b      	sxth	r3, r3
  4001e2:	ee07 3a90 	vmov	s15, r3
  4001e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4001ea:	ee67 7a87 	vmul.f32	s15, s15, s14
  4001ee:	ece2 7a01 	vstmia	r2!, {s15}
		for(uint32_t i = 0; i < IO_BUF_SIZE; i+=2, processIdx++)
  4001f2:	4282      	cmp	r2, r0
  4001f4:	d1f2      	bne.n	4001dc <XDMAC_Handler+0x30>
		}
		
		// data is ready to be processed in the main 
		dataReceived = true; 
  4001f6:	4b12      	ldr	r3, [pc, #72]	; (400240 <XDMAC_Handler+0x94>)
  4001f8:	2201      	movs	r2, #1
  4001fa:	701a      	strb	r2, [r3, #0]
  4001fc:	4b09      	ldr	r3, [pc, #36]	; (400224 <XDMAC_Handler+0x78>)
  4001fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    }
	
	dma_status = xdmac_channel_get_interrupt_status(XDMAC, XDMA_CH_SSC_TX);
	if (dma_status & XDMAC_CIS_BIS)
  400202:	07db      	lsls	r3, r3, #31
  400204:	d50c      	bpl.n	400220 <XDMAC_Handler+0x74>
	{
		// update output buffer to be used 
		if(outPingMode)
  400206:	4b0f      	ldr	r3, [pc, #60]	; (400244 <XDMAC_Handler+0x98>)
		{
			outBuffer = outPingBuffer; 
		}
		else
		{
			outBuffer = outPongBuffer; 
  400208:	480f      	ldr	r0, [pc, #60]	; (400248 <XDMAC_Handler+0x9c>)
		if(outPingMode)
  40020a:	781c      	ldrb	r4, [r3, #0]
			outBuffer = outPongBuffer; 
  40020c:	490f      	ldr	r1, [pc, #60]	; (40024c <XDMAC_Handler+0xa0>)
		}
		outPingMode = !outPingMode; 
  40020e:	781a      	ldrb	r2, [r3, #0]
			outBuffer = outPongBuffer; 
  400210:	2c00      	cmp	r4, #0
  400212:	bf08      	it	eq
  400214:	4601      	moveq	r1, r0
  400216:	480e      	ldr	r0, [pc, #56]	; (400250 <XDMAC_Handler+0xa4>)
		outPingMode = !outPingMode; 
  400218:	f082 0201 	eor.w	r2, r2, #1
  40021c:	6001      	str	r1, [r0, #0]
  40021e:	701a      	strb	r2, [r3, #0]
	}
}
  400220:	bc70      	pop	{r4, r5, r6}
  400222:	4770      	bx	lr
  400224:	40078000 	.word	0x40078000
  400228:	20400010 	.word	0x20400010
  40022c:	20445800 	.word	0x20445800
  400230:	20449800 	.word	0x20449800
  400234:	20446800 	.word	0x20446800
  400238:	2040000c 	.word	0x2040000c
  40023c:	380000fd 	.word	0x380000fd
  400240:	2040401c 	.word	0x2040401c
  400244:	20400018 	.word	0x20400018
  400248:	20448800 	.word	0x20448800
  40024c:	20447800 	.word	0x20447800
  400250:	20400014 	.word	0x20400014

00400254 <configure_xdma>:
/******************************* XDMAC Interrupt Handler End *******************************/

/********************************** Public Functions Start **********************************/
void configure_xdma(void)
{
  400254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint16_t *src;
    
    xdmac_channel_config_t xdmac_channel_cfg = {0};
  400258:	2620      	movs	r6, #32
{
  40025a:	b088      	sub	sp, #32
    xdmac_channel_config_t xdmac_channel_cfg = {0};
  40025c:	2100      	movs	r1, #0
  40025e:	4b30      	ldr	r3, [pc, #192]	; (400320 <configure_xdma+0xcc>)
  400260:	4632      	mov	r2, r6
  400262:	4668      	mov	r0, sp
  400264:	4798      	blx	r3
    
    /* Initialize and enable DMA controller */
    pmc_enable_periph_clk(ID_XDMAC);
  400266:	4b2f      	ldr	r3, [pc, #188]	; (400324 <configure_xdma+0xd0>)
  400268:	203a      	movs	r0, #58	; 0x3a
    | XDMAC_CC_DIF_AHB_IF0
    | XDMAC_CC_SAM_FIXED_AM
    | XDMAC_CC_DAM_INCREMENTED_AM
    | XDMAC_CC_PERID(33);
	
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  40026a:	4c2f      	ldr	r4, [pc, #188]	; (400328 <configure_xdma+0xd4>)
    pmc_enable_periph_clk(ID_XDMAC);
  40026c:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40026e:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
  400272:	4b2e      	ldr	r3, [pc, #184]	; (40032c <configure_xdma+0xd8>)
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  400274:	466a      	mov	r2, sp
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  400276:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 400340 <configure_xdma+0xec>
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  40027a:	4620      	mov	r0, r4
  40027c:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
  400280:	2100      	movs	r1, #0
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400282:	f883 633a 	strb.w	r6, [r3, #826]	; 0x33a
 */
static inline void xdmac_channel_set_descriptor_control(Xdmac *xdmac, uint32_t channel_num, uint32_t config)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  400286:	270f      	movs	r7, #15
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400288:	605d      	str	r5, [r3, #4]
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  40028a:	2501      	movs	r5, #1
  40028c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 400344 <configure_xdma+0xf0>
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  400290:	f8cd e00c 	str.w	lr, [sp, #12]
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  400294:	47c0      	blx	r8
    
    /* Initialize linked list descriptor */
    src = (uint16_t *)&inPingBuffer[0];
    linklist_read[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  400296:	4b26      	ldr	r3, [pc, #152]	; (400330 <configure_xdma+0xdc>)
    | XDMAC_CC_DIF_AHB_IF1
    | XDMAC_CC_SAM_INCREMENTED_AM
    | XDMAC_CC_DAM_FIXED_AM
    | XDMAC_CC_PERID(32);
	
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  400298:	466a      	mov	r2, sp
    linklist_read[0].mbr_da = (uint32_t)(src);
  40029a:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 400348 <configure_xdma+0xf4>
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  40029e:	4629      	mov	r1, r5
    linklist_read[0].mbr_nda = (uint32_t)&linklist_read[1];
  4002a0:	f103 0010 	add.w	r0, r3, #16
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  4002a4:	f023 0603 	bic.w	r6, r3, #3
	linklist_read[1].mbr_da = (uint32_t)(src);
  4002a8:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 40034c <configure_xdma+0xf8>
    linklist_read[0].mbr_nda = (uint32_t)&linklist_read[1];
  4002ac:	6018      	str	r0, [r3, #0]
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  4002ae:	4620      	mov	r0, r4
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  4002b0:	66e7      	str	r7, [r4, #108]	; 0x6c
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  4002b2:	66a6      	str	r6, [r4, #104]	; 0x68
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  4002b4:	60e5      	str	r5, [r4, #12]
    linklist_read[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002b6:	4e1f      	ldr	r6, [pc, #124]	; (400334 <configure_xdma+0xe0>)
	xdmac->XDMAC_CHID[channel_num].XDMAC_CIE = mask;
  4002b8:	6525      	str	r5, [r4, #80]	; 0x50
    linklist_read[0].mbr_da = (uint32_t)(src);
  4002ba:	f8c3 e00c 	str.w	lr, [r3, #12]
    linklist_read[0].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  4002be:	f8df e090 	ldr.w	lr, [pc, #144]	; 400350 <configure_xdma+0xfc>
	linklist_read[1].mbr_da = (uint32_t)(src);
  4002c2:	f8c3 c01c 	str.w	ip, [r3, #28]
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4002c6:	f8df c08c 	ldr.w	ip, [pc, #140]	; 400354 <configure_xdma+0x100>
    linklist_read[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002ca:	605e      	str	r6, [r3, #4]
	linklist_read[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002cc:	615e      	str	r6, [r3, #20]
    linklist_read[0].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  4002ce:	f8c3 e008 	str.w	lr, [r3, #8]
	linklist_read[1].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  4002d2:	f8c3 e018 	str.w	lr, [r3, #24]
	linklist_read[1].mbr_nda = (uint32_t)&linklist_read[0];
  4002d6:	611b      	str	r3, [r3, #16]
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4002d8:	f8cd c00c 	str.w	ip, [sp, #12]
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  4002dc:	47c0      	blx	r8
    
    src = (uint16_t *)&outPingBuffer[0];
    linklist_write[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002de:	4b16      	ldr	r3, [pc, #88]	; (400338 <configure_xdma+0xe4>)
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  4002e0:	2102      	movs	r1, #2
		 | XDMAC_UBC_NDE_FETCH_EN
		 | XDMAC_UBC_NSEN_UPDATED
			| XDMAC_CUBC_UBLEN(IO_BUF_SIZE);
    linklist_write[0].mbr_sa = (uint32_t)(src);
    linklist_write[0].mbr_da = (uint32_t)&(SSC->SSC_THR);
  4002e2:	4a16      	ldr	r2, [pc, #88]	; (40033c <configure_xdma+0xe8>)
    linklist_write[0].mbr_sa = (uint32_t)(src);
  4002e4:	f8df c070 	ldr.w	ip, [pc, #112]	; 400358 <configure_xdma+0x104>
    linklist_write[0].mbr_nda = (uint32_t)&linklist_write[1];
  4002e8:	f103 0810 	add.w	r8, r3, #16
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  4002ec:	f023 0003 	bic.w	r0, r3, #3
	src = (uint16_t *)&outPongBuffer[0];
	linklist_write[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
	    | XDMAC_UBC_NDE_FETCH_EN
	    | XDMAC_UBC_NSEN_UPDATED
	    | XDMAC_CUBC_UBLEN(IO_BUF_SIZE);
	linklist_write[1].mbr_sa = (uint32_t)(src);
  4002f0:	f8df e068 	ldr.w	lr, [pc, #104]	; 40035c <configure_xdma+0x108>
    linklist_write[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002f4:	605e      	str	r6, [r3, #4]
	linklist_write[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002f6:	615e      	str	r6, [r3, #20]
	linklist_write[1].mbr_da = (uint32_t)&(SSC->SSC_THR);
	linklist_write[1].mbr_nda = (uint32_t)&linklist_write[0];
  4002f8:	611b      	str	r3, [r3, #16]
    linklist_write[0].mbr_nda = (uint32_t)&linklist_write[1];
  4002fa:	f8c3 8000 	str.w	r8, [r3]
    linklist_write[0].mbr_sa = (uint32_t)(src);
  4002fe:	f8c3 c008 	str.w	ip, [r3, #8]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  400302:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
	linklist_write[1].mbr_sa = (uint32_t)(src);
  400306:	f8c3 e018 	str.w	lr, [r3, #24]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  40030a:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
    linklist_write[0].mbr_da = (uint32_t)&(SSC->SSC_THR);
  40030e:	60da      	str	r2, [r3, #12]
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  400310:	60e1      	str	r1, [r4, #12]
	linklist_write[1].mbr_da = (uint32_t)&(SSC->SSC_THR);
  400312:	61da      	str	r2, [r3, #28]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CIE = mask;
  400314:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
    xdmac_channel_set_descriptor_addr(XDMAC, XDMA_CH_SSC_TX, (uint32_t)(&linklist_write[0]), 0);
    
    xdmac_enable_interrupt(XDMAC, XDMA_CH_SSC_TX);
    xdmac_channel_enable_interrupt(XDMAC, XDMA_CH_SSC_TX, XDMAC_CIE_BIE);
    
}
  400318:	b008      	add	sp, #32
  40031a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40031e:	bf00      	nop
  400320:	00404ac1 	.word	0x00404ac1
  400324:	004023a5 	.word	0x004023a5
  400328:	40078000 	.word	0x40078000
  40032c:	e000e100 	.word	0xe000e100
  400330:	20404020 	.word	0x20404020
  400334:	0b000800 	.word	0x0b000800
  400338:	20404040 	.word	0x20404040
  40033c:	40004024 	.word	0x40004024
  400340:	21042801 	.word	0x21042801
  400344:	00401821 	.word	0x00401821
  400348:	20449800 	.word	0x20449800
  40034c:	20445800 	.word	0x20445800
  400350:	40004020 	.word	0x40004020
  400354:	20014811 	.word	0x20014811
  400358:	20447800 	.word	0x20447800
  40035c:	20448800 	.word	0x20448800

00400360 <audio_init>:
#include "DMA_Audio.h"
#include "WM8904_Driver.h"
#include "ASF/sam/utils/cmsis/samv71/include/component/supc.h"

void audio_init(void)
{
  400360:	b510      	push	{r4, lr}
	/* Initialize WM8904 TWI interface*/
	if (wm8904_twi_init() != TWIHS_SUCCESS) {
  400362:	4b13      	ldr	r3, [pc, #76]	; (4003b0 <audio_init+0x50>)
  400364:	4798      	blx	r3
  400366:	b118      	cbz	r0, 400370 <audio_init+0x10>
		printf("-E-\tWM8904 initialization failed.\r");
  400368:	4812      	ldr	r0, [pc, #72]	; (4003b4 <audio_init+0x54>)
  40036a:	4b13      	ldr	r3, [pc, #76]	; (4003b8 <audio_init+0x58>)
  40036c:	4798      	blx	r3
  40036e:	e7fe      	b.n	40036e <audio_init+0xe>
			/* Capture error */
		}
	}
		
	/* Configure CODEC */
	configure_codec();
  400370:	4b12      	ldr	r3, [pc, #72]	; (4003bc <audio_init+0x5c>)
  400372:	4604      	mov	r4, r0
  400374:	4798      	blx	r3
		
	/* Configure SSC */
	configure_ssc();
  400376:	4b12      	ldr	r3, [pc, #72]	; (4003c0 <audio_init+0x60>)
  400378:	4798      	blx	r3
		
	/* Configure XDMA */
	configure_xdma();
  40037a:	4b12      	ldr	r3, [pc, #72]	; (4003c4 <audio_init+0x64>)
  40037c:	4798      	blx	r3
		
	/* Enable the DAC master clock (MCLK) */
	pmc_pck_set_prescaler(PMC_PCK_2, PMC_MCKR_PRES_CLK_1);
  40037e:	4621      	mov	r1, r4
  400380:	2002      	movs	r0, #2
  400382:	4b11      	ldr	r3, [pc, #68]	; (4003c8 <audio_init+0x68>)
  400384:	4798      	blx	r3
	pmc_pck_set_source(PMC_PCK_2, PMC_MCKR_CSS_SLOW_CLK);
  400386:	4621      	mov	r1, r4
  400388:	2002      	movs	r0, #2
  40038a:	4b10      	ldr	r3, [pc, #64]	; (4003cc <audio_init+0x6c>)
  40038c:	4798      	blx	r3
	pmc_enable_pck(PMC_PCK_2);
  40038e:	2002      	movs	r0, #2
  400390:	4b0f      	ldr	r3, [pc, #60]	; (4003d0 <audio_init+0x70>)
  400392:	4798      	blx	r3
		
	/* Start playing */
	ssc_enable_rx(SSC);
  400394:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400398:	4b0e      	ldr	r3, [pc, #56]	; (4003d4 <audio_init+0x74>)
  40039a:	4798      	blx	r3
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  40039c:	4c0e      	ldr	r4, [pc, #56]	; (4003d8 <audio_init+0x78>)
  40039e:	2201      	movs	r2, #1
	xdmac_channel_enable(XDMAC, XDMA_CH_SSC_RX);
	// might want to enable in the first xdma interrupt (if you care)
	ssc_enable_tx(SSC);
  4003a0:	4b0e      	ldr	r3, [pc, #56]	; (4003dc <audio_init+0x7c>)
  4003a2:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4003a6:	61e2      	str	r2, [r4, #28]
  4003a8:	4798      	blx	r3
  4003aa:	2302      	movs	r3, #2
  4003ac:	61e3      	str	r3, [r4, #28]
  4003ae:	bd10      	pop	{r4, pc}
  4003b0:	004013a1 	.word	0x004013a1
  4003b4:	00407188 	.word	0x00407188
  4003b8:	004043f5 	.word	0x004043f5
  4003bc:	004004a5 	.word	0x004004a5
  4003c0:	004003e1 	.word	0x004003e1
  4003c4:	00400255 	.word	0x00400255
  4003c8:	004023ed 	.word	0x004023ed
  4003cc:	00402421 	.word	0x00402421
  4003d0:	00402455 	.word	0x00402455
  4003d4:	0040142d 	.word	0x0040142d
  4003d8:	40078000 	.word	0x40078000
  4003dc:	0040143d 	.word	0x0040143d

004003e0 <configure_ssc>:
#include "WM8904_Driver.h"


/********************************** Public Functions Start **********************************/
void configure_ssc(void)
{
  4003e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	clock_opt_t tx_clk_option, rx_clk_option;
	data_frame_opt_t tx_data_frame_option, rx_data_frame_option;

	/* Initialize clock */
	pmc_enable_periph_clk(ID_SSC);
  4003e4:	4b28      	ldr	r3, [pc, #160]	; (400488 <configure_ssc+0xa8>)
{
  4003e6:	b09c      	sub	sp, #112	; 0x70
	pmc_enable_periph_clk(ID_SSC);
  4003e8:	2016      	movs	r0, #22
	/* Reset SSC */
	ssc_reset(SSC);

	/* Transmitter clock mode configuration. */
	tx_clk_option.ul_cks = SSC_TCMR_CKS_TK;
	tx_clk_option.ul_cko = SSC_TCMR_CKO_NONE;
  4003ea:	2400      	movs	r4, #0
	pmc_enable_periph_clk(ID_SSC);
  4003ec:	4798      	blx	r3
	ssc_reset(SSC);
  4003ee:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4003f2:	4b26      	ldr	r3, [pc, #152]	; (40048c <configure_ssc+0xac>)
	tx_clk_option.ul_cki = 0;
	tx_clk_option.ul_ckg = SSC_TCMR_CKG_CONTINUOUS;
	tx_clk_option.ul_start_sel = SSC_TCMR_START_TF_EDGE;
	tx_clk_option.ul_sttdly = 1;
	tx_clk_option.ul_period = BITS_BY_SLOT - 1;
  4003f4:	250f      	movs	r5, #15
	ssc_reset(SSC);
  4003f6:	4798      	blx	r3
	tx_clk_option.ul_sttdly = 1;
  4003f8:	2601      	movs	r6, #1
	tx_clk_option.ul_start_sel = SSC_TCMR_START_TF_EDGE;
  4003fa:	f44f 68e0 	mov.w	r8, #1792	; 0x700
	tx_clk_option.ul_cks = SSC_TCMR_CKS_TK;
  4003fe:	f04f 0e02 	mov.w	lr, #2
	/* Transmitter frame mode configuration. */
	tx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
	tx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  400402:	2780      	movs	r7, #128	; 0x80
	tx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;
	tx_data_frame_option.ul_fslen_ext = 0;
	tx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
	tx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
	/* Configure the SSC transmitter to I2S mode. */
	ssc_set_transmitter(SSC, &tx_clk_option, &tx_data_frame_option);
  400404:	aa0e      	add	r2, sp, #56	; 0x38
  400406:	4669      	mov	r1, sp
  400408:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40040c:	4b20      	ldr	r3, [pc, #128]	; (400490 <configure_ssc+0xb0>)
	tx_clk_option.ul_cks = SSC_TCMR_CKS_TK;
  40040e:	f8cd e000 	str.w	lr, [sp]
	tx_clk_option.ul_cko = SSC_TCMR_CKO_NONE;
  400412:	9401      	str	r4, [sp, #4]
	tx_clk_option.ul_cki = 0;
  400414:	9402      	str	r4, [sp, #8]
	tx_clk_option.ul_ckg = SSC_TCMR_CKG_CONTINUOUS;
  400416:	9403      	str	r4, [sp, #12]
	tx_data_frame_option.ul_datnb = 0;
  400418:	9410      	str	r4, [sp, #64]	; 0x40
	tx_data_frame_option.ul_fslen_ext = 0;
  40041a:	9412      	str	r4, [sp, #72]	; 0x48
	tx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  40041c:	9413      	str	r4, [sp, #76]	; 0x4c
	tx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  40041e:	9414      	str	r4, [sp, #80]	; 0x50
	tx_clk_option.ul_start_sel = SSC_TCMR_START_TF_EDGE;
  400420:	f8cd 8018 	str.w	r8, [sp, #24]
	tx_clk_option.ul_sttdly = 1;
  400424:	9605      	str	r6, [sp, #20]
	tx_clk_option.ul_period = BITS_BY_SLOT - 1;
  400426:	9504      	str	r5, [sp, #16]
	tx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
  400428:	950e      	str	r5, [sp, #56]	; 0x38
	tx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;
  40042a:	9511      	str	r5, [sp, #68]	; 0x44
	tx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  40042c:	970f      	str	r7, [sp, #60]	; 0x3c
	ssc_set_transmitter(SSC, &tx_clk_option, &tx_data_frame_option);
  40042e:	4798      	blx	r3

	/* Receiver clock mode configuration. */
	rx_clk_option.ul_cks = SSC_RCMR_CKS_TK;
	rx_clk_option.ul_cko = SSC_RCMR_CKO_NONE;
	rx_clk_option.ul_cki = SSC_RCMR_CKI;
  400430:	f04f 0c20 	mov.w	ip, #32
	rx_clk_option.ul_ckg = SSC_RCMR_CKG_CONTINUOUS;
	rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_EDGE;
	rx_clk_option.ul_sttdly = 1;	
	rx_clk_option.ul_period = BITS_BY_SLOT;	
  400434:	f04f 0e10 	mov.w	lr, #16
	rx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;	
	rx_data_frame_option.ul_fslen_ext = 0;
	rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
	rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
	/* Configure the SSC transmitter to I2S mode. */
	ssc_set_receiver(SSC, &rx_clk_option, &rx_data_frame_option);
  400438:	aa15      	add	r2, sp, #84	; 0x54
  40043a:	a907      	add	r1, sp, #28
  40043c:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400440:	4b14      	ldr	r3, [pc, #80]	; (400494 <configure_ssc+0xb4>)
	rx_clk_option.ul_cki = SSC_RCMR_CKI;
  400442:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
	rx_clk_option.ul_period = BITS_BY_SLOT;	
  400446:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
	rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_EDGE;
  40044a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
	rx_clk_option.ul_cks = SSC_RCMR_CKS_TK;
  40044e:	9607      	str	r6, [sp, #28]
	rx_clk_option.ul_cko = SSC_RCMR_CKO_NONE;
  400450:	9408      	str	r4, [sp, #32]
	rx_clk_option.ul_ckg = SSC_RCMR_CKG_CONTINUOUS;
  400452:	940a      	str	r4, [sp, #40]	; 0x28
	rx_clk_option.ul_sttdly = 1;	
  400454:	960c      	str	r6, [sp, #48]	; 0x30
	rx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
  400456:	9515      	str	r5, [sp, #84]	; 0x54
	rx_data_frame_option.ul_msbf = SSC_RFMR_MSBF;
  400458:	9716      	str	r7, [sp, #88]	; 0x58
	rx_data_frame_option.ul_datnb = 0;
  40045a:	9417      	str	r4, [sp, #92]	; 0x5c
	rx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;	
  40045c:	9518      	str	r5, [sp, #96]	; 0x60
	rx_data_frame_option.ul_fslen_ext = 0;
  40045e:	9419      	str	r4, [sp, #100]	; 0x64
	rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  400460:	941a      	str	r4, [sp, #104]	; 0x68
	rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  400462:	941b      	str	r4, [sp, #108]	; 0x6c
	ssc_set_receiver(SSC, &rx_clk_option, &rx_data_frame_option);
  400464:	4798      	blx	r3

	/* Disable transmitter first */
	ssc_disable_tx(SSC);
  400466:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40046a:	4b0b      	ldr	r3, [pc, #44]	; (400498 <configure_ssc+0xb8>)
  40046c:	4798      	blx	r3
	ssc_disable_rx(SSC);
  40046e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400472:	4b0a      	ldr	r3, [pc, #40]	; (40049c <configure_ssc+0xbc>)
  400474:	4798      	blx	r3

	/* Disable All Interrupt */
	ssc_disable_interrupt(SSC, 0xFFFFFFFF);
  400476:	f04f 31ff 	mov.w	r1, #4294967295
  40047a:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40047e:	4b08      	ldr	r3, [pc, #32]	; (4004a0 <configure_ssc+0xc0>)
  400480:	4798      	blx	r3
}
  400482:	b01c      	add	sp, #112	; 0x70
  400484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400488:	004023a5 	.word	0x004023a5
  40048c:	00401419 	.word	0x00401419
  400490:	004014c1 	.word	0x004014c1
  400494:	0040144d 	.word	0x0040144d
  400498:	00401445 	.word	0x00401445
  40049c:	00401435 	.word	0x00401435
  4004a0:	00401535 	.word	0x00401535

004004a4 <configure_codec>:


void configure_codec(void)
{
  4004a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t data = 0;
	/* check that WM8904 is present */
	wm8904_write_register(WM8904_SW_RESET_AND_ID, 0xFFFF);
  4004a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
  4004ac:	4c3d      	ldr	r4, [pc, #244]	; (4005a4 <configure_codec+0x100>)
  4004ae:	2000      	movs	r0, #0
	}

	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS);	
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |	
	WM8904_VMID_RES_FAST | WM8904_VMID_ENA);
	delay_ms(5);
  4004b0:	4e3d      	ldr	r6, [pc, #244]	; (4005a8 <configure_codec+0x104>)
	wm8904_write_register(WM8904_SW_RESET_AND_ID, 0xFFFF);
  4004b2:	47a0      	blx	r4
	data = wm8904_read_register(WM8904_SW_RESET_AND_ID);
  4004b4:	4b3d      	ldr	r3, [pc, #244]	; (4005ac <configure_codec+0x108>)
  4004b6:	2000      	movs	r0, #0
	delay_ms(5);
  4004b8:	4d3d      	ldr	r5, [pc, #244]	; (4005b0 <configure_codec+0x10c>)
	data = wm8904_read_register(WM8904_SW_RESET_AND_ID);
  4004ba:	4798      	blx	r3
	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS);	
  4004bc:	2108      	movs	r1, #8
  4004be:	2004      	movs	r0, #4
	WM8904_DCS_ENA_CHAN_3 | WM8904_DCS_ENA_CHAN_2 |
	WM8904_DCS_ENA_CHAN_1 | WM8904_DCS_ENA_CHAN_0);
	wm8904_write_register(WM8904_DC_SERVO_1,
	WM8904_DCS_TRIG_STARTUP_3 | WM8904_DCS_TRIG_STARTUP_2 |
	WM8904_DCS_TRIG_STARTUP_1 | WM8904_DCS_TRIG_STARTUP_0);
	delay_ms(100);
  4004c0:	4f3c      	ldr	r7, [pc, #240]	; (4005b4 <configure_codec+0x110>)
	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS);	
  4004c2:	47a0      	blx	r4
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |	
  4004c4:	2147      	movs	r1, #71	; 0x47
  4004c6:	2005      	movs	r0, #5
  4004c8:	47a0      	blx	r4
	delay_ms(5);
  4004ca:	4630      	mov	r0, r6
  4004cc:	47a8      	blx	r5
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |
  4004ce:	2143      	movs	r1, #67	; 0x43
  4004d0:	2005      	movs	r0, #5
  4004d2:	47a0      	blx	r4
	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS | WM8904_BIAS_ENA);
  4004d4:	2109      	movs	r1, #9
  4004d6:	2004      	movs	r0, #4
  4004d8:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_0, WM8904_INL_ENA | WM8904_INR_ENA);
  4004da:	2103      	movs	r1, #3
  4004dc:	200c      	movs	r0, #12
  4004de:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_2, WM8904_HPL_PGA_ENA | WM8904_HPR_PGA_ENA);
  4004e0:	2103      	movs	r1, #3
  4004e2:	200e      	movs	r0, #14
  4004e4:	47a0      	blx	r4
	wm8904_write_register(WM8904_DAC_DIGITAL_1, WM8904_DEEMPH(0));
  4004e6:	2100      	movs	r1, #0
  4004e8:	2021      	movs	r0, #33	; 0x21
  4004ea:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_OUT12_ZC, 0x0000);
  4004ec:	2100      	movs	r1, #0
  4004ee:	203d      	movs	r0, #61	; 0x3d
  4004f0:	47a0      	blx	r4
	wm8904_write_register(WM8904_CHARGE_PUMP_0, WM8904_CP_ENA);
  4004f2:	2101      	movs	r1, #1
  4004f4:	2062      	movs	r0, #98	; 0x62
  4004f6:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLASS_W_0, WM8904_CP_DYN_PWR);
  4004f8:	2101      	movs	r1, #1
  4004fa:	2068      	movs	r0, #104	; 0x68
  4004fc:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_1, 0x0000);
  4004fe:	2100      	movs	r1, #0
  400500:	2074      	movs	r0, #116	; 0x74
  400502:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_2, WM8904_FLL_OUTDIV(7)| WM8904_FLL_FRATIO(4));
  400504:	f240 7104 	movw	r1, #1796	; 0x704
  400508:	2075      	movs	r0, #117	; 0x75
  40050a:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_3, WM8904_FLL_K(0x8000));
  40050c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  400510:	2076      	movs	r0, #118	; 0x76
  400512:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_4, WM8904_FLL_N(0xBB));
  400514:	f44f 51bb 	mov.w	r1, #5984	; 0x1760
  400518:	2077      	movs	r0, #119	; 0x77
  40051a:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_1, WM8904_FLL_FRACN_ENA | WM8904_FLL_ENA);
  40051c:	2105      	movs	r1, #5
  40051e:	2074      	movs	r0, #116	; 0x74
  400520:	47a0      	blx	r4
	delay_ms(5);
  400522:	4630      	mov	r0, r6
  400524:	47a8      	blx	r5
	wm8904_write_register(WM8904_CLOCK_RATES_1, WM8904_CLK_SYS_RATE(3) | WM8904_SAMPLE_RATE(SAMPLE_RATE));
  400526:	f640 4105 	movw	r1, #3077	; 0xc05
  40052a:	2015      	movs	r0, #21
  40052c:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLOCK_RATES_0, 0x0000);
  40052e:	2100      	movs	r1, #0
  400530:	2014      	movs	r0, #20
  400532:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLOCK_RATES_2,
  400534:	f244 0106 	movw	r1, #16390	; 0x4006
  400538:	2016      	movs	r0, #22
  40053a:	47a0      	blx	r4
	wm8904_write_register(WM8904_AUDIO_INTERFACE_1, WM8904_BCLK_DIR | WM8904_AIF_FMT_I2S); 
  40053c:	2142      	movs	r1, #66	; 0x42
  40053e:	2019      	movs	r0, #25
  400540:	47a0      	blx	r4
	wm8904_write_register(WM8904_AUDIO_INTERFACE_2, WM8904_BCLK_DIV(8));
  400542:	2108      	movs	r1, #8
  400544:	201a      	movs	r0, #26
  400546:	47a0      	blx	r4
	wm8904_write_register(WM8904_AUDIO_INTERFACE_3, WM8904_LRCLK_DIR | WM8904_LRCLK_RATE(0x20));
  400548:	f44f 6102 	mov.w	r1, #2080	; 0x820
  40054c:	201b      	movs	r0, #27
  40054e:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_6,
  400550:	210f      	movs	r1, #15
  400552:	2012      	movs	r0, #18
  400554:	47a0      	blx	r4
	delay_ms(5);
  400556:	4630      	mov	r0, r6
  400558:	47a8      	blx	r5
	wm8904_write_register(WM8904_ANALOGUE_LEFT_INPUT_0, WM8904_LIN_VOL(0x10));
  40055a:	2110      	movs	r1, #16
  40055c:	202c      	movs	r0, #44	; 0x2c
  40055e:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_RIGHT_INPUT_0, WM8904_RIN_VOL(0x10));
  400560:	2110      	movs	r1, #16
  400562:	202d      	movs	r0, #45	; 0x2d
  400564:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  400566:	2111      	movs	r1, #17
  400568:	205a      	movs	r0, #90	; 0x5a
  40056a:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  40056c:	2133      	movs	r1, #51	; 0x33
  40056e:	205a      	movs	r0, #90	; 0x5a
  400570:	47a0      	blx	r4
	wm8904_write_register(WM8904_DC_SERVO_0,
  400572:	210f      	movs	r1, #15
  400574:	2043      	movs	r0, #67	; 0x43
  400576:	47a0      	blx	r4
	wm8904_write_register(WM8904_DC_SERVO_1,
  400578:	21f0      	movs	r1, #240	; 0xf0
  40057a:	2044      	movs	r0, #68	; 0x44
  40057c:	47a0      	blx	r4
	delay_ms(100);
  40057e:	4638      	mov	r0, r7
  400580:	47a8      	blx	r5
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  400582:	2177      	movs	r1, #119	; 0x77
  400584:	205a      	movs	r0, #90	; 0x5a
  400586:	47a0      	blx	r4
	WM8904_HPL_ENA_OUTP | WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_ENA_OUTP | WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  400588:	21ff      	movs	r1, #255	; 0xff
  40058a:	205a      	movs	r0, #90	; 0x5a
  40058c:	47a0      	blx	r4
	WM8904_HPL_RMV_SHORT | WM8904_HPL_ENA_OUTP | WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_RMV_SHORT | WM8904_HPR_ENA_OUTP | WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_OUT1_LEFT, WM8904_HPOUT_VU | WM8904_HPOUTL_VOL(0x39));
  40058e:	21b9      	movs	r1, #185	; 0xb9
  400590:	2039      	movs	r0, #57	; 0x39
  400592:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_OUT1_RIGHT, WM8904_HPOUT_VU | WM8904_HPOUTR_VOL(0x39));
  400594:	203a      	movs	r0, #58	; 0x3a
  400596:	21b9      	movs	r1, #185	; 0xb9
  400598:	47a0      	blx	r4
	delay_ms(100);
  40059a:	4638      	mov	r0, r7
  40059c:	462b      	mov	r3, r5
}
  40059e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	delay_ms(100);
  4005a2:	4718      	bx	r3
  4005a4:	00401329 	.word	0x00401329
  4005a8:	0003dbc2 	.word	0x0003dbc2
  4005ac:	00401365 	.word	0x00401365
  4005b0:	20400001 	.word	0x20400001
  4005b4:	004d2b25 	.word	0x004d2b25

004005b8 <computeWaveletPitch>:
{
	float pitchF = 0.0f;
	int32_t i, j;
	float si, si1;
	
	arm_copy_f32(samples, sam, WIN_SIZE); 
  4005b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4005bc:	4995      	ldr	r1, [pc, #596]	; (400814 <computeWaveletPitch+0x25c>)
  4005be:	4b96      	ldr	r3, [pc, #600]	; (400818 <computeWaveletPitch+0x260>)
	
	return pitchF;
}

float computeWaveletPitch(float * samples)
{
  4005c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int32_t curSamNb = WIN_SIZE;
  4005c4:	4692      	mov	sl, r2
	int32_t curLevel = 0;
  4005c6:	2400      	movs	r4, #0
		memset(distances, 0, WIN_SIZE*sizeof(int32_t));
  4005c8:	f8df b268 	ldr.w	fp, [pc, #616]	; 400834 <computeWaveletPitch+0x27c>
{
  4005cc:	ed2d 8b04 	vpush	{d8-d9}
  4005d0:	b087      	sub	sp, #28
	float curModeDistance = -1.0f;
  4005d2:	eeff 9a00 	vmov.f32	s19, #240	; 0xbf800000 -1.0
	arm_copy_f32(samples, sam, WIN_SIZE); 
  4005d6:	4798      	blx	r3
		arm_max_f32(sam, WIN_SIZE, &maxValue, &temp_idx); 
  4005d8:	4651      	mov	r1, sl
  4005da:	ab03      	add	r3, sp, #12
  4005dc:	aa04      	add	r2, sp, #16
  4005de:	488d      	ldr	r0, [pc, #564]	; (400814 <computeWaveletPitch+0x25c>)
	int32_t curLevel = 0;
  4005e0:	9400      	str	r4, [sp, #0]
		arm_max_f32(sam, WIN_SIZE, &maxValue, &temp_idx); 
  4005e2:	4c8e      	ldr	r4, [pc, #568]	; (40081c <computeWaveletPitch+0x264>)
  4005e4:	47a0      	blx	r4
		arm_min_f32(sam, WIN_SIZE, &minValue, &temp_idx); 
  4005e6:	ab03      	add	r3, sp, #12
  4005e8:	aa05      	add	r2, sp, #20
  4005ea:	4651      	mov	r1, sl
  4005ec:	4889      	ldr	r0, [pc, #548]	; (400814 <computeWaveletPitch+0x25c>)
  4005ee:	4c8c      	ldr	r4, [pc, #560]	; (400820 <computeWaveletPitch+0x268>)
  4005f0:	47a0      	blx	r4
		float amplitudeMax = (maxValue > -minValue ? maxValue : -minValue);
  4005f2:	ed9d 9a05 	vldr	s18, [sp, #20]
		ampltitudeThreshold = amplitudeMax*maximaThresholdRatio;		
  4005f6:	eef6 7a08 	vmov.f32	s15, #104	; 0x3f400000  0.750
		float amplitudeMax = (maxValue > -minValue ? maxValue : -minValue);
  4005fa:	ed9d 7a04 	vldr	s14, [sp, #16]
  4005fe:	eeb1 9a49 	vneg.f32	s18, s18
	int32_t res = 1, j;
  400602:	2301      	movs	r3, #1
		delta = DYW_SAMPLING_RATE/(_2power(curLevel)*maxF);
  400604:	eddf 8a87 	vldr	s17, [pc, #540]	; 400824 <computeWaveletPitch+0x26c>
		if (curSamNb < 2) return pitchF;
  400608:	ed9f 8a87 	vldr	s16, [pc, #540]	; 400828 <computeWaveletPitch+0x270>
		float amplitudeMax = (maxValue > -minValue ? maxValue : -minValue);
  40060c:	fe89 9a07 	vmaxnm.f32	s18, s18, s14
		ampltitudeThreshold = amplitudeMax*maximaThresholdRatio;		
  400610:	ee29 9a27 	vmul.f32	s18, s18, s15
		delta = DYW_SAMPLING_RATE/(_2power(curLevel)*maxF);
  400614:	ee07 3a90 	vmov	s15, r3
		if (curSamNb < 2) return pitchF;
  400618:	f1ba 0f01 	cmp.w	sl, #1
		delta = DYW_SAMPLING_RATE/(_2power(curLevel)*maxF);
  40061c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400620:	ee88 7aa7 	vdiv.f32	s14, s17, s15
  400624:	eefd 7ac7 	vcvt.s32.f32	s15, s14
  400628:	ee17 4a90 	vmov	r4, s15
		if (curSamNb < 2) return pitchF;
  40062c:	f340 8284 	ble.w	400b38 <computeWaveletPitch+0x580>
  400630:	f1ba 0f03 	cmp.w	sl, #3
  400634:	f340 826b 	ble.w	400b0e <computeWaveletPitch+0x556>
  400638:	f1aa 0e04 	sub.w	lr, sl, #4
  40063c:	4b75      	ldr	r3, [pc, #468]	; (400814 <computeWaveletPitch+0x25c>)
  40063e:	2000      	movs	r0, #0
  400640:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 400838 <computeWaveletPitch+0x280>
  400644:	f02e 0e01 	bic.w	lr, lr, #1
  400648:	4619      	mov	r1, r3
  40064a:	9301      	str	r3, [sp, #4]
  40064c:	4602      	mov	r2, r0
  40064e:	edd3 7a00 	vldr	s15, [r3]
  400652:	f10e 0e03 	add.w	lr, lr, #3
  400656:	4606      	mov	r6, r0
  400658:	4605      	mov	r5, r0
  40065a:	46c4      	mov	ip, r8
  40065c:	eeb0 7a48 	vmov.f32	s14, s16
  400660:	2301      	movs	r3, #1
  400662:	e050      	b.n	400706 <computeWaveletPitch+0x14e>
						if (i -1 > lastmaxIndex + delta) 
  400664:	2201      	movs	r2, #1
			si = sam[i]; // - theDC;
  400666:	edd1 7a02 	vldr	s15, [r1, #8]
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
  40066a:	eef5 7a40 	vcmp.f32	s15, #0.0
  40066e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400672:	dd06      	ble.n	400682 <computeWaveletPitch+0xca>
  400674:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40067c:	d801      	bhi.n	400682 <computeWaveletPitch+0xca>
  40067e:	2000      	movs	r0, #0
  400680:	2201      	movs	r2, #1
			if (si1 >= 0 && si < 0) {findMin = 1; findMax = 0; }
  400682:	eef5 7a40 	vcmp.f32	s15, #0.0
  400686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40068a:	d506      	bpl.n	40069a <computeWaveletPitch+0xe2>
  40068c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400694:	db01      	blt.n	40069a <computeWaveletPitch+0xe2>
  400696:	2001      	movs	r0, #1
  400698:	2200      	movs	r2, #0
			if (previousDV > -1000.0f) 
  40069a:	eeb4 6ac8 	vcmpe.f32	s12, s16
			dv = si - si1;
  40069e:	ee37 7ae6 	vsub.f32	s14, s15, s13
			if (previousDV > -1000.0f) 
  4006a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006a6:	dd2a      	ble.n	4006fe <computeWaveletPitch+0x146>
				if (findMin && previousDV < 0.0f && dv >= 0.0f) 
  4006a8:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
  4006ac:	f000 0701 	and.w	r7, r0, #1
  4006b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006b4:	bf58      	it	pl
  4006b6:	2700      	movpl	r7, #0
  4006b8:	b1af      	cbz	r7, 4006e6 <computeWaveletPitch+0x12e>
  4006ba:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  4006be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006c2:	db10      	blt.n	4006e6 <computeWaveletPitch+0x12e>
					if (Abs(si1) >= ampltitudeThreshold) 
  4006c4:	eef0 5ae6 	vabs.f32	s11, s13
  4006c8:	eeb4 9ae5 	vcmpe.f32	s18, s11
  4006cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006d0:	d809      	bhi.n	4006e6 <computeWaveletPitch+0x12e>
						if (i - 1 > lastMinIndex + delta)
  4006d2:	eb04 070c 	add.w	r7, r4, ip
  4006d6:	429f      	cmp	r7, r3
  4006d8:	da05      	bge.n	4006e6 <computeWaveletPitch+0x12e>
							mins[nbMins++] = i - 1;
  4006da:	4854      	ldr	r0, [pc, #336]	; (40082c <computeWaveletPitch+0x274>)
  4006dc:	469c      	mov	ip, r3
  4006de:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
  4006e2:	3501      	adds	r5, #1
							findMin = 0;
  4006e4:	2000      	movs	r0, #0
				if (findMax && previousDV > 0.0f && dv <= 0.0f) 
  4006e6:	eeb5 6a40 	vcmp.f32	s12, #0.0
  4006ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006ee:	dd06      	ble.n	4006fe <computeWaveletPitch+0x146>
  4006f0:	b12a      	cbz	r2, 4006fe <computeWaveletPitch+0x146>
  4006f2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  4006f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006fa:	d96b      	bls.n	4007d4 <computeWaveletPitch+0x21c>
						if (i -1 > lastmaxIndex + delta) 
  4006fc:	2201      	movs	r2, #1
  4006fe:	3302      	adds	r3, #2
  400700:	3108      	adds	r1, #8
  400702:	4573      	cmp	r3, lr
  400704:	d07b      	beq.n	4007fe <computeWaveletPitch+0x246>
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
  400706:	eef5 7a40 	vcmp.f32	s15, #0.0
			si = sam[i]; // - theDC;
  40070a:	edd1 6a01 	vldr	s13, [r1, #4]
  40070e:	1e5f      	subs	r7, r3, #1
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
  400710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400714:	d806      	bhi.n	400724 <computeWaveletPitch+0x16c>
  400716:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  40071a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40071e:	dd01      	ble.n	400724 <computeWaveletPitch+0x16c>
  400720:	2000      	movs	r0, #0
  400722:	2201      	movs	r2, #1
			if (si1 >= 0 && si < 0) {findMin = 1; findMax = 0; }
  400724:	eef5 7a40 	vcmp.f32	s15, #0.0
  400728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40072c:	db06      	blt.n	40073c <computeWaveletPitch+0x184>
  40072e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400736:	d501      	bpl.n	40073c <computeWaveletPitch+0x184>
  400738:	2001      	movs	r0, #1
  40073a:	2200      	movs	r2, #0
			if (previousDV > -1000.0f) 
  40073c:	eeb4 7ac8 	vcmpe.f32	s14, s16
			dv = si - si1;
  400740:	ee36 6ae7 	vsub.f32	s12, s13, s15
			if (previousDV > -1000.0f) 
  400744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400748:	dd8d      	ble.n	400666 <computeWaveletPitch+0xae>
				if (findMin && previousDV < 0.0f && dv >= 0.0f) 
  40074a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  40074e:	f000 0901 	and.w	r9, r0, #1
  400752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400756:	bf58      	it	pl
  400758:	f04f 0900 	movpl.w	r9, #0
  40075c:	f1b9 0f00 	cmp.w	r9, #0
  400760:	d015      	beq.n	40078e <computeWaveletPitch+0x1d6>
  400762:	eeb5 6a40 	vcmp.f32	s12, #0.0
  400766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40076a:	db10      	blt.n	40078e <computeWaveletPitch+0x1d6>
					if (Abs(si1) >= ampltitudeThreshold) 
  40076c:	eef0 5ae7 	vabs.f32	s11, s15
  400770:	eeb4 9ae5 	vcmpe.f32	s18, s11
  400774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400778:	d809      	bhi.n	40078e <computeWaveletPitch+0x1d6>
						if (i - 1 > lastMinIndex + delta)
  40077a:	eb04 090c 	add.w	r9, r4, ip
  40077e:	45b9      	cmp	r9, r7
  400780:	da05      	bge.n	40078e <computeWaveletPitch+0x1d6>
							mins[nbMins++] = i - 1;
  400782:	482a      	ldr	r0, [pc, #168]	; (40082c <computeWaveletPitch+0x274>)
  400784:	46bc      	mov	ip, r7
  400786:	f840 7025 	str.w	r7, [r0, r5, lsl #2]
  40078a:	3501      	adds	r5, #1
							findMin = 0;
  40078c:	2000      	movs	r0, #0
				if (findMax && previousDV > 0.0f && dv <= 0.0f) 
  40078e:	eeb5 7a40 	vcmp.f32	s14, #0.0
  400792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400796:	f77f af66 	ble.w	400666 <computeWaveletPitch+0xae>
  40079a:	2a00      	cmp	r2, #0
  40079c:	f43f af63 	beq.w	400666 <computeWaveletPitch+0xae>
  4007a0:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
  4007a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4007a8:	f63f af5c 	bhi.w	400664 <computeWaveletPitch+0xac>
					if (Abs(si1) >= ampltitudeThreshold) 
  4007ac:	eef0 7ae7 	vabs.f32	s15, s15
  4007b0:	eeb4 9ae7 	vcmpe.f32	s18, s15
  4007b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4007b8:	f63f af54 	bhi.w	400664 <computeWaveletPitch+0xac>
						if (i -1 > lastmaxIndex + delta) 
  4007bc:	eb04 0208 	add.w	r2, r4, r8
  4007c0:	42ba      	cmp	r2, r7
  4007c2:	f6bf af4f 	bge.w	400664 <computeWaveletPitch+0xac>
							maxs[nbMaxs++] = i - 1;
  4007c6:	4a1a      	ldr	r2, [pc, #104]	; (400830 <computeWaveletPitch+0x278>)
  4007c8:	46b8      	mov	r8, r7
  4007ca:	f842 7026 	str.w	r7, [r2, r6, lsl #2]
  4007ce:	3601      	adds	r6, #1
							findMax = 0;
  4007d0:	2200      	movs	r2, #0
  4007d2:	e748      	b.n	400666 <computeWaveletPitch+0xae>
					if (Abs(si1) >= ampltitudeThreshold) 
  4007d4:	eef0 6ae6 	vabs.f32	s13, s13
  4007d8:	eeb4 9ae6 	vcmpe.f32	s18, s13
  4007dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4007e0:	d88c      	bhi.n	4006fc <computeWaveletPitch+0x144>
						if (i -1 > lastmaxIndex + delta) 
  4007e2:	eb04 0208 	add.w	r2, r4, r8
  4007e6:	429a      	cmp	r2, r3
  4007e8:	da88      	bge.n	4006fc <computeWaveletPitch+0x144>
							maxs[nbMaxs++] = i - 1;
  4007ea:	4a11      	ldr	r2, [pc, #68]	; (400830 <computeWaveletPitch+0x278>)
  4007ec:	4698      	mov	r8, r3
  4007ee:	3108      	adds	r1, #8
  4007f0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  4007f4:	3302      	adds	r3, #2
  4007f6:	3601      	adds	r6, #1
							findMax = 0;
  4007f8:	2200      	movs	r2, #0
  4007fa:	4573      	cmp	r3, lr
  4007fc:	d183      	bne.n	400706 <computeWaveletPitch+0x14e>
  4007fe:	9f01      	ldr	r7, [sp, #4]
  400800:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
							mins[nbMins++] = i - 1;
  400804:	f8df 9024 	ldr.w	r9, [pc, #36]	; 40082c <computeWaveletPitch+0x274>
  400808:	46a6      	mov	lr, r4
  40080a:	4419      	add	r1, r3
  40080c:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  400810:	e01a      	b.n	400848 <computeWaveletPitch+0x290>
  400812:	bf00      	nop
  400814:	20407400 	.word	0x20407400
  400818:	004031c5 	.word	0x004031c5
  40081c:	00403361 	.word	0x00403361
  400820:	00403285 	.word	0x00403285
  400824:	41780419 	.word	0x41780419
  400828:	c47a0000 	.word	0xc47a0000
  40082c:	20406400 	.word	0x20406400
  400830:	20405400 	.word	0x20405400
  400834:	20404400 	.word	0x20404400
  400838:	fff0bdc0 	.word	0xfff0bdc0
						if (i -1 > lastmaxIndex + delta) 
  40083c:	2201      	movs	r2, #1
		for (i = 1; i < curSamNb; i++) 
  40083e:	3301      	adds	r3, #1
			dv = si - si1;
  400840:	eeb0 7a67 	vmov.f32	s14, s15
		for (i = 1; i < curSamNb; i++) 
  400844:	459a      	cmp	sl, r3
  400846:	dd65      	ble.n	400914 <computeWaveletPitch+0x35c>
			si = sam[i]; // - theDC;
  400848:	edd1 7a01 	vldr	s15, [r1, #4]
  40084c:	1e5f      	subs	r7, r3, #1
			si1 = sam[i-1]; // - theDC;
  40084e:	ecf1 6a01 	vldmia	r1!, {s13}
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
  400852:	eef5 7a40 	vcmp.f32	s15, #0.0
  400856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40085a:	dd06      	ble.n	40086a <computeWaveletPitch+0x2b2>
  40085c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400864:	d801      	bhi.n	40086a <computeWaveletPitch+0x2b2>
  400866:	2000      	movs	r0, #0
  400868:	2201      	movs	r2, #1
			if (si1 >= 0 && si < 0) {findMin = 1; findMax = 0; }
  40086a:	eef5 7a40 	vcmp.f32	s15, #0.0
  40086e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400872:	d506      	bpl.n	400882 <computeWaveletPitch+0x2ca>
  400874:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40087c:	db01      	blt.n	400882 <computeWaveletPitch+0x2ca>
  40087e:	2001      	movs	r0, #1
  400880:	2200      	movs	r2, #0
			if (previousDV > -1000.0f) 
  400882:	eeb4 7ac8 	vcmpe.f32	s14, s16
			dv = si - si1;
  400886:	ee77 7ae6 	vsub.f32	s15, s15, s13
			if (previousDV > -1000.0f) 
  40088a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40088e:	ddd6      	ble.n	40083e <computeWaveletPitch+0x286>
				if (findMin && previousDV < 0.0f && dv >= 0.0f) 
  400890:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  400894:	f000 0401 	and.w	r4, r0, #1
  400898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40089c:	bf58      	it	pl
  40089e:	2400      	movpl	r4, #0
  4008a0:	b1a4      	cbz	r4, 4008cc <computeWaveletPitch+0x314>
  4008a2:	eef5 7a40 	vcmp.f32	s15, #0.0
  4008a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008aa:	db0f      	blt.n	4008cc <computeWaveletPitch+0x314>
					if (Abs(si1) >= ampltitudeThreshold) 
  4008ac:	eeb0 6ae6 	vabs.f32	s12, s13
  4008b0:	eeb4 9ac6 	vcmpe.f32	s18, s12
  4008b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008b8:	d808      	bhi.n	4008cc <computeWaveletPitch+0x314>
						if (i - 1 > lastMinIndex + delta)
  4008ba:	eb0e 040c 	add.w	r4, lr, ip
  4008be:	42bc      	cmp	r4, r7
  4008c0:	da04      	bge.n	4008cc <computeWaveletPitch+0x314>
							mins[nbMins++] = i - 1;
  4008c2:	f849 7025 	str.w	r7, [r9, r5, lsl #2]
  4008c6:	46bc      	mov	ip, r7
  4008c8:	3501      	adds	r5, #1
							findMin = 0;
  4008ca:	2000      	movs	r0, #0
				if (findMax && previousDV > 0.0f && dv <= 0.0f) 
  4008cc:	eeb5 7a40 	vcmp.f32	s14, #0.0
  4008d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008d4:	ddb3      	ble.n	40083e <computeWaveletPitch+0x286>
  4008d6:	2a00      	cmp	r2, #0
  4008d8:	d0b1      	beq.n	40083e <computeWaveletPitch+0x286>
  4008da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  4008de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008e2:	d8ab      	bhi.n	40083c <computeWaveletPitch+0x284>
					if (Abs(si1) >= ampltitudeThreshold) 
  4008e4:	eef0 6ae6 	vabs.f32	s13, s13
  4008e8:	eeb4 9ae6 	vcmpe.f32	s18, s13
  4008ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008f0:	d8a4      	bhi.n	40083c <computeWaveletPitch+0x284>
						if (i -1 > lastmaxIndex + delta) 
  4008f2:	eb0e 0208 	add.w	r2, lr, r8
  4008f6:	42ba      	cmp	r2, r7
  4008f8:	daa0      	bge.n	40083c <computeWaveletPitch+0x284>
		for (i = 1; i < curSamNb; i++) 
  4008fa:	3301      	adds	r3, #1
							maxs[nbMaxs++] = i - 1;
  4008fc:	4acf      	ldr	r2, [pc, #828]	; (400c3c <computeWaveletPitch+0x684>)
  4008fe:	46b8      	mov	r8, r7
			dv = si - si1;
  400900:	eeb0 7a67 	vmov.f32	s14, s15
		for (i = 1; i < curSamNb; i++) 
  400904:	459a      	cmp	sl, r3
							maxs[nbMaxs++] = i - 1;
  400906:	f842 7026 	str.w	r7, [r2, r6, lsl #2]
  40090a:	f106 0601 	add.w	r6, r6, #1
							findMax = 0;
  40090e:	f04f 0200 	mov.w	r2, #0
		for (i = 1; i < curSamNb; i++) 
  400912:	dc99      	bgt.n	400848 <computeWaveletPitch+0x290>
  400914:	4674      	mov	r4, lr
		if (nbMins == 0 && nbMaxs == 0) 
  400916:	b915      	cbnz	r5, 40091e <computeWaveletPitch+0x366>
  400918:	2e00      	cmp	r6, #0
  40091a:	f000 810d 	beq.w	400b38 <computeWaveletPitch+0x580>
		memset(distances, 0, WIN_SIZE*sizeof(int32_t));
  40091e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400922:	2100      	movs	r1, #0
  400924:	4658      	mov	r0, fp
  400926:	4bc6      	ldr	r3, [pc, #792]	; (400c40 <computeWaveletPitch+0x688>)
  400928:	4798      	blx	r3
		for (i = 0 ; i < nbMins ; i++) 
  40092a:	b34d      	cbz	r5, 400980 <computeWaveletPitch+0x3c8>
  40092c:	f8df e32c 	ldr.w	lr, [pc, #812]	; 400c5c <computeWaveletPitch+0x6a4>
  400930:	2202      	movs	r2, #2
  400932:	2700      	movs	r7, #0
  400934:	4671      	mov	r1, lr
  400936:	e012      	b.n	40095e <computeWaveletPitch+0x3a6>
					d = Abs(mins[i] - mins[i+j]);
  400938:	f8d1 c000 	ldr.w	ip, [r1]
  40093c:	684b      	ldr	r3, [r1, #4]
  40093e:	ebac 0303 	sub.w	r3, ip, r3
  400942:	2b00      	cmp	r3, #0
  400944:	bfb8      	it	lt
  400946:	425b      	neglt	r3, r3
				if (i+j < nbMins) 
  400948:	42aa      	cmp	r2, r5
					distances[d]++; 
  40094a:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
  40094e:	f100 0001 	add.w	r0, r0, #1
  400952:	f84b 0023 	str.w	r0, [fp, r3, lsl #2]
				if (i+j < nbMins) 
  400956:	f2c0 80cc 	blt.w	400af2 <computeWaveletPitch+0x53a>
  40095a:	3104      	adds	r1, #4
  40095c:	3201      	adds	r2, #1
  40095e:	3701      	adds	r7, #1
  400960:	42af      	cmp	r7, r5
  400962:	dbe9      	blt.n	400938 <computeWaveletPitch+0x380>
  400964:	42aa      	cmp	r2, r5
  400966:	da0b      	bge.n	400980 <computeWaveletPitch+0x3c8>
					d = Abs(mins[i] - mins[i+j]);
  400968:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
  40096c:	680b      	ldr	r3, [r1, #0]
  40096e:	1a9b      	subs	r3, r3, r2
  400970:	2b00      	cmp	r3, #0
  400972:	bfb8      	it	lt
  400974:	425b      	neglt	r3, r3
					distances[d]++; 
  400976:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
  40097a:	3201      	adds	r2, #1
  40097c:	f84b 2023 	str.w	r2, [fp, r3, lsl #2]
		for (i = 0 ; i < nbMaxs ; i++) 
  400980:	b346      	cbz	r6, 4009d4 <computeWaveletPitch+0x41c>
  400982:	4dae      	ldr	r5, [pc, #696]	; (400c3c <computeWaveletPitch+0x684>)
  400984:	2202      	movs	r2, #2
  400986:	2700      	movs	r7, #0
  400988:	4629      	mov	r1, r5
  40098a:	e012      	b.n	4009b2 <computeWaveletPitch+0x3fa>
					d = Abs(maxs[i] - maxs[i+j]);
  40098c:	f8d1 e000 	ldr.w	lr, [r1]
  400990:	684b      	ldr	r3, [r1, #4]
  400992:	ebae 0303 	sub.w	r3, lr, r3
  400996:	2b00      	cmp	r3, #0
  400998:	bfb8      	it	lt
  40099a:	425b      	neglt	r3, r3
				if (i+j < nbMaxs) 
  40099c:	42b2      	cmp	r2, r6
					distances[d]++; 
  40099e:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
  4009a2:	f100 0001 	add.w	r0, r0, #1
  4009a6:	f84b 0023 	str.w	r0, [fp, r3, lsl #2]
				if (i+j < nbMaxs) 
  4009aa:	f2c0 818f 	blt.w	400ccc <computeWaveletPitch+0x714>
  4009ae:	3104      	adds	r1, #4
  4009b0:	3201      	adds	r2, #1
  4009b2:	3701      	adds	r7, #1
  4009b4:	42b7      	cmp	r7, r6
  4009b6:	dbe9      	blt.n	40098c <computeWaveletPitch+0x3d4>
  4009b8:	42b2      	cmp	r2, r6
  4009ba:	da0b      	bge.n	4009d4 <computeWaveletPitch+0x41c>
					d = Abs(maxs[i] - maxs[i+j]);
  4009bc:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4009c0:	680b      	ldr	r3, [r1, #0]
  4009c2:	1a9b      	subs	r3, r3, r2
  4009c4:	2b00      	cmp	r3, #0
  4009c6:	bfb8      	it	lt
  4009c8:	425b      	neglt	r3, r3
					distances[d]++; 
  4009ca:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
  4009ce:	3201      	adds	r2, #1
  4009d0:	f84b 2023 	str.w	r2, [fp, r3, lsl #2]
		for (i = 0 ; i < nbMaxs ; i++) 
  4009d4:	f04f 36ff 	mov.w	r6, #4294967295
  4009d8:	f1c4 0e00 	rsb	lr, r4, #0
  4009dc:	2500      	movs	r5, #0
  4009de:	f104 0c01 	add.w	ip, r4, #1
  4009e2:	4637      	mov	r7, r6
			for (j = -delta ; j <= delta ; j++) 
  4009e4:	4574      	cmp	r4, lr
  4009e6:	f2c0 8082 	blt.w	400aee <computeWaveletPitch+0x536>
  4009ea:	1b2b      	subs	r3, r5, r4
  4009ec:	eb0c 0205 	add.w	r2, ip, r5
  4009f0:	2100      	movs	r1, #0
				if (i+j >=0 && i+j < curSamNb)
  4009f2:	4553      	cmp	r3, sl
  4009f4:	da04      	bge.n	400a00 <computeWaveletPitch+0x448>
  4009f6:	2b00      	cmp	r3, #0
  4009f8:	db02      	blt.n	400a00 <computeWaveletPitch+0x448>
					summed += distances[i+j];
  4009fa:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
  4009fe:	4401      	add	r1, r0
  400a00:	3301      	adds	r3, #1
			for (j = -delta ; j <= delta ; j++) 
  400a02:	4293      	cmp	r3, r2
  400a04:	d1f5      	bne.n	4009f2 <computeWaveletPitch+0x43a>
			if (summed == bestValue) 
  400a06:	42b9      	cmp	r1, r7
  400a08:	d06c      	beq.n	400ae4 <computeWaveletPitch+0x52c>
			else if (summed > bestValue) 
  400a0a:	dd01      	ble.n	400a10 <computeWaveletPitch+0x458>
  400a0c:	460f      	mov	r7, r1
  400a0e:	462e      	mov	r6, r5
		for (i = 0; i< curSamNb; i++) 
  400a10:	3501      	adds	r5, #1
  400a12:	4555      	cmp	r5, sl
  400a14:	d1e6      	bne.n	4009e4 <computeWaveletPitch+0x42c>
		for (j = -delta ; j <= delta ; j++) 
  400a16:	4574      	cmp	r4, lr
  400a18:	f2c0 8087 	blt.w	400b2a <computeWaveletPitch+0x572>
  400a1c:	ed9f 7a89 	vldr	s14, [pc, #548]	; 400c44 <computeWaveletPitch+0x68c>
  400a20:	1c62      	adds	r2, r4, #1
  400a22:	1b33      	subs	r3, r6, r4
  400a24:	eef0 6a47 	vmov.f32	s13, s14
  400a28:	4416      	add	r6, r2
			if (bestDistance+j >=0 && bestDistance+j < WIN_SIZE) 
  400a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  400a2e:	d211      	bcs.n	400a54 <computeWaveletPitch+0x49c>
				int32_t nbDist = distances[bestDistance+j];
  400a30:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
					distAvg += (bestDistance+j)*nbDist;
  400a34:	fb02 f103 	mul.w	r1, r2, r3
					nbDists += nbDist;
  400a38:	ee06 2a10 	vmov	s12, r2
				if (nbDist > 0) {
  400a3c:	2a00      	cmp	r2, #0
					distAvg += (bestDistance+j)*nbDist;
  400a3e:	ee07 1a90 	vmov	s15, r1
					nbDists += nbDist;
  400a42:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
					distAvg += (bestDistance+j)*nbDist;
  400a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (nbDist > 0) {
  400a4a:	dd03      	ble.n	400a54 <computeWaveletPitch+0x49c>
					nbDists += nbDist;
  400a4c:	ee76 6a86 	vadd.f32	s13, s13, s12
					distAvg += (bestDistance+j)*nbDist;
  400a50:	ee37 7a27 	vadd.f32	s14, s14, s15
  400a54:	3301      	adds	r3, #1
		for (j = -delta ; j <= delta ; j++) 
  400a56:	42b3      	cmp	r3, r6
  400a58:	d1e7      	bne.n	400a2a <computeWaveletPitch+0x472>
  400a5a:	ee87 6a26 	vdiv.f32	s12, s14, s13
				pitchF = DYW_SAMPLING_RATE/(_2power(curLevel-1)*curModeDistance);
  400a5e:	9b00      	ldr	r3, [sp, #0]
		if (curModeDistance > -1.0f) 
  400a60:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  400a64:	eef4 9ae7 	vcmpe.f32	s19, s15
  400a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400a6c:	dd12      	ble.n	400a94 <computeWaveletPitch+0x4dc>
			float similarity = Abs(distAvg*2 - curModeDistance);
  400a6e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
			if (similarity <= 2*delta) 
  400a72:	0064      	lsls	r4, r4, #1
			float similarity = Abs(distAvg*2 - curModeDistance);
  400a74:	eef0 6a69 	vmov.f32	s13, s19
			if (similarity <= 2*delta) 
  400a78:	ee07 4a90 	vmov	s15, r4
			float similarity = Abs(distAvg*2 - curModeDistance);
  400a7c:	eed6 6a07 	vfnms.f32	s13, s12, s14
			if (similarity <= 2*delta) 
  400a80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			float similarity = Abs(distAvg*2 - curModeDistance);
  400a84:	eeb0 7ae6 	vabs.f32	s14, s13
			if (similarity <= 2*delta) 
  400a88:	eeb4 7ae7 	vcmpe.f32	s14, s15
  400a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400a90:	f240 8087 	bls.w	400ba2 <computeWaveletPitch+0x5ea>
		curLevel = curLevel + 1;
  400a94:	3301      	adds	r3, #1
		if (curLevel >= maxFLWTlevels) 
  400a96:	2b06      	cmp	r3, #6
		curLevel = curLevel + 1;
  400a98:	9300      	str	r3, [sp, #0]
		if (curLevel >= maxFLWTlevels) 
  400a9a:	d04d      	beq.n	400b38 <computeWaveletPitch+0x580>
  400a9c:	9b01      	ldr	r3, [sp, #4]
		for (i = 0; i < curSamNb/2; i++)
  400a9e:	ea4f 0a6a 	mov.w	sl, sl, asr #1
  400aa2:	4a69      	ldr	r2, [pc, #420]	; (400c48 <computeWaveletPitch+0x690>)
			sam[i] = (sam[2*i] + sam[2*i + 1]) * 0.5f;
  400aa4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
  400aa8:	eb03 01ca 	add.w	r1, r3, sl, lsl #3
		for (i = 0; i < curSamNb/2; i++)
  400aac:	4613      	mov	r3, r2
			sam[i] = (sam[2*i] + sam[2*i + 1]) * 0.5f;
  400aae:	ed93 7a00 	vldr	s14, [r3]
  400ab2:	3308      	adds	r3, #8
  400ab4:	ed53 7a01 	vldr	s15, [r3, #-4]
		for (i = 0; i < curSamNb/2; i++)
  400ab8:	428b      	cmp	r3, r1
			sam[i] = (sam[2*i] + sam[2*i + 1]) * 0.5f;
  400aba:	ee77 7a27 	vadd.f32	s15, s14, s15
  400abe:	ee67 7aa6 	vmul.f32	s15, s15, s13
  400ac2:	ece2 7a01 	vstmia	r2!, {s15}
		for (i = 0; i < curSamNb/2; i++)
  400ac6:	d1f2      	bne.n	400aae <computeWaveletPitch+0x4f6>
	for (j = 0; j < i; j++) res <<= 1;
  400ac8:	9b00      	ldr	r3, [sp, #0]
  400aca:	2b01      	cmp	r3, #1
  400acc:	d057      	beq.n	400b7e <computeWaveletPitch+0x5c6>
  400ace:	2b02      	cmp	r3, #2
  400ad0:	d030      	beq.n	400b34 <computeWaveletPitch+0x57c>
  400ad2:	2b03      	cmp	r3, #3
  400ad4:	d02c      	beq.n	400b30 <computeWaveletPitch+0x578>
  400ad6:	2b05      	cmp	r3, #5
  400ad8:	bf0c      	ite	eq
  400ada:	2320      	moveq	r3, #32
  400adc:	2310      	movne	r3, #16
		curModeDistance = distAvg;
  400ade:	eef0 9a46 	vmov.f32	s19, s12
  400ae2:	e597      	b.n	400614 <computeWaveletPitch+0x5c>
				if (i == 2*bestDistance)
  400ae4:	ebb5 0f46 	cmp.w	r5, r6, lsl #1
  400ae8:	bf08      	it	eq
  400aea:	462e      	moveq	r6, r5
  400aec:	e790      	b.n	400a10 <computeWaveletPitch+0x458>
			int32_t summed = 0;
  400aee:	2100      	movs	r1, #0
  400af0:	e789      	b.n	400a06 <computeWaveletPitch+0x44e>
					d = Abs(mins[i] - mins[i+j]);
  400af2:	f85e 3022 	ldr.w	r3, [lr, r2, lsl #2]
  400af6:	ebac 0303 	sub.w	r3, ip, r3
  400afa:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
  400afe:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
					distances[d]++; 
  400b02:	f85b 3020 	ldr.w	r3, [fp, r0, lsl #2]
  400b06:	3301      	adds	r3, #1
  400b08:	f84b 3020 	str.w	r3, [fp, r0, lsl #2]
  400b0c:	e725      	b.n	40095a <computeWaveletPitch+0x3a2>
		if (curSamNb < 2) return pitchF;
  400b0e:	2000      	movs	r0, #0
  400b10:	494d      	ldr	r1, [pc, #308]	; (400c48 <computeWaveletPitch+0x690>)
  400b12:	f8df 814c 	ldr.w	r8, [pc, #332]	; 400c60 <computeWaveletPitch+0x6a8>
  400b16:	eeb0 7a48 	vmov.f32	s14, s16
  400b1a:	2301      	movs	r3, #1
  400b1c:	4602      	mov	r2, r0
  400b1e:	4606      	mov	r6, r0
  400b20:	4605      	mov	r5, r0
  400b22:	46c4      	mov	ip, r8
  400b24:	9101      	str	r1, [sp, #4]
  400b26:	460f      	mov	r7, r1
  400b28:	e66a      	b.n	400800 <computeWaveletPitch+0x248>
		for (j = -delta ; j <= delta ; j++) 
  400b2a:	ed9f 6a48 	vldr	s12, [pc, #288]	; 400c4c <computeWaveletPitch+0x694>
  400b2e:	e796      	b.n	400a5e <computeWaveletPitch+0x4a6>
	for (j = 0; j < i; j++) res <<= 1;
  400b30:	2308      	movs	r3, #8
  400b32:	e7d4      	b.n	400ade <computeWaveletPitch+0x526>
  400b34:	2304      	movs	r3, #4
  400b36:	e7d2      	b.n	400ade <computeWaveletPitch+0x526>
		if (pitchtracker._prevPitch > -1.0f) 
  400b38:	4a45      	ldr	r2, [pc, #276]	; (400c50 <computeWaveletPitch+0x698>)
  400b3a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  400b3e:	edd2 7a00 	vldr	s15, [r2]
  400b42:	eef4 7ac7 	vcmpe.f32	s15, s14
  400b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400b4a:	dd1a      	ble.n	400b82 <computeWaveletPitch+0x5ca>
			if (pitchtracker._pitchConfidence >= 1) 
  400b4c:	6853      	ldr	r3, [r2, #4]
  400b4e:	2b00      	cmp	r3, #0
  400b50:	dd20      	ble.n	400b94 <computeWaveletPitch+0x5dc>
				pitchtracker._pitchConfidence = Max(0, pitchtracker._pitchConfidence - 1);
  400b52:	3b01      	subs	r3, #1
  400b54:	6053      	str	r3, [r2, #4]
	if (pitchtracker._pitchConfidence >= 1) 
  400b56:	2b00      	cmp	r3, #0
  400b58:	dd13      	ble.n	400b82 <computeWaveletPitch+0x5ca>
	if (pitch < -1.0f) pitch = 0.0f;
  400b5a:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
  400b5e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 400c44 <computeWaveletPitch+0x68c>
  400b62:	eef4 7a66 	vcmp.f32	s15, s13
  400b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400b6a:	bf48      	it	mi
  400b6c:	eef0 7a47 	vmovmi.f32	s15, s14
	return _dywapitch_dynamicprocess(get_raw_pitch(samples)); 
  400b70:	ee17 0a90 	vmov	r0, s15
  400b74:	b007      	add	sp, #28
  400b76:	ecbd 8b04 	vpop	{d8-d9}
  400b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (j = 0; j < i; j++) res <<= 1;
  400b7e:	2302      	movs	r3, #2
  400b80:	e7ad      	b.n	400ade <computeWaveletPitch+0x526>
	float estimatedPitch = -1.0f;
  400b82:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  400b86:	ee17 0a90 	vmov	r0, s15
  400b8a:	b007      	add	sp, #28
  400b8c:	ecbd 8b04 	vpop	{d8-d9}
  400b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				pitchtracker._pitchConfidence = 0;
  400b94:	2300      	movs	r3, #0
				pitchtracker._prevPitch = -1.0f;
  400b96:	ed82 7a00 	vstr	s14, [r2]
		pitch = -1.0f;
  400b9a:	eef0 7a47 	vmov.f32	s15, s14
				pitchtracker._pitchConfidence = 0;
  400b9e:	6053      	str	r3, [r2, #4]
  400ba0:	e7f1      	b.n	400b86 <computeWaveletPitch+0x5ce>
				pitchF = DYW_SAMPLING_RATE/(_2power(curLevel-1)*curModeDistance);
  400ba2:	3b01      	subs	r3, #1
	for (j = 0; j < i; j++) res <<= 1;
  400ba4:	2b00      	cmp	r3, #0
  400ba6:	f340 808e 	ble.w	400cc6 <computeWaveletPitch+0x70e>
  400baa:	2b01      	cmp	r3, #1
  400bac:	f000 809e 	beq.w	400cec <computeWaveletPitch+0x734>
  400bb0:	2b02      	cmp	r3, #2
  400bb2:	f000 8099 	beq.w	400ce8 <computeWaveletPitch+0x730>
  400bb6:	2b04      	cmp	r3, #4
  400bb8:	bf0c      	ite	eq
  400bba:	2310      	moveq	r3, #16
  400bbc:	2308      	movne	r3, #8
  400bbe:	ee07 3a90 	vmov	s15, r3
  400bc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				pitchF = DYW_SAMPLING_RATE/(_2power(curLevel-1)*curModeDistance);
  400bc6:	ee69 9aa7 	vmul.f32	s19, s19, s15
  400bca:	eddf 6a22 	vldr	s13, [pc, #136]	; 400c54 <computeWaveletPitch+0x69c>
	if (pitch < 1.0f) pitch = -1.0f;
  400bce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
				pitchF = DYW_SAMPLING_RATE/(_2power(curLevel-1)*curModeDistance);
  400bd2:	eec6 7aa9 	vdiv.f32	s15, s13, s19
	if (pitch < 1.0f) pitch = -1.0f;
  400bd6:	eef4 7ac7 	vcmpe.f32	s15, s14
  400bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400bde:	d4ab      	bmi.n	400b38 <computeWaveletPitch+0x580>
	if (pitch > -1.0) {
  400be0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  400be4:	eef4 7ac7 	vcmpe.f32	s15, s14
  400be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400bec:	dda4      	ble.n	400b38 <computeWaveletPitch+0x580>
		if (pitchtracker._prevPitch < 0.0f) 
  400bee:	4a18      	ldr	r2, [pc, #96]	; (400c50 <computeWaveletPitch+0x698>)
  400bf0:	edd2 6a00 	vldr	s13, [r2]
  400bf4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400bfc:	d43a      	bmi.n	400c74 <computeWaveletPitch+0x6bc>
		else if (abs(pitchtracker._prevPitch - pitch)/pitch < acceptedError) 
  400bfe:	ee36 7ae7 	vsub.f32	s14, s13, s15
  400c02:	ed9f 6a15 	vldr	s12, [pc, #84]	; 400c58 <computeWaveletPitch+0x6a0>
  400c06:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  400c0a:	ee17 3a10 	vmov	r3, s14
  400c0e:	2b00      	cmp	r3, #0
  400c10:	bfb8      	it	lt
  400c12:	425b      	neglt	r3, r3
  400c14:	ee07 3a10 	vmov	s14, r3
			pitchtracker._pitchConfidence = Min(maxConfidence, pitchtracker._pitchConfidence + 1); // maximum 3
  400c18:	6853      	ldr	r3, [r2, #4]
		else if (abs(pitchtracker._prevPitch - pitch)/pitch < acceptedError) 
  400c1a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  400c1e:	eec7 5a27 	vdiv.f32	s11, s14, s15
  400c22:	eef4 5ac6 	vcmpe.f32	s11, s12
  400c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400c2a:	d51b      	bpl.n	400c64 <computeWaveletPitch+0x6ac>
			pitchtracker._pitchConfidence = Min(maxConfidence, pitchtracker._pitchConfidence + 1); // maximum 3
  400c2c:	2b04      	cmp	r3, #4
			pitchtracker._prevPitch = pitch;
  400c2e:	edc2 7a00 	vstr	s15, [r2]
			pitchtracker._pitchConfidence = Min(maxConfidence, pitchtracker._pitchConfidence + 1); // maximum 3
  400c32:	bfd4      	ite	le
  400c34:	3301      	addle	r3, #1
  400c36:	2305      	movgt	r3, #5
				pitchtracker._pitchConfidence = max(0, pitchtracker._pitchConfidence - 1);
  400c38:	6053      	str	r3, [r2, #4]
  400c3a:	e78c      	b.n	400b56 <computeWaveletPitch+0x59e>
  400c3c:	20405400 	.word	0x20405400
  400c40:	00404ac1 	.word	0x00404ac1
  400c44:	00000000 	.word	0x00000000
  400c48:	20407400 	.word	0x20407400
  400c4c:	7fc00000 	.word	0x7fc00000
  400c50:	2040001c 	.word	0x2040001c
  400c54:	4735a700 	.word	0x4735a700
  400c58:	3e4ccccd 	.word	0x3e4ccccd
  400c5c:	20406400 	.word	0x20406400
  400c60:	fff0bdc0 	.word	0xfff0bdc0
		else if ((pitchtracker._pitchConfidence >= maxConfidence-2) && Abs(pitchtracker._prevPitch - 2.0f*pitch)/(2.0f*pitch) < acceptedError) 
  400c64:	2b02      	cmp	r3, #2
  400c66:	dc0a      	bgt.n	400c7e <computeWaveletPitch+0x6c6>
			if (pitchtracker._pitchConfidence >= 1) 
  400c68:	2b00      	cmp	r3, #0
  400c6a:	dd03      	ble.n	400c74 <computeWaveletPitch+0x6bc>
				pitchtracker._pitchConfidence = max(0, pitchtracker._pitchConfidence - 1);
  400c6c:	3b01      	subs	r3, #1
				estimatedPitch = pitchtracker._prevPitch;
  400c6e:	eef0 7a66 	vmov.f32	s15, s13
  400c72:	e7e1      	b.n	400c38 <computeWaveletPitch+0x680>
				pitchtracker._pitchConfidence = 1;
  400c74:	2301      	movs	r3, #1
				pitchtracker._prevPitch = pitch;
  400c76:	edc2 7a00 	vstr	s15, [r2]
				pitchtracker._pitchConfidence = 1;
  400c7a:	6053      	str	r3, [r2, #4]
  400c7c:	e76d      	b.n	400b5a <computeWaveletPitch+0x5a2>
		else if ((pitchtracker._pitchConfidence >= maxConfidence-2) && Abs(pitchtracker._prevPitch - 2.0f*pitch)/(2.0f*pitch) < acceptedError) 
  400c7e:	ee37 7aa7 	vadd.f32	s14, s15, s15
  400c82:	ee76 5ac7 	vsub.f32	s11, s13, s14
  400c86:	eef0 5ae5 	vabs.f32	s11, s11
  400c8a:	ee85 5a87 	vdiv.f32	s10, s11, s14
  400c8e:	eeb4 5ac6 	vcmpe.f32	s10, s12
  400c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400c96:	d504      	bpl.n	400ca2 <computeWaveletPitch+0x6ea>
			pitchtracker._prevPitch = estimatedPitch;
  400c98:	ed82 7a00 	vstr	s14, [r2]
			estimatedPitch = 2.0f*pitch;
  400c9c:	eef0 7a47 	vmov.f32	s15, s14
  400ca0:	e75b      	b.n	400b5a <computeWaveletPitch+0x5a2>
		else if ((pitchtracker._pitchConfidence >= maxConfidence-2) && Abs(pitchtracker._prevPitch - 0.5f*pitch)/(0.5f*pitch) < acceptedError) 
  400ca2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
  400ca6:	ee67 7a87 	vmul.f32	s15, s15, s14
  400caa:	ee36 7ae7 	vsub.f32	s14, s13, s15
  400cae:	eeb0 7ac7 	vabs.f32	s14, s14
  400cb2:	eec7 5a27 	vdiv.f32	s11, s14, s15
  400cb6:	eef4 5ac6 	vcmpe.f32	s11, s12
  400cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400cbe:	d5d5      	bpl.n	400c6c <computeWaveletPitch+0x6b4>
			pitchtracker._prevPitch = estimatedPitch;
  400cc0:	edc2 7a00 	vstr	s15, [r2]
  400cc4:	e749      	b.n	400b5a <computeWaveletPitch+0x5a2>
	for (j = 0; j < i; j++) res <<= 1;
  400cc6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  400cca:	e77c      	b.n	400bc6 <computeWaveletPitch+0x60e>
					d = Abs(maxs[i] - maxs[i+j]);
  400ccc:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
  400cd0:	ebae 0303 	sub.w	r3, lr, r3
  400cd4:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
  400cd8:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
					distances[d]++; 
  400cdc:	f85b 3020 	ldr.w	r3, [fp, r0, lsl #2]
  400ce0:	3301      	adds	r3, #1
  400ce2:	f84b 3020 	str.w	r3, [fp, r0, lsl #2]
  400ce6:	e662      	b.n	4009ae <computeWaveletPitch+0x3f6>
	for (j = 0; j < i; j++) res <<= 1;
  400ce8:	2304      	movs	r3, #4
  400cea:	e768      	b.n	400bbe <computeWaveletPitch+0x606>
  400cec:	2302      	movs	r3, #2
  400cee:	e766      	b.n	400bbe <computeWaveletPitch+0x606>

00400cf0 <PSOLA_init>:
static float prev_pitch_shifts[MAX_NUM_SHIFTS]; 
static float window[10*WIN_SIZE]; // sufficiently large window array  
/************************ Static variables *********************/

void PSOLA_init(void)
{
  400cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	arm_fill_f32(0.0f, input_ring_buffer, RING_BUFFER_SIZE); 
  400cf2:	2600      	movs	r6, #0
  400cf4:	4c19      	ldr	r4, [pc, #100]	; (400d5c <PSOLA_init+0x6c>)
  400cf6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400cfa:	4919      	ldr	r1, [pc, #100]	; (400d60 <PSOLA_init+0x70>)
  400cfc:	4630      	mov	r0, r6
	arm_fill_f32(0.0f, output_ring_buffer, RING_BUFFER_SIZE);
	arm_fill_f32(0.0f, window, 10*WIN_SIZE); 
	arm_fill_f32(1.0f, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  400cfe:	4d19      	ldr	r5, [pc, #100]	; (400d64 <PSOLA_init+0x74>)
	arm_fill_f32(0.0f, input_ring_buffer, RING_BUFFER_SIZE); 
  400d00:	47a0      	blx	r4
	arm_fill_f32(0.0f, output_ring_buffer, RING_BUFFER_SIZE);
  400d02:	4630      	mov	r0, r6
  400d04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400d08:	4917      	ldr	r1, [pc, #92]	; (400d68 <PSOLA_init+0x78>)
  400d0a:	47a0      	blx	r4
	arm_fill_f32(0.0f, window, 10*WIN_SIZE); 
  400d0c:	4630      	mov	r0, r6
  400d0e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
  400d12:	4916      	ldr	r1, [pc, #88]	; (400d6c <PSOLA_init+0x7c>)
  400d14:	47a0      	blx	r4
  400d16:	272c      	movs	r7, #44	; 0x2c
	arm_fill_f32(1.0f, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  400d18:	4629      	mov	r1, r5
  400d1a:	220b      	movs	r2, #11
  400d1c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
	prev_pitch_shifts[0] = 1.0f; 
  400d20:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
	arm_fill_f32(1.0f, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  400d24:	47a0      	blx	r4
	prev_pitch_shifts[1] = -1.0f; 
  400d26:	4b12      	ldr	r3, [pc, #72]	; (400d70 <PSOLA_init+0x80>)
  400d28:	463a      	mov	r2, r7
  400d2a:	4c12      	ldr	r4, [pc, #72]	; (400d74 <PSOLA_init+0x84>)
  400d2c:	2100      	movs	r1, #0
  400d2e:	4812      	ldr	r0, [pc, #72]	; (400d78 <PSOLA_init+0x88>)
  400d30:	606b      	str	r3, [r5, #4]
	prev_pitch_shifts[0] = 1.0f; 
  400d32:	602e      	str	r6, [r5, #0]
  400d34:	47a0      	blx	r4
  400d36:	463a      	mov	r2, r7
  400d38:	2100      	movs	r1, #0
  400d3a:	4810      	ldr	r0, [pc, #64]	; (400d7c <PSOLA_init+0x8c>)
	{
		outPtrList[i] = 0; 
		saved_samplesLeftInPeriod[i] = 0; 
	}
		
	current_num_shifts = 1; // always doing root 
  400d3c:	2701      	movs	r7, #1
  400d3e:	47a0      	blx	r4
  400d40:	4e0f      	ldr	r6, [pc, #60]	; (400d80 <PSOLA_init+0x90>)
	
	readPos = RING_BUFFER_SIZE - WIN_SIZE; // + WEIRD_OFFSET; 
  400d42:	4c10      	ldr	r4, [pc, #64]	; (400d84 <PSOLA_init+0x94>)
  400d44:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	inPtr = 0; 
  400d48:	490f      	ldr	r1, [pc, #60]	; (400d88 <PSOLA_init+0x98>)
  400d4a:	2000      	movs	r0, #0
	inputPeriodLength = PSOLA_SAMPLE_RATE / MINIMUM_PITCH; 
  400d4c:	4b0f      	ldr	r3, [pc, #60]	; (400d8c <PSOLA_init+0x9c>)
  400d4e:	f240 12d1 	movw	r2, #465	; 0x1d1
	current_num_shifts = 1; // always doing root 
  400d52:	6037      	str	r7, [r6, #0]
	readPos = RING_BUFFER_SIZE - WIN_SIZE; // + WEIRD_OFFSET; 
  400d54:	6025      	str	r5, [r4, #0]
	inPtr = 0; 
  400d56:	6008      	str	r0, [r1, #0]
	inputPeriodLength = PSOLA_SAMPLE_RATE / MINIMUM_PITCH; 
  400d58:	601a      	str	r2, [r3, #0]
  400d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400d5c:	00403195 	.word	0x00403195
  400d60:	20409000 	.word	0x20409000
  400d64:	20412000 	.word	0x20412000
  400d68:	2040e000 	.word	0x2040e000
  400d6c:	2041205c 	.word	0x2041205c
  400d70:	bf800000 	.word	0xbf800000
  400d74:	00404ac1 	.word	0x00404ac1
  400d78:	2040d000 	.word	0x2040d000
  400d7c:	20412030 	.word	0x20412030
  400d80:	20408400 	.word	0x20408400
  400d84:	2041202c 	.word	0x2041202c
  400d88:	20408404 	.word	0x20408404
  400d8c:	20408408 	.word	0x20408408

00400d90 <create_harmonies>:
	currentPitch = MINIMUM_PITCH; 
}

// assumes valid pitch shifts 
void create_harmonies(float* input, float *output, float inputPitch, float *pitch_shifts_in, float harm_volume, float dry_volume)
{
  400d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400d94:	ed2d 8b08 	vpush	{d8-d11}
  400d98:	b08d      	sub	sp, #52	; 0x34
  400d9a:	ee09 2a10 	vmov	s18, r2
  400d9e:	4cb2      	ldr	r4, [pc, #712]	; (401068 <create_harmonies+0x2d8>)
  400da0:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t i, w; 
	int32_t olaIdx; 
	
	uint32_t saved_inPtr = inPtr; 
  400da2:	4bb2      	ldr	r3, [pc, #712]	; (40106c <create_harmonies+0x2dc>)
{
  400da4:	910b      	str	r1, [sp, #44]	; 0x2c
	uint32_t saved_inPtr = inPtr; 
  400da6:	681b      	ldr	r3, [r3, #0]
{
  400da8:	ed9d 8a1e 	vldr	s16, [sp, #120]	; 0x78
	uint32_t outPtr; 
	uint32_t pitch_idx = 0; 
	
	uint32_t starting_input_ptr = inPtr + WIN_SIZE; 
  400dac:	461a      	mov	r2, r3
	uint32_t saved_inPtr = inPtr; 
  400dae:	9307      	str	r3, [sp, #28]
{
  400db0:	eddd 8a1f 	vldr	s17, [sp, #124]	; 0x7c
	uint32_t starting_input_ptr = inPtr + WIN_SIZE; 
  400db4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  400db8:	f502 6100 	add.w	r1, r2, #2048	; 0x800
	for (i = 0; i < WIN_SIZE; i++)
	{
		input_ring_buffer[(starting_input_ptr++) & RING_BUFFER_MASK] = input[i]; 
  400dbc:	f3c3 020b 	ubfx	r2, r3, #0, #12
  400dc0:	3301      	adds	r3, #1
  400dc2:	f850 5b04 	ldr.w	r5, [r0], #4
  400dc6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	for (i = 0; i < WIN_SIZE; i++)
  400dca:	428b      	cmp	r3, r1
		input_ring_buffer[(starting_input_ptr++) & RING_BUFFER_MASK] = input[i]; 
  400dcc:	6015      	str	r5, [r2, #0]
	for (i = 0; i < WIN_SIZE; i++)
  400dce:	d1f5      	bne.n	400dbc <create_harmonies+0x2c>
	}
			
	uint32_t outLag;
	uint32_t inHalfAway;
	float periodRatio;
	float inputPeriodLengthRecip = 1.0f / inputPeriodLength;
  400dd0:	4ba7      	ldr	r3, [pc, #668]	; (401070 <create_harmonies+0x2e0>)
  400dd2:	f8d3 8000 	ldr.w	r8, [r3]
	uint32_t samplesLeftInPeriod = 0; 
	
	float scale = 1.0f;  
	if (current_num_shifts > 1) 
  400dd6:	4ba7      	ldr	r3, [pc, #668]	; (401074 <create_harmonies+0x2e4>)
	float inputPeriodLengthRecip = 1.0f / inputPeriodLength;
  400dd8:	ee07 8a90 	vmov	s15, r8
	if (current_num_shifts > 1) 
  400ddc:	6818      	ldr	r0, [r3, #0]
	float inputPeriodLengthRecip = 1.0f / inputPeriodLength;
  400dde:	eef8 aae7 	vcvt.f32.s32	s21, s15
	if (current_num_shifts > 1) 
  400de2:	2801      	cmp	r0, #1
  400de4:	f240 813c 	bls.w	401060 <create_harmonies+0x2d0>
		scale = 1.0f / log((float)(current_num_shifts+1)); 
  400de8:	3001      	adds	r0, #1
  400dea:	4ba3      	ldr	r3, [pc, #652]	; (401078 <create_harmonies+0x2e8>)
  400dec:	4da3      	ldr	r5, [pc, #652]	; (40107c <create_harmonies+0x2ec>)
  400dee:	ee07 0a90 	vmov	s15, r0
  400df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
  400df6:	ee17 0a90 	vmov	r0, s15
  400dfa:	4798      	blx	r3
  400dfc:	4ba0      	ldr	r3, [pc, #640]	; (401080 <create_harmonies+0x2f0>)
  400dfe:	4798      	blx	r3
  400e00:	4602      	mov	r2, r0
  400e02:	460b      	mov	r3, r1
  400e04:	2000      	movs	r0, #0
  400e06:	499f      	ldr	r1, [pc, #636]	; (401084 <create_harmonies+0x2f4>)
  400e08:	47a8      	blx	r5
  400e0a:	4b9f      	ldr	r3, [pc, #636]	; (401088 <create_harmonies+0x2f8>)
  400e0c:	4798      	blx	r3
  400e0e:	ee07 0a90 	vmov	s15, r0
	
	// pre-compute window function	
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e12:	f1b8 0f00 	cmp.w	r8, #0
  400e16:	dd24      	ble.n	400e62 <create_harmonies+0xd2>
  400e18:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 40108c <create_harmonies+0x2fc>
  400e1c:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
	{
		window[w] = scale * (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  400e20:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
  400e24:	4e9a      	ldr	r6, [pc, #616]	; (401090 <create_harmonies+0x300>)
  400e26:	ee87 aa2a 	vdiv.f32	s20, s14, s21
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e2a:	2500      	movs	r5, #0
  400e2c:	4f99      	ldr	r7, [pc, #612]	; (401094 <create_harmonies+0x304>)
  400e2e:	ee67 9aa9 	vmul.f32	s19, s15, s19
		window[w] = scale * (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  400e32:	ee07 5a90 	vmov	s15, r5
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e36:	3501      	adds	r5, #1
		window[w] = scale * (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  400e38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400e3c:	ee67 7a8a 	vmul.f32	s15, s15, s20
  400e40:	ee17 0a90 	vmov	r0, s15
  400e44:	47b8      	blx	r7
  400e46:	ee07 0a90 	vmov	s15, r0
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e4a:	4b89      	ldr	r3, [pc, #548]	; (401070 <create_harmonies+0x2e0>)
		window[w] = scale * (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  400e4c:	ee7b 7a67 	vsub.f32	s15, s22, s15
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e50:	681b      	ldr	r3, [r3, #0]
		window[w] = scale * (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  400e52:	ee67 7aa9 	vmul.f32	s15, s15, s19
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e56:	ebb5 0f43 	cmp.w	r5, r3, lsl #1
		window[w] = scale * (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  400e5a:	ece6 7a01 	vstmia	r6!, {s15}
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e5e:	dbe8      	blt.n	400e32 <create_harmonies+0xa2>
  400e60:	4698      	mov	r8, r3
	}
		
	// for each pitch shift 
	while(pitch_shifts_in[pitch_idx] > 0.0f && pitch_idx < MAX_NUM_SHIFTS)
  400e62:	9909      	ldr	r1, [sp, #36]	; 0x24
  400e64:	ed91 7a00 	vldr	s14, [r1]
  400e68:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  400e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400e70:	f340 81d2 	ble.w	401218 <create_harmonies+0x488>
  400e74:	4b7f      	ldr	r3, [pc, #508]	; (401074 <create_harmonies+0x2e4>)
  400e76:	ee07 8a90 	vmov	s15, r8
		
		if (pitch_idx > current_num_shifts - 1)
		{
			// find closest harmony for the onset of a new harmony 
			float tmp; 
			float min = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[0]); 
  400e7a:	4a87      	ldr	r2, [pc, #540]	; (401098 <create_harmonies+0x308>)
		periodRatio = 1.0f / pitch_shifts_in[pitch_idx]; 
  400e7c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
  400e80:	681b      	ldr	r3, [r3, #0]
  400e82:	eef8 0ae7 	vcvt.f32.s32	s1, s15
  400e86:	3104      	adds	r1, #4
			float min = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[0]); 
  400e88:	ed92 1a00 	vldr	s2, [r2]
  400e8c:	4618      	mov	r0, r3
  400e8e:	9304      	str	r3, [sp, #16]
			outPtr = outPtrList[0]; 
			for (i = 1; i < current_num_shifts; i++)
			{
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400e90:	2300      	movs	r3, #0
  400e92:	edd2 1a01 	vldr	s3, [r2, #4]
  400e96:	3801      	subs	r0, #1
  400e98:	ed92 2a02 	vldr	s4, [r2, #8]
  400e9c:	469b      	mov	fp, r3
  400e9e:	edd2 2a03 	vldr	s5, [r2, #12]
  400ea2:	900a      	str	r0, [sp, #40]	; 0x28
  400ea4:	f1c8 0900 	rsb	r9, r8, #0
  400ea8:	487c      	ldr	r0, [pc, #496]	; (40109c <create_harmonies+0x30c>)
  400eaa:	ed92 3a04 	vldr	s6, [r2, #16]
  400eae:	edd2 3a05 	vldr	s7, [r2, #20]
  400eb2:	ed92 4a06 	vldr	s8, [r2, #24]
  400eb6:	edd2 4a07 	vldr	s9, [r2, #28]
  400eba:	ed92 5a08 	vldr	s10, [r2, #32]
  400ebe:	edd2 5a09 	vldr	s11, [r2, #36]	; 0x24
  400ec2:	ed92 6a0a 	vldr	s12, [r2, #40]	; 0x28
  400ec6:	4d76      	ldr	r5, [pc, #472]	; (4010a0 <create_harmonies+0x310>)
  400ec8:	9006      	str	r0, [sp, #24]
  400eca:	9108      	str	r1, [sp, #32]
		if (pitch_idx > current_num_shifts - 1)
  400ecc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
		periodRatio = 1.0f / pitch_shifts_in[pitch_idx]; 
  400ece:	eec0 9a07 	vdiv.f32	s19, s0, s14
		if (pitch_idx > current_num_shifts - 1)
  400ed2:	4593      	cmp	fp, r2
  400ed4:	f240 8197 	bls.w	401206 <create_harmonies+0x476>
			outPtr = outPtrList[0]; 
  400ed8:	4a72      	ldr	r2, [pc, #456]	; (4010a4 <create_harmonies+0x314>)
			float min = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[0]); 
  400eda:	ee77 7a41 	vsub.f32	s15, s14, s2
			outPtr = outPtrList[0]; 
  400ede:	f8d2 e000 	ldr.w	lr, [r2]
			for (i = 1; i < current_num_shifts; i++)
  400ee2:	9a04      	ldr	r2, [sp, #16]
			float min = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[0]); 
  400ee4:	eef0 7ae7 	vabs.f32	s15, s15
			for (i = 1; i < current_num_shifts; i++)
  400ee8:	2a01      	cmp	r2, #1
  400eea:	f240 80dd 	bls.w	4010a8 <create_harmonies+0x318>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400eee:	ee77 6a61 	vsub.f32	s13, s14, s3
  400ef2:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  400ef6:	eef4 7ae6 	vcmpe.f32	s15, s13
  400efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400efe:	dd06      	ble.n	400f0e <create_harmonies+0x17e>
				{
					outPtr = outPtrList[i]; 
  400f00:	4b68      	ldr	r3, [pc, #416]	; (4010a4 <create_harmonies+0x314>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400f02:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  400f06:	f8d3 e004 	ldr.w	lr, [r3, #4]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  400f0a:	4b64      	ldr	r3, [pc, #400]	; (40109c <create_harmonies+0x30c>)
  400f0c:	685b      	ldr	r3, [r3, #4]
			for (i = 1; i < current_num_shifts; i++)
  400f0e:	2a02      	cmp	r2, #2
  400f10:	f000 80ca 	beq.w	4010a8 <create_harmonies+0x318>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400f14:	ee77 6a42 	vsub.f32	s13, s14, s4
  400f18:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  400f1c:	eef4 7ae6 	vcmpe.f32	s15, s13
  400f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400f24:	dd06      	ble.n	400f34 <create_harmonies+0x1a4>
					outPtr = outPtrList[i]; 
  400f26:	4b5f      	ldr	r3, [pc, #380]	; (4010a4 <create_harmonies+0x314>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400f28:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  400f2c:	f8d3 e008 	ldr.w	lr, [r3, #8]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  400f30:	4b5a      	ldr	r3, [pc, #360]	; (40109c <create_harmonies+0x30c>)
  400f32:	689b      	ldr	r3, [r3, #8]
			for (i = 1; i < current_num_shifts; i++)
  400f34:	2a03      	cmp	r2, #3
  400f36:	f000 80b7 	beq.w	4010a8 <create_harmonies+0x318>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400f3a:	ee77 6a62 	vsub.f32	s13, s14, s5
  400f3e:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  400f42:	eef4 7ae6 	vcmpe.f32	s15, s13
  400f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400f4a:	dd06      	ble.n	400f5a <create_harmonies+0x1ca>
					outPtr = outPtrList[i]; 
  400f4c:	4b55      	ldr	r3, [pc, #340]	; (4010a4 <create_harmonies+0x314>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400f4e:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  400f52:	f8d3 e00c 	ldr.w	lr, [r3, #12]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  400f56:	4b51      	ldr	r3, [pc, #324]	; (40109c <create_harmonies+0x30c>)
  400f58:	68db      	ldr	r3, [r3, #12]
			for (i = 1; i < current_num_shifts; i++)
  400f5a:	2a04      	cmp	r2, #4
  400f5c:	f000 80a4 	beq.w	4010a8 <create_harmonies+0x318>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400f60:	ee77 6a43 	vsub.f32	s13, s14, s6
  400f64:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  400f68:	eef4 7ae6 	vcmpe.f32	s15, s13
  400f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400f70:	dd06      	ble.n	400f80 <create_harmonies+0x1f0>
					outPtr = outPtrList[i]; 
  400f72:	4b4c      	ldr	r3, [pc, #304]	; (4010a4 <create_harmonies+0x314>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400f74:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  400f78:	f8d3 e010 	ldr.w	lr, [r3, #16]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  400f7c:	4b47      	ldr	r3, [pc, #284]	; (40109c <create_harmonies+0x30c>)
  400f7e:	691b      	ldr	r3, [r3, #16]
			for (i = 1; i < current_num_shifts; i++)
  400f80:	2a05      	cmp	r2, #5
  400f82:	f000 8091 	beq.w	4010a8 <create_harmonies+0x318>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400f86:	ee77 6a63 	vsub.f32	s13, s14, s7
  400f8a:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  400f8e:	eef4 7ae6 	vcmpe.f32	s15, s13
  400f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400f96:	dd06      	ble.n	400fa6 <create_harmonies+0x216>
					outPtr = outPtrList[i]; 
  400f98:	4b42      	ldr	r3, [pc, #264]	; (4010a4 <create_harmonies+0x314>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400f9a:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  400f9e:	f8d3 e014 	ldr.w	lr, [r3, #20]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  400fa2:	4b3e      	ldr	r3, [pc, #248]	; (40109c <create_harmonies+0x30c>)
  400fa4:	695b      	ldr	r3, [r3, #20]
			for (i = 1; i < current_num_shifts; i++)
  400fa6:	2a06      	cmp	r2, #6
  400fa8:	d07e      	beq.n	4010a8 <create_harmonies+0x318>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400faa:	ee77 6a44 	vsub.f32	s13, s14, s8
  400fae:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  400fb2:	eef4 7ae6 	vcmpe.f32	s15, s13
  400fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400fba:	dd06      	ble.n	400fca <create_harmonies+0x23a>
					outPtr = outPtrList[i]; 
  400fbc:	4b39      	ldr	r3, [pc, #228]	; (4010a4 <create_harmonies+0x314>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400fbe:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  400fc2:	f8d3 e018 	ldr.w	lr, [r3, #24]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  400fc6:	4b35      	ldr	r3, [pc, #212]	; (40109c <create_harmonies+0x30c>)
  400fc8:	699b      	ldr	r3, [r3, #24]
			for (i = 1; i < current_num_shifts; i++)
  400fca:	2a07      	cmp	r2, #7
  400fcc:	d06c      	beq.n	4010a8 <create_harmonies+0x318>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400fce:	ee77 6a64 	vsub.f32	s13, s14, s9
  400fd2:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  400fd6:	eef4 7ae6 	vcmpe.f32	s15, s13
  400fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400fde:	dd06      	ble.n	400fee <create_harmonies+0x25e>
					outPtr = outPtrList[i]; 
  400fe0:	4b30      	ldr	r3, [pc, #192]	; (4010a4 <create_harmonies+0x314>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400fe2:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  400fe6:	f8d3 e01c 	ldr.w	lr, [r3, #28]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  400fea:	4b2c      	ldr	r3, [pc, #176]	; (40109c <create_harmonies+0x30c>)
  400fec:	69db      	ldr	r3, [r3, #28]
			for (i = 1; i < current_num_shifts; i++)
  400fee:	2a08      	cmp	r2, #8
  400ff0:	d05a      	beq.n	4010a8 <create_harmonies+0x318>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400ff2:	ee77 6a45 	vsub.f32	s13, s14, s10
  400ff6:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  400ffa:	eef4 7ae6 	vcmpe.f32	s15, s13
  400ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  401002:	dd06      	ble.n	401012 <create_harmonies+0x282>
					outPtr = outPtrList[i]; 
  401004:	4b27      	ldr	r3, [pc, #156]	; (4010a4 <create_harmonies+0x314>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  401006:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  40100a:	f8d3 e020 	ldr.w	lr, [r3, #32]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  40100e:	4b23      	ldr	r3, [pc, #140]	; (40109c <create_harmonies+0x30c>)
  401010:	6a1b      	ldr	r3, [r3, #32]
			for (i = 1; i < current_num_shifts; i++)
  401012:	2a09      	cmp	r2, #9
  401014:	d048      	beq.n	4010a8 <create_harmonies+0x318>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  401016:	ee77 6a65 	vsub.f32	s13, s14, s11
  40101a:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  40101e:	eef4 7ae6 	vcmpe.f32	s15, s13
  401022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  401026:	dd06      	ble.n	401036 <create_harmonies+0x2a6>
					outPtr = outPtrList[i]; 
  401028:	4b1e      	ldr	r3, [pc, #120]	; (4010a4 <create_harmonies+0x314>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  40102a:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  40102e:	f8d3 e024 	ldr.w	lr, [r3, #36]	; 0x24
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  401032:	4b1a      	ldr	r3, [pc, #104]	; (40109c <create_harmonies+0x30c>)
  401034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			for (i = 1; i < current_num_shifts; i++)
  401036:	2a0a      	cmp	r2, #10
  401038:	d036      	beq.n	4010a8 <create_harmonies+0x318>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  40103a:	ee37 7a46 	vsub.f32	s14, s14, s12
  40103e:	eeb0 7ac7 	vabs.f32	s14, s14
				if (tmp < min)
  401042:	eef4 7ac7 	vcmpe.f32	s15, s14
  401046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40104a:	dd04      	ble.n	401056 <create_harmonies+0x2c6>
					outPtr = outPtrList[i]; 
  40104c:	4b15      	ldr	r3, [pc, #84]	; (4010a4 <create_harmonies+0x314>)
  40104e:	f8d3 e028 	ldr.w	lr, [r3, #40]	; 0x28
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  401052:	4b12      	ldr	r3, [pc, #72]	; (40109c <create_harmonies+0x30c>)
  401054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			for (i = 1; i < current_num_shifts; i++)
  401056:	2a0b      	cmp	r2, #11
  401058:	d026      	beq.n	4010a8 <create_harmonies+0x318>
  40105a:	4b04      	ldr	r3, [pc, #16]	; (40106c <create_harmonies+0x2dc>)
  40105c:	9a07      	ldr	r2, [sp, #28]
  40105e:	601a      	str	r2, [r3, #0]
	float scale = 1.0f;  
  401060:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  401064:	e6d5      	b.n	400e12 <create_harmonies+0x82>
  401066:	bf00      	nop
  401068:	20409000 	.word	0x20409000
  40106c:	20408404 	.word	0x20408404
  401070:	20408408 	.word	0x20408408
  401074:	20408400 	.word	0x20408400
  401078:	00403cf1 	.word	0x00403cf1
  40107c:	00403fed 	.word	0x00403fed
  401080:	00403531 	.word	0x00403531
  401084:	3ff00000 	.word	0x3ff00000
  401088:	004042f9 	.word	0x004042f9
  40108c:	40490fdb 	.word	0x40490fdb
  401090:	2041205c 	.word	0x2041205c
  401094:	0040343d 	.word	0x0040343d
  401098:	20412000 	.word	0x20412000
  40109c:	20412030 	.word	0x20412030
  4010a0:	2040e000 	.word	0x2040e000
  4010a4:	2040d000 	.word	0x2040d000
  4010a8:	ea4f 028b 	mov.w	r2, fp, lsl #2
  4010ac:	9203      	str	r2, [sp, #12]
  4010ae:	ee60 9aa9 	vmul.f32	s19, s1, s19
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  4010b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4010b6:	f8dd a01c 	ldr.w	sl, [sp, #28]
  4010ba:	9205      	str	r2, [sp, #20]
  4010bc:	eefc 7ae9 	vcvt.u32.f32	s15, s19
  4010c0:	f8cd b004 	str.w	fp, [sp, #4]
  4010c4:	edcd 7a02 	vstr	s15, [sp, #8]
			samplesLeftInPeriod = saved_samplesLeftInPeriod[pitch_idx]; 
		}
		
		for (i = 0; i < WIN_SIZE; i++)
		{		
			if (samplesLeftInPeriod == 0)
  4010c8:	2b00      	cmp	r3, #0
  4010ca:	d13b      	bne.n	401144 <create_harmonies+0x3b4>
			{
				outLag = 1; 
			
				inHalfAway = (inPtr + RING_BUFFER_SIZE_D2) & RING_BUFFER_MASK;
  4010cc:	f50a 6c00 	add.w	ip, sl, #2048	; 0x800
  4010d0:	f3cc 0c0b 	ubfx	ip, ip, #0, #12
                
				if (inHalfAway < RING_BUFFER_SIZE_D2) 
  4010d4:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
  4010d8:	f080 808f 	bcs.w	4011fa <create_harmonies+0x46a>
				{
					/* The zero element of the input buffer lies
						in (inptr, inHalfAway] */
					if (outPtr < inHalfAway || outPtr > inPtr) {
  4010dc:	45f4      	cmp	ip, lr
  4010de:	d830      	bhi.n	401142 <create_harmonies+0x3b2>
  4010e0:	45f2      	cmp	sl, lr
  4010e2:	d32e      	bcc.n	401142 <create_harmonies+0x3b2>
  4010e4:	f50a 7b16 	add.w	fp, sl, #600	; 0x258
				}

				while(outLag == 1)
				{
					// set outPtr about the sample at which we OLA 
					outPtr = (outPtr + (uint32_t)((float)inputPeriodLength * periodRatio)) & RING_BUFFER_MASK; 
  4010e8:	9b02      	ldr	r3, [sp, #8]
  4010ea:	449e      	add	lr, r3
				
					// OLA 
					if (pitch_idx == 0)
  4010ec:	9b01      	ldr	r3, [sp, #4]
					outPtr = (outPtr + (uint32_t)((float)inputPeriodLength * periodRatio)) & RING_BUFFER_MASK; 
  4010ee:	f3ce 0e0b 	ubfx	lr, lr, #0, #12
					if (pitch_idx == 0)
  4010f2:	2b00      	cmp	r3, #0
  4010f4:	d157      	bne.n	4011a6 <create_harmonies+0x416>
					{
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  4010f6:	45c8      	cmp	r8, r9
  4010f8:	dd1e      	ble.n	401138 <create_harmonies+0x3a8>
  4010fa:	ebae 0208 	sub.w	r2, lr, r8
  4010fe:	485c      	ldr	r0, [pc, #368]	; (401270 <create_harmonies+0x4e0>)
  401100:	eb0e 0708 	add.w	r7, lr, r8
  401104:	ebab 060e 	sub.w	r6, fp, lr
						{
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
							dry_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  401108:	18b3      	adds	r3, r6, r2
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  40110a:	f3c2 010b 	ubfx	r1, r2, #0, #12
							dry_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  40110e:	ecb0 7a01 	vldmia	r0!, {s14}
  401112:	3201      	adds	r2, #1
  401114:	f3c3 030b 	ubfx	r3, r3, #0, #12
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  401118:	eb05 0181 	add.w	r1, r5, r1, lsl #2
							dry_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  40111c:	ee27 7a28 	vmul.f32	s14, s14, s17
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  401120:	4297      	cmp	r7, r2
							dry_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  401122:	eb04 0383 	add.w	r3, r4, r3, lsl #2
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  401126:	edd1 7a00 	vldr	s15, [r1]
  40112a:	edd3 6a00 	vldr	s13, [r3]
  40112e:	eee7 7a26 	vfma.f32	s15, s14, s13
  401132:	edc1 7a00 	vstr	s15, [r1]
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  401136:	d1e7      	bne.n	401108 <create_harmonies+0x378>
								harm_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
						}
					}
	
					
					if (inHalfAway < RING_BUFFER_SIZE_D2) 
  401138:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
  40113c:	d257      	bcs.n	4011ee <create_harmonies+0x45e>
					{
						/* The zero element of the input buffer lies
							in (inptr, inHalfAway] */
						if (outPtr < inHalfAway || outPtr > inPtr) {
  40113e:	45f4      	cmp	ip, lr
  401140:	d928      	bls.n	401194 <create_harmonies+0x404>
						}
					}		
				}
			
				// assume uniform frequency within window 
				samplesLeftInPeriod = inputPeriodLength;
  401142:	4643      	mov	r3, r8
		for (i = 0; i < WIN_SIZE; i++)
  401144:	9a05      	ldr	r2, [sp, #20]
			}
		
			--samplesLeftInPeriod; 
		
			// inc/wrap input ring buffer index 
			inPtr = (inPtr+1) & RING_BUFFER_MASK; 		
  401146:	f10a 0a01 	add.w	sl, sl, #1
			--samplesLeftInPeriod; 
  40114a:	3b01      	subs	r3, #1
		for (i = 0; i < WIN_SIZE; i++)
  40114c:	3a01      	subs	r2, #1
			inPtr = (inPtr+1) & RING_BUFFER_MASK; 		
  40114e:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
		for (i = 0; i < WIN_SIZE; i++)
  401152:	9205      	str	r2, [sp, #20]
  401154:	d1b8      	bne.n	4010c8 <create_harmonies+0x338>
		}

		saved_samplesLeftInPeriod[pitch_idx] = samplesLeftInPeriod; 
  401156:	9a06      	ldr	r2, [sp, #24]
		outPtrList[pitch_idx] = outPtr; 
  401158:	9903      	ldr	r1, [sp, #12]
		saved_samplesLeftInPeriod[pitch_idx] = samplesLeftInPeriod; 
  40115a:	6013      	str	r3, [r2, #0]
		outPtrList[pitch_idx] = outPtr; 
  40115c:	4a45      	ldr	r2, [pc, #276]	; (401274 <create_harmonies+0x4e4>)
  40115e:	f8dd b004 	ldr.w	fp, [sp, #4]
  401162:	f842 e001 	str.w	lr, [r2, r1]
	while(pitch_shifts_in[pitch_idx] > 0.0f && pitch_idx < MAX_NUM_SHIFTS)
  401166:	9a08      	ldr	r2, [sp, #32]
		pitch_idx++;  
  401168:	f10b 0b01 	add.w	fp, fp, #1
	while(pitch_shifts_in[pitch_idx] > 0.0f && pitch_idx < MAX_NUM_SHIFTS)
  40116c:	ecb2 7a01 	vldmia	r2!, {s14}
  401170:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  401174:	9208      	str	r2, [sp, #32]
  401176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40117a:	dd07      	ble.n	40118c <create_harmonies+0x3fc>
  40117c:	9a06      	ldr	r2, [sp, #24]
  40117e:	f1bb 0f0b 	cmp.w	fp, #11
  401182:	f102 0204 	add.w	r2, r2, #4
  401186:	9206      	str	r2, [sp, #24]
  401188:	f47f aea0 	bne.w	400ecc <create_harmonies+0x13c>
  40118c:	4b3a      	ldr	r3, [pc, #232]	; (401278 <create_harmonies+0x4e8>)
  40118e:	f8c3 a000 	str.w	sl, [r3]
  401192:	e043      	b.n	40121c <create_harmonies+0x48c>
						if (outPtr < inHalfAway || outPtr > inPtr) {
  401194:	45d6      	cmp	lr, sl
  401196:	d8d4      	bhi.n	401142 <create_harmonies+0x3b2>
					outPtr = (outPtr + (uint32_t)((float)inputPeriodLength * periodRatio)) & RING_BUFFER_MASK; 
  401198:	9b02      	ldr	r3, [sp, #8]
  40119a:	449e      	add	lr, r3
					if (pitch_idx == 0)
  40119c:	9b01      	ldr	r3, [sp, #4]
					outPtr = (outPtr + (uint32_t)((float)inputPeriodLength * periodRatio)) & RING_BUFFER_MASK; 
  40119e:	f3ce 0e0b 	ubfx	lr, lr, #0, #12
					if (pitch_idx == 0)
  4011a2:	2b00      	cmp	r3, #0
  4011a4:	d0a7      	beq.n	4010f6 <create_harmonies+0x366>
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  4011a6:	45c8      	cmp	r8, r9
  4011a8:	ddc6      	ble.n	401138 <create_harmonies+0x3a8>
  4011aa:	ebae 0208 	sub.w	r2, lr, r8
  4011ae:	4830      	ldr	r0, [pc, #192]	; (401270 <create_harmonies+0x4e0>)
  4011b0:	eb0e 0708 	add.w	r7, lr, r8
  4011b4:	ebab 060e 	sub.w	r6, fp, lr
								harm_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4011b8:	18b3      	adds	r3, r6, r2
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  4011ba:	f3c2 010b 	ubfx	r1, r2, #0, #12
								harm_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4011be:	ecb0 7a01 	vldmia	r0!, {s14}
  4011c2:	3201      	adds	r2, #1
  4011c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  4011c8:	eb05 0181 	add.w	r1, r5, r1, lsl #2
								harm_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4011cc:	ee27 7a08 	vmul.f32	s14, s14, s16
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  4011d0:	4297      	cmp	r7, r2
								harm_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4011d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  4011d6:	edd1 7a00 	vldr	s15, [r1]
  4011da:	edd3 6a00 	vldr	s13, [r3]
  4011de:	eee7 7a26 	vfma.f32	s15, s14, s13
  4011e2:	edc1 7a00 	vstr	s15, [r1]
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  4011e6:	d1e7      	bne.n	4011b8 <create_harmonies+0x428>
					if (inHalfAway < RING_BUFFER_SIZE_D2) 
  4011e8:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
  4011ec:	d3a7      	bcc.n	40113e <create_harmonies+0x3ae>
						if (outPtr > inPtr && outPtr < inHalfAway) {
  4011ee:	45d6      	cmp	lr, sl
  4011f0:	f67f af7a 	bls.w	4010e8 <create_harmonies+0x358>
  4011f4:	45f4      	cmp	ip, lr
  4011f6:	d8a4      	bhi.n	401142 <create_harmonies+0x3b2>
  4011f8:	e776      	b.n	4010e8 <create_harmonies+0x358>
					if (outPtr > inPtr && outPtr < inHalfAway) {
  4011fa:	45f2      	cmp	sl, lr
  4011fc:	f4bf af72 	bcs.w	4010e4 <create_harmonies+0x354>
  401200:	45f4      	cmp	ip, lr
  401202:	d89e      	bhi.n	401142 <create_harmonies+0x3b2>
  401204:	e76e      	b.n	4010e4 <create_harmonies+0x354>
			outPtr = outPtrList[pitch_idx]; 
  401206:	ea4f 038b 	mov.w	r3, fp, lsl #2
  40120a:	9303      	str	r3, [sp, #12]
  40120c:	4b19      	ldr	r3, [pc, #100]	; (401274 <create_harmonies+0x4e4>)
  40120e:	f853 e02b 	ldr.w	lr, [r3, fp, lsl #2]
			samplesLeftInPeriod = saved_samplesLeftInPeriod[pitch_idx]; 
  401212:	9b06      	ldr	r3, [sp, #24]
  401214:	681b      	ldr	r3, [r3, #0]
  401216:	e74a      	b.n	4010ae <create_harmonies+0x31e>
	while(pitch_shifts_in[pitch_idx] > 0.0f && pitch_idx < MAX_NUM_SHIFTS)
  401218:	f04f 0b00 	mov.w	fp, #0
  40121c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	}
	
	for(i = 0; i < WIN_SIZE; i++)
	{
		output[i] = output_ring_buffer[readPos]; 	
		output_ring_buffer[readPos] = 0.0f;
  40121e:	2400      	movs	r4, #0
  401220:	4916      	ldr	r1, [pc, #88]	; (40127c <create_harmonies+0x4ec>)
  401222:	4e17      	ldr	r6, [pc, #92]	; (401280 <create_harmonies+0x4f0>)
  401224:	f502 5580 	add.w	r5, r2, #4096	; 0x1000
  401228:	680b      	ldr	r3, [r1, #0]
		output[i] = output_ring_buffer[readPos]; 	
  40122a:	eb06 0083 	add.w	r0, r6, r3, lsl #2
		readPos = (readPos+1) & RING_BUFFER_MASK;
  40122e:	3301      	adds	r3, #1
		output[i] = output_ring_buffer[readPos]; 	
  401230:	6807      	ldr	r7, [r0, #0]
		readPos = (readPos+1) & RING_BUFFER_MASK;
  401232:	f3c3 030b 	ubfx	r3, r3, #0, #12
		output[i] = output_ring_buffer[readPos]; 	
  401236:	f842 7b04 	str.w	r7, [r2], #4
	for(i = 0; i < WIN_SIZE; i++)
  40123a:	42aa      	cmp	r2, r5
		output_ring_buffer[readPos] = 0.0f;
  40123c:	6004      	str	r4, [r0, #0]
	for(i = 0; i < WIN_SIZE; i++)
  40123e:	d1f4      	bne.n	40122a <create_harmonies+0x49a>
	// averaging -- not used currently 
	//if (pitch_idx > 1) //  scale = 2.0f / (float)current_num_shifts ; // just in case 
	//arm_scale_f32(output, 2.0f, output, WIN_SIZE); 
	
	currentPitch = inputPitch; 
	inputPeriodLength = (uint32_t)(PSOLA_SAMPLE_RATE / currentPitch);
  401240:	ed9f 7a10 	vldr	s14, [pc, #64]	; 401284 <create_harmonies+0x4f4>
	current_num_shifts = pitch_idx; 
	arm_copy_f32(pitch_shifts_in, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  401244:	220b      	movs	r2, #11
	current_num_shifts = pitch_idx; 
  401246:	4c10      	ldr	r4, [pc, #64]	; (401288 <create_harmonies+0x4f8>)
	inputPeriodLength = (uint32_t)(PSOLA_SAMPLE_RATE / currentPitch);
  401248:	eec7 7a09 	vdiv.f32	s15, s14, s18
  40124c:	600b      	str	r3, [r1, #0]
	current_num_shifts = pitch_idx; 
  40124e:	f8c4 b000 	str.w	fp, [r4]
	arm_copy_f32(pitch_shifts_in, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  401252:	9809      	ldr	r0, [sp, #36]	; 0x24
	inputPeriodLength = (uint32_t)(PSOLA_SAMPLE_RATE / currentPitch);
  401254:	4c0d      	ldr	r4, [pc, #52]	; (40128c <create_harmonies+0x4fc>)
	arm_copy_f32(pitch_shifts_in, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  401256:	490e      	ldr	r1, [pc, #56]	; (401290 <create_harmonies+0x500>)
  401258:	4b0e      	ldr	r3, [pc, #56]	; (401294 <create_harmonies+0x504>)
	inputPeriodLength = (uint32_t)(PSOLA_SAMPLE_RATE / currentPitch);
  40125a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  40125e:	edc4 7a00 	vstr	s15, [r4]
}
  401262:	b00d      	add	sp, #52	; 0x34
  401264:	ecbd 8b08 	vpop	{d8-d11}
  401268:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	arm_copy_f32(pitch_shifts_in, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  40126c:	4718      	bx	r3
  40126e:	bf00      	nop
  401270:	2041205c 	.word	0x2041205c
  401274:	2040d000 	.word	0x2040d000
  401278:	20408404 	.word	0x20408404
  40127c:	2041202c 	.word	0x2041202c
  401280:	2040e000 	.word	0x2040e000
  401284:	4735a700 	.word	0x4735a700
  401288:	20408400 	.word	0x20408400
  40128c:	20408408 	.word	0x20408408
  401290:	20412000 	.word	0x20412000
  401294:	004031c5 	.word	0x004031c5

00401298 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  401298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  40129c:	b990      	cbnz	r0, 4012c4 <_read+0x2c>
		return -1;
	}

	for (; len > 0; --len) {
  40129e:	2a00      	cmp	r2, #0
  4012a0:	4690      	mov	r8, r2
  4012a2:	dd0d      	ble.n	4012c0 <_read+0x28>
  4012a4:	460c      	mov	r4, r1
  4012a6:	188f      	adds	r7, r1, r2
  4012a8:	4e08      	ldr	r6, [pc, #32]	; (4012cc <_read+0x34>)
  4012aa:	4d09      	ldr	r5, [pc, #36]	; (4012d0 <_read+0x38>)
		ptr_get(stdio_base, ptr);
  4012ac:	4621      	mov	r1, r4
		ptr++;
  4012ae:	3401      	adds	r4, #1
		ptr_get(stdio_base, ptr);
  4012b0:	6830      	ldr	r0, [r6, #0]
  4012b2:	682b      	ldr	r3, [r5, #0]
  4012b4:	4798      	blx	r3
	for (; len > 0; --len) {
  4012b6:	42bc      	cmp	r4, r7
  4012b8:	d1f8      	bne.n	4012ac <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4012ba:	4640      	mov	r0, r8
  4012bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (; len > 0; --len) {
  4012c0:	4680      	mov	r8, r0
  4012c2:	e7fa      	b.n	4012ba <_read+0x22>
		return -1;
  4012c4:	f04f 38ff 	mov.w	r8, #4294967295
  4012c8:	e7f7      	b.n	4012ba <_read+0x22>
  4012ca:	bf00      	nop
  4012cc:	2044a808 	.word	0x2044a808
  4012d0:	2044a800 	.word	0x2044a800

004012d4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4012d4:	3801      	subs	r0, #1
  4012d6:	2802      	cmp	r0, #2
  4012d8:	d81e      	bhi.n	401318 <_write+0x44>
{
  4012da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4012de:	4615      	mov	r5, r2
		return -1;
	}

	for (; len != 0; --len) {
  4012e0:	b1ba      	cbz	r2, 401312 <_write+0x3e>
  4012e2:	460e      	mov	r6, r1
  4012e4:	460c      	mov	r4, r1
  4012e6:	f8df 803c 	ldr.w	r8, [pc, #60]	; 401324 <_write+0x50>
  4012ea:	4f0d      	ldr	r7, [pc, #52]	; (401320 <_write+0x4c>)
  4012ec:	e001      	b.n	4012f2 <_write+0x1e>
  4012ee:	3d01      	subs	r5, #1
  4012f0:	d00d      	beq.n	40130e <_write+0x3a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4012f2:	f814 1b01 	ldrb.w	r1, [r4], #1
  4012f6:	f8d8 0000 	ldr.w	r0, [r8]
  4012fa:	683b      	ldr	r3, [r7, #0]
  4012fc:	4798      	blx	r3
  4012fe:	2800      	cmp	r0, #0
  401300:	eba4 0006 	sub.w	r0, r4, r6
  401304:	daf3      	bge.n	4012ee <_write+0x1a>
		return -1;
  401306:	f04f 30ff 	mov.w	r0, #4294967295
  40130a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40130e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (; len != 0; --len) {
  401312:	4610      	mov	r0, r2
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  401314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  401318:	f04f 30ff 	mov.w	r0, #4294967295
}
  40131c:	4770      	bx	lr
  40131e:	bf00      	nop
  401320:	2044a804 	.word	0x2044a804
  401324:	2044a808 	.word	0x2044a808

00401328 <wm8904_write_register>:
 *
 * \param uc_register_address Register address to write
 * \param us_data Data to write.
 */
void wm8904_write_register(uint8_t uc_register_address, uint16_t us_data)
{
  401328:	b570      	push	{r4, r5, r6, lr}
  40132a:	460b      	mov	r3, r1
  40132c:	b086      	sub	sp, #24
	uint8_t uc_temp_data[2];
	twihs_packet_t packet;

	uc_temp_data[0] = (us_data & 0xff00) >> 8;
  40132e:	0a0e      	lsrs	r6, r1, #8

	packet.addr[0]     = uc_register_address;
	packet.addr_length = 0x1;
	packet.buffer      = uc_temp_data;
	packet.length      = 0x2;
	packet.chip        = WM8904_SLAVE_ADDRESS;
  401330:	221a      	movs	r2, #26
	uc_temp_data[1] = us_data & 0xff;
  401332:	f88d 3001 	strb.w	r3, [sp, #1]
	packet.addr_length = 0x1;
  401336:	2501      	movs	r5, #1
	packet.length      = 0x2;
  401338:	2402      	movs	r4, #2

	twihs_master_write(WM8904_TWIHS, &packet);
  40133a:	a901      	add	r1, sp, #4
  40133c:	4b07      	ldr	r3, [pc, #28]	; (40135c <wm8904_write_register+0x34>)
	packet.addr[0]     = uc_register_address;
  40133e:	f88d 0004 	strb.w	r0, [sp, #4]
	twihs_master_write(WM8904_TWIHS, &packet);
  401342:	4807      	ldr	r0, [pc, #28]	; (401360 <wm8904_write_register+0x38>)
	uc_temp_data[0] = (us_data & 0xff00) >> 8;
  401344:	f88d 6000 	strb.w	r6, [sp]
	packet.addr_length = 0x1;
  401348:	9502      	str	r5, [sp, #8]
	packet.buffer      = uc_temp_data;
  40134a:	f8cd d00c 	str.w	sp, [sp, #12]
	packet.length      = 0x2;
  40134e:	9404      	str	r4, [sp, #16]
	packet.chip        = WM8904_SLAVE_ADDRESS;
  401350:	f88d 2014 	strb.w	r2, [sp, #20]
	twihs_master_write(WM8904_TWIHS, &packet);
  401354:	4798      	blx	r3
}
  401356:	b006      	add	sp, #24
  401358:	bd70      	pop	{r4, r5, r6, pc}
  40135a:	bf00      	nop
  40135c:	004016cd 	.word	0x004016cd
  401360:	40018000 	.word	0x40018000

00401364 <wm8904_read_register>:
 *
 * \param uc_register_address Register address to write
 * \retun Register value.
 */
uint16_t wm8904_read_register(uint8_t uc_register_address)
{
  401364:	b530      	push	{r4, r5, lr}
  401366:	b087      	sub	sp, #28

	packet.addr[0]     = uc_register_address;
	packet.addr_length = 0x1;
	packet.buffer      = uc_temp_data;
	packet.length      = 0x2;
	packet.chip        = WM8904_SLAVE_ADDRESS;
  401368:	221a      	movs	r2, #26
	packet.addr_length = 0x1;
  40136a:	2501      	movs	r5, #1
	packet.length      = 0x2;
  40136c:	2402      	movs	r4, #2
	packet.addr[0]     = uc_register_address;
  40136e:	f88d 0004 	strb.w	r0, [sp, #4]

	twihs_master_read(WM8904_TWIHS, &packet);
  401372:	a901      	add	r1, sp, #4
  401374:	4b08      	ldr	r3, [pc, #32]	; (401398 <wm8904_read_register+0x34>)
  401376:	4809      	ldr	r0, [pc, #36]	; (40139c <wm8904_read_register+0x38>)
	packet.addr_length = 0x1;
  401378:	9502      	str	r5, [sp, #8]
	packet.buffer      = uc_temp_data;
  40137a:	f8cd d00c 	str.w	sp, [sp, #12]
	packet.length      = 0x2;
  40137e:	9404      	str	r4, [sp, #16]
	packet.chip        = WM8904_SLAVE_ADDRESS;
  401380:	f88d 2014 	strb.w	r2, [sp, #20]
	twihs_master_read(WM8904_TWIHS, &packet);
  401384:	4798      	blx	r3
	us_data = (((uint16_t)uc_temp_data[0] << 8) & 0xff00) | uc_temp_data[1];
  401386:	f89d 0000 	ldrb.w	r0, [sp]
  40138a:	f89d 3001 	ldrb.w	r3, [sp, #1]

	return us_data;
}
  40138e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  401392:	b007      	add	sp, #28
  401394:	bd30      	pop	{r4, r5, pc}
  401396:	bf00      	nop
  401398:	00401619 	.word	0x00401619
  40139c:	40018000 	.word	0x40018000

004013a0 <wm8904_twi_init>:
 * \brief Initialize TWIHS connect to WM8904.
 *
 * \retun TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t wm8904_twi_init(void)
{
  4013a0:	b510      	push	{r4, lr}
	pio_configure_pin(WM8904_TK_PIO, WM8904_TK_FLAGS);
  4013a2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
{
  4013a6:	b084      	sub	sp, #16
	pio_configure_pin(WM8904_TK_PIO, WM8904_TK_FLAGS);
  4013a8:	4c15      	ldr	r4, [pc, #84]	; (401400 <wm8904_twi_init+0x60>)
  4013aa:	2021      	movs	r0, #33	; 0x21
  4013ac:	47a0      	blx	r4
	pio_configure_pin(WM8904_TF_PIO, WM8904_TF_FLAGS);
  4013ae:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4013b2:	2020      	movs	r0, #32
  4013b4:	47a0      	blx	r4
	pio_configure_pin(WM8904_TD_PIO, WM8904_TD_FLAGS);
  4013b6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4013ba:	207a      	movs	r0, #122	; 0x7a
  4013bc:	47a0      	blx	r4
	pio_configure_pin(WM8904_RK_PIO, WM8904_RK_FLAGS);
  4013be:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4013c2:	2016      	movs	r0, #22
  4013c4:	47a0      	blx	r4
	pio_configure_pin(WM8904_RF_PIO, WM8904_RF_FLAGS);
  4013c6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4013ca:	2078      	movs	r0, #120	; 0x78
  4013cc:	47a0      	blx	r4
	pio_configure_pin(WM8904_RD_PIO, WM8904_RD_FLAGS);
  4013ce:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4013d2:	200a      	movs	r0, #10
  4013d4:	47a0      	blx	r4
	pio_configure_pin(WM8904_PCK2_PIO, WM8904_PCK2_FLAGS);
  4013d6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4013da:	2012      	movs	r0, #18
  4013dc:	47a0      	blx	r4

static inline uint32_t twihs_master_setup(twihs_master_t p_twihs,
		twihs_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
	p_opt->smbus      = 0;
  4013de:	2200      	movs	r2, #0
	p_opt->master_clk = sysclk_get_peripheral_hz();
  4013e0:	4908      	ldr	r1, [pc, #32]	; (401404 <wm8904_twi_init+0x64>)
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4013e2:	2013      	movs	r0, #19

	twihs_options_t opt;
	opt.master_clk = sysclk_get_cpu_hz();
	opt.speed = WM8904_TWIHS_CLK;
  4013e4:	4c08      	ldr	r4, [pc, #32]	; (401408 <wm8904_twi_init+0x68>)
  4013e6:	4b09      	ldr	r3, [pc, #36]	; (40140c <wm8904_twi_init+0x6c>)
  4013e8:	9101      	str	r1, [sp, #4]
	p_opt->smbus      = 0;
  4013ea:	f88d 200d 	strb.w	r2, [sp, #13]
  4013ee:	9402      	str	r4, [sp, #8]
  4013f0:	4798      	blx	r3
#endif		
	} else {
		// Do Nothing
	}
#endif
	return (twihs_master_init(p_twihs, p_opt));
  4013f2:	a901      	add	r1, sp, #4
  4013f4:	4b06      	ldr	r3, [pc, #24]	; (401410 <wm8904_twi_init+0x70>)
  4013f6:	4807      	ldr	r0, [pc, #28]	; (401414 <wm8904_twi_init+0x74>)
  4013f8:	4798      	blx	r3
	return twihs_master_setup(WM8904_TWIHS, &opt);
}
  4013fa:	b004      	add	sp, #16
  4013fc:	bd10      	pop	{r4, pc}
  4013fe:	bf00      	nop
  401400:	00401d55 	.word	0x00401d55
  401404:	08f0d180 	.word	0x08f0d180
  401408:	00061a80 	.word	0x00061a80
  40140c:	004023a5 	.word	0x004023a5
  401410:	00401539 	.word	0x00401539
  401414:	40018000 	.word	0x40018000

00401418 <ssc_reset>:
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_reset(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_SWRST;
	p_ssc->SSC_CMR = 0;
  401418:	2300      	movs	r3, #0
	p_ssc->SSC_CR = SSC_CR_SWRST;
  40141a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40141e:	6002      	str	r2, [r0, #0]
	p_ssc->SSC_CMR = 0;
  401420:	6043      	str	r3, [r0, #4]
	p_ssc->SSC_RCMR = 0;
  401422:	6103      	str	r3, [r0, #16]
	p_ssc->SSC_RFMR = 0;
  401424:	6143      	str	r3, [r0, #20]
	p_ssc->SSC_TCMR = 0;
  401426:	6183      	str	r3, [r0, #24]
	p_ssc->SSC_TFMR = 0;
  401428:	61c3      	str	r3, [r0, #28]
  40142a:	4770      	bx	lr

0040142c <ssc_enable_rx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_rx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_RXEN;
  40142c:	2301      	movs	r3, #1
  40142e:	6003      	str	r3, [r0, #0]
  401430:	4770      	bx	lr
  401432:	bf00      	nop

00401434 <ssc_disable_rx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_disable_rx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_RXDIS;
  401434:	2302      	movs	r3, #2
  401436:	6003      	str	r3, [r0, #0]
  401438:	4770      	bx	lr
  40143a:	bf00      	nop

0040143c <ssc_enable_tx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_tx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_TXEN;
  40143c:	f44f 7380 	mov.w	r3, #256	; 0x100
  401440:	6003      	str	r3, [r0, #0]
  401442:	4770      	bx	lr

00401444 <ssc_disable_tx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_disable_tx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_TXDIS;
  401444:	f44f 7300 	mov.w	r3, #512	; 0x200
  401448:	6003      	str	r3, [r0, #0]
  40144a:	4770      	bx	lr

0040144c <ssc_set_receiver>:
 * \param p_rx_clk_opt Pointer to the receiver clock configuration structure.
 * \param p_rx_data_frame Pointer to the receiver data frame configuration structure.
 */
void ssc_set_receiver(Ssc *p_ssc, clock_opt_t *p_rx_clk_opt,
		data_frame_opt_t *p_rx_data_frame)
{
  40144c:	b4f0      	push	{r4, r5, r6, r7}
	if (p_rx_clk_opt == NULL) {
  40144e:	2900      	cmp	r1, #0
  401450:	d02f      	beq.n	4014b2 <ssc_set_receiver+0x66>
		p_ssc->SSC_RCMR = 0;
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  401452:	6904      	ldr	r4, [r0, #16]
  401454:	68cf      	ldr	r7, [r1, #12]
  401456:	698e      	ldr	r6, [r1, #24]
  401458:	e891 0028 	ldmia.w	r1, {r3, r5}
  40145c:	432b      	orrs	r3, r5
  40145e:	688d      	ldr	r5, [r1, #8]
  401460:	4323      	orrs	r3, r4
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
				p_rx_clk_opt->ul_ckg |
				p_rx_clk_opt->ul_start_sel |
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  401462:	694c      	ldr	r4, [r1, #20]
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  401464:	432b      	orrs	r3, r5
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
  401466:	690d      	ldr	r5, [r1, #16]
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  401468:	0421      	lsls	r1, r4, #16
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  40146a:	433b      	orrs	r3, r7
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  40146c:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  401470:	4333      	orrs	r3, r6
  401472:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  401476:	430b      	orrs	r3, r1
  401478:	6103      	str	r3, [r0, #16]
	}

	if (p_rx_data_frame == NULL) {
  40147a:	b1ea      	cbz	r2, 4014b8 <ssc_set_receiver+0x6c>
		p_ssc->SSC_RFMR = 0;
	} else {
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  40147c:	6954      	ldr	r4, [r2, #20]
  40147e:	6853      	ldr	r3, [r2, #4]
  401480:	6991      	ldr	r1, [r2, #24]
  401482:	4323      	orrs	r3, r4
  401484:	6946      	ldr	r6, [r0, #20]
  401486:	6814      	ldr	r4, [r2, #0]
  401488:	430b      	orrs	r3, r1
				p_rx_data_frame->ul_msbf |
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  40148a:	6891      	ldr	r1, [r2, #8]
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  40148c:	f004 041f 	and.w	r4, r4, #31
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
  401490:	6915      	ldr	r5, [r2, #16]
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  401492:	4333      	orrs	r3, r6
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  401494:	68d2      	ldr	r2, [r2, #12]
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  401496:	0209      	lsls	r1, r1, #8
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  401498:	4323      	orrs	r3, r4
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  40149a:	0412      	lsls	r2, r2, #16
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  40149c:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  4014a0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  4014a4:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  4014a8:	430b      	orrs	r3, r1
  4014aa:	4313      	orrs	r3, r2
				p_rx_data_frame->ul_fsos |
				p_rx_data_frame->ul_fsedge;
	}
}
  4014ac:	bcf0      	pop	{r4, r5, r6, r7}
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  4014ae:	6143      	str	r3, [r0, #20]
}
  4014b0:	4770      	bx	lr
		p_ssc->SSC_RCMR = 0;
  4014b2:	6101      	str	r1, [r0, #16]
	if (p_rx_data_frame == NULL) {
  4014b4:	2a00      	cmp	r2, #0
  4014b6:	d1e1      	bne.n	40147c <ssc_set_receiver+0x30>
		p_ssc->SSC_RFMR = 0;
  4014b8:	6142      	str	r2, [r0, #20]
}
  4014ba:	bcf0      	pop	{r4, r5, r6, r7}
  4014bc:	4770      	bx	lr
  4014be:	bf00      	nop

004014c0 <ssc_set_transmitter>:
 * \param p_tx_clk_opt Pointer to the transmitter clock configuration structure.
 * \param p_tx_data_frame Pointer to the transmitter data frame configuration structure.
 */
void ssc_set_transmitter(Ssc *p_ssc, clock_opt_t *p_tx_clk_opt,
		data_frame_opt_t *p_tx_data_frame)
{
  4014c0:	b4f0      	push	{r4, r5, r6, r7}
	if (p_tx_clk_opt == NULL) {
  4014c2:	2900      	cmp	r1, #0
  4014c4:	d02f      	beq.n	401526 <ssc_set_transmitter+0x66>
		p_ssc->SSC_TCMR = 0;
	} else {
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  4014c6:	6984      	ldr	r4, [r0, #24]
  4014c8:	68cf      	ldr	r7, [r1, #12]
  4014ca:	698e      	ldr	r6, [r1, #24]
  4014cc:	e891 0028 	ldmia.w	r1, {r3, r5}
  4014d0:	432b      	orrs	r3, r5
  4014d2:	688d      	ldr	r5, [r1, #8]
  4014d4:	4323      	orrs	r3, r4
				p_tx_clk_opt->ul_cko | p_tx_clk_opt->ul_cki |
				p_tx_clk_opt->ul_ckg |
				p_tx_clk_opt->ul_start_sel |
				SSC_TCMR_PERIOD(p_tx_clk_opt->ul_period) |
				SSC_TCMR_STTDLY(p_tx_clk_opt->ul_sttdly);
  4014d6:	694c      	ldr	r4, [r1, #20]
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  4014d8:	432b      	orrs	r3, r5
				SSC_TCMR_PERIOD(p_tx_clk_opt->ul_period) |
  4014da:	690d      	ldr	r5, [r1, #16]
				SSC_TCMR_STTDLY(p_tx_clk_opt->ul_sttdly);
  4014dc:	0421      	lsls	r1, r4, #16
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  4014de:	433b      	orrs	r3, r7
				SSC_TCMR_STTDLY(p_tx_clk_opt->ul_sttdly);
  4014e0:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  4014e4:	4333      	orrs	r3, r6
  4014e6:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  4014ea:	430b      	orrs	r3, r1
  4014ec:	6183      	str	r3, [r0, #24]
	}

	if (p_tx_data_frame == NULL) {
  4014ee:	b1ea      	cbz	r2, 40152c <ssc_set_transmitter+0x6c>
		p_ssc->SSC_TFMR = 0;
	} else {
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  4014f0:	6954      	ldr	r4, [r2, #20]
  4014f2:	6853      	ldr	r3, [r2, #4]
  4014f4:	6991      	ldr	r1, [r2, #24]
  4014f6:	4323      	orrs	r3, r4
  4014f8:	69c6      	ldr	r6, [r0, #28]
  4014fa:	6814      	ldr	r4, [r2, #0]
  4014fc:	430b      	orrs	r3, r1
				p_tx_data_frame->ul_msbf |
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
  4014fe:	6891      	ldr	r1, [r2, #8]
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  401500:	f004 041f 	and.w	r4, r4, #31
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
				SSC_TFMR_FSLEN_EXT(p_tx_data_frame->ul_fslen_ext) |
  401504:	6915      	ldr	r5, [r2, #16]
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  401506:	4333      	orrs	r3, r6
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
  401508:	68d2      	ldr	r2, [r2, #12]
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
  40150a:	0209      	lsls	r1, r1, #8
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  40150c:	4323      	orrs	r3, r4
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
  40150e:	0412      	lsls	r2, r2, #16
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
  401510:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  401514:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
  401518:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  40151c:	430b      	orrs	r3, r1
  40151e:	4313      	orrs	r3, r2
				p_tx_data_frame->ul_fsos |
				p_tx_data_frame->ul_fsedge;
	}
}
  401520:	bcf0      	pop	{r4, r5, r6, r7}
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  401522:	61c3      	str	r3, [r0, #28]
}
  401524:	4770      	bx	lr
		p_ssc->SSC_TCMR = 0;
  401526:	6181      	str	r1, [r0, #24]
	if (p_tx_data_frame == NULL) {
  401528:	2a00      	cmp	r2, #0
  40152a:	d1e1      	bne.n	4014f0 <ssc_set_transmitter+0x30>
		p_ssc->SSC_TFMR = 0;
  40152c:	61c2      	str	r2, [r0, #28]
}
  40152e:	bcf0      	pop	{r4, r5, r6, r7}
  401530:	4770      	bx	lr
  401532:	bf00      	nop

00401534 <ssc_disable_interrupt>:
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void ssc_disable_interrupt(Ssc *p_ssc, uint32_t ul_sources)
{
	p_ssc->SSC_IDR = ul_sources;
  401534:	6481      	str	r1, [r0, #72]	; 0x48
  401536:	4770      	bx	lr

00401538 <twihs_master_init>:
 * \param p_opt Options for initializing the TWIHS module (see \ref twihs_options_t).
 *
 * \return TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twihs_master_init(Twihs *p_twihs, const twihs_options_t *p_opt)
{
  401538:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t status = TWIHS_SUCCESS;

	/* Disable TWIHS interrupts */
	p_twihs->TWIHS_IDR = ~0UL;
  40153a:	f04f 33ff 	mov.w	r3, #4294967295
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  40153e:	2680      	movs	r6, #128	; 0x80
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401540:	2204      	movs	r2, #4
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401542:	2508      	movs	r5, #8
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  401544:	2420      	movs	r4, #32
	p_twihs->TWIHS_IDR = ~0UL;
  401546:	6283      	str	r3, [r0, #40]	; 0x28
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401548:	4b2f      	ldr	r3, [pc, #188]	; (401608 <twihs_master_init+0xd0>)
	p_twihs->TWIHS_SR;
  40154a:	6a07      	ldr	r7, [r0, #32]
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  40154c:	6006      	str	r6, [r0, #0]
	p_twihs->TWIHS_RHR;
  40154e:	6b06      	ldr	r6, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401550:	6005      	str	r5, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  401552:	6004      	str	r4, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401554:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401556:	684a      	ldr	r2, [r1, #4]
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401558:	429a      	cmp	r2, r3
  40155a:	d84d      	bhi.n	4015f8 <twihs_master_init+0xc0>
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  40155c:	4c2b      	ldr	r4, [pc, #172]	; (40160c <twihs_master_init+0xd4>)
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  40155e:	680b      	ldr	r3, [r1, #0]
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  401560:	42a2      	cmp	r2, r4
  401562:	d92e      	bls.n	4015c2 <twihs_master_init+0x8a>
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401564:	4c2a      	ldr	r4, [pc, #168]	; (401610 <twihs_master_init+0xd8>)
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401566:	492b      	ldr	r1, [pc, #172]	; (401614 <twihs_master_init+0xdc>)
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401568:	4414      	add	r4, r2
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  40156a:	fba1 2103 	umull	r2, r1, r1, r3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  40156e:	00a4      	lsls	r4, r4, #2
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401570:	0b89      	lsrs	r1, r1, #14
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401572:	fbb3 f3f4 	udiv	r3, r3, r4
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401576:	3903      	subs	r1, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401578:	3b03      	subs	r3, #3
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40157a:	29ff      	cmp	r1, #255	; 0xff
  40157c:	d940      	bls.n	401600 <twihs_master_init+0xc8>
  40157e:	2200      	movs	r2, #0
  401580:	e000      	b.n	401584 <twihs_master_init+0x4c>
  401582:	b13c      	cbz	r4, 401594 <twihs_master_init+0x5c>
			ckdiv++;
  401584:	3201      	adds	r2, #1
			cldiv /= TWIHS_CLK_DIVIDER;
  401586:	0849      	lsrs	r1, r1, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401588:	2a06      	cmp	r2, #6
  40158a:	bf8c      	ite	hi
  40158c:	2400      	movhi	r4, #0
  40158e:	2401      	movls	r4, #1
  401590:	29ff      	cmp	r1, #255	; 0xff
  401592:	d8f6      	bhi.n	401582 <twihs_master_init+0x4a>
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401594:	2bff      	cmp	r3, #255	; 0xff
  401596:	d907      	bls.n	4015a8 <twihs_master_init+0x70>
  401598:	b914      	cbnz	r4, 4015a0 <twihs_master_init+0x68>
  40159a:	e005      	b.n	4015a8 <twihs_master_init+0x70>
  40159c:	2a06      	cmp	r2, #6
  40159e:	d803      	bhi.n	4015a8 <twihs_master_init+0x70>
			chdiv /= TWIHS_CLK_DIVIDER;
  4015a0:	085b      	lsrs	r3, r3, #1
			ckdiv++;
  4015a2:	3201      	adds	r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4015a4:	2bff      	cmp	r3, #255	; 0xff
  4015a6:	d8f9      	bhi.n	40159c <twihs_master_init+0x64>
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  4015a8:	021b      	lsls	r3, r3, #8
	uint32_t status = TWIHS_SUCCESS;
  4015aa:	2400      	movs	r4, #0
				TWIHS_CWGR_CKDIV(ckdiv);
  4015ac:	0412      	lsls	r2, r2, #16
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  4015ae:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  4015b0:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  4015b4:	b2c9      	uxtb	r1, r1
  4015b6:	4313      	orrs	r3, r2
  4015b8:	430b      	orrs	r3, r1
		p_twihs->TWIHS_CWGR =
  4015ba:	6103      	str	r3, [r0, #16]
}
  4015bc:	4620      	mov	r0, r4
  4015be:	bcf0      	pop	{r4, r5, r6, r7}
  4015c0:	4770      	bx	lr
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4015c2:	0052      	lsls	r2, r2, #1
  4015c4:	fbb3 f3f2 	udiv	r3, r3, r2
  4015c8:	3b03      	subs	r3, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4015ca:	2200      	movs	r2, #0
  4015cc:	2bff      	cmp	r3, #255	; 0xff
  4015ce:	d802      	bhi.n	4015d6 <twihs_master_init+0x9e>
  4015d0:	e008      	b.n	4015e4 <twihs_master_init+0xac>
  4015d2:	2a06      	cmp	r2, #6
  4015d4:	d803      	bhi.n	4015de <twihs_master_init+0xa6>
			c_lh_div /= TWIHS_CLK_DIVIDER;
  4015d6:	085b      	lsrs	r3, r3, #1
			ckdiv++;
  4015d8:	3201      	adds	r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4015da:	2bff      	cmp	r3, #255	; 0xff
  4015dc:	d8f9      	bhi.n	4015d2 <twihs_master_init+0x9a>
  4015de:	0412      	lsls	r2, r2, #16
  4015e0:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  4015e4:	0219      	lsls	r1, r3, #8
	uint32_t status = TWIHS_SUCCESS;
  4015e6:	2400      	movs	r4, #0
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  4015e8:	b2db      	uxtb	r3, r3
  4015ea:	b289      	uxth	r1, r1
  4015ec:	4313      	orrs	r3, r2
  4015ee:	430b      	orrs	r3, r1
		p_twihs->TWIHS_CWGR =
  4015f0:	6103      	str	r3, [r0, #16]
}
  4015f2:	4620      	mov	r0, r4
  4015f4:	bcf0      	pop	{r4, r5, r6, r7}
  4015f6:	4770      	bx	lr
		status = TWIHS_INVALID_ARGUMENT;
  4015f8:	2401      	movs	r4, #1
}
  4015fa:	4620      	mov	r0, r4
  4015fc:	bcf0      	pop	{r4, r5, r6, r7}
  4015fe:	4770      	bx	lr
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401600:	2401      	movs	r4, #1
	uint32_t ckdiv = 0;
  401602:	2200      	movs	r2, #0
  401604:	e7c6      	b.n	401594 <twihs_master_init+0x5c>
  401606:	bf00      	nop
  401608:	00061a80 	.word	0x00061a80
  40160c:	0005dc00 	.word	0x0005dc00
  401610:	3ffd1200 	.word	0x3ffd1200
  401614:	057619f1 	.word	0x057619f1

00401618 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  401618:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  40161a:	2a00      	cmp	r2, #0
  40161c:	d053      	beq.n	4016c6 <twihs_master_read+0xae>
{
  40161e:	b470      	push	{r4, r5, r6}
	p_twihs->TWIHS_MMR = 0;
  401620:	2600      	movs	r6, #0
	uint8_t *buffer = p_packet->buffer;
  401622:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401624:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401626:	684b      	ldr	r3, [r1, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401628:	7c0d      	ldrb	r5, [r1, #16]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40162a:	021b      	lsls	r3, r3, #8
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  40162c:	042d      	lsls	r5, r5, #16
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40162e:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401632:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  401636:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  40163a:	432b      	orrs	r3, r5
  40163c:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  40163e:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401640:	684b      	ldr	r3, [r1, #4]
	if (len == 0)
  401642:	b99b      	cbnz	r3, 40166c <twihs_master_read+0x54>
		return 0;
  401644:	461d      	mov	r5, r3
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  401646:	2301      	movs	r3, #1
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401648:	60c5      	str	r5, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  40164a:	6003      	str	r3, [r0, #0]
		status = p_twihs->TWIHS_SR;
  40164c:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40164e:	05d9      	lsls	r1, r3, #23
  401650:	d41f      	bmi.n	401692 <twihs_master_read+0x7a>
  401652:	2a01      	cmp	r2, #1
  401654:	d020      	beq.n	401698 <twihs_master_read+0x80>
  401656:	f247 5130 	movw	r1, #30000	; 0x7530
		if (!(status & TWIHS_SR_RXRDY)) {
  40165a:	079e      	lsls	r6, r3, #30
  40165c:	d412      	bmi.n	401684 <twihs_master_read+0x6c>
		status = p_twihs->TWIHS_SR;
  40165e:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401660:	05dd      	lsls	r5, r3, #23
  401662:	d416      	bmi.n	401692 <twihs_master_read+0x7a>
		if (!timeout--) {
  401664:	3901      	subs	r1, #1
  401666:	d1f8      	bne.n	40165a <twihs_master_read+0x42>
			return TWIHS_ERROR_TIMEOUT;
  401668:	2009      	movs	r0, #9
  40166a:	e02a      	b.n	4016c2 <twihs_master_read+0xaa>
	if (len > 1) {
  40166c:	2b01      	cmp	r3, #1
	val = addr[0];
  40166e:	780d      	ldrb	r5, [r1, #0]
	if (len > 1) {
  401670:	dde9      	ble.n	401646 <twihs_master_read+0x2e>
		val |= addr[1];
  401672:	784e      	ldrb	r6, [r1, #1]
	if (len > 2) {
  401674:	2b02      	cmp	r3, #2
		val |= addr[1];
  401676:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
	if (len > 2) {
  40167a:	d0e4      	beq.n	401646 <twihs_master_read+0x2e>
		val |= addr[2];
  40167c:	788b      	ldrb	r3, [r1, #2]
  40167e:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
  401682:	e7e0      	b.n	401646 <twihs_master_read+0x2e>
		*buffer++ = p_twihs->TWIHS_RHR;
  401684:	6b03      	ldr	r3, [r0, #48]	; 0x30
		cnt--;
  401686:	3a01      	subs	r2, #1
		*buffer++ = p_twihs->TWIHS_RHR;
  401688:	f804 3b01 	strb.w	r3, [r4], #1
		status = p_twihs->TWIHS_SR;
  40168c:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40168e:	05d9      	lsls	r1, r3, #23
  401690:	d5df      	bpl.n	401652 <twihs_master_read+0x3a>
			return TWIHS_RECEIVE_NACK;
  401692:	2005      	movs	r0, #5
}
  401694:	bc70      	pop	{r4, r5, r6}
  401696:	4770      	bx	lr
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401698:	2102      	movs	r1, #2
		if (!(status & TWIHS_SR_RXRDY)) {
  40169a:	079d      	lsls	r5, r3, #30
		if (status & TWIHS_SR_NACK) {
  40169c:	f247 5230 	movw	r2, #30000	; 0x7530
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4016a0:	6001      	str	r1, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  4016a2:	d407      	bmi.n	4016b4 <twihs_master_read+0x9c>
		status = p_twihs->TWIHS_SR;
  4016a4:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4016a6:	05de      	lsls	r6, r3, #23
  4016a8:	d4f3      	bmi.n	401692 <twihs_master_read+0x7a>
		if (!timeout--) {
  4016aa:	3a01      	subs	r2, #1
  4016ac:	d0dc      	beq.n	401668 <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  4016ae:	079d      	lsls	r5, r3, #30
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4016b0:	6001      	str	r1, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  4016b2:	d5f7      	bpl.n	4016a4 <twihs_master_read+0x8c>
		*buffer++ = p_twihs->TWIHS_RHR;
  4016b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4016b6:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4016b8:	6a03      	ldr	r3, [r0, #32]
  4016ba:	07db      	lsls	r3, r3, #31
  4016bc:	d5fc      	bpl.n	4016b8 <twihs_master_read+0xa0>
	p_twihs->TWIHS_SR;
  4016be:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  4016c0:	2000      	movs	r0, #0
}
  4016c2:	bc70      	pop	{r4, r5, r6}
  4016c4:	4770      	bx	lr
		return TWIHS_INVALID_ARGUMENT;
  4016c6:	2001      	movs	r0, #1
  4016c8:	4770      	bx	lr
  4016ca:	bf00      	nop

004016cc <twihs_master_write>:
{
  4016cc:	4603      	mov	r3, r0
	uint32_t status, cnt = p_packet->length;
  4016ce:	68c8      	ldr	r0, [r1, #12]
	if (cnt == 0) {
  4016d0:	2800      	cmp	r0, #0
  4016d2:	d034      	beq.n	40173e <twihs_master_write+0x72>
{
  4016d4:	b470      	push	{r4, r5, r6}
	p_twihs->TWIHS_MMR = 0;
  4016d6:	2600      	movs	r6, #0
	uint8_t *buffer = p_packet->buffer;
  4016d8:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  4016da:	605e      	str	r6, [r3, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  4016dc:	7c0a      	ldrb	r2, [r1, #16]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4016de:	684d      	ldr	r5, [r1, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  4016e0:	0412      	lsls	r2, r2, #16
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4016e2:	022d      	lsls	r5, r5, #8
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  4016e4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4016e8:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  4016ec:	432a      	orrs	r2, r5
  4016ee:	605a      	str	r2, [r3, #4]
	p_twihs->TWIHS_IADR = 0;
  4016f0:	60de      	str	r6, [r3, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4016f2:	684a      	ldr	r2, [r1, #4]
	if (len == 0)
  4016f4:	b98a      	cbnz	r2, 40171a <twihs_master_write+0x4e>
		return 0;
  4016f6:	4615      	mov	r5, r2
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4016f8:	60dd      	str	r5, [r3, #12]
		status = p_twihs->TWIHS_SR;
  4016fa:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWIHS_SR_NACK) {
  4016fc:	05d6      	lsls	r6, r2, #23
  4016fe:	d409      	bmi.n	401714 <twihs_master_write+0x48>
		if (!(status & TWIHS_SR_TXRDY)) {
  401700:	0755      	lsls	r5, r2, #29
  401702:	d5fa      	bpl.n	4016fa <twihs_master_write+0x2e>
		p_twihs->TWIHS_THR = *buffer++;
  401704:	f814 2b01 	ldrb.w	r2, [r4], #1
	while (cnt > 0) {
  401708:	3801      	subs	r0, #1
		p_twihs->TWIHS_THR = *buffer++;
  40170a:	635a      	str	r2, [r3, #52]	; 0x34
	while (cnt > 0) {
  40170c:	d013      	beq.n	401736 <twihs_master_write+0x6a>
		status = p_twihs->TWIHS_SR;
  40170e:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWIHS_SR_NACK) {
  401710:	05d6      	lsls	r6, r2, #23
  401712:	d5f5      	bpl.n	401700 <twihs_master_write+0x34>
			return TWIHS_RECEIVE_NACK;
  401714:	2005      	movs	r0, #5
}
  401716:	bc70      	pop	{r4, r5, r6}
  401718:	4770      	bx	lr
	if (len > 1) {
  40171a:	2a01      	cmp	r2, #1
	val = addr[0];
  40171c:	780d      	ldrb	r5, [r1, #0]
	if (len > 1) {
  40171e:	ddeb      	ble.n	4016f8 <twihs_master_write+0x2c>
		val |= addr[1];
  401720:	784e      	ldrb	r6, [r1, #1]
	if (len > 2) {
  401722:	2a02      	cmp	r2, #2
		val |= addr[1];
  401724:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
	if (len > 2) {
  401728:	d0e6      	beq.n	4016f8 <twihs_master_write+0x2c>
		val |= addr[2];
  40172a:	788a      	ldrb	r2, [r1, #2]
  40172c:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
  401730:	e7e2      	b.n	4016f8 <twihs_master_write+0x2c>
		if (status & TWIHS_SR_TXRDY) {
  401732:	0751      	lsls	r1, r2, #29
  401734:	d405      	bmi.n	401742 <twihs_master_write+0x76>
		status = p_twihs->TWIHS_SR;
  401736:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWIHS_SR_NACK) {
  401738:	05d4      	lsls	r4, r2, #23
  40173a:	d4eb      	bmi.n	401714 <twihs_master_write+0x48>
  40173c:	e7f9      	b.n	401732 <twihs_master_write+0x66>
		return TWIHS_INVALID_ARGUMENT;
  40173e:	2001      	movs	r0, #1
  401740:	4770      	bx	lr
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401742:	2202      	movs	r2, #2
  401744:	601a      	str	r2, [r3, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401746:	6a1a      	ldr	r2, [r3, #32]
  401748:	07d2      	lsls	r2, r2, #31
  40174a:	d5fc      	bpl.n	401746 <twihs_master_write+0x7a>
}
  40174c:	bc70      	pop	{r4, r5, r6}
  40174e:	4770      	bx	lr

00401750 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  401750:	b5f0      	push	{r4, r5, r6, r7, lr}
  401752:	4603      	mov	r3, r0
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401754:	4c24      	ldr	r4, [pc, #144]	; (4017e8 <usart_init_rs232+0x98>)
	p_usart->US_MR = 0;
  401756:	2000      	movs	r0, #0
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401758:	f04f 0e88 	mov.w	lr, #136	; 0x88
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40175c:	f8c3 40e4 	str.w	r4, [r3, #228]	; 0xe4
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401760:	2724      	movs	r7, #36	; 0x24
	p_usart->US_CR = US_CR_RSTSTA;
  401762:	f44f 7680 	mov.w	r6, #256	; 0x100
	p_usart->US_CR = US_CR_RTSDIS;
  401766:	f44f 2500 	mov.w	r5, #524288	; 0x80000
	ul_reg_val = 0;
  40176a:	4c20      	ldr	r4, [pc, #128]	; (4017ec <usart_init_rs232+0x9c>)
	p_usart->US_MR = 0;
  40176c:	6058      	str	r0, [r3, #4]
	ul_reg_val = 0;
  40176e:	6020      	str	r0, [r4, #0]
	p_usart->US_RTOR = 0;
  401770:	6258      	str	r0, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401772:	6298      	str	r0, [r3, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401774:	f8c3 e000 	str.w	lr, [r3]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401778:	601f      	str	r7, [r3, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  40177a:	601e      	str	r6, [r3, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  40177c:	601d      	str	r5, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40177e:	b361      	cbz	r1, 4017da <usart_init_rs232+0x8a>
  401780:	6808      	ldr	r0, [r1, #0]
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401782:	0105      	lsls	r5, r0, #4
  401784:	42aa      	cmp	r2, r5
  401786:	d31c      	bcc.n	4017c2 <usart_init_rs232+0x72>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401788:	0868      	lsrs	r0, r5, #1
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40178a:	f64f 76fe 	movw	r6, #65534	; 0xfffe
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40178e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
  401792:	fbb2 f2f5 	udiv	r2, r2, r5
	cd = cd_fp >> 3;
  401796:	08d5      	lsrs	r5, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401798:	1e68      	subs	r0, r5, #1
  40179a:	42b0      	cmp	r0, r6
  40179c:	d81d      	bhi.n	4017da <usart_init_rs232+0x8a>
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40179e:	0412      	lsls	r2, r2, #16
	p_usart->US_MR |= ul_reg_val;
  4017a0:	2000      	movs	r0, #0
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4017a2:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4017a6:	432a      	orrs	r2, r5
  4017a8:	621a      	str	r2, [r3, #32]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4017aa:	684d      	ldr	r5, [r1, #4]
  4017ac:	688a      	ldr	r2, [r1, #8]
  4017ae:	690f      	ldr	r7, [r1, #16]
  4017b0:	432a      	orrs	r2, r5
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4017b2:	68ce      	ldr	r6, [r1, #12]
	p_usart->US_MR |= ul_reg_val;
  4017b4:	6859      	ldr	r1, [r3, #4]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4017b6:	433a      	orrs	r2, r7
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4017b8:	4332      	orrs	r2, r6
	p_usart->US_MR |= ul_reg_val;
  4017ba:	4311      	orrs	r1, r2
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4017bc:	6022      	str	r2, [r4, #0]
	p_usart->US_MR |= ul_reg_val;
  4017be:	6059      	str	r1, [r3, #4]
  4017c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4017c2:	00c0      	lsls	r0, r0, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4017c4:	f64f 76fe 	movw	r6, #65534	; 0xfffe
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4017c8:	00d2      	lsls	r2, r2, #3
  4017ca:	eb02 0250 	add.w	r2, r2, r0, lsr #1
  4017ce:	fbb2 f2f0 	udiv	r2, r2, r0
	cd = cd_fp >> 3;
  4017d2:	08d5      	lsrs	r5, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4017d4:	1e68      	subs	r0, r5, #1
  4017d6:	42b0      	cmp	r0, r6
  4017d8:	d901      	bls.n	4017de <usart_init_rs232+0x8e>
		return 1;
  4017da:	2001      	movs	r0, #1
  4017dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		p_usart->US_MR |= US_MR_OVER;
  4017de:	6858      	ldr	r0, [r3, #4]
  4017e0:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
  4017e4:	6058      	str	r0, [r3, #4]
  4017e6:	e7da      	b.n	40179e <usart_init_rs232+0x4e>
  4017e8:	55534100 	.word	0x55534100
  4017ec:	2041c05c 	.word	0x2041c05c

004017f0 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4017f0:	2340      	movs	r3, #64	; 0x40
  4017f2:	6003      	str	r3, [r0, #0]
  4017f4:	4770      	bx	lr
  4017f6:	bf00      	nop

004017f8 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4017f8:	2310      	movs	r3, #16
  4017fa:	6003      	str	r3, [r0, #0]
  4017fc:	4770      	bx	lr
  4017fe:	bf00      	nop

00401800 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
  401800:	6081      	str	r1, [r0, #8]
  401802:	4770      	bx	lr

00401804 <usart_get_status>:
	return p_usart->US_CSR;
  401804:	6940      	ldr	r0, [r0, #20]
}
  401806:	4770      	bx	lr

00401808 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401808:	6943      	ldr	r3, [r0, #20]
  40180a:	07db      	lsls	r3, r3, #31
  40180c:	d505      	bpl.n	40181a <usart_read+0x12>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40180e:	6983      	ldr	r3, [r0, #24]
	return 0;
  401810:	2000      	movs	r0, #0
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401812:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401816:	600b      	str	r3, [r1, #0]
	return 0;
  401818:	4770      	bx	lr
		return 1;
  40181a:	2001      	movs	r0, #1
}
  40181c:	4770      	bx	lr
  40181e:	bf00      	nop

00401820 <xdmac_configure_transfer>:
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  401820:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  401824:	6853      	ldr	r3, [r2, #4]
  401826:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  401828:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  40182a:	6893      	ldr	r3, [r2, #8]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  40182c:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  40182e:	6813      	ldr	r3, [r2, #0]
  401830:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401834:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  401836:	6913      	ldr	r3, [r2, #16]
  401838:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40183c:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  40183e:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  401840:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  401842:	6993      	ldr	r3, [r2, #24]
  401844:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401848:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  40184c:	69d3      	ldr	r3, [r2, #28]
  40184e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401852:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  401856:	68d3      	ldr	r3, [r2, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  401858:	678b      	str	r3, [r1, #120]	; 0x78
  40185a:	4770      	bx	lr

0040185c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40185c:	b570      	push	{r4, r5, r6, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40185e:	4810      	ldr	r0, [pc, #64]	; (4018a0 <sysclk_init+0x44>)
  401860:	4d10      	ldr	r5, [pc, #64]	; (4018a4 <sysclk_init+0x48>)
  401862:	47a8      	blx	r5
	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
		break;

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  401864:	2020      	movs	r0, #32
  401866:	4b10      	ldr	r3, [pc, #64]	; (4018a8 <sysclk_init+0x4c>)
  401868:	4c10      	ldr	r4, [pc, #64]	; (4018ac <sysclk_init+0x50>)
  40186a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40186c:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40186e:	2800      	cmp	r0, #0
  401870:	d0fc      	beq.n	40186c <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  401872:	4b0f      	ldr	r3, [pc, #60]	; (4018b0 <sysclk_init+0x54>)
  401874:	4798      	blx	r3
  401876:	4c0f      	ldr	r4, [pc, #60]	; (4018b4 <sysclk_init+0x58>)
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401878:	4b0f      	ldr	r3, [pc, #60]	; (4018b8 <sysclk_init+0x5c>)
  40187a:	4a10      	ldr	r2, [pc, #64]	; (4018bc <sysclk_init+0x60>)
  40187c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40187e:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401880:	2800      	cmp	r0, #0
  401882:	d0fc      	beq.n	40187e <sysclk_init+0x22>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  401884:	2002      	movs	r0, #2
  401886:	4b0e      	ldr	r3, [pc, #56]	; (4018c0 <sysclk_init+0x64>)
  401888:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40188a:	4b0e      	ldr	r3, [pc, #56]	; (4018c4 <sysclk_init+0x68>)
  40188c:	2000      	movs	r0, #0
  40188e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401890:	4b0d      	ldr	r3, [pc, #52]	; (4018c8 <sysclk_init+0x6c>)
  401892:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401894:	462b      	mov	r3, r5
  401896:	4802      	ldr	r0, [pc, #8]	; (4018a0 <sysclk_init+0x44>)

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  401898:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	system_init_flash(sysclk_get_cpu_hz());
  40189c:	4718      	bx	r3
  40189e:	bf00      	nop
  4018a0:	11e1a300 	.word	0x11e1a300
  4018a4:	00402611 	.word	0x00402611
  4018a8:	00402329 	.word	0x00402329
  4018ac:	00402375 	.word	0x00402375
  4018b0:	00402385 	.word	0x00402385
  4018b4:	00402395 	.word	0x00402395
  4018b8:	400e0600 	.word	0x400e0600
  4018bc:	20183f01 	.word	0x20183f01
  4018c0:	004022a5 	.word	0x004022a5
  4018c4:	004022d5 	.word	0x004022d5
  4018c8:	00402529 	.word	0x00402529

004018cc <board_init>:

void board_init(void)
{
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4018cc:	4ba4      	ldr	r3, [pc, #656]	; (401b60 <board_init+0x294>)
  4018ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
{
  4018d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	WDT->WDT_MR = WDT_MR_WDDIS;
  4018d6:	605a      	str	r2, [r3, #4]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4018d8:	f3bf 8f5f 	dmb	sy
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  4018dc:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 401bd4 <board_init+0x308>
	dw_region_attr =
  4018e0:	4fa0      	ldr	r7, [pc, #640]	; (401b64 <board_init+0x298>)
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  4018e2:	4ea1      	ldr	r6, [pc, #644]	; (401b68 <board_init+0x29c>)
  4018e4:	4640      	mov	r0, r8
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4018e6:	4da1      	ldr	r5, [pc, #644]	; (401b6c <board_init+0x2a0>)
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  4018e8:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4018ea:	ea40 0107 	orr.w	r1, r0, r7
  4018ee:	2011      	movs	r0, #17
  4018f0:	47a8      	blx	r5
		mpu_cal_mpu_region_size(IFLASH_END_ADDRESS - IFLASH_START_ADDRESS) |
  4018f2:	489f      	ldr	r0, [pc, #636]	; (401b70 <board_init+0x2a4>)
  4018f4:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4018f6:	499f      	ldr	r1, [pc, #636]	; (401b74 <board_init+0x2a8>)
	dw_region_attr =
  4018f8:	4c9f      	ldr	r4, [pc, #636]	; (401b78 <board_init+0x2ac>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4018fa:	4301      	orrs	r1, r0
  4018fc:	489f      	ldr	r0, [pc, #636]	; (401b7c <board_init+0x2b0>)
  4018fe:	47a8      	blx	r5
		mpu_cal_mpu_region_size(DTCM_END_ADDRESS - DTCM_START_ADDRESS) |
  401900:	4640      	mov	r0, r8
  401902:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401904:	ea40 0107 	orr.w	r1, r0, r7
  401908:	489d      	ldr	r0, [pc, #628]	; (401b80 <board_init+0x2b4>)
  40190a:	47a8      	blx	r5
		mpu_cal_mpu_region_size(SRAM_FIRST_END_ADDRESS - SRAM_FIRST_START_ADDRESS)
  40190c:	489d      	ldr	r0, [pc, #628]	; (401b84 <board_init+0x2b8>)
  40190e:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401910:	ea40 0104 	orr.w	r1, r0, r4
  401914:	489c      	ldr	r0, [pc, #624]	; (401b88 <board_init+0x2bc>)
  401916:	47a8      	blx	r5
		mpu_cal_mpu_region_size(SRAM_SECOND_END_ADDRESS - SRAM_SECOND_START_ADDRESS) |
  401918:	489c      	ldr	r0, [pc, #624]	; (401b8c <board_init+0x2c0>)
  40191a:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40191c:	ea40 0104 	orr.w	r1, r0, r4
  401920:	489b      	ldr	r0, [pc, #620]	; (401b90 <board_init+0x2c4>)
  401922:	47a8      	blx	r5
		mpu_cal_mpu_region_size(PERIPHERALS_END_ADDRESS - PERIPHERALS_START_ADDRESS)
  401924:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  401928:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40192a:	499a      	ldr	r1, [pc, #616]	; (401b94 <board_init+0x2c8>)
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  40192c:	4c9a      	ldr	r4, [pc, #616]	; (401b98 <board_init+0x2cc>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40192e:	4301      	orrs	r1, r0
  401930:	489a      	ldr	r0, [pc, #616]	; (401b9c <board_init+0x2d0>)
  401932:	47a8      	blx	r5
		mpu_cal_mpu_region_size(EXT_EBI_END_ADDRESS - EXT_EBI_START_ADDRESS) |
  401934:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  401938:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40193a:	4999      	ldr	r1, [pc, #612]	; (401ba0 <board_init+0x2d4>)
  40193c:	4301      	orrs	r1, r0
  40193e:	4899      	ldr	r0, [pc, #612]	; (401ba4 <board_init+0x2d8>)
  401940:	47a8      	blx	r5
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  401942:	6a63      	ldr	r3, [r4, #36]	; 0x24
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  401944:	2005      	movs	r0, #5
  401946:	4a98      	ldr	r2, [pc, #608]	; (401ba8 <board_init+0x2dc>)
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  401948:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
  40194c:	6263      	str	r3, [r4, #36]	; 0x24
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  40194e:	4790      	blx	r2
  __ASM volatile ("dsb");
  401950:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401954:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb");
  401958:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40195c:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  401960:	f04f 0900 	mov.w	r9, #0
  401964:	f8c4 9250 	str.w	r9, [r4, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  401968:	6963      	ldr	r3, [r4, #20]
  40196a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  40196e:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb");
  401970:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401974:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401978:	4b8c      	ldr	r3, [pc, #560]	; (401bac <board_init+0x2e0>)
  40197a:	498d      	ldr	r1, [pc, #564]	; (401bb0 <board_init+0x2e4>)
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40197c:	4a8d      	ldr	r2, [pc, #564]	; (401bb4 <board_init+0x2e8>)
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40197e:	6059      	str	r1, [r3, #4]
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401980:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  401982:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401986:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  40198a:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  40198e:	f023 0301 	bic.w	r3, r3, #1
  401992:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  401996:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
  40199a:	f023 0301 	bic.w	r3, r3, #1
  40199e:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  __ASM volatile ("dsb");
  4019a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4019a6:	f3bf 8f6f 	isb	sy
  4019aa:	4c83      	ldr	r4, [pc, #524]	; (401bb8 <board_init+0x2ec>)
  4019ac:	200a      	movs	r0, #10
  4019ae:	47a0      	blx	r4
  4019b0:	200b      	movs	r0, #11
  4019b2:	47a0      	blx	r4
  4019b4:	200c      	movs	r0, #12
  4019b6:	47a0      	blx	r4
  4019b8:	2010      	movs	r0, #16
  4019ba:	47a0      	blx	r4
  4019bc:	2011      	movs	r0, #17
  4019be:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4019c0:	f44f 7500 	mov.w	r5, #512	; 0x200
  4019c4:	4c7d      	ldr	r4, [pc, #500]	; (401bbc <board_init+0x2f0>)
  4019c6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  4019ca:	4f7d      	ldr	r7, [pc, #500]	; (401bc0 <board_init+0x2f4>)
		base->PIO_PUDR = mask;
  4019cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4019d0:	6123      	str	r3, [r4, #16]
		base->PIO_PUDR = mask;
  4019d2:	2610      	movs	r6, #16
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4019d4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_PUDR = mask;
  4019d8:	f04f 0e08 	mov.w	lr, #8
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4019dc:	6323      	str	r3, [r4, #48]	; 0x30
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  4019de:	4638      	mov	r0, r7
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4019e0:	613d      	str	r5, [r7, #16]
  4019e2:	464b      	mov	r3, r9
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4019e4:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
  4019e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4019ec:	633d      	str	r5, [r7, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4019ee:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4019f0:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  4019f4:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4019f6:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4019fa:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  4019fc:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  4019fe:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  401a02:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  401a06:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 401bd8 <board_init+0x30c>
  401a0a:	f42c 7c00 	bic.w	ip, ip, #512	; 0x200
  401a0e:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401a12:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  401a16:	f42c 7c00 	bic.w	ip, ip, #512	; 0x200
  401a1a:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  401a1e:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  401a22:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  401a26:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  401a2a:	6621      	str	r1, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401a2c:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401a30:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401a32:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401a34:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401a38:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  401a3c:	f42c 1c00 	bic.w	ip, ip, #2097152	; 0x200000
  401a40:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401a44:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  401a48:	f42c 1c00 	bic.w	ip, ip, #2097152	; 0x200000
  401a4c:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401a50:	6061      	str	r1, [r4, #4]
  401a52:	f8d8 1114 	ldr.w	r1, [r8, #276]	; 0x114
  401a56:	ea41 0c06 	orr.w	ip, r1, r6
		base->PIO_PUDR = mask;
  401a5a:	495a      	ldr	r1, [pc, #360]	; (401bc4 <board_init+0x2f8>)
  401a5c:	f8c8 c114 	str.w	ip, [r8, #276]	; 0x114
  401a60:	660e      	str	r6, [r1, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401a62:	f8c1 6090 	str.w	r6, [r1, #144]	; 0x90
		base->PIO_MDDR = mask;
  401a66:	654e      	str	r6, [r1, #84]	; 0x54
		base->PIO_IFDR = mask;
  401a68:	624e      	str	r6, [r1, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401a6a:	f8c1 6080 	str.w	r6, [r1, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401a6e:	f8d1 c070 	ldr.w	ip, [r1, #112]	; 0x70
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  401a72:	f8df 8168 	ldr.w	r8, [pc, #360]	; 401bdc <board_init+0x310>
  401a76:	ea4c 0c06 	orr.w	ip, ip, r6
  401a7a:	f8c1 c070 	str.w	ip, [r1, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401a7e:	f8d1 c074 	ldr.w	ip, [r1, #116]	; 0x74
  401a82:	ea4c 0c06 	orr.w	ip, ip, r6
  401a86:	f8c1 c074 	str.w	ip, [r1, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401a8a:	604e      	str	r6, [r1, #4]
  401a8c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
		base->PIO_PUDR = mask;
  401a90:	f8c4 e060 	str.w	lr, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401a94:	f8c4 e090 	str.w	lr, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401a98:	f8c4 e054 	str.w	lr, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401a9c:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401aa0:	f8c4 e080 	str.w	lr, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401aa4:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  401aa8:	f02c 0c08 	bic.w	ip, ip, #8
  401aac:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401ab0:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  401ab4:	f02c 0c08 	bic.w	ip, ip, #8
  401ab8:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401abc:	f8c4 e004 	str.w	lr, [r4, #4]
		base->PIO_PUDR = mask;
  401ac0:	6626      	str	r6, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401ac2:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401ac6:	6566      	str	r6, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401ac8:	6266      	str	r6, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401aca:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401ace:	f8d4 e070 	ldr.w	lr, [r4, #112]	; 0x70
  401ad2:	f02e 0e10 	bic.w	lr, lr, #16
  401ad6:	f8c4 e070 	str.w	lr, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401ada:	f8d4 e074 	ldr.w	lr, [r4, #116]	; 0x74
  401ade:	f02e 0e10 	bic.w	lr, lr, #16
  401ae2:	f8c4 e074 	str.w	lr, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401ae6:	6066      	str	r6, [r4, #4]
  401ae8:	47c0      	blx	r8
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  401aea:	464b      	mov	r3, r9
  401aec:	4638      	mov	r0, r7
  401aee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401af2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401af6:	47c0      	blx	r8
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  401af8:	4638      	mov	r0, r7
  401afa:	2301      	movs	r3, #1
  401afc:	22ff      	movs	r2, #255	; 0xff
  401afe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401b02:	47c0      	blx	r8
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  401b04:	2301      	movs	r3, #1
  401b06:	223f      	movs	r2, #63	; 0x3f
  401b08:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401b0c:	482e      	ldr	r0, [pc, #184]	; (401bc8 <board_init+0x2fc>)
  401b0e:	47c0      	blx	r8
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  401b10:	4620      	mov	r0, r4
  401b12:	2301      	movs	r3, #1
  401b14:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  401b18:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401b1c:	47c0      	blx	r8
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  401b1e:	4638      	mov	r0, r7
  401b20:	2301      	movs	r3, #1
  401b22:	f44f 7280 	mov.w	r2, #256	; 0x100
  401b26:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401b2a:	47c0      	blx	r8
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  401b2c:	4638      	mov	r0, r7
  401b2e:	2301      	movs	r3, #1
  401b30:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401b34:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401b38:	47c0      	blx	r8
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  401b3a:	2301      	movs	r3, #1
  401b3c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401b40:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401b44:	4821      	ldr	r0, [pc, #132]	; (401bcc <board_init+0x300>)
  401b46:	47c0      	blx	r8
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  401b48:	464b      	mov	r3, r9
  401b4a:	462a      	mov	r2, r5
  401b4c:	4638      	mov	r0, r7
  401b4e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401b52:	47c0      	blx	r8
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  401b54:	4629      	mov	r1, r5
  401b56:	4638      	mov	r0, r7
  401b58:	4b1d      	ldr	r3, [pc, #116]	; (401bd0 <board_init+0x304>)
	pio_configure_pin(ISI_PCK_PIO, ISI_PCK_FLAGS);
	pio_configure_pin(ISI_PCK0_PIO, ISI_PCK0_FLAGS);
	pio_configure_pin(OV_PWD_GPIO, OV_PWD_FLAGS);
	pio_configure_pin(OV_RST_GPIO, OV_RST_FLAGS);
#endif
}
  401b5a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  401b5e:	4718      	bx	r3
  401b60:	400e1850 	.word	0x400e1850
  401b64:	01000001 	.word	0x01000001
  401b68:	00401bf9 	.word	0x00401bf9
  401b6c:	00401bed 	.word	0x00401bed
  401b70:	001fffff 	.word	0x001fffff
  401b74:	06230001 	.word	0x06230001
  401b78:	03230001 	.word	0x03230001
  401b7c:	00400012 	.word	0x00400012
  401b80:	20000013 	.word	0x20000013
  401b84:	0003ffff 	.word	0x0003ffff
  401b88:	20400014 	.word	0x20400014
  401b8c:	0001ffff 	.word	0x0001ffff
  401b90:	20440015 	.word	0x20440015
  401b94:	13010001 	.word	0x13010001
  401b98:	e000ed00 	.word	0xe000ed00
  401b9c:	40000016 	.word	0x40000016
  401ba0:	03000001 	.word	0x03000001
  401ba4:	60000017 	.word	0x60000017
  401ba8:	00401be1 	.word	0x00401be1
  401bac:	400e0c00 	.word	0x400e0c00
  401bb0:	5a00080c 	.word	0x5a00080c
  401bb4:	5a00070c 	.word	0x5a00070c
  401bb8:	004023a5 	.word	0x004023a5
  401bbc:	400e0e00 	.word	0x400e0e00
  401bc0:	400e1200 	.word	0x400e1200
  401bc4:	400e1000 	.word	0x400e1000
  401bc8:	400e1600 	.word	0x400e1600
  401bcc:	400e1400 	.word	0x400e1400
  401bd0:	00401c1d 	.word	0x00401c1d
  401bd4:	003fffff 	.word	0x003fffff
  401bd8:	40088000 	.word	0x40088000
  401bdc:	00401c21 	.word	0x00401c21

00401be0 <mpu_enable>:
 *
 * \param dwMPUEnable  Enable/Disable the memory region.
 */
void mpu_enable(uint32_t dw_mpu_enable)
{
	MPU->CTRL = dw_mpu_enable ;
  401be0:	4b01      	ldr	r3, [pc, #4]	; (401be8 <mpu_enable+0x8>)
  401be2:	6058      	str	r0, [r3, #4]
  401be4:	4770      	bx	lr
  401be6:	bf00      	nop
  401be8:	e000ed90 	.word	0xe000ed90

00401bec <mpu_set_region>:
 * \param dwRegionBaseAddr  Memory region base address.
 * \param dwRegionAttr  Memory region attributes.
 */
void mpu_set_region(uint32_t dw_region_base_addr, uint32_t dw_region_attr)
{
	MPU->RBAR = dw_region_base_addr;
  401bec:	4b01      	ldr	r3, [pc, #4]	; (401bf4 <mpu_set_region+0x8>)
  401bee:	60d8      	str	r0, [r3, #12]
	MPU->RASR = dw_region_attr;
  401bf0:	6119      	str	r1, [r3, #16]
  401bf2:	4770      	bx	lr
  401bf4:	e000ed90 	.word	0xe000ed90

00401bf8 <mpu_cal_mpu_region_size>:
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;

	while( dwReturnValue < 31 ) {
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  401bf8:	2820      	cmp	r0, #32
  401bfa:	d90d      	bls.n	401c18 <mpu_cal_mpu_region_size+0x20>
  401bfc:	2240      	movs	r2, #64	; 0x40
  401bfe:	2305      	movs	r3, #5
  401c00:	e002      	b.n	401c08 <mpu_cal_mpu_region_size+0x10>
			break;
		} else {
			dwReturnValue++;
  401c02:	3301      	adds	r3, #1
	while( dwReturnValue < 31 ) {
  401c04:	2b1f      	cmp	r3, #31
  401c06:	d005      	beq.n	401c14 <mpu_cal_mpu_region_size+0x1c>
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  401c08:	4290      	cmp	r0, r2
		}
		dwRegionSize <<= 1;
  401c0a:	ea4f 0242 	mov.w	r2, r2, lsl #1
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  401c0e:	d8f8      	bhi.n	401c02 <mpu_cal_mpu_region_size+0xa>
  401c10:	0058      	lsls	r0, r3, #1
  401c12:	4770      	bx	lr
  401c14:	203e      	movs	r0, #62	; 0x3e
  401c16:	4770      	bx	lr
  401c18:	2008      	movs	r0, #8
	}

	return ( dwReturnValue << 1 );
}
  401c1a:	4770      	bx	lr

00401c1c <pio_set>:
  401c1c:	6301      	str	r1, [r0, #48]	; 0x30
  401c1e:	4770      	bx	lr

00401c20 <pio_configure>:
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
	/* Configure pins */
	switch (ul_type) {
  401c20:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
{
  401c24:	b430      	push	{r4, r5}
	switch (ul_type) {
  401c26:	d03b      	beq.n	401ca0 <pio_configure+0x80>
  401c28:	d931      	bls.n	401c8e <pio_configure+0x6e>
  401c2a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401c2e:	d01b      	beq.n	401c68 <pio_configure+0x48>
  401c30:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401c34:	d018      	beq.n	401c68 <pio_configure+0x48>
  401c36:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401c3a:	d003      	beq.n	401c44 <pio_configure+0x24>
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
		break;

	default:
		return 0;
  401c3c:	2300      	movs	r3, #0
	}

	return 1;
}
  401c3e:	bc30      	pop	{r4, r5}
  401c40:	4618      	mov	r0, r3
  401c42:	4770      	bx	lr
	if (ul_pull_up_enable) {
  401c44:	07dd      	lsls	r5, r3, #31
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401c46:	6442      	str	r2, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401c48:	d448      	bmi.n	401cdc <pio_configure+0xbc>
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401c4a:	f013 0f0a 	tst.w	r3, #10
		p_pio->PIO_PUDR = ul_mask;
  401c4e:	6602      	str	r2, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401c50:	d048      	beq.n	401ce4 <pio_configure+0xc4>
	if (ul_attribute & PIO_DEGLITCH) {
  401c52:	079c      	lsls	r4, r3, #30
		p_pio->PIO_IFER = ul_mask;
  401c54:	6202      	str	r2, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  401c56:	d548      	bpl.n	401cea <pio_configure+0xca>
		p_pio->PIO_IFSCDR = ul_mask;
  401c58:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
	return 1;
  401c5c:	2301      	movs	r3, #1
	p_pio->PIO_ODR = ul_mask;
  401c5e:	6142      	str	r2, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401c60:	6002      	str	r2, [r0, #0]
}
  401c62:	4618      	mov	r0, r3
  401c64:	bc30      	pop	{r4, r5}
  401c66:	4770      	bx	lr
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  401c68:	f003 0404 	and.w	r4, r3, #4
	if (ul_pull_up_enable) {
  401c6c:	07db      	lsls	r3, r3, #31
	p_pio->PIO_IDR = ul_mask;
  401c6e:	6442      	str	r2, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401c70:	d52f      	bpl.n	401cd2 <pio_configure+0xb2>
		p_pio->PIO_PUER = ul_mask;
  401c72:	6642      	str	r2, [r0, #100]	; 0x64
	if (ul_multidrive_enable) {
  401c74:	2c00      	cmp	r4, #0
  401c76:	d02f      	beq.n	401cd8 <pio_configure+0xb8>
		p_pio->PIO_MDER = ul_mask;
  401c78:	6502      	str	r2, [r0, #80]	; 0x50
	if (ul_default_level) {
  401c7a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401c7e:	d04e      	beq.n	401d1e <pio_configure+0xfe>
		p_pio->PIO_CODR = ul_mask;
  401c80:	6342      	str	r2, [r0, #52]	; 0x34
	return 1;
  401c82:	2301      	movs	r3, #1
	p_pio->PIO_OER = ul_mask;
  401c84:	6102      	str	r2, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401c86:	6002      	str	r2, [r0, #0]
}
  401c88:	4618      	mov	r0, r3
  401c8a:	bc30      	pop	{r4, r5}
  401c8c:	4770      	bx	lr
	switch (ul_type) {
  401c8e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401c92:	d005      	beq.n	401ca0 <pio_configure+0x80>
  401c94:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401c98:	d002      	beq.n	401ca0 <pio_configure+0x80>
  401c9a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401c9e:	d1cd      	bne.n	401c3c <pio_configure+0x1c>
	switch (ul_type) {
  401ca0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
	p_pio->PIO_IDR = ul_mask;
  401ca4:	6442      	str	r2, [r0, #68]	; 0x44
	switch (ul_type) {
  401ca6:	d03c      	beq.n	401d22 <pio_configure+0x102>
  401ca8:	d924      	bls.n	401cf4 <pio_configure+0xd4>
  401caa:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401cae:	d042      	beq.n	401d36 <pio_configure+0x116>
  401cb0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401cb4:	d105      	bne.n	401cc2 <pio_configure+0xa2>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401cb6:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401cb8:	4311      	orrs	r1, r2
  401cba:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401cbc:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401cbe:	4311      	orrs	r1, r2
  401cc0:	6741      	str	r1, [r0, #116]	; 0x74
	if (ul_pull_up_enable) {
  401cc2:	07db      	lsls	r3, r3, #31
	p_pio->PIO_PDR = ul_mask;
  401cc4:	6042      	str	r2, [r0, #4]
	if (ul_pull_up_enable) {
  401cc6:	d525      	bpl.n	401d14 <pio_configure+0xf4>
	return 1;
  401cc8:	2301      	movs	r3, #1
		p_pio->PIO_PUER = ul_mask;
  401cca:	6642      	str	r2, [r0, #100]	; 0x64
}
  401ccc:	4618      	mov	r0, r3
  401cce:	bc30      	pop	{r4, r5}
  401cd0:	4770      	bx	lr
		p_pio->PIO_PUDR = ul_mask;
  401cd2:	6602      	str	r2, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  401cd4:	2c00      	cmp	r4, #0
  401cd6:	d1cf      	bne.n	401c78 <pio_configure+0x58>
		p_pio->PIO_MDDR = ul_mask;
  401cd8:	6542      	str	r2, [r0, #84]	; 0x54
  401cda:	e7ce      	b.n	401c7a <pio_configure+0x5a>
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401cdc:	f013 0f0a 	tst.w	r3, #10
		p_pio->PIO_PUER = ul_mask;
  401ce0:	6642      	str	r2, [r0, #100]	; 0x64
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401ce2:	d1b6      	bne.n	401c52 <pio_configure+0x32>
	if (ul_attribute & PIO_DEGLITCH) {
  401ce4:	079c      	lsls	r4, r3, #30
		p_pio->PIO_IFDR = ul_mask;
  401ce6:	6242      	str	r2, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  401ce8:	d4b6      	bmi.n	401c58 <pio_configure+0x38>
		if (ul_attribute & PIO_DEBOUNCE) {
  401cea:	0719      	lsls	r1, r3, #28
  401cec:	d5b6      	bpl.n	401c5c <pio_configure+0x3c>
			p_pio->PIO_IFSCER = ul_mask;
  401cee:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  401cf2:	e7b3      	b.n	401c5c <pio_configure+0x3c>
	switch (ul_type) {
  401cf4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401cf8:	d1e3      	bne.n	401cc2 <pio_configure+0xa2>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401cfa:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401cfc:	43d1      	mvns	r1, r2
  401cfe:	6f05      	ldr	r5, [r0, #112]	; 0x70
  401d00:	402c      	ands	r4, r5
  401d02:	460d      	mov	r5, r1
  401d04:	400c      	ands	r4, r1
  401d06:	6704      	str	r4, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401d08:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401d0a:	6f44      	ldr	r4, [r0, #116]	; 0x74
  401d0c:	4021      	ands	r1, r4
  401d0e:	4029      	ands	r1, r5
  401d10:	6741      	str	r1, [r0, #116]	; 0x74
  401d12:	e7d6      	b.n	401cc2 <pio_configure+0xa2>
	return 1;
  401d14:	2301      	movs	r3, #1
		p_pio->PIO_PUDR = ul_mask;
  401d16:	6602      	str	r2, [r0, #96]	; 0x60
}
  401d18:	4618      	mov	r0, r3
  401d1a:	bc30      	pop	{r4, r5}
  401d1c:	4770      	bx	lr
		p_pio->PIO_SODR = ul_mask;
  401d1e:	6302      	str	r2, [r0, #48]	; 0x30
  401d20:	e7af      	b.n	401c82 <pio_configure+0x62>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401d22:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401d24:	4311      	orrs	r1, r2
  401d26:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401d28:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401d2a:	6f44      	ldr	r4, [r0, #116]	; 0x74
  401d2c:	4021      	ands	r1, r4
  401d2e:	ea21 0102 	bic.w	r1, r1, r2
  401d32:	6741      	str	r1, [r0, #116]	; 0x74
  401d34:	e7c5      	b.n	401cc2 <pio_configure+0xa2>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401d36:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401d38:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401d3a:	4021      	ands	r1, r4
  401d3c:	ea21 0102 	bic.w	r1, r1, r2
  401d40:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401d42:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401d44:	4311      	orrs	r1, r2
  401d46:	6741      	str	r1, [r0, #116]	; 0x74
  401d48:	e7bb      	b.n	401cc2 <pio_configure+0xa2>
  401d4a:	bf00      	nop

00401d4c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401d4c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401d4e:	4770      	bx	lr

00401d50 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401d50:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401d52:	4770      	bx	lr

00401d54 <pio_configure_pin>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401d54:	4b53      	ldr	r3, [pc, #332]	; (401ea4 <pio_configure_pin+0x150>)
	switch (ul_flags & PIO_TYPE_Msk) {
  401d56:	f001 42f0 	and.w	r2, r1, #2013265920	; 0x78000000
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401d5a:	eb03 1350 	add.w	r3, r3, r0, lsr #5
	switch (ul_flags & PIO_TYPE_Msk) {
  401d5e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
{
  401d62:	b470      	push	{r4, r5, r6}
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401d64:	ea4f 2343 	mov.w	r3, r3, lsl #9
	switch (ul_flags & PIO_TYPE_Msk) {
  401d68:	d06d      	beq.n	401e46 <pio_configure_pin+0xf2>
  401d6a:	d80b      	bhi.n	401d84 <pio_configure_pin+0x30>
  401d6c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
  401d70:	d027      	beq.n	401dc2 <pio_configure_pin+0x6e>
  401d72:	f1b2 5fc0 	cmp.w	r2, #402653184	; 0x18000000
  401d76:	d052      	beq.n	401e1e <pio_configure_pin+0xca>
  401d78:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
  401d7c:	d038      	beq.n	401df0 <pio_configure_pin+0x9c>
		return 0;
  401d7e:	2000      	movs	r0, #0
}
  401d80:	bc70      	pop	{r4, r5, r6}
  401d82:	4770      	bx	lr
	switch (ul_flags & PIO_TYPE_Msk) {
  401d84:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
  401d88:	d066      	beq.n	401e58 <pio_configure_pin+0x104>
  401d8a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401d8e:	d063      	beq.n	401e58 <pio_configure_pin+0x104>
  401d90:	f1b2 5f20 	cmp.w	r2, #671088640	; 0x28000000
  401d94:	d1f3      	bne.n	401d7e <pio_configure_pin+0x2a>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401d96:	f000 001f 	and.w	r0, r0, #31
  401d9a:	2201      	movs	r2, #1
	if (ul_pull_up_enable) {
  401d9c:	07cd      	lsls	r5, r1, #31
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401d9e:	fa02 f200 	lsl.w	r2, r2, r0
	p_pio->PIO_IDR = ul_mask;
  401da2:	645a      	str	r2, [r3, #68]	; 0x44
	if (ul_pull_up_enable) {
  401da4:	d573      	bpl.n	401e8e <pio_configure_pin+0x13a>
		p_pio->PIO_PUER = ul_mask;
  401da6:	665a      	str	r2, [r3, #100]	; 0x64
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401da8:	f011 0f0a 	tst.w	r1, #10
  401dac:	d06d      	beq.n	401e8a <pio_configure_pin+0x136>
		p_pio->PIO_IFER = ul_mask;
  401dae:	621a      	str	r2, [r3, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  401db0:	078c      	lsls	r4, r1, #30
  401db2:	d56e      	bpl.n	401e92 <pio_configure_pin+0x13e>
		p_pio->PIO_IFSCDR = ul_mask;
  401db4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  401db8:	615a      	str	r2, [r3, #20]
	return 1;
  401dba:	2001      	movs	r0, #1
	p_pio->PIO_PER = ul_mask;
  401dbc:	601a      	str	r2, [r3, #0]
}
  401dbe:	bc70      	pop	{r4, r5, r6}
  401dc0:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401dc2:	f000 021f 	and.w	r2, r0, #31
  401dc6:	2001      	movs	r0, #1
	if (ul_pull_up_enable) {
  401dc8:	07c9      	lsls	r1, r1, #31
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401dca:	fa00 f202 	lsl.w	r2, r0, r2
	p_pio->PIO_IDR = ul_mask;
  401dce:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABCDSR[0];
  401dd0:	6f1c      	ldr	r4, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401dd2:	ea44 0402 	orr.w	r4, r4, r2
  401dd6:	671c      	str	r4, [r3, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401dd8:	6f5c      	ldr	r4, [r3, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401dda:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  401ddc:	ea04 0405 	and.w	r4, r4, r5
  401de0:	ea24 0402 	bic.w	r4, r4, r2
  401de4:	675c      	str	r4, [r3, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  401de6:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
  401de8:	d516      	bpl.n	401e18 <pio_configure_pin+0xc4>
		p_pio->PIO_PUER = ul_mask;
  401dea:	665a      	str	r2, [r3, #100]	; 0x64
}
  401dec:	bc70      	pop	{r4, r5, r6}
  401dee:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401df0:	f000 021f 	and.w	r2, r0, #31
  401df4:	2001      	movs	r0, #1
  401df6:	fa00 f202 	lsl.w	r2, r0, r2
	p_pio->PIO_IDR = ul_mask;
  401dfa:	645a      	str	r2, [r3, #68]	; 0x44
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401dfc:	43d6      	mvns	r6, r2
		ul_sr = p_pio->PIO_ABCDSR[0];
  401dfe:	6f1d      	ldr	r5, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401e00:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  401e02:	4025      	ands	r5, r4
  401e04:	4035      	ands	r5, r6
  401e06:	671d      	str	r5, [r3, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401e08:	6f5c      	ldr	r4, [r3, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401e0a:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  401e0c:	402c      	ands	r4, r5
  401e0e:	4034      	ands	r4, r6
  401e10:	675c      	str	r4, [r3, #116]	; 0x74
	if (ul_pull_up_enable) {
  401e12:	07cc      	lsls	r4, r1, #31
	p_pio->PIO_PDR = ul_mask;
  401e14:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
  401e16:	d4e8      	bmi.n	401dea <pio_configure_pin+0x96>
		p_pio->PIO_PUDR = ul_mask;
  401e18:	661a      	str	r2, [r3, #96]	; 0x60
}
  401e1a:	bc70      	pop	{r4, r5, r6}
  401e1c:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401e1e:	f000 021f 	and.w	r2, r0, #31
  401e22:	2001      	movs	r0, #1
  401e24:	fa00 f202 	lsl.w	r2, r0, r2
	p_pio->PIO_IDR = ul_mask;
  401e28:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABCDSR[0];
  401e2a:	6f1c      	ldr	r4, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401e2c:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  401e2e:	402c      	ands	r4, r5
  401e30:	ea24 0402 	bic.w	r4, r4, r2
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401e34:	671c      	str	r4, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
  401e36:	07ce      	lsls	r6, r1, #31
		ul_sr = p_pio->PIO_ABCDSR[1];
  401e38:	6f5c      	ldr	r4, [r3, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401e3a:	ea44 0402 	orr.w	r4, r4, r2
  401e3e:	675c      	str	r4, [r3, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  401e40:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
  401e42:	d5e9      	bpl.n	401e18 <pio_configure_pin+0xc4>
  401e44:	e7d1      	b.n	401dea <pio_configure_pin+0x96>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401e46:	f000 021f 	and.w	r2, r0, #31
  401e4a:	2001      	movs	r0, #1
  401e4c:	fa00 f202 	lsl.w	r2, r0, r2
	p_pio->PIO_IDR = ul_mask;
  401e50:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABCDSR[0];
  401e52:	6f1c      	ldr	r4, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401e54:	4314      	orrs	r4, r2
  401e56:	e7ed      	b.n	401e34 <pio_configure_pin+0xe0>
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401e58:	f000 001f 	and.w	r0, r0, #31
  401e5c:	2201      	movs	r2, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401e5e:	f001 5460 	and.w	r4, r1, #939524096	; 0x38000000
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  401e62:	f001 0504 	and.w	r5, r1, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401e66:	4082      	lsls	r2, r0
	if (ul_pull_up_enable) {
  401e68:	07c9      	lsls	r1, r1, #31
	p_pio->PIO_IDR = ul_mask;
  401e6a:	645a      	str	r2, [r3, #68]	; 0x44
	if (ul_pull_up_enable) {
  401e6c:	d50b      	bpl.n	401e86 <pio_configure_pin+0x132>
		p_pio->PIO_PUER = ul_mask;
  401e6e:	665a      	str	r2, [r3, #100]	; 0x64
	if (ul_multidrive_enable) {
  401e70:	b1a5      	cbz	r5, 401e9c <pio_configure_pin+0x148>
		p_pio->PIO_MDER = ul_mask;
  401e72:	651a      	str	r2, [r3, #80]	; 0x50
	if (ul_default_level) {
  401e74:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
  401e78:	d012      	beq.n	401ea0 <pio_configure_pin+0x14c>
		p_pio->PIO_CODR = ul_mask;
  401e7a:	635a      	str	r2, [r3, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  401e7c:	611a      	str	r2, [r3, #16]
	return 1;
  401e7e:	2001      	movs	r0, #1
	p_pio->PIO_PER = ul_mask;
  401e80:	601a      	str	r2, [r3, #0]
}
  401e82:	bc70      	pop	{r4, r5, r6}
  401e84:	4770      	bx	lr
		p_pio->PIO_PUDR = ul_mask;
  401e86:	661a      	str	r2, [r3, #96]	; 0x60
  401e88:	e7f2      	b.n	401e70 <pio_configure_pin+0x11c>
		p_pio->PIO_IFDR = ul_mask;
  401e8a:	625a      	str	r2, [r3, #36]	; 0x24
  401e8c:	e790      	b.n	401db0 <pio_configure_pin+0x5c>
		p_pio->PIO_PUDR = ul_mask;
  401e8e:	661a      	str	r2, [r3, #96]	; 0x60
  401e90:	e78a      	b.n	401da8 <pio_configure_pin+0x54>
		if (ul_attribute & PIO_DEBOUNCE) {
  401e92:	0708      	lsls	r0, r1, #28
  401e94:	d590      	bpl.n	401db8 <pio_configure_pin+0x64>
			p_pio->PIO_IFSCER = ul_mask;
  401e96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  401e9a:	e78d      	b.n	401db8 <pio_configure_pin+0x64>
		p_pio->PIO_MDDR = ul_mask;
  401e9c:	655a      	str	r2, [r3, #84]	; 0x54
  401e9e:	e7e9      	b.n	401e74 <pio_configure_pin+0x120>
		p_pio->PIO_SODR = ul_mask;
  401ea0:	631a      	str	r2, [r3, #48]	; 0x30
  401ea2:	e7eb      	b.n	401e7c <pio_configure_pin+0x128>
  401ea4:	00200707 	.word	0x00200707

00401ea8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401ea8:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  401eaa:	4b2e      	ldr	r3, [pc, #184]	; (401f64 <PIOA_Handler+0xbc>)
  401eac:	482e      	ldr	r0, [pc, #184]	; (401f68 <PIOA_Handler+0xc0>)
  401eae:	4798      	blx	r3
  401eb0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401eb2:	4b2e      	ldr	r3, [pc, #184]	; (401f6c <PIOA_Handler+0xc4>)
  401eb4:	482c      	ldr	r0, [pc, #176]	; (401f68 <PIOA_Handler+0xc0>)
  401eb6:	4798      	blx	r3
	if (status != 0) {
  401eb8:	4005      	ands	r5, r0
  401eba:	d015      	beq.n	401ee8 <PIOA_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401ebc:	4c2c      	ldr	r4, [pc, #176]	; (401f70 <PIOA_Handler+0xc8>)
  401ebe:	6820      	ldr	r0, [r4, #0]
  401ec0:	280a      	cmp	r0, #10
  401ec2:	d019      	beq.n	401ef8 <PIOA_Handler+0x50>
  401ec4:	6920      	ldr	r0, [r4, #16]
  401ec6:	280a      	cmp	r0, #10
  401ec8:	d01f      	beq.n	401f0a <PIOA_Handler+0x62>
  401eca:	6a20      	ldr	r0, [r4, #32]
  401ecc:	280a      	cmp	r0, #10
  401ece:	d025      	beq.n	401f1c <PIOA_Handler+0x74>
  401ed0:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401ed2:	280a      	cmp	r0, #10
  401ed4:	d02b      	beq.n	401f2e <PIOA_Handler+0x86>
  401ed6:	6c20      	ldr	r0, [r4, #64]	; 0x40
  401ed8:	280a      	cmp	r0, #10
  401eda:	d031      	beq.n	401f40 <PIOA_Handler+0x98>
  401edc:	6d20      	ldr	r0, [r4, #80]	; 0x50
  401ede:	280a      	cmp	r0, #10
  401ee0:	d037      	beq.n	401f52 <PIOA_Handler+0xaa>
  401ee2:	6e20      	ldr	r0, [r4, #96]	; 0x60
  401ee4:	280a      	cmp	r0, #10
  401ee6:	d000      	beq.n	401eea <PIOA_Handler+0x42>
  401ee8:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401eea:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401eec:	4229      	tst	r1, r5
  401eee:	d0fb      	beq.n	401ee8 <PIOA_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401ef0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	pio_handler_process(PIOA, ID_PIOA);
}
  401ef2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401ef6:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401ef8:	6861      	ldr	r1, [r4, #4]
  401efa:	420d      	tst	r5, r1
  401efc:	d0e2      	beq.n	401ec4 <PIOA_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401efe:	68e3      	ldr	r3, [r4, #12]
  401f00:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401f02:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  401f04:	439d      	bics	r5, r3
  401f06:	d0ef      	beq.n	401ee8 <PIOA_Handler+0x40>
  401f08:	e7dc      	b.n	401ec4 <PIOA_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401f0a:	6961      	ldr	r1, [r4, #20]
  401f0c:	4229      	tst	r1, r5
  401f0e:	d0dc      	beq.n	401eca <PIOA_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401f10:	69e3      	ldr	r3, [r4, #28]
  401f12:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401f14:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  401f16:	439d      	bics	r5, r3
  401f18:	d0e6      	beq.n	401ee8 <PIOA_Handler+0x40>
  401f1a:	e7d6      	b.n	401eca <PIOA_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401f1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  401f1e:	4229      	tst	r1, r5
  401f20:	d0d6      	beq.n	401ed0 <PIOA_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401f22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401f24:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401f26:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  401f28:	439d      	bics	r5, r3
  401f2a:	d0dd      	beq.n	401ee8 <PIOA_Handler+0x40>
  401f2c:	e7d0      	b.n	401ed0 <PIOA_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401f2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
  401f30:	4229      	tst	r1, r5
  401f32:	d0d0      	beq.n	401ed6 <PIOA_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401f34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401f36:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401f38:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  401f3a:	439d      	bics	r5, r3
  401f3c:	d0d4      	beq.n	401ee8 <PIOA_Handler+0x40>
  401f3e:	e7ca      	b.n	401ed6 <PIOA_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401f40:	6c61      	ldr	r1, [r4, #68]	; 0x44
  401f42:	4229      	tst	r1, r5
  401f44:	d0ca      	beq.n	401edc <PIOA_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401f46:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401f48:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401f4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  401f4c:	439d      	bics	r5, r3
  401f4e:	d0cb      	beq.n	401ee8 <PIOA_Handler+0x40>
  401f50:	e7c4      	b.n	401edc <PIOA_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401f52:	6d61      	ldr	r1, [r4, #84]	; 0x54
  401f54:	4229      	tst	r1, r5
  401f56:	d0c4      	beq.n	401ee2 <PIOA_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401f58:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  401f5a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401f5c:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  401f5e:	439d      	bics	r5, r3
  401f60:	d0c2      	beq.n	401ee8 <PIOA_Handler+0x40>
  401f62:	e7be      	b.n	401ee2 <PIOA_Handler+0x3a>
  401f64:	00401d4d 	.word	0x00401d4d
  401f68:	400e0e00 	.word	0x400e0e00
  401f6c:	00401d51 	.word	0x00401d51
  401f70:	2041c060 	.word	0x2041c060

00401f74 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401f74:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  401f76:	4b2e      	ldr	r3, [pc, #184]	; (402030 <PIOB_Handler+0xbc>)
  401f78:	482e      	ldr	r0, [pc, #184]	; (402034 <PIOB_Handler+0xc0>)
  401f7a:	4798      	blx	r3
  401f7c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401f7e:	4b2e      	ldr	r3, [pc, #184]	; (402038 <PIOB_Handler+0xc4>)
  401f80:	482c      	ldr	r0, [pc, #176]	; (402034 <PIOB_Handler+0xc0>)
  401f82:	4798      	blx	r3
	if (status != 0) {
  401f84:	4005      	ands	r5, r0
  401f86:	d015      	beq.n	401fb4 <PIOB_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401f88:	4c2c      	ldr	r4, [pc, #176]	; (40203c <PIOB_Handler+0xc8>)
  401f8a:	6820      	ldr	r0, [r4, #0]
  401f8c:	280b      	cmp	r0, #11
  401f8e:	d019      	beq.n	401fc4 <PIOB_Handler+0x50>
  401f90:	6920      	ldr	r0, [r4, #16]
  401f92:	280b      	cmp	r0, #11
  401f94:	d01f      	beq.n	401fd6 <PIOB_Handler+0x62>
  401f96:	6a20      	ldr	r0, [r4, #32]
  401f98:	280b      	cmp	r0, #11
  401f9a:	d025      	beq.n	401fe8 <PIOB_Handler+0x74>
  401f9c:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401f9e:	280b      	cmp	r0, #11
  401fa0:	d02b      	beq.n	401ffa <PIOB_Handler+0x86>
  401fa2:	6c20      	ldr	r0, [r4, #64]	; 0x40
  401fa4:	280b      	cmp	r0, #11
  401fa6:	d031      	beq.n	40200c <PIOB_Handler+0x98>
  401fa8:	6d20      	ldr	r0, [r4, #80]	; 0x50
  401faa:	280b      	cmp	r0, #11
  401fac:	d037      	beq.n	40201e <PIOB_Handler+0xaa>
  401fae:	6e20      	ldr	r0, [r4, #96]	; 0x60
  401fb0:	280b      	cmp	r0, #11
  401fb2:	d000      	beq.n	401fb6 <PIOB_Handler+0x42>
  401fb4:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401fb6:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401fb8:	4229      	tst	r1, r5
  401fba:	d0fb      	beq.n	401fb4 <PIOB_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401fbc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    pio_handler_process(PIOB, ID_PIOB);
}
  401fbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401fc2:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401fc4:	6861      	ldr	r1, [r4, #4]
  401fc6:	420d      	tst	r5, r1
  401fc8:	d0e2      	beq.n	401f90 <PIOB_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401fca:	68e3      	ldr	r3, [r4, #12]
  401fcc:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401fce:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  401fd0:	439d      	bics	r5, r3
  401fd2:	d0ef      	beq.n	401fb4 <PIOB_Handler+0x40>
  401fd4:	e7dc      	b.n	401f90 <PIOB_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401fd6:	6961      	ldr	r1, [r4, #20]
  401fd8:	4229      	tst	r1, r5
  401fda:	d0dc      	beq.n	401f96 <PIOB_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401fdc:	69e3      	ldr	r3, [r4, #28]
  401fde:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401fe0:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  401fe2:	439d      	bics	r5, r3
  401fe4:	d0e6      	beq.n	401fb4 <PIOB_Handler+0x40>
  401fe6:	e7d6      	b.n	401f96 <PIOB_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401fe8:	6a61      	ldr	r1, [r4, #36]	; 0x24
  401fea:	4229      	tst	r1, r5
  401fec:	d0d6      	beq.n	401f9c <PIOB_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401fee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401ff0:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401ff2:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  401ff4:	439d      	bics	r5, r3
  401ff6:	d0dd      	beq.n	401fb4 <PIOB_Handler+0x40>
  401ff8:	e7d0      	b.n	401f9c <PIOB_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401ffa:	6b61      	ldr	r1, [r4, #52]	; 0x34
  401ffc:	4229      	tst	r1, r5
  401ffe:	d0d0      	beq.n	401fa2 <PIOB_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402000:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402002:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402004:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  402006:	439d      	bics	r5, r3
  402008:	d0d4      	beq.n	401fb4 <PIOB_Handler+0x40>
  40200a:	e7ca      	b.n	401fa2 <PIOB_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40200c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40200e:	4229      	tst	r1, r5
  402010:	d0ca      	beq.n	401fa8 <PIOB_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402012:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  402014:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402016:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  402018:	439d      	bics	r5, r3
  40201a:	d0cb      	beq.n	401fb4 <PIOB_Handler+0x40>
  40201c:	e7c4      	b.n	401fa8 <PIOB_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40201e:	6d61      	ldr	r1, [r4, #84]	; 0x54
  402020:	4229      	tst	r1, r5
  402022:	d0c4      	beq.n	401fae <PIOB_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402024:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  402026:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402028:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  40202a:	439d      	bics	r5, r3
  40202c:	d0c2      	beq.n	401fb4 <PIOB_Handler+0x40>
  40202e:	e7be      	b.n	401fae <PIOB_Handler+0x3a>
  402030:	00401d4d 	.word	0x00401d4d
  402034:	400e1000 	.word	0x400e1000
  402038:	00401d51 	.word	0x00401d51
  40203c:	2041c060 	.word	0x2041c060

00402040 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  402040:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  402042:	4b2e      	ldr	r3, [pc, #184]	; (4020fc <PIOC_Handler+0xbc>)
  402044:	482e      	ldr	r0, [pc, #184]	; (402100 <PIOC_Handler+0xc0>)
  402046:	4798      	blx	r3
  402048:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40204a:	4b2e      	ldr	r3, [pc, #184]	; (402104 <PIOC_Handler+0xc4>)
  40204c:	482c      	ldr	r0, [pc, #176]	; (402100 <PIOC_Handler+0xc0>)
  40204e:	4798      	blx	r3
	if (status != 0) {
  402050:	4005      	ands	r5, r0
  402052:	d015      	beq.n	402080 <PIOC_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  402054:	4c2c      	ldr	r4, [pc, #176]	; (402108 <PIOC_Handler+0xc8>)
  402056:	6820      	ldr	r0, [r4, #0]
  402058:	280c      	cmp	r0, #12
  40205a:	d019      	beq.n	402090 <PIOC_Handler+0x50>
  40205c:	6920      	ldr	r0, [r4, #16]
  40205e:	280c      	cmp	r0, #12
  402060:	d01f      	beq.n	4020a2 <PIOC_Handler+0x62>
  402062:	6a20      	ldr	r0, [r4, #32]
  402064:	280c      	cmp	r0, #12
  402066:	d025      	beq.n	4020b4 <PIOC_Handler+0x74>
  402068:	6b20      	ldr	r0, [r4, #48]	; 0x30
  40206a:	280c      	cmp	r0, #12
  40206c:	d02b      	beq.n	4020c6 <PIOC_Handler+0x86>
  40206e:	6c20      	ldr	r0, [r4, #64]	; 0x40
  402070:	280c      	cmp	r0, #12
  402072:	d031      	beq.n	4020d8 <PIOC_Handler+0x98>
  402074:	6d20      	ldr	r0, [r4, #80]	; 0x50
  402076:	280c      	cmp	r0, #12
  402078:	d037      	beq.n	4020ea <PIOC_Handler+0xaa>
  40207a:	6e20      	ldr	r0, [r4, #96]	; 0x60
  40207c:	280c      	cmp	r0, #12
  40207e:	d000      	beq.n	402082 <PIOC_Handler+0x42>
  402080:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402082:	6e61      	ldr	r1, [r4, #100]	; 0x64
  402084:	4229      	tst	r1, r5
  402086:	d0fb      	beq.n	402080 <PIOC_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402088:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	pio_handler_process(PIOC, ID_PIOC);
}
  40208a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40208e:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402090:	6861      	ldr	r1, [r4, #4]
  402092:	420d      	tst	r5, r1
  402094:	d0e2      	beq.n	40205c <PIOC_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402096:	68e3      	ldr	r3, [r4, #12]
  402098:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40209a:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  40209c:	439d      	bics	r5, r3
  40209e:	d0ef      	beq.n	402080 <PIOC_Handler+0x40>
  4020a0:	e7dc      	b.n	40205c <PIOC_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4020a2:	6961      	ldr	r1, [r4, #20]
  4020a4:	4229      	tst	r1, r5
  4020a6:	d0dc      	beq.n	402062 <PIOC_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4020a8:	69e3      	ldr	r3, [r4, #28]
  4020aa:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4020ac:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  4020ae:	439d      	bics	r5, r3
  4020b0:	d0e6      	beq.n	402080 <PIOC_Handler+0x40>
  4020b2:	e7d6      	b.n	402062 <PIOC_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4020b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
  4020b6:	4229      	tst	r1, r5
  4020b8:	d0d6      	beq.n	402068 <PIOC_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4020ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4020bc:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4020be:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  4020c0:	439d      	bics	r5, r3
  4020c2:	d0dd      	beq.n	402080 <PIOC_Handler+0x40>
  4020c4:	e7d0      	b.n	402068 <PIOC_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4020c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4020c8:	4229      	tst	r1, r5
  4020ca:	d0d0      	beq.n	40206e <PIOC_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4020cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4020ce:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4020d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  4020d2:	439d      	bics	r5, r3
  4020d4:	d0d4      	beq.n	402080 <PIOC_Handler+0x40>
  4020d6:	e7ca      	b.n	40206e <PIOC_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4020d8:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4020da:	4229      	tst	r1, r5
  4020dc:	d0ca      	beq.n	402074 <PIOC_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4020de:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  4020e0:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4020e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  4020e4:	439d      	bics	r5, r3
  4020e6:	d0cb      	beq.n	402080 <PIOC_Handler+0x40>
  4020e8:	e7c4      	b.n	402074 <PIOC_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4020ea:	6d61      	ldr	r1, [r4, #84]	; 0x54
  4020ec:	4229      	tst	r1, r5
  4020ee:	d0c4      	beq.n	40207a <PIOC_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4020f0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  4020f2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4020f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  4020f6:	439d      	bics	r5, r3
  4020f8:	d0c2      	beq.n	402080 <PIOC_Handler+0x40>
  4020fa:	e7be      	b.n	40207a <PIOC_Handler+0x3a>
  4020fc:	00401d4d 	.word	0x00401d4d
  402100:	400e1200 	.word	0x400e1200
  402104:	00401d51 	.word	0x00401d51
  402108:	2041c060 	.word	0x2041c060

0040210c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  40210c:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  40210e:	4b2e      	ldr	r3, [pc, #184]	; (4021c8 <PIOD_Handler+0xbc>)
  402110:	482e      	ldr	r0, [pc, #184]	; (4021cc <PIOD_Handler+0xc0>)
  402112:	4798      	blx	r3
  402114:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  402116:	4b2e      	ldr	r3, [pc, #184]	; (4021d0 <PIOD_Handler+0xc4>)
  402118:	482c      	ldr	r0, [pc, #176]	; (4021cc <PIOD_Handler+0xc0>)
  40211a:	4798      	blx	r3
	if (status != 0) {
  40211c:	4005      	ands	r5, r0
  40211e:	d015      	beq.n	40214c <PIOD_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  402120:	4c2c      	ldr	r4, [pc, #176]	; (4021d4 <PIOD_Handler+0xc8>)
  402122:	6820      	ldr	r0, [r4, #0]
  402124:	2810      	cmp	r0, #16
  402126:	d019      	beq.n	40215c <PIOD_Handler+0x50>
  402128:	6920      	ldr	r0, [r4, #16]
  40212a:	2810      	cmp	r0, #16
  40212c:	d01f      	beq.n	40216e <PIOD_Handler+0x62>
  40212e:	6a20      	ldr	r0, [r4, #32]
  402130:	2810      	cmp	r0, #16
  402132:	d025      	beq.n	402180 <PIOD_Handler+0x74>
  402134:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402136:	2810      	cmp	r0, #16
  402138:	d02b      	beq.n	402192 <PIOD_Handler+0x86>
  40213a:	6c20      	ldr	r0, [r4, #64]	; 0x40
  40213c:	2810      	cmp	r0, #16
  40213e:	d031      	beq.n	4021a4 <PIOD_Handler+0x98>
  402140:	6d20      	ldr	r0, [r4, #80]	; 0x50
  402142:	2810      	cmp	r0, #16
  402144:	d037      	beq.n	4021b6 <PIOD_Handler+0xaa>
  402146:	6e20      	ldr	r0, [r4, #96]	; 0x60
  402148:	2810      	cmp	r0, #16
  40214a:	d000      	beq.n	40214e <PIOD_Handler+0x42>
  40214c:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40214e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  402150:	4229      	tst	r1, r5
  402152:	d0fb      	beq.n	40214c <PIOD_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402154:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	pio_handler_process(PIOD, ID_PIOD);
}
  402156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40215a:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40215c:	6861      	ldr	r1, [r4, #4]
  40215e:	420d      	tst	r5, r1
  402160:	d0e2      	beq.n	402128 <PIOD_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402162:	68e3      	ldr	r3, [r4, #12]
  402164:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402166:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  402168:	439d      	bics	r5, r3
  40216a:	d0ef      	beq.n	40214c <PIOD_Handler+0x40>
  40216c:	e7dc      	b.n	402128 <PIOD_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40216e:	6961      	ldr	r1, [r4, #20]
  402170:	4229      	tst	r1, r5
  402172:	d0dc      	beq.n	40212e <PIOD_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402174:	69e3      	ldr	r3, [r4, #28]
  402176:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402178:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  40217a:	439d      	bics	r5, r3
  40217c:	d0e6      	beq.n	40214c <PIOD_Handler+0x40>
  40217e:	e7d6      	b.n	40212e <PIOD_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402180:	6a61      	ldr	r1, [r4, #36]	; 0x24
  402182:	4229      	tst	r1, r5
  402184:	d0d6      	beq.n	402134 <PIOD_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402186:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402188:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40218a:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  40218c:	439d      	bics	r5, r3
  40218e:	d0dd      	beq.n	40214c <PIOD_Handler+0x40>
  402190:	e7d0      	b.n	402134 <PIOD_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402192:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402194:	4229      	tst	r1, r5
  402196:	d0d0      	beq.n	40213a <PIOD_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402198:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40219a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40219c:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  40219e:	439d      	bics	r5, r3
  4021a0:	d0d4      	beq.n	40214c <PIOD_Handler+0x40>
  4021a2:	e7ca      	b.n	40213a <PIOD_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4021a4:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4021a6:	4229      	tst	r1, r5
  4021a8:	d0ca      	beq.n	402140 <PIOD_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4021aa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  4021ac:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4021ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  4021b0:	439d      	bics	r5, r3
  4021b2:	d0cb      	beq.n	40214c <PIOD_Handler+0x40>
  4021b4:	e7c4      	b.n	402140 <PIOD_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4021b6:	6d61      	ldr	r1, [r4, #84]	; 0x54
  4021b8:	4229      	tst	r1, r5
  4021ba:	d0c4      	beq.n	402146 <PIOD_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4021bc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  4021be:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4021c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  4021c2:	439d      	bics	r5, r3
  4021c4:	d0c2      	beq.n	40214c <PIOD_Handler+0x40>
  4021c6:	e7be      	b.n	402146 <PIOD_Handler+0x3a>
  4021c8:	00401d4d 	.word	0x00401d4d
  4021cc:	400e1400 	.word	0x400e1400
  4021d0:	00401d51 	.word	0x00401d51
  4021d4:	2041c060 	.word	0x2041c060

004021d8 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4021d8:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  4021da:	4b2e      	ldr	r3, [pc, #184]	; (402294 <PIOE_Handler+0xbc>)
  4021dc:	482e      	ldr	r0, [pc, #184]	; (402298 <PIOE_Handler+0xc0>)
  4021de:	4798      	blx	r3
  4021e0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4021e2:	4b2e      	ldr	r3, [pc, #184]	; (40229c <PIOE_Handler+0xc4>)
  4021e4:	482c      	ldr	r0, [pc, #176]	; (402298 <PIOE_Handler+0xc0>)
  4021e6:	4798      	blx	r3
	if (status != 0) {
  4021e8:	4005      	ands	r5, r0
  4021ea:	d015      	beq.n	402218 <PIOE_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4021ec:	4c2c      	ldr	r4, [pc, #176]	; (4022a0 <PIOE_Handler+0xc8>)
  4021ee:	6820      	ldr	r0, [r4, #0]
  4021f0:	2811      	cmp	r0, #17
  4021f2:	d019      	beq.n	402228 <PIOE_Handler+0x50>
  4021f4:	6920      	ldr	r0, [r4, #16]
  4021f6:	2811      	cmp	r0, #17
  4021f8:	d01f      	beq.n	40223a <PIOE_Handler+0x62>
  4021fa:	6a20      	ldr	r0, [r4, #32]
  4021fc:	2811      	cmp	r0, #17
  4021fe:	d025      	beq.n	40224c <PIOE_Handler+0x74>
  402200:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402202:	2811      	cmp	r0, #17
  402204:	d02b      	beq.n	40225e <PIOE_Handler+0x86>
  402206:	6c20      	ldr	r0, [r4, #64]	; 0x40
  402208:	2811      	cmp	r0, #17
  40220a:	d031      	beq.n	402270 <PIOE_Handler+0x98>
  40220c:	6d20      	ldr	r0, [r4, #80]	; 0x50
  40220e:	2811      	cmp	r0, #17
  402210:	d037      	beq.n	402282 <PIOE_Handler+0xaa>
  402212:	6e20      	ldr	r0, [r4, #96]	; 0x60
  402214:	2811      	cmp	r0, #17
  402216:	d000      	beq.n	40221a <PIOE_Handler+0x42>
  402218:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40221a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40221c:	4229      	tst	r1, r5
  40221e:	d0fb      	beq.n	402218 <PIOE_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402220:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	pio_handler_process(PIOE, ID_PIOE);
}
  402222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402226:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402228:	6861      	ldr	r1, [r4, #4]
  40222a:	420d      	tst	r5, r1
  40222c:	d0e2      	beq.n	4021f4 <PIOE_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40222e:	68e3      	ldr	r3, [r4, #12]
  402230:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402232:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  402234:	439d      	bics	r5, r3
  402236:	d0ef      	beq.n	402218 <PIOE_Handler+0x40>
  402238:	e7dc      	b.n	4021f4 <PIOE_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40223a:	6961      	ldr	r1, [r4, #20]
  40223c:	4229      	tst	r1, r5
  40223e:	d0dc      	beq.n	4021fa <PIOE_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402240:	69e3      	ldr	r3, [r4, #28]
  402242:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402244:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  402246:	439d      	bics	r5, r3
  402248:	d0e6      	beq.n	402218 <PIOE_Handler+0x40>
  40224a:	e7d6      	b.n	4021fa <PIOE_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40224c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  40224e:	4229      	tst	r1, r5
  402250:	d0d6      	beq.n	402200 <PIOE_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402252:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402254:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402256:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  402258:	439d      	bics	r5, r3
  40225a:	d0dd      	beq.n	402218 <PIOE_Handler+0x40>
  40225c:	e7d0      	b.n	402200 <PIOE_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40225e:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402260:	4229      	tst	r1, r5
  402262:	d0d0      	beq.n	402206 <PIOE_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402264:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402266:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402268:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  40226a:	439d      	bics	r5, r3
  40226c:	d0d4      	beq.n	402218 <PIOE_Handler+0x40>
  40226e:	e7ca      	b.n	402206 <PIOE_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402270:	6c61      	ldr	r1, [r4, #68]	; 0x44
  402272:	4229      	tst	r1, r5
  402274:	d0ca      	beq.n	40220c <PIOE_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402276:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  402278:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40227a:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  40227c:	439d      	bics	r5, r3
  40227e:	d0cb      	beq.n	402218 <PIOE_Handler+0x40>
  402280:	e7c4      	b.n	40220c <PIOE_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402282:	6d61      	ldr	r1, [r4, #84]	; 0x54
  402284:	4229      	tst	r1, r5
  402286:	d0c4      	beq.n	402212 <PIOE_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402288:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  40228a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40228c:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  40228e:	439d      	bics	r5, r3
  402290:	d0c2      	beq.n	402218 <PIOE_Handler+0x40>
  402292:	e7be      	b.n	402212 <PIOE_Handler+0x3a>
  402294:	00401d4d 	.word	0x00401d4d
  402298:	400e1600 	.word	0x400e1600
  40229c:	00401d51 	.word	0x00401d51
  4022a0:	2041c060 	.word	0x2041c060

004022a4 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  4022a4:	3802      	subs	r0, #2
  4022a6:	2802      	cmp	r0, #2
  4022a8:	d80d      	bhi.n	4022c6 <pmc_mck_set_division+0x22>
  4022aa:	4b08      	ldr	r3, [pc, #32]	; (4022cc <pmc_mck_set_division+0x28>)
  4022ac:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4022b0:	4907      	ldr	r1, [pc, #28]	; (4022d0 <pmc_mck_set_division+0x2c>)
  4022b2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4022b4:	460a      	mov	r2, r1
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4022b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4022ba:	4303      	orrs	r3, r0
	PMC->PMC_MCKR =
  4022bc:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4022be:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4022c0:	071b      	lsls	r3, r3, #28
  4022c2:	d5fc      	bpl.n	4022be <pmc_mck_set_division+0x1a>
}
  4022c4:	4770      	bx	lr
{
  4022c6:	2000      	movs	r0, #0
  4022c8:	e7f2      	b.n	4022b0 <pmc_mck_set_division+0xc>
  4022ca:	bf00      	nop
  4022cc:	004071ac 	.word	0x004071ac
  4022d0:	400e0600 	.word	0x400e0600

004022d4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4022d4:	4913      	ldr	r1, [pc, #76]	; (402324 <pmc_switch_mck_to_pllack+0x50>)
  4022d6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4022d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4022dc:	4318      	orrs	r0, r3
  4022de:	6308      	str	r0, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4022e0:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  4022e2:	0718      	lsls	r0, r3, #28
  4022e4:	d407      	bmi.n	4022f6 <pmc_switch_mck_to_pllack+0x22>
  4022e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4022ea:	e001      	b.n	4022f0 <pmc_switch_mck_to_pllack+0x1c>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4022ec:	3b01      	subs	r3, #1
  4022ee:	d016      	beq.n	40231e <pmc_switch_mck_to_pllack+0x4a>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4022f0:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4022f2:	0712      	lsls	r2, r2, #28
  4022f4:	d5fa      	bpl.n	4022ec <pmc_switch_mck_to_pllack+0x18>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4022f6:	490b      	ldr	r1, [pc, #44]	; (402324 <pmc_switch_mck_to_pllack+0x50>)
  4022f8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4022fa:	f023 0303 	bic.w	r3, r3, #3
  4022fe:	f043 0302 	orr.w	r3, r3, #2
  402302:	630b      	str	r3, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402304:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  402306:	0718      	lsls	r0, r3, #28
  402308:	d407      	bmi.n	40231a <pmc_switch_mck_to_pllack+0x46>
  40230a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40230e:	e001      	b.n	402314 <pmc_switch_mck_to_pllack+0x40>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402310:	3b01      	subs	r3, #1
  402312:	d004      	beq.n	40231e <pmc_switch_mck_to_pllack+0x4a>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402314:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402316:	0712      	lsls	r2, r2, #28
  402318:	d5fa      	bpl.n	402310 <pmc_switch_mck_to_pllack+0x3c>
			return 1;
		}
	}

	return 0;
  40231a:	2000      	movs	r0, #0
}
  40231c:	4770      	bx	lr
			return 1;
  40231e:	2001      	movs	r0, #1
  402320:	4770      	bx	lr
  402322:	bf00      	nop
  402324:	400e0600 	.word	0x400e0600

00402328 <pmc_switch_mainck_to_fastrc>:
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  402328:	4a0e      	ldr	r2, [pc, #56]	; (402364 <pmc_switch_mainck_to_fastrc+0x3c>)
{
  40232a:	b410      	push	{r4}
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  40232c:	4c0e      	ldr	r4, [pc, #56]	; (402368 <pmc_switch_mainck_to_fastrc+0x40>)

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40232e:	4611      	mov	r1, r2
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  402330:	6a13      	ldr	r3, [r2, #32]
  402332:	431c      	orrs	r4, r3
  402334:	6214      	str	r4, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402336:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  402338:	039a      	lsls	r2, r3, #14
  40233a:	d5fc      	bpl.n	402336 <pmc_switch_mainck_to_fastrc+0xe>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40233c:	6a0c      	ldr	r4, [r1, #32]
  40233e:	4b0b      	ldr	r3, [pc, #44]	; (40236c <pmc_switch_mainck_to_fastrc+0x44>)
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402340:	4a08      	ldr	r2, [pc, #32]	; (402364 <pmc_switch_mainck_to_fastrc+0x3c>)
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  402342:	4023      	ands	r3, r4
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  402344:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402348:	4318      	orrs	r0, r3
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40234a:	6208      	str	r0, [r1, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40234c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40234e:	039b      	lsls	r3, r3, #14
  402350:	d5fc      	bpl.n	40234c <pmc_switch_mainck_to_fastrc+0x24>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  402352:	6a11      	ldr	r1, [r2, #32]
  402354:	4b06      	ldr	r3, [pc, #24]	; (402370 <pmc_switch_mainck_to_fastrc+0x48>)
  402356:	400b      	ands	r3, r1
  402358:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40235c:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  40235e:	f85d 4b04 	ldr.w	r4, [sp], #4
  402362:	4770      	bx	lr
  402364:	400e0600 	.word	0x400e0600
  402368:	00370008 	.word	0x00370008
  40236c:	ffc8ff8f 	.word	0xffc8ff8f
  402370:	fec8ffff 	.word	0xfec8ffff

00402374 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402374:	4b02      	ldr	r3, [pc, #8]	; (402380 <pmc_osc_is_ready_mainck+0xc>)
  402376:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402378:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40237c:	4770      	bx	lr
  40237e:	bf00      	nop
  402380:	400e0600 	.word	0x400e0600

00402384 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402384:	4b02      	ldr	r3, [pc, #8]	; (402390 <pmc_disable_pllack+0xc>)
  402386:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40238a:	629a      	str	r2, [r3, #40]	; 0x28
  40238c:	4770      	bx	lr
  40238e:	bf00      	nop
  402390:	400e0600 	.word	0x400e0600

00402394 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402394:	4b02      	ldr	r3, [pc, #8]	; (4023a0 <pmc_is_locked_pllack+0xc>)
  402396:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402398:	f000 0002 	and.w	r0, r0, #2
  40239c:	4770      	bx	lr
  40239e:	bf00      	nop
  4023a0:	400e0600 	.word	0x400e0600

004023a4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4023a4:	283f      	cmp	r0, #63	; 0x3f
  4023a6:	d81a      	bhi.n	4023de <pmc_enable_periph_clk+0x3a>
		return 1;
	}

	if (ul_id < 32) {
  4023a8:	281f      	cmp	r0, #31
  4023aa:	d80a      	bhi.n	4023c2 <pmc_enable_periph_clk+0x1e>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4023ac:	2301      	movs	r3, #1
  4023ae:	4a0e      	ldr	r2, [pc, #56]	; (4023e8 <pmc_enable_periph_clk+0x44>)
  4023b0:	fa03 f000 	lsl.w	r0, r3, r0
  4023b4:	6991      	ldr	r1, [r2, #24]
  4023b6:	ea30 0301 	bics.w	r3, r0, r1
  4023ba:	d012      	beq.n	4023e2 <pmc_enable_periph_clk+0x3e>
			PMC->PMC_PCER0 = 1 << ul_id;
  4023bc:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4023be:	2000      	movs	r0, #0
  4023c0:	4770      	bx	lr
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4023c2:	2301      	movs	r3, #1
		ul_id -= 32;
  4023c4:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4023c6:	4a08      	ldr	r2, [pc, #32]	; (4023e8 <pmc_enable_periph_clk+0x44>)
  4023c8:	fa03 f000 	lsl.w	r0, r3, r0
  4023cc:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
  4023d0:	ea30 0303 	bics.w	r3, r0, r3
  4023d4:	d005      	beq.n	4023e2 <pmc_enable_periph_clk+0x3e>
			PMC->PMC_PCER1 = 1 << ul_id;
  4023d6:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
	return 0;
  4023da:	2000      	movs	r0, #0
  4023dc:	4770      	bx	lr
		return 1;
  4023de:	2001      	movs	r0, #1
  4023e0:	4770      	bx	lr
	return 0;
  4023e2:	2000      	movs	r0, #0
}
  4023e4:	4770      	bx	lr
  4023e6:	bf00      	nop
  4023e8:	400e0600 	.word	0x400e0600

004023ec <pmc_pck_set_prescaler>:
 *
 * \param ul_id Peripheral ID.
 * \param ul_pres Prescaler value.
 */
void pmc_pck_set_prescaler(uint32_t ul_id, uint32_t ul_pres)
{
  4023ec:	4b0b      	ldr	r3, [pc, #44]	; (40241c <pmc_pck_set_prescaler+0x30>)
  4023ee:	f44f 7280 	mov.w	r2, #256	; 0x100
  4023f2:	b410      	push	{r4}
  4023f4:	eb03 0480 	add.w	r4, r3, r0, lsl #2
  4023f8:	fa02 f000 	lsl.w	r0, r2, r0
	PMC->PMC_PCK[ul_id] =
			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_PRES_Msk) | ul_pres;
  4023fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4023fe:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  402402:	4311      	orrs	r1, r2
	PMC->PMC_PCK[ul_id] =
  402404:	6421      	str	r1, [r4, #64]	; 0x40
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  402406:	e002      	b.n	40240e <pmc_pck_set_prescaler+0x22>
			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
  402408:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  40240a:	4202      	tst	r2, r0
  40240c:	d102      	bne.n	402414 <pmc_pck_set_prescaler+0x28>
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  40240e:	681a      	ldr	r2, [r3, #0]
  402410:	4202      	tst	r2, r0
  402412:	d1f9      	bne.n	402408 <pmc_pck_set_prescaler+0x1c>
}
  402414:	f85d 4b04 	ldr.w	r4, [sp], #4
  402418:	4770      	bx	lr
  40241a:	bf00      	nop
  40241c:	400e0600 	.word	0x400e0600

00402420 <pmc_pck_set_source>:
 *
 * \param ul_id Peripheral ID.
 * \param ul_source Source selection value.
 */
void pmc_pck_set_source(uint32_t ul_id, uint32_t ul_source)
{
  402420:	4b0b      	ldr	r3, [pc, #44]	; (402450 <pmc_pck_set_source+0x30>)
  402422:	f44f 7280 	mov.w	r2, #256	; 0x100
  402426:	b410      	push	{r4}
  402428:	eb03 0480 	add.w	r4, r3, r0, lsl #2
  40242c:	fa02 f000 	lsl.w	r0, r2, r0
	PMC->PMC_PCK[ul_id] =
			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_CSS_Msk) | ul_source;
  402430:	6c22      	ldr	r2, [r4, #64]	; 0x40
  402432:	f022 0207 	bic.w	r2, r2, #7
  402436:	4311      	orrs	r1, r2
	PMC->PMC_PCK[ul_id] =
  402438:	6421      	str	r1, [r4, #64]	; 0x40
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  40243a:	e002      	b.n	402442 <pmc_pck_set_source+0x22>
			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
  40243c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  40243e:	4202      	tst	r2, r0
  402440:	d102      	bne.n	402448 <pmc_pck_set_source+0x28>
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  402442:	681a      	ldr	r2, [r3, #0]
  402444:	4202      	tst	r2, r0
  402446:	d1f9      	bne.n	40243c <pmc_pck_set_source+0x1c>
}
  402448:	f85d 4b04 	ldr.w	r4, [sp], #4
  40244c:	4770      	bx	lr
  40244e:	bf00      	nop
  402450:	400e0600 	.word	0x400e0600

00402454 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  402454:	f44f 7380 	mov.w	r3, #256	; 0x100
  402458:	4a02      	ldr	r2, [pc, #8]	; (402464 <pmc_enable_pck+0x10>)
  40245a:	fa03 f000 	lsl.w	r0, r3, r0
  40245e:	6010      	str	r0, [r2, #0]
  402460:	4770      	bx	lr
  402462:	bf00      	nop
  402464:	400e0600 	.word	0x400e0600

00402468 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402468:	e7fe      	b.n	402468 <Dummy_Handler>
  40246a:	bf00      	nop

0040246c <Dummy_Handler2>:
	while (1) {
	}
}

void Dummy_Handler2(void)
{
  40246c:	e7fe      	b.n	40246c <Dummy_Handler2>
  40246e:	bf00      	nop

00402470 <Reset_Handler>:
        if (pSrc != pDest) {
  402470:	4920      	ldr	r1, [pc, #128]	; (4024f4 <Reset_Handler+0x84>)
  402472:	4821      	ldr	r0, [pc, #132]	; (4024f8 <Reset_Handler+0x88>)
  402474:	4281      	cmp	r1, r0
{
  402476:	b510      	push	{r4, lr}
  402478:	b082      	sub	sp, #8
        if (pSrc != pDest) {
  40247a:	d009      	beq.n	402490 <Reset_Handler+0x20>
                for (; pDest < &_erelocate;) {
  40247c:	4b1f      	ldr	r3, [pc, #124]	; (4024fc <Reset_Handler+0x8c>)
  40247e:	4298      	cmp	r0, r3
  402480:	d206      	bcs.n	402490 <Reset_Handler+0x20>
                        *pDest++ = *pSrc++;
  402482:	43c2      	mvns	r2, r0
  402484:	4c1e      	ldr	r4, [pc, #120]	; (402500 <Reset_Handler+0x90>)
  402486:	441a      	add	r2, r3
  402488:	f022 0203 	bic.w	r2, r2, #3
  40248c:	3204      	adds	r2, #4
  40248e:	47a0      	blx	r4
        for (pDest = &_szero; pDest < &_ezero;) {
  402490:	481c      	ldr	r0, [pc, #112]	; (402504 <Reset_Handler+0x94>)
  402492:	4b1d      	ldr	r3, [pc, #116]	; (402508 <Reset_Handler+0x98>)
  402494:	4298      	cmp	r0, r3
  402496:	d207      	bcs.n	4024a8 <Reset_Handler+0x38>
                *pDest++ = 0;
  402498:	43c2      	mvns	r2, r0
  40249a:	2100      	movs	r1, #0
  40249c:	4c1b      	ldr	r4, [pc, #108]	; (40250c <Reset_Handler+0x9c>)
  40249e:	441a      	add	r2, r3
  4024a0:	f022 0203 	bic.w	r2, r2, #3
  4024a4:	3204      	adds	r2, #4
  4024a6:	47a0      	blx	r4
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4024a8:	4b19      	ldr	r3, [pc, #100]	; (402510 <Reset_Handler+0xa0>)
  4024aa:	4a1a      	ldr	r2, [pc, #104]	; (402514 <Reset_Handler+0xa4>)
  4024ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4024b0:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4024b2:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4024b6:	fab3 f383 	clz	r3, r3
  4024ba:	095b      	lsrs	r3, r3, #5
  4024bc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4024be:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4024c0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4024c4:	4a14      	ldr	r2, [pc, #80]	; (402518 <Reset_Handler+0xa8>)
  4024c6:	2300      	movs	r3, #0
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4024c8:	4914      	ldr	r1, [pc, #80]	; (40251c <Reset_Handler+0xac>)
  4024ca:	7013      	strb	r3, [r2, #0]
	return flags;
  4024cc:	9801      	ldr	r0, [sp, #4]
  4024ce:	680b      	ldr	r3, [r1, #0]
  4024d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4024d4:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb");
  4024d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4024da:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4024de:	b120      	cbz	r0, 4024ea <Reset_Handler+0x7a>
		cpu_irq_enable();
  4024e0:	2301      	movs	r3, #1
  4024e2:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dmb");
  4024e4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4024e8:	b662      	cpsie	i
        __libc_init_array();
  4024ea:	4b0d      	ldr	r3, [pc, #52]	; (402520 <Reset_Handler+0xb0>)
  4024ec:	4798      	blx	r3
        main();
  4024ee:	4b0d      	ldr	r3, [pc, #52]	; (402524 <Reset_Handler+0xb4>)
  4024f0:	4798      	blx	r3
  4024f2:	e7fe      	b.n	4024f2 <Reset_Handler+0x82>
  4024f4:	00407d54 	.word	0x00407d54
  4024f8:	20400000 	.word	0x20400000
  4024fc:	20400a08 	.word	0x20400a08
  402500:	0040498d 	.word	0x0040498d
  402504:	20404000 	.word	0x20404000
  402508:	2044a8e4 	.word	0x2044a8e4
  40250c:	00404ac1 	.word	0x00404ac1
  402510:	00400000 	.word	0x00400000
  402514:	e000ed00 	.word	0xe000ed00
  402518:	20400024 	.word	0x20400024
  40251c:	e000ed88 	.word	0xe000ed88
  402520:	004043a5 	.word	0x004043a5
  402524:	00402a05 	.word	0x00402a05

00402528 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  402528:	4a32      	ldr	r2, [pc, #200]	; (4025f4 <SystemCoreClockUpdate+0xcc>)
  40252a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40252c:	f003 0303 	and.w	r3, r3, #3
  402530:	2b01      	cmp	r3, #1
  402532:	d03c      	beq.n	4025ae <SystemCoreClockUpdate+0x86>
  402534:	d325      	bcc.n	402582 <SystemCoreClockUpdate+0x5a>
  402536:	2b02      	cmp	r3, #2
  402538:	d00d      	beq.n	402556 <SystemCoreClockUpdate+0x2e>
  40253a:	482f      	ldr	r0, [pc, #188]	; (4025f8 <SystemCoreClockUpdate+0xd0>)
  40253c:	6803      	ldr	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40253e:	492d      	ldr	r1, [pc, #180]	; (4025f4 <SystemCoreClockUpdate+0xcc>)
  402540:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  402542:	f002 0270 	and.w	r2, r2, #112	; 0x70
  402546:	2a70      	cmp	r2, #112	; 0x70
  402548:	d02b      	beq.n	4025a2 <SystemCoreClockUpdate+0x7a>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40254a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  40254c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  402550:	40d3      	lsrs	r3, r2
  402552:	6003      	str	r3, [r0, #0]
  402554:	4770      	bx	lr
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402556:	6a13      	ldr	r3, [r2, #32]
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402558:	4827      	ldr	r0, [pc, #156]	; (4025f8 <SystemCoreClockUpdate+0xd0>)
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40255a:	01db      	lsls	r3, r3, #7
  40255c:	d53a      	bpl.n	4025d4 <SystemCoreClockUpdate+0xac>
            SystemCoreClock *= 3U;
  40255e:	4b27      	ldr	r3, [pc, #156]	; (4025fc <SystemCoreClockUpdate+0xd4>)
  402560:	6003      	str	r3, [r0, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  402562:	4924      	ldr	r1, [pc, #144]	; (4025f4 <SystemCoreClockUpdate+0xcc>)
  402564:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  402566:	f002 0203 	and.w	r2, r2, #3
  40256a:	2a02      	cmp	r2, #2
  40256c:	d1e7      	bne.n	40253e <SystemCoreClockUpdate+0x16>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40256e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402570:	6a89      	ldr	r1, [r1, #40]	; 0x28
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402572:	f3c2 420a 	ubfx	r2, r2, #16, #11
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402576:	b2c9      	uxtb	r1, r1
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402578:	fb02 3303 	mla	r3, r2, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40257c:	fbb3 f3f1 	udiv	r3, r3, r1
  402580:	e7dd      	b.n	40253e <SystemCoreClockUpdate+0x16>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  402582:	4b1f      	ldr	r3, [pc, #124]	; (402600 <SystemCoreClockUpdate+0xd8>)
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402584:	491b      	ldr	r1, [pc, #108]	; (4025f4 <SystemCoreClockUpdate+0xcc>)
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  402586:	695b      	ldr	r3, [r3, #20]
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402588:	6b0a      	ldr	r2, [r1, #48]	; 0x30
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40258a:	f013 0f80 	tst.w	r3, #128	; 0x80
  40258e:	481a      	ldr	r0, [pc, #104]	; (4025f8 <SystemCoreClockUpdate+0xd0>)
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402590:	f002 0270 	and.w	r2, r2, #112	; 0x70
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  402594:	bf14      	ite	ne
  402596:	f44f 4300 	movne.w	r3, #32768	; 0x8000
  40259a:	f44f 43fa 	moveq.w	r3, #32000	; 0x7d00
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40259e:	2a70      	cmp	r2, #112	; 0x70
  4025a0:	d1d3      	bne.n	40254a <SystemCoreClockUpdate+0x22>
    SystemCoreClock /= 3U;
  4025a2:	4a18      	ldr	r2, [pc, #96]	; (402604 <SystemCoreClockUpdate+0xdc>)
  4025a4:	fba2 2303 	umull	r2, r3, r2, r3
  4025a8:	085b      	lsrs	r3, r3, #1
  4025aa:	6003      	str	r3, [r0, #0]
  4025ac:	4770      	bx	lr
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4025ae:	6a13      	ldr	r3, [r2, #32]
  4025b0:	01d9      	lsls	r1, r3, #7
  4025b2:	d40c      	bmi.n	4025ce <SystemCoreClockUpdate+0xa6>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4025b4:	4810      	ldr	r0, [pc, #64]	; (4025f8 <SystemCoreClockUpdate+0xd0>)
  4025b6:	4914      	ldr	r1, [pc, #80]	; (402608 <SystemCoreClockUpdate+0xe0>)
  4025b8:	6001      	str	r1, [r0, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4025ba:	6a12      	ldr	r2, [r2, #32]
  4025bc:	f002 0270 	and.w	r2, r2, #112	; 0x70
  4025c0:	2a10      	cmp	r2, #16
  4025c2:	d011      	beq.n	4025e8 <SystemCoreClockUpdate+0xc0>
  4025c4:	4b0d      	ldr	r3, [pc, #52]	; (4025fc <SystemCoreClockUpdate+0xd4>)
  4025c6:	2a20      	cmp	r2, #32
  4025c8:	bf18      	it	ne
  4025ca:	460b      	movne	r3, r1
  4025cc:	e7b7      	b.n	40253e <SystemCoreClockUpdate+0x16>
  4025ce:	4b0b      	ldr	r3, [pc, #44]	; (4025fc <SystemCoreClockUpdate+0xd4>)
  4025d0:	4809      	ldr	r0, [pc, #36]	; (4025f8 <SystemCoreClockUpdate+0xd0>)
  4025d2:	e7b4      	b.n	40253e <SystemCoreClockUpdate+0x16>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4025d4:	4b0c      	ldr	r3, [pc, #48]	; (402608 <SystemCoreClockUpdate+0xe0>)
  4025d6:	6003      	str	r3, [r0, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4025d8:	6a12      	ldr	r2, [r2, #32]
  4025da:	f002 0270 	and.w	r2, r2, #112	; 0x70
  4025de:	2a10      	cmp	r2, #16
  4025e0:	d004      	beq.n	4025ec <SystemCoreClockUpdate+0xc4>
  4025e2:	2a20      	cmp	r2, #32
  4025e4:	d0bb      	beq.n	40255e <SystemCoreClockUpdate+0x36>
  4025e6:	e7bc      	b.n	402562 <SystemCoreClockUpdate+0x3a>
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4025e8:	4b08      	ldr	r3, [pc, #32]	; (40260c <SystemCoreClockUpdate+0xe4>)
  4025ea:	e7a8      	b.n	40253e <SystemCoreClockUpdate+0x16>
            SystemCoreClock *= 2U;
  4025ec:	4b07      	ldr	r3, [pc, #28]	; (40260c <SystemCoreClockUpdate+0xe4>)
  4025ee:	6003      	str	r3, [r0, #0]
          break;
  4025f0:	e7b7      	b.n	402562 <SystemCoreClockUpdate+0x3a>
  4025f2:	bf00      	nop
  4025f4:	400e0600 	.word	0x400e0600
  4025f8:	20400028 	.word	0x20400028
  4025fc:	00b71b00 	.word	0x00b71b00
  402600:	400e1810 	.word	0x400e1810
  402604:	aaaaaaab 	.word	0xaaaaaaab
  402608:	003d0900 	.word	0x003d0900
  40260c:	007a1200 	.word	0x007a1200

00402610 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402610:	4b16      	ldr	r3, [pc, #88]	; (40266c <system_init_flash+0x5c>)
  402612:	4298      	cmp	r0, r3
  402614:	d917      	bls.n	402646 <system_init_flash+0x36>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  402616:	4b16      	ldr	r3, [pc, #88]	; (402670 <system_init_flash+0x60>)
  402618:	4298      	cmp	r0, r3
  40261a:	d910      	bls.n	40263e <system_init_flash+0x2e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  40261c:	4b15      	ldr	r3, [pc, #84]	; (402674 <system_init_flash+0x64>)
  40261e:	4298      	cmp	r0, r3
  402620:	d91a      	bls.n	402658 <system_init_flash+0x48>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  402622:	4b15      	ldr	r3, [pc, #84]	; (402678 <system_init_flash+0x68>)
  402624:	4298      	cmp	r0, r3
  402626:	d913      	bls.n	402650 <system_init_flash+0x40>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  402628:	4b14      	ldr	r3, [pc, #80]	; (40267c <system_init_flash+0x6c>)
  40262a:	4298      	cmp	r0, r3
  40262c:	d918      	bls.n	402660 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  40262e:	4b14      	ldr	r3, [pc, #80]	; (402680 <system_init_flash+0x70>)
  402630:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402632:	4b14      	ldr	r3, [pc, #80]	; (402684 <system_init_flash+0x74>)
  402634:	bf94      	ite	ls
  402636:	4a14      	ldrls	r2, [pc, #80]	; (402688 <system_init_flash+0x78>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  402638:	4a14      	ldrhi	r2, [pc, #80]	; (40268c <system_init_flash+0x7c>)
  40263a:	601a      	str	r2, [r3, #0]
  40263c:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40263e:	4b11      	ldr	r3, [pc, #68]	; (402684 <system_init_flash+0x74>)
  402640:	4a13      	ldr	r2, [pc, #76]	; (402690 <system_init_flash+0x80>)
  402642:	601a      	str	r2, [r3, #0]
  402644:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402646:	4b0f      	ldr	r3, [pc, #60]	; (402684 <system_init_flash+0x74>)
  402648:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40264c:	601a      	str	r2, [r3, #0]
  40264e:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402650:	4b0c      	ldr	r3, [pc, #48]	; (402684 <system_init_flash+0x74>)
  402652:	4a10      	ldr	r2, [pc, #64]	; (402694 <system_init_flash+0x84>)
  402654:	601a      	str	r2, [r3, #0]
  402656:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402658:	4b0a      	ldr	r3, [pc, #40]	; (402684 <system_init_flash+0x74>)
  40265a:	4a0f      	ldr	r2, [pc, #60]	; (402698 <system_init_flash+0x88>)
  40265c:	601a      	str	r2, [r3, #0]
  40265e:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402660:	4b08      	ldr	r3, [pc, #32]	; (402684 <system_init_flash+0x74>)
  402662:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402666:	601a      	str	r2, [r3, #0]
  402668:	4770      	bx	lr
  40266a:	bf00      	nop
  40266c:	015ef3bf 	.word	0x015ef3bf
  402670:	02bde77f 	.word	0x02bde77f
  402674:	041cdb3f 	.word	0x041cdb3f
  402678:	057bceff 	.word	0x057bceff
  40267c:	06dac2bf 	.word	0x06dac2bf
  402680:	0839b67f 	.word	0x0839b67f
  402684:	400e0c00 	.word	0x400e0c00
  402688:	04000500 	.word	0x04000500
  40268c:	04000600 	.word	0x04000600
  402690:	04000100 	.word	0x04000100
  402694:	04000300 	.word	0x04000300
  402698:	04000200 	.word	0x04000200

0040269c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  40269c:	4a0d      	ldr	r2, [pc, #52]	; (4026d4 <_sbrk+0x38>)
	int ramend = (int)&__ram_end__;
  40269e:	490e      	ldr	r1, [pc, #56]	; (4026d8 <_sbrk+0x3c>)
	if (heap == NULL) {
  4026a0:	6813      	ldr	r3, [r2, #0]
  4026a2:	b143      	cbz	r3, 4026b6 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
  4026a4:	4418      	add	r0, r3
  4026a6:	4281      	cmp	r1, r0
  4026a8:	db02      	blt.n	4026b0 <_sbrk+0x14>
		return (caddr_t) -1;	
	}

	heap += incr;
  4026aa:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4026ac:	4618      	mov	r0, r3
  4026ae:	4770      	bx	lr
		return (caddr_t) -1;	
  4026b0:	f04f 30ff 	mov.w	r0, #4294967295
  4026b4:	4770      	bx	lr
{
  4026b6:	b410      	push	{r4}
		heap = (unsigned char *)&_end;
  4026b8:	4c08      	ldr	r4, [pc, #32]	; (4026dc <_sbrk+0x40>)
	if (((int)prev_heap + incr) > ramend) {
  4026ba:	4420      	add	r0, r4
		heap = (unsigned char *)&_end;
  4026bc:	6014      	str	r4, [r2, #0]
	if (((int)prev_heap + incr) > ramend) {
  4026be:	4281      	cmp	r1, r0
  4026c0:	db04      	blt.n	4026cc <_sbrk+0x30>
	heap += incr;
  4026c2:	6010      	str	r0, [r2, #0]
	return (caddr_t) prev_heap;
  4026c4:	4620      	mov	r0, r4
}
  4026c6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4026ca:	4770      	bx	lr
		return (caddr_t) -1;	
  4026cc:	f04f 30ff 	mov.w	r0, #4294967295
  4026d0:	e7f9      	b.n	4026c6 <_sbrk+0x2a>
  4026d2:	bf00      	nop
  4026d4:	2041c0d0 	.word	0x2041c0d0
  4026d8:	2045fffc 	.word	0x2045fffc
  4026dc:	2044cae8 	.word	0x2044cae8

004026e0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4026e0:	f04f 30ff 	mov.w	r0, #4294967295
  4026e4:	4770      	bx	lr
  4026e6:	bf00      	nop

004026e8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4026e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000

	return 0;
}
  4026ec:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
  4026ee:	604b      	str	r3, [r1, #4]
}
  4026f0:	4770      	bx	lr
  4026f2:	bf00      	nop

004026f4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4026f4:	2001      	movs	r0, #1
  4026f6:	4770      	bx	lr

004026f8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4026f8:	2000      	movs	r0, #0
  4026fa:	4770      	bx	lr

004026fc <USART1_Handler>:
volatile bool waiting_for_chorus_speed = false;
volatile float chorus_speed = 0.02f;

volatile bool autotune = true; 
void USART_SERIAL_ISR_HANDLER(void)
{
  4026fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t dw_status = usart_get_status(USART_SERIAL);
  402700:	4b99      	ldr	r3, [pc, #612]	; (402968 <USART1_Handler+0x26c>)
{
  402702:	b082      	sub	sp, #8
	uint32_t dw_status = usart_get_status(USART_SERIAL);
  402704:	4899      	ldr	r0, [pc, #612]	; (40296c <USART1_Handler+0x270>)
  402706:	4798      	blx	r3
	if (dw_status & US_CSR_RXRDY) {
  402708:	07c3      	lsls	r3, r0, #31
  40270a:	d402      	bmi.n	402712 <USART1_Handler+0x16>
			harmony_list_read = harmony_list_fill;		
			harmony_list_fill = temp; 
			harmony_idx = 0; 
		}
	}
}
  40270c:	b002      	add	sp, #8
  40270e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		usart_read(USART_SERIAL, &received_byte);
  402712:	4b97      	ldr	r3, [pc, #604]	; (402970 <USART1_Handler+0x274>)
  402714:	a901      	add	r1, sp, #4
  402716:	4895      	ldr	r0, [pc, #596]	; (40296c <USART1_Handler+0x270>)
  402718:	4798      	blx	r3
		if (waiting_for_harm_volume)
  40271a:	4a96      	ldr	r2, [pc, #600]	; (402974 <USART1_Handler+0x278>)
  40271c:	7813      	ldrb	r3, [r2, #0]
  40271e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  402722:	b98b      	cbnz	r3, 402748 <USART1_Handler+0x4c>
		else if (waiting_for_master_volume)
  402724:	4994      	ldr	r1, [pc, #592]	; (402978 <USART1_Handler+0x27c>)
  402726:	780b      	ldrb	r3, [r1, #0]
  402728:	f003 04ff 	and.w	r4, r3, #255	; 0xff
  40272c:	b1e3      	cbz	r3, 402768 <USART1_Handler+0x6c>
			master_volume = 1.2f*(float)received_byte / 127.0f;
  40272e:	eddd 7a01 	vldr	s15, [sp, #4]
  402732:	ed9f 7a92 	vldr	s14, [pc, #584]	; 40297c <USART1_Handler+0x280>
  402736:	eef8 7a67 	vcvt.f32.u32	s15, s15
  40273a:	4b91      	ldr	r3, [pc, #580]	; (402980 <USART1_Handler+0x284>)
  40273c:	ee67 7a87 	vmul.f32	s15, s15, s14
  402740:	edc3 7a00 	vstr	s15, [r3]
			waiting_for_master_volume = false;
  402744:	7008      	strb	r0, [r1, #0]
  402746:	e7e1      	b.n	40270c <USART1_Handler+0x10>
			harm_volume = (float)received_byte / 127.0f; 
  402748:	eddd 7a01 	vldr	s15, [sp, #4]
			waiting_for_harm_volume = false; 
  40274c:	2300      	movs	r3, #0
			harm_volume = (float)received_byte / 127.0f; 
  40274e:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 402984 <USART1_Handler+0x288>
  402752:	eef8 7a67 	vcvt.f32.u32	s15, s15
  402756:	498c      	ldr	r1, [pc, #560]	; (402988 <USART1_Handler+0x28c>)
  402758:	ee67 7a87 	vmul.f32	s15, s15, s14
  40275c:	edc1 7a00 	vstr	s15, [r1]
			waiting_for_harm_volume = false; 
  402760:	7013      	strb	r3, [r2, #0]
}
  402762:	b002      	add	sp, #8
  402764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		else if (waiting_for_dry_volume)
  402768:	4888      	ldr	r0, [pc, #544]	; (40298c <USART1_Handler+0x290>)
  40276a:	7803      	ldrb	r3, [r0, #0]
  40276c:	f003 05ff 	and.w	r5, r3, #255	; 0xff
  402770:	b94b      	cbnz	r3, 402786 <USART1_Handler+0x8a>
		else if (waiting_for_pitch_bend)
  402772:	4c87      	ldr	r4, [pc, #540]	; (402990 <USART1_Handler+0x294>)
  402774:	7823      	ldrb	r3, [r4, #0]
  402776:	f003 06ff 	and.w	r6, r3, #255	; 0xff
  40277a:	b19b      	cbz	r3, 4027a4 <USART1_Handler+0xa8>
			pitch_bend = received_byte;
  40277c:	9a01      	ldr	r2, [sp, #4]
  40277e:	4b85      	ldr	r3, [pc, #532]	; (402994 <USART1_Handler+0x298>)
  402780:	601a      	str	r2, [r3, #0]
			waiting_for_pitch_bend = false;
  402782:	7025      	strb	r5, [r4, #0]
  402784:	e7c2      	b.n	40270c <USART1_Handler+0x10>
			dry_volume = 0.1f + 0.9f*(float)received_byte / 127.0f;
  402786:	eddd 7a01 	vldr	s15, [sp, #4]
  40278a:	eddf 6a83 	vldr	s13, [pc, #524]	; 402998 <USART1_Handler+0x29c>
  40278e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  402792:	eddf 7a82 	vldr	s15, [pc, #520]	; 40299c <USART1_Handler+0x2a0>
  402796:	4b82      	ldr	r3, [pc, #520]	; (4029a0 <USART1_Handler+0x2a4>)
  402798:	eee7 7a26 	vfma.f32	s15, s14, s13
  40279c:	edc3 7a00 	vstr	s15, [r3]
			waiting_for_dry_volume = false;
  4027a0:	7004      	strb	r4, [r0, #0]
  4027a2:	e7b3      	b.n	40270c <USART1_Handler+0x10>
		else if (waiting_for_reverb_volume)
  4027a4:	4d7f      	ldr	r5, [pc, #508]	; (4029a4 <USART1_Handler+0x2a8>)
  4027a6:	782b      	ldrb	r3, [r5, #0]
  4027a8:	f003 07ff 	and.w	r7, r3, #255	; 0xff
  4027ac:	b163      	cbz	r3, 4027c8 <USART1_Handler+0xcc>
			reverb_volume = (float)received_byte / 127.0f;;
  4027ae:	eddd 7a01 	vldr	s15, [sp, #4]
  4027b2:	ed9f 7a74 	vldr	s14, [pc, #464]	; 402984 <USART1_Handler+0x288>
  4027b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
  4027ba:	4b7b      	ldr	r3, [pc, #492]	; (4029a8 <USART1_Handler+0x2ac>)
  4027bc:	ee67 7a87 	vmul.f32	s15, s15, s14
  4027c0:	edc3 7a00 	vstr	s15, [r3]
			waiting_for_reverb_volume = false;
  4027c4:	702e      	strb	r6, [r5, #0]
  4027c6:	e7a1      	b.n	40270c <USART1_Handler+0x10>
		else if (waiting_for_delay_volume)
  4027c8:	4e78      	ldr	r6, [pc, #480]	; (4029ac <USART1_Handler+0x2b0>)
  4027ca:	7833      	ldrb	r3, [r6, #0]
  4027cc:	f003 0eff 	and.w	lr, r3, #255	; 0xff
  4027d0:	b163      	cbz	r3, 4027ec <USART1_Handler+0xf0>
			delay_volume = 0.7f * (float)received_byte / 127.0f;
  4027d2:	eddd 7a01 	vldr	s15, [sp, #4]
  4027d6:	ed9f 7a76 	vldr	s14, [pc, #472]	; 4029b0 <USART1_Handler+0x2b4>
  4027da:	eef8 7a67 	vcvt.f32.u32	s15, s15
  4027de:	4b75      	ldr	r3, [pc, #468]	; (4029b4 <USART1_Handler+0x2b8>)
  4027e0:	ee67 7a87 	vmul.f32	s15, s15, s14
  4027e4:	edc3 7a00 	vstr	s15, [r3]
			waiting_for_delay_volume = false;
  4027e8:	7037      	strb	r7, [r6, #0]
  4027ea:	e78f      	b.n	40270c <USART1_Handler+0x10>
		else if (waiting_for_delay_speed)
  4027ec:	4f72      	ldr	r7, [pc, #456]	; (4029b8 <USART1_Handler+0x2bc>)
  4027ee:	783b      	ldrb	r3, [r7, #0]
  4027f0:	f003 0cff 	and.w	ip, r3, #255	; 0xff
  4027f4:	b18b      	cbz	r3, 40281a <USART1_Handler+0x11e>
			delay_speed = 16200 - 14000 * (float)received_byte / 127.0f;
  4027f6:	eddd 7a01 	vldr	s15, [sp, #4]
  4027fa:	eddf 6a70 	vldr	s13, [pc, #448]	; 4029bc <USART1_Handler+0x2c0>
  4027fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  402802:	eddf 7a6f 	vldr	s15, [pc, #444]	; 4029c0 <USART1_Handler+0x2c4>
  402806:	4b6f      	ldr	r3, [pc, #444]	; (4029c4 <USART1_Handler+0x2c8>)
  402808:	eee7 7a66 	vfms.f32	s15, s14, s13
  40280c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  402810:	edc3 7a00 	vstr	s15, [r3]
			waiting_for_delay_speed = false;
  402814:	f887 e000 	strb.w	lr, [r7]
  402818:	e778      	b.n	40270c <USART1_Handler+0x10>
		else if (waiting_for_delay_feedback)
  40281a:	f8df e1dc 	ldr.w	lr, [pc, #476]	; 4029f8 <USART1_Handler+0x2fc>
  40281e:	f89e 3000 	ldrb.w	r3, [lr]
  402822:	b16b      	cbz	r3, 402840 <USART1_Handler+0x144>
			delay_feedback = 0.8f * (float)received_byte / 127.0f;
  402824:	eddd 7a01 	vldr	s15, [sp, #4]
  402828:	ed9f 7a67 	vldr	s14, [pc, #412]	; 4029c8 <USART1_Handler+0x2cc>
  40282c:	eef8 7a67 	vcvt.f32.u32	s15, s15
  402830:	4b66      	ldr	r3, [pc, #408]	; (4029cc <USART1_Handler+0x2d0>)
  402832:	ee67 7a87 	vmul.f32	s15, s15, s14
  402836:	edc3 7a00 	vstr	s15, [r3]
			waiting_for_delay_feedback = false;
  40283a:	f88e c000 	strb.w	ip, [lr]
  40283e:	e765      	b.n	40270c <USART1_Handler+0x10>
		else if (waiting_for_chorus_volume)
  402840:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 4029fc <USART1_Handler+0x300>
  402844:	f898 3000 	ldrb.w	r3, [r8]
  402848:	b173      	cbz	r3, 402868 <USART1_Handler+0x16c>
			chorus_volume = (float)received_byte / 127.0f;;
  40284a:	eddd 7a01 	vldr	s15, [sp, #4]
			waiting_for_chorus_volume = false;
  40284e:	2300      	movs	r3, #0
			chorus_volume = (float)received_byte / 127.0f;;
  402850:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 402984 <USART1_Handler+0x288>
  402854:	eef8 7a67 	vcvt.f32.u32	s15, s15
  402858:	4a5d      	ldr	r2, [pc, #372]	; (4029d0 <USART1_Handler+0x2d4>)
  40285a:	ee67 7a87 	vmul.f32	s15, s15, s14
  40285e:	edc2 7a00 	vstr	s15, [r2]
			waiting_for_chorus_volume = false;
  402862:	f888 3000 	strb.w	r3, [r8]
  402866:	e751      	b.n	40270c <USART1_Handler+0x10>
		else if (waiting_for_chorus_speed)
  402868:	f8df c194 	ldr.w	ip, [pc, #404]	; 402a00 <USART1_Handler+0x304>
  40286c:	f89c 3000 	ldrb.w	r3, [ip]
  402870:	b183      	cbz	r3, 402894 <USART1_Handler+0x198>
			chorus_speed = 0.05f + 2.0f*(float)received_byte / 127.0f;;
  402872:	eddd 7a01 	vldr	s15, [sp, #4]
			waiting_for_chorus_speed = false;
  402876:	2300      	movs	r3, #0
			chorus_speed = 0.05f + 2.0f*(float)received_byte / 127.0f;;
  402878:	eddf 6a56 	vldr	s13, [pc, #344]	; 4029d4 <USART1_Handler+0x2d8>
  40287c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  402880:	eddf 7a55 	vldr	s15, [pc, #340]	; 4029d8 <USART1_Handler+0x2dc>
  402884:	4a55      	ldr	r2, [pc, #340]	; (4029dc <USART1_Handler+0x2e0>)
  402886:	eee7 7a26 	vfma.f32	s15, s14, s13
  40288a:	edc2 7a00 	vstr	s15, [r2]
			waiting_for_chorus_speed = false;
  40288e:	f88c 3000 	strb.w	r3, [ip]
  402892:	e73b      	b.n	40270c <USART1_Handler+0x10>
		else if (received_byte == HARMONY_VOLUME_FLAG) 
  402894:	9b01      	ldr	r3, [sp, #4]
  402896:	2bff      	cmp	r3, #255	; 0xff
  402898:	d02c      	beq.n	4028f4 <USART1_Handler+0x1f8>
		else if (received_byte == DRY_VOLUME_FLAG)
  40289a:	2bf7      	cmp	r3, #247	; 0xf7
  40289c:	d030      	beq.n	402900 <USART1_Handler+0x204>
		else if (received_byte == MASTER_VOLUME_FLAG)
  40289e:	2bfe      	cmp	r3, #254	; 0xfe
  4028a0:	d02b      	beq.n	4028fa <USART1_Handler+0x1fe>
		else if (received_byte == PITCH_BEND_FLAG)
  4028a2:	2bfd      	cmp	r3, #253	; 0xfd
  4028a4:	d04f      	beq.n	402946 <USART1_Handler+0x24a>
		else if (received_byte == REVERB_VOLUME_FLAG)
  4028a6:	2bfb      	cmp	r3, #251	; 0xfb
  4028a8:	d04a      	beq.n	402940 <USART1_Handler+0x244>
		else if (received_byte == DELAY_VOLUME_FLAG)
  4028aa:	2bf6      	cmp	r3, #246	; 0xf6
  4028ac:	d059      	beq.n	402962 <USART1_Handler+0x266>
		else if (received_byte == DELAY_SPEED_FLAG)
  4028ae:	2bf8      	cmp	r3, #248	; 0xf8
  4028b0:	d054      	beq.n	40295c <USART1_Handler+0x260>
		else if (received_byte == DELAY_FEEDBACK_FLAG)
  4028b2:	2bf9      	cmp	r3, #249	; 0xf9
  4028b4:	d04e      	beq.n	402954 <USART1_Handler+0x258>
		else if (received_byte == CHORUS_VOLUME_FLAG)
  4028b6:	2bfa      	cmp	r3, #250	; 0xfa
  4028b8:	d048      	beq.n	40294c <USART1_Handler+0x250>
		else if (received_byte == CHORUS_SPEED_FLAG)
  4028ba:	2bf5      	cmp	r3, #245	; 0xf5
  4028bc:	d03c      	beq.n	402938 <USART1_Handler+0x23c>
		else if (received_byte == AUTOTUNE_FLAG)
  4028be:	2bfc      	cmp	r3, #252	; 0xfc
  4028c0:	d034      	beq.n	40292c <USART1_Handler+0x230>
		else if (received_byte != 0 && harmony_idx < MAX_NUM_SHIFTS)
  4028c2:	4a47      	ldr	r2, [pc, #284]	; (4029e0 <USART1_Handler+0x2e4>)
  4028c4:	b1fb      	cbz	r3, 402906 <USART1_Handler+0x20a>
  4028c6:	6811      	ldr	r1, [r2, #0]
  4028c8:	290a      	cmp	r1, #10
  4028ca:	d81c      	bhi.n	402906 <USART1_Handler+0x20a>
			harmony_list_fill[harmony_idx].freq = midi_note_frequencies[received_byte]; 
  4028cc:	4c45      	ldr	r4, [pc, #276]	; (4029e4 <USART1_Handler+0x2e8>)
  4028ce:	4846      	ldr	r0, [pc, #280]	; (4029e8 <USART1_Handler+0x2ec>)
  4028d0:	6815      	ldr	r5, [r2, #0]
  4028d2:	6821      	ldr	r1, [r4, #0]
  4028d4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  4028d8:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
  4028dc:	681b      	ldr	r3, [r3, #0]
  4028de:	600b      	str	r3, [r1, #0]
			harmony_list_fill[harmony_idx].idx = received_byte; 
  4028e0:	6810      	ldr	r0, [r2, #0]
  4028e2:	6823      	ldr	r3, [r4, #0]
  4028e4:	9901      	ldr	r1, [sp, #4]
  4028e6:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  4028ea:	6059      	str	r1, [r3, #4]
			harmony_idx++;
  4028ec:	6813      	ldr	r3, [r2, #0]
  4028ee:	3301      	adds	r3, #1
  4028f0:	6013      	str	r3, [r2, #0]
  4028f2:	e70b      	b.n	40270c <USART1_Handler+0x10>
			waiting_for_harm_volume = true; 
  4028f4:	2301      	movs	r3, #1
  4028f6:	7013      	strb	r3, [r2, #0]
  4028f8:	e708      	b.n	40270c <USART1_Handler+0x10>
			waiting_for_master_volume = true;
  4028fa:	2301      	movs	r3, #1
  4028fc:	700b      	strb	r3, [r1, #0]
  4028fe:	e705      	b.n	40270c <USART1_Handler+0x10>
			waiting_for_dry_volume = true;
  402900:	2301      	movs	r3, #1
  402902:	7003      	strb	r3, [r0, #0]
  402904:	e702      	b.n	40270c <USART1_Handler+0x10>
			harmony_list_fill[harmony_idx].freq = END_OF_SHIFTS; 
  402906:	4937      	ldr	r1, [pc, #220]	; (4029e4 <USART1_Handler+0x2e8>)
			harmony_list_fill[harmony_idx].idx = 0; // dont care 
  402908:	2000      	movs	r0, #0
			harmony_list_fill[harmony_idx].freq = END_OF_SHIFTS; 
  40290a:	6816      	ldr	r6, [r2, #0]
  40290c:	680b      	ldr	r3, [r1, #0]
  40290e:	4d37      	ldr	r5, [pc, #220]	; (4029ec <USART1_Handler+0x2f0>)
  402910:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
			harmony_t *temp = (harmony_t *)harmony_list_read; 
  402914:	4c36      	ldr	r4, [pc, #216]	; (4029f0 <USART1_Handler+0x2f4>)
			harmony_list_fill[harmony_idx].freq = END_OF_SHIFTS; 
  402916:	601d      	str	r5, [r3, #0]
			harmony_list_fill[harmony_idx].idx = 0; // dont care 
  402918:	680d      	ldr	r5, [r1, #0]
  40291a:	6813      	ldr	r3, [r2, #0]
			harmony_t *temp = (harmony_t *)harmony_list_read; 
  40291c:	6826      	ldr	r6, [r4, #0]
			harmony_list_fill[harmony_idx].idx = 0; // dont care 
  40291e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
			harmony_list_read = harmony_list_fill;		
  402922:	6025      	str	r5, [r4, #0]
			harmony_list_fill = temp; 
  402924:	600e      	str	r6, [r1, #0]
			harmony_list_fill[harmony_idx].idx = 0; // dont care 
  402926:	6058      	str	r0, [r3, #4]
			harmony_idx = 0; 
  402928:	6010      	str	r0, [r2, #0]
}
  40292a:	e6ef      	b.n	40270c <USART1_Handler+0x10>
			autotune = !autotune; 
  40292c:	4a31      	ldr	r2, [pc, #196]	; (4029f4 <USART1_Handler+0x2f8>)
  40292e:	7813      	ldrb	r3, [r2, #0]
  402930:	f083 0301 	eor.w	r3, r3, #1
  402934:	7013      	strb	r3, [r2, #0]
  402936:	e6e9      	b.n	40270c <USART1_Handler+0x10>
			waiting_for_chorus_speed = true;
  402938:	2301      	movs	r3, #1
  40293a:	f88c 3000 	strb.w	r3, [ip]
  40293e:	e6e5      	b.n	40270c <USART1_Handler+0x10>
			waiting_for_reverb_volume = true;
  402940:	2301      	movs	r3, #1
  402942:	702b      	strb	r3, [r5, #0]
  402944:	e6e2      	b.n	40270c <USART1_Handler+0x10>
			waiting_for_pitch_bend = true;
  402946:	2301      	movs	r3, #1
  402948:	7023      	strb	r3, [r4, #0]
  40294a:	e6df      	b.n	40270c <USART1_Handler+0x10>
			waiting_for_chorus_volume = true;
  40294c:	2301      	movs	r3, #1
  40294e:	f888 3000 	strb.w	r3, [r8]
  402952:	e6db      	b.n	40270c <USART1_Handler+0x10>
			waiting_for_delay_feedback = true;
  402954:	2301      	movs	r3, #1
  402956:	f88e 3000 	strb.w	r3, [lr]
  40295a:	e6d7      	b.n	40270c <USART1_Handler+0x10>
			waiting_for_delay_speed = true;
  40295c:	2301      	movs	r3, #1
  40295e:	703b      	strb	r3, [r7, #0]
  402960:	e6d4      	b.n	40270c <USART1_Handler+0x10>
			waiting_for_delay_volume = true;
  402962:	2301      	movs	r3, #1
  402964:	7033      	strb	r3, [r6, #0]
  402966:	e6d1      	b.n	40270c <USART1_Handler+0x10>
  402968:	00401805 	.word	0x00401805
  40296c:	40028000 	.word	0x40028000
  402970:	00401809 	.word	0x00401809
  402974:	2044540a 	.word	0x2044540a
  402978:	2044540b 	.word	0x2044540b
  40297c:	3c1acf38 	.word	0x3c1acf38
  402980:	2040004c 	.word	0x2040004c
  402984:	3c010204 	.word	0x3c010204
  402988:	20400040 	.word	0x20400040
  40298c:	20445409 	.word	0x20445409
  402990:	2044540c 	.word	0x2044540c
  402994:	20400050 	.word	0x20400050
  402998:	3be836d4 	.word	0x3be836d4
  40299c:	3dcccccd 	.word	0x3dcccccd
  4029a0:	2040003c 	.word	0x2040003c
  4029a4:	2044540d 	.word	0x2044540d
  4029a8:	20445400 	.word	0x20445400
  4029ac:	20445408 	.word	0x20445408
  4029b0:	3bb49c6c 	.word	0x3bb49c6c
  4029b4:	20430000 	.word	0x20430000
  4029b8:	20445407 	.word	0x20445407
  4029bc:	42dc78f2 	.word	0x42dc78f2
  4029c0:	467d2000 	.word	0x467d2000
  4029c4:	20400038 	.word	0x20400038
  4029c8:	3bce69a0 	.word	0x3bce69a0
  4029cc:	20400034 	.word	0x20400034
  4029d0:	2041c0d4 	.word	0x2041c0d4
  4029d4:	3c810204 	.word	0x3c810204
  4029d8:	3d4ccccd 	.word	0x3d4ccccd
  4029dc:	20400030 	.word	0x20400030
  4029e0:	20444000 	.word	0x20444000
  4029e4:	20400044 	.word	0x20400044
  4029e8:	004071b8 	.word	0x004071b8
  4029ec:	bf800000 	.word	0xbf800000
  4029f0:	20400048 	.word	0x20400048
  4029f4:	2040002c 	.word	0x2040002c
  4029f8:	20445406 	.word	0x20445406
  4029fc:	20445405 	.word	0x20445405
  402a00:	20445404 	.word	0x20445404

00402a04 <main>:

// uncomment to communicate to pc console over uart for debug 
//#define USING_CONSOLE

int main(void)
{
  402a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sysclk_init();
  402a08:	4bb2      	ldr	r3, [pc, #712]	; (402cd4 <main+0x2d0>)
{
  402a0a:	ed2d 8b06 	vpush	{d8-d10}
  402a0e:	b097      	sub	sp, #92	; 0x5c
	sysclk_init();
  402a10:	4798      	blx	r3
	board_init();
  402a12:	4bb1      	ldr	r3, [pc, #708]	; (402cd8 <main+0x2d4>)
  402a14:	4798      	blx	r3
  __ASM volatile ("dsb");
  402a16:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402a1a:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_DisableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->CCR &= ~SCB_CCR_IC_Msk;            // disable I-Cache
  402a1e:	4baf      	ldr	r3, [pc, #700]	; (402cdc <main+0x2d8>)
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  402a20:	2400      	movs	r4, #0
    SCB->CCR &= ~SCB_CCR_IC_Msk;            // disable I-Cache
  402a22:	695a      	ldr	r2, [r3, #20]
  402a24:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  402a28:	615a      	str	r2, [r3, #20]
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  402a2a:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
  __ASM volatile ("dsb");
  402a2e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402a32:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb");
  402a36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402a3a:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  402a3e:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  402a42:	695a      	ldr	r2, [r3, #20]
  402a44:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  402a48:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  402a4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402a4e:	f3bf 8f6f 	isb	sy
 	SCB_DisableICache(); 
// 	lcd_init(); 
 	SCB_EnableICache();
	audio_init();
  402a52:	4ba3      	ldr	r3, [pc, #652]	; (402ce0 <main+0x2dc>)
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  402a54:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
  402a58:	4798      	blx	r3
#ifdef USING_CONSOLE
	configure_console();
#endif 
	PSOLA_init(); 
  402a5a:	4ba2      	ldr	r3, [pc, #648]	; (402ce4 <main+0x2e0>)
  402a5c:	4798      	blx	r3
	usart_settings.char_length = opt->charlength;
  402a5e:	21c0      	movs	r1, #192	; 0xc0
	usart_settings.parity_type = opt->paritytype;
  402a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402a64:	4ba0      	ldr	r3, [pc, #640]	; (402ce8 <main+0x2e4>)
  402a66:	200e      	movs	r0, #14
	usart_settings.baudrate = opt->baudrate;
  402a68:	950a      	str	r5, [sp, #40]	; 0x28
	usart_settings.char_length = opt->charlength;
  402a6a:	910b      	str	r1, [sp, #44]	; 0x2c
  402a6c:	f06f 0501 	mvn.w	r5, #1
	usart_settings.parity_type = opt->paritytype;
  402a70:	920c      	str	r2, [sp, #48]	; 0x30
	}
	float inputPitch; 
	float oneOverInputPitch = 1.0f;
	float pitch_shift, power;
	float harmony_shifts[MAX_NUM_SHIFTS+1];
	harmony_shifts[0] = NO_SHIFT;
  402a72:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
	usart_settings.stop_bits= opt->stopbits;
  402a76:	940d      	str	r4, [sp, #52]	; 0x34
  402a78:	462e      	mov	r6, r5
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  402a7a:	940e      	str	r4, [sp, #56]	; 0x38
	uint32_t num_of_shifts = 0; 
	uint32_t circ_buf_idx = 0; 
	float closest_note = 0; 
	float desired_pitch; 
	uint32_t in_pitch_idx = 0; 
	uint32_t sin_cnt = 0; 
  402a7c:	46a3      	mov	fp, r4
  402a7e:	9405      	str	r4, [sp, #20]
  402a80:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  402a82:	4a9a      	ldr	r2, [pc, #616]	; (402cec <main+0x2e8>)
  402a84:	a90a      	add	r1, sp, #40	; 0x28
  402a86:	4b9a      	ldr	r3, [pc, #616]	; (402cf0 <main+0x2ec>)
  402a88:	489a      	ldr	r0, [pc, #616]	; (402cf4 <main+0x2f0>)
  402a8a:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  402a8c:	4f9a      	ldr	r7, [pc, #616]	; (402cf8 <main+0x2f4>)
  402a8e:	4899      	ldr	r0, [pc, #612]	; (402cf4 <main+0x2f0>)
  402a90:	47b8      	blx	r7
		usart_enable_rx(p_usart);
  402a92:	4d9a      	ldr	r5, [pc, #616]	; (402cfc <main+0x2f8>)
  402a94:	4897      	ldr	r0, [pc, #604]	; (402cf4 <main+0x2f0>)
  402a96:	47a8      	blx	r5
	usart_enable_tx(USART_SERIAL);
  402a98:	4896      	ldr	r0, [pc, #600]	; (402cf4 <main+0x2f0>)
  402a9a:	47b8      	blx	r7
	usart_enable_rx(USART_SERIAL);
  402a9c:	4895      	ldr	r0, [pc, #596]	; (402cf4 <main+0x2f0>)
  402a9e:	47a8      	blx	r5
	usart_enable_interrupt(USART_SERIAL, US_IER_RXRDY);
  402aa0:	2101      	movs	r1, #1
  402aa2:	4894      	ldr	r0, [pc, #592]	; (402cf4 <main+0x2f0>)
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402aa4:	2500      	movs	r5, #0
	usart_enable_interrupt(USART_SERIAL, US_IER_RXRDY);
  402aa6:	4b96      	ldr	r3, [pc, #600]	; (402d00 <main+0x2fc>)
  402aa8:	4798      	blx	r3
  402aaa:	4b96      	ldr	r3, [pc, #600]	; (402d04 <main+0x300>)
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402aac:	4f96      	ldr	r7, [pc, #600]	; (402d08 <main+0x304>)
	uint32_t chorus_delay; 
	arm_fill_f32(0.0f, dry_circ_buffer, CIRC_BUF_SIZE);
  402aae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402ab2:	f8df e2ac 	ldr.w	lr, [pc, #684]	; 402d60 <main+0x35c>
  402ab6:	f04f 0c40 	mov.w	ip, #64	; 0x40
  402aba:	1af6      	subs	r6, r6, r3
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402abc:	4b93      	ldr	r3, [pc, #588]	; (402d0c <main+0x308>)
	harmony_shifts[1] = END_OF_SHIFTS; 
  402abe:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 402d64 <main+0x360>
	arm_fill_f32(0.0f, dry_circ_buffer, CIRC_BUF_SIZE);
  402ac2:	4628      	mov	r0, r5
  402ac4:	4992      	ldr	r1, [pc, #584]	; (402d10 <main+0x30c>)
  402ac6:	9607      	str	r6, [sp, #28]
  402ac8:	f88e c30e 	strb.w	ip, [lr, #782]	; 0x30e
  402acc:	4688      	mov	r8, r1
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  402ace:	f8ce 2180 	str.w	r2, [lr, #384]	; 0x180
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402ad2:	f8ce 2000 	str.w	r2, [lr]
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402ad6:	603d      	str	r5, [r7, #0]
  402ad8:	601d      	str	r5, [r3, #0]
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  402ada:	607c      	str	r4, [r7, #4]
  402adc:	605c      	str	r4, [r3, #4]
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402ade:	60bd      	str	r5, [r7, #8]
  402ae0:	609d      	str	r5, [r3, #8]
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  402ae2:	60fc      	str	r4, [r7, #12]
  402ae4:	60dc      	str	r4, [r3, #12]
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402ae6:	613d      	str	r5, [r7, #16]
  402ae8:	611d      	str	r5, [r3, #16]
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  402aea:	617c      	str	r4, [r7, #20]
  402aec:	615c      	str	r4, [r3, #20]
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402aee:	61bd      	str	r5, [r7, #24]
  402af0:	619d      	str	r5, [r3, #24]
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  402af2:	61fc      	str	r4, [r7, #28]
  402af4:	61dc      	str	r4, [r3, #28]
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402af6:	623d      	str	r5, [r7, #32]
  402af8:	621d      	str	r5, [r3, #32]
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  402afa:	627c      	str	r4, [r7, #36]	; 0x24
  402afc:	625c      	str	r4, [r3, #36]	; 0x24
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402afe:	62bd      	str	r5, [r7, #40]	; 0x28
  402b00:	629d      	str	r5, [r3, #40]	; 0x28
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  402b02:	62fc      	str	r4, [r7, #44]	; 0x2c
  402b04:	62dc      	str	r4, [r3, #44]	; 0x2c
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402b06:	633d      	str	r5, [r7, #48]	; 0x30
  402b08:	631d      	str	r5, [r3, #48]	; 0x30
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  402b0a:	637c      	str	r4, [r7, #52]	; 0x34
  402b0c:	635c      	str	r4, [r3, #52]	; 0x34
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402b0e:	63bd      	str	r5, [r7, #56]	; 0x38
  402b10:	639d      	str	r5, [r3, #56]	; 0x38
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  402b12:	63fc      	str	r4, [r7, #60]	; 0x3c
  402b14:	63dc      	str	r4, [r3, #60]	; 0x3c
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402b16:	643d      	str	r5, [r7, #64]	; 0x40
  402b18:	641d      	str	r5, [r3, #64]	; 0x40
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  402b1a:	647c      	str	r4, [r7, #68]	; 0x44
  402b1c:	645c      	str	r4, [r3, #68]	; 0x44
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402b1e:	64bd      	str	r5, [r7, #72]	; 0x48
  402b20:	649d      	str	r5, [r3, #72]	; 0x48
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  402b22:	64fc      	str	r4, [r7, #76]	; 0x4c
  402b24:	64dc      	str	r4, [r3, #76]	; 0x4c
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402b26:	653d      	str	r5, [r7, #80]	; 0x50
  402b28:	651d      	str	r5, [r3, #80]	; 0x50
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  402b2a:	657c      	str	r4, [r7, #84]	; 0x54
  402b2c:	655c      	str	r4, [r3, #84]	; 0x54
	arm_fill_f32(0.0f, dry_circ_buffer, CIRC_BUF_SIZE);
  402b2e:	4b79      	ldr	r3, [pc, #484]	; (402d14 <main+0x310>)
	harmony_shifts[1] = END_OF_SHIFTS; 
  402b30:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
	harmony_shifts[MAX_NUM_SHIFTS] = END_OF_SHIFTS; // should never change 
  402b34:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
	harmony_shifts[0] = NO_SHIFT;
  402b38:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
	arm_fill_f32(0.0f, dry_circ_buffer, CIRC_BUF_SIZE);
  402b3c:	4798      	blx	r3
	arm_fill_f32(0.0f, delay_circ_buffer, CIRC_BUF_SIZE);
  402b3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  402b42:	4628      	mov	r0, r5
  402b44:	4974      	ldr	r1, [pc, #464]	; (402d18 <main+0x314>)
  402b46:	4b73      	ldr	r3, [pc, #460]	; (402d14 <main+0x310>)
  402b48:	eddf aa74 	vldr	s21, [pc, #464]	; 402d1c <main+0x318>
			
			// Add audio effects 
			uint32_t curr_idx = circ_buf_idx - (uint32_t)WIN_SIZE;
			// chorus params -- could make speed a param 
			float n_freq = chorus_speed / PSOLA_SAMPLE_RATE; 
			uint32_t num_samples_in_period = 1 / n_freq; 
  402b4c:	eddf 8a74 	vldr	s17, [pc, #464]	; 402d20 <main+0x31c>
  402b50:	f8df 9214 	ldr.w	r9, [pc, #532]	; 402d68 <main+0x364>
	arm_fill_f32(0.0f, delay_circ_buffer, CIRC_BUF_SIZE);
  402b54:	4798      	blx	r3
		if (dataReceived)
  402b56:	4b73      	ldr	r3, [pc, #460]	; (402d24 <main+0x320>)
  402b58:	781b      	ldrb	r3, [r3, #0]
  402b5a:	2b00      	cmp	r3, #0
  402b5c:	d0fb      	beq.n	402b56 <main+0x152>
			dataReceived = false; 
  402b5e:	4a71      	ldr	r2, [pc, #452]	; (402d24 <main+0x320>)
  402b60:	2300      	movs	r3, #0
			inputPitch = computeWaveletPitch((float  *)processBuffer);
  402b62:	4871      	ldr	r0, [pc, #452]	; (402d28 <main+0x324>)
			dataReceived = false; 
  402b64:	7013      	strb	r3, [r2, #0]
			inputPitch = computeWaveletPitch((float  *)processBuffer);
  402b66:	4b71      	ldr	r3, [pc, #452]	; (402d2c <main+0x328>)
  402b68:	4798      	blx	r3
			oneOverInputPitch = 1.0f / inputPitch;
  402b6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  402b6e:	ee07 0a90 	vmov	s15, r0
  402b72:	ed9f 9a6f 	vldr	s18, [pc, #444]	; 402d30 <main+0x32c>
	uint32_t hi = 127;
  402b76:	207f      	movs	r0, #127	; 0x7f
	uint32_t lo = 12; // lowest at C0
  402b78:	220c      	movs	r2, #12
  402b7a:	fe87 8aaa 	vmaxnm.f32	s16, s15, s21
			oneOverInputPitch = 1.0f / inputPitch;
  402b7e:	eec7 9a08 	vdiv.f32	s19, s14, s16
  402b82:	eddf 7a6c 	vldr	s15, [pc, #432]	; 402d34 <main+0x330>
		mid = (hi + lo) >> 1;
  402b86:	1813      	adds	r3, r2, r0
  402b88:	085b      	lsrs	r3, r3, #1
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402b8a:	ee77 7ac8 	vsub.f32	s15, s15, s16
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402b8e:	ee39 7a48 	vsub.f32	s14, s18, s16
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402b92:	1c59      	adds	r1, r3, #1
  402b94:	eef0 7ae7 	vabs.f32	s15, s15
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402b98:	eeb0 7ac7 	vabs.f32	s14, s14
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402b9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402ba0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
		if (d2 <= d1)
  402ba4:	ee17 5a90 	vmov	r5, s15
  402ba8:	ee17 4a10 	vmov	r4, s14
  402bac:	42ac      	cmp	r4, r5
  402bae:	d21f      	bcs.n	402bf0 <main+0x1ec>
  402bb0:	e14a      	b.n	402e48 <main+0x444>
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402bb2:	1c5c      	adds	r4, r3, #1
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402bb4:	4a60      	ldr	r2, [pc, #384]	; (402d38 <main+0x334>)
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402bb6:	4d60      	ldr	r5, [pc, #384]	; (402d38 <main+0x334>)
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402bb8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402bbc:	eb05 0584 	add.w	r5, r5, r4, lsl #2
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402bc0:	ed92 9a00 	vldr	s18, [r2]
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402bc4:	edd5 7a00 	vldr	s15, [r5]
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402bc8:	ee39 7a48 	vsub.f32	s14, s18, s16
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402bcc:	ee77 7ac8 	vsub.f32	s15, s15, s16
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402bd0:	eeb0 7ac7 	vabs.f32	s14, s14
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402bd4:	eef0 7ae7 	vabs.f32	s15, s15
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402bd8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402bdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		if (d2 <= d1)
  402be0:	ee17 2a10 	vmov	r2, s14
  402be4:	ee17 5a90 	vmov	r5, s15
  402be8:	42aa      	cmp	r2, r5
  402bea:	f0c0 812e 	bcc.w	402e4a <main+0x446>
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402bee:	4621      	mov	r1, r4
		mid = (hi + lo) >> 1;
  402bf0:	180b      	adds	r3, r1, r0
	while (lo < hi)
  402bf2:	4281      	cmp	r1, r0
		mid = (hi + lo) >> 1;
  402bf4:	ea4f 0353 	mov.w	r3, r3, lsr #1
	while (lo < hi)
  402bf8:	d3db      	bcc.n	402bb2 <main+0x1ae>
  402bfa:	4b4f      	ldr	r3, [pc, #316]	; (402d38 <main+0x334>)
  402bfc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  402c00:	ed93 9a00 	vldr	s18, [r3]
				if (autotune)
  402c04:	4b4d      	ldr	r3, [pc, #308]	; (402d3c <main+0x338>)
  402c06:	781a      	ldrb	r2, [r3, #0]
				if (pitch_bend < 56 || pitch_bend > 72) // higher bounds for noise affecting pitch bend wheel 
  402c08:	4b4d      	ldr	r3, [pc, #308]	; (402d40 <main+0x33c>)
					desired_pitch = closest_note;
  402c0a:	2a00      	cmp	r2, #0
				if (pitch_bend < 56 || pitch_bend > 72) // higher bounds for noise affecting pitch bend wheel 
  402c0c:	681b      	ldr	r3, [r3, #0]
					desired_pitch = closest_note;
  402c0e:	bf14      	ite	ne
  402c10:	eef0 7a49 	vmovne.f32	s15, s18
  402c14:	eef0 7a48 	vmoveq.f32	s15, s16
				if (pitch_bend < 56 || pitch_bend > 72) // higher bounds for noise affecting pitch bend wheel 
  402c18:	2b37      	cmp	r3, #55	; 0x37
  402c1a:	d903      	bls.n	402c24 <main+0x220>
  402c1c:	4b48      	ldr	r3, [pc, #288]	; (402d40 <main+0x33c>)
  402c1e:	681b      	ldr	r3, [r3, #0]
  402c20:	2b48      	cmp	r3, #72	; 0x48
  402c22:	d91e      	bls.n	402c62 <main+0x25e>
					bend_pitch(&desired_pitch, in_pitch_idx, (uint32_t)pitch_bend);
  402c24:	4b46      	ldr	r3, [pc, #280]	; (402d40 <main+0x33c>)
  402c26:	681b      	ldr	r3, [r3, #0]
	if (pitch_idx < 0 || pitch_idx > 127 || bend < 0 || bend > 127)
  402c28:	2b7f      	cmp	r3, #127	; 0x7f
  402c2a:	d81a      	bhi.n	402c62 <main+0x25e>
	if (pitch_bend > 64)
  402c2c:	4b44      	ldr	r3, [pc, #272]	; (402d40 <main+0x33c>)
  402c2e:	681b      	ldr	r3, [r3, #0]
  402c30:	2b40      	cmp	r3, #64	; 0x40
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  402c32:	4b43      	ldr	r3, [pc, #268]	; (402d40 <main+0x33c>)
  402c34:	edd3 6a00 	vldr	s13, [r3]
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  402c38:	4b3f      	ldr	r3, [pc, #252]	; (402d38 <main+0x334>)
  402c3a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
	if (pitch_bend > 64)
  402c3e:	f200 8251 	bhi.w	4030e4 <main+0x6e0>
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402c42:	eef8 6a66 	vcvt.f32.u32	s13, s13
  402c46:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 402d44 <main+0x340>
  402c4a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 402d48 <main+0x344>
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402c4e:	ed50 5a02 	vldr	s11, [r0, #-8]
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402c52:	ee76 6ac6 	vsub.f32	s13, s13, s12
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402c56:	ee39 6a65 	vsub.f32	s12, s18, s11
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402c5a:	ee26 7a87 	vmul.f32	s14, s13, s14
  402c5e:	eee7 7a06 	vfma.f32	s15, s14, s12
				pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402c62:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
			arm_power_f32((float  *)processBuffer, WIN_SIZE>>2, &power);
  402c66:	aa09      	add	r2, sp, #36	; 0x24
				pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402c68:	ee77 7ac8 	vsub.f32	s15, s15, s16
			arm_power_f32((float  *)processBuffer, WIN_SIZE>>2, &power);
  402c6c:	f44f 7180 	mov.w	r1, #256	; 0x100
  402c70:	482d      	ldr	r0, [pc, #180]	; (402d28 <main+0x324>)
				pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402c72:	eeb0 7a4a 	vmov.f32	s14, s20
			arm_power_f32((float  *)processBuffer, WIN_SIZE>>2, &power);
  402c76:	4b35      	ldr	r3, [pc, #212]	; (402d4c <main+0x348>)
				pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402c78:	eea9 7aa7 	vfma.f32	s14, s19, s15
				harmony_shifts[0] = pitch_shift ;
  402c7c:	ed8d 7a0a 	vstr	s14, [sp, #40]	; 0x28
			arm_power_f32((float  *)processBuffer, WIN_SIZE>>2, &power);
  402c80:	4798      	blx	r3
			if (inputPitch > MINIMUM_PITCH && power > POWER_THRESHOLD)
  402c82:	eeb4 8aea 	vcmpe.f32	s16, s21
  402c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402c8a:	f340 80ed 	ble.w	402e68 <main+0x464>
  402c8e:	eddf 7a30 	vldr	s15, [pc, #192]	; 402d50 <main+0x34c>
  402c92:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
  402c96:	eeb4 7ae7 	vcmpe.f32	s14, s15
  402c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402c9e:	f340 80e3 	ble.w	402e68 <main+0x464>
				while(harmony_list_read[i].freq > 1.0f && i < MAX_NUM_SHIFTS-1)
  402ca2:	4b2c      	ldr	r3, [pc, #176]	; (402d54 <main+0x350>)
  402ca4:	681b      	ldr	r3, [r3, #0]
  402ca6:	edd3 7a00 	vldr	s15, [r3]
  402caa:	eef4 7aca 	vcmpe.f32	s15, s20
  402cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402cb2:	f340 820f 	ble.w	4030d4 <main+0x6d0>
						if (pitch_shift > 0.1f && pitch_shift < 6.0f) // range check 
  402cb6:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
				while(harmony_list_read[i].freq > 1.0f && i < MAX_NUM_SHIFTS-1)
  402cba:	2001      	movs	r0, #1
					if (Abs(harmony_list_read[i].freq - closest_note) > 1.0f) // don't harmonies input pitch twice 
  402cbc:	eeb0 7a4a 	vmov.f32	s14, s20
				while(harmony_list_read[i].freq > 1.0f && i < MAX_NUM_SHIFTS-1)
  402cc0:	2200      	movs	r2, #0
						if (pitch_shift > 0.1f && pitch_shift < 6.0f) // range check 
  402cc2:	eddf 6a25 	vldr	s13, [pc, #148]	; 402d58 <main+0x354>
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402cc6:	eddf 3a1f 	vldr	s7, [pc, #124]	; 402d44 <main+0x340>
  402cca:	eddf 4a1f 	vldr	s9, [pc, #124]	; 402d48 <main+0x344>
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  402cce:	ed9f 4a23 	vldr	s8, [pc, #140]	; 402d5c <main+0x358>
  402cd2:	e07a      	b.n	402dca <main+0x3c6>
  402cd4:	0040185d 	.word	0x0040185d
  402cd8:	004018cd 	.word	0x004018cd
  402cdc:	e000ed00 	.word	0xe000ed00
  402ce0:	00400361 	.word	0x00400361
  402ce4:	00400cf1 	.word	0x00400cf1
  402ce8:	004023a5 	.word	0x004023a5
  402cec:	08f0d180 	.word	0x08f0d180
  402cf0:	00401751 	.word	0x00401751
  402cf4:	40028000 	.word	0x40028000
  402cf8:	004017f1 	.word	0x004017f1
  402cfc:	004017f9 	.word	0x004017f9
  402d00:	00401801 	.word	0x00401801
  402d04:	20444400 	.word	0x20444400
  402d08:	2044a864 	.word	0x2044a864
  402d0c:	2044a80c 	.word	0x2044a80c
  402d10:	20434000 	.word	0x20434000
  402d14:	00403195 	.word	0x00403195
  402d18:	20420000 	.word	0x20420000
  402d1c:	42c80000 	.word	0x42c80000
  402d20:	4735a700 	.word	0x4735a700
  402d24:	2040401c 	.word	0x2040401c
  402d28:	20446800 	.word	0x20446800
  402d2c:	004005b9 	.word	0x004005b9
  402d30:	43dc0000 	.word	0x43dc0000
  402d34:	43e914fe 	.word	0x43e914fe
  402d38:	004071b8 	.word	0x004071b8
  402d3c:	2040002c 	.word	0x2040002c
  402d40:	20400050 	.word	0x20400050
  402d44:	42800000 	.word	0x42800000
  402d48:	3c800000 	.word	0x3c800000
  402d4c:	00403219 	.word	0x00403219
  402d50:	358637bd 	.word	0x358637bd
  402d54:	20400048 	.word	0x20400048
  402d58:	bf666666 	.word	0xbf666666
  402d5c:	427c0000 	.word	0x427c0000
  402d60:	e000e100 	.word	0xe000e100
  402d64:	bf800000 	.word	0xbf800000
  402d68:	20400014 	.word	0x20400014
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402d6c:	ee75 5ae3 	vsub.f32	s11, s11, s7
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402d70:	ed94 3a00 	vldr	s6, [r4]
  402d74:	ed14 5a02 	vldr	s10, [r4, #-8]
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402d78:	ee65 5aa4 	vmul.f32	s11, s11, s9
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402d7c:	ee33 5a45 	vsub.f32	s10, s6, s10
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402d80:	eee5 7a85 	vfma.f32	s15, s11, s10
						pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402d84:	ee77 7ac8 	vsub.f32	s15, s15, s16
  402d88:	ee67 7aa9 	vmul.f32	s15, s15, s19
						if (pitch_shift > 0.1f && pitch_shift < 6.0f) // range check 
  402d8c:	eef4 7a66 	vcmp.f32	s15, s13
  402d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402d94:	dd0c      	ble.n	402db0 <main+0x3ac>
  402d96:	eef4 7a46 	vcmp.f32	s15, s12
  402d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402d9e:	d507      	bpl.n	402db0 <main+0x3ac>
							harmony_shifts[num_of_shifts++] = pitch_shift;
  402da0:	a916      	add	r1, sp, #88	; 0x58
						pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402da2:	ee77 7a87 	vadd.f32	s15, s15, s14
							harmony_shifts[num_of_shifts++] = pitch_shift;
  402da6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
  402daa:	3001      	adds	r0, #1
  402dac:	ed41 7a0c 	vstr	s15, [r1, #-48]	; 0xffffffd0
					i++; 
  402db0:	3201      	adds	r2, #1
				while(harmony_list_read[i].freq > 1.0f && i < MAX_NUM_SHIFTS-1)
  402db2:	3308      	adds	r3, #8
  402db4:	edd3 7a00 	vldr	s15, [r3]
  402db8:	2a0a      	cmp	r2, #10
  402dba:	f000 818c 	beq.w	4030d6 <main+0x6d2>
  402dbe:	eef4 7ac7 	vcmpe.f32	s15, s14
  402dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402dc6:	f340 8186 	ble.w	4030d6 <main+0x6d2>
					if (Abs(harmony_list_read[i].freq - closest_note) > 1.0f) // don't harmonies input pitch twice 
  402dca:	edd3 7a00 	vldr	s15, [r3]
  402dce:	ee77 7ac9 	vsub.f32	s15, s15, s18
  402dd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  402dd6:	edd3 7a00 	vldr	s15, [r3]
  402dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402dde:	bf4c      	ite	mi
  402de0:	ee79 7a67 	vsubmi.f32	s15, s18, s15
  402de4:	ee77 7ac9 	vsubpl.f32	s15, s15, s18
  402de8:	eef4 7ac7 	vcmpe.f32	s15, s14
  402dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402df0:	bfcc      	ite	gt
  402df2:	2101      	movgt	r1, #1
  402df4:	2100      	movle	r1, #0
  402df6:	2900      	cmp	r1, #0
  402df8:	d0da      	beq.n	402db0 <main+0x3ac>
						if (pitch_bend != 64)
  402dfa:	49c4      	ldr	r1, [pc, #784]	; (40310c <main+0x708>)
						desired_pitch = harmony_list_read[i].freq; 
  402dfc:	edd3 7a00 	vldr	s15, [r3]
						if (pitch_bend != 64)
  402e00:	6809      	ldr	r1, [r1, #0]
  402e02:	2940      	cmp	r1, #64	; 0x40
  402e04:	d0be      	beq.n	402d84 <main+0x380>
							bend_pitch(&desired_pitch, harmony_list_read[i].idx, (uint32_t)pitch_bend);
  402e06:	6859      	ldr	r1, [r3, #4]
  402e08:	4cc0      	ldr	r4, [pc, #768]	; (40310c <main+0x708>)
	if (pitch_idx < 0 || pitch_idx > 127 || bend < 0 || bend > 127)
  402e0a:	297f      	cmp	r1, #127	; 0x7f
							bend_pitch(&desired_pitch, harmony_list_read[i].idx, (uint32_t)pitch_bend);
  402e0c:	6824      	ldr	r4, [r4, #0]
	if (pitch_idx < 0 || pitch_idx > 127 || bend < 0 || bend > 127)
  402e0e:	d8b9      	bhi.n	402d84 <main+0x380>
  402e10:	2c7f      	cmp	r4, #127	; 0x7f
  402e12:	d8b7      	bhi.n	402d84 <main+0x380>
	if (pitch_bend > 64)
  402e14:	4cbd      	ldr	r4, [pc, #756]	; (40310c <main+0x708>)
  402e16:	6824      	ldr	r4, [r4, #0]
  402e18:	2c40      	cmp	r4, #64	; 0x40
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  402e1a:	4cbc      	ldr	r4, [pc, #752]	; (40310c <main+0x708>)
  402e1c:	edd4 5a00 	vldr	s11, [r4]
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  402e20:	4cbb      	ldr	r4, [pc, #748]	; (403110 <main+0x70c>)
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  402e22:	eef8 5a65 	vcvt.f32.u32	s11, s11
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  402e26:	eb04 0481 	add.w	r4, r4, r1, lsl #2
  402e2a:	4621      	mov	r1, r4
	if (pitch_bend > 64)
  402e2c:	d99e      	bls.n	402d6c <main+0x368>
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  402e2e:	ee75 5ac4 	vsub.f32	s11, s11, s8
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  402e32:	ed94 3a02 	vldr	s6, [r4, #8]
  402e36:	ed94 5a00 	vldr	s10, [r4]
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  402e3a:	ee65 5aa4 	vmul.f32	s11, s11, s9
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  402e3e:	ee33 5a45 	vsub.f32	s10, s6, s10
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  402e42:	eee5 7a85 	vfma.f32	s15, s11, s10
  402e46:	e79d      	b.n	402d84 <main+0x380>
		if (d2 <= d1)
  402e48:	4611      	mov	r1, r2
	while (lo < hi)
  402e4a:	428b      	cmp	r3, r1
  402e4c:	f240 815b 	bls.w	403106 <main+0x702>
  402e50:	185c      	adds	r4, r3, r1
  402e52:	4618      	mov	r0, r3
  402e54:	460a      	mov	r2, r1
  402e56:	49ae      	ldr	r1, [pc, #696]	; (403110 <main+0x70c>)
  402e58:	0863      	lsrs	r3, r4, #1
  402e5a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  402e5e:	ed91 9a00 	vldr	s18, [r1]
  402e62:	edd1 7a01 	vldr	s15, [r1, #4]
  402e66:	e68e      	b.n	402b86 <main+0x182>
				harmony_shifts[1] = END_OF_SHIFTS; 	
  402e68:	4baa      	ldr	r3, [pc, #680]	; (403114 <main+0x710>)
  402e6a:	930b      	str	r3, [sp, #44]	; 0x2c
			create_harmonies((float  *)processBuffer, out_buffer, inputPitch, harmony_shifts, (float)harm_volume, (float)dry_volume); 
  402e6c:	4baa      	ldr	r3, [pc, #680]	; (403118 <main+0x714>)
  402e6e:	4aab      	ldr	r2, [pc, #684]	; (40311c <main+0x718>)
  402e70:	6819      	ldr	r1, [r3, #0]
  402e72:	ab0a      	add	r3, sp, #40	; 0x28
  402e74:	6810      	ldr	r0, [r2, #0]
  402e76:	ee18 2a10 	vmov	r2, s16
  402e7a:	9100      	str	r1, [sp, #0]
  402e7c:	9001      	str	r0, [sp, #4]
  402e7e:	49a8      	ldr	r1, [pc, #672]	; (403120 <main+0x71c>)
  402e80:	48a8      	ldr	r0, [pc, #672]	; (403124 <main+0x720>)
  402e82:	4ca9      	ldr	r4, [pc, #676]	; (403128 <main+0x724>)
  402e84:	47a0      	blx	r4
  402e86:	4da6      	ldr	r5, [pc, #664]	; (403120 <main+0x71c>)
  402e88:	465a      	mov	r2, fp
				dry_circ_buffer[circ_buf_idx++ & CIRC_MASK] = out_buffer[i];
  402e8a:	f3c2 030d 	ubfx	r3, r2, #0, #14
  402e8e:	f855 1b04 	ldr.w	r1, [r5], #4
  402e92:	3201      	adds	r2, #1
  402e94:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  402e98:	6019      	str	r1, [r3, #0]
			for (i = 0; i < WIN_SIZE; i++)
  402e9a:	4ba4      	ldr	r3, [pc, #656]	; (40312c <main+0x728>)
  402e9c:	429d      	cmp	r5, r3
  402e9e:	d1f4      	bne.n	402e8a <main+0x486>
			float n_freq = chorus_speed / PSOLA_SAMPLE_RATE; 
  402ea0:	4ba3      	ldr	r3, [pc, #652]	; (403130 <main+0x72c>)
  402ea2:	ed9f 8aa4 	vldr	s16, [pc, #656]	; 403134 <main+0x730>
  402ea6:	edd3 7a00 	vldr	s15, [r3]
  402eaa:	f50b 6380 	add.w	r3, fp, #1024	; 0x400
			uint32_t num_samples_in_period = 1 / n_freq; 
  402eae:	9506      	str	r5, [sp, #24]
  402eb0:	ee88 7aa7 	vdiv.f32	s14, s17, s15
  402eb4:	4c9a      	ldr	r4, [pc, #616]	; (403120 <main+0x71c>)
			for (i = 0; i < WIN_SIZE; i++, curr_idx++)
			{				
				out_buffer[i] = (1.0f - 0.5*(delay_volume + chorus_volume + reverb_volume)) * out_buffer[i]; 
						
				// chorus
				chorus_delay = (0.008f + 0.001f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  402eb6:	ed9f aaa0 	vldr	s20, [pc, #640]	; 403138 <main+0x734>
  402eba:	eddf 9aa0 	vldr	s19, [pc, #640]	; 40313c <main+0x738>
				if (sin_cnt == num_samples_in_period)
					sin_cnt = 0;
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  402ebe:	ed9f 9aa0 	vldr	s18, [pc, #640]	; 403140 <main+0x73c>
			uint32_t num_samples_in_period = 1 / n_freq; 
  402ec2:	9d05      	ldr	r5, [sp, #20]
  402ec4:	ee27 8a88 	vmul.f32	s16, s15, s16
  402ec8:	9304      	str	r3, [sp, #16]
  402eca:	eefc 7ac7 	vcvt.u32.f32	s15, s14
  402ece:	edcd 7a03 	vstr	s15, [sp, #12]
				out_buffer[i] = (1.0f - 0.5*(delay_volume + chorus_volume + reverb_volume)) * out_buffer[i]; 
  402ed2:	4b9c      	ldr	r3, [pc, #624]	; (403144 <main+0x740>)
				chorus_delay = (0.008f + 0.001f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  402ed4:	f105 0a01 	add.w	sl, r5, #1
				out_buffer[i] = (1.0f - 0.5*(delay_volume + chorus_volume + reverb_volume)) * out_buffer[i]; 
  402ed8:	4e9b      	ldr	r6, [pc, #620]	; (403148 <main+0x744>)
  402eda:	ed93 7a00 	vldr	s14, [r3]
  402ede:	4b9b      	ldr	r3, [pc, #620]	; (40314c <main+0x748>)
  402ee0:	edd3 7a00 	vldr	s15, [r3]
  402ee4:	4b9a      	ldr	r3, [pc, #616]	; (403150 <main+0x74c>)
  402ee6:	ee77 7a27 	vadd.f32	s15, s14, s15
  402eea:	edd3 6a00 	vldr	s13, [r3]
  402eee:	4b99      	ldr	r3, [pc, #612]	; (403154 <main+0x750>)
  402ef0:	ee77 7aa6 	vadd.f32	s15, s15, s13
  402ef4:	ee17 0a90 	vmov	r0, s15
  402ef8:	4798      	blx	r3
  402efa:	2200      	movs	r2, #0
  402efc:	4b96      	ldr	r3, [pc, #600]	; (403158 <main+0x754>)
  402efe:	47b0      	blx	r6
  402f00:	4e96      	ldr	r6, [pc, #600]	; (40315c <main+0x758>)
  402f02:	4602      	mov	r2, r0
  402f04:	460b      	mov	r3, r1
  402f06:	2000      	movs	r0, #0
  402f08:	4995      	ldr	r1, [pc, #596]	; (403160 <main+0x75c>)
  402f0a:	47b0      	blx	r6
  402f0c:	4606      	mov	r6, r0
  402f0e:	460f      	mov	r7, r1
  402f10:	6820      	ldr	r0, [r4, #0]
  402f12:	4b90      	ldr	r3, [pc, #576]	; (403154 <main+0x750>)
  402f14:	4798      	blx	r3
  402f16:	4602      	mov	r2, r0
  402f18:	460b      	mov	r3, r1
  402f1a:	4630      	mov	r0, r6
  402f1c:	4639      	mov	r1, r7
  402f1e:	4e8a      	ldr	r6, [pc, #552]	; (403148 <main+0x744>)
  402f20:	47b0      	blx	r6
  402f22:	4b90      	ldr	r3, [pc, #576]	; (403164 <main+0x760>)
  402f24:	4798      	blx	r3
				chorus_delay = (0.008f + 0.001f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  402f26:	ee07 5a90 	vmov	s15, r5
				if (sin_cnt == num_samples_in_period)
  402f2a:	9b03      	ldr	r3, [sp, #12]
				chorus_delay = (0.008f + 0.001f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  402f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
				out_buffer[i] = (1.0f - 0.5*(delay_volume + chorus_volume + reverb_volume)) * out_buffer[i]; 
  402f30:	6020      	str	r0, [r4, #0]
				if (sin_cnt == num_samples_in_period)
  402f32:	4553      	cmp	r3, sl
  402f34:	bf14      	ite	ne
  402f36:	4655      	movne	r5, sl
  402f38:	2500      	moveq	r5, #0
				chorus_delay = (0.008f + 0.001f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  402f3a:	4b8b      	ldr	r3, [pc, #556]	; (403168 <main+0x764>)
				// delay
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
				out_buffer[i] += delay_volume * delay_circ_buffer[curr_idx & CIRC_MASK];
				
				// reverb
				out_buffer[i] += reverb_volume * 0.33f *
  402f3c:	4f84      	ldr	r7, [pc, #528]	; (403150 <main+0x74c>)
				chorus_delay = (0.008f + 0.001f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  402f3e:	ee67 7a88 	vmul.f32	s15, s15, s16
  402f42:	ee17 0a90 	vmov	r0, s15
  402f46:	4798      	blx	r3
  402f48:	eef0 7a69 	vmov.f32	s15, s19
  402f4c:	ee07 0a10 	vmov	s14, r0
						(dry_circ_buffer[(curr_idx - 2001)  & CIRC_MASK] +
  402f50:	f46f 63fa 	mvn.w	r3, #2000	; 0x7d0
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  402f54:	4a7d      	ldr	r2, [pc, #500]	; (40314c <main+0x748>)
														dry_circ_buffer[(curr_idx - 809 - chorus_delay)  & CIRC_MASK]));			
  402f56:	f46f 7e4a 	mvn.w	lr, #808	; 0x328
				chorus_delay = (0.008f + 0.001f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  402f5a:	eee7 7a0a 	vfma.f32	s15, s14, s20
						(dry_circ_buffer[(curr_idx - 2001)  & CIRC_MASK] +
  402f5e:	eb0b 0103 	add.w	r1, fp, r3
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  402f62:	edd2 4a00 	vldr	s9, [r2]
						dry_circ_buffer[(curr_idx - 1503)  & CIRC_MASK] + 
  402f66:	f2ab 53df 	subw	r3, fp, #1503	; 0x5df
						dry_circ_buffer[(curr_idx - 1203)  & CIRC_MASK] ); 
  402f6a:	f2ab 42b3 	subw	r2, fp, #1203	; 0x4b3
						(dry_circ_buffer[(curr_idx - 2001)  & CIRC_MASK] +
  402f6e:	f3c1 010d 	ubfx	r1, r1, #0, #14
						dry_circ_buffer[(curr_idx - 1503)  & CIRC_MASK] + 
  402f72:	f3c3 030d 	ubfx	r3, r3, #0, #14
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  402f76:	487d      	ldr	r0, [pc, #500]	; (40316c <main+0x768>)
						dry_circ_buffer[(curr_idx - 1203)  & CIRC_MASK] ); 
  402f78:	f3c2 020d 	ubfx	r2, r2, #0, #14
						(dry_circ_buffer[(curr_idx - 2001)  & CIRC_MASK] +
  402f7c:	eb08 0181 	add.w	r1, r8, r1, lsl #2
						dry_circ_buffer[(curr_idx - 1503)  & CIRC_MASK] + 
  402f80:	eb08 0383 	add.w	r3, r8, r3, lsl #2
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  402f84:	ee64 4a89 	vmul.f32	s9, s9, s18
				chorus_delay = (0.008f + 0.001f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  402f88:	ee67 7aa8 	vmul.f32	s15, s15, s17
						dry_circ_buffer[(curr_idx - 1203)  & CIRC_MASK] ); 
  402f8c:	eb08 0282 	add.w	r2, r8, r2, lsl #2
						(dry_circ_buffer[(curr_idx - 2001)  & CIRC_MASK] +
  402f90:	ed93 7a00 	vldr	s14, [r3]
  402f94:	ed91 6a00 	vldr	s12, [r1]
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  402f98:	f3cb 010d 	ubfx	r1, fp, #0, #14
				chorus_delay = (0.008f + 0.001f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  402f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  402fa0:	edd4 5a00 	vldr	s11, [r4]
						(dry_circ_buffer[(curr_idx - 2001)  & CIRC_MASK] +
  402fa4:	ee36 6a07 	vadd.f32	s12, s12, s14
				chorus_delay = (0.008f + 0.001f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  402fa8:	ee17 3a90 	vmov	r3, s15
						dry_circ_buffer[(curr_idx - 1503)  & CIRC_MASK] + 
  402fac:	edd2 7a00 	vldr	s15, [r2]
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  402fb0:	4a6f      	ldr	r2, [pc, #444]	; (403170 <main+0x76c>)
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  402fb2:	ebab 0303 	sub.w	r3, fp, r3
						dry_circ_buffer[(curr_idx - 1503)  & CIRC_MASK] + 
  402fb6:	ee36 6a27 	vadd.f32	s12, s12, s15
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  402fba:	6812      	ldr	r2, [r2, #0]
  402fbc:	edd0 3a00 	vldr	s7, [r0]
														dry_circ_buffer[(curr_idx - 199 - chorus_delay)  & CIRC_MASK] +
  402fc0:	f1a3 06c7 	sub.w	r6, r3, #199	; 0xc7
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  402fc4:	486b      	ldr	r0, [pc, #428]	; (403174 <main+0x770>)
  402fc6:	ebab 0202 	sub.w	r2, fp, r2
														dry_circ_buffer[(curr_idx - 199 - chorus_delay)  & CIRC_MASK] +
  402fca:	f3c6 060d 	ubfx	r6, r6, #0, #14
				out_buffer[i] += reverb_volume * 0.33f *
  402fce:	eddf 7a6a 	vldr	s15, [pc, #424]	; 403178 <main+0x774>
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  402fd2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
				out_buffer[i] += delay_volume * delay_circ_buffer[curr_idx & CIRC_MASK];
  402fd6:	485b      	ldr	r0, [pc, #364]	; (403144 <main+0x740>)
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  402fd8:	f3c2 020d 	ubfx	r2, r2, #0, #14
														dry_circ_buffer[(curr_idx - 199 - chorus_delay)  & CIRC_MASK] +
  402fdc:	eb08 0686 	add.w	r6, r8, r6, lsl #2
				out_buffer[i] += delay_volume * delay_circ_buffer[curr_idx & CIRC_MASK];
  402fe0:	ed90 4a00 	vldr	s8, [r0]
														dry_circ_buffer[(curr_idx - 401 - chorus_delay)  & CIRC_MASK] +
  402fe4:	f46f 70c8 	mvn.w	r0, #400	; 0x190
				out_buffer[i] += reverb_volume * 0.33f *
  402fe8:	ed97 5a00 	vldr	s10, [r7]
			for (i = 0; i < WIN_SIZE; i++, curr_idx++)
  402fec:	f10b 0b01 	add.w	fp, fp, #1
														dry_circ_buffer[(curr_idx - 401 - chorus_delay)  & CIRC_MASK] +
  402ff0:	1818      	adds	r0, r3, r0
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  402ff2:	4f60      	ldr	r7, [pc, #384]	; (403174 <main+0x770>)
														dry_circ_buffer[(curr_idx - 199 - chorus_delay)  & CIRC_MASK] +
  402ff4:	ed96 7a00 	vldr	s14, [r6]
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  402ff8:	f3c3 060d 	ubfx	r6, r3, #0, #14
														dry_circ_buffer[(curr_idx - 401 - chorus_delay)  & CIRC_MASK] +
  402ffc:	f3c0 000d 	ubfx	r0, r0, #0, #14
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  403000:	eb07 0282 	add.w	r2, r7, r2, lsl #2
														dry_circ_buffer[(curr_idx - 601 - chorus_delay)  & CIRC_MASK] +
  403004:	f46f 7716 	mvn.w	r7, #600	; 0x258
				out_buffer[i] += reverb_volume * 0.33f *
  403008:	ee25 5a27 	vmul.f32	s10, s10, s15
														dry_circ_buffer[(curr_idx - 401 - chorus_delay)  & CIRC_MASK] +
  40300c:	eb08 0080 	add.w	r0, r8, r0, lsl #2
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  403010:	ed92 3a00 	vldr	s6, [r2]
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  403014:	eb08 0686 	add.w	r6, r8, r6, lsl #2
														dry_circ_buffer[(curr_idx - 199 - chorus_delay)  & CIRC_MASK] +
  403018:	edd0 7a00 	vldr	s15, [r0]
														dry_circ_buffer[(curr_idx - 601 - chorus_delay)  & CIRC_MASK] +
  40301c:	19d8      	adds	r0, r3, r7
														dry_circ_buffer[(curr_idx - 809 - chorus_delay)  & CIRC_MASK]));			
  40301e:	4473      	add	r3, lr
														dry_circ_buffer[(curr_idx - 199 - chorus_delay)  & CIRC_MASK] +
  403020:	ee77 7a27 	vadd.f32	s15, s14, s15
														dry_circ_buffer[(curr_idx - 601 - chorus_delay)  & CIRC_MASK] +
  403024:	f3c0 000d 	ubfx	r0, r0, #0, #14
														dry_circ_buffer[(curr_idx - 199 - chorus_delay)  & CIRC_MASK] +
  403028:	ed96 7a00 	vldr	s14, [r6]
														dry_circ_buffer[(curr_idx - 809 - chorus_delay)  & CIRC_MASK]));			
  40302c:	f3c3 030d 	ubfx	r3, r3, #0, #14
														dry_circ_buffer[(curr_idx - 601 - chorus_delay)  & CIRC_MASK] +
  403030:	eb08 0080 	add.w	r0, r8, r0, lsl #2
														dry_circ_buffer[(curr_idx - 199 - chorus_delay)  & CIRC_MASK] +
  403034:	ee77 7a87 	vadd.f32	s15, s15, s14
														dry_circ_buffer[(curr_idx - 809 - chorus_delay)  & CIRC_MASK]));			
  403038:	eb08 0383 	add.w	r3, r8, r3, lsl #2
														dry_circ_buffer[(curr_idx - 401 - chorus_delay)  & CIRC_MASK] +
  40303c:	edd0 6a00 	vldr	s13, [r0]
														dry_circ_buffer[(curr_idx - 601 - chorus_delay)  & CIRC_MASK] +
  403040:	ed93 7a00 	vldr	s14, [r3]
														dry_circ_buffer[(curr_idx - 401 - chorus_delay)  & CIRC_MASK] +
  403044:	ee77 7aa6 	vadd.f32	s15, s15, s13
			for (i = 0; i < WIN_SIZE; i++, curr_idx++)
  403048:	9b04      	ldr	r3, [sp, #16]
  40304a:	459b      	cmp	fp, r3
														dry_circ_buffer[(curr_idx - 601 - chorus_delay)  & CIRC_MASK] +
  40304c:	ee77 7a87 	vadd.f32	s15, s15, s14
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  403050:	eee4 5aa7 	vfma.f32	s11, s9, s15
  403054:	eef0 7a65 	vmov.f32	s15, s11
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  403058:	eeb0 7a65 	vmov.f32	s14, s11
				out_buffer[i] += reverb_volume * 0.33f *
  40305c:	eee6 7a05 	vfma.f32	s15, s12, s10
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  403060:	eea3 7a23 	vfma.f32	s14, s6, s7
				out_buffer[i] += reverb_volume * 0.33f *
  403064:	eee7 7a04 	vfma.f32	s15, s14, s8
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  403068:	ed81 7a00 	vstr	s14, [r1]
				out_buffer[i] += reverb_volume * 0.33f *
  40306c:	ece4 7a01 	vstmia	r4!, {s15}
			for (i = 0; i < WIN_SIZE; i++, curr_idx++)
  403070:	f47f af2f 	bne.w	402ed2 <main+0x4ce>
			}
	
			// scale output 
			arm_scale_f32(out_buffer, (float)INT16_MAX * master_volume, out_buffer, WIN_SIZE);
  403074:	4b41      	ldr	r3, [pc, #260]	; (40317c <main+0x778>)
  403076:	eddf 7a42 	vldr	s15, [pc, #264]	; 403180 <main+0x77c>
  40307a:	ed93 7a00 	vldr	s14, [r3]
  40307e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403082:	4a27      	ldr	r2, [pc, #156]	; (403120 <main+0x71c>)
  403084:	ee67 7a27 	vmul.f32	s15, s14, s15
  403088:	4c3e      	ldr	r4, [pc, #248]	; (403184 <main+0x780>)
  40308a:	4610      	mov	r0, r2
  40308c:	9505      	str	r5, [sp, #20]
  40308e:	9d06      	ldr	r5, [sp, #24]
  403090:	ee17 1a90 	vmov	r1, s15
  403094:	47a0      	blx	r4
  403096:	4b22      	ldr	r3, [pc, #136]	; (403120 <main+0x71c>)
  403098:	9f07      	ldr	r7, [sp, #28]
  40309a:	4a21      	ldr	r2, [pc, #132]	; (403120 <main+0x71c>)
			
			// Sound out 
			uint32_t idx = 0; 
			for(i = 0; i < IO_BUF_SIZE; i+=2)
			{
				outBuffer[i] = (uint16_t)(int16_t)(out_buffer[idx++]);  
  40309c:	f8d9 6000 	ldr.w	r6, [r9]
  4030a0:	1a98      	subs	r0, r3, r2
  4030a2:	ecf3 7a01 	vldmia	r3!, {s15}
  4030a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
				outBuffer[i+1] = outBuffer[i]; 
  4030aa:	18fc      	adds	r4, r7, r3
			for(i = 0; i < IO_BUF_SIZE; i+=2)
  4030ac:	429d      	cmp	r5, r3
				outBuffer[i] = (uint16_t)(int16_t)(out_buffer[idx++]);  
  4030ae:	edcd 7a03 	vstr	s15, [sp, #12]
  4030b2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4030b6:	5232      	strh	r2, [r6, r0]
				outBuffer[i+1] = outBuffer[i]; 
  4030b8:	5a32      	ldrh	r2, [r6, r0]
  4030ba:	b292      	uxth	r2, r2
  4030bc:	5332      	strh	r2, [r6, r4]
			for(i = 0; i < IO_BUF_SIZE; i+=2)
  4030be:	d1ec      	bne.n	40309a <main+0x696>
			}
			
			// check if we're too slow 
			if (dataReceived)
  4030c0:	4b31      	ldr	r3, [pc, #196]	; (403188 <main+0x784>)
  4030c2:	781b      	ldrb	r3, [r3, #0]
  4030c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
  4030c8:	2b00      	cmp	r3, #0
  4030ca:	f47f ad44 	bne.w	402b56 <main+0x152>
// 				{
// 					// taking too long ... never 
// 				}
			}
			else 
				dataReceived = false; 
  4030ce:	4b2e      	ldr	r3, [pc, #184]	; (403188 <main+0x784>)
  4030d0:	701a      	strb	r2, [r3, #0]
  4030d2:	e540      	b.n	402b56 <main+0x152>
				while(harmony_list_read[i].freq > 1.0f && i < MAX_NUM_SHIFTS-1)
  4030d4:	2001      	movs	r0, #1
				harmony_shifts[num_of_shifts] = END_OF_SHIFTS; 
  4030d6:	aa16      	add	r2, sp, #88	; 0x58
  4030d8:	4b0e      	ldr	r3, [pc, #56]	; (403114 <main+0x710>)
  4030da:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  4030de:	f840 3c30 	str.w	r3, [r0, #-48]
  4030e2:	e6c3      	b.n	402e6c <main+0x468>
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  4030e4:	eef8 6a66 	vcvt.f32.u32	s13, s13
  4030e8:	ed9f 6a28 	vldr	s12, [pc, #160]	; 40318c <main+0x788>
  4030ec:	ed9f 7a28 	vldr	s14, [pc, #160]	; 403190 <main+0x78c>
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  4030f0:	edd0 5a02 	vldr	s11, [r0, #8]
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  4030f4:	ee76 6ac6 	vsub.f32	s13, s13, s12
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  4030f8:	ee35 6ac9 	vsub.f32	s12, s11, s18
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  4030fc:	ee26 7a87 	vmul.f32	s14, s13, s14
  403100:	eee7 7a06 	vfma.f32	s15, s14, s12
  403104:	e5ad      	b.n	402c62 <main+0x25e>
	while (lo < hi)
  403106:	4618      	mov	r0, r3
  403108:	e57c      	b.n	402c04 <main+0x200>
  40310a:	bf00      	nop
  40310c:	20400050 	.word	0x20400050
  403110:	004071b8 	.word	0x004071b8
  403114:	bf800000 	.word	0xbf800000
  403118:	20400040 	.word	0x20400040
  40311c:	2040003c 	.word	0x2040003c
  403120:	20444400 	.word	0x20444400
  403124:	20446800 	.word	0x20446800
  403128:	00400d91 	.word	0x00400d91
  40312c:	20445400 	.word	0x20445400
  403130:	20400030 	.word	0x20400030
  403134:	390dad45 	.word	0x390dad45
  403138:	3a83126f 	.word	0x3a83126f
  40313c:	3c03126f 	.word	0x3c03126f
  403140:	3e4ccccd 	.word	0x3e4ccccd
  403144:	20430000 	.word	0x20430000
  403148:	00403d99 	.word	0x00403d99
  40314c:	2041c0d4 	.word	0x2041c0d4
  403150:	20445400 	.word	0x20445400
  403154:	00403cf1 	.word	0x00403cf1
  403158:	3fe00000 	.word	0x3fe00000
  40315c:	00403a31 	.word	0x00403a31
  403160:	3ff00000 	.word	0x3ff00000
  403164:	004042f9 	.word	0x004042f9
  403168:	0040343d 	.word	0x0040343d
  40316c:	20400034 	.word	0x20400034
  403170:	20400038 	.word	0x20400038
  403174:	20420000 	.word	0x20420000
  403178:	3ea8f5c3 	.word	0x3ea8f5c3
  40317c:	2040004c 	.word	0x2040004c
  403180:	46fffe00 	.word	0x46fffe00
  403184:	004034c5 	.word	0x004034c5
  403188:	2040401c 	.word	0x2040401c
  40318c:	427c0000 	.word	0x427c0000
  403190:	3c800000 	.word	0x3c800000

00403194 <arm_fill_f32>:
  403194:	b430      	push	{r4, r5}
  403196:	0895      	lsrs	r5, r2, #2
  403198:	d00b      	beq.n	4031b2 <arm_fill_f32+0x1e>
  40319a:	460b      	mov	r3, r1
  40319c:	462c      	mov	r4, r5
  40319e:	3c01      	subs	r4, #1
  4031a0:	6018      	str	r0, [r3, #0]
  4031a2:	6058      	str	r0, [r3, #4]
  4031a4:	6098      	str	r0, [r3, #8]
  4031a6:	60d8      	str	r0, [r3, #12]
  4031a8:	f103 0310 	add.w	r3, r3, #16
  4031ac:	d1f7      	bne.n	40319e <arm_fill_f32+0xa>
  4031ae:	eb01 1105 	add.w	r1, r1, r5, lsl #4
  4031b2:	f012 0203 	ands.w	r2, r2, #3
  4031b6:	d003      	beq.n	4031c0 <arm_fill_f32+0x2c>
  4031b8:	3a01      	subs	r2, #1
  4031ba:	f841 0b04 	str.w	r0, [r1], #4
  4031be:	d1fb      	bne.n	4031b8 <arm_fill_f32+0x24>
  4031c0:	bc30      	pop	{r4, r5}
  4031c2:	4770      	bx	lr

004031c4 <arm_copy_f32>:
  4031c4:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  4031c8:	ea5f 0992 	movs.w	r9, r2, lsr #2
  4031cc:	d018      	beq.n	403200 <arm_copy_f32+0x3c>
  4031ce:	4604      	mov	r4, r0
  4031d0:	460b      	mov	r3, r1
  4031d2:	464d      	mov	r5, r9
  4031d4:	f8d4 8000 	ldr.w	r8, [r4]
  4031d8:	f8d4 c004 	ldr.w	ip, [r4, #4]
  4031dc:	68a7      	ldr	r7, [r4, #8]
  4031de:	68e6      	ldr	r6, [r4, #12]
  4031e0:	3d01      	subs	r5, #1
  4031e2:	f8c3 8000 	str.w	r8, [r3]
  4031e6:	f8c3 c004 	str.w	ip, [r3, #4]
  4031ea:	609f      	str	r7, [r3, #8]
  4031ec:	60de      	str	r6, [r3, #12]
  4031ee:	f104 0410 	add.w	r4, r4, #16
  4031f2:	f103 0310 	add.w	r3, r3, #16
  4031f6:	d1ed      	bne.n	4031d4 <arm_copy_f32+0x10>
  4031f8:	ea4f 1909 	mov.w	r9, r9, lsl #4
  4031fc:	4448      	add	r0, r9
  4031fe:	4449      	add	r1, r9
  403200:	f012 0203 	ands.w	r2, r2, #3
  403204:	d005      	beq.n	403212 <arm_copy_f32+0x4e>
  403206:	f850 3b04 	ldr.w	r3, [r0], #4
  40320a:	3a01      	subs	r2, #1
  40320c:	f841 3b04 	str.w	r3, [r1], #4
  403210:	d1f9      	bne.n	403206 <arm_copy_f32+0x42>
  403212:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
  403216:	4770      	bx	lr

00403218 <arm_power_f32>:
  403218:	b430      	push	{r4, r5}
  40321a:	088d      	lsrs	r5, r1, #2
  40321c:	eddf 7a18 	vldr	s15, [pc, #96]	; 403280 <arm_power_f32+0x68>
  403220:	d01f      	beq.n	403262 <arm_power_f32+0x4a>
  403222:	4603      	mov	r3, r0
  403224:	462c      	mov	r4, r5
  403226:	edd3 6a00 	vldr	s13, [r3]
  40322a:	ed93 7a01 	vldr	s14, [r3, #4]
  40322e:	ee66 6aa6 	vmul.f32	s13, s13, s13
  403232:	ee27 6a07 	vmul.f32	s12, s14, s14
  403236:	ee76 7aa7 	vadd.f32	s15, s13, s15
  40323a:	ed93 7a02 	vldr	s14, [r3, #8]
  40323e:	ee76 7a27 	vadd.f32	s15, s12, s15
  403242:	ee67 6a07 	vmul.f32	s13, s14, s14
  403246:	ed93 7a03 	vldr	s14, [r3, #12]
  40324a:	ee76 6aa7 	vadd.f32	s13, s13, s15
  40324e:	ee27 7a07 	vmul.f32	s14, s14, s14
  403252:	3c01      	subs	r4, #1
  403254:	f103 0310 	add.w	r3, r3, #16
  403258:	ee77 7a26 	vadd.f32	s15, s14, s13
  40325c:	d1e3      	bne.n	403226 <arm_power_f32+0xe>
  40325e:	eb00 1005 	add.w	r0, r0, r5, lsl #4
  403262:	f011 0103 	ands.w	r1, r1, #3
  403266:	d007      	beq.n	403278 <arm_power_f32+0x60>
  403268:	ecb0 7a01 	vldmia	r0!, {s14}
  40326c:	ee27 7a07 	vmul.f32	s14, s14, s14
  403270:	3901      	subs	r1, #1
  403272:	ee77 7a87 	vadd.f32	s15, s15, s14
  403276:	d1f7      	bne.n	403268 <arm_power_f32+0x50>
  403278:	edc2 7a00 	vstr	s15, [r2]
  40327c:	bc30      	pop	{r4, r5}
  40327e:	4770      	bx	lr
  403280:	00000000 	.word	0x00000000

00403284 <arm_min_f32>:
  403284:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  403288:	f101 3cff 	add.w	ip, r1, #4294967295
  40328c:	ea5f 099c 	movs.w	r9, ip, lsr #2
  403290:	f100 0704 	add.w	r7, r0, #4
  403294:	edd0 7a00 	vldr	s15, [r0]
  403298:	d05c      	beq.n	403354 <arm_min_f32+0xd0>
  40329a:	463c      	mov	r4, r7
  40329c:	464e      	mov	r6, r9
  40329e:	2004      	movs	r0, #4
  4032a0:	2500      	movs	r5, #0
  4032a2:	edd4 6a00 	vldr	s13, [r4]
  4032a6:	eef4 6ae7 	vcmpe.f32	s13, s15
  4032aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4032ae:	ed94 7a01 	vldr	s14, [r4, #4]
  4032b2:	bf48      	it	mi
  4032b4:	eef0 7a66 	vmovmi.f32	s15, s13
  4032b8:	eef4 7ac7 	vcmpe.f32	s15, s14
  4032bc:	f1a0 0803 	sub.w	r8, r0, #3
  4032c0:	bf48      	it	mi
  4032c2:	4645      	movmi	r5, r8
  4032c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4032c8:	edd4 6a02 	vldr	s13, [r4, #8]
  4032cc:	bfc8      	it	gt
  4032ce:	eef0 7a47 	vmovgt.f32	s15, s14
  4032d2:	eef4 7ae6 	vcmpe.f32	s15, s13
  4032d6:	f1a0 0802 	sub.w	r8, r0, #2
  4032da:	bfc8      	it	gt
  4032dc:	4645      	movgt	r5, r8
  4032de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4032e2:	ed94 7a03 	vldr	s14, [r4, #12]
  4032e6:	bfc8      	it	gt
  4032e8:	eef0 7a66 	vmovgt.f32	s15, s13
  4032ec:	eef4 7ac7 	vcmpe.f32	s15, s14
  4032f0:	f100 38ff 	add.w	r8, r0, #4294967295
  4032f4:	bfc8      	it	gt
  4032f6:	4645      	movgt	r5, r8
  4032f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4032fc:	bfc8      	it	gt
  4032fe:	4605      	movgt	r5, r0
  403300:	bfc8      	it	gt
  403302:	eef0 7a47 	vmovgt.f32	s15, s14
  403306:	3e01      	subs	r6, #1
  403308:	f104 0410 	add.w	r4, r4, #16
  40330c:	f100 0004 	add.w	r0, r0, #4
  403310:	d1c7      	bne.n	4032a2 <arm_min_f32+0x1e>
  403312:	eb07 1709 	add.w	r7, r7, r9, lsl #4
  403316:	f01c 0c03 	ands.w	ip, ip, #3
  40331a:	d01d      	beq.n	403358 <arm_min_f32+0xd4>
  40331c:	ebcc 0101 	rsb	r1, ip, r1
  403320:	2000      	movs	r0, #0
  403322:	ecb7 7a01 	vldmia	r7!, {s14}
  403326:	eeb4 7ae7 	vcmpe.f32	s14, s15
  40332a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40332e:	bf48      	it	mi
  403330:	eef0 7a47 	vmovmi.f32	s15, s14
  403334:	eb01 0400 	add.w	r4, r1, r0
  403338:	f100 0001 	add.w	r0, r0, #1
  40333c:	bf48      	it	mi
  40333e:	4625      	movmi	r5, r4
  403340:	4560      	cmp	r0, ip
  403342:	eeb0 7a67 	vmov.f32	s14, s15
  403346:	d1ec      	bne.n	403322 <arm_min_f32+0x9e>
  403348:	ed82 7a00 	vstr	s14, [r2]
  40334c:	601d      	str	r5, [r3, #0]
  40334e:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
  403352:	4770      	bx	lr
  403354:	464d      	mov	r5, r9
  403356:	e7de      	b.n	403316 <arm_min_f32+0x92>
  403358:	eeb0 7a67 	vmov.f32	s14, s15
  40335c:	e7f4      	b.n	403348 <arm_min_f32+0xc4>
  40335e:	bf00      	nop

00403360 <arm_max_f32>:
  403360:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  403364:	f101 3cff 	add.w	ip, r1, #4294967295
  403368:	ea5f 099c 	movs.w	r9, ip, lsr #2
  40336c:	f100 0704 	add.w	r7, r0, #4
  403370:	edd0 7a00 	vldr	s15, [r0]
  403374:	d05c      	beq.n	403430 <arm_max_f32+0xd0>
  403376:	463c      	mov	r4, r7
  403378:	464e      	mov	r6, r9
  40337a:	2004      	movs	r0, #4
  40337c:	2500      	movs	r5, #0
  40337e:	edd4 6a00 	vldr	s13, [r4]
  403382:	eef4 6ae7 	vcmpe.f32	s13, s15
  403386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40338a:	ed94 7a01 	vldr	s14, [r4, #4]
  40338e:	bfc8      	it	gt
  403390:	eef0 7a66 	vmovgt.f32	s15, s13
  403394:	eef4 7ac7 	vcmpe.f32	s15, s14
  403398:	f1a0 0803 	sub.w	r8, r0, #3
  40339c:	bfc8      	it	gt
  40339e:	4645      	movgt	r5, r8
  4033a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4033a4:	edd4 6a02 	vldr	s13, [r4, #8]
  4033a8:	bf48      	it	mi
  4033aa:	eef0 7a47 	vmovmi.f32	s15, s14
  4033ae:	eef4 7ae6 	vcmpe.f32	s15, s13
  4033b2:	f1a0 0802 	sub.w	r8, r0, #2
  4033b6:	bf48      	it	mi
  4033b8:	4645      	movmi	r5, r8
  4033ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4033be:	ed94 7a03 	vldr	s14, [r4, #12]
  4033c2:	bf48      	it	mi
  4033c4:	eef0 7a66 	vmovmi.f32	s15, s13
  4033c8:	eef4 7ac7 	vcmpe.f32	s15, s14
  4033cc:	f100 38ff 	add.w	r8, r0, #4294967295
  4033d0:	bf48      	it	mi
  4033d2:	4645      	movmi	r5, r8
  4033d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4033d8:	bf48      	it	mi
  4033da:	4605      	movmi	r5, r0
  4033dc:	bf48      	it	mi
  4033de:	eef0 7a47 	vmovmi.f32	s15, s14
  4033e2:	3e01      	subs	r6, #1
  4033e4:	f104 0410 	add.w	r4, r4, #16
  4033e8:	f100 0004 	add.w	r0, r0, #4
  4033ec:	d1c7      	bne.n	40337e <arm_max_f32+0x1e>
  4033ee:	eb07 1709 	add.w	r7, r7, r9, lsl #4
  4033f2:	f01c 0c03 	ands.w	ip, ip, #3
  4033f6:	d01d      	beq.n	403434 <arm_max_f32+0xd4>
  4033f8:	ebcc 0101 	rsb	r1, ip, r1
  4033fc:	2000      	movs	r0, #0
  4033fe:	ecb7 7a01 	vldmia	r7!, {s14}
  403402:	eeb4 7ae7 	vcmpe.f32	s14, s15
  403406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40340a:	bfc8      	it	gt
  40340c:	eef0 7a47 	vmovgt.f32	s15, s14
  403410:	eb01 0400 	add.w	r4, r1, r0
  403414:	f100 0001 	add.w	r0, r0, #1
  403418:	bfc8      	it	gt
  40341a:	4625      	movgt	r5, r4
  40341c:	4560      	cmp	r0, ip
  40341e:	eeb0 7a67 	vmov.f32	s14, s15
  403422:	d1ec      	bne.n	4033fe <arm_max_f32+0x9e>
  403424:	ed82 7a00 	vstr	s14, [r2]
  403428:	601d      	str	r5, [r3, #0]
  40342a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
  40342e:	4770      	bx	lr
  403430:	464d      	mov	r5, r9
  403432:	e7de      	b.n	4033f2 <arm_max_f32+0x92>
  403434:	eeb0 7a67 	vmov.f32	s14, s15
  403438:	e7f4      	b.n	403424 <arm_max_f32+0xc4>
  40343a:	bf00      	nop

0040343c <arm_cos_f32>:
  40343c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 4034b8 <arm_cos_f32+0x7c>
  403440:	ee06 0a90 	vmov	s13, r0
  403444:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
  403448:	ee66 7aa7 	vmul.f32	s15, s13, s15
  40344c:	ee77 7a87 	vadd.f32	s15, s15, s14
  403450:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  403454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403458:	eebd 7ae7 	vcvt.s32.f32	s14, s15
  40345c:	d504      	bpl.n	403468 <arm_cos_f32+0x2c>
  40345e:	ee17 3a10 	vmov	r3, s14
  403462:	3b01      	subs	r3, #1
  403464:	ee07 3a10 	vmov	s14, r3
  403468:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  40346c:	eddf 6a13 	vldr	s13, [pc, #76]	; 4034bc <arm_cos_f32+0x80>
  403470:	ee77 7ac7 	vsub.f32	s15, s15, s14
  403474:	ee67 7aa6 	vmul.f32	s15, s15, s13
  403478:	eefc 6ae7 	vcvt.u32.f32	s13, s15
  40347c:	ee16 3a90 	vmov	r3, s13
  403480:	f3c3 0308 	ubfx	r3, r3, #0, #9
  403484:	ee07 3a10 	vmov	s14, r3
  403488:	eef8 6a47 	vcvt.f32.u32	s13, s14
  40348c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  403490:	ee77 7ae6 	vsub.f32	s15, s15, s13
  403494:	4a0a      	ldr	r2, [pc, #40]	; (4034c0 <arm_cos_f32+0x84>)
  403496:	ee37 7a67 	vsub.f32	s14, s14, s15
  40349a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
  40349e:	ed91 6a00 	vldr	s12, [r1]
  4034a2:	edd1 6a01 	vldr	s13, [r1, #4]
  4034a6:	ee27 7a06 	vmul.f32	s14, s14, s12
  4034aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
  4034ae:	ee77 7a27 	vadd.f32	s15, s14, s15
  4034b2:	ee17 0a90 	vmov	r0, s15
  4034b6:	4770      	bx	lr
  4034b8:	3e22f983 	.word	0x3e22f983
  4034bc:	44000000 	.word	0x44000000
  4034c0:	004073b8 	.word	0x004073b8

004034c4 <arm_scale_f32>:
  4034c4:	b470      	push	{r4, r5, r6}
  4034c6:	089e      	lsrs	r6, r3, #2
  4034c8:	ee07 1a90 	vmov	s15, r1
  4034cc:	d023      	beq.n	403516 <arm_scale_f32+0x52>
  4034ce:	4635      	mov	r5, r6
  4034d0:	4614      	mov	r4, r2
  4034d2:	4601      	mov	r1, r0
  4034d4:	edd1 5a00 	vldr	s11, [r1]
  4034d8:	ed91 6a01 	vldr	s12, [r1, #4]
  4034dc:	edd1 6a02 	vldr	s13, [r1, #8]
  4034e0:	ed91 7a03 	vldr	s14, [r1, #12]
  4034e4:	ee65 5aa7 	vmul.f32	s11, s11, s15
  4034e8:	ee26 6a27 	vmul.f32	s12, s12, s15
  4034ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
  4034f0:	ee27 7a27 	vmul.f32	s14, s14, s15
  4034f4:	3d01      	subs	r5, #1
  4034f6:	edc4 5a00 	vstr	s11, [r4]
  4034fa:	ed84 6a01 	vstr	s12, [r4, #4]
  4034fe:	edc4 6a02 	vstr	s13, [r4, #8]
  403502:	ed84 7a03 	vstr	s14, [r4, #12]
  403506:	f101 0110 	add.w	r1, r1, #16
  40350a:	f104 0410 	add.w	r4, r4, #16
  40350e:	d1e1      	bne.n	4034d4 <arm_scale_f32+0x10>
  403510:	0136      	lsls	r6, r6, #4
  403512:	4430      	add	r0, r6
  403514:	4432      	add	r2, r6
  403516:	f013 0303 	ands.w	r3, r3, #3
  40351a:	d007      	beq.n	40352c <arm_scale_f32+0x68>
  40351c:	ecb0 7a01 	vldmia	r0!, {s14}
  403520:	ee27 7a27 	vmul.f32	s14, s14, s15
  403524:	3b01      	subs	r3, #1
  403526:	eca2 7a01 	vstmia	r2!, {s14}
  40352a:	d1f7      	bne.n	40351c <arm_scale_f32+0x58>
  40352c:	bc70      	pop	{r4, r5, r6}
  40352e:	4770      	bx	lr

00403530 <log>:
  403530:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403534:	b08b      	sub	sp, #44	; 0x2c
  403536:	4604      	mov	r4, r0
  403538:	460d      	mov	r5, r1
  40353a:	f000 f879 	bl	403630 <__ieee754_log>
  40353e:	4b37      	ldr	r3, [pc, #220]	; (40361c <log+0xec>)
  403540:	f993 6000 	ldrsb.w	r6, [r3]
  403544:	1c73      	adds	r3, r6, #1
  403546:	4680      	mov	r8, r0
  403548:	4689      	mov	r9, r1
  40354a:	d00d      	beq.n	403568 <log+0x38>
  40354c:	4622      	mov	r2, r4
  40354e:	462b      	mov	r3, r5
  403550:	4620      	mov	r0, r4
  403552:	4629      	mov	r1, r5
  403554:	f000 feba 	bl	4042cc <__aeabi_dcmpun>
  403558:	b930      	cbnz	r0, 403568 <log+0x38>
  40355a:	2200      	movs	r2, #0
  40355c:	2300      	movs	r3, #0
  40355e:	4620      	mov	r0, r4
  403560:	4629      	mov	r1, r5
  403562:	f000 fea9 	bl	4042b8 <__aeabi_dcmpgt>
  403566:	b120      	cbz	r0, 403572 <log+0x42>
  403568:	4640      	mov	r0, r8
  40356a:	4649      	mov	r1, r9
  40356c:	b00b      	add	sp, #44	; 0x2c
  40356e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403572:	4b2b      	ldr	r3, [pc, #172]	; (403620 <log+0xf0>)
  403574:	9008      	str	r0, [sp, #32]
  403576:	e9cd 4502 	strd	r4, r5, [sp, #8]
  40357a:	e9cd 4504 	strd	r4, r5, [sp, #16]
  40357e:	9301      	str	r3, [sp, #4]
  403580:	b9de      	cbnz	r6, 4035ba <log+0x8a>
  403582:	4f28      	ldr	r7, [pc, #160]	; (403624 <log+0xf4>)
  403584:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
  403588:	4620      	mov	r0, r4
  40358a:	4629      	mov	r1, r5
  40358c:	2200      	movs	r2, #0
  40358e:	2300      	movs	r3, #0
  403590:	e9cd 6706 	strd	r6, r7, [sp, #24]
  403594:	f000 fe68 	bl	404268 <__aeabi_dcmpeq>
  403598:	2800      	cmp	r0, #0
  40359a:	d037      	beq.n	40360c <log+0xdc>
  40359c:	2302      	movs	r3, #2
  40359e:	9300      	str	r3, [sp, #0]
  4035a0:	4668      	mov	r0, sp
  4035a2:	f000 fa39 	bl	403a18 <matherr>
  4035a6:	b1c8      	cbz	r0, 4035dc <log+0xac>
  4035a8:	9b08      	ldr	r3, [sp, #32]
  4035aa:	b9e3      	cbnz	r3, 4035e6 <log+0xb6>
  4035ac:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  4035b0:	4640      	mov	r0, r8
  4035b2:	4649      	mov	r1, r9
  4035b4:	b00b      	add	sp, #44	; 0x2c
  4035b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4035ba:	f8df 9070 	ldr.w	r9, [pc, #112]	; 40362c <log+0xfc>
  4035be:	f04f 0800 	mov.w	r8, #0
  4035c2:	4620      	mov	r0, r4
  4035c4:	4629      	mov	r1, r5
  4035c6:	2200      	movs	r2, #0
  4035c8:	2300      	movs	r3, #0
  4035ca:	e9cd 8906 	strd	r8, r9, [sp, #24]
  4035ce:	f000 fe4b 	bl	404268 <__aeabi_dcmpeq>
  4035d2:	b168      	cbz	r0, 4035f0 <log+0xc0>
  4035d4:	2302      	movs	r3, #2
  4035d6:	429e      	cmp	r6, r3
  4035d8:	9300      	str	r3, [sp, #0]
  4035da:	d1e1      	bne.n	4035a0 <log+0x70>
  4035dc:	f000 fedc 	bl	404398 <__errno>
  4035e0:	2322      	movs	r3, #34	; 0x22
  4035e2:	6003      	str	r3, [r0, #0]
  4035e4:	e7e0      	b.n	4035a8 <log+0x78>
  4035e6:	f000 fed7 	bl	404398 <__errno>
  4035ea:	9b08      	ldr	r3, [sp, #32]
  4035ec:	6003      	str	r3, [r0, #0]
  4035ee:	e7dd      	b.n	4035ac <log+0x7c>
  4035f0:	2301      	movs	r3, #1
  4035f2:	2e02      	cmp	r6, #2
  4035f4:	9300      	str	r3, [sp, #0]
  4035f6:	d10b      	bne.n	403610 <log+0xe0>
  4035f8:	f000 fece 	bl	404398 <__errno>
  4035fc:	2321      	movs	r3, #33	; 0x21
  4035fe:	6003      	str	r3, [r0, #0]
  403600:	4809      	ldr	r0, [pc, #36]	; (403628 <log+0xf8>)
  403602:	f000 fa0b 	bl	403a1c <nan>
  403606:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40360a:	e7cd      	b.n	4035a8 <log+0x78>
  40360c:	2301      	movs	r3, #1
  40360e:	9300      	str	r3, [sp, #0]
  403610:	4668      	mov	r0, sp
  403612:	f000 fa01 	bl	403a18 <matherr>
  403616:	2800      	cmp	r0, #0
  403618:	d1f2      	bne.n	403600 <log+0xd0>
  40361a:	e7ed      	b.n	4035f8 <log+0xc8>
  40361c:	20400054 	.word	0x20400054
  403620:	00407bbc 	.word	0x00407bbc
  403624:	c7efffff 	.word	0xc7efffff
  403628:	00407bd4 	.word	0x00407bd4
  40362c:	fff00000 	.word	0xfff00000

00403630 <__ieee754_log>:
  403630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403634:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  403638:	b085      	sub	sp, #20
  40363a:	4606      	mov	r6, r0
  40363c:	460f      	mov	r7, r1
  40363e:	460b      	mov	r3, r1
  403640:	da5a      	bge.n	4036f8 <__ieee754_log+0xc8>
  403642:	4602      	mov	r2, r0
  403644:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
  403648:	4322      	orrs	r2, r4
  40364a:	f000 80f8 	beq.w	40383e <__ieee754_log+0x20e>
  40364e:	2900      	cmp	r1, #0
  403650:	f2c0 817a 	blt.w	403948 <__ieee754_log+0x318>
  403654:	2200      	movs	r2, #0
  403656:	4bd6      	ldr	r3, [pc, #856]	; (4039b0 <__ieee754_log+0x380>)
  403658:	f000 fb9e 	bl	403d98 <__aeabi_dmul>
  40365c:	4ad5      	ldr	r2, [pc, #852]	; (4039b4 <__ieee754_log+0x384>)
  40365e:	460b      	mov	r3, r1
  403660:	4293      	cmp	r3, r2
  403662:	4606      	mov	r6, r0
  403664:	460f      	mov	r7, r1
  403666:	f06f 0c35 	mvn.w	ip, #53	; 0x35
  40366a:	dc4a      	bgt.n	403702 <__ieee754_log+0xd2>
  40366c:	f3c3 0513 	ubfx	r5, r3, #0, #20
  403670:	f505 2e15 	add.w	lr, r5, #610304	; 0x95000
  403674:	f60e 7e64 	addw	lr, lr, #3940	; 0xf64
  403678:	f40e 1e80 	and.w	lr, lr, #1048576	; 0x100000
  40367c:	f08e 527f 	eor.w	r2, lr, #1069547520	; 0x3fc00000
  403680:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
  403684:	151c      	asrs	r4, r3, #20
  403686:	ea42 0705 	orr.w	r7, r2, r5
  40368a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
  40368e:	4464      	add	r4, ip
  403690:	2200      	movs	r2, #0
  403692:	4bc9      	ldr	r3, [pc, #804]	; (4039b8 <__ieee754_log+0x388>)
  403694:	4630      	mov	r0, r6
  403696:	4639      	mov	r1, r7
  403698:	eb04 541e 	add.w	r4, r4, lr, lsr #20
  40369c:	f000 f9c8 	bl	403a30 <__aeabi_dsub>
  4036a0:	1cab      	adds	r3, r5, #2
  4036a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
  4036a6:	2b02      	cmp	r3, #2
  4036a8:	4682      	mov	sl, r0
  4036aa:	468b      	mov	fp, r1
  4036ac:	f04f 0200 	mov.w	r2, #0
  4036b0:	dc30      	bgt.n	403714 <__ieee754_log+0xe4>
  4036b2:	2300      	movs	r3, #0
  4036b4:	f000 fdd8 	bl	404268 <__aeabi_dcmpeq>
  4036b8:	2800      	cmp	r0, #0
  4036ba:	f000 80c9 	beq.w	403850 <__ieee754_log+0x220>
  4036be:	2c00      	cmp	r4, #0
  4036c0:	f000 814b 	beq.w	40395a <__ieee754_log+0x32a>
  4036c4:	4620      	mov	r0, r4
  4036c6:	f000 fb01 	bl	403ccc <__aeabi_i2d>
  4036ca:	a3a5      	add	r3, pc, #660	; (adr r3, 403960 <__ieee754_log+0x330>)
  4036cc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4036d0:	4606      	mov	r6, r0
  4036d2:	460f      	mov	r7, r1
  4036d4:	f000 fb60 	bl	403d98 <__aeabi_dmul>
  4036d8:	a3a3      	add	r3, pc, #652	; (adr r3, 403968 <__ieee754_log+0x338>)
  4036da:	e9d3 2300 	ldrd	r2, r3, [r3]
  4036de:	4604      	mov	r4, r0
  4036e0:	460d      	mov	r5, r1
  4036e2:	4630      	mov	r0, r6
  4036e4:	4639      	mov	r1, r7
  4036e6:	f000 fb57 	bl	403d98 <__aeabi_dmul>
  4036ea:	4602      	mov	r2, r0
  4036ec:	460b      	mov	r3, r1
  4036ee:	4620      	mov	r0, r4
  4036f0:	4629      	mov	r1, r5
  4036f2:	f000 f99f 	bl	403a34 <__adddf3>
  4036f6:	e00a      	b.n	40370e <__ieee754_log+0xde>
  4036f8:	4aae      	ldr	r2, [pc, #696]	; (4039b4 <__ieee754_log+0x384>)
  4036fa:	4293      	cmp	r3, r2
  4036fc:	f04f 0c00 	mov.w	ip, #0
  403700:	ddb4      	ble.n	40366c <__ieee754_log+0x3c>
  403702:	4632      	mov	r2, r6
  403704:	463b      	mov	r3, r7
  403706:	4630      	mov	r0, r6
  403708:	4639      	mov	r1, r7
  40370a:	f000 f993 	bl	403a34 <__adddf3>
  40370e:	b005      	add	sp, #20
  403710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403714:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403718:	f000 f98c 	bl	403a34 <__adddf3>
  40371c:	4602      	mov	r2, r0
  40371e:	460b      	mov	r3, r1
  403720:	4650      	mov	r0, sl
  403722:	4659      	mov	r1, fp
  403724:	f000 fc62 	bl	403fec <__aeabi_ddiv>
  403728:	4606      	mov	r6, r0
  40372a:	4620      	mov	r0, r4
  40372c:	460f      	mov	r7, r1
  40372e:	f000 facd 	bl	403ccc <__aeabi_i2d>
  403732:	4632      	mov	r2, r6
  403734:	e9cd 0100 	strd	r0, r1, [sp]
  403738:	463b      	mov	r3, r7
  40373a:	4630      	mov	r0, r6
  40373c:	4639      	mov	r1, r7
  40373e:	e9cd 6702 	strd	r6, r7, [sp, #8]
  403742:	f000 fb29 	bl	403d98 <__aeabi_dmul>
  403746:	4602      	mov	r2, r0
  403748:	460b      	mov	r3, r1
  40374a:	4680      	mov	r8, r0
  40374c:	4689      	mov	r9, r1
  40374e:	f000 fb23 	bl	403d98 <__aeabi_dmul>
  403752:	a387      	add	r3, pc, #540	; (adr r3, 403970 <__ieee754_log+0x340>)
  403754:	e9d3 2300 	ldrd	r2, r3, [r3]
  403758:	4606      	mov	r6, r0
  40375a:	460f      	mov	r7, r1
  40375c:	f000 fb1c 	bl	403d98 <__aeabi_dmul>
  403760:	a385      	add	r3, pc, #532	; (adr r3, 403978 <__ieee754_log+0x348>)
  403762:	e9d3 2300 	ldrd	r2, r3, [r3]
  403766:	f000 f965 	bl	403a34 <__adddf3>
  40376a:	4632      	mov	r2, r6
  40376c:	463b      	mov	r3, r7
  40376e:	f000 fb13 	bl	403d98 <__aeabi_dmul>
  403772:	a383      	add	r3, pc, #524	; (adr r3, 403980 <__ieee754_log+0x350>)
  403774:	e9d3 2300 	ldrd	r2, r3, [r3]
  403778:	f000 f95c 	bl	403a34 <__adddf3>
  40377c:	4632      	mov	r2, r6
  40377e:	463b      	mov	r3, r7
  403780:	f000 fb0a 	bl	403d98 <__aeabi_dmul>
  403784:	a380      	add	r3, pc, #512	; (adr r3, 403988 <__ieee754_log+0x358>)
  403786:	e9d3 2300 	ldrd	r2, r3, [r3]
  40378a:	f000 f953 	bl	403a34 <__adddf3>
  40378e:	4642      	mov	r2, r8
  403790:	464b      	mov	r3, r9
  403792:	f000 fb01 	bl	403d98 <__aeabi_dmul>
  403796:	a37e      	add	r3, pc, #504	; (adr r3, 403990 <__ieee754_log+0x360>)
  403798:	e9d3 2300 	ldrd	r2, r3, [r3]
  40379c:	4680      	mov	r8, r0
  40379e:	4689      	mov	r9, r1
  4037a0:	4630      	mov	r0, r6
  4037a2:	4639      	mov	r1, r7
  4037a4:	f000 faf8 	bl	403d98 <__aeabi_dmul>
  4037a8:	a37b      	add	r3, pc, #492	; (adr r3, 403998 <__ieee754_log+0x368>)
  4037aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4037ae:	f000 f941 	bl	403a34 <__adddf3>
  4037b2:	4632      	mov	r2, r6
  4037b4:	463b      	mov	r3, r7
  4037b6:	f000 faef 	bl	403d98 <__aeabi_dmul>
  4037ba:	a379      	add	r3, pc, #484	; (adr r3, 4039a0 <__ieee754_log+0x370>)
  4037bc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4037c0:	f000 f938 	bl	403a34 <__adddf3>
  4037c4:	4632      	mov	r2, r6
  4037c6:	463b      	mov	r3, r7
  4037c8:	f000 fae6 	bl	403d98 <__aeabi_dmul>
  4037cc:	460b      	mov	r3, r1
  4037ce:	4602      	mov	r2, r0
  4037d0:	4649      	mov	r1, r9
  4037d2:	4640      	mov	r0, r8
  4037d4:	f000 f92e 	bl	403a34 <__adddf3>
  4037d8:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
  4037dc:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
  4037e0:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
  4037e4:	3551      	adds	r5, #81	; 0x51
  4037e6:	431d      	orrs	r5, r3
  4037e8:	2d00      	cmp	r5, #0
  4037ea:	4680      	mov	r8, r0
  4037ec:	4689      	mov	r9, r1
  4037ee:	dd56      	ble.n	40389e <__ieee754_log+0x26e>
  4037f0:	2200      	movs	r2, #0
  4037f2:	4b72      	ldr	r3, [pc, #456]	; (4039bc <__ieee754_log+0x38c>)
  4037f4:	4650      	mov	r0, sl
  4037f6:	4659      	mov	r1, fp
  4037f8:	f000 face 	bl	403d98 <__aeabi_dmul>
  4037fc:	4652      	mov	r2, sl
  4037fe:	465b      	mov	r3, fp
  403800:	f000 faca 	bl	403d98 <__aeabi_dmul>
  403804:	4606      	mov	r6, r0
  403806:	460f      	mov	r7, r1
  403808:	2c00      	cmp	r4, #0
  40380a:	d168      	bne.n	4038de <__ieee754_log+0x2ae>
  40380c:	4632      	mov	r2, r6
  40380e:	463b      	mov	r3, r7
  403810:	4640      	mov	r0, r8
  403812:	4649      	mov	r1, r9
  403814:	f000 f90e 	bl	403a34 <__adddf3>
  403818:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40381c:	f000 fabc 	bl	403d98 <__aeabi_dmul>
  403820:	4602      	mov	r2, r0
  403822:	460b      	mov	r3, r1
  403824:	4630      	mov	r0, r6
  403826:	4639      	mov	r1, r7
  403828:	f000 f902 	bl	403a30 <__aeabi_dsub>
  40382c:	4602      	mov	r2, r0
  40382e:	460b      	mov	r3, r1
  403830:	4650      	mov	r0, sl
  403832:	4659      	mov	r1, fp
  403834:	f000 f8fc 	bl	403a30 <__aeabi_dsub>
  403838:	b005      	add	sp, #20
  40383a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40383e:	2200      	movs	r2, #0
  403840:	2300      	movs	r3, #0
  403842:	2000      	movs	r0, #0
  403844:	495e      	ldr	r1, [pc, #376]	; (4039c0 <__ieee754_log+0x390>)
  403846:	f000 fbd1 	bl	403fec <__aeabi_ddiv>
  40384a:	b005      	add	sp, #20
  40384c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403850:	a355      	add	r3, pc, #340	; (adr r3, 4039a8 <__ieee754_log+0x378>)
  403852:	e9d3 2300 	ldrd	r2, r3, [r3]
  403856:	4650      	mov	r0, sl
  403858:	4659      	mov	r1, fp
  40385a:	f000 fa9d 	bl	403d98 <__aeabi_dmul>
  40385e:	4602      	mov	r2, r0
  403860:	460b      	mov	r3, r1
  403862:	2000      	movs	r0, #0
  403864:	4955      	ldr	r1, [pc, #340]	; (4039bc <__ieee754_log+0x38c>)
  403866:	f000 f8e3 	bl	403a30 <__aeabi_dsub>
  40386a:	4652      	mov	r2, sl
  40386c:	4606      	mov	r6, r0
  40386e:	460f      	mov	r7, r1
  403870:	465b      	mov	r3, fp
  403872:	4650      	mov	r0, sl
  403874:	4659      	mov	r1, fp
  403876:	f000 fa8f 	bl	403d98 <__aeabi_dmul>
  40387a:	4602      	mov	r2, r0
  40387c:	460b      	mov	r3, r1
  40387e:	4630      	mov	r0, r6
  403880:	4639      	mov	r1, r7
  403882:	f000 fa89 	bl	403d98 <__aeabi_dmul>
  403886:	4606      	mov	r6, r0
  403888:	460f      	mov	r7, r1
  40388a:	2c00      	cmp	r4, #0
  40388c:	f040 809a 	bne.w	4039c4 <__ieee754_log+0x394>
  403890:	4602      	mov	r2, r0
  403892:	460b      	mov	r3, r1
  403894:	4650      	mov	r0, sl
  403896:	4659      	mov	r1, fp
  403898:	f000 f8ca 	bl	403a30 <__aeabi_dsub>
  40389c:	e737      	b.n	40370e <__ieee754_log+0xde>
  40389e:	2c00      	cmp	r4, #0
  4038a0:	f000 80a4 	beq.w	4039ec <__ieee754_log+0x3bc>
  4038a4:	a32e      	add	r3, pc, #184	; (adr r3, 403960 <__ieee754_log+0x330>)
  4038a6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4038aa:	e9dd 0100 	ldrd	r0, r1, [sp]
  4038ae:	f000 fa73 	bl	403d98 <__aeabi_dmul>
  4038b2:	4642      	mov	r2, r8
  4038b4:	464b      	mov	r3, r9
  4038b6:	4604      	mov	r4, r0
  4038b8:	460d      	mov	r5, r1
  4038ba:	4650      	mov	r0, sl
  4038bc:	4659      	mov	r1, fp
  4038be:	f000 f8b7 	bl	403a30 <__aeabi_dsub>
  4038c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4038c6:	f000 fa67 	bl	403d98 <__aeabi_dmul>
  4038ca:	a327      	add	r3, pc, #156	; (adr r3, 403968 <__ieee754_log+0x338>)
  4038cc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4038d0:	4606      	mov	r6, r0
  4038d2:	460f      	mov	r7, r1
  4038d4:	e9dd 0100 	ldrd	r0, r1, [sp]
  4038d8:	f000 fa5e 	bl	403d98 <__aeabi_dmul>
  4038dc:	e021      	b.n	403922 <__ieee754_log+0x2f2>
  4038de:	a320      	add	r3, pc, #128	; (adr r3, 403960 <__ieee754_log+0x330>)
  4038e0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4038e4:	e9dd 0100 	ldrd	r0, r1, [sp]
  4038e8:	f000 fa56 	bl	403d98 <__aeabi_dmul>
  4038ec:	4632      	mov	r2, r6
  4038ee:	463b      	mov	r3, r7
  4038f0:	4604      	mov	r4, r0
  4038f2:	460d      	mov	r5, r1
  4038f4:	4640      	mov	r0, r8
  4038f6:	4649      	mov	r1, r9
  4038f8:	f000 f89c 	bl	403a34 <__adddf3>
  4038fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403900:	f000 fa4a 	bl	403d98 <__aeabi_dmul>
  403904:	a318      	add	r3, pc, #96	; (adr r3, 403968 <__ieee754_log+0x338>)
  403906:	e9d3 2300 	ldrd	r2, r3, [r3]
  40390a:	4680      	mov	r8, r0
  40390c:	4689      	mov	r9, r1
  40390e:	e9dd 0100 	ldrd	r0, r1, [sp]
  403912:	f000 fa41 	bl	403d98 <__aeabi_dmul>
  403916:	4602      	mov	r2, r0
  403918:	460b      	mov	r3, r1
  40391a:	4640      	mov	r0, r8
  40391c:	4649      	mov	r1, r9
  40391e:	f000 f889 	bl	403a34 <__adddf3>
  403922:	4602      	mov	r2, r0
  403924:	460b      	mov	r3, r1
  403926:	4630      	mov	r0, r6
  403928:	4639      	mov	r1, r7
  40392a:	f000 f881 	bl	403a30 <__aeabi_dsub>
  40392e:	4652      	mov	r2, sl
  403930:	465b      	mov	r3, fp
  403932:	f000 f87d 	bl	403a30 <__aeabi_dsub>
  403936:	4602      	mov	r2, r0
  403938:	460b      	mov	r3, r1
  40393a:	4620      	mov	r0, r4
  40393c:	4629      	mov	r1, r5
  40393e:	f000 f877 	bl	403a30 <__aeabi_dsub>
  403942:	b005      	add	sp, #20
  403944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403948:	4602      	mov	r2, r0
  40394a:	460b      	mov	r3, r1
  40394c:	f000 f870 	bl	403a30 <__aeabi_dsub>
  403950:	2200      	movs	r2, #0
  403952:	2300      	movs	r3, #0
  403954:	f000 fb4a 	bl	403fec <__aeabi_ddiv>
  403958:	e6d9      	b.n	40370e <__ieee754_log+0xde>
  40395a:	2000      	movs	r0, #0
  40395c:	2100      	movs	r1, #0
  40395e:	e6d6      	b.n	40370e <__ieee754_log+0xde>
  403960:	fee00000 	.word	0xfee00000
  403964:	3fe62e42 	.word	0x3fe62e42
  403968:	35793c76 	.word	0x35793c76
  40396c:	3dea39ef 	.word	0x3dea39ef
  403970:	df3e5244 	.word	0xdf3e5244
  403974:	3fc2f112 	.word	0x3fc2f112
  403978:	96cb03de 	.word	0x96cb03de
  40397c:	3fc74664 	.word	0x3fc74664
  403980:	94229359 	.word	0x94229359
  403984:	3fd24924 	.word	0x3fd24924
  403988:	55555593 	.word	0x55555593
  40398c:	3fe55555 	.word	0x3fe55555
  403990:	d078c69f 	.word	0xd078c69f
  403994:	3fc39a09 	.word	0x3fc39a09
  403998:	1d8e78af 	.word	0x1d8e78af
  40399c:	3fcc71c5 	.word	0x3fcc71c5
  4039a0:	9997fa04 	.word	0x9997fa04
  4039a4:	3fd99999 	.word	0x3fd99999
  4039a8:	55555555 	.word	0x55555555
  4039ac:	3fd55555 	.word	0x3fd55555
  4039b0:	43500000 	.word	0x43500000
  4039b4:	7fefffff 	.word	0x7fefffff
  4039b8:	3ff00000 	.word	0x3ff00000
  4039bc:	3fe00000 	.word	0x3fe00000
  4039c0:	c3500000 	.word	0xc3500000
  4039c4:	4620      	mov	r0, r4
  4039c6:	f000 f981 	bl	403ccc <__aeabi_i2d>
  4039ca:	a30f      	add	r3, pc, #60	; (adr r3, 403a08 <__ieee754_log+0x3d8>)
  4039cc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4039d0:	4680      	mov	r8, r0
  4039d2:	4689      	mov	r9, r1
  4039d4:	f000 f9e0 	bl	403d98 <__aeabi_dmul>
  4039d8:	a30d      	add	r3, pc, #52	; (adr r3, 403a10 <__ieee754_log+0x3e0>)
  4039da:	e9d3 2300 	ldrd	r2, r3, [r3]
  4039de:	4604      	mov	r4, r0
  4039e0:	460d      	mov	r5, r1
  4039e2:	4640      	mov	r0, r8
  4039e4:	4649      	mov	r1, r9
  4039e6:	f000 f9d7 	bl	403d98 <__aeabi_dmul>
  4039ea:	e79a      	b.n	403922 <__ieee754_log+0x2f2>
  4039ec:	4602      	mov	r2, r0
  4039ee:	460b      	mov	r3, r1
  4039f0:	4650      	mov	r0, sl
  4039f2:	4659      	mov	r1, fp
  4039f4:	f000 f81c 	bl	403a30 <__aeabi_dsub>
  4039f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4039fc:	f000 f9cc 	bl	403d98 <__aeabi_dmul>
  403a00:	e714      	b.n	40382c <__ieee754_log+0x1fc>
  403a02:	bf00      	nop
  403a04:	f3af 8000 	nop.w
  403a08:	fee00000 	.word	0xfee00000
  403a0c:	3fe62e42 	.word	0x3fe62e42
  403a10:	35793c76 	.word	0x35793c76
  403a14:	3dea39ef 	.word	0x3dea39ef

00403a18 <matherr>:
  403a18:	2000      	movs	r0, #0
  403a1a:	4770      	bx	lr

00403a1c <nan>:
  403a1c:	2000      	movs	r0, #0
  403a1e:	4901      	ldr	r1, [pc, #4]	; (403a24 <nan+0x8>)
  403a20:	4770      	bx	lr
  403a22:	bf00      	nop
  403a24:	7ff80000 	.word	0x7ff80000

00403a28 <__aeabi_drsub>:
  403a28:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  403a2c:	e002      	b.n	403a34 <__adddf3>
  403a2e:	bf00      	nop

00403a30 <__aeabi_dsub>:
  403a30:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00403a34 <__adddf3>:
  403a34:	b530      	push	{r4, r5, lr}
  403a36:	ea4f 0441 	mov.w	r4, r1, lsl #1
  403a3a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  403a3e:	ea94 0f05 	teq	r4, r5
  403a42:	bf08      	it	eq
  403a44:	ea90 0f02 	teqeq	r0, r2
  403a48:	bf1f      	itttt	ne
  403a4a:	ea54 0c00 	orrsne.w	ip, r4, r0
  403a4e:	ea55 0c02 	orrsne.w	ip, r5, r2
  403a52:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  403a56:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403a5a:	f000 80e2 	beq.w	403c22 <__adddf3+0x1ee>
  403a5e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  403a62:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  403a66:	bfb8      	it	lt
  403a68:	426d      	neglt	r5, r5
  403a6a:	dd0c      	ble.n	403a86 <__adddf3+0x52>
  403a6c:	442c      	add	r4, r5
  403a6e:	ea80 0202 	eor.w	r2, r0, r2
  403a72:	ea81 0303 	eor.w	r3, r1, r3
  403a76:	ea82 0000 	eor.w	r0, r2, r0
  403a7a:	ea83 0101 	eor.w	r1, r3, r1
  403a7e:	ea80 0202 	eor.w	r2, r0, r2
  403a82:	ea81 0303 	eor.w	r3, r1, r3
  403a86:	2d36      	cmp	r5, #54	; 0x36
  403a88:	bf88      	it	hi
  403a8a:	bd30      	pophi	{r4, r5, pc}
  403a8c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  403a90:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403a94:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  403a98:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  403a9c:	d002      	beq.n	403aa4 <__adddf3+0x70>
  403a9e:	4240      	negs	r0, r0
  403aa0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403aa4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  403aa8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403aac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  403ab0:	d002      	beq.n	403ab8 <__adddf3+0x84>
  403ab2:	4252      	negs	r2, r2
  403ab4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  403ab8:	ea94 0f05 	teq	r4, r5
  403abc:	f000 80a7 	beq.w	403c0e <__adddf3+0x1da>
  403ac0:	f1a4 0401 	sub.w	r4, r4, #1
  403ac4:	f1d5 0e20 	rsbs	lr, r5, #32
  403ac8:	db0d      	blt.n	403ae6 <__adddf3+0xb2>
  403aca:	fa02 fc0e 	lsl.w	ip, r2, lr
  403ace:	fa22 f205 	lsr.w	r2, r2, r5
  403ad2:	1880      	adds	r0, r0, r2
  403ad4:	f141 0100 	adc.w	r1, r1, #0
  403ad8:	fa03 f20e 	lsl.w	r2, r3, lr
  403adc:	1880      	adds	r0, r0, r2
  403ade:	fa43 f305 	asr.w	r3, r3, r5
  403ae2:	4159      	adcs	r1, r3
  403ae4:	e00e      	b.n	403b04 <__adddf3+0xd0>
  403ae6:	f1a5 0520 	sub.w	r5, r5, #32
  403aea:	f10e 0e20 	add.w	lr, lr, #32
  403aee:	2a01      	cmp	r2, #1
  403af0:	fa03 fc0e 	lsl.w	ip, r3, lr
  403af4:	bf28      	it	cs
  403af6:	f04c 0c02 	orrcs.w	ip, ip, #2
  403afa:	fa43 f305 	asr.w	r3, r3, r5
  403afe:	18c0      	adds	r0, r0, r3
  403b00:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  403b04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403b08:	d507      	bpl.n	403b1a <__adddf3+0xe6>
  403b0a:	f04f 0e00 	mov.w	lr, #0
  403b0e:	f1dc 0c00 	rsbs	ip, ip, #0
  403b12:	eb7e 0000 	sbcs.w	r0, lr, r0
  403b16:	eb6e 0101 	sbc.w	r1, lr, r1
  403b1a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  403b1e:	d31b      	bcc.n	403b58 <__adddf3+0x124>
  403b20:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  403b24:	d30c      	bcc.n	403b40 <__adddf3+0x10c>
  403b26:	0849      	lsrs	r1, r1, #1
  403b28:	ea5f 0030 	movs.w	r0, r0, rrx
  403b2c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  403b30:	f104 0401 	add.w	r4, r4, #1
  403b34:	ea4f 5244 	mov.w	r2, r4, lsl #21
  403b38:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  403b3c:	f080 809a 	bcs.w	403c74 <__adddf3+0x240>
  403b40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  403b44:	bf08      	it	eq
  403b46:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403b4a:	f150 0000 	adcs.w	r0, r0, #0
  403b4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403b52:	ea41 0105 	orr.w	r1, r1, r5
  403b56:	bd30      	pop	{r4, r5, pc}
  403b58:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  403b5c:	4140      	adcs	r0, r0
  403b5e:	eb41 0101 	adc.w	r1, r1, r1
  403b62:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403b66:	f1a4 0401 	sub.w	r4, r4, #1
  403b6a:	d1e9      	bne.n	403b40 <__adddf3+0x10c>
  403b6c:	f091 0f00 	teq	r1, #0
  403b70:	bf04      	itt	eq
  403b72:	4601      	moveq	r1, r0
  403b74:	2000      	moveq	r0, #0
  403b76:	fab1 f381 	clz	r3, r1
  403b7a:	bf08      	it	eq
  403b7c:	3320      	addeq	r3, #32
  403b7e:	f1a3 030b 	sub.w	r3, r3, #11
  403b82:	f1b3 0220 	subs.w	r2, r3, #32
  403b86:	da0c      	bge.n	403ba2 <__adddf3+0x16e>
  403b88:	320c      	adds	r2, #12
  403b8a:	dd08      	ble.n	403b9e <__adddf3+0x16a>
  403b8c:	f102 0c14 	add.w	ip, r2, #20
  403b90:	f1c2 020c 	rsb	r2, r2, #12
  403b94:	fa01 f00c 	lsl.w	r0, r1, ip
  403b98:	fa21 f102 	lsr.w	r1, r1, r2
  403b9c:	e00c      	b.n	403bb8 <__adddf3+0x184>
  403b9e:	f102 0214 	add.w	r2, r2, #20
  403ba2:	bfd8      	it	le
  403ba4:	f1c2 0c20 	rsble	ip, r2, #32
  403ba8:	fa01 f102 	lsl.w	r1, r1, r2
  403bac:	fa20 fc0c 	lsr.w	ip, r0, ip
  403bb0:	bfdc      	itt	le
  403bb2:	ea41 010c 	orrle.w	r1, r1, ip
  403bb6:	4090      	lslle	r0, r2
  403bb8:	1ae4      	subs	r4, r4, r3
  403bba:	bfa2      	ittt	ge
  403bbc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  403bc0:	4329      	orrge	r1, r5
  403bc2:	bd30      	popge	{r4, r5, pc}
  403bc4:	ea6f 0404 	mvn.w	r4, r4
  403bc8:	3c1f      	subs	r4, #31
  403bca:	da1c      	bge.n	403c06 <__adddf3+0x1d2>
  403bcc:	340c      	adds	r4, #12
  403bce:	dc0e      	bgt.n	403bee <__adddf3+0x1ba>
  403bd0:	f104 0414 	add.w	r4, r4, #20
  403bd4:	f1c4 0220 	rsb	r2, r4, #32
  403bd8:	fa20 f004 	lsr.w	r0, r0, r4
  403bdc:	fa01 f302 	lsl.w	r3, r1, r2
  403be0:	ea40 0003 	orr.w	r0, r0, r3
  403be4:	fa21 f304 	lsr.w	r3, r1, r4
  403be8:	ea45 0103 	orr.w	r1, r5, r3
  403bec:	bd30      	pop	{r4, r5, pc}
  403bee:	f1c4 040c 	rsb	r4, r4, #12
  403bf2:	f1c4 0220 	rsb	r2, r4, #32
  403bf6:	fa20 f002 	lsr.w	r0, r0, r2
  403bfa:	fa01 f304 	lsl.w	r3, r1, r4
  403bfe:	ea40 0003 	orr.w	r0, r0, r3
  403c02:	4629      	mov	r1, r5
  403c04:	bd30      	pop	{r4, r5, pc}
  403c06:	fa21 f004 	lsr.w	r0, r1, r4
  403c0a:	4629      	mov	r1, r5
  403c0c:	bd30      	pop	{r4, r5, pc}
  403c0e:	f094 0f00 	teq	r4, #0
  403c12:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  403c16:	bf06      	itte	eq
  403c18:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  403c1c:	3401      	addeq	r4, #1
  403c1e:	3d01      	subne	r5, #1
  403c20:	e74e      	b.n	403ac0 <__adddf3+0x8c>
  403c22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403c26:	bf18      	it	ne
  403c28:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403c2c:	d029      	beq.n	403c82 <__adddf3+0x24e>
  403c2e:	ea94 0f05 	teq	r4, r5
  403c32:	bf08      	it	eq
  403c34:	ea90 0f02 	teqeq	r0, r2
  403c38:	d005      	beq.n	403c46 <__adddf3+0x212>
  403c3a:	ea54 0c00 	orrs.w	ip, r4, r0
  403c3e:	bf04      	itt	eq
  403c40:	4619      	moveq	r1, r3
  403c42:	4610      	moveq	r0, r2
  403c44:	bd30      	pop	{r4, r5, pc}
  403c46:	ea91 0f03 	teq	r1, r3
  403c4a:	bf1e      	ittt	ne
  403c4c:	2100      	movne	r1, #0
  403c4e:	2000      	movne	r0, #0
  403c50:	bd30      	popne	{r4, r5, pc}
  403c52:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  403c56:	d105      	bne.n	403c64 <__adddf3+0x230>
  403c58:	0040      	lsls	r0, r0, #1
  403c5a:	4149      	adcs	r1, r1
  403c5c:	bf28      	it	cs
  403c5e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  403c62:	bd30      	pop	{r4, r5, pc}
  403c64:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  403c68:	bf3c      	itt	cc
  403c6a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  403c6e:	bd30      	popcc	{r4, r5, pc}
  403c70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403c74:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  403c78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403c7c:	f04f 0000 	mov.w	r0, #0
  403c80:	bd30      	pop	{r4, r5, pc}
  403c82:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403c86:	bf1a      	itte	ne
  403c88:	4619      	movne	r1, r3
  403c8a:	4610      	movne	r0, r2
  403c8c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  403c90:	bf1c      	itt	ne
  403c92:	460b      	movne	r3, r1
  403c94:	4602      	movne	r2, r0
  403c96:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  403c9a:	bf06      	itte	eq
  403c9c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  403ca0:	ea91 0f03 	teqeq	r1, r3
  403ca4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  403ca8:	bd30      	pop	{r4, r5, pc}
  403caa:	bf00      	nop

00403cac <__aeabi_ui2d>:
  403cac:	f090 0f00 	teq	r0, #0
  403cb0:	bf04      	itt	eq
  403cb2:	2100      	moveq	r1, #0
  403cb4:	4770      	bxeq	lr
  403cb6:	b530      	push	{r4, r5, lr}
  403cb8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403cbc:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403cc0:	f04f 0500 	mov.w	r5, #0
  403cc4:	f04f 0100 	mov.w	r1, #0
  403cc8:	e750      	b.n	403b6c <__adddf3+0x138>
  403cca:	bf00      	nop

00403ccc <__aeabi_i2d>:
  403ccc:	f090 0f00 	teq	r0, #0
  403cd0:	bf04      	itt	eq
  403cd2:	2100      	moveq	r1, #0
  403cd4:	4770      	bxeq	lr
  403cd6:	b530      	push	{r4, r5, lr}
  403cd8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403cdc:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403ce0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  403ce4:	bf48      	it	mi
  403ce6:	4240      	negmi	r0, r0
  403ce8:	f04f 0100 	mov.w	r1, #0
  403cec:	e73e      	b.n	403b6c <__adddf3+0x138>
  403cee:	bf00      	nop

00403cf0 <__aeabi_f2d>:
  403cf0:	0042      	lsls	r2, r0, #1
  403cf2:	ea4f 01e2 	mov.w	r1, r2, asr #3
  403cf6:	ea4f 0131 	mov.w	r1, r1, rrx
  403cfa:	ea4f 7002 	mov.w	r0, r2, lsl #28
  403cfe:	bf1f      	itttt	ne
  403d00:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  403d04:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403d08:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  403d0c:	4770      	bxne	lr
  403d0e:	f092 0f00 	teq	r2, #0
  403d12:	bf14      	ite	ne
  403d14:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403d18:	4770      	bxeq	lr
  403d1a:	b530      	push	{r4, r5, lr}
  403d1c:	f44f 7460 	mov.w	r4, #896	; 0x380
  403d20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403d24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403d28:	e720      	b.n	403b6c <__adddf3+0x138>
  403d2a:	bf00      	nop

00403d2c <__aeabi_ul2d>:
  403d2c:	ea50 0201 	orrs.w	r2, r0, r1
  403d30:	bf08      	it	eq
  403d32:	4770      	bxeq	lr
  403d34:	b530      	push	{r4, r5, lr}
  403d36:	f04f 0500 	mov.w	r5, #0
  403d3a:	e00a      	b.n	403d52 <__aeabi_l2d+0x16>

00403d3c <__aeabi_l2d>:
  403d3c:	ea50 0201 	orrs.w	r2, r0, r1
  403d40:	bf08      	it	eq
  403d42:	4770      	bxeq	lr
  403d44:	b530      	push	{r4, r5, lr}
  403d46:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  403d4a:	d502      	bpl.n	403d52 <__aeabi_l2d+0x16>
  403d4c:	4240      	negs	r0, r0
  403d4e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403d52:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403d56:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403d5a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  403d5e:	f43f aedc 	beq.w	403b1a <__adddf3+0xe6>
  403d62:	f04f 0203 	mov.w	r2, #3
  403d66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  403d6a:	bf18      	it	ne
  403d6c:	3203      	addne	r2, #3
  403d6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  403d72:	bf18      	it	ne
  403d74:	3203      	addne	r2, #3
  403d76:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  403d7a:	f1c2 0320 	rsb	r3, r2, #32
  403d7e:	fa00 fc03 	lsl.w	ip, r0, r3
  403d82:	fa20 f002 	lsr.w	r0, r0, r2
  403d86:	fa01 fe03 	lsl.w	lr, r1, r3
  403d8a:	ea40 000e 	orr.w	r0, r0, lr
  403d8e:	fa21 f102 	lsr.w	r1, r1, r2
  403d92:	4414      	add	r4, r2
  403d94:	e6c1      	b.n	403b1a <__adddf3+0xe6>
  403d96:	bf00      	nop

00403d98 <__aeabi_dmul>:
  403d98:	b570      	push	{r4, r5, r6, lr}
  403d9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403d9e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  403da2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  403da6:	bf1d      	ittte	ne
  403da8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403dac:	ea94 0f0c 	teqne	r4, ip
  403db0:	ea95 0f0c 	teqne	r5, ip
  403db4:	f000 f8de 	bleq	403f74 <__aeabi_dmul+0x1dc>
  403db8:	442c      	add	r4, r5
  403dba:	ea81 0603 	eor.w	r6, r1, r3
  403dbe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  403dc2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  403dc6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  403dca:	bf18      	it	ne
  403dcc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  403dd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403dd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  403dd8:	d038      	beq.n	403e4c <__aeabi_dmul+0xb4>
  403dda:	fba0 ce02 	umull	ip, lr, r0, r2
  403dde:	f04f 0500 	mov.w	r5, #0
  403de2:	fbe1 e502 	umlal	lr, r5, r1, r2
  403de6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  403dea:	fbe0 e503 	umlal	lr, r5, r0, r3
  403dee:	f04f 0600 	mov.w	r6, #0
  403df2:	fbe1 5603 	umlal	r5, r6, r1, r3
  403df6:	f09c 0f00 	teq	ip, #0
  403dfa:	bf18      	it	ne
  403dfc:	f04e 0e01 	orrne.w	lr, lr, #1
  403e00:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  403e04:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  403e08:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  403e0c:	d204      	bcs.n	403e18 <__aeabi_dmul+0x80>
  403e0e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  403e12:	416d      	adcs	r5, r5
  403e14:	eb46 0606 	adc.w	r6, r6, r6
  403e18:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  403e1c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  403e20:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  403e24:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  403e28:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  403e2c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403e30:	bf88      	it	hi
  403e32:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403e36:	d81e      	bhi.n	403e76 <__aeabi_dmul+0xde>
  403e38:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  403e3c:	bf08      	it	eq
  403e3e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  403e42:	f150 0000 	adcs.w	r0, r0, #0
  403e46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403e4a:	bd70      	pop	{r4, r5, r6, pc}
  403e4c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  403e50:	ea46 0101 	orr.w	r1, r6, r1
  403e54:	ea40 0002 	orr.w	r0, r0, r2
  403e58:	ea81 0103 	eor.w	r1, r1, r3
  403e5c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  403e60:	bfc2      	ittt	gt
  403e62:	ebd4 050c 	rsbsgt	r5, r4, ip
  403e66:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403e6a:	bd70      	popgt	{r4, r5, r6, pc}
  403e6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403e70:	f04f 0e00 	mov.w	lr, #0
  403e74:	3c01      	subs	r4, #1
  403e76:	f300 80ab 	bgt.w	403fd0 <__aeabi_dmul+0x238>
  403e7a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  403e7e:	bfde      	ittt	le
  403e80:	2000      	movle	r0, #0
  403e82:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  403e86:	bd70      	pople	{r4, r5, r6, pc}
  403e88:	f1c4 0400 	rsb	r4, r4, #0
  403e8c:	3c20      	subs	r4, #32
  403e8e:	da35      	bge.n	403efc <__aeabi_dmul+0x164>
  403e90:	340c      	adds	r4, #12
  403e92:	dc1b      	bgt.n	403ecc <__aeabi_dmul+0x134>
  403e94:	f104 0414 	add.w	r4, r4, #20
  403e98:	f1c4 0520 	rsb	r5, r4, #32
  403e9c:	fa00 f305 	lsl.w	r3, r0, r5
  403ea0:	fa20 f004 	lsr.w	r0, r0, r4
  403ea4:	fa01 f205 	lsl.w	r2, r1, r5
  403ea8:	ea40 0002 	orr.w	r0, r0, r2
  403eac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  403eb0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403eb4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403eb8:	fa21 f604 	lsr.w	r6, r1, r4
  403ebc:	eb42 0106 	adc.w	r1, r2, r6
  403ec0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403ec4:	bf08      	it	eq
  403ec6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403eca:	bd70      	pop	{r4, r5, r6, pc}
  403ecc:	f1c4 040c 	rsb	r4, r4, #12
  403ed0:	f1c4 0520 	rsb	r5, r4, #32
  403ed4:	fa00 f304 	lsl.w	r3, r0, r4
  403ed8:	fa20 f005 	lsr.w	r0, r0, r5
  403edc:	fa01 f204 	lsl.w	r2, r1, r4
  403ee0:	ea40 0002 	orr.w	r0, r0, r2
  403ee4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403ee8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403eec:	f141 0100 	adc.w	r1, r1, #0
  403ef0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403ef4:	bf08      	it	eq
  403ef6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403efa:	bd70      	pop	{r4, r5, r6, pc}
  403efc:	f1c4 0520 	rsb	r5, r4, #32
  403f00:	fa00 f205 	lsl.w	r2, r0, r5
  403f04:	ea4e 0e02 	orr.w	lr, lr, r2
  403f08:	fa20 f304 	lsr.w	r3, r0, r4
  403f0c:	fa01 f205 	lsl.w	r2, r1, r5
  403f10:	ea43 0302 	orr.w	r3, r3, r2
  403f14:	fa21 f004 	lsr.w	r0, r1, r4
  403f18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403f1c:	fa21 f204 	lsr.w	r2, r1, r4
  403f20:	ea20 0002 	bic.w	r0, r0, r2
  403f24:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  403f28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403f2c:	bf08      	it	eq
  403f2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403f32:	bd70      	pop	{r4, r5, r6, pc}
  403f34:	f094 0f00 	teq	r4, #0
  403f38:	d10f      	bne.n	403f5a <__aeabi_dmul+0x1c2>
  403f3a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  403f3e:	0040      	lsls	r0, r0, #1
  403f40:	eb41 0101 	adc.w	r1, r1, r1
  403f44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403f48:	bf08      	it	eq
  403f4a:	3c01      	subeq	r4, #1
  403f4c:	d0f7      	beq.n	403f3e <__aeabi_dmul+0x1a6>
  403f4e:	ea41 0106 	orr.w	r1, r1, r6
  403f52:	f095 0f00 	teq	r5, #0
  403f56:	bf18      	it	ne
  403f58:	4770      	bxne	lr
  403f5a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  403f5e:	0052      	lsls	r2, r2, #1
  403f60:	eb43 0303 	adc.w	r3, r3, r3
  403f64:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  403f68:	bf08      	it	eq
  403f6a:	3d01      	subeq	r5, #1
  403f6c:	d0f7      	beq.n	403f5e <__aeabi_dmul+0x1c6>
  403f6e:	ea43 0306 	orr.w	r3, r3, r6
  403f72:	4770      	bx	lr
  403f74:	ea94 0f0c 	teq	r4, ip
  403f78:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403f7c:	bf18      	it	ne
  403f7e:	ea95 0f0c 	teqne	r5, ip
  403f82:	d00c      	beq.n	403f9e <__aeabi_dmul+0x206>
  403f84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403f88:	bf18      	it	ne
  403f8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403f8e:	d1d1      	bne.n	403f34 <__aeabi_dmul+0x19c>
  403f90:	ea81 0103 	eor.w	r1, r1, r3
  403f94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403f98:	f04f 0000 	mov.w	r0, #0
  403f9c:	bd70      	pop	{r4, r5, r6, pc}
  403f9e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403fa2:	bf06      	itte	eq
  403fa4:	4610      	moveq	r0, r2
  403fa6:	4619      	moveq	r1, r3
  403fa8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403fac:	d019      	beq.n	403fe2 <__aeabi_dmul+0x24a>
  403fae:	ea94 0f0c 	teq	r4, ip
  403fb2:	d102      	bne.n	403fba <__aeabi_dmul+0x222>
  403fb4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  403fb8:	d113      	bne.n	403fe2 <__aeabi_dmul+0x24a>
  403fba:	ea95 0f0c 	teq	r5, ip
  403fbe:	d105      	bne.n	403fcc <__aeabi_dmul+0x234>
  403fc0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  403fc4:	bf1c      	itt	ne
  403fc6:	4610      	movne	r0, r2
  403fc8:	4619      	movne	r1, r3
  403fca:	d10a      	bne.n	403fe2 <__aeabi_dmul+0x24a>
  403fcc:	ea81 0103 	eor.w	r1, r1, r3
  403fd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403fd4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403fd8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403fdc:	f04f 0000 	mov.w	r0, #0
  403fe0:	bd70      	pop	{r4, r5, r6, pc}
  403fe2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403fe6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  403fea:	bd70      	pop	{r4, r5, r6, pc}

00403fec <__aeabi_ddiv>:
  403fec:	b570      	push	{r4, r5, r6, lr}
  403fee:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403ff2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  403ff6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  403ffa:	bf1d      	ittte	ne
  403ffc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  404000:	ea94 0f0c 	teqne	r4, ip
  404004:	ea95 0f0c 	teqne	r5, ip
  404008:	f000 f8a7 	bleq	40415a <__aeabi_ddiv+0x16e>
  40400c:	eba4 0405 	sub.w	r4, r4, r5
  404010:	ea81 0e03 	eor.w	lr, r1, r3
  404014:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  404018:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40401c:	f000 8088 	beq.w	404130 <__aeabi_ddiv+0x144>
  404020:	ea4f 3303 	mov.w	r3, r3, lsl #12
  404024:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  404028:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40402c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  404030:	ea4f 2202 	mov.w	r2, r2, lsl #8
  404034:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  404038:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40403c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  404040:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  404044:	429d      	cmp	r5, r3
  404046:	bf08      	it	eq
  404048:	4296      	cmpeq	r6, r2
  40404a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40404e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  404052:	d202      	bcs.n	40405a <__aeabi_ddiv+0x6e>
  404054:	085b      	lsrs	r3, r3, #1
  404056:	ea4f 0232 	mov.w	r2, r2, rrx
  40405a:	1ab6      	subs	r6, r6, r2
  40405c:	eb65 0503 	sbc.w	r5, r5, r3
  404060:	085b      	lsrs	r3, r3, #1
  404062:	ea4f 0232 	mov.w	r2, r2, rrx
  404066:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40406a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40406e:	ebb6 0e02 	subs.w	lr, r6, r2
  404072:	eb75 0e03 	sbcs.w	lr, r5, r3
  404076:	bf22      	ittt	cs
  404078:	1ab6      	subcs	r6, r6, r2
  40407a:	4675      	movcs	r5, lr
  40407c:	ea40 000c 	orrcs.w	r0, r0, ip
  404080:	085b      	lsrs	r3, r3, #1
  404082:	ea4f 0232 	mov.w	r2, r2, rrx
  404086:	ebb6 0e02 	subs.w	lr, r6, r2
  40408a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40408e:	bf22      	ittt	cs
  404090:	1ab6      	subcs	r6, r6, r2
  404092:	4675      	movcs	r5, lr
  404094:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  404098:	085b      	lsrs	r3, r3, #1
  40409a:	ea4f 0232 	mov.w	r2, r2, rrx
  40409e:	ebb6 0e02 	subs.w	lr, r6, r2
  4040a2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4040a6:	bf22      	ittt	cs
  4040a8:	1ab6      	subcs	r6, r6, r2
  4040aa:	4675      	movcs	r5, lr
  4040ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4040b0:	085b      	lsrs	r3, r3, #1
  4040b2:	ea4f 0232 	mov.w	r2, r2, rrx
  4040b6:	ebb6 0e02 	subs.w	lr, r6, r2
  4040ba:	eb75 0e03 	sbcs.w	lr, r5, r3
  4040be:	bf22      	ittt	cs
  4040c0:	1ab6      	subcs	r6, r6, r2
  4040c2:	4675      	movcs	r5, lr
  4040c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4040c8:	ea55 0e06 	orrs.w	lr, r5, r6
  4040cc:	d018      	beq.n	404100 <__aeabi_ddiv+0x114>
  4040ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4040d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4040d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4040da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4040de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4040e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4040e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4040ea:	d1c0      	bne.n	40406e <__aeabi_ddiv+0x82>
  4040ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4040f0:	d10b      	bne.n	40410a <__aeabi_ddiv+0x11e>
  4040f2:	ea41 0100 	orr.w	r1, r1, r0
  4040f6:	f04f 0000 	mov.w	r0, #0
  4040fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4040fe:	e7b6      	b.n	40406e <__aeabi_ddiv+0x82>
  404100:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404104:	bf04      	itt	eq
  404106:	4301      	orreq	r1, r0
  404108:	2000      	moveq	r0, #0
  40410a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40410e:	bf88      	it	hi
  404110:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  404114:	f63f aeaf 	bhi.w	403e76 <__aeabi_dmul+0xde>
  404118:	ebb5 0c03 	subs.w	ip, r5, r3
  40411c:	bf04      	itt	eq
  40411e:	ebb6 0c02 	subseq.w	ip, r6, r2
  404122:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  404126:	f150 0000 	adcs.w	r0, r0, #0
  40412a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40412e:	bd70      	pop	{r4, r5, r6, pc}
  404130:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  404134:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  404138:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40413c:	bfc2      	ittt	gt
  40413e:	ebd4 050c 	rsbsgt	r5, r4, ip
  404142:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  404146:	bd70      	popgt	{r4, r5, r6, pc}
  404148:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40414c:	f04f 0e00 	mov.w	lr, #0
  404150:	3c01      	subs	r4, #1
  404152:	e690      	b.n	403e76 <__aeabi_dmul+0xde>
  404154:	ea45 0e06 	orr.w	lr, r5, r6
  404158:	e68d      	b.n	403e76 <__aeabi_dmul+0xde>
  40415a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40415e:	ea94 0f0c 	teq	r4, ip
  404162:	bf08      	it	eq
  404164:	ea95 0f0c 	teqeq	r5, ip
  404168:	f43f af3b 	beq.w	403fe2 <__aeabi_dmul+0x24a>
  40416c:	ea94 0f0c 	teq	r4, ip
  404170:	d10a      	bne.n	404188 <__aeabi_ddiv+0x19c>
  404172:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  404176:	f47f af34 	bne.w	403fe2 <__aeabi_dmul+0x24a>
  40417a:	ea95 0f0c 	teq	r5, ip
  40417e:	f47f af25 	bne.w	403fcc <__aeabi_dmul+0x234>
  404182:	4610      	mov	r0, r2
  404184:	4619      	mov	r1, r3
  404186:	e72c      	b.n	403fe2 <__aeabi_dmul+0x24a>
  404188:	ea95 0f0c 	teq	r5, ip
  40418c:	d106      	bne.n	40419c <__aeabi_ddiv+0x1b0>
  40418e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  404192:	f43f aefd 	beq.w	403f90 <__aeabi_dmul+0x1f8>
  404196:	4610      	mov	r0, r2
  404198:	4619      	mov	r1, r3
  40419a:	e722      	b.n	403fe2 <__aeabi_dmul+0x24a>
  40419c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4041a0:	bf18      	it	ne
  4041a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4041a6:	f47f aec5 	bne.w	403f34 <__aeabi_dmul+0x19c>
  4041aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4041ae:	f47f af0d 	bne.w	403fcc <__aeabi_dmul+0x234>
  4041b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4041b6:	f47f aeeb 	bne.w	403f90 <__aeabi_dmul+0x1f8>
  4041ba:	e712      	b.n	403fe2 <__aeabi_dmul+0x24a>

004041bc <__gedf2>:
  4041bc:	f04f 3cff 	mov.w	ip, #4294967295
  4041c0:	e006      	b.n	4041d0 <__cmpdf2+0x4>
  4041c2:	bf00      	nop

004041c4 <__ledf2>:
  4041c4:	f04f 0c01 	mov.w	ip, #1
  4041c8:	e002      	b.n	4041d0 <__cmpdf2+0x4>
  4041ca:	bf00      	nop

004041cc <__cmpdf2>:
  4041cc:	f04f 0c01 	mov.w	ip, #1
  4041d0:	f84d cd04 	str.w	ip, [sp, #-4]!
  4041d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4041d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4041dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4041e0:	bf18      	it	ne
  4041e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4041e6:	d01b      	beq.n	404220 <__cmpdf2+0x54>
  4041e8:	b001      	add	sp, #4
  4041ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4041ee:	bf0c      	ite	eq
  4041f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4041f4:	ea91 0f03 	teqne	r1, r3
  4041f8:	bf02      	ittt	eq
  4041fa:	ea90 0f02 	teqeq	r0, r2
  4041fe:	2000      	moveq	r0, #0
  404200:	4770      	bxeq	lr
  404202:	f110 0f00 	cmn.w	r0, #0
  404206:	ea91 0f03 	teq	r1, r3
  40420a:	bf58      	it	pl
  40420c:	4299      	cmppl	r1, r3
  40420e:	bf08      	it	eq
  404210:	4290      	cmpeq	r0, r2
  404212:	bf2c      	ite	cs
  404214:	17d8      	asrcs	r0, r3, #31
  404216:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40421a:	f040 0001 	orr.w	r0, r0, #1
  40421e:	4770      	bx	lr
  404220:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  404224:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404228:	d102      	bne.n	404230 <__cmpdf2+0x64>
  40422a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40422e:	d107      	bne.n	404240 <__cmpdf2+0x74>
  404230:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  404234:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404238:	d1d6      	bne.n	4041e8 <__cmpdf2+0x1c>
  40423a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40423e:	d0d3      	beq.n	4041e8 <__cmpdf2+0x1c>
  404240:	f85d 0b04 	ldr.w	r0, [sp], #4
  404244:	4770      	bx	lr
  404246:	bf00      	nop

00404248 <__aeabi_cdrcmple>:
  404248:	4684      	mov	ip, r0
  40424a:	4610      	mov	r0, r2
  40424c:	4662      	mov	r2, ip
  40424e:	468c      	mov	ip, r1
  404250:	4619      	mov	r1, r3
  404252:	4663      	mov	r3, ip
  404254:	e000      	b.n	404258 <__aeabi_cdcmpeq>
  404256:	bf00      	nop

00404258 <__aeabi_cdcmpeq>:
  404258:	b501      	push	{r0, lr}
  40425a:	f7ff ffb7 	bl	4041cc <__cmpdf2>
  40425e:	2800      	cmp	r0, #0
  404260:	bf48      	it	mi
  404262:	f110 0f00 	cmnmi.w	r0, #0
  404266:	bd01      	pop	{r0, pc}

00404268 <__aeabi_dcmpeq>:
  404268:	f84d ed08 	str.w	lr, [sp, #-8]!
  40426c:	f7ff fff4 	bl	404258 <__aeabi_cdcmpeq>
  404270:	bf0c      	ite	eq
  404272:	2001      	moveq	r0, #1
  404274:	2000      	movne	r0, #0
  404276:	f85d fb08 	ldr.w	pc, [sp], #8
  40427a:	bf00      	nop

0040427c <__aeabi_dcmplt>:
  40427c:	f84d ed08 	str.w	lr, [sp, #-8]!
  404280:	f7ff ffea 	bl	404258 <__aeabi_cdcmpeq>
  404284:	bf34      	ite	cc
  404286:	2001      	movcc	r0, #1
  404288:	2000      	movcs	r0, #0
  40428a:	f85d fb08 	ldr.w	pc, [sp], #8
  40428e:	bf00      	nop

00404290 <__aeabi_dcmple>:
  404290:	f84d ed08 	str.w	lr, [sp, #-8]!
  404294:	f7ff ffe0 	bl	404258 <__aeabi_cdcmpeq>
  404298:	bf94      	ite	ls
  40429a:	2001      	movls	r0, #1
  40429c:	2000      	movhi	r0, #0
  40429e:	f85d fb08 	ldr.w	pc, [sp], #8
  4042a2:	bf00      	nop

004042a4 <__aeabi_dcmpge>:
  4042a4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4042a8:	f7ff ffce 	bl	404248 <__aeabi_cdrcmple>
  4042ac:	bf94      	ite	ls
  4042ae:	2001      	movls	r0, #1
  4042b0:	2000      	movhi	r0, #0
  4042b2:	f85d fb08 	ldr.w	pc, [sp], #8
  4042b6:	bf00      	nop

004042b8 <__aeabi_dcmpgt>:
  4042b8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4042bc:	f7ff ffc4 	bl	404248 <__aeabi_cdrcmple>
  4042c0:	bf34      	ite	cc
  4042c2:	2001      	movcc	r0, #1
  4042c4:	2000      	movcs	r0, #0
  4042c6:	f85d fb08 	ldr.w	pc, [sp], #8
  4042ca:	bf00      	nop

004042cc <__aeabi_dcmpun>:
  4042cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4042d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4042d4:	d102      	bne.n	4042dc <__aeabi_dcmpun+0x10>
  4042d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4042da:	d10a      	bne.n	4042f2 <__aeabi_dcmpun+0x26>
  4042dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4042e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4042e4:	d102      	bne.n	4042ec <__aeabi_dcmpun+0x20>
  4042e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4042ea:	d102      	bne.n	4042f2 <__aeabi_dcmpun+0x26>
  4042ec:	f04f 0000 	mov.w	r0, #0
  4042f0:	4770      	bx	lr
  4042f2:	f04f 0001 	mov.w	r0, #1
  4042f6:	4770      	bx	lr

004042f8 <__aeabi_d2f>:
  4042f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4042fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  404300:	bf24      	itt	cs
  404302:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  404306:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  40430a:	d90d      	bls.n	404328 <__aeabi_d2f+0x30>
  40430c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  404310:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  404314:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  404318:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  40431c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  404320:	bf08      	it	eq
  404322:	f020 0001 	biceq.w	r0, r0, #1
  404326:	4770      	bx	lr
  404328:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  40432c:	d121      	bne.n	404372 <__aeabi_d2f+0x7a>
  40432e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  404332:	bfbc      	itt	lt
  404334:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  404338:	4770      	bxlt	lr
  40433a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40433e:	ea4f 5252 	mov.w	r2, r2, lsr #21
  404342:	f1c2 0218 	rsb	r2, r2, #24
  404346:	f1c2 0c20 	rsb	ip, r2, #32
  40434a:	fa10 f30c 	lsls.w	r3, r0, ip
  40434e:	fa20 f002 	lsr.w	r0, r0, r2
  404352:	bf18      	it	ne
  404354:	f040 0001 	orrne.w	r0, r0, #1
  404358:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40435c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  404360:	fa03 fc0c 	lsl.w	ip, r3, ip
  404364:	ea40 000c 	orr.w	r0, r0, ip
  404368:	fa23 f302 	lsr.w	r3, r3, r2
  40436c:	ea4f 0343 	mov.w	r3, r3, lsl #1
  404370:	e7cc      	b.n	40430c <__aeabi_d2f+0x14>
  404372:	ea7f 5362 	mvns.w	r3, r2, asr #21
  404376:	d107      	bne.n	404388 <__aeabi_d2f+0x90>
  404378:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  40437c:	bf1e      	ittt	ne
  40437e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  404382:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  404386:	4770      	bxne	lr
  404388:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  40438c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  404390:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  404394:	4770      	bx	lr
  404396:	bf00      	nop

00404398 <__errno>:
  404398:	4b01      	ldr	r3, [pc, #4]	; (4043a0 <__errno+0x8>)
  40439a:	6818      	ldr	r0, [r3, #0]
  40439c:	4770      	bx	lr
  40439e:	bf00      	nop
  4043a0:	20400058 	.word	0x20400058

004043a4 <__libc_init_array>:
  4043a4:	b570      	push	{r4, r5, r6, lr}
  4043a6:	4e0f      	ldr	r6, [pc, #60]	; (4043e4 <__libc_init_array+0x40>)
  4043a8:	4d0f      	ldr	r5, [pc, #60]	; (4043e8 <__libc_init_array+0x44>)
  4043aa:	1b76      	subs	r6, r6, r5
  4043ac:	10b6      	asrs	r6, r6, #2
  4043ae:	bf18      	it	ne
  4043b0:	2400      	movne	r4, #0
  4043b2:	d005      	beq.n	4043c0 <__libc_init_array+0x1c>
  4043b4:	3401      	adds	r4, #1
  4043b6:	f855 3b04 	ldr.w	r3, [r5], #4
  4043ba:	4798      	blx	r3
  4043bc:	42a6      	cmp	r6, r4
  4043be:	d1f9      	bne.n	4043b4 <__libc_init_array+0x10>
  4043c0:	4e0a      	ldr	r6, [pc, #40]	; (4043ec <__libc_init_array+0x48>)
  4043c2:	4d0b      	ldr	r5, [pc, #44]	; (4043f0 <__libc_init_array+0x4c>)
  4043c4:	1b76      	subs	r6, r6, r5
  4043c6:	f003 fcaf 	bl	407d28 <_init>
  4043ca:	10b6      	asrs	r6, r6, #2
  4043cc:	bf18      	it	ne
  4043ce:	2400      	movne	r4, #0
  4043d0:	d006      	beq.n	4043e0 <__libc_init_array+0x3c>
  4043d2:	3401      	adds	r4, #1
  4043d4:	f855 3b04 	ldr.w	r3, [r5], #4
  4043d8:	4798      	blx	r3
  4043da:	42a6      	cmp	r6, r4
  4043dc:	d1f9      	bne.n	4043d2 <__libc_init_array+0x2e>
  4043de:	bd70      	pop	{r4, r5, r6, pc}
  4043e0:	bd70      	pop	{r4, r5, r6, pc}
  4043e2:	bf00      	nop
  4043e4:	00407d34 	.word	0x00407d34
  4043e8:	00407d34 	.word	0x00407d34
  4043ec:	00407d3c 	.word	0x00407d3c
  4043f0:	00407d34 	.word	0x00407d34

004043f4 <iprintf>:
  4043f4:	b40f      	push	{r0, r1, r2, r3}
  4043f6:	b500      	push	{lr}
  4043f8:	4907      	ldr	r1, [pc, #28]	; (404418 <iprintf+0x24>)
  4043fa:	b083      	sub	sp, #12
  4043fc:	ab04      	add	r3, sp, #16
  4043fe:	6808      	ldr	r0, [r1, #0]
  404400:	f853 2b04 	ldr.w	r2, [r3], #4
  404404:	6881      	ldr	r1, [r0, #8]
  404406:	9301      	str	r3, [sp, #4]
  404408:	f000 fc06 	bl	404c18 <_vfiprintf_r>
  40440c:	b003      	add	sp, #12
  40440e:	f85d eb04 	ldr.w	lr, [sp], #4
  404412:	b004      	add	sp, #16
  404414:	4770      	bx	lr
  404416:	bf00      	nop
  404418:	20400058 	.word	0x20400058

0040441c <malloc>:
  40441c:	4b02      	ldr	r3, [pc, #8]	; (404428 <malloc+0xc>)
  40441e:	4601      	mov	r1, r0
  404420:	6818      	ldr	r0, [r3, #0]
  404422:	f000 b803 	b.w	40442c <_malloc_r>
  404426:	bf00      	nop
  404428:	20400058 	.word	0x20400058

0040442c <_malloc_r>:
  40442c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404430:	f101 060b 	add.w	r6, r1, #11
  404434:	2e16      	cmp	r6, #22
  404436:	b083      	sub	sp, #12
  404438:	4605      	mov	r5, r0
  40443a:	f240 809e 	bls.w	40457a <_malloc_r+0x14e>
  40443e:	f036 0607 	bics.w	r6, r6, #7
  404442:	f100 80bd 	bmi.w	4045c0 <_malloc_r+0x194>
  404446:	42b1      	cmp	r1, r6
  404448:	f200 80ba 	bhi.w	4045c0 <_malloc_r+0x194>
  40444c:	f000 fb86 	bl	404b5c <__malloc_lock>
  404450:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  404454:	f0c0 8293 	bcc.w	40497e <_malloc_r+0x552>
  404458:	0a73      	lsrs	r3, r6, #9
  40445a:	f000 80b8 	beq.w	4045ce <_malloc_r+0x1a2>
  40445e:	2b04      	cmp	r3, #4
  404460:	f200 8179 	bhi.w	404756 <_malloc_r+0x32a>
  404464:	09b3      	lsrs	r3, r6, #6
  404466:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40446a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40446e:	00c3      	lsls	r3, r0, #3
  404470:	4fbf      	ldr	r7, [pc, #764]	; (404770 <_malloc_r+0x344>)
  404472:	443b      	add	r3, r7
  404474:	f1a3 0108 	sub.w	r1, r3, #8
  404478:	685c      	ldr	r4, [r3, #4]
  40447a:	42a1      	cmp	r1, r4
  40447c:	d106      	bne.n	40448c <_malloc_r+0x60>
  40447e:	e00c      	b.n	40449a <_malloc_r+0x6e>
  404480:	2a00      	cmp	r2, #0
  404482:	f280 80aa 	bge.w	4045da <_malloc_r+0x1ae>
  404486:	68e4      	ldr	r4, [r4, #12]
  404488:	42a1      	cmp	r1, r4
  40448a:	d006      	beq.n	40449a <_malloc_r+0x6e>
  40448c:	6863      	ldr	r3, [r4, #4]
  40448e:	f023 0303 	bic.w	r3, r3, #3
  404492:	1b9a      	subs	r2, r3, r6
  404494:	2a0f      	cmp	r2, #15
  404496:	ddf3      	ble.n	404480 <_malloc_r+0x54>
  404498:	4670      	mov	r0, lr
  40449a:	693c      	ldr	r4, [r7, #16]
  40449c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 404784 <_malloc_r+0x358>
  4044a0:	4574      	cmp	r4, lr
  4044a2:	f000 81ab 	beq.w	4047fc <_malloc_r+0x3d0>
  4044a6:	6863      	ldr	r3, [r4, #4]
  4044a8:	f023 0303 	bic.w	r3, r3, #3
  4044ac:	1b9a      	subs	r2, r3, r6
  4044ae:	2a0f      	cmp	r2, #15
  4044b0:	f300 8190 	bgt.w	4047d4 <_malloc_r+0x3a8>
  4044b4:	2a00      	cmp	r2, #0
  4044b6:	f8c7 e014 	str.w	lr, [r7, #20]
  4044ba:	f8c7 e010 	str.w	lr, [r7, #16]
  4044be:	f280 809d 	bge.w	4045fc <_malloc_r+0x1d0>
  4044c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4044c6:	f080 8161 	bcs.w	40478c <_malloc_r+0x360>
  4044ca:	08db      	lsrs	r3, r3, #3
  4044cc:	f103 0c01 	add.w	ip, r3, #1
  4044d0:	1099      	asrs	r1, r3, #2
  4044d2:	687a      	ldr	r2, [r7, #4]
  4044d4:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4044d8:	f8c4 8008 	str.w	r8, [r4, #8]
  4044dc:	2301      	movs	r3, #1
  4044de:	408b      	lsls	r3, r1
  4044e0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4044e4:	4313      	orrs	r3, r2
  4044e6:	3908      	subs	r1, #8
  4044e8:	60e1      	str	r1, [r4, #12]
  4044ea:	607b      	str	r3, [r7, #4]
  4044ec:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4044f0:	f8c8 400c 	str.w	r4, [r8, #12]
  4044f4:	1082      	asrs	r2, r0, #2
  4044f6:	2401      	movs	r4, #1
  4044f8:	4094      	lsls	r4, r2
  4044fa:	429c      	cmp	r4, r3
  4044fc:	f200 808b 	bhi.w	404616 <_malloc_r+0x1ea>
  404500:	421c      	tst	r4, r3
  404502:	d106      	bne.n	404512 <_malloc_r+0xe6>
  404504:	f020 0003 	bic.w	r0, r0, #3
  404508:	0064      	lsls	r4, r4, #1
  40450a:	421c      	tst	r4, r3
  40450c:	f100 0004 	add.w	r0, r0, #4
  404510:	d0fa      	beq.n	404508 <_malloc_r+0xdc>
  404512:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  404516:	46cc      	mov	ip, r9
  404518:	4680      	mov	r8, r0
  40451a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40451e:	459c      	cmp	ip, r3
  404520:	d107      	bne.n	404532 <_malloc_r+0x106>
  404522:	e16d      	b.n	404800 <_malloc_r+0x3d4>
  404524:	2a00      	cmp	r2, #0
  404526:	f280 817b 	bge.w	404820 <_malloc_r+0x3f4>
  40452a:	68db      	ldr	r3, [r3, #12]
  40452c:	459c      	cmp	ip, r3
  40452e:	f000 8167 	beq.w	404800 <_malloc_r+0x3d4>
  404532:	6859      	ldr	r1, [r3, #4]
  404534:	f021 0103 	bic.w	r1, r1, #3
  404538:	1b8a      	subs	r2, r1, r6
  40453a:	2a0f      	cmp	r2, #15
  40453c:	ddf2      	ble.n	404524 <_malloc_r+0xf8>
  40453e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  404542:	f8d3 8008 	ldr.w	r8, [r3, #8]
  404546:	9300      	str	r3, [sp, #0]
  404548:	199c      	adds	r4, r3, r6
  40454a:	4628      	mov	r0, r5
  40454c:	f046 0601 	orr.w	r6, r6, #1
  404550:	f042 0501 	orr.w	r5, r2, #1
  404554:	605e      	str	r6, [r3, #4]
  404556:	f8c8 c00c 	str.w	ip, [r8, #12]
  40455a:	f8cc 8008 	str.w	r8, [ip, #8]
  40455e:	617c      	str	r4, [r7, #20]
  404560:	613c      	str	r4, [r7, #16]
  404562:	f8c4 e00c 	str.w	lr, [r4, #12]
  404566:	f8c4 e008 	str.w	lr, [r4, #8]
  40456a:	6065      	str	r5, [r4, #4]
  40456c:	505a      	str	r2, [r3, r1]
  40456e:	f000 fafb 	bl	404b68 <__malloc_unlock>
  404572:	9b00      	ldr	r3, [sp, #0]
  404574:	f103 0408 	add.w	r4, r3, #8
  404578:	e01e      	b.n	4045b8 <_malloc_r+0x18c>
  40457a:	2910      	cmp	r1, #16
  40457c:	d820      	bhi.n	4045c0 <_malloc_r+0x194>
  40457e:	f000 faed 	bl	404b5c <__malloc_lock>
  404582:	2610      	movs	r6, #16
  404584:	2318      	movs	r3, #24
  404586:	2002      	movs	r0, #2
  404588:	4f79      	ldr	r7, [pc, #484]	; (404770 <_malloc_r+0x344>)
  40458a:	443b      	add	r3, r7
  40458c:	f1a3 0208 	sub.w	r2, r3, #8
  404590:	685c      	ldr	r4, [r3, #4]
  404592:	4294      	cmp	r4, r2
  404594:	f000 813d 	beq.w	404812 <_malloc_r+0x3e6>
  404598:	6863      	ldr	r3, [r4, #4]
  40459a:	68e1      	ldr	r1, [r4, #12]
  40459c:	68a6      	ldr	r6, [r4, #8]
  40459e:	f023 0303 	bic.w	r3, r3, #3
  4045a2:	4423      	add	r3, r4
  4045a4:	4628      	mov	r0, r5
  4045a6:	685a      	ldr	r2, [r3, #4]
  4045a8:	60f1      	str	r1, [r6, #12]
  4045aa:	f042 0201 	orr.w	r2, r2, #1
  4045ae:	608e      	str	r6, [r1, #8]
  4045b0:	605a      	str	r2, [r3, #4]
  4045b2:	f000 fad9 	bl	404b68 <__malloc_unlock>
  4045b6:	3408      	adds	r4, #8
  4045b8:	4620      	mov	r0, r4
  4045ba:	b003      	add	sp, #12
  4045bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4045c0:	2400      	movs	r4, #0
  4045c2:	230c      	movs	r3, #12
  4045c4:	4620      	mov	r0, r4
  4045c6:	602b      	str	r3, [r5, #0]
  4045c8:	b003      	add	sp, #12
  4045ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4045ce:	2040      	movs	r0, #64	; 0x40
  4045d0:	f44f 7300 	mov.w	r3, #512	; 0x200
  4045d4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4045d8:	e74a      	b.n	404470 <_malloc_r+0x44>
  4045da:	4423      	add	r3, r4
  4045dc:	68e1      	ldr	r1, [r4, #12]
  4045de:	685a      	ldr	r2, [r3, #4]
  4045e0:	68a6      	ldr	r6, [r4, #8]
  4045e2:	f042 0201 	orr.w	r2, r2, #1
  4045e6:	60f1      	str	r1, [r6, #12]
  4045e8:	4628      	mov	r0, r5
  4045ea:	608e      	str	r6, [r1, #8]
  4045ec:	605a      	str	r2, [r3, #4]
  4045ee:	f000 fabb 	bl	404b68 <__malloc_unlock>
  4045f2:	3408      	adds	r4, #8
  4045f4:	4620      	mov	r0, r4
  4045f6:	b003      	add	sp, #12
  4045f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4045fc:	4423      	add	r3, r4
  4045fe:	4628      	mov	r0, r5
  404600:	685a      	ldr	r2, [r3, #4]
  404602:	f042 0201 	orr.w	r2, r2, #1
  404606:	605a      	str	r2, [r3, #4]
  404608:	f000 faae 	bl	404b68 <__malloc_unlock>
  40460c:	3408      	adds	r4, #8
  40460e:	4620      	mov	r0, r4
  404610:	b003      	add	sp, #12
  404612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404616:	68bc      	ldr	r4, [r7, #8]
  404618:	6863      	ldr	r3, [r4, #4]
  40461a:	f023 0803 	bic.w	r8, r3, #3
  40461e:	45b0      	cmp	r8, r6
  404620:	d304      	bcc.n	40462c <_malloc_r+0x200>
  404622:	eba8 0306 	sub.w	r3, r8, r6
  404626:	2b0f      	cmp	r3, #15
  404628:	f300 8085 	bgt.w	404736 <_malloc_r+0x30a>
  40462c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404788 <_malloc_r+0x35c>
  404630:	4b50      	ldr	r3, [pc, #320]	; (404774 <_malloc_r+0x348>)
  404632:	f8d9 2000 	ldr.w	r2, [r9]
  404636:	681b      	ldr	r3, [r3, #0]
  404638:	3201      	adds	r2, #1
  40463a:	4433      	add	r3, r6
  40463c:	eb04 0a08 	add.w	sl, r4, r8
  404640:	f000 8155 	beq.w	4048ee <_malloc_r+0x4c2>
  404644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  404648:	330f      	adds	r3, #15
  40464a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40464e:	f02b 0b0f 	bic.w	fp, fp, #15
  404652:	4659      	mov	r1, fp
  404654:	4628      	mov	r0, r5
  404656:	f000 fa8d 	bl	404b74 <_sbrk_r>
  40465a:	1c41      	adds	r1, r0, #1
  40465c:	4602      	mov	r2, r0
  40465e:	f000 80fc 	beq.w	40485a <_malloc_r+0x42e>
  404662:	4582      	cmp	sl, r0
  404664:	f200 80f7 	bhi.w	404856 <_malloc_r+0x42a>
  404668:	4b43      	ldr	r3, [pc, #268]	; (404778 <_malloc_r+0x34c>)
  40466a:	6819      	ldr	r1, [r3, #0]
  40466c:	4459      	add	r1, fp
  40466e:	6019      	str	r1, [r3, #0]
  404670:	f000 814d 	beq.w	40490e <_malloc_r+0x4e2>
  404674:	f8d9 0000 	ldr.w	r0, [r9]
  404678:	3001      	adds	r0, #1
  40467a:	bf1b      	ittet	ne
  40467c:	eba2 0a0a 	subne.w	sl, r2, sl
  404680:	4451      	addne	r1, sl
  404682:	f8c9 2000 	streq.w	r2, [r9]
  404686:	6019      	strne	r1, [r3, #0]
  404688:	f012 0107 	ands.w	r1, r2, #7
  40468c:	f000 8115 	beq.w	4048ba <_malloc_r+0x48e>
  404690:	f1c1 0008 	rsb	r0, r1, #8
  404694:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404698:	4402      	add	r2, r0
  40469a:	3108      	adds	r1, #8
  40469c:	eb02 090b 	add.w	r9, r2, fp
  4046a0:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4046a4:	eba1 0909 	sub.w	r9, r1, r9
  4046a8:	4649      	mov	r1, r9
  4046aa:	4628      	mov	r0, r5
  4046ac:	9301      	str	r3, [sp, #4]
  4046ae:	9200      	str	r2, [sp, #0]
  4046b0:	f000 fa60 	bl	404b74 <_sbrk_r>
  4046b4:	1c43      	adds	r3, r0, #1
  4046b6:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4046ba:	f000 8143 	beq.w	404944 <_malloc_r+0x518>
  4046be:	1a80      	subs	r0, r0, r2
  4046c0:	4448      	add	r0, r9
  4046c2:	f040 0001 	orr.w	r0, r0, #1
  4046c6:	6819      	ldr	r1, [r3, #0]
  4046c8:	60ba      	str	r2, [r7, #8]
  4046ca:	4449      	add	r1, r9
  4046cc:	42bc      	cmp	r4, r7
  4046ce:	6050      	str	r0, [r2, #4]
  4046d0:	6019      	str	r1, [r3, #0]
  4046d2:	d017      	beq.n	404704 <_malloc_r+0x2d8>
  4046d4:	f1b8 0f0f 	cmp.w	r8, #15
  4046d8:	f240 80fb 	bls.w	4048d2 <_malloc_r+0x4a6>
  4046dc:	6860      	ldr	r0, [r4, #4]
  4046de:	f1a8 020c 	sub.w	r2, r8, #12
  4046e2:	f022 0207 	bic.w	r2, r2, #7
  4046e6:	eb04 0e02 	add.w	lr, r4, r2
  4046ea:	f000 0001 	and.w	r0, r0, #1
  4046ee:	f04f 0c05 	mov.w	ip, #5
  4046f2:	4310      	orrs	r0, r2
  4046f4:	2a0f      	cmp	r2, #15
  4046f6:	6060      	str	r0, [r4, #4]
  4046f8:	f8ce c004 	str.w	ip, [lr, #4]
  4046fc:	f8ce c008 	str.w	ip, [lr, #8]
  404700:	f200 8117 	bhi.w	404932 <_malloc_r+0x506>
  404704:	4b1d      	ldr	r3, [pc, #116]	; (40477c <_malloc_r+0x350>)
  404706:	68bc      	ldr	r4, [r7, #8]
  404708:	681a      	ldr	r2, [r3, #0]
  40470a:	4291      	cmp	r1, r2
  40470c:	bf88      	it	hi
  40470e:	6019      	strhi	r1, [r3, #0]
  404710:	4b1b      	ldr	r3, [pc, #108]	; (404780 <_malloc_r+0x354>)
  404712:	681a      	ldr	r2, [r3, #0]
  404714:	4291      	cmp	r1, r2
  404716:	6862      	ldr	r2, [r4, #4]
  404718:	bf88      	it	hi
  40471a:	6019      	strhi	r1, [r3, #0]
  40471c:	f022 0203 	bic.w	r2, r2, #3
  404720:	4296      	cmp	r6, r2
  404722:	eba2 0306 	sub.w	r3, r2, r6
  404726:	d801      	bhi.n	40472c <_malloc_r+0x300>
  404728:	2b0f      	cmp	r3, #15
  40472a:	dc04      	bgt.n	404736 <_malloc_r+0x30a>
  40472c:	4628      	mov	r0, r5
  40472e:	f000 fa1b 	bl	404b68 <__malloc_unlock>
  404732:	2400      	movs	r4, #0
  404734:	e740      	b.n	4045b8 <_malloc_r+0x18c>
  404736:	19a2      	adds	r2, r4, r6
  404738:	f043 0301 	orr.w	r3, r3, #1
  40473c:	f046 0601 	orr.w	r6, r6, #1
  404740:	6066      	str	r6, [r4, #4]
  404742:	4628      	mov	r0, r5
  404744:	60ba      	str	r2, [r7, #8]
  404746:	6053      	str	r3, [r2, #4]
  404748:	f000 fa0e 	bl	404b68 <__malloc_unlock>
  40474c:	3408      	adds	r4, #8
  40474e:	4620      	mov	r0, r4
  404750:	b003      	add	sp, #12
  404752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404756:	2b14      	cmp	r3, #20
  404758:	d971      	bls.n	40483e <_malloc_r+0x412>
  40475a:	2b54      	cmp	r3, #84	; 0x54
  40475c:	f200 80a3 	bhi.w	4048a6 <_malloc_r+0x47a>
  404760:	0b33      	lsrs	r3, r6, #12
  404762:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  404766:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40476a:	00c3      	lsls	r3, r0, #3
  40476c:	e680      	b.n	404470 <_malloc_r+0x44>
  40476e:	bf00      	nop
  404770:	20400488 	.word	0x20400488
  404774:	20445440 	.word	0x20445440
  404778:	20445410 	.word	0x20445410
  40477c:	20445438 	.word	0x20445438
  404780:	2044543c 	.word	0x2044543c
  404784:	20400490 	.word	0x20400490
  404788:	20400890 	.word	0x20400890
  40478c:	0a5a      	lsrs	r2, r3, #9
  40478e:	2a04      	cmp	r2, #4
  404790:	d95b      	bls.n	40484a <_malloc_r+0x41e>
  404792:	2a14      	cmp	r2, #20
  404794:	f200 80ae 	bhi.w	4048f4 <_malloc_r+0x4c8>
  404798:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40479c:	00c9      	lsls	r1, r1, #3
  40479e:	325b      	adds	r2, #91	; 0x5b
  4047a0:	eb07 0c01 	add.w	ip, r7, r1
  4047a4:	5879      	ldr	r1, [r7, r1]
  4047a6:	f1ac 0c08 	sub.w	ip, ip, #8
  4047aa:	458c      	cmp	ip, r1
  4047ac:	f000 8088 	beq.w	4048c0 <_malloc_r+0x494>
  4047b0:	684a      	ldr	r2, [r1, #4]
  4047b2:	f022 0203 	bic.w	r2, r2, #3
  4047b6:	4293      	cmp	r3, r2
  4047b8:	d273      	bcs.n	4048a2 <_malloc_r+0x476>
  4047ba:	6889      	ldr	r1, [r1, #8]
  4047bc:	458c      	cmp	ip, r1
  4047be:	d1f7      	bne.n	4047b0 <_malloc_r+0x384>
  4047c0:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4047c4:	687b      	ldr	r3, [r7, #4]
  4047c6:	60e2      	str	r2, [r4, #12]
  4047c8:	f8c4 c008 	str.w	ip, [r4, #8]
  4047cc:	6094      	str	r4, [r2, #8]
  4047ce:	f8cc 400c 	str.w	r4, [ip, #12]
  4047d2:	e68f      	b.n	4044f4 <_malloc_r+0xc8>
  4047d4:	19a1      	adds	r1, r4, r6
  4047d6:	f046 0c01 	orr.w	ip, r6, #1
  4047da:	f042 0601 	orr.w	r6, r2, #1
  4047de:	f8c4 c004 	str.w	ip, [r4, #4]
  4047e2:	4628      	mov	r0, r5
  4047e4:	6179      	str	r1, [r7, #20]
  4047e6:	6139      	str	r1, [r7, #16]
  4047e8:	f8c1 e00c 	str.w	lr, [r1, #12]
  4047ec:	f8c1 e008 	str.w	lr, [r1, #8]
  4047f0:	604e      	str	r6, [r1, #4]
  4047f2:	50e2      	str	r2, [r4, r3]
  4047f4:	f000 f9b8 	bl	404b68 <__malloc_unlock>
  4047f8:	3408      	adds	r4, #8
  4047fa:	e6dd      	b.n	4045b8 <_malloc_r+0x18c>
  4047fc:	687b      	ldr	r3, [r7, #4]
  4047fe:	e679      	b.n	4044f4 <_malloc_r+0xc8>
  404800:	f108 0801 	add.w	r8, r8, #1
  404804:	f018 0f03 	tst.w	r8, #3
  404808:	f10c 0c08 	add.w	ip, ip, #8
  40480c:	f47f ae85 	bne.w	40451a <_malloc_r+0xee>
  404810:	e02d      	b.n	40486e <_malloc_r+0x442>
  404812:	68dc      	ldr	r4, [r3, #12]
  404814:	42a3      	cmp	r3, r4
  404816:	bf08      	it	eq
  404818:	3002      	addeq	r0, #2
  40481a:	f43f ae3e 	beq.w	40449a <_malloc_r+0x6e>
  40481e:	e6bb      	b.n	404598 <_malloc_r+0x16c>
  404820:	4419      	add	r1, r3
  404822:	461c      	mov	r4, r3
  404824:	684a      	ldr	r2, [r1, #4]
  404826:	68db      	ldr	r3, [r3, #12]
  404828:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40482c:	f042 0201 	orr.w	r2, r2, #1
  404830:	604a      	str	r2, [r1, #4]
  404832:	4628      	mov	r0, r5
  404834:	60f3      	str	r3, [r6, #12]
  404836:	609e      	str	r6, [r3, #8]
  404838:	f000 f996 	bl	404b68 <__malloc_unlock>
  40483c:	e6bc      	b.n	4045b8 <_malloc_r+0x18c>
  40483e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  404842:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  404846:	00c3      	lsls	r3, r0, #3
  404848:	e612      	b.n	404470 <_malloc_r+0x44>
  40484a:	099a      	lsrs	r2, r3, #6
  40484c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404850:	00c9      	lsls	r1, r1, #3
  404852:	3238      	adds	r2, #56	; 0x38
  404854:	e7a4      	b.n	4047a0 <_malloc_r+0x374>
  404856:	42bc      	cmp	r4, r7
  404858:	d054      	beq.n	404904 <_malloc_r+0x4d8>
  40485a:	68bc      	ldr	r4, [r7, #8]
  40485c:	6862      	ldr	r2, [r4, #4]
  40485e:	f022 0203 	bic.w	r2, r2, #3
  404862:	e75d      	b.n	404720 <_malloc_r+0x2f4>
  404864:	f859 3908 	ldr.w	r3, [r9], #-8
  404868:	4599      	cmp	r9, r3
  40486a:	f040 8086 	bne.w	40497a <_malloc_r+0x54e>
  40486e:	f010 0f03 	tst.w	r0, #3
  404872:	f100 30ff 	add.w	r0, r0, #4294967295
  404876:	d1f5      	bne.n	404864 <_malloc_r+0x438>
  404878:	687b      	ldr	r3, [r7, #4]
  40487a:	ea23 0304 	bic.w	r3, r3, r4
  40487e:	607b      	str	r3, [r7, #4]
  404880:	0064      	lsls	r4, r4, #1
  404882:	429c      	cmp	r4, r3
  404884:	f63f aec7 	bhi.w	404616 <_malloc_r+0x1ea>
  404888:	2c00      	cmp	r4, #0
  40488a:	f43f aec4 	beq.w	404616 <_malloc_r+0x1ea>
  40488e:	421c      	tst	r4, r3
  404890:	4640      	mov	r0, r8
  404892:	f47f ae3e 	bne.w	404512 <_malloc_r+0xe6>
  404896:	0064      	lsls	r4, r4, #1
  404898:	421c      	tst	r4, r3
  40489a:	f100 0004 	add.w	r0, r0, #4
  40489e:	d0fa      	beq.n	404896 <_malloc_r+0x46a>
  4048a0:	e637      	b.n	404512 <_malloc_r+0xe6>
  4048a2:	468c      	mov	ip, r1
  4048a4:	e78c      	b.n	4047c0 <_malloc_r+0x394>
  4048a6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4048aa:	d815      	bhi.n	4048d8 <_malloc_r+0x4ac>
  4048ac:	0bf3      	lsrs	r3, r6, #15
  4048ae:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4048b2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4048b6:	00c3      	lsls	r3, r0, #3
  4048b8:	e5da      	b.n	404470 <_malloc_r+0x44>
  4048ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4048be:	e6ed      	b.n	40469c <_malloc_r+0x270>
  4048c0:	687b      	ldr	r3, [r7, #4]
  4048c2:	1092      	asrs	r2, r2, #2
  4048c4:	2101      	movs	r1, #1
  4048c6:	fa01 f202 	lsl.w	r2, r1, r2
  4048ca:	4313      	orrs	r3, r2
  4048cc:	607b      	str	r3, [r7, #4]
  4048ce:	4662      	mov	r2, ip
  4048d0:	e779      	b.n	4047c6 <_malloc_r+0x39a>
  4048d2:	2301      	movs	r3, #1
  4048d4:	6053      	str	r3, [r2, #4]
  4048d6:	e729      	b.n	40472c <_malloc_r+0x300>
  4048d8:	f240 5254 	movw	r2, #1364	; 0x554
  4048dc:	4293      	cmp	r3, r2
  4048de:	d822      	bhi.n	404926 <_malloc_r+0x4fa>
  4048e0:	0cb3      	lsrs	r3, r6, #18
  4048e2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4048e6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4048ea:	00c3      	lsls	r3, r0, #3
  4048ec:	e5c0      	b.n	404470 <_malloc_r+0x44>
  4048ee:	f103 0b10 	add.w	fp, r3, #16
  4048f2:	e6ae      	b.n	404652 <_malloc_r+0x226>
  4048f4:	2a54      	cmp	r2, #84	; 0x54
  4048f6:	d829      	bhi.n	40494c <_malloc_r+0x520>
  4048f8:	0b1a      	lsrs	r2, r3, #12
  4048fa:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4048fe:	00c9      	lsls	r1, r1, #3
  404900:	326e      	adds	r2, #110	; 0x6e
  404902:	e74d      	b.n	4047a0 <_malloc_r+0x374>
  404904:	4b20      	ldr	r3, [pc, #128]	; (404988 <_malloc_r+0x55c>)
  404906:	6819      	ldr	r1, [r3, #0]
  404908:	4459      	add	r1, fp
  40490a:	6019      	str	r1, [r3, #0]
  40490c:	e6b2      	b.n	404674 <_malloc_r+0x248>
  40490e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  404912:	2800      	cmp	r0, #0
  404914:	f47f aeae 	bne.w	404674 <_malloc_r+0x248>
  404918:	eb08 030b 	add.w	r3, r8, fp
  40491c:	68ba      	ldr	r2, [r7, #8]
  40491e:	f043 0301 	orr.w	r3, r3, #1
  404922:	6053      	str	r3, [r2, #4]
  404924:	e6ee      	b.n	404704 <_malloc_r+0x2d8>
  404926:	207f      	movs	r0, #127	; 0x7f
  404928:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40492c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  404930:	e59e      	b.n	404470 <_malloc_r+0x44>
  404932:	f104 0108 	add.w	r1, r4, #8
  404936:	4628      	mov	r0, r5
  404938:	9300      	str	r3, [sp, #0]
  40493a:	f001 fa89 	bl	405e50 <_free_r>
  40493e:	9b00      	ldr	r3, [sp, #0]
  404940:	6819      	ldr	r1, [r3, #0]
  404942:	e6df      	b.n	404704 <_malloc_r+0x2d8>
  404944:	2001      	movs	r0, #1
  404946:	f04f 0900 	mov.w	r9, #0
  40494a:	e6bc      	b.n	4046c6 <_malloc_r+0x29a>
  40494c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404950:	d805      	bhi.n	40495e <_malloc_r+0x532>
  404952:	0bda      	lsrs	r2, r3, #15
  404954:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404958:	00c9      	lsls	r1, r1, #3
  40495a:	3277      	adds	r2, #119	; 0x77
  40495c:	e720      	b.n	4047a0 <_malloc_r+0x374>
  40495e:	f240 5154 	movw	r1, #1364	; 0x554
  404962:	428a      	cmp	r2, r1
  404964:	d805      	bhi.n	404972 <_malloc_r+0x546>
  404966:	0c9a      	lsrs	r2, r3, #18
  404968:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40496c:	00c9      	lsls	r1, r1, #3
  40496e:	327c      	adds	r2, #124	; 0x7c
  404970:	e716      	b.n	4047a0 <_malloc_r+0x374>
  404972:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  404976:	227e      	movs	r2, #126	; 0x7e
  404978:	e712      	b.n	4047a0 <_malloc_r+0x374>
  40497a:	687b      	ldr	r3, [r7, #4]
  40497c:	e780      	b.n	404880 <_malloc_r+0x454>
  40497e:	08f0      	lsrs	r0, r6, #3
  404980:	f106 0308 	add.w	r3, r6, #8
  404984:	e600      	b.n	404588 <_malloc_r+0x15c>
  404986:	bf00      	nop
  404988:	20445410 	.word	0x20445410

0040498c <memcpy>:
  40498c:	4684      	mov	ip, r0
  40498e:	ea41 0300 	orr.w	r3, r1, r0
  404992:	f013 0303 	ands.w	r3, r3, #3
  404996:	d16d      	bne.n	404a74 <memcpy+0xe8>
  404998:	3a40      	subs	r2, #64	; 0x40
  40499a:	d341      	bcc.n	404a20 <memcpy+0x94>
  40499c:	f851 3b04 	ldr.w	r3, [r1], #4
  4049a0:	f840 3b04 	str.w	r3, [r0], #4
  4049a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4049a8:	f840 3b04 	str.w	r3, [r0], #4
  4049ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4049b0:	f840 3b04 	str.w	r3, [r0], #4
  4049b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4049b8:	f840 3b04 	str.w	r3, [r0], #4
  4049bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4049c0:	f840 3b04 	str.w	r3, [r0], #4
  4049c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4049c8:	f840 3b04 	str.w	r3, [r0], #4
  4049cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4049d0:	f840 3b04 	str.w	r3, [r0], #4
  4049d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4049d8:	f840 3b04 	str.w	r3, [r0], #4
  4049dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4049e0:	f840 3b04 	str.w	r3, [r0], #4
  4049e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4049e8:	f840 3b04 	str.w	r3, [r0], #4
  4049ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4049f0:	f840 3b04 	str.w	r3, [r0], #4
  4049f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4049f8:	f840 3b04 	str.w	r3, [r0], #4
  4049fc:	f851 3b04 	ldr.w	r3, [r1], #4
  404a00:	f840 3b04 	str.w	r3, [r0], #4
  404a04:	f851 3b04 	ldr.w	r3, [r1], #4
  404a08:	f840 3b04 	str.w	r3, [r0], #4
  404a0c:	f851 3b04 	ldr.w	r3, [r1], #4
  404a10:	f840 3b04 	str.w	r3, [r0], #4
  404a14:	f851 3b04 	ldr.w	r3, [r1], #4
  404a18:	f840 3b04 	str.w	r3, [r0], #4
  404a1c:	3a40      	subs	r2, #64	; 0x40
  404a1e:	d2bd      	bcs.n	40499c <memcpy+0x10>
  404a20:	3230      	adds	r2, #48	; 0x30
  404a22:	d311      	bcc.n	404a48 <memcpy+0xbc>
  404a24:	f851 3b04 	ldr.w	r3, [r1], #4
  404a28:	f840 3b04 	str.w	r3, [r0], #4
  404a2c:	f851 3b04 	ldr.w	r3, [r1], #4
  404a30:	f840 3b04 	str.w	r3, [r0], #4
  404a34:	f851 3b04 	ldr.w	r3, [r1], #4
  404a38:	f840 3b04 	str.w	r3, [r0], #4
  404a3c:	f851 3b04 	ldr.w	r3, [r1], #4
  404a40:	f840 3b04 	str.w	r3, [r0], #4
  404a44:	3a10      	subs	r2, #16
  404a46:	d2ed      	bcs.n	404a24 <memcpy+0x98>
  404a48:	320c      	adds	r2, #12
  404a4a:	d305      	bcc.n	404a58 <memcpy+0xcc>
  404a4c:	f851 3b04 	ldr.w	r3, [r1], #4
  404a50:	f840 3b04 	str.w	r3, [r0], #4
  404a54:	3a04      	subs	r2, #4
  404a56:	d2f9      	bcs.n	404a4c <memcpy+0xc0>
  404a58:	3204      	adds	r2, #4
  404a5a:	d008      	beq.n	404a6e <memcpy+0xe2>
  404a5c:	07d2      	lsls	r2, r2, #31
  404a5e:	bf1c      	itt	ne
  404a60:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404a64:	f800 3b01 	strbne.w	r3, [r0], #1
  404a68:	d301      	bcc.n	404a6e <memcpy+0xe2>
  404a6a:	880b      	ldrh	r3, [r1, #0]
  404a6c:	8003      	strh	r3, [r0, #0]
  404a6e:	4660      	mov	r0, ip
  404a70:	4770      	bx	lr
  404a72:	bf00      	nop
  404a74:	2a08      	cmp	r2, #8
  404a76:	d313      	bcc.n	404aa0 <memcpy+0x114>
  404a78:	078b      	lsls	r3, r1, #30
  404a7a:	d08d      	beq.n	404998 <memcpy+0xc>
  404a7c:	f010 0303 	ands.w	r3, r0, #3
  404a80:	d08a      	beq.n	404998 <memcpy+0xc>
  404a82:	f1c3 0304 	rsb	r3, r3, #4
  404a86:	1ad2      	subs	r2, r2, r3
  404a88:	07db      	lsls	r3, r3, #31
  404a8a:	bf1c      	itt	ne
  404a8c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404a90:	f800 3b01 	strbne.w	r3, [r0], #1
  404a94:	d380      	bcc.n	404998 <memcpy+0xc>
  404a96:	f831 3b02 	ldrh.w	r3, [r1], #2
  404a9a:	f820 3b02 	strh.w	r3, [r0], #2
  404a9e:	e77b      	b.n	404998 <memcpy+0xc>
  404aa0:	3a04      	subs	r2, #4
  404aa2:	d3d9      	bcc.n	404a58 <memcpy+0xcc>
  404aa4:	3a01      	subs	r2, #1
  404aa6:	f811 3b01 	ldrb.w	r3, [r1], #1
  404aaa:	f800 3b01 	strb.w	r3, [r0], #1
  404aae:	d2f9      	bcs.n	404aa4 <memcpy+0x118>
  404ab0:	780b      	ldrb	r3, [r1, #0]
  404ab2:	7003      	strb	r3, [r0, #0]
  404ab4:	784b      	ldrb	r3, [r1, #1]
  404ab6:	7043      	strb	r3, [r0, #1]
  404ab8:	788b      	ldrb	r3, [r1, #2]
  404aba:	7083      	strb	r3, [r0, #2]
  404abc:	4660      	mov	r0, ip
  404abe:	4770      	bx	lr

00404ac0 <memset>:
  404ac0:	b470      	push	{r4, r5, r6}
  404ac2:	0786      	lsls	r6, r0, #30
  404ac4:	d046      	beq.n	404b54 <memset+0x94>
  404ac6:	1e54      	subs	r4, r2, #1
  404ac8:	2a00      	cmp	r2, #0
  404aca:	d041      	beq.n	404b50 <memset+0x90>
  404acc:	b2ca      	uxtb	r2, r1
  404ace:	4603      	mov	r3, r0
  404ad0:	e002      	b.n	404ad8 <memset+0x18>
  404ad2:	f114 34ff 	adds.w	r4, r4, #4294967295
  404ad6:	d33b      	bcc.n	404b50 <memset+0x90>
  404ad8:	f803 2b01 	strb.w	r2, [r3], #1
  404adc:	079d      	lsls	r5, r3, #30
  404ade:	d1f8      	bne.n	404ad2 <memset+0x12>
  404ae0:	2c03      	cmp	r4, #3
  404ae2:	d92e      	bls.n	404b42 <memset+0x82>
  404ae4:	b2cd      	uxtb	r5, r1
  404ae6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  404aea:	2c0f      	cmp	r4, #15
  404aec:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404af0:	d919      	bls.n	404b26 <memset+0x66>
  404af2:	f103 0210 	add.w	r2, r3, #16
  404af6:	4626      	mov	r6, r4
  404af8:	3e10      	subs	r6, #16
  404afa:	2e0f      	cmp	r6, #15
  404afc:	f842 5c10 	str.w	r5, [r2, #-16]
  404b00:	f842 5c0c 	str.w	r5, [r2, #-12]
  404b04:	f842 5c08 	str.w	r5, [r2, #-8]
  404b08:	f842 5c04 	str.w	r5, [r2, #-4]
  404b0c:	f102 0210 	add.w	r2, r2, #16
  404b10:	d8f2      	bhi.n	404af8 <memset+0x38>
  404b12:	f1a4 0210 	sub.w	r2, r4, #16
  404b16:	f022 020f 	bic.w	r2, r2, #15
  404b1a:	f004 040f 	and.w	r4, r4, #15
  404b1e:	3210      	adds	r2, #16
  404b20:	2c03      	cmp	r4, #3
  404b22:	4413      	add	r3, r2
  404b24:	d90d      	bls.n	404b42 <memset+0x82>
  404b26:	461e      	mov	r6, r3
  404b28:	4622      	mov	r2, r4
  404b2a:	3a04      	subs	r2, #4
  404b2c:	2a03      	cmp	r2, #3
  404b2e:	f846 5b04 	str.w	r5, [r6], #4
  404b32:	d8fa      	bhi.n	404b2a <memset+0x6a>
  404b34:	1f22      	subs	r2, r4, #4
  404b36:	f022 0203 	bic.w	r2, r2, #3
  404b3a:	3204      	adds	r2, #4
  404b3c:	4413      	add	r3, r2
  404b3e:	f004 0403 	and.w	r4, r4, #3
  404b42:	b12c      	cbz	r4, 404b50 <memset+0x90>
  404b44:	b2c9      	uxtb	r1, r1
  404b46:	441c      	add	r4, r3
  404b48:	f803 1b01 	strb.w	r1, [r3], #1
  404b4c:	429c      	cmp	r4, r3
  404b4e:	d1fb      	bne.n	404b48 <memset+0x88>
  404b50:	bc70      	pop	{r4, r5, r6}
  404b52:	4770      	bx	lr
  404b54:	4614      	mov	r4, r2
  404b56:	4603      	mov	r3, r0
  404b58:	e7c2      	b.n	404ae0 <memset+0x20>
  404b5a:	bf00      	nop

00404b5c <__malloc_lock>:
  404b5c:	4801      	ldr	r0, [pc, #4]	; (404b64 <__malloc_lock+0x8>)
  404b5e:	f001 bc11 	b.w	406384 <__retarget_lock_acquire_recursive>
  404b62:	bf00      	nop
  404b64:	2044a8cc 	.word	0x2044a8cc

00404b68 <__malloc_unlock>:
  404b68:	4801      	ldr	r0, [pc, #4]	; (404b70 <__malloc_unlock+0x8>)
  404b6a:	f001 bc0d 	b.w	406388 <__retarget_lock_release_recursive>
  404b6e:	bf00      	nop
  404b70:	2044a8cc 	.word	0x2044a8cc

00404b74 <_sbrk_r>:
  404b74:	b538      	push	{r3, r4, r5, lr}
  404b76:	4c07      	ldr	r4, [pc, #28]	; (404b94 <_sbrk_r+0x20>)
  404b78:	2300      	movs	r3, #0
  404b7a:	4605      	mov	r5, r0
  404b7c:	4608      	mov	r0, r1
  404b7e:	6023      	str	r3, [r4, #0]
  404b80:	f7fd fd8c 	bl	40269c <_sbrk>
  404b84:	1c43      	adds	r3, r0, #1
  404b86:	d000      	beq.n	404b8a <_sbrk_r+0x16>
  404b88:	bd38      	pop	{r3, r4, r5, pc}
  404b8a:	6823      	ldr	r3, [r4, #0]
  404b8c:	2b00      	cmp	r3, #0
  404b8e:	d0fb      	beq.n	404b88 <_sbrk_r+0x14>
  404b90:	602b      	str	r3, [r5, #0]
  404b92:	bd38      	pop	{r3, r4, r5, pc}
  404b94:	2044a8e0 	.word	0x2044a8e0

00404b98 <__sprint_r.part.0>:
  404b98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404b9c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  404b9e:	049c      	lsls	r4, r3, #18
  404ba0:	4693      	mov	fp, r2
  404ba2:	d52f      	bpl.n	404c04 <__sprint_r.part.0+0x6c>
  404ba4:	6893      	ldr	r3, [r2, #8]
  404ba6:	6812      	ldr	r2, [r2, #0]
  404ba8:	b353      	cbz	r3, 404c00 <__sprint_r.part.0+0x68>
  404baa:	460e      	mov	r6, r1
  404bac:	4607      	mov	r7, r0
  404bae:	f102 0908 	add.w	r9, r2, #8
  404bb2:	e919 0420 	ldmdb	r9, {r5, sl}
  404bb6:	ea5f 089a 	movs.w	r8, sl, lsr #2
  404bba:	d017      	beq.n	404bec <__sprint_r.part.0+0x54>
  404bbc:	3d04      	subs	r5, #4
  404bbe:	2400      	movs	r4, #0
  404bc0:	e001      	b.n	404bc6 <__sprint_r.part.0+0x2e>
  404bc2:	45a0      	cmp	r8, r4
  404bc4:	d010      	beq.n	404be8 <__sprint_r.part.0+0x50>
  404bc6:	4632      	mov	r2, r6
  404bc8:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404bcc:	4638      	mov	r0, r7
  404bce:	f001 f8bb 	bl	405d48 <_fputwc_r>
  404bd2:	1c43      	adds	r3, r0, #1
  404bd4:	f104 0401 	add.w	r4, r4, #1
  404bd8:	d1f3      	bne.n	404bc2 <__sprint_r.part.0+0x2a>
  404bda:	2300      	movs	r3, #0
  404bdc:	f8cb 3008 	str.w	r3, [fp, #8]
  404be0:	f8cb 3004 	str.w	r3, [fp, #4]
  404be4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404be8:	f8db 3008 	ldr.w	r3, [fp, #8]
  404bec:	f02a 0a03 	bic.w	sl, sl, #3
  404bf0:	eba3 030a 	sub.w	r3, r3, sl
  404bf4:	f8cb 3008 	str.w	r3, [fp, #8]
  404bf8:	f109 0908 	add.w	r9, r9, #8
  404bfc:	2b00      	cmp	r3, #0
  404bfe:	d1d8      	bne.n	404bb2 <__sprint_r.part.0+0x1a>
  404c00:	2000      	movs	r0, #0
  404c02:	e7ea      	b.n	404bda <__sprint_r.part.0+0x42>
  404c04:	f001 fa0a 	bl	40601c <__sfvwrite_r>
  404c08:	2300      	movs	r3, #0
  404c0a:	f8cb 3008 	str.w	r3, [fp, #8]
  404c0e:	f8cb 3004 	str.w	r3, [fp, #4]
  404c12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404c16:	bf00      	nop

00404c18 <_vfiprintf_r>:
  404c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404c1c:	b0ad      	sub	sp, #180	; 0xb4
  404c1e:	461d      	mov	r5, r3
  404c20:	468b      	mov	fp, r1
  404c22:	4690      	mov	r8, r2
  404c24:	9307      	str	r3, [sp, #28]
  404c26:	9006      	str	r0, [sp, #24]
  404c28:	b118      	cbz	r0, 404c32 <_vfiprintf_r+0x1a>
  404c2a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404c2c:	2b00      	cmp	r3, #0
  404c2e:	f000 80f3 	beq.w	404e18 <_vfiprintf_r+0x200>
  404c32:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404c36:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  404c3a:	07df      	lsls	r7, r3, #31
  404c3c:	b281      	uxth	r1, r0
  404c3e:	d402      	bmi.n	404c46 <_vfiprintf_r+0x2e>
  404c40:	058e      	lsls	r6, r1, #22
  404c42:	f140 80fc 	bpl.w	404e3e <_vfiprintf_r+0x226>
  404c46:	048c      	lsls	r4, r1, #18
  404c48:	d40a      	bmi.n	404c60 <_vfiprintf_r+0x48>
  404c4a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404c4e:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  404c52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  404c56:	f8ab 100c 	strh.w	r1, [fp, #12]
  404c5a:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  404c5e:	b289      	uxth	r1, r1
  404c60:	0708      	lsls	r0, r1, #28
  404c62:	f140 80b3 	bpl.w	404dcc <_vfiprintf_r+0x1b4>
  404c66:	f8db 3010 	ldr.w	r3, [fp, #16]
  404c6a:	2b00      	cmp	r3, #0
  404c6c:	f000 80ae 	beq.w	404dcc <_vfiprintf_r+0x1b4>
  404c70:	f001 031a 	and.w	r3, r1, #26
  404c74:	2b0a      	cmp	r3, #10
  404c76:	f000 80b5 	beq.w	404de4 <_vfiprintf_r+0x1cc>
  404c7a:	2300      	movs	r3, #0
  404c7c:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  404c80:	930b      	str	r3, [sp, #44]	; 0x2c
  404c82:	9311      	str	r3, [sp, #68]	; 0x44
  404c84:	9310      	str	r3, [sp, #64]	; 0x40
  404c86:	9303      	str	r3, [sp, #12]
  404c88:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  404c8c:	46ca      	mov	sl, r9
  404c8e:	f8cd b010 	str.w	fp, [sp, #16]
  404c92:	f898 3000 	ldrb.w	r3, [r8]
  404c96:	4644      	mov	r4, r8
  404c98:	b1fb      	cbz	r3, 404cda <_vfiprintf_r+0xc2>
  404c9a:	2b25      	cmp	r3, #37	; 0x25
  404c9c:	d102      	bne.n	404ca4 <_vfiprintf_r+0x8c>
  404c9e:	e01c      	b.n	404cda <_vfiprintf_r+0xc2>
  404ca0:	2b25      	cmp	r3, #37	; 0x25
  404ca2:	d003      	beq.n	404cac <_vfiprintf_r+0x94>
  404ca4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404ca8:	2b00      	cmp	r3, #0
  404caa:	d1f9      	bne.n	404ca0 <_vfiprintf_r+0x88>
  404cac:	eba4 0508 	sub.w	r5, r4, r8
  404cb0:	b19d      	cbz	r5, 404cda <_vfiprintf_r+0xc2>
  404cb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404cb4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404cb6:	f8ca 8000 	str.w	r8, [sl]
  404cba:	3301      	adds	r3, #1
  404cbc:	442a      	add	r2, r5
  404cbe:	2b07      	cmp	r3, #7
  404cc0:	f8ca 5004 	str.w	r5, [sl, #4]
  404cc4:	9211      	str	r2, [sp, #68]	; 0x44
  404cc6:	9310      	str	r3, [sp, #64]	; 0x40
  404cc8:	dd7a      	ble.n	404dc0 <_vfiprintf_r+0x1a8>
  404cca:	2a00      	cmp	r2, #0
  404ccc:	f040 84b0 	bne.w	405630 <_vfiprintf_r+0xa18>
  404cd0:	9b03      	ldr	r3, [sp, #12]
  404cd2:	9210      	str	r2, [sp, #64]	; 0x40
  404cd4:	442b      	add	r3, r5
  404cd6:	46ca      	mov	sl, r9
  404cd8:	9303      	str	r3, [sp, #12]
  404cda:	7823      	ldrb	r3, [r4, #0]
  404cdc:	2b00      	cmp	r3, #0
  404cde:	f000 83e0 	beq.w	4054a2 <_vfiprintf_r+0x88a>
  404ce2:	2000      	movs	r0, #0
  404ce4:	f04f 0300 	mov.w	r3, #0
  404ce8:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  404cec:	f104 0801 	add.w	r8, r4, #1
  404cf0:	7862      	ldrb	r2, [r4, #1]
  404cf2:	4605      	mov	r5, r0
  404cf4:	4606      	mov	r6, r0
  404cf6:	4603      	mov	r3, r0
  404cf8:	f04f 34ff 	mov.w	r4, #4294967295
  404cfc:	f108 0801 	add.w	r8, r8, #1
  404d00:	f1a2 0120 	sub.w	r1, r2, #32
  404d04:	2958      	cmp	r1, #88	; 0x58
  404d06:	f200 82de 	bhi.w	4052c6 <_vfiprintf_r+0x6ae>
  404d0a:	e8df f011 	tbh	[pc, r1, lsl #1]
  404d0e:	0221      	.short	0x0221
  404d10:	02dc02dc 	.word	0x02dc02dc
  404d14:	02dc0229 	.word	0x02dc0229
  404d18:	02dc02dc 	.word	0x02dc02dc
  404d1c:	02dc02dc 	.word	0x02dc02dc
  404d20:	028902dc 	.word	0x028902dc
  404d24:	02dc0295 	.word	0x02dc0295
  404d28:	02bd00a2 	.word	0x02bd00a2
  404d2c:	019f02dc 	.word	0x019f02dc
  404d30:	01a401a4 	.word	0x01a401a4
  404d34:	01a401a4 	.word	0x01a401a4
  404d38:	01a401a4 	.word	0x01a401a4
  404d3c:	01a401a4 	.word	0x01a401a4
  404d40:	02dc01a4 	.word	0x02dc01a4
  404d44:	02dc02dc 	.word	0x02dc02dc
  404d48:	02dc02dc 	.word	0x02dc02dc
  404d4c:	02dc02dc 	.word	0x02dc02dc
  404d50:	02dc02dc 	.word	0x02dc02dc
  404d54:	01b202dc 	.word	0x01b202dc
  404d58:	02dc02dc 	.word	0x02dc02dc
  404d5c:	02dc02dc 	.word	0x02dc02dc
  404d60:	02dc02dc 	.word	0x02dc02dc
  404d64:	02dc02dc 	.word	0x02dc02dc
  404d68:	02dc02dc 	.word	0x02dc02dc
  404d6c:	02dc0197 	.word	0x02dc0197
  404d70:	02dc02dc 	.word	0x02dc02dc
  404d74:	02dc02dc 	.word	0x02dc02dc
  404d78:	02dc019b 	.word	0x02dc019b
  404d7c:	025302dc 	.word	0x025302dc
  404d80:	02dc02dc 	.word	0x02dc02dc
  404d84:	02dc02dc 	.word	0x02dc02dc
  404d88:	02dc02dc 	.word	0x02dc02dc
  404d8c:	02dc02dc 	.word	0x02dc02dc
  404d90:	02dc02dc 	.word	0x02dc02dc
  404d94:	021b025a 	.word	0x021b025a
  404d98:	02dc02dc 	.word	0x02dc02dc
  404d9c:	026e02dc 	.word	0x026e02dc
  404da0:	02dc021b 	.word	0x02dc021b
  404da4:	027302dc 	.word	0x027302dc
  404da8:	01f502dc 	.word	0x01f502dc
  404dac:	02090182 	.word	0x02090182
  404db0:	02dc02d7 	.word	0x02dc02d7
  404db4:	02dc029a 	.word	0x02dc029a
  404db8:	02dc00a7 	.word	0x02dc00a7
  404dbc:	022e02dc 	.word	0x022e02dc
  404dc0:	f10a 0a08 	add.w	sl, sl, #8
  404dc4:	9b03      	ldr	r3, [sp, #12]
  404dc6:	442b      	add	r3, r5
  404dc8:	9303      	str	r3, [sp, #12]
  404dca:	e786      	b.n	404cda <_vfiprintf_r+0xc2>
  404dcc:	4659      	mov	r1, fp
  404dce:	9806      	ldr	r0, [sp, #24]
  404dd0:	f000 fdac 	bl	40592c <__swsetup_r>
  404dd4:	bb18      	cbnz	r0, 404e1e <_vfiprintf_r+0x206>
  404dd6:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  404dda:	f001 031a 	and.w	r3, r1, #26
  404dde:	2b0a      	cmp	r3, #10
  404de0:	f47f af4b 	bne.w	404c7a <_vfiprintf_r+0x62>
  404de4:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  404de8:	2b00      	cmp	r3, #0
  404dea:	f6ff af46 	blt.w	404c7a <_vfiprintf_r+0x62>
  404dee:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404df2:	07db      	lsls	r3, r3, #31
  404df4:	d405      	bmi.n	404e02 <_vfiprintf_r+0x1ea>
  404df6:	058f      	lsls	r7, r1, #22
  404df8:	d403      	bmi.n	404e02 <_vfiprintf_r+0x1ea>
  404dfa:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404dfe:	f001 fac3 	bl	406388 <__retarget_lock_release_recursive>
  404e02:	462b      	mov	r3, r5
  404e04:	4642      	mov	r2, r8
  404e06:	4659      	mov	r1, fp
  404e08:	9806      	ldr	r0, [sp, #24]
  404e0a:	f000 fd4d 	bl	4058a8 <__sbprintf>
  404e0e:	9003      	str	r0, [sp, #12]
  404e10:	9803      	ldr	r0, [sp, #12]
  404e12:	b02d      	add	sp, #180	; 0xb4
  404e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e18:	f000 fef4 	bl	405c04 <__sinit>
  404e1c:	e709      	b.n	404c32 <_vfiprintf_r+0x1a>
  404e1e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404e22:	07d9      	lsls	r1, r3, #31
  404e24:	d404      	bmi.n	404e30 <_vfiprintf_r+0x218>
  404e26:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404e2a:	059a      	lsls	r2, r3, #22
  404e2c:	f140 84aa 	bpl.w	405784 <_vfiprintf_r+0xb6c>
  404e30:	f04f 33ff 	mov.w	r3, #4294967295
  404e34:	9303      	str	r3, [sp, #12]
  404e36:	9803      	ldr	r0, [sp, #12]
  404e38:	b02d      	add	sp, #180	; 0xb4
  404e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e3e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404e42:	f001 fa9f 	bl	406384 <__retarget_lock_acquire_recursive>
  404e46:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  404e4a:	b281      	uxth	r1, r0
  404e4c:	e6fb      	b.n	404c46 <_vfiprintf_r+0x2e>
  404e4e:	4276      	negs	r6, r6
  404e50:	9207      	str	r2, [sp, #28]
  404e52:	f043 0304 	orr.w	r3, r3, #4
  404e56:	f898 2000 	ldrb.w	r2, [r8]
  404e5a:	e74f      	b.n	404cfc <_vfiprintf_r+0xe4>
  404e5c:	9608      	str	r6, [sp, #32]
  404e5e:	069e      	lsls	r6, r3, #26
  404e60:	f100 8450 	bmi.w	405704 <_vfiprintf_r+0xaec>
  404e64:	9907      	ldr	r1, [sp, #28]
  404e66:	06dd      	lsls	r5, r3, #27
  404e68:	460a      	mov	r2, r1
  404e6a:	f100 83ef 	bmi.w	40564c <_vfiprintf_r+0xa34>
  404e6e:	0658      	lsls	r0, r3, #25
  404e70:	f140 83ec 	bpl.w	40564c <_vfiprintf_r+0xa34>
  404e74:	880e      	ldrh	r6, [r1, #0]
  404e76:	3104      	adds	r1, #4
  404e78:	2700      	movs	r7, #0
  404e7a:	2201      	movs	r2, #1
  404e7c:	9107      	str	r1, [sp, #28]
  404e7e:	f04f 0100 	mov.w	r1, #0
  404e82:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  404e86:	2500      	movs	r5, #0
  404e88:	1c61      	adds	r1, r4, #1
  404e8a:	f000 8116 	beq.w	4050ba <_vfiprintf_r+0x4a2>
  404e8e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  404e92:	9102      	str	r1, [sp, #8]
  404e94:	ea56 0107 	orrs.w	r1, r6, r7
  404e98:	f040 8114 	bne.w	4050c4 <_vfiprintf_r+0x4ac>
  404e9c:	2c00      	cmp	r4, #0
  404e9e:	f040 835c 	bne.w	40555a <_vfiprintf_r+0x942>
  404ea2:	2a00      	cmp	r2, #0
  404ea4:	f040 83b7 	bne.w	405616 <_vfiprintf_r+0x9fe>
  404ea8:	f013 0301 	ands.w	r3, r3, #1
  404eac:	9305      	str	r3, [sp, #20]
  404eae:	f000 8457 	beq.w	405760 <_vfiprintf_r+0xb48>
  404eb2:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  404eb6:	2330      	movs	r3, #48	; 0x30
  404eb8:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  404ebc:	9b05      	ldr	r3, [sp, #20]
  404ebe:	42a3      	cmp	r3, r4
  404ec0:	bfb8      	it	lt
  404ec2:	4623      	movlt	r3, r4
  404ec4:	9301      	str	r3, [sp, #4]
  404ec6:	b10d      	cbz	r5, 404ecc <_vfiprintf_r+0x2b4>
  404ec8:	3301      	adds	r3, #1
  404eca:	9301      	str	r3, [sp, #4]
  404ecc:	9b02      	ldr	r3, [sp, #8]
  404ece:	f013 0302 	ands.w	r3, r3, #2
  404ed2:	9309      	str	r3, [sp, #36]	; 0x24
  404ed4:	d002      	beq.n	404edc <_vfiprintf_r+0x2c4>
  404ed6:	9b01      	ldr	r3, [sp, #4]
  404ed8:	3302      	adds	r3, #2
  404eda:	9301      	str	r3, [sp, #4]
  404edc:	9b02      	ldr	r3, [sp, #8]
  404ede:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  404ee2:	930a      	str	r3, [sp, #40]	; 0x28
  404ee4:	f040 8217 	bne.w	405316 <_vfiprintf_r+0x6fe>
  404ee8:	9b08      	ldr	r3, [sp, #32]
  404eea:	9a01      	ldr	r2, [sp, #4]
  404eec:	1a9d      	subs	r5, r3, r2
  404eee:	2d00      	cmp	r5, #0
  404ef0:	f340 8211 	ble.w	405316 <_vfiprintf_r+0x6fe>
  404ef4:	2d10      	cmp	r5, #16
  404ef6:	f340 8490 	ble.w	40581a <_vfiprintf_r+0xc02>
  404efa:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404efc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404efe:	4ec4      	ldr	r6, [pc, #784]	; (405210 <_vfiprintf_r+0x5f8>)
  404f00:	46d6      	mov	lr, sl
  404f02:	2710      	movs	r7, #16
  404f04:	46a2      	mov	sl, r4
  404f06:	4619      	mov	r1, r3
  404f08:	9c06      	ldr	r4, [sp, #24]
  404f0a:	e007      	b.n	404f1c <_vfiprintf_r+0x304>
  404f0c:	f101 0c02 	add.w	ip, r1, #2
  404f10:	f10e 0e08 	add.w	lr, lr, #8
  404f14:	4601      	mov	r1, r0
  404f16:	3d10      	subs	r5, #16
  404f18:	2d10      	cmp	r5, #16
  404f1a:	dd11      	ble.n	404f40 <_vfiprintf_r+0x328>
  404f1c:	1c48      	adds	r0, r1, #1
  404f1e:	3210      	adds	r2, #16
  404f20:	2807      	cmp	r0, #7
  404f22:	9211      	str	r2, [sp, #68]	; 0x44
  404f24:	e88e 00c0 	stmia.w	lr, {r6, r7}
  404f28:	9010      	str	r0, [sp, #64]	; 0x40
  404f2a:	ddef      	ble.n	404f0c <_vfiprintf_r+0x2f4>
  404f2c:	2a00      	cmp	r2, #0
  404f2e:	f040 81e4 	bne.w	4052fa <_vfiprintf_r+0x6e2>
  404f32:	3d10      	subs	r5, #16
  404f34:	2d10      	cmp	r5, #16
  404f36:	4611      	mov	r1, r2
  404f38:	f04f 0c01 	mov.w	ip, #1
  404f3c:	46ce      	mov	lr, r9
  404f3e:	dced      	bgt.n	404f1c <_vfiprintf_r+0x304>
  404f40:	4654      	mov	r4, sl
  404f42:	4661      	mov	r1, ip
  404f44:	46f2      	mov	sl, lr
  404f46:	442a      	add	r2, r5
  404f48:	2907      	cmp	r1, #7
  404f4a:	9211      	str	r2, [sp, #68]	; 0x44
  404f4c:	f8ca 6000 	str.w	r6, [sl]
  404f50:	f8ca 5004 	str.w	r5, [sl, #4]
  404f54:	9110      	str	r1, [sp, #64]	; 0x40
  404f56:	f300 82ec 	bgt.w	405532 <_vfiprintf_r+0x91a>
  404f5a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404f5e:	f10a 0a08 	add.w	sl, sl, #8
  404f62:	1c48      	adds	r0, r1, #1
  404f64:	2d00      	cmp	r5, #0
  404f66:	f040 81de 	bne.w	405326 <_vfiprintf_r+0x70e>
  404f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404f6c:	2b00      	cmp	r3, #0
  404f6e:	f000 81f8 	beq.w	405362 <_vfiprintf_r+0x74a>
  404f72:	3202      	adds	r2, #2
  404f74:	a90e      	add	r1, sp, #56	; 0x38
  404f76:	2302      	movs	r3, #2
  404f78:	2807      	cmp	r0, #7
  404f7a:	9211      	str	r2, [sp, #68]	; 0x44
  404f7c:	9010      	str	r0, [sp, #64]	; 0x40
  404f7e:	e88a 000a 	stmia.w	sl, {r1, r3}
  404f82:	f340 81ea 	ble.w	40535a <_vfiprintf_r+0x742>
  404f86:	2a00      	cmp	r2, #0
  404f88:	f040 838c 	bne.w	4056a4 <_vfiprintf_r+0xa8c>
  404f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404f8e:	2b80      	cmp	r3, #128	; 0x80
  404f90:	f04f 0001 	mov.w	r0, #1
  404f94:	4611      	mov	r1, r2
  404f96:	46ca      	mov	sl, r9
  404f98:	f040 81e7 	bne.w	40536a <_vfiprintf_r+0x752>
  404f9c:	9b08      	ldr	r3, [sp, #32]
  404f9e:	9d01      	ldr	r5, [sp, #4]
  404fa0:	1b5e      	subs	r6, r3, r5
  404fa2:	2e00      	cmp	r6, #0
  404fa4:	f340 81e1 	ble.w	40536a <_vfiprintf_r+0x752>
  404fa8:	2e10      	cmp	r6, #16
  404faa:	4d9a      	ldr	r5, [pc, #616]	; (405214 <_vfiprintf_r+0x5fc>)
  404fac:	f340 8450 	ble.w	405850 <_vfiprintf_r+0xc38>
  404fb0:	46d4      	mov	ip, sl
  404fb2:	2710      	movs	r7, #16
  404fb4:	46a2      	mov	sl, r4
  404fb6:	9c06      	ldr	r4, [sp, #24]
  404fb8:	e007      	b.n	404fca <_vfiprintf_r+0x3b2>
  404fba:	f101 0e02 	add.w	lr, r1, #2
  404fbe:	f10c 0c08 	add.w	ip, ip, #8
  404fc2:	4601      	mov	r1, r0
  404fc4:	3e10      	subs	r6, #16
  404fc6:	2e10      	cmp	r6, #16
  404fc8:	dd11      	ble.n	404fee <_vfiprintf_r+0x3d6>
  404fca:	1c48      	adds	r0, r1, #1
  404fcc:	3210      	adds	r2, #16
  404fce:	2807      	cmp	r0, #7
  404fd0:	9211      	str	r2, [sp, #68]	; 0x44
  404fd2:	e88c 00a0 	stmia.w	ip, {r5, r7}
  404fd6:	9010      	str	r0, [sp, #64]	; 0x40
  404fd8:	ddef      	ble.n	404fba <_vfiprintf_r+0x3a2>
  404fda:	2a00      	cmp	r2, #0
  404fdc:	f040 829d 	bne.w	40551a <_vfiprintf_r+0x902>
  404fe0:	3e10      	subs	r6, #16
  404fe2:	2e10      	cmp	r6, #16
  404fe4:	f04f 0e01 	mov.w	lr, #1
  404fe8:	4611      	mov	r1, r2
  404fea:	46cc      	mov	ip, r9
  404fec:	dced      	bgt.n	404fca <_vfiprintf_r+0x3b2>
  404fee:	4654      	mov	r4, sl
  404ff0:	46e2      	mov	sl, ip
  404ff2:	4432      	add	r2, r6
  404ff4:	f1be 0f07 	cmp.w	lr, #7
  404ff8:	9211      	str	r2, [sp, #68]	; 0x44
  404ffa:	e88a 0060 	stmia.w	sl, {r5, r6}
  404ffe:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  405002:	f300 8369 	bgt.w	4056d8 <_vfiprintf_r+0xac0>
  405006:	f10a 0a08 	add.w	sl, sl, #8
  40500a:	f10e 0001 	add.w	r0, lr, #1
  40500e:	4671      	mov	r1, lr
  405010:	e1ab      	b.n	40536a <_vfiprintf_r+0x752>
  405012:	9608      	str	r6, [sp, #32]
  405014:	f013 0220 	ands.w	r2, r3, #32
  405018:	f040 838c 	bne.w	405734 <_vfiprintf_r+0xb1c>
  40501c:	f013 0110 	ands.w	r1, r3, #16
  405020:	f040 831a 	bne.w	405658 <_vfiprintf_r+0xa40>
  405024:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  405028:	f000 8316 	beq.w	405658 <_vfiprintf_r+0xa40>
  40502c:	9807      	ldr	r0, [sp, #28]
  40502e:	460a      	mov	r2, r1
  405030:	4601      	mov	r1, r0
  405032:	3104      	adds	r1, #4
  405034:	8806      	ldrh	r6, [r0, #0]
  405036:	9107      	str	r1, [sp, #28]
  405038:	2700      	movs	r7, #0
  40503a:	e720      	b.n	404e7e <_vfiprintf_r+0x266>
  40503c:	9608      	str	r6, [sp, #32]
  40503e:	f043 0310 	orr.w	r3, r3, #16
  405042:	e7e7      	b.n	405014 <_vfiprintf_r+0x3fc>
  405044:	9608      	str	r6, [sp, #32]
  405046:	f043 0310 	orr.w	r3, r3, #16
  40504a:	e708      	b.n	404e5e <_vfiprintf_r+0x246>
  40504c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405050:	f898 2000 	ldrb.w	r2, [r8]
  405054:	e652      	b.n	404cfc <_vfiprintf_r+0xe4>
  405056:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40505a:	2600      	movs	r6, #0
  40505c:	f818 2b01 	ldrb.w	r2, [r8], #1
  405060:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  405064:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  405068:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40506c:	2909      	cmp	r1, #9
  40506e:	d9f5      	bls.n	40505c <_vfiprintf_r+0x444>
  405070:	e646      	b.n	404d00 <_vfiprintf_r+0xe8>
  405072:	9608      	str	r6, [sp, #32]
  405074:	2800      	cmp	r0, #0
  405076:	f040 8408 	bne.w	40588a <_vfiprintf_r+0xc72>
  40507a:	f043 0310 	orr.w	r3, r3, #16
  40507e:	069e      	lsls	r6, r3, #26
  405080:	f100 834c 	bmi.w	40571c <_vfiprintf_r+0xb04>
  405084:	06dd      	lsls	r5, r3, #27
  405086:	f100 82f3 	bmi.w	405670 <_vfiprintf_r+0xa58>
  40508a:	0658      	lsls	r0, r3, #25
  40508c:	f140 82f0 	bpl.w	405670 <_vfiprintf_r+0xa58>
  405090:	9d07      	ldr	r5, [sp, #28]
  405092:	f9b5 6000 	ldrsh.w	r6, [r5]
  405096:	462a      	mov	r2, r5
  405098:	17f7      	asrs	r7, r6, #31
  40509a:	3204      	adds	r2, #4
  40509c:	4630      	mov	r0, r6
  40509e:	4639      	mov	r1, r7
  4050a0:	9207      	str	r2, [sp, #28]
  4050a2:	2800      	cmp	r0, #0
  4050a4:	f171 0200 	sbcs.w	r2, r1, #0
  4050a8:	f2c0 835d 	blt.w	405766 <_vfiprintf_r+0xb4e>
  4050ac:	1c61      	adds	r1, r4, #1
  4050ae:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4050b2:	f04f 0201 	mov.w	r2, #1
  4050b6:	f47f aeea 	bne.w	404e8e <_vfiprintf_r+0x276>
  4050ba:	ea56 0107 	orrs.w	r1, r6, r7
  4050be:	f000 824d 	beq.w	40555c <_vfiprintf_r+0x944>
  4050c2:	9302      	str	r3, [sp, #8]
  4050c4:	2a01      	cmp	r2, #1
  4050c6:	f000 828c 	beq.w	4055e2 <_vfiprintf_r+0x9ca>
  4050ca:	2a02      	cmp	r2, #2
  4050cc:	f040 825c 	bne.w	405588 <_vfiprintf_r+0x970>
  4050d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4050d2:	46cb      	mov	fp, r9
  4050d4:	0933      	lsrs	r3, r6, #4
  4050d6:	f006 010f 	and.w	r1, r6, #15
  4050da:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4050de:	093a      	lsrs	r2, r7, #4
  4050e0:	461e      	mov	r6, r3
  4050e2:	4617      	mov	r7, r2
  4050e4:	5c43      	ldrb	r3, [r0, r1]
  4050e6:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4050ea:	ea56 0307 	orrs.w	r3, r6, r7
  4050ee:	d1f1      	bne.n	4050d4 <_vfiprintf_r+0x4bc>
  4050f0:	eba9 030b 	sub.w	r3, r9, fp
  4050f4:	9305      	str	r3, [sp, #20]
  4050f6:	e6e1      	b.n	404ebc <_vfiprintf_r+0x2a4>
  4050f8:	2800      	cmp	r0, #0
  4050fa:	f040 83c0 	bne.w	40587e <_vfiprintf_r+0xc66>
  4050fe:	0699      	lsls	r1, r3, #26
  405100:	f100 8367 	bmi.w	4057d2 <_vfiprintf_r+0xbba>
  405104:	06da      	lsls	r2, r3, #27
  405106:	f100 80f1 	bmi.w	4052ec <_vfiprintf_r+0x6d4>
  40510a:	065b      	lsls	r3, r3, #25
  40510c:	f140 80ee 	bpl.w	4052ec <_vfiprintf_r+0x6d4>
  405110:	9a07      	ldr	r2, [sp, #28]
  405112:	6813      	ldr	r3, [r2, #0]
  405114:	3204      	adds	r2, #4
  405116:	9207      	str	r2, [sp, #28]
  405118:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  40511c:	801a      	strh	r2, [r3, #0]
  40511e:	e5b8      	b.n	404c92 <_vfiprintf_r+0x7a>
  405120:	9807      	ldr	r0, [sp, #28]
  405122:	4a3d      	ldr	r2, [pc, #244]	; (405218 <_vfiprintf_r+0x600>)
  405124:	9608      	str	r6, [sp, #32]
  405126:	920b      	str	r2, [sp, #44]	; 0x2c
  405128:	6806      	ldr	r6, [r0, #0]
  40512a:	2278      	movs	r2, #120	; 0x78
  40512c:	2130      	movs	r1, #48	; 0x30
  40512e:	3004      	adds	r0, #4
  405130:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  405134:	f043 0302 	orr.w	r3, r3, #2
  405138:	9007      	str	r0, [sp, #28]
  40513a:	2700      	movs	r7, #0
  40513c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405140:	2202      	movs	r2, #2
  405142:	e69c      	b.n	404e7e <_vfiprintf_r+0x266>
  405144:	9608      	str	r6, [sp, #32]
  405146:	2800      	cmp	r0, #0
  405148:	d099      	beq.n	40507e <_vfiprintf_r+0x466>
  40514a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40514e:	e796      	b.n	40507e <_vfiprintf_r+0x466>
  405150:	f898 2000 	ldrb.w	r2, [r8]
  405154:	2d00      	cmp	r5, #0
  405156:	f47f add1 	bne.w	404cfc <_vfiprintf_r+0xe4>
  40515a:	2001      	movs	r0, #1
  40515c:	2520      	movs	r5, #32
  40515e:	e5cd      	b.n	404cfc <_vfiprintf_r+0xe4>
  405160:	f043 0301 	orr.w	r3, r3, #1
  405164:	f898 2000 	ldrb.w	r2, [r8]
  405168:	e5c8      	b.n	404cfc <_vfiprintf_r+0xe4>
  40516a:	9608      	str	r6, [sp, #32]
  40516c:	2800      	cmp	r0, #0
  40516e:	f040 8393 	bne.w	405898 <_vfiprintf_r+0xc80>
  405172:	4929      	ldr	r1, [pc, #164]	; (405218 <_vfiprintf_r+0x600>)
  405174:	910b      	str	r1, [sp, #44]	; 0x2c
  405176:	069f      	lsls	r7, r3, #26
  405178:	f100 82e8 	bmi.w	40574c <_vfiprintf_r+0xb34>
  40517c:	9807      	ldr	r0, [sp, #28]
  40517e:	06de      	lsls	r6, r3, #27
  405180:	4601      	mov	r1, r0
  405182:	f100 8270 	bmi.w	405666 <_vfiprintf_r+0xa4e>
  405186:	065d      	lsls	r5, r3, #25
  405188:	f140 826d 	bpl.w	405666 <_vfiprintf_r+0xa4e>
  40518c:	3104      	adds	r1, #4
  40518e:	8806      	ldrh	r6, [r0, #0]
  405190:	9107      	str	r1, [sp, #28]
  405192:	2700      	movs	r7, #0
  405194:	07d8      	lsls	r0, r3, #31
  405196:	f140 8222 	bpl.w	4055de <_vfiprintf_r+0x9c6>
  40519a:	ea56 0107 	orrs.w	r1, r6, r7
  40519e:	f000 821e 	beq.w	4055de <_vfiprintf_r+0x9c6>
  4051a2:	2130      	movs	r1, #48	; 0x30
  4051a4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4051a8:	f043 0302 	orr.w	r3, r3, #2
  4051ac:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4051b0:	2202      	movs	r2, #2
  4051b2:	e664      	b.n	404e7e <_vfiprintf_r+0x266>
  4051b4:	9608      	str	r6, [sp, #32]
  4051b6:	2800      	cmp	r0, #0
  4051b8:	f040 836b 	bne.w	405892 <_vfiprintf_r+0xc7a>
  4051bc:	4917      	ldr	r1, [pc, #92]	; (40521c <_vfiprintf_r+0x604>)
  4051be:	910b      	str	r1, [sp, #44]	; 0x2c
  4051c0:	e7d9      	b.n	405176 <_vfiprintf_r+0x55e>
  4051c2:	9907      	ldr	r1, [sp, #28]
  4051c4:	9608      	str	r6, [sp, #32]
  4051c6:	680a      	ldr	r2, [r1, #0]
  4051c8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4051cc:	f04f 0000 	mov.w	r0, #0
  4051d0:	460a      	mov	r2, r1
  4051d2:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4051d6:	3204      	adds	r2, #4
  4051d8:	2001      	movs	r0, #1
  4051da:	9001      	str	r0, [sp, #4]
  4051dc:	9207      	str	r2, [sp, #28]
  4051de:	9005      	str	r0, [sp, #20]
  4051e0:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4051e4:	9302      	str	r3, [sp, #8]
  4051e6:	2400      	movs	r4, #0
  4051e8:	e670      	b.n	404ecc <_vfiprintf_r+0x2b4>
  4051ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4051ee:	f898 2000 	ldrb.w	r2, [r8]
  4051f2:	e583      	b.n	404cfc <_vfiprintf_r+0xe4>
  4051f4:	f898 2000 	ldrb.w	r2, [r8]
  4051f8:	2a6c      	cmp	r2, #108	; 0x6c
  4051fa:	bf03      	ittte	eq
  4051fc:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  405200:	f043 0320 	orreq.w	r3, r3, #32
  405204:	f108 0801 	addeq.w	r8, r8, #1
  405208:	f043 0310 	orrne.w	r3, r3, #16
  40520c:	e576      	b.n	404cfc <_vfiprintf_r+0xe4>
  40520e:	bf00      	nop
  405210:	00407bf4 	.word	0x00407bf4
  405214:	00407c04 	.word	0x00407c04
  405218:	00407bd8 	.word	0x00407bd8
  40521c:	00407bc4 	.word	0x00407bc4
  405220:	9907      	ldr	r1, [sp, #28]
  405222:	680e      	ldr	r6, [r1, #0]
  405224:	460a      	mov	r2, r1
  405226:	2e00      	cmp	r6, #0
  405228:	f102 0204 	add.w	r2, r2, #4
  40522c:	f6ff ae0f 	blt.w	404e4e <_vfiprintf_r+0x236>
  405230:	9207      	str	r2, [sp, #28]
  405232:	f898 2000 	ldrb.w	r2, [r8]
  405236:	e561      	b.n	404cfc <_vfiprintf_r+0xe4>
  405238:	f898 2000 	ldrb.w	r2, [r8]
  40523c:	2001      	movs	r0, #1
  40523e:	252b      	movs	r5, #43	; 0x2b
  405240:	e55c      	b.n	404cfc <_vfiprintf_r+0xe4>
  405242:	9907      	ldr	r1, [sp, #28]
  405244:	9608      	str	r6, [sp, #32]
  405246:	f8d1 b000 	ldr.w	fp, [r1]
  40524a:	f04f 0200 	mov.w	r2, #0
  40524e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405252:	1d0e      	adds	r6, r1, #4
  405254:	f1bb 0f00 	cmp.w	fp, #0
  405258:	f000 82e5 	beq.w	405826 <_vfiprintf_r+0xc0e>
  40525c:	1c67      	adds	r7, r4, #1
  40525e:	f000 82c4 	beq.w	4057ea <_vfiprintf_r+0xbd2>
  405262:	4622      	mov	r2, r4
  405264:	2100      	movs	r1, #0
  405266:	4658      	mov	r0, fp
  405268:	9301      	str	r3, [sp, #4]
  40526a:	f001 f921 	bl	4064b0 <memchr>
  40526e:	9b01      	ldr	r3, [sp, #4]
  405270:	2800      	cmp	r0, #0
  405272:	f000 82e5 	beq.w	405840 <_vfiprintf_r+0xc28>
  405276:	eba0 020b 	sub.w	r2, r0, fp
  40527a:	9205      	str	r2, [sp, #20]
  40527c:	9607      	str	r6, [sp, #28]
  40527e:	9302      	str	r3, [sp, #8]
  405280:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405284:	2400      	movs	r4, #0
  405286:	e619      	b.n	404ebc <_vfiprintf_r+0x2a4>
  405288:	f898 2000 	ldrb.w	r2, [r8]
  40528c:	2a2a      	cmp	r2, #42	; 0x2a
  40528e:	f108 0701 	add.w	r7, r8, #1
  405292:	f000 82e9 	beq.w	405868 <_vfiprintf_r+0xc50>
  405296:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40529a:	2909      	cmp	r1, #9
  40529c:	46b8      	mov	r8, r7
  40529e:	f04f 0400 	mov.w	r4, #0
  4052a2:	f63f ad2d 	bhi.w	404d00 <_vfiprintf_r+0xe8>
  4052a6:	f818 2b01 	ldrb.w	r2, [r8], #1
  4052aa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4052ae:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4052b2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4052b6:	2909      	cmp	r1, #9
  4052b8:	d9f5      	bls.n	4052a6 <_vfiprintf_r+0x68e>
  4052ba:	e521      	b.n	404d00 <_vfiprintf_r+0xe8>
  4052bc:	f043 0320 	orr.w	r3, r3, #32
  4052c0:	f898 2000 	ldrb.w	r2, [r8]
  4052c4:	e51a      	b.n	404cfc <_vfiprintf_r+0xe4>
  4052c6:	9608      	str	r6, [sp, #32]
  4052c8:	2800      	cmp	r0, #0
  4052ca:	f040 82db 	bne.w	405884 <_vfiprintf_r+0xc6c>
  4052ce:	2a00      	cmp	r2, #0
  4052d0:	f000 80e7 	beq.w	4054a2 <_vfiprintf_r+0x88a>
  4052d4:	2101      	movs	r1, #1
  4052d6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4052da:	f04f 0200 	mov.w	r2, #0
  4052de:	9101      	str	r1, [sp, #4]
  4052e0:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4052e4:	9105      	str	r1, [sp, #20]
  4052e6:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4052ea:	e77b      	b.n	4051e4 <_vfiprintf_r+0x5cc>
  4052ec:	9a07      	ldr	r2, [sp, #28]
  4052ee:	6813      	ldr	r3, [r2, #0]
  4052f0:	3204      	adds	r2, #4
  4052f2:	9207      	str	r2, [sp, #28]
  4052f4:	9a03      	ldr	r2, [sp, #12]
  4052f6:	601a      	str	r2, [r3, #0]
  4052f8:	e4cb      	b.n	404c92 <_vfiprintf_r+0x7a>
  4052fa:	aa0f      	add	r2, sp, #60	; 0x3c
  4052fc:	9904      	ldr	r1, [sp, #16]
  4052fe:	4620      	mov	r0, r4
  405300:	f7ff fc4a 	bl	404b98 <__sprint_r.part.0>
  405304:	2800      	cmp	r0, #0
  405306:	f040 8139 	bne.w	40557c <_vfiprintf_r+0x964>
  40530a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40530c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40530e:	f101 0c01 	add.w	ip, r1, #1
  405312:	46ce      	mov	lr, r9
  405314:	e5ff      	b.n	404f16 <_vfiprintf_r+0x2fe>
  405316:	9910      	ldr	r1, [sp, #64]	; 0x40
  405318:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40531a:	1c48      	adds	r0, r1, #1
  40531c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405320:	2d00      	cmp	r5, #0
  405322:	f43f ae22 	beq.w	404f6a <_vfiprintf_r+0x352>
  405326:	3201      	adds	r2, #1
  405328:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  40532c:	2101      	movs	r1, #1
  40532e:	2807      	cmp	r0, #7
  405330:	9211      	str	r2, [sp, #68]	; 0x44
  405332:	9010      	str	r0, [sp, #64]	; 0x40
  405334:	f8ca 5000 	str.w	r5, [sl]
  405338:	f8ca 1004 	str.w	r1, [sl, #4]
  40533c:	f340 8108 	ble.w	405550 <_vfiprintf_r+0x938>
  405340:	2a00      	cmp	r2, #0
  405342:	f040 81bc 	bne.w	4056be <_vfiprintf_r+0xaa6>
  405346:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405348:	2b00      	cmp	r3, #0
  40534a:	f43f ae1f 	beq.w	404f8c <_vfiprintf_r+0x374>
  40534e:	ab0e      	add	r3, sp, #56	; 0x38
  405350:	2202      	movs	r2, #2
  405352:	4608      	mov	r0, r1
  405354:	931c      	str	r3, [sp, #112]	; 0x70
  405356:	921d      	str	r2, [sp, #116]	; 0x74
  405358:	46ca      	mov	sl, r9
  40535a:	4601      	mov	r1, r0
  40535c:	f10a 0a08 	add.w	sl, sl, #8
  405360:	3001      	adds	r0, #1
  405362:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405364:	2b80      	cmp	r3, #128	; 0x80
  405366:	f43f ae19 	beq.w	404f9c <_vfiprintf_r+0x384>
  40536a:	9b05      	ldr	r3, [sp, #20]
  40536c:	1ae4      	subs	r4, r4, r3
  40536e:	2c00      	cmp	r4, #0
  405370:	dd2e      	ble.n	4053d0 <_vfiprintf_r+0x7b8>
  405372:	2c10      	cmp	r4, #16
  405374:	4db3      	ldr	r5, [pc, #716]	; (405644 <_vfiprintf_r+0xa2c>)
  405376:	dd1e      	ble.n	4053b6 <_vfiprintf_r+0x79e>
  405378:	46d6      	mov	lr, sl
  40537a:	2610      	movs	r6, #16
  40537c:	9f06      	ldr	r7, [sp, #24]
  40537e:	f8dd a010 	ldr.w	sl, [sp, #16]
  405382:	e006      	b.n	405392 <_vfiprintf_r+0x77a>
  405384:	1c88      	adds	r0, r1, #2
  405386:	f10e 0e08 	add.w	lr, lr, #8
  40538a:	4619      	mov	r1, r3
  40538c:	3c10      	subs	r4, #16
  40538e:	2c10      	cmp	r4, #16
  405390:	dd10      	ble.n	4053b4 <_vfiprintf_r+0x79c>
  405392:	1c4b      	adds	r3, r1, #1
  405394:	3210      	adds	r2, #16
  405396:	2b07      	cmp	r3, #7
  405398:	9211      	str	r2, [sp, #68]	; 0x44
  40539a:	e88e 0060 	stmia.w	lr, {r5, r6}
  40539e:	9310      	str	r3, [sp, #64]	; 0x40
  4053a0:	ddf0      	ble.n	405384 <_vfiprintf_r+0x76c>
  4053a2:	2a00      	cmp	r2, #0
  4053a4:	d165      	bne.n	405472 <_vfiprintf_r+0x85a>
  4053a6:	3c10      	subs	r4, #16
  4053a8:	2c10      	cmp	r4, #16
  4053aa:	f04f 0001 	mov.w	r0, #1
  4053ae:	4611      	mov	r1, r2
  4053b0:	46ce      	mov	lr, r9
  4053b2:	dcee      	bgt.n	405392 <_vfiprintf_r+0x77a>
  4053b4:	46f2      	mov	sl, lr
  4053b6:	4422      	add	r2, r4
  4053b8:	2807      	cmp	r0, #7
  4053ba:	9211      	str	r2, [sp, #68]	; 0x44
  4053bc:	f8ca 5000 	str.w	r5, [sl]
  4053c0:	f8ca 4004 	str.w	r4, [sl, #4]
  4053c4:	9010      	str	r0, [sp, #64]	; 0x40
  4053c6:	f300 8085 	bgt.w	4054d4 <_vfiprintf_r+0x8bc>
  4053ca:	f10a 0a08 	add.w	sl, sl, #8
  4053ce:	3001      	adds	r0, #1
  4053d0:	9905      	ldr	r1, [sp, #20]
  4053d2:	f8ca b000 	str.w	fp, [sl]
  4053d6:	440a      	add	r2, r1
  4053d8:	2807      	cmp	r0, #7
  4053da:	9211      	str	r2, [sp, #68]	; 0x44
  4053dc:	f8ca 1004 	str.w	r1, [sl, #4]
  4053e0:	9010      	str	r0, [sp, #64]	; 0x40
  4053e2:	f340 8082 	ble.w	4054ea <_vfiprintf_r+0x8d2>
  4053e6:	2a00      	cmp	r2, #0
  4053e8:	f040 8118 	bne.w	40561c <_vfiprintf_r+0xa04>
  4053ec:	9b02      	ldr	r3, [sp, #8]
  4053ee:	9210      	str	r2, [sp, #64]	; 0x40
  4053f0:	0758      	lsls	r0, r3, #29
  4053f2:	d535      	bpl.n	405460 <_vfiprintf_r+0x848>
  4053f4:	9b08      	ldr	r3, [sp, #32]
  4053f6:	9901      	ldr	r1, [sp, #4]
  4053f8:	1a5c      	subs	r4, r3, r1
  4053fa:	2c00      	cmp	r4, #0
  4053fc:	f340 80e7 	ble.w	4055ce <_vfiprintf_r+0x9b6>
  405400:	46ca      	mov	sl, r9
  405402:	2c10      	cmp	r4, #16
  405404:	f340 8218 	ble.w	405838 <_vfiprintf_r+0xc20>
  405408:	9910      	ldr	r1, [sp, #64]	; 0x40
  40540a:	4e8f      	ldr	r6, [pc, #572]	; (405648 <_vfiprintf_r+0xa30>)
  40540c:	9f06      	ldr	r7, [sp, #24]
  40540e:	f8dd b010 	ldr.w	fp, [sp, #16]
  405412:	2510      	movs	r5, #16
  405414:	e006      	b.n	405424 <_vfiprintf_r+0x80c>
  405416:	1c88      	adds	r0, r1, #2
  405418:	f10a 0a08 	add.w	sl, sl, #8
  40541c:	4619      	mov	r1, r3
  40541e:	3c10      	subs	r4, #16
  405420:	2c10      	cmp	r4, #16
  405422:	dd11      	ble.n	405448 <_vfiprintf_r+0x830>
  405424:	1c4b      	adds	r3, r1, #1
  405426:	3210      	adds	r2, #16
  405428:	2b07      	cmp	r3, #7
  40542a:	9211      	str	r2, [sp, #68]	; 0x44
  40542c:	f8ca 6000 	str.w	r6, [sl]
  405430:	f8ca 5004 	str.w	r5, [sl, #4]
  405434:	9310      	str	r3, [sp, #64]	; 0x40
  405436:	ddee      	ble.n	405416 <_vfiprintf_r+0x7fe>
  405438:	bb42      	cbnz	r2, 40548c <_vfiprintf_r+0x874>
  40543a:	3c10      	subs	r4, #16
  40543c:	2c10      	cmp	r4, #16
  40543e:	f04f 0001 	mov.w	r0, #1
  405442:	4611      	mov	r1, r2
  405444:	46ca      	mov	sl, r9
  405446:	dced      	bgt.n	405424 <_vfiprintf_r+0x80c>
  405448:	4422      	add	r2, r4
  40544a:	2807      	cmp	r0, #7
  40544c:	9211      	str	r2, [sp, #68]	; 0x44
  40544e:	f8ca 6000 	str.w	r6, [sl]
  405452:	f8ca 4004 	str.w	r4, [sl, #4]
  405456:	9010      	str	r0, [sp, #64]	; 0x40
  405458:	dd51      	ble.n	4054fe <_vfiprintf_r+0x8e6>
  40545a:	2a00      	cmp	r2, #0
  40545c:	f040 819b 	bne.w	405796 <_vfiprintf_r+0xb7e>
  405460:	9b03      	ldr	r3, [sp, #12]
  405462:	9a08      	ldr	r2, [sp, #32]
  405464:	9901      	ldr	r1, [sp, #4]
  405466:	428a      	cmp	r2, r1
  405468:	bfac      	ite	ge
  40546a:	189b      	addge	r3, r3, r2
  40546c:	185b      	addlt	r3, r3, r1
  40546e:	9303      	str	r3, [sp, #12]
  405470:	e04e      	b.n	405510 <_vfiprintf_r+0x8f8>
  405472:	aa0f      	add	r2, sp, #60	; 0x3c
  405474:	4651      	mov	r1, sl
  405476:	4638      	mov	r0, r7
  405478:	f7ff fb8e 	bl	404b98 <__sprint_r.part.0>
  40547c:	2800      	cmp	r0, #0
  40547e:	f040 813f 	bne.w	405700 <_vfiprintf_r+0xae8>
  405482:	9910      	ldr	r1, [sp, #64]	; 0x40
  405484:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405486:	1c48      	adds	r0, r1, #1
  405488:	46ce      	mov	lr, r9
  40548a:	e77f      	b.n	40538c <_vfiprintf_r+0x774>
  40548c:	aa0f      	add	r2, sp, #60	; 0x3c
  40548e:	4659      	mov	r1, fp
  405490:	4638      	mov	r0, r7
  405492:	f7ff fb81 	bl	404b98 <__sprint_r.part.0>
  405496:	b960      	cbnz	r0, 4054b2 <_vfiprintf_r+0x89a>
  405498:	9910      	ldr	r1, [sp, #64]	; 0x40
  40549a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40549c:	1c48      	adds	r0, r1, #1
  40549e:	46ca      	mov	sl, r9
  4054a0:	e7bd      	b.n	40541e <_vfiprintf_r+0x806>
  4054a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4054a4:	f8dd b010 	ldr.w	fp, [sp, #16]
  4054a8:	2b00      	cmp	r3, #0
  4054aa:	f040 81d4 	bne.w	405856 <_vfiprintf_r+0xc3e>
  4054ae:	2300      	movs	r3, #0
  4054b0:	9310      	str	r3, [sp, #64]	; 0x40
  4054b2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4054b6:	f013 0f01 	tst.w	r3, #1
  4054ba:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4054be:	d102      	bne.n	4054c6 <_vfiprintf_r+0x8ae>
  4054c0:	059a      	lsls	r2, r3, #22
  4054c2:	f140 80de 	bpl.w	405682 <_vfiprintf_r+0xa6a>
  4054c6:	065b      	lsls	r3, r3, #25
  4054c8:	f53f acb2 	bmi.w	404e30 <_vfiprintf_r+0x218>
  4054cc:	9803      	ldr	r0, [sp, #12]
  4054ce:	b02d      	add	sp, #180	; 0xb4
  4054d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4054d4:	2a00      	cmp	r2, #0
  4054d6:	f040 8106 	bne.w	4056e6 <_vfiprintf_r+0xace>
  4054da:	9a05      	ldr	r2, [sp, #20]
  4054dc:	921d      	str	r2, [sp, #116]	; 0x74
  4054de:	2301      	movs	r3, #1
  4054e0:	9211      	str	r2, [sp, #68]	; 0x44
  4054e2:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4054e6:	9310      	str	r3, [sp, #64]	; 0x40
  4054e8:	46ca      	mov	sl, r9
  4054ea:	f10a 0a08 	add.w	sl, sl, #8
  4054ee:	9b02      	ldr	r3, [sp, #8]
  4054f0:	0759      	lsls	r1, r3, #29
  4054f2:	d504      	bpl.n	4054fe <_vfiprintf_r+0x8e6>
  4054f4:	9b08      	ldr	r3, [sp, #32]
  4054f6:	9901      	ldr	r1, [sp, #4]
  4054f8:	1a5c      	subs	r4, r3, r1
  4054fa:	2c00      	cmp	r4, #0
  4054fc:	dc81      	bgt.n	405402 <_vfiprintf_r+0x7ea>
  4054fe:	9b03      	ldr	r3, [sp, #12]
  405500:	9908      	ldr	r1, [sp, #32]
  405502:	9801      	ldr	r0, [sp, #4]
  405504:	4281      	cmp	r1, r0
  405506:	bfac      	ite	ge
  405508:	185b      	addge	r3, r3, r1
  40550a:	181b      	addlt	r3, r3, r0
  40550c:	9303      	str	r3, [sp, #12]
  40550e:	bb72      	cbnz	r2, 40556e <_vfiprintf_r+0x956>
  405510:	2300      	movs	r3, #0
  405512:	9310      	str	r3, [sp, #64]	; 0x40
  405514:	46ca      	mov	sl, r9
  405516:	f7ff bbbc 	b.w	404c92 <_vfiprintf_r+0x7a>
  40551a:	aa0f      	add	r2, sp, #60	; 0x3c
  40551c:	9904      	ldr	r1, [sp, #16]
  40551e:	4620      	mov	r0, r4
  405520:	f7ff fb3a 	bl	404b98 <__sprint_r.part.0>
  405524:	bb50      	cbnz	r0, 40557c <_vfiprintf_r+0x964>
  405526:	9910      	ldr	r1, [sp, #64]	; 0x40
  405528:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40552a:	f101 0e01 	add.w	lr, r1, #1
  40552e:	46cc      	mov	ip, r9
  405530:	e548      	b.n	404fc4 <_vfiprintf_r+0x3ac>
  405532:	2a00      	cmp	r2, #0
  405534:	f040 8140 	bne.w	4057b8 <_vfiprintf_r+0xba0>
  405538:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  40553c:	2900      	cmp	r1, #0
  40553e:	f000 811b 	beq.w	405778 <_vfiprintf_r+0xb60>
  405542:	2201      	movs	r2, #1
  405544:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  405548:	4610      	mov	r0, r2
  40554a:	921d      	str	r2, [sp, #116]	; 0x74
  40554c:	911c      	str	r1, [sp, #112]	; 0x70
  40554e:	46ca      	mov	sl, r9
  405550:	4601      	mov	r1, r0
  405552:	f10a 0a08 	add.w	sl, sl, #8
  405556:	3001      	adds	r0, #1
  405558:	e507      	b.n	404f6a <_vfiprintf_r+0x352>
  40555a:	9b02      	ldr	r3, [sp, #8]
  40555c:	2a01      	cmp	r2, #1
  40555e:	f000 8098 	beq.w	405692 <_vfiprintf_r+0xa7a>
  405562:	2a02      	cmp	r2, #2
  405564:	d10d      	bne.n	405582 <_vfiprintf_r+0x96a>
  405566:	9302      	str	r3, [sp, #8]
  405568:	2600      	movs	r6, #0
  40556a:	2700      	movs	r7, #0
  40556c:	e5b0      	b.n	4050d0 <_vfiprintf_r+0x4b8>
  40556e:	aa0f      	add	r2, sp, #60	; 0x3c
  405570:	9904      	ldr	r1, [sp, #16]
  405572:	9806      	ldr	r0, [sp, #24]
  405574:	f7ff fb10 	bl	404b98 <__sprint_r.part.0>
  405578:	2800      	cmp	r0, #0
  40557a:	d0c9      	beq.n	405510 <_vfiprintf_r+0x8f8>
  40557c:	f8dd b010 	ldr.w	fp, [sp, #16]
  405580:	e797      	b.n	4054b2 <_vfiprintf_r+0x89a>
  405582:	9302      	str	r3, [sp, #8]
  405584:	2600      	movs	r6, #0
  405586:	2700      	movs	r7, #0
  405588:	4649      	mov	r1, r9
  40558a:	e000      	b.n	40558e <_vfiprintf_r+0x976>
  40558c:	4659      	mov	r1, fp
  40558e:	08f2      	lsrs	r2, r6, #3
  405590:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  405594:	08f8      	lsrs	r0, r7, #3
  405596:	f006 0307 	and.w	r3, r6, #7
  40559a:	4607      	mov	r7, r0
  40559c:	4616      	mov	r6, r2
  40559e:	3330      	adds	r3, #48	; 0x30
  4055a0:	ea56 0207 	orrs.w	r2, r6, r7
  4055a4:	f801 3c01 	strb.w	r3, [r1, #-1]
  4055a8:	f101 3bff 	add.w	fp, r1, #4294967295
  4055ac:	d1ee      	bne.n	40558c <_vfiprintf_r+0x974>
  4055ae:	9a02      	ldr	r2, [sp, #8]
  4055b0:	07d6      	lsls	r6, r2, #31
  4055b2:	f57f ad9d 	bpl.w	4050f0 <_vfiprintf_r+0x4d8>
  4055b6:	2b30      	cmp	r3, #48	; 0x30
  4055b8:	f43f ad9a 	beq.w	4050f0 <_vfiprintf_r+0x4d8>
  4055bc:	3902      	subs	r1, #2
  4055be:	2330      	movs	r3, #48	; 0x30
  4055c0:	f80b 3c01 	strb.w	r3, [fp, #-1]
  4055c4:	eba9 0301 	sub.w	r3, r9, r1
  4055c8:	9305      	str	r3, [sp, #20]
  4055ca:	468b      	mov	fp, r1
  4055cc:	e476      	b.n	404ebc <_vfiprintf_r+0x2a4>
  4055ce:	9b03      	ldr	r3, [sp, #12]
  4055d0:	9a08      	ldr	r2, [sp, #32]
  4055d2:	428a      	cmp	r2, r1
  4055d4:	bfac      	ite	ge
  4055d6:	189b      	addge	r3, r3, r2
  4055d8:	185b      	addlt	r3, r3, r1
  4055da:	9303      	str	r3, [sp, #12]
  4055dc:	e798      	b.n	405510 <_vfiprintf_r+0x8f8>
  4055de:	2202      	movs	r2, #2
  4055e0:	e44d      	b.n	404e7e <_vfiprintf_r+0x266>
  4055e2:	2f00      	cmp	r7, #0
  4055e4:	bf08      	it	eq
  4055e6:	2e0a      	cmpeq	r6, #10
  4055e8:	d352      	bcc.n	405690 <_vfiprintf_r+0xa78>
  4055ea:	46cb      	mov	fp, r9
  4055ec:	4630      	mov	r0, r6
  4055ee:	4639      	mov	r1, r7
  4055f0:	220a      	movs	r2, #10
  4055f2:	2300      	movs	r3, #0
  4055f4:	f001 fc40 	bl	406e78 <__aeabi_uldivmod>
  4055f8:	3230      	adds	r2, #48	; 0x30
  4055fa:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4055fe:	4630      	mov	r0, r6
  405600:	4639      	mov	r1, r7
  405602:	2300      	movs	r3, #0
  405604:	220a      	movs	r2, #10
  405606:	f001 fc37 	bl	406e78 <__aeabi_uldivmod>
  40560a:	4606      	mov	r6, r0
  40560c:	460f      	mov	r7, r1
  40560e:	ea56 0307 	orrs.w	r3, r6, r7
  405612:	d1eb      	bne.n	4055ec <_vfiprintf_r+0x9d4>
  405614:	e56c      	b.n	4050f0 <_vfiprintf_r+0x4d8>
  405616:	9405      	str	r4, [sp, #20]
  405618:	46cb      	mov	fp, r9
  40561a:	e44f      	b.n	404ebc <_vfiprintf_r+0x2a4>
  40561c:	aa0f      	add	r2, sp, #60	; 0x3c
  40561e:	9904      	ldr	r1, [sp, #16]
  405620:	9806      	ldr	r0, [sp, #24]
  405622:	f7ff fab9 	bl	404b98 <__sprint_r.part.0>
  405626:	2800      	cmp	r0, #0
  405628:	d1a8      	bne.n	40557c <_vfiprintf_r+0x964>
  40562a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40562c:	46ca      	mov	sl, r9
  40562e:	e75e      	b.n	4054ee <_vfiprintf_r+0x8d6>
  405630:	aa0f      	add	r2, sp, #60	; 0x3c
  405632:	9904      	ldr	r1, [sp, #16]
  405634:	9806      	ldr	r0, [sp, #24]
  405636:	f7ff faaf 	bl	404b98 <__sprint_r.part.0>
  40563a:	2800      	cmp	r0, #0
  40563c:	d19e      	bne.n	40557c <_vfiprintf_r+0x964>
  40563e:	46ca      	mov	sl, r9
  405640:	f7ff bbc0 	b.w	404dc4 <_vfiprintf_r+0x1ac>
  405644:	00407c04 	.word	0x00407c04
  405648:	00407bf4 	.word	0x00407bf4
  40564c:	3104      	adds	r1, #4
  40564e:	6816      	ldr	r6, [r2, #0]
  405650:	9107      	str	r1, [sp, #28]
  405652:	2201      	movs	r2, #1
  405654:	2700      	movs	r7, #0
  405656:	e412      	b.n	404e7e <_vfiprintf_r+0x266>
  405658:	9807      	ldr	r0, [sp, #28]
  40565a:	4601      	mov	r1, r0
  40565c:	3104      	adds	r1, #4
  40565e:	6806      	ldr	r6, [r0, #0]
  405660:	9107      	str	r1, [sp, #28]
  405662:	2700      	movs	r7, #0
  405664:	e40b      	b.n	404e7e <_vfiprintf_r+0x266>
  405666:	680e      	ldr	r6, [r1, #0]
  405668:	3104      	adds	r1, #4
  40566a:	9107      	str	r1, [sp, #28]
  40566c:	2700      	movs	r7, #0
  40566e:	e591      	b.n	405194 <_vfiprintf_r+0x57c>
  405670:	9907      	ldr	r1, [sp, #28]
  405672:	680e      	ldr	r6, [r1, #0]
  405674:	460a      	mov	r2, r1
  405676:	17f7      	asrs	r7, r6, #31
  405678:	3204      	adds	r2, #4
  40567a:	9207      	str	r2, [sp, #28]
  40567c:	4630      	mov	r0, r6
  40567e:	4639      	mov	r1, r7
  405680:	e50f      	b.n	4050a2 <_vfiprintf_r+0x48a>
  405682:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405686:	f000 fe7f 	bl	406388 <__retarget_lock_release_recursive>
  40568a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40568e:	e71a      	b.n	4054c6 <_vfiprintf_r+0x8ae>
  405690:	9b02      	ldr	r3, [sp, #8]
  405692:	9302      	str	r3, [sp, #8]
  405694:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  405698:	3630      	adds	r6, #48	; 0x30
  40569a:	2301      	movs	r3, #1
  40569c:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  4056a0:	9305      	str	r3, [sp, #20]
  4056a2:	e40b      	b.n	404ebc <_vfiprintf_r+0x2a4>
  4056a4:	aa0f      	add	r2, sp, #60	; 0x3c
  4056a6:	9904      	ldr	r1, [sp, #16]
  4056a8:	9806      	ldr	r0, [sp, #24]
  4056aa:	f7ff fa75 	bl	404b98 <__sprint_r.part.0>
  4056ae:	2800      	cmp	r0, #0
  4056b0:	f47f af64 	bne.w	40557c <_vfiprintf_r+0x964>
  4056b4:	9910      	ldr	r1, [sp, #64]	; 0x40
  4056b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4056b8:	1c48      	adds	r0, r1, #1
  4056ba:	46ca      	mov	sl, r9
  4056bc:	e651      	b.n	405362 <_vfiprintf_r+0x74a>
  4056be:	aa0f      	add	r2, sp, #60	; 0x3c
  4056c0:	9904      	ldr	r1, [sp, #16]
  4056c2:	9806      	ldr	r0, [sp, #24]
  4056c4:	f7ff fa68 	bl	404b98 <__sprint_r.part.0>
  4056c8:	2800      	cmp	r0, #0
  4056ca:	f47f af57 	bne.w	40557c <_vfiprintf_r+0x964>
  4056ce:	9910      	ldr	r1, [sp, #64]	; 0x40
  4056d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4056d2:	1c48      	adds	r0, r1, #1
  4056d4:	46ca      	mov	sl, r9
  4056d6:	e448      	b.n	404f6a <_vfiprintf_r+0x352>
  4056d8:	2a00      	cmp	r2, #0
  4056da:	f040 8091 	bne.w	405800 <_vfiprintf_r+0xbe8>
  4056de:	2001      	movs	r0, #1
  4056e0:	4611      	mov	r1, r2
  4056e2:	46ca      	mov	sl, r9
  4056e4:	e641      	b.n	40536a <_vfiprintf_r+0x752>
  4056e6:	aa0f      	add	r2, sp, #60	; 0x3c
  4056e8:	9904      	ldr	r1, [sp, #16]
  4056ea:	9806      	ldr	r0, [sp, #24]
  4056ec:	f7ff fa54 	bl	404b98 <__sprint_r.part.0>
  4056f0:	2800      	cmp	r0, #0
  4056f2:	f47f af43 	bne.w	40557c <_vfiprintf_r+0x964>
  4056f6:	9810      	ldr	r0, [sp, #64]	; 0x40
  4056f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4056fa:	3001      	adds	r0, #1
  4056fc:	46ca      	mov	sl, r9
  4056fe:	e667      	b.n	4053d0 <_vfiprintf_r+0x7b8>
  405700:	46d3      	mov	fp, sl
  405702:	e6d6      	b.n	4054b2 <_vfiprintf_r+0x89a>
  405704:	9e07      	ldr	r6, [sp, #28]
  405706:	3607      	adds	r6, #7
  405708:	f026 0207 	bic.w	r2, r6, #7
  40570c:	f102 0108 	add.w	r1, r2, #8
  405710:	e9d2 6700 	ldrd	r6, r7, [r2]
  405714:	9107      	str	r1, [sp, #28]
  405716:	2201      	movs	r2, #1
  405718:	f7ff bbb1 	b.w	404e7e <_vfiprintf_r+0x266>
  40571c:	9e07      	ldr	r6, [sp, #28]
  40571e:	3607      	adds	r6, #7
  405720:	f026 0607 	bic.w	r6, r6, #7
  405724:	e9d6 0100 	ldrd	r0, r1, [r6]
  405728:	f106 0208 	add.w	r2, r6, #8
  40572c:	9207      	str	r2, [sp, #28]
  40572e:	4606      	mov	r6, r0
  405730:	460f      	mov	r7, r1
  405732:	e4b6      	b.n	4050a2 <_vfiprintf_r+0x48a>
  405734:	9e07      	ldr	r6, [sp, #28]
  405736:	3607      	adds	r6, #7
  405738:	f026 0207 	bic.w	r2, r6, #7
  40573c:	f102 0108 	add.w	r1, r2, #8
  405740:	e9d2 6700 	ldrd	r6, r7, [r2]
  405744:	9107      	str	r1, [sp, #28]
  405746:	2200      	movs	r2, #0
  405748:	f7ff bb99 	b.w	404e7e <_vfiprintf_r+0x266>
  40574c:	9e07      	ldr	r6, [sp, #28]
  40574e:	3607      	adds	r6, #7
  405750:	f026 0107 	bic.w	r1, r6, #7
  405754:	f101 0008 	add.w	r0, r1, #8
  405758:	9007      	str	r0, [sp, #28]
  40575a:	e9d1 6700 	ldrd	r6, r7, [r1]
  40575e:	e519      	b.n	405194 <_vfiprintf_r+0x57c>
  405760:	46cb      	mov	fp, r9
  405762:	f7ff bbab 	b.w	404ebc <_vfiprintf_r+0x2a4>
  405766:	252d      	movs	r5, #45	; 0x2d
  405768:	4276      	negs	r6, r6
  40576a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40576e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405772:	2201      	movs	r2, #1
  405774:	f7ff bb88 	b.w	404e88 <_vfiprintf_r+0x270>
  405778:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40577a:	b9b3      	cbnz	r3, 4057aa <_vfiprintf_r+0xb92>
  40577c:	4611      	mov	r1, r2
  40577e:	2001      	movs	r0, #1
  405780:	46ca      	mov	sl, r9
  405782:	e5f2      	b.n	40536a <_vfiprintf_r+0x752>
  405784:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405788:	f000 fdfe 	bl	406388 <__retarget_lock_release_recursive>
  40578c:	f04f 33ff 	mov.w	r3, #4294967295
  405790:	9303      	str	r3, [sp, #12]
  405792:	f7ff bb50 	b.w	404e36 <_vfiprintf_r+0x21e>
  405796:	aa0f      	add	r2, sp, #60	; 0x3c
  405798:	9904      	ldr	r1, [sp, #16]
  40579a:	9806      	ldr	r0, [sp, #24]
  40579c:	f7ff f9fc 	bl	404b98 <__sprint_r.part.0>
  4057a0:	2800      	cmp	r0, #0
  4057a2:	f47f aeeb 	bne.w	40557c <_vfiprintf_r+0x964>
  4057a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4057a8:	e6a9      	b.n	4054fe <_vfiprintf_r+0x8e6>
  4057aa:	ab0e      	add	r3, sp, #56	; 0x38
  4057ac:	2202      	movs	r2, #2
  4057ae:	931c      	str	r3, [sp, #112]	; 0x70
  4057b0:	921d      	str	r2, [sp, #116]	; 0x74
  4057b2:	2001      	movs	r0, #1
  4057b4:	46ca      	mov	sl, r9
  4057b6:	e5d0      	b.n	40535a <_vfiprintf_r+0x742>
  4057b8:	aa0f      	add	r2, sp, #60	; 0x3c
  4057ba:	9904      	ldr	r1, [sp, #16]
  4057bc:	9806      	ldr	r0, [sp, #24]
  4057be:	f7ff f9eb 	bl	404b98 <__sprint_r.part.0>
  4057c2:	2800      	cmp	r0, #0
  4057c4:	f47f aeda 	bne.w	40557c <_vfiprintf_r+0x964>
  4057c8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4057ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4057cc:	1c48      	adds	r0, r1, #1
  4057ce:	46ca      	mov	sl, r9
  4057d0:	e5a4      	b.n	40531c <_vfiprintf_r+0x704>
  4057d2:	9a07      	ldr	r2, [sp, #28]
  4057d4:	9903      	ldr	r1, [sp, #12]
  4057d6:	6813      	ldr	r3, [r2, #0]
  4057d8:	17cd      	asrs	r5, r1, #31
  4057da:	4608      	mov	r0, r1
  4057dc:	3204      	adds	r2, #4
  4057de:	4629      	mov	r1, r5
  4057e0:	9207      	str	r2, [sp, #28]
  4057e2:	e9c3 0100 	strd	r0, r1, [r3]
  4057e6:	f7ff ba54 	b.w	404c92 <_vfiprintf_r+0x7a>
  4057ea:	4658      	mov	r0, fp
  4057ec:	9607      	str	r6, [sp, #28]
  4057ee:	9302      	str	r3, [sp, #8]
  4057f0:	f001 f906 	bl	406a00 <strlen>
  4057f4:	2400      	movs	r4, #0
  4057f6:	9005      	str	r0, [sp, #20]
  4057f8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4057fc:	f7ff bb5e 	b.w	404ebc <_vfiprintf_r+0x2a4>
  405800:	aa0f      	add	r2, sp, #60	; 0x3c
  405802:	9904      	ldr	r1, [sp, #16]
  405804:	9806      	ldr	r0, [sp, #24]
  405806:	f7ff f9c7 	bl	404b98 <__sprint_r.part.0>
  40580a:	2800      	cmp	r0, #0
  40580c:	f47f aeb6 	bne.w	40557c <_vfiprintf_r+0x964>
  405810:	9910      	ldr	r1, [sp, #64]	; 0x40
  405812:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405814:	1c48      	adds	r0, r1, #1
  405816:	46ca      	mov	sl, r9
  405818:	e5a7      	b.n	40536a <_vfiprintf_r+0x752>
  40581a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40581c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40581e:	4e20      	ldr	r6, [pc, #128]	; (4058a0 <_vfiprintf_r+0xc88>)
  405820:	3101      	adds	r1, #1
  405822:	f7ff bb90 	b.w	404f46 <_vfiprintf_r+0x32e>
  405826:	2c06      	cmp	r4, #6
  405828:	bf28      	it	cs
  40582a:	2406      	movcs	r4, #6
  40582c:	9405      	str	r4, [sp, #20]
  40582e:	9607      	str	r6, [sp, #28]
  405830:	9401      	str	r4, [sp, #4]
  405832:	f8df b070 	ldr.w	fp, [pc, #112]	; 4058a4 <_vfiprintf_r+0xc8c>
  405836:	e4d5      	b.n	4051e4 <_vfiprintf_r+0x5cc>
  405838:	9810      	ldr	r0, [sp, #64]	; 0x40
  40583a:	4e19      	ldr	r6, [pc, #100]	; (4058a0 <_vfiprintf_r+0xc88>)
  40583c:	3001      	adds	r0, #1
  40583e:	e603      	b.n	405448 <_vfiprintf_r+0x830>
  405840:	9405      	str	r4, [sp, #20]
  405842:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405846:	9607      	str	r6, [sp, #28]
  405848:	9302      	str	r3, [sp, #8]
  40584a:	4604      	mov	r4, r0
  40584c:	f7ff bb36 	b.w	404ebc <_vfiprintf_r+0x2a4>
  405850:	4686      	mov	lr, r0
  405852:	f7ff bbce 	b.w	404ff2 <_vfiprintf_r+0x3da>
  405856:	9806      	ldr	r0, [sp, #24]
  405858:	aa0f      	add	r2, sp, #60	; 0x3c
  40585a:	4659      	mov	r1, fp
  40585c:	f7ff f99c 	bl	404b98 <__sprint_r.part.0>
  405860:	2800      	cmp	r0, #0
  405862:	f43f ae24 	beq.w	4054ae <_vfiprintf_r+0x896>
  405866:	e624      	b.n	4054b2 <_vfiprintf_r+0x89a>
  405868:	9907      	ldr	r1, [sp, #28]
  40586a:	f898 2001 	ldrb.w	r2, [r8, #1]
  40586e:	680c      	ldr	r4, [r1, #0]
  405870:	3104      	adds	r1, #4
  405872:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  405876:	46b8      	mov	r8, r7
  405878:	9107      	str	r1, [sp, #28]
  40587a:	f7ff ba3f 	b.w	404cfc <_vfiprintf_r+0xe4>
  40587e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405882:	e43c      	b.n	4050fe <_vfiprintf_r+0x4e6>
  405884:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405888:	e521      	b.n	4052ce <_vfiprintf_r+0x6b6>
  40588a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40588e:	f7ff bbf4 	b.w	40507a <_vfiprintf_r+0x462>
  405892:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405896:	e491      	b.n	4051bc <_vfiprintf_r+0x5a4>
  405898:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40589c:	e469      	b.n	405172 <_vfiprintf_r+0x55a>
  40589e:	bf00      	nop
  4058a0:	00407bf4 	.word	0x00407bf4
  4058a4:	00407bec 	.word	0x00407bec

004058a8 <__sbprintf>:
  4058a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4058ac:	460c      	mov	r4, r1
  4058ae:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  4058b2:	8989      	ldrh	r1, [r1, #12]
  4058b4:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4058b6:	89e5      	ldrh	r5, [r4, #14]
  4058b8:	9619      	str	r6, [sp, #100]	; 0x64
  4058ba:	f021 0102 	bic.w	r1, r1, #2
  4058be:	4606      	mov	r6, r0
  4058c0:	69e0      	ldr	r0, [r4, #28]
  4058c2:	f8ad 100c 	strh.w	r1, [sp, #12]
  4058c6:	4617      	mov	r7, r2
  4058c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4058cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4058ce:	f8ad 500e 	strh.w	r5, [sp, #14]
  4058d2:	4698      	mov	r8, r3
  4058d4:	ad1a      	add	r5, sp, #104	; 0x68
  4058d6:	2300      	movs	r3, #0
  4058d8:	9007      	str	r0, [sp, #28]
  4058da:	a816      	add	r0, sp, #88	; 0x58
  4058dc:	9209      	str	r2, [sp, #36]	; 0x24
  4058de:	9306      	str	r3, [sp, #24]
  4058e0:	9500      	str	r5, [sp, #0]
  4058e2:	9504      	str	r5, [sp, #16]
  4058e4:	9102      	str	r1, [sp, #8]
  4058e6:	9105      	str	r1, [sp, #20]
  4058e8:	f000 fd48 	bl	40637c <__retarget_lock_init_recursive>
  4058ec:	4643      	mov	r3, r8
  4058ee:	463a      	mov	r2, r7
  4058f0:	4669      	mov	r1, sp
  4058f2:	4630      	mov	r0, r6
  4058f4:	f7ff f990 	bl	404c18 <_vfiprintf_r>
  4058f8:	1e05      	subs	r5, r0, #0
  4058fa:	db07      	blt.n	40590c <__sbprintf+0x64>
  4058fc:	4630      	mov	r0, r6
  4058fe:	4669      	mov	r1, sp
  405900:	f000 f928 	bl	405b54 <_fflush_r>
  405904:	2800      	cmp	r0, #0
  405906:	bf18      	it	ne
  405908:	f04f 35ff 	movne.w	r5, #4294967295
  40590c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405910:	065b      	lsls	r3, r3, #25
  405912:	d503      	bpl.n	40591c <__sbprintf+0x74>
  405914:	89a3      	ldrh	r3, [r4, #12]
  405916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40591a:	81a3      	strh	r3, [r4, #12]
  40591c:	9816      	ldr	r0, [sp, #88]	; 0x58
  40591e:	f000 fd2f 	bl	406380 <__retarget_lock_close_recursive>
  405922:	4628      	mov	r0, r5
  405924:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  405928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040592c <__swsetup_r>:
  40592c:	b538      	push	{r3, r4, r5, lr}
  40592e:	4b30      	ldr	r3, [pc, #192]	; (4059f0 <__swsetup_r+0xc4>)
  405930:	681b      	ldr	r3, [r3, #0]
  405932:	4605      	mov	r5, r0
  405934:	460c      	mov	r4, r1
  405936:	b113      	cbz	r3, 40593e <__swsetup_r+0x12>
  405938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40593a:	2a00      	cmp	r2, #0
  40593c:	d038      	beq.n	4059b0 <__swsetup_r+0x84>
  40593e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405942:	b293      	uxth	r3, r2
  405944:	0718      	lsls	r0, r3, #28
  405946:	d50c      	bpl.n	405962 <__swsetup_r+0x36>
  405948:	6920      	ldr	r0, [r4, #16]
  40594a:	b1a8      	cbz	r0, 405978 <__swsetup_r+0x4c>
  40594c:	f013 0201 	ands.w	r2, r3, #1
  405950:	d01e      	beq.n	405990 <__swsetup_r+0x64>
  405952:	6963      	ldr	r3, [r4, #20]
  405954:	2200      	movs	r2, #0
  405956:	425b      	negs	r3, r3
  405958:	61a3      	str	r3, [r4, #24]
  40595a:	60a2      	str	r2, [r4, #8]
  40595c:	b1f0      	cbz	r0, 40599c <__swsetup_r+0x70>
  40595e:	2000      	movs	r0, #0
  405960:	bd38      	pop	{r3, r4, r5, pc}
  405962:	06d9      	lsls	r1, r3, #27
  405964:	d53c      	bpl.n	4059e0 <__swsetup_r+0xb4>
  405966:	0758      	lsls	r0, r3, #29
  405968:	d426      	bmi.n	4059b8 <__swsetup_r+0x8c>
  40596a:	6920      	ldr	r0, [r4, #16]
  40596c:	f042 0308 	orr.w	r3, r2, #8
  405970:	81a3      	strh	r3, [r4, #12]
  405972:	b29b      	uxth	r3, r3
  405974:	2800      	cmp	r0, #0
  405976:	d1e9      	bne.n	40594c <__swsetup_r+0x20>
  405978:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40597c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405980:	d0e4      	beq.n	40594c <__swsetup_r+0x20>
  405982:	4628      	mov	r0, r5
  405984:	4621      	mov	r1, r4
  405986:	f000 fd2f 	bl	4063e8 <__smakebuf_r>
  40598a:	89a3      	ldrh	r3, [r4, #12]
  40598c:	6920      	ldr	r0, [r4, #16]
  40598e:	e7dd      	b.n	40594c <__swsetup_r+0x20>
  405990:	0799      	lsls	r1, r3, #30
  405992:	bf58      	it	pl
  405994:	6962      	ldrpl	r2, [r4, #20]
  405996:	60a2      	str	r2, [r4, #8]
  405998:	2800      	cmp	r0, #0
  40599a:	d1e0      	bne.n	40595e <__swsetup_r+0x32>
  40599c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4059a0:	061a      	lsls	r2, r3, #24
  4059a2:	d5dd      	bpl.n	405960 <__swsetup_r+0x34>
  4059a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4059a8:	81a3      	strh	r3, [r4, #12]
  4059aa:	f04f 30ff 	mov.w	r0, #4294967295
  4059ae:	bd38      	pop	{r3, r4, r5, pc}
  4059b0:	4618      	mov	r0, r3
  4059b2:	f000 f927 	bl	405c04 <__sinit>
  4059b6:	e7c2      	b.n	40593e <__swsetup_r+0x12>
  4059b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4059ba:	b151      	cbz	r1, 4059d2 <__swsetup_r+0xa6>
  4059bc:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4059c0:	4299      	cmp	r1, r3
  4059c2:	d004      	beq.n	4059ce <__swsetup_r+0xa2>
  4059c4:	4628      	mov	r0, r5
  4059c6:	f000 fa43 	bl	405e50 <_free_r>
  4059ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4059ce:	2300      	movs	r3, #0
  4059d0:	6323      	str	r3, [r4, #48]	; 0x30
  4059d2:	2300      	movs	r3, #0
  4059d4:	6920      	ldr	r0, [r4, #16]
  4059d6:	6063      	str	r3, [r4, #4]
  4059d8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4059dc:	6020      	str	r0, [r4, #0]
  4059de:	e7c5      	b.n	40596c <__swsetup_r+0x40>
  4059e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4059e4:	2309      	movs	r3, #9
  4059e6:	602b      	str	r3, [r5, #0]
  4059e8:	f04f 30ff 	mov.w	r0, #4294967295
  4059ec:	81a2      	strh	r2, [r4, #12]
  4059ee:	bd38      	pop	{r3, r4, r5, pc}
  4059f0:	20400058 	.word	0x20400058

004059f4 <register_fini>:
  4059f4:	4b02      	ldr	r3, [pc, #8]	; (405a00 <register_fini+0xc>)
  4059f6:	b113      	cbz	r3, 4059fe <register_fini+0xa>
  4059f8:	4802      	ldr	r0, [pc, #8]	; (405a04 <register_fini+0x10>)
  4059fa:	f000 b805 	b.w	405a08 <atexit>
  4059fe:	4770      	bx	lr
  405a00:	00000000 	.word	0x00000000
  405a04:	00405c75 	.word	0x00405c75

00405a08 <atexit>:
  405a08:	2300      	movs	r3, #0
  405a0a:	4601      	mov	r1, r0
  405a0c:	461a      	mov	r2, r3
  405a0e:	4618      	mov	r0, r3
  405a10:	f001 b90a 	b.w	406c28 <__register_exitproc>

00405a14 <__sflush_r>:
  405a14:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  405a18:	b29a      	uxth	r2, r3
  405a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405a1e:	460d      	mov	r5, r1
  405a20:	0711      	lsls	r1, r2, #28
  405a22:	4680      	mov	r8, r0
  405a24:	d43a      	bmi.n	405a9c <__sflush_r+0x88>
  405a26:	686a      	ldr	r2, [r5, #4]
  405a28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  405a2c:	2a00      	cmp	r2, #0
  405a2e:	81ab      	strh	r3, [r5, #12]
  405a30:	dd6f      	ble.n	405b12 <__sflush_r+0xfe>
  405a32:	6aac      	ldr	r4, [r5, #40]	; 0x28
  405a34:	2c00      	cmp	r4, #0
  405a36:	d049      	beq.n	405acc <__sflush_r+0xb8>
  405a38:	2200      	movs	r2, #0
  405a3a:	b29b      	uxth	r3, r3
  405a3c:	f8d8 6000 	ldr.w	r6, [r8]
  405a40:	f8c8 2000 	str.w	r2, [r8]
  405a44:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  405a48:	d067      	beq.n	405b1a <__sflush_r+0x106>
  405a4a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  405a4c:	075f      	lsls	r7, r3, #29
  405a4e:	d505      	bpl.n	405a5c <__sflush_r+0x48>
  405a50:	6869      	ldr	r1, [r5, #4]
  405a52:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  405a54:	1a52      	subs	r2, r2, r1
  405a56:	b10b      	cbz	r3, 405a5c <__sflush_r+0x48>
  405a58:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  405a5a:	1ad2      	subs	r2, r2, r3
  405a5c:	2300      	movs	r3, #0
  405a5e:	69e9      	ldr	r1, [r5, #28]
  405a60:	4640      	mov	r0, r8
  405a62:	47a0      	blx	r4
  405a64:	1c44      	adds	r4, r0, #1
  405a66:	d03c      	beq.n	405ae2 <__sflush_r+0xce>
  405a68:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  405a6c:	692a      	ldr	r2, [r5, #16]
  405a6e:	602a      	str	r2, [r5, #0]
  405a70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  405a74:	2200      	movs	r2, #0
  405a76:	81ab      	strh	r3, [r5, #12]
  405a78:	04db      	lsls	r3, r3, #19
  405a7a:	606a      	str	r2, [r5, #4]
  405a7c:	d447      	bmi.n	405b0e <__sflush_r+0xfa>
  405a7e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  405a80:	f8c8 6000 	str.w	r6, [r8]
  405a84:	b311      	cbz	r1, 405acc <__sflush_r+0xb8>
  405a86:	f105 0340 	add.w	r3, r5, #64	; 0x40
  405a8a:	4299      	cmp	r1, r3
  405a8c:	d002      	beq.n	405a94 <__sflush_r+0x80>
  405a8e:	4640      	mov	r0, r8
  405a90:	f000 f9de 	bl	405e50 <_free_r>
  405a94:	2000      	movs	r0, #0
  405a96:	6328      	str	r0, [r5, #48]	; 0x30
  405a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405a9c:	692e      	ldr	r6, [r5, #16]
  405a9e:	b1ae      	cbz	r6, 405acc <__sflush_r+0xb8>
  405aa0:	682c      	ldr	r4, [r5, #0]
  405aa2:	602e      	str	r6, [r5, #0]
  405aa4:	0791      	lsls	r1, r2, #30
  405aa6:	bf0c      	ite	eq
  405aa8:	696b      	ldreq	r3, [r5, #20]
  405aaa:	2300      	movne	r3, #0
  405aac:	1ba4      	subs	r4, r4, r6
  405aae:	60ab      	str	r3, [r5, #8]
  405ab0:	e00a      	b.n	405ac8 <__sflush_r+0xb4>
  405ab2:	4623      	mov	r3, r4
  405ab4:	4632      	mov	r2, r6
  405ab6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  405ab8:	69e9      	ldr	r1, [r5, #28]
  405aba:	4640      	mov	r0, r8
  405abc:	47b8      	blx	r7
  405abe:	2800      	cmp	r0, #0
  405ac0:	eba4 0400 	sub.w	r4, r4, r0
  405ac4:	4406      	add	r6, r0
  405ac6:	dd04      	ble.n	405ad2 <__sflush_r+0xbe>
  405ac8:	2c00      	cmp	r4, #0
  405aca:	dcf2      	bgt.n	405ab2 <__sflush_r+0x9e>
  405acc:	2000      	movs	r0, #0
  405ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405ad2:	89ab      	ldrh	r3, [r5, #12]
  405ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405ad8:	81ab      	strh	r3, [r5, #12]
  405ada:	f04f 30ff 	mov.w	r0, #4294967295
  405ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405ae2:	f8d8 4000 	ldr.w	r4, [r8]
  405ae6:	2c1d      	cmp	r4, #29
  405ae8:	d8f3      	bhi.n	405ad2 <__sflush_r+0xbe>
  405aea:	4b19      	ldr	r3, [pc, #100]	; (405b50 <__sflush_r+0x13c>)
  405aec:	40e3      	lsrs	r3, r4
  405aee:	43db      	mvns	r3, r3
  405af0:	f013 0301 	ands.w	r3, r3, #1
  405af4:	d1ed      	bne.n	405ad2 <__sflush_r+0xbe>
  405af6:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  405afa:	606b      	str	r3, [r5, #4]
  405afc:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  405b00:	6929      	ldr	r1, [r5, #16]
  405b02:	81ab      	strh	r3, [r5, #12]
  405b04:	04da      	lsls	r2, r3, #19
  405b06:	6029      	str	r1, [r5, #0]
  405b08:	d5b9      	bpl.n	405a7e <__sflush_r+0x6a>
  405b0a:	2c00      	cmp	r4, #0
  405b0c:	d1b7      	bne.n	405a7e <__sflush_r+0x6a>
  405b0e:	6528      	str	r0, [r5, #80]	; 0x50
  405b10:	e7b5      	b.n	405a7e <__sflush_r+0x6a>
  405b12:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  405b14:	2a00      	cmp	r2, #0
  405b16:	dc8c      	bgt.n	405a32 <__sflush_r+0x1e>
  405b18:	e7d8      	b.n	405acc <__sflush_r+0xb8>
  405b1a:	2301      	movs	r3, #1
  405b1c:	69e9      	ldr	r1, [r5, #28]
  405b1e:	4640      	mov	r0, r8
  405b20:	47a0      	blx	r4
  405b22:	1c43      	adds	r3, r0, #1
  405b24:	4602      	mov	r2, r0
  405b26:	d002      	beq.n	405b2e <__sflush_r+0x11a>
  405b28:	89ab      	ldrh	r3, [r5, #12]
  405b2a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  405b2c:	e78e      	b.n	405a4c <__sflush_r+0x38>
  405b2e:	f8d8 3000 	ldr.w	r3, [r8]
  405b32:	2b00      	cmp	r3, #0
  405b34:	d0f8      	beq.n	405b28 <__sflush_r+0x114>
  405b36:	2b1d      	cmp	r3, #29
  405b38:	d001      	beq.n	405b3e <__sflush_r+0x12a>
  405b3a:	2b16      	cmp	r3, #22
  405b3c:	d102      	bne.n	405b44 <__sflush_r+0x130>
  405b3e:	f8c8 6000 	str.w	r6, [r8]
  405b42:	e7c3      	b.n	405acc <__sflush_r+0xb8>
  405b44:	89ab      	ldrh	r3, [r5, #12]
  405b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405b4a:	81ab      	strh	r3, [r5, #12]
  405b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405b50:	20400001 	.word	0x20400001

00405b54 <_fflush_r>:
  405b54:	b538      	push	{r3, r4, r5, lr}
  405b56:	460d      	mov	r5, r1
  405b58:	4604      	mov	r4, r0
  405b5a:	b108      	cbz	r0, 405b60 <_fflush_r+0xc>
  405b5c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405b5e:	b1bb      	cbz	r3, 405b90 <_fflush_r+0x3c>
  405b60:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  405b64:	b188      	cbz	r0, 405b8a <_fflush_r+0x36>
  405b66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  405b68:	07db      	lsls	r3, r3, #31
  405b6a:	d401      	bmi.n	405b70 <_fflush_r+0x1c>
  405b6c:	0581      	lsls	r1, r0, #22
  405b6e:	d517      	bpl.n	405ba0 <_fflush_r+0x4c>
  405b70:	4620      	mov	r0, r4
  405b72:	4629      	mov	r1, r5
  405b74:	f7ff ff4e 	bl	405a14 <__sflush_r>
  405b78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  405b7a:	07da      	lsls	r2, r3, #31
  405b7c:	4604      	mov	r4, r0
  405b7e:	d402      	bmi.n	405b86 <_fflush_r+0x32>
  405b80:	89ab      	ldrh	r3, [r5, #12]
  405b82:	059b      	lsls	r3, r3, #22
  405b84:	d507      	bpl.n	405b96 <_fflush_r+0x42>
  405b86:	4620      	mov	r0, r4
  405b88:	bd38      	pop	{r3, r4, r5, pc}
  405b8a:	4604      	mov	r4, r0
  405b8c:	4620      	mov	r0, r4
  405b8e:	bd38      	pop	{r3, r4, r5, pc}
  405b90:	f000 f838 	bl	405c04 <__sinit>
  405b94:	e7e4      	b.n	405b60 <_fflush_r+0xc>
  405b96:	6da8      	ldr	r0, [r5, #88]	; 0x58
  405b98:	f000 fbf6 	bl	406388 <__retarget_lock_release_recursive>
  405b9c:	4620      	mov	r0, r4
  405b9e:	bd38      	pop	{r3, r4, r5, pc}
  405ba0:	6da8      	ldr	r0, [r5, #88]	; 0x58
  405ba2:	f000 fbef 	bl	406384 <__retarget_lock_acquire_recursive>
  405ba6:	e7e3      	b.n	405b70 <_fflush_r+0x1c>

00405ba8 <_cleanup_r>:
  405ba8:	4901      	ldr	r1, [pc, #4]	; (405bb0 <_cleanup_r+0x8>)
  405baa:	f000 bbaf 	b.w	40630c <_fwalk_reent>
  405bae:	bf00      	nop
  405bb0:	00406d11 	.word	0x00406d11

00405bb4 <std.isra.0>:
  405bb4:	b510      	push	{r4, lr}
  405bb6:	2300      	movs	r3, #0
  405bb8:	4604      	mov	r4, r0
  405bba:	8181      	strh	r1, [r0, #12]
  405bbc:	81c2      	strh	r2, [r0, #14]
  405bbe:	6003      	str	r3, [r0, #0]
  405bc0:	6043      	str	r3, [r0, #4]
  405bc2:	6083      	str	r3, [r0, #8]
  405bc4:	6643      	str	r3, [r0, #100]	; 0x64
  405bc6:	6103      	str	r3, [r0, #16]
  405bc8:	6143      	str	r3, [r0, #20]
  405bca:	6183      	str	r3, [r0, #24]
  405bcc:	4619      	mov	r1, r3
  405bce:	2208      	movs	r2, #8
  405bd0:	305c      	adds	r0, #92	; 0x5c
  405bd2:	f7fe ff75 	bl	404ac0 <memset>
  405bd6:	4807      	ldr	r0, [pc, #28]	; (405bf4 <std.isra.0+0x40>)
  405bd8:	4907      	ldr	r1, [pc, #28]	; (405bf8 <std.isra.0+0x44>)
  405bda:	4a08      	ldr	r2, [pc, #32]	; (405bfc <std.isra.0+0x48>)
  405bdc:	4b08      	ldr	r3, [pc, #32]	; (405c00 <std.isra.0+0x4c>)
  405bde:	6220      	str	r0, [r4, #32]
  405be0:	61e4      	str	r4, [r4, #28]
  405be2:	6261      	str	r1, [r4, #36]	; 0x24
  405be4:	62a2      	str	r2, [r4, #40]	; 0x28
  405be6:	62e3      	str	r3, [r4, #44]	; 0x2c
  405be8:	f104 0058 	add.w	r0, r4, #88	; 0x58
  405bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405bf0:	f000 bbc4 	b.w	40637c <__retarget_lock_init_recursive>
  405bf4:	00406965 	.word	0x00406965
  405bf8:	00406989 	.word	0x00406989
  405bfc:	004069c5 	.word	0x004069c5
  405c00:	004069e5 	.word	0x004069e5

00405c04 <__sinit>:
  405c04:	b510      	push	{r4, lr}
  405c06:	4604      	mov	r4, r0
  405c08:	4812      	ldr	r0, [pc, #72]	; (405c54 <__sinit+0x50>)
  405c0a:	f000 fbbb 	bl	406384 <__retarget_lock_acquire_recursive>
  405c0e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  405c10:	b9d2      	cbnz	r2, 405c48 <__sinit+0x44>
  405c12:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  405c16:	4810      	ldr	r0, [pc, #64]	; (405c58 <__sinit+0x54>)
  405c18:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  405c1c:	2103      	movs	r1, #3
  405c1e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  405c22:	63e0      	str	r0, [r4, #60]	; 0x3c
  405c24:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  405c28:	6860      	ldr	r0, [r4, #4]
  405c2a:	2104      	movs	r1, #4
  405c2c:	f7ff ffc2 	bl	405bb4 <std.isra.0>
  405c30:	2201      	movs	r2, #1
  405c32:	2109      	movs	r1, #9
  405c34:	68a0      	ldr	r0, [r4, #8]
  405c36:	f7ff ffbd 	bl	405bb4 <std.isra.0>
  405c3a:	2202      	movs	r2, #2
  405c3c:	2112      	movs	r1, #18
  405c3e:	68e0      	ldr	r0, [r4, #12]
  405c40:	f7ff ffb8 	bl	405bb4 <std.isra.0>
  405c44:	2301      	movs	r3, #1
  405c46:	63a3      	str	r3, [r4, #56]	; 0x38
  405c48:	4802      	ldr	r0, [pc, #8]	; (405c54 <__sinit+0x50>)
  405c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405c4e:	f000 bb9b 	b.w	406388 <__retarget_lock_release_recursive>
  405c52:	bf00      	nop
  405c54:	2044a8c8 	.word	0x2044a8c8
  405c58:	00405ba9 	.word	0x00405ba9

00405c5c <__sfp_lock_acquire>:
  405c5c:	4801      	ldr	r0, [pc, #4]	; (405c64 <__sfp_lock_acquire+0x8>)
  405c5e:	f000 bb91 	b.w	406384 <__retarget_lock_acquire_recursive>
  405c62:	bf00      	nop
  405c64:	2044a8dc 	.word	0x2044a8dc

00405c68 <__sfp_lock_release>:
  405c68:	4801      	ldr	r0, [pc, #4]	; (405c70 <__sfp_lock_release+0x8>)
  405c6a:	f000 bb8d 	b.w	406388 <__retarget_lock_release_recursive>
  405c6e:	bf00      	nop
  405c70:	2044a8dc 	.word	0x2044a8dc

00405c74 <__libc_fini_array>:
  405c74:	b538      	push	{r3, r4, r5, lr}
  405c76:	4c0a      	ldr	r4, [pc, #40]	; (405ca0 <__libc_fini_array+0x2c>)
  405c78:	4d0a      	ldr	r5, [pc, #40]	; (405ca4 <__libc_fini_array+0x30>)
  405c7a:	1b64      	subs	r4, r4, r5
  405c7c:	10a4      	asrs	r4, r4, #2
  405c7e:	d00a      	beq.n	405c96 <__libc_fini_array+0x22>
  405c80:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  405c84:	3b01      	subs	r3, #1
  405c86:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  405c8a:	3c01      	subs	r4, #1
  405c8c:	f855 3904 	ldr.w	r3, [r5], #-4
  405c90:	4798      	blx	r3
  405c92:	2c00      	cmp	r4, #0
  405c94:	d1f9      	bne.n	405c8a <__libc_fini_array+0x16>
  405c96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405c9a:	f002 b84f 	b.w	407d3c <_fini>
  405c9e:	bf00      	nop
  405ca0:	00407d4c 	.word	0x00407d4c
  405ca4:	00407d48 	.word	0x00407d48

00405ca8 <__fputwc>:
  405ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405cac:	b082      	sub	sp, #8
  405cae:	4680      	mov	r8, r0
  405cb0:	4689      	mov	r9, r1
  405cb2:	4614      	mov	r4, r2
  405cb4:	f000 fb54 	bl	406360 <__locale_mb_cur_max>
  405cb8:	2801      	cmp	r0, #1
  405cba:	d036      	beq.n	405d2a <__fputwc+0x82>
  405cbc:	464a      	mov	r2, r9
  405cbe:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  405cc2:	a901      	add	r1, sp, #4
  405cc4:	4640      	mov	r0, r8
  405cc6:	f000 ff61 	bl	406b8c <_wcrtomb_r>
  405cca:	1c42      	adds	r2, r0, #1
  405ccc:	4606      	mov	r6, r0
  405cce:	d025      	beq.n	405d1c <__fputwc+0x74>
  405cd0:	b3a8      	cbz	r0, 405d3e <__fputwc+0x96>
  405cd2:	f89d e004 	ldrb.w	lr, [sp, #4]
  405cd6:	2500      	movs	r5, #0
  405cd8:	f10d 0a04 	add.w	sl, sp, #4
  405cdc:	e009      	b.n	405cf2 <__fputwc+0x4a>
  405cde:	6823      	ldr	r3, [r4, #0]
  405ce0:	1c5a      	adds	r2, r3, #1
  405ce2:	6022      	str	r2, [r4, #0]
  405ce4:	f883 e000 	strb.w	lr, [r3]
  405ce8:	3501      	adds	r5, #1
  405cea:	42b5      	cmp	r5, r6
  405cec:	d227      	bcs.n	405d3e <__fputwc+0x96>
  405cee:	f815 e00a 	ldrb.w	lr, [r5, sl]
  405cf2:	68a3      	ldr	r3, [r4, #8]
  405cf4:	3b01      	subs	r3, #1
  405cf6:	2b00      	cmp	r3, #0
  405cf8:	60a3      	str	r3, [r4, #8]
  405cfa:	daf0      	bge.n	405cde <__fputwc+0x36>
  405cfc:	69a7      	ldr	r7, [r4, #24]
  405cfe:	42bb      	cmp	r3, r7
  405d00:	4671      	mov	r1, lr
  405d02:	4622      	mov	r2, r4
  405d04:	4640      	mov	r0, r8
  405d06:	db02      	blt.n	405d0e <__fputwc+0x66>
  405d08:	f1be 0f0a 	cmp.w	lr, #10
  405d0c:	d1e7      	bne.n	405cde <__fputwc+0x36>
  405d0e:	f000 fee5 	bl	406adc <__swbuf_r>
  405d12:	1c43      	adds	r3, r0, #1
  405d14:	d1e8      	bne.n	405ce8 <__fputwc+0x40>
  405d16:	b002      	add	sp, #8
  405d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405d1c:	89a3      	ldrh	r3, [r4, #12]
  405d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405d22:	81a3      	strh	r3, [r4, #12]
  405d24:	b002      	add	sp, #8
  405d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405d2a:	f109 33ff 	add.w	r3, r9, #4294967295
  405d2e:	2bfe      	cmp	r3, #254	; 0xfe
  405d30:	d8c4      	bhi.n	405cbc <__fputwc+0x14>
  405d32:	fa5f fe89 	uxtb.w	lr, r9
  405d36:	4606      	mov	r6, r0
  405d38:	f88d e004 	strb.w	lr, [sp, #4]
  405d3c:	e7cb      	b.n	405cd6 <__fputwc+0x2e>
  405d3e:	4648      	mov	r0, r9
  405d40:	b002      	add	sp, #8
  405d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405d46:	bf00      	nop

00405d48 <_fputwc_r>:
  405d48:	b530      	push	{r4, r5, lr}
  405d4a:	6e53      	ldr	r3, [r2, #100]	; 0x64
  405d4c:	f013 0f01 	tst.w	r3, #1
  405d50:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  405d54:	4614      	mov	r4, r2
  405d56:	b083      	sub	sp, #12
  405d58:	4605      	mov	r5, r0
  405d5a:	b29a      	uxth	r2, r3
  405d5c:	d101      	bne.n	405d62 <_fputwc_r+0x1a>
  405d5e:	0590      	lsls	r0, r2, #22
  405d60:	d51c      	bpl.n	405d9c <_fputwc_r+0x54>
  405d62:	0490      	lsls	r0, r2, #18
  405d64:	d406      	bmi.n	405d74 <_fputwc_r+0x2c>
  405d66:	6e62      	ldr	r2, [r4, #100]	; 0x64
  405d68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405d6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405d70:	81a3      	strh	r3, [r4, #12]
  405d72:	6662      	str	r2, [r4, #100]	; 0x64
  405d74:	4628      	mov	r0, r5
  405d76:	4622      	mov	r2, r4
  405d78:	f7ff ff96 	bl	405ca8 <__fputwc>
  405d7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405d7e:	07da      	lsls	r2, r3, #31
  405d80:	4605      	mov	r5, r0
  405d82:	d402      	bmi.n	405d8a <_fputwc_r+0x42>
  405d84:	89a3      	ldrh	r3, [r4, #12]
  405d86:	059b      	lsls	r3, r3, #22
  405d88:	d502      	bpl.n	405d90 <_fputwc_r+0x48>
  405d8a:	4628      	mov	r0, r5
  405d8c:	b003      	add	sp, #12
  405d8e:	bd30      	pop	{r4, r5, pc}
  405d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405d92:	f000 faf9 	bl	406388 <__retarget_lock_release_recursive>
  405d96:	4628      	mov	r0, r5
  405d98:	b003      	add	sp, #12
  405d9a:	bd30      	pop	{r4, r5, pc}
  405d9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405d9e:	9101      	str	r1, [sp, #4]
  405da0:	f000 faf0 	bl	406384 <__retarget_lock_acquire_recursive>
  405da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405da8:	9901      	ldr	r1, [sp, #4]
  405daa:	b29a      	uxth	r2, r3
  405dac:	e7d9      	b.n	405d62 <_fputwc_r+0x1a>
  405dae:	bf00      	nop

00405db0 <_malloc_trim_r>:
  405db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405db2:	4f24      	ldr	r7, [pc, #144]	; (405e44 <_malloc_trim_r+0x94>)
  405db4:	460c      	mov	r4, r1
  405db6:	4606      	mov	r6, r0
  405db8:	f7fe fed0 	bl	404b5c <__malloc_lock>
  405dbc:	68bb      	ldr	r3, [r7, #8]
  405dbe:	685d      	ldr	r5, [r3, #4]
  405dc0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  405dc4:	310f      	adds	r1, #15
  405dc6:	f025 0503 	bic.w	r5, r5, #3
  405dca:	4429      	add	r1, r5
  405dcc:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405dd0:	f021 010f 	bic.w	r1, r1, #15
  405dd4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  405dd8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405ddc:	db07      	blt.n	405dee <_malloc_trim_r+0x3e>
  405dde:	2100      	movs	r1, #0
  405de0:	4630      	mov	r0, r6
  405de2:	f7fe fec7 	bl	404b74 <_sbrk_r>
  405de6:	68bb      	ldr	r3, [r7, #8]
  405de8:	442b      	add	r3, r5
  405dea:	4298      	cmp	r0, r3
  405dec:	d004      	beq.n	405df8 <_malloc_trim_r+0x48>
  405dee:	4630      	mov	r0, r6
  405df0:	f7fe feba 	bl	404b68 <__malloc_unlock>
  405df4:	2000      	movs	r0, #0
  405df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405df8:	4261      	negs	r1, r4
  405dfa:	4630      	mov	r0, r6
  405dfc:	f7fe feba 	bl	404b74 <_sbrk_r>
  405e00:	3001      	adds	r0, #1
  405e02:	d00d      	beq.n	405e20 <_malloc_trim_r+0x70>
  405e04:	4b10      	ldr	r3, [pc, #64]	; (405e48 <_malloc_trim_r+0x98>)
  405e06:	68ba      	ldr	r2, [r7, #8]
  405e08:	6819      	ldr	r1, [r3, #0]
  405e0a:	1b2d      	subs	r5, r5, r4
  405e0c:	f045 0501 	orr.w	r5, r5, #1
  405e10:	4630      	mov	r0, r6
  405e12:	1b09      	subs	r1, r1, r4
  405e14:	6055      	str	r5, [r2, #4]
  405e16:	6019      	str	r1, [r3, #0]
  405e18:	f7fe fea6 	bl	404b68 <__malloc_unlock>
  405e1c:	2001      	movs	r0, #1
  405e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405e20:	2100      	movs	r1, #0
  405e22:	4630      	mov	r0, r6
  405e24:	f7fe fea6 	bl	404b74 <_sbrk_r>
  405e28:	68ba      	ldr	r2, [r7, #8]
  405e2a:	1a83      	subs	r3, r0, r2
  405e2c:	2b0f      	cmp	r3, #15
  405e2e:	ddde      	ble.n	405dee <_malloc_trim_r+0x3e>
  405e30:	4c06      	ldr	r4, [pc, #24]	; (405e4c <_malloc_trim_r+0x9c>)
  405e32:	4905      	ldr	r1, [pc, #20]	; (405e48 <_malloc_trim_r+0x98>)
  405e34:	6824      	ldr	r4, [r4, #0]
  405e36:	f043 0301 	orr.w	r3, r3, #1
  405e3a:	1b00      	subs	r0, r0, r4
  405e3c:	6053      	str	r3, [r2, #4]
  405e3e:	6008      	str	r0, [r1, #0]
  405e40:	e7d5      	b.n	405dee <_malloc_trim_r+0x3e>
  405e42:	bf00      	nop
  405e44:	20400488 	.word	0x20400488
  405e48:	20445410 	.word	0x20445410
  405e4c:	20400890 	.word	0x20400890

00405e50 <_free_r>:
  405e50:	2900      	cmp	r1, #0
  405e52:	d044      	beq.n	405ede <_free_r+0x8e>
  405e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405e58:	460d      	mov	r5, r1
  405e5a:	4680      	mov	r8, r0
  405e5c:	f7fe fe7e 	bl	404b5c <__malloc_lock>
  405e60:	f855 7c04 	ldr.w	r7, [r5, #-4]
  405e64:	4969      	ldr	r1, [pc, #420]	; (40600c <_free_r+0x1bc>)
  405e66:	f027 0301 	bic.w	r3, r7, #1
  405e6a:	f1a5 0408 	sub.w	r4, r5, #8
  405e6e:	18e2      	adds	r2, r4, r3
  405e70:	688e      	ldr	r6, [r1, #8]
  405e72:	6850      	ldr	r0, [r2, #4]
  405e74:	42b2      	cmp	r2, r6
  405e76:	f020 0003 	bic.w	r0, r0, #3
  405e7a:	d05e      	beq.n	405f3a <_free_r+0xea>
  405e7c:	07fe      	lsls	r6, r7, #31
  405e7e:	6050      	str	r0, [r2, #4]
  405e80:	d40b      	bmi.n	405e9a <_free_r+0x4a>
  405e82:	f855 7c08 	ldr.w	r7, [r5, #-8]
  405e86:	1be4      	subs	r4, r4, r7
  405e88:	f101 0e08 	add.w	lr, r1, #8
  405e8c:	68a5      	ldr	r5, [r4, #8]
  405e8e:	4575      	cmp	r5, lr
  405e90:	443b      	add	r3, r7
  405e92:	d06d      	beq.n	405f70 <_free_r+0x120>
  405e94:	68e7      	ldr	r7, [r4, #12]
  405e96:	60ef      	str	r7, [r5, #12]
  405e98:	60bd      	str	r5, [r7, #8]
  405e9a:	1815      	adds	r5, r2, r0
  405e9c:	686d      	ldr	r5, [r5, #4]
  405e9e:	07ed      	lsls	r5, r5, #31
  405ea0:	d53e      	bpl.n	405f20 <_free_r+0xd0>
  405ea2:	f043 0201 	orr.w	r2, r3, #1
  405ea6:	6062      	str	r2, [r4, #4]
  405ea8:	50e3      	str	r3, [r4, r3]
  405eaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405eae:	d217      	bcs.n	405ee0 <_free_r+0x90>
  405eb0:	08db      	lsrs	r3, r3, #3
  405eb2:	1c58      	adds	r0, r3, #1
  405eb4:	109a      	asrs	r2, r3, #2
  405eb6:	684d      	ldr	r5, [r1, #4]
  405eb8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405ebc:	60a7      	str	r7, [r4, #8]
  405ebe:	2301      	movs	r3, #1
  405ec0:	4093      	lsls	r3, r2
  405ec2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  405ec6:	432b      	orrs	r3, r5
  405ec8:	3a08      	subs	r2, #8
  405eca:	60e2      	str	r2, [r4, #12]
  405ecc:	604b      	str	r3, [r1, #4]
  405ece:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  405ed2:	60fc      	str	r4, [r7, #12]
  405ed4:	4640      	mov	r0, r8
  405ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405eda:	f7fe be45 	b.w	404b68 <__malloc_unlock>
  405ede:	4770      	bx	lr
  405ee0:	0a5a      	lsrs	r2, r3, #9
  405ee2:	2a04      	cmp	r2, #4
  405ee4:	d852      	bhi.n	405f8c <_free_r+0x13c>
  405ee6:	099a      	lsrs	r2, r3, #6
  405ee8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  405eec:	00ff      	lsls	r7, r7, #3
  405eee:	f102 0538 	add.w	r5, r2, #56	; 0x38
  405ef2:	19c8      	adds	r0, r1, r7
  405ef4:	59ca      	ldr	r2, [r1, r7]
  405ef6:	3808      	subs	r0, #8
  405ef8:	4290      	cmp	r0, r2
  405efa:	d04f      	beq.n	405f9c <_free_r+0x14c>
  405efc:	6851      	ldr	r1, [r2, #4]
  405efe:	f021 0103 	bic.w	r1, r1, #3
  405f02:	428b      	cmp	r3, r1
  405f04:	d232      	bcs.n	405f6c <_free_r+0x11c>
  405f06:	6892      	ldr	r2, [r2, #8]
  405f08:	4290      	cmp	r0, r2
  405f0a:	d1f7      	bne.n	405efc <_free_r+0xac>
  405f0c:	68c3      	ldr	r3, [r0, #12]
  405f0e:	60a0      	str	r0, [r4, #8]
  405f10:	60e3      	str	r3, [r4, #12]
  405f12:	609c      	str	r4, [r3, #8]
  405f14:	60c4      	str	r4, [r0, #12]
  405f16:	4640      	mov	r0, r8
  405f18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405f1c:	f7fe be24 	b.w	404b68 <__malloc_unlock>
  405f20:	6895      	ldr	r5, [r2, #8]
  405f22:	4f3b      	ldr	r7, [pc, #236]	; (406010 <_free_r+0x1c0>)
  405f24:	42bd      	cmp	r5, r7
  405f26:	4403      	add	r3, r0
  405f28:	d040      	beq.n	405fac <_free_r+0x15c>
  405f2a:	68d0      	ldr	r0, [r2, #12]
  405f2c:	60e8      	str	r0, [r5, #12]
  405f2e:	f043 0201 	orr.w	r2, r3, #1
  405f32:	6085      	str	r5, [r0, #8]
  405f34:	6062      	str	r2, [r4, #4]
  405f36:	50e3      	str	r3, [r4, r3]
  405f38:	e7b7      	b.n	405eaa <_free_r+0x5a>
  405f3a:	07ff      	lsls	r7, r7, #31
  405f3c:	4403      	add	r3, r0
  405f3e:	d407      	bmi.n	405f50 <_free_r+0x100>
  405f40:	f855 2c08 	ldr.w	r2, [r5, #-8]
  405f44:	1aa4      	subs	r4, r4, r2
  405f46:	4413      	add	r3, r2
  405f48:	68a0      	ldr	r0, [r4, #8]
  405f4a:	68e2      	ldr	r2, [r4, #12]
  405f4c:	60c2      	str	r2, [r0, #12]
  405f4e:	6090      	str	r0, [r2, #8]
  405f50:	4a30      	ldr	r2, [pc, #192]	; (406014 <_free_r+0x1c4>)
  405f52:	6812      	ldr	r2, [r2, #0]
  405f54:	f043 0001 	orr.w	r0, r3, #1
  405f58:	4293      	cmp	r3, r2
  405f5a:	6060      	str	r0, [r4, #4]
  405f5c:	608c      	str	r4, [r1, #8]
  405f5e:	d3b9      	bcc.n	405ed4 <_free_r+0x84>
  405f60:	4b2d      	ldr	r3, [pc, #180]	; (406018 <_free_r+0x1c8>)
  405f62:	4640      	mov	r0, r8
  405f64:	6819      	ldr	r1, [r3, #0]
  405f66:	f7ff ff23 	bl	405db0 <_malloc_trim_r>
  405f6a:	e7b3      	b.n	405ed4 <_free_r+0x84>
  405f6c:	4610      	mov	r0, r2
  405f6e:	e7cd      	b.n	405f0c <_free_r+0xbc>
  405f70:	1811      	adds	r1, r2, r0
  405f72:	6849      	ldr	r1, [r1, #4]
  405f74:	07c9      	lsls	r1, r1, #31
  405f76:	d444      	bmi.n	406002 <_free_r+0x1b2>
  405f78:	6891      	ldr	r1, [r2, #8]
  405f7a:	68d2      	ldr	r2, [r2, #12]
  405f7c:	60ca      	str	r2, [r1, #12]
  405f7e:	4403      	add	r3, r0
  405f80:	f043 0001 	orr.w	r0, r3, #1
  405f84:	6091      	str	r1, [r2, #8]
  405f86:	6060      	str	r0, [r4, #4]
  405f88:	50e3      	str	r3, [r4, r3]
  405f8a:	e7a3      	b.n	405ed4 <_free_r+0x84>
  405f8c:	2a14      	cmp	r2, #20
  405f8e:	d816      	bhi.n	405fbe <_free_r+0x16e>
  405f90:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405f94:	00ff      	lsls	r7, r7, #3
  405f96:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  405f9a:	e7aa      	b.n	405ef2 <_free_r+0xa2>
  405f9c:	10aa      	asrs	r2, r5, #2
  405f9e:	2301      	movs	r3, #1
  405fa0:	684d      	ldr	r5, [r1, #4]
  405fa2:	4093      	lsls	r3, r2
  405fa4:	432b      	orrs	r3, r5
  405fa6:	604b      	str	r3, [r1, #4]
  405fa8:	4603      	mov	r3, r0
  405faa:	e7b0      	b.n	405f0e <_free_r+0xbe>
  405fac:	f043 0201 	orr.w	r2, r3, #1
  405fb0:	614c      	str	r4, [r1, #20]
  405fb2:	610c      	str	r4, [r1, #16]
  405fb4:	60e5      	str	r5, [r4, #12]
  405fb6:	60a5      	str	r5, [r4, #8]
  405fb8:	6062      	str	r2, [r4, #4]
  405fba:	50e3      	str	r3, [r4, r3]
  405fbc:	e78a      	b.n	405ed4 <_free_r+0x84>
  405fbe:	2a54      	cmp	r2, #84	; 0x54
  405fc0:	d806      	bhi.n	405fd0 <_free_r+0x180>
  405fc2:	0b1a      	lsrs	r2, r3, #12
  405fc4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  405fc8:	00ff      	lsls	r7, r7, #3
  405fca:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405fce:	e790      	b.n	405ef2 <_free_r+0xa2>
  405fd0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405fd4:	d806      	bhi.n	405fe4 <_free_r+0x194>
  405fd6:	0bda      	lsrs	r2, r3, #15
  405fd8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405fdc:	00ff      	lsls	r7, r7, #3
  405fde:	f102 0577 	add.w	r5, r2, #119	; 0x77
  405fe2:	e786      	b.n	405ef2 <_free_r+0xa2>
  405fe4:	f240 5054 	movw	r0, #1364	; 0x554
  405fe8:	4282      	cmp	r2, r0
  405fea:	d806      	bhi.n	405ffa <_free_r+0x1aa>
  405fec:	0c9a      	lsrs	r2, r3, #18
  405fee:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  405ff2:	00ff      	lsls	r7, r7, #3
  405ff4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  405ff8:	e77b      	b.n	405ef2 <_free_r+0xa2>
  405ffa:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  405ffe:	257e      	movs	r5, #126	; 0x7e
  406000:	e777      	b.n	405ef2 <_free_r+0xa2>
  406002:	f043 0101 	orr.w	r1, r3, #1
  406006:	6061      	str	r1, [r4, #4]
  406008:	6013      	str	r3, [r2, #0]
  40600a:	e763      	b.n	405ed4 <_free_r+0x84>
  40600c:	20400488 	.word	0x20400488
  406010:	20400490 	.word	0x20400490
  406014:	20400894 	.word	0x20400894
  406018:	20445440 	.word	0x20445440

0040601c <__sfvwrite_r>:
  40601c:	6893      	ldr	r3, [r2, #8]
  40601e:	2b00      	cmp	r3, #0
  406020:	d073      	beq.n	40610a <__sfvwrite_r+0xee>
  406022:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406026:	898b      	ldrh	r3, [r1, #12]
  406028:	b083      	sub	sp, #12
  40602a:	460c      	mov	r4, r1
  40602c:	0719      	lsls	r1, r3, #28
  40602e:	9000      	str	r0, [sp, #0]
  406030:	4616      	mov	r6, r2
  406032:	d526      	bpl.n	406082 <__sfvwrite_r+0x66>
  406034:	6922      	ldr	r2, [r4, #16]
  406036:	b322      	cbz	r2, 406082 <__sfvwrite_r+0x66>
  406038:	f013 0002 	ands.w	r0, r3, #2
  40603c:	6835      	ldr	r5, [r6, #0]
  40603e:	d02c      	beq.n	40609a <__sfvwrite_r+0x7e>
  406040:	f04f 0900 	mov.w	r9, #0
  406044:	4fb0      	ldr	r7, [pc, #704]	; (406308 <__sfvwrite_r+0x2ec>)
  406046:	46c8      	mov	r8, r9
  406048:	46b2      	mov	sl, r6
  40604a:	45b8      	cmp	r8, r7
  40604c:	4643      	mov	r3, r8
  40604e:	464a      	mov	r2, r9
  406050:	bf28      	it	cs
  406052:	463b      	movcs	r3, r7
  406054:	9800      	ldr	r0, [sp, #0]
  406056:	f1b8 0f00 	cmp.w	r8, #0
  40605a:	d050      	beq.n	4060fe <__sfvwrite_r+0xe2>
  40605c:	69e1      	ldr	r1, [r4, #28]
  40605e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406060:	47b0      	blx	r6
  406062:	2800      	cmp	r0, #0
  406064:	dd58      	ble.n	406118 <__sfvwrite_r+0xfc>
  406066:	f8da 3008 	ldr.w	r3, [sl, #8]
  40606a:	1a1b      	subs	r3, r3, r0
  40606c:	4481      	add	r9, r0
  40606e:	eba8 0800 	sub.w	r8, r8, r0
  406072:	f8ca 3008 	str.w	r3, [sl, #8]
  406076:	2b00      	cmp	r3, #0
  406078:	d1e7      	bne.n	40604a <__sfvwrite_r+0x2e>
  40607a:	2000      	movs	r0, #0
  40607c:	b003      	add	sp, #12
  40607e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406082:	4621      	mov	r1, r4
  406084:	9800      	ldr	r0, [sp, #0]
  406086:	f7ff fc51 	bl	40592c <__swsetup_r>
  40608a:	2800      	cmp	r0, #0
  40608c:	f040 8133 	bne.w	4062f6 <__sfvwrite_r+0x2da>
  406090:	89a3      	ldrh	r3, [r4, #12]
  406092:	6835      	ldr	r5, [r6, #0]
  406094:	f013 0002 	ands.w	r0, r3, #2
  406098:	d1d2      	bne.n	406040 <__sfvwrite_r+0x24>
  40609a:	f013 0901 	ands.w	r9, r3, #1
  40609e:	d145      	bne.n	40612c <__sfvwrite_r+0x110>
  4060a0:	464f      	mov	r7, r9
  4060a2:	9601      	str	r6, [sp, #4]
  4060a4:	b337      	cbz	r7, 4060f4 <__sfvwrite_r+0xd8>
  4060a6:	059a      	lsls	r2, r3, #22
  4060a8:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4060ac:	f140 8083 	bpl.w	4061b6 <__sfvwrite_r+0x19a>
  4060b0:	4547      	cmp	r7, r8
  4060b2:	46c3      	mov	fp, r8
  4060b4:	f0c0 80ab 	bcc.w	40620e <__sfvwrite_r+0x1f2>
  4060b8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4060bc:	f040 80ac 	bne.w	406218 <__sfvwrite_r+0x1fc>
  4060c0:	6820      	ldr	r0, [r4, #0]
  4060c2:	46ba      	mov	sl, r7
  4060c4:	465a      	mov	r2, fp
  4060c6:	4649      	mov	r1, r9
  4060c8:	f000 fa42 	bl	406550 <memmove>
  4060cc:	68a2      	ldr	r2, [r4, #8]
  4060ce:	6823      	ldr	r3, [r4, #0]
  4060d0:	eba2 0208 	sub.w	r2, r2, r8
  4060d4:	445b      	add	r3, fp
  4060d6:	60a2      	str	r2, [r4, #8]
  4060d8:	6023      	str	r3, [r4, #0]
  4060da:	9a01      	ldr	r2, [sp, #4]
  4060dc:	6893      	ldr	r3, [r2, #8]
  4060de:	eba3 030a 	sub.w	r3, r3, sl
  4060e2:	44d1      	add	r9, sl
  4060e4:	eba7 070a 	sub.w	r7, r7, sl
  4060e8:	6093      	str	r3, [r2, #8]
  4060ea:	2b00      	cmp	r3, #0
  4060ec:	d0c5      	beq.n	40607a <__sfvwrite_r+0x5e>
  4060ee:	89a3      	ldrh	r3, [r4, #12]
  4060f0:	2f00      	cmp	r7, #0
  4060f2:	d1d8      	bne.n	4060a6 <__sfvwrite_r+0x8a>
  4060f4:	f8d5 9000 	ldr.w	r9, [r5]
  4060f8:	686f      	ldr	r7, [r5, #4]
  4060fa:	3508      	adds	r5, #8
  4060fc:	e7d2      	b.n	4060a4 <__sfvwrite_r+0x88>
  4060fe:	f8d5 9000 	ldr.w	r9, [r5]
  406102:	f8d5 8004 	ldr.w	r8, [r5, #4]
  406106:	3508      	adds	r5, #8
  406108:	e79f      	b.n	40604a <__sfvwrite_r+0x2e>
  40610a:	2000      	movs	r0, #0
  40610c:	4770      	bx	lr
  40610e:	4621      	mov	r1, r4
  406110:	9800      	ldr	r0, [sp, #0]
  406112:	f7ff fd1f 	bl	405b54 <_fflush_r>
  406116:	b370      	cbz	r0, 406176 <__sfvwrite_r+0x15a>
  406118:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40611c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406120:	f04f 30ff 	mov.w	r0, #4294967295
  406124:	81a3      	strh	r3, [r4, #12]
  406126:	b003      	add	sp, #12
  406128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40612c:	4681      	mov	r9, r0
  40612e:	4633      	mov	r3, r6
  406130:	464e      	mov	r6, r9
  406132:	46a8      	mov	r8, r5
  406134:	469a      	mov	sl, r3
  406136:	464d      	mov	r5, r9
  406138:	b34e      	cbz	r6, 40618e <__sfvwrite_r+0x172>
  40613a:	b380      	cbz	r0, 40619e <__sfvwrite_r+0x182>
  40613c:	6820      	ldr	r0, [r4, #0]
  40613e:	6923      	ldr	r3, [r4, #16]
  406140:	6962      	ldr	r2, [r4, #20]
  406142:	45b1      	cmp	r9, r6
  406144:	46cb      	mov	fp, r9
  406146:	bf28      	it	cs
  406148:	46b3      	movcs	fp, r6
  40614a:	4298      	cmp	r0, r3
  40614c:	465f      	mov	r7, fp
  40614e:	d904      	bls.n	40615a <__sfvwrite_r+0x13e>
  406150:	68a3      	ldr	r3, [r4, #8]
  406152:	4413      	add	r3, r2
  406154:	459b      	cmp	fp, r3
  406156:	f300 80a6 	bgt.w	4062a6 <__sfvwrite_r+0x28a>
  40615a:	4593      	cmp	fp, r2
  40615c:	db4b      	blt.n	4061f6 <__sfvwrite_r+0x1da>
  40615e:	4613      	mov	r3, r2
  406160:	6a67      	ldr	r7, [r4, #36]	; 0x24
  406162:	69e1      	ldr	r1, [r4, #28]
  406164:	9800      	ldr	r0, [sp, #0]
  406166:	462a      	mov	r2, r5
  406168:	47b8      	blx	r7
  40616a:	1e07      	subs	r7, r0, #0
  40616c:	ddd4      	ble.n	406118 <__sfvwrite_r+0xfc>
  40616e:	ebb9 0907 	subs.w	r9, r9, r7
  406172:	d0cc      	beq.n	40610e <__sfvwrite_r+0xf2>
  406174:	2001      	movs	r0, #1
  406176:	f8da 3008 	ldr.w	r3, [sl, #8]
  40617a:	1bdb      	subs	r3, r3, r7
  40617c:	443d      	add	r5, r7
  40617e:	1bf6      	subs	r6, r6, r7
  406180:	f8ca 3008 	str.w	r3, [sl, #8]
  406184:	2b00      	cmp	r3, #0
  406186:	f43f af78 	beq.w	40607a <__sfvwrite_r+0x5e>
  40618a:	2e00      	cmp	r6, #0
  40618c:	d1d5      	bne.n	40613a <__sfvwrite_r+0x11e>
  40618e:	f108 0308 	add.w	r3, r8, #8
  406192:	e913 0060 	ldmdb	r3, {r5, r6}
  406196:	4698      	mov	r8, r3
  406198:	3308      	adds	r3, #8
  40619a:	2e00      	cmp	r6, #0
  40619c:	d0f9      	beq.n	406192 <__sfvwrite_r+0x176>
  40619e:	4632      	mov	r2, r6
  4061a0:	210a      	movs	r1, #10
  4061a2:	4628      	mov	r0, r5
  4061a4:	f000 f984 	bl	4064b0 <memchr>
  4061a8:	2800      	cmp	r0, #0
  4061aa:	f000 80a1 	beq.w	4062f0 <__sfvwrite_r+0x2d4>
  4061ae:	3001      	adds	r0, #1
  4061b0:	eba0 0905 	sub.w	r9, r0, r5
  4061b4:	e7c2      	b.n	40613c <__sfvwrite_r+0x120>
  4061b6:	6820      	ldr	r0, [r4, #0]
  4061b8:	6923      	ldr	r3, [r4, #16]
  4061ba:	4298      	cmp	r0, r3
  4061bc:	d802      	bhi.n	4061c4 <__sfvwrite_r+0x1a8>
  4061be:	6963      	ldr	r3, [r4, #20]
  4061c0:	429f      	cmp	r7, r3
  4061c2:	d25d      	bcs.n	406280 <__sfvwrite_r+0x264>
  4061c4:	45b8      	cmp	r8, r7
  4061c6:	bf28      	it	cs
  4061c8:	46b8      	movcs	r8, r7
  4061ca:	4642      	mov	r2, r8
  4061cc:	4649      	mov	r1, r9
  4061ce:	f000 f9bf 	bl	406550 <memmove>
  4061d2:	68a3      	ldr	r3, [r4, #8]
  4061d4:	6822      	ldr	r2, [r4, #0]
  4061d6:	eba3 0308 	sub.w	r3, r3, r8
  4061da:	4442      	add	r2, r8
  4061dc:	60a3      	str	r3, [r4, #8]
  4061de:	6022      	str	r2, [r4, #0]
  4061e0:	b10b      	cbz	r3, 4061e6 <__sfvwrite_r+0x1ca>
  4061e2:	46c2      	mov	sl, r8
  4061e4:	e779      	b.n	4060da <__sfvwrite_r+0xbe>
  4061e6:	4621      	mov	r1, r4
  4061e8:	9800      	ldr	r0, [sp, #0]
  4061ea:	f7ff fcb3 	bl	405b54 <_fflush_r>
  4061ee:	2800      	cmp	r0, #0
  4061f0:	d192      	bne.n	406118 <__sfvwrite_r+0xfc>
  4061f2:	46c2      	mov	sl, r8
  4061f4:	e771      	b.n	4060da <__sfvwrite_r+0xbe>
  4061f6:	465a      	mov	r2, fp
  4061f8:	4629      	mov	r1, r5
  4061fa:	f000 f9a9 	bl	406550 <memmove>
  4061fe:	68a2      	ldr	r2, [r4, #8]
  406200:	6823      	ldr	r3, [r4, #0]
  406202:	eba2 020b 	sub.w	r2, r2, fp
  406206:	445b      	add	r3, fp
  406208:	60a2      	str	r2, [r4, #8]
  40620a:	6023      	str	r3, [r4, #0]
  40620c:	e7af      	b.n	40616e <__sfvwrite_r+0x152>
  40620e:	6820      	ldr	r0, [r4, #0]
  406210:	46b8      	mov	r8, r7
  406212:	46ba      	mov	sl, r7
  406214:	46bb      	mov	fp, r7
  406216:	e755      	b.n	4060c4 <__sfvwrite_r+0xa8>
  406218:	6962      	ldr	r2, [r4, #20]
  40621a:	6820      	ldr	r0, [r4, #0]
  40621c:	6921      	ldr	r1, [r4, #16]
  40621e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  406222:	eba0 0a01 	sub.w	sl, r0, r1
  406226:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40622a:	f10a 0001 	add.w	r0, sl, #1
  40622e:	ea4f 0868 	mov.w	r8, r8, asr #1
  406232:	4438      	add	r0, r7
  406234:	4540      	cmp	r0, r8
  406236:	4642      	mov	r2, r8
  406238:	bf84      	itt	hi
  40623a:	4680      	movhi	r8, r0
  40623c:	4642      	movhi	r2, r8
  40623e:	055b      	lsls	r3, r3, #21
  406240:	d544      	bpl.n	4062cc <__sfvwrite_r+0x2b0>
  406242:	4611      	mov	r1, r2
  406244:	9800      	ldr	r0, [sp, #0]
  406246:	f7fe f8f1 	bl	40442c <_malloc_r>
  40624a:	4683      	mov	fp, r0
  40624c:	2800      	cmp	r0, #0
  40624e:	d055      	beq.n	4062fc <__sfvwrite_r+0x2e0>
  406250:	4652      	mov	r2, sl
  406252:	6921      	ldr	r1, [r4, #16]
  406254:	f7fe fb9a 	bl	40498c <memcpy>
  406258:	89a3      	ldrh	r3, [r4, #12]
  40625a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40625e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406262:	81a3      	strh	r3, [r4, #12]
  406264:	eb0b 000a 	add.w	r0, fp, sl
  406268:	eba8 030a 	sub.w	r3, r8, sl
  40626c:	f8c4 b010 	str.w	fp, [r4, #16]
  406270:	f8c4 8014 	str.w	r8, [r4, #20]
  406274:	6020      	str	r0, [r4, #0]
  406276:	60a3      	str	r3, [r4, #8]
  406278:	46b8      	mov	r8, r7
  40627a:	46ba      	mov	sl, r7
  40627c:	46bb      	mov	fp, r7
  40627e:	e721      	b.n	4060c4 <__sfvwrite_r+0xa8>
  406280:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  406284:	42b9      	cmp	r1, r7
  406286:	bf28      	it	cs
  406288:	4639      	movcs	r1, r7
  40628a:	464a      	mov	r2, r9
  40628c:	fb91 f1f3 	sdiv	r1, r1, r3
  406290:	9800      	ldr	r0, [sp, #0]
  406292:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406294:	fb03 f301 	mul.w	r3, r3, r1
  406298:	69e1      	ldr	r1, [r4, #28]
  40629a:	47b0      	blx	r6
  40629c:	f1b0 0a00 	subs.w	sl, r0, #0
  4062a0:	f73f af1b 	bgt.w	4060da <__sfvwrite_r+0xbe>
  4062a4:	e738      	b.n	406118 <__sfvwrite_r+0xfc>
  4062a6:	461a      	mov	r2, r3
  4062a8:	4629      	mov	r1, r5
  4062aa:	9301      	str	r3, [sp, #4]
  4062ac:	f000 f950 	bl	406550 <memmove>
  4062b0:	6822      	ldr	r2, [r4, #0]
  4062b2:	9b01      	ldr	r3, [sp, #4]
  4062b4:	9800      	ldr	r0, [sp, #0]
  4062b6:	441a      	add	r2, r3
  4062b8:	6022      	str	r2, [r4, #0]
  4062ba:	4621      	mov	r1, r4
  4062bc:	f7ff fc4a 	bl	405b54 <_fflush_r>
  4062c0:	9b01      	ldr	r3, [sp, #4]
  4062c2:	2800      	cmp	r0, #0
  4062c4:	f47f af28 	bne.w	406118 <__sfvwrite_r+0xfc>
  4062c8:	461f      	mov	r7, r3
  4062ca:	e750      	b.n	40616e <__sfvwrite_r+0x152>
  4062cc:	9800      	ldr	r0, [sp, #0]
  4062ce:	f000 f9a3 	bl	406618 <_realloc_r>
  4062d2:	4683      	mov	fp, r0
  4062d4:	2800      	cmp	r0, #0
  4062d6:	d1c5      	bne.n	406264 <__sfvwrite_r+0x248>
  4062d8:	9d00      	ldr	r5, [sp, #0]
  4062da:	6921      	ldr	r1, [r4, #16]
  4062dc:	4628      	mov	r0, r5
  4062de:	f7ff fdb7 	bl	405e50 <_free_r>
  4062e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4062e6:	220c      	movs	r2, #12
  4062e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4062ec:	602a      	str	r2, [r5, #0]
  4062ee:	e715      	b.n	40611c <__sfvwrite_r+0x100>
  4062f0:	f106 0901 	add.w	r9, r6, #1
  4062f4:	e722      	b.n	40613c <__sfvwrite_r+0x120>
  4062f6:	f04f 30ff 	mov.w	r0, #4294967295
  4062fa:	e6bf      	b.n	40607c <__sfvwrite_r+0x60>
  4062fc:	9a00      	ldr	r2, [sp, #0]
  4062fe:	230c      	movs	r3, #12
  406300:	6013      	str	r3, [r2, #0]
  406302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406306:	e709      	b.n	40611c <__sfvwrite_r+0x100>
  406308:	7ffffc00 	.word	0x7ffffc00

0040630c <_fwalk_reent>:
  40630c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406310:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  406314:	d01f      	beq.n	406356 <_fwalk_reent+0x4a>
  406316:	4688      	mov	r8, r1
  406318:	4606      	mov	r6, r0
  40631a:	f04f 0900 	mov.w	r9, #0
  40631e:	687d      	ldr	r5, [r7, #4]
  406320:	68bc      	ldr	r4, [r7, #8]
  406322:	3d01      	subs	r5, #1
  406324:	d411      	bmi.n	40634a <_fwalk_reent+0x3e>
  406326:	89a3      	ldrh	r3, [r4, #12]
  406328:	2b01      	cmp	r3, #1
  40632a:	f105 35ff 	add.w	r5, r5, #4294967295
  40632e:	d908      	bls.n	406342 <_fwalk_reent+0x36>
  406330:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  406334:	3301      	adds	r3, #1
  406336:	4621      	mov	r1, r4
  406338:	4630      	mov	r0, r6
  40633a:	d002      	beq.n	406342 <_fwalk_reent+0x36>
  40633c:	47c0      	blx	r8
  40633e:	ea49 0900 	orr.w	r9, r9, r0
  406342:	1c6b      	adds	r3, r5, #1
  406344:	f104 0468 	add.w	r4, r4, #104	; 0x68
  406348:	d1ed      	bne.n	406326 <_fwalk_reent+0x1a>
  40634a:	683f      	ldr	r7, [r7, #0]
  40634c:	2f00      	cmp	r7, #0
  40634e:	d1e6      	bne.n	40631e <_fwalk_reent+0x12>
  406350:	4648      	mov	r0, r9
  406352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406356:	46b9      	mov	r9, r7
  406358:	4648      	mov	r0, r9
  40635a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40635e:	bf00      	nop

00406360 <__locale_mb_cur_max>:
  406360:	4b04      	ldr	r3, [pc, #16]	; (406374 <__locale_mb_cur_max+0x14>)
  406362:	4a05      	ldr	r2, [pc, #20]	; (406378 <__locale_mb_cur_max+0x18>)
  406364:	681b      	ldr	r3, [r3, #0]
  406366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  406368:	2b00      	cmp	r3, #0
  40636a:	bf08      	it	eq
  40636c:	4613      	moveq	r3, r2
  40636e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  406372:	4770      	bx	lr
  406374:	20400058 	.word	0x20400058
  406378:	2040089c 	.word	0x2040089c

0040637c <__retarget_lock_init_recursive>:
  40637c:	4770      	bx	lr
  40637e:	bf00      	nop

00406380 <__retarget_lock_close_recursive>:
  406380:	4770      	bx	lr
  406382:	bf00      	nop

00406384 <__retarget_lock_acquire_recursive>:
  406384:	4770      	bx	lr
  406386:	bf00      	nop

00406388 <__retarget_lock_release_recursive>:
  406388:	4770      	bx	lr
  40638a:	bf00      	nop

0040638c <__swhatbuf_r>:
  40638c:	b570      	push	{r4, r5, r6, lr}
  40638e:	460c      	mov	r4, r1
  406390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406394:	2900      	cmp	r1, #0
  406396:	b090      	sub	sp, #64	; 0x40
  406398:	4615      	mov	r5, r2
  40639a:	461e      	mov	r6, r3
  40639c:	db14      	blt.n	4063c8 <__swhatbuf_r+0x3c>
  40639e:	aa01      	add	r2, sp, #4
  4063a0:	f000 fd18 	bl	406dd4 <_fstat_r>
  4063a4:	2800      	cmp	r0, #0
  4063a6:	db0f      	blt.n	4063c8 <__swhatbuf_r+0x3c>
  4063a8:	9a02      	ldr	r2, [sp, #8]
  4063aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4063ae:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4063b2:	fab2 f282 	clz	r2, r2
  4063b6:	0952      	lsrs	r2, r2, #5
  4063b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4063bc:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4063c0:	6032      	str	r2, [r6, #0]
  4063c2:	602b      	str	r3, [r5, #0]
  4063c4:	b010      	add	sp, #64	; 0x40
  4063c6:	bd70      	pop	{r4, r5, r6, pc}
  4063c8:	89a2      	ldrh	r2, [r4, #12]
  4063ca:	2300      	movs	r3, #0
  4063cc:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4063d0:	6033      	str	r3, [r6, #0]
  4063d2:	d004      	beq.n	4063de <__swhatbuf_r+0x52>
  4063d4:	2240      	movs	r2, #64	; 0x40
  4063d6:	4618      	mov	r0, r3
  4063d8:	602a      	str	r2, [r5, #0]
  4063da:	b010      	add	sp, #64	; 0x40
  4063dc:	bd70      	pop	{r4, r5, r6, pc}
  4063de:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4063e2:	602b      	str	r3, [r5, #0]
  4063e4:	b010      	add	sp, #64	; 0x40
  4063e6:	bd70      	pop	{r4, r5, r6, pc}

004063e8 <__smakebuf_r>:
  4063e8:	898a      	ldrh	r2, [r1, #12]
  4063ea:	0792      	lsls	r2, r2, #30
  4063ec:	460b      	mov	r3, r1
  4063ee:	d506      	bpl.n	4063fe <__smakebuf_r+0x16>
  4063f0:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4063f4:	2101      	movs	r1, #1
  4063f6:	601a      	str	r2, [r3, #0]
  4063f8:	611a      	str	r2, [r3, #16]
  4063fa:	6159      	str	r1, [r3, #20]
  4063fc:	4770      	bx	lr
  4063fe:	b5f0      	push	{r4, r5, r6, r7, lr}
  406400:	b083      	sub	sp, #12
  406402:	ab01      	add	r3, sp, #4
  406404:	466a      	mov	r2, sp
  406406:	460c      	mov	r4, r1
  406408:	4606      	mov	r6, r0
  40640a:	f7ff ffbf 	bl	40638c <__swhatbuf_r>
  40640e:	9900      	ldr	r1, [sp, #0]
  406410:	4605      	mov	r5, r0
  406412:	4630      	mov	r0, r6
  406414:	f7fe f80a 	bl	40442c <_malloc_r>
  406418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40641c:	b1d8      	cbz	r0, 406456 <__smakebuf_r+0x6e>
  40641e:	9a01      	ldr	r2, [sp, #4]
  406420:	4f15      	ldr	r7, [pc, #84]	; (406478 <__smakebuf_r+0x90>)
  406422:	9900      	ldr	r1, [sp, #0]
  406424:	63f7      	str	r7, [r6, #60]	; 0x3c
  406426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40642a:	81a3      	strh	r3, [r4, #12]
  40642c:	6020      	str	r0, [r4, #0]
  40642e:	6120      	str	r0, [r4, #16]
  406430:	6161      	str	r1, [r4, #20]
  406432:	b91a      	cbnz	r2, 40643c <__smakebuf_r+0x54>
  406434:	432b      	orrs	r3, r5
  406436:	81a3      	strh	r3, [r4, #12]
  406438:	b003      	add	sp, #12
  40643a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40643c:	4630      	mov	r0, r6
  40643e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406442:	f000 fcdb 	bl	406dfc <_isatty_r>
  406446:	b1a0      	cbz	r0, 406472 <__smakebuf_r+0x8a>
  406448:	89a3      	ldrh	r3, [r4, #12]
  40644a:	f023 0303 	bic.w	r3, r3, #3
  40644e:	f043 0301 	orr.w	r3, r3, #1
  406452:	b21b      	sxth	r3, r3
  406454:	e7ee      	b.n	406434 <__smakebuf_r+0x4c>
  406456:	059a      	lsls	r2, r3, #22
  406458:	d4ee      	bmi.n	406438 <__smakebuf_r+0x50>
  40645a:	f023 0303 	bic.w	r3, r3, #3
  40645e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  406462:	f043 0302 	orr.w	r3, r3, #2
  406466:	2101      	movs	r1, #1
  406468:	81a3      	strh	r3, [r4, #12]
  40646a:	6022      	str	r2, [r4, #0]
  40646c:	6122      	str	r2, [r4, #16]
  40646e:	6161      	str	r1, [r4, #20]
  406470:	e7e2      	b.n	406438 <__smakebuf_r+0x50>
  406472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406476:	e7dd      	b.n	406434 <__smakebuf_r+0x4c>
  406478:	00405ba9 	.word	0x00405ba9

0040647c <__ascii_mbtowc>:
  40647c:	b082      	sub	sp, #8
  40647e:	b149      	cbz	r1, 406494 <__ascii_mbtowc+0x18>
  406480:	b15a      	cbz	r2, 40649a <__ascii_mbtowc+0x1e>
  406482:	b16b      	cbz	r3, 4064a0 <__ascii_mbtowc+0x24>
  406484:	7813      	ldrb	r3, [r2, #0]
  406486:	600b      	str	r3, [r1, #0]
  406488:	7812      	ldrb	r2, [r2, #0]
  40648a:	1c10      	adds	r0, r2, #0
  40648c:	bf18      	it	ne
  40648e:	2001      	movne	r0, #1
  406490:	b002      	add	sp, #8
  406492:	4770      	bx	lr
  406494:	a901      	add	r1, sp, #4
  406496:	2a00      	cmp	r2, #0
  406498:	d1f3      	bne.n	406482 <__ascii_mbtowc+0x6>
  40649a:	4610      	mov	r0, r2
  40649c:	b002      	add	sp, #8
  40649e:	4770      	bx	lr
  4064a0:	f06f 0001 	mvn.w	r0, #1
  4064a4:	e7f4      	b.n	406490 <__ascii_mbtowc+0x14>
  4064a6:	bf00      	nop
	...

004064b0 <memchr>:
  4064b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4064b4:	2a10      	cmp	r2, #16
  4064b6:	db2b      	blt.n	406510 <memchr+0x60>
  4064b8:	f010 0f07 	tst.w	r0, #7
  4064bc:	d008      	beq.n	4064d0 <memchr+0x20>
  4064be:	f810 3b01 	ldrb.w	r3, [r0], #1
  4064c2:	3a01      	subs	r2, #1
  4064c4:	428b      	cmp	r3, r1
  4064c6:	d02d      	beq.n	406524 <memchr+0x74>
  4064c8:	f010 0f07 	tst.w	r0, #7
  4064cc:	b342      	cbz	r2, 406520 <memchr+0x70>
  4064ce:	d1f6      	bne.n	4064be <memchr+0xe>
  4064d0:	b4f0      	push	{r4, r5, r6, r7}
  4064d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4064d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4064da:	f022 0407 	bic.w	r4, r2, #7
  4064de:	f07f 0700 	mvns.w	r7, #0
  4064e2:	2300      	movs	r3, #0
  4064e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4064e8:	3c08      	subs	r4, #8
  4064ea:	ea85 0501 	eor.w	r5, r5, r1
  4064ee:	ea86 0601 	eor.w	r6, r6, r1
  4064f2:	fa85 f547 	uadd8	r5, r5, r7
  4064f6:	faa3 f587 	sel	r5, r3, r7
  4064fa:	fa86 f647 	uadd8	r6, r6, r7
  4064fe:	faa5 f687 	sel	r6, r5, r7
  406502:	b98e      	cbnz	r6, 406528 <memchr+0x78>
  406504:	d1ee      	bne.n	4064e4 <memchr+0x34>
  406506:	bcf0      	pop	{r4, r5, r6, r7}
  406508:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40650c:	f002 0207 	and.w	r2, r2, #7
  406510:	b132      	cbz	r2, 406520 <memchr+0x70>
  406512:	f810 3b01 	ldrb.w	r3, [r0], #1
  406516:	3a01      	subs	r2, #1
  406518:	ea83 0301 	eor.w	r3, r3, r1
  40651c:	b113      	cbz	r3, 406524 <memchr+0x74>
  40651e:	d1f8      	bne.n	406512 <memchr+0x62>
  406520:	2000      	movs	r0, #0
  406522:	4770      	bx	lr
  406524:	3801      	subs	r0, #1
  406526:	4770      	bx	lr
  406528:	2d00      	cmp	r5, #0
  40652a:	bf06      	itte	eq
  40652c:	4635      	moveq	r5, r6
  40652e:	3803      	subeq	r0, #3
  406530:	3807      	subne	r0, #7
  406532:	f015 0f01 	tst.w	r5, #1
  406536:	d107      	bne.n	406548 <memchr+0x98>
  406538:	3001      	adds	r0, #1
  40653a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40653e:	bf02      	ittt	eq
  406540:	3001      	addeq	r0, #1
  406542:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406546:	3001      	addeq	r0, #1
  406548:	bcf0      	pop	{r4, r5, r6, r7}
  40654a:	3801      	subs	r0, #1
  40654c:	4770      	bx	lr
  40654e:	bf00      	nop

00406550 <memmove>:
  406550:	4288      	cmp	r0, r1
  406552:	b5f0      	push	{r4, r5, r6, r7, lr}
  406554:	d90d      	bls.n	406572 <memmove+0x22>
  406556:	188b      	adds	r3, r1, r2
  406558:	4298      	cmp	r0, r3
  40655a:	d20a      	bcs.n	406572 <memmove+0x22>
  40655c:	1884      	adds	r4, r0, r2
  40655e:	2a00      	cmp	r2, #0
  406560:	d051      	beq.n	406606 <memmove+0xb6>
  406562:	4622      	mov	r2, r4
  406564:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  406568:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40656c:	4299      	cmp	r1, r3
  40656e:	d1f9      	bne.n	406564 <memmove+0x14>
  406570:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406572:	2a0f      	cmp	r2, #15
  406574:	d948      	bls.n	406608 <memmove+0xb8>
  406576:	ea41 0300 	orr.w	r3, r1, r0
  40657a:	079b      	lsls	r3, r3, #30
  40657c:	d146      	bne.n	40660c <memmove+0xbc>
  40657e:	f100 0410 	add.w	r4, r0, #16
  406582:	f101 0310 	add.w	r3, r1, #16
  406586:	4615      	mov	r5, r2
  406588:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40658c:	f844 6c10 	str.w	r6, [r4, #-16]
  406590:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406594:	f844 6c0c 	str.w	r6, [r4, #-12]
  406598:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40659c:	f844 6c08 	str.w	r6, [r4, #-8]
  4065a0:	3d10      	subs	r5, #16
  4065a2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4065a6:	f844 6c04 	str.w	r6, [r4, #-4]
  4065aa:	2d0f      	cmp	r5, #15
  4065ac:	f103 0310 	add.w	r3, r3, #16
  4065b0:	f104 0410 	add.w	r4, r4, #16
  4065b4:	d8e8      	bhi.n	406588 <memmove+0x38>
  4065b6:	f1a2 0310 	sub.w	r3, r2, #16
  4065ba:	f023 030f 	bic.w	r3, r3, #15
  4065be:	f002 0e0f 	and.w	lr, r2, #15
  4065c2:	3310      	adds	r3, #16
  4065c4:	f1be 0f03 	cmp.w	lr, #3
  4065c8:	4419      	add	r1, r3
  4065ca:	4403      	add	r3, r0
  4065cc:	d921      	bls.n	406612 <memmove+0xc2>
  4065ce:	1f1e      	subs	r6, r3, #4
  4065d0:	460d      	mov	r5, r1
  4065d2:	4674      	mov	r4, lr
  4065d4:	3c04      	subs	r4, #4
  4065d6:	f855 7b04 	ldr.w	r7, [r5], #4
  4065da:	f846 7f04 	str.w	r7, [r6, #4]!
  4065de:	2c03      	cmp	r4, #3
  4065e0:	d8f8      	bhi.n	4065d4 <memmove+0x84>
  4065e2:	f1ae 0404 	sub.w	r4, lr, #4
  4065e6:	f024 0403 	bic.w	r4, r4, #3
  4065ea:	3404      	adds	r4, #4
  4065ec:	4421      	add	r1, r4
  4065ee:	4423      	add	r3, r4
  4065f0:	f002 0203 	and.w	r2, r2, #3
  4065f4:	b162      	cbz	r2, 406610 <memmove+0xc0>
  4065f6:	3b01      	subs	r3, #1
  4065f8:	440a      	add	r2, r1
  4065fa:	f811 4b01 	ldrb.w	r4, [r1], #1
  4065fe:	f803 4f01 	strb.w	r4, [r3, #1]!
  406602:	428a      	cmp	r2, r1
  406604:	d1f9      	bne.n	4065fa <memmove+0xaa>
  406606:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406608:	4603      	mov	r3, r0
  40660a:	e7f3      	b.n	4065f4 <memmove+0xa4>
  40660c:	4603      	mov	r3, r0
  40660e:	e7f2      	b.n	4065f6 <memmove+0xa6>
  406610:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406612:	4672      	mov	r2, lr
  406614:	e7ee      	b.n	4065f4 <memmove+0xa4>
  406616:	bf00      	nop

00406618 <_realloc_r>:
  406618:	2900      	cmp	r1, #0
  40661a:	f000 8095 	beq.w	406748 <_realloc_r+0x130>
  40661e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406622:	460d      	mov	r5, r1
  406624:	4616      	mov	r6, r2
  406626:	b083      	sub	sp, #12
  406628:	4680      	mov	r8, r0
  40662a:	f106 070b 	add.w	r7, r6, #11
  40662e:	f7fe fa95 	bl	404b5c <__malloc_lock>
  406632:	f855 ec04 	ldr.w	lr, [r5, #-4]
  406636:	2f16      	cmp	r7, #22
  406638:	f02e 0403 	bic.w	r4, lr, #3
  40663c:	f1a5 0908 	sub.w	r9, r5, #8
  406640:	d83c      	bhi.n	4066bc <_realloc_r+0xa4>
  406642:	2210      	movs	r2, #16
  406644:	4617      	mov	r7, r2
  406646:	42be      	cmp	r6, r7
  406648:	d83d      	bhi.n	4066c6 <_realloc_r+0xae>
  40664a:	4294      	cmp	r4, r2
  40664c:	da43      	bge.n	4066d6 <_realloc_r+0xbe>
  40664e:	4bc4      	ldr	r3, [pc, #784]	; (406960 <_realloc_r+0x348>)
  406650:	6899      	ldr	r1, [r3, #8]
  406652:	eb09 0004 	add.w	r0, r9, r4
  406656:	4288      	cmp	r0, r1
  406658:	f000 80b4 	beq.w	4067c4 <_realloc_r+0x1ac>
  40665c:	6843      	ldr	r3, [r0, #4]
  40665e:	f023 0101 	bic.w	r1, r3, #1
  406662:	4401      	add	r1, r0
  406664:	6849      	ldr	r1, [r1, #4]
  406666:	07c9      	lsls	r1, r1, #31
  406668:	d54c      	bpl.n	406704 <_realloc_r+0xec>
  40666a:	f01e 0f01 	tst.w	lr, #1
  40666e:	f000 809b 	beq.w	4067a8 <_realloc_r+0x190>
  406672:	4631      	mov	r1, r6
  406674:	4640      	mov	r0, r8
  406676:	f7fd fed9 	bl	40442c <_malloc_r>
  40667a:	4606      	mov	r6, r0
  40667c:	2800      	cmp	r0, #0
  40667e:	d03a      	beq.n	4066f6 <_realloc_r+0xde>
  406680:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406684:	f023 0301 	bic.w	r3, r3, #1
  406688:	444b      	add	r3, r9
  40668a:	f1a0 0208 	sub.w	r2, r0, #8
  40668e:	429a      	cmp	r2, r3
  406690:	f000 8121 	beq.w	4068d6 <_realloc_r+0x2be>
  406694:	1f22      	subs	r2, r4, #4
  406696:	2a24      	cmp	r2, #36	; 0x24
  406698:	f200 8107 	bhi.w	4068aa <_realloc_r+0x292>
  40669c:	2a13      	cmp	r2, #19
  40669e:	f200 80db 	bhi.w	406858 <_realloc_r+0x240>
  4066a2:	4603      	mov	r3, r0
  4066a4:	462a      	mov	r2, r5
  4066a6:	6811      	ldr	r1, [r2, #0]
  4066a8:	6019      	str	r1, [r3, #0]
  4066aa:	6851      	ldr	r1, [r2, #4]
  4066ac:	6059      	str	r1, [r3, #4]
  4066ae:	6892      	ldr	r2, [r2, #8]
  4066b0:	609a      	str	r2, [r3, #8]
  4066b2:	4629      	mov	r1, r5
  4066b4:	4640      	mov	r0, r8
  4066b6:	f7ff fbcb 	bl	405e50 <_free_r>
  4066ba:	e01c      	b.n	4066f6 <_realloc_r+0xde>
  4066bc:	f027 0707 	bic.w	r7, r7, #7
  4066c0:	2f00      	cmp	r7, #0
  4066c2:	463a      	mov	r2, r7
  4066c4:	dabf      	bge.n	406646 <_realloc_r+0x2e>
  4066c6:	2600      	movs	r6, #0
  4066c8:	230c      	movs	r3, #12
  4066ca:	4630      	mov	r0, r6
  4066cc:	f8c8 3000 	str.w	r3, [r8]
  4066d0:	b003      	add	sp, #12
  4066d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4066d6:	462e      	mov	r6, r5
  4066d8:	1be3      	subs	r3, r4, r7
  4066da:	2b0f      	cmp	r3, #15
  4066dc:	d81e      	bhi.n	40671c <_realloc_r+0x104>
  4066de:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4066e2:	f003 0301 	and.w	r3, r3, #1
  4066e6:	4323      	orrs	r3, r4
  4066e8:	444c      	add	r4, r9
  4066ea:	f8c9 3004 	str.w	r3, [r9, #4]
  4066ee:	6863      	ldr	r3, [r4, #4]
  4066f0:	f043 0301 	orr.w	r3, r3, #1
  4066f4:	6063      	str	r3, [r4, #4]
  4066f6:	4640      	mov	r0, r8
  4066f8:	f7fe fa36 	bl	404b68 <__malloc_unlock>
  4066fc:	4630      	mov	r0, r6
  4066fe:	b003      	add	sp, #12
  406700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406704:	f023 0303 	bic.w	r3, r3, #3
  406708:	18e1      	adds	r1, r4, r3
  40670a:	4291      	cmp	r1, r2
  40670c:	db1f      	blt.n	40674e <_realloc_r+0x136>
  40670e:	68c3      	ldr	r3, [r0, #12]
  406710:	6882      	ldr	r2, [r0, #8]
  406712:	462e      	mov	r6, r5
  406714:	60d3      	str	r3, [r2, #12]
  406716:	460c      	mov	r4, r1
  406718:	609a      	str	r2, [r3, #8]
  40671a:	e7dd      	b.n	4066d8 <_realloc_r+0xc0>
  40671c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  406720:	eb09 0107 	add.w	r1, r9, r7
  406724:	f002 0201 	and.w	r2, r2, #1
  406728:	444c      	add	r4, r9
  40672a:	f043 0301 	orr.w	r3, r3, #1
  40672e:	4317      	orrs	r7, r2
  406730:	f8c9 7004 	str.w	r7, [r9, #4]
  406734:	604b      	str	r3, [r1, #4]
  406736:	6863      	ldr	r3, [r4, #4]
  406738:	f043 0301 	orr.w	r3, r3, #1
  40673c:	3108      	adds	r1, #8
  40673e:	6063      	str	r3, [r4, #4]
  406740:	4640      	mov	r0, r8
  406742:	f7ff fb85 	bl	405e50 <_free_r>
  406746:	e7d6      	b.n	4066f6 <_realloc_r+0xde>
  406748:	4611      	mov	r1, r2
  40674a:	f7fd be6f 	b.w	40442c <_malloc_r>
  40674e:	f01e 0f01 	tst.w	lr, #1
  406752:	d18e      	bne.n	406672 <_realloc_r+0x5a>
  406754:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406758:	eba9 0a01 	sub.w	sl, r9, r1
  40675c:	f8da 1004 	ldr.w	r1, [sl, #4]
  406760:	f021 0103 	bic.w	r1, r1, #3
  406764:	440b      	add	r3, r1
  406766:	4423      	add	r3, r4
  406768:	4293      	cmp	r3, r2
  40676a:	db25      	blt.n	4067b8 <_realloc_r+0x1a0>
  40676c:	68c2      	ldr	r2, [r0, #12]
  40676e:	6881      	ldr	r1, [r0, #8]
  406770:	4656      	mov	r6, sl
  406772:	60ca      	str	r2, [r1, #12]
  406774:	6091      	str	r1, [r2, #8]
  406776:	f8da 100c 	ldr.w	r1, [sl, #12]
  40677a:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40677e:	1f22      	subs	r2, r4, #4
  406780:	2a24      	cmp	r2, #36	; 0x24
  406782:	60c1      	str	r1, [r0, #12]
  406784:	6088      	str	r0, [r1, #8]
  406786:	f200 8094 	bhi.w	4068b2 <_realloc_r+0x29a>
  40678a:	2a13      	cmp	r2, #19
  40678c:	d96f      	bls.n	40686e <_realloc_r+0x256>
  40678e:	6829      	ldr	r1, [r5, #0]
  406790:	f8ca 1008 	str.w	r1, [sl, #8]
  406794:	6869      	ldr	r1, [r5, #4]
  406796:	f8ca 100c 	str.w	r1, [sl, #12]
  40679a:	2a1b      	cmp	r2, #27
  40679c:	f200 80a2 	bhi.w	4068e4 <_realloc_r+0x2cc>
  4067a0:	3508      	adds	r5, #8
  4067a2:	f10a 0210 	add.w	r2, sl, #16
  4067a6:	e063      	b.n	406870 <_realloc_r+0x258>
  4067a8:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4067ac:	eba9 0a03 	sub.w	sl, r9, r3
  4067b0:	f8da 1004 	ldr.w	r1, [sl, #4]
  4067b4:	f021 0103 	bic.w	r1, r1, #3
  4067b8:	1863      	adds	r3, r4, r1
  4067ba:	4293      	cmp	r3, r2
  4067bc:	f6ff af59 	blt.w	406672 <_realloc_r+0x5a>
  4067c0:	4656      	mov	r6, sl
  4067c2:	e7d8      	b.n	406776 <_realloc_r+0x15e>
  4067c4:	6841      	ldr	r1, [r0, #4]
  4067c6:	f021 0b03 	bic.w	fp, r1, #3
  4067ca:	44a3      	add	fp, r4
  4067cc:	f107 0010 	add.w	r0, r7, #16
  4067d0:	4583      	cmp	fp, r0
  4067d2:	da56      	bge.n	406882 <_realloc_r+0x26a>
  4067d4:	f01e 0f01 	tst.w	lr, #1
  4067d8:	f47f af4b 	bne.w	406672 <_realloc_r+0x5a>
  4067dc:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4067e0:	eba9 0a01 	sub.w	sl, r9, r1
  4067e4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4067e8:	f021 0103 	bic.w	r1, r1, #3
  4067ec:	448b      	add	fp, r1
  4067ee:	4558      	cmp	r0, fp
  4067f0:	dce2      	bgt.n	4067b8 <_realloc_r+0x1a0>
  4067f2:	4656      	mov	r6, sl
  4067f4:	f8da 100c 	ldr.w	r1, [sl, #12]
  4067f8:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4067fc:	1f22      	subs	r2, r4, #4
  4067fe:	2a24      	cmp	r2, #36	; 0x24
  406800:	60c1      	str	r1, [r0, #12]
  406802:	6088      	str	r0, [r1, #8]
  406804:	f200 808f 	bhi.w	406926 <_realloc_r+0x30e>
  406808:	2a13      	cmp	r2, #19
  40680a:	f240 808a 	bls.w	406922 <_realloc_r+0x30a>
  40680e:	6829      	ldr	r1, [r5, #0]
  406810:	f8ca 1008 	str.w	r1, [sl, #8]
  406814:	6869      	ldr	r1, [r5, #4]
  406816:	f8ca 100c 	str.w	r1, [sl, #12]
  40681a:	2a1b      	cmp	r2, #27
  40681c:	f200 808a 	bhi.w	406934 <_realloc_r+0x31c>
  406820:	3508      	adds	r5, #8
  406822:	f10a 0210 	add.w	r2, sl, #16
  406826:	6829      	ldr	r1, [r5, #0]
  406828:	6011      	str	r1, [r2, #0]
  40682a:	6869      	ldr	r1, [r5, #4]
  40682c:	6051      	str	r1, [r2, #4]
  40682e:	68a9      	ldr	r1, [r5, #8]
  406830:	6091      	str	r1, [r2, #8]
  406832:	eb0a 0107 	add.w	r1, sl, r7
  406836:	ebab 0207 	sub.w	r2, fp, r7
  40683a:	f042 0201 	orr.w	r2, r2, #1
  40683e:	6099      	str	r1, [r3, #8]
  406840:	604a      	str	r2, [r1, #4]
  406842:	f8da 3004 	ldr.w	r3, [sl, #4]
  406846:	f003 0301 	and.w	r3, r3, #1
  40684a:	431f      	orrs	r7, r3
  40684c:	4640      	mov	r0, r8
  40684e:	f8ca 7004 	str.w	r7, [sl, #4]
  406852:	f7fe f989 	bl	404b68 <__malloc_unlock>
  406856:	e751      	b.n	4066fc <_realloc_r+0xe4>
  406858:	682b      	ldr	r3, [r5, #0]
  40685a:	6003      	str	r3, [r0, #0]
  40685c:	686b      	ldr	r3, [r5, #4]
  40685e:	6043      	str	r3, [r0, #4]
  406860:	2a1b      	cmp	r2, #27
  406862:	d82d      	bhi.n	4068c0 <_realloc_r+0x2a8>
  406864:	f100 0308 	add.w	r3, r0, #8
  406868:	f105 0208 	add.w	r2, r5, #8
  40686c:	e71b      	b.n	4066a6 <_realloc_r+0x8e>
  40686e:	4632      	mov	r2, r6
  406870:	6829      	ldr	r1, [r5, #0]
  406872:	6011      	str	r1, [r2, #0]
  406874:	6869      	ldr	r1, [r5, #4]
  406876:	6051      	str	r1, [r2, #4]
  406878:	68a9      	ldr	r1, [r5, #8]
  40687a:	6091      	str	r1, [r2, #8]
  40687c:	461c      	mov	r4, r3
  40687e:	46d1      	mov	r9, sl
  406880:	e72a      	b.n	4066d8 <_realloc_r+0xc0>
  406882:	eb09 0107 	add.w	r1, r9, r7
  406886:	ebab 0b07 	sub.w	fp, fp, r7
  40688a:	f04b 0201 	orr.w	r2, fp, #1
  40688e:	6099      	str	r1, [r3, #8]
  406890:	604a      	str	r2, [r1, #4]
  406892:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406896:	f003 0301 	and.w	r3, r3, #1
  40689a:	431f      	orrs	r7, r3
  40689c:	4640      	mov	r0, r8
  40689e:	f845 7c04 	str.w	r7, [r5, #-4]
  4068a2:	f7fe f961 	bl	404b68 <__malloc_unlock>
  4068a6:	462e      	mov	r6, r5
  4068a8:	e728      	b.n	4066fc <_realloc_r+0xe4>
  4068aa:	4629      	mov	r1, r5
  4068ac:	f7ff fe50 	bl	406550 <memmove>
  4068b0:	e6ff      	b.n	4066b2 <_realloc_r+0x9a>
  4068b2:	4629      	mov	r1, r5
  4068b4:	4630      	mov	r0, r6
  4068b6:	461c      	mov	r4, r3
  4068b8:	46d1      	mov	r9, sl
  4068ba:	f7ff fe49 	bl	406550 <memmove>
  4068be:	e70b      	b.n	4066d8 <_realloc_r+0xc0>
  4068c0:	68ab      	ldr	r3, [r5, #8]
  4068c2:	6083      	str	r3, [r0, #8]
  4068c4:	68eb      	ldr	r3, [r5, #12]
  4068c6:	60c3      	str	r3, [r0, #12]
  4068c8:	2a24      	cmp	r2, #36	; 0x24
  4068ca:	d017      	beq.n	4068fc <_realloc_r+0x2e4>
  4068cc:	f100 0310 	add.w	r3, r0, #16
  4068d0:	f105 0210 	add.w	r2, r5, #16
  4068d4:	e6e7      	b.n	4066a6 <_realloc_r+0x8e>
  4068d6:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4068da:	f023 0303 	bic.w	r3, r3, #3
  4068de:	441c      	add	r4, r3
  4068e0:	462e      	mov	r6, r5
  4068e2:	e6f9      	b.n	4066d8 <_realloc_r+0xc0>
  4068e4:	68a9      	ldr	r1, [r5, #8]
  4068e6:	f8ca 1010 	str.w	r1, [sl, #16]
  4068ea:	68e9      	ldr	r1, [r5, #12]
  4068ec:	f8ca 1014 	str.w	r1, [sl, #20]
  4068f0:	2a24      	cmp	r2, #36	; 0x24
  4068f2:	d00c      	beq.n	40690e <_realloc_r+0x2f6>
  4068f4:	3510      	adds	r5, #16
  4068f6:	f10a 0218 	add.w	r2, sl, #24
  4068fa:	e7b9      	b.n	406870 <_realloc_r+0x258>
  4068fc:	692b      	ldr	r3, [r5, #16]
  4068fe:	6103      	str	r3, [r0, #16]
  406900:	696b      	ldr	r3, [r5, #20]
  406902:	6143      	str	r3, [r0, #20]
  406904:	f105 0218 	add.w	r2, r5, #24
  406908:	f100 0318 	add.w	r3, r0, #24
  40690c:	e6cb      	b.n	4066a6 <_realloc_r+0x8e>
  40690e:	692a      	ldr	r2, [r5, #16]
  406910:	f8ca 2018 	str.w	r2, [sl, #24]
  406914:	696a      	ldr	r2, [r5, #20]
  406916:	f8ca 201c 	str.w	r2, [sl, #28]
  40691a:	3518      	adds	r5, #24
  40691c:	f10a 0220 	add.w	r2, sl, #32
  406920:	e7a6      	b.n	406870 <_realloc_r+0x258>
  406922:	4632      	mov	r2, r6
  406924:	e77f      	b.n	406826 <_realloc_r+0x20e>
  406926:	4629      	mov	r1, r5
  406928:	4630      	mov	r0, r6
  40692a:	9301      	str	r3, [sp, #4]
  40692c:	f7ff fe10 	bl	406550 <memmove>
  406930:	9b01      	ldr	r3, [sp, #4]
  406932:	e77e      	b.n	406832 <_realloc_r+0x21a>
  406934:	68a9      	ldr	r1, [r5, #8]
  406936:	f8ca 1010 	str.w	r1, [sl, #16]
  40693a:	68e9      	ldr	r1, [r5, #12]
  40693c:	f8ca 1014 	str.w	r1, [sl, #20]
  406940:	2a24      	cmp	r2, #36	; 0x24
  406942:	d003      	beq.n	40694c <_realloc_r+0x334>
  406944:	3510      	adds	r5, #16
  406946:	f10a 0218 	add.w	r2, sl, #24
  40694a:	e76c      	b.n	406826 <_realloc_r+0x20e>
  40694c:	692a      	ldr	r2, [r5, #16]
  40694e:	f8ca 2018 	str.w	r2, [sl, #24]
  406952:	696a      	ldr	r2, [r5, #20]
  406954:	f8ca 201c 	str.w	r2, [sl, #28]
  406958:	3518      	adds	r5, #24
  40695a:	f10a 0220 	add.w	r2, sl, #32
  40695e:	e762      	b.n	406826 <_realloc_r+0x20e>
  406960:	20400488 	.word	0x20400488

00406964 <__sread>:
  406964:	b510      	push	{r4, lr}
  406966:	460c      	mov	r4, r1
  406968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40696c:	f000 fa6e 	bl	406e4c <_read_r>
  406970:	2800      	cmp	r0, #0
  406972:	db03      	blt.n	40697c <__sread+0x18>
  406974:	6d23      	ldr	r3, [r4, #80]	; 0x50
  406976:	4403      	add	r3, r0
  406978:	6523      	str	r3, [r4, #80]	; 0x50
  40697a:	bd10      	pop	{r4, pc}
  40697c:	89a3      	ldrh	r3, [r4, #12]
  40697e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406982:	81a3      	strh	r3, [r4, #12]
  406984:	bd10      	pop	{r4, pc}
  406986:	bf00      	nop

00406988 <__swrite>:
  406988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40698c:	4616      	mov	r6, r2
  40698e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  406992:	461f      	mov	r7, r3
  406994:	05d3      	lsls	r3, r2, #23
  406996:	460c      	mov	r4, r1
  406998:	4605      	mov	r5, r0
  40699a:	d507      	bpl.n	4069ac <__swrite+0x24>
  40699c:	2200      	movs	r2, #0
  40699e:	2302      	movs	r3, #2
  4069a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4069a4:	f000 fa3c 	bl	406e20 <_lseek_r>
  4069a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4069ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4069b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4069b4:	81a2      	strh	r2, [r4, #12]
  4069b6:	463b      	mov	r3, r7
  4069b8:	4632      	mov	r2, r6
  4069ba:	4628      	mov	r0, r5
  4069bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4069c0:	f000 b91c 	b.w	406bfc <_write_r>

004069c4 <__sseek>:
  4069c4:	b510      	push	{r4, lr}
  4069c6:	460c      	mov	r4, r1
  4069c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4069cc:	f000 fa28 	bl	406e20 <_lseek_r>
  4069d0:	89a3      	ldrh	r3, [r4, #12]
  4069d2:	1c42      	adds	r2, r0, #1
  4069d4:	bf0e      	itee	eq
  4069d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4069da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4069de:	6520      	strne	r0, [r4, #80]	; 0x50
  4069e0:	81a3      	strh	r3, [r4, #12]
  4069e2:	bd10      	pop	{r4, pc}

004069e4 <__sclose>:
  4069e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4069e8:	f000 b980 	b.w	406cec <_close_r>
	...

00406a00 <strlen>:
  406a00:	f890 f000 	pld	[r0]
  406a04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406a08:	f020 0107 	bic.w	r1, r0, #7
  406a0c:	f06f 0c00 	mvn.w	ip, #0
  406a10:	f010 0407 	ands.w	r4, r0, #7
  406a14:	f891 f020 	pld	[r1, #32]
  406a18:	f040 8049 	bne.w	406aae <strlen+0xae>
  406a1c:	f04f 0400 	mov.w	r4, #0
  406a20:	f06f 0007 	mvn.w	r0, #7
  406a24:	e9d1 2300 	ldrd	r2, r3, [r1]
  406a28:	f891 f040 	pld	[r1, #64]	; 0x40
  406a2c:	f100 0008 	add.w	r0, r0, #8
  406a30:	fa82 f24c 	uadd8	r2, r2, ip
  406a34:	faa4 f28c 	sel	r2, r4, ip
  406a38:	fa83 f34c 	uadd8	r3, r3, ip
  406a3c:	faa2 f38c 	sel	r3, r2, ip
  406a40:	bb4b      	cbnz	r3, 406a96 <strlen+0x96>
  406a42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406a46:	fa82 f24c 	uadd8	r2, r2, ip
  406a4a:	f100 0008 	add.w	r0, r0, #8
  406a4e:	faa4 f28c 	sel	r2, r4, ip
  406a52:	fa83 f34c 	uadd8	r3, r3, ip
  406a56:	faa2 f38c 	sel	r3, r2, ip
  406a5a:	b9e3      	cbnz	r3, 406a96 <strlen+0x96>
  406a5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  406a60:	fa82 f24c 	uadd8	r2, r2, ip
  406a64:	f100 0008 	add.w	r0, r0, #8
  406a68:	faa4 f28c 	sel	r2, r4, ip
  406a6c:	fa83 f34c 	uadd8	r3, r3, ip
  406a70:	faa2 f38c 	sel	r3, r2, ip
  406a74:	b97b      	cbnz	r3, 406a96 <strlen+0x96>
  406a76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  406a7a:	f101 0120 	add.w	r1, r1, #32
  406a7e:	fa82 f24c 	uadd8	r2, r2, ip
  406a82:	f100 0008 	add.w	r0, r0, #8
  406a86:	faa4 f28c 	sel	r2, r4, ip
  406a8a:	fa83 f34c 	uadd8	r3, r3, ip
  406a8e:	faa2 f38c 	sel	r3, r2, ip
  406a92:	2b00      	cmp	r3, #0
  406a94:	d0c6      	beq.n	406a24 <strlen+0x24>
  406a96:	2a00      	cmp	r2, #0
  406a98:	bf04      	itt	eq
  406a9a:	3004      	addeq	r0, #4
  406a9c:	461a      	moveq	r2, r3
  406a9e:	ba12      	rev	r2, r2
  406aa0:	fab2 f282 	clz	r2, r2
  406aa4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406aa8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  406aac:	4770      	bx	lr
  406aae:	e9d1 2300 	ldrd	r2, r3, [r1]
  406ab2:	f004 0503 	and.w	r5, r4, #3
  406ab6:	f1c4 0000 	rsb	r0, r4, #0
  406aba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  406abe:	f014 0f04 	tst.w	r4, #4
  406ac2:	f891 f040 	pld	[r1, #64]	; 0x40
  406ac6:	fa0c f505 	lsl.w	r5, ip, r5
  406aca:	ea62 0205 	orn	r2, r2, r5
  406ace:	bf1c      	itt	ne
  406ad0:	ea63 0305 	ornne	r3, r3, r5
  406ad4:	4662      	movne	r2, ip
  406ad6:	f04f 0400 	mov.w	r4, #0
  406ada:	e7a9      	b.n	406a30 <strlen+0x30>

00406adc <__swbuf_r>:
  406adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406ade:	460d      	mov	r5, r1
  406ae0:	4614      	mov	r4, r2
  406ae2:	4606      	mov	r6, r0
  406ae4:	b110      	cbz	r0, 406aec <__swbuf_r+0x10>
  406ae6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406ae8:	2b00      	cmp	r3, #0
  406aea:	d04b      	beq.n	406b84 <__swbuf_r+0xa8>
  406aec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406af0:	69a3      	ldr	r3, [r4, #24]
  406af2:	60a3      	str	r3, [r4, #8]
  406af4:	b291      	uxth	r1, r2
  406af6:	0708      	lsls	r0, r1, #28
  406af8:	d539      	bpl.n	406b6e <__swbuf_r+0x92>
  406afa:	6923      	ldr	r3, [r4, #16]
  406afc:	2b00      	cmp	r3, #0
  406afe:	d036      	beq.n	406b6e <__swbuf_r+0x92>
  406b00:	b2ed      	uxtb	r5, r5
  406b02:	0489      	lsls	r1, r1, #18
  406b04:	462f      	mov	r7, r5
  406b06:	d515      	bpl.n	406b34 <__swbuf_r+0x58>
  406b08:	6822      	ldr	r2, [r4, #0]
  406b0a:	6961      	ldr	r1, [r4, #20]
  406b0c:	1ad3      	subs	r3, r2, r3
  406b0e:	428b      	cmp	r3, r1
  406b10:	da1c      	bge.n	406b4c <__swbuf_r+0x70>
  406b12:	3301      	adds	r3, #1
  406b14:	68a1      	ldr	r1, [r4, #8]
  406b16:	1c50      	adds	r0, r2, #1
  406b18:	3901      	subs	r1, #1
  406b1a:	60a1      	str	r1, [r4, #8]
  406b1c:	6020      	str	r0, [r4, #0]
  406b1e:	7015      	strb	r5, [r2, #0]
  406b20:	6962      	ldr	r2, [r4, #20]
  406b22:	429a      	cmp	r2, r3
  406b24:	d01a      	beq.n	406b5c <__swbuf_r+0x80>
  406b26:	89a3      	ldrh	r3, [r4, #12]
  406b28:	07db      	lsls	r3, r3, #31
  406b2a:	d501      	bpl.n	406b30 <__swbuf_r+0x54>
  406b2c:	2d0a      	cmp	r5, #10
  406b2e:	d015      	beq.n	406b5c <__swbuf_r+0x80>
  406b30:	4638      	mov	r0, r7
  406b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406b34:	6e61      	ldr	r1, [r4, #100]	; 0x64
  406b36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  406b3a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  406b3e:	81a2      	strh	r2, [r4, #12]
  406b40:	6822      	ldr	r2, [r4, #0]
  406b42:	6661      	str	r1, [r4, #100]	; 0x64
  406b44:	6961      	ldr	r1, [r4, #20]
  406b46:	1ad3      	subs	r3, r2, r3
  406b48:	428b      	cmp	r3, r1
  406b4a:	dbe2      	blt.n	406b12 <__swbuf_r+0x36>
  406b4c:	4621      	mov	r1, r4
  406b4e:	4630      	mov	r0, r6
  406b50:	f7ff f800 	bl	405b54 <_fflush_r>
  406b54:	b940      	cbnz	r0, 406b68 <__swbuf_r+0x8c>
  406b56:	6822      	ldr	r2, [r4, #0]
  406b58:	2301      	movs	r3, #1
  406b5a:	e7db      	b.n	406b14 <__swbuf_r+0x38>
  406b5c:	4621      	mov	r1, r4
  406b5e:	4630      	mov	r0, r6
  406b60:	f7fe fff8 	bl	405b54 <_fflush_r>
  406b64:	2800      	cmp	r0, #0
  406b66:	d0e3      	beq.n	406b30 <__swbuf_r+0x54>
  406b68:	f04f 37ff 	mov.w	r7, #4294967295
  406b6c:	e7e0      	b.n	406b30 <__swbuf_r+0x54>
  406b6e:	4621      	mov	r1, r4
  406b70:	4630      	mov	r0, r6
  406b72:	f7fe fedb 	bl	40592c <__swsetup_r>
  406b76:	2800      	cmp	r0, #0
  406b78:	d1f6      	bne.n	406b68 <__swbuf_r+0x8c>
  406b7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406b7e:	6923      	ldr	r3, [r4, #16]
  406b80:	b291      	uxth	r1, r2
  406b82:	e7bd      	b.n	406b00 <__swbuf_r+0x24>
  406b84:	f7ff f83e 	bl	405c04 <__sinit>
  406b88:	e7b0      	b.n	406aec <__swbuf_r+0x10>
  406b8a:	bf00      	nop

00406b8c <_wcrtomb_r>:
  406b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  406b8e:	4606      	mov	r6, r0
  406b90:	b085      	sub	sp, #20
  406b92:	461f      	mov	r7, r3
  406b94:	b189      	cbz	r1, 406bba <_wcrtomb_r+0x2e>
  406b96:	4c10      	ldr	r4, [pc, #64]	; (406bd8 <_wcrtomb_r+0x4c>)
  406b98:	4d10      	ldr	r5, [pc, #64]	; (406bdc <_wcrtomb_r+0x50>)
  406b9a:	6824      	ldr	r4, [r4, #0]
  406b9c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  406b9e:	2c00      	cmp	r4, #0
  406ba0:	bf08      	it	eq
  406ba2:	462c      	moveq	r4, r5
  406ba4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  406ba8:	47a0      	blx	r4
  406baa:	1c43      	adds	r3, r0, #1
  406bac:	d103      	bne.n	406bb6 <_wcrtomb_r+0x2a>
  406bae:	2200      	movs	r2, #0
  406bb0:	238a      	movs	r3, #138	; 0x8a
  406bb2:	603a      	str	r2, [r7, #0]
  406bb4:	6033      	str	r3, [r6, #0]
  406bb6:	b005      	add	sp, #20
  406bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406bba:	460c      	mov	r4, r1
  406bbc:	4906      	ldr	r1, [pc, #24]	; (406bd8 <_wcrtomb_r+0x4c>)
  406bbe:	4a07      	ldr	r2, [pc, #28]	; (406bdc <_wcrtomb_r+0x50>)
  406bc0:	6809      	ldr	r1, [r1, #0]
  406bc2:	6b49      	ldr	r1, [r1, #52]	; 0x34
  406bc4:	2900      	cmp	r1, #0
  406bc6:	bf08      	it	eq
  406bc8:	4611      	moveq	r1, r2
  406bca:	4622      	mov	r2, r4
  406bcc:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  406bd0:	a901      	add	r1, sp, #4
  406bd2:	47a0      	blx	r4
  406bd4:	e7e9      	b.n	406baa <_wcrtomb_r+0x1e>
  406bd6:	bf00      	nop
  406bd8:	20400058 	.word	0x20400058
  406bdc:	2040089c 	.word	0x2040089c

00406be0 <__ascii_wctomb>:
  406be0:	b121      	cbz	r1, 406bec <__ascii_wctomb+0xc>
  406be2:	2aff      	cmp	r2, #255	; 0xff
  406be4:	d804      	bhi.n	406bf0 <__ascii_wctomb+0x10>
  406be6:	700a      	strb	r2, [r1, #0]
  406be8:	2001      	movs	r0, #1
  406bea:	4770      	bx	lr
  406bec:	4608      	mov	r0, r1
  406bee:	4770      	bx	lr
  406bf0:	238a      	movs	r3, #138	; 0x8a
  406bf2:	6003      	str	r3, [r0, #0]
  406bf4:	f04f 30ff 	mov.w	r0, #4294967295
  406bf8:	4770      	bx	lr
  406bfa:	bf00      	nop

00406bfc <_write_r>:
  406bfc:	b570      	push	{r4, r5, r6, lr}
  406bfe:	460d      	mov	r5, r1
  406c00:	4c08      	ldr	r4, [pc, #32]	; (406c24 <_write_r+0x28>)
  406c02:	4611      	mov	r1, r2
  406c04:	4606      	mov	r6, r0
  406c06:	461a      	mov	r2, r3
  406c08:	4628      	mov	r0, r5
  406c0a:	2300      	movs	r3, #0
  406c0c:	6023      	str	r3, [r4, #0]
  406c0e:	f7fa fb61 	bl	4012d4 <_write>
  406c12:	1c43      	adds	r3, r0, #1
  406c14:	d000      	beq.n	406c18 <_write_r+0x1c>
  406c16:	bd70      	pop	{r4, r5, r6, pc}
  406c18:	6823      	ldr	r3, [r4, #0]
  406c1a:	2b00      	cmp	r3, #0
  406c1c:	d0fb      	beq.n	406c16 <_write_r+0x1a>
  406c1e:	6033      	str	r3, [r6, #0]
  406c20:	bd70      	pop	{r4, r5, r6, pc}
  406c22:	bf00      	nop
  406c24:	2044a8e0 	.word	0x2044a8e0

00406c28 <__register_exitproc>:
  406c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406c2c:	4d2c      	ldr	r5, [pc, #176]	; (406ce0 <__register_exitproc+0xb8>)
  406c2e:	4606      	mov	r6, r0
  406c30:	6828      	ldr	r0, [r5, #0]
  406c32:	4698      	mov	r8, r3
  406c34:	460f      	mov	r7, r1
  406c36:	4691      	mov	r9, r2
  406c38:	f7ff fba4 	bl	406384 <__retarget_lock_acquire_recursive>
  406c3c:	4b29      	ldr	r3, [pc, #164]	; (406ce4 <__register_exitproc+0xbc>)
  406c3e:	681c      	ldr	r4, [r3, #0]
  406c40:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  406c44:	2b00      	cmp	r3, #0
  406c46:	d03e      	beq.n	406cc6 <__register_exitproc+0x9e>
  406c48:	685a      	ldr	r2, [r3, #4]
  406c4a:	2a1f      	cmp	r2, #31
  406c4c:	dc1c      	bgt.n	406c88 <__register_exitproc+0x60>
  406c4e:	f102 0e01 	add.w	lr, r2, #1
  406c52:	b176      	cbz	r6, 406c72 <__register_exitproc+0x4a>
  406c54:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  406c58:	2401      	movs	r4, #1
  406c5a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  406c5e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  406c62:	4094      	lsls	r4, r2
  406c64:	4320      	orrs	r0, r4
  406c66:	2e02      	cmp	r6, #2
  406c68:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  406c6c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  406c70:	d023      	beq.n	406cba <__register_exitproc+0x92>
  406c72:	3202      	adds	r2, #2
  406c74:	f8c3 e004 	str.w	lr, [r3, #4]
  406c78:	6828      	ldr	r0, [r5, #0]
  406c7a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  406c7e:	f7ff fb83 	bl	406388 <__retarget_lock_release_recursive>
  406c82:	2000      	movs	r0, #0
  406c84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406c88:	4b17      	ldr	r3, [pc, #92]	; (406ce8 <__register_exitproc+0xc0>)
  406c8a:	b30b      	cbz	r3, 406cd0 <__register_exitproc+0xa8>
  406c8c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406c90:	f7fd fbc4 	bl	40441c <malloc>
  406c94:	4603      	mov	r3, r0
  406c96:	b1d8      	cbz	r0, 406cd0 <__register_exitproc+0xa8>
  406c98:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  406c9c:	6002      	str	r2, [r0, #0]
  406c9e:	2100      	movs	r1, #0
  406ca0:	6041      	str	r1, [r0, #4]
  406ca2:	460a      	mov	r2, r1
  406ca4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406ca8:	f04f 0e01 	mov.w	lr, #1
  406cac:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406cb0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  406cb4:	2e00      	cmp	r6, #0
  406cb6:	d0dc      	beq.n	406c72 <__register_exitproc+0x4a>
  406cb8:	e7cc      	b.n	406c54 <__register_exitproc+0x2c>
  406cba:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  406cbe:	430c      	orrs	r4, r1
  406cc0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406cc4:	e7d5      	b.n	406c72 <__register_exitproc+0x4a>
  406cc6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  406cca:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  406cce:	e7bb      	b.n	406c48 <__register_exitproc+0x20>
  406cd0:	6828      	ldr	r0, [r5, #0]
  406cd2:	f7ff fb59 	bl	406388 <__retarget_lock_release_recursive>
  406cd6:	f04f 30ff 	mov.w	r0, #4294967295
  406cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406cde:	bf00      	nop
  406ce0:	20400898 	.word	0x20400898
  406ce4:	00407bc0 	.word	0x00407bc0
  406ce8:	0040441d 	.word	0x0040441d

00406cec <_close_r>:
  406cec:	b538      	push	{r3, r4, r5, lr}
  406cee:	4c07      	ldr	r4, [pc, #28]	; (406d0c <_close_r+0x20>)
  406cf0:	2300      	movs	r3, #0
  406cf2:	4605      	mov	r5, r0
  406cf4:	4608      	mov	r0, r1
  406cf6:	6023      	str	r3, [r4, #0]
  406cf8:	f7fb fcf2 	bl	4026e0 <_close>
  406cfc:	1c43      	adds	r3, r0, #1
  406cfe:	d000      	beq.n	406d02 <_close_r+0x16>
  406d00:	bd38      	pop	{r3, r4, r5, pc}
  406d02:	6823      	ldr	r3, [r4, #0]
  406d04:	2b00      	cmp	r3, #0
  406d06:	d0fb      	beq.n	406d00 <_close_r+0x14>
  406d08:	602b      	str	r3, [r5, #0]
  406d0a:	bd38      	pop	{r3, r4, r5, pc}
  406d0c:	2044a8e0 	.word	0x2044a8e0

00406d10 <_fclose_r>:
  406d10:	b570      	push	{r4, r5, r6, lr}
  406d12:	b159      	cbz	r1, 406d2c <_fclose_r+0x1c>
  406d14:	4605      	mov	r5, r0
  406d16:	460c      	mov	r4, r1
  406d18:	b110      	cbz	r0, 406d20 <_fclose_r+0x10>
  406d1a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406d1c:	2b00      	cmp	r3, #0
  406d1e:	d03c      	beq.n	406d9a <_fclose_r+0x8a>
  406d20:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406d22:	07d8      	lsls	r0, r3, #31
  406d24:	d505      	bpl.n	406d32 <_fclose_r+0x22>
  406d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406d2a:	b92b      	cbnz	r3, 406d38 <_fclose_r+0x28>
  406d2c:	2600      	movs	r6, #0
  406d2e:	4630      	mov	r0, r6
  406d30:	bd70      	pop	{r4, r5, r6, pc}
  406d32:	89a3      	ldrh	r3, [r4, #12]
  406d34:	0599      	lsls	r1, r3, #22
  406d36:	d53c      	bpl.n	406db2 <_fclose_r+0xa2>
  406d38:	4621      	mov	r1, r4
  406d3a:	4628      	mov	r0, r5
  406d3c:	f7fe fe6a 	bl	405a14 <__sflush_r>
  406d40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  406d42:	4606      	mov	r6, r0
  406d44:	b133      	cbz	r3, 406d54 <_fclose_r+0x44>
  406d46:	69e1      	ldr	r1, [r4, #28]
  406d48:	4628      	mov	r0, r5
  406d4a:	4798      	blx	r3
  406d4c:	2800      	cmp	r0, #0
  406d4e:	bfb8      	it	lt
  406d50:	f04f 36ff 	movlt.w	r6, #4294967295
  406d54:	89a3      	ldrh	r3, [r4, #12]
  406d56:	061a      	lsls	r2, r3, #24
  406d58:	d422      	bmi.n	406da0 <_fclose_r+0x90>
  406d5a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406d5c:	b141      	cbz	r1, 406d70 <_fclose_r+0x60>
  406d5e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406d62:	4299      	cmp	r1, r3
  406d64:	d002      	beq.n	406d6c <_fclose_r+0x5c>
  406d66:	4628      	mov	r0, r5
  406d68:	f7ff f872 	bl	405e50 <_free_r>
  406d6c:	2300      	movs	r3, #0
  406d6e:	6323      	str	r3, [r4, #48]	; 0x30
  406d70:	6c61      	ldr	r1, [r4, #68]	; 0x44
  406d72:	b121      	cbz	r1, 406d7e <_fclose_r+0x6e>
  406d74:	4628      	mov	r0, r5
  406d76:	f7ff f86b 	bl	405e50 <_free_r>
  406d7a:	2300      	movs	r3, #0
  406d7c:	6463      	str	r3, [r4, #68]	; 0x44
  406d7e:	f7fe ff6d 	bl	405c5c <__sfp_lock_acquire>
  406d82:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406d84:	2200      	movs	r2, #0
  406d86:	07db      	lsls	r3, r3, #31
  406d88:	81a2      	strh	r2, [r4, #12]
  406d8a:	d50e      	bpl.n	406daa <_fclose_r+0x9a>
  406d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406d8e:	f7ff faf7 	bl	406380 <__retarget_lock_close_recursive>
  406d92:	f7fe ff69 	bl	405c68 <__sfp_lock_release>
  406d96:	4630      	mov	r0, r6
  406d98:	bd70      	pop	{r4, r5, r6, pc}
  406d9a:	f7fe ff33 	bl	405c04 <__sinit>
  406d9e:	e7bf      	b.n	406d20 <_fclose_r+0x10>
  406da0:	6921      	ldr	r1, [r4, #16]
  406da2:	4628      	mov	r0, r5
  406da4:	f7ff f854 	bl	405e50 <_free_r>
  406da8:	e7d7      	b.n	406d5a <_fclose_r+0x4a>
  406daa:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406dac:	f7ff faec 	bl	406388 <__retarget_lock_release_recursive>
  406db0:	e7ec      	b.n	406d8c <_fclose_r+0x7c>
  406db2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406db4:	f7ff fae6 	bl	406384 <__retarget_lock_acquire_recursive>
  406db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406dbc:	2b00      	cmp	r3, #0
  406dbe:	d1bb      	bne.n	406d38 <_fclose_r+0x28>
  406dc0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406dc2:	f016 0601 	ands.w	r6, r6, #1
  406dc6:	d1b1      	bne.n	406d2c <_fclose_r+0x1c>
  406dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406dca:	f7ff fadd 	bl	406388 <__retarget_lock_release_recursive>
  406dce:	4630      	mov	r0, r6
  406dd0:	bd70      	pop	{r4, r5, r6, pc}
  406dd2:	bf00      	nop

00406dd4 <_fstat_r>:
  406dd4:	b538      	push	{r3, r4, r5, lr}
  406dd6:	460b      	mov	r3, r1
  406dd8:	4c07      	ldr	r4, [pc, #28]	; (406df8 <_fstat_r+0x24>)
  406dda:	4605      	mov	r5, r0
  406ddc:	4611      	mov	r1, r2
  406dde:	4618      	mov	r0, r3
  406de0:	2300      	movs	r3, #0
  406de2:	6023      	str	r3, [r4, #0]
  406de4:	f7fb fc80 	bl	4026e8 <_fstat>
  406de8:	1c43      	adds	r3, r0, #1
  406dea:	d000      	beq.n	406dee <_fstat_r+0x1a>
  406dec:	bd38      	pop	{r3, r4, r5, pc}
  406dee:	6823      	ldr	r3, [r4, #0]
  406df0:	2b00      	cmp	r3, #0
  406df2:	d0fb      	beq.n	406dec <_fstat_r+0x18>
  406df4:	602b      	str	r3, [r5, #0]
  406df6:	bd38      	pop	{r3, r4, r5, pc}
  406df8:	2044a8e0 	.word	0x2044a8e0

00406dfc <_isatty_r>:
  406dfc:	b538      	push	{r3, r4, r5, lr}
  406dfe:	4c07      	ldr	r4, [pc, #28]	; (406e1c <_isatty_r+0x20>)
  406e00:	2300      	movs	r3, #0
  406e02:	4605      	mov	r5, r0
  406e04:	4608      	mov	r0, r1
  406e06:	6023      	str	r3, [r4, #0]
  406e08:	f7fb fc74 	bl	4026f4 <_isatty>
  406e0c:	1c43      	adds	r3, r0, #1
  406e0e:	d000      	beq.n	406e12 <_isatty_r+0x16>
  406e10:	bd38      	pop	{r3, r4, r5, pc}
  406e12:	6823      	ldr	r3, [r4, #0]
  406e14:	2b00      	cmp	r3, #0
  406e16:	d0fb      	beq.n	406e10 <_isatty_r+0x14>
  406e18:	602b      	str	r3, [r5, #0]
  406e1a:	bd38      	pop	{r3, r4, r5, pc}
  406e1c:	2044a8e0 	.word	0x2044a8e0

00406e20 <_lseek_r>:
  406e20:	b570      	push	{r4, r5, r6, lr}
  406e22:	460d      	mov	r5, r1
  406e24:	4c08      	ldr	r4, [pc, #32]	; (406e48 <_lseek_r+0x28>)
  406e26:	4611      	mov	r1, r2
  406e28:	4606      	mov	r6, r0
  406e2a:	461a      	mov	r2, r3
  406e2c:	4628      	mov	r0, r5
  406e2e:	2300      	movs	r3, #0
  406e30:	6023      	str	r3, [r4, #0]
  406e32:	f7fb fc61 	bl	4026f8 <_lseek>
  406e36:	1c43      	adds	r3, r0, #1
  406e38:	d000      	beq.n	406e3c <_lseek_r+0x1c>
  406e3a:	bd70      	pop	{r4, r5, r6, pc}
  406e3c:	6823      	ldr	r3, [r4, #0]
  406e3e:	2b00      	cmp	r3, #0
  406e40:	d0fb      	beq.n	406e3a <_lseek_r+0x1a>
  406e42:	6033      	str	r3, [r6, #0]
  406e44:	bd70      	pop	{r4, r5, r6, pc}
  406e46:	bf00      	nop
  406e48:	2044a8e0 	.word	0x2044a8e0

00406e4c <_read_r>:
  406e4c:	b570      	push	{r4, r5, r6, lr}
  406e4e:	460d      	mov	r5, r1
  406e50:	4c08      	ldr	r4, [pc, #32]	; (406e74 <_read_r+0x28>)
  406e52:	4611      	mov	r1, r2
  406e54:	4606      	mov	r6, r0
  406e56:	461a      	mov	r2, r3
  406e58:	4628      	mov	r0, r5
  406e5a:	2300      	movs	r3, #0
  406e5c:	6023      	str	r3, [r4, #0]
  406e5e:	f7fa fa1b 	bl	401298 <_read>
  406e62:	1c43      	adds	r3, r0, #1
  406e64:	d000      	beq.n	406e68 <_read_r+0x1c>
  406e66:	bd70      	pop	{r4, r5, r6, pc}
  406e68:	6823      	ldr	r3, [r4, #0]
  406e6a:	2b00      	cmp	r3, #0
  406e6c:	d0fb      	beq.n	406e66 <_read_r+0x1a>
  406e6e:	6033      	str	r3, [r6, #0]
  406e70:	bd70      	pop	{r4, r5, r6, pc}
  406e72:	bf00      	nop
  406e74:	2044a8e0 	.word	0x2044a8e0

00406e78 <__aeabi_uldivmod>:
  406e78:	b953      	cbnz	r3, 406e90 <__aeabi_uldivmod+0x18>
  406e7a:	b94a      	cbnz	r2, 406e90 <__aeabi_uldivmod+0x18>
  406e7c:	2900      	cmp	r1, #0
  406e7e:	bf08      	it	eq
  406e80:	2800      	cmpeq	r0, #0
  406e82:	bf1c      	itt	ne
  406e84:	f04f 31ff 	movne.w	r1, #4294967295
  406e88:	f04f 30ff 	movne.w	r0, #4294967295
  406e8c:	f000 b97a 	b.w	407184 <__aeabi_idiv0>
  406e90:	f1ad 0c08 	sub.w	ip, sp, #8
  406e94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  406e98:	f000 f806 	bl	406ea8 <__udivmoddi4>
  406e9c:	f8dd e004 	ldr.w	lr, [sp, #4]
  406ea0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406ea4:	b004      	add	sp, #16
  406ea6:	4770      	bx	lr

00406ea8 <__udivmoddi4>:
  406ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406eac:	468c      	mov	ip, r1
  406eae:	460d      	mov	r5, r1
  406eb0:	4604      	mov	r4, r0
  406eb2:	9e08      	ldr	r6, [sp, #32]
  406eb4:	2b00      	cmp	r3, #0
  406eb6:	d151      	bne.n	406f5c <__udivmoddi4+0xb4>
  406eb8:	428a      	cmp	r2, r1
  406eba:	4617      	mov	r7, r2
  406ebc:	d96d      	bls.n	406f9a <__udivmoddi4+0xf2>
  406ebe:	fab2 fe82 	clz	lr, r2
  406ec2:	f1be 0f00 	cmp.w	lr, #0
  406ec6:	d00b      	beq.n	406ee0 <__udivmoddi4+0x38>
  406ec8:	f1ce 0c20 	rsb	ip, lr, #32
  406ecc:	fa01 f50e 	lsl.w	r5, r1, lr
  406ed0:	fa20 fc0c 	lsr.w	ip, r0, ip
  406ed4:	fa02 f70e 	lsl.w	r7, r2, lr
  406ed8:	ea4c 0c05 	orr.w	ip, ip, r5
  406edc:	fa00 f40e 	lsl.w	r4, r0, lr
  406ee0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  406ee4:	0c25      	lsrs	r5, r4, #16
  406ee6:	fbbc f8fa 	udiv	r8, ip, sl
  406eea:	fa1f f987 	uxth.w	r9, r7
  406eee:	fb0a cc18 	mls	ip, sl, r8, ip
  406ef2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  406ef6:	fb08 f309 	mul.w	r3, r8, r9
  406efa:	42ab      	cmp	r3, r5
  406efc:	d90a      	bls.n	406f14 <__udivmoddi4+0x6c>
  406efe:	19ed      	adds	r5, r5, r7
  406f00:	f108 32ff 	add.w	r2, r8, #4294967295
  406f04:	f080 8123 	bcs.w	40714e <__udivmoddi4+0x2a6>
  406f08:	42ab      	cmp	r3, r5
  406f0a:	f240 8120 	bls.w	40714e <__udivmoddi4+0x2a6>
  406f0e:	f1a8 0802 	sub.w	r8, r8, #2
  406f12:	443d      	add	r5, r7
  406f14:	1aed      	subs	r5, r5, r3
  406f16:	b2a4      	uxth	r4, r4
  406f18:	fbb5 f0fa 	udiv	r0, r5, sl
  406f1c:	fb0a 5510 	mls	r5, sl, r0, r5
  406f20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  406f24:	fb00 f909 	mul.w	r9, r0, r9
  406f28:	45a1      	cmp	r9, r4
  406f2a:	d909      	bls.n	406f40 <__udivmoddi4+0x98>
  406f2c:	19e4      	adds	r4, r4, r7
  406f2e:	f100 33ff 	add.w	r3, r0, #4294967295
  406f32:	f080 810a 	bcs.w	40714a <__udivmoddi4+0x2a2>
  406f36:	45a1      	cmp	r9, r4
  406f38:	f240 8107 	bls.w	40714a <__udivmoddi4+0x2a2>
  406f3c:	3802      	subs	r0, #2
  406f3e:	443c      	add	r4, r7
  406f40:	eba4 0409 	sub.w	r4, r4, r9
  406f44:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406f48:	2100      	movs	r1, #0
  406f4a:	2e00      	cmp	r6, #0
  406f4c:	d061      	beq.n	407012 <__udivmoddi4+0x16a>
  406f4e:	fa24 f40e 	lsr.w	r4, r4, lr
  406f52:	2300      	movs	r3, #0
  406f54:	6034      	str	r4, [r6, #0]
  406f56:	6073      	str	r3, [r6, #4]
  406f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406f5c:	428b      	cmp	r3, r1
  406f5e:	d907      	bls.n	406f70 <__udivmoddi4+0xc8>
  406f60:	2e00      	cmp	r6, #0
  406f62:	d054      	beq.n	40700e <__udivmoddi4+0x166>
  406f64:	2100      	movs	r1, #0
  406f66:	e886 0021 	stmia.w	r6, {r0, r5}
  406f6a:	4608      	mov	r0, r1
  406f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406f70:	fab3 f183 	clz	r1, r3
  406f74:	2900      	cmp	r1, #0
  406f76:	f040 808e 	bne.w	407096 <__udivmoddi4+0x1ee>
  406f7a:	42ab      	cmp	r3, r5
  406f7c:	d302      	bcc.n	406f84 <__udivmoddi4+0xdc>
  406f7e:	4282      	cmp	r2, r0
  406f80:	f200 80fa 	bhi.w	407178 <__udivmoddi4+0x2d0>
  406f84:	1a84      	subs	r4, r0, r2
  406f86:	eb65 0503 	sbc.w	r5, r5, r3
  406f8a:	2001      	movs	r0, #1
  406f8c:	46ac      	mov	ip, r5
  406f8e:	2e00      	cmp	r6, #0
  406f90:	d03f      	beq.n	407012 <__udivmoddi4+0x16a>
  406f92:	e886 1010 	stmia.w	r6, {r4, ip}
  406f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406f9a:	b912      	cbnz	r2, 406fa2 <__udivmoddi4+0xfa>
  406f9c:	2701      	movs	r7, #1
  406f9e:	fbb7 f7f2 	udiv	r7, r7, r2
  406fa2:	fab7 fe87 	clz	lr, r7
  406fa6:	f1be 0f00 	cmp.w	lr, #0
  406faa:	d134      	bne.n	407016 <__udivmoddi4+0x16e>
  406fac:	1beb      	subs	r3, r5, r7
  406fae:	0c3a      	lsrs	r2, r7, #16
  406fb0:	fa1f fc87 	uxth.w	ip, r7
  406fb4:	2101      	movs	r1, #1
  406fb6:	fbb3 f8f2 	udiv	r8, r3, r2
  406fba:	0c25      	lsrs	r5, r4, #16
  406fbc:	fb02 3318 	mls	r3, r2, r8, r3
  406fc0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406fc4:	fb0c f308 	mul.w	r3, ip, r8
  406fc8:	42ab      	cmp	r3, r5
  406fca:	d907      	bls.n	406fdc <__udivmoddi4+0x134>
  406fcc:	19ed      	adds	r5, r5, r7
  406fce:	f108 30ff 	add.w	r0, r8, #4294967295
  406fd2:	d202      	bcs.n	406fda <__udivmoddi4+0x132>
  406fd4:	42ab      	cmp	r3, r5
  406fd6:	f200 80d1 	bhi.w	40717c <__udivmoddi4+0x2d4>
  406fda:	4680      	mov	r8, r0
  406fdc:	1aed      	subs	r5, r5, r3
  406fde:	b2a3      	uxth	r3, r4
  406fe0:	fbb5 f0f2 	udiv	r0, r5, r2
  406fe4:	fb02 5510 	mls	r5, r2, r0, r5
  406fe8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  406fec:	fb0c fc00 	mul.w	ip, ip, r0
  406ff0:	45a4      	cmp	ip, r4
  406ff2:	d907      	bls.n	407004 <__udivmoddi4+0x15c>
  406ff4:	19e4      	adds	r4, r4, r7
  406ff6:	f100 33ff 	add.w	r3, r0, #4294967295
  406ffa:	d202      	bcs.n	407002 <__udivmoddi4+0x15a>
  406ffc:	45a4      	cmp	ip, r4
  406ffe:	f200 80b8 	bhi.w	407172 <__udivmoddi4+0x2ca>
  407002:	4618      	mov	r0, r3
  407004:	eba4 040c 	sub.w	r4, r4, ip
  407008:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40700c:	e79d      	b.n	406f4a <__udivmoddi4+0xa2>
  40700e:	4631      	mov	r1, r6
  407010:	4630      	mov	r0, r6
  407012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407016:	f1ce 0420 	rsb	r4, lr, #32
  40701a:	fa05 f30e 	lsl.w	r3, r5, lr
  40701e:	fa07 f70e 	lsl.w	r7, r7, lr
  407022:	fa20 f804 	lsr.w	r8, r0, r4
  407026:	0c3a      	lsrs	r2, r7, #16
  407028:	fa25 f404 	lsr.w	r4, r5, r4
  40702c:	ea48 0803 	orr.w	r8, r8, r3
  407030:	fbb4 f1f2 	udiv	r1, r4, r2
  407034:	ea4f 4518 	mov.w	r5, r8, lsr #16
  407038:	fb02 4411 	mls	r4, r2, r1, r4
  40703c:	fa1f fc87 	uxth.w	ip, r7
  407040:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  407044:	fb01 f30c 	mul.w	r3, r1, ip
  407048:	42ab      	cmp	r3, r5
  40704a:	fa00 f40e 	lsl.w	r4, r0, lr
  40704e:	d909      	bls.n	407064 <__udivmoddi4+0x1bc>
  407050:	19ed      	adds	r5, r5, r7
  407052:	f101 30ff 	add.w	r0, r1, #4294967295
  407056:	f080 808a 	bcs.w	40716e <__udivmoddi4+0x2c6>
  40705a:	42ab      	cmp	r3, r5
  40705c:	f240 8087 	bls.w	40716e <__udivmoddi4+0x2c6>
  407060:	3902      	subs	r1, #2
  407062:	443d      	add	r5, r7
  407064:	1aeb      	subs	r3, r5, r3
  407066:	fa1f f588 	uxth.w	r5, r8
  40706a:	fbb3 f0f2 	udiv	r0, r3, r2
  40706e:	fb02 3310 	mls	r3, r2, r0, r3
  407072:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  407076:	fb00 f30c 	mul.w	r3, r0, ip
  40707a:	42ab      	cmp	r3, r5
  40707c:	d907      	bls.n	40708e <__udivmoddi4+0x1e6>
  40707e:	19ed      	adds	r5, r5, r7
  407080:	f100 38ff 	add.w	r8, r0, #4294967295
  407084:	d26f      	bcs.n	407166 <__udivmoddi4+0x2be>
  407086:	42ab      	cmp	r3, r5
  407088:	d96d      	bls.n	407166 <__udivmoddi4+0x2be>
  40708a:	3802      	subs	r0, #2
  40708c:	443d      	add	r5, r7
  40708e:	1aeb      	subs	r3, r5, r3
  407090:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  407094:	e78f      	b.n	406fb6 <__udivmoddi4+0x10e>
  407096:	f1c1 0720 	rsb	r7, r1, #32
  40709a:	fa22 f807 	lsr.w	r8, r2, r7
  40709e:	408b      	lsls	r3, r1
  4070a0:	fa05 f401 	lsl.w	r4, r5, r1
  4070a4:	ea48 0303 	orr.w	r3, r8, r3
  4070a8:	fa20 fe07 	lsr.w	lr, r0, r7
  4070ac:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4070b0:	40fd      	lsrs	r5, r7
  4070b2:	ea4e 0e04 	orr.w	lr, lr, r4
  4070b6:	fbb5 f9fc 	udiv	r9, r5, ip
  4070ba:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4070be:	fb0c 5519 	mls	r5, ip, r9, r5
  4070c2:	fa1f f883 	uxth.w	r8, r3
  4070c6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4070ca:	fb09 f408 	mul.w	r4, r9, r8
  4070ce:	42ac      	cmp	r4, r5
  4070d0:	fa02 f201 	lsl.w	r2, r2, r1
  4070d4:	fa00 fa01 	lsl.w	sl, r0, r1
  4070d8:	d908      	bls.n	4070ec <__udivmoddi4+0x244>
  4070da:	18ed      	adds	r5, r5, r3
  4070dc:	f109 30ff 	add.w	r0, r9, #4294967295
  4070e0:	d243      	bcs.n	40716a <__udivmoddi4+0x2c2>
  4070e2:	42ac      	cmp	r4, r5
  4070e4:	d941      	bls.n	40716a <__udivmoddi4+0x2c2>
  4070e6:	f1a9 0902 	sub.w	r9, r9, #2
  4070ea:	441d      	add	r5, r3
  4070ec:	1b2d      	subs	r5, r5, r4
  4070ee:	fa1f fe8e 	uxth.w	lr, lr
  4070f2:	fbb5 f0fc 	udiv	r0, r5, ip
  4070f6:	fb0c 5510 	mls	r5, ip, r0, r5
  4070fa:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4070fe:	fb00 f808 	mul.w	r8, r0, r8
  407102:	45a0      	cmp	r8, r4
  407104:	d907      	bls.n	407116 <__udivmoddi4+0x26e>
  407106:	18e4      	adds	r4, r4, r3
  407108:	f100 35ff 	add.w	r5, r0, #4294967295
  40710c:	d229      	bcs.n	407162 <__udivmoddi4+0x2ba>
  40710e:	45a0      	cmp	r8, r4
  407110:	d927      	bls.n	407162 <__udivmoddi4+0x2ba>
  407112:	3802      	subs	r0, #2
  407114:	441c      	add	r4, r3
  407116:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40711a:	eba4 0408 	sub.w	r4, r4, r8
  40711e:	fba0 8902 	umull	r8, r9, r0, r2
  407122:	454c      	cmp	r4, r9
  407124:	46c6      	mov	lr, r8
  407126:	464d      	mov	r5, r9
  407128:	d315      	bcc.n	407156 <__udivmoddi4+0x2ae>
  40712a:	d012      	beq.n	407152 <__udivmoddi4+0x2aa>
  40712c:	b156      	cbz	r6, 407144 <__udivmoddi4+0x29c>
  40712e:	ebba 030e 	subs.w	r3, sl, lr
  407132:	eb64 0405 	sbc.w	r4, r4, r5
  407136:	fa04 f707 	lsl.w	r7, r4, r7
  40713a:	40cb      	lsrs	r3, r1
  40713c:	431f      	orrs	r7, r3
  40713e:	40cc      	lsrs	r4, r1
  407140:	6037      	str	r7, [r6, #0]
  407142:	6074      	str	r4, [r6, #4]
  407144:	2100      	movs	r1, #0
  407146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40714a:	4618      	mov	r0, r3
  40714c:	e6f8      	b.n	406f40 <__udivmoddi4+0x98>
  40714e:	4690      	mov	r8, r2
  407150:	e6e0      	b.n	406f14 <__udivmoddi4+0x6c>
  407152:	45c2      	cmp	sl, r8
  407154:	d2ea      	bcs.n	40712c <__udivmoddi4+0x284>
  407156:	ebb8 0e02 	subs.w	lr, r8, r2
  40715a:	eb69 0503 	sbc.w	r5, r9, r3
  40715e:	3801      	subs	r0, #1
  407160:	e7e4      	b.n	40712c <__udivmoddi4+0x284>
  407162:	4628      	mov	r0, r5
  407164:	e7d7      	b.n	407116 <__udivmoddi4+0x26e>
  407166:	4640      	mov	r0, r8
  407168:	e791      	b.n	40708e <__udivmoddi4+0x1e6>
  40716a:	4681      	mov	r9, r0
  40716c:	e7be      	b.n	4070ec <__udivmoddi4+0x244>
  40716e:	4601      	mov	r1, r0
  407170:	e778      	b.n	407064 <__udivmoddi4+0x1bc>
  407172:	3802      	subs	r0, #2
  407174:	443c      	add	r4, r7
  407176:	e745      	b.n	407004 <__udivmoddi4+0x15c>
  407178:	4608      	mov	r0, r1
  40717a:	e708      	b.n	406f8e <__udivmoddi4+0xe6>
  40717c:	f1a8 0802 	sub.w	r8, r8, #2
  407180:	443d      	add	r5, r7
  407182:	e72b      	b.n	406fdc <__udivmoddi4+0x134>

00407184 <__aeabi_idiv0>:
  407184:	4770      	bx	lr
  407186:	bf00      	nop
  407188:	092d452d 	.word	0x092d452d
  40718c:	39384d57 	.word	0x39384d57
  407190:	69203430 	.word	0x69203430
  407194:	6974696e 	.word	0x6974696e
  407198:	7a696c61 	.word	0x7a696c61
  40719c:	6f697461 	.word	0x6f697461
  4071a0:	6166206e 	.word	0x6166206e
  4071a4:	64656c69 	.word	0x64656c69
  4071a8:	00000d2e 	.word	0x00000d2e

004071ac <CSWTCH.7>:
  4071ac:	00000100 00000300 00000200              ............

004071b8 <midi_note_frequencies>:
  4071b8:	4102d0e5 410a978d 4112d4fe 411b9168     ...A...A...Ah..A
  4071c8:	4124d0e5 412e9ba6 4138fdf4 41440000     ..$A...A..8A..DA
  4071d8:	414fa5e3 415c0000 41691687 4176f1aa     ..OA..\A..iA..vA
  4071e8:	4182d0e5 418a978d 4192d4fe 419b8f5c     ...A...A...A\..A
  4071f8:	41a4d0e5 41ae9db2 41b90000 41c40000     ...A...A...A...A
  407208:	41cfa7f0 41dc0000 41e9147b 41f6f1aa     ...A...A{..A...A
  407218:	4202cfdf 420a978d 4212d4fe 421b9062     ...B...B...Bb..B
  407228:	4224cfdf 422e9db2 4238fefa 4243fefa     ..$B...B..8B..CB
  407238:	424fa6e9 425c0000 4269147b 4276f0a4     ..OB..\B{.iB..vB
  407248:	4282cfdf 428a978d 4292d4fe 429b9062     ...B...B...Bb..B
  407258:	42a4d062 42ae9d2f 42b8ff7d 42c3ff7d     b..B/..B}..B}..B
  407268:	42cfa6e9 42dc0000 42e914fe 42f6f127     ...B...B...B'..B
  407278:	4302d021 430a974c 4312d4fe 431b9021     !..CL..C...C!..C
  407288:	4324d062 432e9d2f 4338ff3b 4343ff7d     b.$C/..C;.8C}.CC
  407298:	434fa6e9 435c0000 436914fe 4376f127     ..OC..\C..iC'.vC
  4072a8:	4382d021 438a976d 4392d51f 439b9042     !..Cm..C...CB..C
  4072b8:	43a4d062 43ae9d2f 43b8ff3b 43c3ff5c     b..C/..C;..C\..C
  4072c8:	43cfa70a 43dc0000 43e914fe 43f6f106     ...C...C...C...C
  4072d8:	4402d010 440a975c 4412d51f 441b9042     ...D\..D...DB..D
  4072e8:	4424d052 442e9d2f 4438ff4c 4443ff6d     R.$D/..DL.8Dm.CD
  4072f8:	444fa6fa 445c0000 446914fe 4476f117     ..OD..\D..iD..vD
  407308:	4482d010 448a9764 4492d517 449b9042     ...Dd..D...DB..D
  407318:	44a4d052 44ae9d37 44b8ff4c 44c3ff6d     R..D7..DL..Dm..D
  407328:	44cfa702 44dc0000 44e914f6 44f6f10e     ...D...D...D...D
  407338:	4502d014 450a9760 4512d517 451b9042     ...E`..E...EB..E
  407348:	4524d052 452e9d37 4538ff48 4543ff68     R.$E7..EH.8Eh.CE
  407358:	454fa702 455c0000 456914f6 4576f10e     ..OE..\E..iE..vE
  407368:	4582d012 458a9760 4592d517 459b9042     ...E`..E...EB..E
  407378:	45a4d054 45ae9d37 45b8ff4a 45c3ff6a     T..E7..EJ..Ej..E
  407388:	45cfa700 45dc0000 45e914f6 45f6f110     ...E...E...E...E
  407398:	4602d012 460a9760 4612d518 461b9041     ...F`..F...FA..F
  4073a8:	4624d052 462e9d33 4638ff48 4643ff66     R.$F3..FH.8Ff.CF

004073b8 <sinTable_f32>:
  4073b8:	00000000 3c490e92 3cc90ab1 3d16c32b     ......I<...<+..=
  4073c8:	3d48fb2e 3d7b2b75 3d96a904 3dafb680     ..H=u+{=...=...=
  4073d8:	3dc8bd36 3de1bc2f 3dfab273 3e09cf87     6..=/..=s..=...>
  4073e8:	3e164083 3e22abb5 3e2f10a2 3e3b6ecf     .@.>..">../>.n;>
  4073f8:	3e47c5c2 3e541501 3e605c13 3e6c9a7f     ..G>..T>.\`>..l>
  407408:	3e78cfcc 3e827dc0 3e888e93 3e8e9a22     ..x>.}.>...>"..>
  407418:	3e94a032 3e9aa086 3ea09ae5 3ea68f12     2..>...>...>...>
  407428:	3eac7cd4 3eb263ef 3eb8442a 3ebe1d49     .|.>.c.>*D.>I..>
  407438:	3ec3ef15 3ec9b953 3ecf7bca 3ed53641     ...>S..>.{.>A6.>
  407448:	3edae880 3ee0924f 3ee63375 3eebcbbb     ...>O..>u3.>...>
  407458:	3ef15aea 3ef6e0cb 3efc5d27 3f00e7e4     .Z.>...>'].>...?
  407468:	3f039c3d 3f064b82 3f08f59b 3f0b9a6b     =..?.K.?...?k..?
  407478:	3f0e39da 3f10d3cd 3f13682a 3f15f6d9     .9.?...?*h.?...?
  407488:	3f187fc0 3f1b02c6 3f1d7fd1 3f1ff6cb     ...?...?...?...?
  407498:	3f226799 3f24d225 3f273656 3f299415     .g"?%.$?V6'?..)?
  4074a8:	3f2beb4a 3f2e3bde 3f3085bb 3f32c8c9     J.+?.;.?..0?..2?
  4074b8:	3f3504f3 3f373a23 3f396842 3f3b8f3b     ..5?#:7?Bh9?;.;?
  4074c8:	3f3daef9 3f3fc767 3f41d870 3f43e201     ..=?g.??p.A?..C?
  4074d8:	3f45e403 3f47de65 3f49d112 3f4bbbf8     ..E?e.G?..I?..K?
  4074e8:	3f4d9f02 3f4f7a20 3f514d3d 3f531849     ..M? zO?=MQ?I.S?
  4074f8:	3f54db31 3f5695e5 3f584853 3f59f26a     1.T?..V?SHX?j.Y?
  407508:	3f5b941a 3f5d2d53 3f5ebe05 3f604621     ..[?S-]?..^?!F`?
  407518:	3f61c597 3f633c5a 3f64aa59 3f660f88     ..a?Z<c?Y.d?..f?
  407528:	3f676bd8 3f68bf3c 3f6a09a7 3f6b4b0c     .kg?<.h?..j?.Kk?
  407538:	3f6c835e 3f6db293 3f6ed89e 3f6ff573     ^.l?..m?..n?s.o?
  407548:	3f710908 3f721352 3f731447 3f740bdd     ..q?R.r?G.s?..t?
  407558:	3f74fa0b 3f75dec6 3f76ba07 3f778bc5     ..t?..u?..v?..w?
  407568:	3f7853f8 3f791298 3f79c79d 3f7a7302     .Sx?..y?..y?.sz?
  407578:	3f7b14be 3f7baccd 3f7c3b28 3f7cbfc9     ..{?..{?(;|?..|?
  407588:	3f7d3aac 3f7dabcc 3f7e1323 3f7e70b0     .:}?..}?#.~?.p~?
  407598:	3f7ec46d 3f7f0e58 3f7f4e6d 3f7f84ab     m.~?X..?mN.?...?
  4075a8:	3f7fb10f 3f7fd397 3f7fec43 3f7ffb11     ...?...?C..?...?
  4075b8:	3f800000 3f7ffb11 3f7fec43 3f7fd397     ...?...?C..?...?
  4075c8:	3f7fb10f 3f7f84ab 3f7f4e6d 3f7f0e58     ...?...?mN.?X..?
  4075d8:	3f7ec46d 3f7e70b0 3f7e1323 3f7dabcc     m.~?.p~?#.~?..}?
  4075e8:	3f7d3aac 3f7cbfc9 3f7c3b28 3f7baccd     .:}?..|?(;|?..{?
  4075f8:	3f7b14be 3f7a7302 3f79c79d 3f791298     ..{?.sz?..y?..y?
  407608:	3f7853f8 3f778bc5 3f76ba07 3f75dec6     .Sx?..w?..v?..u?
  407618:	3f74fa0b 3f740bdd 3f731447 3f721352     ..t?..t?G.s?R.r?
  407628:	3f710908 3f6ff573 3f6ed89e 3f6db293     ..q?s.o?..n?..m?
  407638:	3f6c835e 3f6b4b0c 3f6a09a7 3f68bf3c     ^.l?.Kk?..j?<.h?
  407648:	3f676bd8 3f660f88 3f64aa59 3f633c5a     .kg?..f?Y.d?Z<c?
  407658:	3f61c597 3f604621 3f5ebe05 3f5d2d53     ..a?!F`?..^?S-]?
  407668:	3f5b941a 3f59f26a 3f584853 3f5695e5     ..[?j.Y?SHX?..V?
  407678:	3f54db31 3f531849 3f514d3d 3f4f7a20     1.T?I.S?=MQ? zO?
  407688:	3f4d9f02 3f4bbbf8 3f49d112 3f47de65     ..M?..K?..I?e.G?
  407698:	3f45e403 3f43e201 3f41d870 3f3fc767     ..E?..C?p.A?g.??
  4076a8:	3f3daef9 3f3b8f3b 3f396842 3f373a23     ..=?;.;?Bh9?#:7?
  4076b8:	3f3504f3 3f32c8c9 3f3085bb 3f2e3bde     ..5?..2?..0?.;.?
  4076c8:	3f2beb4a 3f299415 3f273656 3f24d225     J.+?..)?V6'?%.$?
  4076d8:	3f226799 3f1ff6cb 3f1d7fd1 3f1b02c6     .g"?...?...?...?
  4076e8:	3f187fc0 3f15f6d9 3f13682a 3f10d3cd     ...?...?*h.?...?
  4076f8:	3f0e39da 3f0b9a6b 3f08f59b 3f064b82     .9.?k..?...?.K.?
  407708:	3f039c3d 3f00e7e4 3efc5d27 3ef6e0cb     =..?...?'].>...>
  407718:	3ef15aea 3eebcbbb 3ee63375 3ee0924f     .Z.>...>u3.>O..>
  407728:	3edae880 3ed53641 3ecf7bca 3ec9b953     ...>A6.>.{.>S..>
  407738:	3ec3ef15 3ebe1d49 3eb8442a 3eb263ef     ...>I..>*D.>.c.>
  407748:	3eac7cd4 3ea68f12 3ea09ae5 3e9aa086     .|.>...>...>...>
  407758:	3e94a032 3e8e9a22 3e888e93 3e827dc0     2..>"..>...>.}.>
  407768:	3e78cfcc 3e6c9a7f 3e605c13 3e541501     ..x>..l>.\`>..T>
  407778:	3e47c5c2 3e3b6ecf 3e2f10a2 3e22abb5     ..G>.n;>../>..">
  407788:	3e164083 3e09cf87 3dfab273 3de1bc2f     .@.>...>s..=/..=
  407798:	3dc8bd36 3dafb680 3d96a904 3d7b2b75     6..=...=...=u+{=
  4077a8:	3d48fb2e 3d16c32b 3cc90ab1 3c490e92     ..H=+..=...<..I<
  4077b8:	00000000 bc490e92 bcc90ab1 bd16c32b     ......I.....+...
  4077c8:	bd48fb2e bd7b2b75 bd96a904 bdafb680     ..H.u+{.........
  4077d8:	bdc8bd36 bde1bc2f bdfab273 be09cf87     6.../...s.......
  4077e8:	be164083 be22abb5 be2f10a2 be3b6ecf     .@....".../..n;.
  4077f8:	be47c5c2 be541501 be605c13 be6c9a7f     ..G...T..\`...l.
  407808:	be78cfcc be827dc0 be888e93 be8e9a22     ..x..}......"...
  407818:	be94a032 be9aa086 bea09ae5 bea68f12     2...............
  407828:	beac7cd4 beb263ef beb8442a bebe1d49     .|...c..*D..I...
  407838:	bec3ef15 bec9b953 becf7bca bed53641     ....S....{..A6..
  407848:	bedae880 bee0924f bee63375 beebcbbb     ....O...u3......
  407858:	bef15aea bef6e0cb befc5d27 bf00e7e4     .Z......']......
  407868:	bf039c3d bf064b82 bf08f59b bf0b9a6b     =....K......k...
  407878:	bf0e39da bf10d3cd bf13682a bf15f6d9     .9......*h......
  407888:	bf187fc0 bf1b02c6 bf1d7fd1 bf1ff6cb     ................
  407898:	bf226799 bf24d225 bf273656 bf299415     .g".%.$.V6'...).
  4078a8:	bf2beb4a bf2e3bde bf3085bb bf32c8c9     J.+..;....0...2.
  4078b8:	bf3504f3 bf373a23 bf396842 bf3b8f3b     ..5.#:7.Bh9.;.;.
  4078c8:	bf3daef9 bf3fc767 bf41d870 bf43e201     ..=.g.?.p.A...C.
  4078d8:	bf45e403 bf47de65 bf49d112 bf4bbbf8     ..E.e.G...I...K.
  4078e8:	bf4d9f02 bf4f7a20 bf514d3d bf531849     ..M. zO.=MQ.I.S.
  4078f8:	bf54db31 bf5695e5 bf584853 bf59f26a     1.T...V.SHX.j.Y.
  407908:	bf5b941a bf5d2d53 bf5ebe05 bf604621     ..[.S-]...^.!F`.
  407918:	bf61c597 bf633c5a bf64aa59 bf660f88     ..a.Z<c.Y.d...f.
  407928:	bf676bd8 bf68bf3c bf6a09a7 bf6b4b0c     .kg.<.h...j..Kk.
  407938:	bf6c835e bf6db293 bf6ed89e bf6ff573     ^.l...m...n.s.o.
  407948:	bf710908 bf721352 bf731447 bf740bdd     ..q.R.r.G.s...t.
  407958:	bf74fa0b bf75dec6 bf76ba07 bf778bc5     ..t...u...v...w.
  407968:	bf7853f8 bf791298 bf79c79d bf7a7302     .Sx...y...y..sz.
  407978:	bf7b14be bf7baccd bf7c3b28 bf7cbfc9     ..{...{.(;|...|.
  407988:	bf7d3aac bf7dabcc bf7e1323 bf7e70b0     .:}...}.#.~..p~.
  407998:	bf7ec46d bf7f0e58 bf7f4e6d bf7f84ab     m.~.X...mN......
  4079a8:	bf7fb10f bf7fd397 bf7fec43 bf7ffb11     ........C.......
  4079b8:	bf800000 bf7ffb11 bf7fec43 bf7fd397     ........C.......
  4079c8:	bf7fb10f bf7f84ab bf7f4e6d bf7f0e58     ........mN..X...
  4079d8:	bf7ec46d bf7e70b0 bf7e1323 bf7dabcc     m.~..p~.#.~...}.
  4079e8:	bf7d3aac bf7cbfc9 bf7c3b28 bf7baccd     .:}...|.(;|...{.
  4079f8:	bf7b14be bf7a7302 bf79c79d bf791298     ..{..sz...y...y.
  407a08:	bf7853f8 bf778bc5 bf76ba07 bf75dec6     .Sx...w...v...u.
  407a18:	bf74fa0b bf740bdd bf731447 bf721352     ..t...t.G.s.R.r.
  407a28:	bf710908 bf6ff573 bf6ed89e bf6db293     ..q.s.o...n...m.
  407a38:	bf6c835e bf6b4b0c bf6a09a7 bf68bf3c     ^.l..Kk...j.<.h.
  407a48:	bf676bd8 bf660f88 bf64aa59 bf633c5a     .kg...f.Y.d.Z<c.
  407a58:	bf61c597 bf604621 bf5ebe05 bf5d2d53     ..a.!F`...^.S-].
  407a68:	bf5b941a bf59f26a bf584853 bf5695e5     ..[.j.Y.SHX...V.
  407a78:	bf54db31 bf531849 bf514d3d bf4f7a20     1.T.I.S.=MQ. zO.
  407a88:	bf4d9f02 bf4bbbf8 bf49d112 bf47de65     ..M...K...I.e.G.
  407a98:	bf45e403 bf43e201 bf41d870 bf3fc767     ..E...C.p.A.g.?.
  407aa8:	bf3daef9 bf3b8f3b bf396842 bf373a23     ..=.;.;.Bh9.#:7.
  407ab8:	bf3504f3 bf32c8c9 bf3085bb bf2e3bde     ..5...2...0..;..
  407ac8:	bf2beb4a bf299415 bf273656 bf24d225     J.+...).V6'.%.$.
  407ad8:	bf226799 bf1ff6cb bf1d7fd1 bf1b02c6     .g".............
  407ae8:	bf187fc0 bf15f6d9 bf13682a bf10d3cd     ........*h......
  407af8:	bf0e39da bf0b9a6b bf08f59b bf064b82     .9..k........K..
  407b08:	bf039c3d bf00e7e4 befc5d27 bef6e0cb     =.......']......
  407b18:	bef15aea beebcbbb bee63375 bee0924f     .Z......u3..O...
  407b28:	bedae880 bed53641 becf7bca bec9b953     ....A6...{..S...
  407b38:	bec3ef15 bebe1d49 beb8442a beb263ef     ....I...*D...c..
  407b48:	beac7cd4 bea68f12 bea09ae5 be9aa086     .|..............
  407b58:	be94a032 be8e9a22 be888e93 be827dc0     2..."........}..
  407b68:	be78cfcc be6c9a7f be605c13 be541501     ..x...l..\`...T.
  407b78:	be47c5c2 be3b6ecf be2f10a2 be22abb5     ..G..n;.../...".
  407b88:	be164083 be09cf87 bdfab273 bde1bc2f     .@......s.../...
  407b98:	bdc8bd36 bdafb680 bd96a904 bd7b2b75     6...........u+{.
  407ba8:	bd48fb2e bd16c32b bcc90ab1 bc490e92     ..H.+.........I.
  407bb8:	80000000 00676f6c                       ....log.

00407bc0 <_global_impure_ptr>:
  407bc0:	20400060 33323130 37363534 42413938     `.@ 0123456789AB
  407bd0:	46454443 00000000 33323130 37363534     CDEF....01234567
  407be0:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  407bf0:	0000296c                                l)..

00407bf4 <blanks.8340>:
  407bf4:	20202020 20202020 20202020 20202020                     

00407c04 <zeroes.8341>:
  407c04:	30303030 30303030 30303030 30303030     0000000000000000
  407c14:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00407c24 <_ctype_>:
  407c24:	20202000 20202020 28282020 20282828     .         ((((( 
  407c34:	20202020 20202020 20202020 20202020                     
  407c44:	10108820 10101010 10101010 10101010      ...............
  407c54:	04040410 04040404 10040404 10101010     ................
  407c64:	41411010 41414141 01010101 01010101     ..AAAAAA........
  407c74:	01010101 01010101 01010101 10101010     ................
  407c84:	42421010 42424242 02020202 02020202     ..BBBBBB........
  407c94:	02020202 02020202 02020202 10101010     ................
  407ca4:	00000020 00000000 00000000 00000000      ...............
	...

00407d28 <_init>:
  407d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407d2a:	bf00      	nop
  407d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407d2e:	bc08      	pop	{r3}
  407d30:	469e      	mov	lr, r3
  407d32:	4770      	bx	lr

00407d34 <__init_array_start>:
  407d34:	004059f5 	.word	0x004059f5

00407d38 <__frame_dummy_init_array_entry>:
  407d38:	00400165                                e.@.

00407d3c <_fini>:
  407d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407d3e:	bf00      	nop
  407d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407d42:	bc08      	pop	{r3}
  407d44:	469e      	mov	lr, r3
  407d46:	4770      	bx	lr

00407d48 <__fini_array_start>:
  407d48:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <inBuffer>:
2040000c:	9800 2044                                   ..D 

20400010 <inPingMode>:
20400010:	0001 0000                                   ....

20400014 <outBuffer>:
20400014:	7800 2044                                   .xD 

20400018 <outPingMode>:
20400018:	0001 0000                                   ....

2040001c <pitchtracker>:
2040001c:	0000 bf80 ffff ffff                         ........

20400024 <g_interrupt_enabled>:
20400024:	0001 0000                                   ....

20400028 <SystemCoreClock>:
20400028:	0900 003d                                   ..=.

2040002c <autotune>:
2040002c:	0001 0000                                   ....

20400030 <chorus_speed>:
20400030:	d70a 3ca3                                   ...<

20400034 <delay_feedback>:
20400034:	cccd 3e4c                                   ..L>

20400038 <delay_speed>:
20400038:	2710 0000                                   .'..

2040003c <dry_volume>:
2040003c:	0000 3f80                                   ...?

20400040 <harm_volume>:
20400040:	0000 3f80                                   ...?

20400044 <harmony_list_fill>:
20400044:	a80c 2044                                   ..D 

20400048 <harmony_list_read>:
20400048:	a864 2044                                   d.D 

2040004c <master_volume>:
2040004c:	0000 3f80                                   ...?

20400050 <pitch_bend>:
20400050:	0040 0000                                   @...

20400054 <__fdlib_version>:
20400054:	0001 0000                                   ....

20400058 <_impure_ptr>:
20400058:	0060 2040 0000 0000                         `.@ ....

20400060 <impure_data>:
20400060:	0000 0000 034c 2040 03b4 2040 041c 2040     ....L.@ ..@ ..@ 
	...
20400108:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400118:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400488 <__malloc_av_>:
	...
20400490:	0488 2040 0488 2040 0490 2040 0490 2040     ..@ ..@ ..@ ..@ 
204004a0:	0498 2040 0498 2040 04a0 2040 04a0 2040     ..@ ..@ ..@ ..@ 
204004b0:	04a8 2040 04a8 2040 04b0 2040 04b0 2040     ..@ ..@ ..@ ..@ 
204004c0:	04b8 2040 04b8 2040 04c0 2040 04c0 2040     ..@ ..@ ..@ ..@ 
204004d0:	04c8 2040 04c8 2040 04d0 2040 04d0 2040     ..@ ..@ ..@ ..@ 
204004e0:	04d8 2040 04d8 2040 04e0 2040 04e0 2040     ..@ ..@ ..@ ..@ 
204004f0:	04e8 2040 04e8 2040 04f0 2040 04f0 2040     ..@ ..@ ..@ ..@ 
20400500:	04f8 2040 04f8 2040 0500 2040 0500 2040     ..@ ..@ ..@ ..@ 
20400510:	0508 2040 0508 2040 0510 2040 0510 2040     ..@ ..@ ..@ ..@ 
20400520:	0518 2040 0518 2040 0520 2040 0520 2040     ..@ ..@  .@  .@ 
20400530:	0528 2040 0528 2040 0530 2040 0530 2040     (.@ (.@ 0.@ 0.@ 
20400540:	0538 2040 0538 2040 0540 2040 0540 2040     8.@ 8.@ @.@ @.@ 
20400550:	0548 2040 0548 2040 0550 2040 0550 2040     H.@ H.@ P.@ P.@ 
20400560:	0558 2040 0558 2040 0560 2040 0560 2040     X.@ X.@ `.@ `.@ 
20400570:	0568 2040 0568 2040 0570 2040 0570 2040     h.@ h.@ p.@ p.@ 
20400580:	0578 2040 0578 2040 0580 2040 0580 2040     x.@ x.@ ..@ ..@ 
20400590:	0588 2040 0588 2040 0590 2040 0590 2040     ..@ ..@ ..@ ..@ 
204005a0:	0598 2040 0598 2040 05a0 2040 05a0 2040     ..@ ..@ ..@ ..@ 
204005b0:	05a8 2040 05a8 2040 05b0 2040 05b0 2040     ..@ ..@ ..@ ..@ 
204005c0:	05b8 2040 05b8 2040 05c0 2040 05c0 2040     ..@ ..@ ..@ ..@ 
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 
20400870:	0868 2040 0868 2040 0870 2040 0870 2040     h.@ h.@ p.@ p.@ 
20400880:	0878 2040 0878 2040 0880 2040 0880 2040     x.@ x.@ ..@ ..@ 

20400890 <__malloc_sbrk_base>:
20400890:	ffff ffff                                   ....

20400894 <__malloc_trim_threshold>:
20400894:	0000 0002                                   ....

20400898 <__atexit_recursive_mutex>:
20400898:	a8bc 2044                                   ..D 

2040089c <__global_locale>:
2040089c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008bc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040091c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040093c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040095c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040097c:	6be1 0040 647d 0040 0000 0000 7c24 0040     .k@.}d@.....$|@.
2040098c:	7c20 0040 7bd4 0040 7bd4 0040 7bd4 0040      |@..{@..{@..{@.
2040099c:	7bd4 0040 7bd4 0040 7bd4 0040 7bd4 0040     .{@..{@..{@..{@.
204009ac:	7bd4 0040 7bd4 0040 ffff ffff ffff ffff     .{@..{@.........
204009bc:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009e4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
