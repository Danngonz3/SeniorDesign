
GatorScribe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007408  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00407408  00407408  00017408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009f8  20400000  00407410  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0004a8e4  20402000  0040a000  00022000  2**13
                  ALLOC
  4 .stack        00002004  2044c8e4  004548e4  00022000  2**0
                  ALLOC
  5 .heap         00000200  2044e8e8  004568e8  00022000  2**0
                  ALLOC
  6 .ARM.attributes 0000002c  00000000  00000000  000209f8  2**0
                  CONTENTS, READONLY
  7 .comment      000000b4  00000000  00000000  00020a24  2**0
                  CONTENTS, READONLY
  8 .debug_info   00020557  00000000  00000000  00020ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004b7f  00000000  00000000  0004102f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009ac7  00000000  00000000  00045bae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000cf0  00000000  00000000  0004f675  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001f08  00000000  00000000  00050365  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00025d86  00000000  00000000  0005226d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00014cb6  00000000  00000000  00077ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009d234  00000000  00000000  0008cca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002b5c  00000000  00000000  00129ee0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e8 e8 44 20 39 24 40 00 31 24 40 00 35 24 40 00     ..D 9$@.1$@.5$@.
  400010:	31 24 40 00 31 24 40 00 31 24 40 00 00 00 00 00     1$@.1$@.1$@.....
	...
  40002c:	31 24 40 00 31 24 40 00 00 00 00 00 31 24 40 00     1$@.1$@.....1$@.
  40003c:	31 24 40 00 31 24 40 00 31 24 40 00 31 24 40 00     1$@.1$@.1$@.1$@.
  40004c:	31 24 40 00 31 24 40 00 31 24 40 00 31 24 40 00     1$@.1$@.1$@.1$@.
  40005c:	31 24 40 00 31 24 40 00 00 00 00 00 71 1e 40 00     1$@.1$@.....q.@.
  40006c:	3d 1f 40 00 09 20 40 00 31 24 40 00 c5 26 40 00     =.@.. @.1$@..&@.
  40007c:	31 24 40 00 d5 20 40 00 a1 21 40 00 31 24 40 00     1$@.. @..!@.1$@.
  40008c:	31 24 40 00 31 24 40 00 31 24 40 00 31 24 40 00     1$@.1$@.1$@.1$@.
  40009c:	31 24 40 00 31 24 40 00 31 24 40 00 31 24 40 00     1$@.1$@.1$@.1$@.
  4000ac:	31 24 40 00 31 24 40 00 31 24 40 00 31 24 40 00     1$@.1$@.1$@.1$@.
  4000bc:	31 24 40 00 31 24 40 00 31 24 40 00 31 24 40 00     1$@.1$@.1$@.1$@.
  4000cc:	31 24 40 00 00 00 00 00 31 24 40 00 00 00 00 00     1$@.....1$@.....
  4000dc:	31 24 40 00 31 24 40 00 31 24 40 00 31 24 40 00     1$@.1$@.1$@.1$@.
  4000ec:	31 24 40 00 31 24 40 00 31 24 40 00 31 24 40 00     1$@.1$@.1$@.1$@.
  4000fc:	31 24 40 00 31 24 40 00 31 24 40 00 31 24 40 00     1$@.1$@.1$@.1$@.
  40010c:	31 24 40 00 31 24 40 00 31 24 40 00 00 00 00 00     1$@.1$@.1$@.....
  40011c:	00 00 00 00 31 24 40 00 31 24 40 00 ad 01 40 00     ....1$@.1$@...@.
  40012c:	31 24 40 00 31 24 40 00 00 00 00 00 31 24 40 00     1$@.1$@.....1$@.
  40013c:	31 24 40 00                                         1$@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20402000 	.word	0x20402000
  40015c:	00000000 	.word	0x00000000
  400160:	00407410 	.word	0x00407410

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00407410 	.word	0x00407410
  4001a0:	20402004 	.word	0x20402004
  4001a4:	00407410 	.word	0x00407410
  4001a8:	00000000 	.word	0x00000000

004001ac <XDMAC_Handler>:
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4001ac:	4b21      	ldr	r3, [pc, #132]	; (400234 <XDMAC_Handler+0x88>)
/*********************************** Extern Variables End ***********************************/

#define One_over_max_int16 0.0000305185f 
/******************************* XDMAC Interrupt Handler Start *******************************/ 
void XDMAC_Handler(void)
{
  4001ae:	b470      	push	{r4, r5, r6}
  4001b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    uint32_t dma_status;
    
    dma_status = xdmac_channel_get_interrupt_status(XDMAC, XDMA_CH_SSC_RX);
    if (dma_status & XDMAC_CIS_BIS)
  4001b2:	07da      	lsls	r2, r3, #31
  4001b4:	d529      	bpl.n	40020a <XDMAC_Handler+0x5e>
    {
		// Update input and process buffers to be used 
		if(inPingMode)
  4001b6:	4d20      	ldr	r5, [pc, #128]	; (400238 <XDMAC_Handler+0x8c>)
		else 
		{
			inBuffer = inPongBuffer; 
			processBuffer = processPongBuffer; 
		}
		inPingMode = !inPingMode; 
  4001b8:	2200      	movs	r2, #0
			processBuffer = processPingBuffer; 
  4001ba:	4c20      	ldr	r4, [pc, #128]	; (40023c <XDMAC_Handler+0x90>)
		if(inPingMode)
  4001bc:	782b      	ldrb	r3, [r5, #0]
			processBuffer = processPingBuffer; 
  4001be:	4820      	ldr	r0, [pc, #128]	; (400240 <XDMAC_Handler+0x94>)
  4001c0:	4293      	cmp	r3, r2
		inPingMode = !inPingMode; 
  4001c2:	782e      	ldrb	r6, [r5, #0]
			processBuffer = processPingBuffer; 
  4001c4:	491f      	ldr	r1, [pc, #124]	; (400244 <XDMAC_Handler+0x98>)
  4001c6:	4b20      	ldr	r3, [pc, #128]	; (400248 <XDMAC_Handler+0x9c>)
  4001c8:	bf1c      	itt	ne
  4001ca:	4621      	movne	r1, r4
  4001cc:	4603      	movne	r3, r0
		inPingMode = !inPingMode; 
  4001ce:	f086 0601 	eor.w	r6, r6, #1
  4001d2:	4c1e      	ldr	r4, [pc, #120]	; (40024c <XDMAC_Handler+0xa0>)
  4001d4:	481e      	ldr	r0, [pc, #120]	; (400250 <XDMAC_Handler+0xa4>)
		
		int processIdx = 0;
		// Fill process buffer - only left channel decimated by 1
		for(int i = 0; i < IO_BUF_SIZE; i+=2)
		{
			processBuffer[processIdx++] = ((float )(int16_t)inBuffer[i]) * One_over_max_int16; 
  4001d6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 400254 <XDMAC_Handler+0xa8>
		inPingMode = !inPingMode; 
  4001da:	702e      	strb	r6, [r5, #0]
  4001dc:	6021      	str	r1, [r4, #0]
  4001de:	6003      	str	r3, [r0, #0]
  4001e0:	e001      	b.n	4001e6 <XDMAC_Handler+0x3a>
  4001e2:	6821      	ldr	r1, [r4, #0]
  4001e4:	6803      	ldr	r3, [r0, #0]
			processBuffer[processIdx++] = ((float )(int16_t)inBuffer[i]) * One_over_max_int16; 
  4001e6:	5a9b      	ldrh	r3, [r3, r2]
  4001e8:	4411      	add	r1, r2
  4001ea:	3204      	adds	r2, #4
  4001ec:	b21b      	sxth	r3, r3
		for(int i = 0; i < IO_BUF_SIZE; i+=2)
  4001ee:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
			processBuffer[processIdx++] = ((float )(int16_t)inBuffer[i]) * One_over_max_int16; 
  4001f2:	ee07 3a90 	vmov	s15, r3
  4001f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4001fa:	ee67 7a87 	vmul.f32	s15, s15, s14
  4001fe:	edc1 7a00 	vstr	s15, [r1]
		for(int i = 0; i < IO_BUF_SIZE; i+=2)
  400202:	d1ee      	bne.n	4001e2 <XDMAC_Handler+0x36>
		}
		dataReceived = true; // can check for out of time here 
  400204:	4b14      	ldr	r3, [pc, #80]	; (400258 <XDMAC_Handler+0xac>)
  400206:	2201      	movs	r2, #1
  400208:	701a      	strb	r2, [r3, #0]
  40020a:	4b0a      	ldr	r3, [pc, #40]	; (400234 <XDMAC_Handler+0x88>)
  40020c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    }
	
	dma_status = xdmac_channel_get_interrupt_status(XDMAC, XDMA_CH_SSC_TX);
	if (dma_status & XDMAC_CIS_BIS)
  400210:	07db      	lsls	r3, r3, #31
  400212:	d50c      	bpl.n	40022e <XDMAC_Handler+0x82>
	{
		// update output buffer to be used 
		if(outPingMode)
  400214:	4b11      	ldr	r3, [pc, #68]	; (40025c <XDMAC_Handler+0xb0>)
		{
			outBuffer = outPingBuffer; 
  400216:	4812      	ldr	r0, [pc, #72]	; (400260 <XDMAC_Handler+0xb4>)
		if(outPingMode)
  400218:	781c      	ldrb	r4, [r3, #0]
			outBuffer = outPingBuffer; 
  40021a:	4912      	ldr	r1, [pc, #72]	; (400264 <XDMAC_Handler+0xb8>)
		}
		else
		{
			outBuffer = outPongBuffer; 
		}
		outPingMode = !outPingMode; 
  40021c:	781a      	ldrb	r2, [r3, #0]
			outBuffer = outPingBuffer; 
  40021e:	2c00      	cmp	r4, #0
  400220:	bf18      	it	ne
  400222:	4601      	movne	r1, r0
  400224:	4810      	ldr	r0, [pc, #64]	; (400268 <XDMAC_Handler+0xbc>)
		outPingMode = !outPingMode; 
  400226:	f082 0201 	eor.w	r2, r2, #1
  40022a:	6001      	str	r1, [r0, #0]
  40022c:	701a      	strb	r2, [r3, #0]
	}
}
  40022e:	bc70      	pop	{r4, r5, r6}
  400230:	4770      	bx	lr
  400232:	bf00      	nop
  400234:	40078000 	.word	0x40078000
  400238:	20400010 	.word	0x20400010
  40023c:	20446800 	.word	0x20446800
  400240:	2044b800 	.word	0x2044b800
  400244:	2044a800 	.word	0x2044a800
  400248:	20447800 	.word	0x20447800
  40024c:	2040001c 	.word	0x2040001c
  400250:	2040000c 	.word	0x2040000c
  400254:	380000fd 	.word	0x380000fd
  400258:	2040201c 	.word	0x2040201c
  40025c:	20400018 	.word	0x20400018
  400260:	20448800 	.word	0x20448800
  400264:	20449800 	.word	0x20449800
  400268:	20400014 	.word	0x20400014

0040026c <configure_xdma>:
/******************************* XDMAC Interrupt Handler End *******************************/

/********************************** Public Functions Start **********************************/
void configure_xdma(void)
{
  40026c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint16_t *src;
    
    xdmac_channel_config_t xdmac_channel_cfg = {0};
  400270:	2620      	movs	r6, #32
{
  400272:	b088      	sub	sp, #32
    xdmac_channel_config_t xdmac_channel_cfg = {0};
  400274:	2100      	movs	r1, #0
  400276:	4b30      	ldr	r3, [pc, #192]	; (400338 <configure_xdma+0xcc>)
  400278:	4632      	mov	r2, r6
  40027a:	4668      	mov	r0, sp
  40027c:	4798      	blx	r3
    
    /* Initialize and enable DMA controller */
    pmc_enable_periph_clk(ID_XDMAC);
  40027e:	4b2f      	ldr	r3, [pc, #188]	; (40033c <configure_xdma+0xd0>)
  400280:	203a      	movs	r0, #58	; 0x3a
    | XDMAC_CC_DIF_AHB_IF0
    | XDMAC_CC_SAM_FIXED_AM
    | XDMAC_CC_DAM_INCREMENTED_AM
    | XDMAC_CC_PERID(33);
	
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  400282:	4c2f      	ldr	r4, [pc, #188]	; (400340 <configure_xdma+0xd4>)
    pmc_enable_periph_clk(ID_XDMAC);
  400284:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400286:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
  40028a:	4b2e      	ldr	r3, [pc, #184]	; (400344 <configure_xdma+0xd8>)
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  40028c:	466a      	mov	r2, sp
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  40028e:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 400358 <configure_xdma+0xec>
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  400292:	4620      	mov	r0, r4
  400294:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
  400298:	2100      	movs	r1, #0
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40029a:	f883 633a 	strb.w	r6, [r3, #826]	; 0x33a
 */
static inline void xdmac_channel_set_descriptor_control(Xdmac *xdmac, uint32_t channel_num, uint32_t config)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  40029e:	270f      	movs	r7, #15
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4002a0:	605d      	str	r5, [r3, #4]
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  4002a2:	2501      	movs	r5, #1
  4002a4:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 40035c <configure_xdma+0xf0>
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4002a8:	f8cd e00c 	str.w	lr, [sp, #12]
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  4002ac:	47c0      	blx	r8
    
    /* Initialize linked list descriptor */
    src = (uint16_t *)&inPingBuffer[0];
    linklist_read[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002ae:	4b26      	ldr	r3, [pc, #152]	; (400348 <configure_xdma+0xdc>)
    | XDMAC_CC_DIF_AHB_IF1
    | XDMAC_CC_SAM_INCREMENTED_AM
    | XDMAC_CC_DAM_FIXED_AM
    | XDMAC_CC_PERID(32);
	
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  4002b0:	466a      	mov	r2, sp
    linklist_read[0].mbr_da = (uint32_t)(src);
  4002b2:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 400360 <configure_xdma+0xf4>
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  4002b6:	4629      	mov	r1, r5
    linklist_read[0].mbr_nda = (uint32_t)&linklist_read[1];
  4002b8:	f103 0010 	add.w	r0, r3, #16
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  4002bc:	f023 0603 	bic.w	r6, r3, #3
	linklist_read[1].mbr_da = (uint32_t)(src);
  4002c0:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 400364 <configure_xdma+0xf8>
    linklist_read[0].mbr_nda = (uint32_t)&linklist_read[1];
  4002c4:	6018      	str	r0, [r3, #0]
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  4002c6:	4620      	mov	r0, r4
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  4002c8:	66e7      	str	r7, [r4, #108]	; 0x6c
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  4002ca:	66a6      	str	r6, [r4, #104]	; 0x68
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  4002cc:	60e5      	str	r5, [r4, #12]
    linklist_read[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002ce:	4e1f      	ldr	r6, [pc, #124]	; (40034c <configure_xdma+0xe0>)
	xdmac->XDMAC_CHID[channel_num].XDMAC_CIE = mask;
  4002d0:	6525      	str	r5, [r4, #80]	; 0x50
    linklist_read[0].mbr_da = (uint32_t)(src);
  4002d2:	f8c3 e00c 	str.w	lr, [r3, #12]
    linklist_read[0].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  4002d6:	f8df e090 	ldr.w	lr, [pc, #144]	; 400368 <configure_xdma+0xfc>
	linklist_read[1].mbr_da = (uint32_t)(src);
  4002da:	f8c3 c01c 	str.w	ip, [r3, #28]
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4002de:	f8df c08c 	ldr.w	ip, [pc, #140]	; 40036c <configure_xdma+0x100>
    linklist_read[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002e2:	605e      	str	r6, [r3, #4]
	linklist_read[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002e4:	615e      	str	r6, [r3, #20]
    linklist_read[0].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  4002e6:	f8c3 e008 	str.w	lr, [r3, #8]
	linklist_read[1].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  4002ea:	f8c3 e018 	str.w	lr, [r3, #24]
	linklist_read[1].mbr_nda = (uint32_t)&linklist_read[0];
  4002ee:	611b      	str	r3, [r3, #16]
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4002f0:	f8cd c00c 	str.w	ip, [sp, #12]
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  4002f4:	47c0      	blx	r8
    
    src = (uint16_t *)&outPingBuffer[0];
    linklist_write[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002f6:	4b16      	ldr	r3, [pc, #88]	; (400350 <configure_xdma+0xe4>)
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  4002f8:	2102      	movs	r1, #2
		 | XDMAC_UBC_NDE_FETCH_EN
		 | XDMAC_UBC_NSEN_UPDATED
			| XDMAC_CUBC_UBLEN(IO_BUF_SIZE);
    linklist_write[0].mbr_sa = (uint32_t)(src);
    linklist_write[0].mbr_da = (uint32_t)&(SSC->SSC_THR);
  4002fa:	4a16      	ldr	r2, [pc, #88]	; (400354 <configure_xdma+0xe8>)
    linklist_write[0].mbr_sa = (uint32_t)(src);
  4002fc:	f8df c070 	ldr.w	ip, [pc, #112]	; 400370 <configure_xdma+0x104>
    linklist_write[0].mbr_nda = (uint32_t)&linklist_write[1];
  400300:	f103 0810 	add.w	r8, r3, #16
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  400304:	f023 0003 	bic.w	r0, r3, #3
	src = (uint16_t *)&outPongBuffer[0];
	linklist_write[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
	    | XDMAC_UBC_NDE_FETCH_EN
	    | XDMAC_UBC_NSEN_UPDATED
	    | XDMAC_CUBC_UBLEN(IO_BUF_SIZE);
	linklist_write[1].mbr_sa = (uint32_t)(src);
  400308:	f8df e068 	ldr.w	lr, [pc, #104]	; 400374 <configure_xdma+0x108>
    linklist_write[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  40030c:	605e      	str	r6, [r3, #4]
	linklist_write[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  40030e:	615e      	str	r6, [r3, #20]
	linklist_write[1].mbr_da = (uint32_t)&(SSC->SSC_THR);
	linklist_write[1].mbr_nda = (uint32_t)&linklist_write[0];
  400310:	611b      	str	r3, [r3, #16]
    linklist_write[0].mbr_nda = (uint32_t)&linklist_write[1];
  400312:	f8c3 8000 	str.w	r8, [r3]
    linklist_write[0].mbr_sa = (uint32_t)(src);
  400316:	f8c3 c008 	str.w	ip, [r3, #8]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  40031a:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
	linklist_write[1].mbr_sa = (uint32_t)(src);
  40031e:	f8c3 e018 	str.w	lr, [r3, #24]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  400322:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
    linklist_write[0].mbr_da = (uint32_t)&(SSC->SSC_THR);
  400326:	60da      	str	r2, [r3, #12]
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  400328:	60e1      	str	r1, [r4, #12]
	linklist_write[1].mbr_da = (uint32_t)&(SSC->SSC_THR);
  40032a:	61da      	str	r2, [r3, #28]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CIE = mask;
  40032c:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
    xdmac_channel_set_descriptor_addr(XDMAC, XDMA_CH_SSC_TX, (uint32_t)(&linklist_write[0]), 0);
    
    xdmac_enable_interrupt(XDMAC, XDMA_CH_SSC_TX);
    xdmac_channel_enable_interrupt(XDMAC, XDMA_CH_SSC_TX, XDMAC_CIE_BIE);
    
}
  400330:	b008      	add	sp, #32
  400332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400336:	bf00      	nop
  400338:	00404199 	.word	0x00404199
  40033c:	0040236d 	.word	0x0040236d
  400340:	40078000 	.word	0x40078000
  400344:	e000e100 	.word	0xe000e100
  400348:	20402020 	.word	0x20402020
  40034c:	0b000800 	.word	0x0b000800
  400350:	20402040 	.word	0x20402040
  400354:	40004024 	.word	0x40004024
  400358:	21042801 	.word	0x21042801
  40035c:	004017e9 	.word	0x004017e9
  400360:	2044b800 	.word	0x2044b800
  400364:	20447800 	.word	0x20447800
  400368:	40004020 	.word	0x40004020
  40036c:	20014811 	.word	0x20014811
  400370:	20448800 	.word	0x20448800
  400374:	20449800 	.word	0x20449800

00400378 <audio_init>:
#include "DMA_Audio.h"
#include "WM8904_Driver.h"
#include "ASF/sam/utils/cmsis/samv71/include/component/supc.h"

void audio_init(void)
{
  400378:	b510      	push	{r4, lr}
	/* Initialize WM8904 TWI interface*/
	if (wm8904_twi_init() != TWIHS_SUCCESS) {
  40037a:	4b13      	ldr	r3, [pc, #76]	; (4003c8 <audio_init+0x50>)
  40037c:	4798      	blx	r3
  40037e:	b118      	cbz	r0, 400388 <audio_init+0x10>
		printf("-E-\tWM8904 initialization failed.\r");
  400380:	4812      	ldr	r0, [pc, #72]	; (4003cc <audio_init+0x54>)
  400382:	4b13      	ldr	r3, [pc, #76]	; (4003d0 <audio_init+0x58>)
  400384:	4798      	blx	r3
  400386:	e7fe      	b.n	400386 <audio_init+0xe>
			/* Capture error */
		}
	}
		
	/* Configure CODEC */
	configure_codec();
  400388:	4b12      	ldr	r3, [pc, #72]	; (4003d4 <audio_init+0x5c>)
  40038a:	4604      	mov	r4, r0
  40038c:	4798      	blx	r3
		
	/* Configure SSC */
	configure_ssc();
  40038e:	4b12      	ldr	r3, [pc, #72]	; (4003d8 <audio_init+0x60>)
  400390:	4798      	blx	r3
		
	/* Configure XDMA */
	configure_xdma();
  400392:	4b12      	ldr	r3, [pc, #72]	; (4003dc <audio_init+0x64>)
  400394:	4798      	blx	r3
		
	/* Enable the DAC master clock (MCLK) */
	pmc_pck_set_prescaler(PMC_PCK_2, PMC_MCKR_PRES_CLK_1);
  400396:	4621      	mov	r1, r4
  400398:	2002      	movs	r0, #2
  40039a:	4b11      	ldr	r3, [pc, #68]	; (4003e0 <audio_init+0x68>)
  40039c:	4798      	blx	r3
	pmc_pck_set_source(PMC_PCK_2, PMC_MCKR_CSS_SLOW_CLK);
  40039e:	4621      	mov	r1, r4
  4003a0:	2002      	movs	r0, #2
  4003a2:	4b10      	ldr	r3, [pc, #64]	; (4003e4 <audio_init+0x6c>)
  4003a4:	4798      	blx	r3
	pmc_enable_pck(PMC_PCK_2);
  4003a6:	2002      	movs	r0, #2
  4003a8:	4b0f      	ldr	r3, [pc, #60]	; (4003e8 <audio_init+0x70>)
  4003aa:	4798      	blx	r3
		
	/* Start playing */
	ssc_enable_rx(SSC);
  4003ac:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4003b0:	4b0e      	ldr	r3, [pc, #56]	; (4003ec <audio_init+0x74>)
  4003b2:	4798      	blx	r3
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  4003b4:	4c0e      	ldr	r4, [pc, #56]	; (4003f0 <audio_init+0x78>)
  4003b6:	2201      	movs	r2, #1
	xdmac_channel_enable(XDMAC, XDMA_CH_SSC_RX);
	// might want to enable in the first xdma interrupt (if you care)
	ssc_enable_tx(SSC);
  4003b8:	4b0e      	ldr	r3, [pc, #56]	; (4003f4 <audio_init+0x7c>)
  4003ba:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4003be:	61e2      	str	r2, [r4, #28]
  4003c0:	4798      	blx	r3
  4003c2:	2302      	movs	r3, #2
  4003c4:	61e3      	str	r3, [r4, #28]
  4003c6:	bd10      	pop	{r4, pc}
  4003c8:	00401369 	.word	0x00401369
  4003cc:	00406848 	.word	0x00406848
  4003d0:	00403acd 	.word	0x00403acd
  4003d4:	004004bd 	.word	0x004004bd
  4003d8:	004003f9 	.word	0x004003f9
  4003dc:	0040026d 	.word	0x0040026d
  4003e0:	004023b5 	.word	0x004023b5
  4003e4:	004023e9 	.word	0x004023e9
  4003e8:	0040241d 	.word	0x0040241d
  4003ec:	004013f5 	.word	0x004013f5
  4003f0:	40078000 	.word	0x40078000
  4003f4:	00401405 	.word	0x00401405

004003f8 <configure_ssc>:
#include "WM8904_Driver.h"


/********************************** Public Functions Start **********************************/
void configure_ssc(void)
{
  4003f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	clock_opt_t tx_clk_option, rx_clk_option;
	data_frame_opt_t tx_data_frame_option, rx_data_frame_option;

	/* Initialize clock */
	pmc_enable_periph_clk(ID_SSC);
  4003fc:	4b28      	ldr	r3, [pc, #160]	; (4004a0 <configure_ssc+0xa8>)
{
  4003fe:	b09c      	sub	sp, #112	; 0x70
	pmc_enable_periph_clk(ID_SSC);
  400400:	2016      	movs	r0, #22
	/* Reset SSC */
	ssc_reset(SSC);

	/* Transmitter clock mode configuration. */
	tx_clk_option.ul_cks = SSC_TCMR_CKS_TK;
	tx_clk_option.ul_cko = SSC_TCMR_CKO_NONE;
  400402:	2400      	movs	r4, #0
	pmc_enable_periph_clk(ID_SSC);
  400404:	4798      	blx	r3
	ssc_reset(SSC);
  400406:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40040a:	4b26      	ldr	r3, [pc, #152]	; (4004a4 <configure_ssc+0xac>)
	tx_clk_option.ul_cki = 0;
	tx_clk_option.ul_ckg = SSC_TCMR_CKG_CONTINUOUS;
	tx_clk_option.ul_start_sel = SSC_TCMR_START_TF_EDGE;
	tx_clk_option.ul_sttdly = 1;
	tx_clk_option.ul_period = BITS_BY_SLOT - 1;
  40040c:	250f      	movs	r5, #15
	ssc_reset(SSC);
  40040e:	4798      	blx	r3
	tx_clk_option.ul_sttdly = 1;
  400410:	2601      	movs	r6, #1
	tx_clk_option.ul_start_sel = SSC_TCMR_START_TF_EDGE;
  400412:	f44f 68e0 	mov.w	r8, #1792	; 0x700
	tx_clk_option.ul_cks = SSC_TCMR_CKS_TK;
  400416:	f04f 0e02 	mov.w	lr, #2
	/* Transmitter frame mode configuration. */
	tx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
	tx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  40041a:	2780      	movs	r7, #128	; 0x80
	tx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;
	tx_data_frame_option.ul_fslen_ext = 0;
	tx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
	tx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
	/* Configure the SSC transmitter to I2S mode. */
	ssc_set_transmitter(SSC, &tx_clk_option, &tx_data_frame_option);
  40041c:	aa0e      	add	r2, sp, #56	; 0x38
  40041e:	4669      	mov	r1, sp
  400420:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400424:	4b20      	ldr	r3, [pc, #128]	; (4004a8 <configure_ssc+0xb0>)
	tx_clk_option.ul_cks = SSC_TCMR_CKS_TK;
  400426:	f8cd e000 	str.w	lr, [sp]
	tx_clk_option.ul_cko = SSC_TCMR_CKO_NONE;
  40042a:	9401      	str	r4, [sp, #4]
	tx_clk_option.ul_cki = 0;
  40042c:	9402      	str	r4, [sp, #8]
	tx_clk_option.ul_ckg = SSC_TCMR_CKG_CONTINUOUS;
  40042e:	9403      	str	r4, [sp, #12]
	tx_data_frame_option.ul_datnb = 0;
  400430:	9410      	str	r4, [sp, #64]	; 0x40
	tx_data_frame_option.ul_fslen_ext = 0;
  400432:	9412      	str	r4, [sp, #72]	; 0x48
	tx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  400434:	9413      	str	r4, [sp, #76]	; 0x4c
	tx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  400436:	9414      	str	r4, [sp, #80]	; 0x50
	tx_clk_option.ul_start_sel = SSC_TCMR_START_TF_EDGE;
  400438:	f8cd 8018 	str.w	r8, [sp, #24]
	tx_clk_option.ul_sttdly = 1;
  40043c:	9605      	str	r6, [sp, #20]
	tx_clk_option.ul_period = BITS_BY_SLOT - 1;
  40043e:	9504      	str	r5, [sp, #16]
	tx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
  400440:	950e      	str	r5, [sp, #56]	; 0x38
	tx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;
  400442:	9511      	str	r5, [sp, #68]	; 0x44
	tx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  400444:	970f      	str	r7, [sp, #60]	; 0x3c
	ssc_set_transmitter(SSC, &tx_clk_option, &tx_data_frame_option);
  400446:	4798      	blx	r3

	/* Receiver clock mode configuration. */
	rx_clk_option.ul_cks = SSC_RCMR_CKS_TK;
	rx_clk_option.ul_cko = SSC_RCMR_CKO_NONE;
	rx_clk_option.ul_cki = SSC_RCMR_CKI;
  400448:	f04f 0c20 	mov.w	ip, #32
	rx_clk_option.ul_ckg = SSC_RCMR_CKG_CONTINUOUS;
	rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_EDGE;
	rx_clk_option.ul_sttdly = 1;	
	rx_clk_option.ul_period = BITS_BY_SLOT;	
  40044c:	f04f 0e10 	mov.w	lr, #16
	rx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;	
	rx_data_frame_option.ul_fslen_ext = 0;
	rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
	rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
	/* Configure the SSC transmitter to I2S mode. */
	ssc_set_receiver(SSC, &rx_clk_option, &rx_data_frame_option);
  400450:	aa15      	add	r2, sp, #84	; 0x54
  400452:	a907      	add	r1, sp, #28
  400454:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400458:	4b14      	ldr	r3, [pc, #80]	; (4004ac <configure_ssc+0xb4>)
	rx_clk_option.ul_cki = SSC_RCMR_CKI;
  40045a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
	rx_clk_option.ul_period = BITS_BY_SLOT;	
  40045e:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
	rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_EDGE;
  400462:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
	rx_clk_option.ul_cks = SSC_RCMR_CKS_TK;
  400466:	9607      	str	r6, [sp, #28]
	rx_clk_option.ul_cko = SSC_RCMR_CKO_NONE;
  400468:	9408      	str	r4, [sp, #32]
	rx_clk_option.ul_ckg = SSC_RCMR_CKG_CONTINUOUS;
  40046a:	940a      	str	r4, [sp, #40]	; 0x28
	rx_clk_option.ul_sttdly = 1;	
  40046c:	960c      	str	r6, [sp, #48]	; 0x30
	rx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
  40046e:	9515      	str	r5, [sp, #84]	; 0x54
	rx_data_frame_option.ul_msbf = SSC_RFMR_MSBF;
  400470:	9716      	str	r7, [sp, #88]	; 0x58
	rx_data_frame_option.ul_datnb = 0;
  400472:	9417      	str	r4, [sp, #92]	; 0x5c
	rx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;	
  400474:	9518      	str	r5, [sp, #96]	; 0x60
	rx_data_frame_option.ul_fslen_ext = 0;
  400476:	9419      	str	r4, [sp, #100]	; 0x64
	rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  400478:	941a      	str	r4, [sp, #104]	; 0x68
	rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  40047a:	941b      	str	r4, [sp, #108]	; 0x6c
	ssc_set_receiver(SSC, &rx_clk_option, &rx_data_frame_option);
  40047c:	4798      	blx	r3

	/* Disable transmitter first */
	ssc_disable_tx(SSC);
  40047e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400482:	4b0b      	ldr	r3, [pc, #44]	; (4004b0 <configure_ssc+0xb8>)
  400484:	4798      	blx	r3
	ssc_disable_rx(SSC);
  400486:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40048a:	4b0a      	ldr	r3, [pc, #40]	; (4004b4 <configure_ssc+0xbc>)
  40048c:	4798      	blx	r3

	/* Disable All Interrupt */
	ssc_disable_interrupt(SSC, 0xFFFFFFFF);
  40048e:	f04f 31ff 	mov.w	r1, #4294967295
  400492:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400496:	4b08      	ldr	r3, [pc, #32]	; (4004b8 <configure_ssc+0xc0>)
  400498:	4798      	blx	r3
}
  40049a:	b01c      	add	sp, #112	; 0x70
  40049c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4004a0:	0040236d 	.word	0x0040236d
  4004a4:	004013e1 	.word	0x004013e1
  4004a8:	00401489 	.word	0x00401489
  4004ac:	00401415 	.word	0x00401415
  4004b0:	0040140d 	.word	0x0040140d
  4004b4:	004013fd 	.word	0x004013fd
  4004b8:	004014fd 	.word	0x004014fd

004004bc <configure_codec>:


void configure_codec(void)
{
  4004bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t data = 0;
	/* check that WM8904 is present */
	wm8904_write_register(WM8904_SW_RESET_AND_ID, 0xFFFF);
  4004c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
  4004c4:	4c3d      	ldr	r4, [pc, #244]	; (4005bc <configure_codec+0x100>)
  4004c6:	2000      	movs	r0, #0
	}

	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS);	
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |	
	WM8904_VMID_RES_FAST | WM8904_VMID_ENA);
	delay_ms(5);
  4004c8:	4e3d      	ldr	r6, [pc, #244]	; (4005c0 <configure_codec+0x104>)
	wm8904_write_register(WM8904_SW_RESET_AND_ID, 0xFFFF);
  4004ca:	47a0      	blx	r4
	data = wm8904_read_register(WM8904_SW_RESET_AND_ID);
  4004cc:	4b3d      	ldr	r3, [pc, #244]	; (4005c4 <configure_codec+0x108>)
  4004ce:	2000      	movs	r0, #0
	delay_ms(5);
  4004d0:	4d3d      	ldr	r5, [pc, #244]	; (4005c8 <configure_codec+0x10c>)
	data = wm8904_read_register(WM8904_SW_RESET_AND_ID);
  4004d2:	4798      	blx	r3
	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS);	
  4004d4:	2108      	movs	r1, #8
  4004d6:	2004      	movs	r0, #4
	WM8904_DCS_ENA_CHAN_3 | WM8904_DCS_ENA_CHAN_2 |
	WM8904_DCS_ENA_CHAN_1 | WM8904_DCS_ENA_CHAN_0);
	wm8904_write_register(WM8904_DC_SERVO_1,
	WM8904_DCS_TRIG_STARTUP_3 | WM8904_DCS_TRIG_STARTUP_2 |
	WM8904_DCS_TRIG_STARTUP_1 | WM8904_DCS_TRIG_STARTUP_0);
	delay_ms(100);
  4004d8:	4f3c      	ldr	r7, [pc, #240]	; (4005cc <configure_codec+0x110>)
	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS);	
  4004da:	47a0      	blx	r4
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |	
  4004dc:	2147      	movs	r1, #71	; 0x47
  4004de:	2005      	movs	r0, #5
  4004e0:	47a0      	blx	r4
	delay_ms(5);
  4004e2:	4630      	mov	r0, r6
  4004e4:	47a8      	blx	r5
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |
  4004e6:	2143      	movs	r1, #67	; 0x43
  4004e8:	2005      	movs	r0, #5
  4004ea:	47a0      	blx	r4
	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS | WM8904_BIAS_ENA);
  4004ec:	2109      	movs	r1, #9
  4004ee:	2004      	movs	r0, #4
  4004f0:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_0, WM8904_INL_ENA | WM8904_INR_ENA);
  4004f2:	2103      	movs	r1, #3
  4004f4:	200c      	movs	r0, #12
  4004f6:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_2, WM8904_HPL_PGA_ENA | WM8904_HPR_PGA_ENA);
  4004f8:	2103      	movs	r1, #3
  4004fa:	200e      	movs	r0, #14
  4004fc:	47a0      	blx	r4
	wm8904_write_register(WM8904_DAC_DIGITAL_1, WM8904_DEEMPH(0));
  4004fe:	2100      	movs	r1, #0
  400500:	2021      	movs	r0, #33	; 0x21
  400502:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_OUT12_ZC, 0x0000);
  400504:	2100      	movs	r1, #0
  400506:	203d      	movs	r0, #61	; 0x3d
  400508:	47a0      	blx	r4
	wm8904_write_register(WM8904_CHARGE_PUMP_0, WM8904_CP_ENA);
  40050a:	2101      	movs	r1, #1
  40050c:	2062      	movs	r0, #98	; 0x62
  40050e:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLASS_W_0, WM8904_CP_DYN_PWR);
  400510:	2101      	movs	r1, #1
  400512:	2068      	movs	r0, #104	; 0x68
  400514:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_1, 0x0000);
  400516:	2100      	movs	r1, #0
  400518:	2074      	movs	r0, #116	; 0x74
  40051a:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_2, WM8904_FLL_OUTDIV(7)| WM8904_FLL_FRATIO(4));
  40051c:	f240 7104 	movw	r1, #1796	; 0x704
  400520:	2075      	movs	r0, #117	; 0x75
  400522:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_3, WM8904_FLL_K(0x8000));
  400524:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  400528:	2076      	movs	r0, #118	; 0x76
  40052a:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_4, WM8904_FLL_N(0xBB));
  40052c:	f44f 51bb 	mov.w	r1, #5984	; 0x1760
  400530:	2077      	movs	r0, #119	; 0x77
  400532:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_1, WM8904_FLL_FRACN_ENA | WM8904_FLL_ENA);
  400534:	2105      	movs	r1, #5
  400536:	2074      	movs	r0, #116	; 0x74
  400538:	47a0      	blx	r4
	delay_ms(5);
  40053a:	4630      	mov	r0, r6
  40053c:	47a8      	blx	r5
	wm8904_write_register(WM8904_CLOCK_RATES_1, WM8904_CLK_SYS_RATE(3) | WM8904_SAMPLE_RATE(SAMPLE_RATE));
  40053e:	f640 4105 	movw	r1, #3077	; 0xc05
  400542:	2015      	movs	r0, #21
  400544:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLOCK_RATES_0, 0x0000);
  400546:	2100      	movs	r1, #0
  400548:	2014      	movs	r0, #20
  40054a:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLOCK_RATES_2,
  40054c:	f244 0106 	movw	r1, #16390	; 0x4006
  400550:	2016      	movs	r0, #22
  400552:	47a0      	blx	r4
	wm8904_write_register(WM8904_AUDIO_INTERFACE_1, WM8904_BCLK_DIR | WM8904_AIF_FMT_I2S); 
  400554:	2142      	movs	r1, #66	; 0x42
  400556:	2019      	movs	r0, #25
  400558:	47a0      	blx	r4
	wm8904_write_register(WM8904_AUDIO_INTERFACE_2, WM8904_BCLK_DIV(8));
  40055a:	2108      	movs	r1, #8
  40055c:	201a      	movs	r0, #26
  40055e:	47a0      	blx	r4
	wm8904_write_register(WM8904_AUDIO_INTERFACE_3, WM8904_LRCLK_DIR | WM8904_LRCLK_RATE(0x20));
  400560:	f44f 6102 	mov.w	r1, #2080	; 0x820
  400564:	201b      	movs	r0, #27
  400566:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_6,
  400568:	210f      	movs	r1, #15
  40056a:	2012      	movs	r0, #18
  40056c:	47a0      	blx	r4
	delay_ms(5);
  40056e:	4630      	mov	r0, r6
  400570:	47a8      	blx	r5
	wm8904_write_register(WM8904_ANALOGUE_LEFT_INPUT_0, WM8904_LIN_VOL(0x10));
  400572:	2110      	movs	r1, #16
  400574:	202c      	movs	r0, #44	; 0x2c
  400576:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_RIGHT_INPUT_0, WM8904_RIN_VOL(0x10));
  400578:	2110      	movs	r1, #16
  40057a:	202d      	movs	r0, #45	; 0x2d
  40057c:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  40057e:	2111      	movs	r1, #17
  400580:	205a      	movs	r0, #90	; 0x5a
  400582:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  400584:	2133      	movs	r1, #51	; 0x33
  400586:	205a      	movs	r0, #90	; 0x5a
  400588:	47a0      	blx	r4
	wm8904_write_register(WM8904_DC_SERVO_0,
  40058a:	210f      	movs	r1, #15
  40058c:	2043      	movs	r0, #67	; 0x43
  40058e:	47a0      	blx	r4
	wm8904_write_register(WM8904_DC_SERVO_1,
  400590:	21f0      	movs	r1, #240	; 0xf0
  400592:	2044      	movs	r0, #68	; 0x44
  400594:	47a0      	blx	r4
	delay_ms(100);
  400596:	4638      	mov	r0, r7
  400598:	47a8      	blx	r5
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  40059a:	2177      	movs	r1, #119	; 0x77
  40059c:	205a      	movs	r0, #90	; 0x5a
  40059e:	47a0      	blx	r4
	WM8904_HPL_ENA_OUTP | WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_ENA_OUTP | WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  4005a0:	21ff      	movs	r1, #255	; 0xff
  4005a2:	205a      	movs	r0, #90	; 0x5a
  4005a4:	47a0      	blx	r4
	WM8904_HPL_RMV_SHORT | WM8904_HPL_ENA_OUTP | WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_RMV_SHORT | WM8904_HPR_ENA_OUTP | WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_OUT1_LEFT, WM8904_HPOUT_VU | WM8904_HPOUTL_VOL(0x39));
  4005a6:	21b9      	movs	r1, #185	; 0xb9
  4005a8:	2039      	movs	r0, #57	; 0x39
  4005aa:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_OUT1_RIGHT, WM8904_HPOUT_VU | WM8904_HPOUTR_VOL(0x39));
  4005ac:	203a      	movs	r0, #58	; 0x3a
  4005ae:	21b9      	movs	r1, #185	; 0xb9
  4005b0:	47a0      	blx	r4
	delay_ms(100);
  4005b2:	4638      	mov	r0, r7
  4005b4:	462b      	mov	r3, r5
}
  4005b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	delay_ms(100);
  4005ba:	4718      	bx	r3
  4005bc:	004012f1 	.word	0x004012f1
  4005c0:	0003dbc2 	.word	0x0003dbc2
  4005c4:	0040132d 	.word	0x0040132d
  4005c8:	20400001 	.word	0x20400001
  4005cc:	004d2b25 	.word	0x004d2b25

004005d0 <computeWaveletPitch>:
	float pitchF = 0.0f;
	int32_t i, j;
	float si, si1;
	float power; 
	
	arm_copy_f32(samples, sam, WIN_SIZE); 
  4005d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4005d4:	4995      	ldr	r1, [pc, #596]	; (40082c <computeWaveletPitch+0x25c>)
  4005d6:	4b96      	ldr	r3, [pc, #600]	; (400830 <computeWaveletPitch+0x260>)
	
	return pitchF;
}

float computeWaveletPitch(float * samples)
{
  4005d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int32_t curSamNb = WIN_SIZE;
  4005dc:	4692      	mov	sl, r2
	int32_t curLevel = 0;
  4005de:	2400      	movs	r4, #0
		memset(distances, 0, WIN_SIZE*sizeof(int32_t));
  4005e0:	f8df b268 	ldr.w	fp, [pc, #616]	; 40084c <computeWaveletPitch+0x27c>
{
  4005e4:	ed2d 8b04 	vpush	{d8-d9}
  4005e8:	b087      	sub	sp, #28
	float curModeDistance = -1.0f;
  4005ea:	eeff 9a00 	vmov.f32	s19, #240	; 0xbf800000 -1.0
	arm_copy_f32(samples, sam, WIN_SIZE); 
  4005ee:	4798      	blx	r3
		arm_max_f32(sam, WIN_SIZE, &maxValue, &temp_idx); 
  4005f0:	4651      	mov	r1, sl
  4005f2:	ab03      	add	r3, sp, #12
  4005f4:	aa04      	add	r2, sp, #16
  4005f6:	488d      	ldr	r0, [pc, #564]	; (40082c <computeWaveletPitch+0x25c>)
	int32_t curLevel = 0;
  4005f8:	9400      	str	r4, [sp, #0]
		arm_max_f32(sam, WIN_SIZE, &maxValue, &temp_idx); 
  4005fa:	4c8e      	ldr	r4, [pc, #568]	; (400834 <computeWaveletPitch+0x264>)
  4005fc:	47a0      	blx	r4
		arm_min_f32(sam, WIN_SIZE, &minValue, &temp_idx); 
  4005fe:	ab03      	add	r3, sp, #12
  400600:	aa05      	add	r2, sp, #20
  400602:	4651      	mov	r1, sl
  400604:	4889      	ldr	r0, [pc, #548]	; (40082c <computeWaveletPitch+0x25c>)
  400606:	4c8c      	ldr	r4, [pc, #560]	; (400838 <computeWaveletPitch+0x268>)
  400608:	47a0      	blx	r4
		float amplitudeMax = (maxValue > -minValue ? maxValue : -minValue);
  40060a:	ed9d 9a05 	vldr	s18, [sp, #20]
		ampltitudeThreshold = amplitudeMax*maximaThresholdRatio;		
  40060e:	eef6 7a08 	vmov.f32	s15, #104	; 0x3f400000  0.750
		float amplitudeMax = (maxValue > -minValue ? maxValue : -minValue);
  400612:	ed9d 7a04 	vldr	s14, [sp, #16]
  400616:	eeb1 9a49 	vneg.f32	s18, s18
	int32_t res = 1, j;
  40061a:	2301      	movs	r3, #1
		delta = DYW_SAMPLING_RATE/(_2power(curLevel)*maxF);
  40061c:	eddf 8a87 	vldr	s17, [pc, #540]	; 40083c <computeWaveletPitch+0x26c>
		if (curSamNb < 2) return pitchF;
  400620:	ed9f 8a87 	vldr	s16, [pc, #540]	; 400840 <computeWaveletPitch+0x270>
		float amplitudeMax = (maxValue > -minValue ? maxValue : -minValue);
  400624:	fe89 9a07 	vmaxnm.f32	s18, s18, s14
		ampltitudeThreshold = amplitudeMax*maximaThresholdRatio;		
  400628:	ee29 9a27 	vmul.f32	s18, s18, s15
		delta = DYW_SAMPLING_RATE/(_2power(curLevel)*maxF);
  40062c:	ee07 3a90 	vmov	s15, r3
		if (curSamNb < 2) return pitchF;
  400630:	f1ba 0f01 	cmp.w	sl, #1
		delta = DYW_SAMPLING_RATE/(_2power(curLevel)*maxF);
  400634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400638:	ee88 7aa7 	vdiv.f32	s14, s17, s15
  40063c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
  400640:	ee17 4a90 	vmov	r4, s15
		if (curSamNb < 2) return pitchF;
  400644:	f340 8284 	ble.w	400b50 <computeWaveletPitch+0x580>
  400648:	f1ba 0f03 	cmp.w	sl, #3
  40064c:	f340 826b 	ble.w	400b26 <computeWaveletPitch+0x556>
  400650:	f1aa 0e04 	sub.w	lr, sl, #4
  400654:	4b75      	ldr	r3, [pc, #468]	; (40082c <computeWaveletPitch+0x25c>)
  400656:	2000      	movs	r0, #0
  400658:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 400850 <computeWaveletPitch+0x280>
  40065c:	f02e 0e01 	bic.w	lr, lr, #1
  400660:	4619      	mov	r1, r3
  400662:	9301      	str	r3, [sp, #4]
  400664:	4602      	mov	r2, r0
  400666:	edd3 7a00 	vldr	s15, [r3]
  40066a:	f10e 0e03 	add.w	lr, lr, #3
  40066e:	4606      	mov	r6, r0
  400670:	4605      	mov	r5, r0
  400672:	46c4      	mov	ip, r8
  400674:	eeb0 7a48 	vmov.f32	s14, s16
  400678:	2301      	movs	r3, #1
  40067a:	e050      	b.n	40071e <computeWaveletPitch+0x14e>
						if (i -1 > lastmaxIndex + delta) 
  40067c:	2201      	movs	r2, #1
			si = sam[i]; // - theDC;
  40067e:	edd1 7a02 	vldr	s15, [r1, #8]
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
  400682:	eef5 7a40 	vcmp.f32	s15, #0.0
  400686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40068a:	dd06      	ble.n	40069a <computeWaveletPitch+0xca>
  40068c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400694:	d801      	bhi.n	40069a <computeWaveletPitch+0xca>
  400696:	2000      	movs	r0, #0
  400698:	2201      	movs	r2, #1
			if (si1 >= 0 && si < 0) {findMin = 1; findMax = 0; }
  40069a:	eef5 7a40 	vcmp.f32	s15, #0.0
  40069e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006a2:	d506      	bpl.n	4006b2 <computeWaveletPitch+0xe2>
  4006a4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  4006a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006ac:	db01      	blt.n	4006b2 <computeWaveletPitch+0xe2>
  4006ae:	2001      	movs	r0, #1
  4006b0:	2200      	movs	r2, #0
			if (previousDV > -1000.0f) 
  4006b2:	eeb4 6ac8 	vcmpe.f32	s12, s16
			dv = si - si1;
  4006b6:	ee37 7ae6 	vsub.f32	s14, s15, s13
			if (previousDV > -1000.0f) 
  4006ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006be:	dd2a      	ble.n	400716 <computeWaveletPitch+0x146>
				if (findMin && previousDV < 0.0f && dv >= 0.0f) 
  4006c0:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
  4006c4:	f000 0701 	and.w	r7, r0, #1
  4006c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006cc:	bf58      	it	pl
  4006ce:	2700      	movpl	r7, #0
  4006d0:	b1af      	cbz	r7, 4006fe <computeWaveletPitch+0x12e>
  4006d2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  4006d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006da:	db10      	blt.n	4006fe <computeWaveletPitch+0x12e>
					if (Abs(si1) >= ampltitudeThreshold) 
  4006dc:	eef0 5ae6 	vabs.f32	s11, s13
  4006e0:	eeb4 9ae5 	vcmpe.f32	s18, s11
  4006e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006e8:	d809      	bhi.n	4006fe <computeWaveletPitch+0x12e>
						if (i - 1 > lastMinIndex + delta)
  4006ea:	eb04 070c 	add.w	r7, r4, ip
  4006ee:	429f      	cmp	r7, r3
  4006f0:	da05      	bge.n	4006fe <computeWaveletPitch+0x12e>
							mins[nbMins++] = i - 1;
  4006f2:	4854      	ldr	r0, [pc, #336]	; (400844 <computeWaveletPitch+0x274>)
  4006f4:	469c      	mov	ip, r3
  4006f6:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
  4006fa:	3501      	adds	r5, #1
							findMin = 0;
  4006fc:	2000      	movs	r0, #0
				if (findMax && previousDV > 0.0f && dv <= 0.0f) 
  4006fe:	eeb5 6a40 	vcmp.f32	s12, #0.0
  400702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400706:	dd06      	ble.n	400716 <computeWaveletPitch+0x146>
  400708:	b12a      	cbz	r2, 400716 <computeWaveletPitch+0x146>
  40070a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  40070e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400712:	d96b      	bls.n	4007ec <computeWaveletPitch+0x21c>
						if (i -1 > lastmaxIndex + delta) 
  400714:	2201      	movs	r2, #1
  400716:	3302      	adds	r3, #2
  400718:	3108      	adds	r1, #8
  40071a:	4573      	cmp	r3, lr
  40071c:	d07b      	beq.n	400816 <computeWaveletPitch+0x246>
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
  40071e:	eef5 7a40 	vcmp.f32	s15, #0.0
			si = sam[i]; // - theDC;
  400722:	edd1 6a01 	vldr	s13, [r1, #4]
  400726:	1e5f      	subs	r7, r3, #1
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
  400728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40072c:	d806      	bhi.n	40073c <computeWaveletPitch+0x16c>
  40072e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400736:	dd01      	ble.n	40073c <computeWaveletPitch+0x16c>
  400738:	2000      	movs	r0, #0
  40073a:	2201      	movs	r2, #1
			if (si1 >= 0 && si < 0) {findMin = 1; findMax = 0; }
  40073c:	eef5 7a40 	vcmp.f32	s15, #0.0
  400740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400744:	db06      	blt.n	400754 <computeWaveletPitch+0x184>
  400746:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  40074a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40074e:	d501      	bpl.n	400754 <computeWaveletPitch+0x184>
  400750:	2001      	movs	r0, #1
  400752:	2200      	movs	r2, #0
			if (previousDV > -1000.0f) 
  400754:	eeb4 7ac8 	vcmpe.f32	s14, s16
			dv = si - si1;
  400758:	ee36 6ae7 	vsub.f32	s12, s13, s15
			if (previousDV > -1000.0f) 
  40075c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400760:	dd8d      	ble.n	40067e <computeWaveletPitch+0xae>
				if (findMin && previousDV < 0.0f && dv >= 0.0f) 
  400762:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  400766:	f000 0901 	and.w	r9, r0, #1
  40076a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40076e:	bf58      	it	pl
  400770:	f04f 0900 	movpl.w	r9, #0
  400774:	f1b9 0f00 	cmp.w	r9, #0
  400778:	d015      	beq.n	4007a6 <computeWaveletPitch+0x1d6>
  40077a:	eeb5 6a40 	vcmp.f32	s12, #0.0
  40077e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400782:	db10      	blt.n	4007a6 <computeWaveletPitch+0x1d6>
					if (Abs(si1) >= ampltitudeThreshold) 
  400784:	eef0 5ae7 	vabs.f32	s11, s15
  400788:	eeb4 9ae5 	vcmpe.f32	s18, s11
  40078c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400790:	d809      	bhi.n	4007a6 <computeWaveletPitch+0x1d6>
						if (i - 1 > lastMinIndex + delta)
  400792:	eb04 090c 	add.w	r9, r4, ip
  400796:	45b9      	cmp	r9, r7
  400798:	da05      	bge.n	4007a6 <computeWaveletPitch+0x1d6>
							mins[nbMins++] = i - 1;
  40079a:	482a      	ldr	r0, [pc, #168]	; (400844 <computeWaveletPitch+0x274>)
  40079c:	46bc      	mov	ip, r7
  40079e:	f840 7025 	str.w	r7, [r0, r5, lsl #2]
  4007a2:	3501      	adds	r5, #1
							findMin = 0;
  4007a4:	2000      	movs	r0, #0
				if (findMax && previousDV > 0.0f && dv <= 0.0f) 
  4007a6:	eeb5 7a40 	vcmp.f32	s14, #0.0
  4007aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4007ae:	f77f af66 	ble.w	40067e <computeWaveletPitch+0xae>
  4007b2:	2a00      	cmp	r2, #0
  4007b4:	f43f af63 	beq.w	40067e <computeWaveletPitch+0xae>
  4007b8:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
  4007bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4007c0:	f63f af5c 	bhi.w	40067c <computeWaveletPitch+0xac>
					if (Abs(si1) >= ampltitudeThreshold) 
  4007c4:	eef0 7ae7 	vabs.f32	s15, s15
  4007c8:	eeb4 9ae7 	vcmpe.f32	s18, s15
  4007cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4007d0:	f63f af54 	bhi.w	40067c <computeWaveletPitch+0xac>
						if (i -1 > lastmaxIndex + delta) 
  4007d4:	eb04 0208 	add.w	r2, r4, r8
  4007d8:	42ba      	cmp	r2, r7
  4007da:	f6bf af4f 	bge.w	40067c <computeWaveletPitch+0xac>
							maxs[nbMaxs++] = i - 1;
  4007de:	4a1a      	ldr	r2, [pc, #104]	; (400848 <computeWaveletPitch+0x278>)
  4007e0:	46b8      	mov	r8, r7
  4007e2:	f842 7026 	str.w	r7, [r2, r6, lsl #2]
  4007e6:	3601      	adds	r6, #1
							findMax = 0;
  4007e8:	2200      	movs	r2, #0
  4007ea:	e748      	b.n	40067e <computeWaveletPitch+0xae>
					if (Abs(si1) >= ampltitudeThreshold) 
  4007ec:	eef0 6ae6 	vabs.f32	s13, s13
  4007f0:	eeb4 9ae6 	vcmpe.f32	s18, s13
  4007f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4007f8:	d88c      	bhi.n	400714 <computeWaveletPitch+0x144>
						if (i -1 > lastmaxIndex + delta) 
  4007fa:	eb04 0208 	add.w	r2, r4, r8
  4007fe:	429a      	cmp	r2, r3
  400800:	da88      	bge.n	400714 <computeWaveletPitch+0x144>
							maxs[nbMaxs++] = i - 1;
  400802:	4a11      	ldr	r2, [pc, #68]	; (400848 <computeWaveletPitch+0x278>)
  400804:	4698      	mov	r8, r3
  400806:	3108      	adds	r1, #8
  400808:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  40080c:	3302      	adds	r3, #2
  40080e:	3601      	adds	r6, #1
							findMax = 0;
  400810:	2200      	movs	r2, #0
  400812:	4573      	cmp	r3, lr
  400814:	d183      	bne.n	40071e <computeWaveletPitch+0x14e>
  400816:	9f01      	ldr	r7, [sp, #4]
  400818:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
							mins[nbMins++] = i - 1;
  40081c:	f8df 9024 	ldr.w	r9, [pc, #36]	; 400844 <computeWaveletPitch+0x274>
  400820:	46a6      	mov	lr, r4
  400822:	4419      	add	r1, r3
  400824:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  400828:	e01a      	b.n	400860 <computeWaveletPitch+0x290>
  40082a:	bf00      	nop
  40082c:	20405400 	.word	0x20405400
  400830:	00402edd 	.word	0x00402edd
  400834:	00403079 	.word	0x00403079
  400838:	00402f9d 	.word	0x00402f9d
  40083c:	41780419 	.word	0x41780419
  400840:	c47a0000 	.word	0xc47a0000
  400844:	20404400 	.word	0x20404400
  400848:	20403400 	.word	0x20403400
  40084c:	20402400 	.word	0x20402400
  400850:	fff0bdc0 	.word	0xfff0bdc0
						if (i -1 > lastmaxIndex + delta) 
  400854:	2201      	movs	r2, #1
		for (i = 1; i < curSamNb; i++) 
  400856:	3301      	adds	r3, #1
			dv = si - si1;
  400858:	eeb0 7a67 	vmov.f32	s14, s15
		for (i = 1; i < curSamNb; i++) 
  40085c:	459a      	cmp	sl, r3
  40085e:	dd65      	ble.n	40092c <computeWaveletPitch+0x35c>
			si = sam[i]; // - theDC;
  400860:	edd1 7a01 	vldr	s15, [r1, #4]
  400864:	1e5f      	subs	r7, r3, #1
			si1 = sam[i-1]; // - theDC;
  400866:	ecf1 6a01 	vldmia	r1!, {s13}
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
  40086a:	eef5 7a40 	vcmp.f32	s15, #0.0
  40086e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400872:	dd06      	ble.n	400882 <computeWaveletPitch+0x2b2>
  400874:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40087c:	d801      	bhi.n	400882 <computeWaveletPitch+0x2b2>
  40087e:	2000      	movs	r0, #0
  400880:	2201      	movs	r2, #1
			if (si1 >= 0 && si < 0) {findMin = 1; findMax = 0; }
  400882:	eef5 7a40 	vcmp.f32	s15, #0.0
  400886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40088a:	d506      	bpl.n	40089a <computeWaveletPitch+0x2ca>
  40088c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400894:	db01      	blt.n	40089a <computeWaveletPitch+0x2ca>
  400896:	2001      	movs	r0, #1
  400898:	2200      	movs	r2, #0
			if (previousDV > -1000.0f) 
  40089a:	eeb4 7ac8 	vcmpe.f32	s14, s16
			dv = si - si1;
  40089e:	ee77 7ae6 	vsub.f32	s15, s15, s13
			if (previousDV > -1000.0f) 
  4008a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008a6:	ddd6      	ble.n	400856 <computeWaveletPitch+0x286>
				if (findMin && previousDV < 0.0f && dv >= 0.0f) 
  4008a8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  4008ac:	f000 0401 	and.w	r4, r0, #1
  4008b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008b4:	bf58      	it	pl
  4008b6:	2400      	movpl	r4, #0
  4008b8:	b1a4      	cbz	r4, 4008e4 <computeWaveletPitch+0x314>
  4008ba:	eef5 7a40 	vcmp.f32	s15, #0.0
  4008be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008c2:	db0f      	blt.n	4008e4 <computeWaveletPitch+0x314>
					if (Abs(si1) >= ampltitudeThreshold) 
  4008c4:	eeb0 6ae6 	vabs.f32	s12, s13
  4008c8:	eeb4 9ac6 	vcmpe.f32	s18, s12
  4008cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008d0:	d808      	bhi.n	4008e4 <computeWaveletPitch+0x314>
						if (i - 1 > lastMinIndex + delta)
  4008d2:	eb0e 040c 	add.w	r4, lr, ip
  4008d6:	42bc      	cmp	r4, r7
  4008d8:	da04      	bge.n	4008e4 <computeWaveletPitch+0x314>
							mins[nbMins++] = i - 1;
  4008da:	f849 7025 	str.w	r7, [r9, r5, lsl #2]
  4008de:	46bc      	mov	ip, r7
  4008e0:	3501      	adds	r5, #1
							findMin = 0;
  4008e2:	2000      	movs	r0, #0
				if (findMax && previousDV > 0.0f && dv <= 0.0f) 
  4008e4:	eeb5 7a40 	vcmp.f32	s14, #0.0
  4008e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008ec:	ddb3      	ble.n	400856 <computeWaveletPitch+0x286>
  4008ee:	2a00      	cmp	r2, #0
  4008f0:	d0b1      	beq.n	400856 <computeWaveletPitch+0x286>
  4008f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  4008f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008fa:	d8ab      	bhi.n	400854 <computeWaveletPitch+0x284>
					if (Abs(si1) >= ampltitudeThreshold) 
  4008fc:	eef0 6ae6 	vabs.f32	s13, s13
  400900:	eeb4 9ae6 	vcmpe.f32	s18, s13
  400904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400908:	d8a4      	bhi.n	400854 <computeWaveletPitch+0x284>
						if (i -1 > lastmaxIndex + delta) 
  40090a:	eb0e 0208 	add.w	r2, lr, r8
  40090e:	42ba      	cmp	r2, r7
  400910:	daa0      	bge.n	400854 <computeWaveletPitch+0x284>
		for (i = 1; i < curSamNb; i++) 
  400912:	3301      	adds	r3, #1
							maxs[nbMaxs++] = i - 1;
  400914:	4acf      	ldr	r2, [pc, #828]	; (400c54 <computeWaveletPitch+0x684>)
  400916:	46b8      	mov	r8, r7
			dv = si - si1;
  400918:	eeb0 7a67 	vmov.f32	s14, s15
		for (i = 1; i < curSamNb; i++) 
  40091c:	459a      	cmp	sl, r3
							maxs[nbMaxs++] = i - 1;
  40091e:	f842 7026 	str.w	r7, [r2, r6, lsl #2]
  400922:	f106 0601 	add.w	r6, r6, #1
							findMax = 0;
  400926:	f04f 0200 	mov.w	r2, #0
		for (i = 1; i < curSamNb; i++) 
  40092a:	dc99      	bgt.n	400860 <computeWaveletPitch+0x290>
  40092c:	4674      	mov	r4, lr
		if (nbMins == 0 && nbMaxs == 0) 
  40092e:	b915      	cbnz	r5, 400936 <computeWaveletPitch+0x366>
  400930:	2e00      	cmp	r6, #0
  400932:	f000 810d 	beq.w	400b50 <computeWaveletPitch+0x580>
		memset(distances, 0, WIN_SIZE*sizeof(int32_t));
  400936:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40093a:	2100      	movs	r1, #0
  40093c:	4658      	mov	r0, fp
  40093e:	4bc6      	ldr	r3, [pc, #792]	; (400c58 <computeWaveletPitch+0x688>)
  400940:	4798      	blx	r3
		for (i = 0 ; i < nbMins ; i++) 
  400942:	b34d      	cbz	r5, 400998 <computeWaveletPitch+0x3c8>
  400944:	f8df e32c 	ldr.w	lr, [pc, #812]	; 400c74 <computeWaveletPitch+0x6a4>
  400948:	2202      	movs	r2, #2
  40094a:	2700      	movs	r7, #0
  40094c:	4671      	mov	r1, lr
  40094e:	e012      	b.n	400976 <computeWaveletPitch+0x3a6>
					d = Abs(mins[i] - mins[i+j]);
  400950:	f8d1 c000 	ldr.w	ip, [r1]
  400954:	684b      	ldr	r3, [r1, #4]
  400956:	ebac 0303 	sub.w	r3, ip, r3
  40095a:	2b00      	cmp	r3, #0
  40095c:	bfb8      	it	lt
  40095e:	425b      	neglt	r3, r3
				if (i+j < nbMins) 
  400960:	42aa      	cmp	r2, r5
					distances[d]++; 
  400962:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
  400966:	f100 0001 	add.w	r0, r0, #1
  40096a:	f84b 0023 	str.w	r0, [fp, r3, lsl #2]
				if (i+j < nbMins) 
  40096e:	f2c0 80cc 	blt.w	400b0a <computeWaveletPitch+0x53a>
  400972:	3104      	adds	r1, #4
  400974:	3201      	adds	r2, #1
  400976:	3701      	adds	r7, #1
  400978:	42af      	cmp	r7, r5
  40097a:	dbe9      	blt.n	400950 <computeWaveletPitch+0x380>
  40097c:	42aa      	cmp	r2, r5
  40097e:	da0b      	bge.n	400998 <computeWaveletPitch+0x3c8>
					d = Abs(mins[i] - mins[i+j]);
  400980:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
  400984:	680b      	ldr	r3, [r1, #0]
  400986:	1a9b      	subs	r3, r3, r2
  400988:	2b00      	cmp	r3, #0
  40098a:	bfb8      	it	lt
  40098c:	425b      	neglt	r3, r3
					distances[d]++; 
  40098e:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
  400992:	3201      	adds	r2, #1
  400994:	f84b 2023 	str.w	r2, [fp, r3, lsl #2]
		for (i = 0 ; i < nbMaxs ; i++) 
  400998:	b346      	cbz	r6, 4009ec <computeWaveletPitch+0x41c>
  40099a:	4dae      	ldr	r5, [pc, #696]	; (400c54 <computeWaveletPitch+0x684>)
  40099c:	2202      	movs	r2, #2
  40099e:	2700      	movs	r7, #0
  4009a0:	4629      	mov	r1, r5
  4009a2:	e012      	b.n	4009ca <computeWaveletPitch+0x3fa>
					d = Abs(maxs[i] - maxs[i+j]);
  4009a4:	f8d1 e000 	ldr.w	lr, [r1]
  4009a8:	684b      	ldr	r3, [r1, #4]
  4009aa:	ebae 0303 	sub.w	r3, lr, r3
  4009ae:	2b00      	cmp	r3, #0
  4009b0:	bfb8      	it	lt
  4009b2:	425b      	neglt	r3, r3
				if (i+j < nbMaxs) 
  4009b4:	42b2      	cmp	r2, r6
					distances[d]++; 
  4009b6:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
  4009ba:	f100 0001 	add.w	r0, r0, #1
  4009be:	f84b 0023 	str.w	r0, [fp, r3, lsl #2]
				if (i+j < nbMaxs) 
  4009c2:	f2c0 818f 	blt.w	400ce4 <computeWaveletPitch+0x714>
  4009c6:	3104      	adds	r1, #4
  4009c8:	3201      	adds	r2, #1
  4009ca:	3701      	adds	r7, #1
  4009cc:	42b7      	cmp	r7, r6
  4009ce:	dbe9      	blt.n	4009a4 <computeWaveletPitch+0x3d4>
  4009d0:	42b2      	cmp	r2, r6
  4009d2:	da0b      	bge.n	4009ec <computeWaveletPitch+0x41c>
					d = Abs(maxs[i] - maxs[i+j]);
  4009d4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4009d8:	680b      	ldr	r3, [r1, #0]
  4009da:	1a9b      	subs	r3, r3, r2
  4009dc:	2b00      	cmp	r3, #0
  4009de:	bfb8      	it	lt
  4009e0:	425b      	neglt	r3, r3
					distances[d]++; 
  4009e2:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
  4009e6:	3201      	adds	r2, #1
  4009e8:	f84b 2023 	str.w	r2, [fp, r3, lsl #2]
		for (i = 0 ; i < nbMaxs ; i++) 
  4009ec:	f04f 36ff 	mov.w	r6, #4294967295
  4009f0:	f1c4 0e00 	rsb	lr, r4, #0
  4009f4:	2500      	movs	r5, #0
  4009f6:	f104 0c01 	add.w	ip, r4, #1
  4009fa:	4637      	mov	r7, r6
			for (j = -delta ; j <= delta ; j++) 
  4009fc:	4574      	cmp	r4, lr
  4009fe:	f2c0 8082 	blt.w	400b06 <computeWaveletPitch+0x536>
  400a02:	1b2b      	subs	r3, r5, r4
  400a04:	eb0c 0205 	add.w	r2, ip, r5
  400a08:	2100      	movs	r1, #0
				if (i+j >=0 && i+j < curSamNb)
  400a0a:	4553      	cmp	r3, sl
  400a0c:	da04      	bge.n	400a18 <computeWaveletPitch+0x448>
  400a0e:	2b00      	cmp	r3, #0
  400a10:	db02      	blt.n	400a18 <computeWaveletPitch+0x448>
					summed += distances[i+j];
  400a12:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
  400a16:	4401      	add	r1, r0
  400a18:	3301      	adds	r3, #1
			for (j = -delta ; j <= delta ; j++) 
  400a1a:	4293      	cmp	r3, r2
  400a1c:	d1f5      	bne.n	400a0a <computeWaveletPitch+0x43a>
			if (summed == bestValue) 
  400a1e:	42b9      	cmp	r1, r7
  400a20:	d06c      	beq.n	400afc <computeWaveletPitch+0x52c>
			else if (summed > bestValue) 
  400a22:	dd01      	ble.n	400a28 <computeWaveletPitch+0x458>
  400a24:	460f      	mov	r7, r1
  400a26:	462e      	mov	r6, r5
		for (i = 0; i< curSamNb; i++) 
  400a28:	3501      	adds	r5, #1
  400a2a:	4555      	cmp	r5, sl
  400a2c:	d1e6      	bne.n	4009fc <computeWaveletPitch+0x42c>
		for (j = -delta ; j <= delta ; j++) 
  400a2e:	4574      	cmp	r4, lr
  400a30:	f2c0 8087 	blt.w	400b42 <computeWaveletPitch+0x572>
  400a34:	ed9f 7a89 	vldr	s14, [pc, #548]	; 400c5c <computeWaveletPitch+0x68c>
  400a38:	1c62      	adds	r2, r4, #1
  400a3a:	1b33      	subs	r3, r6, r4
  400a3c:	eef0 6a47 	vmov.f32	s13, s14
  400a40:	4416      	add	r6, r2
			if (bestDistance+j >=0 && bestDistance+j < WIN_SIZE) 
  400a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  400a46:	d211      	bcs.n	400a6c <computeWaveletPitch+0x49c>
				int32_t nbDist = distances[bestDistance+j];
  400a48:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
					distAvg += (bestDistance+j)*nbDist;
  400a4c:	fb02 f103 	mul.w	r1, r2, r3
					nbDists += nbDist;
  400a50:	ee06 2a10 	vmov	s12, r2
				if (nbDist > 0) {
  400a54:	2a00      	cmp	r2, #0
					distAvg += (bestDistance+j)*nbDist;
  400a56:	ee07 1a90 	vmov	s15, r1
					nbDists += nbDist;
  400a5a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
					distAvg += (bestDistance+j)*nbDist;
  400a5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (nbDist > 0) {
  400a62:	dd03      	ble.n	400a6c <computeWaveletPitch+0x49c>
					nbDists += nbDist;
  400a64:	ee76 6a86 	vadd.f32	s13, s13, s12
					distAvg += (bestDistance+j)*nbDist;
  400a68:	ee37 7a27 	vadd.f32	s14, s14, s15
  400a6c:	3301      	adds	r3, #1
		for (j = -delta ; j <= delta ; j++) 
  400a6e:	42b3      	cmp	r3, r6
  400a70:	d1e7      	bne.n	400a42 <computeWaveletPitch+0x472>
  400a72:	ee87 6a26 	vdiv.f32	s12, s14, s13
				pitchF = DYW_SAMPLING_RATE/(_2power(curLevel-1)*curModeDistance);
  400a76:	9b00      	ldr	r3, [sp, #0]
		if (curModeDistance > -1.0f) 
  400a78:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  400a7c:	eef4 9ae7 	vcmpe.f32	s19, s15
  400a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400a84:	dd12      	ble.n	400aac <computeWaveletPitch+0x4dc>
			float similarity = Abs(distAvg*2 - curModeDistance);
  400a86:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
			if (similarity <= 2*delta) 
  400a8a:	0064      	lsls	r4, r4, #1
			float similarity = Abs(distAvg*2 - curModeDistance);
  400a8c:	eef0 6a69 	vmov.f32	s13, s19
			if (similarity <= 2*delta) 
  400a90:	ee07 4a90 	vmov	s15, r4
			float similarity = Abs(distAvg*2 - curModeDistance);
  400a94:	eed6 6a07 	vfnms.f32	s13, s12, s14
			if (similarity <= 2*delta) 
  400a98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			float similarity = Abs(distAvg*2 - curModeDistance);
  400a9c:	eeb0 7ae6 	vabs.f32	s14, s13
			if (similarity <= 2*delta) 
  400aa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
  400aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400aa8:	f240 8087 	bls.w	400bba <computeWaveletPitch+0x5ea>
		curLevel = curLevel + 1;
  400aac:	3301      	adds	r3, #1
		if (curLevel >= maxFLWTlevels) 
  400aae:	2b06      	cmp	r3, #6
		curLevel = curLevel + 1;
  400ab0:	9300      	str	r3, [sp, #0]
		if (curLevel >= maxFLWTlevels) 
  400ab2:	d04d      	beq.n	400b50 <computeWaveletPitch+0x580>
  400ab4:	9b01      	ldr	r3, [sp, #4]
		for (i = 0; i < curSamNb/2; i++)
  400ab6:	ea4f 0a6a 	mov.w	sl, sl, asr #1
  400aba:	4a69      	ldr	r2, [pc, #420]	; (400c60 <computeWaveletPitch+0x690>)
			sam[i] = (sam[2*i] + sam[2*i + 1]) * 0.5f;
  400abc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
  400ac0:	eb03 01ca 	add.w	r1, r3, sl, lsl #3
		for (i = 0; i < curSamNb/2; i++)
  400ac4:	4613      	mov	r3, r2
			sam[i] = (sam[2*i] + sam[2*i + 1]) * 0.5f;
  400ac6:	ed93 7a00 	vldr	s14, [r3]
  400aca:	3308      	adds	r3, #8
  400acc:	ed53 7a01 	vldr	s15, [r3, #-4]
		for (i = 0; i < curSamNb/2; i++)
  400ad0:	428b      	cmp	r3, r1
			sam[i] = (sam[2*i] + sam[2*i + 1]) * 0.5f;
  400ad2:	ee77 7a27 	vadd.f32	s15, s14, s15
  400ad6:	ee67 7aa6 	vmul.f32	s15, s15, s13
  400ada:	ece2 7a01 	vstmia	r2!, {s15}
		for (i = 0; i < curSamNb/2; i++)
  400ade:	d1f2      	bne.n	400ac6 <computeWaveletPitch+0x4f6>
	for (j = 0; j < i; j++) res <<= 1;
  400ae0:	9b00      	ldr	r3, [sp, #0]
  400ae2:	2b01      	cmp	r3, #1
  400ae4:	d057      	beq.n	400b96 <computeWaveletPitch+0x5c6>
  400ae6:	2b02      	cmp	r3, #2
  400ae8:	d030      	beq.n	400b4c <computeWaveletPitch+0x57c>
  400aea:	2b03      	cmp	r3, #3
  400aec:	d02c      	beq.n	400b48 <computeWaveletPitch+0x578>
  400aee:	2b05      	cmp	r3, #5
  400af0:	bf0c      	ite	eq
  400af2:	2320      	moveq	r3, #32
  400af4:	2310      	movne	r3, #16
		curModeDistance = distAvg;
  400af6:	eef0 9a46 	vmov.f32	s19, s12
  400afa:	e597      	b.n	40062c <computeWaveletPitch+0x5c>
				if (i == 2*bestDistance)
  400afc:	ebb5 0f46 	cmp.w	r5, r6, lsl #1
  400b00:	bf08      	it	eq
  400b02:	462e      	moveq	r6, r5
  400b04:	e790      	b.n	400a28 <computeWaveletPitch+0x458>
			int32_t summed = 0;
  400b06:	2100      	movs	r1, #0
  400b08:	e789      	b.n	400a1e <computeWaveletPitch+0x44e>
					d = Abs(mins[i] - mins[i+j]);
  400b0a:	f85e 3022 	ldr.w	r3, [lr, r2, lsl #2]
  400b0e:	ebac 0303 	sub.w	r3, ip, r3
  400b12:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
  400b16:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
					distances[d]++; 
  400b1a:	f85b 3020 	ldr.w	r3, [fp, r0, lsl #2]
  400b1e:	3301      	adds	r3, #1
  400b20:	f84b 3020 	str.w	r3, [fp, r0, lsl #2]
  400b24:	e725      	b.n	400972 <computeWaveletPitch+0x3a2>
		if (curSamNb < 2) return pitchF;
  400b26:	2000      	movs	r0, #0
  400b28:	494d      	ldr	r1, [pc, #308]	; (400c60 <computeWaveletPitch+0x690>)
  400b2a:	f8df 814c 	ldr.w	r8, [pc, #332]	; 400c78 <computeWaveletPitch+0x6a8>
  400b2e:	eeb0 7a48 	vmov.f32	s14, s16
  400b32:	2301      	movs	r3, #1
  400b34:	4602      	mov	r2, r0
  400b36:	4606      	mov	r6, r0
  400b38:	4605      	mov	r5, r0
  400b3a:	46c4      	mov	ip, r8
  400b3c:	9101      	str	r1, [sp, #4]
  400b3e:	460f      	mov	r7, r1
  400b40:	e66a      	b.n	400818 <computeWaveletPitch+0x248>
		for (j = -delta ; j <= delta ; j++) 
  400b42:	ed9f 6a48 	vldr	s12, [pc, #288]	; 400c64 <computeWaveletPitch+0x694>
  400b46:	e796      	b.n	400a76 <computeWaveletPitch+0x4a6>
	for (j = 0; j < i; j++) res <<= 1;
  400b48:	2308      	movs	r3, #8
  400b4a:	e7d4      	b.n	400af6 <computeWaveletPitch+0x526>
  400b4c:	2304      	movs	r3, #4
  400b4e:	e7d2      	b.n	400af6 <computeWaveletPitch+0x526>
		if (pitchtracker._prevPitch > -1.0f) 
  400b50:	4a45      	ldr	r2, [pc, #276]	; (400c68 <computeWaveletPitch+0x698>)
  400b52:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  400b56:	edd2 7a00 	vldr	s15, [r2]
  400b5a:	eef4 7ac7 	vcmpe.f32	s15, s14
  400b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400b62:	dd1a      	ble.n	400b9a <computeWaveletPitch+0x5ca>
			if (pitchtracker._pitchConfidence >= 1) 
  400b64:	6853      	ldr	r3, [r2, #4]
  400b66:	2b00      	cmp	r3, #0
  400b68:	dd20      	ble.n	400bac <computeWaveletPitch+0x5dc>
				pitchtracker._pitchConfidence = Max(0, pitchtracker._pitchConfidence - 1);
  400b6a:	3b01      	subs	r3, #1
  400b6c:	6053      	str	r3, [r2, #4]
	if (pitchtracker._pitchConfidence >= 1) 
  400b6e:	2b00      	cmp	r3, #0
  400b70:	dd13      	ble.n	400b9a <computeWaveletPitch+0x5ca>
	if (pitch < -1.0f) pitch = 0.0f;
  400b72:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
  400b76:	ed9f 7a39 	vldr	s14, [pc, #228]	; 400c5c <computeWaveletPitch+0x68c>
  400b7a:	eef4 7a66 	vcmp.f32	s15, s13
  400b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400b82:	bf48      	it	mi
  400b84:	eef0 7a47 	vmovmi.f32	s15, s14
	return _dywapitch_dynamicprocess(get_raw_pitch(samples)); 
  400b88:	ee17 0a90 	vmov	r0, s15
  400b8c:	b007      	add	sp, #28
  400b8e:	ecbd 8b04 	vpop	{d8-d9}
  400b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (j = 0; j < i; j++) res <<= 1;
  400b96:	2302      	movs	r3, #2
  400b98:	e7ad      	b.n	400af6 <computeWaveletPitch+0x526>
	float estimatedPitch = -1.0f;
  400b9a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  400b9e:	ee17 0a90 	vmov	r0, s15
  400ba2:	b007      	add	sp, #28
  400ba4:	ecbd 8b04 	vpop	{d8-d9}
  400ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				pitchtracker._pitchConfidence = 0;
  400bac:	2300      	movs	r3, #0
				pitchtracker._prevPitch = -1.0f;
  400bae:	ed82 7a00 	vstr	s14, [r2]
		pitch = -1.0f;
  400bb2:	eef0 7a47 	vmov.f32	s15, s14
				pitchtracker._pitchConfidence = 0;
  400bb6:	6053      	str	r3, [r2, #4]
  400bb8:	e7f1      	b.n	400b9e <computeWaveletPitch+0x5ce>
				pitchF = DYW_SAMPLING_RATE/(_2power(curLevel-1)*curModeDistance);
  400bba:	3b01      	subs	r3, #1
	for (j = 0; j < i; j++) res <<= 1;
  400bbc:	2b00      	cmp	r3, #0
  400bbe:	f340 808e 	ble.w	400cde <computeWaveletPitch+0x70e>
  400bc2:	2b01      	cmp	r3, #1
  400bc4:	f000 809e 	beq.w	400d04 <computeWaveletPitch+0x734>
  400bc8:	2b02      	cmp	r3, #2
  400bca:	f000 8099 	beq.w	400d00 <computeWaveletPitch+0x730>
  400bce:	2b04      	cmp	r3, #4
  400bd0:	bf0c      	ite	eq
  400bd2:	2310      	moveq	r3, #16
  400bd4:	2308      	movne	r3, #8
  400bd6:	ee07 3a90 	vmov	s15, r3
  400bda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				pitchF = DYW_SAMPLING_RATE/(_2power(curLevel-1)*curModeDistance);
  400bde:	ee69 9aa7 	vmul.f32	s19, s19, s15
  400be2:	eddf 6a22 	vldr	s13, [pc, #136]	; 400c6c <computeWaveletPitch+0x69c>
	if (pitch < 1.0f) pitch = -1.0f;
  400be6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
				pitchF = DYW_SAMPLING_RATE/(_2power(curLevel-1)*curModeDistance);
  400bea:	eec6 7aa9 	vdiv.f32	s15, s13, s19
	if (pitch < 1.0f) pitch = -1.0f;
  400bee:	eef4 7ac7 	vcmpe.f32	s15, s14
  400bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400bf6:	d4ab      	bmi.n	400b50 <computeWaveletPitch+0x580>
	if (pitch > -1.0) {
  400bf8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  400bfc:	eef4 7ac7 	vcmpe.f32	s15, s14
  400c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400c04:	dda4      	ble.n	400b50 <computeWaveletPitch+0x580>
		if (pitchtracker._prevPitch < 0.0f) 
  400c06:	4a18      	ldr	r2, [pc, #96]	; (400c68 <computeWaveletPitch+0x698>)
  400c08:	edd2 6a00 	vldr	s13, [r2]
  400c0c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400c14:	d43a      	bmi.n	400c8c <computeWaveletPitch+0x6bc>
		else if (abs(pitchtracker._prevPitch - pitch)/pitch < acceptedError) 
  400c16:	ee36 7ae7 	vsub.f32	s14, s13, s15
  400c1a:	ed9f 6a15 	vldr	s12, [pc, #84]	; 400c70 <computeWaveletPitch+0x6a0>
  400c1e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  400c22:	ee17 3a10 	vmov	r3, s14
  400c26:	2b00      	cmp	r3, #0
  400c28:	bfb8      	it	lt
  400c2a:	425b      	neglt	r3, r3
  400c2c:	ee07 3a10 	vmov	s14, r3
			pitchtracker._pitchConfidence = Min(maxConfidence, pitchtracker._pitchConfidence + 1); // maximum 3
  400c30:	6853      	ldr	r3, [r2, #4]
		else if (abs(pitchtracker._prevPitch - pitch)/pitch < acceptedError) 
  400c32:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  400c36:	eec7 5a27 	vdiv.f32	s11, s14, s15
  400c3a:	eef4 5ac6 	vcmpe.f32	s11, s12
  400c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400c42:	d51b      	bpl.n	400c7c <computeWaveletPitch+0x6ac>
			pitchtracker._pitchConfidence = Min(maxConfidence, pitchtracker._pitchConfidence + 1); // maximum 3
  400c44:	2b04      	cmp	r3, #4
			pitchtracker._prevPitch = pitch;
  400c46:	edc2 7a00 	vstr	s15, [r2]
			pitchtracker._pitchConfidence = Min(maxConfidence, pitchtracker._pitchConfidence + 1); // maximum 3
  400c4a:	bfd4      	ite	le
  400c4c:	3301      	addle	r3, #1
  400c4e:	2305      	movgt	r3, #5
				pitchtracker._pitchConfidence = max(0, pitchtracker._pitchConfidence - 1);
  400c50:	6053      	str	r3, [r2, #4]
  400c52:	e78c      	b.n	400b6e <computeWaveletPitch+0x59e>
  400c54:	20403400 	.word	0x20403400
  400c58:	00404199 	.word	0x00404199
  400c5c:	00000000 	.word	0x00000000
  400c60:	20405400 	.word	0x20405400
  400c64:	7fc00000 	.word	0x7fc00000
  400c68:	20400020 	.word	0x20400020
  400c6c:	4735a700 	.word	0x4735a700
  400c70:	3e4ccccd 	.word	0x3e4ccccd
  400c74:	20404400 	.word	0x20404400
  400c78:	fff0bdc0 	.word	0xfff0bdc0
		else if ((pitchtracker._pitchConfidence >= maxConfidence-2) && Abs(pitchtracker._prevPitch - 2.0f*pitch)/(2.0f*pitch) < acceptedError) 
  400c7c:	2b02      	cmp	r3, #2
  400c7e:	dc0a      	bgt.n	400c96 <computeWaveletPitch+0x6c6>
			if (pitchtracker._pitchConfidence >= 1) 
  400c80:	2b00      	cmp	r3, #0
  400c82:	dd03      	ble.n	400c8c <computeWaveletPitch+0x6bc>
				pitchtracker._pitchConfidence = max(0, pitchtracker._pitchConfidence - 1);
  400c84:	3b01      	subs	r3, #1
				estimatedPitch = pitchtracker._prevPitch;
  400c86:	eef0 7a66 	vmov.f32	s15, s13
  400c8a:	e7e1      	b.n	400c50 <computeWaveletPitch+0x680>
				pitchtracker._pitchConfidence = 1;
  400c8c:	2301      	movs	r3, #1
				pitchtracker._prevPitch = pitch;
  400c8e:	edc2 7a00 	vstr	s15, [r2]
				pitchtracker._pitchConfidence = 1;
  400c92:	6053      	str	r3, [r2, #4]
  400c94:	e76d      	b.n	400b72 <computeWaveletPitch+0x5a2>
		else if ((pitchtracker._pitchConfidence >= maxConfidence-2) && Abs(pitchtracker._prevPitch - 2.0f*pitch)/(2.0f*pitch) < acceptedError) 
  400c96:	ee37 7aa7 	vadd.f32	s14, s15, s15
  400c9a:	ee76 5ac7 	vsub.f32	s11, s13, s14
  400c9e:	eef0 5ae5 	vabs.f32	s11, s11
  400ca2:	ee85 5a87 	vdiv.f32	s10, s11, s14
  400ca6:	eeb4 5ac6 	vcmpe.f32	s10, s12
  400caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400cae:	d504      	bpl.n	400cba <computeWaveletPitch+0x6ea>
			pitchtracker._prevPitch = estimatedPitch;
  400cb0:	ed82 7a00 	vstr	s14, [r2]
			estimatedPitch = 2.0f*pitch;
  400cb4:	eef0 7a47 	vmov.f32	s15, s14
  400cb8:	e75b      	b.n	400b72 <computeWaveletPitch+0x5a2>
		else if ((pitchtracker._pitchConfidence >= maxConfidence-2) && Abs(pitchtracker._prevPitch - 0.5f*pitch)/(0.5f*pitch) < acceptedError) 
  400cba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
  400cbe:	ee67 7a87 	vmul.f32	s15, s15, s14
  400cc2:	ee36 7ae7 	vsub.f32	s14, s13, s15
  400cc6:	eeb0 7ac7 	vabs.f32	s14, s14
  400cca:	eec7 5a27 	vdiv.f32	s11, s14, s15
  400cce:	eef4 5ac6 	vcmpe.f32	s11, s12
  400cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400cd6:	d5d5      	bpl.n	400c84 <computeWaveletPitch+0x6b4>
			pitchtracker._prevPitch = estimatedPitch;
  400cd8:	edc2 7a00 	vstr	s15, [r2]
  400cdc:	e749      	b.n	400b72 <computeWaveletPitch+0x5a2>
	for (j = 0; j < i; j++) res <<= 1;
  400cde:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  400ce2:	e77c      	b.n	400bde <computeWaveletPitch+0x60e>
					d = Abs(maxs[i] - maxs[i+j]);
  400ce4:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
  400ce8:	ebae 0303 	sub.w	r3, lr, r3
  400cec:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
  400cf0:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
					distances[d]++; 
  400cf4:	f85b 3020 	ldr.w	r3, [fp, r0, lsl #2]
  400cf8:	3301      	adds	r3, #1
  400cfa:	f84b 3020 	str.w	r3, [fp, r0, lsl #2]
  400cfe:	e662      	b.n	4009c6 <computeWaveletPitch+0x3f6>
	for (j = 0; j < i; j++) res <<= 1;
  400d00:	2304      	movs	r3, #4
  400d02:	e768      	b.n	400bd6 <computeWaveletPitch+0x606>
  400d04:	2302      	movs	r3, #2
  400d06:	e766      	b.n	400bd6 <computeWaveletPitch+0x606>

00400d08 <PSOLA_init>:
static float prev_pitch_shifts[MAX_NUM_SHIFTS]; 
static float window[10*WIN_SIZE]; // sufficiently large window array  
/************************ Static variables *********************/

void PSOLA_init(void)
{
  400d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	arm_fill_f32(0.0f, input_ring_buffer, RING_BUFFER_SIZE); 
  400d0a:	2600      	movs	r6, #0
  400d0c:	4c19      	ldr	r4, [pc, #100]	; (400d74 <PSOLA_init+0x6c>)
  400d0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  400d12:	4919      	ldr	r1, [pc, #100]	; (400d78 <PSOLA_init+0x70>)
  400d14:	4630      	mov	r0, r6
	arm_fill_f32(0.0f, output_ring_buffer, RING_BUFFER_SIZE);
	arm_fill_f32(0.0f, window, 10*WIN_SIZE); 
	arm_fill_f32(1.0f, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  400d16:	4d19      	ldr	r5, [pc, #100]	; (400d7c <PSOLA_init+0x74>)
	arm_fill_f32(0.0f, input_ring_buffer, RING_BUFFER_SIZE); 
  400d18:	47a0      	blx	r4
	arm_fill_f32(0.0f, output_ring_buffer, RING_BUFFER_SIZE);
  400d1a:	4630      	mov	r0, r6
  400d1c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  400d20:	4917      	ldr	r1, [pc, #92]	; (400d80 <PSOLA_init+0x78>)
  400d22:	47a0      	blx	r4
	arm_fill_f32(0.0f, window, 10*WIN_SIZE); 
  400d24:	4630      	mov	r0, r6
  400d26:	f44f 5220 	mov.w	r2, #10240	; 0x2800
  400d2a:	4916      	ldr	r1, [pc, #88]	; (400d84 <PSOLA_init+0x7c>)
  400d2c:	47a0      	blx	r4
  400d2e:	272c      	movs	r7, #44	; 0x2c
	arm_fill_f32(1.0f, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  400d30:	4629      	mov	r1, r5
  400d32:	220b      	movs	r2, #11
  400d34:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
	prev_pitch_shifts[0] = 1.0f; 
  400d38:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
	arm_fill_f32(1.0f, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  400d3c:	47a0      	blx	r4
	prev_pitch_shifts[1] = -1.0f; 
  400d3e:	4b12      	ldr	r3, [pc, #72]	; (400d88 <PSOLA_init+0x80>)
  400d40:	463a      	mov	r2, r7
  400d42:	4c12      	ldr	r4, [pc, #72]	; (400d8c <PSOLA_init+0x84>)
  400d44:	2100      	movs	r1, #0
  400d46:	4812      	ldr	r0, [pc, #72]	; (400d90 <PSOLA_init+0x88>)
  400d48:	606b      	str	r3, [r5, #4]
	prev_pitch_shifts[0] = 1.0f; 
  400d4a:	602e      	str	r6, [r5, #0]
  400d4c:	47a0      	blx	r4
  400d4e:	463a      	mov	r2, r7
  400d50:	2100      	movs	r1, #0
  400d52:	4810      	ldr	r0, [pc, #64]	; (400d94 <PSOLA_init+0x8c>)
	{
		outPtrList[i] = 0; 
		saved_samplesLeftInPeriod[i] = 0; 
	}
		
	current_num_shifts = 1; // always doing root 
  400d54:	2701      	movs	r7, #1
  400d56:	47a0      	blx	r4
  400d58:	4e0f      	ldr	r6, [pc, #60]	; (400d98 <PSOLA_init+0x90>)
	
	readPos = RING_BUFFER_SIZE - WIN_SIZE; // + WEIRD_OFFSET; 
  400d5a:	4c10      	ldr	r4, [pc, #64]	; (400d9c <PSOLA_init+0x94>)
  400d5c:	f44f 5570 	mov.w	r5, #15360	; 0x3c00
	inPtr = 0; 
  400d60:	490f      	ldr	r1, [pc, #60]	; (400da0 <PSOLA_init+0x98>)
  400d62:	2000      	movs	r0, #0
	inputPeriodLength = PSOLA_SAMPLE_RATE / MINIMUM_PITCH; 
  400d64:	4b0f      	ldr	r3, [pc, #60]	; (400da4 <PSOLA_init+0x9c>)
  400d66:	f240 12d1 	movw	r2, #465	; 0x1d1
	current_num_shifts = 1; // always doing root 
  400d6a:	6037      	str	r7, [r6, #0]
	readPos = RING_BUFFER_SIZE - WIN_SIZE; // + WEIRD_OFFSET; 
  400d6c:	6025      	str	r5, [r4, #0]
	inPtr = 0; 
  400d6e:	6008      	str	r0, [r1, #0]
	inputPeriodLength = PSOLA_SAMPLE_RATE / MINIMUM_PITCH; 
  400d70:	601a      	str	r2, [r3, #0]
  400d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400d74:	00402ead 	.word	0x00402ead
  400d78:	2040640c 	.word	0x2040640c
  400d7c:	20426438 	.word	0x20426438
  400d80:	20416438 	.word	0x20416438
  400d84:	20426494 	.word	0x20426494
  400d88:	bf800000 	.word	0xbf800000
  400d8c:	00404199 	.word	0x00404199
  400d90:	2041640c 	.word	0x2041640c
  400d94:	20426468 	.word	0x20426468
  400d98:	20406400 	.word	0x20406400
  400d9c:	20426464 	.word	0x20426464
  400da0:	20406404 	.word	0x20406404
  400da4:	20406408 	.word	0x20406408

00400da8 <create_harmonies>:
	currentPitch = MINIMUM_PITCH; 
}

// assumes valid pitch shifts 
void create_harmonies(float* input, float *output, float inputPitch, float *pitch_shifts_in, float volume)
{
  400da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400dac:	ed2d 8b06 	vpush	{d8-d10}
  400db0:	b08d      	sub	sp, #52	; 0x34
  400db2:	ee08 2a90 	vmov	s17, r2
  400db6:	4ca2      	ldr	r4, [pc, #648]	; (401040 <create_harmonies+0x298>)
  400db8:	9308      	str	r3, [sp, #32]
	uint32_t i, w; 
	int32_t olaIdx; 
	
	uint32_t saved_inPtr = inPtr; 
  400dba:	4ba2      	ldr	r3, [pc, #648]	; (401044 <create_harmonies+0x29c>)
{
  400dbc:	910b      	str	r1, [sp, #44]	; 0x2c
	uint32_t saved_inPtr = inPtr; 
  400dbe:	681b      	ldr	r3, [r3, #0]
{
  400dc0:	ed9d 8a1c 	vldr	s16, [sp, #112]	; 0x70
	uint32_t outPtr; 
	uint32_t pitch_idx = 0; 
	
	uint32_t starting_input_ptr = inPtr + WIN_SIZE; 
  400dc4:	461a      	mov	r2, r3
	uint32_t saved_inPtr = inPtr; 
  400dc6:	9306      	str	r3, [sp, #24]
	uint32_t starting_input_ptr = inPtr + WIN_SIZE; 
  400dc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  400dcc:	f502 6100 	add.w	r1, r2, #2048	; 0x800
	for (i = 0; i < WIN_SIZE; i++)
	{
		input_ring_buffer[(starting_input_ptr++) & RING_BUFFER_MASK] = input[i]; 
  400dd0:	f3c3 020d 	ubfx	r2, r3, #0, #14
  400dd4:	3301      	adds	r3, #1
  400dd6:	f850 5b04 	ldr.w	r5, [r0], #4
  400dda:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	for (i = 0; i < WIN_SIZE; i++)
  400dde:	428b      	cmp	r3, r1
		input_ring_buffer[(starting_input_ptr++) & RING_BUFFER_MASK] = input[i]; 
  400de0:	6015      	str	r5, [r2, #0]
	for (i = 0; i < WIN_SIZE; i++)
  400de2:	d1f5      	bne.n	400dd0 <create_harmonies+0x28>
	}
		
	uint32_t outLag;
	uint32_t inHalfAway;
	float periodRatio;
	float inputPeriodLengthRecip = 1.0f / inputPeriodLength;
  400de4:	4b98      	ldr	r3, [pc, #608]	; (401048 <create_harmonies+0x2a0>)
  400de6:	f8d3 8000 	ldr.w	r8, [r3]
  400dea:	ee07 8a90 	vmov	s15, r8
	uint32_t samplesLeftInPeriod = 0; 
	
	// pre-compute window function	
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400dee:	f1b8 0f00 	cmp.w	r8, #0
	float inputPeriodLengthRecip = 1.0f / inputPeriodLength;
  400df2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400df6:	dd22      	ble.n	400e3e <create_harmonies+0x96>
  400df8:	ed9f 7a94 	vldr	s14, [pc, #592]	; 40104c <create_harmonies+0x2a4>
	{
		window[w] = (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  400dfc:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
  400e00:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
  400e04:	4e92      	ldr	r6, [pc, #584]	; (401050 <create_harmonies+0x2a8>)
  400e06:	ee87 9a27 	vdiv.f32	s18, s14, s15
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e0a:	2500      	movs	r5, #0
  400e0c:	4f91      	ldr	r7, [pc, #580]	; (401054 <create_harmonies+0x2ac>)
		window[w] = (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  400e0e:	ee07 5a90 	vmov	s15, r5
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e12:	3501      	adds	r5, #1
		window[w] = (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  400e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400e18:	ee67 7a89 	vmul.f32	s15, s15, s18
  400e1c:	ee17 0a90 	vmov	r0, s15
  400e20:	47b8      	blx	r7
  400e22:	ee07 0a90 	vmov	s15, r0
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e26:	4b88      	ldr	r3, [pc, #544]	; (401048 <create_harmonies+0x2a0>)
		window[w] = (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  400e28:	ee7a 7a67 	vsub.f32	s15, s20, s15
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e2c:	681b      	ldr	r3, [r3, #0]
		window[w] = (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  400e2e:	ee67 7aa9 	vmul.f32	s15, s15, s19
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e32:	ebb5 0f43 	cmp.w	r5, r3, lsl #1
		window[w] = (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  400e36:	ece6 7a01 	vstmia	r6!, {s15}
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e3a:	dbe8      	blt.n	400e0e <create_harmonies+0x66>
  400e3c:	4698      	mov	r8, r3
	}
		
	// for each pitch shift 
	while(pitch_shifts_in[pitch_idx] > 0.0f && pitch_idx < MAX_NUM_SHIFTS)
  400e3e:	9908      	ldr	r1, [sp, #32]
  400e40:	ed91 7a00 	vldr	s14, [r1]
  400e44:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  400e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400e4c:	f340 81ef 	ble.w	40122e <create_harmonies+0x486>
  400e50:	4b81      	ldr	r3, [pc, #516]	; (401058 <create_harmonies+0x2b0>)
  400e52:	ee07 8a90 	vmov	s15, r8
		
		if (pitch_idx > current_num_shifts - 1)
		{
			// find closest harmony for the onset of a new harmony 
			float tmp; 
			float min = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[0]); 
  400e56:	4a81      	ldr	r2, [pc, #516]	; (40105c <create_harmonies+0x2b4>)
		periodRatio = 1.0f / pitch_shifts_in[pitch_idx]; 
  400e58:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
  400e5c:	4618      	mov	r0, r3
  400e5e:	9309      	str	r3, [sp, #36]	; 0x24
			outPtr = outPtrList[0]; 
			for (i = 1; i < current_num_shifts; i++)
			{
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400e60:	2300      	movs	r3, #0
  400e62:	eef8 0ae7 	vcvt.f32.s32	s1, s15
  400e66:	6800      	ldr	r0, [r0, #0]
  400e68:	3104      	adds	r1, #4
  400e6a:	469b      	mov	fp, r3
			float min = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[0]); 
  400e6c:	ed92 1a00 	vldr	s2, [r2]
  400e70:	9003      	str	r0, [sp, #12]
  400e72:	3801      	subs	r0, #1
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400e74:	edd2 1a01 	vldr	s3, [r2, #4]
  400e78:	f1c8 0900 	rsb	r9, r8, #0
  400e7c:	900a      	str	r0, [sp, #40]	; 0x28
  400e7e:	ed92 2a02 	vldr	s4, [r2, #8]
  400e82:	4877      	ldr	r0, [pc, #476]	; (401060 <create_harmonies+0x2b8>)
  400e84:	edd2 2a03 	vldr	s5, [r2, #12]
  400e88:	ed92 3a04 	vldr	s6, [r2, #16]
  400e8c:	edd2 3a05 	vldr	s7, [r2, #20]
  400e90:	ed92 4a06 	vldr	s8, [r2, #24]
  400e94:	edd2 4a07 	vldr	s9, [r2, #28]
  400e98:	ed92 5a08 	vldr	s10, [r2, #32]
  400e9c:	edd2 5a09 	vldr	s11, [r2, #36]	; 0x24
  400ea0:	ed92 6a0a 	vldr	s12, [r2, #40]	; 0x28
  400ea4:	4d6f      	ldr	r5, [pc, #444]	; (401064 <create_harmonies+0x2bc>)
  400ea6:	9005      	str	r0, [sp, #20]
  400ea8:	9107      	str	r1, [sp, #28]
		if (pitch_idx > current_num_shifts - 1)
  400eaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
		periodRatio = 1.0f / pitch_shifts_in[pitch_idx]; 
  400eac:	ee80 9a07 	vdiv.f32	s18, s0, s14
		if (pitch_idx > current_num_shifts - 1)
  400eb0:	4593      	cmp	fp, r2
  400eb2:	f240 81b3 	bls.w	40121c <create_harmonies+0x474>
			outPtr = outPtrList[0]; 
  400eb6:	4a6c      	ldr	r2, [pc, #432]	; (401068 <create_harmonies+0x2c0>)
			float min = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[0]); 
  400eb8:	ee77 7a41 	vsub.f32	s15, s14, s2
			outPtr = outPtrList[0]; 
  400ebc:	f8d2 e000 	ldr.w	lr, [r2]
			for (i = 1; i < current_num_shifts; i++)
  400ec0:	9a03      	ldr	r2, [sp, #12]
			float min = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[0]); 
  400ec2:	eef0 7ae7 	vabs.f32	s15, s15
			for (i = 1; i < current_num_shifts; i++)
  400ec6:	2a01      	cmp	r2, #1
  400ec8:	f240 80d0 	bls.w	40106c <create_harmonies+0x2c4>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400ecc:	ee77 6a61 	vsub.f32	s13, s14, s3
  400ed0:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  400ed4:	eef4 7ae6 	vcmpe.f32	s15, s13
  400ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400edc:	dd06      	ble.n	400eec <create_harmonies+0x144>
				{
					outPtr = outPtrList[i]; 
  400ede:	4b62      	ldr	r3, [pc, #392]	; (401068 <create_harmonies+0x2c0>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400ee0:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  400ee4:	f8d3 e004 	ldr.w	lr, [r3, #4]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  400ee8:	4b5d      	ldr	r3, [pc, #372]	; (401060 <create_harmonies+0x2b8>)
  400eea:	685b      	ldr	r3, [r3, #4]
			for (i = 1; i < current_num_shifts; i++)
  400eec:	2a02      	cmp	r2, #2
  400eee:	f000 80bd 	beq.w	40106c <create_harmonies+0x2c4>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400ef2:	ee77 6a42 	vsub.f32	s13, s14, s4
  400ef6:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  400efa:	eef4 7ae6 	vcmpe.f32	s15, s13
  400efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400f02:	dd06      	ble.n	400f12 <create_harmonies+0x16a>
					outPtr = outPtrList[i]; 
  400f04:	4b58      	ldr	r3, [pc, #352]	; (401068 <create_harmonies+0x2c0>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400f06:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  400f0a:	f8d3 e008 	ldr.w	lr, [r3, #8]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  400f0e:	4b54      	ldr	r3, [pc, #336]	; (401060 <create_harmonies+0x2b8>)
  400f10:	689b      	ldr	r3, [r3, #8]
			for (i = 1; i < current_num_shifts; i++)
  400f12:	2a03      	cmp	r2, #3
  400f14:	f000 80aa 	beq.w	40106c <create_harmonies+0x2c4>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400f18:	ee77 6a62 	vsub.f32	s13, s14, s5
  400f1c:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  400f20:	eef4 7ae6 	vcmpe.f32	s15, s13
  400f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400f28:	dd06      	ble.n	400f38 <create_harmonies+0x190>
					outPtr = outPtrList[i]; 
  400f2a:	4b4f      	ldr	r3, [pc, #316]	; (401068 <create_harmonies+0x2c0>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400f2c:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  400f30:	f8d3 e00c 	ldr.w	lr, [r3, #12]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  400f34:	4b4a      	ldr	r3, [pc, #296]	; (401060 <create_harmonies+0x2b8>)
  400f36:	68db      	ldr	r3, [r3, #12]
			for (i = 1; i < current_num_shifts; i++)
  400f38:	2a04      	cmp	r2, #4
  400f3a:	f000 8097 	beq.w	40106c <create_harmonies+0x2c4>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400f3e:	ee77 6a43 	vsub.f32	s13, s14, s6
  400f42:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  400f46:	eef4 7ae6 	vcmpe.f32	s15, s13
  400f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400f4e:	dd06      	ble.n	400f5e <create_harmonies+0x1b6>
					outPtr = outPtrList[i]; 
  400f50:	4b45      	ldr	r3, [pc, #276]	; (401068 <create_harmonies+0x2c0>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400f52:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  400f56:	f8d3 e010 	ldr.w	lr, [r3, #16]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  400f5a:	4b41      	ldr	r3, [pc, #260]	; (401060 <create_harmonies+0x2b8>)
  400f5c:	691b      	ldr	r3, [r3, #16]
			for (i = 1; i < current_num_shifts; i++)
  400f5e:	2a05      	cmp	r2, #5
  400f60:	f000 8084 	beq.w	40106c <create_harmonies+0x2c4>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400f64:	ee77 6a63 	vsub.f32	s13, s14, s7
  400f68:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  400f6c:	eef4 7ae6 	vcmpe.f32	s15, s13
  400f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400f74:	dd06      	ble.n	400f84 <create_harmonies+0x1dc>
					outPtr = outPtrList[i]; 
  400f76:	4b3c      	ldr	r3, [pc, #240]	; (401068 <create_harmonies+0x2c0>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400f78:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  400f7c:	f8d3 e014 	ldr.w	lr, [r3, #20]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  400f80:	4b37      	ldr	r3, [pc, #220]	; (401060 <create_harmonies+0x2b8>)
  400f82:	695b      	ldr	r3, [r3, #20]
			for (i = 1; i < current_num_shifts; i++)
  400f84:	2a06      	cmp	r2, #6
  400f86:	d071      	beq.n	40106c <create_harmonies+0x2c4>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400f88:	ee77 6a44 	vsub.f32	s13, s14, s8
  400f8c:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  400f90:	eef4 7ae6 	vcmpe.f32	s15, s13
  400f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400f98:	dd06      	ble.n	400fa8 <create_harmonies+0x200>
					outPtr = outPtrList[i]; 
  400f9a:	4b33      	ldr	r3, [pc, #204]	; (401068 <create_harmonies+0x2c0>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400f9c:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  400fa0:	f8d3 e018 	ldr.w	lr, [r3, #24]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  400fa4:	4b2e      	ldr	r3, [pc, #184]	; (401060 <create_harmonies+0x2b8>)
  400fa6:	699b      	ldr	r3, [r3, #24]
			for (i = 1; i < current_num_shifts; i++)
  400fa8:	2a07      	cmp	r2, #7
  400faa:	d05f      	beq.n	40106c <create_harmonies+0x2c4>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400fac:	ee77 6a64 	vsub.f32	s13, s14, s9
  400fb0:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  400fb4:	eef4 7ae6 	vcmpe.f32	s15, s13
  400fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400fbc:	dd06      	ble.n	400fcc <create_harmonies+0x224>
					outPtr = outPtrList[i]; 
  400fbe:	4b2a      	ldr	r3, [pc, #168]	; (401068 <create_harmonies+0x2c0>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400fc0:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  400fc4:	f8d3 e01c 	ldr.w	lr, [r3, #28]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  400fc8:	4b25      	ldr	r3, [pc, #148]	; (401060 <create_harmonies+0x2b8>)
  400fca:	69db      	ldr	r3, [r3, #28]
			for (i = 1; i < current_num_shifts; i++)
  400fcc:	2a08      	cmp	r2, #8
  400fce:	d04d      	beq.n	40106c <create_harmonies+0x2c4>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400fd0:	ee77 6a45 	vsub.f32	s13, s14, s10
  400fd4:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  400fd8:	eef4 7ae6 	vcmpe.f32	s15, s13
  400fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400fe0:	dd06      	ble.n	400ff0 <create_harmonies+0x248>
					outPtr = outPtrList[i]; 
  400fe2:	4b21      	ldr	r3, [pc, #132]	; (401068 <create_harmonies+0x2c0>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400fe4:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  400fe8:	f8d3 e020 	ldr.w	lr, [r3, #32]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  400fec:	4b1c      	ldr	r3, [pc, #112]	; (401060 <create_harmonies+0x2b8>)
  400fee:	6a1b      	ldr	r3, [r3, #32]
			for (i = 1; i < current_num_shifts; i++)
  400ff0:	2a09      	cmp	r2, #9
  400ff2:	d03b      	beq.n	40106c <create_harmonies+0x2c4>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400ff4:	ee77 6a65 	vsub.f32	s13, s14, s11
  400ff8:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  400ffc:	eef4 7ae6 	vcmpe.f32	s15, s13
  401000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  401004:	dd06      	ble.n	401014 <create_harmonies+0x26c>
					outPtr = outPtrList[i]; 
  401006:	4b18      	ldr	r3, [pc, #96]	; (401068 <create_harmonies+0x2c0>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  401008:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  40100c:	f8d3 e024 	ldr.w	lr, [r3, #36]	; 0x24
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  401010:	4b13      	ldr	r3, [pc, #76]	; (401060 <create_harmonies+0x2b8>)
  401012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			for (i = 1; i < current_num_shifts; i++)
  401014:	2a0a      	cmp	r2, #10
  401016:	d029      	beq.n	40106c <create_harmonies+0x2c4>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  401018:	ee37 7a46 	vsub.f32	s14, s14, s12
  40101c:	eeb0 7ac7 	vabs.f32	s14, s14
				if (tmp < min)
  401020:	eef4 7ac7 	vcmpe.f32	s15, s14
  401024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  401028:	dd04      	ble.n	401034 <create_harmonies+0x28c>
					outPtr = outPtrList[i]; 
  40102a:	4b0f      	ldr	r3, [pc, #60]	; (401068 <create_harmonies+0x2c0>)
  40102c:	f8d3 e028 	ldr.w	lr, [r3, #40]	; 0x28
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  401030:	4b0b      	ldr	r3, [pc, #44]	; (401060 <create_harmonies+0x2b8>)
  401032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			for (i = 1; i < current_num_shifts; i++)
  401034:	2a0b      	cmp	r2, #11
  401036:	d019      	beq.n	40106c <create_harmonies+0x2c4>
  401038:	4b02      	ldr	r3, [pc, #8]	; (401044 <create_harmonies+0x29c>)
  40103a:	9a06      	ldr	r2, [sp, #24]
  40103c:	601a      	str	r2, [r3, #0]
  40103e:	bf00      	nop
  401040:	2040640c 	.word	0x2040640c
  401044:	20406404 	.word	0x20406404
  401048:	20406408 	.word	0x20406408
  40104c:	40490fdb 	.word	0x40490fdb
  401050:	20426494 	.word	0x20426494
  401054:	00403155 	.word	0x00403155
  401058:	20406400 	.word	0x20406400
  40105c:	20426438 	.word	0x20426438
  401060:	20426468 	.word	0x20426468
  401064:	20416438 	.word	0x20416438
  401068:	2041640c 	.word	0x2041640c
  40106c:	ea4f 028b 	mov.w	r2, fp, lsl #2
  401070:	9202      	str	r2, [sp, #8]
  401072:	ee20 9a89 	vmul.f32	s18, s1, s18
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  401076:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40107a:	f8dd a018 	ldr.w	sl, [sp, #24]
  40107e:	9204      	str	r2, [sp, #16]
  401080:	eefc 7ac9 	vcvt.u32.f32	s15, s18
  401084:	f8cd b000 	str.w	fp, [sp]
  401088:	edcd 7a01 	vstr	s15, [sp, #4]
			samplesLeftInPeriod = saved_samplesLeftInPeriod[pitch_idx]; 
		}
		
		for (i = 0; i < WIN_SIZE; i++)
		{		
			if (samplesLeftInPeriod == 0)
  40108c:	bbd3      	cbnz	r3, 401104 <create_harmonies+0x35c>
			{
				outLag = 1; 
			
				inHalfAway = (inPtr + RING_BUFFER_SIZE_D2) & RING_BUFFER_MASK;
  40108e:	f50a 5c00 	add.w	ip, sl, #8192	; 0x2000
  401092:	f3cc 0c0d 	ubfx	ip, ip, #0, #14
                
				if (inHalfAway < RING_BUFFER_SIZE_D2) 
  401096:	f5bc 5f00 	cmp.w	ip, #8192	; 0x2000
  40109a:	f080 80b8 	bcs.w	40120e <create_harmonies+0x466>
				{
					/* The zero element of the input buffer lies
						in (inptr, inHalfAway] */
					if (outPtr < inHalfAway || outPtr > inPtr) {
  40109e:	45f4      	cmp	ip, lr
  4010a0:	d82f      	bhi.n	401102 <create_harmonies+0x35a>
  4010a2:	45f2      	cmp	sl, lr
  4010a4:	d32d      	bcc.n	401102 <create_harmonies+0x35a>
  4010a6:	f50a 7b16 	add.w	fp, sl, #600	; 0x258
				}

				while(outLag == 1)
				{
					// set outPtr about the sample at which we OLA 
					outPtr = (outPtr + (uint32_t)((float)inputPeriodLength * periodRatio)) & RING_BUFFER_MASK; 
  4010aa:	9b01      	ldr	r3, [sp, #4]
  4010ac:	449e      	add	lr, r3
				
					// OLA 
					if (pitch_idx == 0)
  4010ae:	9b00      	ldr	r3, [sp, #0]
					outPtr = (outPtr + (uint32_t)((float)inputPeriodLength * periodRatio)) & RING_BUFFER_MASK; 
  4010b0:	f3ce 0e0d 	ubfx	lr, lr, #0, #14
					if (pitch_idx == 0)
  4010b4:	2b00      	cmp	r3, #0
  4010b6:	d17e      	bne.n	4011b6 <create_harmonies+0x40e>
					{
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  4010b8:	45c8      	cmp	r8, r9
  4010ba:	dd1c      	ble.n	4010f6 <create_harmonies+0x34e>
  4010bc:	ebae 0208 	sub.w	r2, lr, r8
  4010c0:	485d      	ldr	r0, [pc, #372]	; (401238 <create_harmonies+0x490>)
  4010c2:	eb0e 0708 	add.w	r7, lr, r8
  4010c6:	ebab 060e 	sub.w	r6, fp, lr
						{
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
							window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4010ca:	18b3      	adds	r3, r6, r2
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  4010cc:	f3c2 010d 	ubfx	r1, r2, #0, #14
							window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4010d0:	ecf0 6a01 	vldmia	r0!, {s13}
  4010d4:	3201      	adds	r2, #1
  4010d6:	f3c3 030d 	ubfx	r3, r3, #0, #14
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  4010da:	eb05 0181 	add.w	r1, r5, r1, lsl #2
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  4010de:	4297      	cmp	r7, r2
							window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4010e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  4010e4:	edd1 7a00 	vldr	s15, [r1]
  4010e8:	ed93 7a00 	vldr	s14, [r3]
  4010ec:	eee6 7a87 	vfma.f32	s15, s13, s14
  4010f0:	edc1 7a00 	vstr	s15, [r1]
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  4010f4:	d1e9      	bne.n	4010ca <create_harmonies+0x322>
								volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
						}
					}
	
					
					if (inHalfAway < RING_BUFFER_SIZE_D2) 
  4010f6:	f5bc 5f00 	cmp.w	ip, #8192	; 0x2000
  4010fa:	f080 8081 	bcs.w	401200 <create_harmonies+0x458>
					{
						/* The zero element of the input buffer lies
							in (inptr, inHalfAway] */
						if (outPtr < inHalfAway || outPtr > inPtr) {
  4010fe:	45f4      	cmp	ip, lr
  401100:	d950      	bls.n	4011a4 <create_harmonies+0x3fc>
						}
					}		
				}
			
				// assume uniform frequency within window 
				samplesLeftInPeriod = inputPeriodLength;
  401102:	4643      	mov	r3, r8
		for (i = 0; i < WIN_SIZE; i++)
  401104:	9a04      	ldr	r2, [sp, #16]
			}
		
			--samplesLeftInPeriod; 
		
			// inc/wrap input ring buffer index 
			inPtr = (inPtr+1) & RING_BUFFER_MASK; 		
  401106:	f10a 0a01 	add.w	sl, sl, #1
			--samplesLeftInPeriod; 
  40110a:	3b01      	subs	r3, #1
		for (i = 0; i < WIN_SIZE; i++)
  40110c:	3a01      	subs	r2, #1
			inPtr = (inPtr+1) & RING_BUFFER_MASK; 		
  40110e:	f3ca 0a0d 	ubfx	sl, sl, #0, #14
		for (i = 0; i < WIN_SIZE; i++)
  401112:	9204      	str	r2, [sp, #16]
  401114:	d1ba      	bne.n	40108c <create_harmonies+0x2e4>
		}

		saved_samplesLeftInPeriod[pitch_idx] = samplesLeftInPeriod; 
  401116:	9a05      	ldr	r2, [sp, #20]
		outPtrList[pitch_idx] = outPtr; 
  401118:	9902      	ldr	r1, [sp, #8]
		saved_samplesLeftInPeriod[pitch_idx] = samplesLeftInPeriod; 
  40111a:	6013      	str	r3, [r2, #0]
		outPtrList[pitch_idx] = outPtr; 
  40111c:	4a47      	ldr	r2, [pc, #284]	; (40123c <create_harmonies+0x494>)
  40111e:	f8dd b000 	ldr.w	fp, [sp]
  401122:	f842 e001 	str.w	lr, [r2, r1]
	while(pitch_shifts_in[pitch_idx] > 0.0f && pitch_idx < MAX_NUM_SHIFTS)
  401126:	9a07      	ldr	r2, [sp, #28]
		pitch_idx++;  
  401128:	f10b 0b01 	add.w	fp, fp, #1
	while(pitch_shifts_in[pitch_idx] > 0.0f && pitch_idx < MAX_NUM_SHIFTS)
  40112c:	ecb2 7a01 	vldmia	r2!, {s14}
  401130:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  401134:	9207      	str	r2, [sp, #28]
  401136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40113a:	dd07      	ble.n	40114c <create_harmonies+0x3a4>
  40113c:	9a05      	ldr	r2, [sp, #20]
  40113e:	f1bb 0f0b 	cmp.w	fp, #11
  401142:	f102 0204 	add.w	r2, r2, #4
  401146:	9205      	str	r2, [sp, #20]
  401148:	f47f aeaf 	bne.w	400eaa <create_harmonies+0x102>
  40114c:	4b3c      	ldr	r3, [pc, #240]	; (401240 <create_harmonies+0x498>)
  40114e:	f8c3 a000 	str.w	sl, [r3]
  401152:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	}
	
	for(i = 0; i < WIN_SIZE; i++)
	{
		output[i] = output_ring_buffer[readPos]; 	
		output_ring_buffer[readPos] = 0.0f;
  401154:	2400      	movs	r4, #0
  401156:	493b      	ldr	r1, [pc, #236]	; (401244 <create_harmonies+0x49c>)
  401158:	4e3b      	ldr	r6, [pc, #236]	; (401248 <create_harmonies+0x4a0>)
  40115a:	f502 5580 	add.w	r5, r2, #4096	; 0x1000
  40115e:	680b      	ldr	r3, [r1, #0]
		output[i] = output_ring_buffer[readPos]; 	
  401160:	eb06 0083 	add.w	r0, r6, r3, lsl #2
		readPos = (readPos+1) & RING_BUFFER_MASK;
  401164:	3301      	adds	r3, #1
		output[i] = output_ring_buffer[readPos]; 	
  401166:	6807      	ldr	r7, [r0, #0]
		readPos = (readPos+1) & RING_BUFFER_MASK;
  401168:	f3c3 030d 	ubfx	r3, r3, #0, #14
		output[i] = output_ring_buffer[readPos]; 	
  40116c:	f842 7b04 	str.w	r7, [r2], #4
	for(i = 0; i < WIN_SIZE; i++)
  401170:	42aa      	cmp	r2, r5
		output_ring_buffer[readPos] = 0.0f;
  401172:	6004      	str	r4, [r0, #0]
	for(i = 0; i < WIN_SIZE; i++)
  401174:	d1f4      	bne.n	401160 <create_harmonies+0x3b8>
	// variables for next harmonization  
	//if ((pitch_idx-1) > 0)
		//samplesLeftInPeriod = cum_samplesLeftInPeriod / (pitch_idx-1); // average the number of samples left in period 
	
	currentPitch = inputPitch; 
	inputPeriodLength = (uint32_t)(PSOLA_SAMPLE_RATE / currentPitch);
  401176:	ed9f 7a35 	vldr	s14, [pc, #212]	; 40124c <create_harmonies+0x4a4>
	current_num_shifts = pitch_idx; 
	arm_copy_f32(pitch_shifts_in, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  40117a:	220b      	movs	r2, #11
	current_num_shifts = pitch_idx; 
  40117c:	9c09      	ldr	r4, [sp, #36]	; 0x24
	inputPeriodLength = (uint32_t)(PSOLA_SAMPLE_RATE / currentPitch);
  40117e:	eec7 7a28 	vdiv.f32	s15, s14, s17
  401182:	600b      	str	r3, [r1, #0]
	current_num_shifts = pitch_idx; 
  401184:	f8c4 b000 	str.w	fp, [r4]
	arm_copy_f32(pitch_shifts_in, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  401188:	9808      	ldr	r0, [sp, #32]
	inputPeriodLength = (uint32_t)(PSOLA_SAMPLE_RATE / currentPitch);
  40118a:	4c31      	ldr	r4, [pc, #196]	; (401250 <create_harmonies+0x4a8>)
	arm_copy_f32(pitch_shifts_in, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  40118c:	4931      	ldr	r1, [pc, #196]	; (401254 <create_harmonies+0x4ac>)
  40118e:	4b32      	ldr	r3, [pc, #200]	; (401258 <create_harmonies+0x4b0>)
	inputPeriodLength = (uint32_t)(PSOLA_SAMPLE_RATE / currentPitch);
  401190:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  401194:	edc4 7a00 	vstr	s15, [r4]
}
  401198:	b00d      	add	sp, #52	; 0x34
  40119a:	ecbd 8b06 	vpop	{d8-d10}
  40119e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	arm_copy_f32(pitch_shifts_in, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  4011a2:	4718      	bx	r3
						if (outPtr < inHalfAway || outPtr > inPtr) {
  4011a4:	45d6      	cmp	lr, sl
  4011a6:	d8ac      	bhi.n	401102 <create_harmonies+0x35a>
					outPtr = (outPtr + (uint32_t)((float)inputPeriodLength * periodRatio)) & RING_BUFFER_MASK; 
  4011a8:	9b01      	ldr	r3, [sp, #4]
  4011aa:	449e      	add	lr, r3
					if (pitch_idx == 0)
  4011ac:	9b00      	ldr	r3, [sp, #0]
					outPtr = (outPtr + (uint32_t)((float)inputPeriodLength * periodRatio)) & RING_BUFFER_MASK; 
  4011ae:	f3ce 0e0d 	ubfx	lr, lr, #0, #14
					if (pitch_idx == 0)
  4011b2:	2b00      	cmp	r3, #0
  4011b4:	d080      	beq.n	4010b8 <create_harmonies+0x310>
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  4011b6:	45c8      	cmp	r8, r9
  4011b8:	dd9d      	ble.n	4010f6 <create_harmonies+0x34e>
  4011ba:	ebae 0208 	sub.w	r2, lr, r8
  4011be:	481e      	ldr	r0, [pc, #120]	; (401238 <create_harmonies+0x490>)
  4011c0:	eb0e 0708 	add.w	r7, lr, r8
  4011c4:	ebab 060e 	sub.w	r6, fp, lr
								volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4011c8:	18b3      	adds	r3, r6, r2
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  4011ca:	f3c2 010d 	ubfx	r1, r2, #0, #14
								volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4011ce:	ecb0 7a01 	vldmia	r0!, {s14}
  4011d2:	3201      	adds	r2, #1
  4011d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  4011d8:	eb05 0181 	add.w	r1, r5, r1, lsl #2
								volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4011dc:	ee27 7a08 	vmul.f32	s14, s14, s16
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  4011e0:	4297      	cmp	r7, r2
								volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4011e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  4011e6:	edd1 7a00 	vldr	s15, [r1]
  4011ea:	edd3 6a00 	vldr	s13, [r3]
  4011ee:	eee7 7a26 	vfma.f32	s15, s14, s13
  4011f2:	edc1 7a00 	vstr	s15, [r1]
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  4011f6:	d1e7      	bne.n	4011c8 <create_harmonies+0x420>
					if (inHalfAway < RING_BUFFER_SIZE_D2) 
  4011f8:	f5bc 5f00 	cmp.w	ip, #8192	; 0x2000
  4011fc:	f4ff af7f 	bcc.w	4010fe <create_harmonies+0x356>
						if (outPtr > inPtr && outPtr < inHalfAway) {
  401200:	45d6      	cmp	lr, sl
  401202:	f67f af52 	bls.w	4010aa <create_harmonies+0x302>
  401206:	45f4      	cmp	ip, lr
  401208:	f63f af7b 	bhi.w	401102 <create_harmonies+0x35a>
  40120c:	e74d      	b.n	4010aa <create_harmonies+0x302>
					if (outPtr > inPtr && outPtr < inHalfAway) {
  40120e:	45f2      	cmp	sl, lr
  401210:	f4bf af49 	bcs.w	4010a6 <create_harmonies+0x2fe>
  401214:	45f4      	cmp	ip, lr
  401216:	f63f af74 	bhi.w	401102 <create_harmonies+0x35a>
  40121a:	e744      	b.n	4010a6 <create_harmonies+0x2fe>
			outPtr = outPtrList[pitch_idx]; 
  40121c:	ea4f 038b 	mov.w	r3, fp, lsl #2
  401220:	9302      	str	r3, [sp, #8]
  401222:	4b06      	ldr	r3, [pc, #24]	; (40123c <create_harmonies+0x494>)
  401224:	f853 e02b 	ldr.w	lr, [r3, fp, lsl #2]
			samplesLeftInPeriod = saved_samplesLeftInPeriod[pitch_idx]; 
  401228:	9b05      	ldr	r3, [sp, #20]
  40122a:	681b      	ldr	r3, [r3, #0]
  40122c:	e721      	b.n	401072 <create_harmonies+0x2ca>
  40122e:	4b0b      	ldr	r3, [pc, #44]	; (40125c <create_harmonies+0x4b4>)
	while(pitch_shifts_in[pitch_idx] > 0.0f && pitch_idx < MAX_NUM_SHIFTS)
  401230:	f04f 0b00 	mov.w	fp, #0
  401234:	9309      	str	r3, [sp, #36]	; 0x24
  401236:	e78c      	b.n	401152 <create_harmonies+0x3aa>
  401238:	20426494 	.word	0x20426494
  40123c:	2041640c 	.word	0x2041640c
  401240:	20406404 	.word	0x20406404
  401244:	20426464 	.word	0x20426464
  401248:	20416438 	.word	0x20416438
  40124c:	4735a700 	.word	0x4735a700
  401250:	20406408 	.word	0x20406408
  401254:	20426438 	.word	0x20426438
  401258:	00402edd 	.word	0x00402edd
  40125c:	20406400 	.word	0x20406400

00401260 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  401260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  401264:	b990      	cbnz	r0, 40128c <_read+0x2c>
		return -1;
	}

	for (; len > 0; --len) {
  401266:	2a00      	cmp	r2, #0
  401268:	4690      	mov	r8, r2
  40126a:	dd0d      	ble.n	401288 <_read+0x28>
  40126c:	460c      	mov	r4, r1
  40126e:	188f      	adds	r7, r1, r2
  401270:	4e08      	ldr	r6, [pc, #32]	; (401294 <_read+0x34>)
  401272:	4d09      	ldr	r5, [pc, #36]	; (401298 <_read+0x38>)
		ptr_get(stdio_base, ptr);
  401274:	4621      	mov	r1, r4
		ptr++;
  401276:	3401      	adds	r4, #1
		ptr_get(stdio_base, ptr);
  401278:	6830      	ldr	r0, [r6, #0]
  40127a:	682b      	ldr	r3, [r5, #0]
  40127c:	4798      	blx	r3
	for (; len > 0; --len) {
  40127e:	42bc      	cmp	r4, r7
  401280:	d1f8      	bne.n	401274 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  401282:	4640      	mov	r0, r8
  401284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (; len > 0; --len) {
  401288:	4680      	mov	r8, r0
  40128a:	e7fa      	b.n	401282 <_read+0x22>
		return -1;
  40128c:	f04f 38ff 	mov.w	r8, #4294967295
  401290:	e7f7      	b.n	401282 <_read+0x22>
  401292:	bf00      	nop
  401294:	2044c808 	.word	0x2044c808
  401298:	2044c800 	.word	0x2044c800

0040129c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  40129c:	3801      	subs	r0, #1
  40129e:	2802      	cmp	r0, #2
  4012a0:	d81e      	bhi.n	4012e0 <_write+0x44>
{
  4012a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4012a6:	4615      	mov	r5, r2
		return -1;
	}

	for (; len != 0; --len) {
  4012a8:	b1ba      	cbz	r2, 4012da <_write+0x3e>
  4012aa:	460e      	mov	r6, r1
  4012ac:	460c      	mov	r4, r1
  4012ae:	f8df 803c 	ldr.w	r8, [pc, #60]	; 4012ec <_write+0x50>
  4012b2:	4f0d      	ldr	r7, [pc, #52]	; (4012e8 <_write+0x4c>)
  4012b4:	e001      	b.n	4012ba <_write+0x1e>
  4012b6:	3d01      	subs	r5, #1
  4012b8:	d00d      	beq.n	4012d6 <_write+0x3a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4012ba:	f814 1b01 	ldrb.w	r1, [r4], #1
  4012be:	f8d8 0000 	ldr.w	r0, [r8]
  4012c2:	683b      	ldr	r3, [r7, #0]
  4012c4:	4798      	blx	r3
  4012c6:	2800      	cmp	r0, #0
  4012c8:	eba4 0006 	sub.w	r0, r4, r6
  4012cc:	daf3      	bge.n	4012b6 <_write+0x1a>
		return -1;
  4012ce:	f04f 30ff 	mov.w	r0, #4294967295
  4012d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4012d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (; len != 0; --len) {
  4012da:	4610      	mov	r0, r2
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  4012dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4012e0:	f04f 30ff 	mov.w	r0, #4294967295
}
  4012e4:	4770      	bx	lr
  4012e6:	bf00      	nop
  4012e8:	2044c804 	.word	0x2044c804
  4012ec:	2044c808 	.word	0x2044c808

004012f0 <wm8904_write_register>:
 *
 * \param uc_register_address Register address to write
 * \param us_data Data to write.
 */
void wm8904_write_register(uint8_t uc_register_address, uint16_t us_data)
{
  4012f0:	b570      	push	{r4, r5, r6, lr}
  4012f2:	460b      	mov	r3, r1
  4012f4:	b086      	sub	sp, #24
	uint8_t uc_temp_data[2];
	twihs_packet_t packet;

	uc_temp_data[0] = (us_data & 0xff00) >> 8;
  4012f6:	0a0e      	lsrs	r6, r1, #8

	packet.addr[0]     = uc_register_address;
	packet.addr_length = 0x1;
	packet.buffer      = uc_temp_data;
	packet.length      = 0x2;
	packet.chip        = WM8904_SLAVE_ADDRESS;
  4012f8:	221a      	movs	r2, #26
	uc_temp_data[1] = us_data & 0xff;
  4012fa:	f88d 3001 	strb.w	r3, [sp, #1]
	packet.addr_length = 0x1;
  4012fe:	2501      	movs	r5, #1
	packet.length      = 0x2;
  401300:	2402      	movs	r4, #2

	twihs_master_write(WM8904_TWIHS, &packet);
  401302:	a901      	add	r1, sp, #4
  401304:	4b07      	ldr	r3, [pc, #28]	; (401324 <wm8904_write_register+0x34>)
	packet.addr[0]     = uc_register_address;
  401306:	f88d 0004 	strb.w	r0, [sp, #4]
	twihs_master_write(WM8904_TWIHS, &packet);
  40130a:	4807      	ldr	r0, [pc, #28]	; (401328 <wm8904_write_register+0x38>)
	uc_temp_data[0] = (us_data & 0xff00) >> 8;
  40130c:	f88d 6000 	strb.w	r6, [sp]
	packet.addr_length = 0x1;
  401310:	9502      	str	r5, [sp, #8]
	packet.buffer      = uc_temp_data;
  401312:	f8cd d00c 	str.w	sp, [sp, #12]
	packet.length      = 0x2;
  401316:	9404      	str	r4, [sp, #16]
	packet.chip        = WM8904_SLAVE_ADDRESS;
  401318:	f88d 2014 	strb.w	r2, [sp, #20]
	twihs_master_write(WM8904_TWIHS, &packet);
  40131c:	4798      	blx	r3
}
  40131e:	b006      	add	sp, #24
  401320:	bd70      	pop	{r4, r5, r6, pc}
  401322:	bf00      	nop
  401324:	00401695 	.word	0x00401695
  401328:	40018000 	.word	0x40018000

0040132c <wm8904_read_register>:
 *
 * \param uc_register_address Register address to write
 * \retun Register value.
 */
uint16_t wm8904_read_register(uint8_t uc_register_address)
{
  40132c:	b530      	push	{r4, r5, lr}
  40132e:	b087      	sub	sp, #28

	packet.addr[0]     = uc_register_address;
	packet.addr_length = 0x1;
	packet.buffer      = uc_temp_data;
	packet.length      = 0x2;
	packet.chip        = WM8904_SLAVE_ADDRESS;
  401330:	221a      	movs	r2, #26
	packet.addr_length = 0x1;
  401332:	2501      	movs	r5, #1
	packet.length      = 0x2;
  401334:	2402      	movs	r4, #2
	packet.addr[0]     = uc_register_address;
  401336:	f88d 0004 	strb.w	r0, [sp, #4]

	twihs_master_read(WM8904_TWIHS, &packet);
  40133a:	a901      	add	r1, sp, #4
  40133c:	4b08      	ldr	r3, [pc, #32]	; (401360 <wm8904_read_register+0x34>)
  40133e:	4809      	ldr	r0, [pc, #36]	; (401364 <wm8904_read_register+0x38>)
	packet.addr_length = 0x1;
  401340:	9502      	str	r5, [sp, #8]
	packet.buffer      = uc_temp_data;
  401342:	f8cd d00c 	str.w	sp, [sp, #12]
	packet.length      = 0x2;
  401346:	9404      	str	r4, [sp, #16]
	packet.chip        = WM8904_SLAVE_ADDRESS;
  401348:	f88d 2014 	strb.w	r2, [sp, #20]
	twihs_master_read(WM8904_TWIHS, &packet);
  40134c:	4798      	blx	r3
	us_data = (((uint16_t)uc_temp_data[0] << 8) & 0xff00) | uc_temp_data[1];
  40134e:	f89d 0000 	ldrb.w	r0, [sp]
  401352:	f89d 3001 	ldrb.w	r3, [sp, #1]

	return us_data;
}
  401356:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  40135a:	b007      	add	sp, #28
  40135c:	bd30      	pop	{r4, r5, pc}
  40135e:	bf00      	nop
  401360:	004015e1 	.word	0x004015e1
  401364:	40018000 	.word	0x40018000

00401368 <wm8904_twi_init>:
 * \brief Initialize TWIHS connect to WM8904.
 *
 * \retun TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t wm8904_twi_init(void)
{
  401368:	b510      	push	{r4, lr}
	pio_configure_pin(WM8904_TK_PIO, WM8904_TK_FLAGS);
  40136a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
{
  40136e:	b084      	sub	sp, #16
	pio_configure_pin(WM8904_TK_PIO, WM8904_TK_FLAGS);
  401370:	4c15      	ldr	r4, [pc, #84]	; (4013c8 <wm8904_twi_init+0x60>)
  401372:	2021      	movs	r0, #33	; 0x21
  401374:	47a0      	blx	r4
	pio_configure_pin(WM8904_TF_PIO, WM8904_TF_FLAGS);
  401376:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40137a:	2020      	movs	r0, #32
  40137c:	47a0      	blx	r4
	pio_configure_pin(WM8904_TD_PIO, WM8904_TD_FLAGS);
  40137e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401382:	207a      	movs	r0, #122	; 0x7a
  401384:	47a0      	blx	r4
	pio_configure_pin(WM8904_RK_PIO, WM8904_RK_FLAGS);
  401386:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40138a:	2016      	movs	r0, #22
  40138c:	47a0      	blx	r4
	pio_configure_pin(WM8904_RF_PIO, WM8904_RF_FLAGS);
  40138e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401392:	2078      	movs	r0, #120	; 0x78
  401394:	47a0      	blx	r4
	pio_configure_pin(WM8904_RD_PIO, WM8904_RD_FLAGS);
  401396:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40139a:	200a      	movs	r0, #10
  40139c:	47a0      	blx	r4
	pio_configure_pin(WM8904_PCK2_PIO, WM8904_PCK2_FLAGS);
  40139e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4013a2:	2012      	movs	r0, #18
  4013a4:	47a0      	blx	r4

static inline uint32_t twihs_master_setup(twihs_master_t p_twihs,
		twihs_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
	p_opt->smbus      = 0;
  4013a6:	2200      	movs	r2, #0
	p_opt->master_clk = sysclk_get_peripheral_hz();
  4013a8:	4908      	ldr	r1, [pc, #32]	; (4013cc <wm8904_twi_init+0x64>)
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4013aa:	2013      	movs	r0, #19

	twihs_options_t opt;
	opt.master_clk = sysclk_get_cpu_hz();
	opt.speed = WM8904_TWIHS_CLK;
  4013ac:	4c08      	ldr	r4, [pc, #32]	; (4013d0 <wm8904_twi_init+0x68>)
  4013ae:	4b09      	ldr	r3, [pc, #36]	; (4013d4 <wm8904_twi_init+0x6c>)
  4013b0:	9101      	str	r1, [sp, #4]
	p_opt->smbus      = 0;
  4013b2:	f88d 200d 	strb.w	r2, [sp, #13]
  4013b6:	9402      	str	r4, [sp, #8]
  4013b8:	4798      	blx	r3
#endif		
	} else {
		// Do Nothing
	}
#endif
	return (twihs_master_init(p_twihs, p_opt));
  4013ba:	a901      	add	r1, sp, #4
  4013bc:	4b06      	ldr	r3, [pc, #24]	; (4013d8 <wm8904_twi_init+0x70>)
  4013be:	4807      	ldr	r0, [pc, #28]	; (4013dc <wm8904_twi_init+0x74>)
  4013c0:	4798      	blx	r3
	return twihs_master_setup(WM8904_TWIHS, &opt);
}
  4013c2:	b004      	add	sp, #16
  4013c4:	bd10      	pop	{r4, pc}
  4013c6:	bf00      	nop
  4013c8:	00401d1d 	.word	0x00401d1d
  4013cc:	08f0d180 	.word	0x08f0d180
  4013d0:	00061a80 	.word	0x00061a80
  4013d4:	0040236d 	.word	0x0040236d
  4013d8:	00401501 	.word	0x00401501
  4013dc:	40018000 	.word	0x40018000

004013e0 <ssc_reset>:
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_reset(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_SWRST;
	p_ssc->SSC_CMR = 0;
  4013e0:	2300      	movs	r3, #0
	p_ssc->SSC_CR = SSC_CR_SWRST;
  4013e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4013e6:	6002      	str	r2, [r0, #0]
	p_ssc->SSC_CMR = 0;
  4013e8:	6043      	str	r3, [r0, #4]
	p_ssc->SSC_RCMR = 0;
  4013ea:	6103      	str	r3, [r0, #16]
	p_ssc->SSC_RFMR = 0;
  4013ec:	6143      	str	r3, [r0, #20]
	p_ssc->SSC_TCMR = 0;
  4013ee:	6183      	str	r3, [r0, #24]
	p_ssc->SSC_TFMR = 0;
  4013f0:	61c3      	str	r3, [r0, #28]
  4013f2:	4770      	bx	lr

004013f4 <ssc_enable_rx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_rx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_RXEN;
  4013f4:	2301      	movs	r3, #1
  4013f6:	6003      	str	r3, [r0, #0]
  4013f8:	4770      	bx	lr
  4013fa:	bf00      	nop

004013fc <ssc_disable_rx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_disable_rx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_RXDIS;
  4013fc:	2302      	movs	r3, #2
  4013fe:	6003      	str	r3, [r0, #0]
  401400:	4770      	bx	lr
  401402:	bf00      	nop

00401404 <ssc_enable_tx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_tx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_TXEN;
  401404:	f44f 7380 	mov.w	r3, #256	; 0x100
  401408:	6003      	str	r3, [r0, #0]
  40140a:	4770      	bx	lr

0040140c <ssc_disable_tx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_disable_tx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_TXDIS;
  40140c:	f44f 7300 	mov.w	r3, #512	; 0x200
  401410:	6003      	str	r3, [r0, #0]
  401412:	4770      	bx	lr

00401414 <ssc_set_receiver>:
 * \param p_rx_clk_opt Pointer to the receiver clock configuration structure.
 * \param p_rx_data_frame Pointer to the receiver data frame configuration structure.
 */
void ssc_set_receiver(Ssc *p_ssc, clock_opt_t *p_rx_clk_opt,
		data_frame_opt_t *p_rx_data_frame)
{
  401414:	b4f0      	push	{r4, r5, r6, r7}
	if (p_rx_clk_opt == NULL) {
  401416:	2900      	cmp	r1, #0
  401418:	d02f      	beq.n	40147a <ssc_set_receiver+0x66>
		p_ssc->SSC_RCMR = 0;
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  40141a:	6904      	ldr	r4, [r0, #16]
  40141c:	68cf      	ldr	r7, [r1, #12]
  40141e:	698e      	ldr	r6, [r1, #24]
  401420:	e891 0028 	ldmia.w	r1, {r3, r5}
  401424:	432b      	orrs	r3, r5
  401426:	688d      	ldr	r5, [r1, #8]
  401428:	4323      	orrs	r3, r4
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
				p_rx_clk_opt->ul_ckg |
				p_rx_clk_opt->ul_start_sel |
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  40142a:	694c      	ldr	r4, [r1, #20]
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  40142c:	432b      	orrs	r3, r5
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
  40142e:	690d      	ldr	r5, [r1, #16]
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  401430:	0421      	lsls	r1, r4, #16
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  401432:	433b      	orrs	r3, r7
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  401434:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  401438:	4333      	orrs	r3, r6
  40143a:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  40143e:	430b      	orrs	r3, r1
  401440:	6103      	str	r3, [r0, #16]
	}

	if (p_rx_data_frame == NULL) {
  401442:	b1ea      	cbz	r2, 401480 <ssc_set_receiver+0x6c>
		p_ssc->SSC_RFMR = 0;
	} else {
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  401444:	6954      	ldr	r4, [r2, #20]
  401446:	6853      	ldr	r3, [r2, #4]
  401448:	6991      	ldr	r1, [r2, #24]
  40144a:	4323      	orrs	r3, r4
  40144c:	6946      	ldr	r6, [r0, #20]
  40144e:	6814      	ldr	r4, [r2, #0]
  401450:	430b      	orrs	r3, r1
				p_rx_data_frame->ul_msbf |
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  401452:	6891      	ldr	r1, [r2, #8]
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  401454:	f004 041f 	and.w	r4, r4, #31
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
  401458:	6915      	ldr	r5, [r2, #16]
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  40145a:	4333      	orrs	r3, r6
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  40145c:	68d2      	ldr	r2, [r2, #12]
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  40145e:	0209      	lsls	r1, r1, #8
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  401460:	4323      	orrs	r3, r4
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  401462:	0412      	lsls	r2, r2, #16
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  401464:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  401468:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  40146c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  401470:	430b      	orrs	r3, r1
  401472:	4313      	orrs	r3, r2
				p_rx_data_frame->ul_fsos |
				p_rx_data_frame->ul_fsedge;
	}
}
  401474:	bcf0      	pop	{r4, r5, r6, r7}
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  401476:	6143      	str	r3, [r0, #20]
}
  401478:	4770      	bx	lr
		p_ssc->SSC_RCMR = 0;
  40147a:	6101      	str	r1, [r0, #16]
	if (p_rx_data_frame == NULL) {
  40147c:	2a00      	cmp	r2, #0
  40147e:	d1e1      	bne.n	401444 <ssc_set_receiver+0x30>
		p_ssc->SSC_RFMR = 0;
  401480:	6142      	str	r2, [r0, #20]
}
  401482:	bcf0      	pop	{r4, r5, r6, r7}
  401484:	4770      	bx	lr
  401486:	bf00      	nop

00401488 <ssc_set_transmitter>:
 * \param p_tx_clk_opt Pointer to the transmitter clock configuration structure.
 * \param p_tx_data_frame Pointer to the transmitter data frame configuration structure.
 */
void ssc_set_transmitter(Ssc *p_ssc, clock_opt_t *p_tx_clk_opt,
		data_frame_opt_t *p_tx_data_frame)
{
  401488:	b4f0      	push	{r4, r5, r6, r7}
	if (p_tx_clk_opt == NULL) {
  40148a:	2900      	cmp	r1, #0
  40148c:	d02f      	beq.n	4014ee <ssc_set_transmitter+0x66>
		p_ssc->SSC_TCMR = 0;
	} else {
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  40148e:	6984      	ldr	r4, [r0, #24]
  401490:	68cf      	ldr	r7, [r1, #12]
  401492:	698e      	ldr	r6, [r1, #24]
  401494:	e891 0028 	ldmia.w	r1, {r3, r5}
  401498:	432b      	orrs	r3, r5
  40149a:	688d      	ldr	r5, [r1, #8]
  40149c:	4323      	orrs	r3, r4
				p_tx_clk_opt->ul_cko | p_tx_clk_opt->ul_cki |
				p_tx_clk_opt->ul_ckg |
				p_tx_clk_opt->ul_start_sel |
				SSC_TCMR_PERIOD(p_tx_clk_opt->ul_period) |
				SSC_TCMR_STTDLY(p_tx_clk_opt->ul_sttdly);
  40149e:	694c      	ldr	r4, [r1, #20]
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  4014a0:	432b      	orrs	r3, r5
				SSC_TCMR_PERIOD(p_tx_clk_opt->ul_period) |
  4014a2:	690d      	ldr	r5, [r1, #16]
				SSC_TCMR_STTDLY(p_tx_clk_opt->ul_sttdly);
  4014a4:	0421      	lsls	r1, r4, #16
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  4014a6:	433b      	orrs	r3, r7
				SSC_TCMR_STTDLY(p_tx_clk_opt->ul_sttdly);
  4014a8:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  4014ac:	4333      	orrs	r3, r6
  4014ae:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  4014b2:	430b      	orrs	r3, r1
  4014b4:	6183      	str	r3, [r0, #24]
	}

	if (p_tx_data_frame == NULL) {
  4014b6:	b1ea      	cbz	r2, 4014f4 <ssc_set_transmitter+0x6c>
		p_ssc->SSC_TFMR = 0;
	} else {
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  4014b8:	6954      	ldr	r4, [r2, #20]
  4014ba:	6853      	ldr	r3, [r2, #4]
  4014bc:	6991      	ldr	r1, [r2, #24]
  4014be:	4323      	orrs	r3, r4
  4014c0:	69c6      	ldr	r6, [r0, #28]
  4014c2:	6814      	ldr	r4, [r2, #0]
  4014c4:	430b      	orrs	r3, r1
				p_tx_data_frame->ul_msbf |
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
  4014c6:	6891      	ldr	r1, [r2, #8]
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  4014c8:	f004 041f 	and.w	r4, r4, #31
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
				SSC_TFMR_FSLEN_EXT(p_tx_data_frame->ul_fslen_ext) |
  4014cc:	6915      	ldr	r5, [r2, #16]
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  4014ce:	4333      	orrs	r3, r6
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
  4014d0:	68d2      	ldr	r2, [r2, #12]
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
  4014d2:	0209      	lsls	r1, r1, #8
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  4014d4:	4323      	orrs	r3, r4
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
  4014d6:	0412      	lsls	r2, r2, #16
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
  4014d8:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  4014dc:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
  4014e0:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  4014e4:	430b      	orrs	r3, r1
  4014e6:	4313      	orrs	r3, r2
				p_tx_data_frame->ul_fsos |
				p_tx_data_frame->ul_fsedge;
	}
}
  4014e8:	bcf0      	pop	{r4, r5, r6, r7}
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  4014ea:	61c3      	str	r3, [r0, #28]
}
  4014ec:	4770      	bx	lr
		p_ssc->SSC_TCMR = 0;
  4014ee:	6181      	str	r1, [r0, #24]
	if (p_tx_data_frame == NULL) {
  4014f0:	2a00      	cmp	r2, #0
  4014f2:	d1e1      	bne.n	4014b8 <ssc_set_transmitter+0x30>
		p_ssc->SSC_TFMR = 0;
  4014f4:	61c2      	str	r2, [r0, #28]
}
  4014f6:	bcf0      	pop	{r4, r5, r6, r7}
  4014f8:	4770      	bx	lr
  4014fa:	bf00      	nop

004014fc <ssc_disable_interrupt>:
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void ssc_disable_interrupt(Ssc *p_ssc, uint32_t ul_sources)
{
	p_ssc->SSC_IDR = ul_sources;
  4014fc:	6481      	str	r1, [r0, #72]	; 0x48
  4014fe:	4770      	bx	lr

00401500 <twihs_master_init>:
 * \param p_opt Options for initializing the TWIHS module (see \ref twihs_options_t).
 *
 * \return TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twihs_master_init(Twihs *p_twihs, const twihs_options_t *p_opt)
{
  401500:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t status = TWIHS_SUCCESS;

	/* Disable TWIHS interrupts */
	p_twihs->TWIHS_IDR = ~0UL;
  401502:	f04f 33ff 	mov.w	r3, #4294967295
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  401506:	2680      	movs	r6, #128	; 0x80
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401508:	2204      	movs	r2, #4
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  40150a:	2508      	movs	r5, #8
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  40150c:	2420      	movs	r4, #32
	p_twihs->TWIHS_IDR = ~0UL;
  40150e:	6283      	str	r3, [r0, #40]	; 0x28
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401510:	4b2f      	ldr	r3, [pc, #188]	; (4015d0 <twihs_master_init+0xd0>)
	p_twihs->TWIHS_SR;
  401512:	6a07      	ldr	r7, [r0, #32]
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  401514:	6006      	str	r6, [r0, #0]
	p_twihs->TWIHS_RHR;
  401516:	6b06      	ldr	r6, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401518:	6005      	str	r5, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  40151a:	6004      	str	r4, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  40151c:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  40151e:	684a      	ldr	r2, [r1, #4]
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401520:	429a      	cmp	r2, r3
  401522:	d84d      	bhi.n	4015c0 <twihs_master_init+0xc0>
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  401524:	4c2b      	ldr	r4, [pc, #172]	; (4015d4 <twihs_master_init+0xd4>)
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401526:	680b      	ldr	r3, [r1, #0]
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  401528:	42a2      	cmp	r2, r4
  40152a:	d92e      	bls.n	40158a <twihs_master_init+0x8a>
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  40152c:	4c2a      	ldr	r4, [pc, #168]	; (4015d8 <twihs_master_init+0xd8>)
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  40152e:	492b      	ldr	r1, [pc, #172]	; (4015dc <twihs_master_init+0xdc>)
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401530:	4414      	add	r4, r2
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401532:	fba1 2103 	umull	r2, r1, r1, r3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401536:	00a4      	lsls	r4, r4, #2
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401538:	0b89      	lsrs	r1, r1, #14
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  40153a:	fbb3 f3f4 	udiv	r3, r3, r4
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  40153e:	3903      	subs	r1, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401540:	3b03      	subs	r3, #3
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401542:	29ff      	cmp	r1, #255	; 0xff
  401544:	d940      	bls.n	4015c8 <twihs_master_init+0xc8>
  401546:	2200      	movs	r2, #0
  401548:	e000      	b.n	40154c <twihs_master_init+0x4c>
  40154a:	b13c      	cbz	r4, 40155c <twihs_master_init+0x5c>
			ckdiv++;
  40154c:	3201      	adds	r2, #1
			cldiv /= TWIHS_CLK_DIVIDER;
  40154e:	0849      	lsrs	r1, r1, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401550:	2a06      	cmp	r2, #6
  401552:	bf8c      	ite	hi
  401554:	2400      	movhi	r4, #0
  401556:	2401      	movls	r4, #1
  401558:	29ff      	cmp	r1, #255	; 0xff
  40155a:	d8f6      	bhi.n	40154a <twihs_master_init+0x4a>
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40155c:	2bff      	cmp	r3, #255	; 0xff
  40155e:	d907      	bls.n	401570 <twihs_master_init+0x70>
  401560:	b914      	cbnz	r4, 401568 <twihs_master_init+0x68>
  401562:	e005      	b.n	401570 <twihs_master_init+0x70>
  401564:	2a06      	cmp	r2, #6
  401566:	d803      	bhi.n	401570 <twihs_master_init+0x70>
			chdiv /= TWIHS_CLK_DIVIDER;
  401568:	085b      	lsrs	r3, r3, #1
			ckdiv++;
  40156a:	3201      	adds	r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40156c:	2bff      	cmp	r3, #255	; 0xff
  40156e:	d8f9      	bhi.n	401564 <twihs_master_init+0x64>
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401570:	021b      	lsls	r3, r3, #8
	uint32_t status = TWIHS_SUCCESS;
  401572:	2400      	movs	r4, #0
				TWIHS_CWGR_CKDIV(ckdiv);
  401574:	0412      	lsls	r2, r2, #16
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401576:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  401578:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  40157c:	b2c9      	uxtb	r1, r1
  40157e:	4313      	orrs	r3, r2
  401580:	430b      	orrs	r3, r1
		p_twihs->TWIHS_CWGR =
  401582:	6103      	str	r3, [r0, #16]
}
  401584:	4620      	mov	r0, r4
  401586:	bcf0      	pop	{r4, r5, r6, r7}
  401588:	4770      	bx	lr
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  40158a:	0052      	lsls	r2, r2, #1
  40158c:	fbb3 f3f2 	udiv	r3, r3, r2
  401590:	3b03      	subs	r3, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401592:	2200      	movs	r2, #0
  401594:	2bff      	cmp	r3, #255	; 0xff
  401596:	d802      	bhi.n	40159e <twihs_master_init+0x9e>
  401598:	e008      	b.n	4015ac <twihs_master_init+0xac>
  40159a:	2a06      	cmp	r2, #6
  40159c:	d803      	bhi.n	4015a6 <twihs_master_init+0xa6>
			c_lh_div /= TWIHS_CLK_DIVIDER;
  40159e:	085b      	lsrs	r3, r3, #1
			ckdiv++;
  4015a0:	3201      	adds	r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4015a2:	2bff      	cmp	r3, #255	; 0xff
  4015a4:	d8f9      	bhi.n	40159a <twihs_master_init+0x9a>
  4015a6:	0412      	lsls	r2, r2, #16
  4015a8:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  4015ac:	0219      	lsls	r1, r3, #8
	uint32_t status = TWIHS_SUCCESS;
  4015ae:	2400      	movs	r4, #0
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  4015b0:	b2db      	uxtb	r3, r3
  4015b2:	b289      	uxth	r1, r1
  4015b4:	4313      	orrs	r3, r2
  4015b6:	430b      	orrs	r3, r1
		p_twihs->TWIHS_CWGR =
  4015b8:	6103      	str	r3, [r0, #16]
}
  4015ba:	4620      	mov	r0, r4
  4015bc:	bcf0      	pop	{r4, r5, r6, r7}
  4015be:	4770      	bx	lr
		status = TWIHS_INVALID_ARGUMENT;
  4015c0:	2401      	movs	r4, #1
}
  4015c2:	4620      	mov	r0, r4
  4015c4:	bcf0      	pop	{r4, r5, r6, r7}
  4015c6:	4770      	bx	lr
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4015c8:	2401      	movs	r4, #1
	uint32_t ckdiv = 0;
  4015ca:	2200      	movs	r2, #0
  4015cc:	e7c6      	b.n	40155c <twihs_master_init+0x5c>
  4015ce:	bf00      	nop
  4015d0:	00061a80 	.word	0x00061a80
  4015d4:	0005dc00 	.word	0x0005dc00
  4015d8:	3ffd1200 	.word	0x3ffd1200
  4015dc:	057619f1 	.word	0x057619f1

004015e0 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  4015e0:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  4015e2:	2a00      	cmp	r2, #0
  4015e4:	d053      	beq.n	40168e <twihs_master_read+0xae>
{
  4015e6:	b470      	push	{r4, r5, r6}
	p_twihs->TWIHS_MMR = 0;
  4015e8:	2600      	movs	r6, #0
	uint8_t *buffer = p_packet->buffer;
  4015ea:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  4015ec:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4015ee:	684b      	ldr	r3, [r1, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  4015f0:	7c0d      	ldrb	r5, [r1, #16]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4015f2:	021b      	lsls	r3, r3, #8
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  4015f4:	042d      	lsls	r5, r5, #16
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4015f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  4015fa:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  4015fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  401602:	432b      	orrs	r3, r5
  401604:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401606:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401608:	684b      	ldr	r3, [r1, #4]
	if (len == 0)
  40160a:	b99b      	cbnz	r3, 401634 <twihs_master_read+0x54>
		return 0;
  40160c:	461d      	mov	r5, r3
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  40160e:	2301      	movs	r3, #1
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401610:	60c5      	str	r5, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  401612:	6003      	str	r3, [r0, #0]
		status = p_twihs->TWIHS_SR;
  401614:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401616:	05d9      	lsls	r1, r3, #23
  401618:	d41f      	bmi.n	40165a <twihs_master_read+0x7a>
  40161a:	2a01      	cmp	r2, #1
  40161c:	d020      	beq.n	401660 <twihs_master_read+0x80>
  40161e:	f247 5130 	movw	r1, #30000	; 0x7530
		if (!(status & TWIHS_SR_RXRDY)) {
  401622:	079e      	lsls	r6, r3, #30
  401624:	d412      	bmi.n	40164c <twihs_master_read+0x6c>
		status = p_twihs->TWIHS_SR;
  401626:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401628:	05dd      	lsls	r5, r3, #23
  40162a:	d416      	bmi.n	40165a <twihs_master_read+0x7a>
		if (!timeout--) {
  40162c:	3901      	subs	r1, #1
  40162e:	d1f8      	bne.n	401622 <twihs_master_read+0x42>
			return TWIHS_ERROR_TIMEOUT;
  401630:	2009      	movs	r0, #9
  401632:	e02a      	b.n	40168a <twihs_master_read+0xaa>
	if (len > 1) {
  401634:	2b01      	cmp	r3, #1
	val = addr[0];
  401636:	780d      	ldrb	r5, [r1, #0]
	if (len > 1) {
  401638:	dde9      	ble.n	40160e <twihs_master_read+0x2e>
		val |= addr[1];
  40163a:	784e      	ldrb	r6, [r1, #1]
	if (len > 2) {
  40163c:	2b02      	cmp	r3, #2
		val |= addr[1];
  40163e:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
	if (len > 2) {
  401642:	d0e4      	beq.n	40160e <twihs_master_read+0x2e>
		val |= addr[2];
  401644:	788b      	ldrb	r3, [r1, #2]
  401646:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
  40164a:	e7e0      	b.n	40160e <twihs_master_read+0x2e>
		*buffer++ = p_twihs->TWIHS_RHR;
  40164c:	6b03      	ldr	r3, [r0, #48]	; 0x30
		cnt--;
  40164e:	3a01      	subs	r2, #1
		*buffer++ = p_twihs->TWIHS_RHR;
  401650:	f804 3b01 	strb.w	r3, [r4], #1
		status = p_twihs->TWIHS_SR;
  401654:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401656:	05d9      	lsls	r1, r3, #23
  401658:	d5df      	bpl.n	40161a <twihs_master_read+0x3a>
			return TWIHS_RECEIVE_NACK;
  40165a:	2005      	movs	r0, #5
}
  40165c:	bc70      	pop	{r4, r5, r6}
  40165e:	4770      	bx	lr
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401660:	2102      	movs	r1, #2
		if (!(status & TWIHS_SR_RXRDY)) {
  401662:	079d      	lsls	r5, r3, #30
		if (status & TWIHS_SR_NACK) {
  401664:	f247 5230 	movw	r2, #30000	; 0x7530
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401668:	6001      	str	r1, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  40166a:	d407      	bmi.n	40167c <twihs_master_read+0x9c>
		status = p_twihs->TWIHS_SR;
  40166c:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40166e:	05de      	lsls	r6, r3, #23
  401670:	d4f3      	bmi.n	40165a <twihs_master_read+0x7a>
		if (!timeout--) {
  401672:	3a01      	subs	r2, #1
  401674:	d0dc      	beq.n	401630 <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  401676:	079d      	lsls	r5, r3, #30
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401678:	6001      	str	r1, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  40167a:	d5f7      	bpl.n	40166c <twihs_master_read+0x8c>
		*buffer++ = p_twihs->TWIHS_RHR;
  40167c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40167e:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401680:	6a03      	ldr	r3, [r0, #32]
  401682:	07db      	lsls	r3, r3, #31
  401684:	d5fc      	bpl.n	401680 <twihs_master_read+0xa0>
	p_twihs->TWIHS_SR;
  401686:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  401688:	2000      	movs	r0, #0
}
  40168a:	bc70      	pop	{r4, r5, r6}
  40168c:	4770      	bx	lr
		return TWIHS_INVALID_ARGUMENT;
  40168e:	2001      	movs	r0, #1
  401690:	4770      	bx	lr
  401692:	bf00      	nop

00401694 <twihs_master_write>:
{
  401694:	4603      	mov	r3, r0
	uint32_t status, cnt = p_packet->length;
  401696:	68c8      	ldr	r0, [r1, #12]
	if (cnt == 0) {
  401698:	2800      	cmp	r0, #0
  40169a:	d034      	beq.n	401706 <twihs_master_write+0x72>
{
  40169c:	b470      	push	{r4, r5, r6}
	p_twihs->TWIHS_MMR = 0;
  40169e:	2600      	movs	r6, #0
	uint8_t *buffer = p_packet->buffer;
  4016a0:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  4016a2:	605e      	str	r6, [r3, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  4016a4:	7c0a      	ldrb	r2, [r1, #16]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4016a6:	684d      	ldr	r5, [r1, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  4016a8:	0412      	lsls	r2, r2, #16
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4016aa:	022d      	lsls	r5, r5, #8
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  4016ac:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4016b0:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  4016b4:	432a      	orrs	r2, r5
  4016b6:	605a      	str	r2, [r3, #4]
	p_twihs->TWIHS_IADR = 0;
  4016b8:	60de      	str	r6, [r3, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4016ba:	684a      	ldr	r2, [r1, #4]
	if (len == 0)
  4016bc:	b98a      	cbnz	r2, 4016e2 <twihs_master_write+0x4e>
		return 0;
  4016be:	4615      	mov	r5, r2
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4016c0:	60dd      	str	r5, [r3, #12]
		status = p_twihs->TWIHS_SR;
  4016c2:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWIHS_SR_NACK) {
  4016c4:	05d6      	lsls	r6, r2, #23
  4016c6:	d409      	bmi.n	4016dc <twihs_master_write+0x48>
		if (!(status & TWIHS_SR_TXRDY)) {
  4016c8:	0755      	lsls	r5, r2, #29
  4016ca:	d5fa      	bpl.n	4016c2 <twihs_master_write+0x2e>
		p_twihs->TWIHS_THR = *buffer++;
  4016cc:	f814 2b01 	ldrb.w	r2, [r4], #1
	while (cnt > 0) {
  4016d0:	3801      	subs	r0, #1
		p_twihs->TWIHS_THR = *buffer++;
  4016d2:	635a      	str	r2, [r3, #52]	; 0x34
	while (cnt > 0) {
  4016d4:	d013      	beq.n	4016fe <twihs_master_write+0x6a>
		status = p_twihs->TWIHS_SR;
  4016d6:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWIHS_SR_NACK) {
  4016d8:	05d6      	lsls	r6, r2, #23
  4016da:	d5f5      	bpl.n	4016c8 <twihs_master_write+0x34>
			return TWIHS_RECEIVE_NACK;
  4016dc:	2005      	movs	r0, #5
}
  4016de:	bc70      	pop	{r4, r5, r6}
  4016e0:	4770      	bx	lr
	if (len > 1) {
  4016e2:	2a01      	cmp	r2, #1
	val = addr[0];
  4016e4:	780d      	ldrb	r5, [r1, #0]
	if (len > 1) {
  4016e6:	ddeb      	ble.n	4016c0 <twihs_master_write+0x2c>
		val |= addr[1];
  4016e8:	784e      	ldrb	r6, [r1, #1]
	if (len > 2) {
  4016ea:	2a02      	cmp	r2, #2
		val |= addr[1];
  4016ec:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
	if (len > 2) {
  4016f0:	d0e6      	beq.n	4016c0 <twihs_master_write+0x2c>
		val |= addr[2];
  4016f2:	788a      	ldrb	r2, [r1, #2]
  4016f4:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
  4016f8:	e7e2      	b.n	4016c0 <twihs_master_write+0x2c>
		if (status & TWIHS_SR_TXRDY) {
  4016fa:	0751      	lsls	r1, r2, #29
  4016fc:	d405      	bmi.n	40170a <twihs_master_write+0x76>
		status = p_twihs->TWIHS_SR;
  4016fe:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWIHS_SR_NACK) {
  401700:	05d4      	lsls	r4, r2, #23
  401702:	d4eb      	bmi.n	4016dc <twihs_master_write+0x48>
  401704:	e7f9      	b.n	4016fa <twihs_master_write+0x66>
		return TWIHS_INVALID_ARGUMENT;
  401706:	2001      	movs	r0, #1
  401708:	4770      	bx	lr
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  40170a:	2202      	movs	r2, #2
  40170c:	601a      	str	r2, [r3, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  40170e:	6a1a      	ldr	r2, [r3, #32]
  401710:	07d2      	lsls	r2, r2, #31
  401712:	d5fc      	bpl.n	40170e <twihs_master_write+0x7a>
}
  401714:	bc70      	pop	{r4, r5, r6}
  401716:	4770      	bx	lr

00401718 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  401718:	b5f0      	push	{r4, r5, r6, r7, lr}
  40171a:	4603      	mov	r3, r0
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40171c:	4c24      	ldr	r4, [pc, #144]	; (4017b0 <usart_init_rs232+0x98>)
	p_usart->US_MR = 0;
  40171e:	2000      	movs	r0, #0
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401720:	f04f 0e88 	mov.w	lr, #136	; 0x88
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401724:	f8c3 40e4 	str.w	r4, [r3, #228]	; 0xe4
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401728:	2724      	movs	r7, #36	; 0x24
	p_usart->US_CR = US_CR_RSTSTA;
  40172a:	f44f 7680 	mov.w	r6, #256	; 0x100
	p_usart->US_CR = US_CR_RTSDIS;
  40172e:	f44f 2500 	mov.w	r5, #524288	; 0x80000
	ul_reg_val = 0;
  401732:	4c20      	ldr	r4, [pc, #128]	; (4017b4 <usart_init_rs232+0x9c>)
	p_usart->US_MR = 0;
  401734:	6058      	str	r0, [r3, #4]
	ul_reg_val = 0;
  401736:	6020      	str	r0, [r4, #0]
	p_usart->US_RTOR = 0;
  401738:	6258      	str	r0, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40173a:	6298      	str	r0, [r3, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40173c:	f8c3 e000 	str.w	lr, [r3]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401740:	601f      	str	r7, [r3, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  401742:	601e      	str	r6, [r3, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  401744:	601d      	str	r5, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401746:	b361      	cbz	r1, 4017a2 <usart_init_rs232+0x8a>
  401748:	6808      	ldr	r0, [r1, #0]
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  40174a:	0105      	lsls	r5, r0, #4
  40174c:	42aa      	cmp	r2, r5
  40174e:	d31c      	bcc.n	40178a <usart_init_rs232+0x72>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401750:	0868      	lsrs	r0, r5, #1
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401752:	f64f 76fe 	movw	r6, #65534	; 0xfffe
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401756:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
  40175a:	fbb2 f2f5 	udiv	r2, r2, r5
	cd = cd_fp >> 3;
  40175e:	08d5      	lsrs	r5, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401760:	1e68      	subs	r0, r5, #1
  401762:	42b0      	cmp	r0, r6
  401764:	d81d      	bhi.n	4017a2 <usart_init_rs232+0x8a>
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401766:	0412      	lsls	r2, r2, #16
	p_usart->US_MR |= ul_reg_val;
  401768:	2000      	movs	r0, #0
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40176a:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  40176e:	432a      	orrs	r2, r5
  401770:	621a      	str	r2, [r3, #32]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401772:	684d      	ldr	r5, [r1, #4]
  401774:	688a      	ldr	r2, [r1, #8]
  401776:	690f      	ldr	r7, [r1, #16]
  401778:	432a      	orrs	r2, r5
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40177a:	68ce      	ldr	r6, [r1, #12]
	p_usart->US_MR |= ul_reg_val;
  40177c:	6859      	ldr	r1, [r3, #4]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40177e:	433a      	orrs	r2, r7
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401780:	4332      	orrs	r2, r6
	p_usart->US_MR |= ul_reg_val;
  401782:	4311      	orrs	r1, r2
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401784:	6022      	str	r2, [r4, #0]
	p_usart->US_MR |= ul_reg_val;
  401786:	6059      	str	r1, [r3, #4]
  401788:	bdf0      	pop	{r4, r5, r6, r7, pc}
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40178a:	00c0      	lsls	r0, r0, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40178c:	f64f 76fe 	movw	r6, #65534	; 0xfffe
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401790:	00d2      	lsls	r2, r2, #3
  401792:	eb02 0250 	add.w	r2, r2, r0, lsr #1
  401796:	fbb2 f2f0 	udiv	r2, r2, r0
	cd = cd_fp >> 3;
  40179a:	08d5      	lsrs	r5, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40179c:	1e68      	subs	r0, r5, #1
  40179e:	42b0      	cmp	r0, r6
  4017a0:	d901      	bls.n	4017a6 <usart_init_rs232+0x8e>
		return 1;
  4017a2:	2001      	movs	r0, #1
  4017a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		p_usart->US_MR |= US_MR_OVER;
  4017a6:	6858      	ldr	r0, [r3, #4]
  4017a8:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
  4017ac:	6058      	str	r0, [r3, #4]
  4017ae:	e7da      	b.n	401766 <usart_init_rs232+0x4e>
  4017b0:	55534100 	.word	0x55534100
  4017b4:	20430494 	.word	0x20430494

004017b8 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4017b8:	2340      	movs	r3, #64	; 0x40
  4017ba:	6003      	str	r3, [r0, #0]
  4017bc:	4770      	bx	lr
  4017be:	bf00      	nop

004017c0 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4017c0:	2310      	movs	r3, #16
  4017c2:	6003      	str	r3, [r0, #0]
  4017c4:	4770      	bx	lr
  4017c6:	bf00      	nop

004017c8 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
  4017c8:	6081      	str	r1, [r0, #8]
  4017ca:	4770      	bx	lr

004017cc <usart_get_status>:
	return p_usart->US_CSR;
  4017cc:	6940      	ldr	r0, [r0, #20]
}
  4017ce:	4770      	bx	lr

004017d0 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4017d0:	6943      	ldr	r3, [r0, #20]
  4017d2:	07db      	lsls	r3, r3, #31
  4017d4:	d505      	bpl.n	4017e2 <usart_read+0x12>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4017d6:	6983      	ldr	r3, [r0, #24]
	return 0;
  4017d8:	2000      	movs	r0, #0
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4017da:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4017de:	600b      	str	r3, [r1, #0]
	return 0;
  4017e0:	4770      	bx	lr
		return 1;
  4017e2:	2001      	movs	r0, #1
}
  4017e4:	4770      	bx	lr
  4017e6:	bf00      	nop

004017e8 <xdmac_configure_transfer>:
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4017e8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  4017ec:	6853      	ldr	r3, [r2, #4]
  4017ee:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  4017f0:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  4017f2:	6893      	ldr	r3, [r2, #8]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  4017f4:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  4017f6:	6813      	ldr	r3, [r2, #0]
  4017f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4017fc:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  4017fe:	6913      	ldr	r3, [r2, #16]
  401800:	f3c3 030b 	ubfx	r3, r3, #0, #12
  401804:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  401806:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  401808:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  40180a:	6993      	ldr	r3, [r2, #24]
  40180c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401810:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  401814:	69d3      	ldr	r3, [r2, #28]
  401816:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40181a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  40181e:	68d3      	ldr	r3, [r2, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  401820:	678b      	str	r3, [r1, #120]	; 0x78
  401822:	4770      	bx	lr

00401824 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401824:	b570      	push	{r4, r5, r6, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401826:	4810      	ldr	r0, [pc, #64]	; (401868 <sysclk_init+0x44>)
  401828:	4d10      	ldr	r5, [pc, #64]	; (40186c <sysclk_init+0x48>)
  40182a:	47a8      	blx	r5
	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
		break;

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  40182c:	2020      	movs	r0, #32
  40182e:	4b10      	ldr	r3, [pc, #64]	; (401870 <sysclk_init+0x4c>)
  401830:	4c10      	ldr	r4, [pc, #64]	; (401874 <sysclk_init+0x50>)
  401832:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  401834:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  401836:	2800      	cmp	r0, #0
  401838:	d0fc      	beq.n	401834 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40183a:	4b0f      	ldr	r3, [pc, #60]	; (401878 <sysclk_init+0x54>)
  40183c:	4798      	blx	r3
  40183e:	4c0f      	ldr	r4, [pc, #60]	; (40187c <sysclk_init+0x58>)
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401840:	4b0f      	ldr	r3, [pc, #60]	; (401880 <sysclk_init+0x5c>)
  401842:	4a10      	ldr	r2, [pc, #64]	; (401884 <sysclk_init+0x60>)
  401844:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  401846:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401848:	2800      	cmp	r0, #0
  40184a:	d0fc      	beq.n	401846 <sysclk_init+0x22>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  40184c:	2002      	movs	r0, #2
  40184e:	4b0e      	ldr	r3, [pc, #56]	; (401888 <sysclk_init+0x64>)
  401850:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401852:	4b0e      	ldr	r3, [pc, #56]	; (40188c <sysclk_init+0x68>)
  401854:	2000      	movs	r0, #0
  401856:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401858:	4b0d      	ldr	r3, [pc, #52]	; (401890 <sysclk_init+0x6c>)
  40185a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40185c:	462b      	mov	r3, r5
  40185e:	4802      	ldr	r0, [pc, #8]	; (401868 <sysclk_init+0x44>)

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  401860:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	system_init_flash(sysclk_get_cpu_hz());
  401864:	4718      	bx	r3
  401866:	bf00      	nop
  401868:	11e1a300 	.word	0x11e1a300
  40186c:	004025d9 	.word	0x004025d9
  401870:	004022f1 	.word	0x004022f1
  401874:	0040233d 	.word	0x0040233d
  401878:	0040234d 	.word	0x0040234d
  40187c:	0040235d 	.word	0x0040235d
  401880:	400e0600 	.word	0x400e0600
  401884:	20183f01 	.word	0x20183f01
  401888:	0040226d 	.word	0x0040226d
  40188c:	0040229d 	.word	0x0040229d
  401890:	004024f1 	.word	0x004024f1

00401894 <board_init>:

void board_init(void)
{
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401894:	4ba4      	ldr	r3, [pc, #656]	; (401b28 <board_init+0x294>)
  401896:	f44f 4200 	mov.w	r2, #32768	; 0x8000
{
  40189a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	WDT->WDT_MR = WDT_MR_WDDIS;
  40189e:	605a      	str	r2, [r3, #4]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4018a0:	f3bf 8f5f 	dmb	sy
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  4018a4:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 401b9c <board_init+0x308>
	dw_region_attr =
  4018a8:	4fa0      	ldr	r7, [pc, #640]	; (401b2c <board_init+0x298>)
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  4018aa:	4ea1      	ldr	r6, [pc, #644]	; (401b30 <board_init+0x29c>)
  4018ac:	4640      	mov	r0, r8
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4018ae:	4da1      	ldr	r5, [pc, #644]	; (401b34 <board_init+0x2a0>)
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  4018b0:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4018b2:	ea40 0107 	orr.w	r1, r0, r7
  4018b6:	2011      	movs	r0, #17
  4018b8:	47a8      	blx	r5
		mpu_cal_mpu_region_size(IFLASH_END_ADDRESS - IFLASH_START_ADDRESS) |
  4018ba:	489f      	ldr	r0, [pc, #636]	; (401b38 <board_init+0x2a4>)
  4018bc:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4018be:	499f      	ldr	r1, [pc, #636]	; (401b3c <board_init+0x2a8>)
	dw_region_attr =
  4018c0:	4c9f      	ldr	r4, [pc, #636]	; (401b40 <board_init+0x2ac>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4018c2:	4301      	orrs	r1, r0
  4018c4:	489f      	ldr	r0, [pc, #636]	; (401b44 <board_init+0x2b0>)
  4018c6:	47a8      	blx	r5
		mpu_cal_mpu_region_size(DTCM_END_ADDRESS - DTCM_START_ADDRESS) |
  4018c8:	4640      	mov	r0, r8
  4018ca:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4018cc:	ea40 0107 	orr.w	r1, r0, r7
  4018d0:	489d      	ldr	r0, [pc, #628]	; (401b48 <board_init+0x2b4>)
  4018d2:	47a8      	blx	r5
		mpu_cal_mpu_region_size(SRAM_FIRST_END_ADDRESS - SRAM_FIRST_START_ADDRESS)
  4018d4:	489d      	ldr	r0, [pc, #628]	; (401b4c <board_init+0x2b8>)
  4018d6:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4018d8:	ea40 0104 	orr.w	r1, r0, r4
  4018dc:	489c      	ldr	r0, [pc, #624]	; (401b50 <board_init+0x2bc>)
  4018de:	47a8      	blx	r5
		mpu_cal_mpu_region_size(SRAM_SECOND_END_ADDRESS - SRAM_SECOND_START_ADDRESS) |
  4018e0:	489c      	ldr	r0, [pc, #624]	; (401b54 <board_init+0x2c0>)
  4018e2:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4018e4:	ea40 0104 	orr.w	r1, r0, r4
  4018e8:	489b      	ldr	r0, [pc, #620]	; (401b58 <board_init+0x2c4>)
  4018ea:	47a8      	blx	r5
		mpu_cal_mpu_region_size(PERIPHERALS_END_ADDRESS - PERIPHERALS_START_ADDRESS)
  4018ec:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  4018f0:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4018f2:	499a      	ldr	r1, [pc, #616]	; (401b5c <board_init+0x2c8>)
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  4018f4:	4c9a      	ldr	r4, [pc, #616]	; (401b60 <board_init+0x2cc>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4018f6:	4301      	orrs	r1, r0
  4018f8:	489a      	ldr	r0, [pc, #616]	; (401b64 <board_init+0x2d0>)
  4018fa:	47a8      	blx	r5
		mpu_cal_mpu_region_size(EXT_EBI_END_ADDRESS - EXT_EBI_START_ADDRESS) |
  4018fc:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  401900:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401902:	4999      	ldr	r1, [pc, #612]	; (401b68 <board_init+0x2d4>)
  401904:	4301      	orrs	r1, r0
  401906:	4899      	ldr	r0, [pc, #612]	; (401b6c <board_init+0x2d8>)
  401908:	47a8      	blx	r5
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  40190a:	6a63      	ldr	r3, [r4, #36]	; 0x24
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  40190c:	2005      	movs	r0, #5
  40190e:	4a98      	ldr	r2, [pc, #608]	; (401b70 <board_init+0x2dc>)
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  401910:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
  401914:	6263      	str	r3, [r4, #36]	; 0x24
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  401916:	4790      	blx	r2
  __ASM volatile ("dsb");
  401918:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40191c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb");
  401920:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401924:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  401928:	f04f 0900 	mov.w	r9, #0
  40192c:	f8c4 9250 	str.w	r9, [r4, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  401930:	6963      	ldr	r3, [r4, #20]
  401932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  401936:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb");
  401938:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40193c:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401940:	4b8c      	ldr	r3, [pc, #560]	; (401b74 <board_init+0x2e0>)
  401942:	498d      	ldr	r1, [pc, #564]	; (401b78 <board_init+0x2e4>)
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401944:	4a8d      	ldr	r2, [pc, #564]	; (401b7c <board_init+0x2e8>)
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401946:	6059      	str	r1, [r3, #4]
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401948:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  40194a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40194e:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  401952:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  401956:	f023 0301 	bic.w	r3, r3, #1
  40195a:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  40195e:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
  401962:	f023 0301 	bic.w	r3, r3, #1
  401966:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  __ASM volatile ("dsb");
  40196a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40196e:	f3bf 8f6f 	isb	sy
  401972:	4c83      	ldr	r4, [pc, #524]	; (401b80 <board_init+0x2ec>)
  401974:	200a      	movs	r0, #10
  401976:	47a0      	blx	r4
  401978:	200b      	movs	r0, #11
  40197a:	47a0      	blx	r4
  40197c:	200c      	movs	r0, #12
  40197e:	47a0      	blx	r4
  401980:	2010      	movs	r0, #16
  401982:	47a0      	blx	r4
  401984:	2011      	movs	r0, #17
  401986:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401988:	f44f 7500 	mov.w	r5, #512	; 0x200
  40198c:	4c7d      	ldr	r4, [pc, #500]	; (401b84 <board_init+0x2f0>)
  40198e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  401992:	4f7d      	ldr	r7, [pc, #500]	; (401b88 <board_init+0x2f4>)
		base->PIO_PUDR = mask;
  401994:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401998:	6123      	str	r3, [r4, #16]
		base->PIO_PUDR = mask;
  40199a:	2610      	movs	r6, #16
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40199c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_PUDR = mask;
  4019a0:	f04f 0e08 	mov.w	lr, #8
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4019a4:	6323      	str	r3, [r4, #48]	; 0x30
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  4019a6:	4638      	mov	r0, r7
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4019a8:	613d      	str	r5, [r7, #16]
  4019aa:	464b      	mov	r3, r9
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4019ac:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
  4019b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4019b4:	633d      	str	r5, [r7, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4019b6:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4019b8:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  4019bc:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4019be:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4019c2:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  4019c4:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  4019c6:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4019ca:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4019ce:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 401ba0 <board_init+0x30c>
  4019d2:	f42c 7c00 	bic.w	ip, ip, #512	; 0x200
  4019d6:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4019da:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  4019de:	f42c 7c00 	bic.w	ip, ip, #512	; 0x200
  4019e2:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4019e6:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4019ea:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4019ee:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4019f2:	6621      	str	r1, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4019f4:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4019f8:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4019fa:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4019fc:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401a00:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  401a04:	f42c 1c00 	bic.w	ip, ip, #2097152	; 0x200000
  401a08:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401a0c:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  401a10:	f42c 1c00 	bic.w	ip, ip, #2097152	; 0x200000
  401a14:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401a18:	6061      	str	r1, [r4, #4]
  401a1a:	f8d8 1114 	ldr.w	r1, [r8, #276]	; 0x114
  401a1e:	ea41 0c06 	orr.w	ip, r1, r6
		base->PIO_PUDR = mask;
  401a22:	495a      	ldr	r1, [pc, #360]	; (401b8c <board_init+0x2f8>)
  401a24:	f8c8 c114 	str.w	ip, [r8, #276]	; 0x114
  401a28:	660e      	str	r6, [r1, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401a2a:	f8c1 6090 	str.w	r6, [r1, #144]	; 0x90
		base->PIO_MDDR = mask;
  401a2e:	654e      	str	r6, [r1, #84]	; 0x54
		base->PIO_IFDR = mask;
  401a30:	624e      	str	r6, [r1, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401a32:	f8c1 6080 	str.w	r6, [r1, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401a36:	f8d1 c070 	ldr.w	ip, [r1, #112]	; 0x70
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  401a3a:	f8df 8168 	ldr.w	r8, [pc, #360]	; 401ba4 <board_init+0x310>
  401a3e:	ea4c 0c06 	orr.w	ip, ip, r6
  401a42:	f8c1 c070 	str.w	ip, [r1, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401a46:	f8d1 c074 	ldr.w	ip, [r1, #116]	; 0x74
  401a4a:	ea4c 0c06 	orr.w	ip, ip, r6
  401a4e:	f8c1 c074 	str.w	ip, [r1, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401a52:	604e      	str	r6, [r1, #4]
  401a54:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
		base->PIO_PUDR = mask;
  401a58:	f8c4 e060 	str.w	lr, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401a5c:	f8c4 e090 	str.w	lr, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401a60:	f8c4 e054 	str.w	lr, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401a64:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401a68:	f8c4 e080 	str.w	lr, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401a6c:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  401a70:	f02c 0c08 	bic.w	ip, ip, #8
  401a74:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401a78:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  401a7c:	f02c 0c08 	bic.w	ip, ip, #8
  401a80:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401a84:	f8c4 e004 	str.w	lr, [r4, #4]
		base->PIO_PUDR = mask;
  401a88:	6626      	str	r6, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401a8a:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401a8e:	6566      	str	r6, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401a90:	6266      	str	r6, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401a92:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401a96:	f8d4 e070 	ldr.w	lr, [r4, #112]	; 0x70
  401a9a:	f02e 0e10 	bic.w	lr, lr, #16
  401a9e:	f8c4 e070 	str.w	lr, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401aa2:	f8d4 e074 	ldr.w	lr, [r4, #116]	; 0x74
  401aa6:	f02e 0e10 	bic.w	lr, lr, #16
  401aaa:	f8c4 e074 	str.w	lr, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401aae:	6066      	str	r6, [r4, #4]
  401ab0:	47c0      	blx	r8
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  401ab2:	464b      	mov	r3, r9
  401ab4:	4638      	mov	r0, r7
  401ab6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401aba:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401abe:	47c0      	blx	r8
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  401ac0:	4638      	mov	r0, r7
  401ac2:	2301      	movs	r3, #1
  401ac4:	22ff      	movs	r2, #255	; 0xff
  401ac6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401aca:	47c0      	blx	r8
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  401acc:	2301      	movs	r3, #1
  401ace:	223f      	movs	r2, #63	; 0x3f
  401ad0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401ad4:	482e      	ldr	r0, [pc, #184]	; (401b90 <board_init+0x2fc>)
  401ad6:	47c0      	blx	r8
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  401ad8:	4620      	mov	r0, r4
  401ada:	2301      	movs	r3, #1
  401adc:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  401ae0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401ae4:	47c0      	blx	r8
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  401ae6:	4638      	mov	r0, r7
  401ae8:	2301      	movs	r3, #1
  401aea:	f44f 7280 	mov.w	r2, #256	; 0x100
  401aee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401af2:	47c0      	blx	r8
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  401af4:	4638      	mov	r0, r7
  401af6:	2301      	movs	r3, #1
  401af8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401afc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401b00:	47c0      	blx	r8
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  401b02:	2301      	movs	r3, #1
  401b04:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401b08:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401b0c:	4821      	ldr	r0, [pc, #132]	; (401b94 <board_init+0x300>)
  401b0e:	47c0      	blx	r8
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  401b10:	464b      	mov	r3, r9
  401b12:	462a      	mov	r2, r5
  401b14:	4638      	mov	r0, r7
  401b16:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401b1a:	47c0      	blx	r8
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  401b1c:	4629      	mov	r1, r5
  401b1e:	4638      	mov	r0, r7
  401b20:	4b1d      	ldr	r3, [pc, #116]	; (401b98 <board_init+0x304>)
	pio_configure_pin(ISI_PCK_PIO, ISI_PCK_FLAGS);
	pio_configure_pin(ISI_PCK0_PIO, ISI_PCK0_FLAGS);
	pio_configure_pin(OV_PWD_GPIO, OV_PWD_FLAGS);
	pio_configure_pin(OV_RST_GPIO, OV_RST_FLAGS);
#endif
}
  401b22:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  401b26:	4718      	bx	r3
  401b28:	400e1850 	.word	0x400e1850
  401b2c:	01000001 	.word	0x01000001
  401b30:	00401bc1 	.word	0x00401bc1
  401b34:	00401bb5 	.word	0x00401bb5
  401b38:	001fffff 	.word	0x001fffff
  401b3c:	06230001 	.word	0x06230001
  401b40:	03230001 	.word	0x03230001
  401b44:	00400012 	.word	0x00400012
  401b48:	20000013 	.word	0x20000013
  401b4c:	0003ffff 	.word	0x0003ffff
  401b50:	20400014 	.word	0x20400014
  401b54:	0001ffff 	.word	0x0001ffff
  401b58:	20440015 	.word	0x20440015
  401b5c:	13010001 	.word	0x13010001
  401b60:	e000ed00 	.word	0xe000ed00
  401b64:	40000016 	.word	0x40000016
  401b68:	03000001 	.word	0x03000001
  401b6c:	60000017 	.word	0x60000017
  401b70:	00401ba9 	.word	0x00401ba9
  401b74:	400e0c00 	.word	0x400e0c00
  401b78:	5a00080c 	.word	0x5a00080c
  401b7c:	5a00070c 	.word	0x5a00070c
  401b80:	0040236d 	.word	0x0040236d
  401b84:	400e0e00 	.word	0x400e0e00
  401b88:	400e1200 	.word	0x400e1200
  401b8c:	400e1000 	.word	0x400e1000
  401b90:	400e1600 	.word	0x400e1600
  401b94:	400e1400 	.word	0x400e1400
  401b98:	00401be5 	.word	0x00401be5
  401b9c:	003fffff 	.word	0x003fffff
  401ba0:	40088000 	.word	0x40088000
  401ba4:	00401be9 	.word	0x00401be9

00401ba8 <mpu_enable>:
 *
 * \param dwMPUEnable  Enable/Disable the memory region.
 */
void mpu_enable(uint32_t dw_mpu_enable)
{
	MPU->CTRL = dw_mpu_enable ;
  401ba8:	4b01      	ldr	r3, [pc, #4]	; (401bb0 <mpu_enable+0x8>)
  401baa:	6058      	str	r0, [r3, #4]
  401bac:	4770      	bx	lr
  401bae:	bf00      	nop
  401bb0:	e000ed90 	.word	0xe000ed90

00401bb4 <mpu_set_region>:
 * \param dwRegionBaseAddr  Memory region base address.
 * \param dwRegionAttr  Memory region attributes.
 */
void mpu_set_region(uint32_t dw_region_base_addr, uint32_t dw_region_attr)
{
	MPU->RBAR = dw_region_base_addr;
  401bb4:	4b01      	ldr	r3, [pc, #4]	; (401bbc <mpu_set_region+0x8>)
  401bb6:	60d8      	str	r0, [r3, #12]
	MPU->RASR = dw_region_attr;
  401bb8:	6119      	str	r1, [r3, #16]
  401bba:	4770      	bx	lr
  401bbc:	e000ed90 	.word	0xe000ed90

00401bc0 <mpu_cal_mpu_region_size>:
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;

	while( dwReturnValue < 31 ) {
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  401bc0:	2820      	cmp	r0, #32
  401bc2:	d90d      	bls.n	401be0 <mpu_cal_mpu_region_size+0x20>
  401bc4:	2240      	movs	r2, #64	; 0x40
  401bc6:	2305      	movs	r3, #5
  401bc8:	e002      	b.n	401bd0 <mpu_cal_mpu_region_size+0x10>
			break;
		} else {
			dwReturnValue++;
  401bca:	3301      	adds	r3, #1
	while( dwReturnValue < 31 ) {
  401bcc:	2b1f      	cmp	r3, #31
  401bce:	d005      	beq.n	401bdc <mpu_cal_mpu_region_size+0x1c>
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  401bd0:	4290      	cmp	r0, r2
		}
		dwRegionSize <<= 1;
  401bd2:	ea4f 0242 	mov.w	r2, r2, lsl #1
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  401bd6:	d8f8      	bhi.n	401bca <mpu_cal_mpu_region_size+0xa>
  401bd8:	0058      	lsls	r0, r3, #1
  401bda:	4770      	bx	lr
  401bdc:	203e      	movs	r0, #62	; 0x3e
  401bde:	4770      	bx	lr
  401be0:	2008      	movs	r0, #8
	}

	return ( dwReturnValue << 1 );
}
  401be2:	4770      	bx	lr

00401be4 <pio_set>:
  401be4:	6301      	str	r1, [r0, #48]	; 0x30
  401be6:	4770      	bx	lr

00401be8 <pio_configure>:
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
	/* Configure pins */
	switch (ul_type) {
  401be8:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
{
  401bec:	b430      	push	{r4, r5}
	switch (ul_type) {
  401bee:	d03b      	beq.n	401c68 <pio_configure+0x80>
  401bf0:	d931      	bls.n	401c56 <pio_configure+0x6e>
  401bf2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401bf6:	d01b      	beq.n	401c30 <pio_configure+0x48>
  401bf8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401bfc:	d018      	beq.n	401c30 <pio_configure+0x48>
  401bfe:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401c02:	d003      	beq.n	401c0c <pio_configure+0x24>
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
		break;

	default:
		return 0;
  401c04:	2300      	movs	r3, #0
	}

	return 1;
}
  401c06:	bc30      	pop	{r4, r5}
  401c08:	4618      	mov	r0, r3
  401c0a:	4770      	bx	lr
	if (ul_pull_up_enable) {
  401c0c:	07dd      	lsls	r5, r3, #31
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401c0e:	6442      	str	r2, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401c10:	d448      	bmi.n	401ca4 <pio_configure+0xbc>
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401c12:	f013 0f0a 	tst.w	r3, #10
		p_pio->PIO_PUDR = ul_mask;
  401c16:	6602      	str	r2, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401c18:	d048      	beq.n	401cac <pio_configure+0xc4>
	if (ul_attribute & PIO_DEGLITCH) {
  401c1a:	079c      	lsls	r4, r3, #30
		p_pio->PIO_IFER = ul_mask;
  401c1c:	6202      	str	r2, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  401c1e:	d548      	bpl.n	401cb2 <pio_configure+0xca>
		p_pio->PIO_IFSCDR = ul_mask;
  401c20:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
	return 1;
  401c24:	2301      	movs	r3, #1
	p_pio->PIO_ODR = ul_mask;
  401c26:	6142      	str	r2, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401c28:	6002      	str	r2, [r0, #0]
}
  401c2a:	4618      	mov	r0, r3
  401c2c:	bc30      	pop	{r4, r5}
  401c2e:	4770      	bx	lr
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  401c30:	f003 0404 	and.w	r4, r3, #4
	if (ul_pull_up_enable) {
  401c34:	07db      	lsls	r3, r3, #31
	p_pio->PIO_IDR = ul_mask;
  401c36:	6442      	str	r2, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401c38:	d52f      	bpl.n	401c9a <pio_configure+0xb2>
		p_pio->PIO_PUER = ul_mask;
  401c3a:	6642      	str	r2, [r0, #100]	; 0x64
	if (ul_multidrive_enable) {
  401c3c:	2c00      	cmp	r4, #0
  401c3e:	d02f      	beq.n	401ca0 <pio_configure+0xb8>
		p_pio->PIO_MDER = ul_mask;
  401c40:	6502      	str	r2, [r0, #80]	; 0x50
	if (ul_default_level) {
  401c42:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401c46:	d04e      	beq.n	401ce6 <pio_configure+0xfe>
		p_pio->PIO_CODR = ul_mask;
  401c48:	6342      	str	r2, [r0, #52]	; 0x34
	return 1;
  401c4a:	2301      	movs	r3, #1
	p_pio->PIO_OER = ul_mask;
  401c4c:	6102      	str	r2, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401c4e:	6002      	str	r2, [r0, #0]
}
  401c50:	4618      	mov	r0, r3
  401c52:	bc30      	pop	{r4, r5}
  401c54:	4770      	bx	lr
	switch (ul_type) {
  401c56:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401c5a:	d005      	beq.n	401c68 <pio_configure+0x80>
  401c5c:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401c60:	d002      	beq.n	401c68 <pio_configure+0x80>
  401c62:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401c66:	d1cd      	bne.n	401c04 <pio_configure+0x1c>
	switch (ul_type) {
  401c68:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
	p_pio->PIO_IDR = ul_mask;
  401c6c:	6442      	str	r2, [r0, #68]	; 0x44
	switch (ul_type) {
  401c6e:	d03c      	beq.n	401cea <pio_configure+0x102>
  401c70:	d924      	bls.n	401cbc <pio_configure+0xd4>
  401c72:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401c76:	d042      	beq.n	401cfe <pio_configure+0x116>
  401c78:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401c7c:	d105      	bne.n	401c8a <pio_configure+0xa2>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c7e:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401c80:	4311      	orrs	r1, r2
  401c82:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401c84:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401c86:	4311      	orrs	r1, r2
  401c88:	6741      	str	r1, [r0, #116]	; 0x74
	if (ul_pull_up_enable) {
  401c8a:	07db      	lsls	r3, r3, #31
	p_pio->PIO_PDR = ul_mask;
  401c8c:	6042      	str	r2, [r0, #4]
	if (ul_pull_up_enable) {
  401c8e:	d525      	bpl.n	401cdc <pio_configure+0xf4>
	return 1;
  401c90:	2301      	movs	r3, #1
		p_pio->PIO_PUER = ul_mask;
  401c92:	6642      	str	r2, [r0, #100]	; 0x64
}
  401c94:	4618      	mov	r0, r3
  401c96:	bc30      	pop	{r4, r5}
  401c98:	4770      	bx	lr
		p_pio->PIO_PUDR = ul_mask;
  401c9a:	6602      	str	r2, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  401c9c:	2c00      	cmp	r4, #0
  401c9e:	d1cf      	bne.n	401c40 <pio_configure+0x58>
		p_pio->PIO_MDDR = ul_mask;
  401ca0:	6542      	str	r2, [r0, #84]	; 0x54
  401ca2:	e7ce      	b.n	401c42 <pio_configure+0x5a>
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401ca4:	f013 0f0a 	tst.w	r3, #10
		p_pio->PIO_PUER = ul_mask;
  401ca8:	6642      	str	r2, [r0, #100]	; 0x64
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401caa:	d1b6      	bne.n	401c1a <pio_configure+0x32>
	if (ul_attribute & PIO_DEGLITCH) {
  401cac:	079c      	lsls	r4, r3, #30
		p_pio->PIO_IFDR = ul_mask;
  401cae:	6242      	str	r2, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  401cb0:	d4b6      	bmi.n	401c20 <pio_configure+0x38>
		if (ul_attribute & PIO_DEBOUNCE) {
  401cb2:	0719      	lsls	r1, r3, #28
  401cb4:	d5b6      	bpl.n	401c24 <pio_configure+0x3c>
			p_pio->PIO_IFSCER = ul_mask;
  401cb6:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  401cba:	e7b3      	b.n	401c24 <pio_configure+0x3c>
	switch (ul_type) {
  401cbc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401cc0:	d1e3      	bne.n	401c8a <pio_configure+0xa2>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401cc2:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401cc4:	43d1      	mvns	r1, r2
  401cc6:	6f05      	ldr	r5, [r0, #112]	; 0x70
  401cc8:	402c      	ands	r4, r5
  401cca:	460d      	mov	r5, r1
  401ccc:	400c      	ands	r4, r1
  401cce:	6704      	str	r4, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401cd0:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401cd2:	6f44      	ldr	r4, [r0, #116]	; 0x74
  401cd4:	4021      	ands	r1, r4
  401cd6:	4029      	ands	r1, r5
  401cd8:	6741      	str	r1, [r0, #116]	; 0x74
  401cda:	e7d6      	b.n	401c8a <pio_configure+0xa2>
	return 1;
  401cdc:	2301      	movs	r3, #1
		p_pio->PIO_PUDR = ul_mask;
  401cde:	6602      	str	r2, [r0, #96]	; 0x60
}
  401ce0:	4618      	mov	r0, r3
  401ce2:	bc30      	pop	{r4, r5}
  401ce4:	4770      	bx	lr
		p_pio->PIO_SODR = ul_mask;
  401ce6:	6302      	str	r2, [r0, #48]	; 0x30
  401ce8:	e7af      	b.n	401c4a <pio_configure+0x62>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401cea:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401cec:	4311      	orrs	r1, r2
  401cee:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401cf0:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401cf2:	6f44      	ldr	r4, [r0, #116]	; 0x74
  401cf4:	4021      	ands	r1, r4
  401cf6:	ea21 0102 	bic.w	r1, r1, r2
  401cfa:	6741      	str	r1, [r0, #116]	; 0x74
  401cfc:	e7c5      	b.n	401c8a <pio_configure+0xa2>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401cfe:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401d00:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401d02:	4021      	ands	r1, r4
  401d04:	ea21 0102 	bic.w	r1, r1, r2
  401d08:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401d0a:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401d0c:	4311      	orrs	r1, r2
  401d0e:	6741      	str	r1, [r0, #116]	; 0x74
  401d10:	e7bb      	b.n	401c8a <pio_configure+0xa2>
  401d12:	bf00      	nop

00401d14 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401d14:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401d16:	4770      	bx	lr

00401d18 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401d18:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401d1a:	4770      	bx	lr

00401d1c <pio_configure_pin>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401d1c:	4b53      	ldr	r3, [pc, #332]	; (401e6c <pio_configure_pin+0x150>)
	switch (ul_flags & PIO_TYPE_Msk) {
  401d1e:	f001 42f0 	and.w	r2, r1, #2013265920	; 0x78000000
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401d22:	eb03 1350 	add.w	r3, r3, r0, lsr #5
	switch (ul_flags & PIO_TYPE_Msk) {
  401d26:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
{
  401d2a:	b470      	push	{r4, r5, r6}
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401d2c:	ea4f 2343 	mov.w	r3, r3, lsl #9
	switch (ul_flags & PIO_TYPE_Msk) {
  401d30:	d06d      	beq.n	401e0e <pio_configure_pin+0xf2>
  401d32:	d80b      	bhi.n	401d4c <pio_configure_pin+0x30>
  401d34:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
  401d38:	d027      	beq.n	401d8a <pio_configure_pin+0x6e>
  401d3a:	f1b2 5fc0 	cmp.w	r2, #402653184	; 0x18000000
  401d3e:	d052      	beq.n	401de6 <pio_configure_pin+0xca>
  401d40:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
  401d44:	d038      	beq.n	401db8 <pio_configure_pin+0x9c>
		return 0;
  401d46:	2000      	movs	r0, #0
}
  401d48:	bc70      	pop	{r4, r5, r6}
  401d4a:	4770      	bx	lr
	switch (ul_flags & PIO_TYPE_Msk) {
  401d4c:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
  401d50:	d066      	beq.n	401e20 <pio_configure_pin+0x104>
  401d52:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401d56:	d063      	beq.n	401e20 <pio_configure_pin+0x104>
  401d58:	f1b2 5f20 	cmp.w	r2, #671088640	; 0x28000000
  401d5c:	d1f3      	bne.n	401d46 <pio_configure_pin+0x2a>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401d5e:	f000 001f 	and.w	r0, r0, #31
  401d62:	2201      	movs	r2, #1
	if (ul_pull_up_enable) {
  401d64:	07cd      	lsls	r5, r1, #31
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401d66:	fa02 f200 	lsl.w	r2, r2, r0
	p_pio->PIO_IDR = ul_mask;
  401d6a:	645a      	str	r2, [r3, #68]	; 0x44
	if (ul_pull_up_enable) {
  401d6c:	d573      	bpl.n	401e56 <pio_configure_pin+0x13a>
		p_pio->PIO_PUER = ul_mask;
  401d6e:	665a      	str	r2, [r3, #100]	; 0x64
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401d70:	f011 0f0a 	tst.w	r1, #10
  401d74:	d06d      	beq.n	401e52 <pio_configure_pin+0x136>
		p_pio->PIO_IFER = ul_mask;
  401d76:	621a      	str	r2, [r3, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  401d78:	078c      	lsls	r4, r1, #30
  401d7a:	d56e      	bpl.n	401e5a <pio_configure_pin+0x13e>
		p_pio->PIO_IFSCDR = ul_mask;
  401d7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  401d80:	615a      	str	r2, [r3, #20]
	return 1;
  401d82:	2001      	movs	r0, #1
	p_pio->PIO_PER = ul_mask;
  401d84:	601a      	str	r2, [r3, #0]
}
  401d86:	bc70      	pop	{r4, r5, r6}
  401d88:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401d8a:	f000 021f 	and.w	r2, r0, #31
  401d8e:	2001      	movs	r0, #1
	if (ul_pull_up_enable) {
  401d90:	07c9      	lsls	r1, r1, #31
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401d92:	fa00 f202 	lsl.w	r2, r0, r2
	p_pio->PIO_IDR = ul_mask;
  401d96:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABCDSR[0];
  401d98:	6f1c      	ldr	r4, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401d9a:	ea44 0402 	orr.w	r4, r4, r2
  401d9e:	671c      	str	r4, [r3, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401da0:	6f5c      	ldr	r4, [r3, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401da2:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  401da4:	ea04 0405 	and.w	r4, r4, r5
  401da8:	ea24 0402 	bic.w	r4, r4, r2
  401dac:	675c      	str	r4, [r3, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  401dae:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
  401db0:	d516      	bpl.n	401de0 <pio_configure_pin+0xc4>
		p_pio->PIO_PUER = ul_mask;
  401db2:	665a      	str	r2, [r3, #100]	; 0x64
}
  401db4:	bc70      	pop	{r4, r5, r6}
  401db6:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401db8:	f000 021f 	and.w	r2, r0, #31
  401dbc:	2001      	movs	r0, #1
  401dbe:	fa00 f202 	lsl.w	r2, r0, r2
	p_pio->PIO_IDR = ul_mask;
  401dc2:	645a      	str	r2, [r3, #68]	; 0x44
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401dc4:	43d6      	mvns	r6, r2
		ul_sr = p_pio->PIO_ABCDSR[0];
  401dc6:	6f1d      	ldr	r5, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401dc8:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  401dca:	4025      	ands	r5, r4
  401dcc:	4035      	ands	r5, r6
  401dce:	671d      	str	r5, [r3, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401dd0:	6f5c      	ldr	r4, [r3, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401dd2:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  401dd4:	402c      	ands	r4, r5
  401dd6:	4034      	ands	r4, r6
  401dd8:	675c      	str	r4, [r3, #116]	; 0x74
	if (ul_pull_up_enable) {
  401dda:	07cc      	lsls	r4, r1, #31
	p_pio->PIO_PDR = ul_mask;
  401ddc:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
  401dde:	d4e8      	bmi.n	401db2 <pio_configure_pin+0x96>
		p_pio->PIO_PUDR = ul_mask;
  401de0:	661a      	str	r2, [r3, #96]	; 0x60
}
  401de2:	bc70      	pop	{r4, r5, r6}
  401de4:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401de6:	f000 021f 	and.w	r2, r0, #31
  401dea:	2001      	movs	r0, #1
  401dec:	fa00 f202 	lsl.w	r2, r0, r2
	p_pio->PIO_IDR = ul_mask;
  401df0:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABCDSR[0];
  401df2:	6f1c      	ldr	r4, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401df4:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  401df6:	402c      	ands	r4, r5
  401df8:	ea24 0402 	bic.w	r4, r4, r2
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401dfc:	671c      	str	r4, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
  401dfe:	07ce      	lsls	r6, r1, #31
		ul_sr = p_pio->PIO_ABCDSR[1];
  401e00:	6f5c      	ldr	r4, [r3, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401e02:	ea44 0402 	orr.w	r4, r4, r2
  401e06:	675c      	str	r4, [r3, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  401e08:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
  401e0a:	d5e9      	bpl.n	401de0 <pio_configure_pin+0xc4>
  401e0c:	e7d1      	b.n	401db2 <pio_configure_pin+0x96>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401e0e:	f000 021f 	and.w	r2, r0, #31
  401e12:	2001      	movs	r0, #1
  401e14:	fa00 f202 	lsl.w	r2, r0, r2
	p_pio->PIO_IDR = ul_mask;
  401e18:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABCDSR[0];
  401e1a:	6f1c      	ldr	r4, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401e1c:	4314      	orrs	r4, r2
  401e1e:	e7ed      	b.n	401dfc <pio_configure_pin+0xe0>
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401e20:	f000 001f 	and.w	r0, r0, #31
  401e24:	2201      	movs	r2, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401e26:	f001 5460 	and.w	r4, r1, #939524096	; 0x38000000
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  401e2a:	f001 0504 	and.w	r5, r1, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401e2e:	4082      	lsls	r2, r0
	if (ul_pull_up_enable) {
  401e30:	07c9      	lsls	r1, r1, #31
	p_pio->PIO_IDR = ul_mask;
  401e32:	645a      	str	r2, [r3, #68]	; 0x44
	if (ul_pull_up_enable) {
  401e34:	d50b      	bpl.n	401e4e <pio_configure_pin+0x132>
		p_pio->PIO_PUER = ul_mask;
  401e36:	665a      	str	r2, [r3, #100]	; 0x64
	if (ul_multidrive_enable) {
  401e38:	b1a5      	cbz	r5, 401e64 <pio_configure_pin+0x148>
		p_pio->PIO_MDER = ul_mask;
  401e3a:	651a      	str	r2, [r3, #80]	; 0x50
	if (ul_default_level) {
  401e3c:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
  401e40:	d012      	beq.n	401e68 <pio_configure_pin+0x14c>
		p_pio->PIO_CODR = ul_mask;
  401e42:	635a      	str	r2, [r3, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  401e44:	611a      	str	r2, [r3, #16]
	return 1;
  401e46:	2001      	movs	r0, #1
	p_pio->PIO_PER = ul_mask;
  401e48:	601a      	str	r2, [r3, #0]
}
  401e4a:	bc70      	pop	{r4, r5, r6}
  401e4c:	4770      	bx	lr
		p_pio->PIO_PUDR = ul_mask;
  401e4e:	661a      	str	r2, [r3, #96]	; 0x60
  401e50:	e7f2      	b.n	401e38 <pio_configure_pin+0x11c>
		p_pio->PIO_IFDR = ul_mask;
  401e52:	625a      	str	r2, [r3, #36]	; 0x24
  401e54:	e790      	b.n	401d78 <pio_configure_pin+0x5c>
		p_pio->PIO_PUDR = ul_mask;
  401e56:	661a      	str	r2, [r3, #96]	; 0x60
  401e58:	e78a      	b.n	401d70 <pio_configure_pin+0x54>
		if (ul_attribute & PIO_DEBOUNCE) {
  401e5a:	0708      	lsls	r0, r1, #28
  401e5c:	d590      	bpl.n	401d80 <pio_configure_pin+0x64>
			p_pio->PIO_IFSCER = ul_mask;
  401e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  401e62:	e78d      	b.n	401d80 <pio_configure_pin+0x64>
		p_pio->PIO_MDDR = ul_mask;
  401e64:	655a      	str	r2, [r3, #84]	; 0x54
  401e66:	e7e9      	b.n	401e3c <pio_configure_pin+0x120>
		p_pio->PIO_SODR = ul_mask;
  401e68:	631a      	str	r2, [r3, #48]	; 0x30
  401e6a:	e7eb      	b.n	401e44 <pio_configure_pin+0x128>
  401e6c:	00200707 	.word	0x00200707

00401e70 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401e70:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  401e72:	4b2e      	ldr	r3, [pc, #184]	; (401f2c <PIOA_Handler+0xbc>)
  401e74:	482e      	ldr	r0, [pc, #184]	; (401f30 <PIOA_Handler+0xc0>)
  401e76:	4798      	blx	r3
  401e78:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401e7a:	4b2e      	ldr	r3, [pc, #184]	; (401f34 <PIOA_Handler+0xc4>)
  401e7c:	482c      	ldr	r0, [pc, #176]	; (401f30 <PIOA_Handler+0xc0>)
  401e7e:	4798      	blx	r3
	if (status != 0) {
  401e80:	4005      	ands	r5, r0
  401e82:	d015      	beq.n	401eb0 <PIOA_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401e84:	4c2c      	ldr	r4, [pc, #176]	; (401f38 <PIOA_Handler+0xc8>)
  401e86:	6820      	ldr	r0, [r4, #0]
  401e88:	280a      	cmp	r0, #10
  401e8a:	d019      	beq.n	401ec0 <PIOA_Handler+0x50>
  401e8c:	6920      	ldr	r0, [r4, #16]
  401e8e:	280a      	cmp	r0, #10
  401e90:	d01f      	beq.n	401ed2 <PIOA_Handler+0x62>
  401e92:	6a20      	ldr	r0, [r4, #32]
  401e94:	280a      	cmp	r0, #10
  401e96:	d025      	beq.n	401ee4 <PIOA_Handler+0x74>
  401e98:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401e9a:	280a      	cmp	r0, #10
  401e9c:	d02b      	beq.n	401ef6 <PIOA_Handler+0x86>
  401e9e:	6c20      	ldr	r0, [r4, #64]	; 0x40
  401ea0:	280a      	cmp	r0, #10
  401ea2:	d031      	beq.n	401f08 <PIOA_Handler+0x98>
  401ea4:	6d20      	ldr	r0, [r4, #80]	; 0x50
  401ea6:	280a      	cmp	r0, #10
  401ea8:	d037      	beq.n	401f1a <PIOA_Handler+0xaa>
  401eaa:	6e20      	ldr	r0, [r4, #96]	; 0x60
  401eac:	280a      	cmp	r0, #10
  401eae:	d000      	beq.n	401eb2 <PIOA_Handler+0x42>
  401eb0:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401eb2:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401eb4:	4229      	tst	r1, r5
  401eb6:	d0fb      	beq.n	401eb0 <PIOA_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401eb8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	pio_handler_process(PIOA, ID_PIOA);
}
  401eba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401ebe:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401ec0:	6861      	ldr	r1, [r4, #4]
  401ec2:	420d      	tst	r5, r1
  401ec4:	d0e2      	beq.n	401e8c <PIOA_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401ec6:	68e3      	ldr	r3, [r4, #12]
  401ec8:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401eca:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  401ecc:	439d      	bics	r5, r3
  401ece:	d0ef      	beq.n	401eb0 <PIOA_Handler+0x40>
  401ed0:	e7dc      	b.n	401e8c <PIOA_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401ed2:	6961      	ldr	r1, [r4, #20]
  401ed4:	4229      	tst	r1, r5
  401ed6:	d0dc      	beq.n	401e92 <PIOA_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401ed8:	69e3      	ldr	r3, [r4, #28]
  401eda:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401edc:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  401ede:	439d      	bics	r5, r3
  401ee0:	d0e6      	beq.n	401eb0 <PIOA_Handler+0x40>
  401ee2:	e7d6      	b.n	401e92 <PIOA_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401ee4:	6a61      	ldr	r1, [r4, #36]	; 0x24
  401ee6:	4229      	tst	r1, r5
  401ee8:	d0d6      	beq.n	401e98 <PIOA_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401eea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401eec:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401eee:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  401ef0:	439d      	bics	r5, r3
  401ef2:	d0dd      	beq.n	401eb0 <PIOA_Handler+0x40>
  401ef4:	e7d0      	b.n	401e98 <PIOA_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401ef6:	6b61      	ldr	r1, [r4, #52]	; 0x34
  401ef8:	4229      	tst	r1, r5
  401efa:	d0d0      	beq.n	401e9e <PIOA_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401efc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401efe:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401f00:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  401f02:	439d      	bics	r5, r3
  401f04:	d0d4      	beq.n	401eb0 <PIOA_Handler+0x40>
  401f06:	e7ca      	b.n	401e9e <PIOA_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401f08:	6c61      	ldr	r1, [r4, #68]	; 0x44
  401f0a:	4229      	tst	r1, r5
  401f0c:	d0ca      	beq.n	401ea4 <PIOA_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401f0e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401f10:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401f12:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  401f14:	439d      	bics	r5, r3
  401f16:	d0cb      	beq.n	401eb0 <PIOA_Handler+0x40>
  401f18:	e7c4      	b.n	401ea4 <PIOA_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401f1a:	6d61      	ldr	r1, [r4, #84]	; 0x54
  401f1c:	4229      	tst	r1, r5
  401f1e:	d0c4      	beq.n	401eaa <PIOA_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401f20:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  401f22:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401f24:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  401f26:	439d      	bics	r5, r3
  401f28:	d0c2      	beq.n	401eb0 <PIOA_Handler+0x40>
  401f2a:	e7be      	b.n	401eaa <PIOA_Handler+0x3a>
  401f2c:	00401d15 	.word	0x00401d15
  401f30:	400e0e00 	.word	0x400e0e00
  401f34:	00401d19 	.word	0x00401d19
  401f38:	20430498 	.word	0x20430498

00401f3c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401f3c:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  401f3e:	4b2e      	ldr	r3, [pc, #184]	; (401ff8 <PIOB_Handler+0xbc>)
  401f40:	482e      	ldr	r0, [pc, #184]	; (401ffc <PIOB_Handler+0xc0>)
  401f42:	4798      	blx	r3
  401f44:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401f46:	4b2e      	ldr	r3, [pc, #184]	; (402000 <PIOB_Handler+0xc4>)
  401f48:	482c      	ldr	r0, [pc, #176]	; (401ffc <PIOB_Handler+0xc0>)
  401f4a:	4798      	blx	r3
	if (status != 0) {
  401f4c:	4005      	ands	r5, r0
  401f4e:	d015      	beq.n	401f7c <PIOB_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401f50:	4c2c      	ldr	r4, [pc, #176]	; (402004 <PIOB_Handler+0xc8>)
  401f52:	6820      	ldr	r0, [r4, #0]
  401f54:	280b      	cmp	r0, #11
  401f56:	d019      	beq.n	401f8c <PIOB_Handler+0x50>
  401f58:	6920      	ldr	r0, [r4, #16]
  401f5a:	280b      	cmp	r0, #11
  401f5c:	d01f      	beq.n	401f9e <PIOB_Handler+0x62>
  401f5e:	6a20      	ldr	r0, [r4, #32]
  401f60:	280b      	cmp	r0, #11
  401f62:	d025      	beq.n	401fb0 <PIOB_Handler+0x74>
  401f64:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401f66:	280b      	cmp	r0, #11
  401f68:	d02b      	beq.n	401fc2 <PIOB_Handler+0x86>
  401f6a:	6c20      	ldr	r0, [r4, #64]	; 0x40
  401f6c:	280b      	cmp	r0, #11
  401f6e:	d031      	beq.n	401fd4 <PIOB_Handler+0x98>
  401f70:	6d20      	ldr	r0, [r4, #80]	; 0x50
  401f72:	280b      	cmp	r0, #11
  401f74:	d037      	beq.n	401fe6 <PIOB_Handler+0xaa>
  401f76:	6e20      	ldr	r0, [r4, #96]	; 0x60
  401f78:	280b      	cmp	r0, #11
  401f7a:	d000      	beq.n	401f7e <PIOB_Handler+0x42>
  401f7c:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401f7e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401f80:	4229      	tst	r1, r5
  401f82:	d0fb      	beq.n	401f7c <PIOB_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401f84:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    pio_handler_process(PIOB, ID_PIOB);
}
  401f86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401f8a:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401f8c:	6861      	ldr	r1, [r4, #4]
  401f8e:	420d      	tst	r5, r1
  401f90:	d0e2      	beq.n	401f58 <PIOB_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401f92:	68e3      	ldr	r3, [r4, #12]
  401f94:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401f96:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  401f98:	439d      	bics	r5, r3
  401f9a:	d0ef      	beq.n	401f7c <PIOB_Handler+0x40>
  401f9c:	e7dc      	b.n	401f58 <PIOB_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401f9e:	6961      	ldr	r1, [r4, #20]
  401fa0:	4229      	tst	r1, r5
  401fa2:	d0dc      	beq.n	401f5e <PIOB_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401fa4:	69e3      	ldr	r3, [r4, #28]
  401fa6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401fa8:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  401faa:	439d      	bics	r5, r3
  401fac:	d0e6      	beq.n	401f7c <PIOB_Handler+0x40>
  401fae:	e7d6      	b.n	401f5e <PIOB_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401fb0:	6a61      	ldr	r1, [r4, #36]	; 0x24
  401fb2:	4229      	tst	r1, r5
  401fb4:	d0d6      	beq.n	401f64 <PIOB_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401fb6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401fb8:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401fba:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  401fbc:	439d      	bics	r5, r3
  401fbe:	d0dd      	beq.n	401f7c <PIOB_Handler+0x40>
  401fc0:	e7d0      	b.n	401f64 <PIOB_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401fc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
  401fc4:	4229      	tst	r1, r5
  401fc6:	d0d0      	beq.n	401f6a <PIOB_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401fc8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401fca:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401fcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  401fce:	439d      	bics	r5, r3
  401fd0:	d0d4      	beq.n	401f7c <PIOB_Handler+0x40>
  401fd2:	e7ca      	b.n	401f6a <PIOB_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401fd4:	6c61      	ldr	r1, [r4, #68]	; 0x44
  401fd6:	4229      	tst	r1, r5
  401fd8:	d0ca      	beq.n	401f70 <PIOB_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401fda:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401fdc:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401fde:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  401fe0:	439d      	bics	r5, r3
  401fe2:	d0cb      	beq.n	401f7c <PIOB_Handler+0x40>
  401fe4:	e7c4      	b.n	401f70 <PIOB_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401fe6:	6d61      	ldr	r1, [r4, #84]	; 0x54
  401fe8:	4229      	tst	r1, r5
  401fea:	d0c4      	beq.n	401f76 <PIOB_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401fec:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  401fee:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401ff0:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  401ff2:	439d      	bics	r5, r3
  401ff4:	d0c2      	beq.n	401f7c <PIOB_Handler+0x40>
  401ff6:	e7be      	b.n	401f76 <PIOB_Handler+0x3a>
  401ff8:	00401d15 	.word	0x00401d15
  401ffc:	400e1000 	.word	0x400e1000
  402000:	00401d19 	.word	0x00401d19
  402004:	20430498 	.word	0x20430498

00402008 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  402008:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  40200a:	4b2e      	ldr	r3, [pc, #184]	; (4020c4 <PIOC_Handler+0xbc>)
  40200c:	482e      	ldr	r0, [pc, #184]	; (4020c8 <PIOC_Handler+0xc0>)
  40200e:	4798      	blx	r3
  402010:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  402012:	4b2e      	ldr	r3, [pc, #184]	; (4020cc <PIOC_Handler+0xc4>)
  402014:	482c      	ldr	r0, [pc, #176]	; (4020c8 <PIOC_Handler+0xc0>)
  402016:	4798      	blx	r3
	if (status != 0) {
  402018:	4005      	ands	r5, r0
  40201a:	d015      	beq.n	402048 <PIOC_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  40201c:	4c2c      	ldr	r4, [pc, #176]	; (4020d0 <PIOC_Handler+0xc8>)
  40201e:	6820      	ldr	r0, [r4, #0]
  402020:	280c      	cmp	r0, #12
  402022:	d019      	beq.n	402058 <PIOC_Handler+0x50>
  402024:	6920      	ldr	r0, [r4, #16]
  402026:	280c      	cmp	r0, #12
  402028:	d01f      	beq.n	40206a <PIOC_Handler+0x62>
  40202a:	6a20      	ldr	r0, [r4, #32]
  40202c:	280c      	cmp	r0, #12
  40202e:	d025      	beq.n	40207c <PIOC_Handler+0x74>
  402030:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402032:	280c      	cmp	r0, #12
  402034:	d02b      	beq.n	40208e <PIOC_Handler+0x86>
  402036:	6c20      	ldr	r0, [r4, #64]	; 0x40
  402038:	280c      	cmp	r0, #12
  40203a:	d031      	beq.n	4020a0 <PIOC_Handler+0x98>
  40203c:	6d20      	ldr	r0, [r4, #80]	; 0x50
  40203e:	280c      	cmp	r0, #12
  402040:	d037      	beq.n	4020b2 <PIOC_Handler+0xaa>
  402042:	6e20      	ldr	r0, [r4, #96]	; 0x60
  402044:	280c      	cmp	r0, #12
  402046:	d000      	beq.n	40204a <PIOC_Handler+0x42>
  402048:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40204a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40204c:	4229      	tst	r1, r5
  40204e:	d0fb      	beq.n	402048 <PIOC_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402050:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	pio_handler_process(PIOC, ID_PIOC);
}
  402052:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402056:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402058:	6861      	ldr	r1, [r4, #4]
  40205a:	420d      	tst	r5, r1
  40205c:	d0e2      	beq.n	402024 <PIOC_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40205e:	68e3      	ldr	r3, [r4, #12]
  402060:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402062:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  402064:	439d      	bics	r5, r3
  402066:	d0ef      	beq.n	402048 <PIOC_Handler+0x40>
  402068:	e7dc      	b.n	402024 <PIOC_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40206a:	6961      	ldr	r1, [r4, #20]
  40206c:	4229      	tst	r1, r5
  40206e:	d0dc      	beq.n	40202a <PIOC_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402070:	69e3      	ldr	r3, [r4, #28]
  402072:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402074:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  402076:	439d      	bics	r5, r3
  402078:	d0e6      	beq.n	402048 <PIOC_Handler+0x40>
  40207a:	e7d6      	b.n	40202a <PIOC_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40207c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  40207e:	4229      	tst	r1, r5
  402080:	d0d6      	beq.n	402030 <PIOC_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402082:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402084:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402086:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  402088:	439d      	bics	r5, r3
  40208a:	d0dd      	beq.n	402048 <PIOC_Handler+0x40>
  40208c:	e7d0      	b.n	402030 <PIOC_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40208e:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402090:	4229      	tst	r1, r5
  402092:	d0d0      	beq.n	402036 <PIOC_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402094:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402096:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402098:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  40209a:	439d      	bics	r5, r3
  40209c:	d0d4      	beq.n	402048 <PIOC_Handler+0x40>
  40209e:	e7ca      	b.n	402036 <PIOC_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4020a0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4020a2:	4229      	tst	r1, r5
  4020a4:	d0ca      	beq.n	40203c <PIOC_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4020a6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  4020a8:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4020aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  4020ac:	439d      	bics	r5, r3
  4020ae:	d0cb      	beq.n	402048 <PIOC_Handler+0x40>
  4020b0:	e7c4      	b.n	40203c <PIOC_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4020b2:	6d61      	ldr	r1, [r4, #84]	; 0x54
  4020b4:	4229      	tst	r1, r5
  4020b6:	d0c4      	beq.n	402042 <PIOC_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4020b8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  4020ba:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4020bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  4020be:	439d      	bics	r5, r3
  4020c0:	d0c2      	beq.n	402048 <PIOC_Handler+0x40>
  4020c2:	e7be      	b.n	402042 <PIOC_Handler+0x3a>
  4020c4:	00401d15 	.word	0x00401d15
  4020c8:	400e1200 	.word	0x400e1200
  4020cc:	00401d19 	.word	0x00401d19
  4020d0:	20430498 	.word	0x20430498

004020d4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4020d4:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  4020d6:	4b2e      	ldr	r3, [pc, #184]	; (402190 <PIOD_Handler+0xbc>)
  4020d8:	482e      	ldr	r0, [pc, #184]	; (402194 <PIOD_Handler+0xc0>)
  4020da:	4798      	blx	r3
  4020dc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4020de:	4b2e      	ldr	r3, [pc, #184]	; (402198 <PIOD_Handler+0xc4>)
  4020e0:	482c      	ldr	r0, [pc, #176]	; (402194 <PIOD_Handler+0xc0>)
  4020e2:	4798      	blx	r3
	if (status != 0) {
  4020e4:	4005      	ands	r5, r0
  4020e6:	d015      	beq.n	402114 <PIOD_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4020e8:	4c2c      	ldr	r4, [pc, #176]	; (40219c <PIOD_Handler+0xc8>)
  4020ea:	6820      	ldr	r0, [r4, #0]
  4020ec:	2810      	cmp	r0, #16
  4020ee:	d019      	beq.n	402124 <PIOD_Handler+0x50>
  4020f0:	6920      	ldr	r0, [r4, #16]
  4020f2:	2810      	cmp	r0, #16
  4020f4:	d01f      	beq.n	402136 <PIOD_Handler+0x62>
  4020f6:	6a20      	ldr	r0, [r4, #32]
  4020f8:	2810      	cmp	r0, #16
  4020fa:	d025      	beq.n	402148 <PIOD_Handler+0x74>
  4020fc:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4020fe:	2810      	cmp	r0, #16
  402100:	d02b      	beq.n	40215a <PIOD_Handler+0x86>
  402102:	6c20      	ldr	r0, [r4, #64]	; 0x40
  402104:	2810      	cmp	r0, #16
  402106:	d031      	beq.n	40216c <PIOD_Handler+0x98>
  402108:	6d20      	ldr	r0, [r4, #80]	; 0x50
  40210a:	2810      	cmp	r0, #16
  40210c:	d037      	beq.n	40217e <PIOD_Handler+0xaa>
  40210e:	6e20      	ldr	r0, [r4, #96]	; 0x60
  402110:	2810      	cmp	r0, #16
  402112:	d000      	beq.n	402116 <PIOD_Handler+0x42>
  402114:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402116:	6e61      	ldr	r1, [r4, #100]	; 0x64
  402118:	4229      	tst	r1, r5
  40211a:	d0fb      	beq.n	402114 <PIOD_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40211c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	pio_handler_process(PIOD, ID_PIOD);
}
  40211e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402122:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402124:	6861      	ldr	r1, [r4, #4]
  402126:	420d      	tst	r5, r1
  402128:	d0e2      	beq.n	4020f0 <PIOD_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40212a:	68e3      	ldr	r3, [r4, #12]
  40212c:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40212e:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  402130:	439d      	bics	r5, r3
  402132:	d0ef      	beq.n	402114 <PIOD_Handler+0x40>
  402134:	e7dc      	b.n	4020f0 <PIOD_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402136:	6961      	ldr	r1, [r4, #20]
  402138:	4229      	tst	r1, r5
  40213a:	d0dc      	beq.n	4020f6 <PIOD_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40213c:	69e3      	ldr	r3, [r4, #28]
  40213e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402140:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  402142:	439d      	bics	r5, r3
  402144:	d0e6      	beq.n	402114 <PIOD_Handler+0x40>
  402146:	e7d6      	b.n	4020f6 <PIOD_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402148:	6a61      	ldr	r1, [r4, #36]	; 0x24
  40214a:	4229      	tst	r1, r5
  40214c:	d0d6      	beq.n	4020fc <PIOD_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40214e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402150:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402152:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  402154:	439d      	bics	r5, r3
  402156:	d0dd      	beq.n	402114 <PIOD_Handler+0x40>
  402158:	e7d0      	b.n	4020fc <PIOD_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40215a:	6b61      	ldr	r1, [r4, #52]	; 0x34
  40215c:	4229      	tst	r1, r5
  40215e:	d0d0      	beq.n	402102 <PIOD_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402160:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402162:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402164:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  402166:	439d      	bics	r5, r3
  402168:	d0d4      	beq.n	402114 <PIOD_Handler+0x40>
  40216a:	e7ca      	b.n	402102 <PIOD_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40216c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40216e:	4229      	tst	r1, r5
  402170:	d0ca      	beq.n	402108 <PIOD_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402172:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  402174:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402176:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  402178:	439d      	bics	r5, r3
  40217a:	d0cb      	beq.n	402114 <PIOD_Handler+0x40>
  40217c:	e7c4      	b.n	402108 <PIOD_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40217e:	6d61      	ldr	r1, [r4, #84]	; 0x54
  402180:	4229      	tst	r1, r5
  402182:	d0c4      	beq.n	40210e <PIOD_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402184:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  402186:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402188:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  40218a:	439d      	bics	r5, r3
  40218c:	d0c2      	beq.n	402114 <PIOD_Handler+0x40>
  40218e:	e7be      	b.n	40210e <PIOD_Handler+0x3a>
  402190:	00401d15 	.word	0x00401d15
  402194:	400e1400 	.word	0x400e1400
  402198:	00401d19 	.word	0x00401d19
  40219c:	20430498 	.word	0x20430498

004021a0 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4021a0:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  4021a2:	4b2e      	ldr	r3, [pc, #184]	; (40225c <PIOE_Handler+0xbc>)
  4021a4:	482e      	ldr	r0, [pc, #184]	; (402260 <PIOE_Handler+0xc0>)
  4021a6:	4798      	blx	r3
  4021a8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4021aa:	4b2e      	ldr	r3, [pc, #184]	; (402264 <PIOE_Handler+0xc4>)
  4021ac:	482c      	ldr	r0, [pc, #176]	; (402260 <PIOE_Handler+0xc0>)
  4021ae:	4798      	blx	r3
	if (status != 0) {
  4021b0:	4005      	ands	r5, r0
  4021b2:	d015      	beq.n	4021e0 <PIOE_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4021b4:	4c2c      	ldr	r4, [pc, #176]	; (402268 <PIOE_Handler+0xc8>)
  4021b6:	6820      	ldr	r0, [r4, #0]
  4021b8:	2811      	cmp	r0, #17
  4021ba:	d019      	beq.n	4021f0 <PIOE_Handler+0x50>
  4021bc:	6920      	ldr	r0, [r4, #16]
  4021be:	2811      	cmp	r0, #17
  4021c0:	d01f      	beq.n	402202 <PIOE_Handler+0x62>
  4021c2:	6a20      	ldr	r0, [r4, #32]
  4021c4:	2811      	cmp	r0, #17
  4021c6:	d025      	beq.n	402214 <PIOE_Handler+0x74>
  4021c8:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4021ca:	2811      	cmp	r0, #17
  4021cc:	d02b      	beq.n	402226 <PIOE_Handler+0x86>
  4021ce:	6c20      	ldr	r0, [r4, #64]	; 0x40
  4021d0:	2811      	cmp	r0, #17
  4021d2:	d031      	beq.n	402238 <PIOE_Handler+0x98>
  4021d4:	6d20      	ldr	r0, [r4, #80]	; 0x50
  4021d6:	2811      	cmp	r0, #17
  4021d8:	d037      	beq.n	40224a <PIOE_Handler+0xaa>
  4021da:	6e20      	ldr	r0, [r4, #96]	; 0x60
  4021dc:	2811      	cmp	r0, #17
  4021de:	d000      	beq.n	4021e2 <PIOE_Handler+0x42>
  4021e0:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4021e2:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4021e4:	4229      	tst	r1, r5
  4021e6:	d0fb      	beq.n	4021e0 <PIOE_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4021e8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	pio_handler_process(PIOE, ID_PIOE);
}
  4021ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4021ee:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4021f0:	6861      	ldr	r1, [r4, #4]
  4021f2:	420d      	tst	r5, r1
  4021f4:	d0e2      	beq.n	4021bc <PIOE_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4021f6:	68e3      	ldr	r3, [r4, #12]
  4021f8:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4021fa:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  4021fc:	439d      	bics	r5, r3
  4021fe:	d0ef      	beq.n	4021e0 <PIOE_Handler+0x40>
  402200:	e7dc      	b.n	4021bc <PIOE_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402202:	6961      	ldr	r1, [r4, #20]
  402204:	4229      	tst	r1, r5
  402206:	d0dc      	beq.n	4021c2 <PIOE_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402208:	69e3      	ldr	r3, [r4, #28]
  40220a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40220c:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  40220e:	439d      	bics	r5, r3
  402210:	d0e6      	beq.n	4021e0 <PIOE_Handler+0x40>
  402212:	e7d6      	b.n	4021c2 <PIOE_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402214:	6a61      	ldr	r1, [r4, #36]	; 0x24
  402216:	4229      	tst	r1, r5
  402218:	d0d6      	beq.n	4021c8 <PIOE_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40221a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40221c:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40221e:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  402220:	439d      	bics	r5, r3
  402222:	d0dd      	beq.n	4021e0 <PIOE_Handler+0x40>
  402224:	e7d0      	b.n	4021c8 <PIOE_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402226:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402228:	4229      	tst	r1, r5
  40222a:	d0d0      	beq.n	4021ce <PIOE_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40222c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40222e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402230:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  402232:	439d      	bics	r5, r3
  402234:	d0d4      	beq.n	4021e0 <PIOE_Handler+0x40>
  402236:	e7ca      	b.n	4021ce <PIOE_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402238:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40223a:	4229      	tst	r1, r5
  40223c:	d0ca      	beq.n	4021d4 <PIOE_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40223e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  402240:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402242:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  402244:	439d      	bics	r5, r3
  402246:	d0cb      	beq.n	4021e0 <PIOE_Handler+0x40>
  402248:	e7c4      	b.n	4021d4 <PIOE_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40224a:	6d61      	ldr	r1, [r4, #84]	; 0x54
  40224c:	4229      	tst	r1, r5
  40224e:	d0c4      	beq.n	4021da <PIOE_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402250:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  402252:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402254:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  402256:	439d      	bics	r5, r3
  402258:	d0c2      	beq.n	4021e0 <PIOE_Handler+0x40>
  40225a:	e7be      	b.n	4021da <PIOE_Handler+0x3a>
  40225c:	00401d15 	.word	0x00401d15
  402260:	400e1600 	.word	0x400e1600
  402264:	00401d19 	.word	0x00401d19
  402268:	20430498 	.word	0x20430498

0040226c <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  40226c:	3802      	subs	r0, #2
  40226e:	2802      	cmp	r0, #2
  402270:	d80d      	bhi.n	40228e <pmc_mck_set_division+0x22>
  402272:	4b08      	ldr	r3, [pc, #32]	; (402294 <pmc_mck_set_division+0x28>)
  402274:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  402278:	4907      	ldr	r1, [pc, #28]	; (402298 <pmc_mck_set_division+0x2c>)
  40227a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40227c:	460a      	mov	r2, r1
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40227e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  402282:	4303      	orrs	r3, r0
	PMC->PMC_MCKR =
  402284:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402286:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402288:	071b      	lsls	r3, r3, #28
  40228a:	d5fc      	bpl.n	402286 <pmc_mck_set_division+0x1a>
}
  40228c:	4770      	bx	lr
{
  40228e:	2000      	movs	r0, #0
  402290:	e7f2      	b.n	402278 <pmc_mck_set_division+0xc>
  402292:	bf00      	nop
  402294:	0040686c 	.word	0x0040686c
  402298:	400e0600 	.word	0x400e0600

0040229c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40229c:	4913      	ldr	r1, [pc, #76]	; (4022ec <pmc_switch_mck_to_pllack+0x50>)
  40229e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4022a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4022a4:	4318      	orrs	r0, r3
  4022a6:	6308      	str	r0, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4022a8:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  4022aa:	0718      	lsls	r0, r3, #28
  4022ac:	d407      	bmi.n	4022be <pmc_switch_mck_to_pllack+0x22>
  4022ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4022b2:	e001      	b.n	4022b8 <pmc_switch_mck_to_pllack+0x1c>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4022b4:	3b01      	subs	r3, #1
  4022b6:	d016      	beq.n	4022e6 <pmc_switch_mck_to_pllack+0x4a>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4022b8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4022ba:	0712      	lsls	r2, r2, #28
  4022bc:	d5fa      	bpl.n	4022b4 <pmc_switch_mck_to_pllack+0x18>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4022be:	490b      	ldr	r1, [pc, #44]	; (4022ec <pmc_switch_mck_to_pllack+0x50>)
  4022c0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4022c2:	f023 0303 	bic.w	r3, r3, #3
  4022c6:	f043 0302 	orr.w	r3, r3, #2
  4022ca:	630b      	str	r3, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4022cc:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  4022ce:	0718      	lsls	r0, r3, #28
  4022d0:	d407      	bmi.n	4022e2 <pmc_switch_mck_to_pllack+0x46>
  4022d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4022d6:	e001      	b.n	4022dc <pmc_switch_mck_to_pllack+0x40>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4022d8:	3b01      	subs	r3, #1
  4022da:	d004      	beq.n	4022e6 <pmc_switch_mck_to_pllack+0x4a>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4022dc:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4022de:	0712      	lsls	r2, r2, #28
  4022e0:	d5fa      	bpl.n	4022d8 <pmc_switch_mck_to_pllack+0x3c>
			return 1;
		}
	}

	return 0;
  4022e2:	2000      	movs	r0, #0
}
  4022e4:	4770      	bx	lr
			return 1;
  4022e6:	2001      	movs	r0, #1
  4022e8:	4770      	bx	lr
  4022ea:	bf00      	nop
  4022ec:	400e0600 	.word	0x400e0600

004022f0 <pmc_switch_mainck_to_fastrc>:
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4022f0:	4a0e      	ldr	r2, [pc, #56]	; (40232c <pmc_switch_mainck_to_fastrc+0x3c>)
{
  4022f2:	b410      	push	{r4}
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4022f4:	4c0e      	ldr	r4, [pc, #56]	; (402330 <pmc_switch_mainck_to_fastrc+0x40>)

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4022f6:	4611      	mov	r1, r2
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4022f8:	6a13      	ldr	r3, [r2, #32]
  4022fa:	431c      	orrs	r4, r3
  4022fc:	6214      	str	r4, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4022fe:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  402300:	039a      	lsls	r2, r3, #14
  402302:	d5fc      	bpl.n	4022fe <pmc_switch_mainck_to_fastrc+0xe>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  402304:	6a0c      	ldr	r4, [r1, #32]
  402306:	4b0b      	ldr	r3, [pc, #44]	; (402334 <pmc_switch_mainck_to_fastrc+0x44>)
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402308:	4a08      	ldr	r2, [pc, #32]	; (40232c <pmc_switch_mainck_to_fastrc+0x3c>)
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40230a:	4023      	ands	r3, r4
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  40230c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402310:	4318      	orrs	r0, r3
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  402312:	6208      	str	r0, [r1, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402314:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402316:	039b      	lsls	r3, r3, #14
  402318:	d5fc      	bpl.n	402314 <pmc_switch_mainck_to_fastrc+0x24>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  40231a:	6a11      	ldr	r1, [r2, #32]
  40231c:	4b06      	ldr	r3, [pc, #24]	; (402338 <pmc_switch_mainck_to_fastrc+0x48>)
  40231e:	400b      	ands	r3, r1
  402320:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402324:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  402326:	f85d 4b04 	ldr.w	r4, [sp], #4
  40232a:	4770      	bx	lr
  40232c:	400e0600 	.word	0x400e0600
  402330:	00370008 	.word	0x00370008
  402334:	ffc8ff8f 	.word	0xffc8ff8f
  402338:	fec8ffff 	.word	0xfec8ffff

0040233c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40233c:	4b02      	ldr	r3, [pc, #8]	; (402348 <pmc_osc_is_ready_mainck+0xc>)
  40233e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402340:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402344:	4770      	bx	lr
  402346:	bf00      	nop
  402348:	400e0600 	.word	0x400e0600

0040234c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40234c:	4b02      	ldr	r3, [pc, #8]	; (402358 <pmc_disable_pllack+0xc>)
  40234e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402352:	629a      	str	r2, [r3, #40]	; 0x28
  402354:	4770      	bx	lr
  402356:	bf00      	nop
  402358:	400e0600 	.word	0x400e0600

0040235c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40235c:	4b02      	ldr	r3, [pc, #8]	; (402368 <pmc_is_locked_pllack+0xc>)
  40235e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402360:	f000 0002 	and.w	r0, r0, #2
  402364:	4770      	bx	lr
  402366:	bf00      	nop
  402368:	400e0600 	.word	0x400e0600

0040236c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40236c:	283f      	cmp	r0, #63	; 0x3f
  40236e:	d81a      	bhi.n	4023a6 <pmc_enable_periph_clk+0x3a>
		return 1;
	}

	if (ul_id < 32) {
  402370:	281f      	cmp	r0, #31
  402372:	d80a      	bhi.n	40238a <pmc_enable_periph_clk+0x1e>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402374:	2301      	movs	r3, #1
  402376:	4a0e      	ldr	r2, [pc, #56]	; (4023b0 <pmc_enable_periph_clk+0x44>)
  402378:	fa03 f000 	lsl.w	r0, r3, r0
  40237c:	6991      	ldr	r1, [r2, #24]
  40237e:	ea30 0301 	bics.w	r3, r0, r1
  402382:	d012      	beq.n	4023aa <pmc_enable_periph_clk+0x3e>
			PMC->PMC_PCER0 = 1 << ul_id;
  402384:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402386:	2000      	movs	r0, #0
  402388:	4770      	bx	lr
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40238a:	2301      	movs	r3, #1
		ul_id -= 32;
  40238c:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40238e:	4a08      	ldr	r2, [pc, #32]	; (4023b0 <pmc_enable_periph_clk+0x44>)
  402390:	fa03 f000 	lsl.w	r0, r3, r0
  402394:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
  402398:	ea30 0303 	bics.w	r3, r0, r3
  40239c:	d005      	beq.n	4023aa <pmc_enable_periph_clk+0x3e>
			PMC->PMC_PCER1 = 1 << ul_id;
  40239e:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
	return 0;
  4023a2:	2000      	movs	r0, #0
  4023a4:	4770      	bx	lr
		return 1;
  4023a6:	2001      	movs	r0, #1
  4023a8:	4770      	bx	lr
	return 0;
  4023aa:	2000      	movs	r0, #0
}
  4023ac:	4770      	bx	lr
  4023ae:	bf00      	nop
  4023b0:	400e0600 	.word	0x400e0600

004023b4 <pmc_pck_set_prescaler>:
 *
 * \param ul_id Peripheral ID.
 * \param ul_pres Prescaler value.
 */
void pmc_pck_set_prescaler(uint32_t ul_id, uint32_t ul_pres)
{
  4023b4:	4b0b      	ldr	r3, [pc, #44]	; (4023e4 <pmc_pck_set_prescaler+0x30>)
  4023b6:	f44f 7280 	mov.w	r2, #256	; 0x100
  4023ba:	b410      	push	{r4}
  4023bc:	eb03 0480 	add.w	r4, r3, r0, lsl #2
  4023c0:	fa02 f000 	lsl.w	r0, r2, r0
	PMC->PMC_PCK[ul_id] =
			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_PRES_Msk) | ul_pres;
  4023c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4023c6:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  4023ca:	4311      	orrs	r1, r2
	PMC->PMC_PCK[ul_id] =
  4023cc:	6421      	str	r1, [r4, #64]	; 0x40
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  4023ce:	e002      	b.n	4023d6 <pmc_pck_set_prescaler+0x22>
			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
  4023d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  4023d2:	4202      	tst	r2, r0
  4023d4:	d102      	bne.n	4023dc <pmc_pck_set_prescaler+0x28>
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  4023d6:	681a      	ldr	r2, [r3, #0]
  4023d8:	4202      	tst	r2, r0
  4023da:	d1f9      	bne.n	4023d0 <pmc_pck_set_prescaler+0x1c>
}
  4023dc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4023e0:	4770      	bx	lr
  4023e2:	bf00      	nop
  4023e4:	400e0600 	.word	0x400e0600

004023e8 <pmc_pck_set_source>:
 *
 * \param ul_id Peripheral ID.
 * \param ul_source Source selection value.
 */
void pmc_pck_set_source(uint32_t ul_id, uint32_t ul_source)
{
  4023e8:	4b0b      	ldr	r3, [pc, #44]	; (402418 <pmc_pck_set_source+0x30>)
  4023ea:	f44f 7280 	mov.w	r2, #256	; 0x100
  4023ee:	b410      	push	{r4}
  4023f0:	eb03 0480 	add.w	r4, r3, r0, lsl #2
  4023f4:	fa02 f000 	lsl.w	r0, r2, r0
	PMC->PMC_PCK[ul_id] =
			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_CSS_Msk) | ul_source;
  4023f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4023fa:	f022 0207 	bic.w	r2, r2, #7
  4023fe:	4311      	orrs	r1, r2
	PMC->PMC_PCK[ul_id] =
  402400:	6421      	str	r1, [r4, #64]	; 0x40
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  402402:	e002      	b.n	40240a <pmc_pck_set_source+0x22>
			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
  402404:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  402406:	4202      	tst	r2, r0
  402408:	d102      	bne.n	402410 <pmc_pck_set_source+0x28>
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  40240a:	681a      	ldr	r2, [r3, #0]
  40240c:	4202      	tst	r2, r0
  40240e:	d1f9      	bne.n	402404 <pmc_pck_set_source+0x1c>
}
  402410:	f85d 4b04 	ldr.w	r4, [sp], #4
  402414:	4770      	bx	lr
  402416:	bf00      	nop
  402418:	400e0600 	.word	0x400e0600

0040241c <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  40241c:	f44f 7380 	mov.w	r3, #256	; 0x100
  402420:	4a02      	ldr	r2, [pc, #8]	; (40242c <pmc_enable_pck+0x10>)
  402422:	fa03 f000 	lsl.w	r0, r3, r0
  402426:	6010      	str	r0, [r2, #0]
  402428:	4770      	bx	lr
  40242a:	bf00      	nop
  40242c:	400e0600 	.word	0x400e0600

00402430 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402430:	e7fe      	b.n	402430 <Dummy_Handler>
  402432:	bf00      	nop

00402434 <Dummy_Handler2>:
	while (1) {
	}
}

void Dummy_Handler2(void)
{
  402434:	e7fe      	b.n	402434 <Dummy_Handler2>
  402436:	bf00      	nop

00402438 <Reset_Handler>:
        if (pSrc != pDest) {
  402438:	4920      	ldr	r1, [pc, #128]	; (4024bc <Reset_Handler+0x84>)
  40243a:	4821      	ldr	r0, [pc, #132]	; (4024c0 <Reset_Handler+0x88>)
  40243c:	4281      	cmp	r1, r0
{
  40243e:	b510      	push	{r4, lr}
  402440:	b082      	sub	sp, #8
        if (pSrc != pDest) {
  402442:	d009      	beq.n	402458 <Reset_Handler+0x20>
                for (; pDest < &_erelocate;) {
  402444:	4b1f      	ldr	r3, [pc, #124]	; (4024c4 <Reset_Handler+0x8c>)
  402446:	4298      	cmp	r0, r3
  402448:	d206      	bcs.n	402458 <Reset_Handler+0x20>
                        *pDest++ = *pSrc++;
  40244a:	43c2      	mvns	r2, r0
  40244c:	4c1e      	ldr	r4, [pc, #120]	; (4024c8 <Reset_Handler+0x90>)
  40244e:	441a      	add	r2, r3
  402450:	f022 0203 	bic.w	r2, r2, #3
  402454:	3204      	adds	r2, #4
  402456:	47a0      	blx	r4
        for (pDest = &_szero; pDest < &_ezero;) {
  402458:	481c      	ldr	r0, [pc, #112]	; (4024cc <Reset_Handler+0x94>)
  40245a:	4b1d      	ldr	r3, [pc, #116]	; (4024d0 <Reset_Handler+0x98>)
  40245c:	4298      	cmp	r0, r3
  40245e:	d207      	bcs.n	402470 <Reset_Handler+0x38>
                *pDest++ = 0;
  402460:	43c2      	mvns	r2, r0
  402462:	2100      	movs	r1, #0
  402464:	4c1b      	ldr	r4, [pc, #108]	; (4024d4 <Reset_Handler+0x9c>)
  402466:	441a      	add	r2, r3
  402468:	f022 0203 	bic.w	r2, r2, #3
  40246c:	3204      	adds	r2, #4
  40246e:	47a0      	blx	r4
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  402470:	4b19      	ldr	r3, [pc, #100]	; (4024d8 <Reset_Handler+0xa0>)
  402472:	4a1a      	ldr	r2, [pc, #104]	; (4024dc <Reset_Handler+0xa4>)
  402474:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402478:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40247a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40247e:	fab3 f383 	clz	r3, r3
  402482:	095b      	lsrs	r3, r3, #5
  402484:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402486:	b672      	cpsid	i
  __ASM volatile ("dmb");
  402488:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40248c:	4a14      	ldr	r2, [pc, #80]	; (4024e0 <Reset_Handler+0xa8>)
  40248e:	2300      	movs	r3, #0
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  402490:	4914      	ldr	r1, [pc, #80]	; (4024e4 <Reset_Handler+0xac>)
  402492:	7013      	strb	r3, [r2, #0]
	return flags;
  402494:	9801      	ldr	r0, [sp, #4]
  402496:	680b      	ldr	r3, [r1, #0]
  402498:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40249c:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb");
  40249e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4024a2:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4024a6:	b120      	cbz	r0, 4024b2 <Reset_Handler+0x7a>
		cpu_irq_enable();
  4024a8:	2301      	movs	r3, #1
  4024aa:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dmb");
  4024ac:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4024b0:	b662      	cpsie	i
        __libc_init_array();
  4024b2:	4b0d      	ldr	r3, [pc, #52]	; (4024e8 <Reset_Handler+0xb0>)
  4024b4:	4798      	blx	r3
        main();
  4024b6:	4b0d      	ldr	r3, [pc, #52]	; (4024ec <Reset_Handler+0xb4>)
  4024b8:	4798      	blx	r3
  4024ba:	e7fe      	b.n	4024ba <Reset_Handler+0x82>
  4024bc:	00407410 	.word	0x00407410
  4024c0:	20400000 	.word	0x20400000
  4024c4:	204009f8 	.word	0x204009f8
  4024c8:	00404065 	.word	0x00404065
  4024cc:	20402000 	.word	0x20402000
  4024d0:	2044c8e4 	.word	0x2044c8e4
  4024d4:	00404199 	.word	0x00404199
  4024d8:	00400000 	.word	0x00400000
  4024dc:	e000ed00 	.word	0xe000ed00
  4024e0:	20400028 	.word	0x20400028
  4024e4:	e000ed88 	.word	0xe000ed88
  4024e8:	00403a7d 	.word	0x00403a7d
  4024ec:	00402839 	.word	0x00402839

004024f0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4024f0:	4a32      	ldr	r2, [pc, #200]	; (4025bc <SystemCoreClockUpdate+0xcc>)
  4024f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4024f4:	f003 0303 	and.w	r3, r3, #3
  4024f8:	2b01      	cmp	r3, #1
  4024fa:	d03c      	beq.n	402576 <SystemCoreClockUpdate+0x86>
  4024fc:	d325      	bcc.n	40254a <SystemCoreClockUpdate+0x5a>
  4024fe:	2b02      	cmp	r3, #2
  402500:	d00d      	beq.n	40251e <SystemCoreClockUpdate+0x2e>
  402502:	482f      	ldr	r0, [pc, #188]	; (4025c0 <SystemCoreClockUpdate+0xd0>)
  402504:	6803      	ldr	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402506:	492d      	ldr	r1, [pc, #180]	; (4025bc <SystemCoreClockUpdate+0xcc>)
  402508:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  40250a:	f002 0270 	and.w	r2, r2, #112	; 0x70
  40250e:	2a70      	cmp	r2, #112	; 0x70
  402510:	d02b      	beq.n	40256a <SystemCoreClockUpdate+0x7a>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402512:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  402514:	f3c2 1202 	ubfx	r2, r2, #4, #3
  402518:	40d3      	lsrs	r3, r2
  40251a:	6003      	str	r3, [r0, #0]
  40251c:	4770      	bx	lr
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40251e:	6a13      	ldr	r3, [r2, #32]
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402520:	4827      	ldr	r0, [pc, #156]	; (4025c0 <SystemCoreClockUpdate+0xd0>)
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402522:	01db      	lsls	r3, r3, #7
  402524:	d53a      	bpl.n	40259c <SystemCoreClockUpdate+0xac>
            SystemCoreClock *= 3U;
  402526:	4b27      	ldr	r3, [pc, #156]	; (4025c4 <SystemCoreClockUpdate+0xd4>)
  402528:	6003      	str	r3, [r0, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  40252a:	4924      	ldr	r1, [pc, #144]	; (4025bc <SystemCoreClockUpdate+0xcc>)
  40252c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  40252e:	f002 0203 	and.w	r2, r2, #3
  402532:	2a02      	cmp	r2, #2
  402534:	d1e7      	bne.n	402506 <SystemCoreClockUpdate+0x16>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402536:	6a8a      	ldr	r2, [r1, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402538:	6a89      	ldr	r1, [r1, #40]	; 0x28
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40253a:	f3c2 420a 	ubfx	r2, r2, #16, #11
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40253e:	b2c9      	uxtb	r1, r1
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402540:	fb02 3303 	mla	r3, r2, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402544:	fbb3 f3f1 	udiv	r3, r3, r1
  402548:	e7dd      	b.n	402506 <SystemCoreClockUpdate+0x16>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40254a:	4b1f      	ldr	r3, [pc, #124]	; (4025c8 <SystemCoreClockUpdate+0xd8>)
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40254c:	491b      	ldr	r1, [pc, #108]	; (4025bc <SystemCoreClockUpdate+0xcc>)
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40254e:	695b      	ldr	r3, [r3, #20]
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402550:	6b0a      	ldr	r2, [r1, #48]	; 0x30
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  402552:	f013 0f80 	tst.w	r3, #128	; 0x80
  402556:	481a      	ldr	r0, [pc, #104]	; (4025c0 <SystemCoreClockUpdate+0xd0>)
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402558:	f002 0270 	and.w	r2, r2, #112	; 0x70
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40255c:	bf14      	ite	ne
  40255e:	f44f 4300 	movne.w	r3, #32768	; 0x8000
  402562:	f44f 43fa 	moveq.w	r3, #32000	; 0x7d00
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402566:	2a70      	cmp	r2, #112	; 0x70
  402568:	d1d3      	bne.n	402512 <SystemCoreClockUpdate+0x22>
    SystemCoreClock /= 3U;
  40256a:	4a18      	ldr	r2, [pc, #96]	; (4025cc <SystemCoreClockUpdate+0xdc>)
  40256c:	fba2 2303 	umull	r2, r3, r2, r3
  402570:	085b      	lsrs	r3, r3, #1
  402572:	6003      	str	r3, [r0, #0]
  402574:	4770      	bx	lr
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402576:	6a13      	ldr	r3, [r2, #32]
  402578:	01d9      	lsls	r1, r3, #7
  40257a:	d40c      	bmi.n	402596 <SystemCoreClockUpdate+0xa6>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40257c:	4810      	ldr	r0, [pc, #64]	; (4025c0 <SystemCoreClockUpdate+0xd0>)
  40257e:	4914      	ldr	r1, [pc, #80]	; (4025d0 <SystemCoreClockUpdate+0xe0>)
  402580:	6001      	str	r1, [r0, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402582:	6a12      	ldr	r2, [r2, #32]
  402584:	f002 0270 	and.w	r2, r2, #112	; 0x70
  402588:	2a10      	cmp	r2, #16
  40258a:	d011      	beq.n	4025b0 <SystemCoreClockUpdate+0xc0>
  40258c:	4b0d      	ldr	r3, [pc, #52]	; (4025c4 <SystemCoreClockUpdate+0xd4>)
  40258e:	2a20      	cmp	r2, #32
  402590:	bf18      	it	ne
  402592:	460b      	movne	r3, r1
  402594:	e7b7      	b.n	402506 <SystemCoreClockUpdate+0x16>
  402596:	4b0b      	ldr	r3, [pc, #44]	; (4025c4 <SystemCoreClockUpdate+0xd4>)
  402598:	4809      	ldr	r0, [pc, #36]	; (4025c0 <SystemCoreClockUpdate+0xd0>)
  40259a:	e7b4      	b.n	402506 <SystemCoreClockUpdate+0x16>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40259c:	4b0c      	ldr	r3, [pc, #48]	; (4025d0 <SystemCoreClockUpdate+0xe0>)
  40259e:	6003      	str	r3, [r0, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4025a0:	6a12      	ldr	r2, [r2, #32]
  4025a2:	f002 0270 	and.w	r2, r2, #112	; 0x70
  4025a6:	2a10      	cmp	r2, #16
  4025a8:	d004      	beq.n	4025b4 <SystemCoreClockUpdate+0xc4>
  4025aa:	2a20      	cmp	r2, #32
  4025ac:	d0bb      	beq.n	402526 <SystemCoreClockUpdate+0x36>
  4025ae:	e7bc      	b.n	40252a <SystemCoreClockUpdate+0x3a>
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4025b0:	4b08      	ldr	r3, [pc, #32]	; (4025d4 <SystemCoreClockUpdate+0xe4>)
  4025b2:	e7a8      	b.n	402506 <SystemCoreClockUpdate+0x16>
            SystemCoreClock *= 2U;
  4025b4:	4b07      	ldr	r3, [pc, #28]	; (4025d4 <SystemCoreClockUpdate+0xe4>)
  4025b6:	6003      	str	r3, [r0, #0]
          break;
  4025b8:	e7b7      	b.n	40252a <SystemCoreClockUpdate+0x3a>
  4025ba:	bf00      	nop
  4025bc:	400e0600 	.word	0x400e0600
  4025c0:	2040002c 	.word	0x2040002c
  4025c4:	00b71b00 	.word	0x00b71b00
  4025c8:	400e1810 	.word	0x400e1810
  4025cc:	aaaaaaab 	.word	0xaaaaaaab
  4025d0:	003d0900 	.word	0x003d0900
  4025d4:	007a1200 	.word	0x007a1200

004025d8 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4025d8:	4b16      	ldr	r3, [pc, #88]	; (402634 <system_init_flash+0x5c>)
  4025da:	4298      	cmp	r0, r3
  4025dc:	d917      	bls.n	40260e <system_init_flash+0x36>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4025de:	4b16      	ldr	r3, [pc, #88]	; (402638 <system_init_flash+0x60>)
  4025e0:	4298      	cmp	r0, r3
  4025e2:	d910      	bls.n	402606 <system_init_flash+0x2e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4025e4:	4b15      	ldr	r3, [pc, #84]	; (40263c <system_init_flash+0x64>)
  4025e6:	4298      	cmp	r0, r3
  4025e8:	d91a      	bls.n	402620 <system_init_flash+0x48>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4025ea:	4b15      	ldr	r3, [pc, #84]	; (402640 <system_init_flash+0x68>)
  4025ec:	4298      	cmp	r0, r3
  4025ee:	d913      	bls.n	402618 <system_init_flash+0x40>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4025f0:	4b14      	ldr	r3, [pc, #80]	; (402644 <system_init_flash+0x6c>)
  4025f2:	4298      	cmp	r0, r3
  4025f4:	d918      	bls.n	402628 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4025f6:	4b14      	ldr	r3, [pc, #80]	; (402648 <system_init_flash+0x70>)
  4025f8:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4025fa:	4b14      	ldr	r3, [pc, #80]	; (40264c <system_init_flash+0x74>)
  4025fc:	bf94      	ite	ls
  4025fe:	4a14      	ldrls	r2, [pc, #80]	; (402650 <system_init_flash+0x78>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  402600:	4a14      	ldrhi	r2, [pc, #80]	; (402654 <system_init_flash+0x7c>)
  402602:	601a      	str	r2, [r3, #0]
  402604:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402606:	4b11      	ldr	r3, [pc, #68]	; (40264c <system_init_flash+0x74>)
  402608:	4a13      	ldr	r2, [pc, #76]	; (402658 <system_init_flash+0x80>)
  40260a:	601a      	str	r2, [r3, #0]
  40260c:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40260e:	4b0f      	ldr	r3, [pc, #60]	; (40264c <system_init_flash+0x74>)
  402610:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402614:	601a      	str	r2, [r3, #0]
  402616:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402618:	4b0c      	ldr	r3, [pc, #48]	; (40264c <system_init_flash+0x74>)
  40261a:	4a10      	ldr	r2, [pc, #64]	; (40265c <system_init_flash+0x84>)
  40261c:	601a      	str	r2, [r3, #0]
  40261e:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402620:	4b0a      	ldr	r3, [pc, #40]	; (40264c <system_init_flash+0x74>)
  402622:	4a0f      	ldr	r2, [pc, #60]	; (402660 <system_init_flash+0x88>)
  402624:	601a      	str	r2, [r3, #0]
  402626:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402628:	4b08      	ldr	r3, [pc, #32]	; (40264c <system_init_flash+0x74>)
  40262a:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40262e:	601a      	str	r2, [r3, #0]
  402630:	4770      	bx	lr
  402632:	bf00      	nop
  402634:	015ef3bf 	.word	0x015ef3bf
  402638:	02bde77f 	.word	0x02bde77f
  40263c:	041cdb3f 	.word	0x041cdb3f
  402640:	057bceff 	.word	0x057bceff
  402644:	06dac2bf 	.word	0x06dac2bf
  402648:	0839b67f 	.word	0x0839b67f
  40264c:	400e0c00 	.word	0x400e0c00
  402650:	04000500 	.word	0x04000500
  402654:	04000600 	.word	0x04000600
  402658:	04000100 	.word	0x04000100
  40265c:	04000300 	.word	0x04000300
  402660:	04000200 	.word	0x04000200

00402664 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  402664:	4a0d      	ldr	r2, [pc, #52]	; (40269c <_sbrk+0x38>)
	int ramend = (int)&__ram_end__;
  402666:	490e      	ldr	r1, [pc, #56]	; (4026a0 <_sbrk+0x3c>)
	if (heap == NULL) {
  402668:	6813      	ldr	r3, [r2, #0]
  40266a:	b143      	cbz	r3, 40267e <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
  40266c:	4418      	add	r0, r3
  40266e:	4281      	cmp	r1, r0
  402670:	db02      	blt.n	402678 <_sbrk+0x14>
		return (caddr_t) -1;	
	}

	heap += incr;
  402672:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  402674:	4618      	mov	r0, r3
  402676:	4770      	bx	lr
		return (caddr_t) -1;	
  402678:	f04f 30ff 	mov.w	r0, #4294967295
  40267c:	4770      	bx	lr
{
  40267e:	b410      	push	{r4}
		heap = (unsigned char *)&_end;
  402680:	4c08      	ldr	r4, [pc, #32]	; (4026a4 <_sbrk+0x40>)
	if (((int)prev_heap + incr) > ramend) {
  402682:	4420      	add	r0, r4
		heap = (unsigned char *)&_end;
  402684:	6014      	str	r4, [r2, #0]
	if (((int)prev_heap + incr) > ramend) {
  402686:	4281      	cmp	r1, r0
  402688:	db04      	blt.n	402694 <_sbrk+0x30>
	heap += incr;
  40268a:	6010      	str	r0, [r2, #0]
	return (caddr_t) prev_heap;
  40268c:	4620      	mov	r0, r4
}
  40268e:	f85d 4b04 	ldr.w	r4, [sp], #4
  402692:	4770      	bx	lr
		return (caddr_t) -1;	
  402694:	f04f 30ff 	mov.w	r0, #4294967295
  402698:	e7f9      	b.n	40268e <_sbrk+0x2a>
  40269a:	bf00      	nop
  40269c:	20430508 	.word	0x20430508
  4026a0:	2045fffc 	.word	0x2045fffc
  4026a4:	2044eae8 	.word	0x2044eae8

004026a8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4026a8:	f04f 30ff 	mov.w	r0, #4294967295
  4026ac:	4770      	bx	lr
  4026ae:	bf00      	nop

004026b0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4026b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000

	return 0;
}
  4026b4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
  4026b6:	604b      	str	r3, [r1, #4]
}
  4026b8:	4770      	bx	lr
  4026ba:	bf00      	nop

004026bc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4026bc:	2001      	movs	r0, #1
  4026be:	4770      	bx	lr

004026c0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4026c0:	2000      	movs	r0, #0
  4026c2:	4770      	bx	lr

004026c4 <USART1_Handler>:
volatile float master_volume = 1.0f;
volatile float reverb_volume = 0.8f; 
volatile uint32_t pitch_bend = NO_PITCH_BEND;
volatile bool autotune = true; 
void USART_SERIAL_ISR_HANDLER(void)
{
  4026c4:	b570      	push	{r4, r5, r6, lr}
	uint32_t dw_status = usart_get_status(USART_SERIAL);
  4026c6:	4b4a      	ldr	r3, [pc, #296]	; (4027f0 <USART1_Handler+0x12c>)
{
  4026c8:	b082      	sub	sp, #8
	uint32_t dw_status = usart_get_status(USART_SERIAL);
  4026ca:	484a      	ldr	r0, [pc, #296]	; (4027f4 <USART1_Handler+0x130>)
  4026cc:	4798      	blx	r3
	if (dw_status & US_CSR_RXRDY) {
  4026ce:	07c3      	lsls	r3, r0, #31
  4026d0:	d401      	bmi.n	4026d6 <USART1_Handler+0x12>
			harmony_list_read = harmony_list_fill;		
			harmony_list_fill = temp; 
			harmony_idx = 0; 
		}
	}
}
  4026d2:	b002      	add	sp, #8
  4026d4:	bd70      	pop	{r4, r5, r6, pc}
		usart_read(USART_SERIAL, &received_byte);
  4026d6:	4b48      	ldr	r3, [pc, #288]	; (4027f8 <USART1_Handler+0x134>)
  4026d8:	a901      	add	r1, sp, #4
  4026da:	4846      	ldr	r0, [pc, #280]	; (4027f4 <USART1_Handler+0x130>)
  4026dc:	4798      	blx	r3
		if (waiting_for_harm_volume)
  4026de:	4a47      	ldr	r2, [pc, #284]	; (4027fc <USART1_Handler+0x138>)
  4026e0:	7813      	ldrb	r3, [r2, #0]
  4026e2:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  4026e6:	b98b      	cbnz	r3, 40270c <USART1_Handler+0x48>
		else if (waiting_for_master_volume)
  4026e8:	4945      	ldr	r1, [pc, #276]	; (402800 <USART1_Handler+0x13c>)
  4026ea:	780b      	ldrb	r3, [r1, #0]
  4026ec:	f003 04ff 	and.w	r4, r3, #255	; 0xff
  4026f0:	b1db      	cbz	r3, 40272a <USART1_Handler+0x66>
			master_volume = (float)received_byte / 127.0f;
  4026f2:	eddd 7a01 	vldr	s15, [sp, #4]
  4026f6:	ed9f 7a43 	vldr	s14, [pc, #268]	; 402804 <USART1_Handler+0x140>
  4026fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
  4026fe:	4b42      	ldr	r3, [pc, #264]	; (402808 <USART1_Handler+0x144>)
  402700:	ee67 7a87 	vmul.f32	s15, s15, s14
  402704:	edc3 7a00 	vstr	s15, [r3]
			waiting_for_master_volume = false;
  402708:	7008      	strb	r0, [r1, #0]
  40270a:	e7e2      	b.n	4026d2 <USART1_Handler+0xe>
			harm_volume = (float)received_byte / 127.0f; 
  40270c:	eddd 7a01 	vldr	s15, [sp, #4]
			waiting_for_harm_volume = false; 
  402710:	2300      	movs	r3, #0
			harm_volume = (float)received_byte / 127.0f; 
  402712:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 402804 <USART1_Handler+0x140>
  402716:	eef8 7a67 	vcvt.f32.u32	s15, s15
  40271a:	493c      	ldr	r1, [pc, #240]	; (40280c <USART1_Handler+0x148>)
  40271c:	ee67 7a87 	vmul.f32	s15, s15, s14
  402720:	edc1 7a00 	vstr	s15, [r1]
			waiting_for_harm_volume = false; 
  402724:	7013      	strb	r3, [r2, #0]
}
  402726:	b002      	add	sp, #8
  402728:	bd70      	pop	{r4, r5, r6, pc}
		else if (waiting_for_pitch_bend)
  40272a:	4839      	ldr	r0, [pc, #228]	; (402810 <USART1_Handler+0x14c>)
  40272c:	7803      	ldrb	r3, [r0, #0]
  40272e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
  402732:	b97b      	cbnz	r3, 402754 <USART1_Handler+0x90>
		else if (waiting_for_reverb_volume)
  402734:	4b37      	ldr	r3, [pc, #220]	; (402814 <USART1_Handler+0x150>)
  402736:	781c      	ldrb	r4, [r3, #0]
  402738:	b18c      	cbz	r4, 40275e <USART1_Handler+0x9a>
			reverb_volume = (float)received_byte / 127.0f;;
  40273a:	eddd 7a01 	vldr	s15, [sp, #4]
  40273e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 402804 <USART1_Handler+0x140>
  402742:	eef8 7a67 	vcvt.f32.u32	s15, s15
  402746:	4a34      	ldr	r2, [pc, #208]	; (402818 <USART1_Handler+0x154>)
  402748:	ee67 7a87 	vmul.f32	s15, s15, s14
  40274c:	edc2 7a00 	vstr	s15, [r2]
			waiting_for_reverb_volume = false;
  402750:	701d      	strb	r5, [r3, #0]
  402752:	e7be      	b.n	4026d2 <USART1_Handler+0xe>
			pitch_bend = received_byte;
  402754:	9a01      	ldr	r2, [sp, #4]
  402756:	4b31      	ldr	r3, [pc, #196]	; (40281c <USART1_Handler+0x158>)
  402758:	601a      	str	r2, [r3, #0]
			waiting_for_pitch_bend = false;
  40275a:	7004      	strb	r4, [r0, #0]
  40275c:	e7b9      	b.n	4026d2 <USART1_Handler+0xe>
		else if (received_byte == HARMONY_VOLUME_FLAG) 
  40275e:	9c01      	ldr	r4, [sp, #4]
  402760:	2cff      	cmp	r4, #255	; 0xff
  402762:	d020      	beq.n	4027a6 <USART1_Handler+0xe2>
		else if (received_byte == MASTER_VOLUME_FLAG)
  402764:	2cfe      	cmp	r4, #254	; 0xfe
  402766:	d021      	beq.n	4027ac <USART1_Handler+0xe8>
		else if (received_byte == PITCH_BEND_FLAG)
  402768:	2cfd      	cmp	r4, #253	; 0xfd
  40276a:	d035      	beq.n	4027d8 <USART1_Handler+0x114>
		else if (received_byte == REVERB_VOLUME_FLAG)
  40276c:	2cfb      	cmp	r4, #251	; 0xfb
  40276e:	d036      	beq.n	4027de <USART1_Handler+0x11a>
		else if (received_byte == AUTOTUNE_FLAG)
  402770:	2cfc      	cmp	r4, #252	; 0xfc
  402772:	d037      	beq.n	4027e4 <USART1_Handler+0x120>
		else if (received_byte != 0 && harmony_idx < MAX_NUM_SHIFTS)
  402774:	4b2a      	ldr	r3, [pc, #168]	; (402820 <USART1_Handler+0x15c>)
  402776:	b1e4      	cbz	r4, 4027b2 <USART1_Handler+0xee>
  402778:	681a      	ldr	r2, [r3, #0]
  40277a:	2a0a      	cmp	r2, #10
  40277c:	d819      	bhi.n	4027b2 <USART1_Handler+0xee>
			harmony_list_fill[harmony_idx].freq = midi_note_frequencies[received_byte]; 
  40277e:	4829      	ldr	r0, [pc, #164]	; (402824 <USART1_Handler+0x160>)
  402780:	4929      	ldr	r1, [pc, #164]	; (402828 <USART1_Handler+0x164>)
  402782:	681d      	ldr	r5, [r3, #0]
  402784:	6802      	ldr	r2, [r0, #0]
  402786:	eb01 0484 	add.w	r4, r1, r4, lsl #2
  40278a:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
  40278e:	6821      	ldr	r1, [r4, #0]
  402790:	6011      	str	r1, [r2, #0]
			harmony_list_fill[harmony_idx].idx = received_byte; 
  402792:	6802      	ldr	r2, [r0, #0]
  402794:	6818      	ldr	r0, [r3, #0]
  402796:	9901      	ldr	r1, [sp, #4]
  402798:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
  40279c:	6051      	str	r1, [r2, #4]
			harmony_idx++;
  40279e:	681a      	ldr	r2, [r3, #0]
  4027a0:	3201      	adds	r2, #1
  4027a2:	601a      	str	r2, [r3, #0]
  4027a4:	e795      	b.n	4026d2 <USART1_Handler+0xe>
			waiting_for_harm_volume = true; 
  4027a6:	2301      	movs	r3, #1
  4027a8:	7013      	strb	r3, [r2, #0]
  4027aa:	e792      	b.n	4026d2 <USART1_Handler+0xe>
			waiting_for_master_volume = true;
  4027ac:	2301      	movs	r3, #1
  4027ae:	700b      	strb	r3, [r1, #0]
  4027b0:	e78f      	b.n	4026d2 <USART1_Handler+0xe>
			harmony_list_fill[harmony_idx].freq = END_OF_SHIFTS; 
  4027b2:	491c      	ldr	r1, [pc, #112]	; (402824 <USART1_Handler+0x160>)
			harmony_list_fill[harmony_idx].idx = 0; // dont care 
  4027b4:	2000      	movs	r0, #0
			harmony_list_fill[harmony_idx].freq = END_OF_SHIFTS; 
  4027b6:	681e      	ldr	r6, [r3, #0]
  4027b8:	680a      	ldr	r2, [r1, #0]
  4027ba:	4d1c      	ldr	r5, [pc, #112]	; (40282c <USART1_Handler+0x168>)
  4027bc:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
			harmony_t *temp = (harmony_t *)harmony_list_read; 
  4027c0:	4c1b      	ldr	r4, [pc, #108]	; (402830 <USART1_Handler+0x16c>)
			harmony_list_fill[harmony_idx].freq = END_OF_SHIFTS; 
  4027c2:	6015      	str	r5, [r2, #0]
			harmony_list_fill[harmony_idx].idx = 0; // dont care 
  4027c4:	680d      	ldr	r5, [r1, #0]
  4027c6:	681a      	ldr	r2, [r3, #0]
			harmony_t *temp = (harmony_t *)harmony_list_read; 
  4027c8:	6826      	ldr	r6, [r4, #0]
			harmony_list_fill[harmony_idx].idx = 0; // dont care 
  4027ca:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
			harmony_list_read = harmony_list_fill;		
  4027ce:	6025      	str	r5, [r4, #0]
			harmony_list_fill = temp; 
  4027d0:	600e      	str	r6, [r1, #0]
			harmony_list_fill[harmony_idx].idx = 0; // dont care 
  4027d2:	6050      	str	r0, [r2, #4]
			harmony_idx = 0; 
  4027d4:	6018      	str	r0, [r3, #0]
}
  4027d6:	e77c      	b.n	4026d2 <USART1_Handler+0xe>
			waiting_for_pitch_bend = true;
  4027d8:	2301      	movs	r3, #1
  4027da:	7003      	strb	r3, [r0, #0]
  4027dc:	e779      	b.n	4026d2 <USART1_Handler+0xe>
			waiting_for_reverb_volume = true;
  4027de:	2201      	movs	r2, #1
  4027e0:	701a      	strb	r2, [r3, #0]
  4027e2:	e776      	b.n	4026d2 <USART1_Handler+0xe>
			autotune = !autotune; 
  4027e4:	4a13      	ldr	r2, [pc, #76]	; (402834 <USART1_Handler+0x170>)
  4027e6:	7813      	ldrb	r3, [r2, #0]
  4027e8:	f083 0301 	eor.w	r3, r3, #1
  4027ec:	7013      	strb	r3, [r2, #0]
  4027ee:	e770      	b.n	4026d2 <USART1_Handler+0xe>
  4027f0:	004017cd 	.word	0x004017cd
  4027f4:	40028000 	.word	0x40028000
  4027f8:	004017d1 	.word	0x004017d1
  4027fc:	2043c400 	.word	0x2043c400
  402800:	2043c401 	.word	0x2043c401
  402804:	3c010204 	.word	0x3c010204
  402808:	20400040 	.word	0x20400040
  40280c:	20400034 	.word	0x20400034
  402810:	2043c402 	.word	0x2043c402
  402814:	2043c403 	.word	0x2043c403
  402818:	20400048 	.word	0x20400048
  40281c:	20400044 	.word	0x20400044
  402820:	2043a000 	.word	0x2043a000
  402824:	20400038 	.word	0x20400038
  402828:	00406878 	.word	0x00406878
  40282c:	bf800000 	.word	0xbf800000
  402830:	2040003c 	.word	0x2040003c
  402834:	20400030 	.word	0x20400030

00402838 <main>:

// uncomment to communicate to pc console over uart for debug 
//#define USING_CONSOLE

int main(void)
{
  402838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sysclk_init();
  40283c:	4bbe      	ldr	r3, [pc, #760]	; (402b38 <main+0x300>)
{
  40283e:	ed2d 8b06 	vpush	{d8-d10}
  402842:	b093      	sub	sp, #76	; 0x4c
	sysclk_init();
  402844:	4798      	blx	r3
	board_init();
  402846:	4bbd      	ldr	r3, [pc, #756]	; (402b3c <main+0x304>)
  402848:	4798      	blx	r3
  __ASM volatile ("dsb");
  40284a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40284e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_DisableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->CCR &= ~SCB_CCR_IC_Msk;            // disable I-Cache
  402852:	4bbb      	ldr	r3, [pc, #748]	; (402b40 <main+0x308>)
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  402854:	2500      	movs	r5, #0
    SCB->CCR &= ~SCB_CCR_IC_Msk;            // disable I-Cache
  402856:	695a      	ldr	r2, [r3, #20]
  402858:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  40285c:	615a      	str	r2, [r3, #20]
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  40285e:	f8c3 5250 	str.w	r5, [r3, #592]	; 0x250
  __ASM volatile ("dsb");
  402862:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402866:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb");
  40286a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40286e:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  402872:	f8c3 5250 	str.w	r5, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  402876:	695a      	ldr	r2, [r3, #20]
  402878:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  40287c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  40287e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402882:	f3bf 8f6f 	isb	sy
 	SCB_DisableICache(); 
// 	lcd_init(); 
 	SCB_EnableICache();
	audio_init();
  402886:	4baf      	ldr	r3, [pc, #700]	; (402b44 <main+0x30c>)
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  402888:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
  40288c:	4798      	blx	r3
#ifdef USING_CONSOLE
	configure_console();
#endif 
	PSOLA_init(); 
  40288e:	4bae      	ldr	r3, [pc, #696]	; (402b48 <main+0x310>)
  402890:	4798      	blx	r3
	usart_settings.char_length = opt->charlength;
  402892:	21c0      	movs	r1, #192	; 0xc0
	usart_settings.parity_type = opt->paritytype;
  402894:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402898:	4bac      	ldr	r3, [pc, #688]	; (402b4c <main+0x314>)
  40289a:	200e      	movs	r0, #14
	usart_settings.baudrate = opt->baudrate;
  40289c:	9606      	str	r6, [sp, #24]
	usart_settings.char_length = opt->charlength;
  40289e:	9107      	str	r1, [sp, #28]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4028a0:	f44f 4880 	mov.w	r8, #16384	; 0x4000
	usart_settings.parity_type = opt->paritytype;
  4028a4:	9208      	str	r2, [sp, #32]
  4028a6:	f06f 0a01 	mvn.w	sl, #1
	usart_settings.stop_bits= opt->stopbits;
  4028aa:	9509      	str	r5, [sp, #36]	; 0x24
	harmony_shifts[0] = NO_SHIFT;
	harmony_shifts[1] = END_OF_SHIFTS; 
	harmony_shifts[MAX_NUM_SHIFTS] = END_OF_SHIFTS; // should never change 
	arm_fill_f32(0.0f, prev_input, WIN_SIZE); 
	uint32_t num_of_shifts = 0; 
	uint32_t circ_buf_idx = 0; 
  4028ac:	462c      	mov	r4, r5
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4028ae:	950a      	str	r5, [sp, #40]	; 0x28
  4028b0:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4028b2:	4aa7      	ldr	r2, [pc, #668]	; (402b50 <main+0x318>)
  4028b4:	a906      	add	r1, sp, #24
  4028b6:	4ba7      	ldr	r3, [pc, #668]	; (402b54 <main+0x31c>)
  4028b8:	48a7      	ldr	r0, [pc, #668]	; (402b58 <main+0x320>)
  4028ba:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4028bc:	4fa7      	ldr	r7, [pc, #668]	; (402b5c <main+0x324>)
  4028be:	48a6      	ldr	r0, [pc, #664]	; (402b58 <main+0x320>)
  4028c0:	47b8      	blx	r7
		usart_enable_rx(p_usart);
  4028c2:	4ea7      	ldr	r6, [pc, #668]	; (402b60 <main+0x328>)
  4028c4:	48a4      	ldr	r0, [pc, #656]	; (402b58 <main+0x320>)
  4028c6:	47b0      	blx	r6
	usart_enable_tx(USART_SERIAL);
  4028c8:	48a3      	ldr	r0, [pc, #652]	; (402b58 <main+0x320>)
  4028ca:	47b8      	blx	r7
  4028cc:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 402bbc <main+0x384>
	usart_enable_rx(USART_SERIAL);
  4028d0:	48a1      	ldr	r0, [pc, #644]	; (402b58 <main+0x320>)
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4028d2:	2740      	movs	r7, #64	; 0x40
  4028d4:	47b0      	blx	r6
	usart_enable_interrupt(USART_SERIAL, US_IER_RXRDY); 
  4028d6:	2101      	movs	r1, #1
  4028d8:	489f      	ldr	r0, [pc, #636]	; (402b58 <main+0x320>)
				harmony_shifts[1] = END_OF_SHIFTS; 	
				num_of_shifts = 1; 
			}
			
			// return pitch shifted data from previous samples block  
			create_harmonies((float  *)processBuffer, mixed_buffer, inputPitch, harmony_shifts, (float)harm_volume); 
  4028da:	f5ab 5980 	sub.w	r9, fp, #4096	; 0x1000
	usart_enable_interrupt(USART_SERIAL, US_IER_RXRDY); 
  4028de:	4ba1      	ldr	r3, [pc, #644]	; (402b64 <main+0x32c>)
  4028e0:	4798      	blx	r3
  4028e2:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 402bc0 <main+0x388>
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  4028e6:	2300      	movs	r3, #0
  4028e8:	f8df e2d8 	ldr.w	lr, [pc, #728]	; 402bc4 <main+0x38c>
  4028ec:	499e      	ldr	r1, [pc, #632]	; (402b68 <main+0x330>)
	harmony_shifts[1] = END_OF_SHIFTS; 
  4028ee:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
	harmony_shifts[0] = NO_SHIFT;
  4028f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  4028f6:	f88c 730e 	strb.w	r7, [ip, #782]	; 0x30e
  4028fa:	ebaa 0a09 	sub.w	sl, sl, r9
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4028fe:	f8cc 8180 	str.w	r8, [ip, #384]	; 0x180
  402902:	ed9f 8a9a 	vldr	s16, [pc, #616]	; 402b6c <main+0x334>
	arm_fill_f32(0.0f, prev_input, WIN_SIZE); 
  402906:	4618      	mov	r0, r3
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402908:	f8cc 8000 	str.w	r8, [ip]
  40290c:	f44f 6280 	mov.w	r2, #1024	; 0x400
						if (pitch_shift > 0.1f && pitch_shift < 6.0f) // range check 
  402910:	eddf 8a97 	vldr	s17, [pc, #604]	; 402b70 <main+0x338>
  402914:	4e97      	ldr	r6, [pc, #604]	; (402b74 <main+0x33c>)
  402916:	4f98      	ldr	r7, [pc, #608]	; (402b78 <main+0x340>)
  402918:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 402bc8 <main+0x390>
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  40291c:	f8ce 3000 	str.w	r3, [lr]
  402920:	600b      	str	r3, [r1, #0]
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  402922:	f8ce 5004 	str.w	r5, [lr, #4]
  402926:	604d      	str	r5, [r1, #4]
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402928:	f8ce 3008 	str.w	r3, [lr, #8]
  40292c:	608b      	str	r3, [r1, #8]
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  40292e:	f8ce 500c 	str.w	r5, [lr, #12]
  402932:	60cd      	str	r5, [r1, #12]
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402934:	f8ce 3010 	str.w	r3, [lr, #16]
  402938:	610b      	str	r3, [r1, #16]
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  40293a:	f8ce 5014 	str.w	r5, [lr, #20]
  40293e:	614d      	str	r5, [r1, #20]
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402940:	f8ce 3018 	str.w	r3, [lr, #24]
  402944:	618b      	str	r3, [r1, #24]
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  402946:	f8ce 501c 	str.w	r5, [lr, #28]
  40294a:	61cd      	str	r5, [r1, #28]
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  40294c:	f8ce 3020 	str.w	r3, [lr, #32]
  402950:	620b      	str	r3, [r1, #32]
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  402952:	f8ce 5024 	str.w	r5, [lr, #36]	; 0x24
  402956:	624d      	str	r5, [r1, #36]	; 0x24
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402958:	f8ce 3028 	str.w	r3, [lr, #40]	; 0x28
  40295c:	628b      	str	r3, [r1, #40]	; 0x28
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  40295e:	f8ce 502c 	str.w	r5, [lr, #44]	; 0x2c
  402962:	62cd      	str	r5, [r1, #44]	; 0x2c
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402964:	f8ce 3030 	str.w	r3, [lr, #48]	; 0x30
  402968:	630b      	str	r3, [r1, #48]	; 0x30
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  40296a:	f8ce 5034 	str.w	r5, [lr, #52]	; 0x34
  40296e:	634d      	str	r5, [r1, #52]	; 0x34
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402970:	f8ce 3038 	str.w	r3, [lr, #56]	; 0x38
  402974:	638b      	str	r3, [r1, #56]	; 0x38
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  402976:	f8ce 503c 	str.w	r5, [lr, #60]	; 0x3c
  40297a:	63cd      	str	r5, [r1, #60]	; 0x3c
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  40297c:	f8ce 3040 	str.w	r3, [lr, #64]	; 0x40
  402980:	640b      	str	r3, [r1, #64]	; 0x40
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  402982:	f8ce 5044 	str.w	r5, [lr, #68]	; 0x44
  402986:	644d      	str	r5, [r1, #68]	; 0x44
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402988:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
  40298c:	648b      	str	r3, [r1, #72]	; 0x48
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  40298e:	f8ce 504c 	str.w	r5, [lr, #76]	; 0x4c
  402992:	64cd      	str	r5, [r1, #76]	; 0x4c
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402994:	f8ce 3050 	str.w	r3, [lr, #80]	; 0x50
  402998:	650b      	str	r3, [r1, #80]	; 0x50
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  40299a:	f8ce 5054 	str.w	r5, [lr, #84]	; 0x54
	arm_fill_f32(0.0f, prev_input, WIN_SIZE); 
  40299e:	4b77      	ldr	r3, [pc, #476]	; (402b7c <main+0x344>)
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  4029a0:	654d      	str	r5, [r1, #84]	; 0x54
	arm_fill_f32(0.0f, prev_input, WIN_SIZE); 
  4029a2:	4977      	ldr	r1, [pc, #476]	; (402b80 <main+0x348>)
	harmony_shifts[0] = NO_SHIFT;
  4029a4:	ed8d 7a06 	vstr	s14, [sp, #24]
	harmony_shifts[1] = END_OF_SHIFTS; 
  4029a8:	edcd 7a07 	vstr	s15, [sp, #28]
	harmony_shifts[MAX_NUM_SHIFTS] = END_OF_SHIFTS; // should never change 
  4029ac:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
	arm_fill_f32(0.0f, prev_input, WIN_SIZE); 
  4029b0:	4798      	blx	r3
		if (dataReceived)
  4029b2:	4b74      	ldr	r3, [pc, #464]	; (402b84 <main+0x34c>)
  4029b4:	781b      	ldrb	r3, [r3, #0]
  4029b6:	2b00      	cmp	r3, #0
  4029b8:	d0fb      	beq.n	4029b2 <main+0x17a>
			inputPitch = computeWaveletPitch((float  *)processBuffer);
  4029ba:	4a73      	ldr	r2, [pc, #460]	; (402b88 <main+0x350>)
			dataReceived = false; 
  4029bc:	2300      	movs	r3, #0
			oneOverInputPitch = 1.0f / inputPitch;
  4029be:	eddf 9a73 	vldr	s19, [pc, #460]	; 402b8c <main+0x354>
			inputPitch = computeWaveletPitch((float  *)processBuffer);
  4029c2:	6810      	ldr	r0, [r2, #0]
			dataReceived = false; 
  4029c4:	4a6f      	ldr	r2, [pc, #444]	; (402b84 <main+0x34c>)
  4029c6:	7013      	strb	r3, [r2, #0]
			inputPitch = computeWaveletPitch((float  *)processBuffer);
  4029c8:	4b71      	ldr	r3, [pc, #452]	; (402b90 <main+0x358>)
  4029ca:	4798      	blx	r3
			oneOverInputPitch = 1.0f / inputPitch;
  4029cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  4029d0:	ee07 0a90 	vmov	s15, r0
	uint32_t hi = 127;
  4029d4:	217f      	movs	r1, #127	; 0x7f
	uint32_t lo = 12; // lowest at C0
  4029d6:	200c      	movs	r0, #12
  4029d8:	fe87 9a88 	vmaxnm.f32	s18, s15, s16
			oneOverInputPitch = 1.0f / inputPitch;
  4029dc:	ee87 aa09 	vdiv.f32	s20, s14, s18
  4029e0:	eddf 7a6c 	vldr	s15, [pc, #432]	; 402b94 <main+0x35c>
		mid = (hi + lo) >> 1;
  4029e4:	1843      	adds	r3, r0, r1
  4029e6:	085b      	lsrs	r3, r3, #1
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  4029e8:	ee37 7ac9 	vsub.f32	s14, s15, s18
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  4029ec:	ee79 7ac9 	vsub.f32	s15, s19, s18
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  4029f0:	1c5a      	adds	r2, r3, #1
  4029f2:	eeb0 7ac7 	vabs.f32	s14, s14
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  4029f6:	eef0 7ae7 	vabs.f32	s15, s15
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  4029fa:	eebc 7ac7 	vcvt.u32.f32	s14, s14
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  4029fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		if (d2 <= d1)
  402a02:	ee17 5a10 	vmov	r5, s14
  402a06:	ee17 ea90 	vmov	lr, s15
  402a0a:	4575      	cmp	r5, lr
  402a0c:	f200 8219 	bhi.w	402e42 <main+0x60a>
  402a10:	46a4      	mov	ip, r4
  402a12:	e01e      	b.n	402a52 <main+0x21a>
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402a14:	4c60      	ldr	r4, [pc, #384]	; (402b98 <main+0x360>)
  402a16:	1c5d      	adds	r5, r3, #1
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402a18:	485f      	ldr	r0, [pc, #380]	; (402b98 <main+0x360>)
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402a1a:	eb04 0e85 	add.w	lr, r4, r5, lsl #2
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402a1e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402a22:	edde 7a00 	vldr	s15, [lr]
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402a26:	edd0 9a00 	vldr	s19, [r0]
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402a2a:	ee77 7ac9 	vsub.f32	s15, s15, s18
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402a2e:	ee39 7ac9 	vsub.f32	s14, s19, s18
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402a32:	eef0 7ae7 	vabs.f32	s15, s15
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402a36:	eeb0 7ac7 	vabs.f32	s14, s14
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402a3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402a3e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
		if (d2 <= d1)
  402a42:	ee17 4a90 	vmov	r4, s15
  402a46:	ee17 0a10 	vmov	r0, s14
  402a4a:	42a0      	cmp	r0, r4
  402a4c:	f0c0 8135 	bcc.w	402cba <main+0x482>
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402a50:	462a      	mov	r2, r5
		mid = (hi + lo) >> 1;
  402a52:	1853      	adds	r3, r2, r1
	while (lo < hi)
  402a54:	428a      	cmp	r2, r1
		mid = (hi + lo) >> 1;
  402a56:	ea4f 0353 	mov.w	r3, r3, lsr #1
	while (lo < hi)
  402a5a:	d3db      	bcc.n	402a14 <main+0x1dc>
  402a5c:	4b4e      	ldr	r3, [pc, #312]	; (402b98 <main+0x360>)
  402a5e:	4664      	mov	r4, ip
  402a60:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  402a64:	edd3 9a00 	vldr	s19, [r3]
			if (autotune)
  402a68:	4b4c      	ldr	r3, [pc, #304]	; (402b9c <main+0x364>)
  402a6a:	781a      	ldrb	r2, [r3, #0]
			if (pitch_bend < 56 || pitch_bend > 72) // higher bounds for noise affecting pitch bend wheel 
  402a6c:	4b4c      	ldr	r3, [pc, #304]	; (402ba0 <main+0x368>)
				desired_pitch = closest_note;
  402a6e:	2a00      	cmp	r2, #0
			if (pitch_bend < 56 || pitch_bend > 72) // higher bounds for noise affecting pitch bend wheel 
  402a70:	681b      	ldr	r3, [r3, #0]
				desired_pitch = closest_note;
  402a72:	bf14      	ite	ne
  402a74:	eef0 7a69 	vmovne.f32	s15, s19
  402a78:	eef0 7a49 	vmoveq.f32	s15, s18
			if (pitch_bend < 56 || pitch_bend > 72) // higher bounds for noise affecting pitch bend wheel 
  402a7c:	2b37      	cmp	r3, #55	; 0x37
  402a7e:	d903      	bls.n	402a88 <main+0x250>
  402a80:	4b47      	ldr	r3, [pc, #284]	; (402ba0 <main+0x368>)
  402a82:	681b      	ldr	r3, [r3, #0]
  402a84:	2b48      	cmp	r3, #72	; 0x48
  402a86:	d91e      	bls.n	402ac6 <main+0x28e>
				bend_pitch(&desired_pitch, in_pitch_idx, (uint32_t)pitch_bend);
  402a88:	4b45      	ldr	r3, [pc, #276]	; (402ba0 <main+0x368>)
  402a8a:	681b      	ldr	r3, [r3, #0]
	if (pitch_idx < 0 || pitch_idx > 127 || bend < 0 || bend > 127)
  402a8c:	2b7f      	cmp	r3, #127	; 0x7f
  402a8e:	d81a      	bhi.n	402ac6 <main+0x28e>
	if (pitch_bend > 64)
  402a90:	4b43      	ldr	r3, [pc, #268]	; (402ba0 <main+0x368>)
  402a92:	681b      	ldr	r3, [r3, #0]
  402a94:	2b40      	cmp	r3, #64	; 0x40
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  402a96:	4b42      	ldr	r3, [pc, #264]	; (402ba0 <main+0x368>)
  402a98:	edd3 6a00 	vldr	s13, [r3]
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  402a9c:	4b3e      	ldr	r3, [pc, #248]	; (402b98 <main+0x360>)
  402a9e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	if (pitch_bend > 64)
  402aa2:	f200 81bd 	bhi.w	402e20 <main+0x5e8>
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402aa6:	eef8 6a66 	vcvt.f32.u32	s13, s13
  402aaa:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 402ba4 <main+0x36c>
  402aae:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 402ba8 <main+0x370>
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402ab2:	ed51 5a02 	vldr	s11, [r1, #-8]
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402ab6:	ee76 6ac6 	vsub.f32	s13, s13, s12
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402aba:	ee39 6ae5 	vsub.f32	s12, s19, s11
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402abe:	ee26 7a87 	vmul.f32	s14, s13, s14
  402ac2:	eee7 7a06 	vfma.f32	s15, s14, s12
			pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402ac6:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
			arm_power_f32((float  *)processBuffer, WIN_SIZE>>2, &power);
  402aca:	4b2f      	ldr	r3, [pc, #188]	; (402b88 <main+0x350>)
			pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402acc:	ee77 7ac9 	vsub.f32	s15, s15, s18
			arm_power_f32((float  *)processBuffer, WIN_SIZE>>2, &power);
  402ad0:	aa05      	add	r2, sp, #20
  402ad2:	6818      	ldr	r0, [r3, #0]
  402ad4:	f44f 7180 	mov.w	r1, #256	; 0x100
			pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402ad8:	eeb0 7a6a 	vmov.f32	s14, s21
			arm_power_f32((float  *)processBuffer, WIN_SIZE>>2, &power);
  402adc:	4b33      	ldr	r3, [pc, #204]	; (402bac <main+0x374>)
			pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402ade:	eeaa 7a27 	vfma.f32	s14, s20, s15
			harmony_shifts[0] = pitch_shift ;
  402ae2:	ed8d 7a06 	vstr	s14, [sp, #24]
			arm_power_f32((float  *)processBuffer, WIN_SIZE>>2, &power);
  402ae6:	4798      	blx	r3
			if (inputPitch > MINIMUM_PITCH && power > POWER_THRESHOLD)
  402ae8:	eeb4 9ac8 	vcmpe.f32	s18, s16
  402aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402af0:	f340 80f3 	ble.w	402cda <main+0x4a2>
  402af4:	eddf 7a2e 	vldr	s15, [pc, #184]	; 402bb0 <main+0x378>
  402af8:	ed9d 7a05 	vldr	s14, [sp, #20]
  402afc:	eeb4 7ae7 	vcmpe.f32	s14, s15
  402b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402b04:	f340 80e9 	ble.w	402cda <main+0x4a2>
				while(harmony_list_read[i].freq > 1.0f && i < MAX_NUM_SHIFTS-1)
  402b08:	4b2a      	ldr	r3, [pc, #168]	; (402bb4 <main+0x37c>)
  402b0a:	681b      	ldr	r3, [r3, #0]
  402b0c:	edd3 7a00 	vldr	s15, [r3]
  402b10:	eef4 7aea 	vcmpe.f32	s15, s21
  402b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402b18:	f340 8199 	ble.w	402e4e <main+0x616>
						if (pitch_shift > 0.1f && pitch_shift < 6.0f) // range check 
  402b1c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
				while(harmony_list_read[i].freq > 1.0f && i < MAX_NUM_SHIFTS-1)
  402b20:	2001      	movs	r0, #1
					if (Abs(harmony_list_read[i].freq - closest_note) > 1.0f) // don't harmonies input pitch twice 
  402b22:	eeb0 7a6a 	vmov.f32	s14, s21
				while(harmony_list_read[i].freq > 1.0f && i < MAX_NUM_SHIFTS-1)
  402b26:	2200      	movs	r2, #0
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402b28:	eddf 3a1e 	vldr	s7, [pc, #120]	; 402ba4 <main+0x36c>
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  402b2c:	46a6      	mov	lr, r4
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402b2e:	eddf 4a1e 	vldr	s9, [pc, #120]	; 402ba8 <main+0x370>
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  402b32:	ed9f 4a21 	vldr	s8, [pc, #132]	; 402bb8 <main+0x380>
  402b36:	e081      	b.n	402c3c <main+0x404>
  402b38:	00401825 	.word	0x00401825
  402b3c:	00401895 	.word	0x00401895
  402b40:	e000ed00 	.word	0xe000ed00
  402b44:	00400379 	.word	0x00400379
  402b48:	00400d09 	.word	0x00400d09
  402b4c:	0040236d 	.word	0x0040236d
  402b50:	08f0d180 	.word	0x08f0d180
  402b54:	00401719 	.word	0x00401719
  402b58:	40028000 	.word	0x40028000
  402b5c:	004017b9 	.word	0x004017b9
  402b60:	004017c1 	.word	0x004017c1
  402b64:	004017c9 	.word	0x004017c9
  402b68:	2044c80c 	.word	0x2044c80c
  402b6c:	42c80000 	.word	0x42c80000
  402b70:	bf666666 	.word	0xbf666666
  402b74:	20432000 	.word	0x20432000
  402b78:	2043e000 	.word	0x2043e000
  402b7c:	00402ead 	.word	0x00402ead
  402b80:	2043b400 	.word	0x2043b400
  402b84:	2040201c 	.word	0x2040201c
  402b88:	2040001c 	.word	0x2040001c
  402b8c:	43dc0000 	.word	0x43dc0000
  402b90:	004005d1 	.word	0x004005d1
  402b94:	43e914fe 	.word	0x43e914fe
  402b98:	00406878 	.word	0x00406878
  402b9c:	20400030 	.word	0x20400030
  402ba0:	20400044 	.word	0x20400044
  402ba4:	42800000 	.word	0x42800000
  402ba8:	3c800000 	.word	0x3c800000
  402bac:	00402f31 	.word	0x00402f31
  402bb0:	358637bd 	.word	0x358637bd
  402bb4:	2040003c 	.word	0x2040003c
  402bb8:	427c0000 	.word	0x427c0000
  402bbc:	2043b400 	.word	0x2043b400
  402bc0:	e000e100 	.word	0xe000e100
  402bc4:	2044c864 	.word	0x2044c864
  402bc8:	20400014 	.word	0x20400014
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402bcc:	4ca4      	ldr	r4, [pc, #656]	; (402e60 <main+0x628>)
  402bce:	ed94 6a00 	vldr	s12, [r4]
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402bd2:	4ca4      	ldr	r4, [pc, #656]	; (402e64 <main+0x62c>)
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402bd4:	eeb8 6a46 	vcvt.f32.u32	s12, s12
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402bd8:	eb04 0581 	add.w	r5, r4, r1, lsl #2
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402bdc:	ee36 6a63 	vsub.f32	s12, s12, s7
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402be0:	ed95 5a00 	vldr	s10, [r5]
  402be4:	ed55 5a02 	vldr	s11, [r5, #-8]
  402be8:	4629      	mov	r1, r5
  402bea:	ee75 5a65 	vsub.f32	s11, s10, s11
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402bee:	ee26 6a24 	vmul.f32	s12, s12, s9
  402bf2:	eee5 7a86 	vfma.f32	s15, s11, s12
						pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402bf6:	ee77 7ac9 	vsub.f32	s15, s15, s18
  402bfa:	ee67 7a8a 	vmul.f32	s15, s15, s20
						if (pitch_shift > 0.1f && pitch_shift < 6.0f) // range check 
  402bfe:	eef4 7a68 	vcmp.f32	s15, s17
  402c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402c06:	dd0c      	ble.n	402c22 <main+0x3ea>
  402c08:	eef4 7a66 	vcmp.f32	s15, s13
  402c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402c10:	d507      	bpl.n	402c22 <main+0x3ea>
							harmony_shifts[num_of_shifts++] = pitch_shift;
  402c12:	a912      	add	r1, sp, #72	; 0x48
						pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402c14:	ee77 7a87 	vadd.f32	s15, s15, s14
							harmony_shifts[num_of_shifts++] = pitch_shift;
  402c18:	eb01 0180 	add.w	r1, r1, r0, lsl #2
  402c1c:	3001      	adds	r0, #1
  402c1e:	ed41 7a0c 	vstr	s15, [r1, #-48]	; 0xffffffd0
				while(harmony_list_read[i].freq > 1.0f && i < MAX_NUM_SHIFTS-1)
  402c22:	3308      	adds	r3, #8
  402c24:	edd3 7a00 	vldr	s15, [r3]
					i++; 
  402c28:	3201      	adds	r2, #1
				while(harmony_list_read[i].freq > 1.0f && i < MAX_NUM_SHIFTS-1)
  402c2a:	eef4 7a47 	vcmp.f32	s15, s14
  402c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402c32:	f340 80ed 	ble.w	402e10 <main+0x5d8>
  402c36:	2a0a      	cmp	r2, #10
  402c38:	f000 80ea 	beq.w	402e10 <main+0x5d8>
					if (Abs(harmony_list_read[i].freq - closest_note) > 1.0f) // don't harmonies input pitch twice 
  402c3c:	edd3 7a00 	vldr	s15, [r3]
  402c40:	ee77 7ae9 	vsub.f32	s15, s15, s19
  402c44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  402c48:	edd3 7a00 	vldr	s15, [r3]
  402c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402c50:	bf4c      	ite	mi
  402c52:	ee79 7ae7 	vsubmi.f32	s15, s19, s15
  402c56:	ee77 7ae9 	vsubpl.f32	s15, s15, s19
  402c5a:	eef4 7ac7 	vcmpe.f32	s15, s14
  402c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402c62:	bfcc      	ite	gt
  402c64:	2101      	movgt	r1, #1
  402c66:	2100      	movle	r1, #0
  402c68:	2900      	cmp	r1, #0
  402c6a:	d0da      	beq.n	402c22 <main+0x3ea>
						if (pitch_bend != 64)
  402c6c:	497c      	ldr	r1, [pc, #496]	; (402e60 <main+0x628>)
						desired_pitch = harmony_list_read[i].freq; 
  402c6e:	edd3 7a00 	vldr	s15, [r3]
						if (pitch_bend != 64)
  402c72:	6809      	ldr	r1, [r1, #0]
  402c74:	2940      	cmp	r1, #64	; 0x40
  402c76:	d0be      	beq.n	402bf6 <main+0x3be>
							bend_pitch(&desired_pitch, harmony_list_read[i].idx, (uint32_t)pitch_bend);
  402c78:	6859      	ldr	r1, [r3, #4]
  402c7a:	4d79      	ldr	r5, [pc, #484]	; (402e60 <main+0x628>)
	if (pitch_idx < 0 || pitch_idx > 127 || bend < 0 || bend > 127)
  402c7c:	297f      	cmp	r1, #127	; 0x7f
							bend_pitch(&desired_pitch, harmony_list_read[i].idx, (uint32_t)pitch_bend);
  402c7e:	682d      	ldr	r5, [r5, #0]
	if (pitch_idx < 0 || pitch_idx > 127 || bend < 0 || bend > 127)
  402c80:	d8b9      	bhi.n	402bf6 <main+0x3be>
  402c82:	2d7f      	cmp	r5, #127	; 0x7f
  402c84:	d8b7      	bhi.n	402bf6 <main+0x3be>
	if (pitch_bend > 64)
  402c86:	4d76      	ldr	r5, [pc, #472]	; (402e60 <main+0x628>)
  402c88:	682d      	ldr	r5, [r5, #0]
  402c8a:	2d40      	cmp	r5, #64	; 0x40
  402c8c:	d99e      	bls.n	402bcc <main+0x394>
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  402c8e:	4d74      	ldr	r5, [pc, #464]	; (402e60 <main+0x628>)
  402c90:	ed95 6a00 	vldr	s12, [r5]
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  402c94:	4d73      	ldr	r5, [pc, #460]	; (402e64 <main+0x62c>)
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  402c96:	eeb8 6a46 	vcvt.f32.u32	s12, s12
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  402c9a:	eb05 0581 	add.w	r5, r5, r1, lsl #2
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  402c9e:	ee36 6a44 	vsub.f32	s12, s12, s8
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  402ca2:	ed95 5a02 	vldr	s10, [r5, #8]
  402ca6:	edd5 5a00 	vldr	s11, [r5]
  402caa:	4629      	mov	r1, r5
  402cac:	ee75 5a65 	vsub.f32	s11, s10, s11
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  402cb0:	ee26 6a24 	vmul.f32	s12, s12, s9
  402cb4:	eee6 7a25 	vfma.f32	s15, s12, s11
  402cb8:	e79d      	b.n	402bf6 <main+0x3be>
	while (lo < hi)
  402cba:	4293      	cmp	r3, r2
  402cbc:	4664      	mov	r4, ip
  402cbe:	f240 80c4 	bls.w	402e4a <main+0x612>
  402cc2:	189d      	adds	r5, r3, r2
  402cc4:	4619      	mov	r1, r3
  402cc6:	4610      	mov	r0, r2
  402cc8:	4a66      	ldr	r2, [pc, #408]	; (402e64 <main+0x62c>)
  402cca:	086b      	lsrs	r3, r5, #1
  402ccc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  402cd0:	edd2 7a01 	vldr	s15, [r2, #4]
  402cd4:	edd2 9a00 	vldr	s19, [r2]
  402cd8:	e684      	b.n	4029e4 <main+0x1ac>
				harmony_shifts[1] = END_OF_SHIFTS; 	
  402cda:	4b63      	ldr	r3, [pc, #396]	; (402e68 <main+0x630>)
  402cdc:	9307      	str	r3, [sp, #28]
			create_harmonies((float  *)processBuffer, mixed_buffer, inputPitch, harmony_shifts, (float)harm_volume); 
  402cde:	4b63      	ldr	r3, [pc, #396]	; (402e6c <main+0x634>)
  402ce0:	4a63      	ldr	r2, [pc, #396]	; (402e70 <main+0x638>)
  402ce2:	6819      	ldr	r1, [r3, #0]
  402ce4:	ab06      	add	r3, sp, #24
  402ce6:	6810      	ldr	r0, [r2, #0]
  402ce8:	ee19 2a10 	vmov	r2, s18
  402cec:	9100      	str	r1, [sp, #0]
  402cee:	4649      	mov	r1, r9
  402cf0:	4d60      	ldr	r5, [pc, #384]	; (402e74 <main+0x63c>)
  402cf2:	47a8      	blx	r5
  402cf4:	4622      	mov	r2, r4
  402cf6:	4d60      	ldr	r5, [pc, #384]	; (402e78 <main+0x640>)
			
			// save dry audio 
			for (i = 0; i < WIN_SIZE; i++)
			{
				dry_circ_buffer[circ_buf_idx++ & CIRC_MASK] = mixed_buffer[i];
  402cf8:	f3c2 030c 	ubfx	r3, r2, #0, #13
  402cfc:	f855 1b04 	ldr.w	r1, [r5], #4
  402d00:	3201      	adds	r2, #1
  402d02:	eb06 0383 	add.w	r3, r6, r3, lsl #2
			for (i = 0; i < WIN_SIZE; i++)
  402d06:	455d      	cmp	r5, fp
				dry_circ_buffer[circ_buf_idx++ & CIRC_MASK] = mixed_buffer[i];
  402d08:	6019      	str	r1, [r3, #0]
			for (i = 0; i < WIN_SIZE; i++)
  402d0a:	d1f5      	bne.n	402cf8 <main+0x4c0>
// 			uint32_t delay = (0.014f + 0.010f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * 10.0f / 48000.0f)) * 48000.0f;
// 			if (sin_cnt == 4800)
// 			sin_cnt = 0;
			for (i = 0; i < WIN_SIZE; i++, curr_idx++)
			{
				wet_circ_buffer[curr_idx & CIRC_MASK] = 0.50f*dry_circ_buffer[(curr_idx - 1000)  & CIRC_MASK] + 
  402d0c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
  402d10:	f504 6180 	add.w	r1, r4, #1024	; 0x400
			curr_idx = circ_buf_idx - (uint32_t)WIN_SIZE;
  402d14:	4623      	mov	r3, r4
														0.38f*dry_circ_buffer[(curr_idx - 2000)  & CIRC_MASK] +
  402d16:	ed9f 6a59 	vldr	s12, [pc, #356]	; 402e7c <main+0x644>
  402d1a:	eddf 6a59 	vldr	s13, [pc, #356]	; 402e80 <main+0x648>
  402d1e:	f5a3 62fa 	sub.w	r2, r3, #2000	; 0x7d0
				wet_circ_buffer[curr_idx & CIRC_MASK] = 0.50f*dry_circ_buffer[(curr_idx - 1000)  & CIRC_MASK] + 
  402d22:	f5a3 707a 	sub.w	r0, r3, #1000	; 0x3e8
														0.38f*dry_circ_buffer[(curr_idx - 2000)  & CIRC_MASK] +
  402d26:	f3c2 020c 	ubfx	r2, r2, #0, #13
				wet_circ_buffer[curr_idx & CIRC_MASK] = 0.50f*dry_circ_buffer[(curr_idx - 1000)  & CIRC_MASK] + 
  402d2a:	f3c0 000c 	ubfx	r0, r0, #0, #13
														0.38f*dry_circ_buffer[(curr_idx - 2000)  & CIRC_MASK] +
  402d2e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				wet_circ_buffer[curr_idx & CIRC_MASK] = 0.50f*dry_circ_buffer[(curr_idx - 1000)  & CIRC_MASK] + 
  402d32:	eb06 0080 	add.w	r0, r6, r0, lsl #2
														0.38f*dry_circ_buffer[(curr_idx - 2000)  & CIRC_MASK] +
  402d36:	edd2 7a00 	vldr	s15, [r2]
														0.12f*wet_circ_buffer[(curr_idx - 8000)  & CIRC_MASK];  
  402d3a:	f5a3 52fa 	sub.w	r2, r3, #8000	; 0x1f40
				wet_circ_buffer[curr_idx & CIRC_MASK] = 0.50f*dry_circ_buffer[(curr_idx - 1000)  & CIRC_MASK] + 
  402d3e:	ed90 7a00 	vldr	s14, [r0]
  402d42:	f3c3 000c 	ubfx	r0, r3, #0, #13
														0.38f*dry_circ_buffer[(curr_idx - 2000)  & CIRC_MASK] +
  402d46:	ee67 7a86 	vmul.f32	s15, s15, s12
														0.12f*wet_circ_buffer[(curr_idx - 8000)  & CIRC_MASK];  
  402d4a:	f3c2 020c 	ubfx	r2, r2, #0, #13
			for (i = 0; i < WIN_SIZE; i++, curr_idx++)
  402d4e:	3301      	adds	r3, #1
				wet_circ_buffer[curr_idx & CIRC_MASK] = 0.50f*dry_circ_buffer[(curr_idx - 1000)  & CIRC_MASK] + 
  402d50:	eb07 0080 	add.w	r0, r7, r0, lsl #2
														0.12f*wet_circ_buffer[(curr_idx - 8000)  & CIRC_MASK];  
  402d54:	eb07 0282 	add.w	r2, r7, r2, lsl #2
				wet_circ_buffer[curr_idx & CIRC_MASK] = 0.50f*dry_circ_buffer[(curr_idx - 1000)  & CIRC_MASK] + 
  402d58:	eee7 7a25 	vfma.f32	s15, s14, s11
			for (i = 0; i < WIN_SIZE; i++, curr_idx++)
  402d5c:	428b      	cmp	r3, r1
														0.38f*dry_circ_buffer[(curr_idx - 2000)  & CIRC_MASK] +
  402d5e:	ed92 7a00 	vldr	s14, [r2]
  402d62:	eee7 7a26 	vfma.f32	s15, s14, s13
				wet_circ_buffer[curr_idx & CIRC_MASK] = 0.50f*dry_circ_buffer[(curr_idx - 1000)  & CIRC_MASK] + 
  402d66:	edc0 7a00 	vstr	s15, [r0]
			for (i = 0; i < WIN_SIZE; i++, curr_idx++)
  402d6a:	d1d8      	bne.n	402d1e <main+0x4e6>
  402d6c:	4a42      	ldr	r2, [pc, #264]	; (402e78 <main+0x640>)
			// mix verb and delay 
			curr_idx = circ_buf_idx - (uint32_t)WIN_SIZE;
			for (i = 0; i < WIN_SIZE; i++, curr_idx++)
			{
// 				mixed_buffer[i] = (1.0f - reverb_volume)*dry_circ_buffer[curr_idx & CIRC_MASK] + reverb_volume*wet_circ_buffer[curr_idx & CIRC_MASK];
				mixed_buffer[i] = dry_circ_buffer[curr_idx & CIRC_MASK] + reverb_volume*wet_circ_buffer[curr_idx & CIRC_MASK];
  402d6e:	f3c4 030c 	ubfx	r3, r4, #0, #13
  402d72:	4844      	ldr	r0, [pc, #272]	; (402e84 <main+0x64c>)
			for (i = 0; i < WIN_SIZE; i++, curr_idx++)
  402d74:	3401      	adds	r4, #1
				mixed_buffer[i] = dry_circ_buffer[curr_idx & CIRC_MASK] + reverb_volume*wet_circ_buffer[curr_idx & CIRC_MASK];
  402d76:	009b      	lsls	r3, r3, #2
  402d78:	ed90 7a00 	vldr	s14, [r0]
			for (i = 0; i < WIN_SIZE; i++, curr_idx++)
  402d7c:	428c      	cmp	r4, r1
				mixed_buffer[i] = dry_circ_buffer[curr_idx & CIRC_MASK] + reverb_volume*wet_circ_buffer[curr_idx & CIRC_MASK];
  402d7e:	eb07 0003 	add.w	r0, r7, r3
  402d82:	4433      	add	r3, r6
  402d84:	edd0 6a00 	vldr	s13, [r0]
  402d88:	edd3 7a00 	vldr	s15, [r3]
  402d8c:	eee6 7a87 	vfma.f32	s15, s13, s14
  402d90:	ece2 7a01 	vstmia	r2!, {s15}
			for (i = 0; i < WIN_SIZE; i++, curr_idx++)
  402d94:	d1eb      	bne.n	402d6e <main+0x536>
			}

			// scale output 
			arm_scale_f32(mixed_buffer, (float)INT16_MAX * master_volume * 0.4, mixed_buffer, WIN_SIZE);
  402d96:	4b3c      	ldr	r3, [pc, #240]	; (402e88 <main+0x650>)
  402d98:	eddf 7a3c 	vldr	s15, [pc, #240]	; 402e8c <main+0x654>
  402d9c:	ed93 7a00 	vldr	s14, [r3]
  402da0:	9503      	str	r5, [sp, #12]
  402da2:	ee67 7a27 	vmul.f32	s15, s14, s15
  402da6:	4b3a      	ldr	r3, [pc, #232]	; (402e90 <main+0x658>)
  402da8:	4d3a      	ldr	r5, [pc, #232]	; (402e94 <main+0x65c>)
  402daa:	ee17 0a90 	vmov	r0, s15
  402dae:	4798      	blx	r3
  402db0:	a329      	add	r3, pc, #164	; (adr r3, 402e58 <main+0x620>)
  402db2:	e9d3 2300 	ldrd	r2, r3, [r3]
  402db6:	47a8      	blx	r5
  402db8:	4b37      	ldr	r3, [pc, #220]	; (402e98 <main+0x660>)
  402dba:	4798      	blx	r3
  402dbc:	4d37      	ldr	r5, [pc, #220]	; (402e9c <main+0x664>)
  402dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402dc2:	4601      	mov	r1, r0
  402dc4:	464a      	mov	r2, r9
  402dc6:	482c      	ldr	r0, [pc, #176]	; (402e78 <main+0x640>)
  402dc8:	47a8      	blx	r5
  402dca:	4b2b      	ldr	r3, [pc, #172]	; (402e78 <main+0x640>)
  402dcc:	9d03      	ldr	r5, [sp, #12]
  402dce:	eba3 0c09 	sub.w	ip, r3, r9
			
			// Sound out 
			uint32_t idx = 0; 
			for(i = 0; i < IO_BUF_SIZE; i+=2)
			{
				outBuffer[i] = (uint16_t)(int16_t)(mixed_buffer[idx++]);  
  402dd2:	ecf3 7a01 	vldmia	r3!, {s15}
  402dd6:	f8d8 2000 	ldr.w	r2, [r8]
  402dda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
				outBuffer[i+1] = outBuffer[i]; 
  402dde:	eb0a 0003 	add.w	r0, sl, r3
  402de2:	4611      	mov	r1, r2
			for(i = 0; i < IO_BUF_SIZE; i+=2)
  402de4:	42ab      	cmp	r3, r5
				outBuffer[i] = (uint16_t)(int16_t)(mixed_buffer[idx++]);  
  402de6:	edcd 7a03 	vstr	s15, [sp, #12]
  402dea:	f8bd e00c 	ldrh.w	lr, [sp, #12]
  402dee:	f822 e00c 	strh.w	lr, [r2, ip]
				outBuffer[i+1] = outBuffer[i]; 
  402df2:	f832 200c 	ldrh.w	r2, [r2, ip]
  402df6:	b292      	uxth	r2, r2
  402df8:	520a      	strh	r2, [r1, r0]
			for(i = 0; i < IO_BUF_SIZE; i+=2)
  402dfa:	d1e8      	bne.n	402dce <main+0x596>
			}
			
			// check if we're too slow 
			if (dataReceived)
  402dfc:	4b28      	ldr	r3, [pc, #160]	; (402ea0 <main+0x668>)
  402dfe:	781b      	ldrb	r3, [r3, #0]
  402e00:	f003 02ff 	and.w	r2, r3, #255	; 0xff
  402e04:	2b00      	cmp	r3, #0
  402e06:	f47f add4 	bne.w	4029b2 <main+0x17a>
// 				{
// 					// taking too long ... never 
// 				}
			}
			else 
				dataReceived = false; 
  402e0a:	4b25      	ldr	r3, [pc, #148]	; (402ea0 <main+0x668>)
  402e0c:	701a      	strb	r2, [r3, #0]
  402e0e:	e5d0      	b.n	4029b2 <main+0x17a>
  402e10:	4674      	mov	r4, lr
				harmony_shifts[num_of_shifts] = END_OF_SHIFTS; 
  402e12:	aa12      	add	r2, sp, #72	; 0x48
  402e14:	4b14      	ldr	r3, [pc, #80]	; (402e68 <main+0x630>)
  402e16:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  402e1a:	f840 3c30 	str.w	r3, [r0, #-48]
  402e1e:	e75e      	b.n	402cde <main+0x4a6>
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  402e20:	eef8 6a66 	vcvt.f32.u32	s13, s13
  402e24:	ed9f 6a1f 	vldr	s12, [pc, #124]	; 402ea4 <main+0x66c>
  402e28:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 402ea8 <main+0x670>
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  402e2c:	edd1 5a02 	vldr	s11, [r1, #8]
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  402e30:	ee76 6ac6 	vsub.f32	s13, s13, s12
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  402e34:	ee35 6ae9 	vsub.f32	s12, s11, s19
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  402e38:	ee26 7a87 	vmul.f32	s14, s13, s14
  402e3c:	eee7 7a06 	vfma.f32	s15, s14, s12
  402e40:	e641      	b.n	402ac6 <main+0x28e>
		if (d2 <= d1)
  402e42:	4602      	mov	r2, r0
	while (lo < hi)
  402e44:	4293      	cmp	r3, r2
  402e46:	f63f af3c 	bhi.w	402cc2 <main+0x48a>
  402e4a:	4619      	mov	r1, r3
  402e4c:	e60c      	b.n	402a68 <main+0x230>
				while(harmony_list_read[i].freq > 1.0f && i < MAX_NUM_SHIFTS-1)
  402e4e:	2001      	movs	r0, #1
  402e50:	e7df      	b.n	402e12 <main+0x5da>
  402e52:	bf00      	nop
  402e54:	f3af 8000 	nop.w
  402e58:	9999999a 	.word	0x9999999a
  402e5c:	3fd99999 	.word	0x3fd99999
  402e60:	20400044 	.word	0x20400044
  402e64:	00406878 	.word	0x00406878
  402e68:	bf800000 	.word	0xbf800000
  402e6c:	20400034 	.word	0x20400034
  402e70:	2040001c 	.word	0x2040001c
  402e74:	00400da9 	.word	0x00400da9
  402e78:	2043a400 	.word	0x2043a400
  402e7c:	3ec28f5c 	.word	0x3ec28f5c
  402e80:	3df5c28f 	.word	0x3df5c28f
  402e84:	20400048 	.word	0x20400048
  402e88:	20400040 	.word	0x20400040
  402e8c:	46fffe00 	.word	0x46fffe00
  402e90:	00403511 	.word	0x00403511
  402e94:	004035b9 	.word	0x004035b9
  402e98:	004039dd 	.word	0x004039dd
  402e9c:	004031dd 	.word	0x004031dd
  402ea0:	2040201c 	.word	0x2040201c
  402ea4:	427c0000 	.word	0x427c0000
  402ea8:	3c800000 	.word	0x3c800000

00402eac <arm_fill_f32>:
  402eac:	b430      	push	{r4, r5}
  402eae:	0895      	lsrs	r5, r2, #2
  402eb0:	d00b      	beq.n	402eca <arm_fill_f32+0x1e>
  402eb2:	460b      	mov	r3, r1
  402eb4:	462c      	mov	r4, r5
  402eb6:	3c01      	subs	r4, #1
  402eb8:	6018      	str	r0, [r3, #0]
  402eba:	6058      	str	r0, [r3, #4]
  402ebc:	6098      	str	r0, [r3, #8]
  402ebe:	60d8      	str	r0, [r3, #12]
  402ec0:	f103 0310 	add.w	r3, r3, #16
  402ec4:	d1f7      	bne.n	402eb6 <arm_fill_f32+0xa>
  402ec6:	eb01 1105 	add.w	r1, r1, r5, lsl #4
  402eca:	f012 0203 	ands.w	r2, r2, #3
  402ece:	d003      	beq.n	402ed8 <arm_fill_f32+0x2c>
  402ed0:	3a01      	subs	r2, #1
  402ed2:	f841 0b04 	str.w	r0, [r1], #4
  402ed6:	d1fb      	bne.n	402ed0 <arm_fill_f32+0x24>
  402ed8:	bc30      	pop	{r4, r5}
  402eda:	4770      	bx	lr

00402edc <arm_copy_f32>:
  402edc:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  402ee0:	ea5f 0992 	movs.w	r9, r2, lsr #2
  402ee4:	d018      	beq.n	402f18 <arm_copy_f32+0x3c>
  402ee6:	4604      	mov	r4, r0
  402ee8:	460b      	mov	r3, r1
  402eea:	464d      	mov	r5, r9
  402eec:	f8d4 8000 	ldr.w	r8, [r4]
  402ef0:	f8d4 c004 	ldr.w	ip, [r4, #4]
  402ef4:	68a7      	ldr	r7, [r4, #8]
  402ef6:	68e6      	ldr	r6, [r4, #12]
  402ef8:	3d01      	subs	r5, #1
  402efa:	f8c3 8000 	str.w	r8, [r3]
  402efe:	f8c3 c004 	str.w	ip, [r3, #4]
  402f02:	609f      	str	r7, [r3, #8]
  402f04:	60de      	str	r6, [r3, #12]
  402f06:	f104 0410 	add.w	r4, r4, #16
  402f0a:	f103 0310 	add.w	r3, r3, #16
  402f0e:	d1ed      	bne.n	402eec <arm_copy_f32+0x10>
  402f10:	ea4f 1909 	mov.w	r9, r9, lsl #4
  402f14:	4448      	add	r0, r9
  402f16:	4449      	add	r1, r9
  402f18:	f012 0203 	ands.w	r2, r2, #3
  402f1c:	d005      	beq.n	402f2a <arm_copy_f32+0x4e>
  402f1e:	f850 3b04 	ldr.w	r3, [r0], #4
  402f22:	3a01      	subs	r2, #1
  402f24:	f841 3b04 	str.w	r3, [r1], #4
  402f28:	d1f9      	bne.n	402f1e <arm_copy_f32+0x42>
  402f2a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
  402f2e:	4770      	bx	lr

00402f30 <arm_power_f32>:
  402f30:	b430      	push	{r4, r5}
  402f32:	088d      	lsrs	r5, r1, #2
  402f34:	eddf 7a18 	vldr	s15, [pc, #96]	; 402f98 <arm_power_f32+0x68>
  402f38:	d01f      	beq.n	402f7a <arm_power_f32+0x4a>
  402f3a:	4603      	mov	r3, r0
  402f3c:	462c      	mov	r4, r5
  402f3e:	edd3 6a00 	vldr	s13, [r3]
  402f42:	ed93 7a01 	vldr	s14, [r3, #4]
  402f46:	ee66 6aa6 	vmul.f32	s13, s13, s13
  402f4a:	ee27 6a07 	vmul.f32	s12, s14, s14
  402f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
  402f52:	ed93 7a02 	vldr	s14, [r3, #8]
  402f56:	ee76 7a27 	vadd.f32	s15, s12, s15
  402f5a:	ee67 6a07 	vmul.f32	s13, s14, s14
  402f5e:	ed93 7a03 	vldr	s14, [r3, #12]
  402f62:	ee76 6aa7 	vadd.f32	s13, s13, s15
  402f66:	ee27 7a07 	vmul.f32	s14, s14, s14
  402f6a:	3c01      	subs	r4, #1
  402f6c:	f103 0310 	add.w	r3, r3, #16
  402f70:	ee77 7a26 	vadd.f32	s15, s14, s13
  402f74:	d1e3      	bne.n	402f3e <arm_power_f32+0xe>
  402f76:	eb00 1005 	add.w	r0, r0, r5, lsl #4
  402f7a:	f011 0103 	ands.w	r1, r1, #3
  402f7e:	d007      	beq.n	402f90 <arm_power_f32+0x60>
  402f80:	ecb0 7a01 	vldmia	r0!, {s14}
  402f84:	ee27 7a07 	vmul.f32	s14, s14, s14
  402f88:	3901      	subs	r1, #1
  402f8a:	ee77 7a87 	vadd.f32	s15, s15, s14
  402f8e:	d1f7      	bne.n	402f80 <arm_power_f32+0x50>
  402f90:	edc2 7a00 	vstr	s15, [r2]
  402f94:	bc30      	pop	{r4, r5}
  402f96:	4770      	bx	lr
  402f98:	00000000 	.word	0x00000000

00402f9c <arm_min_f32>:
  402f9c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  402fa0:	f101 3cff 	add.w	ip, r1, #4294967295
  402fa4:	ea5f 099c 	movs.w	r9, ip, lsr #2
  402fa8:	f100 0704 	add.w	r7, r0, #4
  402fac:	edd0 7a00 	vldr	s15, [r0]
  402fb0:	d05c      	beq.n	40306c <arm_min_f32+0xd0>
  402fb2:	463c      	mov	r4, r7
  402fb4:	464e      	mov	r6, r9
  402fb6:	2004      	movs	r0, #4
  402fb8:	2500      	movs	r5, #0
  402fba:	edd4 6a00 	vldr	s13, [r4]
  402fbe:	eef4 6ae7 	vcmpe.f32	s13, s15
  402fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402fc6:	ed94 7a01 	vldr	s14, [r4, #4]
  402fca:	bf48      	it	mi
  402fcc:	eef0 7a66 	vmovmi.f32	s15, s13
  402fd0:	eef4 7ac7 	vcmpe.f32	s15, s14
  402fd4:	f1a0 0803 	sub.w	r8, r0, #3
  402fd8:	bf48      	it	mi
  402fda:	4645      	movmi	r5, r8
  402fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402fe0:	edd4 6a02 	vldr	s13, [r4, #8]
  402fe4:	bfc8      	it	gt
  402fe6:	eef0 7a47 	vmovgt.f32	s15, s14
  402fea:	eef4 7ae6 	vcmpe.f32	s15, s13
  402fee:	f1a0 0802 	sub.w	r8, r0, #2
  402ff2:	bfc8      	it	gt
  402ff4:	4645      	movgt	r5, r8
  402ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402ffa:	ed94 7a03 	vldr	s14, [r4, #12]
  402ffe:	bfc8      	it	gt
  403000:	eef0 7a66 	vmovgt.f32	s15, s13
  403004:	eef4 7ac7 	vcmpe.f32	s15, s14
  403008:	f100 38ff 	add.w	r8, r0, #4294967295
  40300c:	bfc8      	it	gt
  40300e:	4645      	movgt	r5, r8
  403010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403014:	bfc8      	it	gt
  403016:	4605      	movgt	r5, r0
  403018:	bfc8      	it	gt
  40301a:	eef0 7a47 	vmovgt.f32	s15, s14
  40301e:	3e01      	subs	r6, #1
  403020:	f104 0410 	add.w	r4, r4, #16
  403024:	f100 0004 	add.w	r0, r0, #4
  403028:	d1c7      	bne.n	402fba <arm_min_f32+0x1e>
  40302a:	eb07 1709 	add.w	r7, r7, r9, lsl #4
  40302e:	f01c 0c03 	ands.w	ip, ip, #3
  403032:	d01d      	beq.n	403070 <arm_min_f32+0xd4>
  403034:	ebcc 0101 	rsb	r1, ip, r1
  403038:	2000      	movs	r0, #0
  40303a:	ecb7 7a01 	vldmia	r7!, {s14}
  40303e:	eeb4 7ae7 	vcmpe.f32	s14, s15
  403042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403046:	bf48      	it	mi
  403048:	eef0 7a47 	vmovmi.f32	s15, s14
  40304c:	eb01 0400 	add.w	r4, r1, r0
  403050:	f100 0001 	add.w	r0, r0, #1
  403054:	bf48      	it	mi
  403056:	4625      	movmi	r5, r4
  403058:	4560      	cmp	r0, ip
  40305a:	eeb0 7a67 	vmov.f32	s14, s15
  40305e:	d1ec      	bne.n	40303a <arm_min_f32+0x9e>
  403060:	ed82 7a00 	vstr	s14, [r2]
  403064:	601d      	str	r5, [r3, #0]
  403066:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
  40306a:	4770      	bx	lr
  40306c:	464d      	mov	r5, r9
  40306e:	e7de      	b.n	40302e <arm_min_f32+0x92>
  403070:	eeb0 7a67 	vmov.f32	s14, s15
  403074:	e7f4      	b.n	403060 <arm_min_f32+0xc4>
  403076:	bf00      	nop

00403078 <arm_max_f32>:
  403078:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  40307c:	f101 3cff 	add.w	ip, r1, #4294967295
  403080:	ea5f 099c 	movs.w	r9, ip, lsr #2
  403084:	f100 0704 	add.w	r7, r0, #4
  403088:	edd0 7a00 	vldr	s15, [r0]
  40308c:	d05c      	beq.n	403148 <arm_max_f32+0xd0>
  40308e:	463c      	mov	r4, r7
  403090:	464e      	mov	r6, r9
  403092:	2004      	movs	r0, #4
  403094:	2500      	movs	r5, #0
  403096:	edd4 6a00 	vldr	s13, [r4]
  40309a:	eef4 6ae7 	vcmpe.f32	s13, s15
  40309e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4030a2:	ed94 7a01 	vldr	s14, [r4, #4]
  4030a6:	bfc8      	it	gt
  4030a8:	eef0 7a66 	vmovgt.f32	s15, s13
  4030ac:	eef4 7ac7 	vcmpe.f32	s15, s14
  4030b0:	f1a0 0803 	sub.w	r8, r0, #3
  4030b4:	bfc8      	it	gt
  4030b6:	4645      	movgt	r5, r8
  4030b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4030bc:	edd4 6a02 	vldr	s13, [r4, #8]
  4030c0:	bf48      	it	mi
  4030c2:	eef0 7a47 	vmovmi.f32	s15, s14
  4030c6:	eef4 7ae6 	vcmpe.f32	s15, s13
  4030ca:	f1a0 0802 	sub.w	r8, r0, #2
  4030ce:	bf48      	it	mi
  4030d0:	4645      	movmi	r5, r8
  4030d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4030d6:	ed94 7a03 	vldr	s14, [r4, #12]
  4030da:	bf48      	it	mi
  4030dc:	eef0 7a66 	vmovmi.f32	s15, s13
  4030e0:	eef4 7ac7 	vcmpe.f32	s15, s14
  4030e4:	f100 38ff 	add.w	r8, r0, #4294967295
  4030e8:	bf48      	it	mi
  4030ea:	4645      	movmi	r5, r8
  4030ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4030f0:	bf48      	it	mi
  4030f2:	4605      	movmi	r5, r0
  4030f4:	bf48      	it	mi
  4030f6:	eef0 7a47 	vmovmi.f32	s15, s14
  4030fa:	3e01      	subs	r6, #1
  4030fc:	f104 0410 	add.w	r4, r4, #16
  403100:	f100 0004 	add.w	r0, r0, #4
  403104:	d1c7      	bne.n	403096 <arm_max_f32+0x1e>
  403106:	eb07 1709 	add.w	r7, r7, r9, lsl #4
  40310a:	f01c 0c03 	ands.w	ip, ip, #3
  40310e:	d01d      	beq.n	40314c <arm_max_f32+0xd4>
  403110:	ebcc 0101 	rsb	r1, ip, r1
  403114:	2000      	movs	r0, #0
  403116:	ecb7 7a01 	vldmia	r7!, {s14}
  40311a:	eeb4 7ae7 	vcmpe.f32	s14, s15
  40311e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403122:	bfc8      	it	gt
  403124:	eef0 7a47 	vmovgt.f32	s15, s14
  403128:	eb01 0400 	add.w	r4, r1, r0
  40312c:	f100 0001 	add.w	r0, r0, #1
  403130:	bfc8      	it	gt
  403132:	4625      	movgt	r5, r4
  403134:	4560      	cmp	r0, ip
  403136:	eeb0 7a67 	vmov.f32	s14, s15
  40313a:	d1ec      	bne.n	403116 <arm_max_f32+0x9e>
  40313c:	ed82 7a00 	vstr	s14, [r2]
  403140:	601d      	str	r5, [r3, #0]
  403142:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
  403146:	4770      	bx	lr
  403148:	464d      	mov	r5, r9
  40314a:	e7de      	b.n	40310a <arm_max_f32+0x92>
  40314c:	eeb0 7a67 	vmov.f32	s14, s15
  403150:	e7f4      	b.n	40313c <arm_max_f32+0xc4>
  403152:	bf00      	nop

00403154 <arm_cos_f32>:
  403154:	eddf 7a1e 	vldr	s15, [pc, #120]	; 4031d0 <arm_cos_f32+0x7c>
  403158:	ee06 0a90 	vmov	s13, r0
  40315c:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
  403160:	ee66 7aa7 	vmul.f32	s15, s13, s15
  403164:	ee77 7a87 	vadd.f32	s15, s15, s14
  403168:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  40316c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403170:	eebd 7ae7 	vcvt.s32.f32	s14, s15
  403174:	d504      	bpl.n	403180 <arm_cos_f32+0x2c>
  403176:	ee17 3a10 	vmov	r3, s14
  40317a:	3b01      	subs	r3, #1
  40317c:	ee07 3a10 	vmov	s14, r3
  403180:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  403184:	eddf 6a13 	vldr	s13, [pc, #76]	; 4031d4 <arm_cos_f32+0x80>
  403188:	ee77 7ac7 	vsub.f32	s15, s15, s14
  40318c:	ee67 7aa6 	vmul.f32	s15, s15, s13
  403190:	eefc 6ae7 	vcvt.u32.f32	s13, s15
  403194:	ee16 3a90 	vmov	r3, s13
  403198:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40319c:	ee07 3a10 	vmov	s14, r3
  4031a0:	eef8 6a47 	vcvt.f32.u32	s13, s14
  4031a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  4031a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
  4031ac:	4a0a      	ldr	r2, [pc, #40]	; (4031d8 <arm_cos_f32+0x84>)
  4031ae:	ee37 7a67 	vsub.f32	s14, s14, s15
  4031b2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
  4031b6:	ed91 6a00 	vldr	s12, [r1]
  4031ba:	edd1 6a01 	vldr	s13, [r1, #4]
  4031be:	ee27 7a06 	vmul.f32	s14, s14, s12
  4031c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
  4031c6:	ee77 7a27 	vadd.f32	s15, s14, s15
  4031ca:	ee17 0a90 	vmov	r0, s15
  4031ce:	4770      	bx	lr
  4031d0:	3e22f983 	.word	0x3e22f983
  4031d4:	44000000 	.word	0x44000000
  4031d8:	00406a78 	.word	0x00406a78

004031dc <arm_scale_f32>:
  4031dc:	b470      	push	{r4, r5, r6}
  4031de:	089e      	lsrs	r6, r3, #2
  4031e0:	ee07 1a90 	vmov	s15, r1
  4031e4:	d023      	beq.n	40322e <arm_scale_f32+0x52>
  4031e6:	4635      	mov	r5, r6
  4031e8:	4614      	mov	r4, r2
  4031ea:	4601      	mov	r1, r0
  4031ec:	edd1 5a00 	vldr	s11, [r1]
  4031f0:	ed91 6a01 	vldr	s12, [r1, #4]
  4031f4:	edd1 6a02 	vldr	s13, [r1, #8]
  4031f8:	ed91 7a03 	vldr	s14, [r1, #12]
  4031fc:	ee65 5aa7 	vmul.f32	s11, s11, s15
  403200:	ee26 6a27 	vmul.f32	s12, s12, s15
  403204:	ee66 6aa7 	vmul.f32	s13, s13, s15
  403208:	ee27 7a27 	vmul.f32	s14, s14, s15
  40320c:	3d01      	subs	r5, #1
  40320e:	edc4 5a00 	vstr	s11, [r4]
  403212:	ed84 6a01 	vstr	s12, [r4, #4]
  403216:	edc4 6a02 	vstr	s13, [r4, #8]
  40321a:	ed84 7a03 	vstr	s14, [r4, #12]
  40321e:	f101 0110 	add.w	r1, r1, #16
  403222:	f104 0410 	add.w	r4, r4, #16
  403226:	d1e1      	bne.n	4031ec <arm_scale_f32+0x10>
  403228:	0136      	lsls	r6, r6, #4
  40322a:	4430      	add	r0, r6
  40322c:	4432      	add	r2, r6
  40322e:	f013 0303 	ands.w	r3, r3, #3
  403232:	d007      	beq.n	403244 <arm_scale_f32+0x68>
  403234:	ecb0 7a01 	vldmia	r0!, {s14}
  403238:	ee27 7a27 	vmul.f32	s14, s14, s15
  40323c:	3b01      	subs	r3, #1
  40323e:	eca2 7a01 	vstmia	r2!, {s14}
  403242:	d1f7      	bne.n	403234 <arm_scale_f32+0x58>
  403244:	bc70      	pop	{r4, r5, r6}
  403246:	4770      	bx	lr

00403248 <__aeabi_drsub>:
  403248:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40324c:	e002      	b.n	403254 <__adddf3>
  40324e:	bf00      	nop

00403250 <__aeabi_dsub>:
  403250:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00403254 <__adddf3>:
  403254:	b530      	push	{r4, r5, lr}
  403256:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40325a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40325e:	ea94 0f05 	teq	r4, r5
  403262:	bf08      	it	eq
  403264:	ea90 0f02 	teqeq	r0, r2
  403268:	bf1f      	itttt	ne
  40326a:	ea54 0c00 	orrsne.w	ip, r4, r0
  40326e:	ea55 0c02 	orrsne.w	ip, r5, r2
  403272:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  403276:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40327a:	f000 80e2 	beq.w	403442 <__adddf3+0x1ee>
  40327e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  403282:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  403286:	bfb8      	it	lt
  403288:	426d      	neglt	r5, r5
  40328a:	dd0c      	ble.n	4032a6 <__adddf3+0x52>
  40328c:	442c      	add	r4, r5
  40328e:	ea80 0202 	eor.w	r2, r0, r2
  403292:	ea81 0303 	eor.w	r3, r1, r3
  403296:	ea82 0000 	eor.w	r0, r2, r0
  40329a:	ea83 0101 	eor.w	r1, r3, r1
  40329e:	ea80 0202 	eor.w	r2, r0, r2
  4032a2:	ea81 0303 	eor.w	r3, r1, r3
  4032a6:	2d36      	cmp	r5, #54	; 0x36
  4032a8:	bf88      	it	hi
  4032aa:	bd30      	pophi	{r4, r5, pc}
  4032ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4032b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4032b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4032b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4032bc:	d002      	beq.n	4032c4 <__adddf3+0x70>
  4032be:	4240      	negs	r0, r0
  4032c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4032c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4032c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4032cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4032d0:	d002      	beq.n	4032d8 <__adddf3+0x84>
  4032d2:	4252      	negs	r2, r2
  4032d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4032d8:	ea94 0f05 	teq	r4, r5
  4032dc:	f000 80a7 	beq.w	40342e <__adddf3+0x1da>
  4032e0:	f1a4 0401 	sub.w	r4, r4, #1
  4032e4:	f1d5 0e20 	rsbs	lr, r5, #32
  4032e8:	db0d      	blt.n	403306 <__adddf3+0xb2>
  4032ea:	fa02 fc0e 	lsl.w	ip, r2, lr
  4032ee:	fa22 f205 	lsr.w	r2, r2, r5
  4032f2:	1880      	adds	r0, r0, r2
  4032f4:	f141 0100 	adc.w	r1, r1, #0
  4032f8:	fa03 f20e 	lsl.w	r2, r3, lr
  4032fc:	1880      	adds	r0, r0, r2
  4032fe:	fa43 f305 	asr.w	r3, r3, r5
  403302:	4159      	adcs	r1, r3
  403304:	e00e      	b.n	403324 <__adddf3+0xd0>
  403306:	f1a5 0520 	sub.w	r5, r5, #32
  40330a:	f10e 0e20 	add.w	lr, lr, #32
  40330e:	2a01      	cmp	r2, #1
  403310:	fa03 fc0e 	lsl.w	ip, r3, lr
  403314:	bf28      	it	cs
  403316:	f04c 0c02 	orrcs.w	ip, ip, #2
  40331a:	fa43 f305 	asr.w	r3, r3, r5
  40331e:	18c0      	adds	r0, r0, r3
  403320:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  403324:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403328:	d507      	bpl.n	40333a <__adddf3+0xe6>
  40332a:	f04f 0e00 	mov.w	lr, #0
  40332e:	f1dc 0c00 	rsbs	ip, ip, #0
  403332:	eb7e 0000 	sbcs.w	r0, lr, r0
  403336:	eb6e 0101 	sbc.w	r1, lr, r1
  40333a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40333e:	d31b      	bcc.n	403378 <__adddf3+0x124>
  403340:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  403344:	d30c      	bcc.n	403360 <__adddf3+0x10c>
  403346:	0849      	lsrs	r1, r1, #1
  403348:	ea5f 0030 	movs.w	r0, r0, rrx
  40334c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  403350:	f104 0401 	add.w	r4, r4, #1
  403354:	ea4f 5244 	mov.w	r2, r4, lsl #21
  403358:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40335c:	f080 809a 	bcs.w	403494 <__adddf3+0x240>
  403360:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  403364:	bf08      	it	eq
  403366:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40336a:	f150 0000 	adcs.w	r0, r0, #0
  40336e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403372:	ea41 0105 	orr.w	r1, r1, r5
  403376:	bd30      	pop	{r4, r5, pc}
  403378:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40337c:	4140      	adcs	r0, r0
  40337e:	eb41 0101 	adc.w	r1, r1, r1
  403382:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403386:	f1a4 0401 	sub.w	r4, r4, #1
  40338a:	d1e9      	bne.n	403360 <__adddf3+0x10c>
  40338c:	f091 0f00 	teq	r1, #0
  403390:	bf04      	itt	eq
  403392:	4601      	moveq	r1, r0
  403394:	2000      	moveq	r0, #0
  403396:	fab1 f381 	clz	r3, r1
  40339a:	bf08      	it	eq
  40339c:	3320      	addeq	r3, #32
  40339e:	f1a3 030b 	sub.w	r3, r3, #11
  4033a2:	f1b3 0220 	subs.w	r2, r3, #32
  4033a6:	da0c      	bge.n	4033c2 <__adddf3+0x16e>
  4033a8:	320c      	adds	r2, #12
  4033aa:	dd08      	ble.n	4033be <__adddf3+0x16a>
  4033ac:	f102 0c14 	add.w	ip, r2, #20
  4033b0:	f1c2 020c 	rsb	r2, r2, #12
  4033b4:	fa01 f00c 	lsl.w	r0, r1, ip
  4033b8:	fa21 f102 	lsr.w	r1, r1, r2
  4033bc:	e00c      	b.n	4033d8 <__adddf3+0x184>
  4033be:	f102 0214 	add.w	r2, r2, #20
  4033c2:	bfd8      	it	le
  4033c4:	f1c2 0c20 	rsble	ip, r2, #32
  4033c8:	fa01 f102 	lsl.w	r1, r1, r2
  4033cc:	fa20 fc0c 	lsr.w	ip, r0, ip
  4033d0:	bfdc      	itt	le
  4033d2:	ea41 010c 	orrle.w	r1, r1, ip
  4033d6:	4090      	lslle	r0, r2
  4033d8:	1ae4      	subs	r4, r4, r3
  4033da:	bfa2      	ittt	ge
  4033dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4033e0:	4329      	orrge	r1, r5
  4033e2:	bd30      	popge	{r4, r5, pc}
  4033e4:	ea6f 0404 	mvn.w	r4, r4
  4033e8:	3c1f      	subs	r4, #31
  4033ea:	da1c      	bge.n	403426 <__adddf3+0x1d2>
  4033ec:	340c      	adds	r4, #12
  4033ee:	dc0e      	bgt.n	40340e <__adddf3+0x1ba>
  4033f0:	f104 0414 	add.w	r4, r4, #20
  4033f4:	f1c4 0220 	rsb	r2, r4, #32
  4033f8:	fa20 f004 	lsr.w	r0, r0, r4
  4033fc:	fa01 f302 	lsl.w	r3, r1, r2
  403400:	ea40 0003 	orr.w	r0, r0, r3
  403404:	fa21 f304 	lsr.w	r3, r1, r4
  403408:	ea45 0103 	orr.w	r1, r5, r3
  40340c:	bd30      	pop	{r4, r5, pc}
  40340e:	f1c4 040c 	rsb	r4, r4, #12
  403412:	f1c4 0220 	rsb	r2, r4, #32
  403416:	fa20 f002 	lsr.w	r0, r0, r2
  40341a:	fa01 f304 	lsl.w	r3, r1, r4
  40341e:	ea40 0003 	orr.w	r0, r0, r3
  403422:	4629      	mov	r1, r5
  403424:	bd30      	pop	{r4, r5, pc}
  403426:	fa21 f004 	lsr.w	r0, r1, r4
  40342a:	4629      	mov	r1, r5
  40342c:	bd30      	pop	{r4, r5, pc}
  40342e:	f094 0f00 	teq	r4, #0
  403432:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  403436:	bf06      	itte	eq
  403438:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40343c:	3401      	addeq	r4, #1
  40343e:	3d01      	subne	r5, #1
  403440:	e74e      	b.n	4032e0 <__adddf3+0x8c>
  403442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403446:	bf18      	it	ne
  403448:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40344c:	d029      	beq.n	4034a2 <__adddf3+0x24e>
  40344e:	ea94 0f05 	teq	r4, r5
  403452:	bf08      	it	eq
  403454:	ea90 0f02 	teqeq	r0, r2
  403458:	d005      	beq.n	403466 <__adddf3+0x212>
  40345a:	ea54 0c00 	orrs.w	ip, r4, r0
  40345e:	bf04      	itt	eq
  403460:	4619      	moveq	r1, r3
  403462:	4610      	moveq	r0, r2
  403464:	bd30      	pop	{r4, r5, pc}
  403466:	ea91 0f03 	teq	r1, r3
  40346a:	bf1e      	ittt	ne
  40346c:	2100      	movne	r1, #0
  40346e:	2000      	movne	r0, #0
  403470:	bd30      	popne	{r4, r5, pc}
  403472:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  403476:	d105      	bne.n	403484 <__adddf3+0x230>
  403478:	0040      	lsls	r0, r0, #1
  40347a:	4149      	adcs	r1, r1
  40347c:	bf28      	it	cs
  40347e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  403482:	bd30      	pop	{r4, r5, pc}
  403484:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  403488:	bf3c      	itt	cc
  40348a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40348e:	bd30      	popcc	{r4, r5, pc}
  403490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403494:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  403498:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40349c:	f04f 0000 	mov.w	r0, #0
  4034a0:	bd30      	pop	{r4, r5, pc}
  4034a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4034a6:	bf1a      	itte	ne
  4034a8:	4619      	movne	r1, r3
  4034aa:	4610      	movne	r0, r2
  4034ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4034b0:	bf1c      	itt	ne
  4034b2:	460b      	movne	r3, r1
  4034b4:	4602      	movne	r2, r0
  4034b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4034ba:	bf06      	itte	eq
  4034bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4034c0:	ea91 0f03 	teqeq	r1, r3
  4034c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4034c8:	bd30      	pop	{r4, r5, pc}
  4034ca:	bf00      	nop

004034cc <__aeabi_ui2d>:
  4034cc:	f090 0f00 	teq	r0, #0
  4034d0:	bf04      	itt	eq
  4034d2:	2100      	moveq	r1, #0
  4034d4:	4770      	bxeq	lr
  4034d6:	b530      	push	{r4, r5, lr}
  4034d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4034dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4034e0:	f04f 0500 	mov.w	r5, #0
  4034e4:	f04f 0100 	mov.w	r1, #0
  4034e8:	e750      	b.n	40338c <__adddf3+0x138>
  4034ea:	bf00      	nop

004034ec <__aeabi_i2d>:
  4034ec:	f090 0f00 	teq	r0, #0
  4034f0:	bf04      	itt	eq
  4034f2:	2100      	moveq	r1, #0
  4034f4:	4770      	bxeq	lr
  4034f6:	b530      	push	{r4, r5, lr}
  4034f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4034fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403500:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  403504:	bf48      	it	mi
  403506:	4240      	negmi	r0, r0
  403508:	f04f 0100 	mov.w	r1, #0
  40350c:	e73e      	b.n	40338c <__adddf3+0x138>
  40350e:	bf00      	nop

00403510 <__aeabi_f2d>:
  403510:	0042      	lsls	r2, r0, #1
  403512:	ea4f 01e2 	mov.w	r1, r2, asr #3
  403516:	ea4f 0131 	mov.w	r1, r1, rrx
  40351a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40351e:	bf1f      	itttt	ne
  403520:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  403524:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403528:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40352c:	4770      	bxne	lr
  40352e:	f092 0f00 	teq	r2, #0
  403532:	bf14      	ite	ne
  403534:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403538:	4770      	bxeq	lr
  40353a:	b530      	push	{r4, r5, lr}
  40353c:	f44f 7460 	mov.w	r4, #896	; 0x380
  403540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403548:	e720      	b.n	40338c <__adddf3+0x138>
  40354a:	bf00      	nop

0040354c <__aeabi_ul2d>:
  40354c:	ea50 0201 	orrs.w	r2, r0, r1
  403550:	bf08      	it	eq
  403552:	4770      	bxeq	lr
  403554:	b530      	push	{r4, r5, lr}
  403556:	f04f 0500 	mov.w	r5, #0
  40355a:	e00a      	b.n	403572 <__aeabi_l2d+0x16>

0040355c <__aeabi_l2d>:
  40355c:	ea50 0201 	orrs.w	r2, r0, r1
  403560:	bf08      	it	eq
  403562:	4770      	bxeq	lr
  403564:	b530      	push	{r4, r5, lr}
  403566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40356a:	d502      	bpl.n	403572 <__aeabi_l2d+0x16>
  40356c:	4240      	negs	r0, r0
  40356e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403572:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403576:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40357a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40357e:	f43f aedc 	beq.w	40333a <__adddf3+0xe6>
  403582:	f04f 0203 	mov.w	r2, #3
  403586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40358a:	bf18      	it	ne
  40358c:	3203      	addne	r2, #3
  40358e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  403592:	bf18      	it	ne
  403594:	3203      	addne	r2, #3
  403596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40359a:	f1c2 0320 	rsb	r3, r2, #32
  40359e:	fa00 fc03 	lsl.w	ip, r0, r3
  4035a2:	fa20 f002 	lsr.w	r0, r0, r2
  4035a6:	fa01 fe03 	lsl.w	lr, r1, r3
  4035aa:	ea40 000e 	orr.w	r0, r0, lr
  4035ae:	fa21 f102 	lsr.w	r1, r1, r2
  4035b2:	4414      	add	r4, r2
  4035b4:	e6c1      	b.n	40333a <__adddf3+0xe6>
  4035b6:	bf00      	nop

004035b8 <__aeabi_dmul>:
  4035b8:	b570      	push	{r4, r5, r6, lr}
  4035ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4035be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4035c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4035c6:	bf1d      	ittte	ne
  4035c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4035cc:	ea94 0f0c 	teqne	r4, ip
  4035d0:	ea95 0f0c 	teqne	r5, ip
  4035d4:	f000 f8de 	bleq	403794 <__aeabi_dmul+0x1dc>
  4035d8:	442c      	add	r4, r5
  4035da:	ea81 0603 	eor.w	r6, r1, r3
  4035de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4035e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4035e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4035ea:	bf18      	it	ne
  4035ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4035f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4035f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4035f8:	d038      	beq.n	40366c <__aeabi_dmul+0xb4>
  4035fa:	fba0 ce02 	umull	ip, lr, r0, r2
  4035fe:	f04f 0500 	mov.w	r5, #0
  403602:	fbe1 e502 	umlal	lr, r5, r1, r2
  403606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40360a:	fbe0 e503 	umlal	lr, r5, r0, r3
  40360e:	f04f 0600 	mov.w	r6, #0
  403612:	fbe1 5603 	umlal	r5, r6, r1, r3
  403616:	f09c 0f00 	teq	ip, #0
  40361a:	bf18      	it	ne
  40361c:	f04e 0e01 	orrne.w	lr, lr, #1
  403620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  403624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  403628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40362c:	d204      	bcs.n	403638 <__aeabi_dmul+0x80>
  40362e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  403632:	416d      	adcs	r5, r5
  403634:	eb46 0606 	adc.w	r6, r6, r6
  403638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40363c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  403640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  403644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  403648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40364c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403650:	bf88      	it	hi
  403652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403656:	d81e      	bhi.n	403696 <__aeabi_dmul+0xde>
  403658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40365c:	bf08      	it	eq
  40365e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  403662:	f150 0000 	adcs.w	r0, r0, #0
  403666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40366a:	bd70      	pop	{r4, r5, r6, pc}
  40366c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  403670:	ea46 0101 	orr.w	r1, r6, r1
  403674:	ea40 0002 	orr.w	r0, r0, r2
  403678:	ea81 0103 	eor.w	r1, r1, r3
  40367c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  403680:	bfc2      	ittt	gt
  403682:	ebd4 050c 	rsbsgt	r5, r4, ip
  403686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40368a:	bd70      	popgt	{r4, r5, r6, pc}
  40368c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403690:	f04f 0e00 	mov.w	lr, #0
  403694:	3c01      	subs	r4, #1
  403696:	f300 80ab 	bgt.w	4037f0 <__aeabi_dmul+0x238>
  40369a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40369e:	bfde      	ittt	le
  4036a0:	2000      	movle	r0, #0
  4036a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4036a6:	bd70      	pople	{r4, r5, r6, pc}
  4036a8:	f1c4 0400 	rsb	r4, r4, #0
  4036ac:	3c20      	subs	r4, #32
  4036ae:	da35      	bge.n	40371c <__aeabi_dmul+0x164>
  4036b0:	340c      	adds	r4, #12
  4036b2:	dc1b      	bgt.n	4036ec <__aeabi_dmul+0x134>
  4036b4:	f104 0414 	add.w	r4, r4, #20
  4036b8:	f1c4 0520 	rsb	r5, r4, #32
  4036bc:	fa00 f305 	lsl.w	r3, r0, r5
  4036c0:	fa20 f004 	lsr.w	r0, r0, r4
  4036c4:	fa01 f205 	lsl.w	r2, r1, r5
  4036c8:	ea40 0002 	orr.w	r0, r0, r2
  4036cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4036d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4036d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4036d8:	fa21 f604 	lsr.w	r6, r1, r4
  4036dc:	eb42 0106 	adc.w	r1, r2, r6
  4036e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4036e4:	bf08      	it	eq
  4036e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4036ea:	bd70      	pop	{r4, r5, r6, pc}
  4036ec:	f1c4 040c 	rsb	r4, r4, #12
  4036f0:	f1c4 0520 	rsb	r5, r4, #32
  4036f4:	fa00 f304 	lsl.w	r3, r0, r4
  4036f8:	fa20 f005 	lsr.w	r0, r0, r5
  4036fc:	fa01 f204 	lsl.w	r2, r1, r4
  403700:	ea40 0002 	orr.w	r0, r0, r2
  403704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40370c:	f141 0100 	adc.w	r1, r1, #0
  403710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403714:	bf08      	it	eq
  403716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40371a:	bd70      	pop	{r4, r5, r6, pc}
  40371c:	f1c4 0520 	rsb	r5, r4, #32
  403720:	fa00 f205 	lsl.w	r2, r0, r5
  403724:	ea4e 0e02 	orr.w	lr, lr, r2
  403728:	fa20 f304 	lsr.w	r3, r0, r4
  40372c:	fa01 f205 	lsl.w	r2, r1, r5
  403730:	ea43 0302 	orr.w	r3, r3, r2
  403734:	fa21 f004 	lsr.w	r0, r1, r4
  403738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40373c:	fa21 f204 	lsr.w	r2, r1, r4
  403740:	ea20 0002 	bic.w	r0, r0, r2
  403744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  403748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40374c:	bf08      	it	eq
  40374e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403752:	bd70      	pop	{r4, r5, r6, pc}
  403754:	f094 0f00 	teq	r4, #0
  403758:	d10f      	bne.n	40377a <__aeabi_dmul+0x1c2>
  40375a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40375e:	0040      	lsls	r0, r0, #1
  403760:	eb41 0101 	adc.w	r1, r1, r1
  403764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403768:	bf08      	it	eq
  40376a:	3c01      	subeq	r4, #1
  40376c:	d0f7      	beq.n	40375e <__aeabi_dmul+0x1a6>
  40376e:	ea41 0106 	orr.w	r1, r1, r6
  403772:	f095 0f00 	teq	r5, #0
  403776:	bf18      	it	ne
  403778:	4770      	bxne	lr
  40377a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40377e:	0052      	lsls	r2, r2, #1
  403780:	eb43 0303 	adc.w	r3, r3, r3
  403784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  403788:	bf08      	it	eq
  40378a:	3d01      	subeq	r5, #1
  40378c:	d0f7      	beq.n	40377e <__aeabi_dmul+0x1c6>
  40378e:	ea43 0306 	orr.w	r3, r3, r6
  403792:	4770      	bx	lr
  403794:	ea94 0f0c 	teq	r4, ip
  403798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40379c:	bf18      	it	ne
  40379e:	ea95 0f0c 	teqne	r5, ip
  4037a2:	d00c      	beq.n	4037be <__aeabi_dmul+0x206>
  4037a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4037a8:	bf18      	it	ne
  4037aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4037ae:	d1d1      	bne.n	403754 <__aeabi_dmul+0x19c>
  4037b0:	ea81 0103 	eor.w	r1, r1, r3
  4037b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4037b8:	f04f 0000 	mov.w	r0, #0
  4037bc:	bd70      	pop	{r4, r5, r6, pc}
  4037be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4037c2:	bf06      	itte	eq
  4037c4:	4610      	moveq	r0, r2
  4037c6:	4619      	moveq	r1, r3
  4037c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4037cc:	d019      	beq.n	403802 <__aeabi_dmul+0x24a>
  4037ce:	ea94 0f0c 	teq	r4, ip
  4037d2:	d102      	bne.n	4037da <__aeabi_dmul+0x222>
  4037d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4037d8:	d113      	bne.n	403802 <__aeabi_dmul+0x24a>
  4037da:	ea95 0f0c 	teq	r5, ip
  4037de:	d105      	bne.n	4037ec <__aeabi_dmul+0x234>
  4037e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4037e4:	bf1c      	itt	ne
  4037e6:	4610      	movne	r0, r2
  4037e8:	4619      	movne	r1, r3
  4037ea:	d10a      	bne.n	403802 <__aeabi_dmul+0x24a>
  4037ec:	ea81 0103 	eor.w	r1, r1, r3
  4037f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4037f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4037f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4037fc:	f04f 0000 	mov.w	r0, #0
  403800:	bd70      	pop	{r4, r5, r6, pc}
  403802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40380a:	bd70      	pop	{r4, r5, r6, pc}

0040380c <__aeabi_ddiv>:
  40380c:	b570      	push	{r4, r5, r6, lr}
  40380e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  403816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40381a:	bf1d      	ittte	ne
  40381c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403820:	ea94 0f0c 	teqne	r4, ip
  403824:	ea95 0f0c 	teqne	r5, ip
  403828:	f000 f8a7 	bleq	40397a <__aeabi_ddiv+0x16e>
  40382c:	eba4 0405 	sub.w	r4, r4, r5
  403830:	ea81 0e03 	eor.w	lr, r1, r3
  403834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403838:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40383c:	f000 8088 	beq.w	403950 <__aeabi_ddiv+0x144>
  403840:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  403848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40384c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  403850:	ea4f 2202 	mov.w	r2, r2, lsl #8
  403854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  403858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40385c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  403860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  403864:	429d      	cmp	r5, r3
  403866:	bf08      	it	eq
  403868:	4296      	cmpeq	r6, r2
  40386a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40386e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  403872:	d202      	bcs.n	40387a <__aeabi_ddiv+0x6e>
  403874:	085b      	lsrs	r3, r3, #1
  403876:	ea4f 0232 	mov.w	r2, r2, rrx
  40387a:	1ab6      	subs	r6, r6, r2
  40387c:	eb65 0503 	sbc.w	r5, r5, r3
  403880:	085b      	lsrs	r3, r3, #1
  403882:	ea4f 0232 	mov.w	r2, r2, rrx
  403886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40388a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40388e:	ebb6 0e02 	subs.w	lr, r6, r2
  403892:	eb75 0e03 	sbcs.w	lr, r5, r3
  403896:	bf22      	ittt	cs
  403898:	1ab6      	subcs	r6, r6, r2
  40389a:	4675      	movcs	r5, lr
  40389c:	ea40 000c 	orrcs.w	r0, r0, ip
  4038a0:	085b      	lsrs	r3, r3, #1
  4038a2:	ea4f 0232 	mov.w	r2, r2, rrx
  4038a6:	ebb6 0e02 	subs.w	lr, r6, r2
  4038aa:	eb75 0e03 	sbcs.w	lr, r5, r3
  4038ae:	bf22      	ittt	cs
  4038b0:	1ab6      	subcs	r6, r6, r2
  4038b2:	4675      	movcs	r5, lr
  4038b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4038b8:	085b      	lsrs	r3, r3, #1
  4038ba:	ea4f 0232 	mov.w	r2, r2, rrx
  4038be:	ebb6 0e02 	subs.w	lr, r6, r2
  4038c2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4038c6:	bf22      	ittt	cs
  4038c8:	1ab6      	subcs	r6, r6, r2
  4038ca:	4675      	movcs	r5, lr
  4038cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4038d0:	085b      	lsrs	r3, r3, #1
  4038d2:	ea4f 0232 	mov.w	r2, r2, rrx
  4038d6:	ebb6 0e02 	subs.w	lr, r6, r2
  4038da:	eb75 0e03 	sbcs.w	lr, r5, r3
  4038de:	bf22      	ittt	cs
  4038e0:	1ab6      	subcs	r6, r6, r2
  4038e2:	4675      	movcs	r5, lr
  4038e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4038e8:	ea55 0e06 	orrs.w	lr, r5, r6
  4038ec:	d018      	beq.n	403920 <__aeabi_ddiv+0x114>
  4038ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4038f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4038f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4038fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4038fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  403902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  403906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40390a:	d1c0      	bne.n	40388e <__aeabi_ddiv+0x82>
  40390c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403910:	d10b      	bne.n	40392a <__aeabi_ddiv+0x11e>
  403912:	ea41 0100 	orr.w	r1, r1, r0
  403916:	f04f 0000 	mov.w	r0, #0
  40391a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40391e:	e7b6      	b.n	40388e <__aeabi_ddiv+0x82>
  403920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403924:	bf04      	itt	eq
  403926:	4301      	orreq	r1, r0
  403928:	2000      	moveq	r0, #0
  40392a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40392e:	bf88      	it	hi
  403930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403934:	f63f aeaf 	bhi.w	403696 <__aeabi_dmul+0xde>
  403938:	ebb5 0c03 	subs.w	ip, r5, r3
  40393c:	bf04      	itt	eq
  40393e:	ebb6 0c02 	subseq.w	ip, r6, r2
  403942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403946:	f150 0000 	adcs.w	r0, r0, #0
  40394a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40394e:	bd70      	pop	{r4, r5, r6, pc}
  403950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  403954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  403958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40395c:	bfc2      	ittt	gt
  40395e:	ebd4 050c 	rsbsgt	r5, r4, ip
  403962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403966:	bd70      	popgt	{r4, r5, r6, pc}
  403968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40396c:	f04f 0e00 	mov.w	lr, #0
  403970:	3c01      	subs	r4, #1
  403972:	e690      	b.n	403696 <__aeabi_dmul+0xde>
  403974:	ea45 0e06 	orr.w	lr, r5, r6
  403978:	e68d      	b.n	403696 <__aeabi_dmul+0xde>
  40397a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40397e:	ea94 0f0c 	teq	r4, ip
  403982:	bf08      	it	eq
  403984:	ea95 0f0c 	teqeq	r5, ip
  403988:	f43f af3b 	beq.w	403802 <__aeabi_dmul+0x24a>
  40398c:	ea94 0f0c 	teq	r4, ip
  403990:	d10a      	bne.n	4039a8 <__aeabi_ddiv+0x19c>
  403992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  403996:	f47f af34 	bne.w	403802 <__aeabi_dmul+0x24a>
  40399a:	ea95 0f0c 	teq	r5, ip
  40399e:	f47f af25 	bne.w	4037ec <__aeabi_dmul+0x234>
  4039a2:	4610      	mov	r0, r2
  4039a4:	4619      	mov	r1, r3
  4039a6:	e72c      	b.n	403802 <__aeabi_dmul+0x24a>
  4039a8:	ea95 0f0c 	teq	r5, ip
  4039ac:	d106      	bne.n	4039bc <__aeabi_ddiv+0x1b0>
  4039ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4039b2:	f43f aefd 	beq.w	4037b0 <__aeabi_dmul+0x1f8>
  4039b6:	4610      	mov	r0, r2
  4039b8:	4619      	mov	r1, r3
  4039ba:	e722      	b.n	403802 <__aeabi_dmul+0x24a>
  4039bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4039c0:	bf18      	it	ne
  4039c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4039c6:	f47f aec5 	bne.w	403754 <__aeabi_dmul+0x19c>
  4039ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4039ce:	f47f af0d 	bne.w	4037ec <__aeabi_dmul+0x234>
  4039d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4039d6:	f47f aeeb 	bne.w	4037b0 <__aeabi_dmul+0x1f8>
  4039da:	e712      	b.n	403802 <__aeabi_dmul+0x24a>

004039dc <__aeabi_d2f>:
  4039dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4039e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  4039e4:	bf24      	itt	cs
  4039e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  4039ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  4039ee:	d90d      	bls.n	403a0c <__aeabi_d2f+0x30>
  4039f0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4039f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  4039f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  4039fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  403a00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  403a04:	bf08      	it	eq
  403a06:	f020 0001 	biceq.w	r0, r0, #1
  403a0a:	4770      	bx	lr
  403a0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  403a10:	d121      	bne.n	403a56 <__aeabi_d2f+0x7a>
  403a12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  403a16:	bfbc      	itt	lt
  403a18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  403a1c:	4770      	bxlt	lr
  403a1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403a22:	ea4f 5252 	mov.w	r2, r2, lsr #21
  403a26:	f1c2 0218 	rsb	r2, r2, #24
  403a2a:	f1c2 0c20 	rsb	ip, r2, #32
  403a2e:	fa10 f30c 	lsls.w	r3, r0, ip
  403a32:	fa20 f002 	lsr.w	r0, r0, r2
  403a36:	bf18      	it	ne
  403a38:	f040 0001 	orrne.w	r0, r0, #1
  403a3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  403a40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  403a44:	fa03 fc0c 	lsl.w	ip, r3, ip
  403a48:	ea40 000c 	orr.w	r0, r0, ip
  403a4c:	fa23 f302 	lsr.w	r3, r3, r2
  403a50:	ea4f 0343 	mov.w	r3, r3, lsl #1
  403a54:	e7cc      	b.n	4039f0 <__aeabi_d2f+0x14>
  403a56:	ea7f 5362 	mvns.w	r3, r2, asr #21
  403a5a:	d107      	bne.n	403a6c <__aeabi_d2f+0x90>
  403a5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  403a60:	bf1e      	ittt	ne
  403a62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  403a66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  403a6a:	4770      	bxne	lr
  403a6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  403a70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  403a74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  403a78:	4770      	bx	lr
  403a7a:	bf00      	nop

00403a7c <__libc_init_array>:
  403a7c:	b570      	push	{r4, r5, r6, lr}
  403a7e:	4e0f      	ldr	r6, [pc, #60]	; (403abc <__libc_init_array+0x40>)
  403a80:	4d0f      	ldr	r5, [pc, #60]	; (403ac0 <__libc_init_array+0x44>)
  403a82:	1b76      	subs	r6, r6, r5
  403a84:	10b6      	asrs	r6, r6, #2
  403a86:	bf18      	it	ne
  403a88:	2400      	movne	r4, #0
  403a8a:	d005      	beq.n	403a98 <__libc_init_array+0x1c>
  403a8c:	3401      	adds	r4, #1
  403a8e:	f855 3b04 	ldr.w	r3, [r5], #4
  403a92:	4798      	blx	r3
  403a94:	42a6      	cmp	r6, r4
  403a96:	d1f9      	bne.n	403a8c <__libc_init_array+0x10>
  403a98:	4e0a      	ldr	r6, [pc, #40]	; (403ac4 <__libc_init_array+0x48>)
  403a9a:	4d0b      	ldr	r5, [pc, #44]	; (403ac8 <__libc_init_array+0x4c>)
  403a9c:	1b76      	subs	r6, r6, r5
  403a9e:	f003 fca1 	bl	4073e4 <_init>
  403aa2:	10b6      	asrs	r6, r6, #2
  403aa4:	bf18      	it	ne
  403aa6:	2400      	movne	r4, #0
  403aa8:	d006      	beq.n	403ab8 <__libc_init_array+0x3c>
  403aaa:	3401      	adds	r4, #1
  403aac:	f855 3b04 	ldr.w	r3, [r5], #4
  403ab0:	4798      	blx	r3
  403ab2:	42a6      	cmp	r6, r4
  403ab4:	d1f9      	bne.n	403aaa <__libc_init_array+0x2e>
  403ab6:	bd70      	pop	{r4, r5, r6, pc}
  403ab8:	bd70      	pop	{r4, r5, r6, pc}
  403aba:	bf00      	nop
  403abc:	004073f0 	.word	0x004073f0
  403ac0:	004073f0 	.word	0x004073f0
  403ac4:	004073f8 	.word	0x004073f8
  403ac8:	004073f0 	.word	0x004073f0

00403acc <iprintf>:
  403acc:	b40f      	push	{r0, r1, r2, r3}
  403ace:	b500      	push	{lr}
  403ad0:	4907      	ldr	r1, [pc, #28]	; (403af0 <iprintf+0x24>)
  403ad2:	b083      	sub	sp, #12
  403ad4:	ab04      	add	r3, sp, #16
  403ad6:	6808      	ldr	r0, [r1, #0]
  403ad8:	f853 2b04 	ldr.w	r2, [r3], #4
  403adc:	6881      	ldr	r1, [r0, #8]
  403ade:	9301      	str	r3, [sp, #4]
  403ae0:	f000 fc06 	bl	4042f0 <_vfiprintf_r>
  403ae4:	b003      	add	sp, #12
  403ae6:	f85d eb04 	ldr.w	lr, [sp], #4
  403aea:	b004      	add	sp, #16
  403aec:	4770      	bx	lr
  403aee:	bf00      	nop
  403af0:	2040004c 	.word	0x2040004c

00403af4 <malloc>:
  403af4:	4b02      	ldr	r3, [pc, #8]	; (403b00 <malloc+0xc>)
  403af6:	4601      	mov	r1, r0
  403af8:	6818      	ldr	r0, [r3, #0]
  403afa:	f000 b803 	b.w	403b04 <_malloc_r>
  403afe:	bf00      	nop
  403b00:	2040004c 	.word	0x2040004c

00403b04 <_malloc_r>:
  403b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403b08:	f101 060b 	add.w	r6, r1, #11
  403b0c:	2e16      	cmp	r6, #22
  403b0e:	b083      	sub	sp, #12
  403b10:	4605      	mov	r5, r0
  403b12:	f240 809e 	bls.w	403c52 <_malloc_r+0x14e>
  403b16:	f036 0607 	bics.w	r6, r6, #7
  403b1a:	f100 80bd 	bmi.w	403c98 <_malloc_r+0x194>
  403b1e:	42b1      	cmp	r1, r6
  403b20:	f200 80ba 	bhi.w	403c98 <_malloc_r+0x194>
  403b24:	f000 fb86 	bl	404234 <__malloc_lock>
  403b28:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403b2c:	f0c0 8293 	bcc.w	404056 <_malloc_r+0x552>
  403b30:	0a73      	lsrs	r3, r6, #9
  403b32:	f000 80b8 	beq.w	403ca6 <_malloc_r+0x1a2>
  403b36:	2b04      	cmp	r3, #4
  403b38:	f200 8179 	bhi.w	403e2e <_malloc_r+0x32a>
  403b3c:	09b3      	lsrs	r3, r6, #6
  403b3e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403b42:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403b46:	00c3      	lsls	r3, r0, #3
  403b48:	4fbf      	ldr	r7, [pc, #764]	; (403e48 <_malloc_r+0x344>)
  403b4a:	443b      	add	r3, r7
  403b4c:	f1a3 0108 	sub.w	r1, r3, #8
  403b50:	685c      	ldr	r4, [r3, #4]
  403b52:	42a1      	cmp	r1, r4
  403b54:	d106      	bne.n	403b64 <_malloc_r+0x60>
  403b56:	e00c      	b.n	403b72 <_malloc_r+0x6e>
  403b58:	2a00      	cmp	r2, #0
  403b5a:	f280 80aa 	bge.w	403cb2 <_malloc_r+0x1ae>
  403b5e:	68e4      	ldr	r4, [r4, #12]
  403b60:	42a1      	cmp	r1, r4
  403b62:	d006      	beq.n	403b72 <_malloc_r+0x6e>
  403b64:	6863      	ldr	r3, [r4, #4]
  403b66:	f023 0303 	bic.w	r3, r3, #3
  403b6a:	1b9a      	subs	r2, r3, r6
  403b6c:	2a0f      	cmp	r2, #15
  403b6e:	ddf3      	ble.n	403b58 <_malloc_r+0x54>
  403b70:	4670      	mov	r0, lr
  403b72:	693c      	ldr	r4, [r7, #16]
  403b74:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403e5c <_malloc_r+0x358>
  403b78:	4574      	cmp	r4, lr
  403b7a:	f000 81ab 	beq.w	403ed4 <_malloc_r+0x3d0>
  403b7e:	6863      	ldr	r3, [r4, #4]
  403b80:	f023 0303 	bic.w	r3, r3, #3
  403b84:	1b9a      	subs	r2, r3, r6
  403b86:	2a0f      	cmp	r2, #15
  403b88:	f300 8190 	bgt.w	403eac <_malloc_r+0x3a8>
  403b8c:	2a00      	cmp	r2, #0
  403b8e:	f8c7 e014 	str.w	lr, [r7, #20]
  403b92:	f8c7 e010 	str.w	lr, [r7, #16]
  403b96:	f280 809d 	bge.w	403cd4 <_malloc_r+0x1d0>
  403b9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403b9e:	f080 8161 	bcs.w	403e64 <_malloc_r+0x360>
  403ba2:	08db      	lsrs	r3, r3, #3
  403ba4:	f103 0c01 	add.w	ip, r3, #1
  403ba8:	1099      	asrs	r1, r3, #2
  403baa:	687a      	ldr	r2, [r7, #4]
  403bac:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403bb0:	f8c4 8008 	str.w	r8, [r4, #8]
  403bb4:	2301      	movs	r3, #1
  403bb6:	408b      	lsls	r3, r1
  403bb8:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403bbc:	4313      	orrs	r3, r2
  403bbe:	3908      	subs	r1, #8
  403bc0:	60e1      	str	r1, [r4, #12]
  403bc2:	607b      	str	r3, [r7, #4]
  403bc4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403bc8:	f8c8 400c 	str.w	r4, [r8, #12]
  403bcc:	1082      	asrs	r2, r0, #2
  403bce:	2401      	movs	r4, #1
  403bd0:	4094      	lsls	r4, r2
  403bd2:	429c      	cmp	r4, r3
  403bd4:	f200 808b 	bhi.w	403cee <_malloc_r+0x1ea>
  403bd8:	421c      	tst	r4, r3
  403bda:	d106      	bne.n	403bea <_malloc_r+0xe6>
  403bdc:	f020 0003 	bic.w	r0, r0, #3
  403be0:	0064      	lsls	r4, r4, #1
  403be2:	421c      	tst	r4, r3
  403be4:	f100 0004 	add.w	r0, r0, #4
  403be8:	d0fa      	beq.n	403be0 <_malloc_r+0xdc>
  403bea:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403bee:	46cc      	mov	ip, r9
  403bf0:	4680      	mov	r8, r0
  403bf2:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403bf6:	459c      	cmp	ip, r3
  403bf8:	d107      	bne.n	403c0a <_malloc_r+0x106>
  403bfa:	e16d      	b.n	403ed8 <_malloc_r+0x3d4>
  403bfc:	2a00      	cmp	r2, #0
  403bfe:	f280 817b 	bge.w	403ef8 <_malloc_r+0x3f4>
  403c02:	68db      	ldr	r3, [r3, #12]
  403c04:	459c      	cmp	ip, r3
  403c06:	f000 8167 	beq.w	403ed8 <_malloc_r+0x3d4>
  403c0a:	6859      	ldr	r1, [r3, #4]
  403c0c:	f021 0103 	bic.w	r1, r1, #3
  403c10:	1b8a      	subs	r2, r1, r6
  403c12:	2a0f      	cmp	r2, #15
  403c14:	ddf2      	ble.n	403bfc <_malloc_r+0xf8>
  403c16:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403c1a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403c1e:	9300      	str	r3, [sp, #0]
  403c20:	199c      	adds	r4, r3, r6
  403c22:	4628      	mov	r0, r5
  403c24:	f046 0601 	orr.w	r6, r6, #1
  403c28:	f042 0501 	orr.w	r5, r2, #1
  403c2c:	605e      	str	r6, [r3, #4]
  403c2e:	f8c8 c00c 	str.w	ip, [r8, #12]
  403c32:	f8cc 8008 	str.w	r8, [ip, #8]
  403c36:	617c      	str	r4, [r7, #20]
  403c38:	613c      	str	r4, [r7, #16]
  403c3a:	f8c4 e00c 	str.w	lr, [r4, #12]
  403c3e:	f8c4 e008 	str.w	lr, [r4, #8]
  403c42:	6065      	str	r5, [r4, #4]
  403c44:	505a      	str	r2, [r3, r1]
  403c46:	f000 fafb 	bl	404240 <__malloc_unlock>
  403c4a:	9b00      	ldr	r3, [sp, #0]
  403c4c:	f103 0408 	add.w	r4, r3, #8
  403c50:	e01e      	b.n	403c90 <_malloc_r+0x18c>
  403c52:	2910      	cmp	r1, #16
  403c54:	d820      	bhi.n	403c98 <_malloc_r+0x194>
  403c56:	f000 faed 	bl	404234 <__malloc_lock>
  403c5a:	2610      	movs	r6, #16
  403c5c:	2318      	movs	r3, #24
  403c5e:	2002      	movs	r0, #2
  403c60:	4f79      	ldr	r7, [pc, #484]	; (403e48 <_malloc_r+0x344>)
  403c62:	443b      	add	r3, r7
  403c64:	f1a3 0208 	sub.w	r2, r3, #8
  403c68:	685c      	ldr	r4, [r3, #4]
  403c6a:	4294      	cmp	r4, r2
  403c6c:	f000 813d 	beq.w	403eea <_malloc_r+0x3e6>
  403c70:	6863      	ldr	r3, [r4, #4]
  403c72:	68e1      	ldr	r1, [r4, #12]
  403c74:	68a6      	ldr	r6, [r4, #8]
  403c76:	f023 0303 	bic.w	r3, r3, #3
  403c7a:	4423      	add	r3, r4
  403c7c:	4628      	mov	r0, r5
  403c7e:	685a      	ldr	r2, [r3, #4]
  403c80:	60f1      	str	r1, [r6, #12]
  403c82:	f042 0201 	orr.w	r2, r2, #1
  403c86:	608e      	str	r6, [r1, #8]
  403c88:	605a      	str	r2, [r3, #4]
  403c8a:	f000 fad9 	bl	404240 <__malloc_unlock>
  403c8e:	3408      	adds	r4, #8
  403c90:	4620      	mov	r0, r4
  403c92:	b003      	add	sp, #12
  403c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c98:	2400      	movs	r4, #0
  403c9a:	230c      	movs	r3, #12
  403c9c:	4620      	mov	r0, r4
  403c9e:	602b      	str	r3, [r5, #0]
  403ca0:	b003      	add	sp, #12
  403ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ca6:	2040      	movs	r0, #64	; 0x40
  403ca8:	f44f 7300 	mov.w	r3, #512	; 0x200
  403cac:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403cb0:	e74a      	b.n	403b48 <_malloc_r+0x44>
  403cb2:	4423      	add	r3, r4
  403cb4:	68e1      	ldr	r1, [r4, #12]
  403cb6:	685a      	ldr	r2, [r3, #4]
  403cb8:	68a6      	ldr	r6, [r4, #8]
  403cba:	f042 0201 	orr.w	r2, r2, #1
  403cbe:	60f1      	str	r1, [r6, #12]
  403cc0:	4628      	mov	r0, r5
  403cc2:	608e      	str	r6, [r1, #8]
  403cc4:	605a      	str	r2, [r3, #4]
  403cc6:	f000 fabb 	bl	404240 <__malloc_unlock>
  403cca:	3408      	adds	r4, #8
  403ccc:	4620      	mov	r0, r4
  403cce:	b003      	add	sp, #12
  403cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403cd4:	4423      	add	r3, r4
  403cd6:	4628      	mov	r0, r5
  403cd8:	685a      	ldr	r2, [r3, #4]
  403cda:	f042 0201 	orr.w	r2, r2, #1
  403cde:	605a      	str	r2, [r3, #4]
  403ce0:	f000 faae 	bl	404240 <__malloc_unlock>
  403ce4:	3408      	adds	r4, #8
  403ce6:	4620      	mov	r0, r4
  403ce8:	b003      	add	sp, #12
  403cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403cee:	68bc      	ldr	r4, [r7, #8]
  403cf0:	6863      	ldr	r3, [r4, #4]
  403cf2:	f023 0803 	bic.w	r8, r3, #3
  403cf6:	45b0      	cmp	r8, r6
  403cf8:	d304      	bcc.n	403d04 <_malloc_r+0x200>
  403cfa:	eba8 0306 	sub.w	r3, r8, r6
  403cfe:	2b0f      	cmp	r3, #15
  403d00:	f300 8085 	bgt.w	403e0e <_malloc_r+0x30a>
  403d04:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403e60 <_malloc_r+0x35c>
  403d08:	4b50      	ldr	r3, [pc, #320]	; (403e4c <_malloc_r+0x348>)
  403d0a:	f8d9 2000 	ldr.w	r2, [r9]
  403d0e:	681b      	ldr	r3, [r3, #0]
  403d10:	3201      	adds	r2, #1
  403d12:	4433      	add	r3, r6
  403d14:	eb04 0a08 	add.w	sl, r4, r8
  403d18:	f000 8155 	beq.w	403fc6 <_malloc_r+0x4c2>
  403d1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403d20:	330f      	adds	r3, #15
  403d22:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403d26:	f02b 0b0f 	bic.w	fp, fp, #15
  403d2a:	4659      	mov	r1, fp
  403d2c:	4628      	mov	r0, r5
  403d2e:	f000 fa8d 	bl	40424c <_sbrk_r>
  403d32:	1c41      	adds	r1, r0, #1
  403d34:	4602      	mov	r2, r0
  403d36:	f000 80fc 	beq.w	403f32 <_malloc_r+0x42e>
  403d3a:	4582      	cmp	sl, r0
  403d3c:	f200 80f7 	bhi.w	403f2e <_malloc_r+0x42a>
  403d40:	4b43      	ldr	r3, [pc, #268]	; (403e50 <_malloc_r+0x34c>)
  403d42:	6819      	ldr	r1, [r3, #0]
  403d44:	4459      	add	r1, fp
  403d46:	6019      	str	r1, [r3, #0]
  403d48:	f000 814d 	beq.w	403fe6 <_malloc_r+0x4e2>
  403d4c:	f8d9 0000 	ldr.w	r0, [r9]
  403d50:	3001      	adds	r0, #1
  403d52:	bf1b      	ittet	ne
  403d54:	eba2 0a0a 	subne.w	sl, r2, sl
  403d58:	4451      	addne	r1, sl
  403d5a:	f8c9 2000 	streq.w	r2, [r9]
  403d5e:	6019      	strne	r1, [r3, #0]
  403d60:	f012 0107 	ands.w	r1, r2, #7
  403d64:	f000 8115 	beq.w	403f92 <_malloc_r+0x48e>
  403d68:	f1c1 0008 	rsb	r0, r1, #8
  403d6c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403d70:	4402      	add	r2, r0
  403d72:	3108      	adds	r1, #8
  403d74:	eb02 090b 	add.w	r9, r2, fp
  403d78:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403d7c:	eba1 0909 	sub.w	r9, r1, r9
  403d80:	4649      	mov	r1, r9
  403d82:	4628      	mov	r0, r5
  403d84:	9301      	str	r3, [sp, #4]
  403d86:	9200      	str	r2, [sp, #0]
  403d88:	f000 fa60 	bl	40424c <_sbrk_r>
  403d8c:	1c43      	adds	r3, r0, #1
  403d8e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403d92:	f000 8143 	beq.w	40401c <_malloc_r+0x518>
  403d96:	1a80      	subs	r0, r0, r2
  403d98:	4448      	add	r0, r9
  403d9a:	f040 0001 	orr.w	r0, r0, #1
  403d9e:	6819      	ldr	r1, [r3, #0]
  403da0:	60ba      	str	r2, [r7, #8]
  403da2:	4449      	add	r1, r9
  403da4:	42bc      	cmp	r4, r7
  403da6:	6050      	str	r0, [r2, #4]
  403da8:	6019      	str	r1, [r3, #0]
  403daa:	d017      	beq.n	403ddc <_malloc_r+0x2d8>
  403dac:	f1b8 0f0f 	cmp.w	r8, #15
  403db0:	f240 80fb 	bls.w	403faa <_malloc_r+0x4a6>
  403db4:	6860      	ldr	r0, [r4, #4]
  403db6:	f1a8 020c 	sub.w	r2, r8, #12
  403dba:	f022 0207 	bic.w	r2, r2, #7
  403dbe:	eb04 0e02 	add.w	lr, r4, r2
  403dc2:	f000 0001 	and.w	r0, r0, #1
  403dc6:	f04f 0c05 	mov.w	ip, #5
  403dca:	4310      	orrs	r0, r2
  403dcc:	2a0f      	cmp	r2, #15
  403dce:	6060      	str	r0, [r4, #4]
  403dd0:	f8ce c004 	str.w	ip, [lr, #4]
  403dd4:	f8ce c008 	str.w	ip, [lr, #8]
  403dd8:	f200 8117 	bhi.w	40400a <_malloc_r+0x506>
  403ddc:	4b1d      	ldr	r3, [pc, #116]	; (403e54 <_malloc_r+0x350>)
  403dde:	68bc      	ldr	r4, [r7, #8]
  403de0:	681a      	ldr	r2, [r3, #0]
  403de2:	4291      	cmp	r1, r2
  403de4:	bf88      	it	hi
  403de6:	6019      	strhi	r1, [r3, #0]
  403de8:	4b1b      	ldr	r3, [pc, #108]	; (403e58 <_malloc_r+0x354>)
  403dea:	681a      	ldr	r2, [r3, #0]
  403dec:	4291      	cmp	r1, r2
  403dee:	6862      	ldr	r2, [r4, #4]
  403df0:	bf88      	it	hi
  403df2:	6019      	strhi	r1, [r3, #0]
  403df4:	f022 0203 	bic.w	r2, r2, #3
  403df8:	4296      	cmp	r6, r2
  403dfa:	eba2 0306 	sub.w	r3, r2, r6
  403dfe:	d801      	bhi.n	403e04 <_malloc_r+0x300>
  403e00:	2b0f      	cmp	r3, #15
  403e02:	dc04      	bgt.n	403e0e <_malloc_r+0x30a>
  403e04:	4628      	mov	r0, r5
  403e06:	f000 fa1b 	bl	404240 <__malloc_unlock>
  403e0a:	2400      	movs	r4, #0
  403e0c:	e740      	b.n	403c90 <_malloc_r+0x18c>
  403e0e:	19a2      	adds	r2, r4, r6
  403e10:	f043 0301 	orr.w	r3, r3, #1
  403e14:	f046 0601 	orr.w	r6, r6, #1
  403e18:	6066      	str	r6, [r4, #4]
  403e1a:	4628      	mov	r0, r5
  403e1c:	60ba      	str	r2, [r7, #8]
  403e1e:	6053      	str	r3, [r2, #4]
  403e20:	f000 fa0e 	bl	404240 <__malloc_unlock>
  403e24:	3408      	adds	r4, #8
  403e26:	4620      	mov	r0, r4
  403e28:	b003      	add	sp, #12
  403e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403e2e:	2b14      	cmp	r3, #20
  403e30:	d971      	bls.n	403f16 <_malloc_r+0x412>
  403e32:	2b54      	cmp	r3, #84	; 0x54
  403e34:	f200 80a3 	bhi.w	403f7e <_malloc_r+0x47a>
  403e38:	0b33      	lsrs	r3, r6, #12
  403e3a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403e3e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403e42:	00c3      	lsls	r3, r0, #3
  403e44:	e680      	b.n	403b48 <_malloc_r+0x44>
  403e46:	bf00      	nop
  403e48:	20400478 	.word	0x20400478
  403e4c:	20446030 	.word	0x20446030
  403e50:	20446000 	.word	0x20446000
  403e54:	20446028 	.word	0x20446028
  403e58:	2044602c 	.word	0x2044602c
  403e5c:	20400480 	.word	0x20400480
  403e60:	20400880 	.word	0x20400880
  403e64:	0a5a      	lsrs	r2, r3, #9
  403e66:	2a04      	cmp	r2, #4
  403e68:	d95b      	bls.n	403f22 <_malloc_r+0x41e>
  403e6a:	2a14      	cmp	r2, #20
  403e6c:	f200 80ae 	bhi.w	403fcc <_malloc_r+0x4c8>
  403e70:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403e74:	00c9      	lsls	r1, r1, #3
  403e76:	325b      	adds	r2, #91	; 0x5b
  403e78:	eb07 0c01 	add.w	ip, r7, r1
  403e7c:	5879      	ldr	r1, [r7, r1]
  403e7e:	f1ac 0c08 	sub.w	ip, ip, #8
  403e82:	458c      	cmp	ip, r1
  403e84:	f000 8088 	beq.w	403f98 <_malloc_r+0x494>
  403e88:	684a      	ldr	r2, [r1, #4]
  403e8a:	f022 0203 	bic.w	r2, r2, #3
  403e8e:	4293      	cmp	r3, r2
  403e90:	d273      	bcs.n	403f7a <_malloc_r+0x476>
  403e92:	6889      	ldr	r1, [r1, #8]
  403e94:	458c      	cmp	ip, r1
  403e96:	d1f7      	bne.n	403e88 <_malloc_r+0x384>
  403e98:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403e9c:	687b      	ldr	r3, [r7, #4]
  403e9e:	60e2      	str	r2, [r4, #12]
  403ea0:	f8c4 c008 	str.w	ip, [r4, #8]
  403ea4:	6094      	str	r4, [r2, #8]
  403ea6:	f8cc 400c 	str.w	r4, [ip, #12]
  403eaa:	e68f      	b.n	403bcc <_malloc_r+0xc8>
  403eac:	19a1      	adds	r1, r4, r6
  403eae:	f046 0c01 	orr.w	ip, r6, #1
  403eb2:	f042 0601 	orr.w	r6, r2, #1
  403eb6:	f8c4 c004 	str.w	ip, [r4, #4]
  403eba:	4628      	mov	r0, r5
  403ebc:	6179      	str	r1, [r7, #20]
  403ebe:	6139      	str	r1, [r7, #16]
  403ec0:	f8c1 e00c 	str.w	lr, [r1, #12]
  403ec4:	f8c1 e008 	str.w	lr, [r1, #8]
  403ec8:	604e      	str	r6, [r1, #4]
  403eca:	50e2      	str	r2, [r4, r3]
  403ecc:	f000 f9b8 	bl	404240 <__malloc_unlock>
  403ed0:	3408      	adds	r4, #8
  403ed2:	e6dd      	b.n	403c90 <_malloc_r+0x18c>
  403ed4:	687b      	ldr	r3, [r7, #4]
  403ed6:	e679      	b.n	403bcc <_malloc_r+0xc8>
  403ed8:	f108 0801 	add.w	r8, r8, #1
  403edc:	f018 0f03 	tst.w	r8, #3
  403ee0:	f10c 0c08 	add.w	ip, ip, #8
  403ee4:	f47f ae85 	bne.w	403bf2 <_malloc_r+0xee>
  403ee8:	e02d      	b.n	403f46 <_malloc_r+0x442>
  403eea:	68dc      	ldr	r4, [r3, #12]
  403eec:	42a3      	cmp	r3, r4
  403eee:	bf08      	it	eq
  403ef0:	3002      	addeq	r0, #2
  403ef2:	f43f ae3e 	beq.w	403b72 <_malloc_r+0x6e>
  403ef6:	e6bb      	b.n	403c70 <_malloc_r+0x16c>
  403ef8:	4419      	add	r1, r3
  403efa:	461c      	mov	r4, r3
  403efc:	684a      	ldr	r2, [r1, #4]
  403efe:	68db      	ldr	r3, [r3, #12]
  403f00:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403f04:	f042 0201 	orr.w	r2, r2, #1
  403f08:	604a      	str	r2, [r1, #4]
  403f0a:	4628      	mov	r0, r5
  403f0c:	60f3      	str	r3, [r6, #12]
  403f0e:	609e      	str	r6, [r3, #8]
  403f10:	f000 f996 	bl	404240 <__malloc_unlock>
  403f14:	e6bc      	b.n	403c90 <_malloc_r+0x18c>
  403f16:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403f1a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403f1e:	00c3      	lsls	r3, r0, #3
  403f20:	e612      	b.n	403b48 <_malloc_r+0x44>
  403f22:	099a      	lsrs	r2, r3, #6
  403f24:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403f28:	00c9      	lsls	r1, r1, #3
  403f2a:	3238      	adds	r2, #56	; 0x38
  403f2c:	e7a4      	b.n	403e78 <_malloc_r+0x374>
  403f2e:	42bc      	cmp	r4, r7
  403f30:	d054      	beq.n	403fdc <_malloc_r+0x4d8>
  403f32:	68bc      	ldr	r4, [r7, #8]
  403f34:	6862      	ldr	r2, [r4, #4]
  403f36:	f022 0203 	bic.w	r2, r2, #3
  403f3a:	e75d      	b.n	403df8 <_malloc_r+0x2f4>
  403f3c:	f859 3908 	ldr.w	r3, [r9], #-8
  403f40:	4599      	cmp	r9, r3
  403f42:	f040 8086 	bne.w	404052 <_malloc_r+0x54e>
  403f46:	f010 0f03 	tst.w	r0, #3
  403f4a:	f100 30ff 	add.w	r0, r0, #4294967295
  403f4e:	d1f5      	bne.n	403f3c <_malloc_r+0x438>
  403f50:	687b      	ldr	r3, [r7, #4]
  403f52:	ea23 0304 	bic.w	r3, r3, r4
  403f56:	607b      	str	r3, [r7, #4]
  403f58:	0064      	lsls	r4, r4, #1
  403f5a:	429c      	cmp	r4, r3
  403f5c:	f63f aec7 	bhi.w	403cee <_malloc_r+0x1ea>
  403f60:	2c00      	cmp	r4, #0
  403f62:	f43f aec4 	beq.w	403cee <_malloc_r+0x1ea>
  403f66:	421c      	tst	r4, r3
  403f68:	4640      	mov	r0, r8
  403f6a:	f47f ae3e 	bne.w	403bea <_malloc_r+0xe6>
  403f6e:	0064      	lsls	r4, r4, #1
  403f70:	421c      	tst	r4, r3
  403f72:	f100 0004 	add.w	r0, r0, #4
  403f76:	d0fa      	beq.n	403f6e <_malloc_r+0x46a>
  403f78:	e637      	b.n	403bea <_malloc_r+0xe6>
  403f7a:	468c      	mov	ip, r1
  403f7c:	e78c      	b.n	403e98 <_malloc_r+0x394>
  403f7e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403f82:	d815      	bhi.n	403fb0 <_malloc_r+0x4ac>
  403f84:	0bf3      	lsrs	r3, r6, #15
  403f86:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403f8a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403f8e:	00c3      	lsls	r3, r0, #3
  403f90:	e5da      	b.n	403b48 <_malloc_r+0x44>
  403f92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403f96:	e6ed      	b.n	403d74 <_malloc_r+0x270>
  403f98:	687b      	ldr	r3, [r7, #4]
  403f9a:	1092      	asrs	r2, r2, #2
  403f9c:	2101      	movs	r1, #1
  403f9e:	fa01 f202 	lsl.w	r2, r1, r2
  403fa2:	4313      	orrs	r3, r2
  403fa4:	607b      	str	r3, [r7, #4]
  403fa6:	4662      	mov	r2, ip
  403fa8:	e779      	b.n	403e9e <_malloc_r+0x39a>
  403faa:	2301      	movs	r3, #1
  403fac:	6053      	str	r3, [r2, #4]
  403fae:	e729      	b.n	403e04 <_malloc_r+0x300>
  403fb0:	f240 5254 	movw	r2, #1364	; 0x554
  403fb4:	4293      	cmp	r3, r2
  403fb6:	d822      	bhi.n	403ffe <_malloc_r+0x4fa>
  403fb8:	0cb3      	lsrs	r3, r6, #18
  403fba:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403fbe:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403fc2:	00c3      	lsls	r3, r0, #3
  403fc4:	e5c0      	b.n	403b48 <_malloc_r+0x44>
  403fc6:	f103 0b10 	add.w	fp, r3, #16
  403fca:	e6ae      	b.n	403d2a <_malloc_r+0x226>
  403fcc:	2a54      	cmp	r2, #84	; 0x54
  403fce:	d829      	bhi.n	404024 <_malloc_r+0x520>
  403fd0:	0b1a      	lsrs	r2, r3, #12
  403fd2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403fd6:	00c9      	lsls	r1, r1, #3
  403fd8:	326e      	adds	r2, #110	; 0x6e
  403fda:	e74d      	b.n	403e78 <_malloc_r+0x374>
  403fdc:	4b20      	ldr	r3, [pc, #128]	; (404060 <_malloc_r+0x55c>)
  403fde:	6819      	ldr	r1, [r3, #0]
  403fe0:	4459      	add	r1, fp
  403fe2:	6019      	str	r1, [r3, #0]
  403fe4:	e6b2      	b.n	403d4c <_malloc_r+0x248>
  403fe6:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403fea:	2800      	cmp	r0, #0
  403fec:	f47f aeae 	bne.w	403d4c <_malloc_r+0x248>
  403ff0:	eb08 030b 	add.w	r3, r8, fp
  403ff4:	68ba      	ldr	r2, [r7, #8]
  403ff6:	f043 0301 	orr.w	r3, r3, #1
  403ffa:	6053      	str	r3, [r2, #4]
  403ffc:	e6ee      	b.n	403ddc <_malloc_r+0x2d8>
  403ffe:	207f      	movs	r0, #127	; 0x7f
  404000:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404004:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  404008:	e59e      	b.n	403b48 <_malloc_r+0x44>
  40400a:	f104 0108 	add.w	r1, r4, #8
  40400e:	4628      	mov	r0, r5
  404010:	9300      	str	r3, [sp, #0]
  404012:	f001 fa89 	bl	405528 <_free_r>
  404016:	9b00      	ldr	r3, [sp, #0]
  404018:	6819      	ldr	r1, [r3, #0]
  40401a:	e6df      	b.n	403ddc <_malloc_r+0x2d8>
  40401c:	2001      	movs	r0, #1
  40401e:	f04f 0900 	mov.w	r9, #0
  404022:	e6bc      	b.n	403d9e <_malloc_r+0x29a>
  404024:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404028:	d805      	bhi.n	404036 <_malloc_r+0x532>
  40402a:	0bda      	lsrs	r2, r3, #15
  40402c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404030:	00c9      	lsls	r1, r1, #3
  404032:	3277      	adds	r2, #119	; 0x77
  404034:	e720      	b.n	403e78 <_malloc_r+0x374>
  404036:	f240 5154 	movw	r1, #1364	; 0x554
  40403a:	428a      	cmp	r2, r1
  40403c:	d805      	bhi.n	40404a <_malloc_r+0x546>
  40403e:	0c9a      	lsrs	r2, r3, #18
  404040:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404044:	00c9      	lsls	r1, r1, #3
  404046:	327c      	adds	r2, #124	; 0x7c
  404048:	e716      	b.n	403e78 <_malloc_r+0x374>
  40404a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40404e:	227e      	movs	r2, #126	; 0x7e
  404050:	e712      	b.n	403e78 <_malloc_r+0x374>
  404052:	687b      	ldr	r3, [r7, #4]
  404054:	e780      	b.n	403f58 <_malloc_r+0x454>
  404056:	08f0      	lsrs	r0, r6, #3
  404058:	f106 0308 	add.w	r3, r6, #8
  40405c:	e600      	b.n	403c60 <_malloc_r+0x15c>
  40405e:	bf00      	nop
  404060:	20446000 	.word	0x20446000

00404064 <memcpy>:
  404064:	4684      	mov	ip, r0
  404066:	ea41 0300 	orr.w	r3, r1, r0
  40406a:	f013 0303 	ands.w	r3, r3, #3
  40406e:	d16d      	bne.n	40414c <memcpy+0xe8>
  404070:	3a40      	subs	r2, #64	; 0x40
  404072:	d341      	bcc.n	4040f8 <memcpy+0x94>
  404074:	f851 3b04 	ldr.w	r3, [r1], #4
  404078:	f840 3b04 	str.w	r3, [r0], #4
  40407c:	f851 3b04 	ldr.w	r3, [r1], #4
  404080:	f840 3b04 	str.w	r3, [r0], #4
  404084:	f851 3b04 	ldr.w	r3, [r1], #4
  404088:	f840 3b04 	str.w	r3, [r0], #4
  40408c:	f851 3b04 	ldr.w	r3, [r1], #4
  404090:	f840 3b04 	str.w	r3, [r0], #4
  404094:	f851 3b04 	ldr.w	r3, [r1], #4
  404098:	f840 3b04 	str.w	r3, [r0], #4
  40409c:	f851 3b04 	ldr.w	r3, [r1], #4
  4040a0:	f840 3b04 	str.w	r3, [r0], #4
  4040a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4040a8:	f840 3b04 	str.w	r3, [r0], #4
  4040ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4040b0:	f840 3b04 	str.w	r3, [r0], #4
  4040b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4040b8:	f840 3b04 	str.w	r3, [r0], #4
  4040bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4040c0:	f840 3b04 	str.w	r3, [r0], #4
  4040c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4040c8:	f840 3b04 	str.w	r3, [r0], #4
  4040cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4040d0:	f840 3b04 	str.w	r3, [r0], #4
  4040d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4040d8:	f840 3b04 	str.w	r3, [r0], #4
  4040dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4040e0:	f840 3b04 	str.w	r3, [r0], #4
  4040e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4040e8:	f840 3b04 	str.w	r3, [r0], #4
  4040ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4040f0:	f840 3b04 	str.w	r3, [r0], #4
  4040f4:	3a40      	subs	r2, #64	; 0x40
  4040f6:	d2bd      	bcs.n	404074 <memcpy+0x10>
  4040f8:	3230      	adds	r2, #48	; 0x30
  4040fa:	d311      	bcc.n	404120 <memcpy+0xbc>
  4040fc:	f851 3b04 	ldr.w	r3, [r1], #4
  404100:	f840 3b04 	str.w	r3, [r0], #4
  404104:	f851 3b04 	ldr.w	r3, [r1], #4
  404108:	f840 3b04 	str.w	r3, [r0], #4
  40410c:	f851 3b04 	ldr.w	r3, [r1], #4
  404110:	f840 3b04 	str.w	r3, [r0], #4
  404114:	f851 3b04 	ldr.w	r3, [r1], #4
  404118:	f840 3b04 	str.w	r3, [r0], #4
  40411c:	3a10      	subs	r2, #16
  40411e:	d2ed      	bcs.n	4040fc <memcpy+0x98>
  404120:	320c      	adds	r2, #12
  404122:	d305      	bcc.n	404130 <memcpy+0xcc>
  404124:	f851 3b04 	ldr.w	r3, [r1], #4
  404128:	f840 3b04 	str.w	r3, [r0], #4
  40412c:	3a04      	subs	r2, #4
  40412e:	d2f9      	bcs.n	404124 <memcpy+0xc0>
  404130:	3204      	adds	r2, #4
  404132:	d008      	beq.n	404146 <memcpy+0xe2>
  404134:	07d2      	lsls	r2, r2, #31
  404136:	bf1c      	itt	ne
  404138:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40413c:	f800 3b01 	strbne.w	r3, [r0], #1
  404140:	d301      	bcc.n	404146 <memcpy+0xe2>
  404142:	880b      	ldrh	r3, [r1, #0]
  404144:	8003      	strh	r3, [r0, #0]
  404146:	4660      	mov	r0, ip
  404148:	4770      	bx	lr
  40414a:	bf00      	nop
  40414c:	2a08      	cmp	r2, #8
  40414e:	d313      	bcc.n	404178 <memcpy+0x114>
  404150:	078b      	lsls	r3, r1, #30
  404152:	d08d      	beq.n	404070 <memcpy+0xc>
  404154:	f010 0303 	ands.w	r3, r0, #3
  404158:	d08a      	beq.n	404070 <memcpy+0xc>
  40415a:	f1c3 0304 	rsb	r3, r3, #4
  40415e:	1ad2      	subs	r2, r2, r3
  404160:	07db      	lsls	r3, r3, #31
  404162:	bf1c      	itt	ne
  404164:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404168:	f800 3b01 	strbne.w	r3, [r0], #1
  40416c:	d380      	bcc.n	404070 <memcpy+0xc>
  40416e:	f831 3b02 	ldrh.w	r3, [r1], #2
  404172:	f820 3b02 	strh.w	r3, [r0], #2
  404176:	e77b      	b.n	404070 <memcpy+0xc>
  404178:	3a04      	subs	r2, #4
  40417a:	d3d9      	bcc.n	404130 <memcpy+0xcc>
  40417c:	3a01      	subs	r2, #1
  40417e:	f811 3b01 	ldrb.w	r3, [r1], #1
  404182:	f800 3b01 	strb.w	r3, [r0], #1
  404186:	d2f9      	bcs.n	40417c <memcpy+0x118>
  404188:	780b      	ldrb	r3, [r1, #0]
  40418a:	7003      	strb	r3, [r0, #0]
  40418c:	784b      	ldrb	r3, [r1, #1]
  40418e:	7043      	strb	r3, [r0, #1]
  404190:	788b      	ldrb	r3, [r1, #2]
  404192:	7083      	strb	r3, [r0, #2]
  404194:	4660      	mov	r0, ip
  404196:	4770      	bx	lr

00404198 <memset>:
  404198:	b470      	push	{r4, r5, r6}
  40419a:	0786      	lsls	r6, r0, #30
  40419c:	d046      	beq.n	40422c <memset+0x94>
  40419e:	1e54      	subs	r4, r2, #1
  4041a0:	2a00      	cmp	r2, #0
  4041a2:	d041      	beq.n	404228 <memset+0x90>
  4041a4:	b2ca      	uxtb	r2, r1
  4041a6:	4603      	mov	r3, r0
  4041a8:	e002      	b.n	4041b0 <memset+0x18>
  4041aa:	f114 34ff 	adds.w	r4, r4, #4294967295
  4041ae:	d33b      	bcc.n	404228 <memset+0x90>
  4041b0:	f803 2b01 	strb.w	r2, [r3], #1
  4041b4:	079d      	lsls	r5, r3, #30
  4041b6:	d1f8      	bne.n	4041aa <memset+0x12>
  4041b8:	2c03      	cmp	r4, #3
  4041ba:	d92e      	bls.n	40421a <memset+0x82>
  4041bc:	b2cd      	uxtb	r5, r1
  4041be:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4041c2:	2c0f      	cmp	r4, #15
  4041c4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4041c8:	d919      	bls.n	4041fe <memset+0x66>
  4041ca:	f103 0210 	add.w	r2, r3, #16
  4041ce:	4626      	mov	r6, r4
  4041d0:	3e10      	subs	r6, #16
  4041d2:	2e0f      	cmp	r6, #15
  4041d4:	f842 5c10 	str.w	r5, [r2, #-16]
  4041d8:	f842 5c0c 	str.w	r5, [r2, #-12]
  4041dc:	f842 5c08 	str.w	r5, [r2, #-8]
  4041e0:	f842 5c04 	str.w	r5, [r2, #-4]
  4041e4:	f102 0210 	add.w	r2, r2, #16
  4041e8:	d8f2      	bhi.n	4041d0 <memset+0x38>
  4041ea:	f1a4 0210 	sub.w	r2, r4, #16
  4041ee:	f022 020f 	bic.w	r2, r2, #15
  4041f2:	f004 040f 	and.w	r4, r4, #15
  4041f6:	3210      	adds	r2, #16
  4041f8:	2c03      	cmp	r4, #3
  4041fa:	4413      	add	r3, r2
  4041fc:	d90d      	bls.n	40421a <memset+0x82>
  4041fe:	461e      	mov	r6, r3
  404200:	4622      	mov	r2, r4
  404202:	3a04      	subs	r2, #4
  404204:	2a03      	cmp	r2, #3
  404206:	f846 5b04 	str.w	r5, [r6], #4
  40420a:	d8fa      	bhi.n	404202 <memset+0x6a>
  40420c:	1f22      	subs	r2, r4, #4
  40420e:	f022 0203 	bic.w	r2, r2, #3
  404212:	3204      	adds	r2, #4
  404214:	4413      	add	r3, r2
  404216:	f004 0403 	and.w	r4, r4, #3
  40421a:	b12c      	cbz	r4, 404228 <memset+0x90>
  40421c:	b2c9      	uxtb	r1, r1
  40421e:	441c      	add	r4, r3
  404220:	f803 1b01 	strb.w	r1, [r3], #1
  404224:	429c      	cmp	r4, r3
  404226:	d1fb      	bne.n	404220 <memset+0x88>
  404228:	bc70      	pop	{r4, r5, r6}
  40422a:	4770      	bx	lr
  40422c:	4614      	mov	r4, r2
  40422e:	4603      	mov	r3, r0
  404230:	e7c2      	b.n	4041b8 <memset+0x20>
  404232:	bf00      	nop

00404234 <__malloc_lock>:
  404234:	4801      	ldr	r0, [pc, #4]	; (40423c <__malloc_lock+0x8>)
  404236:	f001 bc11 	b.w	405a5c <__retarget_lock_acquire_recursive>
  40423a:	bf00      	nop
  40423c:	2044c8cc 	.word	0x2044c8cc

00404240 <__malloc_unlock>:
  404240:	4801      	ldr	r0, [pc, #4]	; (404248 <__malloc_unlock+0x8>)
  404242:	f001 bc0d 	b.w	405a60 <__retarget_lock_release_recursive>
  404246:	bf00      	nop
  404248:	2044c8cc 	.word	0x2044c8cc

0040424c <_sbrk_r>:
  40424c:	b538      	push	{r3, r4, r5, lr}
  40424e:	4c07      	ldr	r4, [pc, #28]	; (40426c <_sbrk_r+0x20>)
  404250:	2300      	movs	r3, #0
  404252:	4605      	mov	r5, r0
  404254:	4608      	mov	r0, r1
  404256:	6023      	str	r3, [r4, #0]
  404258:	f7fe fa04 	bl	402664 <_sbrk>
  40425c:	1c43      	adds	r3, r0, #1
  40425e:	d000      	beq.n	404262 <_sbrk_r+0x16>
  404260:	bd38      	pop	{r3, r4, r5, pc}
  404262:	6823      	ldr	r3, [r4, #0]
  404264:	2b00      	cmp	r3, #0
  404266:	d0fb      	beq.n	404260 <_sbrk_r+0x14>
  404268:	602b      	str	r3, [r5, #0]
  40426a:	bd38      	pop	{r3, r4, r5, pc}
  40426c:	2044c8e0 	.word	0x2044c8e0

00404270 <__sprint_r.part.0>:
  404270:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404274:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  404276:	049c      	lsls	r4, r3, #18
  404278:	4693      	mov	fp, r2
  40427a:	d52f      	bpl.n	4042dc <__sprint_r.part.0+0x6c>
  40427c:	6893      	ldr	r3, [r2, #8]
  40427e:	6812      	ldr	r2, [r2, #0]
  404280:	b353      	cbz	r3, 4042d8 <__sprint_r.part.0+0x68>
  404282:	460e      	mov	r6, r1
  404284:	4607      	mov	r7, r0
  404286:	f102 0908 	add.w	r9, r2, #8
  40428a:	e919 0420 	ldmdb	r9, {r5, sl}
  40428e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  404292:	d017      	beq.n	4042c4 <__sprint_r.part.0+0x54>
  404294:	3d04      	subs	r5, #4
  404296:	2400      	movs	r4, #0
  404298:	e001      	b.n	40429e <__sprint_r.part.0+0x2e>
  40429a:	45a0      	cmp	r8, r4
  40429c:	d010      	beq.n	4042c0 <__sprint_r.part.0+0x50>
  40429e:	4632      	mov	r2, r6
  4042a0:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4042a4:	4638      	mov	r0, r7
  4042a6:	f001 f8bb 	bl	405420 <_fputwc_r>
  4042aa:	1c43      	adds	r3, r0, #1
  4042ac:	f104 0401 	add.w	r4, r4, #1
  4042b0:	d1f3      	bne.n	40429a <__sprint_r.part.0+0x2a>
  4042b2:	2300      	movs	r3, #0
  4042b4:	f8cb 3008 	str.w	r3, [fp, #8]
  4042b8:	f8cb 3004 	str.w	r3, [fp, #4]
  4042bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4042c0:	f8db 3008 	ldr.w	r3, [fp, #8]
  4042c4:	f02a 0a03 	bic.w	sl, sl, #3
  4042c8:	eba3 030a 	sub.w	r3, r3, sl
  4042cc:	f8cb 3008 	str.w	r3, [fp, #8]
  4042d0:	f109 0908 	add.w	r9, r9, #8
  4042d4:	2b00      	cmp	r3, #0
  4042d6:	d1d8      	bne.n	40428a <__sprint_r.part.0+0x1a>
  4042d8:	2000      	movs	r0, #0
  4042da:	e7ea      	b.n	4042b2 <__sprint_r.part.0+0x42>
  4042dc:	f001 fa0a 	bl	4056f4 <__sfvwrite_r>
  4042e0:	2300      	movs	r3, #0
  4042e2:	f8cb 3008 	str.w	r3, [fp, #8]
  4042e6:	f8cb 3004 	str.w	r3, [fp, #4]
  4042ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4042ee:	bf00      	nop

004042f0 <_vfiprintf_r>:
  4042f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4042f4:	b0ad      	sub	sp, #180	; 0xb4
  4042f6:	461d      	mov	r5, r3
  4042f8:	468b      	mov	fp, r1
  4042fa:	4690      	mov	r8, r2
  4042fc:	9307      	str	r3, [sp, #28]
  4042fe:	9006      	str	r0, [sp, #24]
  404300:	b118      	cbz	r0, 40430a <_vfiprintf_r+0x1a>
  404302:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404304:	2b00      	cmp	r3, #0
  404306:	f000 80f3 	beq.w	4044f0 <_vfiprintf_r+0x200>
  40430a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40430e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  404312:	07df      	lsls	r7, r3, #31
  404314:	b281      	uxth	r1, r0
  404316:	d402      	bmi.n	40431e <_vfiprintf_r+0x2e>
  404318:	058e      	lsls	r6, r1, #22
  40431a:	f140 80fc 	bpl.w	404516 <_vfiprintf_r+0x226>
  40431e:	048c      	lsls	r4, r1, #18
  404320:	d40a      	bmi.n	404338 <_vfiprintf_r+0x48>
  404322:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404326:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  40432a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40432e:	f8ab 100c 	strh.w	r1, [fp, #12]
  404332:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  404336:	b289      	uxth	r1, r1
  404338:	0708      	lsls	r0, r1, #28
  40433a:	f140 80b3 	bpl.w	4044a4 <_vfiprintf_r+0x1b4>
  40433e:	f8db 3010 	ldr.w	r3, [fp, #16]
  404342:	2b00      	cmp	r3, #0
  404344:	f000 80ae 	beq.w	4044a4 <_vfiprintf_r+0x1b4>
  404348:	f001 031a 	and.w	r3, r1, #26
  40434c:	2b0a      	cmp	r3, #10
  40434e:	f000 80b5 	beq.w	4044bc <_vfiprintf_r+0x1cc>
  404352:	2300      	movs	r3, #0
  404354:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  404358:	930b      	str	r3, [sp, #44]	; 0x2c
  40435a:	9311      	str	r3, [sp, #68]	; 0x44
  40435c:	9310      	str	r3, [sp, #64]	; 0x40
  40435e:	9303      	str	r3, [sp, #12]
  404360:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  404364:	46ca      	mov	sl, r9
  404366:	f8cd b010 	str.w	fp, [sp, #16]
  40436a:	f898 3000 	ldrb.w	r3, [r8]
  40436e:	4644      	mov	r4, r8
  404370:	b1fb      	cbz	r3, 4043b2 <_vfiprintf_r+0xc2>
  404372:	2b25      	cmp	r3, #37	; 0x25
  404374:	d102      	bne.n	40437c <_vfiprintf_r+0x8c>
  404376:	e01c      	b.n	4043b2 <_vfiprintf_r+0xc2>
  404378:	2b25      	cmp	r3, #37	; 0x25
  40437a:	d003      	beq.n	404384 <_vfiprintf_r+0x94>
  40437c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404380:	2b00      	cmp	r3, #0
  404382:	d1f9      	bne.n	404378 <_vfiprintf_r+0x88>
  404384:	eba4 0508 	sub.w	r5, r4, r8
  404388:	b19d      	cbz	r5, 4043b2 <_vfiprintf_r+0xc2>
  40438a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40438c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40438e:	f8ca 8000 	str.w	r8, [sl]
  404392:	3301      	adds	r3, #1
  404394:	442a      	add	r2, r5
  404396:	2b07      	cmp	r3, #7
  404398:	f8ca 5004 	str.w	r5, [sl, #4]
  40439c:	9211      	str	r2, [sp, #68]	; 0x44
  40439e:	9310      	str	r3, [sp, #64]	; 0x40
  4043a0:	dd7a      	ble.n	404498 <_vfiprintf_r+0x1a8>
  4043a2:	2a00      	cmp	r2, #0
  4043a4:	f040 84b0 	bne.w	404d08 <_vfiprintf_r+0xa18>
  4043a8:	9b03      	ldr	r3, [sp, #12]
  4043aa:	9210      	str	r2, [sp, #64]	; 0x40
  4043ac:	442b      	add	r3, r5
  4043ae:	46ca      	mov	sl, r9
  4043b0:	9303      	str	r3, [sp, #12]
  4043b2:	7823      	ldrb	r3, [r4, #0]
  4043b4:	2b00      	cmp	r3, #0
  4043b6:	f000 83e0 	beq.w	404b7a <_vfiprintf_r+0x88a>
  4043ba:	2000      	movs	r0, #0
  4043bc:	f04f 0300 	mov.w	r3, #0
  4043c0:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4043c4:	f104 0801 	add.w	r8, r4, #1
  4043c8:	7862      	ldrb	r2, [r4, #1]
  4043ca:	4605      	mov	r5, r0
  4043cc:	4606      	mov	r6, r0
  4043ce:	4603      	mov	r3, r0
  4043d0:	f04f 34ff 	mov.w	r4, #4294967295
  4043d4:	f108 0801 	add.w	r8, r8, #1
  4043d8:	f1a2 0120 	sub.w	r1, r2, #32
  4043dc:	2958      	cmp	r1, #88	; 0x58
  4043de:	f200 82de 	bhi.w	40499e <_vfiprintf_r+0x6ae>
  4043e2:	e8df f011 	tbh	[pc, r1, lsl #1]
  4043e6:	0221      	.short	0x0221
  4043e8:	02dc02dc 	.word	0x02dc02dc
  4043ec:	02dc0229 	.word	0x02dc0229
  4043f0:	02dc02dc 	.word	0x02dc02dc
  4043f4:	02dc02dc 	.word	0x02dc02dc
  4043f8:	028902dc 	.word	0x028902dc
  4043fc:	02dc0295 	.word	0x02dc0295
  404400:	02bd00a2 	.word	0x02bd00a2
  404404:	019f02dc 	.word	0x019f02dc
  404408:	01a401a4 	.word	0x01a401a4
  40440c:	01a401a4 	.word	0x01a401a4
  404410:	01a401a4 	.word	0x01a401a4
  404414:	01a401a4 	.word	0x01a401a4
  404418:	02dc01a4 	.word	0x02dc01a4
  40441c:	02dc02dc 	.word	0x02dc02dc
  404420:	02dc02dc 	.word	0x02dc02dc
  404424:	02dc02dc 	.word	0x02dc02dc
  404428:	02dc02dc 	.word	0x02dc02dc
  40442c:	01b202dc 	.word	0x01b202dc
  404430:	02dc02dc 	.word	0x02dc02dc
  404434:	02dc02dc 	.word	0x02dc02dc
  404438:	02dc02dc 	.word	0x02dc02dc
  40443c:	02dc02dc 	.word	0x02dc02dc
  404440:	02dc02dc 	.word	0x02dc02dc
  404444:	02dc0197 	.word	0x02dc0197
  404448:	02dc02dc 	.word	0x02dc02dc
  40444c:	02dc02dc 	.word	0x02dc02dc
  404450:	02dc019b 	.word	0x02dc019b
  404454:	025302dc 	.word	0x025302dc
  404458:	02dc02dc 	.word	0x02dc02dc
  40445c:	02dc02dc 	.word	0x02dc02dc
  404460:	02dc02dc 	.word	0x02dc02dc
  404464:	02dc02dc 	.word	0x02dc02dc
  404468:	02dc02dc 	.word	0x02dc02dc
  40446c:	021b025a 	.word	0x021b025a
  404470:	02dc02dc 	.word	0x02dc02dc
  404474:	026e02dc 	.word	0x026e02dc
  404478:	02dc021b 	.word	0x02dc021b
  40447c:	027302dc 	.word	0x027302dc
  404480:	01f502dc 	.word	0x01f502dc
  404484:	02090182 	.word	0x02090182
  404488:	02dc02d7 	.word	0x02dc02d7
  40448c:	02dc029a 	.word	0x02dc029a
  404490:	02dc00a7 	.word	0x02dc00a7
  404494:	022e02dc 	.word	0x022e02dc
  404498:	f10a 0a08 	add.w	sl, sl, #8
  40449c:	9b03      	ldr	r3, [sp, #12]
  40449e:	442b      	add	r3, r5
  4044a0:	9303      	str	r3, [sp, #12]
  4044a2:	e786      	b.n	4043b2 <_vfiprintf_r+0xc2>
  4044a4:	4659      	mov	r1, fp
  4044a6:	9806      	ldr	r0, [sp, #24]
  4044a8:	f000 fdac 	bl	405004 <__swsetup_r>
  4044ac:	bb18      	cbnz	r0, 4044f6 <_vfiprintf_r+0x206>
  4044ae:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  4044b2:	f001 031a 	and.w	r3, r1, #26
  4044b6:	2b0a      	cmp	r3, #10
  4044b8:	f47f af4b 	bne.w	404352 <_vfiprintf_r+0x62>
  4044bc:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4044c0:	2b00      	cmp	r3, #0
  4044c2:	f6ff af46 	blt.w	404352 <_vfiprintf_r+0x62>
  4044c6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4044ca:	07db      	lsls	r3, r3, #31
  4044cc:	d405      	bmi.n	4044da <_vfiprintf_r+0x1ea>
  4044ce:	058f      	lsls	r7, r1, #22
  4044d0:	d403      	bmi.n	4044da <_vfiprintf_r+0x1ea>
  4044d2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4044d6:	f001 fac3 	bl	405a60 <__retarget_lock_release_recursive>
  4044da:	462b      	mov	r3, r5
  4044dc:	4642      	mov	r2, r8
  4044de:	4659      	mov	r1, fp
  4044e0:	9806      	ldr	r0, [sp, #24]
  4044e2:	f000 fd4d 	bl	404f80 <__sbprintf>
  4044e6:	9003      	str	r0, [sp, #12]
  4044e8:	9803      	ldr	r0, [sp, #12]
  4044ea:	b02d      	add	sp, #180	; 0xb4
  4044ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4044f0:	f000 fef4 	bl	4052dc <__sinit>
  4044f4:	e709      	b.n	40430a <_vfiprintf_r+0x1a>
  4044f6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4044fa:	07d9      	lsls	r1, r3, #31
  4044fc:	d404      	bmi.n	404508 <_vfiprintf_r+0x218>
  4044fe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404502:	059a      	lsls	r2, r3, #22
  404504:	f140 84aa 	bpl.w	404e5c <_vfiprintf_r+0xb6c>
  404508:	f04f 33ff 	mov.w	r3, #4294967295
  40450c:	9303      	str	r3, [sp, #12]
  40450e:	9803      	ldr	r0, [sp, #12]
  404510:	b02d      	add	sp, #180	; 0xb4
  404512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404516:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40451a:	f001 fa9f 	bl	405a5c <__retarget_lock_acquire_recursive>
  40451e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  404522:	b281      	uxth	r1, r0
  404524:	e6fb      	b.n	40431e <_vfiprintf_r+0x2e>
  404526:	4276      	negs	r6, r6
  404528:	9207      	str	r2, [sp, #28]
  40452a:	f043 0304 	orr.w	r3, r3, #4
  40452e:	f898 2000 	ldrb.w	r2, [r8]
  404532:	e74f      	b.n	4043d4 <_vfiprintf_r+0xe4>
  404534:	9608      	str	r6, [sp, #32]
  404536:	069e      	lsls	r6, r3, #26
  404538:	f100 8450 	bmi.w	404ddc <_vfiprintf_r+0xaec>
  40453c:	9907      	ldr	r1, [sp, #28]
  40453e:	06dd      	lsls	r5, r3, #27
  404540:	460a      	mov	r2, r1
  404542:	f100 83ef 	bmi.w	404d24 <_vfiprintf_r+0xa34>
  404546:	0658      	lsls	r0, r3, #25
  404548:	f140 83ec 	bpl.w	404d24 <_vfiprintf_r+0xa34>
  40454c:	880e      	ldrh	r6, [r1, #0]
  40454e:	3104      	adds	r1, #4
  404550:	2700      	movs	r7, #0
  404552:	2201      	movs	r2, #1
  404554:	9107      	str	r1, [sp, #28]
  404556:	f04f 0100 	mov.w	r1, #0
  40455a:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40455e:	2500      	movs	r5, #0
  404560:	1c61      	adds	r1, r4, #1
  404562:	f000 8116 	beq.w	404792 <_vfiprintf_r+0x4a2>
  404566:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  40456a:	9102      	str	r1, [sp, #8]
  40456c:	ea56 0107 	orrs.w	r1, r6, r7
  404570:	f040 8114 	bne.w	40479c <_vfiprintf_r+0x4ac>
  404574:	2c00      	cmp	r4, #0
  404576:	f040 835c 	bne.w	404c32 <_vfiprintf_r+0x942>
  40457a:	2a00      	cmp	r2, #0
  40457c:	f040 83b7 	bne.w	404cee <_vfiprintf_r+0x9fe>
  404580:	f013 0301 	ands.w	r3, r3, #1
  404584:	9305      	str	r3, [sp, #20]
  404586:	f000 8457 	beq.w	404e38 <_vfiprintf_r+0xb48>
  40458a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40458e:	2330      	movs	r3, #48	; 0x30
  404590:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  404594:	9b05      	ldr	r3, [sp, #20]
  404596:	42a3      	cmp	r3, r4
  404598:	bfb8      	it	lt
  40459a:	4623      	movlt	r3, r4
  40459c:	9301      	str	r3, [sp, #4]
  40459e:	b10d      	cbz	r5, 4045a4 <_vfiprintf_r+0x2b4>
  4045a0:	3301      	adds	r3, #1
  4045a2:	9301      	str	r3, [sp, #4]
  4045a4:	9b02      	ldr	r3, [sp, #8]
  4045a6:	f013 0302 	ands.w	r3, r3, #2
  4045aa:	9309      	str	r3, [sp, #36]	; 0x24
  4045ac:	d002      	beq.n	4045b4 <_vfiprintf_r+0x2c4>
  4045ae:	9b01      	ldr	r3, [sp, #4]
  4045b0:	3302      	adds	r3, #2
  4045b2:	9301      	str	r3, [sp, #4]
  4045b4:	9b02      	ldr	r3, [sp, #8]
  4045b6:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4045ba:	930a      	str	r3, [sp, #40]	; 0x28
  4045bc:	f040 8217 	bne.w	4049ee <_vfiprintf_r+0x6fe>
  4045c0:	9b08      	ldr	r3, [sp, #32]
  4045c2:	9a01      	ldr	r2, [sp, #4]
  4045c4:	1a9d      	subs	r5, r3, r2
  4045c6:	2d00      	cmp	r5, #0
  4045c8:	f340 8211 	ble.w	4049ee <_vfiprintf_r+0x6fe>
  4045cc:	2d10      	cmp	r5, #16
  4045ce:	f340 8490 	ble.w	404ef2 <_vfiprintf_r+0xc02>
  4045d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4045d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4045d6:	4ec4      	ldr	r6, [pc, #784]	; (4048e8 <_vfiprintf_r+0x5f8>)
  4045d8:	46d6      	mov	lr, sl
  4045da:	2710      	movs	r7, #16
  4045dc:	46a2      	mov	sl, r4
  4045de:	4619      	mov	r1, r3
  4045e0:	9c06      	ldr	r4, [sp, #24]
  4045e2:	e007      	b.n	4045f4 <_vfiprintf_r+0x304>
  4045e4:	f101 0c02 	add.w	ip, r1, #2
  4045e8:	f10e 0e08 	add.w	lr, lr, #8
  4045ec:	4601      	mov	r1, r0
  4045ee:	3d10      	subs	r5, #16
  4045f0:	2d10      	cmp	r5, #16
  4045f2:	dd11      	ble.n	404618 <_vfiprintf_r+0x328>
  4045f4:	1c48      	adds	r0, r1, #1
  4045f6:	3210      	adds	r2, #16
  4045f8:	2807      	cmp	r0, #7
  4045fa:	9211      	str	r2, [sp, #68]	; 0x44
  4045fc:	e88e 00c0 	stmia.w	lr, {r6, r7}
  404600:	9010      	str	r0, [sp, #64]	; 0x40
  404602:	ddef      	ble.n	4045e4 <_vfiprintf_r+0x2f4>
  404604:	2a00      	cmp	r2, #0
  404606:	f040 81e4 	bne.w	4049d2 <_vfiprintf_r+0x6e2>
  40460a:	3d10      	subs	r5, #16
  40460c:	2d10      	cmp	r5, #16
  40460e:	4611      	mov	r1, r2
  404610:	f04f 0c01 	mov.w	ip, #1
  404614:	46ce      	mov	lr, r9
  404616:	dced      	bgt.n	4045f4 <_vfiprintf_r+0x304>
  404618:	4654      	mov	r4, sl
  40461a:	4661      	mov	r1, ip
  40461c:	46f2      	mov	sl, lr
  40461e:	442a      	add	r2, r5
  404620:	2907      	cmp	r1, #7
  404622:	9211      	str	r2, [sp, #68]	; 0x44
  404624:	f8ca 6000 	str.w	r6, [sl]
  404628:	f8ca 5004 	str.w	r5, [sl, #4]
  40462c:	9110      	str	r1, [sp, #64]	; 0x40
  40462e:	f300 82ec 	bgt.w	404c0a <_vfiprintf_r+0x91a>
  404632:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404636:	f10a 0a08 	add.w	sl, sl, #8
  40463a:	1c48      	adds	r0, r1, #1
  40463c:	2d00      	cmp	r5, #0
  40463e:	f040 81de 	bne.w	4049fe <_vfiprintf_r+0x70e>
  404642:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404644:	2b00      	cmp	r3, #0
  404646:	f000 81f8 	beq.w	404a3a <_vfiprintf_r+0x74a>
  40464a:	3202      	adds	r2, #2
  40464c:	a90e      	add	r1, sp, #56	; 0x38
  40464e:	2302      	movs	r3, #2
  404650:	2807      	cmp	r0, #7
  404652:	9211      	str	r2, [sp, #68]	; 0x44
  404654:	9010      	str	r0, [sp, #64]	; 0x40
  404656:	e88a 000a 	stmia.w	sl, {r1, r3}
  40465a:	f340 81ea 	ble.w	404a32 <_vfiprintf_r+0x742>
  40465e:	2a00      	cmp	r2, #0
  404660:	f040 838c 	bne.w	404d7c <_vfiprintf_r+0xa8c>
  404664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404666:	2b80      	cmp	r3, #128	; 0x80
  404668:	f04f 0001 	mov.w	r0, #1
  40466c:	4611      	mov	r1, r2
  40466e:	46ca      	mov	sl, r9
  404670:	f040 81e7 	bne.w	404a42 <_vfiprintf_r+0x752>
  404674:	9b08      	ldr	r3, [sp, #32]
  404676:	9d01      	ldr	r5, [sp, #4]
  404678:	1b5e      	subs	r6, r3, r5
  40467a:	2e00      	cmp	r6, #0
  40467c:	f340 81e1 	ble.w	404a42 <_vfiprintf_r+0x752>
  404680:	2e10      	cmp	r6, #16
  404682:	4d9a      	ldr	r5, [pc, #616]	; (4048ec <_vfiprintf_r+0x5fc>)
  404684:	f340 8450 	ble.w	404f28 <_vfiprintf_r+0xc38>
  404688:	46d4      	mov	ip, sl
  40468a:	2710      	movs	r7, #16
  40468c:	46a2      	mov	sl, r4
  40468e:	9c06      	ldr	r4, [sp, #24]
  404690:	e007      	b.n	4046a2 <_vfiprintf_r+0x3b2>
  404692:	f101 0e02 	add.w	lr, r1, #2
  404696:	f10c 0c08 	add.w	ip, ip, #8
  40469a:	4601      	mov	r1, r0
  40469c:	3e10      	subs	r6, #16
  40469e:	2e10      	cmp	r6, #16
  4046a0:	dd11      	ble.n	4046c6 <_vfiprintf_r+0x3d6>
  4046a2:	1c48      	adds	r0, r1, #1
  4046a4:	3210      	adds	r2, #16
  4046a6:	2807      	cmp	r0, #7
  4046a8:	9211      	str	r2, [sp, #68]	; 0x44
  4046aa:	e88c 00a0 	stmia.w	ip, {r5, r7}
  4046ae:	9010      	str	r0, [sp, #64]	; 0x40
  4046b0:	ddef      	ble.n	404692 <_vfiprintf_r+0x3a2>
  4046b2:	2a00      	cmp	r2, #0
  4046b4:	f040 829d 	bne.w	404bf2 <_vfiprintf_r+0x902>
  4046b8:	3e10      	subs	r6, #16
  4046ba:	2e10      	cmp	r6, #16
  4046bc:	f04f 0e01 	mov.w	lr, #1
  4046c0:	4611      	mov	r1, r2
  4046c2:	46cc      	mov	ip, r9
  4046c4:	dced      	bgt.n	4046a2 <_vfiprintf_r+0x3b2>
  4046c6:	4654      	mov	r4, sl
  4046c8:	46e2      	mov	sl, ip
  4046ca:	4432      	add	r2, r6
  4046cc:	f1be 0f07 	cmp.w	lr, #7
  4046d0:	9211      	str	r2, [sp, #68]	; 0x44
  4046d2:	e88a 0060 	stmia.w	sl, {r5, r6}
  4046d6:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4046da:	f300 8369 	bgt.w	404db0 <_vfiprintf_r+0xac0>
  4046de:	f10a 0a08 	add.w	sl, sl, #8
  4046e2:	f10e 0001 	add.w	r0, lr, #1
  4046e6:	4671      	mov	r1, lr
  4046e8:	e1ab      	b.n	404a42 <_vfiprintf_r+0x752>
  4046ea:	9608      	str	r6, [sp, #32]
  4046ec:	f013 0220 	ands.w	r2, r3, #32
  4046f0:	f040 838c 	bne.w	404e0c <_vfiprintf_r+0xb1c>
  4046f4:	f013 0110 	ands.w	r1, r3, #16
  4046f8:	f040 831a 	bne.w	404d30 <_vfiprintf_r+0xa40>
  4046fc:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  404700:	f000 8316 	beq.w	404d30 <_vfiprintf_r+0xa40>
  404704:	9807      	ldr	r0, [sp, #28]
  404706:	460a      	mov	r2, r1
  404708:	4601      	mov	r1, r0
  40470a:	3104      	adds	r1, #4
  40470c:	8806      	ldrh	r6, [r0, #0]
  40470e:	9107      	str	r1, [sp, #28]
  404710:	2700      	movs	r7, #0
  404712:	e720      	b.n	404556 <_vfiprintf_r+0x266>
  404714:	9608      	str	r6, [sp, #32]
  404716:	f043 0310 	orr.w	r3, r3, #16
  40471a:	e7e7      	b.n	4046ec <_vfiprintf_r+0x3fc>
  40471c:	9608      	str	r6, [sp, #32]
  40471e:	f043 0310 	orr.w	r3, r3, #16
  404722:	e708      	b.n	404536 <_vfiprintf_r+0x246>
  404724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404728:	f898 2000 	ldrb.w	r2, [r8]
  40472c:	e652      	b.n	4043d4 <_vfiprintf_r+0xe4>
  40472e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404732:	2600      	movs	r6, #0
  404734:	f818 2b01 	ldrb.w	r2, [r8], #1
  404738:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40473c:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  404740:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404744:	2909      	cmp	r1, #9
  404746:	d9f5      	bls.n	404734 <_vfiprintf_r+0x444>
  404748:	e646      	b.n	4043d8 <_vfiprintf_r+0xe8>
  40474a:	9608      	str	r6, [sp, #32]
  40474c:	2800      	cmp	r0, #0
  40474e:	f040 8408 	bne.w	404f62 <_vfiprintf_r+0xc72>
  404752:	f043 0310 	orr.w	r3, r3, #16
  404756:	069e      	lsls	r6, r3, #26
  404758:	f100 834c 	bmi.w	404df4 <_vfiprintf_r+0xb04>
  40475c:	06dd      	lsls	r5, r3, #27
  40475e:	f100 82f3 	bmi.w	404d48 <_vfiprintf_r+0xa58>
  404762:	0658      	lsls	r0, r3, #25
  404764:	f140 82f0 	bpl.w	404d48 <_vfiprintf_r+0xa58>
  404768:	9d07      	ldr	r5, [sp, #28]
  40476a:	f9b5 6000 	ldrsh.w	r6, [r5]
  40476e:	462a      	mov	r2, r5
  404770:	17f7      	asrs	r7, r6, #31
  404772:	3204      	adds	r2, #4
  404774:	4630      	mov	r0, r6
  404776:	4639      	mov	r1, r7
  404778:	9207      	str	r2, [sp, #28]
  40477a:	2800      	cmp	r0, #0
  40477c:	f171 0200 	sbcs.w	r2, r1, #0
  404780:	f2c0 835d 	blt.w	404e3e <_vfiprintf_r+0xb4e>
  404784:	1c61      	adds	r1, r4, #1
  404786:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40478a:	f04f 0201 	mov.w	r2, #1
  40478e:	f47f aeea 	bne.w	404566 <_vfiprintf_r+0x276>
  404792:	ea56 0107 	orrs.w	r1, r6, r7
  404796:	f000 824d 	beq.w	404c34 <_vfiprintf_r+0x944>
  40479a:	9302      	str	r3, [sp, #8]
  40479c:	2a01      	cmp	r2, #1
  40479e:	f000 828c 	beq.w	404cba <_vfiprintf_r+0x9ca>
  4047a2:	2a02      	cmp	r2, #2
  4047a4:	f040 825c 	bne.w	404c60 <_vfiprintf_r+0x970>
  4047a8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4047aa:	46cb      	mov	fp, r9
  4047ac:	0933      	lsrs	r3, r6, #4
  4047ae:	f006 010f 	and.w	r1, r6, #15
  4047b2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4047b6:	093a      	lsrs	r2, r7, #4
  4047b8:	461e      	mov	r6, r3
  4047ba:	4617      	mov	r7, r2
  4047bc:	5c43      	ldrb	r3, [r0, r1]
  4047be:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4047c2:	ea56 0307 	orrs.w	r3, r6, r7
  4047c6:	d1f1      	bne.n	4047ac <_vfiprintf_r+0x4bc>
  4047c8:	eba9 030b 	sub.w	r3, r9, fp
  4047cc:	9305      	str	r3, [sp, #20]
  4047ce:	e6e1      	b.n	404594 <_vfiprintf_r+0x2a4>
  4047d0:	2800      	cmp	r0, #0
  4047d2:	f040 83c0 	bne.w	404f56 <_vfiprintf_r+0xc66>
  4047d6:	0699      	lsls	r1, r3, #26
  4047d8:	f100 8367 	bmi.w	404eaa <_vfiprintf_r+0xbba>
  4047dc:	06da      	lsls	r2, r3, #27
  4047de:	f100 80f1 	bmi.w	4049c4 <_vfiprintf_r+0x6d4>
  4047e2:	065b      	lsls	r3, r3, #25
  4047e4:	f140 80ee 	bpl.w	4049c4 <_vfiprintf_r+0x6d4>
  4047e8:	9a07      	ldr	r2, [sp, #28]
  4047ea:	6813      	ldr	r3, [r2, #0]
  4047ec:	3204      	adds	r2, #4
  4047ee:	9207      	str	r2, [sp, #28]
  4047f0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4047f4:	801a      	strh	r2, [r3, #0]
  4047f6:	e5b8      	b.n	40436a <_vfiprintf_r+0x7a>
  4047f8:	9807      	ldr	r0, [sp, #28]
  4047fa:	4a3d      	ldr	r2, [pc, #244]	; (4048f0 <_vfiprintf_r+0x600>)
  4047fc:	9608      	str	r6, [sp, #32]
  4047fe:	920b      	str	r2, [sp, #44]	; 0x2c
  404800:	6806      	ldr	r6, [r0, #0]
  404802:	2278      	movs	r2, #120	; 0x78
  404804:	2130      	movs	r1, #48	; 0x30
  404806:	3004      	adds	r0, #4
  404808:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40480c:	f043 0302 	orr.w	r3, r3, #2
  404810:	9007      	str	r0, [sp, #28]
  404812:	2700      	movs	r7, #0
  404814:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404818:	2202      	movs	r2, #2
  40481a:	e69c      	b.n	404556 <_vfiprintf_r+0x266>
  40481c:	9608      	str	r6, [sp, #32]
  40481e:	2800      	cmp	r0, #0
  404820:	d099      	beq.n	404756 <_vfiprintf_r+0x466>
  404822:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404826:	e796      	b.n	404756 <_vfiprintf_r+0x466>
  404828:	f898 2000 	ldrb.w	r2, [r8]
  40482c:	2d00      	cmp	r5, #0
  40482e:	f47f add1 	bne.w	4043d4 <_vfiprintf_r+0xe4>
  404832:	2001      	movs	r0, #1
  404834:	2520      	movs	r5, #32
  404836:	e5cd      	b.n	4043d4 <_vfiprintf_r+0xe4>
  404838:	f043 0301 	orr.w	r3, r3, #1
  40483c:	f898 2000 	ldrb.w	r2, [r8]
  404840:	e5c8      	b.n	4043d4 <_vfiprintf_r+0xe4>
  404842:	9608      	str	r6, [sp, #32]
  404844:	2800      	cmp	r0, #0
  404846:	f040 8393 	bne.w	404f70 <_vfiprintf_r+0xc80>
  40484a:	4929      	ldr	r1, [pc, #164]	; (4048f0 <_vfiprintf_r+0x600>)
  40484c:	910b      	str	r1, [sp, #44]	; 0x2c
  40484e:	069f      	lsls	r7, r3, #26
  404850:	f100 82e8 	bmi.w	404e24 <_vfiprintf_r+0xb34>
  404854:	9807      	ldr	r0, [sp, #28]
  404856:	06de      	lsls	r6, r3, #27
  404858:	4601      	mov	r1, r0
  40485a:	f100 8270 	bmi.w	404d3e <_vfiprintf_r+0xa4e>
  40485e:	065d      	lsls	r5, r3, #25
  404860:	f140 826d 	bpl.w	404d3e <_vfiprintf_r+0xa4e>
  404864:	3104      	adds	r1, #4
  404866:	8806      	ldrh	r6, [r0, #0]
  404868:	9107      	str	r1, [sp, #28]
  40486a:	2700      	movs	r7, #0
  40486c:	07d8      	lsls	r0, r3, #31
  40486e:	f140 8222 	bpl.w	404cb6 <_vfiprintf_r+0x9c6>
  404872:	ea56 0107 	orrs.w	r1, r6, r7
  404876:	f000 821e 	beq.w	404cb6 <_vfiprintf_r+0x9c6>
  40487a:	2130      	movs	r1, #48	; 0x30
  40487c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  404880:	f043 0302 	orr.w	r3, r3, #2
  404884:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404888:	2202      	movs	r2, #2
  40488a:	e664      	b.n	404556 <_vfiprintf_r+0x266>
  40488c:	9608      	str	r6, [sp, #32]
  40488e:	2800      	cmp	r0, #0
  404890:	f040 836b 	bne.w	404f6a <_vfiprintf_r+0xc7a>
  404894:	4917      	ldr	r1, [pc, #92]	; (4048f4 <_vfiprintf_r+0x604>)
  404896:	910b      	str	r1, [sp, #44]	; 0x2c
  404898:	e7d9      	b.n	40484e <_vfiprintf_r+0x55e>
  40489a:	9907      	ldr	r1, [sp, #28]
  40489c:	9608      	str	r6, [sp, #32]
  40489e:	680a      	ldr	r2, [r1, #0]
  4048a0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4048a4:	f04f 0000 	mov.w	r0, #0
  4048a8:	460a      	mov	r2, r1
  4048aa:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4048ae:	3204      	adds	r2, #4
  4048b0:	2001      	movs	r0, #1
  4048b2:	9001      	str	r0, [sp, #4]
  4048b4:	9207      	str	r2, [sp, #28]
  4048b6:	9005      	str	r0, [sp, #20]
  4048b8:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4048bc:	9302      	str	r3, [sp, #8]
  4048be:	2400      	movs	r4, #0
  4048c0:	e670      	b.n	4045a4 <_vfiprintf_r+0x2b4>
  4048c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4048c6:	f898 2000 	ldrb.w	r2, [r8]
  4048ca:	e583      	b.n	4043d4 <_vfiprintf_r+0xe4>
  4048cc:	f898 2000 	ldrb.w	r2, [r8]
  4048d0:	2a6c      	cmp	r2, #108	; 0x6c
  4048d2:	bf03      	ittte	eq
  4048d4:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4048d8:	f043 0320 	orreq.w	r3, r3, #32
  4048dc:	f108 0801 	addeq.w	r8, r8, #1
  4048e0:	f043 0310 	orrne.w	r3, r3, #16
  4048e4:	e576      	b.n	4043d4 <_vfiprintf_r+0xe4>
  4048e6:	bf00      	nop
  4048e8:	004072b0 	.word	0x004072b0
  4048ec:	004072c0 	.word	0x004072c0
  4048f0:	00407294 	.word	0x00407294
  4048f4:	00407280 	.word	0x00407280
  4048f8:	9907      	ldr	r1, [sp, #28]
  4048fa:	680e      	ldr	r6, [r1, #0]
  4048fc:	460a      	mov	r2, r1
  4048fe:	2e00      	cmp	r6, #0
  404900:	f102 0204 	add.w	r2, r2, #4
  404904:	f6ff ae0f 	blt.w	404526 <_vfiprintf_r+0x236>
  404908:	9207      	str	r2, [sp, #28]
  40490a:	f898 2000 	ldrb.w	r2, [r8]
  40490e:	e561      	b.n	4043d4 <_vfiprintf_r+0xe4>
  404910:	f898 2000 	ldrb.w	r2, [r8]
  404914:	2001      	movs	r0, #1
  404916:	252b      	movs	r5, #43	; 0x2b
  404918:	e55c      	b.n	4043d4 <_vfiprintf_r+0xe4>
  40491a:	9907      	ldr	r1, [sp, #28]
  40491c:	9608      	str	r6, [sp, #32]
  40491e:	f8d1 b000 	ldr.w	fp, [r1]
  404922:	f04f 0200 	mov.w	r2, #0
  404926:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40492a:	1d0e      	adds	r6, r1, #4
  40492c:	f1bb 0f00 	cmp.w	fp, #0
  404930:	f000 82e5 	beq.w	404efe <_vfiprintf_r+0xc0e>
  404934:	1c67      	adds	r7, r4, #1
  404936:	f000 82c4 	beq.w	404ec2 <_vfiprintf_r+0xbd2>
  40493a:	4622      	mov	r2, r4
  40493c:	2100      	movs	r1, #0
  40493e:	4658      	mov	r0, fp
  404940:	9301      	str	r3, [sp, #4]
  404942:	f001 f91d 	bl	405b80 <memchr>
  404946:	9b01      	ldr	r3, [sp, #4]
  404948:	2800      	cmp	r0, #0
  40494a:	f000 82e5 	beq.w	404f18 <_vfiprintf_r+0xc28>
  40494e:	eba0 020b 	sub.w	r2, r0, fp
  404952:	9205      	str	r2, [sp, #20]
  404954:	9607      	str	r6, [sp, #28]
  404956:	9302      	str	r3, [sp, #8]
  404958:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40495c:	2400      	movs	r4, #0
  40495e:	e619      	b.n	404594 <_vfiprintf_r+0x2a4>
  404960:	f898 2000 	ldrb.w	r2, [r8]
  404964:	2a2a      	cmp	r2, #42	; 0x2a
  404966:	f108 0701 	add.w	r7, r8, #1
  40496a:	f000 82e9 	beq.w	404f40 <_vfiprintf_r+0xc50>
  40496e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404972:	2909      	cmp	r1, #9
  404974:	46b8      	mov	r8, r7
  404976:	f04f 0400 	mov.w	r4, #0
  40497a:	f63f ad2d 	bhi.w	4043d8 <_vfiprintf_r+0xe8>
  40497e:	f818 2b01 	ldrb.w	r2, [r8], #1
  404982:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404986:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  40498a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40498e:	2909      	cmp	r1, #9
  404990:	d9f5      	bls.n	40497e <_vfiprintf_r+0x68e>
  404992:	e521      	b.n	4043d8 <_vfiprintf_r+0xe8>
  404994:	f043 0320 	orr.w	r3, r3, #32
  404998:	f898 2000 	ldrb.w	r2, [r8]
  40499c:	e51a      	b.n	4043d4 <_vfiprintf_r+0xe4>
  40499e:	9608      	str	r6, [sp, #32]
  4049a0:	2800      	cmp	r0, #0
  4049a2:	f040 82db 	bne.w	404f5c <_vfiprintf_r+0xc6c>
  4049a6:	2a00      	cmp	r2, #0
  4049a8:	f000 80e7 	beq.w	404b7a <_vfiprintf_r+0x88a>
  4049ac:	2101      	movs	r1, #1
  4049ae:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4049b2:	f04f 0200 	mov.w	r2, #0
  4049b6:	9101      	str	r1, [sp, #4]
  4049b8:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4049bc:	9105      	str	r1, [sp, #20]
  4049be:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4049c2:	e77b      	b.n	4048bc <_vfiprintf_r+0x5cc>
  4049c4:	9a07      	ldr	r2, [sp, #28]
  4049c6:	6813      	ldr	r3, [r2, #0]
  4049c8:	3204      	adds	r2, #4
  4049ca:	9207      	str	r2, [sp, #28]
  4049cc:	9a03      	ldr	r2, [sp, #12]
  4049ce:	601a      	str	r2, [r3, #0]
  4049d0:	e4cb      	b.n	40436a <_vfiprintf_r+0x7a>
  4049d2:	aa0f      	add	r2, sp, #60	; 0x3c
  4049d4:	9904      	ldr	r1, [sp, #16]
  4049d6:	4620      	mov	r0, r4
  4049d8:	f7ff fc4a 	bl	404270 <__sprint_r.part.0>
  4049dc:	2800      	cmp	r0, #0
  4049de:	f040 8139 	bne.w	404c54 <_vfiprintf_r+0x964>
  4049e2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4049e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4049e6:	f101 0c01 	add.w	ip, r1, #1
  4049ea:	46ce      	mov	lr, r9
  4049ec:	e5ff      	b.n	4045ee <_vfiprintf_r+0x2fe>
  4049ee:	9910      	ldr	r1, [sp, #64]	; 0x40
  4049f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4049f2:	1c48      	adds	r0, r1, #1
  4049f4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4049f8:	2d00      	cmp	r5, #0
  4049fa:	f43f ae22 	beq.w	404642 <_vfiprintf_r+0x352>
  4049fe:	3201      	adds	r2, #1
  404a00:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  404a04:	2101      	movs	r1, #1
  404a06:	2807      	cmp	r0, #7
  404a08:	9211      	str	r2, [sp, #68]	; 0x44
  404a0a:	9010      	str	r0, [sp, #64]	; 0x40
  404a0c:	f8ca 5000 	str.w	r5, [sl]
  404a10:	f8ca 1004 	str.w	r1, [sl, #4]
  404a14:	f340 8108 	ble.w	404c28 <_vfiprintf_r+0x938>
  404a18:	2a00      	cmp	r2, #0
  404a1a:	f040 81bc 	bne.w	404d96 <_vfiprintf_r+0xaa6>
  404a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404a20:	2b00      	cmp	r3, #0
  404a22:	f43f ae1f 	beq.w	404664 <_vfiprintf_r+0x374>
  404a26:	ab0e      	add	r3, sp, #56	; 0x38
  404a28:	2202      	movs	r2, #2
  404a2a:	4608      	mov	r0, r1
  404a2c:	931c      	str	r3, [sp, #112]	; 0x70
  404a2e:	921d      	str	r2, [sp, #116]	; 0x74
  404a30:	46ca      	mov	sl, r9
  404a32:	4601      	mov	r1, r0
  404a34:	f10a 0a08 	add.w	sl, sl, #8
  404a38:	3001      	adds	r0, #1
  404a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404a3c:	2b80      	cmp	r3, #128	; 0x80
  404a3e:	f43f ae19 	beq.w	404674 <_vfiprintf_r+0x384>
  404a42:	9b05      	ldr	r3, [sp, #20]
  404a44:	1ae4      	subs	r4, r4, r3
  404a46:	2c00      	cmp	r4, #0
  404a48:	dd2e      	ble.n	404aa8 <_vfiprintf_r+0x7b8>
  404a4a:	2c10      	cmp	r4, #16
  404a4c:	4db3      	ldr	r5, [pc, #716]	; (404d1c <_vfiprintf_r+0xa2c>)
  404a4e:	dd1e      	ble.n	404a8e <_vfiprintf_r+0x79e>
  404a50:	46d6      	mov	lr, sl
  404a52:	2610      	movs	r6, #16
  404a54:	9f06      	ldr	r7, [sp, #24]
  404a56:	f8dd a010 	ldr.w	sl, [sp, #16]
  404a5a:	e006      	b.n	404a6a <_vfiprintf_r+0x77a>
  404a5c:	1c88      	adds	r0, r1, #2
  404a5e:	f10e 0e08 	add.w	lr, lr, #8
  404a62:	4619      	mov	r1, r3
  404a64:	3c10      	subs	r4, #16
  404a66:	2c10      	cmp	r4, #16
  404a68:	dd10      	ble.n	404a8c <_vfiprintf_r+0x79c>
  404a6a:	1c4b      	adds	r3, r1, #1
  404a6c:	3210      	adds	r2, #16
  404a6e:	2b07      	cmp	r3, #7
  404a70:	9211      	str	r2, [sp, #68]	; 0x44
  404a72:	e88e 0060 	stmia.w	lr, {r5, r6}
  404a76:	9310      	str	r3, [sp, #64]	; 0x40
  404a78:	ddf0      	ble.n	404a5c <_vfiprintf_r+0x76c>
  404a7a:	2a00      	cmp	r2, #0
  404a7c:	d165      	bne.n	404b4a <_vfiprintf_r+0x85a>
  404a7e:	3c10      	subs	r4, #16
  404a80:	2c10      	cmp	r4, #16
  404a82:	f04f 0001 	mov.w	r0, #1
  404a86:	4611      	mov	r1, r2
  404a88:	46ce      	mov	lr, r9
  404a8a:	dcee      	bgt.n	404a6a <_vfiprintf_r+0x77a>
  404a8c:	46f2      	mov	sl, lr
  404a8e:	4422      	add	r2, r4
  404a90:	2807      	cmp	r0, #7
  404a92:	9211      	str	r2, [sp, #68]	; 0x44
  404a94:	f8ca 5000 	str.w	r5, [sl]
  404a98:	f8ca 4004 	str.w	r4, [sl, #4]
  404a9c:	9010      	str	r0, [sp, #64]	; 0x40
  404a9e:	f300 8085 	bgt.w	404bac <_vfiprintf_r+0x8bc>
  404aa2:	f10a 0a08 	add.w	sl, sl, #8
  404aa6:	3001      	adds	r0, #1
  404aa8:	9905      	ldr	r1, [sp, #20]
  404aaa:	f8ca b000 	str.w	fp, [sl]
  404aae:	440a      	add	r2, r1
  404ab0:	2807      	cmp	r0, #7
  404ab2:	9211      	str	r2, [sp, #68]	; 0x44
  404ab4:	f8ca 1004 	str.w	r1, [sl, #4]
  404ab8:	9010      	str	r0, [sp, #64]	; 0x40
  404aba:	f340 8082 	ble.w	404bc2 <_vfiprintf_r+0x8d2>
  404abe:	2a00      	cmp	r2, #0
  404ac0:	f040 8118 	bne.w	404cf4 <_vfiprintf_r+0xa04>
  404ac4:	9b02      	ldr	r3, [sp, #8]
  404ac6:	9210      	str	r2, [sp, #64]	; 0x40
  404ac8:	0758      	lsls	r0, r3, #29
  404aca:	d535      	bpl.n	404b38 <_vfiprintf_r+0x848>
  404acc:	9b08      	ldr	r3, [sp, #32]
  404ace:	9901      	ldr	r1, [sp, #4]
  404ad0:	1a5c      	subs	r4, r3, r1
  404ad2:	2c00      	cmp	r4, #0
  404ad4:	f340 80e7 	ble.w	404ca6 <_vfiprintf_r+0x9b6>
  404ad8:	46ca      	mov	sl, r9
  404ada:	2c10      	cmp	r4, #16
  404adc:	f340 8218 	ble.w	404f10 <_vfiprintf_r+0xc20>
  404ae0:	9910      	ldr	r1, [sp, #64]	; 0x40
  404ae2:	4e8f      	ldr	r6, [pc, #572]	; (404d20 <_vfiprintf_r+0xa30>)
  404ae4:	9f06      	ldr	r7, [sp, #24]
  404ae6:	f8dd b010 	ldr.w	fp, [sp, #16]
  404aea:	2510      	movs	r5, #16
  404aec:	e006      	b.n	404afc <_vfiprintf_r+0x80c>
  404aee:	1c88      	adds	r0, r1, #2
  404af0:	f10a 0a08 	add.w	sl, sl, #8
  404af4:	4619      	mov	r1, r3
  404af6:	3c10      	subs	r4, #16
  404af8:	2c10      	cmp	r4, #16
  404afa:	dd11      	ble.n	404b20 <_vfiprintf_r+0x830>
  404afc:	1c4b      	adds	r3, r1, #1
  404afe:	3210      	adds	r2, #16
  404b00:	2b07      	cmp	r3, #7
  404b02:	9211      	str	r2, [sp, #68]	; 0x44
  404b04:	f8ca 6000 	str.w	r6, [sl]
  404b08:	f8ca 5004 	str.w	r5, [sl, #4]
  404b0c:	9310      	str	r3, [sp, #64]	; 0x40
  404b0e:	ddee      	ble.n	404aee <_vfiprintf_r+0x7fe>
  404b10:	bb42      	cbnz	r2, 404b64 <_vfiprintf_r+0x874>
  404b12:	3c10      	subs	r4, #16
  404b14:	2c10      	cmp	r4, #16
  404b16:	f04f 0001 	mov.w	r0, #1
  404b1a:	4611      	mov	r1, r2
  404b1c:	46ca      	mov	sl, r9
  404b1e:	dced      	bgt.n	404afc <_vfiprintf_r+0x80c>
  404b20:	4422      	add	r2, r4
  404b22:	2807      	cmp	r0, #7
  404b24:	9211      	str	r2, [sp, #68]	; 0x44
  404b26:	f8ca 6000 	str.w	r6, [sl]
  404b2a:	f8ca 4004 	str.w	r4, [sl, #4]
  404b2e:	9010      	str	r0, [sp, #64]	; 0x40
  404b30:	dd51      	ble.n	404bd6 <_vfiprintf_r+0x8e6>
  404b32:	2a00      	cmp	r2, #0
  404b34:	f040 819b 	bne.w	404e6e <_vfiprintf_r+0xb7e>
  404b38:	9b03      	ldr	r3, [sp, #12]
  404b3a:	9a08      	ldr	r2, [sp, #32]
  404b3c:	9901      	ldr	r1, [sp, #4]
  404b3e:	428a      	cmp	r2, r1
  404b40:	bfac      	ite	ge
  404b42:	189b      	addge	r3, r3, r2
  404b44:	185b      	addlt	r3, r3, r1
  404b46:	9303      	str	r3, [sp, #12]
  404b48:	e04e      	b.n	404be8 <_vfiprintf_r+0x8f8>
  404b4a:	aa0f      	add	r2, sp, #60	; 0x3c
  404b4c:	4651      	mov	r1, sl
  404b4e:	4638      	mov	r0, r7
  404b50:	f7ff fb8e 	bl	404270 <__sprint_r.part.0>
  404b54:	2800      	cmp	r0, #0
  404b56:	f040 813f 	bne.w	404dd8 <_vfiprintf_r+0xae8>
  404b5a:	9910      	ldr	r1, [sp, #64]	; 0x40
  404b5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404b5e:	1c48      	adds	r0, r1, #1
  404b60:	46ce      	mov	lr, r9
  404b62:	e77f      	b.n	404a64 <_vfiprintf_r+0x774>
  404b64:	aa0f      	add	r2, sp, #60	; 0x3c
  404b66:	4659      	mov	r1, fp
  404b68:	4638      	mov	r0, r7
  404b6a:	f7ff fb81 	bl	404270 <__sprint_r.part.0>
  404b6e:	b960      	cbnz	r0, 404b8a <_vfiprintf_r+0x89a>
  404b70:	9910      	ldr	r1, [sp, #64]	; 0x40
  404b72:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404b74:	1c48      	adds	r0, r1, #1
  404b76:	46ca      	mov	sl, r9
  404b78:	e7bd      	b.n	404af6 <_vfiprintf_r+0x806>
  404b7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404b7c:	f8dd b010 	ldr.w	fp, [sp, #16]
  404b80:	2b00      	cmp	r3, #0
  404b82:	f040 81d4 	bne.w	404f2e <_vfiprintf_r+0xc3e>
  404b86:	2300      	movs	r3, #0
  404b88:	9310      	str	r3, [sp, #64]	; 0x40
  404b8a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404b8e:	f013 0f01 	tst.w	r3, #1
  404b92:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404b96:	d102      	bne.n	404b9e <_vfiprintf_r+0x8ae>
  404b98:	059a      	lsls	r2, r3, #22
  404b9a:	f140 80de 	bpl.w	404d5a <_vfiprintf_r+0xa6a>
  404b9e:	065b      	lsls	r3, r3, #25
  404ba0:	f53f acb2 	bmi.w	404508 <_vfiprintf_r+0x218>
  404ba4:	9803      	ldr	r0, [sp, #12]
  404ba6:	b02d      	add	sp, #180	; 0xb4
  404ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404bac:	2a00      	cmp	r2, #0
  404bae:	f040 8106 	bne.w	404dbe <_vfiprintf_r+0xace>
  404bb2:	9a05      	ldr	r2, [sp, #20]
  404bb4:	921d      	str	r2, [sp, #116]	; 0x74
  404bb6:	2301      	movs	r3, #1
  404bb8:	9211      	str	r2, [sp, #68]	; 0x44
  404bba:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  404bbe:	9310      	str	r3, [sp, #64]	; 0x40
  404bc0:	46ca      	mov	sl, r9
  404bc2:	f10a 0a08 	add.w	sl, sl, #8
  404bc6:	9b02      	ldr	r3, [sp, #8]
  404bc8:	0759      	lsls	r1, r3, #29
  404bca:	d504      	bpl.n	404bd6 <_vfiprintf_r+0x8e6>
  404bcc:	9b08      	ldr	r3, [sp, #32]
  404bce:	9901      	ldr	r1, [sp, #4]
  404bd0:	1a5c      	subs	r4, r3, r1
  404bd2:	2c00      	cmp	r4, #0
  404bd4:	dc81      	bgt.n	404ada <_vfiprintf_r+0x7ea>
  404bd6:	9b03      	ldr	r3, [sp, #12]
  404bd8:	9908      	ldr	r1, [sp, #32]
  404bda:	9801      	ldr	r0, [sp, #4]
  404bdc:	4281      	cmp	r1, r0
  404bde:	bfac      	ite	ge
  404be0:	185b      	addge	r3, r3, r1
  404be2:	181b      	addlt	r3, r3, r0
  404be4:	9303      	str	r3, [sp, #12]
  404be6:	bb72      	cbnz	r2, 404c46 <_vfiprintf_r+0x956>
  404be8:	2300      	movs	r3, #0
  404bea:	9310      	str	r3, [sp, #64]	; 0x40
  404bec:	46ca      	mov	sl, r9
  404bee:	f7ff bbbc 	b.w	40436a <_vfiprintf_r+0x7a>
  404bf2:	aa0f      	add	r2, sp, #60	; 0x3c
  404bf4:	9904      	ldr	r1, [sp, #16]
  404bf6:	4620      	mov	r0, r4
  404bf8:	f7ff fb3a 	bl	404270 <__sprint_r.part.0>
  404bfc:	bb50      	cbnz	r0, 404c54 <_vfiprintf_r+0x964>
  404bfe:	9910      	ldr	r1, [sp, #64]	; 0x40
  404c00:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404c02:	f101 0e01 	add.w	lr, r1, #1
  404c06:	46cc      	mov	ip, r9
  404c08:	e548      	b.n	40469c <_vfiprintf_r+0x3ac>
  404c0a:	2a00      	cmp	r2, #0
  404c0c:	f040 8140 	bne.w	404e90 <_vfiprintf_r+0xba0>
  404c10:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  404c14:	2900      	cmp	r1, #0
  404c16:	f000 811b 	beq.w	404e50 <_vfiprintf_r+0xb60>
  404c1a:	2201      	movs	r2, #1
  404c1c:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  404c20:	4610      	mov	r0, r2
  404c22:	921d      	str	r2, [sp, #116]	; 0x74
  404c24:	911c      	str	r1, [sp, #112]	; 0x70
  404c26:	46ca      	mov	sl, r9
  404c28:	4601      	mov	r1, r0
  404c2a:	f10a 0a08 	add.w	sl, sl, #8
  404c2e:	3001      	adds	r0, #1
  404c30:	e507      	b.n	404642 <_vfiprintf_r+0x352>
  404c32:	9b02      	ldr	r3, [sp, #8]
  404c34:	2a01      	cmp	r2, #1
  404c36:	f000 8098 	beq.w	404d6a <_vfiprintf_r+0xa7a>
  404c3a:	2a02      	cmp	r2, #2
  404c3c:	d10d      	bne.n	404c5a <_vfiprintf_r+0x96a>
  404c3e:	9302      	str	r3, [sp, #8]
  404c40:	2600      	movs	r6, #0
  404c42:	2700      	movs	r7, #0
  404c44:	e5b0      	b.n	4047a8 <_vfiprintf_r+0x4b8>
  404c46:	aa0f      	add	r2, sp, #60	; 0x3c
  404c48:	9904      	ldr	r1, [sp, #16]
  404c4a:	9806      	ldr	r0, [sp, #24]
  404c4c:	f7ff fb10 	bl	404270 <__sprint_r.part.0>
  404c50:	2800      	cmp	r0, #0
  404c52:	d0c9      	beq.n	404be8 <_vfiprintf_r+0x8f8>
  404c54:	f8dd b010 	ldr.w	fp, [sp, #16]
  404c58:	e797      	b.n	404b8a <_vfiprintf_r+0x89a>
  404c5a:	9302      	str	r3, [sp, #8]
  404c5c:	2600      	movs	r6, #0
  404c5e:	2700      	movs	r7, #0
  404c60:	4649      	mov	r1, r9
  404c62:	e000      	b.n	404c66 <_vfiprintf_r+0x976>
  404c64:	4659      	mov	r1, fp
  404c66:	08f2      	lsrs	r2, r6, #3
  404c68:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  404c6c:	08f8      	lsrs	r0, r7, #3
  404c6e:	f006 0307 	and.w	r3, r6, #7
  404c72:	4607      	mov	r7, r0
  404c74:	4616      	mov	r6, r2
  404c76:	3330      	adds	r3, #48	; 0x30
  404c78:	ea56 0207 	orrs.w	r2, r6, r7
  404c7c:	f801 3c01 	strb.w	r3, [r1, #-1]
  404c80:	f101 3bff 	add.w	fp, r1, #4294967295
  404c84:	d1ee      	bne.n	404c64 <_vfiprintf_r+0x974>
  404c86:	9a02      	ldr	r2, [sp, #8]
  404c88:	07d6      	lsls	r6, r2, #31
  404c8a:	f57f ad9d 	bpl.w	4047c8 <_vfiprintf_r+0x4d8>
  404c8e:	2b30      	cmp	r3, #48	; 0x30
  404c90:	f43f ad9a 	beq.w	4047c8 <_vfiprintf_r+0x4d8>
  404c94:	3902      	subs	r1, #2
  404c96:	2330      	movs	r3, #48	; 0x30
  404c98:	f80b 3c01 	strb.w	r3, [fp, #-1]
  404c9c:	eba9 0301 	sub.w	r3, r9, r1
  404ca0:	9305      	str	r3, [sp, #20]
  404ca2:	468b      	mov	fp, r1
  404ca4:	e476      	b.n	404594 <_vfiprintf_r+0x2a4>
  404ca6:	9b03      	ldr	r3, [sp, #12]
  404ca8:	9a08      	ldr	r2, [sp, #32]
  404caa:	428a      	cmp	r2, r1
  404cac:	bfac      	ite	ge
  404cae:	189b      	addge	r3, r3, r2
  404cb0:	185b      	addlt	r3, r3, r1
  404cb2:	9303      	str	r3, [sp, #12]
  404cb4:	e798      	b.n	404be8 <_vfiprintf_r+0x8f8>
  404cb6:	2202      	movs	r2, #2
  404cb8:	e44d      	b.n	404556 <_vfiprintf_r+0x266>
  404cba:	2f00      	cmp	r7, #0
  404cbc:	bf08      	it	eq
  404cbe:	2e0a      	cmpeq	r6, #10
  404cc0:	d352      	bcc.n	404d68 <_vfiprintf_r+0xa78>
  404cc2:	46cb      	mov	fp, r9
  404cc4:	4630      	mov	r0, r6
  404cc6:	4639      	mov	r1, r7
  404cc8:	220a      	movs	r2, #10
  404cca:	2300      	movs	r3, #0
  404ccc:	f001 fc34 	bl	406538 <__aeabi_uldivmod>
  404cd0:	3230      	adds	r2, #48	; 0x30
  404cd2:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  404cd6:	4630      	mov	r0, r6
  404cd8:	4639      	mov	r1, r7
  404cda:	2300      	movs	r3, #0
  404cdc:	220a      	movs	r2, #10
  404cde:	f001 fc2b 	bl	406538 <__aeabi_uldivmod>
  404ce2:	4606      	mov	r6, r0
  404ce4:	460f      	mov	r7, r1
  404ce6:	ea56 0307 	orrs.w	r3, r6, r7
  404cea:	d1eb      	bne.n	404cc4 <_vfiprintf_r+0x9d4>
  404cec:	e56c      	b.n	4047c8 <_vfiprintf_r+0x4d8>
  404cee:	9405      	str	r4, [sp, #20]
  404cf0:	46cb      	mov	fp, r9
  404cf2:	e44f      	b.n	404594 <_vfiprintf_r+0x2a4>
  404cf4:	aa0f      	add	r2, sp, #60	; 0x3c
  404cf6:	9904      	ldr	r1, [sp, #16]
  404cf8:	9806      	ldr	r0, [sp, #24]
  404cfa:	f7ff fab9 	bl	404270 <__sprint_r.part.0>
  404cfe:	2800      	cmp	r0, #0
  404d00:	d1a8      	bne.n	404c54 <_vfiprintf_r+0x964>
  404d02:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404d04:	46ca      	mov	sl, r9
  404d06:	e75e      	b.n	404bc6 <_vfiprintf_r+0x8d6>
  404d08:	aa0f      	add	r2, sp, #60	; 0x3c
  404d0a:	9904      	ldr	r1, [sp, #16]
  404d0c:	9806      	ldr	r0, [sp, #24]
  404d0e:	f7ff faaf 	bl	404270 <__sprint_r.part.0>
  404d12:	2800      	cmp	r0, #0
  404d14:	d19e      	bne.n	404c54 <_vfiprintf_r+0x964>
  404d16:	46ca      	mov	sl, r9
  404d18:	f7ff bbc0 	b.w	40449c <_vfiprintf_r+0x1ac>
  404d1c:	004072c0 	.word	0x004072c0
  404d20:	004072b0 	.word	0x004072b0
  404d24:	3104      	adds	r1, #4
  404d26:	6816      	ldr	r6, [r2, #0]
  404d28:	9107      	str	r1, [sp, #28]
  404d2a:	2201      	movs	r2, #1
  404d2c:	2700      	movs	r7, #0
  404d2e:	e412      	b.n	404556 <_vfiprintf_r+0x266>
  404d30:	9807      	ldr	r0, [sp, #28]
  404d32:	4601      	mov	r1, r0
  404d34:	3104      	adds	r1, #4
  404d36:	6806      	ldr	r6, [r0, #0]
  404d38:	9107      	str	r1, [sp, #28]
  404d3a:	2700      	movs	r7, #0
  404d3c:	e40b      	b.n	404556 <_vfiprintf_r+0x266>
  404d3e:	680e      	ldr	r6, [r1, #0]
  404d40:	3104      	adds	r1, #4
  404d42:	9107      	str	r1, [sp, #28]
  404d44:	2700      	movs	r7, #0
  404d46:	e591      	b.n	40486c <_vfiprintf_r+0x57c>
  404d48:	9907      	ldr	r1, [sp, #28]
  404d4a:	680e      	ldr	r6, [r1, #0]
  404d4c:	460a      	mov	r2, r1
  404d4e:	17f7      	asrs	r7, r6, #31
  404d50:	3204      	adds	r2, #4
  404d52:	9207      	str	r2, [sp, #28]
  404d54:	4630      	mov	r0, r6
  404d56:	4639      	mov	r1, r7
  404d58:	e50f      	b.n	40477a <_vfiprintf_r+0x48a>
  404d5a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404d5e:	f000 fe7f 	bl	405a60 <__retarget_lock_release_recursive>
  404d62:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404d66:	e71a      	b.n	404b9e <_vfiprintf_r+0x8ae>
  404d68:	9b02      	ldr	r3, [sp, #8]
  404d6a:	9302      	str	r3, [sp, #8]
  404d6c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  404d70:	3630      	adds	r6, #48	; 0x30
  404d72:	2301      	movs	r3, #1
  404d74:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  404d78:	9305      	str	r3, [sp, #20]
  404d7a:	e40b      	b.n	404594 <_vfiprintf_r+0x2a4>
  404d7c:	aa0f      	add	r2, sp, #60	; 0x3c
  404d7e:	9904      	ldr	r1, [sp, #16]
  404d80:	9806      	ldr	r0, [sp, #24]
  404d82:	f7ff fa75 	bl	404270 <__sprint_r.part.0>
  404d86:	2800      	cmp	r0, #0
  404d88:	f47f af64 	bne.w	404c54 <_vfiprintf_r+0x964>
  404d8c:	9910      	ldr	r1, [sp, #64]	; 0x40
  404d8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404d90:	1c48      	adds	r0, r1, #1
  404d92:	46ca      	mov	sl, r9
  404d94:	e651      	b.n	404a3a <_vfiprintf_r+0x74a>
  404d96:	aa0f      	add	r2, sp, #60	; 0x3c
  404d98:	9904      	ldr	r1, [sp, #16]
  404d9a:	9806      	ldr	r0, [sp, #24]
  404d9c:	f7ff fa68 	bl	404270 <__sprint_r.part.0>
  404da0:	2800      	cmp	r0, #0
  404da2:	f47f af57 	bne.w	404c54 <_vfiprintf_r+0x964>
  404da6:	9910      	ldr	r1, [sp, #64]	; 0x40
  404da8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404daa:	1c48      	adds	r0, r1, #1
  404dac:	46ca      	mov	sl, r9
  404dae:	e448      	b.n	404642 <_vfiprintf_r+0x352>
  404db0:	2a00      	cmp	r2, #0
  404db2:	f040 8091 	bne.w	404ed8 <_vfiprintf_r+0xbe8>
  404db6:	2001      	movs	r0, #1
  404db8:	4611      	mov	r1, r2
  404dba:	46ca      	mov	sl, r9
  404dbc:	e641      	b.n	404a42 <_vfiprintf_r+0x752>
  404dbe:	aa0f      	add	r2, sp, #60	; 0x3c
  404dc0:	9904      	ldr	r1, [sp, #16]
  404dc2:	9806      	ldr	r0, [sp, #24]
  404dc4:	f7ff fa54 	bl	404270 <__sprint_r.part.0>
  404dc8:	2800      	cmp	r0, #0
  404dca:	f47f af43 	bne.w	404c54 <_vfiprintf_r+0x964>
  404dce:	9810      	ldr	r0, [sp, #64]	; 0x40
  404dd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404dd2:	3001      	adds	r0, #1
  404dd4:	46ca      	mov	sl, r9
  404dd6:	e667      	b.n	404aa8 <_vfiprintf_r+0x7b8>
  404dd8:	46d3      	mov	fp, sl
  404dda:	e6d6      	b.n	404b8a <_vfiprintf_r+0x89a>
  404ddc:	9e07      	ldr	r6, [sp, #28]
  404dde:	3607      	adds	r6, #7
  404de0:	f026 0207 	bic.w	r2, r6, #7
  404de4:	f102 0108 	add.w	r1, r2, #8
  404de8:	e9d2 6700 	ldrd	r6, r7, [r2]
  404dec:	9107      	str	r1, [sp, #28]
  404dee:	2201      	movs	r2, #1
  404df0:	f7ff bbb1 	b.w	404556 <_vfiprintf_r+0x266>
  404df4:	9e07      	ldr	r6, [sp, #28]
  404df6:	3607      	adds	r6, #7
  404df8:	f026 0607 	bic.w	r6, r6, #7
  404dfc:	e9d6 0100 	ldrd	r0, r1, [r6]
  404e00:	f106 0208 	add.w	r2, r6, #8
  404e04:	9207      	str	r2, [sp, #28]
  404e06:	4606      	mov	r6, r0
  404e08:	460f      	mov	r7, r1
  404e0a:	e4b6      	b.n	40477a <_vfiprintf_r+0x48a>
  404e0c:	9e07      	ldr	r6, [sp, #28]
  404e0e:	3607      	adds	r6, #7
  404e10:	f026 0207 	bic.w	r2, r6, #7
  404e14:	f102 0108 	add.w	r1, r2, #8
  404e18:	e9d2 6700 	ldrd	r6, r7, [r2]
  404e1c:	9107      	str	r1, [sp, #28]
  404e1e:	2200      	movs	r2, #0
  404e20:	f7ff bb99 	b.w	404556 <_vfiprintf_r+0x266>
  404e24:	9e07      	ldr	r6, [sp, #28]
  404e26:	3607      	adds	r6, #7
  404e28:	f026 0107 	bic.w	r1, r6, #7
  404e2c:	f101 0008 	add.w	r0, r1, #8
  404e30:	9007      	str	r0, [sp, #28]
  404e32:	e9d1 6700 	ldrd	r6, r7, [r1]
  404e36:	e519      	b.n	40486c <_vfiprintf_r+0x57c>
  404e38:	46cb      	mov	fp, r9
  404e3a:	f7ff bbab 	b.w	404594 <_vfiprintf_r+0x2a4>
  404e3e:	252d      	movs	r5, #45	; 0x2d
  404e40:	4276      	negs	r6, r6
  404e42:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  404e46:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404e4a:	2201      	movs	r2, #1
  404e4c:	f7ff bb88 	b.w	404560 <_vfiprintf_r+0x270>
  404e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404e52:	b9b3      	cbnz	r3, 404e82 <_vfiprintf_r+0xb92>
  404e54:	4611      	mov	r1, r2
  404e56:	2001      	movs	r0, #1
  404e58:	46ca      	mov	sl, r9
  404e5a:	e5f2      	b.n	404a42 <_vfiprintf_r+0x752>
  404e5c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404e60:	f000 fdfe 	bl	405a60 <__retarget_lock_release_recursive>
  404e64:	f04f 33ff 	mov.w	r3, #4294967295
  404e68:	9303      	str	r3, [sp, #12]
  404e6a:	f7ff bb50 	b.w	40450e <_vfiprintf_r+0x21e>
  404e6e:	aa0f      	add	r2, sp, #60	; 0x3c
  404e70:	9904      	ldr	r1, [sp, #16]
  404e72:	9806      	ldr	r0, [sp, #24]
  404e74:	f7ff f9fc 	bl	404270 <__sprint_r.part.0>
  404e78:	2800      	cmp	r0, #0
  404e7a:	f47f aeeb 	bne.w	404c54 <_vfiprintf_r+0x964>
  404e7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404e80:	e6a9      	b.n	404bd6 <_vfiprintf_r+0x8e6>
  404e82:	ab0e      	add	r3, sp, #56	; 0x38
  404e84:	2202      	movs	r2, #2
  404e86:	931c      	str	r3, [sp, #112]	; 0x70
  404e88:	921d      	str	r2, [sp, #116]	; 0x74
  404e8a:	2001      	movs	r0, #1
  404e8c:	46ca      	mov	sl, r9
  404e8e:	e5d0      	b.n	404a32 <_vfiprintf_r+0x742>
  404e90:	aa0f      	add	r2, sp, #60	; 0x3c
  404e92:	9904      	ldr	r1, [sp, #16]
  404e94:	9806      	ldr	r0, [sp, #24]
  404e96:	f7ff f9eb 	bl	404270 <__sprint_r.part.0>
  404e9a:	2800      	cmp	r0, #0
  404e9c:	f47f aeda 	bne.w	404c54 <_vfiprintf_r+0x964>
  404ea0:	9910      	ldr	r1, [sp, #64]	; 0x40
  404ea2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404ea4:	1c48      	adds	r0, r1, #1
  404ea6:	46ca      	mov	sl, r9
  404ea8:	e5a4      	b.n	4049f4 <_vfiprintf_r+0x704>
  404eaa:	9a07      	ldr	r2, [sp, #28]
  404eac:	9903      	ldr	r1, [sp, #12]
  404eae:	6813      	ldr	r3, [r2, #0]
  404eb0:	17cd      	asrs	r5, r1, #31
  404eb2:	4608      	mov	r0, r1
  404eb4:	3204      	adds	r2, #4
  404eb6:	4629      	mov	r1, r5
  404eb8:	9207      	str	r2, [sp, #28]
  404eba:	e9c3 0100 	strd	r0, r1, [r3]
  404ebe:	f7ff ba54 	b.w	40436a <_vfiprintf_r+0x7a>
  404ec2:	4658      	mov	r0, fp
  404ec4:	9607      	str	r6, [sp, #28]
  404ec6:	9302      	str	r3, [sp, #8]
  404ec8:	f001 f8fa 	bl	4060c0 <strlen>
  404ecc:	2400      	movs	r4, #0
  404ece:	9005      	str	r0, [sp, #20]
  404ed0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404ed4:	f7ff bb5e 	b.w	404594 <_vfiprintf_r+0x2a4>
  404ed8:	aa0f      	add	r2, sp, #60	; 0x3c
  404eda:	9904      	ldr	r1, [sp, #16]
  404edc:	9806      	ldr	r0, [sp, #24]
  404ede:	f7ff f9c7 	bl	404270 <__sprint_r.part.0>
  404ee2:	2800      	cmp	r0, #0
  404ee4:	f47f aeb6 	bne.w	404c54 <_vfiprintf_r+0x964>
  404ee8:	9910      	ldr	r1, [sp, #64]	; 0x40
  404eea:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404eec:	1c48      	adds	r0, r1, #1
  404eee:	46ca      	mov	sl, r9
  404ef0:	e5a7      	b.n	404a42 <_vfiprintf_r+0x752>
  404ef2:	9910      	ldr	r1, [sp, #64]	; 0x40
  404ef4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404ef6:	4e20      	ldr	r6, [pc, #128]	; (404f78 <_vfiprintf_r+0xc88>)
  404ef8:	3101      	adds	r1, #1
  404efa:	f7ff bb90 	b.w	40461e <_vfiprintf_r+0x32e>
  404efe:	2c06      	cmp	r4, #6
  404f00:	bf28      	it	cs
  404f02:	2406      	movcs	r4, #6
  404f04:	9405      	str	r4, [sp, #20]
  404f06:	9607      	str	r6, [sp, #28]
  404f08:	9401      	str	r4, [sp, #4]
  404f0a:	f8df b070 	ldr.w	fp, [pc, #112]	; 404f7c <_vfiprintf_r+0xc8c>
  404f0e:	e4d5      	b.n	4048bc <_vfiprintf_r+0x5cc>
  404f10:	9810      	ldr	r0, [sp, #64]	; 0x40
  404f12:	4e19      	ldr	r6, [pc, #100]	; (404f78 <_vfiprintf_r+0xc88>)
  404f14:	3001      	adds	r0, #1
  404f16:	e603      	b.n	404b20 <_vfiprintf_r+0x830>
  404f18:	9405      	str	r4, [sp, #20]
  404f1a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404f1e:	9607      	str	r6, [sp, #28]
  404f20:	9302      	str	r3, [sp, #8]
  404f22:	4604      	mov	r4, r0
  404f24:	f7ff bb36 	b.w	404594 <_vfiprintf_r+0x2a4>
  404f28:	4686      	mov	lr, r0
  404f2a:	f7ff bbce 	b.w	4046ca <_vfiprintf_r+0x3da>
  404f2e:	9806      	ldr	r0, [sp, #24]
  404f30:	aa0f      	add	r2, sp, #60	; 0x3c
  404f32:	4659      	mov	r1, fp
  404f34:	f7ff f99c 	bl	404270 <__sprint_r.part.0>
  404f38:	2800      	cmp	r0, #0
  404f3a:	f43f ae24 	beq.w	404b86 <_vfiprintf_r+0x896>
  404f3e:	e624      	b.n	404b8a <_vfiprintf_r+0x89a>
  404f40:	9907      	ldr	r1, [sp, #28]
  404f42:	f898 2001 	ldrb.w	r2, [r8, #1]
  404f46:	680c      	ldr	r4, [r1, #0]
  404f48:	3104      	adds	r1, #4
  404f4a:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  404f4e:	46b8      	mov	r8, r7
  404f50:	9107      	str	r1, [sp, #28]
  404f52:	f7ff ba3f 	b.w	4043d4 <_vfiprintf_r+0xe4>
  404f56:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404f5a:	e43c      	b.n	4047d6 <_vfiprintf_r+0x4e6>
  404f5c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404f60:	e521      	b.n	4049a6 <_vfiprintf_r+0x6b6>
  404f62:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404f66:	f7ff bbf4 	b.w	404752 <_vfiprintf_r+0x462>
  404f6a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404f6e:	e491      	b.n	404894 <_vfiprintf_r+0x5a4>
  404f70:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404f74:	e469      	b.n	40484a <_vfiprintf_r+0x55a>
  404f76:	bf00      	nop
  404f78:	004072b0 	.word	0x004072b0
  404f7c:	004072a8 	.word	0x004072a8

00404f80 <__sbprintf>:
  404f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404f84:	460c      	mov	r4, r1
  404f86:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  404f8a:	8989      	ldrh	r1, [r1, #12]
  404f8c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  404f8e:	89e5      	ldrh	r5, [r4, #14]
  404f90:	9619      	str	r6, [sp, #100]	; 0x64
  404f92:	f021 0102 	bic.w	r1, r1, #2
  404f96:	4606      	mov	r6, r0
  404f98:	69e0      	ldr	r0, [r4, #28]
  404f9a:	f8ad 100c 	strh.w	r1, [sp, #12]
  404f9e:	4617      	mov	r7, r2
  404fa0:	f44f 6180 	mov.w	r1, #1024	; 0x400
  404fa4:	6a62      	ldr	r2, [r4, #36]	; 0x24
  404fa6:	f8ad 500e 	strh.w	r5, [sp, #14]
  404faa:	4698      	mov	r8, r3
  404fac:	ad1a      	add	r5, sp, #104	; 0x68
  404fae:	2300      	movs	r3, #0
  404fb0:	9007      	str	r0, [sp, #28]
  404fb2:	a816      	add	r0, sp, #88	; 0x58
  404fb4:	9209      	str	r2, [sp, #36]	; 0x24
  404fb6:	9306      	str	r3, [sp, #24]
  404fb8:	9500      	str	r5, [sp, #0]
  404fba:	9504      	str	r5, [sp, #16]
  404fbc:	9102      	str	r1, [sp, #8]
  404fbe:	9105      	str	r1, [sp, #20]
  404fc0:	f000 fd48 	bl	405a54 <__retarget_lock_init_recursive>
  404fc4:	4643      	mov	r3, r8
  404fc6:	463a      	mov	r2, r7
  404fc8:	4669      	mov	r1, sp
  404fca:	4630      	mov	r0, r6
  404fcc:	f7ff f990 	bl	4042f0 <_vfiprintf_r>
  404fd0:	1e05      	subs	r5, r0, #0
  404fd2:	db07      	blt.n	404fe4 <__sbprintf+0x64>
  404fd4:	4630      	mov	r0, r6
  404fd6:	4669      	mov	r1, sp
  404fd8:	f000 f928 	bl	40522c <_fflush_r>
  404fdc:	2800      	cmp	r0, #0
  404fde:	bf18      	it	ne
  404fe0:	f04f 35ff 	movne.w	r5, #4294967295
  404fe4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  404fe8:	065b      	lsls	r3, r3, #25
  404fea:	d503      	bpl.n	404ff4 <__sbprintf+0x74>
  404fec:	89a3      	ldrh	r3, [r4, #12]
  404fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404ff2:	81a3      	strh	r3, [r4, #12]
  404ff4:	9816      	ldr	r0, [sp, #88]	; 0x58
  404ff6:	f000 fd2f 	bl	405a58 <__retarget_lock_close_recursive>
  404ffa:	4628      	mov	r0, r5
  404ffc:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  405000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00405004 <__swsetup_r>:
  405004:	b538      	push	{r3, r4, r5, lr}
  405006:	4b30      	ldr	r3, [pc, #192]	; (4050c8 <__swsetup_r+0xc4>)
  405008:	681b      	ldr	r3, [r3, #0]
  40500a:	4605      	mov	r5, r0
  40500c:	460c      	mov	r4, r1
  40500e:	b113      	cbz	r3, 405016 <__swsetup_r+0x12>
  405010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  405012:	2a00      	cmp	r2, #0
  405014:	d038      	beq.n	405088 <__swsetup_r+0x84>
  405016:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40501a:	b293      	uxth	r3, r2
  40501c:	0718      	lsls	r0, r3, #28
  40501e:	d50c      	bpl.n	40503a <__swsetup_r+0x36>
  405020:	6920      	ldr	r0, [r4, #16]
  405022:	b1a8      	cbz	r0, 405050 <__swsetup_r+0x4c>
  405024:	f013 0201 	ands.w	r2, r3, #1
  405028:	d01e      	beq.n	405068 <__swsetup_r+0x64>
  40502a:	6963      	ldr	r3, [r4, #20]
  40502c:	2200      	movs	r2, #0
  40502e:	425b      	negs	r3, r3
  405030:	61a3      	str	r3, [r4, #24]
  405032:	60a2      	str	r2, [r4, #8]
  405034:	b1f0      	cbz	r0, 405074 <__swsetup_r+0x70>
  405036:	2000      	movs	r0, #0
  405038:	bd38      	pop	{r3, r4, r5, pc}
  40503a:	06d9      	lsls	r1, r3, #27
  40503c:	d53c      	bpl.n	4050b8 <__swsetup_r+0xb4>
  40503e:	0758      	lsls	r0, r3, #29
  405040:	d426      	bmi.n	405090 <__swsetup_r+0x8c>
  405042:	6920      	ldr	r0, [r4, #16]
  405044:	f042 0308 	orr.w	r3, r2, #8
  405048:	81a3      	strh	r3, [r4, #12]
  40504a:	b29b      	uxth	r3, r3
  40504c:	2800      	cmp	r0, #0
  40504e:	d1e9      	bne.n	405024 <__swsetup_r+0x20>
  405050:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405054:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405058:	d0e4      	beq.n	405024 <__swsetup_r+0x20>
  40505a:	4628      	mov	r0, r5
  40505c:	4621      	mov	r1, r4
  40505e:	f000 fd2f 	bl	405ac0 <__smakebuf_r>
  405062:	89a3      	ldrh	r3, [r4, #12]
  405064:	6920      	ldr	r0, [r4, #16]
  405066:	e7dd      	b.n	405024 <__swsetup_r+0x20>
  405068:	0799      	lsls	r1, r3, #30
  40506a:	bf58      	it	pl
  40506c:	6962      	ldrpl	r2, [r4, #20]
  40506e:	60a2      	str	r2, [r4, #8]
  405070:	2800      	cmp	r0, #0
  405072:	d1e0      	bne.n	405036 <__swsetup_r+0x32>
  405074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405078:	061a      	lsls	r2, r3, #24
  40507a:	d5dd      	bpl.n	405038 <__swsetup_r+0x34>
  40507c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405080:	81a3      	strh	r3, [r4, #12]
  405082:	f04f 30ff 	mov.w	r0, #4294967295
  405086:	bd38      	pop	{r3, r4, r5, pc}
  405088:	4618      	mov	r0, r3
  40508a:	f000 f927 	bl	4052dc <__sinit>
  40508e:	e7c2      	b.n	405016 <__swsetup_r+0x12>
  405090:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405092:	b151      	cbz	r1, 4050aa <__swsetup_r+0xa6>
  405094:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405098:	4299      	cmp	r1, r3
  40509a:	d004      	beq.n	4050a6 <__swsetup_r+0xa2>
  40509c:	4628      	mov	r0, r5
  40509e:	f000 fa43 	bl	405528 <_free_r>
  4050a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4050a6:	2300      	movs	r3, #0
  4050a8:	6323      	str	r3, [r4, #48]	; 0x30
  4050aa:	2300      	movs	r3, #0
  4050ac:	6920      	ldr	r0, [r4, #16]
  4050ae:	6063      	str	r3, [r4, #4]
  4050b0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4050b4:	6020      	str	r0, [r4, #0]
  4050b6:	e7c5      	b.n	405044 <__swsetup_r+0x40>
  4050b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4050bc:	2309      	movs	r3, #9
  4050be:	602b      	str	r3, [r5, #0]
  4050c0:	f04f 30ff 	mov.w	r0, #4294967295
  4050c4:	81a2      	strh	r2, [r4, #12]
  4050c6:	bd38      	pop	{r3, r4, r5, pc}
  4050c8:	2040004c 	.word	0x2040004c

004050cc <register_fini>:
  4050cc:	4b02      	ldr	r3, [pc, #8]	; (4050d8 <register_fini+0xc>)
  4050ce:	b113      	cbz	r3, 4050d6 <register_fini+0xa>
  4050d0:	4802      	ldr	r0, [pc, #8]	; (4050dc <register_fini+0x10>)
  4050d2:	f000 b805 	b.w	4050e0 <atexit>
  4050d6:	4770      	bx	lr
  4050d8:	00000000 	.word	0x00000000
  4050dc:	0040534d 	.word	0x0040534d

004050e0 <atexit>:
  4050e0:	2300      	movs	r3, #0
  4050e2:	4601      	mov	r1, r0
  4050e4:	461a      	mov	r2, r3
  4050e6:	4618      	mov	r0, r3
  4050e8:	f001 b8fe 	b.w	4062e8 <__register_exitproc>

004050ec <__sflush_r>:
  4050ec:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4050f0:	b29a      	uxth	r2, r3
  4050f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4050f6:	460d      	mov	r5, r1
  4050f8:	0711      	lsls	r1, r2, #28
  4050fa:	4680      	mov	r8, r0
  4050fc:	d43a      	bmi.n	405174 <__sflush_r+0x88>
  4050fe:	686a      	ldr	r2, [r5, #4]
  405100:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  405104:	2a00      	cmp	r2, #0
  405106:	81ab      	strh	r3, [r5, #12]
  405108:	dd6f      	ble.n	4051ea <__sflush_r+0xfe>
  40510a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40510c:	2c00      	cmp	r4, #0
  40510e:	d049      	beq.n	4051a4 <__sflush_r+0xb8>
  405110:	2200      	movs	r2, #0
  405112:	b29b      	uxth	r3, r3
  405114:	f8d8 6000 	ldr.w	r6, [r8]
  405118:	f8c8 2000 	str.w	r2, [r8]
  40511c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  405120:	d067      	beq.n	4051f2 <__sflush_r+0x106>
  405122:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  405124:	075f      	lsls	r7, r3, #29
  405126:	d505      	bpl.n	405134 <__sflush_r+0x48>
  405128:	6869      	ldr	r1, [r5, #4]
  40512a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40512c:	1a52      	subs	r2, r2, r1
  40512e:	b10b      	cbz	r3, 405134 <__sflush_r+0x48>
  405130:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  405132:	1ad2      	subs	r2, r2, r3
  405134:	2300      	movs	r3, #0
  405136:	69e9      	ldr	r1, [r5, #28]
  405138:	4640      	mov	r0, r8
  40513a:	47a0      	blx	r4
  40513c:	1c44      	adds	r4, r0, #1
  40513e:	d03c      	beq.n	4051ba <__sflush_r+0xce>
  405140:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  405144:	692a      	ldr	r2, [r5, #16]
  405146:	602a      	str	r2, [r5, #0]
  405148:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40514c:	2200      	movs	r2, #0
  40514e:	81ab      	strh	r3, [r5, #12]
  405150:	04db      	lsls	r3, r3, #19
  405152:	606a      	str	r2, [r5, #4]
  405154:	d447      	bmi.n	4051e6 <__sflush_r+0xfa>
  405156:	6b29      	ldr	r1, [r5, #48]	; 0x30
  405158:	f8c8 6000 	str.w	r6, [r8]
  40515c:	b311      	cbz	r1, 4051a4 <__sflush_r+0xb8>
  40515e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  405162:	4299      	cmp	r1, r3
  405164:	d002      	beq.n	40516c <__sflush_r+0x80>
  405166:	4640      	mov	r0, r8
  405168:	f000 f9de 	bl	405528 <_free_r>
  40516c:	2000      	movs	r0, #0
  40516e:	6328      	str	r0, [r5, #48]	; 0x30
  405170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405174:	692e      	ldr	r6, [r5, #16]
  405176:	b1ae      	cbz	r6, 4051a4 <__sflush_r+0xb8>
  405178:	682c      	ldr	r4, [r5, #0]
  40517a:	602e      	str	r6, [r5, #0]
  40517c:	0791      	lsls	r1, r2, #30
  40517e:	bf0c      	ite	eq
  405180:	696b      	ldreq	r3, [r5, #20]
  405182:	2300      	movne	r3, #0
  405184:	1ba4      	subs	r4, r4, r6
  405186:	60ab      	str	r3, [r5, #8]
  405188:	e00a      	b.n	4051a0 <__sflush_r+0xb4>
  40518a:	4623      	mov	r3, r4
  40518c:	4632      	mov	r2, r6
  40518e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  405190:	69e9      	ldr	r1, [r5, #28]
  405192:	4640      	mov	r0, r8
  405194:	47b8      	blx	r7
  405196:	2800      	cmp	r0, #0
  405198:	eba4 0400 	sub.w	r4, r4, r0
  40519c:	4406      	add	r6, r0
  40519e:	dd04      	ble.n	4051aa <__sflush_r+0xbe>
  4051a0:	2c00      	cmp	r4, #0
  4051a2:	dcf2      	bgt.n	40518a <__sflush_r+0x9e>
  4051a4:	2000      	movs	r0, #0
  4051a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4051aa:	89ab      	ldrh	r3, [r5, #12]
  4051ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4051b0:	81ab      	strh	r3, [r5, #12]
  4051b2:	f04f 30ff 	mov.w	r0, #4294967295
  4051b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4051ba:	f8d8 4000 	ldr.w	r4, [r8]
  4051be:	2c1d      	cmp	r4, #29
  4051c0:	d8f3      	bhi.n	4051aa <__sflush_r+0xbe>
  4051c2:	4b19      	ldr	r3, [pc, #100]	; (405228 <__sflush_r+0x13c>)
  4051c4:	40e3      	lsrs	r3, r4
  4051c6:	43db      	mvns	r3, r3
  4051c8:	f013 0301 	ands.w	r3, r3, #1
  4051cc:	d1ed      	bne.n	4051aa <__sflush_r+0xbe>
  4051ce:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4051d2:	606b      	str	r3, [r5, #4]
  4051d4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4051d8:	6929      	ldr	r1, [r5, #16]
  4051da:	81ab      	strh	r3, [r5, #12]
  4051dc:	04da      	lsls	r2, r3, #19
  4051de:	6029      	str	r1, [r5, #0]
  4051e0:	d5b9      	bpl.n	405156 <__sflush_r+0x6a>
  4051e2:	2c00      	cmp	r4, #0
  4051e4:	d1b7      	bne.n	405156 <__sflush_r+0x6a>
  4051e6:	6528      	str	r0, [r5, #80]	; 0x50
  4051e8:	e7b5      	b.n	405156 <__sflush_r+0x6a>
  4051ea:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4051ec:	2a00      	cmp	r2, #0
  4051ee:	dc8c      	bgt.n	40510a <__sflush_r+0x1e>
  4051f0:	e7d8      	b.n	4051a4 <__sflush_r+0xb8>
  4051f2:	2301      	movs	r3, #1
  4051f4:	69e9      	ldr	r1, [r5, #28]
  4051f6:	4640      	mov	r0, r8
  4051f8:	47a0      	blx	r4
  4051fa:	1c43      	adds	r3, r0, #1
  4051fc:	4602      	mov	r2, r0
  4051fe:	d002      	beq.n	405206 <__sflush_r+0x11a>
  405200:	89ab      	ldrh	r3, [r5, #12]
  405202:	6aac      	ldr	r4, [r5, #40]	; 0x28
  405204:	e78e      	b.n	405124 <__sflush_r+0x38>
  405206:	f8d8 3000 	ldr.w	r3, [r8]
  40520a:	2b00      	cmp	r3, #0
  40520c:	d0f8      	beq.n	405200 <__sflush_r+0x114>
  40520e:	2b1d      	cmp	r3, #29
  405210:	d001      	beq.n	405216 <__sflush_r+0x12a>
  405212:	2b16      	cmp	r3, #22
  405214:	d102      	bne.n	40521c <__sflush_r+0x130>
  405216:	f8c8 6000 	str.w	r6, [r8]
  40521a:	e7c3      	b.n	4051a4 <__sflush_r+0xb8>
  40521c:	89ab      	ldrh	r3, [r5, #12]
  40521e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405222:	81ab      	strh	r3, [r5, #12]
  405224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405228:	20400001 	.word	0x20400001

0040522c <_fflush_r>:
  40522c:	b538      	push	{r3, r4, r5, lr}
  40522e:	460d      	mov	r5, r1
  405230:	4604      	mov	r4, r0
  405232:	b108      	cbz	r0, 405238 <_fflush_r+0xc>
  405234:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405236:	b1bb      	cbz	r3, 405268 <_fflush_r+0x3c>
  405238:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40523c:	b188      	cbz	r0, 405262 <_fflush_r+0x36>
  40523e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  405240:	07db      	lsls	r3, r3, #31
  405242:	d401      	bmi.n	405248 <_fflush_r+0x1c>
  405244:	0581      	lsls	r1, r0, #22
  405246:	d517      	bpl.n	405278 <_fflush_r+0x4c>
  405248:	4620      	mov	r0, r4
  40524a:	4629      	mov	r1, r5
  40524c:	f7ff ff4e 	bl	4050ec <__sflush_r>
  405250:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  405252:	07da      	lsls	r2, r3, #31
  405254:	4604      	mov	r4, r0
  405256:	d402      	bmi.n	40525e <_fflush_r+0x32>
  405258:	89ab      	ldrh	r3, [r5, #12]
  40525a:	059b      	lsls	r3, r3, #22
  40525c:	d507      	bpl.n	40526e <_fflush_r+0x42>
  40525e:	4620      	mov	r0, r4
  405260:	bd38      	pop	{r3, r4, r5, pc}
  405262:	4604      	mov	r4, r0
  405264:	4620      	mov	r0, r4
  405266:	bd38      	pop	{r3, r4, r5, pc}
  405268:	f000 f838 	bl	4052dc <__sinit>
  40526c:	e7e4      	b.n	405238 <_fflush_r+0xc>
  40526e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  405270:	f000 fbf6 	bl	405a60 <__retarget_lock_release_recursive>
  405274:	4620      	mov	r0, r4
  405276:	bd38      	pop	{r3, r4, r5, pc}
  405278:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40527a:	f000 fbef 	bl	405a5c <__retarget_lock_acquire_recursive>
  40527e:	e7e3      	b.n	405248 <_fflush_r+0x1c>

00405280 <_cleanup_r>:
  405280:	4901      	ldr	r1, [pc, #4]	; (405288 <_cleanup_r+0x8>)
  405282:	f000 bbaf 	b.w	4059e4 <_fwalk_reent>
  405286:	bf00      	nop
  405288:	004063d1 	.word	0x004063d1

0040528c <std.isra.0>:
  40528c:	b510      	push	{r4, lr}
  40528e:	2300      	movs	r3, #0
  405290:	4604      	mov	r4, r0
  405292:	8181      	strh	r1, [r0, #12]
  405294:	81c2      	strh	r2, [r0, #14]
  405296:	6003      	str	r3, [r0, #0]
  405298:	6043      	str	r3, [r0, #4]
  40529a:	6083      	str	r3, [r0, #8]
  40529c:	6643      	str	r3, [r0, #100]	; 0x64
  40529e:	6103      	str	r3, [r0, #16]
  4052a0:	6143      	str	r3, [r0, #20]
  4052a2:	6183      	str	r3, [r0, #24]
  4052a4:	4619      	mov	r1, r3
  4052a6:	2208      	movs	r2, #8
  4052a8:	305c      	adds	r0, #92	; 0x5c
  4052aa:	f7fe ff75 	bl	404198 <memset>
  4052ae:	4807      	ldr	r0, [pc, #28]	; (4052cc <std.isra.0+0x40>)
  4052b0:	4907      	ldr	r1, [pc, #28]	; (4052d0 <std.isra.0+0x44>)
  4052b2:	4a08      	ldr	r2, [pc, #32]	; (4052d4 <std.isra.0+0x48>)
  4052b4:	4b08      	ldr	r3, [pc, #32]	; (4052d8 <std.isra.0+0x4c>)
  4052b6:	6220      	str	r0, [r4, #32]
  4052b8:	61e4      	str	r4, [r4, #28]
  4052ba:	6261      	str	r1, [r4, #36]	; 0x24
  4052bc:	62a2      	str	r2, [r4, #40]	; 0x28
  4052be:	62e3      	str	r3, [r4, #44]	; 0x2c
  4052c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4052c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4052c8:	f000 bbc4 	b.w	405a54 <__retarget_lock_init_recursive>
  4052cc:	00406035 	.word	0x00406035
  4052d0:	00406059 	.word	0x00406059
  4052d4:	00406095 	.word	0x00406095
  4052d8:	004060b5 	.word	0x004060b5

004052dc <__sinit>:
  4052dc:	b510      	push	{r4, lr}
  4052de:	4604      	mov	r4, r0
  4052e0:	4812      	ldr	r0, [pc, #72]	; (40532c <__sinit+0x50>)
  4052e2:	f000 fbbb 	bl	405a5c <__retarget_lock_acquire_recursive>
  4052e6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4052e8:	b9d2      	cbnz	r2, 405320 <__sinit+0x44>
  4052ea:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4052ee:	4810      	ldr	r0, [pc, #64]	; (405330 <__sinit+0x54>)
  4052f0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4052f4:	2103      	movs	r1, #3
  4052f6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4052fa:	63e0      	str	r0, [r4, #60]	; 0x3c
  4052fc:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  405300:	6860      	ldr	r0, [r4, #4]
  405302:	2104      	movs	r1, #4
  405304:	f7ff ffc2 	bl	40528c <std.isra.0>
  405308:	2201      	movs	r2, #1
  40530a:	2109      	movs	r1, #9
  40530c:	68a0      	ldr	r0, [r4, #8]
  40530e:	f7ff ffbd 	bl	40528c <std.isra.0>
  405312:	2202      	movs	r2, #2
  405314:	2112      	movs	r1, #18
  405316:	68e0      	ldr	r0, [r4, #12]
  405318:	f7ff ffb8 	bl	40528c <std.isra.0>
  40531c:	2301      	movs	r3, #1
  40531e:	63a3      	str	r3, [r4, #56]	; 0x38
  405320:	4802      	ldr	r0, [pc, #8]	; (40532c <__sinit+0x50>)
  405322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405326:	f000 bb9b 	b.w	405a60 <__retarget_lock_release_recursive>
  40532a:	bf00      	nop
  40532c:	2044c8c8 	.word	0x2044c8c8
  405330:	00405281 	.word	0x00405281

00405334 <__sfp_lock_acquire>:
  405334:	4801      	ldr	r0, [pc, #4]	; (40533c <__sfp_lock_acquire+0x8>)
  405336:	f000 bb91 	b.w	405a5c <__retarget_lock_acquire_recursive>
  40533a:	bf00      	nop
  40533c:	2044c8dc 	.word	0x2044c8dc

00405340 <__sfp_lock_release>:
  405340:	4801      	ldr	r0, [pc, #4]	; (405348 <__sfp_lock_release+0x8>)
  405342:	f000 bb8d 	b.w	405a60 <__retarget_lock_release_recursive>
  405346:	bf00      	nop
  405348:	2044c8dc 	.word	0x2044c8dc

0040534c <__libc_fini_array>:
  40534c:	b538      	push	{r3, r4, r5, lr}
  40534e:	4c0a      	ldr	r4, [pc, #40]	; (405378 <__libc_fini_array+0x2c>)
  405350:	4d0a      	ldr	r5, [pc, #40]	; (40537c <__libc_fini_array+0x30>)
  405352:	1b64      	subs	r4, r4, r5
  405354:	10a4      	asrs	r4, r4, #2
  405356:	d00a      	beq.n	40536e <__libc_fini_array+0x22>
  405358:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40535c:	3b01      	subs	r3, #1
  40535e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  405362:	3c01      	subs	r4, #1
  405364:	f855 3904 	ldr.w	r3, [r5], #-4
  405368:	4798      	blx	r3
  40536a:	2c00      	cmp	r4, #0
  40536c:	d1f9      	bne.n	405362 <__libc_fini_array+0x16>
  40536e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405372:	f002 b841 	b.w	4073f8 <_fini>
  405376:	bf00      	nop
  405378:	00407408 	.word	0x00407408
  40537c:	00407404 	.word	0x00407404

00405380 <__fputwc>:
  405380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405384:	b082      	sub	sp, #8
  405386:	4680      	mov	r8, r0
  405388:	4689      	mov	r9, r1
  40538a:	4614      	mov	r4, r2
  40538c:	f000 fb54 	bl	405a38 <__locale_mb_cur_max>
  405390:	2801      	cmp	r0, #1
  405392:	d036      	beq.n	405402 <__fputwc+0x82>
  405394:	464a      	mov	r2, r9
  405396:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40539a:	a901      	add	r1, sp, #4
  40539c:	4640      	mov	r0, r8
  40539e:	f000 ff55 	bl	40624c <_wcrtomb_r>
  4053a2:	1c42      	adds	r2, r0, #1
  4053a4:	4606      	mov	r6, r0
  4053a6:	d025      	beq.n	4053f4 <__fputwc+0x74>
  4053a8:	b3a8      	cbz	r0, 405416 <__fputwc+0x96>
  4053aa:	f89d e004 	ldrb.w	lr, [sp, #4]
  4053ae:	2500      	movs	r5, #0
  4053b0:	f10d 0a04 	add.w	sl, sp, #4
  4053b4:	e009      	b.n	4053ca <__fputwc+0x4a>
  4053b6:	6823      	ldr	r3, [r4, #0]
  4053b8:	1c5a      	adds	r2, r3, #1
  4053ba:	6022      	str	r2, [r4, #0]
  4053bc:	f883 e000 	strb.w	lr, [r3]
  4053c0:	3501      	adds	r5, #1
  4053c2:	42b5      	cmp	r5, r6
  4053c4:	d227      	bcs.n	405416 <__fputwc+0x96>
  4053c6:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4053ca:	68a3      	ldr	r3, [r4, #8]
  4053cc:	3b01      	subs	r3, #1
  4053ce:	2b00      	cmp	r3, #0
  4053d0:	60a3      	str	r3, [r4, #8]
  4053d2:	daf0      	bge.n	4053b6 <__fputwc+0x36>
  4053d4:	69a7      	ldr	r7, [r4, #24]
  4053d6:	42bb      	cmp	r3, r7
  4053d8:	4671      	mov	r1, lr
  4053da:	4622      	mov	r2, r4
  4053dc:	4640      	mov	r0, r8
  4053de:	db02      	blt.n	4053e6 <__fputwc+0x66>
  4053e0:	f1be 0f0a 	cmp.w	lr, #10
  4053e4:	d1e7      	bne.n	4053b6 <__fputwc+0x36>
  4053e6:	f000 fed9 	bl	40619c <__swbuf_r>
  4053ea:	1c43      	adds	r3, r0, #1
  4053ec:	d1e8      	bne.n	4053c0 <__fputwc+0x40>
  4053ee:	b002      	add	sp, #8
  4053f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4053f4:	89a3      	ldrh	r3, [r4, #12]
  4053f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4053fa:	81a3      	strh	r3, [r4, #12]
  4053fc:	b002      	add	sp, #8
  4053fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405402:	f109 33ff 	add.w	r3, r9, #4294967295
  405406:	2bfe      	cmp	r3, #254	; 0xfe
  405408:	d8c4      	bhi.n	405394 <__fputwc+0x14>
  40540a:	fa5f fe89 	uxtb.w	lr, r9
  40540e:	4606      	mov	r6, r0
  405410:	f88d e004 	strb.w	lr, [sp, #4]
  405414:	e7cb      	b.n	4053ae <__fputwc+0x2e>
  405416:	4648      	mov	r0, r9
  405418:	b002      	add	sp, #8
  40541a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40541e:	bf00      	nop

00405420 <_fputwc_r>:
  405420:	b530      	push	{r4, r5, lr}
  405422:	6e53      	ldr	r3, [r2, #100]	; 0x64
  405424:	f013 0f01 	tst.w	r3, #1
  405428:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40542c:	4614      	mov	r4, r2
  40542e:	b083      	sub	sp, #12
  405430:	4605      	mov	r5, r0
  405432:	b29a      	uxth	r2, r3
  405434:	d101      	bne.n	40543a <_fputwc_r+0x1a>
  405436:	0590      	lsls	r0, r2, #22
  405438:	d51c      	bpl.n	405474 <_fputwc_r+0x54>
  40543a:	0490      	lsls	r0, r2, #18
  40543c:	d406      	bmi.n	40544c <_fputwc_r+0x2c>
  40543e:	6e62      	ldr	r2, [r4, #100]	; 0x64
  405440:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405444:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405448:	81a3      	strh	r3, [r4, #12]
  40544a:	6662      	str	r2, [r4, #100]	; 0x64
  40544c:	4628      	mov	r0, r5
  40544e:	4622      	mov	r2, r4
  405450:	f7ff ff96 	bl	405380 <__fputwc>
  405454:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405456:	07da      	lsls	r2, r3, #31
  405458:	4605      	mov	r5, r0
  40545a:	d402      	bmi.n	405462 <_fputwc_r+0x42>
  40545c:	89a3      	ldrh	r3, [r4, #12]
  40545e:	059b      	lsls	r3, r3, #22
  405460:	d502      	bpl.n	405468 <_fputwc_r+0x48>
  405462:	4628      	mov	r0, r5
  405464:	b003      	add	sp, #12
  405466:	bd30      	pop	{r4, r5, pc}
  405468:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40546a:	f000 faf9 	bl	405a60 <__retarget_lock_release_recursive>
  40546e:	4628      	mov	r0, r5
  405470:	b003      	add	sp, #12
  405472:	bd30      	pop	{r4, r5, pc}
  405474:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405476:	9101      	str	r1, [sp, #4]
  405478:	f000 faf0 	bl	405a5c <__retarget_lock_acquire_recursive>
  40547c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405480:	9901      	ldr	r1, [sp, #4]
  405482:	b29a      	uxth	r2, r3
  405484:	e7d9      	b.n	40543a <_fputwc_r+0x1a>
  405486:	bf00      	nop

00405488 <_malloc_trim_r>:
  405488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40548a:	4f24      	ldr	r7, [pc, #144]	; (40551c <_malloc_trim_r+0x94>)
  40548c:	460c      	mov	r4, r1
  40548e:	4606      	mov	r6, r0
  405490:	f7fe fed0 	bl	404234 <__malloc_lock>
  405494:	68bb      	ldr	r3, [r7, #8]
  405496:	685d      	ldr	r5, [r3, #4]
  405498:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40549c:	310f      	adds	r1, #15
  40549e:	f025 0503 	bic.w	r5, r5, #3
  4054a2:	4429      	add	r1, r5
  4054a4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4054a8:	f021 010f 	bic.w	r1, r1, #15
  4054ac:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4054b0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4054b4:	db07      	blt.n	4054c6 <_malloc_trim_r+0x3e>
  4054b6:	2100      	movs	r1, #0
  4054b8:	4630      	mov	r0, r6
  4054ba:	f7fe fec7 	bl	40424c <_sbrk_r>
  4054be:	68bb      	ldr	r3, [r7, #8]
  4054c0:	442b      	add	r3, r5
  4054c2:	4298      	cmp	r0, r3
  4054c4:	d004      	beq.n	4054d0 <_malloc_trim_r+0x48>
  4054c6:	4630      	mov	r0, r6
  4054c8:	f7fe feba 	bl	404240 <__malloc_unlock>
  4054cc:	2000      	movs	r0, #0
  4054ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4054d0:	4261      	negs	r1, r4
  4054d2:	4630      	mov	r0, r6
  4054d4:	f7fe feba 	bl	40424c <_sbrk_r>
  4054d8:	3001      	adds	r0, #1
  4054da:	d00d      	beq.n	4054f8 <_malloc_trim_r+0x70>
  4054dc:	4b10      	ldr	r3, [pc, #64]	; (405520 <_malloc_trim_r+0x98>)
  4054de:	68ba      	ldr	r2, [r7, #8]
  4054e0:	6819      	ldr	r1, [r3, #0]
  4054e2:	1b2d      	subs	r5, r5, r4
  4054e4:	f045 0501 	orr.w	r5, r5, #1
  4054e8:	4630      	mov	r0, r6
  4054ea:	1b09      	subs	r1, r1, r4
  4054ec:	6055      	str	r5, [r2, #4]
  4054ee:	6019      	str	r1, [r3, #0]
  4054f0:	f7fe fea6 	bl	404240 <__malloc_unlock>
  4054f4:	2001      	movs	r0, #1
  4054f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4054f8:	2100      	movs	r1, #0
  4054fa:	4630      	mov	r0, r6
  4054fc:	f7fe fea6 	bl	40424c <_sbrk_r>
  405500:	68ba      	ldr	r2, [r7, #8]
  405502:	1a83      	subs	r3, r0, r2
  405504:	2b0f      	cmp	r3, #15
  405506:	ddde      	ble.n	4054c6 <_malloc_trim_r+0x3e>
  405508:	4c06      	ldr	r4, [pc, #24]	; (405524 <_malloc_trim_r+0x9c>)
  40550a:	4905      	ldr	r1, [pc, #20]	; (405520 <_malloc_trim_r+0x98>)
  40550c:	6824      	ldr	r4, [r4, #0]
  40550e:	f043 0301 	orr.w	r3, r3, #1
  405512:	1b00      	subs	r0, r0, r4
  405514:	6053      	str	r3, [r2, #4]
  405516:	6008      	str	r0, [r1, #0]
  405518:	e7d5      	b.n	4054c6 <_malloc_trim_r+0x3e>
  40551a:	bf00      	nop
  40551c:	20400478 	.word	0x20400478
  405520:	20446000 	.word	0x20446000
  405524:	20400880 	.word	0x20400880

00405528 <_free_r>:
  405528:	2900      	cmp	r1, #0
  40552a:	d044      	beq.n	4055b6 <_free_r+0x8e>
  40552c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405530:	460d      	mov	r5, r1
  405532:	4680      	mov	r8, r0
  405534:	f7fe fe7e 	bl	404234 <__malloc_lock>
  405538:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40553c:	4969      	ldr	r1, [pc, #420]	; (4056e4 <_free_r+0x1bc>)
  40553e:	f027 0301 	bic.w	r3, r7, #1
  405542:	f1a5 0408 	sub.w	r4, r5, #8
  405546:	18e2      	adds	r2, r4, r3
  405548:	688e      	ldr	r6, [r1, #8]
  40554a:	6850      	ldr	r0, [r2, #4]
  40554c:	42b2      	cmp	r2, r6
  40554e:	f020 0003 	bic.w	r0, r0, #3
  405552:	d05e      	beq.n	405612 <_free_r+0xea>
  405554:	07fe      	lsls	r6, r7, #31
  405556:	6050      	str	r0, [r2, #4]
  405558:	d40b      	bmi.n	405572 <_free_r+0x4a>
  40555a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40555e:	1be4      	subs	r4, r4, r7
  405560:	f101 0e08 	add.w	lr, r1, #8
  405564:	68a5      	ldr	r5, [r4, #8]
  405566:	4575      	cmp	r5, lr
  405568:	443b      	add	r3, r7
  40556a:	d06d      	beq.n	405648 <_free_r+0x120>
  40556c:	68e7      	ldr	r7, [r4, #12]
  40556e:	60ef      	str	r7, [r5, #12]
  405570:	60bd      	str	r5, [r7, #8]
  405572:	1815      	adds	r5, r2, r0
  405574:	686d      	ldr	r5, [r5, #4]
  405576:	07ed      	lsls	r5, r5, #31
  405578:	d53e      	bpl.n	4055f8 <_free_r+0xd0>
  40557a:	f043 0201 	orr.w	r2, r3, #1
  40557e:	6062      	str	r2, [r4, #4]
  405580:	50e3      	str	r3, [r4, r3]
  405582:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405586:	d217      	bcs.n	4055b8 <_free_r+0x90>
  405588:	08db      	lsrs	r3, r3, #3
  40558a:	1c58      	adds	r0, r3, #1
  40558c:	109a      	asrs	r2, r3, #2
  40558e:	684d      	ldr	r5, [r1, #4]
  405590:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405594:	60a7      	str	r7, [r4, #8]
  405596:	2301      	movs	r3, #1
  405598:	4093      	lsls	r3, r2
  40559a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40559e:	432b      	orrs	r3, r5
  4055a0:	3a08      	subs	r2, #8
  4055a2:	60e2      	str	r2, [r4, #12]
  4055a4:	604b      	str	r3, [r1, #4]
  4055a6:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4055aa:	60fc      	str	r4, [r7, #12]
  4055ac:	4640      	mov	r0, r8
  4055ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4055b2:	f7fe be45 	b.w	404240 <__malloc_unlock>
  4055b6:	4770      	bx	lr
  4055b8:	0a5a      	lsrs	r2, r3, #9
  4055ba:	2a04      	cmp	r2, #4
  4055bc:	d852      	bhi.n	405664 <_free_r+0x13c>
  4055be:	099a      	lsrs	r2, r3, #6
  4055c0:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4055c4:	00ff      	lsls	r7, r7, #3
  4055c6:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4055ca:	19c8      	adds	r0, r1, r7
  4055cc:	59ca      	ldr	r2, [r1, r7]
  4055ce:	3808      	subs	r0, #8
  4055d0:	4290      	cmp	r0, r2
  4055d2:	d04f      	beq.n	405674 <_free_r+0x14c>
  4055d4:	6851      	ldr	r1, [r2, #4]
  4055d6:	f021 0103 	bic.w	r1, r1, #3
  4055da:	428b      	cmp	r3, r1
  4055dc:	d232      	bcs.n	405644 <_free_r+0x11c>
  4055de:	6892      	ldr	r2, [r2, #8]
  4055e0:	4290      	cmp	r0, r2
  4055e2:	d1f7      	bne.n	4055d4 <_free_r+0xac>
  4055e4:	68c3      	ldr	r3, [r0, #12]
  4055e6:	60a0      	str	r0, [r4, #8]
  4055e8:	60e3      	str	r3, [r4, #12]
  4055ea:	609c      	str	r4, [r3, #8]
  4055ec:	60c4      	str	r4, [r0, #12]
  4055ee:	4640      	mov	r0, r8
  4055f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4055f4:	f7fe be24 	b.w	404240 <__malloc_unlock>
  4055f8:	6895      	ldr	r5, [r2, #8]
  4055fa:	4f3b      	ldr	r7, [pc, #236]	; (4056e8 <_free_r+0x1c0>)
  4055fc:	42bd      	cmp	r5, r7
  4055fe:	4403      	add	r3, r0
  405600:	d040      	beq.n	405684 <_free_r+0x15c>
  405602:	68d0      	ldr	r0, [r2, #12]
  405604:	60e8      	str	r0, [r5, #12]
  405606:	f043 0201 	orr.w	r2, r3, #1
  40560a:	6085      	str	r5, [r0, #8]
  40560c:	6062      	str	r2, [r4, #4]
  40560e:	50e3      	str	r3, [r4, r3]
  405610:	e7b7      	b.n	405582 <_free_r+0x5a>
  405612:	07ff      	lsls	r7, r7, #31
  405614:	4403      	add	r3, r0
  405616:	d407      	bmi.n	405628 <_free_r+0x100>
  405618:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40561c:	1aa4      	subs	r4, r4, r2
  40561e:	4413      	add	r3, r2
  405620:	68a0      	ldr	r0, [r4, #8]
  405622:	68e2      	ldr	r2, [r4, #12]
  405624:	60c2      	str	r2, [r0, #12]
  405626:	6090      	str	r0, [r2, #8]
  405628:	4a30      	ldr	r2, [pc, #192]	; (4056ec <_free_r+0x1c4>)
  40562a:	6812      	ldr	r2, [r2, #0]
  40562c:	f043 0001 	orr.w	r0, r3, #1
  405630:	4293      	cmp	r3, r2
  405632:	6060      	str	r0, [r4, #4]
  405634:	608c      	str	r4, [r1, #8]
  405636:	d3b9      	bcc.n	4055ac <_free_r+0x84>
  405638:	4b2d      	ldr	r3, [pc, #180]	; (4056f0 <_free_r+0x1c8>)
  40563a:	4640      	mov	r0, r8
  40563c:	6819      	ldr	r1, [r3, #0]
  40563e:	f7ff ff23 	bl	405488 <_malloc_trim_r>
  405642:	e7b3      	b.n	4055ac <_free_r+0x84>
  405644:	4610      	mov	r0, r2
  405646:	e7cd      	b.n	4055e4 <_free_r+0xbc>
  405648:	1811      	adds	r1, r2, r0
  40564a:	6849      	ldr	r1, [r1, #4]
  40564c:	07c9      	lsls	r1, r1, #31
  40564e:	d444      	bmi.n	4056da <_free_r+0x1b2>
  405650:	6891      	ldr	r1, [r2, #8]
  405652:	68d2      	ldr	r2, [r2, #12]
  405654:	60ca      	str	r2, [r1, #12]
  405656:	4403      	add	r3, r0
  405658:	f043 0001 	orr.w	r0, r3, #1
  40565c:	6091      	str	r1, [r2, #8]
  40565e:	6060      	str	r0, [r4, #4]
  405660:	50e3      	str	r3, [r4, r3]
  405662:	e7a3      	b.n	4055ac <_free_r+0x84>
  405664:	2a14      	cmp	r2, #20
  405666:	d816      	bhi.n	405696 <_free_r+0x16e>
  405668:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40566c:	00ff      	lsls	r7, r7, #3
  40566e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  405672:	e7aa      	b.n	4055ca <_free_r+0xa2>
  405674:	10aa      	asrs	r2, r5, #2
  405676:	2301      	movs	r3, #1
  405678:	684d      	ldr	r5, [r1, #4]
  40567a:	4093      	lsls	r3, r2
  40567c:	432b      	orrs	r3, r5
  40567e:	604b      	str	r3, [r1, #4]
  405680:	4603      	mov	r3, r0
  405682:	e7b0      	b.n	4055e6 <_free_r+0xbe>
  405684:	f043 0201 	orr.w	r2, r3, #1
  405688:	614c      	str	r4, [r1, #20]
  40568a:	610c      	str	r4, [r1, #16]
  40568c:	60e5      	str	r5, [r4, #12]
  40568e:	60a5      	str	r5, [r4, #8]
  405690:	6062      	str	r2, [r4, #4]
  405692:	50e3      	str	r3, [r4, r3]
  405694:	e78a      	b.n	4055ac <_free_r+0x84>
  405696:	2a54      	cmp	r2, #84	; 0x54
  405698:	d806      	bhi.n	4056a8 <_free_r+0x180>
  40569a:	0b1a      	lsrs	r2, r3, #12
  40569c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4056a0:	00ff      	lsls	r7, r7, #3
  4056a2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4056a6:	e790      	b.n	4055ca <_free_r+0xa2>
  4056a8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4056ac:	d806      	bhi.n	4056bc <_free_r+0x194>
  4056ae:	0bda      	lsrs	r2, r3, #15
  4056b0:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4056b4:	00ff      	lsls	r7, r7, #3
  4056b6:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4056ba:	e786      	b.n	4055ca <_free_r+0xa2>
  4056bc:	f240 5054 	movw	r0, #1364	; 0x554
  4056c0:	4282      	cmp	r2, r0
  4056c2:	d806      	bhi.n	4056d2 <_free_r+0x1aa>
  4056c4:	0c9a      	lsrs	r2, r3, #18
  4056c6:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4056ca:	00ff      	lsls	r7, r7, #3
  4056cc:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4056d0:	e77b      	b.n	4055ca <_free_r+0xa2>
  4056d2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4056d6:	257e      	movs	r5, #126	; 0x7e
  4056d8:	e777      	b.n	4055ca <_free_r+0xa2>
  4056da:	f043 0101 	orr.w	r1, r3, #1
  4056de:	6061      	str	r1, [r4, #4]
  4056e0:	6013      	str	r3, [r2, #0]
  4056e2:	e763      	b.n	4055ac <_free_r+0x84>
  4056e4:	20400478 	.word	0x20400478
  4056e8:	20400480 	.word	0x20400480
  4056ec:	20400884 	.word	0x20400884
  4056f0:	20446030 	.word	0x20446030

004056f4 <__sfvwrite_r>:
  4056f4:	6893      	ldr	r3, [r2, #8]
  4056f6:	2b00      	cmp	r3, #0
  4056f8:	d073      	beq.n	4057e2 <__sfvwrite_r+0xee>
  4056fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4056fe:	898b      	ldrh	r3, [r1, #12]
  405700:	b083      	sub	sp, #12
  405702:	460c      	mov	r4, r1
  405704:	0719      	lsls	r1, r3, #28
  405706:	9000      	str	r0, [sp, #0]
  405708:	4616      	mov	r6, r2
  40570a:	d526      	bpl.n	40575a <__sfvwrite_r+0x66>
  40570c:	6922      	ldr	r2, [r4, #16]
  40570e:	b322      	cbz	r2, 40575a <__sfvwrite_r+0x66>
  405710:	f013 0002 	ands.w	r0, r3, #2
  405714:	6835      	ldr	r5, [r6, #0]
  405716:	d02c      	beq.n	405772 <__sfvwrite_r+0x7e>
  405718:	f04f 0900 	mov.w	r9, #0
  40571c:	4fb0      	ldr	r7, [pc, #704]	; (4059e0 <__sfvwrite_r+0x2ec>)
  40571e:	46c8      	mov	r8, r9
  405720:	46b2      	mov	sl, r6
  405722:	45b8      	cmp	r8, r7
  405724:	4643      	mov	r3, r8
  405726:	464a      	mov	r2, r9
  405728:	bf28      	it	cs
  40572a:	463b      	movcs	r3, r7
  40572c:	9800      	ldr	r0, [sp, #0]
  40572e:	f1b8 0f00 	cmp.w	r8, #0
  405732:	d050      	beq.n	4057d6 <__sfvwrite_r+0xe2>
  405734:	69e1      	ldr	r1, [r4, #28]
  405736:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405738:	47b0      	blx	r6
  40573a:	2800      	cmp	r0, #0
  40573c:	dd58      	ble.n	4057f0 <__sfvwrite_r+0xfc>
  40573e:	f8da 3008 	ldr.w	r3, [sl, #8]
  405742:	1a1b      	subs	r3, r3, r0
  405744:	4481      	add	r9, r0
  405746:	eba8 0800 	sub.w	r8, r8, r0
  40574a:	f8ca 3008 	str.w	r3, [sl, #8]
  40574e:	2b00      	cmp	r3, #0
  405750:	d1e7      	bne.n	405722 <__sfvwrite_r+0x2e>
  405752:	2000      	movs	r0, #0
  405754:	b003      	add	sp, #12
  405756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40575a:	4621      	mov	r1, r4
  40575c:	9800      	ldr	r0, [sp, #0]
  40575e:	f7ff fc51 	bl	405004 <__swsetup_r>
  405762:	2800      	cmp	r0, #0
  405764:	f040 8133 	bne.w	4059ce <__sfvwrite_r+0x2da>
  405768:	89a3      	ldrh	r3, [r4, #12]
  40576a:	6835      	ldr	r5, [r6, #0]
  40576c:	f013 0002 	ands.w	r0, r3, #2
  405770:	d1d2      	bne.n	405718 <__sfvwrite_r+0x24>
  405772:	f013 0901 	ands.w	r9, r3, #1
  405776:	d145      	bne.n	405804 <__sfvwrite_r+0x110>
  405778:	464f      	mov	r7, r9
  40577a:	9601      	str	r6, [sp, #4]
  40577c:	b337      	cbz	r7, 4057cc <__sfvwrite_r+0xd8>
  40577e:	059a      	lsls	r2, r3, #22
  405780:	f8d4 8008 	ldr.w	r8, [r4, #8]
  405784:	f140 8083 	bpl.w	40588e <__sfvwrite_r+0x19a>
  405788:	4547      	cmp	r7, r8
  40578a:	46c3      	mov	fp, r8
  40578c:	f0c0 80ab 	bcc.w	4058e6 <__sfvwrite_r+0x1f2>
  405790:	f413 6f90 	tst.w	r3, #1152	; 0x480
  405794:	f040 80ac 	bne.w	4058f0 <__sfvwrite_r+0x1fc>
  405798:	6820      	ldr	r0, [r4, #0]
  40579a:	46ba      	mov	sl, r7
  40579c:	465a      	mov	r2, fp
  40579e:	4649      	mov	r1, r9
  4057a0:	f000 fa3e 	bl	405c20 <memmove>
  4057a4:	68a2      	ldr	r2, [r4, #8]
  4057a6:	6823      	ldr	r3, [r4, #0]
  4057a8:	eba2 0208 	sub.w	r2, r2, r8
  4057ac:	445b      	add	r3, fp
  4057ae:	60a2      	str	r2, [r4, #8]
  4057b0:	6023      	str	r3, [r4, #0]
  4057b2:	9a01      	ldr	r2, [sp, #4]
  4057b4:	6893      	ldr	r3, [r2, #8]
  4057b6:	eba3 030a 	sub.w	r3, r3, sl
  4057ba:	44d1      	add	r9, sl
  4057bc:	eba7 070a 	sub.w	r7, r7, sl
  4057c0:	6093      	str	r3, [r2, #8]
  4057c2:	2b00      	cmp	r3, #0
  4057c4:	d0c5      	beq.n	405752 <__sfvwrite_r+0x5e>
  4057c6:	89a3      	ldrh	r3, [r4, #12]
  4057c8:	2f00      	cmp	r7, #0
  4057ca:	d1d8      	bne.n	40577e <__sfvwrite_r+0x8a>
  4057cc:	f8d5 9000 	ldr.w	r9, [r5]
  4057d0:	686f      	ldr	r7, [r5, #4]
  4057d2:	3508      	adds	r5, #8
  4057d4:	e7d2      	b.n	40577c <__sfvwrite_r+0x88>
  4057d6:	f8d5 9000 	ldr.w	r9, [r5]
  4057da:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4057de:	3508      	adds	r5, #8
  4057e0:	e79f      	b.n	405722 <__sfvwrite_r+0x2e>
  4057e2:	2000      	movs	r0, #0
  4057e4:	4770      	bx	lr
  4057e6:	4621      	mov	r1, r4
  4057e8:	9800      	ldr	r0, [sp, #0]
  4057ea:	f7ff fd1f 	bl	40522c <_fflush_r>
  4057ee:	b370      	cbz	r0, 40584e <__sfvwrite_r+0x15a>
  4057f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4057f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4057f8:	f04f 30ff 	mov.w	r0, #4294967295
  4057fc:	81a3      	strh	r3, [r4, #12]
  4057fe:	b003      	add	sp, #12
  405800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405804:	4681      	mov	r9, r0
  405806:	4633      	mov	r3, r6
  405808:	464e      	mov	r6, r9
  40580a:	46a8      	mov	r8, r5
  40580c:	469a      	mov	sl, r3
  40580e:	464d      	mov	r5, r9
  405810:	b34e      	cbz	r6, 405866 <__sfvwrite_r+0x172>
  405812:	b380      	cbz	r0, 405876 <__sfvwrite_r+0x182>
  405814:	6820      	ldr	r0, [r4, #0]
  405816:	6923      	ldr	r3, [r4, #16]
  405818:	6962      	ldr	r2, [r4, #20]
  40581a:	45b1      	cmp	r9, r6
  40581c:	46cb      	mov	fp, r9
  40581e:	bf28      	it	cs
  405820:	46b3      	movcs	fp, r6
  405822:	4298      	cmp	r0, r3
  405824:	465f      	mov	r7, fp
  405826:	d904      	bls.n	405832 <__sfvwrite_r+0x13e>
  405828:	68a3      	ldr	r3, [r4, #8]
  40582a:	4413      	add	r3, r2
  40582c:	459b      	cmp	fp, r3
  40582e:	f300 80a6 	bgt.w	40597e <__sfvwrite_r+0x28a>
  405832:	4593      	cmp	fp, r2
  405834:	db4b      	blt.n	4058ce <__sfvwrite_r+0x1da>
  405836:	4613      	mov	r3, r2
  405838:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40583a:	69e1      	ldr	r1, [r4, #28]
  40583c:	9800      	ldr	r0, [sp, #0]
  40583e:	462a      	mov	r2, r5
  405840:	47b8      	blx	r7
  405842:	1e07      	subs	r7, r0, #0
  405844:	ddd4      	ble.n	4057f0 <__sfvwrite_r+0xfc>
  405846:	ebb9 0907 	subs.w	r9, r9, r7
  40584a:	d0cc      	beq.n	4057e6 <__sfvwrite_r+0xf2>
  40584c:	2001      	movs	r0, #1
  40584e:	f8da 3008 	ldr.w	r3, [sl, #8]
  405852:	1bdb      	subs	r3, r3, r7
  405854:	443d      	add	r5, r7
  405856:	1bf6      	subs	r6, r6, r7
  405858:	f8ca 3008 	str.w	r3, [sl, #8]
  40585c:	2b00      	cmp	r3, #0
  40585e:	f43f af78 	beq.w	405752 <__sfvwrite_r+0x5e>
  405862:	2e00      	cmp	r6, #0
  405864:	d1d5      	bne.n	405812 <__sfvwrite_r+0x11e>
  405866:	f108 0308 	add.w	r3, r8, #8
  40586a:	e913 0060 	ldmdb	r3, {r5, r6}
  40586e:	4698      	mov	r8, r3
  405870:	3308      	adds	r3, #8
  405872:	2e00      	cmp	r6, #0
  405874:	d0f9      	beq.n	40586a <__sfvwrite_r+0x176>
  405876:	4632      	mov	r2, r6
  405878:	210a      	movs	r1, #10
  40587a:	4628      	mov	r0, r5
  40587c:	f000 f980 	bl	405b80 <memchr>
  405880:	2800      	cmp	r0, #0
  405882:	f000 80a1 	beq.w	4059c8 <__sfvwrite_r+0x2d4>
  405886:	3001      	adds	r0, #1
  405888:	eba0 0905 	sub.w	r9, r0, r5
  40588c:	e7c2      	b.n	405814 <__sfvwrite_r+0x120>
  40588e:	6820      	ldr	r0, [r4, #0]
  405890:	6923      	ldr	r3, [r4, #16]
  405892:	4298      	cmp	r0, r3
  405894:	d802      	bhi.n	40589c <__sfvwrite_r+0x1a8>
  405896:	6963      	ldr	r3, [r4, #20]
  405898:	429f      	cmp	r7, r3
  40589a:	d25d      	bcs.n	405958 <__sfvwrite_r+0x264>
  40589c:	45b8      	cmp	r8, r7
  40589e:	bf28      	it	cs
  4058a0:	46b8      	movcs	r8, r7
  4058a2:	4642      	mov	r2, r8
  4058a4:	4649      	mov	r1, r9
  4058a6:	f000 f9bb 	bl	405c20 <memmove>
  4058aa:	68a3      	ldr	r3, [r4, #8]
  4058ac:	6822      	ldr	r2, [r4, #0]
  4058ae:	eba3 0308 	sub.w	r3, r3, r8
  4058b2:	4442      	add	r2, r8
  4058b4:	60a3      	str	r3, [r4, #8]
  4058b6:	6022      	str	r2, [r4, #0]
  4058b8:	b10b      	cbz	r3, 4058be <__sfvwrite_r+0x1ca>
  4058ba:	46c2      	mov	sl, r8
  4058bc:	e779      	b.n	4057b2 <__sfvwrite_r+0xbe>
  4058be:	4621      	mov	r1, r4
  4058c0:	9800      	ldr	r0, [sp, #0]
  4058c2:	f7ff fcb3 	bl	40522c <_fflush_r>
  4058c6:	2800      	cmp	r0, #0
  4058c8:	d192      	bne.n	4057f0 <__sfvwrite_r+0xfc>
  4058ca:	46c2      	mov	sl, r8
  4058cc:	e771      	b.n	4057b2 <__sfvwrite_r+0xbe>
  4058ce:	465a      	mov	r2, fp
  4058d0:	4629      	mov	r1, r5
  4058d2:	f000 f9a5 	bl	405c20 <memmove>
  4058d6:	68a2      	ldr	r2, [r4, #8]
  4058d8:	6823      	ldr	r3, [r4, #0]
  4058da:	eba2 020b 	sub.w	r2, r2, fp
  4058de:	445b      	add	r3, fp
  4058e0:	60a2      	str	r2, [r4, #8]
  4058e2:	6023      	str	r3, [r4, #0]
  4058e4:	e7af      	b.n	405846 <__sfvwrite_r+0x152>
  4058e6:	6820      	ldr	r0, [r4, #0]
  4058e8:	46b8      	mov	r8, r7
  4058ea:	46ba      	mov	sl, r7
  4058ec:	46bb      	mov	fp, r7
  4058ee:	e755      	b.n	40579c <__sfvwrite_r+0xa8>
  4058f0:	6962      	ldr	r2, [r4, #20]
  4058f2:	6820      	ldr	r0, [r4, #0]
  4058f4:	6921      	ldr	r1, [r4, #16]
  4058f6:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4058fa:	eba0 0a01 	sub.w	sl, r0, r1
  4058fe:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  405902:	f10a 0001 	add.w	r0, sl, #1
  405906:	ea4f 0868 	mov.w	r8, r8, asr #1
  40590a:	4438      	add	r0, r7
  40590c:	4540      	cmp	r0, r8
  40590e:	4642      	mov	r2, r8
  405910:	bf84      	itt	hi
  405912:	4680      	movhi	r8, r0
  405914:	4642      	movhi	r2, r8
  405916:	055b      	lsls	r3, r3, #21
  405918:	d544      	bpl.n	4059a4 <__sfvwrite_r+0x2b0>
  40591a:	4611      	mov	r1, r2
  40591c:	9800      	ldr	r0, [sp, #0]
  40591e:	f7fe f8f1 	bl	403b04 <_malloc_r>
  405922:	4683      	mov	fp, r0
  405924:	2800      	cmp	r0, #0
  405926:	d055      	beq.n	4059d4 <__sfvwrite_r+0x2e0>
  405928:	4652      	mov	r2, sl
  40592a:	6921      	ldr	r1, [r4, #16]
  40592c:	f7fe fb9a 	bl	404064 <memcpy>
  405930:	89a3      	ldrh	r3, [r4, #12]
  405932:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  405936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40593a:	81a3      	strh	r3, [r4, #12]
  40593c:	eb0b 000a 	add.w	r0, fp, sl
  405940:	eba8 030a 	sub.w	r3, r8, sl
  405944:	f8c4 b010 	str.w	fp, [r4, #16]
  405948:	f8c4 8014 	str.w	r8, [r4, #20]
  40594c:	6020      	str	r0, [r4, #0]
  40594e:	60a3      	str	r3, [r4, #8]
  405950:	46b8      	mov	r8, r7
  405952:	46ba      	mov	sl, r7
  405954:	46bb      	mov	fp, r7
  405956:	e721      	b.n	40579c <__sfvwrite_r+0xa8>
  405958:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40595c:	42b9      	cmp	r1, r7
  40595e:	bf28      	it	cs
  405960:	4639      	movcs	r1, r7
  405962:	464a      	mov	r2, r9
  405964:	fb91 f1f3 	sdiv	r1, r1, r3
  405968:	9800      	ldr	r0, [sp, #0]
  40596a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40596c:	fb03 f301 	mul.w	r3, r3, r1
  405970:	69e1      	ldr	r1, [r4, #28]
  405972:	47b0      	blx	r6
  405974:	f1b0 0a00 	subs.w	sl, r0, #0
  405978:	f73f af1b 	bgt.w	4057b2 <__sfvwrite_r+0xbe>
  40597c:	e738      	b.n	4057f0 <__sfvwrite_r+0xfc>
  40597e:	461a      	mov	r2, r3
  405980:	4629      	mov	r1, r5
  405982:	9301      	str	r3, [sp, #4]
  405984:	f000 f94c 	bl	405c20 <memmove>
  405988:	6822      	ldr	r2, [r4, #0]
  40598a:	9b01      	ldr	r3, [sp, #4]
  40598c:	9800      	ldr	r0, [sp, #0]
  40598e:	441a      	add	r2, r3
  405990:	6022      	str	r2, [r4, #0]
  405992:	4621      	mov	r1, r4
  405994:	f7ff fc4a 	bl	40522c <_fflush_r>
  405998:	9b01      	ldr	r3, [sp, #4]
  40599a:	2800      	cmp	r0, #0
  40599c:	f47f af28 	bne.w	4057f0 <__sfvwrite_r+0xfc>
  4059a0:	461f      	mov	r7, r3
  4059a2:	e750      	b.n	405846 <__sfvwrite_r+0x152>
  4059a4:	9800      	ldr	r0, [sp, #0]
  4059a6:	f000 f99f 	bl	405ce8 <_realloc_r>
  4059aa:	4683      	mov	fp, r0
  4059ac:	2800      	cmp	r0, #0
  4059ae:	d1c5      	bne.n	40593c <__sfvwrite_r+0x248>
  4059b0:	9d00      	ldr	r5, [sp, #0]
  4059b2:	6921      	ldr	r1, [r4, #16]
  4059b4:	4628      	mov	r0, r5
  4059b6:	f7ff fdb7 	bl	405528 <_free_r>
  4059ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4059be:	220c      	movs	r2, #12
  4059c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4059c4:	602a      	str	r2, [r5, #0]
  4059c6:	e715      	b.n	4057f4 <__sfvwrite_r+0x100>
  4059c8:	f106 0901 	add.w	r9, r6, #1
  4059cc:	e722      	b.n	405814 <__sfvwrite_r+0x120>
  4059ce:	f04f 30ff 	mov.w	r0, #4294967295
  4059d2:	e6bf      	b.n	405754 <__sfvwrite_r+0x60>
  4059d4:	9a00      	ldr	r2, [sp, #0]
  4059d6:	230c      	movs	r3, #12
  4059d8:	6013      	str	r3, [r2, #0]
  4059da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4059de:	e709      	b.n	4057f4 <__sfvwrite_r+0x100>
  4059e0:	7ffffc00 	.word	0x7ffffc00

004059e4 <_fwalk_reent>:
  4059e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4059e8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4059ec:	d01f      	beq.n	405a2e <_fwalk_reent+0x4a>
  4059ee:	4688      	mov	r8, r1
  4059f0:	4606      	mov	r6, r0
  4059f2:	f04f 0900 	mov.w	r9, #0
  4059f6:	687d      	ldr	r5, [r7, #4]
  4059f8:	68bc      	ldr	r4, [r7, #8]
  4059fa:	3d01      	subs	r5, #1
  4059fc:	d411      	bmi.n	405a22 <_fwalk_reent+0x3e>
  4059fe:	89a3      	ldrh	r3, [r4, #12]
  405a00:	2b01      	cmp	r3, #1
  405a02:	f105 35ff 	add.w	r5, r5, #4294967295
  405a06:	d908      	bls.n	405a1a <_fwalk_reent+0x36>
  405a08:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  405a0c:	3301      	adds	r3, #1
  405a0e:	4621      	mov	r1, r4
  405a10:	4630      	mov	r0, r6
  405a12:	d002      	beq.n	405a1a <_fwalk_reent+0x36>
  405a14:	47c0      	blx	r8
  405a16:	ea49 0900 	orr.w	r9, r9, r0
  405a1a:	1c6b      	adds	r3, r5, #1
  405a1c:	f104 0468 	add.w	r4, r4, #104	; 0x68
  405a20:	d1ed      	bne.n	4059fe <_fwalk_reent+0x1a>
  405a22:	683f      	ldr	r7, [r7, #0]
  405a24:	2f00      	cmp	r7, #0
  405a26:	d1e6      	bne.n	4059f6 <_fwalk_reent+0x12>
  405a28:	4648      	mov	r0, r9
  405a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405a2e:	46b9      	mov	r9, r7
  405a30:	4648      	mov	r0, r9
  405a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405a36:	bf00      	nop

00405a38 <__locale_mb_cur_max>:
  405a38:	4b04      	ldr	r3, [pc, #16]	; (405a4c <__locale_mb_cur_max+0x14>)
  405a3a:	4a05      	ldr	r2, [pc, #20]	; (405a50 <__locale_mb_cur_max+0x18>)
  405a3c:	681b      	ldr	r3, [r3, #0]
  405a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  405a40:	2b00      	cmp	r3, #0
  405a42:	bf08      	it	eq
  405a44:	4613      	moveq	r3, r2
  405a46:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  405a4a:	4770      	bx	lr
  405a4c:	2040004c 	.word	0x2040004c
  405a50:	2040088c 	.word	0x2040088c

00405a54 <__retarget_lock_init_recursive>:
  405a54:	4770      	bx	lr
  405a56:	bf00      	nop

00405a58 <__retarget_lock_close_recursive>:
  405a58:	4770      	bx	lr
  405a5a:	bf00      	nop

00405a5c <__retarget_lock_acquire_recursive>:
  405a5c:	4770      	bx	lr
  405a5e:	bf00      	nop

00405a60 <__retarget_lock_release_recursive>:
  405a60:	4770      	bx	lr
  405a62:	bf00      	nop

00405a64 <__swhatbuf_r>:
  405a64:	b570      	push	{r4, r5, r6, lr}
  405a66:	460c      	mov	r4, r1
  405a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405a6c:	2900      	cmp	r1, #0
  405a6e:	b090      	sub	sp, #64	; 0x40
  405a70:	4615      	mov	r5, r2
  405a72:	461e      	mov	r6, r3
  405a74:	db14      	blt.n	405aa0 <__swhatbuf_r+0x3c>
  405a76:	aa01      	add	r2, sp, #4
  405a78:	f000 fd0c 	bl	406494 <_fstat_r>
  405a7c:	2800      	cmp	r0, #0
  405a7e:	db0f      	blt.n	405aa0 <__swhatbuf_r+0x3c>
  405a80:	9a02      	ldr	r2, [sp, #8]
  405a82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405a86:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  405a8a:	fab2 f282 	clz	r2, r2
  405a8e:	0952      	lsrs	r2, r2, #5
  405a90:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405a94:	f44f 6000 	mov.w	r0, #2048	; 0x800
  405a98:	6032      	str	r2, [r6, #0]
  405a9a:	602b      	str	r3, [r5, #0]
  405a9c:	b010      	add	sp, #64	; 0x40
  405a9e:	bd70      	pop	{r4, r5, r6, pc}
  405aa0:	89a2      	ldrh	r2, [r4, #12]
  405aa2:	2300      	movs	r3, #0
  405aa4:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  405aa8:	6033      	str	r3, [r6, #0]
  405aaa:	d004      	beq.n	405ab6 <__swhatbuf_r+0x52>
  405aac:	2240      	movs	r2, #64	; 0x40
  405aae:	4618      	mov	r0, r3
  405ab0:	602a      	str	r2, [r5, #0]
  405ab2:	b010      	add	sp, #64	; 0x40
  405ab4:	bd70      	pop	{r4, r5, r6, pc}
  405ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405aba:	602b      	str	r3, [r5, #0]
  405abc:	b010      	add	sp, #64	; 0x40
  405abe:	bd70      	pop	{r4, r5, r6, pc}

00405ac0 <__smakebuf_r>:
  405ac0:	898a      	ldrh	r2, [r1, #12]
  405ac2:	0792      	lsls	r2, r2, #30
  405ac4:	460b      	mov	r3, r1
  405ac6:	d506      	bpl.n	405ad6 <__smakebuf_r+0x16>
  405ac8:	f101 0243 	add.w	r2, r1, #67	; 0x43
  405acc:	2101      	movs	r1, #1
  405ace:	601a      	str	r2, [r3, #0]
  405ad0:	611a      	str	r2, [r3, #16]
  405ad2:	6159      	str	r1, [r3, #20]
  405ad4:	4770      	bx	lr
  405ad6:	b5f0      	push	{r4, r5, r6, r7, lr}
  405ad8:	b083      	sub	sp, #12
  405ada:	ab01      	add	r3, sp, #4
  405adc:	466a      	mov	r2, sp
  405ade:	460c      	mov	r4, r1
  405ae0:	4606      	mov	r6, r0
  405ae2:	f7ff ffbf 	bl	405a64 <__swhatbuf_r>
  405ae6:	9900      	ldr	r1, [sp, #0]
  405ae8:	4605      	mov	r5, r0
  405aea:	4630      	mov	r0, r6
  405aec:	f7fe f80a 	bl	403b04 <_malloc_r>
  405af0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405af4:	b1d8      	cbz	r0, 405b2e <__smakebuf_r+0x6e>
  405af6:	9a01      	ldr	r2, [sp, #4]
  405af8:	4f15      	ldr	r7, [pc, #84]	; (405b50 <__smakebuf_r+0x90>)
  405afa:	9900      	ldr	r1, [sp, #0]
  405afc:	63f7      	str	r7, [r6, #60]	; 0x3c
  405afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405b02:	81a3      	strh	r3, [r4, #12]
  405b04:	6020      	str	r0, [r4, #0]
  405b06:	6120      	str	r0, [r4, #16]
  405b08:	6161      	str	r1, [r4, #20]
  405b0a:	b91a      	cbnz	r2, 405b14 <__smakebuf_r+0x54>
  405b0c:	432b      	orrs	r3, r5
  405b0e:	81a3      	strh	r3, [r4, #12]
  405b10:	b003      	add	sp, #12
  405b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405b14:	4630      	mov	r0, r6
  405b16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405b1a:	f000 fccf 	bl	4064bc <_isatty_r>
  405b1e:	b1a0      	cbz	r0, 405b4a <__smakebuf_r+0x8a>
  405b20:	89a3      	ldrh	r3, [r4, #12]
  405b22:	f023 0303 	bic.w	r3, r3, #3
  405b26:	f043 0301 	orr.w	r3, r3, #1
  405b2a:	b21b      	sxth	r3, r3
  405b2c:	e7ee      	b.n	405b0c <__smakebuf_r+0x4c>
  405b2e:	059a      	lsls	r2, r3, #22
  405b30:	d4ee      	bmi.n	405b10 <__smakebuf_r+0x50>
  405b32:	f023 0303 	bic.w	r3, r3, #3
  405b36:	f104 0243 	add.w	r2, r4, #67	; 0x43
  405b3a:	f043 0302 	orr.w	r3, r3, #2
  405b3e:	2101      	movs	r1, #1
  405b40:	81a3      	strh	r3, [r4, #12]
  405b42:	6022      	str	r2, [r4, #0]
  405b44:	6122      	str	r2, [r4, #16]
  405b46:	6161      	str	r1, [r4, #20]
  405b48:	e7e2      	b.n	405b10 <__smakebuf_r+0x50>
  405b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405b4e:	e7dd      	b.n	405b0c <__smakebuf_r+0x4c>
  405b50:	00405281 	.word	0x00405281

00405b54 <__ascii_mbtowc>:
  405b54:	b082      	sub	sp, #8
  405b56:	b149      	cbz	r1, 405b6c <__ascii_mbtowc+0x18>
  405b58:	b15a      	cbz	r2, 405b72 <__ascii_mbtowc+0x1e>
  405b5a:	b16b      	cbz	r3, 405b78 <__ascii_mbtowc+0x24>
  405b5c:	7813      	ldrb	r3, [r2, #0]
  405b5e:	600b      	str	r3, [r1, #0]
  405b60:	7812      	ldrb	r2, [r2, #0]
  405b62:	1c10      	adds	r0, r2, #0
  405b64:	bf18      	it	ne
  405b66:	2001      	movne	r0, #1
  405b68:	b002      	add	sp, #8
  405b6a:	4770      	bx	lr
  405b6c:	a901      	add	r1, sp, #4
  405b6e:	2a00      	cmp	r2, #0
  405b70:	d1f3      	bne.n	405b5a <__ascii_mbtowc+0x6>
  405b72:	4610      	mov	r0, r2
  405b74:	b002      	add	sp, #8
  405b76:	4770      	bx	lr
  405b78:	f06f 0001 	mvn.w	r0, #1
  405b7c:	e7f4      	b.n	405b68 <__ascii_mbtowc+0x14>
  405b7e:	bf00      	nop

00405b80 <memchr>:
  405b80:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405b84:	2a10      	cmp	r2, #16
  405b86:	db2b      	blt.n	405be0 <memchr+0x60>
  405b88:	f010 0f07 	tst.w	r0, #7
  405b8c:	d008      	beq.n	405ba0 <memchr+0x20>
  405b8e:	f810 3b01 	ldrb.w	r3, [r0], #1
  405b92:	3a01      	subs	r2, #1
  405b94:	428b      	cmp	r3, r1
  405b96:	d02d      	beq.n	405bf4 <memchr+0x74>
  405b98:	f010 0f07 	tst.w	r0, #7
  405b9c:	b342      	cbz	r2, 405bf0 <memchr+0x70>
  405b9e:	d1f6      	bne.n	405b8e <memchr+0xe>
  405ba0:	b4f0      	push	{r4, r5, r6, r7}
  405ba2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405ba6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  405baa:	f022 0407 	bic.w	r4, r2, #7
  405bae:	f07f 0700 	mvns.w	r7, #0
  405bb2:	2300      	movs	r3, #0
  405bb4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405bb8:	3c08      	subs	r4, #8
  405bba:	ea85 0501 	eor.w	r5, r5, r1
  405bbe:	ea86 0601 	eor.w	r6, r6, r1
  405bc2:	fa85 f547 	uadd8	r5, r5, r7
  405bc6:	faa3 f587 	sel	r5, r3, r7
  405bca:	fa86 f647 	uadd8	r6, r6, r7
  405bce:	faa5 f687 	sel	r6, r5, r7
  405bd2:	b98e      	cbnz	r6, 405bf8 <memchr+0x78>
  405bd4:	d1ee      	bne.n	405bb4 <memchr+0x34>
  405bd6:	bcf0      	pop	{r4, r5, r6, r7}
  405bd8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405bdc:	f002 0207 	and.w	r2, r2, #7
  405be0:	b132      	cbz	r2, 405bf0 <memchr+0x70>
  405be2:	f810 3b01 	ldrb.w	r3, [r0], #1
  405be6:	3a01      	subs	r2, #1
  405be8:	ea83 0301 	eor.w	r3, r3, r1
  405bec:	b113      	cbz	r3, 405bf4 <memchr+0x74>
  405bee:	d1f8      	bne.n	405be2 <memchr+0x62>
  405bf0:	2000      	movs	r0, #0
  405bf2:	4770      	bx	lr
  405bf4:	3801      	subs	r0, #1
  405bf6:	4770      	bx	lr
  405bf8:	2d00      	cmp	r5, #0
  405bfa:	bf06      	itte	eq
  405bfc:	4635      	moveq	r5, r6
  405bfe:	3803      	subeq	r0, #3
  405c00:	3807      	subne	r0, #7
  405c02:	f015 0f01 	tst.w	r5, #1
  405c06:	d107      	bne.n	405c18 <memchr+0x98>
  405c08:	3001      	adds	r0, #1
  405c0a:	f415 7f80 	tst.w	r5, #256	; 0x100
  405c0e:	bf02      	ittt	eq
  405c10:	3001      	addeq	r0, #1
  405c12:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405c16:	3001      	addeq	r0, #1
  405c18:	bcf0      	pop	{r4, r5, r6, r7}
  405c1a:	3801      	subs	r0, #1
  405c1c:	4770      	bx	lr
  405c1e:	bf00      	nop

00405c20 <memmove>:
  405c20:	4288      	cmp	r0, r1
  405c22:	b5f0      	push	{r4, r5, r6, r7, lr}
  405c24:	d90d      	bls.n	405c42 <memmove+0x22>
  405c26:	188b      	adds	r3, r1, r2
  405c28:	4298      	cmp	r0, r3
  405c2a:	d20a      	bcs.n	405c42 <memmove+0x22>
  405c2c:	1884      	adds	r4, r0, r2
  405c2e:	2a00      	cmp	r2, #0
  405c30:	d051      	beq.n	405cd6 <memmove+0xb6>
  405c32:	4622      	mov	r2, r4
  405c34:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  405c38:	f802 4d01 	strb.w	r4, [r2, #-1]!
  405c3c:	4299      	cmp	r1, r3
  405c3e:	d1f9      	bne.n	405c34 <memmove+0x14>
  405c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405c42:	2a0f      	cmp	r2, #15
  405c44:	d948      	bls.n	405cd8 <memmove+0xb8>
  405c46:	ea41 0300 	orr.w	r3, r1, r0
  405c4a:	079b      	lsls	r3, r3, #30
  405c4c:	d146      	bne.n	405cdc <memmove+0xbc>
  405c4e:	f100 0410 	add.w	r4, r0, #16
  405c52:	f101 0310 	add.w	r3, r1, #16
  405c56:	4615      	mov	r5, r2
  405c58:	f853 6c10 	ldr.w	r6, [r3, #-16]
  405c5c:	f844 6c10 	str.w	r6, [r4, #-16]
  405c60:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405c64:	f844 6c0c 	str.w	r6, [r4, #-12]
  405c68:	f853 6c08 	ldr.w	r6, [r3, #-8]
  405c6c:	f844 6c08 	str.w	r6, [r4, #-8]
  405c70:	3d10      	subs	r5, #16
  405c72:	f853 6c04 	ldr.w	r6, [r3, #-4]
  405c76:	f844 6c04 	str.w	r6, [r4, #-4]
  405c7a:	2d0f      	cmp	r5, #15
  405c7c:	f103 0310 	add.w	r3, r3, #16
  405c80:	f104 0410 	add.w	r4, r4, #16
  405c84:	d8e8      	bhi.n	405c58 <memmove+0x38>
  405c86:	f1a2 0310 	sub.w	r3, r2, #16
  405c8a:	f023 030f 	bic.w	r3, r3, #15
  405c8e:	f002 0e0f 	and.w	lr, r2, #15
  405c92:	3310      	adds	r3, #16
  405c94:	f1be 0f03 	cmp.w	lr, #3
  405c98:	4419      	add	r1, r3
  405c9a:	4403      	add	r3, r0
  405c9c:	d921      	bls.n	405ce2 <memmove+0xc2>
  405c9e:	1f1e      	subs	r6, r3, #4
  405ca0:	460d      	mov	r5, r1
  405ca2:	4674      	mov	r4, lr
  405ca4:	3c04      	subs	r4, #4
  405ca6:	f855 7b04 	ldr.w	r7, [r5], #4
  405caa:	f846 7f04 	str.w	r7, [r6, #4]!
  405cae:	2c03      	cmp	r4, #3
  405cb0:	d8f8      	bhi.n	405ca4 <memmove+0x84>
  405cb2:	f1ae 0404 	sub.w	r4, lr, #4
  405cb6:	f024 0403 	bic.w	r4, r4, #3
  405cba:	3404      	adds	r4, #4
  405cbc:	4421      	add	r1, r4
  405cbe:	4423      	add	r3, r4
  405cc0:	f002 0203 	and.w	r2, r2, #3
  405cc4:	b162      	cbz	r2, 405ce0 <memmove+0xc0>
  405cc6:	3b01      	subs	r3, #1
  405cc8:	440a      	add	r2, r1
  405cca:	f811 4b01 	ldrb.w	r4, [r1], #1
  405cce:	f803 4f01 	strb.w	r4, [r3, #1]!
  405cd2:	428a      	cmp	r2, r1
  405cd4:	d1f9      	bne.n	405cca <memmove+0xaa>
  405cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405cd8:	4603      	mov	r3, r0
  405cda:	e7f3      	b.n	405cc4 <memmove+0xa4>
  405cdc:	4603      	mov	r3, r0
  405cde:	e7f2      	b.n	405cc6 <memmove+0xa6>
  405ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405ce2:	4672      	mov	r2, lr
  405ce4:	e7ee      	b.n	405cc4 <memmove+0xa4>
  405ce6:	bf00      	nop

00405ce8 <_realloc_r>:
  405ce8:	2900      	cmp	r1, #0
  405cea:	f000 8095 	beq.w	405e18 <_realloc_r+0x130>
  405cee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405cf2:	460d      	mov	r5, r1
  405cf4:	4616      	mov	r6, r2
  405cf6:	b083      	sub	sp, #12
  405cf8:	4680      	mov	r8, r0
  405cfa:	f106 070b 	add.w	r7, r6, #11
  405cfe:	f7fe fa99 	bl	404234 <__malloc_lock>
  405d02:	f855 ec04 	ldr.w	lr, [r5, #-4]
  405d06:	2f16      	cmp	r7, #22
  405d08:	f02e 0403 	bic.w	r4, lr, #3
  405d0c:	f1a5 0908 	sub.w	r9, r5, #8
  405d10:	d83c      	bhi.n	405d8c <_realloc_r+0xa4>
  405d12:	2210      	movs	r2, #16
  405d14:	4617      	mov	r7, r2
  405d16:	42be      	cmp	r6, r7
  405d18:	d83d      	bhi.n	405d96 <_realloc_r+0xae>
  405d1a:	4294      	cmp	r4, r2
  405d1c:	da43      	bge.n	405da6 <_realloc_r+0xbe>
  405d1e:	4bc4      	ldr	r3, [pc, #784]	; (406030 <_realloc_r+0x348>)
  405d20:	6899      	ldr	r1, [r3, #8]
  405d22:	eb09 0004 	add.w	r0, r9, r4
  405d26:	4288      	cmp	r0, r1
  405d28:	f000 80b4 	beq.w	405e94 <_realloc_r+0x1ac>
  405d2c:	6843      	ldr	r3, [r0, #4]
  405d2e:	f023 0101 	bic.w	r1, r3, #1
  405d32:	4401      	add	r1, r0
  405d34:	6849      	ldr	r1, [r1, #4]
  405d36:	07c9      	lsls	r1, r1, #31
  405d38:	d54c      	bpl.n	405dd4 <_realloc_r+0xec>
  405d3a:	f01e 0f01 	tst.w	lr, #1
  405d3e:	f000 809b 	beq.w	405e78 <_realloc_r+0x190>
  405d42:	4631      	mov	r1, r6
  405d44:	4640      	mov	r0, r8
  405d46:	f7fd fedd 	bl	403b04 <_malloc_r>
  405d4a:	4606      	mov	r6, r0
  405d4c:	2800      	cmp	r0, #0
  405d4e:	d03a      	beq.n	405dc6 <_realloc_r+0xde>
  405d50:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405d54:	f023 0301 	bic.w	r3, r3, #1
  405d58:	444b      	add	r3, r9
  405d5a:	f1a0 0208 	sub.w	r2, r0, #8
  405d5e:	429a      	cmp	r2, r3
  405d60:	f000 8121 	beq.w	405fa6 <_realloc_r+0x2be>
  405d64:	1f22      	subs	r2, r4, #4
  405d66:	2a24      	cmp	r2, #36	; 0x24
  405d68:	f200 8107 	bhi.w	405f7a <_realloc_r+0x292>
  405d6c:	2a13      	cmp	r2, #19
  405d6e:	f200 80db 	bhi.w	405f28 <_realloc_r+0x240>
  405d72:	4603      	mov	r3, r0
  405d74:	462a      	mov	r2, r5
  405d76:	6811      	ldr	r1, [r2, #0]
  405d78:	6019      	str	r1, [r3, #0]
  405d7a:	6851      	ldr	r1, [r2, #4]
  405d7c:	6059      	str	r1, [r3, #4]
  405d7e:	6892      	ldr	r2, [r2, #8]
  405d80:	609a      	str	r2, [r3, #8]
  405d82:	4629      	mov	r1, r5
  405d84:	4640      	mov	r0, r8
  405d86:	f7ff fbcf 	bl	405528 <_free_r>
  405d8a:	e01c      	b.n	405dc6 <_realloc_r+0xde>
  405d8c:	f027 0707 	bic.w	r7, r7, #7
  405d90:	2f00      	cmp	r7, #0
  405d92:	463a      	mov	r2, r7
  405d94:	dabf      	bge.n	405d16 <_realloc_r+0x2e>
  405d96:	2600      	movs	r6, #0
  405d98:	230c      	movs	r3, #12
  405d9a:	4630      	mov	r0, r6
  405d9c:	f8c8 3000 	str.w	r3, [r8]
  405da0:	b003      	add	sp, #12
  405da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405da6:	462e      	mov	r6, r5
  405da8:	1be3      	subs	r3, r4, r7
  405daa:	2b0f      	cmp	r3, #15
  405dac:	d81e      	bhi.n	405dec <_realloc_r+0x104>
  405dae:	f8d9 3004 	ldr.w	r3, [r9, #4]
  405db2:	f003 0301 	and.w	r3, r3, #1
  405db6:	4323      	orrs	r3, r4
  405db8:	444c      	add	r4, r9
  405dba:	f8c9 3004 	str.w	r3, [r9, #4]
  405dbe:	6863      	ldr	r3, [r4, #4]
  405dc0:	f043 0301 	orr.w	r3, r3, #1
  405dc4:	6063      	str	r3, [r4, #4]
  405dc6:	4640      	mov	r0, r8
  405dc8:	f7fe fa3a 	bl	404240 <__malloc_unlock>
  405dcc:	4630      	mov	r0, r6
  405dce:	b003      	add	sp, #12
  405dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405dd4:	f023 0303 	bic.w	r3, r3, #3
  405dd8:	18e1      	adds	r1, r4, r3
  405dda:	4291      	cmp	r1, r2
  405ddc:	db1f      	blt.n	405e1e <_realloc_r+0x136>
  405dde:	68c3      	ldr	r3, [r0, #12]
  405de0:	6882      	ldr	r2, [r0, #8]
  405de2:	462e      	mov	r6, r5
  405de4:	60d3      	str	r3, [r2, #12]
  405de6:	460c      	mov	r4, r1
  405de8:	609a      	str	r2, [r3, #8]
  405dea:	e7dd      	b.n	405da8 <_realloc_r+0xc0>
  405dec:	f8d9 2004 	ldr.w	r2, [r9, #4]
  405df0:	eb09 0107 	add.w	r1, r9, r7
  405df4:	f002 0201 	and.w	r2, r2, #1
  405df8:	444c      	add	r4, r9
  405dfa:	f043 0301 	orr.w	r3, r3, #1
  405dfe:	4317      	orrs	r7, r2
  405e00:	f8c9 7004 	str.w	r7, [r9, #4]
  405e04:	604b      	str	r3, [r1, #4]
  405e06:	6863      	ldr	r3, [r4, #4]
  405e08:	f043 0301 	orr.w	r3, r3, #1
  405e0c:	3108      	adds	r1, #8
  405e0e:	6063      	str	r3, [r4, #4]
  405e10:	4640      	mov	r0, r8
  405e12:	f7ff fb89 	bl	405528 <_free_r>
  405e16:	e7d6      	b.n	405dc6 <_realloc_r+0xde>
  405e18:	4611      	mov	r1, r2
  405e1a:	f7fd be73 	b.w	403b04 <_malloc_r>
  405e1e:	f01e 0f01 	tst.w	lr, #1
  405e22:	d18e      	bne.n	405d42 <_realloc_r+0x5a>
  405e24:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405e28:	eba9 0a01 	sub.w	sl, r9, r1
  405e2c:	f8da 1004 	ldr.w	r1, [sl, #4]
  405e30:	f021 0103 	bic.w	r1, r1, #3
  405e34:	440b      	add	r3, r1
  405e36:	4423      	add	r3, r4
  405e38:	4293      	cmp	r3, r2
  405e3a:	db25      	blt.n	405e88 <_realloc_r+0x1a0>
  405e3c:	68c2      	ldr	r2, [r0, #12]
  405e3e:	6881      	ldr	r1, [r0, #8]
  405e40:	4656      	mov	r6, sl
  405e42:	60ca      	str	r2, [r1, #12]
  405e44:	6091      	str	r1, [r2, #8]
  405e46:	f8da 100c 	ldr.w	r1, [sl, #12]
  405e4a:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405e4e:	1f22      	subs	r2, r4, #4
  405e50:	2a24      	cmp	r2, #36	; 0x24
  405e52:	60c1      	str	r1, [r0, #12]
  405e54:	6088      	str	r0, [r1, #8]
  405e56:	f200 8094 	bhi.w	405f82 <_realloc_r+0x29a>
  405e5a:	2a13      	cmp	r2, #19
  405e5c:	d96f      	bls.n	405f3e <_realloc_r+0x256>
  405e5e:	6829      	ldr	r1, [r5, #0]
  405e60:	f8ca 1008 	str.w	r1, [sl, #8]
  405e64:	6869      	ldr	r1, [r5, #4]
  405e66:	f8ca 100c 	str.w	r1, [sl, #12]
  405e6a:	2a1b      	cmp	r2, #27
  405e6c:	f200 80a2 	bhi.w	405fb4 <_realloc_r+0x2cc>
  405e70:	3508      	adds	r5, #8
  405e72:	f10a 0210 	add.w	r2, sl, #16
  405e76:	e063      	b.n	405f40 <_realloc_r+0x258>
  405e78:	f855 3c08 	ldr.w	r3, [r5, #-8]
  405e7c:	eba9 0a03 	sub.w	sl, r9, r3
  405e80:	f8da 1004 	ldr.w	r1, [sl, #4]
  405e84:	f021 0103 	bic.w	r1, r1, #3
  405e88:	1863      	adds	r3, r4, r1
  405e8a:	4293      	cmp	r3, r2
  405e8c:	f6ff af59 	blt.w	405d42 <_realloc_r+0x5a>
  405e90:	4656      	mov	r6, sl
  405e92:	e7d8      	b.n	405e46 <_realloc_r+0x15e>
  405e94:	6841      	ldr	r1, [r0, #4]
  405e96:	f021 0b03 	bic.w	fp, r1, #3
  405e9a:	44a3      	add	fp, r4
  405e9c:	f107 0010 	add.w	r0, r7, #16
  405ea0:	4583      	cmp	fp, r0
  405ea2:	da56      	bge.n	405f52 <_realloc_r+0x26a>
  405ea4:	f01e 0f01 	tst.w	lr, #1
  405ea8:	f47f af4b 	bne.w	405d42 <_realloc_r+0x5a>
  405eac:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405eb0:	eba9 0a01 	sub.w	sl, r9, r1
  405eb4:	f8da 1004 	ldr.w	r1, [sl, #4]
  405eb8:	f021 0103 	bic.w	r1, r1, #3
  405ebc:	448b      	add	fp, r1
  405ebe:	4558      	cmp	r0, fp
  405ec0:	dce2      	bgt.n	405e88 <_realloc_r+0x1a0>
  405ec2:	4656      	mov	r6, sl
  405ec4:	f8da 100c 	ldr.w	r1, [sl, #12]
  405ec8:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405ecc:	1f22      	subs	r2, r4, #4
  405ece:	2a24      	cmp	r2, #36	; 0x24
  405ed0:	60c1      	str	r1, [r0, #12]
  405ed2:	6088      	str	r0, [r1, #8]
  405ed4:	f200 808f 	bhi.w	405ff6 <_realloc_r+0x30e>
  405ed8:	2a13      	cmp	r2, #19
  405eda:	f240 808a 	bls.w	405ff2 <_realloc_r+0x30a>
  405ede:	6829      	ldr	r1, [r5, #0]
  405ee0:	f8ca 1008 	str.w	r1, [sl, #8]
  405ee4:	6869      	ldr	r1, [r5, #4]
  405ee6:	f8ca 100c 	str.w	r1, [sl, #12]
  405eea:	2a1b      	cmp	r2, #27
  405eec:	f200 808a 	bhi.w	406004 <_realloc_r+0x31c>
  405ef0:	3508      	adds	r5, #8
  405ef2:	f10a 0210 	add.w	r2, sl, #16
  405ef6:	6829      	ldr	r1, [r5, #0]
  405ef8:	6011      	str	r1, [r2, #0]
  405efa:	6869      	ldr	r1, [r5, #4]
  405efc:	6051      	str	r1, [r2, #4]
  405efe:	68a9      	ldr	r1, [r5, #8]
  405f00:	6091      	str	r1, [r2, #8]
  405f02:	eb0a 0107 	add.w	r1, sl, r7
  405f06:	ebab 0207 	sub.w	r2, fp, r7
  405f0a:	f042 0201 	orr.w	r2, r2, #1
  405f0e:	6099      	str	r1, [r3, #8]
  405f10:	604a      	str	r2, [r1, #4]
  405f12:	f8da 3004 	ldr.w	r3, [sl, #4]
  405f16:	f003 0301 	and.w	r3, r3, #1
  405f1a:	431f      	orrs	r7, r3
  405f1c:	4640      	mov	r0, r8
  405f1e:	f8ca 7004 	str.w	r7, [sl, #4]
  405f22:	f7fe f98d 	bl	404240 <__malloc_unlock>
  405f26:	e751      	b.n	405dcc <_realloc_r+0xe4>
  405f28:	682b      	ldr	r3, [r5, #0]
  405f2a:	6003      	str	r3, [r0, #0]
  405f2c:	686b      	ldr	r3, [r5, #4]
  405f2e:	6043      	str	r3, [r0, #4]
  405f30:	2a1b      	cmp	r2, #27
  405f32:	d82d      	bhi.n	405f90 <_realloc_r+0x2a8>
  405f34:	f100 0308 	add.w	r3, r0, #8
  405f38:	f105 0208 	add.w	r2, r5, #8
  405f3c:	e71b      	b.n	405d76 <_realloc_r+0x8e>
  405f3e:	4632      	mov	r2, r6
  405f40:	6829      	ldr	r1, [r5, #0]
  405f42:	6011      	str	r1, [r2, #0]
  405f44:	6869      	ldr	r1, [r5, #4]
  405f46:	6051      	str	r1, [r2, #4]
  405f48:	68a9      	ldr	r1, [r5, #8]
  405f4a:	6091      	str	r1, [r2, #8]
  405f4c:	461c      	mov	r4, r3
  405f4e:	46d1      	mov	r9, sl
  405f50:	e72a      	b.n	405da8 <_realloc_r+0xc0>
  405f52:	eb09 0107 	add.w	r1, r9, r7
  405f56:	ebab 0b07 	sub.w	fp, fp, r7
  405f5a:	f04b 0201 	orr.w	r2, fp, #1
  405f5e:	6099      	str	r1, [r3, #8]
  405f60:	604a      	str	r2, [r1, #4]
  405f62:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405f66:	f003 0301 	and.w	r3, r3, #1
  405f6a:	431f      	orrs	r7, r3
  405f6c:	4640      	mov	r0, r8
  405f6e:	f845 7c04 	str.w	r7, [r5, #-4]
  405f72:	f7fe f965 	bl	404240 <__malloc_unlock>
  405f76:	462e      	mov	r6, r5
  405f78:	e728      	b.n	405dcc <_realloc_r+0xe4>
  405f7a:	4629      	mov	r1, r5
  405f7c:	f7ff fe50 	bl	405c20 <memmove>
  405f80:	e6ff      	b.n	405d82 <_realloc_r+0x9a>
  405f82:	4629      	mov	r1, r5
  405f84:	4630      	mov	r0, r6
  405f86:	461c      	mov	r4, r3
  405f88:	46d1      	mov	r9, sl
  405f8a:	f7ff fe49 	bl	405c20 <memmove>
  405f8e:	e70b      	b.n	405da8 <_realloc_r+0xc0>
  405f90:	68ab      	ldr	r3, [r5, #8]
  405f92:	6083      	str	r3, [r0, #8]
  405f94:	68eb      	ldr	r3, [r5, #12]
  405f96:	60c3      	str	r3, [r0, #12]
  405f98:	2a24      	cmp	r2, #36	; 0x24
  405f9a:	d017      	beq.n	405fcc <_realloc_r+0x2e4>
  405f9c:	f100 0310 	add.w	r3, r0, #16
  405fa0:	f105 0210 	add.w	r2, r5, #16
  405fa4:	e6e7      	b.n	405d76 <_realloc_r+0x8e>
  405fa6:	f850 3c04 	ldr.w	r3, [r0, #-4]
  405faa:	f023 0303 	bic.w	r3, r3, #3
  405fae:	441c      	add	r4, r3
  405fb0:	462e      	mov	r6, r5
  405fb2:	e6f9      	b.n	405da8 <_realloc_r+0xc0>
  405fb4:	68a9      	ldr	r1, [r5, #8]
  405fb6:	f8ca 1010 	str.w	r1, [sl, #16]
  405fba:	68e9      	ldr	r1, [r5, #12]
  405fbc:	f8ca 1014 	str.w	r1, [sl, #20]
  405fc0:	2a24      	cmp	r2, #36	; 0x24
  405fc2:	d00c      	beq.n	405fde <_realloc_r+0x2f6>
  405fc4:	3510      	adds	r5, #16
  405fc6:	f10a 0218 	add.w	r2, sl, #24
  405fca:	e7b9      	b.n	405f40 <_realloc_r+0x258>
  405fcc:	692b      	ldr	r3, [r5, #16]
  405fce:	6103      	str	r3, [r0, #16]
  405fd0:	696b      	ldr	r3, [r5, #20]
  405fd2:	6143      	str	r3, [r0, #20]
  405fd4:	f105 0218 	add.w	r2, r5, #24
  405fd8:	f100 0318 	add.w	r3, r0, #24
  405fdc:	e6cb      	b.n	405d76 <_realloc_r+0x8e>
  405fde:	692a      	ldr	r2, [r5, #16]
  405fe0:	f8ca 2018 	str.w	r2, [sl, #24]
  405fe4:	696a      	ldr	r2, [r5, #20]
  405fe6:	f8ca 201c 	str.w	r2, [sl, #28]
  405fea:	3518      	adds	r5, #24
  405fec:	f10a 0220 	add.w	r2, sl, #32
  405ff0:	e7a6      	b.n	405f40 <_realloc_r+0x258>
  405ff2:	4632      	mov	r2, r6
  405ff4:	e77f      	b.n	405ef6 <_realloc_r+0x20e>
  405ff6:	4629      	mov	r1, r5
  405ff8:	4630      	mov	r0, r6
  405ffa:	9301      	str	r3, [sp, #4]
  405ffc:	f7ff fe10 	bl	405c20 <memmove>
  406000:	9b01      	ldr	r3, [sp, #4]
  406002:	e77e      	b.n	405f02 <_realloc_r+0x21a>
  406004:	68a9      	ldr	r1, [r5, #8]
  406006:	f8ca 1010 	str.w	r1, [sl, #16]
  40600a:	68e9      	ldr	r1, [r5, #12]
  40600c:	f8ca 1014 	str.w	r1, [sl, #20]
  406010:	2a24      	cmp	r2, #36	; 0x24
  406012:	d003      	beq.n	40601c <_realloc_r+0x334>
  406014:	3510      	adds	r5, #16
  406016:	f10a 0218 	add.w	r2, sl, #24
  40601a:	e76c      	b.n	405ef6 <_realloc_r+0x20e>
  40601c:	692a      	ldr	r2, [r5, #16]
  40601e:	f8ca 2018 	str.w	r2, [sl, #24]
  406022:	696a      	ldr	r2, [r5, #20]
  406024:	f8ca 201c 	str.w	r2, [sl, #28]
  406028:	3518      	adds	r5, #24
  40602a:	f10a 0220 	add.w	r2, sl, #32
  40602e:	e762      	b.n	405ef6 <_realloc_r+0x20e>
  406030:	20400478 	.word	0x20400478

00406034 <__sread>:
  406034:	b510      	push	{r4, lr}
  406036:	460c      	mov	r4, r1
  406038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40603c:	f000 fa66 	bl	40650c <_read_r>
  406040:	2800      	cmp	r0, #0
  406042:	db03      	blt.n	40604c <__sread+0x18>
  406044:	6d23      	ldr	r3, [r4, #80]	; 0x50
  406046:	4403      	add	r3, r0
  406048:	6523      	str	r3, [r4, #80]	; 0x50
  40604a:	bd10      	pop	{r4, pc}
  40604c:	89a3      	ldrh	r3, [r4, #12]
  40604e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406052:	81a3      	strh	r3, [r4, #12]
  406054:	bd10      	pop	{r4, pc}
  406056:	bf00      	nop

00406058 <__swrite>:
  406058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40605c:	4616      	mov	r6, r2
  40605e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  406062:	461f      	mov	r7, r3
  406064:	05d3      	lsls	r3, r2, #23
  406066:	460c      	mov	r4, r1
  406068:	4605      	mov	r5, r0
  40606a:	d507      	bpl.n	40607c <__swrite+0x24>
  40606c:	2200      	movs	r2, #0
  40606e:	2302      	movs	r3, #2
  406070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406074:	f000 fa34 	bl	4064e0 <_lseek_r>
  406078:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40607c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406080:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406084:	81a2      	strh	r2, [r4, #12]
  406086:	463b      	mov	r3, r7
  406088:	4632      	mov	r2, r6
  40608a:	4628      	mov	r0, r5
  40608c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406090:	f000 b914 	b.w	4062bc <_write_r>

00406094 <__sseek>:
  406094:	b510      	push	{r4, lr}
  406096:	460c      	mov	r4, r1
  406098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40609c:	f000 fa20 	bl	4064e0 <_lseek_r>
  4060a0:	89a3      	ldrh	r3, [r4, #12]
  4060a2:	1c42      	adds	r2, r0, #1
  4060a4:	bf0e      	itee	eq
  4060a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4060aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4060ae:	6520      	strne	r0, [r4, #80]	; 0x50
  4060b0:	81a3      	strh	r3, [r4, #12]
  4060b2:	bd10      	pop	{r4, pc}

004060b4 <__sclose>:
  4060b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4060b8:	f000 b978 	b.w	4063ac <_close_r>
  4060bc:	0000      	movs	r0, r0
	...

004060c0 <strlen>:
  4060c0:	f890 f000 	pld	[r0]
  4060c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4060c8:	f020 0107 	bic.w	r1, r0, #7
  4060cc:	f06f 0c00 	mvn.w	ip, #0
  4060d0:	f010 0407 	ands.w	r4, r0, #7
  4060d4:	f891 f020 	pld	[r1, #32]
  4060d8:	f040 8049 	bne.w	40616e <strlen+0xae>
  4060dc:	f04f 0400 	mov.w	r4, #0
  4060e0:	f06f 0007 	mvn.w	r0, #7
  4060e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4060e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4060ec:	f100 0008 	add.w	r0, r0, #8
  4060f0:	fa82 f24c 	uadd8	r2, r2, ip
  4060f4:	faa4 f28c 	sel	r2, r4, ip
  4060f8:	fa83 f34c 	uadd8	r3, r3, ip
  4060fc:	faa2 f38c 	sel	r3, r2, ip
  406100:	bb4b      	cbnz	r3, 406156 <strlen+0x96>
  406102:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406106:	fa82 f24c 	uadd8	r2, r2, ip
  40610a:	f100 0008 	add.w	r0, r0, #8
  40610e:	faa4 f28c 	sel	r2, r4, ip
  406112:	fa83 f34c 	uadd8	r3, r3, ip
  406116:	faa2 f38c 	sel	r3, r2, ip
  40611a:	b9e3      	cbnz	r3, 406156 <strlen+0x96>
  40611c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  406120:	fa82 f24c 	uadd8	r2, r2, ip
  406124:	f100 0008 	add.w	r0, r0, #8
  406128:	faa4 f28c 	sel	r2, r4, ip
  40612c:	fa83 f34c 	uadd8	r3, r3, ip
  406130:	faa2 f38c 	sel	r3, r2, ip
  406134:	b97b      	cbnz	r3, 406156 <strlen+0x96>
  406136:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40613a:	f101 0120 	add.w	r1, r1, #32
  40613e:	fa82 f24c 	uadd8	r2, r2, ip
  406142:	f100 0008 	add.w	r0, r0, #8
  406146:	faa4 f28c 	sel	r2, r4, ip
  40614a:	fa83 f34c 	uadd8	r3, r3, ip
  40614e:	faa2 f38c 	sel	r3, r2, ip
  406152:	2b00      	cmp	r3, #0
  406154:	d0c6      	beq.n	4060e4 <strlen+0x24>
  406156:	2a00      	cmp	r2, #0
  406158:	bf04      	itt	eq
  40615a:	3004      	addeq	r0, #4
  40615c:	461a      	moveq	r2, r3
  40615e:	ba12      	rev	r2, r2
  406160:	fab2 f282 	clz	r2, r2
  406164:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406168:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40616c:	4770      	bx	lr
  40616e:	e9d1 2300 	ldrd	r2, r3, [r1]
  406172:	f004 0503 	and.w	r5, r4, #3
  406176:	f1c4 0000 	rsb	r0, r4, #0
  40617a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40617e:	f014 0f04 	tst.w	r4, #4
  406182:	f891 f040 	pld	[r1, #64]	; 0x40
  406186:	fa0c f505 	lsl.w	r5, ip, r5
  40618a:	ea62 0205 	orn	r2, r2, r5
  40618e:	bf1c      	itt	ne
  406190:	ea63 0305 	ornne	r3, r3, r5
  406194:	4662      	movne	r2, ip
  406196:	f04f 0400 	mov.w	r4, #0
  40619a:	e7a9      	b.n	4060f0 <strlen+0x30>

0040619c <__swbuf_r>:
  40619c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40619e:	460d      	mov	r5, r1
  4061a0:	4614      	mov	r4, r2
  4061a2:	4606      	mov	r6, r0
  4061a4:	b110      	cbz	r0, 4061ac <__swbuf_r+0x10>
  4061a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4061a8:	2b00      	cmp	r3, #0
  4061aa:	d04b      	beq.n	406244 <__swbuf_r+0xa8>
  4061ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4061b0:	69a3      	ldr	r3, [r4, #24]
  4061b2:	60a3      	str	r3, [r4, #8]
  4061b4:	b291      	uxth	r1, r2
  4061b6:	0708      	lsls	r0, r1, #28
  4061b8:	d539      	bpl.n	40622e <__swbuf_r+0x92>
  4061ba:	6923      	ldr	r3, [r4, #16]
  4061bc:	2b00      	cmp	r3, #0
  4061be:	d036      	beq.n	40622e <__swbuf_r+0x92>
  4061c0:	b2ed      	uxtb	r5, r5
  4061c2:	0489      	lsls	r1, r1, #18
  4061c4:	462f      	mov	r7, r5
  4061c6:	d515      	bpl.n	4061f4 <__swbuf_r+0x58>
  4061c8:	6822      	ldr	r2, [r4, #0]
  4061ca:	6961      	ldr	r1, [r4, #20]
  4061cc:	1ad3      	subs	r3, r2, r3
  4061ce:	428b      	cmp	r3, r1
  4061d0:	da1c      	bge.n	40620c <__swbuf_r+0x70>
  4061d2:	3301      	adds	r3, #1
  4061d4:	68a1      	ldr	r1, [r4, #8]
  4061d6:	1c50      	adds	r0, r2, #1
  4061d8:	3901      	subs	r1, #1
  4061da:	60a1      	str	r1, [r4, #8]
  4061dc:	6020      	str	r0, [r4, #0]
  4061de:	7015      	strb	r5, [r2, #0]
  4061e0:	6962      	ldr	r2, [r4, #20]
  4061e2:	429a      	cmp	r2, r3
  4061e4:	d01a      	beq.n	40621c <__swbuf_r+0x80>
  4061e6:	89a3      	ldrh	r3, [r4, #12]
  4061e8:	07db      	lsls	r3, r3, #31
  4061ea:	d501      	bpl.n	4061f0 <__swbuf_r+0x54>
  4061ec:	2d0a      	cmp	r5, #10
  4061ee:	d015      	beq.n	40621c <__swbuf_r+0x80>
  4061f0:	4638      	mov	r0, r7
  4061f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4061f4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4061f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4061fa:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4061fe:	81a2      	strh	r2, [r4, #12]
  406200:	6822      	ldr	r2, [r4, #0]
  406202:	6661      	str	r1, [r4, #100]	; 0x64
  406204:	6961      	ldr	r1, [r4, #20]
  406206:	1ad3      	subs	r3, r2, r3
  406208:	428b      	cmp	r3, r1
  40620a:	dbe2      	blt.n	4061d2 <__swbuf_r+0x36>
  40620c:	4621      	mov	r1, r4
  40620e:	4630      	mov	r0, r6
  406210:	f7ff f80c 	bl	40522c <_fflush_r>
  406214:	b940      	cbnz	r0, 406228 <__swbuf_r+0x8c>
  406216:	6822      	ldr	r2, [r4, #0]
  406218:	2301      	movs	r3, #1
  40621a:	e7db      	b.n	4061d4 <__swbuf_r+0x38>
  40621c:	4621      	mov	r1, r4
  40621e:	4630      	mov	r0, r6
  406220:	f7ff f804 	bl	40522c <_fflush_r>
  406224:	2800      	cmp	r0, #0
  406226:	d0e3      	beq.n	4061f0 <__swbuf_r+0x54>
  406228:	f04f 37ff 	mov.w	r7, #4294967295
  40622c:	e7e0      	b.n	4061f0 <__swbuf_r+0x54>
  40622e:	4621      	mov	r1, r4
  406230:	4630      	mov	r0, r6
  406232:	f7fe fee7 	bl	405004 <__swsetup_r>
  406236:	2800      	cmp	r0, #0
  406238:	d1f6      	bne.n	406228 <__swbuf_r+0x8c>
  40623a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40623e:	6923      	ldr	r3, [r4, #16]
  406240:	b291      	uxth	r1, r2
  406242:	e7bd      	b.n	4061c0 <__swbuf_r+0x24>
  406244:	f7ff f84a 	bl	4052dc <__sinit>
  406248:	e7b0      	b.n	4061ac <__swbuf_r+0x10>
  40624a:	bf00      	nop

0040624c <_wcrtomb_r>:
  40624c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40624e:	4606      	mov	r6, r0
  406250:	b085      	sub	sp, #20
  406252:	461f      	mov	r7, r3
  406254:	b189      	cbz	r1, 40627a <_wcrtomb_r+0x2e>
  406256:	4c10      	ldr	r4, [pc, #64]	; (406298 <_wcrtomb_r+0x4c>)
  406258:	4d10      	ldr	r5, [pc, #64]	; (40629c <_wcrtomb_r+0x50>)
  40625a:	6824      	ldr	r4, [r4, #0]
  40625c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40625e:	2c00      	cmp	r4, #0
  406260:	bf08      	it	eq
  406262:	462c      	moveq	r4, r5
  406264:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  406268:	47a0      	blx	r4
  40626a:	1c43      	adds	r3, r0, #1
  40626c:	d103      	bne.n	406276 <_wcrtomb_r+0x2a>
  40626e:	2200      	movs	r2, #0
  406270:	238a      	movs	r3, #138	; 0x8a
  406272:	603a      	str	r2, [r7, #0]
  406274:	6033      	str	r3, [r6, #0]
  406276:	b005      	add	sp, #20
  406278:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40627a:	460c      	mov	r4, r1
  40627c:	4906      	ldr	r1, [pc, #24]	; (406298 <_wcrtomb_r+0x4c>)
  40627e:	4a07      	ldr	r2, [pc, #28]	; (40629c <_wcrtomb_r+0x50>)
  406280:	6809      	ldr	r1, [r1, #0]
  406282:	6b49      	ldr	r1, [r1, #52]	; 0x34
  406284:	2900      	cmp	r1, #0
  406286:	bf08      	it	eq
  406288:	4611      	moveq	r1, r2
  40628a:	4622      	mov	r2, r4
  40628c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  406290:	a901      	add	r1, sp, #4
  406292:	47a0      	blx	r4
  406294:	e7e9      	b.n	40626a <_wcrtomb_r+0x1e>
  406296:	bf00      	nop
  406298:	2040004c 	.word	0x2040004c
  40629c:	2040088c 	.word	0x2040088c

004062a0 <__ascii_wctomb>:
  4062a0:	b121      	cbz	r1, 4062ac <__ascii_wctomb+0xc>
  4062a2:	2aff      	cmp	r2, #255	; 0xff
  4062a4:	d804      	bhi.n	4062b0 <__ascii_wctomb+0x10>
  4062a6:	700a      	strb	r2, [r1, #0]
  4062a8:	2001      	movs	r0, #1
  4062aa:	4770      	bx	lr
  4062ac:	4608      	mov	r0, r1
  4062ae:	4770      	bx	lr
  4062b0:	238a      	movs	r3, #138	; 0x8a
  4062b2:	6003      	str	r3, [r0, #0]
  4062b4:	f04f 30ff 	mov.w	r0, #4294967295
  4062b8:	4770      	bx	lr
  4062ba:	bf00      	nop

004062bc <_write_r>:
  4062bc:	b570      	push	{r4, r5, r6, lr}
  4062be:	460d      	mov	r5, r1
  4062c0:	4c08      	ldr	r4, [pc, #32]	; (4062e4 <_write_r+0x28>)
  4062c2:	4611      	mov	r1, r2
  4062c4:	4606      	mov	r6, r0
  4062c6:	461a      	mov	r2, r3
  4062c8:	4628      	mov	r0, r5
  4062ca:	2300      	movs	r3, #0
  4062cc:	6023      	str	r3, [r4, #0]
  4062ce:	f7fa ffe5 	bl	40129c <_write>
  4062d2:	1c43      	adds	r3, r0, #1
  4062d4:	d000      	beq.n	4062d8 <_write_r+0x1c>
  4062d6:	bd70      	pop	{r4, r5, r6, pc}
  4062d8:	6823      	ldr	r3, [r4, #0]
  4062da:	2b00      	cmp	r3, #0
  4062dc:	d0fb      	beq.n	4062d6 <_write_r+0x1a>
  4062de:	6033      	str	r3, [r6, #0]
  4062e0:	bd70      	pop	{r4, r5, r6, pc}
  4062e2:	bf00      	nop
  4062e4:	2044c8e0 	.word	0x2044c8e0

004062e8 <__register_exitproc>:
  4062e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4062ec:	4d2c      	ldr	r5, [pc, #176]	; (4063a0 <__register_exitproc+0xb8>)
  4062ee:	4606      	mov	r6, r0
  4062f0:	6828      	ldr	r0, [r5, #0]
  4062f2:	4698      	mov	r8, r3
  4062f4:	460f      	mov	r7, r1
  4062f6:	4691      	mov	r9, r2
  4062f8:	f7ff fbb0 	bl	405a5c <__retarget_lock_acquire_recursive>
  4062fc:	4b29      	ldr	r3, [pc, #164]	; (4063a4 <__register_exitproc+0xbc>)
  4062fe:	681c      	ldr	r4, [r3, #0]
  406300:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  406304:	2b00      	cmp	r3, #0
  406306:	d03e      	beq.n	406386 <__register_exitproc+0x9e>
  406308:	685a      	ldr	r2, [r3, #4]
  40630a:	2a1f      	cmp	r2, #31
  40630c:	dc1c      	bgt.n	406348 <__register_exitproc+0x60>
  40630e:	f102 0e01 	add.w	lr, r2, #1
  406312:	b176      	cbz	r6, 406332 <__register_exitproc+0x4a>
  406314:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  406318:	2401      	movs	r4, #1
  40631a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40631e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  406322:	4094      	lsls	r4, r2
  406324:	4320      	orrs	r0, r4
  406326:	2e02      	cmp	r6, #2
  406328:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40632c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  406330:	d023      	beq.n	40637a <__register_exitproc+0x92>
  406332:	3202      	adds	r2, #2
  406334:	f8c3 e004 	str.w	lr, [r3, #4]
  406338:	6828      	ldr	r0, [r5, #0]
  40633a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40633e:	f7ff fb8f 	bl	405a60 <__retarget_lock_release_recursive>
  406342:	2000      	movs	r0, #0
  406344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406348:	4b17      	ldr	r3, [pc, #92]	; (4063a8 <__register_exitproc+0xc0>)
  40634a:	b30b      	cbz	r3, 406390 <__register_exitproc+0xa8>
  40634c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406350:	f7fd fbd0 	bl	403af4 <malloc>
  406354:	4603      	mov	r3, r0
  406356:	b1d8      	cbz	r0, 406390 <__register_exitproc+0xa8>
  406358:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40635c:	6002      	str	r2, [r0, #0]
  40635e:	2100      	movs	r1, #0
  406360:	6041      	str	r1, [r0, #4]
  406362:	460a      	mov	r2, r1
  406364:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406368:	f04f 0e01 	mov.w	lr, #1
  40636c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406370:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  406374:	2e00      	cmp	r6, #0
  406376:	d0dc      	beq.n	406332 <__register_exitproc+0x4a>
  406378:	e7cc      	b.n	406314 <__register_exitproc+0x2c>
  40637a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40637e:	430c      	orrs	r4, r1
  406380:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406384:	e7d5      	b.n	406332 <__register_exitproc+0x4a>
  406386:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40638a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40638e:	e7bb      	b.n	406308 <__register_exitproc+0x20>
  406390:	6828      	ldr	r0, [r5, #0]
  406392:	f7ff fb65 	bl	405a60 <__retarget_lock_release_recursive>
  406396:	f04f 30ff 	mov.w	r0, #4294967295
  40639a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40639e:	bf00      	nop
  4063a0:	20400888 	.word	0x20400888
  4063a4:	0040727c 	.word	0x0040727c
  4063a8:	00403af5 	.word	0x00403af5

004063ac <_close_r>:
  4063ac:	b538      	push	{r3, r4, r5, lr}
  4063ae:	4c07      	ldr	r4, [pc, #28]	; (4063cc <_close_r+0x20>)
  4063b0:	2300      	movs	r3, #0
  4063b2:	4605      	mov	r5, r0
  4063b4:	4608      	mov	r0, r1
  4063b6:	6023      	str	r3, [r4, #0]
  4063b8:	f7fc f976 	bl	4026a8 <_close>
  4063bc:	1c43      	adds	r3, r0, #1
  4063be:	d000      	beq.n	4063c2 <_close_r+0x16>
  4063c0:	bd38      	pop	{r3, r4, r5, pc}
  4063c2:	6823      	ldr	r3, [r4, #0]
  4063c4:	2b00      	cmp	r3, #0
  4063c6:	d0fb      	beq.n	4063c0 <_close_r+0x14>
  4063c8:	602b      	str	r3, [r5, #0]
  4063ca:	bd38      	pop	{r3, r4, r5, pc}
  4063cc:	2044c8e0 	.word	0x2044c8e0

004063d0 <_fclose_r>:
  4063d0:	b570      	push	{r4, r5, r6, lr}
  4063d2:	b159      	cbz	r1, 4063ec <_fclose_r+0x1c>
  4063d4:	4605      	mov	r5, r0
  4063d6:	460c      	mov	r4, r1
  4063d8:	b110      	cbz	r0, 4063e0 <_fclose_r+0x10>
  4063da:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4063dc:	2b00      	cmp	r3, #0
  4063de:	d03c      	beq.n	40645a <_fclose_r+0x8a>
  4063e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4063e2:	07d8      	lsls	r0, r3, #31
  4063e4:	d505      	bpl.n	4063f2 <_fclose_r+0x22>
  4063e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4063ea:	b92b      	cbnz	r3, 4063f8 <_fclose_r+0x28>
  4063ec:	2600      	movs	r6, #0
  4063ee:	4630      	mov	r0, r6
  4063f0:	bd70      	pop	{r4, r5, r6, pc}
  4063f2:	89a3      	ldrh	r3, [r4, #12]
  4063f4:	0599      	lsls	r1, r3, #22
  4063f6:	d53c      	bpl.n	406472 <_fclose_r+0xa2>
  4063f8:	4621      	mov	r1, r4
  4063fa:	4628      	mov	r0, r5
  4063fc:	f7fe fe76 	bl	4050ec <__sflush_r>
  406400:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  406402:	4606      	mov	r6, r0
  406404:	b133      	cbz	r3, 406414 <_fclose_r+0x44>
  406406:	69e1      	ldr	r1, [r4, #28]
  406408:	4628      	mov	r0, r5
  40640a:	4798      	blx	r3
  40640c:	2800      	cmp	r0, #0
  40640e:	bfb8      	it	lt
  406410:	f04f 36ff 	movlt.w	r6, #4294967295
  406414:	89a3      	ldrh	r3, [r4, #12]
  406416:	061a      	lsls	r2, r3, #24
  406418:	d422      	bmi.n	406460 <_fclose_r+0x90>
  40641a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40641c:	b141      	cbz	r1, 406430 <_fclose_r+0x60>
  40641e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406422:	4299      	cmp	r1, r3
  406424:	d002      	beq.n	40642c <_fclose_r+0x5c>
  406426:	4628      	mov	r0, r5
  406428:	f7ff f87e 	bl	405528 <_free_r>
  40642c:	2300      	movs	r3, #0
  40642e:	6323      	str	r3, [r4, #48]	; 0x30
  406430:	6c61      	ldr	r1, [r4, #68]	; 0x44
  406432:	b121      	cbz	r1, 40643e <_fclose_r+0x6e>
  406434:	4628      	mov	r0, r5
  406436:	f7ff f877 	bl	405528 <_free_r>
  40643a:	2300      	movs	r3, #0
  40643c:	6463      	str	r3, [r4, #68]	; 0x44
  40643e:	f7fe ff79 	bl	405334 <__sfp_lock_acquire>
  406442:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406444:	2200      	movs	r2, #0
  406446:	07db      	lsls	r3, r3, #31
  406448:	81a2      	strh	r2, [r4, #12]
  40644a:	d50e      	bpl.n	40646a <_fclose_r+0x9a>
  40644c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40644e:	f7ff fb03 	bl	405a58 <__retarget_lock_close_recursive>
  406452:	f7fe ff75 	bl	405340 <__sfp_lock_release>
  406456:	4630      	mov	r0, r6
  406458:	bd70      	pop	{r4, r5, r6, pc}
  40645a:	f7fe ff3f 	bl	4052dc <__sinit>
  40645e:	e7bf      	b.n	4063e0 <_fclose_r+0x10>
  406460:	6921      	ldr	r1, [r4, #16]
  406462:	4628      	mov	r0, r5
  406464:	f7ff f860 	bl	405528 <_free_r>
  406468:	e7d7      	b.n	40641a <_fclose_r+0x4a>
  40646a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40646c:	f7ff faf8 	bl	405a60 <__retarget_lock_release_recursive>
  406470:	e7ec      	b.n	40644c <_fclose_r+0x7c>
  406472:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406474:	f7ff faf2 	bl	405a5c <__retarget_lock_acquire_recursive>
  406478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40647c:	2b00      	cmp	r3, #0
  40647e:	d1bb      	bne.n	4063f8 <_fclose_r+0x28>
  406480:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406482:	f016 0601 	ands.w	r6, r6, #1
  406486:	d1b1      	bne.n	4063ec <_fclose_r+0x1c>
  406488:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40648a:	f7ff fae9 	bl	405a60 <__retarget_lock_release_recursive>
  40648e:	4630      	mov	r0, r6
  406490:	bd70      	pop	{r4, r5, r6, pc}
  406492:	bf00      	nop

00406494 <_fstat_r>:
  406494:	b538      	push	{r3, r4, r5, lr}
  406496:	460b      	mov	r3, r1
  406498:	4c07      	ldr	r4, [pc, #28]	; (4064b8 <_fstat_r+0x24>)
  40649a:	4605      	mov	r5, r0
  40649c:	4611      	mov	r1, r2
  40649e:	4618      	mov	r0, r3
  4064a0:	2300      	movs	r3, #0
  4064a2:	6023      	str	r3, [r4, #0]
  4064a4:	f7fc f904 	bl	4026b0 <_fstat>
  4064a8:	1c43      	adds	r3, r0, #1
  4064aa:	d000      	beq.n	4064ae <_fstat_r+0x1a>
  4064ac:	bd38      	pop	{r3, r4, r5, pc}
  4064ae:	6823      	ldr	r3, [r4, #0]
  4064b0:	2b00      	cmp	r3, #0
  4064b2:	d0fb      	beq.n	4064ac <_fstat_r+0x18>
  4064b4:	602b      	str	r3, [r5, #0]
  4064b6:	bd38      	pop	{r3, r4, r5, pc}
  4064b8:	2044c8e0 	.word	0x2044c8e0

004064bc <_isatty_r>:
  4064bc:	b538      	push	{r3, r4, r5, lr}
  4064be:	4c07      	ldr	r4, [pc, #28]	; (4064dc <_isatty_r+0x20>)
  4064c0:	2300      	movs	r3, #0
  4064c2:	4605      	mov	r5, r0
  4064c4:	4608      	mov	r0, r1
  4064c6:	6023      	str	r3, [r4, #0]
  4064c8:	f7fc f8f8 	bl	4026bc <_isatty>
  4064cc:	1c43      	adds	r3, r0, #1
  4064ce:	d000      	beq.n	4064d2 <_isatty_r+0x16>
  4064d0:	bd38      	pop	{r3, r4, r5, pc}
  4064d2:	6823      	ldr	r3, [r4, #0]
  4064d4:	2b00      	cmp	r3, #0
  4064d6:	d0fb      	beq.n	4064d0 <_isatty_r+0x14>
  4064d8:	602b      	str	r3, [r5, #0]
  4064da:	bd38      	pop	{r3, r4, r5, pc}
  4064dc:	2044c8e0 	.word	0x2044c8e0

004064e0 <_lseek_r>:
  4064e0:	b570      	push	{r4, r5, r6, lr}
  4064e2:	460d      	mov	r5, r1
  4064e4:	4c08      	ldr	r4, [pc, #32]	; (406508 <_lseek_r+0x28>)
  4064e6:	4611      	mov	r1, r2
  4064e8:	4606      	mov	r6, r0
  4064ea:	461a      	mov	r2, r3
  4064ec:	4628      	mov	r0, r5
  4064ee:	2300      	movs	r3, #0
  4064f0:	6023      	str	r3, [r4, #0]
  4064f2:	f7fc f8e5 	bl	4026c0 <_lseek>
  4064f6:	1c43      	adds	r3, r0, #1
  4064f8:	d000      	beq.n	4064fc <_lseek_r+0x1c>
  4064fa:	bd70      	pop	{r4, r5, r6, pc}
  4064fc:	6823      	ldr	r3, [r4, #0]
  4064fe:	2b00      	cmp	r3, #0
  406500:	d0fb      	beq.n	4064fa <_lseek_r+0x1a>
  406502:	6033      	str	r3, [r6, #0]
  406504:	bd70      	pop	{r4, r5, r6, pc}
  406506:	bf00      	nop
  406508:	2044c8e0 	.word	0x2044c8e0

0040650c <_read_r>:
  40650c:	b570      	push	{r4, r5, r6, lr}
  40650e:	460d      	mov	r5, r1
  406510:	4c08      	ldr	r4, [pc, #32]	; (406534 <_read_r+0x28>)
  406512:	4611      	mov	r1, r2
  406514:	4606      	mov	r6, r0
  406516:	461a      	mov	r2, r3
  406518:	4628      	mov	r0, r5
  40651a:	2300      	movs	r3, #0
  40651c:	6023      	str	r3, [r4, #0]
  40651e:	f7fa fe9f 	bl	401260 <_read>
  406522:	1c43      	adds	r3, r0, #1
  406524:	d000      	beq.n	406528 <_read_r+0x1c>
  406526:	bd70      	pop	{r4, r5, r6, pc}
  406528:	6823      	ldr	r3, [r4, #0]
  40652a:	2b00      	cmp	r3, #0
  40652c:	d0fb      	beq.n	406526 <_read_r+0x1a>
  40652e:	6033      	str	r3, [r6, #0]
  406530:	bd70      	pop	{r4, r5, r6, pc}
  406532:	bf00      	nop
  406534:	2044c8e0 	.word	0x2044c8e0

00406538 <__aeabi_uldivmod>:
  406538:	b953      	cbnz	r3, 406550 <__aeabi_uldivmod+0x18>
  40653a:	b94a      	cbnz	r2, 406550 <__aeabi_uldivmod+0x18>
  40653c:	2900      	cmp	r1, #0
  40653e:	bf08      	it	eq
  406540:	2800      	cmpeq	r0, #0
  406542:	bf1c      	itt	ne
  406544:	f04f 31ff 	movne.w	r1, #4294967295
  406548:	f04f 30ff 	movne.w	r0, #4294967295
  40654c:	f000 b97a 	b.w	406844 <__aeabi_idiv0>
  406550:	f1ad 0c08 	sub.w	ip, sp, #8
  406554:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  406558:	f000 f806 	bl	406568 <__udivmoddi4>
  40655c:	f8dd e004 	ldr.w	lr, [sp, #4]
  406560:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406564:	b004      	add	sp, #16
  406566:	4770      	bx	lr

00406568 <__udivmoddi4>:
  406568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40656c:	468c      	mov	ip, r1
  40656e:	460d      	mov	r5, r1
  406570:	4604      	mov	r4, r0
  406572:	9e08      	ldr	r6, [sp, #32]
  406574:	2b00      	cmp	r3, #0
  406576:	d151      	bne.n	40661c <__udivmoddi4+0xb4>
  406578:	428a      	cmp	r2, r1
  40657a:	4617      	mov	r7, r2
  40657c:	d96d      	bls.n	40665a <__udivmoddi4+0xf2>
  40657e:	fab2 fe82 	clz	lr, r2
  406582:	f1be 0f00 	cmp.w	lr, #0
  406586:	d00b      	beq.n	4065a0 <__udivmoddi4+0x38>
  406588:	f1ce 0c20 	rsb	ip, lr, #32
  40658c:	fa01 f50e 	lsl.w	r5, r1, lr
  406590:	fa20 fc0c 	lsr.w	ip, r0, ip
  406594:	fa02 f70e 	lsl.w	r7, r2, lr
  406598:	ea4c 0c05 	orr.w	ip, ip, r5
  40659c:	fa00 f40e 	lsl.w	r4, r0, lr
  4065a0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4065a4:	0c25      	lsrs	r5, r4, #16
  4065a6:	fbbc f8fa 	udiv	r8, ip, sl
  4065aa:	fa1f f987 	uxth.w	r9, r7
  4065ae:	fb0a cc18 	mls	ip, sl, r8, ip
  4065b2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4065b6:	fb08 f309 	mul.w	r3, r8, r9
  4065ba:	42ab      	cmp	r3, r5
  4065bc:	d90a      	bls.n	4065d4 <__udivmoddi4+0x6c>
  4065be:	19ed      	adds	r5, r5, r7
  4065c0:	f108 32ff 	add.w	r2, r8, #4294967295
  4065c4:	f080 8123 	bcs.w	40680e <__udivmoddi4+0x2a6>
  4065c8:	42ab      	cmp	r3, r5
  4065ca:	f240 8120 	bls.w	40680e <__udivmoddi4+0x2a6>
  4065ce:	f1a8 0802 	sub.w	r8, r8, #2
  4065d2:	443d      	add	r5, r7
  4065d4:	1aed      	subs	r5, r5, r3
  4065d6:	b2a4      	uxth	r4, r4
  4065d8:	fbb5 f0fa 	udiv	r0, r5, sl
  4065dc:	fb0a 5510 	mls	r5, sl, r0, r5
  4065e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4065e4:	fb00 f909 	mul.w	r9, r0, r9
  4065e8:	45a1      	cmp	r9, r4
  4065ea:	d909      	bls.n	406600 <__udivmoddi4+0x98>
  4065ec:	19e4      	adds	r4, r4, r7
  4065ee:	f100 33ff 	add.w	r3, r0, #4294967295
  4065f2:	f080 810a 	bcs.w	40680a <__udivmoddi4+0x2a2>
  4065f6:	45a1      	cmp	r9, r4
  4065f8:	f240 8107 	bls.w	40680a <__udivmoddi4+0x2a2>
  4065fc:	3802      	subs	r0, #2
  4065fe:	443c      	add	r4, r7
  406600:	eba4 0409 	sub.w	r4, r4, r9
  406604:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406608:	2100      	movs	r1, #0
  40660a:	2e00      	cmp	r6, #0
  40660c:	d061      	beq.n	4066d2 <__udivmoddi4+0x16a>
  40660e:	fa24 f40e 	lsr.w	r4, r4, lr
  406612:	2300      	movs	r3, #0
  406614:	6034      	str	r4, [r6, #0]
  406616:	6073      	str	r3, [r6, #4]
  406618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40661c:	428b      	cmp	r3, r1
  40661e:	d907      	bls.n	406630 <__udivmoddi4+0xc8>
  406620:	2e00      	cmp	r6, #0
  406622:	d054      	beq.n	4066ce <__udivmoddi4+0x166>
  406624:	2100      	movs	r1, #0
  406626:	e886 0021 	stmia.w	r6, {r0, r5}
  40662a:	4608      	mov	r0, r1
  40662c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406630:	fab3 f183 	clz	r1, r3
  406634:	2900      	cmp	r1, #0
  406636:	f040 808e 	bne.w	406756 <__udivmoddi4+0x1ee>
  40663a:	42ab      	cmp	r3, r5
  40663c:	d302      	bcc.n	406644 <__udivmoddi4+0xdc>
  40663e:	4282      	cmp	r2, r0
  406640:	f200 80fa 	bhi.w	406838 <__udivmoddi4+0x2d0>
  406644:	1a84      	subs	r4, r0, r2
  406646:	eb65 0503 	sbc.w	r5, r5, r3
  40664a:	2001      	movs	r0, #1
  40664c:	46ac      	mov	ip, r5
  40664e:	2e00      	cmp	r6, #0
  406650:	d03f      	beq.n	4066d2 <__udivmoddi4+0x16a>
  406652:	e886 1010 	stmia.w	r6, {r4, ip}
  406656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40665a:	b912      	cbnz	r2, 406662 <__udivmoddi4+0xfa>
  40665c:	2701      	movs	r7, #1
  40665e:	fbb7 f7f2 	udiv	r7, r7, r2
  406662:	fab7 fe87 	clz	lr, r7
  406666:	f1be 0f00 	cmp.w	lr, #0
  40666a:	d134      	bne.n	4066d6 <__udivmoddi4+0x16e>
  40666c:	1beb      	subs	r3, r5, r7
  40666e:	0c3a      	lsrs	r2, r7, #16
  406670:	fa1f fc87 	uxth.w	ip, r7
  406674:	2101      	movs	r1, #1
  406676:	fbb3 f8f2 	udiv	r8, r3, r2
  40667a:	0c25      	lsrs	r5, r4, #16
  40667c:	fb02 3318 	mls	r3, r2, r8, r3
  406680:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406684:	fb0c f308 	mul.w	r3, ip, r8
  406688:	42ab      	cmp	r3, r5
  40668a:	d907      	bls.n	40669c <__udivmoddi4+0x134>
  40668c:	19ed      	adds	r5, r5, r7
  40668e:	f108 30ff 	add.w	r0, r8, #4294967295
  406692:	d202      	bcs.n	40669a <__udivmoddi4+0x132>
  406694:	42ab      	cmp	r3, r5
  406696:	f200 80d1 	bhi.w	40683c <__udivmoddi4+0x2d4>
  40669a:	4680      	mov	r8, r0
  40669c:	1aed      	subs	r5, r5, r3
  40669e:	b2a3      	uxth	r3, r4
  4066a0:	fbb5 f0f2 	udiv	r0, r5, r2
  4066a4:	fb02 5510 	mls	r5, r2, r0, r5
  4066a8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4066ac:	fb0c fc00 	mul.w	ip, ip, r0
  4066b0:	45a4      	cmp	ip, r4
  4066b2:	d907      	bls.n	4066c4 <__udivmoddi4+0x15c>
  4066b4:	19e4      	adds	r4, r4, r7
  4066b6:	f100 33ff 	add.w	r3, r0, #4294967295
  4066ba:	d202      	bcs.n	4066c2 <__udivmoddi4+0x15a>
  4066bc:	45a4      	cmp	ip, r4
  4066be:	f200 80b8 	bhi.w	406832 <__udivmoddi4+0x2ca>
  4066c2:	4618      	mov	r0, r3
  4066c4:	eba4 040c 	sub.w	r4, r4, ip
  4066c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4066cc:	e79d      	b.n	40660a <__udivmoddi4+0xa2>
  4066ce:	4631      	mov	r1, r6
  4066d0:	4630      	mov	r0, r6
  4066d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4066d6:	f1ce 0420 	rsb	r4, lr, #32
  4066da:	fa05 f30e 	lsl.w	r3, r5, lr
  4066de:	fa07 f70e 	lsl.w	r7, r7, lr
  4066e2:	fa20 f804 	lsr.w	r8, r0, r4
  4066e6:	0c3a      	lsrs	r2, r7, #16
  4066e8:	fa25 f404 	lsr.w	r4, r5, r4
  4066ec:	ea48 0803 	orr.w	r8, r8, r3
  4066f0:	fbb4 f1f2 	udiv	r1, r4, r2
  4066f4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4066f8:	fb02 4411 	mls	r4, r2, r1, r4
  4066fc:	fa1f fc87 	uxth.w	ip, r7
  406700:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  406704:	fb01 f30c 	mul.w	r3, r1, ip
  406708:	42ab      	cmp	r3, r5
  40670a:	fa00 f40e 	lsl.w	r4, r0, lr
  40670e:	d909      	bls.n	406724 <__udivmoddi4+0x1bc>
  406710:	19ed      	adds	r5, r5, r7
  406712:	f101 30ff 	add.w	r0, r1, #4294967295
  406716:	f080 808a 	bcs.w	40682e <__udivmoddi4+0x2c6>
  40671a:	42ab      	cmp	r3, r5
  40671c:	f240 8087 	bls.w	40682e <__udivmoddi4+0x2c6>
  406720:	3902      	subs	r1, #2
  406722:	443d      	add	r5, r7
  406724:	1aeb      	subs	r3, r5, r3
  406726:	fa1f f588 	uxth.w	r5, r8
  40672a:	fbb3 f0f2 	udiv	r0, r3, r2
  40672e:	fb02 3310 	mls	r3, r2, r0, r3
  406732:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406736:	fb00 f30c 	mul.w	r3, r0, ip
  40673a:	42ab      	cmp	r3, r5
  40673c:	d907      	bls.n	40674e <__udivmoddi4+0x1e6>
  40673e:	19ed      	adds	r5, r5, r7
  406740:	f100 38ff 	add.w	r8, r0, #4294967295
  406744:	d26f      	bcs.n	406826 <__udivmoddi4+0x2be>
  406746:	42ab      	cmp	r3, r5
  406748:	d96d      	bls.n	406826 <__udivmoddi4+0x2be>
  40674a:	3802      	subs	r0, #2
  40674c:	443d      	add	r5, r7
  40674e:	1aeb      	subs	r3, r5, r3
  406750:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  406754:	e78f      	b.n	406676 <__udivmoddi4+0x10e>
  406756:	f1c1 0720 	rsb	r7, r1, #32
  40675a:	fa22 f807 	lsr.w	r8, r2, r7
  40675e:	408b      	lsls	r3, r1
  406760:	fa05 f401 	lsl.w	r4, r5, r1
  406764:	ea48 0303 	orr.w	r3, r8, r3
  406768:	fa20 fe07 	lsr.w	lr, r0, r7
  40676c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  406770:	40fd      	lsrs	r5, r7
  406772:	ea4e 0e04 	orr.w	lr, lr, r4
  406776:	fbb5 f9fc 	udiv	r9, r5, ip
  40677a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40677e:	fb0c 5519 	mls	r5, ip, r9, r5
  406782:	fa1f f883 	uxth.w	r8, r3
  406786:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40678a:	fb09 f408 	mul.w	r4, r9, r8
  40678e:	42ac      	cmp	r4, r5
  406790:	fa02 f201 	lsl.w	r2, r2, r1
  406794:	fa00 fa01 	lsl.w	sl, r0, r1
  406798:	d908      	bls.n	4067ac <__udivmoddi4+0x244>
  40679a:	18ed      	adds	r5, r5, r3
  40679c:	f109 30ff 	add.w	r0, r9, #4294967295
  4067a0:	d243      	bcs.n	40682a <__udivmoddi4+0x2c2>
  4067a2:	42ac      	cmp	r4, r5
  4067a4:	d941      	bls.n	40682a <__udivmoddi4+0x2c2>
  4067a6:	f1a9 0902 	sub.w	r9, r9, #2
  4067aa:	441d      	add	r5, r3
  4067ac:	1b2d      	subs	r5, r5, r4
  4067ae:	fa1f fe8e 	uxth.w	lr, lr
  4067b2:	fbb5 f0fc 	udiv	r0, r5, ip
  4067b6:	fb0c 5510 	mls	r5, ip, r0, r5
  4067ba:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4067be:	fb00 f808 	mul.w	r8, r0, r8
  4067c2:	45a0      	cmp	r8, r4
  4067c4:	d907      	bls.n	4067d6 <__udivmoddi4+0x26e>
  4067c6:	18e4      	adds	r4, r4, r3
  4067c8:	f100 35ff 	add.w	r5, r0, #4294967295
  4067cc:	d229      	bcs.n	406822 <__udivmoddi4+0x2ba>
  4067ce:	45a0      	cmp	r8, r4
  4067d0:	d927      	bls.n	406822 <__udivmoddi4+0x2ba>
  4067d2:	3802      	subs	r0, #2
  4067d4:	441c      	add	r4, r3
  4067d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4067da:	eba4 0408 	sub.w	r4, r4, r8
  4067de:	fba0 8902 	umull	r8, r9, r0, r2
  4067e2:	454c      	cmp	r4, r9
  4067e4:	46c6      	mov	lr, r8
  4067e6:	464d      	mov	r5, r9
  4067e8:	d315      	bcc.n	406816 <__udivmoddi4+0x2ae>
  4067ea:	d012      	beq.n	406812 <__udivmoddi4+0x2aa>
  4067ec:	b156      	cbz	r6, 406804 <__udivmoddi4+0x29c>
  4067ee:	ebba 030e 	subs.w	r3, sl, lr
  4067f2:	eb64 0405 	sbc.w	r4, r4, r5
  4067f6:	fa04 f707 	lsl.w	r7, r4, r7
  4067fa:	40cb      	lsrs	r3, r1
  4067fc:	431f      	orrs	r7, r3
  4067fe:	40cc      	lsrs	r4, r1
  406800:	6037      	str	r7, [r6, #0]
  406802:	6074      	str	r4, [r6, #4]
  406804:	2100      	movs	r1, #0
  406806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40680a:	4618      	mov	r0, r3
  40680c:	e6f8      	b.n	406600 <__udivmoddi4+0x98>
  40680e:	4690      	mov	r8, r2
  406810:	e6e0      	b.n	4065d4 <__udivmoddi4+0x6c>
  406812:	45c2      	cmp	sl, r8
  406814:	d2ea      	bcs.n	4067ec <__udivmoddi4+0x284>
  406816:	ebb8 0e02 	subs.w	lr, r8, r2
  40681a:	eb69 0503 	sbc.w	r5, r9, r3
  40681e:	3801      	subs	r0, #1
  406820:	e7e4      	b.n	4067ec <__udivmoddi4+0x284>
  406822:	4628      	mov	r0, r5
  406824:	e7d7      	b.n	4067d6 <__udivmoddi4+0x26e>
  406826:	4640      	mov	r0, r8
  406828:	e791      	b.n	40674e <__udivmoddi4+0x1e6>
  40682a:	4681      	mov	r9, r0
  40682c:	e7be      	b.n	4067ac <__udivmoddi4+0x244>
  40682e:	4601      	mov	r1, r0
  406830:	e778      	b.n	406724 <__udivmoddi4+0x1bc>
  406832:	3802      	subs	r0, #2
  406834:	443c      	add	r4, r7
  406836:	e745      	b.n	4066c4 <__udivmoddi4+0x15c>
  406838:	4608      	mov	r0, r1
  40683a:	e708      	b.n	40664e <__udivmoddi4+0xe6>
  40683c:	f1a8 0802 	sub.w	r8, r8, #2
  406840:	443d      	add	r5, r7
  406842:	e72b      	b.n	40669c <__udivmoddi4+0x134>

00406844 <__aeabi_idiv0>:
  406844:	4770      	bx	lr
  406846:	bf00      	nop
  406848:	092d452d 	.word	0x092d452d
  40684c:	39384d57 	.word	0x39384d57
  406850:	69203430 	.word	0x69203430
  406854:	6974696e 	.word	0x6974696e
  406858:	7a696c61 	.word	0x7a696c61
  40685c:	6f697461 	.word	0x6f697461
  406860:	6166206e 	.word	0x6166206e
  406864:	64656c69 	.word	0x64656c69
  406868:	00000d2e 	.word	0x00000d2e

0040686c <CSWTCH.7>:
  40686c:	00000100 00000300 00000200              ............

00406878 <midi_note_frequencies>:
  406878:	4102d0e5 410a978d 4112d4fe 411b9168     ...A...A...Ah..A
  406888:	4124d0e5 412e9ba6 4138fdf4 41440000     ..$A...A..8A..DA
  406898:	414fa5e3 415c0000 41691687 4176f1aa     ..OA..\A..iA..vA
  4068a8:	4182d0e5 418a978d 4192d4fe 419b8f5c     ...A...A...A\..A
  4068b8:	41a4d0e5 41ae9db2 41b90000 41c40000     ...A...A...A...A
  4068c8:	41cfa7f0 41dc0000 41e9147b 41f6f1aa     ...A...A{..A...A
  4068d8:	4202cfdf 420a978d 4212d4fe 421b9062     ...B...B...Bb..B
  4068e8:	4224cfdf 422e9db2 4238fefa 4243fefa     ..$B...B..8B..CB
  4068f8:	424fa6e9 425c0000 4269147b 4276f0a4     ..OB..\B{.iB..vB
  406908:	4282cfdf 428a978d 4292d4fe 429b9062     ...B...B...Bb..B
  406918:	42a4d062 42ae9d2f 42b8ff7d 42c3ff7d     b..B/..B}..B}..B
  406928:	42cfa6e9 42dc0000 42e914fe 42f6f127     ...B...B...B'..B
  406938:	4302d021 430a974c 4312d4fe 431b9021     !..CL..C...C!..C
  406948:	4324d062 432e9d2f 4338ff3b 4343ff7d     b.$C/..C;.8C}.CC
  406958:	434fa6e9 435c0000 436914fe 4376f127     ..OC..\C..iC'.vC
  406968:	4382d021 438a976d 4392d51f 439b9042     !..Cm..C...CB..C
  406978:	43a4d062 43ae9d2f 43b8ff3b 43c3ff5c     b..C/..C;..C\..C
  406988:	43cfa70a 43dc0000 43e914fe 43f6f106     ...C...C...C...C
  406998:	4402d010 440a975c 4412d51f 441b9042     ...D\..D...DB..D
  4069a8:	4424d052 442e9d2f 4438ff4c 4443ff6d     R.$D/..DL.8Dm.CD
  4069b8:	444fa6fa 445c0000 446914fe 4476f117     ..OD..\D..iD..vD
  4069c8:	4482d010 448a9764 4492d517 449b9042     ...Dd..D...DB..D
  4069d8:	44a4d052 44ae9d37 44b8ff4c 44c3ff6d     R..D7..DL..Dm..D
  4069e8:	44cfa702 44dc0000 44e914f6 44f6f10e     ...D...D...D...D
  4069f8:	4502d014 450a9760 4512d517 451b9042     ...E`..E...EB..E
  406a08:	4524d052 452e9d37 4538ff48 4543ff68     R.$E7..EH.8Eh.CE
  406a18:	454fa702 455c0000 456914f6 4576f10e     ..OE..\E..iE..vE
  406a28:	4582d012 458a9760 4592d517 459b9042     ...E`..E...EB..E
  406a38:	45a4d054 45ae9d37 45b8ff4a 45c3ff6a     T..E7..EJ..Ej..E
  406a48:	45cfa700 45dc0000 45e914f6 45f6f110     ...E...E...E...E
  406a58:	4602d012 460a9760 4612d518 461b9041     ...F`..F...FA..F
  406a68:	4624d052 462e9d33 4638ff48 4643ff66     R.$F3..FH.8Ff.CF

00406a78 <sinTable_f32>:
  406a78:	00000000 3c490e92 3cc90ab1 3d16c32b     ......I<...<+..=
  406a88:	3d48fb2e 3d7b2b75 3d96a904 3dafb680     ..H=u+{=...=...=
  406a98:	3dc8bd36 3de1bc2f 3dfab273 3e09cf87     6..=/..=s..=...>
  406aa8:	3e164083 3e22abb5 3e2f10a2 3e3b6ecf     .@.>..">../>.n;>
  406ab8:	3e47c5c2 3e541501 3e605c13 3e6c9a7f     ..G>..T>.\`>..l>
  406ac8:	3e78cfcc 3e827dc0 3e888e93 3e8e9a22     ..x>.}.>...>"..>
  406ad8:	3e94a032 3e9aa086 3ea09ae5 3ea68f12     2..>...>...>...>
  406ae8:	3eac7cd4 3eb263ef 3eb8442a 3ebe1d49     .|.>.c.>*D.>I..>
  406af8:	3ec3ef15 3ec9b953 3ecf7bca 3ed53641     ...>S..>.{.>A6.>
  406b08:	3edae880 3ee0924f 3ee63375 3eebcbbb     ...>O..>u3.>...>
  406b18:	3ef15aea 3ef6e0cb 3efc5d27 3f00e7e4     .Z.>...>'].>...?
  406b28:	3f039c3d 3f064b82 3f08f59b 3f0b9a6b     =..?.K.?...?k..?
  406b38:	3f0e39da 3f10d3cd 3f13682a 3f15f6d9     .9.?...?*h.?...?
  406b48:	3f187fc0 3f1b02c6 3f1d7fd1 3f1ff6cb     ...?...?...?...?
  406b58:	3f226799 3f24d225 3f273656 3f299415     .g"?%.$?V6'?..)?
  406b68:	3f2beb4a 3f2e3bde 3f3085bb 3f32c8c9     J.+?.;.?..0?..2?
  406b78:	3f3504f3 3f373a23 3f396842 3f3b8f3b     ..5?#:7?Bh9?;.;?
  406b88:	3f3daef9 3f3fc767 3f41d870 3f43e201     ..=?g.??p.A?..C?
  406b98:	3f45e403 3f47de65 3f49d112 3f4bbbf8     ..E?e.G?..I?..K?
  406ba8:	3f4d9f02 3f4f7a20 3f514d3d 3f531849     ..M? zO?=MQ?I.S?
  406bb8:	3f54db31 3f5695e5 3f584853 3f59f26a     1.T?..V?SHX?j.Y?
  406bc8:	3f5b941a 3f5d2d53 3f5ebe05 3f604621     ..[?S-]?..^?!F`?
  406bd8:	3f61c597 3f633c5a 3f64aa59 3f660f88     ..a?Z<c?Y.d?..f?
  406be8:	3f676bd8 3f68bf3c 3f6a09a7 3f6b4b0c     .kg?<.h?..j?.Kk?
  406bf8:	3f6c835e 3f6db293 3f6ed89e 3f6ff573     ^.l?..m?..n?s.o?
  406c08:	3f710908 3f721352 3f731447 3f740bdd     ..q?R.r?G.s?..t?
  406c18:	3f74fa0b 3f75dec6 3f76ba07 3f778bc5     ..t?..u?..v?..w?
  406c28:	3f7853f8 3f791298 3f79c79d 3f7a7302     .Sx?..y?..y?.sz?
  406c38:	3f7b14be 3f7baccd 3f7c3b28 3f7cbfc9     ..{?..{?(;|?..|?
  406c48:	3f7d3aac 3f7dabcc 3f7e1323 3f7e70b0     .:}?..}?#.~?.p~?
  406c58:	3f7ec46d 3f7f0e58 3f7f4e6d 3f7f84ab     m.~?X..?mN.?...?
  406c68:	3f7fb10f 3f7fd397 3f7fec43 3f7ffb11     ...?...?C..?...?
  406c78:	3f800000 3f7ffb11 3f7fec43 3f7fd397     ...?...?C..?...?
  406c88:	3f7fb10f 3f7f84ab 3f7f4e6d 3f7f0e58     ...?...?mN.?X..?
  406c98:	3f7ec46d 3f7e70b0 3f7e1323 3f7dabcc     m.~?.p~?#.~?..}?
  406ca8:	3f7d3aac 3f7cbfc9 3f7c3b28 3f7baccd     .:}?..|?(;|?..{?
  406cb8:	3f7b14be 3f7a7302 3f79c79d 3f791298     ..{?.sz?..y?..y?
  406cc8:	3f7853f8 3f778bc5 3f76ba07 3f75dec6     .Sx?..w?..v?..u?
  406cd8:	3f74fa0b 3f740bdd 3f731447 3f721352     ..t?..t?G.s?R.r?
  406ce8:	3f710908 3f6ff573 3f6ed89e 3f6db293     ..q?s.o?..n?..m?
  406cf8:	3f6c835e 3f6b4b0c 3f6a09a7 3f68bf3c     ^.l?.Kk?..j?<.h?
  406d08:	3f676bd8 3f660f88 3f64aa59 3f633c5a     .kg?..f?Y.d?Z<c?
  406d18:	3f61c597 3f604621 3f5ebe05 3f5d2d53     ..a?!F`?..^?S-]?
  406d28:	3f5b941a 3f59f26a 3f584853 3f5695e5     ..[?j.Y?SHX?..V?
  406d38:	3f54db31 3f531849 3f514d3d 3f4f7a20     1.T?I.S?=MQ? zO?
  406d48:	3f4d9f02 3f4bbbf8 3f49d112 3f47de65     ..M?..K?..I?e.G?
  406d58:	3f45e403 3f43e201 3f41d870 3f3fc767     ..E?..C?p.A?g.??
  406d68:	3f3daef9 3f3b8f3b 3f396842 3f373a23     ..=?;.;?Bh9?#:7?
  406d78:	3f3504f3 3f32c8c9 3f3085bb 3f2e3bde     ..5?..2?..0?.;.?
  406d88:	3f2beb4a 3f299415 3f273656 3f24d225     J.+?..)?V6'?%.$?
  406d98:	3f226799 3f1ff6cb 3f1d7fd1 3f1b02c6     .g"?...?...?...?
  406da8:	3f187fc0 3f15f6d9 3f13682a 3f10d3cd     ...?...?*h.?...?
  406db8:	3f0e39da 3f0b9a6b 3f08f59b 3f064b82     .9.?k..?...?.K.?
  406dc8:	3f039c3d 3f00e7e4 3efc5d27 3ef6e0cb     =..?...?'].>...>
  406dd8:	3ef15aea 3eebcbbb 3ee63375 3ee0924f     .Z.>...>u3.>O..>
  406de8:	3edae880 3ed53641 3ecf7bca 3ec9b953     ...>A6.>.{.>S..>
  406df8:	3ec3ef15 3ebe1d49 3eb8442a 3eb263ef     ...>I..>*D.>.c.>
  406e08:	3eac7cd4 3ea68f12 3ea09ae5 3e9aa086     .|.>...>...>...>
  406e18:	3e94a032 3e8e9a22 3e888e93 3e827dc0     2..>"..>...>.}.>
  406e28:	3e78cfcc 3e6c9a7f 3e605c13 3e541501     ..x>..l>.\`>..T>
  406e38:	3e47c5c2 3e3b6ecf 3e2f10a2 3e22abb5     ..G>.n;>../>..">
  406e48:	3e164083 3e09cf87 3dfab273 3de1bc2f     .@.>...>s..=/..=
  406e58:	3dc8bd36 3dafb680 3d96a904 3d7b2b75     6..=...=...=u+{=
  406e68:	3d48fb2e 3d16c32b 3cc90ab1 3c490e92     ..H=+..=...<..I<
  406e78:	00000000 bc490e92 bcc90ab1 bd16c32b     ......I.....+...
  406e88:	bd48fb2e bd7b2b75 bd96a904 bdafb680     ..H.u+{.........
  406e98:	bdc8bd36 bde1bc2f bdfab273 be09cf87     6.../...s.......
  406ea8:	be164083 be22abb5 be2f10a2 be3b6ecf     .@....".../..n;.
  406eb8:	be47c5c2 be541501 be605c13 be6c9a7f     ..G...T..\`...l.
  406ec8:	be78cfcc be827dc0 be888e93 be8e9a22     ..x..}......"...
  406ed8:	be94a032 be9aa086 bea09ae5 bea68f12     2...............
  406ee8:	beac7cd4 beb263ef beb8442a bebe1d49     .|...c..*D..I...
  406ef8:	bec3ef15 bec9b953 becf7bca bed53641     ....S....{..A6..
  406f08:	bedae880 bee0924f bee63375 beebcbbb     ....O...u3......
  406f18:	bef15aea bef6e0cb befc5d27 bf00e7e4     .Z......']......
  406f28:	bf039c3d bf064b82 bf08f59b bf0b9a6b     =....K......k...
  406f38:	bf0e39da bf10d3cd bf13682a bf15f6d9     .9......*h......
  406f48:	bf187fc0 bf1b02c6 bf1d7fd1 bf1ff6cb     ................
  406f58:	bf226799 bf24d225 bf273656 bf299415     .g".%.$.V6'...).
  406f68:	bf2beb4a bf2e3bde bf3085bb bf32c8c9     J.+..;....0...2.
  406f78:	bf3504f3 bf373a23 bf396842 bf3b8f3b     ..5.#:7.Bh9.;.;.
  406f88:	bf3daef9 bf3fc767 bf41d870 bf43e201     ..=.g.?.p.A...C.
  406f98:	bf45e403 bf47de65 bf49d112 bf4bbbf8     ..E.e.G...I...K.
  406fa8:	bf4d9f02 bf4f7a20 bf514d3d bf531849     ..M. zO.=MQ.I.S.
  406fb8:	bf54db31 bf5695e5 bf584853 bf59f26a     1.T...V.SHX.j.Y.
  406fc8:	bf5b941a bf5d2d53 bf5ebe05 bf604621     ..[.S-]...^.!F`.
  406fd8:	bf61c597 bf633c5a bf64aa59 bf660f88     ..a.Z<c.Y.d...f.
  406fe8:	bf676bd8 bf68bf3c bf6a09a7 bf6b4b0c     .kg.<.h...j..Kk.
  406ff8:	bf6c835e bf6db293 bf6ed89e bf6ff573     ^.l...m...n.s.o.
  407008:	bf710908 bf721352 bf731447 bf740bdd     ..q.R.r.G.s...t.
  407018:	bf74fa0b bf75dec6 bf76ba07 bf778bc5     ..t...u...v...w.
  407028:	bf7853f8 bf791298 bf79c79d bf7a7302     .Sx...y...y..sz.
  407038:	bf7b14be bf7baccd bf7c3b28 bf7cbfc9     ..{...{.(;|...|.
  407048:	bf7d3aac bf7dabcc bf7e1323 bf7e70b0     .:}...}.#.~..p~.
  407058:	bf7ec46d bf7f0e58 bf7f4e6d bf7f84ab     m.~.X...mN......
  407068:	bf7fb10f bf7fd397 bf7fec43 bf7ffb11     ........C.......
  407078:	bf800000 bf7ffb11 bf7fec43 bf7fd397     ........C.......
  407088:	bf7fb10f bf7f84ab bf7f4e6d bf7f0e58     ........mN..X...
  407098:	bf7ec46d bf7e70b0 bf7e1323 bf7dabcc     m.~..p~.#.~...}.
  4070a8:	bf7d3aac bf7cbfc9 bf7c3b28 bf7baccd     .:}...|.(;|...{.
  4070b8:	bf7b14be bf7a7302 bf79c79d bf791298     ..{..sz...y...y.
  4070c8:	bf7853f8 bf778bc5 bf76ba07 bf75dec6     .Sx...w...v...u.
  4070d8:	bf74fa0b bf740bdd bf731447 bf721352     ..t...t.G.s.R.r.
  4070e8:	bf710908 bf6ff573 bf6ed89e bf6db293     ..q.s.o...n...m.
  4070f8:	bf6c835e bf6b4b0c bf6a09a7 bf68bf3c     ^.l..Kk...j.<.h.
  407108:	bf676bd8 bf660f88 bf64aa59 bf633c5a     .kg...f.Y.d.Z<c.
  407118:	bf61c597 bf604621 bf5ebe05 bf5d2d53     ..a.!F`...^.S-].
  407128:	bf5b941a bf59f26a bf584853 bf5695e5     ..[.j.Y.SHX...V.
  407138:	bf54db31 bf531849 bf514d3d bf4f7a20     1.T.I.S.=MQ. zO.
  407148:	bf4d9f02 bf4bbbf8 bf49d112 bf47de65     ..M...K...I.e.G.
  407158:	bf45e403 bf43e201 bf41d870 bf3fc767     ..E...C.p.A.g.?.
  407168:	bf3daef9 bf3b8f3b bf396842 bf373a23     ..=.;.;.Bh9.#:7.
  407178:	bf3504f3 bf32c8c9 bf3085bb bf2e3bde     ..5...2...0..;..
  407188:	bf2beb4a bf299415 bf273656 bf24d225     J.+...).V6'.%.$.
  407198:	bf226799 bf1ff6cb bf1d7fd1 bf1b02c6     .g".............
  4071a8:	bf187fc0 bf15f6d9 bf13682a bf10d3cd     ........*h......
  4071b8:	bf0e39da bf0b9a6b bf08f59b bf064b82     .9..k........K..
  4071c8:	bf039c3d bf00e7e4 befc5d27 bef6e0cb     =.......']......
  4071d8:	bef15aea beebcbbb bee63375 bee0924f     .Z......u3..O...
  4071e8:	bedae880 bed53641 becf7bca bec9b953     ....A6...{..S...
  4071f8:	bec3ef15 bebe1d49 beb8442a beb263ef     ....I...*D...c..
  407208:	beac7cd4 bea68f12 bea09ae5 be9aa086     .|..............
  407218:	be94a032 be8e9a22 be888e93 be827dc0     2..."........}..
  407228:	be78cfcc be6c9a7f be605c13 be541501     ..x...l..\`...T.
  407238:	be47c5c2 be3b6ecf be2f10a2 be22abb5     ..G..n;.../...".
  407248:	be164083 be09cf87 bdfab273 bde1bc2f     .@......s.../...
  407258:	bdc8bd36 bdafb680 bd96a904 bd7b2b75     6...........u+{.
  407268:	bd48fb2e bd16c32b bcc90ab1 bc490e92     ..H.+.........I.
  407278:	80000000                                ....

0040727c <_global_impure_ptr>:
  40727c:	20400050 33323130 37363534 42413938     P.@ 0123456789AB
  40728c:	46454443 00000000 33323130 37363534     CDEF....01234567
  40729c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  4072ac:	0000296c                                l)..

004072b0 <blanks.8340>:
  4072b0:	20202020 20202020 20202020 20202020                     

004072c0 <zeroes.8341>:
  4072c0:	30303030 30303030 30303030 30303030     0000000000000000
  4072d0:	00000043 49534f50 00000058 0000002e     C...POSIX.......

004072e0 <_ctype_>:
  4072e0:	20202000 20202020 28282020 20282828     .         ((((( 
  4072f0:	20202020 20202020 20202020 20202020                     
  407300:	10108820 10101010 10101010 10101010      ...............
  407310:	04040410 04040404 10040404 10101010     ................
  407320:	41411010 41414141 01010101 01010101     ..AAAAAA........
  407330:	01010101 01010101 01010101 10101010     ................
  407340:	42421010 42424242 02020202 02020202     ..BBBBBB........
  407350:	02020202 02020202 02020202 10101010     ................
  407360:	00000020 00000000 00000000 00000000      ...............
	...

004073e4 <_init>:
  4073e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4073e6:	bf00      	nop
  4073e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4073ea:	bc08      	pop	{r3}
  4073ec:	469e      	mov	lr, r3
  4073ee:	4770      	bx	lr

004073f0 <__init_array_start>:
  4073f0:	004050cd 	.word	0x004050cd

004073f4 <__frame_dummy_init_array_entry>:
  4073f4:	00400165                                e.@.

004073f8 <_fini>:
  4073f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4073fa:	bf00      	nop
  4073fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4073fe:	bc08      	pop	{r3}
  407400:	469e      	mov	lr, r3
  407402:	4770      	bx	lr

00407404 <__fini_array_start>:
  407404:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <inBuffer>:
2040000c:	b800 2044                                   ..D 

20400010 <inPingMode>:
20400010:	0001 0000                                   ....

20400014 <outBuffer>:
20400014:	8800 2044                                   ..D 

20400018 <outPingMode>:
20400018:	0001 0000                                   ....

2040001c <processBuffer>:
2040001c:	6800 2044                                   .hD 

20400020 <pitchtracker>:
20400020:	0000 bf80 ffff ffff                         ........

20400028 <g_interrupt_enabled>:
20400028:	0001 0000                                   ....

2040002c <SystemCoreClock>:
2040002c:	0900 003d                                   ..=.

20400030 <autotune>:
20400030:	0001 0000                                   ....

20400034 <harm_volume>:
20400034:	0000 3f80                                   ...?

20400038 <harmony_list_fill>:
20400038:	c80c 2044                                   ..D 

2040003c <harmony_list_read>:
2040003c:	c864 2044                                   d.D 

20400040 <master_volume>:
20400040:	0000 3f80                                   ...?

20400044 <pitch_bend>:
20400044:	0040 0000                                   @...

20400048 <reverb_volume>:
20400048:	cccd 3f4c                                   ..L?

2040004c <_impure_ptr>:
2040004c:	0050 2040                                   P.@ 

20400050 <impure_data>:
20400050:	0000 0000 033c 2040 03a4 2040 040c 2040     ....<.@ ..@ ..@ 
	...
204000f8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400108:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400478 <__malloc_av_>:
	...
20400480:	0478 2040 0478 2040 0480 2040 0480 2040     x.@ x.@ ..@ ..@ 
20400490:	0488 2040 0488 2040 0490 2040 0490 2040     ..@ ..@ ..@ ..@ 
204004a0:	0498 2040 0498 2040 04a0 2040 04a0 2040     ..@ ..@ ..@ ..@ 
204004b0:	04a8 2040 04a8 2040 04b0 2040 04b0 2040     ..@ ..@ ..@ ..@ 
204004c0:	04b8 2040 04b8 2040 04c0 2040 04c0 2040     ..@ ..@ ..@ ..@ 
204004d0:	04c8 2040 04c8 2040 04d0 2040 04d0 2040     ..@ ..@ ..@ ..@ 
204004e0:	04d8 2040 04d8 2040 04e0 2040 04e0 2040     ..@ ..@ ..@ ..@ 
204004f0:	04e8 2040 04e8 2040 04f0 2040 04f0 2040     ..@ ..@ ..@ ..@ 
20400500:	04f8 2040 04f8 2040 0500 2040 0500 2040     ..@ ..@ ..@ ..@ 
20400510:	0508 2040 0508 2040 0510 2040 0510 2040     ..@ ..@ ..@ ..@ 
20400520:	0518 2040 0518 2040 0520 2040 0520 2040     ..@ ..@  .@  .@ 
20400530:	0528 2040 0528 2040 0530 2040 0530 2040     (.@ (.@ 0.@ 0.@ 
20400540:	0538 2040 0538 2040 0540 2040 0540 2040     8.@ 8.@ @.@ @.@ 
20400550:	0548 2040 0548 2040 0550 2040 0550 2040     H.@ H.@ P.@ P.@ 
20400560:	0558 2040 0558 2040 0560 2040 0560 2040     X.@ X.@ `.@ `.@ 
20400570:	0568 2040 0568 2040 0570 2040 0570 2040     h.@ h.@ p.@ p.@ 
20400580:	0578 2040 0578 2040 0580 2040 0580 2040     x.@ x.@ ..@ ..@ 
20400590:	0588 2040 0588 2040 0590 2040 0590 2040     ..@ ..@ ..@ ..@ 
204005a0:	0598 2040 0598 2040 05a0 2040 05a0 2040     ..@ ..@ ..@ ..@ 
204005b0:	05a8 2040 05a8 2040 05b0 2040 05b0 2040     ..@ ..@ ..@ ..@ 
204005c0:	05b8 2040 05b8 2040 05c0 2040 05c0 2040     ..@ ..@ ..@ ..@ 
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 
20400870:	0868 2040 0868 2040 0870 2040 0870 2040     h.@ h.@ p.@ p.@ 

20400880 <__malloc_sbrk_base>:
20400880:	ffff ffff                                   ....

20400884 <__malloc_trim_threshold>:
20400884:	0000 0002                                   ....

20400888 <__atexit_recursive_mutex>:
20400888:	c8bc 2044                                   ..D 

2040088c <__global_locale>:
2040088c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008ac:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008cc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008ec:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040090c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040092c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040094c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040096c:	62a1 0040 5b55 0040 0000 0000 72e0 0040     .b@.U[@......r@.
2040097c:	72dc 0040 7290 0040 7290 0040 7290 0040     .r@..r@..r@..r@.
2040098c:	7290 0040 7290 0040 7290 0040 7290 0040     .r@..r@..r@..r@.
2040099c:	7290 0040 7290 0040 ffff ffff ffff ffff     .r@..r@.........
204009ac:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009d4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
