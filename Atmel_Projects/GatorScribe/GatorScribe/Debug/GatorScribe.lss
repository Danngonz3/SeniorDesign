
GatorScribe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000928c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040928c  0040928c  0001928c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009f8  20400000  00409294  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0004fc98  20404000  00410000  00024000  2**14
                  ALLOC
  4 .stack        00002000  20453c98  0045fc98  00024000  2**0
                  ALLOC
  5 .heap         00000200  20455c98  00461c98  00024000  2**0
                  ALLOC
  6 .ARM.attributes 0000002c  00000000  00000000  000209f8  2**0
                  CONTENTS, READONLY
  7 .comment      000000b4  00000000  00000000  00020a24  2**0
                  CONTENTS, READONLY
  8 .debug_info   000420f0  00000000  00000000  00020ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00008bfd  00000000  00000000  00062bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001a7b4  00000000  00000000  0006b7c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001668  00000000  00000000  00085f79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000050e8  00000000  00000000  000875e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002ecef  00000000  00000000  0008c6c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00026b6b  00000000  00000000  000bb3b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a7b30  00000000  00000000  000e1f23  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004a84  00000000  00000000  00189a54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	98 5c 45 20 1d 2f 40 00 15 2f 40 00 19 2f 40 00     .\E ./@../@../@.
  400010:	15 2f 40 00 15 2f 40 00 15 2f 40 00 00 00 00 00     ./@../@../@.....
	...
  40002c:	71 33 40 00 15 2f 40 00 00 00 00 00 11 34 40 00     q3@../@......4@.
  40003c:	75 34 40 00 15 2f 40 00 15 2f 40 00 15 2f 40 00     u4@../@../@../@.
  40004c:	15 2f 40 00 15 2f 40 00 15 2f 40 00 15 2f 40 00     ./@../@../@../@.
  40005c:	15 2f 40 00 15 2f 40 00 00 00 00 00 4d 29 40 00     ./@../@.....M)@.
  40006c:	19 2a 40 00 e5 2a 40 00 15 2f 40 00 d1 4e 40 00     .*@..*@../@..N@.
  40007c:	15 2f 40 00 b1 2b 40 00 7d 2c 40 00 15 2f 40 00     ./@..+@.},@../@.
  40008c:	15 2f 40 00 15 2f 40 00 15 2f 40 00 15 2f 40 00     ./@../@../@../@.
  40009c:	15 2f 40 00 15 2f 40 00 15 2f 40 00 15 2f 40 00     ./@../@../@../@.
  4000ac:	15 2f 40 00 15 2f 40 00 15 2f 40 00 15 2f 40 00     ./@../@../@../@.
  4000bc:	15 2f 40 00 15 2f 40 00 15 2f 40 00 15 2f 40 00     ./@../@../@../@.
  4000cc:	15 2f 40 00 00 00 00 00 15 2f 40 00 00 00 00 00     ./@....../@.....
  4000dc:	15 2f 40 00 15 2f 40 00 15 2f 40 00 15 2f 40 00     ./@../@../@../@.
  4000ec:	15 2f 40 00 15 2f 40 00 15 2f 40 00 15 2f 40 00     ./@../@../@../@.
  4000fc:	15 2f 40 00 15 2f 40 00 15 2f 40 00 15 2f 40 00     ./@../@../@../@.
  40010c:	15 2f 40 00 15 2f 40 00 15 2f 40 00 00 00 00 00     ./@../@../@.....
  40011c:	00 00 00 00 15 2f 40 00 15 2f 40 00 ad 01 40 00     ...../@../@...@.
  40012c:	15 2f 40 00 15 2f 40 00 00 00 00 00 15 2f 40 00     ./@../@....../@.
  40013c:	15 2f 40 00                                         ./@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20404000 	.word	0x20404000
  40015c:	00000000 	.word	0x00000000
  400160:	00409294 	.word	0x00409294

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00409294 	.word	0x00409294
  4001a0:	20404004 	.word	0x20404004
  4001a4:	00409294 	.word	0x00409294
  4001a8:	00000000 	.word	0x00000000

004001ac <XDMAC_Handler>:
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4001ac:	4b21      	ldr	r3, [pc, #132]	; (400234 <XDMAC_Handler+0x88>)
/*********************************** Extern Variables End ***********************************/

#define One_over_max_int16 0.0000305185f 
/******************************* XDMAC Interrupt Handler Start *******************************/ 
void XDMAC_Handler(void)
{
  4001ae:	b470      	push	{r4, r5, r6}
  4001b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    uint32_t dma_status;
    
    dma_status = xdmac_channel_get_interrupt_status(XDMAC, XDMA_CH_SSC_RX);
    if (dma_status & XDMAC_CIS_BIS)
  4001b2:	07da      	lsls	r2, r3, #31
  4001b4:	d529      	bpl.n	40020a <XDMAC_Handler+0x5e>
    {
		// Update input and process buffers to be used 
		if(inPingMode)
  4001b6:	4d20      	ldr	r5, [pc, #128]	; (400238 <XDMAC_Handler+0x8c>)
		else 
		{
			inBuffer = inPongBuffer; 
			processBuffer = processPongBuffer; 
		}
		inPingMode = !inPingMode; 
  4001b8:	2200      	movs	r2, #0
			processBuffer = processPingBuffer; 
  4001ba:	4c20      	ldr	r4, [pc, #128]	; (40023c <XDMAC_Handler+0x90>)
		if(inPingMode)
  4001bc:	782b      	ldrb	r3, [r5, #0]
			processBuffer = processPingBuffer; 
  4001be:	4820      	ldr	r0, [pc, #128]	; (400240 <XDMAC_Handler+0x94>)
  4001c0:	4293      	cmp	r3, r2
		inPingMode = !inPingMode; 
  4001c2:	782e      	ldrb	r6, [r5, #0]
			processBuffer = processPingBuffer; 
  4001c4:	491f      	ldr	r1, [pc, #124]	; (400244 <XDMAC_Handler+0x98>)
  4001c6:	4b20      	ldr	r3, [pc, #128]	; (400248 <XDMAC_Handler+0x9c>)
  4001c8:	bf1c      	itt	ne
  4001ca:	4621      	movne	r1, r4
  4001cc:	4603      	movne	r3, r0
		inPingMode = !inPingMode; 
  4001ce:	f086 0601 	eor.w	r6, r6, #1
  4001d2:	4c1e      	ldr	r4, [pc, #120]	; (40024c <XDMAC_Handler+0xa0>)
  4001d4:	481e      	ldr	r0, [pc, #120]	; (400250 <XDMAC_Handler+0xa4>)
		
		int processIdx = 0;
		// Fill process buffer - only left channel decimated by 1
		for(int i = 0; i < IO_BUF_SIZE; i+=2)
		{
			processBuffer[processIdx++] = ((float )(int16_t)inBuffer[i]) * One_over_max_int16; 
  4001d6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 400254 <XDMAC_Handler+0xa8>
		inPingMode = !inPingMode; 
  4001da:	702e      	strb	r6, [r5, #0]
  4001dc:	6021      	str	r1, [r4, #0]
  4001de:	6003      	str	r3, [r0, #0]
  4001e0:	e001      	b.n	4001e6 <XDMAC_Handler+0x3a>
  4001e2:	6821      	ldr	r1, [r4, #0]
  4001e4:	6803      	ldr	r3, [r0, #0]
			processBuffer[processIdx++] = ((float )(int16_t)inBuffer[i]) * One_over_max_int16; 
  4001e6:	5a9b      	ldrh	r3, [r3, r2]
  4001e8:	4411      	add	r1, r2
  4001ea:	3204      	adds	r2, #4
  4001ec:	b21b      	sxth	r3, r3
		for(int i = 0; i < IO_BUF_SIZE; i+=2)
  4001ee:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
			processBuffer[processIdx++] = ((float )(int16_t)inBuffer[i]) * One_over_max_int16; 
  4001f2:	ee07 3a90 	vmov	s15, r3
  4001f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4001fa:	ee67 7a87 	vmul.f32	s15, s15, s14
  4001fe:	edc1 7a00 	vstr	s15, [r1]
		for(int i = 0; i < IO_BUF_SIZE; i+=2)
  400202:	d1ee      	bne.n	4001e2 <XDMAC_Handler+0x36>
		}
		dataReceived = true; // can check for out of time here 
  400204:	4b14      	ldr	r3, [pc, #80]	; (400258 <XDMAC_Handler+0xac>)
  400206:	2201      	movs	r2, #1
  400208:	701a      	strb	r2, [r3, #0]
  40020a:	4b0a      	ldr	r3, [pc, #40]	; (400234 <XDMAC_Handler+0x88>)
  40020c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    }
	
	dma_status = xdmac_channel_get_interrupt_status(XDMAC, XDMA_CH_SSC_TX);
	if (dma_status & XDMAC_CIS_BIS)
  400210:	07db      	lsls	r3, r3, #31
  400212:	d50c      	bpl.n	40022e <XDMAC_Handler+0x82>
	{
		// update output buffer to be used 
		if(outPingMode)
  400214:	4b11      	ldr	r3, [pc, #68]	; (40025c <XDMAC_Handler+0xb0>)
		{
			outBuffer = outPingBuffer; 
  400216:	4812      	ldr	r0, [pc, #72]	; (400260 <XDMAC_Handler+0xb4>)
		if(outPingMode)
  400218:	781c      	ldrb	r4, [r3, #0]
			outBuffer = outPingBuffer; 
  40021a:	4912      	ldr	r1, [pc, #72]	; (400264 <XDMAC_Handler+0xb8>)
		}
		else
		{
			outBuffer = outPongBuffer; 
		}
		outPingMode = !outPingMode; 
  40021c:	781a      	ldrb	r2, [r3, #0]
			outBuffer = outPingBuffer; 
  40021e:	2c00      	cmp	r4, #0
  400220:	bf18      	it	ne
  400222:	4601      	movne	r1, r0
  400224:	4810      	ldr	r0, [pc, #64]	; (400268 <XDMAC_Handler+0xbc>)
		outPingMode = !outPingMode; 
  400226:	f082 0201 	eor.w	r2, r2, #1
  40022a:	6001      	str	r1, [r0, #0]
  40022c:	701a      	strb	r2, [r3, #0]
	}
}
  40022e:	bc70      	pop	{r4, r5, r6}
  400230:	4770      	bx	lr
  400232:	bf00      	nop
  400234:	40078000 	.word	0x40078000
  400238:	20400010 	.word	0x20400010
  40023c:	20450c00 	.word	0x20450c00
  400240:	20453400 	.word	0x20453400
  400244:	20452c00 	.word	0x20452c00
  400248:	20451400 	.word	0x20451400
  40024c:	2040001c 	.word	0x2040001c
  400250:	2040000c 	.word	0x2040000c
  400254:	380000fd 	.word	0x380000fd
  400258:	2040401c 	.word	0x2040401c
  40025c:	20400018 	.word	0x20400018
  400260:	20451c00 	.word	0x20451c00
  400264:	20452400 	.word	0x20452400
  400268:	20400014 	.word	0x20400014

0040026c <configure_xdma>:
/******************************* XDMAC Interrupt Handler End *******************************/

/********************************** Public Functions Start **********************************/
void configure_xdma(void)
{
  40026c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint16_t *src;
    
    xdmac_channel_config_t xdmac_channel_cfg = {0};
  400270:	2620      	movs	r6, #32
{
  400272:	b088      	sub	sp, #32
    xdmac_channel_config_t xdmac_channel_cfg = {0};
  400274:	2100      	movs	r1, #0
  400276:	4b30      	ldr	r3, [pc, #192]	; (400338 <configure_xdma+0xcc>)
  400278:	4632      	mov	r2, r6
  40027a:	4668      	mov	r0, sp
  40027c:	4798      	blx	r3
    
    /* Initialize and enable DMA controller */
    pmc_enable_periph_clk(ID_XDMAC);
  40027e:	4b2f      	ldr	r3, [pc, #188]	; (40033c <configure_xdma+0xd0>)
  400280:	203a      	movs	r0, #58	; 0x3a
    | XDMAC_CC_DIF_AHB_IF0
    | XDMAC_CC_SAM_FIXED_AM
    | XDMAC_CC_DAM_INCREMENTED_AM
    | XDMAC_CC_PERID(33);
	
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  400282:	4c2f      	ldr	r4, [pc, #188]	; (400340 <configure_xdma+0xd4>)
    pmc_enable_periph_clk(ID_XDMAC);
  400284:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400286:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
  40028a:	4b2e      	ldr	r3, [pc, #184]	; (400344 <configure_xdma+0xd8>)
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  40028c:	466a      	mov	r2, sp
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  40028e:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 400358 <configure_xdma+0xec>
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  400292:	4620      	mov	r0, r4
  400294:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
  400298:	2100      	movs	r1, #0
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40029a:	f883 633a 	strb.w	r6, [r3, #826]	; 0x33a
 */
static inline void xdmac_channel_set_descriptor_control(Xdmac *xdmac, uint32_t channel_num, uint32_t config)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  40029e:	270f      	movs	r7, #15
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4002a0:	605d      	str	r5, [r3, #4]
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  4002a2:	2501      	movs	r5, #1
  4002a4:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 40035c <configure_xdma+0xf0>
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4002a8:	f8cd e00c 	str.w	lr, [sp, #12]
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  4002ac:	47c0      	blx	r8
    
    /* Initialize linked list descriptor */
    src = (uint16_t *)&inPingBuffer[0];
    linklist_read[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002ae:	4b26      	ldr	r3, [pc, #152]	; (400348 <configure_xdma+0xdc>)
    | XDMAC_CC_DIF_AHB_IF1
    | XDMAC_CC_SAM_INCREMENTED_AM
    | XDMAC_CC_DAM_FIXED_AM
    | XDMAC_CC_PERID(32);
	
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  4002b0:	466a      	mov	r2, sp
    linklist_read[0].mbr_da = (uint32_t)(src);
  4002b2:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 400360 <configure_xdma+0xf4>
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  4002b6:	4629      	mov	r1, r5
    linklist_read[0].mbr_nda = (uint32_t)&linklist_read[1];
  4002b8:	f103 0010 	add.w	r0, r3, #16
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  4002bc:	f023 0603 	bic.w	r6, r3, #3
	linklist_read[1].mbr_da = (uint32_t)(src);
  4002c0:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 400364 <configure_xdma+0xf8>
    linklist_read[0].mbr_nda = (uint32_t)&linklist_read[1];
  4002c4:	6018      	str	r0, [r3, #0]
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  4002c6:	4620      	mov	r0, r4
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  4002c8:	66e7      	str	r7, [r4, #108]	; 0x6c
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  4002ca:	66a6      	str	r6, [r4, #104]	; 0x68
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  4002cc:	60e5      	str	r5, [r4, #12]
    linklist_read[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002ce:	4e1f      	ldr	r6, [pc, #124]	; (40034c <configure_xdma+0xe0>)
	xdmac->XDMAC_CHID[channel_num].XDMAC_CIE = mask;
  4002d0:	6525      	str	r5, [r4, #80]	; 0x50
    linklist_read[0].mbr_da = (uint32_t)(src);
  4002d2:	f8c3 e00c 	str.w	lr, [r3, #12]
    linklist_read[0].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  4002d6:	f8df e090 	ldr.w	lr, [pc, #144]	; 400368 <configure_xdma+0xfc>
	linklist_read[1].mbr_da = (uint32_t)(src);
  4002da:	f8c3 c01c 	str.w	ip, [r3, #28]
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4002de:	f8df c08c 	ldr.w	ip, [pc, #140]	; 40036c <configure_xdma+0x100>
    linklist_read[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002e2:	605e      	str	r6, [r3, #4]
	linklist_read[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002e4:	615e      	str	r6, [r3, #20]
    linklist_read[0].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  4002e6:	f8c3 e008 	str.w	lr, [r3, #8]
	linklist_read[1].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  4002ea:	f8c3 e018 	str.w	lr, [r3, #24]
	linklist_read[1].mbr_nda = (uint32_t)&linklist_read[0];
  4002ee:	611b      	str	r3, [r3, #16]
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4002f0:	f8cd c00c 	str.w	ip, [sp, #12]
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  4002f4:	47c0      	blx	r8
    
    src = (uint16_t *)&outPingBuffer[0];
    linklist_write[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002f6:	4b16      	ldr	r3, [pc, #88]	; (400350 <configure_xdma+0xe4>)
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  4002f8:	2102      	movs	r1, #2
		 | XDMAC_UBC_NDE_FETCH_EN
		 | XDMAC_UBC_NSEN_UPDATED
			| XDMAC_CUBC_UBLEN(IO_BUF_SIZE);
    linklist_write[0].mbr_sa = (uint32_t)(src);
    linklist_write[0].mbr_da = (uint32_t)&(SSC->SSC_THR);
  4002fa:	4a16      	ldr	r2, [pc, #88]	; (400354 <configure_xdma+0xe8>)
    linklist_write[0].mbr_sa = (uint32_t)(src);
  4002fc:	f8df c070 	ldr.w	ip, [pc, #112]	; 400370 <configure_xdma+0x104>
    linklist_write[0].mbr_nda = (uint32_t)&linklist_write[1];
  400300:	f103 0810 	add.w	r8, r3, #16
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  400304:	f023 0003 	bic.w	r0, r3, #3
	src = (uint16_t *)&outPongBuffer[0];
	linklist_write[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
	    | XDMAC_UBC_NDE_FETCH_EN
	    | XDMAC_UBC_NSEN_UPDATED
	    | XDMAC_CUBC_UBLEN(IO_BUF_SIZE);
	linklist_write[1].mbr_sa = (uint32_t)(src);
  400308:	f8df e068 	ldr.w	lr, [pc, #104]	; 400374 <configure_xdma+0x108>
    linklist_write[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  40030c:	605e      	str	r6, [r3, #4]
	linklist_write[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  40030e:	615e      	str	r6, [r3, #20]
	linklist_write[1].mbr_da = (uint32_t)&(SSC->SSC_THR);
	linklist_write[1].mbr_nda = (uint32_t)&linklist_write[0];
  400310:	611b      	str	r3, [r3, #16]
    linklist_write[0].mbr_nda = (uint32_t)&linklist_write[1];
  400312:	f8c3 8000 	str.w	r8, [r3]
    linklist_write[0].mbr_sa = (uint32_t)(src);
  400316:	f8c3 c008 	str.w	ip, [r3, #8]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  40031a:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
	linklist_write[1].mbr_sa = (uint32_t)(src);
  40031e:	f8c3 e018 	str.w	lr, [r3, #24]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  400322:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
    linklist_write[0].mbr_da = (uint32_t)&(SSC->SSC_THR);
  400326:	60da      	str	r2, [r3, #12]
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  400328:	60e1      	str	r1, [r4, #12]
	linklist_write[1].mbr_da = (uint32_t)&(SSC->SSC_THR);
  40032a:	61da      	str	r2, [r3, #28]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CIE = mask;
  40032c:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
    xdmac_channel_set_descriptor_addr(XDMAC, XDMA_CH_SSC_TX, (uint32_t)(&linklist_write[0]), 0);
    
    xdmac_enable_interrupt(XDMAC, XDMA_CH_SSC_TX);
    xdmac_channel_enable_interrupt(XDMAC, XDMA_CH_SSC_TX, XDMAC_CIE_BIE);
    
}
  400330:	b008      	add	sp, #32
  400332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400336:	bf00      	nop
  400338:	00405f8d 	.word	0x00405f8d
  40033c:	00402e51 	.word	0x00402e51
  400340:	40078000 	.word	0x40078000
  400344:	e000e100 	.word	0xe000e100
  400348:	20404020 	.word	0x20404020
  40034c:	0b000400 	.word	0x0b000400
  400350:	20404040 	.word	0x20404040
  400354:	40004024 	.word	0x40004024
  400358:	21042801 	.word	0x21042801
  40035c:	004022c1 	.word	0x004022c1
  400360:	20453400 	.word	0x20453400
  400364:	20451400 	.word	0x20451400
  400368:	40004020 	.word	0x40004020
  40036c:	20014811 	.word	0x20014811
  400370:	20451c00 	.word	0x20451c00
  400374:	20452400 	.word	0x20452400

00400378 <audio_init>:

#include "DMA_Audio.h"
#include "WM8904_Driver.h"

void audio_init(void)
{
  400378:	b510      	push	{r4, lr}
	/* Initialize WM8904 TWI interface*/
	if (wm8904_twi_init() != TWIHS_SUCCESS) {
  40037a:	4b13      	ldr	r3, [pc, #76]	; (4003c8 <audio_init+0x50>)
  40037c:	4798      	blx	r3
  40037e:	b118      	cbz	r0, 400388 <audio_init+0x10>
		printf("-E-\tWM8904 initialization failed.\r");
  400380:	4812      	ldr	r0, [pc, #72]	; (4003cc <audio_init+0x54>)
  400382:	4b13      	ldr	r3, [pc, #76]	; (4003d0 <audio_init+0x58>)
  400384:	4798      	blx	r3
  400386:	e7fe      	b.n	400386 <audio_init+0xe>
			/* Capture error */
		}
	}
		
	/* Configure CODEC */
	configure_codec();
  400388:	4b12      	ldr	r3, [pc, #72]	; (4003d4 <audio_init+0x5c>)
  40038a:	4604      	mov	r4, r0
  40038c:	4798      	blx	r3
		
	/* Configure SSC */
	configure_ssc();
  40038e:	4b12      	ldr	r3, [pc, #72]	; (4003d8 <audio_init+0x60>)
  400390:	4798      	blx	r3
		
	/* Configure XDMA */
	configure_xdma();
  400392:	4b12      	ldr	r3, [pc, #72]	; (4003dc <audio_init+0x64>)
  400394:	4798      	blx	r3
		
	/* Enable the DAC master clock */
	pmc_pck_set_prescaler(PMC_PCK_2, PMC_MCKR_PRES_CLK_1);
  400396:	4621      	mov	r1, r4
  400398:	2002      	movs	r0, #2
  40039a:	4b11      	ldr	r3, [pc, #68]	; (4003e0 <audio_init+0x68>)
  40039c:	4798      	blx	r3
	pmc_pck_set_source(PMC_PCK_2, PMC_MCKR_CSS_SLOW_CLK);
  40039e:	4621      	mov	r1, r4
  4003a0:	2002      	movs	r0, #2
  4003a2:	4b10      	ldr	r3, [pc, #64]	; (4003e4 <audio_init+0x6c>)
  4003a4:	4798      	blx	r3
	pmc_enable_pck(PMC_PCK_2);
  4003a6:	2002      	movs	r0, #2
  4003a8:	4b0f      	ldr	r3, [pc, #60]	; (4003e8 <audio_init+0x70>)
  4003aa:	4798      	blx	r3
		
	/* Start playing */
	ssc_enable_rx(SSC);
  4003ac:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4003b0:	4b0e      	ldr	r3, [pc, #56]	; (4003ec <audio_init+0x74>)
  4003b2:	4798      	blx	r3
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  4003b4:	4c0e      	ldr	r4, [pc, #56]	; (4003f0 <audio_init+0x78>)
  4003b6:	2201      	movs	r2, #1
	xdmac_channel_enable(XDMAC, XDMA_CH_SSC_RX);
	// might want to enable in the first xdma interrupt (if you care)
	ssc_enable_tx(SSC);
  4003b8:	4b0e      	ldr	r3, [pc, #56]	; (4003f4 <audio_init+0x7c>)
  4003ba:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4003be:	61e2      	str	r2, [r4, #28]
  4003c0:	4798      	blx	r3
  4003c2:	2302      	movs	r3, #2
  4003c4:	61e3      	str	r3, [r4, #28]
  4003c6:	bd10      	pop	{r4, pc}
  4003c8:	00401a3d 	.word	0x00401a3d
  4003cc:	00408658 	.word	0x00408658
  4003d0:	004058c1 	.word	0x004058c1
  4003d4:	004004bd 	.word	0x004004bd
  4003d8:	004003f9 	.word	0x004003f9
  4003dc:	0040026d 	.word	0x0040026d
  4003e0:	00402e99 	.word	0x00402e99
  4003e4:	00402ecd 	.word	0x00402ecd
  4003e8:	00402f01 	.word	0x00402f01
  4003ec:	00401ecd 	.word	0x00401ecd
  4003f0:	40078000 	.word	0x40078000
  4003f4:	00401edd 	.word	0x00401edd

004003f8 <configure_ssc>:
#include "WM8904_Driver.h"


/********************************** Public Functions Start **********************************/
void configure_ssc(void)
{
  4003f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	clock_opt_t tx_clk_option, rx_clk_option;
	data_frame_opt_t tx_data_frame_option, rx_data_frame_option;

	/* Initialize clock */
	pmc_enable_periph_clk(ID_SSC);
  4003fc:	4b28      	ldr	r3, [pc, #160]	; (4004a0 <configure_ssc+0xa8>)
{
  4003fe:	b09c      	sub	sp, #112	; 0x70
	pmc_enable_periph_clk(ID_SSC);
  400400:	2016      	movs	r0, #22
	/* Reset SSC */
	ssc_reset(SSC);

	/* Transmitter clock mode configuration. */
	tx_clk_option.ul_cks = SSC_TCMR_CKS_TK;
	tx_clk_option.ul_cko = SSC_TCMR_CKO_NONE;
  400402:	2400      	movs	r4, #0
	pmc_enable_periph_clk(ID_SSC);
  400404:	4798      	blx	r3
	ssc_reset(SSC);
  400406:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40040a:	4b26      	ldr	r3, [pc, #152]	; (4004a4 <configure_ssc+0xac>)
	tx_clk_option.ul_cki = 0;
	tx_clk_option.ul_ckg = SSC_TCMR_CKG_CONTINUOUS;
	tx_clk_option.ul_start_sel = SSC_TCMR_START_TF_EDGE;
	tx_clk_option.ul_sttdly = 1;
	tx_clk_option.ul_period = BITS_BY_SLOT - 1;
  40040c:	250f      	movs	r5, #15
	ssc_reset(SSC);
  40040e:	4798      	blx	r3
	tx_clk_option.ul_sttdly = 1;
  400410:	2601      	movs	r6, #1
	tx_clk_option.ul_start_sel = SSC_TCMR_START_TF_EDGE;
  400412:	f44f 68e0 	mov.w	r8, #1792	; 0x700
	tx_clk_option.ul_cks = SSC_TCMR_CKS_TK;
  400416:	f04f 0e02 	mov.w	lr, #2
	/* Transmitter frame mode configuration. */
	tx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
	tx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  40041a:	2780      	movs	r7, #128	; 0x80
	tx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;
	tx_data_frame_option.ul_fslen_ext = 0;
	tx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
	tx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
	/* Configure the SSC transmitter to I2S mode. */
	ssc_set_transmitter(SSC, &tx_clk_option, &tx_data_frame_option);
  40041c:	aa0e      	add	r2, sp, #56	; 0x38
  40041e:	4669      	mov	r1, sp
  400420:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400424:	4b20      	ldr	r3, [pc, #128]	; (4004a8 <configure_ssc+0xb0>)
	tx_clk_option.ul_cks = SSC_TCMR_CKS_TK;
  400426:	f8cd e000 	str.w	lr, [sp]
	tx_clk_option.ul_cko = SSC_TCMR_CKO_NONE;
  40042a:	9401      	str	r4, [sp, #4]
	tx_clk_option.ul_cki = 0;
  40042c:	9402      	str	r4, [sp, #8]
	tx_clk_option.ul_ckg = SSC_TCMR_CKG_CONTINUOUS;
  40042e:	9403      	str	r4, [sp, #12]
	tx_data_frame_option.ul_datnb = 0;
  400430:	9410      	str	r4, [sp, #64]	; 0x40
	tx_data_frame_option.ul_fslen_ext = 0;
  400432:	9412      	str	r4, [sp, #72]	; 0x48
	tx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  400434:	9413      	str	r4, [sp, #76]	; 0x4c
	tx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  400436:	9414      	str	r4, [sp, #80]	; 0x50
	tx_clk_option.ul_start_sel = SSC_TCMR_START_TF_EDGE;
  400438:	f8cd 8018 	str.w	r8, [sp, #24]
	tx_clk_option.ul_sttdly = 1;
  40043c:	9605      	str	r6, [sp, #20]
	tx_clk_option.ul_period = BITS_BY_SLOT - 1;
  40043e:	9504      	str	r5, [sp, #16]
	tx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
  400440:	950e      	str	r5, [sp, #56]	; 0x38
	tx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;
  400442:	9511      	str	r5, [sp, #68]	; 0x44
	tx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  400444:	970f      	str	r7, [sp, #60]	; 0x3c
	ssc_set_transmitter(SSC, &tx_clk_option, &tx_data_frame_option);
  400446:	4798      	blx	r3

	/* Receiver clock mode configuration. */
	rx_clk_option.ul_cks = SSC_RCMR_CKS_TK;
	rx_clk_option.ul_cko = SSC_RCMR_CKO_NONE;
	rx_clk_option.ul_cki = SSC_RCMR_CKI;
  400448:	f04f 0c20 	mov.w	ip, #32
	rx_clk_option.ul_ckg = SSC_RCMR_CKG_CONTINUOUS;
	rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_EDGE;
	rx_clk_option.ul_sttdly = 1;	
	rx_clk_option.ul_period = BITS_BY_SLOT;	
  40044c:	f04f 0e10 	mov.w	lr, #16
	rx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;	
	rx_data_frame_option.ul_fslen_ext = 0;
	rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
	rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
	/* Configure the SSC transmitter to I2S mode. */
	ssc_set_receiver(SSC, &rx_clk_option, &rx_data_frame_option);
  400450:	aa15      	add	r2, sp, #84	; 0x54
  400452:	a907      	add	r1, sp, #28
  400454:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400458:	4b14      	ldr	r3, [pc, #80]	; (4004ac <configure_ssc+0xb4>)
	rx_clk_option.ul_cki = SSC_RCMR_CKI;
  40045a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
	rx_clk_option.ul_period = BITS_BY_SLOT;	
  40045e:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
	rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_EDGE;
  400462:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
	rx_clk_option.ul_cks = SSC_RCMR_CKS_TK;
  400466:	9607      	str	r6, [sp, #28]
	rx_clk_option.ul_cko = SSC_RCMR_CKO_NONE;
  400468:	9408      	str	r4, [sp, #32]
	rx_clk_option.ul_ckg = SSC_RCMR_CKG_CONTINUOUS;
  40046a:	940a      	str	r4, [sp, #40]	; 0x28
	rx_clk_option.ul_sttdly = 1;	
  40046c:	960c      	str	r6, [sp, #48]	; 0x30
	rx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
  40046e:	9515      	str	r5, [sp, #84]	; 0x54
	rx_data_frame_option.ul_msbf = SSC_RFMR_MSBF;
  400470:	9716      	str	r7, [sp, #88]	; 0x58
	rx_data_frame_option.ul_datnb = 0;
  400472:	9417      	str	r4, [sp, #92]	; 0x5c
	rx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;	
  400474:	9518      	str	r5, [sp, #96]	; 0x60
	rx_data_frame_option.ul_fslen_ext = 0;
  400476:	9419      	str	r4, [sp, #100]	; 0x64
	rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  400478:	941a      	str	r4, [sp, #104]	; 0x68
	rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  40047a:	941b      	str	r4, [sp, #108]	; 0x6c
	ssc_set_receiver(SSC, &rx_clk_option, &rx_data_frame_option);
  40047c:	4798      	blx	r3

	/* Disable transmitter first */
	ssc_disable_tx(SSC);
  40047e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400482:	4b0b      	ldr	r3, [pc, #44]	; (4004b0 <configure_ssc+0xb8>)
  400484:	4798      	blx	r3
	ssc_disable_rx(SSC);
  400486:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40048a:	4b0a      	ldr	r3, [pc, #40]	; (4004b4 <configure_ssc+0xbc>)
  40048c:	4798      	blx	r3

	/* Disable All Interrupt */
	ssc_disable_interrupt(SSC, 0xFFFFFFFF);
  40048e:	f04f 31ff 	mov.w	r1, #4294967295
  400492:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400496:	4b08      	ldr	r3, [pc, #32]	; (4004b8 <configure_ssc+0xc0>)
  400498:	4798      	blx	r3
}
  40049a:	b01c      	add	sp, #112	; 0x70
  40049c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4004a0:	00402e51 	.word	0x00402e51
  4004a4:	00401eb9 	.word	0x00401eb9
  4004a8:	00401f61 	.word	0x00401f61
  4004ac:	00401eed 	.word	0x00401eed
  4004b0:	00401ee5 	.word	0x00401ee5
  4004b4:	00401ed5 	.word	0x00401ed5
  4004b8:	00401fd5 	.word	0x00401fd5

004004bc <configure_codec>:


void configure_codec(void)
{
  4004bc:	b570      	push	{r4, r5, r6, lr}
	uint16_t data = 0;
	/* check that WM8904 is present */
	wm8904_write_register(WM8904_SW_RESET_AND_ID, 0xFFFF);
  4004be:	f64f 71ff 	movw	r1, #65535	; 0xffff
  4004c2:	2000      	movs	r0, #0
  4004c4:	4c40      	ldr	r4, [pc, #256]	; (4005c8 <configure_codec+0x10c>)
  4004c6:	47a0      	blx	r4
	data = wm8904_read_register(WM8904_SW_RESET_AND_ID);
  4004c8:	4b40      	ldr	r3, [pc, #256]	; (4005cc <configure_codec+0x110>)
  4004ca:	2000      	movs	r0, #0
  4004cc:	4798      	blx	r3
	if(data != 0x8904) {
  4004ce:	f648 1304 	movw	r3, #35076	; 0x8904
  4004d2:	4298      	cmp	r0, r3
  4004d4:	d003      	beq.n	4004de <configure_codec+0x22>
		printf("WM8904 not found!\n\r");
  4004d6:	483e      	ldr	r0, [pc, #248]	; (4005d0 <configure_codec+0x114>)
  4004d8:	4b3e      	ldr	r3, [pc, #248]	; (4005d4 <configure_codec+0x118>)
  4004da:	4798      	blx	r3
  4004dc:	e7fe      	b.n	4004dc <configure_codec+0x20>
		while(1);
	}

	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS);	
  4004de:	2108      	movs	r1, #8
  4004e0:	2004      	movs	r0, #4
  4004e2:	47a0      	blx	r4
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |	
  4004e4:	2147      	movs	r1, #71	; 0x47
  4004e6:	2005      	movs	r0, #5
	WM8904_VMID_RES_FAST | WM8904_VMID_ENA);
	delay_ms(5);
  4004e8:	4d3b      	ldr	r5, [pc, #236]	; (4005d8 <configure_codec+0x11c>)
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |	
  4004ea:	47a0      	blx	r4
	delay_ms(5);
  4004ec:	483b      	ldr	r0, [pc, #236]	; (4005dc <configure_codec+0x120>)
  4004ee:	47a8      	blx	r5
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |
  4004f0:	2143      	movs	r1, #67	; 0x43
  4004f2:	2005      	movs	r0, #5
  4004f4:	47a0      	blx	r4
	WM8904_VMID_RES_NORMAL | WM8904_VMID_ENA);
	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS | WM8904_BIAS_ENA);
  4004f6:	2109      	movs	r1, #9
  4004f8:	2004      	movs	r0, #4
  4004fa:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_0, WM8904_INL_ENA | WM8904_INR_ENA);
  4004fc:	2103      	movs	r1, #3
  4004fe:	200c      	movs	r0, #12
  400500:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_2, WM8904_HPL_PGA_ENA | WM8904_HPR_PGA_ENA);
  400502:	2103      	movs	r1, #3
  400504:	200e      	movs	r0, #14
  400506:	47a0      	blx	r4
	wm8904_write_register(WM8904_DAC_DIGITAL_1, WM8904_DEEMPH(0));
  400508:	2100      	movs	r1, #0
  40050a:	2021      	movs	r0, #33	; 0x21
  40050c:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_OUT12_ZC, 0x0000);
  40050e:	2100      	movs	r1, #0
  400510:	203d      	movs	r0, #61	; 0x3d
  400512:	47a0      	blx	r4
	wm8904_write_register(WM8904_CHARGE_PUMP_0, WM8904_CP_ENA);
  400514:	2101      	movs	r1, #1
  400516:	2062      	movs	r0, #98	; 0x62
  400518:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLASS_W_0, WM8904_CP_DYN_PWR);
  40051a:	2101      	movs	r1, #1
  40051c:	2068      	movs	r0, #104	; 0x68
  40051e:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_1, 0x0000);
  400520:	2100      	movs	r1, #0
  400522:	2074      	movs	r0, #116	; 0x74
  400524:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_2, WM8904_FLL_OUTDIV(7)| WM8904_FLL_FRATIO(4));
  400526:	f240 7104 	movw	r1, #1796	; 0x704
  40052a:	2075      	movs	r0, #117	; 0x75
  40052c:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_3, WM8904_FLL_K(0x8000));
  40052e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  400532:	2076      	movs	r0, #118	; 0x76
  400534:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_4, WM8904_FLL_N(0xBB));
  400536:	f44f 51bb 	mov.w	r1, #5984	; 0x1760
  40053a:	2077      	movs	r0, #119	; 0x77
  40053c:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_1, WM8904_FLL_FRACN_ENA | WM8904_FLL_ENA);
  40053e:	2105      	movs	r1, #5
  400540:	2074      	movs	r0, #116	; 0x74
  400542:	47a0      	blx	r4
	delay_ms(5);
  400544:	4825      	ldr	r0, [pc, #148]	; (4005dc <configure_codec+0x120>)
  400546:	47a8      	blx	r5
	wm8904_write_register(WM8904_CLOCK_RATES_1, WM8904_CLK_SYS_RATE(3) | WM8904_SAMPLE_RATE(SAMPLE_RATE));
  400548:	f640 4105 	movw	r1, #3077	; 0xc05
  40054c:	2015      	movs	r0, #21
  40054e:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLOCK_RATES_0, 0x0000);
  400550:	2100      	movs	r1, #0
  400552:	2014      	movs	r0, #20
  400554:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLOCK_RATES_2,
  400556:	f244 0106 	movw	r1, #16390	; 0x4006
  40055a:	2016      	movs	r0, #22
  40055c:	47a0      	blx	r4
	WM8904_SYSCLK_SRC | WM8904_CLK_SYS_ENA | WM8904_CLK_DSP_ENA);
	wm8904_write_register(WM8904_AUDIO_INTERFACE_1, WM8904_BCLK_DIR | WM8904_AIF_FMT_I2S); 
  40055e:	2142      	movs	r1, #66	; 0x42
  400560:	2019      	movs	r0, #25
  400562:	47a0      	blx	r4
	wm8904_write_register(WM8904_AUDIO_INTERFACE_2, WM8904_BCLK_DIV(8));
  400564:	2108      	movs	r1, #8
  400566:	201a      	movs	r0, #26
  400568:	47a0      	blx	r4
	wm8904_write_register(WM8904_AUDIO_INTERFACE_3, WM8904_LRCLK_DIR | WM8904_LRCLK_RATE(0x20));
  40056a:	f44f 6102 	mov.w	r1, #2080	; 0x820
  40056e:	201b      	movs	r0, #27
  400570:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_6,
  400572:	210f      	movs	r1, #15
  400574:	2012      	movs	r0, #18
  400576:	47a0      	blx	r4
	WM8904_DACL_ENA | WM8904_DACR_ENA |
	WM8904_ADCL_ENA | WM8904_ADCR_ENA);
	delay_ms(5);
  400578:	4818      	ldr	r0, [pc, #96]	; (4005dc <configure_codec+0x120>)
  40057a:	47a8      	blx	r5
	wm8904_write_register(WM8904_ANALOGUE_LEFT_INPUT_0, WM8904_LIN_VOL(0x10));
  40057c:	2110      	movs	r1, #16
  40057e:	202c      	movs	r0, #44	; 0x2c
  400580:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_RIGHT_INPUT_0, WM8904_RIN_VOL(0x10));
  400582:	2110      	movs	r1, #16
  400584:	202d      	movs	r0, #45	; 0x2d
  400586:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  400588:	2111      	movs	r1, #17
  40058a:	205a      	movs	r0, #90	; 0x5a
  40058c:	47a0      	blx	r4
	WM8904_HPL_ENA | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  40058e:	2133      	movs	r1, #51	; 0x33
  400590:	205a      	movs	r0, #90	; 0x5a
  400592:	47a0      	blx	r4
	WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_DC_SERVO_0,
  400594:	210f      	movs	r1, #15
  400596:	2043      	movs	r0, #67	; 0x43
  400598:	47a0      	blx	r4
	WM8904_DCS_ENA_CHAN_3 | WM8904_DCS_ENA_CHAN_2 |
	WM8904_DCS_ENA_CHAN_1 | WM8904_DCS_ENA_CHAN_0);
	wm8904_write_register(WM8904_DC_SERVO_1,
  40059a:	21f0      	movs	r1, #240	; 0xf0
  40059c:	2044      	movs	r0, #68	; 0x44
  40059e:	47a0      	blx	r4
	WM8904_DCS_TRIG_STARTUP_3 | WM8904_DCS_TRIG_STARTUP_2 |
	WM8904_DCS_TRIG_STARTUP_1 | WM8904_DCS_TRIG_STARTUP_0);
	delay_ms(100);
  4005a0:	480f      	ldr	r0, [pc, #60]	; (4005e0 <configure_codec+0x124>)
  4005a2:	47a8      	blx	r5
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  4005a4:	2177      	movs	r1, #119	; 0x77
  4005a6:	205a      	movs	r0, #90	; 0x5a
  4005a8:	47a0      	blx	r4
	WM8904_HPL_ENA_OUTP | WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_ENA_OUTP | WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  4005aa:	21ff      	movs	r1, #255	; 0xff
  4005ac:	205a      	movs	r0, #90	; 0x5a
  4005ae:	47a0      	blx	r4
	WM8904_HPL_RMV_SHORT | WM8904_HPL_ENA_OUTP | WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_RMV_SHORT | WM8904_HPR_ENA_OUTP | WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_OUT1_LEFT, WM8904_HPOUT_VU | WM8904_HPOUTL_VOL(0x39));
  4005b0:	21b9      	movs	r1, #185	; 0xb9
  4005b2:	2039      	movs	r0, #57	; 0x39
  4005b4:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_OUT1_RIGHT, WM8904_HPOUT_VU | WM8904_HPOUTR_VOL(0x39));
  4005b6:	203a      	movs	r0, #58	; 0x3a
  4005b8:	21b9      	movs	r1, #185	; 0xb9
  4005ba:	47a0      	blx	r4
	delay_ms(100);
  4005bc:	462b      	mov	r3, r5
  4005be:	4808      	ldr	r0, [pc, #32]	; (4005e0 <configure_codec+0x124>)
}
  4005c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	delay_ms(100);
  4005c4:	4718      	bx	r3
  4005c6:	bf00      	nop
  4005c8:	004019c5 	.word	0x004019c5
  4005cc:	00401a01 	.word	0x00401a01
  4005d0:	0040867c 	.word	0x0040867c
  4005d4:	004058c1 	.word	0x004058c1
  4005d8:	20400001 	.word	0x20400001
  4005dc:	0003dbc2 	.word	0x0003dbc2
  4005e0:	004d2b25 	.word	0x004d2b25

004005e4 <computeWaveletPitch>:
	float pitchF = 0.0f;
	int32_t i, j;
	float si, si1;
	float power; 
	
	arm_copy_f32(samples, sam, WIN_SIZE); 
  4005e4:	f44f 7200 	mov.w	r2, #512	; 0x200
  4005e8:	4995      	ldr	r1, [pc, #596]	; (400840 <computeWaveletPitch+0x25c>)
  4005ea:	4b96      	ldr	r3, [pc, #600]	; (400844 <computeWaveletPitch+0x260>)
	
	return pitchF;
}

float computeWaveletPitch(float * samples)
{
  4005ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int32_t curSamNb = WIN_SIZE;
  4005f0:	4692      	mov	sl, r2
	int32_t curLevel = 0;
  4005f2:	2400      	movs	r4, #0
		memset(distances, 0, WIN_SIZE*sizeof(int32_t));
  4005f4:	f8df b268 	ldr.w	fp, [pc, #616]	; 400860 <computeWaveletPitch+0x27c>
{
  4005f8:	ed2d 8b04 	vpush	{d8-d9}
  4005fc:	b087      	sub	sp, #28
	float curModeDistance = -1.0f;
  4005fe:	eeff 9a00 	vmov.f32	s19, #240	; 0xbf800000 -1.0
	arm_copy_f32(samples, sam, WIN_SIZE); 
  400602:	4798      	blx	r3
		arm_max_f32(sam, WIN_SIZE, &maxValue, &temp_idx); 
  400604:	4651      	mov	r1, sl
  400606:	ab03      	add	r3, sp, #12
  400608:	aa04      	add	r2, sp, #16
  40060a:	488d      	ldr	r0, [pc, #564]	; (400840 <computeWaveletPitch+0x25c>)
	int32_t curLevel = 0;
  40060c:	9400      	str	r4, [sp, #0]
		arm_max_f32(sam, WIN_SIZE, &maxValue, &temp_idx); 
  40060e:	4c8e      	ldr	r4, [pc, #568]	; (400848 <computeWaveletPitch+0x264>)
  400610:	47a0      	blx	r4
		arm_min_f32(sam, WIN_SIZE, &minValue, &temp_idx); 
  400612:	ab03      	add	r3, sp, #12
  400614:	aa05      	add	r2, sp, #20
  400616:	4651      	mov	r1, sl
  400618:	4889      	ldr	r0, [pc, #548]	; (400840 <computeWaveletPitch+0x25c>)
  40061a:	4c8c      	ldr	r4, [pc, #560]	; (40084c <computeWaveletPitch+0x268>)
  40061c:	47a0      	blx	r4
		float amplitudeMax = (maxValue > -minValue ? maxValue : -minValue);
  40061e:	ed9d 9a05 	vldr	s18, [sp, #20]
		ampltitudeThreshold = amplitudeMax*maximaThresholdRatio;		
  400622:	eef6 7a08 	vmov.f32	s15, #104	; 0x3f400000  0.750
		float amplitudeMax = (maxValue > -minValue ? maxValue : -minValue);
  400626:	ed9d 7a04 	vldr	s14, [sp, #16]
  40062a:	eeb1 9a49 	vneg.f32	s18, s18
	int32_t res = 1, j;
  40062e:	2301      	movs	r3, #1
		delta = DYW_SAMPLING_RATE/(_2power(curLevel)*maxF);
  400630:	eddf 8a87 	vldr	s17, [pc, #540]	; 400850 <computeWaveletPitch+0x26c>
		if (curSamNb < 2) return pitchF;
  400634:	ed9f 8a87 	vldr	s16, [pc, #540]	; 400854 <computeWaveletPitch+0x270>
		float amplitudeMax = (maxValue > -minValue ? maxValue : -minValue);
  400638:	fe89 9a07 	vmaxnm.f32	s18, s18, s14
		ampltitudeThreshold = amplitudeMax*maximaThresholdRatio;		
  40063c:	ee29 9a27 	vmul.f32	s18, s18, s15
		delta = DYW_SAMPLING_RATE/(_2power(curLevel)*maxF);
  400640:	ee07 3a90 	vmov	s15, r3
		if (curSamNb < 2) return pitchF;
  400644:	f1ba 0f01 	cmp.w	sl, #1
		delta = DYW_SAMPLING_RATE/(_2power(curLevel)*maxF);
  400648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40064c:	ee88 7aa7 	vdiv.f32	s14, s17, s15
  400650:	eefd 7ac7 	vcvt.s32.f32	s15, s14
  400654:	ee17 4a90 	vmov	r4, s15
		if (curSamNb < 2) return pitchF;
  400658:	f340 827d 	ble.w	400b56 <computeWaveletPitch+0x572>
  40065c:	f1ba 0f03 	cmp.w	sl, #3
  400660:	f340 826b 	ble.w	400b3a <computeWaveletPitch+0x556>
  400664:	f1aa 0e04 	sub.w	lr, sl, #4
  400668:	4b75      	ldr	r3, [pc, #468]	; (400840 <computeWaveletPitch+0x25c>)
  40066a:	2000      	movs	r0, #0
  40066c:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 400864 <computeWaveletPitch+0x280>
  400670:	f02e 0e01 	bic.w	lr, lr, #1
  400674:	4619      	mov	r1, r3
  400676:	9301      	str	r3, [sp, #4]
  400678:	4602      	mov	r2, r0
  40067a:	edd3 7a00 	vldr	s15, [r3]
  40067e:	f10e 0e03 	add.w	lr, lr, #3
  400682:	4606      	mov	r6, r0
  400684:	4605      	mov	r5, r0
  400686:	46c4      	mov	ip, r8
  400688:	eeb0 7a48 	vmov.f32	s14, s16
  40068c:	2301      	movs	r3, #1
  40068e:	e050      	b.n	400732 <computeWaveletPitch+0x14e>
						if (i -1 > lastmaxIndex + delta) 
  400690:	2201      	movs	r2, #1
			si = sam[i]; // - theDC;
  400692:	edd1 7a02 	vldr	s15, [r1, #8]
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
  400696:	eef5 7a40 	vcmp.f32	s15, #0.0
  40069a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40069e:	dd06      	ble.n	4006ae <computeWaveletPitch+0xca>
  4006a0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  4006a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006a8:	d801      	bhi.n	4006ae <computeWaveletPitch+0xca>
  4006aa:	2000      	movs	r0, #0
  4006ac:	2201      	movs	r2, #1
			if (si1 >= 0 && si < 0) {findMin = 1; findMax = 0; }
  4006ae:	eef5 7a40 	vcmp.f32	s15, #0.0
  4006b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006b6:	d506      	bpl.n	4006c6 <computeWaveletPitch+0xe2>
  4006b8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  4006bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006c0:	db01      	blt.n	4006c6 <computeWaveletPitch+0xe2>
  4006c2:	2001      	movs	r0, #1
  4006c4:	2200      	movs	r2, #0
			if (previousDV > -1000.0f) 
  4006c6:	eeb4 6ac8 	vcmpe.f32	s12, s16
			dv = si - si1;
  4006ca:	ee37 7ae6 	vsub.f32	s14, s15, s13
			if (previousDV > -1000.0f) 
  4006ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006d2:	dd2a      	ble.n	40072a <computeWaveletPitch+0x146>
				if (findMin && previousDV < 0.0f && dv >= 0.0f) 
  4006d4:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
  4006d8:	f000 0701 	and.w	r7, r0, #1
  4006dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006e0:	bf58      	it	pl
  4006e2:	2700      	movpl	r7, #0
  4006e4:	b1af      	cbz	r7, 400712 <computeWaveletPitch+0x12e>
  4006e6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  4006ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006ee:	db10      	blt.n	400712 <computeWaveletPitch+0x12e>
					if (Abs(si1) >= ampltitudeThreshold) 
  4006f0:	eef0 5ae6 	vabs.f32	s11, s13
  4006f4:	eeb4 9ae5 	vcmpe.f32	s18, s11
  4006f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006fc:	d809      	bhi.n	400712 <computeWaveletPitch+0x12e>
						if (i - 1 > lastMinIndex + delta)
  4006fe:	eb04 070c 	add.w	r7, r4, ip
  400702:	429f      	cmp	r7, r3
  400704:	da05      	bge.n	400712 <computeWaveletPitch+0x12e>
							mins[nbMins++] = i - 1;
  400706:	4854      	ldr	r0, [pc, #336]	; (400858 <computeWaveletPitch+0x274>)
  400708:	469c      	mov	ip, r3
  40070a:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
  40070e:	3501      	adds	r5, #1
							findMin = 0;
  400710:	2000      	movs	r0, #0
				if (findMax && previousDV > 0.0f && dv <= 0.0f) 
  400712:	eeb5 6a40 	vcmp.f32	s12, #0.0
  400716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40071a:	dd06      	ble.n	40072a <computeWaveletPitch+0x146>
  40071c:	b12a      	cbz	r2, 40072a <computeWaveletPitch+0x146>
  40071e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  400722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400726:	d96b      	bls.n	400800 <computeWaveletPitch+0x21c>
						if (i -1 > lastmaxIndex + delta) 
  400728:	2201      	movs	r2, #1
  40072a:	3302      	adds	r3, #2
  40072c:	3108      	adds	r1, #8
  40072e:	4573      	cmp	r3, lr
  400730:	d07b      	beq.n	40082a <computeWaveletPitch+0x246>
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
  400732:	eef5 7a40 	vcmp.f32	s15, #0.0
			si = sam[i]; // - theDC;
  400736:	edd1 6a01 	vldr	s13, [r1, #4]
  40073a:	1e5f      	subs	r7, r3, #1
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
  40073c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400740:	d806      	bhi.n	400750 <computeWaveletPitch+0x16c>
  400742:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40074a:	dd01      	ble.n	400750 <computeWaveletPitch+0x16c>
  40074c:	2000      	movs	r0, #0
  40074e:	2201      	movs	r2, #1
			if (si1 >= 0 && si < 0) {findMin = 1; findMax = 0; }
  400750:	eef5 7a40 	vcmp.f32	s15, #0.0
  400754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400758:	db06      	blt.n	400768 <computeWaveletPitch+0x184>
  40075a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  40075e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400762:	d501      	bpl.n	400768 <computeWaveletPitch+0x184>
  400764:	2001      	movs	r0, #1
  400766:	2200      	movs	r2, #0
			if (previousDV > -1000.0f) 
  400768:	eeb4 7ac8 	vcmpe.f32	s14, s16
			dv = si - si1;
  40076c:	ee36 6ae7 	vsub.f32	s12, s13, s15
			if (previousDV > -1000.0f) 
  400770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400774:	dd8d      	ble.n	400692 <computeWaveletPitch+0xae>
				if (findMin && previousDV < 0.0f && dv >= 0.0f) 
  400776:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  40077a:	f000 0901 	and.w	r9, r0, #1
  40077e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400782:	bf58      	it	pl
  400784:	f04f 0900 	movpl.w	r9, #0
  400788:	f1b9 0f00 	cmp.w	r9, #0
  40078c:	d015      	beq.n	4007ba <computeWaveletPitch+0x1d6>
  40078e:	eeb5 6a40 	vcmp.f32	s12, #0.0
  400792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400796:	db10      	blt.n	4007ba <computeWaveletPitch+0x1d6>
					if (Abs(si1) >= ampltitudeThreshold) 
  400798:	eef0 5ae7 	vabs.f32	s11, s15
  40079c:	eeb4 9ae5 	vcmpe.f32	s18, s11
  4007a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4007a4:	d809      	bhi.n	4007ba <computeWaveletPitch+0x1d6>
						if (i - 1 > lastMinIndex + delta)
  4007a6:	eb04 090c 	add.w	r9, r4, ip
  4007aa:	45b9      	cmp	r9, r7
  4007ac:	da05      	bge.n	4007ba <computeWaveletPitch+0x1d6>
							mins[nbMins++] = i - 1;
  4007ae:	482a      	ldr	r0, [pc, #168]	; (400858 <computeWaveletPitch+0x274>)
  4007b0:	46bc      	mov	ip, r7
  4007b2:	f840 7025 	str.w	r7, [r0, r5, lsl #2]
  4007b6:	3501      	adds	r5, #1
							findMin = 0;
  4007b8:	2000      	movs	r0, #0
				if (findMax && previousDV > 0.0f && dv <= 0.0f) 
  4007ba:	eeb5 7a40 	vcmp.f32	s14, #0.0
  4007be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4007c2:	f77f af66 	ble.w	400692 <computeWaveletPitch+0xae>
  4007c6:	2a00      	cmp	r2, #0
  4007c8:	f43f af63 	beq.w	400692 <computeWaveletPitch+0xae>
  4007cc:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
  4007d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4007d4:	f63f af5c 	bhi.w	400690 <computeWaveletPitch+0xac>
					if (Abs(si1) >= ampltitudeThreshold) 
  4007d8:	eef0 7ae7 	vabs.f32	s15, s15
  4007dc:	eeb4 9ae7 	vcmpe.f32	s18, s15
  4007e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4007e4:	f63f af54 	bhi.w	400690 <computeWaveletPitch+0xac>
						if (i -1 > lastmaxIndex + delta) 
  4007e8:	eb04 0208 	add.w	r2, r4, r8
  4007ec:	42ba      	cmp	r2, r7
  4007ee:	f6bf af4f 	bge.w	400690 <computeWaveletPitch+0xac>
							maxs[nbMaxs++] = i - 1;
  4007f2:	4a1a      	ldr	r2, [pc, #104]	; (40085c <computeWaveletPitch+0x278>)
  4007f4:	46b8      	mov	r8, r7
  4007f6:	f842 7026 	str.w	r7, [r2, r6, lsl #2]
  4007fa:	3601      	adds	r6, #1
							findMax = 0;
  4007fc:	2200      	movs	r2, #0
  4007fe:	e748      	b.n	400692 <computeWaveletPitch+0xae>
					if (Abs(si1) >= ampltitudeThreshold) 
  400800:	eef0 6ae6 	vabs.f32	s13, s13
  400804:	eeb4 9ae6 	vcmpe.f32	s18, s13
  400808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40080c:	d88c      	bhi.n	400728 <computeWaveletPitch+0x144>
						if (i -1 > lastmaxIndex + delta) 
  40080e:	eb04 0208 	add.w	r2, r4, r8
  400812:	429a      	cmp	r2, r3
  400814:	da88      	bge.n	400728 <computeWaveletPitch+0x144>
							maxs[nbMaxs++] = i - 1;
  400816:	4a11      	ldr	r2, [pc, #68]	; (40085c <computeWaveletPitch+0x278>)
  400818:	4698      	mov	r8, r3
  40081a:	3108      	adds	r1, #8
  40081c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  400820:	3302      	adds	r3, #2
  400822:	3601      	adds	r6, #1
							findMax = 0;
  400824:	2200      	movs	r2, #0
  400826:	4573      	cmp	r3, lr
  400828:	d183      	bne.n	400732 <computeWaveletPitch+0x14e>
  40082a:	9f01      	ldr	r7, [sp, #4]
  40082c:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
							mins[nbMins++] = i - 1;
  400830:	f8df 9024 	ldr.w	r9, [pc, #36]	; 400858 <computeWaveletPitch+0x274>
  400834:	46a6      	mov	lr, r4
  400836:	4419      	add	r1, r3
  400838:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  40083c:	e01a      	b.n	400874 <computeWaveletPitch+0x290>
  40083e:	bf00      	nop
  400840:	20405a00 	.word	0x20405a00
  400844:	00405505 	.word	0x00405505
  400848:	004056a1 	.word	0x004056a1
  40084c:	004055c5 	.word	0x004055c5
  400850:	41780419 	.word	0x41780419
  400854:	c47a0000 	.word	0xc47a0000
  400858:	20405200 	.word	0x20405200
  40085c:	20404a00 	.word	0x20404a00
  400860:	20404200 	.word	0x20404200
  400864:	fff0bdc0 	.word	0xfff0bdc0
						if (i -1 > lastmaxIndex + delta) 
  400868:	2201      	movs	r2, #1
		for (i = 1; i < curSamNb; i++) 
  40086a:	3301      	adds	r3, #1
			dv = si - si1;
  40086c:	eeb0 7a67 	vmov.f32	s14, s15
		for (i = 1; i < curSamNb; i++) 
  400870:	459a      	cmp	sl, r3
  400872:	dd65      	ble.n	400940 <computeWaveletPitch+0x35c>
			si = sam[i]; // - theDC;
  400874:	edd1 7a01 	vldr	s15, [r1, #4]
  400878:	1e5f      	subs	r7, r3, #1
			si1 = sam[i-1]; // - theDC;
  40087a:	ecf1 6a01 	vldmia	r1!, {s13}
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
  40087e:	eef5 7a40 	vcmp.f32	s15, #0.0
  400882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400886:	dd06      	ble.n	400896 <computeWaveletPitch+0x2b2>
  400888:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  40088c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400890:	d801      	bhi.n	400896 <computeWaveletPitch+0x2b2>
  400892:	2000      	movs	r0, #0
  400894:	2201      	movs	r2, #1
			if (si1 >= 0 && si < 0) {findMin = 1; findMax = 0; }
  400896:	eef5 7a40 	vcmp.f32	s15, #0.0
  40089a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40089e:	d506      	bpl.n	4008ae <computeWaveletPitch+0x2ca>
  4008a0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  4008a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008a8:	db01      	blt.n	4008ae <computeWaveletPitch+0x2ca>
  4008aa:	2001      	movs	r0, #1
  4008ac:	2200      	movs	r2, #0
			if (previousDV > -1000.0f) 
  4008ae:	eeb4 7ac8 	vcmpe.f32	s14, s16
			dv = si - si1;
  4008b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
			if (previousDV > -1000.0f) 
  4008b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008ba:	ddd6      	ble.n	40086a <computeWaveletPitch+0x286>
				if (findMin && previousDV < 0.0f && dv >= 0.0f) 
  4008bc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  4008c0:	f000 0401 	and.w	r4, r0, #1
  4008c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008c8:	bf58      	it	pl
  4008ca:	2400      	movpl	r4, #0
  4008cc:	b1a4      	cbz	r4, 4008f8 <computeWaveletPitch+0x314>
  4008ce:	eef5 7a40 	vcmp.f32	s15, #0.0
  4008d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008d6:	db0f      	blt.n	4008f8 <computeWaveletPitch+0x314>
					if (Abs(si1) >= ampltitudeThreshold) 
  4008d8:	eeb0 6ae6 	vabs.f32	s12, s13
  4008dc:	eeb4 9ac6 	vcmpe.f32	s18, s12
  4008e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008e4:	d808      	bhi.n	4008f8 <computeWaveletPitch+0x314>
						if (i - 1 > lastMinIndex + delta)
  4008e6:	eb0e 040c 	add.w	r4, lr, ip
  4008ea:	42bc      	cmp	r4, r7
  4008ec:	da04      	bge.n	4008f8 <computeWaveletPitch+0x314>
							mins[nbMins++] = i - 1;
  4008ee:	f849 7025 	str.w	r7, [r9, r5, lsl #2]
  4008f2:	46bc      	mov	ip, r7
  4008f4:	3501      	adds	r5, #1
							findMin = 0;
  4008f6:	2000      	movs	r0, #0
				if (findMax && previousDV > 0.0f && dv <= 0.0f) 
  4008f8:	eeb5 7a40 	vcmp.f32	s14, #0.0
  4008fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400900:	ddb3      	ble.n	40086a <computeWaveletPitch+0x286>
  400902:	2a00      	cmp	r2, #0
  400904:	d0b1      	beq.n	40086a <computeWaveletPitch+0x286>
  400906:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  40090a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40090e:	d8ab      	bhi.n	400868 <computeWaveletPitch+0x284>
					if (Abs(si1) >= ampltitudeThreshold) 
  400910:	eef0 6ae6 	vabs.f32	s13, s13
  400914:	eeb4 9ae6 	vcmpe.f32	s18, s13
  400918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40091c:	d8a4      	bhi.n	400868 <computeWaveletPitch+0x284>
						if (i -1 > lastmaxIndex + delta) 
  40091e:	eb0e 0208 	add.w	r2, lr, r8
  400922:	42ba      	cmp	r2, r7
  400924:	daa0      	bge.n	400868 <computeWaveletPitch+0x284>
		for (i = 1; i < curSamNb; i++) 
  400926:	3301      	adds	r3, #1
							maxs[nbMaxs++] = i - 1;
  400928:	4aac      	ldr	r2, [pc, #688]	; (400bdc <computeWaveletPitch+0x5f8>)
  40092a:	46b8      	mov	r8, r7
			dv = si - si1;
  40092c:	eeb0 7a67 	vmov.f32	s14, s15
		for (i = 1; i < curSamNb; i++) 
  400930:	459a      	cmp	sl, r3
							maxs[nbMaxs++] = i - 1;
  400932:	f842 7026 	str.w	r7, [r2, r6, lsl #2]
  400936:	f106 0601 	add.w	r6, r6, #1
							findMax = 0;
  40093a:	f04f 0200 	mov.w	r2, #0
		for (i = 1; i < curSamNb; i++) 
  40093e:	dc99      	bgt.n	400874 <computeWaveletPitch+0x290>
  400940:	4674      	mov	r4, lr
		if (nbMins == 0 && nbMaxs == 0) 
  400942:	b915      	cbnz	r5, 40094a <computeWaveletPitch+0x366>
  400944:	2e00      	cmp	r6, #0
  400946:	f000 8106 	beq.w	400b56 <computeWaveletPitch+0x572>
		memset(distances, 0, WIN_SIZE*sizeof(int32_t));
  40094a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40094e:	2100      	movs	r1, #0
  400950:	4658      	mov	r0, fp
  400952:	4ba3      	ldr	r3, [pc, #652]	; (400be0 <computeWaveletPitch+0x5fc>)
  400954:	4798      	blx	r3
		for (i = 0 ; i < nbMins ; i++) 
  400956:	b34d      	cbz	r5, 4009ac <computeWaveletPitch+0x3c8>
  400958:	f8df e298 	ldr.w	lr, [pc, #664]	; 400bf4 <computeWaveletPitch+0x610>
  40095c:	2202      	movs	r2, #2
  40095e:	2700      	movs	r7, #0
  400960:	4671      	mov	r1, lr
  400962:	e012      	b.n	40098a <computeWaveletPitch+0x3a6>
					d = Abs(mins[i] - mins[i+j]);
  400964:	f8d1 c000 	ldr.w	ip, [r1]
  400968:	684b      	ldr	r3, [r1, #4]
  40096a:	ebac 0303 	sub.w	r3, ip, r3
  40096e:	2b00      	cmp	r3, #0
  400970:	bfb8      	it	lt
  400972:	425b      	neglt	r3, r3
				if (i+j < nbMins) 
  400974:	42aa      	cmp	r2, r5
					distances[d]++; 
  400976:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
  40097a:	f100 0001 	add.w	r0, r0, #1
  40097e:	f84b 0023 	str.w	r0, [fp, r3, lsl #2]
				if (i+j < nbMins) 
  400982:	f2c0 80cc 	blt.w	400b1e <computeWaveletPitch+0x53a>
  400986:	3104      	adds	r1, #4
  400988:	3201      	adds	r2, #1
  40098a:	3701      	adds	r7, #1
  40098c:	42af      	cmp	r7, r5
  40098e:	dbe9      	blt.n	400964 <computeWaveletPitch+0x380>
  400990:	42aa      	cmp	r2, r5
  400992:	da0b      	bge.n	4009ac <computeWaveletPitch+0x3c8>
					d = Abs(mins[i] - mins[i+j]);
  400994:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
  400998:	680b      	ldr	r3, [r1, #0]
  40099a:	1a9b      	subs	r3, r3, r2
  40099c:	2b00      	cmp	r3, #0
  40099e:	bfb8      	it	lt
  4009a0:	425b      	neglt	r3, r3
					distances[d]++; 
  4009a2:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
  4009a6:	3201      	adds	r2, #1
  4009a8:	f84b 2023 	str.w	r2, [fp, r3, lsl #2]
		for (i = 0 ; i < nbMaxs ; i++) 
  4009ac:	b346      	cbz	r6, 400a00 <computeWaveletPitch+0x41c>
  4009ae:	4d8b      	ldr	r5, [pc, #556]	; (400bdc <computeWaveletPitch+0x5f8>)
  4009b0:	2202      	movs	r2, #2
  4009b2:	2700      	movs	r7, #0
  4009b4:	4629      	mov	r1, r5
  4009b6:	e012      	b.n	4009de <computeWaveletPitch+0x3fa>
					d = Abs(maxs[i] - maxs[i+j]);
  4009b8:	f8d1 e000 	ldr.w	lr, [r1]
  4009bc:	684b      	ldr	r3, [r1, #4]
  4009be:	ebae 0303 	sub.w	r3, lr, r3
  4009c2:	2b00      	cmp	r3, #0
  4009c4:	bfb8      	it	lt
  4009c6:	425b      	neglt	r3, r3
				if (i+j < nbMaxs) 
  4009c8:	42b2      	cmp	r2, r6
					distances[d]++; 
  4009ca:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
  4009ce:	f100 0001 	add.w	r0, r0, #1
  4009d2:	f84b 0023 	str.w	r0, [fp, r3, lsl #2]
				if (i+j < nbMaxs) 
  4009d6:	f2c0 8193 	blt.w	400d00 <computeWaveletPitch+0x71c>
  4009da:	3104      	adds	r1, #4
  4009dc:	3201      	adds	r2, #1
  4009de:	3701      	adds	r7, #1
  4009e0:	42b7      	cmp	r7, r6
  4009e2:	dbe9      	blt.n	4009b8 <computeWaveletPitch+0x3d4>
  4009e4:	42b2      	cmp	r2, r6
  4009e6:	da0b      	bge.n	400a00 <computeWaveletPitch+0x41c>
					d = Abs(maxs[i] - maxs[i+j]);
  4009e8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4009ec:	680b      	ldr	r3, [r1, #0]
  4009ee:	1a9b      	subs	r3, r3, r2
  4009f0:	2b00      	cmp	r3, #0
  4009f2:	bfb8      	it	lt
  4009f4:	425b      	neglt	r3, r3
					distances[d]++; 
  4009f6:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
  4009fa:	3201      	adds	r2, #1
  4009fc:	f84b 2023 	str.w	r2, [fp, r3, lsl #2]
		for (i = 0 ; i < nbMaxs ; i++) 
  400a00:	f04f 36ff 	mov.w	r6, #4294967295
  400a04:	f1c4 0e00 	rsb	lr, r4, #0
  400a08:	2500      	movs	r5, #0
  400a0a:	f104 0c01 	add.w	ip, r4, #1
  400a0e:	4637      	mov	r7, r6
			for (j = -delta ; j <= delta ; j++) 
  400a10:	4574      	cmp	r4, lr
  400a12:	f2c0 8082 	blt.w	400b1a <computeWaveletPitch+0x536>
  400a16:	1b2b      	subs	r3, r5, r4
  400a18:	eb0c 0205 	add.w	r2, ip, r5
  400a1c:	2100      	movs	r1, #0
				if (i+j >=0 && i+j < curSamNb)
  400a1e:	4553      	cmp	r3, sl
  400a20:	da04      	bge.n	400a2c <computeWaveletPitch+0x448>
  400a22:	2b00      	cmp	r3, #0
  400a24:	db02      	blt.n	400a2c <computeWaveletPitch+0x448>
					summed += distances[i+j];
  400a26:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
  400a2a:	4401      	add	r1, r0
  400a2c:	3301      	adds	r3, #1
			for (j = -delta ; j <= delta ; j++) 
  400a2e:	4293      	cmp	r3, r2
  400a30:	d1f5      	bne.n	400a1e <computeWaveletPitch+0x43a>
			if (summed == bestValue) 
  400a32:	42b9      	cmp	r1, r7
  400a34:	d06c      	beq.n	400b10 <computeWaveletPitch+0x52c>
			else if (summed > bestValue) 
  400a36:	dd01      	ble.n	400a3c <computeWaveletPitch+0x458>
  400a38:	460f      	mov	r7, r1
  400a3a:	462e      	mov	r6, r5
		for (i = 0; i< curSamNb; i++) 
  400a3c:	3501      	adds	r5, #1
  400a3e:	4555      	cmp	r5, sl
  400a40:	d1e6      	bne.n	400a10 <computeWaveletPitch+0x42c>
		for (j = -delta ; j <= delta ; j++) 
  400a42:	4574      	cmp	r4, lr
  400a44:	f2c0 80aa 	blt.w	400b9c <computeWaveletPitch+0x5b8>
  400a48:	ed9f 7a66 	vldr	s14, [pc, #408]	; 400be4 <computeWaveletPitch+0x600>
  400a4c:	1c62      	adds	r2, r4, #1
  400a4e:	1b33      	subs	r3, r6, r4
  400a50:	eef0 6a47 	vmov.f32	s13, s14
  400a54:	4416      	add	r6, r2
			if (bestDistance+j >=0 && bestDistance+j < WIN_SIZE) 
  400a56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  400a5a:	d211      	bcs.n	400a80 <computeWaveletPitch+0x49c>
				int32_t nbDist = distances[bestDistance+j];
  400a5c:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
					distAvg += (bestDistance+j)*nbDist;
  400a60:	fb02 f103 	mul.w	r1, r2, r3
					nbDists += nbDist;
  400a64:	ee06 2a10 	vmov	s12, r2
				if (nbDist > 0) {
  400a68:	2a00      	cmp	r2, #0
					distAvg += (bestDistance+j)*nbDist;
  400a6a:	ee07 1a90 	vmov	s15, r1
					nbDists += nbDist;
  400a6e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
					distAvg += (bestDistance+j)*nbDist;
  400a72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (nbDist > 0) {
  400a76:	dd03      	ble.n	400a80 <computeWaveletPitch+0x49c>
					nbDists += nbDist;
  400a78:	ee76 6a86 	vadd.f32	s13, s13, s12
					distAvg += (bestDistance+j)*nbDist;
  400a7c:	ee37 7a27 	vadd.f32	s14, s14, s15
  400a80:	3301      	adds	r3, #1
		for (j = -delta ; j <= delta ; j++) 
  400a82:	42b3      	cmp	r3, r6
  400a84:	d1e7      	bne.n	400a56 <computeWaveletPitch+0x472>
  400a86:	ee87 6a26 	vdiv.f32	s12, s14, s13
				pitchF = DYW_SAMPLING_RATE/(_2power(curLevel-1)*curModeDistance);
  400a8a:	9b00      	ldr	r3, [sp, #0]
		if (curModeDistance > -1.0f) 
  400a8c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  400a90:	eef4 9ae7 	vcmpe.f32	s19, s15
  400a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400a98:	dd12      	ble.n	400ac0 <computeWaveletPitch+0x4dc>
			float similarity = Abs(distAvg*2 - curModeDistance);
  400a9a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
			if (similarity <= 2*delta) 
  400a9e:	0064      	lsls	r4, r4, #1
			float similarity = Abs(distAvg*2 - curModeDistance);
  400aa0:	eef0 6a69 	vmov.f32	s13, s19
			if (similarity <= 2*delta) 
  400aa4:	ee07 4a90 	vmov	s15, r4
			float similarity = Abs(distAvg*2 - curModeDistance);
  400aa8:	eed6 6a07 	vfnms.f32	s13, s12, s14
			if (similarity <= 2*delta) 
  400aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			float similarity = Abs(distAvg*2 - curModeDistance);
  400ab0:	eeb0 7ae6 	vabs.f32	s14, s13
			if (similarity <= 2*delta) 
  400ab4:	eeb4 7ae7 	vcmpe.f32	s14, s15
  400ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400abc:	f240 80a0 	bls.w	400c00 <computeWaveletPitch+0x61c>
		curLevel = curLevel + 1;
  400ac0:	3301      	adds	r3, #1
		if (curLevel >= maxFLWTlevels) 
  400ac2:	2b06      	cmp	r3, #6
		curLevel = curLevel + 1;
  400ac4:	9300      	str	r3, [sp, #0]
		if (curLevel >= maxFLWTlevels) 
  400ac6:	d046      	beq.n	400b56 <computeWaveletPitch+0x572>
  400ac8:	9b01      	ldr	r3, [sp, #4]
		for (i = 0; i < curSamNb/2; i++)
  400aca:	ea4f 0a6a 	mov.w	sl, sl, asr #1
  400ace:	4a46      	ldr	r2, [pc, #280]	; (400be8 <computeWaveletPitch+0x604>)
			sam[i] = (sam[2*i] + sam[2*i + 1]) * 0.5f;
  400ad0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
  400ad4:	eb03 01ca 	add.w	r1, r3, sl, lsl #3
		for (i = 0; i < curSamNb/2; i++)
  400ad8:	4613      	mov	r3, r2
			sam[i] = (sam[2*i] + sam[2*i + 1]) * 0.5f;
  400ada:	ed93 7a00 	vldr	s14, [r3]
  400ade:	3308      	adds	r3, #8
  400ae0:	ed53 7a01 	vldr	s15, [r3, #-4]
		for (i = 0; i < curSamNb/2; i++)
  400ae4:	428b      	cmp	r3, r1
			sam[i] = (sam[2*i] + sam[2*i + 1]) * 0.5f;
  400ae6:	ee77 7a27 	vadd.f32	s15, s14, s15
  400aea:	ee67 7aa6 	vmul.f32	s15, s15, s13
  400aee:	ece2 7a01 	vstmia	r2!, {s15}
		for (i = 0; i < curSamNb/2; i++)
  400af2:	d1f2      	bne.n	400ada <computeWaveletPitch+0x4f6>
	for (j = 0; j < i; j++) res <<= 1;
  400af4:	9b00      	ldr	r3, [sp, #0]
  400af6:	2b01      	cmp	r3, #1
  400af8:	d057      	beq.n	400baa <computeWaveletPitch+0x5c6>
  400afa:	2b02      	cmp	r3, #2
  400afc:	d053      	beq.n	400ba6 <computeWaveletPitch+0x5c2>
  400afe:	2b03      	cmp	r3, #3
  400b00:	d04f      	beq.n	400ba2 <computeWaveletPitch+0x5be>
  400b02:	2b05      	cmp	r3, #5
  400b04:	bf0c      	ite	eq
  400b06:	2320      	moveq	r3, #32
  400b08:	2310      	movne	r3, #16
		curModeDistance = distAvg;
  400b0a:	eef0 9a46 	vmov.f32	s19, s12
  400b0e:	e597      	b.n	400640 <computeWaveletPitch+0x5c>
				if (i == 2*bestDistance)
  400b10:	ebb5 0f46 	cmp.w	r5, r6, lsl #1
  400b14:	bf08      	it	eq
  400b16:	462e      	moveq	r6, r5
  400b18:	e790      	b.n	400a3c <computeWaveletPitch+0x458>
			int32_t summed = 0;
  400b1a:	2100      	movs	r1, #0
  400b1c:	e789      	b.n	400a32 <computeWaveletPitch+0x44e>
					d = Abs(mins[i] - mins[i+j]);
  400b1e:	f85e 3022 	ldr.w	r3, [lr, r2, lsl #2]
  400b22:	ebac 0303 	sub.w	r3, ip, r3
  400b26:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
  400b2a:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
					distances[d]++; 
  400b2e:	f85b 3020 	ldr.w	r3, [fp, r0, lsl #2]
  400b32:	3301      	adds	r3, #1
  400b34:	f84b 3020 	str.w	r3, [fp, r0, lsl #2]
  400b38:	e725      	b.n	400986 <computeWaveletPitch+0x3a2>
		if (curSamNb < 2) return pitchF;
  400b3a:	2000      	movs	r0, #0
  400b3c:	492a      	ldr	r1, [pc, #168]	; (400be8 <computeWaveletPitch+0x604>)
  400b3e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 400bf8 <computeWaveletPitch+0x614>
  400b42:	eeb0 7a48 	vmov.f32	s14, s16
  400b46:	2301      	movs	r3, #1
  400b48:	4602      	mov	r2, r0
  400b4a:	4606      	mov	r6, r0
  400b4c:	4605      	mov	r5, r0
  400b4e:	46c4      	mov	ip, r8
  400b50:	9101      	str	r1, [sp, #4]
  400b52:	460f      	mov	r7, r1
  400b54:	e66a      	b.n	40082c <computeWaveletPitch+0x248>
		if (pitchtracker._prevPitch > -1.0f) 
  400b56:	4a25      	ldr	r2, [pc, #148]	; (400bec <computeWaveletPitch+0x608>)
  400b58:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  400b5c:	edd2 7a00 	vldr	s15, [r2]
  400b60:	eef4 7ac7 	vcmpe.f32	s15, s14
  400b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400b68:	dd21      	ble.n	400bae <computeWaveletPitch+0x5ca>
			if (pitchtracker._pitchConfidence >= 1) 
  400b6a:	6853      	ldr	r3, [r2, #4]
  400b6c:	2b00      	cmp	r3, #0
  400b6e:	dd27      	ble.n	400bc0 <computeWaveletPitch+0x5dc>
				pitchtracker._pitchConfidence = Max(0, pitchtracker._pitchConfidence - 1);
  400b70:	3b01      	subs	r3, #1
  400b72:	6053      	str	r3, [r2, #4]
	if (pitchtracker._pitchConfidence >= 1) 
  400b74:	2b00      	cmp	r3, #0
  400b76:	dd1a      	ble.n	400bae <computeWaveletPitch+0x5ca>
	if (pitch < -1.0f) pitch = 0.0f;
  400b78:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
  400b7c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 400be4 <computeWaveletPitch+0x600>
  400b80:	eef4 7a66 	vcmp.f32	s15, s13
  400b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400b88:	bf48      	it	mi
  400b8a:	eef0 7a47 	vmovmi.f32	s15, s14
	return _dywapitch_dynamicprocess(get_raw_pitch(samples)); 
  400b8e:	ee17 0a90 	vmov	r0, s15
  400b92:	b007      	add	sp, #28
  400b94:	ecbd 8b04 	vpop	{d8-d9}
  400b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (j = -delta ; j <= delta ; j++) 
  400b9c:	ed9f 6a14 	vldr	s12, [pc, #80]	; 400bf0 <computeWaveletPitch+0x60c>
  400ba0:	e773      	b.n	400a8a <computeWaveletPitch+0x4a6>
	for (j = 0; j < i; j++) res <<= 1;
  400ba2:	2308      	movs	r3, #8
  400ba4:	e7b1      	b.n	400b0a <computeWaveletPitch+0x526>
  400ba6:	2304      	movs	r3, #4
  400ba8:	e7af      	b.n	400b0a <computeWaveletPitch+0x526>
  400baa:	2302      	movs	r3, #2
  400bac:	e7ad      	b.n	400b0a <computeWaveletPitch+0x526>
	float estimatedPitch = -1.0f;
  400bae:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  400bb2:	ee17 0a90 	vmov	r0, s15
  400bb6:	b007      	add	sp, #28
  400bb8:	ecbd 8b04 	vpop	{d8-d9}
  400bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pitch = -1.0f;
  400bc0:	eef0 7a47 	vmov.f32	s15, s14
				pitchtracker._pitchConfidence = 0;
  400bc4:	2300      	movs	r3, #0
				pitchtracker._prevPitch = -1.0f;
  400bc6:	ed82 7a00 	vstr	s14, [r2]
				pitchtracker._pitchConfidence = 0;
  400bca:	6053      	str	r3, [r2, #4]
  400bcc:	ee17 0a90 	vmov	r0, s15
  400bd0:	b007      	add	sp, #28
  400bd2:	ecbd 8b04 	vpop	{d8-d9}
  400bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400bda:	bf00      	nop
  400bdc:	20404a00 	.word	0x20404a00
  400be0:	00405f8d 	.word	0x00405f8d
  400be4:	00000000 	.word	0x00000000
  400be8:	20405a00 	.word	0x20405a00
  400bec:	20400020 	.word	0x20400020
  400bf0:	7fc00000 	.word	0x7fc00000
  400bf4:	20405200 	.word	0x20405200
  400bf8:	fff0bdc0 	.word	0xfff0bdc0
  400bfc:	4735a700 	.word	0x4735a700
				pitchF = DYW_SAMPLING_RATE/(_2power(curLevel-1)*curModeDistance);
  400c00:	3b01      	subs	r3, #1
	for (j = 0; j < i; j++) res <<= 1;
  400c02:	2b00      	cmp	r3, #0
  400c04:	dd79      	ble.n	400cfa <computeWaveletPitch+0x716>
  400c06:	2b01      	cmp	r3, #1
  400c08:	f000 808a 	beq.w	400d20 <computeWaveletPitch+0x73c>
  400c0c:	2b02      	cmp	r3, #2
  400c0e:	f000 8085 	beq.w	400d1c <computeWaveletPitch+0x738>
  400c12:	2b04      	cmp	r3, #4
  400c14:	bf0c      	ite	eq
  400c16:	2310      	moveq	r3, #16
  400c18:	2308      	movne	r3, #8
  400c1a:	ee07 3a90 	vmov	s15, r3
  400c1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				pitchF = DYW_SAMPLING_RATE/(_2power(curLevel-1)*curModeDistance);
  400c22:	ee69 9aa7 	vmul.f32	s19, s19, s15
  400c26:	ed5f 6a0b 	vldr	s13, [pc, #-44]	; 400bfc <computeWaveletPitch+0x618>
	if (pitch < 1.0f) pitch = -1.0f;
  400c2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
				pitchF = DYW_SAMPLING_RATE/(_2power(curLevel-1)*curModeDistance);
  400c2e:	eec6 7aa9 	vdiv.f32	s15, s13, s19
	if (pitch < 1.0f) pitch = -1.0f;
  400c32:	eef4 7ac7 	vcmpe.f32	s15, s14
  400c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400c3a:	d48c      	bmi.n	400b56 <computeWaveletPitch+0x572>
	if (pitch > -1.0) {
  400c3c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  400c40:	eef4 7ac7 	vcmpe.f32	s15, s14
  400c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400c48:	dd85      	ble.n	400b56 <computeWaveletPitch+0x572>
		if (pitchtracker._prevPitch < 0.0f) 
  400c4a:	4a36      	ldr	r2, [pc, #216]	; (400d24 <computeWaveletPitch+0x740>)
  400c4c:	edd2 6a00 	vldr	s13, [r2]
  400c50:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400c58:	d426      	bmi.n	400ca8 <computeWaveletPitch+0x6c4>
		else if (abs(pitchtracker._prevPitch - pitch)/pitch < acceptedError) 
  400c5a:	ee36 7ae7 	vsub.f32	s14, s13, s15
  400c5e:	ed9f 6a32 	vldr	s12, [pc, #200]	; 400d28 <computeWaveletPitch+0x744>
  400c62:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  400c66:	ee17 3a10 	vmov	r3, s14
  400c6a:	2b00      	cmp	r3, #0
  400c6c:	bfb8      	it	lt
  400c6e:	425b      	neglt	r3, r3
  400c70:	ee07 3a10 	vmov	s14, r3
			pitchtracker._pitchConfidence = Min(maxConfidence, pitchtracker._pitchConfidence + 1); // maximum 3
  400c74:	6853      	ldr	r3, [r2, #4]
		else if (abs(pitchtracker._prevPitch - pitch)/pitch < acceptedError) 
  400c76:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  400c7a:	eec7 5a27 	vdiv.f32	s11, s14, s15
  400c7e:	eef4 5ac6 	vcmpe.f32	s11, s12
  400c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400c86:	d507      	bpl.n	400c98 <computeWaveletPitch+0x6b4>
			pitchtracker._pitchConfidence = Min(maxConfidence, pitchtracker._pitchConfidence + 1); // maximum 3
  400c88:	2b04      	cmp	r3, #4
			pitchtracker._prevPitch = pitch;
  400c8a:	edc2 7a00 	vstr	s15, [r2]
			pitchtracker._pitchConfidence = Min(maxConfidence, pitchtracker._pitchConfidence + 1); // maximum 3
  400c8e:	bfd4      	ite	le
  400c90:	3301      	addle	r3, #1
  400c92:	2305      	movgt	r3, #5
				pitchtracker._pitchConfidence = max(0, pitchtracker._pitchConfidence - 1);
  400c94:	6053      	str	r3, [r2, #4]
  400c96:	e76d      	b.n	400b74 <computeWaveletPitch+0x590>
		else if ((pitchtracker._pitchConfidence >= maxConfidence-2) && Abs(pitchtracker._prevPitch - 2.0f*pitch)/(2.0f*pitch) < acceptedError) 
  400c98:	2b02      	cmp	r3, #2
  400c9a:	dc0a      	bgt.n	400cb2 <computeWaveletPitch+0x6ce>
			if (pitchtracker._pitchConfidence >= 1) 
  400c9c:	2b00      	cmp	r3, #0
  400c9e:	dd03      	ble.n	400ca8 <computeWaveletPitch+0x6c4>
				pitchtracker._pitchConfidence = max(0, pitchtracker._pitchConfidence - 1);
  400ca0:	3b01      	subs	r3, #1
				estimatedPitch = pitchtracker._prevPitch;
  400ca2:	eef0 7a66 	vmov.f32	s15, s13
  400ca6:	e7f5      	b.n	400c94 <computeWaveletPitch+0x6b0>
				pitchtracker._pitchConfidence = 1;
  400ca8:	2301      	movs	r3, #1
				pitchtracker._prevPitch = pitch;
  400caa:	edc2 7a00 	vstr	s15, [r2]
				pitchtracker._pitchConfidence = 1;
  400cae:	6053      	str	r3, [r2, #4]
  400cb0:	e762      	b.n	400b78 <computeWaveletPitch+0x594>
		else if ((pitchtracker._pitchConfidence >= maxConfidence-2) && Abs(pitchtracker._prevPitch - 2.0f*pitch)/(2.0f*pitch) < acceptedError) 
  400cb2:	ee37 7aa7 	vadd.f32	s14, s15, s15
  400cb6:	ee76 5ac7 	vsub.f32	s11, s13, s14
  400cba:	eef0 5ae5 	vabs.f32	s11, s11
  400cbe:	ee85 5a87 	vdiv.f32	s10, s11, s14
  400cc2:	eeb4 5ac6 	vcmpe.f32	s10, s12
  400cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400cca:	d504      	bpl.n	400cd6 <computeWaveletPitch+0x6f2>
			pitchtracker._prevPitch = estimatedPitch;
  400ccc:	ed82 7a00 	vstr	s14, [r2]
			estimatedPitch = 2.0f*pitch;
  400cd0:	eef0 7a47 	vmov.f32	s15, s14
  400cd4:	e750      	b.n	400b78 <computeWaveletPitch+0x594>
		else if ((pitchtracker._pitchConfidence >= maxConfidence-2) && Abs(pitchtracker._prevPitch - 0.5f*pitch)/(0.5f*pitch) < acceptedError) 
  400cd6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
  400cda:	ee67 7a87 	vmul.f32	s15, s15, s14
  400cde:	ee36 7ae7 	vsub.f32	s14, s13, s15
  400ce2:	eeb0 7ac7 	vabs.f32	s14, s14
  400ce6:	eec7 5a27 	vdiv.f32	s11, s14, s15
  400cea:	eef4 5ac6 	vcmpe.f32	s11, s12
  400cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400cf2:	d5d5      	bpl.n	400ca0 <computeWaveletPitch+0x6bc>
			pitchtracker._prevPitch = estimatedPitch;
  400cf4:	edc2 7a00 	vstr	s15, [r2]
  400cf8:	e73e      	b.n	400b78 <computeWaveletPitch+0x594>
	for (j = 0; j < i; j++) res <<= 1;
  400cfa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  400cfe:	e790      	b.n	400c22 <computeWaveletPitch+0x63e>
					d = Abs(maxs[i] - maxs[i+j]);
  400d00:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
  400d04:	ebae 0303 	sub.w	r3, lr, r3
  400d08:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
  400d0c:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
					distances[d]++; 
  400d10:	f85b 3020 	ldr.w	r3, [fp, r0, lsl #2]
  400d14:	3301      	adds	r3, #1
  400d16:	f84b 3020 	str.w	r3, [fp, r0, lsl #2]
  400d1a:	e65e      	b.n	4009da <computeWaveletPitch+0x3f6>
	for (j = 0; j < i; j++) res <<= 1;
  400d1c:	2304      	movs	r3, #4
  400d1e:	e77c      	b.n	400c1a <computeWaveletPitch+0x636>
  400d20:	2302      	movs	r3, #2
  400d22:	e77a      	b.n	400c1a <computeWaveletPitch+0x636>
  400d24:	20400020 	.word	0x20400020
  400d28:	3e4ccccd 	.word	0x3e4ccccd

00400d2c <gfx_set_clipping>:
static gfx_ext_draw_handler_t gfx_ext_draw_func;

/* This function is documented in gfx.h */
void gfx_set_clipping(gfx_coord_t min_x, gfx_coord_t min_y,
		gfx_coord_t max_x, gfx_coord_t max_y)
{
  400d2c:	b4f0      	push	{r4, r5, r6, r7}

	if (min_y < 0) {
		min_y = 0;
	}

	if (max_x >= gfx_width) {
  400d2e:	4c0e      	ldr	r4, [pc, #56]	; (400d68 <gfx_set_clipping+0x3c>)
  400d30:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  400d34:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  400d38:	f9b4 4000 	ldrsh.w	r4, [r4]
  400d3c:	4294      	cmp	r4, r2
  400d3e:	dc01      	bgt.n	400d44 <gfx_set_clipping+0x18>
		max_x = gfx_width - 1;
  400d40:	1e62      	subs	r2, r4, #1
  400d42:	b212      	sxth	r2, r2
	}

	if (max_y >= gfx_height) {
  400d44:	4c09      	ldr	r4, [pc, #36]	; (400d6c <gfx_set_clipping+0x40>)
  400d46:	f9b4 4000 	ldrsh.w	r4, [r4]
  400d4a:	429c      	cmp	r4, r3
  400d4c:	dc01      	bgt.n	400d52 <gfx_set_clipping+0x26>
		max_y = gfx_height - 1;
  400d4e:	3c01      	subs	r4, #1
  400d50:	b223      	sxth	r3, r4
	}

	gfx_min_x = min_x;
  400d52:	4f07      	ldr	r7, [pc, #28]	; (400d70 <gfx_set_clipping+0x44>)
	gfx_min_y = min_y;
  400d54:	4e07      	ldr	r6, [pc, #28]	; (400d74 <gfx_set_clipping+0x48>)
	gfx_max_x = max_x;
  400d56:	4d08      	ldr	r5, [pc, #32]	; (400d78 <gfx_set_clipping+0x4c>)
	gfx_max_y = max_y;
  400d58:	4c08      	ldr	r4, [pc, #32]	; (400d7c <gfx_set_clipping+0x50>)
	gfx_min_x = min_x;
  400d5a:	8038      	strh	r0, [r7, #0]
	gfx_min_y = min_y;
  400d5c:	8031      	strh	r1, [r6, #0]
	gfx_max_x = max_x;
  400d5e:	802a      	strh	r2, [r5, #0]
	gfx_max_y = max_y;
  400d60:	8023      	strh	r3, [r4, #0]
#endif
}
  400d62:	bcf0      	pop	{r4, r5, r6, r7}
  400d64:	4770      	bx	lr
  400d66:	bf00      	nop
  400d68:	20453c00 	.word	0x20453c00
  400d6c:	20453c0a 	.word	0x20453c0a
  400d70:	20453c02 	.word	0x20453c02
  400d74:	20453c06 	.word	0x20453c06
  400d78:	20453c04 	.word	0x20453c04
  400d7c:	20453c08 	.word	0x20453c08

00400d80 <gfx_generic_draw_filled_rect>:

/* This function is documented in gfx.h */
void gfx_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		gfx_color_t color)
{
  400d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400d84:	f8bd 7020 	ldrh.w	r7, [sp, #32]
	gfx_coord_t x2;
	gfx_coord_t y2;

	if ((width == 0) || (height == 0)) {
  400d88:	2a00      	cmp	r2, #0
  400d8a:	d047      	beq.n	400e1c <gfx_generic_draw_filled_rect+0x9c>
  400d8c:	461d      	mov	r5, r3
  400d8e:	2b00      	cmp	r3, #0
  400d90:	d044      	beq.n	400e1c <gfx_generic_draw_filled_rect+0x9c>
		return;
	}

	/* Invert if width or height is negative. */
	if (width < 0) {
  400d92:	2a00      	cmp	r2, #0
  400d94:	4614      	mov	r4, r2
  400d96:	db4f      	blt.n	400e38 <gfx_generic_draw_filled_rect+0xb8>
		width = -width;
		x -= width - 1;
	}

	if (height < 0) {
  400d98:	2d00      	cmp	r5, #0
  400d9a:	db41      	blt.n	400e20 <gfx_generic_draw_filled_rect+0xa0>
		y -= height - 1;
	}

#ifdef CONF_GFX_USE_CLIPPING
	/* Nothing to do if entire rectangle is outside clipping region. */
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
  400d9c:	4b32      	ldr	r3, [pc, #200]	; (400e68 <gfx_generic_draw_filled_rect+0xe8>)
  400d9e:	f9b3 6000 	ldrsh.w	r6, [r3]
  400da2:	4286      	cmp	r6, r0
  400da4:	db3a      	blt.n	400e1c <gfx_generic_draw_filled_rect+0x9c>
  400da6:	4b31      	ldr	r3, [pc, #196]	; (400e6c <gfx_generic_draw_filled_rect+0xec>)
  400da8:	f9b3 e000 	ldrsh.w	lr, [r3]
  400dac:	458e      	cmp	lr, r1
  400dae:	db35      	blt.n	400e1c <gfx_generic_draw_filled_rect+0x9c>
			((x + width) <= gfx_min_x) ||
  400db0:	4b2f      	ldr	r3, [pc, #188]	; (400e70 <gfx_generic_draw_filled_rect+0xf0>)
  400db2:	1902      	adds	r2, r0, r4
  400db4:	f9b3 3000 	ldrsh.w	r3, [r3]
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
  400db8:	429a      	cmp	r2, r3
  400dba:	dd2f      	ble.n	400e1c <gfx_generic_draw_filled_rect+0x9c>
			((y + height) <= gfx_min_y)) {
  400dbc:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 400e7c <gfx_generic_draw_filled_rect+0xfc>
  400dc0:	eb01 0a05 	add.w	sl, r1, r5
  400dc4:	f9bc 9000 	ldrsh.w	r9, [ip]
			((x + width) <= gfx_min_x) ||
  400dc8:	45ca      	cmp	sl, r9
  400dca:	dd27      	ble.n	400e1c <gfx_generic_draw_filled_rect+0x9c>
		return;
	}

	/* Clip if outside left X limit. */
	if (x < gfx_min_x) {
  400dcc:	4298      	cmp	r0, r3
  400dce:	db3d      	blt.n	400e4c <gfx_generic_draw_filled_rect+0xcc>
  400dd0:	fa1f fc80 	uxth.w	ip, r0
		width -= gfx_min_x - x;
		x = gfx_min_x;
	}

	/* Clip if outside top Y limit. */
	if (y < gfx_min_y) {
  400dd4:	4549      	cmp	r1, r9
  400dd6:	db40      	blt.n	400e5a <gfx_generic_draw_filled_rect+0xda>
  400dd8:	fa1f f881 	uxth.w	r8, r1
		y = gfx_min_y;
	}
#endif

	/*  Compute bottom right point. */
	x2 = x + width - 1;
  400ddc:	f10c 32ff 	add.w	r2, ip, #4294967295
	y2 = y + height - 1;
  400de0:	f108 33ff 	add.w	r3, r8, #4294967295
	x2 = x + width - 1;
  400de4:	4422      	add	r2, r4
	y2 = y + height - 1;
  400de6:	442b      	add	r3, r5
	x2 = x + width - 1;
  400de8:	b212      	sxth	r2, r2
	y2 = y + height - 1;
  400dea:	b21b      	sxth	r3, r3

#ifdef CONF_GFX_USE_CLIPPING
	/* Clip if outside right X limit. */
	if (x2 > gfx_max_x) {
  400dec:	4296      	cmp	r6, r2
  400dee:	da04      	bge.n	400dfa <gfx_generic_draw_filled_rect+0x7a>
		x2 = gfx_max_x;
		width = x2 - x + 1;
  400df0:	1c74      	adds	r4, r6, #1
  400df2:	4632      	mov	r2, r6
  400df4:	eba4 040c 	sub.w	r4, r4, ip
  400df8:	b224      	sxth	r4, r4
	}

	/* Clip if outside bottom Y limit. */
	if (y2 > gfx_max_y) {
  400dfa:	459e      	cmp	lr, r3
  400dfc:	da05      	bge.n	400e0a <gfx_generic_draw_filled_rect+0x8a>
		y2 = gfx_max_y;
		height = y2 - y + 1;
  400dfe:	f10e 0501 	add.w	r5, lr, #1
  400e02:	4673      	mov	r3, lr
  400e04:	eba5 0508 	sub.w	r5, r5, r8
  400e08:	b22d      	sxth	r5, r5
	}
#endif

	/* Set up draw area and duplicate pixel color until area is full. */
	gfx_set_limits(x, y, x2, y2);
  400e0a:	4e1a      	ldr	r6, [pc, #104]	; (400e74 <gfx_generic_draw_filled_rect+0xf4>)
  400e0c:	47b0      	blx	r6
	gfx_duplicate_pixel(color, (uint32_t)width * height);
  400e0e:	fb04 f105 	mul.w	r1, r4, r5
  400e12:	4638      	mov	r0, r7
  400e14:	4b18      	ldr	r3, [pc, #96]	; (400e78 <gfx_generic_draw_filled_rect+0xf8>)
}
  400e16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gfx_duplicate_pixel(color, (uint32_t)width * height);
  400e1a:	4718      	bx	r3
  400e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		height = -height;
  400e20:	b2ab      	uxth	r3, r5
		y -= height - 1;
  400e22:	3101      	adds	r1, #1
		height = -height;
  400e24:	425d      	negs	r5, r3
		y -= height - 1;
  400e26:	4419      	add	r1, r3
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
  400e28:	4b0f      	ldr	r3, [pc, #60]	; (400e68 <gfx_generic_draw_filled_rect+0xe8>)
		height = -height;
  400e2a:	b22d      	sxth	r5, r5
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
  400e2c:	f9b3 6000 	ldrsh.w	r6, [r3]
		y -= height - 1;
  400e30:	b209      	sxth	r1, r1
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
  400e32:	4286      	cmp	r6, r0
  400e34:	dab7      	bge.n	400da6 <gfx_generic_draw_filled_rect+0x26>
  400e36:	e7f1      	b.n	400e1c <gfx_generic_draw_filled_rect+0x9c>
		width = -width;
  400e38:	b293      	uxth	r3, r2
		x -= width - 1;
  400e3a:	3001      	adds	r0, #1
	if (height < 0) {
  400e3c:	2d00      	cmp	r5, #0
		width = -width;
  400e3e:	f1c3 0400 	rsb	r4, r3, #0
		x -= width - 1;
  400e42:	4418      	add	r0, r3
		width = -width;
  400e44:	b224      	sxth	r4, r4
		x -= width - 1;
  400e46:	b200      	sxth	r0, r0
	if (height < 0) {
  400e48:	daa8      	bge.n	400d9c <gfx_generic_draw_filled_rect+0x1c>
  400e4a:	e7e9      	b.n	400e20 <gfx_generic_draw_filled_rect+0xa0>
		width -= gfx_min_x - x;
  400e4c:	fa1f fc83 	uxth.w	ip, r3
  400e50:	4618      	mov	r0, r3
  400e52:	eba2 040c 	sub.w	r4, r2, ip
  400e56:	b224      	sxth	r4, r4
  400e58:	e7bc      	b.n	400dd4 <gfx_generic_draw_filled_rect+0x54>
		height -= gfx_min_y - y;
  400e5a:	fa1f f889 	uxth.w	r8, r9
  400e5e:	4649      	mov	r1, r9
  400e60:	ebaa 0508 	sub.w	r5, sl, r8
  400e64:	b22d      	sxth	r5, r5
  400e66:	e7b9      	b.n	400ddc <gfx_generic_draw_filled_rect+0x5c>
  400e68:	20453c04 	.word	0x20453c04
  400e6c:	20453c08 	.word	0x20453c08
  400e70:	20453c02 	.word	0x20453c02
  400e74:	00401da1 	.word	0x00401da1
  400e78:	00401e21 	.word	0x00401e21
  400e7c:	20453c06 	.word	0x20453c06

00400e80 <gfx_ili9488_init>:
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
	LCD_MULTI_WD(us_data, size);
}

void gfx_ili9488_init(void)
{
  400e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400e84:	b086      	sub	sp, #24

	/* Initialize display parameter */
	g_ili9488_display_opt.ul_width= ILI9488_LCD_WIDTH;
	g_ili9488_display_opt.ul_height = ILI9488_LCD_HEIGHT;
	g_ili9488_display_opt.foreground_color= COLOR_WHITE;
	g_ili9488_display_opt.background_color = COLOR_BLACK;
  400e86:	2400      	movs	r4, #0
	gfx_width = ILI9488_LCD_WIDTH;
  400e88:	4d28      	ldr	r5, [pc, #160]	; (400f2c <gfx_ili9488_init+0xac>)
	g_ili9488_display_opt.foreground_color= COLOR_WHITE;
  400e8a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
	gfx_height = ILI9488_LCD_HEIGHT;
  400e8e:	4e28      	ldr	r6, [pc, #160]	; (400f30 <gfx_ili9488_init+0xb0>)
	gfx_width = ILI9488_LCD_WIDTH;
  400e90:	f44f 78a0 	mov.w	r8, #320	; 0x140
	gfx_height = ILI9488_LCD_HEIGHT;
  400e94:	f44f 77f0 	mov.w	r7, #480	; 0x1e0
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  400e98:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 400f50 <gfx_ili9488_init+0xd0>

	ili9488_init(&g_ili9488_display_opt);
  400e9c:	a802      	add	r0, sp, #8
  400e9e:	4b25      	ldr	r3, [pc, #148]	; (400f34 <gfx_ili9488_init+0xb4>)
	g_ili9488_display_opt.foreground_color= COLOR_WHITE;
  400ea0:	9204      	str	r2, [sp, #16]

/* Define EBI access for ILI9488 16-bit System Interface.*/
#ifdef ILI9488_EBIMODE
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  400ea2:	f04f 49c6 	mov.w	r9, #1660944384	; 0x63000000
	gfx_width = ILI9488_LCD_WIDTH;
  400ea6:	f8a5 8000 	strh.w	r8, [r5]
	g_ili9488_display_opt.background_color = COLOR_BLACK;
  400eaa:	9405      	str	r4, [sp, #20]
	g_ili9488_display_opt.ul_width= ILI9488_LCD_WIDTH;
  400eac:	f8cd 8008 	str.w	r8, [sp, #8]
	gfx_height = ILI9488_LCD_HEIGHT;
  400eb0:	8037      	strh	r7, [r6, #0]
	g_ili9488_display_opt.ul_height = ILI9488_LCD_HEIGHT;
  400eb2:	9703      	str	r7, [sp, #12]
	ili9488_init(&g_ili9488_display_opt);
  400eb4:	4798      	blx	r3
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  400eb6:	4650      	mov	r0, sl
  400eb8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400ebc:	4b1e      	ldr	r3, [pc, #120]	; (400f38 <gfx_ili9488_init+0xb8>)
  400ebe:	4798      	blx	r3
  400ec0:	2353      	movs	r3, #83	; 0x53
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  400ec2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400ec6:	4650      	mov	r0, sl
  400ec8:	f8a9 3000 	strh.w	r3, [r9]
  400ecc:	4b1b      	ldr	r3, [pc, #108]	; (400f3c <gfx_ili9488_init+0xbc>)
  400ece:	4798      	blx	r3
		*(volatile uint16_t *)(BOARD_ILI9488_ADDR) = lcd_data;
	}
	static inline void LCD_MULTI_WD(const uint16_t *lcd_data, uint32_t size)
	{
		while(size--) {
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  400ed0:	2224      	movs	r2, #36	; 0x24
	
	/* Attempt to make display brighter :( */ 
	ili9488_color_t param = 0x24;
	ili9488_write_register(ILI9488_CMD_WRITE_CTRL_DISPLAY, &param, 1); 
	ili9488_write_brightness(0xFFFF);
  400ed2:	f64f 70ff 	movw	r0, #65535	; 0xffff
  400ed6:	4b1a      	ldr	r3, [pc, #104]	; (400f40 <gfx_ili9488_init+0xc0>)
  400ed8:	f8a9 2000 	strh.w	r2, [r9]
  400edc:	4798      	blx	r3

	ili9488_display_on();
  400ede:	4b19      	ldr	r3, [pc, #100]	; (400f44 <gfx_ili9488_init+0xc4>)
  400ee0:	4798      	blx	r3

	/* Set clipping area to whole screen initially */
	gfx_set_clipping(0, 0, gfx_width, gfx_height);
  400ee2:	f8df 9070 	ldr.w	r9, [pc, #112]	; 400f54 <gfx_ili9488_init+0xd4>
  400ee6:	4621      	mov	r1, r4
  400ee8:	f9b5 2000 	ldrsh.w	r2, [r5]
  400eec:	f9b6 3000 	ldrsh.w	r3, [r6]
  400ef0:	4620      	mov	r0, r4
  400ef2:	47c8      	blx	r9
	ili9488_set_orientation(flags);
  400ef4:	2002      	movs	r0, #2
  400ef6:	4b14      	ldr	r3, [pc, #80]	; (400f48 <gfx_ili9488_init+0xc8>)
  400ef8:	4798      	blx	r3
	gfx_set_clipping(0, 0, gfx_width - 1, gfx_height - 1);
  400efa:	4621      	mov	r1, r4
  400efc:	4620      	mov	r0, r4
  400efe:	f240 133f 	movw	r3, #319	; 0x13f
  400f02:	f240 12df 	movw	r2, #479	; 0x1df
		gfx_width = ILI9488_SWITCH_XY_HEIGHT;
  400f06:	802f      	strh	r7, [r5, #0]
		gfx_height = ILI9488_SWITCH_XY_WIDTH;
  400f08:	f8a6 8000 	strh.w	r8, [r6]
	gfx_set_clipping(0, 0, gfx_width - 1, gfx_height - 1);
  400f0c:	47c8      	blx	r9

	gfx_set_orientation(GFX_FLIP_Y);
	gfx_draw_filled_rect(0, 0, gfx_width, gfx_height, g_ili9488_display_opt.background_color);			
  400f0e:	f9b5 2000 	ldrsh.w	r2, [r5]
  400f12:	4621      	mov	r1, r4
  400f14:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  400f18:	4620      	mov	r0, r4
  400f1a:	f9b6 3000 	ldrsh.w	r3, [r6]
  400f1e:	4c0b      	ldr	r4, [pc, #44]	; (400f4c <gfx_ili9488_init+0xcc>)
  400f20:	9500      	str	r5, [sp, #0]
  400f22:	47a0      	blx	r4
}
  400f24:	b006      	add	sp, #24
  400f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400f2a:	bf00      	nop
  400f2c:	20453c00 	.word	0x20453c00
  400f30:	20453c0a 	.word	0x20453c0a
  400f34:	00401c29 	.word	0x00401c29
  400f38:	004026c1 	.word	0x004026c1
  400f3c:	004026bd 	.word	0x004026bd
  400f40:	00401d6d 	.word	0x00401d6d
  400f44:	00401b71 	.word	0x00401b71
  400f48:	00401dc9 	.word	0x00401dc9
  400f4c:	00400d81 	.word	0x00400d81
  400f50:	400e1200 	.word	0x400e1200
  400f54:	00400d2d 	.word	0x00400d2d

00400f58 <lcd_init>:
#include "LCDLib.h"
#include "asf.h"

/*********************************** Public Functions Start ***********************************/
void lcd_init(void)
{
  400f58:	b510      	push	{r4, lr}
	gfx_init();
  400f5a:	4b03      	ldr	r3, [pc, #12]	; (400f68 <lcd_init+0x10>)
  400f5c:	4798      	blx	r3
	mxt_init();
  400f5e:	4b03      	ldr	r3, [pc, #12]	; (400f6c <lcd_init+0x14>)
}
  400f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mxt_init();
  400f64:	4718      	bx	r3
  400f66:	bf00      	nop
  400f68:	00400e81 	.word	0x00400e81
  400f6c:	00400f71 	.word	0x00400f71

00400f70 <mxt_init>:
	else 
		return false; 
}

void mxt_init(void)
{
  400f70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	enum status_code status;

	/* T8 configuration object data */
	uint8_t t8_object[] = {
  400f74:	4c57      	ldr	r4, [pc, #348]	; (4010d4 <mxt_init+0x164>)
{
  400f76:	b09f      	sub	sp, #124	; 0x7c
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
			MXT_GEN_COMMANDPROCESSOR_T6, 0)
			+ MXT_GEN_COMMANDPROCESSOR_RESET, 0x01);

	/* Wait for the reset of the device to complete */
	delay_ms(MXT_RESET_TIME);
  400f78:	f8df 9190 	ldr.w	r9, [pc, #400]	; 40110c <mxt_init+0x19c>
	uint8_t t9_object[] = {
  400f7c:	f104 050c 	add.w	r5, r4, #12
	uint8_t t8_object[] = {
  400f80:	ab06      	add	r3, sp, #24
	uint8_t t9_object[] = {
  400f82:	af15      	add	r7, sp, #84	; 0x54
	uint8_t t46_object[] = {
  400f84:	f104 0c30 	add.w	ip, r4, #48	; 0x30
  400f88:	46ee      	mov	lr, sp
	uint8_t t56_object[] = {
  400f8a:	ae0c      	add	r6, sp, #48	; 0x30
			MXT_GEN_POWERCONFIG_T7, 0) + 2, 0x4b);
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
			MXT_GEN_POWERCONFIG_T7, 0) + 3, 0x84);

	// Write predefined configuration data to configuration objects 
	mxt_write_config_object(&device, mxt_get_object_address(&device,
  400f8c:	f8df 8180 	ldr.w	r8, [pc, #384]	; 401110 <mxt_init+0x1a0>
	uint8_t t8_object[] = {
  400f90:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  400f94:	c303      	stmia	r3!, {r0, r1}
  400f96:	801a      	strh	r2, [r3, #0]
	uint8_t t56_object[] = {
  400f98:	343c      	adds	r4, #60	; 0x3c
	uint8_t t9_object[] = {
  400f9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400f9c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
  400f9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400fa0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
	uint8_t t46_object[] = {
  400fa2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
	uint8_t t9_object[] = {
  400fa6:	682b      	ldr	r3, [r5, #0]
	twihs_master_options_t twi_opt = {
  400fa8:	2500      	movs	r5, #0
	uint8_t t46_object[] = {
  400faa:	e8ae 0003 	stmia.w	lr!, {r0, r1}
	uint8_t t9_object[] = {
  400fae:	603b      	str	r3, [r7, #0]
	twihs_master_options_t twi_opt = {
  400fb0:	274a      	movs	r7, #74	; 0x4a
	uint8_t t46_object[] = {
  400fb2:	f88e 2000 	strb.w	r2, [lr]
	twihs_master_options_t twi_opt = {
  400fb6:	f8df e15c 	ldr.w	lr, [pc, #348]	; 401114 <mxt_init+0x1a4>
	uint8_t t56_object[] = {
  400fba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  400fbc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  400fbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  400fc0:	f8d4 c000 	ldr.w	ip, [r4]
	pio_configure(PIOD, PIO_INPUT, PIO_PD28, PIO_PULLUP);
  400fc4:	4c44      	ldr	r4, [pc, #272]	; (4010d8 <mxt_init+0x168>)
	twihs_master_options_t twi_opt = {
  400fc6:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
  400fca:	950b      	str	r5, [sp, #44]	; 0x2c
  400fcc:	9509      	str	r5, [sp, #36]	; 0x24
  400fce:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
	uint8_t t56_object[] = {
  400fd2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	pio_configure(PIOD, PIO_INPUT, PIO_PD28, PIO_PULLUP);
  400fd4:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400fd8:	2301      	movs	r3, #1
  400fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400fde:	483f      	ldr	r0, [pc, #252]	; (4010dc <mxt_init+0x16c>)
	uint8_t t56_object[] = {
  400fe0:	f886 c000 	strb.w	ip, [r6]
	pio_configure(PIOD, PIO_INPUT, PIO_PD28, PIO_PULLUP);
  400fe4:	47a0      	blx	r4
typedef twihs_packet_t twihs_package_t;

static inline uint32_t twihs_master_setup(twihs_master_t p_twihs,
		twihs_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
  400fe6:	4a3e      	ldr	r2, [pc, #248]	; (4010e0 <mxt_init+0x170>)
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400fe8:	2013      	movs	r0, #19
  400fea:	4b3e      	ldr	r3, [pc, #248]	; (4010e4 <mxt_init+0x174>)

	// Issue recalibration command to maXTouch device by writing a non-zero
	 // value to the calibrate register 
	mxt_write_config_reg(&device, mxt_get_object_address(&device, MXT_GEN_COMMANDPROCESSOR_T6, 0) + MXT_GEN_COMMANDPROCESSOR_CALIBRATE, 0x01); 
	
	delay_ms(100); 
  400fec:	f44f 74af 	mov.w	r4, #350	; 0x15e
  400ff0:	9209      	str	r2, [sp, #36]	; 0x24
	p_opt->smbus      = 0;
  400ff2:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
  400ff6:	4798      	blx	r3
#endif		
	} else {
		// Do Nothing
	}
#endif
	return (twihs_master_init(p_twihs, p_opt));
  400ff8:	a909      	add	r1, sp, #36	; 0x24
  400ffa:	4b3b      	ldr	r3, [pc, #236]	; (4010e8 <mxt_init+0x178>)
  400ffc:	483b      	ldr	r0, [pc, #236]	; (4010ec <mxt_init+0x17c>)
  400ffe:	4798      	blx	r3
	status = mxt_init_device(&device, MAXTOUCH_TWI_INTERFACE,
  401000:	4e3b      	ldr	r6, [pc, #236]	; (4010f0 <mxt_init+0x180>)
  401002:	237c      	movs	r3, #124	; 0x7c
  401004:	463a      	mov	r2, r7
  401006:	4939      	ldr	r1, [pc, #228]	; (4010ec <mxt_init+0x17c>)
  401008:	483a      	ldr	r0, [pc, #232]	; (4010f4 <mxt_init+0x184>)
  40100a:	47b0      	blx	r6
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  40100c:	4e3a      	ldr	r6, [pc, #232]	; (4010f8 <mxt_init+0x188>)
  40100e:	462a      	mov	r2, r5
  401010:	2106      	movs	r1, #6
  401012:	4838      	ldr	r0, [pc, #224]	; (4010f4 <mxt_init+0x184>)
  401014:	4f39      	ldr	r7, [pc, #228]	; (4010fc <mxt_init+0x18c>)
  401016:	47b0      	blx	r6
  401018:	2201      	movs	r2, #1
  40101a:	4601      	mov	r1, r0
  40101c:	4835      	ldr	r0, [pc, #212]	; (4010f4 <mxt_init+0x184>)
  40101e:	47b8      	blx	r7
	delay_ms(MXT_RESET_TIME);
  401020:	4837      	ldr	r0, [pc, #220]	; (401100 <mxt_init+0x190>)
  401022:	47c8      	blx	r9
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  401024:	462a      	mov	r2, r5
  401026:	2107      	movs	r1, #7
  401028:	4832      	ldr	r0, [pc, #200]	; (4010f4 <mxt_init+0x184>)
  40102a:	47b0      	blx	r6
  40102c:	2220      	movs	r2, #32
  40102e:	4601      	mov	r1, r0
  401030:	4830      	ldr	r0, [pc, #192]	; (4010f4 <mxt_init+0x184>)
  401032:	47b8      	blx	r7
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  401034:	462a      	mov	r2, r5
  401036:	2107      	movs	r1, #7
  401038:	482e      	ldr	r0, [pc, #184]	; (4010f4 <mxt_init+0x184>)
  40103a:	47b0      	blx	r6
  40103c:	1c41      	adds	r1, r0, #1
  40103e:	2210      	movs	r2, #16
  401040:	482c      	ldr	r0, [pc, #176]	; (4010f4 <mxt_init+0x184>)
  401042:	b289      	uxth	r1, r1
  401044:	47b8      	blx	r7
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  401046:	462a      	mov	r2, r5
  401048:	2107      	movs	r1, #7
  40104a:	482a      	ldr	r0, [pc, #168]	; (4010f4 <mxt_init+0x184>)
  40104c:	47b0      	blx	r6
  40104e:	1c81      	adds	r1, r0, #2
  401050:	224b      	movs	r2, #75	; 0x4b
  401052:	4828      	ldr	r0, [pc, #160]	; (4010f4 <mxt_init+0x184>)
  401054:	b289      	uxth	r1, r1
  401056:	47b8      	blx	r7
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  401058:	462a      	mov	r2, r5
  40105a:	2107      	movs	r1, #7
  40105c:	4825      	ldr	r0, [pc, #148]	; (4010f4 <mxt_init+0x184>)
  40105e:	47b0      	blx	r6
  401060:	1cc1      	adds	r1, r0, #3
  401062:	2284      	movs	r2, #132	; 0x84
  401064:	4823      	ldr	r0, [pc, #140]	; (4010f4 <mxt_init+0x184>)
  401066:	b289      	uxth	r1, r1
  401068:	47b8      	blx	r7
	mxt_write_config_object(&device, mxt_get_object_address(&device,
  40106a:	462a      	mov	r2, r5
  40106c:	2108      	movs	r1, #8
  40106e:	4821      	ldr	r0, [pc, #132]	; (4010f4 <mxt_init+0x184>)
  401070:	47b0      	blx	r6
  401072:	aa06      	add	r2, sp, #24
  401074:	4601      	mov	r1, r0
  401076:	481f      	ldr	r0, [pc, #124]	; (4010f4 <mxt_init+0x184>)
  401078:	47c0      	blx	r8
	mxt_write_config_object(&device, mxt_get_object_address(&device,
  40107a:	462a      	mov	r2, r5
  40107c:	2109      	movs	r1, #9
  40107e:	481d      	ldr	r0, [pc, #116]	; (4010f4 <mxt_init+0x184>)
  401080:	47b0      	blx	r6
  401082:	aa15      	add	r2, sp, #84	; 0x54
  401084:	4601      	mov	r1, r0
  401086:	481b      	ldr	r0, [pc, #108]	; (4010f4 <mxt_init+0x184>)
  401088:	47c0      	blx	r8
	mxt_write_config_object(&device, mxt_get_object_address(&device,
  40108a:	462a      	mov	r2, r5
  40108c:	212e      	movs	r1, #46	; 0x2e
  40108e:	4819      	ldr	r0, [pc, #100]	; (4010f4 <mxt_init+0x184>)
  401090:	47b0      	blx	r6
  401092:	466a      	mov	r2, sp
  401094:	4601      	mov	r1, r0
  401096:	4817      	ldr	r0, [pc, #92]	; (4010f4 <mxt_init+0x184>)
  401098:	47c0      	blx	r8
	mxt_write_config_object(&device, mxt_get_object_address(&device,
  40109a:	462a      	mov	r2, r5
  40109c:	2138      	movs	r1, #56	; 0x38
  40109e:	4815      	ldr	r0, [pc, #84]	; (4010f4 <mxt_init+0x184>)
  4010a0:	47b0      	blx	r6
  4010a2:	aa0c      	add	r2, sp, #48	; 0x30
  4010a4:	4601      	mov	r1, r0
  4010a6:	4813      	ldr	r0, [pc, #76]	; (4010f4 <mxt_init+0x184>)
  4010a8:	47c0      	blx	r8
	mxt_write_config_reg(&device, mxt_get_object_address(&device, MXT_GEN_COMMANDPROCESSOR_T6, 0) + MXT_GEN_COMMANDPROCESSOR_CALIBRATE, 0x01); 
  4010aa:	462a      	mov	r2, r5
  4010ac:	2106      	movs	r1, #6
  4010ae:	4811      	ldr	r0, [pc, #68]	; (4010f4 <mxt_init+0x184>)
  4010b0:	47b0      	blx	r6
  4010b2:	1c81      	adds	r1, r0, #2
  4010b4:	2201      	movs	r2, #1
  4010b6:	480f      	ldr	r0, [pc, #60]	; (4010f4 <mxt_init+0x184>)
  4010b8:	b289      	uxth	r1, r1
  4010ba:	4e12      	ldr	r6, [pc, #72]	; (401104 <mxt_init+0x194>)
  4010bc:	47b8      	blx	r7
	delay_ms(100); 
  4010be:	4812      	ldr	r0, [pc, #72]	; (401108 <mxt_init+0x198>)
		mxt_read_message(data, &message);
  4010c0:	4d0c      	ldr	r5, [pc, #48]	; (4010f4 <mxt_init+0x184>)
	delay_ms(100); 
  4010c2:	47c8      	blx	r9
		mxt_read_message(data, &message);
  4010c4:	a903      	add	r1, sp, #12
  4010c6:	4628      	mov	r0, r5
  4010c8:	47b0      	blx	r6
	} while (--count);
  4010ca:	3c01      	subs	r4, #1
  4010cc:	d1fa      	bne.n	4010c4 <mxt_init+0x154>
	
	// Make chg pin high 
	mxt_make_highchg(&device);
}
  4010ce:	b01f      	add	sp, #124	; 0x7c
  4010d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4010d4:	00408690 	.word	0x00408690
  4010d8:	004026c5 	.word	0x004026c5
  4010dc:	400e1400 	.word	0x400e1400
  4010e0:	08f0d180 	.word	0x08f0d180
  4010e4:	00402e51 	.word	0x00402e51
  4010e8:	00401fd9 	.word	0x00401fd9
  4010ec:	40018000 	.word	0x40018000
  4010f0:	004013a9 	.word	0x004013a9
  4010f4:	20406200 	.word	0x20406200
  4010f8:	004017ad 	.word	0x004017ad
  4010fc:	00401871 	.word	0x00401871
  401100:	003228d8 	.word	0x003228d8
  401104:	004018b9 	.word	0x004018b9
  401108:	004d2b25 	.word	0x004d2b25
  40110c:	20400001 	.word	0x20400001
  401110:	004017f5 	.word	0x004017f5
  401114:	00061a80 	.word	0x00061a80

00401118 <PSOLA_init>:
static float currentPitch; 
static float window[10*WIN_SIZE]; // sufficiently large window array  
/************************ Static variables *********************/

void PSOLA_init(void)
{
  401118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	arm_fill_f32(0.0f, input_ring_buffer, RING_BUFFER_SIZE); 
  40111a:	2500      	movs	r5, #0
  40111c:	4c0f      	ldr	r4, [pc, #60]	; (40115c <PSOLA_init+0x44>)
  40111e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  401122:	490f      	ldr	r1, [pc, #60]	; (401160 <PSOLA_init+0x48>)
  401124:	4628      	mov	r0, r5
	arm_fill_f32(0.0f, output_ring_buffer, RING_BUFFER_SIZE);
	arm_fill_f32(0.0f, window, 10*WIN_SIZE); 
	
	readPos = RING_BUFFER_SIZE - WIN_SIZE; // + WEIRD_OFFSET; 
  401126:	4e0f      	ldr	r6, [pc, #60]	; (401164 <PSOLA_init+0x4c>)
	arm_fill_f32(0.0f, input_ring_buffer, RING_BUFFER_SIZE); 
  401128:	47a0      	blx	r4
	arm_fill_f32(0.0f, output_ring_buffer, RING_BUFFER_SIZE);
  40112a:	4628      	mov	r0, r5
  40112c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  401130:	490d      	ldr	r1, [pc, #52]	; (401168 <PSOLA_init+0x50>)
  401132:	47a0      	blx	r4
	arm_fill_f32(0.0f, window, 10*WIN_SIZE); 
  401134:	4628      	mov	r0, r5
  401136:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  40113a:	490c      	ldr	r1, [pc, #48]	; (40116c <PSOLA_init+0x54>)
  40113c:	47a0      	blx	r4
	readPos = RING_BUFFER_SIZE - WIN_SIZE; // + WEIRD_OFFSET; 
  40113e:	f44f 5778 	mov.w	r7, #15872	; 0x3e00
	inPtr = 0; 
  401142:	2300      	movs	r3, #0
  401144:	4d0a      	ldr	r5, [pc, #40]	; (401170 <PSOLA_init+0x58>)
	outPtr = 0; 
  401146:	4c0b      	ldr	r4, [pc, #44]	; (401174 <PSOLA_init+0x5c>)
	samplesLeftInPeriod = 0; 
	inputPeriodLength = PSOLA_SAMPLE_RATE / MINIMUM_PITCH; 
  401148:	f240 2145 	movw	r1, #581	; 0x245
	samplesLeftInPeriod = 0; 
  40114c:	480a      	ldr	r0, [pc, #40]	; (401178 <PSOLA_init+0x60>)
	inputPeriodLength = PSOLA_SAMPLE_RATE / MINIMUM_PITCH; 
  40114e:	4a0b      	ldr	r2, [pc, #44]	; (40117c <PSOLA_init+0x64>)
	readPos = RING_BUFFER_SIZE - WIN_SIZE; // + WEIRD_OFFSET; 
  401150:	6037      	str	r7, [r6, #0]
	inPtr = 0; 
  401152:	602b      	str	r3, [r5, #0]
	outPtr = 0; 
  401154:	6023      	str	r3, [r4, #0]
	samplesLeftInPeriod = 0; 
  401156:	6003      	str	r3, [r0, #0]
	inputPeriodLength = PSOLA_SAMPLE_RATE / MINIMUM_PITCH; 
  401158:	6011      	str	r1, [r2, #0]
  40115a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40115c:	004054d5 	.word	0x004054d5
  401160:	20406228 	.word	0x20406228
  401164:	2042622c 	.word	0x2042622c
  401168:	2041622c 	.word	0x2041622c
  40116c:	20426234 	.word	0x20426234
  401170:	20406220 	.word	0x20406220
  401174:	20416228 	.word	0x20416228
  401178:	20426230 	.word	0x20426230
  40117c:	20406224 	.word	0x20406224

00401180 <create_harmonies>:
	currentPitch = MINIMUM_PITCH; 
}

// assumes valid pitch shifts 
void create_harmonies(float* input, float *output, float inputPitch, float *pitch_shifts_in)
{
  401180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401184:	461d      	mov	r5, r3
	uint32_t i, w; 
	int32_t olaIdx; 
	
	uint32_t saved_inPtr = inPtr; 
  401186:	4b7d      	ldr	r3, [pc, #500]	; (40137c <create_harmonies+0x1fc>)
  401188:	4f7d      	ldr	r7, [pc, #500]	; (401380 <create_harmonies+0x200>)
{
  40118a:	ed2d 8b04 	vpush	{d8-d9}
	uint32_t saved_inPtr = inPtr; 
  40118e:	681b      	ldr	r3, [r3, #0]
{
  401190:	b089      	sub	sp, #36	; 0x24
  401192:	ee08 2a10 	vmov	s16, r2
	uint32_t saved_outPtr = outPtr; 
	uint32_t saved_samplesLeftInPeriod = samplesLeftInPeriod; 
	uint32_t pitch_idx = 0; 
	
	uint32_t starting_input_ptr = inPtr + WIN_SIZE; 
  401196:	461a      	mov	r2, r3
{
  401198:	9107      	str	r1, [sp, #28]
	uint32_t saved_inPtr = inPtr; 
  40119a:	9303      	str	r3, [sp, #12]
	uint32_t starting_input_ptr = inPtr + WIN_SIZE; 
  40119c:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4011a0:	f502 6180 	add.w	r1, r2, #1024	; 0x400
	uint32_t saved_outPtr = outPtr; 
  4011a4:	4a77      	ldr	r2, [pc, #476]	; (401384 <create_harmonies+0x204>)
  4011a6:	6812      	ldr	r2, [r2, #0]
  4011a8:	9204      	str	r2, [sp, #16]
	uint32_t saved_samplesLeftInPeriod = samplesLeftInPeriod; 
  4011aa:	4a77      	ldr	r2, [pc, #476]	; (401388 <create_harmonies+0x208>)
  4011ac:	6812      	ldr	r2, [r2, #0]
  4011ae:	9205      	str	r2, [sp, #20]
	for (i = 0; i < WIN_SIZE; i++)
	{
		input_ring_buffer[(starting_input_ptr++) & RING_BUFFER_MASK] = input[i]; 
  4011b0:	f3c3 020d 	ubfx	r2, r3, #0, #14
  4011b4:	3301      	adds	r3, #1
  4011b6:	f850 4b04 	ldr.w	r4, [r0], #4
  4011ba:	eb07 0282 	add.w	r2, r7, r2, lsl #2
	for (i = 0; i < WIN_SIZE; i++)
  4011be:	428b      	cmp	r3, r1
		input_ring_buffer[(starting_input_ptr++) & RING_BUFFER_MASK] = input[i]; 
  4011c0:	6014      	str	r4, [r2, #0]
	for (i = 0; i < WIN_SIZE; i++)
  4011c2:	d1f5      	bne.n	4011b0 <create_harmonies+0x30>
		
	uint32_t outLag;
	uint32_t inHalfAway;
	float periodRatio;
	float cum_samplesLeftInPeriod = 0;
	float inputPeriodLengthRecip = 1.0f / inputPeriodLength;
  4011c4:	4b71      	ldr	r3, [pc, #452]	; (40138c <create_harmonies+0x20c>)
  4011c6:	f8d3 c000 	ldr.w	ip, [r3]
  4011ca:	ee07 ca90 	vmov	s15, ip
	
	// pre-compute window function	
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  4011ce:	f1bc 0f00 	cmp.w	ip, #0
	float inputPeriodLengthRecip = 1.0f / inputPeriodLength;
  4011d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  4011d6:	dd23      	ble.n	401220 <create_harmonies+0xa0>
  4011d8:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 401390 <create_harmonies+0x210>
	{
		window[w] = (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  4011dc:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
  4011e0:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
  4011e4:	4e6b      	ldr	r6, [pc, #428]	; (401394 <create_harmonies+0x214>)
  4011e6:	eec7 8a27 	vdiv.f32	s17, s14, s15
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  4011ea:	2400      	movs	r4, #0
  4011ec:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 4013a4 <create_harmonies+0x224>
		window[w] = (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  4011f0:	ee07 4a90 	vmov	s15, r4
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  4011f4:	3401      	adds	r4, #1
		window[w] = (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  4011f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4011fa:	ee67 7aa8 	vmul.f32	s15, s15, s17
  4011fe:	ee17 0a90 	vmov	r0, s15
  401202:	47c0      	blx	r8
  401204:	ee07 0a90 	vmov	s15, r0
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  401208:	4b60      	ldr	r3, [pc, #384]	; (40138c <create_harmonies+0x20c>)
		window[w] = (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  40120a:	ee79 7ae7 	vsub.f32	s15, s19, s15
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  40120e:	681b      	ldr	r3, [r3, #0]
		window[w] = (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  401210:	ee67 7a89 	vmul.f32	s15, s15, s18
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  401214:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
		window[w] = (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  401218:	ece6 7a01 	vstmia	r6!, {s15}
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  40121c:	dbe8      	blt.n	4011f0 <create_harmonies+0x70>
  40121e:	469c      	mov	ip, r3
  401220:	4b58      	ldr	r3, [pc, #352]	; (401384 <create_harmonies+0x204>)
  401222:	ee07 ca90 	vmov	s15, ip
	}
		
	// for each pitch shift 
	while(pitch_shifts_in[pitch_idx] > 0.0f && pitch_idx < MAX_NUM_SHIFTS)
	{
		periodRatio = 1.0f / pitch_shifts_in[pitch_idx++]; 
  401226:	2200      	movs	r2, #0
  401228:	4954      	ldr	r1, [pc, #336]	; (40137c <create_harmonies+0x1fc>)
  40122a:	f8d3 e000 	ldr.w	lr, [r3]
  40122e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
  401232:	4b55      	ldr	r3, [pc, #340]	; (401388 <create_harmonies+0x208>)
  401234:	f1cc 0b00 	rsb	fp, ip, #0
  401238:	f8d1 a000 	ldr.w	sl, [r1]
  40123c:	4610      	mov	r0, r2
  40123e:	681b      	ldr	r3, [r3, #0]
  401240:	4629      	mov	r1, r5
  401242:	4e55      	ldr	r6, [pc, #340]	; (401398 <create_harmonies+0x218>)
  401244:	9502      	str	r5, [sp, #8]
  401246:	9201      	str	r2, [sp, #4]
	while(pitch_shifts_in[pitch_idx] > 0.0f && pitch_idx < MAX_NUM_SHIFTS)
  401248:	ecf1 7a01 	vldmia	r1!, {s15}
  40124c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  401250:	9102      	str	r1, [sp, #8]
  401252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  401256:	bfcc      	ite	gt
  401258:	2101      	movgt	r1, #1
  40125a:	2100      	movle	r1, #0
  40125c:	280b      	cmp	r0, #11
  40125e:	bf0c      	ite	eq
  401260:	2100      	moveq	r1, #0
  401262:	f001 0101 	andne.w	r1, r1, #1
  401266:	9106      	str	r1, [sp, #24]
  401268:	2900      	cmp	r1, #0
  40126a:	d05e      	beq.n	40132a <create_harmonies+0x1aa>
  40126c:	ee86 7a27 	vdiv.f32	s14, s12, s15
  401270:	4603      	mov	r3, r0
		periodRatio = 1.0f / pitch_shifts_in[pitch_idx++]; 
  401272:	f44f 7200 	mov.w	r2, #512	; 0x200
		samplesLeftInPeriod = saved_samplesLeftInPeriod; 
		inPtr = saved_inPtr; 
		outPtr = saved_outPtr; 
  401276:	f8dd e010 	ldr.w	lr, [sp, #16]
		periodRatio = 1.0f / pitch_shifts_in[pitch_idx++]; 
  40127a:	3301      	adds	r3, #1
  40127c:	f8dd a00c 	ldr.w	sl, [sp, #12]
  401280:	9200      	str	r2, [sp, #0]
  401282:	9301      	str	r3, [sp, #4]
  401284:	9b05      	ldr	r3, [sp, #20]
  401286:	eefc 7ac7 	vcvt.u32.f32	s15, s14
  40128a:	ee17 9a90 	vmov	r9, s15
		for (i = 0; i < WIN_SIZE; i++)
		{		
			if (samplesLeftInPeriod == 0)
  40128e:	b95b      	cbnz	r3, 4012a8 <create_harmonies+0x128>
			{
				outLag = 1; 
			
				inHalfAway = (inPtr + RING_BUFFER_SIZE_D2) & RING_BUFFER_MASK;
  401290:	f50a 5800 	add.w	r8, sl, #8192	; 0x2000
  401294:	f3c8 080d 	ubfx	r8, r8, #0, #14
                
				if (inHalfAway < RING_BUFFER_SIZE_D2) 
  401298:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
  40129c:	d240      	bcs.n	401320 <create_harmonies+0x1a0>
				{
					/* The zero element of the input buffer lies
						in (inptr, inHalfAway] */
					if (outPtr < inHalfAway || outPtr > inPtr) {
  40129e:	45f2      	cmp	sl, lr
  4012a0:	d301      	bcc.n	4012a6 <create_harmonies+0x126>
  4012a2:	45f0      	cmp	r8, lr
  4012a4:	d914      	bls.n	4012d0 <create_harmonies+0x150>
		periodRatio = 1.0f / pitch_shifts_in[pitch_idx++]; 
  4012a6:	4663      	mov	r3, ip
		for (i = 0; i < WIN_SIZE; i++)
  4012a8:	9a00      	ldr	r2, [sp, #0]
			}
		
			--samplesLeftInPeriod; 
		
			// inc/wrap input ring buffer index 
			inPtr = (inPtr+1) & RING_BUFFER_MASK; 		
  4012aa:	f10a 0a01 	add.w	sl, sl, #1
			--samplesLeftInPeriod; 
  4012ae:	3b01      	subs	r3, #1
		for (i = 0; i < WIN_SIZE; i++)
  4012b0:	3a01      	subs	r2, #1
			inPtr = (inPtr+1) & RING_BUFFER_MASK; 		
  4012b2:	f3ca 0a0d 	ubfx	sl, sl, #0, #14
		for (i = 0; i < WIN_SIZE; i++)
  4012b6:	9200      	str	r2, [sp, #0]
  4012b8:	d1e9      	bne.n	40128e <create_harmonies+0x10e>
  4012ba:	9a06      	ldr	r2, [sp, #24]
  4012bc:	9902      	ldr	r1, [sp, #8]
  4012be:	9801      	ldr	r0, [sp, #4]
  4012c0:	e7c2      	b.n	401248 <create_harmonies+0xc8>
					if (inHalfAway < RING_BUFFER_SIZE_D2) 
  4012c2:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
  4012c6:	d228      	bcs.n	40131a <create_harmonies+0x19a>
						if (outPtr < inHalfAway || outPtr > inPtr) {
  4012c8:	45f0      	cmp	r8, lr
  4012ca:	d8ec      	bhi.n	4012a6 <create_harmonies+0x126>
  4012cc:	45d6      	cmp	lr, sl
  4012ce:	d8ea      	bhi.n	4012a6 <create_harmonies+0x126>
					outPtr = (outPtr + (uint32_t)((float)inputPeriodLength * periodRatio)) & RING_BUFFER_MASK; 
  4012d0:	44ce      	add	lr, r9
					for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  4012d2:	45dc      	cmp	ip, fp
					outPtr = (outPtr + (uint32_t)((float)inputPeriodLength * periodRatio)) & RING_BUFFER_MASK; 
  4012d4:	f3ce 0e0d 	ubfx	lr, lr, #0, #14
					for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  4012d8:	ddf3      	ble.n	4012c2 <create_harmonies+0x142>
  4012da:	ebae 020c 	sub.w	r2, lr, ip
  4012de:	482d      	ldr	r0, [pc, #180]	; (401394 <create_harmonies+0x214>)
  4012e0:	eb0e 050c 	add.w	r5, lr, ip
  4012e4:	ebaa 040e 	sub.w	r4, sl, lr
							window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4012e8:	18a3      	adds	r3, r4, r2
						output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  4012ea:	f3c2 010d 	ubfx	r1, r2, #0, #14
							window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4012ee:	ecf0 6a01 	vldmia	r0!, {s13}
  4012f2:	3201      	adds	r2, #1
  4012f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
						output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  4012f8:	eb06 0181 	add.w	r1, r6, r1, lsl #2
					for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  4012fc:	4295      	cmp	r5, r2
							window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4012fe:	eb07 0383 	add.w	r3, r7, r3, lsl #2
						output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  401302:	edd1 7a00 	vldr	s15, [r1]
  401306:	ed93 7a00 	vldr	s14, [r3]
  40130a:	eee6 7a87 	vfma.f32	s15, s13, s14
  40130e:	edc1 7a00 	vstr	s15, [r1]
					for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  401312:	d1e9      	bne.n	4012e8 <create_harmonies+0x168>
					if (inHalfAway < RING_BUFFER_SIZE_D2) 
  401314:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
  401318:	d3d6      	bcc.n	4012c8 <create_harmonies+0x148>
						if (outPtr > inPtr && outPtr < inHalfAway) {
  40131a:	45d6      	cmp	lr, sl
  40131c:	d8c1      	bhi.n	4012a2 <create_harmonies+0x122>
  40131e:	e7d7      	b.n	4012d0 <create_harmonies+0x150>
					if (outPtr > inPtr && outPtr < inHalfAway) {
  401320:	45f0      	cmp	r8, lr
  401322:	d9d5      	bls.n	4012d0 <create_harmonies+0x150>
  401324:	45f2      	cmp	sl, lr
  401326:	d3be      	bcc.n	4012a6 <create_harmonies+0x126>
  401328:	e7d2      	b.n	4012d0 <create_harmonies+0x150>
  40132a:	b13a      	cbz	r2, 40133c <create_harmonies+0x1bc>
  40132c:	4a15      	ldr	r2, [pc, #84]	; (401384 <create_harmonies+0x204>)
  40132e:	f8c2 e000 	str.w	lr, [r2]
  401332:	4a15      	ldr	r2, [pc, #84]	; (401388 <create_harmonies+0x208>)
  401334:	6013      	str	r3, [r2, #0]
  401336:	4b11      	ldr	r3, [pc, #68]	; (40137c <create_harmonies+0x1fc>)
  401338:	f8c3 a000 	str.w	sl, [r3]
  40133c:	9a07      	ldr	r2, [sp, #28]
	}
	
	for(i = 0; i < WIN_SIZE; i++)
	{
		output[i] = output_ring_buffer[readPos]; 	
		output_ring_buffer[readPos] = 0.0f;
  40133e:	2500      	movs	r5, #0
  401340:	4916      	ldr	r1, [pc, #88]	; (40139c <create_harmonies+0x21c>)
  401342:	f502 6400 	add.w	r4, r2, #2048	; 0x800
  401346:	680b      	ldr	r3, [r1, #0]
		output[i] = output_ring_buffer[readPos]; 	
  401348:	eb06 0083 	add.w	r0, r6, r3, lsl #2
		readPos = (readPos+1) & RING_BUFFER_MASK;
  40134c:	3301      	adds	r3, #1
		output[i] = output_ring_buffer[readPos]; 	
  40134e:	6807      	ldr	r7, [r0, #0]
		readPos = (readPos+1) & RING_BUFFER_MASK;
  401350:	f3c3 030d 	ubfx	r3, r3, #0, #14
		output[i] = output_ring_buffer[readPos]; 	
  401354:	f842 7b04 	str.w	r7, [r2], #4
	for(i = 0; i < WIN_SIZE; i++)
  401358:	42a2      	cmp	r2, r4
		output_ring_buffer[readPos] = 0.0f;
  40135a:	6005      	str	r5, [r0, #0]
	for(i = 0; i < WIN_SIZE; i++)
  40135c:	d1f4      	bne.n	401348 <create_harmonies+0x1c8>
	// variables for next harmonization  
	//if ((pitch_idx-1) > 0)
		//samplesLeftInPeriod = cum_samplesLeftInPeriod / (pitch_idx-1); // average the number of samples left in period 
	
	currentPitch = inputPitch; 
	inputPeriodLength = (uint32_t)(PSOLA_SAMPLE_RATE / currentPitch);
  40135e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 4013a0 <create_harmonies+0x220>
  401362:	600b      	str	r3, [r1, #0]
  401364:	eec7 7a08 	vdiv.f32	s15, s14, s16
  401368:	4b08      	ldr	r3, [pc, #32]	; (40138c <create_harmonies+0x20c>)
  40136a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  40136e:	edc3 7a00 	vstr	s15, [r3]
	

	
	
}
  401372:	b009      	add	sp, #36	; 0x24
  401374:	ecbd 8b04 	vpop	{d8-d9}
  401378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40137c:	20406220 	.word	0x20406220
  401380:	20406228 	.word	0x20406228
  401384:	20416228 	.word	0x20416228
  401388:	20426230 	.word	0x20426230
  40138c:	20406224 	.word	0x20406224
  401390:	40490fdb 	.word	0x40490fdb
  401394:	20426234 	.word	0x20426234
  401398:	2041622c 	.word	0x2041622c
  40139c:	2042622c 	.word	0x2042622c
  4013a0:	4735a700 	.word	0x4735a700
  4013a4:	0040577d 	.word	0x0040577d

004013a8 <mxt_init_device>:
 * \param chgpin IOPORT pin instance attached to the maXTouch device's /CHG pin
 * \return Operation result status code
 */
status_code_t mxt_init_device(struct mxt_device *device,
		twihs_master_t interface, uint8_t chip_adr, uint32_t chgpin)
{
  4013a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4013ac:	4604      	mov	r4, r0

	/* Set TWI interface, TWI address and CHG-pin of the maXTouch device. */
	device->interface = interface;
	device->mxt_chip_adr = chip_adr;
	device->chgpin = chgpin;
	device->handler = NULL;
  4013ae:	2500      	movs	r5, #0
	device->chgpin = chgpin;
  4013b0:	6183      	str	r3, [r0, #24]
			malloc(sizeof(struct mxt_info_object));
  4013b2:	2007      	movs	r0, #7
{
  4013b4:	b089      	sub	sp, #36	; 0x24
	device->interface = interface;
  4013b6:	60a1      	str	r1, [r4, #8]
	device->handler = NULL;
  4013b8:	6125      	str	r5, [r4, #16]
{
  4013ba:	468a      	mov	sl, r1
	device->mxt_chip_adr = chip_adr;
  4013bc:	7322      	strb	r2, [r4, #12]
{
  4013be:	4617      	mov	r7, r2
			malloc(sizeof(struct mxt_info_object));
  4013c0:	4e4e      	ldr	r6, [pc, #312]	; (4014fc <mxt_init_device+0x154>)
	twihs_package_t packet = {
  4013c2:	4681      	mov	r9, r0
			malloc(sizeof(struct mxt_info_object));
  4013c4:	47b0      	blx	r6
  4013c6:	4603      	mov	r3, r0
	twihs_package_t packet = {
  4013c8:	f04f 0802 	mov.w	r8, #2
  4013cc:	9507      	str	r5, [sp, #28]
  4013ce:	9503      	str	r5, [sp, #12]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4013d0:	4650      	mov	r0, sl
	device->info_object = (struct mxt_info_object *)
  4013d2:	6023      	str	r3, [r4, #0]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4013d4:	a903      	add	r1, sp, #12
  4013d6:	4d4a      	ldr	r5, [pc, #296]	; (401500 <mxt_init_device+0x158>)
	twihs_package_t packet = {
  4013d8:	9305      	str	r3, [sp, #20]
  4013da:	f88d 701c 	strb.w	r7, [sp, #28]
  4013de:	f8cd 8010 	str.w	r8, [sp, #16]
  4013e2:	f8cd 9018 	str.w	r9, [sp, #24]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4013e6:	47a8      	blx	r5
  4013e8:	2800      	cmp	r0, #0
  4013ea:	f040 81d7 	bne.w	40179c <mxt_init_device+0x3f4>
			malloc(device->info_object->obj_count *
  4013ee:	f8d4 a000 	ldr.w	sl, [r4]
  4013f2:	4607      	mov	r7, r0
  4013f4:	f89a 0006 	ldrb.w	r0, [sl, #6]
  4013f8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4013fc:	0040      	lsls	r0, r0, #1
  4013fe:	47b0      	blx	r6
	twihs_package_t packet = {
  401400:	9703      	str	r7, [sp, #12]
	device->object_list = (struct mxt_object *)
  401402:	6060      	str	r0, [r4, #4]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  401404:	a903      	add	r1, sp, #12
	twihs_package_t packet = {
  401406:	9005      	str	r0, [sp, #20]
  401408:	9706      	str	r7, [sp, #24]
  40140a:	9707      	str	r7, [sp, #28]
  40140c:	f88d 900c 	strb.w	r9, [sp, #12]
  401410:	f8cd 8010 	str.w	r8, [sp, #16]
		.length       = device->info_object->obj_count *
  401414:	f89a 3006 	ldrb.w	r3, [sl, #6]
	twihs_package_t packet = {
  401418:	7b22      	ldrb	r2, [r4, #12]
		.length       = device->info_object->obj_count *
  40141a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  40141e:	68a0      	ldr	r0, [r4, #8]
	twihs_package_t packet = {
  401420:	f88d 201c 	strb.w	r2, [sp, #28]
		.length       = device->info_object->obj_count *
  401424:	005b      	lsls	r3, r3, #1
	twihs_package_t packet = {
  401426:	9306      	str	r3, [sp, #24]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  401428:	47a8      	blx	r5
  40142a:	2800      	cmp	r0, #0
  40142c:	f040 81b6 	bne.w	40179c <mxt_init_device+0x3f4>
  401430:	e894 0088 	ldmia.w	r4, {r3, r7}
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  401434:	7819      	ldrb	r1, [r3, #0]
  401436:	7858      	ldrb	r0, [r3, #1]
  401438:	78da      	ldrb	r2, [r3, #3]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  40143a:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  40143e:	7899      	ldrb	r1, [r3, #2]
  401440:	f893 e005 	ldrb.w	lr, [r3, #5]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  401444:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  401448:	791a      	ldrb	r2, [r3, #4]
			(device->info_object->obj_count *
  40144a:	799b      	ldrb	r3, [r3, #6]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  40144c:	ea81 0140 	eor.w	r1, r1, r0, lsl #1
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  401450:	7838      	ldrb	r0, [r7, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  401452:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
			(device->info_object->obj_count *
  401456:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
	result = ((crc << 1u) ^ (uint32_t)data_word);
  40145a:	ea82 0241 	eor.w	r2, r2, r1, lsl #1
		result ^= crcpoly;
  40145e:	4929      	ldr	r1, [pc, #164]	; (401504 <mxt_init_device+0x15c>)
	result = ((crc << 1u) ^ (uint32_t)data_word);
  401460:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
			(device->info_object->obj_count *
  401464:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
	result = ((crc << 1u) ^ (uint32_t)data_word);
  401468:	ea83 0342 	eor.w	r3, r3, r2, lsl #1
	crc_area_size = MXT_ID_BLOCK_SIZE +
  40146c:	f10c 0c07 	add.w	ip, ip, #7
	if (result & 0x1000000) {
  401470:	01da      	lsls	r2, r3, #7
	crc_area_size = MXT_ID_BLOCK_SIZE +
  401472:	fa1f fc8c 	uxth.w	ip, ip
	if (result & 0x1000000) {
  401476:	d43e      	bmi.n	4014f6 <mxt_init_device+0x14e>
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  401478:	f1ac 0e08 	sub.w	lr, ip, #8
  40147c:	f1be 0f01 	cmp.w	lr, #1
  401480:	dd13      	ble.n	4014aa <mxt_init_device+0x102>
  401482:	2001      	movs	r0, #1
		result ^= crcpoly;
  401484:	f8df 807c 	ldr.w	r8, [pc, #124]	; 401504 <mxt_init_device+0x15c>
		crc_tmp = mxt_crc_24(crc_tmp, objects_pointer[i],
  401488:	1839      	adds	r1, r7, r0
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  40148a:	5c3a      	ldrb	r2, [r7, r0]
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  40148c:	3002      	adds	r0, #2
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  40148e:	7849      	ldrb	r1, [r1, #1]
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  401490:	b280      	uxth	r0, r0
	result = ((crc << 1u) ^ (uint32_t)data_word);
  401492:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  401496:	ea82 0343 	eor.w	r3, r2, r3, lsl #1
  40149a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
		result ^= crcpoly;
  40149e:	ea83 0208 	eor.w	r2, r3, r8
  4014a2:	bf18      	it	ne
  4014a4:	4613      	movne	r3, r2
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  4014a6:	4570      	cmp	r0, lr
  4014a8:	dbee      	blt.n	401488 <mxt_init_device+0xe0>
	crc_tmp = mxt_crc_24(crc_tmp,
  4014aa:	4467      	add	r7, ip
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4014ac:	f817 7c08 	ldrb.w	r7, [r7, #-8]
  4014b0:	ea87 0743 	eor.w	r7, r7, r3, lsl #1
	if (result & 0x1000000) {
  4014b4:	01f9      	lsls	r1, r7, #7
  4014b6:	d503      	bpl.n	4014c0 <mxt_init_device+0x118>
		result ^= crcpoly;
  4014b8:	f487 0700 	eor.w	r7, r7, #8388608	; 0x800000
  4014bc:	f087 071b 	eor.w	r7, r7, #27
	twihs_package_t packet = {
  4014c0:	2002      	movs	r0, #2
  4014c2:	2300      	movs	r3, #0
  4014c4:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
  4014c8:	2203      	movs	r2, #3
  4014ca:	9004      	str	r0, [sp, #16]
  4014cc:	a802      	add	r0, sp, #8
  4014ce:	9303      	str	r3, [sp, #12]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4014d0:	a903      	add	r1, sp, #12
	twihs_package_t packet = {
  4014d2:	9307      	str	r3, [sp, #28]
  4014d4:	7b23      	ldrb	r3, [r4, #12]
  4014d6:	9005      	str	r0, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4014d8:	68a0      	ldr	r0, [r4, #8]
	twihs_package_t packet = {
  4014da:	f88d c00c 	strb.w	ip, [sp, #12]
  4014de:	f88d e00d 	strb.w	lr, [sp, #13]
  4014e2:	9206      	str	r2, [sp, #24]
  4014e4:	f88d 301c 	strb.w	r3, [sp, #28]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4014e8:	47a8      	blx	r5
  4014ea:	b168      	cbz	r0, 401508 <mxt_init_device+0x160>
		return ERR_BAD_DATA;
  4014ec:	f06f 0003 	mvn.w	r0, #3
	}

	device->multitouch_report_offset = status;

	return STATUS_OK;
}
  4014f0:	b009      	add	sp, #36	; 0x24
  4014f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result ^= crcpoly;
  4014f6:	404b      	eors	r3, r1
  4014f8:	e7be      	b.n	401478 <mxt_init_device+0xd0>
  4014fa:	bf00      	nop
  4014fc:	004058e9 	.word	0x004058e9
  401500:	004020b9 	.word	0x004020b9
  401504:	0080001b 	.word	0x0080001b
		return ((uint32_t)crc[2] << 16) | ((uint16_t)crc[1] << 8) | crc[0];
  401508:	f89d 500a 	ldrb.w	r5, [sp, #10]
	*crc = (crc_tmp & 0x00FFFFFF);
  40150c:	f027 437f 	bic.w	r3, r7, #4278190080	; 0xff000000
		return ((uint32_t)crc[2] << 16) | ((uint16_t)crc[1] << 8) | crc[0];
  401510:	f89d 2008 	ldrb.w	r2, [sp, #8]
  401514:	f89d 1009 	ldrb.w	r1, [sp, #9]
  401518:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
  40151c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	if (crc_calculated != crc_read) {
  401520:	429a      	cmp	r2, r3
  401522:	d1e3      	bne.n	4014ec <mxt_init_device+0x144>
  401524:	6823      	ldr	r3, [r4, #0]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401526:	799f      	ldrb	r7, [r3, #6]
  401528:	9301      	str	r3, [sp, #4]
  40152a:	2f00      	cmp	r7, #0
  40152c:	f000 8139 	beq.w	4017a2 <mxt_init_device+0x3fa>
  401530:	f1a7 0a08 	sub.w	sl, r7, #8
  401534:	1e7b      	subs	r3, r7, #1
  401536:	f8d4 8004 	ldr.w	r8, [r4, #4]
  40153a:	f3ca 0ac4 	ubfx	sl, sl, #3, #5
  40153e:	2b43      	cmp	r3, #67	; 0x43
  401540:	4603      	mov	r3, r0
  401542:	f10a 0a01 	add.w	sl, sl, #1
  401546:	ea4f 02ca 	mov.w	r2, sl, lsl #3
  40154a:	b2d2      	uxtb	r2, r2
  40154c:	f240 8116 	bls.w	40177c <mxt_init_device+0x3d4>
  401550:	f108 0935 	add.w	r9, r8, #53	; 0x35
  401554:	4686      	mov	lr, r0
  401556:	4601      	mov	r1, r0
		tot_report_ids += (device->object_list[i].num_report_ids);
  401558:	2000      	movs	r0, #0
  40155a:	f819 cc18 	ldrb.w	ip, [r9, #-24]
  40155e:	f819 bc30 	ldrb.w	fp, [r9, #-48]
  401562:	3301      	adds	r3, #1
  401564:	4605      	mov	r5, r0
  401566:	f109 0930 	add.w	r9, r9, #48	; 0x30
  40156a:	f36b 0007 	bfi	r0, fp, #0, #8
  40156e:	f819 bc42 	ldrb.w	fp, [r9, #-66]
  401572:	f36c 0507 	bfi	r5, ip, #0, #8
  401576:	f819 cc5a 	ldrb.w	ip, [r9, #-90]
  40157a:	f36b 250f 	bfi	r5, fp, #8, #8
  40157e:	f819 bc3c 	ldrb.w	fp, [r9, #-60]
  401582:	f36c 200f 	bfi	r0, ip, #8, #8
  401586:	f819 cc54 	ldrb.w	ip, [r9, #-84]
  40158a:	f36b 4517 	bfi	r5, fp, #16, #8
  40158e:	f819 bc36 	ldrb.w	fp, [r9, #-54]
  401592:	f36c 4017 	bfi	r0, ip, #16, #8
  401596:	f819 cc4e 	ldrb.w	ip, [r9, #-78]
  40159a:	f36b 651f 	bfi	r5, fp, #24, #8
  40159e:	f001 3b7f 	and.w	fp, r1, #2139062143	; 0x7f7f7f7f
  4015a2:	f36c 601f 	bfi	r0, ip, #24, #8
  4015a6:	f005 3c7f 	and.w	ip, r5, #2139062143	; 0x7f7f7f7f
  4015aa:	4069      	eors	r1, r5
  4015ac:	f000 357f 	and.w	r5, r0, #2139062143	; 0x7f7f7f7f
  4015b0:	ea80 000e 	eor.w	r0, r0, lr
  4015b4:	44dc      	add	ip, fp
  4015b6:	f00e 3e7f 	and.w	lr, lr, #2139062143	; 0x7f7f7f7f
  4015ba:	fa5f fb83 	uxtb.w	fp, r3
  4015be:	f001 3180 	and.w	r1, r1, #2155905152	; 0x80808080
  4015c2:	f000 3080 	and.w	r0, r0, #2155905152	; 0x80808080
  4015c6:	44ae      	add	lr, r5
  4015c8:	45da      	cmp	sl, fp
  4015ca:	ea8c 0101 	eor.w	r1, ip, r1
  4015ce:	ea8e 0e00 	eor.w	lr, lr, r0
  4015d2:	d8c1      	bhi.n	401558 <mxt_init_device+0x1b0>
  4015d4:	f3ce 2307 	ubfx	r3, lr, #8, #8
  4015d8:	f3ce 4c07 	ubfx	ip, lr, #16, #8
  4015dc:	f3c1 2507 	ubfx	r5, r1, #8, #8
  4015e0:	f3c1 4007 	ubfx	r0, r1, #16, #8
  4015e4:	4473      	add	r3, lr
  4015e6:	4297      	cmp	r7, r2
  4015e8:	4463      	add	r3, ip
  4015ea:	eb03 631e 	add.w	r3, r3, lr, lsr #24
  4015ee:	440b      	add	r3, r1
  4015f0:	442b      	add	r3, r5
  4015f2:	4403      	add	r3, r0
  4015f4:	eb03 6311 	add.w	r3, r3, r1, lsr #24
  4015f8:	b2db      	uxtb	r3, r3
  4015fa:	d00a      	beq.n	401612 <mxt_init_device+0x26a>
  4015fc:	eb02 0142 	add.w	r1, r2, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401600:	3201      	adds	r2, #1
		tot_report_ids += (device->object_list[i].num_report_ids);
  401602:	eb08 0141 	add.w	r1, r8, r1, lsl #1
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401606:	b2d2      	uxtb	r2, r2
		tot_report_ids += (device->object_list[i].num_report_ids);
  401608:	7949      	ldrb	r1, [r1, #5]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40160a:	4297      	cmp	r7, r2
		tot_report_ids += (device->object_list[i].num_report_ids);
  40160c:	440b      	add	r3, r1
  40160e:	b2db      	uxtb	r3, r3
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401610:	d8f4      	bhi.n	4015fc <mxt_init_device+0x254>
  401612:	0058      	lsls	r0, r3, #1
			malloc(sizeof(struct mxt_report_id_map) *
  401614:	47b0      	blx	r6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401616:	9b01      	ldr	r3, [sp, #4]
	device->report_id_map = (struct mxt_report_id_map *)
  401618:	6160      	str	r0, [r4, #20]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40161a:	799b      	ldrb	r3, [r3, #6]
  40161c:	2b00      	cmp	r3, #0
  40161e:	f43f af65 	beq.w	4014ec <mxt_init_device+0x144>
  401622:	6860      	ldr	r0, [r4, #4]
  401624:	f04f 0c00 	mov.w	ip, #0
  401628:	2701      	movs	r7, #1
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  40162a:	eb0c 0e4c 	add.w	lr, ip, ip, lsl #1
  40162e:	2500      	movs	r5, #0
  401630:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
  401634:	eb00 010e 	add.w	r1, r0, lr
			if (device->object_list[i].num_report_ids != 0) {
  401638:	794b      	ldrb	r3, [r1, #5]
  40163a:	b1a3      	cbz	r3, 401666 <mxt_init_device+0x2be>
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  40163c:	463b      	mov	r3, r7
					device->report_id_map[id_index].object_type =
  40163e:	b218      	sxth	r0, r3
  401640:	6962      	ldr	r2, [r4, #20]
							device->object_list[i].type;
  401642:	7809      	ldrb	r1, [r1, #0]
					id_index++;
  401644:	3301      	adds	r3, #1
					device->report_id_map[id_index].object_type =
  401646:	f802 1010 	strb.w	r1, [r2, r0, lsl #1]
					id_index++;
  40164a:	b2db      	uxtb	r3, r3
					device->report_id_map[id_index].instance = j;
  40164c:	6961      	ldr	r1, [r4, #20]
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  40164e:	1bda      	subs	r2, r3, r7
					device->report_id_map[id_index].instance = j;
  401650:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  401654:	b2d2      	uxtb	r2, r2
					device->report_id_map[id_index].instance = j;
  401656:	704d      	strb	r5, [r1, #1]
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  401658:	6860      	ldr	r0, [r4, #4]
  40165a:	eb00 010e 	add.w	r1, r0, lr
  40165e:	794e      	ldrb	r6, [r1, #5]
  401660:	4296      	cmp	r6, r2
  401662:	d8ec      	bhi.n	40163e <mxt_init_device+0x296>
					id_index++;
  401664:	461f      	mov	r7, r3
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  401666:	3501      	adds	r5, #1
  401668:	790b      	ldrb	r3, [r1, #4]
  40166a:	b2ed      	uxtb	r5, r5
  40166c:	42ab      	cmp	r3, r5
  40166e:	d2e3      	bcs.n	401638 <mxt_init_device+0x290>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401670:	f10c 0c01 	add.w	ip, ip, #1
  401674:	6823      	ldr	r3, [r4, #0]
  401676:	fa5f fc8c 	uxtb.w	ip, ip
  40167a:	7999      	ldrb	r1, [r3, #6]
  40167c:	458c      	cmp	ip, r1
  40167e:	d3d4      	bcc.n	40162a <mxt_init_device+0x282>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401680:	2900      	cmp	r1, #0
  401682:	f43f af33 	beq.w	4014ec <mxt_init_device+0x144>
  401686:	f1a1 0c08 	sub.w	ip, r1, #8
  40168a:	1e4b      	subs	r3, r1, #1
  40168c:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
  401690:	2b43      	cmp	r3, #67	; 0x43
  401692:	f10c 0c01 	add.w	ip, ip, #1
  401696:	ea4f 05cc 	mov.w	r5, ip, lsl #3
  40169a:	b2ed      	uxtb	r5, r5
  40169c:	d970      	bls.n	401780 <mxt_init_device+0x3d8>
  40169e:	f04f 0800 	mov.w	r8, #0
  4016a2:	f100 0735 	add.w	r7, r0, #53	; 0x35
  4016a6:	4642      	mov	r2, r8
  4016a8:	4646      	mov	r6, r8
		tot_report_ids += (device->object_list[i].num_report_ids);
  4016aa:	2300      	movs	r3, #0
  4016ac:	f817 9c18 	ldrb.w	r9, [r7, #-24]
  4016b0:	f817 ac30 	ldrb.w	sl, [r7, #-48]
  4016b4:	f108 0801 	add.w	r8, r8, #1
  4016b8:	469e      	mov	lr, r3
  4016ba:	3730      	adds	r7, #48	; 0x30
  4016bc:	f36a 0307 	bfi	r3, sl, #0, #8
  4016c0:	f817 ac42 	ldrb.w	sl, [r7, #-66]
  4016c4:	f369 0e07 	bfi	lr, r9, #0, #8
  4016c8:	f817 9c5a 	ldrb.w	r9, [r7, #-90]
  4016cc:	f36a 2e0f 	bfi	lr, sl, #8, #8
  4016d0:	f369 230f 	bfi	r3, r9, #8, #8
  4016d4:	f817 ac3c 	ldrb.w	sl, [r7, #-60]
  4016d8:	f817 9c54 	ldrb.w	r9, [r7, #-84]
  4016dc:	f36a 4e17 	bfi	lr, sl, #16, #8
  4016e0:	f817 ac36 	ldrb.w	sl, [r7, #-54]
  4016e4:	f369 4317 	bfi	r3, r9, #16, #8
  4016e8:	f817 9c4e 	ldrb.w	r9, [r7, #-78]
  4016ec:	f36a 6e1f 	bfi	lr, sl, #24, #8
  4016f0:	f006 3a7f 	and.w	sl, r6, #2139062143	; 0x7f7f7f7f
  4016f4:	f369 631f 	bfi	r3, r9, #24, #8
  4016f8:	ea8e 0606 	eor.w	r6, lr, r6
  4016fc:	f00e 397f 	and.w	r9, lr, #2139062143	; 0x7f7f7f7f
  401700:	f003 3b7f 	and.w	fp, r3, #2139062143	; 0x7f7f7f7f
  401704:	fa5f fe88 	uxtb.w	lr, r8
  401708:	4053      	eors	r3, r2
  40170a:	f002 327f 	and.w	r2, r2, #2139062143	; 0x7f7f7f7f
  40170e:	f006 3680 	and.w	r6, r6, #2155905152	; 0x80808080
  401712:	44d1      	add	r9, sl
  401714:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
  401718:	445a      	add	r2, fp
  40171a:	45f4      	cmp	ip, lr
  40171c:	ea89 0606 	eor.w	r6, r9, r6
  401720:	ea82 0203 	eor.w	r2, r2, r3
  401724:	d8c1      	bhi.n	4016aa <mxt_init_device+0x302>
  401726:	f3c2 2307 	ubfx	r3, r2, #8, #8
  40172a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
  40172e:	f3c6 2e07 	ubfx	lr, r6, #8, #8
  401732:	f3c6 4707 	ubfx	r7, r6, #16, #8
  401736:	4413      	add	r3, r2
  401738:	42a9      	cmp	r1, r5
  40173a:	4463      	add	r3, ip
  40173c:	eb03 6312 	add.w	r3, r3, r2, lsr #24
  401740:	4433      	add	r3, r6
  401742:	4473      	add	r3, lr
  401744:	443b      	add	r3, r7
  401746:	eb03 6316 	add.w	r3, r3, r6, lsr #24
  40174a:	b2db      	uxtb	r3, r3
  40174c:	d11a      	bne.n	401784 <mxt_init_device+0x3dc>
	for (i = 0; i < tot_rpt_id; ++i) {
  40174e:	2b00      	cmp	r3, #0
  401750:	f43f aecc 	beq.w	4014ec <mxt_init_device+0x144>
		if (device->report_id_map[i].object_type == object_type) {
  401754:	6961      	ldr	r1, [r4, #20]
  401756:	780a      	ldrb	r2, [r1, #0]
  401758:	2a09      	cmp	r2, #9
  40175a:	d024      	beq.n	4017a6 <mxt_init_device+0x3fe>
  40175c:	2200      	movs	r2, #0
	for (i = 0; i < tot_rpt_id; ++i) {
  40175e:	3201      	adds	r2, #1
  401760:	b2d2      	uxtb	r2, r2
  401762:	429a      	cmp	r2, r3
  401764:	f43f aec2 	beq.w	4014ec <mxt_init_device+0x144>
		if (device->report_id_map[i].object_type == object_type) {
  401768:	f811 0f02 	ldrb.w	r0, [r1, #2]!
  40176c:	2809      	cmp	r0, #9
  40176e:	d1f6      	bne.n	40175e <mxt_init_device+0x3b6>
  401770:	b252      	sxtb	r2, r2
	return STATUS_OK;
  401772:	2000      	movs	r0, #0
	device->multitouch_report_offset = status;
  401774:	7722      	strb	r2, [r4, #28]
}
  401776:	b009      	add	sp, #36	; 0x24
  401778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40177c:	4602      	mov	r2, r0
  40177e:	e73d      	b.n	4015fc <mxt_init_device+0x254>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401780:	2300      	movs	r3, #0
  401782:	461d      	mov	r5, r3
		tot_report_ids += (device->object_list[i].num_report_ids);
  401784:	eb05 0245 	add.w	r2, r5, r5, lsl #1
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401788:	3501      	adds	r5, #1
		tot_report_ids += (device->object_list[i].num_report_ids);
  40178a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40178e:	b2ed      	uxtb	r5, r5
		tot_report_ids += (device->object_list[i].num_report_ids);
  401790:	7952      	ldrb	r2, [r2, #5]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401792:	42a9      	cmp	r1, r5
		tot_report_ids += (device->object_list[i].num_report_ids);
  401794:	4413      	add	r3, r2
  401796:	b2db      	uxtb	r3, r3
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401798:	d8f4      	bhi.n	401784 <mxt_init_device+0x3dc>
  40179a:	e7d8      	b.n	40174e <mxt_init_device+0x3a6>
  40179c:	f04f 30ff 	mov.w	r0, #4294967295
  4017a0:	e6a6      	b.n	4014f0 <mxt_init_device+0x148>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4017a2:	4638      	mov	r0, r7
  4017a4:	e736      	b.n	401614 <mxt_init_device+0x26c>
		if (device->report_id_map[i].object_type == object_type) {
  4017a6:	2200      	movs	r2, #0
  4017a8:	e7e3      	b.n	401772 <mxt_init_device+0x3ca>
  4017aa:	bf00      	nop

004017ac <mxt_get_object_address>:
uint16_t mxt_get_object_address(struct mxt_device *device, uint8_t object_id,
		uint8_t instance)
{
	uint8_t i;

	for (i = 0; i < device->info_object->obj_count; i++) {
  4017ac:	6803      	ldr	r3, [r0, #0]
  4017ae:	799b      	ldrb	r3, [r3, #6]
  4017b0:	b1eb      	cbz	r3, 4017ee <mxt_get_object_address+0x42>
{
  4017b2:	b410      	push	{r4}
		if (object_id == device->object_list[i].type) {
  4017b4:	6844      	ldr	r4, [r0, #4]
  4017b6:	7822      	ldrb	r2, [r4, #0]
  4017b8:	428a      	cmp	r2, r1
  4017ba:	d013      	beq.n	4017e4 <mxt_get_object_address+0x38>
  4017bc:	1e5a      	subs	r2, r3, #1
  4017be:	1da3      	adds	r3, r4, #6
  4017c0:	b2d2      	uxtb	r2, r2
  4017c2:	3201      	adds	r2, #1
  4017c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  4017c8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
  4017cc:	e003      	b.n	4017d6 <mxt_get_object_address+0x2a>
  4017ce:	f813 0b06 	ldrb.w	r0, [r3], #6
  4017d2:	4288      	cmp	r0, r1
  4017d4:	d006      	beq.n	4017e4 <mxt_get_object_address+0x38>
	for (i = 0; i < device->info_object->obj_count; i++) {
  4017d6:	4293      	cmp	r3, r2
		if (object_id == device->object_list[i].type) {
  4017d8:	461c      	mov	r4, r3
	for (i = 0; i < device->info_object->obj_count; i++) {
  4017da:	d1f8      	bne.n	4017ce <mxt_get_object_address+0x22>
			return device->object_list[i].start_address;
		}
	}

	return 0;
  4017dc:	2000      	movs	r0, #0
}
  4017de:	f85d 4b04 	ldr.w	r4, [sp], #4
  4017e2:	4770      	bx	lr
			return device->object_list[i].start_address;
  4017e4:	f8b4 0001 	ldrh.w	r0, [r4, #1]
}
  4017e8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4017ec:	4770      	bx	lr
	return 0;
  4017ee:	4618      	mov	r0, r3
  4017f0:	4770      	bx	lr
  4017f2:	bf00      	nop

004017f4 <mxt_write_config_object>:
 * \param *obj_data Pointer to memory buffer containing object data
 * \result Operation result status code
 */
status_code_t mxt_write_config_object(struct mxt_device *device,
		mxt_memory_adr memory_adr, void *obj_data)
{
  4017f4:	b530      	push	{r4, r5, lr}
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  4017f6:	2300      	movs	r3, #0
{
  4017f8:	b087      	sub	sp, #28
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4017fa:	6804      	ldr	r4, [r0, #0]
	twihs_package_t packet = {
  4017fc:	2502      	movs	r5, #2
  4017fe:	9301      	str	r3, [sp, #4]
  401800:	9203      	str	r2, [sp, #12]
  401802:	0a0a      	lsrs	r2, r1, #8
  401804:	9304      	str	r3, [sp, #16]
  401806:	9305      	str	r3, [sp, #20]
  401808:	9502      	str	r5, [sp, #8]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40180a:	79a3      	ldrb	r3, [r4, #6]
	twihs_package_t packet = {
  40180c:	f88d 1004 	strb.w	r1, [sp, #4]
  401810:	f88d 2005 	strb.w	r2, [sp, #5]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401814:	b1bb      	cbz	r3, 401846 <mxt_write_config_object+0x52>
		if (device->object_list[i].start_address == mem_adr) {
  401816:	6844      	ldr	r4, [r0, #4]
  401818:	f8b4 2001 	ldrh.w	r2, [r4, #1]
  40181c:	428a      	cmp	r2, r1
  40181e:	d020      	beq.n	401862 <mxt_write_config_object+0x6e>
  401820:	1e5a      	subs	r2, r3, #1
  401822:	1da3      	adds	r3, r4, #6
  401824:	b2d2      	uxtb	r2, r2
  401826:	3201      	adds	r2, #1
  401828:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  40182c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
  401830:	e003      	b.n	40183a <mxt_write_config_object+0x46>
  401832:	f8b4 5001 	ldrh.w	r5, [r4, #1]
  401836:	428d      	cmp	r5, r1
  401838:	d013      	beq.n	401862 <mxt_write_config_object+0x6e>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40183a:	429a      	cmp	r2, r3
		if (device->object_list[i].start_address == mem_adr) {
  40183c:	461c      	mov	r4, r3
  40183e:	f103 0306 	add.w	r3, r3, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401842:	d1f6      	bne.n	401832 <mxt_write_config_object+0x3e>
  401844:	2300      	movs	r3, #0
	twihs_package_t packet = {
  401846:	7b04      	ldrb	r4, [r0, #12]
		.chip         = device->mxt_chip_adr,
		.buffer       = obj_data,
		.length       = mxt_get_object_size(device, memory_adr)
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  401848:	a901      	add	r1, sp, #4
  40184a:	4a08      	ldr	r2, [pc, #32]	; (40186c <mxt_write_config_object+0x78>)
  40184c:	6880      	ldr	r0, [r0, #8]
	twihs_package_t packet = {
  40184e:	9304      	str	r3, [sp, #16]
  401850:	f88d 4014 	strb.w	r4, [sp, #20]
	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  401854:	4790      	blx	r2
  401856:	3000      	adds	r0, #0
  401858:	bf18      	it	ne
  40185a:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}

}
  40185c:	4240      	negs	r0, r0
  40185e:	b007      	add	sp, #28
  401860:	bd30      	pop	{r4, r5, pc}
			return (device->object_list[i].size + 1);
  401862:	78e3      	ldrb	r3, [r4, #3]
  401864:	3301      	adds	r3, #1
  401866:	b2db      	uxtb	r3, r3
  401868:	e7ed      	b.n	401846 <mxt_write_config_object+0x52>
  40186a:	bf00      	nop
  40186c:	0040216d 	.word	0x0040216d

00401870 <mxt_write_config_reg>:
 * \param value Value to be written to register
 * \result Operation result status code
 */
status_code_t mxt_write_config_reg(struct mxt_device *device,
		mxt_memory_adr memory_adr, uint8_t value)
{
  401870:	b5f0      	push	{r4, r5, r6, r7, lr}
  401872:	b089      	sub	sp, #36	; 0x24
  401874:	460c      	mov	r4, r1
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  401876:	2300      	movs	r3, #0
  401878:	0a09      	lsrs	r1, r1, #8
  40187a:	7b07      	ldrb	r7, [r0, #12]
  40187c:	2602      	movs	r6, #2
{
  40187e:	f88d 2007 	strb.w	r2, [sp, #7]
	twihs_package_t packet = {
  401882:	f10d 0507 	add.w	r5, sp, #7
  401886:	2201      	movs	r2, #1
  401888:	9303      	str	r3, [sp, #12]
  40188a:	9307      	str	r3, [sp, #28]
  40188c:	f88d 100d 	strb.w	r1, [sp, #13]
		.chip         = device->mxt_chip_adr,
		.buffer       = &value,
		.length       = sizeof(value)
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  401890:	a903      	add	r1, sp, #12
  401892:	4b08      	ldr	r3, [pc, #32]	; (4018b4 <mxt_write_config_reg+0x44>)
  401894:	6880      	ldr	r0, [r0, #8]
	twihs_package_t packet = {
  401896:	f88d 400c 	strb.w	r4, [sp, #12]
  40189a:	f88d 701c 	strb.w	r7, [sp, #28]
  40189e:	9604      	str	r6, [sp, #16]
  4018a0:	9505      	str	r5, [sp, #20]
  4018a2:	9206      	str	r2, [sp, #24]
	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  4018a4:	4798      	blx	r3
  4018a6:	3000      	adds	r0, #0
  4018a8:	bf18      	it	ne
  4018aa:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}
}
  4018ac:	4240      	negs	r0, r0
  4018ae:	b009      	add	sp, #36	; 0x24
  4018b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4018b2:	bf00      	nop
  4018b4:	0040216d 	.word	0x0040216d

004018b8 <mxt_read_message>:
 * \param *message Pointer to mxt_message instance
 * \return Operation result status code
 */
status_code_t mxt_read_message(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
  4018b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < device->info_object->obj_count; i++) {
  4018ba:	6803      	ldr	r3, [r0, #0]
{
  4018bc:	b087      	sub	sp, #28
	for (i = 0; i < device->info_object->obj_count; i++) {
  4018be:	799b      	ldrb	r3, [r3, #6]
  4018c0:	2b00      	cmp	r3, #0
  4018c2:	d033      	beq.n	40192c <mxt_read_message+0x74>
		if (object_id == device->object_list[i].type) {
  4018c4:	6845      	ldr	r5, [r0, #4]
  4018c6:	782a      	ldrb	r2, [r5, #0]
  4018c8:	2a05      	cmp	r2, #5
  4018ca:	d02a      	beq.n	401922 <mxt_read_message+0x6a>
  4018cc:	1e5a      	subs	r2, r3, #1
  4018ce:	1dab      	adds	r3, r5, #6
  4018d0:	b2d2      	uxtb	r2, r2
  4018d2:	3201      	adds	r2, #1
  4018d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  4018d8:	eb05 0242 	add.w	r2, r5, r2, lsl #1
  4018dc:	e003      	b.n	4018e6 <mxt_read_message+0x2e>
  4018de:	f813 4b06 	ldrb.w	r4, [r3], #6
  4018e2:	2c05      	cmp	r4, #5
  4018e4:	d01d      	beq.n	401922 <mxt_read_message+0x6a>
	for (i = 0; i < device->info_object->obj_count; i++) {
  4018e6:	4293      	cmp	r3, r2
		if (object_id == device->object_list[i].type) {
  4018e8:	461d      	mov	r5, r3
	for (i = 0; i < device->info_object->obj_count; i++) {
  4018ea:	d1f8      	bne.n	4018de <mxt_read_message+0x26>
  4018ec:	2300      	movs	r3, #0
  4018ee:	461f      	mov	r7, r3
	uint16_t obj_adr = mxt_get_object_address(device,
			MXT_GEN_MESSAGEPROCESSOR_T5, 0);

	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  4018f0:	2200      	movs	r2, #0
  4018f2:	7b04      	ldrb	r4, [r0, #12]
  4018f4:	2602      	movs	r6, #2
  4018f6:	2509      	movs	r5, #9
  4018f8:	9201      	str	r2, [sp, #4]
  4018fa:	9205      	str	r2, [sp, #20]
  4018fc:	9103      	str	r1, [sp, #12]
		.buffer       = message,
		.length       = MXT_TWI_MSG_SIZE_T5
	};

	/* Read information from the slave */
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4018fe:	a901      	add	r1, sp, #4
  401900:	4a0b      	ldr	r2, [pc, #44]	; (401930 <mxt_read_message+0x78>)
  401902:	6880      	ldr	r0, [r0, #8]
	twihs_package_t packet = {
  401904:	f88d 7004 	strb.w	r7, [sp, #4]
  401908:	f88d 3005 	strb.w	r3, [sp, #5]
  40190c:	9602      	str	r6, [sp, #8]
  40190e:	9504      	str	r5, [sp, #16]
  401910:	f88d 4014 	strb.w	r4, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  401914:	4790      	blx	r2
  401916:	3000      	adds	r0, #0
  401918:	bf18      	it	ne
  40191a:	2001      	movne	r0, #1
		return mxt_validate_message(&packet);
#else
		return STATUS_OK;
#endif
	}
}
  40191c:	4240      	negs	r0, r0
  40191e:	b007      	add	sp, #28
  401920:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return device->object_list[i].start_address;
  401922:	f8b5 3001 	ldrh.w	r3, [r5, #1]
  401926:	b2df      	uxtb	r7, r3
  401928:	0a1b      	lsrs	r3, r3, #8
  40192a:	e7e1      	b.n	4018f0 <mxt_read_message+0x38>
	for (i = 0; i < device->info_object->obj_count; i++) {
  40192c:	461f      	mov	r7, r3
  40192e:	e7df      	b.n	4018f0 <mxt_read_message+0x38>
  401930:	004020b9 	.word	0x004020b9

00401934 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  401934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  401938:	b990      	cbnz	r0, 401960 <_read+0x2c>
		return -1;
	}

	for (; len > 0; --len) {
  40193a:	2a00      	cmp	r2, #0
  40193c:	4690      	mov	r8, r2
  40193e:	dd0d      	ble.n	40195c <_read+0x28>
  401940:	460c      	mov	r4, r1
  401942:	188f      	adds	r7, r1, r2
  401944:	4e08      	ldr	r6, [pc, #32]	; (401968 <_read+0x34>)
  401946:	4d09      	ldr	r5, [pc, #36]	; (40196c <_read+0x38>)
		ptr_get(stdio_base, ptr);
  401948:	4621      	mov	r1, r4
		ptr++;
  40194a:	3401      	adds	r4, #1
		ptr_get(stdio_base, ptr);
  40194c:	6830      	ldr	r0, [r6, #0]
  40194e:	682b      	ldr	r3, [r5, #0]
  401950:	4798      	blx	r3
	for (; len > 0; --len) {
  401952:	42bc      	cmp	r4, r7
  401954:	d1f8      	bne.n	401948 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  401956:	4640      	mov	r0, r8
  401958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (; len > 0; --len) {
  40195c:	4680      	mov	r8, r0
  40195e:	e7fa      	b.n	401956 <_read+0x22>
		return -1;
  401960:	f04f 38ff 	mov.w	r8, #4294967295
  401964:	e7f7      	b.n	401956 <_read+0x22>
  401966:	bf00      	nop
  401968:	20453c14 	.word	0x20453c14
  40196c:	20453c0c 	.word	0x20453c0c

00401970 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  401970:	3801      	subs	r0, #1
  401972:	2802      	cmp	r0, #2
  401974:	d81e      	bhi.n	4019b4 <_write+0x44>
{
  401976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40197a:	4615      	mov	r5, r2
		return -1;
	}

	for (; len != 0; --len) {
  40197c:	b1ba      	cbz	r2, 4019ae <_write+0x3e>
  40197e:	460e      	mov	r6, r1
  401980:	460c      	mov	r4, r1
  401982:	f8df 803c 	ldr.w	r8, [pc, #60]	; 4019c0 <_write+0x50>
  401986:	4f0d      	ldr	r7, [pc, #52]	; (4019bc <_write+0x4c>)
  401988:	e001      	b.n	40198e <_write+0x1e>
  40198a:	3d01      	subs	r5, #1
  40198c:	d00d      	beq.n	4019aa <_write+0x3a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40198e:	f814 1b01 	ldrb.w	r1, [r4], #1
  401992:	f8d8 0000 	ldr.w	r0, [r8]
  401996:	683b      	ldr	r3, [r7, #0]
  401998:	4798      	blx	r3
  40199a:	2800      	cmp	r0, #0
  40199c:	eba4 0006 	sub.w	r0, r4, r6
  4019a0:	daf3      	bge.n	40198a <_write+0x1a>
		return -1;
  4019a2:	f04f 30ff 	mov.w	r0, #4294967295
  4019a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4019aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (; len != 0; --len) {
  4019ae:	4610      	mov	r0, r2
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  4019b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4019b4:	f04f 30ff 	mov.w	r0, #4294967295
}
  4019b8:	4770      	bx	lr
  4019ba:	bf00      	nop
  4019bc:	20453c10 	.word	0x20453c10
  4019c0:	20453c14 	.word	0x20453c14

004019c4 <wm8904_write_register>:
 *
 * \param uc_register_address Register address to write
 * \param us_data Data to write.
 */
void wm8904_write_register(uint8_t uc_register_address, uint16_t us_data)
{
  4019c4:	b570      	push	{r4, r5, r6, lr}
  4019c6:	460b      	mov	r3, r1
  4019c8:	b086      	sub	sp, #24
	uint8_t uc_temp_data[2];
	twihs_packet_t packet;

	uc_temp_data[0] = (us_data & 0xff00) >> 8;
  4019ca:	0a0e      	lsrs	r6, r1, #8

	packet.addr[0]     = uc_register_address;
	packet.addr_length = 0x1;
	packet.buffer      = uc_temp_data;
	packet.length      = 0x2;
	packet.chip        = WM8904_SLAVE_ADDRESS;
  4019cc:	221a      	movs	r2, #26
	uc_temp_data[1] = us_data & 0xff;
  4019ce:	f88d 3001 	strb.w	r3, [sp, #1]
	packet.addr_length = 0x1;
  4019d2:	2501      	movs	r5, #1
	packet.length      = 0x2;
  4019d4:	2402      	movs	r4, #2

	twihs_master_write(WM8904_TWIHS, &packet);
  4019d6:	a901      	add	r1, sp, #4
  4019d8:	4b07      	ldr	r3, [pc, #28]	; (4019f8 <wm8904_write_register+0x34>)
	packet.addr[0]     = uc_register_address;
  4019da:	f88d 0004 	strb.w	r0, [sp, #4]
	twihs_master_write(WM8904_TWIHS, &packet);
  4019de:	4807      	ldr	r0, [pc, #28]	; (4019fc <wm8904_write_register+0x38>)
	uc_temp_data[0] = (us_data & 0xff00) >> 8;
  4019e0:	f88d 6000 	strb.w	r6, [sp]
	packet.addr_length = 0x1;
  4019e4:	9502      	str	r5, [sp, #8]
	packet.buffer      = uc_temp_data;
  4019e6:	f8cd d00c 	str.w	sp, [sp, #12]
	packet.length      = 0x2;
  4019ea:	9404      	str	r4, [sp, #16]
	packet.chip        = WM8904_SLAVE_ADDRESS;
  4019ec:	f88d 2014 	strb.w	r2, [sp, #20]
	twihs_master_write(WM8904_TWIHS, &packet);
  4019f0:	4798      	blx	r3
}
  4019f2:	b006      	add	sp, #24
  4019f4:	bd70      	pop	{r4, r5, r6, pc}
  4019f6:	bf00      	nop
  4019f8:	0040216d 	.word	0x0040216d
  4019fc:	40018000 	.word	0x40018000

00401a00 <wm8904_read_register>:
 *
 * \param uc_register_address Register address to write
 * \retun Register value.
 */
uint16_t wm8904_read_register(uint8_t uc_register_address)
{
  401a00:	b530      	push	{r4, r5, lr}
  401a02:	b087      	sub	sp, #28

	packet.addr[0]     = uc_register_address;
	packet.addr_length = 0x1;
	packet.buffer      = uc_temp_data;
	packet.length      = 0x2;
	packet.chip        = WM8904_SLAVE_ADDRESS;
  401a04:	221a      	movs	r2, #26
	packet.addr_length = 0x1;
  401a06:	2501      	movs	r5, #1
	packet.length      = 0x2;
  401a08:	2402      	movs	r4, #2
	packet.addr[0]     = uc_register_address;
  401a0a:	f88d 0004 	strb.w	r0, [sp, #4]

	twihs_master_read(WM8904_TWIHS, &packet);
  401a0e:	a901      	add	r1, sp, #4
  401a10:	4b08      	ldr	r3, [pc, #32]	; (401a34 <wm8904_read_register+0x34>)
  401a12:	4809      	ldr	r0, [pc, #36]	; (401a38 <wm8904_read_register+0x38>)
	packet.addr_length = 0x1;
  401a14:	9502      	str	r5, [sp, #8]
	packet.buffer      = uc_temp_data;
  401a16:	f8cd d00c 	str.w	sp, [sp, #12]
	packet.length      = 0x2;
  401a1a:	9404      	str	r4, [sp, #16]
	packet.chip        = WM8904_SLAVE_ADDRESS;
  401a1c:	f88d 2014 	strb.w	r2, [sp, #20]
	twihs_master_read(WM8904_TWIHS, &packet);
  401a20:	4798      	blx	r3
	us_data = (((uint16_t)uc_temp_data[0] << 8) & 0xff00) | uc_temp_data[1];
  401a22:	f89d 0000 	ldrb.w	r0, [sp]
  401a26:	f89d 3001 	ldrb.w	r3, [sp, #1]

	return us_data;
}
  401a2a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  401a2e:	b007      	add	sp, #28
  401a30:	bd30      	pop	{r4, r5, pc}
  401a32:	bf00      	nop
  401a34:	004020b9 	.word	0x004020b9
  401a38:	40018000 	.word	0x40018000

00401a3c <wm8904_twi_init>:
 * \brief Initialize TWIHS connect to WM8904.
 *
 * \retun TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t wm8904_twi_init(void)
{
  401a3c:	b510      	push	{r4, lr}
	pio_configure_pin(WM8904_TK_PIO, WM8904_TK_FLAGS);
  401a3e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
{
  401a42:	b084      	sub	sp, #16
	pio_configure_pin(WM8904_TK_PIO, WM8904_TK_FLAGS);
  401a44:	4c15      	ldr	r4, [pc, #84]	; (401a9c <wm8904_twi_init+0x60>)
  401a46:	2021      	movs	r0, #33	; 0x21
  401a48:	47a0      	blx	r4
	pio_configure_pin(WM8904_TF_PIO, WM8904_TF_FLAGS);
  401a4a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401a4e:	2020      	movs	r0, #32
  401a50:	47a0      	blx	r4
	pio_configure_pin(WM8904_TD_PIO, WM8904_TD_FLAGS);
  401a52:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401a56:	207a      	movs	r0, #122	; 0x7a
  401a58:	47a0      	blx	r4
	pio_configure_pin(WM8904_RK_PIO, WM8904_RK_FLAGS);
  401a5a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401a5e:	2016      	movs	r0, #22
  401a60:	47a0      	blx	r4
	pio_configure_pin(WM8904_RF_PIO, WM8904_RF_FLAGS);
  401a62:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401a66:	2078      	movs	r0, #120	; 0x78
  401a68:	47a0      	blx	r4
	pio_configure_pin(WM8904_RD_PIO, WM8904_RD_FLAGS);
  401a6a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401a6e:	200a      	movs	r0, #10
  401a70:	47a0      	blx	r4
	pio_configure_pin(WM8904_PCK2_PIO, WM8904_PCK2_FLAGS);
  401a72:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401a76:	2012      	movs	r0, #18
  401a78:	47a0      	blx	r4
	p_opt->smbus      = 0;
  401a7a:	2200      	movs	r2, #0
	p_opt->master_clk = sysclk_get_peripheral_hz();
  401a7c:	4908      	ldr	r1, [pc, #32]	; (401aa0 <wm8904_twi_init+0x64>)
  401a7e:	2013      	movs	r0, #19

	twihs_options_t opt;
	opt.master_clk = sysclk_get_cpu_hz();
	opt.speed = WM8904_TWIHS_CLK;
  401a80:	4c08      	ldr	r4, [pc, #32]	; (401aa4 <wm8904_twi_init+0x68>)
  401a82:	4b09      	ldr	r3, [pc, #36]	; (401aa8 <wm8904_twi_init+0x6c>)
  401a84:	9101      	str	r1, [sp, #4]
	p_opt->smbus      = 0;
  401a86:	f88d 200d 	strb.w	r2, [sp, #13]
  401a8a:	9402      	str	r4, [sp, #8]
  401a8c:	4798      	blx	r3
	return (twihs_master_init(p_twihs, p_opt));
  401a8e:	a901      	add	r1, sp, #4
  401a90:	4b06      	ldr	r3, [pc, #24]	; (401aac <wm8904_twi_init+0x70>)
  401a92:	4807      	ldr	r0, [pc, #28]	; (401ab0 <wm8904_twi_init+0x74>)
  401a94:	4798      	blx	r3
	return twihs_master_setup(WM8904_TWIHS, &opt);
}
  401a96:	b004      	add	sp, #16
  401a98:	bd10      	pop	{r4, pc}
  401a9a:	bf00      	nop
  401a9c:	004027f9 	.word	0x004027f9
  401aa0:	08f0d180 	.word	0x08f0d180
  401aa4:	00061a80 	.word	0x00061a80
  401aa8:	00402e51 	.word	0x00402e51
  401aac:	00401fd9 	.word	0x00401fd9
  401ab0:	40018000 	.word	0x40018000

00401ab4 <ili9488_set_window>:
 * \Param y start position.
 * \Param width  Width of window.
 * \Param height Height of window.
 */
void ili9488_set_window(uint16_t x, uint16_t y, uint16_t width, uint16_t height )
{
  401ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ili9488_color_t buf[4];

	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	col_start  =  x ;
	col_end    =  width + x - 1;
  401ab8:	3a01      	subs	r2, #1
{
  401aba:	460c      	mov	r4, r1

	row_start = y ;
	row_end   = height + y - 1;
  401abc:	3b01      	subs	r3, #1
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401abe:	4f29      	ldr	r7, [pc, #164]	; (401b64 <ili9488_set_window+0xb0>)
{
  401ac0:	b085      	sub	sp, #20
	col_end    =  width + x - 1;
  401ac2:	4402      	add	r2, r0
{
  401ac4:	4605      	mov	r5, r0
	row_end   = height + y - 1;
  401ac6:	4423      	add	r3, r4
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401ac8:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 401b6c <ili9488_set_window+0xb8>
  401acc:	4638      	mov	r0, r7
  401ace:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000

	buf[0] = get_8b_to_16b(col_start);
	buf[1] = get_0b_to_8b(col_start);
	buf[2] = get_8b_to_16b(col_end);
  401ad2:	f3c2 2a07 	ubfx	sl, r2, #8, #8
	buf[3] = get_0b_to_8b(col_end);
  401ad6:	b2d6      	uxtb	r6, r2
	col_end    =  width + x - 1;
  401ad8:	f8ad 200a 	strh.w	r2, [sp, #10]
	row_end   = height + y - 1;
  401adc:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf[0] = get_8b_to_16b(col_start);
  401ae0:	ea4f 2b15 	mov.w	fp, r5, lsr #8
	col_start  =  x ;
  401ae4:	f8ad 5008 	strh.w	r5, [sp, #8]
	buf[1] = get_0b_to_8b(col_start);
  401ae8:	b2ed      	uxtb	r5, r5
	row_start = y ;
  401aea:	f8ad 400c 	strh.w	r4, [sp, #12]
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  401aee:	f04f 44c6 	mov.w	r4, #1660944384	; 0x63000000
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401af2:	47c0      	blx	r8
  401af4:	222a      	movs	r2, #42	; 0x2a
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401af6:	4b1c      	ldr	r3, [pc, #112]	; (401b68 <ili9488_set_window+0xb4>)
  401af8:	4638      	mov	r0, r7
  401afa:	8022      	strh	r2, [r4, #0]
  401afc:	f04f 0900 	mov.w	r9, #0
  401b00:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401b04:	9301      	str	r3, [sp, #4]
  401b06:	4798      	blx	r3
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  401b08:	f8a4 b000 	strh.w	fp, [r4]
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401b0c:	4638      	mov	r0, r7
  401b0e:	8025      	strh	r5, [r4, #0]
  401b10:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401b14:	f8a4 a000 	strh.w	sl, [r4]
  401b18:	8026      	strh	r6, [r4, #0]
  401b1a:	47c0      	blx	r8
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  401b1c:	f8a4 9000 	strh.w	r9, [r4]
  401b20:	4638      	mov	r0, r7
  401b22:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);

	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(row_start);
  401b26:	f89d b00d 	ldrb.w	fp, [sp, #13]
	buf[1] = get_0b_to_8b(row_start);
  401b2a:	f89d a00c 	ldrb.w	sl, [sp, #12]
	buf[2] = get_8b_to_16b(row_end);
  401b2e:	f89d 600f 	ldrb.w	r6, [sp, #15]
	buf[3] = get_0b_to_8b(row_end);
  401b32:	f89d 500e 	ldrb.w	r5, [sp, #14]
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401b36:	47c0      	blx	r8
  401b38:	222b      	movs	r2, #43	; 0x2b
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401b3a:	4638      	mov	r0, r7
  401b3c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401b40:	8022      	strh	r2, [r4, #0]
  401b42:	9b01      	ldr	r3, [sp, #4]
  401b44:	4798      	blx	r3
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401b46:	4638      	mov	r0, r7
  401b48:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  401b4c:	f8a4 b000 	strh.w	fp, [r4]
  401b50:	f8a4 a000 	strh.w	sl, [r4]
  401b54:	8026      	strh	r6, [r4, #0]
  401b56:	8025      	strh	r5, [r4, #0]
  401b58:	47c0      	blx	r8
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  401b5a:	f8a4 9000 	strh.w	r9, [r4]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
}
  401b5e:	b005      	add	sp, #20
  401b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401b64:	400e1200 	.word	0x400e1200
  401b68:	004026bd 	.word	0x004026bd
  401b6c:	004026c1 	.word	0x004026c1

00401b70 <ili9488_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9488_display_on(void)
{
  401b70:	b508      	push	{r3, lr}
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401b72:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401b76:	4b04      	ldr	r3, [pc, #16]	; (401b88 <ili9488_display_on+0x18>)
  401b78:	4804      	ldr	r0, [pc, #16]	; (401b8c <ili9488_display_on+0x1c>)
  401b7a:	4798      	blx	r3
  401b7c:	f04f 43c6 	mov.w	r3, #1660944384	; 0x63000000
  401b80:	2229      	movs	r2, #41	; 0x29
  401b82:	801a      	strh	r2, [r3, #0]
  401b84:	bd08      	pop	{r3, pc}
  401b86:	bf00      	nop
  401b88:	004026c1 	.word	0x004026c1
  401b8c:	400e1200 	.word	0x400e1200

00401b90 <ili9488_set_cursor_position>:
 *
 * \param x X coordinate of upper-left corner on LCD.
 * \param y Y coordinate of upper-left corner on LCD.
 */
void ili9488_set_cursor_position(uint16_t x, uint16_t y)
{
  401b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401b94:	4d21      	ldr	r5, [pc, #132]	; (401c1c <ili9488_set_cursor_position+0x8c>)
{
  401b96:	b082      	sub	sp, #8
  401b98:	4606      	mov	r6, r0
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401b9a:	4f21      	ldr	r7, [pc, #132]	; (401c20 <ili9488_set_cursor_position+0x90>)
{
  401b9c:	f8ad 1004 	strh.w	r1, [sp, #4]
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401ba0:	4628      	mov	r0, r5
  401ba2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401ba6:	f04f 44c6 	mov.w	r4, #1660944384	; 0x63000000
{
  401baa:	f8ad 6006 	strh.w	r6, [sp, #6]
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401bae:	47b8      	blx	r7
  401bb0:	232a      	movs	r3, #42	; 0x2a
	uint32_t cnt = 0;

	ili9488_color_t buf[4];
	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	buf[0] = get_8b_to_16b(x);
  401bb2:	ea4f 2916 	mov.w	r9, r6, lsr #8
	buf[1] = get_0b_to_8b(x);
  401bb6:	b2f6      	uxtb	r6, r6
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401bb8:	4628      	mov	r0, r5
  401bba:	8023      	strh	r3, [r4, #0]
  401bbc:	f04f 0800 	mov.w	r8, #0
  401bc0:	f8df a060 	ldr.w	sl, [pc, #96]	; 401c24 <ili9488_set_cursor_position+0x94>
  401bc4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401bc8:	47d0      	blx	sl
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  401bca:	f8a4 9000 	strh.w	r9, [r4]
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401bce:	4628      	mov	r0, r5
  401bd0:	8026      	strh	r6, [r4, #0]
  401bd2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401bd6:	f8a4 9000 	strh.w	r9, [r4]
  401bda:	8026      	strh	r6, [r4, #0]
  401bdc:	47b8      	blx	r7
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  401bde:	f8a4 8000 	strh.w	r8, [r4]
  401be2:	4628      	mov	r0, r5
  401be4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);


	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(y);
  401be8:	f89d 9005 	ldrb.w	r9, [sp, #5]
	buf[1] = get_0b_to_8b(y);
  401bec:	f89d 6004 	ldrb.w	r6, [sp, #4]
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401bf0:	47b8      	blx	r7
  401bf2:	232b      	movs	r3, #43	; 0x2b
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401bf4:	4628      	mov	r0, r5
  401bf6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401bfa:	8023      	strh	r3, [r4, #0]
  401bfc:	47d0      	blx	sl
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401bfe:	4628      	mov	r0, r5
  401c00:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  401c04:	f8a4 9000 	strh.w	r9, [r4]
  401c08:	8026      	strh	r6, [r4, #0]
  401c0a:	f8a4 9000 	strh.w	r9, [r4]
  401c0e:	8026      	strh	r6, [r4, #0]
  401c10:	47b8      	blx	r7
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  401c12:	f8a4 8000 	strh.w	r8, [r4]
	buf[2] = get_8b_to_16b(y);
	buf[3] = get_0b_to_8b(y);
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
}
  401c16:	b002      	add	sp, #8
  401c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401c1c:	400e1200 	.word	0x400e1200
  401c20:	004026c1 	.word	0x004026c1
  401c24:	004026bd 	.word	0x004026bd

00401c28 <ili9488_init>:
{
  401c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401c2c:	4607      	mov	r7, r0
	pmc_enable_periph_clk(ID_SMC);
  401c2e:	4b40      	ldr	r3, [pc, #256]	; (401d30 <ili9488_init+0x108>)
  401c30:	2009      	movs	r0, #9
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401c32:	4d40      	ldr	r5, [pc, #256]	; (401d34 <ili9488_init+0x10c>)
	pmc_enable_periph_clk(ID_SMC);
  401c34:	4798      	blx	r3
	smc_set_setup_timing(SMC, BOARD_ILI9488_EBI_NPCS, SMC_SETUP_NWE_SETUP(0)
  401c36:	2200      	movs	r2, #0
  401c38:	2103      	movs	r1, #3
  401c3a:	483f      	ldr	r0, [pc, #252]	; (401d38 <ili9488_init+0x110>)
  401c3c:	4b3f      	ldr	r3, [pc, #252]	; (401d3c <ili9488_init+0x114>)
  401c3e:	f04f 44c6 	mov.w	r4, #1660944384	; 0x63000000
  401c42:	4798      	blx	r3
	smc_set_pulse_timing(SMC, BOARD_ILI9488_EBI_NPCS , SMC_PULSE_NWE_PULSE(3)
  401c44:	4a3e      	ldr	r2, [pc, #248]	; (401d40 <ili9488_init+0x118>)
  401c46:	2103      	movs	r1, #3
  401c48:	483b      	ldr	r0, [pc, #236]	; (401d38 <ili9488_init+0x110>)
  401c4a:	4b3e      	ldr	r3, [pc, #248]	; (401d44 <ili9488_init+0x11c>)
  401c4c:	f04f 0936 	mov.w	r9, #54	; 0x36
  401c50:	4798      	blx	r3
	smc_set_cycle_timing(SMC, BOARD_ILI9488_EBI_NPCS, SMC_CYCLE_NWE_CYCLE(0x4)
  401c52:	4a3d      	ldr	r2, [pc, #244]	; (401d48 <ili9488_init+0x120>)
  401c54:	2103      	movs	r1, #3
  401c56:	4838      	ldr	r0, [pc, #224]	; (401d38 <ili9488_init+0x110>)
  401c58:	4b3c      	ldr	r3, [pc, #240]	; (401d4c <ili9488_init+0x124>)
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  401c5a:	f04f 0848 	mov.w	r8, #72	; 0x48
  401c5e:	4798      	blx	r3
	smc_set_mode(SMC, BOARD_ILI9488_EBI_NPCS, SMC_MODE_READ_MODE
  401c60:	4a3b      	ldr	r2, [pc, #236]	; (401d50 <ili9488_init+0x128>)
  401c62:	4b3c      	ldr	r3, [pc, #240]	; (401d54 <ili9488_init+0x12c>)
  401c64:	2103      	movs	r1, #3
  401c66:	4834      	ldr	r0, [pc, #208]	; (401d38 <ili9488_init+0x110>)
  401c68:	4798      	blx	r3
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401c6a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401c6e:	483a      	ldr	r0, [pc, #232]	; (401d58 <ili9488_init+0x130>)
  401c70:	47a8      	blx	r5
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  401c72:	2301      	movs	r3, #1
  401c74:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401c78:	4837      	ldr	r0, [pc, #220]	; (401d58 <ili9488_init+0x130>)
  401c7a:	8023      	strh	r3, [r4, #0]
  401c7c:	47a8      	blx	r5
  401c7e:	2311      	movs	r3, #17
  401c80:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401c84:	4834      	ldr	r0, [pc, #208]	; (401d58 <ili9488_init+0x130>)
  401c86:	8023      	strh	r3, [r4, #0]
  401c88:	47a8      	blx	r5
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401c8a:	4e34      	ldr	r6, [pc, #208]	; (401d5c <ili9488_init+0x134>)
  401c8c:	f8a4 9000 	strh.w	r9, [r4]
  401c90:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401c94:	4830      	ldr	r0, [pc, #192]	; (401d58 <ili9488_init+0x130>)
  401c96:	47b0      	blx	r6
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  401c98:	f8a4 8000 	strh.w	r8, [r4]
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401c9c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401ca0:	482d      	ldr	r0, [pc, #180]	; (401d58 <ili9488_init+0x130>)
  401ca2:	47a8      	blx	r5
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  401ca4:	23cf      	movs	r3, #207	; 0xcf
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401ca6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401caa:	482b      	ldr	r0, [pc, #172]	; (401d58 <ili9488_init+0x130>)
  401cac:	8023      	strh	r3, [r4, #0]
  401cae:	47b0      	blx	r6
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  401cb0:	2304      	movs	r3, #4
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401cb2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401cb6:	4828      	ldr	r0, [pc, #160]	; (401d58 <ili9488_init+0x130>)
  401cb8:	8023      	strh	r3, [r4, #0]
  401cba:	47a8      	blx	r5
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  401cbc:	233a      	movs	r3, #58	; 0x3a
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401cbe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401cc2:	4825      	ldr	r0, [pc, #148]	; (401d58 <ili9488_init+0x130>)
  401cc4:	8023      	strh	r3, [r4, #0]
  401cc6:	47b0      	blx	r6
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  401cc8:	2305      	movs	r3, #5
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401cca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401cce:	4822      	ldr	r0, [pc, #136]	; (401d58 <ili9488_init+0x130>)
  401cd0:	8023      	strh	r3, [r4, #0]
  401cd2:	47a8      	blx	r5
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  401cd4:	2312      	movs	r3, #18
  401cd6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401cda:	481f      	ldr	r0, [pc, #124]	; (401d58 <ili9488_init+0x130>)
  401cdc:	8023      	strh	r3, [r4, #0]
  401cde:	47a8      	blx	r5
  401ce0:	2329      	movs	r3, #41	; 0x29
  401ce2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401ce6:	481c      	ldr	r0, [pc, #112]	; (401d58 <ili9488_init+0x130>)
  401ce8:	8023      	strh	r3, [r4, #0]
  401cea:	47a8      	blx	r5
  401cec:	f8a4 9000 	strh.w	r9, [r4]
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401cf0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401cf4:	4818      	ldr	r0, [pc, #96]	; (401d58 <ili9488_init+0x130>)
  401cf6:	47b0      	blx	r6
	ili9488_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  401cf8:	2100      	movs	r1, #0
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  401cfa:	f8a4 8000 	strh.w	r8, [r4]
  401cfe:	4608      	mov	r0, r1
  401d00:	88bb      	ldrh	r3, [r7, #4]
  401d02:	883a      	ldrh	r2, [r7, #0]
  401d04:	4c16      	ldr	r4, [pc, #88]	; (401d60 <ili9488_init+0x138>)
  401d06:	47a0      	blx	r4
  401d08:	8938      	ldrh	r0, [r7, #8]
  401d0a:	2200      	movs	r2, #0
	ili9488_set_foreground_color(p_opt->foreground_color);
  401d0c:	4b15      	ldr	r3, [pc, #84]	; (401d64 <ili9488_init+0x13c>)
  401d0e:	f360 020f 	bfi	r2, r0, #0, #16
  401d12:	f503 7120 	add.w	r1, r3, #640	; 0x280
  401d16:	f360 421f 	bfi	r2, r0, #16, #16
		g_ul_pixel_cache[i] = ul_color;
  401d1a:	f843 2b04 	str.w	r2, [r3], #4
  401d1e:	428b      	cmp	r3, r1
  401d20:	d1fb      	bne.n	401d1a <ili9488_init+0xf2>
	ili9488_set_cursor_position(0, 0);
  401d22:	2100      	movs	r1, #0
  401d24:	4b10      	ldr	r3, [pc, #64]	; (401d68 <ili9488_init+0x140>)
  401d26:	4608      	mov	r0, r1
  401d28:	4798      	blx	r3
}
  401d2a:	2000      	movs	r0, #0
  401d2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401d30:	00402e51 	.word	0x00402e51
  401d34:	004026c1 	.word	0x004026c1
  401d38:	40080000 	.word	0x40080000
  401d3c:	00401e99 	.word	0x00401e99
  401d40:	0a0a0403 	.word	0x0a0a0403
  401d44:	00401ea1 	.word	0x00401ea1
  401d48:	000a0004 	.word	0x000a0004
  401d4c:	00401ea9 	.word	0x00401ea9
  401d50:	000f1003 	.word	0x000f1003
  401d54:	00401eb1 	.word	0x00401eb1
  401d58:	400e1200 	.word	0x400e1200
  401d5c:	004026bd 	.word	0x004026bd
  401d60:	00401ab5 	.word	0x00401ab5
  401d64:	2042b234 	.word	0x2042b234
  401d68:	00401b91 	.word	0x00401b91

00401d6c <ili9488_write_brightness>:
 * Configures the display for a given brightness value
 *
 * \param us_value brightness value need to written.
 */
void ili9488_write_brightness(uint16_t us_value)
{
  401d6c:	b570      	push	{r4, r5, r6, lr}
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401d6e:	4d09      	ldr	r5, [pc, #36]	; (401d94 <ili9488_write_brightness+0x28>)
{
  401d70:	4606      	mov	r6, r0
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401d72:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401d76:	4b08      	ldr	r3, [pc, #32]	; (401d98 <ili9488_write_brightness+0x2c>)
  401d78:	4628      	mov	r0, r5
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  401d7a:	f04f 44c6 	mov.w	r4, #1660944384	; 0x63000000
  401d7e:	4798      	blx	r3
  401d80:	2351      	movs	r3, #81	; 0x51
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401d82:	4628      	mov	r0, r5
  401d84:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401d88:	8023      	strh	r3, [r4, #0]
  401d8a:	4b04      	ldr	r3, [pc, #16]	; (401d9c <ili9488_write_brightness+0x30>)
  401d8c:	4798      	blx	r3
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  401d8e:	8026      	strh	r6, [r4, #0]
  401d90:	bd70      	pop	{r4, r5, r6, pc}
  401d92:	bf00      	nop
  401d94:	400e1200 	.word	0x400e1200
  401d98:	004026c1 	.word	0x004026c1
  401d9c:	004026bd 	.word	0x004026bd

00401da0 <ili9488_set_limits>:
 * \param end_x The x coordinate of the bottom right corner
 * \param end_y The y coordinate of the bottom right corner
 */
void ili9488_set_limits(ili9488_coord_t start_x, ili9488_coord_t start_y,
		ili9488_coord_t end_x, ili9488_coord_t end_y)
{
  401da0:	b4f0      	push	{r4, r5, r6, r7}
	limit_start_x = start_x;
  401da2:	4f05      	ldr	r7, [pc, #20]	; (401db8 <ili9488_set_limits+0x18>)
	limit_start_y = start_y;
  401da4:	4e05      	ldr	r6, [pc, #20]	; (401dbc <ili9488_set_limits+0x1c>)
	limit_end_x = end_x;
  401da6:	4d06      	ldr	r5, [pc, #24]	; (401dc0 <ili9488_set_limits+0x20>)
	limit_end_y = end_y;
  401da8:	4c06      	ldr	r4, [pc, #24]	; (401dc4 <ili9488_set_limits+0x24>)
	limit_start_x = start_x;
  401daa:	8038      	strh	r0, [r7, #0]
	limit_start_y = start_y;
  401dac:	8031      	strh	r1, [r6, #0]
	limit_end_x = end_x;
  401dae:	802a      	strh	r2, [r5, #0]
	limit_end_y = end_y;
  401db0:	8023      	strh	r3, [r4, #0]
}
  401db2:	bcf0      	pop	{r4, r5, r6, r7}
  401db4:	4770      	bx	lr
  401db6:	bf00      	nop
  401db8:	2042b4b8 	.word	0x2042b4b8
  401dbc:	2042b4ba 	.word	0x2042b4ba
  401dc0:	2042b4b4 	.word	0x2042b4b4
  401dc4:	2042b4b6 	.word	0x2042b4b6

00401dc8 <ili9488_set_orientation>:
 *
 * \param flags Orientation flags to use, see \ref ILI9488_FLIP_X, \ref ILI9488_FLIP_Y
 *        and \ref ILI9488_SWITCH_XY.
 */
void ili9488_set_orientation(uint8_t flags)
{
  401dc8:	b538      	push	{r3, r4, r5, lr}
	/* Flip X/Y and reverse X orientation and set BGR mode*/
	ili9488_color_t madctl = 0x68;

	if (flags & ILI9488_FLIP_X) {
  401dca:	f000 0301 	and.w	r3, r0, #1
  401dce:	2b00      	cmp	r3, #0
  401dd0:	bf0b      	itete	eq
  401dd2:	2448      	moveq	r4, #72	; 0x48
  401dd4:	2408      	movne	r4, #8
  401dd6:	21c8      	moveq	r1, #200	; 0xc8
  401dd8:	2188      	movne	r1, #136	; 0x88
  401dda:	bf0b      	itete	eq
  401ddc:	22e8      	moveq	r2, #232	; 0xe8
  401dde:	22a8      	movne	r2, #168	; 0xa8
  401de0:	2368      	moveq	r3, #104	; 0x68
  401de2:	2328      	movne	r3, #40	; 0x28
		madctl &= ~(1 << 6);
	}

	if (flags & ILI9488_FLIP_Y) {
  401de4:	0785      	lsls	r5, r0, #30
  401de6:	d501      	bpl.n	401dec <ili9488_set_orientation+0x24>
  401de8:	460c      	mov	r4, r1
		madctl |= 1 << 7;
  401dea:	4613      	mov	r3, r2
	}

	if (flags & ILI9488_SWITCH_XY) {
  401dec:	f010 0f04 	tst.w	r0, #4
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401df0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401df4:	4807      	ldr	r0, [pc, #28]	; (401e14 <ili9488_set_orientation+0x4c>)
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  401df6:	f04f 45c6 	mov.w	r5, #1660944384	; 0x63000000
  401dfa:	4a07      	ldr	r2, [pc, #28]	; (401e18 <ili9488_set_orientation+0x50>)
	if (flags & ILI9488_SWITCH_XY) {
  401dfc:	bf08      	it	eq
  401dfe:	461c      	moveq	r4, r3
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401e00:	4790      	blx	r2
  401e02:	2336      	movs	r3, #54	; 0x36
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401e04:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401e08:	4802      	ldr	r0, [pc, #8]	; (401e14 <ili9488_set_orientation+0x4c>)
  401e0a:	802b      	strh	r3, [r5, #0]
  401e0c:	4b03      	ldr	r3, [pc, #12]	; (401e1c <ili9488_set_orientation+0x54>)
  401e0e:	4798      	blx	r3
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  401e10:	802c      	strh	r4, [r5, #0]
  401e12:	bd38      	pop	{r3, r4, r5, pc}
  401e14:	400e1200 	.word	0x400e1200
  401e18:	004026c1 	.word	0x004026c1
  401e1c:	004026bd 	.word	0x004026bd

00401e20 <ili9488_duplicate_pixel>:
 * \param color The color to write to the display
 * \param count The number of pixels to write with this color
 */
void ili9488_duplicate_pixel(const uint16_t color, uint32_t count)
{
	ili9488_set_window(limit_start_x, limit_start_y, (limit_end_x - limit_start_x) + 1, (limit_end_y - limit_start_y) + 1);
  401e20:	4b15      	ldr	r3, [pc, #84]	; (401e78 <ili9488_duplicate_pixel+0x58>)
  401e22:	4a16      	ldr	r2, [pc, #88]	; (401e7c <ili9488_duplicate_pixel+0x5c>)
{
  401e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401e28:	4606      	mov	r6, r0
	ili9488_set_window(limit_start_x, limit_start_y, (limit_end_x - limit_start_x) + 1, (limit_end_y - limit_start_y) + 1);
  401e2a:	881b      	ldrh	r3, [r3, #0]
  401e2c:	8812      	ldrh	r2, [r2, #0]
{
  401e2e:	460f      	mov	r7, r1
	ili9488_set_window(limit_start_x, limit_start_y, (limit_end_x - limit_start_x) + 1, (limit_end_y - limit_start_y) + 1);
  401e30:	4813      	ldr	r0, [pc, #76]	; (401e80 <ili9488_duplicate_pixel+0x60>)
  401e32:	3301      	adds	r3, #1
  401e34:	4913      	ldr	r1, [pc, #76]	; (401e84 <ili9488_duplicate_pixel+0x64>)
  401e36:	3201      	adds	r2, #1
  401e38:	8800      	ldrh	r0, [r0, #0]
  401e3a:	8809      	ldrh	r1, [r1, #0]
  401e3c:	1a12      	subs	r2, r2, r0
  401e3e:	4d12      	ldr	r5, [pc, #72]	; (401e88 <ili9488_duplicate_pixel+0x68>)
  401e40:	1a5b      	subs	r3, r3, r1
  401e42:	b292      	uxth	r2, r2
  401e44:	b29b      	uxth	r3, r3
  401e46:	47a8      	blx	r5
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401e48:	4b10      	ldr	r3, [pc, #64]	; (401e8c <ili9488_duplicate_pixel+0x6c>)
  401e4a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401e4e:	4810      	ldr	r0, [pc, #64]	; (401e90 <ili9488_duplicate_pixel+0x70>)
  401e50:	4798      	blx	r3
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  401e52:	f04f 45c6 	mov.w	r5, #1660944384	; 0x63000000
  401e56:	232c      	movs	r3, #44	; 0x2c
  401e58:	802b      	strh	r3, [r5, #0]
	ili9488_write_ram_prepare();

#ifdef ILI9488_EBIMODE
	while (count--) {
  401e5a:	b15f      	cbz	r7, 401e74 <ili9488_duplicate_pixel+0x54>
  401e5c:	1e7c      	subs	r4, r7, #1
  401e5e:	f8df 8034 	ldr.w	r8, [pc, #52]	; 401e94 <ili9488_duplicate_pixel+0x74>
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401e62:	4f0b      	ldr	r7, [pc, #44]	; (401e90 <ili9488_duplicate_pixel+0x70>)
	while (count--) {
  401e64:	3c01      	subs	r4, #1
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401e66:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401e6a:	4638      	mov	r0, r7
  401e6c:	47c0      	blx	r8
	while (count--) {
  401e6e:	1c63      	adds	r3, r4, #1
		*(volatile uint16_t *)(BOARD_ILI9488_ADDR) = lcd_data;
  401e70:	802e      	strh	r6, [r5, #0]
  401e72:	d1f7      	bne.n	401e64 <ili9488_duplicate_pixel+0x44>
  401e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401e78:	2042b4b6 	.word	0x2042b4b6
  401e7c:	2042b4b4 	.word	0x2042b4b4
  401e80:	2042b4b8 	.word	0x2042b4b8
  401e84:	2042b4ba 	.word	0x2042b4ba
  401e88:	00401ab5 	.word	0x00401ab5
  401e8c:	004026c1 	.word	0x004026c1
  401e90:	400e1200 	.word	0x400e1200
  401e94:	004026bd 	.word	0x004026bd

00401e98 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
  401e98:	0109      	lsls	r1, r1, #4
  401e9a:	5042      	str	r2, [r0, r1]
  401e9c:	4770      	bx	lr
  401e9e:	bf00      	nop

00401ea0 <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
  401ea0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  401ea4:	604a      	str	r2, [r1, #4]
  401ea6:	4770      	bx	lr

00401ea8 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
  401ea8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  401eac:	608a      	str	r2, [r1, #8]
  401eae:	4770      	bx	lr

00401eb0 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
  401eb0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  401eb4:	60ca      	str	r2, [r1, #12]
  401eb6:	4770      	bx	lr

00401eb8 <ssc_reset>:
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_reset(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_SWRST;
	p_ssc->SSC_CMR = 0;
  401eb8:	2300      	movs	r3, #0
	p_ssc->SSC_CR = SSC_CR_SWRST;
  401eba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401ebe:	6002      	str	r2, [r0, #0]
	p_ssc->SSC_CMR = 0;
  401ec0:	6043      	str	r3, [r0, #4]
	p_ssc->SSC_RCMR = 0;
  401ec2:	6103      	str	r3, [r0, #16]
	p_ssc->SSC_RFMR = 0;
  401ec4:	6143      	str	r3, [r0, #20]
	p_ssc->SSC_TCMR = 0;
  401ec6:	6183      	str	r3, [r0, #24]
	p_ssc->SSC_TFMR = 0;
  401ec8:	61c3      	str	r3, [r0, #28]
  401eca:	4770      	bx	lr

00401ecc <ssc_enable_rx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_rx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_RXEN;
  401ecc:	2301      	movs	r3, #1
  401ece:	6003      	str	r3, [r0, #0]
  401ed0:	4770      	bx	lr
  401ed2:	bf00      	nop

00401ed4 <ssc_disable_rx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_disable_rx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_RXDIS;
  401ed4:	2302      	movs	r3, #2
  401ed6:	6003      	str	r3, [r0, #0]
  401ed8:	4770      	bx	lr
  401eda:	bf00      	nop

00401edc <ssc_enable_tx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_tx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_TXEN;
  401edc:	f44f 7380 	mov.w	r3, #256	; 0x100
  401ee0:	6003      	str	r3, [r0, #0]
  401ee2:	4770      	bx	lr

00401ee4 <ssc_disable_tx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_disable_tx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_TXDIS;
  401ee4:	f44f 7300 	mov.w	r3, #512	; 0x200
  401ee8:	6003      	str	r3, [r0, #0]
  401eea:	4770      	bx	lr

00401eec <ssc_set_receiver>:
 * \param p_rx_clk_opt Pointer to the receiver clock configuration structure.
 * \param p_rx_data_frame Pointer to the receiver data frame configuration structure.
 */
void ssc_set_receiver(Ssc *p_ssc, clock_opt_t *p_rx_clk_opt,
		data_frame_opt_t *p_rx_data_frame)
{
  401eec:	b4f0      	push	{r4, r5, r6, r7}
	if (p_rx_clk_opt == NULL) {
  401eee:	2900      	cmp	r1, #0
  401ef0:	d02f      	beq.n	401f52 <ssc_set_receiver+0x66>
		p_ssc->SSC_RCMR = 0;
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  401ef2:	6904      	ldr	r4, [r0, #16]
  401ef4:	68cf      	ldr	r7, [r1, #12]
  401ef6:	698e      	ldr	r6, [r1, #24]
  401ef8:	e891 0028 	ldmia.w	r1, {r3, r5}
  401efc:	432b      	orrs	r3, r5
  401efe:	688d      	ldr	r5, [r1, #8]
  401f00:	4323      	orrs	r3, r4
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
				p_rx_clk_opt->ul_ckg |
				p_rx_clk_opt->ul_start_sel |
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  401f02:	694c      	ldr	r4, [r1, #20]
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  401f04:	432b      	orrs	r3, r5
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
  401f06:	690d      	ldr	r5, [r1, #16]
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  401f08:	0421      	lsls	r1, r4, #16
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  401f0a:	433b      	orrs	r3, r7
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  401f0c:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  401f10:	4333      	orrs	r3, r6
  401f12:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  401f16:	430b      	orrs	r3, r1
  401f18:	6103      	str	r3, [r0, #16]
	}

	if (p_rx_data_frame == NULL) {
  401f1a:	b1ea      	cbz	r2, 401f58 <ssc_set_receiver+0x6c>
		p_ssc->SSC_RFMR = 0;
	} else {
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  401f1c:	6954      	ldr	r4, [r2, #20]
  401f1e:	6853      	ldr	r3, [r2, #4]
  401f20:	6991      	ldr	r1, [r2, #24]
  401f22:	4323      	orrs	r3, r4
  401f24:	6946      	ldr	r6, [r0, #20]
  401f26:	6814      	ldr	r4, [r2, #0]
  401f28:	430b      	orrs	r3, r1
				p_rx_data_frame->ul_msbf |
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  401f2a:	6891      	ldr	r1, [r2, #8]
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  401f2c:	f004 041f 	and.w	r4, r4, #31
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
  401f30:	6915      	ldr	r5, [r2, #16]
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  401f32:	4333      	orrs	r3, r6
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  401f34:	68d2      	ldr	r2, [r2, #12]
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  401f36:	0209      	lsls	r1, r1, #8
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  401f38:	4323      	orrs	r3, r4
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  401f3a:	0412      	lsls	r2, r2, #16
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  401f3c:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  401f40:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  401f44:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  401f48:	430b      	orrs	r3, r1
  401f4a:	4313      	orrs	r3, r2
				p_rx_data_frame->ul_fsos |
				p_rx_data_frame->ul_fsedge;
	}
}
  401f4c:	bcf0      	pop	{r4, r5, r6, r7}
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  401f4e:	6143      	str	r3, [r0, #20]
}
  401f50:	4770      	bx	lr
		p_ssc->SSC_RCMR = 0;
  401f52:	6101      	str	r1, [r0, #16]
	if (p_rx_data_frame == NULL) {
  401f54:	2a00      	cmp	r2, #0
  401f56:	d1e1      	bne.n	401f1c <ssc_set_receiver+0x30>
		p_ssc->SSC_RFMR = 0;
  401f58:	6142      	str	r2, [r0, #20]
}
  401f5a:	bcf0      	pop	{r4, r5, r6, r7}
  401f5c:	4770      	bx	lr
  401f5e:	bf00      	nop

00401f60 <ssc_set_transmitter>:
 * \param p_tx_clk_opt Pointer to the transmitter clock configuration structure.
 * \param p_tx_data_frame Pointer to the transmitter data frame configuration structure.
 */
void ssc_set_transmitter(Ssc *p_ssc, clock_opt_t *p_tx_clk_opt,
		data_frame_opt_t *p_tx_data_frame)
{
  401f60:	b4f0      	push	{r4, r5, r6, r7}
	if (p_tx_clk_opt == NULL) {
  401f62:	2900      	cmp	r1, #0
  401f64:	d02f      	beq.n	401fc6 <ssc_set_transmitter+0x66>
		p_ssc->SSC_TCMR = 0;
	} else {
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  401f66:	6984      	ldr	r4, [r0, #24]
  401f68:	68cf      	ldr	r7, [r1, #12]
  401f6a:	698e      	ldr	r6, [r1, #24]
  401f6c:	e891 0028 	ldmia.w	r1, {r3, r5}
  401f70:	432b      	orrs	r3, r5
  401f72:	688d      	ldr	r5, [r1, #8]
  401f74:	4323      	orrs	r3, r4
				p_tx_clk_opt->ul_cko | p_tx_clk_opt->ul_cki |
				p_tx_clk_opt->ul_ckg |
				p_tx_clk_opt->ul_start_sel |
				SSC_TCMR_PERIOD(p_tx_clk_opt->ul_period) |
				SSC_TCMR_STTDLY(p_tx_clk_opt->ul_sttdly);
  401f76:	694c      	ldr	r4, [r1, #20]
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  401f78:	432b      	orrs	r3, r5
				SSC_TCMR_PERIOD(p_tx_clk_opt->ul_period) |
  401f7a:	690d      	ldr	r5, [r1, #16]
				SSC_TCMR_STTDLY(p_tx_clk_opt->ul_sttdly);
  401f7c:	0421      	lsls	r1, r4, #16
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  401f7e:	433b      	orrs	r3, r7
				SSC_TCMR_STTDLY(p_tx_clk_opt->ul_sttdly);
  401f80:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  401f84:	4333      	orrs	r3, r6
  401f86:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  401f8a:	430b      	orrs	r3, r1
  401f8c:	6183      	str	r3, [r0, #24]
	}

	if (p_tx_data_frame == NULL) {
  401f8e:	b1ea      	cbz	r2, 401fcc <ssc_set_transmitter+0x6c>
		p_ssc->SSC_TFMR = 0;
	} else {
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  401f90:	6954      	ldr	r4, [r2, #20]
  401f92:	6853      	ldr	r3, [r2, #4]
  401f94:	6991      	ldr	r1, [r2, #24]
  401f96:	4323      	orrs	r3, r4
  401f98:	69c6      	ldr	r6, [r0, #28]
  401f9a:	6814      	ldr	r4, [r2, #0]
  401f9c:	430b      	orrs	r3, r1
				p_tx_data_frame->ul_msbf |
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
  401f9e:	6891      	ldr	r1, [r2, #8]
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  401fa0:	f004 041f 	and.w	r4, r4, #31
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
				SSC_TFMR_FSLEN_EXT(p_tx_data_frame->ul_fslen_ext) |
  401fa4:	6915      	ldr	r5, [r2, #16]
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  401fa6:	4333      	orrs	r3, r6
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
  401fa8:	68d2      	ldr	r2, [r2, #12]
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
  401faa:	0209      	lsls	r1, r1, #8
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  401fac:	4323      	orrs	r3, r4
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
  401fae:	0412      	lsls	r2, r2, #16
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
  401fb0:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  401fb4:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
  401fb8:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  401fbc:	430b      	orrs	r3, r1
  401fbe:	4313      	orrs	r3, r2
				p_tx_data_frame->ul_fsos |
				p_tx_data_frame->ul_fsedge;
	}
}
  401fc0:	bcf0      	pop	{r4, r5, r6, r7}
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  401fc2:	61c3      	str	r3, [r0, #28]
}
  401fc4:	4770      	bx	lr
		p_ssc->SSC_TCMR = 0;
  401fc6:	6181      	str	r1, [r0, #24]
	if (p_tx_data_frame == NULL) {
  401fc8:	2a00      	cmp	r2, #0
  401fca:	d1e1      	bne.n	401f90 <ssc_set_transmitter+0x30>
		p_ssc->SSC_TFMR = 0;
  401fcc:	61c2      	str	r2, [r0, #28]
}
  401fce:	bcf0      	pop	{r4, r5, r6, r7}
  401fd0:	4770      	bx	lr
  401fd2:	bf00      	nop

00401fd4 <ssc_disable_interrupt>:
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void ssc_disable_interrupt(Ssc *p_ssc, uint32_t ul_sources)
{
	p_ssc->SSC_IDR = ul_sources;
  401fd4:	6481      	str	r1, [r0, #72]	; 0x48
  401fd6:	4770      	bx	lr

00401fd8 <twihs_master_init>:
 * \param p_opt Options for initializing the TWIHS module (see \ref twihs_options_t).
 *
 * \return TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twihs_master_init(Twihs *p_twihs, const twihs_options_t *p_opt)
{
  401fd8:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t status = TWIHS_SUCCESS;

	/* Disable TWIHS interrupts */
	p_twihs->TWIHS_IDR = ~0UL;
  401fda:	f04f 33ff 	mov.w	r3, #4294967295
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  401fde:	2680      	movs	r6, #128	; 0x80
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401fe0:	2204      	movs	r2, #4
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401fe2:	2508      	movs	r5, #8
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  401fe4:	2420      	movs	r4, #32
	p_twihs->TWIHS_IDR = ~0UL;
  401fe6:	6283      	str	r3, [r0, #40]	; 0x28
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401fe8:	4b2f      	ldr	r3, [pc, #188]	; (4020a8 <twihs_master_init+0xd0>)
	p_twihs->TWIHS_SR;
  401fea:	6a07      	ldr	r7, [r0, #32]
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  401fec:	6006      	str	r6, [r0, #0]
	p_twihs->TWIHS_RHR;
  401fee:	6b06      	ldr	r6, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401ff0:	6005      	str	r5, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  401ff2:	6004      	str	r4, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401ff4:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401ff6:	684a      	ldr	r2, [r1, #4]
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401ff8:	429a      	cmp	r2, r3
  401ffa:	d84d      	bhi.n	402098 <twihs_master_init+0xc0>
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  401ffc:	4c2b      	ldr	r4, [pc, #172]	; (4020ac <twihs_master_init+0xd4>)
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401ffe:	680b      	ldr	r3, [r1, #0]
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  402000:	42a2      	cmp	r2, r4
  402002:	d92e      	bls.n	402062 <twihs_master_init+0x8a>
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  402004:	4c2a      	ldr	r4, [pc, #168]	; (4020b0 <twihs_master_init+0xd8>)
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  402006:	492b      	ldr	r1, [pc, #172]	; (4020b4 <twihs_master_init+0xdc>)
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  402008:	4414      	add	r4, r2
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  40200a:	fba1 2103 	umull	r2, r1, r1, r3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  40200e:	00a4      	lsls	r4, r4, #2
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  402010:	0b89      	lsrs	r1, r1, #14
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  402012:	fbb3 f3f4 	udiv	r3, r3, r4
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  402016:	3903      	subs	r1, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  402018:	3b03      	subs	r3, #3
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40201a:	29ff      	cmp	r1, #255	; 0xff
  40201c:	d940      	bls.n	4020a0 <twihs_master_init+0xc8>
  40201e:	2200      	movs	r2, #0
  402020:	e000      	b.n	402024 <twihs_master_init+0x4c>
  402022:	b13c      	cbz	r4, 402034 <twihs_master_init+0x5c>
			ckdiv++;
  402024:	3201      	adds	r2, #1
			cldiv /= TWIHS_CLK_DIVIDER;
  402026:	0849      	lsrs	r1, r1, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  402028:	2a06      	cmp	r2, #6
  40202a:	bf8c      	ite	hi
  40202c:	2400      	movhi	r4, #0
  40202e:	2401      	movls	r4, #1
  402030:	29ff      	cmp	r1, #255	; 0xff
  402032:	d8f6      	bhi.n	402022 <twihs_master_init+0x4a>
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  402034:	2bff      	cmp	r3, #255	; 0xff
  402036:	d907      	bls.n	402048 <twihs_master_init+0x70>
  402038:	b914      	cbnz	r4, 402040 <twihs_master_init+0x68>
  40203a:	e005      	b.n	402048 <twihs_master_init+0x70>
  40203c:	2a06      	cmp	r2, #6
  40203e:	d803      	bhi.n	402048 <twihs_master_init+0x70>
			chdiv /= TWIHS_CLK_DIVIDER;
  402040:	085b      	lsrs	r3, r3, #1
			ckdiv++;
  402042:	3201      	adds	r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  402044:	2bff      	cmp	r3, #255	; 0xff
  402046:	d8f9      	bhi.n	40203c <twihs_master_init+0x64>
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  402048:	021b      	lsls	r3, r3, #8
	uint32_t status = TWIHS_SUCCESS;
  40204a:	2400      	movs	r4, #0
				TWIHS_CWGR_CKDIV(ckdiv);
  40204c:	0412      	lsls	r2, r2, #16
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  40204e:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  402050:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  402054:	b2c9      	uxtb	r1, r1
  402056:	4313      	orrs	r3, r2
  402058:	430b      	orrs	r3, r1
		p_twihs->TWIHS_CWGR =
  40205a:	6103      	str	r3, [r0, #16]
}
  40205c:	4620      	mov	r0, r4
  40205e:	bcf0      	pop	{r4, r5, r6, r7}
  402060:	4770      	bx	lr
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  402062:	0052      	lsls	r2, r2, #1
  402064:	fbb3 f3f2 	udiv	r3, r3, r2
  402068:	3b03      	subs	r3, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40206a:	2200      	movs	r2, #0
  40206c:	2bff      	cmp	r3, #255	; 0xff
  40206e:	d802      	bhi.n	402076 <twihs_master_init+0x9e>
  402070:	e008      	b.n	402084 <twihs_master_init+0xac>
  402072:	2a06      	cmp	r2, #6
  402074:	d803      	bhi.n	40207e <twihs_master_init+0xa6>
			c_lh_div /= TWIHS_CLK_DIVIDER;
  402076:	085b      	lsrs	r3, r3, #1
			ckdiv++;
  402078:	3201      	adds	r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40207a:	2bff      	cmp	r3, #255	; 0xff
  40207c:	d8f9      	bhi.n	402072 <twihs_master_init+0x9a>
  40207e:	0412      	lsls	r2, r2, #16
  402080:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  402084:	0219      	lsls	r1, r3, #8
	uint32_t status = TWIHS_SUCCESS;
  402086:	2400      	movs	r4, #0
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  402088:	b2db      	uxtb	r3, r3
  40208a:	b289      	uxth	r1, r1
  40208c:	4313      	orrs	r3, r2
  40208e:	430b      	orrs	r3, r1
		p_twihs->TWIHS_CWGR =
  402090:	6103      	str	r3, [r0, #16]
}
  402092:	4620      	mov	r0, r4
  402094:	bcf0      	pop	{r4, r5, r6, r7}
  402096:	4770      	bx	lr
		status = TWIHS_INVALID_ARGUMENT;
  402098:	2401      	movs	r4, #1
}
  40209a:	4620      	mov	r0, r4
  40209c:	bcf0      	pop	{r4, r5, r6, r7}
  40209e:	4770      	bx	lr
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4020a0:	2401      	movs	r4, #1
	uint32_t ckdiv = 0;
  4020a2:	2200      	movs	r2, #0
  4020a4:	e7c6      	b.n	402034 <twihs_master_init+0x5c>
  4020a6:	bf00      	nop
  4020a8:	00061a80 	.word	0x00061a80
  4020ac:	0005dc00 	.word	0x0005dc00
  4020b0:	3ffd1200 	.word	0x3ffd1200
  4020b4:	057619f1 	.word	0x057619f1

004020b8 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  4020b8:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  4020ba:	2a00      	cmp	r2, #0
  4020bc:	d053      	beq.n	402166 <twihs_master_read+0xae>
{
  4020be:	b470      	push	{r4, r5, r6}
	p_twihs->TWIHS_MMR = 0;
  4020c0:	2600      	movs	r6, #0
	uint8_t *buffer = p_packet->buffer;
  4020c2:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  4020c4:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4020c6:	684b      	ldr	r3, [r1, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  4020c8:	7c0d      	ldrb	r5, [r1, #16]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4020ca:	021b      	lsls	r3, r3, #8
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  4020cc:	042d      	lsls	r5, r5, #16
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4020ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  4020d2:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  4020d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4020da:	432b      	orrs	r3, r5
  4020dc:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  4020de:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4020e0:	684b      	ldr	r3, [r1, #4]
	if (len == 0)
  4020e2:	b99b      	cbnz	r3, 40210c <twihs_master_read+0x54>
		return 0;
  4020e4:	461d      	mov	r5, r3
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  4020e6:	2301      	movs	r3, #1
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4020e8:	60c5      	str	r5, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  4020ea:	6003      	str	r3, [r0, #0]
		status = p_twihs->TWIHS_SR;
  4020ec:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4020ee:	05d9      	lsls	r1, r3, #23
  4020f0:	d41f      	bmi.n	402132 <twihs_master_read+0x7a>
  4020f2:	2a01      	cmp	r2, #1
  4020f4:	d020      	beq.n	402138 <twihs_master_read+0x80>
  4020f6:	f247 5130 	movw	r1, #30000	; 0x7530
		if (!(status & TWIHS_SR_RXRDY)) {
  4020fa:	079e      	lsls	r6, r3, #30
  4020fc:	d412      	bmi.n	402124 <twihs_master_read+0x6c>
		status = p_twihs->TWIHS_SR;
  4020fe:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  402100:	05dd      	lsls	r5, r3, #23
  402102:	d416      	bmi.n	402132 <twihs_master_read+0x7a>
		if (!timeout--) {
  402104:	3901      	subs	r1, #1
  402106:	d1f8      	bne.n	4020fa <twihs_master_read+0x42>
			return TWIHS_ERROR_TIMEOUT;
  402108:	2009      	movs	r0, #9
  40210a:	e02a      	b.n	402162 <twihs_master_read+0xaa>
	if (len > 1) {
  40210c:	2b01      	cmp	r3, #1
	val = addr[0];
  40210e:	780d      	ldrb	r5, [r1, #0]
	if (len > 1) {
  402110:	dde9      	ble.n	4020e6 <twihs_master_read+0x2e>
		val |= addr[1];
  402112:	784e      	ldrb	r6, [r1, #1]
	if (len > 2) {
  402114:	2b02      	cmp	r3, #2
		val |= addr[1];
  402116:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
	if (len > 2) {
  40211a:	d0e4      	beq.n	4020e6 <twihs_master_read+0x2e>
		val |= addr[2];
  40211c:	788b      	ldrb	r3, [r1, #2]
  40211e:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
  402122:	e7e0      	b.n	4020e6 <twihs_master_read+0x2e>
		*buffer++ = p_twihs->TWIHS_RHR;
  402124:	6b03      	ldr	r3, [r0, #48]	; 0x30
		cnt--;
  402126:	3a01      	subs	r2, #1
		*buffer++ = p_twihs->TWIHS_RHR;
  402128:	f804 3b01 	strb.w	r3, [r4], #1
		status = p_twihs->TWIHS_SR;
  40212c:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40212e:	05d9      	lsls	r1, r3, #23
  402130:	d5df      	bpl.n	4020f2 <twihs_master_read+0x3a>
			return TWIHS_RECEIVE_NACK;
  402132:	2005      	movs	r0, #5
}
  402134:	bc70      	pop	{r4, r5, r6}
  402136:	4770      	bx	lr
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  402138:	2102      	movs	r1, #2
		if (!(status & TWIHS_SR_RXRDY)) {
  40213a:	079d      	lsls	r5, r3, #30
		if (status & TWIHS_SR_NACK) {
  40213c:	f247 5230 	movw	r2, #30000	; 0x7530
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  402140:	6001      	str	r1, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  402142:	d407      	bmi.n	402154 <twihs_master_read+0x9c>
		status = p_twihs->TWIHS_SR;
  402144:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  402146:	05de      	lsls	r6, r3, #23
  402148:	d4f3      	bmi.n	402132 <twihs_master_read+0x7a>
		if (!timeout--) {
  40214a:	3a01      	subs	r2, #1
  40214c:	d0dc      	beq.n	402108 <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  40214e:	079d      	lsls	r5, r3, #30
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  402150:	6001      	str	r1, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  402152:	d5f7      	bpl.n	402144 <twihs_master_read+0x8c>
		*buffer++ = p_twihs->TWIHS_RHR;
  402154:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402156:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  402158:	6a03      	ldr	r3, [r0, #32]
  40215a:	07db      	lsls	r3, r3, #31
  40215c:	d5fc      	bpl.n	402158 <twihs_master_read+0xa0>
	p_twihs->TWIHS_SR;
  40215e:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  402160:	2000      	movs	r0, #0
}
  402162:	bc70      	pop	{r4, r5, r6}
  402164:	4770      	bx	lr
		return TWIHS_INVALID_ARGUMENT;
  402166:	2001      	movs	r0, #1
  402168:	4770      	bx	lr
  40216a:	bf00      	nop

0040216c <twihs_master_write>:
{
  40216c:	4603      	mov	r3, r0
	uint32_t status, cnt = p_packet->length;
  40216e:	68c8      	ldr	r0, [r1, #12]
	if (cnt == 0) {
  402170:	2800      	cmp	r0, #0
  402172:	d034      	beq.n	4021de <twihs_master_write+0x72>
{
  402174:	b470      	push	{r4, r5, r6}
	p_twihs->TWIHS_MMR = 0;
  402176:	2600      	movs	r6, #0
	uint8_t *buffer = p_packet->buffer;
  402178:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  40217a:	605e      	str	r6, [r3, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  40217c:	7c0a      	ldrb	r2, [r1, #16]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40217e:	684d      	ldr	r5, [r1, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  402180:	0412      	lsls	r2, r2, #16
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  402182:	022d      	lsls	r5, r5, #8
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  402184:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  402188:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  40218c:	432a      	orrs	r2, r5
  40218e:	605a      	str	r2, [r3, #4]
	p_twihs->TWIHS_IADR = 0;
  402190:	60de      	str	r6, [r3, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  402192:	684a      	ldr	r2, [r1, #4]
	if (len == 0)
  402194:	b98a      	cbnz	r2, 4021ba <twihs_master_write+0x4e>
		return 0;
  402196:	4615      	mov	r5, r2
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  402198:	60dd      	str	r5, [r3, #12]
		status = p_twihs->TWIHS_SR;
  40219a:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWIHS_SR_NACK) {
  40219c:	05d6      	lsls	r6, r2, #23
  40219e:	d409      	bmi.n	4021b4 <twihs_master_write+0x48>
		if (!(status & TWIHS_SR_TXRDY)) {
  4021a0:	0755      	lsls	r5, r2, #29
  4021a2:	d5fa      	bpl.n	40219a <twihs_master_write+0x2e>
		p_twihs->TWIHS_THR = *buffer++;
  4021a4:	f814 2b01 	ldrb.w	r2, [r4], #1
	while (cnt > 0) {
  4021a8:	3801      	subs	r0, #1
		p_twihs->TWIHS_THR = *buffer++;
  4021aa:	635a      	str	r2, [r3, #52]	; 0x34
	while (cnt > 0) {
  4021ac:	d013      	beq.n	4021d6 <twihs_master_write+0x6a>
		status = p_twihs->TWIHS_SR;
  4021ae:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWIHS_SR_NACK) {
  4021b0:	05d6      	lsls	r6, r2, #23
  4021b2:	d5f5      	bpl.n	4021a0 <twihs_master_write+0x34>
			return TWIHS_RECEIVE_NACK;
  4021b4:	2005      	movs	r0, #5
}
  4021b6:	bc70      	pop	{r4, r5, r6}
  4021b8:	4770      	bx	lr
	if (len > 1) {
  4021ba:	2a01      	cmp	r2, #1
	val = addr[0];
  4021bc:	780d      	ldrb	r5, [r1, #0]
	if (len > 1) {
  4021be:	ddeb      	ble.n	402198 <twihs_master_write+0x2c>
		val |= addr[1];
  4021c0:	784e      	ldrb	r6, [r1, #1]
	if (len > 2) {
  4021c2:	2a02      	cmp	r2, #2
		val |= addr[1];
  4021c4:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
	if (len > 2) {
  4021c8:	d0e6      	beq.n	402198 <twihs_master_write+0x2c>
		val |= addr[2];
  4021ca:	788a      	ldrb	r2, [r1, #2]
  4021cc:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
  4021d0:	e7e2      	b.n	402198 <twihs_master_write+0x2c>
		if (status & TWIHS_SR_TXRDY) {
  4021d2:	0751      	lsls	r1, r2, #29
  4021d4:	d405      	bmi.n	4021e2 <twihs_master_write+0x76>
		status = p_twihs->TWIHS_SR;
  4021d6:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWIHS_SR_NACK) {
  4021d8:	05d4      	lsls	r4, r2, #23
  4021da:	d4eb      	bmi.n	4021b4 <twihs_master_write+0x48>
  4021dc:	e7f9      	b.n	4021d2 <twihs_master_write+0x66>
		return TWIHS_INVALID_ARGUMENT;
  4021de:	2001      	movs	r0, #1
  4021e0:	4770      	bx	lr
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4021e2:	2202      	movs	r2, #2
  4021e4:	601a      	str	r2, [r3, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4021e6:	6a1a      	ldr	r2, [r3, #32]
  4021e8:	07d2      	lsls	r2, r2, #31
  4021ea:	d5fc      	bpl.n	4021e6 <twihs_master_write+0x7a>
}
  4021ec:	bc70      	pop	{r4, r5, r6}
  4021ee:	4770      	bx	lr

004021f0 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4021f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4021f2:	4603      	mov	r3, r0
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4021f4:	4c24      	ldr	r4, [pc, #144]	; (402288 <usart_init_rs232+0x98>)
	p_usart->US_MR = 0;
  4021f6:	2000      	movs	r0, #0
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4021f8:	f04f 0e88 	mov.w	lr, #136	; 0x88
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4021fc:	f8c3 40e4 	str.w	r4, [r3, #228]	; 0xe4
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  402200:	2724      	movs	r7, #36	; 0x24
	p_usart->US_CR = US_CR_RSTSTA;
  402202:	f44f 7680 	mov.w	r6, #256	; 0x100
	p_usart->US_CR = US_CR_RTSDIS;
  402206:	f44f 2500 	mov.w	r5, #524288	; 0x80000
	ul_reg_val = 0;
  40220a:	4c20      	ldr	r4, [pc, #128]	; (40228c <usart_init_rs232+0x9c>)
	p_usart->US_MR = 0;
  40220c:	6058      	str	r0, [r3, #4]
	ul_reg_val = 0;
  40220e:	6020      	str	r0, [r4, #0]
	p_usart->US_RTOR = 0;
  402210:	6258      	str	r0, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  402212:	6298      	str	r0, [r3, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  402214:	f8c3 e000 	str.w	lr, [r3]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  402218:	601f      	str	r7, [r3, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  40221a:	601e      	str	r6, [r3, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  40221c:	601d      	str	r5, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40221e:	b361      	cbz	r1, 40227a <usart_init_rs232+0x8a>
  402220:	6808      	ldr	r0, [r1, #0]
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  402222:	0105      	lsls	r5, r0, #4
  402224:	42aa      	cmp	r2, r5
  402226:	d31c      	bcc.n	402262 <usart_init_rs232+0x72>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  402228:	0868      	lsrs	r0, r5, #1
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40222a:	f64f 76fe 	movw	r6, #65534	; 0xfffe
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40222e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
  402232:	fbb2 f2f5 	udiv	r2, r2, r5
	cd = cd_fp >> 3;
  402236:	08d5      	lsrs	r5, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  402238:	1e68      	subs	r0, r5, #1
  40223a:	42b0      	cmp	r0, r6
  40223c:	d81d      	bhi.n	40227a <usart_init_rs232+0x8a>
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40223e:	0412      	lsls	r2, r2, #16
	p_usart->US_MR |= ul_reg_val;
  402240:	2000      	movs	r0, #0
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  402242:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  402246:	432a      	orrs	r2, r5
  402248:	621a      	str	r2, [r3, #32]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40224a:	684d      	ldr	r5, [r1, #4]
  40224c:	688a      	ldr	r2, [r1, #8]
  40224e:	690f      	ldr	r7, [r1, #16]
  402250:	432a      	orrs	r2, r5
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  402252:	68ce      	ldr	r6, [r1, #12]
	p_usart->US_MR |= ul_reg_val;
  402254:	6859      	ldr	r1, [r3, #4]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  402256:	433a      	orrs	r2, r7
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  402258:	4332      	orrs	r2, r6
	p_usart->US_MR |= ul_reg_val;
  40225a:	4311      	orrs	r1, r2
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40225c:	6022      	str	r2, [r4, #0]
	p_usart->US_MR |= ul_reg_val;
  40225e:	6059      	str	r1, [r3, #4]
  402260:	bdf0      	pop	{r4, r5, r6, r7, pc}
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  402262:	00c0      	lsls	r0, r0, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  402264:	f64f 76fe 	movw	r6, #65534	; 0xfffe
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  402268:	00d2      	lsls	r2, r2, #3
  40226a:	eb02 0250 	add.w	r2, r2, r0, lsr #1
  40226e:	fbb2 f2f0 	udiv	r2, r2, r0
	cd = cd_fp >> 3;
  402272:	08d5      	lsrs	r5, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  402274:	1e68      	subs	r0, r5, #1
  402276:	42b0      	cmp	r0, r6
  402278:	d901      	bls.n	40227e <usart_init_rs232+0x8e>
		return 1;
  40227a:	2001      	movs	r0, #1
  40227c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		p_usart->US_MR |= US_MR_OVER;
  40227e:	6858      	ldr	r0, [r3, #4]
  402280:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
  402284:	6058      	str	r0, [r3, #4]
  402286:	e7da      	b.n	40223e <usart_init_rs232+0x4e>
  402288:	55534100 	.word	0x55534100
  40228c:	2042b4bc 	.word	0x2042b4bc

00402290 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  402290:	2340      	movs	r3, #64	; 0x40
  402292:	6003      	str	r3, [r0, #0]
  402294:	4770      	bx	lr
  402296:	bf00      	nop

00402298 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  402298:	2310      	movs	r3, #16
  40229a:	6003      	str	r3, [r0, #0]
  40229c:	4770      	bx	lr
  40229e:	bf00      	nop

004022a0 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
  4022a0:	6081      	str	r1, [r0, #8]
  4022a2:	4770      	bx	lr

004022a4 <usart_get_status>:
	return p_usart->US_CSR;
  4022a4:	6940      	ldr	r0, [r0, #20]
}
  4022a6:	4770      	bx	lr

004022a8 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4022a8:	6943      	ldr	r3, [r0, #20]
  4022aa:	07db      	lsls	r3, r3, #31
  4022ac:	d505      	bpl.n	4022ba <usart_read+0x12>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4022ae:	6983      	ldr	r3, [r0, #24]
	return 0;
  4022b0:	2000      	movs	r0, #0
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4022b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4022b6:	600b      	str	r3, [r1, #0]
	return 0;
  4022b8:	4770      	bx	lr
		return 1;
  4022ba:	2001      	movs	r0, #1
}
  4022bc:	4770      	bx	lr
  4022be:	bf00      	nop

004022c0 <xdmac_configure_transfer>:
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4022c0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  4022c4:	6853      	ldr	r3, [r2, #4]
  4022c6:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  4022c8:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  4022ca:	6893      	ldr	r3, [r2, #8]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  4022cc:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  4022ce:	6813      	ldr	r3, [r2, #0]
  4022d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4022d4:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  4022d6:	6913      	ldr	r3, [r2, #16]
  4022d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4022dc:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  4022de:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  4022e0:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  4022e2:	6993      	ldr	r3, [r2, #24]
  4022e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4022e8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  4022ec:	69d3      	ldr	r3, [r2, #28]
  4022ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4022f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  4022f6:	68d3      	ldr	r3, [r2, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  4022f8:	678b      	str	r3, [r1, #120]	; 0x78
  4022fa:	4770      	bx	lr

004022fc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4022fc:	b570      	push	{r4, r5, r6, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4022fe:	4810      	ldr	r0, [pc, #64]	; (402340 <sysclk_init+0x44>)
  402300:	4d10      	ldr	r5, [pc, #64]	; (402344 <sysclk_init+0x48>)
  402302:	47a8      	blx	r5
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402304:	213e      	movs	r1, #62	; 0x3e
  402306:	2000      	movs	r0, #0
  402308:	4b0f      	ldr	r3, [pc, #60]	; (402348 <sysclk_init+0x4c>)
  40230a:	4c10      	ldr	r4, [pc, #64]	; (40234c <sysclk_init+0x50>)
  40230c:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40230e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  402310:	2800      	cmp	r0, #0
  402312:	d0fc      	beq.n	40230e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  402314:	4b0e      	ldr	r3, [pc, #56]	; (402350 <sysclk_init+0x54>)
  402316:	4798      	blx	r3
  402318:	4c0e      	ldr	r4, [pc, #56]	; (402354 <sysclk_init+0x58>)
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40231a:	4b0f      	ldr	r3, [pc, #60]	; (402358 <sysclk_init+0x5c>)
  40231c:	4a0f      	ldr	r2, [pc, #60]	; (40235c <sysclk_init+0x60>)
  40231e:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  402320:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  402322:	2800      	cmp	r0, #0
  402324:	d0fc      	beq.n	402320 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  402326:	2002      	movs	r0, #2
  402328:	4b0d      	ldr	r3, [pc, #52]	; (402360 <sysclk_init+0x64>)
  40232a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40232c:	4b0d      	ldr	r3, [pc, #52]	; (402364 <sysclk_init+0x68>)
  40232e:	2000      	movs	r0, #0
  402330:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  402332:	4b0d      	ldr	r3, [pc, #52]	; (402368 <sysclk_init+0x6c>)
  402334:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  402336:	462b      	mov	r3, r5
  402338:	4801      	ldr	r0, [pc, #4]	; (402340 <sysclk_init+0x44>)

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  40233a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	system_init_flash(sysclk_get_cpu_hz());
  40233e:	4718      	bx	r3
  402340:	11e1a300 	.word	0x11e1a300
  402344:	004030bd 	.word	0x004030bd
  402348:	00402dcd 	.word	0x00402dcd
  40234c:	00402e21 	.word	0x00402e21
  402350:	00402e31 	.word	0x00402e31
  402354:	00402e41 	.word	0x00402e41
  402358:	400e0600 	.word	0x400e0600
  40235c:	20183f01 	.word	0x20183f01
  402360:	00402d49 	.word	0x00402d49
  402364:	00402d79 	.word	0x00402d79
  402368:	00402fd5 	.word	0x00402fd5

0040236c <board_init>:

void board_init(void)
{
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40236c:	4ba4      	ldr	r3, [pc, #656]	; (402600 <board_init+0x294>)
  40236e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
{
  402372:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	WDT->WDT_MR = WDT_MR_WDDIS;
  402376:	605a      	str	r2, [r3, #4]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402378:	f3bf 8f5f 	dmb	sy
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  40237c:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 402674 <board_init+0x308>
	dw_region_attr =
  402380:	4fa0      	ldr	r7, [pc, #640]	; (402604 <board_init+0x298>)
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  402382:	4ea1      	ldr	r6, [pc, #644]	; (402608 <board_init+0x29c>)
  402384:	4640      	mov	r0, r8
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  402386:	4da1      	ldr	r5, [pc, #644]	; (40260c <board_init+0x2a0>)
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  402388:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40238a:	ea40 0107 	orr.w	r1, r0, r7
  40238e:	2011      	movs	r0, #17
  402390:	47a8      	blx	r5
		mpu_cal_mpu_region_size(IFLASH_END_ADDRESS - IFLASH_START_ADDRESS) |
  402392:	489f      	ldr	r0, [pc, #636]	; (402610 <board_init+0x2a4>)
  402394:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  402396:	499f      	ldr	r1, [pc, #636]	; (402614 <board_init+0x2a8>)
	dw_region_attr =
  402398:	4c9f      	ldr	r4, [pc, #636]	; (402618 <board_init+0x2ac>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40239a:	4301      	orrs	r1, r0
  40239c:	489f      	ldr	r0, [pc, #636]	; (40261c <board_init+0x2b0>)
  40239e:	47a8      	blx	r5
		mpu_cal_mpu_region_size(DTCM_END_ADDRESS - DTCM_START_ADDRESS) |
  4023a0:	4640      	mov	r0, r8
  4023a2:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4023a4:	ea40 0107 	orr.w	r1, r0, r7
  4023a8:	489d      	ldr	r0, [pc, #628]	; (402620 <board_init+0x2b4>)
  4023aa:	47a8      	blx	r5
		mpu_cal_mpu_region_size(SRAM_FIRST_END_ADDRESS - SRAM_FIRST_START_ADDRESS)
  4023ac:	489d      	ldr	r0, [pc, #628]	; (402624 <board_init+0x2b8>)
  4023ae:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4023b0:	ea40 0104 	orr.w	r1, r0, r4
  4023b4:	489c      	ldr	r0, [pc, #624]	; (402628 <board_init+0x2bc>)
  4023b6:	47a8      	blx	r5
		mpu_cal_mpu_region_size(SRAM_SECOND_END_ADDRESS - SRAM_SECOND_START_ADDRESS) |
  4023b8:	489c      	ldr	r0, [pc, #624]	; (40262c <board_init+0x2c0>)
  4023ba:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4023bc:	ea40 0104 	orr.w	r1, r0, r4
  4023c0:	489b      	ldr	r0, [pc, #620]	; (402630 <board_init+0x2c4>)
  4023c2:	47a8      	blx	r5
		mpu_cal_mpu_region_size(PERIPHERALS_END_ADDRESS - PERIPHERALS_START_ADDRESS)
  4023c4:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  4023c8:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4023ca:	499a      	ldr	r1, [pc, #616]	; (402634 <board_init+0x2c8>)
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  4023cc:	4c9a      	ldr	r4, [pc, #616]	; (402638 <board_init+0x2cc>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4023ce:	4301      	orrs	r1, r0
  4023d0:	489a      	ldr	r0, [pc, #616]	; (40263c <board_init+0x2d0>)
  4023d2:	47a8      	blx	r5
		mpu_cal_mpu_region_size(EXT_EBI_END_ADDRESS - EXT_EBI_START_ADDRESS) |
  4023d4:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  4023d8:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4023da:	4999      	ldr	r1, [pc, #612]	; (402640 <board_init+0x2d4>)
  4023dc:	4301      	orrs	r1, r0
  4023de:	4899      	ldr	r0, [pc, #612]	; (402644 <board_init+0x2d8>)
  4023e0:	47a8      	blx	r5
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  4023e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  4023e4:	2005      	movs	r0, #5
  4023e6:	4a98      	ldr	r2, [pc, #608]	; (402648 <board_init+0x2dc>)
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  4023e8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
  4023ec:	6263      	str	r3, [r4, #36]	; 0x24
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  4023ee:	4790      	blx	r2
  __ASM volatile ("dsb");
  4023f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4023f4:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb");
  4023f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4023fc:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  402400:	f04f 0900 	mov.w	r9, #0
  402404:	f8c4 9250 	str.w	r9, [r4, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  402408:	6963      	ldr	r3, [r4, #20]
  40240a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  40240e:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb");
  402410:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402414:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  402418:	4b8c      	ldr	r3, [pc, #560]	; (40264c <board_init+0x2e0>)
  40241a:	498d      	ldr	r1, [pc, #564]	; (402650 <board_init+0x2e4>)
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40241c:	4a8d      	ldr	r2, [pc, #564]	; (402654 <board_init+0x2e8>)
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40241e:	6059      	str	r1, [r3, #4]
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  402420:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  402422:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402426:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  40242a:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  40242e:	f023 0301 	bic.w	r3, r3, #1
  402432:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  402436:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
  40243a:	f023 0301 	bic.w	r3, r3, #1
  40243e:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  __ASM volatile ("dsb");
  402442:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402446:	f3bf 8f6f 	isb	sy
  40244a:	4c83      	ldr	r4, [pc, #524]	; (402658 <board_init+0x2ec>)
  40244c:	200a      	movs	r0, #10
  40244e:	47a0      	blx	r4
  402450:	200b      	movs	r0, #11
  402452:	47a0      	blx	r4
  402454:	200c      	movs	r0, #12
  402456:	47a0      	blx	r4
  402458:	2010      	movs	r0, #16
  40245a:	47a0      	blx	r4
  40245c:	2011      	movs	r0, #17
  40245e:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402460:	f44f 7500 	mov.w	r5, #512	; 0x200
  402464:	4c7d      	ldr	r4, [pc, #500]	; (40265c <board_init+0x2f0>)
  402466:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  40246a:	4f7d      	ldr	r7, [pc, #500]	; (402660 <board_init+0x2f4>)
		base->PIO_PUDR = mask;
  40246c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402470:	6123      	str	r3, [r4, #16]
		base->PIO_PUDR = mask;
  402472:	2610      	movs	r6, #16
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402474:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_PUDR = mask;
  402478:	f04f 0e08 	mov.w	lr, #8
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40247c:	6323      	str	r3, [r4, #48]	; 0x30
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  40247e:	4638      	mov	r0, r7
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402480:	613d      	str	r5, [r7, #16]
  402482:	464b      	mov	r3, r9
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402484:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
  402488:	f44f 5200 	mov.w	r2, #8192	; 0x2000
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40248c:	633d      	str	r5, [r7, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40248e:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402490:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  402494:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  402496:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40249a:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  40249c:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  40249e:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4024a2:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4024a6:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 402678 <board_init+0x30c>
  4024aa:	f42c 7c00 	bic.w	ip, ip, #512	; 0x200
  4024ae:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4024b2:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  4024b6:	f42c 7c00 	bic.w	ip, ip, #512	; 0x200
  4024ba:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4024be:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4024c2:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4024c6:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4024ca:	6621      	str	r1, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4024cc:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4024d0:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4024d2:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4024d4:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4024d8:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  4024dc:	f42c 1c00 	bic.w	ip, ip, #2097152	; 0x200000
  4024e0:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4024e4:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  4024e8:	f42c 1c00 	bic.w	ip, ip, #2097152	; 0x200000
  4024ec:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4024f0:	6061      	str	r1, [r4, #4]
  4024f2:	f8d8 1114 	ldr.w	r1, [r8, #276]	; 0x114
  4024f6:	ea41 0c06 	orr.w	ip, r1, r6
		base->PIO_PUDR = mask;
  4024fa:	495a      	ldr	r1, [pc, #360]	; (402664 <board_init+0x2f8>)
  4024fc:	f8c8 c114 	str.w	ip, [r8, #276]	; 0x114
  402500:	660e      	str	r6, [r1, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402502:	f8c1 6090 	str.w	r6, [r1, #144]	; 0x90
		base->PIO_MDDR = mask;
  402506:	654e      	str	r6, [r1, #84]	; 0x54
		base->PIO_IFDR = mask;
  402508:	624e      	str	r6, [r1, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40250a:	f8c1 6080 	str.w	r6, [r1, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40250e:	f8d1 c070 	ldr.w	ip, [r1, #112]	; 0x70
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  402512:	f8df 8168 	ldr.w	r8, [pc, #360]	; 40267c <board_init+0x310>
  402516:	ea4c 0c06 	orr.w	ip, ip, r6
  40251a:	f8c1 c070 	str.w	ip, [r1, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  40251e:	f8d1 c074 	ldr.w	ip, [r1, #116]	; 0x74
  402522:	ea4c 0c06 	orr.w	ip, ip, r6
  402526:	f8c1 c074 	str.w	ip, [r1, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40252a:	604e      	str	r6, [r1, #4]
  40252c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
		base->PIO_PUDR = mask;
  402530:	f8c4 e060 	str.w	lr, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402534:	f8c4 e090 	str.w	lr, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  402538:	f8c4 e054 	str.w	lr, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40253c:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402540:	f8c4 e080 	str.w	lr, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402544:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  402548:	f02c 0c08 	bic.w	ip, ip, #8
  40254c:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402550:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  402554:	f02c 0c08 	bic.w	ip, ip, #8
  402558:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40255c:	f8c4 e004 	str.w	lr, [r4, #4]
		base->PIO_PUDR = mask;
  402560:	6626      	str	r6, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402562:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  402566:	6566      	str	r6, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  402568:	6266      	str	r6, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40256a:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40256e:	f8d4 e070 	ldr.w	lr, [r4, #112]	; 0x70
  402572:	f02e 0e10 	bic.w	lr, lr, #16
  402576:	f8c4 e070 	str.w	lr, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40257a:	f8d4 e074 	ldr.w	lr, [r4, #116]	; 0x74
  40257e:	f02e 0e10 	bic.w	lr, lr, #16
  402582:	f8c4 e074 	str.w	lr, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402586:	6066      	str	r6, [r4, #4]
  402588:	47c0      	blx	r8
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  40258a:	464b      	mov	r3, r9
  40258c:	4638      	mov	r0, r7
  40258e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  402592:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  402596:	47c0      	blx	r8
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  402598:	4638      	mov	r0, r7
  40259a:	2301      	movs	r3, #1
  40259c:	22ff      	movs	r2, #255	; 0xff
  40259e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4025a2:	47c0      	blx	r8
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  4025a4:	2301      	movs	r3, #1
  4025a6:	223f      	movs	r2, #63	; 0x3f
  4025a8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4025ac:	482e      	ldr	r0, [pc, #184]	; (402668 <board_init+0x2fc>)
  4025ae:	47c0      	blx	r8
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  4025b0:	4620      	mov	r0, r4
  4025b2:	2301      	movs	r3, #1
  4025b4:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  4025b8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4025bc:	47c0      	blx	r8
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  4025be:	4638      	mov	r0, r7
  4025c0:	2301      	movs	r3, #1
  4025c2:	f44f 7280 	mov.w	r2, #256	; 0x100
  4025c6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4025ca:	47c0      	blx	r8
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  4025cc:	4638      	mov	r0, r7
  4025ce:	2301      	movs	r3, #1
  4025d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4025d4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4025d8:	47c0      	blx	r8
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  4025da:	2301      	movs	r3, #1
  4025dc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4025e0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4025e4:	4821      	ldr	r0, [pc, #132]	; (40266c <board_init+0x300>)
  4025e6:	47c0      	blx	r8
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  4025e8:	464b      	mov	r3, r9
  4025ea:	462a      	mov	r2, r5
  4025ec:	4638      	mov	r0, r7
  4025ee:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4025f2:	47c0      	blx	r8
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  4025f4:	4629      	mov	r1, r5
  4025f6:	4638      	mov	r0, r7
  4025f8:	4b1d      	ldr	r3, [pc, #116]	; (402670 <board_init+0x304>)
	pio_configure_pin(ISI_PCK_PIO, ISI_PCK_FLAGS);
	pio_configure_pin(ISI_PCK0_PIO, ISI_PCK0_FLAGS);
	pio_configure_pin(OV_PWD_GPIO, OV_PWD_FLAGS);
	pio_configure_pin(OV_RST_GPIO, OV_RST_FLAGS);
#endif
}
  4025fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  4025fe:	4718      	bx	r3
  402600:	400e1850 	.word	0x400e1850
  402604:	01000001 	.word	0x01000001
  402608:	00402699 	.word	0x00402699
  40260c:	0040268d 	.word	0x0040268d
  402610:	001fffff 	.word	0x001fffff
  402614:	06230001 	.word	0x06230001
  402618:	03230001 	.word	0x03230001
  40261c:	00400012 	.word	0x00400012
  402620:	20000013 	.word	0x20000013
  402624:	0003ffff 	.word	0x0003ffff
  402628:	20400014 	.word	0x20400014
  40262c:	0001ffff 	.word	0x0001ffff
  402630:	20440015 	.word	0x20440015
  402634:	13010001 	.word	0x13010001
  402638:	e000ed00 	.word	0xe000ed00
  40263c:	40000016 	.word	0x40000016
  402640:	03000001 	.word	0x03000001
  402644:	60000017 	.word	0x60000017
  402648:	00402681 	.word	0x00402681
  40264c:	400e0c00 	.word	0x400e0c00
  402650:	5a00080c 	.word	0x5a00080c
  402654:	5a00070c 	.word	0x5a00070c
  402658:	00402e51 	.word	0x00402e51
  40265c:	400e0e00 	.word	0x400e0e00
  402660:	400e1200 	.word	0x400e1200
  402664:	400e1000 	.word	0x400e1000
  402668:	400e1600 	.word	0x400e1600
  40266c:	400e1400 	.word	0x400e1400
  402670:	004026bd 	.word	0x004026bd
  402674:	003fffff 	.word	0x003fffff
  402678:	40088000 	.word	0x40088000
  40267c:	004026c5 	.word	0x004026c5

00402680 <mpu_enable>:
 *
 * \param dwMPUEnable  Enable/Disable the memory region.
 */
void mpu_enable(uint32_t dw_mpu_enable)
{
	MPU->CTRL = dw_mpu_enable ;
  402680:	4b01      	ldr	r3, [pc, #4]	; (402688 <mpu_enable+0x8>)
  402682:	6058      	str	r0, [r3, #4]
  402684:	4770      	bx	lr
  402686:	bf00      	nop
  402688:	e000ed90 	.word	0xe000ed90

0040268c <mpu_set_region>:
 * \param dwRegionBaseAddr  Memory region base address.
 * \param dwRegionAttr  Memory region attributes.
 */
void mpu_set_region(uint32_t dw_region_base_addr, uint32_t dw_region_attr)
{
	MPU->RBAR = dw_region_base_addr;
  40268c:	4b01      	ldr	r3, [pc, #4]	; (402694 <mpu_set_region+0x8>)
  40268e:	60d8      	str	r0, [r3, #12]
	MPU->RASR = dw_region_attr;
  402690:	6119      	str	r1, [r3, #16]
  402692:	4770      	bx	lr
  402694:	e000ed90 	.word	0xe000ed90

00402698 <mpu_cal_mpu_region_size>:
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;

	while( dwReturnValue < 31 ) {
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  402698:	2820      	cmp	r0, #32
  40269a:	d90d      	bls.n	4026b8 <mpu_cal_mpu_region_size+0x20>
  40269c:	2240      	movs	r2, #64	; 0x40
  40269e:	2305      	movs	r3, #5
  4026a0:	e002      	b.n	4026a8 <mpu_cal_mpu_region_size+0x10>
			break;
		} else {
			dwReturnValue++;
  4026a2:	3301      	adds	r3, #1
	while( dwReturnValue < 31 ) {
  4026a4:	2b1f      	cmp	r3, #31
  4026a6:	d005      	beq.n	4026b4 <mpu_cal_mpu_region_size+0x1c>
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  4026a8:	4290      	cmp	r0, r2
		}
		dwRegionSize <<= 1;
  4026aa:	ea4f 0242 	mov.w	r2, r2, lsl #1
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  4026ae:	d8f8      	bhi.n	4026a2 <mpu_cal_mpu_region_size+0xa>
  4026b0:	0058      	lsls	r0, r3, #1
  4026b2:	4770      	bx	lr
  4026b4:	203e      	movs	r0, #62	; 0x3e
  4026b6:	4770      	bx	lr
  4026b8:	2008      	movs	r0, #8
	}

	return ( dwReturnValue << 1 );
}
  4026ba:	4770      	bx	lr

004026bc <pio_set>:
  4026bc:	6301      	str	r1, [r0, #48]	; 0x30
  4026be:	4770      	bx	lr

004026c0 <pio_clear>:
  4026c0:	6341      	str	r1, [r0, #52]	; 0x34
  4026c2:	4770      	bx	lr

004026c4 <pio_configure>:
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
	/* Configure pins */
	switch (ul_type) {
  4026c4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
{
  4026c8:	b430      	push	{r4, r5}
	switch (ul_type) {
  4026ca:	d03b      	beq.n	402744 <pio_configure+0x80>
  4026cc:	d931      	bls.n	402732 <pio_configure+0x6e>
  4026ce:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4026d2:	d01b      	beq.n	40270c <pio_configure+0x48>
  4026d4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4026d8:	d018      	beq.n	40270c <pio_configure+0x48>
  4026da:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4026de:	d003      	beq.n	4026e8 <pio_configure+0x24>
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
		break;

	default:
		return 0;
  4026e0:	2300      	movs	r3, #0
	}

	return 1;
}
  4026e2:	bc30      	pop	{r4, r5}
  4026e4:	4618      	mov	r0, r3
  4026e6:	4770      	bx	lr
	if (ul_pull_up_enable) {
  4026e8:	07dd      	lsls	r5, r3, #31
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4026ea:	6442      	str	r2, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4026ec:	d448      	bmi.n	402780 <pio_configure+0xbc>
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4026ee:	f013 0f0a 	tst.w	r3, #10
		p_pio->PIO_PUDR = ul_mask;
  4026f2:	6602      	str	r2, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4026f4:	d048      	beq.n	402788 <pio_configure+0xc4>
	if (ul_attribute & PIO_DEGLITCH) {
  4026f6:	079c      	lsls	r4, r3, #30
		p_pio->PIO_IFER = ul_mask;
  4026f8:	6202      	str	r2, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4026fa:	d548      	bpl.n	40278e <pio_configure+0xca>
		p_pio->PIO_IFSCDR = ul_mask;
  4026fc:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
	return 1;
  402700:	2301      	movs	r3, #1
	p_pio->PIO_ODR = ul_mask;
  402702:	6142      	str	r2, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  402704:	6002      	str	r2, [r0, #0]
}
  402706:	4618      	mov	r0, r3
  402708:	bc30      	pop	{r4, r5}
  40270a:	4770      	bx	lr
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  40270c:	f003 0404 	and.w	r4, r3, #4
	if (ul_pull_up_enable) {
  402710:	07db      	lsls	r3, r3, #31
	p_pio->PIO_IDR = ul_mask;
  402712:	6442      	str	r2, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  402714:	d52f      	bpl.n	402776 <pio_configure+0xb2>
		p_pio->PIO_PUER = ul_mask;
  402716:	6642      	str	r2, [r0, #100]	; 0x64
	if (ul_multidrive_enable) {
  402718:	2c00      	cmp	r4, #0
  40271a:	d02f      	beq.n	40277c <pio_configure+0xb8>
		p_pio->PIO_MDER = ul_mask;
  40271c:	6502      	str	r2, [r0, #80]	; 0x50
	if (ul_default_level) {
  40271e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402722:	d04e      	beq.n	4027c2 <pio_configure+0xfe>
		p_pio->PIO_CODR = ul_mask;
  402724:	6342      	str	r2, [r0, #52]	; 0x34
	return 1;
  402726:	2301      	movs	r3, #1
	p_pio->PIO_OER = ul_mask;
  402728:	6102      	str	r2, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  40272a:	6002      	str	r2, [r0, #0]
}
  40272c:	4618      	mov	r0, r3
  40272e:	bc30      	pop	{r4, r5}
  402730:	4770      	bx	lr
	switch (ul_type) {
  402732:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402736:	d005      	beq.n	402744 <pio_configure+0x80>
  402738:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40273c:	d002      	beq.n	402744 <pio_configure+0x80>
  40273e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  402742:	d1cd      	bne.n	4026e0 <pio_configure+0x1c>
	switch (ul_type) {
  402744:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
	p_pio->PIO_IDR = ul_mask;
  402748:	6442      	str	r2, [r0, #68]	; 0x44
	switch (ul_type) {
  40274a:	d03c      	beq.n	4027c6 <pio_configure+0x102>
  40274c:	d924      	bls.n	402798 <pio_configure+0xd4>
  40274e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  402752:	d042      	beq.n	4027da <pio_configure+0x116>
  402754:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  402758:	d105      	bne.n	402766 <pio_configure+0xa2>
		ul_sr = p_pio->PIO_ABCDSR[0];
  40275a:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40275c:	4311      	orrs	r1, r2
  40275e:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402760:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402762:	4311      	orrs	r1, r2
  402764:	6741      	str	r1, [r0, #116]	; 0x74
	if (ul_pull_up_enable) {
  402766:	07db      	lsls	r3, r3, #31
	p_pio->PIO_PDR = ul_mask;
  402768:	6042      	str	r2, [r0, #4]
	if (ul_pull_up_enable) {
  40276a:	d525      	bpl.n	4027b8 <pio_configure+0xf4>
	return 1;
  40276c:	2301      	movs	r3, #1
		p_pio->PIO_PUER = ul_mask;
  40276e:	6642      	str	r2, [r0, #100]	; 0x64
}
  402770:	4618      	mov	r0, r3
  402772:	bc30      	pop	{r4, r5}
  402774:	4770      	bx	lr
		p_pio->PIO_PUDR = ul_mask;
  402776:	6602      	str	r2, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  402778:	2c00      	cmp	r4, #0
  40277a:	d1cf      	bne.n	40271c <pio_configure+0x58>
		p_pio->PIO_MDDR = ul_mask;
  40277c:	6542      	str	r2, [r0, #84]	; 0x54
  40277e:	e7ce      	b.n	40271e <pio_configure+0x5a>
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402780:	f013 0f0a 	tst.w	r3, #10
		p_pio->PIO_PUER = ul_mask;
  402784:	6642      	str	r2, [r0, #100]	; 0x64
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402786:	d1b6      	bne.n	4026f6 <pio_configure+0x32>
	if (ul_attribute & PIO_DEGLITCH) {
  402788:	079c      	lsls	r4, r3, #30
		p_pio->PIO_IFDR = ul_mask;
  40278a:	6242      	str	r2, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  40278c:	d4b6      	bmi.n	4026fc <pio_configure+0x38>
		if (ul_attribute & PIO_DEBOUNCE) {
  40278e:	0719      	lsls	r1, r3, #28
  402790:	d5b6      	bpl.n	402700 <pio_configure+0x3c>
			p_pio->PIO_IFSCER = ul_mask;
  402792:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  402796:	e7b3      	b.n	402700 <pio_configure+0x3c>
	switch (ul_type) {
  402798:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40279c:	d1e3      	bne.n	402766 <pio_configure+0xa2>
		ul_sr = p_pio->PIO_ABCDSR[0];
  40279e:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4027a0:	43d1      	mvns	r1, r2
  4027a2:	6f05      	ldr	r5, [r0, #112]	; 0x70
  4027a4:	402c      	ands	r4, r5
  4027a6:	460d      	mov	r5, r1
  4027a8:	400c      	ands	r4, r1
  4027aa:	6704      	str	r4, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4027ac:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4027ae:	6f44      	ldr	r4, [r0, #116]	; 0x74
  4027b0:	4021      	ands	r1, r4
  4027b2:	4029      	ands	r1, r5
  4027b4:	6741      	str	r1, [r0, #116]	; 0x74
  4027b6:	e7d6      	b.n	402766 <pio_configure+0xa2>
	return 1;
  4027b8:	2301      	movs	r3, #1
		p_pio->PIO_PUDR = ul_mask;
  4027ba:	6602      	str	r2, [r0, #96]	; 0x60
}
  4027bc:	4618      	mov	r0, r3
  4027be:	bc30      	pop	{r4, r5}
  4027c0:	4770      	bx	lr
		p_pio->PIO_SODR = ul_mask;
  4027c2:	6302      	str	r2, [r0, #48]	; 0x30
  4027c4:	e7af      	b.n	402726 <pio_configure+0x62>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4027c6:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4027c8:	4311      	orrs	r1, r2
  4027ca:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4027cc:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4027ce:	6f44      	ldr	r4, [r0, #116]	; 0x74
  4027d0:	4021      	ands	r1, r4
  4027d2:	ea21 0102 	bic.w	r1, r1, r2
  4027d6:	6741      	str	r1, [r0, #116]	; 0x74
  4027d8:	e7c5      	b.n	402766 <pio_configure+0xa2>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4027da:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4027dc:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4027de:	4021      	ands	r1, r4
  4027e0:	ea21 0102 	bic.w	r1, r1, r2
  4027e4:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4027e6:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4027e8:	4311      	orrs	r1, r2
  4027ea:	6741      	str	r1, [r0, #116]	; 0x74
  4027ec:	e7bb      	b.n	402766 <pio_configure+0xa2>
  4027ee:	bf00      	nop

004027f0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4027f0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4027f2:	4770      	bx	lr

004027f4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4027f4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4027f6:	4770      	bx	lr

004027f8 <pio_configure_pin>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4027f8:	4b53      	ldr	r3, [pc, #332]	; (402948 <pio_configure_pin+0x150>)
	switch (ul_flags & PIO_TYPE_Msk) {
  4027fa:	f001 42f0 	and.w	r2, r1, #2013265920	; 0x78000000
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4027fe:	eb03 1350 	add.w	r3, r3, r0, lsr #5
	switch (ul_flags & PIO_TYPE_Msk) {
  402802:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
{
  402806:	b470      	push	{r4, r5, r6}
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402808:	ea4f 2343 	mov.w	r3, r3, lsl #9
	switch (ul_flags & PIO_TYPE_Msk) {
  40280c:	d06d      	beq.n	4028ea <pio_configure_pin+0xf2>
  40280e:	d80b      	bhi.n	402828 <pio_configure_pin+0x30>
  402810:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
  402814:	d027      	beq.n	402866 <pio_configure_pin+0x6e>
  402816:	f1b2 5fc0 	cmp.w	r2, #402653184	; 0x18000000
  40281a:	d052      	beq.n	4028c2 <pio_configure_pin+0xca>
  40281c:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
  402820:	d038      	beq.n	402894 <pio_configure_pin+0x9c>
		return 0;
  402822:	2000      	movs	r0, #0
}
  402824:	bc70      	pop	{r4, r5, r6}
  402826:	4770      	bx	lr
	switch (ul_flags & PIO_TYPE_Msk) {
  402828:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
  40282c:	d066      	beq.n	4028fc <pio_configure_pin+0x104>
  40282e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  402832:	d063      	beq.n	4028fc <pio_configure_pin+0x104>
  402834:	f1b2 5f20 	cmp.w	r2, #671088640	; 0x28000000
  402838:	d1f3      	bne.n	402822 <pio_configure_pin+0x2a>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40283a:	f000 001f 	and.w	r0, r0, #31
  40283e:	2201      	movs	r2, #1
	if (ul_pull_up_enable) {
  402840:	07cd      	lsls	r5, r1, #31
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  402842:	fa02 f200 	lsl.w	r2, r2, r0
	p_pio->PIO_IDR = ul_mask;
  402846:	645a      	str	r2, [r3, #68]	; 0x44
	if (ul_pull_up_enable) {
  402848:	d573      	bpl.n	402932 <pio_configure_pin+0x13a>
		p_pio->PIO_PUER = ul_mask;
  40284a:	665a      	str	r2, [r3, #100]	; 0x64
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40284c:	f011 0f0a 	tst.w	r1, #10
  402850:	d06d      	beq.n	40292e <pio_configure_pin+0x136>
		p_pio->PIO_IFER = ul_mask;
  402852:	621a      	str	r2, [r3, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  402854:	078c      	lsls	r4, r1, #30
  402856:	d56e      	bpl.n	402936 <pio_configure_pin+0x13e>
		p_pio->PIO_IFSCDR = ul_mask;
  402858:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  40285c:	615a      	str	r2, [r3, #20]
	return 1;
  40285e:	2001      	movs	r0, #1
	p_pio->PIO_PER = ul_mask;
  402860:	601a      	str	r2, [r3, #0]
}
  402862:	bc70      	pop	{r4, r5, r6}
  402864:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  402866:	f000 021f 	and.w	r2, r0, #31
  40286a:	2001      	movs	r0, #1
	if (ul_pull_up_enable) {
  40286c:	07c9      	lsls	r1, r1, #31
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40286e:	fa00 f202 	lsl.w	r2, r0, r2
	p_pio->PIO_IDR = ul_mask;
  402872:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABCDSR[0];
  402874:	6f1c      	ldr	r4, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402876:	ea44 0402 	orr.w	r4, r4, r2
  40287a:	671c      	str	r4, [r3, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40287c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40287e:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  402880:	ea04 0405 	and.w	r4, r4, r5
  402884:	ea24 0402 	bic.w	r4, r4, r2
  402888:	675c      	str	r4, [r3, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  40288a:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
  40288c:	d516      	bpl.n	4028bc <pio_configure_pin+0xc4>
		p_pio->PIO_PUER = ul_mask;
  40288e:	665a      	str	r2, [r3, #100]	; 0x64
}
  402890:	bc70      	pop	{r4, r5, r6}
  402892:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  402894:	f000 021f 	and.w	r2, r0, #31
  402898:	2001      	movs	r0, #1
  40289a:	fa00 f202 	lsl.w	r2, r0, r2
	p_pio->PIO_IDR = ul_mask;
  40289e:	645a      	str	r2, [r3, #68]	; 0x44
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4028a0:	43d6      	mvns	r6, r2
		ul_sr = p_pio->PIO_ABCDSR[0];
  4028a2:	6f1d      	ldr	r5, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4028a4:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  4028a6:	4025      	ands	r5, r4
  4028a8:	4035      	ands	r5, r6
  4028aa:	671d      	str	r5, [r3, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4028ac:	6f5c      	ldr	r4, [r3, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4028ae:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  4028b0:	402c      	ands	r4, r5
  4028b2:	4034      	ands	r4, r6
  4028b4:	675c      	str	r4, [r3, #116]	; 0x74
	if (ul_pull_up_enable) {
  4028b6:	07cc      	lsls	r4, r1, #31
	p_pio->PIO_PDR = ul_mask;
  4028b8:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
  4028ba:	d4e8      	bmi.n	40288e <pio_configure_pin+0x96>
		p_pio->PIO_PUDR = ul_mask;
  4028bc:	661a      	str	r2, [r3, #96]	; 0x60
}
  4028be:	bc70      	pop	{r4, r5, r6}
  4028c0:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4028c2:	f000 021f 	and.w	r2, r0, #31
  4028c6:	2001      	movs	r0, #1
  4028c8:	fa00 f202 	lsl.w	r2, r0, r2
	p_pio->PIO_IDR = ul_mask;
  4028cc:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABCDSR[0];
  4028ce:	6f1c      	ldr	r4, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4028d0:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  4028d2:	402c      	ands	r4, r5
  4028d4:	ea24 0402 	bic.w	r4, r4, r2
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4028d8:	671c      	str	r4, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
  4028da:	07ce      	lsls	r6, r1, #31
		ul_sr = p_pio->PIO_ABCDSR[1];
  4028dc:	6f5c      	ldr	r4, [r3, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4028de:	ea44 0402 	orr.w	r4, r4, r2
  4028e2:	675c      	str	r4, [r3, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4028e4:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
  4028e6:	d5e9      	bpl.n	4028bc <pio_configure_pin+0xc4>
  4028e8:	e7d1      	b.n	40288e <pio_configure_pin+0x96>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4028ea:	f000 021f 	and.w	r2, r0, #31
  4028ee:	2001      	movs	r0, #1
  4028f0:	fa00 f202 	lsl.w	r2, r0, r2
	p_pio->PIO_IDR = ul_mask;
  4028f4:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABCDSR[0];
  4028f6:	6f1c      	ldr	r4, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4028f8:	4314      	orrs	r4, r2
  4028fa:	e7ed      	b.n	4028d8 <pio_configure_pin+0xe0>
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4028fc:	f000 001f 	and.w	r0, r0, #31
  402900:	2201      	movs	r2, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  402902:	f001 5460 	and.w	r4, r1, #939524096	; 0x38000000
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  402906:	f001 0504 	and.w	r5, r1, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40290a:	4082      	lsls	r2, r0
	if (ul_pull_up_enable) {
  40290c:	07c9      	lsls	r1, r1, #31
	p_pio->PIO_IDR = ul_mask;
  40290e:	645a      	str	r2, [r3, #68]	; 0x44
	if (ul_pull_up_enable) {
  402910:	d50b      	bpl.n	40292a <pio_configure_pin+0x132>
		p_pio->PIO_PUER = ul_mask;
  402912:	665a      	str	r2, [r3, #100]	; 0x64
	if (ul_multidrive_enable) {
  402914:	b1a5      	cbz	r5, 402940 <pio_configure_pin+0x148>
		p_pio->PIO_MDER = ul_mask;
  402916:	651a      	str	r2, [r3, #80]	; 0x50
	if (ul_default_level) {
  402918:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
  40291c:	d012      	beq.n	402944 <pio_configure_pin+0x14c>
		p_pio->PIO_CODR = ul_mask;
  40291e:	635a      	str	r2, [r3, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  402920:	611a      	str	r2, [r3, #16]
	return 1;
  402922:	2001      	movs	r0, #1
	p_pio->PIO_PER = ul_mask;
  402924:	601a      	str	r2, [r3, #0]
}
  402926:	bc70      	pop	{r4, r5, r6}
  402928:	4770      	bx	lr
		p_pio->PIO_PUDR = ul_mask;
  40292a:	661a      	str	r2, [r3, #96]	; 0x60
  40292c:	e7f2      	b.n	402914 <pio_configure_pin+0x11c>
		p_pio->PIO_IFDR = ul_mask;
  40292e:	625a      	str	r2, [r3, #36]	; 0x24
  402930:	e790      	b.n	402854 <pio_configure_pin+0x5c>
		p_pio->PIO_PUDR = ul_mask;
  402932:	661a      	str	r2, [r3, #96]	; 0x60
  402934:	e78a      	b.n	40284c <pio_configure_pin+0x54>
		if (ul_attribute & PIO_DEBOUNCE) {
  402936:	0708      	lsls	r0, r1, #28
  402938:	d590      	bpl.n	40285c <pio_configure_pin+0x64>
			p_pio->PIO_IFSCER = ul_mask;
  40293a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40293e:	e78d      	b.n	40285c <pio_configure_pin+0x64>
		p_pio->PIO_MDDR = ul_mask;
  402940:	655a      	str	r2, [r3, #84]	; 0x54
  402942:	e7e9      	b.n	402918 <pio_configure_pin+0x120>
		p_pio->PIO_SODR = ul_mask;
  402944:	631a      	str	r2, [r3, #48]	; 0x30
  402946:	e7eb      	b.n	402920 <pio_configure_pin+0x128>
  402948:	00200707 	.word	0x00200707

0040294c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40294c:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  40294e:	4b2e      	ldr	r3, [pc, #184]	; (402a08 <PIOA_Handler+0xbc>)
  402950:	482e      	ldr	r0, [pc, #184]	; (402a0c <PIOA_Handler+0xc0>)
  402952:	4798      	blx	r3
  402954:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  402956:	4b2e      	ldr	r3, [pc, #184]	; (402a10 <PIOA_Handler+0xc4>)
  402958:	482c      	ldr	r0, [pc, #176]	; (402a0c <PIOA_Handler+0xc0>)
  40295a:	4798      	blx	r3
	if (status != 0) {
  40295c:	4005      	ands	r5, r0
  40295e:	d015      	beq.n	40298c <PIOA_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  402960:	4c2c      	ldr	r4, [pc, #176]	; (402a14 <PIOA_Handler+0xc8>)
  402962:	6820      	ldr	r0, [r4, #0]
  402964:	280a      	cmp	r0, #10
  402966:	d019      	beq.n	40299c <PIOA_Handler+0x50>
  402968:	6920      	ldr	r0, [r4, #16]
  40296a:	280a      	cmp	r0, #10
  40296c:	d01f      	beq.n	4029ae <PIOA_Handler+0x62>
  40296e:	6a20      	ldr	r0, [r4, #32]
  402970:	280a      	cmp	r0, #10
  402972:	d025      	beq.n	4029c0 <PIOA_Handler+0x74>
  402974:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402976:	280a      	cmp	r0, #10
  402978:	d02b      	beq.n	4029d2 <PIOA_Handler+0x86>
  40297a:	6c20      	ldr	r0, [r4, #64]	; 0x40
  40297c:	280a      	cmp	r0, #10
  40297e:	d031      	beq.n	4029e4 <PIOA_Handler+0x98>
  402980:	6d20      	ldr	r0, [r4, #80]	; 0x50
  402982:	280a      	cmp	r0, #10
  402984:	d037      	beq.n	4029f6 <PIOA_Handler+0xaa>
  402986:	6e20      	ldr	r0, [r4, #96]	; 0x60
  402988:	280a      	cmp	r0, #10
  40298a:	d000      	beq.n	40298e <PIOA_Handler+0x42>
  40298c:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40298e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  402990:	4229      	tst	r1, r5
  402992:	d0fb      	beq.n	40298c <PIOA_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402994:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	pio_handler_process(PIOA, ID_PIOA);
}
  402996:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40299a:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40299c:	6861      	ldr	r1, [r4, #4]
  40299e:	420d      	tst	r5, r1
  4029a0:	d0e2      	beq.n	402968 <PIOA_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4029a2:	68e3      	ldr	r3, [r4, #12]
  4029a4:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4029a6:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  4029a8:	439d      	bics	r5, r3
  4029aa:	d0ef      	beq.n	40298c <PIOA_Handler+0x40>
  4029ac:	e7dc      	b.n	402968 <PIOA_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4029ae:	6961      	ldr	r1, [r4, #20]
  4029b0:	4229      	tst	r1, r5
  4029b2:	d0dc      	beq.n	40296e <PIOA_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4029b4:	69e3      	ldr	r3, [r4, #28]
  4029b6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4029b8:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  4029ba:	439d      	bics	r5, r3
  4029bc:	d0e6      	beq.n	40298c <PIOA_Handler+0x40>
  4029be:	e7d6      	b.n	40296e <PIOA_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4029c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
  4029c2:	4229      	tst	r1, r5
  4029c4:	d0d6      	beq.n	402974 <PIOA_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4029c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4029c8:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4029ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  4029cc:	439d      	bics	r5, r3
  4029ce:	d0dd      	beq.n	40298c <PIOA_Handler+0x40>
  4029d0:	e7d0      	b.n	402974 <PIOA_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4029d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4029d4:	4229      	tst	r1, r5
  4029d6:	d0d0      	beq.n	40297a <PIOA_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4029d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4029da:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4029dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  4029de:	439d      	bics	r5, r3
  4029e0:	d0d4      	beq.n	40298c <PIOA_Handler+0x40>
  4029e2:	e7ca      	b.n	40297a <PIOA_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4029e4:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4029e6:	4229      	tst	r1, r5
  4029e8:	d0ca      	beq.n	402980 <PIOA_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4029ea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  4029ec:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4029ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  4029f0:	439d      	bics	r5, r3
  4029f2:	d0cb      	beq.n	40298c <PIOA_Handler+0x40>
  4029f4:	e7c4      	b.n	402980 <PIOA_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4029f6:	6d61      	ldr	r1, [r4, #84]	; 0x54
  4029f8:	4229      	tst	r1, r5
  4029fa:	d0c4      	beq.n	402986 <PIOA_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4029fc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  4029fe:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402a00:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  402a02:	439d      	bics	r5, r3
  402a04:	d0c2      	beq.n	40298c <PIOA_Handler+0x40>
  402a06:	e7be      	b.n	402986 <PIOA_Handler+0x3a>
  402a08:	004027f1 	.word	0x004027f1
  402a0c:	400e0e00 	.word	0x400e0e00
  402a10:	004027f5 	.word	0x004027f5
  402a14:	2042b4c0 	.word	0x2042b4c0

00402a18 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  402a18:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  402a1a:	4b2e      	ldr	r3, [pc, #184]	; (402ad4 <PIOB_Handler+0xbc>)
  402a1c:	482e      	ldr	r0, [pc, #184]	; (402ad8 <PIOB_Handler+0xc0>)
  402a1e:	4798      	blx	r3
  402a20:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  402a22:	4b2e      	ldr	r3, [pc, #184]	; (402adc <PIOB_Handler+0xc4>)
  402a24:	482c      	ldr	r0, [pc, #176]	; (402ad8 <PIOB_Handler+0xc0>)
  402a26:	4798      	blx	r3
	if (status != 0) {
  402a28:	4005      	ands	r5, r0
  402a2a:	d015      	beq.n	402a58 <PIOB_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  402a2c:	4c2c      	ldr	r4, [pc, #176]	; (402ae0 <PIOB_Handler+0xc8>)
  402a2e:	6820      	ldr	r0, [r4, #0]
  402a30:	280b      	cmp	r0, #11
  402a32:	d019      	beq.n	402a68 <PIOB_Handler+0x50>
  402a34:	6920      	ldr	r0, [r4, #16]
  402a36:	280b      	cmp	r0, #11
  402a38:	d01f      	beq.n	402a7a <PIOB_Handler+0x62>
  402a3a:	6a20      	ldr	r0, [r4, #32]
  402a3c:	280b      	cmp	r0, #11
  402a3e:	d025      	beq.n	402a8c <PIOB_Handler+0x74>
  402a40:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402a42:	280b      	cmp	r0, #11
  402a44:	d02b      	beq.n	402a9e <PIOB_Handler+0x86>
  402a46:	6c20      	ldr	r0, [r4, #64]	; 0x40
  402a48:	280b      	cmp	r0, #11
  402a4a:	d031      	beq.n	402ab0 <PIOB_Handler+0x98>
  402a4c:	6d20      	ldr	r0, [r4, #80]	; 0x50
  402a4e:	280b      	cmp	r0, #11
  402a50:	d037      	beq.n	402ac2 <PIOB_Handler+0xaa>
  402a52:	6e20      	ldr	r0, [r4, #96]	; 0x60
  402a54:	280b      	cmp	r0, #11
  402a56:	d000      	beq.n	402a5a <PIOB_Handler+0x42>
  402a58:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402a5a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  402a5c:	4229      	tst	r1, r5
  402a5e:	d0fb      	beq.n	402a58 <PIOB_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402a60:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    pio_handler_process(PIOB, ID_PIOB);
}
  402a62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402a66:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402a68:	6861      	ldr	r1, [r4, #4]
  402a6a:	420d      	tst	r5, r1
  402a6c:	d0e2      	beq.n	402a34 <PIOB_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402a6e:	68e3      	ldr	r3, [r4, #12]
  402a70:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402a72:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  402a74:	439d      	bics	r5, r3
  402a76:	d0ef      	beq.n	402a58 <PIOB_Handler+0x40>
  402a78:	e7dc      	b.n	402a34 <PIOB_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402a7a:	6961      	ldr	r1, [r4, #20]
  402a7c:	4229      	tst	r1, r5
  402a7e:	d0dc      	beq.n	402a3a <PIOB_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402a80:	69e3      	ldr	r3, [r4, #28]
  402a82:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402a84:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  402a86:	439d      	bics	r5, r3
  402a88:	d0e6      	beq.n	402a58 <PIOB_Handler+0x40>
  402a8a:	e7d6      	b.n	402a3a <PIOB_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402a8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  402a8e:	4229      	tst	r1, r5
  402a90:	d0d6      	beq.n	402a40 <PIOB_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402a92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402a94:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402a96:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  402a98:	439d      	bics	r5, r3
  402a9a:	d0dd      	beq.n	402a58 <PIOB_Handler+0x40>
  402a9c:	e7d0      	b.n	402a40 <PIOB_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402a9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402aa0:	4229      	tst	r1, r5
  402aa2:	d0d0      	beq.n	402a46 <PIOB_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402aa4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402aa6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402aa8:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  402aaa:	439d      	bics	r5, r3
  402aac:	d0d4      	beq.n	402a58 <PIOB_Handler+0x40>
  402aae:	e7ca      	b.n	402a46 <PIOB_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402ab0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  402ab2:	4229      	tst	r1, r5
  402ab4:	d0ca      	beq.n	402a4c <PIOB_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402ab6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  402ab8:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402aba:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  402abc:	439d      	bics	r5, r3
  402abe:	d0cb      	beq.n	402a58 <PIOB_Handler+0x40>
  402ac0:	e7c4      	b.n	402a4c <PIOB_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402ac2:	6d61      	ldr	r1, [r4, #84]	; 0x54
  402ac4:	4229      	tst	r1, r5
  402ac6:	d0c4      	beq.n	402a52 <PIOB_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402ac8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  402aca:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402acc:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  402ace:	439d      	bics	r5, r3
  402ad0:	d0c2      	beq.n	402a58 <PIOB_Handler+0x40>
  402ad2:	e7be      	b.n	402a52 <PIOB_Handler+0x3a>
  402ad4:	004027f1 	.word	0x004027f1
  402ad8:	400e1000 	.word	0x400e1000
  402adc:	004027f5 	.word	0x004027f5
  402ae0:	2042b4c0 	.word	0x2042b4c0

00402ae4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  402ae4:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  402ae6:	4b2e      	ldr	r3, [pc, #184]	; (402ba0 <PIOC_Handler+0xbc>)
  402ae8:	482e      	ldr	r0, [pc, #184]	; (402ba4 <PIOC_Handler+0xc0>)
  402aea:	4798      	blx	r3
  402aec:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  402aee:	4b2e      	ldr	r3, [pc, #184]	; (402ba8 <PIOC_Handler+0xc4>)
  402af0:	482c      	ldr	r0, [pc, #176]	; (402ba4 <PIOC_Handler+0xc0>)
  402af2:	4798      	blx	r3
	if (status != 0) {
  402af4:	4005      	ands	r5, r0
  402af6:	d015      	beq.n	402b24 <PIOC_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  402af8:	4c2c      	ldr	r4, [pc, #176]	; (402bac <PIOC_Handler+0xc8>)
  402afa:	6820      	ldr	r0, [r4, #0]
  402afc:	280c      	cmp	r0, #12
  402afe:	d019      	beq.n	402b34 <PIOC_Handler+0x50>
  402b00:	6920      	ldr	r0, [r4, #16]
  402b02:	280c      	cmp	r0, #12
  402b04:	d01f      	beq.n	402b46 <PIOC_Handler+0x62>
  402b06:	6a20      	ldr	r0, [r4, #32]
  402b08:	280c      	cmp	r0, #12
  402b0a:	d025      	beq.n	402b58 <PIOC_Handler+0x74>
  402b0c:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402b0e:	280c      	cmp	r0, #12
  402b10:	d02b      	beq.n	402b6a <PIOC_Handler+0x86>
  402b12:	6c20      	ldr	r0, [r4, #64]	; 0x40
  402b14:	280c      	cmp	r0, #12
  402b16:	d031      	beq.n	402b7c <PIOC_Handler+0x98>
  402b18:	6d20      	ldr	r0, [r4, #80]	; 0x50
  402b1a:	280c      	cmp	r0, #12
  402b1c:	d037      	beq.n	402b8e <PIOC_Handler+0xaa>
  402b1e:	6e20      	ldr	r0, [r4, #96]	; 0x60
  402b20:	280c      	cmp	r0, #12
  402b22:	d000      	beq.n	402b26 <PIOC_Handler+0x42>
  402b24:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402b26:	6e61      	ldr	r1, [r4, #100]	; 0x64
  402b28:	4229      	tst	r1, r5
  402b2a:	d0fb      	beq.n	402b24 <PIOC_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402b2c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	pio_handler_process(PIOC, ID_PIOC);
}
  402b2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402b32:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402b34:	6861      	ldr	r1, [r4, #4]
  402b36:	420d      	tst	r5, r1
  402b38:	d0e2      	beq.n	402b00 <PIOC_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402b3a:	68e3      	ldr	r3, [r4, #12]
  402b3c:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402b3e:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  402b40:	439d      	bics	r5, r3
  402b42:	d0ef      	beq.n	402b24 <PIOC_Handler+0x40>
  402b44:	e7dc      	b.n	402b00 <PIOC_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402b46:	6961      	ldr	r1, [r4, #20]
  402b48:	4229      	tst	r1, r5
  402b4a:	d0dc      	beq.n	402b06 <PIOC_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402b4c:	69e3      	ldr	r3, [r4, #28]
  402b4e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402b50:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  402b52:	439d      	bics	r5, r3
  402b54:	d0e6      	beq.n	402b24 <PIOC_Handler+0x40>
  402b56:	e7d6      	b.n	402b06 <PIOC_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402b58:	6a61      	ldr	r1, [r4, #36]	; 0x24
  402b5a:	4229      	tst	r1, r5
  402b5c:	d0d6      	beq.n	402b0c <PIOC_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402b5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402b60:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402b62:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  402b64:	439d      	bics	r5, r3
  402b66:	d0dd      	beq.n	402b24 <PIOC_Handler+0x40>
  402b68:	e7d0      	b.n	402b0c <PIOC_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402b6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402b6c:	4229      	tst	r1, r5
  402b6e:	d0d0      	beq.n	402b12 <PIOC_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402b70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402b72:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402b74:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  402b76:	439d      	bics	r5, r3
  402b78:	d0d4      	beq.n	402b24 <PIOC_Handler+0x40>
  402b7a:	e7ca      	b.n	402b12 <PIOC_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402b7c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  402b7e:	4229      	tst	r1, r5
  402b80:	d0ca      	beq.n	402b18 <PIOC_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402b82:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  402b84:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402b86:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  402b88:	439d      	bics	r5, r3
  402b8a:	d0cb      	beq.n	402b24 <PIOC_Handler+0x40>
  402b8c:	e7c4      	b.n	402b18 <PIOC_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402b8e:	6d61      	ldr	r1, [r4, #84]	; 0x54
  402b90:	4229      	tst	r1, r5
  402b92:	d0c4      	beq.n	402b1e <PIOC_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402b94:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  402b96:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402b98:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  402b9a:	439d      	bics	r5, r3
  402b9c:	d0c2      	beq.n	402b24 <PIOC_Handler+0x40>
  402b9e:	e7be      	b.n	402b1e <PIOC_Handler+0x3a>
  402ba0:	004027f1 	.word	0x004027f1
  402ba4:	400e1200 	.word	0x400e1200
  402ba8:	004027f5 	.word	0x004027f5
  402bac:	2042b4c0 	.word	0x2042b4c0

00402bb0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  402bb0:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  402bb2:	4b2e      	ldr	r3, [pc, #184]	; (402c6c <PIOD_Handler+0xbc>)
  402bb4:	482e      	ldr	r0, [pc, #184]	; (402c70 <PIOD_Handler+0xc0>)
  402bb6:	4798      	blx	r3
  402bb8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  402bba:	4b2e      	ldr	r3, [pc, #184]	; (402c74 <PIOD_Handler+0xc4>)
  402bbc:	482c      	ldr	r0, [pc, #176]	; (402c70 <PIOD_Handler+0xc0>)
  402bbe:	4798      	blx	r3
	if (status != 0) {
  402bc0:	4005      	ands	r5, r0
  402bc2:	d015      	beq.n	402bf0 <PIOD_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  402bc4:	4c2c      	ldr	r4, [pc, #176]	; (402c78 <PIOD_Handler+0xc8>)
  402bc6:	6820      	ldr	r0, [r4, #0]
  402bc8:	2810      	cmp	r0, #16
  402bca:	d019      	beq.n	402c00 <PIOD_Handler+0x50>
  402bcc:	6920      	ldr	r0, [r4, #16]
  402bce:	2810      	cmp	r0, #16
  402bd0:	d01f      	beq.n	402c12 <PIOD_Handler+0x62>
  402bd2:	6a20      	ldr	r0, [r4, #32]
  402bd4:	2810      	cmp	r0, #16
  402bd6:	d025      	beq.n	402c24 <PIOD_Handler+0x74>
  402bd8:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402bda:	2810      	cmp	r0, #16
  402bdc:	d02b      	beq.n	402c36 <PIOD_Handler+0x86>
  402bde:	6c20      	ldr	r0, [r4, #64]	; 0x40
  402be0:	2810      	cmp	r0, #16
  402be2:	d031      	beq.n	402c48 <PIOD_Handler+0x98>
  402be4:	6d20      	ldr	r0, [r4, #80]	; 0x50
  402be6:	2810      	cmp	r0, #16
  402be8:	d037      	beq.n	402c5a <PIOD_Handler+0xaa>
  402bea:	6e20      	ldr	r0, [r4, #96]	; 0x60
  402bec:	2810      	cmp	r0, #16
  402bee:	d000      	beq.n	402bf2 <PIOD_Handler+0x42>
  402bf0:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402bf2:	6e61      	ldr	r1, [r4, #100]	; 0x64
  402bf4:	4229      	tst	r1, r5
  402bf6:	d0fb      	beq.n	402bf0 <PIOD_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402bf8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	pio_handler_process(PIOD, ID_PIOD);
}
  402bfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402bfe:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402c00:	6861      	ldr	r1, [r4, #4]
  402c02:	420d      	tst	r5, r1
  402c04:	d0e2      	beq.n	402bcc <PIOD_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402c06:	68e3      	ldr	r3, [r4, #12]
  402c08:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402c0a:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  402c0c:	439d      	bics	r5, r3
  402c0e:	d0ef      	beq.n	402bf0 <PIOD_Handler+0x40>
  402c10:	e7dc      	b.n	402bcc <PIOD_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402c12:	6961      	ldr	r1, [r4, #20]
  402c14:	4229      	tst	r1, r5
  402c16:	d0dc      	beq.n	402bd2 <PIOD_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402c18:	69e3      	ldr	r3, [r4, #28]
  402c1a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402c1c:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  402c1e:	439d      	bics	r5, r3
  402c20:	d0e6      	beq.n	402bf0 <PIOD_Handler+0x40>
  402c22:	e7d6      	b.n	402bd2 <PIOD_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402c24:	6a61      	ldr	r1, [r4, #36]	; 0x24
  402c26:	4229      	tst	r1, r5
  402c28:	d0d6      	beq.n	402bd8 <PIOD_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402c2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402c2c:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402c2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  402c30:	439d      	bics	r5, r3
  402c32:	d0dd      	beq.n	402bf0 <PIOD_Handler+0x40>
  402c34:	e7d0      	b.n	402bd8 <PIOD_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402c36:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402c38:	4229      	tst	r1, r5
  402c3a:	d0d0      	beq.n	402bde <PIOD_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402c3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402c3e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402c40:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  402c42:	439d      	bics	r5, r3
  402c44:	d0d4      	beq.n	402bf0 <PIOD_Handler+0x40>
  402c46:	e7ca      	b.n	402bde <PIOD_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402c48:	6c61      	ldr	r1, [r4, #68]	; 0x44
  402c4a:	4229      	tst	r1, r5
  402c4c:	d0ca      	beq.n	402be4 <PIOD_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402c4e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  402c50:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402c52:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  402c54:	439d      	bics	r5, r3
  402c56:	d0cb      	beq.n	402bf0 <PIOD_Handler+0x40>
  402c58:	e7c4      	b.n	402be4 <PIOD_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402c5a:	6d61      	ldr	r1, [r4, #84]	; 0x54
  402c5c:	4229      	tst	r1, r5
  402c5e:	d0c4      	beq.n	402bea <PIOD_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402c60:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  402c62:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402c64:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  402c66:	439d      	bics	r5, r3
  402c68:	d0c2      	beq.n	402bf0 <PIOD_Handler+0x40>
  402c6a:	e7be      	b.n	402bea <PIOD_Handler+0x3a>
  402c6c:	004027f1 	.word	0x004027f1
  402c70:	400e1400 	.word	0x400e1400
  402c74:	004027f5 	.word	0x004027f5
  402c78:	2042b4c0 	.word	0x2042b4c0

00402c7c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  402c7c:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  402c7e:	4b2e      	ldr	r3, [pc, #184]	; (402d38 <PIOE_Handler+0xbc>)
  402c80:	482e      	ldr	r0, [pc, #184]	; (402d3c <PIOE_Handler+0xc0>)
  402c82:	4798      	blx	r3
  402c84:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  402c86:	4b2e      	ldr	r3, [pc, #184]	; (402d40 <PIOE_Handler+0xc4>)
  402c88:	482c      	ldr	r0, [pc, #176]	; (402d3c <PIOE_Handler+0xc0>)
  402c8a:	4798      	blx	r3
	if (status != 0) {
  402c8c:	4005      	ands	r5, r0
  402c8e:	d015      	beq.n	402cbc <PIOE_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  402c90:	4c2c      	ldr	r4, [pc, #176]	; (402d44 <PIOE_Handler+0xc8>)
  402c92:	6820      	ldr	r0, [r4, #0]
  402c94:	2811      	cmp	r0, #17
  402c96:	d019      	beq.n	402ccc <PIOE_Handler+0x50>
  402c98:	6920      	ldr	r0, [r4, #16]
  402c9a:	2811      	cmp	r0, #17
  402c9c:	d01f      	beq.n	402cde <PIOE_Handler+0x62>
  402c9e:	6a20      	ldr	r0, [r4, #32]
  402ca0:	2811      	cmp	r0, #17
  402ca2:	d025      	beq.n	402cf0 <PIOE_Handler+0x74>
  402ca4:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402ca6:	2811      	cmp	r0, #17
  402ca8:	d02b      	beq.n	402d02 <PIOE_Handler+0x86>
  402caa:	6c20      	ldr	r0, [r4, #64]	; 0x40
  402cac:	2811      	cmp	r0, #17
  402cae:	d031      	beq.n	402d14 <PIOE_Handler+0x98>
  402cb0:	6d20      	ldr	r0, [r4, #80]	; 0x50
  402cb2:	2811      	cmp	r0, #17
  402cb4:	d037      	beq.n	402d26 <PIOE_Handler+0xaa>
  402cb6:	6e20      	ldr	r0, [r4, #96]	; 0x60
  402cb8:	2811      	cmp	r0, #17
  402cba:	d000      	beq.n	402cbe <PIOE_Handler+0x42>
  402cbc:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402cbe:	6e61      	ldr	r1, [r4, #100]	; 0x64
  402cc0:	4229      	tst	r1, r5
  402cc2:	d0fb      	beq.n	402cbc <PIOE_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402cc4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	pio_handler_process(PIOE, ID_PIOE);
}
  402cc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402cca:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402ccc:	6861      	ldr	r1, [r4, #4]
  402cce:	420d      	tst	r5, r1
  402cd0:	d0e2      	beq.n	402c98 <PIOE_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402cd2:	68e3      	ldr	r3, [r4, #12]
  402cd4:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402cd6:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  402cd8:	439d      	bics	r5, r3
  402cda:	d0ef      	beq.n	402cbc <PIOE_Handler+0x40>
  402cdc:	e7dc      	b.n	402c98 <PIOE_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402cde:	6961      	ldr	r1, [r4, #20]
  402ce0:	4229      	tst	r1, r5
  402ce2:	d0dc      	beq.n	402c9e <PIOE_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402ce4:	69e3      	ldr	r3, [r4, #28]
  402ce6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402ce8:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  402cea:	439d      	bics	r5, r3
  402cec:	d0e6      	beq.n	402cbc <PIOE_Handler+0x40>
  402cee:	e7d6      	b.n	402c9e <PIOE_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402cf0:	6a61      	ldr	r1, [r4, #36]	; 0x24
  402cf2:	4229      	tst	r1, r5
  402cf4:	d0d6      	beq.n	402ca4 <PIOE_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402cf6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402cf8:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402cfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  402cfc:	439d      	bics	r5, r3
  402cfe:	d0dd      	beq.n	402cbc <PIOE_Handler+0x40>
  402d00:	e7d0      	b.n	402ca4 <PIOE_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402d02:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402d04:	4229      	tst	r1, r5
  402d06:	d0d0      	beq.n	402caa <PIOE_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402d08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402d0a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402d0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  402d0e:	439d      	bics	r5, r3
  402d10:	d0d4      	beq.n	402cbc <PIOE_Handler+0x40>
  402d12:	e7ca      	b.n	402caa <PIOE_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402d14:	6c61      	ldr	r1, [r4, #68]	; 0x44
  402d16:	4229      	tst	r1, r5
  402d18:	d0ca      	beq.n	402cb0 <PIOE_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402d1a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  402d1c:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402d1e:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  402d20:	439d      	bics	r5, r3
  402d22:	d0cb      	beq.n	402cbc <PIOE_Handler+0x40>
  402d24:	e7c4      	b.n	402cb0 <PIOE_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402d26:	6d61      	ldr	r1, [r4, #84]	; 0x54
  402d28:	4229      	tst	r1, r5
  402d2a:	d0c4      	beq.n	402cb6 <PIOE_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402d2c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  402d2e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402d30:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  402d32:	439d      	bics	r5, r3
  402d34:	d0c2      	beq.n	402cbc <PIOE_Handler+0x40>
  402d36:	e7be      	b.n	402cb6 <PIOE_Handler+0x3a>
  402d38:	004027f1 	.word	0x004027f1
  402d3c:	400e1600 	.word	0x400e1600
  402d40:	004027f5 	.word	0x004027f5
  402d44:	2042b4c0 	.word	0x2042b4c0

00402d48 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  402d48:	3802      	subs	r0, #2
  402d4a:	2802      	cmp	r0, #2
  402d4c:	d80d      	bhi.n	402d6a <pmc_mck_set_division+0x22>
  402d4e:	4b08      	ldr	r3, [pc, #32]	; (402d70 <pmc_mck_set_division+0x28>)
  402d50:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  402d54:	4907      	ldr	r1, [pc, #28]	; (402d74 <pmc_mck_set_division+0x2c>)
  402d56:	6b0b      	ldr	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402d58:	460a      	mov	r2, r1
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  402d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  402d5e:	4303      	orrs	r3, r0
	PMC->PMC_MCKR =
  402d60:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402d62:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402d64:	071b      	lsls	r3, r3, #28
  402d66:	d5fc      	bpl.n	402d62 <pmc_mck_set_division+0x1a>
}
  402d68:	4770      	bx	lr
{
  402d6a:	2000      	movs	r0, #0
  402d6c:	e7f2      	b.n	402d54 <pmc_mck_set_division+0xc>
  402d6e:	bf00      	nop
  402d70:	004086f0 	.word	0x004086f0
  402d74:	400e0600 	.word	0x400e0600

00402d78 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402d78:	4913      	ldr	r1, [pc, #76]	; (402dc8 <pmc_switch_mck_to_pllack+0x50>)
  402d7a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402d80:	4318      	orrs	r0, r3
  402d82:	6308      	str	r0, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402d84:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  402d86:	0718      	lsls	r0, r3, #28
  402d88:	d407      	bmi.n	402d9a <pmc_switch_mck_to_pllack+0x22>
  402d8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402d8e:	e001      	b.n	402d94 <pmc_switch_mck_to_pllack+0x1c>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402d90:	3b01      	subs	r3, #1
  402d92:	d016      	beq.n	402dc2 <pmc_switch_mck_to_pllack+0x4a>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402d94:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402d96:	0712      	lsls	r2, r2, #28
  402d98:	d5fa      	bpl.n	402d90 <pmc_switch_mck_to_pllack+0x18>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402d9a:	490b      	ldr	r1, [pc, #44]	; (402dc8 <pmc_switch_mck_to_pllack+0x50>)
  402d9c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402d9e:	f023 0303 	bic.w	r3, r3, #3
  402da2:	f043 0302 	orr.w	r3, r3, #2
  402da6:	630b      	str	r3, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402da8:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  402daa:	0718      	lsls	r0, r3, #28
  402dac:	d407      	bmi.n	402dbe <pmc_switch_mck_to_pllack+0x46>
  402dae:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402db2:	e001      	b.n	402db8 <pmc_switch_mck_to_pllack+0x40>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402db4:	3b01      	subs	r3, #1
  402db6:	d004      	beq.n	402dc2 <pmc_switch_mck_to_pllack+0x4a>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402db8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402dba:	0712      	lsls	r2, r2, #28
  402dbc:	d5fa      	bpl.n	402db4 <pmc_switch_mck_to_pllack+0x3c>
			return 1;
		}
	}

	return 0;
  402dbe:	2000      	movs	r0, #0
}
  402dc0:	4770      	bx	lr
			return 1;
  402dc2:	2001      	movs	r0, #1
  402dc4:	4770      	bx	lr
  402dc6:	bf00      	nop
  402dc8:	400e0600 	.word	0x400e0600

00402dcc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402dcc:	b9a0      	cbnz	r0, 402df8 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402dce:	4b0e      	ldr	r3, [pc, #56]	; (402e08 <pmc_switch_mainck_to_xtal+0x3c>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  402dd0:	0209      	lsls	r1, r1, #8
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402dd2:	480e      	ldr	r0, [pc, #56]	; (402e0c <pmc_switch_mainck_to_xtal+0x40>)
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  402dd4:	b289      	uxth	r1, r1
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402dd6:	461a      	mov	r2, r3
{
  402dd8:	b430      	push	{r4, r5}
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402dda:	4c0d      	ldr	r4, [pc, #52]	; (402e10 <pmc_switch_mainck_to_xtal+0x44>)
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402ddc:	6a1d      	ldr	r5, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402dde:	402c      	ands	r4, r5
  402de0:	4320      	orrs	r0, r4
  402de2:	4301      	orrs	r1, r0
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402de4:	6219      	str	r1, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402de6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402de8:	07db      	lsls	r3, r3, #31
  402dea:	d5fc      	bpl.n	402de6 <pmc_switch_mainck_to_xtal+0x1a>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402dec:	6a11      	ldr	r1, [r2, #32]
  402dee:	4b09      	ldr	r3, [pc, #36]	; (402e14 <pmc_switch_mainck_to_xtal+0x48>)
  402df0:	430b      	orrs	r3, r1
  402df2:	6213      	str	r3, [r2, #32]
	}
}
  402df4:	bc30      	pop	{r4, r5}
  402df6:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402df8:	4903      	ldr	r1, [pc, #12]	; (402e08 <pmc_switch_mainck_to_xtal+0x3c>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402dfa:	4a07      	ldr	r2, [pc, #28]	; (402e18 <pmc_switch_mainck_to_xtal+0x4c>)
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402dfc:	6a08      	ldr	r0, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402dfe:	4b07      	ldr	r3, [pc, #28]	; (402e1c <pmc_switch_mainck_to_xtal+0x50>)
  402e00:	4002      	ands	r2, r0
  402e02:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402e04:	620b      	str	r3, [r1, #32]
  402e06:	4770      	bx	lr
  402e08:	400e0600 	.word	0x400e0600
  402e0c:	00370001 	.word	0x00370001
  402e10:	ffc8fffc 	.word	0xffc8fffc
  402e14:	01370000 	.word	0x01370000
  402e18:	fec8fffc 	.word	0xfec8fffc
  402e1c:	01370002 	.word	0x01370002

00402e20 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402e20:	4b02      	ldr	r3, [pc, #8]	; (402e2c <pmc_osc_is_ready_mainck+0xc>)
  402e22:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402e24:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402e28:	4770      	bx	lr
  402e2a:	bf00      	nop
  402e2c:	400e0600 	.word	0x400e0600

00402e30 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402e30:	4b02      	ldr	r3, [pc, #8]	; (402e3c <pmc_disable_pllack+0xc>)
  402e32:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402e36:	629a      	str	r2, [r3, #40]	; 0x28
  402e38:	4770      	bx	lr
  402e3a:	bf00      	nop
  402e3c:	400e0600 	.word	0x400e0600

00402e40 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402e40:	4b02      	ldr	r3, [pc, #8]	; (402e4c <pmc_is_locked_pllack+0xc>)
  402e42:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402e44:	f000 0002 	and.w	r0, r0, #2
  402e48:	4770      	bx	lr
  402e4a:	bf00      	nop
  402e4c:	400e0600 	.word	0x400e0600

00402e50 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  402e50:	283f      	cmp	r0, #63	; 0x3f
  402e52:	d81a      	bhi.n	402e8a <pmc_enable_periph_clk+0x3a>
		return 1;
	}

	if (ul_id < 32) {
  402e54:	281f      	cmp	r0, #31
  402e56:	d80a      	bhi.n	402e6e <pmc_enable_periph_clk+0x1e>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402e58:	2301      	movs	r3, #1
  402e5a:	4a0e      	ldr	r2, [pc, #56]	; (402e94 <pmc_enable_periph_clk+0x44>)
  402e5c:	fa03 f000 	lsl.w	r0, r3, r0
  402e60:	6991      	ldr	r1, [r2, #24]
  402e62:	ea30 0301 	bics.w	r3, r0, r1
  402e66:	d012      	beq.n	402e8e <pmc_enable_periph_clk+0x3e>
			PMC->PMC_PCER0 = 1 << ul_id;
  402e68:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402e6a:	2000      	movs	r0, #0
  402e6c:	4770      	bx	lr
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402e6e:	2301      	movs	r3, #1
		ul_id -= 32;
  402e70:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402e72:	4a08      	ldr	r2, [pc, #32]	; (402e94 <pmc_enable_periph_clk+0x44>)
  402e74:	fa03 f000 	lsl.w	r0, r3, r0
  402e78:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
  402e7c:	ea30 0303 	bics.w	r3, r0, r3
  402e80:	d005      	beq.n	402e8e <pmc_enable_periph_clk+0x3e>
			PMC->PMC_PCER1 = 1 << ul_id;
  402e82:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
	return 0;
  402e86:	2000      	movs	r0, #0
  402e88:	4770      	bx	lr
		return 1;
  402e8a:	2001      	movs	r0, #1
  402e8c:	4770      	bx	lr
	return 0;
  402e8e:	2000      	movs	r0, #0
}
  402e90:	4770      	bx	lr
  402e92:	bf00      	nop
  402e94:	400e0600 	.word	0x400e0600

00402e98 <pmc_pck_set_prescaler>:
 *
 * \param ul_id Peripheral ID.
 * \param ul_pres Prescaler value.
 */
void pmc_pck_set_prescaler(uint32_t ul_id, uint32_t ul_pres)
{
  402e98:	4b0b      	ldr	r3, [pc, #44]	; (402ec8 <pmc_pck_set_prescaler+0x30>)
  402e9a:	f44f 7280 	mov.w	r2, #256	; 0x100
  402e9e:	b410      	push	{r4}
  402ea0:	eb03 0480 	add.w	r4, r3, r0, lsl #2
  402ea4:	fa02 f000 	lsl.w	r0, r2, r0
	PMC->PMC_PCK[ul_id] =
			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_PRES_Msk) | ul_pres;
  402ea8:	6c22      	ldr	r2, [r4, #64]	; 0x40
  402eaa:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  402eae:	4311      	orrs	r1, r2
	PMC->PMC_PCK[ul_id] =
  402eb0:	6421      	str	r1, [r4, #64]	; 0x40
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  402eb2:	e002      	b.n	402eba <pmc_pck_set_prescaler+0x22>
			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
  402eb4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  402eb6:	4202      	tst	r2, r0
  402eb8:	d102      	bne.n	402ec0 <pmc_pck_set_prescaler+0x28>
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  402eba:	681a      	ldr	r2, [r3, #0]
  402ebc:	4202      	tst	r2, r0
  402ebe:	d1f9      	bne.n	402eb4 <pmc_pck_set_prescaler+0x1c>
}
  402ec0:	f85d 4b04 	ldr.w	r4, [sp], #4
  402ec4:	4770      	bx	lr
  402ec6:	bf00      	nop
  402ec8:	400e0600 	.word	0x400e0600

00402ecc <pmc_pck_set_source>:
 *
 * \param ul_id Peripheral ID.
 * \param ul_source Source selection value.
 */
void pmc_pck_set_source(uint32_t ul_id, uint32_t ul_source)
{
  402ecc:	4b0b      	ldr	r3, [pc, #44]	; (402efc <pmc_pck_set_source+0x30>)
  402ece:	f44f 7280 	mov.w	r2, #256	; 0x100
  402ed2:	b410      	push	{r4}
  402ed4:	eb03 0480 	add.w	r4, r3, r0, lsl #2
  402ed8:	fa02 f000 	lsl.w	r0, r2, r0
	PMC->PMC_PCK[ul_id] =
			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_CSS_Msk) | ul_source;
  402edc:	6c22      	ldr	r2, [r4, #64]	; 0x40
  402ede:	f022 0207 	bic.w	r2, r2, #7
  402ee2:	4311      	orrs	r1, r2
	PMC->PMC_PCK[ul_id] =
  402ee4:	6421      	str	r1, [r4, #64]	; 0x40
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  402ee6:	e002      	b.n	402eee <pmc_pck_set_source+0x22>
			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
  402ee8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  402eea:	4202      	tst	r2, r0
  402eec:	d102      	bne.n	402ef4 <pmc_pck_set_source+0x28>
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  402eee:	681a      	ldr	r2, [r3, #0]
  402ef0:	4202      	tst	r2, r0
  402ef2:	d1f9      	bne.n	402ee8 <pmc_pck_set_source+0x1c>
}
  402ef4:	f85d 4b04 	ldr.w	r4, [sp], #4
  402ef8:	4770      	bx	lr
  402efa:	bf00      	nop
  402efc:	400e0600 	.word	0x400e0600

00402f00 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  402f00:	f44f 7380 	mov.w	r3, #256	; 0x100
  402f04:	4a02      	ldr	r2, [pc, #8]	; (402f10 <pmc_enable_pck+0x10>)
  402f06:	fa03 f000 	lsl.w	r0, r3, r0
  402f0a:	6010      	str	r0, [r2, #0]
  402f0c:	4770      	bx	lr
  402f0e:	bf00      	nop
  402f10:	400e0600 	.word	0x400e0600

00402f14 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402f14:	e7fe      	b.n	402f14 <Dummy_Handler>
  402f16:	bf00      	nop

00402f18 <Dummy_Handler2>:
	while (1) {
	}
}

void Dummy_Handler2(void)
{
  402f18:	e7fe      	b.n	402f18 <Dummy_Handler2>
  402f1a:	bf00      	nop

00402f1c <Reset_Handler>:
        if (pSrc != pDest) {
  402f1c:	4920      	ldr	r1, [pc, #128]	; (402fa0 <Reset_Handler+0x84>)
  402f1e:	4821      	ldr	r0, [pc, #132]	; (402fa4 <Reset_Handler+0x88>)
  402f20:	4281      	cmp	r1, r0
{
  402f22:	b510      	push	{r4, lr}
  402f24:	b082      	sub	sp, #8
        if (pSrc != pDest) {
  402f26:	d009      	beq.n	402f3c <Reset_Handler+0x20>
                for (; pDest < &_erelocate;) {
  402f28:	4b1f      	ldr	r3, [pc, #124]	; (402fa8 <Reset_Handler+0x8c>)
  402f2a:	4298      	cmp	r0, r3
  402f2c:	d206      	bcs.n	402f3c <Reset_Handler+0x20>
                        *pDest++ = *pSrc++;
  402f2e:	43c2      	mvns	r2, r0
  402f30:	4c1e      	ldr	r4, [pc, #120]	; (402fac <Reset_Handler+0x90>)
  402f32:	441a      	add	r2, r3
  402f34:	f022 0203 	bic.w	r2, r2, #3
  402f38:	3204      	adds	r2, #4
  402f3a:	47a0      	blx	r4
        for (pDest = &_szero; pDest < &_ezero;) {
  402f3c:	481c      	ldr	r0, [pc, #112]	; (402fb0 <Reset_Handler+0x94>)
  402f3e:	4b1d      	ldr	r3, [pc, #116]	; (402fb4 <Reset_Handler+0x98>)
  402f40:	4298      	cmp	r0, r3
  402f42:	d207      	bcs.n	402f54 <Reset_Handler+0x38>
                *pDest++ = 0;
  402f44:	43c2      	mvns	r2, r0
  402f46:	2100      	movs	r1, #0
  402f48:	4c1b      	ldr	r4, [pc, #108]	; (402fb8 <Reset_Handler+0x9c>)
  402f4a:	441a      	add	r2, r3
  402f4c:	f022 0203 	bic.w	r2, r2, #3
  402f50:	3204      	adds	r2, #4
  402f52:	47a0      	blx	r4
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  402f54:	4b19      	ldr	r3, [pc, #100]	; (402fbc <Reset_Handler+0xa0>)
  402f56:	4a1a      	ldr	r2, [pc, #104]	; (402fc0 <Reset_Handler+0xa4>)
  402f58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402f5c:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402f5e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402f62:	fab3 f383 	clz	r3, r3
  402f66:	095b      	lsrs	r3, r3, #5
  402f68:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402f6a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  402f6c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402f70:	4a14      	ldr	r2, [pc, #80]	; (402fc4 <Reset_Handler+0xa8>)
  402f72:	2300      	movs	r3, #0
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  402f74:	4914      	ldr	r1, [pc, #80]	; (402fc8 <Reset_Handler+0xac>)
  402f76:	7013      	strb	r3, [r2, #0]
	return flags;
  402f78:	9801      	ldr	r0, [sp, #4]
  402f7a:	680b      	ldr	r3, [r1, #0]
  402f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  402f80:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb");
  402f82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402f86:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402f8a:	b120      	cbz	r0, 402f96 <Reset_Handler+0x7a>
		cpu_irq_enable();
  402f8c:	2301      	movs	r3, #1
  402f8e:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dmb");
  402f90:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402f94:	b662      	cpsie	i
        __libc_init_array();
  402f96:	4b0d      	ldr	r3, [pc, #52]	; (402fcc <Reset_Handler+0xb0>)
  402f98:	4798      	blx	r3
        main();
  402f9a:	4b0d      	ldr	r3, [pc, #52]	; (402fd0 <Reset_Handler+0xb4>)
  402f9c:	4798      	blx	r3
  402f9e:	e7fe      	b.n	402f9e <Reset_Handler+0x82>
  402fa0:	00409294 	.word	0x00409294
  402fa4:	20400000 	.word	0x20400000
  402fa8:	204009f8 	.word	0x204009f8
  402fac:	00405e59 	.word	0x00405e59
  402fb0:	20404000 	.word	0x20404000
  402fb4:	20453c98 	.word	0x20453c98
  402fb8:	00405f8d 	.word	0x00405f8d
  402fbc:	00400000 	.word	0x00400000
  402fc0:	e000ed00 	.word	0xe000ed00
  402fc4:	20400028 	.word	0x20400028
  402fc8:	e000ed88 	.word	0xe000ed88
  402fcc:	00405871 	.word	0x00405871
  402fd0:	00404f55 	.word	0x00404f55

00402fd4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  402fd4:	4a32      	ldr	r2, [pc, #200]	; (4030a0 <SystemCoreClockUpdate+0xcc>)
  402fd6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402fd8:	f003 0303 	and.w	r3, r3, #3
  402fdc:	2b01      	cmp	r3, #1
  402fde:	d03c      	beq.n	40305a <SystemCoreClockUpdate+0x86>
  402fe0:	d325      	bcc.n	40302e <SystemCoreClockUpdate+0x5a>
  402fe2:	2b02      	cmp	r3, #2
  402fe4:	d00d      	beq.n	403002 <SystemCoreClockUpdate+0x2e>
  402fe6:	482f      	ldr	r0, [pc, #188]	; (4030a4 <SystemCoreClockUpdate+0xd0>)
  402fe8:	6803      	ldr	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402fea:	492d      	ldr	r1, [pc, #180]	; (4030a0 <SystemCoreClockUpdate+0xcc>)
  402fec:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  402fee:	f002 0270 	and.w	r2, r2, #112	; 0x70
  402ff2:	2a70      	cmp	r2, #112	; 0x70
  402ff4:	d02b      	beq.n	40304e <SystemCoreClockUpdate+0x7a>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402ff6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  402ff8:	f3c2 1202 	ubfx	r2, r2, #4, #3
  402ffc:	40d3      	lsrs	r3, r2
  402ffe:	6003      	str	r3, [r0, #0]
  403000:	4770      	bx	lr
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  403002:	6a13      	ldr	r3, [r2, #32]
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  403004:	4827      	ldr	r0, [pc, #156]	; (4030a4 <SystemCoreClockUpdate+0xd0>)
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  403006:	01db      	lsls	r3, r3, #7
  403008:	d53a      	bpl.n	403080 <SystemCoreClockUpdate+0xac>
            SystemCoreClock *= 3U;
  40300a:	4b27      	ldr	r3, [pc, #156]	; (4030a8 <SystemCoreClockUpdate+0xd4>)
  40300c:	6003      	str	r3, [r0, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  40300e:	4924      	ldr	r1, [pc, #144]	; (4030a0 <SystemCoreClockUpdate+0xcc>)
  403010:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  403012:	f002 0203 	and.w	r2, r2, #3
  403016:	2a02      	cmp	r2, #2
  403018:	d1e7      	bne.n	402fea <SystemCoreClockUpdate+0x16>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40301a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40301c:	6a89      	ldr	r1, [r1, #40]	; 0x28
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40301e:	f3c2 420a 	ubfx	r2, r2, #16, #11
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  403022:	b2c9      	uxtb	r1, r1
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  403024:	fb02 3303 	mla	r3, r2, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  403028:	fbb3 f3f1 	udiv	r3, r3, r1
  40302c:	e7dd      	b.n	402fea <SystemCoreClockUpdate+0x16>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40302e:	4b1f      	ldr	r3, [pc, #124]	; (4030ac <SystemCoreClockUpdate+0xd8>)
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  403030:	491b      	ldr	r1, [pc, #108]	; (4030a0 <SystemCoreClockUpdate+0xcc>)
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  403032:	695b      	ldr	r3, [r3, #20]
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  403034:	6b0a      	ldr	r2, [r1, #48]	; 0x30
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  403036:	f013 0f80 	tst.w	r3, #128	; 0x80
  40303a:	481a      	ldr	r0, [pc, #104]	; (4030a4 <SystemCoreClockUpdate+0xd0>)
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40303c:	f002 0270 	and.w	r2, r2, #112	; 0x70
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  403040:	bf14      	ite	ne
  403042:	f44f 4300 	movne.w	r3, #32768	; 0x8000
  403046:	f44f 43fa 	moveq.w	r3, #32000	; 0x7d00
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40304a:	2a70      	cmp	r2, #112	; 0x70
  40304c:	d1d3      	bne.n	402ff6 <SystemCoreClockUpdate+0x22>
    SystemCoreClock /= 3U;
  40304e:	4a18      	ldr	r2, [pc, #96]	; (4030b0 <SystemCoreClockUpdate+0xdc>)
  403050:	fba2 2303 	umull	r2, r3, r2, r3
  403054:	085b      	lsrs	r3, r3, #1
  403056:	6003      	str	r3, [r0, #0]
  403058:	4770      	bx	lr
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40305a:	6a13      	ldr	r3, [r2, #32]
  40305c:	01d9      	lsls	r1, r3, #7
  40305e:	d40c      	bmi.n	40307a <SystemCoreClockUpdate+0xa6>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403060:	4810      	ldr	r0, [pc, #64]	; (4030a4 <SystemCoreClockUpdate+0xd0>)
  403062:	4914      	ldr	r1, [pc, #80]	; (4030b4 <SystemCoreClockUpdate+0xe0>)
  403064:	6001      	str	r1, [r0, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  403066:	6a12      	ldr	r2, [r2, #32]
  403068:	f002 0270 	and.w	r2, r2, #112	; 0x70
  40306c:	2a10      	cmp	r2, #16
  40306e:	d011      	beq.n	403094 <SystemCoreClockUpdate+0xc0>
  403070:	4b0d      	ldr	r3, [pc, #52]	; (4030a8 <SystemCoreClockUpdate+0xd4>)
  403072:	2a20      	cmp	r2, #32
  403074:	bf18      	it	ne
  403076:	460b      	movne	r3, r1
  403078:	e7b7      	b.n	402fea <SystemCoreClockUpdate+0x16>
  40307a:	4b0b      	ldr	r3, [pc, #44]	; (4030a8 <SystemCoreClockUpdate+0xd4>)
  40307c:	4809      	ldr	r0, [pc, #36]	; (4030a4 <SystemCoreClockUpdate+0xd0>)
  40307e:	e7b4      	b.n	402fea <SystemCoreClockUpdate+0x16>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403080:	4b0c      	ldr	r3, [pc, #48]	; (4030b4 <SystemCoreClockUpdate+0xe0>)
  403082:	6003      	str	r3, [r0, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  403084:	6a12      	ldr	r2, [r2, #32]
  403086:	f002 0270 	and.w	r2, r2, #112	; 0x70
  40308a:	2a10      	cmp	r2, #16
  40308c:	d004      	beq.n	403098 <SystemCoreClockUpdate+0xc4>
  40308e:	2a20      	cmp	r2, #32
  403090:	d0bb      	beq.n	40300a <SystemCoreClockUpdate+0x36>
  403092:	e7bc      	b.n	40300e <SystemCoreClockUpdate+0x3a>
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  403094:	4b08      	ldr	r3, [pc, #32]	; (4030b8 <SystemCoreClockUpdate+0xe4>)
  403096:	e7a8      	b.n	402fea <SystemCoreClockUpdate+0x16>
            SystemCoreClock *= 2U;
  403098:	4b07      	ldr	r3, [pc, #28]	; (4030b8 <SystemCoreClockUpdate+0xe4>)
  40309a:	6003      	str	r3, [r0, #0]
          break;
  40309c:	e7b7      	b.n	40300e <SystemCoreClockUpdate+0x3a>
  40309e:	bf00      	nop
  4030a0:	400e0600 	.word	0x400e0600
  4030a4:	2040002c 	.word	0x2040002c
  4030a8:	00b71b00 	.word	0x00b71b00
  4030ac:	400e1810 	.word	0x400e1810
  4030b0:	aaaaaaab 	.word	0xaaaaaaab
  4030b4:	003d0900 	.word	0x003d0900
  4030b8:	007a1200 	.word	0x007a1200

004030bc <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4030bc:	4b16      	ldr	r3, [pc, #88]	; (403118 <system_init_flash+0x5c>)
  4030be:	4298      	cmp	r0, r3
  4030c0:	d917      	bls.n	4030f2 <system_init_flash+0x36>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4030c2:	4b16      	ldr	r3, [pc, #88]	; (40311c <system_init_flash+0x60>)
  4030c4:	4298      	cmp	r0, r3
  4030c6:	d910      	bls.n	4030ea <system_init_flash+0x2e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4030c8:	4b15      	ldr	r3, [pc, #84]	; (403120 <system_init_flash+0x64>)
  4030ca:	4298      	cmp	r0, r3
  4030cc:	d91a      	bls.n	403104 <system_init_flash+0x48>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4030ce:	4b15      	ldr	r3, [pc, #84]	; (403124 <system_init_flash+0x68>)
  4030d0:	4298      	cmp	r0, r3
  4030d2:	d913      	bls.n	4030fc <system_init_flash+0x40>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4030d4:	4b14      	ldr	r3, [pc, #80]	; (403128 <system_init_flash+0x6c>)
  4030d6:	4298      	cmp	r0, r3
  4030d8:	d918      	bls.n	40310c <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4030da:	4b14      	ldr	r3, [pc, #80]	; (40312c <system_init_flash+0x70>)
  4030dc:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4030de:	4b14      	ldr	r3, [pc, #80]	; (403130 <system_init_flash+0x74>)
  4030e0:	bf94      	ite	ls
  4030e2:	4a14      	ldrls	r2, [pc, #80]	; (403134 <system_init_flash+0x78>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4030e4:	4a14      	ldrhi	r2, [pc, #80]	; (403138 <system_init_flash+0x7c>)
  4030e6:	601a      	str	r2, [r3, #0]
  4030e8:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4030ea:	4b11      	ldr	r3, [pc, #68]	; (403130 <system_init_flash+0x74>)
  4030ec:	4a13      	ldr	r2, [pc, #76]	; (40313c <system_init_flash+0x80>)
  4030ee:	601a      	str	r2, [r3, #0]
  4030f0:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4030f2:	4b0f      	ldr	r3, [pc, #60]	; (403130 <system_init_flash+0x74>)
  4030f4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4030f8:	601a      	str	r2, [r3, #0]
  4030fa:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4030fc:	4b0c      	ldr	r3, [pc, #48]	; (403130 <system_init_flash+0x74>)
  4030fe:	4a10      	ldr	r2, [pc, #64]	; (403140 <system_init_flash+0x84>)
  403100:	601a      	str	r2, [r3, #0]
  403102:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  403104:	4b0a      	ldr	r3, [pc, #40]	; (403130 <system_init_flash+0x74>)
  403106:	4a0f      	ldr	r2, [pc, #60]	; (403144 <system_init_flash+0x88>)
  403108:	601a      	str	r2, [r3, #0]
  40310a:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40310c:	4b08      	ldr	r3, [pc, #32]	; (403130 <system_init_flash+0x74>)
  40310e:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  403112:	601a      	str	r2, [r3, #0]
  403114:	4770      	bx	lr
  403116:	bf00      	nop
  403118:	015ef3bf 	.word	0x015ef3bf
  40311c:	02bde77f 	.word	0x02bde77f
  403120:	041cdb3f 	.word	0x041cdb3f
  403124:	057bceff 	.word	0x057bceff
  403128:	06dac2bf 	.word	0x06dac2bf
  40312c:	0839b67f 	.word	0x0839b67f
  403130:	400e0c00 	.word	0x400e0c00
  403134:	04000500 	.word	0x04000500
  403138:	04000600 	.word	0x04000600
  40313c:	04000100 	.word	0x04000100
  403140:	04000300 	.word	0x04000300
  403144:	04000200 	.word	0x04000200

00403148 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  403148:	4a0d      	ldr	r2, [pc, #52]	; (403180 <_sbrk+0x38>)
	int ramend = (int)&__ram_end__;
  40314a:	490e      	ldr	r1, [pc, #56]	; (403184 <_sbrk+0x3c>)
	if (heap == NULL) {
  40314c:	6813      	ldr	r3, [r2, #0]
  40314e:	b143      	cbz	r3, 403162 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
  403150:	4418      	add	r0, r3
  403152:	4281      	cmp	r1, r0
  403154:	db02      	blt.n	40315c <_sbrk+0x14>
		return (caddr_t) -1;	
	}

	heap += incr;
  403156:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  403158:	4618      	mov	r0, r3
  40315a:	4770      	bx	lr
		return (caddr_t) -1;	
  40315c:	f04f 30ff 	mov.w	r0, #4294967295
  403160:	4770      	bx	lr
{
  403162:	b410      	push	{r4}
		heap = (unsigned char *)&_end;
  403164:	4c08      	ldr	r4, [pc, #32]	; (403188 <_sbrk+0x40>)
	if (((int)prev_heap + incr) > ramend) {
  403166:	4420      	add	r0, r4
		heap = (unsigned char *)&_end;
  403168:	6014      	str	r4, [r2, #0]
	if (((int)prev_heap + incr) > ramend) {
  40316a:	4281      	cmp	r1, r0
  40316c:	db04      	blt.n	403178 <_sbrk+0x30>
	heap += incr;
  40316e:	6010      	str	r0, [r2, #0]
	return (caddr_t) prev_heap;
  403170:	4620      	mov	r0, r4
}
  403172:	f85d 4b04 	ldr.w	r4, [sp], #4
  403176:	4770      	bx	lr
		return (caddr_t) -1;	
  403178:	f04f 30ff 	mov.w	r0, #4294967295
  40317c:	e7f9      	b.n	403172 <_sbrk+0x2a>
  40317e:	bf00      	nop
  403180:	2042b530 	.word	0x2042b530
  403184:	2045fffc 	.word	0x2045fffc
  403188:	20455e98 	.word	0x20455e98

0040318c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  40318c:	f04f 30ff 	mov.w	r0, #4294967295
  403190:	4770      	bx	lr
  403192:	bf00      	nop

00403194 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  403194:	f44f 5300 	mov.w	r3, #8192	; 0x2000

	return 0;
}
  403198:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
  40319a:	604b      	str	r3, [r1, #4]
}
  40319c:	4770      	bx	lr
  40319e:	bf00      	nop

004031a0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4031a0:	2001      	movs	r0, #1
  4031a2:	4770      	bx	lr

004031a4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4031a4:	2000      	movs	r0, #0
  4031a6:	4770      	bx	lr

004031a8 <xEventGroupSetBits.part.0>:

	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
  4031a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4031ac:	4604      	mov	r4, r0
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	vTaskSuspendAll();
  4031ae:	4b15      	ldr	r3, [pc, #84]	; (403204 <xEventGroupSetBits.part.0+0x5c>)
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
  4031b0:	460e      	mov	r6, r1
	vTaskSuspendAll();
  4031b2:	4798      	blx	r3
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
  4031b4:	6823      	ldr	r3, [r4, #0]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4031b6:	f104 070c 	add.w	r7, r4, #12
		pxListItem = listGET_HEAD_ENTRY( pxList );
  4031ba:	6920      	ldr	r0, [r4, #16]
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
  4031bc:	2500      	movs	r5, #0
		pxEventBits->uxEventBits |= uxBitsToSet;
  4031be:	4333      	orrs	r3, r6
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
  4031c0:	4e11      	ldr	r6, [pc, #68]	; (403208 <xEventGroupSetBits.part.0+0x60>)
		pxEventBits->uxEventBits |= uxBitsToSet;
  4031c2:	6023      	str	r3, [r4, #0]
		while( pxListItem != pxListEnd )
  4031c4:	4287      	cmp	r7, r0
  4031c6:	6821      	ldr	r1, [r4, #0]
  4031c8:	d014      	beq.n	4031f4 <xEventGroupSetBits.part.0+0x4c>
			pxNext = listGET_NEXT( pxListItem );
  4031ca:	e890 0108 	ldmia.w	r0, {r3, r8}
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
  4031ce:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
  4031d2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
  4031d6:	d102      	bne.n	4031de <xEventGroupSetBits.part.0+0x36>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
  4031d8:	420a      	tst	r2, r1
  4031da:	d103      	bne.n	4031e4 <xEventGroupSetBits.part.0+0x3c>
  4031dc:	e008      	b.n	4031f0 <xEventGroupSetBits.part.0+0x48>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
  4031de:	ea32 0e01 	bics.w	lr, r2, r1
  4031e2:	d105      	bne.n	4031f0 <xEventGroupSetBits.part.0+0x48>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
  4031e4:	01db      	lsls	r3, r3, #7
  4031e6:	d500      	bpl.n	4031ea <xEventGroupSetBits.part.0+0x42>
					uxBitsToClear |= uxBitsWaitedFor;
  4031e8:	4315      	orrs	r5, r2
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
  4031ea:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  4031ee:	47b0      	blx	r6
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
  4031f0:	4640      	mov	r0, r8
  4031f2:	e7e7      	b.n	4031c4 <xEventGroupSetBits.part.0+0x1c>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
  4031f4:	ea21 0105 	bic.w	r1, r1, r5
	}
	( void ) xTaskResumeAll();
  4031f8:	4b04      	ldr	r3, [pc, #16]	; (40320c <xEventGroupSetBits.part.0+0x64>)
		pxEventBits->uxEventBits &= ~uxBitsToClear;
  4031fa:	6021      	str	r1, [r4, #0]
	( void ) xTaskResumeAll();
  4031fc:	4798      	blx	r3

	return pxEventBits->uxEventBits;
  4031fe:	6820      	ldr	r0, [r4, #0]
}
  403200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403204:	00403c69 	.word	0x00403c69
  403208:	00404141 	.word	0x00404141
  40320c:	00403e09 	.word	0x00403e09

00403210 <vEventGroupClearBitsCallback>:
	configASSERT( xEventGroup );
  403210:	b1d0      	cbz	r0, 403248 <vEventGroupClearBitsCallback+0x38>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
  403212:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
  403216:	d00a      	beq.n	40322e <vEventGroupClearBitsCallback+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  403218:	f04f 0380 	mov.w	r3, #128	; 0x80
  40321c:	b672      	cpsid	i
  40321e:	f383 8811 	msr	BASEPRI, r3
  403222:	f3bf 8f6f 	isb	sy
  403226:	f3bf 8f4f 	dsb	sy
  40322a:	b662      	cpsie	i
  40322c:	e7fe      	b.n	40322c <vEventGroupClearBitsCallback+0x1c>
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
  40322e:	b570      	push	{r4, r5, r6, lr}
  403230:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  403232:	4b0b      	ldr	r3, [pc, #44]	; (403260 <vEventGroupClearBitsCallback+0x50>)
  403234:	460d      	mov	r5, r1
  403236:	4798      	blx	r3
		pxEventBits->uxEventBits &= ~uxBitsToClear;
  403238:	6823      	ldr	r3, [r4, #0]
	taskEXIT_CRITICAL();
  40323a:	4a0a      	ldr	r2, [pc, #40]	; (403264 <vEventGroupClearBitsCallback+0x54>)
		pxEventBits->uxEventBits &= ~uxBitsToClear;
  40323c:	ea23 0305 	bic.w	r3, r3, r5
  403240:	6023      	str	r3, [r4, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
  403242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
  403246:	4710      	bx	r2
  403248:	f04f 0380 	mov.w	r3, #128	; 0x80
  40324c:	b672      	cpsid	i
  40324e:	f383 8811 	msr	BASEPRI, r3
  403252:	f3bf 8f6f 	isb	sy
  403256:	f3bf 8f4f 	dsb	sy
  40325a:	b662      	cpsie	i
  40325c:	e7fe      	b.n	40325c <vEventGroupClearBitsCallback+0x4c>
  40325e:	bf00      	nop
  403260:	00403395 	.word	0x00403395
  403264:	004033e1 	.word	0x004033e1

00403268 <vEventGroupSetBitsCallback>:
	configASSERT( xEventGroup );
  403268:	b168      	cbz	r0, 403286 <vEventGroupSetBitsCallback+0x1e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
  40326a:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
  40326e:	d015      	beq.n	40329c <vEventGroupSetBitsCallback+0x34>
  403270:	f04f 0380 	mov.w	r3, #128	; 0x80
  403274:	b672      	cpsid	i
  403276:	f383 8811 	msr	BASEPRI, r3
  40327a:	f3bf 8f6f 	isb	sy
  40327e:	f3bf 8f4f 	dsb	sy
  403282:	b662      	cpsie	i
  403284:	e7fe      	b.n	403284 <vEventGroupSetBitsCallback+0x1c>
  403286:	f04f 0380 	mov.w	r3, #128	; 0x80
  40328a:	b672      	cpsid	i
  40328c:	f383 8811 	msr	BASEPRI, r3
  403290:	f3bf 8f6f 	isb	sy
  403294:	f3bf 8f4f 	dsb	sy
  403298:	b662      	cpsie	i
  40329a:	e7fe      	b.n	40329a <vEventGroupSetBitsCallback+0x32>
  40329c:	4b00      	ldr	r3, [pc, #0]	; (4032a0 <vEventGroupSetBitsCallback+0x38>)
  40329e:	4718      	bx	r3
  4032a0:	004031a9 	.word	0x004031a9

004032a4 <xEventGroupClearBitsFromISR>:
	{
  4032a4:	b410      	push	{r4}
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL );
  4032a6:	4c04      	ldr	r4, [pc, #16]	; (4032b8 <xEventGroupClearBitsFromISR+0x14>)
  4032a8:	460a      	mov	r2, r1
  4032aa:	2300      	movs	r3, #0
  4032ac:	4601      	mov	r1, r0
  4032ae:	46a4      	mov	ip, r4
  4032b0:	4802      	ldr	r0, [pc, #8]	; (4032bc <xEventGroupClearBitsFromISR+0x18>)
	}
  4032b2:	f85d 4b04 	ldr.w	r4, [sp], #4
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL );
  4032b6:	4760      	bx	ip
  4032b8:	0040463d 	.word	0x0040463d
  4032bc:	00403211 	.word	0x00403211

004032c0 <xEventGroupGetBitsFromISR>:

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  4032c0:	f3ef 8311 	mrs	r3, BASEPRI
  4032c4:	f04f 0280 	mov.w	r2, #128	; 0x80
  4032c8:	b672      	cpsid	i
  4032ca:	f382 8811 	msr	BASEPRI, r2
  4032ce:	f3bf 8f6f 	isb	sy
  4032d2:	f3bf 8f4f 	dsb	sy
  4032d6:	b662      	cpsie	i
		uxReturn = pxEventBits->uxEventBits;
  4032d8:	6800      	ldr	r0, [r0, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  4032da:	f383 8811 	msr	BASEPRI, r3
}
  4032de:	4770      	bx	lr

004032e0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
  4032e0:	b410      	push	{r4}
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
  4032e2:	4c04      	ldr	r4, [pc, #16]	; (4032f4 <xEventGroupSetBitsFromISR+0x14>)
  4032e4:	4613      	mov	r3, r2
  4032e6:	460a      	mov	r2, r1
  4032e8:	4601      	mov	r1, r0
  4032ea:	46a4      	mov	ip, r4
  4032ec:	4802      	ldr	r0, [pc, #8]	; (4032f8 <xEventGroupSetBitsFromISR+0x18>)

		return xReturn;
	}
  4032ee:	f85d 4b04 	ldr.w	r4, [sp], #4
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
  4032f2:	4760      	bx	ip
  4032f4:	0040463d 	.word	0x0040463d
  4032f8:	00403269 	.word	0x00403269

004032fc <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  4032fc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  4032fe:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  403300:	689a      	ldr	r2, [r3, #8]
  403302:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  403304:	689a      	ldr	r2, [r3, #8]
  403306:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  403308:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40330a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40330c:	6803      	ldr	r3, [r0, #0]
  40330e:	3301      	adds	r3, #1
  403310:	6003      	str	r3, [r0, #0]
  403312:	4770      	bx	lr

00403314 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  403314:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  403316:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  403318:	1c6b      	adds	r3, r5, #1
  40331a:	d011      	beq.n	403340 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40331c:	f100 0208 	add.w	r2, r0, #8
  403320:	e000      	b.n	403324 <vListInsert+0x10>
  403322:	461a      	mov	r2, r3
  403324:	6853      	ldr	r3, [r2, #4]
  403326:	681c      	ldr	r4, [r3, #0]
  403328:	42a5      	cmp	r5, r4
  40332a:	d2fa      	bcs.n	403322 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  40332c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  40332e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  403330:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  403332:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  403334:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  403336:	6803      	ldr	r3, [r0, #0]
  403338:	3301      	adds	r3, #1
}
  40333a:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
  40333c:	6003      	str	r3, [r0, #0]
}
  40333e:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
  403340:	6902      	ldr	r2, [r0, #16]
  403342:	6853      	ldr	r3, [r2, #4]
  403344:	e7f2      	b.n	40332c <vListInsert+0x18>
  403346:	bf00      	nop

00403348 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  403348:	6842      	ldr	r2, [r0, #4]
  40334a:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  40334c:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  40334e:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  403350:	6882      	ldr	r2, [r0, #8]
  403352:	6841      	ldr	r1, [r0, #4]
  403354:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  403356:	685a      	ldr	r2, [r3, #4]
  403358:	4290      	cmp	r0, r2
  40335a:	d006      	beq.n	40336a <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  40335c:	2200      	movs	r2, #0
  40335e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  403360:	681a      	ldr	r2, [r3, #0]
  403362:	3a01      	subs	r2, #1
  403364:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  403366:	6818      	ldr	r0, [r3, #0]
}
  403368:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  40336a:	6882      	ldr	r2, [r0, #8]
  40336c:	605a      	str	r2, [r3, #4]
  40336e:	e7f5      	b.n	40335c <uxListRemove+0x14>

00403370 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
  403370:	4b07      	ldr	r3, [pc, #28]	; (403390 <pxCurrentTCBConst2>)
  403372:	6819      	ldr	r1, [r3, #0]
  403374:	6808      	ldr	r0, [r1, #0]
  403376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40337a:	f380 8809 	msr	PSP, r0
  40337e:	f3bf 8f6f 	isb	sy
  403382:	f04f 0000 	mov.w	r0, #0
  403386:	f380 8811 	msr	BASEPRI, r0
  40338a:	4770      	bx	lr
  40338c:	f3af 8000 	nop.w

00403390 <pxCurrentTCBConst2>:
  403390:	2042b53c 	.word	0x2042b53c

00403394 <vPortEnterCritical>:
	__asm volatile
  403394:	f04f 0380 	mov.w	r3, #128	; 0x80
  403398:	b672      	cpsid	i
  40339a:	f383 8811 	msr	BASEPRI, r3
  40339e:	f3bf 8f6f 	isb	sy
  4033a2:	f3bf 8f4f 	dsb	sy
  4033a6:	b662      	cpsie	i
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
  4033a8:	4a0b      	ldr	r2, [pc, #44]	; (4033d8 <vPortEnterCritical+0x44>)
  4033aa:	6813      	ldr	r3, [r2, #0]
  4033ac:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
  4033ae:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
  4033b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4033b2:	d000      	beq.n	4033b6 <vPortEnterCritical+0x22>
  4033b4:	4770      	bx	lr
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4033b6:	4b09      	ldr	r3, [pc, #36]	; (4033dc <vPortEnterCritical+0x48>)
  4033b8:	681b      	ldr	r3, [r3, #0]
  4033ba:	f013 0fff 	tst.w	r3, #255	; 0xff
  4033be:	d0f9      	beq.n	4033b4 <vPortEnterCritical+0x20>
  4033c0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4033c4:	b672      	cpsid	i
  4033c6:	f383 8811 	msr	BASEPRI, r3
  4033ca:	f3bf 8f6f 	isb	sy
  4033ce:	f3bf 8f4f 	dsb	sy
  4033d2:	b662      	cpsie	i
  4033d4:	e7fe      	b.n	4033d4 <vPortEnterCritical+0x40>
  4033d6:	bf00      	nop
  4033d8:	20400030 	.word	0x20400030
  4033dc:	e000ed04 	.word	0xe000ed04

004033e0 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
  4033e0:	4a09      	ldr	r2, [pc, #36]	; (403408 <vPortExitCritical+0x28>)
  4033e2:	6813      	ldr	r3, [r2, #0]
  4033e4:	b953      	cbnz	r3, 4033fc <vPortExitCritical+0x1c>
  4033e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4033ea:	b672      	cpsid	i
  4033ec:	f383 8811 	msr	BASEPRI, r3
  4033f0:	f3bf 8f6f 	isb	sy
  4033f4:	f3bf 8f4f 	dsb	sy
  4033f8:	b662      	cpsie	i
  4033fa:	e7fe      	b.n	4033fa <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  4033fc:	3b01      	subs	r3, #1
  4033fe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  403400:	b90b      	cbnz	r3, 403406 <vPortExitCritical+0x26>
	__asm volatile
  403402:	f383 8811 	msr	BASEPRI, r3
  403406:	4770      	bx	lr
  403408:	20400030 	.word	0x20400030
  40340c:	00000000 	.word	0x00000000

00403410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
  403410:	f3ef 8009 	mrs	r0, PSP
  403414:	f3bf 8f6f 	isb	sy
  403418:	4b15      	ldr	r3, [pc, #84]	; (403470 <pxCurrentTCBConst>)
  40341a:	681a      	ldr	r2, [r3, #0]
  40341c:	f01e 0f10 	tst.w	lr, #16
  403420:	bf08      	it	eq
  403422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  403426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40342a:	6010      	str	r0, [r2, #0]
  40342c:	e92d 0009 	stmdb	sp!, {r0, r3}
  403430:	f04f 0080 	mov.w	r0, #128	; 0x80
  403434:	b672      	cpsid	i
  403436:	f380 8811 	msr	BASEPRI, r0
  40343a:	f3bf 8f4f 	dsb	sy
  40343e:	f3bf 8f6f 	isb	sy
  403442:	b662      	cpsie	i
  403444:	f000 fd7e 	bl	403f44 <vTaskSwitchContext>
  403448:	f04f 0000 	mov.w	r0, #0
  40344c:	f380 8811 	msr	BASEPRI, r0
  403450:	bc09      	pop	{r0, r3}
  403452:	6819      	ldr	r1, [r3, #0]
  403454:	6808      	ldr	r0, [r1, #0]
  403456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40345a:	f01e 0f10 	tst.w	lr, #16
  40345e:	bf08      	it	eq
  403460:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  403464:	f380 8809 	msr	PSP, r0
  403468:	f3bf 8f6f 	isb	sy
  40346c:	4770      	bx	lr
  40346e:	bf00      	nop

00403470 <pxCurrentTCBConst>:
  403470:	2042b53c 	.word	0x2042b53c

00403474 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
  403474:	b508      	push	{r3, lr}
	__asm volatile
  403476:	f04f 0380 	mov.w	r3, #128	; 0x80
  40347a:	b672      	cpsid	i
  40347c:	f383 8811 	msr	BASEPRI, r3
  403480:	f3bf 8f6f 	isb	sy
  403484:	f3bf 8f4f 	dsb	sy
  403488:	b662      	cpsie	i
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
  40348a:	4b05      	ldr	r3, [pc, #20]	; (4034a0 <SysTick_Handler+0x2c>)
  40348c:	4798      	blx	r3
  40348e:	b118      	cbz	r0, 403498 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  403490:	4b04      	ldr	r3, [pc, #16]	; (4034a4 <SysTick_Handler+0x30>)
  403492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403496:	601a      	str	r2, [r3, #0]
	__asm volatile
  403498:	2300      	movs	r3, #0
  40349a:	f383 8811 	msr	BASEPRI, r3
  40349e:	bd08      	pop	{r3, pc}
  4034a0:	00403c8d 	.word	0x00403c8d
  4034a4:	e000ed04 	.word	0xe000ed04

004034a8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
  4034a8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  4034ac:	2b0f      	cmp	r3, #15
  4034ae:	d910      	bls.n	4034d2 <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  4034b0:	4912      	ldr	r1, [pc, #72]	; (4034fc <vPortValidateInterruptPriority+0x54>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  4034b2:	4a13      	ldr	r2, [pc, #76]	; (403500 <vPortValidateInterruptPriority+0x58>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  4034b4:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  4034b6:	7812      	ldrb	r2, [r2, #0]
  4034b8:	429a      	cmp	r2, r3
  4034ba:	d90a      	bls.n	4034d2 <vPortValidateInterruptPriority+0x2a>
	__asm volatile
  4034bc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4034c0:	b672      	cpsid	i
  4034c2:	f383 8811 	msr	BASEPRI, r3
  4034c6:	f3bf 8f6f 	isb	sy
  4034ca:	f3bf 8f4f 	dsb	sy
  4034ce:	b662      	cpsie	i
  4034d0:	e7fe      	b.n	4034d0 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  4034d2:	4b0c      	ldr	r3, [pc, #48]	; (403504 <vPortValidateInterruptPriority+0x5c>)
  4034d4:	4a0c      	ldr	r2, [pc, #48]	; (403508 <vPortValidateInterruptPriority+0x60>)
  4034d6:	681b      	ldr	r3, [r3, #0]
  4034d8:	6812      	ldr	r2, [r2, #0]
  4034da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4034de:	4293      	cmp	r3, r2
  4034e0:	d90a      	bls.n	4034f8 <vPortValidateInterruptPriority+0x50>
  4034e2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4034e6:	b672      	cpsid	i
  4034e8:	f383 8811 	msr	BASEPRI, r3
  4034ec:	f3bf 8f6f 	isb	sy
  4034f0:	f3bf 8f4f 	dsb	sy
  4034f4:	b662      	cpsie	i
  4034f6:	e7fe      	b.n	4034f6 <vPortValidateInterruptPriority+0x4e>
  4034f8:	4770      	bx	lr
  4034fa:	bf00      	nop
  4034fc:	e000e3f0 	.word	0xe000e3f0
  403500:	2042b534 	.word	0x2042b534
  403504:	e000ed0c 	.word	0xe000ed0c
  403508:	2042b538 	.word	0x2042b538

0040350c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  40350c:	b570      	push	{r4, r5, r6, lr}
  40350e:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  403510:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
  403512:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  403514:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  403516:	b932      	cbnz	r2, 403526 <prvCopyDataToQueue+0x1a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  403518:	6805      	ldr	r5, [r0, #0]
  40351a:	bb35      	cbnz	r5, 40356a <prvCopyDataToQueue+0x5e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  40351c:	6840      	ldr	r0, [r0, #4]
  40351e:	4b16      	ldr	r3, [pc, #88]	; (403578 <prvCopyDataToQueue+0x6c>)
  403520:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  403522:	6065      	str	r5, [r4, #4]
  403524:	e024      	b.n	403570 <prvCopyDataToQueue+0x64>
  403526:	4b15      	ldr	r3, [pc, #84]	; (40357c <prvCopyDataToQueue+0x70>)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
  403528:	b965      	cbnz	r5, 403544 <prvCopyDataToQueue+0x38>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  40352a:	6880      	ldr	r0, [r0, #8]
  40352c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  40352e:	68a3      	ldr	r3, [r4, #8]
  403530:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  403532:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  403534:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  403536:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  403538:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40353a:	d316      	bcc.n	40356a <prvCopyDataToQueue+0x5e>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  40353c:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
  40353e:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
  403540:	60a3      	str	r3, [r4, #8]
  403542:	e015      	b.n	403570 <prvCopyDataToQueue+0x64>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  403544:	68c0      	ldr	r0, [r0, #12]
  403546:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  403548:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40354a:	68e2      	ldr	r2, [r4, #12]
  40354c:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40354e:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  403550:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  403552:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  403554:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  403556:	d202      	bcs.n	40355e <prvCopyDataToQueue+0x52>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  403558:	6862      	ldr	r2, [r4, #4]
  40355a:	4413      	add	r3, r2
  40355c:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
  40355e:	2d02      	cmp	r5, #2
  403560:	d103      	bne.n	40356a <prvCopyDataToQueue+0x5e>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  403562:	b126      	cbz	r6, 40356e <prvCopyDataToQueue+0x62>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
  403564:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
  403566:	2000      	movs	r0, #0
  403568:	e002      	b.n	403570 <prvCopyDataToQueue+0x64>
  40356a:	2000      	movs	r0, #0
  40356c:	e000      	b.n	403570 <prvCopyDataToQueue+0x64>
  40356e:	4630      	mov	r0, r6
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  403570:	3601      	adds	r6, #1
  403572:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
  403574:	bd70      	pop	{r4, r5, r6, pc}
  403576:	bf00      	nop
  403578:	004042c1 	.word	0x004042c1
  40357c:	00405e59 	.word	0x00405e59

00403580 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  403580:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
  403582:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  403584:	b172      	cbz	r2, 4035a4 <prvCopyDataFromQueue+0x24>
  403586:	4608      	mov	r0, r1
{
  403588:	b410      	push	{r4}
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  40358a:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  40358c:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  40358e:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  403590:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  403592:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  403594:	d301      	bcc.n	40359a <prvCopyDataFromQueue+0x1a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  403596:	6819      	ldr	r1, [r3, #0]
  403598:	60d9      	str	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  40359a:	68d9      	ldr	r1, [r3, #12]
	}
}
  40359c:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  4035a0:	4b01      	ldr	r3, [pc, #4]	; (4035a8 <prvCopyDataFromQueue+0x28>)
  4035a2:	4718      	bx	r3
  4035a4:	4770      	bx	lr
  4035a6:	bf00      	nop
  4035a8:	00405e59 	.word	0x00405e59

004035ac <prvNotifyQueueSetContainer.part.0>:
  4035ac:	f04f 0380 	mov.w	r3, #128	; 0x80
  4035b0:	b672      	cpsid	i
  4035b2:	f383 8811 	msr	BASEPRI, r3
  4035b6:	f3bf 8f6f 	isb	sy
  4035ba:	f3bf 8f4f 	dsb	sy
  4035be:	b662      	cpsie	i
  4035c0:	e7fe      	b.n	4035c0 <prvNotifyQueueSetContainer.part.0+0x14>
  4035c2:	bf00      	nop

004035c4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  4035c4:	b570      	push	{r4, r5, r6, lr}
  4035c6:	b082      	sub	sp, #8
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  4035c8:	6c84      	ldr	r4, [r0, #72]	; 0x48
	{
  4035ca:	9001      	str	r0, [sp, #4]
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  4035cc:	b1b4      	cbz	r4, 4035fc <prvNotifyQueueSetContainer+0x38>
  4035ce:	460a      	mov	r2, r1
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  4035d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4035d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  4035d4:	4299      	cmp	r1, r3
  4035d6:	d30a      	bcc.n	4035ee <prvNotifyQueueSetContainer+0x2a>
  4035d8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4035dc:	b672      	cpsid	i
  4035de:	f383 8811 	msr	BASEPRI, r3
  4035e2:	f3bf 8f6f 	isb	sy
  4035e6:	f3bf 8f4f 	dsb	sy
  4035ea:	b662      	cpsie	i
  4035ec:	e7fe      	b.n	4035ec <prvNotifyQueueSetContainer+0x28>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  4035ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  4035f0:	428b      	cmp	r3, r1
  4035f2:	d805      	bhi.n	403600 <prvNotifyQueueSetContainer+0x3c>
	BaseType_t xReturn = pdFALSE;
  4035f4:	2600      	movs	r6, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4035f6:	4630      	mov	r0, r6
  4035f8:	b002      	add	sp, #8
  4035fa:	bd70      	pop	{r4, r5, r6, pc}
  4035fc:	4b0f      	ldr	r3, [pc, #60]	; (40363c <prvNotifyQueueSetContainer+0x78>)
  4035fe:	4798      	blx	r3
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  403600:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  403604:	a901      	add	r1, sp, #4
  403606:	4b0e      	ldr	r3, [pc, #56]	; (403640 <prvNotifyQueueSetContainer+0x7c>)
  403608:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  40360a:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  40360c:	4798      	blx	r3
  40360e:	4606      	mov	r6, r0
			if( cTxLock == queueUNLOCKED )
  403610:	1c6b      	adds	r3, r5, #1
  403612:	d006      	beq.n	403622 <prvNotifyQueueSetContainer+0x5e>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
  403614:	1c6b      	adds	r3, r5, #1
	}
  403616:	4630      	mov	r0, r6
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
  403618:	b25b      	sxtb	r3, r3
  40361a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
  40361e:	b002      	add	sp, #8
  403620:	bd70      	pop	{r4, r5, r6, pc}
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  403622:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403624:	2b00      	cmp	r3, #0
  403626:	d0e6      	beq.n	4035f6 <prvNotifyQueueSetContainer+0x32>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  403628:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40362c:	4b05      	ldr	r3, [pc, #20]	; (403644 <prvNotifyQueueSetContainer+0x80>)
  40362e:	4798      	blx	r3
						xReturn = pdTRUE;
  403630:	2800      	cmp	r0, #0
  403632:	bf18      	it	ne
  403634:	2601      	movne	r6, #1
	}
  403636:	4630      	mov	r0, r6
  403638:	b002      	add	sp, #8
  40363a:	bd70      	pop	{r4, r5, r6, pc}
  40363c:	004035ad 	.word	0x004035ad
  403640:	0040350d 	.word	0x0040350d
  403644:	004040ad 	.word	0x004040ad

00403648 <xQueueReceiveFromISR.part.2>:
BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
  403648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  40364c:	4b1c      	ldr	r3, [pc, #112]	; (4036c0 <xQueueReceiveFromISR.part.2+0x78>)
BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
  40364e:	4607      	mov	r7, r0
  403650:	4689      	mov	r9, r1
  403652:	4690      	mov	r8, r2
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  403654:	4798      	blx	r3
	__asm volatile
  403656:	f3ef 8611 	mrs	r6, BASEPRI
  40365a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40365e:	b672      	cpsid	i
  403660:	f383 8811 	msr	BASEPRI, r3
  403664:	f3bf 8f6f 	isb	sy
  403668:	f3bf 8f4f 	dsb	sy
  40366c:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  40366e:	6bbc      	ldr	r4, [r7, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  403670:	b30c      	cbz	r4, 4036b6 <xQueueReceiveFromISR.part.2+0x6e>
			const int8_t cRxLock = pxQueue->cRxLock;
  403672:	f897 5044 	ldrb.w	r5, [r7, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
  403676:	4649      	mov	r1, r9
  403678:	4b12      	ldr	r3, [pc, #72]	; (4036c4 <xQueueReceiveFromISR.part.2+0x7c>)
  40367a:	4638      	mov	r0, r7
			const int8_t cRxLock = pxQueue->cRxLock;
  40367c:	b26d      	sxtb	r5, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
  40367e:	3c01      	subs	r4, #1
			prvCopyDataFromQueue( pxQueue, pvBuffer );
  403680:	4798      	blx	r3
			if( cRxLock == queueUNLOCKED )
  403682:	1c6b      	adds	r3, r5, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
  403684:	63bc      	str	r4, [r7, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
  403686:	d110      	bne.n	4036aa <xQueueReceiveFromISR.part.2+0x62>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  403688:	693b      	ldr	r3, [r7, #16]
  40368a:	b90b      	cbnz	r3, 403690 <xQueueReceiveFromISR.part.2+0x48>
			xReturn = pdPASS;
  40368c:	2001      	movs	r0, #1
  40368e:	e013      	b.n	4036b8 <xQueueReceiveFromISR.part.2+0x70>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  403690:	f107 0010 	add.w	r0, r7, #16
  403694:	4b0c      	ldr	r3, [pc, #48]	; (4036c8 <xQueueReceiveFromISR.part.2+0x80>)
  403696:	4798      	blx	r3
						if( pxHigherPriorityTaskWoken != NULL )
  403698:	f1b8 0f00 	cmp.w	r8, #0
  40369c:	d0f6      	beq.n	40368c <xQueueReceiveFromISR.part.2+0x44>
  40369e:	2800      	cmp	r0, #0
  4036a0:	d0f4      	beq.n	40368c <xQueueReceiveFromISR.part.2+0x44>
							*pxHigherPriorityTaskWoken = pdTRUE;
  4036a2:	2001      	movs	r0, #1
  4036a4:	f8c8 0000 	str.w	r0, [r8]
  4036a8:	e006      	b.n	4036b8 <xQueueReceiveFromISR.part.2+0x70>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
  4036aa:	3501      	adds	r5, #1
			xReturn = pdPASS;
  4036ac:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
  4036ae:	b26d      	sxtb	r5, r5
  4036b0:	f887 5044 	strb.w	r5, [r7, #68]	; 0x44
  4036b4:	e000      	b.n	4036b8 <xQueueReceiveFromISR.part.2+0x70>
			xReturn = pdFAIL;
  4036b6:	4620      	mov	r0, r4
	__asm volatile
  4036b8:	f386 8811 	msr	BASEPRI, r6
}
  4036bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4036c0:	004034a9 	.word	0x004034a9
  4036c4:	00403581 	.word	0x00403581
  4036c8:	004040ad 	.word	0x004040ad

004036cc <prvUnlockQueue>:
{
  4036cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4036d0:	4604      	mov	r4, r0
  4036d2:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
  4036d4:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 4037c4 <prvUnlockQueue+0xf8>
  4036d8:	47c0      	blx	r8
		int8_t cTxLock = pxQueue->cTxLock;
  4036da:	f894 7045 	ldrb.w	r7, [r4, #69]	; 0x45
  4036de:	b27f      	sxtb	r7, r7
		while( cTxLock > queueLOCKED_UNMODIFIED )
  4036e0:	2f00      	cmp	r7, #0
  4036e2:	dd1e      	ble.n	403722 <prvUnlockQueue+0x56>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4036e4:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 4037c8 <prvUnlockQueue+0xfc>
						vTaskMissedYield();
  4036e8:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 4037bc <prvUnlockQueue+0xf0>
				if( pxQueue->pxQueueSetContainer != NULL )
  4036ec:	6ca5      	ldr	r5, [r4, #72]	; 0x48
  4036ee:	2d00      	cmp	r5, #0
  4036f0:	d03c      	beq.n	40376c <prvUnlockQueue+0xa0>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  4036f2:	6baa      	ldr	r2, [r5, #56]	; 0x38
  4036f4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4036f6:	9401      	str	r4, [sp, #4]
  4036f8:	429a      	cmp	r2, r3
  4036fa:	d30a      	bcc.n	403712 <prvUnlockQueue+0x46>
	__asm volatile
  4036fc:	f04f 0380 	mov.w	r3, #128	; 0x80
  403700:	b672      	cpsid	i
  403702:	f383 8811 	msr	BASEPRI, r3
  403706:	f3bf 8f6f 	isb	sy
  40370a:	f3bf 8f4f 	dsb	sy
  40370e:	b662      	cpsie	i
  403710:	e7fe      	b.n	403710 <prvUnlockQueue+0x44>
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  403712:	6baa      	ldr	r2, [r5, #56]	; 0x38
  403714:	4293      	cmp	r3, r2
  403716:	d833      	bhi.n	403780 <prvUnlockQueue+0xb4>
  403718:	1e7b      	subs	r3, r7, #1
  40371a:	b2db      	uxtb	r3, r3
  40371c:	b25f      	sxtb	r7, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
  40371e:	2b00      	cmp	r3, #0
  403720:	d1e4      	bne.n	4036ec <prvUnlockQueue+0x20>
		pxQueue->cTxLock = queueUNLOCKED;
  403722:	23ff      	movs	r3, #255	; 0xff
	taskEXIT_CRITICAL();
  403724:	4e24      	ldr	r6, [pc, #144]	; (4037b8 <prvUnlockQueue+0xec>)
		pxQueue->cTxLock = queueUNLOCKED;
  403726:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
  40372a:	47b0      	blx	r6
	taskENTER_CRITICAL();
  40372c:	47c0      	blx	r8
		int8_t cRxLock = pxQueue->cRxLock;
  40372e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
  403732:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
  403734:	2d00      	cmp	r5, #0
  403736:	dd12      	ble.n	40375e <prvUnlockQueue+0x92>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  403738:	6923      	ldr	r3, [r4, #16]
  40373a:	b183      	cbz	r3, 40375e <prvUnlockQueue+0x92>
  40373c:	f104 0910 	add.w	r9, r4, #16
  403740:	f8df 8084 	ldr.w	r8, [pc, #132]	; 4037c8 <prvUnlockQueue+0xfc>
					vTaskMissedYield();
  403744:	4f1d      	ldr	r7, [pc, #116]	; (4037bc <prvUnlockQueue+0xf0>)
  403746:	e001      	b.n	40374c <prvUnlockQueue+0x80>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  403748:	6923      	ldr	r3, [r4, #16]
  40374a:	b143      	cbz	r3, 40375e <prvUnlockQueue+0x92>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40374c:	4648      	mov	r0, r9
  40374e:	47c0      	blx	r8
  403750:	b100      	cbz	r0, 403754 <prvUnlockQueue+0x88>
					vTaskMissedYield();
  403752:	47b8      	blx	r7
  403754:	3d01      	subs	r5, #1
  403756:	b2eb      	uxtb	r3, r5
  403758:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
  40375a:	2b00      	cmp	r3, #0
  40375c:	d1f4      	bne.n	403748 <prvUnlockQueue+0x7c>
		pxQueue->cRxLock = queueUNLOCKED;
  40375e:	23ff      	movs	r3, #255	; 0xff
  403760:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  403764:	47b0      	blx	r6
}
  403766:	b003      	add	sp, #12
  403768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40376c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40376e:	2b00      	cmp	r3, #0
  403770:	d0d7      	beq.n	403722 <prvUnlockQueue+0x56>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  403772:	f104 0024 	add.w	r0, r4, #36	; 0x24
  403776:	47c8      	blx	r9
  403778:	2800      	cmp	r0, #0
  40377a:	d0cd      	beq.n	403718 <prvUnlockQueue+0x4c>
						vTaskMissedYield();
  40377c:	47d8      	blx	fp
  40377e:	e7cb      	b.n	403718 <prvUnlockQueue+0x4c>
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  403780:	f895 6045 	ldrb.w	r6, [r5, #69]	; 0x45
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  403784:	2200      	movs	r2, #0
  403786:	4b0e      	ldr	r3, [pc, #56]	; (4037c0 <prvUnlockQueue+0xf4>)
  403788:	a901      	add	r1, sp, #4
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  40378a:	b276      	sxtb	r6, r6
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  40378c:	4628      	mov	r0, r5
  40378e:	4798      	blx	r3
  403790:	4682      	mov	sl, r0
			if( cTxLock == queueUNLOCKED )
  403792:	1c73      	adds	r3, r6, #1
  403794:	d007      	beq.n	4037a6 <prvUnlockQueue+0xda>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
  403796:	1c73      	adds	r3, r6, #1
  403798:	b25b      	sxtb	r3, r3
  40379a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  40379e:	f1ba 0f00 	cmp.w	sl, #0
  4037a2:	d0b9      	beq.n	403718 <prvUnlockQueue+0x4c>
  4037a4:	e7ea      	b.n	40377c <prvUnlockQueue+0xb0>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  4037a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  4037a8:	2b00      	cmp	r3, #0
  4037aa:	d0f8      	beq.n	40379e <prvUnlockQueue+0xd2>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  4037ac:	f105 0024 	add.w	r0, r5, #36	; 0x24
  4037b0:	47c8      	blx	r9
  4037b2:	2800      	cmp	r0, #0
  4037b4:	d0f3      	beq.n	40379e <prvUnlockQueue+0xd2>
  4037b6:	e7e1      	b.n	40377c <prvUnlockQueue+0xb0>
  4037b8:	004033e1 	.word	0x004033e1
  4037bc:	00404295 	.word	0x00404295
  4037c0:	0040350d 	.word	0x0040350d
  4037c4:	00403395 	.word	0x00403395
  4037c8:	004040ad 	.word	0x004040ad

004037cc <xQueueGenericSend>:
{
  4037cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4037d0:	b085      	sub	sp, #20
  4037d2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  4037d4:	2800      	cmp	r0, #0
  4037d6:	f000 80b8 	beq.w	40394a <xQueueGenericSend+0x17e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4037da:	2900      	cmp	r1, #0
  4037dc:	f000 80a6 	beq.w	40392c <xQueueGenericSend+0x160>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4037e0:	2b02      	cmp	r3, #2
  4037e2:	f000 8094 	beq.w	40390e <xQueueGenericSend+0x142>
  4037e6:	461e      	mov	r6, r3
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4037e8:	4b65      	ldr	r3, [pc, #404]	; (403980 <xQueueGenericSend+0x1b4>)
  4037ea:	4604      	mov	r4, r0
  4037ec:	4688      	mov	r8, r1
  4037ee:	4798      	blx	r3
  4037f0:	b910      	cbnz	r0, 4037f8 <xQueueGenericSend+0x2c>
  4037f2:	9b01      	ldr	r3, [sp, #4]
  4037f4:	2b00      	cmp	r3, #0
  4037f6:	d178      	bne.n	4038ea <xQueueGenericSend+0x11e>
  4037f8:	f1a6 0502 	sub.w	r5, r6, #2
{
  4037fc:	f04f 0a00 	mov.w	sl, #0
  403800:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 4039ac <xQueueGenericSend+0x1e0>
  403804:	fab5 f585 	clz	r5, r5
  403808:	4f5e      	ldr	r7, [pc, #376]	; (403984 <xQueueGenericSend+0x1b8>)
					vTaskInternalSetTimeOutState( &xTimeOut );
  40380a:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 4039b0 <xQueueGenericSend+0x1e4>
  40380e:	096d      	lsrs	r5, r5, #5
  403810:	e024      	b.n	40385c <xQueueGenericSend+0x90>
  403812:	f10d 0a08 	add.w	sl, sp, #8
		taskEXIT_CRITICAL();
  403816:	47b8      	blx	r7
		vTaskSuspendAll();
  403818:	4b5b      	ldr	r3, [pc, #364]	; (403988 <xQueueGenericSend+0x1bc>)
  40381a:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40381c:	47c8      	blx	r9
  40381e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  403822:	2bff      	cmp	r3, #255	; 0xff
  403824:	f000 80a7 	beq.w	403976 <xQueueGenericSend+0x1aa>
  403828:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  40382c:	2bff      	cmp	r3, #255	; 0xff
  40382e:	f000 809e 	beq.w	40396e <xQueueGenericSend+0x1a2>
  403832:	47b8      	blx	r7
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  403834:	4650      	mov	r0, sl
  403836:	a901      	add	r1, sp, #4
  403838:	4b54      	ldr	r3, [pc, #336]	; (40398c <xQueueGenericSend+0x1c0>)
  40383a:	4798      	blx	r3
  40383c:	2800      	cmp	r0, #0
  40383e:	f040 808f 	bne.w	403960 <xQueueGenericSend+0x194>
	taskENTER_CRITICAL();
  403842:	47c8      	blx	r9
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  403844:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  403846:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  403848:	429a      	cmp	r2, r3
  40384a:	d017      	beq.n	40387c <xQueueGenericSend+0xb0>
	taskEXIT_CRITICAL();
  40384c:	47b8      	blx	r7
				prvUnlockQueue( pxQueue );
  40384e:	4b50      	ldr	r3, [pc, #320]	; (403990 <xQueueGenericSend+0x1c4>)
  403850:	4620      	mov	r0, r4
  403852:	4798      	blx	r3
				( void ) xTaskResumeAll();
  403854:	4b4f      	ldr	r3, [pc, #316]	; (403994 <xQueueGenericSend+0x1c8>)
  403856:	4798      	blx	r3
  403858:	f04f 0a01 	mov.w	sl, #1
		taskENTER_CRITICAL();
  40385c:	47c8      	blx	r9
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  40385e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  403860:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  403862:	429a      	cmp	r2, r3
  403864:	d325      	bcc.n	4038b2 <xQueueGenericSend+0xe6>
  403866:	bb25      	cbnz	r5, 4038b2 <xQueueGenericSend+0xe6>
				if( xTicksToWait == ( TickType_t ) 0 )
  403868:	9b01      	ldr	r3, [sp, #4]
  40386a:	b1eb      	cbz	r3, 4038a8 <xQueueGenericSend+0xdc>
				else if( xEntryTimeSet == pdFALSE )
  40386c:	f1ba 0f00 	cmp.w	sl, #0
  403870:	d1cf      	bne.n	403812 <xQueueGenericSend+0x46>
					vTaskInternalSetTimeOutState( &xTimeOut );
  403872:	f10d 0a08 	add.w	sl, sp, #8
  403876:	4650      	mov	r0, sl
  403878:	47d8      	blx	fp
  40387a:	e7cc      	b.n	403816 <xQueueGenericSend+0x4a>
	taskEXIT_CRITICAL();
  40387c:	47b8      	blx	r7
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  40387e:	9901      	ldr	r1, [sp, #4]
  403880:	f104 0010 	add.w	r0, r4, #16
  403884:	4b44      	ldr	r3, [pc, #272]	; (403998 <xQueueGenericSend+0x1cc>)
  403886:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  403888:	4b41      	ldr	r3, [pc, #260]	; (403990 <xQueueGenericSend+0x1c4>)
  40388a:	4620      	mov	r0, r4
  40388c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40388e:	4b41      	ldr	r3, [pc, #260]	; (403994 <xQueueGenericSend+0x1c8>)
  403890:	4798      	blx	r3
  403892:	2800      	cmp	r0, #0
  403894:	d1e0      	bne.n	403858 <xQueueGenericSend+0x8c>
					portYIELD_WITHIN_API();
  403896:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40389a:	4a40      	ldr	r2, [pc, #256]	; (40399c <xQueueGenericSend+0x1d0>)
  40389c:	6013      	str	r3, [r2, #0]
  40389e:	f3bf 8f4f 	dsb	sy
  4038a2:	f3bf 8f6f 	isb	sy
  4038a6:	e7d7      	b.n	403858 <xQueueGenericSend+0x8c>
					taskEXIT_CRITICAL();
  4038a8:	47b8      	blx	r7
					return errQUEUE_FULL;
  4038aa:	4628      	mov	r0, r5
}
  4038ac:	b005      	add	sp, #20
  4038ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4038b2:	4b3b      	ldr	r3, [pc, #236]	; (4039a0 <xQueueGenericSend+0x1d4>)
  4038b4:	4641      	mov	r1, r8
  4038b6:	4632      	mov	r2, r6
  4038b8:	4620      	mov	r0, r4
  4038ba:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  4038bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4038be:	b17b      	cbz	r3, 4038e0 <xQueueGenericSend+0x114>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  4038c0:	4631      	mov	r1, r6
  4038c2:	4620      	mov	r0, r4
  4038c4:	4b37      	ldr	r3, [pc, #220]	; (4039a4 <xQueueGenericSend+0x1d8>)
  4038c6:	4798      	blx	r3
  4038c8:	b138      	cbz	r0, 4038da <xQueueGenericSend+0x10e>
							queueYIELD_IF_USING_PREEMPTION();
  4038ca:	4b34      	ldr	r3, [pc, #208]	; (40399c <xQueueGenericSend+0x1d0>)
  4038cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4038d0:	601a      	str	r2, [r3, #0]
  4038d2:	f3bf 8f4f 	dsb	sy
  4038d6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  4038da:	47b8      	blx	r7
				return pdPASS;
  4038dc:	2001      	movs	r0, #1
  4038de:	e7e5      	b.n	4038ac <xQueueGenericSend+0xe0>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4038e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4038e2:	b96b      	cbnz	r3, 403900 <xQueueGenericSend+0x134>
						else if( xYieldRequired != pdFALSE )
  4038e4:	2800      	cmp	r0, #0
  4038e6:	d1f0      	bne.n	4038ca <xQueueGenericSend+0xfe>
  4038e8:	e7f7      	b.n	4038da <xQueueGenericSend+0x10e>
  4038ea:	f04f 0380 	mov.w	r3, #128	; 0x80
  4038ee:	b672      	cpsid	i
  4038f0:	f383 8811 	msr	BASEPRI, r3
  4038f4:	f3bf 8f6f 	isb	sy
  4038f8:	f3bf 8f4f 	dsb	sy
  4038fc:	b662      	cpsie	i
  4038fe:	e7fe      	b.n	4038fe <xQueueGenericSend+0x132>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  403900:	f104 0024 	add.w	r0, r4, #36	; 0x24
  403904:	4b28      	ldr	r3, [pc, #160]	; (4039a8 <xQueueGenericSend+0x1dc>)
  403906:	4798      	blx	r3
  403908:	2800      	cmp	r0, #0
  40390a:	d1de      	bne.n	4038ca <xQueueGenericSend+0xfe>
  40390c:	e7e5      	b.n	4038da <xQueueGenericSend+0x10e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40390e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  403910:	2a01      	cmp	r2, #1
  403912:	f43f af68 	beq.w	4037e6 <xQueueGenericSend+0x1a>
  403916:	f04f 0380 	mov.w	r3, #128	; 0x80
  40391a:	b672      	cpsid	i
  40391c:	f383 8811 	msr	BASEPRI, r3
  403920:	f3bf 8f6f 	isb	sy
  403924:	f3bf 8f4f 	dsb	sy
  403928:	b662      	cpsie	i
  40392a:	e7fe      	b.n	40392a <xQueueGenericSend+0x15e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40392c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40392e:	2a00      	cmp	r2, #0
  403930:	f43f af56 	beq.w	4037e0 <xQueueGenericSend+0x14>
  403934:	f04f 0380 	mov.w	r3, #128	; 0x80
  403938:	b672      	cpsid	i
  40393a:	f383 8811 	msr	BASEPRI, r3
  40393e:	f3bf 8f6f 	isb	sy
  403942:	f3bf 8f4f 	dsb	sy
  403946:	b662      	cpsie	i
  403948:	e7fe      	b.n	403948 <xQueueGenericSend+0x17c>
  40394a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40394e:	b672      	cpsid	i
  403950:	f383 8811 	msr	BASEPRI, r3
  403954:	f3bf 8f6f 	isb	sy
  403958:	f3bf 8f4f 	dsb	sy
  40395c:	b662      	cpsie	i
  40395e:	e7fe      	b.n	40395e <xQueueGenericSend+0x192>
			prvUnlockQueue( pxQueue );
  403960:	4620      	mov	r0, r4
  403962:	4b0b      	ldr	r3, [pc, #44]	; (403990 <xQueueGenericSend+0x1c4>)
  403964:	4798      	blx	r3
			( void ) xTaskResumeAll();
  403966:	4b0b      	ldr	r3, [pc, #44]	; (403994 <xQueueGenericSend+0x1c8>)
  403968:	4798      	blx	r3
			return errQUEUE_FULL;
  40396a:	2000      	movs	r0, #0
  40396c:	e79e      	b.n	4038ac <xQueueGenericSend+0xe0>
		prvLockQueue( pxQueue );
  40396e:	2300      	movs	r3, #0
  403970:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  403974:	e75d      	b.n	403832 <xQueueGenericSend+0x66>
  403976:	2300      	movs	r3, #0
  403978:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  40397c:	e754      	b.n	403828 <xQueueGenericSend+0x5c>
  40397e:	bf00      	nop
  403980:	004042a1 	.word	0x004042a1
  403984:	004033e1 	.word	0x004033e1
  403988:	00403c69 	.word	0x00403c69
  40398c:	004041f1 	.word	0x004041f1
  403990:	004036cd 	.word	0x004036cd
  403994:	00403e09 	.word	0x00403e09
  403998:	00403ff5 	.word	0x00403ff5
  40399c:	e000ed04 	.word	0xe000ed04
  4039a0:	0040350d 	.word	0x0040350d
  4039a4:	004035c5 	.word	0x004035c5
  4039a8:	004040ad 	.word	0x004040ad
  4039ac:	00403395 	.word	0x00403395
  4039b0:	004041d9 	.word	0x004041d9

004039b4 <xQueueGenericSendFromISR>:
{
  4039b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
  4039b8:	b318      	cbz	r0, 403a02 <xQueueGenericSendFromISR+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4039ba:	2900      	cmp	r1, #0
  4039bc:	d04a      	beq.n	403a54 <xQueueGenericSendFromISR+0xa0>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4039be:	2b02      	cmp	r3, #2
  4039c0:	d03a      	beq.n	403a38 <xQueueGenericSendFromISR+0x84>
  4039c2:	461f      	mov	r7, r3
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4039c4:	4b38      	ldr	r3, [pc, #224]	; (403aa8 <xQueueGenericSendFromISR+0xf4>)
  4039c6:	4604      	mov	r4, r0
  4039c8:	4690      	mov	r8, r2
  4039ca:	4689      	mov	r9, r1
  4039cc:	4798      	blx	r3
	__asm volatile
  4039ce:	f3ef 8611 	mrs	r6, BASEPRI
  4039d2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4039d6:	b672      	cpsid	i
  4039d8:	f383 8811 	msr	BASEPRI, r3
  4039dc:	f3bf 8f6f 	isb	sy
  4039e0:	f3bf 8f4f 	dsb	sy
  4039e4:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4039e6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4039e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4039ea:	429a      	cmp	r2, r3
  4039ec:	d314      	bcc.n	403a18 <xQueueGenericSendFromISR+0x64>
  4039ee:	f1a7 0002 	sub.w	r0, r7, #2
  4039f2:	fab0 f080 	clz	r0, r0
  4039f6:	0940      	lsrs	r0, r0, #5
  4039f8:	b970      	cbnz	r0, 403a18 <xQueueGenericSendFromISR+0x64>
	__asm volatile
  4039fa:	f386 8811 	msr	BASEPRI, r6
}
  4039fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
  403a02:	f04f 0380 	mov.w	r3, #128	; 0x80
  403a06:	b672      	cpsid	i
  403a08:	f383 8811 	msr	BASEPRI, r3
  403a0c:	f3bf 8f6f 	isb	sy
  403a10:	f3bf 8f4f 	dsb	sy
  403a14:	b662      	cpsie	i
  403a16:	e7fe      	b.n	403a16 <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
  403a18:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  403a1c:	4649      	mov	r1, r9
  403a1e:	4b23      	ldr	r3, [pc, #140]	; (403aac <xQueueGenericSendFromISR+0xf8>)
  403a20:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
  403a22:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  403a24:	4620      	mov	r0, r4
  403a26:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
  403a28:	1c6b      	adds	r3, r5, #1
  403a2a:	d021      	beq.n	403a70 <xQueueGenericSendFromISR+0xbc>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  403a2c:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
  403a2e:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  403a30:	b25b      	sxtb	r3, r3
  403a32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  403a36:	e7e0      	b.n	4039fa <xQueueGenericSendFromISR+0x46>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  403a38:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  403a3a:	2c01      	cmp	r4, #1
  403a3c:	d0c1      	beq.n	4039c2 <xQueueGenericSendFromISR+0xe>
  403a3e:	f04f 0380 	mov.w	r3, #128	; 0x80
  403a42:	b672      	cpsid	i
  403a44:	f383 8811 	msr	BASEPRI, r3
  403a48:	f3bf 8f6f 	isb	sy
  403a4c:	f3bf 8f4f 	dsb	sy
  403a50:	b662      	cpsie	i
  403a52:	e7fe      	b.n	403a52 <xQueueGenericSendFromISR+0x9e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  403a54:	6c04      	ldr	r4, [r0, #64]	; 0x40
  403a56:	2c00      	cmp	r4, #0
  403a58:	d0b1      	beq.n	4039be <xQueueGenericSendFromISR+0xa>
  403a5a:	f04f 0380 	mov.w	r3, #128	; 0x80
  403a5e:	b672      	cpsid	i
  403a60:	f383 8811 	msr	BASEPRI, r3
  403a64:	f3bf 8f6f 	isb	sy
  403a68:	f3bf 8f4f 	dsb	sy
  403a6c:	b662      	cpsie	i
  403a6e:	e7fe      	b.n	403a6e <xQueueGenericSendFromISR+0xba>
					if( pxQueue->pxQueueSetContainer != NULL )
  403a70:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  403a72:	b15b      	cbz	r3, 403a8c <xQueueGenericSendFromISR+0xd8>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  403a74:	4639      	mov	r1, r7
  403a76:	4620      	mov	r0, r4
  403a78:	4b0d      	ldr	r3, [pc, #52]	; (403ab0 <xQueueGenericSendFromISR+0xfc>)
  403a7a:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  403a7c:	b140      	cbz	r0, 403a90 <xQueueGenericSendFromISR+0xdc>
  403a7e:	f1b8 0f00 	cmp.w	r8, #0
  403a82:	d005      	beq.n	403a90 <xQueueGenericSendFromISR+0xdc>
								*pxHigherPriorityTaskWoken = pdTRUE;
  403a84:	2001      	movs	r0, #1
  403a86:	f8c8 0000 	str.w	r0, [r8]
  403a8a:	e7b6      	b.n	4039fa <xQueueGenericSendFromISR+0x46>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  403a8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403a8e:	b90b      	cbnz	r3, 403a94 <xQueueGenericSendFromISR+0xe0>
			xReturn = pdPASS;
  403a90:	2001      	movs	r0, #1
  403a92:	e7b2      	b.n	4039fa <xQueueGenericSendFromISR+0x46>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  403a94:	f104 0024 	add.w	r0, r4, #36	; 0x24
  403a98:	4b06      	ldr	r3, [pc, #24]	; (403ab4 <xQueueGenericSendFromISR+0x100>)
  403a9a:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  403a9c:	f1b8 0f00 	cmp.w	r8, #0
  403aa0:	d0f6      	beq.n	403a90 <xQueueGenericSendFromISR+0xdc>
  403aa2:	2800      	cmp	r0, #0
  403aa4:	d1ee      	bne.n	403a84 <xQueueGenericSendFromISR+0xd0>
  403aa6:	e7f3      	b.n	403a90 <xQueueGenericSendFromISR+0xdc>
  403aa8:	004034a9 	.word	0x004034a9
  403aac:	0040350d 	.word	0x0040350d
  403ab0:	004035c5 	.word	0x004035c5
  403ab4:	004040ad 	.word	0x004040ad

00403ab8 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  403ab8:	2800      	cmp	r0, #0
  403aba:	d033      	beq.n	403b24 <xQueueGiveFromISR+0x6c>
	configASSERT( pxQueue->uxItemSize == 0 );
  403abc:	6c03      	ldr	r3, [r0, #64]	; 0x40
  403abe:	b153      	cbz	r3, 403ad6 <xQueueGiveFromISR+0x1e>
  403ac0:	f04f 0380 	mov.w	r3, #128	; 0x80
  403ac4:	b672      	cpsid	i
  403ac6:	f383 8811 	msr	BASEPRI, r3
  403aca:	f3bf 8f6f 	isb	sy
  403ace:	f3bf 8f4f 	dsb	sy
  403ad2:	b662      	cpsie	i
  403ad4:	e7fe      	b.n	403ad4 <xQueueGiveFromISR+0x1c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  403ad6:	6803      	ldr	r3, [r0, #0]
  403ad8:	2b00      	cmp	r3, #0
  403ada:	d03b      	beq.n	403b54 <xQueueGiveFromISR+0x9c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  403adc:	4b2a      	ldr	r3, [pc, #168]	; (403b88 <xQueueGiveFromISR+0xd0>)
{
  403ade:	b570      	push	{r4, r5, r6, lr}
  403ae0:	4604      	mov	r4, r0
  403ae2:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  403ae4:	4798      	blx	r3
	__asm volatile
  403ae6:	f3ef 8511 	mrs	r5, BASEPRI
  403aea:	f04f 0380 	mov.w	r3, #128	; 0x80
  403aee:	b672      	cpsid	i
  403af0:	f383 8811 	msr	BASEPRI, r3
  403af4:	f3bf 8f6f 	isb	sy
  403af8:	f3bf 8f4f 	dsb	sy
  403afc:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  403afe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
  403b00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  403b02:	429a      	cmp	r2, r3
  403b04:	d224      	bcs.n	403b50 <xQueueGiveFromISR+0x98>
			const int8_t cTxLock = pxQueue->cTxLock;
  403b06:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  403b0a:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
  403b0c:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  403b0e:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
  403b10:	1c5a      	adds	r2, r3, #1
  403b12:	d012      	beq.n	403b3a <xQueueGiveFromISR+0x82>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  403b14:	3301      	adds	r3, #1
			xReturn = pdPASS;
  403b16:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  403b18:	b25b      	sxtb	r3, r3
  403b1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
  403b1e:	f385 8811 	msr	BASEPRI, r5
}
  403b22:	bd70      	pop	{r4, r5, r6, pc}
	__asm volatile
  403b24:	f04f 0380 	mov.w	r3, #128	; 0x80
  403b28:	b672      	cpsid	i
  403b2a:	f383 8811 	msr	BASEPRI, r3
  403b2e:	f3bf 8f6f 	isb	sy
  403b32:	f3bf 8f4f 	dsb	sy
  403b36:	b662      	cpsie	i
  403b38:	e7fe      	b.n	403b38 <xQueueGiveFromISR+0x80>
					if( pxQueue->pxQueueSetContainer != NULL )
  403b3a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  403b3c:	b1c3      	cbz	r3, 403b70 <xQueueGiveFromISR+0xb8>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  403b3e:	4620      	mov	r0, r4
  403b40:	2100      	movs	r1, #0
  403b42:	4b12      	ldr	r3, [pc, #72]	; (403b8c <xQueueGiveFromISR+0xd4>)
  403b44:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  403b46:	b1e0      	cbz	r0, 403b82 <xQueueGiveFromISR+0xca>
  403b48:	b1de      	cbz	r6, 403b82 <xQueueGiveFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
  403b4a:	2001      	movs	r0, #1
  403b4c:	6030      	str	r0, [r6, #0]
  403b4e:	e7e6      	b.n	403b1e <xQueueGiveFromISR+0x66>
			xReturn = errQUEUE_FULL;
  403b50:	2000      	movs	r0, #0
  403b52:	e7e4      	b.n	403b1e <xQueueGiveFromISR+0x66>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  403b54:	6843      	ldr	r3, [r0, #4]
  403b56:	2b00      	cmp	r3, #0
  403b58:	d0c0      	beq.n	403adc <xQueueGiveFromISR+0x24>
  403b5a:	f04f 0380 	mov.w	r3, #128	; 0x80
  403b5e:	b672      	cpsid	i
  403b60:	f383 8811 	msr	BASEPRI, r3
  403b64:	f3bf 8f6f 	isb	sy
  403b68:	f3bf 8f4f 	dsb	sy
  403b6c:	b662      	cpsie	i
  403b6e:	e7fe      	b.n	403b6e <xQueueGiveFromISR+0xb6>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  403b70:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403b72:	b133      	cbz	r3, 403b82 <xQueueGiveFromISR+0xca>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  403b74:	f104 0024 	add.w	r0, r4, #36	; 0x24
  403b78:	4b05      	ldr	r3, [pc, #20]	; (403b90 <xQueueGiveFromISR+0xd8>)
  403b7a:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  403b7c:	b10e      	cbz	r6, 403b82 <xQueueGiveFromISR+0xca>
  403b7e:	2800      	cmp	r0, #0
  403b80:	d1e3      	bne.n	403b4a <xQueueGiveFromISR+0x92>
			xReturn = pdPASS;
  403b82:	2001      	movs	r0, #1
  403b84:	e7cb      	b.n	403b1e <xQueueGiveFromISR+0x66>
  403b86:	bf00      	nop
  403b88:	004034a9 	.word	0x004034a9
  403b8c:	004035c5 	.word	0x004035c5
  403b90:	004040ad 	.word	0x004040ad

00403b94 <xQueueReceiveFromISR>:
	configASSERT( pxQueue );
  403b94:	b110      	cbz	r0, 403b9c <xQueueReceiveFromISR+0x8>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  403b96:	b161      	cbz	r1, 403bb2 <xQueueReceiveFromISR+0x1e>
  403b98:	4b0d      	ldr	r3, [pc, #52]	; (403bd0 <xQueueReceiveFromISR+0x3c>)
  403b9a:	4718      	bx	r3
  403b9c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403ba0:	b672      	cpsid	i
  403ba2:	f383 8811 	msr	BASEPRI, r3
  403ba6:	f3bf 8f6f 	isb	sy
  403baa:	f3bf 8f4f 	dsb	sy
  403bae:	b662      	cpsie	i
  403bb0:	e7fe      	b.n	403bb0 <xQueueReceiveFromISR+0x1c>
  403bb2:	6c03      	ldr	r3, [r0, #64]	; 0x40
  403bb4:	2b00      	cmp	r3, #0
  403bb6:	d0ef      	beq.n	403b98 <xQueueReceiveFromISR+0x4>
  403bb8:	f04f 0380 	mov.w	r3, #128	; 0x80
  403bbc:	b672      	cpsid	i
  403bbe:	f383 8811 	msr	BASEPRI, r3
  403bc2:	f3bf 8f6f 	isb	sy
  403bc6:	f3bf 8f4f 	dsb	sy
  403bca:	b662      	cpsie	i
  403bcc:	e7fe      	b.n	403bcc <xQueueReceiveFromISR+0x38>
  403bce:	bf00      	nop
  403bd0:	00403649 	.word	0x00403649

00403bd4 <xQueuePeekFromISR>:
{
  403bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxQueue );
  403bd6:	b170      	cbz	r0, 403bf6 <xQueuePeekFromISR+0x22>
	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
  403bd8:	6c03      	ldr	r3, [r0, #64]	; 0x40
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  403bda:	2900      	cmp	r1, #0
  403bdc:	d032      	beq.n	403c44 <xQueuePeekFromISR+0x70>
	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
  403bde:	b9ab      	cbnz	r3, 403c0c <xQueuePeekFromISR+0x38>
  403be0:	f04f 0380 	mov.w	r3, #128	; 0x80
  403be4:	b672      	cpsid	i
  403be6:	f383 8811 	msr	BASEPRI, r3
  403bea:	f3bf 8f6f 	isb	sy
  403bee:	f3bf 8f4f 	dsb	sy
  403bf2:	b662      	cpsie	i
  403bf4:	e7fe      	b.n	403bf4 <xQueuePeekFromISR+0x20>
  403bf6:	f04f 0380 	mov.w	r3, #128	; 0x80
  403bfa:	b672      	cpsid	i
  403bfc:	f383 8811 	msr	BASEPRI, r3
  403c00:	f3bf 8f6f 	isb	sy
  403c04:	f3bf 8f4f 	dsb	sy
  403c08:	b662      	cpsie	i
  403c0a:	e7fe      	b.n	403c0a <xQueuePeekFromISR+0x36>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  403c0c:	4b14      	ldr	r3, [pc, #80]	; (403c60 <xQueuePeekFromISR+0x8c>)
  403c0e:	4604      	mov	r4, r0
  403c10:	460d      	mov	r5, r1
  403c12:	4798      	blx	r3
	__asm volatile
  403c14:	f3ef 8611 	mrs	r6, BASEPRI
  403c18:	f04f 0380 	mov.w	r3, #128	; 0x80
  403c1c:	b672      	cpsid	i
  403c1e:	f383 8811 	msr	BASEPRI, r3
  403c22:	f3bf 8f6f 	isb	sy
  403c26:	f3bf 8f4f 	dsb	sy
  403c2a:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  403c2c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  403c2e:	b130      	cbz	r0, 403c3e <xQueuePeekFromISR+0x6a>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
  403c30:	4620      	mov	r0, r4
  403c32:	4629      	mov	r1, r5
  403c34:	4b0b      	ldr	r3, [pc, #44]	; (403c64 <xQueuePeekFromISR+0x90>)
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  403c36:	68e7      	ldr	r7, [r4, #12]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
  403c38:	4798      	blx	r3
			xReturn = pdPASS;
  403c3a:	2001      	movs	r0, #1
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  403c3c:	60e7      	str	r7, [r4, #12]
	__asm volatile
  403c3e:	f386 8811 	msr	BASEPRI, r6
}
  403c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  403c44:	2b00      	cmp	r3, #0
  403c46:	d0cb      	beq.n	403be0 <xQueuePeekFromISR+0xc>
	__asm volatile
  403c48:	f04f 0380 	mov.w	r3, #128	; 0x80
  403c4c:	b672      	cpsid	i
  403c4e:	f383 8811 	msr	BASEPRI, r3
  403c52:	f3bf 8f6f 	isb	sy
  403c56:	f3bf 8f4f 	dsb	sy
  403c5a:	b662      	cpsie	i
  403c5c:	e7fe      	b.n	403c5c <xQueuePeekFromISR+0x88>
  403c5e:	bf00      	nop
  403c60:	004034a9 	.word	0x004034a9
  403c64:	00403581 	.word	0x00403581

00403c68 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
  403c68:	4a02      	ldr	r2, [pc, #8]	; (403c74 <vTaskSuspendAll+0xc>)
  403c6a:	6813      	ldr	r3, [r2, #0]
  403c6c:	3301      	adds	r3, #1
  403c6e:	6013      	str	r3, [r2, #0]
  403c70:	4770      	bx	lr
  403c72:	bf00      	nop
  403c74:	2042b5b4 	.word	0x2042b5b4

00403c78 <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
  403c78:	b508      	push	{r3, lr}
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  403c7a:	4b02      	ldr	r3, [pc, #8]	; (403c84 <xTaskGetTickCountFromISR+0xc>)
  403c7c:	4798      	blx	r3

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
	{
		xReturn = xTickCount;
  403c7e:	4b02      	ldr	r3, [pc, #8]	; (403c88 <xTaskGetTickCountFromISR+0x10>)
  403c80:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
  403c82:	bd08      	pop	{r3, pc}
  403c84:	004034a9 	.word	0x004034a9
  403c88:	2042b5f0 	.word	0x2042b5f0

00403c8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
  403c8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  403c90:	4b4f      	ldr	r3, [pc, #316]	; (403dd0 <xTaskIncrementTick+0x144>)
  403c92:	681b      	ldr	r3, [r3, #0]
  403c94:	2b00      	cmp	r3, #0
  403c96:	d16f      	bne.n	403d78 <xTaskIncrementTick+0xec>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  403c98:	4b4e      	ldr	r3, [pc, #312]	; (403dd4 <xTaskIncrementTick+0x148>)
  403c9a:	681e      	ldr	r6, [r3, #0]
  403c9c:	3601      	adds	r6, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
  403c9e:	601e      	str	r6, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
  403ca0:	2e00      	cmp	r6, #0
  403ca2:	d05a      	beq.n	403d5a <xTaskIncrementTick+0xce>
  403ca4:	f8df a158 	ldr.w	sl, [pc, #344]	; 403e00 <xTaskIncrementTick+0x174>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
  403ca8:	f8da 2000 	ldr.w	r2, [sl]
  403cac:	2400      	movs	r4, #0
  403cae:	4296      	cmp	r6, r2
  403cb0:	d36a      	bcc.n	403d88 <xTaskIncrementTick+0xfc>
  403cb2:	4d49      	ldr	r5, [pc, #292]	; (403dd8 <xTaskIncrementTick+0x14c>)
  403cb4:	4f49      	ldr	r7, [pc, #292]	; (403ddc <xTaskIncrementTick+0x150>)
  403cb6:	f8df 814c 	ldr.w	r8, [pc, #332]	; 403e04 <xTaskIncrementTick+0x178>
  403cba:	e02f      	b.n	403d1c <xTaskIncrementTick+0x90>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  403cbc:	682a      	ldr	r2, [r5, #0]
  403cbe:	68d2      	ldr	r2, [r2, #12]
  403cc0:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  403cc4:	f8d9 1004 	ldr.w	r1, [r9, #4]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  403cc8:	f109 0b04 	add.w	fp, r9, #4
					if( xConstTickCount < xItemValue )
  403ccc:	428e      	cmp	r6, r1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  403cce:	4658      	mov	r0, fp
					if( xConstTickCount < xItemValue )
  403cd0:	d373      	bcc.n	403dba <xTaskIncrementTick+0x12e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  403cd2:	4b43      	ldr	r3, [pc, #268]	; (403de0 <xTaskIncrementTick+0x154>)
  403cd4:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  403cd6:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  403cda:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  403cde:	b109      	cbz	r1, 403ce4 <xTaskIncrementTick+0x58>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  403ce0:	4b3f      	ldr	r3, [pc, #252]	; (403de0 <xTaskIncrementTick+0x154>)
  403ce2:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
  403ce4:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
  403ce8:	f04f 0e01 	mov.w	lr, #1
  403cec:	4b3d      	ldr	r3, [pc, #244]	; (403de4 <xTaskIncrementTick+0x158>)
  403cee:	4659      	mov	r1, fp
  403cf0:	fa0e fe00 	lsl.w	lr, lr, r0
  403cf4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403cf8:	681b      	ldr	r3, [r3, #0]
  403cfa:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  403cfe:	ea4e 0e03 	orr.w	lr, lr, r3
  403d02:	4b38      	ldr	r3, [pc, #224]	; (403de4 <xTaskIncrementTick+0x158>)
  403d04:	f8c3 e000 	str.w	lr, [r3]
  403d08:	4b37      	ldr	r3, [pc, #220]	; (403de8 <xTaskIncrementTick+0x15c>)
  403d0a:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  403d0c:	f8d8 0000 	ldr.w	r0, [r8]
  403d10:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
  403d14:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
						{
							xSwitchRequired = pdTRUE;
  403d16:	4291      	cmp	r1, r2
  403d18:	bf28      	it	cs
  403d1a:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  403d1c:	682a      	ldr	r2, [r5, #0]
  403d1e:	6812      	ldr	r2, [r2, #0]
  403d20:	2a00      	cmp	r2, #0
  403d22:	d1cb      	bne.n	403cbc <xTaskIncrementTick+0x30>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  403d24:	f04f 32ff 	mov.w	r2, #4294967295
  403d28:	f8ca 2000 	str.w	r2, [sl]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  403d2c:	f8d8 3000 	ldr.w	r3, [r8]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  403d30:	492e      	ldr	r1, [pc, #184]	; (403dec <xTaskIncrementTick+0x160>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  403d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  403d34:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  403d38:	009b      	lsls	r3, r3, #2
  403d3a:	58fa      	ldr	r2, [r7, r3]
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  403d3c:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
  403d3e:	2a02      	cmp	r2, #2
  403d40:	bf28      	it	cs
  403d42:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  403d44:	b90b      	cbnz	r3, 403d4a <xTaskIncrementTick+0xbe>
			{
				vApplicationTickHook();
  403d46:	4b2a      	ldr	r3, [pc, #168]	; (403df0 <xTaskIncrementTick+0x164>)
  403d48:	4798      	blx	r3
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
  403d4a:	4b2a      	ldr	r3, [pc, #168]	; (403df4 <xTaskIncrementTick+0x168>)
  403d4c:	681b      	ldr	r3, [r3, #0]
		{
			xSwitchRequired = pdTRUE;
  403d4e:	2b00      	cmp	r3, #0
  403d50:	bf18      	it	ne
  403d52:	2401      	movne	r4, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
  403d54:	4620      	mov	r0, r4
  403d56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
  403d5a:	4d1f      	ldr	r5, [pc, #124]	; (403dd8 <xTaskIncrementTick+0x14c>)
  403d5c:	682b      	ldr	r3, [r5, #0]
  403d5e:	681b      	ldr	r3, [r3, #0]
  403d60:	b1b3      	cbz	r3, 403d90 <xTaskIncrementTick+0x104>
  403d62:	f04f 0380 	mov.w	r3, #128	; 0x80
  403d66:	b672      	cpsid	i
  403d68:	f383 8811 	msr	BASEPRI, r3
  403d6c:	f3bf 8f6f 	isb	sy
  403d70:	f3bf 8f4f 	dsb	sy
  403d74:	b662      	cpsie	i
  403d76:	e7fe      	b.n	403d76 <xTaskIncrementTick+0xea>
		++uxPendedTicks;
  403d78:	4a1c      	ldr	r2, [pc, #112]	; (403dec <xTaskIncrementTick+0x160>)
BaseType_t xSwitchRequired = pdFALSE;
  403d7a:	2400      	movs	r4, #0
			vApplicationTickHook();
  403d7c:	491c      	ldr	r1, [pc, #112]	; (403df0 <xTaskIncrementTick+0x164>)
		++uxPendedTicks;
  403d7e:	6813      	ldr	r3, [r2, #0]
  403d80:	3301      	adds	r3, #1
  403d82:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  403d84:	4788      	blx	r1
  403d86:	e7e0      	b.n	403d4a <xTaskIncrementTick+0xbe>
  403d88:	4f14      	ldr	r7, [pc, #80]	; (403ddc <xTaskIncrementTick+0x150>)
  403d8a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 403e04 <xTaskIncrementTick+0x178>
  403d8e:	e7cd      	b.n	403d2c <xTaskIncrementTick+0xa0>
			taskSWITCH_DELAYED_LISTS();
  403d90:	4b19      	ldr	r3, [pc, #100]	; (403df8 <xTaskIncrementTick+0x16c>)
  403d92:	6829      	ldr	r1, [r5, #0]
  403d94:	4a19      	ldr	r2, [pc, #100]	; (403dfc <xTaskIncrementTick+0x170>)
  403d96:	6818      	ldr	r0, [r3, #0]
  403d98:	6028      	str	r0, [r5, #0]
  403d9a:	6019      	str	r1, [r3, #0]
  403d9c:	6813      	ldr	r3, [r2, #0]
  403d9e:	3301      	adds	r3, #1
  403da0:	6013      	str	r3, [r2, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  403da2:	682b      	ldr	r3, [r5, #0]
  403da4:	681b      	ldr	r3, [r3, #0]
  403da6:	b15b      	cbz	r3, 403dc0 <xTaskIncrementTick+0x134>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  403da8:	682a      	ldr	r2, [r5, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
  403daa:	f8df a054 	ldr.w	sl, [pc, #84]	; 403e00 <xTaskIncrementTick+0x174>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  403dae:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
  403db0:	68d2      	ldr	r2, [r2, #12]
  403db2:	6852      	ldr	r2, [r2, #4]
  403db4:	f8ca 2000 	str.w	r2, [sl]
  403db8:	e776      	b.n	403ca8 <xTaskIncrementTick+0x1c>
						xNextTaskUnblockTime = xItemValue;
  403dba:	f8ca 1000 	str.w	r1, [sl]
						break;
  403dbe:	e7b5      	b.n	403d2c <xTaskIncrementTick+0xa0>
		xNextTaskUnblockTime = portMAX_DELAY;
  403dc0:	f8df a03c 	ldr.w	sl, [pc, #60]	; 403e00 <xTaskIncrementTick+0x174>
  403dc4:	f04f 32ff 	mov.w	r2, #4294967295
  403dc8:	f8ca 2000 	str.w	r2, [sl]
  403dcc:	e76c      	b.n	403ca8 <xTaskIncrementTick+0x1c>
  403dce:	bf00      	nop
  403dd0:	2042b5b4 	.word	0x2042b5b4
  403dd4:	2042b5f0 	.word	0x2042b5f0
  403dd8:	2042b540 	.word	0x2042b540
  403ddc:	2042b548 	.word	0x2042b548
  403de0:	00403349 	.word	0x00403349
  403de4:	2042b5b8 	.word	0x2042b5b8
  403de8:	004032fd 	.word	0x004032fd
  403dec:	2042b5b0 	.word	0x2042b5b0
  403df0:	004054a5 	.word	0x004054a5
  403df4:	2042b5f4 	.word	0x2042b5f4
  403df8:	2042b544 	.word	0x2042b544
  403dfc:	2042b5c0 	.word	0x2042b5c0
  403e00:	2042b5bc 	.word	0x2042b5bc
  403e04:	2042b53c 	.word	0x2042b53c

00403e08 <xTaskResumeAll>:
{
  403e08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
  403e0c:	4c3d      	ldr	r4, [pc, #244]	; (403f04 <xTaskResumeAll+0xfc>)
  403e0e:	6823      	ldr	r3, [r4, #0]
  403e10:	b953      	cbnz	r3, 403e28 <xTaskResumeAll+0x20>
  403e12:	f04f 0380 	mov.w	r3, #128	; 0x80
  403e16:	b672      	cpsid	i
  403e18:	f383 8811 	msr	BASEPRI, r3
  403e1c:	f3bf 8f6f 	isb	sy
  403e20:	f3bf 8f4f 	dsb	sy
  403e24:	b662      	cpsie	i
  403e26:	e7fe      	b.n	403e26 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  403e28:	4b37      	ldr	r3, [pc, #220]	; (403f08 <xTaskResumeAll+0x100>)
  403e2a:	4798      	blx	r3
		--uxSchedulerSuspended;
  403e2c:	6823      	ldr	r3, [r4, #0]
  403e2e:	3b01      	subs	r3, #1
  403e30:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  403e32:	6824      	ldr	r4, [r4, #0]
  403e34:	2c00      	cmp	r4, #0
  403e36:	d157      	bne.n	403ee8 <xTaskResumeAll+0xe0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  403e38:	4b34      	ldr	r3, [pc, #208]	; (403f0c <xTaskResumeAll+0x104>)
  403e3a:	681b      	ldr	r3, [r3, #0]
  403e3c:	2b00      	cmp	r3, #0
  403e3e:	d053      	beq.n	403ee8 <xTaskResumeAll+0xe0>
  403e40:	4d33      	ldr	r5, [pc, #204]	; (403f10 <xTaskResumeAll+0x108>)
  403e42:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 403f38 <xTaskResumeAll+0x130>
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  403e46:	4f33      	ldr	r7, [pc, #204]	; (403f14 <xTaskResumeAll+0x10c>)
					prvAddTaskToReadyList( pxTCB );
  403e48:	4e33      	ldr	r6, [pc, #204]	; (403f18 <xTaskResumeAll+0x110>)
  403e4a:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 403f3c <xTaskResumeAll+0x134>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  403e4e:	f8db 3000 	ldr.w	r3, [fp]
					prvAddTaskToReadyList( pxTCB );
  403e52:	f04f 0801 	mov.w	r8, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  403e56:	b333      	cbz	r3, 403ea6 <xTaskResumeAll+0x9e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  403e58:	f8db 300c 	ldr.w	r3, [fp, #12]
  403e5c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  403e5e:	f104 0a04 	add.w	sl, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  403e62:	f104 0018 	add.w	r0, r4, #24
  403e66:	47b8      	blx	r7
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  403e68:	4650      	mov	r0, sl
  403e6a:	47b8      	blx	r7
					prvAddTaskToReadyList( pxTCB );
  403e6c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  403e6e:	f8d6 e000 	ldr.w	lr, [r6]
  403e72:	4651      	mov	r1, sl
  403e74:	fa08 f300 	lsl.w	r3, r8, r0
  403e78:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403e7c:	4a27      	ldr	r2, [pc, #156]	; (403f1c <xTaskResumeAll+0x114>)
  403e7e:	ea43 030e 	orr.w	r3, r3, lr
  403e82:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  403e86:	6033      	str	r3, [r6, #0]
  403e88:	4790      	blx	r2
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  403e8a:	4b25      	ldr	r3, [pc, #148]	; (403f20 <xTaskResumeAll+0x118>)
  403e8c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  403e8e:	681b      	ldr	r3, [r3, #0]
  403e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  403e92:	429a      	cmp	r2, r3
  403e94:	d3db      	bcc.n	403e4e <xTaskResumeAll+0x46>
						xYieldPending = pdTRUE;
  403e96:	f8c5 8000 	str.w	r8, [r5]
					prvAddTaskToReadyList( pxTCB );
  403e9a:	f04f 0801 	mov.w	r8, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  403e9e:	f8db 3000 	ldr.w	r3, [fp]
  403ea2:	2b00      	cmp	r3, #0
  403ea4:	d1d8      	bne.n	403e58 <xTaskResumeAll+0x50>
				if( pxTCB != NULL )
  403ea6:	b13c      	cbz	r4, 403eb8 <xTaskResumeAll+0xb0>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  403ea8:	4b1e      	ldr	r3, [pc, #120]	; (403f24 <xTaskResumeAll+0x11c>)
  403eaa:	681a      	ldr	r2, [r3, #0]
  403eac:	6812      	ldr	r2, [r2, #0]
  403eae:	bb0a      	cbnz	r2, 403ef4 <xTaskResumeAll+0xec>
		xNextTaskUnblockTime = portMAX_DELAY;
  403eb0:	4b1d      	ldr	r3, [pc, #116]	; (403f28 <xTaskResumeAll+0x120>)
  403eb2:	f04f 32ff 	mov.w	r2, #4294967295
  403eb6:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
  403eb8:	4e1c      	ldr	r6, [pc, #112]	; (403f2c <xTaskResumeAll+0x124>)
  403eba:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
  403ebc:	b144      	cbz	r4, 403ed0 <xTaskResumeAll+0xc8>
  403ebe:	f8df 8080 	ldr.w	r8, [pc, #128]	; 403f40 <xTaskResumeAll+0x138>
								xYieldPending = pdTRUE;
  403ec2:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
  403ec4:	47c0      	blx	r8
  403ec6:	b100      	cbz	r0, 403eca <xTaskResumeAll+0xc2>
								xYieldPending = pdTRUE;
  403ec8:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
  403eca:	3c01      	subs	r4, #1
  403ecc:	d1fa      	bne.n	403ec4 <xTaskResumeAll+0xbc>
						uxPendedTicks = 0;
  403ece:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
  403ed0:	682b      	ldr	r3, [r5, #0]
  403ed2:	b14b      	cbz	r3, 403ee8 <xTaskResumeAll+0xe0>
					taskYIELD_IF_USING_PREEMPTION();
  403ed4:	4b16      	ldr	r3, [pc, #88]	; (403f30 <xTaskResumeAll+0x128>)
  403ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403eda:	601a      	str	r2, [r3, #0]
  403edc:	f3bf 8f4f 	dsb	sy
  403ee0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  403ee4:	2401      	movs	r4, #1
  403ee6:	e000      	b.n	403eea <xTaskResumeAll+0xe2>
BaseType_t xAlreadyYielded = pdFALSE;
  403ee8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  403eea:	4b12      	ldr	r3, [pc, #72]	; (403f34 <xTaskResumeAll+0x12c>)
  403eec:	4798      	blx	r3
}
  403eee:	4620      	mov	r0, r4
  403ef0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  403ef4:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
  403ef6:	4b0c      	ldr	r3, [pc, #48]	; (403f28 <xTaskResumeAll+0x120>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  403ef8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
  403efa:	68d2      	ldr	r2, [r2, #12]
  403efc:	6852      	ldr	r2, [r2, #4]
  403efe:	601a      	str	r2, [r3, #0]
  403f00:	e7da      	b.n	403eb8 <xTaskResumeAll+0xb0>
  403f02:	bf00      	nop
  403f04:	2042b5b4 	.word	0x2042b5b4
  403f08:	00403395 	.word	0x00403395
  403f0c:	2042b5ac 	.word	0x2042b5ac
  403f10:	2042b5f4 	.word	0x2042b5f4
  403f14:	00403349 	.word	0x00403349
  403f18:	2042b5b8 	.word	0x2042b5b8
  403f1c:	004032fd 	.word	0x004032fd
  403f20:	2042b53c 	.word	0x2042b53c
  403f24:	2042b540 	.word	0x2042b540
  403f28:	2042b5bc 	.word	0x2042b5bc
  403f2c:	2042b5b0 	.word	0x2042b5b0
  403f30:	e000ed04 	.word	0xe000ed04
  403f34:	004033e1 	.word	0x004033e1
  403f38:	2042b5c4 	.word	0x2042b5c4
  403f3c:	2042b548 	.word	0x2042b548
  403f40:	00403c8d 	.word	0x00403c8d

00403f44 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  403f44:	4b25      	ldr	r3, [pc, #148]	; (403fdc <vTaskSwitchContext+0x98>)
  403f46:	681b      	ldr	r3, [r3, #0]
  403f48:	2b00      	cmp	r3, #0
  403f4a:	d135      	bne.n	403fb8 <vTaskSwitchContext+0x74>
		xYieldPending = pdFALSE;
  403f4c:	4a24      	ldr	r2, [pc, #144]	; (403fe0 <vTaskSwitchContext+0x9c>)
{
  403f4e:	b510      	push	{r4, lr}
		taskCHECK_FOR_STACK_OVERFLOW();
  403f50:	4c24      	ldr	r4, [pc, #144]	; (403fe4 <vTaskSwitchContext+0xa0>)
		xYieldPending = pdFALSE;
  403f52:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  403f54:	6823      	ldr	r3, [r4, #0]
  403f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403f58:	681a      	ldr	r2, [r3, #0]
  403f5a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  403f5e:	d103      	bne.n	403f68 <vTaskSwitchContext+0x24>
  403f60:	685a      	ldr	r2, [r3, #4]
  403f62:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  403f66:	d02b      	beq.n	403fc0 <vTaskSwitchContext+0x7c>
  403f68:	6820      	ldr	r0, [r4, #0]
  403f6a:	6821      	ldr	r1, [r4, #0]
  403f6c:	4b1e      	ldr	r3, [pc, #120]	; (403fe8 <vTaskSwitchContext+0xa4>)
  403f6e:	3134      	adds	r1, #52	; 0x34
  403f70:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  403f72:	4b1e      	ldr	r3, [pc, #120]	; (403fec <vTaskSwitchContext+0xa8>)
  403f74:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
  403f76:	fab3 f383 	clz	r3, r3
  403f7a:	b2db      	uxtb	r3, r3
  403f7c:	4a1c      	ldr	r2, [pc, #112]	; (403ff0 <vTaskSwitchContext+0xac>)
  403f7e:	f1c3 031f 	rsb	r3, r3, #31
  403f82:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  403f86:	009b      	lsls	r3, r3, #2
  403f88:	58d0      	ldr	r0, [r2, r3]
  403f8a:	18d1      	adds	r1, r2, r3
  403f8c:	b950      	cbnz	r0, 403fa4 <vTaskSwitchContext+0x60>
	__asm volatile
  403f8e:	f04f 0380 	mov.w	r3, #128	; 0x80
  403f92:	b672      	cpsid	i
  403f94:	f383 8811 	msr	BASEPRI, r3
  403f98:	f3bf 8f6f 	isb	sy
  403f9c:	f3bf 8f4f 	dsb	sy
  403fa0:	b662      	cpsie	i
  403fa2:	e7fe      	b.n	403fa2 <vTaskSwitchContext+0x5e>
  403fa4:	3308      	adds	r3, #8
  403fa6:	6848      	ldr	r0, [r1, #4]
  403fa8:	441a      	add	r2, r3
  403faa:	6843      	ldr	r3, [r0, #4]
  403fac:	4293      	cmp	r3, r2
  403fae:	604b      	str	r3, [r1, #4]
  403fb0:	d00f      	beq.n	403fd2 <vTaskSwitchContext+0x8e>
  403fb2:	68db      	ldr	r3, [r3, #12]
  403fb4:	6023      	str	r3, [r4, #0]
  403fb6:	bd10      	pop	{r4, pc}
		xYieldPending = pdTRUE;
  403fb8:	4b09      	ldr	r3, [pc, #36]	; (403fe0 <vTaskSwitchContext+0x9c>)
  403fba:	2201      	movs	r2, #1
  403fbc:	601a      	str	r2, [r3, #0]
  403fbe:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  403fc0:	689a      	ldr	r2, [r3, #8]
  403fc2:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  403fc6:	d1cf      	bne.n	403f68 <vTaskSwitchContext+0x24>
  403fc8:	68db      	ldr	r3, [r3, #12]
  403fca:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  403fce:	d1cb      	bne.n	403f68 <vTaskSwitchContext+0x24>
  403fd0:	e7cf      	b.n	403f72 <vTaskSwitchContext+0x2e>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  403fd2:	685b      	ldr	r3, [r3, #4]
  403fd4:	604b      	str	r3, [r1, #4]
  403fd6:	68db      	ldr	r3, [r3, #12]
  403fd8:	6023      	str	r3, [r4, #0]
  403fda:	bd10      	pop	{r4, pc}
  403fdc:	2042b5b4 	.word	0x2042b5b4
  403fe0:	2042b5f4 	.word	0x2042b5f4
  403fe4:	2042b53c 	.word	0x2042b53c
  403fe8:	0040548d 	.word	0x0040548d
  403fec:	2042b5b8 	.word	0x2042b5b8
  403ff0:	2042b548 	.word	0x2042b548

00403ff4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
  403ff4:	2800      	cmp	r0, #0
  403ff6:	d02a      	beq.n	40404e <vTaskPlaceOnEventList+0x5a>
{
  403ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  403ffc:	4d21      	ldr	r5, [pc, #132]	; (404084 <vTaskPlaceOnEventList+0x90>)
  403ffe:	460c      	mov	r4, r1
  404000:	4e21      	ldr	r6, [pc, #132]	; (404088 <vTaskPlaceOnEventList+0x94>)
  404002:	6829      	ldr	r1, [r5, #0]
  404004:	3118      	adds	r1, #24
  404006:	47b0      	blx	r6


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
  404008:	4a20      	ldr	r2, [pc, #128]	; (40408c <vTaskPlaceOnEventList+0x98>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  40400a:	4b21      	ldr	r3, [pc, #132]	; (404090 <vTaskPlaceOnEventList+0x9c>)
const TickType_t xConstTickCount = xTickCount;
  40400c:	6817      	ldr	r7, [r2, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  40400e:	6828      	ldr	r0, [r5, #0]
  404010:	3004      	adds	r0, #4
  404012:	4798      	blx	r3
  404014:	b940      	cbnz	r0, 404028 <vTaskPlaceOnEventList+0x34>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  404016:	682b      	ldr	r3, [r5, #0]
  404018:	2201      	movs	r2, #1
  40401a:	491e      	ldr	r1, [pc, #120]	; (404094 <vTaskPlaceOnEventList+0xa0>)
  40401c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  40401e:	680b      	ldr	r3, [r1, #0]
  404020:	4082      	lsls	r2, r0
  404022:	ea23 0302 	bic.w	r3, r3, r2
  404026:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  404028:	1c63      	adds	r3, r4, #1
  40402a:	d01b      	beq.n	404064 <vTaskPlaceOnEventList+0x70>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
  40402c:	443c      	add	r4, r7

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  40402e:	682b      	ldr	r3, [r5, #0]

			if( xTimeToWake < xConstTickCount )
  404030:	42a7      	cmp	r7, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  404032:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
  404034:	d81d      	bhi.n	404072 <vTaskPlaceOnEventList+0x7e>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  404036:	4b18      	ldr	r3, [pc, #96]	; (404098 <vTaskPlaceOnEventList+0xa4>)
  404038:	6818      	ldr	r0, [r3, #0]
  40403a:	6829      	ldr	r1, [r5, #0]
  40403c:	3104      	adds	r1, #4
  40403e:	47b0      	blx	r6

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
  404040:	4b16      	ldr	r3, [pc, #88]	; (40409c <vTaskPlaceOnEventList+0xa8>)
  404042:	681a      	ldr	r2, [r3, #0]
  404044:	4294      	cmp	r4, r2
  404046:	d200      	bcs.n	40404a <vTaskPlaceOnEventList+0x56>
				{
					xNextTaskUnblockTime = xTimeToWake;
  404048:	601c      	str	r4, [r3, #0]
  40404a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40404e:	f04f 0380 	mov.w	r3, #128	; 0x80
  404052:	b672      	cpsid	i
  404054:	f383 8811 	msr	BASEPRI, r3
  404058:	f3bf 8f6f 	isb	sy
  40405c:	f3bf 8f4f 	dsb	sy
  404060:	b662      	cpsie	i
  404062:	e7fe      	b.n	404062 <vTaskPlaceOnEventList+0x6e>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  404064:	6829      	ldr	r1, [r5, #0]
  404066:	480e      	ldr	r0, [pc, #56]	; (4040a0 <vTaskPlaceOnEventList+0xac>)
  404068:	3104      	adds	r1, #4
  40406a:	4b0e      	ldr	r3, [pc, #56]	; (4040a4 <vTaskPlaceOnEventList+0xb0>)
}
  40406c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  404070:	4718      	bx	r3
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  404072:	4b0d      	ldr	r3, [pc, #52]	; (4040a8 <vTaskPlaceOnEventList+0xb4>)
  404074:	6818      	ldr	r0, [r3, #0]
  404076:	4633      	mov	r3, r6
  404078:	6829      	ldr	r1, [r5, #0]
}
  40407a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  40407e:	3104      	adds	r1, #4
  404080:	4718      	bx	r3
  404082:	bf00      	nop
  404084:	2042b53c 	.word	0x2042b53c
  404088:	00403315 	.word	0x00403315
  40408c:	2042b5f0 	.word	0x2042b5f0
  404090:	00403349 	.word	0x00403349
  404094:	2042b5b8 	.word	0x2042b5b8
  404098:	2042b540 	.word	0x2042b540
  40409c:	2042b5bc 	.word	0x2042b5bc
  4040a0:	2042b5dc 	.word	0x2042b5dc
  4040a4:	004032fd 	.word	0x004032fd
  4040a8:	2042b544 	.word	0x2042b544

004040ac <xTaskRemoveFromEventList>:
{
  4040ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4040ae:	68c3      	ldr	r3, [r0, #12]
  4040b0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  4040b2:	b31c      	cbz	r4, 4040fc <xTaskRemoveFromEventList+0x50>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4040b4:	f104 0518 	add.w	r5, r4, #24
  4040b8:	4f19      	ldr	r7, [pc, #100]	; (404120 <xTaskRemoveFromEventList+0x74>)
  4040ba:	4628      	mov	r0, r5
  4040bc:	47b8      	blx	r7
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4040be:	4b19      	ldr	r3, [pc, #100]	; (404124 <xTaskRemoveFromEventList+0x78>)
  4040c0:	681b      	ldr	r3, [r3, #0]
  4040c2:	bb43      	cbnz	r3, 404116 <xTaskRemoveFromEventList+0x6a>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
  4040c4:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
  4040c6:	4d18      	ldr	r5, [pc, #96]	; (404128 <xTaskRemoveFromEventList+0x7c>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
  4040c8:	4630      	mov	r0, r6
  4040ca:	47b8      	blx	r7
		prvAddTaskToReadyList( pxUnblockedTCB );
  4040cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4040ce:	2301      	movs	r3, #1
  4040d0:	4816      	ldr	r0, [pc, #88]	; (40412c <xTaskRemoveFromEventList+0x80>)
  4040d2:	eb02 0782 	add.w	r7, r2, r2, lsl #2
  4040d6:	4631      	mov	r1, r6
  4040d8:	4093      	lsls	r3, r2
  4040da:	682a      	ldr	r2, [r5, #0]
  4040dc:	eb00 0087 	add.w	r0, r0, r7, lsl #2
  4040e0:	4313      	orrs	r3, r2
  4040e2:	4a13      	ldr	r2, [pc, #76]	; (404130 <xTaskRemoveFromEventList+0x84>)
  4040e4:	602b      	str	r3, [r5, #0]
  4040e6:	4790      	blx	r2
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  4040e8:	4b12      	ldr	r3, [pc, #72]	; (404134 <xTaskRemoveFromEventList+0x88>)
  4040ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4040ec:	681b      	ldr	r3, [r3, #0]
  4040ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4040f0:	429a      	cmp	r2, r3
  4040f2:	d90e      	bls.n	404112 <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
  4040f4:	4b10      	ldr	r3, [pc, #64]	; (404138 <xTaskRemoveFromEventList+0x8c>)
  4040f6:	2001      	movs	r0, #1
  4040f8:	6018      	str	r0, [r3, #0]
  4040fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4040fc:	f04f 0380 	mov.w	r3, #128	; 0x80
  404100:	b672      	cpsid	i
  404102:	f383 8811 	msr	BASEPRI, r3
  404106:	f3bf 8f6f 	isb	sy
  40410a:	f3bf 8f4f 	dsb	sy
  40410e:	b662      	cpsie	i
  404110:	e7fe      	b.n	404110 <xTaskRemoveFromEventList+0x64>
		xReturn = pdFALSE;
  404112:	2000      	movs	r0, #0
}
  404114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  404116:	4629      	mov	r1, r5
  404118:	4808      	ldr	r0, [pc, #32]	; (40413c <xTaskRemoveFromEventList+0x90>)
  40411a:	4b05      	ldr	r3, [pc, #20]	; (404130 <xTaskRemoveFromEventList+0x84>)
  40411c:	4798      	blx	r3
  40411e:	e7e3      	b.n	4040e8 <xTaskRemoveFromEventList+0x3c>
  404120:	00403349 	.word	0x00403349
  404124:	2042b5b4 	.word	0x2042b5b4
  404128:	2042b5b8 	.word	0x2042b5b8
  40412c:	2042b548 	.word	0x2042b548
  404130:	004032fd 	.word	0x004032fd
  404134:	2042b53c 	.word	0x2042b53c
  404138:	2042b5f4 	.word	0x2042b5f4
  40413c:	2042b5c4 	.word	0x2042b5c4

00404140 <vTaskRemoveFromUnorderedEventList>:
{
  404140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
  404142:	4b1e      	ldr	r3, [pc, #120]	; (4041bc <vTaskRemoveFromUnorderedEventList+0x7c>)
  404144:	681b      	ldr	r3, [r3, #0]
  404146:	b953      	cbnz	r3, 40415e <vTaskRemoveFromUnorderedEventList+0x1e>
  404148:	f04f 0380 	mov.w	r3, #128	; 0x80
  40414c:	b672      	cpsid	i
  40414e:	f383 8811 	msr	BASEPRI, r3
  404152:	f3bf 8f6f 	isb	sy
  404156:	f3bf 8f4f 	dsb	sy
  40415a:	b662      	cpsie	i
  40415c:	e7fe      	b.n	40415c <vTaskRemoveFromUnorderedEventList+0x1c>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
  40415e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
  404162:	68c4      	ldr	r4, [r0, #12]
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
  404164:	6001      	str	r1, [r0, #0]
	configASSERT( pxUnblockedTCB );
  404166:	b1ec      	cbz	r4, 4041a4 <vTaskRemoveFromUnorderedEventList+0x64>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
  404168:	1d26      	adds	r6, r4, #4
	( void ) uxListRemove( pxEventListItem );
  40416a:	4f15      	ldr	r7, [pc, #84]	; (4041c0 <vTaskRemoveFromUnorderedEventList+0x80>)
  40416c:	47b8      	blx	r7
	prvAddTaskToReadyList( pxUnblockedTCB );
  40416e:	2501      	movs	r5, #1
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
  404170:	4630      	mov	r0, r6
  404172:	47b8      	blx	r7
	prvAddTaskToReadyList( pxUnblockedTCB );
  404174:	4a13      	ldr	r2, [pc, #76]	; (4041c4 <vTaskRemoveFromUnorderedEventList+0x84>)
  404176:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  404178:	4631      	mov	r1, r6
  40417a:	6816      	ldr	r6, [r2, #0]
  40417c:	fa05 f300 	lsl.w	r3, r5, r0
  404180:	4f11      	ldr	r7, [pc, #68]	; (4041c8 <vTaskRemoveFromUnorderedEventList+0x88>)
  404182:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  404186:	4333      	orrs	r3, r6
  404188:	4e10      	ldr	r6, [pc, #64]	; (4041cc <vTaskRemoveFromUnorderedEventList+0x8c>)
  40418a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  40418e:	6013      	str	r3, [r2, #0]
  404190:	47b0      	blx	r6
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  404192:	4b0f      	ldr	r3, [pc, #60]	; (4041d0 <vTaskRemoveFromUnorderedEventList+0x90>)
  404194:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  404196:	681b      	ldr	r3, [r3, #0]
  404198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40419a:	429a      	cmp	r2, r3
  40419c:	d901      	bls.n	4041a2 <vTaskRemoveFromUnorderedEventList+0x62>
		xYieldPending = pdTRUE;
  40419e:	4b0d      	ldr	r3, [pc, #52]	; (4041d4 <vTaskRemoveFromUnorderedEventList+0x94>)
  4041a0:	601d      	str	r5, [r3, #0]
  4041a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4041a4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4041a8:	b672      	cpsid	i
  4041aa:	f383 8811 	msr	BASEPRI, r3
  4041ae:	f3bf 8f6f 	isb	sy
  4041b2:	f3bf 8f4f 	dsb	sy
  4041b6:	b662      	cpsie	i
  4041b8:	e7fe      	b.n	4041b8 <vTaskRemoveFromUnorderedEventList+0x78>
  4041ba:	bf00      	nop
  4041bc:	2042b5b4 	.word	0x2042b5b4
  4041c0:	00403349 	.word	0x00403349
  4041c4:	2042b5b8 	.word	0x2042b5b8
  4041c8:	2042b548 	.word	0x2042b548
  4041cc:	004032fd 	.word	0x004032fd
  4041d0:	2042b53c 	.word	0x2042b53c
  4041d4:	2042b5f4 	.word	0x2042b5f4

004041d8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4041d8:	4a03      	ldr	r2, [pc, #12]	; (4041e8 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
  4041da:	4b04      	ldr	r3, [pc, #16]	; (4041ec <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4041dc:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4041de:	681b      	ldr	r3, [r3, #0]
  4041e0:	e880 000c 	stmia.w	r0, {r2, r3}
  4041e4:	4770      	bx	lr
  4041e6:	bf00      	nop
  4041e8:	2042b5c0 	.word	0x2042b5c0
  4041ec:	2042b5f0 	.word	0x2042b5f0

004041f0 <xTaskCheckForTimeOut>:
{
  4041f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
  4041f2:	2800      	cmp	r0, #0
  4041f4:	d02d      	beq.n	404252 <xTaskCheckForTimeOut+0x62>
	configASSERT( pxTicksToWait );
  4041f6:	b309      	cbz	r1, 40423c <xTaskCheckForTimeOut+0x4c>
  4041f8:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4041fa:	4b22      	ldr	r3, [pc, #136]	; (404284 <xTaskCheckForTimeOut+0x94>)
  4041fc:	4604      	mov	r4, r0
  4041fe:	4798      	blx	r3
			if( *pxTicksToWait == portMAX_DELAY )
  404200:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
  404202:	f8df e08c 	ldr.w	lr, [pc, #140]	; 404290 <xTaskCheckForTimeOut+0xa0>
			if( *pxTicksToWait == portMAX_DELAY )
  404206:	1c59      	adds	r1, r3, #1
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  404208:	6866      	ldr	r6, [r4, #4]
		const TickType_t xConstTickCount = xTickCount;
  40420a:	f8de 2000 	ldr.w	r2, [lr]
			if( *pxTicksToWait == portMAX_DELAY )
  40420e:	d037      	beq.n	404280 <xTaskCheckForTimeOut+0x90>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  404210:	481d      	ldr	r0, [pc, #116]	; (404288 <xTaskCheckForTimeOut+0x98>)
  404212:	6821      	ldr	r1, [r4, #0]
  404214:	6807      	ldr	r7, [r0, #0]
  404216:	42b9      	cmp	r1, r7
  404218:	d006      	beq.n	404228 <xTaskCheckForTimeOut+0x38>
  40421a:	42b2      	cmp	r2, r6
  40421c:	d304      	bcc.n	404228 <xTaskCheckForTimeOut+0x38>
			xReturn = pdTRUE;
  40421e:	2601      	movs	r6, #1
	taskEXIT_CRITICAL();
  404220:	4b1a      	ldr	r3, [pc, #104]	; (40428c <xTaskCheckForTimeOut+0x9c>)
  404222:	4798      	blx	r3
}
  404224:	4630      	mov	r0, r6
  404226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  404228:	1b92      	subs	r2, r2, r6
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
  40422a:	429a      	cmp	r2, r3
  40422c:	d31c      	bcc.n	404268 <xTaskCheckForTimeOut+0x78>
			*pxTicksToWait = 0;
  40422e:	2300      	movs	r3, #0
			xReturn = pdTRUE;
  404230:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
  404232:	602b      	str	r3, [r5, #0]
	taskEXIT_CRITICAL();
  404234:	4b15      	ldr	r3, [pc, #84]	; (40428c <xTaskCheckForTimeOut+0x9c>)
  404236:	4798      	blx	r3
}
  404238:	4630      	mov	r0, r6
  40423a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40423c:	f04f 0380 	mov.w	r3, #128	; 0x80
  404240:	b672      	cpsid	i
  404242:	f383 8811 	msr	BASEPRI, r3
  404246:	f3bf 8f6f 	isb	sy
  40424a:	f3bf 8f4f 	dsb	sy
  40424e:	b662      	cpsie	i
  404250:	e7fe      	b.n	404250 <xTaskCheckForTimeOut+0x60>
  404252:	f04f 0380 	mov.w	r3, #128	; 0x80
  404256:	b672      	cpsid	i
  404258:	f383 8811 	msr	BASEPRI, r3
  40425c:	f3bf 8f6f 	isb	sy
  404260:	f3bf 8f4f 	dsb	sy
  404264:	b662      	cpsie	i
  404266:	e7fe      	b.n	404266 <xTaskCheckForTimeOut+0x76>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  404268:	6800      	ldr	r0, [r0, #0]
			*pxTicksToWait -= xElapsedTime;
  40426a:	1a9b      	subs	r3, r3, r2
	pxTimeOut->xTimeOnEntering = xTickCount;
  40426c:	f8de 2000 	ldr.w	r2, [lr]
			xReturn = pdFALSE;
  404270:	2600      	movs	r6, #0
			*pxTicksToWait -= xElapsedTime;
  404272:	602b      	str	r3, [r5, #0]
	taskEXIT_CRITICAL();
  404274:	4b05      	ldr	r3, [pc, #20]	; (40428c <xTaskCheckForTimeOut+0x9c>)
	pxTimeOut->xTimeOnEntering = xTickCount;
  404276:	e884 0005 	stmia.w	r4, {r0, r2}
	taskEXIT_CRITICAL();
  40427a:	4798      	blx	r3
}
  40427c:	4630      	mov	r0, r6
  40427e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
  404280:	2600      	movs	r6, #0
  404282:	e7cd      	b.n	404220 <xTaskCheckForTimeOut+0x30>
  404284:	00403395 	.word	0x00403395
  404288:	2042b5c0 	.word	0x2042b5c0
  40428c:	004033e1 	.word	0x004033e1
  404290:	2042b5f0 	.word	0x2042b5f0

00404294 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  404294:	4b01      	ldr	r3, [pc, #4]	; (40429c <vTaskMissedYield+0x8>)
  404296:	2201      	movs	r2, #1
  404298:	601a      	str	r2, [r3, #0]
  40429a:	4770      	bx	lr
  40429c:	2042b5f4 	.word	0x2042b5f4

004042a0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
  4042a0:	4b05      	ldr	r3, [pc, #20]	; (4042b8 <xTaskGetSchedulerState+0x18>)
  4042a2:	681b      	ldr	r3, [r3, #0]
  4042a4:	b133      	cbz	r3, 4042b4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4042a6:	4b05      	ldr	r3, [pc, #20]	; (4042bc <xTaskGetSchedulerState+0x1c>)
  4042a8:	681b      	ldr	r3, [r3, #0]
  4042aa:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
  4042ac:	bf0c      	ite	eq
  4042ae:	2002      	moveq	r0, #2
  4042b0:	2000      	movne	r0, #0
  4042b2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  4042b4:	2001      	movs	r0, #1
	}
  4042b6:	4770      	bx	lr
  4042b8:	2042b5d8 	.word	0x2042b5d8
  4042bc:	2042b5b4 	.word	0x2042b5b4

004042c0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
  4042c0:	2800      	cmp	r0, #0
  4042c2:	d042      	beq.n	40434a <xTaskPriorityDisinherit+0x8a>
	{
  4042c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
  4042c6:	4b2b      	ldr	r3, [pc, #172]	; (404374 <xTaskPriorityDisinherit+0xb4>)
  4042c8:	681b      	ldr	r3, [r3, #0]
  4042ca:	4298      	cmp	r0, r3
  4042cc:	d00a      	beq.n	4042e4 <xTaskPriorityDisinherit+0x24>
  4042ce:	f04f 0380 	mov.w	r3, #128	; 0x80
  4042d2:	b672      	cpsid	i
  4042d4:	f383 8811 	msr	BASEPRI, r3
  4042d8:	f3bf 8f6f 	isb	sy
  4042dc:	f3bf 8f4f 	dsb	sy
  4042e0:	b662      	cpsie	i
  4042e2:	e7fe      	b.n	4042e2 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
  4042e4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4042e6:	b953      	cbnz	r3, 4042fe <xTaskPriorityDisinherit+0x3e>
  4042e8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4042ec:	b672      	cpsid	i
  4042ee:	f383 8811 	msr	BASEPRI, r3
  4042f2:	f3bf 8f6f 	isb	sy
  4042f6:	f3bf 8f4f 	dsb	sy
  4042fa:	b662      	cpsie	i
  4042fc:	e7fe      	b.n	4042fc <xTaskPriorityDisinherit+0x3c>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4042fe:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
  404300:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  404302:	6c82      	ldr	r2, [r0, #72]	; 0x48
			( pxTCB->uxMutexesHeld )--;
  404304:	64c3      	str	r3, [r0, #76]	; 0x4c
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  404306:	4291      	cmp	r1, r2
  404308:	d031      	beq.n	40436e <xTaskPriorityDisinherit+0xae>
  40430a:	2b00      	cmp	r3, #0
  40430c:	d12f      	bne.n	40436e <xTaskPriorityDisinherit+0xae>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  40430e:	1d07      	adds	r7, r0, #4
  404310:	4604      	mov	r4, r0
  404312:	4b19      	ldr	r3, [pc, #100]	; (404378 <xTaskPriorityDisinherit+0xb8>)
  404314:	4638      	mov	r0, r7
  404316:	4798      	blx	r3
  404318:	b1c8      	cbz	r0, 40434e <xTaskPriorityDisinherit+0x8e>
  40431a:	4818      	ldr	r0, [pc, #96]	; (40437c <xTaskPriorityDisinherit+0xbc>)
  40431c:	4a18      	ldr	r2, [pc, #96]	; (404380 <xTaskPriorityDisinherit+0xc0>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  40431e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
					prvAddTaskToReadyList( pxTCB );
  404320:	2501      	movs	r5, #1
  404322:	f8d2 e000 	ldr.w	lr, [r2]
  404326:	4639      	mov	r1, r7
  404328:	fa05 f603 	lsl.w	r6, r5, r3
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40432c:	f1c3 0705 	rsb	r7, r3, #5
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  404330:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  404332:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  404336:	ea46 060e 	orr.w	r6, r6, lr
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40433a:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  40433c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  404340:	4b10      	ldr	r3, [pc, #64]	; (404384 <xTaskPriorityDisinherit+0xc4>)
  404342:	6016      	str	r6, [r2, #0]
  404344:	4798      	blx	r3
					xReturn = pdTRUE;
  404346:	4628      	mov	r0, r5
	}
  404348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BaseType_t xReturn = pdFALSE;
  40434a:	2000      	movs	r0, #0
	}
  40434c:	4770      	bx	lr
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40434e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  404350:	480a      	ldr	r0, [pc, #40]	; (40437c <xTaskPriorityDisinherit+0xbc>)
  404352:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  404356:	4a0a      	ldr	r2, [pc, #40]	; (404380 <xTaskPriorityDisinherit+0xc0>)
  404358:	009b      	lsls	r3, r3, #2
  40435a:	58c3      	ldr	r3, [r0, r3]
  40435c:	2b00      	cmp	r3, #0
  40435e:	d1de      	bne.n	40431e <xTaskPriorityDisinherit+0x5e>
  404360:	2501      	movs	r5, #1
  404362:	6813      	ldr	r3, [r2, #0]
  404364:	40b5      	lsls	r5, r6
  404366:	ea23 0305 	bic.w	r3, r3, r5
  40436a:	6013      	str	r3, [r2, #0]
  40436c:	e7d7      	b.n	40431e <xTaskPriorityDisinherit+0x5e>
	BaseType_t xReturn = pdFALSE;
  40436e:	2000      	movs	r0, #0
  404370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404372:	bf00      	nop
  404374:	2042b53c 	.word	0x2042b53c
  404378:	00403349 	.word	0x00403349
  40437c:	2042b548 	.word	0x2042b548
  404380:	2042b5b8 	.word	0x2042b5b8
  404384:	004032fd 	.word	0x004032fd

00404388 <xTaskGenericNotifyFromISR>:
	{
  404388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40438c:	9f08      	ldr	r7, [sp, #32]
		configASSERT( xTaskToNotify );
  40438e:	b368      	cbz	r0, 4043ec <xTaskGenericNotifyFromISR+0x64>
  404390:	4699      	mov	r9, r3
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  404392:	4b43      	ldr	r3, [pc, #268]	; (4044a0 <xTaskGenericNotifyFromISR+0x118>)
  404394:	4604      	mov	r4, r0
  404396:	4615      	mov	r5, r2
  404398:	4688      	mov	r8, r1
  40439a:	4798      	blx	r3
	__asm volatile
  40439c:	f3ef 8611 	mrs	r6, BASEPRI
  4043a0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4043a4:	b672      	cpsid	i
  4043a6:	f383 8811 	msr	BASEPRI, r3
  4043aa:	f3bf 8f6f 	isb	sy
  4043ae:	f3bf 8f4f 	dsb	sy
  4043b2:	b662      	cpsie	i
			if( pulPreviousNotificationValue != NULL )
  4043b4:	f1b9 0f00 	cmp.w	r9, #0
  4043b8:	d002      	beq.n	4043c0 <xTaskGenericNotifyFromISR+0x38>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
  4043ba:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4043bc:	f8c9 3000 	str.w	r3, [r9]
			switch( eAction )
  4043c0:	1e6b      	subs	r3, r5, #1
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
  4043c2:	2202      	movs	r2, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
  4043c4:	f894 5054 	ldrb.w	r5, [r4, #84]	; 0x54
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
  4043c8:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
			ucOriginalNotifyState = pxTCB->ucNotifyState;
  4043cc:	b2ed      	uxtb	r5, r5
			switch( eAction )
  4043ce:	2b03      	cmp	r3, #3
  4043d0:	d805      	bhi.n	4043de <xTaskGenericNotifyFromISR+0x56>
  4043d2:	e8df f003 	tbb	[pc, r3]
  4043d6:	2327      	.short	0x2327
  4043d8:	2c02      	.short	0x2c02
						pxTCB->ulNotifiedValue = ulValue;
  4043da:	f8c4 8050 	str.w	r8, [r4, #80]	; 0x50
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
  4043de:	2d01      	cmp	r5, #1
  4043e0:	d00f      	beq.n	404402 <xTaskGenericNotifyFromISR+0x7a>
	{
  4043e2:	2001      	movs	r0, #1
	__asm volatile
  4043e4:	f386 8811 	msr	BASEPRI, r6
	}
  4043e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
  4043ec:	f04f 0380 	mov.w	r3, #128	; 0x80
  4043f0:	b672      	cpsid	i
  4043f2:	f383 8811 	msr	BASEPRI, r3
  4043f6:	f3bf 8f6f 	isb	sy
  4043fa:	f3bf 8f4f 	dsb	sy
  4043fe:	b662      	cpsie	i
  404400:	e7fe      	b.n	404400 <xTaskGenericNotifyFromISR+0x78>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
  404402:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  404404:	b1d3      	cbz	r3, 40443c <xTaskGenericNotifyFromISR+0xb4>
  404406:	f04f 0380 	mov.w	r3, #128	; 0x80
  40440a:	b672      	cpsid	i
  40440c:	f383 8811 	msr	BASEPRI, r3
  404410:	f3bf 8f6f 	isb	sy
  404414:	f3bf 8f4f 	dsb	sy
  404418:	b662      	cpsie	i
  40441a:	e7fe      	b.n	40441a <xTaskGenericNotifyFromISR+0x92>
					( pxTCB->ulNotifiedValue )++;
  40441c:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40441e:	3301      	adds	r3, #1
  404420:	6523      	str	r3, [r4, #80]	; 0x50
					break;
  404422:	e7dc      	b.n	4043de <xTaskGenericNotifyFromISR+0x56>
					pxTCB->ulNotifiedValue |= ulValue;
  404424:	6d23      	ldr	r3, [r4, #80]	; 0x50
  404426:	ea43 0308 	orr.w	r3, r3, r8
  40442a:	6523      	str	r3, [r4, #80]	; 0x50
					break;
  40442c:	e7d7      	b.n	4043de <xTaskGenericNotifyFromISR+0x56>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
  40442e:	2d02      	cmp	r5, #2
  404430:	d1d3      	bne.n	4043da <xTaskGenericNotifyFromISR+0x52>
						xReturn = pdFAIL;
  404432:	2000      	movs	r0, #0
	__asm volatile
  404434:	f386 8811 	msr	BASEPRI, r6
	}
  404438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40443c:	4b19      	ldr	r3, [pc, #100]	; (4044a4 <xTaskGenericNotifyFromISR+0x11c>)
  40443e:	681b      	ldr	r3, [r3, #0]
  404440:	bb0b      	cbnz	r3, 404486 <xTaskGenericNotifyFromISR+0xfe>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  404442:	f104 0804 	add.w	r8, r4, #4
  404446:	4b18      	ldr	r3, [pc, #96]	; (4044a8 <xTaskGenericNotifyFromISR+0x120>)
  404448:	4640      	mov	r0, r8
  40444a:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
  40444c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40444e:	4a17      	ldr	r2, [pc, #92]	; (4044ac <xTaskGenericNotifyFromISR+0x124>)
  404450:	4641      	mov	r1, r8
  404452:	fa05 f300 	lsl.w	r3, r5, r0
  404456:	f8df e068 	ldr.w	lr, [pc, #104]	; 4044c0 <xTaskGenericNotifyFromISR+0x138>
  40445a:	6815      	ldr	r5, [r2, #0]
  40445c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  404460:	432b      	orrs	r3, r5
  404462:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
  404466:	4d12      	ldr	r5, [pc, #72]	; (4044b0 <xTaskGenericNotifyFromISR+0x128>)
  404468:	6013      	str	r3, [r2, #0]
  40446a:	47a8      	blx	r5
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
  40446c:	4b11      	ldr	r3, [pc, #68]	; (4044b4 <xTaskGenericNotifyFromISR+0x12c>)
  40446e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  404470:	681b      	ldr	r3, [r3, #0]
  404472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  404474:	429a      	cmp	r2, r3
  404476:	d9b4      	bls.n	4043e2 <xTaskGenericNotifyFromISR+0x5a>
					if( pxHigherPriorityTaskWoken != NULL )
  404478:	b15f      	cbz	r7, 404492 <xTaskGenericNotifyFromISR+0x10a>
						*pxHigherPriorityTaskWoken = pdTRUE;
  40447a:	2001      	movs	r0, #1
  40447c:	6038      	str	r0, [r7, #0]
  40447e:	f386 8811 	msr	BASEPRI, r6
	}
  404482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
  404486:	f104 0118 	add.w	r1, r4, #24
  40448a:	480b      	ldr	r0, [pc, #44]	; (4044b8 <xTaskGenericNotifyFromISR+0x130>)
  40448c:	4b08      	ldr	r3, [pc, #32]	; (4044b0 <xTaskGenericNotifyFromISR+0x128>)
  40448e:	4798      	blx	r3
  404490:	e7ec      	b.n	40446c <xTaskGenericNotifyFromISR+0xe4>
						xYieldPending = pdTRUE;
  404492:	4b0a      	ldr	r3, [pc, #40]	; (4044bc <xTaskGenericNotifyFromISR+0x134>)
  404494:	2001      	movs	r0, #1
  404496:	6018      	str	r0, [r3, #0]
  404498:	f386 8811 	msr	BASEPRI, r6
	}
  40449c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4044a0:	004034a9 	.word	0x004034a9
  4044a4:	2042b5b4 	.word	0x2042b5b4
  4044a8:	00403349 	.word	0x00403349
  4044ac:	2042b5b8 	.word	0x2042b5b8
  4044b0:	004032fd 	.word	0x004032fd
  4044b4:	2042b53c 	.word	0x2042b53c
  4044b8:	2042b5c4 	.word	0x2042b5c4
  4044bc:	2042b5f4 	.word	0x2042b5f4
  4044c0:	2042b548 	.word	0x2042b548

004044c4 <vTaskNotifyGiveFromISR>:
		configASSERT( xTaskToNotify );
  4044c4:	b308      	cbz	r0, 40450a <vTaskNotifyGiveFromISR+0x46>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4044c6:	4b36      	ldr	r3, [pc, #216]	; (4045a0 <vTaskNotifyGiveFromISR+0xdc>)
	{
  4044c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4044cc:	4604      	mov	r4, r0
  4044ce:	460e      	mov	r6, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4044d0:	4798      	blx	r3
	__asm volatile
  4044d2:	f3ef 8711 	mrs	r7, BASEPRI
  4044d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4044da:	b672      	cpsid	i
  4044dc:	f383 8811 	msr	BASEPRI, r3
  4044e0:	f3bf 8f6f 	isb	sy
  4044e4:	f3bf 8f4f 	dsb	sy
  4044e8:	b662      	cpsie	i
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
  4044ea:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
  4044ec:	f894 5054 	ldrb.w	r5, [r4, #84]	; 0x54
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
  4044f0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
			ucOriginalNotifyState = pxTCB->ucNotifyState;
  4044f4:	b2ed      	uxtb	r5, r5
			( pxTCB->ulNotifiedValue )++;
  4044f6:	6d23      	ldr	r3, [r4, #80]	; 0x50
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
  4044f8:	2d01      	cmp	r5, #1
			( pxTCB->ulNotifiedValue )++;
  4044fa:	f103 0301 	add.w	r3, r3, #1
  4044fe:	6523      	str	r3, [r4, #80]	; 0x50
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
  404500:	d00e      	beq.n	404520 <vTaskNotifyGiveFromISR+0x5c>
	__asm volatile
  404502:	f387 8811 	msr	BASEPRI, r7
  404506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  40450a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40450e:	b672      	cpsid	i
  404510:	f383 8811 	msr	BASEPRI, r3
  404514:	f3bf 8f6f 	isb	sy
  404518:	f3bf 8f4f 	dsb	sy
  40451c:	b662      	cpsie	i
  40451e:	e7fe      	b.n	40451e <vTaskNotifyGiveFromISR+0x5a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
  404520:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  404522:	b153      	cbz	r3, 40453a <vTaskNotifyGiveFromISR+0x76>
  404524:	f04f 0380 	mov.w	r3, #128	; 0x80
  404528:	b672      	cpsid	i
  40452a:	f383 8811 	msr	BASEPRI, r3
  40452e:	f3bf 8f6f 	isb	sy
  404532:	f3bf 8f4f 	dsb	sy
  404536:	b662      	cpsie	i
  404538:	e7fe      	b.n	404538 <vTaskNotifyGiveFromISR+0x74>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40453a:	4b1a      	ldr	r3, [pc, #104]	; (4045a4 <vTaskNotifyGiveFromISR+0xe0>)
  40453c:	681b      	ldr	r3, [r3, #0]
  40453e:	bb0b      	cbnz	r3, 404584 <vTaskNotifyGiveFromISR+0xc0>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  404540:	f104 0804 	add.w	r8, r4, #4
  404544:	4b18      	ldr	r3, [pc, #96]	; (4045a8 <vTaskNotifyGiveFromISR+0xe4>)
  404546:	4640      	mov	r0, r8
  404548:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
  40454a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40454c:	4a17      	ldr	r2, [pc, #92]	; (4045ac <vTaskNotifyGiveFromISR+0xe8>)
  40454e:	4641      	mov	r1, r8
  404550:	fa05 f300 	lsl.w	r3, r5, r0
  404554:	f8df e068 	ldr.w	lr, [pc, #104]	; 4045c0 <vTaskNotifyGiveFromISR+0xfc>
  404558:	6815      	ldr	r5, [r2, #0]
  40455a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40455e:	432b      	orrs	r3, r5
  404560:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
  404564:	4d12      	ldr	r5, [pc, #72]	; (4045b0 <vTaskNotifyGiveFromISR+0xec>)
  404566:	6013      	str	r3, [r2, #0]
  404568:	47a8      	blx	r5
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
  40456a:	4b12      	ldr	r3, [pc, #72]	; (4045b4 <vTaskNotifyGiveFromISR+0xf0>)
  40456c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40456e:	681b      	ldr	r3, [r3, #0]
  404570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  404572:	429a      	cmp	r2, r3
  404574:	d9c5      	bls.n	404502 <vTaskNotifyGiveFromISR+0x3e>
					if( pxHigherPriorityTaskWoken != NULL )
  404576:	b15e      	cbz	r6, 404590 <vTaskNotifyGiveFromISR+0xcc>
						*pxHigherPriorityTaskWoken = pdTRUE;
  404578:	2301      	movs	r3, #1
  40457a:	6033      	str	r3, [r6, #0]
	__asm volatile
  40457c:	f387 8811 	msr	BASEPRI, r7
  404580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
  404584:	f104 0118 	add.w	r1, r4, #24
  404588:	480b      	ldr	r0, [pc, #44]	; (4045b8 <vTaskNotifyGiveFromISR+0xf4>)
  40458a:	4b09      	ldr	r3, [pc, #36]	; (4045b0 <vTaskNotifyGiveFromISR+0xec>)
  40458c:	4798      	blx	r3
  40458e:	e7ec      	b.n	40456a <vTaskNotifyGiveFromISR+0xa6>
						xYieldPending = pdTRUE;
  404590:	4b0a      	ldr	r3, [pc, #40]	; (4045bc <vTaskNotifyGiveFromISR+0xf8>)
  404592:	2201      	movs	r2, #1
  404594:	601a      	str	r2, [r3, #0]
  404596:	f387 8811 	msr	BASEPRI, r7
  40459a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40459e:	bf00      	nop
  4045a0:	004034a9 	.word	0x004034a9
  4045a4:	2042b5b4 	.word	0x2042b5b4
  4045a8:	00403349 	.word	0x00403349
  4045ac:	2042b5b8 	.word	0x2042b5b8
  4045b0:	004032fd 	.word	0x004032fd
  4045b4:	2042b53c 	.word	0x2042b53c
  4045b8:	2042b5c4 	.word	0x2042b5c4
  4045bc:	2042b5f4 	.word	0x2042b5f4
  4045c0:	2042b548 	.word	0x2042b548

004045c4 <xTimerGenericCommand>:
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
  4045c4:	b338      	cbz	r0, 404616 <xTimerGenericCommand+0x52>
{
  4045c6:	b570      	push	{r4, r5, r6, lr}

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  4045c8:	4d18      	ldr	r5, [pc, #96]	; (40462c <xTimerGenericCommand+0x68>)
  4045ca:	4604      	mov	r4, r0
{
  4045cc:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
  4045ce:	6828      	ldr	r0, [r5, #0]
  4045d0:	b188      	cbz	r0, 4045f6 <xTimerGenericCommand+0x32>
  4045d2:	4616      	mov	r6, r2
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  4045d4:	2905      	cmp	r1, #5
  4045d6:	461a      	mov	r2, r3
  4045d8:	460b      	mov	r3, r1
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  4045da:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  4045dc:	e88d 0048 	stmia.w	sp, {r3, r6}
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  4045e0:	dc0b      	bgt.n	4045fa <xTimerGenericCommand+0x36>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  4045e2:	4b13      	ldr	r3, [pc, #76]	; (404630 <xTimerGenericCommand+0x6c>)
  4045e4:	4798      	blx	r3
  4045e6:	2802      	cmp	r0, #2
  4045e8:	d00d      	beq.n	404606 <xTimerGenericCommand+0x42>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  4045ea:	2300      	movs	r3, #0
  4045ec:	6828      	ldr	r0, [r5, #0]
  4045ee:	4669      	mov	r1, sp
  4045f0:	4c10      	ldr	r4, [pc, #64]	; (404634 <xTimerGenericCommand+0x70>)
  4045f2:	461a      	mov	r2, r3
  4045f4:	47a0      	blx	r4
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
  4045f6:	b004      	add	sp, #16
  4045f8:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4045fa:	2300      	movs	r3, #0
  4045fc:	4669      	mov	r1, sp
  4045fe:	4c0e      	ldr	r4, [pc, #56]	; (404638 <xTimerGenericCommand+0x74>)
  404600:	47a0      	blx	r4
}
  404602:	b004      	add	sp, #16
  404604:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  404606:	2300      	movs	r3, #0
  404608:	9a08      	ldr	r2, [sp, #32]
  40460a:	4669      	mov	r1, sp
  40460c:	4c09      	ldr	r4, [pc, #36]	; (404634 <xTimerGenericCommand+0x70>)
  40460e:	6828      	ldr	r0, [r5, #0]
  404610:	47a0      	blx	r4
}
  404612:	b004      	add	sp, #16
  404614:	bd70      	pop	{r4, r5, r6, pc}
	__asm volatile
  404616:	f04f 0380 	mov.w	r3, #128	; 0x80
  40461a:	b672      	cpsid	i
  40461c:	f383 8811 	msr	BASEPRI, r3
  404620:	f3bf 8f6f 	isb	sy
  404624:	f3bf 8f4f 	dsb	sy
  404628:	b662      	cpsie	i
  40462a:	e7fe      	b.n	40462a <xTimerGenericCommand+0x66>
  40462c:	2042b5f8 	.word	0x2042b5f8
  404630:	004042a1 	.word	0x004042a1
  404634:	004037cd 	.word	0x004037cd
  404638:	004039b5 	.word	0x004039b5

0040463c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
  40463c:	b570      	push	{r4, r5, r6, lr}
  40463e:	461e      	mov	r6, r3
  404640:	b084      	sub	sp, #16
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  404642:	4c07      	ldr	r4, [pc, #28]	; (404660 <xTimerPendFunctionCallFromISR+0x24>)
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
  404644:	f06f 0501 	mvn.w	r5, #1
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
  404648:	9001      	str	r0, [sp, #4]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  40464a:	2300      	movs	r3, #0
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
  40464c:	9102      	str	r1, [sp, #8]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  40464e:	4669      	mov	r1, sp
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
  404650:	9203      	str	r2, [sp, #12]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  404652:	4632      	mov	r2, r6
  404654:	6820      	ldr	r0, [r4, #0]
  404656:	4c03      	ldr	r4, [pc, #12]	; (404664 <xTimerPendFunctionCallFromISR+0x28>)
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
  404658:	9500      	str	r5, [sp, #0]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  40465a:	47a0      	blx	r4

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
  40465c:	b004      	add	sp, #16
  40465e:	bd70      	pop	{r4, r5, r6, pc}
  404660:	2042b5f8 	.word	0x2042b5f8
  404664:	004039b5 	.word	0x004039b5

00404668 <vPeriodicEventGroupsProcessing>:
	return xError;
}
/*-----------------------------------------------------------*/

void vPeriodicEventGroupsProcessing( void )
{
  404668:	b510      	push	{r4, lr}
BaseType_t xMessagePosted;

	/* Called periodically from the tick hook to exercise the "FromISR"
	functions. */

	xCallCount++;
  40466a:	4c1e      	ldr	r4, [pc, #120]	; (4046e4 <vPeriodicEventGroupsProcessing+0x7c>)
  40466c:	6823      	ldr	r3, [r4, #0]
  40466e:	3301      	adds	r3, #1

	if( xCallCount == xSetBitCount )
  404670:	2b64      	cmp	r3, #100	; 0x64
	xCallCount++;
  404672:	6023      	str	r3, [r4, #0]
	if( xCallCount == xSetBitCount )
  404674:	d012      	beq.n	40469c <vPeriodicEventGroupsProcessing+0x34>
			{
				xISRTestError = pdTRUE;
			}
		}
	}
	else if( xCallCount == xGetBitsCount )
  404676:	2bc8      	cmp	r3, #200	; 0xc8
  404678:	d019      	beq.n	4046ae <vPeriodicEventGroupsProcessing+0x46>
		if( uxReturned != uxBitsToSet )
		{
			xISRTestError = pdTRUE;
		}
	}
	else if( xCallCount == xClearBitsCount )
  40467a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
  40467e:	d000      	beq.n	404682 <vPeriodicEventGroupsProcessing+0x1a>
  404680:	bd10      	pop	{r4, pc}
	{
		/* Clear the bits again. */
		uxReturned = ( EventBits_t ) xEventGroupClearBitsFromISR( xISREventGroup, uxBitsToSet );
  404682:	4a19      	ldr	r2, [pc, #100]	; (4046e8 <vPeriodicEventGroupsProcessing+0x80>)
  404684:	2112      	movs	r1, #18
  404686:	4b19      	ldr	r3, [pc, #100]	; (4046ec <vPeriodicEventGroupsProcessing+0x84>)
  404688:	6810      	ldr	r0, [r2, #0]
  40468a:	4798      	blx	r3

		/* Check the message was posted. */
		if( uxReturned != pdPASS )
  40468c:	2801      	cmp	r0, #1
  40468e:	d01d      	beq.n	4046cc <vPeriodicEventGroupsProcessing+0x64>
		{
			xISRTestError = pdTRUE;
  404690:	4a17      	ldr	r2, [pc, #92]	; (4046f0 <vPeriodicEventGroupsProcessing+0x88>)
  404692:	2101      	movs	r1, #1
		}

		/* Go back to the start. */
		xCallCount = 0;
  404694:	2300      	movs	r3, #0
			xISRTestError = pdTRUE;
  404696:	6011      	str	r1, [r2, #0]
		xCallCount = 0;
  404698:	6023      	str	r3, [r4, #0]
  40469a:	bd10      	pop	{r4, pc}
		uxReturned = xEventGroupGetBitsFromISR( xISREventGroup );
  40469c:	4c12      	ldr	r4, [pc, #72]	; (4046e8 <vPeriodicEventGroupsProcessing+0x80>)
  40469e:	4b15      	ldr	r3, [pc, #84]	; (4046f4 <vPeriodicEventGroupsProcessing+0x8c>)
  4046a0:	6820      	ldr	r0, [r4, #0]
  4046a2:	4798      	blx	r3
		if( uxReturned != 0x00 )
  4046a4:	b150      	cbz	r0, 4046bc <vPeriodicEventGroupsProcessing+0x54>
			xISRTestError = pdTRUE;
  4046a6:	4b12      	ldr	r3, [pc, #72]	; (4046f0 <vPeriodicEventGroupsProcessing+0x88>)
  4046a8:	2201      	movs	r2, #1
  4046aa:	601a      	str	r2, [r3, #0]
  4046ac:	bd10      	pop	{r4, pc}
		uxReturned = xEventGroupGetBitsFromISR( xISREventGroup );
  4046ae:	4a0e      	ldr	r2, [pc, #56]	; (4046e8 <vPeriodicEventGroupsProcessing+0x80>)
  4046b0:	4b10      	ldr	r3, [pc, #64]	; (4046f4 <vPeriodicEventGroupsProcessing+0x8c>)
  4046b2:	6810      	ldr	r0, [r2, #0]
  4046b4:	4798      	blx	r3
		if( uxReturned != uxBitsToSet )
  4046b6:	2812      	cmp	r0, #18
  4046b8:	d1f5      	bne.n	4046a6 <vPeriodicEventGroupsProcessing+0x3e>
  4046ba:	bd10      	pop	{r4, pc}
			xMessagePosted = xEventGroupSetBitsFromISR( xISREventGroup, uxBitsToSet, NULL );
  4046bc:	4602      	mov	r2, r0
  4046be:	2112      	movs	r1, #18
  4046c0:	6820      	ldr	r0, [r4, #0]
  4046c2:	4b0d      	ldr	r3, [pc, #52]	; (4046f8 <vPeriodicEventGroupsProcessing+0x90>)
  4046c4:	4798      	blx	r3
			if( xMessagePosted != pdPASS )
  4046c6:	2801      	cmp	r0, #1
  4046c8:	d1ed      	bne.n	4046a6 <vPeriodicEventGroupsProcessing+0x3e>
  4046ca:	bd10      	pop	{r4, pc}
  4046cc:	4b08      	ldr	r3, [pc, #32]	; (4046f0 <vPeriodicEventGroupsProcessing+0x88>)
		xCallCount = 0;
  4046ce:	2200      	movs	r2, #0
  4046d0:	681b      	ldr	r3, [r3, #0]
  4046d2:	6022      	str	r2, [r4, #0]

		/* If no errors have been detected then increment the count of test
		cycles. */
		if( xISRTestError == pdFALSE )
  4046d4:	b923      	cbnz	r3, 4046e0 <vPeriodicEventGroupsProcessing+0x78>
		{
			ulISRCycles++;
  4046d6:	4a09      	ldr	r2, [pc, #36]	; (4046fc <vPeriodicEventGroupsProcessing+0x94>)
  4046d8:	6813      	ldr	r3, [r2, #0]
  4046da:	3301      	adds	r3, #1
  4046dc:	6013      	str	r3, [r2, #0]
	}
	else
	{
		/* Nothing else to do. */
	}
}
  4046de:	e7cf      	b.n	404680 <vPeriodicEventGroupsProcessing+0x18>
  4046e0:	bd10      	pop	{r4, pc}
  4046e2:	bf00      	nop
  4046e4:	2042b600 	.word	0x2042b600
  4046e8:	2042b604 	.word	0x2042b604
  4046ec:	004032a5 	.word	0x004032a5
  4046f0:	2042b608 	.word	0x2042b608
  4046f4:	004032c1 	.word	0x004032c1
  4046f8:	004032e1 	.word	0x004032e1
  4046fc:	2042b5fc 	.word	0x2042b5fc

00404700 <vInterruptSemaphorePeriodicTest>:
	}
}
/*-----------------------------------------------------------*/

void vInterruptSemaphorePeriodicTest( void )
{
  404700:	b5f0      	push	{r4, r5, r6, r7, lr}
static TickType_t xLastGiveTime = 0;
BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  404702:	2600      	movs	r6, #0
{
  404704:	b083      	sub	sp, #12
TickType_t xTimeNow;

	/* No mutual exclusion on xOkToGiveMutex, but this is only test code (and
	only executed on a 32-bit architecture) so ignore that in this case. */
	xTimeNow = xTaskGetTickCountFromISR();
	if( ( ( TickType_t ) ( xTimeNow - xLastGiveTime ) ) >= pdMS_TO_TICKS( intsemINTERRUPT_MUTEX_GIVE_PERIOD_MS ) )
  404706:	4c1c      	ldr	r4, [pc, #112]	; (404778 <vInterruptSemaphorePeriodicTest+0x78>)
	xTimeNow = xTaskGetTickCountFromISR();
  404708:	4b1c      	ldr	r3, [pc, #112]	; (40477c <vInterruptSemaphorePeriodicTest+0x7c>)
BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  40470a:	9601      	str	r6, [sp, #4]
	xTimeNow = xTaskGetTickCountFromISR();
  40470c:	4798      	blx	r3
	if( ( ( TickType_t ) ( xTimeNow - xLastGiveTime ) ) >= pdMS_TO_TICKS( intsemINTERRUPT_MUTEX_GIVE_PERIOD_MS ) )
  40470e:	6823      	ldr	r3, [r4, #0]
  404710:	1ac3      	subs	r3, r0, r3
  404712:	2b63      	cmp	r3, #99	; 0x63
  404714:	d90a      	bls.n	40472c <vInterruptSemaphorePeriodicTest+0x2c>
	{
		configASSERT( xISRMutex );
  404716:	4f1a      	ldr	r7, [pc, #104]	; (404780 <vInterruptSemaphorePeriodicTest+0x80>)
  404718:	4605      	mov	r5, r0
  40471a:	6838      	ldr	r0, [r7, #0]
  40471c:	b308      	cbz	r0, 404762 <vInterruptSemaphorePeriodicTest+0x62>
		if( xOkToGiveMutex != pdFALSE )
  40471e:	4b19      	ldr	r3, [pc, #100]	; (404784 <vInterruptSemaphorePeriodicTest+0x84>)
  404720:	681b      	ldr	r3, [r3, #0]
  404722:	b92b      	cbnz	r3, 404730 <vInterruptSemaphorePeriodicTest+0x30>

			/* Second give attempt should fail. */
			configASSERT( xSemaphoreGiveFromISR( xISRMutex, &xHigherPriorityTaskWoken ) == pdFAIL );
		}

		if( xOkToGiveCountingSemaphore != pdFALSE )
  404724:	4b18      	ldr	r3, [pc, #96]	; (404788 <vInterruptSemaphorePeriodicTest+0x88>)
  404726:	681b      	ldr	r3, [r3, #0]
  404728:	b9ab      	cbnz	r3, 404756 <vInterruptSemaphorePeriodicTest+0x56>
		{
			xSemaphoreGiveFromISR( xISRCountingSemaphore, &xHigherPriorityTaskWoken );
		}
		xLastGiveTime = xTimeNow;
  40472a:	6025      	str	r5, [r4, #0]
	}

	/* Remove compiler warnings about the value being set but not used. */
	( void ) xHigherPriorityTaskWoken;
}
  40472c:	b003      	add	sp, #12
  40472e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xSemaphoreGiveFromISR( xISRMutex, NULL );
  404730:	4631      	mov	r1, r6
  404732:	4e16      	ldr	r6, [pc, #88]	; (40478c <vInterruptSemaphorePeriodicTest+0x8c>)
  404734:	47b0      	blx	r6
			configASSERT( xSemaphoreGiveFromISR( xISRMutex, &xHigherPriorityTaskWoken ) == pdFAIL );
  404736:	6838      	ldr	r0, [r7, #0]
  404738:	a901      	add	r1, sp, #4
  40473a:	47b0      	blx	r6
  40473c:	2800      	cmp	r0, #0
  40473e:	d0f1      	beq.n	404724 <vInterruptSemaphorePeriodicTest+0x24>
  404740:	f04f 0380 	mov.w	r3, #128	; 0x80
  404744:	b672      	cpsid	i
  404746:	f383 8811 	msr	BASEPRI, r3
  40474a:	f3bf 8f6f 	isb	sy
  40474e:	f3bf 8f4f 	dsb	sy
  404752:	b662      	cpsie	i
  404754:	e7fe      	b.n	404754 <vInterruptSemaphorePeriodicTest+0x54>
			xSemaphoreGiveFromISR( xISRCountingSemaphore, &xHigherPriorityTaskWoken );
  404756:	4a0e      	ldr	r2, [pc, #56]	; (404790 <vInterruptSemaphorePeriodicTest+0x90>)
  404758:	a901      	add	r1, sp, #4
  40475a:	4b0c      	ldr	r3, [pc, #48]	; (40478c <vInterruptSemaphorePeriodicTest+0x8c>)
  40475c:	6810      	ldr	r0, [r2, #0]
  40475e:	4798      	blx	r3
  404760:	e7e3      	b.n	40472a <vInterruptSemaphorePeriodicTest+0x2a>
  404762:	f04f 0380 	mov.w	r3, #128	; 0x80
  404766:	b672      	cpsid	i
  404768:	f383 8811 	msr	BASEPRI, r3
  40476c:	f3bf 8f6f 	isb	sy
  404770:	f3bf 8f4f 	dsb	sy
  404774:	b662      	cpsie	i
  404776:	e7fe      	b.n	404776 <vInterruptSemaphorePeriodicTest+0x76>
  404778:	2042b614 	.word	0x2042b614
  40477c:	00403c79 	.word	0x00403c79
  404780:	2042b610 	.word	0x2042b610
  404784:	2042b61c 	.word	0x2042b61c
  404788:	2042b618 	.word	0x2042b618
  40478c:	00403ab9 	.word	0x00403ab9
  404790:	2042b60c 	.word	0x2042b60c

00404794 <vQueueOverwritePeriodicISRDemo>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vQueueOverwritePeriodicISRDemo( void )
{
  404794:	b570      	push	{r4, r5, r6, lr}
uint32_t ulRx;

	/* This function should be called from an interrupt, such as the tick hook
	function vApplicationTickHook(). */

	configASSERT( xISRQueue );
  404796:	4d21      	ldr	r5, [pc, #132]	; (40481c <vQueueOverwritePeriodicISRDemo+0x88>)
{
  404798:	b084      	sub	sp, #16
const uint32_t ulTx1 = 10UL, ulTx2 = 20UL, ulNumberOfSwitchCases = 3UL;
  40479a:	220a      	movs	r2, #10
  40479c:	2314      	movs	r3, #20
	configASSERT( xISRQueue );
  40479e:	6828      	ldr	r0, [r5, #0]
const uint32_t ulTx1 = 10UL, ulTx2 = 20UL, ulNumberOfSwitchCases = 3UL;
  4047a0:	9201      	str	r2, [sp, #4]
  4047a2:	9302      	str	r3, [sp, #8]
	configASSERT( xISRQueue );
  4047a4:	2800      	cmp	r0, #0
  4047a6:	d02d      	beq.n	404804 <vQueueOverwritePeriodicISRDemo+0x70>

	switch( ulCallCount )
  4047a8:	4c1d      	ldr	r4, [pc, #116]	; (404820 <vQueueOverwritePeriodicISRDemo+0x8c>)
  4047aa:	6823      	ldr	r3, [r4, #0]
  4047ac:	2b01      	cmp	r3, #1
  4047ae:	d022      	beq.n	4047f6 <vQueueOverwritePeriodicISRDemo+0x62>
  4047b0:	d313      	bcc.n	4047da <vQueueOverwritePeriodicISRDemo+0x46>
  4047b2:	2b02      	cmp	r3, #2
  4047b4:	d10a      	bne.n	4047cc <vQueueOverwritePeriodicISRDemo+0x38>
			break;

		case 2:
			/* Read from the queue to empty the queue again.  The value read
			should be ulTx2. */
			xQueueReceiveFromISR( xISRQueue, &ulRx, NULL );
  4047b6:	4b1b      	ldr	r3, [pc, #108]	; (404824 <vQueueOverwritePeriodicISRDemo+0x90>)
  4047b8:	2200      	movs	r2, #0
  4047ba:	a903      	add	r1, sp, #12
  4047bc:	4798      	blx	r3

			if( ulRx != ulTx2 )
  4047be:	9b03      	ldr	r3, [sp, #12]
  4047c0:	2b14      	cmp	r3, #20
  4047c2:	d016      	beq.n	4047f2 <vQueueOverwritePeriodicISRDemo+0x5e>
			{
				xISRTestStatus = pdFAIL;
  4047c4:	4a18      	ldr	r2, [pc, #96]	; (404828 <vQueueOverwritePeriodicISRDemo+0x94>)
  4047c6:	2100      	movs	r1, #0
  4047c8:	6823      	ldr	r3, [r4, #0]
  4047ca:	6011      	str	r1, [r2, #0]
			break;
	}

	/* Run the next case in the switch statement above next time this function
	is called. */
	ulCallCount++;
  4047cc:	3301      	adds	r3, #1

	if( ulCallCount >= ulNumberOfSwitchCases )
  4047ce:	2b02      	cmp	r3, #2
	{
		/* Go back to the start. */
		ulCallCount = 0;
  4047d0:	bf88      	it	hi
  4047d2:	2300      	movhi	r3, #0
  4047d4:	6023      	str	r3, [r4, #0]
	}
}
  4047d6:	b004      	add	sp, #16
  4047d8:	bd70      	pop	{r4, r5, r6, pc}
			xQueueOverwriteFromISR( xISRQueue, &ulTx1, NULL );
  4047da:	2302      	movs	r3, #2
  4047dc:	2200      	movs	r2, #0
  4047de:	a901      	add	r1, sp, #4
  4047e0:	4e12      	ldr	r6, [pc, #72]	; (40482c <vQueueOverwritePeriodicISRDemo+0x98>)
  4047e2:	47b0      	blx	r6
			xQueuePeekFromISR( xISRQueue, &ulRx );
  4047e4:	4b12      	ldr	r3, [pc, #72]	; (404830 <vQueueOverwritePeriodicISRDemo+0x9c>)
  4047e6:	6828      	ldr	r0, [r5, #0]
  4047e8:	a903      	add	r1, sp, #12
  4047ea:	4798      	blx	r3
			if( ulRx != ulTx1 )
  4047ec:	9b03      	ldr	r3, [sp, #12]
  4047ee:	2b0a      	cmp	r3, #10
  4047f0:	d1e8      	bne.n	4047c4 <vQueueOverwritePeriodicISRDemo+0x30>
  4047f2:	6823      	ldr	r3, [r4, #0]
			break;
  4047f4:	e7ea      	b.n	4047cc <vQueueOverwritePeriodicISRDemo+0x38>
			xQueueOverwriteFromISR( xISRQueue, &ulTx2, NULL );
  4047f6:	2302      	movs	r3, #2
  4047f8:	2200      	movs	r2, #0
  4047fa:	a902      	add	r1, sp, #8
  4047fc:	4d0b      	ldr	r5, [pc, #44]	; (40482c <vQueueOverwritePeriodicISRDemo+0x98>)
  4047fe:	47a8      	blx	r5
  404800:	6823      	ldr	r3, [r4, #0]
  404802:	e7e3      	b.n	4047cc <vQueueOverwritePeriodicISRDemo+0x38>
  404804:	f04f 0380 	mov.w	r3, #128	; 0x80
  404808:	b672      	cpsid	i
  40480a:	f383 8811 	msr	BASEPRI, r3
  40480e:	f3bf 8f6f 	isb	sy
  404812:	f3bf 8f4f 	dsb	sy
  404816:	b662      	cpsie	i
  404818:	e7fe      	b.n	404818 <vQueueOverwritePeriodicISRDemo+0x84>
  40481a:	bf00      	nop
  40481c:	2042b624 	.word	0x2042b624
  404820:	2042b620 	.word	0x2042b620
  404824:	00403b95 	.word	0x00403b95
  404828:	20400034 	.word	0x20400034
  40482c:	004039b5 	.word	0x004039b5
  404830:	00403bd5 	.word	0x00403bd5

00404834 <xNotifyTaskFromISR>:

	/* The task performs some tests before starting the timer that gives the
	notification from this interrupt.  If the timer has not been created yet
	then the initial tests have not yet completed and the notification should
	not be sent. */
	if( xTimer != NULL )
  404834:	4b24      	ldr	r3, [pc, #144]	; (4048c8 <xNotifyTaskFromISR+0x94>)
  404836:	681b      	ldr	r3, [r3, #0]
  404838:	b1eb      	cbz	r3, 404876 <xNotifyTaskFromISR+0x42>
	{
		xCallCount++;
  40483a:	4924      	ldr	r1, [pc, #144]	; (4048cc <xNotifyTaskFromISR+0x98>)
  40483c:	680b      	ldr	r3, [r1, #0]
  40483e:	3301      	adds	r3, #1

		if( xCallCount >= xCallInterval )
  404840:	2b31      	cmp	r3, #49	; 0x31
  404842:	dd19      	ble.n	404878 <xNotifyTaskFromISR+0x44>
{
  404844:	b570      	push	{r4, r5, r6, lr}
			/* It is time to 'give' the notification again. */
			xCallCount = 0;

			/* Test using both vTaskNotifyGiveFromISR(), xTaskNotifyFromISR()
			and xTaskNotifyAndQueryFromISR(). */
			switch( xAPIToUse )
  404846:	4c22      	ldr	r4, [pc, #136]	; (4048d0 <xNotifyTaskFromISR+0x9c>)
			xCallCount = 0;
  404848:	2500      	movs	r5, #0
{
  40484a:	b084      	sub	sp, #16
			switch( xAPIToUse )
  40484c:	6822      	ldr	r2, [r4, #0]
			xCallCount = 0;
  40484e:	600d      	str	r5, [r1, #0]
			switch( xAPIToUse )
  404850:	2a01      	cmp	r2, #1
  404852:	d013      	beq.n	40487c <xNotifyTaskFromISR+0x48>
  404854:	2a02      	cmp	r2, #2
  404856:	d01d      	beq.n	404894 <xNotifyTaskFromISR+0x60>
  404858:	b93a      	cbnz	r2, 40486a <xNotifyTaskFromISR+0x36>
			{
				case 0:	vTaskNotifyGiveFromISR( xTaskToNotify, NULL );
  40485a:	481e      	ldr	r0, [pc, #120]	; (4048d4 <xNotifyTaskFromISR+0xa0>)
  40485c:	4611      	mov	r1, r2
  40485e:	4b1e      	ldr	r3, [pc, #120]	; (4048d8 <xNotifyTaskFromISR+0xa4>)
  404860:	6800      	ldr	r0, [r0, #0]
  404862:	4798      	blx	r3
						xAPIToUse++;
  404864:	6823      	ldr	r3, [r4, #0]
  404866:	3301      	adds	r3, #1
  404868:	6023      	str	r3, [r4, #0]

				default:/* Should never get here!. */
						break;
			}

			ulTimerNotificationsSent++;
  40486a:	4a1c      	ldr	r2, [pc, #112]	; (4048dc <xNotifyTaskFromISR+0xa8>)
  40486c:	6813      	ldr	r3, [r2, #0]
  40486e:	3301      	adds	r3, #1
  404870:	6013      	str	r3, [r2, #0]
		}
	}
}
  404872:	b004      	add	sp, #16
  404874:	bd70      	pop	{r4, r5, r6, pc}
  404876:	4770      	bx	lr
		xCallCount++;
  404878:	600b      	str	r3, [r1, #0]
  40487a:	4770      	bx	lr
				case 1:	xTaskNotifyFromISR( xTaskToNotify, 0, eIncrement, NULL );
  40487c:	4a15      	ldr	r2, [pc, #84]	; (4048d4 <xNotifyTaskFromISR+0xa0>)
  40487e:	462b      	mov	r3, r5
  404880:	9500      	str	r5, [sp, #0]
  404882:	4629      	mov	r1, r5
  404884:	6810      	ldr	r0, [r2, #0]
  404886:	2202      	movs	r2, #2
  404888:	4d15      	ldr	r5, [pc, #84]	; (4048e0 <xNotifyTaskFromISR+0xac>)
  40488a:	47a8      	blx	r5
						xAPIToUse++;
  40488c:	6823      	ldr	r3, [r4, #0]
  40488e:	3301      	adds	r3, #1
  404890:	6023      	str	r3, [r4, #0]
						break;
  404892:	e7ea      	b.n	40486a <xNotifyTaskFromISR+0x36>
				case 2: ulPreviousValue = ulUnexpectedValue;
  404894:	ab04      	add	r3, sp, #16
  404896:	21ff      	movs	r1, #255	; 0xff
						xTaskNotifyAndQueryFromISR( xTaskToNotify, 0, eIncrement, &ulPreviousValue, NULL );
  404898:	480e      	ldr	r0, [pc, #56]	; (4048d4 <xNotifyTaskFromISR+0xa0>)
  40489a:	9500      	str	r5, [sp, #0]
  40489c:	4e10      	ldr	r6, [pc, #64]	; (4048e0 <xNotifyTaskFromISR+0xac>)
				case 2: ulPreviousValue = ulUnexpectedValue;
  40489e:	f843 1d04 	str.w	r1, [r3, #-4]!
						xTaskNotifyAndQueryFromISR( xTaskToNotify, 0, eIncrement, &ulPreviousValue, NULL );
  4048a2:	4629      	mov	r1, r5
  4048a4:	6800      	ldr	r0, [r0, #0]
  4048a6:	47b0      	blx	r6
						configASSERT( ulPreviousValue != ulUnexpectedValue );
  4048a8:	9b03      	ldr	r3, [sp, #12]
  4048aa:	2bff      	cmp	r3, #255	; 0xff
  4048ac:	d001      	beq.n	4048b2 <xNotifyTaskFromISR+0x7e>
						xAPIToUse = 0;
  4048ae:	6025      	str	r5, [r4, #0]
						break;
  4048b0:	e7db      	b.n	40486a <xNotifyTaskFromISR+0x36>
  4048b2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4048b6:	b672      	cpsid	i
  4048b8:	f383 8811 	msr	BASEPRI, r3
  4048bc:	f3bf 8f6f 	isb	sy
  4048c0:	f3bf 8f4f 	dsb	sy
  4048c4:	b662      	cpsie	i
  4048c6:	e7fe      	b.n	4048c6 <xNotifyTaskFromISR+0x92>
  4048c8:	2042b638 	.word	0x2042b638
  4048cc:	2042b630 	.word	0x2042b630
  4048d0:	2042b62c 	.word	0x2042b62c
  4048d4:	2042b634 	.word	0x2042b634
  4048d8:	004044c5 	.word	0x004044c5
  4048dc:	2042b628 	.word	0x2042b628
  4048e0:	00404389 	.word	0x00404389

004048e4 <vTimerPeriodicISRTests>:
	}
}
/*-----------------------------------------------------------*/

void vTimerPeriodicISRTests( void )
{
  4048e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		const TickType_t xMargin = 4;
	#endif /* _WINDOWS_ */
#endif


	uxTick++;
  4048e8:	4dab      	ldr	r5, [pc, #684]	; (404b98 <vTimerPeriodicISRTests+0x2b4>)
{
  4048ea:	b082      	sub	sp, #8
	uxTick++;
  4048ec:	682c      	ldr	r4, [r5, #0]
  4048ee:	3401      	adds	r4, #1
  4048f0:	602c      	str	r4, [r5, #0]

	if( uxTick == 0 )
  4048f2:	2c00      	cmp	r4, #0
  4048f4:	d063      	beq.n	4049be <vTimerPeriodicISRTests+0xda>
				again. */
				xTimerStopFromISR( xISRAutoReloadTimer, NULL );
			}
		}
	}
	else if( uxTick == ( xBasePeriod - xMargin ) )
  4048f6:	4ba9      	ldr	r3, [pc, #676]	; (404b9c <vTimerPeriodicISRTests+0x2b8>)
  4048f8:	681b      	ldr	r3, [r3, #0]
  4048fa:	1f1a      	subs	r2, r3, #4
  4048fc:	4294      	cmp	r4, r2
  4048fe:	d079      	beq.n	4049f4 <vTimerPeriodicISRTests+0x110>
		{
			xTestStatus = pdFAIL;
			configASSERT( xTestStatus );
		}
	}
	else if( uxTick == ( xBasePeriod + xMargin ) )
  404900:	1d1a      	adds	r2, r3, #4
  404902:	4294      	cmp	r4, r2
  404904:	f000 808f 	beq.w	404a26 <vTimerPeriodicISRTests+0x142>
		{
			xTestStatus = pdFAIL;
			configASSERT( xTestStatus );
		}
	}
	else if( uxTick == ( ( 2 * xBasePeriod ) - xMargin ) )
  404908:	4aa5      	ldr	r2, [pc, #660]	; (404ba0 <vTimerPeriodicISRTests+0x2bc>)
  40490a:	441a      	add	r2, r3
  40490c:	0052      	lsls	r2, r2, #1
  40490e:	4294      	cmp	r4, r2
  404910:	f000 80eb 	beq.w	404aea <vTimerPeriodicISRTests+0x206>
		{
			xTestStatus = pdFAIL;
			configASSERT( xTestStatus );
		}
	}
	else if( uxTick == ( ( 2 * xBasePeriod ) + xMargin ) )
  404914:	f102 0108 	add.w	r1, r2, #8
  404918:	428c      	cmp	r4, r1
  40491a:	f000 80bd 	beq.w	404a98 <vTimerPeriodicISRTests+0x1b4>
		{
			xTestStatus = pdFAIL;
			configASSERT( xTestStatus );
		}
	}
	else if( uxTick == ( ( 2 * xBasePeriod ) + ( xBasePeriod >> ( TickType_t ) 2U ) ) )
  40491e:	3204      	adds	r2, #4
  404920:	eb02 0293 	add.w	r2, r2, r3, lsr #2
  404924:	4294      	cmp	r4, r2
  404926:	f000 8094 	beq.w	404a52 <vTimerPeriodicISRTests+0x16e>
		{
			xTestStatus = pdFAIL;
			configASSERT( xTestStatus );
		}
	}
	else if( uxTick == ( 3 * xBasePeriod ) )
  40492a:	005a      	lsls	r2, r3, #1
  40492c:	18d1      	adds	r1, r2, r3
  40492e:	428c      	cmp	r4, r1
  404930:	f000 8250 	beq.w	404dd4 <vTimerPeriodicISRTests+0x4f0>
	{
		/* Start the one shot timer again. */
		xTimerStartFromISR( xISROneShotTimer, NULL );
	}
	else if( uxTick == ( ( 3 * xBasePeriod ) + xMargin ) )
  404934:	3104      	adds	r1, #4
  404936:	428c      	cmp	r4, r1
  404938:	f000 828f 	beq.w	404e5a <vTimerPeriodicISRTests+0x576>

		/* Now stop the auto reload timer.  The one shot timer was started
		a few ticks ago. */
		xTimerStopFromISR( xISRAutoReloadTimer, NULL );
	}
	else if( uxTick == ( 4 * ( xBasePeriod - xMargin ) ) )
  40493c:	4999      	ldr	r1, [pc, #612]	; (404ba4 <vTimerPeriodicISRTests+0x2c0>)
  40493e:	4419      	add	r1, r3
  404940:	0089      	lsls	r1, r1, #2
  404942:	428c      	cmp	r4, r1
  404944:	f000 8252 	beq.w	404dec <vTimerPeriodicISRTests+0x508>
		{
			xTestStatus = pdFAIL;
			configASSERT( xTestStatus );
		}
	}
	else if( uxTick == ( ( 4 * xBasePeriod ) + xMargin ) )
  404948:	3114      	adds	r1, #20
  40494a:	428c      	cmp	r4, r1
  40494c:	f000 818c 	beq.w	404c68 <vTimerPeriodicISRTests+0x384>
		{
			xTestStatus = pdFAIL;
			configASSERT( xTestStatus );
		}
	}
	else if( uxTick == ( 8 * xBasePeriod ) )
  404950:	00d9      	lsls	r1, r3, #3
  404952:	428c      	cmp	r4, r1
  404954:	f000 815f 	beq.w	404c16 <vTimerPeriodicISRTests+0x332>
		}

		/* Now reset the one shot timer. */
		xTimerResetFromISR( xISROneShotTimer, NULL );
	}
	else if( uxTick == ( ( 9 * xBasePeriod ) - xMargin ) )
  404958:	4419      	add	r1, r3
  40495a:	3904      	subs	r1, #4
  40495c:	428c      	cmp	r4, r1
  40495e:	f000 8131 	beq.w	404bc4 <vTimerPeriodicISRTests+0x2e0>
			configASSERT( xTestStatus );
		}

		xTimerResetFromISR( xISROneShotTimer, NULL );
	}
	else if( uxTick == ( ( 10 * xBasePeriod ) - ( 2 * xMargin ) ) )
  404962:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  404966:	0049      	lsls	r1, r1, #1
  404968:	f1a1 0008 	sub.w	r0, r1, #8
  40496c:	4284      	cmp	r4, r0
  40496e:	f000 80de 	beq.w	404b2e <vTimerPeriodicISRTests+0x24a>
			configASSERT( xTestStatus );
		}

		xTimerResetFromISR( xISROneShotTimer, NULL );
	}
	else if( uxTick == ( ( 11 * xBasePeriod ) - ( 3 * xMargin ) ) )
  404972:	4419      	add	r1, r3
  404974:	390c      	subs	r1, #12
  404976:	428c      	cmp	r4, r1
  404978:	f000 81cc 	beq.w	404d14 <vTimerPeriodicISRTests+0x430>
			configASSERT( xTestStatus );
		}

		xTimerResetFromISR( xISROneShotTimer, NULL );
	}
	else if( uxTick == ( ( 12 * xBasePeriod ) - ( 2 * xMargin ) ) )
  40497c:	441a      	add	r2, r3
  40497e:	0092      	lsls	r2, r2, #2
  404980:	3a08      	subs	r2, #8
  404982:	4294      	cmp	r4, r2
  404984:	f000 819b 	beq.w	404cbe <vTimerPeriodicISRTests+0x3da>
		{
			xTestStatus = pdFAIL;
			configASSERT( xTestStatus );
		}
	}
	else if( uxTick == ( 15 * xBasePeriod ) )
  404988:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  40498c:	429c      	cmp	r4, r3
  40498e:	d12e      	bne.n	4049ee <vTimerPeriodicISRTests+0x10a>
	{
		/* Neither timer should be running now.  Check neither callback count
		has incremented, then go back to the start to run these tests all
		over again. */
		if( ucISRAutoReloadTimerCounter != 3 )
  404990:	4b85      	ldr	r3, [pc, #532]	; (404ba8 <vTimerPeriodicISRTests+0x2c4>)
  404992:	781b      	ldrb	r3, [r3, #0]
  404994:	2b03      	cmp	r3, #3
  404996:	f000 8205 	beq.w	404da4 <vTimerPeriodicISRTests+0x4c0>
		{
			xTestStatus = pdFAIL;
  40499a:	4b84      	ldr	r3, [pc, #528]	; (404bac <vTimerPeriodicISRTests+0x2c8>)
  40499c:	2200      	movs	r2, #0
  40499e:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  4049a0:	681b      	ldr	r3, [r3, #0]
  4049a2:	2b00      	cmp	r3, #0
  4049a4:	f040 81fe 	bne.w	404da4 <vTimerPeriodicISRTests+0x4c0>
  4049a8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4049ac:	b672      	cpsid	i
  4049ae:	f383 8811 	msr	BASEPRI, r3
  4049b2:	f3bf 8f6f 	isb	sy
  4049b6:	f3bf 8f4f 	dsb	sy
  4049ba:	b662      	cpsie	i
  4049bc:	e7fe      	b.n	4049bc <vTimerPeriodicISRTests+0xd8>
		ucISRAutoReloadTimerCounter = 0;
  4049be:	f8df e1e8 	ldr.w	lr, [pc, #488]	; 404ba8 <vTimerPeriodicISRTests+0x2c4>
		uxTick = ( TickType_t ) -1;
  4049c2:	f04f 36ff 	mov.w	r6, #4294967295
		if( xTimerChangePeriodFromISR( xISRAutoReloadTimer, xBasePeriod, NULL ) == pdPASS )
  4049c6:	4f7a      	ldr	r7, [pc, #488]	; (404bb0 <vTimerPeriodicISRTests+0x2cc>)
  4049c8:	4623      	mov	r3, r4
  4049ca:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 404b9c <vTimerPeriodicISRTests+0x2b8>
  4049ce:	2109      	movs	r1, #9
  4049d0:	6838      	ldr	r0, [r7, #0]
  4049d2:	9400      	str	r4, [sp, #0]
		ucISRAutoReloadTimerCounter = 0;
  4049d4:	f88e 4000 	strb.w	r4, [lr]
		ucISROneShotTimerCounter = 0;
  4049d8:	f8df e1dc 	ldr.w	lr, [pc, #476]	; 404bb8 <vTimerPeriodicISRTests+0x2d4>
		uxTick = ( TickType_t ) -1;
  4049dc:	602e      	str	r6, [r5, #0]
		if( xTimerChangePeriodFromISR( xISRAutoReloadTimer, xBasePeriod, NULL ) == pdPASS )
  4049de:	f8d8 2000 	ldr.w	r2, [r8]
  4049e2:	4e74      	ldr	r6, [pc, #464]	; (404bb4 <vTimerPeriodicISRTests+0x2d0>)
		ucISROneShotTimerCounter = 0;
  4049e4:	f88e 4000 	strb.w	r4, [lr]
		if( xTimerChangePeriodFromISR( xISRAutoReloadTimer, xBasePeriod, NULL ) == pdPASS )
  4049e8:	47b0      	blx	r6
  4049ea:	2801      	cmp	r0, #1
  4049ec:	d048      	beq.n	404a80 <vTimerPeriodicISRTests+0x19c>
			configASSERT( xTestStatus );
		}

		uxTick = ( TickType_t ) -1;
	}
}
  4049ee:	b002      	add	sp, #8
  4049f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if( ( ucISRAutoReloadTimerCounter != 0 ) || ( ucISROneShotTimerCounter != 0 ) )
  4049f4:	4b6c      	ldr	r3, [pc, #432]	; (404ba8 <vTimerPeriodicISRTests+0x2c4>)
  4049f6:	781b      	ldrb	r3, [r3, #0]
  4049f8:	b183      	cbz	r3, 404a1c <vTimerPeriodicISRTests+0x138>
			xTestStatus = pdFAIL;
  4049fa:	4b6c      	ldr	r3, [pc, #432]	; (404bac <vTimerPeriodicISRTests+0x2c8>)
  4049fc:	2200      	movs	r2, #0
  4049fe:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404a00:	681b      	ldr	r3, [r3, #0]
  404a02:	2b00      	cmp	r3, #0
  404a04:	d1f3      	bne.n	4049ee <vTimerPeriodicISRTests+0x10a>
  404a06:	f04f 0380 	mov.w	r3, #128	; 0x80
  404a0a:	b672      	cpsid	i
  404a0c:	f383 8811 	msr	BASEPRI, r3
  404a10:	f3bf 8f6f 	isb	sy
  404a14:	f3bf 8f4f 	dsb	sy
  404a18:	b662      	cpsie	i
  404a1a:	e7fe      	b.n	404a1a <vTimerPeriodicISRTests+0x136>
		if( ( ucISRAutoReloadTimerCounter != 0 ) || ( ucISROneShotTimerCounter != 0 ) )
  404a1c:	4b66      	ldr	r3, [pc, #408]	; (404bb8 <vTimerPeriodicISRTests+0x2d4>)
  404a1e:	781b      	ldrb	r3, [r3, #0]
  404a20:	2b00      	cmp	r3, #0
  404a22:	d1ea      	bne.n	4049fa <vTimerPeriodicISRTests+0x116>
  404a24:	e7e3      	b.n	4049ee <vTimerPeriodicISRTests+0x10a>
		if( ( ucISRAutoReloadTimerCounter != 1 ) || ( ucISROneShotTimerCounter != 1 ) )
  404a26:	4b60      	ldr	r3, [pc, #384]	; (404ba8 <vTimerPeriodicISRTests+0x2c4>)
  404a28:	781b      	ldrb	r3, [r3, #0]
  404a2a:	2b01      	cmp	r3, #1
  404a2c:	f000 81b4 	beq.w	404d98 <vTimerPeriodicISRTests+0x4b4>
			xTestStatus = pdFAIL;
  404a30:	4b5e      	ldr	r3, [pc, #376]	; (404bac <vTimerPeriodicISRTests+0x2c8>)
  404a32:	2200      	movs	r2, #0
  404a34:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404a36:	681b      	ldr	r3, [r3, #0]
  404a38:	2b00      	cmp	r3, #0
  404a3a:	d1d8      	bne.n	4049ee <vTimerPeriodicISRTests+0x10a>
  404a3c:	f04f 0380 	mov.w	r3, #128	; 0x80
  404a40:	b672      	cpsid	i
  404a42:	f383 8811 	msr	BASEPRI, r3
  404a46:	f3bf 8f6f 	isb	sy
  404a4a:	f3bf 8f4f 	dsb	sy
  404a4e:	b662      	cpsie	i
  404a50:	e7fe      	b.n	404a50 <vTimerPeriodicISRTests+0x16c>
		if( ucISRAutoReloadTimerCounter != 2 )
  404a52:	4b55      	ldr	r3, [pc, #340]	; (404ba8 <vTimerPeriodicISRTests+0x2c4>)
  404a54:	781b      	ldrb	r3, [r3, #0]
  404a56:	2b02      	cmp	r3, #2
  404a58:	f000 8187 	beq.w	404d6a <vTimerPeriodicISRTests+0x486>
			xTestStatus = pdFAIL;
  404a5c:	4b53      	ldr	r3, [pc, #332]	; (404bac <vTimerPeriodicISRTests+0x2c8>)
  404a5e:	2200      	movs	r2, #0
  404a60:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404a62:	681b      	ldr	r3, [r3, #0]
  404a64:	2b00      	cmp	r3, #0
  404a66:	f040 8180 	bne.w	404d6a <vTimerPeriodicISRTests+0x486>
  404a6a:	f04f 0380 	mov.w	r3, #128	; 0x80
  404a6e:	b672      	cpsid	i
  404a70:	f383 8811 	msr	BASEPRI, r3
  404a74:	f3bf 8f6f 	isb	sy
  404a78:	f3bf 8f4f 	dsb	sy
  404a7c:	b662      	cpsie	i
  404a7e:	e7fe      	b.n	404a7e <vTimerPeriodicISRTests+0x19a>
			if( xTimerChangePeriodFromISR( xISROneShotTimer, xBasePeriod, NULL ) == pdPASS )
  404a80:	484e      	ldr	r0, [pc, #312]	; (404bbc <vTimerPeriodicISRTests+0x2d8>)
  404a82:	4623      	mov	r3, r4
  404a84:	f8d8 2000 	ldr.w	r2, [r8]
  404a88:	2109      	movs	r1, #9
  404a8a:	6800      	ldr	r0, [r0, #0]
  404a8c:	9400      	str	r4, [sp, #0]
  404a8e:	47b0      	blx	r6
  404a90:	2801      	cmp	r0, #1
  404a92:	d145      	bne.n	404b20 <vTimerPeriodicISRTests+0x23c>
				uxTick = 0;
  404a94:	602c      	str	r4, [r5, #0]
  404a96:	e7aa      	b.n	4049ee <vTimerPeriodicISRTests+0x10a>
		if( ucISRAutoReloadTimerCounter != 2 )
  404a98:	4b43      	ldr	r3, [pc, #268]	; (404ba8 <vTimerPeriodicISRTests+0x2c4>)
  404a9a:	781b      	ldrb	r3, [r3, #0]
  404a9c:	2b02      	cmp	r3, #2
  404a9e:	d00f      	beq.n	404ac0 <vTimerPeriodicISRTests+0x1dc>
			xTestStatus = pdFAIL;
  404aa0:	4b42      	ldr	r3, [pc, #264]	; (404bac <vTimerPeriodicISRTests+0x2c8>)
  404aa2:	2200      	movs	r2, #0
  404aa4:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404aa6:	681b      	ldr	r3, [r3, #0]
  404aa8:	b953      	cbnz	r3, 404ac0 <vTimerPeriodicISRTests+0x1dc>
  404aaa:	f04f 0380 	mov.w	r3, #128	; 0x80
  404aae:	b672      	cpsid	i
  404ab0:	f383 8811 	msr	BASEPRI, r3
  404ab4:	f3bf 8f6f 	isb	sy
  404ab8:	f3bf 8f4f 	dsb	sy
  404abc:	b662      	cpsie	i
  404abe:	e7fe      	b.n	404abe <vTimerPeriodicISRTests+0x1da>
		if( ucISROneShotTimerCounter != 1 )
  404ac0:	4b3d      	ldr	r3, [pc, #244]	; (404bb8 <vTimerPeriodicISRTests+0x2d4>)
  404ac2:	781b      	ldrb	r3, [r3, #0]
  404ac4:	2b01      	cmp	r3, #1
  404ac6:	d092      	beq.n	4049ee <vTimerPeriodicISRTests+0x10a>
			xTestStatus = pdFAIL;
  404ac8:	4b38      	ldr	r3, [pc, #224]	; (404bac <vTimerPeriodicISRTests+0x2c8>)
  404aca:	2200      	movs	r2, #0
  404acc:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404ace:	681b      	ldr	r3, [r3, #0]
  404ad0:	2b00      	cmp	r3, #0
  404ad2:	d18c      	bne.n	4049ee <vTimerPeriodicISRTests+0x10a>
  404ad4:	f04f 0380 	mov.w	r3, #128	; 0x80
  404ad8:	b672      	cpsid	i
  404ada:	f383 8811 	msr	BASEPRI, r3
  404ade:	f3bf 8f6f 	isb	sy
  404ae2:	f3bf 8f4f 	dsb	sy
  404ae6:	b662      	cpsie	i
  404ae8:	e7fe      	b.n	404ae8 <vTimerPeriodicISRTests+0x204>
		if( ( ucISRAutoReloadTimerCounter != 1 ) || ( ucISROneShotTimerCounter != 1 ) )
  404aea:	4b2f      	ldr	r3, [pc, #188]	; (404ba8 <vTimerPeriodicISRTests+0x2c4>)
  404aec:	781b      	ldrb	r3, [r3, #0]
  404aee:	2b01      	cmp	r3, #1
  404af0:	d011      	beq.n	404b16 <vTimerPeriodicISRTests+0x232>
			xTestStatus = pdFAIL;
  404af2:	4b2e      	ldr	r3, [pc, #184]	; (404bac <vTimerPeriodicISRTests+0x2c8>)
  404af4:	2200      	movs	r2, #0
  404af6:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404af8:	681b      	ldr	r3, [r3, #0]
  404afa:	2b00      	cmp	r3, #0
  404afc:	f47f af77 	bne.w	4049ee <vTimerPeriodicISRTests+0x10a>
  404b00:	f04f 0380 	mov.w	r3, #128	; 0x80
  404b04:	b672      	cpsid	i
  404b06:	f383 8811 	msr	BASEPRI, r3
  404b0a:	f3bf 8f6f 	isb	sy
  404b0e:	f3bf 8f4f 	dsb	sy
  404b12:	b662      	cpsie	i
  404b14:	e7fe      	b.n	404b14 <vTimerPeriodicISRTests+0x230>
		if( ( ucISRAutoReloadTimerCounter != 1 ) || ( ucISROneShotTimerCounter != 1 ) )
  404b16:	4b28      	ldr	r3, [pc, #160]	; (404bb8 <vTimerPeriodicISRTests+0x2d4>)
  404b18:	781b      	ldrb	r3, [r3, #0]
  404b1a:	2b01      	cmp	r3, #1
  404b1c:	d1e9      	bne.n	404af2 <vTimerPeriodicISRTests+0x20e>
  404b1e:	e766      	b.n	4049ee <vTimerPeriodicISRTests+0x10a>
				xTimerStopFromISR( xISRAutoReloadTimer, NULL );
  404b20:	6838      	ldr	r0, [r7, #0]
  404b22:	4623      	mov	r3, r4
  404b24:	9400      	str	r4, [sp, #0]
  404b26:	4622      	mov	r2, r4
  404b28:	2108      	movs	r1, #8
  404b2a:	47b0      	blx	r6
  404b2c:	e75f      	b.n	4049ee <vTimerPeriodicISRTests+0x10a>
		if( ucISRAutoReloadTimerCounter != 3 )
  404b2e:	4b1e      	ldr	r3, [pc, #120]	; (404ba8 <vTimerPeriodicISRTests+0x2c4>)
  404b30:	781b      	ldrb	r3, [r3, #0]
  404b32:	2b03      	cmp	r3, #3
  404b34:	d00f      	beq.n	404b56 <vTimerPeriodicISRTests+0x272>
			xTestStatus = pdFAIL;
  404b36:	4b1d      	ldr	r3, [pc, #116]	; (404bac <vTimerPeriodicISRTests+0x2c8>)
  404b38:	2200      	movs	r2, #0
  404b3a:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404b3c:	681b      	ldr	r3, [r3, #0]
  404b3e:	b953      	cbnz	r3, 404b56 <vTimerPeriodicISRTests+0x272>
  404b40:	f04f 0380 	mov.w	r3, #128	; 0x80
  404b44:	b672      	cpsid	i
  404b46:	f383 8811 	msr	BASEPRI, r3
  404b4a:	f3bf 8f6f 	isb	sy
  404b4e:	f3bf 8f4f 	dsb	sy
  404b52:	b662      	cpsie	i
  404b54:	e7fe      	b.n	404b54 <vTimerPeriodicISRTests+0x270>
		if( ucISROneShotTimerCounter != 2 )
  404b56:	4b18      	ldr	r3, [pc, #96]	; (404bb8 <vTimerPeriodicISRTests+0x2d4>)
  404b58:	781b      	ldrb	r3, [r3, #0]
  404b5a:	2b02      	cmp	r3, #2
  404b5c:	d00f      	beq.n	404b7e <vTimerPeriodicISRTests+0x29a>
			xTestStatus = pdFAIL;
  404b5e:	4b13      	ldr	r3, [pc, #76]	; (404bac <vTimerPeriodicISRTests+0x2c8>)
  404b60:	2200      	movs	r2, #0
  404b62:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404b64:	681b      	ldr	r3, [r3, #0]
  404b66:	b953      	cbnz	r3, 404b7e <vTimerPeriodicISRTests+0x29a>
  404b68:	f04f 0380 	mov.w	r3, #128	; 0x80
  404b6c:	b672      	cpsid	i
  404b6e:	f383 8811 	msr	BASEPRI, r3
  404b72:	f3bf 8f6f 	isb	sy
  404b76:	f3bf 8f4f 	dsb	sy
  404b7a:	b662      	cpsie	i
  404b7c:	e7fe      	b.n	404b7c <vTimerPeriodicISRTests+0x298>
		xTimerResetFromISR( xISROneShotTimer, NULL );
  404b7e:	4a0f      	ldr	r2, [pc, #60]	; (404bbc <vTimerPeriodicISRTests+0x2d8>)
  404b80:	4b0f      	ldr	r3, [pc, #60]	; (404bc0 <vTimerPeriodicISRTests+0x2dc>)
  404b82:	6814      	ldr	r4, [r2, #0]
  404b84:	4798      	blx	r3
  404b86:	2300      	movs	r3, #0
  404b88:	4602      	mov	r2, r0
  404b8a:	2107      	movs	r1, #7
  404b8c:	4620      	mov	r0, r4
  404b8e:	9300      	str	r3, [sp, #0]
  404b90:	4c08      	ldr	r4, [pc, #32]	; (404bb4 <vTimerPeriodicISRTests+0x2d0>)
  404b92:	47a0      	blx	r4
  404b94:	e72b      	b.n	4049ee <vTimerPeriodicISRTests+0x10a>
  404b96:	bf00      	nop
  404b98:	20400038 	.word	0x20400038
  404b9c:	2042b640 	.word	0x2042b640
  404ba0:	7ffffffe 	.word	0x7ffffffe
  404ba4:	3ffffffc 	.word	0x3ffffffc
  404ba8:	2042b63c 	.word	0x2042b63c
  404bac:	2040003c 	.word	0x2040003c
  404bb0:	2042b644 	.word	0x2042b644
  404bb4:	004045c5 	.word	0x004045c5
  404bb8:	2042b63d 	.word	0x2042b63d
  404bbc:	2042b648 	.word	0x2042b648
  404bc0:	00403c79 	.word	0x00403c79
		if( ucISRAutoReloadTimerCounter != 3 )
  404bc4:	4b93      	ldr	r3, [pc, #588]	; (404e14 <vTimerPeriodicISRTests+0x530>)
  404bc6:	781b      	ldrb	r3, [r3, #0]
  404bc8:	2b03      	cmp	r3, #3
  404bca:	d00f      	beq.n	404bec <vTimerPeriodicISRTests+0x308>
			xTestStatus = pdFAIL;
  404bcc:	4b92      	ldr	r3, [pc, #584]	; (404e18 <vTimerPeriodicISRTests+0x534>)
  404bce:	2200      	movs	r2, #0
  404bd0:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404bd2:	681b      	ldr	r3, [r3, #0]
  404bd4:	b953      	cbnz	r3, 404bec <vTimerPeriodicISRTests+0x308>
  404bd6:	f04f 0380 	mov.w	r3, #128	; 0x80
  404bda:	b672      	cpsid	i
  404bdc:	f383 8811 	msr	BASEPRI, r3
  404be0:	f3bf 8f6f 	isb	sy
  404be4:	f3bf 8f4f 	dsb	sy
  404be8:	b662      	cpsie	i
  404bea:	e7fe      	b.n	404bea <vTimerPeriodicISRTests+0x306>
		if( ucISROneShotTimerCounter != 2 )
  404bec:	4b8b      	ldr	r3, [pc, #556]	; (404e1c <vTimerPeriodicISRTests+0x538>)
  404bee:	781b      	ldrb	r3, [r3, #0]
  404bf0:	2b02      	cmp	r3, #2
  404bf2:	d0c4      	beq.n	404b7e <vTimerPeriodicISRTests+0x29a>
			xTestStatus = pdFAIL;
  404bf4:	4b88      	ldr	r3, [pc, #544]	; (404e18 <vTimerPeriodicISRTests+0x534>)
  404bf6:	2200      	movs	r2, #0
  404bf8:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404bfa:	681b      	ldr	r3, [r3, #0]
  404bfc:	2b00      	cmp	r3, #0
  404bfe:	d1be      	bne.n	404b7e <vTimerPeriodicISRTests+0x29a>
  404c00:	f04f 0380 	mov.w	r3, #128	; 0x80
  404c04:	b672      	cpsid	i
  404c06:	f383 8811 	msr	BASEPRI, r3
  404c0a:	f3bf 8f6f 	isb	sy
  404c0e:	f3bf 8f4f 	dsb	sy
  404c12:	b662      	cpsie	i
  404c14:	e7fe      	b.n	404c14 <vTimerPeriodicISRTests+0x330>
		if( ucISRAutoReloadTimerCounter != 3 )
  404c16:	4b7f      	ldr	r3, [pc, #508]	; (404e14 <vTimerPeriodicISRTests+0x530>)
  404c18:	781b      	ldrb	r3, [r3, #0]
  404c1a:	2b03      	cmp	r3, #3
  404c1c:	d00f      	beq.n	404c3e <vTimerPeriodicISRTests+0x35a>
			xTestStatus = pdFAIL;
  404c1e:	4b7e      	ldr	r3, [pc, #504]	; (404e18 <vTimerPeriodicISRTests+0x534>)
  404c20:	2200      	movs	r2, #0
  404c22:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404c24:	681b      	ldr	r3, [r3, #0]
  404c26:	b953      	cbnz	r3, 404c3e <vTimerPeriodicISRTests+0x35a>
  404c28:	f04f 0380 	mov.w	r3, #128	; 0x80
  404c2c:	b672      	cpsid	i
  404c2e:	f383 8811 	msr	BASEPRI, r3
  404c32:	f3bf 8f6f 	isb	sy
  404c36:	f3bf 8f4f 	dsb	sy
  404c3a:	b662      	cpsie	i
  404c3c:	e7fe      	b.n	404c3c <vTimerPeriodicISRTests+0x358>
		if( ucISROneShotTimerCounter != 2 )
  404c3e:	4b77      	ldr	r3, [pc, #476]	; (404e1c <vTimerPeriodicISRTests+0x538>)
  404c40:	781b      	ldrb	r3, [r3, #0]
  404c42:	2b02      	cmp	r3, #2
  404c44:	d09b      	beq.n	404b7e <vTimerPeriodicISRTests+0x29a>
			xTestStatus = pdFAIL;
  404c46:	4b74      	ldr	r3, [pc, #464]	; (404e18 <vTimerPeriodicISRTests+0x534>)
  404c48:	2200      	movs	r2, #0
  404c4a:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404c4c:	681b      	ldr	r3, [r3, #0]
  404c4e:	2b00      	cmp	r3, #0
  404c50:	d195      	bne.n	404b7e <vTimerPeriodicISRTests+0x29a>
  404c52:	f04f 0380 	mov.w	r3, #128	; 0x80
  404c56:	b672      	cpsid	i
  404c58:	f383 8811 	msr	BASEPRI, r3
  404c5c:	f3bf 8f6f 	isb	sy
  404c60:	f3bf 8f4f 	dsb	sy
  404c64:	b662      	cpsie	i
  404c66:	e7fe      	b.n	404c66 <vTimerPeriodicISRTests+0x382>
		if( ucISRAutoReloadTimerCounter != 3 )
  404c68:	4b6a      	ldr	r3, [pc, #424]	; (404e14 <vTimerPeriodicISRTests+0x530>)
  404c6a:	781b      	ldrb	r3, [r3, #0]
  404c6c:	2b03      	cmp	r3, #3
  404c6e:	d00f      	beq.n	404c90 <vTimerPeriodicISRTests+0x3ac>
			xTestStatus = pdFAIL;
  404c70:	4b69      	ldr	r3, [pc, #420]	; (404e18 <vTimerPeriodicISRTests+0x534>)
  404c72:	2200      	movs	r2, #0
  404c74:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404c76:	681b      	ldr	r3, [r3, #0]
  404c78:	b953      	cbnz	r3, 404c90 <vTimerPeriodicISRTests+0x3ac>
  404c7a:	f04f 0380 	mov.w	r3, #128	; 0x80
  404c7e:	b672      	cpsid	i
  404c80:	f383 8811 	msr	BASEPRI, r3
  404c84:	f3bf 8f6f 	isb	sy
  404c88:	f3bf 8f4f 	dsb	sy
  404c8c:	b662      	cpsie	i
  404c8e:	e7fe      	b.n	404c8e <vTimerPeriodicISRTests+0x3aa>
		if( ucISROneShotTimerCounter != 2 )
  404c90:	4b62      	ldr	r3, [pc, #392]	; (404e1c <vTimerPeriodicISRTests+0x538>)
  404c92:	781b      	ldrb	r3, [r3, #0]
  404c94:	2b02      	cmp	r3, #2
  404c96:	f43f aeaa 	beq.w	4049ee <vTimerPeriodicISRTests+0x10a>
			xTestStatus = pdFAIL;
  404c9a:	4b5f      	ldr	r3, [pc, #380]	; (404e18 <vTimerPeriodicISRTests+0x534>)
  404c9c:	2200      	movs	r2, #0
  404c9e:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404ca0:	681b      	ldr	r3, [r3, #0]
  404ca2:	2b00      	cmp	r3, #0
  404ca4:	f47f aea3 	bne.w	4049ee <vTimerPeriodicISRTests+0x10a>
  404ca8:	f04f 0380 	mov.w	r3, #128	; 0x80
  404cac:	b672      	cpsid	i
  404cae:	f383 8811 	msr	BASEPRI, r3
  404cb2:	f3bf 8f6f 	isb	sy
  404cb6:	f3bf 8f4f 	dsb	sy
  404cba:	b662      	cpsie	i
  404cbc:	e7fe      	b.n	404cbc <vTimerPeriodicISRTests+0x3d8>
		if( ucISRAutoReloadTimerCounter != 3 )
  404cbe:	4b55      	ldr	r3, [pc, #340]	; (404e14 <vTimerPeriodicISRTests+0x530>)
  404cc0:	781b      	ldrb	r3, [r3, #0]
  404cc2:	2b03      	cmp	r3, #3
  404cc4:	d00f      	beq.n	404ce6 <vTimerPeriodicISRTests+0x402>
			xTestStatus = pdFAIL;
  404cc6:	4b54      	ldr	r3, [pc, #336]	; (404e18 <vTimerPeriodicISRTests+0x534>)
  404cc8:	2200      	movs	r2, #0
  404cca:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404ccc:	681b      	ldr	r3, [r3, #0]
  404cce:	b953      	cbnz	r3, 404ce6 <vTimerPeriodicISRTests+0x402>
  404cd0:	f04f 0380 	mov.w	r3, #128	; 0x80
  404cd4:	b672      	cpsid	i
  404cd6:	f383 8811 	msr	BASEPRI, r3
  404cda:	f3bf 8f6f 	isb	sy
  404cde:	f3bf 8f4f 	dsb	sy
  404ce2:	b662      	cpsie	i
  404ce4:	e7fe      	b.n	404ce4 <vTimerPeriodicISRTests+0x400>
		if( ucISROneShotTimerCounter != 3 )
  404ce6:	4b4d      	ldr	r3, [pc, #308]	; (404e1c <vTimerPeriodicISRTests+0x538>)
  404ce8:	781b      	ldrb	r3, [r3, #0]
  404cea:	2b03      	cmp	r3, #3
  404cec:	f43f ae7f 	beq.w	4049ee <vTimerPeriodicISRTests+0x10a>
			xTestStatus = pdFAIL;
  404cf0:	4b49      	ldr	r3, [pc, #292]	; (404e18 <vTimerPeriodicISRTests+0x534>)
  404cf2:	2200      	movs	r2, #0
  404cf4:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404cf6:	681b      	ldr	r3, [r3, #0]
  404cf8:	2b00      	cmp	r3, #0
  404cfa:	f47f ae78 	bne.w	4049ee <vTimerPeriodicISRTests+0x10a>
  404cfe:	f04f 0380 	mov.w	r3, #128	; 0x80
  404d02:	b672      	cpsid	i
  404d04:	f383 8811 	msr	BASEPRI, r3
  404d08:	f3bf 8f6f 	isb	sy
  404d0c:	f3bf 8f4f 	dsb	sy
  404d10:	b662      	cpsie	i
  404d12:	e7fe      	b.n	404d12 <vTimerPeriodicISRTests+0x42e>
		if( ucISRAutoReloadTimerCounter != 3 )
  404d14:	4b3f      	ldr	r3, [pc, #252]	; (404e14 <vTimerPeriodicISRTests+0x530>)
  404d16:	781b      	ldrb	r3, [r3, #0]
  404d18:	2b03      	cmp	r3, #3
  404d1a:	d00f      	beq.n	404d3c <vTimerPeriodicISRTests+0x458>
			xTestStatus = pdFAIL;
  404d1c:	4b3e      	ldr	r3, [pc, #248]	; (404e18 <vTimerPeriodicISRTests+0x534>)
  404d1e:	2200      	movs	r2, #0
  404d20:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404d22:	681b      	ldr	r3, [r3, #0]
  404d24:	b953      	cbnz	r3, 404d3c <vTimerPeriodicISRTests+0x458>
  404d26:	f04f 0380 	mov.w	r3, #128	; 0x80
  404d2a:	b672      	cpsid	i
  404d2c:	f383 8811 	msr	BASEPRI, r3
  404d30:	f3bf 8f6f 	isb	sy
  404d34:	f3bf 8f4f 	dsb	sy
  404d38:	b662      	cpsie	i
  404d3a:	e7fe      	b.n	404d3a <vTimerPeriodicISRTests+0x456>
		if( ucISROneShotTimerCounter != 2 )
  404d3c:	4b37      	ldr	r3, [pc, #220]	; (404e1c <vTimerPeriodicISRTests+0x538>)
  404d3e:	781b      	ldrb	r3, [r3, #0]
  404d40:	2b02      	cmp	r3, #2
  404d42:	f43f af1c 	beq.w	404b7e <vTimerPeriodicISRTests+0x29a>
			xTestStatus = pdFAIL;
  404d46:	4b34      	ldr	r3, [pc, #208]	; (404e18 <vTimerPeriodicISRTests+0x534>)
  404d48:	2200      	movs	r2, #0
  404d4a:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404d4c:	681b      	ldr	r3, [r3, #0]
  404d4e:	2b00      	cmp	r3, #0
  404d50:	f47f af15 	bne.w	404b7e <vTimerPeriodicISRTests+0x29a>
  404d54:	f04f 0380 	mov.w	r3, #128	; 0x80
  404d58:	b672      	cpsid	i
  404d5a:	f383 8811 	msr	BASEPRI, r3
  404d5e:	f3bf 8f6f 	isb	sy
  404d62:	f3bf 8f4f 	dsb	sy
  404d66:	b662      	cpsie	i
  404d68:	e7fe      	b.n	404d68 <vTimerPeriodicISRTests+0x484>
		if( ucISROneShotTimerCounter != 1 )
  404d6a:	4b2c      	ldr	r3, [pc, #176]	; (404e1c <vTimerPeriodicISRTests+0x538>)
  404d6c:	781b      	ldrb	r3, [r3, #0]
  404d6e:	2b01      	cmp	r3, #1
  404d70:	f43f ae3d 	beq.w	4049ee <vTimerPeriodicISRTests+0x10a>
			xTestStatus = pdFAIL;
  404d74:	4b28      	ldr	r3, [pc, #160]	; (404e18 <vTimerPeriodicISRTests+0x534>)
  404d76:	2200      	movs	r2, #0
  404d78:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404d7a:	681b      	ldr	r3, [r3, #0]
  404d7c:	2b00      	cmp	r3, #0
  404d7e:	f47f ae36 	bne.w	4049ee <vTimerPeriodicISRTests+0x10a>
  404d82:	f04f 0380 	mov.w	r3, #128	; 0x80
  404d86:	b672      	cpsid	i
  404d88:	f383 8811 	msr	BASEPRI, r3
  404d8c:	f3bf 8f6f 	isb	sy
  404d90:	f3bf 8f4f 	dsb	sy
  404d94:	b662      	cpsie	i
  404d96:	e7fe      	b.n	404d96 <vTimerPeriodicISRTests+0x4b2>
		if( ( ucISRAutoReloadTimerCounter != 1 ) || ( ucISROneShotTimerCounter != 1 ) )
  404d98:	4b20      	ldr	r3, [pc, #128]	; (404e1c <vTimerPeriodicISRTests+0x538>)
  404d9a:	781b      	ldrb	r3, [r3, #0]
  404d9c:	2b01      	cmp	r3, #1
  404d9e:	f47f ae47 	bne.w	404a30 <vTimerPeriodicISRTests+0x14c>
  404da2:	e624      	b.n	4049ee <vTimerPeriodicISRTests+0x10a>
		if( ucISROneShotTimerCounter != 3 )
  404da4:	4b1d      	ldr	r3, [pc, #116]	; (404e1c <vTimerPeriodicISRTests+0x538>)
  404da6:	781b      	ldrb	r3, [r3, #0]
  404da8:	2b03      	cmp	r3, #3
  404daa:	d00f      	beq.n	404dcc <vTimerPeriodicISRTests+0x4e8>
			xTestStatus = pdFAIL;
  404dac:	4b1a      	ldr	r3, [pc, #104]	; (404e18 <vTimerPeriodicISRTests+0x534>)
  404dae:	2200      	movs	r2, #0
  404db0:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404db2:	681b      	ldr	r3, [r3, #0]
  404db4:	b953      	cbnz	r3, 404dcc <vTimerPeriodicISRTests+0x4e8>
  404db6:	f04f 0380 	mov.w	r3, #128	; 0x80
  404dba:	b672      	cpsid	i
  404dbc:	f383 8811 	msr	BASEPRI, r3
  404dc0:	f3bf 8f6f 	isb	sy
  404dc4:	f3bf 8f4f 	dsb	sy
  404dc8:	b662      	cpsie	i
  404dca:	e7fe      	b.n	404dca <vTimerPeriodicISRTests+0x4e6>
		uxTick = ( TickType_t ) -1;
  404dcc:	f04f 33ff 	mov.w	r3, #4294967295
  404dd0:	602b      	str	r3, [r5, #0]
}
  404dd2:	e60c      	b.n	4049ee <vTimerPeriodicISRTests+0x10a>
		xTimerStartFromISR( xISROneShotTimer, NULL );
  404dd4:	4a12      	ldr	r2, [pc, #72]	; (404e20 <vTimerPeriodicISRTests+0x53c>)
  404dd6:	4b13      	ldr	r3, [pc, #76]	; (404e24 <vTimerPeriodicISRTests+0x540>)
  404dd8:	6814      	ldr	r4, [r2, #0]
  404dda:	4798      	blx	r3
  404ddc:	2300      	movs	r3, #0
  404dde:	4602      	mov	r2, r0
  404de0:	2106      	movs	r1, #6
  404de2:	4620      	mov	r0, r4
  404de4:	9300      	str	r3, [sp, #0]
  404de6:	4c10      	ldr	r4, [pc, #64]	; (404e28 <vTimerPeriodicISRTests+0x544>)
  404de8:	47a0      	blx	r4
  404dea:	e600      	b.n	4049ee <vTimerPeriodicISRTests+0x10a>
		if( ucISRAutoReloadTimerCounter != 3 )
  404dec:	4b09      	ldr	r3, [pc, #36]	; (404e14 <vTimerPeriodicISRTests+0x530>)
  404dee:	781b      	ldrb	r3, [r3, #0]
  404df0:	2b03      	cmp	r3, #3
  404df2:	d01b      	beq.n	404e2c <vTimerPeriodicISRTests+0x548>
			xTestStatus = pdFAIL;
  404df4:	4b08      	ldr	r3, [pc, #32]	; (404e18 <vTimerPeriodicISRTests+0x534>)
  404df6:	2200      	movs	r2, #0
  404df8:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404dfa:	681b      	ldr	r3, [r3, #0]
  404dfc:	b9b3      	cbnz	r3, 404e2c <vTimerPeriodicISRTests+0x548>
  404dfe:	f04f 0380 	mov.w	r3, #128	; 0x80
  404e02:	b672      	cpsid	i
  404e04:	f383 8811 	msr	BASEPRI, r3
  404e08:	f3bf 8f6f 	isb	sy
  404e0c:	f3bf 8f4f 	dsb	sy
  404e10:	b662      	cpsie	i
  404e12:	e7fe      	b.n	404e12 <vTimerPeriodicISRTests+0x52e>
  404e14:	2042b63c 	.word	0x2042b63c
  404e18:	2040003c 	.word	0x2040003c
  404e1c:	2042b63d 	.word	0x2042b63d
  404e20:	2042b648 	.word	0x2042b648
  404e24:	00403c79 	.word	0x00403c79
  404e28:	004045c5 	.word	0x004045c5
		if( ucISROneShotTimerCounter != 1 )
  404e2c:	4b23      	ldr	r3, [pc, #140]	; (404ebc <vTimerPeriodicISRTests+0x5d8>)
  404e2e:	781b      	ldrb	r3, [r3, #0]
  404e30:	2b01      	cmp	r3, #1
  404e32:	f43f addc 	beq.w	4049ee <vTimerPeriodicISRTests+0x10a>
			xTestStatus = pdFAIL;
  404e36:	4b22      	ldr	r3, [pc, #136]	; (404ec0 <vTimerPeriodicISRTests+0x5dc>)
  404e38:	2200      	movs	r2, #0
  404e3a:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404e3c:	681b      	ldr	r3, [r3, #0]
  404e3e:	2b00      	cmp	r3, #0
  404e40:	f47f add5 	bne.w	4049ee <vTimerPeriodicISRTests+0x10a>
  404e44:	f04f 0380 	mov.w	r3, #128	; 0x80
  404e48:	b672      	cpsid	i
  404e4a:	f383 8811 	msr	BASEPRI, r3
  404e4e:	f3bf 8f6f 	isb	sy
  404e52:	f3bf 8f4f 	dsb	sy
  404e56:	b662      	cpsie	i
  404e58:	e7fe      	b.n	404e58 <vTimerPeriodicISRTests+0x574>
		if( ucISRAutoReloadTimerCounter != 3 )
  404e5a:	4b1a      	ldr	r3, [pc, #104]	; (404ec4 <vTimerPeriodicISRTests+0x5e0>)
  404e5c:	781b      	ldrb	r3, [r3, #0]
  404e5e:	2b03      	cmp	r3, #3
  404e60:	d00f      	beq.n	404e82 <vTimerPeriodicISRTests+0x59e>
			xTestStatus = pdFAIL;
  404e62:	4b17      	ldr	r3, [pc, #92]	; (404ec0 <vTimerPeriodicISRTests+0x5dc>)
  404e64:	2200      	movs	r2, #0
  404e66:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404e68:	681b      	ldr	r3, [r3, #0]
  404e6a:	b953      	cbnz	r3, 404e82 <vTimerPeriodicISRTests+0x59e>
  404e6c:	f04f 0380 	mov.w	r3, #128	; 0x80
  404e70:	b672      	cpsid	i
  404e72:	f383 8811 	msr	BASEPRI, r3
  404e76:	f3bf 8f6f 	isb	sy
  404e7a:	f3bf 8f4f 	dsb	sy
  404e7e:	b662      	cpsie	i
  404e80:	e7fe      	b.n	404e80 <vTimerPeriodicISRTests+0x59c>
		if( ucISROneShotTimerCounter != 1 )
  404e82:	4b0e      	ldr	r3, [pc, #56]	; (404ebc <vTimerPeriodicISRTests+0x5d8>)
  404e84:	781b      	ldrb	r3, [r3, #0]
  404e86:	2b01      	cmp	r3, #1
  404e88:	d00f      	beq.n	404eaa <vTimerPeriodicISRTests+0x5c6>
			xTestStatus = pdFAIL;
  404e8a:	4b0d      	ldr	r3, [pc, #52]	; (404ec0 <vTimerPeriodicISRTests+0x5dc>)
  404e8c:	2200      	movs	r2, #0
  404e8e:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404e90:	681b      	ldr	r3, [r3, #0]
  404e92:	b953      	cbnz	r3, 404eaa <vTimerPeriodicISRTests+0x5c6>
  404e94:	f04f 0380 	mov.w	r3, #128	; 0x80
  404e98:	b672      	cpsid	i
  404e9a:	f383 8811 	msr	BASEPRI, r3
  404e9e:	f3bf 8f6f 	isb	sy
  404ea2:	f3bf 8f4f 	dsb	sy
  404ea6:	b662      	cpsie	i
  404ea8:	e7fe      	b.n	404ea8 <vTimerPeriodicISRTests+0x5c4>
		xTimerStopFromISR( xISRAutoReloadTimer, NULL );
  404eaa:	2300      	movs	r3, #0
  404eac:	4a06      	ldr	r2, [pc, #24]	; (404ec8 <vTimerPeriodicISRTests+0x5e4>)
  404eae:	2108      	movs	r1, #8
  404eb0:	4c06      	ldr	r4, [pc, #24]	; (404ecc <vTimerPeriodicISRTests+0x5e8>)
  404eb2:	6810      	ldr	r0, [r2, #0]
  404eb4:	461a      	mov	r2, r3
  404eb6:	9300      	str	r3, [sp, #0]
  404eb8:	47a0      	blx	r4
  404eba:	e598      	b.n	4049ee <vTimerPeriodicISRTests+0x10a>
  404ebc:	2042b63d 	.word	0x2042b63d
  404ec0:	2040003c 	.word	0x2040003c
  404ec4:	2042b63c 	.word	0x2042b63c
  404ec8:	2042b644 	.word	0x2042b644
  404ecc:	004045c5 	.word	0x004045c5

00404ed0 <USART1_Handler>:
volatile float harmony_list_b[11];
volatile float *harmony_list_read = harmony_list_a; 
volatile float *harmony_list_fill = harmony_list_b; 
volatile uint32_t harmony_idx = 0;  
void USART_SERIAL_ISR_HANDLER(void)
{
  404ed0:	b570      	push	{r4, r5, r6, lr}
	uint32_t dw_status = usart_get_status(USART_SERIAL);
  404ed2:	4b18      	ldr	r3, [pc, #96]	; (404f34 <USART1_Handler+0x64>)
{
  404ed4:	b082      	sub	sp, #8
	uint32_t dw_status = usart_get_status(USART_SERIAL);
  404ed6:	4818      	ldr	r0, [pc, #96]	; (404f38 <USART1_Handler+0x68>)
  404ed8:	4798      	blx	r3
	if (dw_status & US_CSR_RXRDY) {
  404eda:	07c3      	lsls	r3, r0, #31
  404edc:	d401      	bmi.n	404ee2 <USART1_Handler+0x12>
			harmony_list_read = harmony_list_fill; 
			harmony_list_fill = temp; 
			harmony_idx = 0; 
		}
	}
}
  404ede:	b002      	add	sp, #8
  404ee0:	bd70      	pop	{r4, r5, r6, pc}
		usart_read(USART_SERIAL, &received_byte);
  404ee2:	4b16      	ldr	r3, [pc, #88]	; (404f3c <USART1_Handler+0x6c>)
  404ee4:	a901      	add	r1, sp, #4
  404ee6:	4814      	ldr	r0, [pc, #80]	; (404f38 <USART1_Handler+0x68>)
  404ee8:	4798      	blx	r3
		if (received_byte != 0 && harmony_idx < MAX_NUM_SHIFTS)
  404eea:	9a01      	ldr	r2, [sp, #4]
  404eec:	4b14      	ldr	r3, [pc, #80]	; (404f40 <USART1_Handler+0x70>)
  404eee:	b182      	cbz	r2, 404f12 <USART1_Handler+0x42>
  404ef0:	6819      	ldr	r1, [r3, #0]
  404ef2:	290a      	cmp	r1, #10
  404ef4:	d80d      	bhi.n	404f12 <USART1_Handler+0x42>
			harmony_list_fill[harmony_idx] = midi_note_frequencies[received_byte]; 
  404ef6:	4913      	ldr	r1, [pc, #76]	; (404f44 <USART1_Handler+0x74>)
  404ef8:	4813      	ldr	r0, [pc, #76]	; (404f48 <USART1_Handler+0x78>)
  404efa:	681c      	ldr	r4, [r3, #0]
  404efc:	6809      	ldr	r1, [r1, #0]
  404efe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  404f02:	eb01 0184 	add.w	r1, r1, r4, lsl #2
  404f06:	6812      	ldr	r2, [r2, #0]
  404f08:	600a      	str	r2, [r1, #0]
			harmony_idx++;
  404f0a:	681a      	ldr	r2, [r3, #0]
  404f0c:	3201      	adds	r2, #1
  404f0e:	601a      	str	r2, [r3, #0]
  404f10:	e7e5      	b.n	404ede <USART1_Handler+0xe>
			harmony_list_fill[harmony_idx] = END_OF_SHIFTS; 
  404f12:	4a0c      	ldr	r2, [pc, #48]	; (404f44 <USART1_Handler+0x74>)
			harmony_idx = 0; 
  404f14:	2500      	movs	r5, #0
			harmony_list_fill[harmony_idx] = END_OF_SHIFTS; 
  404f16:	681e      	ldr	r6, [r3, #0]
  404f18:	6811      	ldr	r1, [r2, #0]
			float *temp = (float *)harmony_list_read; 
  404f1a:	480c      	ldr	r0, [pc, #48]	; (404f4c <USART1_Handler+0x7c>)
			harmony_list_fill[harmony_idx] = END_OF_SHIFTS; 
  404f1c:	eb01 0186 	add.w	r1, r1, r6, lsl #2
  404f20:	4c0b      	ldr	r4, [pc, #44]	; (404f50 <USART1_Handler+0x80>)
  404f22:	600c      	str	r4, [r1, #0]
			float *temp = (float *)harmony_list_read; 
  404f24:	6804      	ldr	r4, [r0, #0]
			harmony_list_read = harmony_list_fill; 
  404f26:	6811      	ldr	r1, [r2, #0]
			harmony_idx = 0; 
  404f28:	601d      	str	r5, [r3, #0]
			harmony_list_fill = temp; 
  404f2a:	6014      	str	r4, [r2, #0]
			harmony_list_read = harmony_list_fill; 
  404f2c:	6001      	str	r1, [r0, #0]
}
  404f2e:	b002      	add	sp, #8
  404f30:	bd70      	pop	{r4, r5, r6, pc}
  404f32:	bf00      	nop
  404f34:	004022a5 	.word	0x004022a5
  404f38:	40028000 	.word	0x40028000
  404f3c:	004022a9 	.word	0x004022a9
  404f40:	2042b64c 	.word	0x2042b64c
  404f44:	20400040 	.word	0x20400040
  404f48:	004086fc 	.word	0x004086fc
  404f4c:	20400044 	.word	0x20400044
  404f50:	bf800000 	.word	0xbf800000

00404f54 <main>:

int main(void)
{
  404f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sysclk_init();
  404f58:	4bb7      	ldr	r3, [pc, #732]	; (405238 <main+0x2e4>)
{
  404f5a:	ed2d 8b06 	vpush	{d8-d10}
  404f5e:	b093      	sub	sp, #76	; 0x4c
	sysclk_init();
  404f60:	4798      	blx	r3
	board_init();
  404f62:	4bb6      	ldr	r3, [pc, #728]	; (40523c <main+0x2e8>)
  404f64:	4798      	blx	r3
  __ASM volatile ("dsb");
  404f66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404f6a:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_DisableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->CCR &= ~SCB_CCR_IC_Msk;            // disable I-Cache
  404f6e:	4cb4      	ldr	r4, [pc, #720]	; (405240 <main+0x2ec>)
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  404f70:	2700      	movs	r7, #0
    SCB->CCR &= ~SCB_CCR_IC_Msk;            // disable I-Cache
  404f72:	6963      	ldr	r3, [r4, #20]
  404f74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  404f78:	6163      	str	r3, [r4, #20]
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  404f7a:	f8c4 7250 	str.w	r7, [r4, #592]	; 0x250
  __ASM volatile ("dsb");
  404f7e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404f82:	f3bf 8f6f 	isb	sy
	SCB_DisableICache(); 
	lcd_init(); 
  404f86:	4baf      	ldr	r3, [pc, #700]	; (405244 <main+0x2f0>)
  404f88:	4798      	blx	r3
  __ASM volatile ("dsb");
  404f8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404f8e:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  404f92:	f8c4 7250 	str.w	r7, [r4, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  404f96:	6963      	ldr	r3, [r4, #20]
  404f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  404f9c:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb");
  404f9e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404fa2:	f3bf 8f6f 	isb	sy
	SCB_EnableICache();
	audio_init();
  404fa6:	4ba8      	ldr	r3, [pc, #672]	; (405248 <main+0x2f4>)
  404fa8:	4798      	blx	r3
	//configure_console();
	PSOLA_init(); 
  404faa:	4ba8      	ldr	r3, [pc, #672]	; (40524c <main+0x2f8>)
  404fac:	4798      	blx	r3
  __ASM volatile ("dsb");
  404fae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404fb2:	f3bf 8f6f 	isb	sy
    SCB->CCR &= ~SCB_CCR_IC_Msk;            // disable I-Cache
  404fb6:	6963      	ldr	r3, [r4, #20]
  404fb8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  404fbc:	6163      	str	r3, [r4, #20]
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  404fbe:	f8c4 7250 	str.w	r7, [r4, #592]	; 0x250
  __ASM volatile ("dsb");
  404fc2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404fc6:	f3bf 8f6f 	isb	sy
	 
	SCB_DisableICache(); 
	gfx_draw_filled_rect(100, 100, 20, 20, GFX_COLOR_YELLOW);
  404fca:	f64f 76e0 	movw	r6, #65504	; 0xffe0
  404fce:	2314      	movs	r3, #20
  404fd0:	2164      	movs	r1, #100	; 0x64
  404fd2:	4d9f      	ldr	r5, [pc, #636]	; (405250 <main+0x2fc>)
  404fd4:	461a      	mov	r2, r3
  404fd6:	9600      	str	r6, [sp, #0]
  404fd8:	4608      	mov	r0, r1
  404fda:	47a8      	blx	r5
	gfx_draw_filled_rect(200, 100, 20, 20, GFX_COLOR_YELLOW);
  404fdc:	2314      	movs	r3, #20
  404fde:	9600      	str	r6, [sp, #0]
  404fe0:	2164      	movs	r1, #100	; 0x64
  404fe2:	461a      	mov	r2, r3
  404fe4:	20c8      	movs	r0, #200	; 0xc8
  404fe6:	47a8      	blx	r5
	gfx_draw_filled_rect(80, 180, 20, 20, GFX_COLOR_YELLOW);
  404fe8:	2314      	movs	r3, #20
  404fea:	9600      	str	r6, [sp, #0]
  404fec:	21b4      	movs	r1, #180	; 0xb4
  404fee:	461a      	mov	r2, r3
  404ff0:	2050      	movs	r0, #80	; 0x50
  404ff2:	47a8      	blx	r5
	gfx_draw_filled_rect(100, 200, 20, 20, GFX_COLOR_YELLOW);
  404ff4:	2314      	movs	r3, #20
  404ff6:	9600      	str	r6, [sp, #0]
  404ff8:	21c8      	movs	r1, #200	; 0xc8
  404ffa:	461a      	mov	r2, r3
  404ffc:	2064      	movs	r0, #100	; 0x64
  404ffe:	47a8      	blx	r5
	gfx_draw_filled_rect(120, 220, 20, 20, GFX_COLOR_YELLOW);
  405000:	2314      	movs	r3, #20
  405002:	9600      	str	r6, [sp, #0]
  405004:	21dc      	movs	r1, #220	; 0xdc
  405006:	461a      	mov	r2, r3
  405008:	2078      	movs	r0, #120	; 0x78
  40500a:	47a8      	blx	r5
	gfx_draw_filled_rect(140, 220, 20, 20, GFX_COLOR_YELLOW);
  40500c:	2314      	movs	r3, #20
  40500e:	9600      	str	r6, [sp, #0]
  405010:	21dc      	movs	r1, #220	; 0xdc
  405012:	461a      	mov	r2, r3
  405014:	208c      	movs	r0, #140	; 0x8c
  405016:	47a8      	blx	r5
	gfx_draw_filled_rect(160, 220, 20, 20, GFX_COLOR_YELLOW);
  405018:	2314      	movs	r3, #20
  40501a:	9600      	str	r6, [sp, #0]
  40501c:	21dc      	movs	r1, #220	; 0xdc
  40501e:	461a      	mov	r2, r3
  405020:	20a0      	movs	r0, #160	; 0xa0
  405022:	47a8      	blx	r5
	gfx_draw_filled_rect(180, 220, 20, 20, GFX_COLOR_YELLOW);
  405024:	2314      	movs	r3, #20
  405026:	9600      	str	r6, [sp, #0]
  405028:	21dc      	movs	r1, #220	; 0xdc
  40502a:	461a      	mov	r2, r3
  40502c:	20b4      	movs	r0, #180	; 0xb4
  40502e:	47a8      	blx	r5
	gfx_draw_filled_rect(200, 200, 20, 20, GFX_COLOR_YELLOW);
  405030:	2314      	movs	r3, #20
  405032:	21c8      	movs	r1, #200	; 0xc8
  405034:	9600      	str	r6, [sp, #0]
  405036:	461a      	mov	r2, r3
  405038:	4608      	mov	r0, r1
  40503a:	47a8      	blx	r5
	gfx_draw_filled_rect(220, 180, 20, 20, GFX_COLOR_YELLOW);
  40503c:	2314      	movs	r3, #20
  40503e:	9600      	str	r6, [sp, #0]
  405040:	21b4      	movs	r1, #180	; 0xb4
  405042:	461a      	mov	r2, r3
  405044:	20dc      	movs	r0, #220	; 0xdc
  405046:	47a8      	blx	r5
  __ASM volatile ("dsb");
  405048:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40504c:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  405050:	f8c4 7250 	str.w	r7, [r4, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  405054:	6963      	ldr	r3, [r4, #20]
  405056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  40505a:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb");
  40505c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  405060:	f3bf 8f6f 	isb	sy
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
	usart_settings.char_length = opt->charlength;
  405064:	21c0      	movs	r1, #192	; 0xc0
	usart_settings.parity_type = opt->paritytype;
  405066:	f44f 6200 	mov.w	r2, #2048	; 0x800
	usart_settings.baudrate = opt->baudrate;
  40506a:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  40506e:	4b79      	ldr	r3, [pc, #484]	; (405254 <main+0x300>)
  405070:	200e      	movs	r0, #14
	usart_settings.stop_bits= opt->stopbits;
  405072:	9709      	str	r7, [sp, #36]	; 0x24
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  405074:	970a      	str	r7, [sp, #40]	; 0x28
  405076:	f06f 0901 	mvn.w	r9, #1
	
	float oneOverInputPitch, pitch_shift, power;
	float harmony_shifts[MAX_NUM_SHIFTS+1]; arm_fill_f32(NO_SHIFT, harmony_shifts, MAX_NUM_SHIFTS);
	harmony_shifts[MAX_NUM_SHIFTS] = END_OF_SHIFTS;
	harmony_shifts[0] = NO_SHIFT;
	arm_fill_f32(0.0f, prev_input, WIN_SIZE); 
  40507a:	9703      	str	r7, [sp, #12]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40507c:	f44f 4780 	mov.w	r7, #16384	; 0x4000
	usart_settings.baudrate = opt->baudrate;
  405080:	9406      	str	r4, [sp, #24]
	usart_settings.char_length = opt->charlength;
  405082:	9107      	str	r1, [sp, #28]
	usart_settings.parity_type = opt->paritytype;
  405084:	9208      	str	r2, [sp, #32]
  405086:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  405088:	4a73      	ldr	r2, [pc, #460]	; (405258 <main+0x304>)
  40508a:	a906      	add	r1, sp, #24
  40508c:	4b73      	ldr	r3, [pc, #460]	; (40525c <main+0x308>)
  40508e:	4874      	ldr	r0, [pc, #464]	; (405260 <main+0x30c>)
  405090:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  405092:	4d74      	ldr	r5, [pc, #464]	; (405264 <main+0x310>)
  405094:	4872      	ldr	r0, [pc, #456]	; (405260 <main+0x30c>)
  405096:	47a8      	blx	r5
		usart_enable_rx(p_usart);
  405098:	4c73      	ldr	r4, [pc, #460]	; (405268 <main+0x314>)
  40509a:	4871      	ldr	r0, [pc, #452]	; (405260 <main+0x30c>)
  40509c:	47a0      	blx	r4
	usart_enable_tx(USART_SERIAL);
  40509e:	4870      	ldr	r0, [pc, #448]	; (405260 <main+0x30c>)
  4050a0:	47a8      	blx	r5
	usart_enable_rx(USART_SERIAL);
  4050a2:	486f      	ldr	r0, [pc, #444]	; (405260 <main+0x30c>)
  4050a4:	47a0      	blx	r4
	usart_enable_interrupt(USART_SERIAL, US_IER_RXRDY); 
  4050a6:	2101      	movs	r1, #1
  4050a8:	486d      	ldr	r0, [pc, #436]	; (405260 <main+0x30c>)
		harmony_list_a[i] = 0.0f; harmony_list_b[i] = 0.0f; 
  4050aa:	2500      	movs	r5, #0
	usart_enable_interrupt(USART_SERIAL, US_IER_RXRDY); 
  4050ac:	4b6f      	ldr	r3, [pc, #444]	; (40526c <main+0x318>)
  4050ae:	4798      	blx	r3
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4050b0:	4c6f      	ldr	r4, [pc, #444]	; (405270 <main+0x31c>)
  4050b2:	2040      	movs	r0, #64	; 0x40
  4050b4:	f8df a204 	ldr.w	sl, [pc, #516]	; 4052bc <main+0x368>
		harmony_list_a[i] = 0.0f; harmony_list_b[i] = 0.0f; 
  4050b8:	4b6e      	ldr	r3, [pc, #440]	; (405274 <main+0x320>)
	float harmony_shifts[MAX_NUM_SHIFTS+1]; arm_fill_f32(NO_SHIFT, harmony_shifts, MAX_NUM_SHIFTS);
  4050ba:	a906      	add	r1, sp, #24
		harmony_list_a[i] = 0.0f; harmony_list_b[i] = 0.0f; 
  4050bc:	4e6e      	ldr	r6, [pc, #440]	; (405278 <main+0x324>)
	float harmony_shifts[MAX_NUM_SHIFTS+1]; arm_fill_f32(NO_SHIFT, harmony_shifts, MAX_NUM_SHIFTS);
  4050be:	220b      	movs	r2, #11
  4050c0:	f884 030e 	strb.w	r0, [r4, #782]	; 0x30e
				if (need_root == false)
					need_root = true; 
			}
			
			// return pitch shifted data from previous samples block  
			create_harmonies((float  *)processBuffer, mixed_buffer, inputPitch, harmony_shifts); 
  4050c4:	f5aa 6800 	sub.w	r8, sl, #2048	; 0x800
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4050c8:	f8c4 7180 	str.w	r7, [r4, #384]	; 0x180
	float harmony_shifts[MAX_NUM_SHIFTS+1]; arm_fill_f32(NO_SHIFT, harmony_shifts, MAX_NUM_SHIFTS);
  4050cc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4050d0:	6027      	str	r7, [r4, #0]
  4050d2:	eba9 0908 	sub.w	r9, r9, r8
  4050d6:	4c69      	ldr	r4, [pc, #420]	; (40527c <main+0x328>)
		harmony_list_a[i] = 0.0f; harmony_list_b[i] = 0.0f; 
  4050d8:	6035      	str	r5, [r6, #0]
  4050da:	601d      	str	r5, [r3, #0]
  4050dc:	6075      	str	r5, [r6, #4]
  4050de:	605d      	str	r5, [r3, #4]
  4050e0:	60b5      	str	r5, [r6, #8]
  4050e2:	609d      	str	r5, [r3, #8]
  4050e4:	60f5      	str	r5, [r6, #12]
  4050e6:	60dd      	str	r5, [r3, #12]
  4050e8:	6135      	str	r5, [r6, #16]
  4050ea:	611d      	str	r5, [r3, #16]
  4050ec:	6175      	str	r5, [r6, #20]
  4050ee:	615d      	str	r5, [r3, #20]
  4050f0:	61b5      	str	r5, [r6, #24]
  4050f2:	619d      	str	r5, [r3, #24]
  4050f4:	61f5      	str	r5, [r6, #28]
  4050f6:	61dd      	str	r5, [r3, #28]
  4050f8:	6235      	str	r5, [r6, #32]
  4050fa:	621d      	str	r5, [r3, #32]
  4050fc:	6275      	str	r5, [r6, #36]	; 0x24
  4050fe:	625d      	str	r5, [r3, #36]	; 0x24
  405100:	62b5      	str	r5, [r6, #40]	; 0x28
  405102:	629d      	str	r5, [r3, #40]	; 0x28
	float harmony_shifts[MAX_NUM_SHIFTS+1]; arm_fill_f32(NO_SHIFT, harmony_shifts, MAX_NUM_SHIFTS);
  405104:	47a0      	blx	r4
	harmony_shifts[MAX_NUM_SHIFTS] = END_OF_SHIFTS;
  405106:	495e      	ldr	r1, [pc, #376]	; (405280 <main+0x32c>)
	harmony_shifts[0] = NO_SHIFT;
  405108:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
	arm_fill_f32(0.0f, prev_input, WIN_SIZE); 
  40510c:	4628      	mov	r0, r5
  40510e:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 4052c0 <main+0x36c>
			inputPitch = computeWaveletPitch((float  *)processBuffer);
  405112:	ed9f 9a5c 	vldr	s18, [pc, #368]	; 405284 <main+0x330>
	arm_fill_f32(0.0f, prev_input, WIN_SIZE); 
  405116:	f44f 7200 	mov.w	r2, #512	; 0x200
			inputPitch = computeWaveletPitch((float  *)processBuffer);
  40511a:	eddf 8a5b 	vldr	s17, [pc, #364]	; 405288 <main+0x334>
						if (pitch_shift > 0.1f && pitch_shift < 6.0f) // range check 
  40511e:	eddf 9a5b 	vldr	s19, [pc, #364]	; 40528c <main+0x338>
  405122:	4f5b      	ldr	r7, [pc, #364]	; (405290 <main+0x33c>)
  405124:	4e5b      	ldr	r6, [pc, #364]	; (405294 <main+0x340>)
  405126:	4d5c      	ldr	r5, [pc, #368]	; (405298 <main+0x344>)
	harmony_shifts[MAX_NUM_SHIFTS] = END_OF_SHIFTS;
  405128:	9111      	str	r1, [sp, #68]	; 0x44
	arm_fill_f32(0.0f, prev_input, WIN_SIZE); 
  40512a:	495c      	ldr	r1, [pc, #368]	; (40529c <main+0x348>)
	harmony_shifts[0] = NO_SHIFT;
  40512c:	9306      	str	r3, [sp, #24]
	arm_fill_f32(0.0f, prev_input, WIN_SIZE); 
  40512e:	47a0      	blx	r4
		if (dataReceived)
  405130:	4b5b      	ldr	r3, [pc, #364]	; (4052a0 <main+0x34c>)
  405132:	781b      	ldrb	r3, [r3, #0]
  405134:	2b00      	cmp	r3, #0
  405136:	d0fb      	beq.n	405130 <main+0x1dc>
			inputPitch = computeWaveletPitch((float  *)processBuffer);
  405138:	4a5a      	ldr	r2, [pc, #360]	; (4052a4 <main+0x350>)
			dataReceived = false; 
  40513a:	2300      	movs	r3, #0
			inputPitch = computeWaveletPitch((float  *)processBuffer);
  40513c:	6810      	ldr	r0, [r2, #0]
			dataReceived = false; 
  40513e:	4a58      	ldr	r2, [pc, #352]	; (4052a0 <main+0x34c>)
  405140:	7013      	strb	r3, [r2, #0]
			inputPitch = computeWaveletPitch((float  *)processBuffer);
  405142:	4b59      	ldr	r3, [pc, #356]	; (4052a8 <main+0x354>)
  405144:	4798      	blx	r3
  405146:	eeb0 7a49 	vmov.f32	s14, s18
  40514a:	eef0 7a68 	vmov.f32	s15, s17
  40514e:	ee0a 0a10 	vmov	s20, r0
	uint32_t hi = 127;
  405152:	217f      	movs	r1, #127	; 0x7f
	uint32_t lo = 12; // lowest at C0
  405154:	200c      	movs	r0, #12
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  405156:	ee37 7a4a 	vsub.f32	s14, s14, s20
		mid = (hi + lo) >> 1;
  40515a:	1843      	adds	r3, r0, r1
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  40515c:	ee77 7aca 	vsub.f32	s15, s15, s20
		mid = (hi + lo) >> 1;
  405160:	085b      	lsrs	r3, r3, #1
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  405162:	eef0 6ac7 	vabs.f32	s13, s14
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  405166:	eef0 7ae7 	vabs.f32	s15, s15
  40516a:	1c5a      	adds	r2, r3, #1
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  40516c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  405170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		if (d2 <= d1)
  405174:	ee16 4a90 	vmov	r4, s13
  405178:	ee17 ea90 	vmov	lr, s15
  40517c:	4574      	cmp	r4, lr
  40517e:	d21d      	bcs.n	4051bc <main+0x268>
  405180:	e155      	b.n	40542e <main+0x4da>
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  405182:	1c5c      	adds	r4, r3, #1
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  405184:	eb0b 0083 	add.w	r0, fp, r3, lsl #2
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  405188:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  40518c:	ed90 7a00 	vldr	s14, [r0]
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  405190:	edde 7a00 	vldr	s15, [lr]
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  405194:	ee37 7a4a 	vsub.f32	s14, s14, s20
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  405198:	ee77 7aca 	vsub.f32	s15, s15, s20
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  40519c:	eef0 6ac7 	vabs.f32	s13, s14
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  4051a0:	eef0 7ae7 	vabs.f32	s15, s15
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  4051a4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  4051a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		if (d2 <= d1)
  4051ac:	ee16 0a90 	vmov	r0, s13
  4051b0:	ee17 ea90 	vmov	lr, s15
  4051b4:	4570      	cmp	r0, lr
  4051b6:	f0c0 813b 	bcc.w	405430 <main+0x4dc>
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  4051ba:	4622      	mov	r2, r4
		mid = (hi + lo) >> 1;
  4051bc:	1853      	adds	r3, r2, r1
	while (lo < hi)
  4051be:	428a      	cmp	r2, r1
		mid = (hi + lo) >> 1;
  4051c0:	ea4f 0353 	mov.w	r3, r3, lsr #1
	while (lo < hi)
  4051c4:	d3dd      	bcc.n	405182 <main+0x22e>
  4051c6:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
  4051ca:	ed91 7a00 	vldr	s14, [r1]
  4051ce:	ee37 7a4a 	vsub.f32	s14, s14, s20
			pitch_shift = 1.0f - (inputPitch-closest_note)*oneOverInputPitch;
  4051d2:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
			arm_power_f32((float  *)processBuffer, WIN_SIZE>>2, &power);
  4051d6:	4b33      	ldr	r3, [pc, #204]	; (4052a4 <main+0x350>)
  4051d8:	aa05      	add	r2, sp, #20
  4051da:	2180      	movs	r1, #128	; 0x80
  4051dc:	6818      	ldr	r0, [r3, #0]
			pitch_shift = 1.0f - (inputPitch-closest_note)*oneOverInputPitch;
  4051de:	eef0 7a6a 	vmov.f32	s15, s21
			arm_power_f32((float  *)processBuffer, WIN_SIZE>>2, &power);
  4051e2:	4b32      	ldr	r3, [pc, #200]	; (4052ac <main+0x358>)
			pitch_shift = 1.0f - (inputPitch-closest_note)*oneOverInputPitch;
  4051e4:	eee8 7a07 	vfma.f32	s15, s16, s14
			harmony_shifts[0] = pitch_shift;
  4051e8:	edcd 7a06 	vstr	s15, [sp, #24]
			arm_power_f32((float  *)processBuffer, WIN_SIZE>>2, &power);
  4051ec:	4798      	blx	r3
			if (inputPitch > MINIMUM_PITCH && power > POWER_THRESHOLD)
  4051ee:	eddf 7a30 	vldr	s15, [pc, #192]	; 4052b0 <main+0x35c>
  4051f2:	eeb4 aae7 	vcmpe.f32	s20, s15
  4051f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4051fa:	f340 8127 	ble.w	40544c <main+0x4f8>
  4051fe:	eddf 7a2d 	vldr	s15, [pc, #180]	; 4052b4 <main+0x360>
  405202:	ed9d 7a05 	vldr	s14, [sp, #20]
  405206:	eeb4 7ae7 	vcmpe.f32	s14, s15
  40520a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40520e:	f340 811d 	ble.w	40544c <main+0x4f8>
				while(harmony_list_read[i-1] > 1.0f && i < MAX_NUM_SHIFTS)
  405212:	4b29      	ldr	r3, [pc, #164]	; (4052b8 <main+0x364>)
				oneOverInputPitch = 1.0f / inputPitch;
  405214:	ee8a 8a8a 	vdiv.f32	s16, s21, s20
				while(harmony_list_read[i-1] > 1.0f && i < MAX_NUM_SHIFTS)
  405218:	681b      	ldr	r3, [r3, #0]
  40521a:	edd3 7a00 	vldr	s15, [r3]
  40521e:	eef4 7aea 	vcmpe.f32	s15, s21
  405222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405226:	f340 8118 	ble.w	40545a <main+0x506>
  40522a:	2201      	movs	r2, #1
					if (Abs(harmony_list_read[i-1] - inputPitch) > 10.0f) // don't harmonies input pitch twice 
  40522c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
						if (pitch_shift > 0.1f && pitch_shift < 6.0f) // range check 
  405230:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
				while(harmony_list_read[i-1] > 1.0f && i < MAX_NUM_SHIFTS)
  405234:	4614      	mov	r4, r2
  405236:	e04a      	b.n	4052ce <main+0x37a>
  405238:	004022fd 	.word	0x004022fd
  40523c:	0040236d 	.word	0x0040236d
  405240:	e000ed00 	.word	0xe000ed00
  405244:	00400f59 	.word	0x00400f59
  405248:	00400379 	.word	0x00400379
  40524c:	00401119 	.word	0x00401119
  405250:	00400d81 	.word	0x00400d81
  405254:	00402e51 	.word	0x00402e51
  405258:	08f0d180 	.word	0x08f0d180
  40525c:	004021f1 	.word	0x004021f1
  405260:	40028000 	.word	0x40028000
  405264:	00402291 	.word	0x00402291
  405268:	00402299 	.word	0x00402299
  40526c:	004022a1 	.word	0x004022a1
  405270:	e000e100 	.word	0xe000e100
  405274:	20453c18 	.word	0x20453c18
  405278:	20453c44 	.word	0x20453c44
  40527c:	004054d5 	.word	0x004054d5
  405280:	bf800000 	.word	0xbf800000
  405284:	43dc0000 	.word	0x43dc0000
  405288:	43e914fe 	.word	0x43e914fe
  40528c:	bf666666 	.word	0xbf666666
  405290:	2042c000 	.word	0x2042c000
  405294:	20440000 	.word	0x20440000
  405298:	20400014 	.word	0x20400014
  40529c:	20450000 	.word	0x20450000
  4052a0:	2040401c 	.word	0x2040401c
  4052a4:	2040001c 	.word	0x2040001c
  4052a8:	004005e5 	.word	0x004005e5
  4052ac:	00405559 	.word	0x00405559
  4052b0:	42a00000 	.word	0x42a00000
  4052b4:	358637bd 	.word	0x358637bd
  4052b8:	20400044 	.word	0x20400044
  4052bc:	2043c800 	.word	0x2043c800
  4052c0:	004086fc 	.word	0x004086fc
  4052c4:	eef4 7aea 	vcmpe.f32	s15, s21
  4052c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4052cc:	dd34      	ble.n	405338 <main+0x3e4>
					if (Abs(harmony_list_read[i-1] - inputPitch) > 10.0f) // don't harmonies input pitch twice 
  4052ce:	edd3 7a00 	vldr	s15, [r3]
					i++; 
  4052d2:	3201      	adds	r2, #1
					if (Abs(harmony_list_read[i-1] - inputPitch) > 10.0f) // don't harmonies input pitch twice 
  4052d4:	ee77 7aca 	vsub.f32	s15, s15, s20
  4052d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  4052dc:	edd3 7a00 	vldr	s15, [r3]
  4052e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4052e4:	bf4c      	ite	mi
  4052e6:	ee7a 7a67 	vsubmi.f32	s15, s20, s15
  4052ea:	ee77 7aca 	vsubpl.f32	s15, s15, s20
  4052ee:	eef4 7ac7 	vcmpe.f32	s15, s14
  4052f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4052f6:	bfcc      	ite	gt
  4052f8:	2101      	movgt	r1, #1
  4052fa:	2100      	movle	r1, #0
  4052fc:	b1b9      	cbz	r1, 40532e <main+0x3da>
						pitch_shift = 1.0f - (inputPitch-harmony_list_read[i-1])*oneOverInputPitch;
  4052fe:	edd3 7a00 	vldr	s15, [r3]
							harmony_shifts[num_of_shifts++] = pitch_shift;
  405302:	a912      	add	r1, sp, #72	; 0x48
						pitch_shift = 1.0f - (inputPitch-harmony_list_read[i-1])*oneOverInputPitch;
  405304:	ee77 7aca 	vsub.f32	s15, s15, s20
							harmony_shifts[num_of_shifts++] = pitch_shift;
  405308:	eb01 0184 	add.w	r1, r1, r4, lsl #2
						pitch_shift = 1.0f - (inputPitch-harmony_list_read[i-1])*oneOverInputPitch;
  40530c:	ee67 7a88 	vmul.f32	s15, s15, s16
						if (pitch_shift > 0.1f && pitch_shift < 6.0f) // range check 
  405310:	eef4 7a69 	vcmp.f32	s15, s19
						pitch_shift = 1.0f - (inputPitch-harmony_list_read[i-1])*oneOverInputPitch;
  405314:	ee37 6aaa 	vadd.f32	s12, s15, s21
						if (pitch_shift > 0.1f && pitch_shift < 6.0f) // range check 
  405318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40531c:	dd07      	ble.n	40532e <main+0x3da>
  40531e:	eef4 7a66 	vcmp.f32	s15, s13
  405322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405326:	d502      	bpl.n	40532e <main+0x3da>
							harmony_shifts[num_of_shifts++] = pitch_shift;
  405328:	3401      	adds	r4, #1
  40532a:	ed01 6a0c 	vstr	s12, [r1, #-48]	; 0xffffffd0
				while(harmony_list_read[i-1] > 1.0f && i < MAX_NUM_SHIFTS)
  40532e:	3304      	adds	r3, #4
  405330:	2a0b      	cmp	r2, #11
  405332:	edd3 7a00 	vldr	s15, [r3]
  405336:	d1c5      	bne.n	4052c4 <main+0x370>
  405338:	4621      	mov	r1, r4
  40533a:	9402      	str	r4, [sp, #8]
				harmony_shifts[num_of_shifts] = END_OF_SHIFTS; 
  40533c:	ab12      	add	r3, sp, #72	; 0x48
  40533e:	4a49      	ldr	r2, [pc, #292]	; (405464 <main+0x510>)
  405340:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  405344:	f843 2c30 	str.w	r2, [r3, #-48]
			create_harmonies((float  *)processBuffer, mixed_buffer, inputPitch, harmony_shifts); 
  405348:	4847      	ldr	r0, [pc, #284]	; (405468 <main+0x514>)
  40534a:	ee1a 2a10 	vmov	r2, s20
  40534e:	4641      	mov	r1, r8
  405350:	4c46      	ldr	r4, [pc, #280]	; (40546c <main+0x518>)
  405352:	ab06      	add	r3, sp, #24
  405354:	6800      	ldr	r0, [r0, #0]
  405356:	47a0      	blx	r4
  405358:	4a45      	ldr	r2, [pc, #276]	; (405470 <main+0x51c>)
  40535a:	9903      	ldr	r1, [sp, #12]
  40535c:	9c02      	ldr	r4, [sp, #8]
// 			arm_scale_f32(mixed_buffer, scale, mixed_buffer, WIN_SIZE); 
			
			// put data into circ.  buffer 
			for (i = 0; i < WIN_SIZE; i++)
			{
				input_circ_buffer[circ_buf_idx++ & CIRC_MASK] = mixed_buffer[i];
  40535e:	f3c1 030d 	ubfx	r3, r1, #0, #14
  405362:	f852 0b04 	ldr.w	r0, [r2], #4
  405366:	3101      	adds	r1, #1
  405368:	eb07 0383 	add.w	r3, r7, r3, lsl #2
			for (i = 0; i < WIN_SIZE; i++)
  40536c:	4552      	cmp	r2, sl
				input_circ_buffer[circ_buf_idx++ & CIRC_MASK] = mixed_buffer[i];
  40536e:	6018      	str	r0, [r3, #0]
			for (i = 0; i < WIN_SIZE; i++)
  405370:	d1f5      	bne.n	40535e <main+0x40a>
			}
			
			// only add reverb when we have harmonies 
			uint32_t curr_idx; 
			if (num_of_shifts > 0) // ought to be 1 but whateves... sounds nice with some verb 
  405372:	b1dc      	cbz	r4, 4053ac <main+0x458>
  405374:	9b03      	ldr	r3, [sp, #12]
				uint32_t delay = 2100; 
				float g = 0.5f; 
				curr_idx = circ_buf_idx - (uint32_t)WIN_SIZE;
				for (i = 0; i < WIN_SIZE; i++)
				{
					mixed_buffer[i] = -g * mixed_buffer[i] + input_circ_buffer[(curr_idx - delay)  & CIRC_MASK] + g * output_circ_buffer[(curr_idx-delay)  & CIRC_MASK];
  405376:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
  40537a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
			if (num_of_shifts > 0) // ought to be 1 but whateves... sounds nice with some verb 
  40537e:	493c      	ldr	r1, [pc, #240]	; (405470 <main+0x51c>)
  405380:	f6a3 0034 	subw	r0, r3, #2100	; 0x834
					mixed_buffer[i] = -g * mixed_buffer[i] + input_circ_buffer[(curr_idx - delay)  & CIRC_MASK] + g * output_circ_buffer[(curr_idx-delay)  & CIRC_MASK];
  405384:	f3c0 030d 	ubfx	r3, r0, #0, #14
  405388:	edd1 6a00 	vldr	s13, [r1]
  40538c:	3001      	adds	r0, #1
  40538e:	009b      	lsls	r3, r3, #2
  405390:	18fc      	adds	r4, r7, r3
  405392:	4433      	add	r3, r6
  405394:	edd4 7a00 	vldr	s15, [r4]
  405398:	ed93 7a00 	vldr	s14, [r3]
  40539c:	eee6 7aa5 	vfma.f32	s15, s13, s11
  4053a0:	eee7 7a06 	vfma.f32	s15, s14, s12
  4053a4:	ece1 7a01 	vstmia	r1!, {s15}
				for (i = 0; i < WIN_SIZE; i++)
  4053a8:	4291      	cmp	r1, r2
  4053aa:	d1eb      	bne.n	405384 <main+0x430>
  4053ac:	4b30      	ldr	r3, [pc, #192]	; (405470 <main+0x51c>)
  4053ae:	9903      	ldr	r1, [sp, #12]
  4053b0:	461c      	mov	r4, r3
			}
			
			curr_idx = circ_buf_idx - (uint32_t)WIN_SIZE; 
			for (i = 0; i < WIN_SIZE; i++)
			{
				output_circ_buffer[curr_idx++ & CIRC_MASK] = mixed_buffer[i]; 
  4053b2:	f3c1 030d 	ubfx	r3, r1, #0, #14
  4053b6:	f854 0b04 	ldr.w	r0, [r4], #4
  4053ba:	3101      	adds	r1, #1
  4053bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
			for (i = 0; i < WIN_SIZE; i++)
  4053c0:	4294      	cmp	r4, r2
				output_circ_buffer[curr_idx++ & CIRC_MASK] = mixed_buffer[i]; 
  4053c2:	6018      	str	r0, [r3, #0]
			for (i = 0; i < WIN_SIZE; i++)
  4053c4:	d1f5      	bne.n	4053b2 <main+0x45e>
  4053c6:	9402      	str	r4, [sp, #8]
// 				arm_add_f32(prev_input, mixed_buffer, mixed_buffer, WIN_SIZE);
// 				arm_scale_f32(mixed_buffer, (float)INT16_MAX * 0.75f, mixed_buffer, WIN_SIZE);
// 			}
			
			// scale output 
			arm_scale_f32(mixed_buffer, (float)INT16_MAX, mixed_buffer, WIN_SIZE);
  4053c8:	f44f 7300 	mov.w	r3, #512	; 0x200
  4053cc:	4642      	mov	r2, r8
  4053ce:	4929      	ldr	r1, [pc, #164]	; (405474 <main+0x520>)
  4053d0:	4827      	ldr	r0, [pc, #156]	; (405470 <main+0x51c>)
  4053d2:	4c29      	ldr	r4, [pc, #164]	; (405478 <main+0x524>)
  4053d4:	47a0      	blx	r4
			
			// save current audio 
			arm_copy_f32((float *)processBuffer, prev_input, WIN_SIZE); 
  4053d6:	4b24      	ldr	r3, [pc, #144]	; (405468 <main+0x514>)
  4053d8:	f44f 7200 	mov.w	r2, #512	; 0x200
  4053dc:	4927      	ldr	r1, [pc, #156]	; (40547c <main+0x528>)
  4053de:	6818      	ldr	r0, [r3, #0]
  4053e0:	4b27      	ldr	r3, [pc, #156]	; (405480 <main+0x52c>)
  4053e2:	4798      	blx	r3
  4053e4:	4b22      	ldr	r3, [pc, #136]	; (405470 <main+0x51c>)
  4053e6:	9c02      	ldr	r4, [sp, #8]
  4053e8:	eba3 0c08 	sub.w	ip, r3, r8
			
			// audio out 
			uint32_t idx = 0; 
			for(i = 0; i < IO_BUF_SIZE; i+=2)
			{
				outBuffer[i] = (uint16_t)(int16_t)(mixed_buffer[idx++]);  
  4053ec:	ecf3 7a01 	vldmia	r3!, {s15}
  4053f0:	682a      	ldr	r2, [r5, #0]
  4053f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
				outBuffer[i+1] = outBuffer[i]; 
  4053f6:	eb09 0003 	add.w	r0, r9, r3
  4053fa:	4611      	mov	r1, r2
			for(i = 0; i < IO_BUF_SIZE; i+=2)
  4053fc:	429c      	cmp	r4, r3
				outBuffer[i] = (uint16_t)(int16_t)(mixed_buffer[idx++]);  
  4053fe:	edcd 7a02 	vstr	s15, [sp, #8]
  405402:	f8bd e008 	ldrh.w	lr, [sp, #8]
  405406:	f822 e00c 	strh.w	lr, [r2, ip]
				outBuffer[i+1] = outBuffer[i]; 
  40540a:	f832 200c 	ldrh.w	r2, [r2, ip]
  40540e:	b292      	uxth	r2, r2
  405410:	520a      	strh	r2, [r1, r0]
			for(i = 0; i < IO_BUF_SIZE; i+=2)
  405412:	d1e9      	bne.n	4053e8 <main+0x494>
  405414:	9a03      	ldr	r2, [sp, #12]
			}
			
			// check if we're too slow 
			if (dataReceived)
  405416:	4b1b      	ldr	r3, [pc, #108]	; (405484 <main+0x530>)
  405418:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40541c:	781b      	ldrb	r3, [r3, #0]
  40541e:	9203      	str	r2, [sp, #12]
  405420:	f003 02ff 	and.w	r2, r3, #255	; 0xff
  405424:	b913      	cbnz	r3, 40542c <main+0x4d8>
				{
					// taking too long ... never 
				}
			}
			else 
				dataReceived = false; 
  405426:	4b17      	ldr	r3, [pc, #92]	; (405484 <main+0x530>)
  405428:	701a      	strb	r2, [r3, #0]
  40542a:	e681      	b.n	405130 <main+0x1dc>
  40542c:	e7fe      	b.n	40542c <main+0x4d8>
		if (d2 <= d1)
  40542e:	4602      	mov	r2, r0
	while (lo < hi)
  405430:	4293      	cmp	r3, r2
  405432:	f67f aece 	bls.w	4051d2 <main+0x27e>
  405436:	189c      	adds	r4, r3, r2
  405438:	4619      	mov	r1, r3
  40543a:	4610      	mov	r0, r2
  40543c:	0863      	lsrs	r3, r4, #1
  40543e:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
  405442:	edd2 7a01 	vldr	s15, [r2, #4]
  405446:	ed92 7a00 	vldr	s14, [r2]
  40544a:	e684      	b.n	405156 <main+0x202>
				harmony_shifts[1] = END_OF_SHIFTS; 	
  40544c:	4b05      	ldr	r3, [pc, #20]	; (405464 <main+0x510>)
				num_of_shifts = 1; 
  40544e:	2201      	movs	r2, #1
				inputPitch = MINIMUM_PITCH; 
  405450:	ed9f aa0d 	vldr	s20, [pc, #52]	; 405488 <main+0x534>
				num_of_shifts = 1; 
  405454:	9202      	str	r2, [sp, #8]
				harmony_shifts[1] = END_OF_SHIFTS; 	
  405456:	9307      	str	r3, [sp, #28]
  405458:	e776      	b.n	405348 <main+0x3f4>
			num_of_shifts = 1;  
  40545a:	2301      	movs	r3, #1
  40545c:	9302      	str	r3, [sp, #8]
  40545e:	4619      	mov	r1, r3
  405460:	e76c      	b.n	40533c <main+0x3e8>
  405462:	bf00      	nop
  405464:	bf800000 	.word	0xbf800000
  405468:	2040001c 	.word	0x2040001c
  40546c:	00401181 	.word	0x00401181
  405470:	2043c000 	.word	0x2043c000
  405474:	46fffe00 	.word	0x46fffe00
  405478:	00405805 	.word	0x00405805
  40547c:	20450000 	.word	0x20450000
  405480:	00405505 	.word	0x00405505
  405484:	2040401c 	.word	0x2040401c
  405488:	42a00000 	.word	0x42a00000

0040548c <vApplicationStackOverflowHook>:
  40548c:	f04f 0380 	mov.w	r3, #128	; 0x80
  405490:	b672      	cpsid	i
  405492:	f383 8811 	msr	BASEPRI, r3
  405496:	f3bf 8f6f 	isb	sy
  40549a:	f3bf 8f4f 	dsb	sy
  40549e:	b662      	cpsie	i
  4054a0:	e7fe      	b.n	4054a0 <vApplicationStackOverflowHook+0x14>
  4054a2:	bf00      	nop

004054a4 <vApplicationTickHook>:
	( void ) xFreeHeapSpace;
}
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
  4054a4:	b510      	push	{r4, lr}
	#if mainCREATE_SIMPLE_BLINKY_DEMO_ONLY == 0
	{
		/* The full demo includes a software timer demo/test that requires
		prodding periodically from the tick interrupt. */
		vTimerPeriodicISRTests();
  4054a6:	4b06      	ldr	r3, [pc, #24]	; (4054c0 <vApplicationTickHook+0x1c>)
  4054a8:	4798      	blx	r3

		/* Call the periodic queue overwrite from ISR demo. */
		vQueueOverwritePeriodicISRDemo();
  4054aa:	4b06      	ldr	r3, [pc, #24]	; (4054c4 <vApplicationTickHook+0x20>)
  4054ac:	4798      	blx	r3

		/* Call the periodic event group from ISR demo. */
		vPeriodicEventGroupsProcessing();
  4054ae:	4b06      	ldr	r3, [pc, #24]	; (4054c8 <vApplicationTickHook+0x24>)
  4054b0:	4798      	blx	r3

		/* Call the code that uses a mutex from an ISR. */
		vInterruptSemaphorePeriodicTest();
  4054b2:	4b06      	ldr	r3, [pc, #24]	; (4054cc <vApplicationTickHook+0x28>)
  4054b4:	4798      	blx	r3

		/* Call the code that 'gives' a task notification from an ISR. */
		xNotifyTaskFromISR();
  4054b6:	4b06      	ldr	r3, [pc, #24]	; (4054d0 <vApplicationTickHook+0x2c>)
	}
	#endif
}
  4054b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		xNotifyTaskFromISR();
  4054bc:	4718      	bx	r3
  4054be:	bf00      	nop
  4054c0:	004048e5 	.word	0x004048e5
  4054c4:	00404795 	.word	0x00404795
  4054c8:	00404669 	.word	0x00404669
  4054cc:	00404701 	.word	0x00404701
  4054d0:	00404835 	.word	0x00404835

004054d4 <arm_fill_f32>:
  4054d4:	b430      	push	{r4, r5}
  4054d6:	0895      	lsrs	r5, r2, #2
  4054d8:	d00b      	beq.n	4054f2 <arm_fill_f32+0x1e>
  4054da:	460b      	mov	r3, r1
  4054dc:	462c      	mov	r4, r5
  4054de:	3c01      	subs	r4, #1
  4054e0:	6018      	str	r0, [r3, #0]
  4054e2:	6058      	str	r0, [r3, #4]
  4054e4:	6098      	str	r0, [r3, #8]
  4054e6:	60d8      	str	r0, [r3, #12]
  4054e8:	f103 0310 	add.w	r3, r3, #16
  4054ec:	d1f7      	bne.n	4054de <arm_fill_f32+0xa>
  4054ee:	eb01 1105 	add.w	r1, r1, r5, lsl #4
  4054f2:	f012 0203 	ands.w	r2, r2, #3
  4054f6:	d003      	beq.n	405500 <arm_fill_f32+0x2c>
  4054f8:	3a01      	subs	r2, #1
  4054fa:	f841 0b04 	str.w	r0, [r1], #4
  4054fe:	d1fb      	bne.n	4054f8 <arm_fill_f32+0x24>
  405500:	bc30      	pop	{r4, r5}
  405502:	4770      	bx	lr

00405504 <arm_copy_f32>:
  405504:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  405508:	ea5f 0992 	movs.w	r9, r2, lsr #2
  40550c:	d018      	beq.n	405540 <arm_copy_f32+0x3c>
  40550e:	4604      	mov	r4, r0
  405510:	460b      	mov	r3, r1
  405512:	464d      	mov	r5, r9
  405514:	f8d4 8000 	ldr.w	r8, [r4]
  405518:	f8d4 c004 	ldr.w	ip, [r4, #4]
  40551c:	68a7      	ldr	r7, [r4, #8]
  40551e:	68e6      	ldr	r6, [r4, #12]
  405520:	3d01      	subs	r5, #1
  405522:	f8c3 8000 	str.w	r8, [r3]
  405526:	f8c3 c004 	str.w	ip, [r3, #4]
  40552a:	609f      	str	r7, [r3, #8]
  40552c:	60de      	str	r6, [r3, #12]
  40552e:	f104 0410 	add.w	r4, r4, #16
  405532:	f103 0310 	add.w	r3, r3, #16
  405536:	d1ed      	bne.n	405514 <arm_copy_f32+0x10>
  405538:	ea4f 1909 	mov.w	r9, r9, lsl #4
  40553c:	4448      	add	r0, r9
  40553e:	4449      	add	r1, r9
  405540:	f012 0203 	ands.w	r2, r2, #3
  405544:	d005      	beq.n	405552 <arm_copy_f32+0x4e>
  405546:	f850 3b04 	ldr.w	r3, [r0], #4
  40554a:	3a01      	subs	r2, #1
  40554c:	f841 3b04 	str.w	r3, [r1], #4
  405550:	d1f9      	bne.n	405546 <arm_copy_f32+0x42>
  405552:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
  405556:	4770      	bx	lr

00405558 <arm_power_f32>:
  405558:	b430      	push	{r4, r5}
  40555a:	088d      	lsrs	r5, r1, #2
  40555c:	eddf 7a18 	vldr	s15, [pc, #96]	; 4055c0 <arm_power_f32+0x68>
  405560:	d01f      	beq.n	4055a2 <arm_power_f32+0x4a>
  405562:	4603      	mov	r3, r0
  405564:	462c      	mov	r4, r5
  405566:	edd3 6a00 	vldr	s13, [r3]
  40556a:	ed93 7a01 	vldr	s14, [r3, #4]
  40556e:	ee66 6aa6 	vmul.f32	s13, s13, s13
  405572:	ee27 6a07 	vmul.f32	s12, s14, s14
  405576:	ee76 7aa7 	vadd.f32	s15, s13, s15
  40557a:	ed93 7a02 	vldr	s14, [r3, #8]
  40557e:	ee76 7a27 	vadd.f32	s15, s12, s15
  405582:	ee67 6a07 	vmul.f32	s13, s14, s14
  405586:	ed93 7a03 	vldr	s14, [r3, #12]
  40558a:	ee76 6aa7 	vadd.f32	s13, s13, s15
  40558e:	ee27 7a07 	vmul.f32	s14, s14, s14
  405592:	3c01      	subs	r4, #1
  405594:	f103 0310 	add.w	r3, r3, #16
  405598:	ee77 7a26 	vadd.f32	s15, s14, s13
  40559c:	d1e3      	bne.n	405566 <arm_power_f32+0xe>
  40559e:	eb00 1005 	add.w	r0, r0, r5, lsl #4
  4055a2:	f011 0103 	ands.w	r1, r1, #3
  4055a6:	d007      	beq.n	4055b8 <arm_power_f32+0x60>
  4055a8:	ecb0 7a01 	vldmia	r0!, {s14}
  4055ac:	ee27 7a07 	vmul.f32	s14, s14, s14
  4055b0:	3901      	subs	r1, #1
  4055b2:	ee77 7a87 	vadd.f32	s15, s15, s14
  4055b6:	d1f7      	bne.n	4055a8 <arm_power_f32+0x50>
  4055b8:	edc2 7a00 	vstr	s15, [r2]
  4055bc:	bc30      	pop	{r4, r5}
  4055be:	4770      	bx	lr
  4055c0:	00000000 	.word	0x00000000

004055c4 <arm_min_f32>:
  4055c4:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  4055c8:	f101 3cff 	add.w	ip, r1, #4294967295
  4055cc:	ea5f 099c 	movs.w	r9, ip, lsr #2
  4055d0:	f100 0704 	add.w	r7, r0, #4
  4055d4:	edd0 7a00 	vldr	s15, [r0]
  4055d8:	d05c      	beq.n	405694 <arm_min_f32+0xd0>
  4055da:	463c      	mov	r4, r7
  4055dc:	464e      	mov	r6, r9
  4055de:	2004      	movs	r0, #4
  4055e0:	2500      	movs	r5, #0
  4055e2:	edd4 6a00 	vldr	s13, [r4]
  4055e6:	eef4 6ae7 	vcmpe.f32	s13, s15
  4055ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4055ee:	ed94 7a01 	vldr	s14, [r4, #4]
  4055f2:	bf48      	it	mi
  4055f4:	eef0 7a66 	vmovmi.f32	s15, s13
  4055f8:	eef4 7ac7 	vcmpe.f32	s15, s14
  4055fc:	f1a0 0803 	sub.w	r8, r0, #3
  405600:	bf48      	it	mi
  405602:	4645      	movmi	r5, r8
  405604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405608:	edd4 6a02 	vldr	s13, [r4, #8]
  40560c:	bfc8      	it	gt
  40560e:	eef0 7a47 	vmovgt.f32	s15, s14
  405612:	eef4 7ae6 	vcmpe.f32	s15, s13
  405616:	f1a0 0802 	sub.w	r8, r0, #2
  40561a:	bfc8      	it	gt
  40561c:	4645      	movgt	r5, r8
  40561e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405622:	ed94 7a03 	vldr	s14, [r4, #12]
  405626:	bfc8      	it	gt
  405628:	eef0 7a66 	vmovgt.f32	s15, s13
  40562c:	eef4 7ac7 	vcmpe.f32	s15, s14
  405630:	f100 38ff 	add.w	r8, r0, #4294967295
  405634:	bfc8      	it	gt
  405636:	4645      	movgt	r5, r8
  405638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40563c:	bfc8      	it	gt
  40563e:	4605      	movgt	r5, r0
  405640:	bfc8      	it	gt
  405642:	eef0 7a47 	vmovgt.f32	s15, s14
  405646:	3e01      	subs	r6, #1
  405648:	f104 0410 	add.w	r4, r4, #16
  40564c:	f100 0004 	add.w	r0, r0, #4
  405650:	d1c7      	bne.n	4055e2 <arm_min_f32+0x1e>
  405652:	eb07 1709 	add.w	r7, r7, r9, lsl #4
  405656:	f01c 0c03 	ands.w	ip, ip, #3
  40565a:	d01d      	beq.n	405698 <arm_min_f32+0xd4>
  40565c:	ebcc 0101 	rsb	r1, ip, r1
  405660:	2000      	movs	r0, #0
  405662:	ecb7 7a01 	vldmia	r7!, {s14}
  405666:	eeb4 7ae7 	vcmpe.f32	s14, s15
  40566a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40566e:	bf48      	it	mi
  405670:	eef0 7a47 	vmovmi.f32	s15, s14
  405674:	eb01 0400 	add.w	r4, r1, r0
  405678:	f100 0001 	add.w	r0, r0, #1
  40567c:	bf48      	it	mi
  40567e:	4625      	movmi	r5, r4
  405680:	4560      	cmp	r0, ip
  405682:	eeb0 7a67 	vmov.f32	s14, s15
  405686:	d1ec      	bne.n	405662 <arm_min_f32+0x9e>
  405688:	ed82 7a00 	vstr	s14, [r2]
  40568c:	601d      	str	r5, [r3, #0]
  40568e:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
  405692:	4770      	bx	lr
  405694:	464d      	mov	r5, r9
  405696:	e7de      	b.n	405656 <arm_min_f32+0x92>
  405698:	eeb0 7a67 	vmov.f32	s14, s15
  40569c:	e7f4      	b.n	405688 <arm_min_f32+0xc4>
  40569e:	bf00      	nop

004056a0 <arm_max_f32>:
  4056a0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  4056a4:	f101 3cff 	add.w	ip, r1, #4294967295
  4056a8:	ea5f 099c 	movs.w	r9, ip, lsr #2
  4056ac:	f100 0704 	add.w	r7, r0, #4
  4056b0:	edd0 7a00 	vldr	s15, [r0]
  4056b4:	d05c      	beq.n	405770 <arm_max_f32+0xd0>
  4056b6:	463c      	mov	r4, r7
  4056b8:	464e      	mov	r6, r9
  4056ba:	2004      	movs	r0, #4
  4056bc:	2500      	movs	r5, #0
  4056be:	edd4 6a00 	vldr	s13, [r4]
  4056c2:	eef4 6ae7 	vcmpe.f32	s13, s15
  4056c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4056ca:	ed94 7a01 	vldr	s14, [r4, #4]
  4056ce:	bfc8      	it	gt
  4056d0:	eef0 7a66 	vmovgt.f32	s15, s13
  4056d4:	eef4 7ac7 	vcmpe.f32	s15, s14
  4056d8:	f1a0 0803 	sub.w	r8, r0, #3
  4056dc:	bfc8      	it	gt
  4056de:	4645      	movgt	r5, r8
  4056e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4056e4:	edd4 6a02 	vldr	s13, [r4, #8]
  4056e8:	bf48      	it	mi
  4056ea:	eef0 7a47 	vmovmi.f32	s15, s14
  4056ee:	eef4 7ae6 	vcmpe.f32	s15, s13
  4056f2:	f1a0 0802 	sub.w	r8, r0, #2
  4056f6:	bf48      	it	mi
  4056f8:	4645      	movmi	r5, r8
  4056fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4056fe:	ed94 7a03 	vldr	s14, [r4, #12]
  405702:	bf48      	it	mi
  405704:	eef0 7a66 	vmovmi.f32	s15, s13
  405708:	eef4 7ac7 	vcmpe.f32	s15, s14
  40570c:	f100 38ff 	add.w	r8, r0, #4294967295
  405710:	bf48      	it	mi
  405712:	4645      	movmi	r5, r8
  405714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405718:	bf48      	it	mi
  40571a:	4605      	movmi	r5, r0
  40571c:	bf48      	it	mi
  40571e:	eef0 7a47 	vmovmi.f32	s15, s14
  405722:	3e01      	subs	r6, #1
  405724:	f104 0410 	add.w	r4, r4, #16
  405728:	f100 0004 	add.w	r0, r0, #4
  40572c:	d1c7      	bne.n	4056be <arm_max_f32+0x1e>
  40572e:	eb07 1709 	add.w	r7, r7, r9, lsl #4
  405732:	f01c 0c03 	ands.w	ip, ip, #3
  405736:	d01d      	beq.n	405774 <arm_max_f32+0xd4>
  405738:	ebcc 0101 	rsb	r1, ip, r1
  40573c:	2000      	movs	r0, #0
  40573e:	ecb7 7a01 	vldmia	r7!, {s14}
  405742:	eeb4 7ae7 	vcmpe.f32	s14, s15
  405746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40574a:	bfc8      	it	gt
  40574c:	eef0 7a47 	vmovgt.f32	s15, s14
  405750:	eb01 0400 	add.w	r4, r1, r0
  405754:	f100 0001 	add.w	r0, r0, #1
  405758:	bfc8      	it	gt
  40575a:	4625      	movgt	r5, r4
  40575c:	4560      	cmp	r0, ip
  40575e:	eeb0 7a67 	vmov.f32	s14, s15
  405762:	d1ec      	bne.n	40573e <arm_max_f32+0x9e>
  405764:	ed82 7a00 	vstr	s14, [r2]
  405768:	601d      	str	r5, [r3, #0]
  40576a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
  40576e:	4770      	bx	lr
  405770:	464d      	mov	r5, r9
  405772:	e7de      	b.n	405732 <arm_max_f32+0x92>
  405774:	eeb0 7a67 	vmov.f32	s14, s15
  405778:	e7f4      	b.n	405764 <arm_max_f32+0xc4>
  40577a:	bf00      	nop

0040577c <arm_cos_f32>:
  40577c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 4057f8 <arm_cos_f32+0x7c>
  405780:	ee06 0a90 	vmov	s13, r0
  405784:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
  405788:	ee66 7aa7 	vmul.f32	s15, s13, s15
  40578c:	ee77 7a87 	vadd.f32	s15, s15, s14
  405790:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  405794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405798:	eebd 7ae7 	vcvt.s32.f32	s14, s15
  40579c:	d504      	bpl.n	4057a8 <arm_cos_f32+0x2c>
  40579e:	ee17 3a10 	vmov	r3, s14
  4057a2:	3b01      	subs	r3, #1
  4057a4:	ee07 3a10 	vmov	s14, r3
  4057a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  4057ac:	eddf 6a13 	vldr	s13, [pc, #76]	; 4057fc <arm_cos_f32+0x80>
  4057b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
  4057b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
  4057b8:	eefc 6ae7 	vcvt.u32.f32	s13, s15
  4057bc:	ee16 3a90 	vmov	r3, s13
  4057c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4057c4:	ee07 3a10 	vmov	s14, r3
  4057c8:	eef8 6a47 	vcvt.f32.u32	s13, s14
  4057cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  4057d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
  4057d4:	4a0a      	ldr	r2, [pc, #40]	; (405800 <arm_cos_f32+0x84>)
  4057d6:	ee37 7a67 	vsub.f32	s14, s14, s15
  4057da:	eb02 0183 	add.w	r1, r2, r3, lsl #2
  4057de:	ed91 6a00 	vldr	s12, [r1]
  4057e2:	edd1 6a01 	vldr	s13, [r1, #4]
  4057e6:	ee27 7a06 	vmul.f32	s14, s14, s12
  4057ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
  4057ee:	ee77 7a27 	vadd.f32	s15, s14, s15
  4057f2:	ee17 0a90 	vmov	r0, s15
  4057f6:	4770      	bx	lr
  4057f8:	3e22f983 	.word	0x3e22f983
  4057fc:	44000000 	.word	0x44000000
  405800:	004088fc 	.word	0x004088fc

00405804 <arm_scale_f32>:
  405804:	b470      	push	{r4, r5, r6}
  405806:	089e      	lsrs	r6, r3, #2
  405808:	ee07 1a90 	vmov	s15, r1
  40580c:	d023      	beq.n	405856 <arm_scale_f32+0x52>
  40580e:	4635      	mov	r5, r6
  405810:	4614      	mov	r4, r2
  405812:	4601      	mov	r1, r0
  405814:	edd1 5a00 	vldr	s11, [r1]
  405818:	ed91 6a01 	vldr	s12, [r1, #4]
  40581c:	edd1 6a02 	vldr	s13, [r1, #8]
  405820:	ed91 7a03 	vldr	s14, [r1, #12]
  405824:	ee65 5aa7 	vmul.f32	s11, s11, s15
  405828:	ee26 6a27 	vmul.f32	s12, s12, s15
  40582c:	ee66 6aa7 	vmul.f32	s13, s13, s15
  405830:	ee27 7a27 	vmul.f32	s14, s14, s15
  405834:	3d01      	subs	r5, #1
  405836:	edc4 5a00 	vstr	s11, [r4]
  40583a:	ed84 6a01 	vstr	s12, [r4, #4]
  40583e:	edc4 6a02 	vstr	s13, [r4, #8]
  405842:	ed84 7a03 	vstr	s14, [r4, #12]
  405846:	f101 0110 	add.w	r1, r1, #16
  40584a:	f104 0410 	add.w	r4, r4, #16
  40584e:	d1e1      	bne.n	405814 <arm_scale_f32+0x10>
  405850:	0136      	lsls	r6, r6, #4
  405852:	4430      	add	r0, r6
  405854:	4432      	add	r2, r6
  405856:	f013 0303 	ands.w	r3, r3, #3
  40585a:	d007      	beq.n	40586c <arm_scale_f32+0x68>
  40585c:	ecb0 7a01 	vldmia	r0!, {s14}
  405860:	ee27 7a27 	vmul.f32	s14, s14, s15
  405864:	3b01      	subs	r3, #1
  405866:	eca2 7a01 	vstmia	r2!, {s14}
  40586a:	d1f7      	bne.n	40585c <arm_scale_f32+0x58>
  40586c:	bc70      	pop	{r4, r5, r6}
  40586e:	4770      	bx	lr

00405870 <__libc_init_array>:
  405870:	b570      	push	{r4, r5, r6, lr}
  405872:	4e0f      	ldr	r6, [pc, #60]	; (4058b0 <__libc_init_array+0x40>)
  405874:	4d0f      	ldr	r5, [pc, #60]	; (4058b4 <__libc_init_array+0x44>)
  405876:	1b76      	subs	r6, r6, r5
  405878:	10b6      	asrs	r6, r6, #2
  40587a:	bf18      	it	ne
  40587c:	2400      	movne	r4, #0
  40587e:	d005      	beq.n	40588c <__libc_init_array+0x1c>
  405880:	3401      	adds	r4, #1
  405882:	f855 3b04 	ldr.w	r3, [r5], #4
  405886:	4798      	blx	r3
  405888:	42a6      	cmp	r6, r4
  40588a:	d1f9      	bne.n	405880 <__libc_init_array+0x10>
  40588c:	4e0a      	ldr	r6, [pc, #40]	; (4058b8 <__libc_init_array+0x48>)
  40588e:	4d0b      	ldr	r5, [pc, #44]	; (4058bc <__libc_init_array+0x4c>)
  405890:	1b76      	subs	r6, r6, r5
  405892:	f003 fce9 	bl	409268 <_init>
  405896:	10b6      	asrs	r6, r6, #2
  405898:	bf18      	it	ne
  40589a:	2400      	movne	r4, #0
  40589c:	d006      	beq.n	4058ac <__libc_init_array+0x3c>
  40589e:	3401      	adds	r4, #1
  4058a0:	f855 3b04 	ldr.w	r3, [r5], #4
  4058a4:	4798      	blx	r3
  4058a6:	42a6      	cmp	r6, r4
  4058a8:	d1f9      	bne.n	40589e <__libc_init_array+0x2e>
  4058aa:	bd70      	pop	{r4, r5, r6, pc}
  4058ac:	bd70      	pop	{r4, r5, r6, pc}
  4058ae:	bf00      	nop
  4058b0:	00409274 	.word	0x00409274
  4058b4:	00409274 	.word	0x00409274
  4058b8:	0040927c 	.word	0x0040927c
  4058bc:	00409274 	.word	0x00409274

004058c0 <iprintf>:
  4058c0:	b40f      	push	{r0, r1, r2, r3}
  4058c2:	b500      	push	{lr}
  4058c4:	4907      	ldr	r1, [pc, #28]	; (4058e4 <iprintf+0x24>)
  4058c6:	b083      	sub	sp, #12
  4058c8:	ab04      	add	r3, sp, #16
  4058ca:	6808      	ldr	r0, [r1, #0]
  4058cc:	f853 2b04 	ldr.w	r2, [r3], #4
  4058d0:	6881      	ldr	r1, [r0, #8]
  4058d2:	9301      	str	r3, [sp, #4]
  4058d4:	f000 fc82 	bl	4061dc <_vfiprintf_r>
  4058d8:	b003      	add	sp, #12
  4058da:	f85d eb04 	ldr.w	lr, [sp], #4
  4058de:	b004      	add	sp, #16
  4058e0:	4770      	bx	lr
  4058e2:	bf00      	nop
  4058e4:	20400048 	.word	0x20400048

004058e8 <malloc>:
  4058e8:	4b02      	ldr	r3, [pc, #8]	; (4058f4 <malloc+0xc>)
  4058ea:	4601      	mov	r1, r0
  4058ec:	6818      	ldr	r0, [r3, #0]
  4058ee:	f000 b803 	b.w	4058f8 <_malloc_r>
  4058f2:	bf00      	nop
  4058f4:	20400048 	.word	0x20400048

004058f8 <_malloc_r>:
  4058f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4058fc:	f101 060b 	add.w	r6, r1, #11
  405900:	2e16      	cmp	r6, #22
  405902:	b083      	sub	sp, #12
  405904:	4605      	mov	r5, r0
  405906:	f240 809e 	bls.w	405a46 <_malloc_r+0x14e>
  40590a:	f036 0607 	bics.w	r6, r6, #7
  40590e:	f100 80bd 	bmi.w	405a8c <_malloc_r+0x194>
  405912:	42b1      	cmp	r1, r6
  405914:	f200 80ba 	bhi.w	405a8c <_malloc_r+0x194>
  405918:	f000 fb86 	bl	406028 <__malloc_lock>
  40591c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  405920:	f0c0 8293 	bcc.w	405e4a <_malloc_r+0x552>
  405924:	0a73      	lsrs	r3, r6, #9
  405926:	f000 80b8 	beq.w	405a9a <_malloc_r+0x1a2>
  40592a:	2b04      	cmp	r3, #4
  40592c:	f200 8179 	bhi.w	405c22 <_malloc_r+0x32a>
  405930:	09b3      	lsrs	r3, r6, #6
  405932:	f103 0039 	add.w	r0, r3, #57	; 0x39
  405936:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40593a:	00c3      	lsls	r3, r0, #3
  40593c:	4fbf      	ldr	r7, [pc, #764]	; (405c3c <_malloc_r+0x344>)
  40593e:	443b      	add	r3, r7
  405940:	f1a3 0108 	sub.w	r1, r3, #8
  405944:	685c      	ldr	r4, [r3, #4]
  405946:	42a1      	cmp	r1, r4
  405948:	d106      	bne.n	405958 <_malloc_r+0x60>
  40594a:	e00c      	b.n	405966 <_malloc_r+0x6e>
  40594c:	2a00      	cmp	r2, #0
  40594e:	f280 80aa 	bge.w	405aa6 <_malloc_r+0x1ae>
  405952:	68e4      	ldr	r4, [r4, #12]
  405954:	42a1      	cmp	r1, r4
  405956:	d006      	beq.n	405966 <_malloc_r+0x6e>
  405958:	6863      	ldr	r3, [r4, #4]
  40595a:	f023 0303 	bic.w	r3, r3, #3
  40595e:	1b9a      	subs	r2, r3, r6
  405960:	2a0f      	cmp	r2, #15
  405962:	ddf3      	ble.n	40594c <_malloc_r+0x54>
  405964:	4670      	mov	r0, lr
  405966:	693c      	ldr	r4, [r7, #16]
  405968:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 405c50 <_malloc_r+0x358>
  40596c:	4574      	cmp	r4, lr
  40596e:	f000 81ab 	beq.w	405cc8 <_malloc_r+0x3d0>
  405972:	6863      	ldr	r3, [r4, #4]
  405974:	f023 0303 	bic.w	r3, r3, #3
  405978:	1b9a      	subs	r2, r3, r6
  40597a:	2a0f      	cmp	r2, #15
  40597c:	f300 8190 	bgt.w	405ca0 <_malloc_r+0x3a8>
  405980:	2a00      	cmp	r2, #0
  405982:	f8c7 e014 	str.w	lr, [r7, #20]
  405986:	f8c7 e010 	str.w	lr, [r7, #16]
  40598a:	f280 809d 	bge.w	405ac8 <_malloc_r+0x1d0>
  40598e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405992:	f080 8161 	bcs.w	405c58 <_malloc_r+0x360>
  405996:	08db      	lsrs	r3, r3, #3
  405998:	f103 0c01 	add.w	ip, r3, #1
  40599c:	1099      	asrs	r1, r3, #2
  40599e:	687a      	ldr	r2, [r7, #4]
  4059a0:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4059a4:	f8c4 8008 	str.w	r8, [r4, #8]
  4059a8:	2301      	movs	r3, #1
  4059aa:	408b      	lsls	r3, r1
  4059ac:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4059b0:	4313      	orrs	r3, r2
  4059b2:	3908      	subs	r1, #8
  4059b4:	60e1      	str	r1, [r4, #12]
  4059b6:	607b      	str	r3, [r7, #4]
  4059b8:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4059bc:	f8c8 400c 	str.w	r4, [r8, #12]
  4059c0:	1082      	asrs	r2, r0, #2
  4059c2:	2401      	movs	r4, #1
  4059c4:	4094      	lsls	r4, r2
  4059c6:	429c      	cmp	r4, r3
  4059c8:	f200 808b 	bhi.w	405ae2 <_malloc_r+0x1ea>
  4059cc:	421c      	tst	r4, r3
  4059ce:	d106      	bne.n	4059de <_malloc_r+0xe6>
  4059d0:	f020 0003 	bic.w	r0, r0, #3
  4059d4:	0064      	lsls	r4, r4, #1
  4059d6:	421c      	tst	r4, r3
  4059d8:	f100 0004 	add.w	r0, r0, #4
  4059dc:	d0fa      	beq.n	4059d4 <_malloc_r+0xdc>
  4059de:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4059e2:	46cc      	mov	ip, r9
  4059e4:	4680      	mov	r8, r0
  4059e6:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4059ea:	459c      	cmp	ip, r3
  4059ec:	d107      	bne.n	4059fe <_malloc_r+0x106>
  4059ee:	e16d      	b.n	405ccc <_malloc_r+0x3d4>
  4059f0:	2a00      	cmp	r2, #0
  4059f2:	f280 817b 	bge.w	405cec <_malloc_r+0x3f4>
  4059f6:	68db      	ldr	r3, [r3, #12]
  4059f8:	459c      	cmp	ip, r3
  4059fa:	f000 8167 	beq.w	405ccc <_malloc_r+0x3d4>
  4059fe:	6859      	ldr	r1, [r3, #4]
  405a00:	f021 0103 	bic.w	r1, r1, #3
  405a04:	1b8a      	subs	r2, r1, r6
  405a06:	2a0f      	cmp	r2, #15
  405a08:	ddf2      	ble.n	4059f0 <_malloc_r+0xf8>
  405a0a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  405a0e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  405a12:	9300      	str	r3, [sp, #0]
  405a14:	199c      	adds	r4, r3, r6
  405a16:	4628      	mov	r0, r5
  405a18:	f046 0601 	orr.w	r6, r6, #1
  405a1c:	f042 0501 	orr.w	r5, r2, #1
  405a20:	605e      	str	r6, [r3, #4]
  405a22:	f8c8 c00c 	str.w	ip, [r8, #12]
  405a26:	f8cc 8008 	str.w	r8, [ip, #8]
  405a2a:	617c      	str	r4, [r7, #20]
  405a2c:	613c      	str	r4, [r7, #16]
  405a2e:	f8c4 e00c 	str.w	lr, [r4, #12]
  405a32:	f8c4 e008 	str.w	lr, [r4, #8]
  405a36:	6065      	str	r5, [r4, #4]
  405a38:	505a      	str	r2, [r3, r1]
  405a3a:	f000 fafb 	bl	406034 <__malloc_unlock>
  405a3e:	9b00      	ldr	r3, [sp, #0]
  405a40:	f103 0408 	add.w	r4, r3, #8
  405a44:	e01e      	b.n	405a84 <_malloc_r+0x18c>
  405a46:	2910      	cmp	r1, #16
  405a48:	d820      	bhi.n	405a8c <_malloc_r+0x194>
  405a4a:	f000 faed 	bl	406028 <__malloc_lock>
  405a4e:	2610      	movs	r6, #16
  405a50:	2318      	movs	r3, #24
  405a52:	2002      	movs	r0, #2
  405a54:	4f79      	ldr	r7, [pc, #484]	; (405c3c <_malloc_r+0x344>)
  405a56:	443b      	add	r3, r7
  405a58:	f1a3 0208 	sub.w	r2, r3, #8
  405a5c:	685c      	ldr	r4, [r3, #4]
  405a5e:	4294      	cmp	r4, r2
  405a60:	f000 813d 	beq.w	405cde <_malloc_r+0x3e6>
  405a64:	6863      	ldr	r3, [r4, #4]
  405a66:	68e1      	ldr	r1, [r4, #12]
  405a68:	68a6      	ldr	r6, [r4, #8]
  405a6a:	f023 0303 	bic.w	r3, r3, #3
  405a6e:	4423      	add	r3, r4
  405a70:	4628      	mov	r0, r5
  405a72:	685a      	ldr	r2, [r3, #4]
  405a74:	60f1      	str	r1, [r6, #12]
  405a76:	f042 0201 	orr.w	r2, r2, #1
  405a7a:	608e      	str	r6, [r1, #8]
  405a7c:	605a      	str	r2, [r3, #4]
  405a7e:	f000 fad9 	bl	406034 <__malloc_unlock>
  405a82:	3408      	adds	r4, #8
  405a84:	4620      	mov	r0, r4
  405a86:	b003      	add	sp, #12
  405a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405a8c:	2400      	movs	r4, #0
  405a8e:	230c      	movs	r3, #12
  405a90:	4620      	mov	r0, r4
  405a92:	602b      	str	r3, [r5, #0]
  405a94:	b003      	add	sp, #12
  405a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405a9a:	2040      	movs	r0, #64	; 0x40
  405a9c:	f44f 7300 	mov.w	r3, #512	; 0x200
  405aa0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  405aa4:	e74a      	b.n	40593c <_malloc_r+0x44>
  405aa6:	4423      	add	r3, r4
  405aa8:	68e1      	ldr	r1, [r4, #12]
  405aaa:	685a      	ldr	r2, [r3, #4]
  405aac:	68a6      	ldr	r6, [r4, #8]
  405aae:	f042 0201 	orr.w	r2, r2, #1
  405ab2:	60f1      	str	r1, [r6, #12]
  405ab4:	4628      	mov	r0, r5
  405ab6:	608e      	str	r6, [r1, #8]
  405ab8:	605a      	str	r2, [r3, #4]
  405aba:	f000 fabb 	bl	406034 <__malloc_unlock>
  405abe:	3408      	adds	r4, #8
  405ac0:	4620      	mov	r0, r4
  405ac2:	b003      	add	sp, #12
  405ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ac8:	4423      	add	r3, r4
  405aca:	4628      	mov	r0, r5
  405acc:	685a      	ldr	r2, [r3, #4]
  405ace:	f042 0201 	orr.w	r2, r2, #1
  405ad2:	605a      	str	r2, [r3, #4]
  405ad4:	f000 faae 	bl	406034 <__malloc_unlock>
  405ad8:	3408      	adds	r4, #8
  405ada:	4620      	mov	r0, r4
  405adc:	b003      	add	sp, #12
  405ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ae2:	68bc      	ldr	r4, [r7, #8]
  405ae4:	6863      	ldr	r3, [r4, #4]
  405ae6:	f023 0803 	bic.w	r8, r3, #3
  405aea:	45b0      	cmp	r8, r6
  405aec:	d304      	bcc.n	405af8 <_malloc_r+0x200>
  405aee:	eba8 0306 	sub.w	r3, r8, r6
  405af2:	2b0f      	cmp	r3, #15
  405af4:	f300 8085 	bgt.w	405c02 <_malloc_r+0x30a>
  405af8:	f8df 9158 	ldr.w	r9, [pc, #344]	; 405c54 <_malloc_r+0x35c>
  405afc:	4b50      	ldr	r3, [pc, #320]	; (405c40 <_malloc_r+0x348>)
  405afe:	f8d9 2000 	ldr.w	r2, [r9]
  405b02:	681b      	ldr	r3, [r3, #0]
  405b04:	3201      	adds	r2, #1
  405b06:	4433      	add	r3, r6
  405b08:	eb04 0a08 	add.w	sl, r4, r8
  405b0c:	f000 8155 	beq.w	405dba <_malloc_r+0x4c2>
  405b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  405b14:	330f      	adds	r3, #15
  405b16:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  405b1a:	f02b 0b0f 	bic.w	fp, fp, #15
  405b1e:	4659      	mov	r1, fp
  405b20:	4628      	mov	r0, r5
  405b22:	f000 fa8d 	bl	406040 <_sbrk_r>
  405b26:	1c41      	adds	r1, r0, #1
  405b28:	4602      	mov	r2, r0
  405b2a:	f000 80fc 	beq.w	405d26 <_malloc_r+0x42e>
  405b2e:	4582      	cmp	sl, r0
  405b30:	f200 80f7 	bhi.w	405d22 <_malloc_r+0x42a>
  405b34:	4b43      	ldr	r3, [pc, #268]	; (405c44 <_malloc_r+0x34c>)
  405b36:	6819      	ldr	r1, [r3, #0]
  405b38:	4459      	add	r1, fp
  405b3a:	6019      	str	r1, [r3, #0]
  405b3c:	f000 814d 	beq.w	405dda <_malloc_r+0x4e2>
  405b40:	f8d9 0000 	ldr.w	r0, [r9]
  405b44:	3001      	adds	r0, #1
  405b46:	bf1b      	ittet	ne
  405b48:	eba2 0a0a 	subne.w	sl, r2, sl
  405b4c:	4451      	addne	r1, sl
  405b4e:	f8c9 2000 	streq.w	r2, [r9]
  405b52:	6019      	strne	r1, [r3, #0]
  405b54:	f012 0107 	ands.w	r1, r2, #7
  405b58:	f000 8115 	beq.w	405d86 <_malloc_r+0x48e>
  405b5c:	f1c1 0008 	rsb	r0, r1, #8
  405b60:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  405b64:	4402      	add	r2, r0
  405b66:	3108      	adds	r1, #8
  405b68:	eb02 090b 	add.w	r9, r2, fp
  405b6c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  405b70:	eba1 0909 	sub.w	r9, r1, r9
  405b74:	4649      	mov	r1, r9
  405b76:	4628      	mov	r0, r5
  405b78:	9301      	str	r3, [sp, #4]
  405b7a:	9200      	str	r2, [sp, #0]
  405b7c:	f000 fa60 	bl	406040 <_sbrk_r>
  405b80:	1c43      	adds	r3, r0, #1
  405b82:	e89d 000c 	ldmia.w	sp, {r2, r3}
  405b86:	f000 8143 	beq.w	405e10 <_malloc_r+0x518>
  405b8a:	1a80      	subs	r0, r0, r2
  405b8c:	4448      	add	r0, r9
  405b8e:	f040 0001 	orr.w	r0, r0, #1
  405b92:	6819      	ldr	r1, [r3, #0]
  405b94:	60ba      	str	r2, [r7, #8]
  405b96:	4449      	add	r1, r9
  405b98:	42bc      	cmp	r4, r7
  405b9a:	6050      	str	r0, [r2, #4]
  405b9c:	6019      	str	r1, [r3, #0]
  405b9e:	d017      	beq.n	405bd0 <_malloc_r+0x2d8>
  405ba0:	f1b8 0f0f 	cmp.w	r8, #15
  405ba4:	f240 80fb 	bls.w	405d9e <_malloc_r+0x4a6>
  405ba8:	6860      	ldr	r0, [r4, #4]
  405baa:	f1a8 020c 	sub.w	r2, r8, #12
  405bae:	f022 0207 	bic.w	r2, r2, #7
  405bb2:	eb04 0e02 	add.w	lr, r4, r2
  405bb6:	f000 0001 	and.w	r0, r0, #1
  405bba:	f04f 0c05 	mov.w	ip, #5
  405bbe:	4310      	orrs	r0, r2
  405bc0:	2a0f      	cmp	r2, #15
  405bc2:	6060      	str	r0, [r4, #4]
  405bc4:	f8ce c004 	str.w	ip, [lr, #4]
  405bc8:	f8ce c008 	str.w	ip, [lr, #8]
  405bcc:	f200 8117 	bhi.w	405dfe <_malloc_r+0x506>
  405bd0:	4b1d      	ldr	r3, [pc, #116]	; (405c48 <_malloc_r+0x350>)
  405bd2:	68bc      	ldr	r4, [r7, #8]
  405bd4:	681a      	ldr	r2, [r3, #0]
  405bd6:	4291      	cmp	r1, r2
  405bd8:	bf88      	it	hi
  405bda:	6019      	strhi	r1, [r3, #0]
  405bdc:	4b1b      	ldr	r3, [pc, #108]	; (405c4c <_malloc_r+0x354>)
  405bde:	681a      	ldr	r2, [r3, #0]
  405be0:	4291      	cmp	r1, r2
  405be2:	6862      	ldr	r2, [r4, #4]
  405be4:	bf88      	it	hi
  405be6:	6019      	strhi	r1, [r3, #0]
  405be8:	f022 0203 	bic.w	r2, r2, #3
  405bec:	4296      	cmp	r6, r2
  405bee:	eba2 0306 	sub.w	r3, r2, r6
  405bf2:	d801      	bhi.n	405bf8 <_malloc_r+0x300>
  405bf4:	2b0f      	cmp	r3, #15
  405bf6:	dc04      	bgt.n	405c02 <_malloc_r+0x30a>
  405bf8:	4628      	mov	r0, r5
  405bfa:	f000 fa1b 	bl	406034 <__malloc_unlock>
  405bfe:	2400      	movs	r4, #0
  405c00:	e740      	b.n	405a84 <_malloc_r+0x18c>
  405c02:	19a2      	adds	r2, r4, r6
  405c04:	f043 0301 	orr.w	r3, r3, #1
  405c08:	f046 0601 	orr.w	r6, r6, #1
  405c0c:	6066      	str	r6, [r4, #4]
  405c0e:	4628      	mov	r0, r5
  405c10:	60ba      	str	r2, [r7, #8]
  405c12:	6053      	str	r3, [r2, #4]
  405c14:	f000 fa0e 	bl	406034 <__malloc_unlock>
  405c18:	3408      	adds	r4, #8
  405c1a:	4620      	mov	r0, r4
  405c1c:	b003      	add	sp, #12
  405c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405c22:	2b14      	cmp	r3, #20
  405c24:	d971      	bls.n	405d0a <_malloc_r+0x412>
  405c26:	2b54      	cmp	r3, #84	; 0x54
  405c28:	f200 80a3 	bhi.w	405d72 <_malloc_r+0x47a>
  405c2c:	0b33      	lsrs	r3, r6, #12
  405c2e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  405c32:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  405c36:	00c3      	lsls	r3, r0, #3
  405c38:	e680      	b.n	40593c <_malloc_r+0x44>
  405c3a:	bf00      	nop
  405c3c:	20400478 	.word	0x20400478
  405c40:	20450830 	.word	0x20450830
  405c44:	20450800 	.word	0x20450800
  405c48:	20450828 	.word	0x20450828
  405c4c:	2045082c 	.word	0x2045082c
  405c50:	20400480 	.word	0x20400480
  405c54:	20400880 	.word	0x20400880
  405c58:	0a5a      	lsrs	r2, r3, #9
  405c5a:	2a04      	cmp	r2, #4
  405c5c:	d95b      	bls.n	405d16 <_malloc_r+0x41e>
  405c5e:	2a14      	cmp	r2, #20
  405c60:	f200 80ae 	bhi.w	405dc0 <_malloc_r+0x4c8>
  405c64:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  405c68:	00c9      	lsls	r1, r1, #3
  405c6a:	325b      	adds	r2, #91	; 0x5b
  405c6c:	eb07 0c01 	add.w	ip, r7, r1
  405c70:	5879      	ldr	r1, [r7, r1]
  405c72:	f1ac 0c08 	sub.w	ip, ip, #8
  405c76:	458c      	cmp	ip, r1
  405c78:	f000 8088 	beq.w	405d8c <_malloc_r+0x494>
  405c7c:	684a      	ldr	r2, [r1, #4]
  405c7e:	f022 0203 	bic.w	r2, r2, #3
  405c82:	4293      	cmp	r3, r2
  405c84:	d273      	bcs.n	405d6e <_malloc_r+0x476>
  405c86:	6889      	ldr	r1, [r1, #8]
  405c88:	458c      	cmp	ip, r1
  405c8a:	d1f7      	bne.n	405c7c <_malloc_r+0x384>
  405c8c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  405c90:	687b      	ldr	r3, [r7, #4]
  405c92:	60e2      	str	r2, [r4, #12]
  405c94:	f8c4 c008 	str.w	ip, [r4, #8]
  405c98:	6094      	str	r4, [r2, #8]
  405c9a:	f8cc 400c 	str.w	r4, [ip, #12]
  405c9e:	e68f      	b.n	4059c0 <_malloc_r+0xc8>
  405ca0:	19a1      	adds	r1, r4, r6
  405ca2:	f046 0c01 	orr.w	ip, r6, #1
  405ca6:	f042 0601 	orr.w	r6, r2, #1
  405caa:	f8c4 c004 	str.w	ip, [r4, #4]
  405cae:	4628      	mov	r0, r5
  405cb0:	6179      	str	r1, [r7, #20]
  405cb2:	6139      	str	r1, [r7, #16]
  405cb4:	f8c1 e00c 	str.w	lr, [r1, #12]
  405cb8:	f8c1 e008 	str.w	lr, [r1, #8]
  405cbc:	604e      	str	r6, [r1, #4]
  405cbe:	50e2      	str	r2, [r4, r3]
  405cc0:	f000 f9b8 	bl	406034 <__malloc_unlock>
  405cc4:	3408      	adds	r4, #8
  405cc6:	e6dd      	b.n	405a84 <_malloc_r+0x18c>
  405cc8:	687b      	ldr	r3, [r7, #4]
  405cca:	e679      	b.n	4059c0 <_malloc_r+0xc8>
  405ccc:	f108 0801 	add.w	r8, r8, #1
  405cd0:	f018 0f03 	tst.w	r8, #3
  405cd4:	f10c 0c08 	add.w	ip, ip, #8
  405cd8:	f47f ae85 	bne.w	4059e6 <_malloc_r+0xee>
  405cdc:	e02d      	b.n	405d3a <_malloc_r+0x442>
  405cde:	68dc      	ldr	r4, [r3, #12]
  405ce0:	42a3      	cmp	r3, r4
  405ce2:	bf08      	it	eq
  405ce4:	3002      	addeq	r0, #2
  405ce6:	f43f ae3e 	beq.w	405966 <_malloc_r+0x6e>
  405cea:	e6bb      	b.n	405a64 <_malloc_r+0x16c>
  405cec:	4419      	add	r1, r3
  405cee:	461c      	mov	r4, r3
  405cf0:	684a      	ldr	r2, [r1, #4]
  405cf2:	68db      	ldr	r3, [r3, #12]
  405cf4:	f854 6f08 	ldr.w	r6, [r4, #8]!
  405cf8:	f042 0201 	orr.w	r2, r2, #1
  405cfc:	604a      	str	r2, [r1, #4]
  405cfe:	4628      	mov	r0, r5
  405d00:	60f3      	str	r3, [r6, #12]
  405d02:	609e      	str	r6, [r3, #8]
  405d04:	f000 f996 	bl	406034 <__malloc_unlock>
  405d08:	e6bc      	b.n	405a84 <_malloc_r+0x18c>
  405d0a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  405d0e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  405d12:	00c3      	lsls	r3, r0, #3
  405d14:	e612      	b.n	40593c <_malloc_r+0x44>
  405d16:	099a      	lsrs	r2, r3, #6
  405d18:	f102 0139 	add.w	r1, r2, #57	; 0x39
  405d1c:	00c9      	lsls	r1, r1, #3
  405d1e:	3238      	adds	r2, #56	; 0x38
  405d20:	e7a4      	b.n	405c6c <_malloc_r+0x374>
  405d22:	42bc      	cmp	r4, r7
  405d24:	d054      	beq.n	405dd0 <_malloc_r+0x4d8>
  405d26:	68bc      	ldr	r4, [r7, #8]
  405d28:	6862      	ldr	r2, [r4, #4]
  405d2a:	f022 0203 	bic.w	r2, r2, #3
  405d2e:	e75d      	b.n	405bec <_malloc_r+0x2f4>
  405d30:	f859 3908 	ldr.w	r3, [r9], #-8
  405d34:	4599      	cmp	r9, r3
  405d36:	f040 8086 	bne.w	405e46 <_malloc_r+0x54e>
  405d3a:	f010 0f03 	tst.w	r0, #3
  405d3e:	f100 30ff 	add.w	r0, r0, #4294967295
  405d42:	d1f5      	bne.n	405d30 <_malloc_r+0x438>
  405d44:	687b      	ldr	r3, [r7, #4]
  405d46:	ea23 0304 	bic.w	r3, r3, r4
  405d4a:	607b      	str	r3, [r7, #4]
  405d4c:	0064      	lsls	r4, r4, #1
  405d4e:	429c      	cmp	r4, r3
  405d50:	f63f aec7 	bhi.w	405ae2 <_malloc_r+0x1ea>
  405d54:	2c00      	cmp	r4, #0
  405d56:	f43f aec4 	beq.w	405ae2 <_malloc_r+0x1ea>
  405d5a:	421c      	tst	r4, r3
  405d5c:	4640      	mov	r0, r8
  405d5e:	f47f ae3e 	bne.w	4059de <_malloc_r+0xe6>
  405d62:	0064      	lsls	r4, r4, #1
  405d64:	421c      	tst	r4, r3
  405d66:	f100 0004 	add.w	r0, r0, #4
  405d6a:	d0fa      	beq.n	405d62 <_malloc_r+0x46a>
  405d6c:	e637      	b.n	4059de <_malloc_r+0xe6>
  405d6e:	468c      	mov	ip, r1
  405d70:	e78c      	b.n	405c8c <_malloc_r+0x394>
  405d72:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  405d76:	d815      	bhi.n	405da4 <_malloc_r+0x4ac>
  405d78:	0bf3      	lsrs	r3, r6, #15
  405d7a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  405d7e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  405d82:	00c3      	lsls	r3, r0, #3
  405d84:	e5da      	b.n	40593c <_malloc_r+0x44>
  405d86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  405d8a:	e6ed      	b.n	405b68 <_malloc_r+0x270>
  405d8c:	687b      	ldr	r3, [r7, #4]
  405d8e:	1092      	asrs	r2, r2, #2
  405d90:	2101      	movs	r1, #1
  405d92:	fa01 f202 	lsl.w	r2, r1, r2
  405d96:	4313      	orrs	r3, r2
  405d98:	607b      	str	r3, [r7, #4]
  405d9a:	4662      	mov	r2, ip
  405d9c:	e779      	b.n	405c92 <_malloc_r+0x39a>
  405d9e:	2301      	movs	r3, #1
  405da0:	6053      	str	r3, [r2, #4]
  405da2:	e729      	b.n	405bf8 <_malloc_r+0x300>
  405da4:	f240 5254 	movw	r2, #1364	; 0x554
  405da8:	4293      	cmp	r3, r2
  405daa:	d822      	bhi.n	405df2 <_malloc_r+0x4fa>
  405dac:	0cb3      	lsrs	r3, r6, #18
  405dae:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  405db2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  405db6:	00c3      	lsls	r3, r0, #3
  405db8:	e5c0      	b.n	40593c <_malloc_r+0x44>
  405dba:	f103 0b10 	add.w	fp, r3, #16
  405dbe:	e6ae      	b.n	405b1e <_malloc_r+0x226>
  405dc0:	2a54      	cmp	r2, #84	; 0x54
  405dc2:	d829      	bhi.n	405e18 <_malloc_r+0x520>
  405dc4:	0b1a      	lsrs	r2, r3, #12
  405dc6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  405dca:	00c9      	lsls	r1, r1, #3
  405dcc:	326e      	adds	r2, #110	; 0x6e
  405dce:	e74d      	b.n	405c6c <_malloc_r+0x374>
  405dd0:	4b20      	ldr	r3, [pc, #128]	; (405e54 <_malloc_r+0x55c>)
  405dd2:	6819      	ldr	r1, [r3, #0]
  405dd4:	4459      	add	r1, fp
  405dd6:	6019      	str	r1, [r3, #0]
  405dd8:	e6b2      	b.n	405b40 <_malloc_r+0x248>
  405dda:	f3ca 000b 	ubfx	r0, sl, #0, #12
  405dde:	2800      	cmp	r0, #0
  405de0:	f47f aeae 	bne.w	405b40 <_malloc_r+0x248>
  405de4:	eb08 030b 	add.w	r3, r8, fp
  405de8:	68ba      	ldr	r2, [r7, #8]
  405dea:	f043 0301 	orr.w	r3, r3, #1
  405dee:	6053      	str	r3, [r2, #4]
  405df0:	e6ee      	b.n	405bd0 <_malloc_r+0x2d8>
  405df2:	207f      	movs	r0, #127	; 0x7f
  405df4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  405df8:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  405dfc:	e59e      	b.n	40593c <_malloc_r+0x44>
  405dfe:	f104 0108 	add.w	r1, r4, #8
  405e02:	4628      	mov	r0, r5
  405e04:	9300      	str	r3, [sp, #0]
  405e06:	f001 fb05 	bl	407414 <_free_r>
  405e0a:	9b00      	ldr	r3, [sp, #0]
  405e0c:	6819      	ldr	r1, [r3, #0]
  405e0e:	e6df      	b.n	405bd0 <_malloc_r+0x2d8>
  405e10:	2001      	movs	r0, #1
  405e12:	f04f 0900 	mov.w	r9, #0
  405e16:	e6bc      	b.n	405b92 <_malloc_r+0x29a>
  405e18:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405e1c:	d805      	bhi.n	405e2a <_malloc_r+0x532>
  405e1e:	0bda      	lsrs	r2, r3, #15
  405e20:	f102 0178 	add.w	r1, r2, #120	; 0x78
  405e24:	00c9      	lsls	r1, r1, #3
  405e26:	3277      	adds	r2, #119	; 0x77
  405e28:	e720      	b.n	405c6c <_malloc_r+0x374>
  405e2a:	f240 5154 	movw	r1, #1364	; 0x554
  405e2e:	428a      	cmp	r2, r1
  405e30:	d805      	bhi.n	405e3e <_malloc_r+0x546>
  405e32:	0c9a      	lsrs	r2, r3, #18
  405e34:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  405e38:	00c9      	lsls	r1, r1, #3
  405e3a:	327c      	adds	r2, #124	; 0x7c
  405e3c:	e716      	b.n	405c6c <_malloc_r+0x374>
  405e3e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  405e42:	227e      	movs	r2, #126	; 0x7e
  405e44:	e712      	b.n	405c6c <_malloc_r+0x374>
  405e46:	687b      	ldr	r3, [r7, #4]
  405e48:	e780      	b.n	405d4c <_malloc_r+0x454>
  405e4a:	08f0      	lsrs	r0, r6, #3
  405e4c:	f106 0308 	add.w	r3, r6, #8
  405e50:	e600      	b.n	405a54 <_malloc_r+0x15c>
  405e52:	bf00      	nop
  405e54:	20450800 	.word	0x20450800

00405e58 <memcpy>:
  405e58:	4684      	mov	ip, r0
  405e5a:	ea41 0300 	orr.w	r3, r1, r0
  405e5e:	f013 0303 	ands.w	r3, r3, #3
  405e62:	d16d      	bne.n	405f40 <memcpy+0xe8>
  405e64:	3a40      	subs	r2, #64	; 0x40
  405e66:	d341      	bcc.n	405eec <memcpy+0x94>
  405e68:	f851 3b04 	ldr.w	r3, [r1], #4
  405e6c:	f840 3b04 	str.w	r3, [r0], #4
  405e70:	f851 3b04 	ldr.w	r3, [r1], #4
  405e74:	f840 3b04 	str.w	r3, [r0], #4
  405e78:	f851 3b04 	ldr.w	r3, [r1], #4
  405e7c:	f840 3b04 	str.w	r3, [r0], #4
  405e80:	f851 3b04 	ldr.w	r3, [r1], #4
  405e84:	f840 3b04 	str.w	r3, [r0], #4
  405e88:	f851 3b04 	ldr.w	r3, [r1], #4
  405e8c:	f840 3b04 	str.w	r3, [r0], #4
  405e90:	f851 3b04 	ldr.w	r3, [r1], #4
  405e94:	f840 3b04 	str.w	r3, [r0], #4
  405e98:	f851 3b04 	ldr.w	r3, [r1], #4
  405e9c:	f840 3b04 	str.w	r3, [r0], #4
  405ea0:	f851 3b04 	ldr.w	r3, [r1], #4
  405ea4:	f840 3b04 	str.w	r3, [r0], #4
  405ea8:	f851 3b04 	ldr.w	r3, [r1], #4
  405eac:	f840 3b04 	str.w	r3, [r0], #4
  405eb0:	f851 3b04 	ldr.w	r3, [r1], #4
  405eb4:	f840 3b04 	str.w	r3, [r0], #4
  405eb8:	f851 3b04 	ldr.w	r3, [r1], #4
  405ebc:	f840 3b04 	str.w	r3, [r0], #4
  405ec0:	f851 3b04 	ldr.w	r3, [r1], #4
  405ec4:	f840 3b04 	str.w	r3, [r0], #4
  405ec8:	f851 3b04 	ldr.w	r3, [r1], #4
  405ecc:	f840 3b04 	str.w	r3, [r0], #4
  405ed0:	f851 3b04 	ldr.w	r3, [r1], #4
  405ed4:	f840 3b04 	str.w	r3, [r0], #4
  405ed8:	f851 3b04 	ldr.w	r3, [r1], #4
  405edc:	f840 3b04 	str.w	r3, [r0], #4
  405ee0:	f851 3b04 	ldr.w	r3, [r1], #4
  405ee4:	f840 3b04 	str.w	r3, [r0], #4
  405ee8:	3a40      	subs	r2, #64	; 0x40
  405eea:	d2bd      	bcs.n	405e68 <memcpy+0x10>
  405eec:	3230      	adds	r2, #48	; 0x30
  405eee:	d311      	bcc.n	405f14 <memcpy+0xbc>
  405ef0:	f851 3b04 	ldr.w	r3, [r1], #4
  405ef4:	f840 3b04 	str.w	r3, [r0], #4
  405ef8:	f851 3b04 	ldr.w	r3, [r1], #4
  405efc:	f840 3b04 	str.w	r3, [r0], #4
  405f00:	f851 3b04 	ldr.w	r3, [r1], #4
  405f04:	f840 3b04 	str.w	r3, [r0], #4
  405f08:	f851 3b04 	ldr.w	r3, [r1], #4
  405f0c:	f840 3b04 	str.w	r3, [r0], #4
  405f10:	3a10      	subs	r2, #16
  405f12:	d2ed      	bcs.n	405ef0 <memcpy+0x98>
  405f14:	320c      	adds	r2, #12
  405f16:	d305      	bcc.n	405f24 <memcpy+0xcc>
  405f18:	f851 3b04 	ldr.w	r3, [r1], #4
  405f1c:	f840 3b04 	str.w	r3, [r0], #4
  405f20:	3a04      	subs	r2, #4
  405f22:	d2f9      	bcs.n	405f18 <memcpy+0xc0>
  405f24:	3204      	adds	r2, #4
  405f26:	d008      	beq.n	405f3a <memcpy+0xe2>
  405f28:	07d2      	lsls	r2, r2, #31
  405f2a:	bf1c      	itt	ne
  405f2c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405f30:	f800 3b01 	strbne.w	r3, [r0], #1
  405f34:	d301      	bcc.n	405f3a <memcpy+0xe2>
  405f36:	880b      	ldrh	r3, [r1, #0]
  405f38:	8003      	strh	r3, [r0, #0]
  405f3a:	4660      	mov	r0, ip
  405f3c:	4770      	bx	lr
  405f3e:	bf00      	nop
  405f40:	2a08      	cmp	r2, #8
  405f42:	d313      	bcc.n	405f6c <memcpy+0x114>
  405f44:	078b      	lsls	r3, r1, #30
  405f46:	d08d      	beq.n	405e64 <memcpy+0xc>
  405f48:	f010 0303 	ands.w	r3, r0, #3
  405f4c:	d08a      	beq.n	405e64 <memcpy+0xc>
  405f4e:	f1c3 0304 	rsb	r3, r3, #4
  405f52:	1ad2      	subs	r2, r2, r3
  405f54:	07db      	lsls	r3, r3, #31
  405f56:	bf1c      	itt	ne
  405f58:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405f5c:	f800 3b01 	strbne.w	r3, [r0], #1
  405f60:	d380      	bcc.n	405e64 <memcpy+0xc>
  405f62:	f831 3b02 	ldrh.w	r3, [r1], #2
  405f66:	f820 3b02 	strh.w	r3, [r0], #2
  405f6a:	e77b      	b.n	405e64 <memcpy+0xc>
  405f6c:	3a04      	subs	r2, #4
  405f6e:	d3d9      	bcc.n	405f24 <memcpy+0xcc>
  405f70:	3a01      	subs	r2, #1
  405f72:	f811 3b01 	ldrb.w	r3, [r1], #1
  405f76:	f800 3b01 	strb.w	r3, [r0], #1
  405f7a:	d2f9      	bcs.n	405f70 <memcpy+0x118>
  405f7c:	780b      	ldrb	r3, [r1, #0]
  405f7e:	7003      	strb	r3, [r0, #0]
  405f80:	784b      	ldrb	r3, [r1, #1]
  405f82:	7043      	strb	r3, [r0, #1]
  405f84:	788b      	ldrb	r3, [r1, #2]
  405f86:	7083      	strb	r3, [r0, #2]
  405f88:	4660      	mov	r0, ip
  405f8a:	4770      	bx	lr

00405f8c <memset>:
  405f8c:	b470      	push	{r4, r5, r6}
  405f8e:	0786      	lsls	r6, r0, #30
  405f90:	d046      	beq.n	406020 <memset+0x94>
  405f92:	1e54      	subs	r4, r2, #1
  405f94:	2a00      	cmp	r2, #0
  405f96:	d041      	beq.n	40601c <memset+0x90>
  405f98:	b2ca      	uxtb	r2, r1
  405f9a:	4603      	mov	r3, r0
  405f9c:	e002      	b.n	405fa4 <memset+0x18>
  405f9e:	f114 34ff 	adds.w	r4, r4, #4294967295
  405fa2:	d33b      	bcc.n	40601c <memset+0x90>
  405fa4:	f803 2b01 	strb.w	r2, [r3], #1
  405fa8:	079d      	lsls	r5, r3, #30
  405faa:	d1f8      	bne.n	405f9e <memset+0x12>
  405fac:	2c03      	cmp	r4, #3
  405fae:	d92e      	bls.n	40600e <memset+0x82>
  405fb0:	b2cd      	uxtb	r5, r1
  405fb2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  405fb6:	2c0f      	cmp	r4, #15
  405fb8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  405fbc:	d919      	bls.n	405ff2 <memset+0x66>
  405fbe:	f103 0210 	add.w	r2, r3, #16
  405fc2:	4626      	mov	r6, r4
  405fc4:	3e10      	subs	r6, #16
  405fc6:	2e0f      	cmp	r6, #15
  405fc8:	f842 5c10 	str.w	r5, [r2, #-16]
  405fcc:	f842 5c0c 	str.w	r5, [r2, #-12]
  405fd0:	f842 5c08 	str.w	r5, [r2, #-8]
  405fd4:	f842 5c04 	str.w	r5, [r2, #-4]
  405fd8:	f102 0210 	add.w	r2, r2, #16
  405fdc:	d8f2      	bhi.n	405fc4 <memset+0x38>
  405fde:	f1a4 0210 	sub.w	r2, r4, #16
  405fe2:	f022 020f 	bic.w	r2, r2, #15
  405fe6:	f004 040f 	and.w	r4, r4, #15
  405fea:	3210      	adds	r2, #16
  405fec:	2c03      	cmp	r4, #3
  405fee:	4413      	add	r3, r2
  405ff0:	d90d      	bls.n	40600e <memset+0x82>
  405ff2:	461e      	mov	r6, r3
  405ff4:	4622      	mov	r2, r4
  405ff6:	3a04      	subs	r2, #4
  405ff8:	2a03      	cmp	r2, #3
  405ffa:	f846 5b04 	str.w	r5, [r6], #4
  405ffe:	d8fa      	bhi.n	405ff6 <memset+0x6a>
  406000:	1f22      	subs	r2, r4, #4
  406002:	f022 0203 	bic.w	r2, r2, #3
  406006:	3204      	adds	r2, #4
  406008:	4413      	add	r3, r2
  40600a:	f004 0403 	and.w	r4, r4, #3
  40600e:	b12c      	cbz	r4, 40601c <memset+0x90>
  406010:	b2c9      	uxtb	r1, r1
  406012:	441c      	add	r4, r3
  406014:	f803 1b01 	strb.w	r1, [r3], #1
  406018:	429c      	cmp	r4, r3
  40601a:	d1fb      	bne.n	406014 <memset+0x88>
  40601c:	bc70      	pop	{r4, r5, r6}
  40601e:	4770      	bx	lr
  406020:	4614      	mov	r4, r2
  406022:	4603      	mov	r3, r0
  406024:	e7c2      	b.n	405fac <memset+0x20>
  406026:	bf00      	nop

00406028 <__malloc_lock>:
  406028:	4801      	ldr	r0, [pc, #4]	; (406030 <__malloc_lock+0x8>)
  40602a:	f001 bc8d 	b.w	407948 <__retarget_lock_acquire_recursive>
  40602e:	bf00      	nop
  406030:	20453c80 	.word	0x20453c80

00406034 <__malloc_unlock>:
  406034:	4801      	ldr	r0, [pc, #4]	; (40603c <__malloc_unlock+0x8>)
  406036:	f001 bc89 	b.w	40794c <__retarget_lock_release_recursive>
  40603a:	bf00      	nop
  40603c:	20453c80 	.word	0x20453c80

00406040 <_sbrk_r>:
  406040:	b538      	push	{r3, r4, r5, lr}
  406042:	4c07      	ldr	r4, [pc, #28]	; (406060 <_sbrk_r+0x20>)
  406044:	2300      	movs	r3, #0
  406046:	4605      	mov	r5, r0
  406048:	4608      	mov	r0, r1
  40604a:	6023      	str	r3, [r4, #0]
  40604c:	f7fd f87c 	bl	403148 <_sbrk>
  406050:	1c43      	adds	r3, r0, #1
  406052:	d000      	beq.n	406056 <_sbrk_r+0x16>
  406054:	bd38      	pop	{r3, r4, r5, pc}
  406056:	6823      	ldr	r3, [r4, #0]
  406058:	2b00      	cmp	r3, #0
  40605a:	d0fb      	beq.n	406054 <_sbrk_r+0x14>
  40605c:	602b      	str	r3, [r5, #0]
  40605e:	bd38      	pop	{r3, r4, r5, pc}
  406060:	20453c94 	.word	0x20453c94
	...

00406080 <strlen>:
  406080:	f890 f000 	pld	[r0]
  406084:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406088:	f020 0107 	bic.w	r1, r0, #7
  40608c:	f06f 0c00 	mvn.w	ip, #0
  406090:	f010 0407 	ands.w	r4, r0, #7
  406094:	f891 f020 	pld	[r1, #32]
  406098:	f040 8049 	bne.w	40612e <strlen+0xae>
  40609c:	f04f 0400 	mov.w	r4, #0
  4060a0:	f06f 0007 	mvn.w	r0, #7
  4060a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4060a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4060ac:	f100 0008 	add.w	r0, r0, #8
  4060b0:	fa82 f24c 	uadd8	r2, r2, ip
  4060b4:	faa4 f28c 	sel	r2, r4, ip
  4060b8:	fa83 f34c 	uadd8	r3, r3, ip
  4060bc:	faa2 f38c 	sel	r3, r2, ip
  4060c0:	bb4b      	cbnz	r3, 406116 <strlen+0x96>
  4060c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4060c6:	fa82 f24c 	uadd8	r2, r2, ip
  4060ca:	f100 0008 	add.w	r0, r0, #8
  4060ce:	faa4 f28c 	sel	r2, r4, ip
  4060d2:	fa83 f34c 	uadd8	r3, r3, ip
  4060d6:	faa2 f38c 	sel	r3, r2, ip
  4060da:	b9e3      	cbnz	r3, 406116 <strlen+0x96>
  4060dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4060e0:	fa82 f24c 	uadd8	r2, r2, ip
  4060e4:	f100 0008 	add.w	r0, r0, #8
  4060e8:	faa4 f28c 	sel	r2, r4, ip
  4060ec:	fa83 f34c 	uadd8	r3, r3, ip
  4060f0:	faa2 f38c 	sel	r3, r2, ip
  4060f4:	b97b      	cbnz	r3, 406116 <strlen+0x96>
  4060f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4060fa:	f101 0120 	add.w	r1, r1, #32
  4060fe:	fa82 f24c 	uadd8	r2, r2, ip
  406102:	f100 0008 	add.w	r0, r0, #8
  406106:	faa4 f28c 	sel	r2, r4, ip
  40610a:	fa83 f34c 	uadd8	r3, r3, ip
  40610e:	faa2 f38c 	sel	r3, r2, ip
  406112:	2b00      	cmp	r3, #0
  406114:	d0c6      	beq.n	4060a4 <strlen+0x24>
  406116:	2a00      	cmp	r2, #0
  406118:	bf04      	itt	eq
  40611a:	3004      	addeq	r0, #4
  40611c:	461a      	moveq	r2, r3
  40611e:	ba12      	rev	r2, r2
  406120:	fab2 f282 	clz	r2, r2
  406124:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406128:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40612c:	4770      	bx	lr
  40612e:	e9d1 2300 	ldrd	r2, r3, [r1]
  406132:	f004 0503 	and.w	r5, r4, #3
  406136:	f1c4 0000 	rsb	r0, r4, #0
  40613a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40613e:	f014 0f04 	tst.w	r4, #4
  406142:	f891 f040 	pld	[r1, #64]	; 0x40
  406146:	fa0c f505 	lsl.w	r5, ip, r5
  40614a:	ea62 0205 	orn	r2, r2, r5
  40614e:	bf1c      	itt	ne
  406150:	ea63 0305 	ornne	r3, r3, r5
  406154:	4662      	movne	r2, ip
  406156:	f04f 0400 	mov.w	r4, #0
  40615a:	e7a9      	b.n	4060b0 <strlen+0x30>

0040615c <__sprint_r.part.0>:
  40615c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406160:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  406162:	049c      	lsls	r4, r3, #18
  406164:	4693      	mov	fp, r2
  406166:	d52f      	bpl.n	4061c8 <__sprint_r.part.0+0x6c>
  406168:	6893      	ldr	r3, [r2, #8]
  40616a:	6812      	ldr	r2, [r2, #0]
  40616c:	b353      	cbz	r3, 4061c4 <__sprint_r.part.0+0x68>
  40616e:	460e      	mov	r6, r1
  406170:	4607      	mov	r7, r0
  406172:	f102 0908 	add.w	r9, r2, #8
  406176:	e919 0420 	ldmdb	r9, {r5, sl}
  40617a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40617e:	d017      	beq.n	4061b0 <__sprint_r.part.0+0x54>
  406180:	3d04      	subs	r5, #4
  406182:	2400      	movs	r4, #0
  406184:	e001      	b.n	40618a <__sprint_r.part.0+0x2e>
  406186:	45a0      	cmp	r8, r4
  406188:	d010      	beq.n	4061ac <__sprint_r.part.0+0x50>
  40618a:	4632      	mov	r2, r6
  40618c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  406190:	4638      	mov	r0, r7
  406192:	f001 f8bb 	bl	40730c <_fputwc_r>
  406196:	1c43      	adds	r3, r0, #1
  406198:	f104 0401 	add.w	r4, r4, #1
  40619c:	d1f3      	bne.n	406186 <__sprint_r.part.0+0x2a>
  40619e:	2300      	movs	r3, #0
  4061a0:	f8cb 3008 	str.w	r3, [fp, #8]
  4061a4:	f8cb 3004 	str.w	r3, [fp, #4]
  4061a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4061ac:	f8db 3008 	ldr.w	r3, [fp, #8]
  4061b0:	f02a 0a03 	bic.w	sl, sl, #3
  4061b4:	eba3 030a 	sub.w	r3, r3, sl
  4061b8:	f8cb 3008 	str.w	r3, [fp, #8]
  4061bc:	f109 0908 	add.w	r9, r9, #8
  4061c0:	2b00      	cmp	r3, #0
  4061c2:	d1d8      	bne.n	406176 <__sprint_r.part.0+0x1a>
  4061c4:	2000      	movs	r0, #0
  4061c6:	e7ea      	b.n	40619e <__sprint_r.part.0+0x42>
  4061c8:	f001 fa0a 	bl	4075e0 <__sfvwrite_r>
  4061cc:	2300      	movs	r3, #0
  4061ce:	f8cb 3008 	str.w	r3, [fp, #8]
  4061d2:	f8cb 3004 	str.w	r3, [fp, #4]
  4061d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4061da:	bf00      	nop

004061dc <_vfiprintf_r>:
  4061dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4061e0:	b0ad      	sub	sp, #180	; 0xb4
  4061e2:	461d      	mov	r5, r3
  4061e4:	468b      	mov	fp, r1
  4061e6:	4690      	mov	r8, r2
  4061e8:	9307      	str	r3, [sp, #28]
  4061ea:	9006      	str	r0, [sp, #24]
  4061ec:	b118      	cbz	r0, 4061f6 <_vfiprintf_r+0x1a>
  4061ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4061f0:	2b00      	cmp	r3, #0
  4061f2:	f000 80f3 	beq.w	4063dc <_vfiprintf_r+0x200>
  4061f6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4061fa:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4061fe:	07df      	lsls	r7, r3, #31
  406200:	b281      	uxth	r1, r0
  406202:	d402      	bmi.n	40620a <_vfiprintf_r+0x2e>
  406204:	058e      	lsls	r6, r1, #22
  406206:	f140 80fc 	bpl.w	406402 <_vfiprintf_r+0x226>
  40620a:	048c      	lsls	r4, r1, #18
  40620c:	d40a      	bmi.n	406224 <_vfiprintf_r+0x48>
  40620e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406212:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  406216:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40621a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40621e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  406222:	b289      	uxth	r1, r1
  406224:	0708      	lsls	r0, r1, #28
  406226:	f140 80b3 	bpl.w	406390 <_vfiprintf_r+0x1b4>
  40622a:	f8db 3010 	ldr.w	r3, [fp, #16]
  40622e:	2b00      	cmp	r3, #0
  406230:	f000 80ae 	beq.w	406390 <_vfiprintf_r+0x1b4>
  406234:	f001 031a 	and.w	r3, r1, #26
  406238:	2b0a      	cmp	r3, #10
  40623a:	f000 80b5 	beq.w	4063a8 <_vfiprintf_r+0x1cc>
  40623e:	2300      	movs	r3, #0
  406240:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  406244:	930b      	str	r3, [sp, #44]	; 0x2c
  406246:	9311      	str	r3, [sp, #68]	; 0x44
  406248:	9310      	str	r3, [sp, #64]	; 0x40
  40624a:	9303      	str	r3, [sp, #12]
  40624c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  406250:	46ca      	mov	sl, r9
  406252:	f8cd b010 	str.w	fp, [sp, #16]
  406256:	f898 3000 	ldrb.w	r3, [r8]
  40625a:	4644      	mov	r4, r8
  40625c:	b1fb      	cbz	r3, 40629e <_vfiprintf_r+0xc2>
  40625e:	2b25      	cmp	r3, #37	; 0x25
  406260:	d102      	bne.n	406268 <_vfiprintf_r+0x8c>
  406262:	e01c      	b.n	40629e <_vfiprintf_r+0xc2>
  406264:	2b25      	cmp	r3, #37	; 0x25
  406266:	d003      	beq.n	406270 <_vfiprintf_r+0x94>
  406268:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40626c:	2b00      	cmp	r3, #0
  40626e:	d1f9      	bne.n	406264 <_vfiprintf_r+0x88>
  406270:	eba4 0508 	sub.w	r5, r4, r8
  406274:	b19d      	cbz	r5, 40629e <_vfiprintf_r+0xc2>
  406276:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406278:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40627a:	f8ca 8000 	str.w	r8, [sl]
  40627e:	3301      	adds	r3, #1
  406280:	442a      	add	r2, r5
  406282:	2b07      	cmp	r3, #7
  406284:	f8ca 5004 	str.w	r5, [sl, #4]
  406288:	9211      	str	r2, [sp, #68]	; 0x44
  40628a:	9310      	str	r3, [sp, #64]	; 0x40
  40628c:	dd7a      	ble.n	406384 <_vfiprintf_r+0x1a8>
  40628e:	2a00      	cmp	r2, #0
  406290:	f040 84b0 	bne.w	406bf4 <_vfiprintf_r+0xa18>
  406294:	9b03      	ldr	r3, [sp, #12]
  406296:	9210      	str	r2, [sp, #64]	; 0x40
  406298:	442b      	add	r3, r5
  40629a:	46ca      	mov	sl, r9
  40629c:	9303      	str	r3, [sp, #12]
  40629e:	7823      	ldrb	r3, [r4, #0]
  4062a0:	2b00      	cmp	r3, #0
  4062a2:	f000 83e0 	beq.w	406a66 <_vfiprintf_r+0x88a>
  4062a6:	2000      	movs	r0, #0
  4062a8:	f04f 0300 	mov.w	r3, #0
  4062ac:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4062b0:	f104 0801 	add.w	r8, r4, #1
  4062b4:	7862      	ldrb	r2, [r4, #1]
  4062b6:	4605      	mov	r5, r0
  4062b8:	4606      	mov	r6, r0
  4062ba:	4603      	mov	r3, r0
  4062bc:	f04f 34ff 	mov.w	r4, #4294967295
  4062c0:	f108 0801 	add.w	r8, r8, #1
  4062c4:	f1a2 0120 	sub.w	r1, r2, #32
  4062c8:	2958      	cmp	r1, #88	; 0x58
  4062ca:	f200 82de 	bhi.w	40688a <_vfiprintf_r+0x6ae>
  4062ce:	e8df f011 	tbh	[pc, r1, lsl #1]
  4062d2:	0221      	.short	0x0221
  4062d4:	02dc02dc 	.word	0x02dc02dc
  4062d8:	02dc0229 	.word	0x02dc0229
  4062dc:	02dc02dc 	.word	0x02dc02dc
  4062e0:	02dc02dc 	.word	0x02dc02dc
  4062e4:	028902dc 	.word	0x028902dc
  4062e8:	02dc0295 	.word	0x02dc0295
  4062ec:	02bd00a2 	.word	0x02bd00a2
  4062f0:	019f02dc 	.word	0x019f02dc
  4062f4:	01a401a4 	.word	0x01a401a4
  4062f8:	01a401a4 	.word	0x01a401a4
  4062fc:	01a401a4 	.word	0x01a401a4
  406300:	01a401a4 	.word	0x01a401a4
  406304:	02dc01a4 	.word	0x02dc01a4
  406308:	02dc02dc 	.word	0x02dc02dc
  40630c:	02dc02dc 	.word	0x02dc02dc
  406310:	02dc02dc 	.word	0x02dc02dc
  406314:	02dc02dc 	.word	0x02dc02dc
  406318:	01b202dc 	.word	0x01b202dc
  40631c:	02dc02dc 	.word	0x02dc02dc
  406320:	02dc02dc 	.word	0x02dc02dc
  406324:	02dc02dc 	.word	0x02dc02dc
  406328:	02dc02dc 	.word	0x02dc02dc
  40632c:	02dc02dc 	.word	0x02dc02dc
  406330:	02dc0197 	.word	0x02dc0197
  406334:	02dc02dc 	.word	0x02dc02dc
  406338:	02dc02dc 	.word	0x02dc02dc
  40633c:	02dc019b 	.word	0x02dc019b
  406340:	025302dc 	.word	0x025302dc
  406344:	02dc02dc 	.word	0x02dc02dc
  406348:	02dc02dc 	.word	0x02dc02dc
  40634c:	02dc02dc 	.word	0x02dc02dc
  406350:	02dc02dc 	.word	0x02dc02dc
  406354:	02dc02dc 	.word	0x02dc02dc
  406358:	021b025a 	.word	0x021b025a
  40635c:	02dc02dc 	.word	0x02dc02dc
  406360:	026e02dc 	.word	0x026e02dc
  406364:	02dc021b 	.word	0x02dc021b
  406368:	027302dc 	.word	0x027302dc
  40636c:	01f502dc 	.word	0x01f502dc
  406370:	02090182 	.word	0x02090182
  406374:	02dc02d7 	.word	0x02dc02d7
  406378:	02dc029a 	.word	0x02dc029a
  40637c:	02dc00a7 	.word	0x02dc00a7
  406380:	022e02dc 	.word	0x022e02dc
  406384:	f10a 0a08 	add.w	sl, sl, #8
  406388:	9b03      	ldr	r3, [sp, #12]
  40638a:	442b      	add	r3, r5
  40638c:	9303      	str	r3, [sp, #12]
  40638e:	e786      	b.n	40629e <_vfiprintf_r+0xc2>
  406390:	4659      	mov	r1, fp
  406392:	9806      	ldr	r0, [sp, #24]
  406394:	f000 fdac 	bl	406ef0 <__swsetup_r>
  406398:	bb18      	cbnz	r0, 4063e2 <_vfiprintf_r+0x206>
  40639a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40639e:	f001 031a 	and.w	r3, r1, #26
  4063a2:	2b0a      	cmp	r3, #10
  4063a4:	f47f af4b 	bne.w	40623e <_vfiprintf_r+0x62>
  4063a8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4063ac:	2b00      	cmp	r3, #0
  4063ae:	f6ff af46 	blt.w	40623e <_vfiprintf_r+0x62>
  4063b2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4063b6:	07db      	lsls	r3, r3, #31
  4063b8:	d405      	bmi.n	4063c6 <_vfiprintf_r+0x1ea>
  4063ba:	058f      	lsls	r7, r1, #22
  4063bc:	d403      	bmi.n	4063c6 <_vfiprintf_r+0x1ea>
  4063be:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4063c2:	f001 fac3 	bl	40794c <__retarget_lock_release_recursive>
  4063c6:	462b      	mov	r3, r5
  4063c8:	4642      	mov	r2, r8
  4063ca:	4659      	mov	r1, fp
  4063cc:	9806      	ldr	r0, [sp, #24]
  4063ce:	f000 fd4d 	bl	406e6c <__sbprintf>
  4063d2:	9003      	str	r0, [sp, #12]
  4063d4:	9803      	ldr	r0, [sp, #12]
  4063d6:	b02d      	add	sp, #180	; 0xb4
  4063d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4063dc:	f000 fef4 	bl	4071c8 <__sinit>
  4063e0:	e709      	b.n	4061f6 <_vfiprintf_r+0x1a>
  4063e2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4063e6:	07d9      	lsls	r1, r3, #31
  4063e8:	d404      	bmi.n	4063f4 <_vfiprintf_r+0x218>
  4063ea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4063ee:	059a      	lsls	r2, r3, #22
  4063f0:	f140 84aa 	bpl.w	406d48 <_vfiprintf_r+0xb6c>
  4063f4:	f04f 33ff 	mov.w	r3, #4294967295
  4063f8:	9303      	str	r3, [sp, #12]
  4063fa:	9803      	ldr	r0, [sp, #12]
  4063fc:	b02d      	add	sp, #180	; 0xb4
  4063fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406402:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406406:	f001 fa9f 	bl	407948 <__retarget_lock_acquire_recursive>
  40640a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40640e:	b281      	uxth	r1, r0
  406410:	e6fb      	b.n	40620a <_vfiprintf_r+0x2e>
  406412:	4276      	negs	r6, r6
  406414:	9207      	str	r2, [sp, #28]
  406416:	f043 0304 	orr.w	r3, r3, #4
  40641a:	f898 2000 	ldrb.w	r2, [r8]
  40641e:	e74f      	b.n	4062c0 <_vfiprintf_r+0xe4>
  406420:	9608      	str	r6, [sp, #32]
  406422:	069e      	lsls	r6, r3, #26
  406424:	f100 8450 	bmi.w	406cc8 <_vfiprintf_r+0xaec>
  406428:	9907      	ldr	r1, [sp, #28]
  40642a:	06dd      	lsls	r5, r3, #27
  40642c:	460a      	mov	r2, r1
  40642e:	f100 83ef 	bmi.w	406c10 <_vfiprintf_r+0xa34>
  406432:	0658      	lsls	r0, r3, #25
  406434:	f140 83ec 	bpl.w	406c10 <_vfiprintf_r+0xa34>
  406438:	880e      	ldrh	r6, [r1, #0]
  40643a:	3104      	adds	r1, #4
  40643c:	2700      	movs	r7, #0
  40643e:	2201      	movs	r2, #1
  406440:	9107      	str	r1, [sp, #28]
  406442:	f04f 0100 	mov.w	r1, #0
  406446:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40644a:	2500      	movs	r5, #0
  40644c:	1c61      	adds	r1, r4, #1
  40644e:	f000 8116 	beq.w	40667e <_vfiprintf_r+0x4a2>
  406452:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  406456:	9102      	str	r1, [sp, #8]
  406458:	ea56 0107 	orrs.w	r1, r6, r7
  40645c:	f040 8114 	bne.w	406688 <_vfiprintf_r+0x4ac>
  406460:	2c00      	cmp	r4, #0
  406462:	f040 835c 	bne.w	406b1e <_vfiprintf_r+0x942>
  406466:	2a00      	cmp	r2, #0
  406468:	f040 83b7 	bne.w	406bda <_vfiprintf_r+0x9fe>
  40646c:	f013 0301 	ands.w	r3, r3, #1
  406470:	9305      	str	r3, [sp, #20]
  406472:	f000 8457 	beq.w	406d24 <_vfiprintf_r+0xb48>
  406476:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40647a:	2330      	movs	r3, #48	; 0x30
  40647c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  406480:	9b05      	ldr	r3, [sp, #20]
  406482:	42a3      	cmp	r3, r4
  406484:	bfb8      	it	lt
  406486:	4623      	movlt	r3, r4
  406488:	9301      	str	r3, [sp, #4]
  40648a:	b10d      	cbz	r5, 406490 <_vfiprintf_r+0x2b4>
  40648c:	3301      	adds	r3, #1
  40648e:	9301      	str	r3, [sp, #4]
  406490:	9b02      	ldr	r3, [sp, #8]
  406492:	f013 0302 	ands.w	r3, r3, #2
  406496:	9309      	str	r3, [sp, #36]	; 0x24
  406498:	d002      	beq.n	4064a0 <_vfiprintf_r+0x2c4>
  40649a:	9b01      	ldr	r3, [sp, #4]
  40649c:	3302      	adds	r3, #2
  40649e:	9301      	str	r3, [sp, #4]
  4064a0:	9b02      	ldr	r3, [sp, #8]
  4064a2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4064a6:	930a      	str	r3, [sp, #40]	; 0x28
  4064a8:	f040 8217 	bne.w	4068da <_vfiprintf_r+0x6fe>
  4064ac:	9b08      	ldr	r3, [sp, #32]
  4064ae:	9a01      	ldr	r2, [sp, #4]
  4064b0:	1a9d      	subs	r5, r3, r2
  4064b2:	2d00      	cmp	r5, #0
  4064b4:	f340 8211 	ble.w	4068da <_vfiprintf_r+0x6fe>
  4064b8:	2d10      	cmp	r5, #16
  4064ba:	f340 8490 	ble.w	406dde <_vfiprintf_r+0xc02>
  4064be:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4064c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4064c2:	4ec4      	ldr	r6, [pc, #784]	; (4067d4 <_vfiprintf_r+0x5f8>)
  4064c4:	46d6      	mov	lr, sl
  4064c6:	2710      	movs	r7, #16
  4064c8:	46a2      	mov	sl, r4
  4064ca:	4619      	mov	r1, r3
  4064cc:	9c06      	ldr	r4, [sp, #24]
  4064ce:	e007      	b.n	4064e0 <_vfiprintf_r+0x304>
  4064d0:	f101 0c02 	add.w	ip, r1, #2
  4064d4:	f10e 0e08 	add.w	lr, lr, #8
  4064d8:	4601      	mov	r1, r0
  4064da:	3d10      	subs	r5, #16
  4064dc:	2d10      	cmp	r5, #16
  4064de:	dd11      	ble.n	406504 <_vfiprintf_r+0x328>
  4064e0:	1c48      	adds	r0, r1, #1
  4064e2:	3210      	adds	r2, #16
  4064e4:	2807      	cmp	r0, #7
  4064e6:	9211      	str	r2, [sp, #68]	; 0x44
  4064e8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4064ec:	9010      	str	r0, [sp, #64]	; 0x40
  4064ee:	ddef      	ble.n	4064d0 <_vfiprintf_r+0x2f4>
  4064f0:	2a00      	cmp	r2, #0
  4064f2:	f040 81e4 	bne.w	4068be <_vfiprintf_r+0x6e2>
  4064f6:	3d10      	subs	r5, #16
  4064f8:	2d10      	cmp	r5, #16
  4064fa:	4611      	mov	r1, r2
  4064fc:	f04f 0c01 	mov.w	ip, #1
  406500:	46ce      	mov	lr, r9
  406502:	dced      	bgt.n	4064e0 <_vfiprintf_r+0x304>
  406504:	4654      	mov	r4, sl
  406506:	4661      	mov	r1, ip
  406508:	46f2      	mov	sl, lr
  40650a:	442a      	add	r2, r5
  40650c:	2907      	cmp	r1, #7
  40650e:	9211      	str	r2, [sp, #68]	; 0x44
  406510:	f8ca 6000 	str.w	r6, [sl]
  406514:	f8ca 5004 	str.w	r5, [sl, #4]
  406518:	9110      	str	r1, [sp, #64]	; 0x40
  40651a:	f300 82ec 	bgt.w	406af6 <_vfiprintf_r+0x91a>
  40651e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406522:	f10a 0a08 	add.w	sl, sl, #8
  406526:	1c48      	adds	r0, r1, #1
  406528:	2d00      	cmp	r5, #0
  40652a:	f040 81de 	bne.w	4068ea <_vfiprintf_r+0x70e>
  40652e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406530:	2b00      	cmp	r3, #0
  406532:	f000 81f8 	beq.w	406926 <_vfiprintf_r+0x74a>
  406536:	3202      	adds	r2, #2
  406538:	a90e      	add	r1, sp, #56	; 0x38
  40653a:	2302      	movs	r3, #2
  40653c:	2807      	cmp	r0, #7
  40653e:	9211      	str	r2, [sp, #68]	; 0x44
  406540:	9010      	str	r0, [sp, #64]	; 0x40
  406542:	e88a 000a 	stmia.w	sl, {r1, r3}
  406546:	f340 81ea 	ble.w	40691e <_vfiprintf_r+0x742>
  40654a:	2a00      	cmp	r2, #0
  40654c:	f040 838c 	bne.w	406c68 <_vfiprintf_r+0xa8c>
  406550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406552:	2b80      	cmp	r3, #128	; 0x80
  406554:	f04f 0001 	mov.w	r0, #1
  406558:	4611      	mov	r1, r2
  40655a:	46ca      	mov	sl, r9
  40655c:	f040 81e7 	bne.w	40692e <_vfiprintf_r+0x752>
  406560:	9b08      	ldr	r3, [sp, #32]
  406562:	9d01      	ldr	r5, [sp, #4]
  406564:	1b5e      	subs	r6, r3, r5
  406566:	2e00      	cmp	r6, #0
  406568:	f340 81e1 	ble.w	40692e <_vfiprintf_r+0x752>
  40656c:	2e10      	cmp	r6, #16
  40656e:	4d9a      	ldr	r5, [pc, #616]	; (4067d8 <_vfiprintf_r+0x5fc>)
  406570:	f340 8450 	ble.w	406e14 <_vfiprintf_r+0xc38>
  406574:	46d4      	mov	ip, sl
  406576:	2710      	movs	r7, #16
  406578:	46a2      	mov	sl, r4
  40657a:	9c06      	ldr	r4, [sp, #24]
  40657c:	e007      	b.n	40658e <_vfiprintf_r+0x3b2>
  40657e:	f101 0e02 	add.w	lr, r1, #2
  406582:	f10c 0c08 	add.w	ip, ip, #8
  406586:	4601      	mov	r1, r0
  406588:	3e10      	subs	r6, #16
  40658a:	2e10      	cmp	r6, #16
  40658c:	dd11      	ble.n	4065b2 <_vfiprintf_r+0x3d6>
  40658e:	1c48      	adds	r0, r1, #1
  406590:	3210      	adds	r2, #16
  406592:	2807      	cmp	r0, #7
  406594:	9211      	str	r2, [sp, #68]	; 0x44
  406596:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40659a:	9010      	str	r0, [sp, #64]	; 0x40
  40659c:	ddef      	ble.n	40657e <_vfiprintf_r+0x3a2>
  40659e:	2a00      	cmp	r2, #0
  4065a0:	f040 829d 	bne.w	406ade <_vfiprintf_r+0x902>
  4065a4:	3e10      	subs	r6, #16
  4065a6:	2e10      	cmp	r6, #16
  4065a8:	f04f 0e01 	mov.w	lr, #1
  4065ac:	4611      	mov	r1, r2
  4065ae:	46cc      	mov	ip, r9
  4065b0:	dced      	bgt.n	40658e <_vfiprintf_r+0x3b2>
  4065b2:	4654      	mov	r4, sl
  4065b4:	46e2      	mov	sl, ip
  4065b6:	4432      	add	r2, r6
  4065b8:	f1be 0f07 	cmp.w	lr, #7
  4065bc:	9211      	str	r2, [sp, #68]	; 0x44
  4065be:	e88a 0060 	stmia.w	sl, {r5, r6}
  4065c2:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4065c6:	f300 8369 	bgt.w	406c9c <_vfiprintf_r+0xac0>
  4065ca:	f10a 0a08 	add.w	sl, sl, #8
  4065ce:	f10e 0001 	add.w	r0, lr, #1
  4065d2:	4671      	mov	r1, lr
  4065d4:	e1ab      	b.n	40692e <_vfiprintf_r+0x752>
  4065d6:	9608      	str	r6, [sp, #32]
  4065d8:	f013 0220 	ands.w	r2, r3, #32
  4065dc:	f040 838c 	bne.w	406cf8 <_vfiprintf_r+0xb1c>
  4065e0:	f013 0110 	ands.w	r1, r3, #16
  4065e4:	f040 831a 	bne.w	406c1c <_vfiprintf_r+0xa40>
  4065e8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4065ec:	f000 8316 	beq.w	406c1c <_vfiprintf_r+0xa40>
  4065f0:	9807      	ldr	r0, [sp, #28]
  4065f2:	460a      	mov	r2, r1
  4065f4:	4601      	mov	r1, r0
  4065f6:	3104      	adds	r1, #4
  4065f8:	8806      	ldrh	r6, [r0, #0]
  4065fa:	9107      	str	r1, [sp, #28]
  4065fc:	2700      	movs	r7, #0
  4065fe:	e720      	b.n	406442 <_vfiprintf_r+0x266>
  406600:	9608      	str	r6, [sp, #32]
  406602:	f043 0310 	orr.w	r3, r3, #16
  406606:	e7e7      	b.n	4065d8 <_vfiprintf_r+0x3fc>
  406608:	9608      	str	r6, [sp, #32]
  40660a:	f043 0310 	orr.w	r3, r3, #16
  40660e:	e708      	b.n	406422 <_vfiprintf_r+0x246>
  406610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406614:	f898 2000 	ldrb.w	r2, [r8]
  406618:	e652      	b.n	4062c0 <_vfiprintf_r+0xe4>
  40661a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40661e:	2600      	movs	r6, #0
  406620:	f818 2b01 	ldrb.w	r2, [r8], #1
  406624:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  406628:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40662c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406630:	2909      	cmp	r1, #9
  406632:	d9f5      	bls.n	406620 <_vfiprintf_r+0x444>
  406634:	e646      	b.n	4062c4 <_vfiprintf_r+0xe8>
  406636:	9608      	str	r6, [sp, #32]
  406638:	2800      	cmp	r0, #0
  40663a:	f040 8408 	bne.w	406e4e <_vfiprintf_r+0xc72>
  40663e:	f043 0310 	orr.w	r3, r3, #16
  406642:	069e      	lsls	r6, r3, #26
  406644:	f100 834c 	bmi.w	406ce0 <_vfiprintf_r+0xb04>
  406648:	06dd      	lsls	r5, r3, #27
  40664a:	f100 82f3 	bmi.w	406c34 <_vfiprintf_r+0xa58>
  40664e:	0658      	lsls	r0, r3, #25
  406650:	f140 82f0 	bpl.w	406c34 <_vfiprintf_r+0xa58>
  406654:	9d07      	ldr	r5, [sp, #28]
  406656:	f9b5 6000 	ldrsh.w	r6, [r5]
  40665a:	462a      	mov	r2, r5
  40665c:	17f7      	asrs	r7, r6, #31
  40665e:	3204      	adds	r2, #4
  406660:	4630      	mov	r0, r6
  406662:	4639      	mov	r1, r7
  406664:	9207      	str	r2, [sp, #28]
  406666:	2800      	cmp	r0, #0
  406668:	f171 0200 	sbcs.w	r2, r1, #0
  40666c:	f2c0 835d 	blt.w	406d2a <_vfiprintf_r+0xb4e>
  406670:	1c61      	adds	r1, r4, #1
  406672:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406676:	f04f 0201 	mov.w	r2, #1
  40667a:	f47f aeea 	bne.w	406452 <_vfiprintf_r+0x276>
  40667e:	ea56 0107 	orrs.w	r1, r6, r7
  406682:	f000 824d 	beq.w	406b20 <_vfiprintf_r+0x944>
  406686:	9302      	str	r3, [sp, #8]
  406688:	2a01      	cmp	r2, #1
  40668a:	f000 828c 	beq.w	406ba6 <_vfiprintf_r+0x9ca>
  40668e:	2a02      	cmp	r2, #2
  406690:	f040 825c 	bne.w	406b4c <_vfiprintf_r+0x970>
  406694:	980b      	ldr	r0, [sp, #44]	; 0x2c
  406696:	46cb      	mov	fp, r9
  406698:	0933      	lsrs	r3, r6, #4
  40669a:	f006 010f 	and.w	r1, r6, #15
  40669e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4066a2:	093a      	lsrs	r2, r7, #4
  4066a4:	461e      	mov	r6, r3
  4066a6:	4617      	mov	r7, r2
  4066a8:	5c43      	ldrb	r3, [r0, r1]
  4066aa:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4066ae:	ea56 0307 	orrs.w	r3, r6, r7
  4066b2:	d1f1      	bne.n	406698 <_vfiprintf_r+0x4bc>
  4066b4:	eba9 030b 	sub.w	r3, r9, fp
  4066b8:	9305      	str	r3, [sp, #20]
  4066ba:	e6e1      	b.n	406480 <_vfiprintf_r+0x2a4>
  4066bc:	2800      	cmp	r0, #0
  4066be:	f040 83c0 	bne.w	406e42 <_vfiprintf_r+0xc66>
  4066c2:	0699      	lsls	r1, r3, #26
  4066c4:	f100 8367 	bmi.w	406d96 <_vfiprintf_r+0xbba>
  4066c8:	06da      	lsls	r2, r3, #27
  4066ca:	f100 80f1 	bmi.w	4068b0 <_vfiprintf_r+0x6d4>
  4066ce:	065b      	lsls	r3, r3, #25
  4066d0:	f140 80ee 	bpl.w	4068b0 <_vfiprintf_r+0x6d4>
  4066d4:	9a07      	ldr	r2, [sp, #28]
  4066d6:	6813      	ldr	r3, [r2, #0]
  4066d8:	3204      	adds	r2, #4
  4066da:	9207      	str	r2, [sp, #28]
  4066dc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4066e0:	801a      	strh	r2, [r3, #0]
  4066e2:	e5b8      	b.n	406256 <_vfiprintf_r+0x7a>
  4066e4:	9807      	ldr	r0, [sp, #28]
  4066e6:	4a3d      	ldr	r2, [pc, #244]	; (4067dc <_vfiprintf_r+0x600>)
  4066e8:	9608      	str	r6, [sp, #32]
  4066ea:	920b      	str	r2, [sp, #44]	; 0x2c
  4066ec:	6806      	ldr	r6, [r0, #0]
  4066ee:	2278      	movs	r2, #120	; 0x78
  4066f0:	2130      	movs	r1, #48	; 0x30
  4066f2:	3004      	adds	r0, #4
  4066f4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4066f8:	f043 0302 	orr.w	r3, r3, #2
  4066fc:	9007      	str	r0, [sp, #28]
  4066fe:	2700      	movs	r7, #0
  406700:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  406704:	2202      	movs	r2, #2
  406706:	e69c      	b.n	406442 <_vfiprintf_r+0x266>
  406708:	9608      	str	r6, [sp, #32]
  40670a:	2800      	cmp	r0, #0
  40670c:	d099      	beq.n	406642 <_vfiprintf_r+0x466>
  40670e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406712:	e796      	b.n	406642 <_vfiprintf_r+0x466>
  406714:	f898 2000 	ldrb.w	r2, [r8]
  406718:	2d00      	cmp	r5, #0
  40671a:	f47f add1 	bne.w	4062c0 <_vfiprintf_r+0xe4>
  40671e:	2001      	movs	r0, #1
  406720:	2520      	movs	r5, #32
  406722:	e5cd      	b.n	4062c0 <_vfiprintf_r+0xe4>
  406724:	f043 0301 	orr.w	r3, r3, #1
  406728:	f898 2000 	ldrb.w	r2, [r8]
  40672c:	e5c8      	b.n	4062c0 <_vfiprintf_r+0xe4>
  40672e:	9608      	str	r6, [sp, #32]
  406730:	2800      	cmp	r0, #0
  406732:	f040 8393 	bne.w	406e5c <_vfiprintf_r+0xc80>
  406736:	4929      	ldr	r1, [pc, #164]	; (4067dc <_vfiprintf_r+0x600>)
  406738:	910b      	str	r1, [sp, #44]	; 0x2c
  40673a:	069f      	lsls	r7, r3, #26
  40673c:	f100 82e8 	bmi.w	406d10 <_vfiprintf_r+0xb34>
  406740:	9807      	ldr	r0, [sp, #28]
  406742:	06de      	lsls	r6, r3, #27
  406744:	4601      	mov	r1, r0
  406746:	f100 8270 	bmi.w	406c2a <_vfiprintf_r+0xa4e>
  40674a:	065d      	lsls	r5, r3, #25
  40674c:	f140 826d 	bpl.w	406c2a <_vfiprintf_r+0xa4e>
  406750:	3104      	adds	r1, #4
  406752:	8806      	ldrh	r6, [r0, #0]
  406754:	9107      	str	r1, [sp, #28]
  406756:	2700      	movs	r7, #0
  406758:	07d8      	lsls	r0, r3, #31
  40675a:	f140 8222 	bpl.w	406ba2 <_vfiprintf_r+0x9c6>
  40675e:	ea56 0107 	orrs.w	r1, r6, r7
  406762:	f000 821e 	beq.w	406ba2 <_vfiprintf_r+0x9c6>
  406766:	2130      	movs	r1, #48	; 0x30
  406768:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40676c:	f043 0302 	orr.w	r3, r3, #2
  406770:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  406774:	2202      	movs	r2, #2
  406776:	e664      	b.n	406442 <_vfiprintf_r+0x266>
  406778:	9608      	str	r6, [sp, #32]
  40677a:	2800      	cmp	r0, #0
  40677c:	f040 836b 	bne.w	406e56 <_vfiprintf_r+0xc7a>
  406780:	4917      	ldr	r1, [pc, #92]	; (4067e0 <_vfiprintf_r+0x604>)
  406782:	910b      	str	r1, [sp, #44]	; 0x2c
  406784:	e7d9      	b.n	40673a <_vfiprintf_r+0x55e>
  406786:	9907      	ldr	r1, [sp, #28]
  406788:	9608      	str	r6, [sp, #32]
  40678a:	680a      	ldr	r2, [r1, #0]
  40678c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  406790:	f04f 0000 	mov.w	r0, #0
  406794:	460a      	mov	r2, r1
  406796:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40679a:	3204      	adds	r2, #4
  40679c:	2001      	movs	r0, #1
  40679e:	9001      	str	r0, [sp, #4]
  4067a0:	9207      	str	r2, [sp, #28]
  4067a2:	9005      	str	r0, [sp, #20]
  4067a4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4067a8:	9302      	str	r3, [sp, #8]
  4067aa:	2400      	movs	r4, #0
  4067ac:	e670      	b.n	406490 <_vfiprintf_r+0x2b4>
  4067ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4067b2:	f898 2000 	ldrb.w	r2, [r8]
  4067b6:	e583      	b.n	4062c0 <_vfiprintf_r+0xe4>
  4067b8:	f898 2000 	ldrb.w	r2, [r8]
  4067bc:	2a6c      	cmp	r2, #108	; 0x6c
  4067be:	bf03      	ittte	eq
  4067c0:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4067c4:	f043 0320 	orreq.w	r3, r3, #32
  4067c8:	f108 0801 	addeq.w	r8, r8, #1
  4067cc:	f043 0310 	orrne.w	r3, r3, #16
  4067d0:	e576      	b.n	4062c0 <_vfiprintf_r+0xe4>
  4067d2:	bf00      	nop
  4067d4:	00409134 	.word	0x00409134
  4067d8:	00409144 	.word	0x00409144
  4067dc:	00409118 	.word	0x00409118
  4067e0:	00409104 	.word	0x00409104
  4067e4:	9907      	ldr	r1, [sp, #28]
  4067e6:	680e      	ldr	r6, [r1, #0]
  4067e8:	460a      	mov	r2, r1
  4067ea:	2e00      	cmp	r6, #0
  4067ec:	f102 0204 	add.w	r2, r2, #4
  4067f0:	f6ff ae0f 	blt.w	406412 <_vfiprintf_r+0x236>
  4067f4:	9207      	str	r2, [sp, #28]
  4067f6:	f898 2000 	ldrb.w	r2, [r8]
  4067fa:	e561      	b.n	4062c0 <_vfiprintf_r+0xe4>
  4067fc:	f898 2000 	ldrb.w	r2, [r8]
  406800:	2001      	movs	r0, #1
  406802:	252b      	movs	r5, #43	; 0x2b
  406804:	e55c      	b.n	4062c0 <_vfiprintf_r+0xe4>
  406806:	9907      	ldr	r1, [sp, #28]
  406808:	9608      	str	r6, [sp, #32]
  40680a:	f8d1 b000 	ldr.w	fp, [r1]
  40680e:	f04f 0200 	mov.w	r2, #0
  406812:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406816:	1d0e      	adds	r6, r1, #4
  406818:	f1bb 0f00 	cmp.w	fp, #0
  40681c:	f000 82e5 	beq.w	406dea <_vfiprintf_r+0xc0e>
  406820:	1c67      	adds	r7, r4, #1
  406822:	f000 82c4 	beq.w	406dae <_vfiprintf_r+0xbd2>
  406826:	4622      	mov	r2, r4
  406828:	2100      	movs	r1, #0
  40682a:	4658      	mov	r0, fp
  40682c:	9301      	str	r3, [sp, #4]
  40682e:	f001 f91f 	bl	407a70 <memchr>
  406832:	9b01      	ldr	r3, [sp, #4]
  406834:	2800      	cmp	r0, #0
  406836:	f000 82e5 	beq.w	406e04 <_vfiprintf_r+0xc28>
  40683a:	eba0 020b 	sub.w	r2, r0, fp
  40683e:	9205      	str	r2, [sp, #20]
  406840:	9607      	str	r6, [sp, #28]
  406842:	9302      	str	r3, [sp, #8]
  406844:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406848:	2400      	movs	r4, #0
  40684a:	e619      	b.n	406480 <_vfiprintf_r+0x2a4>
  40684c:	f898 2000 	ldrb.w	r2, [r8]
  406850:	2a2a      	cmp	r2, #42	; 0x2a
  406852:	f108 0701 	add.w	r7, r8, #1
  406856:	f000 82e9 	beq.w	406e2c <_vfiprintf_r+0xc50>
  40685a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40685e:	2909      	cmp	r1, #9
  406860:	46b8      	mov	r8, r7
  406862:	f04f 0400 	mov.w	r4, #0
  406866:	f63f ad2d 	bhi.w	4062c4 <_vfiprintf_r+0xe8>
  40686a:	f818 2b01 	ldrb.w	r2, [r8], #1
  40686e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  406872:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  406876:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40687a:	2909      	cmp	r1, #9
  40687c:	d9f5      	bls.n	40686a <_vfiprintf_r+0x68e>
  40687e:	e521      	b.n	4062c4 <_vfiprintf_r+0xe8>
  406880:	f043 0320 	orr.w	r3, r3, #32
  406884:	f898 2000 	ldrb.w	r2, [r8]
  406888:	e51a      	b.n	4062c0 <_vfiprintf_r+0xe4>
  40688a:	9608      	str	r6, [sp, #32]
  40688c:	2800      	cmp	r0, #0
  40688e:	f040 82db 	bne.w	406e48 <_vfiprintf_r+0xc6c>
  406892:	2a00      	cmp	r2, #0
  406894:	f000 80e7 	beq.w	406a66 <_vfiprintf_r+0x88a>
  406898:	2101      	movs	r1, #1
  40689a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40689e:	f04f 0200 	mov.w	r2, #0
  4068a2:	9101      	str	r1, [sp, #4]
  4068a4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4068a8:	9105      	str	r1, [sp, #20]
  4068aa:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4068ae:	e77b      	b.n	4067a8 <_vfiprintf_r+0x5cc>
  4068b0:	9a07      	ldr	r2, [sp, #28]
  4068b2:	6813      	ldr	r3, [r2, #0]
  4068b4:	3204      	adds	r2, #4
  4068b6:	9207      	str	r2, [sp, #28]
  4068b8:	9a03      	ldr	r2, [sp, #12]
  4068ba:	601a      	str	r2, [r3, #0]
  4068bc:	e4cb      	b.n	406256 <_vfiprintf_r+0x7a>
  4068be:	aa0f      	add	r2, sp, #60	; 0x3c
  4068c0:	9904      	ldr	r1, [sp, #16]
  4068c2:	4620      	mov	r0, r4
  4068c4:	f7ff fc4a 	bl	40615c <__sprint_r.part.0>
  4068c8:	2800      	cmp	r0, #0
  4068ca:	f040 8139 	bne.w	406b40 <_vfiprintf_r+0x964>
  4068ce:	9910      	ldr	r1, [sp, #64]	; 0x40
  4068d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4068d2:	f101 0c01 	add.w	ip, r1, #1
  4068d6:	46ce      	mov	lr, r9
  4068d8:	e5ff      	b.n	4064da <_vfiprintf_r+0x2fe>
  4068da:	9910      	ldr	r1, [sp, #64]	; 0x40
  4068dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4068de:	1c48      	adds	r0, r1, #1
  4068e0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4068e4:	2d00      	cmp	r5, #0
  4068e6:	f43f ae22 	beq.w	40652e <_vfiprintf_r+0x352>
  4068ea:	3201      	adds	r2, #1
  4068ec:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4068f0:	2101      	movs	r1, #1
  4068f2:	2807      	cmp	r0, #7
  4068f4:	9211      	str	r2, [sp, #68]	; 0x44
  4068f6:	9010      	str	r0, [sp, #64]	; 0x40
  4068f8:	f8ca 5000 	str.w	r5, [sl]
  4068fc:	f8ca 1004 	str.w	r1, [sl, #4]
  406900:	f340 8108 	ble.w	406b14 <_vfiprintf_r+0x938>
  406904:	2a00      	cmp	r2, #0
  406906:	f040 81bc 	bne.w	406c82 <_vfiprintf_r+0xaa6>
  40690a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40690c:	2b00      	cmp	r3, #0
  40690e:	f43f ae1f 	beq.w	406550 <_vfiprintf_r+0x374>
  406912:	ab0e      	add	r3, sp, #56	; 0x38
  406914:	2202      	movs	r2, #2
  406916:	4608      	mov	r0, r1
  406918:	931c      	str	r3, [sp, #112]	; 0x70
  40691a:	921d      	str	r2, [sp, #116]	; 0x74
  40691c:	46ca      	mov	sl, r9
  40691e:	4601      	mov	r1, r0
  406920:	f10a 0a08 	add.w	sl, sl, #8
  406924:	3001      	adds	r0, #1
  406926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406928:	2b80      	cmp	r3, #128	; 0x80
  40692a:	f43f ae19 	beq.w	406560 <_vfiprintf_r+0x384>
  40692e:	9b05      	ldr	r3, [sp, #20]
  406930:	1ae4      	subs	r4, r4, r3
  406932:	2c00      	cmp	r4, #0
  406934:	dd2e      	ble.n	406994 <_vfiprintf_r+0x7b8>
  406936:	2c10      	cmp	r4, #16
  406938:	4db3      	ldr	r5, [pc, #716]	; (406c08 <_vfiprintf_r+0xa2c>)
  40693a:	dd1e      	ble.n	40697a <_vfiprintf_r+0x79e>
  40693c:	46d6      	mov	lr, sl
  40693e:	2610      	movs	r6, #16
  406940:	9f06      	ldr	r7, [sp, #24]
  406942:	f8dd a010 	ldr.w	sl, [sp, #16]
  406946:	e006      	b.n	406956 <_vfiprintf_r+0x77a>
  406948:	1c88      	adds	r0, r1, #2
  40694a:	f10e 0e08 	add.w	lr, lr, #8
  40694e:	4619      	mov	r1, r3
  406950:	3c10      	subs	r4, #16
  406952:	2c10      	cmp	r4, #16
  406954:	dd10      	ble.n	406978 <_vfiprintf_r+0x79c>
  406956:	1c4b      	adds	r3, r1, #1
  406958:	3210      	adds	r2, #16
  40695a:	2b07      	cmp	r3, #7
  40695c:	9211      	str	r2, [sp, #68]	; 0x44
  40695e:	e88e 0060 	stmia.w	lr, {r5, r6}
  406962:	9310      	str	r3, [sp, #64]	; 0x40
  406964:	ddf0      	ble.n	406948 <_vfiprintf_r+0x76c>
  406966:	2a00      	cmp	r2, #0
  406968:	d165      	bne.n	406a36 <_vfiprintf_r+0x85a>
  40696a:	3c10      	subs	r4, #16
  40696c:	2c10      	cmp	r4, #16
  40696e:	f04f 0001 	mov.w	r0, #1
  406972:	4611      	mov	r1, r2
  406974:	46ce      	mov	lr, r9
  406976:	dcee      	bgt.n	406956 <_vfiprintf_r+0x77a>
  406978:	46f2      	mov	sl, lr
  40697a:	4422      	add	r2, r4
  40697c:	2807      	cmp	r0, #7
  40697e:	9211      	str	r2, [sp, #68]	; 0x44
  406980:	f8ca 5000 	str.w	r5, [sl]
  406984:	f8ca 4004 	str.w	r4, [sl, #4]
  406988:	9010      	str	r0, [sp, #64]	; 0x40
  40698a:	f300 8085 	bgt.w	406a98 <_vfiprintf_r+0x8bc>
  40698e:	f10a 0a08 	add.w	sl, sl, #8
  406992:	3001      	adds	r0, #1
  406994:	9905      	ldr	r1, [sp, #20]
  406996:	f8ca b000 	str.w	fp, [sl]
  40699a:	440a      	add	r2, r1
  40699c:	2807      	cmp	r0, #7
  40699e:	9211      	str	r2, [sp, #68]	; 0x44
  4069a0:	f8ca 1004 	str.w	r1, [sl, #4]
  4069a4:	9010      	str	r0, [sp, #64]	; 0x40
  4069a6:	f340 8082 	ble.w	406aae <_vfiprintf_r+0x8d2>
  4069aa:	2a00      	cmp	r2, #0
  4069ac:	f040 8118 	bne.w	406be0 <_vfiprintf_r+0xa04>
  4069b0:	9b02      	ldr	r3, [sp, #8]
  4069b2:	9210      	str	r2, [sp, #64]	; 0x40
  4069b4:	0758      	lsls	r0, r3, #29
  4069b6:	d535      	bpl.n	406a24 <_vfiprintf_r+0x848>
  4069b8:	9b08      	ldr	r3, [sp, #32]
  4069ba:	9901      	ldr	r1, [sp, #4]
  4069bc:	1a5c      	subs	r4, r3, r1
  4069be:	2c00      	cmp	r4, #0
  4069c0:	f340 80e7 	ble.w	406b92 <_vfiprintf_r+0x9b6>
  4069c4:	46ca      	mov	sl, r9
  4069c6:	2c10      	cmp	r4, #16
  4069c8:	f340 8218 	ble.w	406dfc <_vfiprintf_r+0xc20>
  4069cc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4069ce:	4e8f      	ldr	r6, [pc, #572]	; (406c0c <_vfiprintf_r+0xa30>)
  4069d0:	9f06      	ldr	r7, [sp, #24]
  4069d2:	f8dd b010 	ldr.w	fp, [sp, #16]
  4069d6:	2510      	movs	r5, #16
  4069d8:	e006      	b.n	4069e8 <_vfiprintf_r+0x80c>
  4069da:	1c88      	adds	r0, r1, #2
  4069dc:	f10a 0a08 	add.w	sl, sl, #8
  4069e0:	4619      	mov	r1, r3
  4069e2:	3c10      	subs	r4, #16
  4069e4:	2c10      	cmp	r4, #16
  4069e6:	dd11      	ble.n	406a0c <_vfiprintf_r+0x830>
  4069e8:	1c4b      	adds	r3, r1, #1
  4069ea:	3210      	adds	r2, #16
  4069ec:	2b07      	cmp	r3, #7
  4069ee:	9211      	str	r2, [sp, #68]	; 0x44
  4069f0:	f8ca 6000 	str.w	r6, [sl]
  4069f4:	f8ca 5004 	str.w	r5, [sl, #4]
  4069f8:	9310      	str	r3, [sp, #64]	; 0x40
  4069fa:	ddee      	ble.n	4069da <_vfiprintf_r+0x7fe>
  4069fc:	bb42      	cbnz	r2, 406a50 <_vfiprintf_r+0x874>
  4069fe:	3c10      	subs	r4, #16
  406a00:	2c10      	cmp	r4, #16
  406a02:	f04f 0001 	mov.w	r0, #1
  406a06:	4611      	mov	r1, r2
  406a08:	46ca      	mov	sl, r9
  406a0a:	dced      	bgt.n	4069e8 <_vfiprintf_r+0x80c>
  406a0c:	4422      	add	r2, r4
  406a0e:	2807      	cmp	r0, #7
  406a10:	9211      	str	r2, [sp, #68]	; 0x44
  406a12:	f8ca 6000 	str.w	r6, [sl]
  406a16:	f8ca 4004 	str.w	r4, [sl, #4]
  406a1a:	9010      	str	r0, [sp, #64]	; 0x40
  406a1c:	dd51      	ble.n	406ac2 <_vfiprintf_r+0x8e6>
  406a1e:	2a00      	cmp	r2, #0
  406a20:	f040 819b 	bne.w	406d5a <_vfiprintf_r+0xb7e>
  406a24:	9b03      	ldr	r3, [sp, #12]
  406a26:	9a08      	ldr	r2, [sp, #32]
  406a28:	9901      	ldr	r1, [sp, #4]
  406a2a:	428a      	cmp	r2, r1
  406a2c:	bfac      	ite	ge
  406a2e:	189b      	addge	r3, r3, r2
  406a30:	185b      	addlt	r3, r3, r1
  406a32:	9303      	str	r3, [sp, #12]
  406a34:	e04e      	b.n	406ad4 <_vfiprintf_r+0x8f8>
  406a36:	aa0f      	add	r2, sp, #60	; 0x3c
  406a38:	4651      	mov	r1, sl
  406a3a:	4638      	mov	r0, r7
  406a3c:	f7ff fb8e 	bl	40615c <__sprint_r.part.0>
  406a40:	2800      	cmp	r0, #0
  406a42:	f040 813f 	bne.w	406cc4 <_vfiprintf_r+0xae8>
  406a46:	9910      	ldr	r1, [sp, #64]	; 0x40
  406a48:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406a4a:	1c48      	adds	r0, r1, #1
  406a4c:	46ce      	mov	lr, r9
  406a4e:	e77f      	b.n	406950 <_vfiprintf_r+0x774>
  406a50:	aa0f      	add	r2, sp, #60	; 0x3c
  406a52:	4659      	mov	r1, fp
  406a54:	4638      	mov	r0, r7
  406a56:	f7ff fb81 	bl	40615c <__sprint_r.part.0>
  406a5a:	b960      	cbnz	r0, 406a76 <_vfiprintf_r+0x89a>
  406a5c:	9910      	ldr	r1, [sp, #64]	; 0x40
  406a5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406a60:	1c48      	adds	r0, r1, #1
  406a62:	46ca      	mov	sl, r9
  406a64:	e7bd      	b.n	4069e2 <_vfiprintf_r+0x806>
  406a66:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406a68:	f8dd b010 	ldr.w	fp, [sp, #16]
  406a6c:	2b00      	cmp	r3, #0
  406a6e:	f040 81d4 	bne.w	406e1a <_vfiprintf_r+0xc3e>
  406a72:	2300      	movs	r3, #0
  406a74:	9310      	str	r3, [sp, #64]	; 0x40
  406a76:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406a7a:	f013 0f01 	tst.w	r3, #1
  406a7e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  406a82:	d102      	bne.n	406a8a <_vfiprintf_r+0x8ae>
  406a84:	059a      	lsls	r2, r3, #22
  406a86:	f140 80de 	bpl.w	406c46 <_vfiprintf_r+0xa6a>
  406a8a:	065b      	lsls	r3, r3, #25
  406a8c:	f53f acb2 	bmi.w	4063f4 <_vfiprintf_r+0x218>
  406a90:	9803      	ldr	r0, [sp, #12]
  406a92:	b02d      	add	sp, #180	; 0xb4
  406a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a98:	2a00      	cmp	r2, #0
  406a9a:	f040 8106 	bne.w	406caa <_vfiprintf_r+0xace>
  406a9e:	9a05      	ldr	r2, [sp, #20]
  406aa0:	921d      	str	r2, [sp, #116]	; 0x74
  406aa2:	2301      	movs	r3, #1
  406aa4:	9211      	str	r2, [sp, #68]	; 0x44
  406aa6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  406aaa:	9310      	str	r3, [sp, #64]	; 0x40
  406aac:	46ca      	mov	sl, r9
  406aae:	f10a 0a08 	add.w	sl, sl, #8
  406ab2:	9b02      	ldr	r3, [sp, #8]
  406ab4:	0759      	lsls	r1, r3, #29
  406ab6:	d504      	bpl.n	406ac2 <_vfiprintf_r+0x8e6>
  406ab8:	9b08      	ldr	r3, [sp, #32]
  406aba:	9901      	ldr	r1, [sp, #4]
  406abc:	1a5c      	subs	r4, r3, r1
  406abe:	2c00      	cmp	r4, #0
  406ac0:	dc81      	bgt.n	4069c6 <_vfiprintf_r+0x7ea>
  406ac2:	9b03      	ldr	r3, [sp, #12]
  406ac4:	9908      	ldr	r1, [sp, #32]
  406ac6:	9801      	ldr	r0, [sp, #4]
  406ac8:	4281      	cmp	r1, r0
  406aca:	bfac      	ite	ge
  406acc:	185b      	addge	r3, r3, r1
  406ace:	181b      	addlt	r3, r3, r0
  406ad0:	9303      	str	r3, [sp, #12]
  406ad2:	bb72      	cbnz	r2, 406b32 <_vfiprintf_r+0x956>
  406ad4:	2300      	movs	r3, #0
  406ad6:	9310      	str	r3, [sp, #64]	; 0x40
  406ad8:	46ca      	mov	sl, r9
  406ada:	f7ff bbbc 	b.w	406256 <_vfiprintf_r+0x7a>
  406ade:	aa0f      	add	r2, sp, #60	; 0x3c
  406ae0:	9904      	ldr	r1, [sp, #16]
  406ae2:	4620      	mov	r0, r4
  406ae4:	f7ff fb3a 	bl	40615c <__sprint_r.part.0>
  406ae8:	bb50      	cbnz	r0, 406b40 <_vfiprintf_r+0x964>
  406aea:	9910      	ldr	r1, [sp, #64]	; 0x40
  406aec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406aee:	f101 0e01 	add.w	lr, r1, #1
  406af2:	46cc      	mov	ip, r9
  406af4:	e548      	b.n	406588 <_vfiprintf_r+0x3ac>
  406af6:	2a00      	cmp	r2, #0
  406af8:	f040 8140 	bne.w	406d7c <_vfiprintf_r+0xba0>
  406afc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  406b00:	2900      	cmp	r1, #0
  406b02:	f000 811b 	beq.w	406d3c <_vfiprintf_r+0xb60>
  406b06:	2201      	movs	r2, #1
  406b08:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  406b0c:	4610      	mov	r0, r2
  406b0e:	921d      	str	r2, [sp, #116]	; 0x74
  406b10:	911c      	str	r1, [sp, #112]	; 0x70
  406b12:	46ca      	mov	sl, r9
  406b14:	4601      	mov	r1, r0
  406b16:	f10a 0a08 	add.w	sl, sl, #8
  406b1a:	3001      	adds	r0, #1
  406b1c:	e507      	b.n	40652e <_vfiprintf_r+0x352>
  406b1e:	9b02      	ldr	r3, [sp, #8]
  406b20:	2a01      	cmp	r2, #1
  406b22:	f000 8098 	beq.w	406c56 <_vfiprintf_r+0xa7a>
  406b26:	2a02      	cmp	r2, #2
  406b28:	d10d      	bne.n	406b46 <_vfiprintf_r+0x96a>
  406b2a:	9302      	str	r3, [sp, #8]
  406b2c:	2600      	movs	r6, #0
  406b2e:	2700      	movs	r7, #0
  406b30:	e5b0      	b.n	406694 <_vfiprintf_r+0x4b8>
  406b32:	aa0f      	add	r2, sp, #60	; 0x3c
  406b34:	9904      	ldr	r1, [sp, #16]
  406b36:	9806      	ldr	r0, [sp, #24]
  406b38:	f7ff fb10 	bl	40615c <__sprint_r.part.0>
  406b3c:	2800      	cmp	r0, #0
  406b3e:	d0c9      	beq.n	406ad4 <_vfiprintf_r+0x8f8>
  406b40:	f8dd b010 	ldr.w	fp, [sp, #16]
  406b44:	e797      	b.n	406a76 <_vfiprintf_r+0x89a>
  406b46:	9302      	str	r3, [sp, #8]
  406b48:	2600      	movs	r6, #0
  406b4a:	2700      	movs	r7, #0
  406b4c:	4649      	mov	r1, r9
  406b4e:	e000      	b.n	406b52 <_vfiprintf_r+0x976>
  406b50:	4659      	mov	r1, fp
  406b52:	08f2      	lsrs	r2, r6, #3
  406b54:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  406b58:	08f8      	lsrs	r0, r7, #3
  406b5a:	f006 0307 	and.w	r3, r6, #7
  406b5e:	4607      	mov	r7, r0
  406b60:	4616      	mov	r6, r2
  406b62:	3330      	adds	r3, #48	; 0x30
  406b64:	ea56 0207 	orrs.w	r2, r6, r7
  406b68:	f801 3c01 	strb.w	r3, [r1, #-1]
  406b6c:	f101 3bff 	add.w	fp, r1, #4294967295
  406b70:	d1ee      	bne.n	406b50 <_vfiprintf_r+0x974>
  406b72:	9a02      	ldr	r2, [sp, #8]
  406b74:	07d6      	lsls	r6, r2, #31
  406b76:	f57f ad9d 	bpl.w	4066b4 <_vfiprintf_r+0x4d8>
  406b7a:	2b30      	cmp	r3, #48	; 0x30
  406b7c:	f43f ad9a 	beq.w	4066b4 <_vfiprintf_r+0x4d8>
  406b80:	3902      	subs	r1, #2
  406b82:	2330      	movs	r3, #48	; 0x30
  406b84:	f80b 3c01 	strb.w	r3, [fp, #-1]
  406b88:	eba9 0301 	sub.w	r3, r9, r1
  406b8c:	9305      	str	r3, [sp, #20]
  406b8e:	468b      	mov	fp, r1
  406b90:	e476      	b.n	406480 <_vfiprintf_r+0x2a4>
  406b92:	9b03      	ldr	r3, [sp, #12]
  406b94:	9a08      	ldr	r2, [sp, #32]
  406b96:	428a      	cmp	r2, r1
  406b98:	bfac      	ite	ge
  406b9a:	189b      	addge	r3, r3, r2
  406b9c:	185b      	addlt	r3, r3, r1
  406b9e:	9303      	str	r3, [sp, #12]
  406ba0:	e798      	b.n	406ad4 <_vfiprintf_r+0x8f8>
  406ba2:	2202      	movs	r2, #2
  406ba4:	e44d      	b.n	406442 <_vfiprintf_r+0x266>
  406ba6:	2f00      	cmp	r7, #0
  406ba8:	bf08      	it	eq
  406baa:	2e0a      	cmpeq	r6, #10
  406bac:	d352      	bcc.n	406c54 <_vfiprintf_r+0xa78>
  406bae:	46cb      	mov	fp, r9
  406bb0:	4630      	mov	r0, r6
  406bb2:	4639      	mov	r1, r7
  406bb4:	220a      	movs	r2, #10
  406bb6:	2300      	movs	r3, #0
  406bb8:	f001 fbc6 	bl	408348 <__aeabi_uldivmod>
  406bbc:	3230      	adds	r2, #48	; 0x30
  406bbe:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  406bc2:	4630      	mov	r0, r6
  406bc4:	4639      	mov	r1, r7
  406bc6:	2300      	movs	r3, #0
  406bc8:	220a      	movs	r2, #10
  406bca:	f001 fbbd 	bl	408348 <__aeabi_uldivmod>
  406bce:	4606      	mov	r6, r0
  406bd0:	460f      	mov	r7, r1
  406bd2:	ea56 0307 	orrs.w	r3, r6, r7
  406bd6:	d1eb      	bne.n	406bb0 <_vfiprintf_r+0x9d4>
  406bd8:	e56c      	b.n	4066b4 <_vfiprintf_r+0x4d8>
  406bda:	9405      	str	r4, [sp, #20]
  406bdc:	46cb      	mov	fp, r9
  406bde:	e44f      	b.n	406480 <_vfiprintf_r+0x2a4>
  406be0:	aa0f      	add	r2, sp, #60	; 0x3c
  406be2:	9904      	ldr	r1, [sp, #16]
  406be4:	9806      	ldr	r0, [sp, #24]
  406be6:	f7ff fab9 	bl	40615c <__sprint_r.part.0>
  406bea:	2800      	cmp	r0, #0
  406bec:	d1a8      	bne.n	406b40 <_vfiprintf_r+0x964>
  406bee:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406bf0:	46ca      	mov	sl, r9
  406bf2:	e75e      	b.n	406ab2 <_vfiprintf_r+0x8d6>
  406bf4:	aa0f      	add	r2, sp, #60	; 0x3c
  406bf6:	9904      	ldr	r1, [sp, #16]
  406bf8:	9806      	ldr	r0, [sp, #24]
  406bfa:	f7ff faaf 	bl	40615c <__sprint_r.part.0>
  406bfe:	2800      	cmp	r0, #0
  406c00:	d19e      	bne.n	406b40 <_vfiprintf_r+0x964>
  406c02:	46ca      	mov	sl, r9
  406c04:	f7ff bbc0 	b.w	406388 <_vfiprintf_r+0x1ac>
  406c08:	00409144 	.word	0x00409144
  406c0c:	00409134 	.word	0x00409134
  406c10:	3104      	adds	r1, #4
  406c12:	6816      	ldr	r6, [r2, #0]
  406c14:	9107      	str	r1, [sp, #28]
  406c16:	2201      	movs	r2, #1
  406c18:	2700      	movs	r7, #0
  406c1a:	e412      	b.n	406442 <_vfiprintf_r+0x266>
  406c1c:	9807      	ldr	r0, [sp, #28]
  406c1e:	4601      	mov	r1, r0
  406c20:	3104      	adds	r1, #4
  406c22:	6806      	ldr	r6, [r0, #0]
  406c24:	9107      	str	r1, [sp, #28]
  406c26:	2700      	movs	r7, #0
  406c28:	e40b      	b.n	406442 <_vfiprintf_r+0x266>
  406c2a:	680e      	ldr	r6, [r1, #0]
  406c2c:	3104      	adds	r1, #4
  406c2e:	9107      	str	r1, [sp, #28]
  406c30:	2700      	movs	r7, #0
  406c32:	e591      	b.n	406758 <_vfiprintf_r+0x57c>
  406c34:	9907      	ldr	r1, [sp, #28]
  406c36:	680e      	ldr	r6, [r1, #0]
  406c38:	460a      	mov	r2, r1
  406c3a:	17f7      	asrs	r7, r6, #31
  406c3c:	3204      	adds	r2, #4
  406c3e:	9207      	str	r2, [sp, #28]
  406c40:	4630      	mov	r0, r6
  406c42:	4639      	mov	r1, r7
  406c44:	e50f      	b.n	406666 <_vfiprintf_r+0x48a>
  406c46:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406c4a:	f000 fe7f 	bl	40794c <__retarget_lock_release_recursive>
  406c4e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  406c52:	e71a      	b.n	406a8a <_vfiprintf_r+0x8ae>
  406c54:	9b02      	ldr	r3, [sp, #8]
  406c56:	9302      	str	r3, [sp, #8]
  406c58:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  406c5c:	3630      	adds	r6, #48	; 0x30
  406c5e:	2301      	movs	r3, #1
  406c60:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  406c64:	9305      	str	r3, [sp, #20]
  406c66:	e40b      	b.n	406480 <_vfiprintf_r+0x2a4>
  406c68:	aa0f      	add	r2, sp, #60	; 0x3c
  406c6a:	9904      	ldr	r1, [sp, #16]
  406c6c:	9806      	ldr	r0, [sp, #24]
  406c6e:	f7ff fa75 	bl	40615c <__sprint_r.part.0>
  406c72:	2800      	cmp	r0, #0
  406c74:	f47f af64 	bne.w	406b40 <_vfiprintf_r+0x964>
  406c78:	9910      	ldr	r1, [sp, #64]	; 0x40
  406c7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406c7c:	1c48      	adds	r0, r1, #1
  406c7e:	46ca      	mov	sl, r9
  406c80:	e651      	b.n	406926 <_vfiprintf_r+0x74a>
  406c82:	aa0f      	add	r2, sp, #60	; 0x3c
  406c84:	9904      	ldr	r1, [sp, #16]
  406c86:	9806      	ldr	r0, [sp, #24]
  406c88:	f7ff fa68 	bl	40615c <__sprint_r.part.0>
  406c8c:	2800      	cmp	r0, #0
  406c8e:	f47f af57 	bne.w	406b40 <_vfiprintf_r+0x964>
  406c92:	9910      	ldr	r1, [sp, #64]	; 0x40
  406c94:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406c96:	1c48      	adds	r0, r1, #1
  406c98:	46ca      	mov	sl, r9
  406c9a:	e448      	b.n	40652e <_vfiprintf_r+0x352>
  406c9c:	2a00      	cmp	r2, #0
  406c9e:	f040 8091 	bne.w	406dc4 <_vfiprintf_r+0xbe8>
  406ca2:	2001      	movs	r0, #1
  406ca4:	4611      	mov	r1, r2
  406ca6:	46ca      	mov	sl, r9
  406ca8:	e641      	b.n	40692e <_vfiprintf_r+0x752>
  406caa:	aa0f      	add	r2, sp, #60	; 0x3c
  406cac:	9904      	ldr	r1, [sp, #16]
  406cae:	9806      	ldr	r0, [sp, #24]
  406cb0:	f7ff fa54 	bl	40615c <__sprint_r.part.0>
  406cb4:	2800      	cmp	r0, #0
  406cb6:	f47f af43 	bne.w	406b40 <_vfiprintf_r+0x964>
  406cba:	9810      	ldr	r0, [sp, #64]	; 0x40
  406cbc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406cbe:	3001      	adds	r0, #1
  406cc0:	46ca      	mov	sl, r9
  406cc2:	e667      	b.n	406994 <_vfiprintf_r+0x7b8>
  406cc4:	46d3      	mov	fp, sl
  406cc6:	e6d6      	b.n	406a76 <_vfiprintf_r+0x89a>
  406cc8:	9e07      	ldr	r6, [sp, #28]
  406cca:	3607      	adds	r6, #7
  406ccc:	f026 0207 	bic.w	r2, r6, #7
  406cd0:	f102 0108 	add.w	r1, r2, #8
  406cd4:	e9d2 6700 	ldrd	r6, r7, [r2]
  406cd8:	9107      	str	r1, [sp, #28]
  406cda:	2201      	movs	r2, #1
  406cdc:	f7ff bbb1 	b.w	406442 <_vfiprintf_r+0x266>
  406ce0:	9e07      	ldr	r6, [sp, #28]
  406ce2:	3607      	adds	r6, #7
  406ce4:	f026 0607 	bic.w	r6, r6, #7
  406ce8:	e9d6 0100 	ldrd	r0, r1, [r6]
  406cec:	f106 0208 	add.w	r2, r6, #8
  406cf0:	9207      	str	r2, [sp, #28]
  406cf2:	4606      	mov	r6, r0
  406cf4:	460f      	mov	r7, r1
  406cf6:	e4b6      	b.n	406666 <_vfiprintf_r+0x48a>
  406cf8:	9e07      	ldr	r6, [sp, #28]
  406cfa:	3607      	adds	r6, #7
  406cfc:	f026 0207 	bic.w	r2, r6, #7
  406d00:	f102 0108 	add.w	r1, r2, #8
  406d04:	e9d2 6700 	ldrd	r6, r7, [r2]
  406d08:	9107      	str	r1, [sp, #28]
  406d0a:	2200      	movs	r2, #0
  406d0c:	f7ff bb99 	b.w	406442 <_vfiprintf_r+0x266>
  406d10:	9e07      	ldr	r6, [sp, #28]
  406d12:	3607      	adds	r6, #7
  406d14:	f026 0107 	bic.w	r1, r6, #7
  406d18:	f101 0008 	add.w	r0, r1, #8
  406d1c:	9007      	str	r0, [sp, #28]
  406d1e:	e9d1 6700 	ldrd	r6, r7, [r1]
  406d22:	e519      	b.n	406758 <_vfiprintf_r+0x57c>
  406d24:	46cb      	mov	fp, r9
  406d26:	f7ff bbab 	b.w	406480 <_vfiprintf_r+0x2a4>
  406d2a:	252d      	movs	r5, #45	; 0x2d
  406d2c:	4276      	negs	r6, r6
  406d2e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  406d32:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406d36:	2201      	movs	r2, #1
  406d38:	f7ff bb88 	b.w	40644c <_vfiprintf_r+0x270>
  406d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406d3e:	b9b3      	cbnz	r3, 406d6e <_vfiprintf_r+0xb92>
  406d40:	4611      	mov	r1, r2
  406d42:	2001      	movs	r0, #1
  406d44:	46ca      	mov	sl, r9
  406d46:	e5f2      	b.n	40692e <_vfiprintf_r+0x752>
  406d48:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406d4c:	f000 fdfe 	bl	40794c <__retarget_lock_release_recursive>
  406d50:	f04f 33ff 	mov.w	r3, #4294967295
  406d54:	9303      	str	r3, [sp, #12]
  406d56:	f7ff bb50 	b.w	4063fa <_vfiprintf_r+0x21e>
  406d5a:	aa0f      	add	r2, sp, #60	; 0x3c
  406d5c:	9904      	ldr	r1, [sp, #16]
  406d5e:	9806      	ldr	r0, [sp, #24]
  406d60:	f7ff f9fc 	bl	40615c <__sprint_r.part.0>
  406d64:	2800      	cmp	r0, #0
  406d66:	f47f aeeb 	bne.w	406b40 <_vfiprintf_r+0x964>
  406d6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406d6c:	e6a9      	b.n	406ac2 <_vfiprintf_r+0x8e6>
  406d6e:	ab0e      	add	r3, sp, #56	; 0x38
  406d70:	2202      	movs	r2, #2
  406d72:	931c      	str	r3, [sp, #112]	; 0x70
  406d74:	921d      	str	r2, [sp, #116]	; 0x74
  406d76:	2001      	movs	r0, #1
  406d78:	46ca      	mov	sl, r9
  406d7a:	e5d0      	b.n	40691e <_vfiprintf_r+0x742>
  406d7c:	aa0f      	add	r2, sp, #60	; 0x3c
  406d7e:	9904      	ldr	r1, [sp, #16]
  406d80:	9806      	ldr	r0, [sp, #24]
  406d82:	f7ff f9eb 	bl	40615c <__sprint_r.part.0>
  406d86:	2800      	cmp	r0, #0
  406d88:	f47f aeda 	bne.w	406b40 <_vfiprintf_r+0x964>
  406d8c:	9910      	ldr	r1, [sp, #64]	; 0x40
  406d8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406d90:	1c48      	adds	r0, r1, #1
  406d92:	46ca      	mov	sl, r9
  406d94:	e5a4      	b.n	4068e0 <_vfiprintf_r+0x704>
  406d96:	9a07      	ldr	r2, [sp, #28]
  406d98:	9903      	ldr	r1, [sp, #12]
  406d9a:	6813      	ldr	r3, [r2, #0]
  406d9c:	17cd      	asrs	r5, r1, #31
  406d9e:	4608      	mov	r0, r1
  406da0:	3204      	adds	r2, #4
  406da2:	4629      	mov	r1, r5
  406da4:	9207      	str	r2, [sp, #28]
  406da6:	e9c3 0100 	strd	r0, r1, [r3]
  406daa:	f7ff ba54 	b.w	406256 <_vfiprintf_r+0x7a>
  406dae:	4658      	mov	r0, fp
  406db0:	9607      	str	r6, [sp, #28]
  406db2:	9302      	str	r3, [sp, #8]
  406db4:	f7ff f964 	bl	406080 <strlen>
  406db8:	2400      	movs	r4, #0
  406dba:	9005      	str	r0, [sp, #20]
  406dbc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406dc0:	f7ff bb5e 	b.w	406480 <_vfiprintf_r+0x2a4>
  406dc4:	aa0f      	add	r2, sp, #60	; 0x3c
  406dc6:	9904      	ldr	r1, [sp, #16]
  406dc8:	9806      	ldr	r0, [sp, #24]
  406dca:	f7ff f9c7 	bl	40615c <__sprint_r.part.0>
  406dce:	2800      	cmp	r0, #0
  406dd0:	f47f aeb6 	bne.w	406b40 <_vfiprintf_r+0x964>
  406dd4:	9910      	ldr	r1, [sp, #64]	; 0x40
  406dd6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406dd8:	1c48      	adds	r0, r1, #1
  406dda:	46ca      	mov	sl, r9
  406ddc:	e5a7      	b.n	40692e <_vfiprintf_r+0x752>
  406dde:	9910      	ldr	r1, [sp, #64]	; 0x40
  406de0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406de2:	4e20      	ldr	r6, [pc, #128]	; (406e64 <_vfiprintf_r+0xc88>)
  406de4:	3101      	adds	r1, #1
  406de6:	f7ff bb90 	b.w	40650a <_vfiprintf_r+0x32e>
  406dea:	2c06      	cmp	r4, #6
  406dec:	bf28      	it	cs
  406dee:	2406      	movcs	r4, #6
  406df0:	9405      	str	r4, [sp, #20]
  406df2:	9607      	str	r6, [sp, #28]
  406df4:	9401      	str	r4, [sp, #4]
  406df6:	f8df b070 	ldr.w	fp, [pc, #112]	; 406e68 <_vfiprintf_r+0xc8c>
  406dfa:	e4d5      	b.n	4067a8 <_vfiprintf_r+0x5cc>
  406dfc:	9810      	ldr	r0, [sp, #64]	; 0x40
  406dfe:	4e19      	ldr	r6, [pc, #100]	; (406e64 <_vfiprintf_r+0xc88>)
  406e00:	3001      	adds	r0, #1
  406e02:	e603      	b.n	406a0c <_vfiprintf_r+0x830>
  406e04:	9405      	str	r4, [sp, #20]
  406e06:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406e0a:	9607      	str	r6, [sp, #28]
  406e0c:	9302      	str	r3, [sp, #8]
  406e0e:	4604      	mov	r4, r0
  406e10:	f7ff bb36 	b.w	406480 <_vfiprintf_r+0x2a4>
  406e14:	4686      	mov	lr, r0
  406e16:	f7ff bbce 	b.w	4065b6 <_vfiprintf_r+0x3da>
  406e1a:	9806      	ldr	r0, [sp, #24]
  406e1c:	aa0f      	add	r2, sp, #60	; 0x3c
  406e1e:	4659      	mov	r1, fp
  406e20:	f7ff f99c 	bl	40615c <__sprint_r.part.0>
  406e24:	2800      	cmp	r0, #0
  406e26:	f43f ae24 	beq.w	406a72 <_vfiprintf_r+0x896>
  406e2a:	e624      	b.n	406a76 <_vfiprintf_r+0x89a>
  406e2c:	9907      	ldr	r1, [sp, #28]
  406e2e:	f898 2001 	ldrb.w	r2, [r8, #1]
  406e32:	680c      	ldr	r4, [r1, #0]
  406e34:	3104      	adds	r1, #4
  406e36:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  406e3a:	46b8      	mov	r8, r7
  406e3c:	9107      	str	r1, [sp, #28]
  406e3e:	f7ff ba3f 	b.w	4062c0 <_vfiprintf_r+0xe4>
  406e42:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406e46:	e43c      	b.n	4066c2 <_vfiprintf_r+0x4e6>
  406e48:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406e4c:	e521      	b.n	406892 <_vfiprintf_r+0x6b6>
  406e4e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406e52:	f7ff bbf4 	b.w	40663e <_vfiprintf_r+0x462>
  406e56:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406e5a:	e491      	b.n	406780 <_vfiprintf_r+0x5a4>
  406e5c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406e60:	e469      	b.n	406736 <_vfiprintf_r+0x55a>
  406e62:	bf00      	nop
  406e64:	00409134 	.word	0x00409134
  406e68:	0040912c 	.word	0x0040912c

00406e6c <__sbprintf>:
  406e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406e70:	460c      	mov	r4, r1
  406e72:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  406e76:	8989      	ldrh	r1, [r1, #12]
  406e78:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406e7a:	89e5      	ldrh	r5, [r4, #14]
  406e7c:	9619      	str	r6, [sp, #100]	; 0x64
  406e7e:	f021 0102 	bic.w	r1, r1, #2
  406e82:	4606      	mov	r6, r0
  406e84:	69e0      	ldr	r0, [r4, #28]
  406e86:	f8ad 100c 	strh.w	r1, [sp, #12]
  406e8a:	4617      	mov	r7, r2
  406e8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  406e90:	6a62      	ldr	r2, [r4, #36]	; 0x24
  406e92:	f8ad 500e 	strh.w	r5, [sp, #14]
  406e96:	4698      	mov	r8, r3
  406e98:	ad1a      	add	r5, sp, #104	; 0x68
  406e9a:	2300      	movs	r3, #0
  406e9c:	9007      	str	r0, [sp, #28]
  406e9e:	a816      	add	r0, sp, #88	; 0x58
  406ea0:	9209      	str	r2, [sp, #36]	; 0x24
  406ea2:	9306      	str	r3, [sp, #24]
  406ea4:	9500      	str	r5, [sp, #0]
  406ea6:	9504      	str	r5, [sp, #16]
  406ea8:	9102      	str	r1, [sp, #8]
  406eaa:	9105      	str	r1, [sp, #20]
  406eac:	f000 fd48 	bl	407940 <__retarget_lock_init_recursive>
  406eb0:	4643      	mov	r3, r8
  406eb2:	463a      	mov	r2, r7
  406eb4:	4669      	mov	r1, sp
  406eb6:	4630      	mov	r0, r6
  406eb8:	f7ff f990 	bl	4061dc <_vfiprintf_r>
  406ebc:	1e05      	subs	r5, r0, #0
  406ebe:	db07      	blt.n	406ed0 <__sbprintf+0x64>
  406ec0:	4630      	mov	r0, r6
  406ec2:	4669      	mov	r1, sp
  406ec4:	f000 f928 	bl	407118 <_fflush_r>
  406ec8:	2800      	cmp	r0, #0
  406eca:	bf18      	it	ne
  406ecc:	f04f 35ff 	movne.w	r5, #4294967295
  406ed0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  406ed4:	065b      	lsls	r3, r3, #25
  406ed6:	d503      	bpl.n	406ee0 <__sbprintf+0x74>
  406ed8:	89a3      	ldrh	r3, [r4, #12]
  406eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406ede:	81a3      	strh	r3, [r4, #12]
  406ee0:	9816      	ldr	r0, [sp, #88]	; 0x58
  406ee2:	f000 fd2f 	bl	407944 <__retarget_lock_close_recursive>
  406ee6:	4628      	mov	r0, r5
  406ee8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  406eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00406ef0 <__swsetup_r>:
  406ef0:	b538      	push	{r3, r4, r5, lr}
  406ef2:	4b30      	ldr	r3, [pc, #192]	; (406fb4 <__swsetup_r+0xc4>)
  406ef4:	681b      	ldr	r3, [r3, #0]
  406ef6:	4605      	mov	r5, r0
  406ef8:	460c      	mov	r4, r1
  406efa:	b113      	cbz	r3, 406f02 <__swsetup_r+0x12>
  406efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  406efe:	2a00      	cmp	r2, #0
  406f00:	d038      	beq.n	406f74 <__swsetup_r+0x84>
  406f02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406f06:	b293      	uxth	r3, r2
  406f08:	0718      	lsls	r0, r3, #28
  406f0a:	d50c      	bpl.n	406f26 <__swsetup_r+0x36>
  406f0c:	6920      	ldr	r0, [r4, #16]
  406f0e:	b1a8      	cbz	r0, 406f3c <__swsetup_r+0x4c>
  406f10:	f013 0201 	ands.w	r2, r3, #1
  406f14:	d01e      	beq.n	406f54 <__swsetup_r+0x64>
  406f16:	6963      	ldr	r3, [r4, #20]
  406f18:	2200      	movs	r2, #0
  406f1a:	425b      	negs	r3, r3
  406f1c:	61a3      	str	r3, [r4, #24]
  406f1e:	60a2      	str	r2, [r4, #8]
  406f20:	b1f0      	cbz	r0, 406f60 <__swsetup_r+0x70>
  406f22:	2000      	movs	r0, #0
  406f24:	bd38      	pop	{r3, r4, r5, pc}
  406f26:	06d9      	lsls	r1, r3, #27
  406f28:	d53c      	bpl.n	406fa4 <__swsetup_r+0xb4>
  406f2a:	0758      	lsls	r0, r3, #29
  406f2c:	d426      	bmi.n	406f7c <__swsetup_r+0x8c>
  406f2e:	6920      	ldr	r0, [r4, #16]
  406f30:	f042 0308 	orr.w	r3, r2, #8
  406f34:	81a3      	strh	r3, [r4, #12]
  406f36:	b29b      	uxth	r3, r3
  406f38:	2800      	cmp	r0, #0
  406f3a:	d1e9      	bne.n	406f10 <__swsetup_r+0x20>
  406f3c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  406f40:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  406f44:	d0e4      	beq.n	406f10 <__swsetup_r+0x20>
  406f46:	4628      	mov	r0, r5
  406f48:	4621      	mov	r1, r4
  406f4a:	f000 fd2f 	bl	4079ac <__smakebuf_r>
  406f4e:	89a3      	ldrh	r3, [r4, #12]
  406f50:	6920      	ldr	r0, [r4, #16]
  406f52:	e7dd      	b.n	406f10 <__swsetup_r+0x20>
  406f54:	0799      	lsls	r1, r3, #30
  406f56:	bf58      	it	pl
  406f58:	6962      	ldrpl	r2, [r4, #20]
  406f5a:	60a2      	str	r2, [r4, #8]
  406f5c:	2800      	cmp	r0, #0
  406f5e:	d1e0      	bne.n	406f22 <__swsetup_r+0x32>
  406f60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406f64:	061a      	lsls	r2, r3, #24
  406f66:	d5dd      	bpl.n	406f24 <__swsetup_r+0x34>
  406f68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406f6c:	81a3      	strh	r3, [r4, #12]
  406f6e:	f04f 30ff 	mov.w	r0, #4294967295
  406f72:	bd38      	pop	{r3, r4, r5, pc}
  406f74:	4618      	mov	r0, r3
  406f76:	f000 f927 	bl	4071c8 <__sinit>
  406f7a:	e7c2      	b.n	406f02 <__swsetup_r+0x12>
  406f7c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406f7e:	b151      	cbz	r1, 406f96 <__swsetup_r+0xa6>
  406f80:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406f84:	4299      	cmp	r1, r3
  406f86:	d004      	beq.n	406f92 <__swsetup_r+0xa2>
  406f88:	4628      	mov	r0, r5
  406f8a:	f000 fa43 	bl	407414 <_free_r>
  406f8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406f92:	2300      	movs	r3, #0
  406f94:	6323      	str	r3, [r4, #48]	; 0x30
  406f96:	2300      	movs	r3, #0
  406f98:	6920      	ldr	r0, [r4, #16]
  406f9a:	6063      	str	r3, [r4, #4]
  406f9c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  406fa0:	6020      	str	r0, [r4, #0]
  406fa2:	e7c5      	b.n	406f30 <__swsetup_r+0x40>
  406fa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  406fa8:	2309      	movs	r3, #9
  406faa:	602b      	str	r3, [r5, #0]
  406fac:	f04f 30ff 	mov.w	r0, #4294967295
  406fb0:	81a2      	strh	r2, [r4, #12]
  406fb2:	bd38      	pop	{r3, r4, r5, pc}
  406fb4:	20400048 	.word	0x20400048

00406fb8 <register_fini>:
  406fb8:	4b02      	ldr	r3, [pc, #8]	; (406fc4 <register_fini+0xc>)
  406fba:	b113      	cbz	r3, 406fc2 <register_fini+0xa>
  406fbc:	4802      	ldr	r0, [pc, #8]	; (406fc8 <register_fini+0x10>)
  406fbe:	f000 b805 	b.w	406fcc <atexit>
  406fc2:	4770      	bx	lr
  406fc4:	00000000 	.word	0x00000000
  406fc8:	00407239 	.word	0x00407239

00406fcc <atexit>:
  406fcc:	2300      	movs	r3, #0
  406fce:	4601      	mov	r1, r0
  406fd0:	461a      	mov	r2, r3
  406fd2:	4618      	mov	r0, r3
  406fd4:	f001 b890 	b.w	4080f8 <__register_exitproc>

00406fd8 <__sflush_r>:
  406fd8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  406fdc:	b29a      	uxth	r2, r3
  406fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406fe2:	460d      	mov	r5, r1
  406fe4:	0711      	lsls	r1, r2, #28
  406fe6:	4680      	mov	r8, r0
  406fe8:	d43a      	bmi.n	407060 <__sflush_r+0x88>
  406fea:	686a      	ldr	r2, [r5, #4]
  406fec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  406ff0:	2a00      	cmp	r2, #0
  406ff2:	81ab      	strh	r3, [r5, #12]
  406ff4:	dd6f      	ble.n	4070d6 <__sflush_r+0xfe>
  406ff6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406ff8:	2c00      	cmp	r4, #0
  406ffa:	d049      	beq.n	407090 <__sflush_r+0xb8>
  406ffc:	2200      	movs	r2, #0
  406ffe:	b29b      	uxth	r3, r3
  407000:	f8d8 6000 	ldr.w	r6, [r8]
  407004:	f8c8 2000 	str.w	r2, [r8]
  407008:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40700c:	d067      	beq.n	4070de <__sflush_r+0x106>
  40700e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  407010:	075f      	lsls	r7, r3, #29
  407012:	d505      	bpl.n	407020 <__sflush_r+0x48>
  407014:	6869      	ldr	r1, [r5, #4]
  407016:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  407018:	1a52      	subs	r2, r2, r1
  40701a:	b10b      	cbz	r3, 407020 <__sflush_r+0x48>
  40701c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40701e:	1ad2      	subs	r2, r2, r3
  407020:	2300      	movs	r3, #0
  407022:	69e9      	ldr	r1, [r5, #28]
  407024:	4640      	mov	r0, r8
  407026:	47a0      	blx	r4
  407028:	1c44      	adds	r4, r0, #1
  40702a:	d03c      	beq.n	4070a6 <__sflush_r+0xce>
  40702c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  407030:	692a      	ldr	r2, [r5, #16]
  407032:	602a      	str	r2, [r5, #0]
  407034:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  407038:	2200      	movs	r2, #0
  40703a:	81ab      	strh	r3, [r5, #12]
  40703c:	04db      	lsls	r3, r3, #19
  40703e:	606a      	str	r2, [r5, #4]
  407040:	d447      	bmi.n	4070d2 <__sflush_r+0xfa>
  407042:	6b29      	ldr	r1, [r5, #48]	; 0x30
  407044:	f8c8 6000 	str.w	r6, [r8]
  407048:	b311      	cbz	r1, 407090 <__sflush_r+0xb8>
  40704a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40704e:	4299      	cmp	r1, r3
  407050:	d002      	beq.n	407058 <__sflush_r+0x80>
  407052:	4640      	mov	r0, r8
  407054:	f000 f9de 	bl	407414 <_free_r>
  407058:	2000      	movs	r0, #0
  40705a:	6328      	str	r0, [r5, #48]	; 0x30
  40705c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407060:	692e      	ldr	r6, [r5, #16]
  407062:	b1ae      	cbz	r6, 407090 <__sflush_r+0xb8>
  407064:	682c      	ldr	r4, [r5, #0]
  407066:	602e      	str	r6, [r5, #0]
  407068:	0791      	lsls	r1, r2, #30
  40706a:	bf0c      	ite	eq
  40706c:	696b      	ldreq	r3, [r5, #20]
  40706e:	2300      	movne	r3, #0
  407070:	1ba4      	subs	r4, r4, r6
  407072:	60ab      	str	r3, [r5, #8]
  407074:	e00a      	b.n	40708c <__sflush_r+0xb4>
  407076:	4623      	mov	r3, r4
  407078:	4632      	mov	r2, r6
  40707a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40707c:	69e9      	ldr	r1, [r5, #28]
  40707e:	4640      	mov	r0, r8
  407080:	47b8      	blx	r7
  407082:	2800      	cmp	r0, #0
  407084:	eba4 0400 	sub.w	r4, r4, r0
  407088:	4406      	add	r6, r0
  40708a:	dd04      	ble.n	407096 <__sflush_r+0xbe>
  40708c:	2c00      	cmp	r4, #0
  40708e:	dcf2      	bgt.n	407076 <__sflush_r+0x9e>
  407090:	2000      	movs	r0, #0
  407092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407096:	89ab      	ldrh	r3, [r5, #12]
  407098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40709c:	81ab      	strh	r3, [r5, #12]
  40709e:	f04f 30ff 	mov.w	r0, #4294967295
  4070a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4070a6:	f8d8 4000 	ldr.w	r4, [r8]
  4070aa:	2c1d      	cmp	r4, #29
  4070ac:	d8f3      	bhi.n	407096 <__sflush_r+0xbe>
  4070ae:	4b19      	ldr	r3, [pc, #100]	; (407114 <__sflush_r+0x13c>)
  4070b0:	40e3      	lsrs	r3, r4
  4070b2:	43db      	mvns	r3, r3
  4070b4:	f013 0301 	ands.w	r3, r3, #1
  4070b8:	d1ed      	bne.n	407096 <__sflush_r+0xbe>
  4070ba:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4070be:	606b      	str	r3, [r5, #4]
  4070c0:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4070c4:	6929      	ldr	r1, [r5, #16]
  4070c6:	81ab      	strh	r3, [r5, #12]
  4070c8:	04da      	lsls	r2, r3, #19
  4070ca:	6029      	str	r1, [r5, #0]
  4070cc:	d5b9      	bpl.n	407042 <__sflush_r+0x6a>
  4070ce:	2c00      	cmp	r4, #0
  4070d0:	d1b7      	bne.n	407042 <__sflush_r+0x6a>
  4070d2:	6528      	str	r0, [r5, #80]	; 0x50
  4070d4:	e7b5      	b.n	407042 <__sflush_r+0x6a>
  4070d6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4070d8:	2a00      	cmp	r2, #0
  4070da:	dc8c      	bgt.n	406ff6 <__sflush_r+0x1e>
  4070dc:	e7d8      	b.n	407090 <__sflush_r+0xb8>
  4070de:	2301      	movs	r3, #1
  4070e0:	69e9      	ldr	r1, [r5, #28]
  4070e2:	4640      	mov	r0, r8
  4070e4:	47a0      	blx	r4
  4070e6:	1c43      	adds	r3, r0, #1
  4070e8:	4602      	mov	r2, r0
  4070ea:	d002      	beq.n	4070f2 <__sflush_r+0x11a>
  4070ec:	89ab      	ldrh	r3, [r5, #12]
  4070ee:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4070f0:	e78e      	b.n	407010 <__sflush_r+0x38>
  4070f2:	f8d8 3000 	ldr.w	r3, [r8]
  4070f6:	2b00      	cmp	r3, #0
  4070f8:	d0f8      	beq.n	4070ec <__sflush_r+0x114>
  4070fa:	2b1d      	cmp	r3, #29
  4070fc:	d001      	beq.n	407102 <__sflush_r+0x12a>
  4070fe:	2b16      	cmp	r3, #22
  407100:	d102      	bne.n	407108 <__sflush_r+0x130>
  407102:	f8c8 6000 	str.w	r6, [r8]
  407106:	e7c3      	b.n	407090 <__sflush_r+0xb8>
  407108:	89ab      	ldrh	r3, [r5, #12]
  40710a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40710e:	81ab      	strh	r3, [r5, #12]
  407110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407114:	20400001 	.word	0x20400001

00407118 <_fflush_r>:
  407118:	b538      	push	{r3, r4, r5, lr}
  40711a:	460d      	mov	r5, r1
  40711c:	4604      	mov	r4, r0
  40711e:	b108      	cbz	r0, 407124 <_fflush_r+0xc>
  407120:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407122:	b1bb      	cbz	r3, 407154 <_fflush_r+0x3c>
  407124:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  407128:	b188      	cbz	r0, 40714e <_fflush_r+0x36>
  40712a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40712c:	07db      	lsls	r3, r3, #31
  40712e:	d401      	bmi.n	407134 <_fflush_r+0x1c>
  407130:	0581      	lsls	r1, r0, #22
  407132:	d517      	bpl.n	407164 <_fflush_r+0x4c>
  407134:	4620      	mov	r0, r4
  407136:	4629      	mov	r1, r5
  407138:	f7ff ff4e 	bl	406fd8 <__sflush_r>
  40713c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40713e:	07da      	lsls	r2, r3, #31
  407140:	4604      	mov	r4, r0
  407142:	d402      	bmi.n	40714a <_fflush_r+0x32>
  407144:	89ab      	ldrh	r3, [r5, #12]
  407146:	059b      	lsls	r3, r3, #22
  407148:	d507      	bpl.n	40715a <_fflush_r+0x42>
  40714a:	4620      	mov	r0, r4
  40714c:	bd38      	pop	{r3, r4, r5, pc}
  40714e:	4604      	mov	r4, r0
  407150:	4620      	mov	r0, r4
  407152:	bd38      	pop	{r3, r4, r5, pc}
  407154:	f000 f838 	bl	4071c8 <__sinit>
  407158:	e7e4      	b.n	407124 <_fflush_r+0xc>
  40715a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40715c:	f000 fbf6 	bl	40794c <__retarget_lock_release_recursive>
  407160:	4620      	mov	r0, r4
  407162:	bd38      	pop	{r3, r4, r5, pc}
  407164:	6da8      	ldr	r0, [r5, #88]	; 0x58
  407166:	f000 fbef 	bl	407948 <__retarget_lock_acquire_recursive>
  40716a:	e7e3      	b.n	407134 <_fflush_r+0x1c>

0040716c <_cleanup_r>:
  40716c:	4901      	ldr	r1, [pc, #4]	; (407174 <_cleanup_r+0x8>)
  40716e:	f000 bbaf 	b.w	4078d0 <_fwalk_reent>
  407172:	bf00      	nop
  407174:	004081e1 	.word	0x004081e1

00407178 <std.isra.0>:
  407178:	b510      	push	{r4, lr}
  40717a:	2300      	movs	r3, #0
  40717c:	4604      	mov	r4, r0
  40717e:	8181      	strh	r1, [r0, #12]
  407180:	81c2      	strh	r2, [r0, #14]
  407182:	6003      	str	r3, [r0, #0]
  407184:	6043      	str	r3, [r0, #4]
  407186:	6083      	str	r3, [r0, #8]
  407188:	6643      	str	r3, [r0, #100]	; 0x64
  40718a:	6103      	str	r3, [r0, #16]
  40718c:	6143      	str	r3, [r0, #20]
  40718e:	6183      	str	r3, [r0, #24]
  407190:	4619      	mov	r1, r3
  407192:	2208      	movs	r2, #8
  407194:	305c      	adds	r0, #92	; 0x5c
  407196:	f7fe fef9 	bl	405f8c <memset>
  40719a:	4807      	ldr	r0, [pc, #28]	; (4071b8 <std.isra.0+0x40>)
  40719c:	4907      	ldr	r1, [pc, #28]	; (4071bc <std.isra.0+0x44>)
  40719e:	4a08      	ldr	r2, [pc, #32]	; (4071c0 <std.isra.0+0x48>)
  4071a0:	4b08      	ldr	r3, [pc, #32]	; (4071c4 <std.isra.0+0x4c>)
  4071a2:	6220      	str	r0, [r4, #32]
  4071a4:	61e4      	str	r4, [r4, #28]
  4071a6:	6261      	str	r1, [r4, #36]	; 0x24
  4071a8:	62a2      	str	r2, [r4, #40]	; 0x28
  4071aa:	62e3      	str	r3, [r4, #44]	; 0x2c
  4071ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4071b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4071b4:	f000 bbc4 	b.w	407940 <__retarget_lock_init_recursive>
  4071b8:	00407f25 	.word	0x00407f25
  4071bc:	00407f49 	.word	0x00407f49
  4071c0:	00407f85 	.word	0x00407f85
  4071c4:	00407fa5 	.word	0x00407fa5

004071c8 <__sinit>:
  4071c8:	b510      	push	{r4, lr}
  4071ca:	4604      	mov	r4, r0
  4071cc:	4812      	ldr	r0, [pc, #72]	; (407218 <__sinit+0x50>)
  4071ce:	f000 fbbb 	bl	407948 <__retarget_lock_acquire_recursive>
  4071d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4071d4:	b9d2      	cbnz	r2, 40720c <__sinit+0x44>
  4071d6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4071da:	4810      	ldr	r0, [pc, #64]	; (40721c <__sinit+0x54>)
  4071dc:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4071e0:	2103      	movs	r1, #3
  4071e2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4071e6:	63e0      	str	r0, [r4, #60]	; 0x3c
  4071e8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4071ec:	6860      	ldr	r0, [r4, #4]
  4071ee:	2104      	movs	r1, #4
  4071f0:	f7ff ffc2 	bl	407178 <std.isra.0>
  4071f4:	2201      	movs	r2, #1
  4071f6:	2109      	movs	r1, #9
  4071f8:	68a0      	ldr	r0, [r4, #8]
  4071fa:	f7ff ffbd 	bl	407178 <std.isra.0>
  4071fe:	2202      	movs	r2, #2
  407200:	2112      	movs	r1, #18
  407202:	68e0      	ldr	r0, [r4, #12]
  407204:	f7ff ffb8 	bl	407178 <std.isra.0>
  407208:	2301      	movs	r3, #1
  40720a:	63a3      	str	r3, [r4, #56]	; 0x38
  40720c:	4802      	ldr	r0, [pc, #8]	; (407218 <__sinit+0x50>)
  40720e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407212:	f000 bb9b 	b.w	40794c <__retarget_lock_release_recursive>
  407216:	bf00      	nop
  407218:	20453c7c 	.word	0x20453c7c
  40721c:	0040716d 	.word	0x0040716d

00407220 <__sfp_lock_acquire>:
  407220:	4801      	ldr	r0, [pc, #4]	; (407228 <__sfp_lock_acquire+0x8>)
  407222:	f000 bb91 	b.w	407948 <__retarget_lock_acquire_recursive>
  407226:	bf00      	nop
  407228:	20453c90 	.word	0x20453c90

0040722c <__sfp_lock_release>:
  40722c:	4801      	ldr	r0, [pc, #4]	; (407234 <__sfp_lock_release+0x8>)
  40722e:	f000 bb8d 	b.w	40794c <__retarget_lock_release_recursive>
  407232:	bf00      	nop
  407234:	20453c90 	.word	0x20453c90

00407238 <__libc_fini_array>:
  407238:	b538      	push	{r3, r4, r5, lr}
  40723a:	4c0a      	ldr	r4, [pc, #40]	; (407264 <__libc_fini_array+0x2c>)
  40723c:	4d0a      	ldr	r5, [pc, #40]	; (407268 <__libc_fini_array+0x30>)
  40723e:	1b64      	subs	r4, r4, r5
  407240:	10a4      	asrs	r4, r4, #2
  407242:	d00a      	beq.n	40725a <__libc_fini_array+0x22>
  407244:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  407248:	3b01      	subs	r3, #1
  40724a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40724e:	3c01      	subs	r4, #1
  407250:	f855 3904 	ldr.w	r3, [r5], #-4
  407254:	4798      	blx	r3
  407256:	2c00      	cmp	r4, #0
  407258:	d1f9      	bne.n	40724e <__libc_fini_array+0x16>
  40725a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40725e:	f002 b80d 	b.w	40927c <_fini>
  407262:	bf00      	nop
  407264:	0040928c 	.word	0x0040928c
  407268:	00409288 	.word	0x00409288

0040726c <__fputwc>:
  40726c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407270:	b082      	sub	sp, #8
  407272:	4680      	mov	r8, r0
  407274:	4689      	mov	r9, r1
  407276:	4614      	mov	r4, r2
  407278:	f000 fb54 	bl	407924 <__locale_mb_cur_max>
  40727c:	2801      	cmp	r0, #1
  40727e:	d036      	beq.n	4072ee <__fputwc+0x82>
  407280:	464a      	mov	r2, r9
  407282:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  407286:	a901      	add	r1, sp, #4
  407288:	4640      	mov	r0, r8
  40728a:	f000 fee7 	bl	40805c <_wcrtomb_r>
  40728e:	1c42      	adds	r2, r0, #1
  407290:	4606      	mov	r6, r0
  407292:	d025      	beq.n	4072e0 <__fputwc+0x74>
  407294:	b3a8      	cbz	r0, 407302 <__fputwc+0x96>
  407296:	f89d e004 	ldrb.w	lr, [sp, #4]
  40729a:	2500      	movs	r5, #0
  40729c:	f10d 0a04 	add.w	sl, sp, #4
  4072a0:	e009      	b.n	4072b6 <__fputwc+0x4a>
  4072a2:	6823      	ldr	r3, [r4, #0]
  4072a4:	1c5a      	adds	r2, r3, #1
  4072a6:	6022      	str	r2, [r4, #0]
  4072a8:	f883 e000 	strb.w	lr, [r3]
  4072ac:	3501      	adds	r5, #1
  4072ae:	42b5      	cmp	r5, r6
  4072b0:	d227      	bcs.n	407302 <__fputwc+0x96>
  4072b2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4072b6:	68a3      	ldr	r3, [r4, #8]
  4072b8:	3b01      	subs	r3, #1
  4072ba:	2b00      	cmp	r3, #0
  4072bc:	60a3      	str	r3, [r4, #8]
  4072be:	daf0      	bge.n	4072a2 <__fputwc+0x36>
  4072c0:	69a7      	ldr	r7, [r4, #24]
  4072c2:	42bb      	cmp	r3, r7
  4072c4:	4671      	mov	r1, lr
  4072c6:	4622      	mov	r2, r4
  4072c8:	4640      	mov	r0, r8
  4072ca:	db02      	blt.n	4072d2 <__fputwc+0x66>
  4072cc:	f1be 0f0a 	cmp.w	lr, #10
  4072d0:	d1e7      	bne.n	4072a2 <__fputwc+0x36>
  4072d2:	f000 fe6b 	bl	407fac <__swbuf_r>
  4072d6:	1c43      	adds	r3, r0, #1
  4072d8:	d1e8      	bne.n	4072ac <__fputwc+0x40>
  4072da:	b002      	add	sp, #8
  4072dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4072e0:	89a3      	ldrh	r3, [r4, #12]
  4072e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4072e6:	81a3      	strh	r3, [r4, #12]
  4072e8:	b002      	add	sp, #8
  4072ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4072ee:	f109 33ff 	add.w	r3, r9, #4294967295
  4072f2:	2bfe      	cmp	r3, #254	; 0xfe
  4072f4:	d8c4      	bhi.n	407280 <__fputwc+0x14>
  4072f6:	fa5f fe89 	uxtb.w	lr, r9
  4072fa:	4606      	mov	r6, r0
  4072fc:	f88d e004 	strb.w	lr, [sp, #4]
  407300:	e7cb      	b.n	40729a <__fputwc+0x2e>
  407302:	4648      	mov	r0, r9
  407304:	b002      	add	sp, #8
  407306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40730a:	bf00      	nop

0040730c <_fputwc_r>:
  40730c:	b530      	push	{r4, r5, lr}
  40730e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  407310:	f013 0f01 	tst.w	r3, #1
  407314:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  407318:	4614      	mov	r4, r2
  40731a:	b083      	sub	sp, #12
  40731c:	4605      	mov	r5, r0
  40731e:	b29a      	uxth	r2, r3
  407320:	d101      	bne.n	407326 <_fputwc_r+0x1a>
  407322:	0590      	lsls	r0, r2, #22
  407324:	d51c      	bpl.n	407360 <_fputwc_r+0x54>
  407326:	0490      	lsls	r0, r2, #18
  407328:	d406      	bmi.n	407338 <_fputwc_r+0x2c>
  40732a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40732c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  407330:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  407334:	81a3      	strh	r3, [r4, #12]
  407336:	6662      	str	r2, [r4, #100]	; 0x64
  407338:	4628      	mov	r0, r5
  40733a:	4622      	mov	r2, r4
  40733c:	f7ff ff96 	bl	40726c <__fputwc>
  407340:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407342:	07da      	lsls	r2, r3, #31
  407344:	4605      	mov	r5, r0
  407346:	d402      	bmi.n	40734e <_fputwc_r+0x42>
  407348:	89a3      	ldrh	r3, [r4, #12]
  40734a:	059b      	lsls	r3, r3, #22
  40734c:	d502      	bpl.n	407354 <_fputwc_r+0x48>
  40734e:	4628      	mov	r0, r5
  407350:	b003      	add	sp, #12
  407352:	bd30      	pop	{r4, r5, pc}
  407354:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407356:	f000 faf9 	bl	40794c <__retarget_lock_release_recursive>
  40735a:	4628      	mov	r0, r5
  40735c:	b003      	add	sp, #12
  40735e:	bd30      	pop	{r4, r5, pc}
  407360:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407362:	9101      	str	r1, [sp, #4]
  407364:	f000 faf0 	bl	407948 <__retarget_lock_acquire_recursive>
  407368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40736c:	9901      	ldr	r1, [sp, #4]
  40736e:	b29a      	uxth	r2, r3
  407370:	e7d9      	b.n	407326 <_fputwc_r+0x1a>
  407372:	bf00      	nop

00407374 <_malloc_trim_r>:
  407374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407376:	4f24      	ldr	r7, [pc, #144]	; (407408 <_malloc_trim_r+0x94>)
  407378:	460c      	mov	r4, r1
  40737a:	4606      	mov	r6, r0
  40737c:	f7fe fe54 	bl	406028 <__malloc_lock>
  407380:	68bb      	ldr	r3, [r7, #8]
  407382:	685d      	ldr	r5, [r3, #4]
  407384:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  407388:	310f      	adds	r1, #15
  40738a:	f025 0503 	bic.w	r5, r5, #3
  40738e:	4429      	add	r1, r5
  407390:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  407394:	f021 010f 	bic.w	r1, r1, #15
  407398:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40739c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4073a0:	db07      	blt.n	4073b2 <_malloc_trim_r+0x3e>
  4073a2:	2100      	movs	r1, #0
  4073a4:	4630      	mov	r0, r6
  4073a6:	f7fe fe4b 	bl	406040 <_sbrk_r>
  4073aa:	68bb      	ldr	r3, [r7, #8]
  4073ac:	442b      	add	r3, r5
  4073ae:	4298      	cmp	r0, r3
  4073b0:	d004      	beq.n	4073bc <_malloc_trim_r+0x48>
  4073b2:	4630      	mov	r0, r6
  4073b4:	f7fe fe3e 	bl	406034 <__malloc_unlock>
  4073b8:	2000      	movs	r0, #0
  4073ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4073bc:	4261      	negs	r1, r4
  4073be:	4630      	mov	r0, r6
  4073c0:	f7fe fe3e 	bl	406040 <_sbrk_r>
  4073c4:	3001      	adds	r0, #1
  4073c6:	d00d      	beq.n	4073e4 <_malloc_trim_r+0x70>
  4073c8:	4b10      	ldr	r3, [pc, #64]	; (40740c <_malloc_trim_r+0x98>)
  4073ca:	68ba      	ldr	r2, [r7, #8]
  4073cc:	6819      	ldr	r1, [r3, #0]
  4073ce:	1b2d      	subs	r5, r5, r4
  4073d0:	f045 0501 	orr.w	r5, r5, #1
  4073d4:	4630      	mov	r0, r6
  4073d6:	1b09      	subs	r1, r1, r4
  4073d8:	6055      	str	r5, [r2, #4]
  4073da:	6019      	str	r1, [r3, #0]
  4073dc:	f7fe fe2a 	bl	406034 <__malloc_unlock>
  4073e0:	2001      	movs	r0, #1
  4073e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4073e4:	2100      	movs	r1, #0
  4073e6:	4630      	mov	r0, r6
  4073e8:	f7fe fe2a 	bl	406040 <_sbrk_r>
  4073ec:	68ba      	ldr	r2, [r7, #8]
  4073ee:	1a83      	subs	r3, r0, r2
  4073f0:	2b0f      	cmp	r3, #15
  4073f2:	ddde      	ble.n	4073b2 <_malloc_trim_r+0x3e>
  4073f4:	4c06      	ldr	r4, [pc, #24]	; (407410 <_malloc_trim_r+0x9c>)
  4073f6:	4905      	ldr	r1, [pc, #20]	; (40740c <_malloc_trim_r+0x98>)
  4073f8:	6824      	ldr	r4, [r4, #0]
  4073fa:	f043 0301 	orr.w	r3, r3, #1
  4073fe:	1b00      	subs	r0, r0, r4
  407400:	6053      	str	r3, [r2, #4]
  407402:	6008      	str	r0, [r1, #0]
  407404:	e7d5      	b.n	4073b2 <_malloc_trim_r+0x3e>
  407406:	bf00      	nop
  407408:	20400478 	.word	0x20400478
  40740c:	20450800 	.word	0x20450800
  407410:	20400880 	.word	0x20400880

00407414 <_free_r>:
  407414:	2900      	cmp	r1, #0
  407416:	d044      	beq.n	4074a2 <_free_r+0x8e>
  407418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40741c:	460d      	mov	r5, r1
  40741e:	4680      	mov	r8, r0
  407420:	f7fe fe02 	bl	406028 <__malloc_lock>
  407424:	f855 7c04 	ldr.w	r7, [r5, #-4]
  407428:	4969      	ldr	r1, [pc, #420]	; (4075d0 <_free_r+0x1bc>)
  40742a:	f027 0301 	bic.w	r3, r7, #1
  40742e:	f1a5 0408 	sub.w	r4, r5, #8
  407432:	18e2      	adds	r2, r4, r3
  407434:	688e      	ldr	r6, [r1, #8]
  407436:	6850      	ldr	r0, [r2, #4]
  407438:	42b2      	cmp	r2, r6
  40743a:	f020 0003 	bic.w	r0, r0, #3
  40743e:	d05e      	beq.n	4074fe <_free_r+0xea>
  407440:	07fe      	lsls	r6, r7, #31
  407442:	6050      	str	r0, [r2, #4]
  407444:	d40b      	bmi.n	40745e <_free_r+0x4a>
  407446:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40744a:	1be4      	subs	r4, r4, r7
  40744c:	f101 0e08 	add.w	lr, r1, #8
  407450:	68a5      	ldr	r5, [r4, #8]
  407452:	4575      	cmp	r5, lr
  407454:	443b      	add	r3, r7
  407456:	d06d      	beq.n	407534 <_free_r+0x120>
  407458:	68e7      	ldr	r7, [r4, #12]
  40745a:	60ef      	str	r7, [r5, #12]
  40745c:	60bd      	str	r5, [r7, #8]
  40745e:	1815      	adds	r5, r2, r0
  407460:	686d      	ldr	r5, [r5, #4]
  407462:	07ed      	lsls	r5, r5, #31
  407464:	d53e      	bpl.n	4074e4 <_free_r+0xd0>
  407466:	f043 0201 	orr.w	r2, r3, #1
  40746a:	6062      	str	r2, [r4, #4]
  40746c:	50e3      	str	r3, [r4, r3]
  40746e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407472:	d217      	bcs.n	4074a4 <_free_r+0x90>
  407474:	08db      	lsrs	r3, r3, #3
  407476:	1c58      	adds	r0, r3, #1
  407478:	109a      	asrs	r2, r3, #2
  40747a:	684d      	ldr	r5, [r1, #4]
  40747c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  407480:	60a7      	str	r7, [r4, #8]
  407482:	2301      	movs	r3, #1
  407484:	4093      	lsls	r3, r2
  407486:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40748a:	432b      	orrs	r3, r5
  40748c:	3a08      	subs	r2, #8
  40748e:	60e2      	str	r2, [r4, #12]
  407490:	604b      	str	r3, [r1, #4]
  407492:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  407496:	60fc      	str	r4, [r7, #12]
  407498:	4640      	mov	r0, r8
  40749a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40749e:	f7fe bdc9 	b.w	406034 <__malloc_unlock>
  4074a2:	4770      	bx	lr
  4074a4:	0a5a      	lsrs	r2, r3, #9
  4074a6:	2a04      	cmp	r2, #4
  4074a8:	d852      	bhi.n	407550 <_free_r+0x13c>
  4074aa:	099a      	lsrs	r2, r3, #6
  4074ac:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4074b0:	00ff      	lsls	r7, r7, #3
  4074b2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4074b6:	19c8      	adds	r0, r1, r7
  4074b8:	59ca      	ldr	r2, [r1, r7]
  4074ba:	3808      	subs	r0, #8
  4074bc:	4290      	cmp	r0, r2
  4074be:	d04f      	beq.n	407560 <_free_r+0x14c>
  4074c0:	6851      	ldr	r1, [r2, #4]
  4074c2:	f021 0103 	bic.w	r1, r1, #3
  4074c6:	428b      	cmp	r3, r1
  4074c8:	d232      	bcs.n	407530 <_free_r+0x11c>
  4074ca:	6892      	ldr	r2, [r2, #8]
  4074cc:	4290      	cmp	r0, r2
  4074ce:	d1f7      	bne.n	4074c0 <_free_r+0xac>
  4074d0:	68c3      	ldr	r3, [r0, #12]
  4074d2:	60a0      	str	r0, [r4, #8]
  4074d4:	60e3      	str	r3, [r4, #12]
  4074d6:	609c      	str	r4, [r3, #8]
  4074d8:	60c4      	str	r4, [r0, #12]
  4074da:	4640      	mov	r0, r8
  4074dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4074e0:	f7fe bda8 	b.w	406034 <__malloc_unlock>
  4074e4:	6895      	ldr	r5, [r2, #8]
  4074e6:	4f3b      	ldr	r7, [pc, #236]	; (4075d4 <_free_r+0x1c0>)
  4074e8:	42bd      	cmp	r5, r7
  4074ea:	4403      	add	r3, r0
  4074ec:	d040      	beq.n	407570 <_free_r+0x15c>
  4074ee:	68d0      	ldr	r0, [r2, #12]
  4074f0:	60e8      	str	r0, [r5, #12]
  4074f2:	f043 0201 	orr.w	r2, r3, #1
  4074f6:	6085      	str	r5, [r0, #8]
  4074f8:	6062      	str	r2, [r4, #4]
  4074fa:	50e3      	str	r3, [r4, r3]
  4074fc:	e7b7      	b.n	40746e <_free_r+0x5a>
  4074fe:	07ff      	lsls	r7, r7, #31
  407500:	4403      	add	r3, r0
  407502:	d407      	bmi.n	407514 <_free_r+0x100>
  407504:	f855 2c08 	ldr.w	r2, [r5, #-8]
  407508:	1aa4      	subs	r4, r4, r2
  40750a:	4413      	add	r3, r2
  40750c:	68a0      	ldr	r0, [r4, #8]
  40750e:	68e2      	ldr	r2, [r4, #12]
  407510:	60c2      	str	r2, [r0, #12]
  407512:	6090      	str	r0, [r2, #8]
  407514:	4a30      	ldr	r2, [pc, #192]	; (4075d8 <_free_r+0x1c4>)
  407516:	6812      	ldr	r2, [r2, #0]
  407518:	f043 0001 	orr.w	r0, r3, #1
  40751c:	4293      	cmp	r3, r2
  40751e:	6060      	str	r0, [r4, #4]
  407520:	608c      	str	r4, [r1, #8]
  407522:	d3b9      	bcc.n	407498 <_free_r+0x84>
  407524:	4b2d      	ldr	r3, [pc, #180]	; (4075dc <_free_r+0x1c8>)
  407526:	4640      	mov	r0, r8
  407528:	6819      	ldr	r1, [r3, #0]
  40752a:	f7ff ff23 	bl	407374 <_malloc_trim_r>
  40752e:	e7b3      	b.n	407498 <_free_r+0x84>
  407530:	4610      	mov	r0, r2
  407532:	e7cd      	b.n	4074d0 <_free_r+0xbc>
  407534:	1811      	adds	r1, r2, r0
  407536:	6849      	ldr	r1, [r1, #4]
  407538:	07c9      	lsls	r1, r1, #31
  40753a:	d444      	bmi.n	4075c6 <_free_r+0x1b2>
  40753c:	6891      	ldr	r1, [r2, #8]
  40753e:	68d2      	ldr	r2, [r2, #12]
  407540:	60ca      	str	r2, [r1, #12]
  407542:	4403      	add	r3, r0
  407544:	f043 0001 	orr.w	r0, r3, #1
  407548:	6091      	str	r1, [r2, #8]
  40754a:	6060      	str	r0, [r4, #4]
  40754c:	50e3      	str	r3, [r4, r3]
  40754e:	e7a3      	b.n	407498 <_free_r+0x84>
  407550:	2a14      	cmp	r2, #20
  407552:	d816      	bhi.n	407582 <_free_r+0x16e>
  407554:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  407558:	00ff      	lsls	r7, r7, #3
  40755a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40755e:	e7aa      	b.n	4074b6 <_free_r+0xa2>
  407560:	10aa      	asrs	r2, r5, #2
  407562:	2301      	movs	r3, #1
  407564:	684d      	ldr	r5, [r1, #4]
  407566:	4093      	lsls	r3, r2
  407568:	432b      	orrs	r3, r5
  40756a:	604b      	str	r3, [r1, #4]
  40756c:	4603      	mov	r3, r0
  40756e:	e7b0      	b.n	4074d2 <_free_r+0xbe>
  407570:	f043 0201 	orr.w	r2, r3, #1
  407574:	614c      	str	r4, [r1, #20]
  407576:	610c      	str	r4, [r1, #16]
  407578:	60e5      	str	r5, [r4, #12]
  40757a:	60a5      	str	r5, [r4, #8]
  40757c:	6062      	str	r2, [r4, #4]
  40757e:	50e3      	str	r3, [r4, r3]
  407580:	e78a      	b.n	407498 <_free_r+0x84>
  407582:	2a54      	cmp	r2, #84	; 0x54
  407584:	d806      	bhi.n	407594 <_free_r+0x180>
  407586:	0b1a      	lsrs	r2, r3, #12
  407588:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40758c:	00ff      	lsls	r7, r7, #3
  40758e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  407592:	e790      	b.n	4074b6 <_free_r+0xa2>
  407594:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407598:	d806      	bhi.n	4075a8 <_free_r+0x194>
  40759a:	0bda      	lsrs	r2, r3, #15
  40759c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4075a0:	00ff      	lsls	r7, r7, #3
  4075a2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4075a6:	e786      	b.n	4074b6 <_free_r+0xa2>
  4075a8:	f240 5054 	movw	r0, #1364	; 0x554
  4075ac:	4282      	cmp	r2, r0
  4075ae:	d806      	bhi.n	4075be <_free_r+0x1aa>
  4075b0:	0c9a      	lsrs	r2, r3, #18
  4075b2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4075b6:	00ff      	lsls	r7, r7, #3
  4075b8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4075bc:	e77b      	b.n	4074b6 <_free_r+0xa2>
  4075be:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4075c2:	257e      	movs	r5, #126	; 0x7e
  4075c4:	e777      	b.n	4074b6 <_free_r+0xa2>
  4075c6:	f043 0101 	orr.w	r1, r3, #1
  4075ca:	6061      	str	r1, [r4, #4]
  4075cc:	6013      	str	r3, [r2, #0]
  4075ce:	e763      	b.n	407498 <_free_r+0x84>
  4075d0:	20400478 	.word	0x20400478
  4075d4:	20400480 	.word	0x20400480
  4075d8:	20400884 	.word	0x20400884
  4075dc:	20450830 	.word	0x20450830

004075e0 <__sfvwrite_r>:
  4075e0:	6893      	ldr	r3, [r2, #8]
  4075e2:	2b00      	cmp	r3, #0
  4075e4:	d073      	beq.n	4076ce <__sfvwrite_r+0xee>
  4075e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4075ea:	898b      	ldrh	r3, [r1, #12]
  4075ec:	b083      	sub	sp, #12
  4075ee:	460c      	mov	r4, r1
  4075f0:	0719      	lsls	r1, r3, #28
  4075f2:	9000      	str	r0, [sp, #0]
  4075f4:	4616      	mov	r6, r2
  4075f6:	d526      	bpl.n	407646 <__sfvwrite_r+0x66>
  4075f8:	6922      	ldr	r2, [r4, #16]
  4075fa:	b322      	cbz	r2, 407646 <__sfvwrite_r+0x66>
  4075fc:	f013 0002 	ands.w	r0, r3, #2
  407600:	6835      	ldr	r5, [r6, #0]
  407602:	d02c      	beq.n	40765e <__sfvwrite_r+0x7e>
  407604:	f04f 0900 	mov.w	r9, #0
  407608:	4fb0      	ldr	r7, [pc, #704]	; (4078cc <__sfvwrite_r+0x2ec>)
  40760a:	46c8      	mov	r8, r9
  40760c:	46b2      	mov	sl, r6
  40760e:	45b8      	cmp	r8, r7
  407610:	4643      	mov	r3, r8
  407612:	464a      	mov	r2, r9
  407614:	bf28      	it	cs
  407616:	463b      	movcs	r3, r7
  407618:	9800      	ldr	r0, [sp, #0]
  40761a:	f1b8 0f00 	cmp.w	r8, #0
  40761e:	d050      	beq.n	4076c2 <__sfvwrite_r+0xe2>
  407620:	69e1      	ldr	r1, [r4, #28]
  407622:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407624:	47b0      	blx	r6
  407626:	2800      	cmp	r0, #0
  407628:	dd58      	ble.n	4076dc <__sfvwrite_r+0xfc>
  40762a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40762e:	1a1b      	subs	r3, r3, r0
  407630:	4481      	add	r9, r0
  407632:	eba8 0800 	sub.w	r8, r8, r0
  407636:	f8ca 3008 	str.w	r3, [sl, #8]
  40763a:	2b00      	cmp	r3, #0
  40763c:	d1e7      	bne.n	40760e <__sfvwrite_r+0x2e>
  40763e:	2000      	movs	r0, #0
  407640:	b003      	add	sp, #12
  407642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407646:	4621      	mov	r1, r4
  407648:	9800      	ldr	r0, [sp, #0]
  40764a:	f7ff fc51 	bl	406ef0 <__swsetup_r>
  40764e:	2800      	cmp	r0, #0
  407650:	f040 8133 	bne.w	4078ba <__sfvwrite_r+0x2da>
  407654:	89a3      	ldrh	r3, [r4, #12]
  407656:	6835      	ldr	r5, [r6, #0]
  407658:	f013 0002 	ands.w	r0, r3, #2
  40765c:	d1d2      	bne.n	407604 <__sfvwrite_r+0x24>
  40765e:	f013 0901 	ands.w	r9, r3, #1
  407662:	d145      	bne.n	4076f0 <__sfvwrite_r+0x110>
  407664:	464f      	mov	r7, r9
  407666:	9601      	str	r6, [sp, #4]
  407668:	b337      	cbz	r7, 4076b8 <__sfvwrite_r+0xd8>
  40766a:	059a      	lsls	r2, r3, #22
  40766c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  407670:	f140 8083 	bpl.w	40777a <__sfvwrite_r+0x19a>
  407674:	4547      	cmp	r7, r8
  407676:	46c3      	mov	fp, r8
  407678:	f0c0 80ab 	bcc.w	4077d2 <__sfvwrite_r+0x1f2>
  40767c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  407680:	f040 80ac 	bne.w	4077dc <__sfvwrite_r+0x1fc>
  407684:	6820      	ldr	r0, [r4, #0]
  407686:	46ba      	mov	sl, r7
  407688:	465a      	mov	r2, fp
  40768a:	4649      	mov	r1, r9
  40768c:	f000 fa40 	bl	407b10 <memmove>
  407690:	68a2      	ldr	r2, [r4, #8]
  407692:	6823      	ldr	r3, [r4, #0]
  407694:	eba2 0208 	sub.w	r2, r2, r8
  407698:	445b      	add	r3, fp
  40769a:	60a2      	str	r2, [r4, #8]
  40769c:	6023      	str	r3, [r4, #0]
  40769e:	9a01      	ldr	r2, [sp, #4]
  4076a0:	6893      	ldr	r3, [r2, #8]
  4076a2:	eba3 030a 	sub.w	r3, r3, sl
  4076a6:	44d1      	add	r9, sl
  4076a8:	eba7 070a 	sub.w	r7, r7, sl
  4076ac:	6093      	str	r3, [r2, #8]
  4076ae:	2b00      	cmp	r3, #0
  4076b0:	d0c5      	beq.n	40763e <__sfvwrite_r+0x5e>
  4076b2:	89a3      	ldrh	r3, [r4, #12]
  4076b4:	2f00      	cmp	r7, #0
  4076b6:	d1d8      	bne.n	40766a <__sfvwrite_r+0x8a>
  4076b8:	f8d5 9000 	ldr.w	r9, [r5]
  4076bc:	686f      	ldr	r7, [r5, #4]
  4076be:	3508      	adds	r5, #8
  4076c0:	e7d2      	b.n	407668 <__sfvwrite_r+0x88>
  4076c2:	f8d5 9000 	ldr.w	r9, [r5]
  4076c6:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4076ca:	3508      	adds	r5, #8
  4076cc:	e79f      	b.n	40760e <__sfvwrite_r+0x2e>
  4076ce:	2000      	movs	r0, #0
  4076d0:	4770      	bx	lr
  4076d2:	4621      	mov	r1, r4
  4076d4:	9800      	ldr	r0, [sp, #0]
  4076d6:	f7ff fd1f 	bl	407118 <_fflush_r>
  4076da:	b370      	cbz	r0, 40773a <__sfvwrite_r+0x15a>
  4076dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4076e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4076e4:	f04f 30ff 	mov.w	r0, #4294967295
  4076e8:	81a3      	strh	r3, [r4, #12]
  4076ea:	b003      	add	sp, #12
  4076ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4076f0:	4681      	mov	r9, r0
  4076f2:	4633      	mov	r3, r6
  4076f4:	464e      	mov	r6, r9
  4076f6:	46a8      	mov	r8, r5
  4076f8:	469a      	mov	sl, r3
  4076fa:	464d      	mov	r5, r9
  4076fc:	b34e      	cbz	r6, 407752 <__sfvwrite_r+0x172>
  4076fe:	b380      	cbz	r0, 407762 <__sfvwrite_r+0x182>
  407700:	6820      	ldr	r0, [r4, #0]
  407702:	6923      	ldr	r3, [r4, #16]
  407704:	6962      	ldr	r2, [r4, #20]
  407706:	45b1      	cmp	r9, r6
  407708:	46cb      	mov	fp, r9
  40770a:	bf28      	it	cs
  40770c:	46b3      	movcs	fp, r6
  40770e:	4298      	cmp	r0, r3
  407710:	465f      	mov	r7, fp
  407712:	d904      	bls.n	40771e <__sfvwrite_r+0x13e>
  407714:	68a3      	ldr	r3, [r4, #8]
  407716:	4413      	add	r3, r2
  407718:	459b      	cmp	fp, r3
  40771a:	f300 80a6 	bgt.w	40786a <__sfvwrite_r+0x28a>
  40771e:	4593      	cmp	fp, r2
  407720:	db4b      	blt.n	4077ba <__sfvwrite_r+0x1da>
  407722:	4613      	mov	r3, r2
  407724:	6a67      	ldr	r7, [r4, #36]	; 0x24
  407726:	69e1      	ldr	r1, [r4, #28]
  407728:	9800      	ldr	r0, [sp, #0]
  40772a:	462a      	mov	r2, r5
  40772c:	47b8      	blx	r7
  40772e:	1e07      	subs	r7, r0, #0
  407730:	ddd4      	ble.n	4076dc <__sfvwrite_r+0xfc>
  407732:	ebb9 0907 	subs.w	r9, r9, r7
  407736:	d0cc      	beq.n	4076d2 <__sfvwrite_r+0xf2>
  407738:	2001      	movs	r0, #1
  40773a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40773e:	1bdb      	subs	r3, r3, r7
  407740:	443d      	add	r5, r7
  407742:	1bf6      	subs	r6, r6, r7
  407744:	f8ca 3008 	str.w	r3, [sl, #8]
  407748:	2b00      	cmp	r3, #0
  40774a:	f43f af78 	beq.w	40763e <__sfvwrite_r+0x5e>
  40774e:	2e00      	cmp	r6, #0
  407750:	d1d5      	bne.n	4076fe <__sfvwrite_r+0x11e>
  407752:	f108 0308 	add.w	r3, r8, #8
  407756:	e913 0060 	ldmdb	r3, {r5, r6}
  40775a:	4698      	mov	r8, r3
  40775c:	3308      	adds	r3, #8
  40775e:	2e00      	cmp	r6, #0
  407760:	d0f9      	beq.n	407756 <__sfvwrite_r+0x176>
  407762:	4632      	mov	r2, r6
  407764:	210a      	movs	r1, #10
  407766:	4628      	mov	r0, r5
  407768:	f000 f982 	bl	407a70 <memchr>
  40776c:	2800      	cmp	r0, #0
  40776e:	f000 80a1 	beq.w	4078b4 <__sfvwrite_r+0x2d4>
  407772:	3001      	adds	r0, #1
  407774:	eba0 0905 	sub.w	r9, r0, r5
  407778:	e7c2      	b.n	407700 <__sfvwrite_r+0x120>
  40777a:	6820      	ldr	r0, [r4, #0]
  40777c:	6923      	ldr	r3, [r4, #16]
  40777e:	4298      	cmp	r0, r3
  407780:	d802      	bhi.n	407788 <__sfvwrite_r+0x1a8>
  407782:	6963      	ldr	r3, [r4, #20]
  407784:	429f      	cmp	r7, r3
  407786:	d25d      	bcs.n	407844 <__sfvwrite_r+0x264>
  407788:	45b8      	cmp	r8, r7
  40778a:	bf28      	it	cs
  40778c:	46b8      	movcs	r8, r7
  40778e:	4642      	mov	r2, r8
  407790:	4649      	mov	r1, r9
  407792:	f000 f9bd 	bl	407b10 <memmove>
  407796:	68a3      	ldr	r3, [r4, #8]
  407798:	6822      	ldr	r2, [r4, #0]
  40779a:	eba3 0308 	sub.w	r3, r3, r8
  40779e:	4442      	add	r2, r8
  4077a0:	60a3      	str	r3, [r4, #8]
  4077a2:	6022      	str	r2, [r4, #0]
  4077a4:	b10b      	cbz	r3, 4077aa <__sfvwrite_r+0x1ca>
  4077a6:	46c2      	mov	sl, r8
  4077a8:	e779      	b.n	40769e <__sfvwrite_r+0xbe>
  4077aa:	4621      	mov	r1, r4
  4077ac:	9800      	ldr	r0, [sp, #0]
  4077ae:	f7ff fcb3 	bl	407118 <_fflush_r>
  4077b2:	2800      	cmp	r0, #0
  4077b4:	d192      	bne.n	4076dc <__sfvwrite_r+0xfc>
  4077b6:	46c2      	mov	sl, r8
  4077b8:	e771      	b.n	40769e <__sfvwrite_r+0xbe>
  4077ba:	465a      	mov	r2, fp
  4077bc:	4629      	mov	r1, r5
  4077be:	f000 f9a7 	bl	407b10 <memmove>
  4077c2:	68a2      	ldr	r2, [r4, #8]
  4077c4:	6823      	ldr	r3, [r4, #0]
  4077c6:	eba2 020b 	sub.w	r2, r2, fp
  4077ca:	445b      	add	r3, fp
  4077cc:	60a2      	str	r2, [r4, #8]
  4077ce:	6023      	str	r3, [r4, #0]
  4077d0:	e7af      	b.n	407732 <__sfvwrite_r+0x152>
  4077d2:	6820      	ldr	r0, [r4, #0]
  4077d4:	46b8      	mov	r8, r7
  4077d6:	46ba      	mov	sl, r7
  4077d8:	46bb      	mov	fp, r7
  4077da:	e755      	b.n	407688 <__sfvwrite_r+0xa8>
  4077dc:	6962      	ldr	r2, [r4, #20]
  4077de:	6820      	ldr	r0, [r4, #0]
  4077e0:	6921      	ldr	r1, [r4, #16]
  4077e2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4077e6:	eba0 0a01 	sub.w	sl, r0, r1
  4077ea:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4077ee:	f10a 0001 	add.w	r0, sl, #1
  4077f2:	ea4f 0868 	mov.w	r8, r8, asr #1
  4077f6:	4438      	add	r0, r7
  4077f8:	4540      	cmp	r0, r8
  4077fa:	4642      	mov	r2, r8
  4077fc:	bf84      	itt	hi
  4077fe:	4680      	movhi	r8, r0
  407800:	4642      	movhi	r2, r8
  407802:	055b      	lsls	r3, r3, #21
  407804:	d544      	bpl.n	407890 <__sfvwrite_r+0x2b0>
  407806:	4611      	mov	r1, r2
  407808:	9800      	ldr	r0, [sp, #0]
  40780a:	f7fe f875 	bl	4058f8 <_malloc_r>
  40780e:	4683      	mov	fp, r0
  407810:	2800      	cmp	r0, #0
  407812:	d055      	beq.n	4078c0 <__sfvwrite_r+0x2e0>
  407814:	4652      	mov	r2, sl
  407816:	6921      	ldr	r1, [r4, #16]
  407818:	f7fe fb1e 	bl	405e58 <memcpy>
  40781c:	89a3      	ldrh	r3, [r4, #12]
  40781e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  407822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407826:	81a3      	strh	r3, [r4, #12]
  407828:	eb0b 000a 	add.w	r0, fp, sl
  40782c:	eba8 030a 	sub.w	r3, r8, sl
  407830:	f8c4 b010 	str.w	fp, [r4, #16]
  407834:	f8c4 8014 	str.w	r8, [r4, #20]
  407838:	6020      	str	r0, [r4, #0]
  40783a:	60a3      	str	r3, [r4, #8]
  40783c:	46b8      	mov	r8, r7
  40783e:	46ba      	mov	sl, r7
  407840:	46bb      	mov	fp, r7
  407842:	e721      	b.n	407688 <__sfvwrite_r+0xa8>
  407844:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  407848:	42b9      	cmp	r1, r7
  40784a:	bf28      	it	cs
  40784c:	4639      	movcs	r1, r7
  40784e:	464a      	mov	r2, r9
  407850:	fb91 f1f3 	sdiv	r1, r1, r3
  407854:	9800      	ldr	r0, [sp, #0]
  407856:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407858:	fb03 f301 	mul.w	r3, r3, r1
  40785c:	69e1      	ldr	r1, [r4, #28]
  40785e:	47b0      	blx	r6
  407860:	f1b0 0a00 	subs.w	sl, r0, #0
  407864:	f73f af1b 	bgt.w	40769e <__sfvwrite_r+0xbe>
  407868:	e738      	b.n	4076dc <__sfvwrite_r+0xfc>
  40786a:	461a      	mov	r2, r3
  40786c:	4629      	mov	r1, r5
  40786e:	9301      	str	r3, [sp, #4]
  407870:	f000 f94e 	bl	407b10 <memmove>
  407874:	6822      	ldr	r2, [r4, #0]
  407876:	9b01      	ldr	r3, [sp, #4]
  407878:	9800      	ldr	r0, [sp, #0]
  40787a:	441a      	add	r2, r3
  40787c:	6022      	str	r2, [r4, #0]
  40787e:	4621      	mov	r1, r4
  407880:	f7ff fc4a 	bl	407118 <_fflush_r>
  407884:	9b01      	ldr	r3, [sp, #4]
  407886:	2800      	cmp	r0, #0
  407888:	f47f af28 	bne.w	4076dc <__sfvwrite_r+0xfc>
  40788c:	461f      	mov	r7, r3
  40788e:	e750      	b.n	407732 <__sfvwrite_r+0x152>
  407890:	9800      	ldr	r0, [sp, #0]
  407892:	f000 f9a1 	bl	407bd8 <_realloc_r>
  407896:	4683      	mov	fp, r0
  407898:	2800      	cmp	r0, #0
  40789a:	d1c5      	bne.n	407828 <__sfvwrite_r+0x248>
  40789c:	9d00      	ldr	r5, [sp, #0]
  40789e:	6921      	ldr	r1, [r4, #16]
  4078a0:	4628      	mov	r0, r5
  4078a2:	f7ff fdb7 	bl	407414 <_free_r>
  4078a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4078aa:	220c      	movs	r2, #12
  4078ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4078b0:	602a      	str	r2, [r5, #0]
  4078b2:	e715      	b.n	4076e0 <__sfvwrite_r+0x100>
  4078b4:	f106 0901 	add.w	r9, r6, #1
  4078b8:	e722      	b.n	407700 <__sfvwrite_r+0x120>
  4078ba:	f04f 30ff 	mov.w	r0, #4294967295
  4078be:	e6bf      	b.n	407640 <__sfvwrite_r+0x60>
  4078c0:	9a00      	ldr	r2, [sp, #0]
  4078c2:	230c      	movs	r3, #12
  4078c4:	6013      	str	r3, [r2, #0]
  4078c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4078ca:	e709      	b.n	4076e0 <__sfvwrite_r+0x100>
  4078cc:	7ffffc00 	.word	0x7ffffc00

004078d0 <_fwalk_reent>:
  4078d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4078d4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4078d8:	d01f      	beq.n	40791a <_fwalk_reent+0x4a>
  4078da:	4688      	mov	r8, r1
  4078dc:	4606      	mov	r6, r0
  4078de:	f04f 0900 	mov.w	r9, #0
  4078e2:	687d      	ldr	r5, [r7, #4]
  4078e4:	68bc      	ldr	r4, [r7, #8]
  4078e6:	3d01      	subs	r5, #1
  4078e8:	d411      	bmi.n	40790e <_fwalk_reent+0x3e>
  4078ea:	89a3      	ldrh	r3, [r4, #12]
  4078ec:	2b01      	cmp	r3, #1
  4078ee:	f105 35ff 	add.w	r5, r5, #4294967295
  4078f2:	d908      	bls.n	407906 <_fwalk_reent+0x36>
  4078f4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4078f8:	3301      	adds	r3, #1
  4078fa:	4621      	mov	r1, r4
  4078fc:	4630      	mov	r0, r6
  4078fe:	d002      	beq.n	407906 <_fwalk_reent+0x36>
  407900:	47c0      	blx	r8
  407902:	ea49 0900 	orr.w	r9, r9, r0
  407906:	1c6b      	adds	r3, r5, #1
  407908:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40790c:	d1ed      	bne.n	4078ea <_fwalk_reent+0x1a>
  40790e:	683f      	ldr	r7, [r7, #0]
  407910:	2f00      	cmp	r7, #0
  407912:	d1e6      	bne.n	4078e2 <_fwalk_reent+0x12>
  407914:	4648      	mov	r0, r9
  407916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40791a:	46b9      	mov	r9, r7
  40791c:	4648      	mov	r0, r9
  40791e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407922:	bf00      	nop

00407924 <__locale_mb_cur_max>:
  407924:	4b04      	ldr	r3, [pc, #16]	; (407938 <__locale_mb_cur_max+0x14>)
  407926:	4a05      	ldr	r2, [pc, #20]	; (40793c <__locale_mb_cur_max+0x18>)
  407928:	681b      	ldr	r3, [r3, #0]
  40792a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40792c:	2b00      	cmp	r3, #0
  40792e:	bf08      	it	eq
  407930:	4613      	moveq	r3, r2
  407932:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  407936:	4770      	bx	lr
  407938:	20400048 	.word	0x20400048
  40793c:	2040088c 	.word	0x2040088c

00407940 <__retarget_lock_init_recursive>:
  407940:	4770      	bx	lr
  407942:	bf00      	nop

00407944 <__retarget_lock_close_recursive>:
  407944:	4770      	bx	lr
  407946:	bf00      	nop

00407948 <__retarget_lock_acquire_recursive>:
  407948:	4770      	bx	lr
  40794a:	bf00      	nop

0040794c <__retarget_lock_release_recursive>:
  40794c:	4770      	bx	lr
  40794e:	bf00      	nop

00407950 <__swhatbuf_r>:
  407950:	b570      	push	{r4, r5, r6, lr}
  407952:	460c      	mov	r4, r1
  407954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407958:	2900      	cmp	r1, #0
  40795a:	b090      	sub	sp, #64	; 0x40
  40795c:	4615      	mov	r5, r2
  40795e:	461e      	mov	r6, r3
  407960:	db14      	blt.n	40798c <__swhatbuf_r+0x3c>
  407962:	aa01      	add	r2, sp, #4
  407964:	f000 fc9e 	bl	4082a4 <_fstat_r>
  407968:	2800      	cmp	r0, #0
  40796a:	db0f      	blt.n	40798c <__swhatbuf_r+0x3c>
  40796c:	9a02      	ldr	r2, [sp, #8]
  40796e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  407972:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  407976:	fab2 f282 	clz	r2, r2
  40797a:	0952      	lsrs	r2, r2, #5
  40797c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407980:	f44f 6000 	mov.w	r0, #2048	; 0x800
  407984:	6032      	str	r2, [r6, #0]
  407986:	602b      	str	r3, [r5, #0]
  407988:	b010      	add	sp, #64	; 0x40
  40798a:	bd70      	pop	{r4, r5, r6, pc}
  40798c:	89a2      	ldrh	r2, [r4, #12]
  40798e:	2300      	movs	r3, #0
  407990:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  407994:	6033      	str	r3, [r6, #0]
  407996:	d004      	beq.n	4079a2 <__swhatbuf_r+0x52>
  407998:	2240      	movs	r2, #64	; 0x40
  40799a:	4618      	mov	r0, r3
  40799c:	602a      	str	r2, [r5, #0]
  40799e:	b010      	add	sp, #64	; 0x40
  4079a0:	bd70      	pop	{r4, r5, r6, pc}
  4079a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4079a6:	602b      	str	r3, [r5, #0]
  4079a8:	b010      	add	sp, #64	; 0x40
  4079aa:	bd70      	pop	{r4, r5, r6, pc}

004079ac <__smakebuf_r>:
  4079ac:	898a      	ldrh	r2, [r1, #12]
  4079ae:	0792      	lsls	r2, r2, #30
  4079b0:	460b      	mov	r3, r1
  4079b2:	d506      	bpl.n	4079c2 <__smakebuf_r+0x16>
  4079b4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4079b8:	2101      	movs	r1, #1
  4079ba:	601a      	str	r2, [r3, #0]
  4079bc:	611a      	str	r2, [r3, #16]
  4079be:	6159      	str	r1, [r3, #20]
  4079c0:	4770      	bx	lr
  4079c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4079c4:	b083      	sub	sp, #12
  4079c6:	ab01      	add	r3, sp, #4
  4079c8:	466a      	mov	r2, sp
  4079ca:	460c      	mov	r4, r1
  4079cc:	4606      	mov	r6, r0
  4079ce:	f7ff ffbf 	bl	407950 <__swhatbuf_r>
  4079d2:	9900      	ldr	r1, [sp, #0]
  4079d4:	4605      	mov	r5, r0
  4079d6:	4630      	mov	r0, r6
  4079d8:	f7fd ff8e 	bl	4058f8 <_malloc_r>
  4079dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4079e0:	b1d8      	cbz	r0, 407a1a <__smakebuf_r+0x6e>
  4079e2:	9a01      	ldr	r2, [sp, #4]
  4079e4:	4f15      	ldr	r7, [pc, #84]	; (407a3c <__smakebuf_r+0x90>)
  4079e6:	9900      	ldr	r1, [sp, #0]
  4079e8:	63f7      	str	r7, [r6, #60]	; 0x3c
  4079ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4079ee:	81a3      	strh	r3, [r4, #12]
  4079f0:	6020      	str	r0, [r4, #0]
  4079f2:	6120      	str	r0, [r4, #16]
  4079f4:	6161      	str	r1, [r4, #20]
  4079f6:	b91a      	cbnz	r2, 407a00 <__smakebuf_r+0x54>
  4079f8:	432b      	orrs	r3, r5
  4079fa:	81a3      	strh	r3, [r4, #12]
  4079fc:	b003      	add	sp, #12
  4079fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407a00:	4630      	mov	r0, r6
  407a02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407a06:	f000 fc61 	bl	4082cc <_isatty_r>
  407a0a:	b1a0      	cbz	r0, 407a36 <__smakebuf_r+0x8a>
  407a0c:	89a3      	ldrh	r3, [r4, #12]
  407a0e:	f023 0303 	bic.w	r3, r3, #3
  407a12:	f043 0301 	orr.w	r3, r3, #1
  407a16:	b21b      	sxth	r3, r3
  407a18:	e7ee      	b.n	4079f8 <__smakebuf_r+0x4c>
  407a1a:	059a      	lsls	r2, r3, #22
  407a1c:	d4ee      	bmi.n	4079fc <__smakebuf_r+0x50>
  407a1e:	f023 0303 	bic.w	r3, r3, #3
  407a22:	f104 0243 	add.w	r2, r4, #67	; 0x43
  407a26:	f043 0302 	orr.w	r3, r3, #2
  407a2a:	2101      	movs	r1, #1
  407a2c:	81a3      	strh	r3, [r4, #12]
  407a2e:	6022      	str	r2, [r4, #0]
  407a30:	6122      	str	r2, [r4, #16]
  407a32:	6161      	str	r1, [r4, #20]
  407a34:	e7e2      	b.n	4079fc <__smakebuf_r+0x50>
  407a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407a3a:	e7dd      	b.n	4079f8 <__smakebuf_r+0x4c>
  407a3c:	0040716d 	.word	0x0040716d

00407a40 <__ascii_mbtowc>:
  407a40:	b082      	sub	sp, #8
  407a42:	b149      	cbz	r1, 407a58 <__ascii_mbtowc+0x18>
  407a44:	b15a      	cbz	r2, 407a5e <__ascii_mbtowc+0x1e>
  407a46:	b16b      	cbz	r3, 407a64 <__ascii_mbtowc+0x24>
  407a48:	7813      	ldrb	r3, [r2, #0]
  407a4a:	600b      	str	r3, [r1, #0]
  407a4c:	7812      	ldrb	r2, [r2, #0]
  407a4e:	1c10      	adds	r0, r2, #0
  407a50:	bf18      	it	ne
  407a52:	2001      	movne	r0, #1
  407a54:	b002      	add	sp, #8
  407a56:	4770      	bx	lr
  407a58:	a901      	add	r1, sp, #4
  407a5a:	2a00      	cmp	r2, #0
  407a5c:	d1f3      	bne.n	407a46 <__ascii_mbtowc+0x6>
  407a5e:	4610      	mov	r0, r2
  407a60:	b002      	add	sp, #8
  407a62:	4770      	bx	lr
  407a64:	f06f 0001 	mvn.w	r0, #1
  407a68:	e7f4      	b.n	407a54 <__ascii_mbtowc+0x14>
  407a6a:	bf00      	nop
  407a6c:	0000      	movs	r0, r0
	...

00407a70 <memchr>:
  407a70:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  407a74:	2a10      	cmp	r2, #16
  407a76:	db2b      	blt.n	407ad0 <memchr+0x60>
  407a78:	f010 0f07 	tst.w	r0, #7
  407a7c:	d008      	beq.n	407a90 <memchr+0x20>
  407a7e:	f810 3b01 	ldrb.w	r3, [r0], #1
  407a82:	3a01      	subs	r2, #1
  407a84:	428b      	cmp	r3, r1
  407a86:	d02d      	beq.n	407ae4 <memchr+0x74>
  407a88:	f010 0f07 	tst.w	r0, #7
  407a8c:	b342      	cbz	r2, 407ae0 <memchr+0x70>
  407a8e:	d1f6      	bne.n	407a7e <memchr+0xe>
  407a90:	b4f0      	push	{r4, r5, r6, r7}
  407a92:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  407a96:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  407a9a:	f022 0407 	bic.w	r4, r2, #7
  407a9e:	f07f 0700 	mvns.w	r7, #0
  407aa2:	2300      	movs	r3, #0
  407aa4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  407aa8:	3c08      	subs	r4, #8
  407aaa:	ea85 0501 	eor.w	r5, r5, r1
  407aae:	ea86 0601 	eor.w	r6, r6, r1
  407ab2:	fa85 f547 	uadd8	r5, r5, r7
  407ab6:	faa3 f587 	sel	r5, r3, r7
  407aba:	fa86 f647 	uadd8	r6, r6, r7
  407abe:	faa5 f687 	sel	r6, r5, r7
  407ac2:	b98e      	cbnz	r6, 407ae8 <memchr+0x78>
  407ac4:	d1ee      	bne.n	407aa4 <memchr+0x34>
  407ac6:	bcf0      	pop	{r4, r5, r6, r7}
  407ac8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  407acc:	f002 0207 	and.w	r2, r2, #7
  407ad0:	b132      	cbz	r2, 407ae0 <memchr+0x70>
  407ad2:	f810 3b01 	ldrb.w	r3, [r0], #1
  407ad6:	3a01      	subs	r2, #1
  407ad8:	ea83 0301 	eor.w	r3, r3, r1
  407adc:	b113      	cbz	r3, 407ae4 <memchr+0x74>
  407ade:	d1f8      	bne.n	407ad2 <memchr+0x62>
  407ae0:	2000      	movs	r0, #0
  407ae2:	4770      	bx	lr
  407ae4:	3801      	subs	r0, #1
  407ae6:	4770      	bx	lr
  407ae8:	2d00      	cmp	r5, #0
  407aea:	bf06      	itte	eq
  407aec:	4635      	moveq	r5, r6
  407aee:	3803      	subeq	r0, #3
  407af0:	3807      	subne	r0, #7
  407af2:	f015 0f01 	tst.w	r5, #1
  407af6:	d107      	bne.n	407b08 <memchr+0x98>
  407af8:	3001      	adds	r0, #1
  407afa:	f415 7f80 	tst.w	r5, #256	; 0x100
  407afe:	bf02      	ittt	eq
  407b00:	3001      	addeq	r0, #1
  407b02:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  407b06:	3001      	addeq	r0, #1
  407b08:	bcf0      	pop	{r4, r5, r6, r7}
  407b0a:	3801      	subs	r0, #1
  407b0c:	4770      	bx	lr
  407b0e:	bf00      	nop

00407b10 <memmove>:
  407b10:	4288      	cmp	r0, r1
  407b12:	b5f0      	push	{r4, r5, r6, r7, lr}
  407b14:	d90d      	bls.n	407b32 <memmove+0x22>
  407b16:	188b      	adds	r3, r1, r2
  407b18:	4298      	cmp	r0, r3
  407b1a:	d20a      	bcs.n	407b32 <memmove+0x22>
  407b1c:	1884      	adds	r4, r0, r2
  407b1e:	2a00      	cmp	r2, #0
  407b20:	d051      	beq.n	407bc6 <memmove+0xb6>
  407b22:	4622      	mov	r2, r4
  407b24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  407b28:	f802 4d01 	strb.w	r4, [r2, #-1]!
  407b2c:	4299      	cmp	r1, r3
  407b2e:	d1f9      	bne.n	407b24 <memmove+0x14>
  407b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407b32:	2a0f      	cmp	r2, #15
  407b34:	d948      	bls.n	407bc8 <memmove+0xb8>
  407b36:	ea41 0300 	orr.w	r3, r1, r0
  407b3a:	079b      	lsls	r3, r3, #30
  407b3c:	d146      	bne.n	407bcc <memmove+0xbc>
  407b3e:	f100 0410 	add.w	r4, r0, #16
  407b42:	f101 0310 	add.w	r3, r1, #16
  407b46:	4615      	mov	r5, r2
  407b48:	f853 6c10 	ldr.w	r6, [r3, #-16]
  407b4c:	f844 6c10 	str.w	r6, [r4, #-16]
  407b50:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  407b54:	f844 6c0c 	str.w	r6, [r4, #-12]
  407b58:	f853 6c08 	ldr.w	r6, [r3, #-8]
  407b5c:	f844 6c08 	str.w	r6, [r4, #-8]
  407b60:	3d10      	subs	r5, #16
  407b62:	f853 6c04 	ldr.w	r6, [r3, #-4]
  407b66:	f844 6c04 	str.w	r6, [r4, #-4]
  407b6a:	2d0f      	cmp	r5, #15
  407b6c:	f103 0310 	add.w	r3, r3, #16
  407b70:	f104 0410 	add.w	r4, r4, #16
  407b74:	d8e8      	bhi.n	407b48 <memmove+0x38>
  407b76:	f1a2 0310 	sub.w	r3, r2, #16
  407b7a:	f023 030f 	bic.w	r3, r3, #15
  407b7e:	f002 0e0f 	and.w	lr, r2, #15
  407b82:	3310      	adds	r3, #16
  407b84:	f1be 0f03 	cmp.w	lr, #3
  407b88:	4419      	add	r1, r3
  407b8a:	4403      	add	r3, r0
  407b8c:	d921      	bls.n	407bd2 <memmove+0xc2>
  407b8e:	1f1e      	subs	r6, r3, #4
  407b90:	460d      	mov	r5, r1
  407b92:	4674      	mov	r4, lr
  407b94:	3c04      	subs	r4, #4
  407b96:	f855 7b04 	ldr.w	r7, [r5], #4
  407b9a:	f846 7f04 	str.w	r7, [r6, #4]!
  407b9e:	2c03      	cmp	r4, #3
  407ba0:	d8f8      	bhi.n	407b94 <memmove+0x84>
  407ba2:	f1ae 0404 	sub.w	r4, lr, #4
  407ba6:	f024 0403 	bic.w	r4, r4, #3
  407baa:	3404      	adds	r4, #4
  407bac:	4421      	add	r1, r4
  407bae:	4423      	add	r3, r4
  407bb0:	f002 0203 	and.w	r2, r2, #3
  407bb4:	b162      	cbz	r2, 407bd0 <memmove+0xc0>
  407bb6:	3b01      	subs	r3, #1
  407bb8:	440a      	add	r2, r1
  407bba:	f811 4b01 	ldrb.w	r4, [r1], #1
  407bbe:	f803 4f01 	strb.w	r4, [r3, #1]!
  407bc2:	428a      	cmp	r2, r1
  407bc4:	d1f9      	bne.n	407bba <memmove+0xaa>
  407bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407bc8:	4603      	mov	r3, r0
  407bca:	e7f3      	b.n	407bb4 <memmove+0xa4>
  407bcc:	4603      	mov	r3, r0
  407bce:	e7f2      	b.n	407bb6 <memmove+0xa6>
  407bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407bd2:	4672      	mov	r2, lr
  407bd4:	e7ee      	b.n	407bb4 <memmove+0xa4>
  407bd6:	bf00      	nop

00407bd8 <_realloc_r>:
  407bd8:	2900      	cmp	r1, #0
  407bda:	f000 8095 	beq.w	407d08 <_realloc_r+0x130>
  407bde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407be2:	460d      	mov	r5, r1
  407be4:	4616      	mov	r6, r2
  407be6:	b083      	sub	sp, #12
  407be8:	4680      	mov	r8, r0
  407bea:	f106 070b 	add.w	r7, r6, #11
  407bee:	f7fe fa1b 	bl	406028 <__malloc_lock>
  407bf2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  407bf6:	2f16      	cmp	r7, #22
  407bf8:	f02e 0403 	bic.w	r4, lr, #3
  407bfc:	f1a5 0908 	sub.w	r9, r5, #8
  407c00:	d83c      	bhi.n	407c7c <_realloc_r+0xa4>
  407c02:	2210      	movs	r2, #16
  407c04:	4617      	mov	r7, r2
  407c06:	42be      	cmp	r6, r7
  407c08:	d83d      	bhi.n	407c86 <_realloc_r+0xae>
  407c0a:	4294      	cmp	r4, r2
  407c0c:	da43      	bge.n	407c96 <_realloc_r+0xbe>
  407c0e:	4bc4      	ldr	r3, [pc, #784]	; (407f20 <_realloc_r+0x348>)
  407c10:	6899      	ldr	r1, [r3, #8]
  407c12:	eb09 0004 	add.w	r0, r9, r4
  407c16:	4288      	cmp	r0, r1
  407c18:	f000 80b4 	beq.w	407d84 <_realloc_r+0x1ac>
  407c1c:	6843      	ldr	r3, [r0, #4]
  407c1e:	f023 0101 	bic.w	r1, r3, #1
  407c22:	4401      	add	r1, r0
  407c24:	6849      	ldr	r1, [r1, #4]
  407c26:	07c9      	lsls	r1, r1, #31
  407c28:	d54c      	bpl.n	407cc4 <_realloc_r+0xec>
  407c2a:	f01e 0f01 	tst.w	lr, #1
  407c2e:	f000 809b 	beq.w	407d68 <_realloc_r+0x190>
  407c32:	4631      	mov	r1, r6
  407c34:	4640      	mov	r0, r8
  407c36:	f7fd fe5f 	bl	4058f8 <_malloc_r>
  407c3a:	4606      	mov	r6, r0
  407c3c:	2800      	cmp	r0, #0
  407c3e:	d03a      	beq.n	407cb6 <_realloc_r+0xde>
  407c40:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407c44:	f023 0301 	bic.w	r3, r3, #1
  407c48:	444b      	add	r3, r9
  407c4a:	f1a0 0208 	sub.w	r2, r0, #8
  407c4e:	429a      	cmp	r2, r3
  407c50:	f000 8121 	beq.w	407e96 <_realloc_r+0x2be>
  407c54:	1f22      	subs	r2, r4, #4
  407c56:	2a24      	cmp	r2, #36	; 0x24
  407c58:	f200 8107 	bhi.w	407e6a <_realloc_r+0x292>
  407c5c:	2a13      	cmp	r2, #19
  407c5e:	f200 80db 	bhi.w	407e18 <_realloc_r+0x240>
  407c62:	4603      	mov	r3, r0
  407c64:	462a      	mov	r2, r5
  407c66:	6811      	ldr	r1, [r2, #0]
  407c68:	6019      	str	r1, [r3, #0]
  407c6a:	6851      	ldr	r1, [r2, #4]
  407c6c:	6059      	str	r1, [r3, #4]
  407c6e:	6892      	ldr	r2, [r2, #8]
  407c70:	609a      	str	r2, [r3, #8]
  407c72:	4629      	mov	r1, r5
  407c74:	4640      	mov	r0, r8
  407c76:	f7ff fbcd 	bl	407414 <_free_r>
  407c7a:	e01c      	b.n	407cb6 <_realloc_r+0xde>
  407c7c:	f027 0707 	bic.w	r7, r7, #7
  407c80:	2f00      	cmp	r7, #0
  407c82:	463a      	mov	r2, r7
  407c84:	dabf      	bge.n	407c06 <_realloc_r+0x2e>
  407c86:	2600      	movs	r6, #0
  407c88:	230c      	movs	r3, #12
  407c8a:	4630      	mov	r0, r6
  407c8c:	f8c8 3000 	str.w	r3, [r8]
  407c90:	b003      	add	sp, #12
  407c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407c96:	462e      	mov	r6, r5
  407c98:	1be3      	subs	r3, r4, r7
  407c9a:	2b0f      	cmp	r3, #15
  407c9c:	d81e      	bhi.n	407cdc <_realloc_r+0x104>
  407c9e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  407ca2:	f003 0301 	and.w	r3, r3, #1
  407ca6:	4323      	orrs	r3, r4
  407ca8:	444c      	add	r4, r9
  407caa:	f8c9 3004 	str.w	r3, [r9, #4]
  407cae:	6863      	ldr	r3, [r4, #4]
  407cb0:	f043 0301 	orr.w	r3, r3, #1
  407cb4:	6063      	str	r3, [r4, #4]
  407cb6:	4640      	mov	r0, r8
  407cb8:	f7fe f9bc 	bl	406034 <__malloc_unlock>
  407cbc:	4630      	mov	r0, r6
  407cbe:	b003      	add	sp, #12
  407cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407cc4:	f023 0303 	bic.w	r3, r3, #3
  407cc8:	18e1      	adds	r1, r4, r3
  407cca:	4291      	cmp	r1, r2
  407ccc:	db1f      	blt.n	407d0e <_realloc_r+0x136>
  407cce:	68c3      	ldr	r3, [r0, #12]
  407cd0:	6882      	ldr	r2, [r0, #8]
  407cd2:	462e      	mov	r6, r5
  407cd4:	60d3      	str	r3, [r2, #12]
  407cd6:	460c      	mov	r4, r1
  407cd8:	609a      	str	r2, [r3, #8]
  407cda:	e7dd      	b.n	407c98 <_realloc_r+0xc0>
  407cdc:	f8d9 2004 	ldr.w	r2, [r9, #4]
  407ce0:	eb09 0107 	add.w	r1, r9, r7
  407ce4:	f002 0201 	and.w	r2, r2, #1
  407ce8:	444c      	add	r4, r9
  407cea:	f043 0301 	orr.w	r3, r3, #1
  407cee:	4317      	orrs	r7, r2
  407cf0:	f8c9 7004 	str.w	r7, [r9, #4]
  407cf4:	604b      	str	r3, [r1, #4]
  407cf6:	6863      	ldr	r3, [r4, #4]
  407cf8:	f043 0301 	orr.w	r3, r3, #1
  407cfc:	3108      	adds	r1, #8
  407cfe:	6063      	str	r3, [r4, #4]
  407d00:	4640      	mov	r0, r8
  407d02:	f7ff fb87 	bl	407414 <_free_r>
  407d06:	e7d6      	b.n	407cb6 <_realloc_r+0xde>
  407d08:	4611      	mov	r1, r2
  407d0a:	f7fd bdf5 	b.w	4058f8 <_malloc_r>
  407d0e:	f01e 0f01 	tst.w	lr, #1
  407d12:	d18e      	bne.n	407c32 <_realloc_r+0x5a>
  407d14:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407d18:	eba9 0a01 	sub.w	sl, r9, r1
  407d1c:	f8da 1004 	ldr.w	r1, [sl, #4]
  407d20:	f021 0103 	bic.w	r1, r1, #3
  407d24:	440b      	add	r3, r1
  407d26:	4423      	add	r3, r4
  407d28:	4293      	cmp	r3, r2
  407d2a:	db25      	blt.n	407d78 <_realloc_r+0x1a0>
  407d2c:	68c2      	ldr	r2, [r0, #12]
  407d2e:	6881      	ldr	r1, [r0, #8]
  407d30:	4656      	mov	r6, sl
  407d32:	60ca      	str	r2, [r1, #12]
  407d34:	6091      	str	r1, [r2, #8]
  407d36:	f8da 100c 	ldr.w	r1, [sl, #12]
  407d3a:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407d3e:	1f22      	subs	r2, r4, #4
  407d40:	2a24      	cmp	r2, #36	; 0x24
  407d42:	60c1      	str	r1, [r0, #12]
  407d44:	6088      	str	r0, [r1, #8]
  407d46:	f200 8094 	bhi.w	407e72 <_realloc_r+0x29a>
  407d4a:	2a13      	cmp	r2, #19
  407d4c:	d96f      	bls.n	407e2e <_realloc_r+0x256>
  407d4e:	6829      	ldr	r1, [r5, #0]
  407d50:	f8ca 1008 	str.w	r1, [sl, #8]
  407d54:	6869      	ldr	r1, [r5, #4]
  407d56:	f8ca 100c 	str.w	r1, [sl, #12]
  407d5a:	2a1b      	cmp	r2, #27
  407d5c:	f200 80a2 	bhi.w	407ea4 <_realloc_r+0x2cc>
  407d60:	3508      	adds	r5, #8
  407d62:	f10a 0210 	add.w	r2, sl, #16
  407d66:	e063      	b.n	407e30 <_realloc_r+0x258>
  407d68:	f855 3c08 	ldr.w	r3, [r5, #-8]
  407d6c:	eba9 0a03 	sub.w	sl, r9, r3
  407d70:	f8da 1004 	ldr.w	r1, [sl, #4]
  407d74:	f021 0103 	bic.w	r1, r1, #3
  407d78:	1863      	adds	r3, r4, r1
  407d7a:	4293      	cmp	r3, r2
  407d7c:	f6ff af59 	blt.w	407c32 <_realloc_r+0x5a>
  407d80:	4656      	mov	r6, sl
  407d82:	e7d8      	b.n	407d36 <_realloc_r+0x15e>
  407d84:	6841      	ldr	r1, [r0, #4]
  407d86:	f021 0b03 	bic.w	fp, r1, #3
  407d8a:	44a3      	add	fp, r4
  407d8c:	f107 0010 	add.w	r0, r7, #16
  407d90:	4583      	cmp	fp, r0
  407d92:	da56      	bge.n	407e42 <_realloc_r+0x26a>
  407d94:	f01e 0f01 	tst.w	lr, #1
  407d98:	f47f af4b 	bne.w	407c32 <_realloc_r+0x5a>
  407d9c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407da0:	eba9 0a01 	sub.w	sl, r9, r1
  407da4:	f8da 1004 	ldr.w	r1, [sl, #4]
  407da8:	f021 0103 	bic.w	r1, r1, #3
  407dac:	448b      	add	fp, r1
  407dae:	4558      	cmp	r0, fp
  407db0:	dce2      	bgt.n	407d78 <_realloc_r+0x1a0>
  407db2:	4656      	mov	r6, sl
  407db4:	f8da 100c 	ldr.w	r1, [sl, #12]
  407db8:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407dbc:	1f22      	subs	r2, r4, #4
  407dbe:	2a24      	cmp	r2, #36	; 0x24
  407dc0:	60c1      	str	r1, [r0, #12]
  407dc2:	6088      	str	r0, [r1, #8]
  407dc4:	f200 808f 	bhi.w	407ee6 <_realloc_r+0x30e>
  407dc8:	2a13      	cmp	r2, #19
  407dca:	f240 808a 	bls.w	407ee2 <_realloc_r+0x30a>
  407dce:	6829      	ldr	r1, [r5, #0]
  407dd0:	f8ca 1008 	str.w	r1, [sl, #8]
  407dd4:	6869      	ldr	r1, [r5, #4]
  407dd6:	f8ca 100c 	str.w	r1, [sl, #12]
  407dda:	2a1b      	cmp	r2, #27
  407ddc:	f200 808a 	bhi.w	407ef4 <_realloc_r+0x31c>
  407de0:	3508      	adds	r5, #8
  407de2:	f10a 0210 	add.w	r2, sl, #16
  407de6:	6829      	ldr	r1, [r5, #0]
  407de8:	6011      	str	r1, [r2, #0]
  407dea:	6869      	ldr	r1, [r5, #4]
  407dec:	6051      	str	r1, [r2, #4]
  407dee:	68a9      	ldr	r1, [r5, #8]
  407df0:	6091      	str	r1, [r2, #8]
  407df2:	eb0a 0107 	add.w	r1, sl, r7
  407df6:	ebab 0207 	sub.w	r2, fp, r7
  407dfa:	f042 0201 	orr.w	r2, r2, #1
  407dfe:	6099      	str	r1, [r3, #8]
  407e00:	604a      	str	r2, [r1, #4]
  407e02:	f8da 3004 	ldr.w	r3, [sl, #4]
  407e06:	f003 0301 	and.w	r3, r3, #1
  407e0a:	431f      	orrs	r7, r3
  407e0c:	4640      	mov	r0, r8
  407e0e:	f8ca 7004 	str.w	r7, [sl, #4]
  407e12:	f7fe f90f 	bl	406034 <__malloc_unlock>
  407e16:	e751      	b.n	407cbc <_realloc_r+0xe4>
  407e18:	682b      	ldr	r3, [r5, #0]
  407e1a:	6003      	str	r3, [r0, #0]
  407e1c:	686b      	ldr	r3, [r5, #4]
  407e1e:	6043      	str	r3, [r0, #4]
  407e20:	2a1b      	cmp	r2, #27
  407e22:	d82d      	bhi.n	407e80 <_realloc_r+0x2a8>
  407e24:	f100 0308 	add.w	r3, r0, #8
  407e28:	f105 0208 	add.w	r2, r5, #8
  407e2c:	e71b      	b.n	407c66 <_realloc_r+0x8e>
  407e2e:	4632      	mov	r2, r6
  407e30:	6829      	ldr	r1, [r5, #0]
  407e32:	6011      	str	r1, [r2, #0]
  407e34:	6869      	ldr	r1, [r5, #4]
  407e36:	6051      	str	r1, [r2, #4]
  407e38:	68a9      	ldr	r1, [r5, #8]
  407e3a:	6091      	str	r1, [r2, #8]
  407e3c:	461c      	mov	r4, r3
  407e3e:	46d1      	mov	r9, sl
  407e40:	e72a      	b.n	407c98 <_realloc_r+0xc0>
  407e42:	eb09 0107 	add.w	r1, r9, r7
  407e46:	ebab 0b07 	sub.w	fp, fp, r7
  407e4a:	f04b 0201 	orr.w	r2, fp, #1
  407e4e:	6099      	str	r1, [r3, #8]
  407e50:	604a      	str	r2, [r1, #4]
  407e52:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407e56:	f003 0301 	and.w	r3, r3, #1
  407e5a:	431f      	orrs	r7, r3
  407e5c:	4640      	mov	r0, r8
  407e5e:	f845 7c04 	str.w	r7, [r5, #-4]
  407e62:	f7fe f8e7 	bl	406034 <__malloc_unlock>
  407e66:	462e      	mov	r6, r5
  407e68:	e728      	b.n	407cbc <_realloc_r+0xe4>
  407e6a:	4629      	mov	r1, r5
  407e6c:	f7ff fe50 	bl	407b10 <memmove>
  407e70:	e6ff      	b.n	407c72 <_realloc_r+0x9a>
  407e72:	4629      	mov	r1, r5
  407e74:	4630      	mov	r0, r6
  407e76:	461c      	mov	r4, r3
  407e78:	46d1      	mov	r9, sl
  407e7a:	f7ff fe49 	bl	407b10 <memmove>
  407e7e:	e70b      	b.n	407c98 <_realloc_r+0xc0>
  407e80:	68ab      	ldr	r3, [r5, #8]
  407e82:	6083      	str	r3, [r0, #8]
  407e84:	68eb      	ldr	r3, [r5, #12]
  407e86:	60c3      	str	r3, [r0, #12]
  407e88:	2a24      	cmp	r2, #36	; 0x24
  407e8a:	d017      	beq.n	407ebc <_realloc_r+0x2e4>
  407e8c:	f100 0310 	add.w	r3, r0, #16
  407e90:	f105 0210 	add.w	r2, r5, #16
  407e94:	e6e7      	b.n	407c66 <_realloc_r+0x8e>
  407e96:	f850 3c04 	ldr.w	r3, [r0, #-4]
  407e9a:	f023 0303 	bic.w	r3, r3, #3
  407e9e:	441c      	add	r4, r3
  407ea0:	462e      	mov	r6, r5
  407ea2:	e6f9      	b.n	407c98 <_realloc_r+0xc0>
  407ea4:	68a9      	ldr	r1, [r5, #8]
  407ea6:	f8ca 1010 	str.w	r1, [sl, #16]
  407eaa:	68e9      	ldr	r1, [r5, #12]
  407eac:	f8ca 1014 	str.w	r1, [sl, #20]
  407eb0:	2a24      	cmp	r2, #36	; 0x24
  407eb2:	d00c      	beq.n	407ece <_realloc_r+0x2f6>
  407eb4:	3510      	adds	r5, #16
  407eb6:	f10a 0218 	add.w	r2, sl, #24
  407eba:	e7b9      	b.n	407e30 <_realloc_r+0x258>
  407ebc:	692b      	ldr	r3, [r5, #16]
  407ebe:	6103      	str	r3, [r0, #16]
  407ec0:	696b      	ldr	r3, [r5, #20]
  407ec2:	6143      	str	r3, [r0, #20]
  407ec4:	f105 0218 	add.w	r2, r5, #24
  407ec8:	f100 0318 	add.w	r3, r0, #24
  407ecc:	e6cb      	b.n	407c66 <_realloc_r+0x8e>
  407ece:	692a      	ldr	r2, [r5, #16]
  407ed0:	f8ca 2018 	str.w	r2, [sl, #24]
  407ed4:	696a      	ldr	r2, [r5, #20]
  407ed6:	f8ca 201c 	str.w	r2, [sl, #28]
  407eda:	3518      	adds	r5, #24
  407edc:	f10a 0220 	add.w	r2, sl, #32
  407ee0:	e7a6      	b.n	407e30 <_realloc_r+0x258>
  407ee2:	4632      	mov	r2, r6
  407ee4:	e77f      	b.n	407de6 <_realloc_r+0x20e>
  407ee6:	4629      	mov	r1, r5
  407ee8:	4630      	mov	r0, r6
  407eea:	9301      	str	r3, [sp, #4]
  407eec:	f7ff fe10 	bl	407b10 <memmove>
  407ef0:	9b01      	ldr	r3, [sp, #4]
  407ef2:	e77e      	b.n	407df2 <_realloc_r+0x21a>
  407ef4:	68a9      	ldr	r1, [r5, #8]
  407ef6:	f8ca 1010 	str.w	r1, [sl, #16]
  407efa:	68e9      	ldr	r1, [r5, #12]
  407efc:	f8ca 1014 	str.w	r1, [sl, #20]
  407f00:	2a24      	cmp	r2, #36	; 0x24
  407f02:	d003      	beq.n	407f0c <_realloc_r+0x334>
  407f04:	3510      	adds	r5, #16
  407f06:	f10a 0218 	add.w	r2, sl, #24
  407f0a:	e76c      	b.n	407de6 <_realloc_r+0x20e>
  407f0c:	692a      	ldr	r2, [r5, #16]
  407f0e:	f8ca 2018 	str.w	r2, [sl, #24]
  407f12:	696a      	ldr	r2, [r5, #20]
  407f14:	f8ca 201c 	str.w	r2, [sl, #28]
  407f18:	3518      	adds	r5, #24
  407f1a:	f10a 0220 	add.w	r2, sl, #32
  407f1e:	e762      	b.n	407de6 <_realloc_r+0x20e>
  407f20:	20400478 	.word	0x20400478

00407f24 <__sread>:
  407f24:	b510      	push	{r4, lr}
  407f26:	460c      	mov	r4, r1
  407f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407f2c:	f000 f9f6 	bl	40831c <_read_r>
  407f30:	2800      	cmp	r0, #0
  407f32:	db03      	blt.n	407f3c <__sread+0x18>
  407f34:	6d23      	ldr	r3, [r4, #80]	; 0x50
  407f36:	4403      	add	r3, r0
  407f38:	6523      	str	r3, [r4, #80]	; 0x50
  407f3a:	bd10      	pop	{r4, pc}
  407f3c:	89a3      	ldrh	r3, [r4, #12]
  407f3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  407f42:	81a3      	strh	r3, [r4, #12]
  407f44:	bd10      	pop	{r4, pc}
  407f46:	bf00      	nop

00407f48 <__swrite>:
  407f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407f4c:	4616      	mov	r6, r2
  407f4e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  407f52:	461f      	mov	r7, r3
  407f54:	05d3      	lsls	r3, r2, #23
  407f56:	460c      	mov	r4, r1
  407f58:	4605      	mov	r5, r0
  407f5a:	d507      	bpl.n	407f6c <__swrite+0x24>
  407f5c:	2200      	movs	r2, #0
  407f5e:	2302      	movs	r3, #2
  407f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407f64:	f000 f9c4 	bl	4082f0 <_lseek_r>
  407f68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407f6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407f70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  407f74:	81a2      	strh	r2, [r4, #12]
  407f76:	463b      	mov	r3, r7
  407f78:	4632      	mov	r2, r6
  407f7a:	4628      	mov	r0, r5
  407f7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407f80:	f000 b8a4 	b.w	4080cc <_write_r>

00407f84 <__sseek>:
  407f84:	b510      	push	{r4, lr}
  407f86:	460c      	mov	r4, r1
  407f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407f8c:	f000 f9b0 	bl	4082f0 <_lseek_r>
  407f90:	89a3      	ldrh	r3, [r4, #12]
  407f92:	1c42      	adds	r2, r0, #1
  407f94:	bf0e      	itee	eq
  407f96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  407f9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  407f9e:	6520      	strne	r0, [r4, #80]	; 0x50
  407fa0:	81a3      	strh	r3, [r4, #12]
  407fa2:	bd10      	pop	{r4, pc}

00407fa4 <__sclose>:
  407fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407fa8:	f000 b908 	b.w	4081bc <_close_r>

00407fac <__swbuf_r>:
  407fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407fae:	460d      	mov	r5, r1
  407fb0:	4614      	mov	r4, r2
  407fb2:	4606      	mov	r6, r0
  407fb4:	b110      	cbz	r0, 407fbc <__swbuf_r+0x10>
  407fb6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407fb8:	2b00      	cmp	r3, #0
  407fba:	d04b      	beq.n	408054 <__swbuf_r+0xa8>
  407fbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407fc0:	69a3      	ldr	r3, [r4, #24]
  407fc2:	60a3      	str	r3, [r4, #8]
  407fc4:	b291      	uxth	r1, r2
  407fc6:	0708      	lsls	r0, r1, #28
  407fc8:	d539      	bpl.n	40803e <__swbuf_r+0x92>
  407fca:	6923      	ldr	r3, [r4, #16]
  407fcc:	2b00      	cmp	r3, #0
  407fce:	d036      	beq.n	40803e <__swbuf_r+0x92>
  407fd0:	b2ed      	uxtb	r5, r5
  407fd2:	0489      	lsls	r1, r1, #18
  407fd4:	462f      	mov	r7, r5
  407fd6:	d515      	bpl.n	408004 <__swbuf_r+0x58>
  407fd8:	6822      	ldr	r2, [r4, #0]
  407fda:	6961      	ldr	r1, [r4, #20]
  407fdc:	1ad3      	subs	r3, r2, r3
  407fde:	428b      	cmp	r3, r1
  407fe0:	da1c      	bge.n	40801c <__swbuf_r+0x70>
  407fe2:	3301      	adds	r3, #1
  407fe4:	68a1      	ldr	r1, [r4, #8]
  407fe6:	1c50      	adds	r0, r2, #1
  407fe8:	3901      	subs	r1, #1
  407fea:	60a1      	str	r1, [r4, #8]
  407fec:	6020      	str	r0, [r4, #0]
  407fee:	7015      	strb	r5, [r2, #0]
  407ff0:	6962      	ldr	r2, [r4, #20]
  407ff2:	429a      	cmp	r2, r3
  407ff4:	d01a      	beq.n	40802c <__swbuf_r+0x80>
  407ff6:	89a3      	ldrh	r3, [r4, #12]
  407ff8:	07db      	lsls	r3, r3, #31
  407ffa:	d501      	bpl.n	408000 <__swbuf_r+0x54>
  407ffc:	2d0a      	cmp	r5, #10
  407ffe:	d015      	beq.n	40802c <__swbuf_r+0x80>
  408000:	4638      	mov	r0, r7
  408002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408004:	6e61      	ldr	r1, [r4, #100]	; 0x64
  408006:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40800a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40800e:	81a2      	strh	r2, [r4, #12]
  408010:	6822      	ldr	r2, [r4, #0]
  408012:	6661      	str	r1, [r4, #100]	; 0x64
  408014:	6961      	ldr	r1, [r4, #20]
  408016:	1ad3      	subs	r3, r2, r3
  408018:	428b      	cmp	r3, r1
  40801a:	dbe2      	blt.n	407fe2 <__swbuf_r+0x36>
  40801c:	4621      	mov	r1, r4
  40801e:	4630      	mov	r0, r6
  408020:	f7ff f87a 	bl	407118 <_fflush_r>
  408024:	b940      	cbnz	r0, 408038 <__swbuf_r+0x8c>
  408026:	6822      	ldr	r2, [r4, #0]
  408028:	2301      	movs	r3, #1
  40802a:	e7db      	b.n	407fe4 <__swbuf_r+0x38>
  40802c:	4621      	mov	r1, r4
  40802e:	4630      	mov	r0, r6
  408030:	f7ff f872 	bl	407118 <_fflush_r>
  408034:	2800      	cmp	r0, #0
  408036:	d0e3      	beq.n	408000 <__swbuf_r+0x54>
  408038:	f04f 37ff 	mov.w	r7, #4294967295
  40803c:	e7e0      	b.n	408000 <__swbuf_r+0x54>
  40803e:	4621      	mov	r1, r4
  408040:	4630      	mov	r0, r6
  408042:	f7fe ff55 	bl	406ef0 <__swsetup_r>
  408046:	2800      	cmp	r0, #0
  408048:	d1f6      	bne.n	408038 <__swbuf_r+0x8c>
  40804a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40804e:	6923      	ldr	r3, [r4, #16]
  408050:	b291      	uxth	r1, r2
  408052:	e7bd      	b.n	407fd0 <__swbuf_r+0x24>
  408054:	f7ff f8b8 	bl	4071c8 <__sinit>
  408058:	e7b0      	b.n	407fbc <__swbuf_r+0x10>
  40805a:	bf00      	nop

0040805c <_wcrtomb_r>:
  40805c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40805e:	4606      	mov	r6, r0
  408060:	b085      	sub	sp, #20
  408062:	461f      	mov	r7, r3
  408064:	b189      	cbz	r1, 40808a <_wcrtomb_r+0x2e>
  408066:	4c10      	ldr	r4, [pc, #64]	; (4080a8 <_wcrtomb_r+0x4c>)
  408068:	4d10      	ldr	r5, [pc, #64]	; (4080ac <_wcrtomb_r+0x50>)
  40806a:	6824      	ldr	r4, [r4, #0]
  40806c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40806e:	2c00      	cmp	r4, #0
  408070:	bf08      	it	eq
  408072:	462c      	moveq	r4, r5
  408074:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  408078:	47a0      	blx	r4
  40807a:	1c43      	adds	r3, r0, #1
  40807c:	d103      	bne.n	408086 <_wcrtomb_r+0x2a>
  40807e:	2200      	movs	r2, #0
  408080:	238a      	movs	r3, #138	; 0x8a
  408082:	603a      	str	r2, [r7, #0]
  408084:	6033      	str	r3, [r6, #0]
  408086:	b005      	add	sp, #20
  408088:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40808a:	460c      	mov	r4, r1
  40808c:	4906      	ldr	r1, [pc, #24]	; (4080a8 <_wcrtomb_r+0x4c>)
  40808e:	4a07      	ldr	r2, [pc, #28]	; (4080ac <_wcrtomb_r+0x50>)
  408090:	6809      	ldr	r1, [r1, #0]
  408092:	6b49      	ldr	r1, [r1, #52]	; 0x34
  408094:	2900      	cmp	r1, #0
  408096:	bf08      	it	eq
  408098:	4611      	moveq	r1, r2
  40809a:	4622      	mov	r2, r4
  40809c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  4080a0:	a901      	add	r1, sp, #4
  4080a2:	47a0      	blx	r4
  4080a4:	e7e9      	b.n	40807a <_wcrtomb_r+0x1e>
  4080a6:	bf00      	nop
  4080a8:	20400048 	.word	0x20400048
  4080ac:	2040088c 	.word	0x2040088c

004080b0 <__ascii_wctomb>:
  4080b0:	b121      	cbz	r1, 4080bc <__ascii_wctomb+0xc>
  4080b2:	2aff      	cmp	r2, #255	; 0xff
  4080b4:	d804      	bhi.n	4080c0 <__ascii_wctomb+0x10>
  4080b6:	700a      	strb	r2, [r1, #0]
  4080b8:	2001      	movs	r0, #1
  4080ba:	4770      	bx	lr
  4080bc:	4608      	mov	r0, r1
  4080be:	4770      	bx	lr
  4080c0:	238a      	movs	r3, #138	; 0x8a
  4080c2:	6003      	str	r3, [r0, #0]
  4080c4:	f04f 30ff 	mov.w	r0, #4294967295
  4080c8:	4770      	bx	lr
  4080ca:	bf00      	nop

004080cc <_write_r>:
  4080cc:	b570      	push	{r4, r5, r6, lr}
  4080ce:	460d      	mov	r5, r1
  4080d0:	4c08      	ldr	r4, [pc, #32]	; (4080f4 <_write_r+0x28>)
  4080d2:	4611      	mov	r1, r2
  4080d4:	4606      	mov	r6, r0
  4080d6:	461a      	mov	r2, r3
  4080d8:	4628      	mov	r0, r5
  4080da:	2300      	movs	r3, #0
  4080dc:	6023      	str	r3, [r4, #0]
  4080de:	f7f9 fc47 	bl	401970 <_write>
  4080e2:	1c43      	adds	r3, r0, #1
  4080e4:	d000      	beq.n	4080e8 <_write_r+0x1c>
  4080e6:	bd70      	pop	{r4, r5, r6, pc}
  4080e8:	6823      	ldr	r3, [r4, #0]
  4080ea:	2b00      	cmp	r3, #0
  4080ec:	d0fb      	beq.n	4080e6 <_write_r+0x1a>
  4080ee:	6033      	str	r3, [r6, #0]
  4080f0:	bd70      	pop	{r4, r5, r6, pc}
  4080f2:	bf00      	nop
  4080f4:	20453c94 	.word	0x20453c94

004080f8 <__register_exitproc>:
  4080f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4080fc:	4d2c      	ldr	r5, [pc, #176]	; (4081b0 <__register_exitproc+0xb8>)
  4080fe:	4606      	mov	r6, r0
  408100:	6828      	ldr	r0, [r5, #0]
  408102:	4698      	mov	r8, r3
  408104:	460f      	mov	r7, r1
  408106:	4691      	mov	r9, r2
  408108:	f7ff fc1e 	bl	407948 <__retarget_lock_acquire_recursive>
  40810c:	4b29      	ldr	r3, [pc, #164]	; (4081b4 <__register_exitproc+0xbc>)
  40810e:	681c      	ldr	r4, [r3, #0]
  408110:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  408114:	2b00      	cmp	r3, #0
  408116:	d03e      	beq.n	408196 <__register_exitproc+0x9e>
  408118:	685a      	ldr	r2, [r3, #4]
  40811a:	2a1f      	cmp	r2, #31
  40811c:	dc1c      	bgt.n	408158 <__register_exitproc+0x60>
  40811e:	f102 0e01 	add.w	lr, r2, #1
  408122:	b176      	cbz	r6, 408142 <__register_exitproc+0x4a>
  408124:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  408128:	2401      	movs	r4, #1
  40812a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40812e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  408132:	4094      	lsls	r4, r2
  408134:	4320      	orrs	r0, r4
  408136:	2e02      	cmp	r6, #2
  408138:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40813c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  408140:	d023      	beq.n	40818a <__register_exitproc+0x92>
  408142:	3202      	adds	r2, #2
  408144:	f8c3 e004 	str.w	lr, [r3, #4]
  408148:	6828      	ldr	r0, [r5, #0]
  40814a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40814e:	f7ff fbfd 	bl	40794c <__retarget_lock_release_recursive>
  408152:	2000      	movs	r0, #0
  408154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408158:	4b17      	ldr	r3, [pc, #92]	; (4081b8 <__register_exitproc+0xc0>)
  40815a:	b30b      	cbz	r3, 4081a0 <__register_exitproc+0xa8>
  40815c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  408160:	f7fd fbc2 	bl	4058e8 <malloc>
  408164:	4603      	mov	r3, r0
  408166:	b1d8      	cbz	r0, 4081a0 <__register_exitproc+0xa8>
  408168:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40816c:	6002      	str	r2, [r0, #0]
  40816e:	2100      	movs	r1, #0
  408170:	6041      	str	r1, [r0, #4]
  408172:	460a      	mov	r2, r1
  408174:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  408178:	f04f 0e01 	mov.w	lr, #1
  40817c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  408180:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  408184:	2e00      	cmp	r6, #0
  408186:	d0dc      	beq.n	408142 <__register_exitproc+0x4a>
  408188:	e7cc      	b.n	408124 <__register_exitproc+0x2c>
  40818a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40818e:	430c      	orrs	r4, r1
  408190:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  408194:	e7d5      	b.n	408142 <__register_exitproc+0x4a>
  408196:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40819a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40819e:	e7bb      	b.n	408118 <__register_exitproc+0x20>
  4081a0:	6828      	ldr	r0, [r5, #0]
  4081a2:	f7ff fbd3 	bl	40794c <__retarget_lock_release_recursive>
  4081a6:	f04f 30ff 	mov.w	r0, #4294967295
  4081aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4081ae:	bf00      	nop
  4081b0:	20400888 	.word	0x20400888
  4081b4:	00409100 	.word	0x00409100
  4081b8:	004058e9 	.word	0x004058e9

004081bc <_close_r>:
  4081bc:	b538      	push	{r3, r4, r5, lr}
  4081be:	4c07      	ldr	r4, [pc, #28]	; (4081dc <_close_r+0x20>)
  4081c0:	2300      	movs	r3, #0
  4081c2:	4605      	mov	r5, r0
  4081c4:	4608      	mov	r0, r1
  4081c6:	6023      	str	r3, [r4, #0]
  4081c8:	f7fa ffe0 	bl	40318c <_close>
  4081cc:	1c43      	adds	r3, r0, #1
  4081ce:	d000      	beq.n	4081d2 <_close_r+0x16>
  4081d0:	bd38      	pop	{r3, r4, r5, pc}
  4081d2:	6823      	ldr	r3, [r4, #0]
  4081d4:	2b00      	cmp	r3, #0
  4081d6:	d0fb      	beq.n	4081d0 <_close_r+0x14>
  4081d8:	602b      	str	r3, [r5, #0]
  4081da:	bd38      	pop	{r3, r4, r5, pc}
  4081dc:	20453c94 	.word	0x20453c94

004081e0 <_fclose_r>:
  4081e0:	b570      	push	{r4, r5, r6, lr}
  4081e2:	b159      	cbz	r1, 4081fc <_fclose_r+0x1c>
  4081e4:	4605      	mov	r5, r0
  4081e6:	460c      	mov	r4, r1
  4081e8:	b110      	cbz	r0, 4081f0 <_fclose_r+0x10>
  4081ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4081ec:	2b00      	cmp	r3, #0
  4081ee:	d03c      	beq.n	40826a <_fclose_r+0x8a>
  4081f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4081f2:	07d8      	lsls	r0, r3, #31
  4081f4:	d505      	bpl.n	408202 <_fclose_r+0x22>
  4081f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4081fa:	b92b      	cbnz	r3, 408208 <_fclose_r+0x28>
  4081fc:	2600      	movs	r6, #0
  4081fe:	4630      	mov	r0, r6
  408200:	bd70      	pop	{r4, r5, r6, pc}
  408202:	89a3      	ldrh	r3, [r4, #12]
  408204:	0599      	lsls	r1, r3, #22
  408206:	d53c      	bpl.n	408282 <_fclose_r+0xa2>
  408208:	4621      	mov	r1, r4
  40820a:	4628      	mov	r0, r5
  40820c:	f7fe fee4 	bl	406fd8 <__sflush_r>
  408210:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  408212:	4606      	mov	r6, r0
  408214:	b133      	cbz	r3, 408224 <_fclose_r+0x44>
  408216:	69e1      	ldr	r1, [r4, #28]
  408218:	4628      	mov	r0, r5
  40821a:	4798      	blx	r3
  40821c:	2800      	cmp	r0, #0
  40821e:	bfb8      	it	lt
  408220:	f04f 36ff 	movlt.w	r6, #4294967295
  408224:	89a3      	ldrh	r3, [r4, #12]
  408226:	061a      	lsls	r2, r3, #24
  408228:	d422      	bmi.n	408270 <_fclose_r+0x90>
  40822a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40822c:	b141      	cbz	r1, 408240 <_fclose_r+0x60>
  40822e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  408232:	4299      	cmp	r1, r3
  408234:	d002      	beq.n	40823c <_fclose_r+0x5c>
  408236:	4628      	mov	r0, r5
  408238:	f7ff f8ec 	bl	407414 <_free_r>
  40823c:	2300      	movs	r3, #0
  40823e:	6323      	str	r3, [r4, #48]	; 0x30
  408240:	6c61      	ldr	r1, [r4, #68]	; 0x44
  408242:	b121      	cbz	r1, 40824e <_fclose_r+0x6e>
  408244:	4628      	mov	r0, r5
  408246:	f7ff f8e5 	bl	407414 <_free_r>
  40824a:	2300      	movs	r3, #0
  40824c:	6463      	str	r3, [r4, #68]	; 0x44
  40824e:	f7fe ffe7 	bl	407220 <__sfp_lock_acquire>
  408252:	6e63      	ldr	r3, [r4, #100]	; 0x64
  408254:	2200      	movs	r2, #0
  408256:	07db      	lsls	r3, r3, #31
  408258:	81a2      	strh	r2, [r4, #12]
  40825a:	d50e      	bpl.n	40827a <_fclose_r+0x9a>
  40825c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40825e:	f7ff fb71 	bl	407944 <__retarget_lock_close_recursive>
  408262:	f7fe ffe3 	bl	40722c <__sfp_lock_release>
  408266:	4630      	mov	r0, r6
  408268:	bd70      	pop	{r4, r5, r6, pc}
  40826a:	f7fe ffad 	bl	4071c8 <__sinit>
  40826e:	e7bf      	b.n	4081f0 <_fclose_r+0x10>
  408270:	6921      	ldr	r1, [r4, #16]
  408272:	4628      	mov	r0, r5
  408274:	f7ff f8ce 	bl	407414 <_free_r>
  408278:	e7d7      	b.n	40822a <_fclose_r+0x4a>
  40827a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40827c:	f7ff fb66 	bl	40794c <__retarget_lock_release_recursive>
  408280:	e7ec      	b.n	40825c <_fclose_r+0x7c>
  408282:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408284:	f7ff fb60 	bl	407948 <__retarget_lock_acquire_recursive>
  408288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40828c:	2b00      	cmp	r3, #0
  40828e:	d1bb      	bne.n	408208 <_fclose_r+0x28>
  408290:	6e66      	ldr	r6, [r4, #100]	; 0x64
  408292:	f016 0601 	ands.w	r6, r6, #1
  408296:	d1b1      	bne.n	4081fc <_fclose_r+0x1c>
  408298:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40829a:	f7ff fb57 	bl	40794c <__retarget_lock_release_recursive>
  40829e:	4630      	mov	r0, r6
  4082a0:	bd70      	pop	{r4, r5, r6, pc}
  4082a2:	bf00      	nop

004082a4 <_fstat_r>:
  4082a4:	b538      	push	{r3, r4, r5, lr}
  4082a6:	460b      	mov	r3, r1
  4082a8:	4c07      	ldr	r4, [pc, #28]	; (4082c8 <_fstat_r+0x24>)
  4082aa:	4605      	mov	r5, r0
  4082ac:	4611      	mov	r1, r2
  4082ae:	4618      	mov	r0, r3
  4082b0:	2300      	movs	r3, #0
  4082b2:	6023      	str	r3, [r4, #0]
  4082b4:	f7fa ff6e 	bl	403194 <_fstat>
  4082b8:	1c43      	adds	r3, r0, #1
  4082ba:	d000      	beq.n	4082be <_fstat_r+0x1a>
  4082bc:	bd38      	pop	{r3, r4, r5, pc}
  4082be:	6823      	ldr	r3, [r4, #0]
  4082c0:	2b00      	cmp	r3, #0
  4082c2:	d0fb      	beq.n	4082bc <_fstat_r+0x18>
  4082c4:	602b      	str	r3, [r5, #0]
  4082c6:	bd38      	pop	{r3, r4, r5, pc}
  4082c8:	20453c94 	.word	0x20453c94

004082cc <_isatty_r>:
  4082cc:	b538      	push	{r3, r4, r5, lr}
  4082ce:	4c07      	ldr	r4, [pc, #28]	; (4082ec <_isatty_r+0x20>)
  4082d0:	2300      	movs	r3, #0
  4082d2:	4605      	mov	r5, r0
  4082d4:	4608      	mov	r0, r1
  4082d6:	6023      	str	r3, [r4, #0]
  4082d8:	f7fa ff62 	bl	4031a0 <_isatty>
  4082dc:	1c43      	adds	r3, r0, #1
  4082de:	d000      	beq.n	4082e2 <_isatty_r+0x16>
  4082e0:	bd38      	pop	{r3, r4, r5, pc}
  4082e2:	6823      	ldr	r3, [r4, #0]
  4082e4:	2b00      	cmp	r3, #0
  4082e6:	d0fb      	beq.n	4082e0 <_isatty_r+0x14>
  4082e8:	602b      	str	r3, [r5, #0]
  4082ea:	bd38      	pop	{r3, r4, r5, pc}
  4082ec:	20453c94 	.word	0x20453c94

004082f0 <_lseek_r>:
  4082f0:	b570      	push	{r4, r5, r6, lr}
  4082f2:	460d      	mov	r5, r1
  4082f4:	4c08      	ldr	r4, [pc, #32]	; (408318 <_lseek_r+0x28>)
  4082f6:	4611      	mov	r1, r2
  4082f8:	4606      	mov	r6, r0
  4082fa:	461a      	mov	r2, r3
  4082fc:	4628      	mov	r0, r5
  4082fe:	2300      	movs	r3, #0
  408300:	6023      	str	r3, [r4, #0]
  408302:	f7fa ff4f 	bl	4031a4 <_lseek>
  408306:	1c43      	adds	r3, r0, #1
  408308:	d000      	beq.n	40830c <_lseek_r+0x1c>
  40830a:	bd70      	pop	{r4, r5, r6, pc}
  40830c:	6823      	ldr	r3, [r4, #0]
  40830e:	2b00      	cmp	r3, #0
  408310:	d0fb      	beq.n	40830a <_lseek_r+0x1a>
  408312:	6033      	str	r3, [r6, #0]
  408314:	bd70      	pop	{r4, r5, r6, pc}
  408316:	bf00      	nop
  408318:	20453c94 	.word	0x20453c94

0040831c <_read_r>:
  40831c:	b570      	push	{r4, r5, r6, lr}
  40831e:	460d      	mov	r5, r1
  408320:	4c08      	ldr	r4, [pc, #32]	; (408344 <_read_r+0x28>)
  408322:	4611      	mov	r1, r2
  408324:	4606      	mov	r6, r0
  408326:	461a      	mov	r2, r3
  408328:	4628      	mov	r0, r5
  40832a:	2300      	movs	r3, #0
  40832c:	6023      	str	r3, [r4, #0]
  40832e:	f7f9 fb01 	bl	401934 <_read>
  408332:	1c43      	adds	r3, r0, #1
  408334:	d000      	beq.n	408338 <_read_r+0x1c>
  408336:	bd70      	pop	{r4, r5, r6, pc}
  408338:	6823      	ldr	r3, [r4, #0]
  40833a:	2b00      	cmp	r3, #0
  40833c:	d0fb      	beq.n	408336 <_read_r+0x1a>
  40833e:	6033      	str	r3, [r6, #0]
  408340:	bd70      	pop	{r4, r5, r6, pc}
  408342:	bf00      	nop
  408344:	20453c94 	.word	0x20453c94

00408348 <__aeabi_uldivmod>:
  408348:	b953      	cbnz	r3, 408360 <__aeabi_uldivmod+0x18>
  40834a:	b94a      	cbnz	r2, 408360 <__aeabi_uldivmod+0x18>
  40834c:	2900      	cmp	r1, #0
  40834e:	bf08      	it	eq
  408350:	2800      	cmpeq	r0, #0
  408352:	bf1c      	itt	ne
  408354:	f04f 31ff 	movne.w	r1, #4294967295
  408358:	f04f 30ff 	movne.w	r0, #4294967295
  40835c:	f000 b97a 	b.w	408654 <__aeabi_idiv0>
  408360:	f1ad 0c08 	sub.w	ip, sp, #8
  408364:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  408368:	f000 f806 	bl	408378 <__udivmoddi4>
  40836c:	f8dd e004 	ldr.w	lr, [sp, #4]
  408370:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408374:	b004      	add	sp, #16
  408376:	4770      	bx	lr

00408378 <__udivmoddi4>:
  408378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40837c:	468c      	mov	ip, r1
  40837e:	460d      	mov	r5, r1
  408380:	4604      	mov	r4, r0
  408382:	9e08      	ldr	r6, [sp, #32]
  408384:	2b00      	cmp	r3, #0
  408386:	d151      	bne.n	40842c <__udivmoddi4+0xb4>
  408388:	428a      	cmp	r2, r1
  40838a:	4617      	mov	r7, r2
  40838c:	d96d      	bls.n	40846a <__udivmoddi4+0xf2>
  40838e:	fab2 fe82 	clz	lr, r2
  408392:	f1be 0f00 	cmp.w	lr, #0
  408396:	d00b      	beq.n	4083b0 <__udivmoddi4+0x38>
  408398:	f1ce 0c20 	rsb	ip, lr, #32
  40839c:	fa01 f50e 	lsl.w	r5, r1, lr
  4083a0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4083a4:	fa02 f70e 	lsl.w	r7, r2, lr
  4083a8:	ea4c 0c05 	orr.w	ip, ip, r5
  4083ac:	fa00 f40e 	lsl.w	r4, r0, lr
  4083b0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4083b4:	0c25      	lsrs	r5, r4, #16
  4083b6:	fbbc f8fa 	udiv	r8, ip, sl
  4083ba:	fa1f f987 	uxth.w	r9, r7
  4083be:	fb0a cc18 	mls	ip, sl, r8, ip
  4083c2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4083c6:	fb08 f309 	mul.w	r3, r8, r9
  4083ca:	42ab      	cmp	r3, r5
  4083cc:	d90a      	bls.n	4083e4 <__udivmoddi4+0x6c>
  4083ce:	19ed      	adds	r5, r5, r7
  4083d0:	f108 32ff 	add.w	r2, r8, #4294967295
  4083d4:	f080 8123 	bcs.w	40861e <__udivmoddi4+0x2a6>
  4083d8:	42ab      	cmp	r3, r5
  4083da:	f240 8120 	bls.w	40861e <__udivmoddi4+0x2a6>
  4083de:	f1a8 0802 	sub.w	r8, r8, #2
  4083e2:	443d      	add	r5, r7
  4083e4:	1aed      	subs	r5, r5, r3
  4083e6:	b2a4      	uxth	r4, r4
  4083e8:	fbb5 f0fa 	udiv	r0, r5, sl
  4083ec:	fb0a 5510 	mls	r5, sl, r0, r5
  4083f0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4083f4:	fb00 f909 	mul.w	r9, r0, r9
  4083f8:	45a1      	cmp	r9, r4
  4083fa:	d909      	bls.n	408410 <__udivmoddi4+0x98>
  4083fc:	19e4      	adds	r4, r4, r7
  4083fe:	f100 33ff 	add.w	r3, r0, #4294967295
  408402:	f080 810a 	bcs.w	40861a <__udivmoddi4+0x2a2>
  408406:	45a1      	cmp	r9, r4
  408408:	f240 8107 	bls.w	40861a <__udivmoddi4+0x2a2>
  40840c:	3802      	subs	r0, #2
  40840e:	443c      	add	r4, r7
  408410:	eba4 0409 	sub.w	r4, r4, r9
  408414:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408418:	2100      	movs	r1, #0
  40841a:	2e00      	cmp	r6, #0
  40841c:	d061      	beq.n	4084e2 <__udivmoddi4+0x16a>
  40841e:	fa24 f40e 	lsr.w	r4, r4, lr
  408422:	2300      	movs	r3, #0
  408424:	6034      	str	r4, [r6, #0]
  408426:	6073      	str	r3, [r6, #4]
  408428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40842c:	428b      	cmp	r3, r1
  40842e:	d907      	bls.n	408440 <__udivmoddi4+0xc8>
  408430:	2e00      	cmp	r6, #0
  408432:	d054      	beq.n	4084de <__udivmoddi4+0x166>
  408434:	2100      	movs	r1, #0
  408436:	e886 0021 	stmia.w	r6, {r0, r5}
  40843a:	4608      	mov	r0, r1
  40843c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408440:	fab3 f183 	clz	r1, r3
  408444:	2900      	cmp	r1, #0
  408446:	f040 808e 	bne.w	408566 <__udivmoddi4+0x1ee>
  40844a:	42ab      	cmp	r3, r5
  40844c:	d302      	bcc.n	408454 <__udivmoddi4+0xdc>
  40844e:	4282      	cmp	r2, r0
  408450:	f200 80fa 	bhi.w	408648 <__udivmoddi4+0x2d0>
  408454:	1a84      	subs	r4, r0, r2
  408456:	eb65 0503 	sbc.w	r5, r5, r3
  40845a:	2001      	movs	r0, #1
  40845c:	46ac      	mov	ip, r5
  40845e:	2e00      	cmp	r6, #0
  408460:	d03f      	beq.n	4084e2 <__udivmoddi4+0x16a>
  408462:	e886 1010 	stmia.w	r6, {r4, ip}
  408466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40846a:	b912      	cbnz	r2, 408472 <__udivmoddi4+0xfa>
  40846c:	2701      	movs	r7, #1
  40846e:	fbb7 f7f2 	udiv	r7, r7, r2
  408472:	fab7 fe87 	clz	lr, r7
  408476:	f1be 0f00 	cmp.w	lr, #0
  40847a:	d134      	bne.n	4084e6 <__udivmoddi4+0x16e>
  40847c:	1beb      	subs	r3, r5, r7
  40847e:	0c3a      	lsrs	r2, r7, #16
  408480:	fa1f fc87 	uxth.w	ip, r7
  408484:	2101      	movs	r1, #1
  408486:	fbb3 f8f2 	udiv	r8, r3, r2
  40848a:	0c25      	lsrs	r5, r4, #16
  40848c:	fb02 3318 	mls	r3, r2, r8, r3
  408490:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408494:	fb0c f308 	mul.w	r3, ip, r8
  408498:	42ab      	cmp	r3, r5
  40849a:	d907      	bls.n	4084ac <__udivmoddi4+0x134>
  40849c:	19ed      	adds	r5, r5, r7
  40849e:	f108 30ff 	add.w	r0, r8, #4294967295
  4084a2:	d202      	bcs.n	4084aa <__udivmoddi4+0x132>
  4084a4:	42ab      	cmp	r3, r5
  4084a6:	f200 80d1 	bhi.w	40864c <__udivmoddi4+0x2d4>
  4084aa:	4680      	mov	r8, r0
  4084ac:	1aed      	subs	r5, r5, r3
  4084ae:	b2a3      	uxth	r3, r4
  4084b0:	fbb5 f0f2 	udiv	r0, r5, r2
  4084b4:	fb02 5510 	mls	r5, r2, r0, r5
  4084b8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4084bc:	fb0c fc00 	mul.w	ip, ip, r0
  4084c0:	45a4      	cmp	ip, r4
  4084c2:	d907      	bls.n	4084d4 <__udivmoddi4+0x15c>
  4084c4:	19e4      	adds	r4, r4, r7
  4084c6:	f100 33ff 	add.w	r3, r0, #4294967295
  4084ca:	d202      	bcs.n	4084d2 <__udivmoddi4+0x15a>
  4084cc:	45a4      	cmp	ip, r4
  4084ce:	f200 80b8 	bhi.w	408642 <__udivmoddi4+0x2ca>
  4084d2:	4618      	mov	r0, r3
  4084d4:	eba4 040c 	sub.w	r4, r4, ip
  4084d8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4084dc:	e79d      	b.n	40841a <__udivmoddi4+0xa2>
  4084de:	4631      	mov	r1, r6
  4084e0:	4630      	mov	r0, r6
  4084e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4084e6:	f1ce 0420 	rsb	r4, lr, #32
  4084ea:	fa05 f30e 	lsl.w	r3, r5, lr
  4084ee:	fa07 f70e 	lsl.w	r7, r7, lr
  4084f2:	fa20 f804 	lsr.w	r8, r0, r4
  4084f6:	0c3a      	lsrs	r2, r7, #16
  4084f8:	fa25 f404 	lsr.w	r4, r5, r4
  4084fc:	ea48 0803 	orr.w	r8, r8, r3
  408500:	fbb4 f1f2 	udiv	r1, r4, r2
  408504:	ea4f 4518 	mov.w	r5, r8, lsr #16
  408508:	fb02 4411 	mls	r4, r2, r1, r4
  40850c:	fa1f fc87 	uxth.w	ip, r7
  408510:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  408514:	fb01 f30c 	mul.w	r3, r1, ip
  408518:	42ab      	cmp	r3, r5
  40851a:	fa00 f40e 	lsl.w	r4, r0, lr
  40851e:	d909      	bls.n	408534 <__udivmoddi4+0x1bc>
  408520:	19ed      	adds	r5, r5, r7
  408522:	f101 30ff 	add.w	r0, r1, #4294967295
  408526:	f080 808a 	bcs.w	40863e <__udivmoddi4+0x2c6>
  40852a:	42ab      	cmp	r3, r5
  40852c:	f240 8087 	bls.w	40863e <__udivmoddi4+0x2c6>
  408530:	3902      	subs	r1, #2
  408532:	443d      	add	r5, r7
  408534:	1aeb      	subs	r3, r5, r3
  408536:	fa1f f588 	uxth.w	r5, r8
  40853a:	fbb3 f0f2 	udiv	r0, r3, r2
  40853e:	fb02 3310 	mls	r3, r2, r0, r3
  408542:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408546:	fb00 f30c 	mul.w	r3, r0, ip
  40854a:	42ab      	cmp	r3, r5
  40854c:	d907      	bls.n	40855e <__udivmoddi4+0x1e6>
  40854e:	19ed      	adds	r5, r5, r7
  408550:	f100 38ff 	add.w	r8, r0, #4294967295
  408554:	d26f      	bcs.n	408636 <__udivmoddi4+0x2be>
  408556:	42ab      	cmp	r3, r5
  408558:	d96d      	bls.n	408636 <__udivmoddi4+0x2be>
  40855a:	3802      	subs	r0, #2
  40855c:	443d      	add	r5, r7
  40855e:	1aeb      	subs	r3, r5, r3
  408560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  408564:	e78f      	b.n	408486 <__udivmoddi4+0x10e>
  408566:	f1c1 0720 	rsb	r7, r1, #32
  40856a:	fa22 f807 	lsr.w	r8, r2, r7
  40856e:	408b      	lsls	r3, r1
  408570:	fa05 f401 	lsl.w	r4, r5, r1
  408574:	ea48 0303 	orr.w	r3, r8, r3
  408578:	fa20 fe07 	lsr.w	lr, r0, r7
  40857c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  408580:	40fd      	lsrs	r5, r7
  408582:	ea4e 0e04 	orr.w	lr, lr, r4
  408586:	fbb5 f9fc 	udiv	r9, r5, ip
  40858a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40858e:	fb0c 5519 	mls	r5, ip, r9, r5
  408592:	fa1f f883 	uxth.w	r8, r3
  408596:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40859a:	fb09 f408 	mul.w	r4, r9, r8
  40859e:	42ac      	cmp	r4, r5
  4085a0:	fa02 f201 	lsl.w	r2, r2, r1
  4085a4:	fa00 fa01 	lsl.w	sl, r0, r1
  4085a8:	d908      	bls.n	4085bc <__udivmoddi4+0x244>
  4085aa:	18ed      	adds	r5, r5, r3
  4085ac:	f109 30ff 	add.w	r0, r9, #4294967295
  4085b0:	d243      	bcs.n	40863a <__udivmoddi4+0x2c2>
  4085b2:	42ac      	cmp	r4, r5
  4085b4:	d941      	bls.n	40863a <__udivmoddi4+0x2c2>
  4085b6:	f1a9 0902 	sub.w	r9, r9, #2
  4085ba:	441d      	add	r5, r3
  4085bc:	1b2d      	subs	r5, r5, r4
  4085be:	fa1f fe8e 	uxth.w	lr, lr
  4085c2:	fbb5 f0fc 	udiv	r0, r5, ip
  4085c6:	fb0c 5510 	mls	r5, ip, r0, r5
  4085ca:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4085ce:	fb00 f808 	mul.w	r8, r0, r8
  4085d2:	45a0      	cmp	r8, r4
  4085d4:	d907      	bls.n	4085e6 <__udivmoddi4+0x26e>
  4085d6:	18e4      	adds	r4, r4, r3
  4085d8:	f100 35ff 	add.w	r5, r0, #4294967295
  4085dc:	d229      	bcs.n	408632 <__udivmoddi4+0x2ba>
  4085de:	45a0      	cmp	r8, r4
  4085e0:	d927      	bls.n	408632 <__udivmoddi4+0x2ba>
  4085e2:	3802      	subs	r0, #2
  4085e4:	441c      	add	r4, r3
  4085e6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4085ea:	eba4 0408 	sub.w	r4, r4, r8
  4085ee:	fba0 8902 	umull	r8, r9, r0, r2
  4085f2:	454c      	cmp	r4, r9
  4085f4:	46c6      	mov	lr, r8
  4085f6:	464d      	mov	r5, r9
  4085f8:	d315      	bcc.n	408626 <__udivmoddi4+0x2ae>
  4085fa:	d012      	beq.n	408622 <__udivmoddi4+0x2aa>
  4085fc:	b156      	cbz	r6, 408614 <__udivmoddi4+0x29c>
  4085fe:	ebba 030e 	subs.w	r3, sl, lr
  408602:	eb64 0405 	sbc.w	r4, r4, r5
  408606:	fa04 f707 	lsl.w	r7, r4, r7
  40860a:	40cb      	lsrs	r3, r1
  40860c:	431f      	orrs	r7, r3
  40860e:	40cc      	lsrs	r4, r1
  408610:	6037      	str	r7, [r6, #0]
  408612:	6074      	str	r4, [r6, #4]
  408614:	2100      	movs	r1, #0
  408616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40861a:	4618      	mov	r0, r3
  40861c:	e6f8      	b.n	408410 <__udivmoddi4+0x98>
  40861e:	4690      	mov	r8, r2
  408620:	e6e0      	b.n	4083e4 <__udivmoddi4+0x6c>
  408622:	45c2      	cmp	sl, r8
  408624:	d2ea      	bcs.n	4085fc <__udivmoddi4+0x284>
  408626:	ebb8 0e02 	subs.w	lr, r8, r2
  40862a:	eb69 0503 	sbc.w	r5, r9, r3
  40862e:	3801      	subs	r0, #1
  408630:	e7e4      	b.n	4085fc <__udivmoddi4+0x284>
  408632:	4628      	mov	r0, r5
  408634:	e7d7      	b.n	4085e6 <__udivmoddi4+0x26e>
  408636:	4640      	mov	r0, r8
  408638:	e791      	b.n	40855e <__udivmoddi4+0x1e6>
  40863a:	4681      	mov	r9, r0
  40863c:	e7be      	b.n	4085bc <__udivmoddi4+0x244>
  40863e:	4601      	mov	r1, r0
  408640:	e778      	b.n	408534 <__udivmoddi4+0x1bc>
  408642:	3802      	subs	r0, #2
  408644:	443c      	add	r4, r7
  408646:	e745      	b.n	4084d4 <__udivmoddi4+0x15c>
  408648:	4608      	mov	r0, r1
  40864a:	e708      	b.n	40845e <__udivmoddi4+0xe6>
  40864c:	f1a8 0802 	sub.w	r8, r8, #2
  408650:	443d      	add	r5, r7
  408652:	e72b      	b.n	4084ac <__udivmoddi4+0x134>

00408654 <__aeabi_idiv0>:
  408654:	4770      	bx	lr
  408656:	bf00      	nop
  408658:	092d452d 	.word	0x092d452d
  40865c:	39384d57 	.word	0x39384d57
  408660:	69203430 	.word	0x69203430
  408664:	6974696e 	.word	0x6974696e
  408668:	7a696c61 	.word	0x7a696c61
  40866c:	6f697461 	.word	0x6f697461
  408670:	6166206e 	.word	0x6166206e
  408674:	64656c69 	.word	0x64656c69
  408678:	00000d2e 	.word	0x00000d2e
  40867c:	39384d57 	.word	0x39384d57
  408680:	6e203430 	.word	0x6e203430
  408684:	6620746f 	.word	0x6620746f
  408688:	646e756f 	.word	0x646e756f
  40868c:	000d0a21 	.word	0x000d0a21
  408690:	0a05000d 	.word	0x0a05000d
  408694:	0000004b 	.word	0x0000004b
  408698:	00001932 	.word	0x00001932
  40869c:	0e00008b 	.word	0x0e00008b
  4086a0:	32800008 	.word	0x32800008
  4086a4:	030a0205 	.word	0x030a0205
  4086a8:	0f022003 	.word	0x0f022003
  4086ac:	00000a0f 	.word	0x00000a0f
  4086b0:	18180000 	.word	0x18180000
  4086b4:	00002020 	.word	0x00002020
  4086b8:	0a000000 	.word	0x0a000000
  4086bc:	02020000 	.word	0x02020000
  4086c0:	18180000 	.word	0x18180000
  4086c4:	00030000 	.word	0x00030000
  4086c8:	00000000 	.word	0x00000000
  4086cc:	18010002 	.word	0x18010002
  4086d0:	1e1e1e1e 	.word	0x1e1e1e1e
  4086d4:	1e1e1e1e 	.word	0x1e1e1e1e
  4086d8:	1e1e1e1e 	.word	0x1e1e1e1e
  4086dc:	00001e1e 	.word	0x00001e1e
	...

004086f0 <CSWTCH.7>:
  4086f0:	00000100 00000300 00000200              ............

004086fc <midi_note_frequencies>:
  4086fc:	4102d0e5 410a978d 4112d4fe 411b9168     ...A...A...Ah..A
  40870c:	4124d0e5 412e9ba6 4138fdf4 41440000     ..$A...A..8A..DA
  40871c:	414fa5e3 415c0000 41691687 4176f1aa     ..OA..\A..iA..vA
  40872c:	4182d0e5 418a978d 4192d4fe 419b8f5c     ...A...A...A\..A
  40873c:	41a4d0e5 41ae9db2 41b90000 41c40000     ...A...A...A...A
  40874c:	41cfa7f0 41dc0000 41e9147b 41f6f1aa     ...A...A{..A...A
  40875c:	4202cfdf 420a978d 4212d4fe 421b9062     ...B...B...Bb..B
  40876c:	4224cfdf 422e9db2 4238fefa 4243fefa     ..$B...B..8B..CB
  40877c:	424fa6e9 425c0000 4269147b 4276f0a4     ..OB..\B{.iB..vB
  40878c:	4282cfdf 428a978d 4292d4fe 429b9062     ...B...B...Bb..B
  40879c:	42a4d062 42ae9d2f 42b8ff7d 42c3ff7d     b..B/..B}..B}..B
  4087ac:	42cfa6e9 42dc0000 42e914fe 42f6f127     ...B...B...B'..B
  4087bc:	4302d021 430a974c 4312d4fe 431b9021     !..CL..C...C!..C
  4087cc:	4324d062 432e9d2f 4338ff3b 4343ff7d     b.$C/..C;.8C}.CC
  4087dc:	434fa6e9 435c0000 436914fe 4376f127     ..OC..\C..iC'.vC
  4087ec:	4382d021 438a976d 4392d51f 439b9042     !..Cm..C...CB..C
  4087fc:	43a4d062 43ae9d2f 43b8ff3b 43c3ff5c     b..C/..C;..C\..C
  40880c:	43cfa70a 43dc0000 43e914fe 43f6f106     ...C...C...C...C
  40881c:	4402d010 440a975c 4412d51f 441b9042     ...D\..D...DB..D
  40882c:	4424d052 442e9d2f 4438ff4c 4443ff6d     R.$D/..DL.8Dm.CD
  40883c:	444fa6fa 445c0000 446914fe 4476f117     ..OD..\D..iD..vD
  40884c:	4482d010 448a9764 4492d517 449b9042     ...Dd..D...DB..D
  40885c:	44a4d052 44ae9d37 44b8ff4c 44c3ff6d     R..D7..DL..Dm..D
  40886c:	44cfa702 44dc0000 44e914f6 44f6f10e     ...D...D...D...D
  40887c:	4502d014 450a9760 4512d517 451b9042     ...E`..E...EB..E
  40888c:	4524d052 452e9d37 4538ff48 4543ff68     R.$E7..EH.8Eh.CE
  40889c:	454fa702 455c0000 456914f6 4576f10e     ..OE..\E..iE..vE
  4088ac:	4582d012 458a9760 4592d517 459b9042     ...E`..E...EB..E
  4088bc:	45a4d054 45ae9d37 45b8ff4a 45c3ff6a     T..E7..EJ..Ej..E
  4088cc:	45cfa700 45dc0000 45e914f6 45f6f110     ...E...E...E...E
  4088dc:	4602d012 460a9760 4612d518 461b9041     ...F`..F...FA..F
  4088ec:	4624d052 462e9d33 4638ff48 4643ff66     R.$F3..FH.8Ff.CF

004088fc <sinTable_f32>:
  4088fc:	00000000 3c490e92 3cc90ab1 3d16c32b     ......I<...<+..=
  40890c:	3d48fb2e 3d7b2b75 3d96a904 3dafb680     ..H=u+{=...=...=
  40891c:	3dc8bd36 3de1bc2f 3dfab273 3e09cf87     6..=/..=s..=...>
  40892c:	3e164083 3e22abb5 3e2f10a2 3e3b6ecf     .@.>..">../>.n;>
  40893c:	3e47c5c2 3e541501 3e605c13 3e6c9a7f     ..G>..T>.\`>..l>
  40894c:	3e78cfcc 3e827dc0 3e888e93 3e8e9a22     ..x>.}.>...>"..>
  40895c:	3e94a032 3e9aa086 3ea09ae5 3ea68f12     2..>...>...>...>
  40896c:	3eac7cd4 3eb263ef 3eb8442a 3ebe1d49     .|.>.c.>*D.>I..>
  40897c:	3ec3ef15 3ec9b953 3ecf7bca 3ed53641     ...>S..>.{.>A6.>
  40898c:	3edae880 3ee0924f 3ee63375 3eebcbbb     ...>O..>u3.>...>
  40899c:	3ef15aea 3ef6e0cb 3efc5d27 3f00e7e4     .Z.>...>'].>...?
  4089ac:	3f039c3d 3f064b82 3f08f59b 3f0b9a6b     =..?.K.?...?k..?
  4089bc:	3f0e39da 3f10d3cd 3f13682a 3f15f6d9     .9.?...?*h.?...?
  4089cc:	3f187fc0 3f1b02c6 3f1d7fd1 3f1ff6cb     ...?...?...?...?
  4089dc:	3f226799 3f24d225 3f273656 3f299415     .g"?%.$?V6'?..)?
  4089ec:	3f2beb4a 3f2e3bde 3f3085bb 3f32c8c9     J.+?.;.?..0?..2?
  4089fc:	3f3504f3 3f373a23 3f396842 3f3b8f3b     ..5?#:7?Bh9?;.;?
  408a0c:	3f3daef9 3f3fc767 3f41d870 3f43e201     ..=?g.??p.A?..C?
  408a1c:	3f45e403 3f47de65 3f49d112 3f4bbbf8     ..E?e.G?..I?..K?
  408a2c:	3f4d9f02 3f4f7a20 3f514d3d 3f531849     ..M? zO?=MQ?I.S?
  408a3c:	3f54db31 3f5695e5 3f584853 3f59f26a     1.T?..V?SHX?j.Y?
  408a4c:	3f5b941a 3f5d2d53 3f5ebe05 3f604621     ..[?S-]?..^?!F`?
  408a5c:	3f61c597 3f633c5a 3f64aa59 3f660f88     ..a?Z<c?Y.d?..f?
  408a6c:	3f676bd8 3f68bf3c 3f6a09a7 3f6b4b0c     .kg?<.h?..j?.Kk?
  408a7c:	3f6c835e 3f6db293 3f6ed89e 3f6ff573     ^.l?..m?..n?s.o?
  408a8c:	3f710908 3f721352 3f731447 3f740bdd     ..q?R.r?G.s?..t?
  408a9c:	3f74fa0b 3f75dec6 3f76ba07 3f778bc5     ..t?..u?..v?..w?
  408aac:	3f7853f8 3f791298 3f79c79d 3f7a7302     .Sx?..y?..y?.sz?
  408abc:	3f7b14be 3f7baccd 3f7c3b28 3f7cbfc9     ..{?..{?(;|?..|?
  408acc:	3f7d3aac 3f7dabcc 3f7e1323 3f7e70b0     .:}?..}?#.~?.p~?
  408adc:	3f7ec46d 3f7f0e58 3f7f4e6d 3f7f84ab     m.~?X..?mN.?...?
  408aec:	3f7fb10f 3f7fd397 3f7fec43 3f7ffb11     ...?...?C..?...?
  408afc:	3f800000 3f7ffb11 3f7fec43 3f7fd397     ...?...?C..?...?
  408b0c:	3f7fb10f 3f7f84ab 3f7f4e6d 3f7f0e58     ...?...?mN.?X..?
  408b1c:	3f7ec46d 3f7e70b0 3f7e1323 3f7dabcc     m.~?.p~?#.~?..}?
  408b2c:	3f7d3aac 3f7cbfc9 3f7c3b28 3f7baccd     .:}?..|?(;|?..{?
  408b3c:	3f7b14be 3f7a7302 3f79c79d 3f791298     ..{?.sz?..y?..y?
  408b4c:	3f7853f8 3f778bc5 3f76ba07 3f75dec6     .Sx?..w?..v?..u?
  408b5c:	3f74fa0b 3f740bdd 3f731447 3f721352     ..t?..t?G.s?R.r?
  408b6c:	3f710908 3f6ff573 3f6ed89e 3f6db293     ..q?s.o?..n?..m?
  408b7c:	3f6c835e 3f6b4b0c 3f6a09a7 3f68bf3c     ^.l?.Kk?..j?<.h?
  408b8c:	3f676bd8 3f660f88 3f64aa59 3f633c5a     .kg?..f?Y.d?Z<c?
  408b9c:	3f61c597 3f604621 3f5ebe05 3f5d2d53     ..a?!F`?..^?S-]?
  408bac:	3f5b941a 3f59f26a 3f584853 3f5695e5     ..[?j.Y?SHX?..V?
  408bbc:	3f54db31 3f531849 3f514d3d 3f4f7a20     1.T?I.S?=MQ? zO?
  408bcc:	3f4d9f02 3f4bbbf8 3f49d112 3f47de65     ..M?..K?..I?e.G?
  408bdc:	3f45e403 3f43e201 3f41d870 3f3fc767     ..E?..C?p.A?g.??
  408bec:	3f3daef9 3f3b8f3b 3f396842 3f373a23     ..=?;.;?Bh9?#:7?
  408bfc:	3f3504f3 3f32c8c9 3f3085bb 3f2e3bde     ..5?..2?..0?.;.?
  408c0c:	3f2beb4a 3f299415 3f273656 3f24d225     J.+?..)?V6'?%.$?
  408c1c:	3f226799 3f1ff6cb 3f1d7fd1 3f1b02c6     .g"?...?...?...?
  408c2c:	3f187fc0 3f15f6d9 3f13682a 3f10d3cd     ...?...?*h.?...?
  408c3c:	3f0e39da 3f0b9a6b 3f08f59b 3f064b82     .9.?k..?...?.K.?
  408c4c:	3f039c3d 3f00e7e4 3efc5d27 3ef6e0cb     =..?...?'].>...>
  408c5c:	3ef15aea 3eebcbbb 3ee63375 3ee0924f     .Z.>...>u3.>O..>
  408c6c:	3edae880 3ed53641 3ecf7bca 3ec9b953     ...>A6.>.{.>S..>
  408c7c:	3ec3ef15 3ebe1d49 3eb8442a 3eb263ef     ...>I..>*D.>.c.>
  408c8c:	3eac7cd4 3ea68f12 3ea09ae5 3e9aa086     .|.>...>...>...>
  408c9c:	3e94a032 3e8e9a22 3e888e93 3e827dc0     2..>"..>...>.}.>
  408cac:	3e78cfcc 3e6c9a7f 3e605c13 3e541501     ..x>..l>.\`>..T>
  408cbc:	3e47c5c2 3e3b6ecf 3e2f10a2 3e22abb5     ..G>.n;>../>..">
  408ccc:	3e164083 3e09cf87 3dfab273 3de1bc2f     .@.>...>s..=/..=
  408cdc:	3dc8bd36 3dafb680 3d96a904 3d7b2b75     6..=...=...=u+{=
  408cec:	3d48fb2e 3d16c32b 3cc90ab1 3c490e92     ..H=+..=...<..I<
  408cfc:	00000000 bc490e92 bcc90ab1 bd16c32b     ......I.....+...
  408d0c:	bd48fb2e bd7b2b75 bd96a904 bdafb680     ..H.u+{.........
  408d1c:	bdc8bd36 bde1bc2f bdfab273 be09cf87     6.../...s.......
  408d2c:	be164083 be22abb5 be2f10a2 be3b6ecf     .@....".../..n;.
  408d3c:	be47c5c2 be541501 be605c13 be6c9a7f     ..G...T..\`...l.
  408d4c:	be78cfcc be827dc0 be888e93 be8e9a22     ..x..}......"...
  408d5c:	be94a032 be9aa086 bea09ae5 bea68f12     2...............
  408d6c:	beac7cd4 beb263ef beb8442a bebe1d49     .|...c..*D..I...
  408d7c:	bec3ef15 bec9b953 becf7bca bed53641     ....S....{..A6..
  408d8c:	bedae880 bee0924f bee63375 beebcbbb     ....O...u3......
  408d9c:	bef15aea bef6e0cb befc5d27 bf00e7e4     .Z......']......
  408dac:	bf039c3d bf064b82 bf08f59b bf0b9a6b     =....K......k...
  408dbc:	bf0e39da bf10d3cd bf13682a bf15f6d9     .9......*h......
  408dcc:	bf187fc0 bf1b02c6 bf1d7fd1 bf1ff6cb     ................
  408ddc:	bf226799 bf24d225 bf273656 bf299415     .g".%.$.V6'...).
  408dec:	bf2beb4a bf2e3bde bf3085bb bf32c8c9     J.+..;....0...2.
  408dfc:	bf3504f3 bf373a23 bf396842 bf3b8f3b     ..5.#:7.Bh9.;.;.
  408e0c:	bf3daef9 bf3fc767 bf41d870 bf43e201     ..=.g.?.p.A...C.
  408e1c:	bf45e403 bf47de65 bf49d112 bf4bbbf8     ..E.e.G...I...K.
  408e2c:	bf4d9f02 bf4f7a20 bf514d3d bf531849     ..M. zO.=MQ.I.S.
  408e3c:	bf54db31 bf5695e5 bf584853 bf59f26a     1.T...V.SHX.j.Y.
  408e4c:	bf5b941a bf5d2d53 bf5ebe05 bf604621     ..[.S-]...^.!F`.
  408e5c:	bf61c597 bf633c5a bf64aa59 bf660f88     ..a.Z<c.Y.d...f.
  408e6c:	bf676bd8 bf68bf3c bf6a09a7 bf6b4b0c     .kg.<.h...j..Kk.
  408e7c:	bf6c835e bf6db293 bf6ed89e bf6ff573     ^.l...m...n.s.o.
  408e8c:	bf710908 bf721352 bf731447 bf740bdd     ..q.R.r.G.s...t.
  408e9c:	bf74fa0b bf75dec6 bf76ba07 bf778bc5     ..t...u...v...w.
  408eac:	bf7853f8 bf791298 bf79c79d bf7a7302     .Sx...y...y..sz.
  408ebc:	bf7b14be bf7baccd bf7c3b28 bf7cbfc9     ..{...{.(;|...|.
  408ecc:	bf7d3aac bf7dabcc bf7e1323 bf7e70b0     .:}...}.#.~..p~.
  408edc:	bf7ec46d bf7f0e58 bf7f4e6d bf7f84ab     m.~.X...mN......
  408eec:	bf7fb10f bf7fd397 bf7fec43 bf7ffb11     ........C.......
  408efc:	bf800000 bf7ffb11 bf7fec43 bf7fd397     ........C.......
  408f0c:	bf7fb10f bf7f84ab bf7f4e6d bf7f0e58     ........mN..X...
  408f1c:	bf7ec46d bf7e70b0 bf7e1323 bf7dabcc     m.~..p~.#.~...}.
  408f2c:	bf7d3aac bf7cbfc9 bf7c3b28 bf7baccd     .:}...|.(;|...{.
  408f3c:	bf7b14be bf7a7302 bf79c79d bf791298     ..{..sz...y...y.
  408f4c:	bf7853f8 bf778bc5 bf76ba07 bf75dec6     .Sx...w...v...u.
  408f5c:	bf74fa0b bf740bdd bf731447 bf721352     ..t...t.G.s.R.r.
  408f6c:	bf710908 bf6ff573 bf6ed89e bf6db293     ..q.s.o...n...m.
  408f7c:	bf6c835e bf6b4b0c bf6a09a7 bf68bf3c     ^.l..Kk...j.<.h.
  408f8c:	bf676bd8 bf660f88 bf64aa59 bf633c5a     .kg...f.Y.d.Z<c.
  408f9c:	bf61c597 bf604621 bf5ebe05 bf5d2d53     ..a.!F`...^.S-].
  408fac:	bf5b941a bf59f26a bf584853 bf5695e5     ..[.j.Y.SHX...V.
  408fbc:	bf54db31 bf531849 bf514d3d bf4f7a20     1.T.I.S.=MQ. zO.
  408fcc:	bf4d9f02 bf4bbbf8 bf49d112 bf47de65     ..M...K...I.e.G.
  408fdc:	bf45e403 bf43e201 bf41d870 bf3fc767     ..E...C.p.A.g.?.
  408fec:	bf3daef9 bf3b8f3b bf396842 bf373a23     ..=.;.;.Bh9.#:7.
  408ffc:	bf3504f3 bf32c8c9 bf3085bb bf2e3bde     ..5...2...0..;..
  40900c:	bf2beb4a bf299415 bf273656 bf24d225     J.+...).V6'.%.$.
  40901c:	bf226799 bf1ff6cb bf1d7fd1 bf1b02c6     .g".............
  40902c:	bf187fc0 bf15f6d9 bf13682a bf10d3cd     ........*h......
  40903c:	bf0e39da bf0b9a6b bf08f59b bf064b82     .9..k........K..
  40904c:	bf039c3d bf00e7e4 befc5d27 bef6e0cb     =.......']......
  40905c:	bef15aea beebcbbb bee63375 bee0924f     .Z......u3..O...
  40906c:	bedae880 bed53641 becf7bca bec9b953     ....A6...{..S...
  40907c:	bec3ef15 bebe1d49 beb8442a beb263ef     ....I...*D...c..
  40908c:	beac7cd4 bea68f12 bea09ae5 be9aa086     .|..............
  40909c:	be94a032 be8e9a22 be888e93 be827dc0     2..."........}..
  4090ac:	be78cfcc be6c9a7f be605c13 be541501     ..x...l..\`...T.
  4090bc:	be47c5c2 be3b6ecf be2f10a2 be22abb5     ..G..n;.../...".
  4090cc:	be164083 be09cf87 bdfab273 bde1bc2f     .@......s.../...
  4090dc:	bdc8bd36 bdafb680 bd96a904 bd7b2b75     6...........u+{.
  4090ec:	bd48fb2e bd16c32b bcc90ab1 bc490e92     ..H.+.........I.
  4090fc:	80000000                                ....

00409100 <_global_impure_ptr>:
  409100:	20400050 33323130 37363534 42413938     P.@ 0123456789AB
  409110:	46454443 00000000 33323130 37363534     CDEF....01234567
  409120:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  409130:	0000296c                                l)..

00409134 <blanks.8340>:
  409134:	20202020 20202020 20202020 20202020                     

00409144 <zeroes.8341>:
  409144:	30303030 30303030 30303030 30303030     0000000000000000
  409154:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00409164 <_ctype_>:
  409164:	20202000 20202020 28282020 20282828     .         ((((( 
  409174:	20202020 20202020 20202020 20202020                     
  409184:	10108820 10101010 10101010 10101010      ...............
  409194:	04040410 04040404 10040404 10101010     ................
  4091a4:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4091b4:	01010101 01010101 01010101 10101010     ................
  4091c4:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4091d4:	02020202 02020202 02020202 10101010     ................
  4091e4:	00000020 00000000 00000000 00000000      ...............
	...

00409268 <_init>:
  409268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40926a:	bf00      	nop
  40926c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40926e:	bc08      	pop	{r3}
  409270:	469e      	mov	lr, r3
  409272:	4770      	bx	lr

00409274 <__init_array_start>:
  409274:	00406fb9 	.word	0x00406fb9

00409278 <__frame_dummy_init_array_entry>:
  409278:	00400165                                e.@.

0040927c <_fini>:
  40927c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40927e:	bf00      	nop
  409280:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409282:	bc08      	pop	{r3}
  409284:	469e      	mov	lr, r3
  409286:	4770      	bx	lr

00409288 <__fini_array_start>:
  409288:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <inBuffer>:
2040000c:	3400 2045                                   .4E 

20400010 <inPingMode>:
20400010:	0001 0000                                   ....

20400014 <outBuffer>:
20400014:	1c00 2045                                   ..E 

20400018 <outPingMode>:
20400018:	0001 0000                                   ....

2040001c <processBuffer>:
2040001c:	0c00 2045                                   ..E 

20400020 <pitchtracker>:
20400020:	0000 bf80 ffff ffff                         ........

20400028 <g_interrupt_enabled>:
20400028:	0001 0000                                   ....

2040002c <SystemCoreClock>:
2040002c:	0900 003d                                   ..=.

20400030 <uxCriticalNesting>:
20400030:	aaaa aaaa                                   ....

20400034 <xISRTestStatus>:
20400034:	0001 0000                                   ....

20400038 <uxTick.9777>:
20400038:	ffff ffff                                   ....

2040003c <xTestStatus>:
2040003c:	0001 0000                                   ....

20400040 <harmony_list_fill>:
20400040:	3c18 2045                                   .<E 

20400044 <harmony_list_read>:
20400044:	3c44 2045                                   D<E 

20400048 <_impure_ptr>:
20400048:	0050 2040 0000 0000                         P.@ ....

20400050 <impure_data>:
20400050:	0000 0000 033c 2040 03a4 2040 040c 2040     ....<.@ ..@ ..@ 
	...
204000f8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400108:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400478 <__malloc_av_>:
	...
20400480:	0478 2040 0478 2040 0480 2040 0480 2040     x.@ x.@ ..@ ..@ 
20400490:	0488 2040 0488 2040 0490 2040 0490 2040     ..@ ..@ ..@ ..@ 
204004a0:	0498 2040 0498 2040 04a0 2040 04a0 2040     ..@ ..@ ..@ ..@ 
204004b0:	04a8 2040 04a8 2040 04b0 2040 04b0 2040     ..@ ..@ ..@ ..@ 
204004c0:	04b8 2040 04b8 2040 04c0 2040 04c0 2040     ..@ ..@ ..@ ..@ 
204004d0:	04c8 2040 04c8 2040 04d0 2040 04d0 2040     ..@ ..@ ..@ ..@ 
204004e0:	04d8 2040 04d8 2040 04e0 2040 04e0 2040     ..@ ..@ ..@ ..@ 
204004f0:	04e8 2040 04e8 2040 04f0 2040 04f0 2040     ..@ ..@ ..@ ..@ 
20400500:	04f8 2040 04f8 2040 0500 2040 0500 2040     ..@ ..@ ..@ ..@ 
20400510:	0508 2040 0508 2040 0510 2040 0510 2040     ..@ ..@ ..@ ..@ 
20400520:	0518 2040 0518 2040 0520 2040 0520 2040     ..@ ..@  .@  .@ 
20400530:	0528 2040 0528 2040 0530 2040 0530 2040     (.@ (.@ 0.@ 0.@ 
20400540:	0538 2040 0538 2040 0540 2040 0540 2040     8.@ 8.@ @.@ @.@ 
20400550:	0548 2040 0548 2040 0550 2040 0550 2040     H.@ H.@ P.@ P.@ 
20400560:	0558 2040 0558 2040 0560 2040 0560 2040     X.@ X.@ `.@ `.@ 
20400570:	0568 2040 0568 2040 0570 2040 0570 2040     h.@ h.@ p.@ p.@ 
20400580:	0578 2040 0578 2040 0580 2040 0580 2040     x.@ x.@ ..@ ..@ 
20400590:	0588 2040 0588 2040 0590 2040 0590 2040     ..@ ..@ ..@ ..@ 
204005a0:	0598 2040 0598 2040 05a0 2040 05a0 2040     ..@ ..@ ..@ ..@ 
204005b0:	05a8 2040 05a8 2040 05b0 2040 05b0 2040     ..@ ..@ ..@ ..@ 
204005c0:	05b8 2040 05b8 2040 05c0 2040 05c0 2040     ..@ ..@ ..@ ..@ 
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 
20400870:	0868 2040 0868 2040 0870 2040 0870 2040     h.@ h.@ p.@ p.@ 

20400880 <__malloc_sbrk_base>:
20400880:	ffff ffff                                   ....

20400884 <__malloc_trim_threshold>:
20400884:	0000 0002                                   ....

20400888 <__atexit_recursive_mutex>:
20400888:	3c70 2045                                   p<E 

2040088c <__global_locale>:
2040088c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008ac:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008cc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008ec:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040090c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040092c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040094c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040096c:	80b1 0040 7a41 0040 0000 0000 9164 0040     ..@.Az@.....d.@.
2040097c:	9160 0040 9114 0040 9114 0040 9114 0040     `.@...@...@...@.
2040098c:	9114 0040 9114 0040 9114 0040 9114 0040     ..@...@...@...@.
2040099c:	9114 0040 9114 0040 ffff ffff ffff ffff     ..@...@.........
204009ac:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009d4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
