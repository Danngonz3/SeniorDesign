
GatorScribe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005f2c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00405f2c  00405f2c  00015f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d8  20400000  00405f34  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00006414  204009d8  0040690c  000209d8  2**2
                  ALLOC
  4 .stack        00002004  20406dec  0040cd20  000209d8  2**0
                  ALLOC
  5 .heap         00000200  20408df0  0040ed24  000209d8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a06  2**0
                  CONTENTS, READONLY
  8 .debug_info   000269d5  00000000  00000000  00020a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005478  00000000  00000000  00047434  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009529  00000000  00000000  0004c8ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000cb8  00000000  00000000  00055dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e00  00000000  00000000  00056a8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002820e  00000000  00000000  0005788d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00017591  00000000  00000000  0007fa9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009c89d  00000000  00000000  0009702c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002b48  00000000  00000000  001338cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f0 8d 40 20 e1 23 40 00 dd 23 40 00 df 23 40 00     ..@ .#@..#@..#@.
  400010:	dd 23 40 00 dd 23 40 00 dd 23 40 00 00 00 00 00     .#@..#@..#@.....
	...
  40002c:	dd 23 40 00 dd 23 40 00 00 00 00 00 dd 23 40 00     .#@..#@......#@.
  40003c:	8d 06 40 00 dd 23 40 00 dd 23 40 00 dd 23 40 00     ..@..#@..#@..#@.
  40004c:	dd 23 40 00 dd 23 40 00 dd 23 40 00 dd 23 40 00     .#@..#@..#@..#@.
  40005c:	dd 23 40 00 dd 23 40 00 00 00 00 00 99 21 40 00     .#@..#@......!@.
  40006c:	ad 21 40 00 c1 21 40 00 dd 23 40 00 dd 23 40 00     .!@..!@..#@..#@.
  40007c:	dd 23 40 00 d5 21 40 00 e9 21 40 00 dd 23 40 00     .#@..!@..!@..#@.
  40008c:	dd 23 40 00 dd 23 40 00 dd 23 40 00 dd 23 40 00     .#@..#@..#@..#@.
  40009c:	dd 23 40 00 dd 23 40 00 dd 23 40 00 dd 23 40 00     .#@..#@..#@..#@.
  4000ac:	dd 23 40 00 dd 23 40 00 dd 23 40 00 dd 23 40 00     .#@..#@..#@..#@.
  4000bc:	dd 23 40 00 dd 23 40 00 dd 23 40 00 dd 23 40 00     .#@..#@..#@..#@.
  4000cc:	dd 23 40 00 00 00 00 00 dd 23 40 00 00 00 00 00     .#@......#@.....
  4000dc:	dd 23 40 00 dd 23 40 00 dd 23 40 00 dd 23 40 00     .#@..#@..#@..#@.
  4000ec:	dd 23 40 00 dd 23 40 00 dd 23 40 00 dd 23 40 00     .#@..#@..#@..#@.
  4000fc:	dd 23 40 00 dd 23 40 00 dd 23 40 00 dd 23 40 00     .#@..#@..#@..#@.
  40010c:	dd 23 40 00 dd 23 40 00 dd 23 40 00 00 00 00 00     .#@..#@..#@.....
  40011c:	00 00 00 00 dd 23 40 00 dd 23 40 00 ad 01 40 00     .....#@..#@...@.
  40012c:	dd 23 40 00 dd 23 40 00 00 00 00 00 dd 23 40 00     .#@..#@......#@.
  40013c:	dd 23 40 00                                         .#@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d8 	.word	0x204009d8
  40015c:	00000000 	.word	0x00000000
  400160:	00405f34 	.word	0x00405f34

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00405f34 	.word	0x00405f34
  4001a0:	204009dc 	.word	0x204009dc
  4001a4:	00405f34 	.word	0x00405f34
  4001a8:	00000000 	.word	0x00000000

004001ac <XDMAC_Handler>:
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4001ac:	4b52      	ldr	r3, [pc, #328]	; (4002f8 <XDMAC_Handler+0x14c>)
  4001ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
void XDMAC_Handler(void)
{
    uint32_t dma_status;
    
    dma_status = xdmac_channel_get_interrupt_status(XDMAC, XDMA_CH_SSC_RX);
    if (dma_status & XDMAC_CIS_BIS)
  4001b0:	f013 0f01 	tst.w	r3, #1
  4001b4:	f000 808a 	beq.w	4002cc <XDMAC_Handler+0x120>
{
  4001b8:	b470      	push	{r4, r5, r6}
    {
		if(inPingMode)
  4001ba:	4b50      	ldr	r3, [pc, #320]	; (4002fc <XDMAC_Handler+0x150>)
  4001bc:	781b      	ldrb	r3, [r3, #0]
  4001be:	b16b      	cbz	r3, 4001dc <XDMAC_Handler+0x30>
		{
			inBuffer = inPingBuffer; 
  4001c0:	4a4f      	ldr	r2, [pc, #316]	; (400300 <XDMAC_Handler+0x154>)
  4001c2:	4b50      	ldr	r3, [pc, #320]	; (400304 <XDMAC_Handler+0x158>)
  4001c4:	601a      	str	r2, [r3, #0]
		}
		else 
		{
			inBuffer = inPongBuffer; 
		}
		inPingMode = !inPingMode; 
  4001c6:	4a4d      	ldr	r2, [pc, #308]	; (4002fc <XDMAC_Handler+0x150>)
  4001c8:	7813      	ldrb	r3, [r2, #0]
  4001ca:	f083 0301 	eor.w	r3, r3, #1
  4001ce:	7013      	strb	r3, [r2, #0]
		int processIdx = 0; 
		for(int i = 0; i < BUF_SIZE; i++)
  4001d0:	2300      	movs	r3, #0
		int processIdx = 0; 
  4001d2:	461c      	mov	r4, r3
		{
						
			outBuffer[i] = inBuffer[i];
  4001d4:	4d4c      	ldr	r5, [pc, #304]	; (400308 <XDMAC_Handler+0x15c>)
  4001d6:	484b      	ldr	r0, [pc, #300]	; (400304 <XDMAC_Handler+0x158>)
			//outBuffer[i] = (uint16_t) ( ( (int32_t)((int16_t)inBuffer[i]) + (int32_t)(sin_wave[sinIdx++]/16) ) / 2 );
			//if(sinIdx == SIN_WAVE_LENGTH) sinIdx = 0;

			if ((i & 1) == 0)
				fillBuffer[processIdx++] = (int16_t)inBuffer[i]; 
  4001d8:	4e4c      	ldr	r6, [pc, #304]	; (40030c <XDMAC_Handler+0x160>)
  4001da:	e007      	b.n	4001ec <XDMAC_Handler+0x40>
			inBuffer = inPongBuffer; 
  4001dc:	4a4c      	ldr	r2, [pc, #304]	; (400310 <XDMAC_Handler+0x164>)
  4001de:	4b49      	ldr	r3, [pc, #292]	; (400304 <XDMAC_Handler+0x158>)
  4001e0:	601a      	str	r2, [r3, #0]
  4001e2:	e7f0      	b.n	4001c6 <XDMAC_Handler+0x1a>
		for(int i = 0; i < BUF_SIZE; i++)
  4001e4:	3301      	adds	r3, #1
  4001e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  4001ea:	d012      	beq.n	400212 <XDMAC_Handler+0x66>
			outBuffer[i] = inBuffer[i];
  4001ec:	6802      	ldr	r2, [r0, #0]
  4001ee:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  4001f2:	b292      	uxth	r2, r2
  4001f4:	6829      	ldr	r1, [r5, #0]
  4001f6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			if ((i & 1) == 0)
  4001fa:	f013 0f01 	tst.w	r3, #1
  4001fe:	d1f1      	bne.n	4001e4 <XDMAC_Handler+0x38>
				fillBuffer[processIdx++] = (int16_t)inBuffer[i]; 
  400200:	6802      	ldr	r2, [r0, #0]
  400202:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  400206:	b212      	sxth	r2, r2
  400208:	6831      	ldr	r1, [r6, #0]
  40020a:	f821 2014 	strh.w	r2, [r1, r4, lsl #1]
  40020e:	3401      	adds	r4, #1
  400210:	e7e8      	b.n	4001e4 <XDMAC_Handler+0x38>
		}
		
		if (processPingMode)
  400212:	4b40      	ldr	r3, [pc, #256]	; (400314 <XDMAC_Handler+0x168>)
  400214:	781b      	ldrb	r3, [r3, #0]
  400216:	2b00      	cmp	r3, #0
  400218:	d033      	beq.n	400282 <XDMAC_Handler+0xd6>
		{
			if (fillBuffer == &processPingBuffer[(TOTAL_PROCESS_BUFFERS-1)*PROCESS_BUF_SIZE])
  40021a:	4b3c      	ldr	r3, [pc, #240]	; (40030c <XDMAC_Handler+0x160>)
  40021c:	681b      	ldr	r3, [r3, #0]
  40021e:	4a3e      	ldr	r2, [pc, #248]	; (400318 <XDMAC_Handler+0x16c>)
  400220:	4293      	cmp	r3, r2
  400222:	d017      	beq.n	400254 <XDMAC_Handler+0xa8>
				else 
					dataReceived = 1; 
			}	
			else 
			{
				fillBuffer += PROCESS_BUF_SIZE; 
  400224:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  400228:	4a38      	ldr	r2, [pc, #224]	; (40030c <XDMAC_Handler+0x160>)
  40022a:	6013      	str	r3, [r2, #0]
  40022c:	4b32      	ldr	r3, [pc, #200]	; (4002f8 <XDMAC_Handler+0x14c>)
  40022e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
		}
		
    }
	
	dma_status = xdmac_channel_get_interrupt_status(XDMAC, XDMA_CH_SSC_TX);
	if (dma_status & XDMAC_CIS_BIS)
  400232:	f013 0f01 	tst.w	r3, #1
  400236:	d00b      	beq.n	400250 <XDMAC_Handler+0xa4>
	{
		if(outPingMode)
  400238:	4b38      	ldr	r3, [pc, #224]	; (40031c <XDMAC_Handler+0x170>)
  40023a:	781b      	ldrb	r3, [r3, #0]
  40023c:	2b00      	cmp	r3, #0
  40023e:	d041      	beq.n	4002c4 <XDMAC_Handler+0x118>
		{
			outBuffer = outPingBuffer; 
  400240:	4a37      	ldr	r2, [pc, #220]	; (400320 <XDMAC_Handler+0x174>)
  400242:	4b31      	ldr	r3, [pc, #196]	; (400308 <XDMAC_Handler+0x15c>)
  400244:	601a      	str	r2, [r3, #0]
		}
		else
		{
			outBuffer = outPongBuffer; 
		}
		outPingMode = !outPingMode; 
  400246:	4a35      	ldr	r2, [pc, #212]	; (40031c <XDMAC_Handler+0x170>)
  400248:	7813      	ldrb	r3, [r2, #0]
  40024a:	f083 0301 	eor.w	r3, r3, #1
  40024e:	7013      	strb	r3, [r2, #0]
	}
}
  400250:	bc70      	pop	{r4, r5, r6}
  400252:	4770      	bx	lr
				processBuffer = processPingBuffer; 
  400254:	f5a2 52e0 	sub.w	r2, r2, #7168	; 0x1c00
  400258:	4b32      	ldr	r3, [pc, #200]	; (400324 <XDMAC_Handler+0x178>)
  40025a:	601a      	str	r2, [r3, #0]
				fillBuffer = processPongBuffer; 
  40025c:	4a32      	ldr	r2, [pc, #200]	; (400328 <XDMAC_Handler+0x17c>)
  40025e:	4b2b      	ldr	r3, [pc, #172]	; (40030c <XDMAC_Handler+0x160>)
  400260:	601a      	str	r2, [r3, #0]
				processPingMode = !processPingMode; 
  400262:	4a2c      	ldr	r2, [pc, #176]	; (400314 <XDMAC_Handler+0x168>)
  400264:	7813      	ldrb	r3, [r2, #0]
  400266:	f083 0301 	eor.w	r3, r3, #1
  40026a:	7013      	strb	r3, [r2, #0]
				if (dataReceived)
  40026c:	4b2f      	ldr	r3, [pc, #188]	; (40032c <XDMAC_Handler+0x180>)
  40026e:	781b      	ldrb	r3, [r3, #0]
  400270:	b11b      	cbz	r3, 40027a <XDMAC_Handler+0xce>
					outOfTime = 1; 
  400272:	2201      	movs	r2, #1
  400274:	4b2e      	ldr	r3, [pc, #184]	; (400330 <XDMAC_Handler+0x184>)
  400276:	701a      	strb	r2, [r3, #0]
  400278:	e7d8      	b.n	40022c <XDMAC_Handler+0x80>
					dataReceived = 1; 
  40027a:	2201      	movs	r2, #1
  40027c:	4b2b      	ldr	r3, [pc, #172]	; (40032c <XDMAC_Handler+0x180>)
  40027e:	701a      	strb	r2, [r3, #0]
  400280:	e7d4      	b.n	40022c <XDMAC_Handler+0x80>
			if (fillBuffer == &processPongBuffer[(TOTAL_PROCESS_BUFFERS-1)*PROCESS_BUF_SIZE])
  400282:	4b22      	ldr	r3, [pc, #136]	; (40030c <XDMAC_Handler+0x160>)
  400284:	681b      	ldr	r3, [r3, #0]
  400286:	4a2b      	ldr	r2, [pc, #172]	; (400334 <XDMAC_Handler+0x188>)
  400288:	4293      	cmp	r3, r2
  40028a:	d004      	beq.n	400296 <XDMAC_Handler+0xea>
				fillBuffer += PROCESS_BUF_SIZE;
  40028c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  400290:	4a1e      	ldr	r2, [pc, #120]	; (40030c <XDMAC_Handler+0x160>)
  400292:	6013      	str	r3, [r2, #0]
  400294:	e7ca      	b.n	40022c <XDMAC_Handler+0x80>
				processBuffer = processPongBuffer;
  400296:	f5a2 52e0 	sub.w	r2, r2, #7168	; 0x1c00
  40029a:	4b22      	ldr	r3, [pc, #136]	; (400324 <XDMAC_Handler+0x178>)
  40029c:	601a      	str	r2, [r3, #0]
				fillBuffer = processPingBuffer; 
  40029e:	4a26      	ldr	r2, [pc, #152]	; (400338 <XDMAC_Handler+0x18c>)
  4002a0:	4b1a      	ldr	r3, [pc, #104]	; (40030c <XDMAC_Handler+0x160>)
  4002a2:	601a      	str	r2, [r3, #0]
				processPingMode = !processPingMode;
  4002a4:	4a1b      	ldr	r2, [pc, #108]	; (400314 <XDMAC_Handler+0x168>)
  4002a6:	7813      	ldrb	r3, [r2, #0]
  4002a8:	f083 0301 	eor.w	r3, r3, #1
  4002ac:	7013      	strb	r3, [r2, #0]
				if (dataReceived)
  4002ae:	4b1f      	ldr	r3, [pc, #124]	; (40032c <XDMAC_Handler+0x180>)
  4002b0:	781b      	ldrb	r3, [r3, #0]
  4002b2:	b11b      	cbz	r3, 4002bc <XDMAC_Handler+0x110>
					outOfTime = 1;
  4002b4:	2201      	movs	r2, #1
  4002b6:	4b1e      	ldr	r3, [pc, #120]	; (400330 <XDMAC_Handler+0x184>)
  4002b8:	701a      	strb	r2, [r3, #0]
  4002ba:	e7b7      	b.n	40022c <XDMAC_Handler+0x80>
					dataReceived = 1;
  4002bc:	2201      	movs	r2, #1
  4002be:	4b1b      	ldr	r3, [pc, #108]	; (40032c <XDMAC_Handler+0x180>)
  4002c0:	701a      	strb	r2, [r3, #0]
  4002c2:	e7b3      	b.n	40022c <XDMAC_Handler+0x80>
			outBuffer = outPongBuffer; 
  4002c4:	4a1d      	ldr	r2, [pc, #116]	; (40033c <XDMAC_Handler+0x190>)
  4002c6:	4b10      	ldr	r3, [pc, #64]	; (400308 <XDMAC_Handler+0x15c>)
  4002c8:	601a      	str	r2, [r3, #0]
  4002ca:	e7bc      	b.n	400246 <XDMAC_Handler+0x9a>
  4002cc:	4b0a      	ldr	r3, [pc, #40]	; (4002f8 <XDMAC_Handler+0x14c>)
  4002ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
	if (dma_status & XDMAC_CIS_BIS)
  4002d2:	f013 0f01 	tst.w	r3, #1
  4002d6:	d0bc      	beq.n	400252 <XDMAC_Handler+0xa6>
		if(outPingMode)
  4002d8:	4b10      	ldr	r3, [pc, #64]	; (40031c <XDMAC_Handler+0x170>)
  4002da:	781b      	ldrb	r3, [r3, #0]
  4002dc:	b143      	cbz	r3, 4002f0 <XDMAC_Handler+0x144>
			outBuffer = outPingBuffer; 
  4002de:	4a10      	ldr	r2, [pc, #64]	; (400320 <XDMAC_Handler+0x174>)
  4002e0:	4b09      	ldr	r3, [pc, #36]	; (400308 <XDMAC_Handler+0x15c>)
  4002e2:	601a      	str	r2, [r3, #0]
		outPingMode = !outPingMode; 
  4002e4:	4a0d      	ldr	r2, [pc, #52]	; (40031c <XDMAC_Handler+0x170>)
  4002e6:	7813      	ldrb	r3, [r2, #0]
  4002e8:	f083 0301 	eor.w	r3, r3, #1
  4002ec:	7013      	strb	r3, [r2, #0]
  4002ee:	4770      	bx	lr
			outBuffer = outPongBuffer; 
  4002f0:	4a12      	ldr	r2, [pc, #72]	; (40033c <XDMAC_Handler+0x190>)
  4002f2:	4b05      	ldr	r3, [pc, #20]	; (400308 <XDMAC_Handler+0x15c>)
  4002f4:	601a      	str	r2, [r3, #0]
  4002f6:	e7f5      	b.n	4002e4 <XDMAC_Handler+0x138>
  4002f8:	40078000 	.word	0x40078000
  4002fc:	20400014 	.word	0x20400014
  400300:	204065ac 	.word	0x204065ac
  400304:	20400010 	.word	0x20400010
  400308:	20400018 	.word	0x20400018
  40030c:	2040000c 	.word	0x2040000c
  400310:	20402dac 	.word	0x20402dac
  400314:	20400024 	.word	0x20400024
  400318:	204029ac 	.word	0x204029ac
  40031c:	2040001c 	.word	0x2040001c
  400320:	204035ac 	.word	0x204035ac
  400324:	20400020 	.word	0x20400020
  400328:	204045ac 	.word	0x204045ac
  40032c:	204009f4 	.word	0x204009f4
  400330:	20400a38 	.word	0x20400a38
  400334:	204061ac 	.word	0x204061ac
  400338:	20400dac 	.word	0x20400dac
  40033c:	20403dac 	.word	0x20403dac

00400340 <configure_xdma>:
/******************************* XDMAC Interrupt Handler End *******************************/

/********************************** Public Functions Start **********************************/
void configure_xdma(void)
{
  400340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400344:	b088      	sub	sp, #32
    uint16_t *src;
    
    xdmac_channel_config_t xdmac_channel_cfg = {0};
  400346:	2420      	movs	r4, #32
  400348:	4622      	mov	r2, r4
  40034a:	2100      	movs	r1, #0
  40034c:	4668      	mov	r0, sp
  40034e:	4b27      	ldr	r3, [pc, #156]	; (4003ec <configure_xdma+0xac>)
  400350:	4798      	blx	r3
    
    /* Initialize and enable DMA controller */
    pmc_enable_periph_clk(ID_XDMAC);
  400352:	203a      	movs	r0, #58	; 0x3a
  400354:	4b26      	ldr	r3, [pc, #152]	; (4003f0 <configure_xdma+0xb0>)
  400356:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400358:	4b26      	ldr	r3, [pc, #152]	; (4003f4 <configure_xdma+0xb4>)
  40035a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40035e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400362:	f883 433a 	strb.w	r4, [r3, #826]	; 0x33a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400366:	605a      	str	r2, [r3, #4]
    NVIC_SetPriority(XDMAC_IRQn ,1);
    NVIC_EnableIRQ(XDMAC_IRQn);
    
    /********** Read Buffer ********/
    /* Initialize channel config */
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  400368:	4b23      	ldr	r3, [pc, #140]	; (4003f8 <configure_xdma+0xb8>)
  40036a:	9303      	str	r3, [sp, #12]
    | XDMAC_CC_DIF_AHB_IF0
    | XDMAC_CC_SAM_FIXED_AM
    | XDMAC_CC_DAM_INCREMENTED_AM
    | XDMAC_CC_PERID(33);
	
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  40036c:	4c23      	ldr	r4, [pc, #140]	; (4003fc <configure_xdma+0xbc>)
  40036e:	466a      	mov	r2, sp
  400370:	2100      	movs	r1, #0
  400372:	4620      	mov	r0, r4
  400374:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 400428 <configure_xdma+0xe8>
  400378:	47c0      	blx	r8
    
    /* Initialize linked list descriptor */
    src = (uint16_t *)&inPingBuffer[0];
    linklist_read[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  40037a:	4b21      	ldr	r3, [pc, #132]	; (400400 <configure_xdma+0xc0>)
  40037c:	4e21      	ldr	r6, [pc, #132]	; (400404 <configure_xdma+0xc4>)
  40037e:	605e      	str	r6, [r3, #4]
		| XDMAC_UBC_NDE_FETCH_EN
		| XDMAC_UBC_NSEN_UPDATED
		| XDMAC_CUBC_UBLEN(BUF_SIZE);
    linklist_read[0].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  400380:	4a21      	ldr	r2, [pc, #132]	; (400408 <configure_xdma+0xc8>)
  400382:	609a      	str	r2, [r3, #8]
    linklist_read[0].mbr_da = (uint32_t)(src);
  400384:	4921      	ldr	r1, [pc, #132]	; (40040c <configure_xdma+0xcc>)
  400386:	60d9      	str	r1, [r3, #12]
    linklist_read[0].mbr_nda = (uint32_t)&linklist_read[1];
  400388:	f103 0110 	add.w	r1, r3, #16
  40038c:	6019      	str	r1, [r3, #0]
	src = (uint16_t *)&inPongBuffer[0];; 
	linklist_read[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  40038e:	615e      	str	r6, [r3, #20]
	    | XDMAC_UBC_NDE_FETCH_EN
	    | XDMAC_UBC_NSEN_UPDATED
	    | XDMAC_CUBC_UBLEN(BUF_SIZE);
	linklist_read[1].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  400390:	619a      	str	r2, [r3, #24]
	linklist_read[1].mbr_da = (uint32_t)(src);
  400392:	4a1f      	ldr	r2, [pc, #124]	; (400410 <configure_xdma+0xd0>)
  400394:	61da      	str	r2, [r3, #28]
	linklist_read[1].mbr_nda = (uint32_t)&linklist_read[0];
  400396:	611b      	str	r3, [r3, #16]
 */
static inline void xdmac_channel_set_descriptor_control(Xdmac *xdmac, uint32_t channel_num, uint32_t config)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  400398:	270f      	movs	r7, #15
  40039a:	66e7      	str	r7, [r4, #108]	; 0x6c
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  40039c:	f023 0303 	bic.w	r3, r3, #3
  4003a0:	66a3      	str	r3, [r4, #104]	; 0x68
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  4003a2:	2501      	movs	r5, #1
  4003a4:	60e5      	str	r5, [r4, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CIE = mask;
  4003a6:	6525      	str	r5, [r4, #80]	; 0x50
    xdmac_enable_interrupt(XDMAC, XDMA_CH_SSC_RX);
    xdmac_channel_enable_interrupt(XDMAC, XDMA_CH_SSC_RX, XDMAC_CIE_BIE);
    
    
    /******* Write buffer *******/
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4003a8:	4b1a      	ldr	r3, [pc, #104]	; (400414 <configure_xdma+0xd4>)
  4003aa:	9303      	str	r3, [sp, #12]
    | XDMAC_CC_DIF_AHB_IF1
    | XDMAC_CC_SAM_INCREMENTED_AM
    | XDMAC_CC_DAM_FIXED_AM
    | XDMAC_CC_PERID(32);
	
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  4003ac:	466a      	mov	r2, sp
  4003ae:	4629      	mov	r1, r5
  4003b0:	4620      	mov	r0, r4
  4003b2:	47c0      	blx	r8
    
    src = (uint16_t *)&outPingBuffer[0];
    linklist_write[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4003b4:	4b18      	ldr	r3, [pc, #96]	; (400418 <configure_xdma+0xd8>)
  4003b6:	605e      	str	r6, [r3, #4]
		 | XDMAC_UBC_NDE_FETCH_EN
		 | XDMAC_UBC_NSEN_UPDATED
			| XDMAC_CUBC_UBLEN(BUF_SIZE);
    linklist_write[0].mbr_sa = (uint32_t)(src);
  4003b8:	4a18      	ldr	r2, [pc, #96]	; (40041c <configure_xdma+0xdc>)
  4003ba:	609a      	str	r2, [r3, #8]
    linklist_write[0].mbr_da = (uint32_t)&(SSC->SSC_THR);
  4003bc:	4a18      	ldr	r2, [pc, #96]	; (400420 <configure_xdma+0xe0>)
  4003be:	60da      	str	r2, [r3, #12]
    linklist_write[0].mbr_nda = (uint32_t)&linklist_write[1];
  4003c0:	f103 0110 	add.w	r1, r3, #16
  4003c4:	6019      	str	r1, [r3, #0]
	
	src = (uint16_t *)&outPongBuffer[0];
	linklist_write[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4003c6:	615e      	str	r6, [r3, #20]
	    | XDMAC_UBC_NDE_FETCH_EN
	    | XDMAC_UBC_NSEN_UPDATED
	    | XDMAC_CUBC_UBLEN(BUF_SIZE);
	linklist_write[1].mbr_sa = (uint32_t)(src);
  4003c8:	4916      	ldr	r1, [pc, #88]	; (400424 <configure_xdma+0xe4>)
  4003ca:	6199      	str	r1, [r3, #24]
	linklist_write[1].mbr_da = (uint32_t)&(SSC->SSC_THR);
  4003cc:	61da      	str	r2, [r3, #28]
	linklist_write[1].mbr_nda = (uint32_t)&linklist_write[0];
  4003ce:	611b      	str	r3, [r3, #16]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  4003d0:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  4003d4:	f023 0303 	bic.w	r3, r3, #3
  4003d8:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  4003dc:	2302      	movs	r3, #2
  4003de:	60e3      	str	r3, [r4, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CIE = mask;
  4003e0:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
    xdmac_channel_set_descriptor_addr(XDMAC, XDMA_CH_SSC_TX, (uint32_t)(&linklist_write[0]), 0);
    
    xdmac_enable_interrupt(XDMAC, XDMA_CH_SSC_TX);
    xdmac_channel_enable_interrupt(XDMAC, XDMA_CH_SSC_TX, XDMAC_CIE_BIE);
    
}
  4003e4:	b008      	add	sp, #32
  4003e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4003ea:	bf00      	nop
  4003ec:	0040350d 	.word	0x0040350d
  4003f0:	0040231d 	.word	0x0040231d
  4003f4:	e000e100 	.word	0xe000e100
  4003f8:	21042801 	.word	0x21042801
  4003fc:	40078000 	.word	0x40078000
  400400:	204009f8 	.word	0x204009f8
  400404:	0b000400 	.word	0x0b000400
  400408:	40004020 	.word	0x40004020
  40040c:	204065ac 	.word	0x204065ac
  400410:	20402dac 	.word	0x20402dac
  400414:	20014811 	.word	0x20014811
  400418:	20400a18 	.word	0x20400a18
  40041c:	204035ac 	.word	0x204035ac
  400420:	40004024 	.word	0x40004024
  400424:	20403dac 	.word	0x20403dac
  400428:	00401ab5 	.word	0x00401ab5

0040042c <audio_init>:

#include "DMA_Audio.h"
#include "WM8904_Driver.h"

void audio_init(void)
{
  40042c:	b510      	push	{r4, lr}
	/* Initialize WM8904 TWI interface*/
	if (wm8904_twi_init() != TWIHS_SUCCESS) {
  40042e:	4b13      	ldr	r3, [pc, #76]	; (40047c <audio_init+0x50>)
  400430:	4798      	blx	r3
  400432:	b118      	cbz	r0, 40043c <audio_init+0x10>
		printf("-E-\tWM8904 initialization failed.\r");
  400434:	4812      	ldr	r0, [pc, #72]	; (400480 <audio_init+0x54>)
  400436:	4b13      	ldr	r3, [pc, #76]	; (400484 <audio_init+0x58>)
  400438:	4798      	blx	r3
  40043a:	e7fe      	b.n	40043a <audio_init+0xe>
			/* Capture error */
		}
	}
		
	/* Configure CODEC */
	configure_codec();
  40043c:	4b12      	ldr	r3, [pc, #72]	; (400488 <audio_init+0x5c>)
  40043e:	4798      	blx	r3
		
	/* Configure SSC */
	configure_ssc();
  400440:	4b12      	ldr	r3, [pc, #72]	; (40048c <audio_init+0x60>)
  400442:	4798      	blx	r3
		
	/* Configure XDMA */
	configure_xdma();
  400444:	4b12      	ldr	r3, [pc, #72]	; (400490 <audio_init+0x64>)
  400446:	4798      	blx	r3
		
	/* Enable the DAC master clock */
	pmc_pck_set_prescaler(PMC_PCK_2, PMC_MCKR_PRES_CLK_1);
  400448:	2100      	movs	r1, #0
  40044a:	2002      	movs	r0, #2
  40044c:	4b11      	ldr	r3, [pc, #68]	; (400494 <audio_init+0x68>)
  40044e:	4798      	blx	r3
	pmc_pck_set_source(PMC_PCK_2, PMC_MCKR_CSS_SLOW_CLK);
  400450:	2100      	movs	r1, #0
  400452:	2002      	movs	r0, #2
  400454:	4b10      	ldr	r3, [pc, #64]	; (400498 <audio_init+0x6c>)
  400456:	4798      	blx	r3
	pmc_enable_pck(PMC_PCK_2);
  400458:	2002      	movs	r0, #2
  40045a:	4b10      	ldr	r3, [pc, #64]	; (40049c <audio_init+0x70>)
  40045c:	4798      	blx	r3
		
	/* Start playing */
	ssc_enable_rx(SSC);
  40045e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400462:	4b0f      	ldr	r3, [pc, #60]	; (4004a0 <audio_init+0x74>)
  400464:	4798      	blx	r3
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  400466:	4c0f      	ldr	r4, [pc, #60]	; (4004a4 <audio_init+0x78>)
  400468:	2301      	movs	r3, #1
  40046a:	61e3      	str	r3, [r4, #28]
	xdmac_channel_enable(XDMAC, XDMA_CH_SSC_RX);
	// might want to enable in the first xdma interrupt (if you care)
	ssc_enable_tx(SSC);
  40046c:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400470:	4b0d      	ldr	r3, [pc, #52]	; (4004a8 <audio_init+0x7c>)
  400472:	4798      	blx	r3
  400474:	2302      	movs	r3, #2
  400476:	61e3      	str	r3, [r4, #28]
  400478:	bd10      	pop	{r4, pc}
  40047a:	bf00      	nop
  40047c:	00401299 	.word	0x00401299
  400480:	00405d08 	.word	0x00405d08
  400484:	00402f75 	.word	0x00402f75
  400488:	00400565 	.word	0x00400565
  40048c:	004004ad 	.word	0x004004ad
  400490:	00400341 	.word	0x00400341
  400494:	00402371 	.word	0x00402371
  400498:	0040239d 	.word	0x0040239d
  40049c:	004023c9 	.word	0x004023c9
  4004a0:	0040177b 	.word	0x0040177b
  4004a4:	40078000 	.word	0x40078000
  4004a8:	00401787 	.word	0x00401787

004004ac <configure_ssc>:
#include "WM8904_Driver.h"


/********************************** Public Functions Start **********************************/
void configure_ssc(void)
{
  4004ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4004b0:	b09c      	sub	sp, #112	; 0x70
	clock_opt_t tx_clk_option, rx_clk_option;
	data_frame_opt_t tx_data_frame_option, rx_data_frame_option;

	/* Initialize clock */
	pmc_enable_periph_clk(ID_SSC);
  4004b2:	2016      	movs	r0, #22
  4004b4:	4b24      	ldr	r3, [pc, #144]	; (400548 <configure_ssc+0x9c>)
  4004b6:	4798      	blx	r3

	/* Reset SSC */
	ssc_reset(SSC);
  4004b8:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4004bc:	4b23      	ldr	r3, [pc, #140]	; (40054c <configure_ssc+0xa0>)
  4004be:	4798      	blx	r3

	/* Transmitter clock mode configuration. */
	tx_clk_option.ul_cks = SSC_TCMR_CKS_TK;
  4004c0:	2302      	movs	r3, #2
  4004c2:	9315      	str	r3, [sp, #84]	; 0x54
	tx_clk_option.ul_cko = SSC_TCMR_CKO_NONE;
  4004c4:	2400      	movs	r4, #0
  4004c6:	9416      	str	r4, [sp, #88]	; 0x58
	tx_clk_option.ul_cki = 0;
  4004c8:	9417      	str	r4, [sp, #92]	; 0x5c
	tx_clk_option.ul_ckg = SSC_TCMR_CKG_CONTINUOUS;
  4004ca:	9418      	str	r4, [sp, #96]	; 0x60
	tx_clk_option.ul_start_sel = SSC_TCMR_START_TF_EDGE;
  4004cc:	f44f 68e0 	mov.w	r8, #1792	; 0x700
  4004d0:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
	tx_clk_option.ul_sttdly = 1;
  4004d4:	2601      	movs	r6, #1
  4004d6:	961a      	str	r6, [sp, #104]	; 0x68
	tx_clk_option.ul_period = BITS_BY_SLOT - 1;
  4004d8:	250f      	movs	r5, #15
  4004da:	9519      	str	r5, [sp, #100]	; 0x64
	/* Transmitter frame mode configuration. */
	tx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
  4004dc:	9507      	str	r5, [sp, #28]
	tx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  4004de:	2780      	movs	r7, #128	; 0x80
  4004e0:	9708      	str	r7, [sp, #32]
	tx_data_frame_option.ul_datnb = 0;
  4004e2:	9409      	str	r4, [sp, #36]	; 0x24
	tx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;
  4004e4:	950a      	str	r5, [sp, #40]	; 0x28
	tx_data_frame_option.ul_fslen_ext = 0;
  4004e6:	940b      	str	r4, [sp, #44]	; 0x2c
	tx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  4004e8:	940c      	str	r4, [sp, #48]	; 0x30
	tx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  4004ea:	940d      	str	r4, [sp, #52]	; 0x34
	/* Configure the SSC transmitter to I2S mode. */
	ssc_set_transmitter(SSC, &tx_clk_option, &tx_data_frame_option);
  4004ec:	aa07      	add	r2, sp, #28
  4004ee:	a915      	add	r1, sp, #84	; 0x54
  4004f0:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4004f4:	4b16      	ldr	r3, [pc, #88]	; (400550 <configure_ssc+0xa4>)
  4004f6:	4798      	blx	r3

	/* Receiver clock mode configuration. */
	rx_clk_option.ul_cks = SSC_RCMR_CKS_TK;
  4004f8:	960e      	str	r6, [sp, #56]	; 0x38
	rx_clk_option.ul_cko = SSC_RCMR_CKO_NONE;
  4004fa:	940f      	str	r4, [sp, #60]	; 0x3c
	rx_clk_option.ul_cki = SSC_RCMR_CKI;
  4004fc:	2320      	movs	r3, #32
  4004fe:	9310      	str	r3, [sp, #64]	; 0x40
	rx_clk_option.ul_ckg = SSC_RCMR_CKG_CONTINUOUS;
  400500:	9411      	str	r4, [sp, #68]	; 0x44
	rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_EDGE;
  400502:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
	rx_clk_option.ul_sttdly = 1;	
  400506:	9613      	str	r6, [sp, #76]	; 0x4c
	rx_clk_option.ul_period = BITS_BY_SLOT;	
  400508:	2310      	movs	r3, #16
  40050a:	9312      	str	r3, [sp, #72]	; 0x48
	/* Receiver frame mode configuration. */
	rx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
  40050c:	9500      	str	r5, [sp, #0]
	rx_data_frame_option.ul_msbf = SSC_RFMR_MSBF;
  40050e:	9701      	str	r7, [sp, #4]
	rx_data_frame_option.ul_datnb = 0;
  400510:	9402      	str	r4, [sp, #8]
	rx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;	
  400512:	9503      	str	r5, [sp, #12]
	rx_data_frame_option.ul_fslen_ext = 0;
  400514:	9404      	str	r4, [sp, #16]
	rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  400516:	9405      	str	r4, [sp, #20]
	rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  400518:	9406      	str	r4, [sp, #24]
	/* Configure the SSC transmitter to I2S mode. */
	ssc_set_receiver(SSC, &rx_clk_option, &rx_data_frame_option);
  40051a:	466a      	mov	r2, sp
  40051c:	a90e      	add	r1, sp, #56	; 0x38
  40051e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400522:	4b0c      	ldr	r3, [pc, #48]	; (400554 <configure_ssc+0xa8>)
  400524:	4798      	blx	r3

	/* Disable transmitter first */
	ssc_disable_tx(SSC);
  400526:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40052a:	4b0b      	ldr	r3, [pc, #44]	; (400558 <configure_ssc+0xac>)
  40052c:	4798      	blx	r3
	ssc_disable_rx(SSC);
  40052e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400532:	4b0a      	ldr	r3, [pc, #40]	; (40055c <configure_ssc+0xb0>)
  400534:	4798      	blx	r3

	/* Disable All Interrupt */
	ssc_disable_interrupt(SSC, 0xFFFFFFFF);
  400536:	f04f 31ff 	mov.w	r1, #4294967295
  40053a:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40053e:	4b08      	ldr	r3, [pc, #32]	; (400560 <configure_ssc+0xb4>)
  400540:	4798      	blx	r3
}
  400542:	b01c      	add	sp, #112	; 0x70
  400544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400548:	0040231d 	.word	0x0040231d
  40054c:	00401767 	.word	0x00401767
  400550:	0040180b 	.word	0x0040180b
  400554:	00401797 	.word	0x00401797
  400558:	0040178f 	.word	0x0040178f
  40055c:	00401781 	.word	0x00401781
  400560:	0040187f 	.word	0x0040187f

00400564 <configure_codec>:


void configure_codec(void)
{
  400564:	b570      	push	{r4, r5, r6, lr}
	uint16_t data = 0;
	/* check that WM8904 is present */
	wm8904_write_register(WM8904_SW_RESET_AND_ID, 0xFFFF);
  400566:	f64f 71ff 	movw	r1, #65535	; 0xffff
  40056a:	2000      	movs	r0, #0
  40056c:	4b40      	ldr	r3, [pc, #256]	; (400670 <configure_codec+0x10c>)
  40056e:	4798      	blx	r3
	data = wm8904_read_register(WM8904_SW_RESET_AND_ID);
  400570:	2000      	movs	r0, #0
  400572:	4b40      	ldr	r3, [pc, #256]	; (400674 <configure_codec+0x110>)
  400574:	4798      	blx	r3
	if(data != 0x8904) {
  400576:	f648 1304 	movw	r3, #35076	; 0x8904
  40057a:	4298      	cmp	r0, r3
  40057c:	d003      	beq.n	400586 <configure_codec+0x22>
		printf("WM8904 not found!\n\r");
  40057e:	483e      	ldr	r0, [pc, #248]	; (400678 <configure_codec+0x114>)
  400580:	4b3e      	ldr	r3, [pc, #248]	; (40067c <configure_codec+0x118>)
  400582:	4798      	blx	r3
  400584:	e7fe      	b.n	400584 <configure_codec+0x20>
		while(1);
	}

	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS);	
  400586:	2108      	movs	r1, #8
  400588:	2004      	movs	r0, #4
  40058a:	4c39      	ldr	r4, [pc, #228]	; (400670 <configure_codec+0x10c>)
  40058c:	47a0      	blx	r4
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |	
  40058e:	2147      	movs	r1, #71	; 0x47
  400590:	2005      	movs	r0, #5
  400592:	47a0      	blx	r4
	WM8904_VMID_RES_FAST | WM8904_VMID_ENA);
	delay_ms(5);
  400594:	4e3a      	ldr	r6, [pc, #232]	; (400680 <configure_codec+0x11c>)
  400596:	4630      	mov	r0, r6
  400598:	4d3a      	ldr	r5, [pc, #232]	; (400684 <configure_codec+0x120>)
  40059a:	47a8      	blx	r5
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |
  40059c:	2143      	movs	r1, #67	; 0x43
  40059e:	2005      	movs	r0, #5
  4005a0:	47a0      	blx	r4
	WM8904_VMID_RES_NORMAL | WM8904_VMID_ENA);
	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS | WM8904_BIAS_ENA);
  4005a2:	2109      	movs	r1, #9
  4005a4:	2004      	movs	r0, #4
  4005a6:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_0, WM8904_INL_ENA | WM8904_INR_ENA);
  4005a8:	2103      	movs	r1, #3
  4005aa:	200c      	movs	r0, #12
  4005ac:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_2, WM8904_HPL_PGA_ENA | WM8904_HPR_PGA_ENA);
  4005ae:	2103      	movs	r1, #3
  4005b0:	200e      	movs	r0, #14
  4005b2:	47a0      	blx	r4
	wm8904_write_register(WM8904_DAC_DIGITAL_1, WM8904_DEEMPH(0));
  4005b4:	2100      	movs	r1, #0
  4005b6:	2021      	movs	r0, #33	; 0x21
  4005b8:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_OUT12_ZC, 0x0000);
  4005ba:	2100      	movs	r1, #0
  4005bc:	203d      	movs	r0, #61	; 0x3d
  4005be:	47a0      	blx	r4
	wm8904_write_register(WM8904_CHARGE_PUMP_0, WM8904_CP_ENA);
  4005c0:	2101      	movs	r1, #1
  4005c2:	2062      	movs	r0, #98	; 0x62
  4005c4:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLASS_W_0, WM8904_CP_DYN_PWR);
  4005c6:	2101      	movs	r1, #1
  4005c8:	2068      	movs	r0, #104	; 0x68
  4005ca:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_1, 0x0000);
  4005cc:	2100      	movs	r1, #0
  4005ce:	2074      	movs	r0, #116	; 0x74
  4005d0:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_2, WM8904_FLL_OUTDIV(7)| WM8904_FLL_FRATIO(4));
  4005d2:	f240 7104 	movw	r1, #1796	; 0x704
  4005d6:	2075      	movs	r0, #117	; 0x75
  4005d8:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_3, WM8904_FLL_K(0x8000));
  4005da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  4005de:	2076      	movs	r0, #118	; 0x76
  4005e0:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_4, WM8904_FLL_N(0xBB));
  4005e2:	f44f 51bb 	mov.w	r1, #5984	; 0x1760
  4005e6:	2077      	movs	r0, #119	; 0x77
  4005e8:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_1, WM8904_FLL_FRACN_ENA | WM8904_FLL_ENA);
  4005ea:	2105      	movs	r1, #5
  4005ec:	2074      	movs	r0, #116	; 0x74
  4005ee:	47a0      	blx	r4
	delay_ms(5);
  4005f0:	4630      	mov	r0, r6
  4005f2:	47a8      	blx	r5
	wm8904_write_register(WM8904_CLOCK_RATES_1, WM8904_CLK_SYS_RATE(3) | WM8904_SAMPLE_RATE(5));
  4005f4:	f640 4105 	movw	r1, #3077	; 0xc05
  4005f8:	2015      	movs	r0, #21
  4005fa:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLOCK_RATES_0, 0x0000);
  4005fc:	2100      	movs	r1, #0
  4005fe:	2014      	movs	r0, #20
  400600:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLOCK_RATES_2,
  400602:	f244 0106 	movw	r1, #16390	; 0x4006
  400606:	2016      	movs	r0, #22
  400608:	47a0      	blx	r4
	WM8904_SYSCLK_SRC | WM8904_CLK_SYS_ENA | WM8904_CLK_DSP_ENA);
	wm8904_write_register(WM8904_AUDIO_INTERFACE_1, WM8904_BCLK_DIR | WM8904_AIF_FMT_I2S); 
  40060a:	2142      	movs	r1, #66	; 0x42
  40060c:	2019      	movs	r0, #25
  40060e:	47a0      	blx	r4
	wm8904_write_register(WM8904_AUDIO_INTERFACE_2, WM8904_BCLK_DIV(8));
  400610:	2108      	movs	r1, #8
  400612:	201a      	movs	r0, #26
  400614:	47a0      	blx	r4
	wm8904_write_register(WM8904_AUDIO_INTERFACE_3, WM8904_LRCLK_DIR | WM8904_LRCLK_RATE(0x20));
  400616:	f44f 6102 	mov.w	r1, #2080	; 0x820
  40061a:	201b      	movs	r0, #27
  40061c:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_6,
  40061e:	210f      	movs	r1, #15
  400620:	2012      	movs	r0, #18
  400622:	47a0      	blx	r4
	WM8904_DACL_ENA | WM8904_DACR_ENA |
	WM8904_ADCL_ENA | WM8904_ADCR_ENA);
	delay_ms(5);
  400624:	4630      	mov	r0, r6
  400626:	47a8      	blx	r5
	wm8904_write_register(WM8904_ANALOGUE_LEFT_INPUT_0, WM8904_LIN_VOL(0x10));
  400628:	2110      	movs	r1, #16
  40062a:	202c      	movs	r0, #44	; 0x2c
  40062c:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_RIGHT_INPUT_0, WM8904_RIN_VOL(0x10));
  40062e:	2110      	movs	r1, #16
  400630:	202d      	movs	r0, #45	; 0x2d
  400632:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  400634:	2111      	movs	r1, #17
  400636:	205a      	movs	r0, #90	; 0x5a
  400638:	47a0      	blx	r4
	WM8904_HPL_ENA | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  40063a:	2133      	movs	r1, #51	; 0x33
  40063c:	205a      	movs	r0, #90	; 0x5a
  40063e:	47a0      	blx	r4
	WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_DC_SERVO_0,
  400640:	210f      	movs	r1, #15
  400642:	2043      	movs	r0, #67	; 0x43
  400644:	47a0      	blx	r4
	WM8904_DCS_ENA_CHAN_3 | WM8904_DCS_ENA_CHAN_2 |
	WM8904_DCS_ENA_CHAN_1 | WM8904_DCS_ENA_CHAN_0);
	wm8904_write_register(WM8904_DC_SERVO_1,
  400646:	21f0      	movs	r1, #240	; 0xf0
  400648:	2044      	movs	r0, #68	; 0x44
  40064a:	47a0      	blx	r4
	WM8904_DCS_TRIG_STARTUP_3 | WM8904_DCS_TRIG_STARTUP_2 |
	WM8904_DCS_TRIG_STARTUP_1 | WM8904_DCS_TRIG_STARTUP_0);
	delay_ms(100);
  40064c:	4e0e      	ldr	r6, [pc, #56]	; (400688 <configure_codec+0x124>)
  40064e:	4630      	mov	r0, r6
  400650:	47a8      	blx	r5
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  400652:	2177      	movs	r1, #119	; 0x77
  400654:	205a      	movs	r0, #90	; 0x5a
  400656:	47a0      	blx	r4
	WM8904_HPL_ENA_OUTP | WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_ENA_OUTP | WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  400658:	21ff      	movs	r1, #255	; 0xff
  40065a:	205a      	movs	r0, #90	; 0x5a
  40065c:	47a0      	blx	r4
	WM8904_HPL_RMV_SHORT | WM8904_HPL_ENA_OUTP | WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_RMV_SHORT | WM8904_HPR_ENA_OUTP | WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_OUT1_LEFT, WM8904_HPOUT_VU | WM8904_HPOUTL_VOL(0x39));
  40065e:	21b9      	movs	r1, #185	; 0xb9
  400660:	2039      	movs	r0, #57	; 0x39
  400662:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_OUT1_RIGHT, WM8904_HPOUT_VU | WM8904_HPOUTR_VOL(0x39));
  400664:	21b9      	movs	r1, #185	; 0xb9
  400666:	203a      	movs	r0, #58	; 0x3a
  400668:	47a0      	blx	r4
	delay_ms(100);
  40066a:	4630      	mov	r0, r6
  40066c:	47a8      	blx	r5
  40066e:	bd70      	pop	{r4, r5, r6, pc}
  400670:	00401221 	.word	0x00401221
  400674:	0040125d 	.word	0x0040125d
  400678:	00405d2c 	.word	0x00405d2c
  40067c:	00402f75 	.word	0x00402f75
  400680:	0003dbc2 	.word	0x0003dbc2
  400684:	20400001 	.word	0x20400001
  400688:	004d2b25 	.word	0x004d2b25

0040068c <SysTick_Handler>:
}

/* Systick Interrupt Handler */ 
void SysTick_Handler(void)
{
	msCount++;
  40068c:	4a06      	ldr	r2, [pc, #24]	; (4006a8 <SysTick_Handler+0x1c>)
  40068e:	6813      	ldr	r3, [r2, #0]
  400690:	3301      	adds	r3, #1
  400692:	6013      	str	r3, [r2, #0]
	led_indicator_freq--;
  400694:	4a05      	ldr	r2, [pc, #20]	; (4006ac <SysTick_Handler+0x20>)
  400696:	6813      	ldr	r3, [r2, #0]
  400698:	3b01      	subs	r3, #1
  40069a:	6013      	str	r3, [r2, #0]
	led_indicator_duration++;
  40069c:	4a04      	ldr	r2, [pc, #16]	; (4006b0 <SysTick_Handler+0x24>)
  40069e:	6813      	ldr	r3, [r2, #0]
  4006a0:	3301      	adds	r3, #1
  4006a2:	6013      	str	r3, [r2, #0]
  4006a4:	4770      	bx	lr
  4006a6:	bf00      	nop
  4006a8:	20400a44 	.word	0x20400a44
  4006ac:	20400a40 	.word	0x20400a40
  4006b0:	20400a3c 	.word	0x20400a3c

004006b4 <gfx_set_clipping>:
static gfx_ext_draw_handler_t gfx_ext_draw_func;

/* This function is documented in gfx.h */
void gfx_set_clipping(gfx_coord_t min_x, gfx_coord_t min_y,
		gfx_coord_t max_x, gfx_coord_t max_y)
{
  4006b4:	b410      	push	{r4}
  4006b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  4006ba:	ea21 71e1 	bic.w	r1, r1, r1, asr #31

	if (min_y < 0) {
		min_y = 0;
	}

	if (max_x >= gfx_width) {
  4006be:	4c0c      	ldr	r4, [pc, #48]	; (4006f0 <gfx_set_clipping+0x3c>)
  4006c0:	f9b4 4000 	ldrsh.w	r4, [r4]
  4006c4:	4294      	cmp	r4, r2
  4006c6:	dc01      	bgt.n	4006cc <gfx_set_clipping+0x18>
		max_x = gfx_width - 1;
  4006c8:	1e62      	subs	r2, r4, #1
  4006ca:	b212      	sxth	r2, r2
	}

	if (max_y >= gfx_height) {
  4006cc:	4c09      	ldr	r4, [pc, #36]	; (4006f4 <gfx_set_clipping+0x40>)
  4006ce:	f9b4 4000 	ldrsh.w	r4, [r4]
  4006d2:	429c      	cmp	r4, r3
  4006d4:	dc01      	bgt.n	4006da <gfx_set_clipping+0x26>
		max_y = gfx_height - 1;
  4006d6:	3c01      	subs	r4, #1
  4006d8:	b223      	sxth	r3, r4
	}

	gfx_min_x = min_x;
  4006da:	4c07      	ldr	r4, [pc, #28]	; (4006f8 <gfx_set_clipping+0x44>)
  4006dc:	8020      	strh	r0, [r4, #0]
	gfx_min_y = min_y;
  4006de:	4807      	ldr	r0, [pc, #28]	; (4006fc <gfx_set_clipping+0x48>)
  4006e0:	8001      	strh	r1, [r0, #0]
	gfx_max_x = max_x;
  4006e2:	4907      	ldr	r1, [pc, #28]	; (400700 <gfx_set_clipping+0x4c>)
  4006e4:	800a      	strh	r2, [r1, #0]
	gfx_max_y = max_y;
  4006e6:	4a07      	ldr	r2, [pc, #28]	; (400704 <gfx_set_clipping+0x50>)
  4006e8:	8013      	strh	r3, [r2, #0]
#endif
}
  4006ea:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006ee:	4770      	bx	lr
  4006f0:	20406dac 	.word	0x20406dac
  4006f4:	20406db6 	.word	0x20406db6
  4006f8:	20406db0 	.word	0x20406db0
  4006fc:	20406db4 	.word	0x20406db4
  400700:	20406dae 	.word	0x20406dae
  400704:	20406db2 	.word	0x20406db2

00400708 <gfx_generic_draw_filled_rect>:
		gfx_color_t color)
{
	gfx_coord_t x2;
	gfx_coord_t y2;

	if ((width == 0) || (height == 0)) {
  400708:	2a00      	cmp	r2, #0
  40070a:	d05c      	beq.n	4007c6 <gfx_generic_draw_filled_rect+0xbe>
{
  40070c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40070e:	461c      	mov	r4, r3
  400710:	4615      	mov	r5, r2
	if ((width == 0) || (height == 0)) {
  400712:	2b00      	cmp	r3, #0
  400714:	d048      	beq.n	4007a8 <gfx_generic_draw_filled_rect+0xa0>
		return;
	}

	/* Invert if width or height is negative. */
	if (width < 0) {
  400716:	2a00      	cmp	r2, #0
  400718:	db47      	blt.n	4007aa <gfx_generic_draw_filled_rect+0xa2>
		width = -width;
		x -= width - 1;
	}

	if (height < 0) {
  40071a:	2c00      	cmp	r4, #0
  40071c:	db4c      	blt.n	4007b8 <gfx_generic_draw_filled_rect+0xb0>
		y -= height - 1;
	}

#ifdef CONF_GFX_USE_CLIPPING
	/* Nothing to do if entire rectangle is outside clipping region. */
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
  40071e:	4b2a      	ldr	r3, [pc, #168]	; (4007c8 <gfx_generic_draw_filled_rect+0xc0>)
  400720:	f9b3 6000 	ldrsh.w	r6, [r3]
  400724:	42b0      	cmp	r0, r6
  400726:	dc3f      	bgt.n	4007a8 <gfx_generic_draw_filled_rect+0xa0>
  400728:	4b28      	ldr	r3, [pc, #160]	; (4007cc <gfx_generic_draw_filled_rect+0xc4>)
  40072a:	f9b3 7000 	ldrsh.w	r7, [r3]
  40072e:	42b9      	cmp	r1, r7
  400730:	dc3a      	bgt.n	4007a8 <gfx_generic_draw_filled_rect+0xa0>
			((x + width) <= gfx_min_x) ||
  400732:	4b27      	ldr	r3, [pc, #156]	; (4007d0 <gfx_generic_draw_filled_rect+0xc8>)
  400734:	f9b3 3000 	ldrsh.w	r3, [r3]
  400738:	1942      	adds	r2, r0, r5
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
  40073a:	429a      	cmp	r2, r3
  40073c:	dd34      	ble.n	4007a8 <gfx_generic_draw_filled_rect+0xa0>
			((y + height) <= gfx_min_y)) {
  40073e:	4a25      	ldr	r2, [pc, #148]	; (4007d4 <gfx_generic_draw_filled_rect+0xcc>)
  400740:	f9b2 2000 	ldrsh.w	r2, [r2]
  400744:	eb01 0e04 	add.w	lr, r1, r4
			((x + width) <= gfx_min_x) ||
  400748:	4596      	cmp	lr, r2
  40074a:	dd2d      	ble.n	4007a8 <gfx_generic_draw_filled_rect+0xa0>
		return;
	}

	/* Clip if outside left X limit. */
	if (x < gfx_min_x) {
  40074c:	4298      	cmp	r0, r3
  40074e:	da03      	bge.n	400758 <gfx_generic_draw_filled_rect+0x50>
		width -= gfx_min_x - x;
  400750:	4405      	add	r5, r0
  400752:	1aed      	subs	r5, r5, r3
  400754:	b22d      	sxth	r5, r5
		x = gfx_min_x;
  400756:	4618      	mov	r0, r3
	}

	/* Clip if outside top Y limit. */
	if (y < gfx_min_y) {
  400758:	4291      	cmp	r1, r2
  40075a:	da03      	bge.n	400764 <gfx_generic_draw_filled_rect+0x5c>
		height -= gfx_min_y - y;
  40075c:	440c      	add	r4, r1
  40075e:	1aa4      	subs	r4, r4, r2
  400760:	b224      	sxth	r4, r4
		y = gfx_min_y;
  400762:	4611      	mov	r1, r2
	}
#endif

	/*  Compute bottom right point. */
	x2 = x + width - 1;
  400764:	fa1f fc80 	uxth.w	ip, r0
  400768:	eb0c 0205 	add.w	r2, ip, r5
  40076c:	3a01      	subs	r2, #1
  40076e:	b212      	sxth	r2, r2
	y2 = y + height - 1;
  400770:	fa1f fe81 	uxth.w	lr, r1
  400774:	eb0e 0304 	add.w	r3, lr, r4
  400778:	3b01      	subs	r3, #1
  40077a:	b21b      	sxth	r3, r3

#ifdef CONF_GFX_USE_CLIPPING
	/* Clip if outside right X limit. */
	if (x2 > gfx_max_x) {
  40077c:	4296      	cmp	r6, r2
  40077e:	da04      	bge.n	40078a <gfx_generic_draw_filled_rect+0x82>
		x2 = gfx_max_x;
		width = x2 - x + 1;
  400780:	1c75      	adds	r5, r6, #1
  400782:	eba5 050c 	sub.w	r5, r5, ip
  400786:	b22d      	sxth	r5, r5
		x2 = gfx_max_x;
  400788:	4632      	mov	r2, r6
	}

	/* Clip if outside bottom Y limit. */
	if (y2 > gfx_max_y) {
  40078a:	429f      	cmp	r7, r3
  40078c:	da04      	bge.n	400798 <gfx_generic_draw_filled_rect+0x90>
		y2 = gfx_max_y;
		height = y2 - y + 1;
  40078e:	1c7c      	adds	r4, r7, #1
  400790:	eba4 040e 	sub.w	r4, r4, lr
  400794:	b224      	sxth	r4, r4
		y2 = gfx_max_y;
  400796:	463b      	mov	r3, r7
	}
#endif

	/* Set up draw area and duplicate pixel color until area is full. */
	gfx_set_limits(x, y, x2, y2);
  400798:	4e0f      	ldr	r6, [pc, #60]	; (4007d8 <gfx_generic_draw_filled_rect+0xd0>)
  40079a:	47b0      	blx	r6
	gfx_duplicate_pixel(color, (uint32_t)width * height);
  40079c:	fb04 f105 	mul.w	r1, r4, r5
  4007a0:	f8bd 0018 	ldrh.w	r0, [sp, #24]
  4007a4:	4b0d      	ldr	r3, [pc, #52]	; (4007dc <gfx_generic_draw_filled_rect+0xd4>)
  4007a6:	4798      	blx	r3
  4007a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		width = -width;
  4007aa:	b293      	uxth	r3, r2
  4007ac:	425d      	negs	r5, r3
  4007ae:	b22d      	sxth	r5, r5
		x -= width - 1;
  4007b0:	3001      	adds	r0, #1
  4007b2:	4418      	add	r0, r3
  4007b4:	b200      	sxth	r0, r0
  4007b6:	e7b0      	b.n	40071a <gfx_generic_draw_filled_rect+0x12>
		height = -height;
  4007b8:	b2a3      	uxth	r3, r4
  4007ba:	425c      	negs	r4, r3
  4007bc:	b224      	sxth	r4, r4
		y -= height - 1;
  4007be:	3101      	adds	r1, #1
  4007c0:	4419      	add	r1, r3
  4007c2:	b209      	sxth	r1, r1
  4007c4:	e7ab      	b.n	40071e <gfx_generic_draw_filled_rect+0x16>
  4007c6:	4770      	bx	lr
  4007c8:	20406dae 	.word	0x20406dae
  4007cc:	20406db2 	.word	0x20406db2
  4007d0:	20406db0 	.word	0x20406db0
  4007d4:	20406db4 	.word	0x20406db4
  4007d8:	00401661 	.word	0x00401661
  4007dc:	004016d5 	.word	0x004016d5

004007e0 <gfx_ili9488_set_orientation>:
gfx_coord_t gfx_height, gfx_width;
gfx_coord_t gfx_min_x, gfx_min_y;
gfx_coord_t gfx_max_x, gfx_max_y;

void gfx_ili9488_set_orientation(uint8_t flags)
{
  4007e0:	b510      	push	{r4, lr}
  4007e2:	4604      	mov	r4, r0
	ili9488_set_orientation(flags);
  4007e4:	4b11      	ldr	r3, [pc, #68]	; (40082c <gfx_ili9488_set_orientation+0x4c>)
  4007e6:	4798      	blx	r3

	/* Switch width and height if XY is switched. */
	if ((flags & GFX_SWITCH_XY) != 0x00) {
  4007e8:	f014 0f04 	tst.w	r4, #4
  4007ec:	d114      	bne.n	400818 <gfx_ili9488_set_orientation+0x38>
		gfx_width = ILI9488_SWITCH_XY_WIDTH;
		gfx_height = ILI9488_SWITCH_XY_HEIGHT;
	} else {
		gfx_width = ILI9488_SWITCH_XY_HEIGHT;
  4007ee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  4007f2:	4b0f      	ldr	r3, [pc, #60]	; (400830 <gfx_ili9488_set_orientation+0x50>)
  4007f4:	801a      	strh	r2, [r3, #0]
		gfx_height = ILI9488_SWITCH_XY_WIDTH;
  4007f6:	f44f 72a0 	mov.w	r2, #320	; 0x140
  4007fa:	4b0e      	ldr	r3, [pc, #56]	; (400834 <gfx_ili9488_set_orientation+0x54>)
  4007fc:	801a      	strh	r2, [r3, #0]
		//gfx_height = ILI9488_SWITCH_XY_HEIGHT;
	}

#ifdef CONF_GFX_USE_CLIPPING
	/* Reset clipping region. */
	gfx_set_clipping(0, 0, gfx_width - 1, gfx_height - 1);
  4007fe:	4b0d      	ldr	r3, [pc, #52]	; (400834 <gfx_ili9488_set_orientation+0x54>)
  400800:	881b      	ldrh	r3, [r3, #0]
  400802:	3b01      	subs	r3, #1
  400804:	4a0a      	ldr	r2, [pc, #40]	; (400830 <gfx_ili9488_set_orientation+0x50>)
  400806:	8812      	ldrh	r2, [r2, #0]
  400808:	3a01      	subs	r2, #1
  40080a:	b21b      	sxth	r3, r3
  40080c:	b212      	sxth	r2, r2
  40080e:	2100      	movs	r1, #0
  400810:	4608      	mov	r0, r1
  400812:	4c09      	ldr	r4, [pc, #36]	; (400838 <gfx_ili9488_set_orientation+0x58>)
  400814:	47a0      	blx	r4
  400816:	bd10      	pop	{r4, pc}
		gfx_width = ILI9488_SWITCH_XY_WIDTH;
  400818:	f44f 72a0 	mov.w	r2, #320	; 0x140
  40081c:	4b04      	ldr	r3, [pc, #16]	; (400830 <gfx_ili9488_set_orientation+0x50>)
  40081e:	801a      	strh	r2, [r3, #0]
		gfx_height = ILI9488_SWITCH_XY_HEIGHT;
  400820:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  400824:	4b03      	ldr	r3, [pc, #12]	; (400834 <gfx_ili9488_set_orientation+0x54>)
  400826:	801a      	strh	r2, [r3, #0]
  400828:	e7e9      	b.n	4007fe <gfx_ili9488_set_orientation+0x1e>
  40082a:	bf00      	nop
  40082c:	00401689 	.word	0x00401689
  400830:	20406dac 	.word	0x20406dac
  400834:	20406db6 	.word	0x20406db6
  400838:	004006b5 	.word	0x004006b5

0040083c <gfx_ili9488_init>:
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
	LCD_MULTI_WD(us_data, size);
}

void gfx_ili9488_init(void)
{
  40083c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400840:	b086      	sub	sp, #24
	struct ili9488_opt_t g_ili9488_display_opt;

	/* Initialize globals */
	gfx_width = ILI9488_LCD_WIDTH;
  400842:	4d21      	ldr	r5, [pc, #132]	; (4008c8 <gfx_ili9488_init+0x8c>)
  400844:	f44f 72a0 	mov.w	r2, #320	; 0x140
  400848:	802a      	strh	r2, [r5, #0]
	gfx_height = ILI9488_LCD_HEIGHT;
  40084a:	4e20      	ldr	r6, [pc, #128]	; (4008cc <gfx_ili9488_init+0x90>)
  40084c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  400850:	8033      	strh	r3, [r6, #0]

	/* Initialize display parameter */
	g_ili9488_display_opt.ul_width= ILI9488_LCD_WIDTH;
  400852:	9202      	str	r2, [sp, #8]
	g_ili9488_display_opt.ul_height = ILI9488_LCD_HEIGHT;
  400854:	9303      	str	r3, [sp, #12]
	g_ili9488_display_opt.foreground_color= COLOR_WHITE;
  400856:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  40085a:	9304      	str	r3, [sp, #16]
	g_ili9488_display_opt.background_color = COLOR_BLACK;
  40085c:	2400      	movs	r4, #0
  40085e:	9405      	str	r4, [sp, #20]

	ili9488_init(&g_ili9488_display_opt);
  400860:	a802      	add	r0, sp, #8
  400862:	4b1b      	ldr	r3, [pc, #108]	; (4008d0 <gfx_ili9488_init+0x94>)
  400864:	4798      	blx	r3
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  400866:	f8df 8088 	ldr.w	r8, [pc, #136]	; 4008f0 <gfx_ili9488_init+0xb4>
  40086a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40086e:	4640      	mov	r0, r8
  400870:	4b18      	ldr	r3, [pc, #96]	; (4008d4 <gfx_ili9488_init+0x98>)
  400872:	4798      	blx	r3

/* Define EBI access for ILI9488 16-bit System Interface.*/
#ifdef ILI9488_EBIMODE
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  400874:	f04f 47c6 	mov.w	r7, #1660944384	; 0x63000000
  400878:	2353      	movs	r3, #83	; 0x53
  40087a:	803b      	strh	r3, [r7, #0]
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  40087c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400880:	4640      	mov	r0, r8
  400882:	4b15      	ldr	r3, [pc, #84]	; (4008d8 <gfx_ili9488_init+0x9c>)
  400884:	4798      	blx	r3
		*(volatile uint16_t *)(BOARD_ILI9488_ADDR) = lcd_data;
	}
	static inline void LCD_MULTI_WD(const uint16_t *lcd_data, uint32_t size)
	{
		while(size--) {
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  400886:	2324      	movs	r3, #36	; 0x24
  400888:	803b      	strh	r3, [r7, #0]
	
	/* Attempt to make display brighter :( */ 
	ili9488_color_t param = 0x24;
	ili9488_write_register(ILI9488_CMD_WRITE_CTRL_DISPLAY, &param, 1); 
	ili9488_write_brightness(0xFFFF);
  40088a:	f64f 70ff 	movw	r0, #65535	; 0xffff
  40088e:	4b13      	ldr	r3, [pc, #76]	; (4008dc <gfx_ili9488_init+0xa0>)
  400890:	4798      	blx	r3

	ili9488_display_on();
  400892:	4b13      	ldr	r3, [pc, #76]	; (4008e0 <gfx_ili9488_init+0xa4>)
  400894:	4798      	blx	r3

	/* Set clipping area to whole screen initially */
	gfx_set_clipping(0, 0, gfx_width, gfx_height);
  400896:	f9b6 3000 	ldrsh.w	r3, [r6]
  40089a:	f9b5 2000 	ldrsh.w	r2, [r5]
  40089e:	4621      	mov	r1, r4
  4008a0:	4620      	mov	r0, r4
  4008a2:	4f10      	ldr	r7, [pc, #64]	; (4008e4 <gfx_ili9488_init+0xa8>)
  4008a4:	47b8      	blx	r7

	gfx_set_orientation(GFX_FLIP_Y);
  4008a6:	2002      	movs	r0, #2
  4008a8:	4b0f      	ldr	r3, [pc, #60]	; (4008e8 <gfx_ili9488_init+0xac>)
  4008aa:	4798      	blx	r3
	gfx_draw_filled_rect(0, 0, gfx_width, gfx_height, g_ili9488_display_opt.background_color);			
  4008ac:	f9b6 3000 	ldrsh.w	r3, [r6]
  4008b0:	f9b5 2000 	ldrsh.w	r2, [r5]
  4008b4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
  4008b8:	9100      	str	r1, [sp, #0]
  4008ba:	4621      	mov	r1, r4
  4008bc:	4620      	mov	r0, r4
  4008be:	4c0b      	ldr	r4, [pc, #44]	; (4008ec <gfx_ili9488_init+0xb0>)
  4008c0:	47a0      	blx	r4
}
  4008c2:	b006      	add	sp, #24
  4008c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4008c8:	20406dac 	.word	0x20406dac
  4008cc:	20406db6 	.word	0x20406db6
  4008d0:	004014d5 	.word	0x004014d5
  4008d4:	00401e8d 	.word	0x00401e8d
  4008d8:	00401e89 	.word	0x00401e89
  4008dc:	00401645 	.word	0x00401645
  4008e0:	00401445 	.word	0x00401445
  4008e4:	004006b5 	.word	0x004006b5
  4008e8:	004007e1 	.word	0x004007e1
  4008ec:	00400709 	.word	0x00400709
  4008f0:	400e1200 	.word	0x400e1200

004008f4 <lcd_init>:
#include "LCDLib.h"
#include "asf.h"

/*********************************** Public Functions Start ***********************************/
void lcd_init(void)
{
  4008f4:	b508      	push	{r3, lr}
	gfx_init();
  4008f6:	4b02      	ldr	r3, [pc, #8]	; (400900 <lcd_init+0xc>)
  4008f8:	4798      	blx	r3
	mxt_init();
  4008fa:	4b02      	ldr	r3, [pc, #8]	; (400904 <lcd_init+0x10>)
  4008fc:	4798      	blx	r3
  4008fe:	bd08      	pop	{r3, pc}
  400900:	0040083d 	.word	0x0040083d
  400904:	00400909 	.word	0x00400909

00400908 <mxt_init>:
	else 
		return false; 
}

void mxt_init(void)
{
  400908:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40090c:	b09f      	sub	sp, #124	; 0x7c
	enum status_code status;

	/* T8 configuration object data */
	uint8_t t8_object[] = {
  40090e:	4c55      	ldr	r4, [pc, #340]	; (400a64 <mxt_init+0x15c>)
  400910:	ab1b      	add	r3, sp, #108	; 0x6c
  400912:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  400916:	c303      	stmia	r3!, {r0, r1}
  400918:	801a      	strh	r2, [r3, #0]
		0x0d, 0x00, 0x05, 0x0a, 0x4b, 0x00, 0x00,
		0x00, 0x32, 0x19
	};

	/* T9 configuration object data */
	uint8_t t9_object[] = {
  40091a:	ad12      	add	r5, sp, #72	; 0x48
  40091c:	f104 060c 	add.w	r6, r4, #12
  400920:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  400922:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  400924:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  400926:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  400928:	6833      	ldr	r3, [r6, #0]
  40092a:	602b      	str	r3, [r5, #0]
		0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x02,
		0x02
	};

	/* T46 configuration object data */
	uint8_t t46_object[] = {
  40092c:	ab0f      	add	r3, sp, #60	; 0x3c
  40092e:	f104 0230 	add.w	r2, r4, #48	; 0x30
  400932:	ca07      	ldmia	r2, {r0, r1, r2}
  400934:	c303      	stmia	r3!, {r0, r1}
  400936:	701a      	strb	r2, [r3, #0]
		0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x03,
		0x00, 0x00
	};
	
	/* T56 configuration object data */
	uint8_t t56_object[] = {
  400938:	ad06      	add	r5, sp, #24
  40093a:	343c      	adds	r4, #60	; 0x3c
  40093c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  40093e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  400940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  400942:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  400944:	6823      	ldr	r3, [r4, #0]
  400946:	702b      	strb	r3, [r5, #0]
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00
	};

	/* TWI configuration */
	twihs_master_options_t twi_opt = {
  400948:	2500      	movs	r5, #0
  40094a:	9503      	str	r5, [sp, #12]
  40094c:	9505      	str	r5, [sp, #20]
  40094e:	4b46      	ldr	r3, [pc, #280]	; (400a68 <mxt_init+0x160>)
  400950:	9304      	str	r3, [sp, #16]
  400952:	274a      	movs	r7, #74	; 0x4a
  400954:	f88d 7014 	strb.w	r7, [sp, #20]
		.speed = MXT_TWI_SPEED,
		.chip  = MAXTOUCH_TWI_ADDRESS,
	};
	
	/* Configure IRQ pin for MaxTouch */
	pio_configure(PIOD, PIO_INPUT, PIO_PD28, PIO_PULLUP);
  400958:	2301      	movs	r3, #1
  40095a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40095e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400962:	4842      	ldr	r0, [pc, #264]	; (400a6c <mxt_init+0x164>)
  400964:	4c42      	ldr	r4, [pc, #264]	; (400a70 <mxt_init+0x168>)
  400966:	47a0      	blx	r4
typedef twihs_packet_t twihs_package_t;

static inline uint32_t twihs_master_setup(twihs_master_t p_twihs,
		twihs_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
  400968:	4b42      	ldr	r3, [pc, #264]	; (400a74 <mxt_init+0x16c>)
  40096a:	9303      	str	r3, [sp, #12]
	p_opt->smbus      = 0;
  40096c:	f88d 5015 	strb.w	r5, [sp, #21]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400970:	2013      	movs	r0, #19
  400972:	4b41      	ldr	r3, [pc, #260]	; (400a78 <mxt_init+0x170>)
  400974:	4798      	blx	r3
#endif		
	} else {
		// Do Nothing
	}
#endif
	return (twihs_master_init(p_twihs, p_opt));
  400976:	4e41      	ldr	r6, [pc, #260]	; (400a7c <mxt_init+0x174>)
  400978:	a903      	add	r1, sp, #12
  40097a:	4630      	mov	r0, r6
  40097c:	4b40      	ldr	r3, [pc, #256]	; (400a80 <mxt_init+0x178>)
  40097e:	4798      	blx	r3

	status = (enum status_code)twihs_master_setup(MAXTOUCH_TWI_INTERFACE, &twi_opt);
	Assert(status == STATUS_OK);

	/* Initialize the maXTouch device */
	status = mxt_init_device(&device, MAXTOUCH_TWI_INTERFACE,
  400980:	4c40      	ldr	r4, [pc, #256]	; (400a84 <mxt_init+0x17c>)
  400982:	237c      	movs	r3, #124	; 0x7c
  400984:	463a      	mov	r2, r7
  400986:	4631      	mov	r1, r6
  400988:	4620      	mov	r0, r4
  40098a:	4e3f      	ldr	r6, [pc, #252]	; (400a88 <mxt_init+0x180>)
  40098c:	47b0      	blx	r6
			MAXTOUCH_TWI_ADDRESS, MAXTOUCH_XPRO_CHG_PIO);
	Assert(status == STATUS_OK);

	/* Issue soft reset of maXTouch device by writing a non-zero value to
	 * the reset register */
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  40098e:	462a      	mov	r2, r5
  400990:	2106      	movs	r1, #6
  400992:	4620      	mov	r0, r4
  400994:	4e3d      	ldr	r6, [pc, #244]	; (400a8c <mxt_init+0x184>)
  400996:	47b0      	blx	r6
  400998:	2201      	movs	r2, #1
  40099a:	4601      	mov	r1, r0
  40099c:	4620      	mov	r0, r4
  40099e:	4f3c      	ldr	r7, [pc, #240]	; (400a90 <mxt_init+0x188>)
  4009a0:	47b8      	blx	r7
			MXT_GEN_COMMANDPROCESSOR_T6, 0)
			+ MXT_GEN_COMMANDPROCESSOR_RESET, 0x01);

	/* Wait for the reset of the device to complete */
	delay_ms(MXT_RESET_TIME);
  4009a2:	483c      	ldr	r0, [pc, #240]	; (400a94 <mxt_init+0x18c>)
  4009a4:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 400aa0 <mxt_init+0x198>
  4009a8:	47c8      	blx	r9

	// Write data to configuration registers in T7 configuration object 
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  4009aa:	462a      	mov	r2, r5
  4009ac:	2107      	movs	r1, #7
  4009ae:	4620      	mov	r0, r4
  4009b0:	47b0      	blx	r6
  4009b2:	2220      	movs	r2, #32
  4009b4:	4601      	mov	r1, r0
  4009b6:	4620      	mov	r0, r4
  4009b8:	47b8      	blx	r7
			MXT_GEN_POWERCONFIG_T7, 0) + 0, 0x20);
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  4009ba:	462a      	mov	r2, r5
  4009bc:	2107      	movs	r1, #7
  4009be:	4620      	mov	r0, r4
  4009c0:	47b0      	blx	r6
  4009c2:	1c41      	adds	r1, r0, #1
  4009c4:	2210      	movs	r2, #16
  4009c6:	b289      	uxth	r1, r1
  4009c8:	4620      	mov	r0, r4
  4009ca:	47b8      	blx	r7
			MXT_GEN_POWERCONFIG_T7, 0) + 1, 0x10);
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  4009cc:	462a      	mov	r2, r5
  4009ce:	2107      	movs	r1, #7
  4009d0:	4620      	mov	r0, r4
  4009d2:	47b0      	blx	r6
  4009d4:	1c81      	adds	r1, r0, #2
  4009d6:	224b      	movs	r2, #75	; 0x4b
  4009d8:	b289      	uxth	r1, r1
  4009da:	4620      	mov	r0, r4
  4009dc:	47b8      	blx	r7
			MXT_GEN_POWERCONFIG_T7, 0) + 2, 0x4b);
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  4009de:	462a      	mov	r2, r5
  4009e0:	2107      	movs	r1, #7
  4009e2:	4620      	mov	r0, r4
  4009e4:	47b0      	blx	r6
  4009e6:	1cc1      	adds	r1, r0, #3
  4009e8:	2284      	movs	r2, #132	; 0x84
  4009ea:	b289      	uxth	r1, r1
  4009ec:	4620      	mov	r0, r4
  4009ee:	47b8      	blx	r7
			MXT_GEN_POWERCONFIG_T7, 0) + 3, 0x84);

	// Write predefined configuration data to configuration objects 
	mxt_write_config_object(&device, mxt_get_object_address(&device,
  4009f0:	462a      	mov	r2, r5
  4009f2:	2108      	movs	r1, #8
  4009f4:	4620      	mov	r0, r4
  4009f6:	47b0      	blx	r6
  4009f8:	aa1b      	add	r2, sp, #108	; 0x6c
  4009fa:	4601      	mov	r1, r0
  4009fc:	4620      	mov	r0, r4
  4009fe:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 400aa4 <mxt_init+0x19c>
  400a02:	47c0      	blx	r8
			MXT_GEN_ACQUISITIONCONFIG_T8, 0), &t8_object);
	mxt_write_config_object(&device, mxt_get_object_address(&device,
  400a04:	462a      	mov	r2, r5
  400a06:	2109      	movs	r1, #9
  400a08:	4620      	mov	r0, r4
  400a0a:	47b0      	blx	r6
  400a0c:	aa12      	add	r2, sp, #72	; 0x48
  400a0e:	4601      	mov	r1, r0
  400a10:	4620      	mov	r0, r4
  400a12:	47c0      	blx	r8
			MXT_TOUCH_MULTITOUCHSCREEN_T9, 0), &t9_object);
	mxt_write_config_object(&device, mxt_get_object_address(&device,
  400a14:	462a      	mov	r2, r5
  400a16:	212e      	movs	r1, #46	; 0x2e
  400a18:	4620      	mov	r0, r4
  400a1a:	47b0      	blx	r6
  400a1c:	aa0f      	add	r2, sp, #60	; 0x3c
  400a1e:	4601      	mov	r1, r0
  400a20:	4620      	mov	r0, r4
  400a22:	47c0      	blx	r8
			MXT_SPT_CTE_CONFIGURATION_T46, 0), &t46_object);
	mxt_write_config_object(&device, mxt_get_object_address(&device,
  400a24:	462a      	mov	r2, r5
  400a26:	2138      	movs	r1, #56	; 0x38
  400a28:	4620      	mov	r0, r4
  400a2a:	47b0      	blx	r6
  400a2c:	aa06      	add	r2, sp, #24
  400a2e:	4601      	mov	r1, r0
  400a30:	4620      	mov	r0, r4
  400a32:	47c0      	blx	r8
			MXT_PROCI_SHIELDLESS_T56, 0), &t56_object);

	// Issue recalibration command to maXTouch device by writing a non-zero
	 // value to the calibrate register 
	mxt_write_config_reg(&device, mxt_get_object_address(&device, MXT_GEN_COMMANDPROCESSOR_T6, 0) + MXT_GEN_COMMANDPROCESSOR_CALIBRATE, 0x01); 
  400a34:	462a      	mov	r2, r5
  400a36:	2106      	movs	r1, #6
  400a38:	4620      	mov	r0, r4
  400a3a:	47b0      	blx	r6
  400a3c:	1c81      	adds	r1, r0, #2
  400a3e:	2201      	movs	r2, #1
  400a40:	b289      	uxth	r1, r1
  400a42:	4620      	mov	r0, r4
  400a44:	47b8      	blx	r7
	
	delay_ms(100); 
  400a46:	4814      	ldr	r0, [pc, #80]	; (400a98 <mxt_init+0x190>)
  400a48:	47c8      	blx	r9
  400a4a:	f44f 74af 	mov.w	r4, #350	; 0x15e
		mxt_read_message(data, &message);
  400a4e:	4e0d      	ldr	r6, [pc, #52]	; (400a84 <mxt_init+0x17c>)
  400a50:	4d12      	ldr	r5, [pc, #72]	; (400a9c <mxt_init+0x194>)
  400a52:	4669      	mov	r1, sp
  400a54:	4630      	mov	r0, r6
  400a56:	47a8      	blx	r5
	} while (--count);
  400a58:	3c01      	subs	r4, #1
  400a5a:	d1fa      	bne.n	400a52 <mxt_init+0x14a>
	
	// Make chg pin high 
	mxt_make_highchg(&device);
}
  400a5c:	b01f      	add	sp, #124	; 0x7c
  400a5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400a62:	bf00      	nop
  400a64:	00405d40 	.word	0x00405d40
  400a68:	00061a80 	.word	0x00061a80
  400a6c:	400e1400 	.word	0x400e1400
  400a70:	00401f81 	.word	0x00401f81
  400a74:	08f0d180 	.word	0x08f0d180
  400a78:	0040231d 	.word	0x0040231d
  400a7c:	40018000 	.word	0x40018000
  400a80:	00401935 	.word	0x00401935
  400a84:	20400a48 	.word	0x20400a48
  400a88:	00400db1 	.word	0x00400db1
  400a8c:	00401049 	.word	0x00401049
  400a90:	00401101 	.word	0x00401101
  400a94:	003228d8 	.word	0x003228d8
  400a98:	004d2b25 	.word	0x004d2b25
  400a9c:	00401149 	.word	0x00401149
  400aa0:	20400001 	.word	0x20400001
  400aa4:	00401089 	.word	0x00401089

00400aa8 <Yin_init>:
/**
 * Initialise the Yin pitch detection object
 * @param bufferSize Length of the audio buffer to analyse
 * @param threshold  Allowed uncertainty (e.g 0.05 will return a pitch with ~95% probability)
 */
void Yin_init(int16_t bufferSize, float threshold){
  400aa8:	b538      	push	{r3, r4, r5, lr}
	/* Initialise the fields of the Yin structure passed in */
	yin.bufferSize = bufferSize;
  400aaa:	4b0f      	ldr	r3, [pc, #60]	; (400ae8 <Yin_init+0x40>)
  400aac:	8018      	strh	r0, [r3, #0]
	yin.halfBufferSize = bufferSize / 2;
  400aae:	4604      	mov	r4, r0
  400ab0:	2800      	cmp	r0, #0
  400ab2:	bfb8      	it	lt
  400ab4:	1c44      	addlt	r4, r0, #1
  400ab6:	1064      	asrs	r4, r4, #1
  400ab8:	4d0b      	ldr	r5, [pc, #44]	; (400ae8 <Yin_init+0x40>)
  400aba:	806c      	strh	r4, [r5, #2]
	yin.probability = 0.0;
  400abc:	2300      	movs	r3, #0
  400abe:	60ab      	str	r3, [r5, #8]
	yin.threshold = threshold;
  400ac0:	60e9      	str	r1, [r5, #12]
	
	/* Allocate the autocorellation buffer and initialise it to zero */
	yin.yinBuffer = (float *) malloc(sizeof(float)* yin.halfBufferSize);
  400ac2:	00a0      	lsls	r0, r4, #2
  400ac4:	4b09      	ldr	r3, [pc, #36]	; (400aec <Yin_init+0x44>)
  400ac6:	4798      	blx	r3
  400ac8:	6068      	str	r0, [r5, #4]

	int16_t i;
	for(i = 0; i < yin.halfBufferSize; i++){
  400aca:	2c00      	cmp	r4, #0
  400acc:	dd0a      	ble.n	400ae4 <Yin_init+0x3c>
  400ace:	4603      	mov	r3, r0
  400ad0:	3c01      	subs	r4, #1
  400ad2:	b2a4      	uxth	r4, r4
  400ad4:	3401      	adds	r4, #1
  400ad6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
		yin.yinBuffer[i] = 0.0;
  400ada:	2200      	movs	r2, #0
  400adc:	f843 2b04 	str.w	r2, [r3], #4
	for(i = 0; i < yin.halfBufferSize; i++){
  400ae0:	4283      	cmp	r3, r0
  400ae2:	d1fb      	bne.n	400adc <Yin_init+0x34>
  400ae4:	bd38      	pop	{r3, r4, r5, pc}
  400ae6:	bf00      	nop
  400ae8:	20400a68 	.word	0x20400a68
  400aec:	00402f9d 	.word	0x00402f9d

00400af0 <Yin_getPitch>:
/**
 * Runs the Yin pitch detection algortihm
 * @param  buffer Buffer of samples to analyse
 * @return        Fundamental frequency of the signal in Hz. Returns -1 if pitch can't be found
 */
float Yin_getPitch(int16_t* buffer){
  400af0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400af4:	ed2d 8b04 	vpush	{d8-d9}
	int16_t tauEstimate = -1;
	float pitchInHertz = -1;
	
	int16_t i;
	for(i = 0; i < yin.halfBufferSize; i++){
  400af8:	4ba5      	ldr	r3, [pc, #660]	; (400d90 <Yin_getPitch+0x2a0>)
  400afa:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
  400afe:	f1be 0f00 	cmp.w	lr, #0
  400b02:	dd2b      	ble.n	400b5c <Yin_getPitch+0x6c>
		yin.yinBuffer[i] = 0.0;
  400b04:	6859      	ldr	r1, [r3, #4]
  400b06:	f10e 36ff 	add.w	r6, lr, #4294967295
  400b0a:	b2b6      	uxth	r6, r6
  400b0c:	f106 0c01 	add.w	ip, r6, #1
  400b10:	eb01 048c 	add.w	r4, r1, ip, lsl #2
  400b14:	460b      	mov	r3, r1
  400b16:	2200      	movs	r2, #0
  400b18:	f843 2b04 	str.w	r2, [r3], #4
	for(i = 0; i < yin.halfBufferSize; i++){
  400b1c:	42a3      	cmp	r3, r4
  400b1e:	d1fb      	bne.n	400b18 <Yin_getPitch+0x28>
  400b20:	4607      	mov	r7, r0
  400b22:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
  400b26:	eb00 0646 	add.w	r6, r0, r6, lsl #1
  400b2a:	1e82      	subs	r2, r0, #2
		yin.yinBuffer[i] = 0.0;
  400b2c:	463c      	mov	r4, r7
			delta = buffer[i] - buffer[i + tau];
  400b2e:	f934 5b02 	ldrsh.w	r5, [r4], #2
  400b32:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
  400b36:	1b5b      	subs	r3, r3, r5
  400b38:	ee07 3a90 	vmov	s15, r3
  400b3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			yin.yinBuffer[tau] += delta * delta;
  400b40:	ee67 7aa7 	vmul.f32	s15, s15, s15
  400b44:	ed91 7a00 	vldr	s14, [r1]
  400b48:	ee77 7a27 	vadd.f32	s15, s14, s15
  400b4c:	edc1 7a00 	vstr	s15, [r1]
		for(i = 0; i < yin.halfBufferSize; i++){
  400b50:	42b2      	cmp	r2, r6
  400b52:	d1ec      	bne.n	400b2e <Yin_getPitch+0x3e>
  400b54:	3702      	adds	r7, #2
  400b56:	3104      	adds	r1, #4
	for(tau = 0 ; tau < yin.halfBufferSize; tau++){
  400b58:	4567      	cmp	r7, ip
  400b5a:	d1e6      	bne.n	400b2a <Yin_getPitch+0x3a>
	yin.yinBuffer[0] = 1;
  400b5c:	4b8c      	ldr	r3, [pc, #560]	; (400d90 <Yin_getPitch+0x2a0>)
  400b5e:	6859      	ldr	r1, [r3, #4]
  400b60:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
  400b64:	600b      	str	r3, [r1, #0]
	for (tau = 1; tau < yin.halfBufferSize; tau++) {
  400b66:	f1be 0f01 	cmp.w	lr, #1
  400b6a:	dd15      	ble.n	400b98 <Yin_getPitch+0xa8>
  400b6c:	1d0a      	adds	r2, r1, #4
  400b6e:	ed9f 7a89 	vldr	s14, [pc, #548]	; 400d94 <Yin_getPitch+0x2a4>
  400b72:	2301      	movs	r3, #1
		runningSum += yin.yinBuffer[tau];
  400b74:	edd2 6a00 	vldr	s13, [r2]
  400b78:	ee37 7a26 	vadd.f32	s14, s14, s13
		yin.yinBuffer[tau] *= tau / runningSum;
  400b7c:	ee07 3a90 	vmov	s15, r3
  400b80:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
  400b84:	eec6 7a07 	vdiv.f32	s15, s12, s14
  400b88:	ee67 7aa6 	vmul.f32	s15, s15, s13
  400b8c:	ece2 7a01 	vstmia	r2!, {s15}
  400b90:	3301      	adds	r3, #1
  400b92:	b21b      	sxth	r3, r3
	for (tau = 1; tau < yin.halfBufferSize; tau++) {
  400b94:	4573      	cmp	r3, lr
  400b96:	d1ed      	bne.n	400b74 <Yin_getPitch+0x84>
	for (tau = 2; tau < yin.halfBufferSize ; tau++) {
  400b98:	f1be 0f02 	cmp.w	lr, #2
  400b9c:	f340 80b7 	ble.w	400d0e <Yin_getPitch+0x21e>
		if (yin.yinBuffer[tau] < yin.threshold) {
  400ba0:	4b7b      	ldr	r3, [pc, #492]	; (400d90 <Yin_getPitch+0x2a0>)
  400ba2:	ed93 7a03 	vldr	s14, [r3, #12]
  400ba6:	edd1 7a02 	vldr	s15, [r1, #8]
  400baa:	eef4 7ac7 	vcmpe.f32	s15, s14
  400bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400bb2:	f100 80aa 	bmi.w	400d0a <Yin_getPitch+0x21a>
  400bb6:	f101 030c 	add.w	r3, r1, #12
  400bba:	2402      	movs	r4, #2
  400bbc:	3401      	adds	r4, #1
  400bbe:	b224      	sxth	r4, r4
	for (tau = 2; tau < yin.halfBufferSize ; tau++) {
  400bc0:	4574      	cmp	r4, lr
  400bc2:	f000 80a6 	beq.w	400d12 <Yin_getPitch+0x222>
		if (yin.yinBuffer[tau] < yin.threshold) {
  400bc6:	ecf3 7a01 	vldmia	r3!, {s15}
  400bca:	eef4 7ac7 	vcmpe.f32	s15, s14
  400bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400bd2:	d5f3      	bpl.n	400bbc <Yin_getPitch+0xcc>
			while (tau + 1 < yin.halfBufferSize && yin.yinBuffer[tau + 1] < yin.yinBuffer[tau]) {
  400bd4:	4672      	mov	r2, lr
  400bd6:	1c63      	adds	r3, r4, #1
  400bd8:	459e      	cmp	lr, r3
  400bda:	dd1a      	ble.n	400c12 <Yin_getPitch+0x122>
  400bdc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  400be0:	ed13 7a01 	vldr	s14, [r3, #-4]
  400be4:	edd3 7a00 	vldr	s15, [r3]
  400be8:	eeb4 7ae7 	vcmpe.f32	s14, s15
  400bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400bf0:	dd0f      	ble.n	400c12 <Yin_getPitch+0x122>
  400bf2:	3401      	adds	r4, #1
  400bf4:	b224      	sxth	r4, r4
  400bf6:	1c63      	adds	r3, r4, #1
  400bf8:	4293      	cmp	r3, r2
  400bfa:	da0a      	bge.n	400c12 <Yin_getPitch+0x122>
  400bfc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  400c00:	ed93 7a00 	vldr	s14, [r3]
  400c04:	ed53 7a01 	vldr	s15, [r3, #-4]
  400c08:	eeb4 7ae7 	vcmpe.f32	s14, s15
  400c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400c10:	d4ef      	bmi.n	400bf2 <Yin_getPitch+0x102>
			yin.probability = 1 - yin.yinBuffer[tau];
  400c12:	eb01 0384 	add.w	r3, r1, r4, lsl #2
  400c16:	ed93 7a00 	vldr	s14, [r3]
  400c1a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  400c1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
  400c22:	4b5b      	ldr	r3, [pc, #364]	; (400d90 <Yin_getPitch+0x2a0>)
  400c24:	edc3 7a02 	vstr	s15, [r3, #8]
	if (tau == yin.halfBufferSize || yin.yinBuffer[tau] >= yin.threshold) {
  400c28:	4574      	cmp	r4, lr
  400c2a:	d072      	beq.n	400d12 <Yin_getPitch+0x222>
  400c2c:	eb01 0384 	add.w	r3, r1, r4, lsl #2
  400c30:	ed93 8a00 	vldr	s16, [r3]
  400c34:	4b56      	ldr	r3, [pc, #344]	; (400d90 <Yin_getPitch+0x2a0>)
  400c36:	edd3 7a03 	vldr	s15, [r3, #12]
  400c3a:	eeb4 8ae7 	vcmpe.f32	s16, s15
  400c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400c42:	da66      	bge.n	400d12 <Yin_getPitch+0x222>
	
	/* Step 3: Search through the normalised cumulative mean array and find values that are over the threshold */
	tauEstimate = Yin_absoluteThreshold();
	
	/* Step 5: Interpolate the shift value (tau) to improve the pitch estimate. */
	if(tauEstimate != -1){
  400c44:	f1b4 3fff 	cmp.w	r4, #4294967295
  400c48:	f000 8081 	beq.w	400d4e <Yin_getPitch+0x25e>
	if (tauEstimate < 1) {
  400c4c:	2c00      	cmp	r4, #0
  400c4e:	f340 8084 	ble.w	400d5a <Yin_getPitch+0x26a>
		x0 = tauEstimate - 1;
  400c52:	1e63      	subs	r3, r4, #1
  400c54:	b21b      	sxth	r3, r3
	if (tauEstimate + 1 < yin.halfBufferSize) {
  400c56:	1c62      	adds	r2, r4, #1
  400c58:	4572      	cmp	r2, lr
  400c5a:	f280 8082 	bge.w	400d62 <Yin_getPitch+0x272>
		x2 = tauEstimate + 1;
  400c5e:	b212      	sxth	r2, r2
	if (x0 == tauEstimate) {
  400c60:	429c      	cmp	r4, r3
  400c62:	d05c      	beq.n	400d1e <Yin_getPitch+0x22e>
	else if (x2 == tauEstimate) {
  400c64:	4294      	cmp	r4, r2
  400c66:	d05d      	beq.n	400d24 <Yin_getPitch+0x234>
		s0 = yin.yinBuffer[x0];
  400c68:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  400c6c:	edd3 8a00 	vldr	s17, [r3]
		s2 = yin.yinBuffer[x2];
  400c70:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  400c74:	ed92 9a00 	vldr	s18, [r2]
		betterTau = (float)(tauEstimate) + (s2 - s0) / (2.0 * (2.0 * s1 - s2 - s0));
  400c78:	4d47      	ldr	r5, [pc, #284]	; (400d98 <Yin_getPitch+0x2a8>)
  400c7a:	ee79 7a68 	vsub.f32	s15, s18, s17
  400c7e:	ee17 0a90 	vmov	r0, s15
  400c82:	47a8      	blx	r5
  400c84:	4682      	mov	sl, r0
  400c86:	468b      	mov	fp, r1
  400c88:	ee18 0a10 	vmov	r0, s16
  400c8c:	47a8      	blx	r5
  400c8e:	4e43      	ldr	r6, [pc, #268]	; (400d9c <Yin_getPitch+0x2ac>)
  400c90:	4602      	mov	r2, r0
  400c92:	460b      	mov	r3, r1
  400c94:	47b0      	blx	r6
  400c96:	4680      	mov	r8, r0
  400c98:	4689      	mov	r9, r1
  400c9a:	ee19 0a10 	vmov	r0, s18
  400c9e:	47a8      	blx	r5
  400ca0:	4f3f      	ldr	r7, [pc, #252]	; (400da0 <Yin_getPitch+0x2b0>)
  400ca2:	4602      	mov	r2, r0
  400ca4:	460b      	mov	r3, r1
  400ca6:	4640      	mov	r0, r8
  400ca8:	4649      	mov	r1, r9
  400caa:	47b8      	blx	r7
  400cac:	4680      	mov	r8, r0
  400cae:	4689      	mov	r9, r1
  400cb0:	ee18 0a90 	vmov	r0, s17
  400cb4:	47a8      	blx	r5
  400cb6:	4602      	mov	r2, r0
  400cb8:	460b      	mov	r3, r1
  400cba:	4640      	mov	r0, r8
  400cbc:	4649      	mov	r1, r9
  400cbe:	47b8      	blx	r7
  400cc0:	4602      	mov	r2, r0
  400cc2:	460b      	mov	r3, r1
  400cc4:	47b0      	blx	r6
  400cc6:	4602      	mov	r2, r0
  400cc8:	460b      	mov	r3, r1
  400cca:	4650      	mov	r0, sl
  400ccc:	4659      	mov	r1, fp
  400cce:	4f35      	ldr	r7, [pc, #212]	; (400da4 <Yin_getPitch+0x2b4>)
  400cd0:	47b8      	blx	r7
  400cd2:	4680      	mov	r8, r0
  400cd4:	4689      	mov	r9, r1
  400cd6:	ee07 4a90 	vmov	s15, r4
  400cda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400cde:	ee17 0a90 	vmov	r0, s15
  400ce2:	47a8      	blx	r5
  400ce4:	4602      	mov	r2, r0
  400ce6:	460b      	mov	r3, r1
  400ce8:	4640      	mov	r0, r8
  400cea:	4649      	mov	r1, r9
  400cec:	47b0      	blx	r6
  400cee:	4b2e      	ldr	r3, [pc, #184]	; (400da8 <Yin_getPitch+0x2b8>)
  400cf0:	4798      	blx	r3
  400cf2:	ee07 0a90 	vmov	s15, r0
		pitchInHertz = YIN_SAMPLING_RATE / Yin_parabolicInterpolation(tauEstimate);
  400cf6:	eddf 6a2d 	vldr	s13, [pc, #180]	; 400dac <Yin_getPitch+0x2bc>
  400cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	}
	return pitchInHertz;
}
  400cfe:	ee17 0a10 	vmov	r0, s14
  400d02:	ecbd 8b04 	vpop	{d8-d9}
  400d06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (yin.yinBuffer[tau] < yin.threshold) {
  400d0a:	2402      	movs	r4, #2
  400d0c:	e762      	b.n	400bd4 <Yin_getPitch+0xe4>
	for (tau = 2; tau < yin.halfBufferSize ; tau++) {
  400d0e:	2402      	movs	r4, #2
  400d10:	e78a      	b.n	400c28 <Yin_getPitch+0x138>
		yin.probability = 0;
  400d12:	2200      	movs	r2, #0
  400d14:	4b1e      	ldr	r3, [pc, #120]	; (400d90 <Yin_getPitch+0x2a0>)
  400d16:	609a      	str	r2, [r3, #8]
	float pitchInHertz = -1;
  400d18:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  400d1c:	e7ef      	b.n	400cfe <Yin_getPitch+0x20e>
		x0 = tauEstimate - 1;
  400d1e:	461c      	mov	r4, r3
		x2 = tauEstimate + 1;
  400d20:	4613      	mov	r3, r2
  400d22:	e021      	b.n	400d68 <Yin_getPitch+0x278>
  400d24:	4614      	mov	r4, r2
		if (yin.yinBuffer[tauEstimate] <= yin.yinBuffer[x0]) {
  400d26:	eb01 0284 	add.w	r2, r1, r4, lsl #2
  400d2a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  400d2e:	ed92 7a00 	vldr	s14, [r2]
  400d32:	edd1 7a00 	vldr	s15, [r1]
  400d36:	eeb4 7ae7 	vcmpe.f32	s14, s15
  400d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			betterTau = (float)tauEstimate;
  400d3e:	bf94      	ite	ls
  400d40:	ee07 4a90 	vmovls	s15, r4
			betterTau = (float)x0;
  400d44:	ee07 3a90 	vmovhi	s15, r3
  400d48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400d4c:	e7d3      	b.n	400cf6 <Yin_getPitch+0x206>
	float pitchInHertz = -1;
  400d4e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
	return pitchInHertz;
  400d52:	e7d4      	b.n	400cfe <Yin_getPitch+0x20e>
		x2 = tauEstimate + 1;
  400d54:	1c63      	adds	r3, r4, #1
  400d56:	b21b      	sxth	r3, r3
  400d58:	e006      	b.n	400d68 <Yin_getPitch+0x278>
	if (tauEstimate + 1 < yin.halfBufferSize) {
  400d5a:	1c63      	adds	r3, r4, #1
  400d5c:	459e      	cmp	lr, r3
  400d5e:	dcf9      	bgt.n	400d54 <Yin_getPitch+0x264>
  400d60:	4623      	mov	r3, r4
	if (x0 == tauEstimate) {
  400d62:	429c      	cmp	r4, r3
  400d64:	d1df      	bne.n	400d26 <Yin_getPitch+0x236>
  400d66:	461c      	mov	r4, r3
		if (yin.yinBuffer[tauEstimate] <= yin.yinBuffer[x2]) {
  400d68:	eb01 0284 	add.w	r2, r1, r4, lsl #2
  400d6c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  400d70:	ed92 7a00 	vldr	s14, [r2]
  400d74:	edd1 7a00 	vldr	s15, [r1]
  400d78:	eeb4 7ae7 	vcmpe.f32	s14, s15
  400d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			betterTau = (float)tauEstimate;
  400d80:	bf94      	ite	ls
  400d82:	ee07 4a90 	vmovls	s15, r4
			betterTau = (float)x2;
  400d86:	ee07 3a90 	vmovhi	s15, r3
  400d8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400d8e:	e7b2      	b.n	400cf6 <Yin_getPitch+0x206>
  400d90:	20400a68 	.word	0x20400a68
  400d94:	00000000 	.word	0x00000000
  400d98:	004029b9 	.word	0x004029b9
  400d9c:	004026fd 	.word	0x004026fd
  400da0:	004026f9 	.word	0x004026f9
  400da4:	00402cb5 	.word	0x00402cb5
  400da8:	00402e85 	.word	0x00402e85
  400dac:	4735a400 	.word	0x4735a400

00400db0 <mxt_init_device>:
 * \param chgpin IOPORT pin instance attached to the maXTouch device's /CHG pin
 * \return Operation result status code
 */
status_code_t mxt_init_device(struct mxt_device *device,
		twihs_master_t interface, uint8_t chip_adr, uint32_t chgpin)
{
  400db0:	b5f0      	push	{r4, r5, r6, r7, lr}
  400db2:	b087      	sub	sp, #28
  400db4:	4604      	mov	r4, r0
  400db6:	460e      	mov	r6, r1
  400db8:	4617      	mov	r7, r2
	int8_t status;

	/* Set TWI interface, TWI address and CHG-pin of the maXTouch device. */
	device->interface = interface;
  400dba:	6081      	str	r1, [r0, #8]
	device->mxt_chip_adr = chip_adr;
  400dbc:	7302      	strb	r2, [r0, #12]
	device->chgpin = chgpin;
  400dbe:	6183      	str	r3, [r0, #24]
	device->handler = NULL;
  400dc0:	2500      	movs	r5, #0
  400dc2:	6105      	str	r5, [r0, #16]
			malloc(sizeof(struct mxt_info_object));
  400dc4:	2007      	movs	r0, #7
  400dc6:	4b9d      	ldr	r3, [pc, #628]	; (40103c <mxt_init_device+0x28c>)
  400dc8:	4798      	blx	r3
	device->info_object = (struct mxt_info_object *)
  400dca:	6020      	str	r0, [r4, #0]
	twihs_package_t packet = {
  400dcc:	9501      	str	r5, [sp, #4]
  400dce:	9505      	str	r5, [sp, #20]
  400dd0:	2302      	movs	r3, #2
  400dd2:	9302      	str	r3, [sp, #8]
  400dd4:	9003      	str	r0, [sp, #12]
  400dd6:	2307      	movs	r3, #7
  400dd8:	9304      	str	r3, [sp, #16]
  400dda:	f88d 7014 	strb.w	r7, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  400dde:	a901      	add	r1, sp, #4
  400de0:	4630      	mov	r0, r6
  400de2:	4b97      	ldr	r3, [pc, #604]	; (401040 <mxt_init_device+0x290>)
  400de4:	4798      	blx	r3
  400de6:	1b40      	subs	r0, r0, r5
  400de8:	bf18      	it	ne
  400dea:	2001      	movne	r0, #1
  400dec:	4240      	negs	r0, r0
	if ((status = mxt_read_id_block(device)) != STATUS_OK) {
  400dee:	b108      	cbz	r0, 400df4 <mxt_init_device+0x44>
	}

	device->multitouch_report_offset = status;

	return STATUS_OK;
}
  400df0:	b007      	add	sp, #28
  400df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			malloc(device->info_object->obj_count *
  400df4:	6825      	ldr	r5, [r4, #0]
  400df6:	79a8      	ldrb	r0, [r5, #6]
  400df8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  400dfc:	0040      	lsls	r0, r0, #1
  400dfe:	4b8f      	ldr	r3, [pc, #572]	; (40103c <mxt_init_device+0x28c>)
  400e00:	4798      	blx	r3
	device->object_list = (struct mxt_object *)
  400e02:	6060      	str	r0, [r4, #4]
	twihs_package_t packet = {
  400e04:	2300      	movs	r3, #0
  400e06:	9301      	str	r3, [sp, #4]
  400e08:	9304      	str	r3, [sp, #16]
  400e0a:	9305      	str	r3, [sp, #20]
  400e0c:	2307      	movs	r3, #7
  400e0e:	f88d 3004 	strb.w	r3, [sp, #4]
  400e12:	2302      	movs	r3, #2
  400e14:	9302      	str	r3, [sp, #8]
  400e16:	9003      	str	r0, [sp, #12]
		.length       = device->info_object->obj_count *
  400e18:	79ab      	ldrb	r3, [r5, #6]
  400e1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  400e1e:	005b      	lsls	r3, r3, #1
	twihs_package_t packet = {
  400e20:	9304      	str	r3, [sp, #16]
  400e22:	7b23      	ldrb	r3, [r4, #12]
  400e24:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  400e28:	a901      	add	r1, sp, #4
  400e2a:	68a0      	ldr	r0, [r4, #8]
  400e2c:	4b84      	ldr	r3, [pc, #528]	; (401040 <mxt_init_device+0x290>)
  400e2e:	4798      	blx	r3
  400e30:	3000      	adds	r0, #0
  400e32:	bf18      	it	ne
  400e34:	2001      	movne	r0, #1
  400e36:	4240      	negs	r0, r0
	if (status != STATUS_OK) {
  400e38:	2800      	cmp	r0, #0
  400e3a:	d1d9      	bne.n	400df0 <mxt_init_device+0x40>
	uint8_t *id_pointer = (uint8_t *)device->info_object;
  400e3c:	6827      	ldr	r7, [r4, #0]
	uint8_t *objects_pointer = (uint8_t *)device->object_list;
  400e3e:	6860      	ldr	r0, [r4, #4]
			(device->info_object->obj_count *
  400e40:	79bb      	ldrb	r3, [r7, #6]
  400e42:	eb03 0643 	add.w	r6, r3, r3, lsl #1
  400e46:	0076      	lsls	r6, r6, #1
	crc_area_size = MXT_ID_BLOCK_SIZE +
  400e48:	3607      	adds	r6, #7
  400e4a:	b2b6      	uxth	r6, r6
  400e4c:	463a      	mov	r2, r7
  400e4e:	3706      	adds	r7, #6
	uint32_t crc_tmp = 0;
  400e50:	2100      	movs	r1, #0
		result ^= crcpoly;
  400e52:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 401044 <mxt_init_device+0x294>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  400e56:	f892 e001 	ldrb.w	lr, [r2, #1]
  400e5a:	7815      	ldrb	r5, [r2, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  400e5c:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
  400e60:	ea85 0141 	eor.w	r1, r5, r1, lsl #1
	if (result & 0x1000000) {
  400e64:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
		result ^= crcpoly;
  400e68:	bf18      	it	ne
  400e6a:	ea81 010c 	eorne.w	r1, r1, ip
  400e6e:	3202      	adds	r2, #2
	for (i = 0; i < MXT_ID_BLOCK_SIZE - 1; i += 2) {
  400e70:	42ba      	cmp	r2, r7
  400e72:	d1f0      	bne.n	400e56 <mxt_init_device+0xa6>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  400e74:	7802      	ldrb	r2, [r0, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  400e76:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400e7a:	ea83 0241 	eor.w	r2, r3, r1, lsl #1
	if (result & 0x1000000) {
  400e7e:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  400e82:	d003      	beq.n	400e8c <mxt_init_device+0xdc>
		result ^= crcpoly;
  400e84:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  400e88:	f082 021b 	eor.w	r2, r2, #27
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  400e8c:	f1a6 0708 	sub.w	r7, r6, #8
  400e90:	2f01      	cmp	r7, #1
  400e92:	dd12      	ble.n	400eba <mxt_init_device+0x10a>
  400e94:	2301      	movs	r3, #1
		result ^= crcpoly;
  400e96:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 401044 <mxt_init_device+0x294>
		crc_tmp = mxt_crc_24(crc_tmp, objects_pointer[i],
  400e9a:	18c1      	adds	r1, r0, r3
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  400e9c:	784d      	ldrb	r5, [r1, #1]
  400e9e:	5cc1      	ldrb	r1, [r0, r3]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  400ea0:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  400ea4:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
	if (result & 0x1000000) {
  400ea8:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		result ^= crcpoly;
  400eac:	bf18      	it	ne
  400eae:	ea82 020e 	eorne.w	r2, r2, lr
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  400eb2:	3302      	adds	r3, #2
  400eb4:	b29b      	uxth	r3, r3
  400eb6:	42bb      	cmp	r3, r7
  400eb8:	dbef      	blt.n	400e9a <mxt_init_device+0xea>
	crc_tmp = mxt_crc_24(crc_tmp,
  400eba:	4430      	add	r0, r6
	result = ((crc << 1u) ^ (uint32_t)data_word);
  400ebc:	f810 3c08 	ldrb.w	r3, [r0, #-8]
  400ec0:	ea83 0242 	eor.w	r2, r3, r2, lsl #1
	if (result & 0x1000000) {
  400ec4:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  400ec8:	d003      	beq.n	400ed2 <mxt_init_device+0x122>
		result ^= crcpoly;
  400eca:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  400ece:	f082 021b 	eor.w	r2, r2, #27
	*crc = (crc_tmp & 0x00FFFFFF);
  400ed2:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	twihs_package_t packet = {
  400ed6:	2300      	movs	r3, #0
  400ed8:	9301      	str	r3, [sp, #4]
  400eda:	9305      	str	r3, [sp, #20]
  400edc:	f88d 6004 	strb.w	r6, [sp, #4]
  400ee0:	0a36      	lsrs	r6, r6, #8
  400ee2:	f88d 6005 	strb.w	r6, [sp, #5]
  400ee6:	2302      	movs	r3, #2
  400ee8:	9302      	str	r3, [sp, #8]
  400eea:	f8cd d00c 	str.w	sp, [sp, #12]
  400eee:	2303      	movs	r3, #3
  400ef0:	9304      	str	r3, [sp, #16]
  400ef2:	7b23      	ldrb	r3, [r4, #12]
  400ef4:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  400ef8:	a901      	add	r1, sp, #4
  400efa:	68a0      	ldr	r0, [r4, #8]
  400efc:	4b50      	ldr	r3, [pc, #320]	; (401040 <mxt_init_device+0x290>)
  400efe:	4798      	blx	r3
  400f00:	b328      	cbz	r0, 400f4e <mxt_init_device+0x19e>
		return ERR_IO_ERROR;
  400f02:	f04f 33ff 	mov.w	r3, #4294967295
	if (crc_calculated != crc_read) {
  400f06:	42ab      	cmp	r3, r5
  400f08:	f040 808b 	bne.w	401022 <mxt_init_device+0x272>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400f0c:	6825      	ldr	r5, [r4, #0]
  400f0e:	79a8      	ldrb	r0, [r5, #6]
  400f10:	b198      	cbz	r0, 400f3a <mxt_init_device+0x18a>
  400f12:	2300      	movs	r3, #0
  400f14:	3301      	adds	r3, #1
  400f16:	b2da      	uxtb	r2, r3
  400f18:	4290      	cmp	r0, r2
  400f1a:	d8fb      	bhi.n	400f14 <mxt_init_device+0x164>
		tot_report_ids += (device->object_list[i].num_report_ids);
  400f1c:	6862      	ldr	r2, [r4, #4]
  400f1e:	1e43      	subs	r3, r0, #1
  400f20:	b2db      	uxtb	r3, r3
  400f22:	3301      	adds	r3, #1
  400f24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  400f28:	eb02 0143 	add.w	r1, r2, r3, lsl #1
  400f2c:	2000      	movs	r0, #0
  400f2e:	7953      	ldrb	r3, [r2, #5]
  400f30:	4418      	add	r0, r3
  400f32:	b2c0      	uxtb	r0, r0
  400f34:	3206      	adds	r2, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400f36:	4291      	cmp	r1, r2
  400f38:	d1f9      	bne.n	400f2e <mxt_init_device+0x17e>
			malloc(sizeof(struct mxt_report_id_map) *
  400f3a:	0040      	lsls	r0, r0, #1
  400f3c:	4b3f      	ldr	r3, [pc, #252]	; (40103c <mxt_init_device+0x28c>)
  400f3e:	4798      	blx	r3
	device->report_id_map = (struct mxt_report_id_map *)
  400f40:	6160      	str	r0, [r4, #20]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400f42:	79ab      	ldrb	r3, [r5, #6]
  400f44:	b173      	cbz	r3, 400f64 <mxt_init_device+0x1b4>
  400f46:	2700      	movs	r7, #0
  400f48:	2601      	movs	r6, #1
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  400f4a:	46be      	mov	lr, r7
  400f4c:	e037      	b.n	400fbe <mxt_init_device+0x20e>
		return ((uint32_t)crc[2] << 16) | ((uint16_t)crc[1] << 8) | crc[0];
  400f4e:	f89d 2002 	ldrb.w	r2, [sp, #2]
  400f52:	f89d 3000 	ldrb.w	r3, [sp]
  400f56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400f5a:	f89d 2001 	ldrb.w	r2, [sp, #1]
  400f5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400f62:	e7d0      	b.n	400f06 <mxt_init_device+0x156>
		return ERR_BAD_DATA;
  400f64:	f06f 0003 	mvn.w	r0, #3
  400f68:	e742      	b.n	400df0 <mxt_init_device+0x40>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  400f6a:	3001      	adds	r0, #1
  400f6c:	b2c0      	uxtb	r0, r0
  400f6e:	6862      	ldr	r2, [r4, #4]
  400f70:	1953      	adds	r3, r2, r5
  400f72:	7919      	ldrb	r1, [r3, #4]
  400f74:	4281      	cmp	r1, r0
  400f76:	d31c      	bcc.n	400fb2 <mxt_init_device+0x202>
			if (device->object_list[i].num_report_ids != 0) {
  400f78:	795b      	ldrb	r3, [r3, #5]
  400f7a:	2b00      	cmp	r3, #0
  400f7c:	d0f5      	beq.n	400f6a <mxt_init_device+0x1ba>
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  400f7e:	6862      	ldr	r2, [r4, #4]
  400f80:	442a      	add	r2, r5
  400f82:	7953      	ldrb	r3, [r2, #5]
  400f84:	2b00      	cmp	r3, #0
  400f86:	d0f0      	beq.n	400f6a <mxt_init_device+0x1ba>
  400f88:	4633      	mov	r3, r6
							device->object_list[i].type;
  400f8a:	7811      	ldrb	r1, [r2, #0]
					device->report_id_map[id_index].object_type =
  400f8c:	6962      	ldr	r2, [r4, #20]
  400f8e:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
					device->report_id_map[id_index].instance = j;
  400f92:	6962      	ldr	r2, [r4, #20]
  400f94:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  400f98:	7050      	strb	r0, [r2, #1]
					id_index++;
  400f9a:	3301      	adds	r3, #1
  400f9c:	b2db      	uxtb	r3, r3
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  400f9e:	6862      	ldr	r2, [r4, #4]
  400fa0:	442a      	add	r2, r5
  400fa2:	1b99      	subs	r1, r3, r6
  400fa4:	f892 c005 	ldrb.w	ip, [r2, #5]
  400fa8:	b2c9      	uxtb	r1, r1
  400faa:	458c      	cmp	ip, r1
  400fac:	d8ed      	bhi.n	400f8a <mxt_init_device+0x1da>
					id_index++;
  400fae:	461e      	mov	r6, r3
  400fb0:	e7db      	b.n	400f6a <mxt_init_device+0x1ba>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400fb2:	3701      	adds	r7, #1
  400fb4:	b2ff      	uxtb	r7, r7
  400fb6:	6823      	ldr	r3, [r4, #0]
  400fb8:	799b      	ldrb	r3, [r3, #6]
  400fba:	429f      	cmp	r7, r3
  400fbc:	d207      	bcs.n	400fce <mxt_init_device+0x21e>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  400fbe:	eb07 0347 	add.w	r3, r7, r7, lsl #1
  400fc2:	005a      	lsls	r2, r3, #1
  400fc4:	4615      	mov	r5, r2
  400fc6:	6863      	ldr	r3, [r4, #4]
  400fc8:	4413      	add	r3, r2
  400fca:	4670      	mov	r0, lr
  400fcc:	e7d4      	b.n	400f78 <mxt_init_device+0x1c8>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400fce:	b35b      	cbz	r3, 401028 <mxt_init_device+0x278>
  400fd0:	4610      	mov	r0, r2
  400fd2:	3b01      	subs	r3, #1
  400fd4:	b2db      	uxtb	r3, r3
  400fd6:	3301      	adds	r3, #1
  400fd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  400fdc:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  400fe0:	2100      	movs	r1, #0
		tot_report_ids += (device->object_list[i].num_report_ids);
  400fe2:	7943      	ldrb	r3, [r0, #5]
  400fe4:	4419      	add	r1, r3
  400fe6:	b2c9      	uxtb	r1, r1
  400fe8:	3006      	adds	r0, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400fea:	4282      	cmp	r2, r0
  400fec:	d1f9      	bne.n	400fe2 <mxt_init_device+0x232>
	for (i = 0; i < tot_rpt_id; ++i) {
  400fee:	b1f1      	cbz	r1, 40102e <mxt_init_device+0x27e>
		if (device->report_id_map[i].object_type == object_type) {
  400ff0:	6962      	ldr	r2, [r4, #20]
  400ff2:	7813      	ldrb	r3, [r2, #0]
  400ff4:	2b09      	cmp	r3, #9
  400ff6:	d00f      	beq.n	401018 <mxt_init_device+0x268>
  400ff8:	2300      	movs	r3, #0
	for (i = 0; i < tot_rpt_id; ++i) {
  400ffa:	3301      	adds	r3, #1
  400ffc:	b2db      	uxtb	r3, r3
  400ffe:	428b      	cmp	r3, r1
  401000:	d00c      	beq.n	40101c <mxt_init_device+0x26c>
		if (device->report_id_map[i].object_type == object_type) {
  401002:	f812 0f02 	ldrb.w	r0, [r2, #2]!
  401006:	2809      	cmp	r0, #9
  401008:	d1f7      	bne.n	400ffa <mxt_init_device+0x24a>
			return i;
  40100a:	b25b      	sxtb	r3, r3
	if (status == -1) {
  40100c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401010:	d010      	beq.n	401034 <mxt_init_device+0x284>
	device->multitouch_report_offset = status;
  401012:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
  401014:	2000      	movs	r0, #0
  401016:	e6eb      	b.n	400df0 <mxt_init_device+0x40>
		if (device->report_id_map[i].object_type == object_type) {
  401018:	2300      	movs	r3, #0
  40101a:	e7f6      	b.n	40100a <mxt_init_device+0x25a>
		return ERR_BAD_DATA;
  40101c:	f06f 0003 	mvn.w	r0, #3
  401020:	e6e6      	b.n	400df0 <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  401022:	f06f 0003 	mvn.w	r0, #3
  401026:	e6e3      	b.n	400df0 <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  401028:	f06f 0003 	mvn.w	r0, #3
  40102c:	e6e0      	b.n	400df0 <mxt_init_device+0x40>
  40102e:	f06f 0003 	mvn.w	r0, #3
  401032:	e6dd      	b.n	400df0 <mxt_init_device+0x40>
  401034:	f06f 0003 	mvn.w	r0, #3
  401038:	e6da      	b.n	400df0 <mxt_init_device+0x40>
  40103a:	bf00      	nop
  40103c:	00402f9d 	.word	0x00402f9d
  401040:	00401969 	.word	0x00401969
  401044:	0080001b 	.word	0x0080001b

00401048 <mxt_get_object_address>:
uint16_t mxt_get_object_address(struct mxt_device *device, uint8_t object_id,
		uint8_t instance)
{
	uint8_t i;

	for (i = 0; i < device->info_object->obj_count; i++) {
  401048:	6803      	ldr	r3, [r0, #0]
  40104a:	799a      	ldrb	r2, [r3, #6]
  40104c:	b1d2      	cbz	r2, 401084 <mxt_get_object_address+0x3c>
{
  40104e:	b410      	push	{r4}
		if (object_id == device->object_list[i].type) {
  401050:	6844      	ldr	r4, [r0, #4]
  401052:	7823      	ldrb	r3, [r4, #0]
  401054:	428b      	cmp	r3, r1
  401056:	d00e      	beq.n	401076 <mxt_get_object_address+0x2e>
  401058:	1da3      	adds	r3, r4, #6
  40105a:	3a01      	subs	r2, #1
  40105c:	b2d2      	uxtb	r2, r2
  40105e:	3201      	adds	r2, #1
  401060:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  401064:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; i++) {
  401068:	4293      	cmp	r3, r2
  40106a:	d009      	beq.n	401080 <mxt_get_object_address+0x38>
		if (object_id == device->object_list[i].type) {
  40106c:	461c      	mov	r4, r3
  40106e:	f813 0b06 	ldrb.w	r0, [r3], #6
  401072:	4288      	cmp	r0, r1
  401074:	d1f8      	bne.n	401068 <mxt_get_object_address+0x20>
			return device->object_list[i].start_address;
  401076:	f8b4 0001 	ldrh.w	r0, [r4, #1]
		}
	}

	return 0;
}
  40107a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40107e:	4770      	bx	lr
	return 0;
  401080:	2000      	movs	r0, #0
  401082:	e7fa      	b.n	40107a <mxt_get_object_address+0x32>
  401084:	2000      	movs	r0, #0
  401086:	4770      	bx	lr

00401088 <mxt_write_config_object>:
 * \param *obj_data Pointer to memory buffer containing object data
 * \result Operation result status code
 */
status_code_t mxt_write_config_object(struct mxt_device *device,
		mxt_memory_adr memory_adr, void *obj_data)
{
  401088:	b530      	push	{r4, r5, lr}
  40108a:	b087      	sub	sp, #28
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  40108c:	2300      	movs	r3, #0
  40108e:	9301      	str	r3, [sp, #4]
  401090:	9304      	str	r3, [sp, #16]
  401092:	9305      	str	r3, [sp, #20]
  401094:	f88d 1004 	strb.w	r1, [sp, #4]
  401098:	0a0b      	lsrs	r3, r1, #8
  40109a:	f88d 3005 	strb.w	r3, [sp, #5]
  40109e:	2302      	movs	r3, #2
  4010a0:	9302      	str	r3, [sp, #8]
  4010a2:	9203      	str	r2, [sp, #12]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4010a4:	6803      	ldr	r3, [r0, #0]
  4010a6:	799a      	ldrb	r2, [r3, #6]
  4010a8:	b1ba      	cbz	r2, 4010da <mxt_write_config_object+0x52>
		if (device->object_list[i].start_address == mem_adr) {
  4010aa:	6844      	ldr	r4, [r0, #4]
  4010ac:	f8b4 3001 	ldrh.w	r3, [r4, #1]
  4010b0:	428b      	cmp	r3, r1
  4010b2:	d00f      	beq.n	4010d4 <mxt_write_config_object+0x4c>
  4010b4:	1da3      	adds	r3, r4, #6
  4010b6:	3a01      	subs	r2, #1
  4010b8:	b2d2      	uxtb	r2, r2
  4010ba:	3201      	adds	r2, #1
  4010bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  4010c0:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4010c4:	4293      	cmp	r3, r2
  4010c6:	d016      	beq.n	4010f6 <mxt_write_config_object+0x6e>
		if (device->object_list[i].start_address == mem_adr) {
  4010c8:	461c      	mov	r4, r3
  4010ca:	3306      	adds	r3, #6
  4010cc:	f8b4 5001 	ldrh.w	r5, [r4, #1]
  4010d0:	428d      	cmp	r5, r1
  4010d2:	d1f7      	bne.n	4010c4 <mxt_write_config_object+0x3c>
			return (device->object_list[i].size + 1);
  4010d4:	78e2      	ldrb	r2, [r4, #3]
  4010d6:	3201      	adds	r2, #1
  4010d8:	b2d2      	uxtb	r2, r2
		.addr[0]      = memory_adr,
		.addr[1]      = memory_adr >> 8,
		.addr_length  = sizeof(mxt_memory_adr),
		.chip         = device->mxt_chip_adr,
		.buffer       = obj_data,
		.length       = mxt_get_object_size(device, memory_adr)
  4010da:	9204      	str	r2, [sp, #16]
	twihs_package_t packet = {
  4010dc:	7b03      	ldrb	r3, [r0, #12]
  4010de:	f88d 3014 	strb.w	r3, [sp, #20]
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  4010e2:	a901      	add	r1, sp, #4
  4010e4:	6880      	ldr	r0, [r0, #8]
  4010e6:	4b05      	ldr	r3, [pc, #20]	; (4010fc <mxt_write_config_object+0x74>)
  4010e8:	4798      	blx	r3
  4010ea:	3000      	adds	r0, #0
  4010ec:	bf18      	it	ne
  4010ee:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}

}
  4010f0:	4240      	negs	r0, r0
  4010f2:	b007      	add	sp, #28
  4010f4:	bd30      	pop	{r4, r5, pc}
	return 0;
  4010f6:	2200      	movs	r2, #0
  4010f8:	e7ef      	b.n	4010da <mxt_write_config_object+0x52>
  4010fa:	bf00      	nop
  4010fc:	00401a15 	.word	0x00401a15

00401100 <mxt_write_config_reg>:
 * \param value Value to be written to register
 * \result Operation result status code
 */
status_code_t mxt_write_config_reg(struct mxt_device *device,
		mxt_memory_adr memory_adr, uint8_t value)
{
  401100:	b500      	push	{lr}
  401102:	b089      	sub	sp, #36	; 0x24
  401104:	f88d 2007 	strb.w	r2, [sp, #7]
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  401108:	2300      	movs	r3, #0
  40110a:	9303      	str	r3, [sp, #12]
  40110c:	9307      	str	r3, [sp, #28]
  40110e:	f88d 100c 	strb.w	r1, [sp, #12]
  401112:	0a09      	lsrs	r1, r1, #8
  401114:	f88d 100d 	strb.w	r1, [sp, #13]
  401118:	2302      	movs	r3, #2
  40111a:	9304      	str	r3, [sp, #16]
  40111c:	f10d 0307 	add.w	r3, sp, #7
  401120:	9305      	str	r3, [sp, #20]
  401122:	2301      	movs	r3, #1
  401124:	9306      	str	r3, [sp, #24]
  401126:	7b03      	ldrb	r3, [r0, #12]
  401128:	f88d 301c 	strb.w	r3, [sp, #28]
		.chip         = device->mxt_chip_adr,
		.buffer       = &value,
		.length       = sizeof(value)
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  40112c:	a903      	add	r1, sp, #12
  40112e:	6880      	ldr	r0, [r0, #8]
  401130:	4b04      	ldr	r3, [pc, #16]	; (401144 <mxt_write_config_reg+0x44>)
  401132:	4798      	blx	r3
  401134:	3000      	adds	r0, #0
  401136:	bf18      	it	ne
  401138:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}
}
  40113a:	4240      	negs	r0, r0
  40113c:	b009      	add	sp, #36	; 0x24
  40113e:	f85d fb04 	ldr.w	pc, [sp], #4
  401142:	bf00      	nop
  401144:	00401a15 	.word	0x00401a15

00401148 <mxt_read_message>:
 * \param *message Pointer to mxt_message instance
 * \return Operation result status code
 */
status_code_t mxt_read_message(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
  401148:	b530      	push	{r4, r5, lr}
  40114a:	b087      	sub	sp, #28
  40114c:	4604      	mov	r4, r0
  40114e:	460d      	mov	r5, r1
	uint16_t obj_adr = mxt_get_object_address(device,
  401150:	2200      	movs	r2, #0
  401152:	2105      	movs	r1, #5
  401154:	4b0d      	ldr	r3, [pc, #52]	; (40118c <mxt_read_message+0x44>)
  401156:	4798      	blx	r3
			MXT_GEN_MESSAGEPROCESSOR_T5, 0);

	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  401158:	2300      	movs	r3, #0
  40115a:	9301      	str	r3, [sp, #4]
  40115c:	9305      	str	r3, [sp, #20]
  40115e:	f88d 0004 	strb.w	r0, [sp, #4]
  401162:	0a00      	lsrs	r0, r0, #8
  401164:	f88d 0005 	strb.w	r0, [sp, #5]
  401168:	2302      	movs	r3, #2
  40116a:	9302      	str	r3, [sp, #8]
  40116c:	9503      	str	r5, [sp, #12]
  40116e:	2309      	movs	r3, #9
  401170:	9304      	str	r3, [sp, #16]
  401172:	7b23      	ldrb	r3, [r4, #12]
  401174:	f88d 3014 	strb.w	r3, [sp, #20]
		.buffer       = message,
		.length       = MXT_TWI_MSG_SIZE_T5
	};

	/* Read information from the slave */
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  401178:	a901      	add	r1, sp, #4
  40117a:	68a0      	ldr	r0, [r4, #8]
  40117c:	4b04      	ldr	r3, [pc, #16]	; (401190 <mxt_read_message+0x48>)
  40117e:	4798      	blx	r3
  401180:	3000      	adds	r0, #0
  401182:	bf18      	it	ne
  401184:	2001      	movne	r0, #1
		return mxt_validate_message(&packet);
#else
		return STATUS_OK;
#endif
	}
}
  401186:	4240      	negs	r0, r0
  401188:	b007      	add	sp, #28
  40118a:	bd30      	pop	{r4, r5, pc}
  40118c:	00401049 	.word	0x00401049
  401190:	00401969 	.word	0x00401969

00401194 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  401194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  401198:	b980      	cbnz	r0, 4011bc <_read+0x28>
  40119a:	460c      	mov	r4, r1
  40119c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40119e:	2a00      	cmp	r2, #0
  4011a0:	dd0f      	ble.n	4011c2 <_read+0x2e>
  4011a2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4011a4:	4e08      	ldr	r6, [pc, #32]	; (4011c8 <_read+0x34>)
  4011a6:	4d09      	ldr	r5, [pc, #36]	; (4011cc <_read+0x38>)
  4011a8:	6830      	ldr	r0, [r6, #0]
  4011aa:	4621      	mov	r1, r4
  4011ac:	682b      	ldr	r3, [r5, #0]
  4011ae:	4798      	blx	r3
		ptr++;
  4011b0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4011b2:	42bc      	cmp	r4, r7
  4011b4:	d1f8      	bne.n	4011a8 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4011b6:	4640      	mov	r0, r8
  4011b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4011bc:	f04f 38ff 	mov.w	r8, #4294967295
  4011c0:	e7f9      	b.n	4011b6 <_read+0x22>
	for (; len > 0; --len) {
  4011c2:	4680      	mov	r8, r0
  4011c4:	e7f7      	b.n	4011b6 <_read+0x22>
  4011c6:	bf00      	nop
  4011c8:	20406dc0 	.word	0x20406dc0
  4011cc:	20406db8 	.word	0x20406db8

004011d0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4011d0:	3801      	subs	r0, #1
  4011d2:	2802      	cmp	r0, #2
  4011d4:	d815      	bhi.n	401202 <_write+0x32>
{
  4011d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4011da:	460e      	mov	r6, r1
  4011dc:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4011de:	b19a      	cbz	r2, 401208 <_write+0x38>
  4011e0:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4011e2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 40121c <_write+0x4c>
  4011e6:	4f0c      	ldr	r7, [pc, #48]	; (401218 <_write+0x48>)
  4011e8:	f8d8 0000 	ldr.w	r0, [r8]
  4011ec:	f815 1b01 	ldrb.w	r1, [r5], #1
  4011f0:	683b      	ldr	r3, [r7, #0]
  4011f2:	4798      	blx	r3
  4011f4:	2800      	cmp	r0, #0
  4011f6:	db0a      	blt.n	40120e <_write+0x3e>
  4011f8:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4011fa:	3c01      	subs	r4, #1
  4011fc:	d1f4      	bne.n	4011e8 <_write+0x18>
  4011fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  401202:	f04f 30ff 	mov.w	r0, #4294967295
  401206:	4770      	bx	lr
	for (; len != 0; --len) {
  401208:	4610      	mov	r0, r2
  40120a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  40120e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  401212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401216:	bf00      	nop
  401218:	20406dbc 	.word	0x20406dbc
  40121c:	20406dc0 	.word	0x20406dc0

00401220 <wm8904_write_register>:
 *
 * \param uc_register_address Register address to write
 * \param us_data Data to write.
 */
void wm8904_write_register(uint8_t uc_register_address, uint16_t us_data)
{
  401220:	b500      	push	{lr}
  401222:	b087      	sub	sp, #28
	uint8_t uc_temp_data[2];
	twihs_packet_t packet;

	uc_temp_data[0] = (us_data & 0xff00) >> 8;
  401224:	0a0b      	lsrs	r3, r1, #8
  401226:	f88d 3014 	strb.w	r3, [sp, #20]
	uc_temp_data[1] = us_data & 0xff;
  40122a:	f88d 1015 	strb.w	r1, [sp, #21]

	packet.addr[0]     = uc_register_address;
  40122e:	f88d 0000 	strb.w	r0, [sp]
	packet.addr_length = 0x1;
  401232:	2301      	movs	r3, #1
  401234:	9301      	str	r3, [sp, #4]
	packet.buffer      = uc_temp_data;
  401236:	ab05      	add	r3, sp, #20
  401238:	9302      	str	r3, [sp, #8]
	packet.length      = 0x2;
  40123a:	2302      	movs	r3, #2
  40123c:	9303      	str	r3, [sp, #12]
	packet.chip        = WM8904_SLAVE_ADDRESS;
  40123e:	231a      	movs	r3, #26
  401240:	f88d 3010 	strb.w	r3, [sp, #16]

	twihs_master_write(WM8904_TWIHS, &packet);
  401244:	4669      	mov	r1, sp
  401246:	4803      	ldr	r0, [pc, #12]	; (401254 <wm8904_write_register+0x34>)
  401248:	4b03      	ldr	r3, [pc, #12]	; (401258 <wm8904_write_register+0x38>)
  40124a:	4798      	blx	r3
}
  40124c:	b007      	add	sp, #28
  40124e:	f85d fb04 	ldr.w	pc, [sp], #4
  401252:	bf00      	nop
  401254:	40018000 	.word	0x40018000
  401258:	00401a15 	.word	0x00401a15

0040125c <wm8904_read_register>:
 *
 * \param uc_register_address Register address to write
 * \retun Register value.
 */
uint16_t wm8904_read_register(uint8_t uc_register_address)
{
  40125c:	b500      	push	{lr}
  40125e:	b087      	sub	sp, #28
	uint8_t uc_temp_data[2];
	twihs_packet_t packet;
	uint16_t us_data;

	packet.addr[0]     = uc_register_address;
  401260:	f88d 0000 	strb.w	r0, [sp]
	packet.addr_length = 0x1;
  401264:	2301      	movs	r3, #1
  401266:	9301      	str	r3, [sp, #4]
	packet.buffer      = uc_temp_data;
  401268:	ab05      	add	r3, sp, #20
  40126a:	9302      	str	r3, [sp, #8]
	packet.length      = 0x2;
  40126c:	2302      	movs	r3, #2
  40126e:	9303      	str	r3, [sp, #12]
	packet.chip        = WM8904_SLAVE_ADDRESS;
  401270:	231a      	movs	r3, #26
  401272:	f88d 3010 	strb.w	r3, [sp, #16]

	twihs_master_read(WM8904_TWIHS, &packet);
  401276:	4669      	mov	r1, sp
  401278:	4805      	ldr	r0, [pc, #20]	; (401290 <wm8904_read_register+0x34>)
  40127a:	4b06      	ldr	r3, [pc, #24]	; (401294 <wm8904_read_register+0x38>)
  40127c:	4798      	blx	r3
	us_data = (((uint16_t)uc_temp_data[0] << 8) & 0xff00) | uc_temp_data[1];
  40127e:	f89d 0014 	ldrb.w	r0, [sp, #20]
  401282:	f89d 3015 	ldrb.w	r3, [sp, #21]

	return us_data;
}
  401286:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  40128a:	b007      	add	sp, #28
  40128c:	f85d fb04 	ldr.w	pc, [sp], #4
  401290:	40018000 	.word	0x40018000
  401294:	00401969 	.word	0x00401969

00401298 <wm8904_twi_init>:
 * \brief Initialize TWIHS connect to WM8904.
 *
 * \retun TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t wm8904_twi_init(void)
{
  401298:	b510      	push	{r4, lr}
  40129a:	b084      	sub	sp, #16
	pio_configure_pin(WM8904_TK_PIO, WM8904_TK_FLAGS);
  40129c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4012a0:	2021      	movs	r0, #33	; 0x21
  4012a2:	4c15      	ldr	r4, [pc, #84]	; (4012f8 <wm8904_twi_init+0x60>)
  4012a4:	47a0      	blx	r4
	pio_configure_pin(WM8904_TF_PIO, WM8904_TF_FLAGS);
  4012a6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4012aa:	2020      	movs	r0, #32
  4012ac:	47a0      	blx	r4
	pio_configure_pin(WM8904_TD_PIO, WM8904_TD_FLAGS);
  4012ae:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4012b2:	207a      	movs	r0, #122	; 0x7a
  4012b4:	47a0      	blx	r4
	pio_configure_pin(WM8904_RK_PIO, WM8904_RK_FLAGS);
  4012b6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4012ba:	2016      	movs	r0, #22
  4012bc:	47a0      	blx	r4
	pio_configure_pin(WM8904_RF_PIO, WM8904_RF_FLAGS);
  4012be:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4012c2:	2078      	movs	r0, #120	; 0x78
  4012c4:	47a0      	blx	r4
	pio_configure_pin(WM8904_RD_PIO, WM8904_RD_FLAGS);
  4012c6:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4012ca:	200a      	movs	r0, #10
  4012cc:	47a0      	blx	r4
	pio_configure_pin(WM8904_PCK2_PIO, WM8904_PCK2_FLAGS);
  4012ce:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4012d2:	2012      	movs	r0, #18
  4012d4:	47a0      	blx	r4

	twihs_options_t opt;
	opt.master_clk = sysclk_get_cpu_hz();
	opt.speed = WM8904_TWIHS_CLK;
  4012d6:	4b09      	ldr	r3, [pc, #36]	; (4012fc <wm8904_twi_init+0x64>)
  4012d8:	9302      	str	r3, [sp, #8]
	p_opt->master_clk = sysclk_get_peripheral_hz();
  4012da:	4b09      	ldr	r3, [pc, #36]	; (401300 <wm8904_twi_init+0x68>)
  4012dc:	9301      	str	r3, [sp, #4]
	p_opt->smbus      = 0;
  4012de:	2300      	movs	r3, #0
  4012e0:	f88d 300d 	strb.w	r3, [sp, #13]
  4012e4:	2013      	movs	r0, #19
  4012e6:	4b07      	ldr	r3, [pc, #28]	; (401304 <wm8904_twi_init+0x6c>)
  4012e8:	4798      	blx	r3
	return (twihs_master_init(p_twihs, p_opt));
  4012ea:	a901      	add	r1, sp, #4
  4012ec:	4806      	ldr	r0, [pc, #24]	; (401308 <wm8904_twi_init+0x70>)
  4012ee:	4b07      	ldr	r3, [pc, #28]	; (40130c <wm8904_twi_init+0x74>)
  4012f0:	4798      	blx	r3
	return twihs_master_setup(WM8904_TWIHS, &opt);
}
  4012f2:	b004      	add	sp, #16
  4012f4:	bd10      	pop	{r4, pc}
  4012f6:	bf00      	nop
  4012f8:	00402019 	.word	0x00402019
  4012fc:	00061a80 	.word	0x00061a80
  401300:	08f0d180 	.word	0x08f0d180
  401304:	0040231d 	.word	0x0040231d
  401308:	40018000 	.word	0x40018000
  40130c:	00401935 	.word	0x00401935

00401310 <ili9488_write_ram_prepare>:

/**
 * \brief Prepare to write GRAM data.
 */
static void ili9488_write_ram_prepare(void)
{
  401310:	b508      	push	{r3, lr}
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401312:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401316:	4804      	ldr	r0, [pc, #16]	; (401328 <ili9488_write_ram_prepare+0x18>)
  401318:	4b04      	ldr	r3, [pc, #16]	; (40132c <ili9488_write_ram_prepare+0x1c>)
  40131a:	4798      	blx	r3
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  40131c:	222c      	movs	r2, #44	; 0x2c
  40131e:	f04f 43c6 	mov.w	r3, #1660944384	; 0x63000000
  401322:	801a      	strh	r2, [r3, #0]
  401324:	bd08      	pop	{r3, pc}
  401326:	bf00      	nop
  401328:	400e1200 	.word	0x400e1200
  40132c:	00401e8d 	.word	0x00401e8d

00401330 <ili9488_write_register>:
 * \param uc_reg register address.
 * \param us_data data to be written.
 * \param size the number of parameters.
 */
static void ili9488_write_register(uint8_t uc_reg, const ili9488_color_t *us_data, uint32_t size)
{
  401330:	b570      	push	{r4, r5, r6, lr}
  401332:	4606      	mov	r6, r0
  401334:	460d      	mov	r5, r1
  401336:	4614      	mov	r4, r2
	/* CDS pin is set low level when writing command*/
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401338:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40133c:	480c      	ldr	r0, [pc, #48]	; (401370 <ili9488_write_register+0x40>)
  40133e:	4b0d      	ldr	r3, [pc, #52]	; (401374 <ili9488_write_register+0x44>)
  401340:	4798      	blx	r3
  401342:	b2b6      	uxth	r6, r6
  401344:	f04f 43c6 	mov.w	r3, #1660944384	; 0x63000000
  401348:	801e      	strh	r6, [r3, #0]
	LCD_IR(uc_reg);

	if(size == 0) {
  40134a:	b904      	cbnz	r4, 40134e <ili9488_write_register+0x1e>
  40134c:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	/* CDS pin is set high level when writing parameters or image data*/
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  40134e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401352:	4807      	ldr	r0, [pc, #28]	; (401370 <ili9488_write_register+0x40>)
  401354:	4b08      	ldr	r3, [pc, #32]	; (401378 <ili9488_write_register+0x48>)
  401356:	4798      	blx	r3
		while(size--) {
  401358:	1e62      	subs	r2, r4, #1
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  40135a:	f04f 41c6 	mov.w	r1, #1660944384	; 0x63000000
  40135e:	f835 3b02 	ldrh.w	r3, [r5], #2
  401362:	800b      	strh	r3, [r1, #0]
		while(size--) {
  401364:	3a01      	subs	r2, #1
  401366:	f1b2 3fff 	cmp.w	r2, #4294967295
  40136a:	d1f8      	bne.n	40135e <ili9488_write_register+0x2e>
  40136c:	e7ee      	b.n	40134c <ili9488_write_register+0x1c>
  40136e:	bf00      	nop
  401370:	400e1200 	.word	0x400e1200
  401374:	00401e8d 	.word	0x00401e8d
  401378:	00401e89 	.word	0x00401e89

0040137c <ili9488_delay>:
 */
void ili9488_delay(uint32_t ul_ms)
{
	uint32_t i;

	for(i = 0; i < ul_ms; i++) {
  40137c:	4601      	mov	r1, r0
  40137e:	b130      	cbz	r0, 40138e <ili9488_delay+0x12>
  401380:	4a03      	ldr	r2, [pc, #12]	; (401390 <ili9488_delay+0x14>)
{
  401382:	4b04      	ldr	r3, [pc, #16]	; (401394 <ili9488_delay+0x18>)
		for(i = 0; i < 100000; i++) {
  401384:	3b01      	subs	r3, #1
  401386:	d1fd      	bne.n	401384 <ili9488_delay+0x8>
	for(i = 0; i < ul_ms; i++) {
  401388:	4291      	cmp	r1, r2
  40138a:	d8fa      	bhi.n	401382 <ili9488_delay+0x6>
  40138c:	4770      	bx	lr
  40138e:	4770      	bx	lr
  401390:	000186a1 	.word	0x000186a1
  401394:	000186a0 	.word	0x000186a0

00401398 <ili9488_set_display_direction>:
 * \brief ILI9488 configure landscape.
 *
 * \Param LandscaprMode Landscape Mode.
 */
void ili9488_set_display_direction(enum ili9488_display_direction direction )
{
  401398:	b500      	push	{lr}
  40139a:	b083      	sub	sp, #12
	ili9488_color_t value;
	if(direction) {
  40139c:	b958      	cbnz	r0, 4013b6 <ili9488_set_display_direction+0x1e>
		value = 0xE8;
	} else {
		value = 0x48;
  40139e:	2348      	movs	r3, #72	; 0x48
  4013a0:	f8ad 3006 	strh.w	r3, [sp, #6]
	}
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &value, 1);
  4013a4:	2201      	movs	r2, #1
  4013a6:	f10d 0106 	add.w	r1, sp, #6
  4013aa:	2036      	movs	r0, #54	; 0x36
  4013ac:	4b04      	ldr	r3, [pc, #16]	; (4013c0 <ili9488_set_display_direction+0x28>)
  4013ae:	4798      	blx	r3
}
  4013b0:	b003      	add	sp, #12
  4013b2:	f85d fb04 	ldr.w	pc, [sp], #4
		value = 0xE8;
  4013b6:	23e8      	movs	r3, #232	; 0xe8
  4013b8:	f8ad 3006 	strh.w	r3, [sp, #6]
  4013bc:	e7f2      	b.n	4013a4 <ili9488_set_display_direction+0xc>
  4013be:	bf00      	nop
  4013c0:	00401331 	.word	0x00401331

004013c4 <ili9488_set_window>:
 * \Param y start position.
 * \Param width  Width of window.
 * \Param height Height of window.
 */
void ili9488_set_window(uint16_t x, uint16_t y, uint16_t width, uint16_t height )
{
  4013c4:	b510      	push	{r4, lr}
  4013c6:	b084      	sub	sp, #16
	uint32_t cnt = 0;
	ili9488_color_t buf[4];

	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	col_start  =  x ;
  4013c8:	f8ad 000e 	strh.w	r0, [sp, #14]
	col_end    =  width + x - 1;
  4013cc:	3a01      	subs	r2, #1
  4013ce:	4402      	add	r2, r0
  4013d0:	f8ad 200c 	strh.w	r2, [sp, #12]

	row_start = y ;
  4013d4:	f8ad 100a 	strh.w	r1, [sp, #10]
	row_end   = height + y - 1;
  4013d8:	3b01      	subs	r3, #1
  4013da:	4419      	add	r1, r3
  4013dc:	f8ad 1008 	strh.w	r1, [sp, #8]

	buf[0] = get_8b_to_16b(col_start);
  4013e0:	0a03      	lsrs	r3, r0, #8
  4013e2:	f8ad 3000 	strh.w	r3, [sp]
	buf[1] = get_0b_to_8b(col_start);
  4013e6:	b2c0      	uxtb	r0, r0
  4013e8:	f8ad 0002 	strh.w	r0, [sp, #2]
	buf[2] = get_8b_to_16b(col_end);
  4013ec:	f3c2 2307 	ubfx	r3, r2, #8, #8
  4013f0:	f8ad 3004 	strh.w	r3, [sp, #4]
	buf[3] = get_0b_to_8b(col_end);
  4013f4:	b2d2      	uxtb	r2, r2
  4013f6:	f8ad 2006 	strh.w	r2, [sp, #6]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  4013fa:	2204      	movs	r2, #4
  4013fc:	4669      	mov	r1, sp
  4013fe:	202a      	movs	r0, #42	; 0x2a
  401400:	4c0f      	ldr	r4, [pc, #60]	; (401440 <ili9488_set_window+0x7c>)
  401402:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  401404:	2200      	movs	r2, #0
  401406:	4611      	mov	r1, r2
  401408:	4610      	mov	r0, r2
  40140a:	47a0      	blx	r4

	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(row_start);
  40140c:	f89d 300b 	ldrb.w	r3, [sp, #11]
  401410:	f8ad 3000 	strh.w	r3, [sp]
	buf[1] = get_0b_to_8b(row_start);
  401414:	f89d 300a 	ldrb.w	r3, [sp, #10]
  401418:	f8ad 3002 	strh.w	r3, [sp, #2]
	buf[2] = get_8b_to_16b(row_end);
  40141c:	f89d 3009 	ldrb.w	r3, [sp, #9]
  401420:	f8ad 3004 	strh.w	r3, [sp, #4]
	buf[3] = get_0b_to_8b(row_end);
  401424:	f89d 3008 	ldrb.w	r3, [sp, #8]
  401428:	f8ad 3006 	strh.w	r3, [sp, #6]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  40142c:	2204      	movs	r2, #4
  40142e:	4669      	mov	r1, sp
  401430:	202b      	movs	r0, #43	; 0x2b
  401432:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  401434:	2200      	movs	r2, #0
  401436:	4611      	mov	r1, r2
  401438:	4610      	mov	r0, r2
  40143a:	47a0      	blx	r4
}
  40143c:	b004      	add	sp, #16
  40143e:	bd10      	pop	{r4, pc}
  401440:	00401331 	.word	0x00401331

00401444 <ili9488_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9488_display_on(void)
{
  401444:	b508      	push	{r3, lr}
	ili9488_write_register(ILI9488_CMD_DISPLAY_ON, 0, 0);
  401446:	2200      	movs	r2, #0
  401448:	4611      	mov	r1, r2
  40144a:	2029      	movs	r0, #41	; 0x29
  40144c:	4b01      	ldr	r3, [pc, #4]	; (401454 <ili9488_display_on+0x10>)
  40144e:	4798      	blx	r3
  401450:	bd08      	pop	{r3, pc}
  401452:	bf00      	nop
  401454:	00401331 	.word	0x00401331

00401458 <ili9488_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili9488_set_foreground_color(uint32_t ul_color)
{
  401458:	4a04      	ldr	r2, [pc, #16]	; (40146c <ili9488_set_foreground_color+0x14>)
  40145a:	1e93      	subs	r3, r2, #2
  40145c:	f202 227e 	addw	r2, r2, #638	; 0x27e
	uint32_t i;
#ifdef ILI9488_EBIMODE
	/* Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
		g_ul_pixel_cache[i] = ul_color;
  401460:	f823 0f02 	strh.w	r0, [r3, #2]!
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
  401464:	4293      	cmp	r3, r2
  401466:	d1fb      	bne.n	401460 <ili9488_set_foreground_color+0x8>
		g_ul_pixel_cache[i++] = ul_color>>16;
		g_ul_pixel_cache[i++] = ul_color>>8;
		g_ul_pixel_cache[i++] = ul_color&0xFF;
	}
#endif
}
  401468:	4770      	bx	lr
  40146a:	bf00      	nop
  40146c:	20400a78 	.word	0x20400a78

00401470 <ili9488_set_cursor_position>:
 *
 * \param x X coordinate of upper-left corner on LCD.
 * \param y Y coordinate of upper-left corner on LCD.
 */
void ili9488_set_cursor_position(uint16_t x, uint16_t y)
{
  401470:	b510      	push	{r4, lr}
  401472:	b084      	sub	sp, #16
  401474:	f8ad 0006 	strh.w	r0, [sp, #6]
  401478:	f8ad 1004 	strh.w	r1, [sp, #4]
	uint32_t cnt = 0;

	ili9488_color_t buf[4];
	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	buf[0] = get_8b_to_16b(x);
  40147c:	0a03      	lsrs	r3, r0, #8
  40147e:	f8ad 3008 	strh.w	r3, [sp, #8]
	buf[1] = get_0b_to_8b(x);
  401482:	b2c0      	uxtb	r0, r0
  401484:	f8ad 000a 	strh.w	r0, [sp, #10]
	buf[2] = get_8b_to_16b(x);
  401488:	f8ad 300c 	strh.w	r3, [sp, #12]
	buf[3] = get_0b_to_8b(x);
  40148c:	f8ad 000e 	strh.w	r0, [sp, #14]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  401490:	2204      	movs	r2, #4
  401492:	a902      	add	r1, sp, #8
  401494:	202a      	movs	r0, #42	; 0x2a
  401496:	4c0e      	ldr	r4, [pc, #56]	; (4014d0 <ili9488_set_cursor_position+0x60>)
  401498:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  40149a:	2200      	movs	r2, #0
  40149c:	4611      	mov	r1, r2
  40149e:	4610      	mov	r0, r2
  4014a0:	47a0      	blx	r4


	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(y);
  4014a2:	f89d 2005 	ldrb.w	r2, [sp, #5]
  4014a6:	f8ad 2008 	strh.w	r2, [sp, #8]
	buf[1] = get_0b_to_8b(y);
  4014aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
  4014ae:	f8ad 300a 	strh.w	r3, [sp, #10]
	buf[2] = get_8b_to_16b(y);
  4014b2:	f8ad 200c 	strh.w	r2, [sp, #12]
	buf[3] = get_0b_to_8b(y);
  4014b6:	f8ad 300e 	strh.w	r3, [sp, #14]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  4014ba:	2204      	movs	r2, #4
  4014bc:	a902      	add	r1, sp, #8
  4014be:	202b      	movs	r0, #43	; 0x2b
  4014c0:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  4014c2:	2200      	movs	r2, #0
  4014c4:	4611      	mov	r1, r2
  4014c6:	4610      	mov	r0, r2
  4014c8:	47a0      	blx	r4
}
  4014ca:	b004      	add	sp, #16
  4014cc:	bd10      	pop	{r4, pc}
  4014ce:	bf00      	nop
  4014d0:	00401331 	.word	0x00401331

004014d4 <ili9488_init>:
{
  4014d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4014d6:	b085      	sub	sp, #20
  4014d8:	4604      	mov	r4, r0
	pmc_enable_periph_clk(ID_SMC);
  4014da:	2009      	movs	r0, #9
  4014dc:	4b46      	ldr	r3, [pc, #280]	; (4015f8 <ili9488_init+0x124>)
  4014de:	4798      	blx	r3
	smc_set_setup_timing(SMC, BOARD_ILI9488_EBI_NPCS, SMC_SETUP_NWE_SETUP(0)
  4014e0:	4d46      	ldr	r5, [pc, #280]	; (4015fc <ili9488_init+0x128>)
  4014e2:	2200      	movs	r2, #0
  4014e4:	2103      	movs	r1, #3
  4014e6:	4628      	mov	r0, r5
  4014e8:	4b45      	ldr	r3, [pc, #276]	; (401600 <ili9488_init+0x12c>)
  4014ea:	4798      	blx	r3
	smc_set_pulse_timing(SMC, BOARD_ILI9488_EBI_NPCS , SMC_PULSE_NWE_PULSE(3)
  4014ec:	4a45      	ldr	r2, [pc, #276]	; (401604 <ili9488_init+0x130>)
  4014ee:	2103      	movs	r1, #3
  4014f0:	4628      	mov	r0, r5
  4014f2:	4b45      	ldr	r3, [pc, #276]	; (401608 <ili9488_init+0x134>)
  4014f4:	4798      	blx	r3
	smc_set_cycle_timing(SMC, BOARD_ILI9488_EBI_NPCS, SMC_CYCLE_NWE_CYCLE(0x4)
  4014f6:	4a45      	ldr	r2, [pc, #276]	; (40160c <ili9488_init+0x138>)
  4014f8:	2103      	movs	r1, #3
  4014fa:	4628      	mov	r0, r5
  4014fc:	4b44      	ldr	r3, [pc, #272]	; (401610 <ili9488_init+0x13c>)
  4014fe:	4798      	blx	r3
	smc_set_mode(SMC, BOARD_ILI9488_EBI_NPCS, SMC_MODE_READ_MODE
  401500:	4a44      	ldr	r2, [pc, #272]	; (401614 <ili9488_init+0x140>)
  401502:	2103      	movs	r1, #3
  401504:	4628      	mov	r0, r5
  401506:	4b44      	ldr	r3, [pc, #272]	; (401618 <ili9488_init+0x144>)
  401508:	4798      	blx	r3
	ili9488_write_register(ILI9488_CMD_SOFTWARE_RESET, 0x0000, 0);
  40150a:	2200      	movs	r2, #0
  40150c:	4611      	mov	r1, r2
  40150e:	2001      	movs	r0, #1
  401510:	4e42      	ldr	r6, [pc, #264]	; (40161c <ili9488_init+0x148>)
  401512:	47b0      	blx	r6
	ili9488_delay(200);
  401514:	20c8      	movs	r0, #200	; 0xc8
  401516:	4d42      	ldr	r5, [pc, #264]	; (401620 <ili9488_init+0x14c>)
  401518:	47a8      	blx	r5
	ili9488_write_register(ILI9488_CMD_SLEEP_OUT, 0x0000, 0);
  40151a:	2200      	movs	r2, #0
  40151c:	4611      	mov	r1, r2
  40151e:	2011      	movs	r0, #17
  401520:	47b0      	blx	r6
	ili9488_delay(200);
  401522:	20c8      	movs	r0, #200	; 0xc8
  401524:	47a8      	blx	r5
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401526:	4e3f      	ldr	r6, [pc, #252]	; (401624 <ili9488_init+0x150>)
  401528:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40152c:	4630      	mov	r0, r6
  40152e:	4b3e      	ldr	r3, [pc, #248]	; (401628 <ili9488_init+0x154>)
  401530:	4798      	blx	r3
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  401532:	f04f 45c6 	mov.w	r5, #1660944384	; 0x63000000
  401536:	23d3      	movs	r3, #211	; 0xd3
  401538:	802b      	strh	r3, [r5, #0]
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  40153a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40153e:	4630      	mov	r0, r6
  401540:	4b3a      	ldr	r3, [pc, #232]	; (40162c <ili9488_init+0x158>)
  401542:	4798      	blx	r3
		return *(volatile uint16_t *)(BOARD_ILI9488_ADDR);
	}
	static inline void LCD_MULTI_RD(uint16_t *pbuffer, uint32_t size)
	{
		while(size--) {
			*pbuffer++ = *((volatile uint16_t *)(BOARD_ILI9488_ADDR));
  401544:	882b      	ldrh	r3, [r5, #0]
  401546:	f8ad 3004 	strh.w	r3, [sp, #4]
  40154a:	8829      	ldrh	r1, [r5, #0]
  40154c:	b289      	uxth	r1, r1
  40154e:	f8ad 1006 	strh.w	r1, [sp, #6]
  401552:	882b      	ldrh	r3, [r5, #0]
  401554:	b29b      	uxth	r3, r3
  401556:	f8ad 3008 	strh.w	r3, [sp, #8]
  40155a:	882a      	ldrh	r2, [r5, #0]
  40155c:	b292      	uxth	r2, r2
  40155e:	f8ad 200a 	strh.w	r2, [sp, #10]
  401562:	8828      	ldrh	r0, [r5, #0]
		chipid |= (*ptr &0xFF)<< (shift_cnt << 3);
  401564:	b2c9      	uxtb	r1, r1
  401566:	b2db      	uxtb	r3, r3
  401568:	021b      	lsls	r3, r3, #8
  40156a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40156e:	b2d2      	uxtb	r2, r2
  401570:	4313      	orrs	r3, r2
	if (chipid != ILI9488_DEVICE_CODE) {
  401572:	f249 4288 	movw	r2, #38024	; 0x9488
  401576:	4293      	cmp	r3, r2
  401578:	d002      	beq.n	401580 <ili9488_init+0xac>
		return 1;
  40157a:	2001      	movs	r0, #1
}
  40157c:	b005      	add	sp, #20
  40157e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	param = 0x48;
  401580:	ae04      	add	r6, sp, #16
  401582:	2348      	movs	r3, #72	; 0x48
  401584:	f826 3d02 	strh.w	r3, [r6, #-2]!
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &param, 1);
  401588:	2201      	movs	r2, #1
  40158a:	4631      	mov	r1, r6
  40158c:	2036      	movs	r0, #54	; 0x36
  40158e:	4f23      	ldr	r7, [pc, #140]	; (40161c <ili9488_init+0x148>)
  401590:	47b8      	blx	r7
	ili9488_delay(100);
  401592:	2064      	movs	r0, #100	; 0x64
  401594:	4d22      	ldr	r5, [pc, #136]	; (401620 <ili9488_init+0x14c>)
  401596:	47a8      	blx	r5
	param = 0x04;
  401598:	2304      	movs	r3, #4
  40159a:	f8ad 300e 	strh.w	r3, [sp, #14]
	ili9488_write_register(ILI9488_CMD_CABC_CONTROL_9, &param, 1);
  40159e:	2201      	movs	r2, #1
  4015a0:	4631      	mov	r1, r6
  4015a2:	20cf      	movs	r0, #207	; 0xcf
  4015a4:	47b8      	blx	r7
	ili9488_delay(100);
  4015a6:	2064      	movs	r0, #100	; 0x64
  4015a8:	47a8      	blx	r5
	param = 0x05;
  4015aa:	2305      	movs	r3, #5
  4015ac:	f8ad 300e 	strh.w	r3, [sp, #14]
	ili9488_write_register(ILI9488_CMD_COLMOD_PIXEL_FORMAT_SET, &param, 1);
  4015b0:	2201      	movs	r2, #1
  4015b2:	4631      	mov	r1, r6
  4015b4:	203a      	movs	r0, #58	; 0x3a
  4015b6:	47b8      	blx	r7
	ili9488_delay(100);
  4015b8:	2064      	movs	r0, #100	; 0x64
  4015ba:	47a8      	blx	r5
	ili9488_write_register(ILI9488_CMD_PARTIAL_MODE_ON, 0, 0);
  4015bc:	2200      	movs	r2, #0
  4015be:	4611      	mov	r1, r2
  4015c0:	2012      	movs	r0, #18
  4015c2:	47b8      	blx	r7
	ili9488_delay(100);
  4015c4:	2064      	movs	r0, #100	; 0x64
  4015c6:	47a8      	blx	r5
	ili9488_display_on();
  4015c8:	4b19      	ldr	r3, [pc, #100]	; (401630 <ili9488_init+0x15c>)
  4015ca:	4798      	blx	r3
	ili9488_delay(100);
  4015cc:	2064      	movs	r0, #100	; 0x64
  4015ce:	47a8      	blx	r5
	ili9488_set_display_direction(LANDSCAPE);
  4015d0:	2000      	movs	r0, #0
  4015d2:	4b18      	ldr	r3, [pc, #96]	; (401634 <ili9488_init+0x160>)
  4015d4:	4798      	blx	r3
	ili9488_delay(100);
  4015d6:	2064      	movs	r0, #100	; 0x64
  4015d8:	47a8      	blx	r5
	ili9488_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  4015da:	88a3      	ldrh	r3, [r4, #4]
  4015dc:	8822      	ldrh	r2, [r4, #0]
  4015de:	2100      	movs	r1, #0
  4015e0:	4608      	mov	r0, r1
  4015e2:	4d15      	ldr	r5, [pc, #84]	; (401638 <ili9488_init+0x164>)
  4015e4:	47a8      	blx	r5
	ili9488_set_foreground_color(p_opt->foreground_color);
  4015e6:	68a0      	ldr	r0, [r4, #8]
  4015e8:	4b14      	ldr	r3, [pc, #80]	; (40163c <ili9488_init+0x168>)
  4015ea:	4798      	blx	r3
	ili9488_set_cursor_position(0, 0);
  4015ec:	2100      	movs	r1, #0
  4015ee:	4608      	mov	r0, r1
  4015f0:	4b13      	ldr	r3, [pc, #76]	; (401640 <ili9488_init+0x16c>)
  4015f2:	4798      	blx	r3
	return 0;
  4015f4:	2000      	movs	r0, #0
  4015f6:	e7c1      	b.n	40157c <ili9488_init+0xa8>
  4015f8:	0040231d 	.word	0x0040231d
  4015fc:	40080000 	.word	0x40080000
  401600:	00401749 	.word	0x00401749
  401604:	0a0a0403 	.word	0x0a0a0403
  401608:	0040174f 	.word	0x0040174f
  40160c:	000a0004 	.word	0x000a0004
  401610:	00401757 	.word	0x00401757
  401614:	000f1003 	.word	0x000f1003
  401618:	0040175f 	.word	0x0040175f
  40161c:	00401331 	.word	0x00401331
  401620:	0040137d 	.word	0x0040137d
  401624:	400e1200 	.word	0x400e1200
  401628:	00401e8d 	.word	0x00401e8d
  40162c:	00401e89 	.word	0x00401e89
  401630:	00401445 	.word	0x00401445
  401634:	00401399 	.word	0x00401399
  401638:	004013c5 	.word	0x004013c5
  40163c:	00401459 	.word	0x00401459
  401640:	00401471 	.word	0x00401471

00401644 <ili9488_write_brightness>:
 * Configures the display for a given brightness value
 *
 * \param us_value brightness value need to written.
 */
void ili9488_write_brightness(uint16_t us_value)
{
  401644:	b500      	push	{lr}
  401646:	b083      	sub	sp, #12
  401648:	a902      	add	r1, sp, #8
  40164a:	f821 0d02 	strh.w	r0, [r1, #-2]!
	ili9488_write_register(ILI9488_CMD_WRITE_DISPLAY_BRIGHTNESS, (ili9488_color_t *)&us_value, 1);
  40164e:	2201      	movs	r2, #1
  401650:	2051      	movs	r0, #81	; 0x51
  401652:	4b02      	ldr	r3, [pc, #8]	; (40165c <ili9488_write_brightness+0x18>)
  401654:	4798      	blx	r3
}
  401656:	b003      	add	sp, #12
  401658:	f85d fb04 	ldr.w	pc, [sp], #4
  40165c:	00401331 	.word	0x00401331

00401660 <ili9488_set_limits>:
 * \param end_x The x coordinate of the bottom right corner
 * \param end_y The y coordinate of the bottom right corner
 */
void ili9488_set_limits(ili9488_coord_t start_x, ili9488_coord_t start_y,
		ili9488_coord_t end_x, ili9488_coord_t end_y)
{
  401660:	b410      	push	{r4}
	limit_start_x = start_x;
  401662:	4c05      	ldr	r4, [pc, #20]	; (401678 <ili9488_set_limits+0x18>)
  401664:	8020      	strh	r0, [r4, #0]
	limit_start_y = start_y;
  401666:	4805      	ldr	r0, [pc, #20]	; (40167c <ili9488_set_limits+0x1c>)
  401668:	8001      	strh	r1, [r0, #0]
	limit_end_x = end_x;
  40166a:	4905      	ldr	r1, [pc, #20]	; (401680 <ili9488_set_limits+0x20>)
  40166c:	800a      	strh	r2, [r1, #0]
	limit_end_y = end_y;
  40166e:	4a05      	ldr	r2, [pc, #20]	; (401684 <ili9488_set_limits+0x24>)
  401670:	8013      	strh	r3, [r2, #0]
}
  401672:	f85d 4b04 	ldr.w	r4, [sp], #4
  401676:	4770      	bx	lr
  401678:	20400cfc 	.word	0x20400cfc
  40167c:	20400cfe 	.word	0x20400cfe
  401680:	20400cf8 	.word	0x20400cf8
  401684:	20400cfa 	.word	0x20400cfa

00401688 <ili9488_set_orientation>:
 *
 * \param flags Orientation flags to use, see \ref ILI9488_FLIP_X, \ref ILI9488_FLIP_Y
 *        and \ref ILI9488_SWITCH_XY.
 */
void ili9488_set_orientation(uint8_t flags)
{
  401688:	b500      	push	{lr}
  40168a:	b083      	sub	sp, #12
	/* Flip X/Y and reverse X orientation and set BGR mode*/
	ili9488_color_t madctl = 0x68;

	if (flags & ILI9488_FLIP_X) {
  40168c:	f010 0f01 	tst.w	r0, #1
	ili9488_color_t madctl = 0x68;
  401690:	bf0c      	ite	eq
  401692:	2368      	moveq	r3, #104	; 0x68
		madctl &= ~(1 << 6);
  401694:	2328      	movne	r3, #40	; 0x28
  401696:	f8ad 3006 	strh.w	r3, [sp, #6]
	}

	if (flags & ILI9488_FLIP_Y) {
  40169a:	f010 0f02 	tst.w	r0, #2
  40169e:	d005      	beq.n	4016ac <ili9488_set_orientation+0x24>
		madctl |= 1 << 7;
  4016a0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4016a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4016a8:	f8ad 3006 	strh.w	r3, [sp, #6]
	}

	if (flags & ILI9488_SWITCH_XY) {
  4016ac:	f010 0f04 	tst.w	r0, #4
  4016b0:	d005      	beq.n	4016be <ili9488_set_orientation+0x36>
		madctl &= ~(1 << 5);
  4016b2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4016b6:	f023 0320 	bic.w	r3, r3, #32
  4016ba:	f8ad 3006 	strh.w	r3, [sp, #6]
	}

	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &madctl, 1);
  4016be:	2201      	movs	r2, #1
  4016c0:	f10d 0106 	add.w	r1, sp, #6
  4016c4:	2036      	movs	r0, #54	; 0x36
  4016c6:	4b02      	ldr	r3, [pc, #8]	; (4016d0 <ili9488_set_orientation+0x48>)
  4016c8:	4798      	blx	r3
}
  4016ca:	b003      	add	sp, #12
  4016cc:	f85d fb04 	ldr.w	pc, [sp], #4
  4016d0:	00401331 	.word	0x00401331

004016d4 <ili9488_duplicate_pixel>:
 *
 * \param color The color to write to the display
 * \param count The number of pixels to write with this color
 */
void ili9488_duplicate_pixel(const uint16_t color, uint32_t count)
{
  4016d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4016d8:	4605      	mov	r5, r0
  4016da:	460e      	mov	r6, r1
	ili9488_set_window(limit_start_x, limit_start_y, (limit_end_x - limit_start_x) + 1, (limit_end_y - limit_start_y) + 1);
  4016dc:	4b12      	ldr	r3, [pc, #72]	; (401728 <ili9488_duplicate_pixel+0x54>)
  4016de:	8818      	ldrh	r0, [r3, #0]
  4016e0:	4b12      	ldr	r3, [pc, #72]	; (40172c <ili9488_duplicate_pixel+0x58>)
  4016e2:	8819      	ldrh	r1, [r3, #0]
  4016e4:	4b12      	ldr	r3, [pc, #72]	; (401730 <ili9488_duplicate_pixel+0x5c>)
  4016e6:	881b      	ldrh	r3, [r3, #0]
  4016e8:	3301      	adds	r3, #1
  4016ea:	1a5b      	subs	r3, r3, r1
  4016ec:	4a11      	ldr	r2, [pc, #68]	; (401734 <ili9488_duplicate_pixel+0x60>)
  4016ee:	8812      	ldrh	r2, [r2, #0]
  4016f0:	3201      	adds	r2, #1
  4016f2:	1a12      	subs	r2, r2, r0
  4016f4:	b29b      	uxth	r3, r3
  4016f6:	b292      	uxth	r2, r2
  4016f8:	4c0f      	ldr	r4, [pc, #60]	; (401738 <ili9488_duplicate_pixel+0x64>)
  4016fa:	47a0      	blx	r4
	ili9488_write_ram_prepare();
  4016fc:	4b0f      	ldr	r3, [pc, #60]	; (40173c <ili9488_duplicate_pixel+0x68>)
  4016fe:	4798      	blx	r3

#ifdef ILI9488_EBIMODE
	while (count--) {
  401700:	b17e      	cbz	r6, 401722 <ili9488_duplicate_pixel+0x4e>
  401702:	1e74      	subs	r4, r6, #1
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401704:	f8df 803c 	ldr.w	r8, [pc, #60]	; 401744 <ili9488_duplicate_pixel+0x70>
  401708:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
  40170c:	4e0c      	ldr	r6, [pc, #48]	; (401740 <ili9488_duplicate_pixel+0x6c>)
  40170e:	4639      	mov	r1, r7
  401710:	4640      	mov	r0, r8
  401712:	47b0      	blx	r6
		*(volatile uint16_t *)(BOARD_ILI9488_ADDR) = lcd_data;
  401714:	f04f 43c6 	mov.w	r3, #1660944384	; 0x63000000
  401718:	801d      	strh	r5, [r3, #0]
	while (count--) {
  40171a:	3c01      	subs	r4, #1
  40171c:	f1b4 3fff 	cmp.w	r4, #4294967295
  401720:	d1f5      	bne.n	40170e <ili9488_duplicate_pixel+0x3a>
  401722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401726:	bf00      	nop
  401728:	20400cfc 	.word	0x20400cfc
  40172c:	20400cfe 	.word	0x20400cfe
  401730:	20400cfa 	.word	0x20400cfa
  401734:	20400cf8 	.word	0x20400cf8
  401738:	004013c5 	.word	0x004013c5
  40173c:	00401311 	.word	0x00401311
  401740:	00401e89 	.word	0x00401e89
  401744:	400e1200 	.word	0x400e1200

00401748 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
  401748:	0109      	lsls	r1, r1, #4
  40174a:	5042      	str	r2, [r0, r1]
  40174c:	4770      	bx	lr

0040174e <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
  40174e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  401752:	604a      	str	r2, [r1, #4]
  401754:	4770      	bx	lr

00401756 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
  401756:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  40175a:	608a      	str	r2, [r1, #8]
  40175c:	4770      	bx	lr

0040175e <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
  40175e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  401762:	60ca      	str	r2, [r1, #12]
  401764:	4770      	bx	lr

00401766 <ssc_reset>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_reset(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_SWRST;
  401766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40176a:	6003      	str	r3, [r0, #0]
	p_ssc->SSC_CMR = 0;
  40176c:	2300      	movs	r3, #0
  40176e:	6043      	str	r3, [r0, #4]
	p_ssc->SSC_RCMR = 0;
  401770:	6103      	str	r3, [r0, #16]
	p_ssc->SSC_RFMR = 0;
  401772:	6143      	str	r3, [r0, #20]
	p_ssc->SSC_TCMR = 0;
  401774:	6183      	str	r3, [r0, #24]
	p_ssc->SSC_TFMR = 0;
  401776:	61c3      	str	r3, [r0, #28]
  401778:	4770      	bx	lr

0040177a <ssc_enable_rx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_rx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_RXEN;
  40177a:	2301      	movs	r3, #1
  40177c:	6003      	str	r3, [r0, #0]
  40177e:	4770      	bx	lr

00401780 <ssc_disable_rx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_disable_rx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_RXDIS;
  401780:	2302      	movs	r3, #2
  401782:	6003      	str	r3, [r0, #0]
  401784:	4770      	bx	lr

00401786 <ssc_enable_tx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_tx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_TXEN;
  401786:	f44f 7380 	mov.w	r3, #256	; 0x100
  40178a:	6003      	str	r3, [r0, #0]
  40178c:	4770      	bx	lr

0040178e <ssc_disable_tx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_disable_tx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_TXDIS;
  40178e:	f44f 7300 	mov.w	r3, #512	; 0x200
  401792:	6003      	str	r3, [r0, #0]
  401794:	4770      	bx	lr

00401796 <ssc_set_receiver>:
 * \param p_rx_clk_opt Pointer to the receiver clock configuration structure.
 * \param p_rx_data_frame Pointer to the receiver data frame configuration structure.
 */
void ssc_set_receiver(Ssc *p_ssc, clock_opt_t *p_rx_clk_opt,
		data_frame_opt_t *p_rx_data_frame)
{
  401796:	b430      	push	{r4, r5}
	if (p_rx_clk_opt == NULL) {
  401798:	2900      	cmp	r1, #0
  40179a:	d030      	beq.n	4017fe <ssc_set_receiver+0x68>
  40179c:	460c      	mov	r4, r1
		p_ssc->SSC_RCMR = 0;
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  40179e:	6901      	ldr	r1, [r0, #16]
  4017a0:	6823      	ldr	r3, [r4, #0]
  4017a2:	6865      	ldr	r5, [r4, #4]
  4017a4:	432b      	orrs	r3, r5
  4017a6:	430b      	orrs	r3, r1
  4017a8:	68a1      	ldr	r1, [r4, #8]
  4017aa:	430b      	orrs	r3, r1
  4017ac:	68e1      	ldr	r1, [r4, #12]
  4017ae:	430b      	orrs	r3, r1
  4017b0:	69a1      	ldr	r1, [r4, #24]
  4017b2:	430b      	orrs	r3, r1
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
				p_rx_clk_opt->ul_ckg |
				p_rx_clk_opt->ul_start_sel |
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
  4017b4:	6921      	ldr	r1, [r4, #16]
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  4017b6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  4017ba:	6961      	ldr	r1, [r4, #20]
  4017bc:	0409      	lsls	r1, r1, #16
  4017be:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  4017c2:	430b      	orrs	r3, r1
  4017c4:	6103      	str	r3, [r0, #16]
	}

	if (p_rx_data_frame == NULL) {
  4017c6:	b1ea      	cbz	r2, 401804 <ssc_set_receiver+0x6e>
		p_ssc->SSC_RFMR = 0;
	} else {
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  4017c8:	6941      	ldr	r1, [r0, #20]
  4017ca:	6853      	ldr	r3, [r2, #4]
  4017cc:	6954      	ldr	r4, [r2, #20]
  4017ce:	4323      	orrs	r3, r4
  4017d0:	6994      	ldr	r4, [r2, #24]
  4017d2:	4323      	orrs	r3, r4
  4017d4:	430b      	orrs	r3, r1
  4017d6:	6811      	ldr	r1, [r2, #0]
  4017d8:	f001 011f 	and.w	r1, r1, #31
  4017dc:	430b      	orrs	r3, r1
				p_rx_data_frame->ul_msbf |
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
  4017de:	6911      	ldr	r1, [r2, #16]
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  4017e0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  4017e4:	6891      	ldr	r1, [r2, #8]
  4017e6:	0209      	lsls	r1, r1, #8
  4017e8:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  4017ec:	430b      	orrs	r3, r1
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  4017ee:	68d2      	ldr	r2, [r2, #12]
  4017f0:	0412      	lsls	r2, r2, #16
  4017f2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  4017f6:	4313      	orrs	r3, r2
  4017f8:	6143      	str	r3, [r0, #20]
				p_rx_data_frame->ul_fsos |
				p_rx_data_frame->ul_fsedge;
	}
}
  4017fa:	bc30      	pop	{r4, r5}
  4017fc:	4770      	bx	lr
		p_ssc->SSC_RCMR = 0;
  4017fe:	2300      	movs	r3, #0
  401800:	6103      	str	r3, [r0, #16]
  401802:	e7e0      	b.n	4017c6 <ssc_set_receiver+0x30>
		p_ssc->SSC_RFMR = 0;
  401804:	2300      	movs	r3, #0
  401806:	6143      	str	r3, [r0, #20]
  401808:	e7f7      	b.n	4017fa <ssc_set_receiver+0x64>

0040180a <ssc_set_transmitter>:
 * \param p_tx_clk_opt Pointer to the transmitter clock configuration structure.
 * \param p_tx_data_frame Pointer to the transmitter data frame configuration structure.
 */
void ssc_set_transmitter(Ssc *p_ssc, clock_opt_t *p_tx_clk_opt,
		data_frame_opt_t *p_tx_data_frame)
{
  40180a:	b430      	push	{r4, r5}
	if (p_tx_clk_opt == NULL) {
  40180c:	2900      	cmp	r1, #0
  40180e:	d030      	beq.n	401872 <ssc_set_transmitter+0x68>
  401810:	460c      	mov	r4, r1
		p_ssc->SSC_TCMR = 0;
	} else {
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  401812:	6981      	ldr	r1, [r0, #24]
  401814:	6823      	ldr	r3, [r4, #0]
  401816:	6865      	ldr	r5, [r4, #4]
  401818:	432b      	orrs	r3, r5
  40181a:	430b      	orrs	r3, r1
  40181c:	68a1      	ldr	r1, [r4, #8]
  40181e:	430b      	orrs	r3, r1
  401820:	68e1      	ldr	r1, [r4, #12]
  401822:	430b      	orrs	r3, r1
  401824:	69a1      	ldr	r1, [r4, #24]
  401826:	430b      	orrs	r3, r1
				p_tx_clk_opt->ul_cko | p_tx_clk_opt->ul_cki |
				p_tx_clk_opt->ul_ckg |
				p_tx_clk_opt->ul_start_sel |
				SSC_TCMR_PERIOD(p_tx_clk_opt->ul_period) |
  401828:	6921      	ldr	r1, [r4, #16]
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  40182a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
				SSC_TCMR_STTDLY(p_tx_clk_opt->ul_sttdly);
  40182e:	6961      	ldr	r1, [r4, #20]
  401830:	0409      	lsls	r1, r1, #16
  401832:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  401836:	430b      	orrs	r3, r1
  401838:	6183      	str	r3, [r0, #24]
	}

	if (p_tx_data_frame == NULL) {
  40183a:	b1ea      	cbz	r2, 401878 <ssc_set_transmitter+0x6e>
		p_ssc->SSC_TFMR = 0;
	} else {
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  40183c:	69c1      	ldr	r1, [r0, #28]
  40183e:	6853      	ldr	r3, [r2, #4]
  401840:	6954      	ldr	r4, [r2, #20]
  401842:	4323      	orrs	r3, r4
  401844:	6994      	ldr	r4, [r2, #24]
  401846:	4323      	orrs	r3, r4
  401848:	430b      	orrs	r3, r1
  40184a:	6811      	ldr	r1, [r2, #0]
  40184c:	f001 011f 	and.w	r1, r1, #31
  401850:	430b      	orrs	r3, r1
				p_tx_data_frame->ul_msbf |
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
				SSC_TFMR_FSLEN_EXT(p_tx_data_frame->ul_fslen_ext) |
  401852:	6911      	ldr	r1, [r2, #16]
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  401854:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
  401858:	6891      	ldr	r1, [r2, #8]
  40185a:	0209      	lsls	r1, r1, #8
  40185c:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  401860:	430b      	orrs	r3, r1
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
  401862:	68d2      	ldr	r2, [r2, #12]
  401864:	0412      	lsls	r2, r2, #16
  401866:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  40186a:	4313      	orrs	r3, r2
  40186c:	61c3      	str	r3, [r0, #28]
				p_tx_data_frame->ul_fsos |
				p_tx_data_frame->ul_fsedge;
	}
}
  40186e:	bc30      	pop	{r4, r5}
  401870:	4770      	bx	lr
		p_ssc->SSC_TCMR = 0;
  401872:	2300      	movs	r3, #0
  401874:	6183      	str	r3, [r0, #24]
  401876:	e7e0      	b.n	40183a <ssc_set_transmitter+0x30>
		p_ssc->SSC_TFMR = 0;
  401878:	2300      	movs	r3, #0
  40187a:	61c3      	str	r3, [r0, #28]
  40187c:	e7f7      	b.n	40186e <ssc_set_transmitter+0x64>

0040187e <ssc_disable_interrupt>:
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void ssc_disable_interrupt(Ssc *p_ssc, uint32_t ul_sources)
{
	p_ssc->SSC_IDR = ul_sources;
  40187e:	6481      	str	r1, [r0, #72]	; 0x48
  401880:	4770      	bx	lr
	...

00401884 <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401884:	4b28      	ldr	r3, [pc, #160]	; (401928 <twihs_set_speed+0xa4>)
  401886:	4299      	cmp	r1, r3
  401888:	d84b      	bhi.n	401922 <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  40188a:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  40188e:	4299      	cmp	r1, r3
  401890:	d92d      	bls.n	4018ee <twihs_set_speed+0x6a>
{
  401892:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401894:	4c25      	ldr	r4, [pc, #148]	; (40192c <twihs_set_speed+0xa8>)
  401896:	fba4 3402 	umull	r3, r4, r4, r2
  40189a:	0ba4      	lsrs	r4, r4, #14
  40189c:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  40189e:	4b24      	ldr	r3, [pc, #144]	; (401930 <twihs_set_speed+0xac>)
  4018a0:	440b      	add	r3, r1
  4018a2:	009b      	lsls	r3, r3, #2
  4018a4:	fbb2 f2f3 	udiv	r2, r2, r3
  4018a8:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4018aa:	2cff      	cmp	r4, #255	; 0xff
  4018ac:	d91d      	bls.n	4018ea <twihs_set_speed+0x66>
  4018ae:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  4018b0:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  4018b2:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4018b4:	2cff      	cmp	r4, #255	; 0xff
  4018b6:	d901      	bls.n	4018bc <twihs_set_speed+0x38>
  4018b8:	2906      	cmp	r1, #6
  4018ba:	d9f9      	bls.n	4018b0 <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4018bc:	2aff      	cmp	r2, #255	; 0xff
  4018be:	d907      	bls.n	4018d0 <twihs_set_speed+0x4c>
  4018c0:	2906      	cmp	r1, #6
  4018c2:	d805      	bhi.n	4018d0 <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  4018c4:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  4018c6:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4018c8:	2aff      	cmp	r2, #255	; 0xff
  4018ca:	d901      	bls.n	4018d0 <twihs_set_speed+0x4c>
  4018cc:	2906      	cmp	r1, #6
  4018ce:	d9f9      	bls.n	4018c4 <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  4018d0:	0213      	lsls	r3, r2, #8
  4018d2:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  4018d4:	0409      	lsls	r1, r1, #16
  4018d6:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  4018da:	430b      	orrs	r3, r1
  4018dc:	b2e4      	uxtb	r4, r4
  4018de:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  4018e0:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  4018e2:	2000      	movs	r0, #0
}
  4018e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4018e8:	4770      	bx	lr
	uint32_t ckdiv = 0;
  4018ea:	2100      	movs	r1, #0
  4018ec:	e7e6      	b.n	4018bc <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4018ee:	0049      	lsls	r1, r1, #1
  4018f0:	fbb2 f2f1 	udiv	r2, r2, r1
  4018f4:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4018f6:	2aff      	cmp	r2, #255	; 0xff
  4018f8:	d911      	bls.n	40191e <twihs_set_speed+0x9a>
  4018fa:	2300      	movs	r3, #0
			ckdiv++;
  4018fc:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  4018fe:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401900:	2aff      	cmp	r2, #255	; 0xff
  401902:	d901      	bls.n	401908 <twihs_set_speed+0x84>
  401904:	2b06      	cmp	r3, #6
  401906:	d9f9      	bls.n	4018fc <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401908:	0211      	lsls	r1, r2, #8
  40190a:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  40190c:	041b      	lsls	r3, r3, #16
  40190e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401912:	430b      	orrs	r3, r1
  401914:	b2d2      	uxtb	r2, r2
  401916:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  401918:	6102      	str	r2, [r0, #16]
	return PASS;
  40191a:	2000      	movs	r0, #0
  40191c:	4770      	bx	lr
	uint32_t ckdiv = 0;
  40191e:	2300      	movs	r3, #0
  401920:	e7f2      	b.n	401908 <twihs_set_speed+0x84>
		return FAIL;
  401922:	2001      	movs	r0, #1
  401924:	4770      	bx	lr
  401926:	bf00      	nop
  401928:	00061a80 	.word	0x00061a80
  40192c:	057619f1 	.word	0x057619f1
  401930:	3ffd1200 	.word	0x3ffd1200

00401934 <twihs_master_init>:
{
  401934:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  401936:	f04f 32ff 	mov.w	r2, #4294967295
  40193a:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  40193c:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  40193e:	2280      	movs	r2, #128	; 0x80
  401940:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  401942:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401944:	2208      	movs	r2, #8
  401946:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  401948:	2220      	movs	r2, #32
  40194a:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  40194c:	2204      	movs	r2, #4
  40194e:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401950:	680a      	ldr	r2, [r1, #0]
  401952:	6849      	ldr	r1, [r1, #4]
  401954:	4b03      	ldr	r3, [pc, #12]	; (401964 <twihs_master_init+0x30>)
  401956:	4798      	blx	r3
}
  401958:	2801      	cmp	r0, #1
  40195a:	bf14      	ite	ne
  40195c:	2000      	movne	r0, #0
  40195e:	2001      	moveq	r0, #1
  401960:	bd08      	pop	{r3, pc}
  401962:	bf00      	nop
  401964:	00401885 	.word	0x00401885

00401968 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  401968:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  40196a:	2a00      	cmp	r2, #0
  40196c:	d04c      	beq.n	401a08 <twihs_master_read+0xa0>
{
  40196e:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401970:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401972:	2600      	movs	r6, #0
  401974:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401976:	684b      	ldr	r3, [r1, #4]
  401978:	021b      	lsls	r3, r3, #8
  40197a:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  40197e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  401982:	7c0d      	ldrb	r5, [r1, #16]
  401984:	042d      	lsls	r5, r5, #16
  401986:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  40198a:	432b      	orrs	r3, r5
  40198c:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  40198e:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401990:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  401992:	b15d      	cbz	r5, 4019ac <twihs_master_read+0x44>
	val = addr[0];
  401994:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  401996:	2d01      	cmp	r5, #1
  401998:	dd02      	ble.n	4019a0 <twihs_master_read+0x38>
		val |= addr[1];
  40199a:	784e      	ldrb	r6, [r1, #1]
  40199c:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	if (len > 2) {
  4019a0:	2d02      	cmp	r5, #2
  4019a2:	dd04      	ble.n	4019ae <twihs_master_read+0x46>
		val |= addr[2];
  4019a4:	7889      	ldrb	r1, [r1, #2]
  4019a6:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  4019aa:	e000      	b.n	4019ae <twihs_master_read+0x46>
		return 0;
  4019ac:	2300      	movs	r3, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4019ae:	60c3      	str	r3, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  4019b0:	2301      	movs	r3, #1
  4019b2:	6003      	str	r3, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4019b4:	2502      	movs	r5, #2
  4019b6:	e012      	b.n	4019de <twihs_master_read+0x76>
  4019b8:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  4019ba:	f013 0f02 	tst.w	r3, #2
  4019be:	d01b      	beq.n	4019f8 <twihs_master_read+0x90>
		*buffer++ = p_twihs->TWIHS_RHR;
  4019c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4019c2:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4019c4:	6a03      	ldr	r3, [r0, #32]
  4019c6:	f013 0f01 	tst.w	r3, #1
  4019ca:	d0fb      	beq.n	4019c4 <twihs_master_read+0x5c>
	p_twihs->TWIHS_SR;
  4019cc:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  4019ce:	2000      	movs	r0, #0
}
  4019d0:	bc70      	pop	{r4, r5, r6}
  4019d2:	4770      	bx	lr
		*buffer++ = p_twihs->TWIHS_RHR;
  4019d4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4019d6:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt > 0) {
  4019da:	3a01      	subs	r2, #1
  4019dc:	d0f2      	beq.n	4019c4 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  4019de:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4019e0:	f413 7f80 	tst.w	r3, #256	; 0x100
  4019e4:	d114      	bne.n	401a10 <twihs_master_read+0xa8>
  4019e6:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  4019ea:	2a01      	cmp	r2, #1
  4019ec:	d0e4      	beq.n	4019b8 <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  4019ee:	f013 0f02 	tst.w	r3, #2
  4019f2:	d1ef      	bne.n	4019d4 <twihs_master_read+0x6c>
	while (cnt > 0) {
  4019f4:	2a00      	cmp	r2, #0
  4019f6:	d0e5      	beq.n	4019c4 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  4019f8:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4019fa:	f413 7f80 	tst.w	r3, #256	; 0x100
  4019fe:	d105      	bne.n	401a0c <twihs_master_read+0xa4>
		if (!timeout--) {
  401a00:	3901      	subs	r1, #1
  401a02:	d1f2      	bne.n	4019ea <twihs_master_read+0x82>
			return TWIHS_ERROR_TIMEOUT;
  401a04:	2009      	movs	r0, #9
  401a06:	e7e3      	b.n	4019d0 <twihs_master_read+0x68>
		return TWIHS_INVALID_ARGUMENT;
  401a08:	2001      	movs	r0, #1
  401a0a:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401a0c:	2005      	movs	r0, #5
  401a0e:	e7df      	b.n	4019d0 <twihs_master_read+0x68>
  401a10:	2005      	movs	r0, #5
  401a12:	e7dd      	b.n	4019d0 <twihs_master_read+0x68>

00401a14 <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  401a14:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  401a16:	2b00      	cmp	r3, #0
  401a18:	d043      	beq.n	401aa2 <twihs_master_write+0x8e>
{
  401a1a:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401a1c:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401a1e:	2600      	movs	r6, #0
  401a20:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401a22:	7c0a      	ldrb	r2, [r1, #16]
  401a24:	0412      	lsls	r2, r2, #16
  401a26:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401a2a:	684d      	ldr	r5, [r1, #4]
  401a2c:	022d      	lsls	r5, r5, #8
  401a2e:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401a32:	432a      	orrs	r2, r5
  401a34:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401a36:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401a38:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  401a3a:	b15d      	cbz	r5, 401a54 <twihs_master_write+0x40>
	val = addr[0];
  401a3c:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  401a3e:	2d01      	cmp	r5, #1
  401a40:	dd02      	ble.n	401a48 <twihs_master_write+0x34>
		val |= addr[1];
  401a42:	784e      	ldrb	r6, [r1, #1]
  401a44:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  401a48:	2d02      	cmp	r5, #2
  401a4a:	dd04      	ble.n	401a56 <twihs_master_write+0x42>
		val |= addr[2];
  401a4c:	7889      	ldrb	r1, [r1, #2]
  401a4e:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  401a52:	e000      	b.n	401a56 <twihs_master_write+0x42>
		return 0;
  401a54:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401a56:	60c2      	str	r2, [r0, #12]
  401a58:	e004      	b.n	401a64 <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  401a5a:	f814 2b01 	ldrb.w	r2, [r4], #1
  401a5e:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  401a60:	3b01      	subs	r3, #1
  401a62:	d00f      	beq.n	401a84 <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  401a64:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401a66:	f412 7f80 	tst.w	r2, #256	; 0x100
  401a6a:	d11e      	bne.n	401aaa <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  401a6c:	f012 0f04 	tst.w	r2, #4
  401a70:	d1f3      	bne.n	401a5a <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  401a72:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401a74:	f412 7f80 	tst.w	r2, #256	; 0x100
  401a78:	d115      	bne.n	401aa6 <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  401a7a:	f012 0f04 	tst.w	r2, #4
  401a7e:	d1ec      	bne.n	401a5a <twihs_master_write+0x46>
	while (cnt > 0) {
  401a80:	2b00      	cmp	r3, #0
  401a82:	d1f6      	bne.n	401a72 <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  401a84:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401a86:	f413 7f80 	tst.w	r3, #256	; 0x100
  401a8a:	d111      	bne.n	401ab0 <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  401a8c:	f013 0f04 	tst.w	r3, #4
  401a90:	d0f8      	beq.n	401a84 <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401a92:	2302      	movs	r3, #2
  401a94:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401a96:	6a03      	ldr	r3, [r0, #32]
  401a98:	f013 0f01 	tst.w	r3, #1
  401a9c:	d0fb      	beq.n	401a96 <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  401a9e:	2000      	movs	r0, #0
  401aa0:	e004      	b.n	401aac <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  401aa2:	2001      	movs	r0, #1
  401aa4:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401aa6:	2005      	movs	r0, #5
  401aa8:	e000      	b.n	401aac <twihs_master_write+0x98>
  401aaa:	2005      	movs	r0, #5
}
  401aac:	bc70      	pop	{r4, r5, r6}
  401aae:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401ab0:	2005      	movs	r0, #5
  401ab2:	e7fb      	b.n	401aac <twihs_master_write+0x98>

00401ab4 <xdmac_configure_transfer>:
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  401ab4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  401ab8:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  401aba:	6853      	ldr	r3, [r2, #4]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  401abc:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  401abe:	6893      	ldr	r3, [r2, #8]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  401ac0:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  401ac2:	6813      	ldr	r3, [r2, #0]
  401ac4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401ac8:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  401aca:	6913      	ldr	r3, [r2, #16]
  401acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
  401ad0:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  401ad2:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  401ad4:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  401ad6:	6993      	ldr	r3, [r2, #24]
  401ad8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401adc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  401ae0:	69d3      	ldr	r3, [r2, #28]
  401ae2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401ae6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  401aea:	68d3      	ldr	r3, [r2, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  401aec:	678b      	str	r3, [r1, #120]	; 0x78
  401aee:	4770      	bx	lr

00401af0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401af0:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401af2:	4810      	ldr	r0, [pc, #64]	; (401b34 <sysclk_init+0x44>)
  401af4:	4b10      	ldr	r3, [pc, #64]	; (401b38 <sysclk_init+0x48>)
  401af6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401af8:	213e      	movs	r1, #62	; 0x3e
  401afa:	2000      	movs	r0, #0
  401afc:	4b0f      	ldr	r3, [pc, #60]	; (401b3c <sysclk_init+0x4c>)
  401afe:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  401b00:	4c0f      	ldr	r4, [pc, #60]	; (401b40 <sysclk_init+0x50>)
  401b02:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  401b04:	2800      	cmp	r0, #0
  401b06:	d0fc      	beq.n	401b02 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  401b08:	4b0e      	ldr	r3, [pc, #56]	; (401b44 <sysclk_init+0x54>)
  401b0a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401b0c:	4a0e      	ldr	r2, [pc, #56]	; (401b48 <sysclk_init+0x58>)
  401b0e:	4b0f      	ldr	r3, [pc, #60]	; (401b4c <sysclk_init+0x5c>)
  401b10:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  401b12:	4c0f      	ldr	r4, [pc, #60]	; (401b50 <sysclk_init+0x60>)
  401b14:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401b16:	2800      	cmp	r0, #0
  401b18:	d0fc      	beq.n	401b14 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  401b1a:	2002      	movs	r0, #2
  401b1c:	4b0d      	ldr	r3, [pc, #52]	; (401b54 <sysclk_init+0x64>)
  401b1e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401b20:	2000      	movs	r0, #0
  401b22:	4b0d      	ldr	r3, [pc, #52]	; (401b58 <sysclk_init+0x68>)
  401b24:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401b26:	4b0d      	ldr	r3, [pc, #52]	; (401b5c <sysclk_init+0x6c>)
  401b28:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401b2a:	4802      	ldr	r0, [pc, #8]	; (401b34 <sysclk_init+0x44>)
  401b2c:	4b02      	ldr	r3, [pc, #8]	; (401b38 <sysclk_init+0x48>)
  401b2e:	4798      	blx	r3
  401b30:	bd10      	pop	{r4, pc}
  401b32:	bf00      	nop
  401b34:	11e1a300 	.word	0x11e1a300
  401b38:	004025b5 	.word	0x004025b5
  401b3c:	00402299 	.word	0x00402299
  401b40:	004022ed 	.word	0x004022ed
  401b44:	004022fd 	.word	0x004022fd
  401b48:	20183f01 	.word	0x20183f01
  401b4c:	400e0600 	.word	0x400e0600
  401b50:	0040230d 	.word	0x0040230d
  401b54:	004021fd 	.word	0x004021fd
  401b58:	00402235 	.word	0x00402235
  401b5c:	004024a9 	.word	0x004024a9

00401b60 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  401b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401b62:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401b66:	4b99      	ldr	r3, [pc, #612]	; (401dcc <board_init+0x26c>)
  401b68:	605a      	str	r2, [r3, #4]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401b6a:	f3bf 8f5f 	dmb	sy
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  401b6e:	4f98      	ldr	r7, [pc, #608]	; (401dd0 <board_init+0x270>)
  401b70:	4638      	mov	r0, r7
  401b72:	4d98      	ldr	r5, [pc, #608]	; (401dd4 <board_init+0x274>)
  401b74:	47a8      	blx	r5
	dw_region_attr =
  401b76:	4e98      	ldr	r6, [pc, #608]	; (401dd8 <board_init+0x278>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401b78:	ea40 0106 	orr.w	r1, r0, r6
  401b7c:	2011      	movs	r0, #17
  401b7e:	4c97      	ldr	r4, [pc, #604]	; (401ddc <board_init+0x27c>)
  401b80:	47a0      	blx	r4
		mpu_cal_mpu_region_size(IFLASH_END_ADDRESS - IFLASH_START_ADDRESS) |
  401b82:	4897      	ldr	r0, [pc, #604]	; (401de0 <board_init+0x280>)
  401b84:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401b86:	4997      	ldr	r1, [pc, #604]	; (401de4 <board_init+0x284>)
  401b88:	4301      	orrs	r1, r0
  401b8a:	4897      	ldr	r0, [pc, #604]	; (401de8 <board_init+0x288>)
  401b8c:	47a0      	blx	r4
		mpu_cal_mpu_region_size(DTCM_END_ADDRESS - DTCM_START_ADDRESS) |
  401b8e:	4638      	mov	r0, r7
  401b90:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401b92:	ea40 0106 	orr.w	r1, r0, r6
  401b96:	4895      	ldr	r0, [pc, #596]	; (401dec <board_init+0x28c>)
  401b98:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SRAM_FIRST_END_ADDRESS - SRAM_FIRST_START_ADDRESS)
  401b9a:	4895      	ldr	r0, [pc, #596]	; (401df0 <board_init+0x290>)
  401b9c:	47a8      	blx	r5
	dw_region_attr =
  401b9e:	f106 7608 	add.w	r6, r6, #35651584	; 0x2200000
  401ba2:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401ba6:	ea40 0106 	orr.w	r1, r0, r6
  401baa:	4892      	ldr	r0, [pc, #584]	; (401df4 <board_init+0x294>)
  401bac:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SRAM_SECOND_END_ADDRESS - SRAM_SECOND_START_ADDRESS) |
  401bae:	4892      	ldr	r0, [pc, #584]	; (401df8 <board_init+0x298>)
  401bb0:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401bb2:	ea40 0106 	orr.w	r1, r0, r6
  401bb6:	4891      	ldr	r0, [pc, #580]	; (401dfc <board_init+0x29c>)
  401bb8:	47a0      	blx	r4
		mpu_cal_mpu_region_size(PERIPHERALS_END_ADDRESS - PERIPHERALS_START_ADDRESS)
  401bba:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  401bbe:	47a8      	blx	r5
	dw_region_attr = MPU_AP_FULL_ACCESS |
  401bc0:	4e8f      	ldr	r6, [pc, #572]	; (401e00 <board_init+0x2a0>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401bc2:	ea40 0106 	orr.w	r1, r0, r6
  401bc6:	488f      	ldr	r0, [pc, #572]	; (401e04 <board_init+0x2a4>)
  401bc8:	47a0      	blx	r4
		mpu_cal_mpu_region_size(EXT_EBI_END_ADDRESS - EXT_EBI_START_ADDRESS) |
  401bca:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  401bce:	47a8      	blx	r5
	dw_region_attr =
  401bd0:	4f8d      	ldr	r7, [pc, #564]	; (401e08 <board_init+0x2a8>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401bd2:	ea40 0107 	orr.w	r1, r0, r7
  401bd6:	488d      	ldr	r0, [pc, #564]	; (401e0c <board_init+0x2ac>)
  401bd8:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SDRAM_END_ADDRESS - SDRAM_START_ADDRESS) |
  401bda:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  401bde:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401be0:	498b      	ldr	r1, [pc, #556]	; (401e10 <board_init+0x2b0>)
  401be2:	4301      	orrs	r1, r0
  401be4:	488b      	ldr	r0, [pc, #556]	; (401e14 <board_init+0x2b4>)
  401be6:	47a0      	blx	r4
		mpu_cal_mpu_region_size(QSPI_END_ADDRESS - QSPI_START_ADDRESS) |
  401be8:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  401bec:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401bee:	ea40 0107 	orr.w	r1, r0, r7
  401bf2:	4889      	ldr	r0, [pc, #548]	; (401e18 <board_init+0x2b8>)
  401bf4:	47a0      	blx	r4
		mpu_cal_mpu_region_size(USBHSRAM_END_ADDRESS - USBHSRAM_START_ADDRESS) |
  401bf6:	4889      	ldr	r0, [pc, #548]	; (401e1c <board_init+0x2bc>)
  401bf8:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401bfa:	ea40 0106 	orr.w	r1, r0, r6
  401bfe:	4888      	ldr	r0, [pc, #544]	; (401e20 <board_init+0x2c0>)
  401c00:	47a0      	blx	r4
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  401c02:	4c88      	ldr	r4, [pc, #544]	; (401e24 <board_init+0x2c4>)
  401c04:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401c06:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
  401c0a:	6263      	str	r3, [r4, #36]	; 0x24
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  401c0c:	2005      	movs	r0, #5
  401c0e:	4b86      	ldr	r3, [pc, #536]	; (401e28 <board_init+0x2c8>)
  401c10:	4798      	blx	r3
  __ASM volatile ("dsb");
  401c12:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401c16:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401c1a:	4b84      	ldr	r3, [pc, #528]	; (401e2c <board_init+0x2cc>)
  401c1c:	4a84      	ldr	r2, [pc, #528]	; (401e30 <board_init+0x2d0>)
  401c1e:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401c20:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
  401c24:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  401c26:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401c2a:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  401c2e:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  401c32:	f023 0301 	bic.w	r3, r3, #1
  401c36:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  401c3a:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
  401c3e:	f023 0301 	bic.w	r3, r3, #1
  401c42:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  __ASM volatile ("dsb");
  401c46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401c4a:	f3bf 8f6f 	isb	sy
  401c4e:	200a      	movs	r0, #10
  401c50:	4c78      	ldr	r4, [pc, #480]	; (401e34 <board_init+0x2d4>)
  401c52:	47a0      	blx	r4
  401c54:	200b      	movs	r0, #11
  401c56:	47a0      	blx	r4
  401c58:	200c      	movs	r0, #12
  401c5a:	47a0      	blx	r4
  401c5c:	2010      	movs	r0, #16
  401c5e:	47a0      	blx	r4
  401c60:	2011      	movs	r0, #17
  401c62:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401c64:	4c74      	ldr	r4, [pc, #464]	; (401e38 <board_init+0x2d8>)
  401c66:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  401c6a:	6123      	str	r3, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401c6c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401c70:	6323      	str	r3, [r4, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401c72:	4e72      	ldr	r6, [pc, #456]	; (401e3c <board_init+0x2dc>)
  401c74:	f44f 7500 	mov.w	r5, #512	; 0x200
  401c78:	6135      	str	r5, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401c7a:	f8c6 50a0 	str.w	r5, [r6, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401c7e:	6335      	str	r5, [r6, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401c80:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401c82:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  401c86:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  401c88:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401c8c:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  401c8e:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  401c90:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  401c94:	6f23      	ldr	r3, [r4, #112]	; 0x70
  401c96:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  401c9a:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401c9c:	6f63      	ldr	r3, [r4, #116]	; 0x74
  401c9e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  401ca2:	6763      	str	r3, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  401ca4:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  401ca8:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  401cac:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  401cb0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  401cb4:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401cb6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401cba:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401cbc:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401cbe:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401cc2:	6f22      	ldr	r2, [r4, #112]	; 0x70
  401cc4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  401cc8:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401cca:	6f62      	ldr	r2, [r4, #116]	; 0x74
  401ccc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  401cd0:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401cd2:	6063      	str	r3, [r4, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  401cd4:	4a5a      	ldr	r2, [pc, #360]	; (401e40 <board_init+0x2e0>)
  401cd6:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  401cda:	f043 0310 	orr.w	r3, r3, #16
  401cde:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  401ce2:	f502 22b2 	add.w	r2, r2, #364544	; 0x59000
  401ce6:	2310      	movs	r3, #16
  401ce8:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401cea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  401cee:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  401cf0:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401cf2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401cf6:	6f11      	ldr	r1, [r2, #112]	; 0x70
  401cf8:	4319      	orrs	r1, r3
  401cfa:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401cfc:	6f51      	ldr	r1, [r2, #116]	; 0x74
  401cfe:	4319      	orrs	r1, r3
  401d00:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401d02:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  401d04:	2208      	movs	r2, #8
  401d06:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401d08:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401d0c:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401d0e:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401d10:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401d14:	6f21      	ldr	r1, [r4, #112]	; 0x70
  401d16:	f021 0108 	bic.w	r1, r1, #8
  401d1a:	6721      	str	r1, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401d1c:	6f61      	ldr	r1, [r4, #116]	; 0x74
  401d1e:	f021 0108 	bic.w	r1, r1, #8
  401d22:	6761      	str	r1, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401d24:	6062      	str	r2, [r4, #4]
		base->PIO_PUDR = mask;
  401d26:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401d28:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401d2c:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401d2e:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401d30:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401d34:	6f22      	ldr	r2, [r4, #112]	; 0x70
  401d36:	f022 0210 	bic.w	r2, r2, #16
  401d3a:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401d3c:	6f62      	ldr	r2, [r4, #116]	; 0x74
  401d3e:	f022 0210 	bic.w	r2, r2, #16
  401d42:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401d44:	6063      	str	r3, [r4, #4]
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  401d46:	2300      	movs	r3, #0
  401d48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401d4c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401d50:	4630      	mov	r0, r6
  401d52:	4f3c      	ldr	r7, [pc, #240]	; (401e44 <board_init+0x2e4>)
  401d54:	47b8      	blx	r7
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  401d56:	2300      	movs	r3, #0
  401d58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401d5c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401d60:	4630      	mov	r0, r6
  401d62:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  401d64:	2301      	movs	r3, #1
  401d66:	22ff      	movs	r2, #255	; 0xff
  401d68:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401d6c:	4630      	mov	r0, r6
  401d6e:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  401d70:	2301      	movs	r3, #1
  401d72:	223f      	movs	r2, #63	; 0x3f
  401d74:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401d78:	4833      	ldr	r0, [pc, #204]	; (401e48 <board_init+0x2e8>)
  401d7a:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  401d7c:	2301      	movs	r3, #1
  401d7e:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  401d82:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401d86:	4620      	mov	r0, r4
  401d88:	47b8      	blx	r7
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  401d8a:	2301      	movs	r3, #1
  401d8c:	f44f 7280 	mov.w	r2, #256	; 0x100
  401d90:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401d94:	4630      	mov	r0, r6
  401d96:	47b8      	blx	r7
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  401d98:	2301      	movs	r3, #1
  401d9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401d9e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401da2:	4630      	mov	r0, r6
  401da4:	47b8      	blx	r7
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  401da6:	2301      	movs	r3, #1
  401da8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401dac:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401db0:	4826      	ldr	r0, [pc, #152]	; (401e4c <board_init+0x2ec>)
  401db2:	47b8      	blx	r7
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  401db4:	2300      	movs	r3, #0
  401db6:	462a      	mov	r2, r5
  401db8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401dbc:	4630      	mov	r0, r6
  401dbe:	47b8      	blx	r7
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  401dc0:	4629      	mov	r1, r5
  401dc2:	4630      	mov	r0, r6
  401dc4:	4b22      	ldr	r3, [pc, #136]	; (401e50 <board_init+0x2f0>)
  401dc6:	4798      	blx	r3
  401dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401dca:	bf00      	nop
  401dcc:	400e1850 	.word	0x400e1850
  401dd0:	003fffff 	.word	0x003fffff
  401dd4:	00401e6d 	.word	0x00401e6d
  401dd8:	01000001 	.word	0x01000001
  401ddc:	00401e61 	.word	0x00401e61
  401de0:	001fffff 	.word	0x001fffff
  401de4:	06230001 	.word	0x06230001
  401de8:	00400012 	.word	0x00400012
  401dec:	20000013 	.word	0x20000013
  401df0:	0003ffff 	.word	0x0003ffff
  401df4:	20400014 	.word	0x20400014
  401df8:	0001ffff 	.word	0x0001ffff
  401dfc:	20440015 	.word	0x20440015
  401e00:	13010001 	.word	0x13010001
  401e04:	40000016 	.word	0x40000016
  401e08:	03000001 	.word	0x03000001
  401e0c:	60000017 	.word	0x60000017
  401e10:	03250001 	.word	0x03250001
  401e14:	70000018 	.word	0x70000018
  401e18:	80000019 	.word	0x80000019
  401e1c:	000fffff 	.word	0x000fffff
  401e20:	a010001a 	.word	0xa010001a
  401e24:	e000ed00 	.word	0xe000ed00
  401e28:	00401e55 	.word	0x00401e55
  401e2c:	400e0c00 	.word	0x400e0c00
  401e30:	5a00080c 	.word	0x5a00080c
  401e34:	0040231d 	.word	0x0040231d
  401e38:	400e0e00 	.word	0x400e0e00
  401e3c:	400e1200 	.word	0x400e1200
  401e40:	40088000 	.word	0x40088000
  401e44:	00401f81 	.word	0x00401f81
  401e48:	400e1600 	.word	0x400e1600
  401e4c:	400e1400 	.word	0x400e1400
  401e50:	00401e89 	.word	0x00401e89

00401e54 <mpu_enable>:
 *
 * \param dwMPUEnable  Enable/Disable the memory region.
 */
void mpu_enable(uint32_t dw_mpu_enable)
{
	MPU->CTRL = dw_mpu_enable ;
  401e54:	4b01      	ldr	r3, [pc, #4]	; (401e5c <mpu_enable+0x8>)
  401e56:	6058      	str	r0, [r3, #4]
  401e58:	4770      	bx	lr
  401e5a:	bf00      	nop
  401e5c:	e000ed90 	.word	0xe000ed90

00401e60 <mpu_set_region>:
 * \param dwRegionBaseAddr  Memory region base address.
 * \param dwRegionAttr  Memory region attributes.
 */
void mpu_set_region(uint32_t dw_region_base_addr, uint32_t dw_region_attr)
{
	MPU->RBAR = dw_region_base_addr;
  401e60:	4b01      	ldr	r3, [pc, #4]	; (401e68 <mpu_set_region+0x8>)
  401e62:	60d8      	str	r0, [r3, #12]
	MPU->RASR = dw_region_attr;
  401e64:	6119      	str	r1, [r3, #16]
  401e66:	4770      	bx	lr
  401e68:	e000ed90 	.word	0xe000ed90

00401e6c <mpu_cal_mpu_region_size>:
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;

	while( dwReturnValue < 31 ) {
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  401e6c:	2820      	cmp	r0, #32
  401e6e:	d909      	bls.n	401e84 <mpu_cal_mpu_region_size+0x18>
  401e70:	2304      	movs	r3, #4
  401e72:	2220      	movs	r2, #32
			break;
		} else {
			dwReturnValue++;
  401e74:	3301      	adds	r3, #1
		}
		dwRegionSize <<= 1;
  401e76:	0052      	lsls	r2, r2, #1
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  401e78:	4290      	cmp	r0, r2
  401e7a:	d901      	bls.n	401e80 <mpu_cal_mpu_region_size+0x14>
  401e7c:	2b1e      	cmp	r3, #30
  401e7e:	d9f9      	bls.n	401e74 <mpu_cal_mpu_region_size+0x8>
	}

	return ( dwReturnValue << 1 );
}
  401e80:	0058      	lsls	r0, r3, #1
  401e82:	4770      	bx	lr
	uint32_t dwReturnValue = 4;
  401e84:	2304      	movs	r3, #4
  401e86:	e7fb      	b.n	401e80 <mpu_cal_mpu_region_size+0x14>

00401e88 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  401e88:	6301      	str	r1, [r0, #48]	; 0x30
  401e8a:	4770      	bx	lr

00401e8c <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  401e8c:	6341      	str	r1, [r0, #52]	; 0x34
  401e8e:	4770      	bx	lr

00401e90 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401e90:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401e92:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401e96:	d03a      	beq.n	401f0e <pio_set_peripheral+0x7e>
  401e98:	d813      	bhi.n	401ec2 <pio_set_peripheral+0x32>
  401e9a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401e9e:	d025      	beq.n	401eec <pio_set_peripheral+0x5c>
  401ea0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401ea4:	d10a      	bne.n	401ebc <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401ea6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401ea8:	4313      	orrs	r3, r2
  401eaa:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401eac:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401eae:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401eb0:	400b      	ands	r3, r1
  401eb2:	ea23 0302 	bic.w	r3, r3, r2
  401eb6:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401eb8:	6042      	str	r2, [r0, #4]
  401eba:	4770      	bx	lr
	switch (ul_type) {
  401ebc:	2900      	cmp	r1, #0
  401ebe:	d1fb      	bne.n	401eb8 <pio_set_peripheral+0x28>
  401ec0:	4770      	bx	lr
  401ec2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401ec6:	d021      	beq.n	401f0c <pio_set_peripheral+0x7c>
  401ec8:	d809      	bhi.n	401ede <pio_set_peripheral+0x4e>
  401eca:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401ece:	d1f3      	bne.n	401eb8 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401ed0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401ed2:	4313      	orrs	r3, r2
  401ed4:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401ed6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401ed8:	4313      	orrs	r3, r2
  401eda:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401edc:	e7ec      	b.n	401eb8 <pio_set_peripheral+0x28>
	switch (ul_type) {
  401ede:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401ee2:	d013      	beq.n	401f0c <pio_set_peripheral+0x7c>
  401ee4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401ee8:	d010      	beq.n	401f0c <pio_set_peripheral+0x7c>
  401eea:	e7e5      	b.n	401eb8 <pio_set_peripheral+0x28>
{
  401eec:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  401eee:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401ef0:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401ef2:	43d3      	mvns	r3, r2
  401ef4:	4021      	ands	r1, r4
  401ef6:	461c      	mov	r4, r3
  401ef8:	4019      	ands	r1, r3
  401efa:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401efc:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401efe:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401f00:	400b      	ands	r3, r1
  401f02:	4023      	ands	r3, r4
  401f04:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  401f06:	6042      	str	r2, [r0, #4]
}
  401f08:	f85d 4b04 	ldr.w	r4, [sp], #4
  401f0c:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  401f0e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401f10:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401f12:	400b      	ands	r3, r1
  401f14:	ea23 0302 	bic.w	r3, r3, r2
  401f18:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401f1a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401f1c:	4313      	orrs	r3, r2
  401f1e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401f20:	e7ca      	b.n	401eb8 <pio_set_peripheral+0x28>

00401f22 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401f22:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401f24:	f012 0f01 	tst.w	r2, #1
  401f28:	d10d      	bne.n	401f46 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  401f2a:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401f2c:	f012 0f0a 	tst.w	r2, #10
  401f30:	d00b      	beq.n	401f4a <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  401f32:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  401f34:	f012 0f02 	tst.w	r2, #2
  401f38:	d109      	bne.n	401f4e <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  401f3a:	f012 0f08 	tst.w	r2, #8
  401f3e:	d008      	beq.n	401f52 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  401f40:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  401f44:	e005      	b.n	401f52 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  401f46:	6641      	str	r1, [r0, #100]	; 0x64
  401f48:	e7f0      	b.n	401f2c <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  401f4a:	6241      	str	r1, [r0, #36]	; 0x24
  401f4c:	e7f2      	b.n	401f34 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  401f4e:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  401f52:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401f54:	6001      	str	r1, [r0, #0]
  401f56:	4770      	bx	lr

00401f58 <pio_set_output>:
{
  401f58:	b410      	push	{r4}
  401f5a:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  401f5c:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401f5e:	b94c      	cbnz	r4, 401f74 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  401f60:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  401f62:	b14b      	cbz	r3, 401f78 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  401f64:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  401f66:	b94a      	cbnz	r2, 401f7c <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  401f68:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  401f6a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401f6c:	6001      	str	r1, [r0, #0]
}
  401f6e:	f85d 4b04 	ldr.w	r4, [sp], #4
  401f72:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  401f74:	6641      	str	r1, [r0, #100]	; 0x64
  401f76:	e7f4      	b.n	401f62 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  401f78:	6541      	str	r1, [r0, #84]	; 0x54
  401f7a:	e7f4      	b.n	401f66 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  401f7c:	6301      	str	r1, [r0, #48]	; 0x30
  401f7e:	e7f4      	b.n	401f6a <pio_set_output+0x12>

00401f80 <pio_configure>:
{
  401f80:	b570      	push	{r4, r5, r6, lr}
  401f82:	b082      	sub	sp, #8
  401f84:	4605      	mov	r5, r0
  401f86:	4616      	mov	r6, r2
  401f88:	461c      	mov	r4, r3
	switch (ul_type) {
  401f8a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401f8e:	d014      	beq.n	401fba <pio_configure+0x3a>
  401f90:	d90a      	bls.n	401fa8 <pio_configure+0x28>
  401f92:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401f96:	d024      	beq.n	401fe2 <pio_configure+0x62>
  401f98:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401f9c:	d021      	beq.n	401fe2 <pio_configure+0x62>
  401f9e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401fa2:	d017      	beq.n	401fd4 <pio_configure+0x54>
		return 0;
  401fa4:	2000      	movs	r0, #0
  401fa6:	e01a      	b.n	401fde <pio_configure+0x5e>
	switch (ul_type) {
  401fa8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401fac:	d005      	beq.n	401fba <pio_configure+0x3a>
  401fae:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401fb2:	d002      	beq.n	401fba <pio_configure+0x3a>
  401fb4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401fb8:	d1f4      	bne.n	401fa4 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  401fba:	4632      	mov	r2, r6
  401fbc:	4628      	mov	r0, r5
  401fbe:	4b11      	ldr	r3, [pc, #68]	; (402004 <pio_configure+0x84>)
  401fc0:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401fc2:	f014 0f01 	tst.w	r4, #1
  401fc6:	d102      	bne.n	401fce <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  401fc8:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  401fca:	2001      	movs	r0, #1
  401fcc:	e007      	b.n	401fde <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  401fce:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  401fd0:	2001      	movs	r0, #1
  401fd2:	e004      	b.n	401fde <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  401fd4:	461a      	mov	r2, r3
  401fd6:	4631      	mov	r1, r6
  401fd8:	4b0b      	ldr	r3, [pc, #44]	; (402008 <pio_configure+0x88>)
  401fda:	4798      	blx	r3
	return 1;
  401fdc:	2001      	movs	r0, #1
}
  401fde:	b002      	add	sp, #8
  401fe0:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  401fe2:	f004 0301 	and.w	r3, r4, #1
  401fe6:	9300      	str	r3, [sp, #0]
  401fe8:	f3c4 0380 	ubfx	r3, r4, #2, #1
  401fec:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401ff0:	bf14      	ite	ne
  401ff2:	2200      	movne	r2, #0
  401ff4:	2201      	moveq	r2, #1
  401ff6:	4631      	mov	r1, r6
  401ff8:	4628      	mov	r0, r5
  401ffa:	4c04      	ldr	r4, [pc, #16]	; (40200c <pio_configure+0x8c>)
  401ffc:	47a0      	blx	r4
	return 1;
  401ffe:	2001      	movs	r0, #1
		break;
  402000:	e7ed      	b.n	401fde <pio_configure+0x5e>
  402002:	bf00      	nop
  402004:	00401e91 	.word	0x00401e91
  402008:	00401f23 	.word	0x00401f23
  40200c:	00401f59 	.word	0x00401f59

00402010 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  402010:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  402012:	4770      	bx	lr

00402014 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  402014:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  402016:	4770      	bx	lr

00402018 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  402018:	b570      	push	{r4, r5, r6, lr}
  40201a:	b082      	sub	sp, #8
  40201c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40201e:	4c46      	ldr	r4, [pc, #280]	; (402138 <pio_configure_pin+0x120>)
  402020:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  402024:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  402026:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  40202a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40202e:	d059      	beq.n	4020e4 <pio_configure_pin+0xcc>
  402030:	d80a      	bhi.n	402048 <pio_configure_pin+0x30>
  402032:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  402036:	d02f      	beq.n	402098 <pio_configure_pin+0x80>
  402038:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40203c:	d03f      	beq.n	4020be <pio_configure_pin+0xa6>
  40203e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  402042:	d016      	beq.n	402072 <pio_configure_pin+0x5a>
		return 0;
  402044:	2000      	movs	r0, #0
  402046:	e012      	b.n	40206e <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  402048:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40204c:	d05d      	beq.n	40210a <pio_configure_pin+0xf2>
  40204e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  402052:	d05a      	beq.n	40210a <pio_configure_pin+0xf2>
  402054:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  402058:	d1f4      	bne.n	402044 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40205a:	f000 011f 	and.w	r1, r0, #31
  40205e:	2601      	movs	r6, #1
  402060:	462a      	mov	r2, r5
  402062:	fa06 f101 	lsl.w	r1, r6, r1
  402066:	4620      	mov	r0, r4
  402068:	4b34      	ldr	r3, [pc, #208]	; (40213c <pio_configure_pin+0x124>)
  40206a:	4798      	blx	r3
	return 1;
  40206c:	4630      	mov	r0, r6
}
  40206e:	b002      	add	sp, #8
  402070:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  402072:	f000 001f 	and.w	r0, r0, #31
  402076:	2601      	movs	r6, #1
  402078:	4086      	lsls	r6, r0
  40207a:	4632      	mov	r2, r6
  40207c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402080:	4620      	mov	r0, r4
  402082:	4b2f      	ldr	r3, [pc, #188]	; (402140 <pio_configure_pin+0x128>)
  402084:	4798      	blx	r3
	if (ul_pull_up_enable) {
  402086:	f015 0f01 	tst.w	r5, #1
  40208a:	d102      	bne.n	402092 <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  40208c:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  40208e:	2001      	movs	r0, #1
  402090:	e7ed      	b.n	40206e <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  402092:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  402094:	2001      	movs	r0, #1
  402096:	e7ea      	b.n	40206e <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  402098:	f000 001f 	and.w	r0, r0, #31
  40209c:	2601      	movs	r6, #1
  40209e:	4086      	lsls	r6, r0
  4020a0:	4632      	mov	r2, r6
  4020a2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4020a6:	4620      	mov	r0, r4
  4020a8:	4b25      	ldr	r3, [pc, #148]	; (402140 <pio_configure_pin+0x128>)
  4020aa:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4020ac:	f015 0f01 	tst.w	r5, #1
  4020b0:	d102      	bne.n	4020b8 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  4020b2:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4020b4:	2001      	movs	r0, #1
  4020b6:	e7da      	b.n	40206e <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4020b8:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4020ba:	2001      	movs	r0, #1
  4020bc:	e7d7      	b.n	40206e <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4020be:	f000 001f 	and.w	r0, r0, #31
  4020c2:	2601      	movs	r6, #1
  4020c4:	4086      	lsls	r6, r0
  4020c6:	4632      	mov	r2, r6
  4020c8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4020cc:	4620      	mov	r0, r4
  4020ce:	4b1c      	ldr	r3, [pc, #112]	; (402140 <pio_configure_pin+0x128>)
  4020d0:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4020d2:	f015 0f01 	tst.w	r5, #1
  4020d6:	d102      	bne.n	4020de <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  4020d8:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4020da:	2001      	movs	r0, #1
  4020dc:	e7c7      	b.n	40206e <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4020de:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4020e0:	2001      	movs	r0, #1
  4020e2:	e7c4      	b.n	40206e <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4020e4:	f000 001f 	and.w	r0, r0, #31
  4020e8:	2601      	movs	r6, #1
  4020ea:	4086      	lsls	r6, r0
  4020ec:	4632      	mov	r2, r6
  4020ee:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4020f2:	4620      	mov	r0, r4
  4020f4:	4b12      	ldr	r3, [pc, #72]	; (402140 <pio_configure_pin+0x128>)
  4020f6:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4020f8:	f015 0f01 	tst.w	r5, #1
  4020fc:	d102      	bne.n	402104 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  4020fe:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  402100:	2001      	movs	r0, #1
  402102:	e7b4      	b.n	40206e <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  402104:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  402106:	2001      	movs	r0, #1
  402108:	e7b1      	b.n	40206e <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40210a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40210e:	f000 011f 	and.w	r1, r0, #31
  402112:	2601      	movs	r6, #1
  402114:	ea05 0306 	and.w	r3, r5, r6
  402118:	9300      	str	r3, [sp, #0]
  40211a:	f3c5 0380 	ubfx	r3, r5, #2, #1
  40211e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  402122:	bf14      	ite	ne
  402124:	2200      	movne	r2, #0
  402126:	2201      	moveq	r2, #1
  402128:	fa06 f101 	lsl.w	r1, r6, r1
  40212c:	4620      	mov	r0, r4
  40212e:	4c05      	ldr	r4, [pc, #20]	; (402144 <pio_configure_pin+0x12c>)
  402130:	47a0      	blx	r4
	return 1;
  402132:	4630      	mov	r0, r6
		break;
  402134:	e79b      	b.n	40206e <pio_configure_pin+0x56>
  402136:	bf00      	nop
  402138:	00200707 	.word	0x00200707
  40213c:	00401f23 	.word	0x00401f23
  402140:	00401e91 	.word	0x00401e91
  402144:	00401f59 	.word	0x00401f59

00402148 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  402148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40214c:	4604      	mov	r4, r0
  40214e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  402150:	4b0e      	ldr	r3, [pc, #56]	; (40218c <pio_handler_process+0x44>)
  402152:	4798      	blx	r3
  402154:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  402156:	4620      	mov	r0, r4
  402158:	4b0d      	ldr	r3, [pc, #52]	; (402190 <pio_handler_process+0x48>)
  40215a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40215c:	4005      	ands	r5, r0
  40215e:	d013      	beq.n	402188 <pio_handler_process+0x40>
  402160:	4c0c      	ldr	r4, [pc, #48]	; (402194 <pio_handler_process+0x4c>)
  402162:	f104 0660 	add.w	r6, r4, #96	; 0x60
  402166:	e003      	b.n	402170 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  402168:	42b4      	cmp	r4, r6
  40216a:	d00d      	beq.n	402188 <pio_handler_process+0x40>
  40216c:	3410      	adds	r4, #16
		while (status != 0) {
  40216e:	b15d      	cbz	r5, 402188 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  402170:	6820      	ldr	r0, [r4, #0]
  402172:	4540      	cmp	r0, r8
  402174:	d1f8      	bne.n	402168 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402176:	6861      	ldr	r1, [r4, #4]
  402178:	4229      	tst	r1, r5
  40217a:	d0f5      	beq.n	402168 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40217c:	68e3      	ldr	r3, [r4, #12]
  40217e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402180:	6863      	ldr	r3, [r4, #4]
  402182:	ea25 0503 	bic.w	r5, r5, r3
  402186:	e7ef      	b.n	402168 <pio_handler_process+0x20>
  402188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40218c:	00402011 	.word	0x00402011
  402190:	00402015 	.word	0x00402015
  402194:	20400d00 	.word	0x20400d00

00402198 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  402198:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40219a:	210a      	movs	r1, #10
  40219c:	4801      	ldr	r0, [pc, #4]	; (4021a4 <PIOA_Handler+0xc>)
  40219e:	4b02      	ldr	r3, [pc, #8]	; (4021a8 <PIOA_Handler+0x10>)
  4021a0:	4798      	blx	r3
  4021a2:	bd08      	pop	{r3, pc}
  4021a4:	400e0e00 	.word	0x400e0e00
  4021a8:	00402149 	.word	0x00402149

004021ac <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4021ac:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4021ae:	210b      	movs	r1, #11
  4021b0:	4801      	ldr	r0, [pc, #4]	; (4021b8 <PIOB_Handler+0xc>)
  4021b2:	4b02      	ldr	r3, [pc, #8]	; (4021bc <PIOB_Handler+0x10>)
  4021b4:	4798      	blx	r3
  4021b6:	bd08      	pop	{r3, pc}
  4021b8:	400e1000 	.word	0x400e1000
  4021bc:	00402149 	.word	0x00402149

004021c0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4021c0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4021c2:	210c      	movs	r1, #12
  4021c4:	4801      	ldr	r0, [pc, #4]	; (4021cc <PIOC_Handler+0xc>)
  4021c6:	4b02      	ldr	r3, [pc, #8]	; (4021d0 <PIOC_Handler+0x10>)
  4021c8:	4798      	blx	r3
  4021ca:	bd08      	pop	{r3, pc}
  4021cc:	400e1200 	.word	0x400e1200
  4021d0:	00402149 	.word	0x00402149

004021d4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4021d4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4021d6:	2110      	movs	r1, #16
  4021d8:	4801      	ldr	r0, [pc, #4]	; (4021e0 <PIOD_Handler+0xc>)
  4021da:	4b02      	ldr	r3, [pc, #8]	; (4021e4 <PIOD_Handler+0x10>)
  4021dc:	4798      	blx	r3
  4021de:	bd08      	pop	{r3, pc}
  4021e0:	400e1400 	.word	0x400e1400
  4021e4:	00402149 	.word	0x00402149

004021e8 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4021e8:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4021ea:	2111      	movs	r1, #17
  4021ec:	4801      	ldr	r0, [pc, #4]	; (4021f4 <PIOE_Handler+0xc>)
  4021ee:	4b02      	ldr	r3, [pc, #8]	; (4021f8 <PIOE_Handler+0x10>)
  4021f0:	4798      	blx	r3
  4021f2:	bd08      	pop	{r3, pc}
  4021f4:	400e1600 	.word	0x400e1600
  4021f8:	00402149 	.word	0x00402149

004021fc <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4021fc:	2803      	cmp	r0, #3
  4021fe:	d011      	beq.n	402224 <pmc_mck_set_division+0x28>
  402200:	2804      	cmp	r0, #4
  402202:	d012      	beq.n	40222a <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  402204:	2802      	cmp	r0, #2
  402206:	bf0c      	ite	eq
  402208:	f44f 7180 	moveq.w	r1, #256	; 0x100
  40220c:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40220e:	4a08      	ldr	r2, [pc, #32]	; (402230 <pmc_mck_set_division+0x34>)
  402210:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  402216:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  402218:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40221a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40221c:	f013 0f08 	tst.w	r3, #8
  402220:	d0fb      	beq.n	40221a <pmc_mck_set_division+0x1e>
}
  402222:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  402224:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  402228:	e7f1      	b.n	40220e <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40222a:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40222e:	e7ee      	b.n	40220e <pmc_mck_set_division+0x12>
  402230:	400e0600 	.word	0x400e0600

00402234 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402234:	4a17      	ldr	r2, [pc, #92]	; (402294 <pmc_switch_mck_to_pllack+0x60>)
  402236:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40223c:	4318      	orrs	r0, r3
  40223e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402240:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402242:	f013 0f08 	tst.w	r3, #8
  402246:	d10a      	bne.n	40225e <pmc_switch_mck_to_pllack+0x2a>
  402248:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40224c:	4911      	ldr	r1, [pc, #68]	; (402294 <pmc_switch_mck_to_pllack+0x60>)
  40224e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402250:	f012 0f08 	tst.w	r2, #8
  402254:	d103      	bne.n	40225e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402256:	3b01      	subs	r3, #1
  402258:	d1f9      	bne.n	40224e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40225a:	2001      	movs	r0, #1
  40225c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40225e:	4a0d      	ldr	r2, [pc, #52]	; (402294 <pmc_switch_mck_to_pllack+0x60>)
  402260:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402262:	f023 0303 	bic.w	r3, r3, #3
  402266:	f043 0302 	orr.w	r3, r3, #2
  40226a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40226c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40226e:	f013 0f08 	tst.w	r3, #8
  402272:	d10a      	bne.n	40228a <pmc_switch_mck_to_pllack+0x56>
  402274:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402278:	4906      	ldr	r1, [pc, #24]	; (402294 <pmc_switch_mck_to_pllack+0x60>)
  40227a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40227c:	f012 0f08 	tst.w	r2, #8
  402280:	d105      	bne.n	40228e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402282:	3b01      	subs	r3, #1
  402284:	d1f9      	bne.n	40227a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  402286:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  402288:	4770      	bx	lr
	return 0;
  40228a:	2000      	movs	r0, #0
  40228c:	4770      	bx	lr
  40228e:	2000      	movs	r0, #0
  402290:	4770      	bx	lr
  402292:	bf00      	nop
  402294:	400e0600 	.word	0x400e0600

00402298 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402298:	b9a0      	cbnz	r0, 4022c4 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40229a:	480e      	ldr	r0, [pc, #56]	; (4022d4 <pmc_switch_mainck_to_xtal+0x3c>)
  40229c:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40229e:	0209      	lsls	r1, r1, #8
  4022a0:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4022a2:	4a0d      	ldr	r2, [pc, #52]	; (4022d8 <pmc_switch_mainck_to_xtal+0x40>)
  4022a4:	401a      	ands	r2, r3
  4022a6:	4b0d      	ldr	r3, [pc, #52]	; (4022dc <pmc_switch_mainck_to_xtal+0x44>)
  4022a8:	4313      	orrs	r3, r2
  4022aa:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4022ac:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4022ae:	4602      	mov	r2, r0
  4022b0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4022b2:	f013 0f01 	tst.w	r3, #1
  4022b6:	d0fb      	beq.n	4022b0 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4022b8:	4a06      	ldr	r2, [pc, #24]	; (4022d4 <pmc_switch_mainck_to_xtal+0x3c>)
  4022ba:	6a11      	ldr	r1, [r2, #32]
  4022bc:	4b08      	ldr	r3, [pc, #32]	; (4022e0 <pmc_switch_mainck_to_xtal+0x48>)
  4022be:	430b      	orrs	r3, r1
  4022c0:	6213      	str	r3, [r2, #32]
  4022c2:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4022c4:	4903      	ldr	r1, [pc, #12]	; (4022d4 <pmc_switch_mainck_to_xtal+0x3c>)
  4022c6:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4022c8:	4a06      	ldr	r2, [pc, #24]	; (4022e4 <pmc_switch_mainck_to_xtal+0x4c>)
  4022ca:	401a      	ands	r2, r3
  4022cc:	4b06      	ldr	r3, [pc, #24]	; (4022e8 <pmc_switch_mainck_to_xtal+0x50>)
  4022ce:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4022d0:	620b      	str	r3, [r1, #32]
  4022d2:	4770      	bx	lr
  4022d4:	400e0600 	.word	0x400e0600
  4022d8:	ffc8fffc 	.word	0xffc8fffc
  4022dc:	00370001 	.word	0x00370001
  4022e0:	01370000 	.word	0x01370000
  4022e4:	fec8fffc 	.word	0xfec8fffc
  4022e8:	01370002 	.word	0x01370002

004022ec <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4022ec:	4b02      	ldr	r3, [pc, #8]	; (4022f8 <pmc_osc_is_ready_mainck+0xc>)
  4022ee:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4022f0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4022f4:	4770      	bx	lr
  4022f6:	bf00      	nop
  4022f8:	400e0600 	.word	0x400e0600

004022fc <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4022fc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402300:	4b01      	ldr	r3, [pc, #4]	; (402308 <pmc_disable_pllack+0xc>)
  402302:	629a      	str	r2, [r3, #40]	; 0x28
  402304:	4770      	bx	lr
  402306:	bf00      	nop
  402308:	400e0600 	.word	0x400e0600

0040230c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40230c:	4b02      	ldr	r3, [pc, #8]	; (402318 <pmc_is_locked_pllack+0xc>)
  40230e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402310:	f000 0002 	and.w	r0, r0, #2
  402314:	4770      	bx	lr
  402316:	bf00      	nop
  402318:	400e0600 	.word	0x400e0600

0040231c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40231c:	283f      	cmp	r0, #63	; 0x3f
  40231e:	d81e      	bhi.n	40235e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  402320:	281f      	cmp	r0, #31
  402322:	d80c      	bhi.n	40233e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402324:	4b11      	ldr	r3, [pc, #68]	; (40236c <pmc_enable_periph_clk+0x50>)
  402326:	699a      	ldr	r2, [r3, #24]
  402328:	2301      	movs	r3, #1
  40232a:	4083      	lsls	r3, r0
  40232c:	4393      	bics	r3, r2
  40232e:	d018      	beq.n	402362 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  402330:	2301      	movs	r3, #1
  402332:	fa03 f000 	lsl.w	r0, r3, r0
  402336:	4b0d      	ldr	r3, [pc, #52]	; (40236c <pmc_enable_periph_clk+0x50>)
  402338:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40233a:	2000      	movs	r0, #0
  40233c:	4770      	bx	lr
		ul_id -= 32;
  40233e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402340:	4b0a      	ldr	r3, [pc, #40]	; (40236c <pmc_enable_periph_clk+0x50>)
  402342:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  402346:	2301      	movs	r3, #1
  402348:	4083      	lsls	r3, r0
  40234a:	4393      	bics	r3, r2
  40234c:	d00b      	beq.n	402366 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40234e:	2301      	movs	r3, #1
  402350:	fa03 f000 	lsl.w	r0, r3, r0
  402354:	4b05      	ldr	r3, [pc, #20]	; (40236c <pmc_enable_periph_clk+0x50>)
  402356:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40235a:	2000      	movs	r0, #0
  40235c:	4770      	bx	lr
		return 1;
  40235e:	2001      	movs	r0, #1
  402360:	4770      	bx	lr
	return 0;
  402362:	2000      	movs	r0, #0
  402364:	4770      	bx	lr
  402366:	2000      	movs	r0, #0
}
  402368:	4770      	bx	lr
  40236a:	bf00      	nop
  40236c:	400e0600 	.word	0x400e0600

00402370 <pmc_pck_set_prescaler>:
 *
 * \param ul_id Peripheral ID.
 * \param ul_pres Prescaler value.
 */
void pmc_pck_set_prescaler(uint32_t ul_id, uint32_t ul_pres)
{
  402370:	4a09      	ldr	r2, [pc, #36]	; (402398 <pmc_pck_set_prescaler+0x28>)
  402372:	eb02 0280 	add.w	r2, r2, r0, lsl #2
	PMC->PMC_PCK[ul_id] =
			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_PRES_Msk) | ul_pres;
  402376:	6c13      	ldr	r3, [r2, #64]	; 0x40
  402378:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
  40237c:	4319      	orrs	r1, r3
	PMC->PMC_PCK[ul_id] =
  40237e:	6411      	str	r1, [r2, #64]	; 0x40
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  402380:	f44f 7380 	mov.w	r3, #256	; 0x100
  402384:	fa03 f000 	lsl.w	r0, r3, r0
  402388:	4b03      	ldr	r3, [pc, #12]	; (402398 <pmc_pck_set_prescaler+0x28>)
  40238a:	681a      	ldr	r2, [r3, #0]
  40238c:	4202      	tst	r2, r0
  40238e:	d002      	beq.n	402396 <pmc_pck_set_prescaler+0x26>
			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
  402390:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  402392:	4210      	tst	r0, r2
  402394:	d0f9      	beq.n	40238a <pmc_pck_set_prescaler+0x1a>
  402396:	4770      	bx	lr
  402398:	400e0600 	.word	0x400e0600

0040239c <pmc_pck_set_source>:
 *
 * \param ul_id Peripheral ID.
 * \param ul_source Source selection value.
 */
void pmc_pck_set_source(uint32_t ul_id, uint32_t ul_source)
{
  40239c:	4a09      	ldr	r2, [pc, #36]	; (4023c4 <pmc_pck_set_source+0x28>)
  40239e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
	PMC->PMC_PCK[ul_id] =
			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_CSS_Msk) | ul_source;
  4023a2:	6c13      	ldr	r3, [r2, #64]	; 0x40
  4023a4:	f023 0307 	bic.w	r3, r3, #7
  4023a8:	4319      	orrs	r1, r3
	PMC->PMC_PCK[ul_id] =
  4023aa:	6411      	str	r1, [r2, #64]	; 0x40
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  4023ac:	f44f 7380 	mov.w	r3, #256	; 0x100
  4023b0:	fa03 f000 	lsl.w	r0, r3, r0
  4023b4:	4b03      	ldr	r3, [pc, #12]	; (4023c4 <pmc_pck_set_source+0x28>)
  4023b6:	681a      	ldr	r2, [r3, #0]
  4023b8:	4202      	tst	r2, r0
  4023ba:	d002      	beq.n	4023c2 <pmc_pck_set_source+0x26>
			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
  4023bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  4023be:	4210      	tst	r0, r2
  4023c0:	d0f9      	beq.n	4023b6 <pmc_pck_set_source+0x1a>
  4023c2:	4770      	bx	lr
  4023c4:	400e0600 	.word	0x400e0600

004023c8 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  4023c8:	f44f 7380 	mov.w	r3, #256	; 0x100
  4023cc:	fa03 f000 	lsl.w	r0, r3, r0
  4023d0:	4b01      	ldr	r3, [pc, #4]	; (4023d8 <pmc_enable_pck+0x10>)
  4023d2:	6018      	str	r0, [r3, #0]
  4023d4:	4770      	bx	lr
  4023d6:	bf00      	nop
  4023d8:	400e0600 	.word	0x400e0600

004023dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4023dc:	e7fe      	b.n	4023dc <Dummy_Handler>

004023de <Dummy_Handler2>:
	while (1) {
	}
}

void Dummy_Handler2(void)
{
  4023de:	e7fe      	b.n	4023de <Dummy_Handler2>

004023e0 <Reset_Handler>:
{
  4023e0:	b500      	push	{lr}
  4023e2:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4023e4:	4b25      	ldr	r3, [pc, #148]	; (40247c <Reset_Handler+0x9c>)
  4023e6:	4a26      	ldr	r2, [pc, #152]	; (402480 <Reset_Handler+0xa0>)
  4023e8:	429a      	cmp	r2, r3
  4023ea:	d010      	beq.n	40240e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4023ec:	4b25      	ldr	r3, [pc, #148]	; (402484 <Reset_Handler+0xa4>)
  4023ee:	4a23      	ldr	r2, [pc, #140]	; (40247c <Reset_Handler+0x9c>)
  4023f0:	429a      	cmp	r2, r3
  4023f2:	d20c      	bcs.n	40240e <Reset_Handler+0x2e>
  4023f4:	3b01      	subs	r3, #1
  4023f6:	1a9b      	subs	r3, r3, r2
  4023f8:	f023 0303 	bic.w	r3, r3, #3
  4023fc:	3304      	adds	r3, #4
  4023fe:	4413      	add	r3, r2
  402400:	491f      	ldr	r1, [pc, #124]	; (402480 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  402402:	f851 0b04 	ldr.w	r0, [r1], #4
  402406:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40240a:	429a      	cmp	r2, r3
  40240c:	d1f9      	bne.n	402402 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  40240e:	4b1e      	ldr	r3, [pc, #120]	; (402488 <Reset_Handler+0xa8>)
  402410:	4a1e      	ldr	r2, [pc, #120]	; (40248c <Reset_Handler+0xac>)
  402412:	429a      	cmp	r2, r3
  402414:	d20a      	bcs.n	40242c <Reset_Handler+0x4c>
  402416:	3b01      	subs	r3, #1
  402418:	1a9b      	subs	r3, r3, r2
  40241a:	f023 0303 	bic.w	r3, r3, #3
  40241e:	3304      	adds	r3, #4
  402420:	4413      	add	r3, r2
                *pDest++ = 0;
  402422:	2100      	movs	r1, #0
  402424:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  402428:	4293      	cmp	r3, r2
  40242a:	d1fb      	bne.n	402424 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40242c:	4a18      	ldr	r2, [pc, #96]	; (402490 <Reset_Handler+0xb0>)
  40242e:	4b19      	ldr	r3, [pc, #100]	; (402494 <Reset_Handler+0xb4>)
  402430:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402434:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402436:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40243a:	fab3 f383 	clz	r3, r3
  40243e:	095b      	lsrs	r3, r3, #5
  402440:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402442:	b672      	cpsid	i
  __ASM volatile ("dmb");
  402444:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402448:	2200      	movs	r2, #0
  40244a:	4b13      	ldr	r3, [pc, #76]	; (402498 <Reset_Handler+0xb8>)
  40244c:	701a      	strb	r2, [r3, #0]
	return flags;
  40244e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  402450:	4a12      	ldr	r2, [pc, #72]	; (40249c <Reset_Handler+0xbc>)
  402452:	6813      	ldr	r3, [r2, #0]
  402454:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  402458:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40245a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40245e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402462:	b129      	cbz	r1, 402470 <Reset_Handler+0x90>
		cpu_irq_enable();
  402464:	2201      	movs	r2, #1
  402466:	4b0c      	ldr	r3, [pc, #48]	; (402498 <Reset_Handler+0xb8>)
  402468:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40246a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40246e:	b662      	cpsie	i
        __libc_init_array();
  402470:	4b0b      	ldr	r3, [pc, #44]	; (4024a0 <Reset_Handler+0xc0>)
  402472:	4798      	blx	r3
        main();
  402474:	4b0b      	ldr	r3, [pc, #44]	; (4024a4 <Reset_Handler+0xc4>)
  402476:	4798      	blx	r3
  402478:	e7fe      	b.n	402478 <Reset_Handler+0x98>
  40247a:	bf00      	nop
  40247c:	20400000 	.word	0x20400000
  402480:	00405f34 	.word	0x00405f34
  402484:	204009d8 	.word	0x204009d8
  402488:	20406dec 	.word	0x20406dec
  40248c:	204009d8 	.word	0x204009d8
  402490:	e000ed00 	.word	0xe000ed00
  402494:	00400000 	.word	0x00400000
  402498:	20400025 	.word	0x20400025
  40249c:	e000ed88 	.word	0xe000ed88
  4024a0:	00402f25 	.word	0x00402f25
  4024a4:	00402691 	.word	0x00402691

004024a8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4024a8:	4b3b      	ldr	r3, [pc, #236]	; (402598 <SystemCoreClockUpdate+0xf0>)
  4024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4024ac:	f003 0303 	and.w	r3, r3, #3
  4024b0:	2b01      	cmp	r3, #1
  4024b2:	d01d      	beq.n	4024f0 <SystemCoreClockUpdate+0x48>
  4024b4:	b183      	cbz	r3, 4024d8 <SystemCoreClockUpdate+0x30>
  4024b6:	2b02      	cmp	r3, #2
  4024b8:	d036      	beq.n	402528 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4024ba:	4b37      	ldr	r3, [pc, #220]	; (402598 <SystemCoreClockUpdate+0xf0>)
  4024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4024be:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4024c2:	2b70      	cmp	r3, #112	; 0x70
  4024c4:	d05f      	beq.n	402586 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4024c6:	4b34      	ldr	r3, [pc, #208]	; (402598 <SystemCoreClockUpdate+0xf0>)
  4024c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4024ca:	4934      	ldr	r1, [pc, #208]	; (40259c <SystemCoreClockUpdate+0xf4>)
  4024cc:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4024d0:	680b      	ldr	r3, [r1, #0]
  4024d2:	40d3      	lsrs	r3, r2
  4024d4:	600b      	str	r3, [r1, #0]
  4024d6:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4024d8:	4b31      	ldr	r3, [pc, #196]	; (4025a0 <SystemCoreClockUpdate+0xf8>)
  4024da:	695b      	ldr	r3, [r3, #20]
  4024dc:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4024e0:	bf14      	ite	ne
  4024e2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4024e6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4024ea:	4b2c      	ldr	r3, [pc, #176]	; (40259c <SystemCoreClockUpdate+0xf4>)
  4024ec:	601a      	str	r2, [r3, #0]
  4024ee:	e7e4      	b.n	4024ba <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4024f0:	4b29      	ldr	r3, [pc, #164]	; (402598 <SystemCoreClockUpdate+0xf0>)
  4024f2:	6a1b      	ldr	r3, [r3, #32]
  4024f4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4024f8:	d003      	beq.n	402502 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4024fa:	4a2a      	ldr	r2, [pc, #168]	; (4025a4 <SystemCoreClockUpdate+0xfc>)
  4024fc:	4b27      	ldr	r3, [pc, #156]	; (40259c <SystemCoreClockUpdate+0xf4>)
  4024fe:	601a      	str	r2, [r3, #0]
  402500:	e7db      	b.n	4024ba <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402502:	4a29      	ldr	r2, [pc, #164]	; (4025a8 <SystemCoreClockUpdate+0x100>)
  402504:	4b25      	ldr	r3, [pc, #148]	; (40259c <SystemCoreClockUpdate+0xf4>)
  402506:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402508:	4b23      	ldr	r3, [pc, #140]	; (402598 <SystemCoreClockUpdate+0xf0>)
  40250a:	6a1b      	ldr	r3, [r3, #32]
  40250c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402510:	2b10      	cmp	r3, #16
  402512:	d005      	beq.n	402520 <SystemCoreClockUpdate+0x78>
  402514:	2b20      	cmp	r3, #32
  402516:	d1d0      	bne.n	4024ba <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  402518:	4a22      	ldr	r2, [pc, #136]	; (4025a4 <SystemCoreClockUpdate+0xfc>)
  40251a:	4b20      	ldr	r3, [pc, #128]	; (40259c <SystemCoreClockUpdate+0xf4>)
  40251c:	601a      	str	r2, [r3, #0]
          break;
  40251e:	e7cc      	b.n	4024ba <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  402520:	4a22      	ldr	r2, [pc, #136]	; (4025ac <SystemCoreClockUpdate+0x104>)
  402522:	4b1e      	ldr	r3, [pc, #120]	; (40259c <SystemCoreClockUpdate+0xf4>)
  402524:	601a      	str	r2, [r3, #0]
          break;
  402526:	e7c8      	b.n	4024ba <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402528:	4b1b      	ldr	r3, [pc, #108]	; (402598 <SystemCoreClockUpdate+0xf0>)
  40252a:	6a1b      	ldr	r3, [r3, #32]
  40252c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402530:	d016      	beq.n	402560 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402532:	4a1c      	ldr	r2, [pc, #112]	; (4025a4 <SystemCoreClockUpdate+0xfc>)
  402534:	4b19      	ldr	r3, [pc, #100]	; (40259c <SystemCoreClockUpdate+0xf4>)
  402536:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  402538:	4b17      	ldr	r3, [pc, #92]	; (402598 <SystemCoreClockUpdate+0xf0>)
  40253a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40253c:	f003 0303 	and.w	r3, r3, #3
  402540:	2b02      	cmp	r3, #2
  402542:	d1ba      	bne.n	4024ba <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402544:	4a14      	ldr	r2, [pc, #80]	; (402598 <SystemCoreClockUpdate+0xf0>)
  402546:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402548:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40254a:	4814      	ldr	r0, [pc, #80]	; (40259c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40254c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  402550:	6803      	ldr	r3, [r0, #0]
  402552:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402556:	b2d2      	uxtb	r2, r2
  402558:	fbb3 f3f2 	udiv	r3, r3, r2
  40255c:	6003      	str	r3, [r0, #0]
  40255e:	e7ac      	b.n	4024ba <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402560:	4a11      	ldr	r2, [pc, #68]	; (4025a8 <SystemCoreClockUpdate+0x100>)
  402562:	4b0e      	ldr	r3, [pc, #56]	; (40259c <SystemCoreClockUpdate+0xf4>)
  402564:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402566:	4b0c      	ldr	r3, [pc, #48]	; (402598 <SystemCoreClockUpdate+0xf0>)
  402568:	6a1b      	ldr	r3, [r3, #32]
  40256a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40256e:	2b10      	cmp	r3, #16
  402570:	d005      	beq.n	40257e <SystemCoreClockUpdate+0xd6>
  402572:	2b20      	cmp	r3, #32
  402574:	d1e0      	bne.n	402538 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  402576:	4a0b      	ldr	r2, [pc, #44]	; (4025a4 <SystemCoreClockUpdate+0xfc>)
  402578:	4b08      	ldr	r3, [pc, #32]	; (40259c <SystemCoreClockUpdate+0xf4>)
  40257a:	601a      	str	r2, [r3, #0]
          break;
  40257c:	e7dc      	b.n	402538 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40257e:	4a0b      	ldr	r2, [pc, #44]	; (4025ac <SystemCoreClockUpdate+0x104>)
  402580:	4b06      	ldr	r3, [pc, #24]	; (40259c <SystemCoreClockUpdate+0xf4>)
  402582:	601a      	str	r2, [r3, #0]
          break;
  402584:	e7d8      	b.n	402538 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  402586:	4a05      	ldr	r2, [pc, #20]	; (40259c <SystemCoreClockUpdate+0xf4>)
  402588:	6813      	ldr	r3, [r2, #0]
  40258a:	4909      	ldr	r1, [pc, #36]	; (4025b0 <SystemCoreClockUpdate+0x108>)
  40258c:	fba1 1303 	umull	r1, r3, r1, r3
  402590:	085b      	lsrs	r3, r3, #1
  402592:	6013      	str	r3, [r2, #0]
  402594:	4770      	bx	lr
  402596:	bf00      	nop
  402598:	400e0600 	.word	0x400e0600
  40259c:	20400028 	.word	0x20400028
  4025a0:	400e1810 	.word	0x400e1810
  4025a4:	00b71b00 	.word	0x00b71b00
  4025a8:	003d0900 	.word	0x003d0900
  4025ac:	007a1200 	.word	0x007a1200
  4025b0:	aaaaaaab 	.word	0xaaaaaaab

004025b4 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4025b4:	4b16      	ldr	r3, [pc, #88]	; (402610 <system_init_flash+0x5c>)
  4025b6:	4298      	cmp	r0, r3
  4025b8:	d913      	bls.n	4025e2 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4025ba:	4b16      	ldr	r3, [pc, #88]	; (402614 <system_init_flash+0x60>)
  4025bc:	4298      	cmp	r0, r3
  4025be:	d915      	bls.n	4025ec <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4025c0:	4b15      	ldr	r3, [pc, #84]	; (402618 <system_init_flash+0x64>)
  4025c2:	4298      	cmp	r0, r3
  4025c4:	d916      	bls.n	4025f4 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4025c6:	4b15      	ldr	r3, [pc, #84]	; (40261c <system_init_flash+0x68>)
  4025c8:	4298      	cmp	r0, r3
  4025ca:	d917      	bls.n	4025fc <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4025cc:	4b14      	ldr	r3, [pc, #80]	; (402620 <system_init_flash+0x6c>)
  4025ce:	4298      	cmp	r0, r3
  4025d0:	d918      	bls.n	402604 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4025d2:	4b14      	ldr	r3, [pc, #80]	; (402624 <system_init_flash+0x70>)
  4025d4:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4025d6:	bf94      	ite	ls
  4025d8:	4a13      	ldrls	r2, [pc, #76]	; (402628 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4025da:	4a14      	ldrhi	r2, [pc, #80]	; (40262c <system_init_flash+0x78>)
  4025dc:	4b14      	ldr	r3, [pc, #80]	; (402630 <system_init_flash+0x7c>)
  4025de:	601a      	str	r2, [r3, #0]
  4025e0:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4025e2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4025e6:	4b12      	ldr	r3, [pc, #72]	; (402630 <system_init_flash+0x7c>)
  4025e8:	601a      	str	r2, [r3, #0]
  4025ea:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4025ec:	4a11      	ldr	r2, [pc, #68]	; (402634 <system_init_flash+0x80>)
  4025ee:	4b10      	ldr	r3, [pc, #64]	; (402630 <system_init_flash+0x7c>)
  4025f0:	601a      	str	r2, [r3, #0]
  4025f2:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4025f4:	4a10      	ldr	r2, [pc, #64]	; (402638 <system_init_flash+0x84>)
  4025f6:	4b0e      	ldr	r3, [pc, #56]	; (402630 <system_init_flash+0x7c>)
  4025f8:	601a      	str	r2, [r3, #0]
  4025fa:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4025fc:	4a0f      	ldr	r2, [pc, #60]	; (40263c <system_init_flash+0x88>)
  4025fe:	4b0c      	ldr	r3, [pc, #48]	; (402630 <system_init_flash+0x7c>)
  402600:	601a      	str	r2, [r3, #0]
  402602:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402604:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402608:	4b09      	ldr	r3, [pc, #36]	; (402630 <system_init_flash+0x7c>)
  40260a:	601a      	str	r2, [r3, #0]
  40260c:	4770      	bx	lr
  40260e:	bf00      	nop
  402610:	015ef3bf 	.word	0x015ef3bf
  402614:	02bde77f 	.word	0x02bde77f
  402618:	041cdb3f 	.word	0x041cdb3f
  40261c:	057bceff 	.word	0x057bceff
  402620:	06dac2bf 	.word	0x06dac2bf
  402624:	0839b67f 	.word	0x0839b67f
  402628:	04000500 	.word	0x04000500
  40262c:	04000600 	.word	0x04000600
  402630:	400e0c00 	.word	0x400e0c00
  402634:	04000100 	.word	0x04000100
  402638:	04000200 	.word	0x04000200
  40263c:	04000300 	.word	0x04000300

00402640 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  402640:	4b0a      	ldr	r3, [pc, #40]	; (40266c <_sbrk+0x2c>)
  402642:	681b      	ldr	r3, [r3, #0]
  402644:	b153      	cbz	r3, 40265c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  402646:	4b09      	ldr	r3, [pc, #36]	; (40266c <_sbrk+0x2c>)
  402648:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40264a:	181a      	adds	r2, r3, r0
  40264c:	4908      	ldr	r1, [pc, #32]	; (402670 <_sbrk+0x30>)
  40264e:	4291      	cmp	r1, r2
  402650:	db08      	blt.n	402664 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  402652:	4610      	mov	r0, r2
  402654:	4a05      	ldr	r2, [pc, #20]	; (40266c <_sbrk+0x2c>)
  402656:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  402658:	4618      	mov	r0, r3
  40265a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  40265c:	4a05      	ldr	r2, [pc, #20]	; (402674 <_sbrk+0x34>)
  40265e:	4b03      	ldr	r3, [pc, #12]	; (40266c <_sbrk+0x2c>)
  402660:	601a      	str	r2, [r3, #0]
  402662:	e7f0      	b.n	402646 <_sbrk+0x6>
		return (caddr_t) -1;	
  402664:	f04f 30ff 	mov.w	r0, #4294967295
}
  402668:	4770      	bx	lr
  40266a:	bf00      	nop
  40266c:	20400d70 	.word	0x20400d70
  402670:	2045fffc 	.word	0x2045fffc
  402674:	20408ff0 	.word	0x20408ff0

00402678 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  402678:	f04f 30ff 	mov.w	r0, #4294967295
  40267c:	4770      	bx	lr

0040267e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40267e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  402682:	604b      	str	r3, [r1, #4]

	return 0;
}
  402684:	2000      	movs	r0, #0
  402686:	4770      	bx	lr

00402688 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  402688:	2001      	movs	r0, #1
  40268a:	4770      	bx	lr

0040268c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  40268c:	2000      	movs	r0, #0
  40268e:	4770      	bx	lr

00402690 <main>:
//#include "arm_math.h"

static volatile float pitch; 
extern volatile bool outOfTime; 
int main(void)
{
  402690:	b570      	push	{r4, r5, r6, lr}
	sysclk_init();
  402692:	4b0d      	ldr	r3, [pc, #52]	; (4026c8 <main+0x38>)
  402694:	4798      	blx	r3
	board_init();
  402696:	4b0d      	ldr	r3, [pc, #52]	; (4026cc <main+0x3c>)
  402698:	4798      	blx	r3
	lcd_init(); 
  40269a:	4b0d      	ldr	r3, [pc, #52]	; (4026d0 <main+0x40>)
  40269c:	4798      	blx	r3
	Yin_init(PROCESS_BUF_SIZE, YIN_DEFAULT_THRESHOLD);
  40269e:	490d      	ldr	r1, [pc, #52]	; (4026d4 <main+0x44>)
  4026a0:	f44f 7000 	mov.w	r0, #512	; 0x200
  4026a4:	4b0c      	ldr	r3, [pc, #48]	; (4026d8 <main+0x48>)
  4026a6:	4798      	blx	r3
	audio_init();
  4026a8:	4b0c      	ldr	r3, [pc, #48]	; (4026dc <main+0x4c>)
  4026aa:	4798      	blx	r3
	
	//start_gatorscribe();
	int16_t *audio; 
	while(1)
	{
		if (dataReceived)
  4026ac:	4c0c      	ldr	r4, [pc, #48]	; (4026e0 <main+0x50>)
		{
			
			audio = (int16_t *)processBuffer; 
  4026ae:	4e0d      	ldr	r6, [pc, #52]	; (4026e4 <main+0x54>)
				Yin_init(&yin, BUF_SIZE, 0.05);
				pitch += Yin_getPitch(&yin, audio);
				audio += BUF_SIZE;
			}
			*/
			pitch = Yin_getPitch((int16_t *)processBuffer);
  4026b0:	4d0d      	ldr	r5, [pc, #52]	; (4026e8 <main+0x58>)
		if (dataReceived)
  4026b2:	7823      	ldrb	r3, [r4, #0]
  4026b4:	2b00      	cmp	r3, #0
  4026b6:	d0fc      	beq.n	4026b2 <main+0x22>
			pitch = Yin_getPitch((int16_t *)processBuffer);
  4026b8:	6830      	ldr	r0, [r6, #0]
  4026ba:	47a8      	blx	r5
  4026bc:	4b0b      	ldr	r3, [pc, #44]	; (4026ec <main+0x5c>)
  4026be:	6018      	str	r0, [r3, #0]
			
			// Average pitch 
			//pitch = pitch / TOTAL_PROCESS_BUFFERS; 
			
			dataReceived = false; 
  4026c0:	2300      	movs	r3, #0
  4026c2:	7023      	strb	r3, [r4, #0]
  4026c4:	e7f5      	b.n	4026b2 <main+0x22>
  4026c6:	bf00      	nop
  4026c8:	00401af1 	.word	0x00401af1
  4026cc:	00401b61 	.word	0x00401b61
  4026d0:	004008f5 	.word	0x004008f5
  4026d4:	3d4ccccd 	.word	0x3d4ccccd
  4026d8:	00400aa9 	.word	0x00400aa9
  4026dc:	0040042d 	.word	0x0040042d
  4026e0:	204009f4 	.word	0x204009f4
  4026e4:	20400020 	.word	0x20400020
  4026e8:	00400af1 	.word	0x00400af1
  4026ec:	20400d74 	.word	0x20400d74

004026f0 <__aeabi_drsub>:
  4026f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4026f4:	e002      	b.n	4026fc <__adddf3>
  4026f6:	bf00      	nop

004026f8 <__aeabi_dsub>:
  4026f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004026fc <__adddf3>:
  4026fc:	b530      	push	{r4, r5, lr}
  4026fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
  402702:	ea4f 0543 	mov.w	r5, r3, lsl #1
  402706:	ea94 0f05 	teq	r4, r5
  40270a:	bf08      	it	eq
  40270c:	ea90 0f02 	teqeq	r0, r2
  402710:	bf1f      	itttt	ne
  402712:	ea54 0c00 	orrsne.w	ip, r4, r0
  402716:	ea55 0c02 	orrsne.w	ip, r5, r2
  40271a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40271e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402722:	f000 80e2 	beq.w	4028ea <__adddf3+0x1ee>
  402726:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40272a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40272e:	bfb8      	it	lt
  402730:	426d      	neglt	r5, r5
  402732:	dd0c      	ble.n	40274e <__adddf3+0x52>
  402734:	442c      	add	r4, r5
  402736:	ea80 0202 	eor.w	r2, r0, r2
  40273a:	ea81 0303 	eor.w	r3, r1, r3
  40273e:	ea82 0000 	eor.w	r0, r2, r0
  402742:	ea83 0101 	eor.w	r1, r3, r1
  402746:	ea80 0202 	eor.w	r2, r0, r2
  40274a:	ea81 0303 	eor.w	r3, r1, r3
  40274e:	2d36      	cmp	r5, #54	; 0x36
  402750:	bf88      	it	hi
  402752:	bd30      	pophi	{r4, r5, pc}
  402754:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402758:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40275c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  402760:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  402764:	d002      	beq.n	40276c <__adddf3+0x70>
  402766:	4240      	negs	r0, r0
  402768:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40276c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  402770:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402774:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  402778:	d002      	beq.n	402780 <__adddf3+0x84>
  40277a:	4252      	negs	r2, r2
  40277c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  402780:	ea94 0f05 	teq	r4, r5
  402784:	f000 80a7 	beq.w	4028d6 <__adddf3+0x1da>
  402788:	f1a4 0401 	sub.w	r4, r4, #1
  40278c:	f1d5 0e20 	rsbs	lr, r5, #32
  402790:	db0d      	blt.n	4027ae <__adddf3+0xb2>
  402792:	fa02 fc0e 	lsl.w	ip, r2, lr
  402796:	fa22 f205 	lsr.w	r2, r2, r5
  40279a:	1880      	adds	r0, r0, r2
  40279c:	f141 0100 	adc.w	r1, r1, #0
  4027a0:	fa03 f20e 	lsl.w	r2, r3, lr
  4027a4:	1880      	adds	r0, r0, r2
  4027a6:	fa43 f305 	asr.w	r3, r3, r5
  4027aa:	4159      	adcs	r1, r3
  4027ac:	e00e      	b.n	4027cc <__adddf3+0xd0>
  4027ae:	f1a5 0520 	sub.w	r5, r5, #32
  4027b2:	f10e 0e20 	add.w	lr, lr, #32
  4027b6:	2a01      	cmp	r2, #1
  4027b8:	fa03 fc0e 	lsl.w	ip, r3, lr
  4027bc:	bf28      	it	cs
  4027be:	f04c 0c02 	orrcs.w	ip, ip, #2
  4027c2:	fa43 f305 	asr.w	r3, r3, r5
  4027c6:	18c0      	adds	r0, r0, r3
  4027c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4027cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4027d0:	d507      	bpl.n	4027e2 <__adddf3+0xe6>
  4027d2:	f04f 0e00 	mov.w	lr, #0
  4027d6:	f1dc 0c00 	rsbs	ip, ip, #0
  4027da:	eb7e 0000 	sbcs.w	r0, lr, r0
  4027de:	eb6e 0101 	sbc.w	r1, lr, r1
  4027e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4027e6:	d31b      	bcc.n	402820 <__adddf3+0x124>
  4027e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4027ec:	d30c      	bcc.n	402808 <__adddf3+0x10c>
  4027ee:	0849      	lsrs	r1, r1, #1
  4027f0:	ea5f 0030 	movs.w	r0, r0, rrx
  4027f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4027f8:	f104 0401 	add.w	r4, r4, #1
  4027fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
  402800:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  402804:	f080 809a 	bcs.w	40293c <__adddf3+0x240>
  402808:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40280c:	bf08      	it	eq
  40280e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402812:	f150 0000 	adcs.w	r0, r0, #0
  402816:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40281a:	ea41 0105 	orr.w	r1, r1, r5
  40281e:	bd30      	pop	{r4, r5, pc}
  402820:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  402824:	4140      	adcs	r0, r0
  402826:	eb41 0101 	adc.w	r1, r1, r1
  40282a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40282e:	f1a4 0401 	sub.w	r4, r4, #1
  402832:	d1e9      	bne.n	402808 <__adddf3+0x10c>
  402834:	f091 0f00 	teq	r1, #0
  402838:	bf04      	itt	eq
  40283a:	4601      	moveq	r1, r0
  40283c:	2000      	moveq	r0, #0
  40283e:	fab1 f381 	clz	r3, r1
  402842:	bf08      	it	eq
  402844:	3320      	addeq	r3, #32
  402846:	f1a3 030b 	sub.w	r3, r3, #11
  40284a:	f1b3 0220 	subs.w	r2, r3, #32
  40284e:	da0c      	bge.n	40286a <__adddf3+0x16e>
  402850:	320c      	adds	r2, #12
  402852:	dd08      	ble.n	402866 <__adddf3+0x16a>
  402854:	f102 0c14 	add.w	ip, r2, #20
  402858:	f1c2 020c 	rsb	r2, r2, #12
  40285c:	fa01 f00c 	lsl.w	r0, r1, ip
  402860:	fa21 f102 	lsr.w	r1, r1, r2
  402864:	e00c      	b.n	402880 <__adddf3+0x184>
  402866:	f102 0214 	add.w	r2, r2, #20
  40286a:	bfd8      	it	le
  40286c:	f1c2 0c20 	rsble	ip, r2, #32
  402870:	fa01 f102 	lsl.w	r1, r1, r2
  402874:	fa20 fc0c 	lsr.w	ip, r0, ip
  402878:	bfdc      	itt	le
  40287a:	ea41 010c 	orrle.w	r1, r1, ip
  40287e:	4090      	lslle	r0, r2
  402880:	1ae4      	subs	r4, r4, r3
  402882:	bfa2      	ittt	ge
  402884:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  402888:	4329      	orrge	r1, r5
  40288a:	bd30      	popge	{r4, r5, pc}
  40288c:	ea6f 0404 	mvn.w	r4, r4
  402890:	3c1f      	subs	r4, #31
  402892:	da1c      	bge.n	4028ce <__adddf3+0x1d2>
  402894:	340c      	adds	r4, #12
  402896:	dc0e      	bgt.n	4028b6 <__adddf3+0x1ba>
  402898:	f104 0414 	add.w	r4, r4, #20
  40289c:	f1c4 0220 	rsb	r2, r4, #32
  4028a0:	fa20 f004 	lsr.w	r0, r0, r4
  4028a4:	fa01 f302 	lsl.w	r3, r1, r2
  4028a8:	ea40 0003 	orr.w	r0, r0, r3
  4028ac:	fa21 f304 	lsr.w	r3, r1, r4
  4028b0:	ea45 0103 	orr.w	r1, r5, r3
  4028b4:	bd30      	pop	{r4, r5, pc}
  4028b6:	f1c4 040c 	rsb	r4, r4, #12
  4028ba:	f1c4 0220 	rsb	r2, r4, #32
  4028be:	fa20 f002 	lsr.w	r0, r0, r2
  4028c2:	fa01 f304 	lsl.w	r3, r1, r4
  4028c6:	ea40 0003 	orr.w	r0, r0, r3
  4028ca:	4629      	mov	r1, r5
  4028cc:	bd30      	pop	{r4, r5, pc}
  4028ce:	fa21 f004 	lsr.w	r0, r1, r4
  4028d2:	4629      	mov	r1, r5
  4028d4:	bd30      	pop	{r4, r5, pc}
  4028d6:	f094 0f00 	teq	r4, #0
  4028da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4028de:	bf06      	itte	eq
  4028e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4028e4:	3401      	addeq	r4, #1
  4028e6:	3d01      	subne	r5, #1
  4028e8:	e74e      	b.n	402788 <__adddf3+0x8c>
  4028ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4028ee:	bf18      	it	ne
  4028f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4028f4:	d029      	beq.n	40294a <__adddf3+0x24e>
  4028f6:	ea94 0f05 	teq	r4, r5
  4028fa:	bf08      	it	eq
  4028fc:	ea90 0f02 	teqeq	r0, r2
  402900:	d005      	beq.n	40290e <__adddf3+0x212>
  402902:	ea54 0c00 	orrs.w	ip, r4, r0
  402906:	bf04      	itt	eq
  402908:	4619      	moveq	r1, r3
  40290a:	4610      	moveq	r0, r2
  40290c:	bd30      	pop	{r4, r5, pc}
  40290e:	ea91 0f03 	teq	r1, r3
  402912:	bf1e      	ittt	ne
  402914:	2100      	movne	r1, #0
  402916:	2000      	movne	r0, #0
  402918:	bd30      	popne	{r4, r5, pc}
  40291a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40291e:	d105      	bne.n	40292c <__adddf3+0x230>
  402920:	0040      	lsls	r0, r0, #1
  402922:	4149      	adcs	r1, r1
  402924:	bf28      	it	cs
  402926:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40292a:	bd30      	pop	{r4, r5, pc}
  40292c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  402930:	bf3c      	itt	cc
  402932:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  402936:	bd30      	popcc	{r4, r5, pc}
  402938:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40293c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  402940:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402944:	f04f 0000 	mov.w	r0, #0
  402948:	bd30      	pop	{r4, r5, pc}
  40294a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40294e:	bf1a      	itte	ne
  402950:	4619      	movne	r1, r3
  402952:	4610      	movne	r0, r2
  402954:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  402958:	bf1c      	itt	ne
  40295a:	460b      	movne	r3, r1
  40295c:	4602      	movne	r2, r0
  40295e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402962:	bf06      	itte	eq
  402964:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  402968:	ea91 0f03 	teqeq	r1, r3
  40296c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  402970:	bd30      	pop	{r4, r5, pc}
  402972:	bf00      	nop

00402974 <__aeabi_ui2d>:
  402974:	f090 0f00 	teq	r0, #0
  402978:	bf04      	itt	eq
  40297a:	2100      	moveq	r1, #0
  40297c:	4770      	bxeq	lr
  40297e:	b530      	push	{r4, r5, lr}
  402980:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402984:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402988:	f04f 0500 	mov.w	r5, #0
  40298c:	f04f 0100 	mov.w	r1, #0
  402990:	e750      	b.n	402834 <__adddf3+0x138>
  402992:	bf00      	nop

00402994 <__aeabi_i2d>:
  402994:	f090 0f00 	teq	r0, #0
  402998:	bf04      	itt	eq
  40299a:	2100      	moveq	r1, #0
  40299c:	4770      	bxeq	lr
  40299e:	b530      	push	{r4, r5, lr}
  4029a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4029a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4029a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4029ac:	bf48      	it	mi
  4029ae:	4240      	negmi	r0, r0
  4029b0:	f04f 0100 	mov.w	r1, #0
  4029b4:	e73e      	b.n	402834 <__adddf3+0x138>
  4029b6:	bf00      	nop

004029b8 <__aeabi_f2d>:
  4029b8:	0042      	lsls	r2, r0, #1
  4029ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4029be:	ea4f 0131 	mov.w	r1, r1, rrx
  4029c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4029c6:	bf1f      	itttt	ne
  4029c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4029cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4029d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4029d4:	4770      	bxne	lr
  4029d6:	f092 0f00 	teq	r2, #0
  4029da:	bf14      	ite	ne
  4029dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4029e0:	4770      	bxeq	lr
  4029e2:	b530      	push	{r4, r5, lr}
  4029e4:	f44f 7460 	mov.w	r4, #896	; 0x380
  4029e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4029ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4029f0:	e720      	b.n	402834 <__adddf3+0x138>
  4029f2:	bf00      	nop

004029f4 <__aeabi_ul2d>:
  4029f4:	ea50 0201 	orrs.w	r2, r0, r1
  4029f8:	bf08      	it	eq
  4029fa:	4770      	bxeq	lr
  4029fc:	b530      	push	{r4, r5, lr}
  4029fe:	f04f 0500 	mov.w	r5, #0
  402a02:	e00a      	b.n	402a1a <__aeabi_l2d+0x16>

00402a04 <__aeabi_l2d>:
  402a04:	ea50 0201 	orrs.w	r2, r0, r1
  402a08:	bf08      	it	eq
  402a0a:	4770      	bxeq	lr
  402a0c:	b530      	push	{r4, r5, lr}
  402a0e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  402a12:	d502      	bpl.n	402a1a <__aeabi_l2d+0x16>
  402a14:	4240      	negs	r0, r0
  402a16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402a1a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402a1e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402a22:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  402a26:	f43f aedc 	beq.w	4027e2 <__adddf3+0xe6>
  402a2a:	f04f 0203 	mov.w	r2, #3
  402a2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402a32:	bf18      	it	ne
  402a34:	3203      	addne	r2, #3
  402a36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402a3a:	bf18      	it	ne
  402a3c:	3203      	addne	r2, #3
  402a3e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  402a42:	f1c2 0320 	rsb	r3, r2, #32
  402a46:	fa00 fc03 	lsl.w	ip, r0, r3
  402a4a:	fa20 f002 	lsr.w	r0, r0, r2
  402a4e:	fa01 fe03 	lsl.w	lr, r1, r3
  402a52:	ea40 000e 	orr.w	r0, r0, lr
  402a56:	fa21 f102 	lsr.w	r1, r1, r2
  402a5a:	4414      	add	r4, r2
  402a5c:	e6c1      	b.n	4027e2 <__adddf3+0xe6>
  402a5e:	bf00      	nop

00402a60 <__aeabi_dmul>:
  402a60:	b570      	push	{r4, r5, r6, lr}
  402a62:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402a66:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402a6a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402a6e:	bf1d      	ittte	ne
  402a70:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402a74:	ea94 0f0c 	teqne	r4, ip
  402a78:	ea95 0f0c 	teqne	r5, ip
  402a7c:	f000 f8de 	bleq	402c3c <__aeabi_dmul+0x1dc>
  402a80:	442c      	add	r4, r5
  402a82:	ea81 0603 	eor.w	r6, r1, r3
  402a86:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  402a8a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  402a8e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  402a92:	bf18      	it	ne
  402a94:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  402a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402a9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402aa0:	d038      	beq.n	402b14 <__aeabi_dmul+0xb4>
  402aa2:	fba0 ce02 	umull	ip, lr, r0, r2
  402aa6:	f04f 0500 	mov.w	r5, #0
  402aaa:	fbe1 e502 	umlal	lr, r5, r1, r2
  402aae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  402ab2:	fbe0 e503 	umlal	lr, r5, r0, r3
  402ab6:	f04f 0600 	mov.w	r6, #0
  402aba:	fbe1 5603 	umlal	r5, r6, r1, r3
  402abe:	f09c 0f00 	teq	ip, #0
  402ac2:	bf18      	it	ne
  402ac4:	f04e 0e01 	orrne.w	lr, lr, #1
  402ac8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  402acc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  402ad0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  402ad4:	d204      	bcs.n	402ae0 <__aeabi_dmul+0x80>
  402ad6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  402ada:	416d      	adcs	r5, r5
  402adc:	eb46 0606 	adc.w	r6, r6, r6
  402ae0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  402ae4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  402ae8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  402aec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  402af0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  402af4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402af8:	bf88      	it	hi
  402afa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402afe:	d81e      	bhi.n	402b3e <__aeabi_dmul+0xde>
  402b00:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  402b04:	bf08      	it	eq
  402b06:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  402b0a:	f150 0000 	adcs.w	r0, r0, #0
  402b0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402b12:	bd70      	pop	{r4, r5, r6, pc}
  402b14:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  402b18:	ea46 0101 	orr.w	r1, r6, r1
  402b1c:	ea40 0002 	orr.w	r0, r0, r2
  402b20:	ea81 0103 	eor.w	r1, r1, r3
  402b24:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  402b28:	bfc2      	ittt	gt
  402b2a:	ebd4 050c 	rsbsgt	r5, r4, ip
  402b2e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402b32:	bd70      	popgt	{r4, r5, r6, pc}
  402b34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402b38:	f04f 0e00 	mov.w	lr, #0
  402b3c:	3c01      	subs	r4, #1
  402b3e:	f300 80ab 	bgt.w	402c98 <__aeabi_dmul+0x238>
  402b42:	f114 0f36 	cmn.w	r4, #54	; 0x36
  402b46:	bfde      	ittt	le
  402b48:	2000      	movle	r0, #0
  402b4a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  402b4e:	bd70      	pople	{r4, r5, r6, pc}
  402b50:	f1c4 0400 	rsb	r4, r4, #0
  402b54:	3c20      	subs	r4, #32
  402b56:	da35      	bge.n	402bc4 <__aeabi_dmul+0x164>
  402b58:	340c      	adds	r4, #12
  402b5a:	dc1b      	bgt.n	402b94 <__aeabi_dmul+0x134>
  402b5c:	f104 0414 	add.w	r4, r4, #20
  402b60:	f1c4 0520 	rsb	r5, r4, #32
  402b64:	fa00 f305 	lsl.w	r3, r0, r5
  402b68:	fa20 f004 	lsr.w	r0, r0, r4
  402b6c:	fa01 f205 	lsl.w	r2, r1, r5
  402b70:	ea40 0002 	orr.w	r0, r0, r2
  402b74:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  402b78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402b7c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402b80:	fa21 f604 	lsr.w	r6, r1, r4
  402b84:	eb42 0106 	adc.w	r1, r2, r6
  402b88:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402b8c:	bf08      	it	eq
  402b8e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402b92:	bd70      	pop	{r4, r5, r6, pc}
  402b94:	f1c4 040c 	rsb	r4, r4, #12
  402b98:	f1c4 0520 	rsb	r5, r4, #32
  402b9c:	fa00 f304 	lsl.w	r3, r0, r4
  402ba0:	fa20 f005 	lsr.w	r0, r0, r5
  402ba4:	fa01 f204 	lsl.w	r2, r1, r4
  402ba8:	ea40 0002 	orr.w	r0, r0, r2
  402bac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402bb0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402bb4:	f141 0100 	adc.w	r1, r1, #0
  402bb8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402bbc:	bf08      	it	eq
  402bbe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402bc2:	bd70      	pop	{r4, r5, r6, pc}
  402bc4:	f1c4 0520 	rsb	r5, r4, #32
  402bc8:	fa00 f205 	lsl.w	r2, r0, r5
  402bcc:	ea4e 0e02 	orr.w	lr, lr, r2
  402bd0:	fa20 f304 	lsr.w	r3, r0, r4
  402bd4:	fa01 f205 	lsl.w	r2, r1, r5
  402bd8:	ea43 0302 	orr.w	r3, r3, r2
  402bdc:	fa21 f004 	lsr.w	r0, r1, r4
  402be0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402be4:	fa21 f204 	lsr.w	r2, r1, r4
  402be8:	ea20 0002 	bic.w	r0, r0, r2
  402bec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  402bf0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402bf4:	bf08      	it	eq
  402bf6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402bfa:	bd70      	pop	{r4, r5, r6, pc}
  402bfc:	f094 0f00 	teq	r4, #0
  402c00:	d10f      	bne.n	402c22 <__aeabi_dmul+0x1c2>
  402c02:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  402c06:	0040      	lsls	r0, r0, #1
  402c08:	eb41 0101 	adc.w	r1, r1, r1
  402c0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402c10:	bf08      	it	eq
  402c12:	3c01      	subeq	r4, #1
  402c14:	d0f7      	beq.n	402c06 <__aeabi_dmul+0x1a6>
  402c16:	ea41 0106 	orr.w	r1, r1, r6
  402c1a:	f095 0f00 	teq	r5, #0
  402c1e:	bf18      	it	ne
  402c20:	4770      	bxne	lr
  402c22:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  402c26:	0052      	lsls	r2, r2, #1
  402c28:	eb43 0303 	adc.w	r3, r3, r3
  402c2c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  402c30:	bf08      	it	eq
  402c32:	3d01      	subeq	r5, #1
  402c34:	d0f7      	beq.n	402c26 <__aeabi_dmul+0x1c6>
  402c36:	ea43 0306 	orr.w	r3, r3, r6
  402c3a:	4770      	bx	lr
  402c3c:	ea94 0f0c 	teq	r4, ip
  402c40:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  402c44:	bf18      	it	ne
  402c46:	ea95 0f0c 	teqne	r5, ip
  402c4a:	d00c      	beq.n	402c66 <__aeabi_dmul+0x206>
  402c4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402c50:	bf18      	it	ne
  402c52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402c56:	d1d1      	bne.n	402bfc <__aeabi_dmul+0x19c>
  402c58:	ea81 0103 	eor.w	r1, r1, r3
  402c5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402c60:	f04f 0000 	mov.w	r0, #0
  402c64:	bd70      	pop	{r4, r5, r6, pc}
  402c66:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402c6a:	bf06      	itte	eq
  402c6c:	4610      	moveq	r0, r2
  402c6e:	4619      	moveq	r1, r3
  402c70:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402c74:	d019      	beq.n	402caa <__aeabi_dmul+0x24a>
  402c76:	ea94 0f0c 	teq	r4, ip
  402c7a:	d102      	bne.n	402c82 <__aeabi_dmul+0x222>
  402c7c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  402c80:	d113      	bne.n	402caa <__aeabi_dmul+0x24a>
  402c82:	ea95 0f0c 	teq	r5, ip
  402c86:	d105      	bne.n	402c94 <__aeabi_dmul+0x234>
  402c88:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  402c8c:	bf1c      	itt	ne
  402c8e:	4610      	movne	r0, r2
  402c90:	4619      	movne	r1, r3
  402c92:	d10a      	bne.n	402caa <__aeabi_dmul+0x24a>
  402c94:	ea81 0103 	eor.w	r1, r1, r3
  402c98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402c9c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  402ca0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402ca4:	f04f 0000 	mov.w	r0, #0
  402ca8:	bd70      	pop	{r4, r5, r6, pc}
  402caa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  402cae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  402cb2:	bd70      	pop	{r4, r5, r6, pc}

00402cb4 <__aeabi_ddiv>:
  402cb4:	b570      	push	{r4, r5, r6, lr}
  402cb6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402cba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402cbe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402cc2:	bf1d      	ittte	ne
  402cc4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402cc8:	ea94 0f0c 	teqne	r4, ip
  402ccc:	ea95 0f0c 	teqne	r5, ip
  402cd0:	f000 f8a7 	bleq	402e22 <__aeabi_ddiv+0x16e>
  402cd4:	eba4 0405 	sub.w	r4, r4, r5
  402cd8:	ea81 0e03 	eor.w	lr, r1, r3
  402cdc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  402ce0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402ce4:	f000 8088 	beq.w	402df8 <__aeabi_ddiv+0x144>
  402ce8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402cec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  402cf0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  402cf4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  402cf8:	ea4f 2202 	mov.w	r2, r2, lsl #8
  402cfc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  402d00:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  402d04:	ea4f 2600 	mov.w	r6, r0, lsl #8
  402d08:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  402d0c:	429d      	cmp	r5, r3
  402d0e:	bf08      	it	eq
  402d10:	4296      	cmpeq	r6, r2
  402d12:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  402d16:	f504 7440 	add.w	r4, r4, #768	; 0x300
  402d1a:	d202      	bcs.n	402d22 <__aeabi_ddiv+0x6e>
  402d1c:	085b      	lsrs	r3, r3, #1
  402d1e:	ea4f 0232 	mov.w	r2, r2, rrx
  402d22:	1ab6      	subs	r6, r6, r2
  402d24:	eb65 0503 	sbc.w	r5, r5, r3
  402d28:	085b      	lsrs	r3, r3, #1
  402d2a:	ea4f 0232 	mov.w	r2, r2, rrx
  402d2e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  402d32:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  402d36:	ebb6 0e02 	subs.w	lr, r6, r2
  402d3a:	eb75 0e03 	sbcs.w	lr, r5, r3
  402d3e:	bf22      	ittt	cs
  402d40:	1ab6      	subcs	r6, r6, r2
  402d42:	4675      	movcs	r5, lr
  402d44:	ea40 000c 	orrcs.w	r0, r0, ip
  402d48:	085b      	lsrs	r3, r3, #1
  402d4a:	ea4f 0232 	mov.w	r2, r2, rrx
  402d4e:	ebb6 0e02 	subs.w	lr, r6, r2
  402d52:	eb75 0e03 	sbcs.w	lr, r5, r3
  402d56:	bf22      	ittt	cs
  402d58:	1ab6      	subcs	r6, r6, r2
  402d5a:	4675      	movcs	r5, lr
  402d5c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  402d60:	085b      	lsrs	r3, r3, #1
  402d62:	ea4f 0232 	mov.w	r2, r2, rrx
  402d66:	ebb6 0e02 	subs.w	lr, r6, r2
  402d6a:	eb75 0e03 	sbcs.w	lr, r5, r3
  402d6e:	bf22      	ittt	cs
  402d70:	1ab6      	subcs	r6, r6, r2
  402d72:	4675      	movcs	r5, lr
  402d74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  402d78:	085b      	lsrs	r3, r3, #1
  402d7a:	ea4f 0232 	mov.w	r2, r2, rrx
  402d7e:	ebb6 0e02 	subs.w	lr, r6, r2
  402d82:	eb75 0e03 	sbcs.w	lr, r5, r3
  402d86:	bf22      	ittt	cs
  402d88:	1ab6      	subcs	r6, r6, r2
  402d8a:	4675      	movcs	r5, lr
  402d8c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  402d90:	ea55 0e06 	orrs.w	lr, r5, r6
  402d94:	d018      	beq.n	402dc8 <__aeabi_ddiv+0x114>
  402d96:	ea4f 1505 	mov.w	r5, r5, lsl #4
  402d9a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  402d9e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  402da2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  402da6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  402daa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  402dae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  402db2:	d1c0      	bne.n	402d36 <__aeabi_ddiv+0x82>
  402db4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402db8:	d10b      	bne.n	402dd2 <__aeabi_ddiv+0x11e>
  402dba:	ea41 0100 	orr.w	r1, r1, r0
  402dbe:	f04f 0000 	mov.w	r0, #0
  402dc2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  402dc6:	e7b6      	b.n	402d36 <__aeabi_ddiv+0x82>
  402dc8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402dcc:	bf04      	itt	eq
  402dce:	4301      	orreq	r1, r0
  402dd0:	2000      	moveq	r0, #0
  402dd2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402dd6:	bf88      	it	hi
  402dd8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402ddc:	f63f aeaf 	bhi.w	402b3e <__aeabi_dmul+0xde>
  402de0:	ebb5 0c03 	subs.w	ip, r5, r3
  402de4:	bf04      	itt	eq
  402de6:	ebb6 0c02 	subseq.w	ip, r6, r2
  402dea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402dee:	f150 0000 	adcs.w	r0, r0, #0
  402df2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402df6:	bd70      	pop	{r4, r5, r6, pc}
  402df8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  402dfc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  402e00:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  402e04:	bfc2      	ittt	gt
  402e06:	ebd4 050c 	rsbsgt	r5, r4, ip
  402e0a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402e0e:	bd70      	popgt	{r4, r5, r6, pc}
  402e10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402e14:	f04f 0e00 	mov.w	lr, #0
  402e18:	3c01      	subs	r4, #1
  402e1a:	e690      	b.n	402b3e <__aeabi_dmul+0xde>
  402e1c:	ea45 0e06 	orr.w	lr, r5, r6
  402e20:	e68d      	b.n	402b3e <__aeabi_dmul+0xde>
  402e22:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  402e26:	ea94 0f0c 	teq	r4, ip
  402e2a:	bf08      	it	eq
  402e2c:	ea95 0f0c 	teqeq	r5, ip
  402e30:	f43f af3b 	beq.w	402caa <__aeabi_dmul+0x24a>
  402e34:	ea94 0f0c 	teq	r4, ip
  402e38:	d10a      	bne.n	402e50 <__aeabi_ddiv+0x19c>
  402e3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402e3e:	f47f af34 	bne.w	402caa <__aeabi_dmul+0x24a>
  402e42:	ea95 0f0c 	teq	r5, ip
  402e46:	f47f af25 	bne.w	402c94 <__aeabi_dmul+0x234>
  402e4a:	4610      	mov	r0, r2
  402e4c:	4619      	mov	r1, r3
  402e4e:	e72c      	b.n	402caa <__aeabi_dmul+0x24a>
  402e50:	ea95 0f0c 	teq	r5, ip
  402e54:	d106      	bne.n	402e64 <__aeabi_ddiv+0x1b0>
  402e56:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  402e5a:	f43f aefd 	beq.w	402c58 <__aeabi_dmul+0x1f8>
  402e5e:	4610      	mov	r0, r2
  402e60:	4619      	mov	r1, r3
  402e62:	e722      	b.n	402caa <__aeabi_dmul+0x24a>
  402e64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402e68:	bf18      	it	ne
  402e6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402e6e:	f47f aec5 	bne.w	402bfc <__aeabi_dmul+0x19c>
  402e72:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  402e76:	f47f af0d 	bne.w	402c94 <__aeabi_dmul+0x234>
  402e7a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  402e7e:	f47f aeeb 	bne.w	402c58 <__aeabi_dmul+0x1f8>
  402e82:	e712      	b.n	402caa <__aeabi_dmul+0x24a>

00402e84 <__aeabi_d2f>:
  402e84:	ea4f 0241 	mov.w	r2, r1, lsl #1
  402e88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  402e8c:	bf24      	itt	cs
  402e8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  402e92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  402e96:	d90d      	bls.n	402eb4 <__aeabi_d2f+0x30>
  402e98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  402e9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  402ea0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  402ea4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  402ea8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  402eac:	bf08      	it	eq
  402eae:	f020 0001 	biceq.w	r0, r0, #1
  402eb2:	4770      	bx	lr
  402eb4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  402eb8:	d121      	bne.n	402efe <__aeabi_d2f+0x7a>
  402eba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  402ebe:	bfbc      	itt	lt
  402ec0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  402ec4:	4770      	bxlt	lr
  402ec6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402eca:	ea4f 5252 	mov.w	r2, r2, lsr #21
  402ece:	f1c2 0218 	rsb	r2, r2, #24
  402ed2:	f1c2 0c20 	rsb	ip, r2, #32
  402ed6:	fa10 f30c 	lsls.w	r3, r0, ip
  402eda:	fa20 f002 	lsr.w	r0, r0, r2
  402ede:	bf18      	it	ne
  402ee0:	f040 0001 	orrne.w	r0, r0, #1
  402ee4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  402ee8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  402eec:	fa03 fc0c 	lsl.w	ip, r3, ip
  402ef0:	ea40 000c 	orr.w	r0, r0, ip
  402ef4:	fa23 f302 	lsr.w	r3, r3, r2
  402ef8:	ea4f 0343 	mov.w	r3, r3, lsl #1
  402efc:	e7cc      	b.n	402e98 <__aeabi_d2f+0x14>
  402efe:	ea7f 5362 	mvns.w	r3, r2, asr #21
  402f02:	d107      	bne.n	402f14 <__aeabi_d2f+0x90>
  402f04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  402f08:	bf1e      	ittt	ne
  402f0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  402f0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  402f12:	4770      	bxne	lr
  402f14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  402f18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  402f1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  402f20:	4770      	bx	lr
  402f22:	bf00      	nop

00402f24 <__libc_init_array>:
  402f24:	b570      	push	{r4, r5, r6, lr}
  402f26:	4e0f      	ldr	r6, [pc, #60]	; (402f64 <__libc_init_array+0x40>)
  402f28:	4d0f      	ldr	r5, [pc, #60]	; (402f68 <__libc_init_array+0x44>)
  402f2a:	1b76      	subs	r6, r6, r5
  402f2c:	10b6      	asrs	r6, r6, #2
  402f2e:	bf18      	it	ne
  402f30:	2400      	movne	r4, #0
  402f32:	d005      	beq.n	402f40 <__libc_init_array+0x1c>
  402f34:	3401      	adds	r4, #1
  402f36:	f855 3b04 	ldr.w	r3, [r5], #4
  402f3a:	4798      	blx	r3
  402f3c:	42a6      	cmp	r6, r4
  402f3e:	d1f9      	bne.n	402f34 <__libc_init_array+0x10>
  402f40:	4e0a      	ldr	r6, [pc, #40]	; (402f6c <__libc_init_array+0x48>)
  402f42:	4d0b      	ldr	r5, [pc, #44]	; (402f70 <__libc_init_array+0x4c>)
  402f44:	1b76      	subs	r6, r6, r5
  402f46:	f002 ffdf 	bl	405f08 <_init>
  402f4a:	10b6      	asrs	r6, r6, #2
  402f4c:	bf18      	it	ne
  402f4e:	2400      	movne	r4, #0
  402f50:	d006      	beq.n	402f60 <__libc_init_array+0x3c>
  402f52:	3401      	adds	r4, #1
  402f54:	f855 3b04 	ldr.w	r3, [r5], #4
  402f58:	4798      	blx	r3
  402f5a:	42a6      	cmp	r6, r4
  402f5c:	d1f9      	bne.n	402f52 <__libc_init_array+0x2e>
  402f5e:	bd70      	pop	{r4, r5, r6, pc}
  402f60:	bd70      	pop	{r4, r5, r6, pc}
  402f62:	bf00      	nop
  402f64:	00405f14 	.word	0x00405f14
  402f68:	00405f14 	.word	0x00405f14
  402f6c:	00405f1c 	.word	0x00405f1c
  402f70:	00405f14 	.word	0x00405f14

00402f74 <iprintf>:
  402f74:	b40f      	push	{r0, r1, r2, r3}
  402f76:	b500      	push	{lr}
  402f78:	4907      	ldr	r1, [pc, #28]	; (402f98 <iprintf+0x24>)
  402f7a:	b083      	sub	sp, #12
  402f7c:	ab04      	add	r3, sp, #16
  402f7e:	6808      	ldr	r0, [r1, #0]
  402f80:	f853 2b04 	ldr.w	r2, [r3], #4
  402f84:	6881      	ldr	r1, [r0, #8]
  402f86:	9301      	str	r3, [sp, #4]
  402f88:	f000 fb6c 	bl	403664 <_vfiprintf_r>
  402f8c:	b003      	add	sp, #12
  402f8e:	f85d eb04 	ldr.w	lr, [sp], #4
  402f92:	b004      	add	sp, #16
  402f94:	4770      	bx	lr
  402f96:	bf00      	nop
  402f98:	2040002c 	.word	0x2040002c

00402f9c <malloc>:
  402f9c:	4b02      	ldr	r3, [pc, #8]	; (402fa8 <malloc+0xc>)
  402f9e:	4601      	mov	r1, r0
  402fa0:	6818      	ldr	r0, [r3, #0]
  402fa2:	f000 b803 	b.w	402fac <_malloc_r>
  402fa6:	bf00      	nop
  402fa8:	2040002c 	.word	0x2040002c

00402fac <_malloc_r>:
  402fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402fb0:	f101 060b 	add.w	r6, r1, #11
  402fb4:	2e16      	cmp	r6, #22
  402fb6:	b083      	sub	sp, #12
  402fb8:	4605      	mov	r5, r0
  402fba:	f240 809e 	bls.w	4030fa <_malloc_r+0x14e>
  402fbe:	f036 0607 	bics.w	r6, r6, #7
  402fc2:	f100 80bd 	bmi.w	403140 <_malloc_r+0x194>
  402fc6:	42b1      	cmp	r1, r6
  402fc8:	f200 80ba 	bhi.w	403140 <_malloc_r+0x194>
  402fcc:	f000 faec 	bl	4035a8 <__malloc_lock>
  402fd0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  402fd4:	f0c0 8293 	bcc.w	4034fe <_malloc_r+0x552>
  402fd8:	0a73      	lsrs	r3, r6, #9
  402fda:	f000 80b8 	beq.w	40314e <_malloc_r+0x1a2>
  402fde:	2b04      	cmp	r3, #4
  402fe0:	f200 8179 	bhi.w	4032d6 <_malloc_r+0x32a>
  402fe4:	09b3      	lsrs	r3, r6, #6
  402fe6:	f103 0039 	add.w	r0, r3, #57	; 0x39
  402fea:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  402fee:	00c3      	lsls	r3, r0, #3
  402ff0:	4fbf      	ldr	r7, [pc, #764]	; (4032f0 <_malloc_r+0x344>)
  402ff2:	443b      	add	r3, r7
  402ff4:	f1a3 0108 	sub.w	r1, r3, #8
  402ff8:	685c      	ldr	r4, [r3, #4]
  402ffa:	42a1      	cmp	r1, r4
  402ffc:	d106      	bne.n	40300c <_malloc_r+0x60>
  402ffe:	e00c      	b.n	40301a <_malloc_r+0x6e>
  403000:	2a00      	cmp	r2, #0
  403002:	f280 80aa 	bge.w	40315a <_malloc_r+0x1ae>
  403006:	68e4      	ldr	r4, [r4, #12]
  403008:	42a1      	cmp	r1, r4
  40300a:	d006      	beq.n	40301a <_malloc_r+0x6e>
  40300c:	6863      	ldr	r3, [r4, #4]
  40300e:	f023 0303 	bic.w	r3, r3, #3
  403012:	1b9a      	subs	r2, r3, r6
  403014:	2a0f      	cmp	r2, #15
  403016:	ddf3      	ble.n	403000 <_malloc_r+0x54>
  403018:	4670      	mov	r0, lr
  40301a:	693c      	ldr	r4, [r7, #16]
  40301c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403304 <_malloc_r+0x358>
  403020:	4574      	cmp	r4, lr
  403022:	f000 81ab 	beq.w	40337c <_malloc_r+0x3d0>
  403026:	6863      	ldr	r3, [r4, #4]
  403028:	f023 0303 	bic.w	r3, r3, #3
  40302c:	1b9a      	subs	r2, r3, r6
  40302e:	2a0f      	cmp	r2, #15
  403030:	f300 8190 	bgt.w	403354 <_malloc_r+0x3a8>
  403034:	2a00      	cmp	r2, #0
  403036:	f8c7 e014 	str.w	lr, [r7, #20]
  40303a:	f8c7 e010 	str.w	lr, [r7, #16]
  40303e:	f280 809d 	bge.w	40317c <_malloc_r+0x1d0>
  403042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403046:	f080 8161 	bcs.w	40330c <_malloc_r+0x360>
  40304a:	08db      	lsrs	r3, r3, #3
  40304c:	f103 0c01 	add.w	ip, r3, #1
  403050:	1099      	asrs	r1, r3, #2
  403052:	687a      	ldr	r2, [r7, #4]
  403054:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403058:	f8c4 8008 	str.w	r8, [r4, #8]
  40305c:	2301      	movs	r3, #1
  40305e:	408b      	lsls	r3, r1
  403060:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403064:	4313      	orrs	r3, r2
  403066:	3908      	subs	r1, #8
  403068:	60e1      	str	r1, [r4, #12]
  40306a:	607b      	str	r3, [r7, #4]
  40306c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403070:	f8c8 400c 	str.w	r4, [r8, #12]
  403074:	1082      	asrs	r2, r0, #2
  403076:	2401      	movs	r4, #1
  403078:	4094      	lsls	r4, r2
  40307a:	429c      	cmp	r4, r3
  40307c:	f200 808b 	bhi.w	403196 <_malloc_r+0x1ea>
  403080:	421c      	tst	r4, r3
  403082:	d106      	bne.n	403092 <_malloc_r+0xe6>
  403084:	f020 0003 	bic.w	r0, r0, #3
  403088:	0064      	lsls	r4, r4, #1
  40308a:	421c      	tst	r4, r3
  40308c:	f100 0004 	add.w	r0, r0, #4
  403090:	d0fa      	beq.n	403088 <_malloc_r+0xdc>
  403092:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403096:	46cc      	mov	ip, r9
  403098:	4680      	mov	r8, r0
  40309a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40309e:	459c      	cmp	ip, r3
  4030a0:	d107      	bne.n	4030b2 <_malloc_r+0x106>
  4030a2:	e16d      	b.n	403380 <_malloc_r+0x3d4>
  4030a4:	2a00      	cmp	r2, #0
  4030a6:	f280 817b 	bge.w	4033a0 <_malloc_r+0x3f4>
  4030aa:	68db      	ldr	r3, [r3, #12]
  4030ac:	459c      	cmp	ip, r3
  4030ae:	f000 8167 	beq.w	403380 <_malloc_r+0x3d4>
  4030b2:	6859      	ldr	r1, [r3, #4]
  4030b4:	f021 0103 	bic.w	r1, r1, #3
  4030b8:	1b8a      	subs	r2, r1, r6
  4030ba:	2a0f      	cmp	r2, #15
  4030bc:	ddf2      	ble.n	4030a4 <_malloc_r+0xf8>
  4030be:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4030c2:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4030c6:	9300      	str	r3, [sp, #0]
  4030c8:	199c      	adds	r4, r3, r6
  4030ca:	4628      	mov	r0, r5
  4030cc:	f046 0601 	orr.w	r6, r6, #1
  4030d0:	f042 0501 	orr.w	r5, r2, #1
  4030d4:	605e      	str	r6, [r3, #4]
  4030d6:	f8c8 c00c 	str.w	ip, [r8, #12]
  4030da:	f8cc 8008 	str.w	r8, [ip, #8]
  4030de:	617c      	str	r4, [r7, #20]
  4030e0:	613c      	str	r4, [r7, #16]
  4030e2:	f8c4 e00c 	str.w	lr, [r4, #12]
  4030e6:	f8c4 e008 	str.w	lr, [r4, #8]
  4030ea:	6065      	str	r5, [r4, #4]
  4030ec:	505a      	str	r2, [r3, r1]
  4030ee:	f000 fa61 	bl	4035b4 <__malloc_unlock>
  4030f2:	9b00      	ldr	r3, [sp, #0]
  4030f4:	f103 0408 	add.w	r4, r3, #8
  4030f8:	e01e      	b.n	403138 <_malloc_r+0x18c>
  4030fa:	2910      	cmp	r1, #16
  4030fc:	d820      	bhi.n	403140 <_malloc_r+0x194>
  4030fe:	f000 fa53 	bl	4035a8 <__malloc_lock>
  403102:	2610      	movs	r6, #16
  403104:	2318      	movs	r3, #24
  403106:	2002      	movs	r0, #2
  403108:	4f79      	ldr	r7, [pc, #484]	; (4032f0 <_malloc_r+0x344>)
  40310a:	443b      	add	r3, r7
  40310c:	f1a3 0208 	sub.w	r2, r3, #8
  403110:	685c      	ldr	r4, [r3, #4]
  403112:	4294      	cmp	r4, r2
  403114:	f000 813d 	beq.w	403392 <_malloc_r+0x3e6>
  403118:	6863      	ldr	r3, [r4, #4]
  40311a:	68e1      	ldr	r1, [r4, #12]
  40311c:	68a6      	ldr	r6, [r4, #8]
  40311e:	f023 0303 	bic.w	r3, r3, #3
  403122:	4423      	add	r3, r4
  403124:	4628      	mov	r0, r5
  403126:	685a      	ldr	r2, [r3, #4]
  403128:	60f1      	str	r1, [r6, #12]
  40312a:	f042 0201 	orr.w	r2, r2, #1
  40312e:	608e      	str	r6, [r1, #8]
  403130:	605a      	str	r2, [r3, #4]
  403132:	f000 fa3f 	bl	4035b4 <__malloc_unlock>
  403136:	3408      	adds	r4, #8
  403138:	4620      	mov	r0, r4
  40313a:	b003      	add	sp, #12
  40313c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403140:	2400      	movs	r4, #0
  403142:	230c      	movs	r3, #12
  403144:	4620      	mov	r0, r4
  403146:	602b      	str	r3, [r5, #0]
  403148:	b003      	add	sp, #12
  40314a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40314e:	2040      	movs	r0, #64	; 0x40
  403150:	f44f 7300 	mov.w	r3, #512	; 0x200
  403154:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403158:	e74a      	b.n	402ff0 <_malloc_r+0x44>
  40315a:	4423      	add	r3, r4
  40315c:	68e1      	ldr	r1, [r4, #12]
  40315e:	685a      	ldr	r2, [r3, #4]
  403160:	68a6      	ldr	r6, [r4, #8]
  403162:	f042 0201 	orr.w	r2, r2, #1
  403166:	60f1      	str	r1, [r6, #12]
  403168:	4628      	mov	r0, r5
  40316a:	608e      	str	r6, [r1, #8]
  40316c:	605a      	str	r2, [r3, #4]
  40316e:	f000 fa21 	bl	4035b4 <__malloc_unlock>
  403172:	3408      	adds	r4, #8
  403174:	4620      	mov	r0, r4
  403176:	b003      	add	sp, #12
  403178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40317c:	4423      	add	r3, r4
  40317e:	4628      	mov	r0, r5
  403180:	685a      	ldr	r2, [r3, #4]
  403182:	f042 0201 	orr.w	r2, r2, #1
  403186:	605a      	str	r2, [r3, #4]
  403188:	f000 fa14 	bl	4035b4 <__malloc_unlock>
  40318c:	3408      	adds	r4, #8
  40318e:	4620      	mov	r0, r4
  403190:	b003      	add	sp, #12
  403192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403196:	68bc      	ldr	r4, [r7, #8]
  403198:	6863      	ldr	r3, [r4, #4]
  40319a:	f023 0803 	bic.w	r8, r3, #3
  40319e:	45b0      	cmp	r8, r6
  4031a0:	d304      	bcc.n	4031ac <_malloc_r+0x200>
  4031a2:	eba8 0306 	sub.w	r3, r8, r6
  4031a6:	2b0f      	cmp	r3, #15
  4031a8:	f300 8085 	bgt.w	4032b6 <_malloc_r+0x30a>
  4031ac:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403308 <_malloc_r+0x35c>
  4031b0:	4b50      	ldr	r3, [pc, #320]	; (4032f4 <_malloc_r+0x348>)
  4031b2:	f8d9 2000 	ldr.w	r2, [r9]
  4031b6:	681b      	ldr	r3, [r3, #0]
  4031b8:	3201      	adds	r2, #1
  4031ba:	4433      	add	r3, r6
  4031bc:	eb04 0a08 	add.w	sl, r4, r8
  4031c0:	f000 8155 	beq.w	40346e <_malloc_r+0x4c2>
  4031c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4031c8:	330f      	adds	r3, #15
  4031ca:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4031ce:	f02b 0b0f 	bic.w	fp, fp, #15
  4031d2:	4659      	mov	r1, fp
  4031d4:	4628      	mov	r0, r5
  4031d6:	f000 f9f3 	bl	4035c0 <_sbrk_r>
  4031da:	1c41      	adds	r1, r0, #1
  4031dc:	4602      	mov	r2, r0
  4031de:	f000 80fc 	beq.w	4033da <_malloc_r+0x42e>
  4031e2:	4582      	cmp	sl, r0
  4031e4:	f200 80f7 	bhi.w	4033d6 <_malloc_r+0x42a>
  4031e8:	4b43      	ldr	r3, [pc, #268]	; (4032f8 <_malloc_r+0x34c>)
  4031ea:	6819      	ldr	r1, [r3, #0]
  4031ec:	4459      	add	r1, fp
  4031ee:	6019      	str	r1, [r3, #0]
  4031f0:	f000 814d 	beq.w	40348e <_malloc_r+0x4e2>
  4031f4:	f8d9 0000 	ldr.w	r0, [r9]
  4031f8:	3001      	adds	r0, #1
  4031fa:	bf1b      	ittet	ne
  4031fc:	eba2 0a0a 	subne.w	sl, r2, sl
  403200:	4451      	addne	r1, sl
  403202:	f8c9 2000 	streq.w	r2, [r9]
  403206:	6019      	strne	r1, [r3, #0]
  403208:	f012 0107 	ands.w	r1, r2, #7
  40320c:	f000 8115 	beq.w	40343a <_malloc_r+0x48e>
  403210:	f1c1 0008 	rsb	r0, r1, #8
  403214:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403218:	4402      	add	r2, r0
  40321a:	3108      	adds	r1, #8
  40321c:	eb02 090b 	add.w	r9, r2, fp
  403220:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403224:	eba1 0909 	sub.w	r9, r1, r9
  403228:	4649      	mov	r1, r9
  40322a:	4628      	mov	r0, r5
  40322c:	9301      	str	r3, [sp, #4]
  40322e:	9200      	str	r2, [sp, #0]
  403230:	f000 f9c6 	bl	4035c0 <_sbrk_r>
  403234:	1c43      	adds	r3, r0, #1
  403236:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40323a:	f000 8143 	beq.w	4034c4 <_malloc_r+0x518>
  40323e:	1a80      	subs	r0, r0, r2
  403240:	4448      	add	r0, r9
  403242:	f040 0001 	orr.w	r0, r0, #1
  403246:	6819      	ldr	r1, [r3, #0]
  403248:	60ba      	str	r2, [r7, #8]
  40324a:	4449      	add	r1, r9
  40324c:	42bc      	cmp	r4, r7
  40324e:	6050      	str	r0, [r2, #4]
  403250:	6019      	str	r1, [r3, #0]
  403252:	d017      	beq.n	403284 <_malloc_r+0x2d8>
  403254:	f1b8 0f0f 	cmp.w	r8, #15
  403258:	f240 80fb 	bls.w	403452 <_malloc_r+0x4a6>
  40325c:	6860      	ldr	r0, [r4, #4]
  40325e:	f1a8 020c 	sub.w	r2, r8, #12
  403262:	f022 0207 	bic.w	r2, r2, #7
  403266:	eb04 0e02 	add.w	lr, r4, r2
  40326a:	f000 0001 	and.w	r0, r0, #1
  40326e:	f04f 0c05 	mov.w	ip, #5
  403272:	4310      	orrs	r0, r2
  403274:	2a0f      	cmp	r2, #15
  403276:	6060      	str	r0, [r4, #4]
  403278:	f8ce c004 	str.w	ip, [lr, #4]
  40327c:	f8ce c008 	str.w	ip, [lr, #8]
  403280:	f200 8117 	bhi.w	4034b2 <_malloc_r+0x506>
  403284:	4b1d      	ldr	r3, [pc, #116]	; (4032fc <_malloc_r+0x350>)
  403286:	68bc      	ldr	r4, [r7, #8]
  403288:	681a      	ldr	r2, [r3, #0]
  40328a:	4291      	cmp	r1, r2
  40328c:	bf88      	it	hi
  40328e:	6019      	strhi	r1, [r3, #0]
  403290:	4b1b      	ldr	r3, [pc, #108]	; (403300 <_malloc_r+0x354>)
  403292:	681a      	ldr	r2, [r3, #0]
  403294:	4291      	cmp	r1, r2
  403296:	6862      	ldr	r2, [r4, #4]
  403298:	bf88      	it	hi
  40329a:	6019      	strhi	r1, [r3, #0]
  40329c:	f022 0203 	bic.w	r2, r2, #3
  4032a0:	4296      	cmp	r6, r2
  4032a2:	eba2 0306 	sub.w	r3, r2, r6
  4032a6:	d801      	bhi.n	4032ac <_malloc_r+0x300>
  4032a8:	2b0f      	cmp	r3, #15
  4032aa:	dc04      	bgt.n	4032b6 <_malloc_r+0x30a>
  4032ac:	4628      	mov	r0, r5
  4032ae:	f000 f981 	bl	4035b4 <__malloc_unlock>
  4032b2:	2400      	movs	r4, #0
  4032b4:	e740      	b.n	403138 <_malloc_r+0x18c>
  4032b6:	19a2      	adds	r2, r4, r6
  4032b8:	f043 0301 	orr.w	r3, r3, #1
  4032bc:	f046 0601 	orr.w	r6, r6, #1
  4032c0:	6066      	str	r6, [r4, #4]
  4032c2:	4628      	mov	r0, r5
  4032c4:	60ba      	str	r2, [r7, #8]
  4032c6:	6053      	str	r3, [r2, #4]
  4032c8:	f000 f974 	bl	4035b4 <__malloc_unlock>
  4032cc:	3408      	adds	r4, #8
  4032ce:	4620      	mov	r0, r4
  4032d0:	b003      	add	sp, #12
  4032d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4032d6:	2b14      	cmp	r3, #20
  4032d8:	d971      	bls.n	4033be <_malloc_r+0x412>
  4032da:	2b54      	cmp	r3, #84	; 0x54
  4032dc:	f200 80a3 	bhi.w	403426 <_malloc_r+0x47a>
  4032e0:	0b33      	lsrs	r3, r6, #12
  4032e2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4032e6:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4032ea:	00c3      	lsls	r3, r0, #3
  4032ec:	e680      	b.n	402ff0 <_malloc_r+0x44>
  4032ee:	bf00      	nop
  4032f0:	20400458 	.word	0x20400458
  4032f4:	20400da8 	.word	0x20400da8
  4032f8:	20400d78 	.word	0x20400d78
  4032fc:	20400da0 	.word	0x20400da0
  403300:	20400da4 	.word	0x20400da4
  403304:	20400460 	.word	0x20400460
  403308:	20400860 	.word	0x20400860
  40330c:	0a5a      	lsrs	r2, r3, #9
  40330e:	2a04      	cmp	r2, #4
  403310:	d95b      	bls.n	4033ca <_malloc_r+0x41e>
  403312:	2a14      	cmp	r2, #20
  403314:	f200 80ae 	bhi.w	403474 <_malloc_r+0x4c8>
  403318:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40331c:	00c9      	lsls	r1, r1, #3
  40331e:	325b      	adds	r2, #91	; 0x5b
  403320:	eb07 0c01 	add.w	ip, r7, r1
  403324:	5879      	ldr	r1, [r7, r1]
  403326:	f1ac 0c08 	sub.w	ip, ip, #8
  40332a:	458c      	cmp	ip, r1
  40332c:	f000 8088 	beq.w	403440 <_malloc_r+0x494>
  403330:	684a      	ldr	r2, [r1, #4]
  403332:	f022 0203 	bic.w	r2, r2, #3
  403336:	4293      	cmp	r3, r2
  403338:	d273      	bcs.n	403422 <_malloc_r+0x476>
  40333a:	6889      	ldr	r1, [r1, #8]
  40333c:	458c      	cmp	ip, r1
  40333e:	d1f7      	bne.n	403330 <_malloc_r+0x384>
  403340:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403344:	687b      	ldr	r3, [r7, #4]
  403346:	60e2      	str	r2, [r4, #12]
  403348:	f8c4 c008 	str.w	ip, [r4, #8]
  40334c:	6094      	str	r4, [r2, #8]
  40334e:	f8cc 400c 	str.w	r4, [ip, #12]
  403352:	e68f      	b.n	403074 <_malloc_r+0xc8>
  403354:	19a1      	adds	r1, r4, r6
  403356:	f046 0c01 	orr.w	ip, r6, #1
  40335a:	f042 0601 	orr.w	r6, r2, #1
  40335e:	f8c4 c004 	str.w	ip, [r4, #4]
  403362:	4628      	mov	r0, r5
  403364:	6179      	str	r1, [r7, #20]
  403366:	6139      	str	r1, [r7, #16]
  403368:	f8c1 e00c 	str.w	lr, [r1, #12]
  40336c:	f8c1 e008 	str.w	lr, [r1, #8]
  403370:	604e      	str	r6, [r1, #4]
  403372:	50e2      	str	r2, [r4, r3]
  403374:	f000 f91e 	bl	4035b4 <__malloc_unlock>
  403378:	3408      	adds	r4, #8
  40337a:	e6dd      	b.n	403138 <_malloc_r+0x18c>
  40337c:	687b      	ldr	r3, [r7, #4]
  40337e:	e679      	b.n	403074 <_malloc_r+0xc8>
  403380:	f108 0801 	add.w	r8, r8, #1
  403384:	f018 0f03 	tst.w	r8, #3
  403388:	f10c 0c08 	add.w	ip, ip, #8
  40338c:	f47f ae85 	bne.w	40309a <_malloc_r+0xee>
  403390:	e02d      	b.n	4033ee <_malloc_r+0x442>
  403392:	68dc      	ldr	r4, [r3, #12]
  403394:	42a3      	cmp	r3, r4
  403396:	bf08      	it	eq
  403398:	3002      	addeq	r0, #2
  40339a:	f43f ae3e 	beq.w	40301a <_malloc_r+0x6e>
  40339e:	e6bb      	b.n	403118 <_malloc_r+0x16c>
  4033a0:	4419      	add	r1, r3
  4033a2:	461c      	mov	r4, r3
  4033a4:	684a      	ldr	r2, [r1, #4]
  4033a6:	68db      	ldr	r3, [r3, #12]
  4033a8:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4033ac:	f042 0201 	orr.w	r2, r2, #1
  4033b0:	604a      	str	r2, [r1, #4]
  4033b2:	4628      	mov	r0, r5
  4033b4:	60f3      	str	r3, [r6, #12]
  4033b6:	609e      	str	r6, [r3, #8]
  4033b8:	f000 f8fc 	bl	4035b4 <__malloc_unlock>
  4033bc:	e6bc      	b.n	403138 <_malloc_r+0x18c>
  4033be:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4033c2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4033c6:	00c3      	lsls	r3, r0, #3
  4033c8:	e612      	b.n	402ff0 <_malloc_r+0x44>
  4033ca:	099a      	lsrs	r2, r3, #6
  4033cc:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4033d0:	00c9      	lsls	r1, r1, #3
  4033d2:	3238      	adds	r2, #56	; 0x38
  4033d4:	e7a4      	b.n	403320 <_malloc_r+0x374>
  4033d6:	42bc      	cmp	r4, r7
  4033d8:	d054      	beq.n	403484 <_malloc_r+0x4d8>
  4033da:	68bc      	ldr	r4, [r7, #8]
  4033dc:	6862      	ldr	r2, [r4, #4]
  4033de:	f022 0203 	bic.w	r2, r2, #3
  4033e2:	e75d      	b.n	4032a0 <_malloc_r+0x2f4>
  4033e4:	f859 3908 	ldr.w	r3, [r9], #-8
  4033e8:	4599      	cmp	r9, r3
  4033ea:	f040 8086 	bne.w	4034fa <_malloc_r+0x54e>
  4033ee:	f010 0f03 	tst.w	r0, #3
  4033f2:	f100 30ff 	add.w	r0, r0, #4294967295
  4033f6:	d1f5      	bne.n	4033e4 <_malloc_r+0x438>
  4033f8:	687b      	ldr	r3, [r7, #4]
  4033fa:	ea23 0304 	bic.w	r3, r3, r4
  4033fe:	607b      	str	r3, [r7, #4]
  403400:	0064      	lsls	r4, r4, #1
  403402:	429c      	cmp	r4, r3
  403404:	f63f aec7 	bhi.w	403196 <_malloc_r+0x1ea>
  403408:	2c00      	cmp	r4, #0
  40340a:	f43f aec4 	beq.w	403196 <_malloc_r+0x1ea>
  40340e:	421c      	tst	r4, r3
  403410:	4640      	mov	r0, r8
  403412:	f47f ae3e 	bne.w	403092 <_malloc_r+0xe6>
  403416:	0064      	lsls	r4, r4, #1
  403418:	421c      	tst	r4, r3
  40341a:	f100 0004 	add.w	r0, r0, #4
  40341e:	d0fa      	beq.n	403416 <_malloc_r+0x46a>
  403420:	e637      	b.n	403092 <_malloc_r+0xe6>
  403422:	468c      	mov	ip, r1
  403424:	e78c      	b.n	403340 <_malloc_r+0x394>
  403426:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40342a:	d815      	bhi.n	403458 <_malloc_r+0x4ac>
  40342c:	0bf3      	lsrs	r3, r6, #15
  40342e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403432:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403436:	00c3      	lsls	r3, r0, #3
  403438:	e5da      	b.n	402ff0 <_malloc_r+0x44>
  40343a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40343e:	e6ed      	b.n	40321c <_malloc_r+0x270>
  403440:	687b      	ldr	r3, [r7, #4]
  403442:	1092      	asrs	r2, r2, #2
  403444:	2101      	movs	r1, #1
  403446:	fa01 f202 	lsl.w	r2, r1, r2
  40344a:	4313      	orrs	r3, r2
  40344c:	607b      	str	r3, [r7, #4]
  40344e:	4662      	mov	r2, ip
  403450:	e779      	b.n	403346 <_malloc_r+0x39a>
  403452:	2301      	movs	r3, #1
  403454:	6053      	str	r3, [r2, #4]
  403456:	e729      	b.n	4032ac <_malloc_r+0x300>
  403458:	f240 5254 	movw	r2, #1364	; 0x554
  40345c:	4293      	cmp	r3, r2
  40345e:	d822      	bhi.n	4034a6 <_malloc_r+0x4fa>
  403460:	0cb3      	lsrs	r3, r6, #18
  403462:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403466:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40346a:	00c3      	lsls	r3, r0, #3
  40346c:	e5c0      	b.n	402ff0 <_malloc_r+0x44>
  40346e:	f103 0b10 	add.w	fp, r3, #16
  403472:	e6ae      	b.n	4031d2 <_malloc_r+0x226>
  403474:	2a54      	cmp	r2, #84	; 0x54
  403476:	d829      	bhi.n	4034cc <_malloc_r+0x520>
  403478:	0b1a      	lsrs	r2, r3, #12
  40347a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40347e:	00c9      	lsls	r1, r1, #3
  403480:	326e      	adds	r2, #110	; 0x6e
  403482:	e74d      	b.n	403320 <_malloc_r+0x374>
  403484:	4b20      	ldr	r3, [pc, #128]	; (403508 <_malloc_r+0x55c>)
  403486:	6819      	ldr	r1, [r3, #0]
  403488:	4459      	add	r1, fp
  40348a:	6019      	str	r1, [r3, #0]
  40348c:	e6b2      	b.n	4031f4 <_malloc_r+0x248>
  40348e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403492:	2800      	cmp	r0, #0
  403494:	f47f aeae 	bne.w	4031f4 <_malloc_r+0x248>
  403498:	eb08 030b 	add.w	r3, r8, fp
  40349c:	68ba      	ldr	r2, [r7, #8]
  40349e:	f043 0301 	orr.w	r3, r3, #1
  4034a2:	6053      	str	r3, [r2, #4]
  4034a4:	e6ee      	b.n	403284 <_malloc_r+0x2d8>
  4034a6:	207f      	movs	r0, #127	; 0x7f
  4034a8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4034ac:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4034b0:	e59e      	b.n	402ff0 <_malloc_r+0x44>
  4034b2:	f104 0108 	add.w	r1, r4, #8
  4034b6:	4628      	mov	r0, r5
  4034b8:	9300      	str	r3, [sp, #0]
  4034ba:	f001 f9ef 	bl	40489c <_free_r>
  4034be:	9b00      	ldr	r3, [sp, #0]
  4034c0:	6819      	ldr	r1, [r3, #0]
  4034c2:	e6df      	b.n	403284 <_malloc_r+0x2d8>
  4034c4:	2001      	movs	r0, #1
  4034c6:	f04f 0900 	mov.w	r9, #0
  4034ca:	e6bc      	b.n	403246 <_malloc_r+0x29a>
  4034cc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4034d0:	d805      	bhi.n	4034de <_malloc_r+0x532>
  4034d2:	0bda      	lsrs	r2, r3, #15
  4034d4:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4034d8:	00c9      	lsls	r1, r1, #3
  4034da:	3277      	adds	r2, #119	; 0x77
  4034dc:	e720      	b.n	403320 <_malloc_r+0x374>
  4034de:	f240 5154 	movw	r1, #1364	; 0x554
  4034e2:	428a      	cmp	r2, r1
  4034e4:	d805      	bhi.n	4034f2 <_malloc_r+0x546>
  4034e6:	0c9a      	lsrs	r2, r3, #18
  4034e8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4034ec:	00c9      	lsls	r1, r1, #3
  4034ee:	327c      	adds	r2, #124	; 0x7c
  4034f0:	e716      	b.n	403320 <_malloc_r+0x374>
  4034f2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4034f6:	227e      	movs	r2, #126	; 0x7e
  4034f8:	e712      	b.n	403320 <_malloc_r+0x374>
  4034fa:	687b      	ldr	r3, [r7, #4]
  4034fc:	e780      	b.n	403400 <_malloc_r+0x454>
  4034fe:	08f0      	lsrs	r0, r6, #3
  403500:	f106 0308 	add.w	r3, r6, #8
  403504:	e600      	b.n	403108 <_malloc_r+0x15c>
  403506:	bf00      	nop
  403508:	20400d78 	.word	0x20400d78

0040350c <memset>:
  40350c:	b470      	push	{r4, r5, r6}
  40350e:	0786      	lsls	r6, r0, #30
  403510:	d046      	beq.n	4035a0 <memset+0x94>
  403512:	1e54      	subs	r4, r2, #1
  403514:	2a00      	cmp	r2, #0
  403516:	d041      	beq.n	40359c <memset+0x90>
  403518:	b2ca      	uxtb	r2, r1
  40351a:	4603      	mov	r3, r0
  40351c:	e002      	b.n	403524 <memset+0x18>
  40351e:	f114 34ff 	adds.w	r4, r4, #4294967295
  403522:	d33b      	bcc.n	40359c <memset+0x90>
  403524:	f803 2b01 	strb.w	r2, [r3], #1
  403528:	079d      	lsls	r5, r3, #30
  40352a:	d1f8      	bne.n	40351e <memset+0x12>
  40352c:	2c03      	cmp	r4, #3
  40352e:	d92e      	bls.n	40358e <memset+0x82>
  403530:	b2cd      	uxtb	r5, r1
  403532:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403536:	2c0f      	cmp	r4, #15
  403538:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40353c:	d919      	bls.n	403572 <memset+0x66>
  40353e:	f103 0210 	add.w	r2, r3, #16
  403542:	4626      	mov	r6, r4
  403544:	3e10      	subs	r6, #16
  403546:	2e0f      	cmp	r6, #15
  403548:	f842 5c10 	str.w	r5, [r2, #-16]
  40354c:	f842 5c0c 	str.w	r5, [r2, #-12]
  403550:	f842 5c08 	str.w	r5, [r2, #-8]
  403554:	f842 5c04 	str.w	r5, [r2, #-4]
  403558:	f102 0210 	add.w	r2, r2, #16
  40355c:	d8f2      	bhi.n	403544 <memset+0x38>
  40355e:	f1a4 0210 	sub.w	r2, r4, #16
  403562:	f022 020f 	bic.w	r2, r2, #15
  403566:	f004 040f 	and.w	r4, r4, #15
  40356a:	3210      	adds	r2, #16
  40356c:	2c03      	cmp	r4, #3
  40356e:	4413      	add	r3, r2
  403570:	d90d      	bls.n	40358e <memset+0x82>
  403572:	461e      	mov	r6, r3
  403574:	4622      	mov	r2, r4
  403576:	3a04      	subs	r2, #4
  403578:	2a03      	cmp	r2, #3
  40357a:	f846 5b04 	str.w	r5, [r6], #4
  40357e:	d8fa      	bhi.n	403576 <memset+0x6a>
  403580:	1f22      	subs	r2, r4, #4
  403582:	f022 0203 	bic.w	r2, r2, #3
  403586:	3204      	adds	r2, #4
  403588:	4413      	add	r3, r2
  40358a:	f004 0403 	and.w	r4, r4, #3
  40358e:	b12c      	cbz	r4, 40359c <memset+0x90>
  403590:	b2c9      	uxtb	r1, r1
  403592:	441c      	add	r4, r3
  403594:	f803 1b01 	strb.w	r1, [r3], #1
  403598:	429c      	cmp	r4, r3
  40359a:	d1fb      	bne.n	403594 <memset+0x88>
  40359c:	bc70      	pop	{r4, r5, r6}
  40359e:	4770      	bx	lr
  4035a0:	4614      	mov	r4, r2
  4035a2:	4603      	mov	r3, r0
  4035a4:	e7c2      	b.n	40352c <memset+0x20>
  4035a6:	bf00      	nop

004035a8 <__malloc_lock>:
  4035a8:	4801      	ldr	r0, [pc, #4]	; (4035b0 <__malloc_lock+0x8>)
  4035aa:	f001 bc11 	b.w	404dd0 <__retarget_lock_acquire_recursive>
  4035ae:	bf00      	nop
  4035b0:	20406dd4 	.word	0x20406dd4

004035b4 <__malloc_unlock>:
  4035b4:	4801      	ldr	r0, [pc, #4]	; (4035bc <__malloc_unlock+0x8>)
  4035b6:	f001 bc0d 	b.w	404dd4 <__retarget_lock_release_recursive>
  4035ba:	bf00      	nop
  4035bc:	20406dd4 	.word	0x20406dd4

004035c0 <_sbrk_r>:
  4035c0:	b538      	push	{r3, r4, r5, lr}
  4035c2:	4c07      	ldr	r4, [pc, #28]	; (4035e0 <_sbrk_r+0x20>)
  4035c4:	2300      	movs	r3, #0
  4035c6:	4605      	mov	r5, r0
  4035c8:	4608      	mov	r0, r1
  4035ca:	6023      	str	r3, [r4, #0]
  4035cc:	f7ff f838 	bl	402640 <_sbrk>
  4035d0:	1c43      	adds	r3, r0, #1
  4035d2:	d000      	beq.n	4035d6 <_sbrk_r+0x16>
  4035d4:	bd38      	pop	{r3, r4, r5, pc}
  4035d6:	6823      	ldr	r3, [r4, #0]
  4035d8:	2b00      	cmp	r3, #0
  4035da:	d0fb      	beq.n	4035d4 <_sbrk_r+0x14>
  4035dc:	602b      	str	r3, [r5, #0]
  4035de:	bd38      	pop	{r3, r4, r5, pc}
  4035e0:	20406de8 	.word	0x20406de8

004035e4 <__sprint_r.part.0>:
  4035e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4035e8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4035ea:	049c      	lsls	r4, r3, #18
  4035ec:	4693      	mov	fp, r2
  4035ee:	d52f      	bpl.n	403650 <__sprint_r.part.0+0x6c>
  4035f0:	6893      	ldr	r3, [r2, #8]
  4035f2:	6812      	ldr	r2, [r2, #0]
  4035f4:	b353      	cbz	r3, 40364c <__sprint_r.part.0+0x68>
  4035f6:	460e      	mov	r6, r1
  4035f8:	4607      	mov	r7, r0
  4035fa:	f102 0908 	add.w	r9, r2, #8
  4035fe:	e919 0420 	ldmdb	r9, {r5, sl}
  403602:	ea5f 089a 	movs.w	r8, sl, lsr #2
  403606:	d017      	beq.n	403638 <__sprint_r.part.0+0x54>
  403608:	3d04      	subs	r5, #4
  40360a:	2400      	movs	r4, #0
  40360c:	e001      	b.n	403612 <__sprint_r.part.0+0x2e>
  40360e:	45a0      	cmp	r8, r4
  403610:	d010      	beq.n	403634 <__sprint_r.part.0+0x50>
  403612:	4632      	mov	r2, r6
  403614:	f855 1f04 	ldr.w	r1, [r5, #4]!
  403618:	4638      	mov	r0, r7
  40361a:	f001 f8bb 	bl	404794 <_fputwc_r>
  40361e:	1c43      	adds	r3, r0, #1
  403620:	f104 0401 	add.w	r4, r4, #1
  403624:	d1f3      	bne.n	40360e <__sprint_r.part.0+0x2a>
  403626:	2300      	movs	r3, #0
  403628:	f8cb 3008 	str.w	r3, [fp, #8]
  40362c:	f8cb 3004 	str.w	r3, [fp, #4]
  403630:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403634:	f8db 3008 	ldr.w	r3, [fp, #8]
  403638:	f02a 0a03 	bic.w	sl, sl, #3
  40363c:	eba3 030a 	sub.w	r3, r3, sl
  403640:	f8cb 3008 	str.w	r3, [fp, #8]
  403644:	f109 0908 	add.w	r9, r9, #8
  403648:	2b00      	cmp	r3, #0
  40364a:	d1d8      	bne.n	4035fe <__sprint_r.part.0+0x1a>
  40364c:	2000      	movs	r0, #0
  40364e:	e7ea      	b.n	403626 <__sprint_r.part.0+0x42>
  403650:	f001 fa0a 	bl	404a68 <__sfvwrite_r>
  403654:	2300      	movs	r3, #0
  403656:	f8cb 3008 	str.w	r3, [fp, #8]
  40365a:	f8cb 3004 	str.w	r3, [fp, #4]
  40365e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403662:	bf00      	nop

00403664 <_vfiprintf_r>:
  403664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403668:	b0ad      	sub	sp, #180	; 0xb4
  40366a:	461d      	mov	r5, r3
  40366c:	468b      	mov	fp, r1
  40366e:	4690      	mov	r8, r2
  403670:	9307      	str	r3, [sp, #28]
  403672:	9006      	str	r0, [sp, #24]
  403674:	b118      	cbz	r0, 40367e <_vfiprintf_r+0x1a>
  403676:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403678:	2b00      	cmp	r3, #0
  40367a:	f000 80f3 	beq.w	403864 <_vfiprintf_r+0x200>
  40367e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403682:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  403686:	07df      	lsls	r7, r3, #31
  403688:	b281      	uxth	r1, r0
  40368a:	d402      	bmi.n	403692 <_vfiprintf_r+0x2e>
  40368c:	058e      	lsls	r6, r1, #22
  40368e:	f140 80fc 	bpl.w	40388a <_vfiprintf_r+0x226>
  403692:	048c      	lsls	r4, r1, #18
  403694:	d40a      	bmi.n	4036ac <_vfiprintf_r+0x48>
  403696:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40369a:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  40369e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4036a2:	f8ab 100c 	strh.w	r1, [fp, #12]
  4036a6:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4036aa:	b289      	uxth	r1, r1
  4036ac:	0708      	lsls	r0, r1, #28
  4036ae:	f140 80b3 	bpl.w	403818 <_vfiprintf_r+0x1b4>
  4036b2:	f8db 3010 	ldr.w	r3, [fp, #16]
  4036b6:	2b00      	cmp	r3, #0
  4036b8:	f000 80ae 	beq.w	403818 <_vfiprintf_r+0x1b4>
  4036bc:	f001 031a 	and.w	r3, r1, #26
  4036c0:	2b0a      	cmp	r3, #10
  4036c2:	f000 80b5 	beq.w	403830 <_vfiprintf_r+0x1cc>
  4036c6:	2300      	movs	r3, #0
  4036c8:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  4036cc:	930b      	str	r3, [sp, #44]	; 0x2c
  4036ce:	9311      	str	r3, [sp, #68]	; 0x44
  4036d0:	9310      	str	r3, [sp, #64]	; 0x40
  4036d2:	9303      	str	r3, [sp, #12]
  4036d4:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  4036d8:	46ca      	mov	sl, r9
  4036da:	f8cd b010 	str.w	fp, [sp, #16]
  4036de:	f898 3000 	ldrb.w	r3, [r8]
  4036e2:	4644      	mov	r4, r8
  4036e4:	b1fb      	cbz	r3, 403726 <_vfiprintf_r+0xc2>
  4036e6:	2b25      	cmp	r3, #37	; 0x25
  4036e8:	d102      	bne.n	4036f0 <_vfiprintf_r+0x8c>
  4036ea:	e01c      	b.n	403726 <_vfiprintf_r+0xc2>
  4036ec:	2b25      	cmp	r3, #37	; 0x25
  4036ee:	d003      	beq.n	4036f8 <_vfiprintf_r+0x94>
  4036f0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4036f4:	2b00      	cmp	r3, #0
  4036f6:	d1f9      	bne.n	4036ec <_vfiprintf_r+0x88>
  4036f8:	eba4 0508 	sub.w	r5, r4, r8
  4036fc:	b19d      	cbz	r5, 403726 <_vfiprintf_r+0xc2>
  4036fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403700:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403702:	f8ca 8000 	str.w	r8, [sl]
  403706:	3301      	adds	r3, #1
  403708:	442a      	add	r2, r5
  40370a:	2b07      	cmp	r3, #7
  40370c:	f8ca 5004 	str.w	r5, [sl, #4]
  403710:	9211      	str	r2, [sp, #68]	; 0x44
  403712:	9310      	str	r3, [sp, #64]	; 0x40
  403714:	dd7a      	ble.n	40380c <_vfiprintf_r+0x1a8>
  403716:	2a00      	cmp	r2, #0
  403718:	f040 84b0 	bne.w	40407c <_vfiprintf_r+0xa18>
  40371c:	9b03      	ldr	r3, [sp, #12]
  40371e:	9210      	str	r2, [sp, #64]	; 0x40
  403720:	442b      	add	r3, r5
  403722:	46ca      	mov	sl, r9
  403724:	9303      	str	r3, [sp, #12]
  403726:	7823      	ldrb	r3, [r4, #0]
  403728:	2b00      	cmp	r3, #0
  40372a:	f000 83e0 	beq.w	403eee <_vfiprintf_r+0x88a>
  40372e:	2000      	movs	r0, #0
  403730:	f04f 0300 	mov.w	r3, #0
  403734:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  403738:	f104 0801 	add.w	r8, r4, #1
  40373c:	7862      	ldrb	r2, [r4, #1]
  40373e:	4605      	mov	r5, r0
  403740:	4606      	mov	r6, r0
  403742:	4603      	mov	r3, r0
  403744:	f04f 34ff 	mov.w	r4, #4294967295
  403748:	f108 0801 	add.w	r8, r8, #1
  40374c:	f1a2 0120 	sub.w	r1, r2, #32
  403750:	2958      	cmp	r1, #88	; 0x58
  403752:	f200 82de 	bhi.w	403d12 <_vfiprintf_r+0x6ae>
  403756:	e8df f011 	tbh	[pc, r1, lsl #1]
  40375a:	0221      	.short	0x0221
  40375c:	02dc02dc 	.word	0x02dc02dc
  403760:	02dc0229 	.word	0x02dc0229
  403764:	02dc02dc 	.word	0x02dc02dc
  403768:	02dc02dc 	.word	0x02dc02dc
  40376c:	028902dc 	.word	0x028902dc
  403770:	02dc0295 	.word	0x02dc0295
  403774:	02bd00a2 	.word	0x02bd00a2
  403778:	019f02dc 	.word	0x019f02dc
  40377c:	01a401a4 	.word	0x01a401a4
  403780:	01a401a4 	.word	0x01a401a4
  403784:	01a401a4 	.word	0x01a401a4
  403788:	01a401a4 	.word	0x01a401a4
  40378c:	02dc01a4 	.word	0x02dc01a4
  403790:	02dc02dc 	.word	0x02dc02dc
  403794:	02dc02dc 	.word	0x02dc02dc
  403798:	02dc02dc 	.word	0x02dc02dc
  40379c:	02dc02dc 	.word	0x02dc02dc
  4037a0:	01b202dc 	.word	0x01b202dc
  4037a4:	02dc02dc 	.word	0x02dc02dc
  4037a8:	02dc02dc 	.word	0x02dc02dc
  4037ac:	02dc02dc 	.word	0x02dc02dc
  4037b0:	02dc02dc 	.word	0x02dc02dc
  4037b4:	02dc02dc 	.word	0x02dc02dc
  4037b8:	02dc0197 	.word	0x02dc0197
  4037bc:	02dc02dc 	.word	0x02dc02dc
  4037c0:	02dc02dc 	.word	0x02dc02dc
  4037c4:	02dc019b 	.word	0x02dc019b
  4037c8:	025302dc 	.word	0x025302dc
  4037cc:	02dc02dc 	.word	0x02dc02dc
  4037d0:	02dc02dc 	.word	0x02dc02dc
  4037d4:	02dc02dc 	.word	0x02dc02dc
  4037d8:	02dc02dc 	.word	0x02dc02dc
  4037dc:	02dc02dc 	.word	0x02dc02dc
  4037e0:	021b025a 	.word	0x021b025a
  4037e4:	02dc02dc 	.word	0x02dc02dc
  4037e8:	026e02dc 	.word	0x026e02dc
  4037ec:	02dc021b 	.word	0x02dc021b
  4037f0:	027302dc 	.word	0x027302dc
  4037f4:	01f502dc 	.word	0x01f502dc
  4037f8:	02090182 	.word	0x02090182
  4037fc:	02dc02d7 	.word	0x02dc02d7
  403800:	02dc029a 	.word	0x02dc029a
  403804:	02dc00a7 	.word	0x02dc00a7
  403808:	022e02dc 	.word	0x022e02dc
  40380c:	f10a 0a08 	add.w	sl, sl, #8
  403810:	9b03      	ldr	r3, [sp, #12]
  403812:	442b      	add	r3, r5
  403814:	9303      	str	r3, [sp, #12]
  403816:	e786      	b.n	403726 <_vfiprintf_r+0xc2>
  403818:	4659      	mov	r1, fp
  40381a:	9806      	ldr	r0, [sp, #24]
  40381c:	f000 fdac 	bl	404378 <__swsetup_r>
  403820:	bb18      	cbnz	r0, 40386a <_vfiprintf_r+0x206>
  403822:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  403826:	f001 031a 	and.w	r3, r1, #26
  40382a:	2b0a      	cmp	r3, #10
  40382c:	f47f af4b 	bne.w	4036c6 <_vfiprintf_r+0x62>
  403830:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  403834:	2b00      	cmp	r3, #0
  403836:	f6ff af46 	blt.w	4036c6 <_vfiprintf_r+0x62>
  40383a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40383e:	07db      	lsls	r3, r3, #31
  403840:	d405      	bmi.n	40384e <_vfiprintf_r+0x1ea>
  403842:	058f      	lsls	r7, r1, #22
  403844:	d403      	bmi.n	40384e <_vfiprintf_r+0x1ea>
  403846:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40384a:	f001 fac3 	bl	404dd4 <__retarget_lock_release_recursive>
  40384e:	462b      	mov	r3, r5
  403850:	4642      	mov	r2, r8
  403852:	4659      	mov	r1, fp
  403854:	9806      	ldr	r0, [sp, #24]
  403856:	f000 fd4d 	bl	4042f4 <__sbprintf>
  40385a:	9003      	str	r0, [sp, #12]
  40385c:	9803      	ldr	r0, [sp, #12]
  40385e:	b02d      	add	sp, #180	; 0xb4
  403860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403864:	f000 fef4 	bl	404650 <__sinit>
  403868:	e709      	b.n	40367e <_vfiprintf_r+0x1a>
  40386a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40386e:	07d9      	lsls	r1, r3, #31
  403870:	d404      	bmi.n	40387c <_vfiprintf_r+0x218>
  403872:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403876:	059a      	lsls	r2, r3, #22
  403878:	f140 84aa 	bpl.w	4041d0 <_vfiprintf_r+0xb6c>
  40387c:	f04f 33ff 	mov.w	r3, #4294967295
  403880:	9303      	str	r3, [sp, #12]
  403882:	9803      	ldr	r0, [sp, #12]
  403884:	b02d      	add	sp, #180	; 0xb4
  403886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40388a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40388e:	f001 fa9f 	bl	404dd0 <__retarget_lock_acquire_recursive>
  403892:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  403896:	b281      	uxth	r1, r0
  403898:	e6fb      	b.n	403692 <_vfiprintf_r+0x2e>
  40389a:	4276      	negs	r6, r6
  40389c:	9207      	str	r2, [sp, #28]
  40389e:	f043 0304 	orr.w	r3, r3, #4
  4038a2:	f898 2000 	ldrb.w	r2, [r8]
  4038a6:	e74f      	b.n	403748 <_vfiprintf_r+0xe4>
  4038a8:	9608      	str	r6, [sp, #32]
  4038aa:	069e      	lsls	r6, r3, #26
  4038ac:	f100 8450 	bmi.w	404150 <_vfiprintf_r+0xaec>
  4038b0:	9907      	ldr	r1, [sp, #28]
  4038b2:	06dd      	lsls	r5, r3, #27
  4038b4:	460a      	mov	r2, r1
  4038b6:	f100 83ef 	bmi.w	404098 <_vfiprintf_r+0xa34>
  4038ba:	0658      	lsls	r0, r3, #25
  4038bc:	f140 83ec 	bpl.w	404098 <_vfiprintf_r+0xa34>
  4038c0:	880e      	ldrh	r6, [r1, #0]
  4038c2:	3104      	adds	r1, #4
  4038c4:	2700      	movs	r7, #0
  4038c6:	2201      	movs	r2, #1
  4038c8:	9107      	str	r1, [sp, #28]
  4038ca:	f04f 0100 	mov.w	r1, #0
  4038ce:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  4038d2:	2500      	movs	r5, #0
  4038d4:	1c61      	adds	r1, r4, #1
  4038d6:	f000 8116 	beq.w	403b06 <_vfiprintf_r+0x4a2>
  4038da:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  4038de:	9102      	str	r1, [sp, #8]
  4038e0:	ea56 0107 	orrs.w	r1, r6, r7
  4038e4:	f040 8114 	bne.w	403b10 <_vfiprintf_r+0x4ac>
  4038e8:	2c00      	cmp	r4, #0
  4038ea:	f040 835c 	bne.w	403fa6 <_vfiprintf_r+0x942>
  4038ee:	2a00      	cmp	r2, #0
  4038f0:	f040 83b7 	bne.w	404062 <_vfiprintf_r+0x9fe>
  4038f4:	f013 0301 	ands.w	r3, r3, #1
  4038f8:	9305      	str	r3, [sp, #20]
  4038fa:	f000 8457 	beq.w	4041ac <_vfiprintf_r+0xb48>
  4038fe:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  403902:	2330      	movs	r3, #48	; 0x30
  403904:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  403908:	9b05      	ldr	r3, [sp, #20]
  40390a:	42a3      	cmp	r3, r4
  40390c:	bfb8      	it	lt
  40390e:	4623      	movlt	r3, r4
  403910:	9301      	str	r3, [sp, #4]
  403912:	b10d      	cbz	r5, 403918 <_vfiprintf_r+0x2b4>
  403914:	3301      	adds	r3, #1
  403916:	9301      	str	r3, [sp, #4]
  403918:	9b02      	ldr	r3, [sp, #8]
  40391a:	f013 0302 	ands.w	r3, r3, #2
  40391e:	9309      	str	r3, [sp, #36]	; 0x24
  403920:	d002      	beq.n	403928 <_vfiprintf_r+0x2c4>
  403922:	9b01      	ldr	r3, [sp, #4]
  403924:	3302      	adds	r3, #2
  403926:	9301      	str	r3, [sp, #4]
  403928:	9b02      	ldr	r3, [sp, #8]
  40392a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40392e:	930a      	str	r3, [sp, #40]	; 0x28
  403930:	f040 8217 	bne.w	403d62 <_vfiprintf_r+0x6fe>
  403934:	9b08      	ldr	r3, [sp, #32]
  403936:	9a01      	ldr	r2, [sp, #4]
  403938:	1a9d      	subs	r5, r3, r2
  40393a:	2d00      	cmp	r5, #0
  40393c:	f340 8211 	ble.w	403d62 <_vfiprintf_r+0x6fe>
  403940:	2d10      	cmp	r5, #16
  403942:	f340 8490 	ble.w	404266 <_vfiprintf_r+0xc02>
  403946:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403948:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40394a:	4ec4      	ldr	r6, [pc, #784]	; (403c5c <_vfiprintf_r+0x5f8>)
  40394c:	46d6      	mov	lr, sl
  40394e:	2710      	movs	r7, #16
  403950:	46a2      	mov	sl, r4
  403952:	4619      	mov	r1, r3
  403954:	9c06      	ldr	r4, [sp, #24]
  403956:	e007      	b.n	403968 <_vfiprintf_r+0x304>
  403958:	f101 0c02 	add.w	ip, r1, #2
  40395c:	f10e 0e08 	add.w	lr, lr, #8
  403960:	4601      	mov	r1, r0
  403962:	3d10      	subs	r5, #16
  403964:	2d10      	cmp	r5, #16
  403966:	dd11      	ble.n	40398c <_vfiprintf_r+0x328>
  403968:	1c48      	adds	r0, r1, #1
  40396a:	3210      	adds	r2, #16
  40396c:	2807      	cmp	r0, #7
  40396e:	9211      	str	r2, [sp, #68]	; 0x44
  403970:	e88e 00c0 	stmia.w	lr, {r6, r7}
  403974:	9010      	str	r0, [sp, #64]	; 0x40
  403976:	ddef      	ble.n	403958 <_vfiprintf_r+0x2f4>
  403978:	2a00      	cmp	r2, #0
  40397a:	f040 81e4 	bne.w	403d46 <_vfiprintf_r+0x6e2>
  40397e:	3d10      	subs	r5, #16
  403980:	2d10      	cmp	r5, #16
  403982:	4611      	mov	r1, r2
  403984:	f04f 0c01 	mov.w	ip, #1
  403988:	46ce      	mov	lr, r9
  40398a:	dced      	bgt.n	403968 <_vfiprintf_r+0x304>
  40398c:	4654      	mov	r4, sl
  40398e:	4661      	mov	r1, ip
  403990:	46f2      	mov	sl, lr
  403992:	442a      	add	r2, r5
  403994:	2907      	cmp	r1, #7
  403996:	9211      	str	r2, [sp, #68]	; 0x44
  403998:	f8ca 6000 	str.w	r6, [sl]
  40399c:	f8ca 5004 	str.w	r5, [sl, #4]
  4039a0:	9110      	str	r1, [sp, #64]	; 0x40
  4039a2:	f300 82ec 	bgt.w	403f7e <_vfiprintf_r+0x91a>
  4039a6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4039aa:	f10a 0a08 	add.w	sl, sl, #8
  4039ae:	1c48      	adds	r0, r1, #1
  4039b0:	2d00      	cmp	r5, #0
  4039b2:	f040 81de 	bne.w	403d72 <_vfiprintf_r+0x70e>
  4039b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4039b8:	2b00      	cmp	r3, #0
  4039ba:	f000 81f8 	beq.w	403dae <_vfiprintf_r+0x74a>
  4039be:	3202      	adds	r2, #2
  4039c0:	a90e      	add	r1, sp, #56	; 0x38
  4039c2:	2302      	movs	r3, #2
  4039c4:	2807      	cmp	r0, #7
  4039c6:	9211      	str	r2, [sp, #68]	; 0x44
  4039c8:	9010      	str	r0, [sp, #64]	; 0x40
  4039ca:	e88a 000a 	stmia.w	sl, {r1, r3}
  4039ce:	f340 81ea 	ble.w	403da6 <_vfiprintf_r+0x742>
  4039d2:	2a00      	cmp	r2, #0
  4039d4:	f040 838c 	bne.w	4040f0 <_vfiprintf_r+0xa8c>
  4039d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4039da:	2b80      	cmp	r3, #128	; 0x80
  4039dc:	f04f 0001 	mov.w	r0, #1
  4039e0:	4611      	mov	r1, r2
  4039e2:	46ca      	mov	sl, r9
  4039e4:	f040 81e7 	bne.w	403db6 <_vfiprintf_r+0x752>
  4039e8:	9b08      	ldr	r3, [sp, #32]
  4039ea:	9d01      	ldr	r5, [sp, #4]
  4039ec:	1b5e      	subs	r6, r3, r5
  4039ee:	2e00      	cmp	r6, #0
  4039f0:	f340 81e1 	ble.w	403db6 <_vfiprintf_r+0x752>
  4039f4:	2e10      	cmp	r6, #16
  4039f6:	4d9a      	ldr	r5, [pc, #616]	; (403c60 <_vfiprintf_r+0x5fc>)
  4039f8:	f340 8450 	ble.w	40429c <_vfiprintf_r+0xc38>
  4039fc:	46d4      	mov	ip, sl
  4039fe:	2710      	movs	r7, #16
  403a00:	46a2      	mov	sl, r4
  403a02:	9c06      	ldr	r4, [sp, #24]
  403a04:	e007      	b.n	403a16 <_vfiprintf_r+0x3b2>
  403a06:	f101 0e02 	add.w	lr, r1, #2
  403a0a:	f10c 0c08 	add.w	ip, ip, #8
  403a0e:	4601      	mov	r1, r0
  403a10:	3e10      	subs	r6, #16
  403a12:	2e10      	cmp	r6, #16
  403a14:	dd11      	ble.n	403a3a <_vfiprintf_r+0x3d6>
  403a16:	1c48      	adds	r0, r1, #1
  403a18:	3210      	adds	r2, #16
  403a1a:	2807      	cmp	r0, #7
  403a1c:	9211      	str	r2, [sp, #68]	; 0x44
  403a1e:	e88c 00a0 	stmia.w	ip, {r5, r7}
  403a22:	9010      	str	r0, [sp, #64]	; 0x40
  403a24:	ddef      	ble.n	403a06 <_vfiprintf_r+0x3a2>
  403a26:	2a00      	cmp	r2, #0
  403a28:	f040 829d 	bne.w	403f66 <_vfiprintf_r+0x902>
  403a2c:	3e10      	subs	r6, #16
  403a2e:	2e10      	cmp	r6, #16
  403a30:	f04f 0e01 	mov.w	lr, #1
  403a34:	4611      	mov	r1, r2
  403a36:	46cc      	mov	ip, r9
  403a38:	dced      	bgt.n	403a16 <_vfiprintf_r+0x3b2>
  403a3a:	4654      	mov	r4, sl
  403a3c:	46e2      	mov	sl, ip
  403a3e:	4432      	add	r2, r6
  403a40:	f1be 0f07 	cmp.w	lr, #7
  403a44:	9211      	str	r2, [sp, #68]	; 0x44
  403a46:	e88a 0060 	stmia.w	sl, {r5, r6}
  403a4a:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  403a4e:	f300 8369 	bgt.w	404124 <_vfiprintf_r+0xac0>
  403a52:	f10a 0a08 	add.w	sl, sl, #8
  403a56:	f10e 0001 	add.w	r0, lr, #1
  403a5a:	4671      	mov	r1, lr
  403a5c:	e1ab      	b.n	403db6 <_vfiprintf_r+0x752>
  403a5e:	9608      	str	r6, [sp, #32]
  403a60:	f013 0220 	ands.w	r2, r3, #32
  403a64:	f040 838c 	bne.w	404180 <_vfiprintf_r+0xb1c>
  403a68:	f013 0110 	ands.w	r1, r3, #16
  403a6c:	f040 831a 	bne.w	4040a4 <_vfiprintf_r+0xa40>
  403a70:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  403a74:	f000 8316 	beq.w	4040a4 <_vfiprintf_r+0xa40>
  403a78:	9807      	ldr	r0, [sp, #28]
  403a7a:	460a      	mov	r2, r1
  403a7c:	4601      	mov	r1, r0
  403a7e:	3104      	adds	r1, #4
  403a80:	8806      	ldrh	r6, [r0, #0]
  403a82:	9107      	str	r1, [sp, #28]
  403a84:	2700      	movs	r7, #0
  403a86:	e720      	b.n	4038ca <_vfiprintf_r+0x266>
  403a88:	9608      	str	r6, [sp, #32]
  403a8a:	f043 0310 	orr.w	r3, r3, #16
  403a8e:	e7e7      	b.n	403a60 <_vfiprintf_r+0x3fc>
  403a90:	9608      	str	r6, [sp, #32]
  403a92:	f043 0310 	orr.w	r3, r3, #16
  403a96:	e708      	b.n	4038aa <_vfiprintf_r+0x246>
  403a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403a9c:	f898 2000 	ldrb.w	r2, [r8]
  403aa0:	e652      	b.n	403748 <_vfiprintf_r+0xe4>
  403aa2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  403aa6:	2600      	movs	r6, #0
  403aa8:	f818 2b01 	ldrb.w	r2, [r8], #1
  403aac:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  403ab0:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  403ab4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  403ab8:	2909      	cmp	r1, #9
  403aba:	d9f5      	bls.n	403aa8 <_vfiprintf_r+0x444>
  403abc:	e646      	b.n	40374c <_vfiprintf_r+0xe8>
  403abe:	9608      	str	r6, [sp, #32]
  403ac0:	2800      	cmp	r0, #0
  403ac2:	f040 8408 	bne.w	4042d6 <_vfiprintf_r+0xc72>
  403ac6:	f043 0310 	orr.w	r3, r3, #16
  403aca:	069e      	lsls	r6, r3, #26
  403acc:	f100 834c 	bmi.w	404168 <_vfiprintf_r+0xb04>
  403ad0:	06dd      	lsls	r5, r3, #27
  403ad2:	f100 82f3 	bmi.w	4040bc <_vfiprintf_r+0xa58>
  403ad6:	0658      	lsls	r0, r3, #25
  403ad8:	f140 82f0 	bpl.w	4040bc <_vfiprintf_r+0xa58>
  403adc:	9d07      	ldr	r5, [sp, #28]
  403ade:	f9b5 6000 	ldrsh.w	r6, [r5]
  403ae2:	462a      	mov	r2, r5
  403ae4:	17f7      	asrs	r7, r6, #31
  403ae6:	3204      	adds	r2, #4
  403ae8:	4630      	mov	r0, r6
  403aea:	4639      	mov	r1, r7
  403aec:	9207      	str	r2, [sp, #28]
  403aee:	2800      	cmp	r0, #0
  403af0:	f171 0200 	sbcs.w	r2, r1, #0
  403af4:	f2c0 835d 	blt.w	4041b2 <_vfiprintf_r+0xb4e>
  403af8:	1c61      	adds	r1, r4, #1
  403afa:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403afe:	f04f 0201 	mov.w	r2, #1
  403b02:	f47f aeea 	bne.w	4038da <_vfiprintf_r+0x276>
  403b06:	ea56 0107 	orrs.w	r1, r6, r7
  403b0a:	f000 824d 	beq.w	403fa8 <_vfiprintf_r+0x944>
  403b0e:	9302      	str	r3, [sp, #8]
  403b10:	2a01      	cmp	r2, #1
  403b12:	f000 828c 	beq.w	40402e <_vfiprintf_r+0x9ca>
  403b16:	2a02      	cmp	r2, #2
  403b18:	f040 825c 	bne.w	403fd4 <_vfiprintf_r+0x970>
  403b1c:	980b      	ldr	r0, [sp, #44]	; 0x2c
  403b1e:	46cb      	mov	fp, r9
  403b20:	0933      	lsrs	r3, r6, #4
  403b22:	f006 010f 	and.w	r1, r6, #15
  403b26:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  403b2a:	093a      	lsrs	r2, r7, #4
  403b2c:	461e      	mov	r6, r3
  403b2e:	4617      	mov	r7, r2
  403b30:	5c43      	ldrb	r3, [r0, r1]
  403b32:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  403b36:	ea56 0307 	orrs.w	r3, r6, r7
  403b3a:	d1f1      	bne.n	403b20 <_vfiprintf_r+0x4bc>
  403b3c:	eba9 030b 	sub.w	r3, r9, fp
  403b40:	9305      	str	r3, [sp, #20]
  403b42:	e6e1      	b.n	403908 <_vfiprintf_r+0x2a4>
  403b44:	2800      	cmp	r0, #0
  403b46:	f040 83c0 	bne.w	4042ca <_vfiprintf_r+0xc66>
  403b4a:	0699      	lsls	r1, r3, #26
  403b4c:	f100 8367 	bmi.w	40421e <_vfiprintf_r+0xbba>
  403b50:	06da      	lsls	r2, r3, #27
  403b52:	f100 80f1 	bmi.w	403d38 <_vfiprintf_r+0x6d4>
  403b56:	065b      	lsls	r3, r3, #25
  403b58:	f140 80ee 	bpl.w	403d38 <_vfiprintf_r+0x6d4>
  403b5c:	9a07      	ldr	r2, [sp, #28]
  403b5e:	6813      	ldr	r3, [r2, #0]
  403b60:	3204      	adds	r2, #4
  403b62:	9207      	str	r2, [sp, #28]
  403b64:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  403b68:	801a      	strh	r2, [r3, #0]
  403b6a:	e5b8      	b.n	4036de <_vfiprintf_r+0x7a>
  403b6c:	9807      	ldr	r0, [sp, #28]
  403b6e:	4a3d      	ldr	r2, [pc, #244]	; (403c64 <_vfiprintf_r+0x600>)
  403b70:	9608      	str	r6, [sp, #32]
  403b72:	920b      	str	r2, [sp, #44]	; 0x2c
  403b74:	6806      	ldr	r6, [r0, #0]
  403b76:	2278      	movs	r2, #120	; 0x78
  403b78:	2130      	movs	r1, #48	; 0x30
  403b7a:	3004      	adds	r0, #4
  403b7c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  403b80:	f043 0302 	orr.w	r3, r3, #2
  403b84:	9007      	str	r0, [sp, #28]
  403b86:	2700      	movs	r7, #0
  403b88:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  403b8c:	2202      	movs	r2, #2
  403b8e:	e69c      	b.n	4038ca <_vfiprintf_r+0x266>
  403b90:	9608      	str	r6, [sp, #32]
  403b92:	2800      	cmp	r0, #0
  403b94:	d099      	beq.n	403aca <_vfiprintf_r+0x466>
  403b96:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403b9a:	e796      	b.n	403aca <_vfiprintf_r+0x466>
  403b9c:	f898 2000 	ldrb.w	r2, [r8]
  403ba0:	2d00      	cmp	r5, #0
  403ba2:	f47f add1 	bne.w	403748 <_vfiprintf_r+0xe4>
  403ba6:	2001      	movs	r0, #1
  403ba8:	2520      	movs	r5, #32
  403baa:	e5cd      	b.n	403748 <_vfiprintf_r+0xe4>
  403bac:	f043 0301 	orr.w	r3, r3, #1
  403bb0:	f898 2000 	ldrb.w	r2, [r8]
  403bb4:	e5c8      	b.n	403748 <_vfiprintf_r+0xe4>
  403bb6:	9608      	str	r6, [sp, #32]
  403bb8:	2800      	cmp	r0, #0
  403bba:	f040 8393 	bne.w	4042e4 <_vfiprintf_r+0xc80>
  403bbe:	4929      	ldr	r1, [pc, #164]	; (403c64 <_vfiprintf_r+0x600>)
  403bc0:	910b      	str	r1, [sp, #44]	; 0x2c
  403bc2:	069f      	lsls	r7, r3, #26
  403bc4:	f100 82e8 	bmi.w	404198 <_vfiprintf_r+0xb34>
  403bc8:	9807      	ldr	r0, [sp, #28]
  403bca:	06de      	lsls	r6, r3, #27
  403bcc:	4601      	mov	r1, r0
  403bce:	f100 8270 	bmi.w	4040b2 <_vfiprintf_r+0xa4e>
  403bd2:	065d      	lsls	r5, r3, #25
  403bd4:	f140 826d 	bpl.w	4040b2 <_vfiprintf_r+0xa4e>
  403bd8:	3104      	adds	r1, #4
  403bda:	8806      	ldrh	r6, [r0, #0]
  403bdc:	9107      	str	r1, [sp, #28]
  403bde:	2700      	movs	r7, #0
  403be0:	07d8      	lsls	r0, r3, #31
  403be2:	f140 8222 	bpl.w	40402a <_vfiprintf_r+0x9c6>
  403be6:	ea56 0107 	orrs.w	r1, r6, r7
  403bea:	f000 821e 	beq.w	40402a <_vfiprintf_r+0x9c6>
  403bee:	2130      	movs	r1, #48	; 0x30
  403bf0:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  403bf4:	f043 0302 	orr.w	r3, r3, #2
  403bf8:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  403bfc:	2202      	movs	r2, #2
  403bfe:	e664      	b.n	4038ca <_vfiprintf_r+0x266>
  403c00:	9608      	str	r6, [sp, #32]
  403c02:	2800      	cmp	r0, #0
  403c04:	f040 836b 	bne.w	4042de <_vfiprintf_r+0xc7a>
  403c08:	4917      	ldr	r1, [pc, #92]	; (403c68 <_vfiprintf_r+0x604>)
  403c0a:	910b      	str	r1, [sp, #44]	; 0x2c
  403c0c:	e7d9      	b.n	403bc2 <_vfiprintf_r+0x55e>
  403c0e:	9907      	ldr	r1, [sp, #28]
  403c10:	9608      	str	r6, [sp, #32]
  403c12:	680a      	ldr	r2, [r1, #0]
  403c14:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  403c18:	f04f 0000 	mov.w	r0, #0
  403c1c:	460a      	mov	r2, r1
  403c1e:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  403c22:	3204      	adds	r2, #4
  403c24:	2001      	movs	r0, #1
  403c26:	9001      	str	r0, [sp, #4]
  403c28:	9207      	str	r2, [sp, #28]
  403c2a:	9005      	str	r0, [sp, #20]
  403c2c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  403c30:	9302      	str	r3, [sp, #8]
  403c32:	2400      	movs	r4, #0
  403c34:	e670      	b.n	403918 <_vfiprintf_r+0x2b4>
  403c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403c3a:	f898 2000 	ldrb.w	r2, [r8]
  403c3e:	e583      	b.n	403748 <_vfiprintf_r+0xe4>
  403c40:	f898 2000 	ldrb.w	r2, [r8]
  403c44:	2a6c      	cmp	r2, #108	; 0x6c
  403c46:	bf03      	ittte	eq
  403c48:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  403c4c:	f043 0320 	orreq.w	r3, r3, #32
  403c50:	f108 0801 	addeq.w	r8, r8, #1
  403c54:	f043 0310 	orrne.w	r3, r3, #16
  403c58:	e576      	b.n	403748 <_vfiprintf_r+0xe4>
  403c5a:	bf00      	nop
  403c5c:	00405dd4 	.word	0x00405dd4
  403c60:	00405de4 	.word	0x00405de4
  403c64:	00405db8 	.word	0x00405db8
  403c68:	00405da4 	.word	0x00405da4
  403c6c:	9907      	ldr	r1, [sp, #28]
  403c6e:	680e      	ldr	r6, [r1, #0]
  403c70:	460a      	mov	r2, r1
  403c72:	2e00      	cmp	r6, #0
  403c74:	f102 0204 	add.w	r2, r2, #4
  403c78:	f6ff ae0f 	blt.w	40389a <_vfiprintf_r+0x236>
  403c7c:	9207      	str	r2, [sp, #28]
  403c7e:	f898 2000 	ldrb.w	r2, [r8]
  403c82:	e561      	b.n	403748 <_vfiprintf_r+0xe4>
  403c84:	f898 2000 	ldrb.w	r2, [r8]
  403c88:	2001      	movs	r0, #1
  403c8a:	252b      	movs	r5, #43	; 0x2b
  403c8c:	e55c      	b.n	403748 <_vfiprintf_r+0xe4>
  403c8e:	9907      	ldr	r1, [sp, #28]
  403c90:	9608      	str	r6, [sp, #32]
  403c92:	f8d1 b000 	ldr.w	fp, [r1]
  403c96:	f04f 0200 	mov.w	r2, #0
  403c9a:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  403c9e:	1d0e      	adds	r6, r1, #4
  403ca0:	f1bb 0f00 	cmp.w	fp, #0
  403ca4:	f000 82e5 	beq.w	404272 <_vfiprintf_r+0xc0e>
  403ca8:	1c67      	adds	r7, r4, #1
  403caa:	f000 82c4 	beq.w	404236 <_vfiprintf_r+0xbd2>
  403cae:	4622      	mov	r2, r4
  403cb0:	2100      	movs	r1, #0
  403cb2:	4658      	mov	r0, fp
  403cb4:	9301      	str	r3, [sp, #4]
  403cb6:	f001 f923 	bl	404f00 <memchr>
  403cba:	9b01      	ldr	r3, [sp, #4]
  403cbc:	2800      	cmp	r0, #0
  403cbe:	f000 82e5 	beq.w	40428c <_vfiprintf_r+0xc28>
  403cc2:	eba0 020b 	sub.w	r2, r0, fp
  403cc6:	9205      	str	r2, [sp, #20]
  403cc8:	9607      	str	r6, [sp, #28]
  403cca:	9302      	str	r3, [sp, #8]
  403ccc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403cd0:	2400      	movs	r4, #0
  403cd2:	e619      	b.n	403908 <_vfiprintf_r+0x2a4>
  403cd4:	f898 2000 	ldrb.w	r2, [r8]
  403cd8:	2a2a      	cmp	r2, #42	; 0x2a
  403cda:	f108 0701 	add.w	r7, r8, #1
  403cde:	f000 82e9 	beq.w	4042b4 <_vfiprintf_r+0xc50>
  403ce2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  403ce6:	2909      	cmp	r1, #9
  403ce8:	46b8      	mov	r8, r7
  403cea:	f04f 0400 	mov.w	r4, #0
  403cee:	f63f ad2d 	bhi.w	40374c <_vfiprintf_r+0xe8>
  403cf2:	f818 2b01 	ldrb.w	r2, [r8], #1
  403cf6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403cfa:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  403cfe:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  403d02:	2909      	cmp	r1, #9
  403d04:	d9f5      	bls.n	403cf2 <_vfiprintf_r+0x68e>
  403d06:	e521      	b.n	40374c <_vfiprintf_r+0xe8>
  403d08:	f043 0320 	orr.w	r3, r3, #32
  403d0c:	f898 2000 	ldrb.w	r2, [r8]
  403d10:	e51a      	b.n	403748 <_vfiprintf_r+0xe4>
  403d12:	9608      	str	r6, [sp, #32]
  403d14:	2800      	cmp	r0, #0
  403d16:	f040 82db 	bne.w	4042d0 <_vfiprintf_r+0xc6c>
  403d1a:	2a00      	cmp	r2, #0
  403d1c:	f000 80e7 	beq.w	403eee <_vfiprintf_r+0x88a>
  403d20:	2101      	movs	r1, #1
  403d22:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  403d26:	f04f 0200 	mov.w	r2, #0
  403d2a:	9101      	str	r1, [sp, #4]
  403d2c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  403d30:	9105      	str	r1, [sp, #20]
  403d32:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  403d36:	e77b      	b.n	403c30 <_vfiprintf_r+0x5cc>
  403d38:	9a07      	ldr	r2, [sp, #28]
  403d3a:	6813      	ldr	r3, [r2, #0]
  403d3c:	3204      	adds	r2, #4
  403d3e:	9207      	str	r2, [sp, #28]
  403d40:	9a03      	ldr	r2, [sp, #12]
  403d42:	601a      	str	r2, [r3, #0]
  403d44:	e4cb      	b.n	4036de <_vfiprintf_r+0x7a>
  403d46:	aa0f      	add	r2, sp, #60	; 0x3c
  403d48:	9904      	ldr	r1, [sp, #16]
  403d4a:	4620      	mov	r0, r4
  403d4c:	f7ff fc4a 	bl	4035e4 <__sprint_r.part.0>
  403d50:	2800      	cmp	r0, #0
  403d52:	f040 8139 	bne.w	403fc8 <_vfiprintf_r+0x964>
  403d56:	9910      	ldr	r1, [sp, #64]	; 0x40
  403d58:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403d5a:	f101 0c01 	add.w	ip, r1, #1
  403d5e:	46ce      	mov	lr, r9
  403d60:	e5ff      	b.n	403962 <_vfiprintf_r+0x2fe>
  403d62:	9910      	ldr	r1, [sp, #64]	; 0x40
  403d64:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403d66:	1c48      	adds	r0, r1, #1
  403d68:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403d6c:	2d00      	cmp	r5, #0
  403d6e:	f43f ae22 	beq.w	4039b6 <_vfiprintf_r+0x352>
  403d72:	3201      	adds	r2, #1
  403d74:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  403d78:	2101      	movs	r1, #1
  403d7a:	2807      	cmp	r0, #7
  403d7c:	9211      	str	r2, [sp, #68]	; 0x44
  403d7e:	9010      	str	r0, [sp, #64]	; 0x40
  403d80:	f8ca 5000 	str.w	r5, [sl]
  403d84:	f8ca 1004 	str.w	r1, [sl, #4]
  403d88:	f340 8108 	ble.w	403f9c <_vfiprintf_r+0x938>
  403d8c:	2a00      	cmp	r2, #0
  403d8e:	f040 81bc 	bne.w	40410a <_vfiprintf_r+0xaa6>
  403d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403d94:	2b00      	cmp	r3, #0
  403d96:	f43f ae1f 	beq.w	4039d8 <_vfiprintf_r+0x374>
  403d9a:	ab0e      	add	r3, sp, #56	; 0x38
  403d9c:	2202      	movs	r2, #2
  403d9e:	4608      	mov	r0, r1
  403da0:	931c      	str	r3, [sp, #112]	; 0x70
  403da2:	921d      	str	r2, [sp, #116]	; 0x74
  403da4:	46ca      	mov	sl, r9
  403da6:	4601      	mov	r1, r0
  403da8:	f10a 0a08 	add.w	sl, sl, #8
  403dac:	3001      	adds	r0, #1
  403dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403db0:	2b80      	cmp	r3, #128	; 0x80
  403db2:	f43f ae19 	beq.w	4039e8 <_vfiprintf_r+0x384>
  403db6:	9b05      	ldr	r3, [sp, #20]
  403db8:	1ae4      	subs	r4, r4, r3
  403dba:	2c00      	cmp	r4, #0
  403dbc:	dd2e      	ble.n	403e1c <_vfiprintf_r+0x7b8>
  403dbe:	2c10      	cmp	r4, #16
  403dc0:	4db3      	ldr	r5, [pc, #716]	; (404090 <_vfiprintf_r+0xa2c>)
  403dc2:	dd1e      	ble.n	403e02 <_vfiprintf_r+0x79e>
  403dc4:	46d6      	mov	lr, sl
  403dc6:	2610      	movs	r6, #16
  403dc8:	9f06      	ldr	r7, [sp, #24]
  403dca:	f8dd a010 	ldr.w	sl, [sp, #16]
  403dce:	e006      	b.n	403dde <_vfiprintf_r+0x77a>
  403dd0:	1c88      	adds	r0, r1, #2
  403dd2:	f10e 0e08 	add.w	lr, lr, #8
  403dd6:	4619      	mov	r1, r3
  403dd8:	3c10      	subs	r4, #16
  403dda:	2c10      	cmp	r4, #16
  403ddc:	dd10      	ble.n	403e00 <_vfiprintf_r+0x79c>
  403dde:	1c4b      	adds	r3, r1, #1
  403de0:	3210      	adds	r2, #16
  403de2:	2b07      	cmp	r3, #7
  403de4:	9211      	str	r2, [sp, #68]	; 0x44
  403de6:	e88e 0060 	stmia.w	lr, {r5, r6}
  403dea:	9310      	str	r3, [sp, #64]	; 0x40
  403dec:	ddf0      	ble.n	403dd0 <_vfiprintf_r+0x76c>
  403dee:	2a00      	cmp	r2, #0
  403df0:	d165      	bne.n	403ebe <_vfiprintf_r+0x85a>
  403df2:	3c10      	subs	r4, #16
  403df4:	2c10      	cmp	r4, #16
  403df6:	f04f 0001 	mov.w	r0, #1
  403dfa:	4611      	mov	r1, r2
  403dfc:	46ce      	mov	lr, r9
  403dfe:	dcee      	bgt.n	403dde <_vfiprintf_r+0x77a>
  403e00:	46f2      	mov	sl, lr
  403e02:	4422      	add	r2, r4
  403e04:	2807      	cmp	r0, #7
  403e06:	9211      	str	r2, [sp, #68]	; 0x44
  403e08:	f8ca 5000 	str.w	r5, [sl]
  403e0c:	f8ca 4004 	str.w	r4, [sl, #4]
  403e10:	9010      	str	r0, [sp, #64]	; 0x40
  403e12:	f300 8085 	bgt.w	403f20 <_vfiprintf_r+0x8bc>
  403e16:	f10a 0a08 	add.w	sl, sl, #8
  403e1a:	3001      	adds	r0, #1
  403e1c:	9905      	ldr	r1, [sp, #20]
  403e1e:	f8ca b000 	str.w	fp, [sl]
  403e22:	440a      	add	r2, r1
  403e24:	2807      	cmp	r0, #7
  403e26:	9211      	str	r2, [sp, #68]	; 0x44
  403e28:	f8ca 1004 	str.w	r1, [sl, #4]
  403e2c:	9010      	str	r0, [sp, #64]	; 0x40
  403e2e:	f340 8082 	ble.w	403f36 <_vfiprintf_r+0x8d2>
  403e32:	2a00      	cmp	r2, #0
  403e34:	f040 8118 	bne.w	404068 <_vfiprintf_r+0xa04>
  403e38:	9b02      	ldr	r3, [sp, #8]
  403e3a:	9210      	str	r2, [sp, #64]	; 0x40
  403e3c:	0758      	lsls	r0, r3, #29
  403e3e:	d535      	bpl.n	403eac <_vfiprintf_r+0x848>
  403e40:	9b08      	ldr	r3, [sp, #32]
  403e42:	9901      	ldr	r1, [sp, #4]
  403e44:	1a5c      	subs	r4, r3, r1
  403e46:	2c00      	cmp	r4, #0
  403e48:	f340 80e7 	ble.w	40401a <_vfiprintf_r+0x9b6>
  403e4c:	46ca      	mov	sl, r9
  403e4e:	2c10      	cmp	r4, #16
  403e50:	f340 8218 	ble.w	404284 <_vfiprintf_r+0xc20>
  403e54:	9910      	ldr	r1, [sp, #64]	; 0x40
  403e56:	4e8f      	ldr	r6, [pc, #572]	; (404094 <_vfiprintf_r+0xa30>)
  403e58:	9f06      	ldr	r7, [sp, #24]
  403e5a:	f8dd b010 	ldr.w	fp, [sp, #16]
  403e5e:	2510      	movs	r5, #16
  403e60:	e006      	b.n	403e70 <_vfiprintf_r+0x80c>
  403e62:	1c88      	adds	r0, r1, #2
  403e64:	f10a 0a08 	add.w	sl, sl, #8
  403e68:	4619      	mov	r1, r3
  403e6a:	3c10      	subs	r4, #16
  403e6c:	2c10      	cmp	r4, #16
  403e6e:	dd11      	ble.n	403e94 <_vfiprintf_r+0x830>
  403e70:	1c4b      	adds	r3, r1, #1
  403e72:	3210      	adds	r2, #16
  403e74:	2b07      	cmp	r3, #7
  403e76:	9211      	str	r2, [sp, #68]	; 0x44
  403e78:	f8ca 6000 	str.w	r6, [sl]
  403e7c:	f8ca 5004 	str.w	r5, [sl, #4]
  403e80:	9310      	str	r3, [sp, #64]	; 0x40
  403e82:	ddee      	ble.n	403e62 <_vfiprintf_r+0x7fe>
  403e84:	bb42      	cbnz	r2, 403ed8 <_vfiprintf_r+0x874>
  403e86:	3c10      	subs	r4, #16
  403e88:	2c10      	cmp	r4, #16
  403e8a:	f04f 0001 	mov.w	r0, #1
  403e8e:	4611      	mov	r1, r2
  403e90:	46ca      	mov	sl, r9
  403e92:	dced      	bgt.n	403e70 <_vfiprintf_r+0x80c>
  403e94:	4422      	add	r2, r4
  403e96:	2807      	cmp	r0, #7
  403e98:	9211      	str	r2, [sp, #68]	; 0x44
  403e9a:	f8ca 6000 	str.w	r6, [sl]
  403e9e:	f8ca 4004 	str.w	r4, [sl, #4]
  403ea2:	9010      	str	r0, [sp, #64]	; 0x40
  403ea4:	dd51      	ble.n	403f4a <_vfiprintf_r+0x8e6>
  403ea6:	2a00      	cmp	r2, #0
  403ea8:	f040 819b 	bne.w	4041e2 <_vfiprintf_r+0xb7e>
  403eac:	9b03      	ldr	r3, [sp, #12]
  403eae:	9a08      	ldr	r2, [sp, #32]
  403eb0:	9901      	ldr	r1, [sp, #4]
  403eb2:	428a      	cmp	r2, r1
  403eb4:	bfac      	ite	ge
  403eb6:	189b      	addge	r3, r3, r2
  403eb8:	185b      	addlt	r3, r3, r1
  403eba:	9303      	str	r3, [sp, #12]
  403ebc:	e04e      	b.n	403f5c <_vfiprintf_r+0x8f8>
  403ebe:	aa0f      	add	r2, sp, #60	; 0x3c
  403ec0:	4651      	mov	r1, sl
  403ec2:	4638      	mov	r0, r7
  403ec4:	f7ff fb8e 	bl	4035e4 <__sprint_r.part.0>
  403ec8:	2800      	cmp	r0, #0
  403eca:	f040 813f 	bne.w	40414c <_vfiprintf_r+0xae8>
  403ece:	9910      	ldr	r1, [sp, #64]	; 0x40
  403ed0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403ed2:	1c48      	adds	r0, r1, #1
  403ed4:	46ce      	mov	lr, r9
  403ed6:	e77f      	b.n	403dd8 <_vfiprintf_r+0x774>
  403ed8:	aa0f      	add	r2, sp, #60	; 0x3c
  403eda:	4659      	mov	r1, fp
  403edc:	4638      	mov	r0, r7
  403ede:	f7ff fb81 	bl	4035e4 <__sprint_r.part.0>
  403ee2:	b960      	cbnz	r0, 403efe <_vfiprintf_r+0x89a>
  403ee4:	9910      	ldr	r1, [sp, #64]	; 0x40
  403ee6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403ee8:	1c48      	adds	r0, r1, #1
  403eea:	46ca      	mov	sl, r9
  403eec:	e7bd      	b.n	403e6a <_vfiprintf_r+0x806>
  403eee:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403ef0:	f8dd b010 	ldr.w	fp, [sp, #16]
  403ef4:	2b00      	cmp	r3, #0
  403ef6:	f040 81d4 	bne.w	4042a2 <_vfiprintf_r+0xc3e>
  403efa:	2300      	movs	r3, #0
  403efc:	9310      	str	r3, [sp, #64]	; 0x40
  403efe:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403f02:	f013 0f01 	tst.w	r3, #1
  403f06:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403f0a:	d102      	bne.n	403f12 <_vfiprintf_r+0x8ae>
  403f0c:	059a      	lsls	r2, r3, #22
  403f0e:	f140 80de 	bpl.w	4040ce <_vfiprintf_r+0xa6a>
  403f12:	065b      	lsls	r3, r3, #25
  403f14:	f53f acb2 	bmi.w	40387c <_vfiprintf_r+0x218>
  403f18:	9803      	ldr	r0, [sp, #12]
  403f1a:	b02d      	add	sp, #180	; 0xb4
  403f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f20:	2a00      	cmp	r2, #0
  403f22:	f040 8106 	bne.w	404132 <_vfiprintf_r+0xace>
  403f26:	9a05      	ldr	r2, [sp, #20]
  403f28:	921d      	str	r2, [sp, #116]	; 0x74
  403f2a:	2301      	movs	r3, #1
  403f2c:	9211      	str	r2, [sp, #68]	; 0x44
  403f2e:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  403f32:	9310      	str	r3, [sp, #64]	; 0x40
  403f34:	46ca      	mov	sl, r9
  403f36:	f10a 0a08 	add.w	sl, sl, #8
  403f3a:	9b02      	ldr	r3, [sp, #8]
  403f3c:	0759      	lsls	r1, r3, #29
  403f3e:	d504      	bpl.n	403f4a <_vfiprintf_r+0x8e6>
  403f40:	9b08      	ldr	r3, [sp, #32]
  403f42:	9901      	ldr	r1, [sp, #4]
  403f44:	1a5c      	subs	r4, r3, r1
  403f46:	2c00      	cmp	r4, #0
  403f48:	dc81      	bgt.n	403e4e <_vfiprintf_r+0x7ea>
  403f4a:	9b03      	ldr	r3, [sp, #12]
  403f4c:	9908      	ldr	r1, [sp, #32]
  403f4e:	9801      	ldr	r0, [sp, #4]
  403f50:	4281      	cmp	r1, r0
  403f52:	bfac      	ite	ge
  403f54:	185b      	addge	r3, r3, r1
  403f56:	181b      	addlt	r3, r3, r0
  403f58:	9303      	str	r3, [sp, #12]
  403f5a:	bb72      	cbnz	r2, 403fba <_vfiprintf_r+0x956>
  403f5c:	2300      	movs	r3, #0
  403f5e:	9310      	str	r3, [sp, #64]	; 0x40
  403f60:	46ca      	mov	sl, r9
  403f62:	f7ff bbbc 	b.w	4036de <_vfiprintf_r+0x7a>
  403f66:	aa0f      	add	r2, sp, #60	; 0x3c
  403f68:	9904      	ldr	r1, [sp, #16]
  403f6a:	4620      	mov	r0, r4
  403f6c:	f7ff fb3a 	bl	4035e4 <__sprint_r.part.0>
  403f70:	bb50      	cbnz	r0, 403fc8 <_vfiprintf_r+0x964>
  403f72:	9910      	ldr	r1, [sp, #64]	; 0x40
  403f74:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403f76:	f101 0e01 	add.w	lr, r1, #1
  403f7a:	46cc      	mov	ip, r9
  403f7c:	e548      	b.n	403a10 <_vfiprintf_r+0x3ac>
  403f7e:	2a00      	cmp	r2, #0
  403f80:	f040 8140 	bne.w	404204 <_vfiprintf_r+0xba0>
  403f84:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  403f88:	2900      	cmp	r1, #0
  403f8a:	f000 811b 	beq.w	4041c4 <_vfiprintf_r+0xb60>
  403f8e:	2201      	movs	r2, #1
  403f90:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  403f94:	4610      	mov	r0, r2
  403f96:	921d      	str	r2, [sp, #116]	; 0x74
  403f98:	911c      	str	r1, [sp, #112]	; 0x70
  403f9a:	46ca      	mov	sl, r9
  403f9c:	4601      	mov	r1, r0
  403f9e:	f10a 0a08 	add.w	sl, sl, #8
  403fa2:	3001      	adds	r0, #1
  403fa4:	e507      	b.n	4039b6 <_vfiprintf_r+0x352>
  403fa6:	9b02      	ldr	r3, [sp, #8]
  403fa8:	2a01      	cmp	r2, #1
  403faa:	f000 8098 	beq.w	4040de <_vfiprintf_r+0xa7a>
  403fae:	2a02      	cmp	r2, #2
  403fb0:	d10d      	bne.n	403fce <_vfiprintf_r+0x96a>
  403fb2:	9302      	str	r3, [sp, #8]
  403fb4:	2600      	movs	r6, #0
  403fb6:	2700      	movs	r7, #0
  403fb8:	e5b0      	b.n	403b1c <_vfiprintf_r+0x4b8>
  403fba:	aa0f      	add	r2, sp, #60	; 0x3c
  403fbc:	9904      	ldr	r1, [sp, #16]
  403fbe:	9806      	ldr	r0, [sp, #24]
  403fc0:	f7ff fb10 	bl	4035e4 <__sprint_r.part.0>
  403fc4:	2800      	cmp	r0, #0
  403fc6:	d0c9      	beq.n	403f5c <_vfiprintf_r+0x8f8>
  403fc8:	f8dd b010 	ldr.w	fp, [sp, #16]
  403fcc:	e797      	b.n	403efe <_vfiprintf_r+0x89a>
  403fce:	9302      	str	r3, [sp, #8]
  403fd0:	2600      	movs	r6, #0
  403fd2:	2700      	movs	r7, #0
  403fd4:	4649      	mov	r1, r9
  403fd6:	e000      	b.n	403fda <_vfiprintf_r+0x976>
  403fd8:	4659      	mov	r1, fp
  403fda:	08f2      	lsrs	r2, r6, #3
  403fdc:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  403fe0:	08f8      	lsrs	r0, r7, #3
  403fe2:	f006 0307 	and.w	r3, r6, #7
  403fe6:	4607      	mov	r7, r0
  403fe8:	4616      	mov	r6, r2
  403fea:	3330      	adds	r3, #48	; 0x30
  403fec:	ea56 0207 	orrs.w	r2, r6, r7
  403ff0:	f801 3c01 	strb.w	r3, [r1, #-1]
  403ff4:	f101 3bff 	add.w	fp, r1, #4294967295
  403ff8:	d1ee      	bne.n	403fd8 <_vfiprintf_r+0x974>
  403ffa:	9a02      	ldr	r2, [sp, #8]
  403ffc:	07d6      	lsls	r6, r2, #31
  403ffe:	f57f ad9d 	bpl.w	403b3c <_vfiprintf_r+0x4d8>
  404002:	2b30      	cmp	r3, #48	; 0x30
  404004:	f43f ad9a 	beq.w	403b3c <_vfiprintf_r+0x4d8>
  404008:	3902      	subs	r1, #2
  40400a:	2330      	movs	r3, #48	; 0x30
  40400c:	f80b 3c01 	strb.w	r3, [fp, #-1]
  404010:	eba9 0301 	sub.w	r3, r9, r1
  404014:	9305      	str	r3, [sp, #20]
  404016:	468b      	mov	fp, r1
  404018:	e476      	b.n	403908 <_vfiprintf_r+0x2a4>
  40401a:	9b03      	ldr	r3, [sp, #12]
  40401c:	9a08      	ldr	r2, [sp, #32]
  40401e:	428a      	cmp	r2, r1
  404020:	bfac      	ite	ge
  404022:	189b      	addge	r3, r3, r2
  404024:	185b      	addlt	r3, r3, r1
  404026:	9303      	str	r3, [sp, #12]
  404028:	e798      	b.n	403f5c <_vfiprintf_r+0x8f8>
  40402a:	2202      	movs	r2, #2
  40402c:	e44d      	b.n	4038ca <_vfiprintf_r+0x266>
  40402e:	2f00      	cmp	r7, #0
  404030:	bf08      	it	eq
  404032:	2e0a      	cmpeq	r6, #10
  404034:	d352      	bcc.n	4040dc <_vfiprintf_r+0xa78>
  404036:	46cb      	mov	fp, r9
  404038:	4630      	mov	r0, r6
  40403a:	4639      	mov	r1, r7
  40403c:	220a      	movs	r2, #10
  40403e:	2300      	movs	r3, #0
  404040:	f001 fcda 	bl	4059f8 <__aeabi_uldivmod>
  404044:	3230      	adds	r2, #48	; 0x30
  404046:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  40404a:	4630      	mov	r0, r6
  40404c:	4639      	mov	r1, r7
  40404e:	2300      	movs	r3, #0
  404050:	220a      	movs	r2, #10
  404052:	f001 fcd1 	bl	4059f8 <__aeabi_uldivmod>
  404056:	4606      	mov	r6, r0
  404058:	460f      	mov	r7, r1
  40405a:	ea56 0307 	orrs.w	r3, r6, r7
  40405e:	d1eb      	bne.n	404038 <_vfiprintf_r+0x9d4>
  404060:	e56c      	b.n	403b3c <_vfiprintf_r+0x4d8>
  404062:	9405      	str	r4, [sp, #20]
  404064:	46cb      	mov	fp, r9
  404066:	e44f      	b.n	403908 <_vfiprintf_r+0x2a4>
  404068:	aa0f      	add	r2, sp, #60	; 0x3c
  40406a:	9904      	ldr	r1, [sp, #16]
  40406c:	9806      	ldr	r0, [sp, #24]
  40406e:	f7ff fab9 	bl	4035e4 <__sprint_r.part.0>
  404072:	2800      	cmp	r0, #0
  404074:	d1a8      	bne.n	403fc8 <_vfiprintf_r+0x964>
  404076:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404078:	46ca      	mov	sl, r9
  40407a:	e75e      	b.n	403f3a <_vfiprintf_r+0x8d6>
  40407c:	aa0f      	add	r2, sp, #60	; 0x3c
  40407e:	9904      	ldr	r1, [sp, #16]
  404080:	9806      	ldr	r0, [sp, #24]
  404082:	f7ff faaf 	bl	4035e4 <__sprint_r.part.0>
  404086:	2800      	cmp	r0, #0
  404088:	d19e      	bne.n	403fc8 <_vfiprintf_r+0x964>
  40408a:	46ca      	mov	sl, r9
  40408c:	f7ff bbc0 	b.w	403810 <_vfiprintf_r+0x1ac>
  404090:	00405de4 	.word	0x00405de4
  404094:	00405dd4 	.word	0x00405dd4
  404098:	3104      	adds	r1, #4
  40409a:	6816      	ldr	r6, [r2, #0]
  40409c:	9107      	str	r1, [sp, #28]
  40409e:	2201      	movs	r2, #1
  4040a0:	2700      	movs	r7, #0
  4040a2:	e412      	b.n	4038ca <_vfiprintf_r+0x266>
  4040a4:	9807      	ldr	r0, [sp, #28]
  4040a6:	4601      	mov	r1, r0
  4040a8:	3104      	adds	r1, #4
  4040aa:	6806      	ldr	r6, [r0, #0]
  4040ac:	9107      	str	r1, [sp, #28]
  4040ae:	2700      	movs	r7, #0
  4040b0:	e40b      	b.n	4038ca <_vfiprintf_r+0x266>
  4040b2:	680e      	ldr	r6, [r1, #0]
  4040b4:	3104      	adds	r1, #4
  4040b6:	9107      	str	r1, [sp, #28]
  4040b8:	2700      	movs	r7, #0
  4040ba:	e591      	b.n	403be0 <_vfiprintf_r+0x57c>
  4040bc:	9907      	ldr	r1, [sp, #28]
  4040be:	680e      	ldr	r6, [r1, #0]
  4040c0:	460a      	mov	r2, r1
  4040c2:	17f7      	asrs	r7, r6, #31
  4040c4:	3204      	adds	r2, #4
  4040c6:	9207      	str	r2, [sp, #28]
  4040c8:	4630      	mov	r0, r6
  4040ca:	4639      	mov	r1, r7
  4040cc:	e50f      	b.n	403aee <_vfiprintf_r+0x48a>
  4040ce:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4040d2:	f000 fe7f 	bl	404dd4 <__retarget_lock_release_recursive>
  4040d6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4040da:	e71a      	b.n	403f12 <_vfiprintf_r+0x8ae>
  4040dc:	9b02      	ldr	r3, [sp, #8]
  4040de:	9302      	str	r3, [sp, #8]
  4040e0:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4040e4:	3630      	adds	r6, #48	; 0x30
  4040e6:	2301      	movs	r3, #1
  4040e8:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  4040ec:	9305      	str	r3, [sp, #20]
  4040ee:	e40b      	b.n	403908 <_vfiprintf_r+0x2a4>
  4040f0:	aa0f      	add	r2, sp, #60	; 0x3c
  4040f2:	9904      	ldr	r1, [sp, #16]
  4040f4:	9806      	ldr	r0, [sp, #24]
  4040f6:	f7ff fa75 	bl	4035e4 <__sprint_r.part.0>
  4040fa:	2800      	cmp	r0, #0
  4040fc:	f47f af64 	bne.w	403fc8 <_vfiprintf_r+0x964>
  404100:	9910      	ldr	r1, [sp, #64]	; 0x40
  404102:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404104:	1c48      	adds	r0, r1, #1
  404106:	46ca      	mov	sl, r9
  404108:	e651      	b.n	403dae <_vfiprintf_r+0x74a>
  40410a:	aa0f      	add	r2, sp, #60	; 0x3c
  40410c:	9904      	ldr	r1, [sp, #16]
  40410e:	9806      	ldr	r0, [sp, #24]
  404110:	f7ff fa68 	bl	4035e4 <__sprint_r.part.0>
  404114:	2800      	cmp	r0, #0
  404116:	f47f af57 	bne.w	403fc8 <_vfiprintf_r+0x964>
  40411a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40411c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40411e:	1c48      	adds	r0, r1, #1
  404120:	46ca      	mov	sl, r9
  404122:	e448      	b.n	4039b6 <_vfiprintf_r+0x352>
  404124:	2a00      	cmp	r2, #0
  404126:	f040 8091 	bne.w	40424c <_vfiprintf_r+0xbe8>
  40412a:	2001      	movs	r0, #1
  40412c:	4611      	mov	r1, r2
  40412e:	46ca      	mov	sl, r9
  404130:	e641      	b.n	403db6 <_vfiprintf_r+0x752>
  404132:	aa0f      	add	r2, sp, #60	; 0x3c
  404134:	9904      	ldr	r1, [sp, #16]
  404136:	9806      	ldr	r0, [sp, #24]
  404138:	f7ff fa54 	bl	4035e4 <__sprint_r.part.0>
  40413c:	2800      	cmp	r0, #0
  40413e:	f47f af43 	bne.w	403fc8 <_vfiprintf_r+0x964>
  404142:	9810      	ldr	r0, [sp, #64]	; 0x40
  404144:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404146:	3001      	adds	r0, #1
  404148:	46ca      	mov	sl, r9
  40414a:	e667      	b.n	403e1c <_vfiprintf_r+0x7b8>
  40414c:	46d3      	mov	fp, sl
  40414e:	e6d6      	b.n	403efe <_vfiprintf_r+0x89a>
  404150:	9e07      	ldr	r6, [sp, #28]
  404152:	3607      	adds	r6, #7
  404154:	f026 0207 	bic.w	r2, r6, #7
  404158:	f102 0108 	add.w	r1, r2, #8
  40415c:	e9d2 6700 	ldrd	r6, r7, [r2]
  404160:	9107      	str	r1, [sp, #28]
  404162:	2201      	movs	r2, #1
  404164:	f7ff bbb1 	b.w	4038ca <_vfiprintf_r+0x266>
  404168:	9e07      	ldr	r6, [sp, #28]
  40416a:	3607      	adds	r6, #7
  40416c:	f026 0607 	bic.w	r6, r6, #7
  404170:	e9d6 0100 	ldrd	r0, r1, [r6]
  404174:	f106 0208 	add.w	r2, r6, #8
  404178:	9207      	str	r2, [sp, #28]
  40417a:	4606      	mov	r6, r0
  40417c:	460f      	mov	r7, r1
  40417e:	e4b6      	b.n	403aee <_vfiprintf_r+0x48a>
  404180:	9e07      	ldr	r6, [sp, #28]
  404182:	3607      	adds	r6, #7
  404184:	f026 0207 	bic.w	r2, r6, #7
  404188:	f102 0108 	add.w	r1, r2, #8
  40418c:	e9d2 6700 	ldrd	r6, r7, [r2]
  404190:	9107      	str	r1, [sp, #28]
  404192:	2200      	movs	r2, #0
  404194:	f7ff bb99 	b.w	4038ca <_vfiprintf_r+0x266>
  404198:	9e07      	ldr	r6, [sp, #28]
  40419a:	3607      	adds	r6, #7
  40419c:	f026 0107 	bic.w	r1, r6, #7
  4041a0:	f101 0008 	add.w	r0, r1, #8
  4041a4:	9007      	str	r0, [sp, #28]
  4041a6:	e9d1 6700 	ldrd	r6, r7, [r1]
  4041aa:	e519      	b.n	403be0 <_vfiprintf_r+0x57c>
  4041ac:	46cb      	mov	fp, r9
  4041ae:	f7ff bbab 	b.w	403908 <_vfiprintf_r+0x2a4>
  4041b2:	252d      	movs	r5, #45	; 0x2d
  4041b4:	4276      	negs	r6, r6
  4041b6:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4041ba:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4041be:	2201      	movs	r2, #1
  4041c0:	f7ff bb88 	b.w	4038d4 <_vfiprintf_r+0x270>
  4041c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4041c6:	b9b3      	cbnz	r3, 4041f6 <_vfiprintf_r+0xb92>
  4041c8:	4611      	mov	r1, r2
  4041ca:	2001      	movs	r0, #1
  4041cc:	46ca      	mov	sl, r9
  4041ce:	e5f2      	b.n	403db6 <_vfiprintf_r+0x752>
  4041d0:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4041d4:	f000 fdfe 	bl	404dd4 <__retarget_lock_release_recursive>
  4041d8:	f04f 33ff 	mov.w	r3, #4294967295
  4041dc:	9303      	str	r3, [sp, #12]
  4041de:	f7ff bb50 	b.w	403882 <_vfiprintf_r+0x21e>
  4041e2:	aa0f      	add	r2, sp, #60	; 0x3c
  4041e4:	9904      	ldr	r1, [sp, #16]
  4041e6:	9806      	ldr	r0, [sp, #24]
  4041e8:	f7ff f9fc 	bl	4035e4 <__sprint_r.part.0>
  4041ec:	2800      	cmp	r0, #0
  4041ee:	f47f aeeb 	bne.w	403fc8 <_vfiprintf_r+0x964>
  4041f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4041f4:	e6a9      	b.n	403f4a <_vfiprintf_r+0x8e6>
  4041f6:	ab0e      	add	r3, sp, #56	; 0x38
  4041f8:	2202      	movs	r2, #2
  4041fa:	931c      	str	r3, [sp, #112]	; 0x70
  4041fc:	921d      	str	r2, [sp, #116]	; 0x74
  4041fe:	2001      	movs	r0, #1
  404200:	46ca      	mov	sl, r9
  404202:	e5d0      	b.n	403da6 <_vfiprintf_r+0x742>
  404204:	aa0f      	add	r2, sp, #60	; 0x3c
  404206:	9904      	ldr	r1, [sp, #16]
  404208:	9806      	ldr	r0, [sp, #24]
  40420a:	f7ff f9eb 	bl	4035e4 <__sprint_r.part.0>
  40420e:	2800      	cmp	r0, #0
  404210:	f47f aeda 	bne.w	403fc8 <_vfiprintf_r+0x964>
  404214:	9910      	ldr	r1, [sp, #64]	; 0x40
  404216:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404218:	1c48      	adds	r0, r1, #1
  40421a:	46ca      	mov	sl, r9
  40421c:	e5a4      	b.n	403d68 <_vfiprintf_r+0x704>
  40421e:	9a07      	ldr	r2, [sp, #28]
  404220:	9903      	ldr	r1, [sp, #12]
  404222:	6813      	ldr	r3, [r2, #0]
  404224:	17cd      	asrs	r5, r1, #31
  404226:	4608      	mov	r0, r1
  404228:	3204      	adds	r2, #4
  40422a:	4629      	mov	r1, r5
  40422c:	9207      	str	r2, [sp, #28]
  40422e:	e9c3 0100 	strd	r0, r1, [r3]
  404232:	f7ff ba54 	b.w	4036de <_vfiprintf_r+0x7a>
  404236:	4658      	mov	r0, fp
  404238:	9607      	str	r6, [sp, #28]
  40423a:	9302      	str	r3, [sp, #8]
  40423c:	f001 f9a0 	bl	405580 <strlen>
  404240:	2400      	movs	r4, #0
  404242:	9005      	str	r0, [sp, #20]
  404244:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404248:	f7ff bb5e 	b.w	403908 <_vfiprintf_r+0x2a4>
  40424c:	aa0f      	add	r2, sp, #60	; 0x3c
  40424e:	9904      	ldr	r1, [sp, #16]
  404250:	9806      	ldr	r0, [sp, #24]
  404252:	f7ff f9c7 	bl	4035e4 <__sprint_r.part.0>
  404256:	2800      	cmp	r0, #0
  404258:	f47f aeb6 	bne.w	403fc8 <_vfiprintf_r+0x964>
  40425c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40425e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404260:	1c48      	adds	r0, r1, #1
  404262:	46ca      	mov	sl, r9
  404264:	e5a7      	b.n	403db6 <_vfiprintf_r+0x752>
  404266:	9910      	ldr	r1, [sp, #64]	; 0x40
  404268:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40426a:	4e20      	ldr	r6, [pc, #128]	; (4042ec <_vfiprintf_r+0xc88>)
  40426c:	3101      	adds	r1, #1
  40426e:	f7ff bb90 	b.w	403992 <_vfiprintf_r+0x32e>
  404272:	2c06      	cmp	r4, #6
  404274:	bf28      	it	cs
  404276:	2406      	movcs	r4, #6
  404278:	9405      	str	r4, [sp, #20]
  40427a:	9607      	str	r6, [sp, #28]
  40427c:	9401      	str	r4, [sp, #4]
  40427e:	f8df b070 	ldr.w	fp, [pc, #112]	; 4042f0 <_vfiprintf_r+0xc8c>
  404282:	e4d5      	b.n	403c30 <_vfiprintf_r+0x5cc>
  404284:	9810      	ldr	r0, [sp, #64]	; 0x40
  404286:	4e19      	ldr	r6, [pc, #100]	; (4042ec <_vfiprintf_r+0xc88>)
  404288:	3001      	adds	r0, #1
  40428a:	e603      	b.n	403e94 <_vfiprintf_r+0x830>
  40428c:	9405      	str	r4, [sp, #20]
  40428e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404292:	9607      	str	r6, [sp, #28]
  404294:	9302      	str	r3, [sp, #8]
  404296:	4604      	mov	r4, r0
  404298:	f7ff bb36 	b.w	403908 <_vfiprintf_r+0x2a4>
  40429c:	4686      	mov	lr, r0
  40429e:	f7ff bbce 	b.w	403a3e <_vfiprintf_r+0x3da>
  4042a2:	9806      	ldr	r0, [sp, #24]
  4042a4:	aa0f      	add	r2, sp, #60	; 0x3c
  4042a6:	4659      	mov	r1, fp
  4042a8:	f7ff f99c 	bl	4035e4 <__sprint_r.part.0>
  4042ac:	2800      	cmp	r0, #0
  4042ae:	f43f ae24 	beq.w	403efa <_vfiprintf_r+0x896>
  4042b2:	e624      	b.n	403efe <_vfiprintf_r+0x89a>
  4042b4:	9907      	ldr	r1, [sp, #28]
  4042b6:	f898 2001 	ldrb.w	r2, [r8, #1]
  4042ba:	680c      	ldr	r4, [r1, #0]
  4042bc:	3104      	adds	r1, #4
  4042be:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4042c2:	46b8      	mov	r8, r7
  4042c4:	9107      	str	r1, [sp, #28]
  4042c6:	f7ff ba3f 	b.w	403748 <_vfiprintf_r+0xe4>
  4042ca:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4042ce:	e43c      	b.n	403b4a <_vfiprintf_r+0x4e6>
  4042d0:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4042d4:	e521      	b.n	403d1a <_vfiprintf_r+0x6b6>
  4042d6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4042da:	f7ff bbf4 	b.w	403ac6 <_vfiprintf_r+0x462>
  4042de:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4042e2:	e491      	b.n	403c08 <_vfiprintf_r+0x5a4>
  4042e4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4042e8:	e469      	b.n	403bbe <_vfiprintf_r+0x55a>
  4042ea:	bf00      	nop
  4042ec:	00405dd4 	.word	0x00405dd4
  4042f0:	00405dcc 	.word	0x00405dcc

004042f4 <__sbprintf>:
  4042f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4042f8:	460c      	mov	r4, r1
  4042fa:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  4042fe:	8989      	ldrh	r1, [r1, #12]
  404300:	6e66      	ldr	r6, [r4, #100]	; 0x64
  404302:	89e5      	ldrh	r5, [r4, #14]
  404304:	9619      	str	r6, [sp, #100]	; 0x64
  404306:	f021 0102 	bic.w	r1, r1, #2
  40430a:	4606      	mov	r6, r0
  40430c:	69e0      	ldr	r0, [r4, #28]
  40430e:	f8ad 100c 	strh.w	r1, [sp, #12]
  404312:	4617      	mov	r7, r2
  404314:	f44f 6180 	mov.w	r1, #1024	; 0x400
  404318:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40431a:	f8ad 500e 	strh.w	r5, [sp, #14]
  40431e:	4698      	mov	r8, r3
  404320:	ad1a      	add	r5, sp, #104	; 0x68
  404322:	2300      	movs	r3, #0
  404324:	9007      	str	r0, [sp, #28]
  404326:	a816      	add	r0, sp, #88	; 0x58
  404328:	9209      	str	r2, [sp, #36]	; 0x24
  40432a:	9306      	str	r3, [sp, #24]
  40432c:	9500      	str	r5, [sp, #0]
  40432e:	9504      	str	r5, [sp, #16]
  404330:	9102      	str	r1, [sp, #8]
  404332:	9105      	str	r1, [sp, #20]
  404334:	f000 fd48 	bl	404dc8 <__retarget_lock_init_recursive>
  404338:	4643      	mov	r3, r8
  40433a:	463a      	mov	r2, r7
  40433c:	4669      	mov	r1, sp
  40433e:	4630      	mov	r0, r6
  404340:	f7ff f990 	bl	403664 <_vfiprintf_r>
  404344:	1e05      	subs	r5, r0, #0
  404346:	db07      	blt.n	404358 <__sbprintf+0x64>
  404348:	4630      	mov	r0, r6
  40434a:	4669      	mov	r1, sp
  40434c:	f000 f928 	bl	4045a0 <_fflush_r>
  404350:	2800      	cmp	r0, #0
  404352:	bf18      	it	ne
  404354:	f04f 35ff 	movne.w	r5, #4294967295
  404358:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40435c:	065b      	lsls	r3, r3, #25
  40435e:	d503      	bpl.n	404368 <__sbprintf+0x74>
  404360:	89a3      	ldrh	r3, [r4, #12]
  404362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404366:	81a3      	strh	r3, [r4, #12]
  404368:	9816      	ldr	r0, [sp, #88]	; 0x58
  40436a:	f000 fd2f 	bl	404dcc <__retarget_lock_close_recursive>
  40436e:	4628      	mov	r0, r5
  404370:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  404374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00404378 <__swsetup_r>:
  404378:	b538      	push	{r3, r4, r5, lr}
  40437a:	4b30      	ldr	r3, [pc, #192]	; (40443c <__swsetup_r+0xc4>)
  40437c:	681b      	ldr	r3, [r3, #0]
  40437e:	4605      	mov	r5, r0
  404380:	460c      	mov	r4, r1
  404382:	b113      	cbz	r3, 40438a <__swsetup_r+0x12>
  404384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  404386:	2a00      	cmp	r2, #0
  404388:	d038      	beq.n	4043fc <__swsetup_r+0x84>
  40438a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40438e:	b293      	uxth	r3, r2
  404390:	0718      	lsls	r0, r3, #28
  404392:	d50c      	bpl.n	4043ae <__swsetup_r+0x36>
  404394:	6920      	ldr	r0, [r4, #16]
  404396:	b1a8      	cbz	r0, 4043c4 <__swsetup_r+0x4c>
  404398:	f013 0201 	ands.w	r2, r3, #1
  40439c:	d01e      	beq.n	4043dc <__swsetup_r+0x64>
  40439e:	6963      	ldr	r3, [r4, #20]
  4043a0:	2200      	movs	r2, #0
  4043a2:	425b      	negs	r3, r3
  4043a4:	61a3      	str	r3, [r4, #24]
  4043a6:	60a2      	str	r2, [r4, #8]
  4043a8:	b1f0      	cbz	r0, 4043e8 <__swsetup_r+0x70>
  4043aa:	2000      	movs	r0, #0
  4043ac:	bd38      	pop	{r3, r4, r5, pc}
  4043ae:	06d9      	lsls	r1, r3, #27
  4043b0:	d53c      	bpl.n	40442c <__swsetup_r+0xb4>
  4043b2:	0758      	lsls	r0, r3, #29
  4043b4:	d426      	bmi.n	404404 <__swsetup_r+0x8c>
  4043b6:	6920      	ldr	r0, [r4, #16]
  4043b8:	f042 0308 	orr.w	r3, r2, #8
  4043bc:	81a3      	strh	r3, [r4, #12]
  4043be:	b29b      	uxth	r3, r3
  4043c0:	2800      	cmp	r0, #0
  4043c2:	d1e9      	bne.n	404398 <__swsetup_r+0x20>
  4043c4:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4043c8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4043cc:	d0e4      	beq.n	404398 <__swsetup_r+0x20>
  4043ce:	4628      	mov	r0, r5
  4043d0:	4621      	mov	r1, r4
  4043d2:	f000 fd2f 	bl	404e34 <__smakebuf_r>
  4043d6:	89a3      	ldrh	r3, [r4, #12]
  4043d8:	6920      	ldr	r0, [r4, #16]
  4043da:	e7dd      	b.n	404398 <__swsetup_r+0x20>
  4043dc:	0799      	lsls	r1, r3, #30
  4043de:	bf58      	it	pl
  4043e0:	6962      	ldrpl	r2, [r4, #20]
  4043e2:	60a2      	str	r2, [r4, #8]
  4043e4:	2800      	cmp	r0, #0
  4043e6:	d1e0      	bne.n	4043aa <__swsetup_r+0x32>
  4043e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4043ec:	061a      	lsls	r2, r3, #24
  4043ee:	d5dd      	bpl.n	4043ac <__swsetup_r+0x34>
  4043f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4043f4:	81a3      	strh	r3, [r4, #12]
  4043f6:	f04f 30ff 	mov.w	r0, #4294967295
  4043fa:	bd38      	pop	{r3, r4, r5, pc}
  4043fc:	4618      	mov	r0, r3
  4043fe:	f000 f927 	bl	404650 <__sinit>
  404402:	e7c2      	b.n	40438a <__swsetup_r+0x12>
  404404:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404406:	b151      	cbz	r1, 40441e <__swsetup_r+0xa6>
  404408:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40440c:	4299      	cmp	r1, r3
  40440e:	d004      	beq.n	40441a <__swsetup_r+0xa2>
  404410:	4628      	mov	r0, r5
  404412:	f000 fa43 	bl	40489c <_free_r>
  404416:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40441a:	2300      	movs	r3, #0
  40441c:	6323      	str	r3, [r4, #48]	; 0x30
  40441e:	2300      	movs	r3, #0
  404420:	6920      	ldr	r0, [r4, #16]
  404422:	6063      	str	r3, [r4, #4]
  404424:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  404428:	6020      	str	r0, [r4, #0]
  40442a:	e7c5      	b.n	4043b8 <__swsetup_r+0x40>
  40442c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  404430:	2309      	movs	r3, #9
  404432:	602b      	str	r3, [r5, #0]
  404434:	f04f 30ff 	mov.w	r0, #4294967295
  404438:	81a2      	strh	r2, [r4, #12]
  40443a:	bd38      	pop	{r3, r4, r5, pc}
  40443c:	2040002c 	.word	0x2040002c

00404440 <register_fini>:
  404440:	4b02      	ldr	r3, [pc, #8]	; (40444c <register_fini+0xc>)
  404442:	b113      	cbz	r3, 40444a <register_fini+0xa>
  404444:	4802      	ldr	r0, [pc, #8]	; (404450 <register_fini+0x10>)
  404446:	f000 b805 	b.w	404454 <atexit>
  40444a:	4770      	bx	lr
  40444c:	00000000 	.word	0x00000000
  404450:	004046c1 	.word	0x004046c1

00404454 <atexit>:
  404454:	2300      	movs	r3, #0
  404456:	4601      	mov	r1, r0
  404458:	461a      	mov	r2, r3
  40445a:	4618      	mov	r0, r3
  40445c:	f001 b9a4 	b.w	4057a8 <__register_exitproc>

00404460 <__sflush_r>:
  404460:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  404464:	b29a      	uxth	r2, r3
  404466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40446a:	460d      	mov	r5, r1
  40446c:	0711      	lsls	r1, r2, #28
  40446e:	4680      	mov	r8, r0
  404470:	d43a      	bmi.n	4044e8 <__sflush_r+0x88>
  404472:	686a      	ldr	r2, [r5, #4]
  404474:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  404478:	2a00      	cmp	r2, #0
  40447a:	81ab      	strh	r3, [r5, #12]
  40447c:	dd6f      	ble.n	40455e <__sflush_r+0xfe>
  40447e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  404480:	2c00      	cmp	r4, #0
  404482:	d049      	beq.n	404518 <__sflush_r+0xb8>
  404484:	2200      	movs	r2, #0
  404486:	b29b      	uxth	r3, r3
  404488:	f8d8 6000 	ldr.w	r6, [r8]
  40448c:	f8c8 2000 	str.w	r2, [r8]
  404490:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  404494:	d067      	beq.n	404566 <__sflush_r+0x106>
  404496:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  404498:	075f      	lsls	r7, r3, #29
  40449a:	d505      	bpl.n	4044a8 <__sflush_r+0x48>
  40449c:	6869      	ldr	r1, [r5, #4]
  40449e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4044a0:	1a52      	subs	r2, r2, r1
  4044a2:	b10b      	cbz	r3, 4044a8 <__sflush_r+0x48>
  4044a4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4044a6:	1ad2      	subs	r2, r2, r3
  4044a8:	2300      	movs	r3, #0
  4044aa:	69e9      	ldr	r1, [r5, #28]
  4044ac:	4640      	mov	r0, r8
  4044ae:	47a0      	blx	r4
  4044b0:	1c44      	adds	r4, r0, #1
  4044b2:	d03c      	beq.n	40452e <__sflush_r+0xce>
  4044b4:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4044b8:	692a      	ldr	r2, [r5, #16]
  4044ba:	602a      	str	r2, [r5, #0]
  4044bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4044c0:	2200      	movs	r2, #0
  4044c2:	81ab      	strh	r3, [r5, #12]
  4044c4:	04db      	lsls	r3, r3, #19
  4044c6:	606a      	str	r2, [r5, #4]
  4044c8:	d447      	bmi.n	40455a <__sflush_r+0xfa>
  4044ca:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4044cc:	f8c8 6000 	str.w	r6, [r8]
  4044d0:	b311      	cbz	r1, 404518 <__sflush_r+0xb8>
  4044d2:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4044d6:	4299      	cmp	r1, r3
  4044d8:	d002      	beq.n	4044e0 <__sflush_r+0x80>
  4044da:	4640      	mov	r0, r8
  4044dc:	f000 f9de 	bl	40489c <_free_r>
  4044e0:	2000      	movs	r0, #0
  4044e2:	6328      	str	r0, [r5, #48]	; 0x30
  4044e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4044e8:	692e      	ldr	r6, [r5, #16]
  4044ea:	b1ae      	cbz	r6, 404518 <__sflush_r+0xb8>
  4044ec:	682c      	ldr	r4, [r5, #0]
  4044ee:	602e      	str	r6, [r5, #0]
  4044f0:	0791      	lsls	r1, r2, #30
  4044f2:	bf0c      	ite	eq
  4044f4:	696b      	ldreq	r3, [r5, #20]
  4044f6:	2300      	movne	r3, #0
  4044f8:	1ba4      	subs	r4, r4, r6
  4044fa:	60ab      	str	r3, [r5, #8]
  4044fc:	e00a      	b.n	404514 <__sflush_r+0xb4>
  4044fe:	4623      	mov	r3, r4
  404500:	4632      	mov	r2, r6
  404502:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  404504:	69e9      	ldr	r1, [r5, #28]
  404506:	4640      	mov	r0, r8
  404508:	47b8      	blx	r7
  40450a:	2800      	cmp	r0, #0
  40450c:	eba4 0400 	sub.w	r4, r4, r0
  404510:	4406      	add	r6, r0
  404512:	dd04      	ble.n	40451e <__sflush_r+0xbe>
  404514:	2c00      	cmp	r4, #0
  404516:	dcf2      	bgt.n	4044fe <__sflush_r+0x9e>
  404518:	2000      	movs	r0, #0
  40451a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40451e:	89ab      	ldrh	r3, [r5, #12]
  404520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404524:	81ab      	strh	r3, [r5, #12]
  404526:	f04f 30ff 	mov.w	r0, #4294967295
  40452a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40452e:	f8d8 4000 	ldr.w	r4, [r8]
  404532:	2c1d      	cmp	r4, #29
  404534:	d8f3      	bhi.n	40451e <__sflush_r+0xbe>
  404536:	4b19      	ldr	r3, [pc, #100]	; (40459c <__sflush_r+0x13c>)
  404538:	40e3      	lsrs	r3, r4
  40453a:	43db      	mvns	r3, r3
  40453c:	f013 0301 	ands.w	r3, r3, #1
  404540:	d1ed      	bne.n	40451e <__sflush_r+0xbe>
  404542:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  404546:	606b      	str	r3, [r5, #4]
  404548:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  40454c:	6929      	ldr	r1, [r5, #16]
  40454e:	81ab      	strh	r3, [r5, #12]
  404550:	04da      	lsls	r2, r3, #19
  404552:	6029      	str	r1, [r5, #0]
  404554:	d5b9      	bpl.n	4044ca <__sflush_r+0x6a>
  404556:	2c00      	cmp	r4, #0
  404558:	d1b7      	bne.n	4044ca <__sflush_r+0x6a>
  40455a:	6528      	str	r0, [r5, #80]	; 0x50
  40455c:	e7b5      	b.n	4044ca <__sflush_r+0x6a>
  40455e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  404560:	2a00      	cmp	r2, #0
  404562:	dc8c      	bgt.n	40447e <__sflush_r+0x1e>
  404564:	e7d8      	b.n	404518 <__sflush_r+0xb8>
  404566:	2301      	movs	r3, #1
  404568:	69e9      	ldr	r1, [r5, #28]
  40456a:	4640      	mov	r0, r8
  40456c:	47a0      	blx	r4
  40456e:	1c43      	adds	r3, r0, #1
  404570:	4602      	mov	r2, r0
  404572:	d002      	beq.n	40457a <__sflush_r+0x11a>
  404574:	89ab      	ldrh	r3, [r5, #12]
  404576:	6aac      	ldr	r4, [r5, #40]	; 0x28
  404578:	e78e      	b.n	404498 <__sflush_r+0x38>
  40457a:	f8d8 3000 	ldr.w	r3, [r8]
  40457e:	2b00      	cmp	r3, #0
  404580:	d0f8      	beq.n	404574 <__sflush_r+0x114>
  404582:	2b1d      	cmp	r3, #29
  404584:	d001      	beq.n	40458a <__sflush_r+0x12a>
  404586:	2b16      	cmp	r3, #22
  404588:	d102      	bne.n	404590 <__sflush_r+0x130>
  40458a:	f8c8 6000 	str.w	r6, [r8]
  40458e:	e7c3      	b.n	404518 <__sflush_r+0xb8>
  404590:	89ab      	ldrh	r3, [r5, #12]
  404592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404596:	81ab      	strh	r3, [r5, #12]
  404598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40459c:	20400001 	.word	0x20400001

004045a0 <_fflush_r>:
  4045a0:	b538      	push	{r3, r4, r5, lr}
  4045a2:	460d      	mov	r5, r1
  4045a4:	4604      	mov	r4, r0
  4045a6:	b108      	cbz	r0, 4045ac <_fflush_r+0xc>
  4045a8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4045aa:	b1bb      	cbz	r3, 4045dc <_fflush_r+0x3c>
  4045ac:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4045b0:	b188      	cbz	r0, 4045d6 <_fflush_r+0x36>
  4045b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4045b4:	07db      	lsls	r3, r3, #31
  4045b6:	d401      	bmi.n	4045bc <_fflush_r+0x1c>
  4045b8:	0581      	lsls	r1, r0, #22
  4045ba:	d517      	bpl.n	4045ec <_fflush_r+0x4c>
  4045bc:	4620      	mov	r0, r4
  4045be:	4629      	mov	r1, r5
  4045c0:	f7ff ff4e 	bl	404460 <__sflush_r>
  4045c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4045c6:	07da      	lsls	r2, r3, #31
  4045c8:	4604      	mov	r4, r0
  4045ca:	d402      	bmi.n	4045d2 <_fflush_r+0x32>
  4045cc:	89ab      	ldrh	r3, [r5, #12]
  4045ce:	059b      	lsls	r3, r3, #22
  4045d0:	d507      	bpl.n	4045e2 <_fflush_r+0x42>
  4045d2:	4620      	mov	r0, r4
  4045d4:	bd38      	pop	{r3, r4, r5, pc}
  4045d6:	4604      	mov	r4, r0
  4045d8:	4620      	mov	r0, r4
  4045da:	bd38      	pop	{r3, r4, r5, pc}
  4045dc:	f000 f838 	bl	404650 <__sinit>
  4045e0:	e7e4      	b.n	4045ac <_fflush_r+0xc>
  4045e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4045e4:	f000 fbf6 	bl	404dd4 <__retarget_lock_release_recursive>
  4045e8:	4620      	mov	r0, r4
  4045ea:	bd38      	pop	{r3, r4, r5, pc}
  4045ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4045ee:	f000 fbef 	bl	404dd0 <__retarget_lock_acquire_recursive>
  4045f2:	e7e3      	b.n	4045bc <_fflush_r+0x1c>

004045f4 <_cleanup_r>:
  4045f4:	4901      	ldr	r1, [pc, #4]	; (4045fc <_cleanup_r+0x8>)
  4045f6:	f000 bbaf 	b.w	404d58 <_fwalk_reent>
  4045fa:	bf00      	nop
  4045fc:	00405891 	.word	0x00405891

00404600 <std.isra.0>:
  404600:	b510      	push	{r4, lr}
  404602:	2300      	movs	r3, #0
  404604:	4604      	mov	r4, r0
  404606:	8181      	strh	r1, [r0, #12]
  404608:	81c2      	strh	r2, [r0, #14]
  40460a:	6003      	str	r3, [r0, #0]
  40460c:	6043      	str	r3, [r0, #4]
  40460e:	6083      	str	r3, [r0, #8]
  404610:	6643      	str	r3, [r0, #100]	; 0x64
  404612:	6103      	str	r3, [r0, #16]
  404614:	6143      	str	r3, [r0, #20]
  404616:	6183      	str	r3, [r0, #24]
  404618:	4619      	mov	r1, r3
  40461a:	2208      	movs	r2, #8
  40461c:	305c      	adds	r0, #92	; 0x5c
  40461e:	f7fe ff75 	bl	40350c <memset>
  404622:	4807      	ldr	r0, [pc, #28]	; (404640 <std.isra.0+0x40>)
  404624:	4907      	ldr	r1, [pc, #28]	; (404644 <std.isra.0+0x44>)
  404626:	4a08      	ldr	r2, [pc, #32]	; (404648 <std.isra.0+0x48>)
  404628:	4b08      	ldr	r3, [pc, #32]	; (40464c <std.isra.0+0x4c>)
  40462a:	6220      	str	r0, [r4, #32]
  40462c:	61e4      	str	r4, [r4, #28]
  40462e:	6261      	str	r1, [r4, #36]	; 0x24
  404630:	62a2      	str	r2, [r4, #40]	; 0x28
  404632:	62e3      	str	r3, [r4, #44]	; 0x2c
  404634:	f104 0058 	add.w	r0, r4, #88	; 0x58
  404638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40463c:	f000 bbc4 	b.w	404dc8 <__retarget_lock_init_recursive>
  404640:	004054e9 	.word	0x004054e9
  404644:	0040550d 	.word	0x0040550d
  404648:	00405549 	.word	0x00405549
  40464c:	00405569 	.word	0x00405569

00404650 <__sinit>:
  404650:	b510      	push	{r4, lr}
  404652:	4604      	mov	r4, r0
  404654:	4812      	ldr	r0, [pc, #72]	; (4046a0 <__sinit+0x50>)
  404656:	f000 fbbb 	bl	404dd0 <__retarget_lock_acquire_recursive>
  40465a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40465c:	b9d2      	cbnz	r2, 404694 <__sinit+0x44>
  40465e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  404662:	4810      	ldr	r0, [pc, #64]	; (4046a4 <__sinit+0x54>)
  404664:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  404668:	2103      	movs	r1, #3
  40466a:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40466e:	63e0      	str	r0, [r4, #60]	; 0x3c
  404670:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  404674:	6860      	ldr	r0, [r4, #4]
  404676:	2104      	movs	r1, #4
  404678:	f7ff ffc2 	bl	404600 <std.isra.0>
  40467c:	2201      	movs	r2, #1
  40467e:	2109      	movs	r1, #9
  404680:	68a0      	ldr	r0, [r4, #8]
  404682:	f7ff ffbd 	bl	404600 <std.isra.0>
  404686:	2202      	movs	r2, #2
  404688:	2112      	movs	r1, #18
  40468a:	68e0      	ldr	r0, [r4, #12]
  40468c:	f7ff ffb8 	bl	404600 <std.isra.0>
  404690:	2301      	movs	r3, #1
  404692:	63a3      	str	r3, [r4, #56]	; 0x38
  404694:	4802      	ldr	r0, [pc, #8]	; (4046a0 <__sinit+0x50>)
  404696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40469a:	f000 bb9b 	b.w	404dd4 <__retarget_lock_release_recursive>
  40469e:	bf00      	nop
  4046a0:	20406dd0 	.word	0x20406dd0
  4046a4:	004045f5 	.word	0x004045f5

004046a8 <__sfp_lock_acquire>:
  4046a8:	4801      	ldr	r0, [pc, #4]	; (4046b0 <__sfp_lock_acquire+0x8>)
  4046aa:	f000 bb91 	b.w	404dd0 <__retarget_lock_acquire_recursive>
  4046ae:	bf00      	nop
  4046b0:	20406de4 	.word	0x20406de4

004046b4 <__sfp_lock_release>:
  4046b4:	4801      	ldr	r0, [pc, #4]	; (4046bc <__sfp_lock_release+0x8>)
  4046b6:	f000 bb8d 	b.w	404dd4 <__retarget_lock_release_recursive>
  4046ba:	bf00      	nop
  4046bc:	20406de4 	.word	0x20406de4

004046c0 <__libc_fini_array>:
  4046c0:	b538      	push	{r3, r4, r5, lr}
  4046c2:	4c0a      	ldr	r4, [pc, #40]	; (4046ec <__libc_fini_array+0x2c>)
  4046c4:	4d0a      	ldr	r5, [pc, #40]	; (4046f0 <__libc_fini_array+0x30>)
  4046c6:	1b64      	subs	r4, r4, r5
  4046c8:	10a4      	asrs	r4, r4, #2
  4046ca:	d00a      	beq.n	4046e2 <__libc_fini_array+0x22>
  4046cc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4046d0:	3b01      	subs	r3, #1
  4046d2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4046d6:	3c01      	subs	r4, #1
  4046d8:	f855 3904 	ldr.w	r3, [r5], #-4
  4046dc:	4798      	blx	r3
  4046de:	2c00      	cmp	r4, #0
  4046e0:	d1f9      	bne.n	4046d6 <__libc_fini_array+0x16>
  4046e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4046e6:	f001 bc19 	b.w	405f1c <_fini>
  4046ea:	bf00      	nop
  4046ec:	00405f2c 	.word	0x00405f2c
  4046f0:	00405f28 	.word	0x00405f28

004046f4 <__fputwc>:
  4046f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4046f8:	b082      	sub	sp, #8
  4046fa:	4680      	mov	r8, r0
  4046fc:	4689      	mov	r9, r1
  4046fe:	4614      	mov	r4, r2
  404700:	f000 fb54 	bl	404dac <__locale_mb_cur_max>
  404704:	2801      	cmp	r0, #1
  404706:	d036      	beq.n	404776 <__fputwc+0x82>
  404708:	464a      	mov	r2, r9
  40470a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40470e:	a901      	add	r1, sp, #4
  404710:	4640      	mov	r0, r8
  404712:	f000 fffb 	bl	40570c <_wcrtomb_r>
  404716:	1c42      	adds	r2, r0, #1
  404718:	4606      	mov	r6, r0
  40471a:	d025      	beq.n	404768 <__fputwc+0x74>
  40471c:	b3a8      	cbz	r0, 40478a <__fputwc+0x96>
  40471e:	f89d e004 	ldrb.w	lr, [sp, #4]
  404722:	2500      	movs	r5, #0
  404724:	f10d 0a04 	add.w	sl, sp, #4
  404728:	e009      	b.n	40473e <__fputwc+0x4a>
  40472a:	6823      	ldr	r3, [r4, #0]
  40472c:	1c5a      	adds	r2, r3, #1
  40472e:	6022      	str	r2, [r4, #0]
  404730:	f883 e000 	strb.w	lr, [r3]
  404734:	3501      	adds	r5, #1
  404736:	42b5      	cmp	r5, r6
  404738:	d227      	bcs.n	40478a <__fputwc+0x96>
  40473a:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40473e:	68a3      	ldr	r3, [r4, #8]
  404740:	3b01      	subs	r3, #1
  404742:	2b00      	cmp	r3, #0
  404744:	60a3      	str	r3, [r4, #8]
  404746:	daf0      	bge.n	40472a <__fputwc+0x36>
  404748:	69a7      	ldr	r7, [r4, #24]
  40474a:	42bb      	cmp	r3, r7
  40474c:	4671      	mov	r1, lr
  40474e:	4622      	mov	r2, r4
  404750:	4640      	mov	r0, r8
  404752:	db02      	blt.n	40475a <__fputwc+0x66>
  404754:	f1be 0f0a 	cmp.w	lr, #10
  404758:	d1e7      	bne.n	40472a <__fputwc+0x36>
  40475a:	f000 ff7f 	bl	40565c <__swbuf_r>
  40475e:	1c43      	adds	r3, r0, #1
  404760:	d1e8      	bne.n	404734 <__fputwc+0x40>
  404762:	b002      	add	sp, #8
  404764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404768:	89a3      	ldrh	r3, [r4, #12]
  40476a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40476e:	81a3      	strh	r3, [r4, #12]
  404770:	b002      	add	sp, #8
  404772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404776:	f109 33ff 	add.w	r3, r9, #4294967295
  40477a:	2bfe      	cmp	r3, #254	; 0xfe
  40477c:	d8c4      	bhi.n	404708 <__fputwc+0x14>
  40477e:	fa5f fe89 	uxtb.w	lr, r9
  404782:	4606      	mov	r6, r0
  404784:	f88d e004 	strb.w	lr, [sp, #4]
  404788:	e7cb      	b.n	404722 <__fputwc+0x2e>
  40478a:	4648      	mov	r0, r9
  40478c:	b002      	add	sp, #8
  40478e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404792:	bf00      	nop

00404794 <_fputwc_r>:
  404794:	b530      	push	{r4, r5, lr}
  404796:	6e53      	ldr	r3, [r2, #100]	; 0x64
  404798:	f013 0f01 	tst.w	r3, #1
  40479c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4047a0:	4614      	mov	r4, r2
  4047a2:	b083      	sub	sp, #12
  4047a4:	4605      	mov	r5, r0
  4047a6:	b29a      	uxth	r2, r3
  4047a8:	d101      	bne.n	4047ae <_fputwc_r+0x1a>
  4047aa:	0590      	lsls	r0, r2, #22
  4047ac:	d51c      	bpl.n	4047e8 <_fputwc_r+0x54>
  4047ae:	0490      	lsls	r0, r2, #18
  4047b0:	d406      	bmi.n	4047c0 <_fputwc_r+0x2c>
  4047b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4047b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4047b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4047bc:	81a3      	strh	r3, [r4, #12]
  4047be:	6662      	str	r2, [r4, #100]	; 0x64
  4047c0:	4628      	mov	r0, r5
  4047c2:	4622      	mov	r2, r4
  4047c4:	f7ff ff96 	bl	4046f4 <__fputwc>
  4047c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4047ca:	07da      	lsls	r2, r3, #31
  4047cc:	4605      	mov	r5, r0
  4047ce:	d402      	bmi.n	4047d6 <_fputwc_r+0x42>
  4047d0:	89a3      	ldrh	r3, [r4, #12]
  4047d2:	059b      	lsls	r3, r3, #22
  4047d4:	d502      	bpl.n	4047dc <_fputwc_r+0x48>
  4047d6:	4628      	mov	r0, r5
  4047d8:	b003      	add	sp, #12
  4047da:	bd30      	pop	{r4, r5, pc}
  4047dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4047de:	f000 faf9 	bl	404dd4 <__retarget_lock_release_recursive>
  4047e2:	4628      	mov	r0, r5
  4047e4:	b003      	add	sp, #12
  4047e6:	bd30      	pop	{r4, r5, pc}
  4047e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4047ea:	9101      	str	r1, [sp, #4]
  4047ec:	f000 faf0 	bl	404dd0 <__retarget_lock_acquire_recursive>
  4047f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4047f4:	9901      	ldr	r1, [sp, #4]
  4047f6:	b29a      	uxth	r2, r3
  4047f8:	e7d9      	b.n	4047ae <_fputwc_r+0x1a>
  4047fa:	bf00      	nop

004047fc <_malloc_trim_r>:
  4047fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4047fe:	4f24      	ldr	r7, [pc, #144]	; (404890 <_malloc_trim_r+0x94>)
  404800:	460c      	mov	r4, r1
  404802:	4606      	mov	r6, r0
  404804:	f7fe fed0 	bl	4035a8 <__malloc_lock>
  404808:	68bb      	ldr	r3, [r7, #8]
  40480a:	685d      	ldr	r5, [r3, #4]
  40480c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  404810:	310f      	adds	r1, #15
  404812:	f025 0503 	bic.w	r5, r5, #3
  404816:	4429      	add	r1, r5
  404818:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40481c:	f021 010f 	bic.w	r1, r1, #15
  404820:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  404824:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  404828:	db07      	blt.n	40483a <_malloc_trim_r+0x3e>
  40482a:	2100      	movs	r1, #0
  40482c:	4630      	mov	r0, r6
  40482e:	f7fe fec7 	bl	4035c0 <_sbrk_r>
  404832:	68bb      	ldr	r3, [r7, #8]
  404834:	442b      	add	r3, r5
  404836:	4298      	cmp	r0, r3
  404838:	d004      	beq.n	404844 <_malloc_trim_r+0x48>
  40483a:	4630      	mov	r0, r6
  40483c:	f7fe feba 	bl	4035b4 <__malloc_unlock>
  404840:	2000      	movs	r0, #0
  404842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404844:	4261      	negs	r1, r4
  404846:	4630      	mov	r0, r6
  404848:	f7fe feba 	bl	4035c0 <_sbrk_r>
  40484c:	3001      	adds	r0, #1
  40484e:	d00d      	beq.n	40486c <_malloc_trim_r+0x70>
  404850:	4b10      	ldr	r3, [pc, #64]	; (404894 <_malloc_trim_r+0x98>)
  404852:	68ba      	ldr	r2, [r7, #8]
  404854:	6819      	ldr	r1, [r3, #0]
  404856:	1b2d      	subs	r5, r5, r4
  404858:	f045 0501 	orr.w	r5, r5, #1
  40485c:	4630      	mov	r0, r6
  40485e:	1b09      	subs	r1, r1, r4
  404860:	6055      	str	r5, [r2, #4]
  404862:	6019      	str	r1, [r3, #0]
  404864:	f7fe fea6 	bl	4035b4 <__malloc_unlock>
  404868:	2001      	movs	r0, #1
  40486a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40486c:	2100      	movs	r1, #0
  40486e:	4630      	mov	r0, r6
  404870:	f7fe fea6 	bl	4035c0 <_sbrk_r>
  404874:	68ba      	ldr	r2, [r7, #8]
  404876:	1a83      	subs	r3, r0, r2
  404878:	2b0f      	cmp	r3, #15
  40487a:	ddde      	ble.n	40483a <_malloc_trim_r+0x3e>
  40487c:	4c06      	ldr	r4, [pc, #24]	; (404898 <_malloc_trim_r+0x9c>)
  40487e:	4905      	ldr	r1, [pc, #20]	; (404894 <_malloc_trim_r+0x98>)
  404880:	6824      	ldr	r4, [r4, #0]
  404882:	f043 0301 	orr.w	r3, r3, #1
  404886:	1b00      	subs	r0, r0, r4
  404888:	6053      	str	r3, [r2, #4]
  40488a:	6008      	str	r0, [r1, #0]
  40488c:	e7d5      	b.n	40483a <_malloc_trim_r+0x3e>
  40488e:	bf00      	nop
  404890:	20400458 	.word	0x20400458
  404894:	20400d78 	.word	0x20400d78
  404898:	20400860 	.word	0x20400860

0040489c <_free_r>:
  40489c:	2900      	cmp	r1, #0
  40489e:	d044      	beq.n	40492a <_free_r+0x8e>
  4048a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4048a4:	460d      	mov	r5, r1
  4048a6:	4680      	mov	r8, r0
  4048a8:	f7fe fe7e 	bl	4035a8 <__malloc_lock>
  4048ac:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4048b0:	4969      	ldr	r1, [pc, #420]	; (404a58 <_free_r+0x1bc>)
  4048b2:	f027 0301 	bic.w	r3, r7, #1
  4048b6:	f1a5 0408 	sub.w	r4, r5, #8
  4048ba:	18e2      	adds	r2, r4, r3
  4048bc:	688e      	ldr	r6, [r1, #8]
  4048be:	6850      	ldr	r0, [r2, #4]
  4048c0:	42b2      	cmp	r2, r6
  4048c2:	f020 0003 	bic.w	r0, r0, #3
  4048c6:	d05e      	beq.n	404986 <_free_r+0xea>
  4048c8:	07fe      	lsls	r6, r7, #31
  4048ca:	6050      	str	r0, [r2, #4]
  4048cc:	d40b      	bmi.n	4048e6 <_free_r+0x4a>
  4048ce:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4048d2:	1be4      	subs	r4, r4, r7
  4048d4:	f101 0e08 	add.w	lr, r1, #8
  4048d8:	68a5      	ldr	r5, [r4, #8]
  4048da:	4575      	cmp	r5, lr
  4048dc:	443b      	add	r3, r7
  4048de:	d06d      	beq.n	4049bc <_free_r+0x120>
  4048e0:	68e7      	ldr	r7, [r4, #12]
  4048e2:	60ef      	str	r7, [r5, #12]
  4048e4:	60bd      	str	r5, [r7, #8]
  4048e6:	1815      	adds	r5, r2, r0
  4048e8:	686d      	ldr	r5, [r5, #4]
  4048ea:	07ed      	lsls	r5, r5, #31
  4048ec:	d53e      	bpl.n	40496c <_free_r+0xd0>
  4048ee:	f043 0201 	orr.w	r2, r3, #1
  4048f2:	6062      	str	r2, [r4, #4]
  4048f4:	50e3      	str	r3, [r4, r3]
  4048f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4048fa:	d217      	bcs.n	40492c <_free_r+0x90>
  4048fc:	08db      	lsrs	r3, r3, #3
  4048fe:	1c58      	adds	r0, r3, #1
  404900:	109a      	asrs	r2, r3, #2
  404902:	684d      	ldr	r5, [r1, #4]
  404904:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  404908:	60a7      	str	r7, [r4, #8]
  40490a:	2301      	movs	r3, #1
  40490c:	4093      	lsls	r3, r2
  40490e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  404912:	432b      	orrs	r3, r5
  404914:	3a08      	subs	r2, #8
  404916:	60e2      	str	r2, [r4, #12]
  404918:	604b      	str	r3, [r1, #4]
  40491a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40491e:	60fc      	str	r4, [r7, #12]
  404920:	4640      	mov	r0, r8
  404922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404926:	f7fe be45 	b.w	4035b4 <__malloc_unlock>
  40492a:	4770      	bx	lr
  40492c:	0a5a      	lsrs	r2, r3, #9
  40492e:	2a04      	cmp	r2, #4
  404930:	d852      	bhi.n	4049d8 <_free_r+0x13c>
  404932:	099a      	lsrs	r2, r3, #6
  404934:	f102 0739 	add.w	r7, r2, #57	; 0x39
  404938:	00ff      	lsls	r7, r7, #3
  40493a:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40493e:	19c8      	adds	r0, r1, r7
  404940:	59ca      	ldr	r2, [r1, r7]
  404942:	3808      	subs	r0, #8
  404944:	4290      	cmp	r0, r2
  404946:	d04f      	beq.n	4049e8 <_free_r+0x14c>
  404948:	6851      	ldr	r1, [r2, #4]
  40494a:	f021 0103 	bic.w	r1, r1, #3
  40494e:	428b      	cmp	r3, r1
  404950:	d232      	bcs.n	4049b8 <_free_r+0x11c>
  404952:	6892      	ldr	r2, [r2, #8]
  404954:	4290      	cmp	r0, r2
  404956:	d1f7      	bne.n	404948 <_free_r+0xac>
  404958:	68c3      	ldr	r3, [r0, #12]
  40495a:	60a0      	str	r0, [r4, #8]
  40495c:	60e3      	str	r3, [r4, #12]
  40495e:	609c      	str	r4, [r3, #8]
  404960:	60c4      	str	r4, [r0, #12]
  404962:	4640      	mov	r0, r8
  404964:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404968:	f7fe be24 	b.w	4035b4 <__malloc_unlock>
  40496c:	6895      	ldr	r5, [r2, #8]
  40496e:	4f3b      	ldr	r7, [pc, #236]	; (404a5c <_free_r+0x1c0>)
  404970:	42bd      	cmp	r5, r7
  404972:	4403      	add	r3, r0
  404974:	d040      	beq.n	4049f8 <_free_r+0x15c>
  404976:	68d0      	ldr	r0, [r2, #12]
  404978:	60e8      	str	r0, [r5, #12]
  40497a:	f043 0201 	orr.w	r2, r3, #1
  40497e:	6085      	str	r5, [r0, #8]
  404980:	6062      	str	r2, [r4, #4]
  404982:	50e3      	str	r3, [r4, r3]
  404984:	e7b7      	b.n	4048f6 <_free_r+0x5a>
  404986:	07ff      	lsls	r7, r7, #31
  404988:	4403      	add	r3, r0
  40498a:	d407      	bmi.n	40499c <_free_r+0x100>
  40498c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  404990:	1aa4      	subs	r4, r4, r2
  404992:	4413      	add	r3, r2
  404994:	68a0      	ldr	r0, [r4, #8]
  404996:	68e2      	ldr	r2, [r4, #12]
  404998:	60c2      	str	r2, [r0, #12]
  40499a:	6090      	str	r0, [r2, #8]
  40499c:	4a30      	ldr	r2, [pc, #192]	; (404a60 <_free_r+0x1c4>)
  40499e:	6812      	ldr	r2, [r2, #0]
  4049a0:	f043 0001 	orr.w	r0, r3, #1
  4049a4:	4293      	cmp	r3, r2
  4049a6:	6060      	str	r0, [r4, #4]
  4049a8:	608c      	str	r4, [r1, #8]
  4049aa:	d3b9      	bcc.n	404920 <_free_r+0x84>
  4049ac:	4b2d      	ldr	r3, [pc, #180]	; (404a64 <_free_r+0x1c8>)
  4049ae:	4640      	mov	r0, r8
  4049b0:	6819      	ldr	r1, [r3, #0]
  4049b2:	f7ff ff23 	bl	4047fc <_malloc_trim_r>
  4049b6:	e7b3      	b.n	404920 <_free_r+0x84>
  4049b8:	4610      	mov	r0, r2
  4049ba:	e7cd      	b.n	404958 <_free_r+0xbc>
  4049bc:	1811      	adds	r1, r2, r0
  4049be:	6849      	ldr	r1, [r1, #4]
  4049c0:	07c9      	lsls	r1, r1, #31
  4049c2:	d444      	bmi.n	404a4e <_free_r+0x1b2>
  4049c4:	6891      	ldr	r1, [r2, #8]
  4049c6:	68d2      	ldr	r2, [r2, #12]
  4049c8:	60ca      	str	r2, [r1, #12]
  4049ca:	4403      	add	r3, r0
  4049cc:	f043 0001 	orr.w	r0, r3, #1
  4049d0:	6091      	str	r1, [r2, #8]
  4049d2:	6060      	str	r0, [r4, #4]
  4049d4:	50e3      	str	r3, [r4, r3]
  4049d6:	e7a3      	b.n	404920 <_free_r+0x84>
  4049d8:	2a14      	cmp	r2, #20
  4049da:	d816      	bhi.n	404a0a <_free_r+0x16e>
  4049dc:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4049e0:	00ff      	lsls	r7, r7, #3
  4049e2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4049e6:	e7aa      	b.n	40493e <_free_r+0xa2>
  4049e8:	10aa      	asrs	r2, r5, #2
  4049ea:	2301      	movs	r3, #1
  4049ec:	684d      	ldr	r5, [r1, #4]
  4049ee:	4093      	lsls	r3, r2
  4049f0:	432b      	orrs	r3, r5
  4049f2:	604b      	str	r3, [r1, #4]
  4049f4:	4603      	mov	r3, r0
  4049f6:	e7b0      	b.n	40495a <_free_r+0xbe>
  4049f8:	f043 0201 	orr.w	r2, r3, #1
  4049fc:	614c      	str	r4, [r1, #20]
  4049fe:	610c      	str	r4, [r1, #16]
  404a00:	60e5      	str	r5, [r4, #12]
  404a02:	60a5      	str	r5, [r4, #8]
  404a04:	6062      	str	r2, [r4, #4]
  404a06:	50e3      	str	r3, [r4, r3]
  404a08:	e78a      	b.n	404920 <_free_r+0x84>
  404a0a:	2a54      	cmp	r2, #84	; 0x54
  404a0c:	d806      	bhi.n	404a1c <_free_r+0x180>
  404a0e:	0b1a      	lsrs	r2, r3, #12
  404a10:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  404a14:	00ff      	lsls	r7, r7, #3
  404a16:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  404a1a:	e790      	b.n	40493e <_free_r+0xa2>
  404a1c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404a20:	d806      	bhi.n	404a30 <_free_r+0x194>
  404a22:	0bda      	lsrs	r2, r3, #15
  404a24:	f102 0778 	add.w	r7, r2, #120	; 0x78
  404a28:	00ff      	lsls	r7, r7, #3
  404a2a:	f102 0577 	add.w	r5, r2, #119	; 0x77
  404a2e:	e786      	b.n	40493e <_free_r+0xa2>
  404a30:	f240 5054 	movw	r0, #1364	; 0x554
  404a34:	4282      	cmp	r2, r0
  404a36:	d806      	bhi.n	404a46 <_free_r+0x1aa>
  404a38:	0c9a      	lsrs	r2, r3, #18
  404a3a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  404a3e:	00ff      	lsls	r7, r7, #3
  404a40:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  404a44:	e77b      	b.n	40493e <_free_r+0xa2>
  404a46:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  404a4a:	257e      	movs	r5, #126	; 0x7e
  404a4c:	e777      	b.n	40493e <_free_r+0xa2>
  404a4e:	f043 0101 	orr.w	r1, r3, #1
  404a52:	6061      	str	r1, [r4, #4]
  404a54:	6013      	str	r3, [r2, #0]
  404a56:	e763      	b.n	404920 <_free_r+0x84>
  404a58:	20400458 	.word	0x20400458
  404a5c:	20400460 	.word	0x20400460
  404a60:	20400864 	.word	0x20400864
  404a64:	20400da8 	.word	0x20400da8

00404a68 <__sfvwrite_r>:
  404a68:	6893      	ldr	r3, [r2, #8]
  404a6a:	2b00      	cmp	r3, #0
  404a6c:	d073      	beq.n	404b56 <__sfvwrite_r+0xee>
  404a6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404a72:	898b      	ldrh	r3, [r1, #12]
  404a74:	b083      	sub	sp, #12
  404a76:	460c      	mov	r4, r1
  404a78:	0719      	lsls	r1, r3, #28
  404a7a:	9000      	str	r0, [sp, #0]
  404a7c:	4616      	mov	r6, r2
  404a7e:	d526      	bpl.n	404ace <__sfvwrite_r+0x66>
  404a80:	6922      	ldr	r2, [r4, #16]
  404a82:	b322      	cbz	r2, 404ace <__sfvwrite_r+0x66>
  404a84:	f013 0002 	ands.w	r0, r3, #2
  404a88:	6835      	ldr	r5, [r6, #0]
  404a8a:	d02c      	beq.n	404ae6 <__sfvwrite_r+0x7e>
  404a8c:	f04f 0900 	mov.w	r9, #0
  404a90:	4fb0      	ldr	r7, [pc, #704]	; (404d54 <__sfvwrite_r+0x2ec>)
  404a92:	46c8      	mov	r8, r9
  404a94:	46b2      	mov	sl, r6
  404a96:	45b8      	cmp	r8, r7
  404a98:	4643      	mov	r3, r8
  404a9a:	464a      	mov	r2, r9
  404a9c:	bf28      	it	cs
  404a9e:	463b      	movcs	r3, r7
  404aa0:	9800      	ldr	r0, [sp, #0]
  404aa2:	f1b8 0f00 	cmp.w	r8, #0
  404aa6:	d050      	beq.n	404b4a <__sfvwrite_r+0xe2>
  404aa8:	69e1      	ldr	r1, [r4, #28]
  404aaa:	6a66      	ldr	r6, [r4, #36]	; 0x24
  404aac:	47b0      	blx	r6
  404aae:	2800      	cmp	r0, #0
  404ab0:	dd58      	ble.n	404b64 <__sfvwrite_r+0xfc>
  404ab2:	f8da 3008 	ldr.w	r3, [sl, #8]
  404ab6:	1a1b      	subs	r3, r3, r0
  404ab8:	4481      	add	r9, r0
  404aba:	eba8 0800 	sub.w	r8, r8, r0
  404abe:	f8ca 3008 	str.w	r3, [sl, #8]
  404ac2:	2b00      	cmp	r3, #0
  404ac4:	d1e7      	bne.n	404a96 <__sfvwrite_r+0x2e>
  404ac6:	2000      	movs	r0, #0
  404ac8:	b003      	add	sp, #12
  404aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ace:	4621      	mov	r1, r4
  404ad0:	9800      	ldr	r0, [sp, #0]
  404ad2:	f7ff fc51 	bl	404378 <__swsetup_r>
  404ad6:	2800      	cmp	r0, #0
  404ad8:	f040 8133 	bne.w	404d42 <__sfvwrite_r+0x2da>
  404adc:	89a3      	ldrh	r3, [r4, #12]
  404ade:	6835      	ldr	r5, [r6, #0]
  404ae0:	f013 0002 	ands.w	r0, r3, #2
  404ae4:	d1d2      	bne.n	404a8c <__sfvwrite_r+0x24>
  404ae6:	f013 0901 	ands.w	r9, r3, #1
  404aea:	d145      	bne.n	404b78 <__sfvwrite_r+0x110>
  404aec:	464f      	mov	r7, r9
  404aee:	9601      	str	r6, [sp, #4]
  404af0:	b337      	cbz	r7, 404b40 <__sfvwrite_r+0xd8>
  404af2:	059a      	lsls	r2, r3, #22
  404af4:	f8d4 8008 	ldr.w	r8, [r4, #8]
  404af8:	f140 8083 	bpl.w	404c02 <__sfvwrite_r+0x19a>
  404afc:	4547      	cmp	r7, r8
  404afe:	46c3      	mov	fp, r8
  404b00:	f0c0 80ab 	bcc.w	404c5a <__sfvwrite_r+0x1f2>
  404b04:	f413 6f90 	tst.w	r3, #1152	; 0x480
  404b08:	f040 80ac 	bne.w	404c64 <__sfvwrite_r+0x1fc>
  404b0c:	6820      	ldr	r0, [r4, #0]
  404b0e:	46ba      	mov	sl, r7
  404b10:	465a      	mov	r2, fp
  404b12:	4649      	mov	r1, r9
  404b14:	f000 fade 	bl	4050d4 <memmove>
  404b18:	68a2      	ldr	r2, [r4, #8]
  404b1a:	6823      	ldr	r3, [r4, #0]
  404b1c:	eba2 0208 	sub.w	r2, r2, r8
  404b20:	445b      	add	r3, fp
  404b22:	60a2      	str	r2, [r4, #8]
  404b24:	6023      	str	r3, [r4, #0]
  404b26:	9a01      	ldr	r2, [sp, #4]
  404b28:	6893      	ldr	r3, [r2, #8]
  404b2a:	eba3 030a 	sub.w	r3, r3, sl
  404b2e:	44d1      	add	r9, sl
  404b30:	eba7 070a 	sub.w	r7, r7, sl
  404b34:	6093      	str	r3, [r2, #8]
  404b36:	2b00      	cmp	r3, #0
  404b38:	d0c5      	beq.n	404ac6 <__sfvwrite_r+0x5e>
  404b3a:	89a3      	ldrh	r3, [r4, #12]
  404b3c:	2f00      	cmp	r7, #0
  404b3e:	d1d8      	bne.n	404af2 <__sfvwrite_r+0x8a>
  404b40:	f8d5 9000 	ldr.w	r9, [r5]
  404b44:	686f      	ldr	r7, [r5, #4]
  404b46:	3508      	adds	r5, #8
  404b48:	e7d2      	b.n	404af0 <__sfvwrite_r+0x88>
  404b4a:	f8d5 9000 	ldr.w	r9, [r5]
  404b4e:	f8d5 8004 	ldr.w	r8, [r5, #4]
  404b52:	3508      	adds	r5, #8
  404b54:	e79f      	b.n	404a96 <__sfvwrite_r+0x2e>
  404b56:	2000      	movs	r0, #0
  404b58:	4770      	bx	lr
  404b5a:	4621      	mov	r1, r4
  404b5c:	9800      	ldr	r0, [sp, #0]
  404b5e:	f7ff fd1f 	bl	4045a0 <_fflush_r>
  404b62:	b370      	cbz	r0, 404bc2 <__sfvwrite_r+0x15a>
  404b64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404b6c:	f04f 30ff 	mov.w	r0, #4294967295
  404b70:	81a3      	strh	r3, [r4, #12]
  404b72:	b003      	add	sp, #12
  404b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b78:	4681      	mov	r9, r0
  404b7a:	4633      	mov	r3, r6
  404b7c:	464e      	mov	r6, r9
  404b7e:	46a8      	mov	r8, r5
  404b80:	469a      	mov	sl, r3
  404b82:	464d      	mov	r5, r9
  404b84:	b34e      	cbz	r6, 404bda <__sfvwrite_r+0x172>
  404b86:	b380      	cbz	r0, 404bea <__sfvwrite_r+0x182>
  404b88:	6820      	ldr	r0, [r4, #0]
  404b8a:	6923      	ldr	r3, [r4, #16]
  404b8c:	6962      	ldr	r2, [r4, #20]
  404b8e:	45b1      	cmp	r9, r6
  404b90:	46cb      	mov	fp, r9
  404b92:	bf28      	it	cs
  404b94:	46b3      	movcs	fp, r6
  404b96:	4298      	cmp	r0, r3
  404b98:	465f      	mov	r7, fp
  404b9a:	d904      	bls.n	404ba6 <__sfvwrite_r+0x13e>
  404b9c:	68a3      	ldr	r3, [r4, #8]
  404b9e:	4413      	add	r3, r2
  404ba0:	459b      	cmp	fp, r3
  404ba2:	f300 80a6 	bgt.w	404cf2 <__sfvwrite_r+0x28a>
  404ba6:	4593      	cmp	fp, r2
  404ba8:	db4b      	blt.n	404c42 <__sfvwrite_r+0x1da>
  404baa:	4613      	mov	r3, r2
  404bac:	6a67      	ldr	r7, [r4, #36]	; 0x24
  404bae:	69e1      	ldr	r1, [r4, #28]
  404bb0:	9800      	ldr	r0, [sp, #0]
  404bb2:	462a      	mov	r2, r5
  404bb4:	47b8      	blx	r7
  404bb6:	1e07      	subs	r7, r0, #0
  404bb8:	ddd4      	ble.n	404b64 <__sfvwrite_r+0xfc>
  404bba:	ebb9 0907 	subs.w	r9, r9, r7
  404bbe:	d0cc      	beq.n	404b5a <__sfvwrite_r+0xf2>
  404bc0:	2001      	movs	r0, #1
  404bc2:	f8da 3008 	ldr.w	r3, [sl, #8]
  404bc6:	1bdb      	subs	r3, r3, r7
  404bc8:	443d      	add	r5, r7
  404bca:	1bf6      	subs	r6, r6, r7
  404bcc:	f8ca 3008 	str.w	r3, [sl, #8]
  404bd0:	2b00      	cmp	r3, #0
  404bd2:	f43f af78 	beq.w	404ac6 <__sfvwrite_r+0x5e>
  404bd6:	2e00      	cmp	r6, #0
  404bd8:	d1d5      	bne.n	404b86 <__sfvwrite_r+0x11e>
  404bda:	f108 0308 	add.w	r3, r8, #8
  404bde:	e913 0060 	ldmdb	r3, {r5, r6}
  404be2:	4698      	mov	r8, r3
  404be4:	3308      	adds	r3, #8
  404be6:	2e00      	cmp	r6, #0
  404be8:	d0f9      	beq.n	404bde <__sfvwrite_r+0x176>
  404bea:	4632      	mov	r2, r6
  404bec:	210a      	movs	r1, #10
  404bee:	4628      	mov	r0, r5
  404bf0:	f000 f986 	bl	404f00 <memchr>
  404bf4:	2800      	cmp	r0, #0
  404bf6:	f000 80a1 	beq.w	404d3c <__sfvwrite_r+0x2d4>
  404bfa:	3001      	adds	r0, #1
  404bfc:	eba0 0905 	sub.w	r9, r0, r5
  404c00:	e7c2      	b.n	404b88 <__sfvwrite_r+0x120>
  404c02:	6820      	ldr	r0, [r4, #0]
  404c04:	6923      	ldr	r3, [r4, #16]
  404c06:	4298      	cmp	r0, r3
  404c08:	d802      	bhi.n	404c10 <__sfvwrite_r+0x1a8>
  404c0a:	6963      	ldr	r3, [r4, #20]
  404c0c:	429f      	cmp	r7, r3
  404c0e:	d25d      	bcs.n	404ccc <__sfvwrite_r+0x264>
  404c10:	45b8      	cmp	r8, r7
  404c12:	bf28      	it	cs
  404c14:	46b8      	movcs	r8, r7
  404c16:	4642      	mov	r2, r8
  404c18:	4649      	mov	r1, r9
  404c1a:	f000 fa5b 	bl	4050d4 <memmove>
  404c1e:	68a3      	ldr	r3, [r4, #8]
  404c20:	6822      	ldr	r2, [r4, #0]
  404c22:	eba3 0308 	sub.w	r3, r3, r8
  404c26:	4442      	add	r2, r8
  404c28:	60a3      	str	r3, [r4, #8]
  404c2a:	6022      	str	r2, [r4, #0]
  404c2c:	b10b      	cbz	r3, 404c32 <__sfvwrite_r+0x1ca>
  404c2e:	46c2      	mov	sl, r8
  404c30:	e779      	b.n	404b26 <__sfvwrite_r+0xbe>
  404c32:	4621      	mov	r1, r4
  404c34:	9800      	ldr	r0, [sp, #0]
  404c36:	f7ff fcb3 	bl	4045a0 <_fflush_r>
  404c3a:	2800      	cmp	r0, #0
  404c3c:	d192      	bne.n	404b64 <__sfvwrite_r+0xfc>
  404c3e:	46c2      	mov	sl, r8
  404c40:	e771      	b.n	404b26 <__sfvwrite_r+0xbe>
  404c42:	465a      	mov	r2, fp
  404c44:	4629      	mov	r1, r5
  404c46:	f000 fa45 	bl	4050d4 <memmove>
  404c4a:	68a2      	ldr	r2, [r4, #8]
  404c4c:	6823      	ldr	r3, [r4, #0]
  404c4e:	eba2 020b 	sub.w	r2, r2, fp
  404c52:	445b      	add	r3, fp
  404c54:	60a2      	str	r2, [r4, #8]
  404c56:	6023      	str	r3, [r4, #0]
  404c58:	e7af      	b.n	404bba <__sfvwrite_r+0x152>
  404c5a:	6820      	ldr	r0, [r4, #0]
  404c5c:	46b8      	mov	r8, r7
  404c5e:	46ba      	mov	sl, r7
  404c60:	46bb      	mov	fp, r7
  404c62:	e755      	b.n	404b10 <__sfvwrite_r+0xa8>
  404c64:	6962      	ldr	r2, [r4, #20]
  404c66:	6820      	ldr	r0, [r4, #0]
  404c68:	6921      	ldr	r1, [r4, #16]
  404c6a:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  404c6e:	eba0 0a01 	sub.w	sl, r0, r1
  404c72:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  404c76:	f10a 0001 	add.w	r0, sl, #1
  404c7a:	ea4f 0868 	mov.w	r8, r8, asr #1
  404c7e:	4438      	add	r0, r7
  404c80:	4540      	cmp	r0, r8
  404c82:	4642      	mov	r2, r8
  404c84:	bf84      	itt	hi
  404c86:	4680      	movhi	r8, r0
  404c88:	4642      	movhi	r2, r8
  404c8a:	055b      	lsls	r3, r3, #21
  404c8c:	d544      	bpl.n	404d18 <__sfvwrite_r+0x2b0>
  404c8e:	4611      	mov	r1, r2
  404c90:	9800      	ldr	r0, [sp, #0]
  404c92:	f7fe f98b 	bl	402fac <_malloc_r>
  404c96:	4683      	mov	fp, r0
  404c98:	2800      	cmp	r0, #0
  404c9a:	d055      	beq.n	404d48 <__sfvwrite_r+0x2e0>
  404c9c:	4652      	mov	r2, sl
  404c9e:	6921      	ldr	r1, [r4, #16]
  404ca0:	f000 f97e 	bl	404fa0 <memcpy>
  404ca4:	89a3      	ldrh	r3, [r4, #12]
  404ca6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  404caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404cae:	81a3      	strh	r3, [r4, #12]
  404cb0:	eb0b 000a 	add.w	r0, fp, sl
  404cb4:	eba8 030a 	sub.w	r3, r8, sl
  404cb8:	f8c4 b010 	str.w	fp, [r4, #16]
  404cbc:	f8c4 8014 	str.w	r8, [r4, #20]
  404cc0:	6020      	str	r0, [r4, #0]
  404cc2:	60a3      	str	r3, [r4, #8]
  404cc4:	46b8      	mov	r8, r7
  404cc6:	46ba      	mov	sl, r7
  404cc8:	46bb      	mov	fp, r7
  404cca:	e721      	b.n	404b10 <__sfvwrite_r+0xa8>
  404ccc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  404cd0:	42b9      	cmp	r1, r7
  404cd2:	bf28      	it	cs
  404cd4:	4639      	movcs	r1, r7
  404cd6:	464a      	mov	r2, r9
  404cd8:	fb91 f1f3 	sdiv	r1, r1, r3
  404cdc:	9800      	ldr	r0, [sp, #0]
  404cde:	6a66      	ldr	r6, [r4, #36]	; 0x24
  404ce0:	fb03 f301 	mul.w	r3, r3, r1
  404ce4:	69e1      	ldr	r1, [r4, #28]
  404ce6:	47b0      	blx	r6
  404ce8:	f1b0 0a00 	subs.w	sl, r0, #0
  404cec:	f73f af1b 	bgt.w	404b26 <__sfvwrite_r+0xbe>
  404cf0:	e738      	b.n	404b64 <__sfvwrite_r+0xfc>
  404cf2:	461a      	mov	r2, r3
  404cf4:	4629      	mov	r1, r5
  404cf6:	9301      	str	r3, [sp, #4]
  404cf8:	f000 f9ec 	bl	4050d4 <memmove>
  404cfc:	6822      	ldr	r2, [r4, #0]
  404cfe:	9b01      	ldr	r3, [sp, #4]
  404d00:	9800      	ldr	r0, [sp, #0]
  404d02:	441a      	add	r2, r3
  404d04:	6022      	str	r2, [r4, #0]
  404d06:	4621      	mov	r1, r4
  404d08:	f7ff fc4a 	bl	4045a0 <_fflush_r>
  404d0c:	9b01      	ldr	r3, [sp, #4]
  404d0e:	2800      	cmp	r0, #0
  404d10:	f47f af28 	bne.w	404b64 <__sfvwrite_r+0xfc>
  404d14:	461f      	mov	r7, r3
  404d16:	e750      	b.n	404bba <__sfvwrite_r+0x152>
  404d18:	9800      	ldr	r0, [sp, #0]
  404d1a:	f000 fa3f 	bl	40519c <_realloc_r>
  404d1e:	4683      	mov	fp, r0
  404d20:	2800      	cmp	r0, #0
  404d22:	d1c5      	bne.n	404cb0 <__sfvwrite_r+0x248>
  404d24:	9d00      	ldr	r5, [sp, #0]
  404d26:	6921      	ldr	r1, [r4, #16]
  404d28:	4628      	mov	r0, r5
  404d2a:	f7ff fdb7 	bl	40489c <_free_r>
  404d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404d32:	220c      	movs	r2, #12
  404d34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  404d38:	602a      	str	r2, [r5, #0]
  404d3a:	e715      	b.n	404b68 <__sfvwrite_r+0x100>
  404d3c:	f106 0901 	add.w	r9, r6, #1
  404d40:	e722      	b.n	404b88 <__sfvwrite_r+0x120>
  404d42:	f04f 30ff 	mov.w	r0, #4294967295
  404d46:	e6bf      	b.n	404ac8 <__sfvwrite_r+0x60>
  404d48:	9a00      	ldr	r2, [sp, #0]
  404d4a:	230c      	movs	r3, #12
  404d4c:	6013      	str	r3, [r2, #0]
  404d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404d52:	e709      	b.n	404b68 <__sfvwrite_r+0x100>
  404d54:	7ffffc00 	.word	0x7ffffc00

00404d58 <_fwalk_reent>:
  404d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404d5c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  404d60:	d01f      	beq.n	404da2 <_fwalk_reent+0x4a>
  404d62:	4688      	mov	r8, r1
  404d64:	4606      	mov	r6, r0
  404d66:	f04f 0900 	mov.w	r9, #0
  404d6a:	687d      	ldr	r5, [r7, #4]
  404d6c:	68bc      	ldr	r4, [r7, #8]
  404d6e:	3d01      	subs	r5, #1
  404d70:	d411      	bmi.n	404d96 <_fwalk_reent+0x3e>
  404d72:	89a3      	ldrh	r3, [r4, #12]
  404d74:	2b01      	cmp	r3, #1
  404d76:	f105 35ff 	add.w	r5, r5, #4294967295
  404d7a:	d908      	bls.n	404d8e <_fwalk_reent+0x36>
  404d7c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  404d80:	3301      	adds	r3, #1
  404d82:	4621      	mov	r1, r4
  404d84:	4630      	mov	r0, r6
  404d86:	d002      	beq.n	404d8e <_fwalk_reent+0x36>
  404d88:	47c0      	blx	r8
  404d8a:	ea49 0900 	orr.w	r9, r9, r0
  404d8e:	1c6b      	adds	r3, r5, #1
  404d90:	f104 0468 	add.w	r4, r4, #104	; 0x68
  404d94:	d1ed      	bne.n	404d72 <_fwalk_reent+0x1a>
  404d96:	683f      	ldr	r7, [r7, #0]
  404d98:	2f00      	cmp	r7, #0
  404d9a:	d1e6      	bne.n	404d6a <_fwalk_reent+0x12>
  404d9c:	4648      	mov	r0, r9
  404d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404da2:	46b9      	mov	r9, r7
  404da4:	4648      	mov	r0, r9
  404da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404daa:	bf00      	nop

00404dac <__locale_mb_cur_max>:
  404dac:	4b04      	ldr	r3, [pc, #16]	; (404dc0 <__locale_mb_cur_max+0x14>)
  404dae:	4a05      	ldr	r2, [pc, #20]	; (404dc4 <__locale_mb_cur_max+0x18>)
  404db0:	681b      	ldr	r3, [r3, #0]
  404db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  404db4:	2b00      	cmp	r3, #0
  404db6:	bf08      	it	eq
  404db8:	4613      	moveq	r3, r2
  404dba:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  404dbe:	4770      	bx	lr
  404dc0:	2040002c 	.word	0x2040002c
  404dc4:	2040086c 	.word	0x2040086c

00404dc8 <__retarget_lock_init_recursive>:
  404dc8:	4770      	bx	lr
  404dca:	bf00      	nop

00404dcc <__retarget_lock_close_recursive>:
  404dcc:	4770      	bx	lr
  404dce:	bf00      	nop

00404dd0 <__retarget_lock_acquire_recursive>:
  404dd0:	4770      	bx	lr
  404dd2:	bf00      	nop

00404dd4 <__retarget_lock_release_recursive>:
  404dd4:	4770      	bx	lr
  404dd6:	bf00      	nop

00404dd8 <__swhatbuf_r>:
  404dd8:	b570      	push	{r4, r5, r6, lr}
  404dda:	460c      	mov	r4, r1
  404ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404de0:	2900      	cmp	r1, #0
  404de2:	b090      	sub	sp, #64	; 0x40
  404de4:	4615      	mov	r5, r2
  404de6:	461e      	mov	r6, r3
  404de8:	db14      	blt.n	404e14 <__swhatbuf_r+0x3c>
  404dea:	aa01      	add	r2, sp, #4
  404dec:	f000 fdb2 	bl	405954 <_fstat_r>
  404df0:	2800      	cmp	r0, #0
  404df2:	db0f      	blt.n	404e14 <__swhatbuf_r+0x3c>
  404df4:	9a02      	ldr	r2, [sp, #8]
  404df6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  404dfa:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  404dfe:	fab2 f282 	clz	r2, r2
  404e02:	0952      	lsrs	r2, r2, #5
  404e04:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404e08:	f44f 6000 	mov.w	r0, #2048	; 0x800
  404e0c:	6032      	str	r2, [r6, #0]
  404e0e:	602b      	str	r3, [r5, #0]
  404e10:	b010      	add	sp, #64	; 0x40
  404e12:	bd70      	pop	{r4, r5, r6, pc}
  404e14:	89a2      	ldrh	r2, [r4, #12]
  404e16:	2300      	movs	r3, #0
  404e18:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  404e1c:	6033      	str	r3, [r6, #0]
  404e1e:	d004      	beq.n	404e2a <__swhatbuf_r+0x52>
  404e20:	2240      	movs	r2, #64	; 0x40
  404e22:	4618      	mov	r0, r3
  404e24:	602a      	str	r2, [r5, #0]
  404e26:	b010      	add	sp, #64	; 0x40
  404e28:	bd70      	pop	{r4, r5, r6, pc}
  404e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404e2e:	602b      	str	r3, [r5, #0]
  404e30:	b010      	add	sp, #64	; 0x40
  404e32:	bd70      	pop	{r4, r5, r6, pc}

00404e34 <__smakebuf_r>:
  404e34:	898a      	ldrh	r2, [r1, #12]
  404e36:	0792      	lsls	r2, r2, #30
  404e38:	460b      	mov	r3, r1
  404e3a:	d506      	bpl.n	404e4a <__smakebuf_r+0x16>
  404e3c:	f101 0243 	add.w	r2, r1, #67	; 0x43
  404e40:	2101      	movs	r1, #1
  404e42:	601a      	str	r2, [r3, #0]
  404e44:	611a      	str	r2, [r3, #16]
  404e46:	6159      	str	r1, [r3, #20]
  404e48:	4770      	bx	lr
  404e4a:	b5f0      	push	{r4, r5, r6, r7, lr}
  404e4c:	b083      	sub	sp, #12
  404e4e:	ab01      	add	r3, sp, #4
  404e50:	466a      	mov	r2, sp
  404e52:	460c      	mov	r4, r1
  404e54:	4606      	mov	r6, r0
  404e56:	f7ff ffbf 	bl	404dd8 <__swhatbuf_r>
  404e5a:	9900      	ldr	r1, [sp, #0]
  404e5c:	4605      	mov	r5, r0
  404e5e:	4630      	mov	r0, r6
  404e60:	f7fe f8a4 	bl	402fac <_malloc_r>
  404e64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404e68:	b1d8      	cbz	r0, 404ea2 <__smakebuf_r+0x6e>
  404e6a:	9a01      	ldr	r2, [sp, #4]
  404e6c:	4f15      	ldr	r7, [pc, #84]	; (404ec4 <__smakebuf_r+0x90>)
  404e6e:	9900      	ldr	r1, [sp, #0]
  404e70:	63f7      	str	r7, [r6, #60]	; 0x3c
  404e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404e76:	81a3      	strh	r3, [r4, #12]
  404e78:	6020      	str	r0, [r4, #0]
  404e7a:	6120      	str	r0, [r4, #16]
  404e7c:	6161      	str	r1, [r4, #20]
  404e7e:	b91a      	cbnz	r2, 404e88 <__smakebuf_r+0x54>
  404e80:	432b      	orrs	r3, r5
  404e82:	81a3      	strh	r3, [r4, #12]
  404e84:	b003      	add	sp, #12
  404e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404e88:	4630      	mov	r0, r6
  404e8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404e8e:	f000 fd75 	bl	40597c <_isatty_r>
  404e92:	b1a0      	cbz	r0, 404ebe <__smakebuf_r+0x8a>
  404e94:	89a3      	ldrh	r3, [r4, #12]
  404e96:	f023 0303 	bic.w	r3, r3, #3
  404e9a:	f043 0301 	orr.w	r3, r3, #1
  404e9e:	b21b      	sxth	r3, r3
  404ea0:	e7ee      	b.n	404e80 <__smakebuf_r+0x4c>
  404ea2:	059a      	lsls	r2, r3, #22
  404ea4:	d4ee      	bmi.n	404e84 <__smakebuf_r+0x50>
  404ea6:	f023 0303 	bic.w	r3, r3, #3
  404eaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404eae:	f043 0302 	orr.w	r3, r3, #2
  404eb2:	2101      	movs	r1, #1
  404eb4:	81a3      	strh	r3, [r4, #12]
  404eb6:	6022      	str	r2, [r4, #0]
  404eb8:	6122      	str	r2, [r4, #16]
  404eba:	6161      	str	r1, [r4, #20]
  404ebc:	e7e2      	b.n	404e84 <__smakebuf_r+0x50>
  404ebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404ec2:	e7dd      	b.n	404e80 <__smakebuf_r+0x4c>
  404ec4:	004045f5 	.word	0x004045f5

00404ec8 <__ascii_mbtowc>:
  404ec8:	b082      	sub	sp, #8
  404eca:	b149      	cbz	r1, 404ee0 <__ascii_mbtowc+0x18>
  404ecc:	b15a      	cbz	r2, 404ee6 <__ascii_mbtowc+0x1e>
  404ece:	b16b      	cbz	r3, 404eec <__ascii_mbtowc+0x24>
  404ed0:	7813      	ldrb	r3, [r2, #0]
  404ed2:	600b      	str	r3, [r1, #0]
  404ed4:	7812      	ldrb	r2, [r2, #0]
  404ed6:	1c10      	adds	r0, r2, #0
  404ed8:	bf18      	it	ne
  404eda:	2001      	movne	r0, #1
  404edc:	b002      	add	sp, #8
  404ede:	4770      	bx	lr
  404ee0:	a901      	add	r1, sp, #4
  404ee2:	2a00      	cmp	r2, #0
  404ee4:	d1f3      	bne.n	404ece <__ascii_mbtowc+0x6>
  404ee6:	4610      	mov	r0, r2
  404ee8:	b002      	add	sp, #8
  404eea:	4770      	bx	lr
  404eec:	f06f 0001 	mvn.w	r0, #1
  404ef0:	e7f4      	b.n	404edc <__ascii_mbtowc+0x14>
  404ef2:	bf00      	nop
	...

00404f00 <memchr>:
  404f00:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404f04:	2a10      	cmp	r2, #16
  404f06:	db2b      	blt.n	404f60 <memchr+0x60>
  404f08:	f010 0f07 	tst.w	r0, #7
  404f0c:	d008      	beq.n	404f20 <memchr+0x20>
  404f0e:	f810 3b01 	ldrb.w	r3, [r0], #1
  404f12:	3a01      	subs	r2, #1
  404f14:	428b      	cmp	r3, r1
  404f16:	d02d      	beq.n	404f74 <memchr+0x74>
  404f18:	f010 0f07 	tst.w	r0, #7
  404f1c:	b342      	cbz	r2, 404f70 <memchr+0x70>
  404f1e:	d1f6      	bne.n	404f0e <memchr+0xe>
  404f20:	b4f0      	push	{r4, r5, r6, r7}
  404f22:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404f26:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  404f2a:	f022 0407 	bic.w	r4, r2, #7
  404f2e:	f07f 0700 	mvns.w	r7, #0
  404f32:	2300      	movs	r3, #0
  404f34:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404f38:	3c08      	subs	r4, #8
  404f3a:	ea85 0501 	eor.w	r5, r5, r1
  404f3e:	ea86 0601 	eor.w	r6, r6, r1
  404f42:	fa85 f547 	uadd8	r5, r5, r7
  404f46:	faa3 f587 	sel	r5, r3, r7
  404f4a:	fa86 f647 	uadd8	r6, r6, r7
  404f4e:	faa5 f687 	sel	r6, r5, r7
  404f52:	b98e      	cbnz	r6, 404f78 <memchr+0x78>
  404f54:	d1ee      	bne.n	404f34 <memchr+0x34>
  404f56:	bcf0      	pop	{r4, r5, r6, r7}
  404f58:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404f5c:	f002 0207 	and.w	r2, r2, #7
  404f60:	b132      	cbz	r2, 404f70 <memchr+0x70>
  404f62:	f810 3b01 	ldrb.w	r3, [r0], #1
  404f66:	3a01      	subs	r2, #1
  404f68:	ea83 0301 	eor.w	r3, r3, r1
  404f6c:	b113      	cbz	r3, 404f74 <memchr+0x74>
  404f6e:	d1f8      	bne.n	404f62 <memchr+0x62>
  404f70:	2000      	movs	r0, #0
  404f72:	4770      	bx	lr
  404f74:	3801      	subs	r0, #1
  404f76:	4770      	bx	lr
  404f78:	2d00      	cmp	r5, #0
  404f7a:	bf06      	itte	eq
  404f7c:	4635      	moveq	r5, r6
  404f7e:	3803      	subeq	r0, #3
  404f80:	3807      	subne	r0, #7
  404f82:	f015 0f01 	tst.w	r5, #1
  404f86:	d107      	bne.n	404f98 <memchr+0x98>
  404f88:	3001      	adds	r0, #1
  404f8a:	f415 7f80 	tst.w	r5, #256	; 0x100
  404f8e:	bf02      	ittt	eq
  404f90:	3001      	addeq	r0, #1
  404f92:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404f96:	3001      	addeq	r0, #1
  404f98:	bcf0      	pop	{r4, r5, r6, r7}
  404f9a:	3801      	subs	r0, #1
  404f9c:	4770      	bx	lr
  404f9e:	bf00      	nop

00404fa0 <memcpy>:
  404fa0:	4684      	mov	ip, r0
  404fa2:	ea41 0300 	orr.w	r3, r1, r0
  404fa6:	f013 0303 	ands.w	r3, r3, #3
  404faa:	d16d      	bne.n	405088 <memcpy+0xe8>
  404fac:	3a40      	subs	r2, #64	; 0x40
  404fae:	d341      	bcc.n	405034 <memcpy+0x94>
  404fb0:	f851 3b04 	ldr.w	r3, [r1], #4
  404fb4:	f840 3b04 	str.w	r3, [r0], #4
  404fb8:	f851 3b04 	ldr.w	r3, [r1], #4
  404fbc:	f840 3b04 	str.w	r3, [r0], #4
  404fc0:	f851 3b04 	ldr.w	r3, [r1], #4
  404fc4:	f840 3b04 	str.w	r3, [r0], #4
  404fc8:	f851 3b04 	ldr.w	r3, [r1], #4
  404fcc:	f840 3b04 	str.w	r3, [r0], #4
  404fd0:	f851 3b04 	ldr.w	r3, [r1], #4
  404fd4:	f840 3b04 	str.w	r3, [r0], #4
  404fd8:	f851 3b04 	ldr.w	r3, [r1], #4
  404fdc:	f840 3b04 	str.w	r3, [r0], #4
  404fe0:	f851 3b04 	ldr.w	r3, [r1], #4
  404fe4:	f840 3b04 	str.w	r3, [r0], #4
  404fe8:	f851 3b04 	ldr.w	r3, [r1], #4
  404fec:	f840 3b04 	str.w	r3, [r0], #4
  404ff0:	f851 3b04 	ldr.w	r3, [r1], #4
  404ff4:	f840 3b04 	str.w	r3, [r0], #4
  404ff8:	f851 3b04 	ldr.w	r3, [r1], #4
  404ffc:	f840 3b04 	str.w	r3, [r0], #4
  405000:	f851 3b04 	ldr.w	r3, [r1], #4
  405004:	f840 3b04 	str.w	r3, [r0], #4
  405008:	f851 3b04 	ldr.w	r3, [r1], #4
  40500c:	f840 3b04 	str.w	r3, [r0], #4
  405010:	f851 3b04 	ldr.w	r3, [r1], #4
  405014:	f840 3b04 	str.w	r3, [r0], #4
  405018:	f851 3b04 	ldr.w	r3, [r1], #4
  40501c:	f840 3b04 	str.w	r3, [r0], #4
  405020:	f851 3b04 	ldr.w	r3, [r1], #4
  405024:	f840 3b04 	str.w	r3, [r0], #4
  405028:	f851 3b04 	ldr.w	r3, [r1], #4
  40502c:	f840 3b04 	str.w	r3, [r0], #4
  405030:	3a40      	subs	r2, #64	; 0x40
  405032:	d2bd      	bcs.n	404fb0 <memcpy+0x10>
  405034:	3230      	adds	r2, #48	; 0x30
  405036:	d311      	bcc.n	40505c <memcpy+0xbc>
  405038:	f851 3b04 	ldr.w	r3, [r1], #4
  40503c:	f840 3b04 	str.w	r3, [r0], #4
  405040:	f851 3b04 	ldr.w	r3, [r1], #4
  405044:	f840 3b04 	str.w	r3, [r0], #4
  405048:	f851 3b04 	ldr.w	r3, [r1], #4
  40504c:	f840 3b04 	str.w	r3, [r0], #4
  405050:	f851 3b04 	ldr.w	r3, [r1], #4
  405054:	f840 3b04 	str.w	r3, [r0], #4
  405058:	3a10      	subs	r2, #16
  40505a:	d2ed      	bcs.n	405038 <memcpy+0x98>
  40505c:	320c      	adds	r2, #12
  40505e:	d305      	bcc.n	40506c <memcpy+0xcc>
  405060:	f851 3b04 	ldr.w	r3, [r1], #4
  405064:	f840 3b04 	str.w	r3, [r0], #4
  405068:	3a04      	subs	r2, #4
  40506a:	d2f9      	bcs.n	405060 <memcpy+0xc0>
  40506c:	3204      	adds	r2, #4
  40506e:	d008      	beq.n	405082 <memcpy+0xe2>
  405070:	07d2      	lsls	r2, r2, #31
  405072:	bf1c      	itt	ne
  405074:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405078:	f800 3b01 	strbne.w	r3, [r0], #1
  40507c:	d301      	bcc.n	405082 <memcpy+0xe2>
  40507e:	880b      	ldrh	r3, [r1, #0]
  405080:	8003      	strh	r3, [r0, #0]
  405082:	4660      	mov	r0, ip
  405084:	4770      	bx	lr
  405086:	bf00      	nop
  405088:	2a08      	cmp	r2, #8
  40508a:	d313      	bcc.n	4050b4 <memcpy+0x114>
  40508c:	078b      	lsls	r3, r1, #30
  40508e:	d08d      	beq.n	404fac <memcpy+0xc>
  405090:	f010 0303 	ands.w	r3, r0, #3
  405094:	d08a      	beq.n	404fac <memcpy+0xc>
  405096:	f1c3 0304 	rsb	r3, r3, #4
  40509a:	1ad2      	subs	r2, r2, r3
  40509c:	07db      	lsls	r3, r3, #31
  40509e:	bf1c      	itt	ne
  4050a0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4050a4:	f800 3b01 	strbne.w	r3, [r0], #1
  4050a8:	d380      	bcc.n	404fac <memcpy+0xc>
  4050aa:	f831 3b02 	ldrh.w	r3, [r1], #2
  4050ae:	f820 3b02 	strh.w	r3, [r0], #2
  4050b2:	e77b      	b.n	404fac <memcpy+0xc>
  4050b4:	3a04      	subs	r2, #4
  4050b6:	d3d9      	bcc.n	40506c <memcpy+0xcc>
  4050b8:	3a01      	subs	r2, #1
  4050ba:	f811 3b01 	ldrb.w	r3, [r1], #1
  4050be:	f800 3b01 	strb.w	r3, [r0], #1
  4050c2:	d2f9      	bcs.n	4050b8 <memcpy+0x118>
  4050c4:	780b      	ldrb	r3, [r1, #0]
  4050c6:	7003      	strb	r3, [r0, #0]
  4050c8:	784b      	ldrb	r3, [r1, #1]
  4050ca:	7043      	strb	r3, [r0, #1]
  4050cc:	788b      	ldrb	r3, [r1, #2]
  4050ce:	7083      	strb	r3, [r0, #2]
  4050d0:	4660      	mov	r0, ip
  4050d2:	4770      	bx	lr

004050d4 <memmove>:
  4050d4:	4288      	cmp	r0, r1
  4050d6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4050d8:	d90d      	bls.n	4050f6 <memmove+0x22>
  4050da:	188b      	adds	r3, r1, r2
  4050dc:	4298      	cmp	r0, r3
  4050de:	d20a      	bcs.n	4050f6 <memmove+0x22>
  4050e0:	1884      	adds	r4, r0, r2
  4050e2:	2a00      	cmp	r2, #0
  4050e4:	d051      	beq.n	40518a <memmove+0xb6>
  4050e6:	4622      	mov	r2, r4
  4050e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4050ec:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4050f0:	4299      	cmp	r1, r3
  4050f2:	d1f9      	bne.n	4050e8 <memmove+0x14>
  4050f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4050f6:	2a0f      	cmp	r2, #15
  4050f8:	d948      	bls.n	40518c <memmove+0xb8>
  4050fa:	ea41 0300 	orr.w	r3, r1, r0
  4050fe:	079b      	lsls	r3, r3, #30
  405100:	d146      	bne.n	405190 <memmove+0xbc>
  405102:	f100 0410 	add.w	r4, r0, #16
  405106:	f101 0310 	add.w	r3, r1, #16
  40510a:	4615      	mov	r5, r2
  40510c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  405110:	f844 6c10 	str.w	r6, [r4, #-16]
  405114:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405118:	f844 6c0c 	str.w	r6, [r4, #-12]
  40511c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  405120:	f844 6c08 	str.w	r6, [r4, #-8]
  405124:	3d10      	subs	r5, #16
  405126:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40512a:	f844 6c04 	str.w	r6, [r4, #-4]
  40512e:	2d0f      	cmp	r5, #15
  405130:	f103 0310 	add.w	r3, r3, #16
  405134:	f104 0410 	add.w	r4, r4, #16
  405138:	d8e8      	bhi.n	40510c <memmove+0x38>
  40513a:	f1a2 0310 	sub.w	r3, r2, #16
  40513e:	f023 030f 	bic.w	r3, r3, #15
  405142:	f002 0e0f 	and.w	lr, r2, #15
  405146:	3310      	adds	r3, #16
  405148:	f1be 0f03 	cmp.w	lr, #3
  40514c:	4419      	add	r1, r3
  40514e:	4403      	add	r3, r0
  405150:	d921      	bls.n	405196 <memmove+0xc2>
  405152:	1f1e      	subs	r6, r3, #4
  405154:	460d      	mov	r5, r1
  405156:	4674      	mov	r4, lr
  405158:	3c04      	subs	r4, #4
  40515a:	f855 7b04 	ldr.w	r7, [r5], #4
  40515e:	f846 7f04 	str.w	r7, [r6, #4]!
  405162:	2c03      	cmp	r4, #3
  405164:	d8f8      	bhi.n	405158 <memmove+0x84>
  405166:	f1ae 0404 	sub.w	r4, lr, #4
  40516a:	f024 0403 	bic.w	r4, r4, #3
  40516e:	3404      	adds	r4, #4
  405170:	4421      	add	r1, r4
  405172:	4423      	add	r3, r4
  405174:	f002 0203 	and.w	r2, r2, #3
  405178:	b162      	cbz	r2, 405194 <memmove+0xc0>
  40517a:	3b01      	subs	r3, #1
  40517c:	440a      	add	r2, r1
  40517e:	f811 4b01 	ldrb.w	r4, [r1], #1
  405182:	f803 4f01 	strb.w	r4, [r3, #1]!
  405186:	428a      	cmp	r2, r1
  405188:	d1f9      	bne.n	40517e <memmove+0xaa>
  40518a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40518c:	4603      	mov	r3, r0
  40518e:	e7f3      	b.n	405178 <memmove+0xa4>
  405190:	4603      	mov	r3, r0
  405192:	e7f2      	b.n	40517a <memmove+0xa6>
  405194:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405196:	4672      	mov	r2, lr
  405198:	e7ee      	b.n	405178 <memmove+0xa4>
  40519a:	bf00      	nop

0040519c <_realloc_r>:
  40519c:	2900      	cmp	r1, #0
  40519e:	f000 8095 	beq.w	4052cc <_realloc_r+0x130>
  4051a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4051a6:	460d      	mov	r5, r1
  4051a8:	4616      	mov	r6, r2
  4051aa:	b083      	sub	sp, #12
  4051ac:	4680      	mov	r8, r0
  4051ae:	f106 070b 	add.w	r7, r6, #11
  4051b2:	f7fe f9f9 	bl	4035a8 <__malloc_lock>
  4051b6:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4051ba:	2f16      	cmp	r7, #22
  4051bc:	f02e 0403 	bic.w	r4, lr, #3
  4051c0:	f1a5 0908 	sub.w	r9, r5, #8
  4051c4:	d83c      	bhi.n	405240 <_realloc_r+0xa4>
  4051c6:	2210      	movs	r2, #16
  4051c8:	4617      	mov	r7, r2
  4051ca:	42be      	cmp	r6, r7
  4051cc:	d83d      	bhi.n	40524a <_realloc_r+0xae>
  4051ce:	4294      	cmp	r4, r2
  4051d0:	da43      	bge.n	40525a <_realloc_r+0xbe>
  4051d2:	4bc4      	ldr	r3, [pc, #784]	; (4054e4 <_realloc_r+0x348>)
  4051d4:	6899      	ldr	r1, [r3, #8]
  4051d6:	eb09 0004 	add.w	r0, r9, r4
  4051da:	4288      	cmp	r0, r1
  4051dc:	f000 80b4 	beq.w	405348 <_realloc_r+0x1ac>
  4051e0:	6843      	ldr	r3, [r0, #4]
  4051e2:	f023 0101 	bic.w	r1, r3, #1
  4051e6:	4401      	add	r1, r0
  4051e8:	6849      	ldr	r1, [r1, #4]
  4051ea:	07c9      	lsls	r1, r1, #31
  4051ec:	d54c      	bpl.n	405288 <_realloc_r+0xec>
  4051ee:	f01e 0f01 	tst.w	lr, #1
  4051f2:	f000 809b 	beq.w	40532c <_realloc_r+0x190>
  4051f6:	4631      	mov	r1, r6
  4051f8:	4640      	mov	r0, r8
  4051fa:	f7fd fed7 	bl	402fac <_malloc_r>
  4051fe:	4606      	mov	r6, r0
  405200:	2800      	cmp	r0, #0
  405202:	d03a      	beq.n	40527a <_realloc_r+0xde>
  405204:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405208:	f023 0301 	bic.w	r3, r3, #1
  40520c:	444b      	add	r3, r9
  40520e:	f1a0 0208 	sub.w	r2, r0, #8
  405212:	429a      	cmp	r2, r3
  405214:	f000 8121 	beq.w	40545a <_realloc_r+0x2be>
  405218:	1f22      	subs	r2, r4, #4
  40521a:	2a24      	cmp	r2, #36	; 0x24
  40521c:	f200 8107 	bhi.w	40542e <_realloc_r+0x292>
  405220:	2a13      	cmp	r2, #19
  405222:	f200 80db 	bhi.w	4053dc <_realloc_r+0x240>
  405226:	4603      	mov	r3, r0
  405228:	462a      	mov	r2, r5
  40522a:	6811      	ldr	r1, [r2, #0]
  40522c:	6019      	str	r1, [r3, #0]
  40522e:	6851      	ldr	r1, [r2, #4]
  405230:	6059      	str	r1, [r3, #4]
  405232:	6892      	ldr	r2, [r2, #8]
  405234:	609a      	str	r2, [r3, #8]
  405236:	4629      	mov	r1, r5
  405238:	4640      	mov	r0, r8
  40523a:	f7ff fb2f 	bl	40489c <_free_r>
  40523e:	e01c      	b.n	40527a <_realloc_r+0xde>
  405240:	f027 0707 	bic.w	r7, r7, #7
  405244:	2f00      	cmp	r7, #0
  405246:	463a      	mov	r2, r7
  405248:	dabf      	bge.n	4051ca <_realloc_r+0x2e>
  40524a:	2600      	movs	r6, #0
  40524c:	230c      	movs	r3, #12
  40524e:	4630      	mov	r0, r6
  405250:	f8c8 3000 	str.w	r3, [r8]
  405254:	b003      	add	sp, #12
  405256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40525a:	462e      	mov	r6, r5
  40525c:	1be3      	subs	r3, r4, r7
  40525e:	2b0f      	cmp	r3, #15
  405260:	d81e      	bhi.n	4052a0 <_realloc_r+0x104>
  405262:	f8d9 3004 	ldr.w	r3, [r9, #4]
  405266:	f003 0301 	and.w	r3, r3, #1
  40526a:	4323      	orrs	r3, r4
  40526c:	444c      	add	r4, r9
  40526e:	f8c9 3004 	str.w	r3, [r9, #4]
  405272:	6863      	ldr	r3, [r4, #4]
  405274:	f043 0301 	orr.w	r3, r3, #1
  405278:	6063      	str	r3, [r4, #4]
  40527a:	4640      	mov	r0, r8
  40527c:	f7fe f99a 	bl	4035b4 <__malloc_unlock>
  405280:	4630      	mov	r0, r6
  405282:	b003      	add	sp, #12
  405284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405288:	f023 0303 	bic.w	r3, r3, #3
  40528c:	18e1      	adds	r1, r4, r3
  40528e:	4291      	cmp	r1, r2
  405290:	db1f      	blt.n	4052d2 <_realloc_r+0x136>
  405292:	68c3      	ldr	r3, [r0, #12]
  405294:	6882      	ldr	r2, [r0, #8]
  405296:	462e      	mov	r6, r5
  405298:	60d3      	str	r3, [r2, #12]
  40529a:	460c      	mov	r4, r1
  40529c:	609a      	str	r2, [r3, #8]
  40529e:	e7dd      	b.n	40525c <_realloc_r+0xc0>
  4052a0:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4052a4:	eb09 0107 	add.w	r1, r9, r7
  4052a8:	f002 0201 	and.w	r2, r2, #1
  4052ac:	444c      	add	r4, r9
  4052ae:	f043 0301 	orr.w	r3, r3, #1
  4052b2:	4317      	orrs	r7, r2
  4052b4:	f8c9 7004 	str.w	r7, [r9, #4]
  4052b8:	604b      	str	r3, [r1, #4]
  4052ba:	6863      	ldr	r3, [r4, #4]
  4052bc:	f043 0301 	orr.w	r3, r3, #1
  4052c0:	3108      	adds	r1, #8
  4052c2:	6063      	str	r3, [r4, #4]
  4052c4:	4640      	mov	r0, r8
  4052c6:	f7ff fae9 	bl	40489c <_free_r>
  4052ca:	e7d6      	b.n	40527a <_realloc_r+0xde>
  4052cc:	4611      	mov	r1, r2
  4052ce:	f7fd be6d 	b.w	402fac <_malloc_r>
  4052d2:	f01e 0f01 	tst.w	lr, #1
  4052d6:	d18e      	bne.n	4051f6 <_realloc_r+0x5a>
  4052d8:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4052dc:	eba9 0a01 	sub.w	sl, r9, r1
  4052e0:	f8da 1004 	ldr.w	r1, [sl, #4]
  4052e4:	f021 0103 	bic.w	r1, r1, #3
  4052e8:	440b      	add	r3, r1
  4052ea:	4423      	add	r3, r4
  4052ec:	4293      	cmp	r3, r2
  4052ee:	db25      	blt.n	40533c <_realloc_r+0x1a0>
  4052f0:	68c2      	ldr	r2, [r0, #12]
  4052f2:	6881      	ldr	r1, [r0, #8]
  4052f4:	4656      	mov	r6, sl
  4052f6:	60ca      	str	r2, [r1, #12]
  4052f8:	6091      	str	r1, [r2, #8]
  4052fa:	f8da 100c 	ldr.w	r1, [sl, #12]
  4052fe:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405302:	1f22      	subs	r2, r4, #4
  405304:	2a24      	cmp	r2, #36	; 0x24
  405306:	60c1      	str	r1, [r0, #12]
  405308:	6088      	str	r0, [r1, #8]
  40530a:	f200 8094 	bhi.w	405436 <_realloc_r+0x29a>
  40530e:	2a13      	cmp	r2, #19
  405310:	d96f      	bls.n	4053f2 <_realloc_r+0x256>
  405312:	6829      	ldr	r1, [r5, #0]
  405314:	f8ca 1008 	str.w	r1, [sl, #8]
  405318:	6869      	ldr	r1, [r5, #4]
  40531a:	f8ca 100c 	str.w	r1, [sl, #12]
  40531e:	2a1b      	cmp	r2, #27
  405320:	f200 80a2 	bhi.w	405468 <_realloc_r+0x2cc>
  405324:	3508      	adds	r5, #8
  405326:	f10a 0210 	add.w	r2, sl, #16
  40532a:	e063      	b.n	4053f4 <_realloc_r+0x258>
  40532c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  405330:	eba9 0a03 	sub.w	sl, r9, r3
  405334:	f8da 1004 	ldr.w	r1, [sl, #4]
  405338:	f021 0103 	bic.w	r1, r1, #3
  40533c:	1863      	adds	r3, r4, r1
  40533e:	4293      	cmp	r3, r2
  405340:	f6ff af59 	blt.w	4051f6 <_realloc_r+0x5a>
  405344:	4656      	mov	r6, sl
  405346:	e7d8      	b.n	4052fa <_realloc_r+0x15e>
  405348:	6841      	ldr	r1, [r0, #4]
  40534a:	f021 0b03 	bic.w	fp, r1, #3
  40534e:	44a3      	add	fp, r4
  405350:	f107 0010 	add.w	r0, r7, #16
  405354:	4583      	cmp	fp, r0
  405356:	da56      	bge.n	405406 <_realloc_r+0x26a>
  405358:	f01e 0f01 	tst.w	lr, #1
  40535c:	f47f af4b 	bne.w	4051f6 <_realloc_r+0x5a>
  405360:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405364:	eba9 0a01 	sub.w	sl, r9, r1
  405368:	f8da 1004 	ldr.w	r1, [sl, #4]
  40536c:	f021 0103 	bic.w	r1, r1, #3
  405370:	448b      	add	fp, r1
  405372:	4558      	cmp	r0, fp
  405374:	dce2      	bgt.n	40533c <_realloc_r+0x1a0>
  405376:	4656      	mov	r6, sl
  405378:	f8da 100c 	ldr.w	r1, [sl, #12]
  40537c:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405380:	1f22      	subs	r2, r4, #4
  405382:	2a24      	cmp	r2, #36	; 0x24
  405384:	60c1      	str	r1, [r0, #12]
  405386:	6088      	str	r0, [r1, #8]
  405388:	f200 808f 	bhi.w	4054aa <_realloc_r+0x30e>
  40538c:	2a13      	cmp	r2, #19
  40538e:	f240 808a 	bls.w	4054a6 <_realloc_r+0x30a>
  405392:	6829      	ldr	r1, [r5, #0]
  405394:	f8ca 1008 	str.w	r1, [sl, #8]
  405398:	6869      	ldr	r1, [r5, #4]
  40539a:	f8ca 100c 	str.w	r1, [sl, #12]
  40539e:	2a1b      	cmp	r2, #27
  4053a0:	f200 808a 	bhi.w	4054b8 <_realloc_r+0x31c>
  4053a4:	3508      	adds	r5, #8
  4053a6:	f10a 0210 	add.w	r2, sl, #16
  4053aa:	6829      	ldr	r1, [r5, #0]
  4053ac:	6011      	str	r1, [r2, #0]
  4053ae:	6869      	ldr	r1, [r5, #4]
  4053b0:	6051      	str	r1, [r2, #4]
  4053b2:	68a9      	ldr	r1, [r5, #8]
  4053b4:	6091      	str	r1, [r2, #8]
  4053b6:	eb0a 0107 	add.w	r1, sl, r7
  4053ba:	ebab 0207 	sub.w	r2, fp, r7
  4053be:	f042 0201 	orr.w	r2, r2, #1
  4053c2:	6099      	str	r1, [r3, #8]
  4053c4:	604a      	str	r2, [r1, #4]
  4053c6:	f8da 3004 	ldr.w	r3, [sl, #4]
  4053ca:	f003 0301 	and.w	r3, r3, #1
  4053ce:	431f      	orrs	r7, r3
  4053d0:	4640      	mov	r0, r8
  4053d2:	f8ca 7004 	str.w	r7, [sl, #4]
  4053d6:	f7fe f8ed 	bl	4035b4 <__malloc_unlock>
  4053da:	e751      	b.n	405280 <_realloc_r+0xe4>
  4053dc:	682b      	ldr	r3, [r5, #0]
  4053de:	6003      	str	r3, [r0, #0]
  4053e0:	686b      	ldr	r3, [r5, #4]
  4053e2:	6043      	str	r3, [r0, #4]
  4053e4:	2a1b      	cmp	r2, #27
  4053e6:	d82d      	bhi.n	405444 <_realloc_r+0x2a8>
  4053e8:	f100 0308 	add.w	r3, r0, #8
  4053ec:	f105 0208 	add.w	r2, r5, #8
  4053f0:	e71b      	b.n	40522a <_realloc_r+0x8e>
  4053f2:	4632      	mov	r2, r6
  4053f4:	6829      	ldr	r1, [r5, #0]
  4053f6:	6011      	str	r1, [r2, #0]
  4053f8:	6869      	ldr	r1, [r5, #4]
  4053fa:	6051      	str	r1, [r2, #4]
  4053fc:	68a9      	ldr	r1, [r5, #8]
  4053fe:	6091      	str	r1, [r2, #8]
  405400:	461c      	mov	r4, r3
  405402:	46d1      	mov	r9, sl
  405404:	e72a      	b.n	40525c <_realloc_r+0xc0>
  405406:	eb09 0107 	add.w	r1, r9, r7
  40540a:	ebab 0b07 	sub.w	fp, fp, r7
  40540e:	f04b 0201 	orr.w	r2, fp, #1
  405412:	6099      	str	r1, [r3, #8]
  405414:	604a      	str	r2, [r1, #4]
  405416:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40541a:	f003 0301 	and.w	r3, r3, #1
  40541e:	431f      	orrs	r7, r3
  405420:	4640      	mov	r0, r8
  405422:	f845 7c04 	str.w	r7, [r5, #-4]
  405426:	f7fe f8c5 	bl	4035b4 <__malloc_unlock>
  40542a:	462e      	mov	r6, r5
  40542c:	e728      	b.n	405280 <_realloc_r+0xe4>
  40542e:	4629      	mov	r1, r5
  405430:	f7ff fe50 	bl	4050d4 <memmove>
  405434:	e6ff      	b.n	405236 <_realloc_r+0x9a>
  405436:	4629      	mov	r1, r5
  405438:	4630      	mov	r0, r6
  40543a:	461c      	mov	r4, r3
  40543c:	46d1      	mov	r9, sl
  40543e:	f7ff fe49 	bl	4050d4 <memmove>
  405442:	e70b      	b.n	40525c <_realloc_r+0xc0>
  405444:	68ab      	ldr	r3, [r5, #8]
  405446:	6083      	str	r3, [r0, #8]
  405448:	68eb      	ldr	r3, [r5, #12]
  40544a:	60c3      	str	r3, [r0, #12]
  40544c:	2a24      	cmp	r2, #36	; 0x24
  40544e:	d017      	beq.n	405480 <_realloc_r+0x2e4>
  405450:	f100 0310 	add.w	r3, r0, #16
  405454:	f105 0210 	add.w	r2, r5, #16
  405458:	e6e7      	b.n	40522a <_realloc_r+0x8e>
  40545a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40545e:	f023 0303 	bic.w	r3, r3, #3
  405462:	441c      	add	r4, r3
  405464:	462e      	mov	r6, r5
  405466:	e6f9      	b.n	40525c <_realloc_r+0xc0>
  405468:	68a9      	ldr	r1, [r5, #8]
  40546a:	f8ca 1010 	str.w	r1, [sl, #16]
  40546e:	68e9      	ldr	r1, [r5, #12]
  405470:	f8ca 1014 	str.w	r1, [sl, #20]
  405474:	2a24      	cmp	r2, #36	; 0x24
  405476:	d00c      	beq.n	405492 <_realloc_r+0x2f6>
  405478:	3510      	adds	r5, #16
  40547a:	f10a 0218 	add.w	r2, sl, #24
  40547e:	e7b9      	b.n	4053f4 <_realloc_r+0x258>
  405480:	692b      	ldr	r3, [r5, #16]
  405482:	6103      	str	r3, [r0, #16]
  405484:	696b      	ldr	r3, [r5, #20]
  405486:	6143      	str	r3, [r0, #20]
  405488:	f105 0218 	add.w	r2, r5, #24
  40548c:	f100 0318 	add.w	r3, r0, #24
  405490:	e6cb      	b.n	40522a <_realloc_r+0x8e>
  405492:	692a      	ldr	r2, [r5, #16]
  405494:	f8ca 2018 	str.w	r2, [sl, #24]
  405498:	696a      	ldr	r2, [r5, #20]
  40549a:	f8ca 201c 	str.w	r2, [sl, #28]
  40549e:	3518      	adds	r5, #24
  4054a0:	f10a 0220 	add.w	r2, sl, #32
  4054a4:	e7a6      	b.n	4053f4 <_realloc_r+0x258>
  4054a6:	4632      	mov	r2, r6
  4054a8:	e77f      	b.n	4053aa <_realloc_r+0x20e>
  4054aa:	4629      	mov	r1, r5
  4054ac:	4630      	mov	r0, r6
  4054ae:	9301      	str	r3, [sp, #4]
  4054b0:	f7ff fe10 	bl	4050d4 <memmove>
  4054b4:	9b01      	ldr	r3, [sp, #4]
  4054b6:	e77e      	b.n	4053b6 <_realloc_r+0x21a>
  4054b8:	68a9      	ldr	r1, [r5, #8]
  4054ba:	f8ca 1010 	str.w	r1, [sl, #16]
  4054be:	68e9      	ldr	r1, [r5, #12]
  4054c0:	f8ca 1014 	str.w	r1, [sl, #20]
  4054c4:	2a24      	cmp	r2, #36	; 0x24
  4054c6:	d003      	beq.n	4054d0 <_realloc_r+0x334>
  4054c8:	3510      	adds	r5, #16
  4054ca:	f10a 0218 	add.w	r2, sl, #24
  4054ce:	e76c      	b.n	4053aa <_realloc_r+0x20e>
  4054d0:	692a      	ldr	r2, [r5, #16]
  4054d2:	f8ca 2018 	str.w	r2, [sl, #24]
  4054d6:	696a      	ldr	r2, [r5, #20]
  4054d8:	f8ca 201c 	str.w	r2, [sl, #28]
  4054dc:	3518      	adds	r5, #24
  4054de:	f10a 0220 	add.w	r2, sl, #32
  4054e2:	e762      	b.n	4053aa <_realloc_r+0x20e>
  4054e4:	20400458 	.word	0x20400458

004054e8 <__sread>:
  4054e8:	b510      	push	{r4, lr}
  4054ea:	460c      	mov	r4, r1
  4054ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4054f0:	f000 fa6c 	bl	4059cc <_read_r>
  4054f4:	2800      	cmp	r0, #0
  4054f6:	db03      	blt.n	405500 <__sread+0x18>
  4054f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4054fa:	4403      	add	r3, r0
  4054fc:	6523      	str	r3, [r4, #80]	; 0x50
  4054fe:	bd10      	pop	{r4, pc}
  405500:	89a3      	ldrh	r3, [r4, #12]
  405502:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  405506:	81a3      	strh	r3, [r4, #12]
  405508:	bd10      	pop	{r4, pc}
  40550a:	bf00      	nop

0040550c <__swrite>:
  40550c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405510:	4616      	mov	r6, r2
  405512:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  405516:	461f      	mov	r7, r3
  405518:	05d3      	lsls	r3, r2, #23
  40551a:	460c      	mov	r4, r1
  40551c:	4605      	mov	r5, r0
  40551e:	d507      	bpl.n	405530 <__swrite+0x24>
  405520:	2200      	movs	r2, #0
  405522:	2302      	movs	r3, #2
  405524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405528:	f000 fa3a 	bl	4059a0 <_lseek_r>
  40552c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405530:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405534:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  405538:	81a2      	strh	r2, [r4, #12]
  40553a:	463b      	mov	r3, r7
  40553c:	4632      	mov	r2, r6
  40553e:	4628      	mov	r0, r5
  405540:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405544:	f000 b91a 	b.w	40577c <_write_r>

00405548 <__sseek>:
  405548:	b510      	push	{r4, lr}
  40554a:	460c      	mov	r4, r1
  40554c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405550:	f000 fa26 	bl	4059a0 <_lseek_r>
  405554:	89a3      	ldrh	r3, [r4, #12]
  405556:	1c42      	adds	r2, r0, #1
  405558:	bf0e      	itee	eq
  40555a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40555e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  405562:	6520      	strne	r0, [r4, #80]	; 0x50
  405564:	81a3      	strh	r3, [r4, #12]
  405566:	bd10      	pop	{r4, pc}

00405568 <__sclose>:
  405568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40556c:	f000 b97e 	b.w	40586c <_close_r>
	...

00405580 <strlen>:
  405580:	f890 f000 	pld	[r0]
  405584:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  405588:	f020 0107 	bic.w	r1, r0, #7
  40558c:	f06f 0c00 	mvn.w	ip, #0
  405590:	f010 0407 	ands.w	r4, r0, #7
  405594:	f891 f020 	pld	[r1, #32]
  405598:	f040 8049 	bne.w	40562e <strlen+0xae>
  40559c:	f04f 0400 	mov.w	r4, #0
  4055a0:	f06f 0007 	mvn.w	r0, #7
  4055a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4055a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4055ac:	f100 0008 	add.w	r0, r0, #8
  4055b0:	fa82 f24c 	uadd8	r2, r2, ip
  4055b4:	faa4 f28c 	sel	r2, r4, ip
  4055b8:	fa83 f34c 	uadd8	r3, r3, ip
  4055bc:	faa2 f38c 	sel	r3, r2, ip
  4055c0:	bb4b      	cbnz	r3, 405616 <strlen+0x96>
  4055c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4055c6:	fa82 f24c 	uadd8	r2, r2, ip
  4055ca:	f100 0008 	add.w	r0, r0, #8
  4055ce:	faa4 f28c 	sel	r2, r4, ip
  4055d2:	fa83 f34c 	uadd8	r3, r3, ip
  4055d6:	faa2 f38c 	sel	r3, r2, ip
  4055da:	b9e3      	cbnz	r3, 405616 <strlen+0x96>
  4055dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4055e0:	fa82 f24c 	uadd8	r2, r2, ip
  4055e4:	f100 0008 	add.w	r0, r0, #8
  4055e8:	faa4 f28c 	sel	r2, r4, ip
  4055ec:	fa83 f34c 	uadd8	r3, r3, ip
  4055f0:	faa2 f38c 	sel	r3, r2, ip
  4055f4:	b97b      	cbnz	r3, 405616 <strlen+0x96>
  4055f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4055fa:	f101 0120 	add.w	r1, r1, #32
  4055fe:	fa82 f24c 	uadd8	r2, r2, ip
  405602:	f100 0008 	add.w	r0, r0, #8
  405606:	faa4 f28c 	sel	r2, r4, ip
  40560a:	fa83 f34c 	uadd8	r3, r3, ip
  40560e:	faa2 f38c 	sel	r3, r2, ip
  405612:	2b00      	cmp	r3, #0
  405614:	d0c6      	beq.n	4055a4 <strlen+0x24>
  405616:	2a00      	cmp	r2, #0
  405618:	bf04      	itt	eq
  40561a:	3004      	addeq	r0, #4
  40561c:	461a      	moveq	r2, r3
  40561e:	ba12      	rev	r2, r2
  405620:	fab2 f282 	clz	r2, r2
  405624:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  405628:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40562c:	4770      	bx	lr
  40562e:	e9d1 2300 	ldrd	r2, r3, [r1]
  405632:	f004 0503 	and.w	r5, r4, #3
  405636:	f1c4 0000 	rsb	r0, r4, #0
  40563a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40563e:	f014 0f04 	tst.w	r4, #4
  405642:	f891 f040 	pld	[r1, #64]	; 0x40
  405646:	fa0c f505 	lsl.w	r5, ip, r5
  40564a:	ea62 0205 	orn	r2, r2, r5
  40564e:	bf1c      	itt	ne
  405650:	ea63 0305 	ornne	r3, r3, r5
  405654:	4662      	movne	r2, ip
  405656:	f04f 0400 	mov.w	r4, #0
  40565a:	e7a9      	b.n	4055b0 <strlen+0x30>

0040565c <__swbuf_r>:
  40565c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40565e:	460d      	mov	r5, r1
  405660:	4614      	mov	r4, r2
  405662:	4606      	mov	r6, r0
  405664:	b110      	cbz	r0, 40566c <__swbuf_r+0x10>
  405666:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405668:	2b00      	cmp	r3, #0
  40566a:	d04b      	beq.n	405704 <__swbuf_r+0xa8>
  40566c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405670:	69a3      	ldr	r3, [r4, #24]
  405672:	60a3      	str	r3, [r4, #8]
  405674:	b291      	uxth	r1, r2
  405676:	0708      	lsls	r0, r1, #28
  405678:	d539      	bpl.n	4056ee <__swbuf_r+0x92>
  40567a:	6923      	ldr	r3, [r4, #16]
  40567c:	2b00      	cmp	r3, #0
  40567e:	d036      	beq.n	4056ee <__swbuf_r+0x92>
  405680:	b2ed      	uxtb	r5, r5
  405682:	0489      	lsls	r1, r1, #18
  405684:	462f      	mov	r7, r5
  405686:	d515      	bpl.n	4056b4 <__swbuf_r+0x58>
  405688:	6822      	ldr	r2, [r4, #0]
  40568a:	6961      	ldr	r1, [r4, #20]
  40568c:	1ad3      	subs	r3, r2, r3
  40568e:	428b      	cmp	r3, r1
  405690:	da1c      	bge.n	4056cc <__swbuf_r+0x70>
  405692:	3301      	adds	r3, #1
  405694:	68a1      	ldr	r1, [r4, #8]
  405696:	1c50      	adds	r0, r2, #1
  405698:	3901      	subs	r1, #1
  40569a:	60a1      	str	r1, [r4, #8]
  40569c:	6020      	str	r0, [r4, #0]
  40569e:	7015      	strb	r5, [r2, #0]
  4056a0:	6962      	ldr	r2, [r4, #20]
  4056a2:	429a      	cmp	r2, r3
  4056a4:	d01a      	beq.n	4056dc <__swbuf_r+0x80>
  4056a6:	89a3      	ldrh	r3, [r4, #12]
  4056a8:	07db      	lsls	r3, r3, #31
  4056aa:	d501      	bpl.n	4056b0 <__swbuf_r+0x54>
  4056ac:	2d0a      	cmp	r5, #10
  4056ae:	d015      	beq.n	4056dc <__swbuf_r+0x80>
  4056b0:	4638      	mov	r0, r7
  4056b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4056b4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4056b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4056ba:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4056be:	81a2      	strh	r2, [r4, #12]
  4056c0:	6822      	ldr	r2, [r4, #0]
  4056c2:	6661      	str	r1, [r4, #100]	; 0x64
  4056c4:	6961      	ldr	r1, [r4, #20]
  4056c6:	1ad3      	subs	r3, r2, r3
  4056c8:	428b      	cmp	r3, r1
  4056ca:	dbe2      	blt.n	405692 <__swbuf_r+0x36>
  4056cc:	4621      	mov	r1, r4
  4056ce:	4630      	mov	r0, r6
  4056d0:	f7fe ff66 	bl	4045a0 <_fflush_r>
  4056d4:	b940      	cbnz	r0, 4056e8 <__swbuf_r+0x8c>
  4056d6:	6822      	ldr	r2, [r4, #0]
  4056d8:	2301      	movs	r3, #1
  4056da:	e7db      	b.n	405694 <__swbuf_r+0x38>
  4056dc:	4621      	mov	r1, r4
  4056de:	4630      	mov	r0, r6
  4056e0:	f7fe ff5e 	bl	4045a0 <_fflush_r>
  4056e4:	2800      	cmp	r0, #0
  4056e6:	d0e3      	beq.n	4056b0 <__swbuf_r+0x54>
  4056e8:	f04f 37ff 	mov.w	r7, #4294967295
  4056ec:	e7e0      	b.n	4056b0 <__swbuf_r+0x54>
  4056ee:	4621      	mov	r1, r4
  4056f0:	4630      	mov	r0, r6
  4056f2:	f7fe fe41 	bl	404378 <__swsetup_r>
  4056f6:	2800      	cmp	r0, #0
  4056f8:	d1f6      	bne.n	4056e8 <__swbuf_r+0x8c>
  4056fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4056fe:	6923      	ldr	r3, [r4, #16]
  405700:	b291      	uxth	r1, r2
  405702:	e7bd      	b.n	405680 <__swbuf_r+0x24>
  405704:	f7fe ffa4 	bl	404650 <__sinit>
  405708:	e7b0      	b.n	40566c <__swbuf_r+0x10>
  40570a:	bf00      	nop

0040570c <_wcrtomb_r>:
  40570c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40570e:	4606      	mov	r6, r0
  405710:	b085      	sub	sp, #20
  405712:	461f      	mov	r7, r3
  405714:	b189      	cbz	r1, 40573a <_wcrtomb_r+0x2e>
  405716:	4c10      	ldr	r4, [pc, #64]	; (405758 <_wcrtomb_r+0x4c>)
  405718:	4d10      	ldr	r5, [pc, #64]	; (40575c <_wcrtomb_r+0x50>)
  40571a:	6824      	ldr	r4, [r4, #0]
  40571c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40571e:	2c00      	cmp	r4, #0
  405720:	bf08      	it	eq
  405722:	462c      	moveq	r4, r5
  405724:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  405728:	47a0      	blx	r4
  40572a:	1c43      	adds	r3, r0, #1
  40572c:	d103      	bne.n	405736 <_wcrtomb_r+0x2a>
  40572e:	2200      	movs	r2, #0
  405730:	238a      	movs	r3, #138	; 0x8a
  405732:	603a      	str	r2, [r7, #0]
  405734:	6033      	str	r3, [r6, #0]
  405736:	b005      	add	sp, #20
  405738:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40573a:	460c      	mov	r4, r1
  40573c:	4906      	ldr	r1, [pc, #24]	; (405758 <_wcrtomb_r+0x4c>)
  40573e:	4a07      	ldr	r2, [pc, #28]	; (40575c <_wcrtomb_r+0x50>)
  405740:	6809      	ldr	r1, [r1, #0]
  405742:	6b49      	ldr	r1, [r1, #52]	; 0x34
  405744:	2900      	cmp	r1, #0
  405746:	bf08      	it	eq
  405748:	4611      	moveq	r1, r2
  40574a:	4622      	mov	r2, r4
  40574c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  405750:	a901      	add	r1, sp, #4
  405752:	47a0      	blx	r4
  405754:	e7e9      	b.n	40572a <_wcrtomb_r+0x1e>
  405756:	bf00      	nop
  405758:	2040002c 	.word	0x2040002c
  40575c:	2040086c 	.word	0x2040086c

00405760 <__ascii_wctomb>:
  405760:	b121      	cbz	r1, 40576c <__ascii_wctomb+0xc>
  405762:	2aff      	cmp	r2, #255	; 0xff
  405764:	d804      	bhi.n	405770 <__ascii_wctomb+0x10>
  405766:	700a      	strb	r2, [r1, #0]
  405768:	2001      	movs	r0, #1
  40576a:	4770      	bx	lr
  40576c:	4608      	mov	r0, r1
  40576e:	4770      	bx	lr
  405770:	238a      	movs	r3, #138	; 0x8a
  405772:	6003      	str	r3, [r0, #0]
  405774:	f04f 30ff 	mov.w	r0, #4294967295
  405778:	4770      	bx	lr
  40577a:	bf00      	nop

0040577c <_write_r>:
  40577c:	b570      	push	{r4, r5, r6, lr}
  40577e:	460d      	mov	r5, r1
  405780:	4c08      	ldr	r4, [pc, #32]	; (4057a4 <_write_r+0x28>)
  405782:	4611      	mov	r1, r2
  405784:	4606      	mov	r6, r0
  405786:	461a      	mov	r2, r3
  405788:	4628      	mov	r0, r5
  40578a:	2300      	movs	r3, #0
  40578c:	6023      	str	r3, [r4, #0]
  40578e:	f7fb fd1f 	bl	4011d0 <_write>
  405792:	1c43      	adds	r3, r0, #1
  405794:	d000      	beq.n	405798 <_write_r+0x1c>
  405796:	bd70      	pop	{r4, r5, r6, pc}
  405798:	6823      	ldr	r3, [r4, #0]
  40579a:	2b00      	cmp	r3, #0
  40579c:	d0fb      	beq.n	405796 <_write_r+0x1a>
  40579e:	6033      	str	r3, [r6, #0]
  4057a0:	bd70      	pop	{r4, r5, r6, pc}
  4057a2:	bf00      	nop
  4057a4:	20406de8 	.word	0x20406de8

004057a8 <__register_exitproc>:
  4057a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4057ac:	4d2c      	ldr	r5, [pc, #176]	; (405860 <__register_exitproc+0xb8>)
  4057ae:	4606      	mov	r6, r0
  4057b0:	6828      	ldr	r0, [r5, #0]
  4057b2:	4698      	mov	r8, r3
  4057b4:	460f      	mov	r7, r1
  4057b6:	4691      	mov	r9, r2
  4057b8:	f7ff fb0a 	bl	404dd0 <__retarget_lock_acquire_recursive>
  4057bc:	4b29      	ldr	r3, [pc, #164]	; (405864 <__register_exitproc+0xbc>)
  4057be:	681c      	ldr	r4, [r3, #0]
  4057c0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4057c4:	2b00      	cmp	r3, #0
  4057c6:	d03e      	beq.n	405846 <__register_exitproc+0x9e>
  4057c8:	685a      	ldr	r2, [r3, #4]
  4057ca:	2a1f      	cmp	r2, #31
  4057cc:	dc1c      	bgt.n	405808 <__register_exitproc+0x60>
  4057ce:	f102 0e01 	add.w	lr, r2, #1
  4057d2:	b176      	cbz	r6, 4057f2 <__register_exitproc+0x4a>
  4057d4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4057d8:	2401      	movs	r4, #1
  4057da:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4057de:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4057e2:	4094      	lsls	r4, r2
  4057e4:	4320      	orrs	r0, r4
  4057e6:	2e02      	cmp	r6, #2
  4057e8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4057ec:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4057f0:	d023      	beq.n	40583a <__register_exitproc+0x92>
  4057f2:	3202      	adds	r2, #2
  4057f4:	f8c3 e004 	str.w	lr, [r3, #4]
  4057f8:	6828      	ldr	r0, [r5, #0]
  4057fa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4057fe:	f7ff fae9 	bl	404dd4 <__retarget_lock_release_recursive>
  405802:	2000      	movs	r0, #0
  405804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405808:	4b17      	ldr	r3, [pc, #92]	; (405868 <__register_exitproc+0xc0>)
  40580a:	b30b      	cbz	r3, 405850 <__register_exitproc+0xa8>
  40580c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  405810:	f7fd fbc4 	bl	402f9c <malloc>
  405814:	4603      	mov	r3, r0
  405816:	b1d8      	cbz	r0, 405850 <__register_exitproc+0xa8>
  405818:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40581c:	6002      	str	r2, [r0, #0]
  40581e:	2100      	movs	r1, #0
  405820:	6041      	str	r1, [r0, #4]
  405822:	460a      	mov	r2, r1
  405824:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  405828:	f04f 0e01 	mov.w	lr, #1
  40582c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  405830:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  405834:	2e00      	cmp	r6, #0
  405836:	d0dc      	beq.n	4057f2 <__register_exitproc+0x4a>
  405838:	e7cc      	b.n	4057d4 <__register_exitproc+0x2c>
  40583a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40583e:	430c      	orrs	r4, r1
  405840:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  405844:	e7d5      	b.n	4057f2 <__register_exitproc+0x4a>
  405846:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40584a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40584e:	e7bb      	b.n	4057c8 <__register_exitproc+0x20>
  405850:	6828      	ldr	r0, [r5, #0]
  405852:	f7ff fabf 	bl	404dd4 <__retarget_lock_release_recursive>
  405856:	f04f 30ff 	mov.w	r0, #4294967295
  40585a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40585e:	bf00      	nop
  405860:	20400868 	.word	0x20400868
  405864:	00405da0 	.word	0x00405da0
  405868:	00402f9d 	.word	0x00402f9d

0040586c <_close_r>:
  40586c:	b538      	push	{r3, r4, r5, lr}
  40586e:	4c07      	ldr	r4, [pc, #28]	; (40588c <_close_r+0x20>)
  405870:	2300      	movs	r3, #0
  405872:	4605      	mov	r5, r0
  405874:	4608      	mov	r0, r1
  405876:	6023      	str	r3, [r4, #0]
  405878:	f7fc fefe 	bl	402678 <_close>
  40587c:	1c43      	adds	r3, r0, #1
  40587e:	d000      	beq.n	405882 <_close_r+0x16>
  405880:	bd38      	pop	{r3, r4, r5, pc}
  405882:	6823      	ldr	r3, [r4, #0]
  405884:	2b00      	cmp	r3, #0
  405886:	d0fb      	beq.n	405880 <_close_r+0x14>
  405888:	602b      	str	r3, [r5, #0]
  40588a:	bd38      	pop	{r3, r4, r5, pc}
  40588c:	20406de8 	.word	0x20406de8

00405890 <_fclose_r>:
  405890:	b570      	push	{r4, r5, r6, lr}
  405892:	b159      	cbz	r1, 4058ac <_fclose_r+0x1c>
  405894:	4605      	mov	r5, r0
  405896:	460c      	mov	r4, r1
  405898:	b110      	cbz	r0, 4058a0 <_fclose_r+0x10>
  40589a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40589c:	2b00      	cmp	r3, #0
  40589e:	d03c      	beq.n	40591a <_fclose_r+0x8a>
  4058a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4058a2:	07d8      	lsls	r0, r3, #31
  4058a4:	d505      	bpl.n	4058b2 <_fclose_r+0x22>
  4058a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4058aa:	b92b      	cbnz	r3, 4058b8 <_fclose_r+0x28>
  4058ac:	2600      	movs	r6, #0
  4058ae:	4630      	mov	r0, r6
  4058b0:	bd70      	pop	{r4, r5, r6, pc}
  4058b2:	89a3      	ldrh	r3, [r4, #12]
  4058b4:	0599      	lsls	r1, r3, #22
  4058b6:	d53c      	bpl.n	405932 <_fclose_r+0xa2>
  4058b8:	4621      	mov	r1, r4
  4058ba:	4628      	mov	r0, r5
  4058bc:	f7fe fdd0 	bl	404460 <__sflush_r>
  4058c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4058c2:	4606      	mov	r6, r0
  4058c4:	b133      	cbz	r3, 4058d4 <_fclose_r+0x44>
  4058c6:	69e1      	ldr	r1, [r4, #28]
  4058c8:	4628      	mov	r0, r5
  4058ca:	4798      	blx	r3
  4058cc:	2800      	cmp	r0, #0
  4058ce:	bfb8      	it	lt
  4058d0:	f04f 36ff 	movlt.w	r6, #4294967295
  4058d4:	89a3      	ldrh	r3, [r4, #12]
  4058d6:	061a      	lsls	r2, r3, #24
  4058d8:	d422      	bmi.n	405920 <_fclose_r+0x90>
  4058da:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4058dc:	b141      	cbz	r1, 4058f0 <_fclose_r+0x60>
  4058de:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4058e2:	4299      	cmp	r1, r3
  4058e4:	d002      	beq.n	4058ec <_fclose_r+0x5c>
  4058e6:	4628      	mov	r0, r5
  4058e8:	f7fe ffd8 	bl	40489c <_free_r>
  4058ec:	2300      	movs	r3, #0
  4058ee:	6323      	str	r3, [r4, #48]	; 0x30
  4058f0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4058f2:	b121      	cbz	r1, 4058fe <_fclose_r+0x6e>
  4058f4:	4628      	mov	r0, r5
  4058f6:	f7fe ffd1 	bl	40489c <_free_r>
  4058fa:	2300      	movs	r3, #0
  4058fc:	6463      	str	r3, [r4, #68]	; 0x44
  4058fe:	f7fe fed3 	bl	4046a8 <__sfp_lock_acquire>
  405902:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405904:	2200      	movs	r2, #0
  405906:	07db      	lsls	r3, r3, #31
  405908:	81a2      	strh	r2, [r4, #12]
  40590a:	d50e      	bpl.n	40592a <_fclose_r+0x9a>
  40590c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40590e:	f7ff fa5d 	bl	404dcc <__retarget_lock_close_recursive>
  405912:	f7fe fecf 	bl	4046b4 <__sfp_lock_release>
  405916:	4630      	mov	r0, r6
  405918:	bd70      	pop	{r4, r5, r6, pc}
  40591a:	f7fe fe99 	bl	404650 <__sinit>
  40591e:	e7bf      	b.n	4058a0 <_fclose_r+0x10>
  405920:	6921      	ldr	r1, [r4, #16]
  405922:	4628      	mov	r0, r5
  405924:	f7fe ffba 	bl	40489c <_free_r>
  405928:	e7d7      	b.n	4058da <_fclose_r+0x4a>
  40592a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40592c:	f7ff fa52 	bl	404dd4 <__retarget_lock_release_recursive>
  405930:	e7ec      	b.n	40590c <_fclose_r+0x7c>
  405932:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405934:	f7ff fa4c 	bl	404dd0 <__retarget_lock_acquire_recursive>
  405938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40593c:	2b00      	cmp	r3, #0
  40593e:	d1bb      	bne.n	4058b8 <_fclose_r+0x28>
  405940:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405942:	f016 0601 	ands.w	r6, r6, #1
  405946:	d1b1      	bne.n	4058ac <_fclose_r+0x1c>
  405948:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40594a:	f7ff fa43 	bl	404dd4 <__retarget_lock_release_recursive>
  40594e:	4630      	mov	r0, r6
  405950:	bd70      	pop	{r4, r5, r6, pc}
  405952:	bf00      	nop

00405954 <_fstat_r>:
  405954:	b538      	push	{r3, r4, r5, lr}
  405956:	460b      	mov	r3, r1
  405958:	4c07      	ldr	r4, [pc, #28]	; (405978 <_fstat_r+0x24>)
  40595a:	4605      	mov	r5, r0
  40595c:	4611      	mov	r1, r2
  40595e:	4618      	mov	r0, r3
  405960:	2300      	movs	r3, #0
  405962:	6023      	str	r3, [r4, #0]
  405964:	f7fc fe8b 	bl	40267e <_fstat>
  405968:	1c43      	adds	r3, r0, #1
  40596a:	d000      	beq.n	40596e <_fstat_r+0x1a>
  40596c:	bd38      	pop	{r3, r4, r5, pc}
  40596e:	6823      	ldr	r3, [r4, #0]
  405970:	2b00      	cmp	r3, #0
  405972:	d0fb      	beq.n	40596c <_fstat_r+0x18>
  405974:	602b      	str	r3, [r5, #0]
  405976:	bd38      	pop	{r3, r4, r5, pc}
  405978:	20406de8 	.word	0x20406de8

0040597c <_isatty_r>:
  40597c:	b538      	push	{r3, r4, r5, lr}
  40597e:	4c07      	ldr	r4, [pc, #28]	; (40599c <_isatty_r+0x20>)
  405980:	2300      	movs	r3, #0
  405982:	4605      	mov	r5, r0
  405984:	4608      	mov	r0, r1
  405986:	6023      	str	r3, [r4, #0]
  405988:	f7fc fe7e 	bl	402688 <_isatty>
  40598c:	1c43      	adds	r3, r0, #1
  40598e:	d000      	beq.n	405992 <_isatty_r+0x16>
  405990:	bd38      	pop	{r3, r4, r5, pc}
  405992:	6823      	ldr	r3, [r4, #0]
  405994:	2b00      	cmp	r3, #0
  405996:	d0fb      	beq.n	405990 <_isatty_r+0x14>
  405998:	602b      	str	r3, [r5, #0]
  40599a:	bd38      	pop	{r3, r4, r5, pc}
  40599c:	20406de8 	.word	0x20406de8

004059a0 <_lseek_r>:
  4059a0:	b570      	push	{r4, r5, r6, lr}
  4059a2:	460d      	mov	r5, r1
  4059a4:	4c08      	ldr	r4, [pc, #32]	; (4059c8 <_lseek_r+0x28>)
  4059a6:	4611      	mov	r1, r2
  4059a8:	4606      	mov	r6, r0
  4059aa:	461a      	mov	r2, r3
  4059ac:	4628      	mov	r0, r5
  4059ae:	2300      	movs	r3, #0
  4059b0:	6023      	str	r3, [r4, #0]
  4059b2:	f7fc fe6b 	bl	40268c <_lseek>
  4059b6:	1c43      	adds	r3, r0, #1
  4059b8:	d000      	beq.n	4059bc <_lseek_r+0x1c>
  4059ba:	bd70      	pop	{r4, r5, r6, pc}
  4059bc:	6823      	ldr	r3, [r4, #0]
  4059be:	2b00      	cmp	r3, #0
  4059c0:	d0fb      	beq.n	4059ba <_lseek_r+0x1a>
  4059c2:	6033      	str	r3, [r6, #0]
  4059c4:	bd70      	pop	{r4, r5, r6, pc}
  4059c6:	bf00      	nop
  4059c8:	20406de8 	.word	0x20406de8

004059cc <_read_r>:
  4059cc:	b570      	push	{r4, r5, r6, lr}
  4059ce:	460d      	mov	r5, r1
  4059d0:	4c08      	ldr	r4, [pc, #32]	; (4059f4 <_read_r+0x28>)
  4059d2:	4611      	mov	r1, r2
  4059d4:	4606      	mov	r6, r0
  4059d6:	461a      	mov	r2, r3
  4059d8:	4628      	mov	r0, r5
  4059da:	2300      	movs	r3, #0
  4059dc:	6023      	str	r3, [r4, #0]
  4059de:	f7fb fbd9 	bl	401194 <_read>
  4059e2:	1c43      	adds	r3, r0, #1
  4059e4:	d000      	beq.n	4059e8 <_read_r+0x1c>
  4059e6:	bd70      	pop	{r4, r5, r6, pc}
  4059e8:	6823      	ldr	r3, [r4, #0]
  4059ea:	2b00      	cmp	r3, #0
  4059ec:	d0fb      	beq.n	4059e6 <_read_r+0x1a>
  4059ee:	6033      	str	r3, [r6, #0]
  4059f0:	bd70      	pop	{r4, r5, r6, pc}
  4059f2:	bf00      	nop
  4059f4:	20406de8 	.word	0x20406de8

004059f8 <__aeabi_uldivmod>:
  4059f8:	b953      	cbnz	r3, 405a10 <__aeabi_uldivmod+0x18>
  4059fa:	b94a      	cbnz	r2, 405a10 <__aeabi_uldivmod+0x18>
  4059fc:	2900      	cmp	r1, #0
  4059fe:	bf08      	it	eq
  405a00:	2800      	cmpeq	r0, #0
  405a02:	bf1c      	itt	ne
  405a04:	f04f 31ff 	movne.w	r1, #4294967295
  405a08:	f04f 30ff 	movne.w	r0, #4294967295
  405a0c:	f000 b97a 	b.w	405d04 <__aeabi_idiv0>
  405a10:	f1ad 0c08 	sub.w	ip, sp, #8
  405a14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  405a18:	f000 f806 	bl	405a28 <__udivmoddi4>
  405a1c:	f8dd e004 	ldr.w	lr, [sp, #4]
  405a20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405a24:	b004      	add	sp, #16
  405a26:	4770      	bx	lr

00405a28 <__udivmoddi4>:
  405a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405a2c:	468c      	mov	ip, r1
  405a2e:	460d      	mov	r5, r1
  405a30:	4604      	mov	r4, r0
  405a32:	9e08      	ldr	r6, [sp, #32]
  405a34:	2b00      	cmp	r3, #0
  405a36:	d151      	bne.n	405adc <__udivmoddi4+0xb4>
  405a38:	428a      	cmp	r2, r1
  405a3a:	4617      	mov	r7, r2
  405a3c:	d96d      	bls.n	405b1a <__udivmoddi4+0xf2>
  405a3e:	fab2 fe82 	clz	lr, r2
  405a42:	f1be 0f00 	cmp.w	lr, #0
  405a46:	d00b      	beq.n	405a60 <__udivmoddi4+0x38>
  405a48:	f1ce 0c20 	rsb	ip, lr, #32
  405a4c:	fa01 f50e 	lsl.w	r5, r1, lr
  405a50:	fa20 fc0c 	lsr.w	ip, r0, ip
  405a54:	fa02 f70e 	lsl.w	r7, r2, lr
  405a58:	ea4c 0c05 	orr.w	ip, ip, r5
  405a5c:	fa00 f40e 	lsl.w	r4, r0, lr
  405a60:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  405a64:	0c25      	lsrs	r5, r4, #16
  405a66:	fbbc f8fa 	udiv	r8, ip, sl
  405a6a:	fa1f f987 	uxth.w	r9, r7
  405a6e:	fb0a cc18 	mls	ip, sl, r8, ip
  405a72:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  405a76:	fb08 f309 	mul.w	r3, r8, r9
  405a7a:	42ab      	cmp	r3, r5
  405a7c:	d90a      	bls.n	405a94 <__udivmoddi4+0x6c>
  405a7e:	19ed      	adds	r5, r5, r7
  405a80:	f108 32ff 	add.w	r2, r8, #4294967295
  405a84:	f080 8123 	bcs.w	405cce <__udivmoddi4+0x2a6>
  405a88:	42ab      	cmp	r3, r5
  405a8a:	f240 8120 	bls.w	405cce <__udivmoddi4+0x2a6>
  405a8e:	f1a8 0802 	sub.w	r8, r8, #2
  405a92:	443d      	add	r5, r7
  405a94:	1aed      	subs	r5, r5, r3
  405a96:	b2a4      	uxth	r4, r4
  405a98:	fbb5 f0fa 	udiv	r0, r5, sl
  405a9c:	fb0a 5510 	mls	r5, sl, r0, r5
  405aa0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  405aa4:	fb00 f909 	mul.w	r9, r0, r9
  405aa8:	45a1      	cmp	r9, r4
  405aaa:	d909      	bls.n	405ac0 <__udivmoddi4+0x98>
  405aac:	19e4      	adds	r4, r4, r7
  405aae:	f100 33ff 	add.w	r3, r0, #4294967295
  405ab2:	f080 810a 	bcs.w	405cca <__udivmoddi4+0x2a2>
  405ab6:	45a1      	cmp	r9, r4
  405ab8:	f240 8107 	bls.w	405cca <__udivmoddi4+0x2a2>
  405abc:	3802      	subs	r0, #2
  405abe:	443c      	add	r4, r7
  405ac0:	eba4 0409 	sub.w	r4, r4, r9
  405ac4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  405ac8:	2100      	movs	r1, #0
  405aca:	2e00      	cmp	r6, #0
  405acc:	d061      	beq.n	405b92 <__udivmoddi4+0x16a>
  405ace:	fa24 f40e 	lsr.w	r4, r4, lr
  405ad2:	2300      	movs	r3, #0
  405ad4:	6034      	str	r4, [r6, #0]
  405ad6:	6073      	str	r3, [r6, #4]
  405ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405adc:	428b      	cmp	r3, r1
  405ade:	d907      	bls.n	405af0 <__udivmoddi4+0xc8>
  405ae0:	2e00      	cmp	r6, #0
  405ae2:	d054      	beq.n	405b8e <__udivmoddi4+0x166>
  405ae4:	2100      	movs	r1, #0
  405ae6:	e886 0021 	stmia.w	r6, {r0, r5}
  405aea:	4608      	mov	r0, r1
  405aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405af0:	fab3 f183 	clz	r1, r3
  405af4:	2900      	cmp	r1, #0
  405af6:	f040 808e 	bne.w	405c16 <__udivmoddi4+0x1ee>
  405afa:	42ab      	cmp	r3, r5
  405afc:	d302      	bcc.n	405b04 <__udivmoddi4+0xdc>
  405afe:	4282      	cmp	r2, r0
  405b00:	f200 80fa 	bhi.w	405cf8 <__udivmoddi4+0x2d0>
  405b04:	1a84      	subs	r4, r0, r2
  405b06:	eb65 0503 	sbc.w	r5, r5, r3
  405b0a:	2001      	movs	r0, #1
  405b0c:	46ac      	mov	ip, r5
  405b0e:	2e00      	cmp	r6, #0
  405b10:	d03f      	beq.n	405b92 <__udivmoddi4+0x16a>
  405b12:	e886 1010 	stmia.w	r6, {r4, ip}
  405b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405b1a:	b912      	cbnz	r2, 405b22 <__udivmoddi4+0xfa>
  405b1c:	2701      	movs	r7, #1
  405b1e:	fbb7 f7f2 	udiv	r7, r7, r2
  405b22:	fab7 fe87 	clz	lr, r7
  405b26:	f1be 0f00 	cmp.w	lr, #0
  405b2a:	d134      	bne.n	405b96 <__udivmoddi4+0x16e>
  405b2c:	1beb      	subs	r3, r5, r7
  405b2e:	0c3a      	lsrs	r2, r7, #16
  405b30:	fa1f fc87 	uxth.w	ip, r7
  405b34:	2101      	movs	r1, #1
  405b36:	fbb3 f8f2 	udiv	r8, r3, r2
  405b3a:	0c25      	lsrs	r5, r4, #16
  405b3c:	fb02 3318 	mls	r3, r2, r8, r3
  405b40:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  405b44:	fb0c f308 	mul.w	r3, ip, r8
  405b48:	42ab      	cmp	r3, r5
  405b4a:	d907      	bls.n	405b5c <__udivmoddi4+0x134>
  405b4c:	19ed      	adds	r5, r5, r7
  405b4e:	f108 30ff 	add.w	r0, r8, #4294967295
  405b52:	d202      	bcs.n	405b5a <__udivmoddi4+0x132>
  405b54:	42ab      	cmp	r3, r5
  405b56:	f200 80d1 	bhi.w	405cfc <__udivmoddi4+0x2d4>
  405b5a:	4680      	mov	r8, r0
  405b5c:	1aed      	subs	r5, r5, r3
  405b5e:	b2a3      	uxth	r3, r4
  405b60:	fbb5 f0f2 	udiv	r0, r5, r2
  405b64:	fb02 5510 	mls	r5, r2, r0, r5
  405b68:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  405b6c:	fb0c fc00 	mul.w	ip, ip, r0
  405b70:	45a4      	cmp	ip, r4
  405b72:	d907      	bls.n	405b84 <__udivmoddi4+0x15c>
  405b74:	19e4      	adds	r4, r4, r7
  405b76:	f100 33ff 	add.w	r3, r0, #4294967295
  405b7a:	d202      	bcs.n	405b82 <__udivmoddi4+0x15a>
  405b7c:	45a4      	cmp	ip, r4
  405b7e:	f200 80b8 	bhi.w	405cf2 <__udivmoddi4+0x2ca>
  405b82:	4618      	mov	r0, r3
  405b84:	eba4 040c 	sub.w	r4, r4, ip
  405b88:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  405b8c:	e79d      	b.n	405aca <__udivmoddi4+0xa2>
  405b8e:	4631      	mov	r1, r6
  405b90:	4630      	mov	r0, r6
  405b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405b96:	f1ce 0420 	rsb	r4, lr, #32
  405b9a:	fa05 f30e 	lsl.w	r3, r5, lr
  405b9e:	fa07 f70e 	lsl.w	r7, r7, lr
  405ba2:	fa20 f804 	lsr.w	r8, r0, r4
  405ba6:	0c3a      	lsrs	r2, r7, #16
  405ba8:	fa25 f404 	lsr.w	r4, r5, r4
  405bac:	ea48 0803 	orr.w	r8, r8, r3
  405bb0:	fbb4 f1f2 	udiv	r1, r4, r2
  405bb4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  405bb8:	fb02 4411 	mls	r4, r2, r1, r4
  405bbc:	fa1f fc87 	uxth.w	ip, r7
  405bc0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  405bc4:	fb01 f30c 	mul.w	r3, r1, ip
  405bc8:	42ab      	cmp	r3, r5
  405bca:	fa00 f40e 	lsl.w	r4, r0, lr
  405bce:	d909      	bls.n	405be4 <__udivmoddi4+0x1bc>
  405bd0:	19ed      	adds	r5, r5, r7
  405bd2:	f101 30ff 	add.w	r0, r1, #4294967295
  405bd6:	f080 808a 	bcs.w	405cee <__udivmoddi4+0x2c6>
  405bda:	42ab      	cmp	r3, r5
  405bdc:	f240 8087 	bls.w	405cee <__udivmoddi4+0x2c6>
  405be0:	3902      	subs	r1, #2
  405be2:	443d      	add	r5, r7
  405be4:	1aeb      	subs	r3, r5, r3
  405be6:	fa1f f588 	uxth.w	r5, r8
  405bea:	fbb3 f0f2 	udiv	r0, r3, r2
  405bee:	fb02 3310 	mls	r3, r2, r0, r3
  405bf2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  405bf6:	fb00 f30c 	mul.w	r3, r0, ip
  405bfa:	42ab      	cmp	r3, r5
  405bfc:	d907      	bls.n	405c0e <__udivmoddi4+0x1e6>
  405bfe:	19ed      	adds	r5, r5, r7
  405c00:	f100 38ff 	add.w	r8, r0, #4294967295
  405c04:	d26f      	bcs.n	405ce6 <__udivmoddi4+0x2be>
  405c06:	42ab      	cmp	r3, r5
  405c08:	d96d      	bls.n	405ce6 <__udivmoddi4+0x2be>
  405c0a:	3802      	subs	r0, #2
  405c0c:	443d      	add	r5, r7
  405c0e:	1aeb      	subs	r3, r5, r3
  405c10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  405c14:	e78f      	b.n	405b36 <__udivmoddi4+0x10e>
  405c16:	f1c1 0720 	rsb	r7, r1, #32
  405c1a:	fa22 f807 	lsr.w	r8, r2, r7
  405c1e:	408b      	lsls	r3, r1
  405c20:	fa05 f401 	lsl.w	r4, r5, r1
  405c24:	ea48 0303 	orr.w	r3, r8, r3
  405c28:	fa20 fe07 	lsr.w	lr, r0, r7
  405c2c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  405c30:	40fd      	lsrs	r5, r7
  405c32:	ea4e 0e04 	orr.w	lr, lr, r4
  405c36:	fbb5 f9fc 	udiv	r9, r5, ip
  405c3a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  405c3e:	fb0c 5519 	mls	r5, ip, r9, r5
  405c42:	fa1f f883 	uxth.w	r8, r3
  405c46:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  405c4a:	fb09 f408 	mul.w	r4, r9, r8
  405c4e:	42ac      	cmp	r4, r5
  405c50:	fa02 f201 	lsl.w	r2, r2, r1
  405c54:	fa00 fa01 	lsl.w	sl, r0, r1
  405c58:	d908      	bls.n	405c6c <__udivmoddi4+0x244>
  405c5a:	18ed      	adds	r5, r5, r3
  405c5c:	f109 30ff 	add.w	r0, r9, #4294967295
  405c60:	d243      	bcs.n	405cea <__udivmoddi4+0x2c2>
  405c62:	42ac      	cmp	r4, r5
  405c64:	d941      	bls.n	405cea <__udivmoddi4+0x2c2>
  405c66:	f1a9 0902 	sub.w	r9, r9, #2
  405c6a:	441d      	add	r5, r3
  405c6c:	1b2d      	subs	r5, r5, r4
  405c6e:	fa1f fe8e 	uxth.w	lr, lr
  405c72:	fbb5 f0fc 	udiv	r0, r5, ip
  405c76:	fb0c 5510 	mls	r5, ip, r0, r5
  405c7a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  405c7e:	fb00 f808 	mul.w	r8, r0, r8
  405c82:	45a0      	cmp	r8, r4
  405c84:	d907      	bls.n	405c96 <__udivmoddi4+0x26e>
  405c86:	18e4      	adds	r4, r4, r3
  405c88:	f100 35ff 	add.w	r5, r0, #4294967295
  405c8c:	d229      	bcs.n	405ce2 <__udivmoddi4+0x2ba>
  405c8e:	45a0      	cmp	r8, r4
  405c90:	d927      	bls.n	405ce2 <__udivmoddi4+0x2ba>
  405c92:	3802      	subs	r0, #2
  405c94:	441c      	add	r4, r3
  405c96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  405c9a:	eba4 0408 	sub.w	r4, r4, r8
  405c9e:	fba0 8902 	umull	r8, r9, r0, r2
  405ca2:	454c      	cmp	r4, r9
  405ca4:	46c6      	mov	lr, r8
  405ca6:	464d      	mov	r5, r9
  405ca8:	d315      	bcc.n	405cd6 <__udivmoddi4+0x2ae>
  405caa:	d012      	beq.n	405cd2 <__udivmoddi4+0x2aa>
  405cac:	b156      	cbz	r6, 405cc4 <__udivmoddi4+0x29c>
  405cae:	ebba 030e 	subs.w	r3, sl, lr
  405cb2:	eb64 0405 	sbc.w	r4, r4, r5
  405cb6:	fa04 f707 	lsl.w	r7, r4, r7
  405cba:	40cb      	lsrs	r3, r1
  405cbc:	431f      	orrs	r7, r3
  405cbe:	40cc      	lsrs	r4, r1
  405cc0:	6037      	str	r7, [r6, #0]
  405cc2:	6074      	str	r4, [r6, #4]
  405cc4:	2100      	movs	r1, #0
  405cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405cca:	4618      	mov	r0, r3
  405ccc:	e6f8      	b.n	405ac0 <__udivmoddi4+0x98>
  405cce:	4690      	mov	r8, r2
  405cd0:	e6e0      	b.n	405a94 <__udivmoddi4+0x6c>
  405cd2:	45c2      	cmp	sl, r8
  405cd4:	d2ea      	bcs.n	405cac <__udivmoddi4+0x284>
  405cd6:	ebb8 0e02 	subs.w	lr, r8, r2
  405cda:	eb69 0503 	sbc.w	r5, r9, r3
  405cde:	3801      	subs	r0, #1
  405ce0:	e7e4      	b.n	405cac <__udivmoddi4+0x284>
  405ce2:	4628      	mov	r0, r5
  405ce4:	e7d7      	b.n	405c96 <__udivmoddi4+0x26e>
  405ce6:	4640      	mov	r0, r8
  405ce8:	e791      	b.n	405c0e <__udivmoddi4+0x1e6>
  405cea:	4681      	mov	r9, r0
  405cec:	e7be      	b.n	405c6c <__udivmoddi4+0x244>
  405cee:	4601      	mov	r1, r0
  405cf0:	e778      	b.n	405be4 <__udivmoddi4+0x1bc>
  405cf2:	3802      	subs	r0, #2
  405cf4:	443c      	add	r4, r7
  405cf6:	e745      	b.n	405b84 <__udivmoddi4+0x15c>
  405cf8:	4608      	mov	r0, r1
  405cfa:	e708      	b.n	405b0e <__udivmoddi4+0xe6>
  405cfc:	f1a8 0802 	sub.w	r8, r8, #2
  405d00:	443d      	add	r5, r7
  405d02:	e72b      	b.n	405b5c <__udivmoddi4+0x134>

00405d04 <__aeabi_idiv0>:
  405d04:	4770      	bx	lr
  405d06:	bf00      	nop
  405d08:	092d452d 	.word	0x092d452d
  405d0c:	39384d57 	.word	0x39384d57
  405d10:	69203430 	.word	0x69203430
  405d14:	6974696e 	.word	0x6974696e
  405d18:	7a696c61 	.word	0x7a696c61
  405d1c:	6f697461 	.word	0x6f697461
  405d20:	6166206e 	.word	0x6166206e
  405d24:	64656c69 	.word	0x64656c69
  405d28:	00000d2e 	.word	0x00000d2e
  405d2c:	39384d57 	.word	0x39384d57
  405d30:	6e203430 	.word	0x6e203430
  405d34:	6620746f 	.word	0x6620746f
  405d38:	646e756f 	.word	0x646e756f
  405d3c:	000d0a21 	.word	0x000d0a21
  405d40:	0a05000d 	.word	0x0a05000d
  405d44:	0000004b 	.word	0x0000004b
  405d48:	00001932 	.word	0x00001932
  405d4c:	0e00008b 	.word	0x0e00008b
  405d50:	32800008 	.word	0x32800008
  405d54:	030a0205 	.word	0x030a0205
  405d58:	0f022003 	.word	0x0f022003
  405d5c:	00000a0f 	.word	0x00000a0f
  405d60:	18180000 	.word	0x18180000
  405d64:	00002020 	.word	0x00002020
  405d68:	0a000000 	.word	0x0a000000
  405d6c:	02020000 	.word	0x02020000
  405d70:	18180000 	.word	0x18180000
  405d74:	00030000 	.word	0x00030000
  405d78:	00000000 	.word	0x00000000
  405d7c:	18010002 	.word	0x18010002
  405d80:	1e1e1e1e 	.word	0x1e1e1e1e
  405d84:	1e1e1e1e 	.word	0x1e1e1e1e
  405d88:	1e1e1e1e 	.word	0x1e1e1e1e
  405d8c:	00001e1e 	.word	0x00001e1e
	...

00405da0 <_global_impure_ptr>:
  405da0:	20400030 33323130 37363534 42413938     0.@ 0123456789AB
  405db0:	46454443 00000000 33323130 37363534     CDEF....01234567
  405dc0:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  405dd0:	0000296c                                l)..

00405dd4 <blanks.7217>:
  405dd4:	20202020 20202020 20202020 20202020                     

00405de4 <zeroes.7218>:
  405de4:	30303030 30303030 30303030 30303030     0000000000000000
  405df4:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00405e04 <_ctype_>:
  405e04:	20202000 20202020 28282020 20282828     .         ((((( 
  405e14:	20202020 20202020 20202020 20202020                     
  405e24:	10108820 10101010 10101010 10101010      ...............
  405e34:	04040410 04040404 10040404 10101010     ................
  405e44:	41411010 41414141 01010101 01010101     ..AAAAAA........
  405e54:	01010101 01010101 01010101 10101010     ................
  405e64:	42421010 42424242 02020202 02020202     ..BBBBBB........
  405e74:	02020202 02020202 02020202 10101010     ................
  405e84:	00000020 00000000 00000000 00000000      ...............
	...

00405f08 <_init>:
  405f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405f0a:	bf00      	nop
  405f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405f0e:	bc08      	pop	{r3}
  405f10:	469e      	mov	lr, r3
  405f12:	4770      	bx	lr

00405f14 <__init_array_start>:
  405f14:	00404441 	.word	0x00404441

00405f18 <__frame_dummy_init_array_entry>:
  405f18:	00400165                                e.@.

00405f1c <_fini>:
  405f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405f1e:	bf00      	nop
  405f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405f22:	bc08      	pop	{r3}
  405f24:	469e      	mov	lr, r3
  405f26:	4770      	bx	lr

00405f28 <__fini_array_start>:
  405f28:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <fillBuffer>:
2040000c:	0dac 2040                                   ..@ 

20400010 <inBuffer>:
20400010:	65ac 2040                                   .e@ 

20400014 <inPingMode>:
20400014:	0001 0000                                   ....

20400018 <outBuffer>:
20400018:	35ac 2040                                   .5@ 

2040001c <outPingMode>:
2040001c:	0001 0000                                   ....

20400020 <processBuffer>:
20400020:	45ac 2040                                   .E@ 

20400024 <processPingMode>:
20400024:	0101                                             .

20400025 <g_interrupt_enabled>:
20400025:	0001 0000                                        ...

20400028 <SystemCoreClock>:
20400028:	0900 003d                                   ..=.

2040002c <_impure_ptr>:
2040002c:	0030 2040                                   0.@ 

20400030 <impure_data>:
20400030:	0000 0000 031c 2040 0384 2040 03ec 2040     ......@ ..@ ..@ 
	...
204000d8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400458 <__malloc_av_>:
	...
20400460:	0458 2040 0458 2040 0460 2040 0460 2040     X.@ X.@ `.@ `.@ 
20400470:	0468 2040 0468 2040 0470 2040 0470 2040     h.@ h.@ p.@ p.@ 
20400480:	0478 2040 0478 2040 0480 2040 0480 2040     x.@ x.@ ..@ ..@ 
20400490:	0488 2040 0488 2040 0490 2040 0490 2040     ..@ ..@ ..@ ..@ 
204004a0:	0498 2040 0498 2040 04a0 2040 04a0 2040     ..@ ..@ ..@ ..@ 
204004b0:	04a8 2040 04a8 2040 04b0 2040 04b0 2040     ..@ ..@ ..@ ..@ 
204004c0:	04b8 2040 04b8 2040 04c0 2040 04c0 2040     ..@ ..@ ..@ ..@ 
204004d0:	04c8 2040 04c8 2040 04d0 2040 04d0 2040     ..@ ..@ ..@ ..@ 
204004e0:	04d8 2040 04d8 2040 04e0 2040 04e0 2040     ..@ ..@ ..@ ..@ 
204004f0:	04e8 2040 04e8 2040 04f0 2040 04f0 2040     ..@ ..@ ..@ ..@ 
20400500:	04f8 2040 04f8 2040 0500 2040 0500 2040     ..@ ..@ ..@ ..@ 
20400510:	0508 2040 0508 2040 0510 2040 0510 2040     ..@ ..@ ..@ ..@ 
20400520:	0518 2040 0518 2040 0520 2040 0520 2040     ..@ ..@  .@  .@ 
20400530:	0528 2040 0528 2040 0530 2040 0530 2040     (.@ (.@ 0.@ 0.@ 
20400540:	0538 2040 0538 2040 0540 2040 0540 2040     8.@ 8.@ @.@ @.@ 
20400550:	0548 2040 0548 2040 0550 2040 0550 2040     H.@ H.@ P.@ P.@ 
20400560:	0558 2040 0558 2040 0560 2040 0560 2040     X.@ X.@ `.@ `.@ 
20400570:	0568 2040 0568 2040 0570 2040 0570 2040     h.@ h.@ p.@ p.@ 
20400580:	0578 2040 0578 2040 0580 2040 0580 2040     x.@ x.@ ..@ ..@ 
20400590:	0588 2040 0588 2040 0590 2040 0590 2040     ..@ ..@ ..@ ..@ 
204005a0:	0598 2040 0598 2040 05a0 2040 05a0 2040     ..@ ..@ ..@ ..@ 
204005b0:	05a8 2040 05a8 2040 05b0 2040 05b0 2040     ..@ ..@ ..@ ..@ 
204005c0:	05b8 2040 05b8 2040 05c0 2040 05c0 2040     ..@ ..@ ..@ ..@ 
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 

20400860 <__malloc_sbrk_base>:
20400860:	ffff ffff                                   ....

20400864 <__malloc_trim_threshold>:
20400864:	0000 0002                                   ....

20400868 <__atexit_recursive_mutex>:
20400868:	6dc4 2040                                   .m@ 

2040086c <__global_locale>:
2040086c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040088c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008ac:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008cc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008ec:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040090c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040092c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040094c:	5761 0040 4ec9 0040 0000 0000 5e04 0040     aW@..N@......^@.
2040095c:	5e00 0040 5db4 0040 5db4 0040 5db4 0040     .^@..]@..]@..]@.
2040096c:	5db4 0040 5db4 0040 5db4 0040 5db4 0040     .]@..]@..]@..]@.
2040097c:	5db4 0040 5db4 0040 ffff ffff ffff ffff     .]@..]@.........
2040098c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009b4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
