
GatorScribe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000082b8  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004082b8  004082b8  000182b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a00  20400000  004082c0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000468b8  20404000  00410000  00024000  2**14
                  ALLOC
  4 .stack        00002000  2044a8b8  004568b8  00024000  2**0
                  ALLOC
  5 .heap         00000200  2044c8b8  004588b8  00024000  2**0
                  ALLOC
  6 .ARM.attributes 0000002c  00000000  00000000  00020a00  2**0
                  CONTENTS, READONLY
  7 .comment      000000b4  00000000  00000000  00020a2c  2**0
                  CONTENTS, READONLY
  8 .debug_info   00020cea  00000000  00000000  00020ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004c38  00000000  00000000  000417ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000ab2e  00000000  00000000  00046402  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d10  00000000  00000000  00050f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002268  00000000  00000000  00051c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00025d78  00000000  00000000  00053ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001505b  00000000  00000000  00079c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009d49a  00000000  00000000  0008ec7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002c9c  00000000  00000000  0012c118  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	b8 c8 44 20 f5 22 40 00 ed 22 40 00 f1 22 40 00     ..D ."@.."@.."@.
  400010:	ed 22 40 00 ed 22 40 00 ed 22 40 00 00 00 00 00     ."@.."@.."@.....
	...
  40002c:	ed 22 40 00 ed 22 40 00 00 00 00 00 ed 22 40 00     ."@.."@......"@.
  40003c:	ed 22 40 00 ed 22 40 00 ed 22 40 00 ed 22 40 00     ."@.."@.."@.."@.
  40004c:	ed 22 40 00 ed 22 40 00 ed 22 40 00 ed 22 40 00     ."@.."@.."@.."@.
  40005c:	ed 22 40 00 ed 22 40 00 00 00 00 00 2d 1d 40 00     ."@.."@.....-.@.
  40006c:	f9 1d 40 00 c5 1e 40 00 ed 22 40 00 81 25 40 00     ..@...@.."@..%@.
  40007c:	ed 22 40 00 91 1f 40 00 5d 20 40 00 ed 22 40 00     ."@...@.] @.."@.
  40008c:	ed 22 40 00 ed 22 40 00 ed 22 40 00 ed 22 40 00     ."@.."@.."@.."@.
  40009c:	ed 22 40 00 ed 22 40 00 ed 22 40 00 ed 22 40 00     ."@.."@.."@.."@.
  4000ac:	ed 22 40 00 ed 22 40 00 ed 22 40 00 ed 22 40 00     ."@.."@.."@.."@.
  4000bc:	ed 22 40 00 ed 22 40 00 ed 22 40 00 ed 22 40 00     ."@.."@.."@.."@.
  4000cc:	ed 22 40 00 00 00 00 00 ed 22 40 00 00 00 00 00     ."@......"@.....
  4000dc:	ed 22 40 00 ed 22 40 00 ed 22 40 00 ed 22 40 00     ."@.."@.."@.."@.
  4000ec:	ed 22 40 00 ed 22 40 00 ed 22 40 00 ed 22 40 00     ."@.."@.."@.."@.
  4000fc:	ed 22 40 00 ed 22 40 00 ed 22 40 00 ed 22 40 00     ."@.."@.."@.."@.
  40010c:	ed 22 40 00 ed 22 40 00 ed 22 40 00 00 00 00 00     ."@.."@.."@.....
  40011c:	00 00 00 00 ed 22 40 00 ed 22 40 00 ad 01 40 00     ....."@.."@...@.
  40012c:	ed 22 40 00 ed 22 40 00 00 00 00 00 ed 22 40 00     ."@.."@......"@.
  40013c:	ed 22 40 00                                         ."@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20404000 	.word	0x20404000
  40015c:	00000000 	.word	0x00000000
  400160:	004082c0 	.word	0x004082c0

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	004082c0 	.word	0x004082c0
  4001a0:	20404004 	.word	0x20404004
  4001a4:	004082c0 	.word	0x004082c0
  4001a8:	00000000 	.word	0x00000000

004001ac <XDMAC_Handler>:
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4001ac:	4b1d      	ldr	r3, [pc, #116]	; (400224 <XDMAC_Handler+0x78>)
/********************************** Public Variables End **********************************/

#define One_over_max_int16 0.0000305185f 
/******************************* XDMAC Interrupt Handler Start *******************************/ 
void XDMAC_Handler(void)
{
  4001ae:	b470      	push	{r4, r5, r6}
  4001b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    uint32_t dma_status;
    
    dma_status = xdmac_channel_get_interrupt_status(XDMAC, XDMA_CH_SSC_RX);
    if (dma_status & XDMAC_CIS_BIS)
  4001b2:	07da      	lsls	r2, r3, #31
  4001b4:	d522      	bpl.n	4001fc <XDMAC_Handler+0x50>
    {
		// update input buffer to be used 
		if(inPingMode)
  4001b6:	4c1c      	ldr	r4, [pc, #112]	; (400228 <XDMAC_Handler+0x7c>)
		{
			inBuffer = inPingBuffer; 
		}
		else 
		{
			inBuffer = inPongBuffer; 
  4001b8:	4a1c      	ldr	r2, [pc, #112]	; (40022c <XDMAC_Handler+0x80>)
		if(inPingMode)
  4001ba:	7821      	ldrb	r1, [r4, #0]
			inBuffer = inPongBuffer; 
  4001bc:	4b1c      	ldr	r3, [pc, #112]	; (400230 <XDMAC_Handler+0x84>)
		}
		inPingMode = !inPingMode; 
  4001be:	7825      	ldrb	r5, [r4, #0]
			inBuffer = inPongBuffer; 
  4001c0:	2900      	cmp	r1, #0
  4001c2:	bf08      	it	eq
  4001c4:	4613      	moveq	r3, r2
  4001c6:	4a1b      	ldr	r2, [pc, #108]	; (400234 <XDMAC_Handler+0x88>)
		inPingMode = !inPingMode; 
  4001c8:	f085 0501 	eor.w	r5, r5, #1
  4001cc:	4e1a      	ldr	r6, [pc, #104]	; (400238 <XDMAC_Handler+0x8c>)
  4001ce:	4619      	mov	r1, r3
  4001d0:	f502 5080 	add.w	r0, r2, #4096	; 0x1000
		
		// fill process buffer - only left channel 
		uint32_t processIdx = 0; 
		for(uint32_t i = 0; i < IO_BUF_SIZE; i+=2, processIdx++)
		{
			processBuffer[processIdx] = ((float )(int16_t)inBuffer[i]) * One_over_max_int16; 
  4001d4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 40023c <XDMAC_Handler+0x90>
		inPingMode = !inPingMode; 
  4001d8:	7025      	strb	r5, [r4, #0]
  4001da:	6033      	str	r3, [r6, #0]
			processBuffer[processIdx] = ((float )(int16_t)inBuffer[i]) * One_over_max_int16; 
  4001dc:	f831 3b04 	ldrh.w	r3, [r1], #4
  4001e0:	b21b      	sxth	r3, r3
  4001e2:	ee07 3a90 	vmov	s15, r3
  4001e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4001ea:	ee67 7a87 	vmul.f32	s15, s15, s14
  4001ee:	ece2 7a01 	vstmia	r2!, {s15}
		for(uint32_t i = 0; i < IO_BUF_SIZE; i+=2, processIdx++)
  4001f2:	4282      	cmp	r2, r0
  4001f4:	d1f2      	bne.n	4001dc <XDMAC_Handler+0x30>
		}
		
		// data is ready to be processed in the main 
		dataReceived = true; 
  4001f6:	4b12      	ldr	r3, [pc, #72]	; (400240 <XDMAC_Handler+0x94>)
  4001f8:	2201      	movs	r2, #1
  4001fa:	701a      	strb	r2, [r3, #0]
  4001fc:	4b09      	ldr	r3, [pc, #36]	; (400224 <XDMAC_Handler+0x78>)
  4001fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    }
	
	dma_status = xdmac_channel_get_interrupt_status(XDMAC, XDMA_CH_SSC_TX);
	if (dma_status & XDMAC_CIS_BIS)
  400202:	07db      	lsls	r3, r3, #31
  400204:	d50c      	bpl.n	400220 <XDMAC_Handler+0x74>
	{
		// update output buffer to be used 
		if(outPingMode)
  400206:	4b0f      	ldr	r3, [pc, #60]	; (400244 <XDMAC_Handler+0x98>)
		{   
			outBuffer = outPingBuffer; 
		}
		else
		{
			outBuffer = outPongBuffer; 
  400208:	480f      	ldr	r0, [pc, #60]	; (400248 <XDMAC_Handler+0x9c>)
		if(outPingMode)
  40020a:	781c      	ldrb	r4, [r3, #0]
			outBuffer = outPongBuffer; 
  40020c:	490f      	ldr	r1, [pc, #60]	; (40024c <XDMAC_Handler+0xa0>)
		}
		outPingMode = !outPingMode; 
  40020e:	781a      	ldrb	r2, [r3, #0]
			outBuffer = outPongBuffer; 
  400210:	2c00      	cmp	r4, #0
  400212:	bf08      	it	eq
  400214:	4601      	moveq	r1, r0
  400216:	480e      	ldr	r0, [pc, #56]	; (400250 <XDMAC_Handler+0xa4>)
		outPingMode = !outPingMode; 
  400218:	f082 0201 	eor.w	r2, r2, #1
  40021c:	6001      	str	r1, [r0, #0]
  40021e:	701a      	strb	r2, [r3, #0]
	}
}
  400220:	bc70      	pop	{r4, r5, r6}
  400222:	4770      	bx	lr
  400224:	40078000 	.word	0x40078000
  400228:	20400010 	.word	0x20400010
  40022c:	20445800 	.word	0x20445800
  400230:	20449800 	.word	0x20449800
  400234:	20446800 	.word	0x20446800
  400238:	2040000c 	.word	0x2040000c
  40023c:	380000fd 	.word	0x380000fd
  400240:	2040401c 	.word	0x2040401c
  400244:	20400018 	.word	0x20400018
  400248:	20448800 	.word	0x20448800
  40024c:	20447800 	.word	0x20447800
  400250:	20400014 	.word	0x20400014

00400254 <configure_xdma>:
/******************************* XDMAC Interrupt Handler End *******************************/

/********************************** Public Functions Start **********************************/
void configure_xdma(void)
{
  400254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint16_t *src;
    
    xdmac_channel_config_t xdmac_channel_cfg = {0};
  400258:	2620      	movs	r6, #32
{
  40025a:	b088      	sub	sp, #32
    xdmac_channel_config_t xdmac_channel_cfg = {0};
  40025c:	2100      	movs	r1, #0
  40025e:	4b30      	ldr	r3, [pc, #192]	; (400320 <configure_xdma+0xcc>)
  400260:	4632      	mov	r2, r6
  400262:	4668      	mov	r0, sp
  400264:	4798      	blx	r3
    
    /* Initialize and enable DMA controller */
    pmc_enable_periph_clk(ID_XDMAC);
  400266:	4b2f      	ldr	r3, [pc, #188]	; (400324 <configure_xdma+0xd0>)
  400268:	203a      	movs	r0, #58	; 0x3a
    | XDMAC_CC_DIF_AHB_IF0
    | XDMAC_CC_SAM_FIXED_AM
    | XDMAC_CC_DAM_INCREMENTED_AM
    | XDMAC_CC_PERID(33);
	
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  40026a:	4c2f      	ldr	r4, [pc, #188]	; (400328 <configure_xdma+0xd4>)
    pmc_enable_periph_clk(ID_XDMAC);
  40026c:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40026e:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
  400272:	4b2e      	ldr	r3, [pc, #184]	; (40032c <configure_xdma+0xd8>)
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  400274:	466a      	mov	r2, sp
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  400276:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 400340 <configure_xdma+0xec>
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  40027a:	4620      	mov	r0, r4
  40027c:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
  400280:	2100      	movs	r1, #0
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400282:	f883 633a 	strb.w	r6, [r3, #826]	; 0x33a
 */
static inline void xdmac_channel_set_descriptor_control(Xdmac *xdmac, uint32_t channel_num, uint32_t config)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  400286:	270f      	movs	r7, #15
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400288:	605d      	str	r5, [r3, #4]
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  40028a:	2501      	movs	r5, #1
  40028c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 400344 <configure_xdma+0xf0>
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  400290:	f8cd e00c 	str.w	lr, [sp, #12]
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  400294:	47c0      	blx	r8
    
    /* Initialize linked list descriptor */
    src = (uint16_t *)&inPingBuffer[0];
    linklist_read[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  400296:	4b26      	ldr	r3, [pc, #152]	; (400330 <configure_xdma+0xdc>)
    | XDMAC_CC_DIF_AHB_IF1
    | XDMAC_CC_SAM_INCREMENTED_AM
    | XDMAC_CC_DAM_FIXED_AM
    | XDMAC_CC_PERID(32);
	
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  400298:	466a      	mov	r2, sp
    linklist_read[0].mbr_da = (uint32_t)(src);
  40029a:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 400348 <configure_xdma+0xf4>
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  40029e:	4629      	mov	r1, r5
    linklist_read[0].mbr_nda = (uint32_t)&linklist_read[1];
  4002a0:	f103 0010 	add.w	r0, r3, #16
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  4002a4:	f023 0603 	bic.w	r6, r3, #3
	linklist_read[1].mbr_da = (uint32_t)(src);
  4002a8:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 40034c <configure_xdma+0xf8>
    linklist_read[0].mbr_nda = (uint32_t)&linklist_read[1];
  4002ac:	6018      	str	r0, [r3, #0]
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  4002ae:	4620      	mov	r0, r4
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  4002b0:	66e7      	str	r7, [r4, #108]	; 0x6c
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  4002b2:	66a6      	str	r6, [r4, #104]	; 0x68
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  4002b4:	60e5      	str	r5, [r4, #12]
    linklist_read[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002b6:	4e1f      	ldr	r6, [pc, #124]	; (400334 <configure_xdma+0xe0>)
	xdmac->XDMAC_CHID[channel_num].XDMAC_CIE = mask;
  4002b8:	6525      	str	r5, [r4, #80]	; 0x50
    linklist_read[0].mbr_da = (uint32_t)(src);
  4002ba:	f8c3 e00c 	str.w	lr, [r3, #12]
    linklist_read[0].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  4002be:	f8df e090 	ldr.w	lr, [pc, #144]	; 400350 <configure_xdma+0xfc>
	linklist_read[1].mbr_da = (uint32_t)(src);
  4002c2:	f8c3 c01c 	str.w	ip, [r3, #28]
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4002c6:	f8df c08c 	ldr.w	ip, [pc, #140]	; 400354 <configure_xdma+0x100>
    linklist_read[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002ca:	605e      	str	r6, [r3, #4]
	linklist_read[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002cc:	615e      	str	r6, [r3, #20]
    linklist_read[0].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  4002ce:	f8c3 e008 	str.w	lr, [r3, #8]
	linklist_read[1].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  4002d2:	f8c3 e018 	str.w	lr, [r3, #24]
	linklist_read[1].mbr_nda = (uint32_t)&linklist_read[0];
  4002d6:	611b      	str	r3, [r3, #16]
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4002d8:	f8cd c00c 	str.w	ip, [sp, #12]
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  4002dc:	47c0      	blx	r8
    
    src = (uint16_t *)&outPingBuffer[0];
    linklist_write[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002de:	4b16      	ldr	r3, [pc, #88]	; (400338 <configure_xdma+0xe4>)
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  4002e0:	2102      	movs	r1, #2
		 | XDMAC_UBC_NDE_FETCH_EN
		 | XDMAC_UBC_NSEN_UPDATED
			| XDMAC_CUBC_UBLEN(IO_BUF_SIZE);
    linklist_write[0].mbr_sa = (uint32_t)(src);
    linklist_write[0].mbr_da = (uint32_t)&(SSC->SSC_THR);
  4002e2:	4a16      	ldr	r2, [pc, #88]	; (40033c <configure_xdma+0xe8>)
    linklist_write[0].mbr_sa = (uint32_t)(src);
  4002e4:	f8df c070 	ldr.w	ip, [pc, #112]	; 400358 <configure_xdma+0x104>
    linklist_write[0].mbr_nda = (uint32_t)&linklist_write[1];
  4002e8:	f103 0810 	add.w	r8, r3, #16
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  4002ec:	f023 0003 	bic.w	r0, r3, #3
	src = (uint16_t *)&outPongBuffer[0];
	linklist_write[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
	    | XDMAC_UBC_NDE_FETCH_EN
	    | XDMAC_UBC_NSEN_UPDATED
	    | XDMAC_CUBC_UBLEN(IO_BUF_SIZE);
	linklist_write[1].mbr_sa = (uint32_t)(src);
  4002f0:	f8df e068 	ldr.w	lr, [pc, #104]	; 40035c <configure_xdma+0x108>
    linklist_write[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002f4:	605e      	str	r6, [r3, #4]
	linklist_write[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002f6:	615e      	str	r6, [r3, #20]
	linklist_write[1].mbr_da = (uint32_t)&(SSC->SSC_THR);
	linklist_write[1].mbr_nda = (uint32_t)&linklist_write[0];
  4002f8:	611b      	str	r3, [r3, #16]
    linklist_write[0].mbr_nda = (uint32_t)&linklist_write[1];
  4002fa:	f8c3 8000 	str.w	r8, [r3]
    linklist_write[0].mbr_sa = (uint32_t)(src);
  4002fe:	f8c3 c008 	str.w	ip, [r3, #8]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  400302:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
	linklist_write[1].mbr_sa = (uint32_t)(src);
  400306:	f8c3 e018 	str.w	lr, [r3, #24]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  40030a:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
    linklist_write[0].mbr_da = (uint32_t)&(SSC->SSC_THR);
  40030e:	60da      	str	r2, [r3, #12]
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  400310:	60e1      	str	r1, [r4, #12]
	linklist_write[1].mbr_da = (uint32_t)&(SSC->SSC_THR);
  400312:	61da      	str	r2, [r3, #28]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CIE = mask;
  400314:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
    xdmac_channel_set_descriptor_addr(XDMAC, XDMA_CH_SSC_TX, (uint32_t)(&linklist_write[0]), 0);
    
    xdmac_enable_interrupt(XDMAC, XDMA_CH_SSC_TX);
    xdmac_channel_enable_interrupt(XDMAC, XDMA_CH_SSC_TX, XDMAC_CIE_BIE);
    
}
  400318:	b008      	add	sp, #32
  40031a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40031e:	bf00      	nop
  400320:	00404ff9 	.word	0x00404ff9
  400324:	00402229 	.word	0x00402229
  400328:	40078000 	.word	0x40078000
  40032c:	e000e100 	.word	0xe000e100
  400330:	20404020 	.word	0x20404020
  400334:	0b000800 	.word	0x0b000800
  400338:	20404040 	.word	0x20404040
  40033c:	40004024 	.word	0x40004024
  400340:	21042801 	.word	0x21042801
  400344:	004016a5 	.word	0x004016a5
  400348:	20449800 	.word	0x20449800
  40034c:	20445800 	.word	0x20445800
  400350:	40004020 	.word	0x40004020
  400354:	20014811 	.word	0x20014811
  400358:	20447800 	.word	0x20447800
  40035c:	20448800 	.word	0x20448800

00400360 <audio_init>:
#include "DMA_Audio.h"
#include "WM8904_Driver.h"
#include "ASF/sam/utils/cmsis/samv71/include/component/supc.h"

void audio_init(void)
{
  400360:	b510      	push	{r4, lr}
	/* Initialize WM8904 TWI interface*/
	if (wm8904_twi_init() != TWIHS_SUCCESS) {
  400362:	4b13      	ldr	r3, [pc, #76]	; (4003b0 <audio_init+0x50>)
  400364:	4798      	blx	r3
  400366:	b118      	cbz	r0, 400370 <audio_init+0x10>
		printf("-E-\tWM8904 initialization failed.\r");
  400368:	4812      	ldr	r0, [pc, #72]	; (4003b4 <audio_init+0x54>)
  40036a:	4b13      	ldr	r3, [pc, #76]	; (4003b8 <audio_init+0x58>)
  40036c:	4798      	blx	r3
  40036e:	e7fe      	b.n	40036e <audio_init+0xe>
			/* Capture error */
		}
	}
		
	/* Configure CODEC */
	configure_codec();
  400370:	4b12      	ldr	r3, [pc, #72]	; (4003bc <audio_init+0x5c>)
  400372:	4604      	mov	r4, r0
  400374:	4798      	blx	r3
		
	/* Configure SSC */
	configure_ssc();
  400376:	4b12      	ldr	r3, [pc, #72]	; (4003c0 <audio_init+0x60>)
  400378:	4798      	blx	r3
		
	/* Configure XDMA */
	configure_xdma();
  40037a:	4b12      	ldr	r3, [pc, #72]	; (4003c4 <audio_init+0x64>)
  40037c:	4798      	blx	r3
		
	/* Enable the DAC master clock (MCLK) */
	pmc_pck_set_prescaler(PMC_PCK_2, PMC_MCKR_PRES_CLK_1);
  40037e:	4621      	mov	r1, r4
  400380:	2002      	movs	r0, #2
  400382:	4b11      	ldr	r3, [pc, #68]	; (4003c8 <audio_init+0x68>)
  400384:	4798      	blx	r3
	pmc_pck_set_source(PMC_PCK_2, PMC_MCKR_CSS_SLOW_CLK);
  400386:	4621      	mov	r1, r4
  400388:	2002      	movs	r0, #2
  40038a:	4b10      	ldr	r3, [pc, #64]	; (4003cc <audio_init+0x6c>)
  40038c:	4798      	blx	r3
	pmc_enable_pck(PMC_PCK_2);
  40038e:	2002      	movs	r0, #2
  400390:	4b0f      	ldr	r3, [pc, #60]	; (4003d0 <audio_init+0x70>)
  400392:	4798      	blx	r3
		
	/* Start playing */
	ssc_enable_rx(SSC);
  400394:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400398:	4b0e      	ldr	r3, [pc, #56]	; (4003d4 <audio_init+0x74>)
  40039a:	4798      	blx	r3
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  40039c:	4c0e      	ldr	r4, [pc, #56]	; (4003d8 <audio_init+0x78>)
  40039e:	2201      	movs	r2, #1
	xdmac_channel_enable(XDMAC, XDMA_CH_SSC_RX);
	// might want to enable in the first xdma interrupt (if you care)
	ssc_enable_tx(SSC);
  4003a0:	4b0e      	ldr	r3, [pc, #56]	; (4003dc <audio_init+0x7c>)
  4003a2:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4003a6:	61e2      	str	r2, [r4, #28]
  4003a8:	4798      	blx	r3
  4003aa:	2302      	movs	r3, #2
  4003ac:	61e3      	str	r3, [r4, #28]
  4003ae:	bd10      	pop	{r4, pc}
  4003b0:	0040120d 	.word	0x0040120d
  4003b4:	004076c8 	.word	0x004076c8
  4003b8:	0040492d 	.word	0x0040492d
  4003bc:	004004a5 	.word	0x004004a5
  4003c0:	004003e1 	.word	0x004003e1
  4003c4:	00400255 	.word	0x00400255
  4003c8:	00402271 	.word	0x00402271
  4003cc:	004022a5 	.word	0x004022a5
  4003d0:	004022d9 	.word	0x004022d9
  4003d4:	00401299 	.word	0x00401299
  4003d8:	40078000 	.word	0x40078000
  4003dc:	004012a9 	.word	0x004012a9

004003e0 <configure_ssc>:
#include "WM8904_Driver.h"


/********************************** Public Functions Start **********************************/
void configure_ssc(void)
{
  4003e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	clock_opt_t tx_clk_option, rx_clk_option;
	data_frame_opt_t tx_data_frame_option, rx_data_frame_option;

	/* Initialize clock */
	pmc_enable_periph_clk(ID_SSC);
  4003e4:	4b28      	ldr	r3, [pc, #160]	; (400488 <configure_ssc+0xa8>)
{
  4003e6:	b09c      	sub	sp, #112	; 0x70
	pmc_enable_periph_clk(ID_SSC);
  4003e8:	2016      	movs	r0, #22
	/* Reset SSC */
	ssc_reset(SSC);

	/* Transmitter clock mode configuration. */
	tx_clk_option.ul_cks = SSC_TCMR_CKS_TK;
	tx_clk_option.ul_cko = SSC_TCMR_CKO_NONE;
  4003ea:	2400      	movs	r4, #0
	pmc_enable_periph_clk(ID_SSC);
  4003ec:	4798      	blx	r3
	ssc_reset(SSC);
  4003ee:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4003f2:	4b26      	ldr	r3, [pc, #152]	; (40048c <configure_ssc+0xac>)
	tx_clk_option.ul_cki = 0;
	tx_clk_option.ul_ckg = SSC_TCMR_CKG_CONTINUOUS;
	tx_clk_option.ul_start_sel = SSC_TCMR_START_TF_EDGE;
	tx_clk_option.ul_sttdly = 1;
	tx_clk_option.ul_period = BITS_BY_SLOT - 1;
  4003f4:	250f      	movs	r5, #15
	ssc_reset(SSC);
  4003f6:	4798      	blx	r3
	tx_clk_option.ul_sttdly = 1;
  4003f8:	2601      	movs	r6, #1
	tx_clk_option.ul_start_sel = SSC_TCMR_START_TF_EDGE;
  4003fa:	f44f 68e0 	mov.w	r8, #1792	; 0x700
	tx_clk_option.ul_cks = SSC_TCMR_CKS_TK;
  4003fe:	f04f 0e02 	mov.w	lr, #2
	/* Transmitter frame mode configuration. */
	tx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
	tx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  400402:	2780      	movs	r7, #128	; 0x80
	tx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;
	tx_data_frame_option.ul_fslen_ext = 0;
	tx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
	tx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
	/* Configure the SSC transmitter to I2S mode. */
	ssc_set_transmitter(SSC, &tx_clk_option, &tx_data_frame_option);
  400404:	aa0e      	add	r2, sp, #56	; 0x38
  400406:	4669      	mov	r1, sp
  400408:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40040c:	4b20      	ldr	r3, [pc, #128]	; (400490 <configure_ssc+0xb0>)
	tx_clk_option.ul_cks = SSC_TCMR_CKS_TK;
  40040e:	f8cd e000 	str.w	lr, [sp]
	tx_clk_option.ul_cko = SSC_TCMR_CKO_NONE;
  400412:	9401      	str	r4, [sp, #4]
	tx_clk_option.ul_cki = 0;
  400414:	9402      	str	r4, [sp, #8]
	tx_clk_option.ul_ckg = SSC_TCMR_CKG_CONTINUOUS;
  400416:	9403      	str	r4, [sp, #12]
	tx_data_frame_option.ul_datnb = 0;
  400418:	9410      	str	r4, [sp, #64]	; 0x40
	tx_data_frame_option.ul_fslen_ext = 0;
  40041a:	9412      	str	r4, [sp, #72]	; 0x48
	tx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  40041c:	9413      	str	r4, [sp, #76]	; 0x4c
	tx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  40041e:	9414      	str	r4, [sp, #80]	; 0x50
	tx_clk_option.ul_start_sel = SSC_TCMR_START_TF_EDGE;
  400420:	f8cd 8018 	str.w	r8, [sp, #24]
	tx_clk_option.ul_sttdly = 1;
  400424:	9605      	str	r6, [sp, #20]
	tx_clk_option.ul_period = BITS_BY_SLOT - 1;
  400426:	9504      	str	r5, [sp, #16]
	tx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
  400428:	950e      	str	r5, [sp, #56]	; 0x38
	tx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;
  40042a:	9511      	str	r5, [sp, #68]	; 0x44
	tx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  40042c:	970f      	str	r7, [sp, #60]	; 0x3c
	ssc_set_transmitter(SSC, &tx_clk_option, &tx_data_frame_option);
  40042e:	4798      	blx	r3

	/* Receiver clock mode configuration. */
	rx_clk_option.ul_cks = SSC_RCMR_CKS_TK;
	rx_clk_option.ul_cko = SSC_RCMR_CKO_NONE;
	rx_clk_option.ul_cki = SSC_RCMR_CKI;
  400430:	f04f 0c20 	mov.w	ip, #32
	rx_clk_option.ul_ckg = SSC_RCMR_CKG_CONTINUOUS;
	rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_EDGE;
	rx_clk_option.ul_sttdly = 1;	
	rx_clk_option.ul_period = BITS_BY_SLOT;	
  400434:	f04f 0e10 	mov.w	lr, #16
	rx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;	
	rx_data_frame_option.ul_fslen_ext = 0;
	rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
	rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
	/* Configure the SSC transmitter to I2S mode. */
	ssc_set_receiver(SSC, &rx_clk_option, &rx_data_frame_option);
  400438:	aa15      	add	r2, sp, #84	; 0x54
  40043a:	a907      	add	r1, sp, #28
  40043c:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400440:	4b14      	ldr	r3, [pc, #80]	; (400494 <configure_ssc+0xb4>)
	rx_clk_option.ul_cki = SSC_RCMR_CKI;
  400442:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
	rx_clk_option.ul_period = BITS_BY_SLOT;	
  400446:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
	rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_EDGE;
  40044a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
	rx_clk_option.ul_cks = SSC_RCMR_CKS_TK;
  40044e:	9607      	str	r6, [sp, #28]
	rx_clk_option.ul_cko = SSC_RCMR_CKO_NONE;
  400450:	9408      	str	r4, [sp, #32]
	rx_clk_option.ul_ckg = SSC_RCMR_CKG_CONTINUOUS;
  400452:	940a      	str	r4, [sp, #40]	; 0x28
	rx_clk_option.ul_sttdly = 1;	
  400454:	960c      	str	r6, [sp, #48]	; 0x30
	rx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
  400456:	9515      	str	r5, [sp, #84]	; 0x54
	rx_data_frame_option.ul_msbf = SSC_RFMR_MSBF;
  400458:	9716      	str	r7, [sp, #88]	; 0x58
	rx_data_frame_option.ul_datnb = 0;
  40045a:	9417      	str	r4, [sp, #92]	; 0x5c
	rx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;	
  40045c:	9518      	str	r5, [sp, #96]	; 0x60
	rx_data_frame_option.ul_fslen_ext = 0;
  40045e:	9419      	str	r4, [sp, #100]	; 0x64
	rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  400460:	941a      	str	r4, [sp, #104]	; 0x68
	rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  400462:	941b      	str	r4, [sp, #108]	; 0x6c
	ssc_set_receiver(SSC, &rx_clk_option, &rx_data_frame_option);
  400464:	4798      	blx	r3

	/* Disable transmitter first */
	ssc_disable_tx(SSC);
  400466:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40046a:	4b0b      	ldr	r3, [pc, #44]	; (400498 <configure_ssc+0xb8>)
  40046c:	4798      	blx	r3
	ssc_disable_rx(SSC);
  40046e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400472:	4b0a      	ldr	r3, [pc, #40]	; (40049c <configure_ssc+0xbc>)
  400474:	4798      	blx	r3

	/* Disable All Interrupt */
	ssc_disable_interrupt(SSC, 0xFFFFFFFF);
  400476:	f04f 31ff 	mov.w	r1, #4294967295
  40047a:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40047e:	4b08      	ldr	r3, [pc, #32]	; (4004a0 <configure_ssc+0xc0>)
  400480:	4798      	blx	r3
}
  400482:	b01c      	add	sp, #112	; 0x70
  400484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400488:	00402229 	.word	0x00402229
  40048c:	00401285 	.word	0x00401285
  400490:	0040132d 	.word	0x0040132d
  400494:	004012b9 	.word	0x004012b9
  400498:	004012b1 	.word	0x004012b1
  40049c:	004012a1 	.word	0x004012a1
  4004a0:	004013a1 	.word	0x004013a1

004004a4 <configure_codec>:


void configure_codec(void)
{
  4004a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t data = 0;
	/* check that WM8904 is present */
	wm8904_write_register(WM8904_SW_RESET_AND_ID, 0xFFFF);
  4004a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
  4004ac:	4c3f      	ldr	r4, [pc, #252]	; (4005ac <configure_codec+0x108>)
  4004ae:	2000      	movs	r0, #0
	}

	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS);	
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |	
	WM8904_VMID_RES_FAST | WM8904_VMID_ENA);
	delay_ms(5);
  4004b0:	4e3f      	ldr	r6, [pc, #252]	; (4005b0 <configure_codec+0x10c>)
	wm8904_write_register(WM8904_SW_RESET_AND_ID, 0xFFFF);
  4004b2:	47a0      	blx	r4
	data = wm8904_read_register(WM8904_SW_RESET_AND_ID);
  4004b4:	4b3f      	ldr	r3, [pc, #252]	; (4005b4 <configure_codec+0x110>)
  4004b6:	2000      	movs	r0, #0
	delay_ms(5);
  4004b8:	4d3f      	ldr	r5, [pc, #252]	; (4005b8 <configure_codec+0x114>)
	data = wm8904_read_register(WM8904_SW_RESET_AND_ID);
  4004ba:	4798      	blx	r3
	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS);	
  4004bc:	2108      	movs	r1, #8
  4004be:	2004      	movs	r0, #4
	WM8904_DCS_ENA_CHAN_3 | WM8904_DCS_ENA_CHAN_2 |
	WM8904_DCS_ENA_CHAN_1 | WM8904_DCS_ENA_CHAN_0);
	wm8904_write_register(WM8904_DC_SERVO_1,
	WM8904_DCS_TRIG_STARTUP_3 | WM8904_DCS_TRIG_STARTUP_2 |
	WM8904_DCS_TRIG_STARTUP_1 | WM8904_DCS_TRIG_STARTUP_0);
	delay_ms(100);
  4004c0:	4f3e      	ldr	r7, [pc, #248]	; (4005bc <configure_codec+0x118>)
	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS);	
  4004c2:	47a0      	blx	r4
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |	
  4004c4:	2147      	movs	r1, #71	; 0x47
  4004c6:	2005      	movs	r0, #5
  4004c8:	47a0      	blx	r4
	delay_ms(5);
  4004ca:	4630      	mov	r0, r6
  4004cc:	47a8      	blx	r5
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |
  4004ce:	2143      	movs	r1, #67	; 0x43
  4004d0:	2005      	movs	r0, #5
  4004d2:	47a0      	blx	r4
	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS | WM8904_BIAS_ENA);
  4004d4:	2109      	movs	r1, #9
  4004d6:	2004      	movs	r0, #4
  4004d8:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_0, WM8904_INL_ENA | WM8904_INR_ENA);
  4004da:	2103      	movs	r1, #3
  4004dc:	200c      	movs	r0, #12
  4004de:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_2, WM8904_HPL_PGA_ENA | WM8904_HPR_PGA_ENA);
  4004e0:	2103      	movs	r1, #3
  4004e2:	200e      	movs	r0, #14
  4004e4:	47a0      	blx	r4
	wm8904_write_register(WM8904_DAC_DIGITAL_1, WM8904_DEEMPH(0));
  4004e6:	2100      	movs	r1, #0
  4004e8:	2021      	movs	r0, #33	; 0x21
  4004ea:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_OUT12_ZC, 0x0000);
  4004ec:	2100      	movs	r1, #0
  4004ee:	203d      	movs	r0, #61	; 0x3d
  4004f0:	47a0      	blx	r4
	wm8904_write_register(WM8904_CHARGE_PUMP_0, WM8904_CP_ENA);
  4004f2:	2101      	movs	r1, #1
  4004f4:	2062      	movs	r0, #98	; 0x62
  4004f6:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLASS_W_0, WM8904_CP_DYN_PWR);
  4004f8:	2101      	movs	r1, #1
  4004fa:	2068      	movs	r0, #104	; 0x68
  4004fc:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_1, 0x0000);
  4004fe:	2100      	movs	r1, #0
  400500:	2074      	movs	r0, #116	; 0x74
  400502:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_2, WM8904_FLL_OUTDIV(7)| WM8904_FLL_FRATIO(4));
  400504:	f240 7104 	movw	r1, #1796	; 0x704
  400508:	2075      	movs	r0, #117	; 0x75
  40050a:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_3, WM8904_FLL_K(0x8000));
  40050c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  400510:	2076      	movs	r0, #118	; 0x76
  400512:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_4, WM8904_FLL_N(0xBB));
  400514:	f44f 51bb 	mov.w	r1, #5984	; 0x1760
  400518:	2077      	movs	r0, #119	; 0x77
  40051a:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_1, WM8904_FLL_FRACN_ENA | WM8904_FLL_ENA);
  40051c:	2105      	movs	r1, #5
  40051e:	2074      	movs	r0, #116	; 0x74
  400520:	47a0      	blx	r4
	delay_ms(5);
  400522:	4630      	mov	r0, r6
  400524:	47a8      	blx	r5
	wm8904_write_register(WM8904_CLOCK_RATES_1, WM8904_CLK_SYS_RATE(3) | WM8904_SAMPLE_RATE(SAMPLE_RATE_48k));
  400526:	f640 4105 	movw	r1, #3077	; 0xc05
  40052a:	2015      	movs	r0, #21
  40052c:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLOCK_RATES_0, 0x0000);
  40052e:	2100      	movs	r1, #0
  400530:	2014      	movs	r0, #20
  400532:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLOCK_RATES_2,
  400534:	f244 0106 	movw	r1, #16390	; 0x4006
  400538:	2016      	movs	r0, #22
  40053a:	47a0      	blx	r4
	wm8904_write_register(WM8904_AUDIO_INTERFACE_0, WM8904_DAC_BOOST(1)); 
  40053c:	f44f 7100 	mov.w	r1, #512	; 0x200
  400540:	2018      	movs	r0, #24
  400542:	47a0      	blx	r4
	wm8904_write_register(WM8904_AUDIO_INTERFACE_1, WM8904_BCLK_DIR | WM8904_AIF_FMT_I2S); 
  400544:	2142      	movs	r1, #66	; 0x42
  400546:	2019      	movs	r0, #25
  400548:	47a0      	blx	r4
	wm8904_write_register(WM8904_AUDIO_INTERFACE_2, WM8904_BCLK_DIV(8));
  40054a:	2108      	movs	r1, #8
  40054c:	201a      	movs	r0, #26
  40054e:	47a0      	blx	r4
	wm8904_write_register(WM8904_AUDIO_INTERFACE_3, WM8904_LRCLK_DIR | WM8904_LRCLK_RATE(0x20));
  400550:	f44f 6102 	mov.w	r1, #2080	; 0x820
  400554:	201b      	movs	r0, #27
  400556:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_6,
  400558:	210f      	movs	r1, #15
  40055a:	2012      	movs	r0, #18
  40055c:	47a0      	blx	r4
	delay_ms(5);
  40055e:	4630      	mov	r0, r6
  400560:	47a8      	blx	r5
	wm8904_write_register(WM8904_ANALOGUE_LEFT_INPUT_0, WM8904_LIN_VOL(0x10));
  400562:	2110      	movs	r1, #16
  400564:	202c      	movs	r0, #44	; 0x2c
  400566:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_RIGHT_INPUT_0, WM8904_RIN_VOL(0x10));
  400568:	2110      	movs	r1, #16
  40056a:	202d      	movs	r0, #45	; 0x2d
  40056c:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  40056e:	2111      	movs	r1, #17
  400570:	205a      	movs	r0, #90	; 0x5a
  400572:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  400574:	2133      	movs	r1, #51	; 0x33
  400576:	205a      	movs	r0, #90	; 0x5a
  400578:	47a0      	blx	r4
	wm8904_write_register(WM8904_DC_SERVO_0,
  40057a:	210f      	movs	r1, #15
  40057c:	2043      	movs	r0, #67	; 0x43
  40057e:	47a0      	blx	r4
	wm8904_write_register(WM8904_DC_SERVO_1,
  400580:	21f0      	movs	r1, #240	; 0xf0
  400582:	2044      	movs	r0, #68	; 0x44
  400584:	47a0      	blx	r4
	delay_ms(100);
  400586:	4638      	mov	r0, r7
  400588:	47a8      	blx	r5
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  40058a:	2177      	movs	r1, #119	; 0x77
  40058c:	205a      	movs	r0, #90	; 0x5a
  40058e:	47a0      	blx	r4
	WM8904_HPL_ENA_OUTP | WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_ENA_OUTP | WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  400590:	21ff      	movs	r1, #255	; 0xff
  400592:	205a      	movs	r0, #90	; 0x5a
  400594:	47a0      	blx	r4
	WM8904_HPL_RMV_SHORT | WM8904_HPL_ENA_OUTP | WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_RMV_SHORT | WM8904_HPR_ENA_OUTP | WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_OUT1_LEFT, WM8904_HPOUT_VU | WM8904_HPOUTL_VOL(0x3C));
  400596:	21bc      	movs	r1, #188	; 0xbc
  400598:	2039      	movs	r0, #57	; 0x39
  40059a:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_OUT1_RIGHT, WM8904_HPOUT_VU | WM8904_HPOUTR_VOL(0x3C));
  40059c:	203a      	movs	r0, #58	; 0x3a
  40059e:	21bc      	movs	r1, #188	; 0xbc
  4005a0:	47a0      	blx	r4
	delay_ms(100);
  4005a2:	4638      	mov	r0, r7
  4005a4:	462b      	mov	r3, r5
}
  4005a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	delay_ms(100);
  4005aa:	4718      	bx	r3
  4005ac:	00401195 	.word	0x00401195
  4005b0:	0003dbc2 	.word	0x0003dbc2
  4005b4:	004011d1 	.word	0x004011d1
  4005b8:	20400001 	.word	0x20400001
  4005bc:	004d2b25 	.word	0x004d2b25

004005c0 <computeWaveletPitch>:
{
	float pitchF = 0.0f;
	int32_t i, j;
	float si, si1;
	
	arm_copy_f32(samples, sam, WIN_SIZE); 
  4005c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4005c4:	499e      	ldr	r1, [pc, #632]	; (400840 <computeWaveletPitch+0x280>)
  4005c6:	4b9f      	ldr	r3, [pc, #636]	; (400844 <computeWaveletPitch+0x284>)
	
	return pitchF;
}

float computeWaveletPitch(float * samples)
{
  4005c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int32_t curSamNb = WIN_SIZE;
  4005cc:	4692      	mov	sl, r2
	int32_t curLevel = 0;
  4005ce:	2400      	movs	r4, #0
		memset(distances, 0, WIN_SIZE*sizeof(int32_t));
  4005d0:	f8df b290 	ldr.w	fp, [pc, #656]	; 400864 <computeWaveletPitch+0x2a4>
{
  4005d4:	ed2d 8b04 	vpush	{d8-d9}
  4005d8:	b087      	sub	sp, #28
	float curModeDistance = -1.0f;
  4005da:	eeff 9a00 	vmov.f32	s19, #240	; 0xbf800000 -1.0
	arm_copy_f32(samples, sam, WIN_SIZE); 
  4005de:	4798      	blx	r3
		arm_max_f32(sam, WIN_SIZE, &maxValue, &temp_idx); 
  4005e0:	4651      	mov	r1, sl
  4005e2:	ab02      	add	r3, sp, #8
  4005e4:	aa03      	add	r2, sp, #12
  4005e6:	4896      	ldr	r0, [pc, #600]	; (400840 <computeWaveletPitch+0x280>)
	int32_t curLevel = 0;
  4005e8:	9400      	str	r4, [sp, #0]
		arm_max_f32(sam, WIN_SIZE, &maxValue, &temp_idx); 
  4005ea:	4c97      	ldr	r4, [pc, #604]	; (400848 <computeWaveletPitch+0x288>)
  4005ec:	47a0      	blx	r4
		arm_min_f32(sam, WIN_SIZE, &minValue, &temp_idx); 
  4005ee:	ab02      	add	r3, sp, #8
  4005f0:	aa04      	add	r2, sp, #16
  4005f2:	4651      	mov	r1, sl
  4005f4:	4892      	ldr	r0, [pc, #584]	; (400840 <computeWaveletPitch+0x280>)
  4005f6:	4c95      	ldr	r4, [pc, #596]	; (40084c <computeWaveletPitch+0x28c>)
  4005f8:	47a0      	blx	r4
		float theDC = 0.0;
  4005fa:	2300      	movs	r3, #0
  4005fc:	aa06      	add	r2, sp, #24
		arm_mean_f32(sam, WIN_SIZE, &theDC); 
  4005fe:	4651      	mov	r1, sl
  400600:	488f      	ldr	r0, [pc, #572]	; (400840 <computeWaveletPitch+0x280>)
		float theDC = 0.0;
  400602:	f842 3d04 	str.w	r3, [r2, #-4]!
		arm_mean_f32(sam, WIN_SIZE, &theDC); 
  400606:	4b92      	ldr	r3, [pc, #584]	; (400850 <computeWaveletPitch+0x290>)
  400608:	4798      	blx	r3
		maxValue = maxValue - theDC;
  40060a:	eddd 6a05 	vldr	s13, [sp, #20]
		minValue = minValue - theDC;
  40060e:	ed9d 7a04 	vldr	s14, [sp, #16]
		ampltitudeThreshold = amplitudeMax*maximaThresholdRatio;		
  400612:	eeb6 6a08 	vmov.f32	s12, #104	; 0x3f400000  0.750
		maxValue = maxValue - theDC;
  400616:	eddd 7a03 	vldr	s15, [sp, #12]
	int32_t res = 1, j;
  40061a:	2301      	movs	r3, #1
		minValue = minValue - theDC;
  40061c:	ee37 7a66 	vsub.f32	s14, s14, s13
		delta = SAMPLE_RATE/(_2power(curLevel)*maxF);
  400620:	eddf 8a8c 	vldr	s17, [pc, #560]	; 400854 <computeWaveletPitch+0x294>
		maxValue = maxValue - theDC;
  400624:	ee77 7ae6 	vsub.f32	s15, s15, s13
		if (curSamNb < 2) return pitchF;
  400628:	ed9f 8a8b 	vldr	s16, [pc, #556]	; 400858 <computeWaveletPitch+0x298>
		float amplitudeMax = (maxValue > -minValue ? maxValue : -minValue);
  40062c:	eeb1 9a47 	vneg.f32	s18, s14
		minValue = minValue - theDC;
  400630:	ed8d 7a04 	vstr	s14, [sp, #16]
		maxValue = maxValue - theDC;
  400634:	edcd 7a03 	vstr	s15, [sp, #12]
		float amplitudeMax = (maxValue > -minValue ? maxValue : -minValue);
  400638:	fec9 7a27 	vmaxnm.f32	s15, s18, s15
		ampltitudeThreshold = amplitudeMax*maximaThresholdRatio;		
  40063c:	ee27 9a86 	vmul.f32	s18, s15, s12
		delta = SAMPLE_RATE/(_2power(curLevel)*maxF);
  400640:	ee07 3a90 	vmov	s15, r3
		if (curSamNb < 2) return pitchF;
  400644:	f1ba 0f01 	cmp.w	sl, #1
		delta = SAMPLE_RATE/(_2power(curLevel)*maxF);
  400648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40064c:	ee88 7aa7 	vdiv.f32	s14, s17, s15
  400650:	eefd 7ac7 	vcvt.s32.f32	s15, s14
  400654:	ee17 4a90 	vmov	r4, s15
		if (curSamNb < 2) return pitchF;
  400658:	f340 8286 	ble.w	400b68 <computeWaveletPitch+0x5a8>
  40065c:	f1ba 0f03 	cmp.w	sl, #3
  400660:	f340 826d 	ble.w	400b3e <computeWaveletPitch+0x57e>
  400664:	f1aa 0e04 	sub.w	lr, sl, #4
  400668:	4b75      	ldr	r3, [pc, #468]	; (400840 <computeWaveletPitch+0x280>)
  40066a:	2000      	movs	r0, #0
  40066c:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 400868 <computeWaveletPitch+0x2a8>
  400670:	f02e 0e01 	bic.w	lr, lr, #1
  400674:	4619      	mov	r1, r3
  400676:	9301      	str	r3, [sp, #4]
  400678:	4602      	mov	r2, r0
  40067a:	edd3 7a00 	vldr	s15, [r3]
  40067e:	f10e 0e03 	add.w	lr, lr, #3
  400682:	4606      	mov	r6, r0
  400684:	4605      	mov	r5, r0
  400686:	46c4      	mov	ip, r8
  400688:	eeb0 7a48 	vmov.f32	s14, s16
  40068c:	2301      	movs	r3, #1
  40068e:	e050      	b.n	400732 <computeWaveletPitch+0x172>
						if (i -1 > lastmaxIndex + delta) 
  400690:	2201      	movs	r2, #1
			si = sam[i]; // - theDC;
  400692:	edd1 7a02 	vldr	s15, [r1, #8]
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
  400696:	eef5 7a40 	vcmp.f32	s15, #0.0
  40069a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40069e:	dd06      	ble.n	4006ae <computeWaveletPitch+0xee>
  4006a0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  4006a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006a8:	d801      	bhi.n	4006ae <computeWaveletPitch+0xee>
  4006aa:	2000      	movs	r0, #0
  4006ac:	2201      	movs	r2, #1
			if (si1 >= 0 && si < 0) {findMin = 1; findMax = 0; }
  4006ae:	eef5 7a40 	vcmp.f32	s15, #0.0
  4006b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006b6:	d506      	bpl.n	4006c6 <computeWaveletPitch+0x106>
  4006b8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  4006bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006c0:	db01      	blt.n	4006c6 <computeWaveletPitch+0x106>
  4006c2:	2001      	movs	r0, #1
  4006c4:	2200      	movs	r2, #0
			if (previousDV > -1000.0f) 
  4006c6:	eeb4 6ac8 	vcmpe.f32	s12, s16
			dv = si - si1;
  4006ca:	ee37 7ae6 	vsub.f32	s14, s15, s13
			if (previousDV > -1000.0f) 
  4006ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006d2:	dd2a      	ble.n	40072a <computeWaveletPitch+0x16a>
				if (findMin && previousDV < 0.0f && dv >= 0.0f) 
  4006d4:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
  4006d8:	f000 0701 	and.w	r7, r0, #1
  4006dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006e0:	bf58      	it	pl
  4006e2:	2700      	movpl	r7, #0
  4006e4:	b1af      	cbz	r7, 400712 <computeWaveletPitch+0x152>
  4006e6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  4006ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006ee:	db10      	blt.n	400712 <computeWaveletPitch+0x152>
					if (Abs(si1) >= ampltitudeThreshold) 
  4006f0:	eef0 5ae6 	vabs.f32	s11, s13
  4006f4:	eeb4 9ae5 	vcmpe.f32	s18, s11
  4006f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006fc:	d809      	bhi.n	400712 <computeWaveletPitch+0x152>
						if (i - 1 > lastMinIndex + delta)
  4006fe:	eb04 070c 	add.w	r7, r4, ip
  400702:	429f      	cmp	r7, r3
  400704:	da05      	bge.n	400712 <computeWaveletPitch+0x152>
							mins[nbMins++] = i - 1;
  400706:	4855      	ldr	r0, [pc, #340]	; (40085c <computeWaveletPitch+0x29c>)
  400708:	469c      	mov	ip, r3
  40070a:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
  40070e:	3501      	adds	r5, #1
							findMin = 0;
  400710:	2000      	movs	r0, #0
				if (findMax && previousDV > 0.0f && dv <= 0.0f) 
  400712:	eeb5 6a40 	vcmp.f32	s12, #0.0
  400716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40071a:	dd06      	ble.n	40072a <computeWaveletPitch+0x16a>
  40071c:	b12a      	cbz	r2, 40072a <computeWaveletPitch+0x16a>
  40071e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  400722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400726:	d96b      	bls.n	400800 <computeWaveletPitch+0x240>
						if (i -1 > lastmaxIndex + delta) 
  400728:	2201      	movs	r2, #1
  40072a:	3302      	adds	r3, #2
  40072c:	3108      	adds	r1, #8
  40072e:	4573      	cmp	r3, lr
  400730:	d07b      	beq.n	40082a <computeWaveletPitch+0x26a>
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
  400732:	eef5 7a40 	vcmp.f32	s15, #0.0
			si = sam[i]; // - theDC;
  400736:	edd1 6a01 	vldr	s13, [r1, #4]
  40073a:	1e5f      	subs	r7, r3, #1
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
  40073c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400740:	d806      	bhi.n	400750 <computeWaveletPitch+0x190>
  400742:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40074a:	dd01      	ble.n	400750 <computeWaveletPitch+0x190>
  40074c:	2000      	movs	r0, #0
  40074e:	2201      	movs	r2, #1
			if (si1 >= 0 && si < 0) {findMin = 1; findMax = 0; }
  400750:	eef5 7a40 	vcmp.f32	s15, #0.0
  400754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400758:	db06      	blt.n	400768 <computeWaveletPitch+0x1a8>
  40075a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  40075e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400762:	d501      	bpl.n	400768 <computeWaveletPitch+0x1a8>
  400764:	2001      	movs	r0, #1
  400766:	2200      	movs	r2, #0
			if (previousDV > -1000.0f) 
  400768:	eeb4 7ac8 	vcmpe.f32	s14, s16
			dv = si - si1;
  40076c:	ee36 6ae7 	vsub.f32	s12, s13, s15
			if (previousDV > -1000.0f) 
  400770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400774:	dd8d      	ble.n	400692 <computeWaveletPitch+0xd2>
				if (findMin && previousDV < 0.0f && dv >= 0.0f) 
  400776:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  40077a:	f000 0901 	and.w	r9, r0, #1
  40077e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400782:	bf58      	it	pl
  400784:	f04f 0900 	movpl.w	r9, #0
  400788:	f1b9 0f00 	cmp.w	r9, #0
  40078c:	d015      	beq.n	4007ba <computeWaveletPitch+0x1fa>
  40078e:	eeb5 6a40 	vcmp.f32	s12, #0.0
  400792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400796:	db10      	blt.n	4007ba <computeWaveletPitch+0x1fa>
					if (Abs(si1) >= ampltitudeThreshold) 
  400798:	eef0 5ae7 	vabs.f32	s11, s15
  40079c:	eeb4 9ae5 	vcmpe.f32	s18, s11
  4007a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4007a4:	d809      	bhi.n	4007ba <computeWaveletPitch+0x1fa>
						if (i - 1 > lastMinIndex + delta)
  4007a6:	eb04 090c 	add.w	r9, r4, ip
  4007aa:	45b9      	cmp	r9, r7
  4007ac:	da05      	bge.n	4007ba <computeWaveletPitch+0x1fa>
							mins[nbMins++] = i - 1;
  4007ae:	482b      	ldr	r0, [pc, #172]	; (40085c <computeWaveletPitch+0x29c>)
  4007b0:	46bc      	mov	ip, r7
  4007b2:	f840 7025 	str.w	r7, [r0, r5, lsl #2]
  4007b6:	3501      	adds	r5, #1
							findMin = 0;
  4007b8:	2000      	movs	r0, #0
				if (findMax && previousDV > 0.0f && dv <= 0.0f) 
  4007ba:	eeb5 7a40 	vcmp.f32	s14, #0.0
  4007be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4007c2:	f77f af66 	ble.w	400692 <computeWaveletPitch+0xd2>
  4007c6:	2a00      	cmp	r2, #0
  4007c8:	f43f af63 	beq.w	400692 <computeWaveletPitch+0xd2>
  4007cc:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
  4007d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4007d4:	f63f af5c 	bhi.w	400690 <computeWaveletPitch+0xd0>
					if (Abs(si1) >= ampltitudeThreshold) 
  4007d8:	eef0 7ae7 	vabs.f32	s15, s15
  4007dc:	eeb4 9ae7 	vcmpe.f32	s18, s15
  4007e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4007e4:	f63f af54 	bhi.w	400690 <computeWaveletPitch+0xd0>
						if (i -1 > lastmaxIndex + delta) 
  4007e8:	eb04 0208 	add.w	r2, r4, r8
  4007ec:	42ba      	cmp	r2, r7
  4007ee:	f6bf af4f 	bge.w	400690 <computeWaveletPitch+0xd0>
							maxs[nbMaxs++] = i - 1;
  4007f2:	4a1b      	ldr	r2, [pc, #108]	; (400860 <computeWaveletPitch+0x2a0>)
  4007f4:	46b8      	mov	r8, r7
  4007f6:	f842 7026 	str.w	r7, [r2, r6, lsl #2]
  4007fa:	3601      	adds	r6, #1
							findMax = 0;
  4007fc:	2200      	movs	r2, #0
  4007fe:	e748      	b.n	400692 <computeWaveletPitch+0xd2>
					if (Abs(si1) >= ampltitudeThreshold) 
  400800:	eef0 6ae6 	vabs.f32	s13, s13
  400804:	eeb4 9ae6 	vcmpe.f32	s18, s13
  400808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40080c:	d88c      	bhi.n	400728 <computeWaveletPitch+0x168>
						if (i -1 > lastmaxIndex + delta) 
  40080e:	eb04 0208 	add.w	r2, r4, r8
  400812:	429a      	cmp	r2, r3
  400814:	da88      	bge.n	400728 <computeWaveletPitch+0x168>
							maxs[nbMaxs++] = i - 1;
  400816:	4a12      	ldr	r2, [pc, #72]	; (400860 <computeWaveletPitch+0x2a0>)
  400818:	4698      	mov	r8, r3
  40081a:	3108      	adds	r1, #8
  40081c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  400820:	3302      	adds	r3, #2
  400822:	3601      	adds	r6, #1
							findMax = 0;
  400824:	2200      	movs	r2, #0
  400826:	4573      	cmp	r3, lr
  400828:	d183      	bne.n	400732 <computeWaveletPitch+0x172>
  40082a:	9f01      	ldr	r7, [sp, #4]
  40082c:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
							mins[nbMins++] = i - 1;
  400830:	f8df 9028 	ldr.w	r9, [pc, #40]	; 40085c <computeWaveletPitch+0x29c>
  400834:	46a6      	mov	lr, r4
  400836:	4419      	add	r1, r3
  400838:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  40083c:	e01c      	b.n	400878 <computeWaveletPitch+0x2b8>
  40083e:	bf00      	nop
  400840:	20407400 	.word	0x20407400
  400844:	00403981 	.word	0x00403981
  400848:	00403b81 	.word	0x00403b81
  40084c:	00403a41 	.word	0x00403a41
  400850:	00403b1d 	.word	0x00403b1d
  400854:	41740000 	.word	0x41740000
  400858:	c47a0000 	.word	0xc47a0000
  40085c:	20406400 	.word	0x20406400
  400860:	20405400 	.word	0x20405400
  400864:	20404400 	.word	0x20404400
  400868:	fff0bdc0 	.word	0xfff0bdc0
						if (i -1 > lastmaxIndex + delta) 
  40086c:	2201      	movs	r2, #1
		for (i = 1; i < curSamNb; i++) 
  40086e:	3301      	adds	r3, #1
			dv = si - si1;
  400870:	eeb0 7a67 	vmov.f32	s14, s15
		for (i = 1; i < curSamNb; i++) 
  400874:	459a      	cmp	sl, r3
  400876:	dd65      	ble.n	400944 <computeWaveletPitch+0x384>
			si = sam[i]; // - theDC;
  400878:	edd1 7a01 	vldr	s15, [r1, #4]
  40087c:	1e5f      	subs	r7, r3, #1
			si1 = sam[i-1]; // - theDC;
  40087e:	ecf1 6a01 	vldmia	r1!, {s13}
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
  400882:	eef5 7a40 	vcmp.f32	s15, #0.0
  400886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40088a:	dd06      	ble.n	40089a <computeWaveletPitch+0x2da>
  40088c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400894:	d801      	bhi.n	40089a <computeWaveletPitch+0x2da>
  400896:	2000      	movs	r0, #0
  400898:	2201      	movs	r2, #1
			if (si1 >= 0 && si < 0) {findMin = 1; findMax = 0; }
  40089a:	eef5 7a40 	vcmp.f32	s15, #0.0
  40089e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008a2:	d506      	bpl.n	4008b2 <computeWaveletPitch+0x2f2>
  4008a4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  4008a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008ac:	db01      	blt.n	4008b2 <computeWaveletPitch+0x2f2>
  4008ae:	2001      	movs	r0, #1
  4008b0:	2200      	movs	r2, #0
			if (previousDV > -1000.0f) 
  4008b2:	eeb4 7ac8 	vcmpe.f32	s14, s16
			dv = si - si1;
  4008b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
			if (previousDV > -1000.0f) 
  4008ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008be:	ddd6      	ble.n	40086e <computeWaveletPitch+0x2ae>
				if (findMin && previousDV < 0.0f && dv >= 0.0f) 
  4008c0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  4008c4:	f000 0401 	and.w	r4, r0, #1
  4008c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008cc:	bf58      	it	pl
  4008ce:	2400      	movpl	r4, #0
  4008d0:	b1a4      	cbz	r4, 4008fc <computeWaveletPitch+0x33c>
  4008d2:	eef5 7a40 	vcmp.f32	s15, #0.0
  4008d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008da:	db0f      	blt.n	4008fc <computeWaveletPitch+0x33c>
					if (Abs(si1) >= ampltitudeThreshold) 
  4008dc:	eeb0 6ae6 	vabs.f32	s12, s13
  4008e0:	eeb4 9ac6 	vcmpe.f32	s18, s12
  4008e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008e8:	d808      	bhi.n	4008fc <computeWaveletPitch+0x33c>
						if (i - 1 > lastMinIndex + delta)
  4008ea:	eb0e 040c 	add.w	r4, lr, ip
  4008ee:	42bc      	cmp	r4, r7
  4008f0:	da04      	bge.n	4008fc <computeWaveletPitch+0x33c>
							mins[nbMins++] = i - 1;
  4008f2:	f849 7025 	str.w	r7, [r9, r5, lsl #2]
  4008f6:	46bc      	mov	ip, r7
  4008f8:	3501      	adds	r5, #1
							findMin = 0;
  4008fa:	2000      	movs	r0, #0
				if (findMax && previousDV > 0.0f && dv <= 0.0f) 
  4008fc:	eeb5 7a40 	vcmp.f32	s14, #0.0
  400900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400904:	ddb3      	ble.n	40086e <computeWaveletPitch+0x2ae>
  400906:	2a00      	cmp	r2, #0
  400908:	d0b1      	beq.n	40086e <computeWaveletPitch+0x2ae>
  40090a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  40090e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400912:	d8ab      	bhi.n	40086c <computeWaveletPitch+0x2ac>
					if (Abs(si1) >= ampltitudeThreshold) 
  400914:	eef0 6ae6 	vabs.f32	s13, s13
  400918:	eeb4 9ae6 	vcmpe.f32	s18, s13
  40091c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400920:	d8a4      	bhi.n	40086c <computeWaveletPitch+0x2ac>
						if (i -1 > lastmaxIndex + delta) 
  400922:	eb0e 0208 	add.w	r2, lr, r8
  400926:	42ba      	cmp	r2, r7
  400928:	daa0      	bge.n	40086c <computeWaveletPitch+0x2ac>
		for (i = 1; i < curSamNb; i++) 
  40092a:	3301      	adds	r3, #1
							maxs[nbMaxs++] = i - 1;
  40092c:	4acf      	ldr	r2, [pc, #828]	; (400c6c <computeWaveletPitch+0x6ac>)
  40092e:	46b8      	mov	r8, r7
			dv = si - si1;
  400930:	eeb0 7a67 	vmov.f32	s14, s15
		for (i = 1; i < curSamNb; i++) 
  400934:	459a      	cmp	sl, r3
							maxs[nbMaxs++] = i - 1;
  400936:	f842 7026 	str.w	r7, [r2, r6, lsl #2]
  40093a:	f106 0601 	add.w	r6, r6, #1
							findMax = 0;
  40093e:	f04f 0200 	mov.w	r2, #0
		for (i = 1; i < curSamNb; i++) 
  400942:	dc99      	bgt.n	400878 <computeWaveletPitch+0x2b8>
  400944:	4674      	mov	r4, lr
		if (nbMins == 0 && nbMaxs == 0) 
  400946:	b915      	cbnz	r5, 40094e <computeWaveletPitch+0x38e>
  400948:	2e00      	cmp	r6, #0
  40094a:	f000 810d 	beq.w	400b68 <computeWaveletPitch+0x5a8>
		memset(distances, 0, WIN_SIZE*sizeof(int32_t));
  40094e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400952:	2100      	movs	r1, #0
  400954:	4658      	mov	r0, fp
  400956:	4bc6      	ldr	r3, [pc, #792]	; (400c70 <computeWaveletPitch+0x6b0>)
  400958:	4798      	blx	r3
		for (i = 0 ; i < nbMins ; i++) 
  40095a:	b34d      	cbz	r5, 4009b0 <computeWaveletPitch+0x3f0>
  40095c:	f8df e32c 	ldr.w	lr, [pc, #812]	; 400c8c <computeWaveletPitch+0x6cc>
  400960:	2202      	movs	r2, #2
  400962:	2700      	movs	r7, #0
  400964:	4671      	mov	r1, lr
  400966:	e012      	b.n	40098e <computeWaveletPitch+0x3ce>
					d = Abs(mins[i] - mins[i+j]);
  400968:	f8d1 c000 	ldr.w	ip, [r1]
  40096c:	684b      	ldr	r3, [r1, #4]
  40096e:	ebac 0303 	sub.w	r3, ip, r3
  400972:	2b00      	cmp	r3, #0
  400974:	bfb8      	it	lt
  400976:	425b      	neglt	r3, r3
				if (i+j < nbMins) 
  400978:	42aa      	cmp	r2, r5
					distances[d]++; 
  40097a:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
  40097e:	f100 0001 	add.w	r0, r0, #1
  400982:	f84b 0023 	str.w	r0, [fp, r3, lsl #2]
				if (i+j < nbMins) 
  400986:	f2c0 80cc 	blt.w	400b22 <computeWaveletPitch+0x562>
  40098a:	3104      	adds	r1, #4
  40098c:	3201      	adds	r2, #1
  40098e:	3701      	adds	r7, #1
  400990:	42af      	cmp	r7, r5
  400992:	dbe9      	blt.n	400968 <computeWaveletPitch+0x3a8>
  400994:	42aa      	cmp	r2, r5
  400996:	da0b      	bge.n	4009b0 <computeWaveletPitch+0x3f0>
					d = Abs(mins[i] - mins[i+j]);
  400998:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
  40099c:	680b      	ldr	r3, [r1, #0]
  40099e:	1a9b      	subs	r3, r3, r2
  4009a0:	2b00      	cmp	r3, #0
  4009a2:	bfb8      	it	lt
  4009a4:	425b      	neglt	r3, r3
					distances[d]++; 
  4009a6:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
  4009aa:	3201      	adds	r2, #1
  4009ac:	f84b 2023 	str.w	r2, [fp, r3, lsl #2]
		for (i = 0 ; i < nbMaxs ; i++) 
  4009b0:	b346      	cbz	r6, 400a04 <computeWaveletPitch+0x444>
  4009b2:	4dae      	ldr	r5, [pc, #696]	; (400c6c <computeWaveletPitch+0x6ac>)
  4009b4:	2202      	movs	r2, #2
  4009b6:	2700      	movs	r7, #0
  4009b8:	4629      	mov	r1, r5
  4009ba:	e012      	b.n	4009e2 <computeWaveletPitch+0x422>
					d = Abs(maxs[i] - maxs[i+j]);
  4009bc:	f8d1 e000 	ldr.w	lr, [r1]
  4009c0:	684b      	ldr	r3, [r1, #4]
  4009c2:	ebae 0303 	sub.w	r3, lr, r3
  4009c6:	2b00      	cmp	r3, #0
  4009c8:	bfb8      	it	lt
  4009ca:	425b      	neglt	r3, r3
				if (i+j < nbMaxs) 
  4009cc:	42b2      	cmp	r2, r6
					distances[d]++; 
  4009ce:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
  4009d2:	f100 0001 	add.w	r0, r0, #1
  4009d6:	f84b 0023 	str.w	r0, [fp, r3, lsl #2]
				if (i+j < nbMaxs) 
  4009da:	f2c0 818f 	blt.w	400cfc <computeWaveletPitch+0x73c>
  4009de:	3104      	adds	r1, #4
  4009e0:	3201      	adds	r2, #1
  4009e2:	3701      	adds	r7, #1
  4009e4:	42b7      	cmp	r7, r6
  4009e6:	dbe9      	blt.n	4009bc <computeWaveletPitch+0x3fc>
  4009e8:	42b2      	cmp	r2, r6
  4009ea:	da0b      	bge.n	400a04 <computeWaveletPitch+0x444>
					d = Abs(maxs[i] - maxs[i+j]);
  4009ec:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4009f0:	680b      	ldr	r3, [r1, #0]
  4009f2:	1a9b      	subs	r3, r3, r2
  4009f4:	2b00      	cmp	r3, #0
  4009f6:	bfb8      	it	lt
  4009f8:	425b      	neglt	r3, r3
					distances[d]++; 
  4009fa:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
  4009fe:	3201      	adds	r2, #1
  400a00:	f84b 2023 	str.w	r2, [fp, r3, lsl #2]
		for (i = 0 ; i < nbMaxs ; i++) 
  400a04:	f04f 36ff 	mov.w	r6, #4294967295
  400a08:	f1c4 0e00 	rsb	lr, r4, #0
  400a0c:	2500      	movs	r5, #0
  400a0e:	f104 0c01 	add.w	ip, r4, #1
  400a12:	4637      	mov	r7, r6
			for (j = -delta ; j <= delta ; j++) 
  400a14:	4574      	cmp	r4, lr
  400a16:	f2c0 8082 	blt.w	400b1e <computeWaveletPitch+0x55e>
  400a1a:	1b2b      	subs	r3, r5, r4
  400a1c:	eb0c 0205 	add.w	r2, ip, r5
  400a20:	2100      	movs	r1, #0
				if (i+j >=0 && i+j < curSamNb)
  400a22:	4553      	cmp	r3, sl
  400a24:	da04      	bge.n	400a30 <computeWaveletPitch+0x470>
  400a26:	2b00      	cmp	r3, #0
  400a28:	db02      	blt.n	400a30 <computeWaveletPitch+0x470>
					summed += distances[i+j];
  400a2a:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
  400a2e:	4401      	add	r1, r0
  400a30:	3301      	adds	r3, #1
			for (j = -delta ; j <= delta ; j++) 
  400a32:	4293      	cmp	r3, r2
  400a34:	d1f5      	bne.n	400a22 <computeWaveletPitch+0x462>
			if (summed == bestValue) 
  400a36:	42b9      	cmp	r1, r7
  400a38:	d06c      	beq.n	400b14 <computeWaveletPitch+0x554>
			else if (summed > bestValue) 
  400a3a:	dd01      	ble.n	400a40 <computeWaveletPitch+0x480>
  400a3c:	460f      	mov	r7, r1
  400a3e:	462e      	mov	r6, r5
		for (i = 0; i< curSamNb; i++) 
  400a40:	3501      	adds	r5, #1
  400a42:	4555      	cmp	r5, sl
  400a44:	d1e6      	bne.n	400a14 <computeWaveletPitch+0x454>
		for (j = -delta ; j <= delta ; j++) 
  400a46:	4574      	cmp	r4, lr
  400a48:	f2c0 8087 	blt.w	400b5a <computeWaveletPitch+0x59a>
  400a4c:	ed9f 7a89 	vldr	s14, [pc, #548]	; 400c74 <computeWaveletPitch+0x6b4>
  400a50:	1c62      	adds	r2, r4, #1
  400a52:	1b33      	subs	r3, r6, r4
  400a54:	eef0 6a47 	vmov.f32	s13, s14
  400a58:	4416      	add	r6, r2
			if (bestDistance+j >=0 && bestDistance+j < WIN_SIZE) 
  400a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  400a5e:	d211      	bcs.n	400a84 <computeWaveletPitch+0x4c4>
				int32_t nbDist = distances[bestDistance+j];
  400a60:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
					distAvg += (bestDistance+j)*nbDist;
  400a64:	fb02 f103 	mul.w	r1, r2, r3
					nbDists += nbDist;
  400a68:	ee06 2a10 	vmov	s12, r2
				if (nbDist > 0) {
  400a6c:	2a00      	cmp	r2, #0
					distAvg += (bestDistance+j)*nbDist;
  400a6e:	ee07 1a90 	vmov	s15, r1
					nbDists += nbDist;
  400a72:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
					distAvg += (bestDistance+j)*nbDist;
  400a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (nbDist > 0) {
  400a7a:	dd03      	ble.n	400a84 <computeWaveletPitch+0x4c4>
					nbDists += nbDist;
  400a7c:	ee76 6a86 	vadd.f32	s13, s13, s12
					distAvg += (bestDistance+j)*nbDist;
  400a80:	ee37 7a27 	vadd.f32	s14, s14, s15
  400a84:	3301      	adds	r3, #1
		for (j = -delta ; j <= delta ; j++) 
  400a86:	42b3      	cmp	r3, r6
  400a88:	d1e7      	bne.n	400a5a <computeWaveletPitch+0x49a>
  400a8a:	ee87 6a26 	vdiv.f32	s12, s14, s13
				pitchF = SAMPLE_RATE/(_2power(curLevel-1)*curModeDistance);
  400a8e:	9b00      	ldr	r3, [sp, #0]
		if (curModeDistance > -1.0f) 
  400a90:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  400a94:	eef4 9ae7 	vcmpe.f32	s19, s15
  400a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400a9c:	dd12      	ble.n	400ac4 <computeWaveletPitch+0x504>
			float similarity = Abs(distAvg*2 - curModeDistance);
  400a9e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
			if (similarity <= 2*delta) 
  400aa2:	0064      	lsls	r4, r4, #1
			float similarity = Abs(distAvg*2 - curModeDistance);
  400aa4:	eef0 6a69 	vmov.f32	s13, s19
			if (similarity <= 2*delta) 
  400aa8:	ee07 4a90 	vmov	s15, r4
			float similarity = Abs(distAvg*2 - curModeDistance);
  400aac:	eed6 6a07 	vfnms.f32	s13, s12, s14
			if (similarity <= 2*delta) 
  400ab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			float similarity = Abs(distAvg*2 - curModeDistance);
  400ab4:	eeb0 7ae6 	vabs.f32	s14, s13
			if (similarity <= 2*delta) 
  400ab8:	eeb4 7ae7 	vcmpe.f32	s14, s15
  400abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400ac0:	f240 8087 	bls.w	400bd2 <computeWaveletPitch+0x612>
		curLevel = curLevel + 1;
  400ac4:	3301      	adds	r3, #1
		if (curLevel >= maxFLWTlevels) 
  400ac6:	2b06      	cmp	r3, #6
		curLevel = curLevel + 1;
  400ac8:	9300      	str	r3, [sp, #0]
		if (curLevel >= maxFLWTlevels) 
  400aca:	d04d      	beq.n	400b68 <computeWaveletPitch+0x5a8>
  400acc:	9b01      	ldr	r3, [sp, #4]
		for (i = 0; i < curSamNb/2; i++)
  400ace:	ea4f 0a6a 	mov.w	sl, sl, asr #1
  400ad2:	4a69      	ldr	r2, [pc, #420]	; (400c78 <computeWaveletPitch+0x6b8>)
			sam[i] = (sam[2*i] + sam[2*i + 1]) * 0.5f;
  400ad4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
  400ad8:	eb03 01ca 	add.w	r1, r3, sl, lsl #3
		for (i = 0; i < curSamNb/2; i++)
  400adc:	4613      	mov	r3, r2
			sam[i] = (sam[2*i] + sam[2*i + 1]) * 0.5f;
  400ade:	ed93 7a00 	vldr	s14, [r3]
  400ae2:	3308      	adds	r3, #8
  400ae4:	ed53 7a01 	vldr	s15, [r3, #-4]
		for (i = 0; i < curSamNb/2; i++)
  400ae8:	428b      	cmp	r3, r1
			sam[i] = (sam[2*i] + sam[2*i + 1]) * 0.5f;
  400aea:	ee77 7a27 	vadd.f32	s15, s14, s15
  400aee:	ee67 7aa6 	vmul.f32	s15, s15, s13
  400af2:	ece2 7a01 	vstmia	r2!, {s15}
		for (i = 0; i < curSamNb/2; i++)
  400af6:	d1f2      	bne.n	400ade <computeWaveletPitch+0x51e>
	for (j = 0; j < i; j++) res <<= 1;
  400af8:	9b00      	ldr	r3, [sp, #0]
  400afa:	2b01      	cmp	r3, #1
  400afc:	d057      	beq.n	400bae <computeWaveletPitch+0x5ee>
  400afe:	2b02      	cmp	r3, #2
  400b00:	d030      	beq.n	400b64 <computeWaveletPitch+0x5a4>
  400b02:	2b03      	cmp	r3, #3
  400b04:	d02c      	beq.n	400b60 <computeWaveletPitch+0x5a0>
  400b06:	2b05      	cmp	r3, #5
  400b08:	bf0c      	ite	eq
  400b0a:	2320      	moveq	r3, #32
  400b0c:	2310      	movne	r3, #16
		curModeDistance = distAvg;
  400b0e:	eef0 9a46 	vmov.f32	s19, s12
  400b12:	e595      	b.n	400640 <computeWaveletPitch+0x80>
				if (i == 2*bestDistance)
  400b14:	ebb5 0f46 	cmp.w	r5, r6, lsl #1
  400b18:	bf08      	it	eq
  400b1a:	462e      	moveq	r6, r5
  400b1c:	e790      	b.n	400a40 <computeWaveletPitch+0x480>
			int32_t summed = 0;
  400b1e:	2100      	movs	r1, #0
  400b20:	e789      	b.n	400a36 <computeWaveletPitch+0x476>
					d = Abs(mins[i] - mins[i+j]);
  400b22:	f85e 3022 	ldr.w	r3, [lr, r2, lsl #2]
  400b26:	ebac 0303 	sub.w	r3, ip, r3
  400b2a:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
  400b2e:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
					distances[d]++; 
  400b32:	f85b 3020 	ldr.w	r3, [fp, r0, lsl #2]
  400b36:	3301      	adds	r3, #1
  400b38:	f84b 3020 	str.w	r3, [fp, r0, lsl #2]
  400b3c:	e725      	b.n	40098a <computeWaveletPitch+0x3ca>
		if (curSamNb < 2) return pitchF;
  400b3e:	2000      	movs	r0, #0
  400b40:	494d      	ldr	r1, [pc, #308]	; (400c78 <computeWaveletPitch+0x6b8>)
  400b42:	f8df 814c 	ldr.w	r8, [pc, #332]	; 400c90 <computeWaveletPitch+0x6d0>
  400b46:	eeb0 7a48 	vmov.f32	s14, s16
  400b4a:	2301      	movs	r3, #1
  400b4c:	4602      	mov	r2, r0
  400b4e:	4606      	mov	r6, r0
  400b50:	4605      	mov	r5, r0
  400b52:	46c4      	mov	ip, r8
  400b54:	9101      	str	r1, [sp, #4]
  400b56:	460f      	mov	r7, r1
  400b58:	e668      	b.n	40082c <computeWaveletPitch+0x26c>
		for (j = -delta ; j <= delta ; j++) 
  400b5a:	ed9f 6a48 	vldr	s12, [pc, #288]	; 400c7c <computeWaveletPitch+0x6bc>
  400b5e:	e796      	b.n	400a8e <computeWaveletPitch+0x4ce>
	for (j = 0; j < i; j++) res <<= 1;
  400b60:	2308      	movs	r3, #8
  400b62:	e7d4      	b.n	400b0e <computeWaveletPitch+0x54e>
  400b64:	2304      	movs	r3, #4
  400b66:	e7d2      	b.n	400b0e <computeWaveletPitch+0x54e>
		if (pitchtracker._prevPitch > -1.0f) 
  400b68:	4a45      	ldr	r2, [pc, #276]	; (400c80 <computeWaveletPitch+0x6c0>)
  400b6a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  400b6e:	edd2 7a00 	vldr	s15, [r2]
  400b72:	eef4 7ac7 	vcmpe.f32	s15, s14
  400b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400b7a:	dd1a      	ble.n	400bb2 <computeWaveletPitch+0x5f2>
			if (pitchtracker._pitchConfidence >= 1) 
  400b7c:	6853      	ldr	r3, [r2, #4]
  400b7e:	2b00      	cmp	r3, #0
  400b80:	dd20      	ble.n	400bc4 <computeWaveletPitch+0x604>
				pitchtracker._pitchConfidence = Max(0, pitchtracker._pitchConfidence - 1);
  400b82:	3b01      	subs	r3, #1
  400b84:	6053      	str	r3, [r2, #4]
	if (pitchtracker._pitchConfidence >= 1) 
  400b86:	2b00      	cmp	r3, #0
  400b88:	dd13      	ble.n	400bb2 <computeWaveletPitch+0x5f2>
	if (pitch < -1.0f) pitch = 0.0f;
  400b8a:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
  400b8e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 400c74 <computeWaveletPitch+0x6b4>
  400b92:	eef4 7a66 	vcmp.f32	s15, s13
  400b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400b9a:	bf48      	it	mi
  400b9c:	eef0 7a47 	vmovmi.f32	s15, s14
	return _dywapitch_dynamicprocess(get_raw_pitch(samples)); 
  400ba0:	ee17 0a90 	vmov	r0, s15
  400ba4:	b007      	add	sp, #28
  400ba6:	ecbd 8b04 	vpop	{d8-d9}
  400baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (j = 0; j < i; j++) res <<= 1;
  400bae:	2302      	movs	r3, #2
  400bb0:	e7ad      	b.n	400b0e <computeWaveletPitch+0x54e>
	float estimatedPitch = -1.0f;
  400bb2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  400bb6:	ee17 0a90 	vmov	r0, s15
  400bba:	b007      	add	sp, #28
  400bbc:	ecbd 8b04 	vpop	{d8-d9}
  400bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				pitchtracker._pitchConfidence = 0;
  400bc4:	2300      	movs	r3, #0
				pitchtracker._prevPitch = -1.0f;
  400bc6:	ed82 7a00 	vstr	s14, [r2]
		pitch = -1.0f;
  400bca:	eef0 7a47 	vmov.f32	s15, s14
				pitchtracker._pitchConfidence = 0;
  400bce:	6053      	str	r3, [r2, #4]
  400bd0:	e7f1      	b.n	400bb6 <computeWaveletPitch+0x5f6>
				pitchF = SAMPLE_RATE/(_2power(curLevel-1)*curModeDistance);
  400bd2:	3b01      	subs	r3, #1
	for (j = 0; j < i; j++) res <<= 1;
  400bd4:	2b00      	cmp	r3, #0
  400bd6:	f340 808e 	ble.w	400cf6 <computeWaveletPitch+0x736>
  400bda:	2b01      	cmp	r3, #1
  400bdc:	f000 809e 	beq.w	400d1c <computeWaveletPitch+0x75c>
  400be0:	2b02      	cmp	r3, #2
  400be2:	f000 8099 	beq.w	400d18 <computeWaveletPitch+0x758>
  400be6:	2b04      	cmp	r3, #4
  400be8:	bf0c      	ite	eq
  400bea:	2310      	moveq	r3, #16
  400bec:	2308      	movne	r3, #8
  400bee:	ee07 3a90 	vmov	s15, r3
  400bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				pitchF = SAMPLE_RATE/(_2power(curLevel-1)*curModeDistance);
  400bf6:	ee69 9aa7 	vmul.f32	s19, s19, s15
  400bfa:	eddf 6a22 	vldr	s13, [pc, #136]	; 400c84 <computeWaveletPitch+0x6c4>
	if (pitch < 1.0f) pitch = -1.0f;
  400bfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
				pitchF = SAMPLE_RATE/(_2power(curLevel-1)*curModeDistance);
  400c02:	eec6 7aa9 	vdiv.f32	s15, s13, s19
	if (pitch < 1.0f) pitch = -1.0f;
  400c06:	eef4 7ac7 	vcmpe.f32	s15, s14
  400c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400c0e:	d4ab      	bmi.n	400b68 <computeWaveletPitch+0x5a8>
	if (pitch > -1.0) {
  400c10:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  400c14:	eef4 7ac7 	vcmpe.f32	s15, s14
  400c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400c1c:	dda4      	ble.n	400b68 <computeWaveletPitch+0x5a8>
		if (pitchtracker._prevPitch < 0.0f) 
  400c1e:	4a18      	ldr	r2, [pc, #96]	; (400c80 <computeWaveletPitch+0x6c0>)
  400c20:	edd2 6a00 	vldr	s13, [r2]
  400c24:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400c2c:	d43a      	bmi.n	400ca4 <computeWaveletPitch+0x6e4>
		else if (abs(pitchtracker._prevPitch - pitch)/pitch < acceptedError) 
  400c2e:	ee36 7ae7 	vsub.f32	s14, s13, s15
  400c32:	ed9f 6a15 	vldr	s12, [pc, #84]	; 400c88 <computeWaveletPitch+0x6c8>
  400c36:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  400c3a:	ee17 3a10 	vmov	r3, s14
  400c3e:	2b00      	cmp	r3, #0
  400c40:	bfb8      	it	lt
  400c42:	425b      	neglt	r3, r3
  400c44:	ee07 3a10 	vmov	s14, r3
			pitchtracker._pitchConfidence = Min(maxConfidence, pitchtracker._pitchConfidence + 1); // maximum 3
  400c48:	6853      	ldr	r3, [r2, #4]
		else if (abs(pitchtracker._prevPitch - pitch)/pitch < acceptedError) 
  400c4a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  400c4e:	eec7 5a27 	vdiv.f32	s11, s14, s15
  400c52:	eef4 5ac6 	vcmpe.f32	s11, s12
  400c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400c5a:	d51b      	bpl.n	400c94 <computeWaveletPitch+0x6d4>
			pitchtracker._pitchConfidence = Min(maxConfidence, pitchtracker._pitchConfidence + 1); // maximum 3
  400c5c:	2b04      	cmp	r3, #4
			pitchtracker._prevPitch = pitch;
  400c5e:	edc2 7a00 	vstr	s15, [r2]
			pitchtracker._pitchConfidence = Min(maxConfidence, pitchtracker._pitchConfidence + 1); // maximum 3
  400c62:	bfd4      	ite	le
  400c64:	3301      	addle	r3, #1
  400c66:	2305      	movgt	r3, #5
				pitchtracker._pitchConfidence = max(0, pitchtracker._pitchConfidence - 1);
  400c68:	6053      	str	r3, [r2, #4]
  400c6a:	e78c      	b.n	400b86 <computeWaveletPitch+0x5c6>
  400c6c:	20405400 	.word	0x20405400
  400c70:	00404ff9 	.word	0x00404ff9
  400c74:	00000000 	.word	0x00000000
  400c78:	20407400 	.word	0x20407400
  400c7c:	7fc00000 	.word	0x7fc00000
  400c80:	2040001c 	.word	0x2040001c
  400c84:	4732b600 	.word	0x4732b600
  400c88:	3e4ccccd 	.word	0x3e4ccccd
  400c8c:	20406400 	.word	0x20406400
  400c90:	fff0bdc0 	.word	0xfff0bdc0
		else if ((pitchtracker._pitchConfidence >= maxConfidence-2) && Abs(pitchtracker._prevPitch - 2.0f*pitch)/(2.0f*pitch) < acceptedError) 
  400c94:	2b02      	cmp	r3, #2
  400c96:	dc0a      	bgt.n	400cae <computeWaveletPitch+0x6ee>
			if (pitchtracker._pitchConfidence >= 1) 
  400c98:	2b00      	cmp	r3, #0
  400c9a:	dd03      	ble.n	400ca4 <computeWaveletPitch+0x6e4>
				pitchtracker._pitchConfidence = max(0, pitchtracker._pitchConfidence - 1);
  400c9c:	3b01      	subs	r3, #1
				estimatedPitch = pitchtracker._prevPitch;
  400c9e:	eef0 7a66 	vmov.f32	s15, s13
  400ca2:	e7e1      	b.n	400c68 <computeWaveletPitch+0x6a8>
				pitchtracker._pitchConfidence = 1;
  400ca4:	2301      	movs	r3, #1
				pitchtracker._prevPitch = pitch;
  400ca6:	edc2 7a00 	vstr	s15, [r2]
				pitchtracker._pitchConfidence = 1;
  400caa:	6053      	str	r3, [r2, #4]
  400cac:	e76d      	b.n	400b8a <computeWaveletPitch+0x5ca>
		else if ((pitchtracker._pitchConfidence >= maxConfidence-2) && Abs(pitchtracker._prevPitch - 2.0f*pitch)/(2.0f*pitch) < acceptedError) 
  400cae:	ee37 7aa7 	vadd.f32	s14, s15, s15
  400cb2:	ee76 5ac7 	vsub.f32	s11, s13, s14
  400cb6:	eef0 5ae5 	vabs.f32	s11, s11
  400cba:	ee85 5a87 	vdiv.f32	s10, s11, s14
  400cbe:	eeb4 5ac6 	vcmpe.f32	s10, s12
  400cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400cc6:	d504      	bpl.n	400cd2 <computeWaveletPitch+0x712>
			pitchtracker._prevPitch = estimatedPitch;
  400cc8:	ed82 7a00 	vstr	s14, [r2]
			estimatedPitch = 2.0f*pitch;
  400ccc:	eef0 7a47 	vmov.f32	s15, s14
  400cd0:	e75b      	b.n	400b8a <computeWaveletPitch+0x5ca>
		else if ((pitchtracker._pitchConfidence >= maxConfidence-2) && Abs(pitchtracker._prevPitch - 0.5f*pitch)/(0.5f*pitch) < acceptedError) 
  400cd2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
  400cd6:	ee67 7a87 	vmul.f32	s15, s15, s14
  400cda:	ee36 7ae7 	vsub.f32	s14, s13, s15
  400cde:	eeb0 7ac7 	vabs.f32	s14, s14
  400ce2:	eec7 5a27 	vdiv.f32	s11, s14, s15
  400ce6:	eef4 5ac6 	vcmpe.f32	s11, s12
  400cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400cee:	d5d5      	bpl.n	400c9c <computeWaveletPitch+0x6dc>
			pitchtracker._prevPitch = estimatedPitch;
  400cf0:	edc2 7a00 	vstr	s15, [r2]
  400cf4:	e749      	b.n	400b8a <computeWaveletPitch+0x5ca>
	for (j = 0; j < i; j++) res <<= 1;
  400cf6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  400cfa:	e77c      	b.n	400bf6 <computeWaveletPitch+0x636>
					d = Abs(maxs[i] - maxs[i+j]);
  400cfc:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
  400d00:	ebae 0303 	sub.w	r3, lr, r3
  400d04:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
  400d08:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
					distances[d]++; 
  400d0c:	f85b 3020 	ldr.w	r3, [fp, r0, lsl #2]
  400d10:	3301      	adds	r3, #1
  400d12:	f84b 3020 	str.w	r3, [fp, r0, lsl #2]
  400d16:	e662      	b.n	4009de <computeWaveletPitch+0x41e>
	for (j = 0; j < i; j++) res <<= 1;
  400d18:	2304      	movs	r3, #4
  400d1a:	e768      	b.n	400bee <computeWaveletPitch+0x62e>
  400d1c:	2302      	movs	r3, #2
  400d1e:	e766      	b.n	400bee <computeWaveletPitch+0x62e>

00400d20 <PSOLA_init>:
static float prev_pitch_shifts[MAX_NUM_SHIFTS]; 
static float window[10*WIN_SIZE]; // sufficiently large window array  
/************************ Static variables *********************/

void PSOLA_init(void)
{
  400d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	arm_fill_f32(0.0f, input_ring_buffer, RING_BUFFER_SIZE); 
  400d22:	2600      	movs	r6, #0
  400d24:	4c19      	ldr	r4, [pc, #100]	; (400d8c <PSOLA_init+0x6c>)
  400d26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400d2a:	4919      	ldr	r1, [pc, #100]	; (400d90 <PSOLA_init+0x70>)
  400d2c:	4630      	mov	r0, r6
	arm_fill_f32(0.0f, output_ring_buffer, RING_BUFFER_SIZE);
	arm_fill_f32(0.0f, window, 10*WIN_SIZE); 
	arm_fill_f32(1.0f, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  400d2e:	4d19      	ldr	r5, [pc, #100]	; (400d94 <PSOLA_init+0x74>)
	arm_fill_f32(0.0f, input_ring_buffer, RING_BUFFER_SIZE); 
  400d30:	47a0      	blx	r4
	arm_fill_f32(0.0f, output_ring_buffer, RING_BUFFER_SIZE);
  400d32:	4630      	mov	r0, r6
  400d34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400d38:	4917      	ldr	r1, [pc, #92]	; (400d98 <PSOLA_init+0x78>)
  400d3a:	47a0      	blx	r4
	arm_fill_f32(0.0f, window, 10*WIN_SIZE); 
  400d3c:	4630      	mov	r0, r6
  400d3e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
  400d42:	4916      	ldr	r1, [pc, #88]	; (400d9c <PSOLA_init+0x7c>)
  400d44:	47a0      	blx	r4
  400d46:	274c      	movs	r7, #76	; 0x4c
	arm_fill_f32(1.0f, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  400d48:	4629      	mov	r1, r5
  400d4a:	2213      	movs	r2, #19
  400d4c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
	prev_pitch_shifts[0] = 1.0f; 
  400d50:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
	arm_fill_f32(1.0f, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  400d54:	47a0      	blx	r4
	prev_pitch_shifts[1] = -1.0f; 
  400d56:	4b12      	ldr	r3, [pc, #72]	; (400da0 <PSOLA_init+0x80>)
  400d58:	463a      	mov	r2, r7
  400d5a:	4c12      	ldr	r4, [pc, #72]	; (400da4 <PSOLA_init+0x84>)
  400d5c:	2100      	movs	r1, #0
  400d5e:	4812      	ldr	r0, [pc, #72]	; (400da8 <PSOLA_init+0x88>)
  400d60:	606b      	str	r3, [r5, #4]
	prev_pitch_shifts[0] = 1.0f; 
  400d62:	602e      	str	r6, [r5, #0]
  400d64:	47a0      	blx	r4
  400d66:	463a      	mov	r2, r7
  400d68:	2100      	movs	r1, #0
  400d6a:	4810      	ldr	r0, [pc, #64]	; (400dac <PSOLA_init+0x8c>)
	{
		outPtrList[i] = 0; 
		saved_samplesLeftInPeriod[i] = 0; 
	}
		
	current_num_shifts = 1; // always doing root 
  400d6c:	2701      	movs	r7, #1
  400d6e:	47a0      	blx	r4
  400d70:	4e0f      	ldr	r6, [pc, #60]	; (400db0 <PSOLA_init+0x90>)
	
	readPos = RING_BUFFER_SIZE - WIN_SIZE; // + WEIRD_OFFSET; 
  400d72:	4c10      	ldr	r4, [pc, #64]	; (400db4 <PSOLA_init+0x94>)
  400d74:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	inPtr = 0; 
  400d78:	490f      	ldr	r1, [pc, #60]	; (400db8 <PSOLA_init+0x98>)
  400d7a:	2000      	movs	r0, #0
	inputPeriodLength = SAMPLE_RATE / MINIMUM_PITCH; 
  400d7c:	4b0f      	ldr	r3, [pc, #60]	; (400dbc <PSOLA_init+0x9c>)
  400d7e:	f240 12c9 	movw	r2, #457	; 0x1c9
	current_num_shifts = 1; // always doing root 
  400d82:	6037      	str	r7, [r6, #0]
	readPos = RING_BUFFER_SIZE - WIN_SIZE; // + WEIRD_OFFSET; 
  400d84:	6025      	str	r5, [r4, #0]
	inPtr = 0; 
  400d86:	6008      	str	r0, [r1, #0]
	inputPeriodLength = SAMPLE_RATE / MINIMUM_PITCH; 
  400d88:	601a      	str	r2, [r3, #0]
  400d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400d8c:	00403951 	.word	0x00403951
  400d90:	20409000 	.word	0x20409000
  400d94:	20412000 	.word	0x20412000
  400d98:	2040e000 	.word	0x2040e000
  400d9c:	2041209c 	.word	0x2041209c
  400da0:	bf800000 	.word	0xbf800000
  400da4:	00404ff9 	.word	0x00404ff9
  400da8:	2040d000 	.word	0x2040d000
  400dac:	20412050 	.word	0x20412050
  400db0:	20408400 	.word	0x20408400
  400db4:	2041204c 	.word	0x2041204c
  400db8:	20408404 	.word	0x20408404
  400dbc:	20408408 	.word	0x20408408

00400dc0 <create_harmonies>:
	currentPitch = MINIMUM_PITCH; 
}

// assumes valid pitch shifts 
void create_harmonies(float* input, float *output, float inputPitch, float *pitch_shifts_in, float harm_volume, float dry_volume)
{
  400dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400dc4:	ed2d 8b06 	vpush	{d8-d10}
  400dc8:	b08b      	sub	sp, #44	; 0x2c
  400dca:	ee09 2a10 	vmov	s18, r2
  400dce:	4fb9      	ldr	r7, [pc, #740]	; (4010b4 <create_harmonies+0x2f4>)
  400dd0:	9305      	str	r3, [sp, #20]
	uint32_t i, w; 
	int32_t olaIdx; 
	
	uint32_t saved_inPtr = inPtr; 
  400dd2:	4bb9      	ldr	r3, [pc, #740]	; (4010b8 <create_harmonies+0x2f8>)
{
  400dd4:	9109      	str	r1, [sp, #36]	; 0x24
	uint32_t saved_inPtr = inPtr; 
  400dd6:	681b      	ldr	r3, [r3, #0]
{
  400dd8:	ed9d 8a1a 	vldr	s16, [sp, #104]	; 0x68
	uint32_t outPtr; 
	uint32_t pitch_idx = 0; 
	
	uint32_t starting_input_ptr = inPtr + WIN_SIZE; 
  400ddc:	461a      	mov	r2, r3
	uint32_t saved_inPtr = inPtr; 
  400dde:	9306      	str	r3, [sp, #24]
{
  400de0:	eddd 9a1b 	vldr	s19, [sp, #108]	; 0x6c
	uint32_t starting_input_ptr = inPtr + WIN_SIZE; 
  400de4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  400de8:	f502 6100 	add.w	r1, r2, #2048	; 0x800
	for (i = 0; i < WIN_SIZE; i++)
	{
		input_ring_buffer[(starting_input_ptr++) & RING_BUFFER_MASK] = input[i]; 
  400dec:	f3c3 020b 	ubfx	r2, r3, #0, #12
  400df0:	3301      	adds	r3, #1
  400df2:	f850 4b04 	ldr.w	r4, [r0], #4
  400df6:	eb07 0282 	add.w	r2, r7, r2, lsl #2
	for (i = 0; i < WIN_SIZE; i++)
  400dfa:	428b      	cmp	r3, r1
		input_ring_buffer[(starting_input_ptr++) & RING_BUFFER_MASK] = input[i]; 
  400dfc:	6014      	str	r4, [r2, #0]
	for (i = 0; i < WIN_SIZE; i++)
  400dfe:	d1f5      	bne.n	400dec <create_harmonies+0x2c>
	uint32_t inHalfAway;
	float periodRatio;
	float inputPeriodLengthRecip = 1.0f / inputPeriodLength;
	uint32_t samplesLeftInPeriod = 0; 
	
	float scale = 1.0f / log2f((float)(current_num_shifts+1));
  400e00:	4aae      	ldr	r2, [pc, #696]	; (4010bc <create_harmonies+0x2fc>)
  400e02:	4baf      	ldr	r3, [pc, #700]	; (4010c0 <create_harmonies+0x300>)
  400e04:	6814      	ldr	r4, [r2, #0]
  400e06:	1c60      	adds	r0, r4, #1
  400e08:	ee07 0a90 	vmov	s15, r0
  400e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
  400e10:	ee17 0a90 	vmov	r0, s15
  400e14:	4798      	blx	r3
	float inputPeriodLengthRecip = 1.0f / inputPeriodLength;
  400e16:	4bab      	ldr	r3, [pc, #684]	; (4010c4 <create_harmonies+0x304>)
	float scale = 1.0f / log2f((float)(current_num_shifts+1));
  400e18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  400e1c:	ee06 0a90 	vmov	s13, r0
	float inputPeriodLengthRecip = 1.0f / inputPeriodLength;
  400e20:	f8d3 c000 	ldr.w	ip, [r3]
	if (current_num_shifts > 1) 
  400e24:	2c01      	cmp	r4, #1
	float scale = 1.0f / log2f((float)(current_num_shifts+1));
  400e26:	eec7 7a26 	vdiv.f32	s15, s14, s13
	float inputPeriodLengthRecip = 1.0f / inputPeriodLength;
  400e2a:	ee07 ca10 	vmov	s14, ip
  400e2e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	if (current_num_shifts > 1) 
  400e32:	d903      	bls.n	400e3c <create_harmonies+0x7c>
		scale *= 1.2f; 
  400e34:	eddf 6aa4 	vldr	s13, [pc, #656]	; 4010c8 <create_harmonies+0x308>
  400e38:	ee67 7aa6 	vmul.f32	s15, s15, s13
	
	// pre-compute window function	
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e3c:	f1bc 0f00 	cmp.w	ip, #0
  400e40:	dd24      	ble.n	400e8c <create_harmonies+0xcc>
  400e42:	eddf 6aa2 	vldr	s13, [pc, #648]	; 4010cc <create_harmonies+0x30c>
  400e46:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	{
		window[w] = scale * (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  400e4a:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
  400e4e:	4da0      	ldr	r5, [pc, #640]	; (4010d0 <create_harmonies+0x310>)
  400e50:	ee86 aa87 	vdiv.f32	s20, s13, s14
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e54:	2400      	movs	r4, #0
  400e56:	4e9f      	ldr	r6, [pc, #636]	; (4010d4 <create_harmonies+0x314>)
  400e58:	ee67 8aa8 	vmul.f32	s17, s15, s17
		window[w] = scale * (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  400e5c:	ee07 4a90 	vmov	s15, r4
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e60:	3401      	adds	r4, #1
		window[w] = scale * (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  400e62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400e66:	ee67 7a8a 	vmul.f32	s15, s15, s20
  400e6a:	ee17 0a90 	vmov	r0, s15
  400e6e:	47b0      	blx	r6
  400e70:	ee07 0a90 	vmov	s15, r0
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e74:	4b93      	ldr	r3, [pc, #588]	; (4010c4 <create_harmonies+0x304>)
		window[w] = scale * (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  400e76:	ee7a 7ae7 	vsub.f32	s15, s21, s15
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e7a:	681b      	ldr	r3, [r3, #0]
		window[w] = scale * (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  400e7c:	ee67 7aa8 	vmul.f32	s15, s15, s17
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e80:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
		window[w] = scale * (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  400e84:	ece5 7a01 	vstmia	r5!, {s15}
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e88:	dbe8      	blt.n	400e5c <create_harmonies+0x9c>
  400e8a:	469c      	mov	ip, r3
		samplesLeftInPeriod = saved_samplesLeftInPeriod[0];
		if (pitch_idx > 0)
		{
			float tmp; 
			float min = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[0]); 
			for (i = 1; i < current_num_shifts; i++)
  400e8c:	498b      	ldr	r1, [pc, #556]	; (4010bc <create_harmonies+0x2fc>)
  400e8e:	ee07 ca90 	vmov	s15, ip
			float min = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[0]); 
  400e92:	4a91      	ldr	r2, [pc, #580]	; (4010d8 <create_harmonies+0x318>)
			for (i = 1; i < current_num_shifts; i++)
  400e94:	2300      	movs	r3, #0
  400e96:	6809      	ldr	r1, [r1, #0]
		periodRatio = 1.0f / pitch_shifts_in[pitch_idx]; 
  400e98:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
			float min = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[0]); 
  400e9c:	edd2 5a00 	vldr	s11, [r2]
  400ea0:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
  400ea4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  400ea8:	488c      	ldr	r0, [pc, #560]	; (4010dc <create_harmonies+0x31c>)
			for (i = 1; i < current_num_shifts; i++)
  400eaa:	469b      	mov	fp, r3
  400eac:	f1cc 0a00 	rsb	sl, ip, #0
  400eb0:	9207      	str	r2, [sp, #28]
  400eb2:	4a81      	ldr	r2, [pc, #516]	; (4010b8 <create_harmonies+0x2f8>)
  400eb4:	4e8a      	ldr	r6, [pc, #552]	; (4010e0 <create_harmonies+0x320>)
  400eb6:	f8d2 9000 	ldr.w	r9, [r2]
  400eba:	9a05      	ldr	r2, [sp, #20]
  400ebc:	9108      	str	r1, [sp, #32]
  400ebe:	9003      	str	r0, [sp, #12]
  400ec0:	9204      	str	r2, [sp, #16]
	while(pitch_idx < MAX_NUM_SHIFTS && pitch_shifts_in[pitch_idx] > 0.0f)
  400ec2:	9a04      	ldr	r2, [sp, #16]
  400ec4:	ecb2 7a01 	vldmia	r2!, {s14}
  400ec8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  400ecc:	9204      	str	r2, [sp, #16]
  400ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400ed2:	f340 80c4 	ble.w	40105e <create_harmonies+0x29e>
		outPtr = outPtrList[0];
  400ed6:	4b83      	ldr	r3, [pc, #524]	; (4010e4 <create_harmonies+0x324>)
		periodRatio = 1.0f / pitch_shifts_in[pitch_idx]; 
  400ed8:	ee84 6a87 	vdiv.f32	s12, s9, s14
		outPtr = outPtrList[0];
  400edc:	f8d3 e000 	ldr.w	lr, [r3]
		samplesLeftInPeriod = saved_samplesLeftInPeriod[0];
  400ee0:	4b81      	ldr	r3, [pc, #516]	; (4010e8 <create_harmonies+0x328>)
  400ee2:	681b      	ldr	r3, [r3, #0]
		if (pitch_idx > 0)
  400ee4:	f1bb 0f00 	cmp.w	fp, #0
  400ee8:	d01f      	beq.n	400f2a <create_harmonies+0x16a>
			for (i = 1; i < current_num_shifts; i++)
  400eea:	9a08      	ldr	r2, [sp, #32]
			float min = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[0]); 
  400eec:	ee77 6a65 	vsub.f32	s13, s14, s11
			for (i = 1; i < current_num_shifts; i++)
  400ef0:	2a01      	cmp	r2, #1
			float min = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[0]); 
  400ef2:	eef0 6ae6 	vabs.f32	s13, s13
			for (i = 1; i < current_num_shifts; i++)
  400ef6:	d918      	bls.n	400f2a <create_harmonies+0x16a>
  400ef8:	487c      	ldr	r0, [pc, #496]	; (4010ec <create_harmonies+0x32c>)
  400efa:	4674      	mov	r4, lr
  400efc:	497c      	ldr	r1, [pc, #496]	; (4010f0 <create_harmonies+0x330>)
  400efe:	4a7d      	ldr	r2, [pc, #500]	; (4010f4 <create_harmonies+0x334>)
			{
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400f00:	ecf0 7a01 	vldmia	r0!, {s15}
  400f04:	ee77 7a67 	vsub.f32	s15, s14, s15
  400f08:	eef0 7ae7 	vabs.f32	s15, s15
				if (tmp < min)
  400f0c:	eef4 6ae7 	vcmpe.f32	s13, s15
  400f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400f14:	dd03      	ble.n	400f1e <create_harmonies+0x15e>
				{
					outPtr = outPtrList[i]; 
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
					min = tmp; 
  400f16:	eef0 6a67 	vmov.f32	s13, s15
					outPtr = outPtrList[i]; 
  400f1a:	680c      	ldr	r4, [r1, #0]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  400f1c:	6813      	ldr	r3, [r2, #0]
			for (i = 1; i < current_num_shifts; i++)
  400f1e:	9d07      	ldr	r5, [sp, #28]
  400f20:	3104      	adds	r1, #4
  400f22:	3204      	adds	r2, #4
  400f24:	4285      	cmp	r5, r0
  400f26:	d1eb      	bne.n	400f00 <create_harmonies+0x140>
  400f28:	46a6      	mov	lr, r4
  400f2a:	ee65 7a06 	vmul.f32	s15, s10, s12
					min = tmp; 
  400f2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400f32:	f8dd 9018 	ldr.w	r9, [sp, #24]
  400f36:	9202      	str	r2, [sp, #8]
  400f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  400f3c:	f8cd b000 	str.w	fp, [sp]
  400f40:	edcd 7a01 	vstr	s15, [sp, #4]
			}
		}

		for (i = 0; i < WIN_SIZE; i++)
		{		
			if (samplesLeftInPeriod == 0)
  400f44:	2b00      	cmp	r3, #0
  400f46:	d13a      	bne.n	400fbe <create_harmonies+0x1fe>
			{
				outLag = 1; 
			
				inHalfAway = (inPtr + RING_BUFFER_SIZE_D2) & RING_BUFFER_MASK;
  400f48:	f509 6800 	add.w	r8, r9, #2048	; 0x800
  400f4c:	f3c8 080b 	ubfx	r8, r8, #0, #12
                
				if (inHalfAway < RING_BUFFER_SIZE_D2) 
  400f50:	f5b8 6f00 	cmp.w	r8, #2048	; 0x800
  400f54:	d27e      	bcs.n	401054 <create_harmonies+0x294>
				{
					/* The zero element of the input buffer lies
						in (inptr, inHalfAway] */
					if (outPtr < inHalfAway || outPtr > inPtr) {
  400f56:	45f0      	cmp	r8, lr
  400f58:	d830      	bhi.n	400fbc <create_harmonies+0x1fc>
  400f5a:	45f1      	cmp	r9, lr
  400f5c:	d32e      	bcc.n	400fbc <create_harmonies+0x1fc>
  400f5e:	f509 7b16 	add.w	fp, r9, #600	; 0x258
				}

				while(outLag == 1)
				{
					// set outPtr about the sample at which we OLA 
					outPtr = (outPtr + (uint32_t)((float)inputPeriodLength * periodRatio)) & RING_BUFFER_MASK; 
  400f62:	9b01      	ldr	r3, [sp, #4]
  400f64:	449e      	add	lr, r3
				
					// OLA 
					if (pitch_idx == 0)
  400f66:	9b00      	ldr	r3, [sp, #0]
					outPtr = (outPtr + (uint32_t)((float)inputPeriodLength * periodRatio)) & RING_BUFFER_MASK; 
  400f68:	f3ce 0e0b 	ubfx	lr, lr, #0, #12
					if (pitch_idx == 0)
  400f6c:	2b00      	cmp	r3, #0
  400f6e:	d04f      	beq.n	401010 <create_harmonies+0x250>
							dry_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + LAG_OFFSET) & RING_BUFFER_MASK];
						}
					}
					else
					{
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  400f70:	45d4      	cmp	ip, sl
  400f72:	dd1e      	ble.n	400fb2 <create_harmonies+0x1f2>
  400f74:	ebae 020c 	sub.w	r2, lr, ip
  400f78:	4855      	ldr	r0, [pc, #340]	; (4010d0 <create_harmonies+0x310>)
  400f7a:	eb0e 050c 	add.w	r5, lr, ip
  400f7e:	ebab 040e 	sub.w	r4, fp, lr
						{
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
								harm_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + LAG_OFFSET) & RING_BUFFER_MASK];
  400f82:	18a3      	adds	r3, r4, r2
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  400f84:	f3c2 010b 	ubfx	r1, r2, #0, #12
								harm_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + LAG_OFFSET) & RING_BUFFER_MASK];
  400f88:	ecb0 7a01 	vldmia	r0!, {s14}
  400f8c:	3201      	adds	r2, #1
  400f8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  400f92:	eb06 0181 	add.w	r1, r6, r1, lsl #2
								harm_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + LAG_OFFSET) & RING_BUFFER_MASK];
  400f96:	ee27 7a08 	vmul.f32	s14, s14, s16
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  400f9a:	4295      	cmp	r5, r2
								harm_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + LAG_OFFSET) & RING_BUFFER_MASK];
  400f9c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  400fa0:	edd1 7a00 	vldr	s15, [r1]
  400fa4:	edd3 6a00 	vldr	s13, [r3]
  400fa8:	eee7 7a26 	vfma.f32	s15, s14, s13
  400fac:	edc1 7a00 	vstr	s15, [r1]
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  400fb0:	d1e7      	bne.n	400f82 <create_harmonies+0x1c2>
						}
					}
	
					
					if (inHalfAway < RING_BUFFER_SIZE_D2) 
  400fb2:	f5b8 6f00 	cmp.w	r8, #2048	; 0x800
  400fb6:	d220      	bcs.n	400ffa <create_harmonies+0x23a>
					{
						/* The zero element of the input buffer lies
							in (inptr, inHalfAway] */
						if (outPtr < inHalfAway || outPtr > inPtr) {
  400fb8:	45f0      	cmp	r8, lr
  400fba:	d920      	bls.n	400ffe <create_harmonies+0x23e>
						}
					}		
				}
			
				// assume uniform frequency within window 
				samplesLeftInPeriod = inputPeriodLength;
  400fbc:	4663      	mov	r3, ip
		for (i = 0; i < WIN_SIZE; i++)
  400fbe:	9a02      	ldr	r2, [sp, #8]
			}
		
			--samplesLeftInPeriod; 
		
			// inc/wrap input ring buffer index 
			inPtr = (inPtr+1) & RING_BUFFER_MASK; 		
  400fc0:	f109 0901 	add.w	r9, r9, #1
			--samplesLeftInPeriod; 
  400fc4:	3b01      	subs	r3, #1
		for (i = 0; i < WIN_SIZE; i++)
  400fc6:	3a01      	subs	r2, #1
			inPtr = (inPtr+1) & RING_BUFFER_MASK; 		
  400fc8:	f3c9 090b 	ubfx	r9, r9, #0, #12
		for (i = 0; i < WIN_SIZE; i++)
  400fcc:	9202      	str	r2, [sp, #8]
  400fce:	d1b9      	bne.n	400f44 <create_harmonies+0x184>
  400fd0:	f8dd b000 	ldr.w	fp, [sp]
		}

		saved_samplesLeftInPeriod[pitch_idx] = samplesLeftInPeriod; 
		outPtrList[pitch_idx] = outPtr; 
  400fd4:	4a43      	ldr	r2, [pc, #268]	; (4010e4 <create_harmonies+0x324>)
  400fd6:	f842 e02b 	str.w	lr, [r2, fp, lsl #2]
		pitch_idx++;  
  400fda:	f10b 0b01 	add.w	fp, fp, #1
		saved_samplesLeftInPeriod[pitch_idx] = samplesLeftInPeriod; 
  400fde:	9a03      	ldr	r2, [sp, #12]
	while(pitch_idx < MAX_NUM_SHIFTS && pitch_shifts_in[pitch_idx] > 0.0f)
  400fe0:	f1bb 0f13 	cmp.w	fp, #19
		saved_samplesLeftInPeriod[pitch_idx] = samplesLeftInPeriod; 
  400fe4:	f842 3f04 	str.w	r3, [r2, #4]!
  400fe8:	f04f 0301 	mov.w	r3, #1
  400fec:	9203      	str	r2, [sp, #12]
	while(pitch_idx < MAX_NUM_SHIFTS && pitch_shifts_in[pitch_idx] > 0.0f)
  400fee:	f47f af68 	bne.w	400ec2 <create_harmonies+0x102>
  400ff2:	4b31      	ldr	r3, [pc, #196]	; (4010b8 <create_harmonies+0x2f8>)
  400ff4:	f8c3 9000 	str.w	r9, [r3]
  400ff8:	e033      	b.n	401062 <create_harmonies+0x2a2>
						if (outPtr > inPtr && outPtr < inHalfAway) {
  400ffa:	45f0      	cmp	r8, lr
  400ffc:	d9b1      	bls.n	400f62 <create_harmonies+0x1a2>
  400ffe:	45ce      	cmp	lr, r9
  401000:	d8dc      	bhi.n	400fbc <create_harmonies+0x1fc>
					outPtr = (outPtr + (uint32_t)((float)inputPeriodLength * periodRatio)) & RING_BUFFER_MASK; 
  401002:	9b01      	ldr	r3, [sp, #4]
  401004:	449e      	add	lr, r3
					if (pitch_idx == 0)
  401006:	9b00      	ldr	r3, [sp, #0]
					outPtr = (outPtr + (uint32_t)((float)inputPeriodLength * periodRatio)) & RING_BUFFER_MASK; 
  401008:	f3ce 0e0b 	ubfx	lr, lr, #0, #12
					if (pitch_idx == 0)
  40100c:	2b00      	cmp	r3, #0
  40100e:	d1af      	bne.n	400f70 <create_harmonies+0x1b0>
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  401010:	45d4      	cmp	ip, sl
  401012:	ddce      	ble.n	400fb2 <create_harmonies+0x1f2>
  401014:	ebae 030c 	sub.w	r3, lr, ip
  401018:	482d      	ldr	r0, [pc, #180]	; (4010d0 <create_harmonies+0x310>)
  40101a:	eb0e 050c 	add.w	r5, lr, ip
  40101e:	ebab 040e 	sub.w	r4, fp, lr
							dry_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + LAG_OFFSET) & RING_BUFFER_MASK];
  401022:	18e2      	adds	r2, r4, r3
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  401024:	f3c3 010b 	ubfx	r1, r3, #0, #12
							dry_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + LAG_OFFSET) & RING_BUFFER_MASK];
  401028:	ecb0 7a01 	vldmia	r0!, {s14}
  40102c:	3301      	adds	r3, #1
  40102e:	f3c2 020b 	ubfx	r2, r2, #0, #12
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  401032:	eb06 0181 	add.w	r1, r6, r1, lsl #2
							dry_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + LAG_OFFSET) & RING_BUFFER_MASK];
  401036:	ee27 7a29 	vmul.f32	s14, s14, s19
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  40103a:	429d      	cmp	r5, r3
							dry_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + LAG_OFFSET) & RING_BUFFER_MASK];
  40103c:	eb07 0282 	add.w	r2, r7, r2, lsl #2
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  401040:	edd1 7a00 	vldr	s15, [r1]
  401044:	edd2 6a00 	vldr	s13, [r2]
  401048:	eee7 7a26 	vfma.f32	s15, s14, s13
  40104c:	edc1 7a00 	vstr	s15, [r1]
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  401050:	d1e7      	bne.n	401022 <create_harmonies+0x262>
  401052:	e7ae      	b.n	400fb2 <create_harmonies+0x1f2>
					if (outPtr > inPtr && outPtr < inHalfAway) {
  401054:	45f1      	cmp	r9, lr
  401056:	d282      	bcs.n	400f5e <create_harmonies+0x19e>
  401058:	45f0      	cmp	r8, lr
  40105a:	d8af      	bhi.n	400fbc <create_harmonies+0x1fc>
  40105c:	e77f      	b.n	400f5e <create_harmonies+0x19e>
  40105e:	2b00      	cmp	r3, #0
  401060:	d1c7      	bne.n	400ff2 <create_harmonies+0x232>
  401062:	9a09      	ldr	r2, [sp, #36]	; 0x24
	}
	
	for(i = 0; i < WIN_SIZE; i++)
	{
		output[i] = output_ring_buffer[readPos]; 	
		output_ring_buffer[readPos] = 0.0f;
  401064:	2500      	movs	r5, #0
  401066:	4924      	ldr	r1, [pc, #144]	; (4010f8 <create_harmonies+0x338>)
  401068:	f502 5480 	add.w	r4, r2, #4096	; 0x1000
  40106c:	680b      	ldr	r3, [r1, #0]
		output[i] = output_ring_buffer[readPos]; 	
  40106e:	eb06 0083 	add.w	r0, r6, r3, lsl #2
		readPos = (readPos+1) & RING_BUFFER_MASK;
  401072:	3301      	adds	r3, #1
		output[i] = output_ring_buffer[readPos]; 	
  401074:	6807      	ldr	r7, [r0, #0]
		readPos = (readPos+1) & RING_BUFFER_MASK;
  401076:	f3c3 030b 	ubfx	r3, r3, #0, #12
		output[i] = output_ring_buffer[readPos]; 	
  40107a:	f842 7b04 	str.w	r7, [r2], #4
	for(i = 0; i < WIN_SIZE; i++)
  40107e:	42a2      	cmp	r2, r4
		output_ring_buffer[readPos] = 0.0f;
  401080:	6005      	str	r5, [r0, #0]
	for(i = 0; i < WIN_SIZE; i++)
  401082:	d1f4      	bne.n	40106e <create_harmonies+0x2ae>
	// averaging -- not used currently 
	//if (pitch_idx > 1) //  scale = 2.0f / (float)current_num_shifts ; // just in case 
	//arm_scale_f32(output, 2.0f, output, WIN_SIZE); 
	
	currentPitch = inputPitch; 
	inputPeriodLength = (uint32_t)(SAMPLE_RATE / currentPitch);
  401084:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 4010fc <create_harmonies+0x33c>
	current_num_shifts = pitch_idx; 
	arm_copy_f32(pitch_shifts_in, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  401088:	2213      	movs	r2, #19
	current_num_shifts = pitch_idx; 
  40108a:	4c0c      	ldr	r4, [pc, #48]	; (4010bc <create_harmonies+0x2fc>)
	inputPeriodLength = (uint32_t)(SAMPLE_RATE / currentPitch);
  40108c:	eec7 7a09 	vdiv.f32	s15, s14, s18
  401090:	600b      	str	r3, [r1, #0]
	current_num_shifts = pitch_idx; 
  401092:	f8c4 b000 	str.w	fp, [r4]
	arm_copy_f32(pitch_shifts_in, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  401096:	9805      	ldr	r0, [sp, #20]
	inputPeriodLength = (uint32_t)(SAMPLE_RATE / currentPitch);
  401098:	4c0a      	ldr	r4, [pc, #40]	; (4010c4 <create_harmonies+0x304>)
	arm_copy_f32(pitch_shifts_in, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  40109a:	490f      	ldr	r1, [pc, #60]	; (4010d8 <create_harmonies+0x318>)
  40109c:	4b18      	ldr	r3, [pc, #96]	; (401100 <create_harmonies+0x340>)
	inputPeriodLength = (uint32_t)(SAMPLE_RATE / currentPitch);
  40109e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  4010a2:	edc4 7a00 	vstr	s15, [r4]
}
  4010a6:	b00b      	add	sp, #44	; 0x2c
  4010a8:	ecbd 8b06 	vpop	{d8-d10}
  4010ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	arm_copy_f32(pitch_shifts_in, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  4010b0:	4718      	bx	r3
  4010b2:	bf00      	nop
  4010b4:	20409000 	.word	0x20409000
  4010b8:	20408404 	.word	0x20408404
  4010bc:	20408400 	.word	0x20408400
  4010c0:	00403d51 	.word	0x00403d51
  4010c4:	20408408 	.word	0x20408408
  4010c8:	3f99999a 	.word	0x3f99999a
  4010cc:	40490fdb 	.word	0x40490fdb
  4010d0:	2041209c 	.word	0x2041209c
  4010d4:	00403c5d 	.word	0x00403c5d
  4010d8:	20412000 	.word	0x20412000
  4010dc:	2041204c 	.word	0x2041204c
  4010e0:	2040e000 	.word	0x2040e000
  4010e4:	2040d000 	.word	0x2040d000
  4010e8:	20412050 	.word	0x20412050
  4010ec:	20412004 	.word	0x20412004
  4010f0:	2040d004 	.word	0x2040d004
  4010f4:	20412054 	.word	0x20412054
  4010f8:	2041204c 	.word	0x2041204c
  4010fc:	4732b600 	.word	0x4732b600
  401100:	00403981 	.word	0x00403981

00401104 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  401104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  401108:	b990      	cbnz	r0, 401130 <_read+0x2c>
		return -1;
	}

	for (; len > 0; --len) {
  40110a:	2a00      	cmp	r2, #0
  40110c:	4690      	mov	r8, r2
  40110e:	dd0d      	ble.n	40112c <_read+0x28>
  401110:	460c      	mov	r4, r1
  401112:	188f      	adds	r7, r1, r2
  401114:	4e08      	ldr	r6, [pc, #32]	; (401138 <_read+0x34>)
  401116:	4d09      	ldr	r5, [pc, #36]	; (40113c <_read+0x38>)
		ptr_get(stdio_base, ptr);
  401118:	4621      	mov	r1, r4
		ptr++;
  40111a:	3401      	adds	r4, #1
		ptr_get(stdio_base, ptr);
  40111c:	6830      	ldr	r0, [r6, #0]
  40111e:	682b      	ldr	r3, [r5, #0]
  401120:	4798      	blx	r3
	for (; len > 0; --len) {
  401122:	42bc      	cmp	r4, r7
  401124:	d1f8      	bne.n	401118 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  401126:	4640      	mov	r0, r8
  401128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (; len > 0; --len) {
  40112c:	4680      	mov	r8, r0
  40112e:	e7fa      	b.n	401126 <_read+0x22>
		return -1;
  401130:	f04f 38ff 	mov.w	r8, #4294967295
  401134:	e7f7      	b.n	401126 <_read+0x22>
  401136:	bf00      	nop
  401138:	2044a808 	.word	0x2044a808
  40113c:	2044a800 	.word	0x2044a800

00401140 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  401140:	3801      	subs	r0, #1
  401142:	2802      	cmp	r0, #2
  401144:	d81e      	bhi.n	401184 <_write+0x44>
{
  401146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40114a:	4615      	mov	r5, r2
		return -1;
	}

	for (; len != 0; --len) {
  40114c:	b1ba      	cbz	r2, 40117e <_write+0x3e>
  40114e:	460e      	mov	r6, r1
  401150:	460c      	mov	r4, r1
  401152:	f8df 803c 	ldr.w	r8, [pc, #60]	; 401190 <_write+0x50>
  401156:	4f0d      	ldr	r7, [pc, #52]	; (40118c <_write+0x4c>)
  401158:	e001      	b.n	40115e <_write+0x1e>
  40115a:	3d01      	subs	r5, #1
  40115c:	d00d      	beq.n	40117a <_write+0x3a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40115e:	f814 1b01 	ldrb.w	r1, [r4], #1
  401162:	f8d8 0000 	ldr.w	r0, [r8]
  401166:	683b      	ldr	r3, [r7, #0]
  401168:	4798      	blx	r3
  40116a:	2800      	cmp	r0, #0
  40116c:	eba4 0006 	sub.w	r0, r4, r6
  401170:	daf3      	bge.n	40115a <_write+0x1a>
		return -1;
  401172:	f04f 30ff 	mov.w	r0, #4294967295
  401176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40117a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (; len != 0; --len) {
  40117e:	4610      	mov	r0, r2
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  401180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  401184:	f04f 30ff 	mov.w	r0, #4294967295
}
  401188:	4770      	bx	lr
  40118a:	bf00      	nop
  40118c:	2044a804 	.word	0x2044a804
  401190:	2044a808 	.word	0x2044a808

00401194 <wm8904_write_register>:
 *
 * \param uc_register_address Register address to write
 * \param us_data Data to write.
 */
void wm8904_write_register(uint8_t uc_register_address, uint16_t us_data)
{
  401194:	b570      	push	{r4, r5, r6, lr}
  401196:	460b      	mov	r3, r1
  401198:	b086      	sub	sp, #24
	uint8_t uc_temp_data[2];
	twihs_packet_t packet;

	uc_temp_data[0] = (us_data & 0xff00) >> 8;
  40119a:	0a0e      	lsrs	r6, r1, #8

	packet.addr[0]     = uc_register_address;
	packet.addr_length = 0x1;
	packet.buffer      = uc_temp_data;
	packet.length      = 0x2;
	packet.chip        = WM8904_SLAVE_ADDRESS;
  40119c:	221a      	movs	r2, #26
	uc_temp_data[1] = us_data & 0xff;
  40119e:	f88d 3001 	strb.w	r3, [sp, #1]
	packet.addr_length = 0x1;
  4011a2:	2501      	movs	r5, #1
	packet.length      = 0x2;
  4011a4:	2402      	movs	r4, #2

	twihs_master_write(WM8904_TWIHS, &packet);
  4011a6:	a901      	add	r1, sp, #4
  4011a8:	4b07      	ldr	r3, [pc, #28]	; (4011c8 <wm8904_write_register+0x34>)
	packet.addr[0]     = uc_register_address;
  4011aa:	f88d 0004 	strb.w	r0, [sp, #4]
	twihs_master_write(WM8904_TWIHS, &packet);
  4011ae:	4807      	ldr	r0, [pc, #28]	; (4011cc <wm8904_write_register+0x38>)
	uc_temp_data[0] = (us_data & 0xff00) >> 8;
  4011b0:	f88d 6000 	strb.w	r6, [sp]
	packet.addr_length = 0x1;
  4011b4:	9502      	str	r5, [sp, #8]
	packet.buffer      = uc_temp_data;
  4011b6:	f8cd d00c 	str.w	sp, [sp, #12]
	packet.length      = 0x2;
  4011ba:	9404      	str	r4, [sp, #16]
	packet.chip        = WM8904_SLAVE_ADDRESS;
  4011bc:	f88d 2014 	strb.w	r2, [sp, #20]
	twihs_master_write(WM8904_TWIHS, &packet);
  4011c0:	4798      	blx	r3
}
  4011c2:	b006      	add	sp, #24
  4011c4:	bd70      	pop	{r4, r5, r6, pc}
  4011c6:	bf00      	nop
  4011c8:	00401539 	.word	0x00401539
  4011cc:	40018000 	.word	0x40018000

004011d0 <wm8904_read_register>:
 *
 * \param uc_register_address Register address to write
 * \retun Register value.
 */
uint16_t wm8904_read_register(uint8_t uc_register_address)
{
  4011d0:	b530      	push	{r4, r5, lr}
  4011d2:	b087      	sub	sp, #28

	packet.addr[0]     = uc_register_address;
	packet.addr_length = 0x1;
	packet.buffer      = uc_temp_data;
	packet.length      = 0x2;
	packet.chip        = WM8904_SLAVE_ADDRESS;
  4011d4:	221a      	movs	r2, #26
	packet.addr_length = 0x1;
  4011d6:	2501      	movs	r5, #1
	packet.length      = 0x2;
  4011d8:	2402      	movs	r4, #2
	packet.addr[0]     = uc_register_address;
  4011da:	f88d 0004 	strb.w	r0, [sp, #4]

	twihs_master_read(WM8904_TWIHS, &packet);
  4011de:	a901      	add	r1, sp, #4
  4011e0:	4b08      	ldr	r3, [pc, #32]	; (401204 <wm8904_read_register+0x34>)
  4011e2:	4809      	ldr	r0, [pc, #36]	; (401208 <wm8904_read_register+0x38>)
	packet.addr_length = 0x1;
  4011e4:	9502      	str	r5, [sp, #8]
	packet.buffer      = uc_temp_data;
  4011e6:	f8cd d00c 	str.w	sp, [sp, #12]
	packet.length      = 0x2;
  4011ea:	9404      	str	r4, [sp, #16]
	packet.chip        = WM8904_SLAVE_ADDRESS;
  4011ec:	f88d 2014 	strb.w	r2, [sp, #20]
	twihs_master_read(WM8904_TWIHS, &packet);
  4011f0:	4798      	blx	r3
	us_data = (((uint16_t)uc_temp_data[0] << 8) & 0xff00) | uc_temp_data[1];
  4011f2:	f89d 0000 	ldrb.w	r0, [sp]
  4011f6:	f89d 3001 	ldrb.w	r3, [sp, #1]

	return us_data;
}
  4011fa:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  4011fe:	b007      	add	sp, #28
  401200:	bd30      	pop	{r4, r5, pc}
  401202:	bf00      	nop
  401204:	00401485 	.word	0x00401485
  401208:	40018000 	.word	0x40018000

0040120c <wm8904_twi_init>:
 * \brief Initialize TWIHS connect to WM8904.
 *
 * \retun TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t wm8904_twi_init(void)
{
  40120c:	b510      	push	{r4, lr}
	pio_configure_pin(WM8904_TK_PIO, WM8904_TK_FLAGS);
  40120e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
{
  401212:	b084      	sub	sp, #16
	pio_configure_pin(WM8904_TK_PIO, WM8904_TK_FLAGS);
  401214:	4c15      	ldr	r4, [pc, #84]	; (40126c <wm8904_twi_init+0x60>)
  401216:	2021      	movs	r0, #33	; 0x21
  401218:	47a0      	blx	r4
	pio_configure_pin(WM8904_TF_PIO, WM8904_TF_FLAGS);
  40121a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40121e:	2020      	movs	r0, #32
  401220:	47a0      	blx	r4
	pio_configure_pin(WM8904_TD_PIO, WM8904_TD_FLAGS);
  401222:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401226:	207a      	movs	r0, #122	; 0x7a
  401228:	47a0      	blx	r4
	pio_configure_pin(WM8904_RK_PIO, WM8904_RK_FLAGS);
  40122a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40122e:	2016      	movs	r0, #22
  401230:	47a0      	blx	r4
	pio_configure_pin(WM8904_RF_PIO, WM8904_RF_FLAGS);
  401232:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401236:	2078      	movs	r0, #120	; 0x78
  401238:	47a0      	blx	r4
	pio_configure_pin(WM8904_RD_PIO, WM8904_RD_FLAGS);
  40123a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40123e:	200a      	movs	r0, #10
  401240:	47a0      	blx	r4
	pio_configure_pin(WM8904_PCK2_PIO, WM8904_PCK2_FLAGS);
  401242:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401246:	2012      	movs	r0, #18
  401248:	47a0      	blx	r4

static inline uint32_t twihs_master_setup(twihs_master_t p_twihs,
		twihs_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
	p_opt->smbus      = 0;
  40124a:	2200      	movs	r2, #0
	p_opt->master_clk = sysclk_get_peripheral_hz();
  40124c:	4908      	ldr	r1, [pc, #32]	; (401270 <wm8904_twi_init+0x64>)
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40124e:	2013      	movs	r0, #19

	twihs_options_t opt;
	opt.master_clk = sysclk_get_cpu_hz();
	opt.speed = WM8904_TWIHS_CLK;
  401250:	4c08      	ldr	r4, [pc, #32]	; (401274 <wm8904_twi_init+0x68>)
  401252:	4b09      	ldr	r3, [pc, #36]	; (401278 <wm8904_twi_init+0x6c>)
  401254:	9101      	str	r1, [sp, #4]
	p_opt->smbus      = 0;
  401256:	f88d 200d 	strb.w	r2, [sp, #13]
  40125a:	9402      	str	r4, [sp, #8]
  40125c:	4798      	blx	r3
#endif		
	} else {
		// Do Nothing
	}
#endif
	return (twihs_master_init(p_twihs, p_opt));
  40125e:	a901      	add	r1, sp, #4
  401260:	4b06      	ldr	r3, [pc, #24]	; (40127c <wm8904_twi_init+0x70>)
  401262:	4807      	ldr	r0, [pc, #28]	; (401280 <wm8904_twi_init+0x74>)
  401264:	4798      	blx	r3
	return twihs_master_setup(WM8904_TWIHS, &opt);
}
  401266:	b004      	add	sp, #16
  401268:	bd10      	pop	{r4, pc}
  40126a:	bf00      	nop
  40126c:	00401bd9 	.word	0x00401bd9
  401270:	08f0d180 	.word	0x08f0d180
  401274:	00061a80 	.word	0x00061a80
  401278:	00402229 	.word	0x00402229
  40127c:	004013a5 	.word	0x004013a5
  401280:	40018000 	.word	0x40018000

00401284 <ssc_reset>:
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_reset(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_SWRST;
	p_ssc->SSC_CMR = 0;
  401284:	2300      	movs	r3, #0
	p_ssc->SSC_CR = SSC_CR_SWRST;
  401286:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40128a:	6002      	str	r2, [r0, #0]
	p_ssc->SSC_CMR = 0;
  40128c:	6043      	str	r3, [r0, #4]
	p_ssc->SSC_RCMR = 0;
  40128e:	6103      	str	r3, [r0, #16]
	p_ssc->SSC_RFMR = 0;
  401290:	6143      	str	r3, [r0, #20]
	p_ssc->SSC_TCMR = 0;
  401292:	6183      	str	r3, [r0, #24]
	p_ssc->SSC_TFMR = 0;
  401294:	61c3      	str	r3, [r0, #28]
  401296:	4770      	bx	lr

00401298 <ssc_enable_rx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_rx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_RXEN;
  401298:	2301      	movs	r3, #1
  40129a:	6003      	str	r3, [r0, #0]
  40129c:	4770      	bx	lr
  40129e:	bf00      	nop

004012a0 <ssc_disable_rx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_disable_rx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_RXDIS;
  4012a0:	2302      	movs	r3, #2
  4012a2:	6003      	str	r3, [r0, #0]
  4012a4:	4770      	bx	lr
  4012a6:	bf00      	nop

004012a8 <ssc_enable_tx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_tx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_TXEN;
  4012a8:	f44f 7380 	mov.w	r3, #256	; 0x100
  4012ac:	6003      	str	r3, [r0, #0]
  4012ae:	4770      	bx	lr

004012b0 <ssc_disable_tx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_disable_tx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_TXDIS;
  4012b0:	f44f 7300 	mov.w	r3, #512	; 0x200
  4012b4:	6003      	str	r3, [r0, #0]
  4012b6:	4770      	bx	lr

004012b8 <ssc_set_receiver>:
 * \param p_rx_clk_opt Pointer to the receiver clock configuration structure.
 * \param p_rx_data_frame Pointer to the receiver data frame configuration structure.
 */
void ssc_set_receiver(Ssc *p_ssc, clock_opt_t *p_rx_clk_opt,
		data_frame_opt_t *p_rx_data_frame)
{
  4012b8:	b4f0      	push	{r4, r5, r6, r7}
	if (p_rx_clk_opt == NULL) {
  4012ba:	2900      	cmp	r1, #0
  4012bc:	d02f      	beq.n	40131e <ssc_set_receiver+0x66>
		p_ssc->SSC_RCMR = 0;
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  4012be:	6904      	ldr	r4, [r0, #16]
  4012c0:	68cf      	ldr	r7, [r1, #12]
  4012c2:	698e      	ldr	r6, [r1, #24]
  4012c4:	e891 0028 	ldmia.w	r1, {r3, r5}
  4012c8:	432b      	orrs	r3, r5
  4012ca:	688d      	ldr	r5, [r1, #8]
  4012cc:	4323      	orrs	r3, r4
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
				p_rx_clk_opt->ul_ckg |
				p_rx_clk_opt->ul_start_sel |
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  4012ce:	694c      	ldr	r4, [r1, #20]
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  4012d0:	432b      	orrs	r3, r5
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
  4012d2:	690d      	ldr	r5, [r1, #16]
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  4012d4:	0421      	lsls	r1, r4, #16
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  4012d6:	433b      	orrs	r3, r7
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  4012d8:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  4012dc:	4333      	orrs	r3, r6
  4012de:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  4012e2:	430b      	orrs	r3, r1
  4012e4:	6103      	str	r3, [r0, #16]
	}

	if (p_rx_data_frame == NULL) {
  4012e6:	b1ea      	cbz	r2, 401324 <ssc_set_receiver+0x6c>
		p_ssc->SSC_RFMR = 0;
	} else {
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  4012e8:	6954      	ldr	r4, [r2, #20]
  4012ea:	6853      	ldr	r3, [r2, #4]
  4012ec:	6991      	ldr	r1, [r2, #24]
  4012ee:	4323      	orrs	r3, r4
  4012f0:	6946      	ldr	r6, [r0, #20]
  4012f2:	6814      	ldr	r4, [r2, #0]
  4012f4:	430b      	orrs	r3, r1
				p_rx_data_frame->ul_msbf |
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  4012f6:	6891      	ldr	r1, [r2, #8]
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  4012f8:	f004 041f 	and.w	r4, r4, #31
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
  4012fc:	6915      	ldr	r5, [r2, #16]
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  4012fe:	4333      	orrs	r3, r6
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  401300:	68d2      	ldr	r2, [r2, #12]
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  401302:	0209      	lsls	r1, r1, #8
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  401304:	4323      	orrs	r3, r4
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  401306:	0412      	lsls	r2, r2, #16
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  401308:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  40130c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  401310:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  401314:	430b      	orrs	r3, r1
  401316:	4313      	orrs	r3, r2
				p_rx_data_frame->ul_fsos |
				p_rx_data_frame->ul_fsedge;
	}
}
  401318:	bcf0      	pop	{r4, r5, r6, r7}
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  40131a:	6143      	str	r3, [r0, #20]
}
  40131c:	4770      	bx	lr
		p_ssc->SSC_RCMR = 0;
  40131e:	6101      	str	r1, [r0, #16]
	if (p_rx_data_frame == NULL) {
  401320:	2a00      	cmp	r2, #0
  401322:	d1e1      	bne.n	4012e8 <ssc_set_receiver+0x30>
		p_ssc->SSC_RFMR = 0;
  401324:	6142      	str	r2, [r0, #20]
}
  401326:	bcf0      	pop	{r4, r5, r6, r7}
  401328:	4770      	bx	lr
  40132a:	bf00      	nop

0040132c <ssc_set_transmitter>:
 * \param p_tx_clk_opt Pointer to the transmitter clock configuration structure.
 * \param p_tx_data_frame Pointer to the transmitter data frame configuration structure.
 */
void ssc_set_transmitter(Ssc *p_ssc, clock_opt_t *p_tx_clk_opt,
		data_frame_opt_t *p_tx_data_frame)
{
  40132c:	b4f0      	push	{r4, r5, r6, r7}
	if (p_tx_clk_opt == NULL) {
  40132e:	2900      	cmp	r1, #0
  401330:	d02f      	beq.n	401392 <ssc_set_transmitter+0x66>
		p_ssc->SSC_TCMR = 0;
	} else {
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  401332:	6984      	ldr	r4, [r0, #24]
  401334:	68cf      	ldr	r7, [r1, #12]
  401336:	698e      	ldr	r6, [r1, #24]
  401338:	e891 0028 	ldmia.w	r1, {r3, r5}
  40133c:	432b      	orrs	r3, r5
  40133e:	688d      	ldr	r5, [r1, #8]
  401340:	4323      	orrs	r3, r4
				p_tx_clk_opt->ul_cko | p_tx_clk_opt->ul_cki |
				p_tx_clk_opt->ul_ckg |
				p_tx_clk_opt->ul_start_sel |
				SSC_TCMR_PERIOD(p_tx_clk_opt->ul_period) |
				SSC_TCMR_STTDLY(p_tx_clk_opt->ul_sttdly);
  401342:	694c      	ldr	r4, [r1, #20]
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  401344:	432b      	orrs	r3, r5
				SSC_TCMR_PERIOD(p_tx_clk_opt->ul_period) |
  401346:	690d      	ldr	r5, [r1, #16]
				SSC_TCMR_STTDLY(p_tx_clk_opt->ul_sttdly);
  401348:	0421      	lsls	r1, r4, #16
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  40134a:	433b      	orrs	r3, r7
				SSC_TCMR_STTDLY(p_tx_clk_opt->ul_sttdly);
  40134c:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  401350:	4333      	orrs	r3, r6
  401352:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  401356:	430b      	orrs	r3, r1
  401358:	6183      	str	r3, [r0, #24]
	}

	if (p_tx_data_frame == NULL) {
  40135a:	b1ea      	cbz	r2, 401398 <ssc_set_transmitter+0x6c>
		p_ssc->SSC_TFMR = 0;
	} else {
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  40135c:	6954      	ldr	r4, [r2, #20]
  40135e:	6853      	ldr	r3, [r2, #4]
  401360:	6991      	ldr	r1, [r2, #24]
  401362:	4323      	orrs	r3, r4
  401364:	69c6      	ldr	r6, [r0, #28]
  401366:	6814      	ldr	r4, [r2, #0]
  401368:	430b      	orrs	r3, r1
				p_tx_data_frame->ul_msbf |
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
  40136a:	6891      	ldr	r1, [r2, #8]
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  40136c:	f004 041f 	and.w	r4, r4, #31
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
				SSC_TFMR_FSLEN_EXT(p_tx_data_frame->ul_fslen_ext) |
  401370:	6915      	ldr	r5, [r2, #16]
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  401372:	4333      	orrs	r3, r6
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
  401374:	68d2      	ldr	r2, [r2, #12]
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
  401376:	0209      	lsls	r1, r1, #8
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  401378:	4323      	orrs	r3, r4
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
  40137a:	0412      	lsls	r2, r2, #16
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
  40137c:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  401380:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
  401384:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  401388:	430b      	orrs	r3, r1
  40138a:	4313      	orrs	r3, r2
				p_tx_data_frame->ul_fsos |
				p_tx_data_frame->ul_fsedge;
	}
}
  40138c:	bcf0      	pop	{r4, r5, r6, r7}
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  40138e:	61c3      	str	r3, [r0, #28]
}
  401390:	4770      	bx	lr
		p_ssc->SSC_TCMR = 0;
  401392:	6181      	str	r1, [r0, #24]
	if (p_tx_data_frame == NULL) {
  401394:	2a00      	cmp	r2, #0
  401396:	d1e1      	bne.n	40135c <ssc_set_transmitter+0x30>
		p_ssc->SSC_TFMR = 0;
  401398:	61c2      	str	r2, [r0, #28]
}
  40139a:	bcf0      	pop	{r4, r5, r6, r7}
  40139c:	4770      	bx	lr
  40139e:	bf00      	nop

004013a0 <ssc_disable_interrupt>:
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void ssc_disable_interrupt(Ssc *p_ssc, uint32_t ul_sources)
{
	p_ssc->SSC_IDR = ul_sources;
  4013a0:	6481      	str	r1, [r0, #72]	; 0x48
  4013a2:	4770      	bx	lr

004013a4 <twihs_master_init>:
 * \param p_opt Options for initializing the TWIHS module (see \ref twihs_options_t).
 *
 * \return TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twihs_master_init(Twihs *p_twihs, const twihs_options_t *p_opt)
{
  4013a4:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t status = TWIHS_SUCCESS;

	/* Disable TWIHS interrupts */
	p_twihs->TWIHS_IDR = ~0UL;
  4013a6:	f04f 33ff 	mov.w	r3, #4294967295
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  4013aa:	2680      	movs	r6, #128	; 0x80
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  4013ac:	2204      	movs	r2, #4
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  4013ae:	2508      	movs	r5, #8
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  4013b0:	2420      	movs	r4, #32
	p_twihs->TWIHS_IDR = ~0UL;
  4013b2:	6283      	str	r3, [r0, #40]	; 0x28
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4013b4:	4b2f      	ldr	r3, [pc, #188]	; (401474 <twihs_master_init+0xd0>)
	p_twihs->TWIHS_SR;
  4013b6:	6a07      	ldr	r7, [r0, #32]
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  4013b8:	6006      	str	r6, [r0, #0]
	p_twihs->TWIHS_RHR;
  4013ba:	6b06      	ldr	r6, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  4013bc:	6005      	str	r5, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  4013be:	6004      	str	r4, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  4013c0:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  4013c2:	684a      	ldr	r2, [r1, #4]
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4013c4:	429a      	cmp	r2, r3
  4013c6:	d84d      	bhi.n	401464 <twihs_master_init+0xc0>
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4013c8:	4c2b      	ldr	r4, [pc, #172]	; (401478 <twihs_master_init+0xd4>)
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  4013ca:	680b      	ldr	r3, [r1, #0]
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4013cc:	42a2      	cmp	r2, r4
  4013ce:	d92e      	bls.n	40142e <twihs_master_init+0x8a>
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4013d0:	4c2a      	ldr	r4, [pc, #168]	; (40147c <twihs_master_init+0xd8>)
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4013d2:	492b      	ldr	r1, [pc, #172]	; (401480 <twihs_master_init+0xdc>)
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4013d4:	4414      	add	r4, r2
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4013d6:	fba1 2103 	umull	r2, r1, r1, r3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4013da:	00a4      	lsls	r4, r4, #2
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4013dc:	0b89      	lsrs	r1, r1, #14
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4013de:	fbb3 f3f4 	udiv	r3, r3, r4
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4013e2:	3903      	subs	r1, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4013e4:	3b03      	subs	r3, #3
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4013e6:	29ff      	cmp	r1, #255	; 0xff
  4013e8:	d940      	bls.n	40146c <twihs_master_init+0xc8>
  4013ea:	2200      	movs	r2, #0
  4013ec:	e000      	b.n	4013f0 <twihs_master_init+0x4c>
  4013ee:	b13c      	cbz	r4, 401400 <twihs_master_init+0x5c>
			ckdiv++;
  4013f0:	3201      	adds	r2, #1
			cldiv /= TWIHS_CLK_DIVIDER;
  4013f2:	0849      	lsrs	r1, r1, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4013f4:	2a06      	cmp	r2, #6
  4013f6:	bf8c      	ite	hi
  4013f8:	2400      	movhi	r4, #0
  4013fa:	2401      	movls	r4, #1
  4013fc:	29ff      	cmp	r1, #255	; 0xff
  4013fe:	d8f6      	bhi.n	4013ee <twihs_master_init+0x4a>
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401400:	2bff      	cmp	r3, #255	; 0xff
  401402:	d907      	bls.n	401414 <twihs_master_init+0x70>
  401404:	b914      	cbnz	r4, 40140c <twihs_master_init+0x68>
  401406:	e005      	b.n	401414 <twihs_master_init+0x70>
  401408:	2a06      	cmp	r2, #6
  40140a:	d803      	bhi.n	401414 <twihs_master_init+0x70>
			chdiv /= TWIHS_CLK_DIVIDER;
  40140c:	085b      	lsrs	r3, r3, #1
			ckdiv++;
  40140e:	3201      	adds	r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401410:	2bff      	cmp	r3, #255	; 0xff
  401412:	d8f9      	bhi.n	401408 <twihs_master_init+0x64>
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401414:	021b      	lsls	r3, r3, #8
	uint32_t status = TWIHS_SUCCESS;
  401416:	2400      	movs	r4, #0
				TWIHS_CWGR_CKDIV(ckdiv);
  401418:	0412      	lsls	r2, r2, #16
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  40141a:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  40141c:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401420:	b2c9      	uxtb	r1, r1
  401422:	4313      	orrs	r3, r2
  401424:	430b      	orrs	r3, r1
		p_twihs->TWIHS_CWGR =
  401426:	6103      	str	r3, [r0, #16]
}
  401428:	4620      	mov	r0, r4
  40142a:	bcf0      	pop	{r4, r5, r6, r7}
  40142c:	4770      	bx	lr
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  40142e:	0052      	lsls	r2, r2, #1
  401430:	fbb3 f3f2 	udiv	r3, r3, r2
  401434:	3b03      	subs	r3, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401436:	2200      	movs	r2, #0
  401438:	2bff      	cmp	r3, #255	; 0xff
  40143a:	d802      	bhi.n	401442 <twihs_master_init+0x9e>
  40143c:	e008      	b.n	401450 <twihs_master_init+0xac>
  40143e:	2a06      	cmp	r2, #6
  401440:	d803      	bhi.n	40144a <twihs_master_init+0xa6>
			c_lh_div /= TWIHS_CLK_DIVIDER;
  401442:	085b      	lsrs	r3, r3, #1
			ckdiv++;
  401444:	3201      	adds	r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401446:	2bff      	cmp	r3, #255	; 0xff
  401448:	d8f9      	bhi.n	40143e <twihs_master_init+0x9a>
  40144a:	0412      	lsls	r2, r2, #16
  40144c:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401450:	0219      	lsls	r1, r3, #8
	uint32_t status = TWIHS_SUCCESS;
  401452:	2400      	movs	r4, #0
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401454:	b2db      	uxtb	r3, r3
  401456:	b289      	uxth	r1, r1
  401458:	4313      	orrs	r3, r2
  40145a:	430b      	orrs	r3, r1
		p_twihs->TWIHS_CWGR =
  40145c:	6103      	str	r3, [r0, #16]
}
  40145e:	4620      	mov	r0, r4
  401460:	bcf0      	pop	{r4, r5, r6, r7}
  401462:	4770      	bx	lr
		status = TWIHS_INVALID_ARGUMENT;
  401464:	2401      	movs	r4, #1
}
  401466:	4620      	mov	r0, r4
  401468:	bcf0      	pop	{r4, r5, r6, r7}
  40146a:	4770      	bx	lr
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40146c:	2401      	movs	r4, #1
	uint32_t ckdiv = 0;
  40146e:	2200      	movs	r2, #0
  401470:	e7c6      	b.n	401400 <twihs_master_init+0x5c>
  401472:	bf00      	nop
  401474:	00061a80 	.word	0x00061a80
  401478:	0005dc00 	.word	0x0005dc00
  40147c:	3ffd1200 	.word	0x3ffd1200
  401480:	057619f1 	.word	0x057619f1

00401484 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  401484:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  401486:	2a00      	cmp	r2, #0
  401488:	d053      	beq.n	401532 <twihs_master_read+0xae>
{
  40148a:	b470      	push	{r4, r5, r6}
	p_twihs->TWIHS_MMR = 0;
  40148c:	2600      	movs	r6, #0
	uint8_t *buffer = p_packet->buffer;
  40148e:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401490:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401492:	684b      	ldr	r3, [r1, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401494:	7c0d      	ldrb	r5, [r1, #16]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401496:	021b      	lsls	r3, r3, #8
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401498:	042d      	lsls	r5, r5, #16
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40149a:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  40149e:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  4014a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4014a6:	432b      	orrs	r3, r5
  4014a8:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  4014aa:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4014ac:	684b      	ldr	r3, [r1, #4]
	if (len == 0)
  4014ae:	b99b      	cbnz	r3, 4014d8 <twihs_master_read+0x54>
		return 0;
  4014b0:	461d      	mov	r5, r3
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  4014b2:	2301      	movs	r3, #1
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4014b4:	60c5      	str	r5, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  4014b6:	6003      	str	r3, [r0, #0]
		status = p_twihs->TWIHS_SR;
  4014b8:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4014ba:	05d9      	lsls	r1, r3, #23
  4014bc:	d41f      	bmi.n	4014fe <twihs_master_read+0x7a>
  4014be:	2a01      	cmp	r2, #1
  4014c0:	d020      	beq.n	401504 <twihs_master_read+0x80>
  4014c2:	f247 5130 	movw	r1, #30000	; 0x7530
		if (!(status & TWIHS_SR_RXRDY)) {
  4014c6:	079e      	lsls	r6, r3, #30
  4014c8:	d412      	bmi.n	4014f0 <twihs_master_read+0x6c>
		status = p_twihs->TWIHS_SR;
  4014ca:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4014cc:	05dd      	lsls	r5, r3, #23
  4014ce:	d416      	bmi.n	4014fe <twihs_master_read+0x7a>
		if (!timeout--) {
  4014d0:	3901      	subs	r1, #1
  4014d2:	d1f8      	bne.n	4014c6 <twihs_master_read+0x42>
			return TWIHS_ERROR_TIMEOUT;
  4014d4:	2009      	movs	r0, #9
  4014d6:	e02a      	b.n	40152e <twihs_master_read+0xaa>
	if (len > 1) {
  4014d8:	2b01      	cmp	r3, #1
	val = addr[0];
  4014da:	780d      	ldrb	r5, [r1, #0]
	if (len > 1) {
  4014dc:	dde9      	ble.n	4014b2 <twihs_master_read+0x2e>
		val |= addr[1];
  4014de:	784e      	ldrb	r6, [r1, #1]
	if (len > 2) {
  4014e0:	2b02      	cmp	r3, #2
		val |= addr[1];
  4014e2:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
	if (len > 2) {
  4014e6:	d0e4      	beq.n	4014b2 <twihs_master_read+0x2e>
		val |= addr[2];
  4014e8:	788b      	ldrb	r3, [r1, #2]
  4014ea:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
  4014ee:	e7e0      	b.n	4014b2 <twihs_master_read+0x2e>
		*buffer++ = p_twihs->TWIHS_RHR;
  4014f0:	6b03      	ldr	r3, [r0, #48]	; 0x30
		cnt--;
  4014f2:	3a01      	subs	r2, #1
		*buffer++ = p_twihs->TWIHS_RHR;
  4014f4:	f804 3b01 	strb.w	r3, [r4], #1
		status = p_twihs->TWIHS_SR;
  4014f8:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4014fa:	05d9      	lsls	r1, r3, #23
  4014fc:	d5df      	bpl.n	4014be <twihs_master_read+0x3a>
			return TWIHS_RECEIVE_NACK;
  4014fe:	2005      	movs	r0, #5
}
  401500:	bc70      	pop	{r4, r5, r6}
  401502:	4770      	bx	lr
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401504:	2102      	movs	r1, #2
		if (!(status & TWIHS_SR_RXRDY)) {
  401506:	079d      	lsls	r5, r3, #30
		if (status & TWIHS_SR_NACK) {
  401508:	f247 5230 	movw	r2, #30000	; 0x7530
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  40150c:	6001      	str	r1, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  40150e:	d407      	bmi.n	401520 <twihs_master_read+0x9c>
		status = p_twihs->TWIHS_SR;
  401510:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401512:	05de      	lsls	r6, r3, #23
  401514:	d4f3      	bmi.n	4014fe <twihs_master_read+0x7a>
		if (!timeout--) {
  401516:	3a01      	subs	r2, #1
  401518:	d0dc      	beq.n	4014d4 <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  40151a:	079d      	lsls	r5, r3, #30
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  40151c:	6001      	str	r1, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  40151e:	d5f7      	bpl.n	401510 <twihs_master_read+0x8c>
		*buffer++ = p_twihs->TWIHS_RHR;
  401520:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401522:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401524:	6a03      	ldr	r3, [r0, #32]
  401526:	07db      	lsls	r3, r3, #31
  401528:	d5fc      	bpl.n	401524 <twihs_master_read+0xa0>
	p_twihs->TWIHS_SR;
  40152a:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  40152c:	2000      	movs	r0, #0
}
  40152e:	bc70      	pop	{r4, r5, r6}
  401530:	4770      	bx	lr
		return TWIHS_INVALID_ARGUMENT;
  401532:	2001      	movs	r0, #1
  401534:	4770      	bx	lr
  401536:	bf00      	nop

00401538 <twihs_master_write>:
{
  401538:	4603      	mov	r3, r0
	uint32_t status, cnt = p_packet->length;
  40153a:	68c8      	ldr	r0, [r1, #12]
	if (cnt == 0) {
  40153c:	2800      	cmp	r0, #0
  40153e:	d034      	beq.n	4015aa <twihs_master_write+0x72>
{
  401540:	b470      	push	{r4, r5, r6}
	p_twihs->TWIHS_MMR = 0;
  401542:	2600      	movs	r6, #0
	uint8_t *buffer = p_packet->buffer;
  401544:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401546:	605e      	str	r6, [r3, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401548:	7c0a      	ldrb	r2, [r1, #16]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40154a:	684d      	ldr	r5, [r1, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  40154c:	0412      	lsls	r2, r2, #16
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40154e:	022d      	lsls	r5, r5, #8
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401550:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401554:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401558:	432a      	orrs	r2, r5
  40155a:	605a      	str	r2, [r3, #4]
	p_twihs->TWIHS_IADR = 0;
  40155c:	60de      	str	r6, [r3, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  40155e:	684a      	ldr	r2, [r1, #4]
	if (len == 0)
  401560:	b98a      	cbnz	r2, 401586 <twihs_master_write+0x4e>
		return 0;
  401562:	4615      	mov	r5, r2
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401564:	60dd      	str	r5, [r3, #12]
		status = p_twihs->TWIHS_SR;
  401566:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWIHS_SR_NACK) {
  401568:	05d6      	lsls	r6, r2, #23
  40156a:	d409      	bmi.n	401580 <twihs_master_write+0x48>
		if (!(status & TWIHS_SR_TXRDY)) {
  40156c:	0755      	lsls	r5, r2, #29
  40156e:	d5fa      	bpl.n	401566 <twihs_master_write+0x2e>
		p_twihs->TWIHS_THR = *buffer++;
  401570:	f814 2b01 	ldrb.w	r2, [r4], #1
	while (cnt > 0) {
  401574:	3801      	subs	r0, #1
		p_twihs->TWIHS_THR = *buffer++;
  401576:	635a      	str	r2, [r3, #52]	; 0x34
	while (cnt > 0) {
  401578:	d013      	beq.n	4015a2 <twihs_master_write+0x6a>
		status = p_twihs->TWIHS_SR;
  40157a:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWIHS_SR_NACK) {
  40157c:	05d6      	lsls	r6, r2, #23
  40157e:	d5f5      	bpl.n	40156c <twihs_master_write+0x34>
			return TWIHS_RECEIVE_NACK;
  401580:	2005      	movs	r0, #5
}
  401582:	bc70      	pop	{r4, r5, r6}
  401584:	4770      	bx	lr
	if (len > 1) {
  401586:	2a01      	cmp	r2, #1
	val = addr[0];
  401588:	780d      	ldrb	r5, [r1, #0]
	if (len > 1) {
  40158a:	ddeb      	ble.n	401564 <twihs_master_write+0x2c>
		val |= addr[1];
  40158c:	784e      	ldrb	r6, [r1, #1]
	if (len > 2) {
  40158e:	2a02      	cmp	r2, #2
		val |= addr[1];
  401590:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
	if (len > 2) {
  401594:	d0e6      	beq.n	401564 <twihs_master_write+0x2c>
		val |= addr[2];
  401596:	788a      	ldrb	r2, [r1, #2]
  401598:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
  40159c:	e7e2      	b.n	401564 <twihs_master_write+0x2c>
		if (status & TWIHS_SR_TXRDY) {
  40159e:	0751      	lsls	r1, r2, #29
  4015a0:	d405      	bmi.n	4015ae <twihs_master_write+0x76>
		status = p_twihs->TWIHS_SR;
  4015a2:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWIHS_SR_NACK) {
  4015a4:	05d4      	lsls	r4, r2, #23
  4015a6:	d4eb      	bmi.n	401580 <twihs_master_write+0x48>
  4015a8:	e7f9      	b.n	40159e <twihs_master_write+0x66>
		return TWIHS_INVALID_ARGUMENT;
  4015aa:	2001      	movs	r0, #1
  4015ac:	4770      	bx	lr
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4015ae:	2202      	movs	r2, #2
  4015b0:	601a      	str	r2, [r3, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4015b2:	6a1a      	ldr	r2, [r3, #32]
  4015b4:	07d2      	lsls	r2, r2, #31
  4015b6:	d5fc      	bpl.n	4015b2 <twihs_master_write+0x7a>
}
  4015b8:	bc70      	pop	{r4, r5, r6}
  4015ba:	4770      	bx	lr

004015bc <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4015bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4015be:	4603      	mov	r3, r0
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4015c0:	4c24      	ldr	r4, [pc, #144]	; (401654 <usart_init_rs232+0x98>)
	p_usart->US_MR = 0;
  4015c2:	2000      	movs	r0, #0
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4015c4:	f04f 0e88 	mov.w	lr, #136	; 0x88
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4015c8:	f8c3 40e4 	str.w	r4, [r3, #228]	; 0xe4
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4015cc:	2724      	movs	r7, #36	; 0x24
	p_usart->US_CR = US_CR_RSTSTA;
  4015ce:	f44f 7680 	mov.w	r6, #256	; 0x100
	p_usart->US_CR = US_CR_RTSDIS;
  4015d2:	f44f 2500 	mov.w	r5, #524288	; 0x80000
	ul_reg_val = 0;
  4015d6:	4c20      	ldr	r4, [pc, #128]	; (401658 <usart_init_rs232+0x9c>)
	p_usart->US_MR = 0;
  4015d8:	6058      	str	r0, [r3, #4]
	ul_reg_val = 0;
  4015da:	6020      	str	r0, [r4, #0]
	p_usart->US_RTOR = 0;
  4015dc:	6258      	str	r0, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4015de:	6298      	str	r0, [r3, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4015e0:	f8c3 e000 	str.w	lr, [r3]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4015e4:	601f      	str	r7, [r3, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  4015e6:	601e      	str	r6, [r3, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  4015e8:	601d      	str	r5, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4015ea:	b361      	cbz	r1, 401646 <usart_init_rs232+0x8a>
  4015ec:	6808      	ldr	r0, [r1, #0]
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4015ee:	0105      	lsls	r5, r0, #4
  4015f0:	42aa      	cmp	r2, r5
  4015f2:	d31c      	bcc.n	40162e <usart_init_rs232+0x72>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4015f4:	0868      	lsrs	r0, r5, #1
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4015f6:	f64f 76fe 	movw	r6, #65534	; 0xfffe
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4015fa:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
  4015fe:	fbb2 f2f5 	udiv	r2, r2, r5
	cd = cd_fp >> 3;
  401602:	08d5      	lsrs	r5, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401604:	1e68      	subs	r0, r5, #1
  401606:	42b0      	cmp	r0, r6
  401608:	d81d      	bhi.n	401646 <usart_init_rs232+0x8a>
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40160a:	0412      	lsls	r2, r2, #16
	p_usart->US_MR |= ul_reg_val;
  40160c:	2000      	movs	r0, #0
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40160e:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  401612:	432a      	orrs	r2, r5
  401614:	621a      	str	r2, [r3, #32]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401616:	684d      	ldr	r5, [r1, #4]
  401618:	688a      	ldr	r2, [r1, #8]
  40161a:	690f      	ldr	r7, [r1, #16]
  40161c:	432a      	orrs	r2, r5
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40161e:	68ce      	ldr	r6, [r1, #12]
	p_usart->US_MR |= ul_reg_val;
  401620:	6859      	ldr	r1, [r3, #4]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401622:	433a      	orrs	r2, r7
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401624:	4332      	orrs	r2, r6
	p_usart->US_MR |= ul_reg_val;
  401626:	4311      	orrs	r1, r2
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401628:	6022      	str	r2, [r4, #0]
	p_usart->US_MR |= ul_reg_val;
  40162a:	6059      	str	r1, [r3, #4]
  40162c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40162e:	00c0      	lsls	r0, r0, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401630:	f64f 76fe 	movw	r6, #65534	; 0xfffe
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401634:	00d2      	lsls	r2, r2, #3
  401636:	eb02 0250 	add.w	r2, r2, r0, lsr #1
  40163a:	fbb2 f2f0 	udiv	r2, r2, r0
	cd = cd_fp >> 3;
  40163e:	08d5      	lsrs	r5, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401640:	1e68      	subs	r0, r5, #1
  401642:	42b0      	cmp	r0, r6
  401644:	d901      	bls.n	40164a <usart_init_rs232+0x8e>
		return 1;
  401646:	2001      	movs	r0, #1
  401648:	bdf0      	pop	{r4, r5, r6, r7, pc}
		p_usart->US_MR |= US_MR_OVER;
  40164a:	6858      	ldr	r0, [r3, #4]
  40164c:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
  401650:	6058      	str	r0, [r3, #4]
  401652:	e7da      	b.n	40160a <usart_init_rs232+0x4e>
  401654:	55534100 	.word	0x55534100
  401658:	2041c09c 	.word	0x2041c09c

0040165c <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  40165c:	2340      	movs	r3, #64	; 0x40
  40165e:	6003      	str	r3, [r0, #0]
  401660:	4770      	bx	lr
  401662:	bf00      	nop

00401664 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  401664:	2310      	movs	r3, #16
  401666:	6003      	str	r3, [r0, #0]
  401668:	4770      	bx	lr
  40166a:	bf00      	nop

0040166c <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
  40166c:	6081      	str	r1, [r0, #8]
  40166e:	4770      	bx	lr

00401670 <usart_get_status>:
	return p_usart->US_CSR;
  401670:	6940      	ldr	r0, [r0, #20]
}
  401672:	4770      	bx	lr

00401674 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401674:	6942      	ldr	r2, [r0, #20]
{
  401676:	4603      	mov	r3, r0
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401678:	0792      	lsls	r2, r2, #30
  40167a:	d504      	bpl.n	401686 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  40167c:	f3c1 0108 	ubfx	r1, r1, #0, #9
	return 0;
  401680:	2000      	movs	r0, #0
	p_usart->US_THR = US_THR_TXCHR(c);
  401682:	61d9      	str	r1, [r3, #28]
	return 0;
  401684:	4770      	bx	lr
		return 1;
  401686:	2001      	movs	r0, #1
}
  401688:	4770      	bx	lr
  40168a:	bf00      	nop

0040168c <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40168c:	6943      	ldr	r3, [r0, #20]
  40168e:	07db      	lsls	r3, r3, #31
  401690:	d505      	bpl.n	40169e <usart_read+0x12>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401692:	6983      	ldr	r3, [r0, #24]
	return 0;
  401694:	2000      	movs	r0, #0
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401696:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40169a:	600b      	str	r3, [r1, #0]
	return 0;
  40169c:	4770      	bx	lr
		return 1;
  40169e:	2001      	movs	r0, #1
}
  4016a0:	4770      	bx	lr
  4016a2:	bf00      	nop

004016a4 <xdmac_configure_transfer>:
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4016a4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  4016a8:	6853      	ldr	r3, [r2, #4]
  4016aa:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  4016ac:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  4016ae:	6893      	ldr	r3, [r2, #8]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  4016b0:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  4016b2:	6813      	ldr	r3, [r2, #0]
  4016b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4016b8:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  4016ba:	6913      	ldr	r3, [r2, #16]
  4016bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4016c0:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  4016c2:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  4016c4:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  4016c6:	6993      	ldr	r3, [r2, #24]
  4016c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4016cc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  4016d0:	69d3      	ldr	r3, [r2, #28]
  4016d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4016d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  4016da:	68d3      	ldr	r3, [r2, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  4016dc:	678b      	str	r3, [r1, #120]	; 0x78
  4016de:	4770      	bx	lr

004016e0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4016e0:	b570      	push	{r4, r5, r6, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4016e2:	4810      	ldr	r0, [pc, #64]	; (401724 <sysclk_init+0x44>)
  4016e4:	4d10      	ldr	r5, [pc, #64]	; (401728 <sysclk_init+0x48>)
  4016e6:	47a8      	blx	r5
	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
		break;

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4016e8:	2020      	movs	r0, #32
  4016ea:	4b10      	ldr	r3, [pc, #64]	; (40172c <sysclk_init+0x4c>)
  4016ec:	4c10      	ldr	r4, [pc, #64]	; (401730 <sysclk_init+0x50>)
  4016ee:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4016f0:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4016f2:	2800      	cmp	r0, #0
  4016f4:	d0fc      	beq.n	4016f0 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4016f6:	4b0f      	ldr	r3, [pc, #60]	; (401734 <sysclk_init+0x54>)
  4016f8:	4798      	blx	r3
  4016fa:	4c0f      	ldr	r4, [pc, #60]	; (401738 <sysclk_init+0x58>)
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4016fc:	4b0f      	ldr	r3, [pc, #60]	; (40173c <sysclk_init+0x5c>)
  4016fe:	4a10      	ldr	r2, [pc, #64]	; (401740 <sysclk_init+0x60>)
  401700:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  401702:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401704:	2800      	cmp	r0, #0
  401706:	d0fc      	beq.n	401702 <sysclk_init+0x22>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  401708:	2002      	movs	r0, #2
  40170a:	4b0e      	ldr	r3, [pc, #56]	; (401744 <sysclk_init+0x64>)
  40170c:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40170e:	4b0e      	ldr	r3, [pc, #56]	; (401748 <sysclk_init+0x68>)
  401710:	2000      	movs	r0, #0
  401712:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401714:	4b0d      	ldr	r3, [pc, #52]	; (40174c <sysclk_init+0x6c>)
  401716:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401718:	462b      	mov	r3, r5
  40171a:	4802      	ldr	r0, [pc, #8]	; (401724 <sysclk_init+0x44>)

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  40171c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	system_init_flash(sysclk_get_cpu_hz());
  401720:	4718      	bx	r3
  401722:	bf00      	nop
  401724:	11e1a300 	.word	0x11e1a300
  401728:	00402495 	.word	0x00402495
  40172c:	004021ad 	.word	0x004021ad
  401730:	004021f9 	.word	0x004021f9
  401734:	00402209 	.word	0x00402209
  401738:	00402219 	.word	0x00402219
  40173c:	400e0600 	.word	0x400e0600
  401740:	20183f01 	.word	0x20183f01
  401744:	00402129 	.word	0x00402129
  401748:	00402159 	.word	0x00402159
  40174c:	004023ad 	.word	0x004023ad

00401750 <board_init>:

void board_init(void)
{
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401750:	4ba4      	ldr	r3, [pc, #656]	; (4019e4 <board_init+0x294>)
  401752:	f44f 4200 	mov.w	r2, #32768	; 0x8000
{
  401756:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	WDT->WDT_MR = WDT_MR_WDDIS;
  40175a:	605a      	str	r2, [r3, #4]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40175c:	f3bf 8f5f 	dmb	sy
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  401760:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 401a58 <board_init+0x308>
	dw_region_attr =
  401764:	4fa0      	ldr	r7, [pc, #640]	; (4019e8 <board_init+0x298>)
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  401766:	4ea1      	ldr	r6, [pc, #644]	; (4019ec <board_init+0x29c>)
  401768:	4640      	mov	r0, r8
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40176a:	4da1      	ldr	r5, [pc, #644]	; (4019f0 <board_init+0x2a0>)
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  40176c:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40176e:	ea40 0107 	orr.w	r1, r0, r7
  401772:	2011      	movs	r0, #17
  401774:	47a8      	blx	r5
		mpu_cal_mpu_region_size(IFLASH_END_ADDRESS - IFLASH_START_ADDRESS) |
  401776:	489f      	ldr	r0, [pc, #636]	; (4019f4 <board_init+0x2a4>)
  401778:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40177a:	499f      	ldr	r1, [pc, #636]	; (4019f8 <board_init+0x2a8>)
	dw_region_attr =
  40177c:	4c9f      	ldr	r4, [pc, #636]	; (4019fc <board_init+0x2ac>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40177e:	4301      	orrs	r1, r0
  401780:	489f      	ldr	r0, [pc, #636]	; (401a00 <board_init+0x2b0>)
  401782:	47a8      	blx	r5
		mpu_cal_mpu_region_size(DTCM_END_ADDRESS - DTCM_START_ADDRESS) |
  401784:	4640      	mov	r0, r8
  401786:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401788:	ea40 0107 	orr.w	r1, r0, r7
  40178c:	489d      	ldr	r0, [pc, #628]	; (401a04 <board_init+0x2b4>)
  40178e:	47a8      	blx	r5
		mpu_cal_mpu_region_size(SRAM_FIRST_END_ADDRESS - SRAM_FIRST_START_ADDRESS)
  401790:	489d      	ldr	r0, [pc, #628]	; (401a08 <board_init+0x2b8>)
  401792:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401794:	ea40 0104 	orr.w	r1, r0, r4
  401798:	489c      	ldr	r0, [pc, #624]	; (401a0c <board_init+0x2bc>)
  40179a:	47a8      	blx	r5
		mpu_cal_mpu_region_size(SRAM_SECOND_END_ADDRESS - SRAM_SECOND_START_ADDRESS) |
  40179c:	489c      	ldr	r0, [pc, #624]	; (401a10 <board_init+0x2c0>)
  40179e:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4017a0:	ea40 0104 	orr.w	r1, r0, r4
  4017a4:	489b      	ldr	r0, [pc, #620]	; (401a14 <board_init+0x2c4>)
  4017a6:	47a8      	blx	r5
		mpu_cal_mpu_region_size(PERIPHERALS_END_ADDRESS - PERIPHERALS_START_ADDRESS)
  4017a8:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  4017ac:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4017ae:	499a      	ldr	r1, [pc, #616]	; (401a18 <board_init+0x2c8>)
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  4017b0:	4c9a      	ldr	r4, [pc, #616]	; (401a1c <board_init+0x2cc>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4017b2:	4301      	orrs	r1, r0
  4017b4:	489a      	ldr	r0, [pc, #616]	; (401a20 <board_init+0x2d0>)
  4017b6:	47a8      	blx	r5
		mpu_cal_mpu_region_size(EXT_EBI_END_ADDRESS - EXT_EBI_START_ADDRESS) |
  4017b8:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  4017bc:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4017be:	4999      	ldr	r1, [pc, #612]	; (401a24 <board_init+0x2d4>)
  4017c0:	4301      	orrs	r1, r0
  4017c2:	4899      	ldr	r0, [pc, #612]	; (401a28 <board_init+0x2d8>)
  4017c4:	47a8      	blx	r5
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  4017c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  4017c8:	2005      	movs	r0, #5
  4017ca:	4a98      	ldr	r2, [pc, #608]	; (401a2c <board_init+0x2dc>)
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  4017cc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
  4017d0:	6263      	str	r3, [r4, #36]	; 0x24
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  4017d2:	4790      	blx	r2
  __ASM volatile ("dsb");
  4017d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4017d8:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb");
  4017dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4017e0:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4017e4:	f04f 0900 	mov.w	r9, #0
  4017e8:	f8c4 9250 	str.w	r9, [r4, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4017ec:	6963      	ldr	r3, [r4, #20]
  4017ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  4017f2:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb");
  4017f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4017f8:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4017fc:	4b8c      	ldr	r3, [pc, #560]	; (401a30 <board_init+0x2e0>)
  4017fe:	498d      	ldr	r1, [pc, #564]	; (401a34 <board_init+0x2e4>)
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401800:	4a8d      	ldr	r2, [pc, #564]	; (401a38 <board_init+0x2e8>)
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401802:	6059      	str	r1, [r3, #4]
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401804:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  401806:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40180a:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  40180e:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  401812:	f023 0301 	bic.w	r3, r3, #1
  401816:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  40181a:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
  40181e:	f023 0301 	bic.w	r3, r3, #1
  401822:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  __ASM volatile ("dsb");
  401826:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40182a:	f3bf 8f6f 	isb	sy
  40182e:	4c83      	ldr	r4, [pc, #524]	; (401a3c <board_init+0x2ec>)
  401830:	200a      	movs	r0, #10
  401832:	47a0      	blx	r4
  401834:	200b      	movs	r0, #11
  401836:	47a0      	blx	r4
  401838:	200c      	movs	r0, #12
  40183a:	47a0      	blx	r4
  40183c:	2010      	movs	r0, #16
  40183e:	47a0      	blx	r4
  401840:	2011      	movs	r0, #17
  401842:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401844:	f44f 7500 	mov.w	r5, #512	; 0x200
  401848:	4c7d      	ldr	r4, [pc, #500]	; (401a40 <board_init+0x2f0>)
  40184a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  40184e:	4f7d      	ldr	r7, [pc, #500]	; (401a44 <board_init+0x2f4>)
		base->PIO_PUDR = mask;
  401850:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401854:	6123      	str	r3, [r4, #16]
		base->PIO_PUDR = mask;
  401856:	2610      	movs	r6, #16
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401858:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_PUDR = mask;
  40185c:	f04f 0e08 	mov.w	lr, #8
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401860:	6323      	str	r3, [r4, #48]	; 0x30
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  401862:	4638      	mov	r0, r7
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401864:	613d      	str	r5, [r7, #16]
  401866:	464b      	mov	r3, r9
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401868:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
  40186c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401870:	633d      	str	r5, [r7, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401872:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401874:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  401878:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40187a:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40187e:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  401880:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  401882:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  401886:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  40188a:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 401a5c <board_init+0x30c>
  40188e:	f42c 7c00 	bic.w	ip, ip, #512	; 0x200
  401892:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401896:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40189a:	f42c 7c00 	bic.w	ip, ip, #512	; 0x200
  40189e:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4018a2:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4018a6:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4018aa:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4018ae:	6621      	str	r1, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4018b0:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4018b4:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4018b6:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4018b8:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4018bc:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  4018c0:	f42c 1c00 	bic.w	ip, ip, #2097152	; 0x200000
  4018c4:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4018c8:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  4018cc:	f42c 1c00 	bic.w	ip, ip, #2097152	; 0x200000
  4018d0:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4018d4:	6061      	str	r1, [r4, #4]
  4018d6:	f8d8 1114 	ldr.w	r1, [r8, #276]	; 0x114
  4018da:	ea41 0c06 	orr.w	ip, r1, r6
		base->PIO_PUDR = mask;
  4018de:	495a      	ldr	r1, [pc, #360]	; (401a48 <board_init+0x2f8>)
  4018e0:	f8c8 c114 	str.w	ip, [r8, #276]	; 0x114
  4018e4:	660e      	str	r6, [r1, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4018e6:	f8c1 6090 	str.w	r6, [r1, #144]	; 0x90
		base->PIO_MDDR = mask;
  4018ea:	654e      	str	r6, [r1, #84]	; 0x54
		base->PIO_IFDR = mask;
  4018ec:	624e      	str	r6, [r1, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4018ee:	f8c1 6080 	str.w	r6, [r1, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4018f2:	f8d1 c070 	ldr.w	ip, [r1, #112]	; 0x70
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  4018f6:	f8df 8168 	ldr.w	r8, [pc, #360]	; 401a60 <board_init+0x310>
  4018fa:	ea4c 0c06 	orr.w	ip, ip, r6
  4018fe:	f8c1 c070 	str.w	ip, [r1, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401902:	f8d1 c074 	ldr.w	ip, [r1, #116]	; 0x74
  401906:	ea4c 0c06 	orr.w	ip, ip, r6
  40190a:	f8c1 c074 	str.w	ip, [r1, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40190e:	604e      	str	r6, [r1, #4]
  401910:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
		base->PIO_PUDR = mask;
  401914:	f8c4 e060 	str.w	lr, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401918:	f8c4 e090 	str.w	lr, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40191c:	f8c4 e054 	str.w	lr, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401920:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401924:	f8c4 e080 	str.w	lr, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401928:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40192c:	f02c 0c08 	bic.w	ip, ip, #8
  401930:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401934:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  401938:	f02c 0c08 	bic.w	ip, ip, #8
  40193c:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401940:	f8c4 e004 	str.w	lr, [r4, #4]
		base->PIO_PUDR = mask;
  401944:	6626      	str	r6, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401946:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40194a:	6566      	str	r6, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40194c:	6266      	str	r6, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40194e:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401952:	f8d4 e070 	ldr.w	lr, [r4, #112]	; 0x70
  401956:	f02e 0e10 	bic.w	lr, lr, #16
  40195a:	f8c4 e070 	str.w	lr, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40195e:	f8d4 e074 	ldr.w	lr, [r4, #116]	; 0x74
  401962:	f02e 0e10 	bic.w	lr, lr, #16
  401966:	f8c4 e074 	str.w	lr, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40196a:	6066      	str	r6, [r4, #4]
  40196c:	47c0      	blx	r8
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  40196e:	464b      	mov	r3, r9
  401970:	4638      	mov	r0, r7
  401972:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401976:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40197a:	47c0      	blx	r8
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  40197c:	4638      	mov	r0, r7
  40197e:	2301      	movs	r3, #1
  401980:	22ff      	movs	r2, #255	; 0xff
  401982:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401986:	47c0      	blx	r8
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  401988:	2301      	movs	r3, #1
  40198a:	223f      	movs	r2, #63	; 0x3f
  40198c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401990:	482e      	ldr	r0, [pc, #184]	; (401a4c <board_init+0x2fc>)
  401992:	47c0      	blx	r8
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  401994:	4620      	mov	r0, r4
  401996:	2301      	movs	r3, #1
  401998:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  40199c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4019a0:	47c0      	blx	r8
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  4019a2:	4638      	mov	r0, r7
  4019a4:	2301      	movs	r3, #1
  4019a6:	f44f 7280 	mov.w	r2, #256	; 0x100
  4019aa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4019ae:	47c0      	blx	r8
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  4019b0:	4638      	mov	r0, r7
  4019b2:	2301      	movs	r3, #1
  4019b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4019b8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4019bc:	47c0      	blx	r8
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  4019be:	2301      	movs	r3, #1
  4019c0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4019c4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4019c8:	4821      	ldr	r0, [pc, #132]	; (401a50 <board_init+0x300>)
  4019ca:	47c0      	blx	r8
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  4019cc:	464b      	mov	r3, r9
  4019ce:	462a      	mov	r2, r5
  4019d0:	4638      	mov	r0, r7
  4019d2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4019d6:	47c0      	blx	r8
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  4019d8:	4629      	mov	r1, r5
  4019da:	4638      	mov	r0, r7
  4019dc:	4b1d      	ldr	r3, [pc, #116]	; (401a54 <board_init+0x304>)
	pio_configure_pin(ISI_PCK_PIO, ISI_PCK_FLAGS);
	pio_configure_pin(ISI_PCK0_PIO, ISI_PCK0_FLAGS);
	pio_configure_pin(OV_PWD_GPIO, OV_PWD_FLAGS);
	pio_configure_pin(OV_RST_GPIO, OV_RST_FLAGS);
#endif
}
  4019de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  4019e2:	4718      	bx	r3
  4019e4:	400e1850 	.word	0x400e1850
  4019e8:	01000001 	.word	0x01000001
  4019ec:	00401a7d 	.word	0x00401a7d
  4019f0:	00401a71 	.word	0x00401a71
  4019f4:	001fffff 	.word	0x001fffff
  4019f8:	06230001 	.word	0x06230001
  4019fc:	03230001 	.word	0x03230001
  401a00:	00400012 	.word	0x00400012
  401a04:	20000013 	.word	0x20000013
  401a08:	0003ffff 	.word	0x0003ffff
  401a0c:	20400014 	.word	0x20400014
  401a10:	0001ffff 	.word	0x0001ffff
  401a14:	20440015 	.word	0x20440015
  401a18:	13010001 	.word	0x13010001
  401a1c:	e000ed00 	.word	0xe000ed00
  401a20:	40000016 	.word	0x40000016
  401a24:	03000001 	.word	0x03000001
  401a28:	60000017 	.word	0x60000017
  401a2c:	00401a65 	.word	0x00401a65
  401a30:	400e0c00 	.word	0x400e0c00
  401a34:	5a00080c 	.word	0x5a00080c
  401a38:	5a00070c 	.word	0x5a00070c
  401a3c:	00402229 	.word	0x00402229
  401a40:	400e0e00 	.word	0x400e0e00
  401a44:	400e1200 	.word	0x400e1200
  401a48:	400e1000 	.word	0x400e1000
  401a4c:	400e1600 	.word	0x400e1600
  401a50:	400e1400 	.word	0x400e1400
  401a54:	00401aa1 	.word	0x00401aa1
  401a58:	003fffff 	.word	0x003fffff
  401a5c:	40088000 	.word	0x40088000
  401a60:	00401aa5 	.word	0x00401aa5

00401a64 <mpu_enable>:
 *
 * \param dwMPUEnable  Enable/Disable the memory region.
 */
void mpu_enable(uint32_t dw_mpu_enable)
{
	MPU->CTRL = dw_mpu_enable ;
  401a64:	4b01      	ldr	r3, [pc, #4]	; (401a6c <mpu_enable+0x8>)
  401a66:	6058      	str	r0, [r3, #4]
  401a68:	4770      	bx	lr
  401a6a:	bf00      	nop
  401a6c:	e000ed90 	.word	0xe000ed90

00401a70 <mpu_set_region>:
 * \param dwRegionBaseAddr  Memory region base address.
 * \param dwRegionAttr  Memory region attributes.
 */
void mpu_set_region(uint32_t dw_region_base_addr, uint32_t dw_region_attr)
{
	MPU->RBAR = dw_region_base_addr;
  401a70:	4b01      	ldr	r3, [pc, #4]	; (401a78 <mpu_set_region+0x8>)
  401a72:	60d8      	str	r0, [r3, #12]
	MPU->RASR = dw_region_attr;
  401a74:	6119      	str	r1, [r3, #16]
  401a76:	4770      	bx	lr
  401a78:	e000ed90 	.word	0xe000ed90

00401a7c <mpu_cal_mpu_region_size>:
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;

	while( dwReturnValue < 31 ) {
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  401a7c:	2820      	cmp	r0, #32
  401a7e:	d90d      	bls.n	401a9c <mpu_cal_mpu_region_size+0x20>
  401a80:	2240      	movs	r2, #64	; 0x40
  401a82:	2305      	movs	r3, #5
  401a84:	e002      	b.n	401a8c <mpu_cal_mpu_region_size+0x10>
			break;
		} else {
			dwReturnValue++;
  401a86:	3301      	adds	r3, #1
	while( dwReturnValue < 31 ) {
  401a88:	2b1f      	cmp	r3, #31
  401a8a:	d005      	beq.n	401a98 <mpu_cal_mpu_region_size+0x1c>
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  401a8c:	4290      	cmp	r0, r2
		}
		dwRegionSize <<= 1;
  401a8e:	ea4f 0242 	mov.w	r2, r2, lsl #1
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  401a92:	d8f8      	bhi.n	401a86 <mpu_cal_mpu_region_size+0xa>
  401a94:	0058      	lsls	r0, r3, #1
  401a96:	4770      	bx	lr
  401a98:	203e      	movs	r0, #62	; 0x3e
  401a9a:	4770      	bx	lr
  401a9c:	2008      	movs	r0, #8
	}

	return ( dwReturnValue << 1 );
}
  401a9e:	4770      	bx	lr

00401aa0 <pio_set>:
  401aa0:	6301      	str	r1, [r0, #48]	; 0x30
  401aa2:	4770      	bx	lr

00401aa4 <pio_configure>:
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
	/* Configure pins */
	switch (ul_type) {
  401aa4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
{
  401aa8:	b430      	push	{r4, r5}
	switch (ul_type) {
  401aaa:	d03b      	beq.n	401b24 <pio_configure+0x80>
  401aac:	d931      	bls.n	401b12 <pio_configure+0x6e>
  401aae:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401ab2:	d01b      	beq.n	401aec <pio_configure+0x48>
  401ab4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401ab8:	d018      	beq.n	401aec <pio_configure+0x48>
  401aba:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401abe:	d003      	beq.n	401ac8 <pio_configure+0x24>
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
		break;

	default:
		return 0;
  401ac0:	2300      	movs	r3, #0
	}

	return 1;
}
  401ac2:	bc30      	pop	{r4, r5}
  401ac4:	4618      	mov	r0, r3
  401ac6:	4770      	bx	lr
	if (ul_pull_up_enable) {
  401ac8:	07dd      	lsls	r5, r3, #31
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401aca:	6442      	str	r2, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401acc:	d448      	bmi.n	401b60 <pio_configure+0xbc>
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401ace:	f013 0f0a 	tst.w	r3, #10
		p_pio->PIO_PUDR = ul_mask;
  401ad2:	6602      	str	r2, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401ad4:	d048      	beq.n	401b68 <pio_configure+0xc4>
	if (ul_attribute & PIO_DEGLITCH) {
  401ad6:	079c      	lsls	r4, r3, #30
		p_pio->PIO_IFER = ul_mask;
  401ad8:	6202      	str	r2, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  401ada:	d548      	bpl.n	401b6e <pio_configure+0xca>
		p_pio->PIO_IFSCDR = ul_mask;
  401adc:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
	return 1;
  401ae0:	2301      	movs	r3, #1
	p_pio->PIO_ODR = ul_mask;
  401ae2:	6142      	str	r2, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401ae4:	6002      	str	r2, [r0, #0]
}
  401ae6:	4618      	mov	r0, r3
  401ae8:	bc30      	pop	{r4, r5}
  401aea:	4770      	bx	lr
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  401aec:	f003 0404 	and.w	r4, r3, #4
	if (ul_pull_up_enable) {
  401af0:	07db      	lsls	r3, r3, #31
	p_pio->PIO_IDR = ul_mask;
  401af2:	6442      	str	r2, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401af4:	d52f      	bpl.n	401b56 <pio_configure+0xb2>
		p_pio->PIO_PUER = ul_mask;
  401af6:	6642      	str	r2, [r0, #100]	; 0x64
	if (ul_multidrive_enable) {
  401af8:	2c00      	cmp	r4, #0
  401afa:	d02f      	beq.n	401b5c <pio_configure+0xb8>
		p_pio->PIO_MDER = ul_mask;
  401afc:	6502      	str	r2, [r0, #80]	; 0x50
	if (ul_default_level) {
  401afe:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401b02:	d04e      	beq.n	401ba2 <pio_configure+0xfe>
		p_pio->PIO_CODR = ul_mask;
  401b04:	6342      	str	r2, [r0, #52]	; 0x34
	return 1;
  401b06:	2301      	movs	r3, #1
	p_pio->PIO_OER = ul_mask;
  401b08:	6102      	str	r2, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401b0a:	6002      	str	r2, [r0, #0]
}
  401b0c:	4618      	mov	r0, r3
  401b0e:	bc30      	pop	{r4, r5}
  401b10:	4770      	bx	lr
	switch (ul_type) {
  401b12:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401b16:	d005      	beq.n	401b24 <pio_configure+0x80>
  401b18:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401b1c:	d002      	beq.n	401b24 <pio_configure+0x80>
  401b1e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401b22:	d1cd      	bne.n	401ac0 <pio_configure+0x1c>
	switch (ul_type) {
  401b24:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
	p_pio->PIO_IDR = ul_mask;
  401b28:	6442      	str	r2, [r0, #68]	; 0x44
	switch (ul_type) {
  401b2a:	d03c      	beq.n	401ba6 <pio_configure+0x102>
  401b2c:	d924      	bls.n	401b78 <pio_configure+0xd4>
  401b2e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401b32:	d042      	beq.n	401bba <pio_configure+0x116>
  401b34:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401b38:	d105      	bne.n	401b46 <pio_configure+0xa2>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401b3a:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401b3c:	4311      	orrs	r1, r2
  401b3e:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401b40:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401b42:	4311      	orrs	r1, r2
  401b44:	6741      	str	r1, [r0, #116]	; 0x74
	if (ul_pull_up_enable) {
  401b46:	07db      	lsls	r3, r3, #31
	p_pio->PIO_PDR = ul_mask;
  401b48:	6042      	str	r2, [r0, #4]
	if (ul_pull_up_enable) {
  401b4a:	d525      	bpl.n	401b98 <pio_configure+0xf4>
	return 1;
  401b4c:	2301      	movs	r3, #1
		p_pio->PIO_PUER = ul_mask;
  401b4e:	6642      	str	r2, [r0, #100]	; 0x64
}
  401b50:	4618      	mov	r0, r3
  401b52:	bc30      	pop	{r4, r5}
  401b54:	4770      	bx	lr
		p_pio->PIO_PUDR = ul_mask;
  401b56:	6602      	str	r2, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  401b58:	2c00      	cmp	r4, #0
  401b5a:	d1cf      	bne.n	401afc <pio_configure+0x58>
		p_pio->PIO_MDDR = ul_mask;
  401b5c:	6542      	str	r2, [r0, #84]	; 0x54
  401b5e:	e7ce      	b.n	401afe <pio_configure+0x5a>
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401b60:	f013 0f0a 	tst.w	r3, #10
		p_pio->PIO_PUER = ul_mask;
  401b64:	6642      	str	r2, [r0, #100]	; 0x64
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401b66:	d1b6      	bne.n	401ad6 <pio_configure+0x32>
	if (ul_attribute & PIO_DEGLITCH) {
  401b68:	079c      	lsls	r4, r3, #30
		p_pio->PIO_IFDR = ul_mask;
  401b6a:	6242      	str	r2, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  401b6c:	d4b6      	bmi.n	401adc <pio_configure+0x38>
		if (ul_attribute & PIO_DEBOUNCE) {
  401b6e:	0719      	lsls	r1, r3, #28
  401b70:	d5b6      	bpl.n	401ae0 <pio_configure+0x3c>
			p_pio->PIO_IFSCER = ul_mask;
  401b72:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  401b76:	e7b3      	b.n	401ae0 <pio_configure+0x3c>
	switch (ul_type) {
  401b78:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401b7c:	d1e3      	bne.n	401b46 <pio_configure+0xa2>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401b7e:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401b80:	43d1      	mvns	r1, r2
  401b82:	6f05      	ldr	r5, [r0, #112]	; 0x70
  401b84:	402c      	ands	r4, r5
  401b86:	460d      	mov	r5, r1
  401b88:	400c      	ands	r4, r1
  401b8a:	6704      	str	r4, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401b8c:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401b8e:	6f44      	ldr	r4, [r0, #116]	; 0x74
  401b90:	4021      	ands	r1, r4
  401b92:	4029      	ands	r1, r5
  401b94:	6741      	str	r1, [r0, #116]	; 0x74
  401b96:	e7d6      	b.n	401b46 <pio_configure+0xa2>
	return 1;
  401b98:	2301      	movs	r3, #1
		p_pio->PIO_PUDR = ul_mask;
  401b9a:	6602      	str	r2, [r0, #96]	; 0x60
}
  401b9c:	4618      	mov	r0, r3
  401b9e:	bc30      	pop	{r4, r5}
  401ba0:	4770      	bx	lr
		p_pio->PIO_SODR = ul_mask;
  401ba2:	6302      	str	r2, [r0, #48]	; 0x30
  401ba4:	e7af      	b.n	401b06 <pio_configure+0x62>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401ba6:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401ba8:	4311      	orrs	r1, r2
  401baa:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401bac:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401bae:	6f44      	ldr	r4, [r0, #116]	; 0x74
  401bb0:	4021      	ands	r1, r4
  401bb2:	ea21 0102 	bic.w	r1, r1, r2
  401bb6:	6741      	str	r1, [r0, #116]	; 0x74
  401bb8:	e7c5      	b.n	401b46 <pio_configure+0xa2>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401bba:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401bbc:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401bbe:	4021      	ands	r1, r4
  401bc0:	ea21 0102 	bic.w	r1, r1, r2
  401bc4:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401bc6:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401bc8:	4311      	orrs	r1, r2
  401bca:	6741      	str	r1, [r0, #116]	; 0x74
  401bcc:	e7bb      	b.n	401b46 <pio_configure+0xa2>
  401bce:	bf00      	nop

00401bd0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401bd0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401bd2:	4770      	bx	lr

00401bd4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401bd4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401bd6:	4770      	bx	lr

00401bd8 <pio_configure_pin>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401bd8:	4b53      	ldr	r3, [pc, #332]	; (401d28 <pio_configure_pin+0x150>)
	switch (ul_flags & PIO_TYPE_Msk) {
  401bda:	f001 42f0 	and.w	r2, r1, #2013265920	; 0x78000000
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401bde:	eb03 1350 	add.w	r3, r3, r0, lsr #5
	switch (ul_flags & PIO_TYPE_Msk) {
  401be2:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
{
  401be6:	b470      	push	{r4, r5, r6}
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401be8:	ea4f 2343 	mov.w	r3, r3, lsl #9
	switch (ul_flags & PIO_TYPE_Msk) {
  401bec:	d06d      	beq.n	401cca <pio_configure_pin+0xf2>
  401bee:	d80b      	bhi.n	401c08 <pio_configure_pin+0x30>
  401bf0:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
  401bf4:	d027      	beq.n	401c46 <pio_configure_pin+0x6e>
  401bf6:	f1b2 5fc0 	cmp.w	r2, #402653184	; 0x18000000
  401bfa:	d052      	beq.n	401ca2 <pio_configure_pin+0xca>
  401bfc:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
  401c00:	d038      	beq.n	401c74 <pio_configure_pin+0x9c>
		return 0;
  401c02:	2000      	movs	r0, #0
}
  401c04:	bc70      	pop	{r4, r5, r6}
  401c06:	4770      	bx	lr
	switch (ul_flags & PIO_TYPE_Msk) {
  401c08:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
  401c0c:	d066      	beq.n	401cdc <pio_configure_pin+0x104>
  401c0e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401c12:	d063      	beq.n	401cdc <pio_configure_pin+0x104>
  401c14:	f1b2 5f20 	cmp.w	r2, #671088640	; 0x28000000
  401c18:	d1f3      	bne.n	401c02 <pio_configure_pin+0x2a>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401c1a:	f000 001f 	and.w	r0, r0, #31
  401c1e:	2201      	movs	r2, #1
	if (ul_pull_up_enable) {
  401c20:	07cd      	lsls	r5, r1, #31
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401c22:	fa02 f200 	lsl.w	r2, r2, r0
	p_pio->PIO_IDR = ul_mask;
  401c26:	645a      	str	r2, [r3, #68]	; 0x44
	if (ul_pull_up_enable) {
  401c28:	d573      	bpl.n	401d12 <pio_configure_pin+0x13a>
		p_pio->PIO_PUER = ul_mask;
  401c2a:	665a      	str	r2, [r3, #100]	; 0x64
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401c2c:	f011 0f0a 	tst.w	r1, #10
  401c30:	d06d      	beq.n	401d0e <pio_configure_pin+0x136>
		p_pio->PIO_IFER = ul_mask;
  401c32:	621a      	str	r2, [r3, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  401c34:	078c      	lsls	r4, r1, #30
  401c36:	d56e      	bpl.n	401d16 <pio_configure_pin+0x13e>
		p_pio->PIO_IFSCDR = ul_mask;
  401c38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  401c3c:	615a      	str	r2, [r3, #20]
	return 1;
  401c3e:	2001      	movs	r0, #1
	p_pio->PIO_PER = ul_mask;
  401c40:	601a      	str	r2, [r3, #0]
}
  401c42:	bc70      	pop	{r4, r5, r6}
  401c44:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401c46:	f000 021f 	and.w	r2, r0, #31
  401c4a:	2001      	movs	r0, #1
	if (ul_pull_up_enable) {
  401c4c:	07c9      	lsls	r1, r1, #31
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401c4e:	fa00 f202 	lsl.w	r2, r0, r2
	p_pio->PIO_IDR = ul_mask;
  401c52:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c54:	6f1c      	ldr	r4, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401c56:	ea44 0402 	orr.w	r4, r4, r2
  401c5a:	671c      	str	r4, [r3, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401c5c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401c5e:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  401c60:	ea04 0405 	and.w	r4, r4, r5
  401c64:	ea24 0402 	bic.w	r4, r4, r2
  401c68:	675c      	str	r4, [r3, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  401c6a:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
  401c6c:	d516      	bpl.n	401c9c <pio_configure_pin+0xc4>
		p_pio->PIO_PUER = ul_mask;
  401c6e:	665a      	str	r2, [r3, #100]	; 0x64
}
  401c70:	bc70      	pop	{r4, r5, r6}
  401c72:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401c74:	f000 021f 	and.w	r2, r0, #31
  401c78:	2001      	movs	r0, #1
  401c7a:	fa00 f202 	lsl.w	r2, r0, r2
	p_pio->PIO_IDR = ul_mask;
  401c7e:	645a      	str	r2, [r3, #68]	; 0x44
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401c80:	43d6      	mvns	r6, r2
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c82:	6f1d      	ldr	r5, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401c84:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  401c86:	4025      	ands	r5, r4
  401c88:	4035      	ands	r5, r6
  401c8a:	671d      	str	r5, [r3, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401c8c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401c8e:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  401c90:	402c      	ands	r4, r5
  401c92:	4034      	ands	r4, r6
  401c94:	675c      	str	r4, [r3, #116]	; 0x74
	if (ul_pull_up_enable) {
  401c96:	07cc      	lsls	r4, r1, #31
	p_pio->PIO_PDR = ul_mask;
  401c98:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
  401c9a:	d4e8      	bmi.n	401c6e <pio_configure_pin+0x96>
		p_pio->PIO_PUDR = ul_mask;
  401c9c:	661a      	str	r2, [r3, #96]	; 0x60
}
  401c9e:	bc70      	pop	{r4, r5, r6}
  401ca0:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401ca2:	f000 021f 	and.w	r2, r0, #31
  401ca6:	2001      	movs	r0, #1
  401ca8:	fa00 f202 	lsl.w	r2, r0, r2
	p_pio->PIO_IDR = ul_mask;
  401cac:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABCDSR[0];
  401cae:	6f1c      	ldr	r4, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401cb0:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  401cb2:	402c      	ands	r4, r5
  401cb4:	ea24 0402 	bic.w	r4, r4, r2
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401cb8:	671c      	str	r4, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
  401cba:	07ce      	lsls	r6, r1, #31
		ul_sr = p_pio->PIO_ABCDSR[1];
  401cbc:	6f5c      	ldr	r4, [r3, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401cbe:	ea44 0402 	orr.w	r4, r4, r2
  401cc2:	675c      	str	r4, [r3, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  401cc4:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
  401cc6:	d5e9      	bpl.n	401c9c <pio_configure_pin+0xc4>
  401cc8:	e7d1      	b.n	401c6e <pio_configure_pin+0x96>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401cca:	f000 021f 	and.w	r2, r0, #31
  401cce:	2001      	movs	r0, #1
  401cd0:	fa00 f202 	lsl.w	r2, r0, r2
	p_pio->PIO_IDR = ul_mask;
  401cd4:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABCDSR[0];
  401cd6:	6f1c      	ldr	r4, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401cd8:	4314      	orrs	r4, r2
  401cda:	e7ed      	b.n	401cb8 <pio_configure_pin+0xe0>
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401cdc:	f000 001f 	and.w	r0, r0, #31
  401ce0:	2201      	movs	r2, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401ce2:	f001 5460 	and.w	r4, r1, #939524096	; 0x38000000
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  401ce6:	f001 0504 	and.w	r5, r1, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401cea:	4082      	lsls	r2, r0
	if (ul_pull_up_enable) {
  401cec:	07c9      	lsls	r1, r1, #31
	p_pio->PIO_IDR = ul_mask;
  401cee:	645a      	str	r2, [r3, #68]	; 0x44
	if (ul_pull_up_enable) {
  401cf0:	d50b      	bpl.n	401d0a <pio_configure_pin+0x132>
		p_pio->PIO_PUER = ul_mask;
  401cf2:	665a      	str	r2, [r3, #100]	; 0x64
	if (ul_multidrive_enable) {
  401cf4:	b1a5      	cbz	r5, 401d20 <pio_configure_pin+0x148>
		p_pio->PIO_MDER = ul_mask;
  401cf6:	651a      	str	r2, [r3, #80]	; 0x50
	if (ul_default_level) {
  401cf8:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
  401cfc:	d012      	beq.n	401d24 <pio_configure_pin+0x14c>
		p_pio->PIO_CODR = ul_mask;
  401cfe:	635a      	str	r2, [r3, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  401d00:	611a      	str	r2, [r3, #16]
	return 1;
  401d02:	2001      	movs	r0, #1
	p_pio->PIO_PER = ul_mask;
  401d04:	601a      	str	r2, [r3, #0]
}
  401d06:	bc70      	pop	{r4, r5, r6}
  401d08:	4770      	bx	lr
		p_pio->PIO_PUDR = ul_mask;
  401d0a:	661a      	str	r2, [r3, #96]	; 0x60
  401d0c:	e7f2      	b.n	401cf4 <pio_configure_pin+0x11c>
		p_pio->PIO_IFDR = ul_mask;
  401d0e:	625a      	str	r2, [r3, #36]	; 0x24
  401d10:	e790      	b.n	401c34 <pio_configure_pin+0x5c>
		p_pio->PIO_PUDR = ul_mask;
  401d12:	661a      	str	r2, [r3, #96]	; 0x60
  401d14:	e78a      	b.n	401c2c <pio_configure_pin+0x54>
		if (ul_attribute & PIO_DEBOUNCE) {
  401d16:	0708      	lsls	r0, r1, #28
  401d18:	d590      	bpl.n	401c3c <pio_configure_pin+0x64>
			p_pio->PIO_IFSCER = ul_mask;
  401d1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  401d1e:	e78d      	b.n	401c3c <pio_configure_pin+0x64>
		p_pio->PIO_MDDR = ul_mask;
  401d20:	655a      	str	r2, [r3, #84]	; 0x54
  401d22:	e7e9      	b.n	401cf8 <pio_configure_pin+0x120>
		p_pio->PIO_SODR = ul_mask;
  401d24:	631a      	str	r2, [r3, #48]	; 0x30
  401d26:	e7eb      	b.n	401d00 <pio_configure_pin+0x128>
  401d28:	00200707 	.word	0x00200707

00401d2c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401d2c:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  401d2e:	4b2e      	ldr	r3, [pc, #184]	; (401de8 <PIOA_Handler+0xbc>)
  401d30:	482e      	ldr	r0, [pc, #184]	; (401dec <PIOA_Handler+0xc0>)
  401d32:	4798      	blx	r3
  401d34:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401d36:	4b2e      	ldr	r3, [pc, #184]	; (401df0 <PIOA_Handler+0xc4>)
  401d38:	482c      	ldr	r0, [pc, #176]	; (401dec <PIOA_Handler+0xc0>)
  401d3a:	4798      	blx	r3
	if (status != 0) {
  401d3c:	4005      	ands	r5, r0
  401d3e:	d015      	beq.n	401d6c <PIOA_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401d40:	4c2c      	ldr	r4, [pc, #176]	; (401df4 <PIOA_Handler+0xc8>)
  401d42:	6820      	ldr	r0, [r4, #0]
  401d44:	280a      	cmp	r0, #10
  401d46:	d019      	beq.n	401d7c <PIOA_Handler+0x50>
  401d48:	6920      	ldr	r0, [r4, #16]
  401d4a:	280a      	cmp	r0, #10
  401d4c:	d01f      	beq.n	401d8e <PIOA_Handler+0x62>
  401d4e:	6a20      	ldr	r0, [r4, #32]
  401d50:	280a      	cmp	r0, #10
  401d52:	d025      	beq.n	401da0 <PIOA_Handler+0x74>
  401d54:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401d56:	280a      	cmp	r0, #10
  401d58:	d02b      	beq.n	401db2 <PIOA_Handler+0x86>
  401d5a:	6c20      	ldr	r0, [r4, #64]	; 0x40
  401d5c:	280a      	cmp	r0, #10
  401d5e:	d031      	beq.n	401dc4 <PIOA_Handler+0x98>
  401d60:	6d20      	ldr	r0, [r4, #80]	; 0x50
  401d62:	280a      	cmp	r0, #10
  401d64:	d037      	beq.n	401dd6 <PIOA_Handler+0xaa>
  401d66:	6e20      	ldr	r0, [r4, #96]	; 0x60
  401d68:	280a      	cmp	r0, #10
  401d6a:	d000      	beq.n	401d6e <PIOA_Handler+0x42>
  401d6c:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401d6e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401d70:	4229      	tst	r1, r5
  401d72:	d0fb      	beq.n	401d6c <PIOA_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401d74:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	pio_handler_process(PIOA, ID_PIOA);
}
  401d76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401d7a:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401d7c:	6861      	ldr	r1, [r4, #4]
  401d7e:	420d      	tst	r5, r1
  401d80:	d0e2      	beq.n	401d48 <PIOA_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401d82:	68e3      	ldr	r3, [r4, #12]
  401d84:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401d86:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  401d88:	439d      	bics	r5, r3
  401d8a:	d0ef      	beq.n	401d6c <PIOA_Handler+0x40>
  401d8c:	e7dc      	b.n	401d48 <PIOA_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401d8e:	6961      	ldr	r1, [r4, #20]
  401d90:	4229      	tst	r1, r5
  401d92:	d0dc      	beq.n	401d4e <PIOA_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401d94:	69e3      	ldr	r3, [r4, #28]
  401d96:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401d98:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  401d9a:	439d      	bics	r5, r3
  401d9c:	d0e6      	beq.n	401d6c <PIOA_Handler+0x40>
  401d9e:	e7d6      	b.n	401d4e <PIOA_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401da0:	6a61      	ldr	r1, [r4, #36]	; 0x24
  401da2:	4229      	tst	r1, r5
  401da4:	d0d6      	beq.n	401d54 <PIOA_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401da6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401da8:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401daa:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  401dac:	439d      	bics	r5, r3
  401dae:	d0dd      	beq.n	401d6c <PIOA_Handler+0x40>
  401db0:	e7d0      	b.n	401d54 <PIOA_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401db2:	6b61      	ldr	r1, [r4, #52]	; 0x34
  401db4:	4229      	tst	r1, r5
  401db6:	d0d0      	beq.n	401d5a <PIOA_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401db8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401dba:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401dbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  401dbe:	439d      	bics	r5, r3
  401dc0:	d0d4      	beq.n	401d6c <PIOA_Handler+0x40>
  401dc2:	e7ca      	b.n	401d5a <PIOA_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401dc4:	6c61      	ldr	r1, [r4, #68]	; 0x44
  401dc6:	4229      	tst	r1, r5
  401dc8:	d0ca      	beq.n	401d60 <PIOA_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401dca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401dcc:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401dce:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  401dd0:	439d      	bics	r5, r3
  401dd2:	d0cb      	beq.n	401d6c <PIOA_Handler+0x40>
  401dd4:	e7c4      	b.n	401d60 <PIOA_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401dd6:	6d61      	ldr	r1, [r4, #84]	; 0x54
  401dd8:	4229      	tst	r1, r5
  401dda:	d0c4      	beq.n	401d66 <PIOA_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401ddc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  401dde:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401de0:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  401de2:	439d      	bics	r5, r3
  401de4:	d0c2      	beq.n	401d6c <PIOA_Handler+0x40>
  401de6:	e7be      	b.n	401d66 <PIOA_Handler+0x3a>
  401de8:	00401bd1 	.word	0x00401bd1
  401dec:	400e0e00 	.word	0x400e0e00
  401df0:	00401bd5 	.word	0x00401bd5
  401df4:	2041c0a0 	.word	0x2041c0a0

00401df8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401df8:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  401dfa:	4b2e      	ldr	r3, [pc, #184]	; (401eb4 <PIOB_Handler+0xbc>)
  401dfc:	482e      	ldr	r0, [pc, #184]	; (401eb8 <PIOB_Handler+0xc0>)
  401dfe:	4798      	blx	r3
  401e00:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401e02:	4b2e      	ldr	r3, [pc, #184]	; (401ebc <PIOB_Handler+0xc4>)
  401e04:	482c      	ldr	r0, [pc, #176]	; (401eb8 <PIOB_Handler+0xc0>)
  401e06:	4798      	blx	r3
	if (status != 0) {
  401e08:	4005      	ands	r5, r0
  401e0a:	d015      	beq.n	401e38 <PIOB_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401e0c:	4c2c      	ldr	r4, [pc, #176]	; (401ec0 <PIOB_Handler+0xc8>)
  401e0e:	6820      	ldr	r0, [r4, #0]
  401e10:	280b      	cmp	r0, #11
  401e12:	d019      	beq.n	401e48 <PIOB_Handler+0x50>
  401e14:	6920      	ldr	r0, [r4, #16]
  401e16:	280b      	cmp	r0, #11
  401e18:	d01f      	beq.n	401e5a <PIOB_Handler+0x62>
  401e1a:	6a20      	ldr	r0, [r4, #32]
  401e1c:	280b      	cmp	r0, #11
  401e1e:	d025      	beq.n	401e6c <PIOB_Handler+0x74>
  401e20:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401e22:	280b      	cmp	r0, #11
  401e24:	d02b      	beq.n	401e7e <PIOB_Handler+0x86>
  401e26:	6c20      	ldr	r0, [r4, #64]	; 0x40
  401e28:	280b      	cmp	r0, #11
  401e2a:	d031      	beq.n	401e90 <PIOB_Handler+0x98>
  401e2c:	6d20      	ldr	r0, [r4, #80]	; 0x50
  401e2e:	280b      	cmp	r0, #11
  401e30:	d037      	beq.n	401ea2 <PIOB_Handler+0xaa>
  401e32:	6e20      	ldr	r0, [r4, #96]	; 0x60
  401e34:	280b      	cmp	r0, #11
  401e36:	d000      	beq.n	401e3a <PIOB_Handler+0x42>
  401e38:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401e3a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401e3c:	4229      	tst	r1, r5
  401e3e:	d0fb      	beq.n	401e38 <PIOB_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401e40:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    pio_handler_process(PIOB, ID_PIOB);
}
  401e42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401e46:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401e48:	6861      	ldr	r1, [r4, #4]
  401e4a:	420d      	tst	r5, r1
  401e4c:	d0e2      	beq.n	401e14 <PIOB_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401e4e:	68e3      	ldr	r3, [r4, #12]
  401e50:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401e52:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  401e54:	439d      	bics	r5, r3
  401e56:	d0ef      	beq.n	401e38 <PIOB_Handler+0x40>
  401e58:	e7dc      	b.n	401e14 <PIOB_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401e5a:	6961      	ldr	r1, [r4, #20]
  401e5c:	4229      	tst	r1, r5
  401e5e:	d0dc      	beq.n	401e1a <PIOB_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401e60:	69e3      	ldr	r3, [r4, #28]
  401e62:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401e64:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  401e66:	439d      	bics	r5, r3
  401e68:	d0e6      	beq.n	401e38 <PIOB_Handler+0x40>
  401e6a:	e7d6      	b.n	401e1a <PIOB_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401e6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  401e6e:	4229      	tst	r1, r5
  401e70:	d0d6      	beq.n	401e20 <PIOB_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401e72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401e74:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401e76:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  401e78:	439d      	bics	r5, r3
  401e7a:	d0dd      	beq.n	401e38 <PIOB_Handler+0x40>
  401e7c:	e7d0      	b.n	401e20 <PIOB_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401e7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
  401e80:	4229      	tst	r1, r5
  401e82:	d0d0      	beq.n	401e26 <PIOB_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401e84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401e86:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401e88:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  401e8a:	439d      	bics	r5, r3
  401e8c:	d0d4      	beq.n	401e38 <PIOB_Handler+0x40>
  401e8e:	e7ca      	b.n	401e26 <PIOB_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401e90:	6c61      	ldr	r1, [r4, #68]	; 0x44
  401e92:	4229      	tst	r1, r5
  401e94:	d0ca      	beq.n	401e2c <PIOB_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401e96:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401e98:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401e9a:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  401e9c:	439d      	bics	r5, r3
  401e9e:	d0cb      	beq.n	401e38 <PIOB_Handler+0x40>
  401ea0:	e7c4      	b.n	401e2c <PIOB_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401ea2:	6d61      	ldr	r1, [r4, #84]	; 0x54
  401ea4:	4229      	tst	r1, r5
  401ea6:	d0c4      	beq.n	401e32 <PIOB_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401ea8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  401eaa:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401eac:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  401eae:	439d      	bics	r5, r3
  401eb0:	d0c2      	beq.n	401e38 <PIOB_Handler+0x40>
  401eb2:	e7be      	b.n	401e32 <PIOB_Handler+0x3a>
  401eb4:	00401bd1 	.word	0x00401bd1
  401eb8:	400e1000 	.word	0x400e1000
  401ebc:	00401bd5 	.word	0x00401bd5
  401ec0:	2041c0a0 	.word	0x2041c0a0

00401ec4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401ec4:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  401ec6:	4b2e      	ldr	r3, [pc, #184]	; (401f80 <PIOC_Handler+0xbc>)
  401ec8:	482e      	ldr	r0, [pc, #184]	; (401f84 <PIOC_Handler+0xc0>)
  401eca:	4798      	blx	r3
  401ecc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401ece:	4b2e      	ldr	r3, [pc, #184]	; (401f88 <PIOC_Handler+0xc4>)
  401ed0:	482c      	ldr	r0, [pc, #176]	; (401f84 <PIOC_Handler+0xc0>)
  401ed2:	4798      	blx	r3
	if (status != 0) {
  401ed4:	4005      	ands	r5, r0
  401ed6:	d015      	beq.n	401f04 <PIOC_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401ed8:	4c2c      	ldr	r4, [pc, #176]	; (401f8c <PIOC_Handler+0xc8>)
  401eda:	6820      	ldr	r0, [r4, #0]
  401edc:	280c      	cmp	r0, #12
  401ede:	d019      	beq.n	401f14 <PIOC_Handler+0x50>
  401ee0:	6920      	ldr	r0, [r4, #16]
  401ee2:	280c      	cmp	r0, #12
  401ee4:	d01f      	beq.n	401f26 <PIOC_Handler+0x62>
  401ee6:	6a20      	ldr	r0, [r4, #32]
  401ee8:	280c      	cmp	r0, #12
  401eea:	d025      	beq.n	401f38 <PIOC_Handler+0x74>
  401eec:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401eee:	280c      	cmp	r0, #12
  401ef0:	d02b      	beq.n	401f4a <PIOC_Handler+0x86>
  401ef2:	6c20      	ldr	r0, [r4, #64]	; 0x40
  401ef4:	280c      	cmp	r0, #12
  401ef6:	d031      	beq.n	401f5c <PIOC_Handler+0x98>
  401ef8:	6d20      	ldr	r0, [r4, #80]	; 0x50
  401efa:	280c      	cmp	r0, #12
  401efc:	d037      	beq.n	401f6e <PIOC_Handler+0xaa>
  401efe:	6e20      	ldr	r0, [r4, #96]	; 0x60
  401f00:	280c      	cmp	r0, #12
  401f02:	d000      	beq.n	401f06 <PIOC_Handler+0x42>
  401f04:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401f06:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401f08:	4229      	tst	r1, r5
  401f0a:	d0fb      	beq.n	401f04 <PIOC_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401f0c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	pio_handler_process(PIOC, ID_PIOC);
}
  401f0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401f12:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401f14:	6861      	ldr	r1, [r4, #4]
  401f16:	420d      	tst	r5, r1
  401f18:	d0e2      	beq.n	401ee0 <PIOC_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401f1a:	68e3      	ldr	r3, [r4, #12]
  401f1c:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401f1e:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  401f20:	439d      	bics	r5, r3
  401f22:	d0ef      	beq.n	401f04 <PIOC_Handler+0x40>
  401f24:	e7dc      	b.n	401ee0 <PIOC_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401f26:	6961      	ldr	r1, [r4, #20]
  401f28:	4229      	tst	r1, r5
  401f2a:	d0dc      	beq.n	401ee6 <PIOC_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401f2c:	69e3      	ldr	r3, [r4, #28]
  401f2e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401f30:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  401f32:	439d      	bics	r5, r3
  401f34:	d0e6      	beq.n	401f04 <PIOC_Handler+0x40>
  401f36:	e7d6      	b.n	401ee6 <PIOC_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401f38:	6a61      	ldr	r1, [r4, #36]	; 0x24
  401f3a:	4229      	tst	r1, r5
  401f3c:	d0d6      	beq.n	401eec <PIOC_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401f3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401f40:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401f42:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  401f44:	439d      	bics	r5, r3
  401f46:	d0dd      	beq.n	401f04 <PIOC_Handler+0x40>
  401f48:	e7d0      	b.n	401eec <PIOC_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401f4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
  401f4c:	4229      	tst	r1, r5
  401f4e:	d0d0      	beq.n	401ef2 <PIOC_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401f50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401f52:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401f54:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  401f56:	439d      	bics	r5, r3
  401f58:	d0d4      	beq.n	401f04 <PIOC_Handler+0x40>
  401f5a:	e7ca      	b.n	401ef2 <PIOC_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401f5c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  401f5e:	4229      	tst	r1, r5
  401f60:	d0ca      	beq.n	401ef8 <PIOC_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401f62:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401f64:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401f66:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  401f68:	439d      	bics	r5, r3
  401f6a:	d0cb      	beq.n	401f04 <PIOC_Handler+0x40>
  401f6c:	e7c4      	b.n	401ef8 <PIOC_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401f6e:	6d61      	ldr	r1, [r4, #84]	; 0x54
  401f70:	4229      	tst	r1, r5
  401f72:	d0c4      	beq.n	401efe <PIOC_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401f74:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  401f76:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401f78:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  401f7a:	439d      	bics	r5, r3
  401f7c:	d0c2      	beq.n	401f04 <PIOC_Handler+0x40>
  401f7e:	e7be      	b.n	401efe <PIOC_Handler+0x3a>
  401f80:	00401bd1 	.word	0x00401bd1
  401f84:	400e1200 	.word	0x400e1200
  401f88:	00401bd5 	.word	0x00401bd5
  401f8c:	2041c0a0 	.word	0x2041c0a0

00401f90 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401f90:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  401f92:	4b2e      	ldr	r3, [pc, #184]	; (40204c <PIOD_Handler+0xbc>)
  401f94:	482e      	ldr	r0, [pc, #184]	; (402050 <PIOD_Handler+0xc0>)
  401f96:	4798      	blx	r3
  401f98:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401f9a:	4b2e      	ldr	r3, [pc, #184]	; (402054 <PIOD_Handler+0xc4>)
  401f9c:	482c      	ldr	r0, [pc, #176]	; (402050 <PIOD_Handler+0xc0>)
  401f9e:	4798      	blx	r3
	if (status != 0) {
  401fa0:	4005      	ands	r5, r0
  401fa2:	d015      	beq.n	401fd0 <PIOD_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401fa4:	4c2c      	ldr	r4, [pc, #176]	; (402058 <PIOD_Handler+0xc8>)
  401fa6:	6820      	ldr	r0, [r4, #0]
  401fa8:	2810      	cmp	r0, #16
  401faa:	d019      	beq.n	401fe0 <PIOD_Handler+0x50>
  401fac:	6920      	ldr	r0, [r4, #16]
  401fae:	2810      	cmp	r0, #16
  401fb0:	d01f      	beq.n	401ff2 <PIOD_Handler+0x62>
  401fb2:	6a20      	ldr	r0, [r4, #32]
  401fb4:	2810      	cmp	r0, #16
  401fb6:	d025      	beq.n	402004 <PIOD_Handler+0x74>
  401fb8:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401fba:	2810      	cmp	r0, #16
  401fbc:	d02b      	beq.n	402016 <PIOD_Handler+0x86>
  401fbe:	6c20      	ldr	r0, [r4, #64]	; 0x40
  401fc0:	2810      	cmp	r0, #16
  401fc2:	d031      	beq.n	402028 <PIOD_Handler+0x98>
  401fc4:	6d20      	ldr	r0, [r4, #80]	; 0x50
  401fc6:	2810      	cmp	r0, #16
  401fc8:	d037      	beq.n	40203a <PIOD_Handler+0xaa>
  401fca:	6e20      	ldr	r0, [r4, #96]	; 0x60
  401fcc:	2810      	cmp	r0, #16
  401fce:	d000      	beq.n	401fd2 <PIOD_Handler+0x42>
  401fd0:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401fd2:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401fd4:	4229      	tst	r1, r5
  401fd6:	d0fb      	beq.n	401fd0 <PIOD_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401fd8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	pio_handler_process(PIOD, ID_PIOD);
}
  401fda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401fde:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401fe0:	6861      	ldr	r1, [r4, #4]
  401fe2:	420d      	tst	r5, r1
  401fe4:	d0e2      	beq.n	401fac <PIOD_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401fe6:	68e3      	ldr	r3, [r4, #12]
  401fe8:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401fea:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  401fec:	439d      	bics	r5, r3
  401fee:	d0ef      	beq.n	401fd0 <PIOD_Handler+0x40>
  401ff0:	e7dc      	b.n	401fac <PIOD_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401ff2:	6961      	ldr	r1, [r4, #20]
  401ff4:	4229      	tst	r1, r5
  401ff6:	d0dc      	beq.n	401fb2 <PIOD_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401ff8:	69e3      	ldr	r3, [r4, #28]
  401ffa:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401ffc:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  401ffe:	439d      	bics	r5, r3
  402000:	d0e6      	beq.n	401fd0 <PIOD_Handler+0x40>
  402002:	e7d6      	b.n	401fb2 <PIOD_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402004:	6a61      	ldr	r1, [r4, #36]	; 0x24
  402006:	4229      	tst	r1, r5
  402008:	d0d6      	beq.n	401fb8 <PIOD_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40200a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40200c:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40200e:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  402010:	439d      	bics	r5, r3
  402012:	d0dd      	beq.n	401fd0 <PIOD_Handler+0x40>
  402014:	e7d0      	b.n	401fb8 <PIOD_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402016:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402018:	4229      	tst	r1, r5
  40201a:	d0d0      	beq.n	401fbe <PIOD_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40201c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40201e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402020:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  402022:	439d      	bics	r5, r3
  402024:	d0d4      	beq.n	401fd0 <PIOD_Handler+0x40>
  402026:	e7ca      	b.n	401fbe <PIOD_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402028:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40202a:	4229      	tst	r1, r5
  40202c:	d0ca      	beq.n	401fc4 <PIOD_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40202e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  402030:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402032:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  402034:	439d      	bics	r5, r3
  402036:	d0cb      	beq.n	401fd0 <PIOD_Handler+0x40>
  402038:	e7c4      	b.n	401fc4 <PIOD_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40203a:	6d61      	ldr	r1, [r4, #84]	; 0x54
  40203c:	4229      	tst	r1, r5
  40203e:	d0c4      	beq.n	401fca <PIOD_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402040:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  402042:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402044:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  402046:	439d      	bics	r5, r3
  402048:	d0c2      	beq.n	401fd0 <PIOD_Handler+0x40>
  40204a:	e7be      	b.n	401fca <PIOD_Handler+0x3a>
  40204c:	00401bd1 	.word	0x00401bd1
  402050:	400e1400 	.word	0x400e1400
  402054:	00401bd5 	.word	0x00401bd5
  402058:	2041c0a0 	.word	0x2041c0a0

0040205c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40205c:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  40205e:	4b2e      	ldr	r3, [pc, #184]	; (402118 <PIOE_Handler+0xbc>)
  402060:	482e      	ldr	r0, [pc, #184]	; (40211c <PIOE_Handler+0xc0>)
  402062:	4798      	blx	r3
  402064:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  402066:	4b2e      	ldr	r3, [pc, #184]	; (402120 <PIOE_Handler+0xc4>)
  402068:	482c      	ldr	r0, [pc, #176]	; (40211c <PIOE_Handler+0xc0>)
  40206a:	4798      	blx	r3
	if (status != 0) {
  40206c:	4005      	ands	r5, r0
  40206e:	d015      	beq.n	40209c <PIOE_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  402070:	4c2c      	ldr	r4, [pc, #176]	; (402124 <PIOE_Handler+0xc8>)
  402072:	6820      	ldr	r0, [r4, #0]
  402074:	2811      	cmp	r0, #17
  402076:	d019      	beq.n	4020ac <PIOE_Handler+0x50>
  402078:	6920      	ldr	r0, [r4, #16]
  40207a:	2811      	cmp	r0, #17
  40207c:	d01f      	beq.n	4020be <PIOE_Handler+0x62>
  40207e:	6a20      	ldr	r0, [r4, #32]
  402080:	2811      	cmp	r0, #17
  402082:	d025      	beq.n	4020d0 <PIOE_Handler+0x74>
  402084:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402086:	2811      	cmp	r0, #17
  402088:	d02b      	beq.n	4020e2 <PIOE_Handler+0x86>
  40208a:	6c20      	ldr	r0, [r4, #64]	; 0x40
  40208c:	2811      	cmp	r0, #17
  40208e:	d031      	beq.n	4020f4 <PIOE_Handler+0x98>
  402090:	6d20      	ldr	r0, [r4, #80]	; 0x50
  402092:	2811      	cmp	r0, #17
  402094:	d037      	beq.n	402106 <PIOE_Handler+0xaa>
  402096:	6e20      	ldr	r0, [r4, #96]	; 0x60
  402098:	2811      	cmp	r0, #17
  40209a:	d000      	beq.n	40209e <PIOE_Handler+0x42>
  40209c:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40209e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4020a0:	4229      	tst	r1, r5
  4020a2:	d0fb      	beq.n	40209c <PIOE_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4020a4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	pio_handler_process(PIOE, ID_PIOE);
}
  4020a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4020aa:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4020ac:	6861      	ldr	r1, [r4, #4]
  4020ae:	420d      	tst	r5, r1
  4020b0:	d0e2      	beq.n	402078 <PIOE_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4020b2:	68e3      	ldr	r3, [r4, #12]
  4020b4:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4020b6:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  4020b8:	439d      	bics	r5, r3
  4020ba:	d0ef      	beq.n	40209c <PIOE_Handler+0x40>
  4020bc:	e7dc      	b.n	402078 <PIOE_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4020be:	6961      	ldr	r1, [r4, #20]
  4020c0:	4229      	tst	r1, r5
  4020c2:	d0dc      	beq.n	40207e <PIOE_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4020c4:	69e3      	ldr	r3, [r4, #28]
  4020c6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4020c8:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  4020ca:	439d      	bics	r5, r3
  4020cc:	d0e6      	beq.n	40209c <PIOE_Handler+0x40>
  4020ce:	e7d6      	b.n	40207e <PIOE_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4020d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
  4020d2:	4229      	tst	r1, r5
  4020d4:	d0d6      	beq.n	402084 <PIOE_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4020d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4020d8:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4020da:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  4020dc:	439d      	bics	r5, r3
  4020de:	d0dd      	beq.n	40209c <PIOE_Handler+0x40>
  4020e0:	e7d0      	b.n	402084 <PIOE_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4020e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4020e4:	4229      	tst	r1, r5
  4020e6:	d0d0      	beq.n	40208a <PIOE_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4020e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4020ea:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4020ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  4020ee:	439d      	bics	r5, r3
  4020f0:	d0d4      	beq.n	40209c <PIOE_Handler+0x40>
  4020f2:	e7ca      	b.n	40208a <PIOE_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4020f4:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4020f6:	4229      	tst	r1, r5
  4020f8:	d0ca      	beq.n	402090 <PIOE_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4020fa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  4020fc:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4020fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  402100:	439d      	bics	r5, r3
  402102:	d0cb      	beq.n	40209c <PIOE_Handler+0x40>
  402104:	e7c4      	b.n	402090 <PIOE_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402106:	6d61      	ldr	r1, [r4, #84]	; 0x54
  402108:	4229      	tst	r1, r5
  40210a:	d0c4      	beq.n	402096 <PIOE_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40210c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  40210e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402110:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  402112:	439d      	bics	r5, r3
  402114:	d0c2      	beq.n	40209c <PIOE_Handler+0x40>
  402116:	e7be      	b.n	402096 <PIOE_Handler+0x3a>
  402118:	00401bd1 	.word	0x00401bd1
  40211c:	400e1600 	.word	0x400e1600
  402120:	00401bd5 	.word	0x00401bd5
  402124:	2041c0a0 	.word	0x2041c0a0

00402128 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  402128:	3802      	subs	r0, #2
  40212a:	2802      	cmp	r0, #2
  40212c:	d80d      	bhi.n	40214a <pmc_mck_set_division+0x22>
  40212e:	4b08      	ldr	r3, [pc, #32]	; (402150 <pmc_mck_set_division+0x28>)
  402130:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  402134:	4907      	ldr	r1, [pc, #28]	; (402154 <pmc_mck_set_division+0x2c>)
  402136:	6b0b      	ldr	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402138:	460a      	mov	r2, r1
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40213a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40213e:	4303      	orrs	r3, r0
	PMC->PMC_MCKR =
  402140:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402142:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402144:	071b      	lsls	r3, r3, #28
  402146:	d5fc      	bpl.n	402142 <pmc_mck_set_division+0x1a>
}
  402148:	4770      	bx	lr
{
  40214a:	2000      	movs	r0, #0
  40214c:	e7f2      	b.n	402134 <pmc_mck_set_division+0xc>
  40214e:	bf00      	nop
  402150:	004076ec 	.word	0x004076ec
  402154:	400e0600 	.word	0x400e0600

00402158 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402158:	4913      	ldr	r1, [pc, #76]	; (4021a8 <pmc_switch_mck_to_pllack+0x50>)
  40215a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40215c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402160:	4318      	orrs	r0, r3
  402162:	6308      	str	r0, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402164:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  402166:	0718      	lsls	r0, r3, #28
  402168:	d407      	bmi.n	40217a <pmc_switch_mck_to_pllack+0x22>
  40216a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40216e:	e001      	b.n	402174 <pmc_switch_mck_to_pllack+0x1c>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402170:	3b01      	subs	r3, #1
  402172:	d016      	beq.n	4021a2 <pmc_switch_mck_to_pllack+0x4a>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402174:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402176:	0712      	lsls	r2, r2, #28
  402178:	d5fa      	bpl.n	402170 <pmc_switch_mck_to_pllack+0x18>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40217a:	490b      	ldr	r1, [pc, #44]	; (4021a8 <pmc_switch_mck_to_pllack+0x50>)
  40217c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40217e:	f023 0303 	bic.w	r3, r3, #3
  402182:	f043 0302 	orr.w	r3, r3, #2
  402186:	630b      	str	r3, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402188:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  40218a:	0718      	lsls	r0, r3, #28
  40218c:	d407      	bmi.n	40219e <pmc_switch_mck_to_pllack+0x46>
  40218e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402192:	e001      	b.n	402198 <pmc_switch_mck_to_pllack+0x40>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402194:	3b01      	subs	r3, #1
  402196:	d004      	beq.n	4021a2 <pmc_switch_mck_to_pllack+0x4a>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402198:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40219a:	0712      	lsls	r2, r2, #28
  40219c:	d5fa      	bpl.n	402194 <pmc_switch_mck_to_pllack+0x3c>
			return 1;
		}
	}

	return 0;
  40219e:	2000      	movs	r0, #0
}
  4021a0:	4770      	bx	lr
			return 1;
  4021a2:	2001      	movs	r0, #1
  4021a4:	4770      	bx	lr
  4021a6:	bf00      	nop
  4021a8:	400e0600 	.word	0x400e0600

004021ac <pmc_switch_mainck_to_fastrc>:
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4021ac:	4a0e      	ldr	r2, [pc, #56]	; (4021e8 <pmc_switch_mainck_to_fastrc+0x3c>)
{
  4021ae:	b410      	push	{r4}
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4021b0:	4c0e      	ldr	r4, [pc, #56]	; (4021ec <pmc_switch_mainck_to_fastrc+0x40>)

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4021b2:	4611      	mov	r1, r2
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4021b4:	6a13      	ldr	r3, [r2, #32]
  4021b6:	431c      	orrs	r4, r3
  4021b8:	6214      	str	r4, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4021ba:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  4021bc:	039a      	lsls	r2, r3, #14
  4021be:	d5fc      	bpl.n	4021ba <pmc_switch_mainck_to_fastrc+0xe>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4021c0:	6a0c      	ldr	r4, [r1, #32]
  4021c2:	4b0b      	ldr	r3, [pc, #44]	; (4021f0 <pmc_switch_mainck_to_fastrc+0x44>)
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4021c4:	4a08      	ldr	r2, [pc, #32]	; (4021e8 <pmc_switch_mainck_to_fastrc+0x3c>)
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4021c6:	4023      	ands	r3, r4
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4021c8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4021cc:	4318      	orrs	r0, r3
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4021ce:	6208      	str	r0, [r1, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4021d0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4021d2:	039b      	lsls	r3, r3, #14
  4021d4:	d5fc      	bpl.n	4021d0 <pmc_switch_mainck_to_fastrc+0x24>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4021d6:	6a11      	ldr	r1, [r2, #32]
  4021d8:	4b06      	ldr	r3, [pc, #24]	; (4021f4 <pmc_switch_mainck_to_fastrc+0x48>)
  4021da:	400b      	ands	r3, r1
  4021dc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4021e0:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4021e2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4021e6:	4770      	bx	lr
  4021e8:	400e0600 	.word	0x400e0600
  4021ec:	00370008 	.word	0x00370008
  4021f0:	ffc8ff8f 	.word	0xffc8ff8f
  4021f4:	fec8ffff 	.word	0xfec8ffff

004021f8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4021f8:	4b02      	ldr	r3, [pc, #8]	; (402204 <pmc_osc_is_ready_mainck+0xc>)
  4021fa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4021fc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402200:	4770      	bx	lr
  402202:	bf00      	nop
  402204:	400e0600 	.word	0x400e0600

00402208 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402208:	4b02      	ldr	r3, [pc, #8]	; (402214 <pmc_disable_pllack+0xc>)
  40220a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40220e:	629a      	str	r2, [r3, #40]	; 0x28
  402210:	4770      	bx	lr
  402212:	bf00      	nop
  402214:	400e0600 	.word	0x400e0600

00402218 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402218:	4b02      	ldr	r3, [pc, #8]	; (402224 <pmc_is_locked_pllack+0xc>)
  40221a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40221c:	f000 0002 	and.w	r0, r0, #2
  402220:	4770      	bx	lr
  402222:	bf00      	nop
  402224:	400e0600 	.word	0x400e0600

00402228 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  402228:	283f      	cmp	r0, #63	; 0x3f
  40222a:	d81a      	bhi.n	402262 <pmc_enable_periph_clk+0x3a>
		return 1;
	}

	if (ul_id < 32) {
  40222c:	281f      	cmp	r0, #31
  40222e:	d80a      	bhi.n	402246 <pmc_enable_periph_clk+0x1e>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402230:	2301      	movs	r3, #1
  402232:	4a0e      	ldr	r2, [pc, #56]	; (40226c <pmc_enable_periph_clk+0x44>)
  402234:	fa03 f000 	lsl.w	r0, r3, r0
  402238:	6991      	ldr	r1, [r2, #24]
  40223a:	ea30 0301 	bics.w	r3, r0, r1
  40223e:	d012      	beq.n	402266 <pmc_enable_periph_clk+0x3e>
			PMC->PMC_PCER0 = 1 << ul_id;
  402240:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402242:	2000      	movs	r0, #0
  402244:	4770      	bx	lr
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402246:	2301      	movs	r3, #1
		ul_id -= 32;
  402248:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40224a:	4a08      	ldr	r2, [pc, #32]	; (40226c <pmc_enable_periph_clk+0x44>)
  40224c:	fa03 f000 	lsl.w	r0, r3, r0
  402250:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
  402254:	ea30 0303 	bics.w	r3, r0, r3
  402258:	d005      	beq.n	402266 <pmc_enable_periph_clk+0x3e>
			PMC->PMC_PCER1 = 1 << ul_id;
  40225a:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
	return 0;
  40225e:	2000      	movs	r0, #0
  402260:	4770      	bx	lr
		return 1;
  402262:	2001      	movs	r0, #1
  402264:	4770      	bx	lr
	return 0;
  402266:	2000      	movs	r0, #0
}
  402268:	4770      	bx	lr
  40226a:	bf00      	nop
  40226c:	400e0600 	.word	0x400e0600

00402270 <pmc_pck_set_prescaler>:
 *
 * \param ul_id Peripheral ID.
 * \param ul_pres Prescaler value.
 */
void pmc_pck_set_prescaler(uint32_t ul_id, uint32_t ul_pres)
{
  402270:	4b0b      	ldr	r3, [pc, #44]	; (4022a0 <pmc_pck_set_prescaler+0x30>)
  402272:	f44f 7280 	mov.w	r2, #256	; 0x100
  402276:	b410      	push	{r4}
  402278:	eb03 0480 	add.w	r4, r3, r0, lsl #2
  40227c:	fa02 f000 	lsl.w	r0, r2, r0
	PMC->PMC_PCK[ul_id] =
			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_PRES_Msk) | ul_pres;
  402280:	6c22      	ldr	r2, [r4, #64]	; 0x40
  402282:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  402286:	4311      	orrs	r1, r2
	PMC->PMC_PCK[ul_id] =
  402288:	6421      	str	r1, [r4, #64]	; 0x40
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  40228a:	e002      	b.n	402292 <pmc_pck_set_prescaler+0x22>
			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
  40228c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  40228e:	4202      	tst	r2, r0
  402290:	d102      	bne.n	402298 <pmc_pck_set_prescaler+0x28>
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  402292:	681a      	ldr	r2, [r3, #0]
  402294:	4202      	tst	r2, r0
  402296:	d1f9      	bne.n	40228c <pmc_pck_set_prescaler+0x1c>
}
  402298:	f85d 4b04 	ldr.w	r4, [sp], #4
  40229c:	4770      	bx	lr
  40229e:	bf00      	nop
  4022a0:	400e0600 	.word	0x400e0600

004022a4 <pmc_pck_set_source>:
 *
 * \param ul_id Peripheral ID.
 * \param ul_source Source selection value.
 */
void pmc_pck_set_source(uint32_t ul_id, uint32_t ul_source)
{
  4022a4:	4b0b      	ldr	r3, [pc, #44]	; (4022d4 <pmc_pck_set_source+0x30>)
  4022a6:	f44f 7280 	mov.w	r2, #256	; 0x100
  4022aa:	b410      	push	{r4}
  4022ac:	eb03 0480 	add.w	r4, r3, r0, lsl #2
  4022b0:	fa02 f000 	lsl.w	r0, r2, r0
	PMC->PMC_PCK[ul_id] =
			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_CSS_Msk) | ul_source;
  4022b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4022b6:	f022 0207 	bic.w	r2, r2, #7
  4022ba:	4311      	orrs	r1, r2
	PMC->PMC_PCK[ul_id] =
  4022bc:	6421      	str	r1, [r4, #64]	; 0x40
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  4022be:	e002      	b.n	4022c6 <pmc_pck_set_source+0x22>
			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
  4022c0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  4022c2:	4202      	tst	r2, r0
  4022c4:	d102      	bne.n	4022cc <pmc_pck_set_source+0x28>
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  4022c6:	681a      	ldr	r2, [r3, #0]
  4022c8:	4202      	tst	r2, r0
  4022ca:	d1f9      	bne.n	4022c0 <pmc_pck_set_source+0x1c>
}
  4022cc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4022d0:	4770      	bx	lr
  4022d2:	bf00      	nop
  4022d4:	400e0600 	.word	0x400e0600

004022d8 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  4022d8:	f44f 7380 	mov.w	r3, #256	; 0x100
  4022dc:	4a02      	ldr	r2, [pc, #8]	; (4022e8 <pmc_enable_pck+0x10>)
  4022de:	fa03 f000 	lsl.w	r0, r3, r0
  4022e2:	6010      	str	r0, [r2, #0]
  4022e4:	4770      	bx	lr
  4022e6:	bf00      	nop
  4022e8:	400e0600 	.word	0x400e0600

004022ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4022ec:	e7fe      	b.n	4022ec <Dummy_Handler>
  4022ee:	bf00      	nop

004022f0 <Dummy_Handler2>:
	while (1) {
	}
}

void Dummy_Handler2(void)
{
  4022f0:	e7fe      	b.n	4022f0 <Dummy_Handler2>
  4022f2:	bf00      	nop

004022f4 <Reset_Handler>:
        if (pSrc != pDest) {
  4022f4:	4920      	ldr	r1, [pc, #128]	; (402378 <Reset_Handler+0x84>)
  4022f6:	4821      	ldr	r0, [pc, #132]	; (40237c <Reset_Handler+0x88>)
  4022f8:	4281      	cmp	r1, r0
{
  4022fa:	b510      	push	{r4, lr}
  4022fc:	b082      	sub	sp, #8
        if (pSrc != pDest) {
  4022fe:	d009      	beq.n	402314 <Reset_Handler+0x20>
                for (; pDest < &_erelocate;) {
  402300:	4b1f      	ldr	r3, [pc, #124]	; (402380 <Reset_Handler+0x8c>)
  402302:	4298      	cmp	r0, r3
  402304:	d206      	bcs.n	402314 <Reset_Handler+0x20>
                        *pDest++ = *pSrc++;
  402306:	43c2      	mvns	r2, r0
  402308:	4c1e      	ldr	r4, [pc, #120]	; (402384 <Reset_Handler+0x90>)
  40230a:	441a      	add	r2, r3
  40230c:	f022 0203 	bic.w	r2, r2, #3
  402310:	3204      	adds	r2, #4
  402312:	47a0      	blx	r4
        for (pDest = &_szero; pDest < &_ezero;) {
  402314:	481c      	ldr	r0, [pc, #112]	; (402388 <Reset_Handler+0x94>)
  402316:	4b1d      	ldr	r3, [pc, #116]	; (40238c <Reset_Handler+0x98>)
  402318:	4298      	cmp	r0, r3
  40231a:	d207      	bcs.n	40232c <Reset_Handler+0x38>
                *pDest++ = 0;
  40231c:	43c2      	mvns	r2, r0
  40231e:	2100      	movs	r1, #0
  402320:	4c1b      	ldr	r4, [pc, #108]	; (402390 <Reset_Handler+0x9c>)
  402322:	441a      	add	r2, r3
  402324:	f022 0203 	bic.w	r2, r2, #3
  402328:	3204      	adds	r2, #4
  40232a:	47a0      	blx	r4
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40232c:	4b19      	ldr	r3, [pc, #100]	; (402394 <Reset_Handler+0xa0>)
  40232e:	4a1a      	ldr	r2, [pc, #104]	; (402398 <Reset_Handler+0xa4>)
  402330:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402334:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402336:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40233a:	fab3 f383 	clz	r3, r3
  40233e:	095b      	lsrs	r3, r3, #5
  402340:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402342:	b672      	cpsid	i
  __ASM volatile ("dmb");
  402344:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402348:	4a14      	ldr	r2, [pc, #80]	; (40239c <Reset_Handler+0xa8>)
  40234a:	2300      	movs	r3, #0
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  40234c:	4914      	ldr	r1, [pc, #80]	; (4023a0 <Reset_Handler+0xac>)
  40234e:	7013      	strb	r3, [r2, #0]
	return flags;
  402350:	9801      	ldr	r0, [sp, #4]
  402352:	680b      	ldr	r3, [r1, #0]
  402354:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  402358:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb");
  40235a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40235e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402362:	b120      	cbz	r0, 40236e <Reset_Handler+0x7a>
		cpu_irq_enable();
  402364:	2301      	movs	r3, #1
  402366:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dmb");
  402368:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40236c:	b662      	cpsie	i
        __libc_init_array();
  40236e:	4b0d      	ldr	r3, [pc, #52]	; (4023a4 <Reset_Handler+0xb0>)
  402370:	4798      	blx	r3
        main();
  402372:	4b0d      	ldr	r3, [pc, #52]	; (4023a8 <Reset_Handler+0xb4>)
  402374:	4798      	blx	r3
  402376:	e7fe      	b.n	402376 <Reset_Handler+0x82>
  402378:	004082c0 	.word	0x004082c0
  40237c:	20400000 	.word	0x20400000
  402380:	20400a00 	.word	0x20400a00
  402384:	00404ec5 	.word	0x00404ec5
  402388:	20404000 	.word	0x20404000
  40238c:	2044a8b8 	.word	0x2044a8b8
  402390:	00404ff9 	.word	0x00404ff9
  402394:	00400000 	.word	0x00400000
  402398:	e000ed00 	.word	0xe000ed00
  40239c:	20400024 	.word	0x20400024
  4023a0:	e000ed88 	.word	0xe000ed88
  4023a4:	004048dd 	.word	0x004048dd
  4023a8:	00402a61 	.word	0x00402a61

004023ac <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4023ac:	4a32      	ldr	r2, [pc, #200]	; (402478 <SystemCoreClockUpdate+0xcc>)
  4023ae:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4023b0:	f003 0303 	and.w	r3, r3, #3
  4023b4:	2b01      	cmp	r3, #1
  4023b6:	d03c      	beq.n	402432 <SystemCoreClockUpdate+0x86>
  4023b8:	d325      	bcc.n	402406 <SystemCoreClockUpdate+0x5a>
  4023ba:	2b02      	cmp	r3, #2
  4023bc:	d00d      	beq.n	4023da <SystemCoreClockUpdate+0x2e>
  4023be:	482f      	ldr	r0, [pc, #188]	; (40247c <SystemCoreClockUpdate+0xd0>)
  4023c0:	6803      	ldr	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4023c2:	492d      	ldr	r1, [pc, #180]	; (402478 <SystemCoreClockUpdate+0xcc>)
  4023c4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4023c6:	f002 0270 	and.w	r2, r2, #112	; 0x70
  4023ca:	2a70      	cmp	r2, #112	; 0x70
  4023cc:	d02b      	beq.n	402426 <SystemCoreClockUpdate+0x7a>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4023ce:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4023d0:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4023d4:	40d3      	lsrs	r3, r2
  4023d6:	6003      	str	r3, [r0, #0]
  4023d8:	4770      	bx	lr
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4023da:	6a13      	ldr	r3, [r2, #32]
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4023dc:	4827      	ldr	r0, [pc, #156]	; (40247c <SystemCoreClockUpdate+0xd0>)
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4023de:	01db      	lsls	r3, r3, #7
  4023e0:	d53a      	bpl.n	402458 <SystemCoreClockUpdate+0xac>
            SystemCoreClock *= 3U;
  4023e2:	4b27      	ldr	r3, [pc, #156]	; (402480 <SystemCoreClockUpdate+0xd4>)
  4023e4:	6003      	str	r3, [r0, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4023e6:	4924      	ldr	r1, [pc, #144]	; (402478 <SystemCoreClockUpdate+0xcc>)
  4023e8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4023ea:	f002 0203 	and.w	r2, r2, #3
  4023ee:	2a02      	cmp	r2, #2
  4023f0:	d1e7      	bne.n	4023c2 <SystemCoreClockUpdate+0x16>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4023f2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4023f4:	6a89      	ldr	r1, [r1, #40]	; 0x28
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4023f6:	f3c2 420a 	ubfx	r2, r2, #16, #11
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4023fa:	b2c9      	uxtb	r1, r1
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4023fc:	fb02 3303 	mla	r3, r2, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402400:	fbb3 f3f1 	udiv	r3, r3, r1
  402404:	e7dd      	b.n	4023c2 <SystemCoreClockUpdate+0x16>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  402406:	4b1f      	ldr	r3, [pc, #124]	; (402484 <SystemCoreClockUpdate+0xd8>)
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402408:	491b      	ldr	r1, [pc, #108]	; (402478 <SystemCoreClockUpdate+0xcc>)
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40240a:	695b      	ldr	r3, [r3, #20]
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40240c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40240e:	f013 0f80 	tst.w	r3, #128	; 0x80
  402412:	481a      	ldr	r0, [pc, #104]	; (40247c <SystemCoreClockUpdate+0xd0>)
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402414:	f002 0270 	and.w	r2, r2, #112	; 0x70
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  402418:	bf14      	ite	ne
  40241a:	f44f 4300 	movne.w	r3, #32768	; 0x8000
  40241e:	f44f 43fa 	moveq.w	r3, #32000	; 0x7d00
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402422:	2a70      	cmp	r2, #112	; 0x70
  402424:	d1d3      	bne.n	4023ce <SystemCoreClockUpdate+0x22>
    SystemCoreClock /= 3U;
  402426:	4a18      	ldr	r2, [pc, #96]	; (402488 <SystemCoreClockUpdate+0xdc>)
  402428:	fba2 2303 	umull	r2, r3, r2, r3
  40242c:	085b      	lsrs	r3, r3, #1
  40242e:	6003      	str	r3, [r0, #0]
  402430:	4770      	bx	lr
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402432:	6a13      	ldr	r3, [r2, #32]
  402434:	01d9      	lsls	r1, r3, #7
  402436:	d40c      	bmi.n	402452 <SystemCoreClockUpdate+0xa6>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402438:	4810      	ldr	r0, [pc, #64]	; (40247c <SystemCoreClockUpdate+0xd0>)
  40243a:	4914      	ldr	r1, [pc, #80]	; (40248c <SystemCoreClockUpdate+0xe0>)
  40243c:	6001      	str	r1, [r0, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40243e:	6a12      	ldr	r2, [r2, #32]
  402440:	f002 0270 	and.w	r2, r2, #112	; 0x70
  402444:	2a10      	cmp	r2, #16
  402446:	d011      	beq.n	40246c <SystemCoreClockUpdate+0xc0>
  402448:	4b0d      	ldr	r3, [pc, #52]	; (402480 <SystemCoreClockUpdate+0xd4>)
  40244a:	2a20      	cmp	r2, #32
  40244c:	bf18      	it	ne
  40244e:	460b      	movne	r3, r1
  402450:	e7b7      	b.n	4023c2 <SystemCoreClockUpdate+0x16>
  402452:	4b0b      	ldr	r3, [pc, #44]	; (402480 <SystemCoreClockUpdate+0xd4>)
  402454:	4809      	ldr	r0, [pc, #36]	; (40247c <SystemCoreClockUpdate+0xd0>)
  402456:	e7b4      	b.n	4023c2 <SystemCoreClockUpdate+0x16>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402458:	4b0c      	ldr	r3, [pc, #48]	; (40248c <SystemCoreClockUpdate+0xe0>)
  40245a:	6003      	str	r3, [r0, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40245c:	6a12      	ldr	r2, [r2, #32]
  40245e:	f002 0270 	and.w	r2, r2, #112	; 0x70
  402462:	2a10      	cmp	r2, #16
  402464:	d004      	beq.n	402470 <SystemCoreClockUpdate+0xc4>
  402466:	2a20      	cmp	r2, #32
  402468:	d0bb      	beq.n	4023e2 <SystemCoreClockUpdate+0x36>
  40246a:	e7bc      	b.n	4023e6 <SystemCoreClockUpdate+0x3a>
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40246c:	4b08      	ldr	r3, [pc, #32]	; (402490 <SystemCoreClockUpdate+0xe4>)
  40246e:	e7a8      	b.n	4023c2 <SystemCoreClockUpdate+0x16>
            SystemCoreClock *= 2U;
  402470:	4b07      	ldr	r3, [pc, #28]	; (402490 <SystemCoreClockUpdate+0xe4>)
  402472:	6003      	str	r3, [r0, #0]
          break;
  402474:	e7b7      	b.n	4023e6 <SystemCoreClockUpdate+0x3a>
  402476:	bf00      	nop
  402478:	400e0600 	.word	0x400e0600
  40247c:	20400028 	.word	0x20400028
  402480:	00b71b00 	.word	0x00b71b00
  402484:	400e1810 	.word	0x400e1810
  402488:	aaaaaaab 	.word	0xaaaaaaab
  40248c:	003d0900 	.word	0x003d0900
  402490:	007a1200 	.word	0x007a1200

00402494 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402494:	4b16      	ldr	r3, [pc, #88]	; (4024f0 <system_init_flash+0x5c>)
  402496:	4298      	cmp	r0, r3
  402498:	d917      	bls.n	4024ca <system_init_flash+0x36>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40249a:	4b16      	ldr	r3, [pc, #88]	; (4024f4 <system_init_flash+0x60>)
  40249c:	4298      	cmp	r0, r3
  40249e:	d910      	bls.n	4024c2 <system_init_flash+0x2e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4024a0:	4b15      	ldr	r3, [pc, #84]	; (4024f8 <system_init_flash+0x64>)
  4024a2:	4298      	cmp	r0, r3
  4024a4:	d91a      	bls.n	4024dc <system_init_flash+0x48>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4024a6:	4b15      	ldr	r3, [pc, #84]	; (4024fc <system_init_flash+0x68>)
  4024a8:	4298      	cmp	r0, r3
  4024aa:	d913      	bls.n	4024d4 <system_init_flash+0x40>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4024ac:	4b14      	ldr	r3, [pc, #80]	; (402500 <system_init_flash+0x6c>)
  4024ae:	4298      	cmp	r0, r3
  4024b0:	d918      	bls.n	4024e4 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4024b2:	4b14      	ldr	r3, [pc, #80]	; (402504 <system_init_flash+0x70>)
  4024b4:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4024b6:	4b14      	ldr	r3, [pc, #80]	; (402508 <system_init_flash+0x74>)
  4024b8:	bf94      	ite	ls
  4024ba:	4a14      	ldrls	r2, [pc, #80]	; (40250c <system_init_flash+0x78>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4024bc:	4a14      	ldrhi	r2, [pc, #80]	; (402510 <system_init_flash+0x7c>)
  4024be:	601a      	str	r2, [r3, #0]
  4024c0:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4024c2:	4b11      	ldr	r3, [pc, #68]	; (402508 <system_init_flash+0x74>)
  4024c4:	4a13      	ldr	r2, [pc, #76]	; (402514 <system_init_flash+0x80>)
  4024c6:	601a      	str	r2, [r3, #0]
  4024c8:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4024ca:	4b0f      	ldr	r3, [pc, #60]	; (402508 <system_init_flash+0x74>)
  4024cc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4024d0:	601a      	str	r2, [r3, #0]
  4024d2:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4024d4:	4b0c      	ldr	r3, [pc, #48]	; (402508 <system_init_flash+0x74>)
  4024d6:	4a10      	ldr	r2, [pc, #64]	; (402518 <system_init_flash+0x84>)
  4024d8:	601a      	str	r2, [r3, #0]
  4024da:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4024dc:	4b0a      	ldr	r3, [pc, #40]	; (402508 <system_init_flash+0x74>)
  4024de:	4a0f      	ldr	r2, [pc, #60]	; (40251c <system_init_flash+0x88>)
  4024e0:	601a      	str	r2, [r3, #0]
  4024e2:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4024e4:	4b08      	ldr	r3, [pc, #32]	; (402508 <system_init_flash+0x74>)
  4024e6:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4024ea:	601a      	str	r2, [r3, #0]
  4024ec:	4770      	bx	lr
  4024ee:	bf00      	nop
  4024f0:	015ef3bf 	.word	0x015ef3bf
  4024f4:	02bde77f 	.word	0x02bde77f
  4024f8:	041cdb3f 	.word	0x041cdb3f
  4024fc:	057bceff 	.word	0x057bceff
  402500:	06dac2bf 	.word	0x06dac2bf
  402504:	0839b67f 	.word	0x0839b67f
  402508:	400e0c00 	.word	0x400e0c00
  40250c:	04000500 	.word	0x04000500
  402510:	04000600 	.word	0x04000600
  402514:	04000100 	.word	0x04000100
  402518:	04000300 	.word	0x04000300
  40251c:	04000200 	.word	0x04000200

00402520 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  402520:	4a0d      	ldr	r2, [pc, #52]	; (402558 <_sbrk+0x38>)
	int ramend = (int)&__ram_end__;
  402522:	490e      	ldr	r1, [pc, #56]	; (40255c <_sbrk+0x3c>)
	if (heap == NULL) {
  402524:	6813      	ldr	r3, [r2, #0]
  402526:	b143      	cbz	r3, 40253a <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
  402528:	4418      	add	r0, r3
  40252a:	4281      	cmp	r1, r0
  40252c:	db02      	blt.n	402534 <_sbrk+0x14>
		return (caddr_t) -1;	
	}

	heap += incr;
  40252e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  402530:	4618      	mov	r0, r3
  402532:	4770      	bx	lr
		return (caddr_t) -1;	
  402534:	f04f 30ff 	mov.w	r0, #4294967295
  402538:	4770      	bx	lr
{
  40253a:	b410      	push	{r4}
		heap = (unsigned char *)&_end;
  40253c:	4c08      	ldr	r4, [pc, #32]	; (402560 <_sbrk+0x40>)
	if (((int)prev_heap + incr) > ramend) {
  40253e:	4420      	add	r0, r4
		heap = (unsigned char *)&_end;
  402540:	6014      	str	r4, [r2, #0]
	if (((int)prev_heap + incr) > ramend) {
  402542:	4281      	cmp	r1, r0
  402544:	db04      	blt.n	402550 <_sbrk+0x30>
	heap += incr;
  402546:	6010      	str	r0, [r2, #0]
	return (caddr_t) prev_heap;
  402548:	4620      	mov	r0, r4
}
  40254a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40254e:	4770      	bx	lr
		return (caddr_t) -1;	
  402550:	f04f 30ff 	mov.w	r0, #4294967295
  402554:	e7f9      	b.n	40254a <_sbrk+0x2a>
  402556:	bf00      	nop
  402558:	2041c110 	.word	0x2041c110
  40255c:	2045fffc 	.word	0x2045fffc
  402560:	2044cab8 	.word	0x2044cab8

00402564 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  402564:	f04f 30ff 	mov.w	r0, #4294967295
  402568:	4770      	bx	lr
  40256a:	bf00      	nop

0040256c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40256c:	f44f 5300 	mov.w	r3, #8192	; 0x2000

	return 0;
}
  402570:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
  402572:	604b      	str	r3, [r1, #4]
}
  402574:	4770      	bx	lr
  402576:	bf00      	nop

00402578 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  402578:	2001      	movs	r0, #1
  40257a:	4770      	bx	lr

0040257c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  40257c:	2000      	movs	r0, #0
  40257e:	4770      	bx	lr

00402580 <USART1_Handler>:
volatile uint32_t uart_cnt = 0;
volatile uint32_t waiting_for_button_press = 0;
volatile bool chord_harmonies[9] = {false, false, false, false, false, false, false, false, false}; // last one is autotune  
volatile uint32_t prev_midi_status = 0; 
void USART_SERIAL_ISR_HANDLER(void)
{
  402580:	b538      	push	{r3, r4, r5, lr}
	
	uint32_t dw_status = usart_get_status(USART_SERIAL);
  402582:	48ce      	ldr	r0, [pc, #824]	; (4028bc <USART1_Handler+0x33c>)
  402584:	4bce      	ldr	r3, [pc, #824]	; (4028c0 <USART1_Handler+0x340>)
  402586:	4798      	blx	r3
	if (dw_status & US_CSR_RXRDY) {
  402588:	07c3      	lsls	r3, r0, #31
  40258a:	d400      	bmi.n	40258e <USART1_Handler+0xe>
  40258c:	bd38      	pop	{r3, r4, r5, pc}
		usart_read(USART_SERIAL, (uint32_t *)&received_bytes[uart_cnt++]);
  40258e:	4ccd      	ldr	r4, [pc, #820]	; (4028c4 <USART1_Handler+0x344>)
  402590:	4dcd      	ldr	r5, [pc, #820]	; (4028c8 <USART1_Handler+0x348>)
  402592:	6821      	ldr	r1, [r4, #0]
  402594:	4bcd      	ldr	r3, [pc, #820]	; (4028cc <USART1_Handler+0x34c>)
  402596:	1c4a      	adds	r2, r1, #1
  402598:	48c8      	ldr	r0, [pc, #800]	; (4028bc <USART1_Handler+0x33c>)
  40259a:	eb05 0181 	add.w	r1, r5, r1, lsl #2
  40259e:	6022      	str	r2, [r4, #0]
  4025a0:	4798      	blx	r3
			68 Ab
			69 A  
			70 Bb
			71 B
		*/ 
		if (received_bytes[0] == CH_BUTTON && uart_cnt == 2 && prev_midi_status == 176)
  4025a2:	682b      	ldr	r3, [r5, #0]
  4025a4:	2bc0      	cmp	r3, #192	; 0xc0
  4025a6:	f000 80cd 	beq.w	402744 <USART1_Handler+0x1c4>
		{
			uart_cnt = 0; 
			uint32_t *data1 = (uint32_t *)&received_bytes[1];
			chord_harmonies[*data1] = !chord_harmonies[*data1];
		}
		else if (uart_cnt == 3)
  4025aa:	6823      	ldr	r3, [r4, #0]
  4025ac:	2b03      	cmp	r3, #3
  4025ae:	d1ed      	bne.n	40258c <USART1_Handler+0xc>
		{
			uart_cnt = 0; 
			uint32_t *message = (uint32_t *)&received_bytes[0]; 
			uint32_t *data1 = (uint32_t *)&received_bytes[1]; 
			uint32_t *data2 = (uint32_t *)&received_bytes[2];
			prev_midi_status = *message;  
  4025b0:	682a      	ldr	r2, [r5, #0]
			uart_cnt = 0; 
  4025b2:	2100      	movs	r1, #0
			prev_midi_status = *message;  
  4025b4:	48c6      	ldr	r0, [pc, #792]	; (4028d0 <USART1_Handler+0x350>)
			if (*message == 255 && *data1 == 255 && *data2 == 255)
  4025b6:	2aff      	cmp	r2, #255	; 0xff
			uart_cnt = 0; 
  4025b8:	6021      	str	r1, [r4, #0]
			prev_midi_status = *message;  
  4025ba:	6002      	str	r2, [r0, #0]
			if (*message == 255 && *data1 == 255 && *data2 == 255)
  4025bc:	f000 81c8 	beq.w	402950 <USART1_Handler+0x3d0>
			}
			else if (*message == 255 && *data1 == 255)
			{
				key_root = *data2; 
			}
			else if (*message == NOTE_ON)
  4025c0:	2a90      	cmp	r2, #144	; 0x90
  4025c2:	f000 81cf 	beq.w	402964 <USART1_Handler+0x3e4>
						harmony_list[i].idx = *data1; 
						break; 
					}
				}
			}
			else if (*message == NOTE_OFF)
  4025c6:	2a80      	cmp	r2, #128	; 0x80
  4025c8:	f000 80ce 	beq.w	402768 <USART1_Handler+0x1e8>
						harmony_list[i].active = false; 
						break; 
					}
				}
			}
			else if (*message == SLIDER) 
  4025cc:	2ab0      	cmp	r2, #176	; 0xb0
  4025ce:	f040 8201 	bne.w	4029d4 <USART1_Handler+0x454>
			{
				switch(*data1)
  4025d2:	686b      	ldr	r3, [r5, #4]
  4025d4:	3b05      	subs	r3, #5
  4025d6:	2b58      	cmp	r3, #88	; 0x58
  4025d8:	d8d8      	bhi.n	40258c <USART1_Handler+0xc>
  4025da:	a201      	add	r2, pc, #4	; (adr r2, 4025e0 <USART1_Handler+0x60>)
  4025dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4025e0:	00402939 	.word	0x00402939
  4025e4:	0040258d 	.word	0x0040258d
  4025e8:	0040291d 	.word	0x0040291d
  4025ec:	0040258d 	.word	0x0040258d
  4025f0:	0040258d 	.word	0x0040258d
  4025f4:	0040258d 	.word	0x0040258d
  4025f8:	0040258d 	.word	0x0040258d
  4025fc:	0040258d 	.word	0x0040258d
  402600:	0040258d 	.word	0x0040258d
  402604:	0040258d 	.word	0x0040258d
  402608:	0040258d 	.word	0x0040258d
  40260c:	0040258d 	.word	0x0040258d
  402610:	0040258d 	.word	0x0040258d
  402614:	0040258d 	.word	0x0040258d
  402618:	0040258d 	.word	0x0040258d
  40261c:	0040258d 	.word	0x0040258d
  402620:	0040258d 	.word	0x0040258d
  402624:	0040258d 	.word	0x0040258d
  402628:	0040258d 	.word	0x0040258d
  40262c:	0040258d 	.word	0x0040258d
  402630:	0040258d 	.word	0x0040258d
  402634:	0040258d 	.word	0x0040258d
  402638:	0040258d 	.word	0x0040258d
  40263c:	0040258d 	.word	0x0040258d
  402640:	0040258d 	.word	0x0040258d
  402644:	0040258d 	.word	0x0040258d
  402648:	0040258d 	.word	0x0040258d
  40264c:	0040258d 	.word	0x0040258d
  402650:	0040258d 	.word	0x0040258d
  402654:	0040258d 	.word	0x0040258d
  402658:	0040258d 	.word	0x0040258d
  40265c:	0040258d 	.word	0x0040258d
  402660:	0040258d 	.word	0x0040258d
  402664:	0040258d 	.word	0x0040258d
  402668:	0040258d 	.word	0x0040258d
  40266c:	0040258d 	.word	0x0040258d
  402670:	0040258d 	.word	0x0040258d
  402674:	0040258d 	.word	0x0040258d
  402678:	0040258d 	.word	0x0040258d
  40267c:	0040258d 	.word	0x0040258d
  402680:	0040258d 	.word	0x0040258d
  402684:	0040258d 	.word	0x0040258d
  402688:	0040258d 	.word	0x0040258d
  40268c:	0040258d 	.word	0x0040258d
  402690:	0040258d 	.word	0x0040258d
  402694:	0040258d 	.word	0x0040258d
  402698:	0040258d 	.word	0x0040258d
  40269c:	0040258d 	.word	0x0040258d
  4026a0:	0040258d 	.word	0x0040258d
  4026a4:	0040258d 	.word	0x0040258d
  4026a8:	0040258d 	.word	0x0040258d
  4026ac:	0040258d 	.word	0x0040258d
  4026b0:	0040258d 	.word	0x0040258d
  4026b4:	0040258d 	.word	0x0040258d
  4026b8:	0040258d 	.word	0x0040258d
  4026bc:	0040258d 	.word	0x0040258d
  4026c0:	0040258d 	.word	0x0040258d
  4026c4:	0040258d 	.word	0x0040258d
  4026c8:	0040258d 	.word	0x0040258d
  4026cc:	0040258d 	.word	0x0040258d
  4026d0:	0040258d 	.word	0x0040258d
  4026d4:	0040258d 	.word	0x0040258d
  4026d8:	0040258d 	.word	0x0040258d
  4026dc:	0040258d 	.word	0x0040258d
  4026e0:	0040258d 	.word	0x0040258d
  4026e4:	0040258d 	.word	0x0040258d
  4026e8:	0040289b 	.word	0x0040289b
  4026ec:	0040284f 	.word	0x0040284f
  4026f0:	00402837 	.word	0x00402837
  4026f4:	0040281f 	.word	0x0040281f
  4026f8:	0040258d 	.word	0x0040258d
  4026fc:	0040258d 	.word	0x0040258d
  402700:	0040258d 	.word	0x0040258d
  402704:	0040258d 	.word	0x0040258d
  402708:	0040258d 	.word	0x0040258d
  40270c:	0040258d 	.word	0x0040258d
  402710:	0040258d 	.word	0x0040258d
  402714:	0040258d 	.word	0x0040258d
  402718:	0040258d 	.word	0x0040258d
  40271c:	00402807 	.word	0x00402807
  402720:	0040258d 	.word	0x0040258d
  402724:	0040258d 	.word	0x0040258d
  402728:	0040258d 	.word	0x0040258d
  40272c:	0040258d 	.word	0x0040258d
  402730:	0040258d 	.word	0x0040258d
  402734:	0040258d 	.word	0x0040258d
  402738:	00402883 	.word	0x00402883
  40273c:	0040258d 	.word	0x0040258d
  402740:	00402867 	.word	0x00402867
		if (received_bytes[0] == CH_BUTTON && uart_cnt == 2 && prev_midi_status == 176)
  402744:	6823      	ldr	r3, [r4, #0]
  402746:	2b02      	cmp	r3, #2
  402748:	f47f af2f 	bne.w	4025aa <USART1_Handler+0x2a>
  40274c:	4b60      	ldr	r3, [pc, #384]	; (4028d0 <USART1_Handler+0x350>)
  40274e:	681b      	ldr	r3, [r3, #0]
  402750:	2bb0      	cmp	r3, #176	; 0xb0
  402752:	f47f af2a 	bne.w	4025aa <USART1_Handler+0x2a>
			chord_harmonies[*data1] = !chord_harmonies[*data1];
  402756:	686a      	ldr	r2, [r5, #4]
			uart_cnt = 0; 
  402758:	2300      	movs	r3, #0
			chord_harmonies[*data1] = !chord_harmonies[*data1];
  40275a:	495e      	ldr	r1, [pc, #376]	; (4028d4 <USART1_Handler+0x354>)
			uart_cnt = 0; 
  40275c:	6023      	str	r3, [r4, #0]
			chord_harmonies[*data1] = !chord_harmonies[*data1];
  40275e:	5c8b      	ldrb	r3, [r1, r2]
  402760:	f083 0301 	eor.w	r3, r3, #1
  402764:	548b      	strb	r3, [r1, r2]
		{
  402766:	bd38      	pop	{r3, r4, r5, pc}
					if (harmony_list[i].active == true && harmony_list[i].idx == *data1)
  402768:	4a5b      	ldr	r2, [pc, #364]	; (4028d8 <USART1_Handler+0x358>)
  40276a:	686b      	ldr	r3, [r5, #4]
  40276c:	7a10      	ldrb	r0, [r2, #8]
  40276e:	b110      	cbz	r0, 402776 <USART1_Handler+0x1f6>
  402770:	6850      	ldr	r0, [r2, #4]
  402772:	4283      	cmp	r3, r0
  402774:	d040      	beq.n	4027f8 <USART1_Handler+0x278>
  402776:	7d11      	ldrb	r1, [r2, #20]
  402778:	b119      	cbz	r1, 402782 <USART1_Handler+0x202>
  40277a:	6911      	ldr	r1, [r2, #16]
  40277c:	428b      	cmp	r3, r1
  40277e:	f000 814e 	beq.w	402a1e <USART1_Handler+0x49e>
  402782:	f892 1020 	ldrb.w	r1, [r2, #32]
  402786:	b119      	cbz	r1, 402790 <USART1_Handler+0x210>
  402788:	69d1      	ldr	r1, [r2, #28]
  40278a:	428b      	cmp	r3, r1
  40278c:	f000 8149 	beq.w	402a22 <USART1_Handler+0x4a2>
  402790:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
  402794:	b119      	cbz	r1, 40279e <USART1_Handler+0x21e>
  402796:	6a91      	ldr	r1, [r2, #40]	; 0x28
  402798:	428b      	cmp	r3, r1
  40279a:	f000 8144 	beq.w	402a26 <USART1_Handler+0x4a6>
  40279e:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
  4027a2:	b119      	cbz	r1, 4027ac <USART1_Handler+0x22c>
  4027a4:	6b51      	ldr	r1, [r2, #52]	; 0x34
  4027a6:	428b      	cmp	r3, r1
  4027a8:	f000 8141 	beq.w	402a2e <USART1_Handler+0x4ae>
  4027ac:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
  4027b0:	b119      	cbz	r1, 4027ba <USART1_Handler+0x23a>
  4027b2:	6c11      	ldr	r1, [r2, #64]	; 0x40
  4027b4:	428b      	cmp	r3, r1
  4027b6:	f000 813c 	beq.w	402a32 <USART1_Handler+0x4b2>
  4027ba:	f892 1050 	ldrb.w	r1, [r2, #80]	; 0x50
  4027be:	b119      	cbz	r1, 4027c8 <USART1_Handler+0x248>
  4027c0:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
  4027c2:	428b      	cmp	r3, r1
  4027c4:	f000 8137 	beq.w	402a36 <USART1_Handler+0x4b6>
  4027c8:	f892 105c 	ldrb.w	r1, [r2, #92]	; 0x5c
  4027cc:	b119      	cbz	r1, 4027d6 <USART1_Handler+0x256>
  4027ce:	6d91      	ldr	r1, [r2, #88]	; 0x58
  4027d0:	428b      	cmp	r3, r1
  4027d2:	f000 8132 	beq.w	402a3a <USART1_Handler+0x4ba>
  4027d6:	f892 1068 	ldrb.w	r1, [r2, #104]	; 0x68
  4027da:	b119      	cbz	r1, 4027e4 <USART1_Handler+0x264>
  4027dc:	6e51      	ldr	r1, [r2, #100]	; 0x64
  4027de:	428b      	cmp	r3, r1
  4027e0:	f000 8123 	beq.w	402a2a <USART1_Handler+0x4aa>
  4027e4:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
  4027e8:	2900      	cmp	r1, #0
  4027ea:	f43f aecf 	beq.w	40258c <USART1_Handler+0xc>
  4027ee:	6f11      	ldr	r1, [r2, #112]	; 0x70
  4027f0:	4299      	cmp	r1, r3
  4027f2:	f47f aecb 	bne.w	40258c <USART1_Handler+0xc>
				for (int i = 0; i < MAX_NUM_KEYS_HARMONIES; i++)
  4027f6:	2109      	movs	r1, #9
						harmony_list[i].active = false; 
  4027f8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  4027fc:	2000      	movs	r0, #0
  4027fe:	eb02 0381 	add.w	r3, r2, r1, lsl #2
  402802:	7218      	strb	r0, [r3, #8]
						break; 
  402804:	bd38      	pop	{r3, r4, r5, pc}
				{
					case DRY_VOLUME_CH: 
						dry_volume = 0.1f + 0.9f*(float)*data2 / 127.0f; break; 
					case HARM_VOLUME_CH: 
						harm_volume = (float)*data2 / 127.0f; break; 
  402806:	edd5 7a02 	vldr	s15, [r5, #8]
  40280a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 4028dc <USART1_Handler+0x35c>
  40280e:	eef8 7a67 	vcvt.f32.u32	s15, s15
  402812:	4b33      	ldr	r3, [pc, #204]	; (4028e0 <USART1_Handler+0x360>)
  402814:	ee67 7a87 	vmul.f32	s15, s15, s14
  402818:	edc3 7a00 	vstr	s15, [r3]
  40281c:	bd38      	pop	{r3, r4, r5, pc}
					case DELAY_FEEDBACK_CH: 
						delay_feedback = 0.8f * (float)*data2 / 127.0f; break;
					case DELAY_SPEED_CH: 
						delay_speed = 16200 - 14000 * (float)*data2 / 127.0f; break; 
					case DELAY_VOLUME_CH: 
						delay_volume = 0.7f * (float)*data2 / 127.0f; break; 
  40281e:	edd5 7a02 	vldr	s15, [r5, #8]
  402822:	ed9f 7a30 	vldr	s14, [pc, #192]	; 4028e4 <USART1_Handler+0x364>
  402826:	eef8 7a67 	vcvt.f32.u32	s15, s15
  40282a:	4b2f      	ldr	r3, [pc, #188]	; (4028e8 <USART1_Handler+0x368>)
  40282c:	ee67 7a87 	vmul.f32	s15, s15, s14
  402830:	edc3 7a00 	vstr	s15, [r3]
  402834:	bd38      	pop	{r3, r4, r5, pc}
						chorus_volume = (float)*data2 / 127.0f; break;
  402836:	edd5 7a02 	vldr	s15, [r5, #8]
  40283a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 4028dc <USART1_Handler+0x35c>
  40283e:	eef8 7a67 	vcvt.f32.u32	s15, s15
  402842:	4b2a      	ldr	r3, [pc, #168]	; (4028ec <USART1_Handler+0x36c>)
  402844:	ee67 7a87 	vmul.f32	s15, s15, s14
  402848:	edc3 7a00 	vstr	s15, [r3]
  40284c:	bd38      	pop	{r3, r4, r5, pc}
						reverb_volume = (float)*data2 / 127.0f; break; 
  40284e:	edd5 7a02 	vldr	s15, [r5, #8]
  402852:	ed9f 7a22 	vldr	s14, [pc, #136]	; 4028dc <USART1_Handler+0x35c>
  402856:	eef8 7a67 	vcvt.f32.u32	s15, s15
  40285a:	4b25      	ldr	r3, [pc, #148]	; (4028f0 <USART1_Handler+0x370>)
  40285c:	ee67 7a87 	vmul.f32	s15, s15, s14
  402860:	edc3 7a00 	vstr	s15, [r3]
  402864:	bd38      	pop	{r3, r4, r5, pc}
						chorus_speed = 0.05f + 2.0f*(float)*data2 / 127.0f; break;
  402866:	ed95 7a02 	vldr	s14, [r5, #8]
  40286a:	eddf 6a22 	vldr	s13, [pc, #136]	; 4028f4 <USART1_Handler+0x374>
  40286e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  402872:	eddf 7a21 	vldr	s15, [pc, #132]	; 4028f8 <USART1_Handler+0x378>
  402876:	4b21      	ldr	r3, [pc, #132]	; (4028fc <USART1_Handler+0x37c>)
  402878:	eee7 7a26 	vfma.f32	s15, s14, s13
  40287c:	edc3 7a00 	vstr	s15, [r3]
  402880:	bd38      	pop	{r3, r4, r5, pc}
						delay_feedback = 0.8f * (float)*data2 / 127.0f; break;
  402882:	edd5 7a02 	vldr	s15, [r5, #8]
  402886:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 402900 <USART1_Handler+0x380>
  40288a:	eef8 7a67 	vcvt.f32.u32	s15, s15
  40288e:	4b1d      	ldr	r3, [pc, #116]	; (402904 <USART1_Handler+0x384>)
  402890:	ee67 7a87 	vmul.f32	s15, s15, s14
  402894:	edc3 7a00 	vstr	s15, [r3]
  402898:	bd38      	pop	{r3, r4, r5, pc}
						delay_speed = 16200 - 14000 * (float)*data2 / 127.0f; break; 
  40289a:	ed95 7a02 	vldr	s14, [r5, #8]
  40289e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 402908 <USART1_Handler+0x388>
  4028a2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  4028a6:	eddf 7a19 	vldr	s15, [pc, #100]	; 40290c <USART1_Handler+0x38c>
  4028aa:	4b19      	ldr	r3, [pc, #100]	; (402910 <USART1_Handler+0x390>)
  4028ac:	eee7 7a66 	vfms.f32	s15, s14, s13
  4028b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  4028b4:	edc3 7a00 	vstr	s15, [r3]
  4028b8:	bd38      	pop	{r3, r4, r5, pc}
  4028ba:	bf00      	nop
  4028bc:	40028000 	.word	0x40028000
  4028c0:	00401671 	.word	0x00401671
  4028c4:	20445008 	.word	0x20445008
  4028c8:	2044a80c 	.word	0x2044a80c
  4028cc:	0040168d 	.word	0x0040168d
  4028d0:	20445000 	.word	0x20445000
  4028d4:	2041c114 	.word	0x2041c114
  4028d8:	2044a818 	.word	0x2044a818
  4028dc:	3c010204 	.word	0x3c010204
  4028e0:	2040003c 	.word	0x2040003c
  4028e4:	3bb49c6c 	.word	0x3bb49c6c
  4028e8:	20430000 	.word	0x20430000
  4028ec:	2041c120 	.word	0x2041c120
  4028f0:	20445004 	.word	0x20445004
  4028f4:	3c810204 	.word	0x3c810204
  4028f8:	3d4ccccd 	.word	0x3d4ccccd
  4028fc:	2040002c 	.word	0x2040002c
  402900:	3bce69a0 	.word	0x3bce69a0
  402904:	20400030 	.word	0x20400030
  402908:	42dc78f2 	.word	0x42dc78f2
  40290c:	467d2000 	.word	0x467d2000
  402910:	20400034 	.word	0x20400034
  402914:	3be836d4 	.word	0x3be836d4
  402918:	3dcccccd 	.word	0x3dcccccd
						dry_volume = 0.1f + 0.9f*(float)*data2 / 127.0f; break; 
  40291c:	ed95 7a02 	vldr	s14, [r5, #8]
  402920:	ed5f 6a04 	vldr	s13, [pc, #-16]	; 402914 <USART1_Handler+0x394>
  402924:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  402928:	ed5f 7a05 	vldr	s15, [pc, #-20]	; 402918 <USART1_Handler+0x398>
  40292c:	4b44      	ldr	r3, [pc, #272]	; (402a40 <USART1_Handler+0x4c0>)
  40292e:	eee7 7a26 	vfma.f32	s15, s14, s13
  402932:	edc3 7a00 	vstr	s15, [r3]
  402936:	bd38      	pop	{r3, r4, r5, pc}
						master_volume = MASTER_VOL_BASE*(float)*data2 / 127.0f; break; 
  402938:	edd5 7a02 	vldr	s15, [r5, #8]
  40293c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 402a44 <USART1_Handler+0x4c4>
  402940:	eef8 7a67 	vcvt.f32.u32	s15, s15
  402944:	4b40      	ldr	r3, [pc, #256]	; (402a48 <USART1_Handler+0x4c8>)
  402946:	ee67 7a87 	vmul.f32	s15, s15, s14
  40294a:	edc3 7a00 	vstr	s15, [r3]
  40294e:	bd38      	pop	{r3, r4, r5, pc}
			if (*message == 255 && *data1 == 255 && *data2 == 255)
  402950:	686b      	ldr	r3, [r5, #4]
  402952:	2bff      	cmp	r3, #255	; 0xff
  402954:	f47f ae1a 	bne.w	40258c <USART1_Handler+0xc>
  402958:	68ab      	ldr	r3, [r5, #8]
  40295a:	2bff      	cmp	r3, #255	; 0xff
  40295c:	d041      	beq.n	4029e2 <USART1_Handler+0x462>
				key_root = *data2; 
  40295e:	4a3b      	ldr	r2, [pc, #236]	; (402a4c <USART1_Handler+0x4cc>)
  402960:	6013      	str	r3, [r2, #0]
  402962:	e613      	b.n	40258c <USART1_Handler+0xc>
					if (harmony_list[i].active == false)
  402964:	4a3a      	ldr	r2, [pc, #232]	; (402a50 <USART1_Handler+0x4d0>)
  402966:	7a11      	ldrb	r1, [r2, #8]
  402968:	f001 00ff 	and.w	r0, r1, #255	; 0xff
  40296c:	2900      	cmp	r1, #0
  40296e:	d046      	beq.n	4029fe <USART1_Handler+0x47e>
  402970:	7d11      	ldrb	r1, [r2, #20]
  402972:	2900      	cmp	r1, #0
  402974:	d045      	beq.n	402a02 <USART1_Handler+0x482>
  402976:	f892 1020 	ldrb.w	r1, [r2, #32]
  40297a:	2900      	cmp	r1, #0
  40297c:	d043      	beq.n	402a06 <USART1_Handler+0x486>
  40297e:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
  402982:	b1c9      	cbz	r1, 4029b8 <USART1_Handler+0x438>
  402984:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
  402988:	2b00      	cmp	r3, #0
  40298a:	d03e      	beq.n	402a0a <USART1_Handler+0x48a>
  40298c:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
  402990:	2b00      	cmp	r3, #0
  402992:	d03c      	beq.n	402a0e <USART1_Handler+0x48e>
  402994:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
  402998:	2b00      	cmp	r3, #0
  40299a:	d03a      	beq.n	402a12 <USART1_Handler+0x492>
  40299c:	f892 305c 	ldrb.w	r3, [r2, #92]	; 0x5c
  4029a0:	2b00      	cmp	r3, #0
  4029a2:	d03a      	beq.n	402a1a <USART1_Handler+0x49a>
  4029a4:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
  4029a8:	2b00      	cmp	r3, #0
  4029aa:	d034      	beq.n	402a16 <USART1_Handler+0x496>
  4029ac:	f892 3074 	ldrb.w	r3, [r2, #116]	; 0x74
  4029b0:	2b00      	cmp	r3, #0
  4029b2:	f47f adeb 	bne.w	40258c <USART1_Handler+0xc>
				for(int i = 0; i < MAX_NUM_KEYS_HARMONIES; i++)
  4029b6:	2309      	movs	r3, #9
						harmony_list[i].freq = midi_note_frequencies[*data1]; 
  4029b8:	6868      	ldr	r0, [r5, #4]
						harmony_list[i].active = true; 
  4029ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
						harmony_list[i].freq = midi_note_frequencies[*data1]; 
  4029be:	4925      	ldr	r1, [pc, #148]	; (402a54 <USART1_Handler+0x4d4>)
						harmony_list[i].active = true; 
  4029c0:	2401      	movs	r4, #1
  4029c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
						harmony_list[i].freq = midi_note_frequencies[*data1]; 
  4029c6:	eb01 0280 	add.w	r2, r1, r0, lsl #2
						harmony_list[i].active = true; 
  4029ca:	721c      	strb	r4, [r3, #8]
						harmony_list[i].freq = midi_note_frequencies[*data1]; 
  4029cc:	6812      	ldr	r2, [r2, #0]
  4029ce:	601a      	str	r2, [r3, #0]
						harmony_list[i].idx = *data1; 
  4029d0:	6058      	str	r0, [r3, #4]
						break; 
  4029d2:	bd38      	pop	{r3, r4, r5, pc}
					default: break; 
				}
			}
			else if (*message == PITCH_WHEEL)
  4029d4:	2ae0      	cmp	r2, #224	; 0xe0
  4029d6:	f47f add9 	bne.w	40258c <USART1_Handler+0xc>
			{
				pitch_bend = *data2; 
  4029da:	68aa      	ldr	r2, [r5, #8]
  4029dc:	4b1e      	ldr	r3, [pc, #120]	; (402a58 <USART1_Handler+0x4d8>)
  4029de:	601a      	str	r2, [r3, #0]
			}
		} 
	}
}
  4029e0:	bd38      	pop	{r3, r4, r5, pc}
					chord_harmonies[i] = false; 
  4029e2:	4b1e      	ldr	r3, [pc, #120]	; (402a5c <USART1_Handler+0x4dc>)
				key_root = KEY_OF_E; 
  4029e4:	2040      	movs	r0, #64	; 0x40
  4029e6:	4a19      	ldr	r2, [pc, #100]	; (402a4c <USART1_Handler+0x4cc>)
					chord_harmonies[i] = false; 
  4029e8:	7019      	strb	r1, [r3, #0]
  4029ea:	7059      	strb	r1, [r3, #1]
  4029ec:	7099      	strb	r1, [r3, #2]
  4029ee:	70d9      	strb	r1, [r3, #3]
  4029f0:	7119      	strb	r1, [r3, #4]
  4029f2:	7159      	strb	r1, [r3, #5]
  4029f4:	7199      	strb	r1, [r3, #6]
  4029f6:	71d9      	strb	r1, [r3, #7]
  4029f8:	7219      	strb	r1, [r3, #8]
				key_root = KEY_OF_E; 
  4029fa:	6010      	str	r0, [r2, #0]
  4029fc:	bd38      	pop	{r3, r4, r5, pc}
					if (harmony_list[i].active == false)
  4029fe:	4603      	mov	r3, r0
  402a00:	e7da      	b.n	4029b8 <USART1_Handler+0x438>
				for(int i = 0; i < MAX_NUM_KEYS_HARMONIES; i++)
  402a02:	2301      	movs	r3, #1
  402a04:	e7d8      	b.n	4029b8 <USART1_Handler+0x438>
  402a06:	2302      	movs	r3, #2
  402a08:	e7d6      	b.n	4029b8 <USART1_Handler+0x438>
  402a0a:	2304      	movs	r3, #4
  402a0c:	e7d4      	b.n	4029b8 <USART1_Handler+0x438>
  402a0e:	2305      	movs	r3, #5
  402a10:	e7d2      	b.n	4029b8 <USART1_Handler+0x438>
  402a12:	2306      	movs	r3, #6
  402a14:	e7d0      	b.n	4029b8 <USART1_Handler+0x438>
  402a16:	2308      	movs	r3, #8
  402a18:	e7ce      	b.n	4029b8 <USART1_Handler+0x438>
  402a1a:	2307      	movs	r3, #7
  402a1c:	e7cc      	b.n	4029b8 <USART1_Handler+0x438>
				for (int i = 0; i < MAX_NUM_KEYS_HARMONIES; i++)
  402a1e:	2101      	movs	r1, #1
  402a20:	e6ea      	b.n	4027f8 <USART1_Handler+0x278>
  402a22:	2102      	movs	r1, #2
  402a24:	e6e8      	b.n	4027f8 <USART1_Handler+0x278>
  402a26:	2103      	movs	r1, #3
  402a28:	e6e6      	b.n	4027f8 <USART1_Handler+0x278>
  402a2a:	2108      	movs	r1, #8
  402a2c:	e6e4      	b.n	4027f8 <USART1_Handler+0x278>
  402a2e:	2104      	movs	r1, #4
  402a30:	e6e2      	b.n	4027f8 <USART1_Handler+0x278>
  402a32:	2105      	movs	r1, #5
  402a34:	e6e0      	b.n	4027f8 <USART1_Handler+0x278>
  402a36:	2106      	movs	r1, #6
  402a38:	e6de      	b.n	4027f8 <USART1_Handler+0x278>
  402a3a:	2107      	movs	r1, #7
  402a3c:	e6dc      	b.n	4027f8 <USART1_Handler+0x278>
  402a3e:	bf00      	nop
  402a40:	20400038 	.word	0x20400038
  402a44:	3b9acf38 	.word	0x3b9acf38
  402a48:	20400044 	.word	0x20400044
  402a4c:	20400040 	.word	0x20400040
  402a50:	2044a818 	.word	0x2044a818
  402a54:	00407720 	.word	0x00407720
  402a58:	20400048 	.word	0x20400048
  402a5c:	2041c114 	.word	0x2041c114

00402a60 <main>:

// uncomment to communicate to pc console over uart for debug 
//#define USING_CONSOLE

int main(void)
{
  402a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sysclk_init();
  402a64:	4b70      	ldr	r3, [pc, #448]	; (402c28 <main+0x1c8>)

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
	usart_settings.char_length = opt->charlength;
	usart_settings.parity_type = opt->paritytype;
	usart_settings.stop_bits= opt->stopbits;
  402a66:	2700      	movs	r7, #0
	usart_settings.baudrate = opt->baudrate;
  402a68:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  402a6c:	4e6f      	ldr	r6, [pc, #444]	; (402c2c <main+0x1cc>)
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  402a6e:	f44f 4580 	mov.w	r5, #16384	; 0x4000
	} 
	uint32_t circ_buf_idx = 0; 
	float closest_note_freq = 0; 
	uint32_t closest_note_number = 0; 
	float desired_pitch; 
	uint32_t sin_cnt = 0; 
  402a72:	46ba      	mov	sl, r7
  402a74:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 402c6c <main+0x20c>
  402a78:	f8df b218 	ldr.w	fp, [pc, #536]	; 402c94 <main+0x234>
{
  402a7c:	ed2d 8b08 	vpush	{d8-d11}
  402a80:	b0c5      	sub	sp, #276	; 0x114
  402a82:	eddf aa6b 	vldr	s21, [pc, #428]	; 402c30 <main+0x1d0>
	sysclk_init();
  402a86:	4798      	blx	r3
	board_init();
  402a88:	4b6a      	ldr	r3, [pc, #424]	; (402c34 <main+0x1d4>)
  402a8a:	4798      	blx	r3
	audio_init();
  402a8c:	4b6a      	ldr	r3, [pc, #424]	; (402c38 <main+0x1d8>)
  402a8e:	4798      	blx	r3
	PSOLA_init(); 
  402a90:	4b6a      	ldr	r3, [pc, #424]	; (402c3c <main+0x1dc>)
  402a92:	4798      	blx	r3
	usart_settings.char_length = opt->charlength;
  402a94:	21c0      	movs	r1, #192	; 0xc0
	usart_settings.parity_type = opt->paritytype;
  402a96:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402a9a:	4b69      	ldr	r3, [pc, #420]	; (402c40 <main+0x1e0>)
	usart_settings.char_length = opt->charlength;
  402a9c:	9131      	str	r1, [sp, #196]	; 0xc4
  402a9e:	f06f 0101 	mvn.w	r1, #1
  402aa2:	200e      	movs	r0, #14
	usart_settings.baudrate = opt->baudrate;
  402aa4:	9430      	str	r4, [sp, #192]	; 0xc0
	uint32_t sin_cnt = 0; 
  402aa6:	9706      	str	r7, [sp, #24]
	uint32_t chorus_delay; 
	arm_fill_f32(0.0f, dry_circ_buffer, CIRC_BUF_SIZE);
	arm_fill_f32(0.0f, delay_circ_buffer, CIRC_BUF_SIZE);
	scale_t major[] = {W,W,H,W,W,W,H}; 
	uint32_t harmony_steps[] = {2, 2, 1}; // third, fifth, sixth
	float scale_correct_history[SCALE_CORRECT_HISTORY_SIZE]; arm_fill_f32(SCALE_NONE, scale_correct_history, SCALE_CORRECT_HISTORY_SIZE); 
  402aa8:	2401      	movs	r4, #1
  402aaa:	9108      	str	r1, [sp, #32]
	usart_settings.parity_type = opt->paritytype;
  402aac:	9232      	str	r2, [sp, #200]	; 0xc8
	usart_settings.stop_bits= opt->stopbits;
  402aae:	9733      	str	r7, [sp, #204]	; 0xcc
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  402ab0:	9734      	str	r7, [sp, #208]	; 0xd0
  402ab2:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  402ab4:	ab30      	add	r3, sp, #192	; 0xc0
  402ab6:	4a63      	ldr	r2, [pc, #396]	; (402c44 <main+0x1e4>)
  402ab8:	4863      	ldr	r0, [pc, #396]	; (402c48 <main+0x1e8>)
  402aba:	4619      	mov	r1, r3
  402abc:	4b63      	ldr	r3, [pc, #396]	; (402c4c <main+0x1ec>)
  402abe:	9405      	str	r4, [sp, #20]
  402ac0:	4798      	blx	r3
		usart_enable_tx(p_usart);
  402ac2:	4861      	ldr	r0, [pc, #388]	; (402c48 <main+0x1e8>)
  402ac4:	47b0      	blx	r6
		usart_enable_rx(p_usart);
  402ac6:	4c62      	ldr	r4, [pc, #392]	; (402c50 <main+0x1f0>)
  402ac8:	485f      	ldr	r0, [pc, #380]	; (402c48 <main+0x1e8>)
  402aca:	47a0      	blx	r4
	usart_enable_tx(USART_SERIAL);
  402acc:	485e      	ldr	r0, [pc, #376]	; (402c48 <main+0x1e8>)
  402ace:	47b0      	blx	r6
	usart_enable_rx(USART_SERIAL);
  402ad0:	485d      	ldr	r0, [pc, #372]	; (402c48 <main+0x1e8>)
  402ad2:	47a0      	blx	r4
	usart_enable_interrupt(USART_SERIAL, US_IER_RXRDY);
  402ad4:	2101      	movs	r1, #1
  402ad6:	485c      	ldr	r0, [pc, #368]	; (402c48 <main+0x1e8>)
		harmony_list[i].freq = 0.0f; 
  402ad8:	2400      	movs	r4, #0
	usart_enable_interrupt(USART_SERIAL, US_IER_RXRDY);
  402ada:	4b5e      	ldr	r3, [pc, #376]	; (402c54 <main+0x1f4>)
  402adc:	4798      	blx	r3
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402ade:	4a5e      	ldr	r2, [pc, #376]	; (402c58 <main+0x1f8>)
  402ae0:	2340      	movs	r3, #64	; 0x40
	usart_write(USART_SERIAL, 0x30);
  402ae2:	2130      	movs	r1, #48	; 0x30
  402ae4:	4858      	ldr	r0, [pc, #352]	; (402c48 <main+0x1e8>)
  402ae6:	f882 330e 	strb.w	r3, [r2, #782]	; 0x30e
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  402aea:	f8c2 5180 	str.w	r5, [r2, #384]	; 0x180
  402aee:	4b5b      	ldr	r3, [pc, #364]	; (402c5c <main+0x1fc>)
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402af0:	6015      	str	r5, [r2, #0]
  402af2:	4798      	blx	r3
	float harmony_shifts[MAX_NUM_SHIFTS+1]; arm_fill_f32(1.0f, harmony_shifts, MAX_NUM_SHIFTS); 
  402af4:	ab30      	add	r3, sp, #192	; 0xc0
  402af6:	4e5a      	ldr	r6, [pc, #360]	; (402c60 <main+0x200>)
  402af8:	2213      	movs	r2, #19
  402afa:	4619      	mov	r1, r3
		harmony_list[i].freq = 0.0f; 
  402afc:	4b59      	ldr	r3, [pc, #356]	; (402c64 <main+0x204>)
	float harmony_shifts[MAX_NUM_SHIFTS+1]; arm_fill_f32(1.0f, harmony_shifts, MAX_NUM_SHIFTS); 
  402afe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
		harmony_list[i].freq = 0.0f; 
  402b02:	601c      	str	r4, [r3, #0]
		harmony_list[i].idx = 0; 
  402b04:	605f      	str	r7, [r3, #4]
		harmony_list[i].active = false; 
  402b06:	721f      	strb	r7, [r3, #8]
		harmony_list[i].freq = 0.0f; 
  402b08:	60dc      	str	r4, [r3, #12]
		harmony_list[i].idx = 0; 
  402b0a:	611f      	str	r7, [r3, #16]
		harmony_list[i].active = false; 
  402b0c:	751f      	strb	r7, [r3, #20]
		harmony_list[i].freq = 0.0f; 
  402b0e:	619c      	str	r4, [r3, #24]
		harmony_list[i].idx = 0; 
  402b10:	61df      	str	r7, [r3, #28]
		harmony_list[i].active = false; 
  402b12:	f883 7020 	strb.w	r7, [r3, #32]
		harmony_list[i].freq = 0.0f; 
  402b16:	625c      	str	r4, [r3, #36]	; 0x24
		harmony_list[i].idx = 0; 
  402b18:	629f      	str	r7, [r3, #40]	; 0x28
		harmony_list[i].active = false; 
  402b1a:	f883 702c 	strb.w	r7, [r3, #44]	; 0x2c
		harmony_list[i].freq = 0.0f; 
  402b1e:	631c      	str	r4, [r3, #48]	; 0x30
		harmony_list[i].idx = 0; 
  402b20:	635f      	str	r7, [r3, #52]	; 0x34
		harmony_list[i].active = false; 
  402b22:	f883 7038 	strb.w	r7, [r3, #56]	; 0x38
		harmony_list[i].freq = 0.0f; 
  402b26:	63dc      	str	r4, [r3, #60]	; 0x3c
		harmony_list[i].idx = 0; 
  402b28:	641f      	str	r7, [r3, #64]	; 0x40
		harmony_list[i].active = false; 
  402b2a:	f883 7044 	strb.w	r7, [r3, #68]	; 0x44
		harmony_list[i].freq = 0.0f; 
  402b2e:	649c      	str	r4, [r3, #72]	; 0x48
		harmony_list[i].idx = 0; 
  402b30:	64df      	str	r7, [r3, #76]	; 0x4c
		harmony_list[i].active = false; 
  402b32:	f883 7050 	strb.w	r7, [r3, #80]	; 0x50
		harmony_list[i].freq = 0.0f; 
  402b36:	655c      	str	r4, [r3, #84]	; 0x54
		harmony_list[i].idx = 0; 
  402b38:	659f      	str	r7, [r3, #88]	; 0x58
		harmony_list[i].active = false; 
  402b3a:	f883 705c 	strb.w	r7, [r3, #92]	; 0x5c
		harmony_list[i].freq = 0.0f; 
  402b3e:	661c      	str	r4, [r3, #96]	; 0x60
		harmony_list[i].idx = 0; 
  402b40:	665f      	str	r7, [r3, #100]	; 0x64
		harmony_list[i].active = false; 
  402b42:	f883 7068 	strb.w	r7, [r3, #104]	; 0x68
		harmony_list[i].freq = 0.0f; 
  402b46:	66dc      	str	r4, [r3, #108]	; 0x6c
		harmony_list[i].idx = 0; 
  402b48:	671f      	str	r7, [r3, #112]	; 0x70
		harmony_list[i].active = false; 
  402b4a:	f883 7074 	strb.w	r7, [r3, #116]	; 0x74
	float harmony_shifts[MAX_NUM_SHIFTS+1]; arm_fill_f32(1.0f, harmony_shifts, MAX_NUM_SHIFTS); 
  402b4e:	47b0      	blx	r6
	harmony_shifts[1] = END_OF_SHIFTS; 
  402b50:	4b45      	ldr	r3, [pc, #276]	; (402c68 <main+0x208>)
	harmony_shifts[0] = NO_SHIFT;
  402b52:	f04f 5e7e 	mov.w	lr, #1065353216	; 0x3f800000
	arm_fill_f32(0.0f, dry_circ_buffer, CIRC_BUF_SIZE);
  402b56:	462a      	mov	r2, r5
  402b58:	4620      	mov	r0, r4
  402b5a:	4944      	ldr	r1, [pc, #272]	; (402c6c <main+0x20c>)
		chord_freqs[i].freq = 0.0f; chord_freqs[i].active = false; 
  402b5c:	f88d 7084 	strb.w	r7, [sp, #132]	; 0x84
  402b60:	f88d 708c 	strb.w	r7, [sp, #140]	; 0x8c
  402b64:	f88d 7094 	strb.w	r7, [sp, #148]	; 0x94
  402b68:	f88d 709c 	strb.w	r7, [sp, #156]	; 0x9c
  402b6c:	f88d 70a4 	strb.w	r7, [sp, #164]	; 0xa4
  402b70:	f88d 70ac 	strb.w	r7, [sp, #172]	; 0xac
  402b74:	f88d 70b4 	strb.w	r7, [sp, #180]	; 0xb4
  402b78:	f88d 70bc 	strb.w	r7, [sp, #188]	; 0xbc
	scale_t major[] = {W,W,H,W,W,W,H}; 
  402b7c:	af11      	add	r7, sp, #68	; 0x44
		chord_freqs[i].freq = 0.0f; chord_freqs[i].active = false; 
  402b7e:	9420      	str	r4, [sp, #128]	; 0x80
  402b80:	9422      	str	r4, [sp, #136]	; 0x88
  402b82:	9424      	str	r4, [sp, #144]	; 0x90
  402b84:	9426      	str	r4, [sp, #152]	; 0x98
  402b86:	9428      	str	r4, [sp, #160]	; 0xa0
  402b88:	942a      	str	r4, [sp, #168]	; 0xa8
  402b8a:	942c      	str	r4, [sp, #176]	; 0xb0
  402b8c:	942e      	str	r4, [sp, #184]	; 0xb8
	harmony_shifts[0] = NO_SHIFT;
  402b8e:	f8cd e0c0 	str.w	lr, [sp, #192]	; 0xc0
	harmony_shifts[1] = END_OF_SHIFTS; 
  402b92:	9331      	str	r3, [sp, #196]	; 0xc4
	harmony_shifts[MAX_NUM_SHIFTS] = END_OF_SHIFTS; // should never change 
  402b94:	9343      	str	r3, [sp, #268]	; 0x10c
	arm_fill_f32(0.0f, dry_circ_buffer, CIRC_BUF_SIZE);
  402b96:	47b0      	blx	r6
	arm_fill_f32(0.0f, delay_circ_buffer, CIRC_BUF_SIZE);
  402b98:	462a      	mov	r2, r5
  402b9a:	4620      	mov	r0, r4
  402b9c:	4934      	ldr	r1, [pc, #208]	; (402c70 <main+0x210>)
  402b9e:	47b0      	blx	r6
  402ba0:	9908      	ldr	r1, [sp, #32]
  402ba2:	4b34      	ldr	r3, [pc, #208]	; (402c74 <main+0x214>)
	scale_t major[] = {W,W,H,W,W,W,H}; 
  402ba4:	4d34      	ldr	r5, [pc, #208]	; (402c78 <main+0x218>)
  402ba6:	1acb      	subs	r3, r1, r3
  402ba8:	9308      	str	r3, [sp, #32]
  402baa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402bac:	c70f      	stmia	r7!, {r0, r1, r2, r3}
  402bae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
	uint32_t harmony_steps[] = {2, 2, 1}; // third, fifth, sixth
  402bb2:	350c      	adds	r5, #12
  402bb4:	ab0e      	add	r3, sp, #56	; 0x38
	scale_t major[] = {W,W,H,W,W,W,H}; 
  402bb6:	e887 0007 	stmia.w	r7, {r0, r1, r2}
	uint32_t harmony_steps[] = {2, 2, 1}; // third, fifth, sixth
  402bba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  402bbe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float scale_correct_history[SCALE_CORRECT_HISTORY_SIZE]; arm_fill_f32(SCALE_NONE, scale_correct_history, SCALE_CORRECT_HISTORY_SIZE); 
  402bc2:	4620      	mov	r0, r4
  402bc4:	a918      	add	r1, sp, #96	; 0x60
  402bc6:	2208      	movs	r2, #8
  402bc8:	47b0      	blx	r6
  402bca:	9b05      	ldr	r3, [sp, #20]
  402bcc:	1e5f      	subs	r7, r3, #1
	float dry_freq = 0; 
	/*************** Application code variables end ***************/
	
	while(1)
	{
		if (dataReceived)
  402bce:	4b2b      	ldr	r3, [pc, #172]	; (402c7c <main+0x21c>)
  402bd0:	781b      	ldrb	r3, [r3, #0]
  402bd2:	2b00      	cmp	r3, #0
  402bd4:	d0fb      	beq.n	402bce <main+0x16e>
		{	
			dataReceived = false; 
  402bd6:	2300      	movs	r3, #0
  402bd8:	4a28      	ldr	r2, [pc, #160]	; (402c7c <main+0x21c>)
			
			// get pitch 
			inputPitch = computeWaveletPitch(processBuffer);
  402bda:	4829      	ldr	r0, [pc, #164]	; (402c80 <main+0x220>)
	uint32_t hi = 127;
  402bdc:	257f      	movs	r5, #127	; 0x7f
			dataReceived = false; 
  402bde:	7013      	strb	r3, [r2, #0]
			inputPitch = computeWaveletPitch(processBuffer);
  402be0:	4b28      	ldr	r3, [pc, #160]	; (402c84 <main+0x224>)
  402be2:	4798      	blx	r3
  402be4:	ee07 0a90 	vmov	s15, r0
  402be8:	eddf 8a27 	vldr	s17, [pc, #156]	; 402c88 <main+0x228>
	uint32_t lo = 12; // lowest at C0
  402bec:	210c      	movs	r1, #12
  402bee:	fe87 8aaa 	vmaxnm.f32	s16, s15, s21
			inputPitch = computeWaveletPitch(processBuffer);
  402bf2:	eddf 6a26 	vldr	s13, [pc, #152]	; 402c8c <main+0x22c>
  402bf6:	eddf 7a26 	vldr	s15, [pc, #152]	; 402c90 <main+0x230>
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402bfa:	ee77 7ac8 	vsub.f32	s15, s15, s16
		mid = (hi + lo) >> 1;
  402bfe:	194b      	adds	r3, r1, r5
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402c00:	ee36 7ac8 	vsub.f32	s14, s13, s16
		mid = (hi + lo) >> 1;
  402c04:	085b      	lsrs	r3, r3, #1
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402c06:	eef0 7ae7 	vabs.f32	s15, s15
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402c0a:	eeb0 7ac7 	vabs.f32	s14, s14
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402c0e:	1c58      	adds	r0, r3, #1
  402c10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402c14:	eebc 7ac7 	vcvt.u32.f32	s14, s14
		if (d2 <= d1)
  402c18:	ee17 4a90 	vmov	r4, s15
  402c1c:	ee17 2a10 	vmov	r2, s14
  402c20:	42a2      	cmp	r2, r4
  402c22:	d258      	bcs.n	402cd6 <main+0x276>
  402c24:	f000 bc07 	b.w	403436 <main+0x9d6>
  402c28:	004016e1 	.word	0x004016e1
  402c2c:	0040165d 	.word	0x0040165d
  402c30:	42c80000 	.word	0x42c80000
  402c34:	00401751 	.word	0x00401751
  402c38:	00400361 	.word	0x00400361
  402c3c:	00400d21 	.word	0x00400d21
  402c40:	00402229 	.word	0x00402229
  402c44:	08f0d180 	.word	0x08f0d180
  402c48:	40028000 	.word	0x40028000
  402c4c:	004015bd 	.word	0x004015bd
  402c50:	00401665 	.word	0x00401665
  402c54:	0040166d 	.word	0x0040166d
  402c58:	e000e100 	.word	0xe000e100
  402c5c:	00401675 	.word	0x00401675
  402c60:	00403951 	.word	0x00403951
  402c64:	2044a818 	.word	0x2044a818
  402c68:	bf800000 	.word	0xbf800000
  402c6c:	20434000 	.word	0x20434000
  402c70:	20420000 	.word	0x20420000
  402c74:	20444000 	.word	0x20444000
  402c78:	004076f8 	.word	0x004076f8
  402c7c:	2040401c 	.word	0x2040401c
  402c80:	20446800 	.word	0x20446800
  402c84:	004005c1 	.word	0x004005c1
  402c88:	4643ff66 	.word	0x4643ff66
  402c8c:	43dc0000 	.word	0x43dc0000
  402c90:	43e914fe 	.word	0x43e914fe
  402c94:	20400014 	.word	0x20400014
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402c98:	1c59      	adds	r1, r3, #1
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402c9a:	4ac3      	ldr	r2, [pc, #780]	; (402fa8 <main+0x548>)
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402c9c:	4cc2      	ldr	r4, [pc, #776]	; (402fa8 <main+0x548>)
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402c9e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402ca2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402ca6:	edd2 6a00 	vldr	s13, [r2]
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402caa:	edd4 7a00 	vldr	s15, [r4]
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402cae:	ee36 7ac8 	vsub.f32	s14, s13, s16
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402cb2:	ee77 7ac8 	vsub.f32	s15, s15, s16
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402cb6:	eeb0 7ac7 	vabs.f32	s14, s14
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402cba:	eef0 7ae7 	vabs.f32	s15, s15
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402cbe:	eebc 7ac7 	vcvt.u32.f32	s14, s14
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402cc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		if (d2 <= d1)
  402cc6:	ee17 2a10 	vmov	r2, s14
  402cca:	ee17 4a90 	vmov	r4, s15
  402cce:	42a2      	cmp	r2, r4
  402cd0:	f0c0 83b2 	bcc.w	403438 <main+0x9d8>
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402cd4:	4608      	mov	r0, r1
		mid = (hi + lo) >> 1;
  402cd6:	1943      	adds	r3, r0, r5
	while (lo < hi)
  402cd8:	42a8      	cmp	r0, r5
		mid = (hi + lo) >> 1;
  402cda:	ea4f 0353 	mov.w	r3, r3, lsr #1
	while (lo < hi)
  402cde:	d3db      	bcc.n	402c98 <main+0x238>
			get_frequency_from_all(inputPitch, &closest_note_freq, &closest_note_number);
				
			// find number of semitones from root 
			float scale_pitch = closest_note_freq;
			uint32_t shifted_note_number = closest_note_number; 
			while (shifted_note_number < key_root)
  402ce0:	4bb2      	ldr	r3, [pc, #712]	; (402fac <main+0x54c>)
  402ce2:	462c      	mov	r4, r5
  402ce4:	681b      	ldr	r3, [r3, #0]
  402ce6:	429d      	cmp	r5, r3
  402ce8:	d204      	bcs.n	402cf4 <main+0x294>
  402cea:	4bb0      	ldr	r3, [pc, #704]	; (402fac <main+0x54c>)
				shifted_note_number += 12; 
  402cec:	340c      	adds	r4, #12
			while (shifted_note_number < key_root)
  402cee:	681b      	ldr	r3, [r3, #0]
  402cf0:	42a3      	cmp	r3, r4
  402cf2:	d8fa      	bhi.n	402cea <main+0x28a>
			uint32_t number_of_semitones_from_root = shifted_note_number - key_root;
  402cf4:	4bad      	ldr	r3, [pc, #692]	; (402fac <main+0x54c>)
  402cf6:	681b      	ldr	r3, [r3, #0]
  402cf8:	1ae4      	subs	r4, r4, r3
			while(number_of_semitones_from_root > 12)
  402cfa:	2c0c      	cmp	r4, #12
  402cfc:	d902      	bls.n	402d04 <main+0x2a4>
				number_of_semitones_from_root -= 12;
  402cfe:	3c0c      	subs	r4, #12
			while(number_of_semitones_from_root > 12)
  402d00:	2c0c      	cmp	r4, #12
  402d02:	d8fc      	bhi.n	402cfe <main+0x29e>
						
			// adjust for pitch in between notes in major scale 	
			if (number_of_semitones_from_root == 1 || number_of_semitones_from_root == 3 ||
  402d04:	1e66      	subs	r6, r4, #1
  402d06:	2e09      	cmp	r6, #9
  402d08:	f200 8526 	bhi.w	403758 <main+0xcf8>
  402d0c:	f240 23a5 	movw	r3, #677	; 0x2a5
  402d10:	40f3      	lsrs	r3, r6
  402d12:	07db      	lsls	r3, r3, #31
  402d14:	f140 8520 	bpl.w	403758 <main+0xcf8>
			number_of_semitones_from_root == 6 || number_of_semitones_from_root == 8 || number_of_semitones_from_root == 10 )
			{
				float low_avg = 0.5f * (midi_note_frequencies[closest_note_number] + midi_note_frequencies[closest_note_number-1]); 
  402d18:	4ba3      	ldr	r3, [pc, #652]	; (402fa8 <main+0x548>)
				low_avg = 0.5f * (low_avg + midi_note_frequencies[closest_note_number]); 
  402d1a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
  402d1e:	eef0 6a68 	vmov.f32	s13, s17
				float low_avg = 0.5f * (midi_note_frequencies[closest_note_number] + midi_note_frequencies[closest_note_number-1]); 
  402d22:	eb03 0385 	add.w	r3, r3, r5, lsl #2
  402d26:	ed53 9a01 	vldr	s19, [r3, #-4]
  402d2a:	ee39 7aa8 	vadd.f32	s14, s19, s17
				low_avg = 0.5f * (low_avg + midi_note_frequencies[closest_note_number]); 
  402d2e:	eee7 6a27 	vfma.f32	s13, s14, s15
  402d32:	ee26 7aa7 	vmul.f32	s14, s13, s15
				float hi_avg = 0.5f * (midi_note_frequencies[closest_note_number] + midi_note_frequencies[closest_note_number+1]);
				hi_avg = 0.5f * (hi_avg + midi_note_frequencies[closest_note_number]); 
				if (inputPitch < low_avg)
  402d36:	eeb4 7ac8 	vcmpe.f32	s14, s16
  402d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402d3e:	f340 851c 	ble.w	40377a <main+0xd1a>
				{
					number_of_semitones_from_root -=1;
					scale_pitch = midi_note_frequencies[closest_note_number - 1];
					scale_correct_history[scale_correct_idx++ & SCALE_CORRECT_HISTORY_MASK] = SCALE_DOWN; 
  402d42:	f007 0307 	and.w	r3, r7, #7
					arm_mean_f32(scale_correct_history, SCALE_CORRECT_HISTORY_SIZE, &avg_direction); 
					if(avg_direction < 0.0f)
					{
						number_of_semitones_from_root -=1;
						scale_pitch = midi_note_frequencies[closest_note_number - 1];
						scale_correct_history[scale_correct_idx++ & SCALE_CORRECT_HISTORY_MASK] = SCALE_DOWN;
  402d46:	a944      	add	r1, sp, #272	; 0x110
  402d48:	4a99      	ldr	r2, [pc, #612]	; (402fb0 <main+0x550>)
  402d4a:	4634      	mov	r4, r6
  402d4c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  402d50:	f843 2cb0 	str.w	r2, [r3, #-176]
			// find index in scale where the pitch lies 
			uint32_t interval_idx = 0;
			uint32_t scale_step = 0;
			for (i = 0; i < 7; i++)
			{
				scale_step += major[i];
  402d54:	9b11      	ldr	r3, [sp, #68]	; 0x44
				if (number_of_semitones_from_root == scale_step)
  402d56:	429c      	cmp	r4, r3
  402d58:	f000 850c 	beq.w	403774 <main+0xd14>
				scale_step += major[i];
  402d5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  402d5e:	4413      	add	r3, r2
				if (number_of_semitones_from_root == scale_step)
  402d60:	429c      	cmp	r4, r3
  402d62:	f000 85a4 	beq.w	4038ae <main+0xe4e>
				scale_step += major[i];
  402d66:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  402d68:	4413      	add	r3, r2
				if (number_of_semitones_from_root == scale_step)
  402d6a:	429c      	cmp	r4, r3
  402d6c:	f000 859c 	beq.w	4038a8 <main+0xe48>
				scale_step += major[i];
  402d70:	9a14      	ldr	r2, [sp, #80]	; 0x50
  402d72:	4413      	add	r3, r2
				if (number_of_semitones_from_root == scale_step)
  402d74:	429c      	cmp	r4, r3
  402d76:	f000 85a0 	beq.w	4038ba <main+0xe5a>
				scale_step += major[i];
  402d7a:	9a15      	ldr	r2, [sp, #84]	; 0x54
  402d7c:	4413      	add	r3, r2
				if (number_of_semitones_from_root == scale_step)
  402d7e:	429c      	cmp	r4, r3
  402d80:	f000 8598 	beq.w	4038b4 <main+0xe54>
				scale_step += major[i];
  402d84:	9a16      	ldr	r2, [sp, #88]	; 0x58
  402d86:	4413      	add	r3, r2
			uint32_t interval_idx = 0;
  402d88:	429c      	cmp	r4, r3
  402d8a:	bf0c      	ite	eq
  402d8c:	2406      	moveq	r4, #6
  402d8e:	2400      	movne	r4, #0
					break;
				}
			}
			
			// regular voice 
			harmony_shifts[0] = 1.0f; 
  402d90:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
			dry_freq = inputPitch; 
			num_of_shifts = 1;  
			
			// calculate power 
			arm_power_f32(processBuffer, WIN_SIZE>>2, &power);
  402d94:	aa0c      	add	r2, sp, #48	; 0x30
  402d96:	f44f 7180 	mov.w	r1, #256	; 0x100
  402d9a:	4886      	ldr	r0, [pc, #536]	; (402fb4 <main+0x554>)
  402d9c:	4b86      	ldr	r3, [pc, #536]	; (402fb8 <main+0x558>)
			harmony_shifts[0] = 1.0f; 
  402d9e:	ed8d 9a30 	vstr	s18, [sp, #192]	; 0xc0
			arm_power_f32(processBuffer, WIN_SIZE>>2, &power);
  402da2:	4798      	blx	r3
		
			// determine whether you should add any harmonies 
			if (inputPitch > MINIMUM_PITCH && power > POWER_THRESHOLD)
  402da4:	eeb4 8aea 	vcmpe.f32	s16, s21
  402da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402dac:	f340 8356 	ble.w	40345c <main+0x9fc>
  402db0:	eddf 7a82 	vldr	s15, [pc, #520]	; 402fbc <main+0x55c>
  402db4:	ed9d 7a0c 	vldr	s14, [sp, #48]	; 0x30
  402db8:	eeb4 7ae7 	vcmpe.f32	s14, s15
  402dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402dc0:	f340 834c 	ble.w	40345c <main+0x9fc>
				uint32_t chord_idx = 0;	
				uint32_t saved_interval_idx = interval_idx; 	
				
				// autotune 
				bool *autotune = (bool *)&chord_harmonies[8]; 
				if (*autotune)
  402dc4:	4b7e      	ldr	r3, [pc, #504]	; (402fc0 <main+0x560>)
			oneOverInputPitch = 1.0f / inputPitch;
  402dc6:	eec9 5a08 	vdiv.f32	s11, s18, s16
				if (*autotune)
  402dca:	7a1b      	ldrb	r3, [r3, #8]
  402dcc:	2b00      	cmp	r3, #0
  402dce:	f000 84f4 	beq.w	4037ba <main+0xd5a>
				{
					desired_pitch = scale_pitch;
	
					if (pitch_bend < 56 || pitch_bend > 72) 
  402dd2:	4b7c      	ldr	r3, [pc, #496]	; (402fc4 <main+0x564>)
  402dd4:	681b      	ldr	r3, [r3, #0]
  402dd6:	2b37      	cmp	r3, #55	; 0x37
  402dd8:	d904      	bls.n	402de4 <main+0x384>
  402dda:	4b7a      	ldr	r3, [pc, #488]	; (402fc4 <main+0x564>)
  402ddc:	681b      	ldr	r3, [r3, #0]
  402dde:	2b48      	cmp	r3, #72	; 0x48
  402de0:	f240 8523 	bls.w	40382a <main+0xdca>
						bend_pitch(&desired_pitch, closest_note_number, (uint32_t)pitch_bend);
  402de4:	4b77      	ldr	r3, [pc, #476]	; (402fc4 <main+0x564>)
  402de6:	681b      	ldr	r3, [r3, #0]
	if (pitch_idx < 0 || pitch_idx > 127 || bend < 0 || bend > 127)
  402de8:	2b7f      	cmp	r3, #127	; 0x7f
  402dea:	f200 851e 	bhi.w	40382a <main+0xdca>
	if (pitch_bend > 64)
  402dee:	4b75      	ldr	r3, [pc, #468]	; (402fc4 <main+0x564>)
  402df0:	681b      	ldr	r3, [r3, #0]
  402df2:	2b40      	cmp	r3, #64	; 0x40
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  402df4:	4b73      	ldr	r3, [pc, #460]	; (402fc4 <main+0x564>)
  402df6:	ed93 7a00 	vldr	s14, [r3]
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  402dfa:	4b6b      	ldr	r3, [pc, #428]	; (402fa8 <main+0x548>)
  402dfc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
	if (pitch_bend > 64)
  402e00:	f200 8571 	bhi.w	4038e6 <main+0xe86>
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402e04:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  402e08:	eddf 6a6f 	vldr	s13, [pc, #444]	; 402fc8 <main+0x568>
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402e0c:	ed13 6a02 	vldr	s12, [r3, #-8]
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402e10:	eddf 7a6e 	vldr	s15, [pc, #440]	; 402fcc <main+0x56c>
  402e14:	ee37 7a66 	vsub.f32	s14, s14, s13
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402e18:	ee78 6ac6 	vsub.f32	s13, s17, s12
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402e1c:	eeb0 6a69 	vmov.f32	s12, s19
  402e20:	ee67 7a27 	vmul.f32	s15, s14, s15
  402e24:	eea6 6aa7 	vfma.f32	s12, s13, s15
				
					harmony_shifts[0] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402e28:	ee36 7a48 	vsub.f32	s14, s12, s16
					dry_freq = desired_pitch; 
				}
				
				// octave down
				if(chord_harmonies[chord_idx] == true)
  402e2c:	4b64      	ldr	r3, [pc, #400]	; (402fc0 <main+0x560>)
					harmony_shifts[0] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402e2e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
				if(chord_harmonies[chord_idx] == true)
  402e32:	781b      	ldrb	r3, [r3, #0]
					harmony_shifts[0] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402e34:	eee5 7a87 	vfma.f32	s15, s11, s14
  402e38:	edcd 7a30 	vstr	s15, [sp, #192]	; 0xc0
				if(chord_harmonies[chord_idx] == true)
  402e3c:	2b00      	cmp	r3, #0
  402e3e:	f000 84d0 	beq.w	4037e2 <main+0xd82>
				{
					if (*autotune)
						desired_pitch = scale_pitch*powerf(1.059463094359f, -12);
  402e42:	eddf 7a63 	vldr	s15, [pc, #396]	; 402fd0 <main+0x570>
  402e46:	ee69 7aa7 	vmul.f32	s15, s19, s15
					else
						desired_pitch = closest_note_freq*powerf(1.059463094359f, -12);
					if (pitch_bend < 56 || pitch_bend > 72)
  402e4a:	4b5e      	ldr	r3, [pc, #376]	; (402fc4 <main+0x564>)
  402e4c:	681b      	ldr	r3, [r3, #0]
  402e4e:	2b37      	cmp	r3, #55	; 0x37
  402e50:	d903      	bls.n	402e5a <main+0x3fa>
  402e52:	4b5c      	ldr	r3, [pc, #368]	; (402fc4 <main+0x564>)
  402e54:	681b      	ldr	r3, [r3, #0]
  402e56:	2b48      	cmp	r3, #72	; 0x48
  402e58:	d91e      	bls.n	402e98 <main+0x438>
						bend_pitch(&desired_pitch, closest_note_number, (uint32_t)pitch_bend);
  402e5a:	4b5a      	ldr	r3, [pc, #360]	; (402fc4 <main+0x564>)
  402e5c:	681b      	ldr	r3, [r3, #0]
	if (pitch_idx < 0 || pitch_idx > 127 || bend < 0 || bend > 127)
  402e5e:	2b7f      	cmp	r3, #127	; 0x7f
  402e60:	d81a      	bhi.n	402e98 <main+0x438>
	if (pitch_bend > 64)
  402e62:	4b58      	ldr	r3, [pc, #352]	; (402fc4 <main+0x564>)
  402e64:	681b      	ldr	r3, [r3, #0]
  402e66:	2b40      	cmp	r3, #64	; 0x40
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  402e68:	4b56      	ldr	r3, [pc, #344]	; (402fc4 <main+0x564>)
  402e6a:	edd3 6a00 	vldr	s13, [r3]
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  402e6e:	4b4e      	ldr	r3, [pc, #312]	; (402fa8 <main+0x548>)
  402e70:	eb03 0385 	add.w	r3, r3, r5, lsl #2
	if (pitch_bend > 64)
  402e74:	f200 854b 	bhi.w	40390e <main+0xeae>
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402e78:	eef8 6a66 	vcvt.f32.u32	s13, s13
  402e7c:	ed9f 5a52 	vldr	s10, [pc, #328]	; 402fc8 <main+0x568>
  402e80:	ed9f 7a52 	vldr	s14, [pc, #328]	; 402fcc <main+0x56c>
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402e84:	ed53 4a02 	vldr	s9, [r3, #-8]
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402e88:	ee76 6ac5 	vsub.f32	s13, s13, s10
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402e8c:	ee38 5ae4 	vsub.f32	s10, s17, s9
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402e90:	ee26 7a87 	vmul.f32	s14, s13, s14
  402e94:	eee7 7a05 	vfma.f32	s15, s14, s10
					harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402e98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
					chord_freqs[chord_idx].active = true;
					chord_freqs[chord_idx].freq = desired_pitch;
  402e9c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
					harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402ea0:	ee77 6ac8 	vsub.f32	s13, s15, s16
					chord_freqs[chord_idx].active = true;
  402ea4:	2301      	movs	r3, #1
					harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402ea6:	eef0 7a47 	vmov.f32	s15, s14
					chord_freqs[chord_idx].active = true;
  402eaa:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
					harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402eae:	2302      	movs	r3, #2
  402eb0:	eee5 7aa6 	vfma.f32	s15, s11, s13
  402eb4:	9303      	str	r3, [sp, #12]
  402eb6:	edcd 7a31 	vstr	s15, [sp, #196]	; 0xc4
  402eba:	a90e      	add	r1, sp, #56	; 0x38
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  402ebc:	1cab      	adds	r3, r5, #2
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402ebe:	1eaa      	subs	r2, r5, #2
  402ec0:	f10d 0880 	add.w	r8, sp, #128	; 0x80
  402ec4:	9104      	str	r1, [sp, #16]
			num_of_shifts = 1;  
  402ec6:	f06f 000b 	mvn.w	r0, #11
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402eca:	4937      	ldr	r1, [pc, #220]	; (402fa8 <main+0x548>)
			num_of_shifts = 1;  
  402ecc:	46c4      	mov	ip, r8
  402ece:	9407      	str	r4, [sp, #28]
  402ed0:	f04f 0e01 	mov.w	lr, #1
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  402ed4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  402ed8:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402edc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
			num_of_shifts = 1;  
  402ee0:	4621      	mov	r1, r4
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  402ee2:	930b      	str	r3, [sp, #44]	; 0x2c
			num_of_shifts = 1;  
  402ee4:	ab0e      	add	r3, sp, #56	; 0x38
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402ee6:	920a      	str	r2, [sp, #40]	; 0x28
  402ee8:	461e      	mov	r6, r3
				// low harmonies 
				int32_t steps_to_harmony = -12;
				for (i = 0; i < 3; i++, chord_idx++)
				{
					for (uint32_t j = 0; j < harmony_steps[i]; j++, interval_idx++)
						steps_to_harmony += major[interval_idx % 7];
  402eea:	4f3a      	ldr	r7, [pc, #232]	; (402fd4 <main+0x574>)
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402eec:	eddf 3a36 	vldr	s7, [pc, #216]	; 402fc8 <main+0x568>
					for (uint32_t j = 0; j < harmony_steps[i]; j++, interval_idx++)
  402ef0:	f856 4b04 	ldr.w	r4, [r6], #4
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402ef4:	ed9f 4a35 	vldr	s8, [pc, #212]	; 402fcc <main+0x56c>
  402ef8:	f8dd 800c 	ldr.w	r8, [sp, #12]
					for (uint32_t j = 0; j < harmony_steps[i]; j++, interval_idx++)
  402efc:	2c00      	cmp	r4, #0
  402efe:	f000 808e 	beq.w	40301e <main+0x5be>
  402f02:	440c      	add	r4, r1
						steps_to_harmony += major[interval_idx % 7];
  402f04:	fba7 2301 	umull	r2, r3, r7, r1
  402f08:	1aca      	subs	r2, r1, r3
  402f0a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
  402f0e:	aa44      	add	r2, sp, #272	; 0x110
  402f10:	089b      	lsrs	r3, r3, #2
  402f12:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  402f16:	1acb      	subs	r3, r1, r3
					for (uint32_t j = 0; j < harmony_steps[i]; j++, interval_idx++)
  402f18:	3101      	adds	r1, #1
						steps_to_harmony += major[interval_idx % 7];
  402f1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
					for (uint32_t j = 0; j < harmony_steps[i]; j++, interval_idx++)
  402f1e:	42a1      	cmp	r1, r4
						steps_to_harmony += major[interval_idx % 7];
  402f20:	f853 3ccc 	ldr.w	r3, [r3, #-204]
  402f24:	4418      	add	r0, r3
					for (uint32_t j = 0; j < harmony_steps[i]; j++, interval_idx++)
  402f26:	d1ed      	bne.n	402f04 <main+0x4a4>
					if(chord_harmonies[chord_idx] == true)
  402f28:	4b25      	ldr	r3, [pc, #148]	; (402fc0 <main+0x560>)
  402f2a:	f813 300e 	ldrb.w	r3, [r3, lr]
  402f2e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
  402f32:	2b00      	cmp	r3, #0
  402f34:	d07b      	beq.n	40302e <main+0x5ce>
	uint32_t exp_abs = Abs(exponent);
  402f36:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
	while (exp_abs)
  402f3a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	uint32_t exp_abs = Abs(exponent);
  402f3e:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
	while (exp_abs)
  402f42:	b140      	cbz	r0, 402f56 <main+0x4f6>
		result *= base;
  402f44:	ed9f 7a24 	vldr	s14, [pc, #144]	; 402fd8 <main+0x578>
	while (exp_abs)
  402f48:	3b01      	subs	r3, #1
		result *= base;
  402f4a:	ee67 7a87 	vmul.f32	s15, s15, s14
	while (exp_abs)
  402f4e:	d1fb      	bne.n	402f48 <main+0x4e8>
	if (exponent < 0)
  402f50:	2800      	cmp	r0, #0
  402f52:	f2c0 8464 	blt.w	40381e <main+0xdbe>
					{
						desired_pitch = scale_pitch*powerf(1.059463094359f, steps_to_harmony);
						if (pitch_bend < 56 || pitch_bend > 72)
  402f56:	4b1b      	ldr	r3, [pc, #108]	; (402fc4 <main+0x564>)
						desired_pitch = scale_pitch*powerf(1.059463094359f, steps_to_harmony);
  402f58:	ee69 7aa7 	vmul.f32	s15, s19, s15
						if (pitch_bend < 56 || pitch_bend > 72)
  402f5c:	681b      	ldr	r3, [r3, #0]
  402f5e:	2b37      	cmp	r3, #55	; 0x37
  402f60:	d903      	bls.n	402f6a <main+0x50a>
  402f62:	4b18      	ldr	r3, [pc, #96]	; (402fc4 <main+0x564>)
  402f64:	681b      	ldr	r3, [r3, #0]
  402f66:	2b48      	cmp	r3, #72	; 0x48
  402f68:	d938      	bls.n	402fdc <main+0x57c>
							bend_pitch(&desired_pitch, closest_note_number, (uint32_t)pitch_bend);
  402f6a:	4b16      	ldr	r3, [pc, #88]	; (402fc4 <main+0x564>)
  402f6c:	681b      	ldr	r3, [r3, #0]
	if (pitch_idx < 0 || pitch_idx > 127 || bend < 0 || bend > 127)
  402f6e:	2b7f      	cmp	r3, #127	; 0x7f
  402f70:	d834      	bhi.n	402fdc <main+0x57c>
	if (pitch_bend > 64)
  402f72:	4b14      	ldr	r3, [pc, #80]	; (402fc4 <main+0x564>)
  402f74:	681b      	ldr	r3, [r3, #0]
  402f76:	2b40      	cmp	r3, #64	; 0x40
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  402f78:	4b12      	ldr	r3, [pc, #72]	; (402fc4 <main+0x564>)
  402f7a:	ed93 7a00 	vldr	s14, [r3]
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  402f7e:	4b0a      	ldr	r3, [pc, #40]	; (402fa8 <main+0x548>)
  402f80:	eb03 0385 	add.w	r3, r3, r5, lsl #2
	if (pitch_bend > 64)
  402f84:	f200 8455 	bhi.w	403832 <main+0xdd2>
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402f88:	eeb8 7a47 	vcvt.f32.u32	s14, s14
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402f8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  402f8e:	ed93 5a00 	vldr	s10, [r3]
  402f92:	edd2 6a00 	vldr	s13, [r2]
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402f96:	ee37 7a63 	vsub.f32	s14, s14, s7
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402f9a:	ee75 6a66 	vsub.f32	s13, s10, s13
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402f9e:	ee27 7a04 	vmul.f32	s14, s14, s8
  402fa2:	eee6 7a87 	vfma.f32	s15, s13, s14
  402fa6:	e019      	b.n	402fdc <main+0x57c>
  402fa8:	00407720 	.word	0x00407720
  402fac:	20400040 	.word	0x20400040
  402fb0:	bf800000 	.word	0xbf800000
  402fb4:	20446800 	.word	0x20446800
  402fb8:	004039d5 	.word	0x004039d5
  402fbc:	38d1b717 	.word	0x38d1b717
  402fc0:	2041c114 	.word	0x2041c114
  402fc4:	20400048 	.word	0x20400048
  402fc8:	42800000 	.word	0x42800000
  402fcc:	3c800000 	.word	0x3c800000
  402fd0:	3efffff5 	.word	0x3efffff5
  402fd4:	24924925 	.word	0x24924925
  402fd8:	3f879c7d 	.word	0x3f879c7d
						harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402fdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
						chord_freqs[chord_idx].active = true;
						chord_freqs[chord_idx].freq = desired_pitch;
  402fe0:	edcc 7a02 	vstr	s15, [ip, #8]
						harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402fe4:	ee77 6ac8 	vsub.f32	s13, s15, s16
  402fe8:	ab44      	add	r3, sp, #272	; 0x110
				for (i = 0; i < 3; i++, chord_idx++)
  402fea:	f10e 0e01 	add.w	lr, lr, #1
						chord_freqs[chord_idx].active = true;
  402fee:	2201      	movs	r2, #1
						harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402ff0:	eef0 7a47 	vmov.f32	s15, s14
  402ff4:	eb03 0388 	add.w	r3, r3, r8, lsl #2
				for (i = 0; i < 3; i++, chord_idx++)
  402ff8:	f1be 0f04 	cmp.w	lr, #4
						chord_freqs[chord_idx].active = true;
  402ffc:	f88c 200c 	strb.w	r2, [ip, #12]
						harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  403000:	f108 0801 	add.w	r8, r8, #1
  403004:	f10c 0c08 	add.w	ip, ip, #8
  403008:	eee5 7aa6 	vfma.f32	s15, s11, s13
  40300c:	ed43 7a14 	vstr	s15, [r3, #-80]	; 0xffffffb0
				for (i = 0; i < 3; i++, chord_idx++)
  403010:	d016      	beq.n	403040 <main+0x5e0>
  403012:	4621      	mov	r1, r4
					for (uint32_t j = 0; j < harmony_steps[i]; j++, interval_idx++)
  403014:	f856 4b04 	ldr.w	r4, [r6], #4
  403018:	2c00      	cmp	r4, #0
  40301a:	f47f af72 	bne.w	402f02 <main+0x4a2>
					if(chord_harmonies[chord_idx] == true)
  40301e:	4bcd      	ldr	r3, [pc, #820]	; (403354 <main+0x8f4>)
					for (uint32_t j = 0; j < harmony_steps[i]; j++, interval_idx++)
  403020:	460c      	mov	r4, r1
					if(chord_harmonies[chord_idx] == true)
  403022:	f813 300e 	ldrb.w	r3, [r3, lr]
  403026:	f003 02ff 	and.w	r2, r3, #255	; 0xff
  40302a:	2b00      	cmp	r3, #0
  40302c:	d183      	bne.n	402f36 <main+0x4d6>
				for (i = 0; i < 3; i++, chord_idx++)
  40302e:	f10e 0e01 	add.w	lr, lr, #1
					} else chord_freqs[chord_idx].active = false;
  403032:	f88c 200c 	strb.w	r2, [ip, #12]
  403036:	f10c 0c08 	add.w	ip, ip, #8
				for (i = 0; i < 3; i++, chord_idx++)
  40303a:	f1be 0f04 	cmp.w	lr, #4
  40303e:	d1e8      	bne.n	403012 <main+0x5b2>
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  403040:	48c5      	ldr	r0, [pc, #788]	; (403358 <main+0x8f8>)
  403042:	1eaa      	subs	r2, r5, #2
  403044:	9c07      	ldr	r4, [sp, #28]
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  403046:	1cab      	adds	r3, r5, #2
  403048:	f8cd a01c 	str.w	sl, [sp, #28]
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  40304c:	eb00 0782 	add.w	r7, r0, r2, lsl #2
  403050:	f8dd a010 	ldr.w	sl, [sp, #16]
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  403054:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
  403058:	f8cd 800c 	str.w	r8, [sp, #12]
  40305c:	2100      	movs	r1, #0
				// high harmonies 
				steps_to_harmony = 0;
				interval_idx = saved_interval_idx;  	
				for (i = 0; i < 3; i++, chord_idx++)
				{
					for (uint32_t j = 0; j < harmony_steps[i]; j++, interval_idx++)
  40305e:	f85a 0b04 	ldr.w	r0, [sl], #4
  403062:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
						steps_to_harmony += major[interval_idx % 7];
  403066:	4ebd      	ldr	r6, [pc, #756]	; (40335c <main+0x8fc>)
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  403068:	eddf 3abd 	vldr	s7, [pc, #756]	; 403360 <main+0x900>
  40306c:	ed9f 4abd 	vldr	s8, [pc, #756]	; 403364 <main+0x904>
					for (uint32_t j = 0; j < harmony_steps[i]; j++, interval_idx++)
  403070:	2800      	cmp	r0, #0
  403072:	d072      	beq.n	40315a <main+0x6fa>
  403074:	4420      	add	r0, r4
						steps_to_harmony += major[interval_idx % 7];
  403076:	fba6 2304 	umull	r2, r3, r6, r4
  40307a:	1ae2      	subs	r2, r4, r3
  40307c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
  403080:	aa44      	add	r2, sp, #272	; 0x110
  403082:	089b      	lsrs	r3, r3, #2
  403084:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  403088:	1ae3      	subs	r3, r4, r3
					for (uint32_t j = 0; j < harmony_steps[i]; j++, interval_idx++)
  40308a:	3401      	adds	r4, #1
						steps_to_harmony += major[interval_idx % 7];
  40308c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
					for (uint32_t j = 0; j < harmony_steps[i]; j++, interval_idx++)
  403090:	4284      	cmp	r4, r0
						steps_to_harmony += major[interval_idx % 7];
  403092:	f853 3ccc 	ldr.w	r3, [r3, #-204]
  403096:	4419      	add	r1, r3
					for (uint32_t j = 0; j < harmony_steps[i]; j++, interval_idx++)
  403098:	d1ed      	bne.n	403076 <main+0x616>
					if(chord_harmonies[chord_idx] == true)
  40309a:	4bae      	ldr	r3, [pc, #696]	; (403354 <main+0x8f4>)
  40309c:	f813 300e 	ldrb.w	r3, [r3, lr]
  4030a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
  4030a4:	2b00      	cmp	r3, #0
  4030a6:	d060      	beq.n	40316a <main+0x70a>
	uint32_t exp_abs = Abs(exponent);
  4030a8:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
	while (exp_abs)
  4030ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	uint32_t exp_abs = Abs(exponent);
  4030b0:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
	while (exp_abs)
  4030b4:	b141      	cbz	r1, 4030c8 <main+0x668>
		result *= base;
  4030b6:	ed9f 7aac 	vldr	s14, [pc, #688]	; 403368 <main+0x908>
	while (exp_abs)
  4030ba:	3b01      	subs	r3, #1
		result *= base;
  4030bc:	ee67 7a87 	vmul.f32	s15, s15, s14
	while (exp_abs)
  4030c0:	d1fb      	bne.n	4030ba <main+0x65a>
	if (exponent < 0)
  4030c2:	2900      	cmp	r1, #0
  4030c4:	f2c0 83a6 	blt.w	403814 <main+0xdb4>
					{
						desired_pitch = scale_pitch*powerf(1.059463094359f, steps_to_harmony);
						if (pitch_bend < 56 || pitch_bend > 72)
  4030c8:	4ba8      	ldr	r3, [pc, #672]	; (40336c <main+0x90c>)
						desired_pitch = scale_pitch*powerf(1.059463094359f, steps_to_harmony);
  4030ca:	ee69 7aa7 	vmul.f32	s15, s19, s15
						if (pitch_bend < 56 || pitch_bend > 72)
  4030ce:	681b      	ldr	r3, [r3, #0]
  4030d0:	2b37      	cmp	r3, #55	; 0x37
  4030d2:	d903      	bls.n	4030dc <main+0x67c>
  4030d4:	4ba5      	ldr	r3, [pc, #660]	; (40336c <main+0x90c>)
  4030d6:	681b      	ldr	r3, [r3, #0]
  4030d8:	2b48      	cmp	r3, #72	; 0x48
  4030da:	d91c      	bls.n	403116 <main+0x6b6>
							bend_pitch(&desired_pitch, closest_note_number, (uint32_t)pitch_bend);
  4030dc:	4ba3      	ldr	r3, [pc, #652]	; (40336c <main+0x90c>)
  4030de:	681b      	ldr	r3, [r3, #0]
	if (pitch_idx < 0 || pitch_idx > 127 || bend < 0 || bend > 127)
  4030e0:	2b7f      	cmp	r3, #127	; 0x7f
  4030e2:	d818      	bhi.n	403116 <main+0x6b6>
	if (pitch_bend > 64)
  4030e4:	4ba1      	ldr	r3, [pc, #644]	; (40336c <main+0x90c>)
  4030e6:	681b      	ldr	r3, [r3, #0]
  4030e8:	2b40      	cmp	r3, #64	; 0x40
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  4030ea:	4ba0      	ldr	r3, [pc, #640]	; (40336c <main+0x90c>)
  4030ec:	ed93 7a00 	vldr	s14, [r3]
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  4030f0:	4b99      	ldr	r3, [pc, #612]	; (403358 <main+0x8f8>)
  4030f2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
	if (pitch_bend > 64)
  4030f6:	f200 83af 	bhi.w	403858 <main+0xdf8>
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  4030fa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  4030fe:	edd7 6a00 	vldr	s13, [r7]
  403102:	ed93 5a00 	vldr	s10, [r3]
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  403106:	ee37 7a63 	vsub.f32	s14, s14, s7
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  40310a:	ee75 6a66 	vsub.f32	s13, s10, s13
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  40310e:	ee27 7a04 	vmul.f32	s14, s14, s8
  403112:	eee7 7a26 	vfma.f32	s15, s14, s13
						harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  403116:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
						chord_freqs[chord_idx].active = true;
						chord_freqs[chord_idx].freq = desired_pitch;
  40311a:	edc8 7a08 	vstr	s15, [r8, #32]
						harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  40311e:	ee77 6ac8 	vsub.f32	s13, s15, s16
  403122:	9a03      	ldr	r2, [sp, #12]
  403124:	ac44      	add	r4, sp, #272	; 0x110
				for (i = 0; i < 3; i++, chord_idx++)
  403126:	f10e 0e01 	add.w	lr, lr, #1
						harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  40312a:	eef0 7a47 	vmov.f32	s15, s14
  40312e:	f108 0808 	add.w	r8, r8, #8
  403132:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  403136:	3201      	adds	r2, #1
				for (i = 0; i < 3; i++, chord_idx++)
  403138:	f1be 0f07 	cmp.w	lr, #7
						harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  40313c:	eee5 7aa6 	vfma.f32	s15, s11, s13
  403140:	9203      	str	r2, [sp, #12]
						chord_freqs[chord_idx].active = true;
  403142:	f04f 0201 	mov.w	r2, #1
  403146:	f888 201c 	strb.w	r2, [r8, #28]
						harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  40314a:	ed43 7a14 	vstr	s15, [r3, #-80]	; 0xffffffb0
				for (i = 0; i < 3; i++, chord_idx++)
  40314e:	d015      	beq.n	40317c <main+0x71c>
  403150:	4604      	mov	r4, r0
					for (uint32_t j = 0; j < harmony_steps[i]; j++, interval_idx++)
  403152:	f85a 0b04 	ldr.w	r0, [sl], #4
  403156:	2800      	cmp	r0, #0
  403158:	d18c      	bne.n	403074 <main+0x614>
					if(chord_harmonies[chord_idx] == true)
  40315a:	4b7e      	ldr	r3, [pc, #504]	; (403354 <main+0x8f4>)
					for (uint32_t j = 0; j < harmony_steps[i]; j++, interval_idx++)
  40315c:	4620      	mov	r0, r4
					if(chord_harmonies[chord_idx] == true)
  40315e:	f813 300e 	ldrb.w	r3, [r3, lr]
  403162:	f003 02ff 	and.w	r2, r3, #255	; 0xff
  403166:	2b00      	cmp	r3, #0
  403168:	d19e      	bne.n	4030a8 <main+0x648>
				for (i = 0; i < 3; i++, chord_idx++)
  40316a:	f10e 0e01 	add.w	lr, lr, #1
					} else chord_freqs[chord_idx].active = false; 
  40316e:	f888 2024 	strb.w	r2, [r8, #36]	; 0x24
  403172:	f108 0808 	add.w	r8, r8, #8
				for (i = 0; i < 3; i++, chord_idx++)
  403176:	f1be 0f07 	cmp.w	lr, #7
  40317a:	d1e9      	bne.n	403150 <main+0x6f0>
				}
				
				// octave up
				if(chord_harmonies[chord_idx] == true)
  40317c:	4b75      	ldr	r3, [pc, #468]	; (403354 <main+0x8f4>)
  40317e:	f8dd a01c 	ldr.w	sl, [sp, #28]
  403182:	79db      	ldrb	r3, [r3, #7]
  403184:	f003 02ff 	and.w	r2, r3, #255	; 0xff
  403188:	2b00      	cmp	r3, #0
  40318a:	f000 8321 	beq.w	4037d0 <main+0xd70>
				{
					if (*autotune)
  40318e:	4b71      	ldr	r3, [pc, #452]	; (403354 <main+0x8f4>)
  403190:	7a1b      	ldrb	r3, [r3, #8]
  403192:	2b00      	cmp	r3, #0
  403194:	f040 8371 	bne.w	40387a <main+0xe1a>
						desired_pitch = scale_pitch*powerf(1.059463094359f, 12);
					else
						desired_pitch = closest_note_freq*powerf(1.059463094359f, 12);
  403198:	eddf 9a75 	vldr	s19, [pc, #468]	; 403370 <main+0x910>
  40319c:	ee68 8aa9 	vmul.f32	s17, s17, s19
					if (pitch_bend < 56 || pitch_bend > 72)
  4031a0:	4b72      	ldr	r3, [pc, #456]	; (40336c <main+0x90c>)
  4031a2:	681b      	ldr	r3, [r3, #0]
  4031a4:	2b37      	cmp	r3, #55	; 0x37
  4031a6:	d903      	bls.n	4031b0 <main+0x750>
  4031a8:	4b70      	ldr	r3, [pc, #448]	; (40336c <main+0x90c>)
  4031aa:	681b      	ldr	r3, [r3, #0]
  4031ac:	2b48      	cmp	r3, #72	; 0x48
  4031ae:	d920      	bls.n	4031f2 <main+0x792>
						bend_pitch(&desired_pitch, closest_note_number, (uint32_t)pitch_bend);
  4031b0:	4b6e      	ldr	r3, [pc, #440]	; (40336c <main+0x90c>)
  4031b2:	681b      	ldr	r3, [r3, #0]
	if (pitch_idx < 0 || pitch_idx > 127 || bend < 0 || bend > 127)
  4031b4:	2b7f      	cmp	r3, #127	; 0x7f
  4031b6:	d81c      	bhi.n	4031f2 <main+0x792>
	if (pitch_bend > 64)
  4031b8:	4b6c      	ldr	r3, [pc, #432]	; (40336c <main+0x90c>)
  4031ba:	681b      	ldr	r3, [r3, #0]
  4031bc:	2b40      	cmp	r3, #64	; 0x40
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  4031be:	4b6b      	ldr	r3, [pc, #428]	; (40336c <main+0x90c>)
  4031c0:	ed93 7a00 	vldr	s14, [r3]
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  4031c4:	4b64      	ldr	r3, [pc, #400]	; (403358 <main+0x8f8>)
  4031c6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
	if (pitch_bend > 64)
  4031ca:	f200 8379 	bhi.w	4038c0 <main+0xe60>
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  4031ce:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  4031d2:	eddf 6a63 	vldr	s13, [pc, #396]	; 403360 <main+0x900>
  4031d6:	eddf 7a63 	vldr	s15, [pc, #396]	; 403364 <main+0x904>
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  4031da:	edd3 4a00 	vldr	s9, [r3]
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  4031de:	ee37 7a66 	vsub.f32	s14, s14, s13
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  4031e2:	ed13 5a02 	vldr	s10, [r3, #-8]
  4031e6:	ee74 6ac5 	vsub.f32	s13, s9, s10
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  4031ea:	ee67 7a27 	vmul.f32	s15, s14, s15
  4031ee:	eee6 8aa7 	vfma.f32	s17, s13, s15
					harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  4031f2:	ee38 7ac8 	vsub.f32	s14, s17, s16
  4031f6:	9a03      	ldr	r2, [sp, #12]
  4031f8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  4031fc:	a944      	add	r1, sp, #272	; 0x110
  4031fe:	eef0 1a68 	vmov.f32	s3, s17
  403202:	f102 0e01 	add.w	lr, r2, #1
  403206:	eb01 0382 	add.w	r3, r1, r2, lsl #2
					chord_freqs[chord_idx].active = true;
  40320a:	2201      	movs	r2, #1
					harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  40320c:	eee5 7a87 	vfma.f32	s15, s11, s14
					chord_freqs[chord_idx].freq = desired_pitch;
  403210:	edcd 8a2e 	vstr	s17, [sp, #184]	; 0xb8
					chord_freqs[chord_idx].active = true;
  403214:	f88d 20bc 	strb.w	r2, [sp, #188]	; 0xbc
					harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  403218:	ed43 7a14 	vstr	s15, [r3, #-80]	; 0xffffffb0
							// check if chord harmonies are already doing this harmony 
							desired_pitch = harmony_list[i].freq;
							bool already_harmonized = false; 
							for (int k = 0; k < 8; k++)
							{
								if (chord_freqs[k].active && Abs(desired_pitch - chord_freqs[k].freq) < 1.0f)
  40321c:	f89d 20a4 	ldrb.w	r2, [sp, #164]	; 0xa4
								if (pitch_bend != 64)
									bend_pitch(&desired_pitch, harmony_list[i].idx, (uint32_t)pitch_bend);
							
								pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
							
								if (pitch_shift > 0.1f && pitch_shift < 6.0f) // range check
  403220:	eef1 8a04 	vmov.f32	s17, #20	; 0x40a00000  5.0
								pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  403224:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
								if (chord_freqs[k].active && Abs(desired_pitch - chord_freqs[k].freq) < 1.0f)
  403228:	f89d 6084 	ldrb.w	r6, [sp, #132]	; 0x84
						if (Abs(harmony_list[i].freq - dry_freq) > 8.0f) // don't harmonize input pitch twice
  40322c:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
								if (chord_freqs[k].active && Abs(desired_pitch - chord_freqs[k].freq) < 1.0f)
  403230:	9203      	str	r2, [sp, #12]
  403232:	eddd 2a20 	vldr	s5, [sp, #128]	; 0x80
  403236:	2300      	movs	r3, #0
  403238:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
  40323c:	f89d 508c 	ldrb.w	r5, [sp, #140]	; 0x8c
  403240:	ed9d 3a22 	vldr	s6, [sp, #136]	; 0x88
  403244:	f89d 4094 	ldrb.w	r4, [sp, #148]	; 0x94
  403248:	eddd 3a24 	vldr	s7, [sp, #144]	; 0x90
  40324c:	f89d 709c 	ldrb.w	r7, [sp, #156]	; 0x9c
  403250:	ed9d 4a26 	vldr	s8, [sp, #152]	; 0x98
  403254:	ed9d 0a28 	vldr	s0, [sp, #160]	; 0xa0
  403258:	f89d c0ac 	ldrb.w	ip, [sp, #172]	; 0xac
  40325c:	eddd 0a2a 	vldr	s1, [sp, #168]	; 0xa8
  403260:	f89d 80b4 	ldrb.w	r8, [sp, #180]	; 0xb4
  403264:	ed9d 1a2c 	vldr	s2, [sp, #176]	; 0xb0
								if (pitch_shift > 0.1f && pitch_shift < 6.0f) // range check
  403268:	eddf 4a42 	vldr	s9, [pc, #264]	; 403374 <main+0x914>
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  40326c:	eddf 9a3c 	vldr	s19, [pc, #240]	; 403360 <main+0x900>
  403270:	ed9f 2a3c 	vldr	s4, [pc, #240]	; 403364 <main+0x904>
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  403274:	ed9f 9a40 	vldr	s18, [pc, #256]	; 403378 <main+0x918>
								if (chord_freqs[k].active && Abs(desired_pitch - chord_freqs[k].freq) < 1.0f)
  403278:	9204      	str	r2, [sp, #16]
					if (harmony_list[i].active)
  40327a:	0059      	lsls	r1, r3, #1
  40327c:	483f      	ldr	r0, [pc, #252]	; (40337c <main+0x91c>)
  40327e:	18ca      	adds	r2, r1, r3
  403280:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  403284:	7a10      	ldrb	r0, [r2, #8]
  403286:	2800      	cmp	r0, #0
  403288:	f000 80d0 	beq.w	40342c <main+0x9cc>
						if (Abs(harmony_list[i].freq - dry_freq) > 8.0f) // don't harmonize input pitch twice
  40328c:	edd2 7a00 	vldr	s15, [r2]
  403290:	ee77 7ac6 	vsub.f32	s15, s15, s12
  403294:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  403298:	edd2 7a00 	vldr	s15, [r2]
  40329c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4032a0:	bf4c      	ite	mi
  4032a2:	ee76 7a67 	vsubmi.f32	s15, s12, s15
  4032a6:	ee77 7ac6 	vsubpl.f32	s15, s15, s12
  4032aa:	eef4 7ae6 	vcmpe.f32	s15, s13
  4032ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4032b2:	bfcc      	ite	gt
  4032b4:	2201      	movgt	r2, #1
  4032b6:	2200      	movle	r2, #0
  4032b8:	2a00      	cmp	r2, #0
  4032ba:	f000 80b7 	beq.w	40342c <main+0x9cc>
							desired_pitch = harmony_list[i].freq;
  4032be:	18ca      	adds	r2, r1, r3
  4032c0:	482e      	ldr	r0, [pc, #184]	; (40337c <main+0x91c>)
  4032c2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  4032c6:	edd2 7a00 	vldr	s15, [r2]
								if (chord_freqs[k].active && Abs(desired_pitch - chord_freqs[k].freq) < 1.0f)
  4032ca:	b14e      	cbz	r6, 4032e0 <main+0x880>
  4032cc:	ee37 5ae2 	vsub.f32	s10, s15, s5
  4032d0:	eeb0 5ac5 	vabs.f32	s10, s10
  4032d4:	eeb4 5ac7 	vcmpe.f32	s10, s14
  4032d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4032dc:	f100 80a6 	bmi.w	40342c <main+0x9cc>
  4032e0:	b14d      	cbz	r5, 4032f6 <main+0x896>
  4032e2:	ee37 5ac3 	vsub.f32	s10, s15, s6
  4032e6:	eeb0 5ac5 	vabs.f32	s10, s10
  4032ea:	eeb4 5ac7 	vcmpe.f32	s10, s14
  4032ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4032f2:	f100 809b 	bmi.w	40342c <main+0x9cc>
  4032f6:	b14c      	cbz	r4, 40330c <main+0x8ac>
  4032f8:	ee37 5ae3 	vsub.f32	s10, s15, s7
  4032fc:	eeb0 5ac5 	vabs.f32	s10, s10
  403300:	eeb4 5ac7 	vcmpe.f32	s10, s14
  403304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403308:	f100 8090 	bmi.w	40342c <main+0x9cc>
  40330c:	b14f      	cbz	r7, 403322 <main+0x8c2>
  40330e:	ee37 5ac4 	vsub.f32	s10, s15, s8
  403312:	eeb0 5ac5 	vabs.f32	s10, s10
  403316:	eeb4 5ac7 	vcmpe.f32	s10, s14
  40331a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40331e:	f100 8085 	bmi.w	40342c <main+0x9cc>
  403322:	9a03      	ldr	r2, [sp, #12]
  403324:	b142      	cbz	r2, 403338 <main+0x8d8>
  403326:	ee37 5ac0 	vsub.f32	s10, s15, s0
  40332a:	eeb0 5ac5 	vabs.f32	s10, s10
  40332e:	eeb4 5ac7 	vcmpe.f32	s10, s14
  403332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403336:	d479      	bmi.n	40342c <main+0x9cc>
  403338:	f1bc 0f00 	cmp.w	ip, #0
  40333c:	d020      	beq.n	403380 <main+0x920>
  40333e:	ee37 5ae0 	vsub.f32	s10, s15, s1
  403342:	eeb0 5ac5 	vabs.f32	s10, s10
  403346:	eeb4 5ac7 	vcmpe.f32	s10, s14
  40334a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40334e:	d46d      	bmi.n	40342c <main+0x9cc>
  403350:	e016      	b.n	403380 <main+0x920>
  403352:	bf00      	nop
  403354:	2041c114 	.word	0x2041c114
  403358:	00407720 	.word	0x00407720
  40335c:	24924925 	.word	0x24924925
  403360:	42800000 	.word	0x42800000
  403364:	3c800000 	.word	0x3c800000
  403368:	3f879c7d 	.word	0x3f879c7d
  40336c:	20400048 	.word	0x20400048
  403370:	40000005 	.word	0x40000005
  403374:	bf666666 	.word	0xbf666666
  403378:	427c0000 	.word	0x427c0000
  40337c:	2044a818 	.word	0x2044a818
  403380:	f1b8 0f00 	cmp.w	r8, #0
  403384:	d008      	beq.n	403398 <main+0x938>
  403386:	ee37 5ac1 	vsub.f32	s10, s15, s2
  40338a:	eeb0 5ac5 	vabs.f32	s10, s10
  40338e:	eeb4 5ac7 	vcmpe.f32	s10, s14
  403392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403396:	d449      	bmi.n	40342c <main+0x9cc>
  403398:	9a04      	ldr	r2, [sp, #16]
  40339a:	b142      	cbz	r2, 4033ae <main+0x94e>
  40339c:	ee37 5ae1 	vsub.f32	s10, s15, s3
  4033a0:	eeb0 5ac5 	vabs.f32	s10, s10
  4033a4:	eeb4 5ac7 	vcmpe.f32	s10, s14
  4033a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4033ac:	d43e      	bmi.n	40342c <main+0x9cc>
								if (pitch_bend != 64)
  4033ae:	4ac9      	ldr	r2, [pc, #804]	; (4036d4 <main+0xc74>)
  4033b0:	6812      	ldr	r2, [r2, #0]
  4033b2:	2a40      	cmp	r2, #64	; 0x40
  4033b4:	d023      	beq.n	4033fe <main+0x99e>
									bend_pitch(&desired_pitch, harmony_list[i].idx, (uint32_t)pitch_bend);
  4033b6:	18ca      	adds	r2, r1, r3
  4033b8:	49c7      	ldr	r1, [pc, #796]	; (4036d8 <main+0xc78>)
  4033ba:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4033be:	49c5      	ldr	r1, [pc, #788]	; (4036d4 <main+0xc74>)
  4033c0:	6852      	ldr	r2, [r2, #4]
  4033c2:	6809      	ldr	r1, [r1, #0]
	if (pitch_idx < 0 || pitch_idx > 127 || bend < 0 || bend > 127)
  4033c4:	2a7f      	cmp	r2, #127	; 0x7f
  4033c6:	d81a      	bhi.n	4033fe <main+0x99e>
  4033c8:	297f      	cmp	r1, #127	; 0x7f
  4033ca:	d818      	bhi.n	4033fe <main+0x99e>
	if (pitch_bend > 64)
  4033cc:	49c1      	ldr	r1, [pc, #772]	; (4036d4 <main+0xc74>)
  4033ce:	6809      	ldr	r1, [r1, #0]
  4033d0:	2940      	cmp	r1, #64	; 0x40
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  4033d2:	49c0      	ldr	r1, [pc, #768]	; (4036d4 <main+0xc74>)
  4033d4:	ed91 5a00 	vldr	s10, [r1]
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  4033d8:	49c0      	ldr	r1, [pc, #768]	; (4036dc <main+0xc7c>)
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  4033da:	eeb8 5a45 	vcvt.f32.u32	s10, s10
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  4033de:	eb01 0182 	add.w	r1, r1, r2, lsl #2
	if (pitch_bend > 64)
  4033e2:	f200 8254 	bhi.w	40388e <main+0xe2e>
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  4033e6:	ee35 5a69 	vsub.f32	s10, s10, s19
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  4033ea:	ed91 ba00 	vldr	s22, [r1]
  4033ee:	ed11 aa02 	vldr	s20, [r1, #-8]
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  4033f2:	ee25 5a02 	vmul.f32	s10, s10, s4
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  4033f6:	ee3b aa4a 	vsub.f32	s20, s22, s20
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  4033fa:	eeea 7a05 	vfma.f32	s15, s20, s10
								pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  4033fe:	ee77 7ac8 	vsub.f32	s15, s15, s16
  403402:	ee67 7aa5 	vmul.f32	s15, s15, s11
								if (pitch_shift > 0.1f && pitch_shift < 6.0f) // range check
  403406:	eef4 7a64 	vcmp.f32	s15, s9
  40340a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40340e:	dd0d      	ble.n	40342c <main+0x9cc>
  403410:	eef4 7a68 	vcmp.f32	s15, s17
  403414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403418:	d508      	bpl.n	40342c <main+0x9cc>
									harmony_shifts[num_of_shifts++] = pitch_shift;
  40341a:	aa44      	add	r2, sp, #272	; 0x110
								pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  40341c:	ee77 7a87 	vadd.f32	s15, s15, s14
									harmony_shifts[num_of_shifts++] = pitch_shift;
  403420:	eb02 028e 	add.w	r2, r2, lr, lsl #2
  403424:	f10e 0e01 	add.w	lr, lr, #1
  403428:	ed42 7a14 	vstr	s15, [r2, #-80]	; 0xffffffb0
				for (i = 0; i < MAX_NUM_KEYS_HARMONIES; i++)
  40342c:	3301      	adds	r3, #1
  40342e:	2b0a      	cmp	r3, #10
  403430:	f47f af23 	bne.w	40327a <main+0x81a>
  403434:	e014      	b.n	403460 <main+0xa00>
		if (d2 <= d1)
  403436:	4608      	mov	r0, r1
	while (lo < hi)
  403438:	4298      	cmp	r0, r3
  40343a:	f080 8223 	bcs.w	403884 <main+0xe24>
  40343e:	18c2      	adds	r2, r0, r3
  403440:	461d      	mov	r5, r3
  403442:	eef0 8a66 	vmov.f32	s17, s13
  403446:	4601      	mov	r1, r0
  403448:	0853      	lsrs	r3, r2, #1
  40344a:	4aa4      	ldr	r2, [pc, #656]	; (4036dc <main+0xc7c>)
  40344c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  403450:	edd2 7a01 	vldr	s15, [r2, #4]
  403454:	edd2 6a00 	vldr	s13, [r2]
  403458:	f7ff bbcf 	b.w	402bfa <main+0x19a>
			num_of_shifts = 1;  
  40345c:	f04f 0e01 	mov.w	lr, #1
						}
					}
				}
			} 
			
			harmony_shifts[num_of_shifts] = END_OF_SHIFTS; 
  403460:	a944      	add	r1, sp, #272	; 0x110
			
			create_harmonies(processBuffer, out_buffer, inputPitch, harmony_shifts, (float)harm_volume, (float)dry_volume); 
  403462:	4b9f      	ldr	r3, [pc, #636]	; (4036e0 <main+0xc80>)
  403464:	4a9f      	ldr	r2, [pc, #636]	; (4036e4 <main+0xc84>)
  403466:	681b      	ldr	r3, [r3, #0]
			harmony_shifts[num_of_shifts] = END_OF_SHIFTS; 
  403468:	eb01 048e 	add.w	r4, r1, lr, lsl #2
			create_harmonies(processBuffer, out_buffer, inputPitch, harmony_shifts, (float)harm_volume, (float)dry_volume); 
  40346c:	6812      	ldr	r2, [r2, #0]
			harmony_shifts[num_of_shifts] = END_OF_SHIFTS; 
  40346e:	489e      	ldr	r0, [pc, #632]	; (4036e8 <main+0xc88>)
			create_harmonies(processBuffer, out_buffer, inputPitch, harmony_shifts, (float)harm_volume, (float)dry_volume); 
  403470:	499e      	ldr	r1, [pc, #632]	; (4036ec <main+0xc8c>)
  403472:	9300      	str	r3, [sp, #0]
  403474:	ab30      	add	r3, sp, #192	; 0xc0
  403476:	9201      	str	r2, [sp, #4]
  403478:	ee18 2a10 	vmov	r2, s16
			harmony_shifts[num_of_shifts] = END_OF_SHIFTS; 
  40347c:	f844 0c50 	str.w	r0, [r4, #-80]
			create_harmonies(processBuffer, out_buffer, inputPitch, harmony_shifts, (float)harm_volume, (float)dry_volume); 
  403480:	460d      	mov	r5, r1
  403482:	489b      	ldr	r0, [pc, #620]	; (4036f0 <main+0xc90>)
  403484:	4c9b      	ldr	r4, [pc, #620]	; (4036f4 <main+0xc94>)
  403486:	47a0      	blx	r4
  403488:	4652      	mov	r2, sl
			
			// save dry audio 
			for (i = 0; i < WIN_SIZE; i++)
			{
				dry_circ_buffer[circ_buf_idx++ & CIRC_MASK] = out_buffer[i];
  40348a:	f3c2 030d 	ubfx	r3, r2, #0, #14
  40348e:	f855 1b04 	ldr.w	r1, [r5], #4
  403492:	3201      	adds	r2, #1
  403494:	eb09 0383 	add.w	r3, r9, r3, lsl #2
  403498:	6019      	str	r1, [r3, #0]
			for (i = 0; i < WIN_SIZE; i++)
  40349a:	4b97      	ldr	r3, [pc, #604]	; (4036f8 <main+0xc98>)
  40349c:	42ab      	cmp	r3, r5
  40349e:	d1f4      	bne.n	40348a <main+0xa2a>
			}
			
			// Add audio effects 
			uint32_t curr_idx = circ_buf_idx - (uint32_t)WIN_SIZE;
			// chorus params 
			float n_freq = chorus_speed / SAMPLE_RATE; 
  4034a0:	4b96      	ldr	r3, [pc, #600]	; (4036fc <main+0xc9c>)
			uint32_t num_samples_in_period = 1 / n_freq; 
  4034a2:	eddf 8a97 	vldr	s17, [pc, #604]	; 403700 <main+0xca0>
			float n_freq = chorus_speed / SAMPLE_RATE; 
  4034a6:	edd3 7a00 	vldr	s15, [r3]
  4034aa:	f50a 6380 	add.w	r3, sl, #1024	; 0x400
  4034ae:	ed9f 8a95 	vldr	s16, [pc, #596]	; 403704 <main+0xca4>
			uint32_t num_samples_in_period = 1 / n_freq; 
  4034b2:	ee88 7aa7 	vdiv.f32	s14, s17, s15
  4034b6:	9507      	str	r5, [sp, #28]
  4034b8:	4c8c      	ldr	r4, [pc, #560]	; (4036ec <main+0xc8c>)
			for (i = 0; i < WIN_SIZE; i++, curr_idx++)
			{				
				out_buffer[i] = (1.0f - 0.5*(delay_volume + 0.5f*(chorus_volume + reverb_volume))) * out_buffer[i]; 
						
				// chorus
				chorus_delay = (0.008f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * SAMPLE_RATE;
  4034ba:	ed9f aa93 	vldr	s20, [pc, #588]	; 403708 <main+0xca8>
  4034be:	eddf 9a93 	vldr	s19, [pc, #588]	; 40370c <main+0xcac>
				if (sin_cnt == num_samples_in_period)
					sin_cnt = 0;
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  4034c2:	ed9f 9a93 	vldr	s18, [pc, #588]	; 403710 <main+0xcb0>
  4034c6:	ee27 8a88 	vmul.f32	s16, s15, s16
			uint32_t num_samples_in_period = 1 / n_freq; 
  4034ca:	9d06      	ldr	r5, [sp, #24]
  4034cc:	9304      	str	r3, [sp, #16]
  4034ce:	eefc 7ac7 	vcvt.u32.f32	s15, s14
  4034d2:	edcd 7a03 	vstr	s15, [sp, #12]
				out_buffer[i] = (1.0f - 0.5*(delay_volume + 0.5f*(chorus_volume + reverb_volume))) * out_buffer[i]; 
  4034d6:	4b8f      	ldr	r3, [pc, #572]	; (403714 <main+0xcb4>)
  4034d8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
  4034dc:	4e8e      	ldr	r6, [pc, #568]	; (403718 <main+0xcb8>)
				chorus_delay = (0.008f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * SAMPLE_RATE;
  4034de:	f105 0801 	add.w	r8, r5, #1
				out_buffer[i] = (1.0f - 0.5*(delay_volume + 0.5f*(chorus_volume + reverb_volume))) * out_buffer[i]; 
  4034e2:	ed93 7a00 	vldr	s14, [r3]
  4034e6:	4b8d      	ldr	r3, [pc, #564]	; (40371c <main+0xcbc>)
  4034e8:	edd3 7a00 	vldr	s15, [r3]
  4034ec:	4b8c      	ldr	r3, [pc, #560]	; (403720 <main+0xcc0>)
  4034ee:	ee77 7a27 	vadd.f32	s15, s14, s15
  4034f2:	edd3 6a00 	vldr	s13, [r3]
  4034f6:	4b8b      	ldr	r3, [pc, #556]	; (403724 <main+0xcc4>)
  4034f8:	eee7 6a86 	vfma.f32	s13, s15, s12
  4034fc:	ee16 0a90 	vmov	r0, s13
  403500:	4798      	blx	r3
  403502:	2200      	movs	r2, #0
  403504:	4b88      	ldr	r3, [pc, #544]	; (403728 <main+0xcc8>)
  403506:	47b0      	blx	r6
  403508:	4e88      	ldr	r6, [pc, #544]	; (40372c <main+0xccc>)
  40350a:	4602      	mov	r2, r0
  40350c:	460b      	mov	r3, r1
  40350e:	2000      	movs	r0, #0
  403510:	4987      	ldr	r1, [pc, #540]	; (403730 <main+0xcd0>)
  403512:	47b0      	blx	r6
  403514:	4606      	mov	r6, r0
  403516:	460f      	mov	r7, r1
  403518:	6820      	ldr	r0, [r4, #0]
  40351a:	4b82      	ldr	r3, [pc, #520]	; (403724 <main+0xcc4>)
  40351c:	4798      	blx	r3
  40351e:	4602      	mov	r2, r0
  403520:	460b      	mov	r3, r1
  403522:	4630      	mov	r0, r6
  403524:	4639      	mov	r1, r7
  403526:	4e7c      	ldr	r6, [pc, #496]	; (403718 <main+0xcb8>)
  403528:	47b0      	blx	r6
  40352a:	4b82      	ldr	r3, [pc, #520]	; (403734 <main+0xcd4>)
  40352c:	4798      	blx	r3
				chorus_delay = (0.008f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * SAMPLE_RATE;
  40352e:	ee07 5a90 	vmov	s15, r5
				if (sin_cnt == num_samples_in_period)
  403532:	9b03      	ldr	r3, [sp, #12]
				chorus_delay = (0.008f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * SAMPLE_RATE;
  403534:	eef8 7a67 	vcvt.f32.u32	s15, s15
				out_buffer[i] = (1.0f - 0.5*(delay_volume + 0.5f*(chorus_volume + reverb_volume))) * out_buffer[i]; 
  403538:	6020      	str	r0, [r4, #0]
				if (sin_cnt == num_samples_in_period)
  40353a:	4543      	cmp	r3, r8
  40353c:	bf14      	ite	ne
  40353e:	4645      	movne	r5, r8
  403540:	2500      	moveq	r5, #0
				chorus_delay = (0.008f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * SAMPLE_RATE;
  403542:	4b7d      	ldr	r3, [pc, #500]	; (403738 <main+0xcd8>)
				// delay
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
				out_buffer[i] += delay_volume * delay_circ_buffer[curr_idx & CIRC_MASK];
				
				// reverb
				out_buffer[i] += reverb_volume * 0.33f *
  403544:	4f75      	ldr	r7, [pc, #468]	; (40371c <main+0xcbc>)
				chorus_delay = (0.008f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * SAMPLE_RATE;
  403546:	ee67 7a88 	vmul.f32	s15, s15, s16
  40354a:	ee17 0a90 	vmov	r0, s15
  40354e:	4798      	blx	r3
  403550:	eef0 7a69 	vmov.f32	s15, s19
  403554:	ee07 0a10 	vmov	s14, r0
						(dry_circ_buffer[(curr_idx - 2001)  & CIRC_MASK] +
  403558:	f46f 63fa 	mvn.w	r3, #2000	; 0x7d0
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  40355c:	4a6d      	ldr	r2, [pc, #436]	; (403714 <main+0xcb4>)
														dry_circ_buffer[(curr_idx - 809 - chorus_delay)  & CIRC_MASK]));			
  40355e:	f46f 7e4a 	mvn.w	lr, #808	; 0x328
				chorus_delay = (0.008f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * SAMPLE_RATE;
  403562:	eee7 7a0a 	vfma.f32	s15, s14, s20
						(dry_circ_buffer[(curr_idx - 2001)  & CIRC_MASK] +
  403566:	eb0a 0103 	add.w	r1, sl, r3
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  40356a:	edd2 4a00 	vldr	s9, [r2]
						dry_circ_buffer[(curr_idx - 1503)  & CIRC_MASK] + 
  40356e:	f2aa 53df 	subw	r3, sl, #1503	; 0x5df
						dry_circ_buffer[(curr_idx - 1203)  & CIRC_MASK] ); 
  403572:	f2aa 42b3 	subw	r2, sl, #1203	; 0x4b3
						(dry_circ_buffer[(curr_idx - 2001)  & CIRC_MASK] +
  403576:	f3c1 010d 	ubfx	r1, r1, #0, #14
						dry_circ_buffer[(curr_idx - 1503)  & CIRC_MASK] + 
  40357a:	f3c3 030d 	ubfx	r3, r3, #0, #14
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  40357e:	486f      	ldr	r0, [pc, #444]	; (40373c <main+0xcdc>)
						dry_circ_buffer[(curr_idx - 1203)  & CIRC_MASK] ); 
  403580:	f3c2 020d 	ubfx	r2, r2, #0, #14
						(dry_circ_buffer[(curr_idx - 2001)  & CIRC_MASK] +
  403584:	eb09 0181 	add.w	r1, r9, r1, lsl #2
						dry_circ_buffer[(curr_idx - 1503)  & CIRC_MASK] + 
  403588:	eb09 0383 	add.w	r3, r9, r3, lsl #2
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  40358c:	ee64 4a89 	vmul.f32	s9, s9, s18
				chorus_delay = (0.008f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * SAMPLE_RATE;
  403590:	ee67 7aa8 	vmul.f32	s15, s15, s17
						dry_circ_buffer[(curr_idx - 1203)  & CIRC_MASK] ); 
  403594:	eb09 0282 	add.w	r2, r9, r2, lsl #2
						(dry_circ_buffer[(curr_idx - 2001)  & CIRC_MASK] +
  403598:	ed93 7a00 	vldr	s14, [r3]
  40359c:	ed91 6a00 	vldr	s12, [r1]
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  4035a0:	f3ca 010d 	ubfx	r1, sl, #0, #14
				chorus_delay = (0.008f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * SAMPLE_RATE;
  4035a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  4035a8:	edd4 5a00 	vldr	s11, [r4]
						(dry_circ_buffer[(curr_idx - 2001)  & CIRC_MASK] +
  4035ac:	ee36 6a07 	vadd.f32	s12, s12, s14
				chorus_delay = (0.008f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * SAMPLE_RATE;
  4035b0:	ee17 3a90 	vmov	r3, s15
						dry_circ_buffer[(curr_idx - 1503)  & CIRC_MASK] + 
  4035b4:	edd2 7a00 	vldr	s15, [r2]
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  4035b8:	4a61      	ldr	r2, [pc, #388]	; (403740 <main+0xce0>)
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  4035ba:	ebaa 0303 	sub.w	r3, sl, r3
						dry_circ_buffer[(curr_idx - 1503)  & CIRC_MASK] + 
  4035be:	ee36 6a27 	vadd.f32	s12, s12, s15
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  4035c2:	6812      	ldr	r2, [r2, #0]
  4035c4:	edd0 3a00 	vldr	s7, [r0]
														dry_circ_buffer[(curr_idx - 199 - chorus_delay)  & CIRC_MASK] +
  4035c8:	f1a3 06c7 	sub.w	r6, r3, #199	; 0xc7
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  4035cc:	485d      	ldr	r0, [pc, #372]	; (403744 <main+0xce4>)
  4035ce:	ebaa 0202 	sub.w	r2, sl, r2
														dry_circ_buffer[(curr_idx - 199 - chorus_delay)  & CIRC_MASK] +
  4035d2:	f3c6 060d 	ubfx	r6, r6, #0, #14
				out_buffer[i] += reverb_volume * 0.33f *
  4035d6:	eddf 7a5c 	vldr	s15, [pc, #368]	; 403748 <main+0xce8>
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  4035da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
				out_buffer[i] += delay_volume * delay_circ_buffer[curr_idx & CIRC_MASK];
  4035de:	4850      	ldr	r0, [pc, #320]	; (403720 <main+0xcc0>)
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  4035e0:	f3c2 020d 	ubfx	r2, r2, #0, #14
														dry_circ_buffer[(curr_idx - 199 - chorus_delay)  & CIRC_MASK] +
  4035e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
				out_buffer[i] += delay_volume * delay_circ_buffer[curr_idx & CIRC_MASK];
  4035e8:	ed90 4a00 	vldr	s8, [r0]
														dry_circ_buffer[(curr_idx - 401 - chorus_delay)  & CIRC_MASK] +
  4035ec:	f46f 70c8 	mvn.w	r0, #400	; 0x190
				out_buffer[i] += reverb_volume * 0.33f *
  4035f0:	ed97 5a00 	vldr	s10, [r7]
			for (i = 0; i < WIN_SIZE; i++, curr_idx++)
  4035f4:	f10a 0a01 	add.w	sl, sl, #1
														dry_circ_buffer[(curr_idx - 401 - chorus_delay)  & CIRC_MASK] +
  4035f8:	1818      	adds	r0, r3, r0
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  4035fa:	4f52      	ldr	r7, [pc, #328]	; (403744 <main+0xce4>)
														dry_circ_buffer[(curr_idx - 199 - chorus_delay)  & CIRC_MASK] +
  4035fc:	ed96 7a00 	vldr	s14, [r6]
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  403600:	f3c3 060d 	ubfx	r6, r3, #0, #14
														dry_circ_buffer[(curr_idx - 401 - chorus_delay)  & CIRC_MASK] +
  403604:	f3c0 000d 	ubfx	r0, r0, #0, #14
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  403608:	eb07 0282 	add.w	r2, r7, r2, lsl #2
														dry_circ_buffer[(curr_idx - 601 - chorus_delay)  & CIRC_MASK] +
  40360c:	f46f 7716 	mvn.w	r7, #600	; 0x258
				out_buffer[i] += reverb_volume * 0.33f *
  403610:	ee25 5a27 	vmul.f32	s10, s10, s15
														dry_circ_buffer[(curr_idx - 401 - chorus_delay)  & CIRC_MASK] +
  403614:	eb09 0080 	add.w	r0, r9, r0, lsl #2
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  403618:	ed92 3a00 	vldr	s6, [r2]
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  40361c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
														dry_circ_buffer[(curr_idx - 199 - chorus_delay)  & CIRC_MASK] +
  403620:	edd0 7a00 	vldr	s15, [r0]
														dry_circ_buffer[(curr_idx - 601 - chorus_delay)  & CIRC_MASK] +
  403624:	19d8      	adds	r0, r3, r7
														dry_circ_buffer[(curr_idx - 809 - chorus_delay)  & CIRC_MASK]));			
  403626:	4473      	add	r3, lr
														dry_circ_buffer[(curr_idx - 199 - chorus_delay)  & CIRC_MASK] +
  403628:	ee77 7a27 	vadd.f32	s15, s14, s15
														dry_circ_buffer[(curr_idx - 601 - chorus_delay)  & CIRC_MASK] +
  40362c:	f3c0 000d 	ubfx	r0, r0, #0, #14
														dry_circ_buffer[(curr_idx - 199 - chorus_delay)  & CIRC_MASK] +
  403630:	ed96 7a00 	vldr	s14, [r6]
														dry_circ_buffer[(curr_idx - 809 - chorus_delay)  & CIRC_MASK]));			
  403634:	f3c3 030d 	ubfx	r3, r3, #0, #14
														dry_circ_buffer[(curr_idx - 601 - chorus_delay)  & CIRC_MASK] +
  403638:	eb09 0080 	add.w	r0, r9, r0, lsl #2
														dry_circ_buffer[(curr_idx - 199 - chorus_delay)  & CIRC_MASK] +
  40363c:	ee77 7a87 	vadd.f32	s15, s15, s14
														dry_circ_buffer[(curr_idx - 809 - chorus_delay)  & CIRC_MASK]));			
  403640:	eb09 0383 	add.w	r3, r9, r3, lsl #2
														dry_circ_buffer[(curr_idx - 401 - chorus_delay)  & CIRC_MASK] +
  403644:	edd0 6a00 	vldr	s13, [r0]
														dry_circ_buffer[(curr_idx - 601 - chorus_delay)  & CIRC_MASK] +
  403648:	ed93 7a00 	vldr	s14, [r3]
														dry_circ_buffer[(curr_idx - 401 - chorus_delay)  & CIRC_MASK] +
  40364c:	ee77 7aa6 	vadd.f32	s15, s15, s13
			for (i = 0; i < WIN_SIZE; i++, curr_idx++)
  403650:	9b04      	ldr	r3, [sp, #16]
  403652:	459a      	cmp	sl, r3
														dry_circ_buffer[(curr_idx - 601 - chorus_delay)  & CIRC_MASK] +
  403654:	ee77 7a87 	vadd.f32	s15, s15, s14
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  403658:	eee4 5aa7 	vfma.f32	s11, s9, s15
  40365c:	eef0 7a65 	vmov.f32	s15, s11
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  403660:	eeb0 7a65 	vmov.f32	s14, s11
				out_buffer[i] += reverb_volume * 0.33f *
  403664:	eee5 7a06 	vfma.f32	s15, s10, s12
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  403668:	eea3 7a23 	vfma.f32	s14, s6, s7
				out_buffer[i] += reverb_volume * 0.33f *
  40366c:	eee7 7a04 	vfma.f32	s15, s14, s8
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  403670:	ed81 7a00 	vstr	s14, [r1]
				out_buffer[i] += reverb_volume * 0.33f *
  403674:	ece4 7a01 	vstmia	r4!, {s15}
			for (i = 0; i < WIN_SIZE; i++, curr_idx++)
  403678:	f47f af2d 	bne.w	4034d6 <main+0xa76>
			}
	
			// scale output 
			arm_scale_f32(out_buffer, (float)INT16_MAX * master_volume, out_buffer, WIN_SIZE);
  40367c:	4b33      	ldr	r3, [pc, #204]	; (40374c <main+0xcec>)
  40367e:	eddf 7a34 	vldr	s15, [pc, #208]	; 403750 <main+0xcf0>
  403682:	ed93 7a00 	vldr	s14, [r3]
  403686:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40368a:	4a18      	ldr	r2, [pc, #96]	; (4036ec <main+0xc8c>)
  40368c:	ee67 7a27 	vmul.f32	s15, s14, s15
  403690:	4c30      	ldr	r4, [pc, #192]	; (403754 <main+0xcf4>)
  403692:	4610      	mov	r0, r2
  403694:	9506      	str	r5, [sp, #24]
  403696:	9d07      	ldr	r5, [sp, #28]
  403698:	ee17 1a90 	vmov	r1, s15
  40369c:	47a0      	blx	r4
  40369e:	4a13      	ldr	r2, [pc, #76]	; (4036ec <main+0xc8c>)
  4036a0:	9f08      	ldr	r7, [sp, #32]
  4036a2:	4b12      	ldr	r3, [pc, #72]	; (4036ec <main+0xc8c>)
			
			// Sound out 
			uint32_t idx = 0; 
			for(i = 0; i < IO_BUF_SIZE; i+=2)
			{
				outBuffer[i] = (uint16_t)(int16_t)(out_buffer[idx++]);  
  4036a4:	f8db 6000 	ldr.w	r6, [fp]
  4036a8:	1ad0      	subs	r0, r2, r3
  4036aa:	ecf2 7a01 	vldmia	r2!, {s15}
  4036ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
				outBuffer[i+1] = outBuffer[i]; 
  4036b2:	18bc      	adds	r4, r7, r2
			for(i = 0; i < IO_BUF_SIZE; i+=2)
  4036b4:	42aa      	cmp	r2, r5
				outBuffer[i] = (uint16_t)(int16_t)(out_buffer[idx++]);  
  4036b6:	edcd 7a03 	vstr	s15, [sp, #12]
  4036ba:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4036be:	5233      	strh	r3, [r6, r0]
				outBuffer[i+1] = outBuffer[i]; 
  4036c0:	5a33      	ldrh	r3, [r6, r0]
  4036c2:	b29b      	uxth	r3, r3
  4036c4:	5333      	strh	r3, [r6, r4]
			for(i = 0; i < IO_BUF_SIZE; i+=2)
  4036c6:	d1ec      	bne.n	4036a2 <main+0xc42>
  4036c8:	9b05      	ldr	r3, [sp, #20]
  4036ca:	3301      	adds	r3, #1
  4036cc:	9305      	str	r3, [sp, #20]
  4036ce:	f7ff ba7d 	b.w	402bcc <main+0x16c>
  4036d2:	bf00      	nop
  4036d4:	20400048 	.word	0x20400048
  4036d8:	2044a818 	.word	0x2044a818
  4036dc:	00407720 	.word	0x00407720
  4036e0:	2040003c 	.word	0x2040003c
  4036e4:	20400038 	.word	0x20400038
  4036e8:	bf800000 	.word	0xbf800000
  4036ec:	20444000 	.word	0x20444000
  4036f0:	20446800 	.word	0x20446800
  4036f4:	00400dc1 	.word	0x00400dc1
  4036f8:	20445000 	.word	0x20445000
  4036fc:	2040002c 	.word	0x2040002c
  403700:	4732b600 	.word	0x4732b600
  403704:	3910023a 	.word	0x3910023a
  403708:	3b449ba6 	.word	0x3b449ba6
  40370c:	3c03126f 	.word	0x3c03126f
  403710:	3e4ccccd 	.word	0x3e4ccccd
  403714:	2041c120 	.word	0x2041c120
  403718:	0040440d 	.word	0x0040440d
  40371c:	20445004 	.word	0x20445004
  403720:	20430000 	.word	0x20430000
  403724:	00404365 	.word	0x00404365
  403728:	3fe00000 	.word	0x3fe00000
  40372c:	004040a5 	.word	0x004040a5
  403730:	3ff00000 	.word	0x3ff00000
  403734:	00404831 	.word	0x00404831
  403738:	00403c5d 	.word	0x00403c5d
  40373c:	20400030 	.word	0x20400030
  403740:	20400034 	.word	0x20400034
  403744:	20420000 	.word	0x20420000
  403748:	3ea8f5c3 	.word	0x3ea8f5c3
  40374c:	20400044 	.word	0x20400044
  403750:	46fffe00 	.word	0x46fffe00
  403754:	00403ce5 	.word	0x00403ce5
				scale_correct_history[scale_correct_idx++ & SCALE_CORRECT_HISTORY_MASK] = SCALE_NONE;
  403758:	f007 0307 	and.w	r3, r7, #7
  40375c:	a944      	add	r1, sp, #272	; 0x110
  40375e:	2200      	movs	r2, #0
			float scale_pitch = closest_note_freq;
  403760:	eef0 9a68 	vmov.f32	s19, s17
				scale_correct_history[scale_correct_idx++ & SCALE_CORRECT_HISTORY_MASK] = SCALE_NONE;
  403764:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  403768:	f843 2cb0 	str.w	r2, [r3, #-176]
				scale_step += major[i];
  40376c:	9b11      	ldr	r3, [sp, #68]	; 0x44
				if (number_of_semitones_from_root == scale_step)
  40376e:	429c      	cmp	r4, r3
  403770:	f47f aaf4 	bne.w	402d5c <main+0x2fc>
  403774:	2401      	movs	r4, #1
  403776:	f7ff bb0b 	b.w	402d90 <main+0x330>
				float hi_avg = 0.5f * (midi_note_frequencies[closest_note_number] + midi_note_frequencies[closest_note_number+1]);
  40377a:	4b6e      	ldr	r3, [pc, #440]	; (403934 <main+0xed4>)
				hi_avg = 0.5f * (hi_avg + midi_note_frequencies[closest_note_number]); 
  40377c:	eef0 6a68 	vmov.f32	s13, s17
				float hi_avg = 0.5f * (midi_note_frequencies[closest_note_number] + midi_note_frequencies[closest_note_number+1]);
  403780:	eb03 0385 	add.w	r3, r3, r5, lsl #2
  403784:	ed93 9a01 	vldr	s18, [r3, #4]
  403788:	ee39 7a28 	vadd.f32	s14, s18, s17
				hi_avg = 0.5f * (hi_avg + midi_note_frequencies[closest_note_number]); 
  40378c:	eee7 6a27 	vfma.f32	s13, s14, s15
  403790:	ee66 7aa7 	vmul.f32	s15, s13, s15
				else if (inputPitch > hi_avg)
  403794:	eef4 7ac8 	vcmpe.f32	s15, s16
  403798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40379c:	d528      	bpl.n	4037f0 <main+0xd90>
					scale_correct_history[scale_correct_idx++ & SCALE_CORRECT_HISTORY_MASK] = SCALE_UP;
  40379e:	f007 0307 	and.w	r3, r7, #7
						scale_correct_history[scale_correct_idx++ & SCALE_CORRECT_HISTORY_MASK] = SCALE_UP;
  4037a2:	a944      	add	r1, sp, #272	; 0x110
  4037a4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
						number_of_semitones_from_root +=1;
  4037a8:	3401      	adds	r4, #1
						scale_pitch = midi_note_frequencies[closest_note_number + 1];
  4037aa:	eef0 9a49 	vmov.f32	s19, s18
						scale_correct_history[scale_correct_idx++ & SCALE_CORRECT_HISTORY_MASK] = SCALE_UP;
  4037ae:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  4037b2:	f843 2cb0 	str.w	r2, [r3, #-176]
  4037b6:	f7ff bacd 	b.w	402d54 <main+0x2f4>
				if(chord_harmonies[chord_idx] == true)
  4037ba:	4b5f      	ldr	r3, [pc, #380]	; (403938 <main+0xed8>)
  4037bc:	781b      	ldrb	r3, [r3, #0]
  4037be:	b173      	cbz	r3, 4037de <main+0xd7e>
						desired_pitch = closest_note_freq*powerf(1.059463094359f, -12);
  4037c0:	eddf 7a5e 	vldr	s15, [pc, #376]	; 40393c <main+0xedc>
			dry_freq = inputPitch; 
  4037c4:	eeb0 6a48 	vmov.f32	s12, s16
						desired_pitch = closest_note_freq*powerf(1.059463094359f, -12);
  4037c8:	ee68 7aa7 	vmul.f32	s15, s17, s15
  4037cc:	f7ff bb3d 	b.w	402e4a <main+0x3ea>
				} else chord_freqs[chord_idx].active = false;
  4037d0:	f8dd e00c 	ldr.w	lr, [sp, #12]
  4037d4:	f88d 20bc 	strb.w	r2, [sp, #188]	; 0xbc
  4037d8:	eddd 1a2e 	vldr	s3, [sp, #184]	; 0xb8
  4037dc:	e51e      	b.n	40321c <main+0x7bc>
			dry_freq = inputPitch; 
  4037de:	eeb0 6a48 	vmov.f32	s12, s16
				} else chord_freqs[chord_idx].active = false;
  4037e2:	2300      	movs	r3, #0
			num_of_shifts = 1;  
  4037e4:	2201      	movs	r2, #1
				} else chord_freqs[chord_idx].active = false;
  4037e6:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
			num_of_shifts = 1;  
  4037ea:	9203      	str	r2, [sp, #12]
  4037ec:	f7ff bb65 	b.w	402eba <main+0x45a>
					float avg_direction = 0.0f; 
  4037f0:	2300      	movs	r3, #0
					arm_mean_f32(scale_correct_history, SCALE_CORRECT_HISTORY_SIZE, &avg_direction); 
  4037f2:	aa0d      	add	r2, sp, #52	; 0x34
  4037f4:	2108      	movs	r1, #8
  4037f6:	a818      	add	r0, sp, #96	; 0x60
					float avg_direction = 0.0f; 
  4037f8:	930d      	str	r3, [sp, #52]	; 0x34
					arm_mean_f32(scale_correct_history, SCALE_CORRECT_HISTORY_SIZE, &avg_direction); 
  4037fa:	4b51      	ldr	r3, [pc, #324]	; (403940 <main+0xee0>)
  4037fc:	4798      	blx	r3
					if(avg_direction < 0.0f)
  4037fe:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
						scale_correct_history[scale_correct_idx++ & SCALE_CORRECT_HISTORY_MASK] = SCALE_DOWN;
  403802:	f007 0307 	and.w	r3, r7, #7
					if(avg_direction < 0.0f)
  403806:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  40380a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40380e:	d5c8      	bpl.n	4037a2 <main+0xd42>
  403810:	f7ff ba99 	b.w	402d46 <main+0x2e6>
	return 1.0/result;
  403814:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  403818:	eec7 7a27 	vdiv.f32	s15, s14, s15
  40381c:	e454      	b.n	4030c8 <main+0x668>
  40381e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  403822:	eec7 7a27 	vdiv.f32	s15, s14, s15
  403826:	f7ff bb96 	b.w	402f56 <main+0x4f6>
					desired_pitch = scale_pitch;
  40382a:	eeb0 6a69 	vmov.f32	s12, s19
  40382e:	f7ff bafb 	b.w	402e28 <main+0x3c8>
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  403832:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  403836:	eddf 6a43 	vldr	s13, [pc, #268]	; 403944 <main+0xee4>
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  40383a:	ed93 5a00 	vldr	s10, [r3]
  40383e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  403840:	ee37 7a66 	vsub.f32	s14, s14, s13
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  403844:	edd3 4a00 	vldr	s9, [r3]
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  403848:	ee27 7a04 	vmul.f32	s14, s14, s8
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  40384c:	ee74 6ac5 	vsub.f32	s13, s9, s10
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  403850:	eee6 7a87 	vfma.f32	s15, s13, s14
  403854:	f7ff bbc2 	b.w	402fdc <main+0x57c>
  403858:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  40385c:	eddf 6a39 	vldr	s13, [pc, #228]	; 403944 <main+0xee4>
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  403860:	ed93 5a00 	vldr	s10, [r3]
  403864:	eddc 4a00 	vldr	s9, [ip]
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  403868:	ee37 7a66 	vsub.f32	s14, s14, s13
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  40386c:	ee74 6ac5 	vsub.f32	s13, s9, s10
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  403870:	ee27 7a04 	vmul.f32	s14, s14, s8
  403874:	eee6 7a87 	vfma.f32	s15, s13, s14
  403878:	e44d      	b.n	403116 <main+0x6b6>
						desired_pitch = scale_pitch*powerf(1.059463094359f, 12);
  40387a:	eddf 8a33 	vldr	s17, [pc, #204]	; 403948 <main+0xee8>
  40387e:	ee69 8aa8 	vmul.f32	s17, s19, s17
  403882:	e48d      	b.n	4031a0 <main+0x740>
	while (lo < hi)
  403884:	eef0 8a66 	vmov.f32	s17, s13
  403888:	461d      	mov	r5, r3
  40388a:	f7ff ba29 	b.w	402ce0 <main+0x280>
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  40388e:	ee35 5a49 	vsub.f32	s10, s10, s18
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  403892:	ed91 ba02 	vldr	s22, [r1, #8]
  403896:	ed91 aa00 	vldr	s20, [r1]
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  40389a:	ee25 5a02 	vmul.f32	s10, s10, s4
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  40389e:	ee3b aa4a 	vsub.f32	s20, s22, s20
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  4038a2:	eeea 7a05 	vfma.f32	s15, s20, s10
  4038a6:	e5aa      	b.n	4033fe <main+0x99e>
				if (number_of_semitones_from_root == scale_step)
  4038a8:	2403      	movs	r4, #3
  4038aa:	f7ff ba71 	b.w	402d90 <main+0x330>
  4038ae:	2402      	movs	r4, #2
  4038b0:	f7ff ba6e 	b.w	402d90 <main+0x330>
  4038b4:	2405      	movs	r4, #5
  4038b6:	f7ff ba6b 	b.w	402d90 <main+0x330>
  4038ba:	2404      	movs	r4, #4
  4038bc:	f7ff ba68 	b.w	402d90 <main+0x330>
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  4038c0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  4038c4:	eddf 6a1f 	vldr	s13, [pc, #124]	; 403944 <main+0xee4>
  4038c8:	eddf 7a20 	vldr	s15, [pc, #128]	; 40394c <main+0xeec>
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  4038cc:	edd3 4a02 	vldr	s9, [r3, #8]
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  4038d0:	ee37 7a66 	vsub.f32	s14, s14, s13
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  4038d4:	ed93 5a00 	vldr	s10, [r3]
  4038d8:	ee74 6ac5 	vsub.f32	s13, s9, s10
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  4038dc:	ee67 7a27 	vmul.f32	s15, s14, s15
  4038e0:	eee6 8aa7 	vfma.f32	s17, s13, s15
  4038e4:	e485      	b.n	4031f2 <main+0x792>
  4038e6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  4038ea:	eddf 6a16 	vldr	s13, [pc, #88]	; 403944 <main+0xee4>
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  4038ee:	ed93 6a02 	vldr	s12, [r3, #8]
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  4038f2:	eddf 7a16 	vldr	s15, [pc, #88]	; 40394c <main+0xeec>
  4038f6:	ee37 7a66 	vsub.f32	s14, s14, s13
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  4038fa:	ee76 6a68 	vsub.f32	s13, s12, s17
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  4038fe:	eeb0 6a69 	vmov.f32	s12, s19
  403902:	ee67 7a27 	vmul.f32	s15, s14, s15
  403906:	eea6 6aa7 	vfma.f32	s12, s13, s15
  40390a:	f7ff ba8d 	b.w	402e28 <main+0x3c8>
  40390e:	eef8 6a66 	vcvt.f32.u32	s13, s13
  403912:	ed9f 5a0c 	vldr	s10, [pc, #48]	; 403944 <main+0xee4>
  403916:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 40394c <main+0xeec>
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  40391a:	edd3 4a02 	vldr	s9, [r3, #8]
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  40391e:	ee76 6ac5 	vsub.f32	s13, s13, s10
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  403922:	ee34 5ae8 	vsub.f32	s10, s9, s17
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  403926:	ee26 7a87 	vmul.f32	s14, s13, s14
  40392a:	eee5 7a07 	vfma.f32	s15, s10, s14
  40392e:	f7ff bab3 	b.w	402e98 <main+0x438>
  403932:	bf00      	nop
  403934:	00407720 	.word	0x00407720
  403938:	2041c114 	.word	0x2041c114
  40393c:	3efffff5 	.word	0x3efffff5
  403940:	00403b1d 	.word	0x00403b1d
  403944:	427c0000 	.word	0x427c0000
  403948:	40000005 	.word	0x40000005
  40394c:	3c800000 	.word	0x3c800000

00403950 <arm_fill_f32>:
  403950:	b430      	push	{r4, r5}
  403952:	0895      	lsrs	r5, r2, #2
  403954:	d00b      	beq.n	40396e <arm_fill_f32+0x1e>
  403956:	460b      	mov	r3, r1
  403958:	462c      	mov	r4, r5
  40395a:	3c01      	subs	r4, #1
  40395c:	6018      	str	r0, [r3, #0]
  40395e:	6058      	str	r0, [r3, #4]
  403960:	6098      	str	r0, [r3, #8]
  403962:	60d8      	str	r0, [r3, #12]
  403964:	f103 0310 	add.w	r3, r3, #16
  403968:	d1f7      	bne.n	40395a <arm_fill_f32+0xa>
  40396a:	eb01 1105 	add.w	r1, r1, r5, lsl #4
  40396e:	f012 0203 	ands.w	r2, r2, #3
  403972:	d003      	beq.n	40397c <arm_fill_f32+0x2c>
  403974:	3a01      	subs	r2, #1
  403976:	f841 0b04 	str.w	r0, [r1], #4
  40397a:	d1fb      	bne.n	403974 <arm_fill_f32+0x24>
  40397c:	bc30      	pop	{r4, r5}
  40397e:	4770      	bx	lr

00403980 <arm_copy_f32>:
  403980:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  403984:	ea5f 0992 	movs.w	r9, r2, lsr #2
  403988:	d018      	beq.n	4039bc <arm_copy_f32+0x3c>
  40398a:	4604      	mov	r4, r0
  40398c:	460b      	mov	r3, r1
  40398e:	464d      	mov	r5, r9
  403990:	f8d4 8000 	ldr.w	r8, [r4]
  403994:	f8d4 c004 	ldr.w	ip, [r4, #4]
  403998:	68a7      	ldr	r7, [r4, #8]
  40399a:	68e6      	ldr	r6, [r4, #12]
  40399c:	3d01      	subs	r5, #1
  40399e:	f8c3 8000 	str.w	r8, [r3]
  4039a2:	f8c3 c004 	str.w	ip, [r3, #4]
  4039a6:	609f      	str	r7, [r3, #8]
  4039a8:	60de      	str	r6, [r3, #12]
  4039aa:	f104 0410 	add.w	r4, r4, #16
  4039ae:	f103 0310 	add.w	r3, r3, #16
  4039b2:	d1ed      	bne.n	403990 <arm_copy_f32+0x10>
  4039b4:	ea4f 1909 	mov.w	r9, r9, lsl #4
  4039b8:	4448      	add	r0, r9
  4039ba:	4449      	add	r1, r9
  4039bc:	f012 0203 	ands.w	r2, r2, #3
  4039c0:	d005      	beq.n	4039ce <arm_copy_f32+0x4e>
  4039c2:	f850 3b04 	ldr.w	r3, [r0], #4
  4039c6:	3a01      	subs	r2, #1
  4039c8:	f841 3b04 	str.w	r3, [r1], #4
  4039cc:	d1f9      	bne.n	4039c2 <arm_copy_f32+0x42>
  4039ce:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
  4039d2:	4770      	bx	lr

004039d4 <arm_power_f32>:
  4039d4:	b430      	push	{r4, r5}
  4039d6:	088d      	lsrs	r5, r1, #2
  4039d8:	eddf 7a18 	vldr	s15, [pc, #96]	; 403a3c <arm_power_f32+0x68>
  4039dc:	d01f      	beq.n	403a1e <arm_power_f32+0x4a>
  4039de:	4603      	mov	r3, r0
  4039e0:	462c      	mov	r4, r5
  4039e2:	edd3 6a00 	vldr	s13, [r3]
  4039e6:	ed93 7a01 	vldr	s14, [r3, #4]
  4039ea:	ee66 6aa6 	vmul.f32	s13, s13, s13
  4039ee:	ee27 6a07 	vmul.f32	s12, s14, s14
  4039f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
  4039f6:	ed93 7a02 	vldr	s14, [r3, #8]
  4039fa:	ee76 7a27 	vadd.f32	s15, s12, s15
  4039fe:	ee67 6a07 	vmul.f32	s13, s14, s14
  403a02:	ed93 7a03 	vldr	s14, [r3, #12]
  403a06:	ee76 6aa7 	vadd.f32	s13, s13, s15
  403a0a:	ee27 7a07 	vmul.f32	s14, s14, s14
  403a0e:	3c01      	subs	r4, #1
  403a10:	f103 0310 	add.w	r3, r3, #16
  403a14:	ee77 7a26 	vadd.f32	s15, s14, s13
  403a18:	d1e3      	bne.n	4039e2 <arm_power_f32+0xe>
  403a1a:	eb00 1005 	add.w	r0, r0, r5, lsl #4
  403a1e:	f011 0103 	ands.w	r1, r1, #3
  403a22:	d007      	beq.n	403a34 <arm_power_f32+0x60>
  403a24:	ecb0 7a01 	vldmia	r0!, {s14}
  403a28:	ee27 7a07 	vmul.f32	s14, s14, s14
  403a2c:	3901      	subs	r1, #1
  403a2e:	ee77 7a87 	vadd.f32	s15, s15, s14
  403a32:	d1f7      	bne.n	403a24 <arm_power_f32+0x50>
  403a34:	edc2 7a00 	vstr	s15, [r2]
  403a38:	bc30      	pop	{r4, r5}
  403a3a:	4770      	bx	lr
  403a3c:	00000000 	.word	0x00000000

00403a40 <arm_min_f32>:
  403a40:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  403a44:	f101 3cff 	add.w	ip, r1, #4294967295
  403a48:	ea5f 099c 	movs.w	r9, ip, lsr #2
  403a4c:	f100 0704 	add.w	r7, r0, #4
  403a50:	edd0 7a00 	vldr	s15, [r0]
  403a54:	d05c      	beq.n	403b10 <arm_min_f32+0xd0>
  403a56:	463c      	mov	r4, r7
  403a58:	464e      	mov	r6, r9
  403a5a:	2004      	movs	r0, #4
  403a5c:	2500      	movs	r5, #0
  403a5e:	edd4 6a00 	vldr	s13, [r4]
  403a62:	eef4 6ae7 	vcmpe.f32	s13, s15
  403a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403a6a:	ed94 7a01 	vldr	s14, [r4, #4]
  403a6e:	bf48      	it	mi
  403a70:	eef0 7a66 	vmovmi.f32	s15, s13
  403a74:	eef4 7ac7 	vcmpe.f32	s15, s14
  403a78:	f1a0 0803 	sub.w	r8, r0, #3
  403a7c:	bf48      	it	mi
  403a7e:	4645      	movmi	r5, r8
  403a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403a84:	edd4 6a02 	vldr	s13, [r4, #8]
  403a88:	bfc8      	it	gt
  403a8a:	eef0 7a47 	vmovgt.f32	s15, s14
  403a8e:	eef4 7ae6 	vcmpe.f32	s15, s13
  403a92:	f1a0 0802 	sub.w	r8, r0, #2
  403a96:	bfc8      	it	gt
  403a98:	4645      	movgt	r5, r8
  403a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403a9e:	ed94 7a03 	vldr	s14, [r4, #12]
  403aa2:	bfc8      	it	gt
  403aa4:	eef0 7a66 	vmovgt.f32	s15, s13
  403aa8:	eef4 7ac7 	vcmpe.f32	s15, s14
  403aac:	f100 38ff 	add.w	r8, r0, #4294967295
  403ab0:	bfc8      	it	gt
  403ab2:	4645      	movgt	r5, r8
  403ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403ab8:	bfc8      	it	gt
  403aba:	4605      	movgt	r5, r0
  403abc:	bfc8      	it	gt
  403abe:	eef0 7a47 	vmovgt.f32	s15, s14
  403ac2:	3e01      	subs	r6, #1
  403ac4:	f104 0410 	add.w	r4, r4, #16
  403ac8:	f100 0004 	add.w	r0, r0, #4
  403acc:	d1c7      	bne.n	403a5e <arm_min_f32+0x1e>
  403ace:	eb07 1709 	add.w	r7, r7, r9, lsl #4
  403ad2:	f01c 0c03 	ands.w	ip, ip, #3
  403ad6:	d01d      	beq.n	403b14 <arm_min_f32+0xd4>
  403ad8:	ebcc 0101 	rsb	r1, ip, r1
  403adc:	2000      	movs	r0, #0
  403ade:	ecb7 7a01 	vldmia	r7!, {s14}
  403ae2:	eeb4 7ae7 	vcmpe.f32	s14, s15
  403ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403aea:	bf48      	it	mi
  403aec:	eef0 7a47 	vmovmi.f32	s15, s14
  403af0:	eb01 0400 	add.w	r4, r1, r0
  403af4:	f100 0001 	add.w	r0, r0, #1
  403af8:	bf48      	it	mi
  403afa:	4625      	movmi	r5, r4
  403afc:	4560      	cmp	r0, ip
  403afe:	eeb0 7a67 	vmov.f32	s14, s15
  403b02:	d1ec      	bne.n	403ade <arm_min_f32+0x9e>
  403b04:	ed82 7a00 	vstr	s14, [r2]
  403b08:	601d      	str	r5, [r3, #0]
  403b0a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
  403b0e:	4770      	bx	lr
  403b10:	464d      	mov	r5, r9
  403b12:	e7de      	b.n	403ad2 <arm_min_f32+0x92>
  403b14:	eeb0 7a67 	vmov.f32	s14, s15
  403b18:	e7f4      	b.n	403b04 <arm_min_f32+0xc4>
  403b1a:	bf00      	nop

00403b1c <arm_mean_f32>:
  403b1c:	b430      	push	{r4, r5}
  403b1e:	088d      	lsrs	r5, r1, #2
  403b20:	eddf 7a16 	vldr	s15, [pc, #88]	; 403b7c <arm_mean_f32+0x60>
  403b24:	d017      	beq.n	403b56 <arm_mean_f32+0x3a>
  403b26:	4603      	mov	r3, r0
  403b28:	462c      	mov	r4, r5
  403b2a:	edd3 6a00 	vldr	s13, [r3]
  403b2e:	ed93 7a01 	vldr	s14, [r3, #4]
  403b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
  403b36:	edd3 6a02 	vldr	s13, [r3, #8]
  403b3a:	ee77 7a87 	vadd.f32	s15, s15, s14
  403b3e:	ed93 7a03 	vldr	s14, [r3, #12]
  403b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
  403b46:	3c01      	subs	r4, #1
  403b48:	f103 0310 	add.w	r3, r3, #16
  403b4c:	ee77 7a87 	vadd.f32	s15, s15, s14
  403b50:	d1eb      	bne.n	403b2a <arm_mean_f32+0xe>
  403b52:	eb00 1005 	add.w	r0, r0, r5, lsl #4
  403b56:	f011 0303 	ands.w	r3, r1, #3
  403b5a:	d005      	beq.n	403b68 <arm_mean_f32+0x4c>
  403b5c:	ecb0 7a01 	vldmia	r0!, {s14}
  403b60:	3b01      	subs	r3, #1
  403b62:	ee77 7a87 	vadd.f32	s15, s15, s14
  403b66:	d1f9      	bne.n	403b5c <arm_mean_f32+0x40>
  403b68:	ee06 1a90 	vmov	s13, r1
  403b6c:	bc30      	pop	{r4, r5}
  403b6e:	eeb8 7a66 	vcvt.f32.u32	s14, s13
  403b72:	eec7 7a87 	vdiv.f32	s15, s15, s14
  403b76:	edc2 7a00 	vstr	s15, [r2]
  403b7a:	4770      	bx	lr
  403b7c:	00000000 	.word	0x00000000

00403b80 <arm_max_f32>:
  403b80:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  403b84:	f101 3cff 	add.w	ip, r1, #4294967295
  403b88:	ea5f 099c 	movs.w	r9, ip, lsr #2
  403b8c:	f100 0704 	add.w	r7, r0, #4
  403b90:	edd0 7a00 	vldr	s15, [r0]
  403b94:	d05c      	beq.n	403c50 <arm_max_f32+0xd0>
  403b96:	463c      	mov	r4, r7
  403b98:	464e      	mov	r6, r9
  403b9a:	2004      	movs	r0, #4
  403b9c:	2500      	movs	r5, #0
  403b9e:	edd4 6a00 	vldr	s13, [r4]
  403ba2:	eef4 6ae7 	vcmpe.f32	s13, s15
  403ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403baa:	ed94 7a01 	vldr	s14, [r4, #4]
  403bae:	bfc8      	it	gt
  403bb0:	eef0 7a66 	vmovgt.f32	s15, s13
  403bb4:	eef4 7ac7 	vcmpe.f32	s15, s14
  403bb8:	f1a0 0803 	sub.w	r8, r0, #3
  403bbc:	bfc8      	it	gt
  403bbe:	4645      	movgt	r5, r8
  403bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403bc4:	edd4 6a02 	vldr	s13, [r4, #8]
  403bc8:	bf48      	it	mi
  403bca:	eef0 7a47 	vmovmi.f32	s15, s14
  403bce:	eef4 7ae6 	vcmpe.f32	s15, s13
  403bd2:	f1a0 0802 	sub.w	r8, r0, #2
  403bd6:	bf48      	it	mi
  403bd8:	4645      	movmi	r5, r8
  403bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403bde:	ed94 7a03 	vldr	s14, [r4, #12]
  403be2:	bf48      	it	mi
  403be4:	eef0 7a66 	vmovmi.f32	s15, s13
  403be8:	eef4 7ac7 	vcmpe.f32	s15, s14
  403bec:	f100 38ff 	add.w	r8, r0, #4294967295
  403bf0:	bf48      	it	mi
  403bf2:	4645      	movmi	r5, r8
  403bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403bf8:	bf48      	it	mi
  403bfa:	4605      	movmi	r5, r0
  403bfc:	bf48      	it	mi
  403bfe:	eef0 7a47 	vmovmi.f32	s15, s14
  403c02:	3e01      	subs	r6, #1
  403c04:	f104 0410 	add.w	r4, r4, #16
  403c08:	f100 0004 	add.w	r0, r0, #4
  403c0c:	d1c7      	bne.n	403b9e <arm_max_f32+0x1e>
  403c0e:	eb07 1709 	add.w	r7, r7, r9, lsl #4
  403c12:	f01c 0c03 	ands.w	ip, ip, #3
  403c16:	d01d      	beq.n	403c54 <arm_max_f32+0xd4>
  403c18:	ebcc 0101 	rsb	r1, ip, r1
  403c1c:	2000      	movs	r0, #0
  403c1e:	ecb7 7a01 	vldmia	r7!, {s14}
  403c22:	eeb4 7ae7 	vcmpe.f32	s14, s15
  403c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403c2a:	bfc8      	it	gt
  403c2c:	eef0 7a47 	vmovgt.f32	s15, s14
  403c30:	eb01 0400 	add.w	r4, r1, r0
  403c34:	f100 0001 	add.w	r0, r0, #1
  403c38:	bfc8      	it	gt
  403c3a:	4625      	movgt	r5, r4
  403c3c:	4560      	cmp	r0, ip
  403c3e:	eeb0 7a67 	vmov.f32	s14, s15
  403c42:	d1ec      	bne.n	403c1e <arm_max_f32+0x9e>
  403c44:	ed82 7a00 	vstr	s14, [r2]
  403c48:	601d      	str	r5, [r3, #0]
  403c4a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
  403c4e:	4770      	bx	lr
  403c50:	464d      	mov	r5, r9
  403c52:	e7de      	b.n	403c12 <arm_max_f32+0x92>
  403c54:	eeb0 7a67 	vmov.f32	s14, s15
  403c58:	e7f4      	b.n	403c44 <arm_max_f32+0xc4>
  403c5a:	bf00      	nop

00403c5c <arm_cos_f32>:
  403c5c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 403cd8 <arm_cos_f32+0x7c>
  403c60:	ee06 0a90 	vmov	s13, r0
  403c64:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
  403c68:	ee66 7aa7 	vmul.f32	s15, s13, s15
  403c6c:	ee77 7a87 	vadd.f32	s15, s15, s14
  403c70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  403c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403c78:	eebd 7ae7 	vcvt.s32.f32	s14, s15
  403c7c:	d504      	bpl.n	403c88 <arm_cos_f32+0x2c>
  403c7e:	ee17 3a10 	vmov	r3, s14
  403c82:	3b01      	subs	r3, #1
  403c84:	ee07 3a10 	vmov	s14, r3
  403c88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  403c8c:	eddf 6a13 	vldr	s13, [pc, #76]	; 403cdc <arm_cos_f32+0x80>
  403c90:	ee77 7ac7 	vsub.f32	s15, s15, s14
  403c94:	ee67 7aa6 	vmul.f32	s15, s15, s13
  403c98:	eefc 6ae7 	vcvt.u32.f32	s13, s15
  403c9c:	ee16 3a90 	vmov	r3, s13
  403ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
  403ca4:	ee07 3a10 	vmov	s14, r3
  403ca8:	eef8 6a47 	vcvt.f32.u32	s13, s14
  403cac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  403cb0:	ee77 7ae6 	vsub.f32	s15, s15, s13
  403cb4:	4a0a      	ldr	r2, [pc, #40]	; (403ce0 <arm_cos_f32+0x84>)
  403cb6:	ee37 7a67 	vsub.f32	s14, s14, s15
  403cba:	eb02 0183 	add.w	r1, r2, r3, lsl #2
  403cbe:	ed91 6a00 	vldr	s12, [r1]
  403cc2:	edd1 6a01 	vldr	s13, [r1, #4]
  403cc6:	ee27 7a06 	vmul.f32	s14, s14, s12
  403cca:	ee67 7aa6 	vmul.f32	s15, s15, s13
  403cce:	ee77 7a27 	vadd.f32	s15, s14, s15
  403cd2:	ee17 0a90 	vmov	r0, s15
  403cd6:	4770      	bx	lr
  403cd8:	3e22f983 	.word	0x3e22f983
  403cdc:	44000000 	.word	0x44000000
  403ce0:	00407920 	.word	0x00407920

00403ce4 <arm_scale_f32>:
  403ce4:	b470      	push	{r4, r5, r6}
  403ce6:	089e      	lsrs	r6, r3, #2
  403ce8:	ee07 1a90 	vmov	s15, r1
  403cec:	d023      	beq.n	403d36 <arm_scale_f32+0x52>
  403cee:	4635      	mov	r5, r6
  403cf0:	4614      	mov	r4, r2
  403cf2:	4601      	mov	r1, r0
  403cf4:	edd1 5a00 	vldr	s11, [r1]
  403cf8:	ed91 6a01 	vldr	s12, [r1, #4]
  403cfc:	edd1 6a02 	vldr	s13, [r1, #8]
  403d00:	ed91 7a03 	vldr	s14, [r1, #12]
  403d04:	ee65 5aa7 	vmul.f32	s11, s11, s15
  403d08:	ee26 6a27 	vmul.f32	s12, s12, s15
  403d0c:	ee66 6aa7 	vmul.f32	s13, s13, s15
  403d10:	ee27 7a27 	vmul.f32	s14, s14, s15
  403d14:	3d01      	subs	r5, #1
  403d16:	edc4 5a00 	vstr	s11, [r4]
  403d1a:	ed84 6a01 	vstr	s12, [r4, #4]
  403d1e:	edc4 6a02 	vstr	s13, [r4, #8]
  403d22:	ed84 7a03 	vstr	s14, [r4, #12]
  403d26:	f101 0110 	add.w	r1, r1, #16
  403d2a:	f104 0410 	add.w	r4, r4, #16
  403d2e:	d1e1      	bne.n	403cf4 <arm_scale_f32+0x10>
  403d30:	0136      	lsls	r6, r6, #4
  403d32:	4430      	add	r0, r6
  403d34:	4432      	add	r2, r6
  403d36:	f013 0303 	ands.w	r3, r3, #3
  403d3a:	d007      	beq.n	403d4c <arm_scale_f32+0x68>
  403d3c:	ecb0 7a01 	vldmia	r0!, {s14}
  403d40:	ee27 7a27 	vmul.f32	s14, s14, s15
  403d44:	3b01      	subs	r3, #1
  403d46:	eca2 7a01 	vstmia	r2!, {s14}
  403d4a:	d1f7      	bne.n	403d3c <arm_scale_f32+0x58>
  403d4c:	bc70      	pop	{r4, r5, r6}
  403d4e:	4770      	bx	lr

00403d50 <log2f>:
  403d50:	b508      	push	{r3, lr}
  403d52:	f000 f80b 	bl	403d6c <logf>
  403d56:	eddf 7a04 	vldr	s15, [pc, #16]	; 403d68 <log2f+0x18>
  403d5a:	ee06 0a90 	vmov	s13, r0
  403d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  403d62:	ee17 0a10 	vmov	r0, s14
  403d66:	bd08      	pop	{r3, pc}
  403d68:	3f317218 	.word	0x3f317218

00403d6c <logf>:
  403d6c:	b510      	push	{r4, lr}
  403d6e:	ed2d 8b02 	vpush	{d8}
  403d72:	b08a      	sub	sp, #40	; 0x28
  403d74:	ee08 0a10 	vmov	s16, r0
  403d78:	f000 f872 	bl	403e60 <__ieee754_logf>
  403d7c:	4b33      	ldr	r3, [pc, #204]	; (403e4c <logf+0xe0>)
  403d7e:	f993 4000 	ldrsb.w	r4, [r3]
  403d82:	1c63      	adds	r3, r4, #1
  403d84:	d009      	beq.n	403d9a <logf+0x2e>
  403d86:	eeb4 8a48 	vcmp.f32	s16, s16
  403d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403d8e:	d604      	bvs.n	403d9a <logf+0x2e>
  403d90:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
  403d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403d98:	dd03      	ble.n	403da2 <logf+0x36>
  403d9a:	b00a      	add	sp, #40	; 0x28
  403d9c:	ecbd 8b02 	vpop	{d8}
  403da0:	bd10      	pop	{r4, pc}
  403da2:	4b2b      	ldr	r3, [pc, #172]	; (403e50 <logf+0xe4>)
  403da4:	9301      	str	r3, [sp, #4]
  403da6:	ee18 0a10 	vmov	r0, s16
  403daa:	2300      	movs	r3, #0
  403dac:	9308      	str	r3, [sp, #32]
  403dae:	f000 fad9 	bl	404364 <__aeabi_f2d>
  403db2:	e9cd 0104 	strd	r0, r1, [sp, #16]
  403db6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403dba:	b9cc      	cbnz	r4, 403df0 <logf+0x84>
  403dbc:	4b25      	ldr	r3, [pc, #148]	; (403e54 <logf+0xe8>)
  403dbe:	eeb5 8a40 	vcmp.f32	s16, #0.0
  403dc2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
  403dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403dca:	e9cd 2306 	strd	r2, r3, [sp, #24]
  403dce:	d134      	bne.n	403e3a <logf+0xce>
  403dd0:	2302      	movs	r3, #2
  403dd2:	9300      	str	r3, [sp, #0]
  403dd4:	4668      	mov	r0, sp
  403dd6:	f000 f959 	bl	40408c <matherr>
  403dda:	b1b0      	cbz	r0, 403e0a <logf+0x9e>
  403ddc:	9b08      	ldr	r3, [sp, #32]
  403dde:	b9cb      	cbnz	r3, 403e14 <logf+0xa8>
  403de0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  403de4:	f000 fd24 	bl	404830 <__aeabi_d2f>
  403de8:	b00a      	add	sp, #40	; 0x28
  403dea:	ecbd 8b02 	vpop	{d8}
  403dee:	bd10      	pop	{r4, pc}
  403df0:	4b19      	ldr	r3, [pc, #100]	; (403e58 <logf+0xec>)
  403df2:	eeb5 8a40 	vcmp.f32	s16, #0.0
  403df6:	2200      	movs	r2, #0
  403df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403dfc:	e9cd 2306 	strd	r2, r3, [sp, #24]
  403e00:	d10d      	bne.n	403e1e <logf+0xb2>
  403e02:	2302      	movs	r3, #2
  403e04:	429c      	cmp	r4, r3
  403e06:	9300      	str	r3, [sp, #0]
  403e08:	d1e4      	bne.n	403dd4 <logf+0x68>
  403e0a:	f000 fd61 	bl	4048d0 <__errno>
  403e0e:	2322      	movs	r3, #34	; 0x22
  403e10:	6003      	str	r3, [r0, #0]
  403e12:	e7e3      	b.n	403ddc <logf+0x70>
  403e14:	f000 fd5c 	bl	4048d0 <__errno>
  403e18:	9b08      	ldr	r3, [sp, #32]
  403e1a:	6003      	str	r3, [r0, #0]
  403e1c:	e7e0      	b.n	403de0 <logf+0x74>
  403e1e:	2301      	movs	r3, #1
  403e20:	2c02      	cmp	r4, #2
  403e22:	9300      	str	r3, [sp, #0]
  403e24:	d10b      	bne.n	403e3e <logf+0xd2>
  403e26:	f000 fd53 	bl	4048d0 <__errno>
  403e2a:	2321      	movs	r3, #33	; 0x21
  403e2c:	6003      	str	r3, [r0, #0]
  403e2e:	480b      	ldr	r0, [pc, #44]	; (403e5c <logf+0xf0>)
  403e30:	f000 f92e 	bl	404090 <nan>
  403e34:	e9cd 0106 	strd	r0, r1, [sp, #24]
  403e38:	e7d0      	b.n	403ddc <logf+0x70>
  403e3a:	2301      	movs	r3, #1
  403e3c:	9300      	str	r3, [sp, #0]
  403e3e:	4668      	mov	r0, sp
  403e40:	f000 f924 	bl	40408c <matherr>
  403e44:	2800      	cmp	r0, #0
  403e46:	d1f2      	bne.n	403e2e <logf+0xc2>
  403e48:	e7ed      	b.n	403e26 <logf+0xba>
  403e4a:	bf00      	nop
  403e4c:	2040004c 	.word	0x2040004c
  403e50:	00408124 	.word	0x00408124
  403e54:	c7efffff 	.word	0xc7efffff
  403e58:	fff00000 	.word	0xfff00000
  403e5c:	00408140 	.word	0x00408140

00403e60 <__ieee754_logf>:
  403e60:	b430      	push	{r4, r5}
  403e62:	b082      	sub	sp, #8
  403e64:	9001      	str	r0, [sp, #4]
  403e66:	9b01      	ldr	r3, [sp, #4]
  403e68:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
  403e6c:	d02d      	beq.n	403eca <__ieee754_logf+0x6a>
  403e6e:	2b00      	cmp	r3, #0
  403e70:	db41      	blt.n	403ef6 <__ieee754_logf+0x96>
  403e72:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
  403e76:	da4b      	bge.n	403f10 <__ieee754_logf+0xb0>
  403e78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
  403e7c:	db30      	blt.n	403ee0 <__ieee754_logf+0x80>
  403e7e:	2500      	movs	r5, #0
  403e80:	4a73      	ldr	r2, [pc, #460]	; (404050 <__ieee754_logf+0x1f0>)
  403e82:	f3c3 0416 	ubfx	r4, r3, #0, #23
  403e86:	4422      	add	r2, r4
  403e88:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
  403e8c:	f082 507e 	eor.w	r0, r2, #1065353216	; 0x3f800000
  403e90:	15db      	asrs	r3, r3, #23
  403e92:	f104 010f 	add.w	r1, r4, #15
  403e96:	4320      	orrs	r0, r4
  403e98:	3b7f      	subs	r3, #127	; 0x7f
  403e9a:	ee07 0a90 	vmov	s15, r0
  403e9e:	f3c1 0116 	ubfx	r1, r1, #0, #23
  403ea2:	442b      	add	r3, r5
  403ea4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  403ea8:	290f      	cmp	r1, #15
  403eaa:	eb03 53d2 	add.w	r3, r3, r2, lsr #23
  403eae:	ee37 7ac7 	vsub.f32	s14, s15, s14
  403eb2:	dc36      	bgt.n	403f22 <__ieee754_logf+0xc2>
  403eb4:	eeb5 7a40 	vcmp.f32	s14, #0.0
  403eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403ebc:	d172      	bne.n	403fa4 <__ieee754_logf+0x144>
  403ebe:	2b00      	cmp	r3, #0
  403ec0:	f040 80a0 	bne.w	404004 <__ieee754_logf+0x1a4>
  403ec4:	eddf 7a63 	vldr	s15, [pc, #396]	; 404054 <__ieee754_logf+0x1f4>
  403ec8:	e005      	b.n	403ed6 <__ieee754_logf+0x76>
  403eca:	eddf 6a63 	vldr	s13, [pc, #396]	; 404058 <__ieee754_logf+0x1f8>
  403ece:	ed9f 7a61 	vldr	s14, [pc, #388]	; 404054 <__ieee754_logf+0x1f4>
  403ed2:	eec6 7a87 	vdiv.f32	s15, s13, s14
  403ed6:	ee17 0a90 	vmov	r0, s15
  403eda:	b002      	add	sp, #8
  403edc:	bc30      	pop	{r4, r5}
  403ede:	4770      	bx	lr
  403ee0:	eddf 7a5e 	vldr	s15, [pc, #376]	; 40405c <__ieee754_logf+0x1fc>
  403ee4:	ed9d 7a01 	vldr	s14, [sp, #4]
  403ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
  403eec:	f06f 0518 	mvn.w	r5, #24
  403ef0:	ee17 3a90 	vmov	r3, s15
  403ef4:	e7c4      	b.n	403e80 <__ieee754_logf+0x20>
  403ef6:	eddd 7a01 	vldr	s15, [sp, #4]
  403efa:	ed9f 7a56 	vldr	s14, [pc, #344]	; 404054 <__ieee754_logf+0x1f4>
  403efe:	ee77 6ae7 	vsub.f32	s13, s15, s15
  403f02:	eec6 7a87 	vdiv.f32	s15, s13, s14
  403f06:	ee17 0a90 	vmov	r0, s15
  403f0a:	b002      	add	sp, #8
  403f0c:	bc30      	pop	{r4, r5}
  403f0e:	4770      	bx	lr
  403f10:	eddd 7a01 	vldr	s15, [sp, #4]
  403f14:	ee77 7aa7 	vadd.f32	s15, s15, s15
  403f18:	ee17 0a90 	vmov	r0, s15
  403f1c:	b002      	add	sp, #8
  403f1e:	bc30      	pop	{r4, r5}
  403f20:	4770      	bx	lr
  403f22:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
  403f26:	ee77 6a26 	vadd.f32	s13, s14, s13
  403f2a:	ed9f 2a4d 	vldr	s4, [pc, #308]	; 404060 <__ieee754_logf+0x200>
  403f2e:	ed9f 4a4d 	vldr	s8, [pc, #308]	; 404064 <__ieee754_logf+0x204>
  403f32:	ed9f 5a4d 	vldr	s10, [pc, #308]	; 404068 <__ieee754_logf+0x208>
  403f36:	eddf 2a4d 	vldr	s5, [pc, #308]	; 40406c <__ieee754_logf+0x20c>
  403f3a:	eddf 4a4d 	vldr	s9, [pc, #308]	; 404070 <__ieee754_logf+0x210>
  403f3e:	eddf 7a4d 	vldr	s15, [pc, #308]	; 404074 <__ieee754_logf+0x214>
  403f42:	ed9f 6a4d 	vldr	s12, [pc, #308]	; 404078 <__ieee754_logf+0x218>
  403f46:	494d      	ldr	r1, [pc, #308]	; (40407c <__ieee754_logf+0x21c>)
  403f48:	eec7 3a26 	vdiv.f32	s7, s14, s13
  403f4c:	f5c4 1257 	rsb	r2, r4, #3522560	; 0x35c000
  403f50:	4421      	add	r1, r4
  403f52:	f502 7222 	add.w	r2, r2, #648	; 0x288
  403f56:	430a      	orrs	r2, r1
  403f58:	2a00      	cmp	r2, #0
  403f5a:	ee06 3a90 	vmov	s13, r3
  403f5e:	ee63 5aa3 	vmul.f32	s11, s7, s7
  403f62:	eeb8 3ae6 	vcvt.f32.s32	s6, s13
  403f66:	ee65 6aa5 	vmul.f32	s13, s11, s11
  403f6a:	eea6 4a82 	vfma.f32	s8, s13, s4
  403f6e:	eee6 4aa2 	vfma.f32	s9, s13, s5
  403f72:	eea6 5a84 	vfma.f32	s10, s13, s8
  403f76:	eea6 6aa4 	vfma.f32	s12, s13, s9
  403f7a:	eee6 7a85 	vfma.f32	s15, s13, s10
  403f7e:	ee67 7aa5 	vmul.f32	s15, s15, s11
  403f82:	eee6 7a86 	vfma.f32	s15, s13, s12
  403f86:	dd4c      	ble.n	404022 <__ieee754_logf+0x1c2>
  403f88:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
  403f8c:	ee27 6a06 	vmul.f32	s12, s14, s12
  403f90:	ee26 6a07 	vmul.f32	s12, s12, s14
  403f94:	b9a3      	cbnz	r3, 403fc0 <__ieee754_logf+0x160>
  403f96:	ee77 6a86 	vadd.f32	s13, s15, s12
  403f9a:	eea3 6ae6 	vfms.f32	s12, s7, s13
  403f9e:	ee77 7a46 	vsub.f32	s15, s14, s12
  403fa2:	e798      	b.n	403ed6 <__ieee754_logf+0x76>
  403fa4:	eddf 6a36 	vldr	s13, [pc, #216]	; 404080 <__ieee754_logf+0x220>
  403fa8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
  403fac:	eee7 7a66 	vfms.f32	s15, s14, s13
  403fb0:	ee67 6a07 	vmul.f32	s13, s14, s14
  403fb4:	ee67 6aa6 	vmul.f32	s13, s15, s13
  403fb8:	b99b      	cbnz	r3, 403fe2 <__ieee754_logf+0x182>
  403fba:	ee77 7a66 	vsub.f32	s15, s14, s13
  403fbe:	e78a      	b.n	403ed6 <__ieee754_logf+0x76>
  403fc0:	eddf 5a30 	vldr	s11, [pc, #192]	; 404084 <__ieee754_logf+0x224>
  403fc4:	ed9f 5a30 	vldr	s10, [pc, #192]	; 404088 <__ieee754_logf+0x228>
  403fc8:	ee77 6a86 	vadd.f32	s13, s15, s12
  403fcc:	ee63 7a25 	vmul.f32	s15, s6, s11
  403fd0:	eee3 7aa6 	vfma.f32	s15, s7, s13
  403fd4:	ee76 7a67 	vsub.f32	s15, s12, s15
  403fd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
  403fdc:	eed3 7a05 	vfnms.f32	s15, s6, s10
  403fe0:	e779      	b.n	403ed6 <__ieee754_logf+0x76>
  403fe2:	ee07 3a90 	vmov	s15, r3
  403fe6:	eddf 5a27 	vldr	s11, [pc, #156]	; 404084 <__ieee754_logf+0x224>
  403fea:	ed9f 6a27 	vldr	s12, [pc, #156]	; 404088 <__ieee754_logf+0x228>
  403fee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403ff2:	eee7 6ae5 	vfms.f32	s13, s15, s11
  403ff6:	ee36 7ac7 	vsub.f32	s14, s13, s14
  403ffa:	ee97 7a86 	vfnms.f32	s14, s15, s12
  403ffe:	eef0 7a47 	vmov.f32	s15, s14
  404002:	e768      	b.n	403ed6 <__ieee754_logf+0x76>
  404004:	ee07 3a90 	vmov	s15, r3
  404008:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 404084 <__ieee754_logf+0x224>
  40400c:	eddf 6a1e 	vldr	s13, [pc, #120]	; 404088 <__ieee754_logf+0x228>
  404010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404014:	ee27 7a87 	vmul.f32	s14, s15, s14
  404018:	eea7 7aa6 	vfma.f32	s14, s15, s13
  40401c:	eef0 7a47 	vmov.f32	s15, s14
  404020:	e759      	b.n	403ed6 <__ieee754_logf+0x76>
  404022:	b173      	cbz	r3, 404042 <__ieee754_logf+0x1e2>
  404024:	ed9f 6a17 	vldr	s12, [pc, #92]	; 404084 <__ieee754_logf+0x224>
  404028:	eddf 5a17 	vldr	s11, [pc, #92]	; 404088 <__ieee754_logf+0x228>
  40402c:	ee77 6a67 	vsub.f32	s13, s14, s15
  404030:	ee66 7a43 	vnmul.f32	s15, s12, s6
  404034:	eee3 7aa6 	vfma.f32	s15, s7, s13
  404038:	ee77 7ac7 	vsub.f32	s15, s15, s14
  40403c:	eed3 7a25 	vfnms.f32	s15, s6, s11
  404040:	e749      	b.n	403ed6 <__ieee754_logf+0x76>
  404042:	ee77 7a67 	vsub.f32	s15, s14, s15
  404046:	eea3 7ae7 	vfms.f32	s14, s7, s15
  40404a:	eef0 7a47 	vmov.f32	s15, s14
  40404e:	e742      	b.n	403ed6 <__ieee754_logf+0x76>
  404050:	004afb20 	.word	0x004afb20
  404054:	00000000 	.word	0x00000000
  404058:	cc000000 	.word	0xcc000000
  40405c:	4c000000 	.word	0x4c000000
  404060:	3e178897 	.word	0x3e178897
  404064:	3e3a3325 	.word	0x3e3a3325
  404068:	3e924925 	.word	0x3e924925
  40406c:	3e1cd04f 	.word	0x3e1cd04f
  404070:	3e638e29 	.word	0x3e638e29
  404074:	3f2aaaab 	.word	0x3f2aaaab
  404078:	3ecccccd 	.word	0x3ecccccd
  40407c:	ffcf5c30 	.word	0xffcf5c30
  404080:	3eaaaaab 	.word	0x3eaaaaab
  404084:	3717f7d1 	.word	0x3717f7d1
  404088:	3f317180 	.word	0x3f317180

0040408c <matherr>:
  40408c:	2000      	movs	r0, #0
  40408e:	4770      	bx	lr

00404090 <nan>:
  404090:	2000      	movs	r0, #0
  404092:	4901      	ldr	r1, [pc, #4]	; (404098 <nan+0x8>)
  404094:	4770      	bx	lr
  404096:	bf00      	nop
  404098:	7ff80000 	.word	0x7ff80000

0040409c <__aeabi_drsub>:
  40409c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4040a0:	e002      	b.n	4040a8 <__adddf3>
  4040a2:	bf00      	nop

004040a4 <__aeabi_dsub>:
  4040a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004040a8 <__adddf3>:
  4040a8:	b530      	push	{r4, r5, lr}
  4040aa:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4040ae:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4040b2:	ea94 0f05 	teq	r4, r5
  4040b6:	bf08      	it	eq
  4040b8:	ea90 0f02 	teqeq	r0, r2
  4040bc:	bf1f      	itttt	ne
  4040be:	ea54 0c00 	orrsne.w	ip, r4, r0
  4040c2:	ea55 0c02 	orrsne.w	ip, r5, r2
  4040c6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4040ca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4040ce:	f000 80e2 	beq.w	404296 <__adddf3+0x1ee>
  4040d2:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4040d6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4040da:	bfb8      	it	lt
  4040dc:	426d      	neglt	r5, r5
  4040de:	dd0c      	ble.n	4040fa <__adddf3+0x52>
  4040e0:	442c      	add	r4, r5
  4040e2:	ea80 0202 	eor.w	r2, r0, r2
  4040e6:	ea81 0303 	eor.w	r3, r1, r3
  4040ea:	ea82 0000 	eor.w	r0, r2, r0
  4040ee:	ea83 0101 	eor.w	r1, r3, r1
  4040f2:	ea80 0202 	eor.w	r2, r0, r2
  4040f6:	ea81 0303 	eor.w	r3, r1, r3
  4040fa:	2d36      	cmp	r5, #54	; 0x36
  4040fc:	bf88      	it	hi
  4040fe:	bd30      	pophi	{r4, r5, pc}
  404100:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  404104:	ea4f 3101 	mov.w	r1, r1, lsl #12
  404108:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40410c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  404110:	d002      	beq.n	404118 <__adddf3+0x70>
  404112:	4240      	negs	r0, r0
  404114:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  404118:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40411c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  404120:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  404124:	d002      	beq.n	40412c <__adddf3+0x84>
  404126:	4252      	negs	r2, r2
  404128:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40412c:	ea94 0f05 	teq	r4, r5
  404130:	f000 80a7 	beq.w	404282 <__adddf3+0x1da>
  404134:	f1a4 0401 	sub.w	r4, r4, #1
  404138:	f1d5 0e20 	rsbs	lr, r5, #32
  40413c:	db0d      	blt.n	40415a <__adddf3+0xb2>
  40413e:	fa02 fc0e 	lsl.w	ip, r2, lr
  404142:	fa22 f205 	lsr.w	r2, r2, r5
  404146:	1880      	adds	r0, r0, r2
  404148:	f141 0100 	adc.w	r1, r1, #0
  40414c:	fa03 f20e 	lsl.w	r2, r3, lr
  404150:	1880      	adds	r0, r0, r2
  404152:	fa43 f305 	asr.w	r3, r3, r5
  404156:	4159      	adcs	r1, r3
  404158:	e00e      	b.n	404178 <__adddf3+0xd0>
  40415a:	f1a5 0520 	sub.w	r5, r5, #32
  40415e:	f10e 0e20 	add.w	lr, lr, #32
  404162:	2a01      	cmp	r2, #1
  404164:	fa03 fc0e 	lsl.w	ip, r3, lr
  404168:	bf28      	it	cs
  40416a:	f04c 0c02 	orrcs.w	ip, ip, #2
  40416e:	fa43 f305 	asr.w	r3, r3, r5
  404172:	18c0      	adds	r0, r0, r3
  404174:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  404178:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40417c:	d507      	bpl.n	40418e <__adddf3+0xe6>
  40417e:	f04f 0e00 	mov.w	lr, #0
  404182:	f1dc 0c00 	rsbs	ip, ip, #0
  404186:	eb7e 0000 	sbcs.w	r0, lr, r0
  40418a:	eb6e 0101 	sbc.w	r1, lr, r1
  40418e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  404192:	d31b      	bcc.n	4041cc <__adddf3+0x124>
  404194:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  404198:	d30c      	bcc.n	4041b4 <__adddf3+0x10c>
  40419a:	0849      	lsrs	r1, r1, #1
  40419c:	ea5f 0030 	movs.w	r0, r0, rrx
  4041a0:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4041a4:	f104 0401 	add.w	r4, r4, #1
  4041a8:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4041ac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4041b0:	f080 809a 	bcs.w	4042e8 <__adddf3+0x240>
  4041b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4041b8:	bf08      	it	eq
  4041ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4041be:	f150 0000 	adcs.w	r0, r0, #0
  4041c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4041c6:	ea41 0105 	orr.w	r1, r1, r5
  4041ca:	bd30      	pop	{r4, r5, pc}
  4041cc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4041d0:	4140      	adcs	r0, r0
  4041d2:	eb41 0101 	adc.w	r1, r1, r1
  4041d6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4041da:	f1a4 0401 	sub.w	r4, r4, #1
  4041de:	d1e9      	bne.n	4041b4 <__adddf3+0x10c>
  4041e0:	f091 0f00 	teq	r1, #0
  4041e4:	bf04      	itt	eq
  4041e6:	4601      	moveq	r1, r0
  4041e8:	2000      	moveq	r0, #0
  4041ea:	fab1 f381 	clz	r3, r1
  4041ee:	bf08      	it	eq
  4041f0:	3320      	addeq	r3, #32
  4041f2:	f1a3 030b 	sub.w	r3, r3, #11
  4041f6:	f1b3 0220 	subs.w	r2, r3, #32
  4041fa:	da0c      	bge.n	404216 <__adddf3+0x16e>
  4041fc:	320c      	adds	r2, #12
  4041fe:	dd08      	ble.n	404212 <__adddf3+0x16a>
  404200:	f102 0c14 	add.w	ip, r2, #20
  404204:	f1c2 020c 	rsb	r2, r2, #12
  404208:	fa01 f00c 	lsl.w	r0, r1, ip
  40420c:	fa21 f102 	lsr.w	r1, r1, r2
  404210:	e00c      	b.n	40422c <__adddf3+0x184>
  404212:	f102 0214 	add.w	r2, r2, #20
  404216:	bfd8      	it	le
  404218:	f1c2 0c20 	rsble	ip, r2, #32
  40421c:	fa01 f102 	lsl.w	r1, r1, r2
  404220:	fa20 fc0c 	lsr.w	ip, r0, ip
  404224:	bfdc      	itt	le
  404226:	ea41 010c 	orrle.w	r1, r1, ip
  40422a:	4090      	lslle	r0, r2
  40422c:	1ae4      	subs	r4, r4, r3
  40422e:	bfa2      	ittt	ge
  404230:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  404234:	4329      	orrge	r1, r5
  404236:	bd30      	popge	{r4, r5, pc}
  404238:	ea6f 0404 	mvn.w	r4, r4
  40423c:	3c1f      	subs	r4, #31
  40423e:	da1c      	bge.n	40427a <__adddf3+0x1d2>
  404240:	340c      	adds	r4, #12
  404242:	dc0e      	bgt.n	404262 <__adddf3+0x1ba>
  404244:	f104 0414 	add.w	r4, r4, #20
  404248:	f1c4 0220 	rsb	r2, r4, #32
  40424c:	fa20 f004 	lsr.w	r0, r0, r4
  404250:	fa01 f302 	lsl.w	r3, r1, r2
  404254:	ea40 0003 	orr.w	r0, r0, r3
  404258:	fa21 f304 	lsr.w	r3, r1, r4
  40425c:	ea45 0103 	orr.w	r1, r5, r3
  404260:	bd30      	pop	{r4, r5, pc}
  404262:	f1c4 040c 	rsb	r4, r4, #12
  404266:	f1c4 0220 	rsb	r2, r4, #32
  40426a:	fa20 f002 	lsr.w	r0, r0, r2
  40426e:	fa01 f304 	lsl.w	r3, r1, r4
  404272:	ea40 0003 	orr.w	r0, r0, r3
  404276:	4629      	mov	r1, r5
  404278:	bd30      	pop	{r4, r5, pc}
  40427a:	fa21 f004 	lsr.w	r0, r1, r4
  40427e:	4629      	mov	r1, r5
  404280:	bd30      	pop	{r4, r5, pc}
  404282:	f094 0f00 	teq	r4, #0
  404286:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40428a:	bf06      	itte	eq
  40428c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  404290:	3401      	addeq	r4, #1
  404292:	3d01      	subne	r5, #1
  404294:	e74e      	b.n	404134 <__adddf3+0x8c>
  404296:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40429a:	bf18      	it	ne
  40429c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4042a0:	d029      	beq.n	4042f6 <__adddf3+0x24e>
  4042a2:	ea94 0f05 	teq	r4, r5
  4042a6:	bf08      	it	eq
  4042a8:	ea90 0f02 	teqeq	r0, r2
  4042ac:	d005      	beq.n	4042ba <__adddf3+0x212>
  4042ae:	ea54 0c00 	orrs.w	ip, r4, r0
  4042b2:	bf04      	itt	eq
  4042b4:	4619      	moveq	r1, r3
  4042b6:	4610      	moveq	r0, r2
  4042b8:	bd30      	pop	{r4, r5, pc}
  4042ba:	ea91 0f03 	teq	r1, r3
  4042be:	bf1e      	ittt	ne
  4042c0:	2100      	movne	r1, #0
  4042c2:	2000      	movne	r0, #0
  4042c4:	bd30      	popne	{r4, r5, pc}
  4042c6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4042ca:	d105      	bne.n	4042d8 <__adddf3+0x230>
  4042cc:	0040      	lsls	r0, r0, #1
  4042ce:	4149      	adcs	r1, r1
  4042d0:	bf28      	it	cs
  4042d2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4042d6:	bd30      	pop	{r4, r5, pc}
  4042d8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4042dc:	bf3c      	itt	cc
  4042de:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4042e2:	bd30      	popcc	{r4, r5, pc}
  4042e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4042e8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4042ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4042f0:	f04f 0000 	mov.w	r0, #0
  4042f4:	bd30      	pop	{r4, r5, pc}
  4042f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4042fa:	bf1a      	itte	ne
  4042fc:	4619      	movne	r1, r3
  4042fe:	4610      	movne	r0, r2
  404300:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  404304:	bf1c      	itt	ne
  404306:	460b      	movne	r3, r1
  404308:	4602      	movne	r2, r0
  40430a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40430e:	bf06      	itte	eq
  404310:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  404314:	ea91 0f03 	teqeq	r1, r3
  404318:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40431c:	bd30      	pop	{r4, r5, pc}
  40431e:	bf00      	nop

00404320 <__aeabi_ui2d>:
  404320:	f090 0f00 	teq	r0, #0
  404324:	bf04      	itt	eq
  404326:	2100      	moveq	r1, #0
  404328:	4770      	bxeq	lr
  40432a:	b530      	push	{r4, r5, lr}
  40432c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404330:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404334:	f04f 0500 	mov.w	r5, #0
  404338:	f04f 0100 	mov.w	r1, #0
  40433c:	e750      	b.n	4041e0 <__adddf3+0x138>
  40433e:	bf00      	nop

00404340 <__aeabi_i2d>:
  404340:	f090 0f00 	teq	r0, #0
  404344:	bf04      	itt	eq
  404346:	2100      	moveq	r1, #0
  404348:	4770      	bxeq	lr
  40434a:	b530      	push	{r4, r5, lr}
  40434c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404350:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404354:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  404358:	bf48      	it	mi
  40435a:	4240      	negmi	r0, r0
  40435c:	f04f 0100 	mov.w	r1, #0
  404360:	e73e      	b.n	4041e0 <__adddf3+0x138>
  404362:	bf00      	nop

00404364 <__aeabi_f2d>:
  404364:	0042      	lsls	r2, r0, #1
  404366:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40436a:	ea4f 0131 	mov.w	r1, r1, rrx
  40436e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  404372:	bf1f      	itttt	ne
  404374:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  404378:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40437c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  404380:	4770      	bxne	lr
  404382:	f092 0f00 	teq	r2, #0
  404386:	bf14      	ite	ne
  404388:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40438c:	4770      	bxeq	lr
  40438e:	b530      	push	{r4, r5, lr}
  404390:	f44f 7460 	mov.w	r4, #896	; 0x380
  404394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  404398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40439c:	e720      	b.n	4041e0 <__adddf3+0x138>
  40439e:	bf00      	nop

004043a0 <__aeabi_ul2d>:
  4043a0:	ea50 0201 	orrs.w	r2, r0, r1
  4043a4:	bf08      	it	eq
  4043a6:	4770      	bxeq	lr
  4043a8:	b530      	push	{r4, r5, lr}
  4043aa:	f04f 0500 	mov.w	r5, #0
  4043ae:	e00a      	b.n	4043c6 <__aeabi_l2d+0x16>

004043b0 <__aeabi_l2d>:
  4043b0:	ea50 0201 	orrs.w	r2, r0, r1
  4043b4:	bf08      	it	eq
  4043b6:	4770      	bxeq	lr
  4043b8:	b530      	push	{r4, r5, lr}
  4043ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4043be:	d502      	bpl.n	4043c6 <__aeabi_l2d+0x16>
  4043c0:	4240      	negs	r0, r0
  4043c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4043c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4043ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4043ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4043d2:	f43f aedc 	beq.w	40418e <__adddf3+0xe6>
  4043d6:	f04f 0203 	mov.w	r2, #3
  4043da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4043de:	bf18      	it	ne
  4043e0:	3203      	addne	r2, #3
  4043e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4043e6:	bf18      	it	ne
  4043e8:	3203      	addne	r2, #3
  4043ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4043ee:	f1c2 0320 	rsb	r3, r2, #32
  4043f2:	fa00 fc03 	lsl.w	ip, r0, r3
  4043f6:	fa20 f002 	lsr.w	r0, r0, r2
  4043fa:	fa01 fe03 	lsl.w	lr, r1, r3
  4043fe:	ea40 000e 	orr.w	r0, r0, lr
  404402:	fa21 f102 	lsr.w	r1, r1, r2
  404406:	4414      	add	r4, r2
  404408:	e6c1      	b.n	40418e <__adddf3+0xe6>
  40440a:	bf00      	nop

0040440c <__aeabi_dmul>:
  40440c:	b570      	push	{r4, r5, r6, lr}
  40440e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  404412:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  404416:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40441a:	bf1d      	ittte	ne
  40441c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  404420:	ea94 0f0c 	teqne	r4, ip
  404424:	ea95 0f0c 	teqne	r5, ip
  404428:	f000 f8de 	bleq	4045e8 <__aeabi_dmul+0x1dc>
  40442c:	442c      	add	r4, r5
  40442e:	ea81 0603 	eor.w	r6, r1, r3
  404432:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  404436:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40443a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40443e:	bf18      	it	ne
  404440:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  404444:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404448:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40444c:	d038      	beq.n	4044c0 <__aeabi_dmul+0xb4>
  40444e:	fba0 ce02 	umull	ip, lr, r0, r2
  404452:	f04f 0500 	mov.w	r5, #0
  404456:	fbe1 e502 	umlal	lr, r5, r1, r2
  40445a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40445e:	fbe0 e503 	umlal	lr, r5, r0, r3
  404462:	f04f 0600 	mov.w	r6, #0
  404466:	fbe1 5603 	umlal	r5, r6, r1, r3
  40446a:	f09c 0f00 	teq	ip, #0
  40446e:	bf18      	it	ne
  404470:	f04e 0e01 	orrne.w	lr, lr, #1
  404474:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  404478:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40447c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  404480:	d204      	bcs.n	40448c <__aeabi_dmul+0x80>
  404482:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  404486:	416d      	adcs	r5, r5
  404488:	eb46 0606 	adc.w	r6, r6, r6
  40448c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  404490:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  404494:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  404498:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40449c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4044a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4044a4:	bf88      	it	hi
  4044a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4044aa:	d81e      	bhi.n	4044ea <__aeabi_dmul+0xde>
  4044ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4044b0:	bf08      	it	eq
  4044b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4044b6:	f150 0000 	adcs.w	r0, r0, #0
  4044ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4044be:	bd70      	pop	{r4, r5, r6, pc}
  4044c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4044c4:	ea46 0101 	orr.w	r1, r6, r1
  4044c8:	ea40 0002 	orr.w	r0, r0, r2
  4044cc:	ea81 0103 	eor.w	r1, r1, r3
  4044d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4044d4:	bfc2      	ittt	gt
  4044d6:	ebd4 050c 	rsbsgt	r5, r4, ip
  4044da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4044de:	bd70      	popgt	{r4, r5, r6, pc}
  4044e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4044e4:	f04f 0e00 	mov.w	lr, #0
  4044e8:	3c01      	subs	r4, #1
  4044ea:	f300 80ab 	bgt.w	404644 <__aeabi_dmul+0x238>
  4044ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4044f2:	bfde      	ittt	le
  4044f4:	2000      	movle	r0, #0
  4044f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4044fa:	bd70      	pople	{r4, r5, r6, pc}
  4044fc:	f1c4 0400 	rsb	r4, r4, #0
  404500:	3c20      	subs	r4, #32
  404502:	da35      	bge.n	404570 <__aeabi_dmul+0x164>
  404504:	340c      	adds	r4, #12
  404506:	dc1b      	bgt.n	404540 <__aeabi_dmul+0x134>
  404508:	f104 0414 	add.w	r4, r4, #20
  40450c:	f1c4 0520 	rsb	r5, r4, #32
  404510:	fa00 f305 	lsl.w	r3, r0, r5
  404514:	fa20 f004 	lsr.w	r0, r0, r4
  404518:	fa01 f205 	lsl.w	r2, r1, r5
  40451c:	ea40 0002 	orr.w	r0, r0, r2
  404520:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  404524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  404528:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40452c:	fa21 f604 	lsr.w	r6, r1, r4
  404530:	eb42 0106 	adc.w	r1, r2, r6
  404534:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404538:	bf08      	it	eq
  40453a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40453e:	bd70      	pop	{r4, r5, r6, pc}
  404540:	f1c4 040c 	rsb	r4, r4, #12
  404544:	f1c4 0520 	rsb	r5, r4, #32
  404548:	fa00 f304 	lsl.w	r3, r0, r4
  40454c:	fa20 f005 	lsr.w	r0, r0, r5
  404550:	fa01 f204 	lsl.w	r2, r1, r4
  404554:	ea40 0002 	orr.w	r0, r0, r2
  404558:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40455c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  404560:	f141 0100 	adc.w	r1, r1, #0
  404564:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404568:	bf08      	it	eq
  40456a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40456e:	bd70      	pop	{r4, r5, r6, pc}
  404570:	f1c4 0520 	rsb	r5, r4, #32
  404574:	fa00 f205 	lsl.w	r2, r0, r5
  404578:	ea4e 0e02 	orr.w	lr, lr, r2
  40457c:	fa20 f304 	lsr.w	r3, r0, r4
  404580:	fa01 f205 	lsl.w	r2, r1, r5
  404584:	ea43 0302 	orr.w	r3, r3, r2
  404588:	fa21 f004 	lsr.w	r0, r1, r4
  40458c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404590:	fa21 f204 	lsr.w	r2, r1, r4
  404594:	ea20 0002 	bic.w	r0, r0, r2
  404598:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40459c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4045a0:	bf08      	it	eq
  4045a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4045a6:	bd70      	pop	{r4, r5, r6, pc}
  4045a8:	f094 0f00 	teq	r4, #0
  4045ac:	d10f      	bne.n	4045ce <__aeabi_dmul+0x1c2>
  4045ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4045b2:	0040      	lsls	r0, r0, #1
  4045b4:	eb41 0101 	adc.w	r1, r1, r1
  4045b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4045bc:	bf08      	it	eq
  4045be:	3c01      	subeq	r4, #1
  4045c0:	d0f7      	beq.n	4045b2 <__aeabi_dmul+0x1a6>
  4045c2:	ea41 0106 	orr.w	r1, r1, r6
  4045c6:	f095 0f00 	teq	r5, #0
  4045ca:	bf18      	it	ne
  4045cc:	4770      	bxne	lr
  4045ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4045d2:	0052      	lsls	r2, r2, #1
  4045d4:	eb43 0303 	adc.w	r3, r3, r3
  4045d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4045dc:	bf08      	it	eq
  4045de:	3d01      	subeq	r5, #1
  4045e0:	d0f7      	beq.n	4045d2 <__aeabi_dmul+0x1c6>
  4045e2:	ea43 0306 	orr.w	r3, r3, r6
  4045e6:	4770      	bx	lr
  4045e8:	ea94 0f0c 	teq	r4, ip
  4045ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4045f0:	bf18      	it	ne
  4045f2:	ea95 0f0c 	teqne	r5, ip
  4045f6:	d00c      	beq.n	404612 <__aeabi_dmul+0x206>
  4045f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4045fc:	bf18      	it	ne
  4045fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404602:	d1d1      	bne.n	4045a8 <__aeabi_dmul+0x19c>
  404604:	ea81 0103 	eor.w	r1, r1, r3
  404608:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40460c:	f04f 0000 	mov.w	r0, #0
  404610:	bd70      	pop	{r4, r5, r6, pc}
  404612:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404616:	bf06      	itte	eq
  404618:	4610      	moveq	r0, r2
  40461a:	4619      	moveq	r1, r3
  40461c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404620:	d019      	beq.n	404656 <__aeabi_dmul+0x24a>
  404622:	ea94 0f0c 	teq	r4, ip
  404626:	d102      	bne.n	40462e <__aeabi_dmul+0x222>
  404628:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40462c:	d113      	bne.n	404656 <__aeabi_dmul+0x24a>
  40462e:	ea95 0f0c 	teq	r5, ip
  404632:	d105      	bne.n	404640 <__aeabi_dmul+0x234>
  404634:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  404638:	bf1c      	itt	ne
  40463a:	4610      	movne	r0, r2
  40463c:	4619      	movne	r1, r3
  40463e:	d10a      	bne.n	404656 <__aeabi_dmul+0x24a>
  404640:	ea81 0103 	eor.w	r1, r1, r3
  404644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404648:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40464c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  404650:	f04f 0000 	mov.w	r0, #0
  404654:	bd70      	pop	{r4, r5, r6, pc}
  404656:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40465a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40465e:	bd70      	pop	{r4, r5, r6, pc}

00404660 <__aeabi_ddiv>:
  404660:	b570      	push	{r4, r5, r6, lr}
  404662:	f04f 0cff 	mov.w	ip, #255	; 0xff
  404666:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40466a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40466e:	bf1d      	ittte	ne
  404670:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  404674:	ea94 0f0c 	teqne	r4, ip
  404678:	ea95 0f0c 	teqne	r5, ip
  40467c:	f000 f8a7 	bleq	4047ce <__aeabi_ddiv+0x16e>
  404680:	eba4 0405 	sub.w	r4, r4, r5
  404684:	ea81 0e03 	eor.w	lr, r1, r3
  404688:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40468c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  404690:	f000 8088 	beq.w	4047a4 <__aeabi_ddiv+0x144>
  404694:	ea4f 3303 	mov.w	r3, r3, lsl #12
  404698:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40469c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4046a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4046a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4046a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4046ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4046b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4046b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4046b8:	429d      	cmp	r5, r3
  4046ba:	bf08      	it	eq
  4046bc:	4296      	cmpeq	r6, r2
  4046be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4046c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4046c6:	d202      	bcs.n	4046ce <__aeabi_ddiv+0x6e>
  4046c8:	085b      	lsrs	r3, r3, #1
  4046ca:	ea4f 0232 	mov.w	r2, r2, rrx
  4046ce:	1ab6      	subs	r6, r6, r2
  4046d0:	eb65 0503 	sbc.w	r5, r5, r3
  4046d4:	085b      	lsrs	r3, r3, #1
  4046d6:	ea4f 0232 	mov.w	r2, r2, rrx
  4046da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4046de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4046e2:	ebb6 0e02 	subs.w	lr, r6, r2
  4046e6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4046ea:	bf22      	ittt	cs
  4046ec:	1ab6      	subcs	r6, r6, r2
  4046ee:	4675      	movcs	r5, lr
  4046f0:	ea40 000c 	orrcs.w	r0, r0, ip
  4046f4:	085b      	lsrs	r3, r3, #1
  4046f6:	ea4f 0232 	mov.w	r2, r2, rrx
  4046fa:	ebb6 0e02 	subs.w	lr, r6, r2
  4046fe:	eb75 0e03 	sbcs.w	lr, r5, r3
  404702:	bf22      	ittt	cs
  404704:	1ab6      	subcs	r6, r6, r2
  404706:	4675      	movcs	r5, lr
  404708:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40470c:	085b      	lsrs	r3, r3, #1
  40470e:	ea4f 0232 	mov.w	r2, r2, rrx
  404712:	ebb6 0e02 	subs.w	lr, r6, r2
  404716:	eb75 0e03 	sbcs.w	lr, r5, r3
  40471a:	bf22      	ittt	cs
  40471c:	1ab6      	subcs	r6, r6, r2
  40471e:	4675      	movcs	r5, lr
  404720:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  404724:	085b      	lsrs	r3, r3, #1
  404726:	ea4f 0232 	mov.w	r2, r2, rrx
  40472a:	ebb6 0e02 	subs.w	lr, r6, r2
  40472e:	eb75 0e03 	sbcs.w	lr, r5, r3
  404732:	bf22      	ittt	cs
  404734:	1ab6      	subcs	r6, r6, r2
  404736:	4675      	movcs	r5, lr
  404738:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40473c:	ea55 0e06 	orrs.w	lr, r5, r6
  404740:	d018      	beq.n	404774 <__aeabi_ddiv+0x114>
  404742:	ea4f 1505 	mov.w	r5, r5, lsl #4
  404746:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40474a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40474e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  404752:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  404756:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40475a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40475e:	d1c0      	bne.n	4046e2 <__aeabi_ddiv+0x82>
  404760:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404764:	d10b      	bne.n	40477e <__aeabi_ddiv+0x11e>
  404766:	ea41 0100 	orr.w	r1, r1, r0
  40476a:	f04f 0000 	mov.w	r0, #0
  40476e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  404772:	e7b6      	b.n	4046e2 <__aeabi_ddiv+0x82>
  404774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404778:	bf04      	itt	eq
  40477a:	4301      	orreq	r1, r0
  40477c:	2000      	moveq	r0, #0
  40477e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  404782:	bf88      	it	hi
  404784:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  404788:	f63f aeaf 	bhi.w	4044ea <__aeabi_dmul+0xde>
  40478c:	ebb5 0c03 	subs.w	ip, r5, r3
  404790:	bf04      	itt	eq
  404792:	ebb6 0c02 	subseq.w	ip, r6, r2
  404796:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40479a:	f150 0000 	adcs.w	r0, r0, #0
  40479e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4047a2:	bd70      	pop	{r4, r5, r6, pc}
  4047a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4047a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4047ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4047b0:	bfc2      	ittt	gt
  4047b2:	ebd4 050c 	rsbsgt	r5, r4, ip
  4047b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4047ba:	bd70      	popgt	{r4, r5, r6, pc}
  4047bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4047c0:	f04f 0e00 	mov.w	lr, #0
  4047c4:	3c01      	subs	r4, #1
  4047c6:	e690      	b.n	4044ea <__aeabi_dmul+0xde>
  4047c8:	ea45 0e06 	orr.w	lr, r5, r6
  4047cc:	e68d      	b.n	4044ea <__aeabi_dmul+0xde>
  4047ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4047d2:	ea94 0f0c 	teq	r4, ip
  4047d6:	bf08      	it	eq
  4047d8:	ea95 0f0c 	teqeq	r5, ip
  4047dc:	f43f af3b 	beq.w	404656 <__aeabi_dmul+0x24a>
  4047e0:	ea94 0f0c 	teq	r4, ip
  4047e4:	d10a      	bne.n	4047fc <__aeabi_ddiv+0x19c>
  4047e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4047ea:	f47f af34 	bne.w	404656 <__aeabi_dmul+0x24a>
  4047ee:	ea95 0f0c 	teq	r5, ip
  4047f2:	f47f af25 	bne.w	404640 <__aeabi_dmul+0x234>
  4047f6:	4610      	mov	r0, r2
  4047f8:	4619      	mov	r1, r3
  4047fa:	e72c      	b.n	404656 <__aeabi_dmul+0x24a>
  4047fc:	ea95 0f0c 	teq	r5, ip
  404800:	d106      	bne.n	404810 <__aeabi_ddiv+0x1b0>
  404802:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  404806:	f43f aefd 	beq.w	404604 <__aeabi_dmul+0x1f8>
  40480a:	4610      	mov	r0, r2
  40480c:	4619      	mov	r1, r3
  40480e:	e722      	b.n	404656 <__aeabi_dmul+0x24a>
  404810:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404814:	bf18      	it	ne
  404816:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40481a:	f47f aec5 	bne.w	4045a8 <__aeabi_dmul+0x19c>
  40481e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  404822:	f47f af0d 	bne.w	404640 <__aeabi_dmul+0x234>
  404826:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40482a:	f47f aeeb 	bne.w	404604 <__aeabi_dmul+0x1f8>
  40482e:	e712      	b.n	404656 <__aeabi_dmul+0x24a>

00404830 <__aeabi_d2f>:
  404830:	ea4f 0241 	mov.w	r2, r1, lsl #1
  404834:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  404838:	bf24      	itt	cs
  40483a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40483e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  404842:	d90d      	bls.n	404860 <__aeabi_d2f+0x30>
  404844:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  404848:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  40484c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  404850:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  404854:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  404858:	bf08      	it	eq
  40485a:	f020 0001 	biceq.w	r0, r0, #1
  40485e:	4770      	bx	lr
  404860:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  404864:	d121      	bne.n	4048aa <__aeabi_d2f+0x7a>
  404866:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  40486a:	bfbc      	itt	lt
  40486c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  404870:	4770      	bxlt	lr
  404872:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404876:	ea4f 5252 	mov.w	r2, r2, lsr #21
  40487a:	f1c2 0218 	rsb	r2, r2, #24
  40487e:	f1c2 0c20 	rsb	ip, r2, #32
  404882:	fa10 f30c 	lsls.w	r3, r0, ip
  404886:	fa20 f002 	lsr.w	r0, r0, r2
  40488a:	bf18      	it	ne
  40488c:	f040 0001 	orrne.w	r0, r0, #1
  404890:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  404894:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  404898:	fa03 fc0c 	lsl.w	ip, r3, ip
  40489c:	ea40 000c 	orr.w	r0, r0, ip
  4048a0:	fa23 f302 	lsr.w	r3, r3, r2
  4048a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
  4048a8:	e7cc      	b.n	404844 <__aeabi_d2f+0x14>
  4048aa:	ea7f 5362 	mvns.w	r3, r2, asr #21
  4048ae:	d107      	bne.n	4048c0 <__aeabi_d2f+0x90>
  4048b0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  4048b4:	bf1e      	ittt	ne
  4048b6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  4048ba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  4048be:	4770      	bxne	lr
  4048c0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  4048c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4048c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4048cc:	4770      	bx	lr
  4048ce:	bf00      	nop

004048d0 <__errno>:
  4048d0:	4b01      	ldr	r3, [pc, #4]	; (4048d8 <__errno+0x8>)
  4048d2:	6818      	ldr	r0, [r3, #0]
  4048d4:	4770      	bx	lr
  4048d6:	bf00      	nop
  4048d8:	20400050 	.word	0x20400050

004048dc <__libc_init_array>:
  4048dc:	b570      	push	{r4, r5, r6, lr}
  4048de:	4e0f      	ldr	r6, [pc, #60]	; (40491c <__libc_init_array+0x40>)
  4048e0:	4d0f      	ldr	r5, [pc, #60]	; (404920 <__libc_init_array+0x44>)
  4048e2:	1b76      	subs	r6, r6, r5
  4048e4:	10b6      	asrs	r6, r6, #2
  4048e6:	bf18      	it	ne
  4048e8:	2400      	movne	r4, #0
  4048ea:	d005      	beq.n	4048f8 <__libc_init_array+0x1c>
  4048ec:	3401      	adds	r4, #1
  4048ee:	f855 3b04 	ldr.w	r3, [r5], #4
  4048f2:	4798      	blx	r3
  4048f4:	42a6      	cmp	r6, r4
  4048f6:	d1f9      	bne.n	4048ec <__libc_init_array+0x10>
  4048f8:	4e0a      	ldr	r6, [pc, #40]	; (404924 <__libc_init_array+0x48>)
  4048fa:	4d0b      	ldr	r5, [pc, #44]	; (404928 <__libc_init_array+0x4c>)
  4048fc:	1b76      	subs	r6, r6, r5
  4048fe:	f003 fcc9 	bl	408294 <_init>
  404902:	10b6      	asrs	r6, r6, #2
  404904:	bf18      	it	ne
  404906:	2400      	movne	r4, #0
  404908:	d006      	beq.n	404918 <__libc_init_array+0x3c>
  40490a:	3401      	adds	r4, #1
  40490c:	f855 3b04 	ldr.w	r3, [r5], #4
  404910:	4798      	blx	r3
  404912:	42a6      	cmp	r6, r4
  404914:	d1f9      	bne.n	40490a <__libc_init_array+0x2e>
  404916:	bd70      	pop	{r4, r5, r6, pc}
  404918:	bd70      	pop	{r4, r5, r6, pc}
  40491a:	bf00      	nop
  40491c:	004082a0 	.word	0x004082a0
  404920:	004082a0 	.word	0x004082a0
  404924:	004082a8 	.word	0x004082a8
  404928:	004082a0 	.word	0x004082a0

0040492c <iprintf>:
  40492c:	b40f      	push	{r0, r1, r2, r3}
  40492e:	b500      	push	{lr}
  404930:	4907      	ldr	r1, [pc, #28]	; (404950 <iprintf+0x24>)
  404932:	b083      	sub	sp, #12
  404934:	ab04      	add	r3, sp, #16
  404936:	6808      	ldr	r0, [r1, #0]
  404938:	f853 2b04 	ldr.w	r2, [r3], #4
  40493c:	6881      	ldr	r1, [r0, #8]
  40493e:	9301      	str	r3, [sp, #4]
  404940:	f000 fc06 	bl	405150 <_vfiprintf_r>
  404944:	b003      	add	sp, #12
  404946:	f85d eb04 	ldr.w	lr, [sp], #4
  40494a:	b004      	add	sp, #16
  40494c:	4770      	bx	lr
  40494e:	bf00      	nop
  404950:	20400050 	.word	0x20400050

00404954 <malloc>:
  404954:	4b02      	ldr	r3, [pc, #8]	; (404960 <malloc+0xc>)
  404956:	4601      	mov	r1, r0
  404958:	6818      	ldr	r0, [r3, #0]
  40495a:	f000 b803 	b.w	404964 <_malloc_r>
  40495e:	bf00      	nop
  404960:	20400050 	.word	0x20400050

00404964 <_malloc_r>:
  404964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404968:	f101 060b 	add.w	r6, r1, #11
  40496c:	2e16      	cmp	r6, #22
  40496e:	b083      	sub	sp, #12
  404970:	4605      	mov	r5, r0
  404972:	f240 809e 	bls.w	404ab2 <_malloc_r+0x14e>
  404976:	f036 0607 	bics.w	r6, r6, #7
  40497a:	f100 80bd 	bmi.w	404af8 <_malloc_r+0x194>
  40497e:	42b1      	cmp	r1, r6
  404980:	f200 80ba 	bhi.w	404af8 <_malloc_r+0x194>
  404984:	f000 fb86 	bl	405094 <__malloc_lock>
  404988:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40498c:	f0c0 8293 	bcc.w	404eb6 <_malloc_r+0x552>
  404990:	0a73      	lsrs	r3, r6, #9
  404992:	f000 80b8 	beq.w	404b06 <_malloc_r+0x1a2>
  404996:	2b04      	cmp	r3, #4
  404998:	f200 8179 	bhi.w	404c8e <_malloc_r+0x32a>
  40499c:	09b3      	lsrs	r3, r6, #6
  40499e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4049a2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4049a6:	00c3      	lsls	r3, r0, #3
  4049a8:	4fbf      	ldr	r7, [pc, #764]	; (404ca8 <_malloc_r+0x344>)
  4049aa:	443b      	add	r3, r7
  4049ac:	f1a3 0108 	sub.w	r1, r3, #8
  4049b0:	685c      	ldr	r4, [r3, #4]
  4049b2:	42a1      	cmp	r1, r4
  4049b4:	d106      	bne.n	4049c4 <_malloc_r+0x60>
  4049b6:	e00c      	b.n	4049d2 <_malloc_r+0x6e>
  4049b8:	2a00      	cmp	r2, #0
  4049ba:	f280 80aa 	bge.w	404b12 <_malloc_r+0x1ae>
  4049be:	68e4      	ldr	r4, [r4, #12]
  4049c0:	42a1      	cmp	r1, r4
  4049c2:	d006      	beq.n	4049d2 <_malloc_r+0x6e>
  4049c4:	6863      	ldr	r3, [r4, #4]
  4049c6:	f023 0303 	bic.w	r3, r3, #3
  4049ca:	1b9a      	subs	r2, r3, r6
  4049cc:	2a0f      	cmp	r2, #15
  4049ce:	ddf3      	ble.n	4049b8 <_malloc_r+0x54>
  4049d0:	4670      	mov	r0, lr
  4049d2:	693c      	ldr	r4, [r7, #16]
  4049d4:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 404cbc <_malloc_r+0x358>
  4049d8:	4574      	cmp	r4, lr
  4049da:	f000 81ab 	beq.w	404d34 <_malloc_r+0x3d0>
  4049de:	6863      	ldr	r3, [r4, #4]
  4049e0:	f023 0303 	bic.w	r3, r3, #3
  4049e4:	1b9a      	subs	r2, r3, r6
  4049e6:	2a0f      	cmp	r2, #15
  4049e8:	f300 8190 	bgt.w	404d0c <_malloc_r+0x3a8>
  4049ec:	2a00      	cmp	r2, #0
  4049ee:	f8c7 e014 	str.w	lr, [r7, #20]
  4049f2:	f8c7 e010 	str.w	lr, [r7, #16]
  4049f6:	f280 809d 	bge.w	404b34 <_malloc_r+0x1d0>
  4049fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4049fe:	f080 8161 	bcs.w	404cc4 <_malloc_r+0x360>
  404a02:	08db      	lsrs	r3, r3, #3
  404a04:	f103 0c01 	add.w	ip, r3, #1
  404a08:	1099      	asrs	r1, r3, #2
  404a0a:	687a      	ldr	r2, [r7, #4]
  404a0c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  404a10:	f8c4 8008 	str.w	r8, [r4, #8]
  404a14:	2301      	movs	r3, #1
  404a16:	408b      	lsls	r3, r1
  404a18:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  404a1c:	4313      	orrs	r3, r2
  404a1e:	3908      	subs	r1, #8
  404a20:	60e1      	str	r1, [r4, #12]
  404a22:	607b      	str	r3, [r7, #4]
  404a24:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  404a28:	f8c8 400c 	str.w	r4, [r8, #12]
  404a2c:	1082      	asrs	r2, r0, #2
  404a2e:	2401      	movs	r4, #1
  404a30:	4094      	lsls	r4, r2
  404a32:	429c      	cmp	r4, r3
  404a34:	f200 808b 	bhi.w	404b4e <_malloc_r+0x1ea>
  404a38:	421c      	tst	r4, r3
  404a3a:	d106      	bne.n	404a4a <_malloc_r+0xe6>
  404a3c:	f020 0003 	bic.w	r0, r0, #3
  404a40:	0064      	lsls	r4, r4, #1
  404a42:	421c      	tst	r4, r3
  404a44:	f100 0004 	add.w	r0, r0, #4
  404a48:	d0fa      	beq.n	404a40 <_malloc_r+0xdc>
  404a4a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  404a4e:	46cc      	mov	ip, r9
  404a50:	4680      	mov	r8, r0
  404a52:	f8dc 300c 	ldr.w	r3, [ip, #12]
  404a56:	459c      	cmp	ip, r3
  404a58:	d107      	bne.n	404a6a <_malloc_r+0x106>
  404a5a:	e16d      	b.n	404d38 <_malloc_r+0x3d4>
  404a5c:	2a00      	cmp	r2, #0
  404a5e:	f280 817b 	bge.w	404d58 <_malloc_r+0x3f4>
  404a62:	68db      	ldr	r3, [r3, #12]
  404a64:	459c      	cmp	ip, r3
  404a66:	f000 8167 	beq.w	404d38 <_malloc_r+0x3d4>
  404a6a:	6859      	ldr	r1, [r3, #4]
  404a6c:	f021 0103 	bic.w	r1, r1, #3
  404a70:	1b8a      	subs	r2, r1, r6
  404a72:	2a0f      	cmp	r2, #15
  404a74:	ddf2      	ble.n	404a5c <_malloc_r+0xf8>
  404a76:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  404a7a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  404a7e:	9300      	str	r3, [sp, #0]
  404a80:	199c      	adds	r4, r3, r6
  404a82:	4628      	mov	r0, r5
  404a84:	f046 0601 	orr.w	r6, r6, #1
  404a88:	f042 0501 	orr.w	r5, r2, #1
  404a8c:	605e      	str	r6, [r3, #4]
  404a8e:	f8c8 c00c 	str.w	ip, [r8, #12]
  404a92:	f8cc 8008 	str.w	r8, [ip, #8]
  404a96:	617c      	str	r4, [r7, #20]
  404a98:	613c      	str	r4, [r7, #16]
  404a9a:	f8c4 e00c 	str.w	lr, [r4, #12]
  404a9e:	f8c4 e008 	str.w	lr, [r4, #8]
  404aa2:	6065      	str	r5, [r4, #4]
  404aa4:	505a      	str	r2, [r3, r1]
  404aa6:	f000 fafb 	bl	4050a0 <__malloc_unlock>
  404aaa:	9b00      	ldr	r3, [sp, #0]
  404aac:	f103 0408 	add.w	r4, r3, #8
  404ab0:	e01e      	b.n	404af0 <_malloc_r+0x18c>
  404ab2:	2910      	cmp	r1, #16
  404ab4:	d820      	bhi.n	404af8 <_malloc_r+0x194>
  404ab6:	f000 faed 	bl	405094 <__malloc_lock>
  404aba:	2610      	movs	r6, #16
  404abc:	2318      	movs	r3, #24
  404abe:	2002      	movs	r0, #2
  404ac0:	4f79      	ldr	r7, [pc, #484]	; (404ca8 <_malloc_r+0x344>)
  404ac2:	443b      	add	r3, r7
  404ac4:	f1a3 0208 	sub.w	r2, r3, #8
  404ac8:	685c      	ldr	r4, [r3, #4]
  404aca:	4294      	cmp	r4, r2
  404acc:	f000 813d 	beq.w	404d4a <_malloc_r+0x3e6>
  404ad0:	6863      	ldr	r3, [r4, #4]
  404ad2:	68e1      	ldr	r1, [r4, #12]
  404ad4:	68a6      	ldr	r6, [r4, #8]
  404ad6:	f023 0303 	bic.w	r3, r3, #3
  404ada:	4423      	add	r3, r4
  404adc:	4628      	mov	r0, r5
  404ade:	685a      	ldr	r2, [r3, #4]
  404ae0:	60f1      	str	r1, [r6, #12]
  404ae2:	f042 0201 	orr.w	r2, r2, #1
  404ae6:	608e      	str	r6, [r1, #8]
  404ae8:	605a      	str	r2, [r3, #4]
  404aea:	f000 fad9 	bl	4050a0 <__malloc_unlock>
  404aee:	3408      	adds	r4, #8
  404af0:	4620      	mov	r0, r4
  404af2:	b003      	add	sp, #12
  404af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404af8:	2400      	movs	r4, #0
  404afa:	230c      	movs	r3, #12
  404afc:	4620      	mov	r0, r4
  404afe:	602b      	str	r3, [r5, #0]
  404b00:	b003      	add	sp, #12
  404b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b06:	2040      	movs	r0, #64	; 0x40
  404b08:	f44f 7300 	mov.w	r3, #512	; 0x200
  404b0c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  404b10:	e74a      	b.n	4049a8 <_malloc_r+0x44>
  404b12:	4423      	add	r3, r4
  404b14:	68e1      	ldr	r1, [r4, #12]
  404b16:	685a      	ldr	r2, [r3, #4]
  404b18:	68a6      	ldr	r6, [r4, #8]
  404b1a:	f042 0201 	orr.w	r2, r2, #1
  404b1e:	60f1      	str	r1, [r6, #12]
  404b20:	4628      	mov	r0, r5
  404b22:	608e      	str	r6, [r1, #8]
  404b24:	605a      	str	r2, [r3, #4]
  404b26:	f000 fabb 	bl	4050a0 <__malloc_unlock>
  404b2a:	3408      	adds	r4, #8
  404b2c:	4620      	mov	r0, r4
  404b2e:	b003      	add	sp, #12
  404b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b34:	4423      	add	r3, r4
  404b36:	4628      	mov	r0, r5
  404b38:	685a      	ldr	r2, [r3, #4]
  404b3a:	f042 0201 	orr.w	r2, r2, #1
  404b3e:	605a      	str	r2, [r3, #4]
  404b40:	f000 faae 	bl	4050a0 <__malloc_unlock>
  404b44:	3408      	adds	r4, #8
  404b46:	4620      	mov	r0, r4
  404b48:	b003      	add	sp, #12
  404b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b4e:	68bc      	ldr	r4, [r7, #8]
  404b50:	6863      	ldr	r3, [r4, #4]
  404b52:	f023 0803 	bic.w	r8, r3, #3
  404b56:	45b0      	cmp	r8, r6
  404b58:	d304      	bcc.n	404b64 <_malloc_r+0x200>
  404b5a:	eba8 0306 	sub.w	r3, r8, r6
  404b5e:	2b0f      	cmp	r3, #15
  404b60:	f300 8085 	bgt.w	404c6e <_malloc_r+0x30a>
  404b64:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404cc0 <_malloc_r+0x35c>
  404b68:	4b50      	ldr	r3, [pc, #320]	; (404cac <_malloc_r+0x348>)
  404b6a:	f8d9 2000 	ldr.w	r2, [r9]
  404b6e:	681b      	ldr	r3, [r3, #0]
  404b70:	3201      	adds	r2, #1
  404b72:	4433      	add	r3, r6
  404b74:	eb04 0a08 	add.w	sl, r4, r8
  404b78:	f000 8155 	beq.w	404e26 <_malloc_r+0x4c2>
  404b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  404b80:	330f      	adds	r3, #15
  404b82:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  404b86:	f02b 0b0f 	bic.w	fp, fp, #15
  404b8a:	4659      	mov	r1, fp
  404b8c:	4628      	mov	r0, r5
  404b8e:	f000 fa8d 	bl	4050ac <_sbrk_r>
  404b92:	1c41      	adds	r1, r0, #1
  404b94:	4602      	mov	r2, r0
  404b96:	f000 80fc 	beq.w	404d92 <_malloc_r+0x42e>
  404b9a:	4582      	cmp	sl, r0
  404b9c:	f200 80f7 	bhi.w	404d8e <_malloc_r+0x42a>
  404ba0:	4b43      	ldr	r3, [pc, #268]	; (404cb0 <_malloc_r+0x34c>)
  404ba2:	6819      	ldr	r1, [r3, #0]
  404ba4:	4459      	add	r1, fp
  404ba6:	6019      	str	r1, [r3, #0]
  404ba8:	f000 814d 	beq.w	404e46 <_malloc_r+0x4e2>
  404bac:	f8d9 0000 	ldr.w	r0, [r9]
  404bb0:	3001      	adds	r0, #1
  404bb2:	bf1b      	ittet	ne
  404bb4:	eba2 0a0a 	subne.w	sl, r2, sl
  404bb8:	4451      	addne	r1, sl
  404bba:	f8c9 2000 	streq.w	r2, [r9]
  404bbe:	6019      	strne	r1, [r3, #0]
  404bc0:	f012 0107 	ands.w	r1, r2, #7
  404bc4:	f000 8115 	beq.w	404df2 <_malloc_r+0x48e>
  404bc8:	f1c1 0008 	rsb	r0, r1, #8
  404bcc:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404bd0:	4402      	add	r2, r0
  404bd2:	3108      	adds	r1, #8
  404bd4:	eb02 090b 	add.w	r9, r2, fp
  404bd8:	f3c9 090b 	ubfx	r9, r9, #0, #12
  404bdc:	eba1 0909 	sub.w	r9, r1, r9
  404be0:	4649      	mov	r1, r9
  404be2:	4628      	mov	r0, r5
  404be4:	9301      	str	r3, [sp, #4]
  404be6:	9200      	str	r2, [sp, #0]
  404be8:	f000 fa60 	bl	4050ac <_sbrk_r>
  404bec:	1c43      	adds	r3, r0, #1
  404bee:	e89d 000c 	ldmia.w	sp, {r2, r3}
  404bf2:	f000 8143 	beq.w	404e7c <_malloc_r+0x518>
  404bf6:	1a80      	subs	r0, r0, r2
  404bf8:	4448      	add	r0, r9
  404bfa:	f040 0001 	orr.w	r0, r0, #1
  404bfe:	6819      	ldr	r1, [r3, #0]
  404c00:	60ba      	str	r2, [r7, #8]
  404c02:	4449      	add	r1, r9
  404c04:	42bc      	cmp	r4, r7
  404c06:	6050      	str	r0, [r2, #4]
  404c08:	6019      	str	r1, [r3, #0]
  404c0a:	d017      	beq.n	404c3c <_malloc_r+0x2d8>
  404c0c:	f1b8 0f0f 	cmp.w	r8, #15
  404c10:	f240 80fb 	bls.w	404e0a <_malloc_r+0x4a6>
  404c14:	6860      	ldr	r0, [r4, #4]
  404c16:	f1a8 020c 	sub.w	r2, r8, #12
  404c1a:	f022 0207 	bic.w	r2, r2, #7
  404c1e:	eb04 0e02 	add.w	lr, r4, r2
  404c22:	f000 0001 	and.w	r0, r0, #1
  404c26:	f04f 0c05 	mov.w	ip, #5
  404c2a:	4310      	orrs	r0, r2
  404c2c:	2a0f      	cmp	r2, #15
  404c2e:	6060      	str	r0, [r4, #4]
  404c30:	f8ce c004 	str.w	ip, [lr, #4]
  404c34:	f8ce c008 	str.w	ip, [lr, #8]
  404c38:	f200 8117 	bhi.w	404e6a <_malloc_r+0x506>
  404c3c:	4b1d      	ldr	r3, [pc, #116]	; (404cb4 <_malloc_r+0x350>)
  404c3e:	68bc      	ldr	r4, [r7, #8]
  404c40:	681a      	ldr	r2, [r3, #0]
  404c42:	4291      	cmp	r1, r2
  404c44:	bf88      	it	hi
  404c46:	6019      	strhi	r1, [r3, #0]
  404c48:	4b1b      	ldr	r3, [pc, #108]	; (404cb8 <_malloc_r+0x354>)
  404c4a:	681a      	ldr	r2, [r3, #0]
  404c4c:	4291      	cmp	r1, r2
  404c4e:	6862      	ldr	r2, [r4, #4]
  404c50:	bf88      	it	hi
  404c52:	6019      	strhi	r1, [r3, #0]
  404c54:	f022 0203 	bic.w	r2, r2, #3
  404c58:	4296      	cmp	r6, r2
  404c5a:	eba2 0306 	sub.w	r3, r2, r6
  404c5e:	d801      	bhi.n	404c64 <_malloc_r+0x300>
  404c60:	2b0f      	cmp	r3, #15
  404c62:	dc04      	bgt.n	404c6e <_malloc_r+0x30a>
  404c64:	4628      	mov	r0, r5
  404c66:	f000 fa1b 	bl	4050a0 <__malloc_unlock>
  404c6a:	2400      	movs	r4, #0
  404c6c:	e740      	b.n	404af0 <_malloc_r+0x18c>
  404c6e:	19a2      	adds	r2, r4, r6
  404c70:	f043 0301 	orr.w	r3, r3, #1
  404c74:	f046 0601 	orr.w	r6, r6, #1
  404c78:	6066      	str	r6, [r4, #4]
  404c7a:	4628      	mov	r0, r5
  404c7c:	60ba      	str	r2, [r7, #8]
  404c7e:	6053      	str	r3, [r2, #4]
  404c80:	f000 fa0e 	bl	4050a0 <__malloc_unlock>
  404c84:	3408      	adds	r4, #8
  404c86:	4620      	mov	r0, r4
  404c88:	b003      	add	sp, #12
  404c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404c8e:	2b14      	cmp	r3, #20
  404c90:	d971      	bls.n	404d76 <_malloc_r+0x412>
  404c92:	2b54      	cmp	r3, #84	; 0x54
  404c94:	f200 80a3 	bhi.w	404dde <_malloc_r+0x47a>
  404c98:	0b33      	lsrs	r3, r6, #12
  404c9a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  404c9e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  404ca2:	00c3      	lsls	r3, r0, #3
  404ca4:	e680      	b.n	4049a8 <_malloc_r+0x44>
  404ca6:	bf00      	nop
  404ca8:	20400480 	.word	0x20400480
  404cac:	2044503c 	.word	0x2044503c
  404cb0:	2044500c 	.word	0x2044500c
  404cb4:	20445034 	.word	0x20445034
  404cb8:	20445038 	.word	0x20445038
  404cbc:	20400488 	.word	0x20400488
  404cc0:	20400888 	.word	0x20400888
  404cc4:	0a5a      	lsrs	r2, r3, #9
  404cc6:	2a04      	cmp	r2, #4
  404cc8:	d95b      	bls.n	404d82 <_malloc_r+0x41e>
  404cca:	2a14      	cmp	r2, #20
  404ccc:	f200 80ae 	bhi.w	404e2c <_malloc_r+0x4c8>
  404cd0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404cd4:	00c9      	lsls	r1, r1, #3
  404cd6:	325b      	adds	r2, #91	; 0x5b
  404cd8:	eb07 0c01 	add.w	ip, r7, r1
  404cdc:	5879      	ldr	r1, [r7, r1]
  404cde:	f1ac 0c08 	sub.w	ip, ip, #8
  404ce2:	458c      	cmp	ip, r1
  404ce4:	f000 8088 	beq.w	404df8 <_malloc_r+0x494>
  404ce8:	684a      	ldr	r2, [r1, #4]
  404cea:	f022 0203 	bic.w	r2, r2, #3
  404cee:	4293      	cmp	r3, r2
  404cf0:	d273      	bcs.n	404dda <_malloc_r+0x476>
  404cf2:	6889      	ldr	r1, [r1, #8]
  404cf4:	458c      	cmp	ip, r1
  404cf6:	d1f7      	bne.n	404ce8 <_malloc_r+0x384>
  404cf8:	f8dc 200c 	ldr.w	r2, [ip, #12]
  404cfc:	687b      	ldr	r3, [r7, #4]
  404cfe:	60e2      	str	r2, [r4, #12]
  404d00:	f8c4 c008 	str.w	ip, [r4, #8]
  404d04:	6094      	str	r4, [r2, #8]
  404d06:	f8cc 400c 	str.w	r4, [ip, #12]
  404d0a:	e68f      	b.n	404a2c <_malloc_r+0xc8>
  404d0c:	19a1      	adds	r1, r4, r6
  404d0e:	f046 0c01 	orr.w	ip, r6, #1
  404d12:	f042 0601 	orr.w	r6, r2, #1
  404d16:	f8c4 c004 	str.w	ip, [r4, #4]
  404d1a:	4628      	mov	r0, r5
  404d1c:	6179      	str	r1, [r7, #20]
  404d1e:	6139      	str	r1, [r7, #16]
  404d20:	f8c1 e00c 	str.w	lr, [r1, #12]
  404d24:	f8c1 e008 	str.w	lr, [r1, #8]
  404d28:	604e      	str	r6, [r1, #4]
  404d2a:	50e2      	str	r2, [r4, r3]
  404d2c:	f000 f9b8 	bl	4050a0 <__malloc_unlock>
  404d30:	3408      	adds	r4, #8
  404d32:	e6dd      	b.n	404af0 <_malloc_r+0x18c>
  404d34:	687b      	ldr	r3, [r7, #4]
  404d36:	e679      	b.n	404a2c <_malloc_r+0xc8>
  404d38:	f108 0801 	add.w	r8, r8, #1
  404d3c:	f018 0f03 	tst.w	r8, #3
  404d40:	f10c 0c08 	add.w	ip, ip, #8
  404d44:	f47f ae85 	bne.w	404a52 <_malloc_r+0xee>
  404d48:	e02d      	b.n	404da6 <_malloc_r+0x442>
  404d4a:	68dc      	ldr	r4, [r3, #12]
  404d4c:	42a3      	cmp	r3, r4
  404d4e:	bf08      	it	eq
  404d50:	3002      	addeq	r0, #2
  404d52:	f43f ae3e 	beq.w	4049d2 <_malloc_r+0x6e>
  404d56:	e6bb      	b.n	404ad0 <_malloc_r+0x16c>
  404d58:	4419      	add	r1, r3
  404d5a:	461c      	mov	r4, r3
  404d5c:	684a      	ldr	r2, [r1, #4]
  404d5e:	68db      	ldr	r3, [r3, #12]
  404d60:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404d64:	f042 0201 	orr.w	r2, r2, #1
  404d68:	604a      	str	r2, [r1, #4]
  404d6a:	4628      	mov	r0, r5
  404d6c:	60f3      	str	r3, [r6, #12]
  404d6e:	609e      	str	r6, [r3, #8]
  404d70:	f000 f996 	bl	4050a0 <__malloc_unlock>
  404d74:	e6bc      	b.n	404af0 <_malloc_r+0x18c>
  404d76:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  404d7a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  404d7e:	00c3      	lsls	r3, r0, #3
  404d80:	e612      	b.n	4049a8 <_malloc_r+0x44>
  404d82:	099a      	lsrs	r2, r3, #6
  404d84:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404d88:	00c9      	lsls	r1, r1, #3
  404d8a:	3238      	adds	r2, #56	; 0x38
  404d8c:	e7a4      	b.n	404cd8 <_malloc_r+0x374>
  404d8e:	42bc      	cmp	r4, r7
  404d90:	d054      	beq.n	404e3c <_malloc_r+0x4d8>
  404d92:	68bc      	ldr	r4, [r7, #8]
  404d94:	6862      	ldr	r2, [r4, #4]
  404d96:	f022 0203 	bic.w	r2, r2, #3
  404d9a:	e75d      	b.n	404c58 <_malloc_r+0x2f4>
  404d9c:	f859 3908 	ldr.w	r3, [r9], #-8
  404da0:	4599      	cmp	r9, r3
  404da2:	f040 8086 	bne.w	404eb2 <_malloc_r+0x54e>
  404da6:	f010 0f03 	tst.w	r0, #3
  404daa:	f100 30ff 	add.w	r0, r0, #4294967295
  404dae:	d1f5      	bne.n	404d9c <_malloc_r+0x438>
  404db0:	687b      	ldr	r3, [r7, #4]
  404db2:	ea23 0304 	bic.w	r3, r3, r4
  404db6:	607b      	str	r3, [r7, #4]
  404db8:	0064      	lsls	r4, r4, #1
  404dba:	429c      	cmp	r4, r3
  404dbc:	f63f aec7 	bhi.w	404b4e <_malloc_r+0x1ea>
  404dc0:	2c00      	cmp	r4, #0
  404dc2:	f43f aec4 	beq.w	404b4e <_malloc_r+0x1ea>
  404dc6:	421c      	tst	r4, r3
  404dc8:	4640      	mov	r0, r8
  404dca:	f47f ae3e 	bne.w	404a4a <_malloc_r+0xe6>
  404dce:	0064      	lsls	r4, r4, #1
  404dd0:	421c      	tst	r4, r3
  404dd2:	f100 0004 	add.w	r0, r0, #4
  404dd6:	d0fa      	beq.n	404dce <_malloc_r+0x46a>
  404dd8:	e637      	b.n	404a4a <_malloc_r+0xe6>
  404dda:	468c      	mov	ip, r1
  404ddc:	e78c      	b.n	404cf8 <_malloc_r+0x394>
  404dde:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404de2:	d815      	bhi.n	404e10 <_malloc_r+0x4ac>
  404de4:	0bf3      	lsrs	r3, r6, #15
  404de6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  404dea:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  404dee:	00c3      	lsls	r3, r0, #3
  404df0:	e5da      	b.n	4049a8 <_malloc_r+0x44>
  404df2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404df6:	e6ed      	b.n	404bd4 <_malloc_r+0x270>
  404df8:	687b      	ldr	r3, [r7, #4]
  404dfa:	1092      	asrs	r2, r2, #2
  404dfc:	2101      	movs	r1, #1
  404dfe:	fa01 f202 	lsl.w	r2, r1, r2
  404e02:	4313      	orrs	r3, r2
  404e04:	607b      	str	r3, [r7, #4]
  404e06:	4662      	mov	r2, ip
  404e08:	e779      	b.n	404cfe <_malloc_r+0x39a>
  404e0a:	2301      	movs	r3, #1
  404e0c:	6053      	str	r3, [r2, #4]
  404e0e:	e729      	b.n	404c64 <_malloc_r+0x300>
  404e10:	f240 5254 	movw	r2, #1364	; 0x554
  404e14:	4293      	cmp	r3, r2
  404e16:	d822      	bhi.n	404e5e <_malloc_r+0x4fa>
  404e18:	0cb3      	lsrs	r3, r6, #18
  404e1a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  404e1e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  404e22:	00c3      	lsls	r3, r0, #3
  404e24:	e5c0      	b.n	4049a8 <_malloc_r+0x44>
  404e26:	f103 0b10 	add.w	fp, r3, #16
  404e2a:	e6ae      	b.n	404b8a <_malloc_r+0x226>
  404e2c:	2a54      	cmp	r2, #84	; 0x54
  404e2e:	d829      	bhi.n	404e84 <_malloc_r+0x520>
  404e30:	0b1a      	lsrs	r2, r3, #12
  404e32:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  404e36:	00c9      	lsls	r1, r1, #3
  404e38:	326e      	adds	r2, #110	; 0x6e
  404e3a:	e74d      	b.n	404cd8 <_malloc_r+0x374>
  404e3c:	4b20      	ldr	r3, [pc, #128]	; (404ec0 <_malloc_r+0x55c>)
  404e3e:	6819      	ldr	r1, [r3, #0]
  404e40:	4459      	add	r1, fp
  404e42:	6019      	str	r1, [r3, #0]
  404e44:	e6b2      	b.n	404bac <_malloc_r+0x248>
  404e46:	f3ca 000b 	ubfx	r0, sl, #0, #12
  404e4a:	2800      	cmp	r0, #0
  404e4c:	f47f aeae 	bne.w	404bac <_malloc_r+0x248>
  404e50:	eb08 030b 	add.w	r3, r8, fp
  404e54:	68ba      	ldr	r2, [r7, #8]
  404e56:	f043 0301 	orr.w	r3, r3, #1
  404e5a:	6053      	str	r3, [r2, #4]
  404e5c:	e6ee      	b.n	404c3c <_malloc_r+0x2d8>
  404e5e:	207f      	movs	r0, #127	; 0x7f
  404e60:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404e64:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  404e68:	e59e      	b.n	4049a8 <_malloc_r+0x44>
  404e6a:	f104 0108 	add.w	r1, r4, #8
  404e6e:	4628      	mov	r0, r5
  404e70:	9300      	str	r3, [sp, #0]
  404e72:	f001 fa89 	bl	406388 <_free_r>
  404e76:	9b00      	ldr	r3, [sp, #0]
  404e78:	6819      	ldr	r1, [r3, #0]
  404e7a:	e6df      	b.n	404c3c <_malloc_r+0x2d8>
  404e7c:	2001      	movs	r0, #1
  404e7e:	f04f 0900 	mov.w	r9, #0
  404e82:	e6bc      	b.n	404bfe <_malloc_r+0x29a>
  404e84:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404e88:	d805      	bhi.n	404e96 <_malloc_r+0x532>
  404e8a:	0bda      	lsrs	r2, r3, #15
  404e8c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404e90:	00c9      	lsls	r1, r1, #3
  404e92:	3277      	adds	r2, #119	; 0x77
  404e94:	e720      	b.n	404cd8 <_malloc_r+0x374>
  404e96:	f240 5154 	movw	r1, #1364	; 0x554
  404e9a:	428a      	cmp	r2, r1
  404e9c:	d805      	bhi.n	404eaa <_malloc_r+0x546>
  404e9e:	0c9a      	lsrs	r2, r3, #18
  404ea0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404ea4:	00c9      	lsls	r1, r1, #3
  404ea6:	327c      	adds	r2, #124	; 0x7c
  404ea8:	e716      	b.n	404cd8 <_malloc_r+0x374>
  404eaa:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  404eae:	227e      	movs	r2, #126	; 0x7e
  404eb0:	e712      	b.n	404cd8 <_malloc_r+0x374>
  404eb2:	687b      	ldr	r3, [r7, #4]
  404eb4:	e780      	b.n	404db8 <_malloc_r+0x454>
  404eb6:	08f0      	lsrs	r0, r6, #3
  404eb8:	f106 0308 	add.w	r3, r6, #8
  404ebc:	e600      	b.n	404ac0 <_malloc_r+0x15c>
  404ebe:	bf00      	nop
  404ec0:	2044500c 	.word	0x2044500c

00404ec4 <memcpy>:
  404ec4:	4684      	mov	ip, r0
  404ec6:	ea41 0300 	orr.w	r3, r1, r0
  404eca:	f013 0303 	ands.w	r3, r3, #3
  404ece:	d16d      	bne.n	404fac <memcpy+0xe8>
  404ed0:	3a40      	subs	r2, #64	; 0x40
  404ed2:	d341      	bcc.n	404f58 <memcpy+0x94>
  404ed4:	f851 3b04 	ldr.w	r3, [r1], #4
  404ed8:	f840 3b04 	str.w	r3, [r0], #4
  404edc:	f851 3b04 	ldr.w	r3, [r1], #4
  404ee0:	f840 3b04 	str.w	r3, [r0], #4
  404ee4:	f851 3b04 	ldr.w	r3, [r1], #4
  404ee8:	f840 3b04 	str.w	r3, [r0], #4
  404eec:	f851 3b04 	ldr.w	r3, [r1], #4
  404ef0:	f840 3b04 	str.w	r3, [r0], #4
  404ef4:	f851 3b04 	ldr.w	r3, [r1], #4
  404ef8:	f840 3b04 	str.w	r3, [r0], #4
  404efc:	f851 3b04 	ldr.w	r3, [r1], #4
  404f00:	f840 3b04 	str.w	r3, [r0], #4
  404f04:	f851 3b04 	ldr.w	r3, [r1], #4
  404f08:	f840 3b04 	str.w	r3, [r0], #4
  404f0c:	f851 3b04 	ldr.w	r3, [r1], #4
  404f10:	f840 3b04 	str.w	r3, [r0], #4
  404f14:	f851 3b04 	ldr.w	r3, [r1], #4
  404f18:	f840 3b04 	str.w	r3, [r0], #4
  404f1c:	f851 3b04 	ldr.w	r3, [r1], #4
  404f20:	f840 3b04 	str.w	r3, [r0], #4
  404f24:	f851 3b04 	ldr.w	r3, [r1], #4
  404f28:	f840 3b04 	str.w	r3, [r0], #4
  404f2c:	f851 3b04 	ldr.w	r3, [r1], #4
  404f30:	f840 3b04 	str.w	r3, [r0], #4
  404f34:	f851 3b04 	ldr.w	r3, [r1], #4
  404f38:	f840 3b04 	str.w	r3, [r0], #4
  404f3c:	f851 3b04 	ldr.w	r3, [r1], #4
  404f40:	f840 3b04 	str.w	r3, [r0], #4
  404f44:	f851 3b04 	ldr.w	r3, [r1], #4
  404f48:	f840 3b04 	str.w	r3, [r0], #4
  404f4c:	f851 3b04 	ldr.w	r3, [r1], #4
  404f50:	f840 3b04 	str.w	r3, [r0], #4
  404f54:	3a40      	subs	r2, #64	; 0x40
  404f56:	d2bd      	bcs.n	404ed4 <memcpy+0x10>
  404f58:	3230      	adds	r2, #48	; 0x30
  404f5a:	d311      	bcc.n	404f80 <memcpy+0xbc>
  404f5c:	f851 3b04 	ldr.w	r3, [r1], #4
  404f60:	f840 3b04 	str.w	r3, [r0], #4
  404f64:	f851 3b04 	ldr.w	r3, [r1], #4
  404f68:	f840 3b04 	str.w	r3, [r0], #4
  404f6c:	f851 3b04 	ldr.w	r3, [r1], #4
  404f70:	f840 3b04 	str.w	r3, [r0], #4
  404f74:	f851 3b04 	ldr.w	r3, [r1], #4
  404f78:	f840 3b04 	str.w	r3, [r0], #4
  404f7c:	3a10      	subs	r2, #16
  404f7e:	d2ed      	bcs.n	404f5c <memcpy+0x98>
  404f80:	320c      	adds	r2, #12
  404f82:	d305      	bcc.n	404f90 <memcpy+0xcc>
  404f84:	f851 3b04 	ldr.w	r3, [r1], #4
  404f88:	f840 3b04 	str.w	r3, [r0], #4
  404f8c:	3a04      	subs	r2, #4
  404f8e:	d2f9      	bcs.n	404f84 <memcpy+0xc0>
  404f90:	3204      	adds	r2, #4
  404f92:	d008      	beq.n	404fa6 <memcpy+0xe2>
  404f94:	07d2      	lsls	r2, r2, #31
  404f96:	bf1c      	itt	ne
  404f98:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404f9c:	f800 3b01 	strbne.w	r3, [r0], #1
  404fa0:	d301      	bcc.n	404fa6 <memcpy+0xe2>
  404fa2:	880b      	ldrh	r3, [r1, #0]
  404fa4:	8003      	strh	r3, [r0, #0]
  404fa6:	4660      	mov	r0, ip
  404fa8:	4770      	bx	lr
  404faa:	bf00      	nop
  404fac:	2a08      	cmp	r2, #8
  404fae:	d313      	bcc.n	404fd8 <memcpy+0x114>
  404fb0:	078b      	lsls	r3, r1, #30
  404fb2:	d08d      	beq.n	404ed0 <memcpy+0xc>
  404fb4:	f010 0303 	ands.w	r3, r0, #3
  404fb8:	d08a      	beq.n	404ed0 <memcpy+0xc>
  404fba:	f1c3 0304 	rsb	r3, r3, #4
  404fbe:	1ad2      	subs	r2, r2, r3
  404fc0:	07db      	lsls	r3, r3, #31
  404fc2:	bf1c      	itt	ne
  404fc4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404fc8:	f800 3b01 	strbne.w	r3, [r0], #1
  404fcc:	d380      	bcc.n	404ed0 <memcpy+0xc>
  404fce:	f831 3b02 	ldrh.w	r3, [r1], #2
  404fd2:	f820 3b02 	strh.w	r3, [r0], #2
  404fd6:	e77b      	b.n	404ed0 <memcpy+0xc>
  404fd8:	3a04      	subs	r2, #4
  404fda:	d3d9      	bcc.n	404f90 <memcpy+0xcc>
  404fdc:	3a01      	subs	r2, #1
  404fde:	f811 3b01 	ldrb.w	r3, [r1], #1
  404fe2:	f800 3b01 	strb.w	r3, [r0], #1
  404fe6:	d2f9      	bcs.n	404fdc <memcpy+0x118>
  404fe8:	780b      	ldrb	r3, [r1, #0]
  404fea:	7003      	strb	r3, [r0, #0]
  404fec:	784b      	ldrb	r3, [r1, #1]
  404fee:	7043      	strb	r3, [r0, #1]
  404ff0:	788b      	ldrb	r3, [r1, #2]
  404ff2:	7083      	strb	r3, [r0, #2]
  404ff4:	4660      	mov	r0, ip
  404ff6:	4770      	bx	lr

00404ff8 <memset>:
  404ff8:	b470      	push	{r4, r5, r6}
  404ffa:	0786      	lsls	r6, r0, #30
  404ffc:	d046      	beq.n	40508c <memset+0x94>
  404ffe:	1e54      	subs	r4, r2, #1
  405000:	2a00      	cmp	r2, #0
  405002:	d041      	beq.n	405088 <memset+0x90>
  405004:	b2ca      	uxtb	r2, r1
  405006:	4603      	mov	r3, r0
  405008:	e002      	b.n	405010 <memset+0x18>
  40500a:	f114 34ff 	adds.w	r4, r4, #4294967295
  40500e:	d33b      	bcc.n	405088 <memset+0x90>
  405010:	f803 2b01 	strb.w	r2, [r3], #1
  405014:	079d      	lsls	r5, r3, #30
  405016:	d1f8      	bne.n	40500a <memset+0x12>
  405018:	2c03      	cmp	r4, #3
  40501a:	d92e      	bls.n	40507a <memset+0x82>
  40501c:	b2cd      	uxtb	r5, r1
  40501e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  405022:	2c0f      	cmp	r4, #15
  405024:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  405028:	d919      	bls.n	40505e <memset+0x66>
  40502a:	f103 0210 	add.w	r2, r3, #16
  40502e:	4626      	mov	r6, r4
  405030:	3e10      	subs	r6, #16
  405032:	2e0f      	cmp	r6, #15
  405034:	f842 5c10 	str.w	r5, [r2, #-16]
  405038:	f842 5c0c 	str.w	r5, [r2, #-12]
  40503c:	f842 5c08 	str.w	r5, [r2, #-8]
  405040:	f842 5c04 	str.w	r5, [r2, #-4]
  405044:	f102 0210 	add.w	r2, r2, #16
  405048:	d8f2      	bhi.n	405030 <memset+0x38>
  40504a:	f1a4 0210 	sub.w	r2, r4, #16
  40504e:	f022 020f 	bic.w	r2, r2, #15
  405052:	f004 040f 	and.w	r4, r4, #15
  405056:	3210      	adds	r2, #16
  405058:	2c03      	cmp	r4, #3
  40505a:	4413      	add	r3, r2
  40505c:	d90d      	bls.n	40507a <memset+0x82>
  40505e:	461e      	mov	r6, r3
  405060:	4622      	mov	r2, r4
  405062:	3a04      	subs	r2, #4
  405064:	2a03      	cmp	r2, #3
  405066:	f846 5b04 	str.w	r5, [r6], #4
  40506a:	d8fa      	bhi.n	405062 <memset+0x6a>
  40506c:	1f22      	subs	r2, r4, #4
  40506e:	f022 0203 	bic.w	r2, r2, #3
  405072:	3204      	adds	r2, #4
  405074:	4413      	add	r3, r2
  405076:	f004 0403 	and.w	r4, r4, #3
  40507a:	b12c      	cbz	r4, 405088 <memset+0x90>
  40507c:	b2c9      	uxtb	r1, r1
  40507e:	441c      	add	r4, r3
  405080:	f803 1b01 	strb.w	r1, [r3], #1
  405084:	429c      	cmp	r4, r3
  405086:	d1fb      	bne.n	405080 <memset+0x88>
  405088:	bc70      	pop	{r4, r5, r6}
  40508a:	4770      	bx	lr
  40508c:	4614      	mov	r4, r2
  40508e:	4603      	mov	r3, r0
  405090:	e7c2      	b.n	405018 <memset+0x20>
  405092:	bf00      	nop

00405094 <__malloc_lock>:
  405094:	4801      	ldr	r0, [pc, #4]	; (40509c <__malloc_lock+0x8>)
  405096:	f001 bc11 	b.w	4068bc <__retarget_lock_acquire_recursive>
  40509a:	bf00      	nop
  40509c:	2044a8a0 	.word	0x2044a8a0

004050a0 <__malloc_unlock>:
  4050a0:	4801      	ldr	r0, [pc, #4]	; (4050a8 <__malloc_unlock+0x8>)
  4050a2:	f001 bc0d 	b.w	4068c0 <__retarget_lock_release_recursive>
  4050a6:	bf00      	nop
  4050a8:	2044a8a0 	.word	0x2044a8a0

004050ac <_sbrk_r>:
  4050ac:	b538      	push	{r3, r4, r5, lr}
  4050ae:	4c07      	ldr	r4, [pc, #28]	; (4050cc <_sbrk_r+0x20>)
  4050b0:	2300      	movs	r3, #0
  4050b2:	4605      	mov	r5, r0
  4050b4:	4608      	mov	r0, r1
  4050b6:	6023      	str	r3, [r4, #0]
  4050b8:	f7fd fa32 	bl	402520 <_sbrk>
  4050bc:	1c43      	adds	r3, r0, #1
  4050be:	d000      	beq.n	4050c2 <_sbrk_r+0x16>
  4050c0:	bd38      	pop	{r3, r4, r5, pc}
  4050c2:	6823      	ldr	r3, [r4, #0]
  4050c4:	2b00      	cmp	r3, #0
  4050c6:	d0fb      	beq.n	4050c0 <_sbrk_r+0x14>
  4050c8:	602b      	str	r3, [r5, #0]
  4050ca:	bd38      	pop	{r3, r4, r5, pc}
  4050cc:	2044a8b4 	.word	0x2044a8b4

004050d0 <__sprint_r.part.0>:
  4050d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4050d4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4050d6:	049c      	lsls	r4, r3, #18
  4050d8:	4693      	mov	fp, r2
  4050da:	d52f      	bpl.n	40513c <__sprint_r.part.0+0x6c>
  4050dc:	6893      	ldr	r3, [r2, #8]
  4050de:	6812      	ldr	r2, [r2, #0]
  4050e0:	b353      	cbz	r3, 405138 <__sprint_r.part.0+0x68>
  4050e2:	460e      	mov	r6, r1
  4050e4:	4607      	mov	r7, r0
  4050e6:	f102 0908 	add.w	r9, r2, #8
  4050ea:	e919 0420 	ldmdb	r9, {r5, sl}
  4050ee:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4050f2:	d017      	beq.n	405124 <__sprint_r.part.0+0x54>
  4050f4:	3d04      	subs	r5, #4
  4050f6:	2400      	movs	r4, #0
  4050f8:	e001      	b.n	4050fe <__sprint_r.part.0+0x2e>
  4050fa:	45a0      	cmp	r8, r4
  4050fc:	d010      	beq.n	405120 <__sprint_r.part.0+0x50>
  4050fe:	4632      	mov	r2, r6
  405100:	f855 1f04 	ldr.w	r1, [r5, #4]!
  405104:	4638      	mov	r0, r7
  405106:	f001 f8bb 	bl	406280 <_fputwc_r>
  40510a:	1c43      	adds	r3, r0, #1
  40510c:	f104 0401 	add.w	r4, r4, #1
  405110:	d1f3      	bne.n	4050fa <__sprint_r.part.0+0x2a>
  405112:	2300      	movs	r3, #0
  405114:	f8cb 3008 	str.w	r3, [fp, #8]
  405118:	f8cb 3004 	str.w	r3, [fp, #4]
  40511c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405120:	f8db 3008 	ldr.w	r3, [fp, #8]
  405124:	f02a 0a03 	bic.w	sl, sl, #3
  405128:	eba3 030a 	sub.w	r3, r3, sl
  40512c:	f8cb 3008 	str.w	r3, [fp, #8]
  405130:	f109 0908 	add.w	r9, r9, #8
  405134:	2b00      	cmp	r3, #0
  405136:	d1d8      	bne.n	4050ea <__sprint_r.part.0+0x1a>
  405138:	2000      	movs	r0, #0
  40513a:	e7ea      	b.n	405112 <__sprint_r.part.0+0x42>
  40513c:	f001 fa0a 	bl	406554 <__sfvwrite_r>
  405140:	2300      	movs	r3, #0
  405142:	f8cb 3008 	str.w	r3, [fp, #8]
  405146:	f8cb 3004 	str.w	r3, [fp, #4]
  40514a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40514e:	bf00      	nop

00405150 <_vfiprintf_r>:
  405150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405154:	b0ad      	sub	sp, #180	; 0xb4
  405156:	461d      	mov	r5, r3
  405158:	468b      	mov	fp, r1
  40515a:	4690      	mov	r8, r2
  40515c:	9307      	str	r3, [sp, #28]
  40515e:	9006      	str	r0, [sp, #24]
  405160:	b118      	cbz	r0, 40516a <_vfiprintf_r+0x1a>
  405162:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405164:	2b00      	cmp	r3, #0
  405166:	f000 80f3 	beq.w	405350 <_vfiprintf_r+0x200>
  40516a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40516e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  405172:	07df      	lsls	r7, r3, #31
  405174:	b281      	uxth	r1, r0
  405176:	d402      	bmi.n	40517e <_vfiprintf_r+0x2e>
  405178:	058e      	lsls	r6, r1, #22
  40517a:	f140 80fc 	bpl.w	405376 <_vfiprintf_r+0x226>
  40517e:	048c      	lsls	r4, r1, #18
  405180:	d40a      	bmi.n	405198 <_vfiprintf_r+0x48>
  405182:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405186:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  40518a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40518e:	f8ab 100c 	strh.w	r1, [fp, #12]
  405192:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  405196:	b289      	uxth	r1, r1
  405198:	0708      	lsls	r0, r1, #28
  40519a:	f140 80b3 	bpl.w	405304 <_vfiprintf_r+0x1b4>
  40519e:	f8db 3010 	ldr.w	r3, [fp, #16]
  4051a2:	2b00      	cmp	r3, #0
  4051a4:	f000 80ae 	beq.w	405304 <_vfiprintf_r+0x1b4>
  4051a8:	f001 031a 	and.w	r3, r1, #26
  4051ac:	2b0a      	cmp	r3, #10
  4051ae:	f000 80b5 	beq.w	40531c <_vfiprintf_r+0x1cc>
  4051b2:	2300      	movs	r3, #0
  4051b4:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  4051b8:	930b      	str	r3, [sp, #44]	; 0x2c
  4051ba:	9311      	str	r3, [sp, #68]	; 0x44
  4051bc:	9310      	str	r3, [sp, #64]	; 0x40
  4051be:	9303      	str	r3, [sp, #12]
  4051c0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  4051c4:	46ca      	mov	sl, r9
  4051c6:	f8cd b010 	str.w	fp, [sp, #16]
  4051ca:	f898 3000 	ldrb.w	r3, [r8]
  4051ce:	4644      	mov	r4, r8
  4051d0:	b1fb      	cbz	r3, 405212 <_vfiprintf_r+0xc2>
  4051d2:	2b25      	cmp	r3, #37	; 0x25
  4051d4:	d102      	bne.n	4051dc <_vfiprintf_r+0x8c>
  4051d6:	e01c      	b.n	405212 <_vfiprintf_r+0xc2>
  4051d8:	2b25      	cmp	r3, #37	; 0x25
  4051da:	d003      	beq.n	4051e4 <_vfiprintf_r+0x94>
  4051dc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4051e0:	2b00      	cmp	r3, #0
  4051e2:	d1f9      	bne.n	4051d8 <_vfiprintf_r+0x88>
  4051e4:	eba4 0508 	sub.w	r5, r4, r8
  4051e8:	b19d      	cbz	r5, 405212 <_vfiprintf_r+0xc2>
  4051ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4051ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4051ee:	f8ca 8000 	str.w	r8, [sl]
  4051f2:	3301      	adds	r3, #1
  4051f4:	442a      	add	r2, r5
  4051f6:	2b07      	cmp	r3, #7
  4051f8:	f8ca 5004 	str.w	r5, [sl, #4]
  4051fc:	9211      	str	r2, [sp, #68]	; 0x44
  4051fe:	9310      	str	r3, [sp, #64]	; 0x40
  405200:	dd7a      	ble.n	4052f8 <_vfiprintf_r+0x1a8>
  405202:	2a00      	cmp	r2, #0
  405204:	f040 84b0 	bne.w	405b68 <_vfiprintf_r+0xa18>
  405208:	9b03      	ldr	r3, [sp, #12]
  40520a:	9210      	str	r2, [sp, #64]	; 0x40
  40520c:	442b      	add	r3, r5
  40520e:	46ca      	mov	sl, r9
  405210:	9303      	str	r3, [sp, #12]
  405212:	7823      	ldrb	r3, [r4, #0]
  405214:	2b00      	cmp	r3, #0
  405216:	f000 83e0 	beq.w	4059da <_vfiprintf_r+0x88a>
  40521a:	2000      	movs	r0, #0
  40521c:	f04f 0300 	mov.w	r3, #0
  405220:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  405224:	f104 0801 	add.w	r8, r4, #1
  405228:	7862      	ldrb	r2, [r4, #1]
  40522a:	4605      	mov	r5, r0
  40522c:	4606      	mov	r6, r0
  40522e:	4603      	mov	r3, r0
  405230:	f04f 34ff 	mov.w	r4, #4294967295
  405234:	f108 0801 	add.w	r8, r8, #1
  405238:	f1a2 0120 	sub.w	r1, r2, #32
  40523c:	2958      	cmp	r1, #88	; 0x58
  40523e:	f200 82de 	bhi.w	4057fe <_vfiprintf_r+0x6ae>
  405242:	e8df f011 	tbh	[pc, r1, lsl #1]
  405246:	0221      	.short	0x0221
  405248:	02dc02dc 	.word	0x02dc02dc
  40524c:	02dc0229 	.word	0x02dc0229
  405250:	02dc02dc 	.word	0x02dc02dc
  405254:	02dc02dc 	.word	0x02dc02dc
  405258:	028902dc 	.word	0x028902dc
  40525c:	02dc0295 	.word	0x02dc0295
  405260:	02bd00a2 	.word	0x02bd00a2
  405264:	019f02dc 	.word	0x019f02dc
  405268:	01a401a4 	.word	0x01a401a4
  40526c:	01a401a4 	.word	0x01a401a4
  405270:	01a401a4 	.word	0x01a401a4
  405274:	01a401a4 	.word	0x01a401a4
  405278:	02dc01a4 	.word	0x02dc01a4
  40527c:	02dc02dc 	.word	0x02dc02dc
  405280:	02dc02dc 	.word	0x02dc02dc
  405284:	02dc02dc 	.word	0x02dc02dc
  405288:	02dc02dc 	.word	0x02dc02dc
  40528c:	01b202dc 	.word	0x01b202dc
  405290:	02dc02dc 	.word	0x02dc02dc
  405294:	02dc02dc 	.word	0x02dc02dc
  405298:	02dc02dc 	.word	0x02dc02dc
  40529c:	02dc02dc 	.word	0x02dc02dc
  4052a0:	02dc02dc 	.word	0x02dc02dc
  4052a4:	02dc0197 	.word	0x02dc0197
  4052a8:	02dc02dc 	.word	0x02dc02dc
  4052ac:	02dc02dc 	.word	0x02dc02dc
  4052b0:	02dc019b 	.word	0x02dc019b
  4052b4:	025302dc 	.word	0x025302dc
  4052b8:	02dc02dc 	.word	0x02dc02dc
  4052bc:	02dc02dc 	.word	0x02dc02dc
  4052c0:	02dc02dc 	.word	0x02dc02dc
  4052c4:	02dc02dc 	.word	0x02dc02dc
  4052c8:	02dc02dc 	.word	0x02dc02dc
  4052cc:	021b025a 	.word	0x021b025a
  4052d0:	02dc02dc 	.word	0x02dc02dc
  4052d4:	026e02dc 	.word	0x026e02dc
  4052d8:	02dc021b 	.word	0x02dc021b
  4052dc:	027302dc 	.word	0x027302dc
  4052e0:	01f502dc 	.word	0x01f502dc
  4052e4:	02090182 	.word	0x02090182
  4052e8:	02dc02d7 	.word	0x02dc02d7
  4052ec:	02dc029a 	.word	0x02dc029a
  4052f0:	02dc00a7 	.word	0x02dc00a7
  4052f4:	022e02dc 	.word	0x022e02dc
  4052f8:	f10a 0a08 	add.w	sl, sl, #8
  4052fc:	9b03      	ldr	r3, [sp, #12]
  4052fe:	442b      	add	r3, r5
  405300:	9303      	str	r3, [sp, #12]
  405302:	e786      	b.n	405212 <_vfiprintf_r+0xc2>
  405304:	4659      	mov	r1, fp
  405306:	9806      	ldr	r0, [sp, #24]
  405308:	f000 fdac 	bl	405e64 <__swsetup_r>
  40530c:	bb18      	cbnz	r0, 405356 <_vfiprintf_r+0x206>
  40530e:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  405312:	f001 031a 	and.w	r3, r1, #26
  405316:	2b0a      	cmp	r3, #10
  405318:	f47f af4b 	bne.w	4051b2 <_vfiprintf_r+0x62>
  40531c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  405320:	2b00      	cmp	r3, #0
  405322:	f6ff af46 	blt.w	4051b2 <_vfiprintf_r+0x62>
  405326:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40532a:	07db      	lsls	r3, r3, #31
  40532c:	d405      	bmi.n	40533a <_vfiprintf_r+0x1ea>
  40532e:	058f      	lsls	r7, r1, #22
  405330:	d403      	bmi.n	40533a <_vfiprintf_r+0x1ea>
  405332:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405336:	f001 fac3 	bl	4068c0 <__retarget_lock_release_recursive>
  40533a:	462b      	mov	r3, r5
  40533c:	4642      	mov	r2, r8
  40533e:	4659      	mov	r1, fp
  405340:	9806      	ldr	r0, [sp, #24]
  405342:	f000 fd4d 	bl	405de0 <__sbprintf>
  405346:	9003      	str	r0, [sp, #12]
  405348:	9803      	ldr	r0, [sp, #12]
  40534a:	b02d      	add	sp, #180	; 0xb4
  40534c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405350:	f000 fef4 	bl	40613c <__sinit>
  405354:	e709      	b.n	40516a <_vfiprintf_r+0x1a>
  405356:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40535a:	07d9      	lsls	r1, r3, #31
  40535c:	d404      	bmi.n	405368 <_vfiprintf_r+0x218>
  40535e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405362:	059a      	lsls	r2, r3, #22
  405364:	f140 84aa 	bpl.w	405cbc <_vfiprintf_r+0xb6c>
  405368:	f04f 33ff 	mov.w	r3, #4294967295
  40536c:	9303      	str	r3, [sp, #12]
  40536e:	9803      	ldr	r0, [sp, #12]
  405370:	b02d      	add	sp, #180	; 0xb4
  405372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405376:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40537a:	f001 fa9f 	bl	4068bc <__retarget_lock_acquire_recursive>
  40537e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  405382:	b281      	uxth	r1, r0
  405384:	e6fb      	b.n	40517e <_vfiprintf_r+0x2e>
  405386:	4276      	negs	r6, r6
  405388:	9207      	str	r2, [sp, #28]
  40538a:	f043 0304 	orr.w	r3, r3, #4
  40538e:	f898 2000 	ldrb.w	r2, [r8]
  405392:	e74f      	b.n	405234 <_vfiprintf_r+0xe4>
  405394:	9608      	str	r6, [sp, #32]
  405396:	069e      	lsls	r6, r3, #26
  405398:	f100 8450 	bmi.w	405c3c <_vfiprintf_r+0xaec>
  40539c:	9907      	ldr	r1, [sp, #28]
  40539e:	06dd      	lsls	r5, r3, #27
  4053a0:	460a      	mov	r2, r1
  4053a2:	f100 83ef 	bmi.w	405b84 <_vfiprintf_r+0xa34>
  4053a6:	0658      	lsls	r0, r3, #25
  4053a8:	f140 83ec 	bpl.w	405b84 <_vfiprintf_r+0xa34>
  4053ac:	880e      	ldrh	r6, [r1, #0]
  4053ae:	3104      	adds	r1, #4
  4053b0:	2700      	movs	r7, #0
  4053b2:	2201      	movs	r2, #1
  4053b4:	9107      	str	r1, [sp, #28]
  4053b6:	f04f 0100 	mov.w	r1, #0
  4053ba:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  4053be:	2500      	movs	r5, #0
  4053c0:	1c61      	adds	r1, r4, #1
  4053c2:	f000 8116 	beq.w	4055f2 <_vfiprintf_r+0x4a2>
  4053c6:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  4053ca:	9102      	str	r1, [sp, #8]
  4053cc:	ea56 0107 	orrs.w	r1, r6, r7
  4053d0:	f040 8114 	bne.w	4055fc <_vfiprintf_r+0x4ac>
  4053d4:	2c00      	cmp	r4, #0
  4053d6:	f040 835c 	bne.w	405a92 <_vfiprintf_r+0x942>
  4053da:	2a00      	cmp	r2, #0
  4053dc:	f040 83b7 	bne.w	405b4e <_vfiprintf_r+0x9fe>
  4053e0:	f013 0301 	ands.w	r3, r3, #1
  4053e4:	9305      	str	r3, [sp, #20]
  4053e6:	f000 8457 	beq.w	405c98 <_vfiprintf_r+0xb48>
  4053ea:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4053ee:	2330      	movs	r3, #48	; 0x30
  4053f0:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  4053f4:	9b05      	ldr	r3, [sp, #20]
  4053f6:	42a3      	cmp	r3, r4
  4053f8:	bfb8      	it	lt
  4053fa:	4623      	movlt	r3, r4
  4053fc:	9301      	str	r3, [sp, #4]
  4053fe:	b10d      	cbz	r5, 405404 <_vfiprintf_r+0x2b4>
  405400:	3301      	adds	r3, #1
  405402:	9301      	str	r3, [sp, #4]
  405404:	9b02      	ldr	r3, [sp, #8]
  405406:	f013 0302 	ands.w	r3, r3, #2
  40540a:	9309      	str	r3, [sp, #36]	; 0x24
  40540c:	d002      	beq.n	405414 <_vfiprintf_r+0x2c4>
  40540e:	9b01      	ldr	r3, [sp, #4]
  405410:	3302      	adds	r3, #2
  405412:	9301      	str	r3, [sp, #4]
  405414:	9b02      	ldr	r3, [sp, #8]
  405416:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40541a:	930a      	str	r3, [sp, #40]	; 0x28
  40541c:	f040 8217 	bne.w	40584e <_vfiprintf_r+0x6fe>
  405420:	9b08      	ldr	r3, [sp, #32]
  405422:	9a01      	ldr	r2, [sp, #4]
  405424:	1a9d      	subs	r5, r3, r2
  405426:	2d00      	cmp	r5, #0
  405428:	f340 8211 	ble.w	40584e <_vfiprintf_r+0x6fe>
  40542c:	2d10      	cmp	r5, #16
  40542e:	f340 8490 	ble.w	405d52 <_vfiprintf_r+0xc02>
  405432:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405434:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405436:	4ec4      	ldr	r6, [pc, #784]	; (405748 <_vfiprintf_r+0x5f8>)
  405438:	46d6      	mov	lr, sl
  40543a:	2710      	movs	r7, #16
  40543c:	46a2      	mov	sl, r4
  40543e:	4619      	mov	r1, r3
  405440:	9c06      	ldr	r4, [sp, #24]
  405442:	e007      	b.n	405454 <_vfiprintf_r+0x304>
  405444:	f101 0c02 	add.w	ip, r1, #2
  405448:	f10e 0e08 	add.w	lr, lr, #8
  40544c:	4601      	mov	r1, r0
  40544e:	3d10      	subs	r5, #16
  405450:	2d10      	cmp	r5, #16
  405452:	dd11      	ble.n	405478 <_vfiprintf_r+0x328>
  405454:	1c48      	adds	r0, r1, #1
  405456:	3210      	adds	r2, #16
  405458:	2807      	cmp	r0, #7
  40545a:	9211      	str	r2, [sp, #68]	; 0x44
  40545c:	e88e 00c0 	stmia.w	lr, {r6, r7}
  405460:	9010      	str	r0, [sp, #64]	; 0x40
  405462:	ddef      	ble.n	405444 <_vfiprintf_r+0x2f4>
  405464:	2a00      	cmp	r2, #0
  405466:	f040 81e4 	bne.w	405832 <_vfiprintf_r+0x6e2>
  40546a:	3d10      	subs	r5, #16
  40546c:	2d10      	cmp	r5, #16
  40546e:	4611      	mov	r1, r2
  405470:	f04f 0c01 	mov.w	ip, #1
  405474:	46ce      	mov	lr, r9
  405476:	dced      	bgt.n	405454 <_vfiprintf_r+0x304>
  405478:	4654      	mov	r4, sl
  40547a:	4661      	mov	r1, ip
  40547c:	46f2      	mov	sl, lr
  40547e:	442a      	add	r2, r5
  405480:	2907      	cmp	r1, #7
  405482:	9211      	str	r2, [sp, #68]	; 0x44
  405484:	f8ca 6000 	str.w	r6, [sl]
  405488:	f8ca 5004 	str.w	r5, [sl, #4]
  40548c:	9110      	str	r1, [sp, #64]	; 0x40
  40548e:	f300 82ec 	bgt.w	405a6a <_vfiprintf_r+0x91a>
  405492:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405496:	f10a 0a08 	add.w	sl, sl, #8
  40549a:	1c48      	adds	r0, r1, #1
  40549c:	2d00      	cmp	r5, #0
  40549e:	f040 81de 	bne.w	40585e <_vfiprintf_r+0x70e>
  4054a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4054a4:	2b00      	cmp	r3, #0
  4054a6:	f000 81f8 	beq.w	40589a <_vfiprintf_r+0x74a>
  4054aa:	3202      	adds	r2, #2
  4054ac:	a90e      	add	r1, sp, #56	; 0x38
  4054ae:	2302      	movs	r3, #2
  4054b0:	2807      	cmp	r0, #7
  4054b2:	9211      	str	r2, [sp, #68]	; 0x44
  4054b4:	9010      	str	r0, [sp, #64]	; 0x40
  4054b6:	e88a 000a 	stmia.w	sl, {r1, r3}
  4054ba:	f340 81ea 	ble.w	405892 <_vfiprintf_r+0x742>
  4054be:	2a00      	cmp	r2, #0
  4054c0:	f040 838c 	bne.w	405bdc <_vfiprintf_r+0xa8c>
  4054c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4054c6:	2b80      	cmp	r3, #128	; 0x80
  4054c8:	f04f 0001 	mov.w	r0, #1
  4054cc:	4611      	mov	r1, r2
  4054ce:	46ca      	mov	sl, r9
  4054d0:	f040 81e7 	bne.w	4058a2 <_vfiprintf_r+0x752>
  4054d4:	9b08      	ldr	r3, [sp, #32]
  4054d6:	9d01      	ldr	r5, [sp, #4]
  4054d8:	1b5e      	subs	r6, r3, r5
  4054da:	2e00      	cmp	r6, #0
  4054dc:	f340 81e1 	ble.w	4058a2 <_vfiprintf_r+0x752>
  4054e0:	2e10      	cmp	r6, #16
  4054e2:	4d9a      	ldr	r5, [pc, #616]	; (40574c <_vfiprintf_r+0x5fc>)
  4054e4:	f340 8450 	ble.w	405d88 <_vfiprintf_r+0xc38>
  4054e8:	46d4      	mov	ip, sl
  4054ea:	2710      	movs	r7, #16
  4054ec:	46a2      	mov	sl, r4
  4054ee:	9c06      	ldr	r4, [sp, #24]
  4054f0:	e007      	b.n	405502 <_vfiprintf_r+0x3b2>
  4054f2:	f101 0e02 	add.w	lr, r1, #2
  4054f6:	f10c 0c08 	add.w	ip, ip, #8
  4054fa:	4601      	mov	r1, r0
  4054fc:	3e10      	subs	r6, #16
  4054fe:	2e10      	cmp	r6, #16
  405500:	dd11      	ble.n	405526 <_vfiprintf_r+0x3d6>
  405502:	1c48      	adds	r0, r1, #1
  405504:	3210      	adds	r2, #16
  405506:	2807      	cmp	r0, #7
  405508:	9211      	str	r2, [sp, #68]	; 0x44
  40550a:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40550e:	9010      	str	r0, [sp, #64]	; 0x40
  405510:	ddef      	ble.n	4054f2 <_vfiprintf_r+0x3a2>
  405512:	2a00      	cmp	r2, #0
  405514:	f040 829d 	bne.w	405a52 <_vfiprintf_r+0x902>
  405518:	3e10      	subs	r6, #16
  40551a:	2e10      	cmp	r6, #16
  40551c:	f04f 0e01 	mov.w	lr, #1
  405520:	4611      	mov	r1, r2
  405522:	46cc      	mov	ip, r9
  405524:	dced      	bgt.n	405502 <_vfiprintf_r+0x3b2>
  405526:	4654      	mov	r4, sl
  405528:	46e2      	mov	sl, ip
  40552a:	4432      	add	r2, r6
  40552c:	f1be 0f07 	cmp.w	lr, #7
  405530:	9211      	str	r2, [sp, #68]	; 0x44
  405532:	e88a 0060 	stmia.w	sl, {r5, r6}
  405536:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40553a:	f300 8369 	bgt.w	405c10 <_vfiprintf_r+0xac0>
  40553e:	f10a 0a08 	add.w	sl, sl, #8
  405542:	f10e 0001 	add.w	r0, lr, #1
  405546:	4671      	mov	r1, lr
  405548:	e1ab      	b.n	4058a2 <_vfiprintf_r+0x752>
  40554a:	9608      	str	r6, [sp, #32]
  40554c:	f013 0220 	ands.w	r2, r3, #32
  405550:	f040 838c 	bne.w	405c6c <_vfiprintf_r+0xb1c>
  405554:	f013 0110 	ands.w	r1, r3, #16
  405558:	f040 831a 	bne.w	405b90 <_vfiprintf_r+0xa40>
  40555c:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  405560:	f000 8316 	beq.w	405b90 <_vfiprintf_r+0xa40>
  405564:	9807      	ldr	r0, [sp, #28]
  405566:	460a      	mov	r2, r1
  405568:	4601      	mov	r1, r0
  40556a:	3104      	adds	r1, #4
  40556c:	8806      	ldrh	r6, [r0, #0]
  40556e:	9107      	str	r1, [sp, #28]
  405570:	2700      	movs	r7, #0
  405572:	e720      	b.n	4053b6 <_vfiprintf_r+0x266>
  405574:	9608      	str	r6, [sp, #32]
  405576:	f043 0310 	orr.w	r3, r3, #16
  40557a:	e7e7      	b.n	40554c <_vfiprintf_r+0x3fc>
  40557c:	9608      	str	r6, [sp, #32]
  40557e:	f043 0310 	orr.w	r3, r3, #16
  405582:	e708      	b.n	405396 <_vfiprintf_r+0x246>
  405584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405588:	f898 2000 	ldrb.w	r2, [r8]
  40558c:	e652      	b.n	405234 <_vfiprintf_r+0xe4>
  40558e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405592:	2600      	movs	r6, #0
  405594:	f818 2b01 	ldrb.w	r2, [r8], #1
  405598:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40559c:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4055a0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4055a4:	2909      	cmp	r1, #9
  4055a6:	d9f5      	bls.n	405594 <_vfiprintf_r+0x444>
  4055a8:	e646      	b.n	405238 <_vfiprintf_r+0xe8>
  4055aa:	9608      	str	r6, [sp, #32]
  4055ac:	2800      	cmp	r0, #0
  4055ae:	f040 8408 	bne.w	405dc2 <_vfiprintf_r+0xc72>
  4055b2:	f043 0310 	orr.w	r3, r3, #16
  4055b6:	069e      	lsls	r6, r3, #26
  4055b8:	f100 834c 	bmi.w	405c54 <_vfiprintf_r+0xb04>
  4055bc:	06dd      	lsls	r5, r3, #27
  4055be:	f100 82f3 	bmi.w	405ba8 <_vfiprintf_r+0xa58>
  4055c2:	0658      	lsls	r0, r3, #25
  4055c4:	f140 82f0 	bpl.w	405ba8 <_vfiprintf_r+0xa58>
  4055c8:	9d07      	ldr	r5, [sp, #28]
  4055ca:	f9b5 6000 	ldrsh.w	r6, [r5]
  4055ce:	462a      	mov	r2, r5
  4055d0:	17f7      	asrs	r7, r6, #31
  4055d2:	3204      	adds	r2, #4
  4055d4:	4630      	mov	r0, r6
  4055d6:	4639      	mov	r1, r7
  4055d8:	9207      	str	r2, [sp, #28]
  4055da:	2800      	cmp	r0, #0
  4055dc:	f171 0200 	sbcs.w	r2, r1, #0
  4055e0:	f2c0 835d 	blt.w	405c9e <_vfiprintf_r+0xb4e>
  4055e4:	1c61      	adds	r1, r4, #1
  4055e6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4055ea:	f04f 0201 	mov.w	r2, #1
  4055ee:	f47f aeea 	bne.w	4053c6 <_vfiprintf_r+0x276>
  4055f2:	ea56 0107 	orrs.w	r1, r6, r7
  4055f6:	f000 824d 	beq.w	405a94 <_vfiprintf_r+0x944>
  4055fa:	9302      	str	r3, [sp, #8]
  4055fc:	2a01      	cmp	r2, #1
  4055fe:	f000 828c 	beq.w	405b1a <_vfiprintf_r+0x9ca>
  405602:	2a02      	cmp	r2, #2
  405604:	f040 825c 	bne.w	405ac0 <_vfiprintf_r+0x970>
  405608:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40560a:	46cb      	mov	fp, r9
  40560c:	0933      	lsrs	r3, r6, #4
  40560e:	f006 010f 	and.w	r1, r6, #15
  405612:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  405616:	093a      	lsrs	r2, r7, #4
  405618:	461e      	mov	r6, r3
  40561a:	4617      	mov	r7, r2
  40561c:	5c43      	ldrb	r3, [r0, r1]
  40561e:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  405622:	ea56 0307 	orrs.w	r3, r6, r7
  405626:	d1f1      	bne.n	40560c <_vfiprintf_r+0x4bc>
  405628:	eba9 030b 	sub.w	r3, r9, fp
  40562c:	9305      	str	r3, [sp, #20]
  40562e:	e6e1      	b.n	4053f4 <_vfiprintf_r+0x2a4>
  405630:	2800      	cmp	r0, #0
  405632:	f040 83c0 	bne.w	405db6 <_vfiprintf_r+0xc66>
  405636:	0699      	lsls	r1, r3, #26
  405638:	f100 8367 	bmi.w	405d0a <_vfiprintf_r+0xbba>
  40563c:	06da      	lsls	r2, r3, #27
  40563e:	f100 80f1 	bmi.w	405824 <_vfiprintf_r+0x6d4>
  405642:	065b      	lsls	r3, r3, #25
  405644:	f140 80ee 	bpl.w	405824 <_vfiprintf_r+0x6d4>
  405648:	9a07      	ldr	r2, [sp, #28]
  40564a:	6813      	ldr	r3, [r2, #0]
  40564c:	3204      	adds	r2, #4
  40564e:	9207      	str	r2, [sp, #28]
  405650:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  405654:	801a      	strh	r2, [r3, #0]
  405656:	e5b8      	b.n	4051ca <_vfiprintf_r+0x7a>
  405658:	9807      	ldr	r0, [sp, #28]
  40565a:	4a3d      	ldr	r2, [pc, #244]	; (405750 <_vfiprintf_r+0x600>)
  40565c:	9608      	str	r6, [sp, #32]
  40565e:	920b      	str	r2, [sp, #44]	; 0x2c
  405660:	6806      	ldr	r6, [r0, #0]
  405662:	2278      	movs	r2, #120	; 0x78
  405664:	2130      	movs	r1, #48	; 0x30
  405666:	3004      	adds	r0, #4
  405668:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40566c:	f043 0302 	orr.w	r3, r3, #2
  405670:	9007      	str	r0, [sp, #28]
  405672:	2700      	movs	r7, #0
  405674:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405678:	2202      	movs	r2, #2
  40567a:	e69c      	b.n	4053b6 <_vfiprintf_r+0x266>
  40567c:	9608      	str	r6, [sp, #32]
  40567e:	2800      	cmp	r0, #0
  405680:	d099      	beq.n	4055b6 <_vfiprintf_r+0x466>
  405682:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405686:	e796      	b.n	4055b6 <_vfiprintf_r+0x466>
  405688:	f898 2000 	ldrb.w	r2, [r8]
  40568c:	2d00      	cmp	r5, #0
  40568e:	f47f add1 	bne.w	405234 <_vfiprintf_r+0xe4>
  405692:	2001      	movs	r0, #1
  405694:	2520      	movs	r5, #32
  405696:	e5cd      	b.n	405234 <_vfiprintf_r+0xe4>
  405698:	f043 0301 	orr.w	r3, r3, #1
  40569c:	f898 2000 	ldrb.w	r2, [r8]
  4056a0:	e5c8      	b.n	405234 <_vfiprintf_r+0xe4>
  4056a2:	9608      	str	r6, [sp, #32]
  4056a4:	2800      	cmp	r0, #0
  4056a6:	f040 8393 	bne.w	405dd0 <_vfiprintf_r+0xc80>
  4056aa:	4929      	ldr	r1, [pc, #164]	; (405750 <_vfiprintf_r+0x600>)
  4056ac:	910b      	str	r1, [sp, #44]	; 0x2c
  4056ae:	069f      	lsls	r7, r3, #26
  4056b0:	f100 82e8 	bmi.w	405c84 <_vfiprintf_r+0xb34>
  4056b4:	9807      	ldr	r0, [sp, #28]
  4056b6:	06de      	lsls	r6, r3, #27
  4056b8:	4601      	mov	r1, r0
  4056ba:	f100 8270 	bmi.w	405b9e <_vfiprintf_r+0xa4e>
  4056be:	065d      	lsls	r5, r3, #25
  4056c0:	f140 826d 	bpl.w	405b9e <_vfiprintf_r+0xa4e>
  4056c4:	3104      	adds	r1, #4
  4056c6:	8806      	ldrh	r6, [r0, #0]
  4056c8:	9107      	str	r1, [sp, #28]
  4056ca:	2700      	movs	r7, #0
  4056cc:	07d8      	lsls	r0, r3, #31
  4056ce:	f140 8222 	bpl.w	405b16 <_vfiprintf_r+0x9c6>
  4056d2:	ea56 0107 	orrs.w	r1, r6, r7
  4056d6:	f000 821e 	beq.w	405b16 <_vfiprintf_r+0x9c6>
  4056da:	2130      	movs	r1, #48	; 0x30
  4056dc:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4056e0:	f043 0302 	orr.w	r3, r3, #2
  4056e4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4056e8:	2202      	movs	r2, #2
  4056ea:	e664      	b.n	4053b6 <_vfiprintf_r+0x266>
  4056ec:	9608      	str	r6, [sp, #32]
  4056ee:	2800      	cmp	r0, #0
  4056f0:	f040 836b 	bne.w	405dca <_vfiprintf_r+0xc7a>
  4056f4:	4917      	ldr	r1, [pc, #92]	; (405754 <_vfiprintf_r+0x604>)
  4056f6:	910b      	str	r1, [sp, #44]	; 0x2c
  4056f8:	e7d9      	b.n	4056ae <_vfiprintf_r+0x55e>
  4056fa:	9907      	ldr	r1, [sp, #28]
  4056fc:	9608      	str	r6, [sp, #32]
  4056fe:	680a      	ldr	r2, [r1, #0]
  405700:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  405704:	f04f 0000 	mov.w	r0, #0
  405708:	460a      	mov	r2, r1
  40570a:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40570e:	3204      	adds	r2, #4
  405710:	2001      	movs	r0, #1
  405712:	9001      	str	r0, [sp, #4]
  405714:	9207      	str	r2, [sp, #28]
  405716:	9005      	str	r0, [sp, #20]
  405718:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40571c:	9302      	str	r3, [sp, #8]
  40571e:	2400      	movs	r4, #0
  405720:	e670      	b.n	405404 <_vfiprintf_r+0x2b4>
  405722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405726:	f898 2000 	ldrb.w	r2, [r8]
  40572a:	e583      	b.n	405234 <_vfiprintf_r+0xe4>
  40572c:	f898 2000 	ldrb.w	r2, [r8]
  405730:	2a6c      	cmp	r2, #108	; 0x6c
  405732:	bf03      	ittte	eq
  405734:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  405738:	f043 0320 	orreq.w	r3, r3, #32
  40573c:	f108 0801 	addeq.w	r8, r8, #1
  405740:	f043 0310 	orrne.w	r3, r3, #16
  405744:	e576      	b.n	405234 <_vfiprintf_r+0xe4>
  405746:	bf00      	nop
  405748:	00408160 	.word	0x00408160
  40574c:	00408170 	.word	0x00408170
  405750:	00408144 	.word	0x00408144
  405754:	00408130 	.word	0x00408130
  405758:	9907      	ldr	r1, [sp, #28]
  40575a:	680e      	ldr	r6, [r1, #0]
  40575c:	460a      	mov	r2, r1
  40575e:	2e00      	cmp	r6, #0
  405760:	f102 0204 	add.w	r2, r2, #4
  405764:	f6ff ae0f 	blt.w	405386 <_vfiprintf_r+0x236>
  405768:	9207      	str	r2, [sp, #28]
  40576a:	f898 2000 	ldrb.w	r2, [r8]
  40576e:	e561      	b.n	405234 <_vfiprintf_r+0xe4>
  405770:	f898 2000 	ldrb.w	r2, [r8]
  405774:	2001      	movs	r0, #1
  405776:	252b      	movs	r5, #43	; 0x2b
  405778:	e55c      	b.n	405234 <_vfiprintf_r+0xe4>
  40577a:	9907      	ldr	r1, [sp, #28]
  40577c:	9608      	str	r6, [sp, #32]
  40577e:	f8d1 b000 	ldr.w	fp, [r1]
  405782:	f04f 0200 	mov.w	r2, #0
  405786:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40578a:	1d0e      	adds	r6, r1, #4
  40578c:	f1bb 0f00 	cmp.w	fp, #0
  405790:	f000 82e5 	beq.w	405d5e <_vfiprintf_r+0xc0e>
  405794:	1c67      	adds	r7, r4, #1
  405796:	f000 82c4 	beq.w	405d22 <_vfiprintf_r+0xbd2>
  40579a:	4622      	mov	r2, r4
  40579c:	2100      	movs	r1, #0
  40579e:	4658      	mov	r0, fp
  4057a0:	9301      	str	r3, [sp, #4]
  4057a2:	f001 f91d 	bl	4069e0 <memchr>
  4057a6:	9b01      	ldr	r3, [sp, #4]
  4057a8:	2800      	cmp	r0, #0
  4057aa:	f000 82e5 	beq.w	405d78 <_vfiprintf_r+0xc28>
  4057ae:	eba0 020b 	sub.w	r2, r0, fp
  4057b2:	9205      	str	r2, [sp, #20]
  4057b4:	9607      	str	r6, [sp, #28]
  4057b6:	9302      	str	r3, [sp, #8]
  4057b8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4057bc:	2400      	movs	r4, #0
  4057be:	e619      	b.n	4053f4 <_vfiprintf_r+0x2a4>
  4057c0:	f898 2000 	ldrb.w	r2, [r8]
  4057c4:	2a2a      	cmp	r2, #42	; 0x2a
  4057c6:	f108 0701 	add.w	r7, r8, #1
  4057ca:	f000 82e9 	beq.w	405da0 <_vfiprintf_r+0xc50>
  4057ce:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4057d2:	2909      	cmp	r1, #9
  4057d4:	46b8      	mov	r8, r7
  4057d6:	f04f 0400 	mov.w	r4, #0
  4057da:	f63f ad2d 	bhi.w	405238 <_vfiprintf_r+0xe8>
  4057de:	f818 2b01 	ldrb.w	r2, [r8], #1
  4057e2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4057e6:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4057ea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4057ee:	2909      	cmp	r1, #9
  4057f0:	d9f5      	bls.n	4057de <_vfiprintf_r+0x68e>
  4057f2:	e521      	b.n	405238 <_vfiprintf_r+0xe8>
  4057f4:	f043 0320 	orr.w	r3, r3, #32
  4057f8:	f898 2000 	ldrb.w	r2, [r8]
  4057fc:	e51a      	b.n	405234 <_vfiprintf_r+0xe4>
  4057fe:	9608      	str	r6, [sp, #32]
  405800:	2800      	cmp	r0, #0
  405802:	f040 82db 	bne.w	405dbc <_vfiprintf_r+0xc6c>
  405806:	2a00      	cmp	r2, #0
  405808:	f000 80e7 	beq.w	4059da <_vfiprintf_r+0x88a>
  40580c:	2101      	movs	r1, #1
  40580e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  405812:	f04f 0200 	mov.w	r2, #0
  405816:	9101      	str	r1, [sp, #4]
  405818:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40581c:	9105      	str	r1, [sp, #20]
  40581e:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  405822:	e77b      	b.n	40571c <_vfiprintf_r+0x5cc>
  405824:	9a07      	ldr	r2, [sp, #28]
  405826:	6813      	ldr	r3, [r2, #0]
  405828:	3204      	adds	r2, #4
  40582a:	9207      	str	r2, [sp, #28]
  40582c:	9a03      	ldr	r2, [sp, #12]
  40582e:	601a      	str	r2, [r3, #0]
  405830:	e4cb      	b.n	4051ca <_vfiprintf_r+0x7a>
  405832:	aa0f      	add	r2, sp, #60	; 0x3c
  405834:	9904      	ldr	r1, [sp, #16]
  405836:	4620      	mov	r0, r4
  405838:	f7ff fc4a 	bl	4050d0 <__sprint_r.part.0>
  40583c:	2800      	cmp	r0, #0
  40583e:	f040 8139 	bne.w	405ab4 <_vfiprintf_r+0x964>
  405842:	9910      	ldr	r1, [sp, #64]	; 0x40
  405844:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405846:	f101 0c01 	add.w	ip, r1, #1
  40584a:	46ce      	mov	lr, r9
  40584c:	e5ff      	b.n	40544e <_vfiprintf_r+0x2fe>
  40584e:	9910      	ldr	r1, [sp, #64]	; 0x40
  405850:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405852:	1c48      	adds	r0, r1, #1
  405854:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405858:	2d00      	cmp	r5, #0
  40585a:	f43f ae22 	beq.w	4054a2 <_vfiprintf_r+0x352>
  40585e:	3201      	adds	r2, #1
  405860:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  405864:	2101      	movs	r1, #1
  405866:	2807      	cmp	r0, #7
  405868:	9211      	str	r2, [sp, #68]	; 0x44
  40586a:	9010      	str	r0, [sp, #64]	; 0x40
  40586c:	f8ca 5000 	str.w	r5, [sl]
  405870:	f8ca 1004 	str.w	r1, [sl, #4]
  405874:	f340 8108 	ble.w	405a88 <_vfiprintf_r+0x938>
  405878:	2a00      	cmp	r2, #0
  40587a:	f040 81bc 	bne.w	405bf6 <_vfiprintf_r+0xaa6>
  40587e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405880:	2b00      	cmp	r3, #0
  405882:	f43f ae1f 	beq.w	4054c4 <_vfiprintf_r+0x374>
  405886:	ab0e      	add	r3, sp, #56	; 0x38
  405888:	2202      	movs	r2, #2
  40588a:	4608      	mov	r0, r1
  40588c:	931c      	str	r3, [sp, #112]	; 0x70
  40588e:	921d      	str	r2, [sp, #116]	; 0x74
  405890:	46ca      	mov	sl, r9
  405892:	4601      	mov	r1, r0
  405894:	f10a 0a08 	add.w	sl, sl, #8
  405898:	3001      	adds	r0, #1
  40589a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40589c:	2b80      	cmp	r3, #128	; 0x80
  40589e:	f43f ae19 	beq.w	4054d4 <_vfiprintf_r+0x384>
  4058a2:	9b05      	ldr	r3, [sp, #20]
  4058a4:	1ae4      	subs	r4, r4, r3
  4058a6:	2c00      	cmp	r4, #0
  4058a8:	dd2e      	ble.n	405908 <_vfiprintf_r+0x7b8>
  4058aa:	2c10      	cmp	r4, #16
  4058ac:	4db3      	ldr	r5, [pc, #716]	; (405b7c <_vfiprintf_r+0xa2c>)
  4058ae:	dd1e      	ble.n	4058ee <_vfiprintf_r+0x79e>
  4058b0:	46d6      	mov	lr, sl
  4058b2:	2610      	movs	r6, #16
  4058b4:	9f06      	ldr	r7, [sp, #24]
  4058b6:	f8dd a010 	ldr.w	sl, [sp, #16]
  4058ba:	e006      	b.n	4058ca <_vfiprintf_r+0x77a>
  4058bc:	1c88      	adds	r0, r1, #2
  4058be:	f10e 0e08 	add.w	lr, lr, #8
  4058c2:	4619      	mov	r1, r3
  4058c4:	3c10      	subs	r4, #16
  4058c6:	2c10      	cmp	r4, #16
  4058c8:	dd10      	ble.n	4058ec <_vfiprintf_r+0x79c>
  4058ca:	1c4b      	adds	r3, r1, #1
  4058cc:	3210      	adds	r2, #16
  4058ce:	2b07      	cmp	r3, #7
  4058d0:	9211      	str	r2, [sp, #68]	; 0x44
  4058d2:	e88e 0060 	stmia.w	lr, {r5, r6}
  4058d6:	9310      	str	r3, [sp, #64]	; 0x40
  4058d8:	ddf0      	ble.n	4058bc <_vfiprintf_r+0x76c>
  4058da:	2a00      	cmp	r2, #0
  4058dc:	d165      	bne.n	4059aa <_vfiprintf_r+0x85a>
  4058de:	3c10      	subs	r4, #16
  4058e0:	2c10      	cmp	r4, #16
  4058e2:	f04f 0001 	mov.w	r0, #1
  4058e6:	4611      	mov	r1, r2
  4058e8:	46ce      	mov	lr, r9
  4058ea:	dcee      	bgt.n	4058ca <_vfiprintf_r+0x77a>
  4058ec:	46f2      	mov	sl, lr
  4058ee:	4422      	add	r2, r4
  4058f0:	2807      	cmp	r0, #7
  4058f2:	9211      	str	r2, [sp, #68]	; 0x44
  4058f4:	f8ca 5000 	str.w	r5, [sl]
  4058f8:	f8ca 4004 	str.w	r4, [sl, #4]
  4058fc:	9010      	str	r0, [sp, #64]	; 0x40
  4058fe:	f300 8085 	bgt.w	405a0c <_vfiprintf_r+0x8bc>
  405902:	f10a 0a08 	add.w	sl, sl, #8
  405906:	3001      	adds	r0, #1
  405908:	9905      	ldr	r1, [sp, #20]
  40590a:	f8ca b000 	str.w	fp, [sl]
  40590e:	440a      	add	r2, r1
  405910:	2807      	cmp	r0, #7
  405912:	9211      	str	r2, [sp, #68]	; 0x44
  405914:	f8ca 1004 	str.w	r1, [sl, #4]
  405918:	9010      	str	r0, [sp, #64]	; 0x40
  40591a:	f340 8082 	ble.w	405a22 <_vfiprintf_r+0x8d2>
  40591e:	2a00      	cmp	r2, #0
  405920:	f040 8118 	bne.w	405b54 <_vfiprintf_r+0xa04>
  405924:	9b02      	ldr	r3, [sp, #8]
  405926:	9210      	str	r2, [sp, #64]	; 0x40
  405928:	0758      	lsls	r0, r3, #29
  40592a:	d535      	bpl.n	405998 <_vfiprintf_r+0x848>
  40592c:	9b08      	ldr	r3, [sp, #32]
  40592e:	9901      	ldr	r1, [sp, #4]
  405930:	1a5c      	subs	r4, r3, r1
  405932:	2c00      	cmp	r4, #0
  405934:	f340 80e7 	ble.w	405b06 <_vfiprintf_r+0x9b6>
  405938:	46ca      	mov	sl, r9
  40593a:	2c10      	cmp	r4, #16
  40593c:	f340 8218 	ble.w	405d70 <_vfiprintf_r+0xc20>
  405940:	9910      	ldr	r1, [sp, #64]	; 0x40
  405942:	4e8f      	ldr	r6, [pc, #572]	; (405b80 <_vfiprintf_r+0xa30>)
  405944:	9f06      	ldr	r7, [sp, #24]
  405946:	f8dd b010 	ldr.w	fp, [sp, #16]
  40594a:	2510      	movs	r5, #16
  40594c:	e006      	b.n	40595c <_vfiprintf_r+0x80c>
  40594e:	1c88      	adds	r0, r1, #2
  405950:	f10a 0a08 	add.w	sl, sl, #8
  405954:	4619      	mov	r1, r3
  405956:	3c10      	subs	r4, #16
  405958:	2c10      	cmp	r4, #16
  40595a:	dd11      	ble.n	405980 <_vfiprintf_r+0x830>
  40595c:	1c4b      	adds	r3, r1, #1
  40595e:	3210      	adds	r2, #16
  405960:	2b07      	cmp	r3, #7
  405962:	9211      	str	r2, [sp, #68]	; 0x44
  405964:	f8ca 6000 	str.w	r6, [sl]
  405968:	f8ca 5004 	str.w	r5, [sl, #4]
  40596c:	9310      	str	r3, [sp, #64]	; 0x40
  40596e:	ddee      	ble.n	40594e <_vfiprintf_r+0x7fe>
  405970:	bb42      	cbnz	r2, 4059c4 <_vfiprintf_r+0x874>
  405972:	3c10      	subs	r4, #16
  405974:	2c10      	cmp	r4, #16
  405976:	f04f 0001 	mov.w	r0, #1
  40597a:	4611      	mov	r1, r2
  40597c:	46ca      	mov	sl, r9
  40597e:	dced      	bgt.n	40595c <_vfiprintf_r+0x80c>
  405980:	4422      	add	r2, r4
  405982:	2807      	cmp	r0, #7
  405984:	9211      	str	r2, [sp, #68]	; 0x44
  405986:	f8ca 6000 	str.w	r6, [sl]
  40598a:	f8ca 4004 	str.w	r4, [sl, #4]
  40598e:	9010      	str	r0, [sp, #64]	; 0x40
  405990:	dd51      	ble.n	405a36 <_vfiprintf_r+0x8e6>
  405992:	2a00      	cmp	r2, #0
  405994:	f040 819b 	bne.w	405cce <_vfiprintf_r+0xb7e>
  405998:	9b03      	ldr	r3, [sp, #12]
  40599a:	9a08      	ldr	r2, [sp, #32]
  40599c:	9901      	ldr	r1, [sp, #4]
  40599e:	428a      	cmp	r2, r1
  4059a0:	bfac      	ite	ge
  4059a2:	189b      	addge	r3, r3, r2
  4059a4:	185b      	addlt	r3, r3, r1
  4059a6:	9303      	str	r3, [sp, #12]
  4059a8:	e04e      	b.n	405a48 <_vfiprintf_r+0x8f8>
  4059aa:	aa0f      	add	r2, sp, #60	; 0x3c
  4059ac:	4651      	mov	r1, sl
  4059ae:	4638      	mov	r0, r7
  4059b0:	f7ff fb8e 	bl	4050d0 <__sprint_r.part.0>
  4059b4:	2800      	cmp	r0, #0
  4059b6:	f040 813f 	bne.w	405c38 <_vfiprintf_r+0xae8>
  4059ba:	9910      	ldr	r1, [sp, #64]	; 0x40
  4059bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4059be:	1c48      	adds	r0, r1, #1
  4059c0:	46ce      	mov	lr, r9
  4059c2:	e77f      	b.n	4058c4 <_vfiprintf_r+0x774>
  4059c4:	aa0f      	add	r2, sp, #60	; 0x3c
  4059c6:	4659      	mov	r1, fp
  4059c8:	4638      	mov	r0, r7
  4059ca:	f7ff fb81 	bl	4050d0 <__sprint_r.part.0>
  4059ce:	b960      	cbnz	r0, 4059ea <_vfiprintf_r+0x89a>
  4059d0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4059d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4059d4:	1c48      	adds	r0, r1, #1
  4059d6:	46ca      	mov	sl, r9
  4059d8:	e7bd      	b.n	405956 <_vfiprintf_r+0x806>
  4059da:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4059dc:	f8dd b010 	ldr.w	fp, [sp, #16]
  4059e0:	2b00      	cmp	r3, #0
  4059e2:	f040 81d4 	bne.w	405d8e <_vfiprintf_r+0xc3e>
  4059e6:	2300      	movs	r3, #0
  4059e8:	9310      	str	r3, [sp, #64]	; 0x40
  4059ea:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4059ee:	f013 0f01 	tst.w	r3, #1
  4059f2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4059f6:	d102      	bne.n	4059fe <_vfiprintf_r+0x8ae>
  4059f8:	059a      	lsls	r2, r3, #22
  4059fa:	f140 80de 	bpl.w	405bba <_vfiprintf_r+0xa6a>
  4059fe:	065b      	lsls	r3, r3, #25
  405a00:	f53f acb2 	bmi.w	405368 <_vfiprintf_r+0x218>
  405a04:	9803      	ldr	r0, [sp, #12]
  405a06:	b02d      	add	sp, #180	; 0xb4
  405a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405a0c:	2a00      	cmp	r2, #0
  405a0e:	f040 8106 	bne.w	405c1e <_vfiprintf_r+0xace>
  405a12:	9a05      	ldr	r2, [sp, #20]
  405a14:	921d      	str	r2, [sp, #116]	; 0x74
  405a16:	2301      	movs	r3, #1
  405a18:	9211      	str	r2, [sp, #68]	; 0x44
  405a1a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  405a1e:	9310      	str	r3, [sp, #64]	; 0x40
  405a20:	46ca      	mov	sl, r9
  405a22:	f10a 0a08 	add.w	sl, sl, #8
  405a26:	9b02      	ldr	r3, [sp, #8]
  405a28:	0759      	lsls	r1, r3, #29
  405a2a:	d504      	bpl.n	405a36 <_vfiprintf_r+0x8e6>
  405a2c:	9b08      	ldr	r3, [sp, #32]
  405a2e:	9901      	ldr	r1, [sp, #4]
  405a30:	1a5c      	subs	r4, r3, r1
  405a32:	2c00      	cmp	r4, #0
  405a34:	dc81      	bgt.n	40593a <_vfiprintf_r+0x7ea>
  405a36:	9b03      	ldr	r3, [sp, #12]
  405a38:	9908      	ldr	r1, [sp, #32]
  405a3a:	9801      	ldr	r0, [sp, #4]
  405a3c:	4281      	cmp	r1, r0
  405a3e:	bfac      	ite	ge
  405a40:	185b      	addge	r3, r3, r1
  405a42:	181b      	addlt	r3, r3, r0
  405a44:	9303      	str	r3, [sp, #12]
  405a46:	bb72      	cbnz	r2, 405aa6 <_vfiprintf_r+0x956>
  405a48:	2300      	movs	r3, #0
  405a4a:	9310      	str	r3, [sp, #64]	; 0x40
  405a4c:	46ca      	mov	sl, r9
  405a4e:	f7ff bbbc 	b.w	4051ca <_vfiprintf_r+0x7a>
  405a52:	aa0f      	add	r2, sp, #60	; 0x3c
  405a54:	9904      	ldr	r1, [sp, #16]
  405a56:	4620      	mov	r0, r4
  405a58:	f7ff fb3a 	bl	4050d0 <__sprint_r.part.0>
  405a5c:	bb50      	cbnz	r0, 405ab4 <_vfiprintf_r+0x964>
  405a5e:	9910      	ldr	r1, [sp, #64]	; 0x40
  405a60:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405a62:	f101 0e01 	add.w	lr, r1, #1
  405a66:	46cc      	mov	ip, r9
  405a68:	e548      	b.n	4054fc <_vfiprintf_r+0x3ac>
  405a6a:	2a00      	cmp	r2, #0
  405a6c:	f040 8140 	bne.w	405cf0 <_vfiprintf_r+0xba0>
  405a70:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  405a74:	2900      	cmp	r1, #0
  405a76:	f000 811b 	beq.w	405cb0 <_vfiprintf_r+0xb60>
  405a7a:	2201      	movs	r2, #1
  405a7c:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  405a80:	4610      	mov	r0, r2
  405a82:	921d      	str	r2, [sp, #116]	; 0x74
  405a84:	911c      	str	r1, [sp, #112]	; 0x70
  405a86:	46ca      	mov	sl, r9
  405a88:	4601      	mov	r1, r0
  405a8a:	f10a 0a08 	add.w	sl, sl, #8
  405a8e:	3001      	adds	r0, #1
  405a90:	e507      	b.n	4054a2 <_vfiprintf_r+0x352>
  405a92:	9b02      	ldr	r3, [sp, #8]
  405a94:	2a01      	cmp	r2, #1
  405a96:	f000 8098 	beq.w	405bca <_vfiprintf_r+0xa7a>
  405a9a:	2a02      	cmp	r2, #2
  405a9c:	d10d      	bne.n	405aba <_vfiprintf_r+0x96a>
  405a9e:	9302      	str	r3, [sp, #8]
  405aa0:	2600      	movs	r6, #0
  405aa2:	2700      	movs	r7, #0
  405aa4:	e5b0      	b.n	405608 <_vfiprintf_r+0x4b8>
  405aa6:	aa0f      	add	r2, sp, #60	; 0x3c
  405aa8:	9904      	ldr	r1, [sp, #16]
  405aaa:	9806      	ldr	r0, [sp, #24]
  405aac:	f7ff fb10 	bl	4050d0 <__sprint_r.part.0>
  405ab0:	2800      	cmp	r0, #0
  405ab2:	d0c9      	beq.n	405a48 <_vfiprintf_r+0x8f8>
  405ab4:	f8dd b010 	ldr.w	fp, [sp, #16]
  405ab8:	e797      	b.n	4059ea <_vfiprintf_r+0x89a>
  405aba:	9302      	str	r3, [sp, #8]
  405abc:	2600      	movs	r6, #0
  405abe:	2700      	movs	r7, #0
  405ac0:	4649      	mov	r1, r9
  405ac2:	e000      	b.n	405ac6 <_vfiprintf_r+0x976>
  405ac4:	4659      	mov	r1, fp
  405ac6:	08f2      	lsrs	r2, r6, #3
  405ac8:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  405acc:	08f8      	lsrs	r0, r7, #3
  405ace:	f006 0307 	and.w	r3, r6, #7
  405ad2:	4607      	mov	r7, r0
  405ad4:	4616      	mov	r6, r2
  405ad6:	3330      	adds	r3, #48	; 0x30
  405ad8:	ea56 0207 	orrs.w	r2, r6, r7
  405adc:	f801 3c01 	strb.w	r3, [r1, #-1]
  405ae0:	f101 3bff 	add.w	fp, r1, #4294967295
  405ae4:	d1ee      	bne.n	405ac4 <_vfiprintf_r+0x974>
  405ae6:	9a02      	ldr	r2, [sp, #8]
  405ae8:	07d6      	lsls	r6, r2, #31
  405aea:	f57f ad9d 	bpl.w	405628 <_vfiprintf_r+0x4d8>
  405aee:	2b30      	cmp	r3, #48	; 0x30
  405af0:	f43f ad9a 	beq.w	405628 <_vfiprintf_r+0x4d8>
  405af4:	3902      	subs	r1, #2
  405af6:	2330      	movs	r3, #48	; 0x30
  405af8:	f80b 3c01 	strb.w	r3, [fp, #-1]
  405afc:	eba9 0301 	sub.w	r3, r9, r1
  405b00:	9305      	str	r3, [sp, #20]
  405b02:	468b      	mov	fp, r1
  405b04:	e476      	b.n	4053f4 <_vfiprintf_r+0x2a4>
  405b06:	9b03      	ldr	r3, [sp, #12]
  405b08:	9a08      	ldr	r2, [sp, #32]
  405b0a:	428a      	cmp	r2, r1
  405b0c:	bfac      	ite	ge
  405b0e:	189b      	addge	r3, r3, r2
  405b10:	185b      	addlt	r3, r3, r1
  405b12:	9303      	str	r3, [sp, #12]
  405b14:	e798      	b.n	405a48 <_vfiprintf_r+0x8f8>
  405b16:	2202      	movs	r2, #2
  405b18:	e44d      	b.n	4053b6 <_vfiprintf_r+0x266>
  405b1a:	2f00      	cmp	r7, #0
  405b1c:	bf08      	it	eq
  405b1e:	2e0a      	cmpeq	r6, #10
  405b20:	d352      	bcc.n	405bc8 <_vfiprintf_r+0xa78>
  405b22:	46cb      	mov	fp, r9
  405b24:	4630      	mov	r0, r6
  405b26:	4639      	mov	r1, r7
  405b28:	220a      	movs	r2, #10
  405b2a:	2300      	movs	r3, #0
  405b2c:	f001 fc44 	bl	4073b8 <__aeabi_uldivmod>
  405b30:	3230      	adds	r2, #48	; 0x30
  405b32:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  405b36:	4630      	mov	r0, r6
  405b38:	4639      	mov	r1, r7
  405b3a:	2300      	movs	r3, #0
  405b3c:	220a      	movs	r2, #10
  405b3e:	f001 fc3b 	bl	4073b8 <__aeabi_uldivmod>
  405b42:	4606      	mov	r6, r0
  405b44:	460f      	mov	r7, r1
  405b46:	ea56 0307 	orrs.w	r3, r6, r7
  405b4a:	d1eb      	bne.n	405b24 <_vfiprintf_r+0x9d4>
  405b4c:	e56c      	b.n	405628 <_vfiprintf_r+0x4d8>
  405b4e:	9405      	str	r4, [sp, #20]
  405b50:	46cb      	mov	fp, r9
  405b52:	e44f      	b.n	4053f4 <_vfiprintf_r+0x2a4>
  405b54:	aa0f      	add	r2, sp, #60	; 0x3c
  405b56:	9904      	ldr	r1, [sp, #16]
  405b58:	9806      	ldr	r0, [sp, #24]
  405b5a:	f7ff fab9 	bl	4050d0 <__sprint_r.part.0>
  405b5e:	2800      	cmp	r0, #0
  405b60:	d1a8      	bne.n	405ab4 <_vfiprintf_r+0x964>
  405b62:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405b64:	46ca      	mov	sl, r9
  405b66:	e75e      	b.n	405a26 <_vfiprintf_r+0x8d6>
  405b68:	aa0f      	add	r2, sp, #60	; 0x3c
  405b6a:	9904      	ldr	r1, [sp, #16]
  405b6c:	9806      	ldr	r0, [sp, #24]
  405b6e:	f7ff faaf 	bl	4050d0 <__sprint_r.part.0>
  405b72:	2800      	cmp	r0, #0
  405b74:	d19e      	bne.n	405ab4 <_vfiprintf_r+0x964>
  405b76:	46ca      	mov	sl, r9
  405b78:	f7ff bbc0 	b.w	4052fc <_vfiprintf_r+0x1ac>
  405b7c:	00408170 	.word	0x00408170
  405b80:	00408160 	.word	0x00408160
  405b84:	3104      	adds	r1, #4
  405b86:	6816      	ldr	r6, [r2, #0]
  405b88:	9107      	str	r1, [sp, #28]
  405b8a:	2201      	movs	r2, #1
  405b8c:	2700      	movs	r7, #0
  405b8e:	e412      	b.n	4053b6 <_vfiprintf_r+0x266>
  405b90:	9807      	ldr	r0, [sp, #28]
  405b92:	4601      	mov	r1, r0
  405b94:	3104      	adds	r1, #4
  405b96:	6806      	ldr	r6, [r0, #0]
  405b98:	9107      	str	r1, [sp, #28]
  405b9a:	2700      	movs	r7, #0
  405b9c:	e40b      	b.n	4053b6 <_vfiprintf_r+0x266>
  405b9e:	680e      	ldr	r6, [r1, #0]
  405ba0:	3104      	adds	r1, #4
  405ba2:	9107      	str	r1, [sp, #28]
  405ba4:	2700      	movs	r7, #0
  405ba6:	e591      	b.n	4056cc <_vfiprintf_r+0x57c>
  405ba8:	9907      	ldr	r1, [sp, #28]
  405baa:	680e      	ldr	r6, [r1, #0]
  405bac:	460a      	mov	r2, r1
  405bae:	17f7      	asrs	r7, r6, #31
  405bb0:	3204      	adds	r2, #4
  405bb2:	9207      	str	r2, [sp, #28]
  405bb4:	4630      	mov	r0, r6
  405bb6:	4639      	mov	r1, r7
  405bb8:	e50f      	b.n	4055da <_vfiprintf_r+0x48a>
  405bba:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405bbe:	f000 fe7f 	bl	4068c0 <__retarget_lock_release_recursive>
  405bc2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405bc6:	e71a      	b.n	4059fe <_vfiprintf_r+0x8ae>
  405bc8:	9b02      	ldr	r3, [sp, #8]
  405bca:	9302      	str	r3, [sp, #8]
  405bcc:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  405bd0:	3630      	adds	r6, #48	; 0x30
  405bd2:	2301      	movs	r3, #1
  405bd4:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  405bd8:	9305      	str	r3, [sp, #20]
  405bda:	e40b      	b.n	4053f4 <_vfiprintf_r+0x2a4>
  405bdc:	aa0f      	add	r2, sp, #60	; 0x3c
  405bde:	9904      	ldr	r1, [sp, #16]
  405be0:	9806      	ldr	r0, [sp, #24]
  405be2:	f7ff fa75 	bl	4050d0 <__sprint_r.part.0>
  405be6:	2800      	cmp	r0, #0
  405be8:	f47f af64 	bne.w	405ab4 <_vfiprintf_r+0x964>
  405bec:	9910      	ldr	r1, [sp, #64]	; 0x40
  405bee:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405bf0:	1c48      	adds	r0, r1, #1
  405bf2:	46ca      	mov	sl, r9
  405bf4:	e651      	b.n	40589a <_vfiprintf_r+0x74a>
  405bf6:	aa0f      	add	r2, sp, #60	; 0x3c
  405bf8:	9904      	ldr	r1, [sp, #16]
  405bfa:	9806      	ldr	r0, [sp, #24]
  405bfc:	f7ff fa68 	bl	4050d0 <__sprint_r.part.0>
  405c00:	2800      	cmp	r0, #0
  405c02:	f47f af57 	bne.w	405ab4 <_vfiprintf_r+0x964>
  405c06:	9910      	ldr	r1, [sp, #64]	; 0x40
  405c08:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405c0a:	1c48      	adds	r0, r1, #1
  405c0c:	46ca      	mov	sl, r9
  405c0e:	e448      	b.n	4054a2 <_vfiprintf_r+0x352>
  405c10:	2a00      	cmp	r2, #0
  405c12:	f040 8091 	bne.w	405d38 <_vfiprintf_r+0xbe8>
  405c16:	2001      	movs	r0, #1
  405c18:	4611      	mov	r1, r2
  405c1a:	46ca      	mov	sl, r9
  405c1c:	e641      	b.n	4058a2 <_vfiprintf_r+0x752>
  405c1e:	aa0f      	add	r2, sp, #60	; 0x3c
  405c20:	9904      	ldr	r1, [sp, #16]
  405c22:	9806      	ldr	r0, [sp, #24]
  405c24:	f7ff fa54 	bl	4050d0 <__sprint_r.part.0>
  405c28:	2800      	cmp	r0, #0
  405c2a:	f47f af43 	bne.w	405ab4 <_vfiprintf_r+0x964>
  405c2e:	9810      	ldr	r0, [sp, #64]	; 0x40
  405c30:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405c32:	3001      	adds	r0, #1
  405c34:	46ca      	mov	sl, r9
  405c36:	e667      	b.n	405908 <_vfiprintf_r+0x7b8>
  405c38:	46d3      	mov	fp, sl
  405c3a:	e6d6      	b.n	4059ea <_vfiprintf_r+0x89a>
  405c3c:	9e07      	ldr	r6, [sp, #28]
  405c3e:	3607      	adds	r6, #7
  405c40:	f026 0207 	bic.w	r2, r6, #7
  405c44:	f102 0108 	add.w	r1, r2, #8
  405c48:	e9d2 6700 	ldrd	r6, r7, [r2]
  405c4c:	9107      	str	r1, [sp, #28]
  405c4e:	2201      	movs	r2, #1
  405c50:	f7ff bbb1 	b.w	4053b6 <_vfiprintf_r+0x266>
  405c54:	9e07      	ldr	r6, [sp, #28]
  405c56:	3607      	adds	r6, #7
  405c58:	f026 0607 	bic.w	r6, r6, #7
  405c5c:	e9d6 0100 	ldrd	r0, r1, [r6]
  405c60:	f106 0208 	add.w	r2, r6, #8
  405c64:	9207      	str	r2, [sp, #28]
  405c66:	4606      	mov	r6, r0
  405c68:	460f      	mov	r7, r1
  405c6a:	e4b6      	b.n	4055da <_vfiprintf_r+0x48a>
  405c6c:	9e07      	ldr	r6, [sp, #28]
  405c6e:	3607      	adds	r6, #7
  405c70:	f026 0207 	bic.w	r2, r6, #7
  405c74:	f102 0108 	add.w	r1, r2, #8
  405c78:	e9d2 6700 	ldrd	r6, r7, [r2]
  405c7c:	9107      	str	r1, [sp, #28]
  405c7e:	2200      	movs	r2, #0
  405c80:	f7ff bb99 	b.w	4053b6 <_vfiprintf_r+0x266>
  405c84:	9e07      	ldr	r6, [sp, #28]
  405c86:	3607      	adds	r6, #7
  405c88:	f026 0107 	bic.w	r1, r6, #7
  405c8c:	f101 0008 	add.w	r0, r1, #8
  405c90:	9007      	str	r0, [sp, #28]
  405c92:	e9d1 6700 	ldrd	r6, r7, [r1]
  405c96:	e519      	b.n	4056cc <_vfiprintf_r+0x57c>
  405c98:	46cb      	mov	fp, r9
  405c9a:	f7ff bbab 	b.w	4053f4 <_vfiprintf_r+0x2a4>
  405c9e:	252d      	movs	r5, #45	; 0x2d
  405ca0:	4276      	negs	r6, r6
  405ca2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  405ca6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405caa:	2201      	movs	r2, #1
  405cac:	f7ff bb88 	b.w	4053c0 <_vfiprintf_r+0x270>
  405cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405cb2:	b9b3      	cbnz	r3, 405ce2 <_vfiprintf_r+0xb92>
  405cb4:	4611      	mov	r1, r2
  405cb6:	2001      	movs	r0, #1
  405cb8:	46ca      	mov	sl, r9
  405cba:	e5f2      	b.n	4058a2 <_vfiprintf_r+0x752>
  405cbc:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405cc0:	f000 fdfe 	bl	4068c0 <__retarget_lock_release_recursive>
  405cc4:	f04f 33ff 	mov.w	r3, #4294967295
  405cc8:	9303      	str	r3, [sp, #12]
  405cca:	f7ff bb50 	b.w	40536e <_vfiprintf_r+0x21e>
  405cce:	aa0f      	add	r2, sp, #60	; 0x3c
  405cd0:	9904      	ldr	r1, [sp, #16]
  405cd2:	9806      	ldr	r0, [sp, #24]
  405cd4:	f7ff f9fc 	bl	4050d0 <__sprint_r.part.0>
  405cd8:	2800      	cmp	r0, #0
  405cda:	f47f aeeb 	bne.w	405ab4 <_vfiprintf_r+0x964>
  405cde:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405ce0:	e6a9      	b.n	405a36 <_vfiprintf_r+0x8e6>
  405ce2:	ab0e      	add	r3, sp, #56	; 0x38
  405ce4:	2202      	movs	r2, #2
  405ce6:	931c      	str	r3, [sp, #112]	; 0x70
  405ce8:	921d      	str	r2, [sp, #116]	; 0x74
  405cea:	2001      	movs	r0, #1
  405cec:	46ca      	mov	sl, r9
  405cee:	e5d0      	b.n	405892 <_vfiprintf_r+0x742>
  405cf0:	aa0f      	add	r2, sp, #60	; 0x3c
  405cf2:	9904      	ldr	r1, [sp, #16]
  405cf4:	9806      	ldr	r0, [sp, #24]
  405cf6:	f7ff f9eb 	bl	4050d0 <__sprint_r.part.0>
  405cfa:	2800      	cmp	r0, #0
  405cfc:	f47f aeda 	bne.w	405ab4 <_vfiprintf_r+0x964>
  405d00:	9910      	ldr	r1, [sp, #64]	; 0x40
  405d02:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405d04:	1c48      	adds	r0, r1, #1
  405d06:	46ca      	mov	sl, r9
  405d08:	e5a4      	b.n	405854 <_vfiprintf_r+0x704>
  405d0a:	9a07      	ldr	r2, [sp, #28]
  405d0c:	9903      	ldr	r1, [sp, #12]
  405d0e:	6813      	ldr	r3, [r2, #0]
  405d10:	17cd      	asrs	r5, r1, #31
  405d12:	4608      	mov	r0, r1
  405d14:	3204      	adds	r2, #4
  405d16:	4629      	mov	r1, r5
  405d18:	9207      	str	r2, [sp, #28]
  405d1a:	e9c3 0100 	strd	r0, r1, [r3]
  405d1e:	f7ff ba54 	b.w	4051ca <_vfiprintf_r+0x7a>
  405d22:	4658      	mov	r0, fp
  405d24:	9607      	str	r6, [sp, #28]
  405d26:	9302      	str	r3, [sp, #8]
  405d28:	f001 f90a 	bl	406f40 <strlen>
  405d2c:	2400      	movs	r4, #0
  405d2e:	9005      	str	r0, [sp, #20]
  405d30:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405d34:	f7ff bb5e 	b.w	4053f4 <_vfiprintf_r+0x2a4>
  405d38:	aa0f      	add	r2, sp, #60	; 0x3c
  405d3a:	9904      	ldr	r1, [sp, #16]
  405d3c:	9806      	ldr	r0, [sp, #24]
  405d3e:	f7ff f9c7 	bl	4050d0 <__sprint_r.part.0>
  405d42:	2800      	cmp	r0, #0
  405d44:	f47f aeb6 	bne.w	405ab4 <_vfiprintf_r+0x964>
  405d48:	9910      	ldr	r1, [sp, #64]	; 0x40
  405d4a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405d4c:	1c48      	adds	r0, r1, #1
  405d4e:	46ca      	mov	sl, r9
  405d50:	e5a7      	b.n	4058a2 <_vfiprintf_r+0x752>
  405d52:	9910      	ldr	r1, [sp, #64]	; 0x40
  405d54:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405d56:	4e20      	ldr	r6, [pc, #128]	; (405dd8 <_vfiprintf_r+0xc88>)
  405d58:	3101      	adds	r1, #1
  405d5a:	f7ff bb90 	b.w	40547e <_vfiprintf_r+0x32e>
  405d5e:	2c06      	cmp	r4, #6
  405d60:	bf28      	it	cs
  405d62:	2406      	movcs	r4, #6
  405d64:	9405      	str	r4, [sp, #20]
  405d66:	9607      	str	r6, [sp, #28]
  405d68:	9401      	str	r4, [sp, #4]
  405d6a:	f8df b070 	ldr.w	fp, [pc, #112]	; 405ddc <_vfiprintf_r+0xc8c>
  405d6e:	e4d5      	b.n	40571c <_vfiprintf_r+0x5cc>
  405d70:	9810      	ldr	r0, [sp, #64]	; 0x40
  405d72:	4e19      	ldr	r6, [pc, #100]	; (405dd8 <_vfiprintf_r+0xc88>)
  405d74:	3001      	adds	r0, #1
  405d76:	e603      	b.n	405980 <_vfiprintf_r+0x830>
  405d78:	9405      	str	r4, [sp, #20]
  405d7a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405d7e:	9607      	str	r6, [sp, #28]
  405d80:	9302      	str	r3, [sp, #8]
  405d82:	4604      	mov	r4, r0
  405d84:	f7ff bb36 	b.w	4053f4 <_vfiprintf_r+0x2a4>
  405d88:	4686      	mov	lr, r0
  405d8a:	f7ff bbce 	b.w	40552a <_vfiprintf_r+0x3da>
  405d8e:	9806      	ldr	r0, [sp, #24]
  405d90:	aa0f      	add	r2, sp, #60	; 0x3c
  405d92:	4659      	mov	r1, fp
  405d94:	f7ff f99c 	bl	4050d0 <__sprint_r.part.0>
  405d98:	2800      	cmp	r0, #0
  405d9a:	f43f ae24 	beq.w	4059e6 <_vfiprintf_r+0x896>
  405d9e:	e624      	b.n	4059ea <_vfiprintf_r+0x89a>
  405da0:	9907      	ldr	r1, [sp, #28]
  405da2:	f898 2001 	ldrb.w	r2, [r8, #1]
  405da6:	680c      	ldr	r4, [r1, #0]
  405da8:	3104      	adds	r1, #4
  405daa:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  405dae:	46b8      	mov	r8, r7
  405db0:	9107      	str	r1, [sp, #28]
  405db2:	f7ff ba3f 	b.w	405234 <_vfiprintf_r+0xe4>
  405db6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405dba:	e43c      	b.n	405636 <_vfiprintf_r+0x4e6>
  405dbc:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405dc0:	e521      	b.n	405806 <_vfiprintf_r+0x6b6>
  405dc2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405dc6:	f7ff bbf4 	b.w	4055b2 <_vfiprintf_r+0x462>
  405dca:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405dce:	e491      	b.n	4056f4 <_vfiprintf_r+0x5a4>
  405dd0:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405dd4:	e469      	b.n	4056aa <_vfiprintf_r+0x55a>
  405dd6:	bf00      	nop
  405dd8:	00408160 	.word	0x00408160
  405ddc:	00408158 	.word	0x00408158

00405de0 <__sbprintf>:
  405de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405de4:	460c      	mov	r4, r1
  405de6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  405dea:	8989      	ldrh	r1, [r1, #12]
  405dec:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405dee:	89e5      	ldrh	r5, [r4, #14]
  405df0:	9619      	str	r6, [sp, #100]	; 0x64
  405df2:	f021 0102 	bic.w	r1, r1, #2
  405df6:	4606      	mov	r6, r0
  405df8:	69e0      	ldr	r0, [r4, #28]
  405dfa:	f8ad 100c 	strh.w	r1, [sp, #12]
  405dfe:	4617      	mov	r7, r2
  405e00:	f44f 6180 	mov.w	r1, #1024	; 0x400
  405e04:	6a62      	ldr	r2, [r4, #36]	; 0x24
  405e06:	f8ad 500e 	strh.w	r5, [sp, #14]
  405e0a:	4698      	mov	r8, r3
  405e0c:	ad1a      	add	r5, sp, #104	; 0x68
  405e0e:	2300      	movs	r3, #0
  405e10:	9007      	str	r0, [sp, #28]
  405e12:	a816      	add	r0, sp, #88	; 0x58
  405e14:	9209      	str	r2, [sp, #36]	; 0x24
  405e16:	9306      	str	r3, [sp, #24]
  405e18:	9500      	str	r5, [sp, #0]
  405e1a:	9504      	str	r5, [sp, #16]
  405e1c:	9102      	str	r1, [sp, #8]
  405e1e:	9105      	str	r1, [sp, #20]
  405e20:	f000 fd48 	bl	4068b4 <__retarget_lock_init_recursive>
  405e24:	4643      	mov	r3, r8
  405e26:	463a      	mov	r2, r7
  405e28:	4669      	mov	r1, sp
  405e2a:	4630      	mov	r0, r6
  405e2c:	f7ff f990 	bl	405150 <_vfiprintf_r>
  405e30:	1e05      	subs	r5, r0, #0
  405e32:	db07      	blt.n	405e44 <__sbprintf+0x64>
  405e34:	4630      	mov	r0, r6
  405e36:	4669      	mov	r1, sp
  405e38:	f000 f928 	bl	40608c <_fflush_r>
  405e3c:	2800      	cmp	r0, #0
  405e3e:	bf18      	it	ne
  405e40:	f04f 35ff 	movne.w	r5, #4294967295
  405e44:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405e48:	065b      	lsls	r3, r3, #25
  405e4a:	d503      	bpl.n	405e54 <__sbprintf+0x74>
  405e4c:	89a3      	ldrh	r3, [r4, #12]
  405e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405e52:	81a3      	strh	r3, [r4, #12]
  405e54:	9816      	ldr	r0, [sp, #88]	; 0x58
  405e56:	f000 fd2f 	bl	4068b8 <__retarget_lock_close_recursive>
  405e5a:	4628      	mov	r0, r5
  405e5c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  405e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00405e64 <__swsetup_r>:
  405e64:	b538      	push	{r3, r4, r5, lr}
  405e66:	4b30      	ldr	r3, [pc, #192]	; (405f28 <__swsetup_r+0xc4>)
  405e68:	681b      	ldr	r3, [r3, #0]
  405e6a:	4605      	mov	r5, r0
  405e6c:	460c      	mov	r4, r1
  405e6e:	b113      	cbz	r3, 405e76 <__swsetup_r+0x12>
  405e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  405e72:	2a00      	cmp	r2, #0
  405e74:	d038      	beq.n	405ee8 <__swsetup_r+0x84>
  405e76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405e7a:	b293      	uxth	r3, r2
  405e7c:	0718      	lsls	r0, r3, #28
  405e7e:	d50c      	bpl.n	405e9a <__swsetup_r+0x36>
  405e80:	6920      	ldr	r0, [r4, #16]
  405e82:	b1a8      	cbz	r0, 405eb0 <__swsetup_r+0x4c>
  405e84:	f013 0201 	ands.w	r2, r3, #1
  405e88:	d01e      	beq.n	405ec8 <__swsetup_r+0x64>
  405e8a:	6963      	ldr	r3, [r4, #20]
  405e8c:	2200      	movs	r2, #0
  405e8e:	425b      	negs	r3, r3
  405e90:	61a3      	str	r3, [r4, #24]
  405e92:	60a2      	str	r2, [r4, #8]
  405e94:	b1f0      	cbz	r0, 405ed4 <__swsetup_r+0x70>
  405e96:	2000      	movs	r0, #0
  405e98:	bd38      	pop	{r3, r4, r5, pc}
  405e9a:	06d9      	lsls	r1, r3, #27
  405e9c:	d53c      	bpl.n	405f18 <__swsetup_r+0xb4>
  405e9e:	0758      	lsls	r0, r3, #29
  405ea0:	d426      	bmi.n	405ef0 <__swsetup_r+0x8c>
  405ea2:	6920      	ldr	r0, [r4, #16]
  405ea4:	f042 0308 	orr.w	r3, r2, #8
  405ea8:	81a3      	strh	r3, [r4, #12]
  405eaa:	b29b      	uxth	r3, r3
  405eac:	2800      	cmp	r0, #0
  405eae:	d1e9      	bne.n	405e84 <__swsetup_r+0x20>
  405eb0:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405eb4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405eb8:	d0e4      	beq.n	405e84 <__swsetup_r+0x20>
  405eba:	4628      	mov	r0, r5
  405ebc:	4621      	mov	r1, r4
  405ebe:	f000 fd2f 	bl	406920 <__smakebuf_r>
  405ec2:	89a3      	ldrh	r3, [r4, #12]
  405ec4:	6920      	ldr	r0, [r4, #16]
  405ec6:	e7dd      	b.n	405e84 <__swsetup_r+0x20>
  405ec8:	0799      	lsls	r1, r3, #30
  405eca:	bf58      	it	pl
  405ecc:	6962      	ldrpl	r2, [r4, #20]
  405ece:	60a2      	str	r2, [r4, #8]
  405ed0:	2800      	cmp	r0, #0
  405ed2:	d1e0      	bne.n	405e96 <__swsetup_r+0x32>
  405ed4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405ed8:	061a      	lsls	r2, r3, #24
  405eda:	d5dd      	bpl.n	405e98 <__swsetup_r+0x34>
  405edc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405ee0:	81a3      	strh	r3, [r4, #12]
  405ee2:	f04f 30ff 	mov.w	r0, #4294967295
  405ee6:	bd38      	pop	{r3, r4, r5, pc}
  405ee8:	4618      	mov	r0, r3
  405eea:	f000 f927 	bl	40613c <__sinit>
  405eee:	e7c2      	b.n	405e76 <__swsetup_r+0x12>
  405ef0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405ef2:	b151      	cbz	r1, 405f0a <__swsetup_r+0xa6>
  405ef4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405ef8:	4299      	cmp	r1, r3
  405efa:	d004      	beq.n	405f06 <__swsetup_r+0xa2>
  405efc:	4628      	mov	r0, r5
  405efe:	f000 fa43 	bl	406388 <_free_r>
  405f02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405f06:	2300      	movs	r3, #0
  405f08:	6323      	str	r3, [r4, #48]	; 0x30
  405f0a:	2300      	movs	r3, #0
  405f0c:	6920      	ldr	r0, [r4, #16]
  405f0e:	6063      	str	r3, [r4, #4]
  405f10:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  405f14:	6020      	str	r0, [r4, #0]
  405f16:	e7c5      	b.n	405ea4 <__swsetup_r+0x40>
  405f18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  405f1c:	2309      	movs	r3, #9
  405f1e:	602b      	str	r3, [r5, #0]
  405f20:	f04f 30ff 	mov.w	r0, #4294967295
  405f24:	81a2      	strh	r2, [r4, #12]
  405f26:	bd38      	pop	{r3, r4, r5, pc}
  405f28:	20400050 	.word	0x20400050

00405f2c <register_fini>:
  405f2c:	4b02      	ldr	r3, [pc, #8]	; (405f38 <register_fini+0xc>)
  405f2e:	b113      	cbz	r3, 405f36 <register_fini+0xa>
  405f30:	4802      	ldr	r0, [pc, #8]	; (405f3c <register_fini+0x10>)
  405f32:	f000 b805 	b.w	405f40 <atexit>
  405f36:	4770      	bx	lr
  405f38:	00000000 	.word	0x00000000
  405f3c:	004061ad 	.word	0x004061ad

00405f40 <atexit>:
  405f40:	2300      	movs	r3, #0
  405f42:	4601      	mov	r1, r0
  405f44:	461a      	mov	r2, r3
  405f46:	4618      	mov	r0, r3
  405f48:	f001 b90e 	b.w	407168 <__register_exitproc>

00405f4c <__sflush_r>:
  405f4c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  405f50:	b29a      	uxth	r2, r3
  405f52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405f56:	460d      	mov	r5, r1
  405f58:	0711      	lsls	r1, r2, #28
  405f5a:	4680      	mov	r8, r0
  405f5c:	d43a      	bmi.n	405fd4 <__sflush_r+0x88>
  405f5e:	686a      	ldr	r2, [r5, #4]
  405f60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  405f64:	2a00      	cmp	r2, #0
  405f66:	81ab      	strh	r3, [r5, #12]
  405f68:	dd6f      	ble.n	40604a <__sflush_r+0xfe>
  405f6a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  405f6c:	2c00      	cmp	r4, #0
  405f6e:	d049      	beq.n	406004 <__sflush_r+0xb8>
  405f70:	2200      	movs	r2, #0
  405f72:	b29b      	uxth	r3, r3
  405f74:	f8d8 6000 	ldr.w	r6, [r8]
  405f78:	f8c8 2000 	str.w	r2, [r8]
  405f7c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  405f80:	d067      	beq.n	406052 <__sflush_r+0x106>
  405f82:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  405f84:	075f      	lsls	r7, r3, #29
  405f86:	d505      	bpl.n	405f94 <__sflush_r+0x48>
  405f88:	6869      	ldr	r1, [r5, #4]
  405f8a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  405f8c:	1a52      	subs	r2, r2, r1
  405f8e:	b10b      	cbz	r3, 405f94 <__sflush_r+0x48>
  405f90:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  405f92:	1ad2      	subs	r2, r2, r3
  405f94:	2300      	movs	r3, #0
  405f96:	69e9      	ldr	r1, [r5, #28]
  405f98:	4640      	mov	r0, r8
  405f9a:	47a0      	blx	r4
  405f9c:	1c44      	adds	r4, r0, #1
  405f9e:	d03c      	beq.n	40601a <__sflush_r+0xce>
  405fa0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  405fa4:	692a      	ldr	r2, [r5, #16]
  405fa6:	602a      	str	r2, [r5, #0]
  405fa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  405fac:	2200      	movs	r2, #0
  405fae:	81ab      	strh	r3, [r5, #12]
  405fb0:	04db      	lsls	r3, r3, #19
  405fb2:	606a      	str	r2, [r5, #4]
  405fb4:	d447      	bmi.n	406046 <__sflush_r+0xfa>
  405fb6:	6b29      	ldr	r1, [r5, #48]	; 0x30
  405fb8:	f8c8 6000 	str.w	r6, [r8]
  405fbc:	b311      	cbz	r1, 406004 <__sflush_r+0xb8>
  405fbe:	f105 0340 	add.w	r3, r5, #64	; 0x40
  405fc2:	4299      	cmp	r1, r3
  405fc4:	d002      	beq.n	405fcc <__sflush_r+0x80>
  405fc6:	4640      	mov	r0, r8
  405fc8:	f000 f9de 	bl	406388 <_free_r>
  405fcc:	2000      	movs	r0, #0
  405fce:	6328      	str	r0, [r5, #48]	; 0x30
  405fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405fd4:	692e      	ldr	r6, [r5, #16]
  405fd6:	b1ae      	cbz	r6, 406004 <__sflush_r+0xb8>
  405fd8:	682c      	ldr	r4, [r5, #0]
  405fda:	602e      	str	r6, [r5, #0]
  405fdc:	0791      	lsls	r1, r2, #30
  405fde:	bf0c      	ite	eq
  405fe0:	696b      	ldreq	r3, [r5, #20]
  405fe2:	2300      	movne	r3, #0
  405fe4:	1ba4      	subs	r4, r4, r6
  405fe6:	60ab      	str	r3, [r5, #8]
  405fe8:	e00a      	b.n	406000 <__sflush_r+0xb4>
  405fea:	4623      	mov	r3, r4
  405fec:	4632      	mov	r2, r6
  405fee:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  405ff0:	69e9      	ldr	r1, [r5, #28]
  405ff2:	4640      	mov	r0, r8
  405ff4:	47b8      	blx	r7
  405ff6:	2800      	cmp	r0, #0
  405ff8:	eba4 0400 	sub.w	r4, r4, r0
  405ffc:	4406      	add	r6, r0
  405ffe:	dd04      	ble.n	40600a <__sflush_r+0xbe>
  406000:	2c00      	cmp	r4, #0
  406002:	dcf2      	bgt.n	405fea <__sflush_r+0x9e>
  406004:	2000      	movs	r0, #0
  406006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40600a:	89ab      	ldrh	r3, [r5, #12]
  40600c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406010:	81ab      	strh	r3, [r5, #12]
  406012:	f04f 30ff 	mov.w	r0, #4294967295
  406016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40601a:	f8d8 4000 	ldr.w	r4, [r8]
  40601e:	2c1d      	cmp	r4, #29
  406020:	d8f3      	bhi.n	40600a <__sflush_r+0xbe>
  406022:	4b19      	ldr	r3, [pc, #100]	; (406088 <__sflush_r+0x13c>)
  406024:	40e3      	lsrs	r3, r4
  406026:	43db      	mvns	r3, r3
  406028:	f013 0301 	ands.w	r3, r3, #1
  40602c:	d1ed      	bne.n	40600a <__sflush_r+0xbe>
  40602e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  406032:	606b      	str	r3, [r5, #4]
  406034:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  406038:	6929      	ldr	r1, [r5, #16]
  40603a:	81ab      	strh	r3, [r5, #12]
  40603c:	04da      	lsls	r2, r3, #19
  40603e:	6029      	str	r1, [r5, #0]
  406040:	d5b9      	bpl.n	405fb6 <__sflush_r+0x6a>
  406042:	2c00      	cmp	r4, #0
  406044:	d1b7      	bne.n	405fb6 <__sflush_r+0x6a>
  406046:	6528      	str	r0, [r5, #80]	; 0x50
  406048:	e7b5      	b.n	405fb6 <__sflush_r+0x6a>
  40604a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40604c:	2a00      	cmp	r2, #0
  40604e:	dc8c      	bgt.n	405f6a <__sflush_r+0x1e>
  406050:	e7d8      	b.n	406004 <__sflush_r+0xb8>
  406052:	2301      	movs	r3, #1
  406054:	69e9      	ldr	r1, [r5, #28]
  406056:	4640      	mov	r0, r8
  406058:	47a0      	blx	r4
  40605a:	1c43      	adds	r3, r0, #1
  40605c:	4602      	mov	r2, r0
  40605e:	d002      	beq.n	406066 <__sflush_r+0x11a>
  406060:	89ab      	ldrh	r3, [r5, #12]
  406062:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406064:	e78e      	b.n	405f84 <__sflush_r+0x38>
  406066:	f8d8 3000 	ldr.w	r3, [r8]
  40606a:	2b00      	cmp	r3, #0
  40606c:	d0f8      	beq.n	406060 <__sflush_r+0x114>
  40606e:	2b1d      	cmp	r3, #29
  406070:	d001      	beq.n	406076 <__sflush_r+0x12a>
  406072:	2b16      	cmp	r3, #22
  406074:	d102      	bne.n	40607c <__sflush_r+0x130>
  406076:	f8c8 6000 	str.w	r6, [r8]
  40607a:	e7c3      	b.n	406004 <__sflush_r+0xb8>
  40607c:	89ab      	ldrh	r3, [r5, #12]
  40607e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406082:	81ab      	strh	r3, [r5, #12]
  406084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406088:	20400001 	.word	0x20400001

0040608c <_fflush_r>:
  40608c:	b538      	push	{r3, r4, r5, lr}
  40608e:	460d      	mov	r5, r1
  406090:	4604      	mov	r4, r0
  406092:	b108      	cbz	r0, 406098 <_fflush_r+0xc>
  406094:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406096:	b1bb      	cbz	r3, 4060c8 <_fflush_r+0x3c>
  406098:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40609c:	b188      	cbz	r0, 4060c2 <_fflush_r+0x36>
  40609e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4060a0:	07db      	lsls	r3, r3, #31
  4060a2:	d401      	bmi.n	4060a8 <_fflush_r+0x1c>
  4060a4:	0581      	lsls	r1, r0, #22
  4060a6:	d517      	bpl.n	4060d8 <_fflush_r+0x4c>
  4060a8:	4620      	mov	r0, r4
  4060aa:	4629      	mov	r1, r5
  4060ac:	f7ff ff4e 	bl	405f4c <__sflush_r>
  4060b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4060b2:	07da      	lsls	r2, r3, #31
  4060b4:	4604      	mov	r4, r0
  4060b6:	d402      	bmi.n	4060be <_fflush_r+0x32>
  4060b8:	89ab      	ldrh	r3, [r5, #12]
  4060ba:	059b      	lsls	r3, r3, #22
  4060bc:	d507      	bpl.n	4060ce <_fflush_r+0x42>
  4060be:	4620      	mov	r0, r4
  4060c0:	bd38      	pop	{r3, r4, r5, pc}
  4060c2:	4604      	mov	r4, r0
  4060c4:	4620      	mov	r0, r4
  4060c6:	bd38      	pop	{r3, r4, r5, pc}
  4060c8:	f000 f838 	bl	40613c <__sinit>
  4060cc:	e7e4      	b.n	406098 <_fflush_r+0xc>
  4060ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4060d0:	f000 fbf6 	bl	4068c0 <__retarget_lock_release_recursive>
  4060d4:	4620      	mov	r0, r4
  4060d6:	bd38      	pop	{r3, r4, r5, pc}
  4060d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4060da:	f000 fbef 	bl	4068bc <__retarget_lock_acquire_recursive>
  4060de:	e7e3      	b.n	4060a8 <_fflush_r+0x1c>

004060e0 <_cleanup_r>:
  4060e0:	4901      	ldr	r1, [pc, #4]	; (4060e8 <_cleanup_r+0x8>)
  4060e2:	f000 bbaf 	b.w	406844 <_fwalk_reent>
  4060e6:	bf00      	nop
  4060e8:	00407251 	.word	0x00407251

004060ec <std.isra.0>:
  4060ec:	b510      	push	{r4, lr}
  4060ee:	2300      	movs	r3, #0
  4060f0:	4604      	mov	r4, r0
  4060f2:	8181      	strh	r1, [r0, #12]
  4060f4:	81c2      	strh	r2, [r0, #14]
  4060f6:	6003      	str	r3, [r0, #0]
  4060f8:	6043      	str	r3, [r0, #4]
  4060fa:	6083      	str	r3, [r0, #8]
  4060fc:	6643      	str	r3, [r0, #100]	; 0x64
  4060fe:	6103      	str	r3, [r0, #16]
  406100:	6143      	str	r3, [r0, #20]
  406102:	6183      	str	r3, [r0, #24]
  406104:	4619      	mov	r1, r3
  406106:	2208      	movs	r2, #8
  406108:	305c      	adds	r0, #92	; 0x5c
  40610a:	f7fe ff75 	bl	404ff8 <memset>
  40610e:	4807      	ldr	r0, [pc, #28]	; (40612c <std.isra.0+0x40>)
  406110:	4907      	ldr	r1, [pc, #28]	; (406130 <std.isra.0+0x44>)
  406112:	4a08      	ldr	r2, [pc, #32]	; (406134 <std.isra.0+0x48>)
  406114:	4b08      	ldr	r3, [pc, #32]	; (406138 <std.isra.0+0x4c>)
  406116:	6220      	str	r0, [r4, #32]
  406118:	61e4      	str	r4, [r4, #28]
  40611a:	6261      	str	r1, [r4, #36]	; 0x24
  40611c:	62a2      	str	r2, [r4, #40]	; 0x28
  40611e:	62e3      	str	r3, [r4, #44]	; 0x2c
  406120:	f104 0058 	add.w	r0, r4, #88	; 0x58
  406124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406128:	f000 bbc4 	b.w	4068b4 <__retarget_lock_init_recursive>
  40612c:	00406e95 	.word	0x00406e95
  406130:	00406eb9 	.word	0x00406eb9
  406134:	00406ef5 	.word	0x00406ef5
  406138:	00406f15 	.word	0x00406f15

0040613c <__sinit>:
  40613c:	b510      	push	{r4, lr}
  40613e:	4604      	mov	r4, r0
  406140:	4812      	ldr	r0, [pc, #72]	; (40618c <__sinit+0x50>)
  406142:	f000 fbbb 	bl	4068bc <__retarget_lock_acquire_recursive>
  406146:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  406148:	b9d2      	cbnz	r2, 406180 <__sinit+0x44>
  40614a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40614e:	4810      	ldr	r0, [pc, #64]	; (406190 <__sinit+0x54>)
  406150:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  406154:	2103      	movs	r1, #3
  406156:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40615a:	63e0      	str	r0, [r4, #60]	; 0x3c
  40615c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  406160:	6860      	ldr	r0, [r4, #4]
  406162:	2104      	movs	r1, #4
  406164:	f7ff ffc2 	bl	4060ec <std.isra.0>
  406168:	2201      	movs	r2, #1
  40616a:	2109      	movs	r1, #9
  40616c:	68a0      	ldr	r0, [r4, #8]
  40616e:	f7ff ffbd 	bl	4060ec <std.isra.0>
  406172:	2202      	movs	r2, #2
  406174:	2112      	movs	r1, #18
  406176:	68e0      	ldr	r0, [r4, #12]
  406178:	f7ff ffb8 	bl	4060ec <std.isra.0>
  40617c:	2301      	movs	r3, #1
  40617e:	63a3      	str	r3, [r4, #56]	; 0x38
  406180:	4802      	ldr	r0, [pc, #8]	; (40618c <__sinit+0x50>)
  406182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406186:	f000 bb9b 	b.w	4068c0 <__retarget_lock_release_recursive>
  40618a:	bf00      	nop
  40618c:	2044a89c 	.word	0x2044a89c
  406190:	004060e1 	.word	0x004060e1

00406194 <__sfp_lock_acquire>:
  406194:	4801      	ldr	r0, [pc, #4]	; (40619c <__sfp_lock_acquire+0x8>)
  406196:	f000 bb91 	b.w	4068bc <__retarget_lock_acquire_recursive>
  40619a:	bf00      	nop
  40619c:	2044a8b0 	.word	0x2044a8b0

004061a0 <__sfp_lock_release>:
  4061a0:	4801      	ldr	r0, [pc, #4]	; (4061a8 <__sfp_lock_release+0x8>)
  4061a2:	f000 bb8d 	b.w	4068c0 <__retarget_lock_release_recursive>
  4061a6:	bf00      	nop
  4061a8:	2044a8b0 	.word	0x2044a8b0

004061ac <__libc_fini_array>:
  4061ac:	b538      	push	{r3, r4, r5, lr}
  4061ae:	4c0a      	ldr	r4, [pc, #40]	; (4061d8 <__libc_fini_array+0x2c>)
  4061b0:	4d0a      	ldr	r5, [pc, #40]	; (4061dc <__libc_fini_array+0x30>)
  4061b2:	1b64      	subs	r4, r4, r5
  4061b4:	10a4      	asrs	r4, r4, #2
  4061b6:	d00a      	beq.n	4061ce <__libc_fini_array+0x22>
  4061b8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4061bc:	3b01      	subs	r3, #1
  4061be:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4061c2:	3c01      	subs	r4, #1
  4061c4:	f855 3904 	ldr.w	r3, [r5], #-4
  4061c8:	4798      	blx	r3
  4061ca:	2c00      	cmp	r4, #0
  4061cc:	d1f9      	bne.n	4061c2 <__libc_fini_array+0x16>
  4061ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4061d2:	f002 b869 	b.w	4082a8 <_fini>
  4061d6:	bf00      	nop
  4061d8:	004082b8 	.word	0x004082b8
  4061dc:	004082b4 	.word	0x004082b4

004061e0 <__fputwc>:
  4061e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4061e4:	b082      	sub	sp, #8
  4061e6:	4680      	mov	r8, r0
  4061e8:	4689      	mov	r9, r1
  4061ea:	4614      	mov	r4, r2
  4061ec:	f000 fb54 	bl	406898 <__locale_mb_cur_max>
  4061f0:	2801      	cmp	r0, #1
  4061f2:	d036      	beq.n	406262 <__fputwc+0x82>
  4061f4:	464a      	mov	r2, r9
  4061f6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4061fa:	a901      	add	r1, sp, #4
  4061fc:	4640      	mov	r0, r8
  4061fe:	f000 ff65 	bl	4070cc <_wcrtomb_r>
  406202:	1c42      	adds	r2, r0, #1
  406204:	4606      	mov	r6, r0
  406206:	d025      	beq.n	406254 <__fputwc+0x74>
  406208:	b3a8      	cbz	r0, 406276 <__fputwc+0x96>
  40620a:	f89d e004 	ldrb.w	lr, [sp, #4]
  40620e:	2500      	movs	r5, #0
  406210:	f10d 0a04 	add.w	sl, sp, #4
  406214:	e009      	b.n	40622a <__fputwc+0x4a>
  406216:	6823      	ldr	r3, [r4, #0]
  406218:	1c5a      	adds	r2, r3, #1
  40621a:	6022      	str	r2, [r4, #0]
  40621c:	f883 e000 	strb.w	lr, [r3]
  406220:	3501      	adds	r5, #1
  406222:	42b5      	cmp	r5, r6
  406224:	d227      	bcs.n	406276 <__fputwc+0x96>
  406226:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40622a:	68a3      	ldr	r3, [r4, #8]
  40622c:	3b01      	subs	r3, #1
  40622e:	2b00      	cmp	r3, #0
  406230:	60a3      	str	r3, [r4, #8]
  406232:	daf0      	bge.n	406216 <__fputwc+0x36>
  406234:	69a7      	ldr	r7, [r4, #24]
  406236:	42bb      	cmp	r3, r7
  406238:	4671      	mov	r1, lr
  40623a:	4622      	mov	r2, r4
  40623c:	4640      	mov	r0, r8
  40623e:	db02      	blt.n	406246 <__fputwc+0x66>
  406240:	f1be 0f0a 	cmp.w	lr, #10
  406244:	d1e7      	bne.n	406216 <__fputwc+0x36>
  406246:	f000 fee9 	bl	40701c <__swbuf_r>
  40624a:	1c43      	adds	r3, r0, #1
  40624c:	d1e8      	bne.n	406220 <__fputwc+0x40>
  40624e:	b002      	add	sp, #8
  406250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406254:	89a3      	ldrh	r3, [r4, #12]
  406256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40625a:	81a3      	strh	r3, [r4, #12]
  40625c:	b002      	add	sp, #8
  40625e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406262:	f109 33ff 	add.w	r3, r9, #4294967295
  406266:	2bfe      	cmp	r3, #254	; 0xfe
  406268:	d8c4      	bhi.n	4061f4 <__fputwc+0x14>
  40626a:	fa5f fe89 	uxtb.w	lr, r9
  40626e:	4606      	mov	r6, r0
  406270:	f88d e004 	strb.w	lr, [sp, #4]
  406274:	e7cb      	b.n	40620e <__fputwc+0x2e>
  406276:	4648      	mov	r0, r9
  406278:	b002      	add	sp, #8
  40627a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40627e:	bf00      	nop

00406280 <_fputwc_r>:
  406280:	b530      	push	{r4, r5, lr}
  406282:	6e53      	ldr	r3, [r2, #100]	; 0x64
  406284:	f013 0f01 	tst.w	r3, #1
  406288:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40628c:	4614      	mov	r4, r2
  40628e:	b083      	sub	sp, #12
  406290:	4605      	mov	r5, r0
  406292:	b29a      	uxth	r2, r3
  406294:	d101      	bne.n	40629a <_fputwc_r+0x1a>
  406296:	0590      	lsls	r0, r2, #22
  406298:	d51c      	bpl.n	4062d4 <_fputwc_r+0x54>
  40629a:	0490      	lsls	r0, r2, #18
  40629c:	d406      	bmi.n	4062ac <_fputwc_r+0x2c>
  40629e:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4062a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4062a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4062a8:	81a3      	strh	r3, [r4, #12]
  4062aa:	6662      	str	r2, [r4, #100]	; 0x64
  4062ac:	4628      	mov	r0, r5
  4062ae:	4622      	mov	r2, r4
  4062b0:	f7ff ff96 	bl	4061e0 <__fputwc>
  4062b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4062b6:	07da      	lsls	r2, r3, #31
  4062b8:	4605      	mov	r5, r0
  4062ba:	d402      	bmi.n	4062c2 <_fputwc_r+0x42>
  4062bc:	89a3      	ldrh	r3, [r4, #12]
  4062be:	059b      	lsls	r3, r3, #22
  4062c0:	d502      	bpl.n	4062c8 <_fputwc_r+0x48>
  4062c2:	4628      	mov	r0, r5
  4062c4:	b003      	add	sp, #12
  4062c6:	bd30      	pop	{r4, r5, pc}
  4062c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4062ca:	f000 faf9 	bl	4068c0 <__retarget_lock_release_recursive>
  4062ce:	4628      	mov	r0, r5
  4062d0:	b003      	add	sp, #12
  4062d2:	bd30      	pop	{r4, r5, pc}
  4062d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4062d6:	9101      	str	r1, [sp, #4]
  4062d8:	f000 faf0 	bl	4068bc <__retarget_lock_acquire_recursive>
  4062dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4062e0:	9901      	ldr	r1, [sp, #4]
  4062e2:	b29a      	uxth	r2, r3
  4062e4:	e7d9      	b.n	40629a <_fputwc_r+0x1a>
  4062e6:	bf00      	nop

004062e8 <_malloc_trim_r>:
  4062e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4062ea:	4f24      	ldr	r7, [pc, #144]	; (40637c <_malloc_trim_r+0x94>)
  4062ec:	460c      	mov	r4, r1
  4062ee:	4606      	mov	r6, r0
  4062f0:	f7fe fed0 	bl	405094 <__malloc_lock>
  4062f4:	68bb      	ldr	r3, [r7, #8]
  4062f6:	685d      	ldr	r5, [r3, #4]
  4062f8:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4062fc:	310f      	adds	r1, #15
  4062fe:	f025 0503 	bic.w	r5, r5, #3
  406302:	4429      	add	r1, r5
  406304:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  406308:	f021 010f 	bic.w	r1, r1, #15
  40630c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  406310:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  406314:	db07      	blt.n	406326 <_malloc_trim_r+0x3e>
  406316:	2100      	movs	r1, #0
  406318:	4630      	mov	r0, r6
  40631a:	f7fe fec7 	bl	4050ac <_sbrk_r>
  40631e:	68bb      	ldr	r3, [r7, #8]
  406320:	442b      	add	r3, r5
  406322:	4298      	cmp	r0, r3
  406324:	d004      	beq.n	406330 <_malloc_trim_r+0x48>
  406326:	4630      	mov	r0, r6
  406328:	f7fe feba 	bl	4050a0 <__malloc_unlock>
  40632c:	2000      	movs	r0, #0
  40632e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406330:	4261      	negs	r1, r4
  406332:	4630      	mov	r0, r6
  406334:	f7fe feba 	bl	4050ac <_sbrk_r>
  406338:	3001      	adds	r0, #1
  40633a:	d00d      	beq.n	406358 <_malloc_trim_r+0x70>
  40633c:	4b10      	ldr	r3, [pc, #64]	; (406380 <_malloc_trim_r+0x98>)
  40633e:	68ba      	ldr	r2, [r7, #8]
  406340:	6819      	ldr	r1, [r3, #0]
  406342:	1b2d      	subs	r5, r5, r4
  406344:	f045 0501 	orr.w	r5, r5, #1
  406348:	4630      	mov	r0, r6
  40634a:	1b09      	subs	r1, r1, r4
  40634c:	6055      	str	r5, [r2, #4]
  40634e:	6019      	str	r1, [r3, #0]
  406350:	f7fe fea6 	bl	4050a0 <__malloc_unlock>
  406354:	2001      	movs	r0, #1
  406356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406358:	2100      	movs	r1, #0
  40635a:	4630      	mov	r0, r6
  40635c:	f7fe fea6 	bl	4050ac <_sbrk_r>
  406360:	68ba      	ldr	r2, [r7, #8]
  406362:	1a83      	subs	r3, r0, r2
  406364:	2b0f      	cmp	r3, #15
  406366:	ddde      	ble.n	406326 <_malloc_trim_r+0x3e>
  406368:	4c06      	ldr	r4, [pc, #24]	; (406384 <_malloc_trim_r+0x9c>)
  40636a:	4905      	ldr	r1, [pc, #20]	; (406380 <_malloc_trim_r+0x98>)
  40636c:	6824      	ldr	r4, [r4, #0]
  40636e:	f043 0301 	orr.w	r3, r3, #1
  406372:	1b00      	subs	r0, r0, r4
  406374:	6053      	str	r3, [r2, #4]
  406376:	6008      	str	r0, [r1, #0]
  406378:	e7d5      	b.n	406326 <_malloc_trim_r+0x3e>
  40637a:	bf00      	nop
  40637c:	20400480 	.word	0x20400480
  406380:	2044500c 	.word	0x2044500c
  406384:	20400888 	.word	0x20400888

00406388 <_free_r>:
  406388:	2900      	cmp	r1, #0
  40638a:	d044      	beq.n	406416 <_free_r+0x8e>
  40638c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406390:	460d      	mov	r5, r1
  406392:	4680      	mov	r8, r0
  406394:	f7fe fe7e 	bl	405094 <__malloc_lock>
  406398:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40639c:	4969      	ldr	r1, [pc, #420]	; (406544 <_free_r+0x1bc>)
  40639e:	f027 0301 	bic.w	r3, r7, #1
  4063a2:	f1a5 0408 	sub.w	r4, r5, #8
  4063a6:	18e2      	adds	r2, r4, r3
  4063a8:	688e      	ldr	r6, [r1, #8]
  4063aa:	6850      	ldr	r0, [r2, #4]
  4063ac:	42b2      	cmp	r2, r6
  4063ae:	f020 0003 	bic.w	r0, r0, #3
  4063b2:	d05e      	beq.n	406472 <_free_r+0xea>
  4063b4:	07fe      	lsls	r6, r7, #31
  4063b6:	6050      	str	r0, [r2, #4]
  4063b8:	d40b      	bmi.n	4063d2 <_free_r+0x4a>
  4063ba:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4063be:	1be4      	subs	r4, r4, r7
  4063c0:	f101 0e08 	add.w	lr, r1, #8
  4063c4:	68a5      	ldr	r5, [r4, #8]
  4063c6:	4575      	cmp	r5, lr
  4063c8:	443b      	add	r3, r7
  4063ca:	d06d      	beq.n	4064a8 <_free_r+0x120>
  4063cc:	68e7      	ldr	r7, [r4, #12]
  4063ce:	60ef      	str	r7, [r5, #12]
  4063d0:	60bd      	str	r5, [r7, #8]
  4063d2:	1815      	adds	r5, r2, r0
  4063d4:	686d      	ldr	r5, [r5, #4]
  4063d6:	07ed      	lsls	r5, r5, #31
  4063d8:	d53e      	bpl.n	406458 <_free_r+0xd0>
  4063da:	f043 0201 	orr.w	r2, r3, #1
  4063de:	6062      	str	r2, [r4, #4]
  4063e0:	50e3      	str	r3, [r4, r3]
  4063e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4063e6:	d217      	bcs.n	406418 <_free_r+0x90>
  4063e8:	08db      	lsrs	r3, r3, #3
  4063ea:	1c58      	adds	r0, r3, #1
  4063ec:	109a      	asrs	r2, r3, #2
  4063ee:	684d      	ldr	r5, [r1, #4]
  4063f0:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4063f4:	60a7      	str	r7, [r4, #8]
  4063f6:	2301      	movs	r3, #1
  4063f8:	4093      	lsls	r3, r2
  4063fa:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4063fe:	432b      	orrs	r3, r5
  406400:	3a08      	subs	r2, #8
  406402:	60e2      	str	r2, [r4, #12]
  406404:	604b      	str	r3, [r1, #4]
  406406:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40640a:	60fc      	str	r4, [r7, #12]
  40640c:	4640      	mov	r0, r8
  40640e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406412:	f7fe be45 	b.w	4050a0 <__malloc_unlock>
  406416:	4770      	bx	lr
  406418:	0a5a      	lsrs	r2, r3, #9
  40641a:	2a04      	cmp	r2, #4
  40641c:	d852      	bhi.n	4064c4 <_free_r+0x13c>
  40641e:	099a      	lsrs	r2, r3, #6
  406420:	f102 0739 	add.w	r7, r2, #57	; 0x39
  406424:	00ff      	lsls	r7, r7, #3
  406426:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40642a:	19c8      	adds	r0, r1, r7
  40642c:	59ca      	ldr	r2, [r1, r7]
  40642e:	3808      	subs	r0, #8
  406430:	4290      	cmp	r0, r2
  406432:	d04f      	beq.n	4064d4 <_free_r+0x14c>
  406434:	6851      	ldr	r1, [r2, #4]
  406436:	f021 0103 	bic.w	r1, r1, #3
  40643a:	428b      	cmp	r3, r1
  40643c:	d232      	bcs.n	4064a4 <_free_r+0x11c>
  40643e:	6892      	ldr	r2, [r2, #8]
  406440:	4290      	cmp	r0, r2
  406442:	d1f7      	bne.n	406434 <_free_r+0xac>
  406444:	68c3      	ldr	r3, [r0, #12]
  406446:	60a0      	str	r0, [r4, #8]
  406448:	60e3      	str	r3, [r4, #12]
  40644a:	609c      	str	r4, [r3, #8]
  40644c:	60c4      	str	r4, [r0, #12]
  40644e:	4640      	mov	r0, r8
  406450:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406454:	f7fe be24 	b.w	4050a0 <__malloc_unlock>
  406458:	6895      	ldr	r5, [r2, #8]
  40645a:	4f3b      	ldr	r7, [pc, #236]	; (406548 <_free_r+0x1c0>)
  40645c:	42bd      	cmp	r5, r7
  40645e:	4403      	add	r3, r0
  406460:	d040      	beq.n	4064e4 <_free_r+0x15c>
  406462:	68d0      	ldr	r0, [r2, #12]
  406464:	60e8      	str	r0, [r5, #12]
  406466:	f043 0201 	orr.w	r2, r3, #1
  40646a:	6085      	str	r5, [r0, #8]
  40646c:	6062      	str	r2, [r4, #4]
  40646e:	50e3      	str	r3, [r4, r3]
  406470:	e7b7      	b.n	4063e2 <_free_r+0x5a>
  406472:	07ff      	lsls	r7, r7, #31
  406474:	4403      	add	r3, r0
  406476:	d407      	bmi.n	406488 <_free_r+0x100>
  406478:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40647c:	1aa4      	subs	r4, r4, r2
  40647e:	4413      	add	r3, r2
  406480:	68a0      	ldr	r0, [r4, #8]
  406482:	68e2      	ldr	r2, [r4, #12]
  406484:	60c2      	str	r2, [r0, #12]
  406486:	6090      	str	r0, [r2, #8]
  406488:	4a30      	ldr	r2, [pc, #192]	; (40654c <_free_r+0x1c4>)
  40648a:	6812      	ldr	r2, [r2, #0]
  40648c:	f043 0001 	orr.w	r0, r3, #1
  406490:	4293      	cmp	r3, r2
  406492:	6060      	str	r0, [r4, #4]
  406494:	608c      	str	r4, [r1, #8]
  406496:	d3b9      	bcc.n	40640c <_free_r+0x84>
  406498:	4b2d      	ldr	r3, [pc, #180]	; (406550 <_free_r+0x1c8>)
  40649a:	4640      	mov	r0, r8
  40649c:	6819      	ldr	r1, [r3, #0]
  40649e:	f7ff ff23 	bl	4062e8 <_malloc_trim_r>
  4064a2:	e7b3      	b.n	40640c <_free_r+0x84>
  4064a4:	4610      	mov	r0, r2
  4064a6:	e7cd      	b.n	406444 <_free_r+0xbc>
  4064a8:	1811      	adds	r1, r2, r0
  4064aa:	6849      	ldr	r1, [r1, #4]
  4064ac:	07c9      	lsls	r1, r1, #31
  4064ae:	d444      	bmi.n	40653a <_free_r+0x1b2>
  4064b0:	6891      	ldr	r1, [r2, #8]
  4064b2:	68d2      	ldr	r2, [r2, #12]
  4064b4:	60ca      	str	r2, [r1, #12]
  4064b6:	4403      	add	r3, r0
  4064b8:	f043 0001 	orr.w	r0, r3, #1
  4064bc:	6091      	str	r1, [r2, #8]
  4064be:	6060      	str	r0, [r4, #4]
  4064c0:	50e3      	str	r3, [r4, r3]
  4064c2:	e7a3      	b.n	40640c <_free_r+0x84>
  4064c4:	2a14      	cmp	r2, #20
  4064c6:	d816      	bhi.n	4064f6 <_free_r+0x16e>
  4064c8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4064cc:	00ff      	lsls	r7, r7, #3
  4064ce:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4064d2:	e7aa      	b.n	40642a <_free_r+0xa2>
  4064d4:	10aa      	asrs	r2, r5, #2
  4064d6:	2301      	movs	r3, #1
  4064d8:	684d      	ldr	r5, [r1, #4]
  4064da:	4093      	lsls	r3, r2
  4064dc:	432b      	orrs	r3, r5
  4064de:	604b      	str	r3, [r1, #4]
  4064e0:	4603      	mov	r3, r0
  4064e2:	e7b0      	b.n	406446 <_free_r+0xbe>
  4064e4:	f043 0201 	orr.w	r2, r3, #1
  4064e8:	614c      	str	r4, [r1, #20]
  4064ea:	610c      	str	r4, [r1, #16]
  4064ec:	60e5      	str	r5, [r4, #12]
  4064ee:	60a5      	str	r5, [r4, #8]
  4064f0:	6062      	str	r2, [r4, #4]
  4064f2:	50e3      	str	r3, [r4, r3]
  4064f4:	e78a      	b.n	40640c <_free_r+0x84>
  4064f6:	2a54      	cmp	r2, #84	; 0x54
  4064f8:	d806      	bhi.n	406508 <_free_r+0x180>
  4064fa:	0b1a      	lsrs	r2, r3, #12
  4064fc:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  406500:	00ff      	lsls	r7, r7, #3
  406502:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  406506:	e790      	b.n	40642a <_free_r+0xa2>
  406508:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40650c:	d806      	bhi.n	40651c <_free_r+0x194>
  40650e:	0bda      	lsrs	r2, r3, #15
  406510:	f102 0778 	add.w	r7, r2, #120	; 0x78
  406514:	00ff      	lsls	r7, r7, #3
  406516:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40651a:	e786      	b.n	40642a <_free_r+0xa2>
  40651c:	f240 5054 	movw	r0, #1364	; 0x554
  406520:	4282      	cmp	r2, r0
  406522:	d806      	bhi.n	406532 <_free_r+0x1aa>
  406524:	0c9a      	lsrs	r2, r3, #18
  406526:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40652a:	00ff      	lsls	r7, r7, #3
  40652c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  406530:	e77b      	b.n	40642a <_free_r+0xa2>
  406532:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  406536:	257e      	movs	r5, #126	; 0x7e
  406538:	e777      	b.n	40642a <_free_r+0xa2>
  40653a:	f043 0101 	orr.w	r1, r3, #1
  40653e:	6061      	str	r1, [r4, #4]
  406540:	6013      	str	r3, [r2, #0]
  406542:	e763      	b.n	40640c <_free_r+0x84>
  406544:	20400480 	.word	0x20400480
  406548:	20400488 	.word	0x20400488
  40654c:	2040088c 	.word	0x2040088c
  406550:	2044503c 	.word	0x2044503c

00406554 <__sfvwrite_r>:
  406554:	6893      	ldr	r3, [r2, #8]
  406556:	2b00      	cmp	r3, #0
  406558:	d073      	beq.n	406642 <__sfvwrite_r+0xee>
  40655a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40655e:	898b      	ldrh	r3, [r1, #12]
  406560:	b083      	sub	sp, #12
  406562:	460c      	mov	r4, r1
  406564:	0719      	lsls	r1, r3, #28
  406566:	9000      	str	r0, [sp, #0]
  406568:	4616      	mov	r6, r2
  40656a:	d526      	bpl.n	4065ba <__sfvwrite_r+0x66>
  40656c:	6922      	ldr	r2, [r4, #16]
  40656e:	b322      	cbz	r2, 4065ba <__sfvwrite_r+0x66>
  406570:	f013 0002 	ands.w	r0, r3, #2
  406574:	6835      	ldr	r5, [r6, #0]
  406576:	d02c      	beq.n	4065d2 <__sfvwrite_r+0x7e>
  406578:	f04f 0900 	mov.w	r9, #0
  40657c:	4fb0      	ldr	r7, [pc, #704]	; (406840 <__sfvwrite_r+0x2ec>)
  40657e:	46c8      	mov	r8, r9
  406580:	46b2      	mov	sl, r6
  406582:	45b8      	cmp	r8, r7
  406584:	4643      	mov	r3, r8
  406586:	464a      	mov	r2, r9
  406588:	bf28      	it	cs
  40658a:	463b      	movcs	r3, r7
  40658c:	9800      	ldr	r0, [sp, #0]
  40658e:	f1b8 0f00 	cmp.w	r8, #0
  406592:	d050      	beq.n	406636 <__sfvwrite_r+0xe2>
  406594:	69e1      	ldr	r1, [r4, #28]
  406596:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406598:	47b0      	blx	r6
  40659a:	2800      	cmp	r0, #0
  40659c:	dd58      	ble.n	406650 <__sfvwrite_r+0xfc>
  40659e:	f8da 3008 	ldr.w	r3, [sl, #8]
  4065a2:	1a1b      	subs	r3, r3, r0
  4065a4:	4481      	add	r9, r0
  4065a6:	eba8 0800 	sub.w	r8, r8, r0
  4065aa:	f8ca 3008 	str.w	r3, [sl, #8]
  4065ae:	2b00      	cmp	r3, #0
  4065b0:	d1e7      	bne.n	406582 <__sfvwrite_r+0x2e>
  4065b2:	2000      	movs	r0, #0
  4065b4:	b003      	add	sp, #12
  4065b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4065ba:	4621      	mov	r1, r4
  4065bc:	9800      	ldr	r0, [sp, #0]
  4065be:	f7ff fc51 	bl	405e64 <__swsetup_r>
  4065c2:	2800      	cmp	r0, #0
  4065c4:	f040 8133 	bne.w	40682e <__sfvwrite_r+0x2da>
  4065c8:	89a3      	ldrh	r3, [r4, #12]
  4065ca:	6835      	ldr	r5, [r6, #0]
  4065cc:	f013 0002 	ands.w	r0, r3, #2
  4065d0:	d1d2      	bne.n	406578 <__sfvwrite_r+0x24>
  4065d2:	f013 0901 	ands.w	r9, r3, #1
  4065d6:	d145      	bne.n	406664 <__sfvwrite_r+0x110>
  4065d8:	464f      	mov	r7, r9
  4065da:	9601      	str	r6, [sp, #4]
  4065dc:	b337      	cbz	r7, 40662c <__sfvwrite_r+0xd8>
  4065de:	059a      	lsls	r2, r3, #22
  4065e0:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4065e4:	f140 8083 	bpl.w	4066ee <__sfvwrite_r+0x19a>
  4065e8:	4547      	cmp	r7, r8
  4065ea:	46c3      	mov	fp, r8
  4065ec:	f0c0 80ab 	bcc.w	406746 <__sfvwrite_r+0x1f2>
  4065f0:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4065f4:	f040 80ac 	bne.w	406750 <__sfvwrite_r+0x1fc>
  4065f8:	6820      	ldr	r0, [r4, #0]
  4065fa:	46ba      	mov	sl, r7
  4065fc:	465a      	mov	r2, fp
  4065fe:	4649      	mov	r1, r9
  406600:	f000 fa3e 	bl	406a80 <memmove>
  406604:	68a2      	ldr	r2, [r4, #8]
  406606:	6823      	ldr	r3, [r4, #0]
  406608:	eba2 0208 	sub.w	r2, r2, r8
  40660c:	445b      	add	r3, fp
  40660e:	60a2      	str	r2, [r4, #8]
  406610:	6023      	str	r3, [r4, #0]
  406612:	9a01      	ldr	r2, [sp, #4]
  406614:	6893      	ldr	r3, [r2, #8]
  406616:	eba3 030a 	sub.w	r3, r3, sl
  40661a:	44d1      	add	r9, sl
  40661c:	eba7 070a 	sub.w	r7, r7, sl
  406620:	6093      	str	r3, [r2, #8]
  406622:	2b00      	cmp	r3, #0
  406624:	d0c5      	beq.n	4065b2 <__sfvwrite_r+0x5e>
  406626:	89a3      	ldrh	r3, [r4, #12]
  406628:	2f00      	cmp	r7, #0
  40662a:	d1d8      	bne.n	4065de <__sfvwrite_r+0x8a>
  40662c:	f8d5 9000 	ldr.w	r9, [r5]
  406630:	686f      	ldr	r7, [r5, #4]
  406632:	3508      	adds	r5, #8
  406634:	e7d2      	b.n	4065dc <__sfvwrite_r+0x88>
  406636:	f8d5 9000 	ldr.w	r9, [r5]
  40663a:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40663e:	3508      	adds	r5, #8
  406640:	e79f      	b.n	406582 <__sfvwrite_r+0x2e>
  406642:	2000      	movs	r0, #0
  406644:	4770      	bx	lr
  406646:	4621      	mov	r1, r4
  406648:	9800      	ldr	r0, [sp, #0]
  40664a:	f7ff fd1f 	bl	40608c <_fflush_r>
  40664e:	b370      	cbz	r0, 4066ae <__sfvwrite_r+0x15a>
  406650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406658:	f04f 30ff 	mov.w	r0, #4294967295
  40665c:	81a3      	strh	r3, [r4, #12]
  40665e:	b003      	add	sp, #12
  406660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406664:	4681      	mov	r9, r0
  406666:	4633      	mov	r3, r6
  406668:	464e      	mov	r6, r9
  40666a:	46a8      	mov	r8, r5
  40666c:	469a      	mov	sl, r3
  40666e:	464d      	mov	r5, r9
  406670:	b34e      	cbz	r6, 4066c6 <__sfvwrite_r+0x172>
  406672:	b380      	cbz	r0, 4066d6 <__sfvwrite_r+0x182>
  406674:	6820      	ldr	r0, [r4, #0]
  406676:	6923      	ldr	r3, [r4, #16]
  406678:	6962      	ldr	r2, [r4, #20]
  40667a:	45b1      	cmp	r9, r6
  40667c:	46cb      	mov	fp, r9
  40667e:	bf28      	it	cs
  406680:	46b3      	movcs	fp, r6
  406682:	4298      	cmp	r0, r3
  406684:	465f      	mov	r7, fp
  406686:	d904      	bls.n	406692 <__sfvwrite_r+0x13e>
  406688:	68a3      	ldr	r3, [r4, #8]
  40668a:	4413      	add	r3, r2
  40668c:	459b      	cmp	fp, r3
  40668e:	f300 80a6 	bgt.w	4067de <__sfvwrite_r+0x28a>
  406692:	4593      	cmp	fp, r2
  406694:	db4b      	blt.n	40672e <__sfvwrite_r+0x1da>
  406696:	4613      	mov	r3, r2
  406698:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40669a:	69e1      	ldr	r1, [r4, #28]
  40669c:	9800      	ldr	r0, [sp, #0]
  40669e:	462a      	mov	r2, r5
  4066a0:	47b8      	blx	r7
  4066a2:	1e07      	subs	r7, r0, #0
  4066a4:	ddd4      	ble.n	406650 <__sfvwrite_r+0xfc>
  4066a6:	ebb9 0907 	subs.w	r9, r9, r7
  4066aa:	d0cc      	beq.n	406646 <__sfvwrite_r+0xf2>
  4066ac:	2001      	movs	r0, #1
  4066ae:	f8da 3008 	ldr.w	r3, [sl, #8]
  4066b2:	1bdb      	subs	r3, r3, r7
  4066b4:	443d      	add	r5, r7
  4066b6:	1bf6      	subs	r6, r6, r7
  4066b8:	f8ca 3008 	str.w	r3, [sl, #8]
  4066bc:	2b00      	cmp	r3, #0
  4066be:	f43f af78 	beq.w	4065b2 <__sfvwrite_r+0x5e>
  4066c2:	2e00      	cmp	r6, #0
  4066c4:	d1d5      	bne.n	406672 <__sfvwrite_r+0x11e>
  4066c6:	f108 0308 	add.w	r3, r8, #8
  4066ca:	e913 0060 	ldmdb	r3, {r5, r6}
  4066ce:	4698      	mov	r8, r3
  4066d0:	3308      	adds	r3, #8
  4066d2:	2e00      	cmp	r6, #0
  4066d4:	d0f9      	beq.n	4066ca <__sfvwrite_r+0x176>
  4066d6:	4632      	mov	r2, r6
  4066d8:	210a      	movs	r1, #10
  4066da:	4628      	mov	r0, r5
  4066dc:	f000 f980 	bl	4069e0 <memchr>
  4066e0:	2800      	cmp	r0, #0
  4066e2:	f000 80a1 	beq.w	406828 <__sfvwrite_r+0x2d4>
  4066e6:	3001      	adds	r0, #1
  4066e8:	eba0 0905 	sub.w	r9, r0, r5
  4066ec:	e7c2      	b.n	406674 <__sfvwrite_r+0x120>
  4066ee:	6820      	ldr	r0, [r4, #0]
  4066f0:	6923      	ldr	r3, [r4, #16]
  4066f2:	4298      	cmp	r0, r3
  4066f4:	d802      	bhi.n	4066fc <__sfvwrite_r+0x1a8>
  4066f6:	6963      	ldr	r3, [r4, #20]
  4066f8:	429f      	cmp	r7, r3
  4066fa:	d25d      	bcs.n	4067b8 <__sfvwrite_r+0x264>
  4066fc:	45b8      	cmp	r8, r7
  4066fe:	bf28      	it	cs
  406700:	46b8      	movcs	r8, r7
  406702:	4642      	mov	r2, r8
  406704:	4649      	mov	r1, r9
  406706:	f000 f9bb 	bl	406a80 <memmove>
  40670a:	68a3      	ldr	r3, [r4, #8]
  40670c:	6822      	ldr	r2, [r4, #0]
  40670e:	eba3 0308 	sub.w	r3, r3, r8
  406712:	4442      	add	r2, r8
  406714:	60a3      	str	r3, [r4, #8]
  406716:	6022      	str	r2, [r4, #0]
  406718:	b10b      	cbz	r3, 40671e <__sfvwrite_r+0x1ca>
  40671a:	46c2      	mov	sl, r8
  40671c:	e779      	b.n	406612 <__sfvwrite_r+0xbe>
  40671e:	4621      	mov	r1, r4
  406720:	9800      	ldr	r0, [sp, #0]
  406722:	f7ff fcb3 	bl	40608c <_fflush_r>
  406726:	2800      	cmp	r0, #0
  406728:	d192      	bne.n	406650 <__sfvwrite_r+0xfc>
  40672a:	46c2      	mov	sl, r8
  40672c:	e771      	b.n	406612 <__sfvwrite_r+0xbe>
  40672e:	465a      	mov	r2, fp
  406730:	4629      	mov	r1, r5
  406732:	f000 f9a5 	bl	406a80 <memmove>
  406736:	68a2      	ldr	r2, [r4, #8]
  406738:	6823      	ldr	r3, [r4, #0]
  40673a:	eba2 020b 	sub.w	r2, r2, fp
  40673e:	445b      	add	r3, fp
  406740:	60a2      	str	r2, [r4, #8]
  406742:	6023      	str	r3, [r4, #0]
  406744:	e7af      	b.n	4066a6 <__sfvwrite_r+0x152>
  406746:	6820      	ldr	r0, [r4, #0]
  406748:	46b8      	mov	r8, r7
  40674a:	46ba      	mov	sl, r7
  40674c:	46bb      	mov	fp, r7
  40674e:	e755      	b.n	4065fc <__sfvwrite_r+0xa8>
  406750:	6962      	ldr	r2, [r4, #20]
  406752:	6820      	ldr	r0, [r4, #0]
  406754:	6921      	ldr	r1, [r4, #16]
  406756:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40675a:	eba0 0a01 	sub.w	sl, r0, r1
  40675e:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  406762:	f10a 0001 	add.w	r0, sl, #1
  406766:	ea4f 0868 	mov.w	r8, r8, asr #1
  40676a:	4438      	add	r0, r7
  40676c:	4540      	cmp	r0, r8
  40676e:	4642      	mov	r2, r8
  406770:	bf84      	itt	hi
  406772:	4680      	movhi	r8, r0
  406774:	4642      	movhi	r2, r8
  406776:	055b      	lsls	r3, r3, #21
  406778:	d544      	bpl.n	406804 <__sfvwrite_r+0x2b0>
  40677a:	4611      	mov	r1, r2
  40677c:	9800      	ldr	r0, [sp, #0]
  40677e:	f7fe f8f1 	bl	404964 <_malloc_r>
  406782:	4683      	mov	fp, r0
  406784:	2800      	cmp	r0, #0
  406786:	d055      	beq.n	406834 <__sfvwrite_r+0x2e0>
  406788:	4652      	mov	r2, sl
  40678a:	6921      	ldr	r1, [r4, #16]
  40678c:	f7fe fb9a 	bl	404ec4 <memcpy>
  406790:	89a3      	ldrh	r3, [r4, #12]
  406792:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  406796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40679a:	81a3      	strh	r3, [r4, #12]
  40679c:	eb0b 000a 	add.w	r0, fp, sl
  4067a0:	eba8 030a 	sub.w	r3, r8, sl
  4067a4:	f8c4 b010 	str.w	fp, [r4, #16]
  4067a8:	f8c4 8014 	str.w	r8, [r4, #20]
  4067ac:	6020      	str	r0, [r4, #0]
  4067ae:	60a3      	str	r3, [r4, #8]
  4067b0:	46b8      	mov	r8, r7
  4067b2:	46ba      	mov	sl, r7
  4067b4:	46bb      	mov	fp, r7
  4067b6:	e721      	b.n	4065fc <__sfvwrite_r+0xa8>
  4067b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  4067bc:	42b9      	cmp	r1, r7
  4067be:	bf28      	it	cs
  4067c0:	4639      	movcs	r1, r7
  4067c2:	464a      	mov	r2, r9
  4067c4:	fb91 f1f3 	sdiv	r1, r1, r3
  4067c8:	9800      	ldr	r0, [sp, #0]
  4067ca:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4067cc:	fb03 f301 	mul.w	r3, r3, r1
  4067d0:	69e1      	ldr	r1, [r4, #28]
  4067d2:	47b0      	blx	r6
  4067d4:	f1b0 0a00 	subs.w	sl, r0, #0
  4067d8:	f73f af1b 	bgt.w	406612 <__sfvwrite_r+0xbe>
  4067dc:	e738      	b.n	406650 <__sfvwrite_r+0xfc>
  4067de:	461a      	mov	r2, r3
  4067e0:	4629      	mov	r1, r5
  4067e2:	9301      	str	r3, [sp, #4]
  4067e4:	f000 f94c 	bl	406a80 <memmove>
  4067e8:	6822      	ldr	r2, [r4, #0]
  4067ea:	9b01      	ldr	r3, [sp, #4]
  4067ec:	9800      	ldr	r0, [sp, #0]
  4067ee:	441a      	add	r2, r3
  4067f0:	6022      	str	r2, [r4, #0]
  4067f2:	4621      	mov	r1, r4
  4067f4:	f7ff fc4a 	bl	40608c <_fflush_r>
  4067f8:	9b01      	ldr	r3, [sp, #4]
  4067fa:	2800      	cmp	r0, #0
  4067fc:	f47f af28 	bne.w	406650 <__sfvwrite_r+0xfc>
  406800:	461f      	mov	r7, r3
  406802:	e750      	b.n	4066a6 <__sfvwrite_r+0x152>
  406804:	9800      	ldr	r0, [sp, #0]
  406806:	f000 f99f 	bl	406b48 <_realloc_r>
  40680a:	4683      	mov	fp, r0
  40680c:	2800      	cmp	r0, #0
  40680e:	d1c5      	bne.n	40679c <__sfvwrite_r+0x248>
  406810:	9d00      	ldr	r5, [sp, #0]
  406812:	6921      	ldr	r1, [r4, #16]
  406814:	4628      	mov	r0, r5
  406816:	f7ff fdb7 	bl	406388 <_free_r>
  40681a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40681e:	220c      	movs	r2, #12
  406820:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  406824:	602a      	str	r2, [r5, #0]
  406826:	e715      	b.n	406654 <__sfvwrite_r+0x100>
  406828:	f106 0901 	add.w	r9, r6, #1
  40682c:	e722      	b.n	406674 <__sfvwrite_r+0x120>
  40682e:	f04f 30ff 	mov.w	r0, #4294967295
  406832:	e6bf      	b.n	4065b4 <__sfvwrite_r+0x60>
  406834:	9a00      	ldr	r2, [sp, #0]
  406836:	230c      	movs	r3, #12
  406838:	6013      	str	r3, [r2, #0]
  40683a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40683e:	e709      	b.n	406654 <__sfvwrite_r+0x100>
  406840:	7ffffc00 	.word	0x7ffffc00

00406844 <_fwalk_reent>:
  406844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406848:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40684c:	d01f      	beq.n	40688e <_fwalk_reent+0x4a>
  40684e:	4688      	mov	r8, r1
  406850:	4606      	mov	r6, r0
  406852:	f04f 0900 	mov.w	r9, #0
  406856:	687d      	ldr	r5, [r7, #4]
  406858:	68bc      	ldr	r4, [r7, #8]
  40685a:	3d01      	subs	r5, #1
  40685c:	d411      	bmi.n	406882 <_fwalk_reent+0x3e>
  40685e:	89a3      	ldrh	r3, [r4, #12]
  406860:	2b01      	cmp	r3, #1
  406862:	f105 35ff 	add.w	r5, r5, #4294967295
  406866:	d908      	bls.n	40687a <_fwalk_reent+0x36>
  406868:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40686c:	3301      	adds	r3, #1
  40686e:	4621      	mov	r1, r4
  406870:	4630      	mov	r0, r6
  406872:	d002      	beq.n	40687a <_fwalk_reent+0x36>
  406874:	47c0      	blx	r8
  406876:	ea49 0900 	orr.w	r9, r9, r0
  40687a:	1c6b      	adds	r3, r5, #1
  40687c:	f104 0468 	add.w	r4, r4, #104	; 0x68
  406880:	d1ed      	bne.n	40685e <_fwalk_reent+0x1a>
  406882:	683f      	ldr	r7, [r7, #0]
  406884:	2f00      	cmp	r7, #0
  406886:	d1e6      	bne.n	406856 <_fwalk_reent+0x12>
  406888:	4648      	mov	r0, r9
  40688a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40688e:	46b9      	mov	r9, r7
  406890:	4648      	mov	r0, r9
  406892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406896:	bf00      	nop

00406898 <__locale_mb_cur_max>:
  406898:	4b04      	ldr	r3, [pc, #16]	; (4068ac <__locale_mb_cur_max+0x14>)
  40689a:	4a05      	ldr	r2, [pc, #20]	; (4068b0 <__locale_mb_cur_max+0x18>)
  40689c:	681b      	ldr	r3, [r3, #0]
  40689e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4068a0:	2b00      	cmp	r3, #0
  4068a2:	bf08      	it	eq
  4068a4:	4613      	moveq	r3, r2
  4068a6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4068aa:	4770      	bx	lr
  4068ac:	20400050 	.word	0x20400050
  4068b0:	20400894 	.word	0x20400894

004068b4 <__retarget_lock_init_recursive>:
  4068b4:	4770      	bx	lr
  4068b6:	bf00      	nop

004068b8 <__retarget_lock_close_recursive>:
  4068b8:	4770      	bx	lr
  4068ba:	bf00      	nop

004068bc <__retarget_lock_acquire_recursive>:
  4068bc:	4770      	bx	lr
  4068be:	bf00      	nop

004068c0 <__retarget_lock_release_recursive>:
  4068c0:	4770      	bx	lr
  4068c2:	bf00      	nop

004068c4 <__swhatbuf_r>:
  4068c4:	b570      	push	{r4, r5, r6, lr}
  4068c6:	460c      	mov	r4, r1
  4068c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4068cc:	2900      	cmp	r1, #0
  4068ce:	b090      	sub	sp, #64	; 0x40
  4068d0:	4615      	mov	r5, r2
  4068d2:	461e      	mov	r6, r3
  4068d4:	db14      	blt.n	406900 <__swhatbuf_r+0x3c>
  4068d6:	aa01      	add	r2, sp, #4
  4068d8:	f000 fd1c 	bl	407314 <_fstat_r>
  4068dc:	2800      	cmp	r0, #0
  4068de:	db0f      	blt.n	406900 <__swhatbuf_r+0x3c>
  4068e0:	9a02      	ldr	r2, [sp, #8]
  4068e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4068e6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4068ea:	fab2 f282 	clz	r2, r2
  4068ee:	0952      	lsrs	r2, r2, #5
  4068f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4068f4:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4068f8:	6032      	str	r2, [r6, #0]
  4068fa:	602b      	str	r3, [r5, #0]
  4068fc:	b010      	add	sp, #64	; 0x40
  4068fe:	bd70      	pop	{r4, r5, r6, pc}
  406900:	89a2      	ldrh	r2, [r4, #12]
  406902:	2300      	movs	r3, #0
  406904:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  406908:	6033      	str	r3, [r6, #0]
  40690a:	d004      	beq.n	406916 <__swhatbuf_r+0x52>
  40690c:	2240      	movs	r2, #64	; 0x40
  40690e:	4618      	mov	r0, r3
  406910:	602a      	str	r2, [r5, #0]
  406912:	b010      	add	sp, #64	; 0x40
  406914:	bd70      	pop	{r4, r5, r6, pc}
  406916:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40691a:	602b      	str	r3, [r5, #0]
  40691c:	b010      	add	sp, #64	; 0x40
  40691e:	bd70      	pop	{r4, r5, r6, pc}

00406920 <__smakebuf_r>:
  406920:	898a      	ldrh	r2, [r1, #12]
  406922:	0792      	lsls	r2, r2, #30
  406924:	460b      	mov	r3, r1
  406926:	d506      	bpl.n	406936 <__smakebuf_r+0x16>
  406928:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40692c:	2101      	movs	r1, #1
  40692e:	601a      	str	r2, [r3, #0]
  406930:	611a      	str	r2, [r3, #16]
  406932:	6159      	str	r1, [r3, #20]
  406934:	4770      	bx	lr
  406936:	b5f0      	push	{r4, r5, r6, r7, lr}
  406938:	b083      	sub	sp, #12
  40693a:	ab01      	add	r3, sp, #4
  40693c:	466a      	mov	r2, sp
  40693e:	460c      	mov	r4, r1
  406940:	4606      	mov	r6, r0
  406942:	f7ff ffbf 	bl	4068c4 <__swhatbuf_r>
  406946:	9900      	ldr	r1, [sp, #0]
  406948:	4605      	mov	r5, r0
  40694a:	4630      	mov	r0, r6
  40694c:	f7fe f80a 	bl	404964 <_malloc_r>
  406950:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406954:	b1d8      	cbz	r0, 40698e <__smakebuf_r+0x6e>
  406956:	9a01      	ldr	r2, [sp, #4]
  406958:	4f15      	ldr	r7, [pc, #84]	; (4069b0 <__smakebuf_r+0x90>)
  40695a:	9900      	ldr	r1, [sp, #0]
  40695c:	63f7      	str	r7, [r6, #60]	; 0x3c
  40695e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406962:	81a3      	strh	r3, [r4, #12]
  406964:	6020      	str	r0, [r4, #0]
  406966:	6120      	str	r0, [r4, #16]
  406968:	6161      	str	r1, [r4, #20]
  40696a:	b91a      	cbnz	r2, 406974 <__smakebuf_r+0x54>
  40696c:	432b      	orrs	r3, r5
  40696e:	81a3      	strh	r3, [r4, #12]
  406970:	b003      	add	sp, #12
  406972:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406974:	4630      	mov	r0, r6
  406976:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40697a:	f000 fcdf 	bl	40733c <_isatty_r>
  40697e:	b1a0      	cbz	r0, 4069aa <__smakebuf_r+0x8a>
  406980:	89a3      	ldrh	r3, [r4, #12]
  406982:	f023 0303 	bic.w	r3, r3, #3
  406986:	f043 0301 	orr.w	r3, r3, #1
  40698a:	b21b      	sxth	r3, r3
  40698c:	e7ee      	b.n	40696c <__smakebuf_r+0x4c>
  40698e:	059a      	lsls	r2, r3, #22
  406990:	d4ee      	bmi.n	406970 <__smakebuf_r+0x50>
  406992:	f023 0303 	bic.w	r3, r3, #3
  406996:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40699a:	f043 0302 	orr.w	r3, r3, #2
  40699e:	2101      	movs	r1, #1
  4069a0:	81a3      	strh	r3, [r4, #12]
  4069a2:	6022      	str	r2, [r4, #0]
  4069a4:	6122      	str	r2, [r4, #16]
  4069a6:	6161      	str	r1, [r4, #20]
  4069a8:	e7e2      	b.n	406970 <__smakebuf_r+0x50>
  4069aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4069ae:	e7dd      	b.n	40696c <__smakebuf_r+0x4c>
  4069b0:	004060e1 	.word	0x004060e1

004069b4 <__ascii_mbtowc>:
  4069b4:	b082      	sub	sp, #8
  4069b6:	b149      	cbz	r1, 4069cc <__ascii_mbtowc+0x18>
  4069b8:	b15a      	cbz	r2, 4069d2 <__ascii_mbtowc+0x1e>
  4069ba:	b16b      	cbz	r3, 4069d8 <__ascii_mbtowc+0x24>
  4069bc:	7813      	ldrb	r3, [r2, #0]
  4069be:	600b      	str	r3, [r1, #0]
  4069c0:	7812      	ldrb	r2, [r2, #0]
  4069c2:	1c10      	adds	r0, r2, #0
  4069c4:	bf18      	it	ne
  4069c6:	2001      	movne	r0, #1
  4069c8:	b002      	add	sp, #8
  4069ca:	4770      	bx	lr
  4069cc:	a901      	add	r1, sp, #4
  4069ce:	2a00      	cmp	r2, #0
  4069d0:	d1f3      	bne.n	4069ba <__ascii_mbtowc+0x6>
  4069d2:	4610      	mov	r0, r2
  4069d4:	b002      	add	sp, #8
  4069d6:	4770      	bx	lr
  4069d8:	f06f 0001 	mvn.w	r0, #1
  4069dc:	e7f4      	b.n	4069c8 <__ascii_mbtowc+0x14>
  4069de:	bf00      	nop

004069e0 <memchr>:
  4069e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4069e4:	2a10      	cmp	r2, #16
  4069e6:	db2b      	blt.n	406a40 <memchr+0x60>
  4069e8:	f010 0f07 	tst.w	r0, #7
  4069ec:	d008      	beq.n	406a00 <memchr+0x20>
  4069ee:	f810 3b01 	ldrb.w	r3, [r0], #1
  4069f2:	3a01      	subs	r2, #1
  4069f4:	428b      	cmp	r3, r1
  4069f6:	d02d      	beq.n	406a54 <memchr+0x74>
  4069f8:	f010 0f07 	tst.w	r0, #7
  4069fc:	b342      	cbz	r2, 406a50 <memchr+0x70>
  4069fe:	d1f6      	bne.n	4069ee <memchr+0xe>
  406a00:	b4f0      	push	{r4, r5, r6, r7}
  406a02:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406a06:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  406a0a:	f022 0407 	bic.w	r4, r2, #7
  406a0e:	f07f 0700 	mvns.w	r7, #0
  406a12:	2300      	movs	r3, #0
  406a14:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406a18:	3c08      	subs	r4, #8
  406a1a:	ea85 0501 	eor.w	r5, r5, r1
  406a1e:	ea86 0601 	eor.w	r6, r6, r1
  406a22:	fa85 f547 	uadd8	r5, r5, r7
  406a26:	faa3 f587 	sel	r5, r3, r7
  406a2a:	fa86 f647 	uadd8	r6, r6, r7
  406a2e:	faa5 f687 	sel	r6, r5, r7
  406a32:	b98e      	cbnz	r6, 406a58 <memchr+0x78>
  406a34:	d1ee      	bne.n	406a14 <memchr+0x34>
  406a36:	bcf0      	pop	{r4, r5, r6, r7}
  406a38:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406a3c:	f002 0207 	and.w	r2, r2, #7
  406a40:	b132      	cbz	r2, 406a50 <memchr+0x70>
  406a42:	f810 3b01 	ldrb.w	r3, [r0], #1
  406a46:	3a01      	subs	r2, #1
  406a48:	ea83 0301 	eor.w	r3, r3, r1
  406a4c:	b113      	cbz	r3, 406a54 <memchr+0x74>
  406a4e:	d1f8      	bne.n	406a42 <memchr+0x62>
  406a50:	2000      	movs	r0, #0
  406a52:	4770      	bx	lr
  406a54:	3801      	subs	r0, #1
  406a56:	4770      	bx	lr
  406a58:	2d00      	cmp	r5, #0
  406a5a:	bf06      	itte	eq
  406a5c:	4635      	moveq	r5, r6
  406a5e:	3803      	subeq	r0, #3
  406a60:	3807      	subne	r0, #7
  406a62:	f015 0f01 	tst.w	r5, #1
  406a66:	d107      	bne.n	406a78 <memchr+0x98>
  406a68:	3001      	adds	r0, #1
  406a6a:	f415 7f80 	tst.w	r5, #256	; 0x100
  406a6e:	bf02      	ittt	eq
  406a70:	3001      	addeq	r0, #1
  406a72:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406a76:	3001      	addeq	r0, #1
  406a78:	bcf0      	pop	{r4, r5, r6, r7}
  406a7a:	3801      	subs	r0, #1
  406a7c:	4770      	bx	lr
  406a7e:	bf00      	nop

00406a80 <memmove>:
  406a80:	4288      	cmp	r0, r1
  406a82:	b5f0      	push	{r4, r5, r6, r7, lr}
  406a84:	d90d      	bls.n	406aa2 <memmove+0x22>
  406a86:	188b      	adds	r3, r1, r2
  406a88:	4298      	cmp	r0, r3
  406a8a:	d20a      	bcs.n	406aa2 <memmove+0x22>
  406a8c:	1884      	adds	r4, r0, r2
  406a8e:	2a00      	cmp	r2, #0
  406a90:	d051      	beq.n	406b36 <memmove+0xb6>
  406a92:	4622      	mov	r2, r4
  406a94:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  406a98:	f802 4d01 	strb.w	r4, [r2, #-1]!
  406a9c:	4299      	cmp	r1, r3
  406a9e:	d1f9      	bne.n	406a94 <memmove+0x14>
  406aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406aa2:	2a0f      	cmp	r2, #15
  406aa4:	d948      	bls.n	406b38 <memmove+0xb8>
  406aa6:	ea41 0300 	orr.w	r3, r1, r0
  406aaa:	079b      	lsls	r3, r3, #30
  406aac:	d146      	bne.n	406b3c <memmove+0xbc>
  406aae:	f100 0410 	add.w	r4, r0, #16
  406ab2:	f101 0310 	add.w	r3, r1, #16
  406ab6:	4615      	mov	r5, r2
  406ab8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  406abc:	f844 6c10 	str.w	r6, [r4, #-16]
  406ac0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406ac4:	f844 6c0c 	str.w	r6, [r4, #-12]
  406ac8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  406acc:	f844 6c08 	str.w	r6, [r4, #-8]
  406ad0:	3d10      	subs	r5, #16
  406ad2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  406ad6:	f844 6c04 	str.w	r6, [r4, #-4]
  406ada:	2d0f      	cmp	r5, #15
  406adc:	f103 0310 	add.w	r3, r3, #16
  406ae0:	f104 0410 	add.w	r4, r4, #16
  406ae4:	d8e8      	bhi.n	406ab8 <memmove+0x38>
  406ae6:	f1a2 0310 	sub.w	r3, r2, #16
  406aea:	f023 030f 	bic.w	r3, r3, #15
  406aee:	f002 0e0f 	and.w	lr, r2, #15
  406af2:	3310      	adds	r3, #16
  406af4:	f1be 0f03 	cmp.w	lr, #3
  406af8:	4419      	add	r1, r3
  406afa:	4403      	add	r3, r0
  406afc:	d921      	bls.n	406b42 <memmove+0xc2>
  406afe:	1f1e      	subs	r6, r3, #4
  406b00:	460d      	mov	r5, r1
  406b02:	4674      	mov	r4, lr
  406b04:	3c04      	subs	r4, #4
  406b06:	f855 7b04 	ldr.w	r7, [r5], #4
  406b0a:	f846 7f04 	str.w	r7, [r6, #4]!
  406b0e:	2c03      	cmp	r4, #3
  406b10:	d8f8      	bhi.n	406b04 <memmove+0x84>
  406b12:	f1ae 0404 	sub.w	r4, lr, #4
  406b16:	f024 0403 	bic.w	r4, r4, #3
  406b1a:	3404      	adds	r4, #4
  406b1c:	4421      	add	r1, r4
  406b1e:	4423      	add	r3, r4
  406b20:	f002 0203 	and.w	r2, r2, #3
  406b24:	b162      	cbz	r2, 406b40 <memmove+0xc0>
  406b26:	3b01      	subs	r3, #1
  406b28:	440a      	add	r2, r1
  406b2a:	f811 4b01 	ldrb.w	r4, [r1], #1
  406b2e:	f803 4f01 	strb.w	r4, [r3, #1]!
  406b32:	428a      	cmp	r2, r1
  406b34:	d1f9      	bne.n	406b2a <memmove+0xaa>
  406b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406b38:	4603      	mov	r3, r0
  406b3a:	e7f3      	b.n	406b24 <memmove+0xa4>
  406b3c:	4603      	mov	r3, r0
  406b3e:	e7f2      	b.n	406b26 <memmove+0xa6>
  406b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406b42:	4672      	mov	r2, lr
  406b44:	e7ee      	b.n	406b24 <memmove+0xa4>
  406b46:	bf00      	nop

00406b48 <_realloc_r>:
  406b48:	2900      	cmp	r1, #0
  406b4a:	f000 8095 	beq.w	406c78 <_realloc_r+0x130>
  406b4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406b52:	460d      	mov	r5, r1
  406b54:	4616      	mov	r6, r2
  406b56:	b083      	sub	sp, #12
  406b58:	4680      	mov	r8, r0
  406b5a:	f106 070b 	add.w	r7, r6, #11
  406b5e:	f7fe fa99 	bl	405094 <__malloc_lock>
  406b62:	f855 ec04 	ldr.w	lr, [r5, #-4]
  406b66:	2f16      	cmp	r7, #22
  406b68:	f02e 0403 	bic.w	r4, lr, #3
  406b6c:	f1a5 0908 	sub.w	r9, r5, #8
  406b70:	d83c      	bhi.n	406bec <_realloc_r+0xa4>
  406b72:	2210      	movs	r2, #16
  406b74:	4617      	mov	r7, r2
  406b76:	42be      	cmp	r6, r7
  406b78:	d83d      	bhi.n	406bf6 <_realloc_r+0xae>
  406b7a:	4294      	cmp	r4, r2
  406b7c:	da43      	bge.n	406c06 <_realloc_r+0xbe>
  406b7e:	4bc4      	ldr	r3, [pc, #784]	; (406e90 <_realloc_r+0x348>)
  406b80:	6899      	ldr	r1, [r3, #8]
  406b82:	eb09 0004 	add.w	r0, r9, r4
  406b86:	4288      	cmp	r0, r1
  406b88:	f000 80b4 	beq.w	406cf4 <_realloc_r+0x1ac>
  406b8c:	6843      	ldr	r3, [r0, #4]
  406b8e:	f023 0101 	bic.w	r1, r3, #1
  406b92:	4401      	add	r1, r0
  406b94:	6849      	ldr	r1, [r1, #4]
  406b96:	07c9      	lsls	r1, r1, #31
  406b98:	d54c      	bpl.n	406c34 <_realloc_r+0xec>
  406b9a:	f01e 0f01 	tst.w	lr, #1
  406b9e:	f000 809b 	beq.w	406cd8 <_realloc_r+0x190>
  406ba2:	4631      	mov	r1, r6
  406ba4:	4640      	mov	r0, r8
  406ba6:	f7fd fedd 	bl	404964 <_malloc_r>
  406baa:	4606      	mov	r6, r0
  406bac:	2800      	cmp	r0, #0
  406bae:	d03a      	beq.n	406c26 <_realloc_r+0xde>
  406bb0:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406bb4:	f023 0301 	bic.w	r3, r3, #1
  406bb8:	444b      	add	r3, r9
  406bba:	f1a0 0208 	sub.w	r2, r0, #8
  406bbe:	429a      	cmp	r2, r3
  406bc0:	f000 8121 	beq.w	406e06 <_realloc_r+0x2be>
  406bc4:	1f22      	subs	r2, r4, #4
  406bc6:	2a24      	cmp	r2, #36	; 0x24
  406bc8:	f200 8107 	bhi.w	406dda <_realloc_r+0x292>
  406bcc:	2a13      	cmp	r2, #19
  406bce:	f200 80db 	bhi.w	406d88 <_realloc_r+0x240>
  406bd2:	4603      	mov	r3, r0
  406bd4:	462a      	mov	r2, r5
  406bd6:	6811      	ldr	r1, [r2, #0]
  406bd8:	6019      	str	r1, [r3, #0]
  406bda:	6851      	ldr	r1, [r2, #4]
  406bdc:	6059      	str	r1, [r3, #4]
  406bde:	6892      	ldr	r2, [r2, #8]
  406be0:	609a      	str	r2, [r3, #8]
  406be2:	4629      	mov	r1, r5
  406be4:	4640      	mov	r0, r8
  406be6:	f7ff fbcf 	bl	406388 <_free_r>
  406bea:	e01c      	b.n	406c26 <_realloc_r+0xde>
  406bec:	f027 0707 	bic.w	r7, r7, #7
  406bf0:	2f00      	cmp	r7, #0
  406bf2:	463a      	mov	r2, r7
  406bf4:	dabf      	bge.n	406b76 <_realloc_r+0x2e>
  406bf6:	2600      	movs	r6, #0
  406bf8:	230c      	movs	r3, #12
  406bfa:	4630      	mov	r0, r6
  406bfc:	f8c8 3000 	str.w	r3, [r8]
  406c00:	b003      	add	sp, #12
  406c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406c06:	462e      	mov	r6, r5
  406c08:	1be3      	subs	r3, r4, r7
  406c0a:	2b0f      	cmp	r3, #15
  406c0c:	d81e      	bhi.n	406c4c <_realloc_r+0x104>
  406c0e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  406c12:	f003 0301 	and.w	r3, r3, #1
  406c16:	4323      	orrs	r3, r4
  406c18:	444c      	add	r4, r9
  406c1a:	f8c9 3004 	str.w	r3, [r9, #4]
  406c1e:	6863      	ldr	r3, [r4, #4]
  406c20:	f043 0301 	orr.w	r3, r3, #1
  406c24:	6063      	str	r3, [r4, #4]
  406c26:	4640      	mov	r0, r8
  406c28:	f7fe fa3a 	bl	4050a0 <__malloc_unlock>
  406c2c:	4630      	mov	r0, r6
  406c2e:	b003      	add	sp, #12
  406c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406c34:	f023 0303 	bic.w	r3, r3, #3
  406c38:	18e1      	adds	r1, r4, r3
  406c3a:	4291      	cmp	r1, r2
  406c3c:	db1f      	blt.n	406c7e <_realloc_r+0x136>
  406c3e:	68c3      	ldr	r3, [r0, #12]
  406c40:	6882      	ldr	r2, [r0, #8]
  406c42:	462e      	mov	r6, r5
  406c44:	60d3      	str	r3, [r2, #12]
  406c46:	460c      	mov	r4, r1
  406c48:	609a      	str	r2, [r3, #8]
  406c4a:	e7dd      	b.n	406c08 <_realloc_r+0xc0>
  406c4c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  406c50:	eb09 0107 	add.w	r1, r9, r7
  406c54:	f002 0201 	and.w	r2, r2, #1
  406c58:	444c      	add	r4, r9
  406c5a:	f043 0301 	orr.w	r3, r3, #1
  406c5e:	4317      	orrs	r7, r2
  406c60:	f8c9 7004 	str.w	r7, [r9, #4]
  406c64:	604b      	str	r3, [r1, #4]
  406c66:	6863      	ldr	r3, [r4, #4]
  406c68:	f043 0301 	orr.w	r3, r3, #1
  406c6c:	3108      	adds	r1, #8
  406c6e:	6063      	str	r3, [r4, #4]
  406c70:	4640      	mov	r0, r8
  406c72:	f7ff fb89 	bl	406388 <_free_r>
  406c76:	e7d6      	b.n	406c26 <_realloc_r+0xde>
  406c78:	4611      	mov	r1, r2
  406c7a:	f7fd be73 	b.w	404964 <_malloc_r>
  406c7e:	f01e 0f01 	tst.w	lr, #1
  406c82:	d18e      	bne.n	406ba2 <_realloc_r+0x5a>
  406c84:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406c88:	eba9 0a01 	sub.w	sl, r9, r1
  406c8c:	f8da 1004 	ldr.w	r1, [sl, #4]
  406c90:	f021 0103 	bic.w	r1, r1, #3
  406c94:	440b      	add	r3, r1
  406c96:	4423      	add	r3, r4
  406c98:	4293      	cmp	r3, r2
  406c9a:	db25      	blt.n	406ce8 <_realloc_r+0x1a0>
  406c9c:	68c2      	ldr	r2, [r0, #12]
  406c9e:	6881      	ldr	r1, [r0, #8]
  406ca0:	4656      	mov	r6, sl
  406ca2:	60ca      	str	r2, [r1, #12]
  406ca4:	6091      	str	r1, [r2, #8]
  406ca6:	f8da 100c 	ldr.w	r1, [sl, #12]
  406caa:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406cae:	1f22      	subs	r2, r4, #4
  406cb0:	2a24      	cmp	r2, #36	; 0x24
  406cb2:	60c1      	str	r1, [r0, #12]
  406cb4:	6088      	str	r0, [r1, #8]
  406cb6:	f200 8094 	bhi.w	406de2 <_realloc_r+0x29a>
  406cba:	2a13      	cmp	r2, #19
  406cbc:	d96f      	bls.n	406d9e <_realloc_r+0x256>
  406cbe:	6829      	ldr	r1, [r5, #0]
  406cc0:	f8ca 1008 	str.w	r1, [sl, #8]
  406cc4:	6869      	ldr	r1, [r5, #4]
  406cc6:	f8ca 100c 	str.w	r1, [sl, #12]
  406cca:	2a1b      	cmp	r2, #27
  406ccc:	f200 80a2 	bhi.w	406e14 <_realloc_r+0x2cc>
  406cd0:	3508      	adds	r5, #8
  406cd2:	f10a 0210 	add.w	r2, sl, #16
  406cd6:	e063      	b.n	406da0 <_realloc_r+0x258>
  406cd8:	f855 3c08 	ldr.w	r3, [r5, #-8]
  406cdc:	eba9 0a03 	sub.w	sl, r9, r3
  406ce0:	f8da 1004 	ldr.w	r1, [sl, #4]
  406ce4:	f021 0103 	bic.w	r1, r1, #3
  406ce8:	1863      	adds	r3, r4, r1
  406cea:	4293      	cmp	r3, r2
  406cec:	f6ff af59 	blt.w	406ba2 <_realloc_r+0x5a>
  406cf0:	4656      	mov	r6, sl
  406cf2:	e7d8      	b.n	406ca6 <_realloc_r+0x15e>
  406cf4:	6841      	ldr	r1, [r0, #4]
  406cf6:	f021 0b03 	bic.w	fp, r1, #3
  406cfa:	44a3      	add	fp, r4
  406cfc:	f107 0010 	add.w	r0, r7, #16
  406d00:	4583      	cmp	fp, r0
  406d02:	da56      	bge.n	406db2 <_realloc_r+0x26a>
  406d04:	f01e 0f01 	tst.w	lr, #1
  406d08:	f47f af4b 	bne.w	406ba2 <_realloc_r+0x5a>
  406d0c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406d10:	eba9 0a01 	sub.w	sl, r9, r1
  406d14:	f8da 1004 	ldr.w	r1, [sl, #4]
  406d18:	f021 0103 	bic.w	r1, r1, #3
  406d1c:	448b      	add	fp, r1
  406d1e:	4558      	cmp	r0, fp
  406d20:	dce2      	bgt.n	406ce8 <_realloc_r+0x1a0>
  406d22:	4656      	mov	r6, sl
  406d24:	f8da 100c 	ldr.w	r1, [sl, #12]
  406d28:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406d2c:	1f22      	subs	r2, r4, #4
  406d2e:	2a24      	cmp	r2, #36	; 0x24
  406d30:	60c1      	str	r1, [r0, #12]
  406d32:	6088      	str	r0, [r1, #8]
  406d34:	f200 808f 	bhi.w	406e56 <_realloc_r+0x30e>
  406d38:	2a13      	cmp	r2, #19
  406d3a:	f240 808a 	bls.w	406e52 <_realloc_r+0x30a>
  406d3e:	6829      	ldr	r1, [r5, #0]
  406d40:	f8ca 1008 	str.w	r1, [sl, #8]
  406d44:	6869      	ldr	r1, [r5, #4]
  406d46:	f8ca 100c 	str.w	r1, [sl, #12]
  406d4a:	2a1b      	cmp	r2, #27
  406d4c:	f200 808a 	bhi.w	406e64 <_realloc_r+0x31c>
  406d50:	3508      	adds	r5, #8
  406d52:	f10a 0210 	add.w	r2, sl, #16
  406d56:	6829      	ldr	r1, [r5, #0]
  406d58:	6011      	str	r1, [r2, #0]
  406d5a:	6869      	ldr	r1, [r5, #4]
  406d5c:	6051      	str	r1, [r2, #4]
  406d5e:	68a9      	ldr	r1, [r5, #8]
  406d60:	6091      	str	r1, [r2, #8]
  406d62:	eb0a 0107 	add.w	r1, sl, r7
  406d66:	ebab 0207 	sub.w	r2, fp, r7
  406d6a:	f042 0201 	orr.w	r2, r2, #1
  406d6e:	6099      	str	r1, [r3, #8]
  406d70:	604a      	str	r2, [r1, #4]
  406d72:	f8da 3004 	ldr.w	r3, [sl, #4]
  406d76:	f003 0301 	and.w	r3, r3, #1
  406d7a:	431f      	orrs	r7, r3
  406d7c:	4640      	mov	r0, r8
  406d7e:	f8ca 7004 	str.w	r7, [sl, #4]
  406d82:	f7fe f98d 	bl	4050a0 <__malloc_unlock>
  406d86:	e751      	b.n	406c2c <_realloc_r+0xe4>
  406d88:	682b      	ldr	r3, [r5, #0]
  406d8a:	6003      	str	r3, [r0, #0]
  406d8c:	686b      	ldr	r3, [r5, #4]
  406d8e:	6043      	str	r3, [r0, #4]
  406d90:	2a1b      	cmp	r2, #27
  406d92:	d82d      	bhi.n	406df0 <_realloc_r+0x2a8>
  406d94:	f100 0308 	add.w	r3, r0, #8
  406d98:	f105 0208 	add.w	r2, r5, #8
  406d9c:	e71b      	b.n	406bd6 <_realloc_r+0x8e>
  406d9e:	4632      	mov	r2, r6
  406da0:	6829      	ldr	r1, [r5, #0]
  406da2:	6011      	str	r1, [r2, #0]
  406da4:	6869      	ldr	r1, [r5, #4]
  406da6:	6051      	str	r1, [r2, #4]
  406da8:	68a9      	ldr	r1, [r5, #8]
  406daa:	6091      	str	r1, [r2, #8]
  406dac:	461c      	mov	r4, r3
  406dae:	46d1      	mov	r9, sl
  406db0:	e72a      	b.n	406c08 <_realloc_r+0xc0>
  406db2:	eb09 0107 	add.w	r1, r9, r7
  406db6:	ebab 0b07 	sub.w	fp, fp, r7
  406dba:	f04b 0201 	orr.w	r2, fp, #1
  406dbe:	6099      	str	r1, [r3, #8]
  406dc0:	604a      	str	r2, [r1, #4]
  406dc2:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406dc6:	f003 0301 	and.w	r3, r3, #1
  406dca:	431f      	orrs	r7, r3
  406dcc:	4640      	mov	r0, r8
  406dce:	f845 7c04 	str.w	r7, [r5, #-4]
  406dd2:	f7fe f965 	bl	4050a0 <__malloc_unlock>
  406dd6:	462e      	mov	r6, r5
  406dd8:	e728      	b.n	406c2c <_realloc_r+0xe4>
  406dda:	4629      	mov	r1, r5
  406ddc:	f7ff fe50 	bl	406a80 <memmove>
  406de0:	e6ff      	b.n	406be2 <_realloc_r+0x9a>
  406de2:	4629      	mov	r1, r5
  406de4:	4630      	mov	r0, r6
  406de6:	461c      	mov	r4, r3
  406de8:	46d1      	mov	r9, sl
  406dea:	f7ff fe49 	bl	406a80 <memmove>
  406dee:	e70b      	b.n	406c08 <_realloc_r+0xc0>
  406df0:	68ab      	ldr	r3, [r5, #8]
  406df2:	6083      	str	r3, [r0, #8]
  406df4:	68eb      	ldr	r3, [r5, #12]
  406df6:	60c3      	str	r3, [r0, #12]
  406df8:	2a24      	cmp	r2, #36	; 0x24
  406dfa:	d017      	beq.n	406e2c <_realloc_r+0x2e4>
  406dfc:	f100 0310 	add.w	r3, r0, #16
  406e00:	f105 0210 	add.w	r2, r5, #16
  406e04:	e6e7      	b.n	406bd6 <_realloc_r+0x8e>
  406e06:	f850 3c04 	ldr.w	r3, [r0, #-4]
  406e0a:	f023 0303 	bic.w	r3, r3, #3
  406e0e:	441c      	add	r4, r3
  406e10:	462e      	mov	r6, r5
  406e12:	e6f9      	b.n	406c08 <_realloc_r+0xc0>
  406e14:	68a9      	ldr	r1, [r5, #8]
  406e16:	f8ca 1010 	str.w	r1, [sl, #16]
  406e1a:	68e9      	ldr	r1, [r5, #12]
  406e1c:	f8ca 1014 	str.w	r1, [sl, #20]
  406e20:	2a24      	cmp	r2, #36	; 0x24
  406e22:	d00c      	beq.n	406e3e <_realloc_r+0x2f6>
  406e24:	3510      	adds	r5, #16
  406e26:	f10a 0218 	add.w	r2, sl, #24
  406e2a:	e7b9      	b.n	406da0 <_realloc_r+0x258>
  406e2c:	692b      	ldr	r3, [r5, #16]
  406e2e:	6103      	str	r3, [r0, #16]
  406e30:	696b      	ldr	r3, [r5, #20]
  406e32:	6143      	str	r3, [r0, #20]
  406e34:	f105 0218 	add.w	r2, r5, #24
  406e38:	f100 0318 	add.w	r3, r0, #24
  406e3c:	e6cb      	b.n	406bd6 <_realloc_r+0x8e>
  406e3e:	692a      	ldr	r2, [r5, #16]
  406e40:	f8ca 2018 	str.w	r2, [sl, #24]
  406e44:	696a      	ldr	r2, [r5, #20]
  406e46:	f8ca 201c 	str.w	r2, [sl, #28]
  406e4a:	3518      	adds	r5, #24
  406e4c:	f10a 0220 	add.w	r2, sl, #32
  406e50:	e7a6      	b.n	406da0 <_realloc_r+0x258>
  406e52:	4632      	mov	r2, r6
  406e54:	e77f      	b.n	406d56 <_realloc_r+0x20e>
  406e56:	4629      	mov	r1, r5
  406e58:	4630      	mov	r0, r6
  406e5a:	9301      	str	r3, [sp, #4]
  406e5c:	f7ff fe10 	bl	406a80 <memmove>
  406e60:	9b01      	ldr	r3, [sp, #4]
  406e62:	e77e      	b.n	406d62 <_realloc_r+0x21a>
  406e64:	68a9      	ldr	r1, [r5, #8]
  406e66:	f8ca 1010 	str.w	r1, [sl, #16]
  406e6a:	68e9      	ldr	r1, [r5, #12]
  406e6c:	f8ca 1014 	str.w	r1, [sl, #20]
  406e70:	2a24      	cmp	r2, #36	; 0x24
  406e72:	d003      	beq.n	406e7c <_realloc_r+0x334>
  406e74:	3510      	adds	r5, #16
  406e76:	f10a 0218 	add.w	r2, sl, #24
  406e7a:	e76c      	b.n	406d56 <_realloc_r+0x20e>
  406e7c:	692a      	ldr	r2, [r5, #16]
  406e7e:	f8ca 2018 	str.w	r2, [sl, #24]
  406e82:	696a      	ldr	r2, [r5, #20]
  406e84:	f8ca 201c 	str.w	r2, [sl, #28]
  406e88:	3518      	adds	r5, #24
  406e8a:	f10a 0220 	add.w	r2, sl, #32
  406e8e:	e762      	b.n	406d56 <_realloc_r+0x20e>
  406e90:	20400480 	.word	0x20400480

00406e94 <__sread>:
  406e94:	b510      	push	{r4, lr}
  406e96:	460c      	mov	r4, r1
  406e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406e9c:	f000 fa76 	bl	40738c <_read_r>
  406ea0:	2800      	cmp	r0, #0
  406ea2:	db03      	blt.n	406eac <__sread+0x18>
  406ea4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  406ea6:	4403      	add	r3, r0
  406ea8:	6523      	str	r3, [r4, #80]	; 0x50
  406eaa:	bd10      	pop	{r4, pc}
  406eac:	89a3      	ldrh	r3, [r4, #12]
  406eae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406eb2:	81a3      	strh	r3, [r4, #12]
  406eb4:	bd10      	pop	{r4, pc}
  406eb6:	bf00      	nop

00406eb8 <__swrite>:
  406eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406ebc:	4616      	mov	r6, r2
  406ebe:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  406ec2:	461f      	mov	r7, r3
  406ec4:	05d3      	lsls	r3, r2, #23
  406ec6:	460c      	mov	r4, r1
  406ec8:	4605      	mov	r5, r0
  406eca:	d507      	bpl.n	406edc <__swrite+0x24>
  406ecc:	2200      	movs	r2, #0
  406ece:	2302      	movs	r3, #2
  406ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406ed4:	f000 fa44 	bl	407360 <_lseek_r>
  406ed8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406edc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406ee0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406ee4:	81a2      	strh	r2, [r4, #12]
  406ee6:	463b      	mov	r3, r7
  406ee8:	4632      	mov	r2, r6
  406eea:	4628      	mov	r0, r5
  406eec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406ef0:	f000 b924 	b.w	40713c <_write_r>

00406ef4 <__sseek>:
  406ef4:	b510      	push	{r4, lr}
  406ef6:	460c      	mov	r4, r1
  406ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406efc:	f000 fa30 	bl	407360 <_lseek_r>
  406f00:	89a3      	ldrh	r3, [r4, #12]
  406f02:	1c42      	adds	r2, r0, #1
  406f04:	bf0e      	itee	eq
  406f06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  406f0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  406f0e:	6520      	strne	r0, [r4, #80]	; 0x50
  406f10:	81a3      	strh	r3, [r4, #12]
  406f12:	bd10      	pop	{r4, pc}

00406f14 <__sclose>:
  406f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406f18:	f000 b988 	b.w	40722c <_close_r>
	...

00406f40 <strlen>:
  406f40:	f890 f000 	pld	[r0]
  406f44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406f48:	f020 0107 	bic.w	r1, r0, #7
  406f4c:	f06f 0c00 	mvn.w	ip, #0
  406f50:	f010 0407 	ands.w	r4, r0, #7
  406f54:	f891 f020 	pld	[r1, #32]
  406f58:	f040 8049 	bne.w	406fee <strlen+0xae>
  406f5c:	f04f 0400 	mov.w	r4, #0
  406f60:	f06f 0007 	mvn.w	r0, #7
  406f64:	e9d1 2300 	ldrd	r2, r3, [r1]
  406f68:	f891 f040 	pld	[r1, #64]	; 0x40
  406f6c:	f100 0008 	add.w	r0, r0, #8
  406f70:	fa82 f24c 	uadd8	r2, r2, ip
  406f74:	faa4 f28c 	sel	r2, r4, ip
  406f78:	fa83 f34c 	uadd8	r3, r3, ip
  406f7c:	faa2 f38c 	sel	r3, r2, ip
  406f80:	bb4b      	cbnz	r3, 406fd6 <strlen+0x96>
  406f82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406f86:	fa82 f24c 	uadd8	r2, r2, ip
  406f8a:	f100 0008 	add.w	r0, r0, #8
  406f8e:	faa4 f28c 	sel	r2, r4, ip
  406f92:	fa83 f34c 	uadd8	r3, r3, ip
  406f96:	faa2 f38c 	sel	r3, r2, ip
  406f9a:	b9e3      	cbnz	r3, 406fd6 <strlen+0x96>
  406f9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  406fa0:	fa82 f24c 	uadd8	r2, r2, ip
  406fa4:	f100 0008 	add.w	r0, r0, #8
  406fa8:	faa4 f28c 	sel	r2, r4, ip
  406fac:	fa83 f34c 	uadd8	r3, r3, ip
  406fb0:	faa2 f38c 	sel	r3, r2, ip
  406fb4:	b97b      	cbnz	r3, 406fd6 <strlen+0x96>
  406fb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  406fba:	f101 0120 	add.w	r1, r1, #32
  406fbe:	fa82 f24c 	uadd8	r2, r2, ip
  406fc2:	f100 0008 	add.w	r0, r0, #8
  406fc6:	faa4 f28c 	sel	r2, r4, ip
  406fca:	fa83 f34c 	uadd8	r3, r3, ip
  406fce:	faa2 f38c 	sel	r3, r2, ip
  406fd2:	2b00      	cmp	r3, #0
  406fd4:	d0c6      	beq.n	406f64 <strlen+0x24>
  406fd6:	2a00      	cmp	r2, #0
  406fd8:	bf04      	itt	eq
  406fda:	3004      	addeq	r0, #4
  406fdc:	461a      	moveq	r2, r3
  406fde:	ba12      	rev	r2, r2
  406fe0:	fab2 f282 	clz	r2, r2
  406fe4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406fe8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  406fec:	4770      	bx	lr
  406fee:	e9d1 2300 	ldrd	r2, r3, [r1]
  406ff2:	f004 0503 	and.w	r5, r4, #3
  406ff6:	f1c4 0000 	rsb	r0, r4, #0
  406ffa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  406ffe:	f014 0f04 	tst.w	r4, #4
  407002:	f891 f040 	pld	[r1, #64]	; 0x40
  407006:	fa0c f505 	lsl.w	r5, ip, r5
  40700a:	ea62 0205 	orn	r2, r2, r5
  40700e:	bf1c      	itt	ne
  407010:	ea63 0305 	ornne	r3, r3, r5
  407014:	4662      	movne	r2, ip
  407016:	f04f 0400 	mov.w	r4, #0
  40701a:	e7a9      	b.n	406f70 <strlen+0x30>

0040701c <__swbuf_r>:
  40701c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40701e:	460d      	mov	r5, r1
  407020:	4614      	mov	r4, r2
  407022:	4606      	mov	r6, r0
  407024:	b110      	cbz	r0, 40702c <__swbuf_r+0x10>
  407026:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407028:	2b00      	cmp	r3, #0
  40702a:	d04b      	beq.n	4070c4 <__swbuf_r+0xa8>
  40702c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407030:	69a3      	ldr	r3, [r4, #24]
  407032:	60a3      	str	r3, [r4, #8]
  407034:	b291      	uxth	r1, r2
  407036:	0708      	lsls	r0, r1, #28
  407038:	d539      	bpl.n	4070ae <__swbuf_r+0x92>
  40703a:	6923      	ldr	r3, [r4, #16]
  40703c:	2b00      	cmp	r3, #0
  40703e:	d036      	beq.n	4070ae <__swbuf_r+0x92>
  407040:	b2ed      	uxtb	r5, r5
  407042:	0489      	lsls	r1, r1, #18
  407044:	462f      	mov	r7, r5
  407046:	d515      	bpl.n	407074 <__swbuf_r+0x58>
  407048:	6822      	ldr	r2, [r4, #0]
  40704a:	6961      	ldr	r1, [r4, #20]
  40704c:	1ad3      	subs	r3, r2, r3
  40704e:	428b      	cmp	r3, r1
  407050:	da1c      	bge.n	40708c <__swbuf_r+0x70>
  407052:	3301      	adds	r3, #1
  407054:	68a1      	ldr	r1, [r4, #8]
  407056:	1c50      	adds	r0, r2, #1
  407058:	3901      	subs	r1, #1
  40705a:	60a1      	str	r1, [r4, #8]
  40705c:	6020      	str	r0, [r4, #0]
  40705e:	7015      	strb	r5, [r2, #0]
  407060:	6962      	ldr	r2, [r4, #20]
  407062:	429a      	cmp	r2, r3
  407064:	d01a      	beq.n	40709c <__swbuf_r+0x80>
  407066:	89a3      	ldrh	r3, [r4, #12]
  407068:	07db      	lsls	r3, r3, #31
  40706a:	d501      	bpl.n	407070 <__swbuf_r+0x54>
  40706c:	2d0a      	cmp	r5, #10
  40706e:	d015      	beq.n	40709c <__swbuf_r+0x80>
  407070:	4638      	mov	r0, r7
  407072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407074:	6e61      	ldr	r1, [r4, #100]	; 0x64
  407076:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40707a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40707e:	81a2      	strh	r2, [r4, #12]
  407080:	6822      	ldr	r2, [r4, #0]
  407082:	6661      	str	r1, [r4, #100]	; 0x64
  407084:	6961      	ldr	r1, [r4, #20]
  407086:	1ad3      	subs	r3, r2, r3
  407088:	428b      	cmp	r3, r1
  40708a:	dbe2      	blt.n	407052 <__swbuf_r+0x36>
  40708c:	4621      	mov	r1, r4
  40708e:	4630      	mov	r0, r6
  407090:	f7fe fffc 	bl	40608c <_fflush_r>
  407094:	b940      	cbnz	r0, 4070a8 <__swbuf_r+0x8c>
  407096:	6822      	ldr	r2, [r4, #0]
  407098:	2301      	movs	r3, #1
  40709a:	e7db      	b.n	407054 <__swbuf_r+0x38>
  40709c:	4621      	mov	r1, r4
  40709e:	4630      	mov	r0, r6
  4070a0:	f7fe fff4 	bl	40608c <_fflush_r>
  4070a4:	2800      	cmp	r0, #0
  4070a6:	d0e3      	beq.n	407070 <__swbuf_r+0x54>
  4070a8:	f04f 37ff 	mov.w	r7, #4294967295
  4070ac:	e7e0      	b.n	407070 <__swbuf_r+0x54>
  4070ae:	4621      	mov	r1, r4
  4070b0:	4630      	mov	r0, r6
  4070b2:	f7fe fed7 	bl	405e64 <__swsetup_r>
  4070b6:	2800      	cmp	r0, #0
  4070b8:	d1f6      	bne.n	4070a8 <__swbuf_r+0x8c>
  4070ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4070be:	6923      	ldr	r3, [r4, #16]
  4070c0:	b291      	uxth	r1, r2
  4070c2:	e7bd      	b.n	407040 <__swbuf_r+0x24>
  4070c4:	f7ff f83a 	bl	40613c <__sinit>
  4070c8:	e7b0      	b.n	40702c <__swbuf_r+0x10>
  4070ca:	bf00      	nop

004070cc <_wcrtomb_r>:
  4070cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4070ce:	4606      	mov	r6, r0
  4070d0:	b085      	sub	sp, #20
  4070d2:	461f      	mov	r7, r3
  4070d4:	b189      	cbz	r1, 4070fa <_wcrtomb_r+0x2e>
  4070d6:	4c10      	ldr	r4, [pc, #64]	; (407118 <_wcrtomb_r+0x4c>)
  4070d8:	4d10      	ldr	r5, [pc, #64]	; (40711c <_wcrtomb_r+0x50>)
  4070da:	6824      	ldr	r4, [r4, #0]
  4070dc:	6b64      	ldr	r4, [r4, #52]	; 0x34
  4070de:	2c00      	cmp	r4, #0
  4070e0:	bf08      	it	eq
  4070e2:	462c      	moveq	r4, r5
  4070e4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4070e8:	47a0      	blx	r4
  4070ea:	1c43      	adds	r3, r0, #1
  4070ec:	d103      	bne.n	4070f6 <_wcrtomb_r+0x2a>
  4070ee:	2200      	movs	r2, #0
  4070f0:	238a      	movs	r3, #138	; 0x8a
  4070f2:	603a      	str	r2, [r7, #0]
  4070f4:	6033      	str	r3, [r6, #0]
  4070f6:	b005      	add	sp, #20
  4070f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4070fa:	460c      	mov	r4, r1
  4070fc:	4906      	ldr	r1, [pc, #24]	; (407118 <_wcrtomb_r+0x4c>)
  4070fe:	4a07      	ldr	r2, [pc, #28]	; (40711c <_wcrtomb_r+0x50>)
  407100:	6809      	ldr	r1, [r1, #0]
  407102:	6b49      	ldr	r1, [r1, #52]	; 0x34
  407104:	2900      	cmp	r1, #0
  407106:	bf08      	it	eq
  407108:	4611      	moveq	r1, r2
  40710a:	4622      	mov	r2, r4
  40710c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  407110:	a901      	add	r1, sp, #4
  407112:	47a0      	blx	r4
  407114:	e7e9      	b.n	4070ea <_wcrtomb_r+0x1e>
  407116:	bf00      	nop
  407118:	20400050 	.word	0x20400050
  40711c:	20400894 	.word	0x20400894

00407120 <__ascii_wctomb>:
  407120:	b121      	cbz	r1, 40712c <__ascii_wctomb+0xc>
  407122:	2aff      	cmp	r2, #255	; 0xff
  407124:	d804      	bhi.n	407130 <__ascii_wctomb+0x10>
  407126:	700a      	strb	r2, [r1, #0]
  407128:	2001      	movs	r0, #1
  40712a:	4770      	bx	lr
  40712c:	4608      	mov	r0, r1
  40712e:	4770      	bx	lr
  407130:	238a      	movs	r3, #138	; 0x8a
  407132:	6003      	str	r3, [r0, #0]
  407134:	f04f 30ff 	mov.w	r0, #4294967295
  407138:	4770      	bx	lr
  40713a:	bf00      	nop

0040713c <_write_r>:
  40713c:	b570      	push	{r4, r5, r6, lr}
  40713e:	460d      	mov	r5, r1
  407140:	4c08      	ldr	r4, [pc, #32]	; (407164 <_write_r+0x28>)
  407142:	4611      	mov	r1, r2
  407144:	4606      	mov	r6, r0
  407146:	461a      	mov	r2, r3
  407148:	4628      	mov	r0, r5
  40714a:	2300      	movs	r3, #0
  40714c:	6023      	str	r3, [r4, #0]
  40714e:	f7f9 fff7 	bl	401140 <_write>
  407152:	1c43      	adds	r3, r0, #1
  407154:	d000      	beq.n	407158 <_write_r+0x1c>
  407156:	bd70      	pop	{r4, r5, r6, pc}
  407158:	6823      	ldr	r3, [r4, #0]
  40715a:	2b00      	cmp	r3, #0
  40715c:	d0fb      	beq.n	407156 <_write_r+0x1a>
  40715e:	6033      	str	r3, [r6, #0]
  407160:	bd70      	pop	{r4, r5, r6, pc}
  407162:	bf00      	nop
  407164:	2044a8b4 	.word	0x2044a8b4

00407168 <__register_exitproc>:
  407168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40716c:	4d2c      	ldr	r5, [pc, #176]	; (407220 <__register_exitproc+0xb8>)
  40716e:	4606      	mov	r6, r0
  407170:	6828      	ldr	r0, [r5, #0]
  407172:	4698      	mov	r8, r3
  407174:	460f      	mov	r7, r1
  407176:	4691      	mov	r9, r2
  407178:	f7ff fba0 	bl	4068bc <__retarget_lock_acquire_recursive>
  40717c:	4b29      	ldr	r3, [pc, #164]	; (407224 <__register_exitproc+0xbc>)
  40717e:	681c      	ldr	r4, [r3, #0]
  407180:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  407184:	2b00      	cmp	r3, #0
  407186:	d03e      	beq.n	407206 <__register_exitproc+0x9e>
  407188:	685a      	ldr	r2, [r3, #4]
  40718a:	2a1f      	cmp	r2, #31
  40718c:	dc1c      	bgt.n	4071c8 <__register_exitproc+0x60>
  40718e:	f102 0e01 	add.w	lr, r2, #1
  407192:	b176      	cbz	r6, 4071b2 <__register_exitproc+0x4a>
  407194:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  407198:	2401      	movs	r4, #1
  40719a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40719e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4071a2:	4094      	lsls	r4, r2
  4071a4:	4320      	orrs	r0, r4
  4071a6:	2e02      	cmp	r6, #2
  4071a8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4071ac:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4071b0:	d023      	beq.n	4071fa <__register_exitproc+0x92>
  4071b2:	3202      	adds	r2, #2
  4071b4:	f8c3 e004 	str.w	lr, [r3, #4]
  4071b8:	6828      	ldr	r0, [r5, #0]
  4071ba:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4071be:	f7ff fb7f 	bl	4068c0 <__retarget_lock_release_recursive>
  4071c2:	2000      	movs	r0, #0
  4071c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4071c8:	4b17      	ldr	r3, [pc, #92]	; (407228 <__register_exitproc+0xc0>)
  4071ca:	b30b      	cbz	r3, 407210 <__register_exitproc+0xa8>
  4071cc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4071d0:	f7fd fbc0 	bl	404954 <malloc>
  4071d4:	4603      	mov	r3, r0
  4071d6:	b1d8      	cbz	r0, 407210 <__register_exitproc+0xa8>
  4071d8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4071dc:	6002      	str	r2, [r0, #0]
  4071de:	2100      	movs	r1, #0
  4071e0:	6041      	str	r1, [r0, #4]
  4071e2:	460a      	mov	r2, r1
  4071e4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4071e8:	f04f 0e01 	mov.w	lr, #1
  4071ec:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4071f0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4071f4:	2e00      	cmp	r6, #0
  4071f6:	d0dc      	beq.n	4071b2 <__register_exitproc+0x4a>
  4071f8:	e7cc      	b.n	407194 <__register_exitproc+0x2c>
  4071fa:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4071fe:	430c      	orrs	r4, r1
  407200:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  407204:	e7d5      	b.n	4071b2 <__register_exitproc+0x4a>
  407206:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40720a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40720e:	e7bb      	b.n	407188 <__register_exitproc+0x20>
  407210:	6828      	ldr	r0, [r5, #0]
  407212:	f7ff fb55 	bl	4068c0 <__retarget_lock_release_recursive>
  407216:	f04f 30ff 	mov.w	r0, #4294967295
  40721a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40721e:	bf00      	nop
  407220:	20400890 	.word	0x20400890
  407224:	0040812c 	.word	0x0040812c
  407228:	00404955 	.word	0x00404955

0040722c <_close_r>:
  40722c:	b538      	push	{r3, r4, r5, lr}
  40722e:	4c07      	ldr	r4, [pc, #28]	; (40724c <_close_r+0x20>)
  407230:	2300      	movs	r3, #0
  407232:	4605      	mov	r5, r0
  407234:	4608      	mov	r0, r1
  407236:	6023      	str	r3, [r4, #0]
  407238:	f7fb f994 	bl	402564 <_close>
  40723c:	1c43      	adds	r3, r0, #1
  40723e:	d000      	beq.n	407242 <_close_r+0x16>
  407240:	bd38      	pop	{r3, r4, r5, pc}
  407242:	6823      	ldr	r3, [r4, #0]
  407244:	2b00      	cmp	r3, #0
  407246:	d0fb      	beq.n	407240 <_close_r+0x14>
  407248:	602b      	str	r3, [r5, #0]
  40724a:	bd38      	pop	{r3, r4, r5, pc}
  40724c:	2044a8b4 	.word	0x2044a8b4

00407250 <_fclose_r>:
  407250:	b570      	push	{r4, r5, r6, lr}
  407252:	b159      	cbz	r1, 40726c <_fclose_r+0x1c>
  407254:	4605      	mov	r5, r0
  407256:	460c      	mov	r4, r1
  407258:	b110      	cbz	r0, 407260 <_fclose_r+0x10>
  40725a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40725c:	2b00      	cmp	r3, #0
  40725e:	d03c      	beq.n	4072da <_fclose_r+0x8a>
  407260:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407262:	07d8      	lsls	r0, r3, #31
  407264:	d505      	bpl.n	407272 <_fclose_r+0x22>
  407266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40726a:	b92b      	cbnz	r3, 407278 <_fclose_r+0x28>
  40726c:	2600      	movs	r6, #0
  40726e:	4630      	mov	r0, r6
  407270:	bd70      	pop	{r4, r5, r6, pc}
  407272:	89a3      	ldrh	r3, [r4, #12]
  407274:	0599      	lsls	r1, r3, #22
  407276:	d53c      	bpl.n	4072f2 <_fclose_r+0xa2>
  407278:	4621      	mov	r1, r4
  40727a:	4628      	mov	r0, r5
  40727c:	f7fe fe66 	bl	405f4c <__sflush_r>
  407280:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  407282:	4606      	mov	r6, r0
  407284:	b133      	cbz	r3, 407294 <_fclose_r+0x44>
  407286:	69e1      	ldr	r1, [r4, #28]
  407288:	4628      	mov	r0, r5
  40728a:	4798      	blx	r3
  40728c:	2800      	cmp	r0, #0
  40728e:	bfb8      	it	lt
  407290:	f04f 36ff 	movlt.w	r6, #4294967295
  407294:	89a3      	ldrh	r3, [r4, #12]
  407296:	061a      	lsls	r2, r3, #24
  407298:	d422      	bmi.n	4072e0 <_fclose_r+0x90>
  40729a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40729c:	b141      	cbz	r1, 4072b0 <_fclose_r+0x60>
  40729e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4072a2:	4299      	cmp	r1, r3
  4072a4:	d002      	beq.n	4072ac <_fclose_r+0x5c>
  4072a6:	4628      	mov	r0, r5
  4072a8:	f7ff f86e 	bl	406388 <_free_r>
  4072ac:	2300      	movs	r3, #0
  4072ae:	6323      	str	r3, [r4, #48]	; 0x30
  4072b0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4072b2:	b121      	cbz	r1, 4072be <_fclose_r+0x6e>
  4072b4:	4628      	mov	r0, r5
  4072b6:	f7ff f867 	bl	406388 <_free_r>
  4072ba:	2300      	movs	r3, #0
  4072bc:	6463      	str	r3, [r4, #68]	; 0x44
  4072be:	f7fe ff69 	bl	406194 <__sfp_lock_acquire>
  4072c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4072c4:	2200      	movs	r2, #0
  4072c6:	07db      	lsls	r3, r3, #31
  4072c8:	81a2      	strh	r2, [r4, #12]
  4072ca:	d50e      	bpl.n	4072ea <_fclose_r+0x9a>
  4072cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4072ce:	f7ff faf3 	bl	4068b8 <__retarget_lock_close_recursive>
  4072d2:	f7fe ff65 	bl	4061a0 <__sfp_lock_release>
  4072d6:	4630      	mov	r0, r6
  4072d8:	bd70      	pop	{r4, r5, r6, pc}
  4072da:	f7fe ff2f 	bl	40613c <__sinit>
  4072de:	e7bf      	b.n	407260 <_fclose_r+0x10>
  4072e0:	6921      	ldr	r1, [r4, #16]
  4072e2:	4628      	mov	r0, r5
  4072e4:	f7ff f850 	bl	406388 <_free_r>
  4072e8:	e7d7      	b.n	40729a <_fclose_r+0x4a>
  4072ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4072ec:	f7ff fae8 	bl	4068c0 <__retarget_lock_release_recursive>
  4072f0:	e7ec      	b.n	4072cc <_fclose_r+0x7c>
  4072f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4072f4:	f7ff fae2 	bl	4068bc <__retarget_lock_acquire_recursive>
  4072f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4072fc:	2b00      	cmp	r3, #0
  4072fe:	d1bb      	bne.n	407278 <_fclose_r+0x28>
  407300:	6e66      	ldr	r6, [r4, #100]	; 0x64
  407302:	f016 0601 	ands.w	r6, r6, #1
  407306:	d1b1      	bne.n	40726c <_fclose_r+0x1c>
  407308:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40730a:	f7ff fad9 	bl	4068c0 <__retarget_lock_release_recursive>
  40730e:	4630      	mov	r0, r6
  407310:	bd70      	pop	{r4, r5, r6, pc}
  407312:	bf00      	nop

00407314 <_fstat_r>:
  407314:	b538      	push	{r3, r4, r5, lr}
  407316:	460b      	mov	r3, r1
  407318:	4c07      	ldr	r4, [pc, #28]	; (407338 <_fstat_r+0x24>)
  40731a:	4605      	mov	r5, r0
  40731c:	4611      	mov	r1, r2
  40731e:	4618      	mov	r0, r3
  407320:	2300      	movs	r3, #0
  407322:	6023      	str	r3, [r4, #0]
  407324:	f7fb f922 	bl	40256c <_fstat>
  407328:	1c43      	adds	r3, r0, #1
  40732a:	d000      	beq.n	40732e <_fstat_r+0x1a>
  40732c:	bd38      	pop	{r3, r4, r5, pc}
  40732e:	6823      	ldr	r3, [r4, #0]
  407330:	2b00      	cmp	r3, #0
  407332:	d0fb      	beq.n	40732c <_fstat_r+0x18>
  407334:	602b      	str	r3, [r5, #0]
  407336:	bd38      	pop	{r3, r4, r5, pc}
  407338:	2044a8b4 	.word	0x2044a8b4

0040733c <_isatty_r>:
  40733c:	b538      	push	{r3, r4, r5, lr}
  40733e:	4c07      	ldr	r4, [pc, #28]	; (40735c <_isatty_r+0x20>)
  407340:	2300      	movs	r3, #0
  407342:	4605      	mov	r5, r0
  407344:	4608      	mov	r0, r1
  407346:	6023      	str	r3, [r4, #0]
  407348:	f7fb f916 	bl	402578 <_isatty>
  40734c:	1c43      	adds	r3, r0, #1
  40734e:	d000      	beq.n	407352 <_isatty_r+0x16>
  407350:	bd38      	pop	{r3, r4, r5, pc}
  407352:	6823      	ldr	r3, [r4, #0]
  407354:	2b00      	cmp	r3, #0
  407356:	d0fb      	beq.n	407350 <_isatty_r+0x14>
  407358:	602b      	str	r3, [r5, #0]
  40735a:	bd38      	pop	{r3, r4, r5, pc}
  40735c:	2044a8b4 	.word	0x2044a8b4

00407360 <_lseek_r>:
  407360:	b570      	push	{r4, r5, r6, lr}
  407362:	460d      	mov	r5, r1
  407364:	4c08      	ldr	r4, [pc, #32]	; (407388 <_lseek_r+0x28>)
  407366:	4611      	mov	r1, r2
  407368:	4606      	mov	r6, r0
  40736a:	461a      	mov	r2, r3
  40736c:	4628      	mov	r0, r5
  40736e:	2300      	movs	r3, #0
  407370:	6023      	str	r3, [r4, #0]
  407372:	f7fb f903 	bl	40257c <_lseek>
  407376:	1c43      	adds	r3, r0, #1
  407378:	d000      	beq.n	40737c <_lseek_r+0x1c>
  40737a:	bd70      	pop	{r4, r5, r6, pc}
  40737c:	6823      	ldr	r3, [r4, #0]
  40737e:	2b00      	cmp	r3, #0
  407380:	d0fb      	beq.n	40737a <_lseek_r+0x1a>
  407382:	6033      	str	r3, [r6, #0]
  407384:	bd70      	pop	{r4, r5, r6, pc}
  407386:	bf00      	nop
  407388:	2044a8b4 	.word	0x2044a8b4

0040738c <_read_r>:
  40738c:	b570      	push	{r4, r5, r6, lr}
  40738e:	460d      	mov	r5, r1
  407390:	4c08      	ldr	r4, [pc, #32]	; (4073b4 <_read_r+0x28>)
  407392:	4611      	mov	r1, r2
  407394:	4606      	mov	r6, r0
  407396:	461a      	mov	r2, r3
  407398:	4628      	mov	r0, r5
  40739a:	2300      	movs	r3, #0
  40739c:	6023      	str	r3, [r4, #0]
  40739e:	f7f9 feb1 	bl	401104 <_read>
  4073a2:	1c43      	adds	r3, r0, #1
  4073a4:	d000      	beq.n	4073a8 <_read_r+0x1c>
  4073a6:	bd70      	pop	{r4, r5, r6, pc}
  4073a8:	6823      	ldr	r3, [r4, #0]
  4073aa:	2b00      	cmp	r3, #0
  4073ac:	d0fb      	beq.n	4073a6 <_read_r+0x1a>
  4073ae:	6033      	str	r3, [r6, #0]
  4073b0:	bd70      	pop	{r4, r5, r6, pc}
  4073b2:	bf00      	nop
  4073b4:	2044a8b4 	.word	0x2044a8b4

004073b8 <__aeabi_uldivmod>:
  4073b8:	b953      	cbnz	r3, 4073d0 <__aeabi_uldivmod+0x18>
  4073ba:	b94a      	cbnz	r2, 4073d0 <__aeabi_uldivmod+0x18>
  4073bc:	2900      	cmp	r1, #0
  4073be:	bf08      	it	eq
  4073c0:	2800      	cmpeq	r0, #0
  4073c2:	bf1c      	itt	ne
  4073c4:	f04f 31ff 	movne.w	r1, #4294967295
  4073c8:	f04f 30ff 	movne.w	r0, #4294967295
  4073cc:	f000 b97a 	b.w	4076c4 <__aeabi_idiv0>
  4073d0:	f1ad 0c08 	sub.w	ip, sp, #8
  4073d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4073d8:	f000 f806 	bl	4073e8 <__udivmoddi4>
  4073dc:	f8dd e004 	ldr.w	lr, [sp, #4]
  4073e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4073e4:	b004      	add	sp, #16
  4073e6:	4770      	bx	lr

004073e8 <__udivmoddi4>:
  4073e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4073ec:	468c      	mov	ip, r1
  4073ee:	460d      	mov	r5, r1
  4073f0:	4604      	mov	r4, r0
  4073f2:	9e08      	ldr	r6, [sp, #32]
  4073f4:	2b00      	cmp	r3, #0
  4073f6:	d151      	bne.n	40749c <__udivmoddi4+0xb4>
  4073f8:	428a      	cmp	r2, r1
  4073fa:	4617      	mov	r7, r2
  4073fc:	d96d      	bls.n	4074da <__udivmoddi4+0xf2>
  4073fe:	fab2 fe82 	clz	lr, r2
  407402:	f1be 0f00 	cmp.w	lr, #0
  407406:	d00b      	beq.n	407420 <__udivmoddi4+0x38>
  407408:	f1ce 0c20 	rsb	ip, lr, #32
  40740c:	fa01 f50e 	lsl.w	r5, r1, lr
  407410:	fa20 fc0c 	lsr.w	ip, r0, ip
  407414:	fa02 f70e 	lsl.w	r7, r2, lr
  407418:	ea4c 0c05 	orr.w	ip, ip, r5
  40741c:	fa00 f40e 	lsl.w	r4, r0, lr
  407420:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  407424:	0c25      	lsrs	r5, r4, #16
  407426:	fbbc f8fa 	udiv	r8, ip, sl
  40742a:	fa1f f987 	uxth.w	r9, r7
  40742e:	fb0a cc18 	mls	ip, sl, r8, ip
  407432:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  407436:	fb08 f309 	mul.w	r3, r8, r9
  40743a:	42ab      	cmp	r3, r5
  40743c:	d90a      	bls.n	407454 <__udivmoddi4+0x6c>
  40743e:	19ed      	adds	r5, r5, r7
  407440:	f108 32ff 	add.w	r2, r8, #4294967295
  407444:	f080 8123 	bcs.w	40768e <__udivmoddi4+0x2a6>
  407448:	42ab      	cmp	r3, r5
  40744a:	f240 8120 	bls.w	40768e <__udivmoddi4+0x2a6>
  40744e:	f1a8 0802 	sub.w	r8, r8, #2
  407452:	443d      	add	r5, r7
  407454:	1aed      	subs	r5, r5, r3
  407456:	b2a4      	uxth	r4, r4
  407458:	fbb5 f0fa 	udiv	r0, r5, sl
  40745c:	fb0a 5510 	mls	r5, sl, r0, r5
  407460:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  407464:	fb00 f909 	mul.w	r9, r0, r9
  407468:	45a1      	cmp	r9, r4
  40746a:	d909      	bls.n	407480 <__udivmoddi4+0x98>
  40746c:	19e4      	adds	r4, r4, r7
  40746e:	f100 33ff 	add.w	r3, r0, #4294967295
  407472:	f080 810a 	bcs.w	40768a <__udivmoddi4+0x2a2>
  407476:	45a1      	cmp	r9, r4
  407478:	f240 8107 	bls.w	40768a <__udivmoddi4+0x2a2>
  40747c:	3802      	subs	r0, #2
  40747e:	443c      	add	r4, r7
  407480:	eba4 0409 	sub.w	r4, r4, r9
  407484:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  407488:	2100      	movs	r1, #0
  40748a:	2e00      	cmp	r6, #0
  40748c:	d061      	beq.n	407552 <__udivmoddi4+0x16a>
  40748e:	fa24 f40e 	lsr.w	r4, r4, lr
  407492:	2300      	movs	r3, #0
  407494:	6034      	str	r4, [r6, #0]
  407496:	6073      	str	r3, [r6, #4]
  407498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40749c:	428b      	cmp	r3, r1
  40749e:	d907      	bls.n	4074b0 <__udivmoddi4+0xc8>
  4074a0:	2e00      	cmp	r6, #0
  4074a2:	d054      	beq.n	40754e <__udivmoddi4+0x166>
  4074a4:	2100      	movs	r1, #0
  4074a6:	e886 0021 	stmia.w	r6, {r0, r5}
  4074aa:	4608      	mov	r0, r1
  4074ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4074b0:	fab3 f183 	clz	r1, r3
  4074b4:	2900      	cmp	r1, #0
  4074b6:	f040 808e 	bne.w	4075d6 <__udivmoddi4+0x1ee>
  4074ba:	42ab      	cmp	r3, r5
  4074bc:	d302      	bcc.n	4074c4 <__udivmoddi4+0xdc>
  4074be:	4282      	cmp	r2, r0
  4074c0:	f200 80fa 	bhi.w	4076b8 <__udivmoddi4+0x2d0>
  4074c4:	1a84      	subs	r4, r0, r2
  4074c6:	eb65 0503 	sbc.w	r5, r5, r3
  4074ca:	2001      	movs	r0, #1
  4074cc:	46ac      	mov	ip, r5
  4074ce:	2e00      	cmp	r6, #0
  4074d0:	d03f      	beq.n	407552 <__udivmoddi4+0x16a>
  4074d2:	e886 1010 	stmia.w	r6, {r4, ip}
  4074d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4074da:	b912      	cbnz	r2, 4074e2 <__udivmoddi4+0xfa>
  4074dc:	2701      	movs	r7, #1
  4074de:	fbb7 f7f2 	udiv	r7, r7, r2
  4074e2:	fab7 fe87 	clz	lr, r7
  4074e6:	f1be 0f00 	cmp.w	lr, #0
  4074ea:	d134      	bne.n	407556 <__udivmoddi4+0x16e>
  4074ec:	1beb      	subs	r3, r5, r7
  4074ee:	0c3a      	lsrs	r2, r7, #16
  4074f0:	fa1f fc87 	uxth.w	ip, r7
  4074f4:	2101      	movs	r1, #1
  4074f6:	fbb3 f8f2 	udiv	r8, r3, r2
  4074fa:	0c25      	lsrs	r5, r4, #16
  4074fc:	fb02 3318 	mls	r3, r2, r8, r3
  407500:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  407504:	fb0c f308 	mul.w	r3, ip, r8
  407508:	42ab      	cmp	r3, r5
  40750a:	d907      	bls.n	40751c <__udivmoddi4+0x134>
  40750c:	19ed      	adds	r5, r5, r7
  40750e:	f108 30ff 	add.w	r0, r8, #4294967295
  407512:	d202      	bcs.n	40751a <__udivmoddi4+0x132>
  407514:	42ab      	cmp	r3, r5
  407516:	f200 80d1 	bhi.w	4076bc <__udivmoddi4+0x2d4>
  40751a:	4680      	mov	r8, r0
  40751c:	1aed      	subs	r5, r5, r3
  40751e:	b2a3      	uxth	r3, r4
  407520:	fbb5 f0f2 	udiv	r0, r5, r2
  407524:	fb02 5510 	mls	r5, r2, r0, r5
  407528:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40752c:	fb0c fc00 	mul.w	ip, ip, r0
  407530:	45a4      	cmp	ip, r4
  407532:	d907      	bls.n	407544 <__udivmoddi4+0x15c>
  407534:	19e4      	adds	r4, r4, r7
  407536:	f100 33ff 	add.w	r3, r0, #4294967295
  40753a:	d202      	bcs.n	407542 <__udivmoddi4+0x15a>
  40753c:	45a4      	cmp	ip, r4
  40753e:	f200 80b8 	bhi.w	4076b2 <__udivmoddi4+0x2ca>
  407542:	4618      	mov	r0, r3
  407544:	eba4 040c 	sub.w	r4, r4, ip
  407548:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40754c:	e79d      	b.n	40748a <__udivmoddi4+0xa2>
  40754e:	4631      	mov	r1, r6
  407550:	4630      	mov	r0, r6
  407552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407556:	f1ce 0420 	rsb	r4, lr, #32
  40755a:	fa05 f30e 	lsl.w	r3, r5, lr
  40755e:	fa07 f70e 	lsl.w	r7, r7, lr
  407562:	fa20 f804 	lsr.w	r8, r0, r4
  407566:	0c3a      	lsrs	r2, r7, #16
  407568:	fa25 f404 	lsr.w	r4, r5, r4
  40756c:	ea48 0803 	orr.w	r8, r8, r3
  407570:	fbb4 f1f2 	udiv	r1, r4, r2
  407574:	ea4f 4518 	mov.w	r5, r8, lsr #16
  407578:	fb02 4411 	mls	r4, r2, r1, r4
  40757c:	fa1f fc87 	uxth.w	ip, r7
  407580:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  407584:	fb01 f30c 	mul.w	r3, r1, ip
  407588:	42ab      	cmp	r3, r5
  40758a:	fa00 f40e 	lsl.w	r4, r0, lr
  40758e:	d909      	bls.n	4075a4 <__udivmoddi4+0x1bc>
  407590:	19ed      	adds	r5, r5, r7
  407592:	f101 30ff 	add.w	r0, r1, #4294967295
  407596:	f080 808a 	bcs.w	4076ae <__udivmoddi4+0x2c6>
  40759a:	42ab      	cmp	r3, r5
  40759c:	f240 8087 	bls.w	4076ae <__udivmoddi4+0x2c6>
  4075a0:	3902      	subs	r1, #2
  4075a2:	443d      	add	r5, r7
  4075a4:	1aeb      	subs	r3, r5, r3
  4075a6:	fa1f f588 	uxth.w	r5, r8
  4075aa:	fbb3 f0f2 	udiv	r0, r3, r2
  4075ae:	fb02 3310 	mls	r3, r2, r0, r3
  4075b2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4075b6:	fb00 f30c 	mul.w	r3, r0, ip
  4075ba:	42ab      	cmp	r3, r5
  4075bc:	d907      	bls.n	4075ce <__udivmoddi4+0x1e6>
  4075be:	19ed      	adds	r5, r5, r7
  4075c0:	f100 38ff 	add.w	r8, r0, #4294967295
  4075c4:	d26f      	bcs.n	4076a6 <__udivmoddi4+0x2be>
  4075c6:	42ab      	cmp	r3, r5
  4075c8:	d96d      	bls.n	4076a6 <__udivmoddi4+0x2be>
  4075ca:	3802      	subs	r0, #2
  4075cc:	443d      	add	r5, r7
  4075ce:	1aeb      	subs	r3, r5, r3
  4075d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4075d4:	e78f      	b.n	4074f6 <__udivmoddi4+0x10e>
  4075d6:	f1c1 0720 	rsb	r7, r1, #32
  4075da:	fa22 f807 	lsr.w	r8, r2, r7
  4075de:	408b      	lsls	r3, r1
  4075e0:	fa05 f401 	lsl.w	r4, r5, r1
  4075e4:	ea48 0303 	orr.w	r3, r8, r3
  4075e8:	fa20 fe07 	lsr.w	lr, r0, r7
  4075ec:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4075f0:	40fd      	lsrs	r5, r7
  4075f2:	ea4e 0e04 	orr.w	lr, lr, r4
  4075f6:	fbb5 f9fc 	udiv	r9, r5, ip
  4075fa:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4075fe:	fb0c 5519 	mls	r5, ip, r9, r5
  407602:	fa1f f883 	uxth.w	r8, r3
  407606:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40760a:	fb09 f408 	mul.w	r4, r9, r8
  40760e:	42ac      	cmp	r4, r5
  407610:	fa02 f201 	lsl.w	r2, r2, r1
  407614:	fa00 fa01 	lsl.w	sl, r0, r1
  407618:	d908      	bls.n	40762c <__udivmoddi4+0x244>
  40761a:	18ed      	adds	r5, r5, r3
  40761c:	f109 30ff 	add.w	r0, r9, #4294967295
  407620:	d243      	bcs.n	4076aa <__udivmoddi4+0x2c2>
  407622:	42ac      	cmp	r4, r5
  407624:	d941      	bls.n	4076aa <__udivmoddi4+0x2c2>
  407626:	f1a9 0902 	sub.w	r9, r9, #2
  40762a:	441d      	add	r5, r3
  40762c:	1b2d      	subs	r5, r5, r4
  40762e:	fa1f fe8e 	uxth.w	lr, lr
  407632:	fbb5 f0fc 	udiv	r0, r5, ip
  407636:	fb0c 5510 	mls	r5, ip, r0, r5
  40763a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40763e:	fb00 f808 	mul.w	r8, r0, r8
  407642:	45a0      	cmp	r8, r4
  407644:	d907      	bls.n	407656 <__udivmoddi4+0x26e>
  407646:	18e4      	adds	r4, r4, r3
  407648:	f100 35ff 	add.w	r5, r0, #4294967295
  40764c:	d229      	bcs.n	4076a2 <__udivmoddi4+0x2ba>
  40764e:	45a0      	cmp	r8, r4
  407650:	d927      	bls.n	4076a2 <__udivmoddi4+0x2ba>
  407652:	3802      	subs	r0, #2
  407654:	441c      	add	r4, r3
  407656:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40765a:	eba4 0408 	sub.w	r4, r4, r8
  40765e:	fba0 8902 	umull	r8, r9, r0, r2
  407662:	454c      	cmp	r4, r9
  407664:	46c6      	mov	lr, r8
  407666:	464d      	mov	r5, r9
  407668:	d315      	bcc.n	407696 <__udivmoddi4+0x2ae>
  40766a:	d012      	beq.n	407692 <__udivmoddi4+0x2aa>
  40766c:	b156      	cbz	r6, 407684 <__udivmoddi4+0x29c>
  40766e:	ebba 030e 	subs.w	r3, sl, lr
  407672:	eb64 0405 	sbc.w	r4, r4, r5
  407676:	fa04 f707 	lsl.w	r7, r4, r7
  40767a:	40cb      	lsrs	r3, r1
  40767c:	431f      	orrs	r7, r3
  40767e:	40cc      	lsrs	r4, r1
  407680:	6037      	str	r7, [r6, #0]
  407682:	6074      	str	r4, [r6, #4]
  407684:	2100      	movs	r1, #0
  407686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40768a:	4618      	mov	r0, r3
  40768c:	e6f8      	b.n	407480 <__udivmoddi4+0x98>
  40768e:	4690      	mov	r8, r2
  407690:	e6e0      	b.n	407454 <__udivmoddi4+0x6c>
  407692:	45c2      	cmp	sl, r8
  407694:	d2ea      	bcs.n	40766c <__udivmoddi4+0x284>
  407696:	ebb8 0e02 	subs.w	lr, r8, r2
  40769a:	eb69 0503 	sbc.w	r5, r9, r3
  40769e:	3801      	subs	r0, #1
  4076a0:	e7e4      	b.n	40766c <__udivmoddi4+0x284>
  4076a2:	4628      	mov	r0, r5
  4076a4:	e7d7      	b.n	407656 <__udivmoddi4+0x26e>
  4076a6:	4640      	mov	r0, r8
  4076a8:	e791      	b.n	4075ce <__udivmoddi4+0x1e6>
  4076aa:	4681      	mov	r9, r0
  4076ac:	e7be      	b.n	40762c <__udivmoddi4+0x244>
  4076ae:	4601      	mov	r1, r0
  4076b0:	e778      	b.n	4075a4 <__udivmoddi4+0x1bc>
  4076b2:	3802      	subs	r0, #2
  4076b4:	443c      	add	r4, r7
  4076b6:	e745      	b.n	407544 <__udivmoddi4+0x15c>
  4076b8:	4608      	mov	r0, r1
  4076ba:	e708      	b.n	4074ce <__udivmoddi4+0xe6>
  4076bc:	f1a8 0802 	sub.w	r8, r8, #2
  4076c0:	443d      	add	r5, r7
  4076c2:	e72b      	b.n	40751c <__udivmoddi4+0x134>

004076c4 <__aeabi_idiv0>:
  4076c4:	4770      	bx	lr
  4076c6:	bf00      	nop
  4076c8:	092d452d 	.word	0x092d452d
  4076cc:	39384d57 	.word	0x39384d57
  4076d0:	69203430 	.word	0x69203430
  4076d4:	6974696e 	.word	0x6974696e
  4076d8:	7a696c61 	.word	0x7a696c61
  4076dc:	6f697461 	.word	0x6f697461
  4076e0:	6166206e 	.word	0x6166206e
  4076e4:	64656c69 	.word	0x64656c69
  4076e8:	00000d2e 	.word	0x00000d2e

004076ec <CSWTCH.7>:
  4076ec:	00000100 00000300 00000200 00000002     ................
  4076fc:	00000002 00000001 00000002 00000002     ................
  40770c:	00000002 00000001 00000002 00000002     ................
  40771c:	00000001                                ....

00407720 <midi_note_frequencies>:
  407720:	4102d0e5 410a978d 4112d4fe 411b9168     ...A...A...Ah..A
  407730:	4124d0e5 412e9ba6 4138fdf4 41440000     ..$A...A..8A..DA
  407740:	414fa5e3 415c0000 41691687 4176f1aa     ..OA..\A..iA..vA
  407750:	4182d0e5 418a978d 4192d4fe 419b8f5c     ...A...A...A\..A
  407760:	41a4d0e5 41ae9db2 41b90000 41c40000     ...A...A...A...A
  407770:	41cfa7f0 41dc0000 41e9147b 41f6f1aa     ...A...A{..A...A
  407780:	4202cfdf 420a978d 4212d4fe 421b9062     ...B...B...Bb..B
  407790:	4224cfdf 422e9db2 4238fefa 4243fefa     ..$B...B..8B..CB
  4077a0:	424fa6e9 425c0000 4269147b 4276f0a4     ..OB..\B{.iB..vB
  4077b0:	4282cfdf 428a978d 4292d4fe 429b9062     ...B...B...Bb..B
  4077c0:	42a4d062 42ae9d2f 42b8ff7d 42c3ff7d     b..B/..B}..B}..B
  4077d0:	42cfa6e9 42dc0000 42e914fe 42f6f127     ...B...B...B'..B
  4077e0:	4302d021 430a974c 4312d4fe 431b9021     !..CL..C...C!..C
  4077f0:	4324d062 432e9d2f 4338ff3b 4343ff7d     b.$C/..C;.8C}.CC
  407800:	434fa6e9 435c0000 436914fe 4376f127     ..OC..\C..iC'.vC
  407810:	4382d021 438a976d 4392d51f 439b9042     !..Cm..C...CB..C
  407820:	43a4d062 43ae9d2f 43b8ff3b 43c3ff5c     b..C/..C;..C\..C
  407830:	43cfa70a 43dc0000 43e914fe 43f6f106     ...C...C...C...C
  407840:	4402d010 440a975c 4412d51f 441b9042     ...D\..D...DB..D
  407850:	4424d052 442e9d2f 4438ff4c 4443ff6d     R.$D/..DL.8Dm.CD
  407860:	444fa6fa 445c0000 446914fe 4476f117     ..OD..\D..iD..vD
  407870:	4482d010 448a9764 4492d517 449b9042     ...Dd..D...DB..D
  407880:	44a4d052 44ae9d37 44b8ff4c 44c3ff6d     R..D7..DL..Dm..D
  407890:	44cfa702 44dc0000 44e914f6 44f6f10e     ...D...D...D...D
  4078a0:	4502d014 450a9760 4512d517 451b9042     ...E`..E...EB..E
  4078b0:	4524d052 452e9d37 4538ff48 4543ff68     R.$E7..EH.8Eh.CE
  4078c0:	454fa702 455c0000 456914f6 4576f10e     ..OE..\E..iE..vE
  4078d0:	4582d012 458a9760 4592d517 459b9042     ...E`..E...EB..E
  4078e0:	45a4d054 45ae9d37 45b8ff4a 45c3ff6a     T..E7..EJ..Ej..E
  4078f0:	45cfa700 45dc0000 45e914f6 45f6f110     ...E...E...E...E
  407900:	4602d012 460a9760 4612d518 461b9041     ...F`..F...FA..F
  407910:	4624d052 462e9d33 4638ff48 4643ff66     R.$F3..FH.8Ff.CF

00407920 <sinTable_f32>:
  407920:	00000000 3c490e92 3cc90ab1 3d16c32b     ......I<...<+..=
  407930:	3d48fb2e 3d7b2b75 3d96a904 3dafb680     ..H=u+{=...=...=
  407940:	3dc8bd36 3de1bc2f 3dfab273 3e09cf87     6..=/..=s..=...>
  407950:	3e164083 3e22abb5 3e2f10a2 3e3b6ecf     .@.>..">../>.n;>
  407960:	3e47c5c2 3e541501 3e605c13 3e6c9a7f     ..G>..T>.\`>..l>
  407970:	3e78cfcc 3e827dc0 3e888e93 3e8e9a22     ..x>.}.>...>"..>
  407980:	3e94a032 3e9aa086 3ea09ae5 3ea68f12     2..>...>...>...>
  407990:	3eac7cd4 3eb263ef 3eb8442a 3ebe1d49     .|.>.c.>*D.>I..>
  4079a0:	3ec3ef15 3ec9b953 3ecf7bca 3ed53641     ...>S..>.{.>A6.>
  4079b0:	3edae880 3ee0924f 3ee63375 3eebcbbb     ...>O..>u3.>...>
  4079c0:	3ef15aea 3ef6e0cb 3efc5d27 3f00e7e4     .Z.>...>'].>...?
  4079d0:	3f039c3d 3f064b82 3f08f59b 3f0b9a6b     =..?.K.?...?k..?
  4079e0:	3f0e39da 3f10d3cd 3f13682a 3f15f6d9     .9.?...?*h.?...?
  4079f0:	3f187fc0 3f1b02c6 3f1d7fd1 3f1ff6cb     ...?...?...?...?
  407a00:	3f226799 3f24d225 3f273656 3f299415     .g"?%.$?V6'?..)?
  407a10:	3f2beb4a 3f2e3bde 3f3085bb 3f32c8c9     J.+?.;.?..0?..2?
  407a20:	3f3504f3 3f373a23 3f396842 3f3b8f3b     ..5?#:7?Bh9?;.;?
  407a30:	3f3daef9 3f3fc767 3f41d870 3f43e201     ..=?g.??p.A?..C?
  407a40:	3f45e403 3f47de65 3f49d112 3f4bbbf8     ..E?e.G?..I?..K?
  407a50:	3f4d9f02 3f4f7a20 3f514d3d 3f531849     ..M? zO?=MQ?I.S?
  407a60:	3f54db31 3f5695e5 3f584853 3f59f26a     1.T?..V?SHX?j.Y?
  407a70:	3f5b941a 3f5d2d53 3f5ebe05 3f604621     ..[?S-]?..^?!F`?
  407a80:	3f61c597 3f633c5a 3f64aa59 3f660f88     ..a?Z<c?Y.d?..f?
  407a90:	3f676bd8 3f68bf3c 3f6a09a7 3f6b4b0c     .kg?<.h?..j?.Kk?
  407aa0:	3f6c835e 3f6db293 3f6ed89e 3f6ff573     ^.l?..m?..n?s.o?
  407ab0:	3f710908 3f721352 3f731447 3f740bdd     ..q?R.r?G.s?..t?
  407ac0:	3f74fa0b 3f75dec6 3f76ba07 3f778bc5     ..t?..u?..v?..w?
  407ad0:	3f7853f8 3f791298 3f79c79d 3f7a7302     .Sx?..y?..y?.sz?
  407ae0:	3f7b14be 3f7baccd 3f7c3b28 3f7cbfc9     ..{?..{?(;|?..|?
  407af0:	3f7d3aac 3f7dabcc 3f7e1323 3f7e70b0     .:}?..}?#.~?.p~?
  407b00:	3f7ec46d 3f7f0e58 3f7f4e6d 3f7f84ab     m.~?X..?mN.?...?
  407b10:	3f7fb10f 3f7fd397 3f7fec43 3f7ffb11     ...?...?C..?...?
  407b20:	3f800000 3f7ffb11 3f7fec43 3f7fd397     ...?...?C..?...?
  407b30:	3f7fb10f 3f7f84ab 3f7f4e6d 3f7f0e58     ...?...?mN.?X..?
  407b40:	3f7ec46d 3f7e70b0 3f7e1323 3f7dabcc     m.~?.p~?#.~?..}?
  407b50:	3f7d3aac 3f7cbfc9 3f7c3b28 3f7baccd     .:}?..|?(;|?..{?
  407b60:	3f7b14be 3f7a7302 3f79c79d 3f791298     ..{?.sz?..y?..y?
  407b70:	3f7853f8 3f778bc5 3f76ba07 3f75dec6     .Sx?..w?..v?..u?
  407b80:	3f74fa0b 3f740bdd 3f731447 3f721352     ..t?..t?G.s?R.r?
  407b90:	3f710908 3f6ff573 3f6ed89e 3f6db293     ..q?s.o?..n?..m?
  407ba0:	3f6c835e 3f6b4b0c 3f6a09a7 3f68bf3c     ^.l?.Kk?..j?<.h?
  407bb0:	3f676bd8 3f660f88 3f64aa59 3f633c5a     .kg?..f?Y.d?Z<c?
  407bc0:	3f61c597 3f604621 3f5ebe05 3f5d2d53     ..a?!F`?..^?S-]?
  407bd0:	3f5b941a 3f59f26a 3f584853 3f5695e5     ..[?j.Y?SHX?..V?
  407be0:	3f54db31 3f531849 3f514d3d 3f4f7a20     1.T?I.S?=MQ? zO?
  407bf0:	3f4d9f02 3f4bbbf8 3f49d112 3f47de65     ..M?..K?..I?e.G?
  407c00:	3f45e403 3f43e201 3f41d870 3f3fc767     ..E?..C?p.A?g.??
  407c10:	3f3daef9 3f3b8f3b 3f396842 3f373a23     ..=?;.;?Bh9?#:7?
  407c20:	3f3504f3 3f32c8c9 3f3085bb 3f2e3bde     ..5?..2?..0?.;.?
  407c30:	3f2beb4a 3f299415 3f273656 3f24d225     J.+?..)?V6'?%.$?
  407c40:	3f226799 3f1ff6cb 3f1d7fd1 3f1b02c6     .g"?...?...?...?
  407c50:	3f187fc0 3f15f6d9 3f13682a 3f10d3cd     ...?...?*h.?...?
  407c60:	3f0e39da 3f0b9a6b 3f08f59b 3f064b82     .9.?k..?...?.K.?
  407c70:	3f039c3d 3f00e7e4 3efc5d27 3ef6e0cb     =..?...?'].>...>
  407c80:	3ef15aea 3eebcbbb 3ee63375 3ee0924f     .Z.>...>u3.>O..>
  407c90:	3edae880 3ed53641 3ecf7bca 3ec9b953     ...>A6.>.{.>S..>
  407ca0:	3ec3ef15 3ebe1d49 3eb8442a 3eb263ef     ...>I..>*D.>.c.>
  407cb0:	3eac7cd4 3ea68f12 3ea09ae5 3e9aa086     .|.>...>...>...>
  407cc0:	3e94a032 3e8e9a22 3e888e93 3e827dc0     2..>"..>...>.}.>
  407cd0:	3e78cfcc 3e6c9a7f 3e605c13 3e541501     ..x>..l>.\`>..T>
  407ce0:	3e47c5c2 3e3b6ecf 3e2f10a2 3e22abb5     ..G>.n;>../>..">
  407cf0:	3e164083 3e09cf87 3dfab273 3de1bc2f     .@.>...>s..=/..=
  407d00:	3dc8bd36 3dafb680 3d96a904 3d7b2b75     6..=...=...=u+{=
  407d10:	3d48fb2e 3d16c32b 3cc90ab1 3c490e92     ..H=+..=...<..I<
  407d20:	00000000 bc490e92 bcc90ab1 bd16c32b     ......I.....+...
  407d30:	bd48fb2e bd7b2b75 bd96a904 bdafb680     ..H.u+{.........
  407d40:	bdc8bd36 bde1bc2f bdfab273 be09cf87     6.../...s.......
  407d50:	be164083 be22abb5 be2f10a2 be3b6ecf     .@....".../..n;.
  407d60:	be47c5c2 be541501 be605c13 be6c9a7f     ..G...T..\`...l.
  407d70:	be78cfcc be827dc0 be888e93 be8e9a22     ..x..}......"...
  407d80:	be94a032 be9aa086 bea09ae5 bea68f12     2...............
  407d90:	beac7cd4 beb263ef beb8442a bebe1d49     .|...c..*D..I...
  407da0:	bec3ef15 bec9b953 becf7bca bed53641     ....S....{..A6..
  407db0:	bedae880 bee0924f bee63375 beebcbbb     ....O...u3......
  407dc0:	bef15aea bef6e0cb befc5d27 bf00e7e4     .Z......']......
  407dd0:	bf039c3d bf064b82 bf08f59b bf0b9a6b     =....K......k...
  407de0:	bf0e39da bf10d3cd bf13682a bf15f6d9     .9......*h......
  407df0:	bf187fc0 bf1b02c6 bf1d7fd1 bf1ff6cb     ................
  407e00:	bf226799 bf24d225 bf273656 bf299415     .g".%.$.V6'...).
  407e10:	bf2beb4a bf2e3bde bf3085bb bf32c8c9     J.+..;....0...2.
  407e20:	bf3504f3 bf373a23 bf396842 bf3b8f3b     ..5.#:7.Bh9.;.;.
  407e30:	bf3daef9 bf3fc767 bf41d870 bf43e201     ..=.g.?.p.A...C.
  407e40:	bf45e403 bf47de65 bf49d112 bf4bbbf8     ..E.e.G...I...K.
  407e50:	bf4d9f02 bf4f7a20 bf514d3d bf531849     ..M. zO.=MQ.I.S.
  407e60:	bf54db31 bf5695e5 bf584853 bf59f26a     1.T...V.SHX.j.Y.
  407e70:	bf5b941a bf5d2d53 bf5ebe05 bf604621     ..[.S-]...^.!F`.
  407e80:	bf61c597 bf633c5a bf64aa59 bf660f88     ..a.Z<c.Y.d...f.
  407e90:	bf676bd8 bf68bf3c bf6a09a7 bf6b4b0c     .kg.<.h...j..Kk.
  407ea0:	bf6c835e bf6db293 bf6ed89e bf6ff573     ^.l...m...n.s.o.
  407eb0:	bf710908 bf721352 bf731447 bf740bdd     ..q.R.r.G.s...t.
  407ec0:	bf74fa0b bf75dec6 bf76ba07 bf778bc5     ..t...u...v...w.
  407ed0:	bf7853f8 bf791298 bf79c79d bf7a7302     .Sx...y...y..sz.
  407ee0:	bf7b14be bf7baccd bf7c3b28 bf7cbfc9     ..{...{.(;|...|.
  407ef0:	bf7d3aac bf7dabcc bf7e1323 bf7e70b0     .:}...}.#.~..p~.
  407f00:	bf7ec46d bf7f0e58 bf7f4e6d bf7f84ab     m.~.X...mN......
  407f10:	bf7fb10f bf7fd397 bf7fec43 bf7ffb11     ........C.......
  407f20:	bf800000 bf7ffb11 bf7fec43 bf7fd397     ........C.......
  407f30:	bf7fb10f bf7f84ab bf7f4e6d bf7f0e58     ........mN..X...
  407f40:	bf7ec46d bf7e70b0 bf7e1323 bf7dabcc     m.~..p~.#.~...}.
  407f50:	bf7d3aac bf7cbfc9 bf7c3b28 bf7baccd     .:}...|.(;|...{.
  407f60:	bf7b14be bf7a7302 bf79c79d bf791298     ..{..sz...y...y.
  407f70:	bf7853f8 bf778bc5 bf76ba07 bf75dec6     .Sx...w...v...u.
  407f80:	bf74fa0b bf740bdd bf731447 bf721352     ..t...t.G.s.R.r.
  407f90:	bf710908 bf6ff573 bf6ed89e bf6db293     ..q.s.o...n...m.
  407fa0:	bf6c835e bf6b4b0c bf6a09a7 bf68bf3c     ^.l..Kk...j.<.h.
  407fb0:	bf676bd8 bf660f88 bf64aa59 bf633c5a     .kg...f.Y.d.Z<c.
  407fc0:	bf61c597 bf604621 bf5ebe05 bf5d2d53     ..a.!F`...^.S-].
  407fd0:	bf5b941a bf59f26a bf584853 bf5695e5     ..[.j.Y.SHX...V.
  407fe0:	bf54db31 bf531849 bf514d3d bf4f7a20     1.T.I.S.=MQ. zO.
  407ff0:	bf4d9f02 bf4bbbf8 bf49d112 bf47de65     ..M...K...I.e.G.
  408000:	bf45e403 bf43e201 bf41d870 bf3fc767     ..E...C.p.A.g.?.
  408010:	bf3daef9 bf3b8f3b bf396842 bf373a23     ..=.;.;.Bh9.#:7.
  408020:	bf3504f3 bf32c8c9 bf3085bb bf2e3bde     ..5...2...0..;..
  408030:	bf2beb4a bf299415 bf273656 bf24d225     J.+...).V6'.%.$.
  408040:	bf226799 bf1ff6cb bf1d7fd1 bf1b02c6     .g".............
  408050:	bf187fc0 bf15f6d9 bf13682a bf10d3cd     ........*h......
  408060:	bf0e39da bf0b9a6b bf08f59b bf064b82     .9..k........K..
  408070:	bf039c3d bf00e7e4 befc5d27 bef6e0cb     =.......']......
  408080:	bef15aea beebcbbb bee63375 bee0924f     .Z......u3..O...
  408090:	bedae880 bed53641 becf7bca bec9b953     ....A6...{..S...
  4080a0:	bec3ef15 bebe1d49 beb8442a beb263ef     ....I...*D...c..
  4080b0:	beac7cd4 bea68f12 bea09ae5 be9aa086     .|..............
  4080c0:	be94a032 be8e9a22 be888e93 be827dc0     2..."........}..
  4080d0:	be78cfcc be6c9a7f be605c13 be541501     ..x...l..\`...T.
  4080e0:	be47c5c2 be3b6ecf be2f10a2 be22abb5     ..G..n;.../...".
  4080f0:	be164083 be09cf87 bdfab273 bde1bc2f     .@......s.../...
  408100:	bdc8bd36 bdafb680 bd96a904 bd7b2b75     6...........u+{.
  408110:	bd48fb2e bd16c32b bcc90ab1 bc490e92     ..H.+.........I.
  408120:	80000000 66676f6c 00000000              ....logf....

0040812c <_global_impure_ptr>:
  40812c:	20400058 33323130 37363534 42413938     X.@ 0123456789AB
  40813c:	46454443 00000000 33323130 37363534     CDEF....01234567
  40814c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40815c:	0000296c                                l)..

00408160 <blanks.8340>:
  408160:	20202020 20202020 20202020 20202020                     

00408170 <zeroes.8341>:
  408170:	30303030 30303030 30303030 30303030     0000000000000000
  408180:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00408190 <_ctype_>:
  408190:	20202000 20202020 28282020 20282828     .         ((((( 
  4081a0:	20202020 20202020 20202020 20202020                     
  4081b0:	10108820 10101010 10101010 10101010      ...............
  4081c0:	04040410 04040404 10040404 10101010     ................
  4081d0:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4081e0:	01010101 01010101 01010101 10101010     ................
  4081f0:	42421010 42424242 02020202 02020202     ..BBBBBB........
  408200:	02020202 02020202 02020202 10101010     ................
  408210:	00000020 00000000 00000000 00000000      ...............
	...

00408294 <_init>:
  408294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408296:	bf00      	nop
  408298:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40829a:	bc08      	pop	{r3}
  40829c:	469e      	mov	lr, r3
  40829e:	4770      	bx	lr

004082a0 <__init_array_start>:
  4082a0:	00405f2d 	.word	0x00405f2d

004082a4 <__frame_dummy_init_array_entry>:
  4082a4:	00400165                                e.@.

004082a8 <_fini>:
  4082a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4082aa:	bf00      	nop
  4082ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4082ae:	bc08      	pop	{r3}
  4082b0:	469e      	mov	lr, r3
  4082b2:	4770      	bx	lr

004082b4 <__fini_array_start>:
  4082b4:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <inBuffer>:
2040000c:	9800 2044                                   ..D 

20400010 <inPingMode>:
20400010:	0001 0000                                   ....

20400014 <outBuffer>:
20400014:	7800 2044                                   .xD 

20400018 <outPingMode>:
20400018:	0001 0000                                   ....

2040001c <pitchtracker>:
2040001c:	0000 bf80 ffff ffff                         ........

20400024 <g_interrupt_enabled>:
20400024:	0001 0000                                   ....

20400028 <SystemCoreClock>:
20400028:	0900 003d                                   ..=.

2040002c <chorus_speed>:
2040002c:	d70a 3ca3                                   ...<

20400030 <delay_feedback>:
20400030:	cccd 3e4c                                   ..L>

20400034 <delay_speed>:
20400034:	3c8c 0000                                   .<..

20400038 <dry_volume>:
20400038:	0000 3f80                                   ...?

2040003c <harm_volume>:
2040003c:	0000 3f80                                   ...?

20400040 <key_root>:
20400040:	0040 0000                                   @...

20400044 <master_volume>:
20400044:	999a 3f19                                   ...?

20400048 <pitch_bend>:
20400048:	0040 0000                                   @...

2040004c <__fdlib_version>:
2040004c:	0001 0000                                   ....

20400050 <_impure_ptr>:
20400050:	0058 2040 0000 0000                         X.@ ....

20400058 <impure_data>:
20400058:	0000 0000 0344 2040 03ac 2040 0414 2040     ....D.@ ..@ ..@ 
	...
20400100:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400110:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400480 <__malloc_av_>:
	...
20400488:	0480 2040 0480 2040 0488 2040 0488 2040     ..@ ..@ ..@ ..@ 
20400498:	0490 2040 0490 2040 0498 2040 0498 2040     ..@ ..@ ..@ ..@ 
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 

20400888 <__malloc_sbrk_base>:
20400888:	ffff ffff                                   ....

2040088c <__malloc_trim_threshold>:
2040088c:	0000 0002                                   ....

20400890 <__atexit_recursive_mutex>:
20400890:	a890 2044                                   ..D 

20400894 <__global_locale>:
20400894:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400934:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400954:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400974:	7121 0040 69b5 0040 0000 0000 8190 0040     !q@..i@.......@.
20400984:	818c 0040 8140 0040 8140 0040 8140 0040     ..@.@.@.@.@.@.@.
20400994:	8140 0040 8140 0040 8140 0040 8140 0040     @.@.@.@.@.@.@.@.
204009a4:	8140 0040 8140 0040 ffff ffff ffff ffff     @.@.@.@.........
204009b4:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009dc:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
