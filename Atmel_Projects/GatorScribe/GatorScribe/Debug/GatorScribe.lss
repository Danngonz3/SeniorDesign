
GatorScribe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009d24  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409d24  00409d24  00019d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009f0  20400000  00409d2c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00002618  204009f0  0040a71c  000209f0  2**2
                  ALLOC
  4 .stack        00002000  20403008  0040cd34  000209f0  2**0
                  ALLOC
  5 .heap         00000200  20405008  0040ed34  000209f0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209f0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a1e  2**0
                  CONTENTS, READONLY
  8 .debug_info   00028b1b  00000000  00000000  00020a77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000059a3  00000000  00000000  00049592  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a1d5  00000000  00000000  0004ef35  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d20  00000000  00000000  0005910a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e90  00000000  00000000  00059e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00029490  00000000  00000000  0005acba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00018db2  00000000  00000000  0008414a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009d0f1  00000000  00000000  0009cefc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000031ec  00000000  00000000  00139ff0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	08 50 40 20 cd 26 40 00 c9 26 40 00 cb 26 40 00     .P@ .&@..&@..&@.
  400010:	c9 26 40 00 c9 26 40 00 c9 26 40 00 00 00 00 00     .&@..&@..&@.....
	...
  40002c:	c9 26 40 00 c9 26 40 00 00 00 00 00 c9 26 40 00     .&@..&@......&@.
  40003c:	89 06 40 00 c9 26 40 00 c9 26 40 00 c9 26 40 00     ..@..&@..&@..&@.
  40004c:	c9 26 40 00 c9 26 40 00 c9 26 40 00 c9 26 40 00     .&@..&@..&@..&@.
  40005c:	c9 26 40 00 c9 26 40 00 00 00 00 00 85 24 40 00     .&@..&@......$@.
  40006c:	99 24 40 00 ad 24 40 00 c9 26 40 00 c9 26 40 00     .$@..$@..&@..&@.
  40007c:	c9 26 40 00 c1 24 40 00 d5 24 40 00 c9 26 40 00     .&@..$@..$@..&@.
  40008c:	c9 26 40 00 c9 26 40 00 c9 26 40 00 c9 26 40 00     .&@..&@..&@..&@.
  40009c:	c9 26 40 00 c9 26 40 00 c9 26 40 00 c9 26 40 00     .&@..&@..&@..&@.
  4000ac:	c9 26 40 00 c9 26 40 00 c9 26 40 00 c9 26 40 00     .&@..&@..&@..&@.
  4000bc:	c9 26 40 00 c9 26 40 00 c9 26 40 00 c9 26 40 00     .&@..&@..&@..&@.
  4000cc:	c9 26 40 00 00 00 00 00 c9 26 40 00 00 00 00 00     .&@......&@.....
  4000dc:	c9 26 40 00 c9 26 40 00 c9 26 40 00 c9 26 40 00     .&@..&@..&@..&@.
  4000ec:	c9 26 40 00 c9 26 40 00 c9 26 40 00 c9 26 40 00     .&@..&@..&@..&@.
  4000fc:	c9 26 40 00 c9 26 40 00 c9 26 40 00 c9 26 40 00     .&@..&@..&@..&@.
  40010c:	c9 26 40 00 c9 26 40 00 c9 26 40 00 00 00 00 00     .&@..&@..&@.....
  40011c:	00 00 00 00 c9 26 40 00 c9 26 40 00 ad 01 40 00     .....&@..&@...@.
  40012c:	c9 26 40 00 c9 26 40 00 00 00 00 00 c9 26 40 00     .&@..&@......&@.
  40013c:	c9 26 40 00                                         .&@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009f0 	.word	0x204009f0
  40015c:	00000000 	.word	0x00000000
  400160:	00409d2c 	.word	0x00409d2c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00409d2c 	.word	0x00409d2c
  4001a0:	204009f4 	.word	0x204009f4
  4001a4:	00409d2c 	.word	0x00409d2c
  4001a8:	00000000 	.word	0x00000000

004001ac <XDMAC_Handler>:
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4001ac:	4b51      	ldr	r3, [pc, #324]	; (4002f4 <XDMAC_Handler+0x148>)
  4001ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
void XDMAC_Handler(void)
{
    uint32_t dma_status;
    
    dma_status = xdmac_channel_get_interrupt_status(XDMAC, XDMA_CH_SSC_RX);
    if (dma_status & XDMAC_CIS_BIS)
  4001b0:	f013 0f01 	tst.w	r3, #1
  4001b4:	f000 8087 	beq.w	4002c6 <XDMAC_Handler+0x11a>
{
  4001b8:	b470      	push	{r4, r5, r6}
    {
		if(inPingMode)
  4001ba:	4b4f      	ldr	r3, [pc, #316]	; (4002f8 <XDMAC_Handler+0x14c>)
  4001bc:	781b      	ldrb	r3, [r3, #0]
  4001be:	b16b      	cbz	r3, 4001dc <XDMAC_Handler+0x30>
		{
			inBuffer = inPingBuffer; 
  4001c0:	4a4e      	ldr	r2, [pc, #312]	; (4002fc <XDMAC_Handler+0x150>)
  4001c2:	4b4f      	ldr	r3, [pc, #316]	; (400300 <XDMAC_Handler+0x154>)
  4001c4:	601a      	str	r2, [r3, #0]
		}
		else 
		{
			inBuffer = inPongBuffer; 
		}
		inPingMode = !inPingMode; 
  4001c6:	4a4c      	ldr	r2, [pc, #304]	; (4002f8 <XDMAC_Handler+0x14c>)
  4001c8:	7813      	ldrb	r3, [r2, #0]
  4001ca:	f083 0301 	eor.w	r3, r3, #1
  4001ce:	7013      	strb	r3, [r2, #0]
		int processIdx = 0; 
		for(int i = 0; i < BUF_SIZE; i++)
  4001d0:	2300      	movs	r3, #0
		int processIdx = 0; 
  4001d2:	461c      	mov	r4, r3
		{
						
			outBuffer[i] = inBuffer[i];
  4001d4:	4d4b      	ldr	r5, [pc, #300]	; (400304 <XDMAC_Handler+0x158>)
  4001d6:	484a      	ldr	r0, [pc, #296]	; (400300 <XDMAC_Handler+0x154>)
			//outBuffer[i] = (uint16_t) ( ( (int32_t)((int16_t)inBuffer[i]) + (int32_t)(sin_wave[sinIdx++]/16) ) / 2 );
			//if(sinIdx == SIN_WAVE_LENGTH) sinIdx = 0;

			if (i % 4 == 0)
				fillBuffer[processIdx++] = (int16_t)inBuffer[i]; 
  4001d8:	4e4b      	ldr	r6, [pc, #300]	; (400308 <XDMAC_Handler+0x15c>)
  4001da:	e006      	b.n	4001ea <XDMAC_Handler+0x3e>
			inBuffer = inPongBuffer; 
  4001dc:	4a4b      	ldr	r2, [pc, #300]	; (40030c <XDMAC_Handler+0x160>)
  4001de:	4b48      	ldr	r3, [pc, #288]	; (400300 <XDMAC_Handler+0x154>)
  4001e0:	601a      	str	r2, [r3, #0]
  4001e2:	e7f0      	b.n	4001c6 <XDMAC_Handler+0x1a>
		for(int i = 0; i < BUF_SIZE; i++)
  4001e4:	3301      	adds	r3, #1
  4001e6:	2b40      	cmp	r3, #64	; 0x40
  4001e8:	d012      	beq.n	400210 <XDMAC_Handler+0x64>
			outBuffer[i] = inBuffer[i];
  4001ea:	6802      	ldr	r2, [r0, #0]
  4001ec:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  4001f0:	b292      	uxth	r2, r2
  4001f2:	6829      	ldr	r1, [r5, #0]
  4001f4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			if (i % 4 == 0)
  4001f8:	f013 0f03 	tst.w	r3, #3
  4001fc:	d1f2      	bne.n	4001e4 <XDMAC_Handler+0x38>
				fillBuffer[processIdx++] = (int16_t)inBuffer[i]; 
  4001fe:	6802      	ldr	r2, [r0, #0]
  400200:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  400204:	b212      	sxth	r2, r2
  400206:	6831      	ldr	r1, [r6, #0]
  400208:	f821 2014 	strh.w	r2, [r1, r4, lsl #1]
  40020c:	3401      	adds	r4, #1
  40020e:	e7e9      	b.n	4001e4 <XDMAC_Handler+0x38>
		}
		
		if (processPingMode)
  400210:	4b3f      	ldr	r3, [pc, #252]	; (400310 <XDMAC_Handler+0x164>)
  400212:	781b      	ldrb	r3, [r3, #0]
  400214:	2b00      	cmp	r3, #0
  400216:	d032      	beq.n	40027e <XDMAC_Handler+0xd2>
		{
			if (fillBuffer == &processPingBuffer[(TOTAL_PROCESS_BUFFERS-1)*PROCESS_BUF_SIZE])
  400218:	4b3b      	ldr	r3, [pc, #236]	; (400308 <XDMAC_Handler+0x15c>)
  40021a:	681b      	ldr	r3, [r3, #0]
  40021c:	4a3d      	ldr	r2, [pc, #244]	; (400314 <XDMAC_Handler+0x168>)
  40021e:	4293      	cmp	r3, r2
  400220:	d016      	beq.n	400250 <XDMAC_Handler+0xa4>
				else 
					dataReceived = 1; 
			}	
			else 
			{
				fillBuffer += PROCESS_BUF_SIZE; 
  400222:	3320      	adds	r3, #32
  400224:	4a38      	ldr	r2, [pc, #224]	; (400308 <XDMAC_Handler+0x15c>)
  400226:	6013      	str	r3, [r2, #0]
  400228:	4b32      	ldr	r3, [pc, #200]	; (4002f4 <XDMAC_Handler+0x148>)
  40022a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
		}
		
    }
	
	dma_status = xdmac_channel_get_interrupt_status(XDMAC, XDMA_CH_SSC_TX);
	if (dma_status & XDMAC_CIS_BIS)
  40022e:	f013 0f01 	tst.w	r3, #1
  400232:	d00b      	beq.n	40024c <XDMAC_Handler+0xa0>
	{
		if(outPingMode)
  400234:	4b38      	ldr	r3, [pc, #224]	; (400318 <XDMAC_Handler+0x16c>)
  400236:	781b      	ldrb	r3, [r3, #0]
  400238:	2b00      	cmp	r3, #0
  40023a:	d040      	beq.n	4002be <XDMAC_Handler+0x112>
		{
			outBuffer = outPingBuffer; 
  40023c:	4a37      	ldr	r2, [pc, #220]	; (40031c <XDMAC_Handler+0x170>)
  40023e:	4b31      	ldr	r3, [pc, #196]	; (400304 <XDMAC_Handler+0x158>)
  400240:	601a      	str	r2, [r3, #0]
		}
		else
		{
			outBuffer = outPongBuffer; 
		}
		outPingMode = !outPingMode; 
  400242:	4a35      	ldr	r2, [pc, #212]	; (400318 <XDMAC_Handler+0x16c>)
  400244:	7813      	ldrb	r3, [r2, #0]
  400246:	f083 0301 	eor.w	r3, r3, #1
  40024a:	7013      	strb	r3, [r2, #0]
	}
}
  40024c:	bc70      	pop	{r4, r5, r6}
  40024e:	4770      	bx	lr
				processBuffer = processPingBuffer; 
  400250:	f5a2 627e 	sub.w	r2, r2, #4064	; 0xfe0
  400254:	4b32      	ldr	r3, [pc, #200]	; (400320 <XDMAC_Handler+0x174>)
  400256:	601a      	str	r2, [r3, #0]
				fillBuffer = processPongBuffer; 
  400258:	4a32      	ldr	r2, [pc, #200]	; (400324 <XDMAC_Handler+0x178>)
  40025a:	4b2b      	ldr	r3, [pc, #172]	; (400308 <XDMAC_Handler+0x15c>)
  40025c:	601a      	str	r2, [r3, #0]
				processPingMode = !processPingMode; 
  40025e:	4a2c      	ldr	r2, [pc, #176]	; (400310 <XDMAC_Handler+0x164>)
  400260:	7813      	ldrb	r3, [r2, #0]
  400262:	f083 0301 	eor.w	r3, r3, #1
  400266:	7013      	strb	r3, [r2, #0]
				if (dataReceived)
  400268:	4b2f      	ldr	r3, [pc, #188]	; (400328 <XDMAC_Handler+0x17c>)
  40026a:	781b      	ldrb	r3, [r3, #0]
  40026c:	b11b      	cbz	r3, 400276 <XDMAC_Handler+0xca>
					outOfTime = 1; 
  40026e:	2201      	movs	r2, #1
  400270:	4b2e      	ldr	r3, [pc, #184]	; (40032c <XDMAC_Handler+0x180>)
  400272:	701a      	strb	r2, [r3, #0]
  400274:	e7d8      	b.n	400228 <XDMAC_Handler+0x7c>
					dataReceived = 1; 
  400276:	2201      	movs	r2, #1
  400278:	4b2b      	ldr	r3, [pc, #172]	; (400328 <XDMAC_Handler+0x17c>)
  40027a:	701a      	strb	r2, [r3, #0]
  40027c:	e7d4      	b.n	400228 <XDMAC_Handler+0x7c>
			if (fillBuffer == &processPongBuffer[(TOTAL_PROCESS_BUFFERS-1)*PROCESS_BUF_SIZE])
  40027e:	4b22      	ldr	r3, [pc, #136]	; (400308 <XDMAC_Handler+0x15c>)
  400280:	681b      	ldr	r3, [r3, #0]
  400282:	4a2b      	ldr	r2, [pc, #172]	; (400330 <XDMAC_Handler+0x184>)
  400284:	4293      	cmp	r3, r2
  400286:	d003      	beq.n	400290 <XDMAC_Handler+0xe4>
				fillBuffer += PROCESS_BUF_SIZE;
  400288:	3320      	adds	r3, #32
  40028a:	4a1f      	ldr	r2, [pc, #124]	; (400308 <XDMAC_Handler+0x15c>)
  40028c:	6013      	str	r3, [r2, #0]
  40028e:	e7cb      	b.n	400228 <XDMAC_Handler+0x7c>
				processBuffer = processPongBuffer;
  400290:	f5a2 627e 	sub.w	r2, r2, #4064	; 0xfe0
  400294:	4b22      	ldr	r3, [pc, #136]	; (400320 <XDMAC_Handler+0x174>)
  400296:	601a      	str	r2, [r3, #0]
				fillBuffer = processPingBuffer; 
  400298:	4a26      	ldr	r2, [pc, #152]	; (400334 <XDMAC_Handler+0x188>)
  40029a:	4b1b      	ldr	r3, [pc, #108]	; (400308 <XDMAC_Handler+0x15c>)
  40029c:	601a      	str	r2, [r3, #0]
				processPingMode = !processPingMode;
  40029e:	4a1c      	ldr	r2, [pc, #112]	; (400310 <XDMAC_Handler+0x164>)
  4002a0:	7813      	ldrb	r3, [r2, #0]
  4002a2:	f083 0301 	eor.w	r3, r3, #1
  4002a6:	7013      	strb	r3, [r2, #0]
				if (dataReceived)
  4002a8:	4b1f      	ldr	r3, [pc, #124]	; (400328 <XDMAC_Handler+0x17c>)
  4002aa:	781b      	ldrb	r3, [r3, #0]
  4002ac:	b11b      	cbz	r3, 4002b6 <XDMAC_Handler+0x10a>
					outOfTime = 1;
  4002ae:	2201      	movs	r2, #1
  4002b0:	4b1e      	ldr	r3, [pc, #120]	; (40032c <XDMAC_Handler+0x180>)
  4002b2:	701a      	strb	r2, [r3, #0]
  4002b4:	e7b8      	b.n	400228 <XDMAC_Handler+0x7c>
					dataReceived = 1;
  4002b6:	2201      	movs	r2, #1
  4002b8:	4b1b      	ldr	r3, [pc, #108]	; (400328 <XDMAC_Handler+0x17c>)
  4002ba:	701a      	strb	r2, [r3, #0]
  4002bc:	e7b4      	b.n	400228 <XDMAC_Handler+0x7c>
			outBuffer = outPongBuffer; 
  4002be:	4a1e      	ldr	r2, [pc, #120]	; (400338 <XDMAC_Handler+0x18c>)
  4002c0:	4b10      	ldr	r3, [pc, #64]	; (400304 <XDMAC_Handler+0x158>)
  4002c2:	601a      	str	r2, [r3, #0]
  4002c4:	e7bd      	b.n	400242 <XDMAC_Handler+0x96>
  4002c6:	4b0b      	ldr	r3, [pc, #44]	; (4002f4 <XDMAC_Handler+0x148>)
  4002c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
	if (dma_status & XDMAC_CIS_BIS)
  4002cc:	f013 0f01 	tst.w	r3, #1
  4002d0:	d0bd      	beq.n	40024e <XDMAC_Handler+0xa2>
		if(outPingMode)
  4002d2:	4b11      	ldr	r3, [pc, #68]	; (400318 <XDMAC_Handler+0x16c>)
  4002d4:	781b      	ldrb	r3, [r3, #0]
  4002d6:	b143      	cbz	r3, 4002ea <XDMAC_Handler+0x13e>
			outBuffer = outPingBuffer; 
  4002d8:	4a10      	ldr	r2, [pc, #64]	; (40031c <XDMAC_Handler+0x170>)
  4002da:	4b0a      	ldr	r3, [pc, #40]	; (400304 <XDMAC_Handler+0x158>)
  4002dc:	601a      	str	r2, [r3, #0]
		outPingMode = !outPingMode; 
  4002de:	4a0e      	ldr	r2, [pc, #56]	; (400318 <XDMAC_Handler+0x16c>)
  4002e0:	7813      	ldrb	r3, [r2, #0]
  4002e2:	f083 0301 	eor.w	r3, r3, #1
  4002e6:	7013      	strb	r3, [r2, #0]
  4002e8:	4770      	bx	lr
			outBuffer = outPongBuffer; 
  4002ea:	4a13      	ldr	r2, [pc, #76]	; (400338 <XDMAC_Handler+0x18c>)
  4002ec:	4b05      	ldr	r3, [pc, #20]	; (400304 <XDMAC_Handler+0x158>)
  4002ee:	601a      	str	r2, [r3, #0]
  4002f0:	e7f5      	b.n	4002de <XDMAC_Handler+0x132>
  4002f2:	bf00      	nop
  4002f4:	40078000 	.word	0x40078000
  4002f8:	20400014 	.word	0x20400014
  4002fc:	20402f48 	.word	0x20402f48
  400300:	20400010 	.word	0x20400010
  400304:	20400018 	.word	0x20400018
  400308:	2040000c 	.word	0x2040000c
  40030c:	20401dc8 	.word	0x20401dc8
  400310:	20400024 	.word	0x20400024
  400314:	20401da8 	.word	0x20401da8
  400318:	2040001c 	.word	0x2040001c
  40031c:	20401e48 	.word	0x20401e48
  400320:	20400020 	.word	0x20400020
  400324:	20401f48 	.word	0x20401f48
  400328:	20400a0c 	.word	0x20400a0c
  40032c:	20400a50 	.word	0x20400a50
  400330:	20402f28 	.word	0x20402f28
  400334:	20400dc8 	.word	0x20400dc8
  400338:	20401ec8 	.word	0x20401ec8

0040033c <configure_xdma>:
/******************************* XDMAC Interrupt Handler End *******************************/

/********************************** Public Functions Start **********************************/
void configure_xdma(void)
{
  40033c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400340:	b088      	sub	sp, #32
    uint16_t *src;
    
    xdmac_channel_config_t xdmac_channel_cfg = {0};
  400342:	2420      	movs	r4, #32
  400344:	4622      	mov	r2, r4
  400346:	2100      	movs	r1, #0
  400348:	4668      	mov	r0, sp
  40034a:	4b27      	ldr	r3, [pc, #156]	; (4003e8 <configure_xdma+0xac>)
  40034c:	4798      	blx	r3
    
    /* Initialize and enable DMA controller */
    pmc_enable_periph_clk(ID_XDMAC);
  40034e:	203a      	movs	r0, #58	; 0x3a
  400350:	4b26      	ldr	r3, [pc, #152]	; (4003ec <configure_xdma+0xb0>)
  400352:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400354:	4b26      	ldr	r3, [pc, #152]	; (4003f0 <configure_xdma+0xb4>)
  400356:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40035a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40035e:	f883 433a 	strb.w	r4, [r3, #826]	; 0x33a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400362:	605a      	str	r2, [r3, #4]
    NVIC_SetPriority(XDMAC_IRQn ,1);
    NVIC_EnableIRQ(XDMAC_IRQn);
    
    /********** Read Buffer ********/
    /* Initialize channel config */
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  400364:	4b23      	ldr	r3, [pc, #140]	; (4003f4 <configure_xdma+0xb8>)
  400366:	9303      	str	r3, [sp, #12]
    | XDMAC_CC_DIF_AHB_IF0
    | XDMAC_CC_SAM_FIXED_AM
    | XDMAC_CC_DAM_INCREMENTED_AM
    | XDMAC_CC_PERID(33);
	
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  400368:	4c23      	ldr	r4, [pc, #140]	; (4003f8 <configure_xdma+0xbc>)
  40036a:	466a      	mov	r2, sp
  40036c:	2100      	movs	r1, #0
  40036e:	4620      	mov	r0, r4
  400370:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 400424 <configure_xdma+0xe8>
  400374:	47c0      	blx	r8
    
    /* Initialize linked list descriptor */
    src = (uint16_t *)&inPingBuffer[0];
    linklist_read[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  400376:	4b21      	ldr	r3, [pc, #132]	; (4003fc <configure_xdma+0xc0>)
  400378:	4e21      	ldr	r6, [pc, #132]	; (400400 <configure_xdma+0xc4>)
  40037a:	605e      	str	r6, [r3, #4]
		| XDMAC_UBC_NDE_FETCH_EN
		| XDMAC_UBC_NSEN_UPDATED
		| XDMAC_CUBC_UBLEN(BUF_SIZE);
    linklist_read[0].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  40037c:	4a21      	ldr	r2, [pc, #132]	; (400404 <configure_xdma+0xc8>)
  40037e:	609a      	str	r2, [r3, #8]
    linklist_read[0].mbr_da = (uint32_t)(src);
  400380:	4921      	ldr	r1, [pc, #132]	; (400408 <configure_xdma+0xcc>)
  400382:	60d9      	str	r1, [r3, #12]
    linklist_read[0].mbr_nda = (uint32_t)&linklist_read[1];
  400384:	f103 0110 	add.w	r1, r3, #16
  400388:	6019      	str	r1, [r3, #0]
	src = (uint16_t *)&inPongBuffer[0];; 
	linklist_read[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  40038a:	615e      	str	r6, [r3, #20]
	    | XDMAC_UBC_NDE_FETCH_EN
	    | XDMAC_UBC_NSEN_UPDATED
	    | XDMAC_CUBC_UBLEN(BUF_SIZE);
	linklist_read[1].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  40038c:	619a      	str	r2, [r3, #24]
	linklist_read[1].mbr_da = (uint32_t)(src);
  40038e:	4a1f      	ldr	r2, [pc, #124]	; (40040c <configure_xdma+0xd0>)
  400390:	61da      	str	r2, [r3, #28]
	linklist_read[1].mbr_nda = (uint32_t)&linklist_read[0];
  400392:	611b      	str	r3, [r3, #16]
 */
static inline void xdmac_channel_set_descriptor_control(Xdmac *xdmac, uint32_t channel_num, uint32_t config)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  400394:	270f      	movs	r7, #15
  400396:	66e7      	str	r7, [r4, #108]	; 0x6c
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  400398:	f023 0303 	bic.w	r3, r3, #3
  40039c:	66a3      	str	r3, [r4, #104]	; 0x68
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  40039e:	2501      	movs	r5, #1
  4003a0:	60e5      	str	r5, [r4, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CIE = mask;
  4003a2:	6525      	str	r5, [r4, #80]	; 0x50
    xdmac_enable_interrupt(XDMAC, XDMA_CH_SSC_RX);
    xdmac_channel_enable_interrupt(XDMAC, XDMA_CH_SSC_RX, XDMAC_CIE_BIE);
    
    
    /******* Write buffer *******/
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4003a4:	4b1a      	ldr	r3, [pc, #104]	; (400410 <configure_xdma+0xd4>)
  4003a6:	9303      	str	r3, [sp, #12]
    | XDMAC_CC_DIF_AHB_IF1
    | XDMAC_CC_SAM_INCREMENTED_AM
    | XDMAC_CC_DAM_FIXED_AM
    | XDMAC_CC_PERID(32);
	
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  4003a8:	466a      	mov	r2, sp
  4003aa:	4629      	mov	r1, r5
  4003ac:	4620      	mov	r0, r4
  4003ae:	47c0      	blx	r8
    
    src = (uint16_t *)&outPingBuffer[0];
    linklist_write[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4003b0:	4b18      	ldr	r3, [pc, #96]	; (400414 <configure_xdma+0xd8>)
  4003b2:	605e      	str	r6, [r3, #4]
		 | XDMAC_UBC_NDE_FETCH_EN
		 | XDMAC_UBC_NSEN_UPDATED
			| XDMAC_CUBC_UBLEN(BUF_SIZE);
    linklist_write[0].mbr_sa = (uint32_t)(src);
  4003b4:	4a18      	ldr	r2, [pc, #96]	; (400418 <configure_xdma+0xdc>)
  4003b6:	609a      	str	r2, [r3, #8]
    linklist_write[0].mbr_da = (uint32_t)&(SSC->SSC_THR);
  4003b8:	4a18      	ldr	r2, [pc, #96]	; (40041c <configure_xdma+0xe0>)
  4003ba:	60da      	str	r2, [r3, #12]
    linklist_write[0].mbr_nda = (uint32_t)&linklist_write[1];
  4003bc:	f103 0110 	add.w	r1, r3, #16
  4003c0:	6019      	str	r1, [r3, #0]
	
	src = (uint16_t *)&outPongBuffer[0];
	linklist_write[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4003c2:	615e      	str	r6, [r3, #20]
	    | XDMAC_UBC_NDE_FETCH_EN
	    | XDMAC_UBC_NSEN_UPDATED
	    | XDMAC_CUBC_UBLEN(BUF_SIZE);
	linklist_write[1].mbr_sa = (uint32_t)(src);
  4003c4:	4916      	ldr	r1, [pc, #88]	; (400420 <configure_xdma+0xe4>)
  4003c6:	6199      	str	r1, [r3, #24]
	linklist_write[1].mbr_da = (uint32_t)&(SSC->SSC_THR);
  4003c8:	61da      	str	r2, [r3, #28]
	linklist_write[1].mbr_nda = (uint32_t)&linklist_write[0];
  4003ca:	611b      	str	r3, [r3, #16]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  4003cc:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  4003d0:	f023 0303 	bic.w	r3, r3, #3
  4003d4:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  4003d8:	2302      	movs	r3, #2
  4003da:	60e3      	str	r3, [r4, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CIE = mask;
  4003dc:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
    xdmac_channel_set_descriptor_addr(XDMAC, XDMA_CH_SSC_TX, (uint32_t)(&linklist_write[0]), 0);
    
    xdmac_enable_interrupt(XDMAC, XDMA_CH_SSC_TX);
    xdmac_channel_enable_interrupt(XDMAC, XDMA_CH_SSC_TX, XDMAC_CIE_BIE);
    
}
  4003e0:	b008      	add	sp, #32
  4003e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4003e6:	bf00      	nop
  4003e8:	004039f9 	.word	0x004039f9
  4003ec:	00402609 	.word	0x00402609
  4003f0:	e000e100 	.word	0xe000e100
  4003f4:	21042801 	.word	0x21042801
  4003f8:	40078000 	.word	0x40078000
  4003fc:	20400a10 	.word	0x20400a10
  400400:	0b000040 	.word	0x0b000040
  400404:	40004020 	.word	0x40004020
  400408:	20402f48 	.word	0x20402f48
  40040c:	20401dc8 	.word	0x20401dc8
  400410:	20014811 	.word	0x20014811
  400414:	20400a30 	.word	0x20400a30
  400418:	20401e48 	.word	0x20401e48
  40041c:	40004024 	.word	0x40004024
  400420:	20401ec8 	.word	0x20401ec8
  400424:	00401da1 	.word	0x00401da1

00400428 <audio_init>:

#include "DMA_Audio.h"
#include "WM8904_Driver.h"

void audio_init(void)
{
  400428:	b510      	push	{r4, lr}
	/* Initialize WM8904 TWI interface*/
	if (wm8904_twi_init() != TWIHS_SUCCESS) {
  40042a:	4b13      	ldr	r3, [pc, #76]	; (400478 <audio_init+0x50>)
  40042c:	4798      	blx	r3
  40042e:	b118      	cbz	r0, 400438 <audio_init+0x10>
		printf("-E-\tWM8904 initialization failed.\r");
  400430:	4812      	ldr	r0, [pc, #72]	; (40047c <audio_init+0x54>)
  400432:	4b13      	ldr	r3, [pc, #76]	; (400480 <audio_init+0x58>)
  400434:	4798      	blx	r3
  400436:	e7fe      	b.n	400436 <audio_init+0xe>
			/* Capture error */
		}
	}
		
	/* Configure CODEC */
	configure_codec();
  400438:	4b12      	ldr	r3, [pc, #72]	; (400484 <audio_init+0x5c>)
  40043a:	4798      	blx	r3
		
	/* Configure SSC */
	configure_ssc();
  40043c:	4b12      	ldr	r3, [pc, #72]	; (400488 <audio_init+0x60>)
  40043e:	4798      	blx	r3
		
	/* Configure XDMA */
	configure_xdma();
  400440:	4b12      	ldr	r3, [pc, #72]	; (40048c <audio_init+0x64>)
  400442:	4798      	blx	r3
		
	/* Enable the DAC master clock */
	pmc_pck_set_prescaler(PMC_PCK_2, PMC_MCKR_PRES_CLK_1);
  400444:	2100      	movs	r1, #0
  400446:	2002      	movs	r0, #2
  400448:	4b11      	ldr	r3, [pc, #68]	; (400490 <audio_init+0x68>)
  40044a:	4798      	blx	r3
	pmc_pck_set_source(PMC_PCK_2, PMC_MCKR_CSS_SLOW_CLK);
  40044c:	2100      	movs	r1, #0
  40044e:	2002      	movs	r0, #2
  400450:	4b10      	ldr	r3, [pc, #64]	; (400494 <audio_init+0x6c>)
  400452:	4798      	blx	r3
	pmc_enable_pck(PMC_PCK_2);
  400454:	2002      	movs	r0, #2
  400456:	4b10      	ldr	r3, [pc, #64]	; (400498 <audio_init+0x70>)
  400458:	4798      	blx	r3
		
	/* Start playing */
	ssc_enable_rx(SSC);
  40045a:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40045e:	4b0f      	ldr	r3, [pc, #60]	; (40049c <audio_init+0x74>)
  400460:	4798      	blx	r3
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  400462:	4c0f      	ldr	r4, [pc, #60]	; (4004a0 <audio_init+0x78>)
  400464:	2301      	movs	r3, #1
  400466:	61e3      	str	r3, [r4, #28]
	xdmac_channel_enable(XDMAC, XDMA_CH_SSC_RX);
	// might want to enable in the first xdma interrupt (if you care)
	ssc_enable_tx(SSC);
  400468:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40046c:	4b0d      	ldr	r3, [pc, #52]	; (4004a4 <audio_init+0x7c>)
  40046e:	4798      	blx	r3
  400470:	2302      	movs	r3, #2
  400472:	61e3      	str	r3, [r4, #28]
  400474:	bd10      	pop	{r4, pc}
  400476:	bf00      	nop
  400478:	00401545 	.word	0x00401545
  40047c:	00408df4 	.word	0x00408df4
  400480:	00403461 	.word	0x00403461
  400484:	00400561 	.word	0x00400561
  400488:	004004a9 	.word	0x004004a9
  40048c:	0040033d 	.word	0x0040033d
  400490:	0040265d 	.word	0x0040265d
  400494:	00402689 	.word	0x00402689
  400498:	004026b5 	.word	0x004026b5
  40049c:	00401a67 	.word	0x00401a67
  4004a0:	40078000 	.word	0x40078000
  4004a4:	00401a73 	.word	0x00401a73

004004a8 <configure_ssc>:
#include "WM8904_Driver.h"


/********************************** Public Functions Start **********************************/
void configure_ssc(void)
{
  4004a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4004ac:	b09c      	sub	sp, #112	; 0x70
	clock_opt_t tx_clk_option, rx_clk_option;
	data_frame_opt_t tx_data_frame_option, rx_data_frame_option;

	/* Initialize clock */
	pmc_enable_periph_clk(ID_SSC);
  4004ae:	2016      	movs	r0, #22
  4004b0:	4b24      	ldr	r3, [pc, #144]	; (400544 <configure_ssc+0x9c>)
  4004b2:	4798      	blx	r3

	/* Reset SSC */
	ssc_reset(SSC);
  4004b4:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4004b8:	4b23      	ldr	r3, [pc, #140]	; (400548 <configure_ssc+0xa0>)
  4004ba:	4798      	blx	r3

	/* Transmitter clock mode configuration. */
	tx_clk_option.ul_cks = SSC_TCMR_CKS_TK;
  4004bc:	2302      	movs	r3, #2
  4004be:	9315      	str	r3, [sp, #84]	; 0x54
	tx_clk_option.ul_cko = SSC_TCMR_CKO_NONE;
  4004c0:	2400      	movs	r4, #0
  4004c2:	9416      	str	r4, [sp, #88]	; 0x58
	tx_clk_option.ul_cki = 0;
  4004c4:	9417      	str	r4, [sp, #92]	; 0x5c
	tx_clk_option.ul_ckg = SSC_TCMR_CKG_CONTINUOUS;
  4004c6:	9418      	str	r4, [sp, #96]	; 0x60
	tx_clk_option.ul_start_sel = SSC_TCMR_START_TF_EDGE;
  4004c8:	f44f 68e0 	mov.w	r8, #1792	; 0x700
  4004cc:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
	tx_clk_option.ul_sttdly = 1;
  4004d0:	2601      	movs	r6, #1
  4004d2:	961a      	str	r6, [sp, #104]	; 0x68
	tx_clk_option.ul_period = BITS_BY_SLOT - 1;
  4004d4:	250f      	movs	r5, #15
  4004d6:	9519      	str	r5, [sp, #100]	; 0x64
	/* Transmitter frame mode configuration. */
	tx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
  4004d8:	9507      	str	r5, [sp, #28]
	tx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  4004da:	2780      	movs	r7, #128	; 0x80
  4004dc:	9708      	str	r7, [sp, #32]
	tx_data_frame_option.ul_datnb = 0;
  4004de:	9409      	str	r4, [sp, #36]	; 0x24
	tx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;
  4004e0:	950a      	str	r5, [sp, #40]	; 0x28
	tx_data_frame_option.ul_fslen_ext = 0;
  4004e2:	940b      	str	r4, [sp, #44]	; 0x2c
	tx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  4004e4:	940c      	str	r4, [sp, #48]	; 0x30
	tx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  4004e6:	940d      	str	r4, [sp, #52]	; 0x34
	/* Configure the SSC transmitter to I2S mode. */
	ssc_set_transmitter(SSC, &tx_clk_option, &tx_data_frame_option);
  4004e8:	aa07      	add	r2, sp, #28
  4004ea:	a915      	add	r1, sp, #84	; 0x54
  4004ec:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4004f0:	4b16      	ldr	r3, [pc, #88]	; (40054c <configure_ssc+0xa4>)
  4004f2:	4798      	blx	r3

	/* Receiver clock mode configuration. */
	rx_clk_option.ul_cks = SSC_RCMR_CKS_TK;
  4004f4:	960e      	str	r6, [sp, #56]	; 0x38
	rx_clk_option.ul_cko = SSC_RCMR_CKO_NONE;
  4004f6:	940f      	str	r4, [sp, #60]	; 0x3c
	rx_clk_option.ul_cki = SSC_RCMR_CKI;
  4004f8:	2320      	movs	r3, #32
  4004fa:	9310      	str	r3, [sp, #64]	; 0x40
	rx_clk_option.ul_ckg = SSC_RCMR_CKG_CONTINUOUS;
  4004fc:	9411      	str	r4, [sp, #68]	; 0x44
	rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_EDGE;
  4004fe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
	rx_clk_option.ul_sttdly = 1;	
  400502:	9613      	str	r6, [sp, #76]	; 0x4c
	rx_clk_option.ul_period = BITS_BY_SLOT;	
  400504:	2310      	movs	r3, #16
  400506:	9312      	str	r3, [sp, #72]	; 0x48
	/* Receiver frame mode configuration. */
	rx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
  400508:	9500      	str	r5, [sp, #0]
	rx_data_frame_option.ul_msbf = SSC_RFMR_MSBF;
  40050a:	9701      	str	r7, [sp, #4]
	rx_data_frame_option.ul_datnb = 0;
  40050c:	9402      	str	r4, [sp, #8]
	rx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;	
  40050e:	9503      	str	r5, [sp, #12]
	rx_data_frame_option.ul_fslen_ext = 0;
  400510:	9404      	str	r4, [sp, #16]
	rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  400512:	9405      	str	r4, [sp, #20]
	rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  400514:	9406      	str	r4, [sp, #24]
	/* Configure the SSC transmitter to I2S mode. */
	ssc_set_receiver(SSC, &rx_clk_option, &rx_data_frame_option);
  400516:	466a      	mov	r2, sp
  400518:	a90e      	add	r1, sp, #56	; 0x38
  40051a:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40051e:	4b0c      	ldr	r3, [pc, #48]	; (400550 <configure_ssc+0xa8>)
  400520:	4798      	blx	r3

	/* Disable transmitter first */
	ssc_disable_tx(SSC);
  400522:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400526:	4b0b      	ldr	r3, [pc, #44]	; (400554 <configure_ssc+0xac>)
  400528:	4798      	blx	r3
	ssc_disable_rx(SSC);
  40052a:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40052e:	4b0a      	ldr	r3, [pc, #40]	; (400558 <configure_ssc+0xb0>)
  400530:	4798      	blx	r3

	/* Disable All Interrupt */
	ssc_disable_interrupt(SSC, 0xFFFFFFFF);
  400532:	f04f 31ff 	mov.w	r1, #4294967295
  400536:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40053a:	4b08      	ldr	r3, [pc, #32]	; (40055c <configure_ssc+0xb4>)
  40053c:	4798      	blx	r3
}
  40053e:	b01c      	add	sp, #112	; 0x70
  400540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400544:	00402609 	.word	0x00402609
  400548:	00401a53 	.word	0x00401a53
  40054c:	00401af7 	.word	0x00401af7
  400550:	00401a83 	.word	0x00401a83
  400554:	00401a7b 	.word	0x00401a7b
  400558:	00401a6d 	.word	0x00401a6d
  40055c:	00401b6b 	.word	0x00401b6b

00400560 <configure_codec>:


void configure_codec(void)
{
  400560:	b570      	push	{r4, r5, r6, lr}
	uint16_t data = 0;
	/* check that WM8904 is present */
	wm8904_write_register(WM8904_SW_RESET_AND_ID, 0xFFFF);
  400562:	f64f 71ff 	movw	r1, #65535	; 0xffff
  400566:	2000      	movs	r0, #0
  400568:	4b40      	ldr	r3, [pc, #256]	; (40066c <configure_codec+0x10c>)
  40056a:	4798      	blx	r3
	data = wm8904_read_register(WM8904_SW_RESET_AND_ID);
  40056c:	2000      	movs	r0, #0
  40056e:	4b40      	ldr	r3, [pc, #256]	; (400670 <configure_codec+0x110>)
  400570:	4798      	blx	r3
	if(data != 0x8904) {
  400572:	f648 1304 	movw	r3, #35076	; 0x8904
  400576:	4298      	cmp	r0, r3
  400578:	d003      	beq.n	400582 <configure_codec+0x22>
		printf("WM8904 not found!\n\r");
  40057a:	483e      	ldr	r0, [pc, #248]	; (400674 <configure_codec+0x114>)
  40057c:	4b3e      	ldr	r3, [pc, #248]	; (400678 <configure_codec+0x118>)
  40057e:	4798      	blx	r3
  400580:	e7fe      	b.n	400580 <configure_codec+0x20>
		while(1);
	}

	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS);	
  400582:	2108      	movs	r1, #8
  400584:	2004      	movs	r0, #4
  400586:	4c39      	ldr	r4, [pc, #228]	; (40066c <configure_codec+0x10c>)
  400588:	47a0      	blx	r4
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |	
  40058a:	2147      	movs	r1, #71	; 0x47
  40058c:	2005      	movs	r0, #5
  40058e:	47a0      	blx	r4
	WM8904_VMID_RES_FAST | WM8904_VMID_ENA);
	delay_ms(5);
  400590:	4e3a      	ldr	r6, [pc, #232]	; (40067c <configure_codec+0x11c>)
  400592:	4630      	mov	r0, r6
  400594:	4d3a      	ldr	r5, [pc, #232]	; (400680 <configure_codec+0x120>)
  400596:	47a8      	blx	r5
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |
  400598:	2143      	movs	r1, #67	; 0x43
  40059a:	2005      	movs	r0, #5
  40059c:	47a0      	blx	r4
	WM8904_VMID_RES_NORMAL | WM8904_VMID_ENA);
	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS | WM8904_BIAS_ENA);
  40059e:	2109      	movs	r1, #9
  4005a0:	2004      	movs	r0, #4
  4005a2:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_0, WM8904_INL_ENA | WM8904_INR_ENA);
  4005a4:	2103      	movs	r1, #3
  4005a6:	200c      	movs	r0, #12
  4005a8:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_2, WM8904_HPL_PGA_ENA | WM8904_HPR_PGA_ENA);
  4005aa:	2103      	movs	r1, #3
  4005ac:	200e      	movs	r0, #14
  4005ae:	47a0      	blx	r4
	wm8904_write_register(WM8904_DAC_DIGITAL_1, WM8904_DEEMPH(0));
  4005b0:	2100      	movs	r1, #0
  4005b2:	2021      	movs	r0, #33	; 0x21
  4005b4:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_OUT12_ZC, 0x0000);
  4005b6:	2100      	movs	r1, #0
  4005b8:	203d      	movs	r0, #61	; 0x3d
  4005ba:	47a0      	blx	r4
	wm8904_write_register(WM8904_CHARGE_PUMP_0, WM8904_CP_ENA);
  4005bc:	2101      	movs	r1, #1
  4005be:	2062      	movs	r0, #98	; 0x62
  4005c0:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLASS_W_0, WM8904_CP_DYN_PWR);
  4005c2:	2101      	movs	r1, #1
  4005c4:	2068      	movs	r0, #104	; 0x68
  4005c6:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_1, 0x0000);
  4005c8:	2100      	movs	r1, #0
  4005ca:	2074      	movs	r0, #116	; 0x74
  4005cc:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_2, WM8904_FLL_OUTDIV(7)| WM8904_FLL_FRATIO(4));
  4005ce:	f240 7104 	movw	r1, #1796	; 0x704
  4005d2:	2075      	movs	r0, #117	; 0x75
  4005d4:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_3, WM8904_FLL_K(0x8000));
  4005d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  4005da:	2076      	movs	r0, #118	; 0x76
  4005dc:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_4, WM8904_FLL_N(0xBB));
  4005de:	f44f 51bb 	mov.w	r1, #5984	; 0x1760
  4005e2:	2077      	movs	r0, #119	; 0x77
  4005e4:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_1, WM8904_FLL_FRACN_ENA | WM8904_FLL_ENA);
  4005e6:	2105      	movs	r1, #5
  4005e8:	2074      	movs	r0, #116	; 0x74
  4005ea:	47a0      	blx	r4
	delay_ms(5);
  4005ec:	4630      	mov	r0, r6
  4005ee:	47a8      	blx	r5
	wm8904_write_register(WM8904_CLOCK_RATES_1, WM8904_CLK_SYS_RATE(3) | WM8904_SAMPLE_RATE(SAMPLE_RATE));
  4005f0:	f640 4105 	movw	r1, #3077	; 0xc05
  4005f4:	2015      	movs	r0, #21
  4005f6:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLOCK_RATES_0, 0x0000);
  4005f8:	2100      	movs	r1, #0
  4005fa:	2014      	movs	r0, #20
  4005fc:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLOCK_RATES_2,
  4005fe:	f244 0106 	movw	r1, #16390	; 0x4006
  400602:	2016      	movs	r0, #22
  400604:	47a0      	blx	r4
	WM8904_SYSCLK_SRC | WM8904_CLK_SYS_ENA | WM8904_CLK_DSP_ENA);
	wm8904_write_register(WM8904_AUDIO_INTERFACE_1, WM8904_BCLK_DIR | WM8904_AIF_FMT_I2S); 
  400606:	2142      	movs	r1, #66	; 0x42
  400608:	2019      	movs	r0, #25
  40060a:	47a0      	blx	r4
	wm8904_write_register(WM8904_AUDIO_INTERFACE_2, WM8904_BCLK_DIV(8));
  40060c:	2108      	movs	r1, #8
  40060e:	201a      	movs	r0, #26
  400610:	47a0      	blx	r4
	wm8904_write_register(WM8904_AUDIO_INTERFACE_3, WM8904_LRCLK_DIR | WM8904_LRCLK_RATE(0x20));
  400612:	f44f 6102 	mov.w	r1, #2080	; 0x820
  400616:	201b      	movs	r0, #27
  400618:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_6,
  40061a:	210f      	movs	r1, #15
  40061c:	2012      	movs	r0, #18
  40061e:	47a0      	blx	r4
	WM8904_DACL_ENA | WM8904_DACR_ENA |
	WM8904_ADCL_ENA | WM8904_ADCR_ENA);
	delay_ms(5);
  400620:	4630      	mov	r0, r6
  400622:	47a8      	blx	r5
	wm8904_write_register(WM8904_ANALOGUE_LEFT_INPUT_0, WM8904_LIN_VOL(0x10));
  400624:	2110      	movs	r1, #16
  400626:	202c      	movs	r0, #44	; 0x2c
  400628:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_RIGHT_INPUT_0, WM8904_RIN_VOL(0x10));
  40062a:	2110      	movs	r1, #16
  40062c:	202d      	movs	r0, #45	; 0x2d
  40062e:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  400630:	2111      	movs	r1, #17
  400632:	205a      	movs	r0, #90	; 0x5a
  400634:	47a0      	blx	r4
	WM8904_HPL_ENA | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  400636:	2133      	movs	r1, #51	; 0x33
  400638:	205a      	movs	r0, #90	; 0x5a
  40063a:	47a0      	blx	r4
	WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_DC_SERVO_0,
  40063c:	210f      	movs	r1, #15
  40063e:	2043      	movs	r0, #67	; 0x43
  400640:	47a0      	blx	r4
	WM8904_DCS_ENA_CHAN_3 | WM8904_DCS_ENA_CHAN_2 |
	WM8904_DCS_ENA_CHAN_1 | WM8904_DCS_ENA_CHAN_0);
	wm8904_write_register(WM8904_DC_SERVO_1,
  400642:	21f0      	movs	r1, #240	; 0xf0
  400644:	2044      	movs	r0, #68	; 0x44
  400646:	47a0      	blx	r4
	WM8904_DCS_TRIG_STARTUP_3 | WM8904_DCS_TRIG_STARTUP_2 |
	WM8904_DCS_TRIG_STARTUP_1 | WM8904_DCS_TRIG_STARTUP_0);
	delay_ms(100);
  400648:	4e0e      	ldr	r6, [pc, #56]	; (400684 <configure_codec+0x124>)
  40064a:	4630      	mov	r0, r6
  40064c:	47a8      	blx	r5
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  40064e:	2177      	movs	r1, #119	; 0x77
  400650:	205a      	movs	r0, #90	; 0x5a
  400652:	47a0      	blx	r4
	WM8904_HPL_ENA_OUTP | WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_ENA_OUTP | WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  400654:	21ff      	movs	r1, #255	; 0xff
  400656:	205a      	movs	r0, #90	; 0x5a
  400658:	47a0      	blx	r4
	WM8904_HPL_RMV_SHORT | WM8904_HPL_ENA_OUTP | WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_RMV_SHORT | WM8904_HPR_ENA_OUTP | WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_OUT1_LEFT, WM8904_HPOUT_VU | WM8904_HPOUTL_VOL(0x39));
  40065a:	21b9      	movs	r1, #185	; 0xb9
  40065c:	2039      	movs	r0, #57	; 0x39
  40065e:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_OUT1_RIGHT, WM8904_HPOUT_VU | WM8904_HPOUTR_VOL(0x39));
  400660:	21b9      	movs	r1, #185	; 0xb9
  400662:	203a      	movs	r0, #58	; 0x3a
  400664:	47a0      	blx	r4
	delay_ms(100);
  400666:	4630      	mov	r0, r6
  400668:	47a8      	blx	r5
  40066a:	bd70      	pop	{r4, r5, r6, pc}
  40066c:	004014cd 	.word	0x004014cd
  400670:	00401509 	.word	0x00401509
  400674:	00408e18 	.word	0x00408e18
  400678:	00403461 	.word	0x00403461
  40067c:	0003dbc2 	.word	0x0003dbc2
  400680:	20400001 	.word	0x20400001
  400684:	004d2b25 	.word	0x004d2b25

00400688 <SysTick_Handler>:
}

/* Systick Interrupt Handler */ 
void SysTick_Handler(void)
{
	msCount++;
  400688:	4a06      	ldr	r2, [pc, #24]	; (4006a4 <SysTick_Handler+0x1c>)
  40068a:	6813      	ldr	r3, [r2, #0]
  40068c:	3301      	adds	r3, #1
  40068e:	6013      	str	r3, [r2, #0]
	led_indicator_freq--;
  400690:	4a05      	ldr	r2, [pc, #20]	; (4006a8 <SysTick_Handler+0x20>)
  400692:	6813      	ldr	r3, [r2, #0]
  400694:	3b01      	subs	r3, #1
  400696:	6013      	str	r3, [r2, #0]
	led_indicator_duration++;
  400698:	4a04      	ldr	r2, [pc, #16]	; (4006ac <SysTick_Handler+0x24>)
  40069a:	6813      	ldr	r3, [r2, #0]
  40069c:	3301      	adds	r3, #1
  40069e:	6013      	str	r3, [r2, #0]
  4006a0:	4770      	bx	lr
  4006a2:	bf00      	nop
  4006a4:	20400a5c 	.word	0x20400a5c
  4006a8:	20400a58 	.word	0x20400a58
  4006ac:	20400a54 	.word	0x20400a54

004006b0 <gfx_set_clipping>:
static gfx_ext_draw_handler_t gfx_ext_draw_func;

/* This function is documented in gfx.h */
void gfx_set_clipping(gfx_coord_t min_x, gfx_coord_t min_y,
		gfx_coord_t max_x, gfx_coord_t max_y)
{
  4006b0:	b410      	push	{r4}
  4006b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  4006b6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31

	if (min_y < 0) {
		min_y = 0;
	}

	if (max_x >= gfx_width) {
  4006ba:	4c0c      	ldr	r4, [pc, #48]	; (4006ec <gfx_set_clipping+0x3c>)
  4006bc:	f9b4 4000 	ldrsh.w	r4, [r4]
  4006c0:	4294      	cmp	r4, r2
  4006c2:	dc01      	bgt.n	4006c8 <gfx_set_clipping+0x18>
		max_x = gfx_width - 1;
  4006c4:	1e62      	subs	r2, r4, #1
  4006c6:	b212      	sxth	r2, r2
	}

	if (max_y >= gfx_height) {
  4006c8:	4c09      	ldr	r4, [pc, #36]	; (4006f0 <gfx_set_clipping+0x40>)
  4006ca:	f9b4 4000 	ldrsh.w	r4, [r4]
  4006ce:	429c      	cmp	r4, r3
  4006d0:	dc01      	bgt.n	4006d6 <gfx_set_clipping+0x26>
		max_y = gfx_height - 1;
  4006d2:	3c01      	subs	r4, #1
  4006d4:	b223      	sxth	r3, r4
	}

	gfx_min_x = min_x;
  4006d6:	4c07      	ldr	r4, [pc, #28]	; (4006f4 <gfx_set_clipping+0x44>)
  4006d8:	8020      	strh	r0, [r4, #0]
	gfx_min_y = min_y;
  4006da:	4807      	ldr	r0, [pc, #28]	; (4006f8 <gfx_set_clipping+0x48>)
  4006dc:	8001      	strh	r1, [r0, #0]
	gfx_max_x = max_x;
  4006de:	4907      	ldr	r1, [pc, #28]	; (4006fc <gfx_set_clipping+0x4c>)
  4006e0:	800a      	strh	r2, [r1, #0]
	gfx_max_y = max_y;
  4006e2:	4a07      	ldr	r2, [pc, #28]	; (400700 <gfx_set_clipping+0x50>)
  4006e4:	8013      	strh	r3, [r2, #0]
#endif
}
  4006e6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006ea:	4770      	bx	lr
  4006ec:	20402fc8 	.word	0x20402fc8
  4006f0:	20402fd2 	.word	0x20402fd2
  4006f4:	20402fcc 	.word	0x20402fcc
  4006f8:	20402fd0 	.word	0x20402fd0
  4006fc:	20402fca 	.word	0x20402fca
  400700:	20402fce 	.word	0x20402fce

00400704 <gfx_generic_draw_filled_rect>:
		gfx_color_t color)
{
	gfx_coord_t x2;
	gfx_coord_t y2;

	if ((width == 0) || (height == 0)) {
  400704:	2a00      	cmp	r2, #0
  400706:	d05c      	beq.n	4007c2 <gfx_generic_draw_filled_rect+0xbe>
{
  400708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40070a:	461c      	mov	r4, r3
  40070c:	4615      	mov	r5, r2
	if ((width == 0) || (height == 0)) {
  40070e:	2b00      	cmp	r3, #0
  400710:	d048      	beq.n	4007a4 <gfx_generic_draw_filled_rect+0xa0>
		return;
	}

	/* Invert if width or height is negative. */
	if (width < 0) {
  400712:	2a00      	cmp	r2, #0
  400714:	db47      	blt.n	4007a6 <gfx_generic_draw_filled_rect+0xa2>
		width = -width;
		x -= width - 1;
	}

	if (height < 0) {
  400716:	2c00      	cmp	r4, #0
  400718:	db4c      	blt.n	4007b4 <gfx_generic_draw_filled_rect+0xb0>
		y -= height - 1;
	}

#ifdef CONF_GFX_USE_CLIPPING
	/* Nothing to do if entire rectangle is outside clipping region. */
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
  40071a:	4b2a      	ldr	r3, [pc, #168]	; (4007c4 <gfx_generic_draw_filled_rect+0xc0>)
  40071c:	f9b3 6000 	ldrsh.w	r6, [r3]
  400720:	42b0      	cmp	r0, r6
  400722:	dc3f      	bgt.n	4007a4 <gfx_generic_draw_filled_rect+0xa0>
  400724:	4b28      	ldr	r3, [pc, #160]	; (4007c8 <gfx_generic_draw_filled_rect+0xc4>)
  400726:	f9b3 7000 	ldrsh.w	r7, [r3]
  40072a:	42b9      	cmp	r1, r7
  40072c:	dc3a      	bgt.n	4007a4 <gfx_generic_draw_filled_rect+0xa0>
			((x + width) <= gfx_min_x) ||
  40072e:	4b27      	ldr	r3, [pc, #156]	; (4007cc <gfx_generic_draw_filled_rect+0xc8>)
  400730:	f9b3 3000 	ldrsh.w	r3, [r3]
  400734:	1942      	adds	r2, r0, r5
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
  400736:	429a      	cmp	r2, r3
  400738:	dd34      	ble.n	4007a4 <gfx_generic_draw_filled_rect+0xa0>
			((y + height) <= gfx_min_y)) {
  40073a:	4a25      	ldr	r2, [pc, #148]	; (4007d0 <gfx_generic_draw_filled_rect+0xcc>)
  40073c:	f9b2 2000 	ldrsh.w	r2, [r2]
  400740:	eb01 0e04 	add.w	lr, r1, r4
			((x + width) <= gfx_min_x) ||
  400744:	4596      	cmp	lr, r2
  400746:	dd2d      	ble.n	4007a4 <gfx_generic_draw_filled_rect+0xa0>
		return;
	}

	/* Clip if outside left X limit. */
	if (x < gfx_min_x) {
  400748:	4298      	cmp	r0, r3
  40074a:	da03      	bge.n	400754 <gfx_generic_draw_filled_rect+0x50>
		width -= gfx_min_x - x;
  40074c:	4405      	add	r5, r0
  40074e:	1aed      	subs	r5, r5, r3
  400750:	b22d      	sxth	r5, r5
		x = gfx_min_x;
  400752:	4618      	mov	r0, r3
	}

	/* Clip if outside top Y limit. */
	if (y < gfx_min_y) {
  400754:	4291      	cmp	r1, r2
  400756:	da03      	bge.n	400760 <gfx_generic_draw_filled_rect+0x5c>
		height -= gfx_min_y - y;
  400758:	440c      	add	r4, r1
  40075a:	1aa4      	subs	r4, r4, r2
  40075c:	b224      	sxth	r4, r4
		y = gfx_min_y;
  40075e:	4611      	mov	r1, r2
	}
#endif

	/*  Compute bottom right point. */
	x2 = x + width - 1;
  400760:	fa1f fc80 	uxth.w	ip, r0
  400764:	eb0c 0205 	add.w	r2, ip, r5
  400768:	3a01      	subs	r2, #1
  40076a:	b212      	sxth	r2, r2
	y2 = y + height - 1;
  40076c:	fa1f fe81 	uxth.w	lr, r1
  400770:	eb0e 0304 	add.w	r3, lr, r4
  400774:	3b01      	subs	r3, #1
  400776:	b21b      	sxth	r3, r3

#ifdef CONF_GFX_USE_CLIPPING
	/* Clip if outside right X limit. */
	if (x2 > gfx_max_x) {
  400778:	4296      	cmp	r6, r2
  40077a:	da04      	bge.n	400786 <gfx_generic_draw_filled_rect+0x82>
		x2 = gfx_max_x;
		width = x2 - x + 1;
  40077c:	1c75      	adds	r5, r6, #1
  40077e:	eba5 050c 	sub.w	r5, r5, ip
  400782:	b22d      	sxth	r5, r5
		x2 = gfx_max_x;
  400784:	4632      	mov	r2, r6
	}

	/* Clip if outside bottom Y limit. */
	if (y2 > gfx_max_y) {
  400786:	429f      	cmp	r7, r3
  400788:	da04      	bge.n	400794 <gfx_generic_draw_filled_rect+0x90>
		y2 = gfx_max_y;
		height = y2 - y + 1;
  40078a:	1c7c      	adds	r4, r7, #1
  40078c:	eba4 040e 	sub.w	r4, r4, lr
  400790:	b224      	sxth	r4, r4
		y2 = gfx_max_y;
  400792:	463b      	mov	r3, r7
	}
#endif

	/* Set up draw area and duplicate pixel color until area is full. */
	gfx_set_limits(x, y, x2, y2);
  400794:	4e0f      	ldr	r6, [pc, #60]	; (4007d4 <gfx_generic_draw_filled_rect+0xd0>)
  400796:	47b0      	blx	r6
	gfx_duplicate_pixel(color, (uint32_t)width * height);
  400798:	fb04 f105 	mul.w	r1, r4, r5
  40079c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
  4007a0:	4b0d      	ldr	r3, [pc, #52]	; (4007d8 <gfx_generic_draw_filled_rect+0xd4>)
  4007a2:	4798      	blx	r3
  4007a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		width = -width;
  4007a6:	b293      	uxth	r3, r2
  4007a8:	425d      	negs	r5, r3
  4007aa:	b22d      	sxth	r5, r5
		x -= width - 1;
  4007ac:	3001      	adds	r0, #1
  4007ae:	4418      	add	r0, r3
  4007b0:	b200      	sxth	r0, r0
  4007b2:	e7b0      	b.n	400716 <gfx_generic_draw_filled_rect+0x12>
		height = -height;
  4007b4:	b2a3      	uxth	r3, r4
  4007b6:	425c      	negs	r4, r3
  4007b8:	b224      	sxth	r4, r4
		y -= height - 1;
  4007ba:	3101      	adds	r1, #1
  4007bc:	4419      	add	r1, r3
  4007be:	b209      	sxth	r1, r1
  4007c0:	e7ab      	b.n	40071a <gfx_generic_draw_filled_rect+0x16>
  4007c2:	4770      	bx	lr
  4007c4:	20402fca 	.word	0x20402fca
  4007c8:	20402fce 	.word	0x20402fce
  4007cc:	20402fcc 	.word	0x20402fcc
  4007d0:	20402fd0 	.word	0x20402fd0
  4007d4:	0040190d 	.word	0x0040190d
  4007d8:	004019c1 	.word	0x004019c1

004007dc <gfx_ili9488_set_orientation>:
gfx_coord_t gfx_height, gfx_width;
gfx_coord_t gfx_min_x, gfx_min_y;
gfx_coord_t gfx_max_x, gfx_max_y;

void gfx_ili9488_set_orientation(uint8_t flags)
{
  4007dc:	b510      	push	{r4, lr}
  4007de:	4604      	mov	r4, r0
	ili9488_set_orientation(flags);
  4007e0:	4b11      	ldr	r3, [pc, #68]	; (400828 <gfx_ili9488_set_orientation+0x4c>)
  4007e2:	4798      	blx	r3

	/* Switch width and height if XY is switched. */
	if ((flags & GFX_SWITCH_XY) != 0x00) {
  4007e4:	f014 0f04 	tst.w	r4, #4
  4007e8:	d114      	bne.n	400814 <gfx_ili9488_set_orientation+0x38>
		gfx_width = ILI9488_SWITCH_XY_WIDTH;
		gfx_height = ILI9488_SWITCH_XY_HEIGHT;
	} else {
		gfx_width = ILI9488_SWITCH_XY_HEIGHT;
  4007ea:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  4007ee:	4b0f      	ldr	r3, [pc, #60]	; (40082c <gfx_ili9488_set_orientation+0x50>)
  4007f0:	801a      	strh	r2, [r3, #0]
		gfx_height = ILI9488_SWITCH_XY_WIDTH;
  4007f2:	f44f 72a0 	mov.w	r2, #320	; 0x140
  4007f6:	4b0e      	ldr	r3, [pc, #56]	; (400830 <gfx_ili9488_set_orientation+0x54>)
  4007f8:	801a      	strh	r2, [r3, #0]
		//gfx_height = ILI9488_SWITCH_XY_HEIGHT;
	}

#ifdef CONF_GFX_USE_CLIPPING
	/* Reset clipping region. */
	gfx_set_clipping(0, 0, gfx_width - 1, gfx_height - 1);
  4007fa:	4b0d      	ldr	r3, [pc, #52]	; (400830 <gfx_ili9488_set_orientation+0x54>)
  4007fc:	881b      	ldrh	r3, [r3, #0]
  4007fe:	3b01      	subs	r3, #1
  400800:	4a0a      	ldr	r2, [pc, #40]	; (40082c <gfx_ili9488_set_orientation+0x50>)
  400802:	8812      	ldrh	r2, [r2, #0]
  400804:	3a01      	subs	r2, #1
  400806:	b21b      	sxth	r3, r3
  400808:	b212      	sxth	r2, r2
  40080a:	2100      	movs	r1, #0
  40080c:	4608      	mov	r0, r1
  40080e:	4c09      	ldr	r4, [pc, #36]	; (400834 <gfx_ili9488_set_orientation+0x58>)
  400810:	47a0      	blx	r4
  400812:	bd10      	pop	{r4, pc}
		gfx_width = ILI9488_SWITCH_XY_WIDTH;
  400814:	f44f 72a0 	mov.w	r2, #320	; 0x140
  400818:	4b04      	ldr	r3, [pc, #16]	; (40082c <gfx_ili9488_set_orientation+0x50>)
  40081a:	801a      	strh	r2, [r3, #0]
		gfx_height = ILI9488_SWITCH_XY_HEIGHT;
  40081c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  400820:	4b03      	ldr	r3, [pc, #12]	; (400830 <gfx_ili9488_set_orientation+0x54>)
  400822:	801a      	strh	r2, [r3, #0]
  400824:	e7e9      	b.n	4007fa <gfx_ili9488_set_orientation+0x1e>
  400826:	bf00      	nop
  400828:	00401935 	.word	0x00401935
  40082c:	20402fc8 	.word	0x20402fc8
  400830:	20402fd2 	.word	0x20402fd2
  400834:	004006b1 	.word	0x004006b1

00400838 <gfx_ili9488_draw_pixel>:

	return color;
}

void gfx_ili9488_draw_pixel(gfx_coord_t x, gfx_coord_t y, gfx_color_t color)
{
  400838:	b538      	push	{r3, r4, r5, lr}
#ifdef CONF_GFX_USE_CLIPPING
	if ((x < gfx_min_x) || (x > gfx_max_x) ||
  40083a:	4c0f      	ldr	r4, [pc, #60]	; (400878 <gfx_ili9488_draw_pixel+0x40>)
  40083c:	f9b4 4000 	ldrsh.w	r4, [r4]
  400840:	4284      	cmp	r4, r0
  400842:	dc0e      	bgt.n	400862 <gfx_ili9488_draw_pixel+0x2a>
  400844:	4b0d      	ldr	r3, [pc, #52]	; (40087c <gfx_ili9488_draw_pixel+0x44>)
  400846:	f9b3 3000 	ldrsh.w	r3, [r3]
  40084a:	4283      	cmp	r3, r0
  40084c:	db09      	blt.n	400862 <gfx_ili9488_draw_pixel+0x2a>
			(y < gfx_min_y) || (y > gfx_max_y)) {
  40084e:	4b0c      	ldr	r3, [pc, #48]	; (400880 <gfx_ili9488_draw_pixel+0x48>)
	if ((x < gfx_min_x) || (x > gfx_max_x) ||
  400850:	f9b3 3000 	ldrsh.w	r3, [r3]
  400854:	428b      	cmp	r3, r1
  400856:	dc04      	bgt.n	400862 <gfx_ili9488_draw_pixel+0x2a>
			(y < gfx_min_y) || (y > gfx_max_y)) {
  400858:	4b0a      	ldr	r3, [pc, #40]	; (400884 <gfx_ili9488_draw_pixel+0x4c>)
  40085a:	f9b3 3000 	ldrsh.w	r3, [r3]
  40085e:	428b      	cmp	r3, r1
  400860:	da00      	bge.n	400864 <gfx_ili9488_draw_pixel+0x2c>
  400862:	bd38      	pop	{r3, r4, r5, pc}
  400864:	4614      	mov	r4, r2
		return;
	}
#endif

	/* Set up draw area and write the two bytes of pixel data. */
	gfx_set_limits(x, y, x, y);
  400866:	460b      	mov	r3, r1
  400868:	4602      	mov	r2, r0
  40086a:	4d07      	ldr	r5, [pc, #28]	; (400888 <gfx_ili9488_draw_pixel+0x50>)
  40086c:	47a8      	blx	r5
	ili9488_write_gram(color);
  40086e:	4620      	mov	r0, r4
  400870:	4b06      	ldr	r3, [pc, #24]	; (40088c <gfx_ili9488_draw_pixel+0x54>)
  400872:	4798      	blx	r3
  400874:	e7f5      	b.n	400862 <gfx_ili9488_draw_pixel+0x2a>
  400876:	bf00      	nop
  400878:	20402fcc 	.word	0x20402fcc
  40087c:	20402fca 	.word	0x20402fca
  400880:	20402fd0 	.word	0x20402fd0
  400884:	20402fce 	.word	0x20402fce
  400888:	0040190d 	.word	0x0040190d
  40088c:	00401981 	.word	0x00401981

00400890 <gfx_ili9488_init>:
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
	LCD_MULTI_WD(us_data, size);
}

void gfx_ili9488_init(void)
{
  400890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400894:	b086      	sub	sp, #24
	struct ili9488_opt_t g_ili9488_display_opt;

	/* Initialize globals */
	gfx_width = ILI9488_LCD_WIDTH;
  400896:	4d21      	ldr	r5, [pc, #132]	; (40091c <gfx_ili9488_init+0x8c>)
  400898:	f44f 72a0 	mov.w	r2, #320	; 0x140
  40089c:	802a      	strh	r2, [r5, #0]
	gfx_height = ILI9488_LCD_HEIGHT;
  40089e:	4e20      	ldr	r6, [pc, #128]	; (400920 <gfx_ili9488_init+0x90>)
  4008a0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  4008a4:	8033      	strh	r3, [r6, #0]

	/* Initialize display parameter */
	g_ili9488_display_opt.ul_width= ILI9488_LCD_WIDTH;
  4008a6:	9202      	str	r2, [sp, #8]
	g_ili9488_display_opt.ul_height = ILI9488_LCD_HEIGHT;
  4008a8:	9303      	str	r3, [sp, #12]
	g_ili9488_display_opt.foreground_color= COLOR_WHITE;
  4008aa:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  4008ae:	9304      	str	r3, [sp, #16]
	g_ili9488_display_opt.background_color = COLOR_BLACK;
  4008b0:	2400      	movs	r4, #0
  4008b2:	9405      	str	r4, [sp, #20]

	ili9488_init(&g_ili9488_display_opt);
  4008b4:	a802      	add	r0, sp, #8
  4008b6:	4b1b      	ldr	r3, [pc, #108]	; (400924 <gfx_ili9488_init+0x94>)
  4008b8:	4798      	blx	r3
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  4008ba:	f8df 8088 	ldr.w	r8, [pc, #136]	; 400944 <gfx_ili9488_init+0xb4>
  4008be:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4008c2:	4640      	mov	r0, r8
  4008c4:	4b18      	ldr	r3, [pc, #96]	; (400928 <gfx_ili9488_init+0x98>)
  4008c6:	4798      	blx	r3

/* Define EBI access for ILI9488 16-bit System Interface.*/
#ifdef ILI9488_EBIMODE
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  4008c8:	f04f 47c6 	mov.w	r7, #1660944384	; 0x63000000
  4008cc:	2353      	movs	r3, #83	; 0x53
  4008ce:	803b      	strh	r3, [r7, #0]
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  4008d0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4008d4:	4640      	mov	r0, r8
  4008d6:	4b15      	ldr	r3, [pc, #84]	; (40092c <gfx_ili9488_init+0x9c>)
  4008d8:	4798      	blx	r3
		*(volatile uint16_t *)(BOARD_ILI9488_ADDR) = lcd_data;
	}
	static inline void LCD_MULTI_WD(const uint16_t *lcd_data, uint32_t size)
	{
		while(size--) {
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  4008da:	2324      	movs	r3, #36	; 0x24
  4008dc:	803b      	strh	r3, [r7, #0]
	
	/* Attempt to make display brighter :( */ 
	ili9488_color_t param = 0x24;
	ili9488_write_register(ILI9488_CMD_WRITE_CTRL_DISPLAY, &param, 1); 
	ili9488_write_brightness(0xFFFF);
  4008de:	f64f 70ff 	movw	r0, #65535	; 0xffff
  4008e2:	4b13      	ldr	r3, [pc, #76]	; (400930 <gfx_ili9488_init+0xa0>)
  4008e4:	4798      	blx	r3

	ili9488_display_on();
  4008e6:	4b13      	ldr	r3, [pc, #76]	; (400934 <gfx_ili9488_init+0xa4>)
  4008e8:	4798      	blx	r3

	/* Set clipping area to whole screen initially */
	gfx_set_clipping(0, 0, gfx_width, gfx_height);
  4008ea:	f9b6 3000 	ldrsh.w	r3, [r6]
  4008ee:	f9b5 2000 	ldrsh.w	r2, [r5]
  4008f2:	4621      	mov	r1, r4
  4008f4:	4620      	mov	r0, r4
  4008f6:	4f10      	ldr	r7, [pc, #64]	; (400938 <gfx_ili9488_init+0xa8>)
  4008f8:	47b8      	blx	r7

	gfx_set_orientation(GFX_FLIP_Y);
  4008fa:	2002      	movs	r0, #2
  4008fc:	4b0f      	ldr	r3, [pc, #60]	; (40093c <gfx_ili9488_init+0xac>)
  4008fe:	4798      	blx	r3
	gfx_draw_filled_rect(0, 0, gfx_width, gfx_height, g_ili9488_display_opt.background_color);			
  400900:	f9b6 3000 	ldrsh.w	r3, [r6]
  400904:	f9b5 2000 	ldrsh.w	r2, [r5]
  400908:	f8bd 1014 	ldrh.w	r1, [sp, #20]
  40090c:	9100      	str	r1, [sp, #0]
  40090e:	4621      	mov	r1, r4
  400910:	4620      	mov	r0, r4
  400912:	4c0b      	ldr	r4, [pc, #44]	; (400940 <gfx_ili9488_init+0xb0>)
  400914:	47a0      	blx	r4
}
  400916:	b006      	add	sp, #24
  400918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40091c:	20402fc8 	.word	0x20402fc8
  400920:	20402fd2 	.word	0x20402fd2
  400924:	00401781 	.word	0x00401781
  400928:	00402179 	.word	0x00402179
  40092c:	00402175 	.word	0x00402175
  400930:	004018f1 	.word	0x004018f1
  400934:	004016f1 	.word	0x004016f1
  400938:	004006b1 	.word	0x004006b1
  40093c:	004007dd 	.word	0x004007dd
  400940:	00400705 	.word	0x00400705
  400944:	400e1200 	.word	0x400e1200

00400948 <gfx_draw_char>:
 * \param text_color  Foreground color to draw the text string in
 */
void gfx_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font, const gfx_color_t bg_color,
		const gfx_color_t text_color)
{
  400948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40094c:	b085      	sub	sp, #20
  40094e:	4604      	mov	r4, r0
  400950:	4688      	mov	r8, r1
  400952:	4691      	mov	r9, r2
  400954:	469a      	mov	sl, r3
  400956:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
  40095a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  40095e:	9302      	str	r3, [sp, #8]
	if (bg_color != GFX_COLOR_TRANSPARENT) {
  400960:	f24f 031e 	movw	r3, #61470	; 0xf01e
  400964:	4299      	cmp	r1, r3
  400966:	d008      	beq.n	40097a <gfx_draw_char+0x32>
		gfx_draw_filled_rect(x, y, font->width, font->height, bg_color);
  400968:	f89a 3009 	ldrb.w	r3, [sl, #9]
  40096c:	f89a 2008 	ldrb.w	r2, [sl, #8]
  400970:	9100      	str	r1, [sp, #0]
  400972:	4649      	mov	r1, r9
  400974:	4640      	mov	r0, r8
  400976:	4d25      	ldr	r5, [pc, #148]	; (400a0c <gfx_draw_char+0xc4>)
  400978:	47a8      	blx	r5
	}

	switch (font->type) {
  40097a:	f89a 3000 	ldrb.w	r3, [sl]
  40097e:	b113      	cbz	r3, 400986 <gfx_draw_char+0x3e>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  400980:	b005      	add	sp, #20
  400982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  400986:	f89a 3008 	ldrb.w	r3, [sl, #8]
  40098a:	08da      	lsrs	r2, r3, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  40098c:	f013 0f07 	tst.w	r3, #7
		char_row_size++;
  400990:	bf18      	it	ne
  400992:	3201      	addne	r2, #1
	glyph_data_offset = char_row_size * font->height *
  400994:	f89a 3009 	ldrb.w	r3, [sl, #9]
			((uint8_t)ch - font->first_char);
  400998:	f89a 700a 	ldrb.w	r7, [sl, #10]
  40099c:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  40099e:	fb17 f703 	smulbb	r7, r7, r3
  4009a2:	fb17 f702 	smulbb	r7, r7, r2
	glyph_data = font->data.progmem + glyph_data_offset;
  4009a6:	f8da 2004 	ldr.w	r2, [sl, #4]
  4009aa:	fa12 f787 	uxtah	r7, r2, r7
  4009ae:	3b01      	subs	r3, #1
  4009b0:	f109 0201 	add.w	r2, r9, #1
  4009b4:	fa52 f383 	uxtab	r3, r2, r3
  4009b8:	b29b      	uxth	r3, r3
  4009ba:	9303      	str	r3, [sp, #12]
				gfx_draw_pixel(inc_x, inc_y, color);
  4009bc:	f8df b050 	ldr.w	fp, [pc, #80]	; 400a10 <gfx_draw_char+0xc8>
  4009c0:	e01d      	b.n	4009fe <gfx_draw_char+0xb6>
			glyph_byte <<= 1;
  4009c2:	0064      	lsls	r4, r4, #1
  4009c4:	b2e4      	uxtb	r4, r4
  4009c6:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  4009c8:	b2eb      	uxtb	r3, r5
  4009ca:	429e      	cmp	r6, r3
  4009cc:	d90e      	bls.n	4009ec <gfx_draw_char+0xa4>
  4009ce:	eb05 0008 	add.w	r0, r5, r8
  4009d2:	b200      	sxth	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  4009d4:	f015 0f07 	tst.w	r5, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  4009d8:	bf08      	it	eq
  4009da:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  4009de:	f014 0f80 	tst.w	r4, #128	; 0x80
  4009e2:	d0ee      	beq.n	4009c2 <gfx_draw_char+0x7a>
				gfx_draw_pixel(inc_x, inc_y, color);
  4009e4:	9a02      	ldr	r2, [sp, #8]
  4009e6:	4649      	mov	r1, r9
  4009e8:	47d8      	blx	fp
  4009ea:	e7ea      	b.n	4009c2 <gfx_draw_char+0x7a>
  4009ec:	f109 0901 	add.w	r9, r9, #1
  4009f0:	fa1f f389 	uxth.w	r3, r9
		inc_y += 1;
  4009f4:	fa0f f983 	sxth.w	r9, r3
	} while (rows_left > 0);
  4009f8:	9a03      	ldr	r2, [sp, #12]
  4009fa:	429a      	cmp	r2, r3
  4009fc:	d0c0      	beq.n	400980 <gfx_draw_char+0x38>
		uint8_t pixelsToDraw = font->width;
  4009fe:	f89a 6008 	ldrb.w	r6, [sl, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  400a02:	2e00      	cmp	r6, #0
  400a04:	d0f2      	beq.n	4009ec <gfx_draw_char+0xa4>
  400a06:	2500      	movs	r5, #0
  400a08:	462c      	mov	r4, r5
  400a0a:	e7e0      	b.n	4009ce <gfx_draw_char+0x86>
  400a0c:	00400705 	.word	0x00400705
  400a10:	00400839 	.word	0x00400839

00400a14 <gfx_get_string_bounding_box>:
 * \param width    Pointer to width result
 * \param height   Pointer to height result
 */
void gfx_get_string_bounding_box(const char *str, const struct font *font,
		gfx_coord_t *width, gfx_coord_t *height)
{
  400a14:	b5f0      	push	{r4, r5, r6, r7, lr}
	gfx_coord_t font_width = font->width;
  400a16:	7a0f      	ldrb	r7, [r1, #8]
	gfx_coord_t font_height = font->height;
  400a18:	f891 e009 	ldrb.w	lr, [r1, #9]
  400a1c:	fa0f f58e 	sxth.w	r5, lr

	gfx_coord_t max_width = 1;
	gfx_coord_t max_height = font_height;
	gfx_coord_t x = 0;
  400a20:	2100      	movs	r1, #0
	gfx_coord_t max_width = 1;
  400a22:	2601      	movs	r6, #1

	/* Handle each character until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = 0;
  400a24:	468c      	mov	ip, r1
  400a26:	e005      	b.n	400a34 <gfx_get_string_bounding_box+0x20>
			max_height += font_height;
  400a28:	4475      	add	r5, lr
  400a2a:	b22d      	sxth	r5, r5
			x = 0;
  400a2c:	4661      	mov	r1, ip
			x += font_width;
			if (x > max_width) {
				max_width = x;
			}
		}
	} while (*(++str));
  400a2e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
  400a32:	b154      	cbz	r4, 400a4a <gfx_get_string_bounding_box+0x36>
		if (*str == '\n') {
  400a34:	7804      	ldrb	r4, [r0, #0]
  400a36:	2c0a      	cmp	r4, #10
  400a38:	d0f6      	beq.n	400a28 <gfx_get_string_bounding_box+0x14>
		} else if (*str == '\r') {
  400a3a:	2c0d      	cmp	r4, #13
  400a3c:	d0f7      	beq.n	400a2e <gfx_get_string_bounding_box+0x1a>
			x += font_width;
  400a3e:	4439      	add	r1, r7
  400a40:	b209      	sxth	r1, r1
  400a42:	428e      	cmp	r6, r1
  400a44:	bfb8      	it	lt
  400a46:	460e      	movlt	r6, r1
  400a48:	e7f1      	b.n	400a2e <gfx_get_string_bounding_box+0x1a>

	/* Return values through references */
	*width = max_width;
  400a4a:	8016      	strh	r6, [r2, #0]
	*height = max_height;
  400a4c:	801d      	strh	r5, [r3, #0]
  400a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00400a50 <gfx_draw_string_aligned>:
{
  400a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400a54:	b087      	sub	sp, #28
  400a56:	4606      	mov	r6, r0
  400a58:	9103      	str	r1, [sp, #12]
  400a5a:	4690      	mov	r8, r2
  400a5c:	461f      	mov	r7, r3
  400a5e:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
  400a62:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
  400a66:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
  400a6a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
  400a6e:	9302      	str	r3, [sp, #8]
	gfx_get_string_bounding_box(str, font, &bounding_x, &bounding_y);
  400a70:	ab05      	add	r3, sp, #20
  400a72:	f10d 0216 	add.w	r2, sp, #22
  400a76:	4639      	mov	r1, r7
  400a78:	4d47      	ldr	r5, [pc, #284]	; (400b98 <gfx_draw_string_aligned+0x148>)
  400a7a:	47a8      	blx	r5
	if (text_pos & TEXT_POS_CENTER_Y) {
  400a7c:	f014 0f02 	tst.w	r4, #2
  400a80:	d01b      	beq.n	400aba <gfx_draw_string_aligned+0x6a>
		y -= bounding_y / 2;
  400a82:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  400a86:	2b00      	cmp	r3, #0
  400a88:	bfb8      	it	lt
  400a8a:	3301      	addlt	r3, #1
  400a8c:	eba8 0863 	sub.w	r8, r8, r3, asr #1
  400a90:	fa0f f888 	sxth.w	r8, r8
	if (text_pos & TEXT_POS_CENTER_X) {
  400a94:	f014 0f10 	tst.w	r4, #16
  400a98:	d019      	beq.n	400ace <gfx_draw_string_aligned+0x7e>
		x -= bounding_x / 2;
  400a9a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
  400a9e:	2b00      	cmp	r3, #0
  400aa0:	bfb8      	it	lt
  400aa2:	3301      	addlt	r3, #1
  400aa4:	9a03      	ldr	r2, [sp, #12]
  400aa6:	eba2 0363 	sub.w	r3, r2, r3, asr #1
  400aaa:	b21b      	sxth	r3, r3
  400aac:	9303      	str	r3, [sp, #12]
	while (*str != '\0') {
  400aae:	7833      	ldrb	r3, [r6, #0]
  400ab0:	2b00      	cmp	r3, #0
  400ab2:	d06d      	beq.n	400b90 <gfx_draw_string_aligned+0x140>
				gfx_draw_char(*curr_line_text, curr_line_x, y,
  400ab4:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 400b9c <gfx_draw_string_aligned+0x14c>
  400ab8:	e067      	b.n	400b8a <gfx_draw_string_aligned+0x13a>
	} else if (text_pos & TEXT_POS_BOTTOM) {
  400aba:	f014 0f04 	tst.w	r4, #4
  400abe:	d0e9      	beq.n	400a94 <gfx_draw_string_aligned+0x44>
		y -= bounding_y;
  400ac0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  400ac4:	eba8 0803 	sub.w	r8, r8, r3
  400ac8:	fa0f f888 	sxth.w	r8, r8
  400acc:	e7e2      	b.n	400a94 <gfx_draw_string_aligned+0x44>
	} else if (text_pos & TEXT_POS_RIGHT) {
  400ace:	f014 0f20 	tst.w	r4, #32
  400ad2:	d0ec      	beq.n	400aae <gfx_draw_string_aligned+0x5e>
		x -= bounding_x;
  400ad4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  400ad8:	9a03      	ldr	r2, [sp, #12]
  400ada:	1ad3      	subs	r3, r2, r3
  400adc:	b21b      	sxth	r3, r3
  400ade:	9303      	str	r3, [sp, #12]
  400ae0:	e7e5      	b.n	400aae <gfx_draw_string_aligned+0x5e>
				str++;
  400ae2:	3501      	adds	r5, #1
		if (text_align == TEXT_ALIGN_CENTER) {
  400ae4:	9a02      	ldr	r2, [sp, #8]
  400ae6:	2a02      	cmp	r2, #2
  400ae8:	d014      	beq.n	400b14 <gfx_draw_string_aligned+0xc4>
		} else if (text_align == TEXT_ALIGN_RIGHT) {
  400aea:	9a02      	ldr	r2, [sp, #8]
  400aec:	2a01      	cmp	r2, #1
  400aee:	d024      	beq.n	400b3a <gfx_draw_string_aligned+0xea>
		gfx_coord_t curr_line_x = x;
  400af0:	9c03      	ldr	r4, [sp, #12]
  400af2:	464b      	mov	r3, r9
  400af4:	46a9      	mov	r9, r5
  400af6:	461d      	mov	r5, r3
  400af8:	e02c      	b.n	400b54 <gfx_draw_string_aligned+0x104>
		} while (*(++str) != '\0');
  400afa:	f815 2f01 	ldrb.w	r2, [r5, #1]!
  400afe:	2a00      	cmp	r2, #0
  400b00:	d0f0      	beq.n	400ae4 <gfx_draw_string_aligned+0x94>
			if (*str == '\n') {
  400b02:	782a      	ldrb	r2, [r5, #0]
  400b04:	2a0a      	cmp	r2, #10
  400b06:	d0ec      	beq.n	400ae2 <gfx_draw_string_aligned+0x92>
			} else if (*str != '\r') {
  400b08:	2a0d      	cmp	r2, #13
  400b0a:	d0f6      	beq.n	400afa <gfx_draw_string_aligned+0xaa>
				curr_line_width += font->width;
  400b0c:	7a3a      	ldrb	r2, [r7, #8]
  400b0e:	4413      	add	r3, r2
  400b10:	b21b      	sxth	r3, r3
  400b12:	e7f2      	b.n	400afa <gfx_draw_string_aligned+0xaa>
			curr_line_x += (bounding_x / 2) - (curr_line_width / 2);
  400b14:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
  400b18:	2a00      	cmp	r2, #0
  400b1a:	bfb8      	it	lt
  400b1c:	3201      	addlt	r2, #1
  400b1e:	9903      	ldr	r1, [sp, #12]
  400b20:	eb01 0462 	add.w	r4, r1, r2, asr #1
  400b24:	461a      	mov	r2, r3
  400b26:	2b00      	cmp	r3, #0
  400b28:	bfb8      	it	lt
  400b2a:	1c5a      	addlt	r2, r3, #1
  400b2c:	eba4 0462 	sub.w	r4, r4, r2, asr #1
  400b30:	b224      	sxth	r4, r4
  400b32:	464b      	mov	r3, r9
  400b34:	46a9      	mov	r9, r5
  400b36:	461d      	mov	r5, r3
  400b38:	e00c      	b.n	400b54 <gfx_draw_string_aligned+0x104>
			curr_line_x += bounding_x - curr_line_width;
  400b3a:	f8bd 4016 	ldrh.w	r4, [sp, #22]
  400b3e:	9a03      	ldr	r2, [sp, #12]
  400b40:	4414      	add	r4, r2
  400b42:	1ae4      	subs	r4, r4, r3
  400b44:	b224      	sxth	r4, r4
  400b46:	464b      	mov	r3, r9
  400b48:	46a9      	mov	r9, r5
  400b4a:	461d      	mov	r5, r3
  400b4c:	e002      	b.n	400b54 <gfx_draw_string_aligned+0x104>
		} while (*(++curr_line_text) != '\0');
  400b4e:	f816 3f01 	ldrb.w	r3, [r6, #1]!
  400b52:	b17b      	cbz	r3, 400b74 <gfx_draw_string_aligned+0x124>
			if (*curr_line_text == '\n') {
  400b54:	7830      	ldrb	r0, [r6, #0]
  400b56:	280a      	cmp	r0, #10
  400b58:	d00c      	beq.n	400b74 <gfx_draw_string_aligned+0x124>
			} else if (*curr_line_text != '\r') {
  400b5a:	280d      	cmp	r0, #13
  400b5c:	d0f7      	beq.n	400b4e <gfx_draw_string_aligned+0xfe>
				gfx_draw_char(*curr_line_text, curr_line_x, y,
  400b5e:	f8cd a004 	str.w	sl, [sp, #4]
  400b62:	9500      	str	r5, [sp, #0]
  400b64:	463b      	mov	r3, r7
  400b66:	4642      	mov	r2, r8
  400b68:	4621      	mov	r1, r4
  400b6a:	47d8      	blx	fp
				curr_line_x += font->width;
  400b6c:	7a3b      	ldrb	r3, [r7, #8]
  400b6e:	441c      	add	r4, r3
  400b70:	b224      	sxth	r4, r4
  400b72:	e7ec      	b.n	400b4e <gfx_draw_string_aligned+0xfe>
  400b74:	462b      	mov	r3, r5
  400b76:	464d      	mov	r5, r9
  400b78:	4699      	mov	r9, r3
		y += font->height + 1;
  400b7a:	7a7b      	ldrb	r3, [r7, #9]
  400b7c:	3301      	adds	r3, #1
  400b7e:	4498      	add	r8, r3
  400b80:	fa0f f888 	sxth.w	r8, r8
	while (*str != '\0') {
  400b84:	782b      	ldrb	r3, [r5, #0]
  400b86:	b11b      	cbz	r3, 400b90 <gfx_draw_string_aligned+0x140>
  400b88:	462e      	mov	r6, r5
  400b8a:	4635      	mov	r5, r6
  400b8c:	2300      	movs	r3, #0
  400b8e:	e7b8      	b.n	400b02 <gfx_draw_string_aligned+0xb2>
}
  400b90:	b007      	add	sp, #28
  400b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400b96:	bf00      	nop
  400b98:	00400a15 	.word	0x00400a15
  400b9c:	00400949 	.word	0x00400949

00400ba0 <lcd_init>:
#include "LCDLib.h"
#include "asf.h"

/*********************************** Public Functions Start ***********************************/
void lcd_init(void)
{
  400ba0:	b508      	push	{r3, lr}
	gfx_init();
  400ba2:	4b02      	ldr	r3, [pc, #8]	; (400bac <lcd_init+0xc>)
  400ba4:	4798      	blx	r3
	mxt_init();
  400ba6:	4b02      	ldr	r3, [pc, #8]	; (400bb0 <lcd_init+0x10>)
  400ba8:	4798      	blx	r3
  400baa:	bd08      	pop	{r3, pc}
  400bac:	00400891 	.word	0x00400891
  400bb0:	00400bb5 	.word	0x00400bb5

00400bb4 <mxt_init>:
	else 
		return false; 
}

void mxt_init(void)
{
  400bb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400bb8:	b09f      	sub	sp, #124	; 0x7c
	enum status_code status;

	/* T8 configuration object data */
	uint8_t t8_object[] = {
  400bba:	4c55      	ldr	r4, [pc, #340]	; (400d10 <mxt_init+0x15c>)
  400bbc:	ab1b      	add	r3, sp, #108	; 0x6c
  400bbe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  400bc2:	c303      	stmia	r3!, {r0, r1}
  400bc4:	801a      	strh	r2, [r3, #0]
		0x0d, 0x00, 0x05, 0x0a, 0x4b, 0x00, 0x00,
		0x00, 0x32, 0x19
	};

	/* T9 configuration object data */
	uint8_t t9_object[] = {
  400bc6:	ad12      	add	r5, sp, #72	; 0x48
  400bc8:	f104 060c 	add.w	r6, r4, #12
  400bcc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  400bce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  400bd0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  400bd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  400bd4:	6833      	ldr	r3, [r6, #0]
  400bd6:	602b      	str	r3, [r5, #0]
		0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x02,
		0x02
	};

	/* T46 configuration object data */
	uint8_t t46_object[] = {
  400bd8:	ab0f      	add	r3, sp, #60	; 0x3c
  400bda:	f104 0230 	add.w	r2, r4, #48	; 0x30
  400bde:	ca07      	ldmia	r2, {r0, r1, r2}
  400be0:	c303      	stmia	r3!, {r0, r1}
  400be2:	701a      	strb	r2, [r3, #0]
		0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x03,
		0x00, 0x00
	};
	
	/* T56 configuration object data */
	uint8_t t56_object[] = {
  400be4:	ad06      	add	r5, sp, #24
  400be6:	343c      	adds	r4, #60	; 0x3c
  400be8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  400bea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  400bec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  400bee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  400bf0:	6823      	ldr	r3, [r4, #0]
  400bf2:	702b      	strb	r3, [r5, #0]
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00
	};

	/* TWI configuration */
	twihs_master_options_t twi_opt = {
  400bf4:	2500      	movs	r5, #0
  400bf6:	9503      	str	r5, [sp, #12]
  400bf8:	9505      	str	r5, [sp, #20]
  400bfa:	4b46      	ldr	r3, [pc, #280]	; (400d14 <mxt_init+0x160>)
  400bfc:	9304      	str	r3, [sp, #16]
  400bfe:	274a      	movs	r7, #74	; 0x4a
  400c00:	f88d 7014 	strb.w	r7, [sp, #20]
		.speed = MXT_TWI_SPEED,
		.chip  = MAXTOUCH_TWI_ADDRESS,
	};
	
	/* Configure IRQ pin for MaxTouch */
	pio_configure(PIOD, PIO_INPUT, PIO_PD28, PIO_PULLUP);
  400c04:	2301      	movs	r3, #1
  400c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400c0a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400c0e:	4842      	ldr	r0, [pc, #264]	; (400d18 <mxt_init+0x164>)
  400c10:	4c42      	ldr	r4, [pc, #264]	; (400d1c <mxt_init+0x168>)
  400c12:	47a0      	blx	r4
typedef twihs_packet_t twihs_package_t;

static inline uint32_t twihs_master_setup(twihs_master_t p_twihs,
		twihs_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
  400c14:	4b42      	ldr	r3, [pc, #264]	; (400d20 <mxt_init+0x16c>)
  400c16:	9303      	str	r3, [sp, #12]
	p_opt->smbus      = 0;
  400c18:	f88d 5015 	strb.w	r5, [sp, #21]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400c1c:	2013      	movs	r0, #19
  400c1e:	4b41      	ldr	r3, [pc, #260]	; (400d24 <mxt_init+0x170>)
  400c20:	4798      	blx	r3
#endif		
	} else {
		// Do Nothing
	}
#endif
	return (twihs_master_init(p_twihs, p_opt));
  400c22:	4e41      	ldr	r6, [pc, #260]	; (400d28 <mxt_init+0x174>)
  400c24:	a903      	add	r1, sp, #12
  400c26:	4630      	mov	r0, r6
  400c28:	4b40      	ldr	r3, [pc, #256]	; (400d2c <mxt_init+0x178>)
  400c2a:	4798      	blx	r3

	status = (enum status_code)twihs_master_setup(MAXTOUCH_TWI_INTERFACE, &twi_opt);
	Assert(status == STATUS_OK);

	/* Initialize the maXTouch device */
	status = mxt_init_device(&device, MAXTOUCH_TWI_INTERFACE,
  400c2c:	4c40      	ldr	r4, [pc, #256]	; (400d30 <mxt_init+0x17c>)
  400c2e:	237c      	movs	r3, #124	; 0x7c
  400c30:	463a      	mov	r2, r7
  400c32:	4631      	mov	r1, r6
  400c34:	4620      	mov	r0, r4
  400c36:	4e3f      	ldr	r6, [pc, #252]	; (400d34 <mxt_init+0x180>)
  400c38:	47b0      	blx	r6
			MAXTOUCH_TWI_ADDRESS, MAXTOUCH_XPRO_CHG_PIO);
	Assert(status == STATUS_OK);

	/* Issue soft reset of maXTouch device by writing a non-zero value to
	 * the reset register */
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  400c3a:	462a      	mov	r2, r5
  400c3c:	2106      	movs	r1, #6
  400c3e:	4620      	mov	r0, r4
  400c40:	4e3d      	ldr	r6, [pc, #244]	; (400d38 <mxt_init+0x184>)
  400c42:	47b0      	blx	r6
  400c44:	2201      	movs	r2, #1
  400c46:	4601      	mov	r1, r0
  400c48:	4620      	mov	r0, r4
  400c4a:	4f3c      	ldr	r7, [pc, #240]	; (400d3c <mxt_init+0x188>)
  400c4c:	47b8      	blx	r7
			MXT_GEN_COMMANDPROCESSOR_T6, 0)
			+ MXT_GEN_COMMANDPROCESSOR_RESET, 0x01);

	/* Wait for the reset of the device to complete */
	delay_ms(MXT_RESET_TIME);
  400c4e:	483c      	ldr	r0, [pc, #240]	; (400d40 <mxt_init+0x18c>)
  400c50:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 400d4c <mxt_init+0x198>
  400c54:	47c8      	blx	r9

	// Write data to configuration registers in T7 configuration object 
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  400c56:	462a      	mov	r2, r5
  400c58:	2107      	movs	r1, #7
  400c5a:	4620      	mov	r0, r4
  400c5c:	47b0      	blx	r6
  400c5e:	2220      	movs	r2, #32
  400c60:	4601      	mov	r1, r0
  400c62:	4620      	mov	r0, r4
  400c64:	47b8      	blx	r7
			MXT_GEN_POWERCONFIG_T7, 0) + 0, 0x20);
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  400c66:	462a      	mov	r2, r5
  400c68:	2107      	movs	r1, #7
  400c6a:	4620      	mov	r0, r4
  400c6c:	47b0      	blx	r6
  400c6e:	1c41      	adds	r1, r0, #1
  400c70:	2210      	movs	r2, #16
  400c72:	b289      	uxth	r1, r1
  400c74:	4620      	mov	r0, r4
  400c76:	47b8      	blx	r7
			MXT_GEN_POWERCONFIG_T7, 0) + 1, 0x10);
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  400c78:	462a      	mov	r2, r5
  400c7a:	2107      	movs	r1, #7
  400c7c:	4620      	mov	r0, r4
  400c7e:	47b0      	blx	r6
  400c80:	1c81      	adds	r1, r0, #2
  400c82:	224b      	movs	r2, #75	; 0x4b
  400c84:	b289      	uxth	r1, r1
  400c86:	4620      	mov	r0, r4
  400c88:	47b8      	blx	r7
			MXT_GEN_POWERCONFIG_T7, 0) + 2, 0x4b);
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  400c8a:	462a      	mov	r2, r5
  400c8c:	2107      	movs	r1, #7
  400c8e:	4620      	mov	r0, r4
  400c90:	47b0      	blx	r6
  400c92:	1cc1      	adds	r1, r0, #3
  400c94:	2284      	movs	r2, #132	; 0x84
  400c96:	b289      	uxth	r1, r1
  400c98:	4620      	mov	r0, r4
  400c9a:	47b8      	blx	r7
			MXT_GEN_POWERCONFIG_T7, 0) + 3, 0x84);

	// Write predefined configuration data to configuration objects 
	mxt_write_config_object(&device, mxt_get_object_address(&device,
  400c9c:	462a      	mov	r2, r5
  400c9e:	2108      	movs	r1, #8
  400ca0:	4620      	mov	r0, r4
  400ca2:	47b0      	blx	r6
  400ca4:	aa1b      	add	r2, sp, #108	; 0x6c
  400ca6:	4601      	mov	r1, r0
  400ca8:	4620      	mov	r0, r4
  400caa:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 400d50 <mxt_init+0x19c>
  400cae:	47c0      	blx	r8
			MXT_GEN_ACQUISITIONCONFIG_T8, 0), &t8_object);
	mxt_write_config_object(&device, mxt_get_object_address(&device,
  400cb0:	462a      	mov	r2, r5
  400cb2:	2109      	movs	r1, #9
  400cb4:	4620      	mov	r0, r4
  400cb6:	47b0      	blx	r6
  400cb8:	aa12      	add	r2, sp, #72	; 0x48
  400cba:	4601      	mov	r1, r0
  400cbc:	4620      	mov	r0, r4
  400cbe:	47c0      	blx	r8
			MXT_TOUCH_MULTITOUCHSCREEN_T9, 0), &t9_object);
	mxt_write_config_object(&device, mxt_get_object_address(&device,
  400cc0:	462a      	mov	r2, r5
  400cc2:	212e      	movs	r1, #46	; 0x2e
  400cc4:	4620      	mov	r0, r4
  400cc6:	47b0      	blx	r6
  400cc8:	aa0f      	add	r2, sp, #60	; 0x3c
  400cca:	4601      	mov	r1, r0
  400ccc:	4620      	mov	r0, r4
  400cce:	47c0      	blx	r8
			MXT_SPT_CTE_CONFIGURATION_T46, 0), &t46_object);
	mxt_write_config_object(&device, mxt_get_object_address(&device,
  400cd0:	462a      	mov	r2, r5
  400cd2:	2138      	movs	r1, #56	; 0x38
  400cd4:	4620      	mov	r0, r4
  400cd6:	47b0      	blx	r6
  400cd8:	aa06      	add	r2, sp, #24
  400cda:	4601      	mov	r1, r0
  400cdc:	4620      	mov	r0, r4
  400cde:	47c0      	blx	r8
			MXT_PROCI_SHIELDLESS_T56, 0), &t56_object);

	// Issue recalibration command to maXTouch device by writing a non-zero
	 // value to the calibrate register 
	mxt_write_config_reg(&device, mxt_get_object_address(&device, MXT_GEN_COMMANDPROCESSOR_T6, 0) + MXT_GEN_COMMANDPROCESSOR_CALIBRATE, 0x01); 
  400ce0:	462a      	mov	r2, r5
  400ce2:	2106      	movs	r1, #6
  400ce4:	4620      	mov	r0, r4
  400ce6:	47b0      	blx	r6
  400ce8:	1c81      	adds	r1, r0, #2
  400cea:	2201      	movs	r2, #1
  400cec:	b289      	uxth	r1, r1
  400cee:	4620      	mov	r0, r4
  400cf0:	47b8      	blx	r7
	
	delay_ms(100); 
  400cf2:	4814      	ldr	r0, [pc, #80]	; (400d44 <mxt_init+0x190>)
  400cf4:	47c8      	blx	r9
  400cf6:	f44f 74af 	mov.w	r4, #350	; 0x15e
		mxt_read_message(data, &message);
  400cfa:	4e0d      	ldr	r6, [pc, #52]	; (400d30 <mxt_init+0x17c>)
  400cfc:	4d12      	ldr	r5, [pc, #72]	; (400d48 <mxt_init+0x194>)
  400cfe:	4669      	mov	r1, sp
  400d00:	4630      	mov	r0, r6
  400d02:	47a8      	blx	r5
	} while (--count);
  400d04:	3c01      	subs	r4, #1
  400d06:	d1fa      	bne.n	400cfe <mxt_init+0x14a>
	
	// Make chg pin high 
	mxt_make_highchg(&device);
}
  400d08:	b01f      	add	sp, #124	; 0x7c
  400d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400d0e:	bf00      	nop
  400d10:	004099ec 	.word	0x004099ec
  400d14:	00061a80 	.word	0x00061a80
  400d18:	400e1400 	.word	0x400e1400
  400d1c:	0040226d 	.word	0x0040226d
  400d20:	08f0d180 	.word	0x08f0d180
  400d24:	00402609 	.word	0x00402609
  400d28:	40018000 	.word	0x40018000
  400d2c:	00401c21 	.word	0x00401c21
  400d30:	20400a60 	.word	0x20400a60
  400d34:	0040105d 	.word	0x0040105d
  400d38:	004012f5 	.word	0x004012f5
  400d3c:	004013ad 	.word	0x004013ad
  400d40:	003228d8 	.word	0x003228d8
  400d44:	004d2b25 	.word	0x004d2b25
  400d48:	004013f5 	.word	0x004013f5
  400d4c:	20400001 	.word	0x20400001
  400d50:	00401335 	.word	0x00401335

00400d54 <Yin_init>:
/**
 * Initialise the Yin pitch detection object
 * @param bufferSize Length of the audio buffer to analyse
 * @param threshold  Allowed uncertainty (e.g 0.05 will return a pitch with ~95% probability)
 */
void Yin_init(int16_t bufferSize, float32_t threshold){
  400d54:	b510      	push	{r4, lr}
	/* Initialise the fields of the Yin structure passed in */
	yin.bufferSize = bufferSize;
  400d56:	4b08      	ldr	r3, [pc, #32]	; (400d78 <Yin_init+0x24>)
  400d58:	8018      	strh	r0, [r3, #0]
	yin.halfBufferSize = bufferSize / 2;
  400d5a:	4603      	mov	r3, r0
  400d5c:	2800      	cmp	r0, #0
  400d5e:	bfb8      	it	lt
  400d60:	1c43      	addlt	r3, r0, #1
  400d62:	1058      	asrs	r0, r3, #1
  400d64:	4c04      	ldr	r4, [pc, #16]	; (400d78 <Yin_init+0x24>)
  400d66:	8060      	strh	r0, [r4, #2]
	yin.probability = 0.0;
  400d68:	2300      	movs	r3, #0
  400d6a:	60a3      	str	r3, [r4, #8]
	yin.threshold = threshold;
  400d6c:	60e1      	str	r1, [r4, #12]
	
	/* Allocate the autocorellation buffer */
	yin.yinBuffer = (float32_t *) malloc(sizeof(float32_t)* yin.halfBufferSize);
  400d6e:	0080      	lsls	r0, r0, #2
  400d70:	4b02      	ldr	r3, [pc, #8]	; (400d7c <Yin_init+0x28>)
  400d72:	4798      	blx	r3
  400d74:	6060      	str	r0, [r4, #4]
  400d76:	bd10      	pop	{r4, pc}
  400d78:	20400a80 	.word	0x20400a80
  400d7c:	00403489 	.word	0x00403489

00400d80 <Yin_getPitch>:
/**
 * Runs the Yin pitch detection algortihm
 * @param  buffer Buffer of samples to analyse
 * @return        Fundamental frequency of the signal in Hz. Returns -1 if pitch can't be found
 */
float32_t Yin_getPitch(int16_t* buffer){
  400d80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400d84:	ed2d 8b04 	vpush	{d8-d9}
	for(tau = 0 ; tau < yin.halfBufferSize; tau++)
  400d88:	4bac      	ldr	r3, [pc, #688]	; (40103c <Yin_getPitch+0x2bc>)
  400d8a:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
  400d8e:	f1be 0f00 	cmp.w	lr, #0
  400d92:	dd38      	ble.n	400e06 <Yin_getPitch+0x86>
  400d94:	f1a0 0c02 	sub.w	ip, r0, #2
  400d98:	685f      	ldr	r7, [r3, #4]
  400d9a:	fa1f f38e 	uxth.w	r3, lr
  400d9e:	f103 38ff 	add.w	r8, r3, #4294967295
  400da2:	fa1f f888 	uxth.w	r8, r8
  400da6:	eb00 0848 	add.w	r8, r0, r8, lsl #1
  400daa:	1e9e      	subs	r6, r3, #2
  400dac:	b2b6      	uxth	r6, r6
  400dae:	3601      	adds	r6, #1
  400db0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
		delta = buffer[0] - buffer[tau];
  400db4:	f9b0 3000 	ldrsh.w	r3, [r0]
  400db8:	f93c 2f02 	ldrsh.w	r2, [ip, #2]!
  400dbc:	1a9b      	subs	r3, r3, r2
  400dbe:	ee07 3a90 	vmov	s15, r3
  400dc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400dc6:	4639      	mov	r1, r7
		yin.yinBuffer[tau] = delta*delta; 
  400dc8:	ee67 7aa7 	vmul.f32	s15, s15, s15
  400dcc:	edc7 7a00 	vstr	s15, [r7]
		for(i = 1; i < yin.halfBufferSize; i++)
  400dd0:	f1be 0f01 	cmp.w	lr, #1
  400dd4:	dd14      	ble.n	400e00 <Yin_getPitch+0x80>
  400dd6:	4602      	mov	r2, r0
  400dd8:	4664      	mov	r4, ip
			delta = buffer[i] - buffer[i + tau];
  400dda:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
  400dde:	f934 5f02 	ldrsh.w	r5, [r4, #2]!
  400de2:	1b5b      	subs	r3, r3, r5
  400de4:	ee07 3a90 	vmov	s15, r3
  400de8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			yin.yinBuffer[tau] += delta * delta;
  400dec:	ee67 7aa7 	vmul.f32	s15, s15, s15
  400df0:	ed91 7a00 	vldr	s14, [r1]
  400df4:	ee77 7a27 	vadd.f32	s15, s14, s15
  400df8:	edc1 7a00 	vstr	s15, [r1]
		for(i = 1; i < yin.halfBufferSize; i++)
  400dfc:	42b2      	cmp	r2, r6
  400dfe:	d1ec      	bne.n	400dda <Yin_getPitch+0x5a>
  400e00:	3704      	adds	r7, #4
	for(tau = 0 ; tau < yin.halfBufferSize; tau++)
  400e02:	45c4      	cmp	ip, r8
  400e04:	d1d6      	bne.n	400db4 <Yin_getPitch+0x34>
	yin.yinBuffer[0] = 1;
  400e06:	4b8d      	ldr	r3, [pc, #564]	; (40103c <Yin_getPitch+0x2bc>)
  400e08:	6859      	ldr	r1, [r3, #4]
  400e0a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
  400e0e:	600b      	str	r3, [r1, #0]
	for (tau = 1; tau < yin.halfBufferSize; tau++) {
  400e10:	f1be 0f01 	cmp.w	lr, #1
  400e14:	dd15      	ble.n	400e42 <Yin_getPitch+0xc2>
  400e16:	1d0a      	adds	r2, r1, #4
  400e18:	ed9f 7a89 	vldr	s14, [pc, #548]	; 401040 <Yin_getPitch+0x2c0>
  400e1c:	2301      	movs	r3, #1
		runningSum += yin.yinBuffer[tau];
  400e1e:	edd2 6a00 	vldr	s13, [r2]
  400e22:	ee37 7a26 	vadd.f32	s14, s14, s13
		yin.yinBuffer[tau] *= tau / runningSum;
  400e26:	ee07 3a90 	vmov	s15, r3
  400e2a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
  400e2e:	eec6 7a07 	vdiv.f32	s15, s12, s14
  400e32:	ee67 7aa6 	vmul.f32	s15, s15, s13
  400e36:	ece2 7a01 	vstmia	r2!, {s15}
  400e3a:	3301      	adds	r3, #1
  400e3c:	b21b      	sxth	r3, r3
	for (tau = 1; tau < yin.halfBufferSize; tau++) {
  400e3e:	4573      	cmp	r3, lr
  400e40:	d1ed      	bne.n	400e1e <Yin_getPitch+0x9e>
	for (tau = 2; tau < yin.halfBufferSize ; tau++) {
  400e42:	f1be 0f02 	cmp.w	lr, #2
  400e46:	f340 80b7 	ble.w	400fb8 <Yin_getPitch+0x238>
		if (yin.yinBuffer[tau] < yin.threshold) {
  400e4a:	4b7c      	ldr	r3, [pc, #496]	; (40103c <Yin_getPitch+0x2bc>)
  400e4c:	ed93 7a03 	vldr	s14, [r3, #12]
  400e50:	edd1 7a02 	vldr	s15, [r1, #8]
  400e54:	eef4 7ac7 	vcmpe.f32	s15, s14
  400e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400e5c:	f100 80aa 	bmi.w	400fb4 <Yin_getPitch+0x234>
  400e60:	f101 030c 	add.w	r3, r1, #12
  400e64:	2402      	movs	r4, #2
  400e66:	3401      	adds	r4, #1
  400e68:	b224      	sxth	r4, r4
	for (tau = 2; tau < yin.halfBufferSize ; tau++) {
  400e6a:	4574      	cmp	r4, lr
  400e6c:	f000 80a6 	beq.w	400fbc <Yin_getPitch+0x23c>
		if (yin.yinBuffer[tau] < yin.threshold) {
  400e70:	ecf3 7a01 	vldmia	r3!, {s15}
  400e74:	eef4 7ac7 	vcmpe.f32	s15, s14
  400e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400e7c:	d5f3      	bpl.n	400e66 <Yin_getPitch+0xe6>
			while (tau + 1 < yin.halfBufferSize && yin.yinBuffer[tau + 1] < yin.yinBuffer[tau]) {
  400e7e:	4672      	mov	r2, lr
  400e80:	1c63      	adds	r3, r4, #1
  400e82:	4573      	cmp	r3, lr
  400e84:	da1a      	bge.n	400ebc <Yin_getPitch+0x13c>
  400e86:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  400e8a:	ed13 7a01 	vldr	s14, [r3, #-4]
  400e8e:	edd3 7a00 	vldr	s15, [r3]
  400e92:	eeb4 7ae7 	vcmpe.f32	s14, s15
  400e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400e9a:	dd0f      	ble.n	400ebc <Yin_getPitch+0x13c>
  400e9c:	3401      	adds	r4, #1
  400e9e:	b224      	sxth	r4, r4
  400ea0:	1c63      	adds	r3, r4, #1
  400ea2:	4293      	cmp	r3, r2
  400ea4:	da0a      	bge.n	400ebc <Yin_getPitch+0x13c>
  400ea6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  400eaa:	ed93 7a00 	vldr	s14, [r3]
  400eae:	ed53 7a01 	vldr	s15, [r3, #-4]
  400eb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
  400eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400eba:	d4ef      	bmi.n	400e9c <Yin_getPitch+0x11c>
			yin.probability = 1 - yin.yinBuffer[tau];
  400ebc:	eb01 0384 	add.w	r3, r1, r4, lsl #2
  400ec0:	ed93 7a00 	vldr	s14, [r3]
  400ec4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  400ec8:	ee77 7ac7 	vsub.f32	s15, s15, s14
  400ecc:	4b5b      	ldr	r3, [pc, #364]	; (40103c <Yin_getPitch+0x2bc>)
  400ece:	edc3 7a02 	vstr	s15, [r3, #8]
	if (tau == yin.halfBufferSize || yin.yinBuffer[tau] >= yin.threshold) {
  400ed2:	4574      	cmp	r4, lr
  400ed4:	d072      	beq.n	400fbc <Yin_getPitch+0x23c>
  400ed6:	eb01 0384 	add.w	r3, r1, r4, lsl #2
  400eda:	ed93 8a00 	vldr	s16, [r3]
  400ede:	4b57      	ldr	r3, [pc, #348]	; (40103c <Yin_getPitch+0x2bc>)
  400ee0:	edd3 7a03 	vldr	s15, [r3, #12]
  400ee4:	eeb4 8ae7 	vcmpe.f32	s16, s15
  400ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400eec:	da66      	bge.n	400fbc <Yin_getPitch+0x23c>
	
	/* Step 3: Search through the normalised cumulative mean array and find values that are over the threshold */
	tauEstimate = Yin_absoluteThreshold();
	
	/* Step 5: Interpolate the shift value (tau) to improve the pitch estimate. */
	if(tauEstimate != -1){
  400eee:	f1b4 3fff 	cmp.w	r4, #4294967295
  400ef2:	f000 8081 	beq.w	400ff8 <Yin_getPitch+0x278>
	if (tauEstimate < 1) {
  400ef6:	2c00      	cmp	r4, #0
  400ef8:	f340 8084 	ble.w	401004 <Yin_getPitch+0x284>
		x0 = tauEstimate - 1;
  400efc:	1e63      	subs	r3, r4, #1
  400efe:	b21b      	sxth	r3, r3
	if (tauEstimate + 1 < yin.halfBufferSize) {
  400f00:	1c62      	adds	r2, r4, #1
  400f02:	4572      	cmp	r2, lr
  400f04:	f280 8082 	bge.w	40100c <Yin_getPitch+0x28c>
		x2 = tauEstimate + 1;
  400f08:	b212      	sxth	r2, r2
	if (x0 == tauEstimate) {
  400f0a:	429c      	cmp	r4, r3
  400f0c:	d05c      	beq.n	400fc8 <Yin_getPitch+0x248>
	else if (x2 == tauEstimate) {
  400f0e:	4294      	cmp	r4, r2
  400f10:	d05d      	beq.n	400fce <Yin_getPitch+0x24e>
		s0 = yin.yinBuffer[x0];
  400f12:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  400f16:	edd3 8a00 	vldr	s17, [r3]
		s2 = yin.yinBuffer[x2];
  400f1a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  400f1e:	ed92 9a00 	vldr	s18, [r2]
		betterTau = (float32_t)(tauEstimate) + (s2 - s0) / (2.0 * (2.0 * s1 - s2 - s0));
  400f22:	4d48      	ldr	r5, [pc, #288]	; (401044 <Yin_getPitch+0x2c4>)
  400f24:	ee79 7a68 	vsub.f32	s15, s18, s17
  400f28:	ee17 0a90 	vmov	r0, s15
  400f2c:	47a8      	blx	r5
  400f2e:	4682      	mov	sl, r0
  400f30:	468b      	mov	fp, r1
  400f32:	ee18 0a10 	vmov	r0, s16
  400f36:	47a8      	blx	r5
  400f38:	4e43      	ldr	r6, [pc, #268]	; (401048 <Yin_getPitch+0x2c8>)
  400f3a:	4602      	mov	r2, r0
  400f3c:	460b      	mov	r3, r1
  400f3e:	47b0      	blx	r6
  400f40:	4680      	mov	r8, r0
  400f42:	4689      	mov	r9, r1
  400f44:	ee19 0a10 	vmov	r0, s18
  400f48:	47a8      	blx	r5
  400f4a:	4f40      	ldr	r7, [pc, #256]	; (40104c <Yin_getPitch+0x2cc>)
  400f4c:	4602      	mov	r2, r0
  400f4e:	460b      	mov	r3, r1
  400f50:	4640      	mov	r0, r8
  400f52:	4649      	mov	r1, r9
  400f54:	47b8      	blx	r7
  400f56:	4680      	mov	r8, r0
  400f58:	4689      	mov	r9, r1
  400f5a:	ee18 0a90 	vmov	r0, s17
  400f5e:	47a8      	blx	r5
  400f60:	4602      	mov	r2, r0
  400f62:	460b      	mov	r3, r1
  400f64:	4640      	mov	r0, r8
  400f66:	4649      	mov	r1, r9
  400f68:	47b8      	blx	r7
  400f6a:	4602      	mov	r2, r0
  400f6c:	460b      	mov	r3, r1
  400f6e:	47b0      	blx	r6
  400f70:	4602      	mov	r2, r0
  400f72:	460b      	mov	r3, r1
  400f74:	4650      	mov	r0, sl
  400f76:	4659      	mov	r1, fp
  400f78:	4f35      	ldr	r7, [pc, #212]	; (401050 <Yin_getPitch+0x2d0>)
  400f7a:	47b8      	blx	r7
  400f7c:	4680      	mov	r8, r0
  400f7e:	4689      	mov	r9, r1
  400f80:	ee07 4a90 	vmov	s15, r4
  400f84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400f88:	ee17 0a90 	vmov	r0, s15
  400f8c:	47a8      	blx	r5
  400f8e:	4602      	mov	r2, r0
  400f90:	460b      	mov	r3, r1
  400f92:	4640      	mov	r0, r8
  400f94:	4649      	mov	r1, r9
  400f96:	47b0      	blx	r6
  400f98:	4b2e      	ldr	r3, [pc, #184]	; (401054 <Yin_getPitch+0x2d4>)
  400f9a:	4798      	blx	r3
  400f9c:	ee07 0a90 	vmov	s15, r0
		pitchInHertz = YIN_SAMPLING_RATE / Yin_parabolicInterpolation(tauEstimate);
  400fa0:	eddf 6a2d 	vldr	s13, [pc, #180]	; 401058 <Yin_getPitch+0x2d8>
  400fa4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	}
	return pitchInHertz;
}
  400fa8:	ee17 0a10 	vmov	r0, s14
  400fac:	ecbd 8b04 	vpop	{d8-d9}
  400fb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (yin.yinBuffer[tau] < yin.threshold) {
  400fb4:	2402      	movs	r4, #2
  400fb6:	e762      	b.n	400e7e <Yin_getPitch+0xfe>
	for (tau = 2; tau < yin.halfBufferSize ; tau++) {
  400fb8:	2402      	movs	r4, #2
  400fba:	e78a      	b.n	400ed2 <Yin_getPitch+0x152>
		yin.probability = 0;
  400fbc:	2200      	movs	r2, #0
  400fbe:	4b1f      	ldr	r3, [pc, #124]	; (40103c <Yin_getPitch+0x2bc>)
  400fc0:	609a      	str	r2, [r3, #8]
	float32_t pitchInHertz = -1;
  400fc2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  400fc6:	e7ef      	b.n	400fa8 <Yin_getPitch+0x228>
		x0 = tauEstimate - 1;
  400fc8:	461c      	mov	r4, r3
		x2 = tauEstimate + 1;
  400fca:	4613      	mov	r3, r2
  400fcc:	e021      	b.n	401012 <Yin_getPitch+0x292>
  400fce:	4614      	mov	r4, r2
		if (yin.yinBuffer[tauEstimate] <= yin.yinBuffer[x0]) {
  400fd0:	eb01 0284 	add.w	r2, r1, r4, lsl #2
  400fd4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  400fd8:	ed92 7a00 	vldr	s14, [r2]
  400fdc:	edd1 7a00 	vldr	s15, [r1]
  400fe0:	eeb4 7ae7 	vcmpe.f32	s14, s15
  400fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			betterTau = (float32_t)tauEstimate;
  400fe8:	bf94      	ite	ls
  400fea:	ee07 4a90 	vmovls	s15, r4
			betterTau = (float32_t)x0;
  400fee:	ee07 3a90 	vmovhi	s15, r3
  400ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400ff6:	e7d3      	b.n	400fa0 <Yin_getPitch+0x220>
	float32_t pitchInHertz = -1;
  400ff8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
	return pitchInHertz;
  400ffc:	e7d4      	b.n	400fa8 <Yin_getPitch+0x228>
		x2 = tauEstimate + 1;
  400ffe:	1c63      	adds	r3, r4, #1
  401000:	b21b      	sxth	r3, r3
  401002:	e006      	b.n	401012 <Yin_getPitch+0x292>
	if (tauEstimate + 1 < yin.halfBufferSize) {
  401004:	1c63      	adds	r3, r4, #1
  401006:	459e      	cmp	lr, r3
  401008:	dcf9      	bgt.n	400ffe <Yin_getPitch+0x27e>
  40100a:	4623      	mov	r3, r4
	if (x0 == tauEstimate) {
  40100c:	429c      	cmp	r4, r3
  40100e:	d1df      	bne.n	400fd0 <Yin_getPitch+0x250>
  401010:	461c      	mov	r4, r3
		if (yin.yinBuffer[tauEstimate] <= yin.yinBuffer[x2]) {
  401012:	eb01 0284 	add.w	r2, r1, r4, lsl #2
  401016:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  40101a:	ed92 7a00 	vldr	s14, [r2]
  40101e:	edd1 7a00 	vldr	s15, [r1]
  401022:	eeb4 7ae7 	vcmpe.f32	s14, s15
  401026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			betterTau = (float32_t)tauEstimate;
  40102a:	bf94      	ite	ls
  40102c:	ee07 4a90 	vmovls	s15, r4
			betterTau = (float32_t)x2;
  401030:	ee07 3a90 	vmovhi	s15, r3
  401034:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  401038:	e7b2      	b.n	400fa0 <Yin_getPitch+0x220>
  40103a:	bf00      	nop
  40103c:	20400a80 	.word	0x20400a80
  401040:	00000000 	.word	0x00000000
  401044:	00402d69 	.word	0x00402d69
  401048:	00402aad 	.word	0x00402aad
  40104c:	00402aa9 	.word	0x00402aa9
  401050:	00403065 	.word	0x00403065
  401054:	00403371 	.word	0x00403371
  401058:	46b5a400 	.word	0x46b5a400

0040105c <mxt_init_device>:
 * \param chgpin IOPORT pin instance attached to the maXTouch device's /CHG pin
 * \return Operation result status code
 */
status_code_t mxt_init_device(struct mxt_device *device,
		twihs_master_t interface, uint8_t chip_adr, uint32_t chgpin)
{
  40105c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40105e:	b087      	sub	sp, #28
  401060:	4604      	mov	r4, r0
  401062:	460e      	mov	r6, r1
  401064:	4617      	mov	r7, r2
	int8_t status;

	/* Set TWI interface, TWI address and CHG-pin of the maXTouch device. */
	device->interface = interface;
  401066:	6081      	str	r1, [r0, #8]
	device->mxt_chip_adr = chip_adr;
  401068:	7302      	strb	r2, [r0, #12]
	device->chgpin = chgpin;
  40106a:	6183      	str	r3, [r0, #24]
	device->handler = NULL;
  40106c:	2500      	movs	r5, #0
  40106e:	6105      	str	r5, [r0, #16]
			malloc(sizeof(struct mxt_info_object));
  401070:	2007      	movs	r0, #7
  401072:	4b9d      	ldr	r3, [pc, #628]	; (4012e8 <mxt_init_device+0x28c>)
  401074:	4798      	blx	r3
	device->info_object = (struct mxt_info_object *)
  401076:	6020      	str	r0, [r4, #0]
	twihs_package_t packet = {
  401078:	9501      	str	r5, [sp, #4]
  40107a:	9505      	str	r5, [sp, #20]
  40107c:	2302      	movs	r3, #2
  40107e:	9302      	str	r3, [sp, #8]
  401080:	9003      	str	r0, [sp, #12]
  401082:	2307      	movs	r3, #7
  401084:	9304      	str	r3, [sp, #16]
  401086:	f88d 7014 	strb.w	r7, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  40108a:	a901      	add	r1, sp, #4
  40108c:	4630      	mov	r0, r6
  40108e:	4b97      	ldr	r3, [pc, #604]	; (4012ec <mxt_init_device+0x290>)
  401090:	4798      	blx	r3
  401092:	1b40      	subs	r0, r0, r5
  401094:	bf18      	it	ne
  401096:	2001      	movne	r0, #1
  401098:	4240      	negs	r0, r0
	if ((status = mxt_read_id_block(device)) != STATUS_OK) {
  40109a:	b108      	cbz	r0, 4010a0 <mxt_init_device+0x44>
	}

	device->multitouch_report_offset = status;

	return STATUS_OK;
}
  40109c:	b007      	add	sp, #28
  40109e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			malloc(device->info_object->obj_count *
  4010a0:	6825      	ldr	r5, [r4, #0]
  4010a2:	79a8      	ldrb	r0, [r5, #6]
  4010a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4010a8:	0040      	lsls	r0, r0, #1
  4010aa:	4b8f      	ldr	r3, [pc, #572]	; (4012e8 <mxt_init_device+0x28c>)
  4010ac:	4798      	blx	r3
	device->object_list = (struct mxt_object *)
  4010ae:	6060      	str	r0, [r4, #4]
	twihs_package_t packet = {
  4010b0:	2300      	movs	r3, #0
  4010b2:	9301      	str	r3, [sp, #4]
  4010b4:	9304      	str	r3, [sp, #16]
  4010b6:	9305      	str	r3, [sp, #20]
  4010b8:	2307      	movs	r3, #7
  4010ba:	f88d 3004 	strb.w	r3, [sp, #4]
  4010be:	2302      	movs	r3, #2
  4010c0:	9302      	str	r3, [sp, #8]
  4010c2:	9003      	str	r0, [sp, #12]
		.length       = device->info_object->obj_count *
  4010c4:	79ab      	ldrb	r3, [r5, #6]
  4010c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4010ca:	005b      	lsls	r3, r3, #1
	twihs_package_t packet = {
  4010cc:	9304      	str	r3, [sp, #16]
  4010ce:	7b23      	ldrb	r3, [r4, #12]
  4010d0:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4010d4:	a901      	add	r1, sp, #4
  4010d6:	68a0      	ldr	r0, [r4, #8]
  4010d8:	4b84      	ldr	r3, [pc, #528]	; (4012ec <mxt_init_device+0x290>)
  4010da:	4798      	blx	r3
  4010dc:	3000      	adds	r0, #0
  4010de:	bf18      	it	ne
  4010e0:	2001      	movne	r0, #1
  4010e2:	4240      	negs	r0, r0
	if (status != STATUS_OK) {
  4010e4:	2800      	cmp	r0, #0
  4010e6:	d1d9      	bne.n	40109c <mxt_init_device+0x40>
	uint8_t *id_pointer = (uint8_t *)device->info_object;
  4010e8:	6827      	ldr	r7, [r4, #0]
	uint8_t *objects_pointer = (uint8_t *)device->object_list;
  4010ea:	6860      	ldr	r0, [r4, #4]
			(device->info_object->obj_count *
  4010ec:	79bb      	ldrb	r3, [r7, #6]
  4010ee:	eb03 0643 	add.w	r6, r3, r3, lsl #1
  4010f2:	0076      	lsls	r6, r6, #1
	crc_area_size = MXT_ID_BLOCK_SIZE +
  4010f4:	3607      	adds	r6, #7
  4010f6:	b2b6      	uxth	r6, r6
  4010f8:	463a      	mov	r2, r7
  4010fa:	3706      	adds	r7, #6
	uint32_t crc_tmp = 0;
  4010fc:	2100      	movs	r1, #0
		result ^= crcpoly;
  4010fe:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 4012f0 <mxt_init_device+0x294>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  401102:	f892 e001 	ldrb.w	lr, [r2, #1]
  401106:	7815      	ldrb	r5, [r2, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  401108:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
  40110c:	ea85 0141 	eor.w	r1, r5, r1, lsl #1
	if (result & 0x1000000) {
  401110:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
		result ^= crcpoly;
  401114:	bf18      	it	ne
  401116:	ea81 010c 	eorne.w	r1, r1, ip
  40111a:	3202      	adds	r2, #2
	for (i = 0; i < MXT_ID_BLOCK_SIZE - 1; i += 2) {
  40111c:	42ba      	cmp	r2, r7
  40111e:	d1f0      	bne.n	401102 <mxt_init_device+0xa6>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  401120:	7802      	ldrb	r2, [r0, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  401122:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401126:	ea83 0241 	eor.w	r2, r3, r1, lsl #1
	if (result & 0x1000000) {
  40112a:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  40112e:	d003      	beq.n	401138 <mxt_init_device+0xdc>
		result ^= crcpoly;
  401130:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  401134:	f082 021b 	eor.w	r2, r2, #27
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  401138:	f1a6 0708 	sub.w	r7, r6, #8
  40113c:	2f01      	cmp	r7, #1
  40113e:	dd12      	ble.n	401166 <mxt_init_device+0x10a>
  401140:	2301      	movs	r3, #1
		result ^= crcpoly;
  401142:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 4012f0 <mxt_init_device+0x294>
		crc_tmp = mxt_crc_24(crc_tmp, objects_pointer[i],
  401146:	18c1      	adds	r1, r0, r3
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  401148:	784d      	ldrb	r5, [r1, #1]
  40114a:	5cc1      	ldrb	r1, [r0, r3]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  40114c:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  401150:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
	if (result & 0x1000000) {
  401154:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		result ^= crcpoly;
  401158:	bf18      	it	ne
  40115a:	ea82 020e 	eorne.w	r2, r2, lr
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  40115e:	3302      	adds	r3, #2
  401160:	b29b      	uxth	r3, r3
  401162:	42bb      	cmp	r3, r7
  401164:	dbef      	blt.n	401146 <mxt_init_device+0xea>
	crc_tmp = mxt_crc_24(crc_tmp,
  401166:	4430      	add	r0, r6
	result = ((crc << 1u) ^ (uint32_t)data_word);
  401168:	f810 3c08 	ldrb.w	r3, [r0, #-8]
  40116c:	ea83 0242 	eor.w	r2, r3, r2, lsl #1
	if (result & 0x1000000) {
  401170:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  401174:	d003      	beq.n	40117e <mxt_init_device+0x122>
		result ^= crcpoly;
  401176:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  40117a:	f082 021b 	eor.w	r2, r2, #27
	*crc = (crc_tmp & 0x00FFFFFF);
  40117e:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	twihs_package_t packet = {
  401182:	2300      	movs	r3, #0
  401184:	9301      	str	r3, [sp, #4]
  401186:	9305      	str	r3, [sp, #20]
  401188:	f88d 6004 	strb.w	r6, [sp, #4]
  40118c:	0a36      	lsrs	r6, r6, #8
  40118e:	f88d 6005 	strb.w	r6, [sp, #5]
  401192:	2302      	movs	r3, #2
  401194:	9302      	str	r3, [sp, #8]
  401196:	f8cd d00c 	str.w	sp, [sp, #12]
  40119a:	2303      	movs	r3, #3
  40119c:	9304      	str	r3, [sp, #16]
  40119e:	7b23      	ldrb	r3, [r4, #12]
  4011a0:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4011a4:	a901      	add	r1, sp, #4
  4011a6:	68a0      	ldr	r0, [r4, #8]
  4011a8:	4b50      	ldr	r3, [pc, #320]	; (4012ec <mxt_init_device+0x290>)
  4011aa:	4798      	blx	r3
  4011ac:	b328      	cbz	r0, 4011fa <mxt_init_device+0x19e>
		return ERR_IO_ERROR;
  4011ae:	f04f 33ff 	mov.w	r3, #4294967295
	if (crc_calculated != crc_read) {
  4011b2:	42ab      	cmp	r3, r5
  4011b4:	f040 808b 	bne.w	4012ce <mxt_init_device+0x272>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4011b8:	6825      	ldr	r5, [r4, #0]
  4011ba:	79a8      	ldrb	r0, [r5, #6]
  4011bc:	b198      	cbz	r0, 4011e6 <mxt_init_device+0x18a>
  4011be:	2300      	movs	r3, #0
  4011c0:	3301      	adds	r3, #1
  4011c2:	b2da      	uxtb	r2, r3
  4011c4:	4290      	cmp	r0, r2
  4011c6:	d8fb      	bhi.n	4011c0 <mxt_init_device+0x164>
		tot_report_ids += (device->object_list[i].num_report_ids);
  4011c8:	6862      	ldr	r2, [r4, #4]
  4011ca:	1e43      	subs	r3, r0, #1
  4011cc:	b2db      	uxtb	r3, r3
  4011ce:	3301      	adds	r3, #1
  4011d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4011d4:	eb02 0143 	add.w	r1, r2, r3, lsl #1
  4011d8:	2000      	movs	r0, #0
  4011da:	7953      	ldrb	r3, [r2, #5]
  4011dc:	4418      	add	r0, r3
  4011de:	b2c0      	uxtb	r0, r0
  4011e0:	3206      	adds	r2, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4011e2:	4291      	cmp	r1, r2
  4011e4:	d1f9      	bne.n	4011da <mxt_init_device+0x17e>
			malloc(sizeof(struct mxt_report_id_map) *
  4011e6:	0040      	lsls	r0, r0, #1
  4011e8:	4b3f      	ldr	r3, [pc, #252]	; (4012e8 <mxt_init_device+0x28c>)
  4011ea:	4798      	blx	r3
	device->report_id_map = (struct mxt_report_id_map *)
  4011ec:	6160      	str	r0, [r4, #20]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4011ee:	79ab      	ldrb	r3, [r5, #6]
  4011f0:	b173      	cbz	r3, 401210 <mxt_init_device+0x1b4>
  4011f2:	2700      	movs	r7, #0
  4011f4:	2601      	movs	r6, #1
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  4011f6:	46be      	mov	lr, r7
  4011f8:	e037      	b.n	40126a <mxt_init_device+0x20e>
		return ((uint32_t)crc[2] << 16) | ((uint16_t)crc[1] << 8) | crc[0];
  4011fa:	f89d 2002 	ldrb.w	r2, [sp, #2]
  4011fe:	f89d 3000 	ldrb.w	r3, [sp]
  401202:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  401206:	f89d 2001 	ldrb.w	r2, [sp, #1]
  40120a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40120e:	e7d0      	b.n	4011b2 <mxt_init_device+0x156>
		return ERR_BAD_DATA;
  401210:	f06f 0003 	mvn.w	r0, #3
  401214:	e742      	b.n	40109c <mxt_init_device+0x40>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  401216:	3001      	adds	r0, #1
  401218:	b2c0      	uxtb	r0, r0
  40121a:	6862      	ldr	r2, [r4, #4]
  40121c:	1953      	adds	r3, r2, r5
  40121e:	7919      	ldrb	r1, [r3, #4]
  401220:	4281      	cmp	r1, r0
  401222:	d31c      	bcc.n	40125e <mxt_init_device+0x202>
			if (device->object_list[i].num_report_ids != 0) {
  401224:	795b      	ldrb	r3, [r3, #5]
  401226:	2b00      	cmp	r3, #0
  401228:	d0f5      	beq.n	401216 <mxt_init_device+0x1ba>
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  40122a:	6862      	ldr	r2, [r4, #4]
  40122c:	442a      	add	r2, r5
  40122e:	7953      	ldrb	r3, [r2, #5]
  401230:	2b00      	cmp	r3, #0
  401232:	d0f0      	beq.n	401216 <mxt_init_device+0x1ba>
  401234:	4633      	mov	r3, r6
							device->object_list[i].type;
  401236:	7811      	ldrb	r1, [r2, #0]
					device->report_id_map[id_index].object_type =
  401238:	6962      	ldr	r2, [r4, #20]
  40123a:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
					device->report_id_map[id_index].instance = j;
  40123e:	6962      	ldr	r2, [r4, #20]
  401240:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  401244:	7050      	strb	r0, [r2, #1]
					id_index++;
  401246:	3301      	adds	r3, #1
  401248:	b2db      	uxtb	r3, r3
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  40124a:	6862      	ldr	r2, [r4, #4]
  40124c:	442a      	add	r2, r5
  40124e:	1b99      	subs	r1, r3, r6
  401250:	f892 c005 	ldrb.w	ip, [r2, #5]
  401254:	b2c9      	uxtb	r1, r1
  401256:	458c      	cmp	ip, r1
  401258:	d8ed      	bhi.n	401236 <mxt_init_device+0x1da>
					id_index++;
  40125a:	461e      	mov	r6, r3
  40125c:	e7db      	b.n	401216 <mxt_init_device+0x1ba>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40125e:	3701      	adds	r7, #1
  401260:	b2ff      	uxtb	r7, r7
  401262:	6823      	ldr	r3, [r4, #0]
  401264:	799b      	ldrb	r3, [r3, #6]
  401266:	429f      	cmp	r7, r3
  401268:	d207      	bcs.n	40127a <mxt_init_device+0x21e>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  40126a:	eb07 0347 	add.w	r3, r7, r7, lsl #1
  40126e:	005a      	lsls	r2, r3, #1
  401270:	4615      	mov	r5, r2
  401272:	6863      	ldr	r3, [r4, #4]
  401274:	4413      	add	r3, r2
  401276:	4670      	mov	r0, lr
  401278:	e7d4      	b.n	401224 <mxt_init_device+0x1c8>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40127a:	b35b      	cbz	r3, 4012d4 <mxt_init_device+0x278>
  40127c:	4610      	mov	r0, r2
  40127e:	3b01      	subs	r3, #1
  401280:	b2db      	uxtb	r3, r3
  401282:	3301      	adds	r3, #1
  401284:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  401288:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  40128c:	2100      	movs	r1, #0
		tot_report_ids += (device->object_list[i].num_report_ids);
  40128e:	7943      	ldrb	r3, [r0, #5]
  401290:	4419      	add	r1, r3
  401292:	b2c9      	uxtb	r1, r1
  401294:	3006      	adds	r0, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401296:	4282      	cmp	r2, r0
  401298:	d1f9      	bne.n	40128e <mxt_init_device+0x232>
	for (i = 0; i < tot_rpt_id; ++i) {
  40129a:	b1f1      	cbz	r1, 4012da <mxt_init_device+0x27e>
		if (device->report_id_map[i].object_type == object_type) {
  40129c:	6962      	ldr	r2, [r4, #20]
  40129e:	7813      	ldrb	r3, [r2, #0]
  4012a0:	2b09      	cmp	r3, #9
  4012a2:	d00f      	beq.n	4012c4 <mxt_init_device+0x268>
  4012a4:	2300      	movs	r3, #0
	for (i = 0; i < tot_rpt_id; ++i) {
  4012a6:	3301      	adds	r3, #1
  4012a8:	b2db      	uxtb	r3, r3
  4012aa:	428b      	cmp	r3, r1
  4012ac:	d00c      	beq.n	4012c8 <mxt_init_device+0x26c>
		if (device->report_id_map[i].object_type == object_type) {
  4012ae:	f812 0f02 	ldrb.w	r0, [r2, #2]!
  4012b2:	2809      	cmp	r0, #9
  4012b4:	d1f7      	bne.n	4012a6 <mxt_init_device+0x24a>
			return i;
  4012b6:	b25b      	sxtb	r3, r3
	if (status == -1) {
  4012b8:	f1b3 3fff 	cmp.w	r3, #4294967295
  4012bc:	d010      	beq.n	4012e0 <mxt_init_device+0x284>
	device->multitouch_report_offset = status;
  4012be:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
  4012c0:	2000      	movs	r0, #0
  4012c2:	e6eb      	b.n	40109c <mxt_init_device+0x40>
		if (device->report_id_map[i].object_type == object_type) {
  4012c4:	2300      	movs	r3, #0
  4012c6:	e7f6      	b.n	4012b6 <mxt_init_device+0x25a>
		return ERR_BAD_DATA;
  4012c8:	f06f 0003 	mvn.w	r0, #3
  4012cc:	e6e6      	b.n	40109c <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  4012ce:	f06f 0003 	mvn.w	r0, #3
  4012d2:	e6e3      	b.n	40109c <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  4012d4:	f06f 0003 	mvn.w	r0, #3
  4012d8:	e6e0      	b.n	40109c <mxt_init_device+0x40>
  4012da:	f06f 0003 	mvn.w	r0, #3
  4012de:	e6dd      	b.n	40109c <mxt_init_device+0x40>
  4012e0:	f06f 0003 	mvn.w	r0, #3
  4012e4:	e6da      	b.n	40109c <mxt_init_device+0x40>
  4012e6:	bf00      	nop
  4012e8:	00403489 	.word	0x00403489
  4012ec:	00401c55 	.word	0x00401c55
  4012f0:	0080001b 	.word	0x0080001b

004012f4 <mxt_get_object_address>:
uint16_t mxt_get_object_address(struct mxt_device *device, uint8_t object_id,
		uint8_t instance)
{
	uint8_t i;

	for (i = 0; i < device->info_object->obj_count; i++) {
  4012f4:	6803      	ldr	r3, [r0, #0]
  4012f6:	799a      	ldrb	r2, [r3, #6]
  4012f8:	b1d2      	cbz	r2, 401330 <mxt_get_object_address+0x3c>
{
  4012fa:	b410      	push	{r4}
		if (object_id == device->object_list[i].type) {
  4012fc:	6844      	ldr	r4, [r0, #4]
  4012fe:	7823      	ldrb	r3, [r4, #0]
  401300:	428b      	cmp	r3, r1
  401302:	d00e      	beq.n	401322 <mxt_get_object_address+0x2e>
  401304:	1da3      	adds	r3, r4, #6
  401306:	3a01      	subs	r2, #1
  401308:	b2d2      	uxtb	r2, r2
  40130a:	3201      	adds	r2, #1
  40130c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  401310:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; i++) {
  401314:	4293      	cmp	r3, r2
  401316:	d009      	beq.n	40132c <mxt_get_object_address+0x38>
		if (object_id == device->object_list[i].type) {
  401318:	461c      	mov	r4, r3
  40131a:	f813 0b06 	ldrb.w	r0, [r3], #6
  40131e:	4288      	cmp	r0, r1
  401320:	d1f8      	bne.n	401314 <mxt_get_object_address+0x20>
			return device->object_list[i].start_address;
  401322:	f8b4 0001 	ldrh.w	r0, [r4, #1]
		}
	}

	return 0;
}
  401326:	f85d 4b04 	ldr.w	r4, [sp], #4
  40132a:	4770      	bx	lr
	return 0;
  40132c:	2000      	movs	r0, #0
  40132e:	e7fa      	b.n	401326 <mxt_get_object_address+0x32>
  401330:	2000      	movs	r0, #0
  401332:	4770      	bx	lr

00401334 <mxt_write_config_object>:
 * \param *obj_data Pointer to memory buffer containing object data
 * \result Operation result status code
 */
status_code_t mxt_write_config_object(struct mxt_device *device,
		mxt_memory_adr memory_adr, void *obj_data)
{
  401334:	b530      	push	{r4, r5, lr}
  401336:	b087      	sub	sp, #28
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  401338:	2300      	movs	r3, #0
  40133a:	9301      	str	r3, [sp, #4]
  40133c:	9304      	str	r3, [sp, #16]
  40133e:	9305      	str	r3, [sp, #20]
  401340:	f88d 1004 	strb.w	r1, [sp, #4]
  401344:	0a0b      	lsrs	r3, r1, #8
  401346:	f88d 3005 	strb.w	r3, [sp, #5]
  40134a:	2302      	movs	r3, #2
  40134c:	9302      	str	r3, [sp, #8]
  40134e:	9203      	str	r2, [sp, #12]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401350:	6803      	ldr	r3, [r0, #0]
  401352:	799a      	ldrb	r2, [r3, #6]
  401354:	b1ba      	cbz	r2, 401386 <mxt_write_config_object+0x52>
		if (device->object_list[i].start_address == mem_adr) {
  401356:	6844      	ldr	r4, [r0, #4]
  401358:	f8b4 3001 	ldrh.w	r3, [r4, #1]
  40135c:	428b      	cmp	r3, r1
  40135e:	d00f      	beq.n	401380 <mxt_write_config_object+0x4c>
  401360:	1da3      	adds	r3, r4, #6
  401362:	3a01      	subs	r2, #1
  401364:	b2d2      	uxtb	r2, r2
  401366:	3201      	adds	r2, #1
  401368:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  40136c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401370:	4293      	cmp	r3, r2
  401372:	d016      	beq.n	4013a2 <mxt_write_config_object+0x6e>
		if (device->object_list[i].start_address == mem_adr) {
  401374:	461c      	mov	r4, r3
  401376:	3306      	adds	r3, #6
  401378:	f8b4 5001 	ldrh.w	r5, [r4, #1]
  40137c:	428d      	cmp	r5, r1
  40137e:	d1f7      	bne.n	401370 <mxt_write_config_object+0x3c>
			return (device->object_list[i].size + 1);
  401380:	78e2      	ldrb	r2, [r4, #3]
  401382:	3201      	adds	r2, #1
  401384:	b2d2      	uxtb	r2, r2
		.addr[0]      = memory_adr,
		.addr[1]      = memory_adr >> 8,
		.addr_length  = sizeof(mxt_memory_adr),
		.chip         = device->mxt_chip_adr,
		.buffer       = obj_data,
		.length       = mxt_get_object_size(device, memory_adr)
  401386:	9204      	str	r2, [sp, #16]
	twihs_package_t packet = {
  401388:	7b03      	ldrb	r3, [r0, #12]
  40138a:	f88d 3014 	strb.w	r3, [sp, #20]
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  40138e:	a901      	add	r1, sp, #4
  401390:	6880      	ldr	r0, [r0, #8]
  401392:	4b05      	ldr	r3, [pc, #20]	; (4013a8 <mxt_write_config_object+0x74>)
  401394:	4798      	blx	r3
  401396:	3000      	adds	r0, #0
  401398:	bf18      	it	ne
  40139a:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}

}
  40139c:	4240      	negs	r0, r0
  40139e:	b007      	add	sp, #28
  4013a0:	bd30      	pop	{r4, r5, pc}
	return 0;
  4013a2:	2200      	movs	r2, #0
  4013a4:	e7ef      	b.n	401386 <mxt_write_config_object+0x52>
  4013a6:	bf00      	nop
  4013a8:	00401d01 	.word	0x00401d01

004013ac <mxt_write_config_reg>:
 * \param value Value to be written to register
 * \result Operation result status code
 */
status_code_t mxt_write_config_reg(struct mxt_device *device,
		mxt_memory_adr memory_adr, uint8_t value)
{
  4013ac:	b500      	push	{lr}
  4013ae:	b089      	sub	sp, #36	; 0x24
  4013b0:	f88d 2007 	strb.w	r2, [sp, #7]
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  4013b4:	2300      	movs	r3, #0
  4013b6:	9303      	str	r3, [sp, #12]
  4013b8:	9307      	str	r3, [sp, #28]
  4013ba:	f88d 100c 	strb.w	r1, [sp, #12]
  4013be:	0a09      	lsrs	r1, r1, #8
  4013c0:	f88d 100d 	strb.w	r1, [sp, #13]
  4013c4:	2302      	movs	r3, #2
  4013c6:	9304      	str	r3, [sp, #16]
  4013c8:	f10d 0307 	add.w	r3, sp, #7
  4013cc:	9305      	str	r3, [sp, #20]
  4013ce:	2301      	movs	r3, #1
  4013d0:	9306      	str	r3, [sp, #24]
  4013d2:	7b03      	ldrb	r3, [r0, #12]
  4013d4:	f88d 301c 	strb.w	r3, [sp, #28]
		.chip         = device->mxt_chip_adr,
		.buffer       = &value,
		.length       = sizeof(value)
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  4013d8:	a903      	add	r1, sp, #12
  4013da:	6880      	ldr	r0, [r0, #8]
  4013dc:	4b04      	ldr	r3, [pc, #16]	; (4013f0 <mxt_write_config_reg+0x44>)
  4013de:	4798      	blx	r3
  4013e0:	3000      	adds	r0, #0
  4013e2:	bf18      	it	ne
  4013e4:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}
}
  4013e6:	4240      	negs	r0, r0
  4013e8:	b009      	add	sp, #36	; 0x24
  4013ea:	f85d fb04 	ldr.w	pc, [sp], #4
  4013ee:	bf00      	nop
  4013f0:	00401d01 	.word	0x00401d01

004013f4 <mxt_read_message>:
 * \param *message Pointer to mxt_message instance
 * \return Operation result status code
 */
status_code_t mxt_read_message(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
  4013f4:	b530      	push	{r4, r5, lr}
  4013f6:	b087      	sub	sp, #28
  4013f8:	4604      	mov	r4, r0
  4013fa:	460d      	mov	r5, r1
	uint16_t obj_adr = mxt_get_object_address(device,
  4013fc:	2200      	movs	r2, #0
  4013fe:	2105      	movs	r1, #5
  401400:	4b0d      	ldr	r3, [pc, #52]	; (401438 <mxt_read_message+0x44>)
  401402:	4798      	blx	r3
			MXT_GEN_MESSAGEPROCESSOR_T5, 0);

	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  401404:	2300      	movs	r3, #0
  401406:	9301      	str	r3, [sp, #4]
  401408:	9305      	str	r3, [sp, #20]
  40140a:	f88d 0004 	strb.w	r0, [sp, #4]
  40140e:	0a00      	lsrs	r0, r0, #8
  401410:	f88d 0005 	strb.w	r0, [sp, #5]
  401414:	2302      	movs	r3, #2
  401416:	9302      	str	r3, [sp, #8]
  401418:	9503      	str	r5, [sp, #12]
  40141a:	2309      	movs	r3, #9
  40141c:	9304      	str	r3, [sp, #16]
  40141e:	7b23      	ldrb	r3, [r4, #12]
  401420:	f88d 3014 	strb.w	r3, [sp, #20]
		.buffer       = message,
		.length       = MXT_TWI_MSG_SIZE_T5
	};

	/* Read information from the slave */
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  401424:	a901      	add	r1, sp, #4
  401426:	68a0      	ldr	r0, [r4, #8]
  401428:	4b04      	ldr	r3, [pc, #16]	; (40143c <mxt_read_message+0x48>)
  40142a:	4798      	blx	r3
  40142c:	3000      	adds	r0, #0
  40142e:	bf18      	it	ne
  401430:	2001      	movne	r0, #1
		return mxt_validate_message(&packet);
#else
		return STATUS_OK;
#endif
	}
}
  401432:	4240      	negs	r0, r0
  401434:	b007      	add	sp, #28
  401436:	bd30      	pop	{r4, r5, pc}
  401438:	004012f5 	.word	0x004012f5
  40143c:	00401c55 	.word	0x00401c55

00401440 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  401440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  401444:	b980      	cbnz	r0, 401468 <_read+0x28>
  401446:	460c      	mov	r4, r1
  401448:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40144a:	2a00      	cmp	r2, #0
  40144c:	dd0f      	ble.n	40146e <_read+0x2e>
  40144e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  401450:	4e08      	ldr	r6, [pc, #32]	; (401474 <_read+0x34>)
  401452:	4d09      	ldr	r5, [pc, #36]	; (401478 <_read+0x38>)
  401454:	6830      	ldr	r0, [r6, #0]
  401456:	4621      	mov	r1, r4
  401458:	682b      	ldr	r3, [r5, #0]
  40145a:	4798      	blx	r3
		ptr++;
  40145c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  40145e:	42bc      	cmp	r4, r7
  401460:	d1f8      	bne.n	401454 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  401462:	4640      	mov	r0, r8
  401464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  401468:	f04f 38ff 	mov.w	r8, #4294967295
  40146c:	e7f9      	b.n	401462 <_read+0x22>
	for (; len > 0; --len) {
  40146e:	4680      	mov	r8, r0
  401470:	e7f7      	b.n	401462 <_read+0x22>
  401472:	bf00      	nop
  401474:	20402fdc 	.word	0x20402fdc
  401478:	20402fd4 	.word	0x20402fd4

0040147c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  40147c:	3801      	subs	r0, #1
  40147e:	2802      	cmp	r0, #2
  401480:	d815      	bhi.n	4014ae <_write+0x32>
{
  401482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401486:	460e      	mov	r6, r1
  401488:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  40148a:	b19a      	cbz	r2, 4014b4 <_write+0x38>
  40148c:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40148e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4014c8 <_write+0x4c>
  401492:	4f0c      	ldr	r7, [pc, #48]	; (4014c4 <_write+0x48>)
  401494:	f8d8 0000 	ldr.w	r0, [r8]
  401498:	f815 1b01 	ldrb.w	r1, [r5], #1
  40149c:	683b      	ldr	r3, [r7, #0]
  40149e:	4798      	blx	r3
  4014a0:	2800      	cmp	r0, #0
  4014a2:	db0a      	blt.n	4014ba <_write+0x3e>
  4014a4:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4014a6:	3c01      	subs	r4, #1
  4014a8:	d1f4      	bne.n	401494 <_write+0x18>
  4014aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4014ae:	f04f 30ff 	mov.w	r0, #4294967295
  4014b2:	4770      	bx	lr
	for (; len != 0; --len) {
  4014b4:	4610      	mov	r0, r2
  4014b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4014ba:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4014be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4014c2:	bf00      	nop
  4014c4:	20402fd8 	.word	0x20402fd8
  4014c8:	20402fdc 	.word	0x20402fdc

004014cc <wm8904_write_register>:
 *
 * \param uc_register_address Register address to write
 * \param us_data Data to write.
 */
void wm8904_write_register(uint8_t uc_register_address, uint16_t us_data)
{
  4014cc:	b500      	push	{lr}
  4014ce:	b087      	sub	sp, #28
	uint8_t uc_temp_data[2];
	twihs_packet_t packet;

	uc_temp_data[0] = (us_data & 0xff00) >> 8;
  4014d0:	0a0b      	lsrs	r3, r1, #8
  4014d2:	f88d 3014 	strb.w	r3, [sp, #20]
	uc_temp_data[1] = us_data & 0xff;
  4014d6:	f88d 1015 	strb.w	r1, [sp, #21]

	packet.addr[0]     = uc_register_address;
  4014da:	f88d 0000 	strb.w	r0, [sp]
	packet.addr_length = 0x1;
  4014de:	2301      	movs	r3, #1
  4014e0:	9301      	str	r3, [sp, #4]
	packet.buffer      = uc_temp_data;
  4014e2:	ab05      	add	r3, sp, #20
  4014e4:	9302      	str	r3, [sp, #8]
	packet.length      = 0x2;
  4014e6:	2302      	movs	r3, #2
  4014e8:	9303      	str	r3, [sp, #12]
	packet.chip        = WM8904_SLAVE_ADDRESS;
  4014ea:	231a      	movs	r3, #26
  4014ec:	f88d 3010 	strb.w	r3, [sp, #16]

	twihs_master_write(WM8904_TWIHS, &packet);
  4014f0:	4669      	mov	r1, sp
  4014f2:	4803      	ldr	r0, [pc, #12]	; (401500 <wm8904_write_register+0x34>)
  4014f4:	4b03      	ldr	r3, [pc, #12]	; (401504 <wm8904_write_register+0x38>)
  4014f6:	4798      	blx	r3
}
  4014f8:	b007      	add	sp, #28
  4014fa:	f85d fb04 	ldr.w	pc, [sp], #4
  4014fe:	bf00      	nop
  401500:	40018000 	.word	0x40018000
  401504:	00401d01 	.word	0x00401d01

00401508 <wm8904_read_register>:
 *
 * \param uc_register_address Register address to write
 * \retun Register value.
 */
uint16_t wm8904_read_register(uint8_t uc_register_address)
{
  401508:	b500      	push	{lr}
  40150a:	b087      	sub	sp, #28
	uint8_t uc_temp_data[2];
	twihs_packet_t packet;
	uint16_t us_data;

	packet.addr[0]     = uc_register_address;
  40150c:	f88d 0000 	strb.w	r0, [sp]
	packet.addr_length = 0x1;
  401510:	2301      	movs	r3, #1
  401512:	9301      	str	r3, [sp, #4]
	packet.buffer      = uc_temp_data;
  401514:	ab05      	add	r3, sp, #20
  401516:	9302      	str	r3, [sp, #8]
	packet.length      = 0x2;
  401518:	2302      	movs	r3, #2
  40151a:	9303      	str	r3, [sp, #12]
	packet.chip        = WM8904_SLAVE_ADDRESS;
  40151c:	231a      	movs	r3, #26
  40151e:	f88d 3010 	strb.w	r3, [sp, #16]

	twihs_master_read(WM8904_TWIHS, &packet);
  401522:	4669      	mov	r1, sp
  401524:	4805      	ldr	r0, [pc, #20]	; (40153c <wm8904_read_register+0x34>)
  401526:	4b06      	ldr	r3, [pc, #24]	; (401540 <wm8904_read_register+0x38>)
  401528:	4798      	blx	r3
	us_data = (((uint16_t)uc_temp_data[0] << 8) & 0xff00) | uc_temp_data[1];
  40152a:	f89d 0014 	ldrb.w	r0, [sp, #20]
  40152e:	f89d 3015 	ldrb.w	r3, [sp, #21]

	return us_data;
}
  401532:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  401536:	b007      	add	sp, #28
  401538:	f85d fb04 	ldr.w	pc, [sp], #4
  40153c:	40018000 	.word	0x40018000
  401540:	00401c55 	.word	0x00401c55

00401544 <wm8904_twi_init>:
 * \brief Initialize TWIHS connect to WM8904.
 *
 * \retun TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t wm8904_twi_init(void)
{
  401544:	b510      	push	{r4, lr}
  401546:	b084      	sub	sp, #16
	pio_configure_pin(WM8904_TK_PIO, WM8904_TK_FLAGS);
  401548:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40154c:	2021      	movs	r0, #33	; 0x21
  40154e:	4c15      	ldr	r4, [pc, #84]	; (4015a4 <wm8904_twi_init+0x60>)
  401550:	47a0      	blx	r4
	pio_configure_pin(WM8904_TF_PIO, WM8904_TF_FLAGS);
  401552:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401556:	2020      	movs	r0, #32
  401558:	47a0      	blx	r4
	pio_configure_pin(WM8904_TD_PIO, WM8904_TD_FLAGS);
  40155a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40155e:	207a      	movs	r0, #122	; 0x7a
  401560:	47a0      	blx	r4
	pio_configure_pin(WM8904_RK_PIO, WM8904_RK_FLAGS);
  401562:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401566:	2016      	movs	r0, #22
  401568:	47a0      	blx	r4
	pio_configure_pin(WM8904_RF_PIO, WM8904_RF_FLAGS);
  40156a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40156e:	2078      	movs	r0, #120	; 0x78
  401570:	47a0      	blx	r4
	pio_configure_pin(WM8904_RD_PIO, WM8904_RD_FLAGS);
  401572:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401576:	200a      	movs	r0, #10
  401578:	47a0      	blx	r4
	pio_configure_pin(WM8904_PCK2_PIO, WM8904_PCK2_FLAGS);
  40157a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40157e:	2012      	movs	r0, #18
  401580:	47a0      	blx	r4

	twihs_options_t opt;
	opt.master_clk = sysclk_get_cpu_hz();
	opt.speed = WM8904_TWIHS_CLK;
  401582:	4b09      	ldr	r3, [pc, #36]	; (4015a8 <wm8904_twi_init+0x64>)
  401584:	9302      	str	r3, [sp, #8]
	p_opt->master_clk = sysclk_get_peripheral_hz();
  401586:	4b09      	ldr	r3, [pc, #36]	; (4015ac <wm8904_twi_init+0x68>)
  401588:	9301      	str	r3, [sp, #4]
	p_opt->smbus      = 0;
  40158a:	2300      	movs	r3, #0
  40158c:	f88d 300d 	strb.w	r3, [sp, #13]
  401590:	2013      	movs	r0, #19
  401592:	4b07      	ldr	r3, [pc, #28]	; (4015b0 <wm8904_twi_init+0x6c>)
  401594:	4798      	blx	r3
	return (twihs_master_init(p_twihs, p_opt));
  401596:	a901      	add	r1, sp, #4
  401598:	4806      	ldr	r0, [pc, #24]	; (4015b4 <wm8904_twi_init+0x70>)
  40159a:	4b07      	ldr	r3, [pc, #28]	; (4015b8 <wm8904_twi_init+0x74>)
  40159c:	4798      	blx	r3
	return twihs_master_setup(WM8904_TWIHS, &opt);
}
  40159e:	b004      	add	sp, #16
  4015a0:	bd10      	pop	{r4, pc}
  4015a2:	bf00      	nop
  4015a4:	00402305 	.word	0x00402305
  4015a8:	00061a80 	.word	0x00061a80
  4015ac:	08f0d180 	.word	0x08f0d180
  4015b0:	00402609 	.word	0x00402609
  4015b4:	40018000 	.word	0x40018000
  4015b8:	00401c21 	.word	0x00401c21

004015bc <ili9488_write_ram_prepare>:

/**
 * \brief Prepare to write GRAM data.
 */
static void ili9488_write_ram_prepare(void)
{
  4015bc:	b508      	push	{r3, lr}
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  4015be:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4015c2:	4804      	ldr	r0, [pc, #16]	; (4015d4 <ili9488_write_ram_prepare+0x18>)
  4015c4:	4b04      	ldr	r3, [pc, #16]	; (4015d8 <ili9488_write_ram_prepare+0x1c>)
  4015c6:	4798      	blx	r3
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  4015c8:	222c      	movs	r2, #44	; 0x2c
  4015ca:	f04f 43c6 	mov.w	r3, #1660944384	; 0x63000000
  4015ce:	801a      	strh	r2, [r3, #0]
  4015d0:	bd08      	pop	{r3, pc}
  4015d2:	bf00      	nop
  4015d4:	400e1200 	.word	0x400e1200
  4015d8:	00402179 	.word	0x00402179

004015dc <ili9488_write_register>:
 * \param uc_reg register address.
 * \param us_data data to be written.
 * \param size the number of parameters.
 */
static void ili9488_write_register(uint8_t uc_reg, const ili9488_color_t *us_data, uint32_t size)
{
  4015dc:	b570      	push	{r4, r5, r6, lr}
  4015de:	4606      	mov	r6, r0
  4015e0:	460d      	mov	r5, r1
  4015e2:	4614      	mov	r4, r2
	/* CDS pin is set low level when writing command*/
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  4015e4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4015e8:	480c      	ldr	r0, [pc, #48]	; (40161c <ili9488_write_register+0x40>)
  4015ea:	4b0d      	ldr	r3, [pc, #52]	; (401620 <ili9488_write_register+0x44>)
  4015ec:	4798      	blx	r3
  4015ee:	b2b6      	uxth	r6, r6
  4015f0:	f04f 43c6 	mov.w	r3, #1660944384	; 0x63000000
  4015f4:	801e      	strh	r6, [r3, #0]
	LCD_IR(uc_reg);

	if(size == 0) {
  4015f6:	b904      	cbnz	r4, 4015fa <ili9488_write_register+0x1e>
  4015f8:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	/* CDS pin is set high level when writing parameters or image data*/
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  4015fa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4015fe:	4807      	ldr	r0, [pc, #28]	; (40161c <ili9488_write_register+0x40>)
  401600:	4b08      	ldr	r3, [pc, #32]	; (401624 <ili9488_write_register+0x48>)
  401602:	4798      	blx	r3
		while(size--) {
  401604:	1e62      	subs	r2, r4, #1
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  401606:	f04f 41c6 	mov.w	r1, #1660944384	; 0x63000000
  40160a:	f835 3b02 	ldrh.w	r3, [r5], #2
  40160e:	800b      	strh	r3, [r1, #0]
		while(size--) {
  401610:	3a01      	subs	r2, #1
  401612:	f1b2 3fff 	cmp.w	r2, #4294967295
  401616:	d1f8      	bne.n	40160a <ili9488_write_register+0x2e>
  401618:	e7ee      	b.n	4015f8 <ili9488_write_register+0x1c>
  40161a:	bf00      	nop
  40161c:	400e1200 	.word	0x400e1200
  401620:	00402179 	.word	0x00402179
  401624:	00402175 	.word	0x00402175

00401628 <ili9488_delay>:
 */
void ili9488_delay(uint32_t ul_ms)
{
	uint32_t i;

	for(i = 0; i < ul_ms; i++) {
  401628:	4601      	mov	r1, r0
  40162a:	b130      	cbz	r0, 40163a <ili9488_delay+0x12>
  40162c:	4a03      	ldr	r2, [pc, #12]	; (40163c <ili9488_delay+0x14>)
{
  40162e:	4b04      	ldr	r3, [pc, #16]	; (401640 <ili9488_delay+0x18>)
		for(i = 0; i < 100000; i++) {
  401630:	3b01      	subs	r3, #1
  401632:	d1fd      	bne.n	401630 <ili9488_delay+0x8>
	for(i = 0; i < ul_ms; i++) {
  401634:	4291      	cmp	r1, r2
  401636:	d8fa      	bhi.n	40162e <ili9488_delay+0x6>
  401638:	4770      	bx	lr
  40163a:	4770      	bx	lr
  40163c:	000186a1 	.word	0x000186a1
  401640:	000186a0 	.word	0x000186a0

00401644 <ili9488_set_display_direction>:
 * \brief ILI9488 configure landscape.
 *
 * \Param LandscaprMode Landscape Mode.
 */
void ili9488_set_display_direction(enum ili9488_display_direction direction )
{
  401644:	b500      	push	{lr}
  401646:	b083      	sub	sp, #12
	ili9488_color_t value;
	if(direction) {
  401648:	b958      	cbnz	r0, 401662 <ili9488_set_display_direction+0x1e>
		value = 0xE8;
	} else {
		value = 0x48;
  40164a:	2348      	movs	r3, #72	; 0x48
  40164c:	f8ad 3006 	strh.w	r3, [sp, #6]
	}
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &value, 1);
  401650:	2201      	movs	r2, #1
  401652:	f10d 0106 	add.w	r1, sp, #6
  401656:	2036      	movs	r0, #54	; 0x36
  401658:	4b04      	ldr	r3, [pc, #16]	; (40166c <ili9488_set_display_direction+0x28>)
  40165a:	4798      	blx	r3
}
  40165c:	b003      	add	sp, #12
  40165e:	f85d fb04 	ldr.w	pc, [sp], #4
		value = 0xE8;
  401662:	23e8      	movs	r3, #232	; 0xe8
  401664:	f8ad 3006 	strh.w	r3, [sp, #6]
  401668:	e7f2      	b.n	401650 <ili9488_set_display_direction+0xc>
  40166a:	bf00      	nop
  40166c:	004015dd 	.word	0x004015dd

00401670 <ili9488_set_window>:
 * \Param y start position.
 * \Param width  Width of window.
 * \Param height Height of window.
 */
void ili9488_set_window(uint16_t x, uint16_t y, uint16_t width, uint16_t height )
{
  401670:	b510      	push	{r4, lr}
  401672:	b084      	sub	sp, #16
	uint32_t cnt = 0;
	ili9488_color_t buf[4];

	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	col_start  =  x ;
  401674:	f8ad 000e 	strh.w	r0, [sp, #14]
	col_end    =  width + x - 1;
  401678:	3a01      	subs	r2, #1
  40167a:	4402      	add	r2, r0
  40167c:	f8ad 200c 	strh.w	r2, [sp, #12]

	row_start = y ;
  401680:	f8ad 100a 	strh.w	r1, [sp, #10]
	row_end   = height + y - 1;
  401684:	3b01      	subs	r3, #1
  401686:	4419      	add	r1, r3
  401688:	f8ad 1008 	strh.w	r1, [sp, #8]

	buf[0] = get_8b_to_16b(col_start);
  40168c:	0a03      	lsrs	r3, r0, #8
  40168e:	f8ad 3000 	strh.w	r3, [sp]
	buf[1] = get_0b_to_8b(col_start);
  401692:	b2c0      	uxtb	r0, r0
  401694:	f8ad 0002 	strh.w	r0, [sp, #2]
	buf[2] = get_8b_to_16b(col_end);
  401698:	f3c2 2307 	ubfx	r3, r2, #8, #8
  40169c:	f8ad 3004 	strh.w	r3, [sp, #4]
	buf[3] = get_0b_to_8b(col_end);
  4016a0:	b2d2      	uxtb	r2, r2
  4016a2:	f8ad 2006 	strh.w	r2, [sp, #6]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  4016a6:	2204      	movs	r2, #4
  4016a8:	4669      	mov	r1, sp
  4016aa:	202a      	movs	r0, #42	; 0x2a
  4016ac:	4c0f      	ldr	r4, [pc, #60]	; (4016ec <ili9488_set_window+0x7c>)
  4016ae:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  4016b0:	2200      	movs	r2, #0
  4016b2:	4611      	mov	r1, r2
  4016b4:	4610      	mov	r0, r2
  4016b6:	47a0      	blx	r4

	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(row_start);
  4016b8:	f89d 300b 	ldrb.w	r3, [sp, #11]
  4016bc:	f8ad 3000 	strh.w	r3, [sp]
	buf[1] = get_0b_to_8b(row_start);
  4016c0:	f89d 300a 	ldrb.w	r3, [sp, #10]
  4016c4:	f8ad 3002 	strh.w	r3, [sp, #2]
	buf[2] = get_8b_to_16b(row_end);
  4016c8:	f89d 3009 	ldrb.w	r3, [sp, #9]
  4016cc:	f8ad 3004 	strh.w	r3, [sp, #4]
	buf[3] = get_0b_to_8b(row_end);
  4016d0:	f89d 3008 	ldrb.w	r3, [sp, #8]
  4016d4:	f8ad 3006 	strh.w	r3, [sp, #6]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  4016d8:	2204      	movs	r2, #4
  4016da:	4669      	mov	r1, sp
  4016dc:	202b      	movs	r0, #43	; 0x2b
  4016de:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  4016e0:	2200      	movs	r2, #0
  4016e2:	4611      	mov	r1, r2
  4016e4:	4610      	mov	r0, r2
  4016e6:	47a0      	blx	r4
}
  4016e8:	b004      	add	sp, #16
  4016ea:	bd10      	pop	{r4, pc}
  4016ec:	004015dd 	.word	0x004015dd

004016f0 <ili9488_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9488_display_on(void)
{
  4016f0:	b508      	push	{r3, lr}
	ili9488_write_register(ILI9488_CMD_DISPLAY_ON, 0, 0);
  4016f2:	2200      	movs	r2, #0
  4016f4:	4611      	mov	r1, r2
  4016f6:	2029      	movs	r0, #41	; 0x29
  4016f8:	4b01      	ldr	r3, [pc, #4]	; (401700 <ili9488_display_on+0x10>)
  4016fa:	4798      	blx	r3
  4016fc:	bd08      	pop	{r3, pc}
  4016fe:	bf00      	nop
  401700:	004015dd 	.word	0x004015dd

00401704 <ili9488_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili9488_set_foreground_color(uint32_t ul_color)
{
  401704:	4a04      	ldr	r2, [pc, #16]	; (401718 <ili9488_set_foreground_color+0x14>)
  401706:	1e93      	subs	r3, r2, #2
  401708:	f202 227e 	addw	r2, r2, #638	; 0x27e
	uint32_t i;
#ifdef ILI9488_EBIMODE
	/* Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
		g_ul_pixel_cache[i] = ul_color;
  40170c:	f823 0f02 	strh.w	r0, [r3, #2]!
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
  401710:	4293      	cmp	r3, r2
  401712:	d1fb      	bne.n	40170c <ili9488_set_foreground_color+0x8>
		g_ul_pixel_cache[i++] = ul_color>>16;
		g_ul_pixel_cache[i++] = ul_color>>8;
		g_ul_pixel_cache[i++] = ul_color&0xFF;
	}
#endif
}
  401714:	4770      	bx	lr
  401716:	bf00      	nop
  401718:	20400a90 	.word	0x20400a90

0040171c <ili9488_set_cursor_position>:
 *
 * \param x X coordinate of upper-left corner on LCD.
 * \param y Y coordinate of upper-left corner on LCD.
 */
void ili9488_set_cursor_position(uint16_t x, uint16_t y)
{
  40171c:	b510      	push	{r4, lr}
  40171e:	b084      	sub	sp, #16
  401720:	f8ad 0006 	strh.w	r0, [sp, #6]
  401724:	f8ad 1004 	strh.w	r1, [sp, #4]
	uint32_t cnt = 0;

	ili9488_color_t buf[4];
	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	buf[0] = get_8b_to_16b(x);
  401728:	0a03      	lsrs	r3, r0, #8
  40172a:	f8ad 3008 	strh.w	r3, [sp, #8]
	buf[1] = get_0b_to_8b(x);
  40172e:	b2c0      	uxtb	r0, r0
  401730:	f8ad 000a 	strh.w	r0, [sp, #10]
	buf[2] = get_8b_to_16b(x);
  401734:	f8ad 300c 	strh.w	r3, [sp, #12]
	buf[3] = get_0b_to_8b(x);
  401738:	f8ad 000e 	strh.w	r0, [sp, #14]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  40173c:	2204      	movs	r2, #4
  40173e:	a902      	add	r1, sp, #8
  401740:	202a      	movs	r0, #42	; 0x2a
  401742:	4c0e      	ldr	r4, [pc, #56]	; (40177c <ili9488_set_cursor_position+0x60>)
  401744:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  401746:	2200      	movs	r2, #0
  401748:	4611      	mov	r1, r2
  40174a:	4610      	mov	r0, r2
  40174c:	47a0      	blx	r4


	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(y);
  40174e:	f89d 2005 	ldrb.w	r2, [sp, #5]
  401752:	f8ad 2008 	strh.w	r2, [sp, #8]
	buf[1] = get_0b_to_8b(y);
  401756:	f89d 3004 	ldrb.w	r3, [sp, #4]
  40175a:	f8ad 300a 	strh.w	r3, [sp, #10]
	buf[2] = get_8b_to_16b(y);
  40175e:	f8ad 200c 	strh.w	r2, [sp, #12]
	buf[3] = get_0b_to_8b(y);
  401762:	f8ad 300e 	strh.w	r3, [sp, #14]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  401766:	2204      	movs	r2, #4
  401768:	a902      	add	r1, sp, #8
  40176a:	202b      	movs	r0, #43	; 0x2b
  40176c:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  40176e:	2200      	movs	r2, #0
  401770:	4611      	mov	r1, r2
  401772:	4610      	mov	r0, r2
  401774:	47a0      	blx	r4
}
  401776:	b004      	add	sp, #16
  401778:	bd10      	pop	{r4, pc}
  40177a:	bf00      	nop
  40177c:	004015dd 	.word	0x004015dd

00401780 <ili9488_init>:
{
  401780:	b5f0      	push	{r4, r5, r6, r7, lr}
  401782:	b085      	sub	sp, #20
  401784:	4604      	mov	r4, r0
	pmc_enable_periph_clk(ID_SMC);
  401786:	2009      	movs	r0, #9
  401788:	4b46      	ldr	r3, [pc, #280]	; (4018a4 <ili9488_init+0x124>)
  40178a:	4798      	blx	r3
	smc_set_setup_timing(SMC, BOARD_ILI9488_EBI_NPCS, SMC_SETUP_NWE_SETUP(0)
  40178c:	4d46      	ldr	r5, [pc, #280]	; (4018a8 <ili9488_init+0x128>)
  40178e:	2200      	movs	r2, #0
  401790:	2103      	movs	r1, #3
  401792:	4628      	mov	r0, r5
  401794:	4b45      	ldr	r3, [pc, #276]	; (4018ac <ili9488_init+0x12c>)
  401796:	4798      	blx	r3
	smc_set_pulse_timing(SMC, BOARD_ILI9488_EBI_NPCS , SMC_PULSE_NWE_PULSE(3)
  401798:	4a45      	ldr	r2, [pc, #276]	; (4018b0 <ili9488_init+0x130>)
  40179a:	2103      	movs	r1, #3
  40179c:	4628      	mov	r0, r5
  40179e:	4b45      	ldr	r3, [pc, #276]	; (4018b4 <ili9488_init+0x134>)
  4017a0:	4798      	blx	r3
	smc_set_cycle_timing(SMC, BOARD_ILI9488_EBI_NPCS, SMC_CYCLE_NWE_CYCLE(0x4)
  4017a2:	4a45      	ldr	r2, [pc, #276]	; (4018b8 <ili9488_init+0x138>)
  4017a4:	2103      	movs	r1, #3
  4017a6:	4628      	mov	r0, r5
  4017a8:	4b44      	ldr	r3, [pc, #272]	; (4018bc <ili9488_init+0x13c>)
  4017aa:	4798      	blx	r3
	smc_set_mode(SMC, BOARD_ILI9488_EBI_NPCS, SMC_MODE_READ_MODE
  4017ac:	4a44      	ldr	r2, [pc, #272]	; (4018c0 <ili9488_init+0x140>)
  4017ae:	2103      	movs	r1, #3
  4017b0:	4628      	mov	r0, r5
  4017b2:	4b44      	ldr	r3, [pc, #272]	; (4018c4 <ili9488_init+0x144>)
  4017b4:	4798      	blx	r3
	ili9488_write_register(ILI9488_CMD_SOFTWARE_RESET, 0x0000, 0);
  4017b6:	2200      	movs	r2, #0
  4017b8:	4611      	mov	r1, r2
  4017ba:	2001      	movs	r0, #1
  4017bc:	4e42      	ldr	r6, [pc, #264]	; (4018c8 <ili9488_init+0x148>)
  4017be:	47b0      	blx	r6
	ili9488_delay(200);
  4017c0:	20c8      	movs	r0, #200	; 0xc8
  4017c2:	4d42      	ldr	r5, [pc, #264]	; (4018cc <ili9488_init+0x14c>)
  4017c4:	47a8      	blx	r5
	ili9488_write_register(ILI9488_CMD_SLEEP_OUT, 0x0000, 0);
  4017c6:	2200      	movs	r2, #0
  4017c8:	4611      	mov	r1, r2
  4017ca:	2011      	movs	r0, #17
  4017cc:	47b0      	blx	r6
	ili9488_delay(200);
  4017ce:	20c8      	movs	r0, #200	; 0xc8
  4017d0:	47a8      	blx	r5
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  4017d2:	4e3f      	ldr	r6, [pc, #252]	; (4018d0 <ili9488_init+0x150>)
  4017d4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4017d8:	4630      	mov	r0, r6
  4017da:	4b3e      	ldr	r3, [pc, #248]	; (4018d4 <ili9488_init+0x154>)
  4017dc:	4798      	blx	r3
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  4017de:	f04f 45c6 	mov.w	r5, #1660944384	; 0x63000000
  4017e2:	23d3      	movs	r3, #211	; 0xd3
  4017e4:	802b      	strh	r3, [r5, #0]
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  4017e6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4017ea:	4630      	mov	r0, r6
  4017ec:	4b3a      	ldr	r3, [pc, #232]	; (4018d8 <ili9488_init+0x158>)
  4017ee:	4798      	blx	r3
		return *(volatile uint16_t *)(BOARD_ILI9488_ADDR);
	}
	static inline void LCD_MULTI_RD(uint16_t *pbuffer, uint32_t size)
	{
		while(size--) {
			*pbuffer++ = *((volatile uint16_t *)(BOARD_ILI9488_ADDR));
  4017f0:	882b      	ldrh	r3, [r5, #0]
  4017f2:	f8ad 3004 	strh.w	r3, [sp, #4]
  4017f6:	8829      	ldrh	r1, [r5, #0]
  4017f8:	b289      	uxth	r1, r1
  4017fa:	f8ad 1006 	strh.w	r1, [sp, #6]
  4017fe:	882b      	ldrh	r3, [r5, #0]
  401800:	b29b      	uxth	r3, r3
  401802:	f8ad 3008 	strh.w	r3, [sp, #8]
  401806:	882a      	ldrh	r2, [r5, #0]
  401808:	b292      	uxth	r2, r2
  40180a:	f8ad 200a 	strh.w	r2, [sp, #10]
  40180e:	8828      	ldrh	r0, [r5, #0]
		chipid |= (*ptr &0xFF)<< (shift_cnt << 3);
  401810:	b2c9      	uxtb	r1, r1
  401812:	b2db      	uxtb	r3, r3
  401814:	021b      	lsls	r3, r3, #8
  401816:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40181a:	b2d2      	uxtb	r2, r2
  40181c:	4313      	orrs	r3, r2
	if (chipid != ILI9488_DEVICE_CODE) {
  40181e:	f249 4288 	movw	r2, #38024	; 0x9488
  401822:	4293      	cmp	r3, r2
  401824:	d002      	beq.n	40182c <ili9488_init+0xac>
		return 1;
  401826:	2001      	movs	r0, #1
}
  401828:	b005      	add	sp, #20
  40182a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	param = 0x48;
  40182c:	ae04      	add	r6, sp, #16
  40182e:	2348      	movs	r3, #72	; 0x48
  401830:	f826 3d02 	strh.w	r3, [r6, #-2]!
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &param, 1);
  401834:	2201      	movs	r2, #1
  401836:	4631      	mov	r1, r6
  401838:	2036      	movs	r0, #54	; 0x36
  40183a:	4f23      	ldr	r7, [pc, #140]	; (4018c8 <ili9488_init+0x148>)
  40183c:	47b8      	blx	r7
	ili9488_delay(100);
  40183e:	2064      	movs	r0, #100	; 0x64
  401840:	4d22      	ldr	r5, [pc, #136]	; (4018cc <ili9488_init+0x14c>)
  401842:	47a8      	blx	r5
	param = 0x04;
  401844:	2304      	movs	r3, #4
  401846:	f8ad 300e 	strh.w	r3, [sp, #14]
	ili9488_write_register(ILI9488_CMD_CABC_CONTROL_9, &param, 1);
  40184a:	2201      	movs	r2, #1
  40184c:	4631      	mov	r1, r6
  40184e:	20cf      	movs	r0, #207	; 0xcf
  401850:	47b8      	blx	r7
	ili9488_delay(100);
  401852:	2064      	movs	r0, #100	; 0x64
  401854:	47a8      	blx	r5
	param = 0x05;
  401856:	2305      	movs	r3, #5
  401858:	f8ad 300e 	strh.w	r3, [sp, #14]
	ili9488_write_register(ILI9488_CMD_COLMOD_PIXEL_FORMAT_SET, &param, 1);
  40185c:	2201      	movs	r2, #1
  40185e:	4631      	mov	r1, r6
  401860:	203a      	movs	r0, #58	; 0x3a
  401862:	47b8      	blx	r7
	ili9488_delay(100);
  401864:	2064      	movs	r0, #100	; 0x64
  401866:	47a8      	blx	r5
	ili9488_write_register(ILI9488_CMD_PARTIAL_MODE_ON, 0, 0);
  401868:	2200      	movs	r2, #0
  40186a:	4611      	mov	r1, r2
  40186c:	2012      	movs	r0, #18
  40186e:	47b8      	blx	r7
	ili9488_delay(100);
  401870:	2064      	movs	r0, #100	; 0x64
  401872:	47a8      	blx	r5
	ili9488_display_on();
  401874:	4b19      	ldr	r3, [pc, #100]	; (4018dc <ili9488_init+0x15c>)
  401876:	4798      	blx	r3
	ili9488_delay(100);
  401878:	2064      	movs	r0, #100	; 0x64
  40187a:	47a8      	blx	r5
	ili9488_set_display_direction(LANDSCAPE);
  40187c:	2000      	movs	r0, #0
  40187e:	4b18      	ldr	r3, [pc, #96]	; (4018e0 <ili9488_init+0x160>)
  401880:	4798      	blx	r3
	ili9488_delay(100);
  401882:	2064      	movs	r0, #100	; 0x64
  401884:	47a8      	blx	r5
	ili9488_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  401886:	88a3      	ldrh	r3, [r4, #4]
  401888:	8822      	ldrh	r2, [r4, #0]
  40188a:	2100      	movs	r1, #0
  40188c:	4608      	mov	r0, r1
  40188e:	4d15      	ldr	r5, [pc, #84]	; (4018e4 <ili9488_init+0x164>)
  401890:	47a8      	blx	r5
	ili9488_set_foreground_color(p_opt->foreground_color);
  401892:	68a0      	ldr	r0, [r4, #8]
  401894:	4b14      	ldr	r3, [pc, #80]	; (4018e8 <ili9488_init+0x168>)
  401896:	4798      	blx	r3
	ili9488_set_cursor_position(0, 0);
  401898:	2100      	movs	r1, #0
  40189a:	4608      	mov	r0, r1
  40189c:	4b13      	ldr	r3, [pc, #76]	; (4018ec <ili9488_init+0x16c>)
  40189e:	4798      	blx	r3
	return 0;
  4018a0:	2000      	movs	r0, #0
  4018a2:	e7c1      	b.n	401828 <ili9488_init+0xa8>
  4018a4:	00402609 	.word	0x00402609
  4018a8:	40080000 	.word	0x40080000
  4018ac:	00401a35 	.word	0x00401a35
  4018b0:	0a0a0403 	.word	0x0a0a0403
  4018b4:	00401a3b 	.word	0x00401a3b
  4018b8:	000a0004 	.word	0x000a0004
  4018bc:	00401a43 	.word	0x00401a43
  4018c0:	000f1003 	.word	0x000f1003
  4018c4:	00401a4b 	.word	0x00401a4b
  4018c8:	004015dd 	.word	0x004015dd
  4018cc:	00401629 	.word	0x00401629
  4018d0:	400e1200 	.word	0x400e1200
  4018d4:	00402179 	.word	0x00402179
  4018d8:	00402175 	.word	0x00402175
  4018dc:	004016f1 	.word	0x004016f1
  4018e0:	00401645 	.word	0x00401645
  4018e4:	00401671 	.word	0x00401671
  4018e8:	00401705 	.word	0x00401705
  4018ec:	0040171d 	.word	0x0040171d

004018f0 <ili9488_write_brightness>:
 * Configures the display for a given brightness value
 *
 * \param us_value brightness value need to written.
 */
void ili9488_write_brightness(uint16_t us_value)
{
  4018f0:	b500      	push	{lr}
  4018f2:	b083      	sub	sp, #12
  4018f4:	a902      	add	r1, sp, #8
  4018f6:	f821 0d02 	strh.w	r0, [r1, #-2]!
	ili9488_write_register(ILI9488_CMD_WRITE_DISPLAY_BRIGHTNESS, (ili9488_color_t *)&us_value, 1);
  4018fa:	2201      	movs	r2, #1
  4018fc:	2051      	movs	r0, #81	; 0x51
  4018fe:	4b02      	ldr	r3, [pc, #8]	; (401908 <ili9488_write_brightness+0x18>)
  401900:	4798      	blx	r3
}
  401902:	b003      	add	sp, #12
  401904:	f85d fb04 	ldr.w	pc, [sp], #4
  401908:	004015dd 	.word	0x004015dd

0040190c <ili9488_set_limits>:
 * \param end_x The x coordinate of the bottom right corner
 * \param end_y The y coordinate of the bottom right corner
 */
void ili9488_set_limits(ili9488_coord_t start_x, ili9488_coord_t start_y,
		ili9488_coord_t end_x, ili9488_coord_t end_y)
{
  40190c:	b410      	push	{r4}
	limit_start_x = start_x;
  40190e:	4c05      	ldr	r4, [pc, #20]	; (401924 <ili9488_set_limits+0x18>)
  401910:	8020      	strh	r0, [r4, #0]
	limit_start_y = start_y;
  401912:	4805      	ldr	r0, [pc, #20]	; (401928 <ili9488_set_limits+0x1c>)
  401914:	8001      	strh	r1, [r0, #0]
	limit_end_x = end_x;
  401916:	4905      	ldr	r1, [pc, #20]	; (40192c <ili9488_set_limits+0x20>)
  401918:	800a      	strh	r2, [r1, #0]
	limit_end_y = end_y;
  40191a:	4a05      	ldr	r2, [pc, #20]	; (401930 <ili9488_set_limits+0x24>)
  40191c:	8013      	strh	r3, [r2, #0]
}
  40191e:	f85d 4b04 	ldr.w	r4, [sp], #4
  401922:	4770      	bx	lr
  401924:	20400d14 	.word	0x20400d14
  401928:	20400d16 	.word	0x20400d16
  40192c:	20400d10 	.word	0x20400d10
  401930:	20400d12 	.word	0x20400d12

00401934 <ili9488_set_orientation>:
 *
 * \param flags Orientation flags to use, see \ref ILI9488_FLIP_X, \ref ILI9488_FLIP_Y
 *        and \ref ILI9488_SWITCH_XY.
 */
void ili9488_set_orientation(uint8_t flags)
{
  401934:	b500      	push	{lr}
  401936:	b083      	sub	sp, #12
	/* Flip X/Y and reverse X orientation and set BGR mode*/
	ili9488_color_t madctl = 0x68;

	if (flags & ILI9488_FLIP_X) {
  401938:	f010 0f01 	tst.w	r0, #1
	ili9488_color_t madctl = 0x68;
  40193c:	bf0c      	ite	eq
  40193e:	2368      	moveq	r3, #104	; 0x68
		madctl &= ~(1 << 6);
  401940:	2328      	movne	r3, #40	; 0x28
  401942:	f8ad 3006 	strh.w	r3, [sp, #6]
	}

	if (flags & ILI9488_FLIP_Y) {
  401946:	f010 0f02 	tst.w	r0, #2
  40194a:	d005      	beq.n	401958 <ili9488_set_orientation+0x24>
		madctl |= 1 << 7;
  40194c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  401950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401954:	f8ad 3006 	strh.w	r3, [sp, #6]
	}

	if (flags & ILI9488_SWITCH_XY) {
  401958:	f010 0f04 	tst.w	r0, #4
  40195c:	d005      	beq.n	40196a <ili9488_set_orientation+0x36>
		madctl &= ~(1 << 5);
  40195e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  401962:	f023 0320 	bic.w	r3, r3, #32
  401966:	f8ad 3006 	strh.w	r3, [sp, #6]
	}

	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &madctl, 1);
  40196a:	2201      	movs	r2, #1
  40196c:	f10d 0106 	add.w	r1, sp, #6
  401970:	2036      	movs	r0, #54	; 0x36
  401972:	4b02      	ldr	r3, [pc, #8]	; (40197c <ili9488_set_orientation+0x48>)
  401974:	4798      	blx	r3
}
  401976:	b003      	add	sp, #12
  401978:	f85d fb04 	ldr.w	pc, [sp], #4
  40197c:	004015dd 	.word	0x004015dd

00401980 <ili9488_write_gram>:
 * \endcode
 *
 * \param color The color pixel to write to the screen
 */
void ili9488_write_gram(uint16_t color)
{
  401980:	b510      	push	{r4, lr}
  401982:	4604      	mov	r4, r0
	ili9488_set_cursor_position(limit_start_x, limit_start_y);
  401984:	4b08      	ldr	r3, [pc, #32]	; (4019a8 <ili9488_write_gram+0x28>)
  401986:	8819      	ldrh	r1, [r3, #0]
  401988:	4b08      	ldr	r3, [pc, #32]	; (4019ac <ili9488_write_gram+0x2c>)
  40198a:	8818      	ldrh	r0, [r3, #0]
  40198c:	4b08      	ldr	r3, [pc, #32]	; (4019b0 <ili9488_write_gram+0x30>)
  40198e:	4798      	blx	r3
	ili9488_write_ram_prepare();
  401990:	4b08      	ldr	r3, [pc, #32]	; (4019b4 <ili9488_write_gram+0x34>)
  401992:	4798      	blx	r3
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401994:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401998:	4807      	ldr	r0, [pc, #28]	; (4019b8 <ili9488_write_gram+0x38>)
  40199a:	4b08      	ldr	r3, [pc, #32]	; (4019bc <ili9488_write_gram+0x3c>)
  40199c:	4798      	blx	r3
		*(volatile uint16_t *)(BOARD_ILI9488_ADDR) = lcd_data;
  40199e:	f04f 43c6 	mov.w	r3, #1660944384	; 0x63000000
  4019a2:	801c      	strh	r4, [r3, #0]
  4019a4:	bd10      	pop	{r4, pc}
  4019a6:	bf00      	nop
  4019a8:	20400d16 	.word	0x20400d16
  4019ac:	20400d14 	.word	0x20400d14
  4019b0:	0040171d 	.word	0x0040171d
  4019b4:	004015bd 	.word	0x004015bd
  4019b8:	400e1200 	.word	0x400e1200
  4019bc:	00402175 	.word	0x00402175

004019c0 <ili9488_duplicate_pixel>:
 *
 * \param color The color to write to the display
 * \param count The number of pixels to write with this color
 */
void ili9488_duplicate_pixel(const uint16_t color, uint32_t count)
{
  4019c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4019c4:	4605      	mov	r5, r0
  4019c6:	460e      	mov	r6, r1
	ili9488_set_window(limit_start_x, limit_start_y, (limit_end_x - limit_start_x) + 1, (limit_end_y - limit_start_y) + 1);
  4019c8:	4b12      	ldr	r3, [pc, #72]	; (401a14 <ili9488_duplicate_pixel+0x54>)
  4019ca:	8818      	ldrh	r0, [r3, #0]
  4019cc:	4b12      	ldr	r3, [pc, #72]	; (401a18 <ili9488_duplicate_pixel+0x58>)
  4019ce:	8819      	ldrh	r1, [r3, #0]
  4019d0:	4b12      	ldr	r3, [pc, #72]	; (401a1c <ili9488_duplicate_pixel+0x5c>)
  4019d2:	881b      	ldrh	r3, [r3, #0]
  4019d4:	3301      	adds	r3, #1
  4019d6:	1a5b      	subs	r3, r3, r1
  4019d8:	4a11      	ldr	r2, [pc, #68]	; (401a20 <ili9488_duplicate_pixel+0x60>)
  4019da:	8812      	ldrh	r2, [r2, #0]
  4019dc:	3201      	adds	r2, #1
  4019de:	1a12      	subs	r2, r2, r0
  4019e0:	b29b      	uxth	r3, r3
  4019e2:	b292      	uxth	r2, r2
  4019e4:	4c0f      	ldr	r4, [pc, #60]	; (401a24 <ili9488_duplicate_pixel+0x64>)
  4019e6:	47a0      	blx	r4
	ili9488_write_ram_prepare();
  4019e8:	4b0f      	ldr	r3, [pc, #60]	; (401a28 <ili9488_duplicate_pixel+0x68>)
  4019ea:	4798      	blx	r3

#ifdef ILI9488_EBIMODE
	while (count--) {
  4019ec:	b17e      	cbz	r6, 401a0e <ili9488_duplicate_pixel+0x4e>
  4019ee:	1e74      	subs	r4, r6, #1
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  4019f0:	f8df 803c 	ldr.w	r8, [pc, #60]	; 401a30 <ili9488_duplicate_pixel+0x70>
  4019f4:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
  4019f8:	4e0c      	ldr	r6, [pc, #48]	; (401a2c <ili9488_duplicate_pixel+0x6c>)
  4019fa:	4639      	mov	r1, r7
  4019fc:	4640      	mov	r0, r8
  4019fe:	47b0      	blx	r6
  401a00:	f04f 43c6 	mov.w	r3, #1660944384	; 0x63000000
  401a04:	801d      	strh	r5, [r3, #0]
	while (count--) {
  401a06:	3c01      	subs	r4, #1
  401a08:	f1b4 3fff 	cmp.w	r4, #4294967295
  401a0c:	d1f5      	bne.n	4019fa <ili9488_duplicate_pixel+0x3a>
  401a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401a12:	bf00      	nop
  401a14:	20400d14 	.word	0x20400d14
  401a18:	20400d16 	.word	0x20400d16
  401a1c:	20400d12 	.word	0x20400d12
  401a20:	20400d10 	.word	0x20400d10
  401a24:	00401671 	.word	0x00401671
  401a28:	004015bd 	.word	0x004015bd
  401a2c:	00402175 	.word	0x00402175
  401a30:	400e1200 	.word	0x400e1200

00401a34 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
  401a34:	0109      	lsls	r1, r1, #4
  401a36:	5042      	str	r2, [r0, r1]
  401a38:	4770      	bx	lr

00401a3a <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
  401a3a:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  401a3e:	604a      	str	r2, [r1, #4]
  401a40:	4770      	bx	lr

00401a42 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
  401a42:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  401a46:	608a      	str	r2, [r1, #8]
  401a48:	4770      	bx	lr

00401a4a <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
  401a4a:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  401a4e:	60ca      	str	r2, [r1, #12]
  401a50:	4770      	bx	lr

00401a52 <ssc_reset>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_reset(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_SWRST;
  401a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401a56:	6003      	str	r3, [r0, #0]
	p_ssc->SSC_CMR = 0;
  401a58:	2300      	movs	r3, #0
  401a5a:	6043      	str	r3, [r0, #4]
	p_ssc->SSC_RCMR = 0;
  401a5c:	6103      	str	r3, [r0, #16]
	p_ssc->SSC_RFMR = 0;
  401a5e:	6143      	str	r3, [r0, #20]
	p_ssc->SSC_TCMR = 0;
  401a60:	6183      	str	r3, [r0, #24]
	p_ssc->SSC_TFMR = 0;
  401a62:	61c3      	str	r3, [r0, #28]
  401a64:	4770      	bx	lr

00401a66 <ssc_enable_rx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_rx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_RXEN;
  401a66:	2301      	movs	r3, #1
  401a68:	6003      	str	r3, [r0, #0]
  401a6a:	4770      	bx	lr

00401a6c <ssc_disable_rx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_disable_rx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_RXDIS;
  401a6c:	2302      	movs	r3, #2
  401a6e:	6003      	str	r3, [r0, #0]
  401a70:	4770      	bx	lr

00401a72 <ssc_enable_tx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_tx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_TXEN;
  401a72:	f44f 7380 	mov.w	r3, #256	; 0x100
  401a76:	6003      	str	r3, [r0, #0]
  401a78:	4770      	bx	lr

00401a7a <ssc_disable_tx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_disable_tx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_TXDIS;
  401a7a:	f44f 7300 	mov.w	r3, #512	; 0x200
  401a7e:	6003      	str	r3, [r0, #0]
  401a80:	4770      	bx	lr

00401a82 <ssc_set_receiver>:
 * \param p_rx_clk_opt Pointer to the receiver clock configuration structure.
 * \param p_rx_data_frame Pointer to the receiver data frame configuration structure.
 */
void ssc_set_receiver(Ssc *p_ssc, clock_opt_t *p_rx_clk_opt,
		data_frame_opt_t *p_rx_data_frame)
{
  401a82:	b430      	push	{r4, r5}
	if (p_rx_clk_opt == NULL) {
  401a84:	2900      	cmp	r1, #0
  401a86:	d030      	beq.n	401aea <ssc_set_receiver+0x68>
  401a88:	460c      	mov	r4, r1
		p_ssc->SSC_RCMR = 0;
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  401a8a:	6901      	ldr	r1, [r0, #16]
  401a8c:	6823      	ldr	r3, [r4, #0]
  401a8e:	6865      	ldr	r5, [r4, #4]
  401a90:	432b      	orrs	r3, r5
  401a92:	430b      	orrs	r3, r1
  401a94:	68a1      	ldr	r1, [r4, #8]
  401a96:	430b      	orrs	r3, r1
  401a98:	68e1      	ldr	r1, [r4, #12]
  401a9a:	430b      	orrs	r3, r1
  401a9c:	69a1      	ldr	r1, [r4, #24]
  401a9e:	430b      	orrs	r3, r1
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
				p_rx_clk_opt->ul_ckg |
				p_rx_clk_opt->ul_start_sel |
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
  401aa0:	6921      	ldr	r1, [r4, #16]
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  401aa2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  401aa6:	6961      	ldr	r1, [r4, #20]
  401aa8:	0409      	lsls	r1, r1, #16
  401aaa:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  401aae:	430b      	orrs	r3, r1
  401ab0:	6103      	str	r3, [r0, #16]
	}

	if (p_rx_data_frame == NULL) {
  401ab2:	b1ea      	cbz	r2, 401af0 <ssc_set_receiver+0x6e>
		p_ssc->SSC_RFMR = 0;
	} else {
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  401ab4:	6941      	ldr	r1, [r0, #20]
  401ab6:	6853      	ldr	r3, [r2, #4]
  401ab8:	6954      	ldr	r4, [r2, #20]
  401aba:	4323      	orrs	r3, r4
  401abc:	6994      	ldr	r4, [r2, #24]
  401abe:	4323      	orrs	r3, r4
  401ac0:	430b      	orrs	r3, r1
  401ac2:	6811      	ldr	r1, [r2, #0]
  401ac4:	f001 011f 	and.w	r1, r1, #31
  401ac8:	430b      	orrs	r3, r1
				p_rx_data_frame->ul_msbf |
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
  401aca:	6911      	ldr	r1, [r2, #16]
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  401acc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  401ad0:	6891      	ldr	r1, [r2, #8]
  401ad2:	0209      	lsls	r1, r1, #8
  401ad4:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  401ad8:	430b      	orrs	r3, r1
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  401ada:	68d2      	ldr	r2, [r2, #12]
  401adc:	0412      	lsls	r2, r2, #16
  401ade:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  401ae2:	4313      	orrs	r3, r2
  401ae4:	6143      	str	r3, [r0, #20]
				p_rx_data_frame->ul_fsos |
				p_rx_data_frame->ul_fsedge;
	}
}
  401ae6:	bc30      	pop	{r4, r5}
  401ae8:	4770      	bx	lr
		p_ssc->SSC_RCMR = 0;
  401aea:	2300      	movs	r3, #0
  401aec:	6103      	str	r3, [r0, #16]
  401aee:	e7e0      	b.n	401ab2 <ssc_set_receiver+0x30>
		p_ssc->SSC_RFMR = 0;
  401af0:	2300      	movs	r3, #0
  401af2:	6143      	str	r3, [r0, #20]
  401af4:	e7f7      	b.n	401ae6 <ssc_set_receiver+0x64>

00401af6 <ssc_set_transmitter>:
 * \param p_tx_clk_opt Pointer to the transmitter clock configuration structure.
 * \param p_tx_data_frame Pointer to the transmitter data frame configuration structure.
 */
void ssc_set_transmitter(Ssc *p_ssc, clock_opt_t *p_tx_clk_opt,
		data_frame_opt_t *p_tx_data_frame)
{
  401af6:	b430      	push	{r4, r5}
	if (p_tx_clk_opt == NULL) {
  401af8:	2900      	cmp	r1, #0
  401afa:	d030      	beq.n	401b5e <ssc_set_transmitter+0x68>
  401afc:	460c      	mov	r4, r1
		p_ssc->SSC_TCMR = 0;
	} else {
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  401afe:	6981      	ldr	r1, [r0, #24]
  401b00:	6823      	ldr	r3, [r4, #0]
  401b02:	6865      	ldr	r5, [r4, #4]
  401b04:	432b      	orrs	r3, r5
  401b06:	430b      	orrs	r3, r1
  401b08:	68a1      	ldr	r1, [r4, #8]
  401b0a:	430b      	orrs	r3, r1
  401b0c:	68e1      	ldr	r1, [r4, #12]
  401b0e:	430b      	orrs	r3, r1
  401b10:	69a1      	ldr	r1, [r4, #24]
  401b12:	430b      	orrs	r3, r1
				p_tx_clk_opt->ul_cko | p_tx_clk_opt->ul_cki |
				p_tx_clk_opt->ul_ckg |
				p_tx_clk_opt->ul_start_sel |
				SSC_TCMR_PERIOD(p_tx_clk_opt->ul_period) |
  401b14:	6921      	ldr	r1, [r4, #16]
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  401b16:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
				SSC_TCMR_STTDLY(p_tx_clk_opt->ul_sttdly);
  401b1a:	6961      	ldr	r1, [r4, #20]
  401b1c:	0409      	lsls	r1, r1, #16
  401b1e:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  401b22:	430b      	orrs	r3, r1
  401b24:	6183      	str	r3, [r0, #24]
	}

	if (p_tx_data_frame == NULL) {
  401b26:	b1ea      	cbz	r2, 401b64 <ssc_set_transmitter+0x6e>
		p_ssc->SSC_TFMR = 0;
	} else {
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  401b28:	69c1      	ldr	r1, [r0, #28]
  401b2a:	6853      	ldr	r3, [r2, #4]
  401b2c:	6954      	ldr	r4, [r2, #20]
  401b2e:	4323      	orrs	r3, r4
  401b30:	6994      	ldr	r4, [r2, #24]
  401b32:	4323      	orrs	r3, r4
  401b34:	430b      	orrs	r3, r1
  401b36:	6811      	ldr	r1, [r2, #0]
  401b38:	f001 011f 	and.w	r1, r1, #31
  401b3c:	430b      	orrs	r3, r1
				p_tx_data_frame->ul_msbf |
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
				SSC_TFMR_FSLEN_EXT(p_tx_data_frame->ul_fslen_ext) |
  401b3e:	6911      	ldr	r1, [r2, #16]
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  401b40:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
  401b44:	6891      	ldr	r1, [r2, #8]
  401b46:	0209      	lsls	r1, r1, #8
  401b48:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  401b4c:	430b      	orrs	r3, r1
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
  401b4e:	68d2      	ldr	r2, [r2, #12]
  401b50:	0412      	lsls	r2, r2, #16
  401b52:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  401b56:	4313      	orrs	r3, r2
  401b58:	61c3      	str	r3, [r0, #28]
				p_tx_data_frame->ul_fsos |
				p_tx_data_frame->ul_fsedge;
	}
}
  401b5a:	bc30      	pop	{r4, r5}
  401b5c:	4770      	bx	lr
		p_ssc->SSC_TCMR = 0;
  401b5e:	2300      	movs	r3, #0
  401b60:	6183      	str	r3, [r0, #24]
  401b62:	e7e0      	b.n	401b26 <ssc_set_transmitter+0x30>
		p_ssc->SSC_TFMR = 0;
  401b64:	2300      	movs	r3, #0
  401b66:	61c3      	str	r3, [r0, #28]
  401b68:	e7f7      	b.n	401b5a <ssc_set_transmitter+0x64>

00401b6a <ssc_disable_interrupt>:
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void ssc_disable_interrupt(Ssc *p_ssc, uint32_t ul_sources)
{
	p_ssc->SSC_IDR = ul_sources;
  401b6a:	6481      	str	r1, [r0, #72]	; 0x48
  401b6c:	4770      	bx	lr
	...

00401b70 <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401b70:	4b28      	ldr	r3, [pc, #160]	; (401c14 <twihs_set_speed+0xa4>)
  401b72:	4299      	cmp	r1, r3
  401b74:	d84b      	bhi.n	401c0e <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  401b76:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  401b7a:	4299      	cmp	r1, r3
  401b7c:	d92d      	bls.n	401bda <twihs_set_speed+0x6a>
{
  401b7e:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401b80:	4c25      	ldr	r4, [pc, #148]	; (401c18 <twihs_set_speed+0xa8>)
  401b82:	fba4 3402 	umull	r3, r4, r4, r2
  401b86:	0ba4      	lsrs	r4, r4, #14
  401b88:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401b8a:	4b24      	ldr	r3, [pc, #144]	; (401c1c <twihs_set_speed+0xac>)
  401b8c:	440b      	add	r3, r1
  401b8e:	009b      	lsls	r3, r3, #2
  401b90:	fbb2 f2f3 	udiv	r2, r2, r3
  401b94:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401b96:	2cff      	cmp	r4, #255	; 0xff
  401b98:	d91d      	bls.n	401bd6 <twihs_set_speed+0x66>
  401b9a:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  401b9c:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  401b9e:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401ba0:	2cff      	cmp	r4, #255	; 0xff
  401ba2:	d901      	bls.n	401ba8 <twihs_set_speed+0x38>
  401ba4:	2906      	cmp	r1, #6
  401ba6:	d9f9      	bls.n	401b9c <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401ba8:	2aff      	cmp	r2, #255	; 0xff
  401baa:	d907      	bls.n	401bbc <twihs_set_speed+0x4c>
  401bac:	2906      	cmp	r1, #6
  401bae:	d805      	bhi.n	401bbc <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  401bb0:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  401bb2:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401bb4:	2aff      	cmp	r2, #255	; 0xff
  401bb6:	d901      	bls.n	401bbc <twihs_set_speed+0x4c>
  401bb8:	2906      	cmp	r1, #6
  401bba:	d9f9      	bls.n	401bb0 <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401bbc:	0213      	lsls	r3, r2, #8
  401bbe:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  401bc0:	0409      	lsls	r1, r1, #16
  401bc2:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401bc6:	430b      	orrs	r3, r1
  401bc8:	b2e4      	uxtb	r4, r4
  401bca:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  401bcc:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  401bce:	2000      	movs	r0, #0
}
  401bd0:	f85d 4b04 	ldr.w	r4, [sp], #4
  401bd4:	4770      	bx	lr
	uint32_t ckdiv = 0;
  401bd6:	2100      	movs	r1, #0
  401bd8:	e7e6      	b.n	401ba8 <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401bda:	0049      	lsls	r1, r1, #1
  401bdc:	fbb2 f2f1 	udiv	r2, r2, r1
  401be0:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401be2:	2aff      	cmp	r2, #255	; 0xff
  401be4:	d911      	bls.n	401c0a <twihs_set_speed+0x9a>
  401be6:	2300      	movs	r3, #0
			ckdiv++;
  401be8:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  401bea:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401bec:	2aff      	cmp	r2, #255	; 0xff
  401bee:	d901      	bls.n	401bf4 <twihs_set_speed+0x84>
  401bf0:	2b06      	cmp	r3, #6
  401bf2:	d9f9      	bls.n	401be8 <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401bf4:	0211      	lsls	r1, r2, #8
  401bf6:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  401bf8:	041b      	lsls	r3, r3, #16
  401bfa:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401bfe:	430b      	orrs	r3, r1
  401c00:	b2d2      	uxtb	r2, r2
  401c02:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  401c04:	6102      	str	r2, [r0, #16]
	return PASS;
  401c06:	2000      	movs	r0, #0
  401c08:	4770      	bx	lr
	uint32_t ckdiv = 0;
  401c0a:	2300      	movs	r3, #0
  401c0c:	e7f2      	b.n	401bf4 <twihs_set_speed+0x84>
		return FAIL;
  401c0e:	2001      	movs	r0, #1
  401c10:	4770      	bx	lr
  401c12:	bf00      	nop
  401c14:	00061a80 	.word	0x00061a80
  401c18:	057619f1 	.word	0x057619f1
  401c1c:	3ffd1200 	.word	0x3ffd1200

00401c20 <twihs_master_init>:
{
  401c20:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  401c22:	f04f 32ff 	mov.w	r2, #4294967295
  401c26:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  401c28:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  401c2a:	2280      	movs	r2, #128	; 0x80
  401c2c:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  401c2e:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401c30:	2208      	movs	r2, #8
  401c32:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  401c34:	2220      	movs	r2, #32
  401c36:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401c38:	2204      	movs	r2, #4
  401c3a:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401c3c:	680a      	ldr	r2, [r1, #0]
  401c3e:	6849      	ldr	r1, [r1, #4]
  401c40:	4b03      	ldr	r3, [pc, #12]	; (401c50 <twihs_master_init+0x30>)
  401c42:	4798      	blx	r3
}
  401c44:	2801      	cmp	r0, #1
  401c46:	bf14      	ite	ne
  401c48:	2000      	movne	r0, #0
  401c4a:	2001      	moveq	r0, #1
  401c4c:	bd08      	pop	{r3, pc}
  401c4e:	bf00      	nop
  401c50:	00401b71 	.word	0x00401b71

00401c54 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  401c54:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  401c56:	2a00      	cmp	r2, #0
  401c58:	d04c      	beq.n	401cf4 <twihs_master_read+0xa0>
{
  401c5a:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401c5c:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401c5e:	2600      	movs	r6, #0
  401c60:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401c62:	684b      	ldr	r3, [r1, #4]
  401c64:	021b      	lsls	r3, r3, #8
  401c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401c6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  401c6e:	7c0d      	ldrb	r5, [r1, #16]
  401c70:	042d      	lsls	r5, r5, #16
  401c72:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  401c76:	432b      	orrs	r3, r5
  401c78:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401c7a:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401c7c:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  401c7e:	b15d      	cbz	r5, 401c98 <twihs_master_read+0x44>
	val = addr[0];
  401c80:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  401c82:	2d01      	cmp	r5, #1
  401c84:	dd02      	ble.n	401c8c <twihs_master_read+0x38>
		val |= addr[1];
  401c86:	784e      	ldrb	r6, [r1, #1]
  401c88:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	if (len > 2) {
  401c8c:	2d02      	cmp	r5, #2
  401c8e:	dd04      	ble.n	401c9a <twihs_master_read+0x46>
		val |= addr[2];
  401c90:	7889      	ldrb	r1, [r1, #2]
  401c92:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  401c96:	e000      	b.n	401c9a <twihs_master_read+0x46>
		return 0;
  401c98:	2300      	movs	r3, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401c9a:	60c3      	str	r3, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  401c9c:	2301      	movs	r3, #1
  401c9e:	6003      	str	r3, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401ca0:	2502      	movs	r5, #2
  401ca2:	e012      	b.n	401cca <twihs_master_read+0x76>
  401ca4:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  401ca6:	f013 0f02 	tst.w	r3, #2
  401caa:	d01b      	beq.n	401ce4 <twihs_master_read+0x90>
		*buffer++ = p_twihs->TWIHS_RHR;
  401cac:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401cae:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401cb0:	6a03      	ldr	r3, [r0, #32]
  401cb2:	f013 0f01 	tst.w	r3, #1
  401cb6:	d0fb      	beq.n	401cb0 <twihs_master_read+0x5c>
	p_twihs->TWIHS_SR;
  401cb8:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  401cba:	2000      	movs	r0, #0
}
  401cbc:	bc70      	pop	{r4, r5, r6}
  401cbe:	4770      	bx	lr
		*buffer++ = p_twihs->TWIHS_RHR;
  401cc0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401cc2:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt > 0) {
  401cc6:	3a01      	subs	r2, #1
  401cc8:	d0f2      	beq.n	401cb0 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  401cca:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401ccc:	f413 7f80 	tst.w	r3, #256	; 0x100
  401cd0:	d114      	bne.n	401cfc <twihs_master_read+0xa8>
  401cd2:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  401cd6:	2a01      	cmp	r2, #1
  401cd8:	d0e4      	beq.n	401ca4 <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  401cda:	f013 0f02 	tst.w	r3, #2
  401cde:	d1ef      	bne.n	401cc0 <twihs_master_read+0x6c>
	while (cnt > 0) {
  401ce0:	2a00      	cmp	r2, #0
  401ce2:	d0e5      	beq.n	401cb0 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  401ce4:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401ce6:	f413 7f80 	tst.w	r3, #256	; 0x100
  401cea:	d105      	bne.n	401cf8 <twihs_master_read+0xa4>
		if (!timeout--) {
  401cec:	3901      	subs	r1, #1
  401cee:	d1f2      	bne.n	401cd6 <twihs_master_read+0x82>
			return TWIHS_ERROR_TIMEOUT;
  401cf0:	2009      	movs	r0, #9
  401cf2:	e7e3      	b.n	401cbc <twihs_master_read+0x68>
		return TWIHS_INVALID_ARGUMENT;
  401cf4:	2001      	movs	r0, #1
  401cf6:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401cf8:	2005      	movs	r0, #5
  401cfa:	e7df      	b.n	401cbc <twihs_master_read+0x68>
  401cfc:	2005      	movs	r0, #5
  401cfe:	e7dd      	b.n	401cbc <twihs_master_read+0x68>

00401d00 <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  401d00:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  401d02:	2b00      	cmp	r3, #0
  401d04:	d043      	beq.n	401d8e <twihs_master_write+0x8e>
{
  401d06:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401d08:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401d0a:	2600      	movs	r6, #0
  401d0c:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401d0e:	7c0a      	ldrb	r2, [r1, #16]
  401d10:	0412      	lsls	r2, r2, #16
  401d12:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401d16:	684d      	ldr	r5, [r1, #4]
  401d18:	022d      	lsls	r5, r5, #8
  401d1a:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401d1e:	432a      	orrs	r2, r5
  401d20:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401d22:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401d24:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  401d26:	b15d      	cbz	r5, 401d40 <twihs_master_write+0x40>
	val = addr[0];
  401d28:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  401d2a:	2d01      	cmp	r5, #1
  401d2c:	dd02      	ble.n	401d34 <twihs_master_write+0x34>
		val |= addr[1];
  401d2e:	784e      	ldrb	r6, [r1, #1]
  401d30:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  401d34:	2d02      	cmp	r5, #2
  401d36:	dd04      	ble.n	401d42 <twihs_master_write+0x42>
		val |= addr[2];
  401d38:	7889      	ldrb	r1, [r1, #2]
  401d3a:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  401d3e:	e000      	b.n	401d42 <twihs_master_write+0x42>
		return 0;
  401d40:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401d42:	60c2      	str	r2, [r0, #12]
  401d44:	e004      	b.n	401d50 <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  401d46:	f814 2b01 	ldrb.w	r2, [r4], #1
  401d4a:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  401d4c:	3b01      	subs	r3, #1
  401d4e:	d00f      	beq.n	401d70 <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  401d50:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401d52:	f412 7f80 	tst.w	r2, #256	; 0x100
  401d56:	d11e      	bne.n	401d96 <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  401d58:	f012 0f04 	tst.w	r2, #4
  401d5c:	d1f3      	bne.n	401d46 <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  401d5e:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401d60:	f412 7f80 	tst.w	r2, #256	; 0x100
  401d64:	d115      	bne.n	401d92 <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  401d66:	f012 0f04 	tst.w	r2, #4
  401d6a:	d1ec      	bne.n	401d46 <twihs_master_write+0x46>
	while (cnt > 0) {
  401d6c:	2b00      	cmp	r3, #0
  401d6e:	d1f6      	bne.n	401d5e <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  401d70:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401d72:	f413 7f80 	tst.w	r3, #256	; 0x100
  401d76:	d111      	bne.n	401d9c <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  401d78:	f013 0f04 	tst.w	r3, #4
  401d7c:	d0f8      	beq.n	401d70 <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401d7e:	2302      	movs	r3, #2
  401d80:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401d82:	6a03      	ldr	r3, [r0, #32]
  401d84:	f013 0f01 	tst.w	r3, #1
  401d88:	d0fb      	beq.n	401d82 <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  401d8a:	2000      	movs	r0, #0
  401d8c:	e004      	b.n	401d98 <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  401d8e:	2001      	movs	r0, #1
  401d90:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401d92:	2005      	movs	r0, #5
  401d94:	e000      	b.n	401d98 <twihs_master_write+0x98>
  401d96:	2005      	movs	r0, #5
}
  401d98:	bc70      	pop	{r4, r5, r6}
  401d9a:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401d9c:	2005      	movs	r0, #5
  401d9e:	e7fb      	b.n	401d98 <twihs_master_write+0x98>

00401da0 <xdmac_configure_transfer>:
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  401da0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  401da4:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  401da6:	6853      	ldr	r3, [r2, #4]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  401da8:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  401daa:	6893      	ldr	r3, [r2, #8]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  401dac:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  401dae:	6813      	ldr	r3, [r2, #0]
  401db0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401db4:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  401db6:	6913      	ldr	r3, [r2, #16]
  401db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
  401dbc:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  401dbe:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  401dc0:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  401dc2:	6993      	ldr	r3, [r2, #24]
  401dc4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401dc8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  401dcc:	69d3      	ldr	r3, [r2, #28]
  401dce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401dd2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  401dd6:	68d3      	ldr	r3, [r2, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  401dd8:	678b      	str	r3, [r1, #120]	; 0x78
  401dda:	4770      	bx	lr

00401ddc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401ddc:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401dde:	4810      	ldr	r0, [pc, #64]	; (401e20 <sysclk_init+0x44>)
  401de0:	4b10      	ldr	r3, [pc, #64]	; (401e24 <sysclk_init+0x48>)
  401de2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401de4:	213e      	movs	r1, #62	; 0x3e
  401de6:	2000      	movs	r0, #0
  401de8:	4b0f      	ldr	r3, [pc, #60]	; (401e28 <sysclk_init+0x4c>)
  401dea:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  401dec:	4c0f      	ldr	r4, [pc, #60]	; (401e2c <sysclk_init+0x50>)
  401dee:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  401df0:	2800      	cmp	r0, #0
  401df2:	d0fc      	beq.n	401dee <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  401df4:	4b0e      	ldr	r3, [pc, #56]	; (401e30 <sysclk_init+0x54>)
  401df6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401df8:	4a0e      	ldr	r2, [pc, #56]	; (401e34 <sysclk_init+0x58>)
  401dfa:	4b0f      	ldr	r3, [pc, #60]	; (401e38 <sysclk_init+0x5c>)
  401dfc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  401dfe:	4c0f      	ldr	r4, [pc, #60]	; (401e3c <sysclk_init+0x60>)
  401e00:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401e02:	2800      	cmp	r0, #0
  401e04:	d0fc      	beq.n	401e00 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  401e06:	2002      	movs	r0, #2
  401e08:	4b0d      	ldr	r3, [pc, #52]	; (401e40 <sysclk_init+0x64>)
  401e0a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401e0c:	2000      	movs	r0, #0
  401e0e:	4b0d      	ldr	r3, [pc, #52]	; (401e44 <sysclk_init+0x68>)
  401e10:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401e12:	4b0d      	ldr	r3, [pc, #52]	; (401e48 <sysclk_init+0x6c>)
  401e14:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401e16:	4802      	ldr	r0, [pc, #8]	; (401e20 <sysclk_init+0x44>)
  401e18:	4b02      	ldr	r3, [pc, #8]	; (401e24 <sysclk_init+0x48>)
  401e1a:	4798      	blx	r3
  401e1c:	bd10      	pop	{r4, pc}
  401e1e:	bf00      	nop
  401e20:	11e1a300 	.word	0x11e1a300
  401e24:	004028a1 	.word	0x004028a1
  401e28:	00402585 	.word	0x00402585
  401e2c:	004025d9 	.word	0x004025d9
  401e30:	004025e9 	.word	0x004025e9
  401e34:	20183f01 	.word	0x20183f01
  401e38:	400e0600 	.word	0x400e0600
  401e3c:	004025f9 	.word	0x004025f9
  401e40:	004024e9 	.word	0x004024e9
  401e44:	00402521 	.word	0x00402521
  401e48:	00402795 	.word	0x00402795

00401e4c <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  401e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401e4e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401e52:	4b99      	ldr	r3, [pc, #612]	; (4020b8 <board_init+0x26c>)
  401e54:	605a      	str	r2, [r3, #4]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401e56:	f3bf 8f5f 	dmb	sy
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  401e5a:	4f98      	ldr	r7, [pc, #608]	; (4020bc <board_init+0x270>)
  401e5c:	4638      	mov	r0, r7
  401e5e:	4d98      	ldr	r5, [pc, #608]	; (4020c0 <board_init+0x274>)
  401e60:	47a8      	blx	r5
	dw_region_attr =
  401e62:	4e98      	ldr	r6, [pc, #608]	; (4020c4 <board_init+0x278>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401e64:	ea40 0106 	orr.w	r1, r0, r6
  401e68:	2011      	movs	r0, #17
  401e6a:	4c97      	ldr	r4, [pc, #604]	; (4020c8 <board_init+0x27c>)
  401e6c:	47a0      	blx	r4
		mpu_cal_mpu_region_size(IFLASH_END_ADDRESS - IFLASH_START_ADDRESS) |
  401e6e:	4897      	ldr	r0, [pc, #604]	; (4020cc <board_init+0x280>)
  401e70:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401e72:	4997      	ldr	r1, [pc, #604]	; (4020d0 <board_init+0x284>)
  401e74:	4301      	orrs	r1, r0
  401e76:	4897      	ldr	r0, [pc, #604]	; (4020d4 <board_init+0x288>)
  401e78:	47a0      	blx	r4
		mpu_cal_mpu_region_size(DTCM_END_ADDRESS - DTCM_START_ADDRESS) |
  401e7a:	4638      	mov	r0, r7
  401e7c:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401e7e:	ea40 0106 	orr.w	r1, r0, r6
  401e82:	4895      	ldr	r0, [pc, #596]	; (4020d8 <board_init+0x28c>)
  401e84:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SRAM_FIRST_END_ADDRESS - SRAM_FIRST_START_ADDRESS)
  401e86:	4895      	ldr	r0, [pc, #596]	; (4020dc <board_init+0x290>)
  401e88:	47a8      	blx	r5
	dw_region_attr =
  401e8a:	f106 7608 	add.w	r6, r6, #35651584	; 0x2200000
  401e8e:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401e92:	ea40 0106 	orr.w	r1, r0, r6
  401e96:	4892      	ldr	r0, [pc, #584]	; (4020e0 <board_init+0x294>)
  401e98:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SRAM_SECOND_END_ADDRESS - SRAM_SECOND_START_ADDRESS) |
  401e9a:	4892      	ldr	r0, [pc, #584]	; (4020e4 <board_init+0x298>)
  401e9c:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401e9e:	ea40 0106 	orr.w	r1, r0, r6
  401ea2:	4891      	ldr	r0, [pc, #580]	; (4020e8 <board_init+0x29c>)
  401ea4:	47a0      	blx	r4
		mpu_cal_mpu_region_size(PERIPHERALS_END_ADDRESS - PERIPHERALS_START_ADDRESS)
  401ea6:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  401eaa:	47a8      	blx	r5
	dw_region_attr = MPU_AP_FULL_ACCESS |
  401eac:	4e8f      	ldr	r6, [pc, #572]	; (4020ec <board_init+0x2a0>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401eae:	ea40 0106 	orr.w	r1, r0, r6
  401eb2:	488f      	ldr	r0, [pc, #572]	; (4020f0 <board_init+0x2a4>)
  401eb4:	47a0      	blx	r4
		mpu_cal_mpu_region_size(EXT_EBI_END_ADDRESS - EXT_EBI_START_ADDRESS) |
  401eb6:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  401eba:	47a8      	blx	r5
	dw_region_attr =
  401ebc:	4f8d      	ldr	r7, [pc, #564]	; (4020f4 <board_init+0x2a8>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401ebe:	ea40 0107 	orr.w	r1, r0, r7
  401ec2:	488d      	ldr	r0, [pc, #564]	; (4020f8 <board_init+0x2ac>)
  401ec4:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SDRAM_END_ADDRESS - SDRAM_START_ADDRESS) |
  401ec6:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  401eca:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401ecc:	498b      	ldr	r1, [pc, #556]	; (4020fc <board_init+0x2b0>)
  401ece:	4301      	orrs	r1, r0
  401ed0:	488b      	ldr	r0, [pc, #556]	; (402100 <board_init+0x2b4>)
  401ed2:	47a0      	blx	r4
		mpu_cal_mpu_region_size(QSPI_END_ADDRESS - QSPI_START_ADDRESS) |
  401ed4:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  401ed8:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401eda:	ea40 0107 	orr.w	r1, r0, r7
  401ede:	4889      	ldr	r0, [pc, #548]	; (402104 <board_init+0x2b8>)
  401ee0:	47a0      	blx	r4
		mpu_cal_mpu_region_size(USBHSRAM_END_ADDRESS - USBHSRAM_START_ADDRESS) |
  401ee2:	4889      	ldr	r0, [pc, #548]	; (402108 <board_init+0x2bc>)
  401ee4:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401ee6:	ea40 0106 	orr.w	r1, r0, r6
  401eea:	4888      	ldr	r0, [pc, #544]	; (40210c <board_init+0x2c0>)
  401eec:	47a0      	blx	r4
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  401eee:	4c88      	ldr	r4, [pc, #544]	; (402110 <board_init+0x2c4>)
  401ef0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401ef2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
  401ef6:	6263      	str	r3, [r4, #36]	; 0x24
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  401ef8:	2005      	movs	r0, #5
  401efa:	4b86      	ldr	r3, [pc, #536]	; (402114 <board_init+0x2c8>)
  401efc:	4798      	blx	r3
  __ASM volatile ("dsb");
  401efe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401f02:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401f06:	4b84      	ldr	r3, [pc, #528]	; (402118 <board_init+0x2cc>)
  401f08:	4a84      	ldr	r2, [pc, #528]	; (40211c <board_init+0x2d0>)
  401f0a:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401f0c:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
  401f10:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  401f12:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401f16:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  401f1a:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  401f1e:	f023 0301 	bic.w	r3, r3, #1
  401f22:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  401f26:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
  401f2a:	f023 0301 	bic.w	r3, r3, #1
  401f2e:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  __ASM volatile ("dsb");
  401f32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401f36:	f3bf 8f6f 	isb	sy
  401f3a:	200a      	movs	r0, #10
  401f3c:	4c78      	ldr	r4, [pc, #480]	; (402120 <board_init+0x2d4>)
  401f3e:	47a0      	blx	r4
  401f40:	200b      	movs	r0, #11
  401f42:	47a0      	blx	r4
  401f44:	200c      	movs	r0, #12
  401f46:	47a0      	blx	r4
  401f48:	2010      	movs	r0, #16
  401f4a:	47a0      	blx	r4
  401f4c:	2011      	movs	r0, #17
  401f4e:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401f50:	4c74      	ldr	r4, [pc, #464]	; (402124 <board_init+0x2d8>)
  401f52:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  401f56:	6123      	str	r3, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401f58:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401f5c:	6323      	str	r3, [r4, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401f5e:	4e72      	ldr	r6, [pc, #456]	; (402128 <board_init+0x2dc>)
  401f60:	f44f 7500 	mov.w	r5, #512	; 0x200
  401f64:	6135      	str	r5, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401f66:	f8c6 50a0 	str.w	r5, [r6, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401f6a:	6335      	str	r5, [r6, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401f6c:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401f6e:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  401f72:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  401f74:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401f78:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  401f7a:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  401f7c:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  401f80:	6f23      	ldr	r3, [r4, #112]	; 0x70
  401f82:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  401f86:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401f88:	6f63      	ldr	r3, [r4, #116]	; 0x74
  401f8a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  401f8e:	6763      	str	r3, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  401f90:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  401f94:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  401f98:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  401f9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  401fa0:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401fa2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401fa6:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401fa8:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401faa:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401fae:	6f22      	ldr	r2, [r4, #112]	; 0x70
  401fb0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  401fb4:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401fb6:	6f62      	ldr	r2, [r4, #116]	; 0x74
  401fb8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  401fbc:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401fbe:	6063      	str	r3, [r4, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  401fc0:	4a5a      	ldr	r2, [pc, #360]	; (40212c <board_init+0x2e0>)
  401fc2:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  401fc6:	f043 0310 	orr.w	r3, r3, #16
  401fca:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  401fce:	f502 22b2 	add.w	r2, r2, #364544	; 0x59000
  401fd2:	2310      	movs	r3, #16
  401fd4:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401fd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  401fda:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  401fdc:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401fde:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401fe2:	6f11      	ldr	r1, [r2, #112]	; 0x70
  401fe4:	4319      	orrs	r1, r3
  401fe6:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401fe8:	6f51      	ldr	r1, [r2, #116]	; 0x74
  401fea:	4319      	orrs	r1, r3
  401fec:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401fee:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  401ff0:	2208      	movs	r2, #8
  401ff2:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401ff4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401ff8:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401ffa:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401ffc:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402000:	6f21      	ldr	r1, [r4, #112]	; 0x70
  402002:	f021 0108 	bic.w	r1, r1, #8
  402006:	6721      	str	r1, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402008:	6f61      	ldr	r1, [r4, #116]	; 0x74
  40200a:	f021 0108 	bic.w	r1, r1, #8
  40200e:	6761      	str	r1, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402010:	6062      	str	r2, [r4, #4]
		base->PIO_PUDR = mask;
  402012:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402014:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  402018:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40201a:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40201c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402020:	6f22      	ldr	r2, [r4, #112]	; 0x70
  402022:	f022 0210 	bic.w	r2, r2, #16
  402026:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402028:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40202a:	f022 0210 	bic.w	r2, r2, #16
  40202e:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402030:	6063      	str	r3, [r4, #4]
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  402032:	2300      	movs	r3, #0
  402034:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  402038:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40203c:	4630      	mov	r0, r6
  40203e:	4f3c      	ldr	r7, [pc, #240]	; (402130 <board_init+0x2e4>)
  402040:	47b8      	blx	r7
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  402042:	2300      	movs	r3, #0
  402044:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  402048:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40204c:	4630      	mov	r0, r6
  40204e:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  402050:	2301      	movs	r3, #1
  402052:	22ff      	movs	r2, #255	; 0xff
  402054:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402058:	4630      	mov	r0, r6
  40205a:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  40205c:	2301      	movs	r3, #1
  40205e:	223f      	movs	r2, #63	; 0x3f
  402060:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402064:	4833      	ldr	r0, [pc, #204]	; (402134 <board_init+0x2e8>)
  402066:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  402068:	2301      	movs	r3, #1
  40206a:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  40206e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402072:	4620      	mov	r0, r4
  402074:	47b8      	blx	r7
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  402076:	2301      	movs	r3, #1
  402078:	f44f 7280 	mov.w	r2, #256	; 0x100
  40207c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402080:	4630      	mov	r0, r6
  402082:	47b8      	blx	r7
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  402084:	2301      	movs	r3, #1
  402086:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40208a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40208e:	4630      	mov	r0, r6
  402090:	47b8      	blx	r7
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  402092:	2301      	movs	r3, #1
  402094:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402098:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40209c:	4826      	ldr	r0, [pc, #152]	; (402138 <board_init+0x2ec>)
  40209e:	47b8      	blx	r7
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  4020a0:	2300      	movs	r3, #0
  4020a2:	462a      	mov	r2, r5
  4020a4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4020a8:	4630      	mov	r0, r6
  4020aa:	47b8      	blx	r7
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  4020ac:	4629      	mov	r1, r5
  4020ae:	4630      	mov	r0, r6
  4020b0:	4b22      	ldr	r3, [pc, #136]	; (40213c <board_init+0x2f0>)
  4020b2:	4798      	blx	r3
  4020b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4020b6:	bf00      	nop
  4020b8:	400e1850 	.word	0x400e1850
  4020bc:	003fffff 	.word	0x003fffff
  4020c0:	00402159 	.word	0x00402159
  4020c4:	01000001 	.word	0x01000001
  4020c8:	0040214d 	.word	0x0040214d
  4020cc:	001fffff 	.word	0x001fffff
  4020d0:	06230001 	.word	0x06230001
  4020d4:	00400012 	.word	0x00400012
  4020d8:	20000013 	.word	0x20000013
  4020dc:	0003ffff 	.word	0x0003ffff
  4020e0:	20400014 	.word	0x20400014
  4020e4:	0001ffff 	.word	0x0001ffff
  4020e8:	20440015 	.word	0x20440015
  4020ec:	13010001 	.word	0x13010001
  4020f0:	40000016 	.word	0x40000016
  4020f4:	03000001 	.word	0x03000001
  4020f8:	60000017 	.word	0x60000017
  4020fc:	03250001 	.word	0x03250001
  402100:	70000018 	.word	0x70000018
  402104:	80000019 	.word	0x80000019
  402108:	000fffff 	.word	0x000fffff
  40210c:	a010001a 	.word	0xa010001a
  402110:	e000ed00 	.word	0xe000ed00
  402114:	00402141 	.word	0x00402141
  402118:	400e0c00 	.word	0x400e0c00
  40211c:	5a00080c 	.word	0x5a00080c
  402120:	00402609 	.word	0x00402609
  402124:	400e0e00 	.word	0x400e0e00
  402128:	400e1200 	.word	0x400e1200
  40212c:	40088000 	.word	0x40088000
  402130:	0040226d 	.word	0x0040226d
  402134:	400e1600 	.word	0x400e1600
  402138:	400e1400 	.word	0x400e1400
  40213c:	00402175 	.word	0x00402175

00402140 <mpu_enable>:
 *
 * \param dwMPUEnable  Enable/Disable the memory region.
 */
void mpu_enable(uint32_t dw_mpu_enable)
{
	MPU->CTRL = dw_mpu_enable ;
  402140:	4b01      	ldr	r3, [pc, #4]	; (402148 <mpu_enable+0x8>)
  402142:	6058      	str	r0, [r3, #4]
  402144:	4770      	bx	lr
  402146:	bf00      	nop
  402148:	e000ed90 	.word	0xe000ed90

0040214c <mpu_set_region>:
 * \param dwRegionBaseAddr  Memory region base address.
 * \param dwRegionAttr  Memory region attributes.
 */
void mpu_set_region(uint32_t dw_region_base_addr, uint32_t dw_region_attr)
{
	MPU->RBAR = dw_region_base_addr;
  40214c:	4b01      	ldr	r3, [pc, #4]	; (402154 <mpu_set_region+0x8>)
  40214e:	60d8      	str	r0, [r3, #12]
	MPU->RASR = dw_region_attr;
  402150:	6119      	str	r1, [r3, #16]
  402152:	4770      	bx	lr
  402154:	e000ed90 	.word	0xe000ed90

00402158 <mpu_cal_mpu_region_size>:
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;

	while( dwReturnValue < 31 ) {
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  402158:	2820      	cmp	r0, #32
  40215a:	d909      	bls.n	402170 <mpu_cal_mpu_region_size+0x18>
  40215c:	2304      	movs	r3, #4
  40215e:	2220      	movs	r2, #32
			break;
		} else {
			dwReturnValue++;
  402160:	3301      	adds	r3, #1
		}
		dwRegionSize <<= 1;
  402162:	0052      	lsls	r2, r2, #1
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  402164:	4290      	cmp	r0, r2
  402166:	d901      	bls.n	40216c <mpu_cal_mpu_region_size+0x14>
  402168:	2b1e      	cmp	r3, #30
  40216a:	d9f9      	bls.n	402160 <mpu_cal_mpu_region_size+0x8>
	}

	return ( dwReturnValue << 1 );
}
  40216c:	0058      	lsls	r0, r3, #1
  40216e:	4770      	bx	lr
	uint32_t dwReturnValue = 4;
  402170:	2304      	movs	r3, #4
  402172:	e7fb      	b.n	40216c <mpu_cal_mpu_region_size+0x14>

00402174 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  402174:	6301      	str	r1, [r0, #48]	; 0x30
  402176:	4770      	bx	lr

00402178 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  402178:	6341      	str	r1, [r0, #52]	; 0x34
  40217a:	4770      	bx	lr

0040217c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40217c:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40217e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  402182:	d03a      	beq.n	4021fa <pio_set_peripheral+0x7e>
  402184:	d813      	bhi.n	4021ae <pio_set_peripheral+0x32>
  402186:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40218a:	d025      	beq.n	4021d8 <pio_set_peripheral+0x5c>
  40218c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402190:	d10a      	bne.n	4021a8 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402192:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402194:	4313      	orrs	r3, r2
  402196:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402198:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40219a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40219c:	400b      	ands	r3, r1
  40219e:	ea23 0302 	bic.w	r3, r3, r2
  4021a2:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4021a4:	6042      	str	r2, [r0, #4]
  4021a6:	4770      	bx	lr
	switch (ul_type) {
  4021a8:	2900      	cmp	r1, #0
  4021aa:	d1fb      	bne.n	4021a4 <pio_set_peripheral+0x28>
  4021ac:	4770      	bx	lr
  4021ae:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4021b2:	d021      	beq.n	4021f8 <pio_set_peripheral+0x7c>
  4021b4:	d809      	bhi.n	4021ca <pio_set_peripheral+0x4e>
  4021b6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4021ba:	d1f3      	bne.n	4021a4 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4021bc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4021be:	4313      	orrs	r3, r2
  4021c0:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4021c2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4021c4:	4313      	orrs	r3, r2
  4021c6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4021c8:	e7ec      	b.n	4021a4 <pio_set_peripheral+0x28>
	switch (ul_type) {
  4021ca:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4021ce:	d013      	beq.n	4021f8 <pio_set_peripheral+0x7c>
  4021d0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4021d4:	d010      	beq.n	4021f8 <pio_set_peripheral+0x7c>
  4021d6:	e7e5      	b.n	4021a4 <pio_set_peripheral+0x28>
{
  4021d8:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4021da:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4021dc:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4021de:	43d3      	mvns	r3, r2
  4021e0:	4021      	ands	r1, r4
  4021e2:	461c      	mov	r4, r3
  4021e4:	4019      	ands	r1, r3
  4021e6:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4021e8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4021ea:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4021ec:	400b      	ands	r3, r1
  4021ee:	4023      	ands	r3, r4
  4021f0:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4021f2:	6042      	str	r2, [r0, #4]
}
  4021f4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4021f8:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4021fa:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4021fc:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4021fe:	400b      	ands	r3, r1
  402200:	ea23 0302 	bic.w	r3, r3, r2
  402204:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402206:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402208:	4313      	orrs	r3, r2
  40220a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40220c:	e7ca      	b.n	4021a4 <pio_set_peripheral+0x28>

0040220e <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40220e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  402210:	f012 0f01 	tst.w	r2, #1
  402214:	d10d      	bne.n	402232 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  402216:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402218:	f012 0f0a 	tst.w	r2, #10
  40221c:	d00b      	beq.n	402236 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  40221e:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  402220:	f012 0f02 	tst.w	r2, #2
  402224:	d109      	bne.n	40223a <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  402226:	f012 0f08 	tst.w	r2, #8
  40222a:	d008      	beq.n	40223e <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  40222c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  402230:	e005      	b.n	40223e <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  402232:	6641      	str	r1, [r0, #100]	; 0x64
  402234:	e7f0      	b.n	402218 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  402236:	6241      	str	r1, [r0, #36]	; 0x24
  402238:	e7f2      	b.n	402220 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  40223a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  40223e:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  402240:	6001      	str	r1, [r0, #0]
  402242:	4770      	bx	lr

00402244 <pio_set_output>:
{
  402244:	b410      	push	{r4}
  402246:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  402248:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40224a:	b94c      	cbnz	r4, 402260 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  40224c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  40224e:	b14b      	cbz	r3, 402264 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  402250:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  402252:	b94a      	cbnz	r2, 402268 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  402254:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  402256:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  402258:	6001      	str	r1, [r0, #0]
}
  40225a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40225e:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  402260:	6641      	str	r1, [r0, #100]	; 0x64
  402262:	e7f4      	b.n	40224e <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  402264:	6541      	str	r1, [r0, #84]	; 0x54
  402266:	e7f4      	b.n	402252 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  402268:	6301      	str	r1, [r0, #48]	; 0x30
  40226a:	e7f4      	b.n	402256 <pio_set_output+0x12>

0040226c <pio_configure>:
{
  40226c:	b570      	push	{r4, r5, r6, lr}
  40226e:	b082      	sub	sp, #8
  402270:	4605      	mov	r5, r0
  402272:	4616      	mov	r6, r2
  402274:	461c      	mov	r4, r3
	switch (ul_type) {
  402276:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40227a:	d014      	beq.n	4022a6 <pio_configure+0x3a>
  40227c:	d90a      	bls.n	402294 <pio_configure+0x28>
  40227e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  402282:	d024      	beq.n	4022ce <pio_configure+0x62>
  402284:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402288:	d021      	beq.n	4022ce <pio_configure+0x62>
  40228a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40228e:	d017      	beq.n	4022c0 <pio_configure+0x54>
		return 0;
  402290:	2000      	movs	r0, #0
  402292:	e01a      	b.n	4022ca <pio_configure+0x5e>
	switch (ul_type) {
  402294:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402298:	d005      	beq.n	4022a6 <pio_configure+0x3a>
  40229a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40229e:	d002      	beq.n	4022a6 <pio_configure+0x3a>
  4022a0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4022a4:	d1f4      	bne.n	402290 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  4022a6:	4632      	mov	r2, r6
  4022a8:	4628      	mov	r0, r5
  4022aa:	4b11      	ldr	r3, [pc, #68]	; (4022f0 <pio_configure+0x84>)
  4022ac:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4022ae:	f014 0f01 	tst.w	r4, #1
  4022b2:	d102      	bne.n	4022ba <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  4022b4:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  4022b6:	2001      	movs	r0, #1
  4022b8:	e007      	b.n	4022ca <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  4022ba:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  4022bc:	2001      	movs	r0, #1
  4022be:	e004      	b.n	4022ca <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  4022c0:	461a      	mov	r2, r3
  4022c2:	4631      	mov	r1, r6
  4022c4:	4b0b      	ldr	r3, [pc, #44]	; (4022f4 <pio_configure+0x88>)
  4022c6:	4798      	blx	r3
	return 1;
  4022c8:	2001      	movs	r0, #1
}
  4022ca:	b002      	add	sp, #8
  4022cc:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4022ce:	f004 0301 	and.w	r3, r4, #1
  4022d2:	9300      	str	r3, [sp, #0]
  4022d4:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4022d8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4022dc:	bf14      	ite	ne
  4022de:	2200      	movne	r2, #0
  4022e0:	2201      	moveq	r2, #1
  4022e2:	4631      	mov	r1, r6
  4022e4:	4628      	mov	r0, r5
  4022e6:	4c04      	ldr	r4, [pc, #16]	; (4022f8 <pio_configure+0x8c>)
  4022e8:	47a0      	blx	r4
	return 1;
  4022ea:	2001      	movs	r0, #1
		break;
  4022ec:	e7ed      	b.n	4022ca <pio_configure+0x5e>
  4022ee:	bf00      	nop
  4022f0:	0040217d 	.word	0x0040217d
  4022f4:	0040220f 	.word	0x0040220f
  4022f8:	00402245 	.word	0x00402245

004022fc <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4022fc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4022fe:	4770      	bx	lr

00402300 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  402300:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  402302:	4770      	bx	lr

00402304 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  402304:	b570      	push	{r4, r5, r6, lr}
  402306:	b082      	sub	sp, #8
  402308:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40230a:	4c46      	ldr	r4, [pc, #280]	; (402424 <pio_configure_pin+0x120>)
  40230c:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  402310:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  402312:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  402316:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40231a:	d059      	beq.n	4023d0 <pio_configure_pin+0xcc>
  40231c:	d80a      	bhi.n	402334 <pio_configure_pin+0x30>
  40231e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  402322:	d02f      	beq.n	402384 <pio_configure_pin+0x80>
  402324:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  402328:	d03f      	beq.n	4023aa <pio_configure_pin+0xa6>
  40232a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40232e:	d016      	beq.n	40235e <pio_configure_pin+0x5a>
		return 0;
  402330:	2000      	movs	r0, #0
  402332:	e012      	b.n	40235a <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  402334:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  402338:	d05d      	beq.n	4023f6 <pio_configure_pin+0xf2>
  40233a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40233e:	d05a      	beq.n	4023f6 <pio_configure_pin+0xf2>
  402340:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  402344:	d1f4      	bne.n	402330 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  402346:	f000 011f 	and.w	r1, r0, #31
  40234a:	2601      	movs	r6, #1
  40234c:	462a      	mov	r2, r5
  40234e:	fa06 f101 	lsl.w	r1, r6, r1
  402352:	4620      	mov	r0, r4
  402354:	4b34      	ldr	r3, [pc, #208]	; (402428 <pio_configure_pin+0x124>)
  402356:	4798      	blx	r3
	return 1;
  402358:	4630      	mov	r0, r6
}
  40235a:	b002      	add	sp, #8
  40235c:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40235e:	f000 001f 	and.w	r0, r0, #31
  402362:	2601      	movs	r6, #1
  402364:	4086      	lsls	r6, r0
  402366:	4632      	mov	r2, r6
  402368:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40236c:	4620      	mov	r0, r4
  40236e:	4b2f      	ldr	r3, [pc, #188]	; (40242c <pio_configure_pin+0x128>)
  402370:	4798      	blx	r3
	if (ul_pull_up_enable) {
  402372:	f015 0f01 	tst.w	r5, #1
  402376:	d102      	bne.n	40237e <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  402378:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  40237a:	2001      	movs	r0, #1
  40237c:	e7ed      	b.n	40235a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  40237e:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  402380:	2001      	movs	r0, #1
  402382:	e7ea      	b.n	40235a <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  402384:	f000 001f 	and.w	r0, r0, #31
  402388:	2601      	movs	r6, #1
  40238a:	4086      	lsls	r6, r0
  40238c:	4632      	mov	r2, r6
  40238e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402392:	4620      	mov	r0, r4
  402394:	4b25      	ldr	r3, [pc, #148]	; (40242c <pio_configure_pin+0x128>)
  402396:	4798      	blx	r3
	if (ul_pull_up_enable) {
  402398:	f015 0f01 	tst.w	r5, #1
  40239c:	d102      	bne.n	4023a4 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  40239e:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4023a0:	2001      	movs	r0, #1
  4023a2:	e7da      	b.n	40235a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4023a4:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4023a6:	2001      	movs	r0, #1
  4023a8:	e7d7      	b.n	40235a <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4023aa:	f000 001f 	and.w	r0, r0, #31
  4023ae:	2601      	movs	r6, #1
  4023b0:	4086      	lsls	r6, r0
  4023b2:	4632      	mov	r2, r6
  4023b4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4023b8:	4620      	mov	r0, r4
  4023ba:	4b1c      	ldr	r3, [pc, #112]	; (40242c <pio_configure_pin+0x128>)
  4023bc:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4023be:	f015 0f01 	tst.w	r5, #1
  4023c2:	d102      	bne.n	4023ca <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  4023c4:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4023c6:	2001      	movs	r0, #1
  4023c8:	e7c7      	b.n	40235a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4023ca:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4023cc:	2001      	movs	r0, #1
  4023ce:	e7c4      	b.n	40235a <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4023d0:	f000 001f 	and.w	r0, r0, #31
  4023d4:	2601      	movs	r6, #1
  4023d6:	4086      	lsls	r6, r0
  4023d8:	4632      	mov	r2, r6
  4023da:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4023de:	4620      	mov	r0, r4
  4023e0:	4b12      	ldr	r3, [pc, #72]	; (40242c <pio_configure_pin+0x128>)
  4023e2:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4023e4:	f015 0f01 	tst.w	r5, #1
  4023e8:	d102      	bne.n	4023f0 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  4023ea:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4023ec:	2001      	movs	r0, #1
  4023ee:	e7b4      	b.n	40235a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4023f0:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4023f2:	2001      	movs	r0, #1
  4023f4:	e7b1      	b.n	40235a <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4023f6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4023fa:	f000 011f 	and.w	r1, r0, #31
  4023fe:	2601      	movs	r6, #1
  402400:	ea05 0306 	and.w	r3, r5, r6
  402404:	9300      	str	r3, [sp, #0]
  402406:	f3c5 0380 	ubfx	r3, r5, #2, #1
  40240a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  40240e:	bf14      	ite	ne
  402410:	2200      	movne	r2, #0
  402412:	2201      	moveq	r2, #1
  402414:	fa06 f101 	lsl.w	r1, r6, r1
  402418:	4620      	mov	r0, r4
  40241a:	4c05      	ldr	r4, [pc, #20]	; (402430 <pio_configure_pin+0x12c>)
  40241c:	47a0      	blx	r4
	return 1;
  40241e:	4630      	mov	r0, r6
		break;
  402420:	e79b      	b.n	40235a <pio_configure_pin+0x56>
  402422:	bf00      	nop
  402424:	00200707 	.word	0x00200707
  402428:	0040220f 	.word	0x0040220f
  40242c:	0040217d 	.word	0x0040217d
  402430:	00402245 	.word	0x00402245

00402434 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  402434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402438:	4604      	mov	r4, r0
  40243a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40243c:	4b0e      	ldr	r3, [pc, #56]	; (402478 <pio_handler_process+0x44>)
  40243e:	4798      	blx	r3
  402440:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  402442:	4620      	mov	r0, r4
  402444:	4b0d      	ldr	r3, [pc, #52]	; (40247c <pio_handler_process+0x48>)
  402446:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  402448:	4005      	ands	r5, r0
  40244a:	d013      	beq.n	402474 <pio_handler_process+0x40>
  40244c:	4c0c      	ldr	r4, [pc, #48]	; (402480 <pio_handler_process+0x4c>)
  40244e:	f104 0660 	add.w	r6, r4, #96	; 0x60
  402452:	e003      	b.n	40245c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  402454:	42b4      	cmp	r4, r6
  402456:	d00d      	beq.n	402474 <pio_handler_process+0x40>
  402458:	3410      	adds	r4, #16
		while (status != 0) {
  40245a:	b15d      	cbz	r5, 402474 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  40245c:	6820      	ldr	r0, [r4, #0]
  40245e:	4540      	cmp	r0, r8
  402460:	d1f8      	bne.n	402454 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402462:	6861      	ldr	r1, [r4, #4]
  402464:	4229      	tst	r1, r5
  402466:	d0f5      	beq.n	402454 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402468:	68e3      	ldr	r3, [r4, #12]
  40246a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40246c:	6863      	ldr	r3, [r4, #4]
  40246e:	ea25 0503 	bic.w	r5, r5, r3
  402472:	e7ef      	b.n	402454 <pio_handler_process+0x20>
  402474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402478:	004022fd 	.word	0x004022fd
  40247c:	00402301 	.word	0x00402301
  402480:	20400d18 	.word	0x20400d18

00402484 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  402484:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  402486:	210a      	movs	r1, #10
  402488:	4801      	ldr	r0, [pc, #4]	; (402490 <PIOA_Handler+0xc>)
  40248a:	4b02      	ldr	r3, [pc, #8]	; (402494 <PIOA_Handler+0x10>)
  40248c:	4798      	blx	r3
  40248e:	bd08      	pop	{r3, pc}
  402490:	400e0e00 	.word	0x400e0e00
  402494:	00402435 	.word	0x00402435

00402498 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  402498:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40249a:	210b      	movs	r1, #11
  40249c:	4801      	ldr	r0, [pc, #4]	; (4024a4 <PIOB_Handler+0xc>)
  40249e:	4b02      	ldr	r3, [pc, #8]	; (4024a8 <PIOB_Handler+0x10>)
  4024a0:	4798      	blx	r3
  4024a2:	bd08      	pop	{r3, pc}
  4024a4:	400e1000 	.word	0x400e1000
  4024a8:	00402435 	.word	0x00402435

004024ac <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4024ac:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4024ae:	210c      	movs	r1, #12
  4024b0:	4801      	ldr	r0, [pc, #4]	; (4024b8 <PIOC_Handler+0xc>)
  4024b2:	4b02      	ldr	r3, [pc, #8]	; (4024bc <PIOC_Handler+0x10>)
  4024b4:	4798      	blx	r3
  4024b6:	bd08      	pop	{r3, pc}
  4024b8:	400e1200 	.word	0x400e1200
  4024bc:	00402435 	.word	0x00402435

004024c0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4024c0:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4024c2:	2110      	movs	r1, #16
  4024c4:	4801      	ldr	r0, [pc, #4]	; (4024cc <PIOD_Handler+0xc>)
  4024c6:	4b02      	ldr	r3, [pc, #8]	; (4024d0 <PIOD_Handler+0x10>)
  4024c8:	4798      	blx	r3
  4024ca:	bd08      	pop	{r3, pc}
  4024cc:	400e1400 	.word	0x400e1400
  4024d0:	00402435 	.word	0x00402435

004024d4 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4024d4:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4024d6:	2111      	movs	r1, #17
  4024d8:	4801      	ldr	r0, [pc, #4]	; (4024e0 <PIOE_Handler+0xc>)
  4024da:	4b02      	ldr	r3, [pc, #8]	; (4024e4 <PIOE_Handler+0x10>)
  4024dc:	4798      	blx	r3
  4024de:	bd08      	pop	{r3, pc}
  4024e0:	400e1600 	.word	0x400e1600
  4024e4:	00402435 	.word	0x00402435

004024e8 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4024e8:	2803      	cmp	r0, #3
  4024ea:	d011      	beq.n	402510 <pmc_mck_set_division+0x28>
  4024ec:	2804      	cmp	r0, #4
  4024ee:	d012      	beq.n	402516 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4024f0:	2802      	cmp	r0, #2
  4024f2:	bf0c      	ite	eq
  4024f4:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4024f8:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4024fa:	4a08      	ldr	r2, [pc, #32]	; (40251c <pmc_mck_set_division+0x34>)
  4024fc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4024fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  402502:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  402504:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402506:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402508:	f013 0f08 	tst.w	r3, #8
  40250c:	d0fb      	beq.n	402506 <pmc_mck_set_division+0x1e>
}
  40250e:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  402510:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  402514:	e7f1      	b.n	4024fa <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  402516:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40251a:	e7ee      	b.n	4024fa <pmc_mck_set_division+0x12>
  40251c:	400e0600 	.word	0x400e0600

00402520 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402520:	4a17      	ldr	r2, [pc, #92]	; (402580 <pmc_switch_mck_to_pllack+0x60>)
  402522:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402528:	4318      	orrs	r0, r3
  40252a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40252c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40252e:	f013 0f08 	tst.w	r3, #8
  402532:	d10a      	bne.n	40254a <pmc_switch_mck_to_pllack+0x2a>
  402534:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402538:	4911      	ldr	r1, [pc, #68]	; (402580 <pmc_switch_mck_to_pllack+0x60>)
  40253a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40253c:	f012 0f08 	tst.w	r2, #8
  402540:	d103      	bne.n	40254a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402542:	3b01      	subs	r3, #1
  402544:	d1f9      	bne.n	40253a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  402546:	2001      	movs	r0, #1
  402548:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40254a:	4a0d      	ldr	r2, [pc, #52]	; (402580 <pmc_switch_mck_to_pllack+0x60>)
  40254c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40254e:	f023 0303 	bic.w	r3, r3, #3
  402552:	f043 0302 	orr.w	r3, r3, #2
  402556:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402558:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40255a:	f013 0f08 	tst.w	r3, #8
  40255e:	d10a      	bne.n	402576 <pmc_switch_mck_to_pllack+0x56>
  402560:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402564:	4906      	ldr	r1, [pc, #24]	; (402580 <pmc_switch_mck_to_pllack+0x60>)
  402566:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402568:	f012 0f08 	tst.w	r2, #8
  40256c:	d105      	bne.n	40257a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40256e:	3b01      	subs	r3, #1
  402570:	d1f9      	bne.n	402566 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  402572:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  402574:	4770      	bx	lr
	return 0;
  402576:	2000      	movs	r0, #0
  402578:	4770      	bx	lr
  40257a:	2000      	movs	r0, #0
  40257c:	4770      	bx	lr
  40257e:	bf00      	nop
  402580:	400e0600 	.word	0x400e0600

00402584 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402584:	b9a0      	cbnz	r0, 4025b0 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402586:	480e      	ldr	r0, [pc, #56]	; (4025c0 <pmc_switch_mainck_to_xtal+0x3c>)
  402588:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40258a:	0209      	lsls	r1, r1, #8
  40258c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40258e:	4a0d      	ldr	r2, [pc, #52]	; (4025c4 <pmc_switch_mainck_to_xtal+0x40>)
  402590:	401a      	ands	r2, r3
  402592:	4b0d      	ldr	r3, [pc, #52]	; (4025c8 <pmc_switch_mainck_to_xtal+0x44>)
  402594:	4313      	orrs	r3, r2
  402596:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402598:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40259a:	4602      	mov	r2, r0
  40259c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40259e:	f013 0f01 	tst.w	r3, #1
  4025a2:	d0fb      	beq.n	40259c <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4025a4:	4a06      	ldr	r2, [pc, #24]	; (4025c0 <pmc_switch_mainck_to_xtal+0x3c>)
  4025a6:	6a11      	ldr	r1, [r2, #32]
  4025a8:	4b08      	ldr	r3, [pc, #32]	; (4025cc <pmc_switch_mainck_to_xtal+0x48>)
  4025aa:	430b      	orrs	r3, r1
  4025ac:	6213      	str	r3, [r2, #32]
  4025ae:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4025b0:	4903      	ldr	r1, [pc, #12]	; (4025c0 <pmc_switch_mainck_to_xtal+0x3c>)
  4025b2:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4025b4:	4a06      	ldr	r2, [pc, #24]	; (4025d0 <pmc_switch_mainck_to_xtal+0x4c>)
  4025b6:	401a      	ands	r2, r3
  4025b8:	4b06      	ldr	r3, [pc, #24]	; (4025d4 <pmc_switch_mainck_to_xtal+0x50>)
  4025ba:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4025bc:	620b      	str	r3, [r1, #32]
  4025be:	4770      	bx	lr
  4025c0:	400e0600 	.word	0x400e0600
  4025c4:	ffc8fffc 	.word	0xffc8fffc
  4025c8:	00370001 	.word	0x00370001
  4025cc:	01370000 	.word	0x01370000
  4025d0:	fec8fffc 	.word	0xfec8fffc
  4025d4:	01370002 	.word	0x01370002

004025d8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4025d8:	4b02      	ldr	r3, [pc, #8]	; (4025e4 <pmc_osc_is_ready_mainck+0xc>)
  4025da:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4025dc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4025e0:	4770      	bx	lr
  4025e2:	bf00      	nop
  4025e4:	400e0600 	.word	0x400e0600

004025e8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4025e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4025ec:	4b01      	ldr	r3, [pc, #4]	; (4025f4 <pmc_disable_pllack+0xc>)
  4025ee:	629a      	str	r2, [r3, #40]	; 0x28
  4025f0:	4770      	bx	lr
  4025f2:	bf00      	nop
  4025f4:	400e0600 	.word	0x400e0600

004025f8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4025f8:	4b02      	ldr	r3, [pc, #8]	; (402604 <pmc_is_locked_pllack+0xc>)
  4025fa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4025fc:	f000 0002 	and.w	r0, r0, #2
  402600:	4770      	bx	lr
  402602:	bf00      	nop
  402604:	400e0600 	.word	0x400e0600

00402608 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  402608:	283f      	cmp	r0, #63	; 0x3f
  40260a:	d81e      	bhi.n	40264a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  40260c:	281f      	cmp	r0, #31
  40260e:	d80c      	bhi.n	40262a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402610:	4b11      	ldr	r3, [pc, #68]	; (402658 <pmc_enable_periph_clk+0x50>)
  402612:	699a      	ldr	r2, [r3, #24]
  402614:	2301      	movs	r3, #1
  402616:	4083      	lsls	r3, r0
  402618:	4393      	bics	r3, r2
  40261a:	d018      	beq.n	40264e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  40261c:	2301      	movs	r3, #1
  40261e:	fa03 f000 	lsl.w	r0, r3, r0
  402622:	4b0d      	ldr	r3, [pc, #52]	; (402658 <pmc_enable_periph_clk+0x50>)
  402624:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402626:	2000      	movs	r0, #0
  402628:	4770      	bx	lr
		ul_id -= 32;
  40262a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40262c:	4b0a      	ldr	r3, [pc, #40]	; (402658 <pmc_enable_periph_clk+0x50>)
  40262e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  402632:	2301      	movs	r3, #1
  402634:	4083      	lsls	r3, r0
  402636:	4393      	bics	r3, r2
  402638:	d00b      	beq.n	402652 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40263a:	2301      	movs	r3, #1
  40263c:	fa03 f000 	lsl.w	r0, r3, r0
  402640:	4b05      	ldr	r3, [pc, #20]	; (402658 <pmc_enable_periph_clk+0x50>)
  402642:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  402646:	2000      	movs	r0, #0
  402648:	4770      	bx	lr
		return 1;
  40264a:	2001      	movs	r0, #1
  40264c:	4770      	bx	lr
	return 0;
  40264e:	2000      	movs	r0, #0
  402650:	4770      	bx	lr
  402652:	2000      	movs	r0, #0
}
  402654:	4770      	bx	lr
  402656:	bf00      	nop
  402658:	400e0600 	.word	0x400e0600

0040265c <pmc_pck_set_prescaler>:
 *
 * \param ul_id Peripheral ID.
 * \param ul_pres Prescaler value.
 */
void pmc_pck_set_prescaler(uint32_t ul_id, uint32_t ul_pres)
{
  40265c:	4a09      	ldr	r2, [pc, #36]	; (402684 <pmc_pck_set_prescaler+0x28>)
  40265e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
	PMC->PMC_PCK[ul_id] =
			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_PRES_Msk) | ul_pres;
  402662:	6c13      	ldr	r3, [r2, #64]	; 0x40
  402664:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
  402668:	4319      	orrs	r1, r3
	PMC->PMC_PCK[ul_id] =
  40266a:	6411      	str	r1, [r2, #64]	; 0x40
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  40266c:	f44f 7380 	mov.w	r3, #256	; 0x100
  402670:	fa03 f000 	lsl.w	r0, r3, r0
  402674:	4b03      	ldr	r3, [pc, #12]	; (402684 <pmc_pck_set_prescaler+0x28>)
  402676:	681a      	ldr	r2, [r3, #0]
  402678:	4202      	tst	r2, r0
  40267a:	d002      	beq.n	402682 <pmc_pck_set_prescaler+0x26>
			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
  40267c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  40267e:	4210      	tst	r0, r2
  402680:	d0f9      	beq.n	402676 <pmc_pck_set_prescaler+0x1a>
  402682:	4770      	bx	lr
  402684:	400e0600 	.word	0x400e0600

00402688 <pmc_pck_set_source>:
 *
 * \param ul_id Peripheral ID.
 * \param ul_source Source selection value.
 */
void pmc_pck_set_source(uint32_t ul_id, uint32_t ul_source)
{
  402688:	4a09      	ldr	r2, [pc, #36]	; (4026b0 <pmc_pck_set_source+0x28>)
  40268a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
	PMC->PMC_PCK[ul_id] =
			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_CSS_Msk) | ul_source;
  40268e:	6c13      	ldr	r3, [r2, #64]	; 0x40
  402690:	f023 0307 	bic.w	r3, r3, #7
  402694:	4319      	orrs	r1, r3
	PMC->PMC_PCK[ul_id] =
  402696:	6411      	str	r1, [r2, #64]	; 0x40
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  402698:	f44f 7380 	mov.w	r3, #256	; 0x100
  40269c:	fa03 f000 	lsl.w	r0, r3, r0
  4026a0:	4b03      	ldr	r3, [pc, #12]	; (4026b0 <pmc_pck_set_source+0x28>)
  4026a2:	681a      	ldr	r2, [r3, #0]
  4026a4:	4202      	tst	r2, r0
  4026a6:	d002      	beq.n	4026ae <pmc_pck_set_source+0x26>
			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
  4026a8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  4026aa:	4210      	tst	r0, r2
  4026ac:	d0f9      	beq.n	4026a2 <pmc_pck_set_source+0x1a>
  4026ae:	4770      	bx	lr
  4026b0:	400e0600 	.word	0x400e0600

004026b4 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  4026b4:	f44f 7380 	mov.w	r3, #256	; 0x100
  4026b8:	fa03 f000 	lsl.w	r0, r3, r0
  4026bc:	4b01      	ldr	r3, [pc, #4]	; (4026c4 <pmc_enable_pck+0x10>)
  4026be:	6018      	str	r0, [r3, #0]
  4026c0:	4770      	bx	lr
  4026c2:	bf00      	nop
  4026c4:	400e0600 	.word	0x400e0600

004026c8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4026c8:	e7fe      	b.n	4026c8 <Dummy_Handler>

004026ca <Dummy_Handler2>:
	while (1) {
	}
}

void Dummy_Handler2(void)
{
  4026ca:	e7fe      	b.n	4026ca <Dummy_Handler2>

004026cc <Reset_Handler>:
{
  4026cc:	b500      	push	{lr}
  4026ce:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4026d0:	4b25      	ldr	r3, [pc, #148]	; (402768 <Reset_Handler+0x9c>)
  4026d2:	4a26      	ldr	r2, [pc, #152]	; (40276c <Reset_Handler+0xa0>)
  4026d4:	429a      	cmp	r2, r3
  4026d6:	d010      	beq.n	4026fa <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4026d8:	4b25      	ldr	r3, [pc, #148]	; (402770 <Reset_Handler+0xa4>)
  4026da:	4a23      	ldr	r2, [pc, #140]	; (402768 <Reset_Handler+0x9c>)
  4026dc:	429a      	cmp	r2, r3
  4026de:	d20c      	bcs.n	4026fa <Reset_Handler+0x2e>
  4026e0:	3b01      	subs	r3, #1
  4026e2:	1a9b      	subs	r3, r3, r2
  4026e4:	f023 0303 	bic.w	r3, r3, #3
  4026e8:	3304      	adds	r3, #4
  4026ea:	4413      	add	r3, r2
  4026ec:	491f      	ldr	r1, [pc, #124]	; (40276c <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4026ee:	f851 0b04 	ldr.w	r0, [r1], #4
  4026f2:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4026f6:	429a      	cmp	r2, r3
  4026f8:	d1f9      	bne.n	4026ee <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4026fa:	4b1e      	ldr	r3, [pc, #120]	; (402774 <Reset_Handler+0xa8>)
  4026fc:	4a1e      	ldr	r2, [pc, #120]	; (402778 <Reset_Handler+0xac>)
  4026fe:	429a      	cmp	r2, r3
  402700:	d20a      	bcs.n	402718 <Reset_Handler+0x4c>
  402702:	3b01      	subs	r3, #1
  402704:	1a9b      	subs	r3, r3, r2
  402706:	f023 0303 	bic.w	r3, r3, #3
  40270a:	3304      	adds	r3, #4
  40270c:	4413      	add	r3, r2
                *pDest++ = 0;
  40270e:	2100      	movs	r1, #0
  402710:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  402714:	4293      	cmp	r3, r2
  402716:	d1fb      	bne.n	402710 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  402718:	4a18      	ldr	r2, [pc, #96]	; (40277c <Reset_Handler+0xb0>)
  40271a:	4b19      	ldr	r3, [pc, #100]	; (402780 <Reset_Handler+0xb4>)
  40271c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402720:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402722:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402726:	fab3 f383 	clz	r3, r3
  40272a:	095b      	lsrs	r3, r3, #5
  40272c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40272e:	b672      	cpsid	i
  __ASM volatile ("dmb");
  402730:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402734:	2200      	movs	r2, #0
  402736:	4b13      	ldr	r3, [pc, #76]	; (402784 <Reset_Handler+0xb8>)
  402738:	701a      	strb	r2, [r3, #0]
	return flags;
  40273a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  40273c:	4a12      	ldr	r2, [pc, #72]	; (402788 <Reset_Handler+0xbc>)
  40273e:	6813      	ldr	r3, [r2, #0]
  402740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  402744:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  402746:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40274a:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40274e:	b129      	cbz	r1, 40275c <Reset_Handler+0x90>
		cpu_irq_enable();
  402750:	2201      	movs	r2, #1
  402752:	4b0c      	ldr	r3, [pc, #48]	; (402784 <Reset_Handler+0xb8>)
  402754:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  402756:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40275a:	b662      	cpsie	i
        __libc_init_array();
  40275c:	4b0b      	ldr	r3, [pc, #44]	; (40278c <Reset_Handler+0xc0>)
  40275e:	4798      	blx	r3
        main();
  402760:	4b0b      	ldr	r3, [pc, #44]	; (402790 <Reset_Handler+0xc4>)
  402762:	4798      	blx	r3
  402764:	e7fe      	b.n	402764 <Reset_Handler+0x98>
  402766:	bf00      	nop
  402768:	20400000 	.word	0x20400000
  40276c:	00409d2c 	.word	0x00409d2c
  402770:	204009f0 	.word	0x204009f0
  402774:	20403008 	.word	0x20403008
  402778:	204009f0 	.word	0x204009f0
  40277c:	e000ed00 	.word	0xe000ed00
  402780:	00400000 	.word	0x00400000
  402784:	20400034 	.word	0x20400034
  402788:	e000ed88 	.word	0xe000ed88
  40278c:	00403411 	.word	0x00403411
  402790:	0040297d 	.word	0x0040297d

00402794 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  402794:	4b3b      	ldr	r3, [pc, #236]	; (402884 <SystemCoreClockUpdate+0xf0>)
  402796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402798:	f003 0303 	and.w	r3, r3, #3
  40279c:	2b01      	cmp	r3, #1
  40279e:	d01d      	beq.n	4027dc <SystemCoreClockUpdate+0x48>
  4027a0:	b183      	cbz	r3, 4027c4 <SystemCoreClockUpdate+0x30>
  4027a2:	2b02      	cmp	r3, #2
  4027a4:	d036      	beq.n	402814 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4027a6:	4b37      	ldr	r3, [pc, #220]	; (402884 <SystemCoreClockUpdate+0xf0>)
  4027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4027aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4027ae:	2b70      	cmp	r3, #112	; 0x70
  4027b0:	d05f      	beq.n	402872 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4027b2:	4b34      	ldr	r3, [pc, #208]	; (402884 <SystemCoreClockUpdate+0xf0>)
  4027b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4027b6:	4934      	ldr	r1, [pc, #208]	; (402888 <SystemCoreClockUpdate+0xf4>)
  4027b8:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4027bc:	680b      	ldr	r3, [r1, #0]
  4027be:	40d3      	lsrs	r3, r2
  4027c0:	600b      	str	r3, [r1, #0]
  4027c2:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4027c4:	4b31      	ldr	r3, [pc, #196]	; (40288c <SystemCoreClockUpdate+0xf8>)
  4027c6:	695b      	ldr	r3, [r3, #20]
  4027c8:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4027cc:	bf14      	ite	ne
  4027ce:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4027d2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4027d6:	4b2c      	ldr	r3, [pc, #176]	; (402888 <SystemCoreClockUpdate+0xf4>)
  4027d8:	601a      	str	r2, [r3, #0]
  4027da:	e7e4      	b.n	4027a6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4027dc:	4b29      	ldr	r3, [pc, #164]	; (402884 <SystemCoreClockUpdate+0xf0>)
  4027de:	6a1b      	ldr	r3, [r3, #32]
  4027e0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4027e4:	d003      	beq.n	4027ee <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4027e6:	4a2a      	ldr	r2, [pc, #168]	; (402890 <SystemCoreClockUpdate+0xfc>)
  4027e8:	4b27      	ldr	r3, [pc, #156]	; (402888 <SystemCoreClockUpdate+0xf4>)
  4027ea:	601a      	str	r2, [r3, #0]
  4027ec:	e7db      	b.n	4027a6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4027ee:	4a29      	ldr	r2, [pc, #164]	; (402894 <SystemCoreClockUpdate+0x100>)
  4027f0:	4b25      	ldr	r3, [pc, #148]	; (402888 <SystemCoreClockUpdate+0xf4>)
  4027f2:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4027f4:	4b23      	ldr	r3, [pc, #140]	; (402884 <SystemCoreClockUpdate+0xf0>)
  4027f6:	6a1b      	ldr	r3, [r3, #32]
  4027f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4027fc:	2b10      	cmp	r3, #16
  4027fe:	d005      	beq.n	40280c <SystemCoreClockUpdate+0x78>
  402800:	2b20      	cmp	r3, #32
  402802:	d1d0      	bne.n	4027a6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  402804:	4a22      	ldr	r2, [pc, #136]	; (402890 <SystemCoreClockUpdate+0xfc>)
  402806:	4b20      	ldr	r3, [pc, #128]	; (402888 <SystemCoreClockUpdate+0xf4>)
  402808:	601a      	str	r2, [r3, #0]
          break;
  40280a:	e7cc      	b.n	4027a6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  40280c:	4a22      	ldr	r2, [pc, #136]	; (402898 <SystemCoreClockUpdate+0x104>)
  40280e:	4b1e      	ldr	r3, [pc, #120]	; (402888 <SystemCoreClockUpdate+0xf4>)
  402810:	601a      	str	r2, [r3, #0]
          break;
  402812:	e7c8      	b.n	4027a6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402814:	4b1b      	ldr	r3, [pc, #108]	; (402884 <SystemCoreClockUpdate+0xf0>)
  402816:	6a1b      	ldr	r3, [r3, #32]
  402818:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40281c:	d016      	beq.n	40284c <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40281e:	4a1c      	ldr	r2, [pc, #112]	; (402890 <SystemCoreClockUpdate+0xfc>)
  402820:	4b19      	ldr	r3, [pc, #100]	; (402888 <SystemCoreClockUpdate+0xf4>)
  402822:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  402824:	4b17      	ldr	r3, [pc, #92]	; (402884 <SystemCoreClockUpdate+0xf0>)
  402826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402828:	f003 0303 	and.w	r3, r3, #3
  40282c:	2b02      	cmp	r3, #2
  40282e:	d1ba      	bne.n	4027a6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402830:	4a14      	ldr	r2, [pc, #80]	; (402884 <SystemCoreClockUpdate+0xf0>)
  402832:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402834:	6a92      	ldr	r2, [r2, #40]	; 0x28
  402836:	4814      	ldr	r0, [pc, #80]	; (402888 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402838:	f3c1 410a 	ubfx	r1, r1, #16, #11
  40283c:	6803      	ldr	r3, [r0, #0]
  40283e:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402842:	b2d2      	uxtb	r2, r2
  402844:	fbb3 f3f2 	udiv	r3, r3, r2
  402848:	6003      	str	r3, [r0, #0]
  40284a:	e7ac      	b.n	4027a6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40284c:	4a11      	ldr	r2, [pc, #68]	; (402894 <SystemCoreClockUpdate+0x100>)
  40284e:	4b0e      	ldr	r3, [pc, #56]	; (402888 <SystemCoreClockUpdate+0xf4>)
  402850:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402852:	4b0c      	ldr	r3, [pc, #48]	; (402884 <SystemCoreClockUpdate+0xf0>)
  402854:	6a1b      	ldr	r3, [r3, #32]
  402856:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40285a:	2b10      	cmp	r3, #16
  40285c:	d005      	beq.n	40286a <SystemCoreClockUpdate+0xd6>
  40285e:	2b20      	cmp	r3, #32
  402860:	d1e0      	bne.n	402824 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  402862:	4a0b      	ldr	r2, [pc, #44]	; (402890 <SystemCoreClockUpdate+0xfc>)
  402864:	4b08      	ldr	r3, [pc, #32]	; (402888 <SystemCoreClockUpdate+0xf4>)
  402866:	601a      	str	r2, [r3, #0]
          break;
  402868:	e7dc      	b.n	402824 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40286a:	4a0b      	ldr	r2, [pc, #44]	; (402898 <SystemCoreClockUpdate+0x104>)
  40286c:	4b06      	ldr	r3, [pc, #24]	; (402888 <SystemCoreClockUpdate+0xf4>)
  40286e:	601a      	str	r2, [r3, #0]
          break;
  402870:	e7d8      	b.n	402824 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  402872:	4a05      	ldr	r2, [pc, #20]	; (402888 <SystemCoreClockUpdate+0xf4>)
  402874:	6813      	ldr	r3, [r2, #0]
  402876:	4909      	ldr	r1, [pc, #36]	; (40289c <SystemCoreClockUpdate+0x108>)
  402878:	fba1 1303 	umull	r1, r3, r1, r3
  40287c:	085b      	lsrs	r3, r3, #1
  40287e:	6013      	str	r3, [r2, #0]
  402880:	4770      	bx	lr
  402882:	bf00      	nop
  402884:	400e0600 	.word	0x400e0600
  402888:	20400038 	.word	0x20400038
  40288c:	400e1810 	.word	0x400e1810
  402890:	00b71b00 	.word	0x00b71b00
  402894:	003d0900 	.word	0x003d0900
  402898:	007a1200 	.word	0x007a1200
  40289c:	aaaaaaab 	.word	0xaaaaaaab

004028a0 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4028a0:	4b16      	ldr	r3, [pc, #88]	; (4028fc <system_init_flash+0x5c>)
  4028a2:	4298      	cmp	r0, r3
  4028a4:	d913      	bls.n	4028ce <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4028a6:	4b16      	ldr	r3, [pc, #88]	; (402900 <system_init_flash+0x60>)
  4028a8:	4298      	cmp	r0, r3
  4028aa:	d915      	bls.n	4028d8 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4028ac:	4b15      	ldr	r3, [pc, #84]	; (402904 <system_init_flash+0x64>)
  4028ae:	4298      	cmp	r0, r3
  4028b0:	d916      	bls.n	4028e0 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4028b2:	4b15      	ldr	r3, [pc, #84]	; (402908 <system_init_flash+0x68>)
  4028b4:	4298      	cmp	r0, r3
  4028b6:	d917      	bls.n	4028e8 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4028b8:	4b14      	ldr	r3, [pc, #80]	; (40290c <system_init_flash+0x6c>)
  4028ba:	4298      	cmp	r0, r3
  4028bc:	d918      	bls.n	4028f0 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4028be:	4b14      	ldr	r3, [pc, #80]	; (402910 <system_init_flash+0x70>)
  4028c0:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4028c2:	bf94      	ite	ls
  4028c4:	4a13      	ldrls	r2, [pc, #76]	; (402914 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4028c6:	4a14      	ldrhi	r2, [pc, #80]	; (402918 <system_init_flash+0x78>)
  4028c8:	4b14      	ldr	r3, [pc, #80]	; (40291c <system_init_flash+0x7c>)
  4028ca:	601a      	str	r2, [r3, #0]
  4028cc:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4028ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4028d2:	4b12      	ldr	r3, [pc, #72]	; (40291c <system_init_flash+0x7c>)
  4028d4:	601a      	str	r2, [r3, #0]
  4028d6:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4028d8:	4a11      	ldr	r2, [pc, #68]	; (402920 <system_init_flash+0x80>)
  4028da:	4b10      	ldr	r3, [pc, #64]	; (40291c <system_init_flash+0x7c>)
  4028dc:	601a      	str	r2, [r3, #0]
  4028de:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4028e0:	4a10      	ldr	r2, [pc, #64]	; (402924 <system_init_flash+0x84>)
  4028e2:	4b0e      	ldr	r3, [pc, #56]	; (40291c <system_init_flash+0x7c>)
  4028e4:	601a      	str	r2, [r3, #0]
  4028e6:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4028e8:	4a0f      	ldr	r2, [pc, #60]	; (402928 <system_init_flash+0x88>)
  4028ea:	4b0c      	ldr	r3, [pc, #48]	; (40291c <system_init_flash+0x7c>)
  4028ec:	601a      	str	r2, [r3, #0]
  4028ee:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4028f0:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4028f4:	4b09      	ldr	r3, [pc, #36]	; (40291c <system_init_flash+0x7c>)
  4028f6:	601a      	str	r2, [r3, #0]
  4028f8:	4770      	bx	lr
  4028fa:	bf00      	nop
  4028fc:	015ef3bf 	.word	0x015ef3bf
  402900:	02bde77f 	.word	0x02bde77f
  402904:	041cdb3f 	.word	0x041cdb3f
  402908:	057bceff 	.word	0x057bceff
  40290c:	06dac2bf 	.word	0x06dac2bf
  402910:	0839b67f 	.word	0x0839b67f
  402914:	04000500 	.word	0x04000500
  402918:	04000600 	.word	0x04000600
  40291c:	400e0c00 	.word	0x400e0c00
  402920:	04000100 	.word	0x04000100
  402924:	04000200 	.word	0x04000200
  402928:	04000300 	.word	0x04000300

0040292c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  40292c:	4b0a      	ldr	r3, [pc, #40]	; (402958 <_sbrk+0x2c>)
  40292e:	681b      	ldr	r3, [r3, #0]
  402930:	b153      	cbz	r3, 402948 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  402932:	4b09      	ldr	r3, [pc, #36]	; (402958 <_sbrk+0x2c>)
  402934:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  402936:	181a      	adds	r2, r3, r0
  402938:	4908      	ldr	r1, [pc, #32]	; (40295c <_sbrk+0x30>)
  40293a:	4291      	cmp	r1, r2
  40293c:	db08      	blt.n	402950 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  40293e:	4610      	mov	r0, r2
  402940:	4a05      	ldr	r2, [pc, #20]	; (402958 <_sbrk+0x2c>)
  402942:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  402944:	4618      	mov	r0, r3
  402946:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  402948:	4a05      	ldr	r2, [pc, #20]	; (402960 <_sbrk+0x34>)
  40294a:	4b03      	ldr	r3, [pc, #12]	; (402958 <_sbrk+0x2c>)
  40294c:	601a      	str	r2, [r3, #0]
  40294e:	e7f0      	b.n	402932 <_sbrk+0x6>
		return (caddr_t) -1;	
  402950:	f04f 30ff 	mov.w	r0, #4294967295
}
  402954:	4770      	bx	lr
  402956:	bf00      	nop
  402958:	20400d88 	.word	0x20400d88
  40295c:	2045fffc 	.word	0x2045fffc
  402960:	20405208 	.word	0x20405208

00402964 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  402964:	f04f 30ff 	mov.w	r0, #4294967295
  402968:	4770      	bx	lr

0040296a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40296a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40296e:	604b      	str	r3, [r1, #4]

	return 0;
}
  402970:	2000      	movs	r0, #0
  402972:	4770      	bx	lr

00402974 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  402974:	2001      	movs	r0, #1
  402976:	4770      	bx	lr

00402978 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  402978:	2000      	movs	r0, #0
  40297a:	4770      	bx	lr

0040297c <main>:
extern volatile bool outOfTime; 
static volatile float32_t oldPitch = 0.0;
static volatile float32_t pitch = -1;
static volatile int lcd_refresh = 0;
int main(void)
{
  40297c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  402980:	b08b      	sub	sp, #44	; 0x2c
	sysclk_init();
  402982:	4b36      	ldr	r3, [pc, #216]	; (402a5c <main+0xe0>)
  402984:	4798      	blx	r3
	board_init();
  402986:	4b36      	ldr	r3, [pc, #216]	; (402a60 <main+0xe4>)
  402988:	4798      	blx	r3
	lcd_init(); 
  40298a:	4b36      	ldr	r3, [pc, #216]	; (402a64 <main+0xe8>)
  40298c:	4798      	blx	r3
	Yin_init(PITCH_BUF_SIZE, YIN_DEFAULT_THRESHOLD);
  40298e:	4936      	ldr	r1, [pc, #216]	; (402a68 <main+0xec>)
  402990:	f44f 60c8 	mov.w	r0, #1600	; 0x640
  402994:	4b35      	ldr	r3, [pc, #212]	; (402a6c <main+0xf0>)
  402996:	4798      	blx	r3
	audio_init();
  402998:	4b35      	ldr	r3, [pc, #212]	; (402a70 <main+0xf4>)
  40299a:	4798      	blx	r3

	//start_gatorscribe();
	int16_t *audio; 
	while(1)
	{
		lcd_refresh++;
  40299c:	4c35      	ldr	r4, [pc, #212]	; (402a74 <main+0xf8>)
		if (lcd_refresh == LCD_DELAY)
		{
			if ((int)oldPitch != (int)pitch)
  40299e:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 402a94 <main+0x118>
  4029a2:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 402a98 <main+0x11c>
				TEXT_POS_LEFT, TEXT_ALIGN_LEFT);
				oldPitch = pitch;
			}
			lcd_refresh = 0;
		}
		if (dataReceived)
  4029a6:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 402a9c <main+0x120>
  4029aa:	e005      	b.n	4029b8 <main+0x3c>
			lcd_refresh = 0;
  4029ac:	2300      	movs	r3, #0
  4029ae:	6023      	str	r3, [r4, #0]
		if (dataReceived)
  4029b0:	f89a 3000 	ldrb.w	r3, [sl]
  4029b4:	2b00      	cmp	r3, #0
  4029b6:	d147      	bne.n	402a48 <main+0xcc>
		lcd_refresh++;
  4029b8:	6823      	ldr	r3, [r4, #0]
  4029ba:	3301      	adds	r3, #1
  4029bc:	6023      	str	r3, [r4, #0]
		if (lcd_refresh == LCD_DELAY)
  4029be:	6823      	ldr	r3, [r4, #0]
  4029c0:	2b32      	cmp	r3, #50	; 0x32
  4029c2:	d1f5      	bne.n	4029b0 <main+0x34>
			if ((int)oldPitch != (int)pitch)
  4029c4:	ed9b 7a00 	vldr	s14, [fp]
  4029c8:	edd9 7a00 	vldr	s15, [r9]
  4029cc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  4029d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  4029d4:	ee17 3a10 	vmov	r3, s14
  4029d8:	ee17 2a90 	vmov	r2, s15
  4029dc:	4293      	cmp	r3, r2
  4029de:	d0e5      	beq.n	4029ac <main+0x30>
				sprintf(str, " %.2f", oldPitch);
  4029e0:	f8db 0000 	ldr.w	r0, [fp]
  4029e4:	4b24      	ldr	r3, [pc, #144]	; (402a78 <main+0xfc>)
  4029e6:	4798      	blx	r3
  4029e8:	4602      	mov	r2, r0
  4029ea:	460b      	mov	r3, r1
  4029ec:	4923      	ldr	r1, [pc, #140]	; (402a7c <main+0x100>)
  4029ee:	a805      	add	r0, sp, #20
  4029f0:	4f23      	ldr	r7, [pc, #140]	; (402a80 <main+0x104>)
  4029f2:	47b8      	blx	r7
				gfx_draw_string_aligned((const char *)str,
  4029f4:	2500      	movs	r5, #0
  4029f6:	9503      	str	r5, [sp, #12]
  4029f8:	2308      	movs	r3, #8
  4029fa:	9302      	str	r3, [sp, #8]
  4029fc:	9501      	str	r5, [sp, #4]
  4029fe:	f24f 081e 	movw	r8, #61470	; 0xf01e
  402a02:	f8cd 8000 	str.w	r8, [sp]
  402a06:	4b1f      	ldr	r3, [pc, #124]	; (402a84 <main+0x108>)
  402a08:	2296      	movs	r2, #150	; 0x96
  402a0a:	4611      	mov	r1, r2
  402a0c:	a805      	add	r0, sp, #20
  402a0e:	4e1e      	ldr	r6, [pc, #120]	; (402a88 <main+0x10c>)
  402a10:	47b0      	blx	r6
				sprintf(str, " %.2f", pitch);
  402a12:	f8d9 0000 	ldr.w	r0, [r9]
  402a16:	4b18      	ldr	r3, [pc, #96]	; (402a78 <main+0xfc>)
  402a18:	4798      	blx	r3
  402a1a:	4602      	mov	r2, r0
  402a1c:	460b      	mov	r3, r1
  402a1e:	4917      	ldr	r1, [pc, #92]	; (402a7c <main+0x100>)
  402a20:	a805      	add	r0, sp, #20
  402a22:	47b8      	blx	r7
				gfx_draw_string_aligned((const char *)str,
  402a24:	9503      	str	r5, [sp, #12]
  402a26:	2308      	movs	r3, #8
  402a28:	9302      	str	r3, [sp, #8]
  402a2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  402a2e:	9301      	str	r3, [sp, #4]
  402a30:	f8cd 8000 	str.w	r8, [sp]
  402a34:	4b13      	ldr	r3, [pc, #76]	; (402a84 <main+0x108>)
  402a36:	2296      	movs	r2, #150	; 0x96
  402a38:	4611      	mov	r1, r2
  402a3a:	a805      	add	r0, sp, #20
  402a3c:	47b0      	blx	r6
				oldPitch = pitch;
  402a3e:	f8d9 3000 	ldr.w	r3, [r9]
  402a42:	f8cb 3000 	str.w	r3, [fp]
  402a46:	e7b1      	b.n	4029ac <main+0x30>
		{
			

			pitch = Yin_getPitch((int16_t *)processBuffer);
  402a48:	4b10      	ldr	r3, [pc, #64]	; (402a8c <main+0x110>)
  402a4a:	6818      	ldr	r0, [r3, #0]
  402a4c:	4b10      	ldr	r3, [pc, #64]	; (402a90 <main+0x114>)
  402a4e:	4798      	blx	r3
  402a50:	f8c9 0000 	str.w	r0, [r9]
			
			
			dataReceived = false; 
  402a54:	2300      	movs	r3, #0
  402a56:	f88a 3000 	strb.w	r3, [sl]
  402a5a:	e7ad      	b.n	4029b8 <main+0x3c>
  402a5c:	00401ddd 	.word	0x00401ddd
  402a60:	00401e4d 	.word	0x00401e4d
  402a64:	00400ba1 	.word	0x00400ba1
  402a68:	3d4ccccd 	.word	0x3d4ccccd
  402a6c:	00400d55 	.word	0x00400d55
  402a70:	00400429 	.word	0x00400429
  402a74:	20400d8c 	.word	0x20400d8c
  402a78:	00402d69 	.word	0x00402d69
  402a7c:	00409a4c 	.word	0x00409a4c
  402a80:	00403ad1 	.word	0x00403ad1
  402a84:	20400028 	.word	0x20400028
  402a88:	00400a51 	.word	0x00400a51
  402a8c:	20400020 	.word	0x20400020
  402a90:	00400d81 	.word	0x00400d81
  402a94:	20400d90 	.word	0x20400d90
  402a98:	2040003c 	.word	0x2040003c
  402a9c:	20400a0c 	.word	0x20400a0c

00402aa0 <__aeabi_drsub>:
  402aa0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  402aa4:	e002      	b.n	402aac <__adddf3>
  402aa6:	bf00      	nop

00402aa8 <__aeabi_dsub>:
  402aa8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00402aac <__adddf3>:
  402aac:	b530      	push	{r4, r5, lr}
  402aae:	ea4f 0441 	mov.w	r4, r1, lsl #1
  402ab2:	ea4f 0543 	mov.w	r5, r3, lsl #1
  402ab6:	ea94 0f05 	teq	r4, r5
  402aba:	bf08      	it	eq
  402abc:	ea90 0f02 	teqeq	r0, r2
  402ac0:	bf1f      	itttt	ne
  402ac2:	ea54 0c00 	orrsne.w	ip, r4, r0
  402ac6:	ea55 0c02 	orrsne.w	ip, r5, r2
  402aca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  402ace:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402ad2:	f000 80e2 	beq.w	402c9a <__adddf3+0x1ee>
  402ad6:	ea4f 5454 	mov.w	r4, r4, lsr #21
  402ada:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  402ade:	bfb8      	it	lt
  402ae0:	426d      	neglt	r5, r5
  402ae2:	dd0c      	ble.n	402afe <__adddf3+0x52>
  402ae4:	442c      	add	r4, r5
  402ae6:	ea80 0202 	eor.w	r2, r0, r2
  402aea:	ea81 0303 	eor.w	r3, r1, r3
  402aee:	ea82 0000 	eor.w	r0, r2, r0
  402af2:	ea83 0101 	eor.w	r1, r3, r1
  402af6:	ea80 0202 	eor.w	r2, r0, r2
  402afa:	ea81 0303 	eor.w	r3, r1, r3
  402afe:	2d36      	cmp	r5, #54	; 0x36
  402b00:	bf88      	it	hi
  402b02:	bd30      	pophi	{r4, r5, pc}
  402b04:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402b08:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402b0c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  402b10:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  402b14:	d002      	beq.n	402b1c <__adddf3+0x70>
  402b16:	4240      	negs	r0, r0
  402b18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402b1c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  402b20:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402b24:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  402b28:	d002      	beq.n	402b30 <__adddf3+0x84>
  402b2a:	4252      	negs	r2, r2
  402b2c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  402b30:	ea94 0f05 	teq	r4, r5
  402b34:	f000 80a7 	beq.w	402c86 <__adddf3+0x1da>
  402b38:	f1a4 0401 	sub.w	r4, r4, #1
  402b3c:	f1d5 0e20 	rsbs	lr, r5, #32
  402b40:	db0d      	blt.n	402b5e <__adddf3+0xb2>
  402b42:	fa02 fc0e 	lsl.w	ip, r2, lr
  402b46:	fa22 f205 	lsr.w	r2, r2, r5
  402b4a:	1880      	adds	r0, r0, r2
  402b4c:	f141 0100 	adc.w	r1, r1, #0
  402b50:	fa03 f20e 	lsl.w	r2, r3, lr
  402b54:	1880      	adds	r0, r0, r2
  402b56:	fa43 f305 	asr.w	r3, r3, r5
  402b5a:	4159      	adcs	r1, r3
  402b5c:	e00e      	b.n	402b7c <__adddf3+0xd0>
  402b5e:	f1a5 0520 	sub.w	r5, r5, #32
  402b62:	f10e 0e20 	add.w	lr, lr, #32
  402b66:	2a01      	cmp	r2, #1
  402b68:	fa03 fc0e 	lsl.w	ip, r3, lr
  402b6c:	bf28      	it	cs
  402b6e:	f04c 0c02 	orrcs.w	ip, ip, #2
  402b72:	fa43 f305 	asr.w	r3, r3, r5
  402b76:	18c0      	adds	r0, r0, r3
  402b78:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  402b7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402b80:	d507      	bpl.n	402b92 <__adddf3+0xe6>
  402b82:	f04f 0e00 	mov.w	lr, #0
  402b86:	f1dc 0c00 	rsbs	ip, ip, #0
  402b8a:	eb7e 0000 	sbcs.w	r0, lr, r0
  402b8e:	eb6e 0101 	sbc.w	r1, lr, r1
  402b92:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  402b96:	d31b      	bcc.n	402bd0 <__adddf3+0x124>
  402b98:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  402b9c:	d30c      	bcc.n	402bb8 <__adddf3+0x10c>
  402b9e:	0849      	lsrs	r1, r1, #1
  402ba0:	ea5f 0030 	movs.w	r0, r0, rrx
  402ba4:	ea4f 0c3c 	mov.w	ip, ip, rrx
  402ba8:	f104 0401 	add.w	r4, r4, #1
  402bac:	ea4f 5244 	mov.w	r2, r4, lsl #21
  402bb0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  402bb4:	f080 809a 	bcs.w	402cec <__adddf3+0x240>
  402bb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  402bbc:	bf08      	it	eq
  402bbe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402bc2:	f150 0000 	adcs.w	r0, r0, #0
  402bc6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402bca:	ea41 0105 	orr.w	r1, r1, r5
  402bce:	bd30      	pop	{r4, r5, pc}
  402bd0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  402bd4:	4140      	adcs	r0, r0
  402bd6:	eb41 0101 	adc.w	r1, r1, r1
  402bda:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402bde:	f1a4 0401 	sub.w	r4, r4, #1
  402be2:	d1e9      	bne.n	402bb8 <__adddf3+0x10c>
  402be4:	f091 0f00 	teq	r1, #0
  402be8:	bf04      	itt	eq
  402bea:	4601      	moveq	r1, r0
  402bec:	2000      	moveq	r0, #0
  402bee:	fab1 f381 	clz	r3, r1
  402bf2:	bf08      	it	eq
  402bf4:	3320      	addeq	r3, #32
  402bf6:	f1a3 030b 	sub.w	r3, r3, #11
  402bfa:	f1b3 0220 	subs.w	r2, r3, #32
  402bfe:	da0c      	bge.n	402c1a <__adddf3+0x16e>
  402c00:	320c      	adds	r2, #12
  402c02:	dd08      	ble.n	402c16 <__adddf3+0x16a>
  402c04:	f102 0c14 	add.w	ip, r2, #20
  402c08:	f1c2 020c 	rsb	r2, r2, #12
  402c0c:	fa01 f00c 	lsl.w	r0, r1, ip
  402c10:	fa21 f102 	lsr.w	r1, r1, r2
  402c14:	e00c      	b.n	402c30 <__adddf3+0x184>
  402c16:	f102 0214 	add.w	r2, r2, #20
  402c1a:	bfd8      	it	le
  402c1c:	f1c2 0c20 	rsble	ip, r2, #32
  402c20:	fa01 f102 	lsl.w	r1, r1, r2
  402c24:	fa20 fc0c 	lsr.w	ip, r0, ip
  402c28:	bfdc      	itt	le
  402c2a:	ea41 010c 	orrle.w	r1, r1, ip
  402c2e:	4090      	lslle	r0, r2
  402c30:	1ae4      	subs	r4, r4, r3
  402c32:	bfa2      	ittt	ge
  402c34:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  402c38:	4329      	orrge	r1, r5
  402c3a:	bd30      	popge	{r4, r5, pc}
  402c3c:	ea6f 0404 	mvn.w	r4, r4
  402c40:	3c1f      	subs	r4, #31
  402c42:	da1c      	bge.n	402c7e <__adddf3+0x1d2>
  402c44:	340c      	adds	r4, #12
  402c46:	dc0e      	bgt.n	402c66 <__adddf3+0x1ba>
  402c48:	f104 0414 	add.w	r4, r4, #20
  402c4c:	f1c4 0220 	rsb	r2, r4, #32
  402c50:	fa20 f004 	lsr.w	r0, r0, r4
  402c54:	fa01 f302 	lsl.w	r3, r1, r2
  402c58:	ea40 0003 	orr.w	r0, r0, r3
  402c5c:	fa21 f304 	lsr.w	r3, r1, r4
  402c60:	ea45 0103 	orr.w	r1, r5, r3
  402c64:	bd30      	pop	{r4, r5, pc}
  402c66:	f1c4 040c 	rsb	r4, r4, #12
  402c6a:	f1c4 0220 	rsb	r2, r4, #32
  402c6e:	fa20 f002 	lsr.w	r0, r0, r2
  402c72:	fa01 f304 	lsl.w	r3, r1, r4
  402c76:	ea40 0003 	orr.w	r0, r0, r3
  402c7a:	4629      	mov	r1, r5
  402c7c:	bd30      	pop	{r4, r5, pc}
  402c7e:	fa21 f004 	lsr.w	r0, r1, r4
  402c82:	4629      	mov	r1, r5
  402c84:	bd30      	pop	{r4, r5, pc}
  402c86:	f094 0f00 	teq	r4, #0
  402c8a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  402c8e:	bf06      	itte	eq
  402c90:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  402c94:	3401      	addeq	r4, #1
  402c96:	3d01      	subne	r5, #1
  402c98:	e74e      	b.n	402b38 <__adddf3+0x8c>
  402c9a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402c9e:	bf18      	it	ne
  402ca0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402ca4:	d029      	beq.n	402cfa <__adddf3+0x24e>
  402ca6:	ea94 0f05 	teq	r4, r5
  402caa:	bf08      	it	eq
  402cac:	ea90 0f02 	teqeq	r0, r2
  402cb0:	d005      	beq.n	402cbe <__adddf3+0x212>
  402cb2:	ea54 0c00 	orrs.w	ip, r4, r0
  402cb6:	bf04      	itt	eq
  402cb8:	4619      	moveq	r1, r3
  402cba:	4610      	moveq	r0, r2
  402cbc:	bd30      	pop	{r4, r5, pc}
  402cbe:	ea91 0f03 	teq	r1, r3
  402cc2:	bf1e      	ittt	ne
  402cc4:	2100      	movne	r1, #0
  402cc6:	2000      	movne	r0, #0
  402cc8:	bd30      	popne	{r4, r5, pc}
  402cca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  402cce:	d105      	bne.n	402cdc <__adddf3+0x230>
  402cd0:	0040      	lsls	r0, r0, #1
  402cd2:	4149      	adcs	r1, r1
  402cd4:	bf28      	it	cs
  402cd6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  402cda:	bd30      	pop	{r4, r5, pc}
  402cdc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  402ce0:	bf3c      	itt	cc
  402ce2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  402ce6:	bd30      	popcc	{r4, r5, pc}
  402ce8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402cec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  402cf0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402cf4:	f04f 0000 	mov.w	r0, #0
  402cf8:	bd30      	pop	{r4, r5, pc}
  402cfa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402cfe:	bf1a      	itte	ne
  402d00:	4619      	movne	r1, r3
  402d02:	4610      	movne	r0, r2
  402d04:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  402d08:	bf1c      	itt	ne
  402d0a:	460b      	movne	r3, r1
  402d0c:	4602      	movne	r2, r0
  402d0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402d12:	bf06      	itte	eq
  402d14:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  402d18:	ea91 0f03 	teqeq	r1, r3
  402d1c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  402d20:	bd30      	pop	{r4, r5, pc}
  402d22:	bf00      	nop

00402d24 <__aeabi_ui2d>:
  402d24:	f090 0f00 	teq	r0, #0
  402d28:	bf04      	itt	eq
  402d2a:	2100      	moveq	r1, #0
  402d2c:	4770      	bxeq	lr
  402d2e:	b530      	push	{r4, r5, lr}
  402d30:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402d34:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402d38:	f04f 0500 	mov.w	r5, #0
  402d3c:	f04f 0100 	mov.w	r1, #0
  402d40:	e750      	b.n	402be4 <__adddf3+0x138>
  402d42:	bf00      	nop

00402d44 <__aeabi_i2d>:
  402d44:	f090 0f00 	teq	r0, #0
  402d48:	bf04      	itt	eq
  402d4a:	2100      	moveq	r1, #0
  402d4c:	4770      	bxeq	lr
  402d4e:	b530      	push	{r4, r5, lr}
  402d50:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402d54:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402d58:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  402d5c:	bf48      	it	mi
  402d5e:	4240      	negmi	r0, r0
  402d60:	f04f 0100 	mov.w	r1, #0
  402d64:	e73e      	b.n	402be4 <__adddf3+0x138>
  402d66:	bf00      	nop

00402d68 <__aeabi_f2d>:
  402d68:	0042      	lsls	r2, r0, #1
  402d6a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  402d6e:	ea4f 0131 	mov.w	r1, r1, rrx
  402d72:	ea4f 7002 	mov.w	r0, r2, lsl #28
  402d76:	bf1f      	itttt	ne
  402d78:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  402d7c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402d80:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  402d84:	4770      	bxne	lr
  402d86:	f092 0f00 	teq	r2, #0
  402d8a:	bf14      	ite	ne
  402d8c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402d90:	4770      	bxeq	lr
  402d92:	b530      	push	{r4, r5, lr}
  402d94:	f44f 7460 	mov.w	r4, #896	; 0x380
  402d98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402d9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402da0:	e720      	b.n	402be4 <__adddf3+0x138>
  402da2:	bf00      	nop

00402da4 <__aeabi_ul2d>:
  402da4:	ea50 0201 	orrs.w	r2, r0, r1
  402da8:	bf08      	it	eq
  402daa:	4770      	bxeq	lr
  402dac:	b530      	push	{r4, r5, lr}
  402dae:	f04f 0500 	mov.w	r5, #0
  402db2:	e00a      	b.n	402dca <__aeabi_l2d+0x16>

00402db4 <__aeabi_l2d>:
  402db4:	ea50 0201 	orrs.w	r2, r0, r1
  402db8:	bf08      	it	eq
  402dba:	4770      	bxeq	lr
  402dbc:	b530      	push	{r4, r5, lr}
  402dbe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  402dc2:	d502      	bpl.n	402dca <__aeabi_l2d+0x16>
  402dc4:	4240      	negs	r0, r0
  402dc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402dca:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402dce:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402dd2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  402dd6:	f43f aedc 	beq.w	402b92 <__adddf3+0xe6>
  402dda:	f04f 0203 	mov.w	r2, #3
  402dde:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402de2:	bf18      	it	ne
  402de4:	3203      	addne	r2, #3
  402de6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402dea:	bf18      	it	ne
  402dec:	3203      	addne	r2, #3
  402dee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  402df2:	f1c2 0320 	rsb	r3, r2, #32
  402df6:	fa00 fc03 	lsl.w	ip, r0, r3
  402dfa:	fa20 f002 	lsr.w	r0, r0, r2
  402dfe:	fa01 fe03 	lsl.w	lr, r1, r3
  402e02:	ea40 000e 	orr.w	r0, r0, lr
  402e06:	fa21 f102 	lsr.w	r1, r1, r2
  402e0a:	4414      	add	r4, r2
  402e0c:	e6c1      	b.n	402b92 <__adddf3+0xe6>
  402e0e:	bf00      	nop

00402e10 <__aeabi_dmul>:
  402e10:	b570      	push	{r4, r5, r6, lr}
  402e12:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402e16:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402e1a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402e1e:	bf1d      	ittte	ne
  402e20:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402e24:	ea94 0f0c 	teqne	r4, ip
  402e28:	ea95 0f0c 	teqne	r5, ip
  402e2c:	f000 f8de 	bleq	402fec <__aeabi_dmul+0x1dc>
  402e30:	442c      	add	r4, r5
  402e32:	ea81 0603 	eor.w	r6, r1, r3
  402e36:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  402e3a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  402e3e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  402e42:	bf18      	it	ne
  402e44:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  402e48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402e4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402e50:	d038      	beq.n	402ec4 <__aeabi_dmul+0xb4>
  402e52:	fba0 ce02 	umull	ip, lr, r0, r2
  402e56:	f04f 0500 	mov.w	r5, #0
  402e5a:	fbe1 e502 	umlal	lr, r5, r1, r2
  402e5e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  402e62:	fbe0 e503 	umlal	lr, r5, r0, r3
  402e66:	f04f 0600 	mov.w	r6, #0
  402e6a:	fbe1 5603 	umlal	r5, r6, r1, r3
  402e6e:	f09c 0f00 	teq	ip, #0
  402e72:	bf18      	it	ne
  402e74:	f04e 0e01 	orrne.w	lr, lr, #1
  402e78:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  402e7c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  402e80:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  402e84:	d204      	bcs.n	402e90 <__aeabi_dmul+0x80>
  402e86:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  402e8a:	416d      	adcs	r5, r5
  402e8c:	eb46 0606 	adc.w	r6, r6, r6
  402e90:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  402e94:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  402e98:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  402e9c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  402ea0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  402ea4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402ea8:	bf88      	it	hi
  402eaa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402eae:	d81e      	bhi.n	402eee <__aeabi_dmul+0xde>
  402eb0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  402eb4:	bf08      	it	eq
  402eb6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  402eba:	f150 0000 	adcs.w	r0, r0, #0
  402ebe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402ec2:	bd70      	pop	{r4, r5, r6, pc}
  402ec4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  402ec8:	ea46 0101 	orr.w	r1, r6, r1
  402ecc:	ea40 0002 	orr.w	r0, r0, r2
  402ed0:	ea81 0103 	eor.w	r1, r1, r3
  402ed4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  402ed8:	bfc2      	ittt	gt
  402eda:	ebd4 050c 	rsbsgt	r5, r4, ip
  402ede:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402ee2:	bd70      	popgt	{r4, r5, r6, pc}
  402ee4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402ee8:	f04f 0e00 	mov.w	lr, #0
  402eec:	3c01      	subs	r4, #1
  402eee:	f300 80ab 	bgt.w	403048 <__aeabi_dmul+0x238>
  402ef2:	f114 0f36 	cmn.w	r4, #54	; 0x36
  402ef6:	bfde      	ittt	le
  402ef8:	2000      	movle	r0, #0
  402efa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  402efe:	bd70      	pople	{r4, r5, r6, pc}
  402f00:	f1c4 0400 	rsb	r4, r4, #0
  402f04:	3c20      	subs	r4, #32
  402f06:	da35      	bge.n	402f74 <__aeabi_dmul+0x164>
  402f08:	340c      	adds	r4, #12
  402f0a:	dc1b      	bgt.n	402f44 <__aeabi_dmul+0x134>
  402f0c:	f104 0414 	add.w	r4, r4, #20
  402f10:	f1c4 0520 	rsb	r5, r4, #32
  402f14:	fa00 f305 	lsl.w	r3, r0, r5
  402f18:	fa20 f004 	lsr.w	r0, r0, r4
  402f1c:	fa01 f205 	lsl.w	r2, r1, r5
  402f20:	ea40 0002 	orr.w	r0, r0, r2
  402f24:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  402f28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402f2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402f30:	fa21 f604 	lsr.w	r6, r1, r4
  402f34:	eb42 0106 	adc.w	r1, r2, r6
  402f38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402f3c:	bf08      	it	eq
  402f3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402f42:	bd70      	pop	{r4, r5, r6, pc}
  402f44:	f1c4 040c 	rsb	r4, r4, #12
  402f48:	f1c4 0520 	rsb	r5, r4, #32
  402f4c:	fa00 f304 	lsl.w	r3, r0, r4
  402f50:	fa20 f005 	lsr.w	r0, r0, r5
  402f54:	fa01 f204 	lsl.w	r2, r1, r4
  402f58:	ea40 0002 	orr.w	r0, r0, r2
  402f5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402f60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402f64:	f141 0100 	adc.w	r1, r1, #0
  402f68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402f6c:	bf08      	it	eq
  402f6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402f72:	bd70      	pop	{r4, r5, r6, pc}
  402f74:	f1c4 0520 	rsb	r5, r4, #32
  402f78:	fa00 f205 	lsl.w	r2, r0, r5
  402f7c:	ea4e 0e02 	orr.w	lr, lr, r2
  402f80:	fa20 f304 	lsr.w	r3, r0, r4
  402f84:	fa01 f205 	lsl.w	r2, r1, r5
  402f88:	ea43 0302 	orr.w	r3, r3, r2
  402f8c:	fa21 f004 	lsr.w	r0, r1, r4
  402f90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402f94:	fa21 f204 	lsr.w	r2, r1, r4
  402f98:	ea20 0002 	bic.w	r0, r0, r2
  402f9c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  402fa0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402fa4:	bf08      	it	eq
  402fa6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402faa:	bd70      	pop	{r4, r5, r6, pc}
  402fac:	f094 0f00 	teq	r4, #0
  402fb0:	d10f      	bne.n	402fd2 <__aeabi_dmul+0x1c2>
  402fb2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  402fb6:	0040      	lsls	r0, r0, #1
  402fb8:	eb41 0101 	adc.w	r1, r1, r1
  402fbc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402fc0:	bf08      	it	eq
  402fc2:	3c01      	subeq	r4, #1
  402fc4:	d0f7      	beq.n	402fb6 <__aeabi_dmul+0x1a6>
  402fc6:	ea41 0106 	orr.w	r1, r1, r6
  402fca:	f095 0f00 	teq	r5, #0
  402fce:	bf18      	it	ne
  402fd0:	4770      	bxne	lr
  402fd2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  402fd6:	0052      	lsls	r2, r2, #1
  402fd8:	eb43 0303 	adc.w	r3, r3, r3
  402fdc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  402fe0:	bf08      	it	eq
  402fe2:	3d01      	subeq	r5, #1
  402fe4:	d0f7      	beq.n	402fd6 <__aeabi_dmul+0x1c6>
  402fe6:	ea43 0306 	orr.w	r3, r3, r6
  402fea:	4770      	bx	lr
  402fec:	ea94 0f0c 	teq	r4, ip
  402ff0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  402ff4:	bf18      	it	ne
  402ff6:	ea95 0f0c 	teqne	r5, ip
  402ffa:	d00c      	beq.n	403016 <__aeabi_dmul+0x206>
  402ffc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403000:	bf18      	it	ne
  403002:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403006:	d1d1      	bne.n	402fac <__aeabi_dmul+0x19c>
  403008:	ea81 0103 	eor.w	r1, r1, r3
  40300c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403010:	f04f 0000 	mov.w	r0, #0
  403014:	bd70      	pop	{r4, r5, r6, pc}
  403016:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40301a:	bf06      	itte	eq
  40301c:	4610      	moveq	r0, r2
  40301e:	4619      	moveq	r1, r3
  403020:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403024:	d019      	beq.n	40305a <__aeabi_dmul+0x24a>
  403026:	ea94 0f0c 	teq	r4, ip
  40302a:	d102      	bne.n	403032 <__aeabi_dmul+0x222>
  40302c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  403030:	d113      	bne.n	40305a <__aeabi_dmul+0x24a>
  403032:	ea95 0f0c 	teq	r5, ip
  403036:	d105      	bne.n	403044 <__aeabi_dmul+0x234>
  403038:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40303c:	bf1c      	itt	ne
  40303e:	4610      	movne	r0, r2
  403040:	4619      	movne	r1, r3
  403042:	d10a      	bne.n	40305a <__aeabi_dmul+0x24a>
  403044:	ea81 0103 	eor.w	r1, r1, r3
  403048:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40304c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403050:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403054:	f04f 0000 	mov.w	r0, #0
  403058:	bd70      	pop	{r4, r5, r6, pc}
  40305a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40305e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  403062:	bd70      	pop	{r4, r5, r6, pc}

00403064 <__aeabi_ddiv>:
  403064:	b570      	push	{r4, r5, r6, lr}
  403066:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40306a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40306e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  403072:	bf1d      	ittte	ne
  403074:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403078:	ea94 0f0c 	teqne	r4, ip
  40307c:	ea95 0f0c 	teqne	r5, ip
  403080:	f000 f8a7 	bleq	4031d2 <__aeabi_ddiv+0x16e>
  403084:	eba4 0405 	sub.w	r4, r4, r5
  403088:	ea81 0e03 	eor.w	lr, r1, r3
  40308c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403090:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403094:	f000 8088 	beq.w	4031a8 <__aeabi_ddiv+0x144>
  403098:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40309c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4030a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4030a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4030a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4030ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4030b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4030b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4030b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4030bc:	429d      	cmp	r5, r3
  4030be:	bf08      	it	eq
  4030c0:	4296      	cmpeq	r6, r2
  4030c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4030c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4030ca:	d202      	bcs.n	4030d2 <__aeabi_ddiv+0x6e>
  4030cc:	085b      	lsrs	r3, r3, #1
  4030ce:	ea4f 0232 	mov.w	r2, r2, rrx
  4030d2:	1ab6      	subs	r6, r6, r2
  4030d4:	eb65 0503 	sbc.w	r5, r5, r3
  4030d8:	085b      	lsrs	r3, r3, #1
  4030da:	ea4f 0232 	mov.w	r2, r2, rrx
  4030de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4030e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4030e6:	ebb6 0e02 	subs.w	lr, r6, r2
  4030ea:	eb75 0e03 	sbcs.w	lr, r5, r3
  4030ee:	bf22      	ittt	cs
  4030f0:	1ab6      	subcs	r6, r6, r2
  4030f2:	4675      	movcs	r5, lr
  4030f4:	ea40 000c 	orrcs.w	r0, r0, ip
  4030f8:	085b      	lsrs	r3, r3, #1
  4030fa:	ea4f 0232 	mov.w	r2, r2, rrx
  4030fe:	ebb6 0e02 	subs.w	lr, r6, r2
  403102:	eb75 0e03 	sbcs.w	lr, r5, r3
  403106:	bf22      	ittt	cs
  403108:	1ab6      	subcs	r6, r6, r2
  40310a:	4675      	movcs	r5, lr
  40310c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  403110:	085b      	lsrs	r3, r3, #1
  403112:	ea4f 0232 	mov.w	r2, r2, rrx
  403116:	ebb6 0e02 	subs.w	lr, r6, r2
  40311a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40311e:	bf22      	ittt	cs
  403120:	1ab6      	subcs	r6, r6, r2
  403122:	4675      	movcs	r5, lr
  403124:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  403128:	085b      	lsrs	r3, r3, #1
  40312a:	ea4f 0232 	mov.w	r2, r2, rrx
  40312e:	ebb6 0e02 	subs.w	lr, r6, r2
  403132:	eb75 0e03 	sbcs.w	lr, r5, r3
  403136:	bf22      	ittt	cs
  403138:	1ab6      	subcs	r6, r6, r2
  40313a:	4675      	movcs	r5, lr
  40313c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  403140:	ea55 0e06 	orrs.w	lr, r5, r6
  403144:	d018      	beq.n	403178 <__aeabi_ddiv+0x114>
  403146:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40314a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40314e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  403152:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  403156:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40315a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40315e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  403162:	d1c0      	bne.n	4030e6 <__aeabi_ddiv+0x82>
  403164:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403168:	d10b      	bne.n	403182 <__aeabi_ddiv+0x11e>
  40316a:	ea41 0100 	orr.w	r1, r1, r0
  40316e:	f04f 0000 	mov.w	r0, #0
  403172:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  403176:	e7b6      	b.n	4030e6 <__aeabi_ddiv+0x82>
  403178:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40317c:	bf04      	itt	eq
  40317e:	4301      	orreq	r1, r0
  403180:	2000      	moveq	r0, #0
  403182:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403186:	bf88      	it	hi
  403188:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40318c:	f63f aeaf 	bhi.w	402eee <__aeabi_dmul+0xde>
  403190:	ebb5 0c03 	subs.w	ip, r5, r3
  403194:	bf04      	itt	eq
  403196:	ebb6 0c02 	subseq.w	ip, r6, r2
  40319a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40319e:	f150 0000 	adcs.w	r0, r0, #0
  4031a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4031a6:	bd70      	pop	{r4, r5, r6, pc}
  4031a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4031ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4031b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4031b4:	bfc2      	ittt	gt
  4031b6:	ebd4 050c 	rsbsgt	r5, r4, ip
  4031ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4031be:	bd70      	popgt	{r4, r5, r6, pc}
  4031c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4031c4:	f04f 0e00 	mov.w	lr, #0
  4031c8:	3c01      	subs	r4, #1
  4031ca:	e690      	b.n	402eee <__aeabi_dmul+0xde>
  4031cc:	ea45 0e06 	orr.w	lr, r5, r6
  4031d0:	e68d      	b.n	402eee <__aeabi_dmul+0xde>
  4031d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4031d6:	ea94 0f0c 	teq	r4, ip
  4031da:	bf08      	it	eq
  4031dc:	ea95 0f0c 	teqeq	r5, ip
  4031e0:	f43f af3b 	beq.w	40305a <__aeabi_dmul+0x24a>
  4031e4:	ea94 0f0c 	teq	r4, ip
  4031e8:	d10a      	bne.n	403200 <__aeabi_ddiv+0x19c>
  4031ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4031ee:	f47f af34 	bne.w	40305a <__aeabi_dmul+0x24a>
  4031f2:	ea95 0f0c 	teq	r5, ip
  4031f6:	f47f af25 	bne.w	403044 <__aeabi_dmul+0x234>
  4031fa:	4610      	mov	r0, r2
  4031fc:	4619      	mov	r1, r3
  4031fe:	e72c      	b.n	40305a <__aeabi_dmul+0x24a>
  403200:	ea95 0f0c 	teq	r5, ip
  403204:	d106      	bne.n	403214 <__aeabi_ddiv+0x1b0>
  403206:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40320a:	f43f aefd 	beq.w	403008 <__aeabi_dmul+0x1f8>
  40320e:	4610      	mov	r0, r2
  403210:	4619      	mov	r1, r3
  403212:	e722      	b.n	40305a <__aeabi_dmul+0x24a>
  403214:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403218:	bf18      	it	ne
  40321a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40321e:	f47f aec5 	bne.w	402fac <__aeabi_dmul+0x19c>
  403222:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  403226:	f47f af0d 	bne.w	403044 <__aeabi_dmul+0x234>
  40322a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40322e:	f47f aeeb 	bne.w	403008 <__aeabi_dmul+0x1f8>
  403232:	e712      	b.n	40305a <__aeabi_dmul+0x24a>

00403234 <__gedf2>:
  403234:	f04f 3cff 	mov.w	ip, #4294967295
  403238:	e006      	b.n	403248 <__cmpdf2+0x4>
  40323a:	bf00      	nop

0040323c <__ledf2>:
  40323c:	f04f 0c01 	mov.w	ip, #1
  403240:	e002      	b.n	403248 <__cmpdf2+0x4>
  403242:	bf00      	nop

00403244 <__cmpdf2>:
  403244:	f04f 0c01 	mov.w	ip, #1
  403248:	f84d cd04 	str.w	ip, [sp, #-4]!
  40324c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403250:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403254:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403258:	bf18      	it	ne
  40325a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40325e:	d01b      	beq.n	403298 <__cmpdf2+0x54>
  403260:	b001      	add	sp, #4
  403262:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  403266:	bf0c      	ite	eq
  403268:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40326c:	ea91 0f03 	teqne	r1, r3
  403270:	bf02      	ittt	eq
  403272:	ea90 0f02 	teqeq	r0, r2
  403276:	2000      	moveq	r0, #0
  403278:	4770      	bxeq	lr
  40327a:	f110 0f00 	cmn.w	r0, #0
  40327e:	ea91 0f03 	teq	r1, r3
  403282:	bf58      	it	pl
  403284:	4299      	cmppl	r1, r3
  403286:	bf08      	it	eq
  403288:	4290      	cmpeq	r0, r2
  40328a:	bf2c      	ite	cs
  40328c:	17d8      	asrcs	r0, r3, #31
  40328e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  403292:	f040 0001 	orr.w	r0, r0, #1
  403296:	4770      	bx	lr
  403298:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40329c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4032a0:	d102      	bne.n	4032a8 <__cmpdf2+0x64>
  4032a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4032a6:	d107      	bne.n	4032b8 <__cmpdf2+0x74>
  4032a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4032ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4032b0:	d1d6      	bne.n	403260 <__cmpdf2+0x1c>
  4032b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4032b6:	d0d3      	beq.n	403260 <__cmpdf2+0x1c>
  4032b8:	f85d 0b04 	ldr.w	r0, [sp], #4
  4032bc:	4770      	bx	lr
  4032be:	bf00      	nop

004032c0 <__aeabi_cdrcmple>:
  4032c0:	4684      	mov	ip, r0
  4032c2:	4610      	mov	r0, r2
  4032c4:	4662      	mov	r2, ip
  4032c6:	468c      	mov	ip, r1
  4032c8:	4619      	mov	r1, r3
  4032ca:	4663      	mov	r3, ip
  4032cc:	e000      	b.n	4032d0 <__aeabi_cdcmpeq>
  4032ce:	bf00      	nop

004032d0 <__aeabi_cdcmpeq>:
  4032d0:	b501      	push	{r0, lr}
  4032d2:	f7ff ffb7 	bl	403244 <__cmpdf2>
  4032d6:	2800      	cmp	r0, #0
  4032d8:	bf48      	it	mi
  4032da:	f110 0f00 	cmnmi.w	r0, #0
  4032de:	bd01      	pop	{r0, pc}

004032e0 <__aeabi_dcmpeq>:
  4032e0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4032e4:	f7ff fff4 	bl	4032d0 <__aeabi_cdcmpeq>
  4032e8:	bf0c      	ite	eq
  4032ea:	2001      	moveq	r0, #1
  4032ec:	2000      	movne	r0, #0
  4032ee:	f85d fb08 	ldr.w	pc, [sp], #8
  4032f2:	bf00      	nop

004032f4 <__aeabi_dcmplt>:
  4032f4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4032f8:	f7ff ffea 	bl	4032d0 <__aeabi_cdcmpeq>
  4032fc:	bf34      	ite	cc
  4032fe:	2001      	movcc	r0, #1
  403300:	2000      	movcs	r0, #0
  403302:	f85d fb08 	ldr.w	pc, [sp], #8
  403306:	bf00      	nop

00403308 <__aeabi_dcmple>:
  403308:	f84d ed08 	str.w	lr, [sp, #-8]!
  40330c:	f7ff ffe0 	bl	4032d0 <__aeabi_cdcmpeq>
  403310:	bf94      	ite	ls
  403312:	2001      	movls	r0, #1
  403314:	2000      	movhi	r0, #0
  403316:	f85d fb08 	ldr.w	pc, [sp], #8
  40331a:	bf00      	nop

0040331c <__aeabi_dcmpge>:
  40331c:	f84d ed08 	str.w	lr, [sp, #-8]!
  403320:	f7ff ffce 	bl	4032c0 <__aeabi_cdrcmple>
  403324:	bf94      	ite	ls
  403326:	2001      	movls	r0, #1
  403328:	2000      	movhi	r0, #0
  40332a:	f85d fb08 	ldr.w	pc, [sp], #8
  40332e:	bf00      	nop

00403330 <__aeabi_dcmpgt>:
  403330:	f84d ed08 	str.w	lr, [sp, #-8]!
  403334:	f7ff ffc4 	bl	4032c0 <__aeabi_cdrcmple>
  403338:	bf34      	ite	cc
  40333a:	2001      	movcc	r0, #1
  40333c:	2000      	movcs	r0, #0
  40333e:	f85d fb08 	ldr.w	pc, [sp], #8
  403342:	bf00      	nop

00403344 <__aeabi_dcmpun>:
  403344:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403348:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40334c:	d102      	bne.n	403354 <__aeabi_dcmpun+0x10>
  40334e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  403352:	d10a      	bne.n	40336a <__aeabi_dcmpun+0x26>
  403354:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403358:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40335c:	d102      	bne.n	403364 <__aeabi_dcmpun+0x20>
  40335e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  403362:	d102      	bne.n	40336a <__aeabi_dcmpun+0x26>
  403364:	f04f 0000 	mov.w	r0, #0
  403368:	4770      	bx	lr
  40336a:	f04f 0001 	mov.w	r0, #1
  40336e:	4770      	bx	lr

00403370 <__aeabi_d2f>:
  403370:	ea4f 0241 	mov.w	r2, r1, lsl #1
  403374:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  403378:	bf24      	itt	cs
  40337a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40337e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  403382:	d90d      	bls.n	4033a0 <__aeabi_d2f+0x30>
  403384:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  403388:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  40338c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  403390:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  403394:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  403398:	bf08      	it	eq
  40339a:	f020 0001 	biceq.w	r0, r0, #1
  40339e:	4770      	bx	lr
  4033a0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  4033a4:	d121      	bne.n	4033ea <__aeabi_d2f+0x7a>
  4033a6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  4033aa:	bfbc      	itt	lt
  4033ac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  4033b0:	4770      	bxlt	lr
  4033b2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4033b6:	ea4f 5252 	mov.w	r2, r2, lsr #21
  4033ba:	f1c2 0218 	rsb	r2, r2, #24
  4033be:	f1c2 0c20 	rsb	ip, r2, #32
  4033c2:	fa10 f30c 	lsls.w	r3, r0, ip
  4033c6:	fa20 f002 	lsr.w	r0, r0, r2
  4033ca:	bf18      	it	ne
  4033cc:	f040 0001 	orrne.w	r0, r0, #1
  4033d0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4033d4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  4033d8:	fa03 fc0c 	lsl.w	ip, r3, ip
  4033dc:	ea40 000c 	orr.w	r0, r0, ip
  4033e0:	fa23 f302 	lsr.w	r3, r3, r2
  4033e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
  4033e8:	e7cc      	b.n	403384 <__aeabi_d2f+0x14>
  4033ea:	ea7f 5362 	mvns.w	r3, r2, asr #21
  4033ee:	d107      	bne.n	403400 <__aeabi_d2f+0x90>
  4033f0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  4033f4:	bf1e      	ittt	ne
  4033f6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  4033fa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  4033fe:	4770      	bxne	lr
  403400:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  403404:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  403408:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40340c:	4770      	bx	lr
  40340e:	bf00      	nop

00403410 <__libc_init_array>:
  403410:	b570      	push	{r4, r5, r6, lr}
  403412:	4e0f      	ldr	r6, [pc, #60]	; (403450 <__libc_init_array+0x40>)
  403414:	4d0f      	ldr	r5, [pc, #60]	; (403454 <__libc_init_array+0x44>)
  403416:	1b76      	subs	r6, r6, r5
  403418:	10b6      	asrs	r6, r6, #2
  40341a:	bf18      	it	ne
  40341c:	2400      	movne	r4, #0
  40341e:	d005      	beq.n	40342c <__libc_init_array+0x1c>
  403420:	3401      	adds	r4, #1
  403422:	f855 3b04 	ldr.w	r3, [r5], #4
  403426:	4798      	blx	r3
  403428:	42a6      	cmp	r6, r4
  40342a:	d1f9      	bne.n	403420 <__libc_init_array+0x10>
  40342c:	4e0a      	ldr	r6, [pc, #40]	; (403458 <__libc_init_array+0x48>)
  40342e:	4d0b      	ldr	r5, [pc, #44]	; (40345c <__libc_init_array+0x4c>)
  403430:	1b76      	subs	r6, r6, r5
  403432:	f006 fc65 	bl	409d00 <_init>
  403436:	10b6      	asrs	r6, r6, #2
  403438:	bf18      	it	ne
  40343a:	2400      	movne	r4, #0
  40343c:	d006      	beq.n	40344c <__libc_init_array+0x3c>
  40343e:	3401      	adds	r4, #1
  403440:	f855 3b04 	ldr.w	r3, [r5], #4
  403444:	4798      	blx	r3
  403446:	42a6      	cmp	r6, r4
  403448:	d1f9      	bne.n	40343e <__libc_init_array+0x2e>
  40344a:	bd70      	pop	{r4, r5, r6, pc}
  40344c:	bd70      	pop	{r4, r5, r6, pc}
  40344e:	bf00      	nop
  403450:	00409d0c 	.word	0x00409d0c
  403454:	00409d0c 	.word	0x00409d0c
  403458:	00409d14 	.word	0x00409d14
  40345c:	00409d0c 	.word	0x00409d0c

00403460 <iprintf>:
  403460:	b40f      	push	{r0, r1, r2, r3}
  403462:	b500      	push	{lr}
  403464:	4907      	ldr	r1, [pc, #28]	; (403484 <iprintf+0x24>)
  403466:	b083      	sub	sp, #12
  403468:	ab04      	add	r3, sp, #16
  40346a:	6808      	ldr	r0, [r1, #0]
  40346c:	f853 2b04 	ldr.w	r2, [r3], #4
  403470:	6881      	ldr	r1, [r0, #8]
  403472:	9301      	str	r3, [sp, #4]
  403474:	f001 fdc0 	bl	404ff8 <_vfiprintf_r>
  403478:	b003      	add	sp, #12
  40347a:	f85d eb04 	ldr.w	lr, [sp], #4
  40347e:	b004      	add	sp, #16
  403480:	4770      	bx	lr
  403482:	bf00      	nop
  403484:	20400040 	.word	0x20400040

00403488 <malloc>:
  403488:	4b02      	ldr	r3, [pc, #8]	; (403494 <malloc+0xc>)
  40348a:	4601      	mov	r1, r0
  40348c:	6818      	ldr	r0, [r3, #0]
  40348e:	f000 b803 	b.w	403498 <_malloc_r>
  403492:	bf00      	nop
  403494:	20400040 	.word	0x20400040

00403498 <_malloc_r>:
  403498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40349c:	f101 060b 	add.w	r6, r1, #11
  4034a0:	2e16      	cmp	r6, #22
  4034a2:	b083      	sub	sp, #12
  4034a4:	4605      	mov	r5, r0
  4034a6:	f240 809e 	bls.w	4035e6 <_malloc_r+0x14e>
  4034aa:	f036 0607 	bics.w	r6, r6, #7
  4034ae:	f100 80bd 	bmi.w	40362c <_malloc_r+0x194>
  4034b2:	42b1      	cmp	r1, r6
  4034b4:	f200 80ba 	bhi.w	40362c <_malloc_r+0x194>
  4034b8:	f000 faec 	bl	403a94 <__malloc_lock>
  4034bc:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4034c0:	f0c0 8293 	bcc.w	4039ea <_malloc_r+0x552>
  4034c4:	0a73      	lsrs	r3, r6, #9
  4034c6:	f000 80b8 	beq.w	40363a <_malloc_r+0x1a2>
  4034ca:	2b04      	cmp	r3, #4
  4034cc:	f200 8179 	bhi.w	4037c2 <_malloc_r+0x32a>
  4034d0:	09b3      	lsrs	r3, r6, #6
  4034d2:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4034d6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4034da:	00c3      	lsls	r3, r0, #3
  4034dc:	4fbf      	ldr	r7, [pc, #764]	; (4037dc <_malloc_r+0x344>)
  4034de:	443b      	add	r3, r7
  4034e0:	f1a3 0108 	sub.w	r1, r3, #8
  4034e4:	685c      	ldr	r4, [r3, #4]
  4034e6:	42a1      	cmp	r1, r4
  4034e8:	d106      	bne.n	4034f8 <_malloc_r+0x60>
  4034ea:	e00c      	b.n	403506 <_malloc_r+0x6e>
  4034ec:	2a00      	cmp	r2, #0
  4034ee:	f280 80aa 	bge.w	403646 <_malloc_r+0x1ae>
  4034f2:	68e4      	ldr	r4, [r4, #12]
  4034f4:	42a1      	cmp	r1, r4
  4034f6:	d006      	beq.n	403506 <_malloc_r+0x6e>
  4034f8:	6863      	ldr	r3, [r4, #4]
  4034fa:	f023 0303 	bic.w	r3, r3, #3
  4034fe:	1b9a      	subs	r2, r3, r6
  403500:	2a0f      	cmp	r2, #15
  403502:	ddf3      	ble.n	4034ec <_malloc_r+0x54>
  403504:	4670      	mov	r0, lr
  403506:	693c      	ldr	r4, [r7, #16]
  403508:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4037f0 <_malloc_r+0x358>
  40350c:	4574      	cmp	r4, lr
  40350e:	f000 81ab 	beq.w	403868 <_malloc_r+0x3d0>
  403512:	6863      	ldr	r3, [r4, #4]
  403514:	f023 0303 	bic.w	r3, r3, #3
  403518:	1b9a      	subs	r2, r3, r6
  40351a:	2a0f      	cmp	r2, #15
  40351c:	f300 8190 	bgt.w	403840 <_malloc_r+0x3a8>
  403520:	2a00      	cmp	r2, #0
  403522:	f8c7 e014 	str.w	lr, [r7, #20]
  403526:	f8c7 e010 	str.w	lr, [r7, #16]
  40352a:	f280 809d 	bge.w	403668 <_malloc_r+0x1d0>
  40352e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403532:	f080 8161 	bcs.w	4037f8 <_malloc_r+0x360>
  403536:	08db      	lsrs	r3, r3, #3
  403538:	f103 0c01 	add.w	ip, r3, #1
  40353c:	1099      	asrs	r1, r3, #2
  40353e:	687a      	ldr	r2, [r7, #4]
  403540:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403544:	f8c4 8008 	str.w	r8, [r4, #8]
  403548:	2301      	movs	r3, #1
  40354a:	408b      	lsls	r3, r1
  40354c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403550:	4313      	orrs	r3, r2
  403552:	3908      	subs	r1, #8
  403554:	60e1      	str	r1, [r4, #12]
  403556:	607b      	str	r3, [r7, #4]
  403558:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40355c:	f8c8 400c 	str.w	r4, [r8, #12]
  403560:	1082      	asrs	r2, r0, #2
  403562:	2401      	movs	r4, #1
  403564:	4094      	lsls	r4, r2
  403566:	429c      	cmp	r4, r3
  403568:	f200 808b 	bhi.w	403682 <_malloc_r+0x1ea>
  40356c:	421c      	tst	r4, r3
  40356e:	d106      	bne.n	40357e <_malloc_r+0xe6>
  403570:	f020 0003 	bic.w	r0, r0, #3
  403574:	0064      	lsls	r4, r4, #1
  403576:	421c      	tst	r4, r3
  403578:	f100 0004 	add.w	r0, r0, #4
  40357c:	d0fa      	beq.n	403574 <_malloc_r+0xdc>
  40357e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403582:	46cc      	mov	ip, r9
  403584:	4680      	mov	r8, r0
  403586:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40358a:	459c      	cmp	ip, r3
  40358c:	d107      	bne.n	40359e <_malloc_r+0x106>
  40358e:	e16d      	b.n	40386c <_malloc_r+0x3d4>
  403590:	2a00      	cmp	r2, #0
  403592:	f280 817b 	bge.w	40388c <_malloc_r+0x3f4>
  403596:	68db      	ldr	r3, [r3, #12]
  403598:	459c      	cmp	ip, r3
  40359a:	f000 8167 	beq.w	40386c <_malloc_r+0x3d4>
  40359e:	6859      	ldr	r1, [r3, #4]
  4035a0:	f021 0103 	bic.w	r1, r1, #3
  4035a4:	1b8a      	subs	r2, r1, r6
  4035a6:	2a0f      	cmp	r2, #15
  4035a8:	ddf2      	ble.n	403590 <_malloc_r+0xf8>
  4035aa:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4035ae:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4035b2:	9300      	str	r3, [sp, #0]
  4035b4:	199c      	adds	r4, r3, r6
  4035b6:	4628      	mov	r0, r5
  4035b8:	f046 0601 	orr.w	r6, r6, #1
  4035bc:	f042 0501 	orr.w	r5, r2, #1
  4035c0:	605e      	str	r6, [r3, #4]
  4035c2:	f8c8 c00c 	str.w	ip, [r8, #12]
  4035c6:	f8cc 8008 	str.w	r8, [ip, #8]
  4035ca:	617c      	str	r4, [r7, #20]
  4035cc:	613c      	str	r4, [r7, #16]
  4035ce:	f8c4 e00c 	str.w	lr, [r4, #12]
  4035d2:	f8c4 e008 	str.w	lr, [r4, #8]
  4035d6:	6065      	str	r5, [r4, #4]
  4035d8:	505a      	str	r2, [r3, r1]
  4035da:	f000 fa61 	bl	403aa0 <__malloc_unlock>
  4035de:	9b00      	ldr	r3, [sp, #0]
  4035e0:	f103 0408 	add.w	r4, r3, #8
  4035e4:	e01e      	b.n	403624 <_malloc_r+0x18c>
  4035e6:	2910      	cmp	r1, #16
  4035e8:	d820      	bhi.n	40362c <_malloc_r+0x194>
  4035ea:	f000 fa53 	bl	403a94 <__malloc_lock>
  4035ee:	2610      	movs	r6, #16
  4035f0:	2318      	movs	r3, #24
  4035f2:	2002      	movs	r0, #2
  4035f4:	4f79      	ldr	r7, [pc, #484]	; (4037dc <_malloc_r+0x344>)
  4035f6:	443b      	add	r3, r7
  4035f8:	f1a3 0208 	sub.w	r2, r3, #8
  4035fc:	685c      	ldr	r4, [r3, #4]
  4035fe:	4294      	cmp	r4, r2
  403600:	f000 813d 	beq.w	40387e <_malloc_r+0x3e6>
  403604:	6863      	ldr	r3, [r4, #4]
  403606:	68e1      	ldr	r1, [r4, #12]
  403608:	68a6      	ldr	r6, [r4, #8]
  40360a:	f023 0303 	bic.w	r3, r3, #3
  40360e:	4423      	add	r3, r4
  403610:	4628      	mov	r0, r5
  403612:	685a      	ldr	r2, [r3, #4]
  403614:	60f1      	str	r1, [r6, #12]
  403616:	f042 0201 	orr.w	r2, r2, #1
  40361a:	608e      	str	r6, [r1, #8]
  40361c:	605a      	str	r2, [r3, #4]
  40361e:	f000 fa3f 	bl	403aa0 <__malloc_unlock>
  403622:	3408      	adds	r4, #8
  403624:	4620      	mov	r0, r4
  403626:	b003      	add	sp, #12
  403628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40362c:	2400      	movs	r4, #0
  40362e:	230c      	movs	r3, #12
  403630:	4620      	mov	r0, r4
  403632:	602b      	str	r3, [r5, #0]
  403634:	b003      	add	sp, #12
  403636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40363a:	2040      	movs	r0, #64	; 0x40
  40363c:	f44f 7300 	mov.w	r3, #512	; 0x200
  403640:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403644:	e74a      	b.n	4034dc <_malloc_r+0x44>
  403646:	4423      	add	r3, r4
  403648:	68e1      	ldr	r1, [r4, #12]
  40364a:	685a      	ldr	r2, [r3, #4]
  40364c:	68a6      	ldr	r6, [r4, #8]
  40364e:	f042 0201 	orr.w	r2, r2, #1
  403652:	60f1      	str	r1, [r6, #12]
  403654:	4628      	mov	r0, r5
  403656:	608e      	str	r6, [r1, #8]
  403658:	605a      	str	r2, [r3, #4]
  40365a:	f000 fa21 	bl	403aa0 <__malloc_unlock>
  40365e:	3408      	adds	r4, #8
  403660:	4620      	mov	r0, r4
  403662:	b003      	add	sp, #12
  403664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403668:	4423      	add	r3, r4
  40366a:	4628      	mov	r0, r5
  40366c:	685a      	ldr	r2, [r3, #4]
  40366e:	f042 0201 	orr.w	r2, r2, #1
  403672:	605a      	str	r2, [r3, #4]
  403674:	f000 fa14 	bl	403aa0 <__malloc_unlock>
  403678:	3408      	adds	r4, #8
  40367a:	4620      	mov	r0, r4
  40367c:	b003      	add	sp, #12
  40367e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403682:	68bc      	ldr	r4, [r7, #8]
  403684:	6863      	ldr	r3, [r4, #4]
  403686:	f023 0803 	bic.w	r8, r3, #3
  40368a:	45b0      	cmp	r8, r6
  40368c:	d304      	bcc.n	403698 <_malloc_r+0x200>
  40368e:	eba8 0306 	sub.w	r3, r8, r6
  403692:	2b0f      	cmp	r3, #15
  403694:	f300 8085 	bgt.w	4037a2 <_malloc_r+0x30a>
  403698:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4037f4 <_malloc_r+0x35c>
  40369c:	4b50      	ldr	r3, [pc, #320]	; (4037e0 <_malloc_r+0x348>)
  40369e:	f8d9 2000 	ldr.w	r2, [r9]
  4036a2:	681b      	ldr	r3, [r3, #0]
  4036a4:	3201      	adds	r2, #1
  4036a6:	4433      	add	r3, r6
  4036a8:	eb04 0a08 	add.w	sl, r4, r8
  4036ac:	f000 8155 	beq.w	40395a <_malloc_r+0x4c2>
  4036b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4036b4:	330f      	adds	r3, #15
  4036b6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4036ba:	f02b 0b0f 	bic.w	fp, fp, #15
  4036be:	4659      	mov	r1, fp
  4036c0:	4628      	mov	r0, r5
  4036c2:	f000 f9f3 	bl	403aac <_sbrk_r>
  4036c6:	1c41      	adds	r1, r0, #1
  4036c8:	4602      	mov	r2, r0
  4036ca:	f000 80fc 	beq.w	4038c6 <_malloc_r+0x42e>
  4036ce:	4582      	cmp	sl, r0
  4036d0:	f200 80f7 	bhi.w	4038c2 <_malloc_r+0x42a>
  4036d4:	4b43      	ldr	r3, [pc, #268]	; (4037e4 <_malloc_r+0x34c>)
  4036d6:	6819      	ldr	r1, [r3, #0]
  4036d8:	4459      	add	r1, fp
  4036da:	6019      	str	r1, [r3, #0]
  4036dc:	f000 814d 	beq.w	40397a <_malloc_r+0x4e2>
  4036e0:	f8d9 0000 	ldr.w	r0, [r9]
  4036e4:	3001      	adds	r0, #1
  4036e6:	bf1b      	ittet	ne
  4036e8:	eba2 0a0a 	subne.w	sl, r2, sl
  4036ec:	4451      	addne	r1, sl
  4036ee:	f8c9 2000 	streq.w	r2, [r9]
  4036f2:	6019      	strne	r1, [r3, #0]
  4036f4:	f012 0107 	ands.w	r1, r2, #7
  4036f8:	f000 8115 	beq.w	403926 <_malloc_r+0x48e>
  4036fc:	f1c1 0008 	rsb	r0, r1, #8
  403700:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403704:	4402      	add	r2, r0
  403706:	3108      	adds	r1, #8
  403708:	eb02 090b 	add.w	r9, r2, fp
  40370c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403710:	eba1 0909 	sub.w	r9, r1, r9
  403714:	4649      	mov	r1, r9
  403716:	4628      	mov	r0, r5
  403718:	9301      	str	r3, [sp, #4]
  40371a:	9200      	str	r2, [sp, #0]
  40371c:	f000 f9c6 	bl	403aac <_sbrk_r>
  403720:	1c43      	adds	r3, r0, #1
  403722:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403726:	f000 8143 	beq.w	4039b0 <_malloc_r+0x518>
  40372a:	1a80      	subs	r0, r0, r2
  40372c:	4448      	add	r0, r9
  40372e:	f040 0001 	orr.w	r0, r0, #1
  403732:	6819      	ldr	r1, [r3, #0]
  403734:	60ba      	str	r2, [r7, #8]
  403736:	4449      	add	r1, r9
  403738:	42bc      	cmp	r4, r7
  40373a:	6050      	str	r0, [r2, #4]
  40373c:	6019      	str	r1, [r3, #0]
  40373e:	d017      	beq.n	403770 <_malloc_r+0x2d8>
  403740:	f1b8 0f0f 	cmp.w	r8, #15
  403744:	f240 80fb 	bls.w	40393e <_malloc_r+0x4a6>
  403748:	6860      	ldr	r0, [r4, #4]
  40374a:	f1a8 020c 	sub.w	r2, r8, #12
  40374e:	f022 0207 	bic.w	r2, r2, #7
  403752:	eb04 0e02 	add.w	lr, r4, r2
  403756:	f000 0001 	and.w	r0, r0, #1
  40375a:	f04f 0c05 	mov.w	ip, #5
  40375e:	4310      	orrs	r0, r2
  403760:	2a0f      	cmp	r2, #15
  403762:	6060      	str	r0, [r4, #4]
  403764:	f8ce c004 	str.w	ip, [lr, #4]
  403768:	f8ce c008 	str.w	ip, [lr, #8]
  40376c:	f200 8117 	bhi.w	40399e <_malloc_r+0x506>
  403770:	4b1d      	ldr	r3, [pc, #116]	; (4037e8 <_malloc_r+0x350>)
  403772:	68bc      	ldr	r4, [r7, #8]
  403774:	681a      	ldr	r2, [r3, #0]
  403776:	4291      	cmp	r1, r2
  403778:	bf88      	it	hi
  40377a:	6019      	strhi	r1, [r3, #0]
  40377c:	4b1b      	ldr	r3, [pc, #108]	; (4037ec <_malloc_r+0x354>)
  40377e:	681a      	ldr	r2, [r3, #0]
  403780:	4291      	cmp	r1, r2
  403782:	6862      	ldr	r2, [r4, #4]
  403784:	bf88      	it	hi
  403786:	6019      	strhi	r1, [r3, #0]
  403788:	f022 0203 	bic.w	r2, r2, #3
  40378c:	4296      	cmp	r6, r2
  40378e:	eba2 0306 	sub.w	r3, r2, r6
  403792:	d801      	bhi.n	403798 <_malloc_r+0x300>
  403794:	2b0f      	cmp	r3, #15
  403796:	dc04      	bgt.n	4037a2 <_malloc_r+0x30a>
  403798:	4628      	mov	r0, r5
  40379a:	f000 f981 	bl	403aa0 <__malloc_unlock>
  40379e:	2400      	movs	r4, #0
  4037a0:	e740      	b.n	403624 <_malloc_r+0x18c>
  4037a2:	19a2      	adds	r2, r4, r6
  4037a4:	f043 0301 	orr.w	r3, r3, #1
  4037a8:	f046 0601 	orr.w	r6, r6, #1
  4037ac:	6066      	str	r6, [r4, #4]
  4037ae:	4628      	mov	r0, r5
  4037b0:	60ba      	str	r2, [r7, #8]
  4037b2:	6053      	str	r3, [r2, #4]
  4037b4:	f000 f974 	bl	403aa0 <__malloc_unlock>
  4037b8:	3408      	adds	r4, #8
  4037ba:	4620      	mov	r0, r4
  4037bc:	b003      	add	sp, #12
  4037be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4037c2:	2b14      	cmp	r3, #20
  4037c4:	d971      	bls.n	4038aa <_malloc_r+0x412>
  4037c6:	2b54      	cmp	r3, #84	; 0x54
  4037c8:	f200 80a3 	bhi.w	403912 <_malloc_r+0x47a>
  4037cc:	0b33      	lsrs	r3, r6, #12
  4037ce:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4037d2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4037d6:	00c3      	lsls	r3, r0, #3
  4037d8:	e680      	b.n	4034dc <_malloc_r+0x44>
  4037da:	bf00      	nop
  4037dc:	20400470 	.word	0x20400470
  4037e0:	20400dc4 	.word	0x20400dc4
  4037e4:	20400d94 	.word	0x20400d94
  4037e8:	20400dbc 	.word	0x20400dbc
  4037ec:	20400dc0 	.word	0x20400dc0
  4037f0:	20400478 	.word	0x20400478
  4037f4:	20400878 	.word	0x20400878
  4037f8:	0a5a      	lsrs	r2, r3, #9
  4037fa:	2a04      	cmp	r2, #4
  4037fc:	d95b      	bls.n	4038b6 <_malloc_r+0x41e>
  4037fe:	2a14      	cmp	r2, #20
  403800:	f200 80ae 	bhi.w	403960 <_malloc_r+0x4c8>
  403804:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403808:	00c9      	lsls	r1, r1, #3
  40380a:	325b      	adds	r2, #91	; 0x5b
  40380c:	eb07 0c01 	add.w	ip, r7, r1
  403810:	5879      	ldr	r1, [r7, r1]
  403812:	f1ac 0c08 	sub.w	ip, ip, #8
  403816:	458c      	cmp	ip, r1
  403818:	f000 8088 	beq.w	40392c <_malloc_r+0x494>
  40381c:	684a      	ldr	r2, [r1, #4]
  40381e:	f022 0203 	bic.w	r2, r2, #3
  403822:	4293      	cmp	r3, r2
  403824:	d273      	bcs.n	40390e <_malloc_r+0x476>
  403826:	6889      	ldr	r1, [r1, #8]
  403828:	458c      	cmp	ip, r1
  40382a:	d1f7      	bne.n	40381c <_malloc_r+0x384>
  40382c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403830:	687b      	ldr	r3, [r7, #4]
  403832:	60e2      	str	r2, [r4, #12]
  403834:	f8c4 c008 	str.w	ip, [r4, #8]
  403838:	6094      	str	r4, [r2, #8]
  40383a:	f8cc 400c 	str.w	r4, [ip, #12]
  40383e:	e68f      	b.n	403560 <_malloc_r+0xc8>
  403840:	19a1      	adds	r1, r4, r6
  403842:	f046 0c01 	orr.w	ip, r6, #1
  403846:	f042 0601 	orr.w	r6, r2, #1
  40384a:	f8c4 c004 	str.w	ip, [r4, #4]
  40384e:	4628      	mov	r0, r5
  403850:	6179      	str	r1, [r7, #20]
  403852:	6139      	str	r1, [r7, #16]
  403854:	f8c1 e00c 	str.w	lr, [r1, #12]
  403858:	f8c1 e008 	str.w	lr, [r1, #8]
  40385c:	604e      	str	r6, [r1, #4]
  40385e:	50e2      	str	r2, [r4, r3]
  403860:	f000 f91e 	bl	403aa0 <__malloc_unlock>
  403864:	3408      	adds	r4, #8
  403866:	e6dd      	b.n	403624 <_malloc_r+0x18c>
  403868:	687b      	ldr	r3, [r7, #4]
  40386a:	e679      	b.n	403560 <_malloc_r+0xc8>
  40386c:	f108 0801 	add.w	r8, r8, #1
  403870:	f018 0f03 	tst.w	r8, #3
  403874:	f10c 0c08 	add.w	ip, ip, #8
  403878:	f47f ae85 	bne.w	403586 <_malloc_r+0xee>
  40387c:	e02d      	b.n	4038da <_malloc_r+0x442>
  40387e:	68dc      	ldr	r4, [r3, #12]
  403880:	42a3      	cmp	r3, r4
  403882:	bf08      	it	eq
  403884:	3002      	addeq	r0, #2
  403886:	f43f ae3e 	beq.w	403506 <_malloc_r+0x6e>
  40388a:	e6bb      	b.n	403604 <_malloc_r+0x16c>
  40388c:	4419      	add	r1, r3
  40388e:	461c      	mov	r4, r3
  403890:	684a      	ldr	r2, [r1, #4]
  403892:	68db      	ldr	r3, [r3, #12]
  403894:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403898:	f042 0201 	orr.w	r2, r2, #1
  40389c:	604a      	str	r2, [r1, #4]
  40389e:	4628      	mov	r0, r5
  4038a0:	60f3      	str	r3, [r6, #12]
  4038a2:	609e      	str	r6, [r3, #8]
  4038a4:	f000 f8fc 	bl	403aa0 <__malloc_unlock>
  4038a8:	e6bc      	b.n	403624 <_malloc_r+0x18c>
  4038aa:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4038ae:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4038b2:	00c3      	lsls	r3, r0, #3
  4038b4:	e612      	b.n	4034dc <_malloc_r+0x44>
  4038b6:	099a      	lsrs	r2, r3, #6
  4038b8:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4038bc:	00c9      	lsls	r1, r1, #3
  4038be:	3238      	adds	r2, #56	; 0x38
  4038c0:	e7a4      	b.n	40380c <_malloc_r+0x374>
  4038c2:	42bc      	cmp	r4, r7
  4038c4:	d054      	beq.n	403970 <_malloc_r+0x4d8>
  4038c6:	68bc      	ldr	r4, [r7, #8]
  4038c8:	6862      	ldr	r2, [r4, #4]
  4038ca:	f022 0203 	bic.w	r2, r2, #3
  4038ce:	e75d      	b.n	40378c <_malloc_r+0x2f4>
  4038d0:	f859 3908 	ldr.w	r3, [r9], #-8
  4038d4:	4599      	cmp	r9, r3
  4038d6:	f040 8086 	bne.w	4039e6 <_malloc_r+0x54e>
  4038da:	f010 0f03 	tst.w	r0, #3
  4038de:	f100 30ff 	add.w	r0, r0, #4294967295
  4038e2:	d1f5      	bne.n	4038d0 <_malloc_r+0x438>
  4038e4:	687b      	ldr	r3, [r7, #4]
  4038e6:	ea23 0304 	bic.w	r3, r3, r4
  4038ea:	607b      	str	r3, [r7, #4]
  4038ec:	0064      	lsls	r4, r4, #1
  4038ee:	429c      	cmp	r4, r3
  4038f0:	f63f aec7 	bhi.w	403682 <_malloc_r+0x1ea>
  4038f4:	2c00      	cmp	r4, #0
  4038f6:	f43f aec4 	beq.w	403682 <_malloc_r+0x1ea>
  4038fa:	421c      	tst	r4, r3
  4038fc:	4640      	mov	r0, r8
  4038fe:	f47f ae3e 	bne.w	40357e <_malloc_r+0xe6>
  403902:	0064      	lsls	r4, r4, #1
  403904:	421c      	tst	r4, r3
  403906:	f100 0004 	add.w	r0, r0, #4
  40390a:	d0fa      	beq.n	403902 <_malloc_r+0x46a>
  40390c:	e637      	b.n	40357e <_malloc_r+0xe6>
  40390e:	468c      	mov	ip, r1
  403910:	e78c      	b.n	40382c <_malloc_r+0x394>
  403912:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403916:	d815      	bhi.n	403944 <_malloc_r+0x4ac>
  403918:	0bf3      	lsrs	r3, r6, #15
  40391a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40391e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403922:	00c3      	lsls	r3, r0, #3
  403924:	e5da      	b.n	4034dc <_malloc_r+0x44>
  403926:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40392a:	e6ed      	b.n	403708 <_malloc_r+0x270>
  40392c:	687b      	ldr	r3, [r7, #4]
  40392e:	1092      	asrs	r2, r2, #2
  403930:	2101      	movs	r1, #1
  403932:	fa01 f202 	lsl.w	r2, r1, r2
  403936:	4313      	orrs	r3, r2
  403938:	607b      	str	r3, [r7, #4]
  40393a:	4662      	mov	r2, ip
  40393c:	e779      	b.n	403832 <_malloc_r+0x39a>
  40393e:	2301      	movs	r3, #1
  403940:	6053      	str	r3, [r2, #4]
  403942:	e729      	b.n	403798 <_malloc_r+0x300>
  403944:	f240 5254 	movw	r2, #1364	; 0x554
  403948:	4293      	cmp	r3, r2
  40394a:	d822      	bhi.n	403992 <_malloc_r+0x4fa>
  40394c:	0cb3      	lsrs	r3, r6, #18
  40394e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403952:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403956:	00c3      	lsls	r3, r0, #3
  403958:	e5c0      	b.n	4034dc <_malloc_r+0x44>
  40395a:	f103 0b10 	add.w	fp, r3, #16
  40395e:	e6ae      	b.n	4036be <_malloc_r+0x226>
  403960:	2a54      	cmp	r2, #84	; 0x54
  403962:	d829      	bhi.n	4039b8 <_malloc_r+0x520>
  403964:	0b1a      	lsrs	r2, r3, #12
  403966:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40396a:	00c9      	lsls	r1, r1, #3
  40396c:	326e      	adds	r2, #110	; 0x6e
  40396e:	e74d      	b.n	40380c <_malloc_r+0x374>
  403970:	4b20      	ldr	r3, [pc, #128]	; (4039f4 <_malloc_r+0x55c>)
  403972:	6819      	ldr	r1, [r3, #0]
  403974:	4459      	add	r1, fp
  403976:	6019      	str	r1, [r3, #0]
  403978:	e6b2      	b.n	4036e0 <_malloc_r+0x248>
  40397a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40397e:	2800      	cmp	r0, #0
  403980:	f47f aeae 	bne.w	4036e0 <_malloc_r+0x248>
  403984:	eb08 030b 	add.w	r3, r8, fp
  403988:	68ba      	ldr	r2, [r7, #8]
  40398a:	f043 0301 	orr.w	r3, r3, #1
  40398e:	6053      	str	r3, [r2, #4]
  403990:	e6ee      	b.n	403770 <_malloc_r+0x2d8>
  403992:	207f      	movs	r0, #127	; 0x7f
  403994:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403998:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40399c:	e59e      	b.n	4034dc <_malloc_r+0x44>
  40399e:	f104 0108 	add.w	r1, r4, #8
  4039a2:	4628      	mov	r0, r5
  4039a4:	9300      	str	r3, [sp, #0]
  4039a6:	f003 fc03 	bl	4071b0 <_free_r>
  4039aa:	9b00      	ldr	r3, [sp, #0]
  4039ac:	6819      	ldr	r1, [r3, #0]
  4039ae:	e6df      	b.n	403770 <_malloc_r+0x2d8>
  4039b0:	2001      	movs	r0, #1
  4039b2:	f04f 0900 	mov.w	r9, #0
  4039b6:	e6bc      	b.n	403732 <_malloc_r+0x29a>
  4039b8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4039bc:	d805      	bhi.n	4039ca <_malloc_r+0x532>
  4039be:	0bda      	lsrs	r2, r3, #15
  4039c0:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4039c4:	00c9      	lsls	r1, r1, #3
  4039c6:	3277      	adds	r2, #119	; 0x77
  4039c8:	e720      	b.n	40380c <_malloc_r+0x374>
  4039ca:	f240 5154 	movw	r1, #1364	; 0x554
  4039ce:	428a      	cmp	r2, r1
  4039d0:	d805      	bhi.n	4039de <_malloc_r+0x546>
  4039d2:	0c9a      	lsrs	r2, r3, #18
  4039d4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4039d8:	00c9      	lsls	r1, r1, #3
  4039da:	327c      	adds	r2, #124	; 0x7c
  4039dc:	e716      	b.n	40380c <_malloc_r+0x374>
  4039de:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4039e2:	227e      	movs	r2, #126	; 0x7e
  4039e4:	e712      	b.n	40380c <_malloc_r+0x374>
  4039e6:	687b      	ldr	r3, [r7, #4]
  4039e8:	e780      	b.n	4038ec <_malloc_r+0x454>
  4039ea:	08f0      	lsrs	r0, r6, #3
  4039ec:	f106 0308 	add.w	r3, r6, #8
  4039f0:	e600      	b.n	4035f4 <_malloc_r+0x15c>
  4039f2:	bf00      	nop
  4039f4:	20400d94 	.word	0x20400d94

004039f8 <memset>:
  4039f8:	b470      	push	{r4, r5, r6}
  4039fa:	0786      	lsls	r6, r0, #30
  4039fc:	d046      	beq.n	403a8c <memset+0x94>
  4039fe:	1e54      	subs	r4, r2, #1
  403a00:	2a00      	cmp	r2, #0
  403a02:	d041      	beq.n	403a88 <memset+0x90>
  403a04:	b2ca      	uxtb	r2, r1
  403a06:	4603      	mov	r3, r0
  403a08:	e002      	b.n	403a10 <memset+0x18>
  403a0a:	f114 34ff 	adds.w	r4, r4, #4294967295
  403a0e:	d33b      	bcc.n	403a88 <memset+0x90>
  403a10:	f803 2b01 	strb.w	r2, [r3], #1
  403a14:	079d      	lsls	r5, r3, #30
  403a16:	d1f8      	bne.n	403a0a <memset+0x12>
  403a18:	2c03      	cmp	r4, #3
  403a1a:	d92e      	bls.n	403a7a <memset+0x82>
  403a1c:	b2cd      	uxtb	r5, r1
  403a1e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403a22:	2c0f      	cmp	r4, #15
  403a24:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403a28:	d919      	bls.n	403a5e <memset+0x66>
  403a2a:	f103 0210 	add.w	r2, r3, #16
  403a2e:	4626      	mov	r6, r4
  403a30:	3e10      	subs	r6, #16
  403a32:	2e0f      	cmp	r6, #15
  403a34:	f842 5c10 	str.w	r5, [r2, #-16]
  403a38:	f842 5c0c 	str.w	r5, [r2, #-12]
  403a3c:	f842 5c08 	str.w	r5, [r2, #-8]
  403a40:	f842 5c04 	str.w	r5, [r2, #-4]
  403a44:	f102 0210 	add.w	r2, r2, #16
  403a48:	d8f2      	bhi.n	403a30 <memset+0x38>
  403a4a:	f1a4 0210 	sub.w	r2, r4, #16
  403a4e:	f022 020f 	bic.w	r2, r2, #15
  403a52:	f004 040f 	and.w	r4, r4, #15
  403a56:	3210      	adds	r2, #16
  403a58:	2c03      	cmp	r4, #3
  403a5a:	4413      	add	r3, r2
  403a5c:	d90d      	bls.n	403a7a <memset+0x82>
  403a5e:	461e      	mov	r6, r3
  403a60:	4622      	mov	r2, r4
  403a62:	3a04      	subs	r2, #4
  403a64:	2a03      	cmp	r2, #3
  403a66:	f846 5b04 	str.w	r5, [r6], #4
  403a6a:	d8fa      	bhi.n	403a62 <memset+0x6a>
  403a6c:	1f22      	subs	r2, r4, #4
  403a6e:	f022 0203 	bic.w	r2, r2, #3
  403a72:	3204      	adds	r2, #4
  403a74:	4413      	add	r3, r2
  403a76:	f004 0403 	and.w	r4, r4, #3
  403a7a:	b12c      	cbz	r4, 403a88 <memset+0x90>
  403a7c:	b2c9      	uxtb	r1, r1
  403a7e:	441c      	add	r4, r3
  403a80:	f803 1b01 	strb.w	r1, [r3], #1
  403a84:	429c      	cmp	r4, r3
  403a86:	d1fb      	bne.n	403a80 <memset+0x88>
  403a88:	bc70      	pop	{r4, r5, r6}
  403a8a:	4770      	bx	lr
  403a8c:	4614      	mov	r4, r2
  403a8e:	4603      	mov	r3, r0
  403a90:	e7c2      	b.n	403a18 <memset+0x20>
  403a92:	bf00      	nop

00403a94 <__malloc_lock>:
  403a94:	4801      	ldr	r0, [pc, #4]	; (403a9c <__malloc_lock+0x8>)
  403a96:	f003 be33 	b.w	407700 <__retarget_lock_acquire_recursive>
  403a9a:	bf00      	nop
  403a9c:	20402ff0 	.word	0x20402ff0

00403aa0 <__malloc_unlock>:
  403aa0:	4801      	ldr	r0, [pc, #4]	; (403aa8 <__malloc_unlock+0x8>)
  403aa2:	f003 be2f 	b.w	407704 <__retarget_lock_release_recursive>
  403aa6:	bf00      	nop
  403aa8:	20402ff0 	.word	0x20402ff0

00403aac <_sbrk_r>:
  403aac:	b538      	push	{r3, r4, r5, lr}
  403aae:	4c07      	ldr	r4, [pc, #28]	; (403acc <_sbrk_r+0x20>)
  403ab0:	2300      	movs	r3, #0
  403ab2:	4605      	mov	r5, r0
  403ab4:	4608      	mov	r0, r1
  403ab6:	6023      	str	r3, [r4, #0]
  403ab8:	f7fe ff38 	bl	40292c <_sbrk>
  403abc:	1c43      	adds	r3, r0, #1
  403abe:	d000      	beq.n	403ac2 <_sbrk_r+0x16>
  403ac0:	bd38      	pop	{r3, r4, r5, pc}
  403ac2:	6823      	ldr	r3, [r4, #0]
  403ac4:	2b00      	cmp	r3, #0
  403ac6:	d0fb      	beq.n	403ac0 <_sbrk_r+0x14>
  403ac8:	602b      	str	r3, [r5, #0]
  403aca:	bd38      	pop	{r3, r4, r5, pc}
  403acc:	20403004 	.word	0x20403004

00403ad0 <sprintf>:
  403ad0:	b40e      	push	{r1, r2, r3}
  403ad2:	b5f0      	push	{r4, r5, r6, r7, lr}
  403ad4:	b09c      	sub	sp, #112	; 0x70
  403ad6:	ab21      	add	r3, sp, #132	; 0x84
  403ad8:	490f      	ldr	r1, [pc, #60]	; (403b18 <sprintf+0x48>)
  403ada:	f853 2b04 	ldr.w	r2, [r3], #4
  403ade:	9301      	str	r3, [sp, #4]
  403ae0:	4605      	mov	r5, r0
  403ae2:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  403ae6:	6808      	ldr	r0, [r1, #0]
  403ae8:	9502      	str	r5, [sp, #8]
  403aea:	f44f 7702 	mov.w	r7, #520	; 0x208
  403aee:	f64f 76ff 	movw	r6, #65535	; 0xffff
  403af2:	a902      	add	r1, sp, #8
  403af4:	9506      	str	r5, [sp, #24]
  403af6:	f8ad 7014 	strh.w	r7, [sp, #20]
  403afa:	9404      	str	r4, [sp, #16]
  403afc:	9407      	str	r4, [sp, #28]
  403afe:	f8ad 6016 	strh.w	r6, [sp, #22]
  403b02:	f000 f80b 	bl	403b1c <_svfprintf_r>
  403b06:	9b02      	ldr	r3, [sp, #8]
  403b08:	2200      	movs	r2, #0
  403b0a:	701a      	strb	r2, [r3, #0]
  403b0c:	b01c      	add	sp, #112	; 0x70
  403b0e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  403b12:	b003      	add	sp, #12
  403b14:	4770      	bx	lr
  403b16:	bf00      	nop
  403b18:	20400040 	.word	0x20400040

00403b1c <_svfprintf_r>:
  403b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403b20:	b0c3      	sub	sp, #268	; 0x10c
  403b22:	460c      	mov	r4, r1
  403b24:	910b      	str	r1, [sp, #44]	; 0x2c
  403b26:	4692      	mov	sl, r2
  403b28:	930f      	str	r3, [sp, #60]	; 0x3c
  403b2a:	900c      	str	r0, [sp, #48]	; 0x30
  403b2c:	f003 fdd6 	bl	4076dc <_localeconv_r>
  403b30:	6803      	ldr	r3, [r0, #0]
  403b32:	931a      	str	r3, [sp, #104]	; 0x68
  403b34:	4618      	mov	r0, r3
  403b36:	f004 fcc3 	bl	4084c0 <strlen>
  403b3a:	89a3      	ldrh	r3, [r4, #12]
  403b3c:	9019      	str	r0, [sp, #100]	; 0x64
  403b3e:	0619      	lsls	r1, r3, #24
  403b40:	d503      	bpl.n	403b4a <_svfprintf_r+0x2e>
  403b42:	6923      	ldr	r3, [r4, #16]
  403b44:	2b00      	cmp	r3, #0
  403b46:	f001 8003 	beq.w	404b50 <_svfprintf_r+0x1034>
  403b4a:	2300      	movs	r3, #0
  403b4c:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  403b50:	9313      	str	r3, [sp, #76]	; 0x4c
  403b52:	9315      	str	r3, [sp, #84]	; 0x54
  403b54:	9314      	str	r3, [sp, #80]	; 0x50
  403b56:	9327      	str	r3, [sp, #156]	; 0x9c
  403b58:	9326      	str	r3, [sp, #152]	; 0x98
  403b5a:	9318      	str	r3, [sp, #96]	; 0x60
  403b5c:	931b      	str	r3, [sp, #108]	; 0x6c
  403b5e:	9309      	str	r3, [sp, #36]	; 0x24
  403b60:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  403b64:	46c8      	mov	r8, r9
  403b66:	9316      	str	r3, [sp, #88]	; 0x58
  403b68:	9317      	str	r3, [sp, #92]	; 0x5c
  403b6a:	f89a 3000 	ldrb.w	r3, [sl]
  403b6e:	4654      	mov	r4, sl
  403b70:	b1e3      	cbz	r3, 403bac <_svfprintf_r+0x90>
  403b72:	2b25      	cmp	r3, #37	; 0x25
  403b74:	d102      	bne.n	403b7c <_svfprintf_r+0x60>
  403b76:	e019      	b.n	403bac <_svfprintf_r+0x90>
  403b78:	2b25      	cmp	r3, #37	; 0x25
  403b7a:	d003      	beq.n	403b84 <_svfprintf_r+0x68>
  403b7c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403b80:	2b00      	cmp	r3, #0
  403b82:	d1f9      	bne.n	403b78 <_svfprintf_r+0x5c>
  403b84:	eba4 050a 	sub.w	r5, r4, sl
  403b88:	b185      	cbz	r5, 403bac <_svfprintf_r+0x90>
  403b8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403b8c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403b8e:	f8c8 a000 	str.w	sl, [r8]
  403b92:	3301      	adds	r3, #1
  403b94:	442a      	add	r2, r5
  403b96:	2b07      	cmp	r3, #7
  403b98:	f8c8 5004 	str.w	r5, [r8, #4]
  403b9c:	9227      	str	r2, [sp, #156]	; 0x9c
  403b9e:	9326      	str	r3, [sp, #152]	; 0x98
  403ba0:	dc7f      	bgt.n	403ca2 <_svfprintf_r+0x186>
  403ba2:	f108 0808 	add.w	r8, r8, #8
  403ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403ba8:	442b      	add	r3, r5
  403baa:	9309      	str	r3, [sp, #36]	; 0x24
  403bac:	7823      	ldrb	r3, [r4, #0]
  403bae:	2b00      	cmp	r3, #0
  403bb0:	d07f      	beq.n	403cb2 <_svfprintf_r+0x196>
  403bb2:	2300      	movs	r3, #0
  403bb4:	461a      	mov	r2, r3
  403bb6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403bba:	4619      	mov	r1, r3
  403bbc:	930d      	str	r3, [sp, #52]	; 0x34
  403bbe:	469b      	mov	fp, r3
  403bc0:	f04f 30ff 	mov.w	r0, #4294967295
  403bc4:	7863      	ldrb	r3, [r4, #1]
  403bc6:	900a      	str	r0, [sp, #40]	; 0x28
  403bc8:	f104 0a01 	add.w	sl, r4, #1
  403bcc:	f10a 0a01 	add.w	sl, sl, #1
  403bd0:	f1a3 0020 	sub.w	r0, r3, #32
  403bd4:	2858      	cmp	r0, #88	; 0x58
  403bd6:	f200 83c1 	bhi.w	40435c <_svfprintf_r+0x840>
  403bda:	e8df f010 	tbh	[pc, r0, lsl #1]
  403bde:	0238      	.short	0x0238
  403be0:	03bf03bf 	.word	0x03bf03bf
  403be4:	03bf0240 	.word	0x03bf0240
  403be8:	03bf03bf 	.word	0x03bf03bf
  403bec:	03bf03bf 	.word	0x03bf03bf
  403bf0:	024503bf 	.word	0x024503bf
  403bf4:	03bf0203 	.word	0x03bf0203
  403bf8:	026b005d 	.word	0x026b005d
  403bfc:	028603bf 	.word	0x028603bf
  403c00:	039d039d 	.word	0x039d039d
  403c04:	039d039d 	.word	0x039d039d
  403c08:	039d039d 	.word	0x039d039d
  403c0c:	039d039d 	.word	0x039d039d
  403c10:	03bf039d 	.word	0x03bf039d
  403c14:	03bf03bf 	.word	0x03bf03bf
  403c18:	03bf03bf 	.word	0x03bf03bf
  403c1c:	03bf03bf 	.word	0x03bf03bf
  403c20:	03bf03bf 	.word	0x03bf03bf
  403c24:	033703bf 	.word	0x033703bf
  403c28:	03bf0357 	.word	0x03bf0357
  403c2c:	03bf0357 	.word	0x03bf0357
  403c30:	03bf03bf 	.word	0x03bf03bf
  403c34:	039803bf 	.word	0x039803bf
  403c38:	03bf03bf 	.word	0x03bf03bf
  403c3c:	03bf03ad 	.word	0x03bf03ad
  403c40:	03bf03bf 	.word	0x03bf03bf
  403c44:	03bf03bf 	.word	0x03bf03bf
  403c48:	03bf0259 	.word	0x03bf0259
  403c4c:	031e03bf 	.word	0x031e03bf
  403c50:	03bf03bf 	.word	0x03bf03bf
  403c54:	03bf03bf 	.word	0x03bf03bf
  403c58:	03bf03bf 	.word	0x03bf03bf
  403c5c:	03bf03bf 	.word	0x03bf03bf
  403c60:	03bf03bf 	.word	0x03bf03bf
  403c64:	02db02c6 	.word	0x02db02c6
  403c68:	03570357 	.word	0x03570357
  403c6c:	028b0357 	.word	0x028b0357
  403c70:	03bf02db 	.word	0x03bf02db
  403c74:	029003bf 	.word	0x029003bf
  403c78:	029d03bf 	.word	0x029d03bf
  403c7c:	02b401cc 	.word	0x02b401cc
  403c80:	03bf0208 	.word	0x03bf0208
  403c84:	03bf01e1 	.word	0x03bf01e1
  403c88:	03bf007e 	.word	0x03bf007e
  403c8c:	020d03bf 	.word	0x020d03bf
  403c90:	980d      	ldr	r0, [sp, #52]	; 0x34
  403c92:	930f      	str	r3, [sp, #60]	; 0x3c
  403c94:	4240      	negs	r0, r0
  403c96:	900d      	str	r0, [sp, #52]	; 0x34
  403c98:	f04b 0b04 	orr.w	fp, fp, #4
  403c9c:	f89a 3000 	ldrb.w	r3, [sl]
  403ca0:	e794      	b.n	403bcc <_svfprintf_r+0xb0>
  403ca2:	aa25      	add	r2, sp, #148	; 0x94
  403ca4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403ca6:	980c      	ldr	r0, [sp, #48]	; 0x30
  403ca8:	f004 fc78 	bl	40859c <__ssprint_r>
  403cac:	b940      	cbnz	r0, 403cc0 <_svfprintf_r+0x1a4>
  403cae:	46c8      	mov	r8, r9
  403cb0:	e779      	b.n	403ba6 <_svfprintf_r+0x8a>
  403cb2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403cb4:	b123      	cbz	r3, 403cc0 <_svfprintf_r+0x1a4>
  403cb6:	980c      	ldr	r0, [sp, #48]	; 0x30
  403cb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403cba:	aa25      	add	r2, sp, #148	; 0x94
  403cbc:	f004 fc6e 	bl	40859c <__ssprint_r>
  403cc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403cc2:	899b      	ldrh	r3, [r3, #12]
  403cc4:	f013 0f40 	tst.w	r3, #64	; 0x40
  403cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403cca:	bf18      	it	ne
  403ccc:	f04f 33ff 	movne.w	r3, #4294967295
  403cd0:	9309      	str	r3, [sp, #36]	; 0x24
  403cd2:	9809      	ldr	r0, [sp, #36]	; 0x24
  403cd4:	b043      	add	sp, #268	; 0x10c
  403cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403cda:	f01b 0f20 	tst.w	fp, #32
  403cde:	9311      	str	r3, [sp, #68]	; 0x44
  403ce0:	f040 81dd 	bne.w	40409e <_svfprintf_r+0x582>
  403ce4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403ce6:	f01b 0f10 	tst.w	fp, #16
  403cea:	4613      	mov	r3, r2
  403cec:	f040 856e 	bne.w	4047cc <_svfprintf_r+0xcb0>
  403cf0:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403cf4:	f000 856a 	beq.w	4047cc <_svfprintf_r+0xcb0>
  403cf8:	8814      	ldrh	r4, [r2, #0]
  403cfa:	3204      	adds	r2, #4
  403cfc:	2500      	movs	r5, #0
  403cfe:	2301      	movs	r3, #1
  403d00:	920f      	str	r2, [sp, #60]	; 0x3c
  403d02:	2700      	movs	r7, #0
  403d04:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403d08:	990a      	ldr	r1, [sp, #40]	; 0x28
  403d0a:	1c4a      	adds	r2, r1, #1
  403d0c:	f000 8265 	beq.w	4041da <_svfprintf_r+0x6be>
  403d10:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  403d14:	9207      	str	r2, [sp, #28]
  403d16:	ea54 0205 	orrs.w	r2, r4, r5
  403d1a:	f040 8264 	bne.w	4041e6 <_svfprintf_r+0x6ca>
  403d1e:	2900      	cmp	r1, #0
  403d20:	f040 843c 	bne.w	40459c <_svfprintf_r+0xa80>
  403d24:	2b00      	cmp	r3, #0
  403d26:	f040 84d7 	bne.w	4046d8 <_svfprintf_r+0xbbc>
  403d2a:	f01b 0301 	ands.w	r3, fp, #1
  403d2e:	930e      	str	r3, [sp, #56]	; 0x38
  403d30:	f000 8604 	beq.w	40493c <_svfprintf_r+0xe20>
  403d34:	ae42      	add	r6, sp, #264	; 0x108
  403d36:	2330      	movs	r3, #48	; 0x30
  403d38:	f806 3d41 	strb.w	r3, [r6, #-65]!
  403d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403d3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403d40:	4293      	cmp	r3, r2
  403d42:	bfb8      	it	lt
  403d44:	4613      	movlt	r3, r2
  403d46:	9308      	str	r3, [sp, #32]
  403d48:	2300      	movs	r3, #0
  403d4a:	9312      	str	r3, [sp, #72]	; 0x48
  403d4c:	b117      	cbz	r7, 403d54 <_svfprintf_r+0x238>
  403d4e:	9b08      	ldr	r3, [sp, #32]
  403d50:	3301      	adds	r3, #1
  403d52:	9308      	str	r3, [sp, #32]
  403d54:	9b07      	ldr	r3, [sp, #28]
  403d56:	f013 0302 	ands.w	r3, r3, #2
  403d5a:	9310      	str	r3, [sp, #64]	; 0x40
  403d5c:	d002      	beq.n	403d64 <_svfprintf_r+0x248>
  403d5e:	9b08      	ldr	r3, [sp, #32]
  403d60:	3302      	adds	r3, #2
  403d62:	9308      	str	r3, [sp, #32]
  403d64:	9b07      	ldr	r3, [sp, #28]
  403d66:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  403d6a:	f040 830e 	bne.w	40438a <_svfprintf_r+0x86e>
  403d6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403d70:	9a08      	ldr	r2, [sp, #32]
  403d72:	eba3 0b02 	sub.w	fp, r3, r2
  403d76:	f1bb 0f00 	cmp.w	fp, #0
  403d7a:	f340 8306 	ble.w	40438a <_svfprintf_r+0x86e>
  403d7e:	f1bb 0f10 	cmp.w	fp, #16
  403d82:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403d84:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403d86:	dd29      	ble.n	403ddc <_svfprintf_r+0x2c0>
  403d88:	4643      	mov	r3, r8
  403d8a:	4621      	mov	r1, r4
  403d8c:	46a8      	mov	r8, r5
  403d8e:	2710      	movs	r7, #16
  403d90:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403d92:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403d94:	e006      	b.n	403da4 <_svfprintf_r+0x288>
  403d96:	f1ab 0b10 	sub.w	fp, fp, #16
  403d9a:	f1bb 0f10 	cmp.w	fp, #16
  403d9e:	f103 0308 	add.w	r3, r3, #8
  403da2:	dd18      	ble.n	403dd6 <_svfprintf_r+0x2ba>
  403da4:	3201      	adds	r2, #1
  403da6:	48b7      	ldr	r0, [pc, #732]	; (404084 <_svfprintf_r+0x568>)
  403da8:	9226      	str	r2, [sp, #152]	; 0x98
  403daa:	3110      	adds	r1, #16
  403dac:	2a07      	cmp	r2, #7
  403dae:	9127      	str	r1, [sp, #156]	; 0x9c
  403db0:	e883 0081 	stmia.w	r3, {r0, r7}
  403db4:	ddef      	ble.n	403d96 <_svfprintf_r+0x27a>
  403db6:	aa25      	add	r2, sp, #148	; 0x94
  403db8:	4629      	mov	r1, r5
  403dba:	4620      	mov	r0, r4
  403dbc:	f004 fbee 	bl	40859c <__ssprint_r>
  403dc0:	2800      	cmp	r0, #0
  403dc2:	f47f af7d 	bne.w	403cc0 <_svfprintf_r+0x1a4>
  403dc6:	f1ab 0b10 	sub.w	fp, fp, #16
  403dca:	f1bb 0f10 	cmp.w	fp, #16
  403dce:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403dd0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403dd2:	464b      	mov	r3, r9
  403dd4:	dce6      	bgt.n	403da4 <_svfprintf_r+0x288>
  403dd6:	4645      	mov	r5, r8
  403dd8:	460c      	mov	r4, r1
  403dda:	4698      	mov	r8, r3
  403ddc:	3201      	adds	r2, #1
  403dde:	4ba9      	ldr	r3, [pc, #676]	; (404084 <_svfprintf_r+0x568>)
  403de0:	9226      	str	r2, [sp, #152]	; 0x98
  403de2:	445c      	add	r4, fp
  403de4:	2a07      	cmp	r2, #7
  403de6:	9427      	str	r4, [sp, #156]	; 0x9c
  403de8:	e888 0808 	stmia.w	r8, {r3, fp}
  403dec:	f300 8498 	bgt.w	404720 <_svfprintf_r+0xc04>
  403df0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403df4:	f108 0808 	add.w	r8, r8, #8
  403df8:	b177      	cbz	r7, 403e18 <_svfprintf_r+0x2fc>
  403dfa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403dfc:	3301      	adds	r3, #1
  403dfe:	3401      	adds	r4, #1
  403e00:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  403e04:	2201      	movs	r2, #1
  403e06:	2b07      	cmp	r3, #7
  403e08:	9427      	str	r4, [sp, #156]	; 0x9c
  403e0a:	9326      	str	r3, [sp, #152]	; 0x98
  403e0c:	e888 0006 	stmia.w	r8, {r1, r2}
  403e10:	f300 83db 	bgt.w	4045ca <_svfprintf_r+0xaae>
  403e14:	f108 0808 	add.w	r8, r8, #8
  403e18:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403e1a:	b16b      	cbz	r3, 403e38 <_svfprintf_r+0x31c>
  403e1c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e1e:	3301      	adds	r3, #1
  403e20:	3402      	adds	r4, #2
  403e22:	a91e      	add	r1, sp, #120	; 0x78
  403e24:	2202      	movs	r2, #2
  403e26:	2b07      	cmp	r3, #7
  403e28:	9427      	str	r4, [sp, #156]	; 0x9c
  403e2a:	9326      	str	r3, [sp, #152]	; 0x98
  403e2c:	e888 0006 	stmia.w	r8, {r1, r2}
  403e30:	f300 83d6 	bgt.w	4045e0 <_svfprintf_r+0xac4>
  403e34:	f108 0808 	add.w	r8, r8, #8
  403e38:	2d80      	cmp	r5, #128	; 0x80
  403e3a:	f000 8315 	beq.w	404468 <_svfprintf_r+0x94c>
  403e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403e40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403e42:	1a9f      	subs	r7, r3, r2
  403e44:	2f00      	cmp	r7, #0
  403e46:	dd36      	ble.n	403eb6 <_svfprintf_r+0x39a>
  403e48:	2f10      	cmp	r7, #16
  403e4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e4c:	4d8e      	ldr	r5, [pc, #568]	; (404088 <_svfprintf_r+0x56c>)
  403e4e:	dd27      	ble.n	403ea0 <_svfprintf_r+0x384>
  403e50:	4642      	mov	r2, r8
  403e52:	4621      	mov	r1, r4
  403e54:	46b0      	mov	r8, r6
  403e56:	f04f 0b10 	mov.w	fp, #16
  403e5a:	462e      	mov	r6, r5
  403e5c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403e5e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403e60:	e004      	b.n	403e6c <_svfprintf_r+0x350>
  403e62:	3f10      	subs	r7, #16
  403e64:	2f10      	cmp	r7, #16
  403e66:	f102 0208 	add.w	r2, r2, #8
  403e6a:	dd15      	ble.n	403e98 <_svfprintf_r+0x37c>
  403e6c:	3301      	adds	r3, #1
  403e6e:	3110      	adds	r1, #16
  403e70:	2b07      	cmp	r3, #7
  403e72:	9127      	str	r1, [sp, #156]	; 0x9c
  403e74:	9326      	str	r3, [sp, #152]	; 0x98
  403e76:	e882 0840 	stmia.w	r2, {r6, fp}
  403e7a:	ddf2      	ble.n	403e62 <_svfprintf_r+0x346>
  403e7c:	aa25      	add	r2, sp, #148	; 0x94
  403e7e:	4629      	mov	r1, r5
  403e80:	4620      	mov	r0, r4
  403e82:	f004 fb8b 	bl	40859c <__ssprint_r>
  403e86:	2800      	cmp	r0, #0
  403e88:	f47f af1a 	bne.w	403cc0 <_svfprintf_r+0x1a4>
  403e8c:	3f10      	subs	r7, #16
  403e8e:	2f10      	cmp	r7, #16
  403e90:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403e92:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e94:	464a      	mov	r2, r9
  403e96:	dce9      	bgt.n	403e6c <_svfprintf_r+0x350>
  403e98:	4635      	mov	r5, r6
  403e9a:	460c      	mov	r4, r1
  403e9c:	4646      	mov	r6, r8
  403e9e:	4690      	mov	r8, r2
  403ea0:	3301      	adds	r3, #1
  403ea2:	443c      	add	r4, r7
  403ea4:	2b07      	cmp	r3, #7
  403ea6:	9427      	str	r4, [sp, #156]	; 0x9c
  403ea8:	9326      	str	r3, [sp, #152]	; 0x98
  403eaa:	e888 00a0 	stmia.w	r8, {r5, r7}
  403eae:	f300 8381 	bgt.w	4045b4 <_svfprintf_r+0xa98>
  403eb2:	f108 0808 	add.w	r8, r8, #8
  403eb6:	9b07      	ldr	r3, [sp, #28]
  403eb8:	05df      	lsls	r7, r3, #23
  403eba:	f100 8268 	bmi.w	40438e <_svfprintf_r+0x872>
  403ebe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403ec0:	990e      	ldr	r1, [sp, #56]	; 0x38
  403ec2:	f8c8 6000 	str.w	r6, [r8]
  403ec6:	3301      	adds	r3, #1
  403ec8:	440c      	add	r4, r1
  403eca:	2b07      	cmp	r3, #7
  403ecc:	9427      	str	r4, [sp, #156]	; 0x9c
  403ece:	f8c8 1004 	str.w	r1, [r8, #4]
  403ed2:	9326      	str	r3, [sp, #152]	; 0x98
  403ed4:	f300 834d 	bgt.w	404572 <_svfprintf_r+0xa56>
  403ed8:	f108 0808 	add.w	r8, r8, #8
  403edc:	9b07      	ldr	r3, [sp, #28]
  403ede:	075b      	lsls	r3, r3, #29
  403ee0:	d53a      	bpl.n	403f58 <_svfprintf_r+0x43c>
  403ee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403ee4:	9a08      	ldr	r2, [sp, #32]
  403ee6:	1a9d      	subs	r5, r3, r2
  403ee8:	2d00      	cmp	r5, #0
  403eea:	dd35      	ble.n	403f58 <_svfprintf_r+0x43c>
  403eec:	2d10      	cmp	r5, #16
  403eee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403ef0:	dd20      	ble.n	403f34 <_svfprintf_r+0x418>
  403ef2:	2610      	movs	r6, #16
  403ef4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403ef6:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  403efa:	e004      	b.n	403f06 <_svfprintf_r+0x3ea>
  403efc:	3d10      	subs	r5, #16
  403efe:	2d10      	cmp	r5, #16
  403f00:	f108 0808 	add.w	r8, r8, #8
  403f04:	dd16      	ble.n	403f34 <_svfprintf_r+0x418>
  403f06:	3301      	adds	r3, #1
  403f08:	4a5e      	ldr	r2, [pc, #376]	; (404084 <_svfprintf_r+0x568>)
  403f0a:	9326      	str	r3, [sp, #152]	; 0x98
  403f0c:	3410      	adds	r4, #16
  403f0e:	2b07      	cmp	r3, #7
  403f10:	9427      	str	r4, [sp, #156]	; 0x9c
  403f12:	e888 0044 	stmia.w	r8, {r2, r6}
  403f16:	ddf1      	ble.n	403efc <_svfprintf_r+0x3e0>
  403f18:	aa25      	add	r2, sp, #148	; 0x94
  403f1a:	4659      	mov	r1, fp
  403f1c:	4638      	mov	r0, r7
  403f1e:	f004 fb3d 	bl	40859c <__ssprint_r>
  403f22:	2800      	cmp	r0, #0
  403f24:	f47f aecc 	bne.w	403cc0 <_svfprintf_r+0x1a4>
  403f28:	3d10      	subs	r5, #16
  403f2a:	2d10      	cmp	r5, #16
  403f2c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403f2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f30:	46c8      	mov	r8, r9
  403f32:	dce8      	bgt.n	403f06 <_svfprintf_r+0x3ea>
  403f34:	3301      	adds	r3, #1
  403f36:	4a53      	ldr	r2, [pc, #332]	; (404084 <_svfprintf_r+0x568>)
  403f38:	9326      	str	r3, [sp, #152]	; 0x98
  403f3a:	442c      	add	r4, r5
  403f3c:	2b07      	cmp	r3, #7
  403f3e:	9427      	str	r4, [sp, #156]	; 0x9c
  403f40:	e888 0024 	stmia.w	r8, {r2, r5}
  403f44:	dd08      	ble.n	403f58 <_svfprintf_r+0x43c>
  403f46:	aa25      	add	r2, sp, #148	; 0x94
  403f48:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403f4a:	980c      	ldr	r0, [sp, #48]	; 0x30
  403f4c:	f004 fb26 	bl	40859c <__ssprint_r>
  403f50:	2800      	cmp	r0, #0
  403f52:	f47f aeb5 	bne.w	403cc0 <_svfprintf_r+0x1a4>
  403f56:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403f5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403f5c:	9908      	ldr	r1, [sp, #32]
  403f5e:	428a      	cmp	r2, r1
  403f60:	bfac      	ite	ge
  403f62:	189b      	addge	r3, r3, r2
  403f64:	185b      	addlt	r3, r3, r1
  403f66:	9309      	str	r3, [sp, #36]	; 0x24
  403f68:	2c00      	cmp	r4, #0
  403f6a:	f040 830d 	bne.w	404588 <_svfprintf_r+0xa6c>
  403f6e:	2300      	movs	r3, #0
  403f70:	9326      	str	r3, [sp, #152]	; 0x98
  403f72:	46c8      	mov	r8, r9
  403f74:	e5f9      	b.n	403b6a <_svfprintf_r+0x4e>
  403f76:	9311      	str	r3, [sp, #68]	; 0x44
  403f78:	f01b 0320 	ands.w	r3, fp, #32
  403f7c:	f040 81e3 	bne.w	404346 <_svfprintf_r+0x82a>
  403f80:	f01b 0210 	ands.w	r2, fp, #16
  403f84:	f040 842e 	bne.w	4047e4 <_svfprintf_r+0xcc8>
  403f88:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  403f8c:	f000 842a 	beq.w	4047e4 <_svfprintf_r+0xcc8>
  403f90:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403f92:	4613      	mov	r3, r2
  403f94:	460a      	mov	r2, r1
  403f96:	3204      	adds	r2, #4
  403f98:	880c      	ldrh	r4, [r1, #0]
  403f9a:	920f      	str	r2, [sp, #60]	; 0x3c
  403f9c:	2500      	movs	r5, #0
  403f9e:	e6b0      	b.n	403d02 <_svfprintf_r+0x1e6>
  403fa0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403fa2:	9311      	str	r3, [sp, #68]	; 0x44
  403fa4:	6816      	ldr	r6, [r2, #0]
  403fa6:	2400      	movs	r4, #0
  403fa8:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  403fac:	1d15      	adds	r5, r2, #4
  403fae:	2e00      	cmp	r6, #0
  403fb0:	f000 86a7 	beq.w	404d02 <_svfprintf_r+0x11e6>
  403fb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403fb6:	1c53      	adds	r3, r2, #1
  403fb8:	f000 8609 	beq.w	404bce <_svfprintf_r+0x10b2>
  403fbc:	4621      	mov	r1, r4
  403fbe:	4630      	mov	r0, r6
  403fc0:	f003 fc36 	bl	407830 <memchr>
  403fc4:	2800      	cmp	r0, #0
  403fc6:	f000 86e1 	beq.w	404d8c <_svfprintf_r+0x1270>
  403fca:	1b83      	subs	r3, r0, r6
  403fcc:	930e      	str	r3, [sp, #56]	; 0x38
  403fce:	940a      	str	r4, [sp, #40]	; 0x28
  403fd0:	950f      	str	r5, [sp, #60]	; 0x3c
  403fd2:	f8cd b01c 	str.w	fp, [sp, #28]
  403fd6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403fda:	9308      	str	r3, [sp, #32]
  403fdc:	9412      	str	r4, [sp, #72]	; 0x48
  403fde:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403fe2:	e6b3      	b.n	403d4c <_svfprintf_r+0x230>
  403fe4:	f89a 3000 	ldrb.w	r3, [sl]
  403fe8:	2201      	movs	r2, #1
  403fea:	212b      	movs	r1, #43	; 0x2b
  403fec:	e5ee      	b.n	403bcc <_svfprintf_r+0xb0>
  403fee:	f04b 0b20 	orr.w	fp, fp, #32
  403ff2:	f89a 3000 	ldrb.w	r3, [sl]
  403ff6:	e5e9      	b.n	403bcc <_svfprintf_r+0xb0>
  403ff8:	9311      	str	r3, [sp, #68]	; 0x44
  403ffa:	2a00      	cmp	r2, #0
  403ffc:	f040 8795 	bne.w	404f2a <_svfprintf_r+0x140e>
  404000:	4b22      	ldr	r3, [pc, #136]	; (40408c <_svfprintf_r+0x570>)
  404002:	9318      	str	r3, [sp, #96]	; 0x60
  404004:	f01b 0f20 	tst.w	fp, #32
  404008:	f040 8111 	bne.w	40422e <_svfprintf_r+0x712>
  40400c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40400e:	f01b 0f10 	tst.w	fp, #16
  404012:	4613      	mov	r3, r2
  404014:	f040 83e1 	bne.w	4047da <_svfprintf_r+0xcbe>
  404018:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40401c:	f000 83dd 	beq.w	4047da <_svfprintf_r+0xcbe>
  404020:	3304      	adds	r3, #4
  404022:	8814      	ldrh	r4, [r2, #0]
  404024:	930f      	str	r3, [sp, #60]	; 0x3c
  404026:	2500      	movs	r5, #0
  404028:	f01b 0f01 	tst.w	fp, #1
  40402c:	f000 810c 	beq.w	404248 <_svfprintf_r+0x72c>
  404030:	ea54 0305 	orrs.w	r3, r4, r5
  404034:	f000 8108 	beq.w	404248 <_svfprintf_r+0x72c>
  404038:	2330      	movs	r3, #48	; 0x30
  40403a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40403e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  404042:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  404046:	f04b 0b02 	orr.w	fp, fp, #2
  40404a:	2302      	movs	r3, #2
  40404c:	e659      	b.n	403d02 <_svfprintf_r+0x1e6>
  40404e:	f89a 3000 	ldrb.w	r3, [sl]
  404052:	2900      	cmp	r1, #0
  404054:	f47f adba 	bne.w	403bcc <_svfprintf_r+0xb0>
  404058:	2201      	movs	r2, #1
  40405a:	2120      	movs	r1, #32
  40405c:	e5b6      	b.n	403bcc <_svfprintf_r+0xb0>
  40405e:	f04b 0b01 	orr.w	fp, fp, #1
  404062:	f89a 3000 	ldrb.w	r3, [sl]
  404066:	e5b1      	b.n	403bcc <_svfprintf_r+0xb0>
  404068:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40406a:	6823      	ldr	r3, [r4, #0]
  40406c:	930d      	str	r3, [sp, #52]	; 0x34
  40406e:	4618      	mov	r0, r3
  404070:	2800      	cmp	r0, #0
  404072:	4623      	mov	r3, r4
  404074:	f103 0304 	add.w	r3, r3, #4
  404078:	f6ff ae0a 	blt.w	403c90 <_svfprintf_r+0x174>
  40407c:	930f      	str	r3, [sp, #60]	; 0x3c
  40407e:	f89a 3000 	ldrb.w	r3, [sl]
  404082:	e5a3      	b.n	403bcc <_svfprintf_r+0xb0>
  404084:	00409a9c 	.word	0x00409a9c
  404088:	00409aac 	.word	0x00409aac
  40408c:	00409a7c 	.word	0x00409a7c
  404090:	f04b 0b10 	orr.w	fp, fp, #16
  404094:	f01b 0f20 	tst.w	fp, #32
  404098:	9311      	str	r3, [sp, #68]	; 0x44
  40409a:	f43f ae23 	beq.w	403ce4 <_svfprintf_r+0x1c8>
  40409e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4040a0:	3507      	adds	r5, #7
  4040a2:	f025 0307 	bic.w	r3, r5, #7
  4040a6:	f103 0208 	add.w	r2, r3, #8
  4040aa:	e9d3 4500 	ldrd	r4, r5, [r3]
  4040ae:	920f      	str	r2, [sp, #60]	; 0x3c
  4040b0:	2301      	movs	r3, #1
  4040b2:	e626      	b.n	403d02 <_svfprintf_r+0x1e6>
  4040b4:	f89a 3000 	ldrb.w	r3, [sl]
  4040b8:	2b2a      	cmp	r3, #42	; 0x2a
  4040ba:	f10a 0401 	add.w	r4, sl, #1
  4040be:	f000 8727 	beq.w	404f10 <_svfprintf_r+0x13f4>
  4040c2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4040c6:	2809      	cmp	r0, #9
  4040c8:	46a2      	mov	sl, r4
  4040ca:	f200 86ad 	bhi.w	404e28 <_svfprintf_r+0x130c>
  4040ce:	2300      	movs	r3, #0
  4040d0:	461c      	mov	r4, r3
  4040d2:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4040d6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4040da:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4040de:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4040e2:	2809      	cmp	r0, #9
  4040e4:	d9f5      	bls.n	4040d2 <_svfprintf_r+0x5b6>
  4040e6:	940a      	str	r4, [sp, #40]	; 0x28
  4040e8:	e572      	b.n	403bd0 <_svfprintf_r+0xb4>
  4040ea:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  4040ee:	f89a 3000 	ldrb.w	r3, [sl]
  4040f2:	e56b      	b.n	403bcc <_svfprintf_r+0xb0>
  4040f4:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  4040f8:	f89a 3000 	ldrb.w	r3, [sl]
  4040fc:	e566      	b.n	403bcc <_svfprintf_r+0xb0>
  4040fe:	f89a 3000 	ldrb.w	r3, [sl]
  404102:	2b6c      	cmp	r3, #108	; 0x6c
  404104:	bf03      	ittte	eq
  404106:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  40410a:	f04b 0b20 	orreq.w	fp, fp, #32
  40410e:	f10a 0a01 	addeq.w	sl, sl, #1
  404112:	f04b 0b10 	orrne.w	fp, fp, #16
  404116:	e559      	b.n	403bcc <_svfprintf_r+0xb0>
  404118:	2a00      	cmp	r2, #0
  40411a:	f040 8711 	bne.w	404f40 <_svfprintf_r+0x1424>
  40411e:	f01b 0f20 	tst.w	fp, #32
  404122:	f040 84f9 	bne.w	404b18 <_svfprintf_r+0xffc>
  404126:	f01b 0f10 	tst.w	fp, #16
  40412a:	f040 84ac 	bne.w	404a86 <_svfprintf_r+0xf6a>
  40412e:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404132:	f000 84a8 	beq.w	404a86 <_svfprintf_r+0xf6a>
  404136:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404138:	6813      	ldr	r3, [r2, #0]
  40413a:	3204      	adds	r2, #4
  40413c:	920f      	str	r2, [sp, #60]	; 0x3c
  40413e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  404142:	801a      	strh	r2, [r3, #0]
  404144:	e511      	b.n	403b6a <_svfprintf_r+0x4e>
  404146:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404148:	4bb3      	ldr	r3, [pc, #716]	; (404418 <_svfprintf_r+0x8fc>)
  40414a:	680c      	ldr	r4, [r1, #0]
  40414c:	9318      	str	r3, [sp, #96]	; 0x60
  40414e:	2230      	movs	r2, #48	; 0x30
  404150:	2378      	movs	r3, #120	; 0x78
  404152:	3104      	adds	r1, #4
  404154:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  404158:	9311      	str	r3, [sp, #68]	; 0x44
  40415a:	f04b 0b02 	orr.w	fp, fp, #2
  40415e:	910f      	str	r1, [sp, #60]	; 0x3c
  404160:	2500      	movs	r5, #0
  404162:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  404166:	2302      	movs	r3, #2
  404168:	e5cb      	b.n	403d02 <_svfprintf_r+0x1e6>
  40416a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40416c:	9311      	str	r3, [sp, #68]	; 0x44
  40416e:	680a      	ldr	r2, [r1, #0]
  404170:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  404174:	2300      	movs	r3, #0
  404176:	460a      	mov	r2, r1
  404178:	461f      	mov	r7, r3
  40417a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40417e:	3204      	adds	r2, #4
  404180:	2301      	movs	r3, #1
  404182:	9308      	str	r3, [sp, #32]
  404184:	f8cd b01c 	str.w	fp, [sp, #28]
  404188:	970a      	str	r7, [sp, #40]	; 0x28
  40418a:	9712      	str	r7, [sp, #72]	; 0x48
  40418c:	920f      	str	r2, [sp, #60]	; 0x3c
  40418e:	930e      	str	r3, [sp, #56]	; 0x38
  404190:	ae28      	add	r6, sp, #160	; 0xa0
  404192:	e5df      	b.n	403d54 <_svfprintf_r+0x238>
  404194:	9311      	str	r3, [sp, #68]	; 0x44
  404196:	2a00      	cmp	r2, #0
  404198:	f040 86ea 	bne.w	404f70 <_svfprintf_r+0x1454>
  40419c:	f01b 0f20 	tst.w	fp, #32
  4041a0:	d15d      	bne.n	40425e <_svfprintf_r+0x742>
  4041a2:	f01b 0f10 	tst.w	fp, #16
  4041a6:	f040 8308 	bne.w	4047ba <_svfprintf_r+0xc9e>
  4041aa:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4041ae:	f000 8304 	beq.w	4047ba <_svfprintf_r+0xc9e>
  4041b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4041b4:	f9b1 4000 	ldrsh.w	r4, [r1]
  4041b8:	3104      	adds	r1, #4
  4041ba:	17e5      	asrs	r5, r4, #31
  4041bc:	4622      	mov	r2, r4
  4041be:	462b      	mov	r3, r5
  4041c0:	910f      	str	r1, [sp, #60]	; 0x3c
  4041c2:	2a00      	cmp	r2, #0
  4041c4:	f173 0300 	sbcs.w	r3, r3, #0
  4041c8:	db58      	blt.n	40427c <_svfprintf_r+0x760>
  4041ca:	990a      	ldr	r1, [sp, #40]	; 0x28
  4041cc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4041d0:	1c4a      	adds	r2, r1, #1
  4041d2:	f04f 0301 	mov.w	r3, #1
  4041d6:	f47f ad9b 	bne.w	403d10 <_svfprintf_r+0x1f4>
  4041da:	ea54 0205 	orrs.w	r2, r4, r5
  4041de:	f000 81df 	beq.w	4045a0 <_svfprintf_r+0xa84>
  4041e2:	f8cd b01c 	str.w	fp, [sp, #28]
  4041e6:	2b01      	cmp	r3, #1
  4041e8:	f000 827b 	beq.w	4046e2 <_svfprintf_r+0xbc6>
  4041ec:	2b02      	cmp	r3, #2
  4041ee:	f040 8206 	bne.w	4045fe <_svfprintf_r+0xae2>
  4041f2:	9818      	ldr	r0, [sp, #96]	; 0x60
  4041f4:	464e      	mov	r6, r9
  4041f6:	0923      	lsrs	r3, r4, #4
  4041f8:	f004 010f 	and.w	r1, r4, #15
  4041fc:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404200:	092a      	lsrs	r2, r5, #4
  404202:	461c      	mov	r4, r3
  404204:	4615      	mov	r5, r2
  404206:	5c43      	ldrb	r3, [r0, r1]
  404208:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40420c:	ea54 0305 	orrs.w	r3, r4, r5
  404210:	d1f1      	bne.n	4041f6 <_svfprintf_r+0x6da>
  404212:	eba9 0306 	sub.w	r3, r9, r6
  404216:	930e      	str	r3, [sp, #56]	; 0x38
  404218:	e590      	b.n	403d3c <_svfprintf_r+0x220>
  40421a:	9311      	str	r3, [sp, #68]	; 0x44
  40421c:	2a00      	cmp	r2, #0
  40421e:	f040 86a3 	bne.w	404f68 <_svfprintf_r+0x144c>
  404222:	4b7e      	ldr	r3, [pc, #504]	; (40441c <_svfprintf_r+0x900>)
  404224:	9318      	str	r3, [sp, #96]	; 0x60
  404226:	f01b 0f20 	tst.w	fp, #32
  40422a:	f43f aeef 	beq.w	40400c <_svfprintf_r+0x4f0>
  40422e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404230:	3507      	adds	r5, #7
  404232:	f025 0307 	bic.w	r3, r5, #7
  404236:	f103 0208 	add.w	r2, r3, #8
  40423a:	f01b 0f01 	tst.w	fp, #1
  40423e:	920f      	str	r2, [sp, #60]	; 0x3c
  404240:	e9d3 4500 	ldrd	r4, r5, [r3]
  404244:	f47f aef4 	bne.w	404030 <_svfprintf_r+0x514>
  404248:	2302      	movs	r3, #2
  40424a:	e55a      	b.n	403d02 <_svfprintf_r+0x1e6>
  40424c:	9311      	str	r3, [sp, #68]	; 0x44
  40424e:	2a00      	cmp	r2, #0
  404250:	f040 8686 	bne.w	404f60 <_svfprintf_r+0x1444>
  404254:	f04b 0b10 	orr.w	fp, fp, #16
  404258:	f01b 0f20 	tst.w	fp, #32
  40425c:	d0a1      	beq.n	4041a2 <_svfprintf_r+0x686>
  40425e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404260:	3507      	adds	r5, #7
  404262:	f025 0507 	bic.w	r5, r5, #7
  404266:	e9d5 2300 	ldrd	r2, r3, [r5]
  40426a:	2a00      	cmp	r2, #0
  40426c:	f105 0108 	add.w	r1, r5, #8
  404270:	461d      	mov	r5, r3
  404272:	f173 0300 	sbcs.w	r3, r3, #0
  404276:	910f      	str	r1, [sp, #60]	; 0x3c
  404278:	4614      	mov	r4, r2
  40427a:	daa6      	bge.n	4041ca <_svfprintf_r+0x6ae>
  40427c:	272d      	movs	r7, #45	; 0x2d
  40427e:	4264      	negs	r4, r4
  404280:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404284:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404288:	2301      	movs	r3, #1
  40428a:	e53d      	b.n	403d08 <_svfprintf_r+0x1ec>
  40428c:	9311      	str	r3, [sp, #68]	; 0x44
  40428e:	2a00      	cmp	r2, #0
  404290:	f040 8662 	bne.w	404f58 <_svfprintf_r+0x143c>
  404294:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404296:	3507      	adds	r5, #7
  404298:	f025 0307 	bic.w	r3, r5, #7
  40429c:	f103 0208 	add.w	r2, r3, #8
  4042a0:	920f      	str	r2, [sp, #60]	; 0x3c
  4042a2:	681a      	ldr	r2, [r3, #0]
  4042a4:	9215      	str	r2, [sp, #84]	; 0x54
  4042a6:	685b      	ldr	r3, [r3, #4]
  4042a8:	9314      	str	r3, [sp, #80]	; 0x50
  4042aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4042ac:	9d15      	ldr	r5, [sp, #84]	; 0x54
  4042ae:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  4042b2:	4628      	mov	r0, r5
  4042b4:	4621      	mov	r1, r4
  4042b6:	f04f 32ff 	mov.w	r2, #4294967295
  4042ba:	4b59      	ldr	r3, [pc, #356]	; (404420 <_svfprintf_r+0x904>)
  4042bc:	f7ff f842 	bl	403344 <__aeabi_dcmpun>
  4042c0:	2800      	cmp	r0, #0
  4042c2:	f040 834a 	bne.w	40495a <_svfprintf_r+0xe3e>
  4042c6:	4628      	mov	r0, r5
  4042c8:	4621      	mov	r1, r4
  4042ca:	f04f 32ff 	mov.w	r2, #4294967295
  4042ce:	4b54      	ldr	r3, [pc, #336]	; (404420 <_svfprintf_r+0x904>)
  4042d0:	f7ff f81a 	bl	403308 <__aeabi_dcmple>
  4042d4:	2800      	cmp	r0, #0
  4042d6:	f040 8340 	bne.w	40495a <_svfprintf_r+0xe3e>
  4042da:	a815      	add	r0, sp, #84	; 0x54
  4042dc:	c80d      	ldmia	r0, {r0, r2, r3}
  4042de:	9914      	ldr	r1, [sp, #80]	; 0x50
  4042e0:	f7ff f808 	bl	4032f4 <__aeabi_dcmplt>
  4042e4:	2800      	cmp	r0, #0
  4042e6:	f040 8530 	bne.w	404d4a <_svfprintf_r+0x122e>
  4042ea:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4042ee:	4e4d      	ldr	r6, [pc, #308]	; (404424 <_svfprintf_r+0x908>)
  4042f0:	4b4d      	ldr	r3, [pc, #308]	; (404428 <_svfprintf_r+0x90c>)
  4042f2:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  4042f6:	9007      	str	r0, [sp, #28]
  4042f8:	9811      	ldr	r0, [sp, #68]	; 0x44
  4042fa:	2203      	movs	r2, #3
  4042fc:	2100      	movs	r1, #0
  4042fe:	9208      	str	r2, [sp, #32]
  404300:	910a      	str	r1, [sp, #40]	; 0x28
  404302:	2847      	cmp	r0, #71	; 0x47
  404304:	bfd8      	it	le
  404306:	461e      	movle	r6, r3
  404308:	920e      	str	r2, [sp, #56]	; 0x38
  40430a:	9112      	str	r1, [sp, #72]	; 0x48
  40430c:	e51e      	b.n	403d4c <_svfprintf_r+0x230>
  40430e:	f04b 0b08 	orr.w	fp, fp, #8
  404312:	f89a 3000 	ldrb.w	r3, [sl]
  404316:	e459      	b.n	403bcc <_svfprintf_r+0xb0>
  404318:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40431c:	2300      	movs	r3, #0
  40431e:	461c      	mov	r4, r3
  404320:	f81a 3b01 	ldrb.w	r3, [sl], #1
  404324:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404328:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40432c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404330:	2809      	cmp	r0, #9
  404332:	d9f5      	bls.n	404320 <_svfprintf_r+0x804>
  404334:	940d      	str	r4, [sp, #52]	; 0x34
  404336:	e44b      	b.n	403bd0 <_svfprintf_r+0xb4>
  404338:	f04b 0b10 	orr.w	fp, fp, #16
  40433c:	9311      	str	r3, [sp, #68]	; 0x44
  40433e:	f01b 0320 	ands.w	r3, fp, #32
  404342:	f43f ae1d 	beq.w	403f80 <_svfprintf_r+0x464>
  404346:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404348:	3507      	adds	r5, #7
  40434a:	f025 0307 	bic.w	r3, r5, #7
  40434e:	f103 0208 	add.w	r2, r3, #8
  404352:	e9d3 4500 	ldrd	r4, r5, [r3]
  404356:	920f      	str	r2, [sp, #60]	; 0x3c
  404358:	2300      	movs	r3, #0
  40435a:	e4d2      	b.n	403d02 <_svfprintf_r+0x1e6>
  40435c:	9311      	str	r3, [sp, #68]	; 0x44
  40435e:	2a00      	cmp	r2, #0
  404360:	f040 85e7 	bne.w	404f32 <_svfprintf_r+0x1416>
  404364:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404366:	2a00      	cmp	r2, #0
  404368:	f43f aca3 	beq.w	403cb2 <_svfprintf_r+0x196>
  40436c:	2300      	movs	r3, #0
  40436e:	2101      	movs	r1, #1
  404370:	461f      	mov	r7, r3
  404372:	9108      	str	r1, [sp, #32]
  404374:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  404378:	f8cd b01c 	str.w	fp, [sp, #28]
  40437c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404380:	930a      	str	r3, [sp, #40]	; 0x28
  404382:	9312      	str	r3, [sp, #72]	; 0x48
  404384:	910e      	str	r1, [sp, #56]	; 0x38
  404386:	ae28      	add	r6, sp, #160	; 0xa0
  404388:	e4e4      	b.n	403d54 <_svfprintf_r+0x238>
  40438a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40438c:	e534      	b.n	403df8 <_svfprintf_r+0x2dc>
  40438e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404390:	2b65      	cmp	r3, #101	; 0x65
  404392:	f340 80a7 	ble.w	4044e4 <_svfprintf_r+0x9c8>
  404396:	a815      	add	r0, sp, #84	; 0x54
  404398:	c80d      	ldmia	r0, {r0, r2, r3}
  40439a:	9914      	ldr	r1, [sp, #80]	; 0x50
  40439c:	f7fe ffa0 	bl	4032e0 <__aeabi_dcmpeq>
  4043a0:	2800      	cmp	r0, #0
  4043a2:	f000 8150 	beq.w	404646 <_svfprintf_r+0xb2a>
  4043a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4043a8:	4a20      	ldr	r2, [pc, #128]	; (40442c <_svfprintf_r+0x910>)
  4043aa:	f8c8 2000 	str.w	r2, [r8]
  4043ae:	3301      	adds	r3, #1
  4043b0:	3401      	adds	r4, #1
  4043b2:	2201      	movs	r2, #1
  4043b4:	2b07      	cmp	r3, #7
  4043b6:	9427      	str	r4, [sp, #156]	; 0x9c
  4043b8:	9326      	str	r3, [sp, #152]	; 0x98
  4043ba:	f8c8 2004 	str.w	r2, [r8, #4]
  4043be:	f300 836a 	bgt.w	404a96 <_svfprintf_r+0xf7a>
  4043c2:	f108 0808 	add.w	r8, r8, #8
  4043c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4043c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4043ca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4043cc:	4293      	cmp	r3, r2
  4043ce:	db03      	blt.n	4043d8 <_svfprintf_r+0x8bc>
  4043d0:	9b07      	ldr	r3, [sp, #28]
  4043d2:	07dd      	lsls	r5, r3, #31
  4043d4:	f57f ad82 	bpl.w	403edc <_svfprintf_r+0x3c0>
  4043d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4043da:	9919      	ldr	r1, [sp, #100]	; 0x64
  4043dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4043de:	f8c8 2000 	str.w	r2, [r8]
  4043e2:	3301      	adds	r3, #1
  4043e4:	440c      	add	r4, r1
  4043e6:	2b07      	cmp	r3, #7
  4043e8:	f8c8 1004 	str.w	r1, [r8, #4]
  4043ec:	9427      	str	r4, [sp, #156]	; 0x9c
  4043ee:	9326      	str	r3, [sp, #152]	; 0x98
  4043f0:	f300 839e 	bgt.w	404b30 <_svfprintf_r+0x1014>
  4043f4:	f108 0808 	add.w	r8, r8, #8
  4043f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4043fa:	1e5e      	subs	r6, r3, #1
  4043fc:	2e00      	cmp	r6, #0
  4043fe:	f77f ad6d 	ble.w	403edc <_svfprintf_r+0x3c0>
  404402:	2e10      	cmp	r6, #16
  404404:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404406:	4d0a      	ldr	r5, [pc, #40]	; (404430 <_svfprintf_r+0x914>)
  404408:	f340 81f5 	ble.w	4047f6 <_svfprintf_r+0xcda>
  40440c:	4622      	mov	r2, r4
  40440e:	2710      	movs	r7, #16
  404410:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404414:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404416:	e013      	b.n	404440 <_svfprintf_r+0x924>
  404418:	00409a7c 	.word	0x00409a7c
  40441c:	00409a68 	.word	0x00409a68
  404420:	7fefffff 	.word	0x7fefffff
  404424:	00409a5c 	.word	0x00409a5c
  404428:	00409a58 	.word	0x00409a58
  40442c:	00409a98 	.word	0x00409a98
  404430:	00409aac 	.word	0x00409aac
  404434:	f108 0808 	add.w	r8, r8, #8
  404438:	3e10      	subs	r6, #16
  40443a:	2e10      	cmp	r6, #16
  40443c:	f340 81da 	ble.w	4047f4 <_svfprintf_r+0xcd8>
  404440:	3301      	adds	r3, #1
  404442:	3210      	adds	r2, #16
  404444:	2b07      	cmp	r3, #7
  404446:	9227      	str	r2, [sp, #156]	; 0x9c
  404448:	9326      	str	r3, [sp, #152]	; 0x98
  40444a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40444e:	ddf1      	ble.n	404434 <_svfprintf_r+0x918>
  404450:	aa25      	add	r2, sp, #148	; 0x94
  404452:	4621      	mov	r1, r4
  404454:	4658      	mov	r0, fp
  404456:	f004 f8a1 	bl	40859c <__ssprint_r>
  40445a:	2800      	cmp	r0, #0
  40445c:	f47f ac30 	bne.w	403cc0 <_svfprintf_r+0x1a4>
  404460:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404462:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404464:	46c8      	mov	r8, r9
  404466:	e7e7      	b.n	404438 <_svfprintf_r+0x91c>
  404468:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40446a:	9a08      	ldr	r2, [sp, #32]
  40446c:	1a9f      	subs	r7, r3, r2
  40446e:	2f00      	cmp	r7, #0
  404470:	f77f ace5 	ble.w	403e3e <_svfprintf_r+0x322>
  404474:	2f10      	cmp	r7, #16
  404476:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404478:	4db6      	ldr	r5, [pc, #728]	; (404754 <_svfprintf_r+0xc38>)
  40447a:	dd27      	ble.n	4044cc <_svfprintf_r+0x9b0>
  40447c:	4642      	mov	r2, r8
  40447e:	4621      	mov	r1, r4
  404480:	46b0      	mov	r8, r6
  404482:	f04f 0b10 	mov.w	fp, #16
  404486:	462e      	mov	r6, r5
  404488:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40448a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40448c:	e004      	b.n	404498 <_svfprintf_r+0x97c>
  40448e:	3f10      	subs	r7, #16
  404490:	2f10      	cmp	r7, #16
  404492:	f102 0208 	add.w	r2, r2, #8
  404496:	dd15      	ble.n	4044c4 <_svfprintf_r+0x9a8>
  404498:	3301      	adds	r3, #1
  40449a:	3110      	adds	r1, #16
  40449c:	2b07      	cmp	r3, #7
  40449e:	9127      	str	r1, [sp, #156]	; 0x9c
  4044a0:	9326      	str	r3, [sp, #152]	; 0x98
  4044a2:	e882 0840 	stmia.w	r2, {r6, fp}
  4044a6:	ddf2      	ble.n	40448e <_svfprintf_r+0x972>
  4044a8:	aa25      	add	r2, sp, #148	; 0x94
  4044aa:	4629      	mov	r1, r5
  4044ac:	4620      	mov	r0, r4
  4044ae:	f004 f875 	bl	40859c <__ssprint_r>
  4044b2:	2800      	cmp	r0, #0
  4044b4:	f47f ac04 	bne.w	403cc0 <_svfprintf_r+0x1a4>
  4044b8:	3f10      	subs	r7, #16
  4044ba:	2f10      	cmp	r7, #16
  4044bc:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4044be:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4044c0:	464a      	mov	r2, r9
  4044c2:	dce9      	bgt.n	404498 <_svfprintf_r+0x97c>
  4044c4:	4635      	mov	r5, r6
  4044c6:	460c      	mov	r4, r1
  4044c8:	4646      	mov	r6, r8
  4044ca:	4690      	mov	r8, r2
  4044cc:	3301      	adds	r3, #1
  4044ce:	443c      	add	r4, r7
  4044d0:	2b07      	cmp	r3, #7
  4044d2:	9427      	str	r4, [sp, #156]	; 0x9c
  4044d4:	9326      	str	r3, [sp, #152]	; 0x98
  4044d6:	e888 00a0 	stmia.w	r8, {r5, r7}
  4044da:	f300 8232 	bgt.w	404942 <_svfprintf_r+0xe26>
  4044de:	f108 0808 	add.w	r8, r8, #8
  4044e2:	e4ac      	b.n	403e3e <_svfprintf_r+0x322>
  4044e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4044e6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4044e8:	2b01      	cmp	r3, #1
  4044ea:	f340 81fe 	ble.w	4048ea <_svfprintf_r+0xdce>
  4044ee:	3701      	adds	r7, #1
  4044f0:	3401      	adds	r4, #1
  4044f2:	2301      	movs	r3, #1
  4044f4:	2f07      	cmp	r7, #7
  4044f6:	9427      	str	r4, [sp, #156]	; 0x9c
  4044f8:	9726      	str	r7, [sp, #152]	; 0x98
  4044fa:	f8c8 6000 	str.w	r6, [r8]
  4044fe:	f8c8 3004 	str.w	r3, [r8, #4]
  404502:	f300 8203 	bgt.w	40490c <_svfprintf_r+0xdf0>
  404506:	f108 0808 	add.w	r8, r8, #8
  40450a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40450c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40450e:	f8c8 3000 	str.w	r3, [r8]
  404512:	3701      	adds	r7, #1
  404514:	4414      	add	r4, r2
  404516:	2f07      	cmp	r7, #7
  404518:	9427      	str	r4, [sp, #156]	; 0x9c
  40451a:	9726      	str	r7, [sp, #152]	; 0x98
  40451c:	f8c8 2004 	str.w	r2, [r8, #4]
  404520:	f300 8200 	bgt.w	404924 <_svfprintf_r+0xe08>
  404524:	f108 0808 	add.w	r8, r8, #8
  404528:	a815      	add	r0, sp, #84	; 0x54
  40452a:	c80d      	ldmia	r0, {r0, r2, r3}
  40452c:	9914      	ldr	r1, [sp, #80]	; 0x50
  40452e:	f7fe fed7 	bl	4032e0 <__aeabi_dcmpeq>
  404532:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404534:	2800      	cmp	r0, #0
  404536:	f040 8101 	bne.w	40473c <_svfprintf_r+0xc20>
  40453a:	3b01      	subs	r3, #1
  40453c:	3701      	adds	r7, #1
  40453e:	3601      	adds	r6, #1
  404540:	441c      	add	r4, r3
  404542:	2f07      	cmp	r7, #7
  404544:	9726      	str	r7, [sp, #152]	; 0x98
  404546:	9427      	str	r4, [sp, #156]	; 0x9c
  404548:	f8c8 6000 	str.w	r6, [r8]
  40454c:	f8c8 3004 	str.w	r3, [r8, #4]
  404550:	f300 8127 	bgt.w	4047a2 <_svfprintf_r+0xc86>
  404554:	f108 0808 	add.w	r8, r8, #8
  404558:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40455a:	f8c8 2004 	str.w	r2, [r8, #4]
  40455e:	3701      	adds	r7, #1
  404560:	4414      	add	r4, r2
  404562:	ab21      	add	r3, sp, #132	; 0x84
  404564:	2f07      	cmp	r7, #7
  404566:	9427      	str	r4, [sp, #156]	; 0x9c
  404568:	9726      	str	r7, [sp, #152]	; 0x98
  40456a:	f8c8 3000 	str.w	r3, [r8]
  40456e:	f77f acb3 	ble.w	403ed8 <_svfprintf_r+0x3bc>
  404572:	aa25      	add	r2, sp, #148	; 0x94
  404574:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404576:	980c      	ldr	r0, [sp, #48]	; 0x30
  404578:	f004 f810 	bl	40859c <__ssprint_r>
  40457c:	2800      	cmp	r0, #0
  40457e:	f47f ab9f 	bne.w	403cc0 <_svfprintf_r+0x1a4>
  404582:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404584:	46c8      	mov	r8, r9
  404586:	e4a9      	b.n	403edc <_svfprintf_r+0x3c0>
  404588:	aa25      	add	r2, sp, #148	; 0x94
  40458a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40458c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40458e:	f004 f805 	bl	40859c <__ssprint_r>
  404592:	2800      	cmp	r0, #0
  404594:	f43f aceb 	beq.w	403f6e <_svfprintf_r+0x452>
  404598:	f7ff bb92 	b.w	403cc0 <_svfprintf_r+0x1a4>
  40459c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4045a0:	2b01      	cmp	r3, #1
  4045a2:	f000 8134 	beq.w	40480e <_svfprintf_r+0xcf2>
  4045a6:	2b02      	cmp	r3, #2
  4045a8:	d125      	bne.n	4045f6 <_svfprintf_r+0xada>
  4045aa:	f8cd b01c 	str.w	fp, [sp, #28]
  4045ae:	2400      	movs	r4, #0
  4045b0:	2500      	movs	r5, #0
  4045b2:	e61e      	b.n	4041f2 <_svfprintf_r+0x6d6>
  4045b4:	aa25      	add	r2, sp, #148	; 0x94
  4045b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4045b8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4045ba:	f003 ffef 	bl	40859c <__ssprint_r>
  4045be:	2800      	cmp	r0, #0
  4045c0:	f47f ab7e 	bne.w	403cc0 <_svfprintf_r+0x1a4>
  4045c4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4045c6:	46c8      	mov	r8, r9
  4045c8:	e475      	b.n	403eb6 <_svfprintf_r+0x39a>
  4045ca:	aa25      	add	r2, sp, #148	; 0x94
  4045cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4045ce:	980c      	ldr	r0, [sp, #48]	; 0x30
  4045d0:	f003 ffe4 	bl	40859c <__ssprint_r>
  4045d4:	2800      	cmp	r0, #0
  4045d6:	f47f ab73 	bne.w	403cc0 <_svfprintf_r+0x1a4>
  4045da:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4045dc:	46c8      	mov	r8, r9
  4045de:	e41b      	b.n	403e18 <_svfprintf_r+0x2fc>
  4045e0:	aa25      	add	r2, sp, #148	; 0x94
  4045e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4045e4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4045e6:	f003 ffd9 	bl	40859c <__ssprint_r>
  4045ea:	2800      	cmp	r0, #0
  4045ec:	f47f ab68 	bne.w	403cc0 <_svfprintf_r+0x1a4>
  4045f0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4045f2:	46c8      	mov	r8, r9
  4045f4:	e420      	b.n	403e38 <_svfprintf_r+0x31c>
  4045f6:	f8cd b01c 	str.w	fp, [sp, #28]
  4045fa:	2400      	movs	r4, #0
  4045fc:	2500      	movs	r5, #0
  4045fe:	4649      	mov	r1, r9
  404600:	e000      	b.n	404604 <_svfprintf_r+0xae8>
  404602:	4631      	mov	r1, r6
  404604:	08e2      	lsrs	r2, r4, #3
  404606:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40460a:	08e8      	lsrs	r0, r5, #3
  40460c:	f004 0307 	and.w	r3, r4, #7
  404610:	4605      	mov	r5, r0
  404612:	4614      	mov	r4, r2
  404614:	3330      	adds	r3, #48	; 0x30
  404616:	ea54 0205 	orrs.w	r2, r4, r5
  40461a:	f801 3c01 	strb.w	r3, [r1, #-1]
  40461e:	f101 36ff 	add.w	r6, r1, #4294967295
  404622:	d1ee      	bne.n	404602 <_svfprintf_r+0xae6>
  404624:	9a07      	ldr	r2, [sp, #28]
  404626:	07d2      	lsls	r2, r2, #31
  404628:	f57f adf3 	bpl.w	404212 <_svfprintf_r+0x6f6>
  40462c:	2b30      	cmp	r3, #48	; 0x30
  40462e:	f43f adf0 	beq.w	404212 <_svfprintf_r+0x6f6>
  404632:	3902      	subs	r1, #2
  404634:	2330      	movs	r3, #48	; 0x30
  404636:	f806 3c01 	strb.w	r3, [r6, #-1]
  40463a:	eba9 0301 	sub.w	r3, r9, r1
  40463e:	930e      	str	r3, [sp, #56]	; 0x38
  404640:	460e      	mov	r6, r1
  404642:	f7ff bb7b 	b.w	403d3c <_svfprintf_r+0x220>
  404646:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404648:	2900      	cmp	r1, #0
  40464a:	f340 822e 	ble.w	404aaa <_svfprintf_r+0xf8e>
  40464e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404650:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404652:	4293      	cmp	r3, r2
  404654:	bfa8      	it	ge
  404656:	4613      	movge	r3, r2
  404658:	2b00      	cmp	r3, #0
  40465a:	461f      	mov	r7, r3
  40465c:	dd0d      	ble.n	40467a <_svfprintf_r+0xb5e>
  40465e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404660:	f8c8 6000 	str.w	r6, [r8]
  404664:	3301      	adds	r3, #1
  404666:	443c      	add	r4, r7
  404668:	2b07      	cmp	r3, #7
  40466a:	9427      	str	r4, [sp, #156]	; 0x9c
  40466c:	f8c8 7004 	str.w	r7, [r8, #4]
  404670:	9326      	str	r3, [sp, #152]	; 0x98
  404672:	f300 831f 	bgt.w	404cb4 <_svfprintf_r+0x1198>
  404676:	f108 0808 	add.w	r8, r8, #8
  40467a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40467c:	2f00      	cmp	r7, #0
  40467e:	bfa8      	it	ge
  404680:	1bdb      	subge	r3, r3, r7
  404682:	2b00      	cmp	r3, #0
  404684:	461f      	mov	r7, r3
  404686:	f340 80d6 	ble.w	404836 <_svfprintf_r+0xd1a>
  40468a:	2f10      	cmp	r7, #16
  40468c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40468e:	4d31      	ldr	r5, [pc, #196]	; (404754 <_svfprintf_r+0xc38>)
  404690:	f340 81ed 	ble.w	404a6e <_svfprintf_r+0xf52>
  404694:	4642      	mov	r2, r8
  404696:	4621      	mov	r1, r4
  404698:	46b0      	mov	r8, r6
  40469a:	f04f 0b10 	mov.w	fp, #16
  40469e:	462e      	mov	r6, r5
  4046a0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4046a2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4046a4:	e004      	b.n	4046b0 <_svfprintf_r+0xb94>
  4046a6:	3208      	adds	r2, #8
  4046a8:	3f10      	subs	r7, #16
  4046aa:	2f10      	cmp	r7, #16
  4046ac:	f340 81db 	ble.w	404a66 <_svfprintf_r+0xf4a>
  4046b0:	3301      	adds	r3, #1
  4046b2:	3110      	adds	r1, #16
  4046b4:	2b07      	cmp	r3, #7
  4046b6:	9127      	str	r1, [sp, #156]	; 0x9c
  4046b8:	9326      	str	r3, [sp, #152]	; 0x98
  4046ba:	e882 0840 	stmia.w	r2, {r6, fp}
  4046be:	ddf2      	ble.n	4046a6 <_svfprintf_r+0xb8a>
  4046c0:	aa25      	add	r2, sp, #148	; 0x94
  4046c2:	4629      	mov	r1, r5
  4046c4:	4620      	mov	r0, r4
  4046c6:	f003 ff69 	bl	40859c <__ssprint_r>
  4046ca:	2800      	cmp	r0, #0
  4046cc:	f47f aaf8 	bne.w	403cc0 <_svfprintf_r+0x1a4>
  4046d0:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4046d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4046d4:	464a      	mov	r2, r9
  4046d6:	e7e7      	b.n	4046a8 <_svfprintf_r+0xb8c>
  4046d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4046da:	930e      	str	r3, [sp, #56]	; 0x38
  4046dc:	464e      	mov	r6, r9
  4046de:	f7ff bb2d 	b.w	403d3c <_svfprintf_r+0x220>
  4046e2:	2d00      	cmp	r5, #0
  4046e4:	bf08      	it	eq
  4046e6:	2c0a      	cmpeq	r4, #10
  4046e8:	f0c0 808f 	bcc.w	40480a <_svfprintf_r+0xcee>
  4046ec:	464e      	mov	r6, r9
  4046ee:	4620      	mov	r0, r4
  4046f0:	4629      	mov	r1, r5
  4046f2:	220a      	movs	r2, #10
  4046f4:	2300      	movs	r3, #0
  4046f6:	f004 f9f5 	bl	408ae4 <__aeabi_uldivmod>
  4046fa:	3230      	adds	r2, #48	; 0x30
  4046fc:	f806 2d01 	strb.w	r2, [r6, #-1]!
  404700:	4620      	mov	r0, r4
  404702:	4629      	mov	r1, r5
  404704:	2300      	movs	r3, #0
  404706:	220a      	movs	r2, #10
  404708:	f004 f9ec 	bl	408ae4 <__aeabi_uldivmod>
  40470c:	4604      	mov	r4, r0
  40470e:	460d      	mov	r5, r1
  404710:	ea54 0305 	orrs.w	r3, r4, r5
  404714:	d1eb      	bne.n	4046ee <_svfprintf_r+0xbd2>
  404716:	eba9 0306 	sub.w	r3, r9, r6
  40471a:	930e      	str	r3, [sp, #56]	; 0x38
  40471c:	f7ff bb0e 	b.w	403d3c <_svfprintf_r+0x220>
  404720:	aa25      	add	r2, sp, #148	; 0x94
  404722:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404724:	980c      	ldr	r0, [sp, #48]	; 0x30
  404726:	f003 ff39 	bl	40859c <__ssprint_r>
  40472a:	2800      	cmp	r0, #0
  40472c:	f47f aac8 	bne.w	403cc0 <_svfprintf_r+0x1a4>
  404730:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404734:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404736:	46c8      	mov	r8, r9
  404738:	f7ff bb5e 	b.w	403df8 <_svfprintf_r+0x2dc>
  40473c:	1e5e      	subs	r6, r3, #1
  40473e:	2e00      	cmp	r6, #0
  404740:	f77f af0a 	ble.w	404558 <_svfprintf_r+0xa3c>
  404744:	2e10      	cmp	r6, #16
  404746:	4d03      	ldr	r5, [pc, #12]	; (404754 <_svfprintf_r+0xc38>)
  404748:	dd22      	ble.n	404790 <_svfprintf_r+0xc74>
  40474a:	4622      	mov	r2, r4
  40474c:	f04f 0b10 	mov.w	fp, #16
  404750:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404752:	e006      	b.n	404762 <_svfprintf_r+0xc46>
  404754:	00409aac 	.word	0x00409aac
  404758:	3e10      	subs	r6, #16
  40475a:	2e10      	cmp	r6, #16
  40475c:	f108 0808 	add.w	r8, r8, #8
  404760:	dd15      	ble.n	40478e <_svfprintf_r+0xc72>
  404762:	3701      	adds	r7, #1
  404764:	3210      	adds	r2, #16
  404766:	2f07      	cmp	r7, #7
  404768:	9227      	str	r2, [sp, #156]	; 0x9c
  40476a:	9726      	str	r7, [sp, #152]	; 0x98
  40476c:	e888 0820 	stmia.w	r8, {r5, fp}
  404770:	ddf2      	ble.n	404758 <_svfprintf_r+0xc3c>
  404772:	aa25      	add	r2, sp, #148	; 0x94
  404774:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404776:	4620      	mov	r0, r4
  404778:	f003 ff10 	bl	40859c <__ssprint_r>
  40477c:	2800      	cmp	r0, #0
  40477e:	f47f aa9f 	bne.w	403cc0 <_svfprintf_r+0x1a4>
  404782:	3e10      	subs	r6, #16
  404784:	2e10      	cmp	r6, #16
  404786:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404788:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40478a:	46c8      	mov	r8, r9
  40478c:	dce9      	bgt.n	404762 <_svfprintf_r+0xc46>
  40478e:	4614      	mov	r4, r2
  404790:	3701      	adds	r7, #1
  404792:	4434      	add	r4, r6
  404794:	2f07      	cmp	r7, #7
  404796:	9427      	str	r4, [sp, #156]	; 0x9c
  404798:	9726      	str	r7, [sp, #152]	; 0x98
  40479a:	e888 0060 	stmia.w	r8, {r5, r6}
  40479e:	f77f aed9 	ble.w	404554 <_svfprintf_r+0xa38>
  4047a2:	aa25      	add	r2, sp, #148	; 0x94
  4047a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4047a6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4047a8:	f003 fef8 	bl	40859c <__ssprint_r>
  4047ac:	2800      	cmp	r0, #0
  4047ae:	f47f aa87 	bne.w	403cc0 <_svfprintf_r+0x1a4>
  4047b2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4047b4:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4047b6:	46c8      	mov	r8, r9
  4047b8:	e6ce      	b.n	404558 <_svfprintf_r+0xa3c>
  4047ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4047bc:	6814      	ldr	r4, [r2, #0]
  4047be:	4613      	mov	r3, r2
  4047c0:	3304      	adds	r3, #4
  4047c2:	17e5      	asrs	r5, r4, #31
  4047c4:	930f      	str	r3, [sp, #60]	; 0x3c
  4047c6:	4622      	mov	r2, r4
  4047c8:	462b      	mov	r3, r5
  4047ca:	e4fa      	b.n	4041c2 <_svfprintf_r+0x6a6>
  4047cc:	3204      	adds	r2, #4
  4047ce:	681c      	ldr	r4, [r3, #0]
  4047d0:	920f      	str	r2, [sp, #60]	; 0x3c
  4047d2:	2301      	movs	r3, #1
  4047d4:	2500      	movs	r5, #0
  4047d6:	f7ff ba94 	b.w	403d02 <_svfprintf_r+0x1e6>
  4047da:	681c      	ldr	r4, [r3, #0]
  4047dc:	3304      	adds	r3, #4
  4047de:	930f      	str	r3, [sp, #60]	; 0x3c
  4047e0:	2500      	movs	r5, #0
  4047e2:	e421      	b.n	404028 <_svfprintf_r+0x50c>
  4047e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4047e6:	460a      	mov	r2, r1
  4047e8:	3204      	adds	r2, #4
  4047ea:	680c      	ldr	r4, [r1, #0]
  4047ec:	920f      	str	r2, [sp, #60]	; 0x3c
  4047ee:	2500      	movs	r5, #0
  4047f0:	f7ff ba87 	b.w	403d02 <_svfprintf_r+0x1e6>
  4047f4:	4614      	mov	r4, r2
  4047f6:	3301      	adds	r3, #1
  4047f8:	4434      	add	r4, r6
  4047fa:	2b07      	cmp	r3, #7
  4047fc:	9427      	str	r4, [sp, #156]	; 0x9c
  4047fe:	9326      	str	r3, [sp, #152]	; 0x98
  404800:	e888 0060 	stmia.w	r8, {r5, r6}
  404804:	f77f ab68 	ble.w	403ed8 <_svfprintf_r+0x3bc>
  404808:	e6b3      	b.n	404572 <_svfprintf_r+0xa56>
  40480a:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40480e:	f8cd b01c 	str.w	fp, [sp, #28]
  404812:	ae42      	add	r6, sp, #264	; 0x108
  404814:	3430      	adds	r4, #48	; 0x30
  404816:	2301      	movs	r3, #1
  404818:	f806 4d41 	strb.w	r4, [r6, #-65]!
  40481c:	930e      	str	r3, [sp, #56]	; 0x38
  40481e:	f7ff ba8d 	b.w	403d3c <_svfprintf_r+0x220>
  404822:	aa25      	add	r2, sp, #148	; 0x94
  404824:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404826:	980c      	ldr	r0, [sp, #48]	; 0x30
  404828:	f003 feb8 	bl	40859c <__ssprint_r>
  40482c:	2800      	cmp	r0, #0
  40482e:	f47f aa47 	bne.w	403cc0 <_svfprintf_r+0x1a4>
  404832:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404834:	46c8      	mov	r8, r9
  404836:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404838:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40483a:	429a      	cmp	r2, r3
  40483c:	db44      	blt.n	4048c8 <_svfprintf_r+0xdac>
  40483e:	9b07      	ldr	r3, [sp, #28]
  404840:	07d9      	lsls	r1, r3, #31
  404842:	d441      	bmi.n	4048c8 <_svfprintf_r+0xdac>
  404844:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404846:	9812      	ldr	r0, [sp, #72]	; 0x48
  404848:	1a9a      	subs	r2, r3, r2
  40484a:	1a1d      	subs	r5, r3, r0
  40484c:	4295      	cmp	r5, r2
  40484e:	bfa8      	it	ge
  404850:	4615      	movge	r5, r2
  404852:	2d00      	cmp	r5, #0
  404854:	dd0e      	ble.n	404874 <_svfprintf_r+0xd58>
  404856:	9926      	ldr	r1, [sp, #152]	; 0x98
  404858:	f8c8 5004 	str.w	r5, [r8, #4]
  40485c:	3101      	adds	r1, #1
  40485e:	4406      	add	r6, r0
  404860:	442c      	add	r4, r5
  404862:	2907      	cmp	r1, #7
  404864:	f8c8 6000 	str.w	r6, [r8]
  404868:	9427      	str	r4, [sp, #156]	; 0x9c
  40486a:	9126      	str	r1, [sp, #152]	; 0x98
  40486c:	f300 823b 	bgt.w	404ce6 <_svfprintf_r+0x11ca>
  404870:	f108 0808 	add.w	r8, r8, #8
  404874:	2d00      	cmp	r5, #0
  404876:	bfac      	ite	ge
  404878:	1b56      	subge	r6, r2, r5
  40487a:	4616      	movlt	r6, r2
  40487c:	2e00      	cmp	r6, #0
  40487e:	f77f ab2d 	ble.w	403edc <_svfprintf_r+0x3c0>
  404882:	2e10      	cmp	r6, #16
  404884:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404886:	4db0      	ldr	r5, [pc, #704]	; (404b48 <_svfprintf_r+0x102c>)
  404888:	ddb5      	ble.n	4047f6 <_svfprintf_r+0xcda>
  40488a:	4622      	mov	r2, r4
  40488c:	2710      	movs	r7, #16
  40488e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404892:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404894:	e004      	b.n	4048a0 <_svfprintf_r+0xd84>
  404896:	f108 0808 	add.w	r8, r8, #8
  40489a:	3e10      	subs	r6, #16
  40489c:	2e10      	cmp	r6, #16
  40489e:	dda9      	ble.n	4047f4 <_svfprintf_r+0xcd8>
  4048a0:	3301      	adds	r3, #1
  4048a2:	3210      	adds	r2, #16
  4048a4:	2b07      	cmp	r3, #7
  4048a6:	9227      	str	r2, [sp, #156]	; 0x9c
  4048a8:	9326      	str	r3, [sp, #152]	; 0x98
  4048aa:	e888 00a0 	stmia.w	r8, {r5, r7}
  4048ae:	ddf2      	ble.n	404896 <_svfprintf_r+0xd7a>
  4048b0:	aa25      	add	r2, sp, #148	; 0x94
  4048b2:	4621      	mov	r1, r4
  4048b4:	4658      	mov	r0, fp
  4048b6:	f003 fe71 	bl	40859c <__ssprint_r>
  4048ba:	2800      	cmp	r0, #0
  4048bc:	f47f aa00 	bne.w	403cc0 <_svfprintf_r+0x1a4>
  4048c0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4048c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4048c4:	46c8      	mov	r8, r9
  4048c6:	e7e8      	b.n	40489a <_svfprintf_r+0xd7e>
  4048c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4048ca:	9819      	ldr	r0, [sp, #100]	; 0x64
  4048cc:	991a      	ldr	r1, [sp, #104]	; 0x68
  4048ce:	f8c8 1000 	str.w	r1, [r8]
  4048d2:	3301      	adds	r3, #1
  4048d4:	4404      	add	r4, r0
  4048d6:	2b07      	cmp	r3, #7
  4048d8:	9427      	str	r4, [sp, #156]	; 0x9c
  4048da:	f8c8 0004 	str.w	r0, [r8, #4]
  4048de:	9326      	str	r3, [sp, #152]	; 0x98
  4048e0:	f300 81f5 	bgt.w	404cce <_svfprintf_r+0x11b2>
  4048e4:	f108 0808 	add.w	r8, r8, #8
  4048e8:	e7ac      	b.n	404844 <_svfprintf_r+0xd28>
  4048ea:	9b07      	ldr	r3, [sp, #28]
  4048ec:	07da      	lsls	r2, r3, #31
  4048ee:	f53f adfe 	bmi.w	4044ee <_svfprintf_r+0x9d2>
  4048f2:	3701      	adds	r7, #1
  4048f4:	3401      	adds	r4, #1
  4048f6:	2301      	movs	r3, #1
  4048f8:	2f07      	cmp	r7, #7
  4048fa:	9427      	str	r4, [sp, #156]	; 0x9c
  4048fc:	9726      	str	r7, [sp, #152]	; 0x98
  4048fe:	f8c8 6000 	str.w	r6, [r8]
  404902:	f8c8 3004 	str.w	r3, [r8, #4]
  404906:	f77f ae25 	ble.w	404554 <_svfprintf_r+0xa38>
  40490a:	e74a      	b.n	4047a2 <_svfprintf_r+0xc86>
  40490c:	aa25      	add	r2, sp, #148	; 0x94
  40490e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404910:	980c      	ldr	r0, [sp, #48]	; 0x30
  404912:	f003 fe43 	bl	40859c <__ssprint_r>
  404916:	2800      	cmp	r0, #0
  404918:	f47f a9d2 	bne.w	403cc0 <_svfprintf_r+0x1a4>
  40491c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40491e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404920:	46c8      	mov	r8, r9
  404922:	e5f2      	b.n	40450a <_svfprintf_r+0x9ee>
  404924:	aa25      	add	r2, sp, #148	; 0x94
  404926:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404928:	980c      	ldr	r0, [sp, #48]	; 0x30
  40492a:	f003 fe37 	bl	40859c <__ssprint_r>
  40492e:	2800      	cmp	r0, #0
  404930:	f47f a9c6 	bne.w	403cc0 <_svfprintf_r+0x1a4>
  404934:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404936:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404938:	46c8      	mov	r8, r9
  40493a:	e5f5      	b.n	404528 <_svfprintf_r+0xa0c>
  40493c:	464e      	mov	r6, r9
  40493e:	f7ff b9fd 	b.w	403d3c <_svfprintf_r+0x220>
  404942:	aa25      	add	r2, sp, #148	; 0x94
  404944:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404946:	980c      	ldr	r0, [sp, #48]	; 0x30
  404948:	f003 fe28 	bl	40859c <__ssprint_r>
  40494c:	2800      	cmp	r0, #0
  40494e:	f47f a9b7 	bne.w	403cc0 <_svfprintf_r+0x1a4>
  404952:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404954:	46c8      	mov	r8, r9
  404956:	f7ff ba72 	b.w	403e3e <_svfprintf_r+0x322>
  40495a:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40495c:	4622      	mov	r2, r4
  40495e:	4620      	mov	r0, r4
  404960:	9c14      	ldr	r4, [sp, #80]	; 0x50
  404962:	4623      	mov	r3, r4
  404964:	4621      	mov	r1, r4
  404966:	f7fe fced 	bl	403344 <__aeabi_dcmpun>
  40496a:	2800      	cmp	r0, #0
  40496c:	f040 8286 	bne.w	404e7c <_svfprintf_r+0x1360>
  404970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404972:	3301      	adds	r3, #1
  404974:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404976:	f023 0320 	bic.w	r3, r3, #32
  40497a:	930e      	str	r3, [sp, #56]	; 0x38
  40497c:	f000 81e2 	beq.w	404d44 <_svfprintf_r+0x1228>
  404980:	2b47      	cmp	r3, #71	; 0x47
  404982:	f000 811e 	beq.w	404bc2 <_svfprintf_r+0x10a6>
  404986:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40498a:	9307      	str	r3, [sp, #28]
  40498c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40498e:	1e1f      	subs	r7, r3, #0
  404990:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404992:	9308      	str	r3, [sp, #32]
  404994:	bfbb      	ittet	lt
  404996:	463b      	movlt	r3, r7
  404998:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40499c:	2300      	movge	r3, #0
  40499e:	232d      	movlt	r3, #45	; 0x2d
  4049a0:	9310      	str	r3, [sp, #64]	; 0x40
  4049a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4049a4:	2b66      	cmp	r3, #102	; 0x66
  4049a6:	f000 81bb 	beq.w	404d20 <_svfprintf_r+0x1204>
  4049aa:	2b46      	cmp	r3, #70	; 0x46
  4049ac:	f000 80df 	beq.w	404b6e <_svfprintf_r+0x1052>
  4049b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4049b2:	9a08      	ldr	r2, [sp, #32]
  4049b4:	2b45      	cmp	r3, #69	; 0x45
  4049b6:	bf0c      	ite	eq
  4049b8:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  4049ba:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  4049bc:	a823      	add	r0, sp, #140	; 0x8c
  4049be:	a920      	add	r1, sp, #128	; 0x80
  4049c0:	bf08      	it	eq
  4049c2:	1c5d      	addeq	r5, r3, #1
  4049c4:	9004      	str	r0, [sp, #16]
  4049c6:	9103      	str	r1, [sp, #12]
  4049c8:	a81f      	add	r0, sp, #124	; 0x7c
  4049ca:	2102      	movs	r1, #2
  4049cc:	463b      	mov	r3, r7
  4049ce:	9002      	str	r0, [sp, #8]
  4049d0:	9501      	str	r5, [sp, #4]
  4049d2:	9100      	str	r1, [sp, #0]
  4049d4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4049d6:	f001 faa3 	bl	405f20 <_dtoa_r>
  4049da:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4049dc:	2b67      	cmp	r3, #103	; 0x67
  4049de:	4606      	mov	r6, r0
  4049e0:	f040 81e0 	bne.w	404da4 <_svfprintf_r+0x1288>
  4049e4:	f01b 0f01 	tst.w	fp, #1
  4049e8:	f000 8246 	beq.w	404e78 <_svfprintf_r+0x135c>
  4049ec:	1974      	adds	r4, r6, r5
  4049ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4049f0:	9808      	ldr	r0, [sp, #32]
  4049f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4049f4:	4639      	mov	r1, r7
  4049f6:	f7fe fc73 	bl	4032e0 <__aeabi_dcmpeq>
  4049fa:	2800      	cmp	r0, #0
  4049fc:	f040 8165 	bne.w	404cca <_svfprintf_r+0x11ae>
  404a00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404a02:	42a3      	cmp	r3, r4
  404a04:	d206      	bcs.n	404a14 <_svfprintf_r+0xef8>
  404a06:	2130      	movs	r1, #48	; 0x30
  404a08:	1c5a      	adds	r2, r3, #1
  404a0a:	9223      	str	r2, [sp, #140]	; 0x8c
  404a0c:	7019      	strb	r1, [r3, #0]
  404a0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404a10:	429c      	cmp	r4, r3
  404a12:	d8f9      	bhi.n	404a08 <_svfprintf_r+0xeec>
  404a14:	1b9b      	subs	r3, r3, r6
  404a16:	9313      	str	r3, [sp, #76]	; 0x4c
  404a18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404a1a:	2b47      	cmp	r3, #71	; 0x47
  404a1c:	f000 80e9 	beq.w	404bf2 <_svfprintf_r+0x10d6>
  404a20:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404a22:	2b65      	cmp	r3, #101	; 0x65
  404a24:	f340 81cd 	ble.w	404dc2 <_svfprintf_r+0x12a6>
  404a28:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404a2a:	2b66      	cmp	r3, #102	; 0x66
  404a2c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404a2e:	9312      	str	r3, [sp, #72]	; 0x48
  404a30:	f000 819e 	beq.w	404d70 <_svfprintf_r+0x1254>
  404a34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404a36:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404a38:	4619      	mov	r1, r3
  404a3a:	4291      	cmp	r1, r2
  404a3c:	f300 818a 	bgt.w	404d54 <_svfprintf_r+0x1238>
  404a40:	f01b 0f01 	tst.w	fp, #1
  404a44:	f040 8213 	bne.w	404e6e <_svfprintf_r+0x1352>
  404a48:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404a4c:	9308      	str	r3, [sp, #32]
  404a4e:	2367      	movs	r3, #103	; 0x67
  404a50:	920e      	str	r2, [sp, #56]	; 0x38
  404a52:	9311      	str	r3, [sp, #68]	; 0x44
  404a54:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404a56:	2b00      	cmp	r3, #0
  404a58:	f040 80c4 	bne.w	404be4 <_svfprintf_r+0x10c8>
  404a5c:	930a      	str	r3, [sp, #40]	; 0x28
  404a5e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404a62:	f7ff b973 	b.w	403d4c <_svfprintf_r+0x230>
  404a66:	4635      	mov	r5, r6
  404a68:	460c      	mov	r4, r1
  404a6a:	4646      	mov	r6, r8
  404a6c:	4690      	mov	r8, r2
  404a6e:	3301      	adds	r3, #1
  404a70:	443c      	add	r4, r7
  404a72:	2b07      	cmp	r3, #7
  404a74:	9427      	str	r4, [sp, #156]	; 0x9c
  404a76:	9326      	str	r3, [sp, #152]	; 0x98
  404a78:	e888 00a0 	stmia.w	r8, {r5, r7}
  404a7c:	f73f aed1 	bgt.w	404822 <_svfprintf_r+0xd06>
  404a80:	f108 0808 	add.w	r8, r8, #8
  404a84:	e6d7      	b.n	404836 <_svfprintf_r+0xd1a>
  404a86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404a88:	6813      	ldr	r3, [r2, #0]
  404a8a:	3204      	adds	r2, #4
  404a8c:	920f      	str	r2, [sp, #60]	; 0x3c
  404a8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404a90:	601a      	str	r2, [r3, #0]
  404a92:	f7ff b86a 	b.w	403b6a <_svfprintf_r+0x4e>
  404a96:	aa25      	add	r2, sp, #148	; 0x94
  404a98:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404a9a:	980c      	ldr	r0, [sp, #48]	; 0x30
  404a9c:	f003 fd7e 	bl	40859c <__ssprint_r>
  404aa0:	2800      	cmp	r0, #0
  404aa2:	f47f a90d 	bne.w	403cc0 <_svfprintf_r+0x1a4>
  404aa6:	46c8      	mov	r8, r9
  404aa8:	e48d      	b.n	4043c6 <_svfprintf_r+0x8aa>
  404aaa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404aac:	4a27      	ldr	r2, [pc, #156]	; (404b4c <_svfprintf_r+0x1030>)
  404aae:	f8c8 2000 	str.w	r2, [r8]
  404ab2:	3301      	adds	r3, #1
  404ab4:	3401      	adds	r4, #1
  404ab6:	2201      	movs	r2, #1
  404ab8:	2b07      	cmp	r3, #7
  404aba:	9427      	str	r4, [sp, #156]	; 0x9c
  404abc:	9326      	str	r3, [sp, #152]	; 0x98
  404abe:	f8c8 2004 	str.w	r2, [r8, #4]
  404ac2:	dc72      	bgt.n	404baa <_svfprintf_r+0x108e>
  404ac4:	f108 0808 	add.w	r8, r8, #8
  404ac8:	b929      	cbnz	r1, 404ad6 <_svfprintf_r+0xfba>
  404aca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404acc:	b91b      	cbnz	r3, 404ad6 <_svfprintf_r+0xfba>
  404ace:	9b07      	ldr	r3, [sp, #28]
  404ad0:	07d8      	lsls	r0, r3, #31
  404ad2:	f57f aa03 	bpl.w	403edc <_svfprintf_r+0x3c0>
  404ad6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404ad8:	9819      	ldr	r0, [sp, #100]	; 0x64
  404ada:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  404adc:	f8c8 2000 	str.w	r2, [r8]
  404ae0:	3301      	adds	r3, #1
  404ae2:	4602      	mov	r2, r0
  404ae4:	4422      	add	r2, r4
  404ae6:	2b07      	cmp	r3, #7
  404ae8:	9227      	str	r2, [sp, #156]	; 0x9c
  404aea:	f8c8 0004 	str.w	r0, [r8, #4]
  404aee:	9326      	str	r3, [sp, #152]	; 0x98
  404af0:	f300 818d 	bgt.w	404e0e <_svfprintf_r+0x12f2>
  404af4:	f108 0808 	add.w	r8, r8, #8
  404af8:	2900      	cmp	r1, #0
  404afa:	f2c0 8165 	blt.w	404dc8 <_svfprintf_r+0x12ac>
  404afe:	9913      	ldr	r1, [sp, #76]	; 0x4c
  404b00:	f8c8 6000 	str.w	r6, [r8]
  404b04:	3301      	adds	r3, #1
  404b06:	188c      	adds	r4, r1, r2
  404b08:	2b07      	cmp	r3, #7
  404b0a:	9427      	str	r4, [sp, #156]	; 0x9c
  404b0c:	9326      	str	r3, [sp, #152]	; 0x98
  404b0e:	f8c8 1004 	str.w	r1, [r8, #4]
  404b12:	f77f a9e1 	ble.w	403ed8 <_svfprintf_r+0x3bc>
  404b16:	e52c      	b.n	404572 <_svfprintf_r+0xa56>
  404b18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404b1a:	9909      	ldr	r1, [sp, #36]	; 0x24
  404b1c:	6813      	ldr	r3, [r2, #0]
  404b1e:	17cd      	asrs	r5, r1, #31
  404b20:	4608      	mov	r0, r1
  404b22:	3204      	adds	r2, #4
  404b24:	4629      	mov	r1, r5
  404b26:	920f      	str	r2, [sp, #60]	; 0x3c
  404b28:	e9c3 0100 	strd	r0, r1, [r3]
  404b2c:	f7ff b81d 	b.w	403b6a <_svfprintf_r+0x4e>
  404b30:	aa25      	add	r2, sp, #148	; 0x94
  404b32:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404b34:	980c      	ldr	r0, [sp, #48]	; 0x30
  404b36:	f003 fd31 	bl	40859c <__ssprint_r>
  404b3a:	2800      	cmp	r0, #0
  404b3c:	f47f a8c0 	bne.w	403cc0 <_svfprintf_r+0x1a4>
  404b40:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404b42:	46c8      	mov	r8, r9
  404b44:	e458      	b.n	4043f8 <_svfprintf_r+0x8dc>
  404b46:	bf00      	nop
  404b48:	00409aac 	.word	0x00409aac
  404b4c:	00409a98 	.word	0x00409a98
  404b50:	2140      	movs	r1, #64	; 0x40
  404b52:	980c      	ldr	r0, [sp, #48]	; 0x30
  404b54:	f7fe fca0 	bl	403498 <_malloc_r>
  404b58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404b5a:	6010      	str	r0, [r2, #0]
  404b5c:	6110      	str	r0, [r2, #16]
  404b5e:	2800      	cmp	r0, #0
  404b60:	f000 81f2 	beq.w	404f48 <_svfprintf_r+0x142c>
  404b64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404b66:	2340      	movs	r3, #64	; 0x40
  404b68:	6153      	str	r3, [r2, #20]
  404b6a:	f7fe bfee 	b.w	403b4a <_svfprintf_r+0x2e>
  404b6e:	a823      	add	r0, sp, #140	; 0x8c
  404b70:	a920      	add	r1, sp, #128	; 0x80
  404b72:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404b74:	9004      	str	r0, [sp, #16]
  404b76:	9103      	str	r1, [sp, #12]
  404b78:	a81f      	add	r0, sp, #124	; 0x7c
  404b7a:	2103      	movs	r1, #3
  404b7c:	9002      	str	r0, [sp, #8]
  404b7e:	9a08      	ldr	r2, [sp, #32]
  404b80:	9401      	str	r4, [sp, #4]
  404b82:	463b      	mov	r3, r7
  404b84:	9100      	str	r1, [sp, #0]
  404b86:	980c      	ldr	r0, [sp, #48]	; 0x30
  404b88:	f001 f9ca 	bl	405f20 <_dtoa_r>
  404b8c:	4625      	mov	r5, r4
  404b8e:	4606      	mov	r6, r0
  404b90:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404b92:	2b46      	cmp	r3, #70	; 0x46
  404b94:	eb06 0405 	add.w	r4, r6, r5
  404b98:	f47f af29 	bne.w	4049ee <_svfprintf_r+0xed2>
  404b9c:	7833      	ldrb	r3, [r6, #0]
  404b9e:	2b30      	cmp	r3, #48	; 0x30
  404ba0:	f000 8178 	beq.w	404e94 <_svfprintf_r+0x1378>
  404ba4:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  404ba6:	442c      	add	r4, r5
  404ba8:	e721      	b.n	4049ee <_svfprintf_r+0xed2>
  404baa:	aa25      	add	r2, sp, #148	; 0x94
  404bac:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404bae:	980c      	ldr	r0, [sp, #48]	; 0x30
  404bb0:	f003 fcf4 	bl	40859c <__ssprint_r>
  404bb4:	2800      	cmp	r0, #0
  404bb6:	f47f a883 	bne.w	403cc0 <_svfprintf_r+0x1a4>
  404bba:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404bbc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404bbe:	46c8      	mov	r8, r9
  404bc0:	e782      	b.n	404ac8 <_svfprintf_r+0xfac>
  404bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404bc4:	2b00      	cmp	r3, #0
  404bc6:	bf08      	it	eq
  404bc8:	2301      	moveq	r3, #1
  404bca:	930a      	str	r3, [sp, #40]	; 0x28
  404bcc:	e6db      	b.n	404986 <_svfprintf_r+0xe6a>
  404bce:	4630      	mov	r0, r6
  404bd0:	940a      	str	r4, [sp, #40]	; 0x28
  404bd2:	f003 fc75 	bl	4084c0 <strlen>
  404bd6:	950f      	str	r5, [sp, #60]	; 0x3c
  404bd8:	900e      	str	r0, [sp, #56]	; 0x38
  404bda:	f8cd b01c 	str.w	fp, [sp, #28]
  404bde:	4603      	mov	r3, r0
  404be0:	f7ff b9f9 	b.w	403fd6 <_svfprintf_r+0x4ba>
  404be4:	272d      	movs	r7, #45	; 0x2d
  404be6:	2300      	movs	r3, #0
  404be8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404bec:	930a      	str	r3, [sp, #40]	; 0x28
  404bee:	f7ff b8ae 	b.w	403d4e <_svfprintf_r+0x232>
  404bf2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404bf4:	9312      	str	r3, [sp, #72]	; 0x48
  404bf6:	461a      	mov	r2, r3
  404bf8:	3303      	adds	r3, #3
  404bfa:	db04      	blt.n	404c06 <_svfprintf_r+0x10ea>
  404bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404bfe:	4619      	mov	r1, r3
  404c00:	4291      	cmp	r1, r2
  404c02:	f6bf af17 	bge.w	404a34 <_svfprintf_r+0xf18>
  404c06:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404c08:	3b02      	subs	r3, #2
  404c0a:	9311      	str	r3, [sp, #68]	; 0x44
  404c0c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  404c10:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  404c14:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404c16:	3b01      	subs	r3, #1
  404c18:	2b00      	cmp	r3, #0
  404c1a:	931f      	str	r3, [sp, #124]	; 0x7c
  404c1c:	bfbd      	ittte	lt
  404c1e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  404c20:	f1c3 0301 	rsblt	r3, r3, #1
  404c24:	222d      	movlt	r2, #45	; 0x2d
  404c26:	222b      	movge	r2, #43	; 0x2b
  404c28:	2b09      	cmp	r3, #9
  404c2a:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  404c2e:	f340 8116 	ble.w	404e5e <_svfprintf_r+0x1342>
  404c32:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  404c36:	4620      	mov	r0, r4
  404c38:	4dab      	ldr	r5, [pc, #684]	; (404ee8 <_svfprintf_r+0x13cc>)
  404c3a:	e000      	b.n	404c3e <_svfprintf_r+0x1122>
  404c3c:	4610      	mov	r0, r2
  404c3e:	fb85 1203 	smull	r1, r2, r5, r3
  404c42:	17d9      	asrs	r1, r3, #31
  404c44:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  404c48:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  404c4c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  404c50:	3230      	adds	r2, #48	; 0x30
  404c52:	2909      	cmp	r1, #9
  404c54:	f800 2c01 	strb.w	r2, [r0, #-1]
  404c58:	460b      	mov	r3, r1
  404c5a:	f100 32ff 	add.w	r2, r0, #4294967295
  404c5e:	dced      	bgt.n	404c3c <_svfprintf_r+0x1120>
  404c60:	3330      	adds	r3, #48	; 0x30
  404c62:	3802      	subs	r0, #2
  404c64:	b2d9      	uxtb	r1, r3
  404c66:	4284      	cmp	r4, r0
  404c68:	f802 1c01 	strb.w	r1, [r2, #-1]
  404c6c:	f240 8165 	bls.w	404f3a <_svfprintf_r+0x141e>
  404c70:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  404c74:	4613      	mov	r3, r2
  404c76:	e001      	b.n	404c7c <_svfprintf_r+0x1160>
  404c78:	f813 1b01 	ldrb.w	r1, [r3], #1
  404c7c:	f800 1b01 	strb.w	r1, [r0], #1
  404c80:	42a3      	cmp	r3, r4
  404c82:	d1f9      	bne.n	404c78 <_svfprintf_r+0x115c>
  404c84:	3301      	adds	r3, #1
  404c86:	1a9b      	subs	r3, r3, r2
  404c88:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  404c8c:	4413      	add	r3, r2
  404c8e:	aa21      	add	r2, sp, #132	; 0x84
  404c90:	1a9b      	subs	r3, r3, r2
  404c92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404c94:	931b      	str	r3, [sp, #108]	; 0x6c
  404c96:	2a01      	cmp	r2, #1
  404c98:	4413      	add	r3, r2
  404c9a:	930e      	str	r3, [sp, #56]	; 0x38
  404c9c:	f340 8119 	ble.w	404ed2 <_svfprintf_r+0x13b6>
  404ca0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404ca2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404ca4:	4413      	add	r3, r2
  404ca6:	930e      	str	r3, [sp, #56]	; 0x38
  404ca8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404cac:	9308      	str	r3, [sp, #32]
  404cae:	2300      	movs	r3, #0
  404cb0:	9312      	str	r3, [sp, #72]	; 0x48
  404cb2:	e6cf      	b.n	404a54 <_svfprintf_r+0xf38>
  404cb4:	aa25      	add	r2, sp, #148	; 0x94
  404cb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404cb8:	980c      	ldr	r0, [sp, #48]	; 0x30
  404cba:	f003 fc6f 	bl	40859c <__ssprint_r>
  404cbe:	2800      	cmp	r0, #0
  404cc0:	f47e affe 	bne.w	403cc0 <_svfprintf_r+0x1a4>
  404cc4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404cc6:	46c8      	mov	r8, r9
  404cc8:	e4d7      	b.n	40467a <_svfprintf_r+0xb5e>
  404cca:	4623      	mov	r3, r4
  404ccc:	e6a2      	b.n	404a14 <_svfprintf_r+0xef8>
  404cce:	aa25      	add	r2, sp, #148	; 0x94
  404cd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404cd2:	980c      	ldr	r0, [sp, #48]	; 0x30
  404cd4:	f003 fc62 	bl	40859c <__ssprint_r>
  404cd8:	2800      	cmp	r0, #0
  404cda:	f47e aff1 	bne.w	403cc0 <_svfprintf_r+0x1a4>
  404cde:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404ce0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404ce2:	46c8      	mov	r8, r9
  404ce4:	e5ae      	b.n	404844 <_svfprintf_r+0xd28>
  404ce6:	aa25      	add	r2, sp, #148	; 0x94
  404ce8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404cea:	980c      	ldr	r0, [sp, #48]	; 0x30
  404cec:	f003 fc56 	bl	40859c <__ssprint_r>
  404cf0:	2800      	cmp	r0, #0
  404cf2:	f47e afe5 	bne.w	403cc0 <_svfprintf_r+0x1a4>
  404cf6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404cf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404cfa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404cfc:	1a9a      	subs	r2, r3, r2
  404cfe:	46c8      	mov	r8, r9
  404d00:	e5b8      	b.n	404874 <_svfprintf_r+0xd58>
  404d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404d04:	9612      	str	r6, [sp, #72]	; 0x48
  404d06:	2b06      	cmp	r3, #6
  404d08:	bf28      	it	cs
  404d0a:	2306      	movcs	r3, #6
  404d0c:	960a      	str	r6, [sp, #40]	; 0x28
  404d0e:	4637      	mov	r7, r6
  404d10:	9308      	str	r3, [sp, #32]
  404d12:	950f      	str	r5, [sp, #60]	; 0x3c
  404d14:	f8cd b01c 	str.w	fp, [sp, #28]
  404d18:	930e      	str	r3, [sp, #56]	; 0x38
  404d1a:	4e74      	ldr	r6, [pc, #464]	; (404eec <_svfprintf_r+0x13d0>)
  404d1c:	f7ff b816 	b.w	403d4c <_svfprintf_r+0x230>
  404d20:	a823      	add	r0, sp, #140	; 0x8c
  404d22:	a920      	add	r1, sp, #128	; 0x80
  404d24:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404d26:	9004      	str	r0, [sp, #16]
  404d28:	9103      	str	r1, [sp, #12]
  404d2a:	a81f      	add	r0, sp, #124	; 0x7c
  404d2c:	2103      	movs	r1, #3
  404d2e:	9002      	str	r0, [sp, #8]
  404d30:	9a08      	ldr	r2, [sp, #32]
  404d32:	9501      	str	r5, [sp, #4]
  404d34:	463b      	mov	r3, r7
  404d36:	9100      	str	r1, [sp, #0]
  404d38:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d3a:	f001 f8f1 	bl	405f20 <_dtoa_r>
  404d3e:	4606      	mov	r6, r0
  404d40:	1944      	adds	r4, r0, r5
  404d42:	e72b      	b.n	404b9c <_svfprintf_r+0x1080>
  404d44:	2306      	movs	r3, #6
  404d46:	930a      	str	r3, [sp, #40]	; 0x28
  404d48:	e61d      	b.n	404986 <_svfprintf_r+0xe6a>
  404d4a:	272d      	movs	r7, #45	; 0x2d
  404d4c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404d50:	f7ff bacd 	b.w	4042ee <_svfprintf_r+0x7d2>
  404d54:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404d56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404d58:	4413      	add	r3, r2
  404d5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404d5c:	930e      	str	r3, [sp, #56]	; 0x38
  404d5e:	2a00      	cmp	r2, #0
  404d60:	f340 80b0 	ble.w	404ec4 <_svfprintf_r+0x13a8>
  404d64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404d68:	9308      	str	r3, [sp, #32]
  404d6a:	2367      	movs	r3, #103	; 0x67
  404d6c:	9311      	str	r3, [sp, #68]	; 0x44
  404d6e:	e671      	b.n	404a54 <_svfprintf_r+0xf38>
  404d70:	2b00      	cmp	r3, #0
  404d72:	f340 80c3 	ble.w	404efc <_svfprintf_r+0x13e0>
  404d76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404d78:	2a00      	cmp	r2, #0
  404d7a:	f040 8099 	bne.w	404eb0 <_svfprintf_r+0x1394>
  404d7e:	f01b 0f01 	tst.w	fp, #1
  404d82:	f040 8095 	bne.w	404eb0 <_svfprintf_r+0x1394>
  404d86:	9308      	str	r3, [sp, #32]
  404d88:	930e      	str	r3, [sp, #56]	; 0x38
  404d8a:	e663      	b.n	404a54 <_svfprintf_r+0xf38>
  404d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404d8e:	9308      	str	r3, [sp, #32]
  404d90:	930e      	str	r3, [sp, #56]	; 0x38
  404d92:	900a      	str	r0, [sp, #40]	; 0x28
  404d94:	950f      	str	r5, [sp, #60]	; 0x3c
  404d96:	f8cd b01c 	str.w	fp, [sp, #28]
  404d9a:	9012      	str	r0, [sp, #72]	; 0x48
  404d9c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404da0:	f7fe bfd4 	b.w	403d4c <_svfprintf_r+0x230>
  404da4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404da6:	2b47      	cmp	r3, #71	; 0x47
  404da8:	f47f ae20 	bne.w	4049ec <_svfprintf_r+0xed0>
  404dac:	f01b 0f01 	tst.w	fp, #1
  404db0:	f47f aeee 	bne.w	404b90 <_svfprintf_r+0x1074>
  404db4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404db6:	1b9b      	subs	r3, r3, r6
  404db8:	9313      	str	r3, [sp, #76]	; 0x4c
  404dba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404dbc:	2b47      	cmp	r3, #71	; 0x47
  404dbe:	f43f af18 	beq.w	404bf2 <_svfprintf_r+0x10d6>
  404dc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404dc4:	9312      	str	r3, [sp, #72]	; 0x48
  404dc6:	e721      	b.n	404c0c <_svfprintf_r+0x10f0>
  404dc8:	424f      	negs	r7, r1
  404dca:	3110      	adds	r1, #16
  404dcc:	4d48      	ldr	r5, [pc, #288]	; (404ef0 <_svfprintf_r+0x13d4>)
  404dce:	da2f      	bge.n	404e30 <_svfprintf_r+0x1314>
  404dd0:	2410      	movs	r4, #16
  404dd2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404dd6:	e004      	b.n	404de2 <_svfprintf_r+0x12c6>
  404dd8:	f108 0808 	add.w	r8, r8, #8
  404ddc:	3f10      	subs	r7, #16
  404dde:	2f10      	cmp	r7, #16
  404de0:	dd26      	ble.n	404e30 <_svfprintf_r+0x1314>
  404de2:	3301      	adds	r3, #1
  404de4:	3210      	adds	r2, #16
  404de6:	2b07      	cmp	r3, #7
  404de8:	9227      	str	r2, [sp, #156]	; 0x9c
  404dea:	9326      	str	r3, [sp, #152]	; 0x98
  404dec:	f8c8 5000 	str.w	r5, [r8]
  404df0:	f8c8 4004 	str.w	r4, [r8, #4]
  404df4:	ddf0      	ble.n	404dd8 <_svfprintf_r+0x12bc>
  404df6:	aa25      	add	r2, sp, #148	; 0x94
  404df8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404dfa:	4658      	mov	r0, fp
  404dfc:	f003 fbce 	bl	40859c <__ssprint_r>
  404e00:	2800      	cmp	r0, #0
  404e02:	f47e af5d 	bne.w	403cc0 <_svfprintf_r+0x1a4>
  404e06:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404e08:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404e0a:	46c8      	mov	r8, r9
  404e0c:	e7e6      	b.n	404ddc <_svfprintf_r+0x12c0>
  404e0e:	aa25      	add	r2, sp, #148	; 0x94
  404e10:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404e12:	980c      	ldr	r0, [sp, #48]	; 0x30
  404e14:	f003 fbc2 	bl	40859c <__ssprint_r>
  404e18:	2800      	cmp	r0, #0
  404e1a:	f47e af51 	bne.w	403cc0 <_svfprintf_r+0x1a4>
  404e1e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404e20:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404e22:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404e24:	46c8      	mov	r8, r9
  404e26:	e667      	b.n	404af8 <_svfprintf_r+0xfdc>
  404e28:	2000      	movs	r0, #0
  404e2a:	900a      	str	r0, [sp, #40]	; 0x28
  404e2c:	f7fe bed0 	b.w	403bd0 <_svfprintf_r+0xb4>
  404e30:	3301      	adds	r3, #1
  404e32:	443a      	add	r2, r7
  404e34:	2b07      	cmp	r3, #7
  404e36:	e888 00a0 	stmia.w	r8, {r5, r7}
  404e3a:	9227      	str	r2, [sp, #156]	; 0x9c
  404e3c:	9326      	str	r3, [sp, #152]	; 0x98
  404e3e:	f108 0808 	add.w	r8, r8, #8
  404e42:	f77f ae5c 	ble.w	404afe <_svfprintf_r+0xfe2>
  404e46:	aa25      	add	r2, sp, #148	; 0x94
  404e48:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404e4a:	980c      	ldr	r0, [sp, #48]	; 0x30
  404e4c:	f003 fba6 	bl	40859c <__ssprint_r>
  404e50:	2800      	cmp	r0, #0
  404e52:	f47e af35 	bne.w	403cc0 <_svfprintf_r+0x1a4>
  404e56:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404e58:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404e5a:	46c8      	mov	r8, r9
  404e5c:	e64f      	b.n	404afe <_svfprintf_r+0xfe2>
  404e5e:	3330      	adds	r3, #48	; 0x30
  404e60:	2230      	movs	r2, #48	; 0x30
  404e62:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  404e66:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  404e6a:	ab22      	add	r3, sp, #136	; 0x88
  404e6c:	e70f      	b.n	404c8e <_svfprintf_r+0x1172>
  404e6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404e70:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404e72:	4413      	add	r3, r2
  404e74:	930e      	str	r3, [sp, #56]	; 0x38
  404e76:	e775      	b.n	404d64 <_svfprintf_r+0x1248>
  404e78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404e7a:	e5cb      	b.n	404a14 <_svfprintf_r+0xef8>
  404e7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404e7e:	4e1d      	ldr	r6, [pc, #116]	; (404ef4 <_svfprintf_r+0x13d8>)
  404e80:	2b00      	cmp	r3, #0
  404e82:	bfb6      	itet	lt
  404e84:	272d      	movlt	r7, #45	; 0x2d
  404e86:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  404e8a:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  404e8e:	4b1a      	ldr	r3, [pc, #104]	; (404ef8 <_svfprintf_r+0x13dc>)
  404e90:	f7ff ba2f 	b.w	4042f2 <_svfprintf_r+0x7d6>
  404e94:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404e96:	9808      	ldr	r0, [sp, #32]
  404e98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404e9a:	4639      	mov	r1, r7
  404e9c:	f7fe fa20 	bl	4032e0 <__aeabi_dcmpeq>
  404ea0:	2800      	cmp	r0, #0
  404ea2:	f47f ae7f 	bne.w	404ba4 <_svfprintf_r+0x1088>
  404ea6:	f1c5 0501 	rsb	r5, r5, #1
  404eaa:	951f      	str	r5, [sp, #124]	; 0x7c
  404eac:	442c      	add	r4, r5
  404eae:	e59e      	b.n	4049ee <_svfprintf_r+0xed2>
  404eb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404eb2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404eb4:	4413      	add	r3, r2
  404eb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404eb8:	441a      	add	r2, r3
  404eba:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404ebe:	920e      	str	r2, [sp, #56]	; 0x38
  404ec0:	9308      	str	r3, [sp, #32]
  404ec2:	e5c7      	b.n	404a54 <_svfprintf_r+0xf38>
  404ec4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404ec6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404ec8:	f1c3 0301 	rsb	r3, r3, #1
  404ecc:	441a      	add	r2, r3
  404ece:	4613      	mov	r3, r2
  404ed0:	e7d0      	b.n	404e74 <_svfprintf_r+0x1358>
  404ed2:	f01b 0301 	ands.w	r3, fp, #1
  404ed6:	9312      	str	r3, [sp, #72]	; 0x48
  404ed8:	f47f aee2 	bne.w	404ca0 <_svfprintf_r+0x1184>
  404edc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404ede:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404ee2:	9308      	str	r3, [sp, #32]
  404ee4:	e5b6      	b.n	404a54 <_svfprintf_r+0xf38>
  404ee6:	bf00      	nop
  404ee8:	66666667 	.word	0x66666667
  404eec:	00409a90 	.word	0x00409a90
  404ef0:	00409aac 	.word	0x00409aac
  404ef4:	00409a64 	.word	0x00409a64
  404ef8:	00409a60 	.word	0x00409a60
  404efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404efe:	b913      	cbnz	r3, 404f06 <_svfprintf_r+0x13ea>
  404f00:	f01b 0f01 	tst.w	fp, #1
  404f04:	d002      	beq.n	404f0c <_svfprintf_r+0x13f0>
  404f06:	9b19      	ldr	r3, [sp, #100]	; 0x64
  404f08:	3301      	adds	r3, #1
  404f0a:	e7d4      	b.n	404eb6 <_svfprintf_r+0x139a>
  404f0c:	2301      	movs	r3, #1
  404f0e:	e73a      	b.n	404d86 <_svfprintf_r+0x126a>
  404f10:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404f12:	f89a 3001 	ldrb.w	r3, [sl, #1]
  404f16:	6828      	ldr	r0, [r5, #0]
  404f18:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  404f1c:	900a      	str	r0, [sp, #40]	; 0x28
  404f1e:	4628      	mov	r0, r5
  404f20:	3004      	adds	r0, #4
  404f22:	46a2      	mov	sl, r4
  404f24:	900f      	str	r0, [sp, #60]	; 0x3c
  404f26:	f7fe be51 	b.w	403bcc <_svfprintf_r+0xb0>
  404f2a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404f2e:	f7ff b867 	b.w	404000 <_svfprintf_r+0x4e4>
  404f32:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404f36:	f7ff ba15 	b.w	404364 <_svfprintf_r+0x848>
  404f3a:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  404f3e:	e6a6      	b.n	404c8e <_svfprintf_r+0x1172>
  404f40:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404f44:	f7ff b8eb 	b.w	40411e <_svfprintf_r+0x602>
  404f48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404f4a:	230c      	movs	r3, #12
  404f4c:	6013      	str	r3, [r2, #0]
  404f4e:	f04f 33ff 	mov.w	r3, #4294967295
  404f52:	9309      	str	r3, [sp, #36]	; 0x24
  404f54:	f7fe bebd 	b.w	403cd2 <_svfprintf_r+0x1b6>
  404f58:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404f5c:	f7ff b99a 	b.w	404294 <_svfprintf_r+0x778>
  404f60:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404f64:	f7ff b976 	b.w	404254 <_svfprintf_r+0x738>
  404f68:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404f6c:	f7ff b959 	b.w	404222 <_svfprintf_r+0x706>
  404f70:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404f74:	f7ff b912 	b.w	40419c <_svfprintf_r+0x680>

00404f78 <__sprint_r.part.0>:
  404f78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404f7c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  404f7e:	049c      	lsls	r4, r3, #18
  404f80:	4693      	mov	fp, r2
  404f82:	d52f      	bpl.n	404fe4 <__sprint_r.part.0+0x6c>
  404f84:	6893      	ldr	r3, [r2, #8]
  404f86:	6812      	ldr	r2, [r2, #0]
  404f88:	b353      	cbz	r3, 404fe0 <__sprint_r.part.0+0x68>
  404f8a:	460e      	mov	r6, r1
  404f8c:	4607      	mov	r7, r0
  404f8e:	f102 0908 	add.w	r9, r2, #8
  404f92:	e919 0420 	ldmdb	r9, {r5, sl}
  404f96:	ea5f 089a 	movs.w	r8, sl, lsr #2
  404f9a:	d017      	beq.n	404fcc <__sprint_r.part.0+0x54>
  404f9c:	3d04      	subs	r5, #4
  404f9e:	2400      	movs	r4, #0
  404fa0:	e001      	b.n	404fa6 <__sprint_r.part.0+0x2e>
  404fa2:	45a0      	cmp	r8, r4
  404fa4:	d010      	beq.n	404fc8 <__sprint_r.part.0+0x50>
  404fa6:	4632      	mov	r2, r6
  404fa8:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404fac:	4638      	mov	r0, r7
  404fae:	f002 f87b 	bl	4070a8 <_fputwc_r>
  404fb2:	1c43      	adds	r3, r0, #1
  404fb4:	f104 0401 	add.w	r4, r4, #1
  404fb8:	d1f3      	bne.n	404fa2 <__sprint_r.part.0+0x2a>
  404fba:	2300      	movs	r3, #0
  404fbc:	f8cb 3008 	str.w	r3, [fp, #8]
  404fc0:	f8cb 3004 	str.w	r3, [fp, #4]
  404fc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404fc8:	f8db 3008 	ldr.w	r3, [fp, #8]
  404fcc:	f02a 0a03 	bic.w	sl, sl, #3
  404fd0:	eba3 030a 	sub.w	r3, r3, sl
  404fd4:	f8cb 3008 	str.w	r3, [fp, #8]
  404fd8:	f109 0908 	add.w	r9, r9, #8
  404fdc:	2b00      	cmp	r3, #0
  404fde:	d1d8      	bne.n	404f92 <__sprint_r.part.0+0x1a>
  404fe0:	2000      	movs	r0, #0
  404fe2:	e7ea      	b.n	404fba <__sprint_r.part.0+0x42>
  404fe4:	f002 f9ca 	bl	40737c <__sfvwrite_r>
  404fe8:	2300      	movs	r3, #0
  404fea:	f8cb 3008 	str.w	r3, [fp, #8]
  404fee:	f8cb 3004 	str.w	r3, [fp, #4]
  404ff2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ff6:	bf00      	nop

00404ff8 <_vfiprintf_r>:
  404ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404ffc:	b0ad      	sub	sp, #180	; 0xb4
  404ffe:	461d      	mov	r5, r3
  405000:	468b      	mov	fp, r1
  405002:	4690      	mov	r8, r2
  405004:	9307      	str	r3, [sp, #28]
  405006:	9006      	str	r0, [sp, #24]
  405008:	b118      	cbz	r0, 405012 <_vfiprintf_r+0x1a>
  40500a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40500c:	2b00      	cmp	r3, #0
  40500e:	f000 80f3 	beq.w	4051f8 <_vfiprintf_r+0x200>
  405012:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405016:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40501a:	07df      	lsls	r7, r3, #31
  40501c:	b281      	uxth	r1, r0
  40501e:	d402      	bmi.n	405026 <_vfiprintf_r+0x2e>
  405020:	058e      	lsls	r6, r1, #22
  405022:	f140 80fc 	bpl.w	40521e <_vfiprintf_r+0x226>
  405026:	048c      	lsls	r4, r1, #18
  405028:	d40a      	bmi.n	405040 <_vfiprintf_r+0x48>
  40502a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40502e:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  405032:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  405036:	f8ab 100c 	strh.w	r1, [fp, #12]
  40503a:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  40503e:	b289      	uxth	r1, r1
  405040:	0708      	lsls	r0, r1, #28
  405042:	f140 80b3 	bpl.w	4051ac <_vfiprintf_r+0x1b4>
  405046:	f8db 3010 	ldr.w	r3, [fp, #16]
  40504a:	2b00      	cmp	r3, #0
  40504c:	f000 80ae 	beq.w	4051ac <_vfiprintf_r+0x1b4>
  405050:	f001 031a 	and.w	r3, r1, #26
  405054:	2b0a      	cmp	r3, #10
  405056:	f000 80b5 	beq.w	4051c4 <_vfiprintf_r+0x1cc>
  40505a:	2300      	movs	r3, #0
  40505c:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  405060:	930b      	str	r3, [sp, #44]	; 0x2c
  405062:	9311      	str	r3, [sp, #68]	; 0x44
  405064:	9310      	str	r3, [sp, #64]	; 0x40
  405066:	9303      	str	r3, [sp, #12]
  405068:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  40506c:	46ca      	mov	sl, r9
  40506e:	f8cd b010 	str.w	fp, [sp, #16]
  405072:	f898 3000 	ldrb.w	r3, [r8]
  405076:	4644      	mov	r4, r8
  405078:	b1fb      	cbz	r3, 4050ba <_vfiprintf_r+0xc2>
  40507a:	2b25      	cmp	r3, #37	; 0x25
  40507c:	d102      	bne.n	405084 <_vfiprintf_r+0x8c>
  40507e:	e01c      	b.n	4050ba <_vfiprintf_r+0xc2>
  405080:	2b25      	cmp	r3, #37	; 0x25
  405082:	d003      	beq.n	40508c <_vfiprintf_r+0x94>
  405084:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  405088:	2b00      	cmp	r3, #0
  40508a:	d1f9      	bne.n	405080 <_vfiprintf_r+0x88>
  40508c:	eba4 0508 	sub.w	r5, r4, r8
  405090:	b19d      	cbz	r5, 4050ba <_vfiprintf_r+0xc2>
  405092:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405094:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405096:	f8ca 8000 	str.w	r8, [sl]
  40509a:	3301      	adds	r3, #1
  40509c:	442a      	add	r2, r5
  40509e:	2b07      	cmp	r3, #7
  4050a0:	f8ca 5004 	str.w	r5, [sl, #4]
  4050a4:	9211      	str	r2, [sp, #68]	; 0x44
  4050a6:	9310      	str	r3, [sp, #64]	; 0x40
  4050a8:	dd7a      	ble.n	4051a0 <_vfiprintf_r+0x1a8>
  4050aa:	2a00      	cmp	r2, #0
  4050ac:	f040 84b0 	bne.w	405a10 <_vfiprintf_r+0xa18>
  4050b0:	9b03      	ldr	r3, [sp, #12]
  4050b2:	9210      	str	r2, [sp, #64]	; 0x40
  4050b4:	442b      	add	r3, r5
  4050b6:	46ca      	mov	sl, r9
  4050b8:	9303      	str	r3, [sp, #12]
  4050ba:	7823      	ldrb	r3, [r4, #0]
  4050bc:	2b00      	cmp	r3, #0
  4050be:	f000 83e0 	beq.w	405882 <_vfiprintf_r+0x88a>
  4050c2:	2000      	movs	r0, #0
  4050c4:	f04f 0300 	mov.w	r3, #0
  4050c8:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4050cc:	f104 0801 	add.w	r8, r4, #1
  4050d0:	7862      	ldrb	r2, [r4, #1]
  4050d2:	4605      	mov	r5, r0
  4050d4:	4606      	mov	r6, r0
  4050d6:	4603      	mov	r3, r0
  4050d8:	f04f 34ff 	mov.w	r4, #4294967295
  4050dc:	f108 0801 	add.w	r8, r8, #1
  4050e0:	f1a2 0120 	sub.w	r1, r2, #32
  4050e4:	2958      	cmp	r1, #88	; 0x58
  4050e6:	f200 82de 	bhi.w	4056a6 <_vfiprintf_r+0x6ae>
  4050ea:	e8df f011 	tbh	[pc, r1, lsl #1]
  4050ee:	0221      	.short	0x0221
  4050f0:	02dc02dc 	.word	0x02dc02dc
  4050f4:	02dc0229 	.word	0x02dc0229
  4050f8:	02dc02dc 	.word	0x02dc02dc
  4050fc:	02dc02dc 	.word	0x02dc02dc
  405100:	028902dc 	.word	0x028902dc
  405104:	02dc0295 	.word	0x02dc0295
  405108:	02bd00a2 	.word	0x02bd00a2
  40510c:	019f02dc 	.word	0x019f02dc
  405110:	01a401a4 	.word	0x01a401a4
  405114:	01a401a4 	.word	0x01a401a4
  405118:	01a401a4 	.word	0x01a401a4
  40511c:	01a401a4 	.word	0x01a401a4
  405120:	02dc01a4 	.word	0x02dc01a4
  405124:	02dc02dc 	.word	0x02dc02dc
  405128:	02dc02dc 	.word	0x02dc02dc
  40512c:	02dc02dc 	.word	0x02dc02dc
  405130:	02dc02dc 	.word	0x02dc02dc
  405134:	01b202dc 	.word	0x01b202dc
  405138:	02dc02dc 	.word	0x02dc02dc
  40513c:	02dc02dc 	.word	0x02dc02dc
  405140:	02dc02dc 	.word	0x02dc02dc
  405144:	02dc02dc 	.word	0x02dc02dc
  405148:	02dc02dc 	.word	0x02dc02dc
  40514c:	02dc0197 	.word	0x02dc0197
  405150:	02dc02dc 	.word	0x02dc02dc
  405154:	02dc02dc 	.word	0x02dc02dc
  405158:	02dc019b 	.word	0x02dc019b
  40515c:	025302dc 	.word	0x025302dc
  405160:	02dc02dc 	.word	0x02dc02dc
  405164:	02dc02dc 	.word	0x02dc02dc
  405168:	02dc02dc 	.word	0x02dc02dc
  40516c:	02dc02dc 	.word	0x02dc02dc
  405170:	02dc02dc 	.word	0x02dc02dc
  405174:	021b025a 	.word	0x021b025a
  405178:	02dc02dc 	.word	0x02dc02dc
  40517c:	026e02dc 	.word	0x026e02dc
  405180:	02dc021b 	.word	0x02dc021b
  405184:	027302dc 	.word	0x027302dc
  405188:	01f502dc 	.word	0x01f502dc
  40518c:	02090182 	.word	0x02090182
  405190:	02dc02d7 	.word	0x02dc02d7
  405194:	02dc029a 	.word	0x02dc029a
  405198:	02dc00a7 	.word	0x02dc00a7
  40519c:	022e02dc 	.word	0x022e02dc
  4051a0:	f10a 0a08 	add.w	sl, sl, #8
  4051a4:	9b03      	ldr	r3, [sp, #12]
  4051a6:	442b      	add	r3, r5
  4051a8:	9303      	str	r3, [sp, #12]
  4051aa:	e786      	b.n	4050ba <_vfiprintf_r+0xc2>
  4051ac:	4659      	mov	r1, fp
  4051ae:	9806      	ldr	r0, [sp, #24]
  4051b0:	f000 fdac 	bl	405d0c <__swsetup_r>
  4051b4:	bb18      	cbnz	r0, 4051fe <_vfiprintf_r+0x206>
  4051b6:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  4051ba:	f001 031a 	and.w	r3, r1, #26
  4051be:	2b0a      	cmp	r3, #10
  4051c0:	f47f af4b 	bne.w	40505a <_vfiprintf_r+0x62>
  4051c4:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4051c8:	2b00      	cmp	r3, #0
  4051ca:	f6ff af46 	blt.w	40505a <_vfiprintf_r+0x62>
  4051ce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4051d2:	07db      	lsls	r3, r3, #31
  4051d4:	d405      	bmi.n	4051e2 <_vfiprintf_r+0x1ea>
  4051d6:	058f      	lsls	r7, r1, #22
  4051d8:	d403      	bmi.n	4051e2 <_vfiprintf_r+0x1ea>
  4051da:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4051de:	f002 fa91 	bl	407704 <__retarget_lock_release_recursive>
  4051e2:	462b      	mov	r3, r5
  4051e4:	4642      	mov	r2, r8
  4051e6:	4659      	mov	r1, fp
  4051e8:	9806      	ldr	r0, [sp, #24]
  4051ea:	f000 fd4d 	bl	405c88 <__sbprintf>
  4051ee:	9003      	str	r0, [sp, #12]
  4051f0:	9803      	ldr	r0, [sp, #12]
  4051f2:	b02d      	add	sp, #180	; 0xb4
  4051f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4051f8:	f001 feb4 	bl	406f64 <__sinit>
  4051fc:	e709      	b.n	405012 <_vfiprintf_r+0x1a>
  4051fe:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405202:	07d9      	lsls	r1, r3, #31
  405204:	d404      	bmi.n	405210 <_vfiprintf_r+0x218>
  405206:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40520a:	059a      	lsls	r2, r3, #22
  40520c:	f140 84aa 	bpl.w	405b64 <_vfiprintf_r+0xb6c>
  405210:	f04f 33ff 	mov.w	r3, #4294967295
  405214:	9303      	str	r3, [sp, #12]
  405216:	9803      	ldr	r0, [sp, #12]
  405218:	b02d      	add	sp, #180	; 0xb4
  40521a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40521e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405222:	f002 fa6d 	bl	407700 <__retarget_lock_acquire_recursive>
  405226:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40522a:	b281      	uxth	r1, r0
  40522c:	e6fb      	b.n	405026 <_vfiprintf_r+0x2e>
  40522e:	4276      	negs	r6, r6
  405230:	9207      	str	r2, [sp, #28]
  405232:	f043 0304 	orr.w	r3, r3, #4
  405236:	f898 2000 	ldrb.w	r2, [r8]
  40523a:	e74f      	b.n	4050dc <_vfiprintf_r+0xe4>
  40523c:	9608      	str	r6, [sp, #32]
  40523e:	069e      	lsls	r6, r3, #26
  405240:	f100 8450 	bmi.w	405ae4 <_vfiprintf_r+0xaec>
  405244:	9907      	ldr	r1, [sp, #28]
  405246:	06dd      	lsls	r5, r3, #27
  405248:	460a      	mov	r2, r1
  40524a:	f100 83ef 	bmi.w	405a2c <_vfiprintf_r+0xa34>
  40524e:	0658      	lsls	r0, r3, #25
  405250:	f140 83ec 	bpl.w	405a2c <_vfiprintf_r+0xa34>
  405254:	880e      	ldrh	r6, [r1, #0]
  405256:	3104      	adds	r1, #4
  405258:	2700      	movs	r7, #0
  40525a:	2201      	movs	r2, #1
  40525c:	9107      	str	r1, [sp, #28]
  40525e:	f04f 0100 	mov.w	r1, #0
  405262:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  405266:	2500      	movs	r5, #0
  405268:	1c61      	adds	r1, r4, #1
  40526a:	f000 8116 	beq.w	40549a <_vfiprintf_r+0x4a2>
  40526e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  405272:	9102      	str	r1, [sp, #8]
  405274:	ea56 0107 	orrs.w	r1, r6, r7
  405278:	f040 8114 	bne.w	4054a4 <_vfiprintf_r+0x4ac>
  40527c:	2c00      	cmp	r4, #0
  40527e:	f040 835c 	bne.w	40593a <_vfiprintf_r+0x942>
  405282:	2a00      	cmp	r2, #0
  405284:	f040 83b7 	bne.w	4059f6 <_vfiprintf_r+0x9fe>
  405288:	f013 0301 	ands.w	r3, r3, #1
  40528c:	9305      	str	r3, [sp, #20]
  40528e:	f000 8457 	beq.w	405b40 <_vfiprintf_r+0xb48>
  405292:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  405296:	2330      	movs	r3, #48	; 0x30
  405298:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  40529c:	9b05      	ldr	r3, [sp, #20]
  40529e:	42a3      	cmp	r3, r4
  4052a0:	bfb8      	it	lt
  4052a2:	4623      	movlt	r3, r4
  4052a4:	9301      	str	r3, [sp, #4]
  4052a6:	b10d      	cbz	r5, 4052ac <_vfiprintf_r+0x2b4>
  4052a8:	3301      	adds	r3, #1
  4052aa:	9301      	str	r3, [sp, #4]
  4052ac:	9b02      	ldr	r3, [sp, #8]
  4052ae:	f013 0302 	ands.w	r3, r3, #2
  4052b2:	9309      	str	r3, [sp, #36]	; 0x24
  4052b4:	d002      	beq.n	4052bc <_vfiprintf_r+0x2c4>
  4052b6:	9b01      	ldr	r3, [sp, #4]
  4052b8:	3302      	adds	r3, #2
  4052ba:	9301      	str	r3, [sp, #4]
  4052bc:	9b02      	ldr	r3, [sp, #8]
  4052be:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4052c2:	930a      	str	r3, [sp, #40]	; 0x28
  4052c4:	f040 8217 	bne.w	4056f6 <_vfiprintf_r+0x6fe>
  4052c8:	9b08      	ldr	r3, [sp, #32]
  4052ca:	9a01      	ldr	r2, [sp, #4]
  4052cc:	1a9d      	subs	r5, r3, r2
  4052ce:	2d00      	cmp	r5, #0
  4052d0:	f340 8211 	ble.w	4056f6 <_vfiprintf_r+0x6fe>
  4052d4:	2d10      	cmp	r5, #16
  4052d6:	f340 8490 	ble.w	405bfa <_vfiprintf_r+0xc02>
  4052da:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4052dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4052de:	4ec4      	ldr	r6, [pc, #784]	; (4055f0 <_vfiprintf_r+0x5f8>)
  4052e0:	46d6      	mov	lr, sl
  4052e2:	2710      	movs	r7, #16
  4052e4:	46a2      	mov	sl, r4
  4052e6:	4619      	mov	r1, r3
  4052e8:	9c06      	ldr	r4, [sp, #24]
  4052ea:	e007      	b.n	4052fc <_vfiprintf_r+0x304>
  4052ec:	f101 0c02 	add.w	ip, r1, #2
  4052f0:	f10e 0e08 	add.w	lr, lr, #8
  4052f4:	4601      	mov	r1, r0
  4052f6:	3d10      	subs	r5, #16
  4052f8:	2d10      	cmp	r5, #16
  4052fa:	dd11      	ble.n	405320 <_vfiprintf_r+0x328>
  4052fc:	1c48      	adds	r0, r1, #1
  4052fe:	3210      	adds	r2, #16
  405300:	2807      	cmp	r0, #7
  405302:	9211      	str	r2, [sp, #68]	; 0x44
  405304:	e88e 00c0 	stmia.w	lr, {r6, r7}
  405308:	9010      	str	r0, [sp, #64]	; 0x40
  40530a:	ddef      	ble.n	4052ec <_vfiprintf_r+0x2f4>
  40530c:	2a00      	cmp	r2, #0
  40530e:	f040 81e4 	bne.w	4056da <_vfiprintf_r+0x6e2>
  405312:	3d10      	subs	r5, #16
  405314:	2d10      	cmp	r5, #16
  405316:	4611      	mov	r1, r2
  405318:	f04f 0c01 	mov.w	ip, #1
  40531c:	46ce      	mov	lr, r9
  40531e:	dced      	bgt.n	4052fc <_vfiprintf_r+0x304>
  405320:	4654      	mov	r4, sl
  405322:	4661      	mov	r1, ip
  405324:	46f2      	mov	sl, lr
  405326:	442a      	add	r2, r5
  405328:	2907      	cmp	r1, #7
  40532a:	9211      	str	r2, [sp, #68]	; 0x44
  40532c:	f8ca 6000 	str.w	r6, [sl]
  405330:	f8ca 5004 	str.w	r5, [sl, #4]
  405334:	9110      	str	r1, [sp, #64]	; 0x40
  405336:	f300 82ec 	bgt.w	405912 <_vfiprintf_r+0x91a>
  40533a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40533e:	f10a 0a08 	add.w	sl, sl, #8
  405342:	1c48      	adds	r0, r1, #1
  405344:	2d00      	cmp	r5, #0
  405346:	f040 81de 	bne.w	405706 <_vfiprintf_r+0x70e>
  40534a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40534c:	2b00      	cmp	r3, #0
  40534e:	f000 81f8 	beq.w	405742 <_vfiprintf_r+0x74a>
  405352:	3202      	adds	r2, #2
  405354:	a90e      	add	r1, sp, #56	; 0x38
  405356:	2302      	movs	r3, #2
  405358:	2807      	cmp	r0, #7
  40535a:	9211      	str	r2, [sp, #68]	; 0x44
  40535c:	9010      	str	r0, [sp, #64]	; 0x40
  40535e:	e88a 000a 	stmia.w	sl, {r1, r3}
  405362:	f340 81ea 	ble.w	40573a <_vfiprintf_r+0x742>
  405366:	2a00      	cmp	r2, #0
  405368:	f040 838c 	bne.w	405a84 <_vfiprintf_r+0xa8c>
  40536c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40536e:	2b80      	cmp	r3, #128	; 0x80
  405370:	f04f 0001 	mov.w	r0, #1
  405374:	4611      	mov	r1, r2
  405376:	46ca      	mov	sl, r9
  405378:	f040 81e7 	bne.w	40574a <_vfiprintf_r+0x752>
  40537c:	9b08      	ldr	r3, [sp, #32]
  40537e:	9d01      	ldr	r5, [sp, #4]
  405380:	1b5e      	subs	r6, r3, r5
  405382:	2e00      	cmp	r6, #0
  405384:	f340 81e1 	ble.w	40574a <_vfiprintf_r+0x752>
  405388:	2e10      	cmp	r6, #16
  40538a:	4d9a      	ldr	r5, [pc, #616]	; (4055f4 <_vfiprintf_r+0x5fc>)
  40538c:	f340 8450 	ble.w	405c30 <_vfiprintf_r+0xc38>
  405390:	46d4      	mov	ip, sl
  405392:	2710      	movs	r7, #16
  405394:	46a2      	mov	sl, r4
  405396:	9c06      	ldr	r4, [sp, #24]
  405398:	e007      	b.n	4053aa <_vfiprintf_r+0x3b2>
  40539a:	f101 0e02 	add.w	lr, r1, #2
  40539e:	f10c 0c08 	add.w	ip, ip, #8
  4053a2:	4601      	mov	r1, r0
  4053a4:	3e10      	subs	r6, #16
  4053a6:	2e10      	cmp	r6, #16
  4053a8:	dd11      	ble.n	4053ce <_vfiprintf_r+0x3d6>
  4053aa:	1c48      	adds	r0, r1, #1
  4053ac:	3210      	adds	r2, #16
  4053ae:	2807      	cmp	r0, #7
  4053b0:	9211      	str	r2, [sp, #68]	; 0x44
  4053b2:	e88c 00a0 	stmia.w	ip, {r5, r7}
  4053b6:	9010      	str	r0, [sp, #64]	; 0x40
  4053b8:	ddef      	ble.n	40539a <_vfiprintf_r+0x3a2>
  4053ba:	2a00      	cmp	r2, #0
  4053bc:	f040 829d 	bne.w	4058fa <_vfiprintf_r+0x902>
  4053c0:	3e10      	subs	r6, #16
  4053c2:	2e10      	cmp	r6, #16
  4053c4:	f04f 0e01 	mov.w	lr, #1
  4053c8:	4611      	mov	r1, r2
  4053ca:	46cc      	mov	ip, r9
  4053cc:	dced      	bgt.n	4053aa <_vfiprintf_r+0x3b2>
  4053ce:	4654      	mov	r4, sl
  4053d0:	46e2      	mov	sl, ip
  4053d2:	4432      	add	r2, r6
  4053d4:	f1be 0f07 	cmp.w	lr, #7
  4053d8:	9211      	str	r2, [sp, #68]	; 0x44
  4053da:	e88a 0060 	stmia.w	sl, {r5, r6}
  4053de:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4053e2:	f300 8369 	bgt.w	405ab8 <_vfiprintf_r+0xac0>
  4053e6:	f10a 0a08 	add.w	sl, sl, #8
  4053ea:	f10e 0001 	add.w	r0, lr, #1
  4053ee:	4671      	mov	r1, lr
  4053f0:	e1ab      	b.n	40574a <_vfiprintf_r+0x752>
  4053f2:	9608      	str	r6, [sp, #32]
  4053f4:	f013 0220 	ands.w	r2, r3, #32
  4053f8:	f040 838c 	bne.w	405b14 <_vfiprintf_r+0xb1c>
  4053fc:	f013 0110 	ands.w	r1, r3, #16
  405400:	f040 831a 	bne.w	405a38 <_vfiprintf_r+0xa40>
  405404:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  405408:	f000 8316 	beq.w	405a38 <_vfiprintf_r+0xa40>
  40540c:	9807      	ldr	r0, [sp, #28]
  40540e:	460a      	mov	r2, r1
  405410:	4601      	mov	r1, r0
  405412:	3104      	adds	r1, #4
  405414:	8806      	ldrh	r6, [r0, #0]
  405416:	9107      	str	r1, [sp, #28]
  405418:	2700      	movs	r7, #0
  40541a:	e720      	b.n	40525e <_vfiprintf_r+0x266>
  40541c:	9608      	str	r6, [sp, #32]
  40541e:	f043 0310 	orr.w	r3, r3, #16
  405422:	e7e7      	b.n	4053f4 <_vfiprintf_r+0x3fc>
  405424:	9608      	str	r6, [sp, #32]
  405426:	f043 0310 	orr.w	r3, r3, #16
  40542a:	e708      	b.n	40523e <_vfiprintf_r+0x246>
  40542c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405430:	f898 2000 	ldrb.w	r2, [r8]
  405434:	e652      	b.n	4050dc <_vfiprintf_r+0xe4>
  405436:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40543a:	2600      	movs	r6, #0
  40543c:	f818 2b01 	ldrb.w	r2, [r8], #1
  405440:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  405444:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  405448:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40544c:	2909      	cmp	r1, #9
  40544e:	d9f5      	bls.n	40543c <_vfiprintf_r+0x444>
  405450:	e646      	b.n	4050e0 <_vfiprintf_r+0xe8>
  405452:	9608      	str	r6, [sp, #32]
  405454:	2800      	cmp	r0, #0
  405456:	f040 8408 	bne.w	405c6a <_vfiprintf_r+0xc72>
  40545a:	f043 0310 	orr.w	r3, r3, #16
  40545e:	069e      	lsls	r6, r3, #26
  405460:	f100 834c 	bmi.w	405afc <_vfiprintf_r+0xb04>
  405464:	06dd      	lsls	r5, r3, #27
  405466:	f100 82f3 	bmi.w	405a50 <_vfiprintf_r+0xa58>
  40546a:	0658      	lsls	r0, r3, #25
  40546c:	f140 82f0 	bpl.w	405a50 <_vfiprintf_r+0xa58>
  405470:	9d07      	ldr	r5, [sp, #28]
  405472:	f9b5 6000 	ldrsh.w	r6, [r5]
  405476:	462a      	mov	r2, r5
  405478:	17f7      	asrs	r7, r6, #31
  40547a:	3204      	adds	r2, #4
  40547c:	4630      	mov	r0, r6
  40547e:	4639      	mov	r1, r7
  405480:	9207      	str	r2, [sp, #28]
  405482:	2800      	cmp	r0, #0
  405484:	f171 0200 	sbcs.w	r2, r1, #0
  405488:	f2c0 835d 	blt.w	405b46 <_vfiprintf_r+0xb4e>
  40548c:	1c61      	adds	r1, r4, #1
  40548e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405492:	f04f 0201 	mov.w	r2, #1
  405496:	f47f aeea 	bne.w	40526e <_vfiprintf_r+0x276>
  40549a:	ea56 0107 	orrs.w	r1, r6, r7
  40549e:	f000 824d 	beq.w	40593c <_vfiprintf_r+0x944>
  4054a2:	9302      	str	r3, [sp, #8]
  4054a4:	2a01      	cmp	r2, #1
  4054a6:	f000 828c 	beq.w	4059c2 <_vfiprintf_r+0x9ca>
  4054aa:	2a02      	cmp	r2, #2
  4054ac:	f040 825c 	bne.w	405968 <_vfiprintf_r+0x970>
  4054b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4054b2:	46cb      	mov	fp, r9
  4054b4:	0933      	lsrs	r3, r6, #4
  4054b6:	f006 010f 	and.w	r1, r6, #15
  4054ba:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4054be:	093a      	lsrs	r2, r7, #4
  4054c0:	461e      	mov	r6, r3
  4054c2:	4617      	mov	r7, r2
  4054c4:	5c43      	ldrb	r3, [r0, r1]
  4054c6:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4054ca:	ea56 0307 	orrs.w	r3, r6, r7
  4054ce:	d1f1      	bne.n	4054b4 <_vfiprintf_r+0x4bc>
  4054d0:	eba9 030b 	sub.w	r3, r9, fp
  4054d4:	9305      	str	r3, [sp, #20]
  4054d6:	e6e1      	b.n	40529c <_vfiprintf_r+0x2a4>
  4054d8:	2800      	cmp	r0, #0
  4054da:	f040 83c0 	bne.w	405c5e <_vfiprintf_r+0xc66>
  4054de:	0699      	lsls	r1, r3, #26
  4054e0:	f100 8367 	bmi.w	405bb2 <_vfiprintf_r+0xbba>
  4054e4:	06da      	lsls	r2, r3, #27
  4054e6:	f100 80f1 	bmi.w	4056cc <_vfiprintf_r+0x6d4>
  4054ea:	065b      	lsls	r3, r3, #25
  4054ec:	f140 80ee 	bpl.w	4056cc <_vfiprintf_r+0x6d4>
  4054f0:	9a07      	ldr	r2, [sp, #28]
  4054f2:	6813      	ldr	r3, [r2, #0]
  4054f4:	3204      	adds	r2, #4
  4054f6:	9207      	str	r2, [sp, #28]
  4054f8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4054fc:	801a      	strh	r2, [r3, #0]
  4054fe:	e5b8      	b.n	405072 <_vfiprintf_r+0x7a>
  405500:	9807      	ldr	r0, [sp, #28]
  405502:	4a3d      	ldr	r2, [pc, #244]	; (4055f8 <_vfiprintf_r+0x600>)
  405504:	9608      	str	r6, [sp, #32]
  405506:	920b      	str	r2, [sp, #44]	; 0x2c
  405508:	6806      	ldr	r6, [r0, #0]
  40550a:	2278      	movs	r2, #120	; 0x78
  40550c:	2130      	movs	r1, #48	; 0x30
  40550e:	3004      	adds	r0, #4
  405510:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  405514:	f043 0302 	orr.w	r3, r3, #2
  405518:	9007      	str	r0, [sp, #28]
  40551a:	2700      	movs	r7, #0
  40551c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405520:	2202      	movs	r2, #2
  405522:	e69c      	b.n	40525e <_vfiprintf_r+0x266>
  405524:	9608      	str	r6, [sp, #32]
  405526:	2800      	cmp	r0, #0
  405528:	d099      	beq.n	40545e <_vfiprintf_r+0x466>
  40552a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40552e:	e796      	b.n	40545e <_vfiprintf_r+0x466>
  405530:	f898 2000 	ldrb.w	r2, [r8]
  405534:	2d00      	cmp	r5, #0
  405536:	f47f add1 	bne.w	4050dc <_vfiprintf_r+0xe4>
  40553a:	2001      	movs	r0, #1
  40553c:	2520      	movs	r5, #32
  40553e:	e5cd      	b.n	4050dc <_vfiprintf_r+0xe4>
  405540:	f043 0301 	orr.w	r3, r3, #1
  405544:	f898 2000 	ldrb.w	r2, [r8]
  405548:	e5c8      	b.n	4050dc <_vfiprintf_r+0xe4>
  40554a:	9608      	str	r6, [sp, #32]
  40554c:	2800      	cmp	r0, #0
  40554e:	f040 8393 	bne.w	405c78 <_vfiprintf_r+0xc80>
  405552:	4929      	ldr	r1, [pc, #164]	; (4055f8 <_vfiprintf_r+0x600>)
  405554:	910b      	str	r1, [sp, #44]	; 0x2c
  405556:	069f      	lsls	r7, r3, #26
  405558:	f100 82e8 	bmi.w	405b2c <_vfiprintf_r+0xb34>
  40555c:	9807      	ldr	r0, [sp, #28]
  40555e:	06de      	lsls	r6, r3, #27
  405560:	4601      	mov	r1, r0
  405562:	f100 8270 	bmi.w	405a46 <_vfiprintf_r+0xa4e>
  405566:	065d      	lsls	r5, r3, #25
  405568:	f140 826d 	bpl.w	405a46 <_vfiprintf_r+0xa4e>
  40556c:	3104      	adds	r1, #4
  40556e:	8806      	ldrh	r6, [r0, #0]
  405570:	9107      	str	r1, [sp, #28]
  405572:	2700      	movs	r7, #0
  405574:	07d8      	lsls	r0, r3, #31
  405576:	f140 8222 	bpl.w	4059be <_vfiprintf_r+0x9c6>
  40557a:	ea56 0107 	orrs.w	r1, r6, r7
  40557e:	f000 821e 	beq.w	4059be <_vfiprintf_r+0x9c6>
  405582:	2130      	movs	r1, #48	; 0x30
  405584:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  405588:	f043 0302 	orr.w	r3, r3, #2
  40558c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405590:	2202      	movs	r2, #2
  405592:	e664      	b.n	40525e <_vfiprintf_r+0x266>
  405594:	9608      	str	r6, [sp, #32]
  405596:	2800      	cmp	r0, #0
  405598:	f040 836b 	bne.w	405c72 <_vfiprintf_r+0xc7a>
  40559c:	4917      	ldr	r1, [pc, #92]	; (4055fc <_vfiprintf_r+0x604>)
  40559e:	910b      	str	r1, [sp, #44]	; 0x2c
  4055a0:	e7d9      	b.n	405556 <_vfiprintf_r+0x55e>
  4055a2:	9907      	ldr	r1, [sp, #28]
  4055a4:	9608      	str	r6, [sp, #32]
  4055a6:	680a      	ldr	r2, [r1, #0]
  4055a8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4055ac:	f04f 0000 	mov.w	r0, #0
  4055b0:	460a      	mov	r2, r1
  4055b2:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4055b6:	3204      	adds	r2, #4
  4055b8:	2001      	movs	r0, #1
  4055ba:	9001      	str	r0, [sp, #4]
  4055bc:	9207      	str	r2, [sp, #28]
  4055be:	9005      	str	r0, [sp, #20]
  4055c0:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4055c4:	9302      	str	r3, [sp, #8]
  4055c6:	2400      	movs	r4, #0
  4055c8:	e670      	b.n	4052ac <_vfiprintf_r+0x2b4>
  4055ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4055ce:	f898 2000 	ldrb.w	r2, [r8]
  4055d2:	e583      	b.n	4050dc <_vfiprintf_r+0xe4>
  4055d4:	f898 2000 	ldrb.w	r2, [r8]
  4055d8:	2a6c      	cmp	r2, #108	; 0x6c
  4055da:	bf03      	ittte	eq
  4055dc:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4055e0:	f043 0320 	orreq.w	r3, r3, #32
  4055e4:	f108 0801 	addeq.w	r8, r8, #1
  4055e8:	f043 0310 	orrne.w	r3, r3, #16
  4055ec:	e576      	b.n	4050dc <_vfiprintf_r+0xe4>
  4055ee:	bf00      	nop
  4055f0:	00409abc 	.word	0x00409abc
  4055f4:	00409acc 	.word	0x00409acc
  4055f8:	00409a7c 	.word	0x00409a7c
  4055fc:	00409a68 	.word	0x00409a68
  405600:	9907      	ldr	r1, [sp, #28]
  405602:	680e      	ldr	r6, [r1, #0]
  405604:	460a      	mov	r2, r1
  405606:	2e00      	cmp	r6, #0
  405608:	f102 0204 	add.w	r2, r2, #4
  40560c:	f6ff ae0f 	blt.w	40522e <_vfiprintf_r+0x236>
  405610:	9207      	str	r2, [sp, #28]
  405612:	f898 2000 	ldrb.w	r2, [r8]
  405616:	e561      	b.n	4050dc <_vfiprintf_r+0xe4>
  405618:	f898 2000 	ldrb.w	r2, [r8]
  40561c:	2001      	movs	r0, #1
  40561e:	252b      	movs	r5, #43	; 0x2b
  405620:	e55c      	b.n	4050dc <_vfiprintf_r+0xe4>
  405622:	9907      	ldr	r1, [sp, #28]
  405624:	9608      	str	r6, [sp, #32]
  405626:	f8d1 b000 	ldr.w	fp, [r1]
  40562a:	f04f 0200 	mov.w	r2, #0
  40562e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405632:	1d0e      	adds	r6, r1, #4
  405634:	f1bb 0f00 	cmp.w	fp, #0
  405638:	f000 82e5 	beq.w	405c06 <_vfiprintf_r+0xc0e>
  40563c:	1c67      	adds	r7, r4, #1
  40563e:	f000 82c4 	beq.w	405bca <_vfiprintf_r+0xbd2>
  405642:	4622      	mov	r2, r4
  405644:	2100      	movs	r1, #0
  405646:	4658      	mov	r0, fp
  405648:	9301      	str	r3, [sp, #4]
  40564a:	f002 f8f1 	bl	407830 <memchr>
  40564e:	9b01      	ldr	r3, [sp, #4]
  405650:	2800      	cmp	r0, #0
  405652:	f000 82e5 	beq.w	405c20 <_vfiprintf_r+0xc28>
  405656:	eba0 020b 	sub.w	r2, r0, fp
  40565a:	9205      	str	r2, [sp, #20]
  40565c:	9607      	str	r6, [sp, #28]
  40565e:	9302      	str	r3, [sp, #8]
  405660:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405664:	2400      	movs	r4, #0
  405666:	e619      	b.n	40529c <_vfiprintf_r+0x2a4>
  405668:	f898 2000 	ldrb.w	r2, [r8]
  40566c:	2a2a      	cmp	r2, #42	; 0x2a
  40566e:	f108 0701 	add.w	r7, r8, #1
  405672:	f000 82e9 	beq.w	405c48 <_vfiprintf_r+0xc50>
  405676:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40567a:	2909      	cmp	r1, #9
  40567c:	46b8      	mov	r8, r7
  40567e:	f04f 0400 	mov.w	r4, #0
  405682:	f63f ad2d 	bhi.w	4050e0 <_vfiprintf_r+0xe8>
  405686:	f818 2b01 	ldrb.w	r2, [r8], #1
  40568a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40568e:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  405692:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405696:	2909      	cmp	r1, #9
  405698:	d9f5      	bls.n	405686 <_vfiprintf_r+0x68e>
  40569a:	e521      	b.n	4050e0 <_vfiprintf_r+0xe8>
  40569c:	f043 0320 	orr.w	r3, r3, #32
  4056a0:	f898 2000 	ldrb.w	r2, [r8]
  4056a4:	e51a      	b.n	4050dc <_vfiprintf_r+0xe4>
  4056a6:	9608      	str	r6, [sp, #32]
  4056a8:	2800      	cmp	r0, #0
  4056aa:	f040 82db 	bne.w	405c64 <_vfiprintf_r+0xc6c>
  4056ae:	2a00      	cmp	r2, #0
  4056b0:	f000 80e7 	beq.w	405882 <_vfiprintf_r+0x88a>
  4056b4:	2101      	movs	r1, #1
  4056b6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4056ba:	f04f 0200 	mov.w	r2, #0
  4056be:	9101      	str	r1, [sp, #4]
  4056c0:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4056c4:	9105      	str	r1, [sp, #20]
  4056c6:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4056ca:	e77b      	b.n	4055c4 <_vfiprintf_r+0x5cc>
  4056cc:	9a07      	ldr	r2, [sp, #28]
  4056ce:	6813      	ldr	r3, [r2, #0]
  4056d0:	3204      	adds	r2, #4
  4056d2:	9207      	str	r2, [sp, #28]
  4056d4:	9a03      	ldr	r2, [sp, #12]
  4056d6:	601a      	str	r2, [r3, #0]
  4056d8:	e4cb      	b.n	405072 <_vfiprintf_r+0x7a>
  4056da:	aa0f      	add	r2, sp, #60	; 0x3c
  4056dc:	9904      	ldr	r1, [sp, #16]
  4056de:	4620      	mov	r0, r4
  4056e0:	f7ff fc4a 	bl	404f78 <__sprint_r.part.0>
  4056e4:	2800      	cmp	r0, #0
  4056e6:	f040 8139 	bne.w	40595c <_vfiprintf_r+0x964>
  4056ea:	9910      	ldr	r1, [sp, #64]	; 0x40
  4056ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4056ee:	f101 0c01 	add.w	ip, r1, #1
  4056f2:	46ce      	mov	lr, r9
  4056f4:	e5ff      	b.n	4052f6 <_vfiprintf_r+0x2fe>
  4056f6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4056f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4056fa:	1c48      	adds	r0, r1, #1
  4056fc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405700:	2d00      	cmp	r5, #0
  405702:	f43f ae22 	beq.w	40534a <_vfiprintf_r+0x352>
  405706:	3201      	adds	r2, #1
  405708:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  40570c:	2101      	movs	r1, #1
  40570e:	2807      	cmp	r0, #7
  405710:	9211      	str	r2, [sp, #68]	; 0x44
  405712:	9010      	str	r0, [sp, #64]	; 0x40
  405714:	f8ca 5000 	str.w	r5, [sl]
  405718:	f8ca 1004 	str.w	r1, [sl, #4]
  40571c:	f340 8108 	ble.w	405930 <_vfiprintf_r+0x938>
  405720:	2a00      	cmp	r2, #0
  405722:	f040 81bc 	bne.w	405a9e <_vfiprintf_r+0xaa6>
  405726:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405728:	2b00      	cmp	r3, #0
  40572a:	f43f ae1f 	beq.w	40536c <_vfiprintf_r+0x374>
  40572e:	ab0e      	add	r3, sp, #56	; 0x38
  405730:	2202      	movs	r2, #2
  405732:	4608      	mov	r0, r1
  405734:	931c      	str	r3, [sp, #112]	; 0x70
  405736:	921d      	str	r2, [sp, #116]	; 0x74
  405738:	46ca      	mov	sl, r9
  40573a:	4601      	mov	r1, r0
  40573c:	f10a 0a08 	add.w	sl, sl, #8
  405740:	3001      	adds	r0, #1
  405742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405744:	2b80      	cmp	r3, #128	; 0x80
  405746:	f43f ae19 	beq.w	40537c <_vfiprintf_r+0x384>
  40574a:	9b05      	ldr	r3, [sp, #20]
  40574c:	1ae4      	subs	r4, r4, r3
  40574e:	2c00      	cmp	r4, #0
  405750:	dd2e      	ble.n	4057b0 <_vfiprintf_r+0x7b8>
  405752:	2c10      	cmp	r4, #16
  405754:	4db3      	ldr	r5, [pc, #716]	; (405a24 <_vfiprintf_r+0xa2c>)
  405756:	dd1e      	ble.n	405796 <_vfiprintf_r+0x79e>
  405758:	46d6      	mov	lr, sl
  40575a:	2610      	movs	r6, #16
  40575c:	9f06      	ldr	r7, [sp, #24]
  40575e:	f8dd a010 	ldr.w	sl, [sp, #16]
  405762:	e006      	b.n	405772 <_vfiprintf_r+0x77a>
  405764:	1c88      	adds	r0, r1, #2
  405766:	f10e 0e08 	add.w	lr, lr, #8
  40576a:	4619      	mov	r1, r3
  40576c:	3c10      	subs	r4, #16
  40576e:	2c10      	cmp	r4, #16
  405770:	dd10      	ble.n	405794 <_vfiprintf_r+0x79c>
  405772:	1c4b      	adds	r3, r1, #1
  405774:	3210      	adds	r2, #16
  405776:	2b07      	cmp	r3, #7
  405778:	9211      	str	r2, [sp, #68]	; 0x44
  40577a:	e88e 0060 	stmia.w	lr, {r5, r6}
  40577e:	9310      	str	r3, [sp, #64]	; 0x40
  405780:	ddf0      	ble.n	405764 <_vfiprintf_r+0x76c>
  405782:	2a00      	cmp	r2, #0
  405784:	d165      	bne.n	405852 <_vfiprintf_r+0x85a>
  405786:	3c10      	subs	r4, #16
  405788:	2c10      	cmp	r4, #16
  40578a:	f04f 0001 	mov.w	r0, #1
  40578e:	4611      	mov	r1, r2
  405790:	46ce      	mov	lr, r9
  405792:	dcee      	bgt.n	405772 <_vfiprintf_r+0x77a>
  405794:	46f2      	mov	sl, lr
  405796:	4422      	add	r2, r4
  405798:	2807      	cmp	r0, #7
  40579a:	9211      	str	r2, [sp, #68]	; 0x44
  40579c:	f8ca 5000 	str.w	r5, [sl]
  4057a0:	f8ca 4004 	str.w	r4, [sl, #4]
  4057a4:	9010      	str	r0, [sp, #64]	; 0x40
  4057a6:	f300 8085 	bgt.w	4058b4 <_vfiprintf_r+0x8bc>
  4057aa:	f10a 0a08 	add.w	sl, sl, #8
  4057ae:	3001      	adds	r0, #1
  4057b0:	9905      	ldr	r1, [sp, #20]
  4057b2:	f8ca b000 	str.w	fp, [sl]
  4057b6:	440a      	add	r2, r1
  4057b8:	2807      	cmp	r0, #7
  4057ba:	9211      	str	r2, [sp, #68]	; 0x44
  4057bc:	f8ca 1004 	str.w	r1, [sl, #4]
  4057c0:	9010      	str	r0, [sp, #64]	; 0x40
  4057c2:	f340 8082 	ble.w	4058ca <_vfiprintf_r+0x8d2>
  4057c6:	2a00      	cmp	r2, #0
  4057c8:	f040 8118 	bne.w	4059fc <_vfiprintf_r+0xa04>
  4057cc:	9b02      	ldr	r3, [sp, #8]
  4057ce:	9210      	str	r2, [sp, #64]	; 0x40
  4057d0:	0758      	lsls	r0, r3, #29
  4057d2:	d535      	bpl.n	405840 <_vfiprintf_r+0x848>
  4057d4:	9b08      	ldr	r3, [sp, #32]
  4057d6:	9901      	ldr	r1, [sp, #4]
  4057d8:	1a5c      	subs	r4, r3, r1
  4057da:	2c00      	cmp	r4, #0
  4057dc:	f340 80e7 	ble.w	4059ae <_vfiprintf_r+0x9b6>
  4057e0:	46ca      	mov	sl, r9
  4057e2:	2c10      	cmp	r4, #16
  4057e4:	f340 8218 	ble.w	405c18 <_vfiprintf_r+0xc20>
  4057e8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4057ea:	4e8f      	ldr	r6, [pc, #572]	; (405a28 <_vfiprintf_r+0xa30>)
  4057ec:	9f06      	ldr	r7, [sp, #24]
  4057ee:	f8dd b010 	ldr.w	fp, [sp, #16]
  4057f2:	2510      	movs	r5, #16
  4057f4:	e006      	b.n	405804 <_vfiprintf_r+0x80c>
  4057f6:	1c88      	adds	r0, r1, #2
  4057f8:	f10a 0a08 	add.w	sl, sl, #8
  4057fc:	4619      	mov	r1, r3
  4057fe:	3c10      	subs	r4, #16
  405800:	2c10      	cmp	r4, #16
  405802:	dd11      	ble.n	405828 <_vfiprintf_r+0x830>
  405804:	1c4b      	adds	r3, r1, #1
  405806:	3210      	adds	r2, #16
  405808:	2b07      	cmp	r3, #7
  40580a:	9211      	str	r2, [sp, #68]	; 0x44
  40580c:	f8ca 6000 	str.w	r6, [sl]
  405810:	f8ca 5004 	str.w	r5, [sl, #4]
  405814:	9310      	str	r3, [sp, #64]	; 0x40
  405816:	ddee      	ble.n	4057f6 <_vfiprintf_r+0x7fe>
  405818:	bb42      	cbnz	r2, 40586c <_vfiprintf_r+0x874>
  40581a:	3c10      	subs	r4, #16
  40581c:	2c10      	cmp	r4, #16
  40581e:	f04f 0001 	mov.w	r0, #1
  405822:	4611      	mov	r1, r2
  405824:	46ca      	mov	sl, r9
  405826:	dced      	bgt.n	405804 <_vfiprintf_r+0x80c>
  405828:	4422      	add	r2, r4
  40582a:	2807      	cmp	r0, #7
  40582c:	9211      	str	r2, [sp, #68]	; 0x44
  40582e:	f8ca 6000 	str.w	r6, [sl]
  405832:	f8ca 4004 	str.w	r4, [sl, #4]
  405836:	9010      	str	r0, [sp, #64]	; 0x40
  405838:	dd51      	ble.n	4058de <_vfiprintf_r+0x8e6>
  40583a:	2a00      	cmp	r2, #0
  40583c:	f040 819b 	bne.w	405b76 <_vfiprintf_r+0xb7e>
  405840:	9b03      	ldr	r3, [sp, #12]
  405842:	9a08      	ldr	r2, [sp, #32]
  405844:	9901      	ldr	r1, [sp, #4]
  405846:	428a      	cmp	r2, r1
  405848:	bfac      	ite	ge
  40584a:	189b      	addge	r3, r3, r2
  40584c:	185b      	addlt	r3, r3, r1
  40584e:	9303      	str	r3, [sp, #12]
  405850:	e04e      	b.n	4058f0 <_vfiprintf_r+0x8f8>
  405852:	aa0f      	add	r2, sp, #60	; 0x3c
  405854:	4651      	mov	r1, sl
  405856:	4638      	mov	r0, r7
  405858:	f7ff fb8e 	bl	404f78 <__sprint_r.part.0>
  40585c:	2800      	cmp	r0, #0
  40585e:	f040 813f 	bne.w	405ae0 <_vfiprintf_r+0xae8>
  405862:	9910      	ldr	r1, [sp, #64]	; 0x40
  405864:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405866:	1c48      	adds	r0, r1, #1
  405868:	46ce      	mov	lr, r9
  40586a:	e77f      	b.n	40576c <_vfiprintf_r+0x774>
  40586c:	aa0f      	add	r2, sp, #60	; 0x3c
  40586e:	4659      	mov	r1, fp
  405870:	4638      	mov	r0, r7
  405872:	f7ff fb81 	bl	404f78 <__sprint_r.part.0>
  405876:	b960      	cbnz	r0, 405892 <_vfiprintf_r+0x89a>
  405878:	9910      	ldr	r1, [sp, #64]	; 0x40
  40587a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40587c:	1c48      	adds	r0, r1, #1
  40587e:	46ca      	mov	sl, r9
  405880:	e7bd      	b.n	4057fe <_vfiprintf_r+0x806>
  405882:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405884:	f8dd b010 	ldr.w	fp, [sp, #16]
  405888:	2b00      	cmp	r3, #0
  40588a:	f040 81d4 	bne.w	405c36 <_vfiprintf_r+0xc3e>
  40588e:	2300      	movs	r3, #0
  405890:	9310      	str	r3, [sp, #64]	; 0x40
  405892:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405896:	f013 0f01 	tst.w	r3, #1
  40589a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40589e:	d102      	bne.n	4058a6 <_vfiprintf_r+0x8ae>
  4058a0:	059a      	lsls	r2, r3, #22
  4058a2:	f140 80de 	bpl.w	405a62 <_vfiprintf_r+0xa6a>
  4058a6:	065b      	lsls	r3, r3, #25
  4058a8:	f53f acb2 	bmi.w	405210 <_vfiprintf_r+0x218>
  4058ac:	9803      	ldr	r0, [sp, #12]
  4058ae:	b02d      	add	sp, #180	; 0xb4
  4058b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4058b4:	2a00      	cmp	r2, #0
  4058b6:	f040 8106 	bne.w	405ac6 <_vfiprintf_r+0xace>
  4058ba:	9a05      	ldr	r2, [sp, #20]
  4058bc:	921d      	str	r2, [sp, #116]	; 0x74
  4058be:	2301      	movs	r3, #1
  4058c0:	9211      	str	r2, [sp, #68]	; 0x44
  4058c2:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4058c6:	9310      	str	r3, [sp, #64]	; 0x40
  4058c8:	46ca      	mov	sl, r9
  4058ca:	f10a 0a08 	add.w	sl, sl, #8
  4058ce:	9b02      	ldr	r3, [sp, #8]
  4058d0:	0759      	lsls	r1, r3, #29
  4058d2:	d504      	bpl.n	4058de <_vfiprintf_r+0x8e6>
  4058d4:	9b08      	ldr	r3, [sp, #32]
  4058d6:	9901      	ldr	r1, [sp, #4]
  4058d8:	1a5c      	subs	r4, r3, r1
  4058da:	2c00      	cmp	r4, #0
  4058dc:	dc81      	bgt.n	4057e2 <_vfiprintf_r+0x7ea>
  4058de:	9b03      	ldr	r3, [sp, #12]
  4058e0:	9908      	ldr	r1, [sp, #32]
  4058e2:	9801      	ldr	r0, [sp, #4]
  4058e4:	4281      	cmp	r1, r0
  4058e6:	bfac      	ite	ge
  4058e8:	185b      	addge	r3, r3, r1
  4058ea:	181b      	addlt	r3, r3, r0
  4058ec:	9303      	str	r3, [sp, #12]
  4058ee:	bb72      	cbnz	r2, 40594e <_vfiprintf_r+0x956>
  4058f0:	2300      	movs	r3, #0
  4058f2:	9310      	str	r3, [sp, #64]	; 0x40
  4058f4:	46ca      	mov	sl, r9
  4058f6:	f7ff bbbc 	b.w	405072 <_vfiprintf_r+0x7a>
  4058fa:	aa0f      	add	r2, sp, #60	; 0x3c
  4058fc:	9904      	ldr	r1, [sp, #16]
  4058fe:	4620      	mov	r0, r4
  405900:	f7ff fb3a 	bl	404f78 <__sprint_r.part.0>
  405904:	bb50      	cbnz	r0, 40595c <_vfiprintf_r+0x964>
  405906:	9910      	ldr	r1, [sp, #64]	; 0x40
  405908:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40590a:	f101 0e01 	add.w	lr, r1, #1
  40590e:	46cc      	mov	ip, r9
  405910:	e548      	b.n	4053a4 <_vfiprintf_r+0x3ac>
  405912:	2a00      	cmp	r2, #0
  405914:	f040 8140 	bne.w	405b98 <_vfiprintf_r+0xba0>
  405918:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  40591c:	2900      	cmp	r1, #0
  40591e:	f000 811b 	beq.w	405b58 <_vfiprintf_r+0xb60>
  405922:	2201      	movs	r2, #1
  405924:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  405928:	4610      	mov	r0, r2
  40592a:	921d      	str	r2, [sp, #116]	; 0x74
  40592c:	911c      	str	r1, [sp, #112]	; 0x70
  40592e:	46ca      	mov	sl, r9
  405930:	4601      	mov	r1, r0
  405932:	f10a 0a08 	add.w	sl, sl, #8
  405936:	3001      	adds	r0, #1
  405938:	e507      	b.n	40534a <_vfiprintf_r+0x352>
  40593a:	9b02      	ldr	r3, [sp, #8]
  40593c:	2a01      	cmp	r2, #1
  40593e:	f000 8098 	beq.w	405a72 <_vfiprintf_r+0xa7a>
  405942:	2a02      	cmp	r2, #2
  405944:	d10d      	bne.n	405962 <_vfiprintf_r+0x96a>
  405946:	9302      	str	r3, [sp, #8]
  405948:	2600      	movs	r6, #0
  40594a:	2700      	movs	r7, #0
  40594c:	e5b0      	b.n	4054b0 <_vfiprintf_r+0x4b8>
  40594e:	aa0f      	add	r2, sp, #60	; 0x3c
  405950:	9904      	ldr	r1, [sp, #16]
  405952:	9806      	ldr	r0, [sp, #24]
  405954:	f7ff fb10 	bl	404f78 <__sprint_r.part.0>
  405958:	2800      	cmp	r0, #0
  40595a:	d0c9      	beq.n	4058f0 <_vfiprintf_r+0x8f8>
  40595c:	f8dd b010 	ldr.w	fp, [sp, #16]
  405960:	e797      	b.n	405892 <_vfiprintf_r+0x89a>
  405962:	9302      	str	r3, [sp, #8]
  405964:	2600      	movs	r6, #0
  405966:	2700      	movs	r7, #0
  405968:	4649      	mov	r1, r9
  40596a:	e000      	b.n	40596e <_vfiprintf_r+0x976>
  40596c:	4659      	mov	r1, fp
  40596e:	08f2      	lsrs	r2, r6, #3
  405970:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  405974:	08f8      	lsrs	r0, r7, #3
  405976:	f006 0307 	and.w	r3, r6, #7
  40597a:	4607      	mov	r7, r0
  40597c:	4616      	mov	r6, r2
  40597e:	3330      	adds	r3, #48	; 0x30
  405980:	ea56 0207 	orrs.w	r2, r6, r7
  405984:	f801 3c01 	strb.w	r3, [r1, #-1]
  405988:	f101 3bff 	add.w	fp, r1, #4294967295
  40598c:	d1ee      	bne.n	40596c <_vfiprintf_r+0x974>
  40598e:	9a02      	ldr	r2, [sp, #8]
  405990:	07d6      	lsls	r6, r2, #31
  405992:	f57f ad9d 	bpl.w	4054d0 <_vfiprintf_r+0x4d8>
  405996:	2b30      	cmp	r3, #48	; 0x30
  405998:	f43f ad9a 	beq.w	4054d0 <_vfiprintf_r+0x4d8>
  40599c:	3902      	subs	r1, #2
  40599e:	2330      	movs	r3, #48	; 0x30
  4059a0:	f80b 3c01 	strb.w	r3, [fp, #-1]
  4059a4:	eba9 0301 	sub.w	r3, r9, r1
  4059a8:	9305      	str	r3, [sp, #20]
  4059aa:	468b      	mov	fp, r1
  4059ac:	e476      	b.n	40529c <_vfiprintf_r+0x2a4>
  4059ae:	9b03      	ldr	r3, [sp, #12]
  4059b0:	9a08      	ldr	r2, [sp, #32]
  4059b2:	428a      	cmp	r2, r1
  4059b4:	bfac      	ite	ge
  4059b6:	189b      	addge	r3, r3, r2
  4059b8:	185b      	addlt	r3, r3, r1
  4059ba:	9303      	str	r3, [sp, #12]
  4059bc:	e798      	b.n	4058f0 <_vfiprintf_r+0x8f8>
  4059be:	2202      	movs	r2, #2
  4059c0:	e44d      	b.n	40525e <_vfiprintf_r+0x266>
  4059c2:	2f00      	cmp	r7, #0
  4059c4:	bf08      	it	eq
  4059c6:	2e0a      	cmpeq	r6, #10
  4059c8:	d352      	bcc.n	405a70 <_vfiprintf_r+0xa78>
  4059ca:	46cb      	mov	fp, r9
  4059cc:	4630      	mov	r0, r6
  4059ce:	4639      	mov	r1, r7
  4059d0:	220a      	movs	r2, #10
  4059d2:	2300      	movs	r3, #0
  4059d4:	f003 f886 	bl	408ae4 <__aeabi_uldivmod>
  4059d8:	3230      	adds	r2, #48	; 0x30
  4059da:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4059de:	4630      	mov	r0, r6
  4059e0:	4639      	mov	r1, r7
  4059e2:	2300      	movs	r3, #0
  4059e4:	220a      	movs	r2, #10
  4059e6:	f003 f87d 	bl	408ae4 <__aeabi_uldivmod>
  4059ea:	4606      	mov	r6, r0
  4059ec:	460f      	mov	r7, r1
  4059ee:	ea56 0307 	orrs.w	r3, r6, r7
  4059f2:	d1eb      	bne.n	4059cc <_vfiprintf_r+0x9d4>
  4059f4:	e56c      	b.n	4054d0 <_vfiprintf_r+0x4d8>
  4059f6:	9405      	str	r4, [sp, #20]
  4059f8:	46cb      	mov	fp, r9
  4059fa:	e44f      	b.n	40529c <_vfiprintf_r+0x2a4>
  4059fc:	aa0f      	add	r2, sp, #60	; 0x3c
  4059fe:	9904      	ldr	r1, [sp, #16]
  405a00:	9806      	ldr	r0, [sp, #24]
  405a02:	f7ff fab9 	bl	404f78 <__sprint_r.part.0>
  405a06:	2800      	cmp	r0, #0
  405a08:	d1a8      	bne.n	40595c <_vfiprintf_r+0x964>
  405a0a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405a0c:	46ca      	mov	sl, r9
  405a0e:	e75e      	b.n	4058ce <_vfiprintf_r+0x8d6>
  405a10:	aa0f      	add	r2, sp, #60	; 0x3c
  405a12:	9904      	ldr	r1, [sp, #16]
  405a14:	9806      	ldr	r0, [sp, #24]
  405a16:	f7ff faaf 	bl	404f78 <__sprint_r.part.0>
  405a1a:	2800      	cmp	r0, #0
  405a1c:	d19e      	bne.n	40595c <_vfiprintf_r+0x964>
  405a1e:	46ca      	mov	sl, r9
  405a20:	f7ff bbc0 	b.w	4051a4 <_vfiprintf_r+0x1ac>
  405a24:	00409acc 	.word	0x00409acc
  405a28:	00409abc 	.word	0x00409abc
  405a2c:	3104      	adds	r1, #4
  405a2e:	6816      	ldr	r6, [r2, #0]
  405a30:	9107      	str	r1, [sp, #28]
  405a32:	2201      	movs	r2, #1
  405a34:	2700      	movs	r7, #0
  405a36:	e412      	b.n	40525e <_vfiprintf_r+0x266>
  405a38:	9807      	ldr	r0, [sp, #28]
  405a3a:	4601      	mov	r1, r0
  405a3c:	3104      	adds	r1, #4
  405a3e:	6806      	ldr	r6, [r0, #0]
  405a40:	9107      	str	r1, [sp, #28]
  405a42:	2700      	movs	r7, #0
  405a44:	e40b      	b.n	40525e <_vfiprintf_r+0x266>
  405a46:	680e      	ldr	r6, [r1, #0]
  405a48:	3104      	adds	r1, #4
  405a4a:	9107      	str	r1, [sp, #28]
  405a4c:	2700      	movs	r7, #0
  405a4e:	e591      	b.n	405574 <_vfiprintf_r+0x57c>
  405a50:	9907      	ldr	r1, [sp, #28]
  405a52:	680e      	ldr	r6, [r1, #0]
  405a54:	460a      	mov	r2, r1
  405a56:	17f7      	asrs	r7, r6, #31
  405a58:	3204      	adds	r2, #4
  405a5a:	9207      	str	r2, [sp, #28]
  405a5c:	4630      	mov	r0, r6
  405a5e:	4639      	mov	r1, r7
  405a60:	e50f      	b.n	405482 <_vfiprintf_r+0x48a>
  405a62:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405a66:	f001 fe4d 	bl	407704 <__retarget_lock_release_recursive>
  405a6a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405a6e:	e71a      	b.n	4058a6 <_vfiprintf_r+0x8ae>
  405a70:	9b02      	ldr	r3, [sp, #8]
  405a72:	9302      	str	r3, [sp, #8]
  405a74:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  405a78:	3630      	adds	r6, #48	; 0x30
  405a7a:	2301      	movs	r3, #1
  405a7c:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  405a80:	9305      	str	r3, [sp, #20]
  405a82:	e40b      	b.n	40529c <_vfiprintf_r+0x2a4>
  405a84:	aa0f      	add	r2, sp, #60	; 0x3c
  405a86:	9904      	ldr	r1, [sp, #16]
  405a88:	9806      	ldr	r0, [sp, #24]
  405a8a:	f7ff fa75 	bl	404f78 <__sprint_r.part.0>
  405a8e:	2800      	cmp	r0, #0
  405a90:	f47f af64 	bne.w	40595c <_vfiprintf_r+0x964>
  405a94:	9910      	ldr	r1, [sp, #64]	; 0x40
  405a96:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405a98:	1c48      	adds	r0, r1, #1
  405a9a:	46ca      	mov	sl, r9
  405a9c:	e651      	b.n	405742 <_vfiprintf_r+0x74a>
  405a9e:	aa0f      	add	r2, sp, #60	; 0x3c
  405aa0:	9904      	ldr	r1, [sp, #16]
  405aa2:	9806      	ldr	r0, [sp, #24]
  405aa4:	f7ff fa68 	bl	404f78 <__sprint_r.part.0>
  405aa8:	2800      	cmp	r0, #0
  405aaa:	f47f af57 	bne.w	40595c <_vfiprintf_r+0x964>
  405aae:	9910      	ldr	r1, [sp, #64]	; 0x40
  405ab0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405ab2:	1c48      	adds	r0, r1, #1
  405ab4:	46ca      	mov	sl, r9
  405ab6:	e448      	b.n	40534a <_vfiprintf_r+0x352>
  405ab8:	2a00      	cmp	r2, #0
  405aba:	f040 8091 	bne.w	405be0 <_vfiprintf_r+0xbe8>
  405abe:	2001      	movs	r0, #1
  405ac0:	4611      	mov	r1, r2
  405ac2:	46ca      	mov	sl, r9
  405ac4:	e641      	b.n	40574a <_vfiprintf_r+0x752>
  405ac6:	aa0f      	add	r2, sp, #60	; 0x3c
  405ac8:	9904      	ldr	r1, [sp, #16]
  405aca:	9806      	ldr	r0, [sp, #24]
  405acc:	f7ff fa54 	bl	404f78 <__sprint_r.part.0>
  405ad0:	2800      	cmp	r0, #0
  405ad2:	f47f af43 	bne.w	40595c <_vfiprintf_r+0x964>
  405ad6:	9810      	ldr	r0, [sp, #64]	; 0x40
  405ad8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405ada:	3001      	adds	r0, #1
  405adc:	46ca      	mov	sl, r9
  405ade:	e667      	b.n	4057b0 <_vfiprintf_r+0x7b8>
  405ae0:	46d3      	mov	fp, sl
  405ae2:	e6d6      	b.n	405892 <_vfiprintf_r+0x89a>
  405ae4:	9e07      	ldr	r6, [sp, #28]
  405ae6:	3607      	adds	r6, #7
  405ae8:	f026 0207 	bic.w	r2, r6, #7
  405aec:	f102 0108 	add.w	r1, r2, #8
  405af0:	e9d2 6700 	ldrd	r6, r7, [r2]
  405af4:	9107      	str	r1, [sp, #28]
  405af6:	2201      	movs	r2, #1
  405af8:	f7ff bbb1 	b.w	40525e <_vfiprintf_r+0x266>
  405afc:	9e07      	ldr	r6, [sp, #28]
  405afe:	3607      	adds	r6, #7
  405b00:	f026 0607 	bic.w	r6, r6, #7
  405b04:	e9d6 0100 	ldrd	r0, r1, [r6]
  405b08:	f106 0208 	add.w	r2, r6, #8
  405b0c:	9207      	str	r2, [sp, #28]
  405b0e:	4606      	mov	r6, r0
  405b10:	460f      	mov	r7, r1
  405b12:	e4b6      	b.n	405482 <_vfiprintf_r+0x48a>
  405b14:	9e07      	ldr	r6, [sp, #28]
  405b16:	3607      	adds	r6, #7
  405b18:	f026 0207 	bic.w	r2, r6, #7
  405b1c:	f102 0108 	add.w	r1, r2, #8
  405b20:	e9d2 6700 	ldrd	r6, r7, [r2]
  405b24:	9107      	str	r1, [sp, #28]
  405b26:	2200      	movs	r2, #0
  405b28:	f7ff bb99 	b.w	40525e <_vfiprintf_r+0x266>
  405b2c:	9e07      	ldr	r6, [sp, #28]
  405b2e:	3607      	adds	r6, #7
  405b30:	f026 0107 	bic.w	r1, r6, #7
  405b34:	f101 0008 	add.w	r0, r1, #8
  405b38:	9007      	str	r0, [sp, #28]
  405b3a:	e9d1 6700 	ldrd	r6, r7, [r1]
  405b3e:	e519      	b.n	405574 <_vfiprintf_r+0x57c>
  405b40:	46cb      	mov	fp, r9
  405b42:	f7ff bbab 	b.w	40529c <_vfiprintf_r+0x2a4>
  405b46:	252d      	movs	r5, #45	; 0x2d
  405b48:	4276      	negs	r6, r6
  405b4a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  405b4e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405b52:	2201      	movs	r2, #1
  405b54:	f7ff bb88 	b.w	405268 <_vfiprintf_r+0x270>
  405b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405b5a:	b9b3      	cbnz	r3, 405b8a <_vfiprintf_r+0xb92>
  405b5c:	4611      	mov	r1, r2
  405b5e:	2001      	movs	r0, #1
  405b60:	46ca      	mov	sl, r9
  405b62:	e5f2      	b.n	40574a <_vfiprintf_r+0x752>
  405b64:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405b68:	f001 fdcc 	bl	407704 <__retarget_lock_release_recursive>
  405b6c:	f04f 33ff 	mov.w	r3, #4294967295
  405b70:	9303      	str	r3, [sp, #12]
  405b72:	f7ff bb50 	b.w	405216 <_vfiprintf_r+0x21e>
  405b76:	aa0f      	add	r2, sp, #60	; 0x3c
  405b78:	9904      	ldr	r1, [sp, #16]
  405b7a:	9806      	ldr	r0, [sp, #24]
  405b7c:	f7ff f9fc 	bl	404f78 <__sprint_r.part.0>
  405b80:	2800      	cmp	r0, #0
  405b82:	f47f aeeb 	bne.w	40595c <_vfiprintf_r+0x964>
  405b86:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405b88:	e6a9      	b.n	4058de <_vfiprintf_r+0x8e6>
  405b8a:	ab0e      	add	r3, sp, #56	; 0x38
  405b8c:	2202      	movs	r2, #2
  405b8e:	931c      	str	r3, [sp, #112]	; 0x70
  405b90:	921d      	str	r2, [sp, #116]	; 0x74
  405b92:	2001      	movs	r0, #1
  405b94:	46ca      	mov	sl, r9
  405b96:	e5d0      	b.n	40573a <_vfiprintf_r+0x742>
  405b98:	aa0f      	add	r2, sp, #60	; 0x3c
  405b9a:	9904      	ldr	r1, [sp, #16]
  405b9c:	9806      	ldr	r0, [sp, #24]
  405b9e:	f7ff f9eb 	bl	404f78 <__sprint_r.part.0>
  405ba2:	2800      	cmp	r0, #0
  405ba4:	f47f aeda 	bne.w	40595c <_vfiprintf_r+0x964>
  405ba8:	9910      	ldr	r1, [sp, #64]	; 0x40
  405baa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405bac:	1c48      	adds	r0, r1, #1
  405bae:	46ca      	mov	sl, r9
  405bb0:	e5a4      	b.n	4056fc <_vfiprintf_r+0x704>
  405bb2:	9a07      	ldr	r2, [sp, #28]
  405bb4:	9903      	ldr	r1, [sp, #12]
  405bb6:	6813      	ldr	r3, [r2, #0]
  405bb8:	17cd      	asrs	r5, r1, #31
  405bba:	4608      	mov	r0, r1
  405bbc:	3204      	adds	r2, #4
  405bbe:	4629      	mov	r1, r5
  405bc0:	9207      	str	r2, [sp, #28]
  405bc2:	e9c3 0100 	strd	r0, r1, [r3]
  405bc6:	f7ff ba54 	b.w	405072 <_vfiprintf_r+0x7a>
  405bca:	4658      	mov	r0, fp
  405bcc:	9607      	str	r6, [sp, #28]
  405bce:	9302      	str	r3, [sp, #8]
  405bd0:	f002 fc76 	bl	4084c0 <strlen>
  405bd4:	2400      	movs	r4, #0
  405bd6:	9005      	str	r0, [sp, #20]
  405bd8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405bdc:	f7ff bb5e 	b.w	40529c <_vfiprintf_r+0x2a4>
  405be0:	aa0f      	add	r2, sp, #60	; 0x3c
  405be2:	9904      	ldr	r1, [sp, #16]
  405be4:	9806      	ldr	r0, [sp, #24]
  405be6:	f7ff f9c7 	bl	404f78 <__sprint_r.part.0>
  405bea:	2800      	cmp	r0, #0
  405bec:	f47f aeb6 	bne.w	40595c <_vfiprintf_r+0x964>
  405bf0:	9910      	ldr	r1, [sp, #64]	; 0x40
  405bf2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405bf4:	1c48      	adds	r0, r1, #1
  405bf6:	46ca      	mov	sl, r9
  405bf8:	e5a7      	b.n	40574a <_vfiprintf_r+0x752>
  405bfa:	9910      	ldr	r1, [sp, #64]	; 0x40
  405bfc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405bfe:	4e20      	ldr	r6, [pc, #128]	; (405c80 <_vfiprintf_r+0xc88>)
  405c00:	3101      	adds	r1, #1
  405c02:	f7ff bb90 	b.w	405326 <_vfiprintf_r+0x32e>
  405c06:	2c06      	cmp	r4, #6
  405c08:	bf28      	it	cs
  405c0a:	2406      	movcs	r4, #6
  405c0c:	9405      	str	r4, [sp, #20]
  405c0e:	9607      	str	r6, [sp, #28]
  405c10:	9401      	str	r4, [sp, #4]
  405c12:	f8df b070 	ldr.w	fp, [pc, #112]	; 405c84 <_vfiprintf_r+0xc8c>
  405c16:	e4d5      	b.n	4055c4 <_vfiprintf_r+0x5cc>
  405c18:	9810      	ldr	r0, [sp, #64]	; 0x40
  405c1a:	4e19      	ldr	r6, [pc, #100]	; (405c80 <_vfiprintf_r+0xc88>)
  405c1c:	3001      	adds	r0, #1
  405c1e:	e603      	b.n	405828 <_vfiprintf_r+0x830>
  405c20:	9405      	str	r4, [sp, #20]
  405c22:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405c26:	9607      	str	r6, [sp, #28]
  405c28:	9302      	str	r3, [sp, #8]
  405c2a:	4604      	mov	r4, r0
  405c2c:	f7ff bb36 	b.w	40529c <_vfiprintf_r+0x2a4>
  405c30:	4686      	mov	lr, r0
  405c32:	f7ff bbce 	b.w	4053d2 <_vfiprintf_r+0x3da>
  405c36:	9806      	ldr	r0, [sp, #24]
  405c38:	aa0f      	add	r2, sp, #60	; 0x3c
  405c3a:	4659      	mov	r1, fp
  405c3c:	f7ff f99c 	bl	404f78 <__sprint_r.part.0>
  405c40:	2800      	cmp	r0, #0
  405c42:	f43f ae24 	beq.w	40588e <_vfiprintf_r+0x896>
  405c46:	e624      	b.n	405892 <_vfiprintf_r+0x89a>
  405c48:	9907      	ldr	r1, [sp, #28]
  405c4a:	f898 2001 	ldrb.w	r2, [r8, #1]
  405c4e:	680c      	ldr	r4, [r1, #0]
  405c50:	3104      	adds	r1, #4
  405c52:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  405c56:	46b8      	mov	r8, r7
  405c58:	9107      	str	r1, [sp, #28]
  405c5a:	f7ff ba3f 	b.w	4050dc <_vfiprintf_r+0xe4>
  405c5e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405c62:	e43c      	b.n	4054de <_vfiprintf_r+0x4e6>
  405c64:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405c68:	e521      	b.n	4056ae <_vfiprintf_r+0x6b6>
  405c6a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405c6e:	f7ff bbf4 	b.w	40545a <_vfiprintf_r+0x462>
  405c72:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405c76:	e491      	b.n	40559c <_vfiprintf_r+0x5a4>
  405c78:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405c7c:	e469      	b.n	405552 <_vfiprintf_r+0x55a>
  405c7e:	bf00      	nop
  405c80:	00409abc 	.word	0x00409abc
  405c84:	00409a90 	.word	0x00409a90

00405c88 <__sbprintf>:
  405c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405c8c:	460c      	mov	r4, r1
  405c8e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  405c92:	8989      	ldrh	r1, [r1, #12]
  405c94:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405c96:	89e5      	ldrh	r5, [r4, #14]
  405c98:	9619      	str	r6, [sp, #100]	; 0x64
  405c9a:	f021 0102 	bic.w	r1, r1, #2
  405c9e:	4606      	mov	r6, r0
  405ca0:	69e0      	ldr	r0, [r4, #28]
  405ca2:	f8ad 100c 	strh.w	r1, [sp, #12]
  405ca6:	4617      	mov	r7, r2
  405ca8:	f44f 6180 	mov.w	r1, #1024	; 0x400
  405cac:	6a62      	ldr	r2, [r4, #36]	; 0x24
  405cae:	f8ad 500e 	strh.w	r5, [sp, #14]
  405cb2:	4698      	mov	r8, r3
  405cb4:	ad1a      	add	r5, sp, #104	; 0x68
  405cb6:	2300      	movs	r3, #0
  405cb8:	9007      	str	r0, [sp, #28]
  405cba:	a816      	add	r0, sp, #88	; 0x58
  405cbc:	9209      	str	r2, [sp, #36]	; 0x24
  405cbe:	9306      	str	r3, [sp, #24]
  405cc0:	9500      	str	r5, [sp, #0]
  405cc2:	9504      	str	r5, [sp, #16]
  405cc4:	9102      	str	r1, [sp, #8]
  405cc6:	9105      	str	r1, [sp, #20]
  405cc8:	f001 fd16 	bl	4076f8 <__retarget_lock_init_recursive>
  405ccc:	4643      	mov	r3, r8
  405cce:	463a      	mov	r2, r7
  405cd0:	4669      	mov	r1, sp
  405cd2:	4630      	mov	r0, r6
  405cd4:	f7ff f990 	bl	404ff8 <_vfiprintf_r>
  405cd8:	1e05      	subs	r5, r0, #0
  405cda:	db07      	blt.n	405cec <__sbprintf+0x64>
  405cdc:	4630      	mov	r0, r6
  405cde:	4669      	mov	r1, sp
  405ce0:	f001 f8e8 	bl	406eb4 <_fflush_r>
  405ce4:	2800      	cmp	r0, #0
  405ce6:	bf18      	it	ne
  405ce8:	f04f 35ff 	movne.w	r5, #4294967295
  405cec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405cf0:	065b      	lsls	r3, r3, #25
  405cf2:	d503      	bpl.n	405cfc <__sbprintf+0x74>
  405cf4:	89a3      	ldrh	r3, [r4, #12]
  405cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405cfa:	81a3      	strh	r3, [r4, #12]
  405cfc:	9816      	ldr	r0, [sp, #88]	; 0x58
  405cfe:	f001 fcfd 	bl	4076fc <__retarget_lock_close_recursive>
  405d02:	4628      	mov	r0, r5
  405d04:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  405d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00405d0c <__swsetup_r>:
  405d0c:	b538      	push	{r3, r4, r5, lr}
  405d0e:	4b30      	ldr	r3, [pc, #192]	; (405dd0 <__swsetup_r+0xc4>)
  405d10:	681b      	ldr	r3, [r3, #0]
  405d12:	4605      	mov	r5, r0
  405d14:	460c      	mov	r4, r1
  405d16:	b113      	cbz	r3, 405d1e <__swsetup_r+0x12>
  405d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  405d1a:	2a00      	cmp	r2, #0
  405d1c:	d038      	beq.n	405d90 <__swsetup_r+0x84>
  405d1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405d22:	b293      	uxth	r3, r2
  405d24:	0718      	lsls	r0, r3, #28
  405d26:	d50c      	bpl.n	405d42 <__swsetup_r+0x36>
  405d28:	6920      	ldr	r0, [r4, #16]
  405d2a:	b1a8      	cbz	r0, 405d58 <__swsetup_r+0x4c>
  405d2c:	f013 0201 	ands.w	r2, r3, #1
  405d30:	d01e      	beq.n	405d70 <__swsetup_r+0x64>
  405d32:	6963      	ldr	r3, [r4, #20]
  405d34:	2200      	movs	r2, #0
  405d36:	425b      	negs	r3, r3
  405d38:	61a3      	str	r3, [r4, #24]
  405d3a:	60a2      	str	r2, [r4, #8]
  405d3c:	b1f0      	cbz	r0, 405d7c <__swsetup_r+0x70>
  405d3e:	2000      	movs	r0, #0
  405d40:	bd38      	pop	{r3, r4, r5, pc}
  405d42:	06d9      	lsls	r1, r3, #27
  405d44:	d53c      	bpl.n	405dc0 <__swsetup_r+0xb4>
  405d46:	0758      	lsls	r0, r3, #29
  405d48:	d426      	bmi.n	405d98 <__swsetup_r+0x8c>
  405d4a:	6920      	ldr	r0, [r4, #16]
  405d4c:	f042 0308 	orr.w	r3, r2, #8
  405d50:	81a3      	strh	r3, [r4, #12]
  405d52:	b29b      	uxth	r3, r3
  405d54:	2800      	cmp	r0, #0
  405d56:	d1e9      	bne.n	405d2c <__swsetup_r+0x20>
  405d58:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405d5c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405d60:	d0e4      	beq.n	405d2c <__swsetup_r+0x20>
  405d62:	4628      	mov	r0, r5
  405d64:	4621      	mov	r1, r4
  405d66:	f001 fcfd 	bl	407764 <__smakebuf_r>
  405d6a:	89a3      	ldrh	r3, [r4, #12]
  405d6c:	6920      	ldr	r0, [r4, #16]
  405d6e:	e7dd      	b.n	405d2c <__swsetup_r+0x20>
  405d70:	0799      	lsls	r1, r3, #30
  405d72:	bf58      	it	pl
  405d74:	6962      	ldrpl	r2, [r4, #20]
  405d76:	60a2      	str	r2, [r4, #8]
  405d78:	2800      	cmp	r0, #0
  405d7a:	d1e0      	bne.n	405d3e <__swsetup_r+0x32>
  405d7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405d80:	061a      	lsls	r2, r3, #24
  405d82:	d5dd      	bpl.n	405d40 <__swsetup_r+0x34>
  405d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405d88:	81a3      	strh	r3, [r4, #12]
  405d8a:	f04f 30ff 	mov.w	r0, #4294967295
  405d8e:	bd38      	pop	{r3, r4, r5, pc}
  405d90:	4618      	mov	r0, r3
  405d92:	f001 f8e7 	bl	406f64 <__sinit>
  405d96:	e7c2      	b.n	405d1e <__swsetup_r+0x12>
  405d98:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405d9a:	b151      	cbz	r1, 405db2 <__swsetup_r+0xa6>
  405d9c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405da0:	4299      	cmp	r1, r3
  405da2:	d004      	beq.n	405dae <__swsetup_r+0xa2>
  405da4:	4628      	mov	r0, r5
  405da6:	f001 fa03 	bl	4071b0 <_free_r>
  405daa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405dae:	2300      	movs	r3, #0
  405db0:	6323      	str	r3, [r4, #48]	; 0x30
  405db2:	2300      	movs	r3, #0
  405db4:	6920      	ldr	r0, [r4, #16]
  405db6:	6063      	str	r3, [r4, #4]
  405db8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  405dbc:	6020      	str	r0, [r4, #0]
  405dbe:	e7c5      	b.n	405d4c <__swsetup_r+0x40>
  405dc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  405dc4:	2309      	movs	r3, #9
  405dc6:	602b      	str	r3, [r5, #0]
  405dc8:	f04f 30ff 	mov.w	r0, #4294967295
  405dcc:	81a2      	strh	r2, [r4, #12]
  405dce:	bd38      	pop	{r3, r4, r5, pc}
  405dd0:	20400040 	.word	0x20400040

00405dd4 <register_fini>:
  405dd4:	4b02      	ldr	r3, [pc, #8]	; (405de0 <register_fini+0xc>)
  405dd6:	b113      	cbz	r3, 405dde <register_fini+0xa>
  405dd8:	4802      	ldr	r0, [pc, #8]	; (405de4 <register_fini+0x10>)
  405dda:	f000 b805 	b.w	405de8 <atexit>
  405dde:	4770      	bx	lr
  405de0:	00000000 	.word	0x00000000
  405de4:	00406fd5 	.word	0x00406fd5

00405de8 <atexit>:
  405de8:	2300      	movs	r3, #0
  405dea:	4601      	mov	r1, r0
  405dec:	461a      	mov	r2, r3
  405dee:	4618      	mov	r0, r3
  405df0:	f002 bcf8 	b.w	4087e4 <__register_exitproc>

00405df4 <quorem>:
  405df4:	6902      	ldr	r2, [r0, #16]
  405df6:	690b      	ldr	r3, [r1, #16]
  405df8:	4293      	cmp	r3, r2
  405dfa:	f300 808d 	bgt.w	405f18 <quorem+0x124>
  405dfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405e02:	f103 38ff 	add.w	r8, r3, #4294967295
  405e06:	f101 0714 	add.w	r7, r1, #20
  405e0a:	f100 0b14 	add.w	fp, r0, #20
  405e0e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  405e12:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  405e16:	ea4f 0488 	mov.w	r4, r8, lsl #2
  405e1a:	b083      	sub	sp, #12
  405e1c:	3201      	adds	r2, #1
  405e1e:	fbb3 f9f2 	udiv	r9, r3, r2
  405e22:	eb0b 0304 	add.w	r3, fp, r4
  405e26:	9400      	str	r4, [sp, #0]
  405e28:	eb07 0a04 	add.w	sl, r7, r4
  405e2c:	9301      	str	r3, [sp, #4]
  405e2e:	f1b9 0f00 	cmp.w	r9, #0
  405e32:	d039      	beq.n	405ea8 <quorem+0xb4>
  405e34:	2500      	movs	r5, #0
  405e36:	462e      	mov	r6, r5
  405e38:	46bc      	mov	ip, r7
  405e3a:	46de      	mov	lr, fp
  405e3c:	f85c 4b04 	ldr.w	r4, [ip], #4
  405e40:	f8de 3000 	ldr.w	r3, [lr]
  405e44:	b2a2      	uxth	r2, r4
  405e46:	fb09 5502 	mla	r5, r9, r2, r5
  405e4a:	0c22      	lsrs	r2, r4, #16
  405e4c:	0c2c      	lsrs	r4, r5, #16
  405e4e:	fb09 4202 	mla	r2, r9, r2, r4
  405e52:	b2ad      	uxth	r5, r5
  405e54:	1b75      	subs	r5, r6, r5
  405e56:	b296      	uxth	r6, r2
  405e58:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  405e5c:	fa15 f383 	uxtah	r3, r5, r3
  405e60:	eb06 4623 	add.w	r6, r6, r3, asr #16
  405e64:	b29b      	uxth	r3, r3
  405e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  405e6a:	45e2      	cmp	sl, ip
  405e6c:	ea4f 4512 	mov.w	r5, r2, lsr #16
  405e70:	f84e 3b04 	str.w	r3, [lr], #4
  405e74:	ea4f 4626 	mov.w	r6, r6, asr #16
  405e78:	d2e0      	bcs.n	405e3c <quorem+0x48>
  405e7a:	9b00      	ldr	r3, [sp, #0]
  405e7c:	f85b 3003 	ldr.w	r3, [fp, r3]
  405e80:	b993      	cbnz	r3, 405ea8 <quorem+0xb4>
  405e82:	9c01      	ldr	r4, [sp, #4]
  405e84:	1f23      	subs	r3, r4, #4
  405e86:	459b      	cmp	fp, r3
  405e88:	d20c      	bcs.n	405ea4 <quorem+0xb0>
  405e8a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  405e8e:	b94b      	cbnz	r3, 405ea4 <quorem+0xb0>
  405e90:	f1a4 0308 	sub.w	r3, r4, #8
  405e94:	e002      	b.n	405e9c <quorem+0xa8>
  405e96:	681a      	ldr	r2, [r3, #0]
  405e98:	3b04      	subs	r3, #4
  405e9a:	b91a      	cbnz	r2, 405ea4 <quorem+0xb0>
  405e9c:	459b      	cmp	fp, r3
  405e9e:	f108 38ff 	add.w	r8, r8, #4294967295
  405ea2:	d3f8      	bcc.n	405e96 <quorem+0xa2>
  405ea4:	f8c0 8010 	str.w	r8, [r0, #16]
  405ea8:	4604      	mov	r4, r0
  405eaa:	f002 f80d 	bl	407ec8 <__mcmp>
  405eae:	2800      	cmp	r0, #0
  405eb0:	db2e      	blt.n	405f10 <quorem+0x11c>
  405eb2:	f109 0901 	add.w	r9, r9, #1
  405eb6:	465d      	mov	r5, fp
  405eb8:	2300      	movs	r3, #0
  405eba:	f857 1b04 	ldr.w	r1, [r7], #4
  405ebe:	6828      	ldr	r0, [r5, #0]
  405ec0:	b28a      	uxth	r2, r1
  405ec2:	1a9a      	subs	r2, r3, r2
  405ec4:	0c0b      	lsrs	r3, r1, #16
  405ec6:	fa12 f280 	uxtah	r2, r2, r0
  405eca:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  405ece:	eb03 4322 	add.w	r3, r3, r2, asr #16
  405ed2:	b292      	uxth	r2, r2
  405ed4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  405ed8:	45ba      	cmp	sl, r7
  405eda:	f845 2b04 	str.w	r2, [r5], #4
  405ede:	ea4f 4323 	mov.w	r3, r3, asr #16
  405ee2:	d2ea      	bcs.n	405eba <quorem+0xc6>
  405ee4:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  405ee8:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  405eec:	b982      	cbnz	r2, 405f10 <quorem+0x11c>
  405eee:	1f1a      	subs	r2, r3, #4
  405ef0:	4593      	cmp	fp, r2
  405ef2:	d20b      	bcs.n	405f0c <quorem+0x118>
  405ef4:	f853 2c04 	ldr.w	r2, [r3, #-4]
  405ef8:	b942      	cbnz	r2, 405f0c <quorem+0x118>
  405efa:	3b08      	subs	r3, #8
  405efc:	e002      	b.n	405f04 <quorem+0x110>
  405efe:	681a      	ldr	r2, [r3, #0]
  405f00:	3b04      	subs	r3, #4
  405f02:	b91a      	cbnz	r2, 405f0c <quorem+0x118>
  405f04:	459b      	cmp	fp, r3
  405f06:	f108 38ff 	add.w	r8, r8, #4294967295
  405f0a:	d3f8      	bcc.n	405efe <quorem+0x10a>
  405f0c:	f8c4 8010 	str.w	r8, [r4, #16]
  405f10:	4648      	mov	r0, r9
  405f12:	b003      	add	sp, #12
  405f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f18:	2000      	movs	r0, #0
  405f1a:	4770      	bx	lr
  405f1c:	0000      	movs	r0, r0
	...

00405f20 <_dtoa_r>:
  405f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405f24:	6c01      	ldr	r1, [r0, #64]	; 0x40
  405f26:	b09b      	sub	sp, #108	; 0x6c
  405f28:	4604      	mov	r4, r0
  405f2a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  405f2c:	4692      	mov	sl, r2
  405f2e:	469b      	mov	fp, r3
  405f30:	b141      	cbz	r1, 405f44 <_dtoa_r+0x24>
  405f32:	6c42      	ldr	r2, [r0, #68]	; 0x44
  405f34:	604a      	str	r2, [r1, #4]
  405f36:	2301      	movs	r3, #1
  405f38:	4093      	lsls	r3, r2
  405f3a:	608b      	str	r3, [r1, #8]
  405f3c:	f001 fdec 	bl	407b18 <_Bfree>
  405f40:	2300      	movs	r3, #0
  405f42:	6423      	str	r3, [r4, #64]	; 0x40
  405f44:	f1bb 0f00 	cmp.w	fp, #0
  405f48:	465d      	mov	r5, fp
  405f4a:	db35      	blt.n	405fb8 <_dtoa_r+0x98>
  405f4c:	2300      	movs	r3, #0
  405f4e:	6033      	str	r3, [r6, #0]
  405f50:	4b9d      	ldr	r3, [pc, #628]	; (4061c8 <_dtoa_r+0x2a8>)
  405f52:	43ab      	bics	r3, r5
  405f54:	d015      	beq.n	405f82 <_dtoa_r+0x62>
  405f56:	4650      	mov	r0, sl
  405f58:	4659      	mov	r1, fp
  405f5a:	2200      	movs	r2, #0
  405f5c:	2300      	movs	r3, #0
  405f5e:	f7fd f9bf 	bl	4032e0 <__aeabi_dcmpeq>
  405f62:	4680      	mov	r8, r0
  405f64:	2800      	cmp	r0, #0
  405f66:	d02d      	beq.n	405fc4 <_dtoa_r+0xa4>
  405f68:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405f6a:	2301      	movs	r3, #1
  405f6c:	6013      	str	r3, [r2, #0]
  405f6e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405f70:	2b00      	cmp	r3, #0
  405f72:	f000 80bd 	beq.w	4060f0 <_dtoa_r+0x1d0>
  405f76:	4895      	ldr	r0, [pc, #596]	; (4061cc <_dtoa_r+0x2ac>)
  405f78:	6018      	str	r0, [r3, #0]
  405f7a:	3801      	subs	r0, #1
  405f7c:	b01b      	add	sp, #108	; 0x6c
  405f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f82:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405f84:	f242 730f 	movw	r3, #9999	; 0x270f
  405f88:	6013      	str	r3, [r2, #0]
  405f8a:	f1ba 0f00 	cmp.w	sl, #0
  405f8e:	d10d      	bne.n	405fac <_dtoa_r+0x8c>
  405f90:	f3c5 0513 	ubfx	r5, r5, #0, #20
  405f94:	b955      	cbnz	r5, 405fac <_dtoa_r+0x8c>
  405f96:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405f98:	488d      	ldr	r0, [pc, #564]	; (4061d0 <_dtoa_r+0x2b0>)
  405f9a:	2b00      	cmp	r3, #0
  405f9c:	d0ee      	beq.n	405f7c <_dtoa_r+0x5c>
  405f9e:	f100 0308 	add.w	r3, r0, #8
  405fa2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  405fa4:	6013      	str	r3, [r2, #0]
  405fa6:	b01b      	add	sp, #108	; 0x6c
  405fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405fac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405fae:	4889      	ldr	r0, [pc, #548]	; (4061d4 <_dtoa_r+0x2b4>)
  405fb0:	2b00      	cmp	r3, #0
  405fb2:	d0e3      	beq.n	405f7c <_dtoa_r+0x5c>
  405fb4:	1cc3      	adds	r3, r0, #3
  405fb6:	e7f4      	b.n	405fa2 <_dtoa_r+0x82>
  405fb8:	2301      	movs	r3, #1
  405fba:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  405fbe:	6033      	str	r3, [r6, #0]
  405fc0:	46ab      	mov	fp, r5
  405fc2:	e7c5      	b.n	405f50 <_dtoa_r+0x30>
  405fc4:	aa18      	add	r2, sp, #96	; 0x60
  405fc6:	ab19      	add	r3, sp, #100	; 0x64
  405fc8:	9201      	str	r2, [sp, #4]
  405fca:	9300      	str	r3, [sp, #0]
  405fcc:	4652      	mov	r2, sl
  405fce:	465b      	mov	r3, fp
  405fd0:	4620      	mov	r0, r4
  405fd2:	f002 f819 	bl	408008 <__d2b>
  405fd6:	0d2b      	lsrs	r3, r5, #20
  405fd8:	4681      	mov	r9, r0
  405fda:	d071      	beq.n	4060c0 <_dtoa_r+0x1a0>
  405fdc:	f3cb 0213 	ubfx	r2, fp, #0, #20
  405fe0:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  405fe4:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405fe6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  405fea:	4650      	mov	r0, sl
  405fec:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  405ff0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  405ff4:	2200      	movs	r2, #0
  405ff6:	4b78      	ldr	r3, [pc, #480]	; (4061d8 <_dtoa_r+0x2b8>)
  405ff8:	f7fc fd56 	bl	402aa8 <__aeabi_dsub>
  405ffc:	a36c      	add	r3, pc, #432	; (adr r3, 4061b0 <_dtoa_r+0x290>)
  405ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
  406002:	f7fc ff05 	bl	402e10 <__aeabi_dmul>
  406006:	a36c      	add	r3, pc, #432	; (adr r3, 4061b8 <_dtoa_r+0x298>)
  406008:	e9d3 2300 	ldrd	r2, r3, [r3]
  40600c:	f7fc fd4e 	bl	402aac <__adddf3>
  406010:	e9cd 0102 	strd	r0, r1, [sp, #8]
  406014:	4630      	mov	r0, r6
  406016:	f7fc fe95 	bl	402d44 <__aeabi_i2d>
  40601a:	a369      	add	r3, pc, #420	; (adr r3, 4061c0 <_dtoa_r+0x2a0>)
  40601c:	e9d3 2300 	ldrd	r2, r3, [r3]
  406020:	f7fc fef6 	bl	402e10 <__aeabi_dmul>
  406024:	4602      	mov	r2, r0
  406026:	460b      	mov	r3, r1
  406028:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40602c:	f7fc fd3e 	bl	402aac <__adddf3>
  406030:	e9cd 0104 	strd	r0, r1, [sp, #16]
  406034:	f002 fd2e 	bl	408a94 <__aeabi_d2iz>
  406038:	2200      	movs	r2, #0
  40603a:	9002      	str	r0, [sp, #8]
  40603c:	2300      	movs	r3, #0
  40603e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  406042:	f7fd f957 	bl	4032f4 <__aeabi_dcmplt>
  406046:	2800      	cmp	r0, #0
  406048:	f040 8173 	bne.w	406332 <_dtoa_r+0x412>
  40604c:	9d02      	ldr	r5, [sp, #8]
  40604e:	2d16      	cmp	r5, #22
  406050:	f200 815d 	bhi.w	40630e <_dtoa_r+0x3ee>
  406054:	4b61      	ldr	r3, [pc, #388]	; (4061dc <_dtoa_r+0x2bc>)
  406056:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40605a:	e9d3 0100 	ldrd	r0, r1, [r3]
  40605e:	4652      	mov	r2, sl
  406060:	465b      	mov	r3, fp
  406062:	f7fd f965 	bl	403330 <__aeabi_dcmpgt>
  406066:	2800      	cmp	r0, #0
  406068:	f000 81c5 	beq.w	4063f6 <_dtoa_r+0x4d6>
  40606c:	1e6b      	subs	r3, r5, #1
  40606e:	9302      	str	r3, [sp, #8]
  406070:	2300      	movs	r3, #0
  406072:	930e      	str	r3, [sp, #56]	; 0x38
  406074:	1bbf      	subs	r7, r7, r6
  406076:	1e7b      	subs	r3, r7, #1
  406078:	9306      	str	r3, [sp, #24]
  40607a:	f100 8154 	bmi.w	406326 <_dtoa_r+0x406>
  40607e:	2300      	movs	r3, #0
  406080:	9308      	str	r3, [sp, #32]
  406082:	9b02      	ldr	r3, [sp, #8]
  406084:	2b00      	cmp	r3, #0
  406086:	f2c0 8145 	blt.w	406314 <_dtoa_r+0x3f4>
  40608a:	9a06      	ldr	r2, [sp, #24]
  40608c:	930d      	str	r3, [sp, #52]	; 0x34
  40608e:	4611      	mov	r1, r2
  406090:	4419      	add	r1, r3
  406092:	2300      	movs	r3, #0
  406094:	9106      	str	r1, [sp, #24]
  406096:	930c      	str	r3, [sp, #48]	; 0x30
  406098:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40609a:	2b09      	cmp	r3, #9
  40609c:	d82a      	bhi.n	4060f4 <_dtoa_r+0x1d4>
  40609e:	2b05      	cmp	r3, #5
  4060a0:	f340 865b 	ble.w	406d5a <_dtoa_r+0xe3a>
  4060a4:	3b04      	subs	r3, #4
  4060a6:	9324      	str	r3, [sp, #144]	; 0x90
  4060a8:	2500      	movs	r5, #0
  4060aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4060ac:	3b02      	subs	r3, #2
  4060ae:	2b03      	cmp	r3, #3
  4060b0:	f200 8642 	bhi.w	406d38 <_dtoa_r+0xe18>
  4060b4:	e8df f013 	tbh	[pc, r3, lsl #1]
  4060b8:	02c903d4 	.word	0x02c903d4
  4060bc:	046103df 	.word	0x046103df
  4060c0:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4060c2:	9e19      	ldr	r6, [sp, #100]	; 0x64
  4060c4:	443e      	add	r6, r7
  4060c6:	f206 4332 	addw	r3, r6, #1074	; 0x432
  4060ca:	2b20      	cmp	r3, #32
  4060cc:	f340 818e 	ble.w	4063ec <_dtoa_r+0x4cc>
  4060d0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4060d4:	f206 4012 	addw	r0, r6, #1042	; 0x412
  4060d8:	409d      	lsls	r5, r3
  4060da:	fa2a f000 	lsr.w	r0, sl, r0
  4060de:	4328      	orrs	r0, r5
  4060e0:	f7fc fe20 	bl	402d24 <__aeabi_ui2d>
  4060e4:	2301      	movs	r3, #1
  4060e6:	3e01      	subs	r6, #1
  4060e8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4060ec:	9314      	str	r3, [sp, #80]	; 0x50
  4060ee:	e781      	b.n	405ff4 <_dtoa_r+0xd4>
  4060f0:	483b      	ldr	r0, [pc, #236]	; (4061e0 <_dtoa_r+0x2c0>)
  4060f2:	e743      	b.n	405f7c <_dtoa_r+0x5c>
  4060f4:	2100      	movs	r1, #0
  4060f6:	6461      	str	r1, [r4, #68]	; 0x44
  4060f8:	4620      	mov	r0, r4
  4060fa:	9125      	str	r1, [sp, #148]	; 0x94
  4060fc:	f001 fce6 	bl	407acc <_Balloc>
  406100:	f04f 33ff 	mov.w	r3, #4294967295
  406104:	930a      	str	r3, [sp, #40]	; 0x28
  406106:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406108:	930f      	str	r3, [sp, #60]	; 0x3c
  40610a:	2301      	movs	r3, #1
  40610c:	9004      	str	r0, [sp, #16]
  40610e:	6420      	str	r0, [r4, #64]	; 0x40
  406110:	9224      	str	r2, [sp, #144]	; 0x90
  406112:	930b      	str	r3, [sp, #44]	; 0x2c
  406114:	9b19      	ldr	r3, [sp, #100]	; 0x64
  406116:	2b00      	cmp	r3, #0
  406118:	f2c0 80d9 	blt.w	4062ce <_dtoa_r+0x3ae>
  40611c:	9a02      	ldr	r2, [sp, #8]
  40611e:	2a0e      	cmp	r2, #14
  406120:	f300 80d5 	bgt.w	4062ce <_dtoa_r+0x3ae>
  406124:	4b2d      	ldr	r3, [pc, #180]	; (4061dc <_dtoa_r+0x2bc>)
  406126:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40612a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40612e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  406132:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406134:	2b00      	cmp	r3, #0
  406136:	f2c0 83ba 	blt.w	4068ae <_dtoa_r+0x98e>
  40613a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  40613e:	4650      	mov	r0, sl
  406140:	462a      	mov	r2, r5
  406142:	4633      	mov	r3, r6
  406144:	4659      	mov	r1, fp
  406146:	f7fc ff8d 	bl	403064 <__aeabi_ddiv>
  40614a:	f002 fca3 	bl	408a94 <__aeabi_d2iz>
  40614e:	4680      	mov	r8, r0
  406150:	f7fc fdf8 	bl	402d44 <__aeabi_i2d>
  406154:	462a      	mov	r2, r5
  406156:	4633      	mov	r3, r6
  406158:	f7fc fe5a 	bl	402e10 <__aeabi_dmul>
  40615c:	460b      	mov	r3, r1
  40615e:	4602      	mov	r2, r0
  406160:	4659      	mov	r1, fp
  406162:	4650      	mov	r0, sl
  406164:	f7fc fca0 	bl	402aa8 <__aeabi_dsub>
  406168:	9d04      	ldr	r5, [sp, #16]
  40616a:	f108 0330 	add.w	r3, r8, #48	; 0x30
  40616e:	702b      	strb	r3, [r5, #0]
  406170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406172:	2b01      	cmp	r3, #1
  406174:	4606      	mov	r6, r0
  406176:	460f      	mov	r7, r1
  406178:	f105 0501 	add.w	r5, r5, #1
  40617c:	d068      	beq.n	406250 <_dtoa_r+0x330>
  40617e:	2200      	movs	r2, #0
  406180:	4b18      	ldr	r3, [pc, #96]	; (4061e4 <_dtoa_r+0x2c4>)
  406182:	f7fc fe45 	bl	402e10 <__aeabi_dmul>
  406186:	2200      	movs	r2, #0
  406188:	2300      	movs	r3, #0
  40618a:	4606      	mov	r6, r0
  40618c:	460f      	mov	r7, r1
  40618e:	f7fd f8a7 	bl	4032e0 <__aeabi_dcmpeq>
  406192:	2800      	cmp	r0, #0
  406194:	f040 8088 	bne.w	4062a8 <_dtoa_r+0x388>
  406198:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  40619c:	f04f 0a00 	mov.w	sl, #0
  4061a0:	f8df b040 	ldr.w	fp, [pc, #64]	; 4061e4 <_dtoa_r+0x2c4>
  4061a4:	940c      	str	r4, [sp, #48]	; 0x30
  4061a6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  4061aa:	e028      	b.n	4061fe <_dtoa_r+0x2de>
  4061ac:	f3af 8000 	nop.w
  4061b0:	636f4361 	.word	0x636f4361
  4061b4:	3fd287a7 	.word	0x3fd287a7
  4061b8:	8b60c8b3 	.word	0x8b60c8b3
  4061bc:	3fc68a28 	.word	0x3fc68a28
  4061c0:	509f79fb 	.word	0x509f79fb
  4061c4:	3fd34413 	.word	0x3fd34413
  4061c8:	7ff00000 	.word	0x7ff00000
  4061cc:	00409a99 	.word	0x00409a99
  4061d0:	00409adc 	.word	0x00409adc
  4061d4:	00409ae8 	.word	0x00409ae8
  4061d8:	3ff80000 	.word	0x3ff80000
  4061dc:	00409b28 	.word	0x00409b28
  4061e0:	00409a98 	.word	0x00409a98
  4061e4:	40240000 	.word	0x40240000
  4061e8:	f7fc fe12 	bl	402e10 <__aeabi_dmul>
  4061ec:	2200      	movs	r2, #0
  4061ee:	2300      	movs	r3, #0
  4061f0:	4606      	mov	r6, r0
  4061f2:	460f      	mov	r7, r1
  4061f4:	f7fd f874 	bl	4032e0 <__aeabi_dcmpeq>
  4061f8:	2800      	cmp	r0, #0
  4061fa:	f040 83c1 	bne.w	406980 <_dtoa_r+0xa60>
  4061fe:	4642      	mov	r2, r8
  406200:	464b      	mov	r3, r9
  406202:	4630      	mov	r0, r6
  406204:	4639      	mov	r1, r7
  406206:	f7fc ff2d 	bl	403064 <__aeabi_ddiv>
  40620a:	f002 fc43 	bl	408a94 <__aeabi_d2iz>
  40620e:	4604      	mov	r4, r0
  406210:	f7fc fd98 	bl	402d44 <__aeabi_i2d>
  406214:	4642      	mov	r2, r8
  406216:	464b      	mov	r3, r9
  406218:	f7fc fdfa 	bl	402e10 <__aeabi_dmul>
  40621c:	4602      	mov	r2, r0
  40621e:	460b      	mov	r3, r1
  406220:	4630      	mov	r0, r6
  406222:	4639      	mov	r1, r7
  406224:	f7fc fc40 	bl	402aa8 <__aeabi_dsub>
  406228:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40622c:	9e04      	ldr	r6, [sp, #16]
  40622e:	f805 eb01 	strb.w	lr, [r5], #1
  406232:	eba5 0e06 	sub.w	lr, r5, r6
  406236:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  406238:	45b6      	cmp	lr, r6
  40623a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40623e:	4652      	mov	r2, sl
  406240:	465b      	mov	r3, fp
  406242:	d1d1      	bne.n	4061e8 <_dtoa_r+0x2c8>
  406244:	46a0      	mov	r8, r4
  406246:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40624a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40624c:	4606      	mov	r6, r0
  40624e:	460f      	mov	r7, r1
  406250:	4632      	mov	r2, r6
  406252:	463b      	mov	r3, r7
  406254:	4630      	mov	r0, r6
  406256:	4639      	mov	r1, r7
  406258:	f7fc fc28 	bl	402aac <__adddf3>
  40625c:	4606      	mov	r6, r0
  40625e:	460f      	mov	r7, r1
  406260:	4602      	mov	r2, r0
  406262:	460b      	mov	r3, r1
  406264:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406268:	f7fd f844 	bl	4032f4 <__aeabi_dcmplt>
  40626c:	b948      	cbnz	r0, 406282 <_dtoa_r+0x362>
  40626e:	4632      	mov	r2, r6
  406270:	463b      	mov	r3, r7
  406272:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406276:	f7fd f833 	bl	4032e0 <__aeabi_dcmpeq>
  40627a:	b1a8      	cbz	r0, 4062a8 <_dtoa_r+0x388>
  40627c:	f018 0f01 	tst.w	r8, #1
  406280:	d012      	beq.n	4062a8 <_dtoa_r+0x388>
  406282:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  406286:	9a04      	ldr	r2, [sp, #16]
  406288:	1e6b      	subs	r3, r5, #1
  40628a:	e004      	b.n	406296 <_dtoa_r+0x376>
  40628c:	429a      	cmp	r2, r3
  40628e:	f000 8401 	beq.w	406a94 <_dtoa_r+0xb74>
  406292:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  406296:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40629a:	f103 0501 	add.w	r5, r3, #1
  40629e:	d0f5      	beq.n	40628c <_dtoa_r+0x36c>
  4062a0:	f108 0801 	add.w	r8, r8, #1
  4062a4:	f883 8000 	strb.w	r8, [r3]
  4062a8:	4649      	mov	r1, r9
  4062aa:	4620      	mov	r0, r4
  4062ac:	f001 fc34 	bl	407b18 <_Bfree>
  4062b0:	2200      	movs	r2, #0
  4062b2:	9b02      	ldr	r3, [sp, #8]
  4062b4:	702a      	strb	r2, [r5, #0]
  4062b6:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4062b8:	3301      	adds	r3, #1
  4062ba:	6013      	str	r3, [r2, #0]
  4062bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4062be:	2b00      	cmp	r3, #0
  4062c0:	f000 839e 	beq.w	406a00 <_dtoa_r+0xae0>
  4062c4:	9804      	ldr	r0, [sp, #16]
  4062c6:	601d      	str	r5, [r3, #0]
  4062c8:	b01b      	add	sp, #108	; 0x6c
  4062ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4062ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4062d0:	2a00      	cmp	r2, #0
  4062d2:	d03e      	beq.n	406352 <_dtoa_r+0x432>
  4062d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4062d6:	2a01      	cmp	r2, #1
  4062d8:	f340 8311 	ble.w	4068fe <_dtoa_r+0x9de>
  4062dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4062de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4062e0:	1e5f      	subs	r7, r3, #1
  4062e2:	42ba      	cmp	r2, r7
  4062e4:	f2c0 838f 	blt.w	406a06 <_dtoa_r+0xae6>
  4062e8:	1bd7      	subs	r7, r2, r7
  4062ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4062ec:	2b00      	cmp	r3, #0
  4062ee:	f2c0 848b 	blt.w	406c08 <_dtoa_r+0xce8>
  4062f2:	9d08      	ldr	r5, [sp, #32]
  4062f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4062f6:	9a08      	ldr	r2, [sp, #32]
  4062f8:	441a      	add	r2, r3
  4062fa:	9208      	str	r2, [sp, #32]
  4062fc:	9a06      	ldr	r2, [sp, #24]
  4062fe:	2101      	movs	r1, #1
  406300:	441a      	add	r2, r3
  406302:	4620      	mov	r0, r4
  406304:	9206      	str	r2, [sp, #24]
  406306:	f001 fca1 	bl	407c4c <__i2b>
  40630a:	4606      	mov	r6, r0
  40630c:	e024      	b.n	406358 <_dtoa_r+0x438>
  40630e:	2301      	movs	r3, #1
  406310:	930e      	str	r3, [sp, #56]	; 0x38
  406312:	e6af      	b.n	406074 <_dtoa_r+0x154>
  406314:	9a08      	ldr	r2, [sp, #32]
  406316:	9b02      	ldr	r3, [sp, #8]
  406318:	1ad2      	subs	r2, r2, r3
  40631a:	425b      	negs	r3, r3
  40631c:	930c      	str	r3, [sp, #48]	; 0x30
  40631e:	2300      	movs	r3, #0
  406320:	9208      	str	r2, [sp, #32]
  406322:	930d      	str	r3, [sp, #52]	; 0x34
  406324:	e6b8      	b.n	406098 <_dtoa_r+0x178>
  406326:	f1c7 0301 	rsb	r3, r7, #1
  40632a:	9308      	str	r3, [sp, #32]
  40632c:	2300      	movs	r3, #0
  40632e:	9306      	str	r3, [sp, #24]
  406330:	e6a7      	b.n	406082 <_dtoa_r+0x162>
  406332:	9d02      	ldr	r5, [sp, #8]
  406334:	4628      	mov	r0, r5
  406336:	f7fc fd05 	bl	402d44 <__aeabi_i2d>
  40633a:	4602      	mov	r2, r0
  40633c:	460b      	mov	r3, r1
  40633e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  406342:	f7fc ffcd 	bl	4032e0 <__aeabi_dcmpeq>
  406346:	2800      	cmp	r0, #0
  406348:	f47f ae80 	bne.w	40604c <_dtoa_r+0x12c>
  40634c:	1e6b      	subs	r3, r5, #1
  40634e:	9302      	str	r3, [sp, #8]
  406350:	e67c      	b.n	40604c <_dtoa_r+0x12c>
  406352:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406354:	9d08      	ldr	r5, [sp, #32]
  406356:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  406358:	2d00      	cmp	r5, #0
  40635a:	dd0c      	ble.n	406376 <_dtoa_r+0x456>
  40635c:	9906      	ldr	r1, [sp, #24]
  40635e:	2900      	cmp	r1, #0
  406360:	460b      	mov	r3, r1
  406362:	dd08      	ble.n	406376 <_dtoa_r+0x456>
  406364:	42a9      	cmp	r1, r5
  406366:	9a08      	ldr	r2, [sp, #32]
  406368:	bfa8      	it	ge
  40636a:	462b      	movge	r3, r5
  40636c:	1ad2      	subs	r2, r2, r3
  40636e:	1aed      	subs	r5, r5, r3
  406370:	1acb      	subs	r3, r1, r3
  406372:	9208      	str	r2, [sp, #32]
  406374:	9306      	str	r3, [sp, #24]
  406376:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406378:	b1d3      	cbz	r3, 4063b0 <_dtoa_r+0x490>
  40637a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40637c:	2b00      	cmp	r3, #0
  40637e:	f000 82b7 	beq.w	4068f0 <_dtoa_r+0x9d0>
  406382:	2f00      	cmp	r7, #0
  406384:	dd10      	ble.n	4063a8 <_dtoa_r+0x488>
  406386:	4631      	mov	r1, r6
  406388:	463a      	mov	r2, r7
  40638a:	4620      	mov	r0, r4
  40638c:	f001 fcfa 	bl	407d84 <__pow5mult>
  406390:	464a      	mov	r2, r9
  406392:	4601      	mov	r1, r0
  406394:	4606      	mov	r6, r0
  406396:	4620      	mov	r0, r4
  406398:	f001 fc62 	bl	407c60 <__multiply>
  40639c:	4649      	mov	r1, r9
  40639e:	4680      	mov	r8, r0
  4063a0:	4620      	mov	r0, r4
  4063a2:	f001 fbb9 	bl	407b18 <_Bfree>
  4063a6:	46c1      	mov	r9, r8
  4063a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4063aa:	1bda      	subs	r2, r3, r7
  4063ac:	f040 82a1 	bne.w	4068f2 <_dtoa_r+0x9d2>
  4063b0:	2101      	movs	r1, #1
  4063b2:	4620      	mov	r0, r4
  4063b4:	f001 fc4a 	bl	407c4c <__i2b>
  4063b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4063ba:	2b00      	cmp	r3, #0
  4063bc:	4680      	mov	r8, r0
  4063be:	dd1c      	ble.n	4063fa <_dtoa_r+0x4da>
  4063c0:	4601      	mov	r1, r0
  4063c2:	461a      	mov	r2, r3
  4063c4:	4620      	mov	r0, r4
  4063c6:	f001 fcdd 	bl	407d84 <__pow5mult>
  4063ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4063cc:	2b01      	cmp	r3, #1
  4063ce:	4680      	mov	r8, r0
  4063d0:	f340 8254 	ble.w	40687c <_dtoa_r+0x95c>
  4063d4:	2300      	movs	r3, #0
  4063d6:	930c      	str	r3, [sp, #48]	; 0x30
  4063d8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4063dc:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  4063e0:	6918      	ldr	r0, [r3, #16]
  4063e2:	f001 fbe3 	bl	407bac <__hi0bits>
  4063e6:	f1c0 0020 	rsb	r0, r0, #32
  4063ea:	e010      	b.n	40640e <_dtoa_r+0x4ee>
  4063ec:	f1c3 0520 	rsb	r5, r3, #32
  4063f0:	fa0a f005 	lsl.w	r0, sl, r5
  4063f4:	e674      	b.n	4060e0 <_dtoa_r+0x1c0>
  4063f6:	900e      	str	r0, [sp, #56]	; 0x38
  4063f8:	e63c      	b.n	406074 <_dtoa_r+0x154>
  4063fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4063fc:	2b01      	cmp	r3, #1
  4063fe:	f340 8287 	ble.w	406910 <_dtoa_r+0x9f0>
  406402:	2300      	movs	r3, #0
  406404:	930c      	str	r3, [sp, #48]	; 0x30
  406406:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406408:	2001      	movs	r0, #1
  40640a:	2b00      	cmp	r3, #0
  40640c:	d1e4      	bne.n	4063d8 <_dtoa_r+0x4b8>
  40640e:	9a06      	ldr	r2, [sp, #24]
  406410:	4410      	add	r0, r2
  406412:	f010 001f 	ands.w	r0, r0, #31
  406416:	f000 80a1 	beq.w	40655c <_dtoa_r+0x63c>
  40641a:	f1c0 0320 	rsb	r3, r0, #32
  40641e:	2b04      	cmp	r3, #4
  406420:	f340 849e 	ble.w	406d60 <_dtoa_r+0xe40>
  406424:	9b08      	ldr	r3, [sp, #32]
  406426:	f1c0 001c 	rsb	r0, r0, #28
  40642a:	4403      	add	r3, r0
  40642c:	9308      	str	r3, [sp, #32]
  40642e:	4613      	mov	r3, r2
  406430:	4403      	add	r3, r0
  406432:	4405      	add	r5, r0
  406434:	9306      	str	r3, [sp, #24]
  406436:	9b08      	ldr	r3, [sp, #32]
  406438:	2b00      	cmp	r3, #0
  40643a:	dd05      	ble.n	406448 <_dtoa_r+0x528>
  40643c:	4649      	mov	r1, r9
  40643e:	461a      	mov	r2, r3
  406440:	4620      	mov	r0, r4
  406442:	f001 fcef 	bl	407e24 <__lshift>
  406446:	4681      	mov	r9, r0
  406448:	9b06      	ldr	r3, [sp, #24]
  40644a:	2b00      	cmp	r3, #0
  40644c:	dd05      	ble.n	40645a <_dtoa_r+0x53a>
  40644e:	4641      	mov	r1, r8
  406450:	461a      	mov	r2, r3
  406452:	4620      	mov	r0, r4
  406454:	f001 fce6 	bl	407e24 <__lshift>
  406458:	4680      	mov	r8, r0
  40645a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40645c:	2b00      	cmp	r3, #0
  40645e:	f040 8086 	bne.w	40656e <_dtoa_r+0x64e>
  406462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406464:	2b00      	cmp	r3, #0
  406466:	f340 8266 	ble.w	406936 <_dtoa_r+0xa16>
  40646a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40646c:	2b00      	cmp	r3, #0
  40646e:	f000 8098 	beq.w	4065a2 <_dtoa_r+0x682>
  406472:	2d00      	cmp	r5, #0
  406474:	dd05      	ble.n	406482 <_dtoa_r+0x562>
  406476:	4631      	mov	r1, r6
  406478:	462a      	mov	r2, r5
  40647a:	4620      	mov	r0, r4
  40647c:	f001 fcd2 	bl	407e24 <__lshift>
  406480:	4606      	mov	r6, r0
  406482:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406484:	2b00      	cmp	r3, #0
  406486:	f040 8337 	bne.w	406af8 <_dtoa_r+0xbd8>
  40648a:	9606      	str	r6, [sp, #24]
  40648c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40648e:	9a04      	ldr	r2, [sp, #16]
  406490:	f8dd b018 	ldr.w	fp, [sp, #24]
  406494:	3b01      	subs	r3, #1
  406496:	18d3      	adds	r3, r2, r3
  406498:	930b      	str	r3, [sp, #44]	; 0x2c
  40649a:	f00a 0301 	and.w	r3, sl, #1
  40649e:	930c      	str	r3, [sp, #48]	; 0x30
  4064a0:	4617      	mov	r7, r2
  4064a2:	46c2      	mov	sl, r8
  4064a4:	4651      	mov	r1, sl
  4064a6:	4648      	mov	r0, r9
  4064a8:	f7ff fca4 	bl	405df4 <quorem>
  4064ac:	4631      	mov	r1, r6
  4064ae:	4605      	mov	r5, r0
  4064b0:	4648      	mov	r0, r9
  4064b2:	f001 fd09 	bl	407ec8 <__mcmp>
  4064b6:	465a      	mov	r2, fp
  4064b8:	900a      	str	r0, [sp, #40]	; 0x28
  4064ba:	4651      	mov	r1, sl
  4064bc:	4620      	mov	r0, r4
  4064be:	f001 fd1f 	bl	407f00 <__mdiff>
  4064c2:	68c2      	ldr	r2, [r0, #12]
  4064c4:	4680      	mov	r8, r0
  4064c6:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4064ca:	2a00      	cmp	r2, #0
  4064cc:	f040 822b 	bne.w	406926 <_dtoa_r+0xa06>
  4064d0:	4601      	mov	r1, r0
  4064d2:	4648      	mov	r0, r9
  4064d4:	9308      	str	r3, [sp, #32]
  4064d6:	f001 fcf7 	bl	407ec8 <__mcmp>
  4064da:	4641      	mov	r1, r8
  4064dc:	9006      	str	r0, [sp, #24]
  4064de:	4620      	mov	r0, r4
  4064e0:	f001 fb1a 	bl	407b18 <_Bfree>
  4064e4:	9a06      	ldr	r2, [sp, #24]
  4064e6:	9b08      	ldr	r3, [sp, #32]
  4064e8:	b932      	cbnz	r2, 4064f8 <_dtoa_r+0x5d8>
  4064ea:	9924      	ldr	r1, [sp, #144]	; 0x90
  4064ec:	b921      	cbnz	r1, 4064f8 <_dtoa_r+0x5d8>
  4064ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4064f0:	2a00      	cmp	r2, #0
  4064f2:	f000 83ef 	beq.w	406cd4 <_dtoa_r+0xdb4>
  4064f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4064f8:	990a      	ldr	r1, [sp, #40]	; 0x28
  4064fa:	2900      	cmp	r1, #0
  4064fc:	f2c0 829f 	blt.w	406a3e <_dtoa_r+0xb1e>
  406500:	d105      	bne.n	40650e <_dtoa_r+0x5ee>
  406502:	9924      	ldr	r1, [sp, #144]	; 0x90
  406504:	b919      	cbnz	r1, 40650e <_dtoa_r+0x5ee>
  406506:	990c      	ldr	r1, [sp, #48]	; 0x30
  406508:	2900      	cmp	r1, #0
  40650a:	f000 8298 	beq.w	406a3e <_dtoa_r+0xb1e>
  40650e:	2a00      	cmp	r2, #0
  406510:	f300 8306 	bgt.w	406b20 <_dtoa_r+0xc00>
  406514:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406516:	703b      	strb	r3, [r7, #0]
  406518:	f107 0801 	add.w	r8, r7, #1
  40651c:	4297      	cmp	r7, r2
  40651e:	4645      	mov	r5, r8
  406520:	f000 830c 	beq.w	406b3c <_dtoa_r+0xc1c>
  406524:	4649      	mov	r1, r9
  406526:	2300      	movs	r3, #0
  406528:	220a      	movs	r2, #10
  40652a:	4620      	mov	r0, r4
  40652c:	f001 fafe 	bl	407b2c <__multadd>
  406530:	455e      	cmp	r6, fp
  406532:	4681      	mov	r9, r0
  406534:	4631      	mov	r1, r6
  406536:	f04f 0300 	mov.w	r3, #0
  40653a:	f04f 020a 	mov.w	r2, #10
  40653e:	4620      	mov	r0, r4
  406540:	f000 81eb 	beq.w	40691a <_dtoa_r+0x9fa>
  406544:	f001 faf2 	bl	407b2c <__multadd>
  406548:	4659      	mov	r1, fp
  40654a:	4606      	mov	r6, r0
  40654c:	2300      	movs	r3, #0
  40654e:	220a      	movs	r2, #10
  406550:	4620      	mov	r0, r4
  406552:	f001 faeb 	bl	407b2c <__multadd>
  406556:	4647      	mov	r7, r8
  406558:	4683      	mov	fp, r0
  40655a:	e7a3      	b.n	4064a4 <_dtoa_r+0x584>
  40655c:	201c      	movs	r0, #28
  40655e:	9b08      	ldr	r3, [sp, #32]
  406560:	4403      	add	r3, r0
  406562:	9308      	str	r3, [sp, #32]
  406564:	9b06      	ldr	r3, [sp, #24]
  406566:	4403      	add	r3, r0
  406568:	4405      	add	r5, r0
  40656a:	9306      	str	r3, [sp, #24]
  40656c:	e763      	b.n	406436 <_dtoa_r+0x516>
  40656e:	4641      	mov	r1, r8
  406570:	4648      	mov	r0, r9
  406572:	f001 fca9 	bl	407ec8 <__mcmp>
  406576:	2800      	cmp	r0, #0
  406578:	f6bf af73 	bge.w	406462 <_dtoa_r+0x542>
  40657c:	9f02      	ldr	r7, [sp, #8]
  40657e:	4649      	mov	r1, r9
  406580:	2300      	movs	r3, #0
  406582:	220a      	movs	r2, #10
  406584:	4620      	mov	r0, r4
  406586:	3f01      	subs	r7, #1
  406588:	9702      	str	r7, [sp, #8]
  40658a:	f001 facf 	bl	407b2c <__multadd>
  40658e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406590:	4681      	mov	r9, r0
  406592:	2b00      	cmp	r3, #0
  406594:	f040 83b6 	bne.w	406d04 <_dtoa_r+0xde4>
  406598:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40659a:	2b00      	cmp	r3, #0
  40659c:	f340 83bf 	ble.w	406d1e <_dtoa_r+0xdfe>
  4065a0:	930a      	str	r3, [sp, #40]	; 0x28
  4065a2:	f8dd b010 	ldr.w	fp, [sp, #16]
  4065a6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4065a8:	465d      	mov	r5, fp
  4065aa:	e002      	b.n	4065b2 <_dtoa_r+0x692>
  4065ac:	f001 fabe 	bl	407b2c <__multadd>
  4065b0:	4681      	mov	r9, r0
  4065b2:	4641      	mov	r1, r8
  4065b4:	4648      	mov	r0, r9
  4065b6:	f7ff fc1d 	bl	405df4 <quorem>
  4065ba:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  4065be:	f805 ab01 	strb.w	sl, [r5], #1
  4065c2:	eba5 030b 	sub.w	r3, r5, fp
  4065c6:	42bb      	cmp	r3, r7
  4065c8:	f04f 020a 	mov.w	r2, #10
  4065cc:	f04f 0300 	mov.w	r3, #0
  4065d0:	4649      	mov	r1, r9
  4065d2:	4620      	mov	r0, r4
  4065d4:	dbea      	blt.n	4065ac <_dtoa_r+0x68c>
  4065d6:	9b04      	ldr	r3, [sp, #16]
  4065d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4065da:	2a01      	cmp	r2, #1
  4065dc:	bfac      	ite	ge
  4065de:	189b      	addge	r3, r3, r2
  4065e0:	3301      	addlt	r3, #1
  4065e2:	461d      	mov	r5, r3
  4065e4:	f04f 0b00 	mov.w	fp, #0
  4065e8:	4649      	mov	r1, r9
  4065ea:	2201      	movs	r2, #1
  4065ec:	4620      	mov	r0, r4
  4065ee:	f001 fc19 	bl	407e24 <__lshift>
  4065f2:	4641      	mov	r1, r8
  4065f4:	4681      	mov	r9, r0
  4065f6:	f001 fc67 	bl	407ec8 <__mcmp>
  4065fa:	2800      	cmp	r0, #0
  4065fc:	f340 823d 	ble.w	406a7a <_dtoa_r+0xb5a>
  406600:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  406604:	9904      	ldr	r1, [sp, #16]
  406606:	1e6b      	subs	r3, r5, #1
  406608:	e004      	b.n	406614 <_dtoa_r+0x6f4>
  40660a:	428b      	cmp	r3, r1
  40660c:	f000 81ae 	beq.w	40696c <_dtoa_r+0xa4c>
  406610:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  406614:	2a39      	cmp	r2, #57	; 0x39
  406616:	f103 0501 	add.w	r5, r3, #1
  40661a:	d0f6      	beq.n	40660a <_dtoa_r+0x6ea>
  40661c:	3201      	adds	r2, #1
  40661e:	701a      	strb	r2, [r3, #0]
  406620:	4641      	mov	r1, r8
  406622:	4620      	mov	r0, r4
  406624:	f001 fa78 	bl	407b18 <_Bfree>
  406628:	2e00      	cmp	r6, #0
  40662a:	f43f ae3d 	beq.w	4062a8 <_dtoa_r+0x388>
  40662e:	f1bb 0f00 	cmp.w	fp, #0
  406632:	d005      	beq.n	406640 <_dtoa_r+0x720>
  406634:	45b3      	cmp	fp, r6
  406636:	d003      	beq.n	406640 <_dtoa_r+0x720>
  406638:	4659      	mov	r1, fp
  40663a:	4620      	mov	r0, r4
  40663c:	f001 fa6c 	bl	407b18 <_Bfree>
  406640:	4631      	mov	r1, r6
  406642:	4620      	mov	r0, r4
  406644:	f001 fa68 	bl	407b18 <_Bfree>
  406648:	e62e      	b.n	4062a8 <_dtoa_r+0x388>
  40664a:	2300      	movs	r3, #0
  40664c:	930b      	str	r3, [sp, #44]	; 0x2c
  40664e:	9b02      	ldr	r3, [sp, #8]
  406650:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406652:	4413      	add	r3, r2
  406654:	930f      	str	r3, [sp, #60]	; 0x3c
  406656:	3301      	adds	r3, #1
  406658:	2b01      	cmp	r3, #1
  40665a:	461f      	mov	r7, r3
  40665c:	461e      	mov	r6, r3
  40665e:	930a      	str	r3, [sp, #40]	; 0x28
  406660:	bfb8      	it	lt
  406662:	2701      	movlt	r7, #1
  406664:	2100      	movs	r1, #0
  406666:	2f17      	cmp	r7, #23
  406668:	6461      	str	r1, [r4, #68]	; 0x44
  40666a:	d90a      	bls.n	406682 <_dtoa_r+0x762>
  40666c:	2201      	movs	r2, #1
  40666e:	2304      	movs	r3, #4
  406670:	005b      	lsls	r3, r3, #1
  406672:	f103 0014 	add.w	r0, r3, #20
  406676:	4287      	cmp	r7, r0
  406678:	4611      	mov	r1, r2
  40667a:	f102 0201 	add.w	r2, r2, #1
  40667e:	d2f7      	bcs.n	406670 <_dtoa_r+0x750>
  406680:	6461      	str	r1, [r4, #68]	; 0x44
  406682:	4620      	mov	r0, r4
  406684:	f001 fa22 	bl	407acc <_Balloc>
  406688:	2e0e      	cmp	r6, #14
  40668a:	9004      	str	r0, [sp, #16]
  40668c:	6420      	str	r0, [r4, #64]	; 0x40
  40668e:	f63f ad41 	bhi.w	406114 <_dtoa_r+0x1f4>
  406692:	2d00      	cmp	r5, #0
  406694:	f43f ad3e 	beq.w	406114 <_dtoa_r+0x1f4>
  406698:	9902      	ldr	r1, [sp, #8]
  40669a:	2900      	cmp	r1, #0
  40669c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  4066a0:	f340 8202 	ble.w	406aa8 <_dtoa_r+0xb88>
  4066a4:	4bb8      	ldr	r3, [pc, #736]	; (406988 <_dtoa_r+0xa68>)
  4066a6:	f001 020f 	and.w	r2, r1, #15
  4066aa:	110d      	asrs	r5, r1, #4
  4066ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4066b0:	06e9      	lsls	r1, r5, #27
  4066b2:	e9d3 6700 	ldrd	r6, r7, [r3]
  4066b6:	f140 81ae 	bpl.w	406a16 <_dtoa_r+0xaf6>
  4066ba:	4bb4      	ldr	r3, [pc, #720]	; (40698c <_dtoa_r+0xa6c>)
  4066bc:	4650      	mov	r0, sl
  4066be:	4659      	mov	r1, fp
  4066c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4066c4:	f7fc fcce 	bl	403064 <__aeabi_ddiv>
  4066c8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4066cc:	f005 050f 	and.w	r5, r5, #15
  4066d0:	f04f 0a03 	mov.w	sl, #3
  4066d4:	b18d      	cbz	r5, 4066fa <_dtoa_r+0x7da>
  4066d6:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40698c <_dtoa_r+0xa6c>
  4066da:	07ea      	lsls	r2, r5, #31
  4066dc:	d509      	bpl.n	4066f2 <_dtoa_r+0x7d2>
  4066de:	4630      	mov	r0, r6
  4066e0:	4639      	mov	r1, r7
  4066e2:	e9d8 2300 	ldrd	r2, r3, [r8]
  4066e6:	f7fc fb93 	bl	402e10 <__aeabi_dmul>
  4066ea:	f10a 0a01 	add.w	sl, sl, #1
  4066ee:	4606      	mov	r6, r0
  4066f0:	460f      	mov	r7, r1
  4066f2:	106d      	asrs	r5, r5, #1
  4066f4:	f108 0808 	add.w	r8, r8, #8
  4066f8:	d1ef      	bne.n	4066da <_dtoa_r+0x7ba>
  4066fa:	463b      	mov	r3, r7
  4066fc:	4632      	mov	r2, r6
  4066fe:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  406702:	f7fc fcaf 	bl	403064 <__aeabi_ddiv>
  406706:	4607      	mov	r7, r0
  406708:	4688      	mov	r8, r1
  40670a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40670c:	b143      	cbz	r3, 406720 <_dtoa_r+0x800>
  40670e:	2200      	movs	r2, #0
  406710:	4b9f      	ldr	r3, [pc, #636]	; (406990 <_dtoa_r+0xa70>)
  406712:	4638      	mov	r0, r7
  406714:	4641      	mov	r1, r8
  406716:	f7fc fded 	bl	4032f4 <__aeabi_dcmplt>
  40671a:	2800      	cmp	r0, #0
  40671c:	f040 8286 	bne.w	406c2c <_dtoa_r+0xd0c>
  406720:	4650      	mov	r0, sl
  406722:	f7fc fb0f 	bl	402d44 <__aeabi_i2d>
  406726:	463a      	mov	r2, r7
  406728:	4643      	mov	r3, r8
  40672a:	f7fc fb71 	bl	402e10 <__aeabi_dmul>
  40672e:	4b99      	ldr	r3, [pc, #612]	; (406994 <_dtoa_r+0xa74>)
  406730:	2200      	movs	r2, #0
  406732:	f7fc f9bb 	bl	402aac <__adddf3>
  406736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406738:	4605      	mov	r5, r0
  40673a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40673e:	2b00      	cmp	r3, #0
  406740:	f000 813e 	beq.w	4069c0 <_dtoa_r+0xaa0>
  406744:	9b02      	ldr	r3, [sp, #8]
  406746:	9315      	str	r3, [sp, #84]	; 0x54
  406748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40674a:	9312      	str	r3, [sp, #72]	; 0x48
  40674c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40674e:	2b00      	cmp	r3, #0
  406750:	f000 81fa 	beq.w	406b48 <_dtoa_r+0xc28>
  406754:	9a12      	ldr	r2, [sp, #72]	; 0x48
  406756:	4b8c      	ldr	r3, [pc, #560]	; (406988 <_dtoa_r+0xa68>)
  406758:	498f      	ldr	r1, [pc, #572]	; (406998 <_dtoa_r+0xa78>)
  40675a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40675e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  406762:	2000      	movs	r0, #0
  406764:	f7fc fc7e 	bl	403064 <__aeabi_ddiv>
  406768:	462a      	mov	r2, r5
  40676a:	4633      	mov	r3, r6
  40676c:	f7fc f99c 	bl	402aa8 <__aeabi_dsub>
  406770:	4682      	mov	sl, r0
  406772:	468b      	mov	fp, r1
  406774:	4638      	mov	r0, r7
  406776:	4641      	mov	r1, r8
  406778:	f002 f98c 	bl	408a94 <__aeabi_d2iz>
  40677c:	4605      	mov	r5, r0
  40677e:	f7fc fae1 	bl	402d44 <__aeabi_i2d>
  406782:	4602      	mov	r2, r0
  406784:	460b      	mov	r3, r1
  406786:	4638      	mov	r0, r7
  406788:	4641      	mov	r1, r8
  40678a:	f7fc f98d 	bl	402aa8 <__aeabi_dsub>
  40678e:	3530      	adds	r5, #48	; 0x30
  406790:	fa5f f885 	uxtb.w	r8, r5
  406794:	9d04      	ldr	r5, [sp, #16]
  406796:	4606      	mov	r6, r0
  406798:	460f      	mov	r7, r1
  40679a:	f885 8000 	strb.w	r8, [r5]
  40679e:	4602      	mov	r2, r0
  4067a0:	460b      	mov	r3, r1
  4067a2:	4650      	mov	r0, sl
  4067a4:	4659      	mov	r1, fp
  4067a6:	3501      	adds	r5, #1
  4067a8:	f7fc fdc2 	bl	403330 <__aeabi_dcmpgt>
  4067ac:	2800      	cmp	r0, #0
  4067ae:	d154      	bne.n	40685a <_dtoa_r+0x93a>
  4067b0:	4632      	mov	r2, r6
  4067b2:	463b      	mov	r3, r7
  4067b4:	2000      	movs	r0, #0
  4067b6:	4976      	ldr	r1, [pc, #472]	; (406990 <_dtoa_r+0xa70>)
  4067b8:	f7fc f976 	bl	402aa8 <__aeabi_dsub>
  4067bc:	4602      	mov	r2, r0
  4067be:	460b      	mov	r3, r1
  4067c0:	4650      	mov	r0, sl
  4067c2:	4659      	mov	r1, fp
  4067c4:	f7fc fdb4 	bl	403330 <__aeabi_dcmpgt>
  4067c8:	2800      	cmp	r0, #0
  4067ca:	f040 8270 	bne.w	406cae <_dtoa_r+0xd8e>
  4067ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4067d0:	2a01      	cmp	r2, #1
  4067d2:	f000 8111 	beq.w	4069f8 <_dtoa_r+0xad8>
  4067d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4067d8:	9a04      	ldr	r2, [sp, #16]
  4067da:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4067de:	4413      	add	r3, r2
  4067e0:	4699      	mov	r9, r3
  4067e2:	e00d      	b.n	406800 <_dtoa_r+0x8e0>
  4067e4:	2000      	movs	r0, #0
  4067e6:	496a      	ldr	r1, [pc, #424]	; (406990 <_dtoa_r+0xa70>)
  4067e8:	f7fc f95e 	bl	402aa8 <__aeabi_dsub>
  4067ec:	4652      	mov	r2, sl
  4067ee:	465b      	mov	r3, fp
  4067f0:	f7fc fd80 	bl	4032f4 <__aeabi_dcmplt>
  4067f4:	2800      	cmp	r0, #0
  4067f6:	f040 8258 	bne.w	406caa <_dtoa_r+0xd8a>
  4067fa:	454d      	cmp	r5, r9
  4067fc:	f000 80fa 	beq.w	4069f4 <_dtoa_r+0xad4>
  406800:	4650      	mov	r0, sl
  406802:	4659      	mov	r1, fp
  406804:	2200      	movs	r2, #0
  406806:	4b65      	ldr	r3, [pc, #404]	; (40699c <_dtoa_r+0xa7c>)
  406808:	f7fc fb02 	bl	402e10 <__aeabi_dmul>
  40680c:	2200      	movs	r2, #0
  40680e:	4b63      	ldr	r3, [pc, #396]	; (40699c <_dtoa_r+0xa7c>)
  406810:	4682      	mov	sl, r0
  406812:	468b      	mov	fp, r1
  406814:	4630      	mov	r0, r6
  406816:	4639      	mov	r1, r7
  406818:	f7fc fafa 	bl	402e10 <__aeabi_dmul>
  40681c:	460f      	mov	r7, r1
  40681e:	4606      	mov	r6, r0
  406820:	f002 f938 	bl	408a94 <__aeabi_d2iz>
  406824:	4680      	mov	r8, r0
  406826:	f7fc fa8d 	bl	402d44 <__aeabi_i2d>
  40682a:	4602      	mov	r2, r0
  40682c:	460b      	mov	r3, r1
  40682e:	4630      	mov	r0, r6
  406830:	4639      	mov	r1, r7
  406832:	f7fc f939 	bl	402aa8 <__aeabi_dsub>
  406836:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40683a:	fa5f f888 	uxtb.w	r8, r8
  40683e:	4652      	mov	r2, sl
  406840:	465b      	mov	r3, fp
  406842:	f805 8b01 	strb.w	r8, [r5], #1
  406846:	4606      	mov	r6, r0
  406848:	460f      	mov	r7, r1
  40684a:	f7fc fd53 	bl	4032f4 <__aeabi_dcmplt>
  40684e:	4632      	mov	r2, r6
  406850:	463b      	mov	r3, r7
  406852:	2800      	cmp	r0, #0
  406854:	d0c6      	beq.n	4067e4 <_dtoa_r+0x8c4>
  406856:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40685a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40685c:	9302      	str	r3, [sp, #8]
  40685e:	e523      	b.n	4062a8 <_dtoa_r+0x388>
  406860:	2300      	movs	r3, #0
  406862:	930b      	str	r3, [sp, #44]	; 0x2c
  406864:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406866:	2b00      	cmp	r3, #0
  406868:	f340 80dc 	ble.w	406a24 <_dtoa_r+0xb04>
  40686c:	461f      	mov	r7, r3
  40686e:	461e      	mov	r6, r3
  406870:	930f      	str	r3, [sp, #60]	; 0x3c
  406872:	930a      	str	r3, [sp, #40]	; 0x28
  406874:	e6f6      	b.n	406664 <_dtoa_r+0x744>
  406876:	2301      	movs	r3, #1
  406878:	930b      	str	r3, [sp, #44]	; 0x2c
  40687a:	e7f3      	b.n	406864 <_dtoa_r+0x944>
  40687c:	f1ba 0f00 	cmp.w	sl, #0
  406880:	f47f ada8 	bne.w	4063d4 <_dtoa_r+0x4b4>
  406884:	f3cb 0313 	ubfx	r3, fp, #0, #20
  406888:	2b00      	cmp	r3, #0
  40688a:	f47f adba 	bne.w	406402 <_dtoa_r+0x4e2>
  40688e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  406892:	0d3f      	lsrs	r7, r7, #20
  406894:	053f      	lsls	r7, r7, #20
  406896:	2f00      	cmp	r7, #0
  406898:	f000 820d 	beq.w	406cb6 <_dtoa_r+0xd96>
  40689c:	9b08      	ldr	r3, [sp, #32]
  40689e:	3301      	adds	r3, #1
  4068a0:	9308      	str	r3, [sp, #32]
  4068a2:	9b06      	ldr	r3, [sp, #24]
  4068a4:	3301      	adds	r3, #1
  4068a6:	9306      	str	r3, [sp, #24]
  4068a8:	2301      	movs	r3, #1
  4068aa:	930c      	str	r3, [sp, #48]	; 0x30
  4068ac:	e5ab      	b.n	406406 <_dtoa_r+0x4e6>
  4068ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4068b0:	2b00      	cmp	r3, #0
  4068b2:	f73f ac42 	bgt.w	40613a <_dtoa_r+0x21a>
  4068b6:	f040 8221 	bne.w	406cfc <_dtoa_r+0xddc>
  4068ba:	2200      	movs	r2, #0
  4068bc:	4b38      	ldr	r3, [pc, #224]	; (4069a0 <_dtoa_r+0xa80>)
  4068be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4068c2:	f7fc faa5 	bl	402e10 <__aeabi_dmul>
  4068c6:	4652      	mov	r2, sl
  4068c8:	465b      	mov	r3, fp
  4068ca:	f7fc fd27 	bl	40331c <__aeabi_dcmpge>
  4068ce:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  4068d2:	4646      	mov	r6, r8
  4068d4:	2800      	cmp	r0, #0
  4068d6:	d041      	beq.n	40695c <_dtoa_r+0xa3c>
  4068d8:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4068da:	9d04      	ldr	r5, [sp, #16]
  4068dc:	43db      	mvns	r3, r3
  4068de:	9302      	str	r3, [sp, #8]
  4068e0:	4641      	mov	r1, r8
  4068e2:	4620      	mov	r0, r4
  4068e4:	f001 f918 	bl	407b18 <_Bfree>
  4068e8:	2e00      	cmp	r6, #0
  4068ea:	f43f acdd 	beq.w	4062a8 <_dtoa_r+0x388>
  4068ee:	e6a7      	b.n	406640 <_dtoa_r+0x720>
  4068f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4068f2:	4649      	mov	r1, r9
  4068f4:	4620      	mov	r0, r4
  4068f6:	f001 fa45 	bl	407d84 <__pow5mult>
  4068fa:	4681      	mov	r9, r0
  4068fc:	e558      	b.n	4063b0 <_dtoa_r+0x490>
  4068fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
  406900:	2a00      	cmp	r2, #0
  406902:	f000 8187 	beq.w	406c14 <_dtoa_r+0xcf4>
  406906:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40690a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40690c:	9d08      	ldr	r5, [sp, #32]
  40690e:	e4f2      	b.n	4062f6 <_dtoa_r+0x3d6>
  406910:	f1ba 0f00 	cmp.w	sl, #0
  406914:	f47f ad75 	bne.w	406402 <_dtoa_r+0x4e2>
  406918:	e7b4      	b.n	406884 <_dtoa_r+0x964>
  40691a:	f001 f907 	bl	407b2c <__multadd>
  40691e:	4647      	mov	r7, r8
  406920:	4606      	mov	r6, r0
  406922:	4683      	mov	fp, r0
  406924:	e5be      	b.n	4064a4 <_dtoa_r+0x584>
  406926:	4601      	mov	r1, r0
  406928:	4620      	mov	r0, r4
  40692a:	9306      	str	r3, [sp, #24]
  40692c:	f001 f8f4 	bl	407b18 <_Bfree>
  406930:	2201      	movs	r2, #1
  406932:	9b06      	ldr	r3, [sp, #24]
  406934:	e5e0      	b.n	4064f8 <_dtoa_r+0x5d8>
  406936:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406938:	2b02      	cmp	r3, #2
  40693a:	f77f ad96 	ble.w	40646a <_dtoa_r+0x54a>
  40693e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406940:	2b00      	cmp	r3, #0
  406942:	d1c9      	bne.n	4068d8 <_dtoa_r+0x9b8>
  406944:	4641      	mov	r1, r8
  406946:	2205      	movs	r2, #5
  406948:	4620      	mov	r0, r4
  40694a:	f001 f8ef 	bl	407b2c <__multadd>
  40694e:	4601      	mov	r1, r0
  406950:	4680      	mov	r8, r0
  406952:	4648      	mov	r0, r9
  406954:	f001 fab8 	bl	407ec8 <__mcmp>
  406958:	2800      	cmp	r0, #0
  40695a:	ddbd      	ble.n	4068d8 <_dtoa_r+0x9b8>
  40695c:	9a02      	ldr	r2, [sp, #8]
  40695e:	9904      	ldr	r1, [sp, #16]
  406960:	2331      	movs	r3, #49	; 0x31
  406962:	3201      	adds	r2, #1
  406964:	9202      	str	r2, [sp, #8]
  406966:	700b      	strb	r3, [r1, #0]
  406968:	1c4d      	adds	r5, r1, #1
  40696a:	e7b9      	b.n	4068e0 <_dtoa_r+0x9c0>
  40696c:	9a02      	ldr	r2, [sp, #8]
  40696e:	3201      	adds	r2, #1
  406970:	9202      	str	r2, [sp, #8]
  406972:	9a04      	ldr	r2, [sp, #16]
  406974:	2331      	movs	r3, #49	; 0x31
  406976:	7013      	strb	r3, [r2, #0]
  406978:	e652      	b.n	406620 <_dtoa_r+0x700>
  40697a:	2301      	movs	r3, #1
  40697c:	930b      	str	r3, [sp, #44]	; 0x2c
  40697e:	e666      	b.n	40664e <_dtoa_r+0x72e>
  406980:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  406984:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406986:	e48f      	b.n	4062a8 <_dtoa_r+0x388>
  406988:	00409b28 	.word	0x00409b28
  40698c:	00409b00 	.word	0x00409b00
  406990:	3ff00000 	.word	0x3ff00000
  406994:	401c0000 	.word	0x401c0000
  406998:	3fe00000 	.word	0x3fe00000
  40699c:	40240000 	.word	0x40240000
  4069a0:	40140000 	.word	0x40140000
  4069a4:	4650      	mov	r0, sl
  4069a6:	f7fc f9cd 	bl	402d44 <__aeabi_i2d>
  4069aa:	463a      	mov	r2, r7
  4069ac:	4643      	mov	r3, r8
  4069ae:	f7fc fa2f 	bl	402e10 <__aeabi_dmul>
  4069b2:	2200      	movs	r2, #0
  4069b4:	4bc1      	ldr	r3, [pc, #772]	; (406cbc <_dtoa_r+0xd9c>)
  4069b6:	f7fc f879 	bl	402aac <__adddf3>
  4069ba:	4605      	mov	r5, r0
  4069bc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4069c0:	4641      	mov	r1, r8
  4069c2:	2200      	movs	r2, #0
  4069c4:	4bbe      	ldr	r3, [pc, #760]	; (406cc0 <_dtoa_r+0xda0>)
  4069c6:	4638      	mov	r0, r7
  4069c8:	f7fc f86e 	bl	402aa8 <__aeabi_dsub>
  4069cc:	462a      	mov	r2, r5
  4069ce:	4633      	mov	r3, r6
  4069d0:	4682      	mov	sl, r0
  4069d2:	468b      	mov	fp, r1
  4069d4:	f7fc fcac 	bl	403330 <__aeabi_dcmpgt>
  4069d8:	4680      	mov	r8, r0
  4069da:	2800      	cmp	r0, #0
  4069dc:	f040 8110 	bne.w	406c00 <_dtoa_r+0xce0>
  4069e0:	462a      	mov	r2, r5
  4069e2:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  4069e6:	4650      	mov	r0, sl
  4069e8:	4659      	mov	r1, fp
  4069ea:	f7fc fc83 	bl	4032f4 <__aeabi_dcmplt>
  4069ee:	b118      	cbz	r0, 4069f8 <_dtoa_r+0xad8>
  4069f0:	4646      	mov	r6, r8
  4069f2:	e771      	b.n	4068d8 <_dtoa_r+0x9b8>
  4069f4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4069f8:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  4069fc:	f7ff bb8a 	b.w	406114 <_dtoa_r+0x1f4>
  406a00:	9804      	ldr	r0, [sp, #16]
  406a02:	f7ff babb 	b.w	405f7c <_dtoa_r+0x5c>
  406a06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406a08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  406a0a:	970c      	str	r7, [sp, #48]	; 0x30
  406a0c:	1afb      	subs	r3, r7, r3
  406a0e:	441a      	add	r2, r3
  406a10:	920d      	str	r2, [sp, #52]	; 0x34
  406a12:	2700      	movs	r7, #0
  406a14:	e469      	b.n	4062ea <_dtoa_r+0x3ca>
  406a16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  406a1a:	f04f 0a02 	mov.w	sl, #2
  406a1e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  406a22:	e657      	b.n	4066d4 <_dtoa_r+0x7b4>
  406a24:	2100      	movs	r1, #0
  406a26:	2301      	movs	r3, #1
  406a28:	6461      	str	r1, [r4, #68]	; 0x44
  406a2a:	4620      	mov	r0, r4
  406a2c:	9325      	str	r3, [sp, #148]	; 0x94
  406a2e:	f001 f84d 	bl	407acc <_Balloc>
  406a32:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406a34:	9004      	str	r0, [sp, #16]
  406a36:	6420      	str	r0, [r4, #64]	; 0x40
  406a38:	930a      	str	r3, [sp, #40]	; 0x28
  406a3a:	930f      	str	r3, [sp, #60]	; 0x3c
  406a3c:	e629      	b.n	406692 <_dtoa_r+0x772>
  406a3e:	2a00      	cmp	r2, #0
  406a40:	46d0      	mov	r8, sl
  406a42:	f8cd b018 	str.w	fp, [sp, #24]
  406a46:	469a      	mov	sl, r3
  406a48:	dd11      	ble.n	406a6e <_dtoa_r+0xb4e>
  406a4a:	4649      	mov	r1, r9
  406a4c:	2201      	movs	r2, #1
  406a4e:	4620      	mov	r0, r4
  406a50:	f001 f9e8 	bl	407e24 <__lshift>
  406a54:	4641      	mov	r1, r8
  406a56:	4681      	mov	r9, r0
  406a58:	f001 fa36 	bl	407ec8 <__mcmp>
  406a5c:	2800      	cmp	r0, #0
  406a5e:	f340 8146 	ble.w	406cee <_dtoa_r+0xdce>
  406a62:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  406a66:	f000 8106 	beq.w	406c76 <_dtoa_r+0xd56>
  406a6a:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  406a6e:	46b3      	mov	fp, r6
  406a70:	f887 a000 	strb.w	sl, [r7]
  406a74:	1c7d      	adds	r5, r7, #1
  406a76:	9e06      	ldr	r6, [sp, #24]
  406a78:	e5d2      	b.n	406620 <_dtoa_r+0x700>
  406a7a:	d104      	bne.n	406a86 <_dtoa_r+0xb66>
  406a7c:	f01a 0f01 	tst.w	sl, #1
  406a80:	d001      	beq.n	406a86 <_dtoa_r+0xb66>
  406a82:	e5bd      	b.n	406600 <_dtoa_r+0x6e0>
  406a84:	4615      	mov	r5, r2
  406a86:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406a8a:	2b30      	cmp	r3, #48	; 0x30
  406a8c:	f105 32ff 	add.w	r2, r5, #4294967295
  406a90:	d0f8      	beq.n	406a84 <_dtoa_r+0xb64>
  406a92:	e5c5      	b.n	406620 <_dtoa_r+0x700>
  406a94:	9904      	ldr	r1, [sp, #16]
  406a96:	2230      	movs	r2, #48	; 0x30
  406a98:	700a      	strb	r2, [r1, #0]
  406a9a:	9a02      	ldr	r2, [sp, #8]
  406a9c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  406aa0:	3201      	adds	r2, #1
  406aa2:	9202      	str	r2, [sp, #8]
  406aa4:	f7ff bbfc 	b.w	4062a0 <_dtoa_r+0x380>
  406aa8:	f000 80bb 	beq.w	406c22 <_dtoa_r+0xd02>
  406aac:	9b02      	ldr	r3, [sp, #8]
  406aae:	425d      	negs	r5, r3
  406ab0:	4b84      	ldr	r3, [pc, #528]	; (406cc4 <_dtoa_r+0xda4>)
  406ab2:	f005 020f 	and.w	r2, r5, #15
  406ab6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406aba:	e9d3 2300 	ldrd	r2, r3, [r3]
  406abe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  406ac2:	f7fc f9a5 	bl	402e10 <__aeabi_dmul>
  406ac6:	112d      	asrs	r5, r5, #4
  406ac8:	4607      	mov	r7, r0
  406aca:	4688      	mov	r8, r1
  406acc:	f000 812c 	beq.w	406d28 <_dtoa_r+0xe08>
  406ad0:	4e7d      	ldr	r6, [pc, #500]	; (406cc8 <_dtoa_r+0xda8>)
  406ad2:	f04f 0a02 	mov.w	sl, #2
  406ad6:	07eb      	lsls	r3, r5, #31
  406ad8:	d509      	bpl.n	406aee <_dtoa_r+0xbce>
  406ada:	4638      	mov	r0, r7
  406adc:	4641      	mov	r1, r8
  406ade:	e9d6 2300 	ldrd	r2, r3, [r6]
  406ae2:	f7fc f995 	bl	402e10 <__aeabi_dmul>
  406ae6:	f10a 0a01 	add.w	sl, sl, #1
  406aea:	4607      	mov	r7, r0
  406aec:	4688      	mov	r8, r1
  406aee:	106d      	asrs	r5, r5, #1
  406af0:	f106 0608 	add.w	r6, r6, #8
  406af4:	d1ef      	bne.n	406ad6 <_dtoa_r+0xbb6>
  406af6:	e608      	b.n	40670a <_dtoa_r+0x7ea>
  406af8:	6871      	ldr	r1, [r6, #4]
  406afa:	4620      	mov	r0, r4
  406afc:	f000 ffe6 	bl	407acc <_Balloc>
  406b00:	6933      	ldr	r3, [r6, #16]
  406b02:	3302      	adds	r3, #2
  406b04:	009a      	lsls	r2, r3, #2
  406b06:	4605      	mov	r5, r0
  406b08:	f106 010c 	add.w	r1, r6, #12
  406b0c:	300c      	adds	r0, #12
  406b0e:	f000 fedf 	bl	4078d0 <memcpy>
  406b12:	4629      	mov	r1, r5
  406b14:	2201      	movs	r2, #1
  406b16:	4620      	mov	r0, r4
  406b18:	f001 f984 	bl	407e24 <__lshift>
  406b1c:	9006      	str	r0, [sp, #24]
  406b1e:	e4b5      	b.n	40648c <_dtoa_r+0x56c>
  406b20:	2b39      	cmp	r3, #57	; 0x39
  406b22:	f8cd b018 	str.w	fp, [sp, #24]
  406b26:	46d0      	mov	r8, sl
  406b28:	f000 80a5 	beq.w	406c76 <_dtoa_r+0xd56>
  406b2c:	f103 0a01 	add.w	sl, r3, #1
  406b30:	46b3      	mov	fp, r6
  406b32:	f887 a000 	strb.w	sl, [r7]
  406b36:	1c7d      	adds	r5, r7, #1
  406b38:	9e06      	ldr	r6, [sp, #24]
  406b3a:	e571      	b.n	406620 <_dtoa_r+0x700>
  406b3c:	465a      	mov	r2, fp
  406b3e:	46d0      	mov	r8, sl
  406b40:	46b3      	mov	fp, r6
  406b42:	469a      	mov	sl, r3
  406b44:	4616      	mov	r6, r2
  406b46:	e54f      	b.n	4065e8 <_dtoa_r+0x6c8>
  406b48:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406b4a:	495e      	ldr	r1, [pc, #376]	; (406cc4 <_dtoa_r+0xda4>)
  406b4c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  406b50:	462a      	mov	r2, r5
  406b52:	4633      	mov	r3, r6
  406b54:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  406b58:	f7fc f95a 	bl	402e10 <__aeabi_dmul>
  406b5c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  406b60:	4638      	mov	r0, r7
  406b62:	4641      	mov	r1, r8
  406b64:	f001 ff96 	bl	408a94 <__aeabi_d2iz>
  406b68:	4605      	mov	r5, r0
  406b6a:	f7fc f8eb 	bl	402d44 <__aeabi_i2d>
  406b6e:	460b      	mov	r3, r1
  406b70:	4602      	mov	r2, r0
  406b72:	4641      	mov	r1, r8
  406b74:	4638      	mov	r0, r7
  406b76:	f7fb ff97 	bl	402aa8 <__aeabi_dsub>
  406b7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406b7c:	460f      	mov	r7, r1
  406b7e:	9904      	ldr	r1, [sp, #16]
  406b80:	3530      	adds	r5, #48	; 0x30
  406b82:	2b01      	cmp	r3, #1
  406b84:	700d      	strb	r5, [r1, #0]
  406b86:	4606      	mov	r6, r0
  406b88:	f101 0501 	add.w	r5, r1, #1
  406b8c:	d026      	beq.n	406bdc <_dtoa_r+0xcbc>
  406b8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406b90:	9a04      	ldr	r2, [sp, #16]
  406b92:	f8df b13c 	ldr.w	fp, [pc, #316]	; 406cd0 <_dtoa_r+0xdb0>
  406b96:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  406b9a:	4413      	add	r3, r2
  406b9c:	f04f 0a00 	mov.w	sl, #0
  406ba0:	4699      	mov	r9, r3
  406ba2:	4652      	mov	r2, sl
  406ba4:	465b      	mov	r3, fp
  406ba6:	4630      	mov	r0, r6
  406ba8:	4639      	mov	r1, r7
  406baa:	f7fc f931 	bl	402e10 <__aeabi_dmul>
  406bae:	460f      	mov	r7, r1
  406bb0:	4606      	mov	r6, r0
  406bb2:	f001 ff6f 	bl	408a94 <__aeabi_d2iz>
  406bb6:	4680      	mov	r8, r0
  406bb8:	f7fc f8c4 	bl	402d44 <__aeabi_i2d>
  406bbc:	f108 0830 	add.w	r8, r8, #48	; 0x30
  406bc0:	4602      	mov	r2, r0
  406bc2:	460b      	mov	r3, r1
  406bc4:	4630      	mov	r0, r6
  406bc6:	4639      	mov	r1, r7
  406bc8:	f7fb ff6e 	bl	402aa8 <__aeabi_dsub>
  406bcc:	f805 8b01 	strb.w	r8, [r5], #1
  406bd0:	454d      	cmp	r5, r9
  406bd2:	4606      	mov	r6, r0
  406bd4:	460f      	mov	r7, r1
  406bd6:	d1e4      	bne.n	406ba2 <_dtoa_r+0xc82>
  406bd8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406bdc:	4b3b      	ldr	r3, [pc, #236]	; (406ccc <_dtoa_r+0xdac>)
  406bde:	2200      	movs	r2, #0
  406be0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  406be4:	f7fb ff62 	bl	402aac <__adddf3>
  406be8:	4632      	mov	r2, r6
  406bea:	463b      	mov	r3, r7
  406bec:	f7fc fb82 	bl	4032f4 <__aeabi_dcmplt>
  406bf0:	2800      	cmp	r0, #0
  406bf2:	d046      	beq.n	406c82 <_dtoa_r+0xd62>
  406bf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406bf6:	9302      	str	r3, [sp, #8]
  406bf8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  406bfc:	f7ff bb43 	b.w	406286 <_dtoa_r+0x366>
  406c00:	f04f 0800 	mov.w	r8, #0
  406c04:	4646      	mov	r6, r8
  406c06:	e6a9      	b.n	40695c <_dtoa_r+0xa3c>
  406c08:	9b08      	ldr	r3, [sp, #32]
  406c0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406c0c:	1a9d      	subs	r5, r3, r2
  406c0e:	2300      	movs	r3, #0
  406c10:	f7ff bb71 	b.w	4062f6 <_dtoa_r+0x3d6>
  406c14:	9b18      	ldr	r3, [sp, #96]	; 0x60
  406c16:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406c18:	9d08      	ldr	r5, [sp, #32]
  406c1a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  406c1e:	f7ff bb6a 	b.w	4062f6 <_dtoa_r+0x3d6>
  406c22:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  406c26:	f04f 0a02 	mov.w	sl, #2
  406c2a:	e56e      	b.n	40670a <_dtoa_r+0x7ea>
  406c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406c2e:	2b00      	cmp	r3, #0
  406c30:	f43f aeb8 	beq.w	4069a4 <_dtoa_r+0xa84>
  406c34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406c36:	2b00      	cmp	r3, #0
  406c38:	f77f aede 	ble.w	4069f8 <_dtoa_r+0xad8>
  406c3c:	2200      	movs	r2, #0
  406c3e:	4b24      	ldr	r3, [pc, #144]	; (406cd0 <_dtoa_r+0xdb0>)
  406c40:	4638      	mov	r0, r7
  406c42:	4641      	mov	r1, r8
  406c44:	f7fc f8e4 	bl	402e10 <__aeabi_dmul>
  406c48:	4607      	mov	r7, r0
  406c4a:	4688      	mov	r8, r1
  406c4c:	f10a 0001 	add.w	r0, sl, #1
  406c50:	f7fc f878 	bl	402d44 <__aeabi_i2d>
  406c54:	463a      	mov	r2, r7
  406c56:	4643      	mov	r3, r8
  406c58:	f7fc f8da 	bl	402e10 <__aeabi_dmul>
  406c5c:	2200      	movs	r2, #0
  406c5e:	4b17      	ldr	r3, [pc, #92]	; (406cbc <_dtoa_r+0xd9c>)
  406c60:	f7fb ff24 	bl	402aac <__adddf3>
  406c64:	9a02      	ldr	r2, [sp, #8]
  406c66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406c68:	9312      	str	r3, [sp, #72]	; 0x48
  406c6a:	3a01      	subs	r2, #1
  406c6c:	4605      	mov	r5, r0
  406c6e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  406c72:	9215      	str	r2, [sp, #84]	; 0x54
  406c74:	e56a      	b.n	40674c <_dtoa_r+0x82c>
  406c76:	2239      	movs	r2, #57	; 0x39
  406c78:	46b3      	mov	fp, r6
  406c7a:	703a      	strb	r2, [r7, #0]
  406c7c:	9e06      	ldr	r6, [sp, #24]
  406c7e:	1c7d      	adds	r5, r7, #1
  406c80:	e4c0      	b.n	406604 <_dtoa_r+0x6e4>
  406c82:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  406c86:	2000      	movs	r0, #0
  406c88:	4910      	ldr	r1, [pc, #64]	; (406ccc <_dtoa_r+0xdac>)
  406c8a:	f7fb ff0d 	bl	402aa8 <__aeabi_dsub>
  406c8e:	4632      	mov	r2, r6
  406c90:	463b      	mov	r3, r7
  406c92:	f7fc fb4d 	bl	403330 <__aeabi_dcmpgt>
  406c96:	b908      	cbnz	r0, 406c9c <_dtoa_r+0xd7c>
  406c98:	e6ae      	b.n	4069f8 <_dtoa_r+0xad8>
  406c9a:	4615      	mov	r5, r2
  406c9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406ca0:	2b30      	cmp	r3, #48	; 0x30
  406ca2:	f105 32ff 	add.w	r2, r5, #4294967295
  406ca6:	d0f8      	beq.n	406c9a <_dtoa_r+0xd7a>
  406ca8:	e5d7      	b.n	40685a <_dtoa_r+0x93a>
  406caa:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406cae:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406cb0:	9302      	str	r3, [sp, #8]
  406cb2:	f7ff bae8 	b.w	406286 <_dtoa_r+0x366>
  406cb6:	970c      	str	r7, [sp, #48]	; 0x30
  406cb8:	f7ff bba5 	b.w	406406 <_dtoa_r+0x4e6>
  406cbc:	401c0000 	.word	0x401c0000
  406cc0:	40140000 	.word	0x40140000
  406cc4:	00409b28 	.word	0x00409b28
  406cc8:	00409b00 	.word	0x00409b00
  406ccc:	3fe00000 	.word	0x3fe00000
  406cd0:	40240000 	.word	0x40240000
  406cd4:	2b39      	cmp	r3, #57	; 0x39
  406cd6:	f8cd b018 	str.w	fp, [sp, #24]
  406cda:	46d0      	mov	r8, sl
  406cdc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  406ce0:	469a      	mov	sl, r3
  406ce2:	d0c8      	beq.n	406c76 <_dtoa_r+0xd56>
  406ce4:	f1bb 0f00 	cmp.w	fp, #0
  406ce8:	f73f aebf 	bgt.w	406a6a <_dtoa_r+0xb4a>
  406cec:	e6bf      	b.n	406a6e <_dtoa_r+0xb4e>
  406cee:	f47f aebe 	bne.w	406a6e <_dtoa_r+0xb4e>
  406cf2:	f01a 0f01 	tst.w	sl, #1
  406cf6:	f43f aeba 	beq.w	406a6e <_dtoa_r+0xb4e>
  406cfa:	e6b2      	b.n	406a62 <_dtoa_r+0xb42>
  406cfc:	f04f 0800 	mov.w	r8, #0
  406d00:	4646      	mov	r6, r8
  406d02:	e5e9      	b.n	4068d8 <_dtoa_r+0x9b8>
  406d04:	4631      	mov	r1, r6
  406d06:	2300      	movs	r3, #0
  406d08:	220a      	movs	r2, #10
  406d0a:	4620      	mov	r0, r4
  406d0c:	f000 ff0e 	bl	407b2c <__multadd>
  406d10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406d12:	2b00      	cmp	r3, #0
  406d14:	4606      	mov	r6, r0
  406d16:	dd0a      	ble.n	406d2e <_dtoa_r+0xe0e>
  406d18:	930a      	str	r3, [sp, #40]	; 0x28
  406d1a:	f7ff bbaa 	b.w	406472 <_dtoa_r+0x552>
  406d1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406d20:	2b02      	cmp	r3, #2
  406d22:	dc23      	bgt.n	406d6c <_dtoa_r+0xe4c>
  406d24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406d26:	e43b      	b.n	4065a0 <_dtoa_r+0x680>
  406d28:	f04f 0a02 	mov.w	sl, #2
  406d2c:	e4ed      	b.n	40670a <_dtoa_r+0x7ea>
  406d2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406d30:	2b02      	cmp	r3, #2
  406d32:	dc1b      	bgt.n	406d6c <_dtoa_r+0xe4c>
  406d34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406d36:	e7ef      	b.n	406d18 <_dtoa_r+0xdf8>
  406d38:	2500      	movs	r5, #0
  406d3a:	6465      	str	r5, [r4, #68]	; 0x44
  406d3c:	4629      	mov	r1, r5
  406d3e:	4620      	mov	r0, r4
  406d40:	f000 fec4 	bl	407acc <_Balloc>
  406d44:	f04f 33ff 	mov.w	r3, #4294967295
  406d48:	930a      	str	r3, [sp, #40]	; 0x28
  406d4a:	930f      	str	r3, [sp, #60]	; 0x3c
  406d4c:	2301      	movs	r3, #1
  406d4e:	9004      	str	r0, [sp, #16]
  406d50:	9525      	str	r5, [sp, #148]	; 0x94
  406d52:	6420      	str	r0, [r4, #64]	; 0x40
  406d54:	930b      	str	r3, [sp, #44]	; 0x2c
  406d56:	f7ff b9dd 	b.w	406114 <_dtoa_r+0x1f4>
  406d5a:	2501      	movs	r5, #1
  406d5c:	f7ff b9a5 	b.w	4060aa <_dtoa_r+0x18a>
  406d60:	f43f ab69 	beq.w	406436 <_dtoa_r+0x516>
  406d64:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  406d68:	f7ff bbf9 	b.w	40655e <_dtoa_r+0x63e>
  406d6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406d6e:	930a      	str	r3, [sp, #40]	; 0x28
  406d70:	e5e5      	b.n	40693e <_dtoa_r+0xa1e>
  406d72:	bf00      	nop

00406d74 <__sflush_r>:
  406d74:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  406d78:	b29a      	uxth	r2, r3
  406d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406d7e:	460d      	mov	r5, r1
  406d80:	0711      	lsls	r1, r2, #28
  406d82:	4680      	mov	r8, r0
  406d84:	d43a      	bmi.n	406dfc <__sflush_r+0x88>
  406d86:	686a      	ldr	r2, [r5, #4]
  406d88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  406d8c:	2a00      	cmp	r2, #0
  406d8e:	81ab      	strh	r3, [r5, #12]
  406d90:	dd6f      	ble.n	406e72 <__sflush_r+0xfe>
  406d92:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406d94:	2c00      	cmp	r4, #0
  406d96:	d049      	beq.n	406e2c <__sflush_r+0xb8>
  406d98:	2200      	movs	r2, #0
  406d9a:	b29b      	uxth	r3, r3
  406d9c:	f8d8 6000 	ldr.w	r6, [r8]
  406da0:	f8c8 2000 	str.w	r2, [r8]
  406da4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  406da8:	d067      	beq.n	406e7a <__sflush_r+0x106>
  406daa:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  406dac:	075f      	lsls	r7, r3, #29
  406dae:	d505      	bpl.n	406dbc <__sflush_r+0x48>
  406db0:	6869      	ldr	r1, [r5, #4]
  406db2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  406db4:	1a52      	subs	r2, r2, r1
  406db6:	b10b      	cbz	r3, 406dbc <__sflush_r+0x48>
  406db8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  406dba:	1ad2      	subs	r2, r2, r3
  406dbc:	2300      	movs	r3, #0
  406dbe:	69e9      	ldr	r1, [r5, #28]
  406dc0:	4640      	mov	r0, r8
  406dc2:	47a0      	blx	r4
  406dc4:	1c44      	adds	r4, r0, #1
  406dc6:	d03c      	beq.n	406e42 <__sflush_r+0xce>
  406dc8:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  406dcc:	692a      	ldr	r2, [r5, #16]
  406dce:	602a      	str	r2, [r5, #0]
  406dd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  406dd4:	2200      	movs	r2, #0
  406dd6:	81ab      	strh	r3, [r5, #12]
  406dd8:	04db      	lsls	r3, r3, #19
  406dda:	606a      	str	r2, [r5, #4]
  406ddc:	d447      	bmi.n	406e6e <__sflush_r+0xfa>
  406dde:	6b29      	ldr	r1, [r5, #48]	; 0x30
  406de0:	f8c8 6000 	str.w	r6, [r8]
  406de4:	b311      	cbz	r1, 406e2c <__sflush_r+0xb8>
  406de6:	f105 0340 	add.w	r3, r5, #64	; 0x40
  406dea:	4299      	cmp	r1, r3
  406dec:	d002      	beq.n	406df4 <__sflush_r+0x80>
  406dee:	4640      	mov	r0, r8
  406df0:	f000 f9de 	bl	4071b0 <_free_r>
  406df4:	2000      	movs	r0, #0
  406df6:	6328      	str	r0, [r5, #48]	; 0x30
  406df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406dfc:	692e      	ldr	r6, [r5, #16]
  406dfe:	b1ae      	cbz	r6, 406e2c <__sflush_r+0xb8>
  406e00:	682c      	ldr	r4, [r5, #0]
  406e02:	602e      	str	r6, [r5, #0]
  406e04:	0791      	lsls	r1, r2, #30
  406e06:	bf0c      	ite	eq
  406e08:	696b      	ldreq	r3, [r5, #20]
  406e0a:	2300      	movne	r3, #0
  406e0c:	1ba4      	subs	r4, r4, r6
  406e0e:	60ab      	str	r3, [r5, #8]
  406e10:	e00a      	b.n	406e28 <__sflush_r+0xb4>
  406e12:	4623      	mov	r3, r4
  406e14:	4632      	mov	r2, r6
  406e16:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  406e18:	69e9      	ldr	r1, [r5, #28]
  406e1a:	4640      	mov	r0, r8
  406e1c:	47b8      	blx	r7
  406e1e:	2800      	cmp	r0, #0
  406e20:	eba4 0400 	sub.w	r4, r4, r0
  406e24:	4406      	add	r6, r0
  406e26:	dd04      	ble.n	406e32 <__sflush_r+0xbe>
  406e28:	2c00      	cmp	r4, #0
  406e2a:	dcf2      	bgt.n	406e12 <__sflush_r+0x9e>
  406e2c:	2000      	movs	r0, #0
  406e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406e32:	89ab      	ldrh	r3, [r5, #12]
  406e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406e38:	81ab      	strh	r3, [r5, #12]
  406e3a:	f04f 30ff 	mov.w	r0, #4294967295
  406e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406e42:	f8d8 4000 	ldr.w	r4, [r8]
  406e46:	2c1d      	cmp	r4, #29
  406e48:	d8f3      	bhi.n	406e32 <__sflush_r+0xbe>
  406e4a:	4b19      	ldr	r3, [pc, #100]	; (406eb0 <__sflush_r+0x13c>)
  406e4c:	40e3      	lsrs	r3, r4
  406e4e:	43db      	mvns	r3, r3
  406e50:	f013 0301 	ands.w	r3, r3, #1
  406e54:	d1ed      	bne.n	406e32 <__sflush_r+0xbe>
  406e56:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  406e5a:	606b      	str	r3, [r5, #4]
  406e5c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  406e60:	6929      	ldr	r1, [r5, #16]
  406e62:	81ab      	strh	r3, [r5, #12]
  406e64:	04da      	lsls	r2, r3, #19
  406e66:	6029      	str	r1, [r5, #0]
  406e68:	d5b9      	bpl.n	406dde <__sflush_r+0x6a>
  406e6a:	2c00      	cmp	r4, #0
  406e6c:	d1b7      	bne.n	406dde <__sflush_r+0x6a>
  406e6e:	6528      	str	r0, [r5, #80]	; 0x50
  406e70:	e7b5      	b.n	406dde <__sflush_r+0x6a>
  406e72:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  406e74:	2a00      	cmp	r2, #0
  406e76:	dc8c      	bgt.n	406d92 <__sflush_r+0x1e>
  406e78:	e7d8      	b.n	406e2c <__sflush_r+0xb8>
  406e7a:	2301      	movs	r3, #1
  406e7c:	69e9      	ldr	r1, [r5, #28]
  406e7e:	4640      	mov	r0, r8
  406e80:	47a0      	blx	r4
  406e82:	1c43      	adds	r3, r0, #1
  406e84:	4602      	mov	r2, r0
  406e86:	d002      	beq.n	406e8e <__sflush_r+0x11a>
  406e88:	89ab      	ldrh	r3, [r5, #12]
  406e8a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406e8c:	e78e      	b.n	406dac <__sflush_r+0x38>
  406e8e:	f8d8 3000 	ldr.w	r3, [r8]
  406e92:	2b00      	cmp	r3, #0
  406e94:	d0f8      	beq.n	406e88 <__sflush_r+0x114>
  406e96:	2b1d      	cmp	r3, #29
  406e98:	d001      	beq.n	406e9e <__sflush_r+0x12a>
  406e9a:	2b16      	cmp	r3, #22
  406e9c:	d102      	bne.n	406ea4 <__sflush_r+0x130>
  406e9e:	f8c8 6000 	str.w	r6, [r8]
  406ea2:	e7c3      	b.n	406e2c <__sflush_r+0xb8>
  406ea4:	89ab      	ldrh	r3, [r5, #12]
  406ea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406eaa:	81ab      	strh	r3, [r5, #12]
  406eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406eb0:	20400001 	.word	0x20400001

00406eb4 <_fflush_r>:
  406eb4:	b538      	push	{r3, r4, r5, lr}
  406eb6:	460d      	mov	r5, r1
  406eb8:	4604      	mov	r4, r0
  406eba:	b108      	cbz	r0, 406ec0 <_fflush_r+0xc>
  406ebc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406ebe:	b1bb      	cbz	r3, 406ef0 <_fflush_r+0x3c>
  406ec0:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  406ec4:	b188      	cbz	r0, 406eea <_fflush_r+0x36>
  406ec6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  406ec8:	07db      	lsls	r3, r3, #31
  406eca:	d401      	bmi.n	406ed0 <_fflush_r+0x1c>
  406ecc:	0581      	lsls	r1, r0, #22
  406ece:	d517      	bpl.n	406f00 <_fflush_r+0x4c>
  406ed0:	4620      	mov	r0, r4
  406ed2:	4629      	mov	r1, r5
  406ed4:	f7ff ff4e 	bl	406d74 <__sflush_r>
  406ed8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  406eda:	07da      	lsls	r2, r3, #31
  406edc:	4604      	mov	r4, r0
  406ede:	d402      	bmi.n	406ee6 <_fflush_r+0x32>
  406ee0:	89ab      	ldrh	r3, [r5, #12]
  406ee2:	059b      	lsls	r3, r3, #22
  406ee4:	d507      	bpl.n	406ef6 <_fflush_r+0x42>
  406ee6:	4620      	mov	r0, r4
  406ee8:	bd38      	pop	{r3, r4, r5, pc}
  406eea:	4604      	mov	r4, r0
  406eec:	4620      	mov	r0, r4
  406eee:	bd38      	pop	{r3, r4, r5, pc}
  406ef0:	f000 f838 	bl	406f64 <__sinit>
  406ef4:	e7e4      	b.n	406ec0 <_fflush_r+0xc>
  406ef6:	6da8      	ldr	r0, [r5, #88]	; 0x58
  406ef8:	f000 fc04 	bl	407704 <__retarget_lock_release_recursive>
  406efc:	4620      	mov	r0, r4
  406efe:	bd38      	pop	{r3, r4, r5, pc}
  406f00:	6da8      	ldr	r0, [r5, #88]	; 0x58
  406f02:	f000 fbfd 	bl	407700 <__retarget_lock_acquire_recursive>
  406f06:	e7e3      	b.n	406ed0 <_fflush_r+0x1c>

00406f08 <_cleanup_r>:
  406f08:	4901      	ldr	r1, [pc, #4]	; (406f10 <_cleanup_r+0x8>)
  406f0a:	f000 bbaf 	b.w	40766c <_fwalk_reent>
  406f0e:	bf00      	nop
  406f10:	0040892d 	.word	0x0040892d

00406f14 <std.isra.0>:
  406f14:	b510      	push	{r4, lr}
  406f16:	2300      	movs	r3, #0
  406f18:	4604      	mov	r4, r0
  406f1a:	8181      	strh	r1, [r0, #12]
  406f1c:	81c2      	strh	r2, [r0, #14]
  406f1e:	6003      	str	r3, [r0, #0]
  406f20:	6043      	str	r3, [r0, #4]
  406f22:	6083      	str	r3, [r0, #8]
  406f24:	6643      	str	r3, [r0, #100]	; 0x64
  406f26:	6103      	str	r3, [r0, #16]
  406f28:	6143      	str	r3, [r0, #20]
  406f2a:	6183      	str	r3, [r0, #24]
  406f2c:	4619      	mov	r1, r3
  406f2e:	2208      	movs	r2, #8
  406f30:	305c      	adds	r0, #92	; 0x5c
  406f32:	f7fc fd61 	bl	4039f8 <memset>
  406f36:	4807      	ldr	r0, [pc, #28]	; (406f54 <std.isra.0+0x40>)
  406f38:	4907      	ldr	r1, [pc, #28]	; (406f58 <std.isra.0+0x44>)
  406f3a:	4a08      	ldr	r2, [pc, #32]	; (406f5c <std.isra.0+0x48>)
  406f3c:	4b08      	ldr	r3, [pc, #32]	; (406f60 <std.isra.0+0x4c>)
  406f3e:	6220      	str	r0, [r4, #32]
  406f40:	61e4      	str	r4, [r4, #28]
  406f42:	6261      	str	r1, [r4, #36]	; 0x24
  406f44:	62a2      	str	r2, [r4, #40]	; 0x28
  406f46:	62e3      	str	r3, [r4, #44]	; 0x2c
  406f48:	f104 0058 	add.w	r0, r4, #88	; 0x58
  406f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406f50:	f000 bbd2 	b.w	4076f8 <__retarget_lock_init_recursive>
  406f54:	0040840d 	.word	0x0040840d
  406f58:	00408431 	.word	0x00408431
  406f5c:	0040846d 	.word	0x0040846d
  406f60:	0040848d 	.word	0x0040848d

00406f64 <__sinit>:
  406f64:	b510      	push	{r4, lr}
  406f66:	4604      	mov	r4, r0
  406f68:	4812      	ldr	r0, [pc, #72]	; (406fb4 <__sinit+0x50>)
  406f6a:	f000 fbc9 	bl	407700 <__retarget_lock_acquire_recursive>
  406f6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  406f70:	b9d2      	cbnz	r2, 406fa8 <__sinit+0x44>
  406f72:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  406f76:	4810      	ldr	r0, [pc, #64]	; (406fb8 <__sinit+0x54>)
  406f78:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  406f7c:	2103      	movs	r1, #3
  406f7e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  406f82:	63e0      	str	r0, [r4, #60]	; 0x3c
  406f84:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  406f88:	6860      	ldr	r0, [r4, #4]
  406f8a:	2104      	movs	r1, #4
  406f8c:	f7ff ffc2 	bl	406f14 <std.isra.0>
  406f90:	2201      	movs	r2, #1
  406f92:	2109      	movs	r1, #9
  406f94:	68a0      	ldr	r0, [r4, #8]
  406f96:	f7ff ffbd 	bl	406f14 <std.isra.0>
  406f9a:	2202      	movs	r2, #2
  406f9c:	2112      	movs	r1, #18
  406f9e:	68e0      	ldr	r0, [r4, #12]
  406fa0:	f7ff ffb8 	bl	406f14 <std.isra.0>
  406fa4:	2301      	movs	r3, #1
  406fa6:	63a3      	str	r3, [r4, #56]	; 0x38
  406fa8:	4802      	ldr	r0, [pc, #8]	; (406fb4 <__sinit+0x50>)
  406faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406fae:	f000 bba9 	b.w	407704 <__retarget_lock_release_recursive>
  406fb2:	bf00      	nop
  406fb4:	20402fec 	.word	0x20402fec
  406fb8:	00406f09 	.word	0x00406f09

00406fbc <__sfp_lock_acquire>:
  406fbc:	4801      	ldr	r0, [pc, #4]	; (406fc4 <__sfp_lock_acquire+0x8>)
  406fbe:	f000 bb9f 	b.w	407700 <__retarget_lock_acquire_recursive>
  406fc2:	bf00      	nop
  406fc4:	20403000 	.word	0x20403000

00406fc8 <__sfp_lock_release>:
  406fc8:	4801      	ldr	r0, [pc, #4]	; (406fd0 <__sfp_lock_release+0x8>)
  406fca:	f000 bb9b 	b.w	407704 <__retarget_lock_release_recursive>
  406fce:	bf00      	nop
  406fd0:	20403000 	.word	0x20403000

00406fd4 <__libc_fini_array>:
  406fd4:	b538      	push	{r3, r4, r5, lr}
  406fd6:	4c0a      	ldr	r4, [pc, #40]	; (407000 <__libc_fini_array+0x2c>)
  406fd8:	4d0a      	ldr	r5, [pc, #40]	; (407004 <__libc_fini_array+0x30>)
  406fda:	1b64      	subs	r4, r4, r5
  406fdc:	10a4      	asrs	r4, r4, #2
  406fde:	d00a      	beq.n	406ff6 <__libc_fini_array+0x22>
  406fe0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  406fe4:	3b01      	subs	r3, #1
  406fe6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  406fea:	3c01      	subs	r4, #1
  406fec:	f855 3904 	ldr.w	r3, [r5], #-4
  406ff0:	4798      	blx	r3
  406ff2:	2c00      	cmp	r4, #0
  406ff4:	d1f9      	bne.n	406fea <__libc_fini_array+0x16>
  406ff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406ffa:	f002 be8b 	b.w	409d14 <_fini>
  406ffe:	bf00      	nop
  407000:	00409d24 	.word	0x00409d24
  407004:	00409d20 	.word	0x00409d20

00407008 <__fputwc>:
  407008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40700c:	b082      	sub	sp, #8
  40700e:	4680      	mov	r8, r0
  407010:	4689      	mov	r9, r1
  407012:	4614      	mov	r4, r2
  407014:	f000 fb54 	bl	4076c0 <__locale_mb_cur_max>
  407018:	2801      	cmp	r0, #1
  40701a:	d036      	beq.n	40708a <__fputwc+0x82>
  40701c:	464a      	mov	r2, r9
  40701e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  407022:	a901      	add	r1, sp, #4
  407024:	4640      	mov	r0, r8
  407026:	f001 fb8f 	bl	408748 <_wcrtomb_r>
  40702a:	1c42      	adds	r2, r0, #1
  40702c:	4606      	mov	r6, r0
  40702e:	d025      	beq.n	40707c <__fputwc+0x74>
  407030:	b3a8      	cbz	r0, 40709e <__fputwc+0x96>
  407032:	f89d e004 	ldrb.w	lr, [sp, #4]
  407036:	2500      	movs	r5, #0
  407038:	f10d 0a04 	add.w	sl, sp, #4
  40703c:	e009      	b.n	407052 <__fputwc+0x4a>
  40703e:	6823      	ldr	r3, [r4, #0]
  407040:	1c5a      	adds	r2, r3, #1
  407042:	6022      	str	r2, [r4, #0]
  407044:	f883 e000 	strb.w	lr, [r3]
  407048:	3501      	adds	r5, #1
  40704a:	42b5      	cmp	r5, r6
  40704c:	d227      	bcs.n	40709e <__fputwc+0x96>
  40704e:	f815 e00a 	ldrb.w	lr, [r5, sl]
  407052:	68a3      	ldr	r3, [r4, #8]
  407054:	3b01      	subs	r3, #1
  407056:	2b00      	cmp	r3, #0
  407058:	60a3      	str	r3, [r4, #8]
  40705a:	daf0      	bge.n	40703e <__fputwc+0x36>
  40705c:	69a7      	ldr	r7, [r4, #24]
  40705e:	42bb      	cmp	r3, r7
  407060:	4671      	mov	r1, lr
  407062:	4622      	mov	r2, r4
  407064:	4640      	mov	r0, r8
  407066:	db02      	blt.n	40706e <__fputwc+0x66>
  407068:	f1be 0f0a 	cmp.w	lr, #10
  40706c:	d1e7      	bne.n	40703e <__fputwc+0x36>
  40706e:	f001 fb13 	bl	408698 <__swbuf_r>
  407072:	1c43      	adds	r3, r0, #1
  407074:	d1e8      	bne.n	407048 <__fputwc+0x40>
  407076:	b002      	add	sp, #8
  407078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40707c:	89a3      	ldrh	r3, [r4, #12]
  40707e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407082:	81a3      	strh	r3, [r4, #12]
  407084:	b002      	add	sp, #8
  407086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40708a:	f109 33ff 	add.w	r3, r9, #4294967295
  40708e:	2bfe      	cmp	r3, #254	; 0xfe
  407090:	d8c4      	bhi.n	40701c <__fputwc+0x14>
  407092:	fa5f fe89 	uxtb.w	lr, r9
  407096:	4606      	mov	r6, r0
  407098:	f88d e004 	strb.w	lr, [sp, #4]
  40709c:	e7cb      	b.n	407036 <__fputwc+0x2e>
  40709e:	4648      	mov	r0, r9
  4070a0:	b002      	add	sp, #8
  4070a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4070a6:	bf00      	nop

004070a8 <_fputwc_r>:
  4070a8:	b530      	push	{r4, r5, lr}
  4070aa:	6e53      	ldr	r3, [r2, #100]	; 0x64
  4070ac:	f013 0f01 	tst.w	r3, #1
  4070b0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4070b4:	4614      	mov	r4, r2
  4070b6:	b083      	sub	sp, #12
  4070b8:	4605      	mov	r5, r0
  4070ba:	b29a      	uxth	r2, r3
  4070bc:	d101      	bne.n	4070c2 <_fputwc_r+0x1a>
  4070be:	0590      	lsls	r0, r2, #22
  4070c0:	d51c      	bpl.n	4070fc <_fputwc_r+0x54>
  4070c2:	0490      	lsls	r0, r2, #18
  4070c4:	d406      	bmi.n	4070d4 <_fputwc_r+0x2c>
  4070c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4070c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4070cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4070d0:	81a3      	strh	r3, [r4, #12]
  4070d2:	6662      	str	r2, [r4, #100]	; 0x64
  4070d4:	4628      	mov	r0, r5
  4070d6:	4622      	mov	r2, r4
  4070d8:	f7ff ff96 	bl	407008 <__fputwc>
  4070dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4070de:	07da      	lsls	r2, r3, #31
  4070e0:	4605      	mov	r5, r0
  4070e2:	d402      	bmi.n	4070ea <_fputwc_r+0x42>
  4070e4:	89a3      	ldrh	r3, [r4, #12]
  4070e6:	059b      	lsls	r3, r3, #22
  4070e8:	d502      	bpl.n	4070f0 <_fputwc_r+0x48>
  4070ea:	4628      	mov	r0, r5
  4070ec:	b003      	add	sp, #12
  4070ee:	bd30      	pop	{r4, r5, pc}
  4070f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4070f2:	f000 fb07 	bl	407704 <__retarget_lock_release_recursive>
  4070f6:	4628      	mov	r0, r5
  4070f8:	b003      	add	sp, #12
  4070fa:	bd30      	pop	{r4, r5, pc}
  4070fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4070fe:	9101      	str	r1, [sp, #4]
  407100:	f000 fafe 	bl	407700 <__retarget_lock_acquire_recursive>
  407104:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407108:	9901      	ldr	r1, [sp, #4]
  40710a:	b29a      	uxth	r2, r3
  40710c:	e7d9      	b.n	4070c2 <_fputwc_r+0x1a>
  40710e:	bf00      	nop

00407110 <_malloc_trim_r>:
  407110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407112:	4f24      	ldr	r7, [pc, #144]	; (4071a4 <_malloc_trim_r+0x94>)
  407114:	460c      	mov	r4, r1
  407116:	4606      	mov	r6, r0
  407118:	f7fc fcbc 	bl	403a94 <__malloc_lock>
  40711c:	68bb      	ldr	r3, [r7, #8]
  40711e:	685d      	ldr	r5, [r3, #4]
  407120:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  407124:	310f      	adds	r1, #15
  407126:	f025 0503 	bic.w	r5, r5, #3
  40712a:	4429      	add	r1, r5
  40712c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  407130:	f021 010f 	bic.w	r1, r1, #15
  407134:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  407138:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40713c:	db07      	blt.n	40714e <_malloc_trim_r+0x3e>
  40713e:	2100      	movs	r1, #0
  407140:	4630      	mov	r0, r6
  407142:	f7fc fcb3 	bl	403aac <_sbrk_r>
  407146:	68bb      	ldr	r3, [r7, #8]
  407148:	442b      	add	r3, r5
  40714a:	4298      	cmp	r0, r3
  40714c:	d004      	beq.n	407158 <_malloc_trim_r+0x48>
  40714e:	4630      	mov	r0, r6
  407150:	f7fc fca6 	bl	403aa0 <__malloc_unlock>
  407154:	2000      	movs	r0, #0
  407156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407158:	4261      	negs	r1, r4
  40715a:	4630      	mov	r0, r6
  40715c:	f7fc fca6 	bl	403aac <_sbrk_r>
  407160:	3001      	adds	r0, #1
  407162:	d00d      	beq.n	407180 <_malloc_trim_r+0x70>
  407164:	4b10      	ldr	r3, [pc, #64]	; (4071a8 <_malloc_trim_r+0x98>)
  407166:	68ba      	ldr	r2, [r7, #8]
  407168:	6819      	ldr	r1, [r3, #0]
  40716a:	1b2d      	subs	r5, r5, r4
  40716c:	f045 0501 	orr.w	r5, r5, #1
  407170:	4630      	mov	r0, r6
  407172:	1b09      	subs	r1, r1, r4
  407174:	6055      	str	r5, [r2, #4]
  407176:	6019      	str	r1, [r3, #0]
  407178:	f7fc fc92 	bl	403aa0 <__malloc_unlock>
  40717c:	2001      	movs	r0, #1
  40717e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407180:	2100      	movs	r1, #0
  407182:	4630      	mov	r0, r6
  407184:	f7fc fc92 	bl	403aac <_sbrk_r>
  407188:	68ba      	ldr	r2, [r7, #8]
  40718a:	1a83      	subs	r3, r0, r2
  40718c:	2b0f      	cmp	r3, #15
  40718e:	ddde      	ble.n	40714e <_malloc_trim_r+0x3e>
  407190:	4c06      	ldr	r4, [pc, #24]	; (4071ac <_malloc_trim_r+0x9c>)
  407192:	4905      	ldr	r1, [pc, #20]	; (4071a8 <_malloc_trim_r+0x98>)
  407194:	6824      	ldr	r4, [r4, #0]
  407196:	f043 0301 	orr.w	r3, r3, #1
  40719a:	1b00      	subs	r0, r0, r4
  40719c:	6053      	str	r3, [r2, #4]
  40719e:	6008      	str	r0, [r1, #0]
  4071a0:	e7d5      	b.n	40714e <_malloc_trim_r+0x3e>
  4071a2:	bf00      	nop
  4071a4:	20400470 	.word	0x20400470
  4071a8:	20400d94 	.word	0x20400d94
  4071ac:	20400878 	.word	0x20400878

004071b0 <_free_r>:
  4071b0:	2900      	cmp	r1, #0
  4071b2:	d044      	beq.n	40723e <_free_r+0x8e>
  4071b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4071b8:	460d      	mov	r5, r1
  4071ba:	4680      	mov	r8, r0
  4071bc:	f7fc fc6a 	bl	403a94 <__malloc_lock>
  4071c0:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4071c4:	4969      	ldr	r1, [pc, #420]	; (40736c <_free_r+0x1bc>)
  4071c6:	f027 0301 	bic.w	r3, r7, #1
  4071ca:	f1a5 0408 	sub.w	r4, r5, #8
  4071ce:	18e2      	adds	r2, r4, r3
  4071d0:	688e      	ldr	r6, [r1, #8]
  4071d2:	6850      	ldr	r0, [r2, #4]
  4071d4:	42b2      	cmp	r2, r6
  4071d6:	f020 0003 	bic.w	r0, r0, #3
  4071da:	d05e      	beq.n	40729a <_free_r+0xea>
  4071dc:	07fe      	lsls	r6, r7, #31
  4071de:	6050      	str	r0, [r2, #4]
  4071e0:	d40b      	bmi.n	4071fa <_free_r+0x4a>
  4071e2:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4071e6:	1be4      	subs	r4, r4, r7
  4071e8:	f101 0e08 	add.w	lr, r1, #8
  4071ec:	68a5      	ldr	r5, [r4, #8]
  4071ee:	4575      	cmp	r5, lr
  4071f0:	443b      	add	r3, r7
  4071f2:	d06d      	beq.n	4072d0 <_free_r+0x120>
  4071f4:	68e7      	ldr	r7, [r4, #12]
  4071f6:	60ef      	str	r7, [r5, #12]
  4071f8:	60bd      	str	r5, [r7, #8]
  4071fa:	1815      	adds	r5, r2, r0
  4071fc:	686d      	ldr	r5, [r5, #4]
  4071fe:	07ed      	lsls	r5, r5, #31
  407200:	d53e      	bpl.n	407280 <_free_r+0xd0>
  407202:	f043 0201 	orr.w	r2, r3, #1
  407206:	6062      	str	r2, [r4, #4]
  407208:	50e3      	str	r3, [r4, r3]
  40720a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40720e:	d217      	bcs.n	407240 <_free_r+0x90>
  407210:	08db      	lsrs	r3, r3, #3
  407212:	1c58      	adds	r0, r3, #1
  407214:	109a      	asrs	r2, r3, #2
  407216:	684d      	ldr	r5, [r1, #4]
  407218:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40721c:	60a7      	str	r7, [r4, #8]
  40721e:	2301      	movs	r3, #1
  407220:	4093      	lsls	r3, r2
  407222:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  407226:	432b      	orrs	r3, r5
  407228:	3a08      	subs	r2, #8
  40722a:	60e2      	str	r2, [r4, #12]
  40722c:	604b      	str	r3, [r1, #4]
  40722e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  407232:	60fc      	str	r4, [r7, #12]
  407234:	4640      	mov	r0, r8
  407236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40723a:	f7fc bc31 	b.w	403aa0 <__malloc_unlock>
  40723e:	4770      	bx	lr
  407240:	0a5a      	lsrs	r2, r3, #9
  407242:	2a04      	cmp	r2, #4
  407244:	d852      	bhi.n	4072ec <_free_r+0x13c>
  407246:	099a      	lsrs	r2, r3, #6
  407248:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40724c:	00ff      	lsls	r7, r7, #3
  40724e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  407252:	19c8      	adds	r0, r1, r7
  407254:	59ca      	ldr	r2, [r1, r7]
  407256:	3808      	subs	r0, #8
  407258:	4290      	cmp	r0, r2
  40725a:	d04f      	beq.n	4072fc <_free_r+0x14c>
  40725c:	6851      	ldr	r1, [r2, #4]
  40725e:	f021 0103 	bic.w	r1, r1, #3
  407262:	428b      	cmp	r3, r1
  407264:	d232      	bcs.n	4072cc <_free_r+0x11c>
  407266:	6892      	ldr	r2, [r2, #8]
  407268:	4290      	cmp	r0, r2
  40726a:	d1f7      	bne.n	40725c <_free_r+0xac>
  40726c:	68c3      	ldr	r3, [r0, #12]
  40726e:	60a0      	str	r0, [r4, #8]
  407270:	60e3      	str	r3, [r4, #12]
  407272:	609c      	str	r4, [r3, #8]
  407274:	60c4      	str	r4, [r0, #12]
  407276:	4640      	mov	r0, r8
  407278:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40727c:	f7fc bc10 	b.w	403aa0 <__malloc_unlock>
  407280:	6895      	ldr	r5, [r2, #8]
  407282:	4f3b      	ldr	r7, [pc, #236]	; (407370 <_free_r+0x1c0>)
  407284:	42bd      	cmp	r5, r7
  407286:	4403      	add	r3, r0
  407288:	d040      	beq.n	40730c <_free_r+0x15c>
  40728a:	68d0      	ldr	r0, [r2, #12]
  40728c:	60e8      	str	r0, [r5, #12]
  40728e:	f043 0201 	orr.w	r2, r3, #1
  407292:	6085      	str	r5, [r0, #8]
  407294:	6062      	str	r2, [r4, #4]
  407296:	50e3      	str	r3, [r4, r3]
  407298:	e7b7      	b.n	40720a <_free_r+0x5a>
  40729a:	07ff      	lsls	r7, r7, #31
  40729c:	4403      	add	r3, r0
  40729e:	d407      	bmi.n	4072b0 <_free_r+0x100>
  4072a0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4072a4:	1aa4      	subs	r4, r4, r2
  4072a6:	4413      	add	r3, r2
  4072a8:	68a0      	ldr	r0, [r4, #8]
  4072aa:	68e2      	ldr	r2, [r4, #12]
  4072ac:	60c2      	str	r2, [r0, #12]
  4072ae:	6090      	str	r0, [r2, #8]
  4072b0:	4a30      	ldr	r2, [pc, #192]	; (407374 <_free_r+0x1c4>)
  4072b2:	6812      	ldr	r2, [r2, #0]
  4072b4:	f043 0001 	orr.w	r0, r3, #1
  4072b8:	4293      	cmp	r3, r2
  4072ba:	6060      	str	r0, [r4, #4]
  4072bc:	608c      	str	r4, [r1, #8]
  4072be:	d3b9      	bcc.n	407234 <_free_r+0x84>
  4072c0:	4b2d      	ldr	r3, [pc, #180]	; (407378 <_free_r+0x1c8>)
  4072c2:	4640      	mov	r0, r8
  4072c4:	6819      	ldr	r1, [r3, #0]
  4072c6:	f7ff ff23 	bl	407110 <_malloc_trim_r>
  4072ca:	e7b3      	b.n	407234 <_free_r+0x84>
  4072cc:	4610      	mov	r0, r2
  4072ce:	e7cd      	b.n	40726c <_free_r+0xbc>
  4072d0:	1811      	adds	r1, r2, r0
  4072d2:	6849      	ldr	r1, [r1, #4]
  4072d4:	07c9      	lsls	r1, r1, #31
  4072d6:	d444      	bmi.n	407362 <_free_r+0x1b2>
  4072d8:	6891      	ldr	r1, [r2, #8]
  4072da:	68d2      	ldr	r2, [r2, #12]
  4072dc:	60ca      	str	r2, [r1, #12]
  4072de:	4403      	add	r3, r0
  4072e0:	f043 0001 	orr.w	r0, r3, #1
  4072e4:	6091      	str	r1, [r2, #8]
  4072e6:	6060      	str	r0, [r4, #4]
  4072e8:	50e3      	str	r3, [r4, r3]
  4072ea:	e7a3      	b.n	407234 <_free_r+0x84>
  4072ec:	2a14      	cmp	r2, #20
  4072ee:	d816      	bhi.n	40731e <_free_r+0x16e>
  4072f0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4072f4:	00ff      	lsls	r7, r7, #3
  4072f6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4072fa:	e7aa      	b.n	407252 <_free_r+0xa2>
  4072fc:	10aa      	asrs	r2, r5, #2
  4072fe:	2301      	movs	r3, #1
  407300:	684d      	ldr	r5, [r1, #4]
  407302:	4093      	lsls	r3, r2
  407304:	432b      	orrs	r3, r5
  407306:	604b      	str	r3, [r1, #4]
  407308:	4603      	mov	r3, r0
  40730a:	e7b0      	b.n	40726e <_free_r+0xbe>
  40730c:	f043 0201 	orr.w	r2, r3, #1
  407310:	614c      	str	r4, [r1, #20]
  407312:	610c      	str	r4, [r1, #16]
  407314:	60e5      	str	r5, [r4, #12]
  407316:	60a5      	str	r5, [r4, #8]
  407318:	6062      	str	r2, [r4, #4]
  40731a:	50e3      	str	r3, [r4, r3]
  40731c:	e78a      	b.n	407234 <_free_r+0x84>
  40731e:	2a54      	cmp	r2, #84	; 0x54
  407320:	d806      	bhi.n	407330 <_free_r+0x180>
  407322:	0b1a      	lsrs	r2, r3, #12
  407324:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  407328:	00ff      	lsls	r7, r7, #3
  40732a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40732e:	e790      	b.n	407252 <_free_r+0xa2>
  407330:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407334:	d806      	bhi.n	407344 <_free_r+0x194>
  407336:	0bda      	lsrs	r2, r3, #15
  407338:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40733c:	00ff      	lsls	r7, r7, #3
  40733e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  407342:	e786      	b.n	407252 <_free_r+0xa2>
  407344:	f240 5054 	movw	r0, #1364	; 0x554
  407348:	4282      	cmp	r2, r0
  40734a:	d806      	bhi.n	40735a <_free_r+0x1aa>
  40734c:	0c9a      	lsrs	r2, r3, #18
  40734e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  407352:	00ff      	lsls	r7, r7, #3
  407354:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  407358:	e77b      	b.n	407252 <_free_r+0xa2>
  40735a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40735e:	257e      	movs	r5, #126	; 0x7e
  407360:	e777      	b.n	407252 <_free_r+0xa2>
  407362:	f043 0101 	orr.w	r1, r3, #1
  407366:	6061      	str	r1, [r4, #4]
  407368:	6013      	str	r3, [r2, #0]
  40736a:	e763      	b.n	407234 <_free_r+0x84>
  40736c:	20400470 	.word	0x20400470
  407370:	20400478 	.word	0x20400478
  407374:	2040087c 	.word	0x2040087c
  407378:	20400dc4 	.word	0x20400dc4

0040737c <__sfvwrite_r>:
  40737c:	6893      	ldr	r3, [r2, #8]
  40737e:	2b00      	cmp	r3, #0
  407380:	d073      	beq.n	40746a <__sfvwrite_r+0xee>
  407382:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407386:	898b      	ldrh	r3, [r1, #12]
  407388:	b083      	sub	sp, #12
  40738a:	460c      	mov	r4, r1
  40738c:	0719      	lsls	r1, r3, #28
  40738e:	9000      	str	r0, [sp, #0]
  407390:	4616      	mov	r6, r2
  407392:	d526      	bpl.n	4073e2 <__sfvwrite_r+0x66>
  407394:	6922      	ldr	r2, [r4, #16]
  407396:	b322      	cbz	r2, 4073e2 <__sfvwrite_r+0x66>
  407398:	f013 0002 	ands.w	r0, r3, #2
  40739c:	6835      	ldr	r5, [r6, #0]
  40739e:	d02c      	beq.n	4073fa <__sfvwrite_r+0x7e>
  4073a0:	f04f 0900 	mov.w	r9, #0
  4073a4:	4fb0      	ldr	r7, [pc, #704]	; (407668 <__sfvwrite_r+0x2ec>)
  4073a6:	46c8      	mov	r8, r9
  4073a8:	46b2      	mov	sl, r6
  4073aa:	45b8      	cmp	r8, r7
  4073ac:	4643      	mov	r3, r8
  4073ae:	464a      	mov	r2, r9
  4073b0:	bf28      	it	cs
  4073b2:	463b      	movcs	r3, r7
  4073b4:	9800      	ldr	r0, [sp, #0]
  4073b6:	f1b8 0f00 	cmp.w	r8, #0
  4073ba:	d050      	beq.n	40745e <__sfvwrite_r+0xe2>
  4073bc:	69e1      	ldr	r1, [r4, #28]
  4073be:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4073c0:	47b0      	blx	r6
  4073c2:	2800      	cmp	r0, #0
  4073c4:	dd58      	ble.n	407478 <__sfvwrite_r+0xfc>
  4073c6:	f8da 3008 	ldr.w	r3, [sl, #8]
  4073ca:	1a1b      	subs	r3, r3, r0
  4073cc:	4481      	add	r9, r0
  4073ce:	eba8 0800 	sub.w	r8, r8, r0
  4073d2:	f8ca 3008 	str.w	r3, [sl, #8]
  4073d6:	2b00      	cmp	r3, #0
  4073d8:	d1e7      	bne.n	4073aa <__sfvwrite_r+0x2e>
  4073da:	2000      	movs	r0, #0
  4073dc:	b003      	add	sp, #12
  4073de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4073e2:	4621      	mov	r1, r4
  4073e4:	9800      	ldr	r0, [sp, #0]
  4073e6:	f7fe fc91 	bl	405d0c <__swsetup_r>
  4073ea:	2800      	cmp	r0, #0
  4073ec:	f040 8133 	bne.w	407656 <__sfvwrite_r+0x2da>
  4073f0:	89a3      	ldrh	r3, [r4, #12]
  4073f2:	6835      	ldr	r5, [r6, #0]
  4073f4:	f013 0002 	ands.w	r0, r3, #2
  4073f8:	d1d2      	bne.n	4073a0 <__sfvwrite_r+0x24>
  4073fa:	f013 0901 	ands.w	r9, r3, #1
  4073fe:	d145      	bne.n	40748c <__sfvwrite_r+0x110>
  407400:	464f      	mov	r7, r9
  407402:	9601      	str	r6, [sp, #4]
  407404:	b337      	cbz	r7, 407454 <__sfvwrite_r+0xd8>
  407406:	059a      	lsls	r2, r3, #22
  407408:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40740c:	f140 8083 	bpl.w	407516 <__sfvwrite_r+0x19a>
  407410:	4547      	cmp	r7, r8
  407412:	46c3      	mov	fp, r8
  407414:	f0c0 80ab 	bcc.w	40756e <__sfvwrite_r+0x1f2>
  407418:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40741c:	f040 80ac 	bne.w	407578 <__sfvwrite_r+0x1fc>
  407420:	6820      	ldr	r0, [r4, #0]
  407422:	46ba      	mov	sl, r7
  407424:	465a      	mov	r2, fp
  407426:	4649      	mov	r1, r9
  407428:	f000 faec 	bl	407a04 <memmove>
  40742c:	68a2      	ldr	r2, [r4, #8]
  40742e:	6823      	ldr	r3, [r4, #0]
  407430:	eba2 0208 	sub.w	r2, r2, r8
  407434:	445b      	add	r3, fp
  407436:	60a2      	str	r2, [r4, #8]
  407438:	6023      	str	r3, [r4, #0]
  40743a:	9a01      	ldr	r2, [sp, #4]
  40743c:	6893      	ldr	r3, [r2, #8]
  40743e:	eba3 030a 	sub.w	r3, r3, sl
  407442:	44d1      	add	r9, sl
  407444:	eba7 070a 	sub.w	r7, r7, sl
  407448:	6093      	str	r3, [r2, #8]
  40744a:	2b00      	cmp	r3, #0
  40744c:	d0c5      	beq.n	4073da <__sfvwrite_r+0x5e>
  40744e:	89a3      	ldrh	r3, [r4, #12]
  407450:	2f00      	cmp	r7, #0
  407452:	d1d8      	bne.n	407406 <__sfvwrite_r+0x8a>
  407454:	f8d5 9000 	ldr.w	r9, [r5]
  407458:	686f      	ldr	r7, [r5, #4]
  40745a:	3508      	adds	r5, #8
  40745c:	e7d2      	b.n	407404 <__sfvwrite_r+0x88>
  40745e:	f8d5 9000 	ldr.w	r9, [r5]
  407462:	f8d5 8004 	ldr.w	r8, [r5, #4]
  407466:	3508      	adds	r5, #8
  407468:	e79f      	b.n	4073aa <__sfvwrite_r+0x2e>
  40746a:	2000      	movs	r0, #0
  40746c:	4770      	bx	lr
  40746e:	4621      	mov	r1, r4
  407470:	9800      	ldr	r0, [sp, #0]
  407472:	f7ff fd1f 	bl	406eb4 <_fflush_r>
  407476:	b370      	cbz	r0, 4074d6 <__sfvwrite_r+0x15a>
  407478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40747c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407480:	f04f 30ff 	mov.w	r0, #4294967295
  407484:	81a3      	strh	r3, [r4, #12]
  407486:	b003      	add	sp, #12
  407488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40748c:	4681      	mov	r9, r0
  40748e:	4633      	mov	r3, r6
  407490:	464e      	mov	r6, r9
  407492:	46a8      	mov	r8, r5
  407494:	469a      	mov	sl, r3
  407496:	464d      	mov	r5, r9
  407498:	b34e      	cbz	r6, 4074ee <__sfvwrite_r+0x172>
  40749a:	b380      	cbz	r0, 4074fe <__sfvwrite_r+0x182>
  40749c:	6820      	ldr	r0, [r4, #0]
  40749e:	6923      	ldr	r3, [r4, #16]
  4074a0:	6962      	ldr	r2, [r4, #20]
  4074a2:	45b1      	cmp	r9, r6
  4074a4:	46cb      	mov	fp, r9
  4074a6:	bf28      	it	cs
  4074a8:	46b3      	movcs	fp, r6
  4074aa:	4298      	cmp	r0, r3
  4074ac:	465f      	mov	r7, fp
  4074ae:	d904      	bls.n	4074ba <__sfvwrite_r+0x13e>
  4074b0:	68a3      	ldr	r3, [r4, #8]
  4074b2:	4413      	add	r3, r2
  4074b4:	459b      	cmp	fp, r3
  4074b6:	f300 80a6 	bgt.w	407606 <__sfvwrite_r+0x28a>
  4074ba:	4593      	cmp	fp, r2
  4074bc:	db4b      	blt.n	407556 <__sfvwrite_r+0x1da>
  4074be:	4613      	mov	r3, r2
  4074c0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4074c2:	69e1      	ldr	r1, [r4, #28]
  4074c4:	9800      	ldr	r0, [sp, #0]
  4074c6:	462a      	mov	r2, r5
  4074c8:	47b8      	blx	r7
  4074ca:	1e07      	subs	r7, r0, #0
  4074cc:	ddd4      	ble.n	407478 <__sfvwrite_r+0xfc>
  4074ce:	ebb9 0907 	subs.w	r9, r9, r7
  4074d2:	d0cc      	beq.n	40746e <__sfvwrite_r+0xf2>
  4074d4:	2001      	movs	r0, #1
  4074d6:	f8da 3008 	ldr.w	r3, [sl, #8]
  4074da:	1bdb      	subs	r3, r3, r7
  4074dc:	443d      	add	r5, r7
  4074de:	1bf6      	subs	r6, r6, r7
  4074e0:	f8ca 3008 	str.w	r3, [sl, #8]
  4074e4:	2b00      	cmp	r3, #0
  4074e6:	f43f af78 	beq.w	4073da <__sfvwrite_r+0x5e>
  4074ea:	2e00      	cmp	r6, #0
  4074ec:	d1d5      	bne.n	40749a <__sfvwrite_r+0x11e>
  4074ee:	f108 0308 	add.w	r3, r8, #8
  4074f2:	e913 0060 	ldmdb	r3, {r5, r6}
  4074f6:	4698      	mov	r8, r3
  4074f8:	3308      	adds	r3, #8
  4074fa:	2e00      	cmp	r6, #0
  4074fc:	d0f9      	beq.n	4074f2 <__sfvwrite_r+0x176>
  4074fe:	4632      	mov	r2, r6
  407500:	210a      	movs	r1, #10
  407502:	4628      	mov	r0, r5
  407504:	f000 f994 	bl	407830 <memchr>
  407508:	2800      	cmp	r0, #0
  40750a:	f000 80a1 	beq.w	407650 <__sfvwrite_r+0x2d4>
  40750e:	3001      	adds	r0, #1
  407510:	eba0 0905 	sub.w	r9, r0, r5
  407514:	e7c2      	b.n	40749c <__sfvwrite_r+0x120>
  407516:	6820      	ldr	r0, [r4, #0]
  407518:	6923      	ldr	r3, [r4, #16]
  40751a:	4298      	cmp	r0, r3
  40751c:	d802      	bhi.n	407524 <__sfvwrite_r+0x1a8>
  40751e:	6963      	ldr	r3, [r4, #20]
  407520:	429f      	cmp	r7, r3
  407522:	d25d      	bcs.n	4075e0 <__sfvwrite_r+0x264>
  407524:	45b8      	cmp	r8, r7
  407526:	bf28      	it	cs
  407528:	46b8      	movcs	r8, r7
  40752a:	4642      	mov	r2, r8
  40752c:	4649      	mov	r1, r9
  40752e:	f000 fa69 	bl	407a04 <memmove>
  407532:	68a3      	ldr	r3, [r4, #8]
  407534:	6822      	ldr	r2, [r4, #0]
  407536:	eba3 0308 	sub.w	r3, r3, r8
  40753a:	4442      	add	r2, r8
  40753c:	60a3      	str	r3, [r4, #8]
  40753e:	6022      	str	r2, [r4, #0]
  407540:	b10b      	cbz	r3, 407546 <__sfvwrite_r+0x1ca>
  407542:	46c2      	mov	sl, r8
  407544:	e779      	b.n	40743a <__sfvwrite_r+0xbe>
  407546:	4621      	mov	r1, r4
  407548:	9800      	ldr	r0, [sp, #0]
  40754a:	f7ff fcb3 	bl	406eb4 <_fflush_r>
  40754e:	2800      	cmp	r0, #0
  407550:	d192      	bne.n	407478 <__sfvwrite_r+0xfc>
  407552:	46c2      	mov	sl, r8
  407554:	e771      	b.n	40743a <__sfvwrite_r+0xbe>
  407556:	465a      	mov	r2, fp
  407558:	4629      	mov	r1, r5
  40755a:	f000 fa53 	bl	407a04 <memmove>
  40755e:	68a2      	ldr	r2, [r4, #8]
  407560:	6823      	ldr	r3, [r4, #0]
  407562:	eba2 020b 	sub.w	r2, r2, fp
  407566:	445b      	add	r3, fp
  407568:	60a2      	str	r2, [r4, #8]
  40756a:	6023      	str	r3, [r4, #0]
  40756c:	e7af      	b.n	4074ce <__sfvwrite_r+0x152>
  40756e:	6820      	ldr	r0, [r4, #0]
  407570:	46b8      	mov	r8, r7
  407572:	46ba      	mov	sl, r7
  407574:	46bb      	mov	fp, r7
  407576:	e755      	b.n	407424 <__sfvwrite_r+0xa8>
  407578:	6962      	ldr	r2, [r4, #20]
  40757a:	6820      	ldr	r0, [r4, #0]
  40757c:	6921      	ldr	r1, [r4, #16]
  40757e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  407582:	eba0 0a01 	sub.w	sl, r0, r1
  407586:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40758a:	f10a 0001 	add.w	r0, sl, #1
  40758e:	ea4f 0868 	mov.w	r8, r8, asr #1
  407592:	4438      	add	r0, r7
  407594:	4540      	cmp	r0, r8
  407596:	4642      	mov	r2, r8
  407598:	bf84      	itt	hi
  40759a:	4680      	movhi	r8, r0
  40759c:	4642      	movhi	r2, r8
  40759e:	055b      	lsls	r3, r3, #21
  4075a0:	d544      	bpl.n	40762c <__sfvwrite_r+0x2b0>
  4075a2:	4611      	mov	r1, r2
  4075a4:	9800      	ldr	r0, [sp, #0]
  4075a6:	f7fb ff77 	bl	403498 <_malloc_r>
  4075aa:	4683      	mov	fp, r0
  4075ac:	2800      	cmp	r0, #0
  4075ae:	d055      	beq.n	40765c <__sfvwrite_r+0x2e0>
  4075b0:	4652      	mov	r2, sl
  4075b2:	6921      	ldr	r1, [r4, #16]
  4075b4:	f000 f98c 	bl	4078d0 <memcpy>
  4075b8:	89a3      	ldrh	r3, [r4, #12]
  4075ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4075be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4075c2:	81a3      	strh	r3, [r4, #12]
  4075c4:	eb0b 000a 	add.w	r0, fp, sl
  4075c8:	eba8 030a 	sub.w	r3, r8, sl
  4075cc:	f8c4 b010 	str.w	fp, [r4, #16]
  4075d0:	f8c4 8014 	str.w	r8, [r4, #20]
  4075d4:	6020      	str	r0, [r4, #0]
  4075d6:	60a3      	str	r3, [r4, #8]
  4075d8:	46b8      	mov	r8, r7
  4075da:	46ba      	mov	sl, r7
  4075dc:	46bb      	mov	fp, r7
  4075de:	e721      	b.n	407424 <__sfvwrite_r+0xa8>
  4075e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  4075e4:	42b9      	cmp	r1, r7
  4075e6:	bf28      	it	cs
  4075e8:	4639      	movcs	r1, r7
  4075ea:	464a      	mov	r2, r9
  4075ec:	fb91 f1f3 	sdiv	r1, r1, r3
  4075f0:	9800      	ldr	r0, [sp, #0]
  4075f2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4075f4:	fb03 f301 	mul.w	r3, r3, r1
  4075f8:	69e1      	ldr	r1, [r4, #28]
  4075fa:	47b0      	blx	r6
  4075fc:	f1b0 0a00 	subs.w	sl, r0, #0
  407600:	f73f af1b 	bgt.w	40743a <__sfvwrite_r+0xbe>
  407604:	e738      	b.n	407478 <__sfvwrite_r+0xfc>
  407606:	461a      	mov	r2, r3
  407608:	4629      	mov	r1, r5
  40760a:	9301      	str	r3, [sp, #4]
  40760c:	f000 f9fa 	bl	407a04 <memmove>
  407610:	6822      	ldr	r2, [r4, #0]
  407612:	9b01      	ldr	r3, [sp, #4]
  407614:	9800      	ldr	r0, [sp, #0]
  407616:	441a      	add	r2, r3
  407618:	6022      	str	r2, [r4, #0]
  40761a:	4621      	mov	r1, r4
  40761c:	f7ff fc4a 	bl	406eb4 <_fflush_r>
  407620:	9b01      	ldr	r3, [sp, #4]
  407622:	2800      	cmp	r0, #0
  407624:	f47f af28 	bne.w	407478 <__sfvwrite_r+0xfc>
  407628:	461f      	mov	r7, r3
  40762a:	e750      	b.n	4074ce <__sfvwrite_r+0x152>
  40762c:	9800      	ldr	r0, [sp, #0]
  40762e:	f000 fd47 	bl	4080c0 <_realloc_r>
  407632:	4683      	mov	fp, r0
  407634:	2800      	cmp	r0, #0
  407636:	d1c5      	bne.n	4075c4 <__sfvwrite_r+0x248>
  407638:	9d00      	ldr	r5, [sp, #0]
  40763a:	6921      	ldr	r1, [r4, #16]
  40763c:	4628      	mov	r0, r5
  40763e:	f7ff fdb7 	bl	4071b0 <_free_r>
  407642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407646:	220c      	movs	r2, #12
  407648:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40764c:	602a      	str	r2, [r5, #0]
  40764e:	e715      	b.n	40747c <__sfvwrite_r+0x100>
  407650:	f106 0901 	add.w	r9, r6, #1
  407654:	e722      	b.n	40749c <__sfvwrite_r+0x120>
  407656:	f04f 30ff 	mov.w	r0, #4294967295
  40765a:	e6bf      	b.n	4073dc <__sfvwrite_r+0x60>
  40765c:	9a00      	ldr	r2, [sp, #0]
  40765e:	230c      	movs	r3, #12
  407660:	6013      	str	r3, [r2, #0]
  407662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407666:	e709      	b.n	40747c <__sfvwrite_r+0x100>
  407668:	7ffffc00 	.word	0x7ffffc00

0040766c <_fwalk_reent>:
  40766c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407670:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  407674:	d01f      	beq.n	4076b6 <_fwalk_reent+0x4a>
  407676:	4688      	mov	r8, r1
  407678:	4606      	mov	r6, r0
  40767a:	f04f 0900 	mov.w	r9, #0
  40767e:	687d      	ldr	r5, [r7, #4]
  407680:	68bc      	ldr	r4, [r7, #8]
  407682:	3d01      	subs	r5, #1
  407684:	d411      	bmi.n	4076aa <_fwalk_reent+0x3e>
  407686:	89a3      	ldrh	r3, [r4, #12]
  407688:	2b01      	cmp	r3, #1
  40768a:	f105 35ff 	add.w	r5, r5, #4294967295
  40768e:	d908      	bls.n	4076a2 <_fwalk_reent+0x36>
  407690:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  407694:	3301      	adds	r3, #1
  407696:	4621      	mov	r1, r4
  407698:	4630      	mov	r0, r6
  40769a:	d002      	beq.n	4076a2 <_fwalk_reent+0x36>
  40769c:	47c0      	blx	r8
  40769e:	ea49 0900 	orr.w	r9, r9, r0
  4076a2:	1c6b      	adds	r3, r5, #1
  4076a4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4076a8:	d1ed      	bne.n	407686 <_fwalk_reent+0x1a>
  4076aa:	683f      	ldr	r7, [r7, #0]
  4076ac:	2f00      	cmp	r7, #0
  4076ae:	d1e6      	bne.n	40767e <_fwalk_reent+0x12>
  4076b0:	4648      	mov	r0, r9
  4076b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4076b6:	46b9      	mov	r9, r7
  4076b8:	4648      	mov	r0, r9
  4076ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4076be:	bf00      	nop

004076c0 <__locale_mb_cur_max>:
  4076c0:	4b04      	ldr	r3, [pc, #16]	; (4076d4 <__locale_mb_cur_max+0x14>)
  4076c2:	4a05      	ldr	r2, [pc, #20]	; (4076d8 <__locale_mb_cur_max+0x18>)
  4076c4:	681b      	ldr	r3, [r3, #0]
  4076c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4076c8:	2b00      	cmp	r3, #0
  4076ca:	bf08      	it	eq
  4076cc:	4613      	moveq	r3, r2
  4076ce:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4076d2:	4770      	bx	lr
  4076d4:	20400040 	.word	0x20400040
  4076d8:	20400884 	.word	0x20400884

004076dc <_localeconv_r>:
  4076dc:	4a04      	ldr	r2, [pc, #16]	; (4076f0 <_localeconv_r+0x14>)
  4076de:	4b05      	ldr	r3, [pc, #20]	; (4076f4 <_localeconv_r+0x18>)
  4076e0:	6812      	ldr	r2, [r2, #0]
  4076e2:	6b50      	ldr	r0, [r2, #52]	; 0x34
  4076e4:	2800      	cmp	r0, #0
  4076e6:	bf08      	it	eq
  4076e8:	4618      	moveq	r0, r3
  4076ea:	30f0      	adds	r0, #240	; 0xf0
  4076ec:	4770      	bx	lr
  4076ee:	bf00      	nop
  4076f0:	20400040 	.word	0x20400040
  4076f4:	20400884 	.word	0x20400884

004076f8 <__retarget_lock_init_recursive>:
  4076f8:	4770      	bx	lr
  4076fa:	bf00      	nop

004076fc <__retarget_lock_close_recursive>:
  4076fc:	4770      	bx	lr
  4076fe:	bf00      	nop

00407700 <__retarget_lock_acquire_recursive>:
  407700:	4770      	bx	lr
  407702:	bf00      	nop

00407704 <__retarget_lock_release_recursive>:
  407704:	4770      	bx	lr
  407706:	bf00      	nop

00407708 <__swhatbuf_r>:
  407708:	b570      	push	{r4, r5, r6, lr}
  40770a:	460c      	mov	r4, r1
  40770c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407710:	2900      	cmp	r1, #0
  407712:	b090      	sub	sp, #64	; 0x40
  407714:	4615      	mov	r5, r2
  407716:	461e      	mov	r6, r3
  407718:	db14      	blt.n	407744 <__swhatbuf_r+0x3c>
  40771a:	aa01      	add	r2, sp, #4
  40771c:	f001 f968 	bl	4089f0 <_fstat_r>
  407720:	2800      	cmp	r0, #0
  407722:	db0f      	blt.n	407744 <__swhatbuf_r+0x3c>
  407724:	9a02      	ldr	r2, [sp, #8]
  407726:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40772a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40772e:	fab2 f282 	clz	r2, r2
  407732:	0952      	lsrs	r2, r2, #5
  407734:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407738:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40773c:	6032      	str	r2, [r6, #0]
  40773e:	602b      	str	r3, [r5, #0]
  407740:	b010      	add	sp, #64	; 0x40
  407742:	bd70      	pop	{r4, r5, r6, pc}
  407744:	89a2      	ldrh	r2, [r4, #12]
  407746:	2300      	movs	r3, #0
  407748:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40774c:	6033      	str	r3, [r6, #0]
  40774e:	d004      	beq.n	40775a <__swhatbuf_r+0x52>
  407750:	2240      	movs	r2, #64	; 0x40
  407752:	4618      	mov	r0, r3
  407754:	602a      	str	r2, [r5, #0]
  407756:	b010      	add	sp, #64	; 0x40
  407758:	bd70      	pop	{r4, r5, r6, pc}
  40775a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40775e:	602b      	str	r3, [r5, #0]
  407760:	b010      	add	sp, #64	; 0x40
  407762:	bd70      	pop	{r4, r5, r6, pc}

00407764 <__smakebuf_r>:
  407764:	898a      	ldrh	r2, [r1, #12]
  407766:	0792      	lsls	r2, r2, #30
  407768:	460b      	mov	r3, r1
  40776a:	d506      	bpl.n	40777a <__smakebuf_r+0x16>
  40776c:	f101 0243 	add.w	r2, r1, #67	; 0x43
  407770:	2101      	movs	r1, #1
  407772:	601a      	str	r2, [r3, #0]
  407774:	611a      	str	r2, [r3, #16]
  407776:	6159      	str	r1, [r3, #20]
  407778:	4770      	bx	lr
  40777a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40777c:	b083      	sub	sp, #12
  40777e:	ab01      	add	r3, sp, #4
  407780:	466a      	mov	r2, sp
  407782:	460c      	mov	r4, r1
  407784:	4606      	mov	r6, r0
  407786:	f7ff ffbf 	bl	407708 <__swhatbuf_r>
  40778a:	9900      	ldr	r1, [sp, #0]
  40778c:	4605      	mov	r5, r0
  40778e:	4630      	mov	r0, r6
  407790:	f7fb fe82 	bl	403498 <_malloc_r>
  407794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407798:	b1d8      	cbz	r0, 4077d2 <__smakebuf_r+0x6e>
  40779a:	9a01      	ldr	r2, [sp, #4]
  40779c:	4f15      	ldr	r7, [pc, #84]	; (4077f4 <__smakebuf_r+0x90>)
  40779e:	9900      	ldr	r1, [sp, #0]
  4077a0:	63f7      	str	r7, [r6, #60]	; 0x3c
  4077a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4077a6:	81a3      	strh	r3, [r4, #12]
  4077a8:	6020      	str	r0, [r4, #0]
  4077aa:	6120      	str	r0, [r4, #16]
  4077ac:	6161      	str	r1, [r4, #20]
  4077ae:	b91a      	cbnz	r2, 4077b8 <__smakebuf_r+0x54>
  4077b0:	432b      	orrs	r3, r5
  4077b2:	81a3      	strh	r3, [r4, #12]
  4077b4:	b003      	add	sp, #12
  4077b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4077b8:	4630      	mov	r0, r6
  4077ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4077be:	f001 f92b 	bl	408a18 <_isatty_r>
  4077c2:	b1a0      	cbz	r0, 4077ee <__smakebuf_r+0x8a>
  4077c4:	89a3      	ldrh	r3, [r4, #12]
  4077c6:	f023 0303 	bic.w	r3, r3, #3
  4077ca:	f043 0301 	orr.w	r3, r3, #1
  4077ce:	b21b      	sxth	r3, r3
  4077d0:	e7ee      	b.n	4077b0 <__smakebuf_r+0x4c>
  4077d2:	059a      	lsls	r2, r3, #22
  4077d4:	d4ee      	bmi.n	4077b4 <__smakebuf_r+0x50>
  4077d6:	f023 0303 	bic.w	r3, r3, #3
  4077da:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4077de:	f043 0302 	orr.w	r3, r3, #2
  4077e2:	2101      	movs	r1, #1
  4077e4:	81a3      	strh	r3, [r4, #12]
  4077e6:	6022      	str	r2, [r4, #0]
  4077e8:	6122      	str	r2, [r4, #16]
  4077ea:	6161      	str	r1, [r4, #20]
  4077ec:	e7e2      	b.n	4077b4 <__smakebuf_r+0x50>
  4077ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4077f2:	e7dd      	b.n	4077b0 <__smakebuf_r+0x4c>
  4077f4:	00406f09 	.word	0x00406f09

004077f8 <__ascii_mbtowc>:
  4077f8:	b082      	sub	sp, #8
  4077fa:	b149      	cbz	r1, 407810 <__ascii_mbtowc+0x18>
  4077fc:	b15a      	cbz	r2, 407816 <__ascii_mbtowc+0x1e>
  4077fe:	b16b      	cbz	r3, 40781c <__ascii_mbtowc+0x24>
  407800:	7813      	ldrb	r3, [r2, #0]
  407802:	600b      	str	r3, [r1, #0]
  407804:	7812      	ldrb	r2, [r2, #0]
  407806:	1c10      	adds	r0, r2, #0
  407808:	bf18      	it	ne
  40780a:	2001      	movne	r0, #1
  40780c:	b002      	add	sp, #8
  40780e:	4770      	bx	lr
  407810:	a901      	add	r1, sp, #4
  407812:	2a00      	cmp	r2, #0
  407814:	d1f3      	bne.n	4077fe <__ascii_mbtowc+0x6>
  407816:	4610      	mov	r0, r2
  407818:	b002      	add	sp, #8
  40781a:	4770      	bx	lr
  40781c:	f06f 0001 	mvn.w	r0, #1
  407820:	e7f4      	b.n	40780c <__ascii_mbtowc+0x14>
  407822:	bf00      	nop
	...

00407830 <memchr>:
  407830:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  407834:	2a10      	cmp	r2, #16
  407836:	db2b      	blt.n	407890 <memchr+0x60>
  407838:	f010 0f07 	tst.w	r0, #7
  40783c:	d008      	beq.n	407850 <memchr+0x20>
  40783e:	f810 3b01 	ldrb.w	r3, [r0], #1
  407842:	3a01      	subs	r2, #1
  407844:	428b      	cmp	r3, r1
  407846:	d02d      	beq.n	4078a4 <memchr+0x74>
  407848:	f010 0f07 	tst.w	r0, #7
  40784c:	b342      	cbz	r2, 4078a0 <memchr+0x70>
  40784e:	d1f6      	bne.n	40783e <memchr+0xe>
  407850:	b4f0      	push	{r4, r5, r6, r7}
  407852:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  407856:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40785a:	f022 0407 	bic.w	r4, r2, #7
  40785e:	f07f 0700 	mvns.w	r7, #0
  407862:	2300      	movs	r3, #0
  407864:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  407868:	3c08      	subs	r4, #8
  40786a:	ea85 0501 	eor.w	r5, r5, r1
  40786e:	ea86 0601 	eor.w	r6, r6, r1
  407872:	fa85 f547 	uadd8	r5, r5, r7
  407876:	faa3 f587 	sel	r5, r3, r7
  40787a:	fa86 f647 	uadd8	r6, r6, r7
  40787e:	faa5 f687 	sel	r6, r5, r7
  407882:	b98e      	cbnz	r6, 4078a8 <memchr+0x78>
  407884:	d1ee      	bne.n	407864 <memchr+0x34>
  407886:	bcf0      	pop	{r4, r5, r6, r7}
  407888:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40788c:	f002 0207 	and.w	r2, r2, #7
  407890:	b132      	cbz	r2, 4078a0 <memchr+0x70>
  407892:	f810 3b01 	ldrb.w	r3, [r0], #1
  407896:	3a01      	subs	r2, #1
  407898:	ea83 0301 	eor.w	r3, r3, r1
  40789c:	b113      	cbz	r3, 4078a4 <memchr+0x74>
  40789e:	d1f8      	bne.n	407892 <memchr+0x62>
  4078a0:	2000      	movs	r0, #0
  4078a2:	4770      	bx	lr
  4078a4:	3801      	subs	r0, #1
  4078a6:	4770      	bx	lr
  4078a8:	2d00      	cmp	r5, #0
  4078aa:	bf06      	itte	eq
  4078ac:	4635      	moveq	r5, r6
  4078ae:	3803      	subeq	r0, #3
  4078b0:	3807      	subne	r0, #7
  4078b2:	f015 0f01 	tst.w	r5, #1
  4078b6:	d107      	bne.n	4078c8 <memchr+0x98>
  4078b8:	3001      	adds	r0, #1
  4078ba:	f415 7f80 	tst.w	r5, #256	; 0x100
  4078be:	bf02      	ittt	eq
  4078c0:	3001      	addeq	r0, #1
  4078c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4078c6:	3001      	addeq	r0, #1
  4078c8:	bcf0      	pop	{r4, r5, r6, r7}
  4078ca:	3801      	subs	r0, #1
  4078cc:	4770      	bx	lr
  4078ce:	bf00      	nop

004078d0 <memcpy>:
  4078d0:	4684      	mov	ip, r0
  4078d2:	ea41 0300 	orr.w	r3, r1, r0
  4078d6:	f013 0303 	ands.w	r3, r3, #3
  4078da:	d16d      	bne.n	4079b8 <memcpy+0xe8>
  4078dc:	3a40      	subs	r2, #64	; 0x40
  4078de:	d341      	bcc.n	407964 <memcpy+0x94>
  4078e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4078e4:	f840 3b04 	str.w	r3, [r0], #4
  4078e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4078ec:	f840 3b04 	str.w	r3, [r0], #4
  4078f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4078f4:	f840 3b04 	str.w	r3, [r0], #4
  4078f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4078fc:	f840 3b04 	str.w	r3, [r0], #4
  407900:	f851 3b04 	ldr.w	r3, [r1], #4
  407904:	f840 3b04 	str.w	r3, [r0], #4
  407908:	f851 3b04 	ldr.w	r3, [r1], #4
  40790c:	f840 3b04 	str.w	r3, [r0], #4
  407910:	f851 3b04 	ldr.w	r3, [r1], #4
  407914:	f840 3b04 	str.w	r3, [r0], #4
  407918:	f851 3b04 	ldr.w	r3, [r1], #4
  40791c:	f840 3b04 	str.w	r3, [r0], #4
  407920:	f851 3b04 	ldr.w	r3, [r1], #4
  407924:	f840 3b04 	str.w	r3, [r0], #4
  407928:	f851 3b04 	ldr.w	r3, [r1], #4
  40792c:	f840 3b04 	str.w	r3, [r0], #4
  407930:	f851 3b04 	ldr.w	r3, [r1], #4
  407934:	f840 3b04 	str.w	r3, [r0], #4
  407938:	f851 3b04 	ldr.w	r3, [r1], #4
  40793c:	f840 3b04 	str.w	r3, [r0], #4
  407940:	f851 3b04 	ldr.w	r3, [r1], #4
  407944:	f840 3b04 	str.w	r3, [r0], #4
  407948:	f851 3b04 	ldr.w	r3, [r1], #4
  40794c:	f840 3b04 	str.w	r3, [r0], #4
  407950:	f851 3b04 	ldr.w	r3, [r1], #4
  407954:	f840 3b04 	str.w	r3, [r0], #4
  407958:	f851 3b04 	ldr.w	r3, [r1], #4
  40795c:	f840 3b04 	str.w	r3, [r0], #4
  407960:	3a40      	subs	r2, #64	; 0x40
  407962:	d2bd      	bcs.n	4078e0 <memcpy+0x10>
  407964:	3230      	adds	r2, #48	; 0x30
  407966:	d311      	bcc.n	40798c <memcpy+0xbc>
  407968:	f851 3b04 	ldr.w	r3, [r1], #4
  40796c:	f840 3b04 	str.w	r3, [r0], #4
  407970:	f851 3b04 	ldr.w	r3, [r1], #4
  407974:	f840 3b04 	str.w	r3, [r0], #4
  407978:	f851 3b04 	ldr.w	r3, [r1], #4
  40797c:	f840 3b04 	str.w	r3, [r0], #4
  407980:	f851 3b04 	ldr.w	r3, [r1], #4
  407984:	f840 3b04 	str.w	r3, [r0], #4
  407988:	3a10      	subs	r2, #16
  40798a:	d2ed      	bcs.n	407968 <memcpy+0x98>
  40798c:	320c      	adds	r2, #12
  40798e:	d305      	bcc.n	40799c <memcpy+0xcc>
  407990:	f851 3b04 	ldr.w	r3, [r1], #4
  407994:	f840 3b04 	str.w	r3, [r0], #4
  407998:	3a04      	subs	r2, #4
  40799a:	d2f9      	bcs.n	407990 <memcpy+0xc0>
  40799c:	3204      	adds	r2, #4
  40799e:	d008      	beq.n	4079b2 <memcpy+0xe2>
  4079a0:	07d2      	lsls	r2, r2, #31
  4079a2:	bf1c      	itt	ne
  4079a4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4079a8:	f800 3b01 	strbne.w	r3, [r0], #1
  4079ac:	d301      	bcc.n	4079b2 <memcpy+0xe2>
  4079ae:	880b      	ldrh	r3, [r1, #0]
  4079b0:	8003      	strh	r3, [r0, #0]
  4079b2:	4660      	mov	r0, ip
  4079b4:	4770      	bx	lr
  4079b6:	bf00      	nop
  4079b8:	2a08      	cmp	r2, #8
  4079ba:	d313      	bcc.n	4079e4 <memcpy+0x114>
  4079bc:	078b      	lsls	r3, r1, #30
  4079be:	d08d      	beq.n	4078dc <memcpy+0xc>
  4079c0:	f010 0303 	ands.w	r3, r0, #3
  4079c4:	d08a      	beq.n	4078dc <memcpy+0xc>
  4079c6:	f1c3 0304 	rsb	r3, r3, #4
  4079ca:	1ad2      	subs	r2, r2, r3
  4079cc:	07db      	lsls	r3, r3, #31
  4079ce:	bf1c      	itt	ne
  4079d0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4079d4:	f800 3b01 	strbne.w	r3, [r0], #1
  4079d8:	d380      	bcc.n	4078dc <memcpy+0xc>
  4079da:	f831 3b02 	ldrh.w	r3, [r1], #2
  4079de:	f820 3b02 	strh.w	r3, [r0], #2
  4079e2:	e77b      	b.n	4078dc <memcpy+0xc>
  4079e4:	3a04      	subs	r2, #4
  4079e6:	d3d9      	bcc.n	40799c <memcpy+0xcc>
  4079e8:	3a01      	subs	r2, #1
  4079ea:	f811 3b01 	ldrb.w	r3, [r1], #1
  4079ee:	f800 3b01 	strb.w	r3, [r0], #1
  4079f2:	d2f9      	bcs.n	4079e8 <memcpy+0x118>
  4079f4:	780b      	ldrb	r3, [r1, #0]
  4079f6:	7003      	strb	r3, [r0, #0]
  4079f8:	784b      	ldrb	r3, [r1, #1]
  4079fa:	7043      	strb	r3, [r0, #1]
  4079fc:	788b      	ldrb	r3, [r1, #2]
  4079fe:	7083      	strb	r3, [r0, #2]
  407a00:	4660      	mov	r0, ip
  407a02:	4770      	bx	lr

00407a04 <memmove>:
  407a04:	4288      	cmp	r0, r1
  407a06:	b5f0      	push	{r4, r5, r6, r7, lr}
  407a08:	d90d      	bls.n	407a26 <memmove+0x22>
  407a0a:	188b      	adds	r3, r1, r2
  407a0c:	4298      	cmp	r0, r3
  407a0e:	d20a      	bcs.n	407a26 <memmove+0x22>
  407a10:	1884      	adds	r4, r0, r2
  407a12:	2a00      	cmp	r2, #0
  407a14:	d051      	beq.n	407aba <memmove+0xb6>
  407a16:	4622      	mov	r2, r4
  407a18:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  407a1c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  407a20:	4299      	cmp	r1, r3
  407a22:	d1f9      	bne.n	407a18 <memmove+0x14>
  407a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407a26:	2a0f      	cmp	r2, #15
  407a28:	d948      	bls.n	407abc <memmove+0xb8>
  407a2a:	ea41 0300 	orr.w	r3, r1, r0
  407a2e:	079b      	lsls	r3, r3, #30
  407a30:	d146      	bne.n	407ac0 <memmove+0xbc>
  407a32:	f100 0410 	add.w	r4, r0, #16
  407a36:	f101 0310 	add.w	r3, r1, #16
  407a3a:	4615      	mov	r5, r2
  407a3c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  407a40:	f844 6c10 	str.w	r6, [r4, #-16]
  407a44:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  407a48:	f844 6c0c 	str.w	r6, [r4, #-12]
  407a4c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  407a50:	f844 6c08 	str.w	r6, [r4, #-8]
  407a54:	3d10      	subs	r5, #16
  407a56:	f853 6c04 	ldr.w	r6, [r3, #-4]
  407a5a:	f844 6c04 	str.w	r6, [r4, #-4]
  407a5e:	2d0f      	cmp	r5, #15
  407a60:	f103 0310 	add.w	r3, r3, #16
  407a64:	f104 0410 	add.w	r4, r4, #16
  407a68:	d8e8      	bhi.n	407a3c <memmove+0x38>
  407a6a:	f1a2 0310 	sub.w	r3, r2, #16
  407a6e:	f023 030f 	bic.w	r3, r3, #15
  407a72:	f002 0e0f 	and.w	lr, r2, #15
  407a76:	3310      	adds	r3, #16
  407a78:	f1be 0f03 	cmp.w	lr, #3
  407a7c:	4419      	add	r1, r3
  407a7e:	4403      	add	r3, r0
  407a80:	d921      	bls.n	407ac6 <memmove+0xc2>
  407a82:	1f1e      	subs	r6, r3, #4
  407a84:	460d      	mov	r5, r1
  407a86:	4674      	mov	r4, lr
  407a88:	3c04      	subs	r4, #4
  407a8a:	f855 7b04 	ldr.w	r7, [r5], #4
  407a8e:	f846 7f04 	str.w	r7, [r6, #4]!
  407a92:	2c03      	cmp	r4, #3
  407a94:	d8f8      	bhi.n	407a88 <memmove+0x84>
  407a96:	f1ae 0404 	sub.w	r4, lr, #4
  407a9a:	f024 0403 	bic.w	r4, r4, #3
  407a9e:	3404      	adds	r4, #4
  407aa0:	4421      	add	r1, r4
  407aa2:	4423      	add	r3, r4
  407aa4:	f002 0203 	and.w	r2, r2, #3
  407aa8:	b162      	cbz	r2, 407ac4 <memmove+0xc0>
  407aaa:	3b01      	subs	r3, #1
  407aac:	440a      	add	r2, r1
  407aae:	f811 4b01 	ldrb.w	r4, [r1], #1
  407ab2:	f803 4f01 	strb.w	r4, [r3, #1]!
  407ab6:	428a      	cmp	r2, r1
  407ab8:	d1f9      	bne.n	407aae <memmove+0xaa>
  407aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407abc:	4603      	mov	r3, r0
  407abe:	e7f3      	b.n	407aa8 <memmove+0xa4>
  407ac0:	4603      	mov	r3, r0
  407ac2:	e7f2      	b.n	407aaa <memmove+0xa6>
  407ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407ac6:	4672      	mov	r2, lr
  407ac8:	e7ee      	b.n	407aa8 <memmove+0xa4>
  407aca:	bf00      	nop

00407acc <_Balloc>:
  407acc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  407ace:	b570      	push	{r4, r5, r6, lr}
  407ad0:	4605      	mov	r5, r0
  407ad2:	460c      	mov	r4, r1
  407ad4:	b14b      	cbz	r3, 407aea <_Balloc+0x1e>
  407ad6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  407ada:	b180      	cbz	r0, 407afe <_Balloc+0x32>
  407adc:	6802      	ldr	r2, [r0, #0]
  407ade:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  407ae2:	2300      	movs	r3, #0
  407ae4:	6103      	str	r3, [r0, #16]
  407ae6:	60c3      	str	r3, [r0, #12]
  407ae8:	bd70      	pop	{r4, r5, r6, pc}
  407aea:	2221      	movs	r2, #33	; 0x21
  407aec:	2104      	movs	r1, #4
  407aee:	f000 fedb 	bl	4088a8 <_calloc_r>
  407af2:	64e8      	str	r0, [r5, #76]	; 0x4c
  407af4:	4603      	mov	r3, r0
  407af6:	2800      	cmp	r0, #0
  407af8:	d1ed      	bne.n	407ad6 <_Balloc+0xa>
  407afa:	2000      	movs	r0, #0
  407afc:	bd70      	pop	{r4, r5, r6, pc}
  407afe:	2101      	movs	r1, #1
  407b00:	fa01 f604 	lsl.w	r6, r1, r4
  407b04:	1d72      	adds	r2, r6, #5
  407b06:	4628      	mov	r0, r5
  407b08:	0092      	lsls	r2, r2, #2
  407b0a:	f000 fecd 	bl	4088a8 <_calloc_r>
  407b0e:	2800      	cmp	r0, #0
  407b10:	d0f3      	beq.n	407afa <_Balloc+0x2e>
  407b12:	6044      	str	r4, [r0, #4]
  407b14:	6086      	str	r6, [r0, #8]
  407b16:	e7e4      	b.n	407ae2 <_Balloc+0x16>

00407b18 <_Bfree>:
  407b18:	b131      	cbz	r1, 407b28 <_Bfree+0x10>
  407b1a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  407b1c:	684a      	ldr	r2, [r1, #4]
  407b1e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  407b22:	6008      	str	r0, [r1, #0]
  407b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  407b28:	4770      	bx	lr
  407b2a:	bf00      	nop

00407b2c <__multadd>:
  407b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  407b2e:	690c      	ldr	r4, [r1, #16]
  407b30:	b083      	sub	sp, #12
  407b32:	460d      	mov	r5, r1
  407b34:	4606      	mov	r6, r0
  407b36:	f101 0e14 	add.w	lr, r1, #20
  407b3a:	2700      	movs	r7, #0
  407b3c:	f8de 0000 	ldr.w	r0, [lr]
  407b40:	b281      	uxth	r1, r0
  407b42:	fb02 3301 	mla	r3, r2, r1, r3
  407b46:	0c01      	lsrs	r1, r0, #16
  407b48:	0c18      	lsrs	r0, r3, #16
  407b4a:	fb02 0101 	mla	r1, r2, r1, r0
  407b4e:	b29b      	uxth	r3, r3
  407b50:	3701      	adds	r7, #1
  407b52:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  407b56:	42bc      	cmp	r4, r7
  407b58:	f84e 3b04 	str.w	r3, [lr], #4
  407b5c:	ea4f 4311 	mov.w	r3, r1, lsr #16
  407b60:	dcec      	bgt.n	407b3c <__multadd+0x10>
  407b62:	b13b      	cbz	r3, 407b74 <__multadd+0x48>
  407b64:	68aa      	ldr	r2, [r5, #8]
  407b66:	4294      	cmp	r4, r2
  407b68:	da07      	bge.n	407b7a <__multadd+0x4e>
  407b6a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  407b6e:	3401      	adds	r4, #1
  407b70:	6153      	str	r3, [r2, #20]
  407b72:	612c      	str	r4, [r5, #16]
  407b74:	4628      	mov	r0, r5
  407b76:	b003      	add	sp, #12
  407b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407b7a:	6869      	ldr	r1, [r5, #4]
  407b7c:	9301      	str	r3, [sp, #4]
  407b7e:	3101      	adds	r1, #1
  407b80:	4630      	mov	r0, r6
  407b82:	f7ff ffa3 	bl	407acc <_Balloc>
  407b86:	692a      	ldr	r2, [r5, #16]
  407b88:	3202      	adds	r2, #2
  407b8a:	f105 010c 	add.w	r1, r5, #12
  407b8e:	4607      	mov	r7, r0
  407b90:	0092      	lsls	r2, r2, #2
  407b92:	300c      	adds	r0, #12
  407b94:	f7ff fe9c 	bl	4078d0 <memcpy>
  407b98:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  407b9a:	6869      	ldr	r1, [r5, #4]
  407b9c:	9b01      	ldr	r3, [sp, #4]
  407b9e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  407ba2:	6028      	str	r0, [r5, #0]
  407ba4:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  407ba8:	463d      	mov	r5, r7
  407baa:	e7de      	b.n	407b6a <__multadd+0x3e>

00407bac <__hi0bits>:
  407bac:	0c02      	lsrs	r2, r0, #16
  407bae:	0412      	lsls	r2, r2, #16
  407bb0:	4603      	mov	r3, r0
  407bb2:	b9b2      	cbnz	r2, 407be2 <__hi0bits+0x36>
  407bb4:	0403      	lsls	r3, r0, #16
  407bb6:	2010      	movs	r0, #16
  407bb8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  407bbc:	bf04      	itt	eq
  407bbe:	021b      	lsleq	r3, r3, #8
  407bc0:	3008      	addeq	r0, #8
  407bc2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  407bc6:	bf04      	itt	eq
  407bc8:	011b      	lsleq	r3, r3, #4
  407bca:	3004      	addeq	r0, #4
  407bcc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  407bd0:	bf04      	itt	eq
  407bd2:	009b      	lsleq	r3, r3, #2
  407bd4:	3002      	addeq	r0, #2
  407bd6:	2b00      	cmp	r3, #0
  407bd8:	db02      	blt.n	407be0 <__hi0bits+0x34>
  407bda:	005b      	lsls	r3, r3, #1
  407bdc:	d403      	bmi.n	407be6 <__hi0bits+0x3a>
  407bde:	2020      	movs	r0, #32
  407be0:	4770      	bx	lr
  407be2:	2000      	movs	r0, #0
  407be4:	e7e8      	b.n	407bb8 <__hi0bits+0xc>
  407be6:	3001      	adds	r0, #1
  407be8:	4770      	bx	lr
  407bea:	bf00      	nop

00407bec <__lo0bits>:
  407bec:	6803      	ldr	r3, [r0, #0]
  407bee:	f013 0207 	ands.w	r2, r3, #7
  407bf2:	4601      	mov	r1, r0
  407bf4:	d007      	beq.n	407c06 <__lo0bits+0x1a>
  407bf6:	07da      	lsls	r2, r3, #31
  407bf8:	d421      	bmi.n	407c3e <__lo0bits+0x52>
  407bfa:	0798      	lsls	r0, r3, #30
  407bfc:	d421      	bmi.n	407c42 <__lo0bits+0x56>
  407bfe:	089b      	lsrs	r3, r3, #2
  407c00:	600b      	str	r3, [r1, #0]
  407c02:	2002      	movs	r0, #2
  407c04:	4770      	bx	lr
  407c06:	b298      	uxth	r0, r3
  407c08:	b198      	cbz	r0, 407c32 <__lo0bits+0x46>
  407c0a:	4610      	mov	r0, r2
  407c0c:	f013 0fff 	tst.w	r3, #255	; 0xff
  407c10:	bf04      	itt	eq
  407c12:	0a1b      	lsreq	r3, r3, #8
  407c14:	3008      	addeq	r0, #8
  407c16:	071a      	lsls	r2, r3, #28
  407c18:	bf04      	itt	eq
  407c1a:	091b      	lsreq	r3, r3, #4
  407c1c:	3004      	addeq	r0, #4
  407c1e:	079a      	lsls	r2, r3, #30
  407c20:	bf04      	itt	eq
  407c22:	089b      	lsreq	r3, r3, #2
  407c24:	3002      	addeq	r0, #2
  407c26:	07da      	lsls	r2, r3, #31
  407c28:	d407      	bmi.n	407c3a <__lo0bits+0x4e>
  407c2a:	085b      	lsrs	r3, r3, #1
  407c2c:	d104      	bne.n	407c38 <__lo0bits+0x4c>
  407c2e:	2020      	movs	r0, #32
  407c30:	4770      	bx	lr
  407c32:	0c1b      	lsrs	r3, r3, #16
  407c34:	2010      	movs	r0, #16
  407c36:	e7e9      	b.n	407c0c <__lo0bits+0x20>
  407c38:	3001      	adds	r0, #1
  407c3a:	600b      	str	r3, [r1, #0]
  407c3c:	4770      	bx	lr
  407c3e:	2000      	movs	r0, #0
  407c40:	4770      	bx	lr
  407c42:	085b      	lsrs	r3, r3, #1
  407c44:	600b      	str	r3, [r1, #0]
  407c46:	2001      	movs	r0, #1
  407c48:	4770      	bx	lr
  407c4a:	bf00      	nop

00407c4c <__i2b>:
  407c4c:	b510      	push	{r4, lr}
  407c4e:	460c      	mov	r4, r1
  407c50:	2101      	movs	r1, #1
  407c52:	f7ff ff3b 	bl	407acc <_Balloc>
  407c56:	2201      	movs	r2, #1
  407c58:	6144      	str	r4, [r0, #20]
  407c5a:	6102      	str	r2, [r0, #16]
  407c5c:	bd10      	pop	{r4, pc}
  407c5e:	bf00      	nop

00407c60 <__multiply>:
  407c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407c64:	690c      	ldr	r4, [r1, #16]
  407c66:	6915      	ldr	r5, [r2, #16]
  407c68:	42ac      	cmp	r4, r5
  407c6a:	b083      	sub	sp, #12
  407c6c:	468b      	mov	fp, r1
  407c6e:	4616      	mov	r6, r2
  407c70:	da04      	bge.n	407c7c <__multiply+0x1c>
  407c72:	4622      	mov	r2, r4
  407c74:	46b3      	mov	fp, r6
  407c76:	462c      	mov	r4, r5
  407c78:	460e      	mov	r6, r1
  407c7a:	4615      	mov	r5, r2
  407c7c:	f8db 3008 	ldr.w	r3, [fp, #8]
  407c80:	f8db 1004 	ldr.w	r1, [fp, #4]
  407c84:	eb04 0805 	add.w	r8, r4, r5
  407c88:	4598      	cmp	r8, r3
  407c8a:	bfc8      	it	gt
  407c8c:	3101      	addgt	r1, #1
  407c8e:	f7ff ff1d 	bl	407acc <_Balloc>
  407c92:	f100 0914 	add.w	r9, r0, #20
  407c96:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  407c9a:	45d1      	cmp	r9, sl
  407c9c:	9000      	str	r0, [sp, #0]
  407c9e:	d205      	bcs.n	407cac <__multiply+0x4c>
  407ca0:	464b      	mov	r3, r9
  407ca2:	2100      	movs	r1, #0
  407ca4:	f843 1b04 	str.w	r1, [r3], #4
  407ca8:	459a      	cmp	sl, r3
  407caa:	d8fb      	bhi.n	407ca4 <__multiply+0x44>
  407cac:	f106 0c14 	add.w	ip, r6, #20
  407cb0:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  407cb4:	f10b 0b14 	add.w	fp, fp, #20
  407cb8:	459c      	cmp	ip, r3
  407cba:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  407cbe:	d24c      	bcs.n	407d5a <__multiply+0xfa>
  407cc0:	f8cd a004 	str.w	sl, [sp, #4]
  407cc4:	469a      	mov	sl, r3
  407cc6:	f8dc 5000 	ldr.w	r5, [ip]
  407cca:	b2af      	uxth	r7, r5
  407ccc:	b1ef      	cbz	r7, 407d0a <__multiply+0xaa>
  407cce:	2100      	movs	r1, #0
  407cd0:	464d      	mov	r5, r9
  407cd2:	465e      	mov	r6, fp
  407cd4:	460c      	mov	r4, r1
  407cd6:	f856 2b04 	ldr.w	r2, [r6], #4
  407cda:	6828      	ldr	r0, [r5, #0]
  407cdc:	b293      	uxth	r3, r2
  407cde:	b281      	uxth	r1, r0
  407ce0:	fb07 1303 	mla	r3, r7, r3, r1
  407ce4:	0c12      	lsrs	r2, r2, #16
  407ce6:	0c01      	lsrs	r1, r0, #16
  407ce8:	4423      	add	r3, r4
  407cea:	fb07 1102 	mla	r1, r7, r2, r1
  407cee:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  407cf2:	b29b      	uxth	r3, r3
  407cf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  407cf8:	45b6      	cmp	lr, r6
  407cfa:	f845 3b04 	str.w	r3, [r5], #4
  407cfe:	ea4f 4411 	mov.w	r4, r1, lsr #16
  407d02:	d8e8      	bhi.n	407cd6 <__multiply+0x76>
  407d04:	602c      	str	r4, [r5, #0]
  407d06:	f8dc 5000 	ldr.w	r5, [ip]
  407d0a:	0c2d      	lsrs	r5, r5, #16
  407d0c:	d01d      	beq.n	407d4a <__multiply+0xea>
  407d0e:	f8d9 3000 	ldr.w	r3, [r9]
  407d12:	4648      	mov	r0, r9
  407d14:	461c      	mov	r4, r3
  407d16:	4659      	mov	r1, fp
  407d18:	2200      	movs	r2, #0
  407d1a:	880e      	ldrh	r6, [r1, #0]
  407d1c:	0c24      	lsrs	r4, r4, #16
  407d1e:	fb05 4406 	mla	r4, r5, r6, r4
  407d22:	4422      	add	r2, r4
  407d24:	b29b      	uxth	r3, r3
  407d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  407d2a:	f840 3b04 	str.w	r3, [r0], #4
  407d2e:	f851 3b04 	ldr.w	r3, [r1], #4
  407d32:	6804      	ldr	r4, [r0, #0]
  407d34:	0c1b      	lsrs	r3, r3, #16
  407d36:	b2a6      	uxth	r6, r4
  407d38:	fb05 6303 	mla	r3, r5, r3, r6
  407d3c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  407d40:	458e      	cmp	lr, r1
  407d42:	ea4f 4213 	mov.w	r2, r3, lsr #16
  407d46:	d8e8      	bhi.n	407d1a <__multiply+0xba>
  407d48:	6003      	str	r3, [r0, #0]
  407d4a:	f10c 0c04 	add.w	ip, ip, #4
  407d4e:	45e2      	cmp	sl, ip
  407d50:	f109 0904 	add.w	r9, r9, #4
  407d54:	d8b7      	bhi.n	407cc6 <__multiply+0x66>
  407d56:	f8dd a004 	ldr.w	sl, [sp, #4]
  407d5a:	f1b8 0f00 	cmp.w	r8, #0
  407d5e:	dd0b      	ble.n	407d78 <__multiply+0x118>
  407d60:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  407d64:	f1aa 0a04 	sub.w	sl, sl, #4
  407d68:	b11b      	cbz	r3, 407d72 <__multiply+0x112>
  407d6a:	e005      	b.n	407d78 <__multiply+0x118>
  407d6c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  407d70:	b913      	cbnz	r3, 407d78 <__multiply+0x118>
  407d72:	f1b8 0801 	subs.w	r8, r8, #1
  407d76:	d1f9      	bne.n	407d6c <__multiply+0x10c>
  407d78:	9800      	ldr	r0, [sp, #0]
  407d7a:	f8c0 8010 	str.w	r8, [r0, #16]
  407d7e:	b003      	add	sp, #12
  407d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407d84 <__pow5mult>:
  407d84:	f012 0303 	ands.w	r3, r2, #3
  407d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407d8c:	4614      	mov	r4, r2
  407d8e:	4607      	mov	r7, r0
  407d90:	d12e      	bne.n	407df0 <__pow5mult+0x6c>
  407d92:	460d      	mov	r5, r1
  407d94:	10a4      	asrs	r4, r4, #2
  407d96:	d01c      	beq.n	407dd2 <__pow5mult+0x4e>
  407d98:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  407d9a:	b396      	cbz	r6, 407e02 <__pow5mult+0x7e>
  407d9c:	07e3      	lsls	r3, r4, #31
  407d9e:	f04f 0800 	mov.w	r8, #0
  407da2:	d406      	bmi.n	407db2 <__pow5mult+0x2e>
  407da4:	1064      	asrs	r4, r4, #1
  407da6:	d014      	beq.n	407dd2 <__pow5mult+0x4e>
  407da8:	6830      	ldr	r0, [r6, #0]
  407daa:	b1a8      	cbz	r0, 407dd8 <__pow5mult+0x54>
  407dac:	4606      	mov	r6, r0
  407dae:	07e3      	lsls	r3, r4, #31
  407db0:	d5f8      	bpl.n	407da4 <__pow5mult+0x20>
  407db2:	4632      	mov	r2, r6
  407db4:	4629      	mov	r1, r5
  407db6:	4638      	mov	r0, r7
  407db8:	f7ff ff52 	bl	407c60 <__multiply>
  407dbc:	b1b5      	cbz	r5, 407dec <__pow5mult+0x68>
  407dbe:	686a      	ldr	r2, [r5, #4]
  407dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  407dc2:	1064      	asrs	r4, r4, #1
  407dc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407dc8:	6029      	str	r1, [r5, #0]
  407dca:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  407dce:	4605      	mov	r5, r0
  407dd0:	d1ea      	bne.n	407da8 <__pow5mult+0x24>
  407dd2:	4628      	mov	r0, r5
  407dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407dd8:	4632      	mov	r2, r6
  407dda:	4631      	mov	r1, r6
  407ddc:	4638      	mov	r0, r7
  407dde:	f7ff ff3f 	bl	407c60 <__multiply>
  407de2:	6030      	str	r0, [r6, #0]
  407de4:	f8c0 8000 	str.w	r8, [r0]
  407de8:	4606      	mov	r6, r0
  407dea:	e7e0      	b.n	407dae <__pow5mult+0x2a>
  407dec:	4605      	mov	r5, r0
  407dee:	e7d9      	b.n	407da4 <__pow5mult+0x20>
  407df0:	1e5a      	subs	r2, r3, #1
  407df2:	4d0b      	ldr	r5, [pc, #44]	; (407e20 <__pow5mult+0x9c>)
  407df4:	2300      	movs	r3, #0
  407df6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  407dfa:	f7ff fe97 	bl	407b2c <__multadd>
  407dfe:	4605      	mov	r5, r0
  407e00:	e7c8      	b.n	407d94 <__pow5mult+0x10>
  407e02:	2101      	movs	r1, #1
  407e04:	4638      	mov	r0, r7
  407e06:	f7ff fe61 	bl	407acc <_Balloc>
  407e0a:	f240 2171 	movw	r1, #625	; 0x271
  407e0e:	2201      	movs	r2, #1
  407e10:	2300      	movs	r3, #0
  407e12:	6141      	str	r1, [r0, #20]
  407e14:	6102      	str	r2, [r0, #16]
  407e16:	4606      	mov	r6, r0
  407e18:	64b8      	str	r0, [r7, #72]	; 0x48
  407e1a:	6003      	str	r3, [r0, #0]
  407e1c:	e7be      	b.n	407d9c <__pow5mult+0x18>
  407e1e:	bf00      	nop
  407e20:	00409bf0 	.word	0x00409bf0

00407e24 <__lshift>:
  407e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407e28:	4691      	mov	r9, r2
  407e2a:	690a      	ldr	r2, [r1, #16]
  407e2c:	688b      	ldr	r3, [r1, #8]
  407e2e:	ea4f 1469 	mov.w	r4, r9, asr #5
  407e32:	eb04 0802 	add.w	r8, r4, r2
  407e36:	f108 0501 	add.w	r5, r8, #1
  407e3a:	429d      	cmp	r5, r3
  407e3c:	460e      	mov	r6, r1
  407e3e:	4607      	mov	r7, r0
  407e40:	6849      	ldr	r1, [r1, #4]
  407e42:	dd04      	ble.n	407e4e <__lshift+0x2a>
  407e44:	005b      	lsls	r3, r3, #1
  407e46:	429d      	cmp	r5, r3
  407e48:	f101 0101 	add.w	r1, r1, #1
  407e4c:	dcfa      	bgt.n	407e44 <__lshift+0x20>
  407e4e:	4638      	mov	r0, r7
  407e50:	f7ff fe3c 	bl	407acc <_Balloc>
  407e54:	2c00      	cmp	r4, #0
  407e56:	f100 0314 	add.w	r3, r0, #20
  407e5a:	dd06      	ble.n	407e6a <__lshift+0x46>
  407e5c:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  407e60:	2100      	movs	r1, #0
  407e62:	f843 1b04 	str.w	r1, [r3], #4
  407e66:	429a      	cmp	r2, r3
  407e68:	d1fb      	bne.n	407e62 <__lshift+0x3e>
  407e6a:	6934      	ldr	r4, [r6, #16]
  407e6c:	f106 0114 	add.w	r1, r6, #20
  407e70:	f019 091f 	ands.w	r9, r9, #31
  407e74:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  407e78:	d01d      	beq.n	407eb6 <__lshift+0x92>
  407e7a:	f1c9 0c20 	rsb	ip, r9, #32
  407e7e:	2200      	movs	r2, #0
  407e80:	680c      	ldr	r4, [r1, #0]
  407e82:	fa04 f409 	lsl.w	r4, r4, r9
  407e86:	4314      	orrs	r4, r2
  407e88:	f843 4b04 	str.w	r4, [r3], #4
  407e8c:	f851 2b04 	ldr.w	r2, [r1], #4
  407e90:	458e      	cmp	lr, r1
  407e92:	fa22 f20c 	lsr.w	r2, r2, ip
  407e96:	d8f3      	bhi.n	407e80 <__lshift+0x5c>
  407e98:	601a      	str	r2, [r3, #0]
  407e9a:	b10a      	cbz	r2, 407ea0 <__lshift+0x7c>
  407e9c:	f108 0502 	add.w	r5, r8, #2
  407ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  407ea2:	6872      	ldr	r2, [r6, #4]
  407ea4:	3d01      	subs	r5, #1
  407ea6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407eaa:	6105      	str	r5, [r0, #16]
  407eac:	6031      	str	r1, [r6, #0]
  407eae:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  407eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407eb6:	3b04      	subs	r3, #4
  407eb8:	f851 2b04 	ldr.w	r2, [r1], #4
  407ebc:	f843 2f04 	str.w	r2, [r3, #4]!
  407ec0:	458e      	cmp	lr, r1
  407ec2:	d8f9      	bhi.n	407eb8 <__lshift+0x94>
  407ec4:	e7ec      	b.n	407ea0 <__lshift+0x7c>
  407ec6:	bf00      	nop

00407ec8 <__mcmp>:
  407ec8:	b430      	push	{r4, r5}
  407eca:	690b      	ldr	r3, [r1, #16]
  407ecc:	4605      	mov	r5, r0
  407ece:	6900      	ldr	r0, [r0, #16]
  407ed0:	1ac0      	subs	r0, r0, r3
  407ed2:	d10f      	bne.n	407ef4 <__mcmp+0x2c>
  407ed4:	009b      	lsls	r3, r3, #2
  407ed6:	3514      	adds	r5, #20
  407ed8:	3114      	adds	r1, #20
  407eda:	4419      	add	r1, r3
  407edc:	442b      	add	r3, r5
  407ede:	e001      	b.n	407ee4 <__mcmp+0x1c>
  407ee0:	429d      	cmp	r5, r3
  407ee2:	d207      	bcs.n	407ef4 <__mcmp+0x2c>
  407ee4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  407ee8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  407eec:	4294      	cmp	r4, r2
  407eee:	d0f7      	beq.n	407ee0 <__mcmp+0x18>
  407ef0:	d302      	bcc.n	407ef8 <__mcmp+0x30>
  407ef2:	2001      	movs	r0, #1
  407ef4:	bc30      	pop	{r4, r5}
  407ef6:	4770      	bx	lr
  407ef8:	f04f 30ff 	mov.w	r0, #4294967295
  407efc:	e7fa      	b.n	407ef4 <__mcmp+0x2c>
  407efe:	bf00      	nop

00407f00 <__mdiff>:
  407f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407f04:	690f      	ldr	r7, [r1, #16]
  407f06:	460e      	mov	r6, r1
  407f08:	6911      	ldr	r1, [r2, #16]
  407f0a:	1a7f      	subs	r7, r7, r1
  407f0c:	2f00      	cmp	r7, #0
  407f0e:	4690      	mov	r8, r2
  407f10:	d117      	bne.n	407f42 <__mdiff+0x42>
  407f12:	0089      	lsls	r1, r1, #2
  407f14:	f106 0514 	add.w	r5, r6, #20
  407f18:	f102 0e14 	add.w	lr, r2, #20
  407f1c:	186b      	adds	r3, r5, r1
  407f1e:	4471      	add	r1, lr
  407f20:	e001      	b.n	407f26 <__mdiff+0x26>
  407f22:	429d      	cmp	r5, r3
  407f24:	d25c      	bcs.n	407fe0 <__mdiff+0xe0>
  407f26:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  407f2a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  407f2e:	42a2      	cmp	r2, r4
  407f30:	d0f7      	beq.n	407f22 <__mdiff+0x22>
  407f32:	d25e      	bcs.n	407ff2 <__mdiff+0xf2>
  407f34:	4633      	mov	r3, r6
  407f36:	462c      	mov	r4, r5
  407f38:	4646      	mov	r6, r8
  407f3a:	4675      	mov	r5, lr
  407f3c:	4698      	mov	r8, r3
  407f3e:	2701      	movs	r7, #1
  407f40:	e005      	b.n	407f4e <__mdiff+0x4e>
  407f42:	db58      	blt.n	407ff6 <__mdiff+0xf6>
  407f44:	f106 0514 	add.w	r5, r6, #20
  407f48:	f108 0414 	add.w	r4, r8, #20
  407f4c:	2700      	movs	r7, #0
  407f4e:	6871      	ldr	r1, [r6, #4]
  407f50:	f7ff fdbc 	bl	407acc <_Balloc>
  407f54:	f8d8 3010 	ldr.w	r3, [r8, #16]
  407f58:	6936      	ldr	r6, [r6, #16]
  407f5a:	60c7      	str	r7, [r0, #12]
  407f5c:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  407f60:	46a6      	mov	lr, r4
  407f62:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  407f66:	f100 0414 	add.w	r4, r0, #20
  407f6a:	2300      	movs	r3, #0
  407f6c:	f85e 1b04 	ldr.w	r1, [lr], #4
  407f70:	f855 8b04 	ldr.w	r8, [r5], #4
  407f74:	b28a      	uxth	r2, r1
  407f76:	fa13 f388 	uxtah	r3, r3, r8
  407f7a:	0c09      	lsrs	r1, r1, #16
  407f7c:	1a9a      	subs	r2, r3, r2
  407f7e:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  407f82:	eb03 4322 	add.w	r3, r3, r2, asr #16
  407f86:	b292      	uxth	r2, r2
  407f88:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  407f8c:	45f4      	cmp	ip, lr
  407f8e:	f844 2b04 	str.w	r2, [r4], #4
  407f92:	ea4f 4323 	mov.w	r3, r3, asr #16
  407f96:	d8e9      	bhi.n	407f6c <__mdiff+0x6c>
  407f98:	42af      	cmp	r7, r5
  407f9a:	d917      	bls.n	407fcc <__mdiff+0xcc>
  407f9c:	46a4      	mov	ip, r4
  407f9e:	46ae      	mov	lr, r5
  407fa0:	f85e 2b04 	ldr.w	r2, [lr], #4
  407fa4:	fa13 f382 	uxtah	r3, r3, r2
  407fa8:	1419      	asrs	r1, r3, #16
  407faa:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  407fae:	b29b      	uxth	r3, r3
  407fb0:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  407fb4:	4577      	cmp	r7, lr
  407fb6:	f84c 2b04 	str.w	r2, [ip], #4
  407fba:	ea4f 4321 	mov.w	r3, r1, asr #16
  407fbe:	d8ef      	bhi.n	407fa0 <__mdiff+0xa0>
  407fc0:	43ed      	mvns	r5, r5
  407fc2:	442f      	add	r7, r5
  407fc4:	f027 0703 	bic.w	r7, r7, #3
  407fc8:	3704      	adds	r7, #4
  407fca:	443c      	add	r4, r7
  407fcc:	3c04      	subs	r4, #4
  407fce:	b922      	cbnz	r2, 407fda <__mdiff+0xda>
  407fd0:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  407fd4:	3e01      	subs	r6, #1
  407fd6:	2b00      	cmp	r3, #0
  407fd8:	d0fa      	beq.n	407fd0 <__mdiff+0xd0>
  407fda:	6106      	str	r6, [r0, #16]
  407fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407fe0:	2100      	movs	r1, #0
  407fe2:	f7ff fd73 	bl	407acc <_Balloc>
  407fe6:	2201      	movs	r2, #1
  407fe8:	2300      	movs	r3, #0
  407fea:	6102      	str	r2, [r0, #16]
  407fec:	6143      	str	r3, [r0, #20]
  407fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407ff2:	4674      	mov	r4, lr
  407ff4:	e7ab      	b.n	407f4e <__mdiff+0x4e>
  407ff6:	4633      	mov	r3, r6
  407ff8:	f106 0414 	add.w	r4, r6, #20
  407ffc:	f102 0514 	add.w	r5, r2, #20
  408000:	4616      	mov	r6, r2
  408002:	2701      	movs	r7, #1
  408004:	4698      	mov	r8, r3
  408006:	e7a2      	b.n	407f4e <__mdiff+0x4e>

00408008 <__d2b>:
  408008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40800c:	b082      	sub	sp, #8
  40800e:	2101      	movs	r1, #1
  408010:	461c      	mov	r4, r3
  408012:	f3c3 570a 	ubfx	r7, r3, #20, #11
  408016:	4615      	mov	r5, r2
  408018:	9e08      	ldr	r6, [sp, #32]
  40801a:	f7ff fd57 	bl	407acc <_Balloc>
  40801e:	f3c4 0413 	ubfx	r4, r4, #0, #20
  408022:	4680      	mov	r8, r0
  408024:	b10f      	cbz	r7, 40802a <__d2b+0x22>
  408026:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40802a:	9401      	str	r4, [sp, #4]
  40802c:	b31d      	cbz	r5, 408076 <__d2b+0x6e>
  40802e:	a802      	add	r0, sp, #8
  408030:	f840 5d08 	str.w	r5, [r0, #-8]!
  408034:	f7ff fdda 	bl	407bec <__lo0bits>
  408038:	2800      	cmp	r0, #0
  40803a:	d134      	bne.n	4080a6 <__d2b+0x9e>
  40803c:	e89d 000c 	ldmia.w	sp, {r2, r3}
  408040:	f8c8 2014 	str.w	r2, [r8, #20]
  408044:	2b00      	cmp	r3, #0
  408046:	bf0c      	ite	eq
  408048:	2101      	moveq	r1, #1
  40804a:	2102      	movne	r1, #2
  40804c:	f8c8 3018 	str.w	r3, [r8, #24]
  408050:	f8c8 1010 	str.w	r1, [r8, #16]
  408054:	b9df      	cbnz	r7, 40808e <__d2b+0x86>
  408056:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40805a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40805e:	6030      	str	r0, [r6, #0]
  408060:	6918      	ldr	r0, [r3, #16]
  408062:	f7ff fda3 	bl	407bac <__hi0bits>
  408066:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408068:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40806c:	6018      	str	r0, [r3, #0]
  40806e:	4640      	mov	r0, r8
  408070:	b002      	add	sp, #8
  408072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408076:	a801      	add	r0, sp, #4
  408078:	f7ff fdb8 	bl	407bec <__lo0bits>
  40807c:	9b01      	ldr	r3, [sp, #4]
  40807e:	f8c8 3014 	str.w	r3, [r8, #20]
  408082:	2101      	movs	r1, #1
  408084:	3020      	adds	r0, #32
  408086:	f8c8 1010 	str.w	r1, [r8, #16]
  40808a:	2f00      	cmp	r7, #0
  40808c:	d0e3      	beq.n	408056 <__d2b+0x4e>
  40808e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408090:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  408094:	4407      	add	r7, r0
  408096:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40809a:	6037      	str	r7, [r6, #0]
  40809c:	6018      	str	r0, [r3, #0]
  40809e:	4640      	mov	r0, r8
  4080a0:	b002      	add	sp, #8
  4080a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4080a6:	e89d 000a 	ldmia.w	sp, {r1, r3}
  4080aa:	f1c0 0220 	rsb	r2, r0, #32
  4080ae:	fa03 f202 	lsl.w	r2, r3, r2
  4080b2:	430a      	orrs	r2, r1
  4080b4:	40c3      	lsrs	r3, r0
  4080b6:	9301      	str	r3, [sp, #4]
  4080b8:	f8c8 2014 	str.w	r2, [r8, #20]
  4080bc:	e7c2      	b.n	408044 <__d2b+0x3c>
  4080be:	bf00      	nop

004080c0 <_realloc_r>:
  4080c0:	2900      	cmp	r1, #0
  4080c2:	f000 8095 	beq.w	4081f0 <_realloc_r+0x130>
  4080c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4080ca:	460d      	mov	r5, r1
  4080cc:	4616      	mov	r6, r2
  4080ce:	b083      	sub	sp, #12
  4080d0:	4680      	mov	r8, r0
  4080d2:	f106 070b 	add.w	r7, r6, #11
  4080d6:	f7fb fcdd 	bl	403a94 <__malloc_lock>
  4080da:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4080de:	2f16      	cmp	r7, #22
  4080e0:	f02e 0403 	bic.w	r4, lr, #3
  4080e4:	f1a5 0908 	sub.w	r9, r5, #8
  4080e8:	d83c      	bhi.n	408164 <_realloc_r+0xa4>
  4080ea:	2210      	movs	r2, #16
  4080ec:	4617      	mov	r7, r2
  4080ee:	42be      	cmp	r6, r7
  4080f0:	d83d      	bhi.n	40816e <_realloc_r+0xae>
  4080f2:	4294      	cmp	r4, r2
  4080f4:	da43      	bge.n	40817e <_realloc_r+0xbe>
  4080f6:	4bc4      	ldr	r3, [pc, #784]	; (408408 <_realloc_r+0x348>)
  4080f8:	6899      	ldr	r1, [r3, #8]
  4080fa:	eb09 0004 	add.w	r0, r9, r4
  4080fe:	4288      	cmp	r0, r1
  408100:	f000 80b4 	beq.w	40826c <_realloc_r+0x1ac>
  408104:	6843      	ldr	r3, [r0, #4]
  408106:	f023 0101 	bic.w	r1, r3, #1
  40810a:	4401      	add	r1, r0
  40810c:	6849      	ldr	r1, [r1, #4]
  40810e:	07c9      	lsls	r1, r1, #31
  408110:	d54c      	bpl.n	4081ac <_realloc_r+0xec>
  408112:	f01e 0f01 	tst.w	lr, #1
  408116:	f000 809b 	beq.w	408250 <_realloc_r+0x190>
  40811a:	4631      	mov	r1, r6
  40811c:	4640      	mov	r0, r8
  40811e:	f7fb f9bb 	bl	403498 <_malloc_r>
  408122:	4606      	mov	r6, r0
  408124:	2800      	cmp	r0, #0
  408126:	d03a      	beq.n	40819e <_realloc_r+0xde>
  408128:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40812c:	f023 0301 	bic.w	r3, r3, #1
  408130:	444b      	add	r3, r9
  408132:	f1a0 0208 	sub.w	r2, r0, #8
  408136:	429a      	cmp	r2, r3
  408138:	f000 8121 	beq.w	40837e <_realloc_r+0x2be>
  40813c:	1f22      	subs	r2, r4, #4
  40813e:	2a24      	cmp	r2, #36	; 0x24
  408140:	f200 8107 	bhi.w	408352 <_realloc_r+0x292>
  408144:	2a13      	cmp	r2, #19
  408146:	f200 80db 	bhi.w	408300 <_realloc_r+0x240>
  40814a:	4603      	mov	r3, r0
  40814c:	462a      	mov	r2, r5
  40814e:	6811      	ldr	r1, [r2, #0]
  408150:	6019      	str	r1, [r3, #0]
  408152:	6851      	ldr	r1, [r2, #4]
  408154:	6059      	str	r1, [r3, #4]
  408156:	6892      	ldr	r2, [r2, #8]
  408158:	609a      	str	r2, [r3, #8]
  40815a:	4629      	mov	r1, r5
  40815c:	4640      	mov	r0, r8
  40815e:	f7ff f827 	bl	4071b0 <_free_r>
  408162:	e01c      	b.n	40819e <_realloc_r+0xde>
  408164:	f027 0707 	bic.w	r7, r7, #7
  408168:	2f00      	cmp	r7, #0
  40816a:	463a      	mov	r2, r7
  40816c:	dabf      	bge.n	4080ee <_realloc_r+0x2e>
  40816e:	2600      	movs	r6, #0
  408170:	230c      	movs	r3, #12
  408172:	4630      	mov	r0, r6
  408174:	f8c8 3000 	str.w	r3, [r8]
  408178:	b003      	add	sp, #12
  40817a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40817e:	462e      	mov	r6, r5
  408180:	1be3      	subs	r3, r4, r7
  408182:	2b0f      	cmp	r3, #15
  408184:	d81e      	bhi.n	4081c4 <_realloc_r+0x104>
  408186:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40818a:	f003 0301 	and.w	r3, r3, #1
  40818e:	4323      	orrs	r3, r4
  408190:	444c      	add	r4, r9
  408192:	f8c9 3004 	str.w	r3, [r9, #4]
  408196:	6863      	ldr	r3, [r4, #4]
  408198:	f043 0301 	orr.w	r3, r3, #1
  40819c:	6063      	str	r3, [r4, #4]
  40819e:	4640      	mov	r0, r8
  4081a0:	f7fb fc7e 	bl	403aa0 <__malloc_unlock>
  4081a4:	4630      	mov	r0, r6
  4081a6:	b003      	add	sp, #12
  4081a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4081ac:	f023 0303 	bic.w	r3, r3, #3
  4081b0:	18e1      	adds	r1, r4, r3
  4081b2:	4291      	cmp	r1, r2
  4081b4:	db1f      	blt.n	4081f6 <_realloc_r+0x136>
  4081b6:	68c3      	ldr	r3, [r0, #12]
  4081b8:	6882      	ldr	r2, [r0, #8]
  4081ba:	462e      	mov	r6, r5
  4081bc:	60d3      	str	r3, [r2, #12]
  4081be:	460c      	mov	r4, r1
  4081c0:	609a      	str	r2, [r3, #8]
  4081c2:	e7dd      	b.n	408180 <_realloc_r+0xc0>
  4081c4:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4081c8:	eb09 0107 	add.w	r1, r9, r7
  4081cc:	f002 0201 	and.w	r2, r2, #1
  4081d0:	444c      	add	r4, r9
  4081d2:	f043 0301 	orr.w	r3, r3, #1
  4081d6:	4317      	orrs	r7, r2
  4081d8:	f8c9 7004 	str.w	r7, [r9, #4]
  4081dc:	604b      	str	r3, [r1, #4]
  4081de:	6863      	ldr	r3, [r4, #4]
  4081e0:	f043 0301 	orr.w	r3, r3, #1
  4081e4:	3108      	adds	r1, #8
  4081e6:	6063      	str	r3, [r4, #4]
  4081e8:	4640      	mov	r0, r8
  4081ea:	f7fe ffe1 	bl	4071b0 <_free_r>
  4081ee:	e7d6      	b.n	40819e <_realloc_r+0xde>
  4081f0:	4611      	mov	r1, r2
  4081f2:	f7fb b951 	b.w	403498 <_malloc_r>
  4081f6:	f01e 0f01 	tst.w	lr, #1
  4081fa:	d18e      	bne.n	40811a <_realloc_r+0x5a>
  4081fc:	f855 1c08 	ldr.w	r1, [r5, #-8]
  408200:	eba9 0a01 	sub.w	sl, r9, r1
  408204:	f8da 1004 	ldr.w	r1, [sl, #4]
  408208:	f021 0103 	bic.w	r1, r1, #3
  40820c:	440b      	add	r3, r1
  40820e:	4423      	add	r3, r4
  408210:	4293      	cmp	r3, r2
  408212:	db25      	blt.n	408260 <_realloc_r+0x1a0>
  408214:	68c2      	ldr	r2, [r0, #12]
  408216:	6881      	ldr	r1, [r0, #8]
  408218:	4656      	mov	r6, sl
  40821a:	60ca      	str	r2, [r1, #12]
  40821c:	6091      	str	r1, [r2, #8]
  40821e:	f8da 100c 	ldr.w	r1, [sl, #12]
  408222:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408226:	1f22      	subs	r2, r4, #4
  408228:	2a24      	cmp	r2, #36	; 0x24
  40822a:	60c1      	str	r1, [r0, #12]
  40822c:	6088      	str	r0, [r1, #8]
  40822e:	f200 8094 	bhi.w	40835a <_realloc_r+0x29a>
  408232:	2a13      	cmp	r2, #19
  408234:	d96f      	bls.n	408316 <_realloc_r+0x256>
  408236:	6829      	ldr	r1, [r5, #0]
  408238:	f8ca 1008 	str.w	r1, [sl, #8]
  40823c:	6869      	ldr	r1, [r5, #4]
  40823e:	f8ca 100c 	str.w	r1, [sl, #12]
  408242:	2a1b      	cmp	r2, #27
  408244:	f200 80a2 	bhi.w	40838c <_realloc_r+0x2cc>
  408248:	3508      	adds	r5, #8
  40824a:	f10a 0210 	add.w	r2, sl, #16
  40824e:	e063      	b.n	408318 <_realloc_r+0x258>
  408250:	f855 3c08 	ldr.w	r3, [r5, #-8]
  408254:	eba9 0a03 	sub.w	sl, r9, r3
  408258:	f8da 1004 	ldr.w	r1, [sl, #4]
  40825c:	f021 0103 	bic.w	r1, r1, #3
  408260:	1863      	adds	r3, r4, r1
  408262:	4293      	cmp	r3, r2
  408264:	f6ff af59 	blt.w	40811a <_realloc_r+0x5a>
  408268:	4656      	mov	r6, sl
  40826a:	e7d8      	b.n	40821e <_realloc_r+0x15e>
  40826c:	6841      	ldr	r1, [r0, #4]
  40826e:	f021 0b03 	bic.w	fp, r1, #3
  408272:	44a3      	add	fp, r4
  408274:	f107 0010 	add.w	r0, r7, #16
  408278:	4583      	cmp	fp, r0
  40827a:	da56      	bge.n	40832a <_realloc_r+0x26a>
  40827c:	f01e 0f01 	tst.w	lr, #1
  408280:	f47f af4b 	bne.w	40811a <_realloc_r+0x5a>
  408284:	f855 1c08 	ldr.w	r1, [r5, #-8]
  408288:	eba9 0a01 	sub.w	sl, r9, r1
  40828c:	f8da 1004 	ldr.w	r1, [sl, #4]
  408290:	f021 0103 	bic.w	r1, r1, #3
  408294:	448b      	add	fp, r1
  408296:	4558      	cmp	r0, fp
  408298:	dce2      	bgt.n	408260 <_realloc_r+0x1a0>
  40829a:	4656      	mov	r6, sl
  40829c:	f8da 100c 	ldr.w	r1, [sl, #12]
  4082a0:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4082a4:	1f22      	subs	r2, r4, #4
  4082a6:	2a24      	cmp	r2, #36	; 0x24
  4082a8:	60c1      	str	r1, [r0, #12]
  4082aa:	6088      	str	r0, [r1, #8]
  4082ac:	f200 808f 	bhi.w	4083ce <_realloc_r+0x30e>
  4082b0:	2a13      	cmp	r2, #19
  4082b2:	f240 808a 	bls.w	4083ca <_realloc_r+0x30a>
  4082b6:	6829      	ldr	r1, [r5, #0]
  4082b8:	f8ca 1008 	str.w	r1, [sl, #8]
  4082bc:	6869      	ldr	r1, [r5, #4]
  4082be:	f8ca 100c 	str.w	r1, [sl, #12]
  4082c2:	2a1b      	cmp	r2, #27
  4082c4:	f200 808a 	bhi.w	4083dc <_realloc_r+0x31c>
  4082c8:	3508      	adds	r5, #8
  4082ca:	f10a 0210 	add.w	r2, sl, #16
  4082ce:	6829      	ldr	r1, [r5, #0]
  4082d0:	6011      	str	r1, [r2, #0]
  4082d2:	6869      	ldr	r1, [r5, #4]
  4082d4:	6051      	str	r1, [r2, #4]
  4082d6:	68a9      	ldr	r1, [r5, #8]
  4082d8:	6091      	str	r1, [r2, #8]
  4082da:	eb0a 0107 	add.w	r1, sl, r7
  4082de:	ebab 0207 	sub.w	r2, fp, r7
  4082e2:	f042 0201 	orr.w	r2, r2, #1
  4082e6:	6099      	str	r1, [r3, #8]
  4082e8:	604a      	str	r2, [r1, #4]
  4082ea:	f8da 3004 	ldr.w	r3, [sl, #4]
  4082ee:	f003 0301 	and.w	r3, r3, #1
  4082f2:	431f      	orrs	r7, r3
  4082f4:	4640      	mov	r0, r8
  4082f6:	f8ca 7004 	str.w	r7, [sl, #4]
  4082fa:	f7fb fbd1 	bl	403aa0 <__malloc_unlock>
  4082fe:	e751      	b.n	4081a4 <_realloc_r+0xe4>
  408300:	682b      	ldr	r3, [r5, #0]
  408302:	6003      	str	r3, [r0, #0]
  408304:	686b      	ldr	r3, [r5, #4]
  408306:	6043      	str	r3, [r0, #4]
  408308:	2a1b      	cmp	r2, #27
  40830a:	d82d      	bhi.n	408368 <_realloc_r+0x2a8>
  40830c:	f100 0308 	add.w	r3, r0, #8
  408310:	f105 0208 	add.w	r2, r5, #8
  408314:	e71b      	b.n	40814e <_realloc_r+0x8e>
  408316:	4632      	mov	r2, r6
  408318:	6829      	ldr	r1, [r5, #0]
  40831a:	6011      	str	r1, [r2, #0]
  40831c:	6869      	ldr	r1, [r5, #4]
  40831e:	6051      	str	r1, [r2, #4]
  408320:	68a9      	ldr	r1, [r5, #8]
  408322:	6091      	str	r1, [r2, #8]
  408324:	461c      	mov	r4, r3
  408326:	46d1      	mov	r9, sl
  408328:	e72a      	b.n	408180 <_realloc_r+0xc0>
  40832a:	eb09 0107 	add.w	r1, r9, r7
  40832e:	ebab 0b07 	sub.w	fp, fp, r7
  408332:	f04b 0201 	orr.w	r2, fp, #1
  408336:	6099      	str	r1, [r3, #8]
  408338:	604a      	str	r2, [r1, #4]
  40833a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40833e:	f003 0301 	and.w	r3, r3, #1
  408342:	431f      	orrs	r7, r3
  408344:	4640      	mov	r0, r8
  408346:	f845 7c04 	str.w	r7, [r5, #-4]
  40834a:	f7fb fba9 	bl	403aa0 <__malloc_unlock>
  40834e:	462e      	mov	r6, r5
  408350:	e728      	b.n	4081a4 <_realloc_r+0xe4>
  408352:	4629      	mov	r1, r5
  408354:	f7ff fb56 	bl	407a04 <memmove>
  408358:	e6ff      	b.n	40815a <_realloc_r+0x9a>
  40835a:	4629      	mov	r1, r5
  40835c:	4630      	mov	r0, r6
  40835e:	461c      	mov	r4, r3
  408360:	46d1      	mov	r9, sl
  408362:	f7ff fb4f 	bl	407a04 <memmove>
  408366:	e70b      	b.n	408180 <_realloc_r+0xc0>
  408368:	68ab      	ldr	r3, [r5, #8]
  40836a:	6083      	str	r3, [r0, #8]
  40836c:	68eb      	ldr	r3, [r5, #12]
  40836e:	60c3      	str	r3, [r0, #12]
  408370:	2a24      	cmp	r2, #36	; 0x24
  408372:	d017      	beq.n	4083a4 <_realloc_r+0x2e4>
  408374:	f100 0310 	add.w	r3, r0, #16
  408378:	f105 0210 	add.w	r2, r5, #16
  40837c:	e6e7      	b.n	40814e <_realloc_r+0x8e>
  40837e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  408382:	f023 0303 	bic.w	r3, r3, #3
  408386:	441c      	add	r4, r3
  408388:	462e      	mov	r6, r5
  40838a:	e6f9      	b.n	408180 <_realloc_r+0xc0>
  40838c:	68a9      	ldr	r1, [r5, #8]
  40838e:	f8ca 1010 	str.w	r1, [sl, #16]
  408392:	68e9      	ldr	r1, [r5, #12]
  408394:	f8ca 1014 	str.w	r1, [sl, #20]
  408398:	2a24      	cmp	r2, #36	; 0x24
  40839a:	d00c      	beq.n	4083b6 <_realloc_r+0x2f6>
  40839c:	3510      	adds	r5, #16
  40839e:	f10a 0218 	add.w	r2, sl, #24
  4083a2:	e7b9      	b.n	408318 <_realloc_r+0x258>
  4083a4:	692b      	ldr	r3, [r5, #16]
  4083a6:	6103      	str	r3, [r0, #16]
  4083a8:	696b      	ldr	r3, [r5, #20]
  4083aa:	6143      	str	r3, [r0, #20]
  4083ac:	f105 0218 	add.w	r2, r5, #24
  4083b0:	f100 0318 	add.w	r3, r0, #24
  4083b4:	e6cb      	b.n	40814e <_realloc_r+0x8e>
  4083b6:	692a      	ldr	r2, [r5, #16]
  4083b8:	f8ca 2018 	str.w	r2, [sl, #24]
  4083bc:	696a      	ldr	r2, [r5, #20]
  4083be:	f8ca 201c 	str.w	r2, [sl, #28]
  4083c2:	3518      	adds	r5, #24
  4083c4:	f10a 0220 	add.w	r2, sl, #32
  4083c8:	e7a6      	b.n	408318 <_realloc_r+0x258>
  4083ca:	4632      	mov	r2, r6
  4083cc:	e77f      	b.n	4082ce <_realloc_r+0x20e>
  4083ce:	4629      	mov	r1, r5
  4083d0:	4630      	mov	r0, r6
  4083d2:	9301      	str	r3, [sp, #4]
  4083d4:	f7ff fb16 	bl	407a04 <memmove>
  4083d8:	9b01      	ldr	r3, [sp, #4]
  4083da:	e77e      	b.n	4082da <_realloc_r+0x21a>
  4083dc:	68a9      	ldr	r1, [r5, #8]
  4083de:	f8ca 1010 	str.w	r1, [sl, #16]
  4083e2:	68e9      	ldr	r1, [r5, #12]
  4083e4:	f8ca 1014 	str.w	r1, [sl, #20]
  4083e8:	2a24      	cmp	r2, #36	; 0x24
  4083ea:	d003      	beq.n	4083f4 <_realloc_r+0x334>
  4083ec:	3510      	adds	r5, #16
  4083ee:	f10a 0218 	add.w	r2, sl, #24
  4083f2:	e76c      	b.n	4082ce <_realloc_r+0x20e>
  4083f4:	692a      	ldr	r2, [r5, #16]
  4083f6:	f8ca 2018 	str.w	r2, [sl, #24]
  4083fa:	696a      	ldr	r2, [r5, #20]
  4083fc:	f8ca 201c 	str.w	r2, [sl, #28]
  408400:	3518      	adds	r5, #24
  408402:	f10a 0220 	add.w	r2, sl, #32
  408406:	e762      	b.n	4082ce <_realloc_r+0x20e>
  408408:	20400470 	.word	0x20400470

0040840c <__sread>:
  40840c:	b510      	push	{r4, lr}
  40840e:	460c      	mov	r4, r1
  408410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408414:	f000 fb28 	bl	408a68 <_read_r>
  408418:	2800      	cmp	r0, #0
  40841a:	db03      	blt.n	408424 <__sread+0x18>
  40841c:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40841e:	4403      	add	r3, r0
  408420:	6523      	str	r3, [r4, #80]	; 0x50
  408422:	bd10      	pop	{r4, pc}
  408424:	89a3      	ldrh	r3, [r4, #12]
  408426:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40842a:	81a3      	strh	r3, [r4, #12]
  40842c:	bd10      	pop	{r4, pc}
  40842e:	bf00      	nop

00408430 <__swrite>:
  408430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408434:	4616      	mov	r6, r2
  408436:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40843a:	461f      	mov	r7, r3
  40843c:	05d3      	lsls	r3, r2, #23
  40843e:	460c      	mov	r4, r1
  408440:	4605      	mov	r5, r0
  408442:	d507      	bpl.n	408454 <__swrite+0x24>
  408444:	2200      	movs	r2, #0
  408446:	2302      	movs	r3, #2
  408448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40844c:	f000 faf6 	bl	408a3c <_lseek_r>
  408450:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408454:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  408458:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40845c:	81a2      	strh	r2, [r4, #12]
  40845e:	463b      	mov	r3, r7
  408460:	4632      	mov	r2, r6
  408462:	4628      	mov	r0, r5
  408464:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408468:	f000 b9a6 	b.w	4087b8 <_write_r>

0040846c <__sseek>:
  40846c:	b510      	push	{r4, lr}
  40846e:	460c      	mov	r4, r1
  408470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408474:	f000 fae2 	bl	408a3c <_lseek_r>
  408478:	89a3      	ldrh	r3, [r4, #12]
  40847a:	1c42      	adds	r2, r0, #1
  40847c:	bf0e      	itee	eq
  40847e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  408482:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  408486:	6520      	strne	r0, [r4, #80]	; 0x50
  408488:	81a3      	strh	r3, [r4, #12]
  40848a:	bd10      	pop	{r4, pc}

0040848c <__sclose>:
  40848c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408490:	f000 ba3a 	b.w	408908 <_close_r>
	...

004084c0 <strlen>:
  4084c0:	f890 f000 	pld	[r0]
  4084c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4084c8:	f020 0107 	bic.w	r1, r0, #7
  4084cc:	f06f 0c00 	mvn.w	ip, #0
  4084d0:	f010 0407 	ands.w	r4, r0, #7
  4084d4:	f891 f020 	pld	[r1, #32]
  4084d8:	f040 8049 	bne.w	40856e <strlen+0xae>
  4084dc:	f04f 0400 	mov.w	r4, #0
  4084e0:	f06f 0007 	mvn.w	r0, #7
  4084e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4084e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4084ec:	f100 0008 	add.w	r0, r0, #8
  4084f0:	fa82 f24c 	uadd8	r2, r2, ip
  4084f4:	faa4 f28c 	sel	r2, r4, ip
  4084f8:	fa83 f34c 	uadd8	r3, r3, ip
  4084fc:	faa2 f38c 	sel	r3, r2, ip
  408500:	bb4b      	cbnz	r3, 408556 <strlen+0x96>
  408502:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  408506:	fa82 f24c 	uadd8	r2, r2, ip
  40850a:	f100 0008 	add.w	r0, r0, #8
  40850e:	faa4 f28c 	sel	r2, r4, ip
  408512:	fa83 f34c 	uadd8	r3, r3, ip
  408516:	faa2 f38c 	sel	r3, r2, ip
  40851a:	b9e3      	cbnz	r3, 408556 <strlen+0x96>
  40851c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  408520:	fa82 f24c 	uadd8	r2, r2, ip
  408524:	f100 0008 	add.w	r0, r0, #8
  408528:	faa4 f28c 	sel	r2, r4, ip
  40852c:	fa83 f34c 	uadd8	r3, r3, ip
  408530:	faa2 f38c 	sel	r3, r2, ip
  408534:	b97b      	cbnz	r3, 408556 <strlen+0x96>
  408536:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40853a:	f101 0120 	add.w	r1, r1, #32
  40853e:	fa82 f24c 	uadd8	r2, r2, ip
  408542:	f100 0008 	add.w	r0, r0, #8
  408546:	faa4 f28c 	sel	r2, r4, ip
  40854a:	fa83 f34c 	uadd8	r3, r3, ip
  40854e:	faa2 f38c 	sel	r3, r2, ip
  408552:	2b00      	cmp	r3, #0
  408554:	d0c6      	beq.n	4084e4 <strlen+0x24>
  408556:	2a00      	cmp	r2, #0
  408558:	bf04      	itt	eq
  40855a:	3004      	addeq	r0, #4
  40855c:	461a      	moveq	r2, r3
  40855e:	ba12      	rev	r2, r2
  408560:	fab2 f282 	clz	r2, r2
  408564:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  408568:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40856c:	4770      	bx	lr
  40856e:	e9d1 2300 	ldrd	r2, r3, [r1]
  408572:	f004 0503 	and.w	r5, r4, #3
  408576:	f1c4 0000 	rsb	r0, r4, #0
  40857a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40857e:	f014 0f04 	tst.w	r4, #4
  408582:	f891 f040 	pld	[r1, #64]	; 0x40
  408586:	fa0c f505 	lsl.w	r5, ip, r5
  40858a:	ea62 0205 	orn	r2, r2, r5
  40858e:	bf1c      	itt	ne
  408590:	ea63 0305 	ornne	r3, r3, r5
  408594:	4662      	movne	r2, ip
  408596:	f04f 0400 	mov.w	r4, #0
  40859a:	e7a9      	b.n	4084f0 <strlen+0x30>

0040859c <__ssprint_r>:
  40859c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4085a0:	6893      	ldr	r3, [r2, #8]
  4085a2:	b083      	sub	sp, #12
  4085a4:	4690      	mov	r8, r2
  4085a6:	2b00      	cmp	r3, #0
  4085a8:	d070      	beq.n	40868c <__ssprint_r+0xf0>
  4085aa:	4682      	mov	sl, r0
  4085ac:	460c      	mov	r4, r1
  4085ae:	6817      	ldr	r7, [r2, #0]
  4085b0:	688d      	ldr	r5, [r1, #8]
  4085b2:	6808      	ldr	r0, [r1, #0]
  4085b4:	e042      	b.n	40863c <__ssprint_r+0xa0>
  4085b6:	89a3      	ldrh	r3, [r4, #12]
  4085b8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4085bc:	d02e      	beq.n	40861c <__ssprint_r+0x80>
  4085be:	6965      	ldr	r5, [r4, #20]
  4085c0:	6921      	ldr	r1, [r4, #16]
  4085c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  4085c6:	eba0 0b01 	sub.w	fp, r0, r1
  4085ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  4085ce:	f10b 0001 	add.w	r0, fp, #1
  4085d2:	106d      	asrs	r5, r5, #1
  4085d4:	4430      	add	r0, r6
  4085d6:	42a8      	cmp	r0, r5
  4085d8:	462a      	mov	r2, r5
  4085da:	bf84      	itt	hi
  4085dc:	4605      	movhi	r5, r0
  4085de:	462a      	movhi	r2, r5
  4085e0:	055b      	lsls	r3, r3, #21
  4085e2:	d538      	bpl.n	408656 <__ssprint_r+0xba>
  4085e4:	4611      	mov	r1, r2
  4085e6:	4650      	mov	r0, sl
  4085e8:	f7fa ff56 	bl	403498 <_malloc_r>
  4085ec:	2800      	cmp	r0, #0
  4085ee:	d03c      	beq.n	40866a <__ssprint_r+0xce>
  4085f0:	465a      	mov	r2, fp
  4085f2:	6921      	ldr	r1, [r4, #16]
  4085f4:	9001      	str	r0, [sp, #4]
  4085f6:	f7ff f96b 	bl	4078d0 <memcpy>
  4085fa:	89a2      	ldrh	r2, [r4, #12]
  4085fc:	9b01      	ldr	r3, [sp, #4]
  4085fe:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  408602:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  408606:	81a2      	strh	r2, [r4, #12]
  408608:	eba5 020b 	sub.w	r2, r5, fp
  40860c:	eb03 000b 	add.w	r0, r3, fp
  408610:	6165      	str	r5, [r4, #20]
  408612:	6123      	str	r3, [r4, #16]
  408614:	6020      	str	r0, [r4, #0]
  408616:	60a2      	str	r2, [r4, #8]
  408618:	4635      	mov	r5, r6
  40861a:	46b3      	mov	fp, r6
  40861c:	465a      	mov	r2, fp
  40861e:	4649      	mov	r1, r9
  408620:	f7ff f9f0 	bl	407a04 <memmove>
  408624:	f8d8 3008 	ldr.w	r3, [r8, #8]
  408628:	68a2      	ldr	r2, [r4, #8]
  40862a:	6820      	ldr	r0, [r4, #0]
  40862c:	1b55      	subs	r5, r2, r5
  40862e:	4458      	add	r0, fp
  408630:	1b9e      	subs	r6, r3, r6
  408632:	60a5      	str	r5, [r4, #8]
  408634:	6020      	str	r0, [r4, #0]
  408636:	f8c8 6008 	str.w	r6, [r8, #8]
  40863a:	b33e      	cbz	r6, 40868c <__ssprint_r+0xf0>
  40863c:	687e      	ldr	r6, [r7, #4]
  40863e:	463b      	mov	r3, r7
  408640:	3708      	adds	r7, #8
  408642:	2e00      	cmp	r6, #0
  408644:	d0fa      	beq.n	40863c <__ssprint_r+0xa0>
  408646:	42ae      	cmp	r6, r5
  408648:	f8d3 9000 	ldr.w	r9, [r3]
  40864c:	46ab      	mov	fp, r5
  40864e:	d2b2      	bcs.n	4085b6 <__ssprint_r+0x1a>
  408650:	4635      	mov	r5, r6
  408652:	46b3      	mov	fp, r6
  408654:	e7e2      	b.n	40861c <__ssprint_r+0x80>
  408656:	4650      	mov	r0, sl
  408658:	f7ff fd32 	bl	4080c0 <_realloc_r>
  40865c:	4603      	mov	r3, r0
  40865e:	2800      	cmp	r0, #0
  408660:	d1d2      	bne.n	408608 <__ssprint_r+0x6c>
  408662:	6921      	ldr	r1, [r4, #16]
  408664:	4650      	mov	r0, sl
  408666:	f7fe fda3 	bl	4071b0 <_free_r>
  40866a:	230c      	movs	r3, #12
  40866c:	f8ca 3000 	str.w	r3, [sl]
  408670:	89a3      	ldrh	r3, [r4, #12]
  408672:	2200      	movs	r2, #0
  408674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408678:	f04f 30ff 	mov.w	r0, #4294967295
  40867c:	81a3      	strh	r3, [r4, #12]
  40867e:	f8c8 2008 	str.w	r2, [r8, #8]
  408682:	f8c8 2004 	str.w	r2, [r8, #4]
  408686:	b003      	add	sp, #12
  408688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40868c:	2000      	movs	r0, #0
  40868e:	f8c8 0004 	str.w	r0, [r8, #4]
  408692:	b003      	add	sp, #12
  408694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00408698 <__swbuf_r>:
  408698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40869a:	460d      	mov	r5, r1
  40869c:	4614      	mov	r4, r2
  40869e:	4606      	mov	r6, r0
  4086a0:	b110      	cbz	r0, 4086a8 <__swbuf_r+0x10>
  4086a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4086a4:	2b00      	cmp	r3, #0
  4086a6:	d04b      	beq.n	408740 <__swbuf_r+0xa8>
  4086a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4086ac:	69a3      	ldr	r3, [r4, #24]
  4086ae:	60a3      	str	r3, [r4, #8]
  4086b0:	b291      	uxth	r1, r2
  4086b2:	0708      	lsls	r0, r1, #28
  4086b4:	d539      	bpl.n	40872a <__swbuf_r+0x92>
  4086b6:	6923      	ldr	r3, [r4, #16]
  4086b8:	2b00      	cmp	r3, #0
  4086ba:	d036      	beq.n	40872a <__swbuf_r+0x92>
  4086bc:	b2ed      	uxtb	r5, r5
  4086be:	0489      	lsls	r1, r1, #18
  4086c0:	462f      	mov	r7, r5
  4086c2:	d515      	bpl.n	4086f0 <__swbuf_r+0x58>
  4086c4:	6822      	ldr	r2, [r4, #0]
  4086c6:	6961      	ldr	r1, [r4, #20]
  4086c8:	1ad3      	subs	r3, r2, r3
  4086ca:	428b      	cmp	r3, r1
  4086cc:	da1c      	bge.n	408708 <__swbuf_r+0x70>
  4086ce:	3301      	adds	r3, #1
  4086d0:	68a1      	ldr	r1, [r4, #8]
  4086d2:	1c50      	adds	r0, r2, #1
  4086d4:	3901      	subs	r1, #1
  4086d6:	60a1      	str	r1, [r4, #8]
  4086d8:	6020      	str	r0, [r4, #0]
  4086da:	7015      	strb	r5, [r2, #0]
  4086dc:	6962      	ldr	r2, [r4, #20]
  4086de:	429a      	cmp	r2, r3
  4086e0:	d01a      	beq.n	408718 <__swbuf_r+0x80>
  4086e2:	89a3      	ldrh	r3, [r4, #12]
  4086e4:	07db      	lsls	r3, r3, #31
  4086e6:	d501      	bpl.n	4086ec <__swbuf_r+0x54>
  4086e8:	2d0a      	cmp	r5, #10
  4086ea:	d015      	beq.n	408718 <__swbuf_r+0x80>
  4086ec:	4638      	mov	r0, r7
  4086ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4086f0:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4086f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4086f6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4086fa:	81a2      	strh	r2, [r4, #12]
  4086fc:	6822      	ldr	r2, [r4, #0]
  4086fe:	6661      	str	r1, [r4, #100]	; 0x64
  408700:	6961      	ldr	r1, [r4, #20]
  408702:	1ad3      	subs	r3, r2, r3
  408704:	428b      	cmp	r3, r1
  408706:	dbe2      	blt.n	4086ce <__swbuf_r+0x36>
  408708:	4621      	mov	r1, r4
  40870a:	4630      	mov	r0, r6
  40870c:	f7fe fbd2 	bl	406eb4 <_fflush_r>
  408710:	b940      	cbnz	r0, 408724 <__swbuf_r+0x8c>
  408712:	6822      	ldr	r2, [r4, #0]
  408714:	2301      	movs	r3, #1
  408716:	e7db      	b.n	4086d0 <__swbuf_r+0x38>
  408718:	4621      	mov	r1, r4
  40871a:	4630      	mov	r0, r6
  40871c:	f7fe fbca 	bl	406eb4 <_fflush_r>
  408720:	2800      	cmp	r0, #0
  408722:	d0e3      	beq.n	4086ec <__swbuf_r+0x54>
  408724:	f04f 37ff 	mov.w	r7, #4294967295
  408728:	e7e0      	b.n	4086ec <__swbuf_r+0x54>
  40872a:	4621      	mov	r1, r4
  40872c:	4630      	mov	r0, r6
  40872e:	f7fd faed 	bl	405d0c <__swsetup_r>
  408732:	2800      	cmp	r0, #0
  408734:	d1f6      	bne.n	408724 <__swbuf_r+0x8c>
  408736:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40873a:	6923      	ldr	r3, [r4, #16]
  40873c:	b291      	uxth	r1, r2
  40873e:	e7bd      	b.n	4086bc <__swbuf_r+0x24>
  408740:	f7fe fc10 	bl	406f64 <__sinit>
  408744:	e7b0      	b.n	4086a8 <__swbuf_r+0x10>
  408746:	bf00      	nop

00408748 <_wcrtomb_r>:
  408748:	b5f0      	push	{r4, r5, r6, r7, lr}
  40874a:	4606      	mov	r6, r0
  40874c:	b085      	sub	sp, #20
  40874e:	461f      	mov	r7, r3
  408750:	b189      	cbz	r1, 408776 <_wcrtomb_r+0x2e>
  408752:	4c10      	ldr	r4, [pc, #64]	; (408794 <_wcrtomb_r+0x4c>)
  408754:	4d10      	ldr	r5, [pc, #64]	; (408798 <_wcrtomb_r+0x50>)
  408756:	6824      	ldr	r4, [r4, #0]
  408758:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40875a:	2c00      	cmp	r4, #0
  40875c:	bf08      	it	eq
  40875e:	462c      	moveq	r4, r5
  408760:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  408764:	47a0      	blx	r4
  408766:	1c43      	adds	r3, r0, #1
  408768:	d103      	bne.n	408772 <_wcrtomb_r+0x2a>
  40876a:	2200      	movs	r2, #0
  40876c:	238a      	movs	r3, #138	; 0x8a
  40876e:	603a      	str	r2, [r7, #0]
  408770:	6033      	str	r3, [r6, #0]
  408772:	b005      	add	sp, #20
  408774:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408776:	460c      	mov	r4, r1
  408778:	4906      	ldr	r1, [pc, #24]	; (408794 <_wcrtomb_r+0x4c>)
  40877a:	4a07      	ldr	r2, [pc, #28]	; (408798 <_wcrtomb_r+0x50>)
  40877c:	6809      	ldr	r1, [r1, #0]
  40877e:	6b49      	ldr	r1, [r1, #52]	; 0x34
  408780:	2900      	cmp	r1, #0
  408782:	bf08      	it	eq
  408784:	4611      	moveq	r1, r2
  408786:	4622      	mov	r2, r4
  408788:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40878c:	a901      	add	r1, sp, #4
  40878e:	47a0      	blx	r4
  408790:	e7e9      	b.n	408766 <_wcrtomb_r+0x1e>
  408792:	bf00      	nop
  408794:	20400040 	.word	0x20400040
  408798:	20400884 	.word	0x20400884

0040879c <__ascii_wctomb>:
  40879c:	b121      	cbz	r1, 4087a8 <__ascii_wctomb+0xc>
  40879e:	2aff      	cmp	r2, #255	; 0xff
  4087a0:	d804      	bhi.n	4087ac <__ascii_wctomb+0x10>
  4087a2:	700a      	strb	r2, [r1, #0]
  4087a4:	2001      	movs	r0, #1
  4087a6:	4770      	bx	lr
  4087a8:	4608      	mov	r0, r1
  4087aa:	4770      	bx	lr
  4087ac:	238a      	movs	r3, #138	; 0x8a
  4087ae:	6003      	str	r3, [r0, #0]
  4087b0:	f04f 30ff 	mov.w	r0, #4294967295
  4087b4:	4770      	bx	lr
  4087b6:	bf00      	nop

004087b8 <_write_r>:
  4087b8:	b570      	push	{r4, r5, r6, lr}
  4087ba:	460d      	mov	r5, r1
  4087bc:	4c08      	ldr	r4, [pc, #32]	; (4087e0 <_write_r+0x28>)
  4087be:	4611      	mov	r1, r2
  4087c0:	4606      	mov	r6, r0
  4087c2:	461a      	mov	r2, r3
  4087c4:	4628      	mov	r0, r5
  4087c6:	2300      	movs	r3, #0
  4087c8:	6023      	str	r3, [r4, #0]
  4087ca:	f7f8 fe57 	bl	40147c <_write>
  4087ce:	1c43      	adds	r3, r0, #1
  4087d0:	d000      	beq.n	4087d4 <_write_r+0x1c>
  4087d2:	bd70      	pop	{r4, r5, r6, pc}
  4087d4:	6823      	ldr	r3, [r4, #0]
  4087d6:	2b00      	cmp	r3, #0
  4087d8:	d0fb      	beq.n	4087d2 <_write_r+0x1a>
  4087da:	6033      	str	r3, [r6, #0]
  4087dc:	bd70      	pop	{r4, r5, r6, pc}
  4087de:	bf00      	nop
  4087e0:	20403004 	.word	0x20403004

004087e4 <__register_exitproc>:
  4087e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4087e8:	4d2c      	ldr	r5, [pc, #176]	; (40889c <__register_exitproc+0xb8>)
  4087ea:	4606      	mov	r6, r0
  4087ec:	6828      	ldr	r0, [r5, #0]
  4087ee:	4698      	mov	r8, r3
  4087f0:	460f      	mov	r7, r1
  4087f2:	4691      	mov	r9, r2
  4087f4:	f7fe ff84 	bl	407700 <__retarget_lock_acquire_recursive>
  4087f8:	4b29      	ldr	r3, [pc, #164]	; (4088a0 <__register_exitproc+0xbc>)
  4087fa:	681c      	ldr	r4, [r3, #0]
  4087fc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  408800:	2b00      	cmp	r3, #0
  408802:	d03e      	beq.n	408882 <__register_exitproc+0x9e>
  408804:	685a      	ldr	r2, [r3, #4]
  408806:	2a1f      	cmp	r2, #31
  408808:	dc1c      	bgt.n	408844 <__register_exitproc+0x60>
  40880a:	f102 0e01 	add.w	lr, r2, #1
  40880e:	b176      	cbz	r6, 40882e <__register_exitproc+0x4a>
  408810:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  408814:	2401      	movs	r4, #1
  408816:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40881a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40881e:	4094      	lsls	r4, r2
  408820:	4320      	orrs	r0, r4
  408822:	2e02      	cmp	r6, #2
  408824:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  408828:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40882c:	d023      	beq.n	408876 <__register_exitproc+0x92>
  40882e:	3202      	adds	r2, #2
  408830:	f8c3 e004 	str.w	lr, [r3, #4]
  408834:	6828      	ldr	r0, [r5, #0]
  408836:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40883a:	f7fe ff63 	bl	407704 <__retarget_lock_release_recursive>
  40883e:	2000      	movs	r0, #0
  408840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408844:	4b17      	ldr	r3, [pc, #92]	; (4088a4 <__register_exitproc+0xc0>)
  408846:	b30b      	cbz	r3, 40888c <__register_exitproc+0xa8>
  408848:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40884c:	f7fa fe1c 	bl	403488 <malloc>
  408850:	4603      	mov	r3, r0
  408852:	b1d8      	cbz	r0, 40888c <__register_exitproc+0xa8>
  408854:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  408858:	6002      	str	r2, [r0, #0]
  40885a:	2100      	movs	r1, #0
  40885c:	6041      	str	r1, [r0, #4]
  40885e:	460a      	mov	r2, r1
  408860:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  408864:	f04f 0e01 	mov.w	lr, #1
  408868:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40886c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  408870:	2e00      	cmp	r6, #0
  408872:	d0dc      	beq.n	40882e <__register_exitproc+0x4a>
  408874:	e7cc      	b.n	408810 <__register_exitproc+0x2c>
  408876:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40887a:	430c      	orrs	r4, r1
  40887c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  408880:	e7d5      	b.n	40882e <__register_exitproc+0x4a>
  408882:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  408886:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40888a:	e7bb      	b.n	408804 <__register_exitproc+0x20>
  40888c:	6828      	ldr	r0, [r5, #0]
  40888e:	f7fe ff39 	bl	407704 <__retarget_lock_release_recursive>
  408892:	f04f 30ff 	mov.w	r0, #4294967295
  408896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40889a:	bf00      	nop
  40889c:	20400880 	.word	0x20400880
  4088a0:	00409a54 	.word	0x00409a54
  4088a4:	00403489 	.word	0x00403489

004088a8 <_calloc_r>:
  4088a8:	b510      	push	{r4, lr}
  4088aa:	fb02 f101 	mul.w	r1, r2, r1
  4088ae:	f7fa fdf3 	bl	403498 <_malloc_r>
  4088b2:	4604      	mov	r4, r0
  4088b4:	b1d8      	cbz	r0, 4088ee <_calloc_r+0x46>
  4088b6:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4088ba:	f022 0203 	bic.w	r2, r2, #3
  4088be:	3a04      	subs	r2, #4
  4088c0:	2a24      	cmp	r2, #36	; 0x24
  4088c2:	d818      	bhi.n	4088f6 <_calloc_r+0x4e>
  4088c4:	2a13      	cmp	r2, #19
  4088c6:	d914      	bls.n	4088f2 <_calloc_r+0x4a>
  4088c8:	2300      	movs	r3, #0
  4088ca:	2a1b      	cmp	r2, #27
  4088cc:	6003      	str	r3, [r0, #0]
  4088ce:	6043      	str	r3, [r0, #4]
  4088d0:	d916      	bls.n	408900 <_calloc_r+0x58>
  4088d2:	2a24      	cmp	r2, #36	; 0x24
  4088d4:	6083      	str	r3, [r0, #8]
  4088d6:	60c3      	str	r3, [r0, #12]
  4088d8:	bf11      	iteee	ne
  4088da:	f100 0210 	addne.w	r2, r0, #16
  4088de:	6103      	streq	r3, [r0, #16]
  4088e0:	6143      	streq	r3, [r0, #20]
  4088e2:	f100 0218 	addeq.w	r2, r0, #24
  4088e6:	2300      	movs	r3, #0
  4088e8:	6013      	str	r3, [r2, #0]
  4088ea:	6053      	str	r3, [r2, #4]
  4088ec:	6093      	str	r3, [r2, #8]
  4088ee:	4620      	mov	r0, r4
  4088f0:	bd10      	pop	{r4, pc}
  4088f2:	4602      	mov	r2, r0
  4088f4:	e7f7      	b.n	4088e6 <_calloc_r+0x3e>
  4088f6:	2100      	movs	r1, #0
  4088f8:	f7fb f87e 	bl	4039f8 <memset>
  4088fc:	4620      	mov	r0, r4
  4088fe:	bd10      	pop	{r4, pc}
  408900:	f100 0208 	add.w	r2, r0, #8
  408904:	e7ef      	b.n	4088e6 <_calloc_r+0x3e>
  408906:	bf00      	nop

00408908 <_close_r>:
  408908:	b538      	push	{r3, r4, r5, lr}
  40890a:	4c07      	ldr	r4, [pc, #28]	; (408928 <_close_r+0x20>)
  40890c:	2300      	movs	r3, #0
  40890e:	4605      	mov	r5, r0
  408910:	4608      	mov	r0, r1
  408912:	6023      	str	r3, [r4, #0]
  408914:	f7fa f826 	bl	402964 <_close>
  408918:	1c43      	adds	r3, r0, #1
  40891a:	d000      	beq.n	40891e <_close_r+0x16>
  40891c:	bd38      	pop	{r3, r4, r5, pc}
  40891e:	6823      	ldr	r3, [r4, #0]
  408920:	2b00      	cmp	r3, #0
  408922:	d0fb      	beq.n	40891c <_close_r+0x14>
  408924:	602b      	str	r3, [r5, #0]
  408926:	bd38      	pop	{r3, r4, r5, pc}
  408928:	20403004 	.word	0x20403004

0040892c <_fclose_r>:
  40892c:	b570      	push	{r4, r5, r6, lr}
  40892e:	b159      	cbz	r1, 408948 <_fclose_r+0x1c>
  408930:	4605      	mov	r5, r0
  408932:	460c      	mov	r4, r1
  408934:	b110      	cbz	r0, 40893c <_fclose_r+0x10>
  408936:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408938:	2b00      	cmp	r3, #0
  40893a:	d03c      	beq.n	4089b6 <_fclose_r+0x8a>
  40893c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40893e:	07d8      	lsls	r0, r3, #31
  408940:	d505      	bpl.n	40894e <_fclose_r+0x22>
  408942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408946:	b92b      	cbnz	r3, 408954 <_fclose_r+0x28>
  408948:	2600      	movs	r6, #0
  40894a:	4630      	mov	r0, r6
  40894c:	bd70      	pop	{r4, r5, r6, pc}
  40894e:	89a3      	ldrh	r3, [r4, #12]
  408950:	0599      	lsls	r1, r3, #22
  408952:	d53c      	bpl.n	4089ce <_fclose_r+0xa2>
  408954:	4621      	mov	r1, r4
  408956:	4628      	mov	r0, r5
  408958:	f7fe fa0c 	bl	406d74 <__sflush_r>
  40895c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40895e:	4606      	mov	r6, r0
  408960:	b133      	cbz	r3, 408970 <_fclose_r+0x44>
  408962:	69e1      	ldr	r1, [r4, #28]
  408964:	4628      	mov	r0, r5
  408966:	4798      	blx	r3
  408968:	2800      	cmp	r0, #0
  40896a:	bfb8      	it	lt
  40896c:	f04f 36ff 	movlt.w	r6, #4294967295
  408970:	89a3      	ldrh	r3, [r4, #12]
  408972:	061a      	lsls	r2, r3, #24
  408974:	d422      	bmi.n	4089bc <_fclose_r+0x90>
  408976:	6b21      	ldr	r1, [r4, #48]	; 0x30
  408978:	b141      	cbz	r1, 40898c <_fclose_r+0x60>
  40897a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40897e:	4299      	cmp	r1, r3
  408980:	d002      	beq.n	408988 <_fclose_r+0x5c>
  408982:	4628      	mov	r0, r5
  408984:	f7fe fc14 	bl	4071b0 <_free_r>
  408988:	2300      	movs	r3, #0
  40898a:	6323      	str	r3, [r4, #48]	; 0x30
  40898c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40898e:	b121      	cbz	r1, 40899a <_fclose_r+0x6e>
  408990:	4628      	mov	r0, r5
  408992:	f7fe fc0d 	bl	4071b0 <_free_r>
  408996:	2300      	movs	r3, #0
  408998:	6463      	str	r3, [r4, #68]	; 0x44
  40899a:	f7fe fb0f 	bl	406fbc <__sfp_lock_acquire>
  40899e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4089a0:	2200      	movs	r2, #0
  4089a2:	07db      	lsls	r3, r3, #31
  4089a4:	81a2      	strh	r2, [r4, #12]
  4089a6:	d50e      	bpl.n	4089c6 <_fclose_r+0x9a>
  4089a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4089aa:	f7fe fea7 	bl	4076fc <__retarget_lock_close_recursive>
  4089ae:	f7fe fb0b 	bl	406fc8 <__sfp_lock_release>
  4089b2:	4630      	mov	r0, r6
  4089b4:	bd70      	pop	{r4, r5, r6, pc}
  4089b6:	f7fe fad5 	bl	406f64 <__sinit>
  4089ba:	e7bf      	b.n	40893c <_fclose_r+0x10>
  4089bc:	6921      	ldr	r1, [r4, #16]
  4089be:	4628      	mov	r0, r5
  4089c0:	f7fe fbf6 	bl	4071b0 <_free_r>
  4089c4:	e7d7      	b.n	408976 <_fclose_r+0x4a>
  4089c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4089c8:	f7fe fe9c 	bl	407704 <__retarget_lock_release_recursive>
  4089cc:	e7ec      	b.n	4089a8 <_fclose_r+0x7c>
  4089ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4089d0:	f7fe fe96 	bl	407700 <__retarget_lock_acquire_recursive>
  4089d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4089d8:	2b00      	cmp	r3, #0
  4089da:	d1bb      	bne.n	408954 <_fclose_r+0x28>
  4089dc:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4089de:	f016 0601 	ands.w	r6, r6, #1
  4089e2:	d1b1      	bne.n	408948 <_fclose_r+0x1c>
  4089e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4089e6:	f7fe fe8d 	bl	407704 <__retarget_lock_release_recursive>
  4089ea:	4630      	mov	r0, r6
  4089ec:	bd70      	pop	{r4, r5, r6, pc}
  4089ee:	bf00      	nop

004089f0 <_fstat_r>:
  4089f0:	b538      	push	{r3, r4, r5, lr}
  4089f2:	460b      	mov	r3, r1
  4089f4:	4c07      	ldr	r4, [pc, #28]	; (408a14 <_fstat_r+0x24>)
  4089f6:	4605      	mov	r5, r0
  4089f8:	4611      	mov	r1, r2
  4089fa:	4618      	mov	r0, r3
  4089fc:	2300      	movs	r3, #0
  4089fe:	6023      	str	r3, [r4, #0]
  408a00:	f7f9 ffb3 	bl	40296a <_fstat>
  408a04:	1c43      	adds	r3, r0, #1
  408a06:	d000      	beq.n	408a0a <_fstat_r+0x1a>
  408a08:	bd38      	pop	{r3, r4, r5, pc}
  408a0a:	6823      	ldr	r3, [r4, #0]
  408a0c:	2b00      	cmp	r3, #0
  408a0e:	d0fb      	beq.n	408a08 <_fstat_r+0x18>
  408a10:	602b      	str	r3, [r5, #0]
  408a12:	bd38      	pop	{r3, r4, r5, pc}
  408a14:	20403004 	.word	0x20403004

00408a18 <_isatty_r>:
  408a18:	b538      	push	{r3, r4, r5, lr}
  408a1a:	4c07      	ldr	r4, [pc, #28]	; (408a38 <_isatty_r+0x20>)
  408a1c:	2300      	movs	r3, #0
  408a1e:	4605      	mov	r5, r0
  408a20:	4608      	mov	r0, r1
  408a22:	6023      	str	r3, [r4, #0]
  408a24:	f7f9 ffa6 	bl	402974 <_isatty>
  408a28:	1c43      	adds	r3, r0, #1
  408a2a:	d000      	beq.n	408a2e <_isatty_r+0x16>
  408a2c:	bd38      	pop	{r3, r4, r5, pc}
  408a2e:	6823      	ldr	r3, [r4, #0]
  408a30:	2b00      	cmp	r3, #0
  408a32:	d0fb      	beq.n	408a2c <_isatty_r+0x14>
  408a34:	602b      	str	r3, [r5, #0]
  408a36:	bd38      	pop	{r3, r4, r5, pc}
  408a38:	20403004 	.word	0x20403004

00408a3c <_lseek_r>:
  408a3c:	b570      	push	{r4, r5, r6, lr}
  408a3e:	460d      	mov	r5, r1
  408a40:	4c08      	ldr	r4, [pc, #32]	; (408a64 <_lseek_r+0x28>)
  408a42:	4611      	mov	r1, r2
  408a44:	4606      	mov	r6, r0
  408a46:	461a      	mov	r2, r3
  408a48:	4628      	mov	r0, r5
  408a4a:	2300      	movs	r3, #0
  408a4c:	6023      	str	r3, [r4, #0]
  408a4e:	f7f9 ff93 	bl	402978 <_lseek>
  408a52:	1c43      	adds	r3, r0, #1
  408a54:	d000      	beq.n	408a58 <_lseek_r+0x1c>
  408a56:	bd70      	pop	{r4, r5, r6, pc}
  408a58:	6823      	ldr	r3, [r4, #0]
  408a5a:	2b00      	cmp	r3, #0
  408a5c:	d0fb      	beq.n	408a56 <_lseek_r+0x1a>
  408a5e:	6033      	str	r3, [r6, #0]
  408a60:	bd70      	pop	{r4, r5, r6, pc}
  408a62:	bf00      	nop
  408a64:	20403004 	.word	0x20403004

00408a68 <_read_r>:
  408a68:	b570      	push	{r4, r5, r6, lr}
  408a6a:	460d      	mov	r5, r1
  408a6c:	4c08      	ldr	r4, [pc, #32]	; (408a90 <_read_r+0x28>)
  408a6e:	4611      	mov	r1, r2
  408a70:	4606      	mov	r6, r0
  408a72:	461a      	mov	r2, r3
  408a74:	4628      	mov	r0, r5
  408a76:	2300      	movs	r3, #0
  408a78:	6023      	str	r3, [r4, #0]
  408a7a:	f7f8 fce1 	bl	401440 <_read>
  408a7e:	1c43      	adds	r3, r0, #1
  408a80:	d000      	beq.n	408a84 <_read_r+0x1c>
  408a82:	bd70      	pop	{r4, r5, r6, pc}
  408a84:	6823      	ldr	r3, [r4, #0]
  408a86:	2b00      	cmp	r3, #0
  408a88:	d0fb      	beq.n	408a82 <_read_r+0x1a>
  408a8a:	6033      	str	r3, [r6, #0]
  408a8c:	bd70      	pop	{r4, r5, r6, pc}
  408a8e:	bf00      	nop
  408a90:	20403004 	.word	0x20403004

00408a94 <__aeabi_d2iz>:
  408a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
  408a98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  408a9c:	d215      	bcs.n	408aca <__aeabi_d2iz+0x36>
  408a9e:	d511      	bpl.n	408ac4 <__aeabi_d2iz+0x30>
  408aa0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  408aa4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  408aa8:	d912      	bls.n	408ad0 <__aeabi_d2iz+0x3c>
  408aaa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  408aae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  408ab2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  408ab6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408aba:	fa23 f002 	lsr.w	r0, r3, r2
  408abe:	bf18      	it	ne
  408ac0:	4240      	negne	r0, r0
  408ac2:	4770      	bx	lr
  408ac4:	f04f 0000 	mov.w	r0, #0
  408ac8:	4770      	bx	lr
  408aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  408ace:	d105      	bne.n	408adc <__aeabi_d2iz+0x48>
  408ad0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  408ad4:	bf08      	it	eq
  408ad6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  408ada:	4770      	bx	lr
  408adc:	f04f 0000 	mov.w	r0, #0
  408ae0:	4770      	bx	lr
  408ae2:	bf00      	nop

00408ae4 <__aeabi_uldivmod>:
  408ae4:	b953      	cbnz	r3, 408afc <__aeabi_uldivmod+0x18>
  408ae6:	b94a      	cbnz	r2, 408afc <__aeabi_uldivmod+0x18>
  408ae8:	2900      	cmp	r1, #0
  408aea:	bf08      	it	eq
  408aec:	2800      	cmpeq	r0, #0
  408aee:	bf1c      	itt	ne
  408af0:	f04f 31ff 	movne.w	r1, #4294967295
  408af4:	f04f 30ff 	movne.w	r0, #4294967295
  408af8:	f000 b97a 	b.w	408df0 <__aeabi_idiv0>
  408afc:	f1ad 0c08 	sub.w	ip, sp, #8
  408b00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  408b04:	f000 f806 	bl	408b14 <__udivmoddi4>
  408b08:	f8dd e004 	ldr.w	lr, [sp, #4]
  408b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408b10:	b004      	add	sp, #16
  408b12:	4770      	bx	lr

00408b14 <__udivmoddi4>:
  408b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408b18:	468c      	mov	ip, r1
  408b1a:	460d      	mov	r5, r1
  408b1c:	4604      	mov	r4, r0
  408b1e:	9e08      	ldr	r6, [sp, #32]
  408b20:	2b00      	cmp	r3, #0
  408b22:	d151      	bne.n	408bc8 <__udivmoddi4+0xb4>
  408b24:	428a      	cmp	r2, r1
  408b26:	4617      	mov	r7, r2
  408b28:	d96d      	bls.n	408c06 <__udivmoddi4+0xf2>
  408b2a:	fab2 fe82 	clz	lr, r2
  408b2e:	f1be 0f00 	cmp.w	lr, #0
  408b32:	d00b      	beq.n	408b4c <__udivmoddi4+0x38>
  408b34:	f1ce 0c20 	rsb	ip, lr, #32
  408b38:	fa01 f50e 	lsl.w	r5, r1, lr
  408b3c:	fa20 fc0c 	lsr.w	ip, r0, ip
  408b40:	fa02 f70e 	lsl.w	r7, r2, lr
  408b44:	ea4c 0c05 	orr.w	ip, ip, r5
  408b48:	fa00 f40e 	lsl.w	r4, r0, lr
  408b4c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  408b50:	0c25      	lsrs	r5, r4, #16
  408b52:	fbbc f8fa 	udiv	r8, ip, sl
  408b56:	fa1f f987 	uxth.w	r9, r7
  408b5a:	fb0a cc18 	mls	ip, sl, r8, ip
  408b5e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  408b62:	fb08 f309 	mul.w	r3, r8, r9
  408b66:	42ab      	cmp	r3, r5
  408b68:	d90a      	bls.n	408b80 <__udivmoddi4+0x6c>
  408b6a:	19ed      	adds	r5, r5, r7
  408b6c:	f108 32ff 	add.w	r2, r8, #4294967295
  408b70:	f080 8123 	bcs.w	408dba <__udivmoddi4+0x2a6>
  408b74:	42ab      	cmp	r3, r5
  408b76:	f240 8120 	bls.w	408dba <__udivmoddi4+0x2a6>
  408b7a:	f1a8 0802 	sub.w	r8, r8, #2
  408b7e:	443d      	add	r5, r7
  408b80:	1aed      	subs	r5, r5, r3
  408b82:	b2a4      	uxth	r4, r4
  408b84:	fbb5 f0fa 	udiv	r0, r5, sl
  408b88:	fb0a 5510 	mls	r5, sl, r0, r5
  408b8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  408b90:	fb00 f909 	mul.w	r9, r0, r9
  408b94:	45a1      	cmp	r9, r4
  408b96:	d909      	bls.n	408bac <__udivmoddi4+0x98>
  408b98:	19e4      	adds	r4, r4, r7
  408b9a:	f100 33ff 	add.w	r3, r0, #4294967295
  408b9e:	f080 810a 	bcs.w	408db6 <__udivmoddi4+0x2a2>
  408ba2:	45a1      	cmp	r9, r4
  408ba4:	f240 8107 	bls.w	408db6 <__udivmoddi4+0x2a2>
  408ba8:	3802      	subs	r0, #2
  408baa:	443c      	add	r4, r7
  408bac:	eba4 0409 	sub.w	r4, r4, r9
  408bb0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408bb4:	2100      	movs	r1, #0
  408bb6:	2e00      	cmp	r6, #0
  408bb8:	d061      	beq.n	408c7e <__udivmoddi4+0x16a>
  408bba:	fa24 f40e 	lsr.w	r4, r4, lr
  408bbe:	2300      	movs	r3, #0
  408bc0:	6034      	str	r4, [r6, #0]
  408bc2:	6073      	str	r3, [r6, #4]
  408bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408bc8:	428b      	cmp	r3, r1
  408bca:	d907      	bls.n	408bdc <__udivmoddi4+0xc8>
  408bcc:	2e00      	cmp	r6, #0
  408bce:	d054      	beq.n	408c7a <__udivmoddi4+0x166>
  408bd0:	2100      	movs	r1, #0
  408bd2:	e886 0021 	stmia.w	r6, {r0, r5}
  408bd6:	4608      	mov	r0, r1
  408bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408bdc:	fab3 f183 	clz	r1, r3
  408be0:	2900      	cmp	r1, #0
  408be2:	f040 808e 	bne.w	408d02 <__udivmoddi4+0x1ee>
  408be6:	42ab      	cmp	r3, r5
  408be8:	d302      	bcc.n	408bf0 <__udivmoddi4+0xdc>
  408bea:	4282      	cmp	r2, r0
  408bec:	f200 80fa 	bhi.w	408de4 <__udivmoddi4+0x2d0>
  408bf0:	1a84      	subs	r4, r0, r2
  408bf2:	eb65 0503 	sbc.w	r5, r5, r3
  408bf6:	2001      	movs	r0, #1
  408bf8:	46ac      	mov	ip, r5
  408bfa:	2e00      	cmp	r6, #0
  408bfc:	d03f      	beq.n	408c7e <__udivmoddi4+0x16a>
  408bfe:	e886 1010 	stmia.w	r6, {r4, ip}
  408c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408c06:	b912      	cbnz	r2, 408c0e <__udivmoddi4+0xfa>
  408c08:	2701      	movs	r7, #1
  408c0a:	fbb7 f7f2 	udiv	r7, r7, r2
  408c0e:	fab7 fe87 	clz	lr, r7
  408c12:	f1be 0f00 	cmp.w	lr, #0
  408c16:	d134      	bne.n	408c82 <__udivmoddi4+0x16e>
  408c18:	1beb      	subs	r3, r5, r7
  408c1a:	0c3a      	lsrs	r2, r7, #16
  408c1c:	fa1f fc87 	uxth.w	ip, r7
  408c20:	2101      	movs	r1, #1
  408c22:	fbb3 f8f2 	udiv	r8, r3, r2
  408c26:	0c25      	lsrs	r5, r4, #16
  408c28:	fb02 3318 	mls	r3, r2, r8, r3
  408c2c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408c30:	fb0c f308 	mul.w	r3, ip, r8
  408c34:	42ab      	cmp	r3, r5
  408c36:	d907      	bls.n	408c48 <__udivmoddi4+0x134>
  408c38:	19ed      	adds	r5, r5, r7
  408c3a:	f108 30ff 	add.w	r0, r8, #4294967295
  408c3e:	d202      	bcs.n	408c46 <__udivmoddi4+0x132>
  408c40:	42ab      	cmp	r3, r5
  408c42:	f200 80d1 	bhi.w	408de8 <__udivmoddi4+0x2d4>
  408c46:	4680      	mov	r8, r0
  408c48:	1aed      	subs	r5, r5, r3
  408c4a:	b2a3      	uxth	r3, r4
  408c4c:	fbb5 f0f2 	udiv	r0, r5, r2
  408c50:	fb02 5510 	mls	r5, r2, r0, r5
  408c54:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  408c58:	fb0c fc00 	mul.w	ip, ip, r0
  408c5c:	45a4      	cmp	ip, r4
  408c5e:	d907      	bls.n	408c70 <__udivmoddi4+0x15c>
  408c60:	19e4      	adds	r4, r4, r7
  408c62:	f100 33ff 	add.w	r3, r0, #4294967295
  408c66:	d202      	bcs.n	408c6e <__udivmoddi4+0x15a>
  408c68:	45a4      	cmp	ip, r4
  408c6a:	f200 80b8 	bhi.w	408dde <__udivmoddi4+0x2ca>
  408c6e:	4618      	mov	r0, r3
  408c70:	eba4 040c 	sub.w	r4, r4, ip
  408c74:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408c78:	e79d      	b.n	408bb6 <__udivmoddi4+0xa2>
  408c7a:	4631      	mov	r1, r6
  408c7c:	4630      	mov	r0, r6
  408c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408c82:	f1ce 0420 	rsb	r4, lr, #32
  408c86:	fa05 f30e 	lsl.w	r3, r5, lr
  408c8a:	fa07 f70e 	lsl.w	r7, r7, lr
  408c8e:	fa20 f804 	lsr.w	r8, r0, r4
  408c92:	0c3a      	lsrs	r2, r7, #16
  408c94:	fa25 f404 	lsr.w	r4, r5, r4
  408c98:	ea48 0803 	orr.w	r8, r8, r3
  408c9c:	fbb4 f1f2 	udiv	r1, r4, r2
  408ca0:	ea4f 4518 	mov.w	r5, r8, lsr #16
  408ca4:	fb02 4411 	mls	r4, r2, r1, r4
  408ca8:	fa1f fc87 	uxth.w	ip, r7
  408cac:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  408cb0:	fb01 f30c 	mul.w	r3, r1, ip
  408cb4:	42ab      	cmp	r3, r5
  408cb6:	fa00 f40e 	lsl.w	r4, r0, lr
  408cba:	d909      	bls.n	408cd0 <__udivmoddi4+0x1bc>
  408cbc:	19ed      	adds	r5, r5, r7
  408cbe:	f101 30ff 	add.w	r0, r1, #4294967295
  408cc2:	f080 808a 	bcs.w	408dda <__udivmoddi4+0x2c6>
  408cc6:	42ab      	cmp	r3, r5
  408cc8:	f240 8087 	bls.w	408dda <__udivmoddi4+0x2c6>
  408ccc:	3902      	subs	r1, #2
  408cce:	443d      	add	r5, r7
  408cd0:	1aeb      	subs	r3, r5, r3
  408cd2:	fa1f f588 	uxth.w	r5, r8
  408cd6:	fbb3 f0f2 	udiv	r0, r3, r2
  408cda:	fb02 3310 	mls	r3, r2, r0, r3
  408cde:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408ce2:	fb00 f30c 	mul.w	r3, r0, ip
  408ce6:	42ab      	cmp	r3, r5
  408ce8:	d907      	bls.n	408cfa <__udivmoddi4+0x1e6>
  408cea:	19ed      	adds	r5, r5, r7
  408cec:	f100 38ff 	add.w	r8, r0, #4294967295
  408cf0:	d26f      	bcs.n	408dd2 <__udivmoddi4+0x2be>
  408cf2:	42ab      	cmp	r3, r5
  408cf4:	d96d      	bls.n	408dd2 <__udivmoddi4+0x2be>
  408cf6:	3802      	subs	r0, #2
  408cf8:	443d      	add	r5, r7
  408cfa:	1aeb      	subs	r3, r5, r3
  408cfc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  408d00:	e78f      	b.n	408c22 <__udivmoddi4+0x10e>
  408d02:	f1c1 0720 	rsb	r7, r1, #32
  408d06:	fa22 f807 	lsr.w	r8, r2, r7
  408d0a:	408b      	lsls	r3, r1
  408d0c:	fa05 f401 	lsl.w	r4, r5, r1
  408d10:	ea48 0303 	orr.w	r3, r8, r3
  408d14:	fa20 fe07 	lsr.w	lr, r0, r7
  408d18:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  408d1c:	40fd      	lsrs	r5, r7
  408d1e:	ea4e 0e04 	orr.w	lr, lr, r4
  408d22:	fbb5 f9fc 	udiv	r9, r5, ip
  408d26:	ea4f 441e 	mov.w	r4, lr, lsr #16
  408d2a:	fb0c 5519 	mls	r5, ip, r9, r5
  408d2e:	fa1f f883 	uxth.w	r8, r3
  408d32:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  408d36:	fb09 f408 	mul.w	r4, r9, r8
  408d3a:	42ac      	cmp	r4, r5
  408d3c:	fa02 f201 	lsl.w	r2, r2, r1
  408d40:	fa00 fa01 	lsl.w	sl, r0, r1
  408d44:	d908      	bls.n	408d58 <__udivmoddi4+0x244>
  408d46:	18ed      	adds	r5, r5, r3
  408d48:	f109 30ff 	add.w	r0, r9, #4294967295
  408d4c:	d243      	bcs.n	408dd6 <__udivmoddi4+0x2c2>
  408d4e:	42ac      	cmp	r4, r5
  408d50:	d941      	bls.n	408dd6 <__udivmoddi4+0x2c2>
  408d52:	f1a9 0902 	sub.w	r9, r9, #2
  408d56:	441d      	add	r5, r3
  408d58:	1b2d      	subs	r5, r5, r4
  408d5a:	fa1f fe8e 	uxth.w	lr, lr
  408d5e:	fbb5 f0fc 	udiv	r0, r5, ip
  408d62:	fb0c 5510 	mls	r5, ip, r0, r5
  408d66:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  408d6a:	fb00 f808 	mul.w	r8, r0, r8
  408d6e:	45a0      	cmp	r8, r4
  408d70:	d907      	bls.n	408d82 <__udivmoddi4+0x26e>
  408d72:	18e4      	adds	r4, r4, r3
  408d74:	f100 35ff 	add.w	r5, r0, #4294967295
  408d78:	d229      	bcs.n	408dce <__udivmoddi4+0x2ba>
  408d7a:	45a0      	cmp	r8, r4
  408d7c:	d927      	bls.n	408dce <__udivmoddi4+0x2ba>
  408d7e:	3802      	subs	r0, #2
  408d80:	441c      	add	r4, r3
  408d82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  408d86:	eba4 0408 	sub.w	r4, r4, r8
  408d8a:	fba0 8902 	umull	r8, r9, r0, r2
  408d8e:	454c      	cmp	r4, r9
  408d90:	46c6      	mov	lr, r8
  408d92:	464d      	mov	r5, r9
  408d94:	d315      	bcc.n	408dc2 <__udivmoddi4+0x2ae>
  408d96:	d012      	beq.n	408dbe <__udivmoddi4+0x2aa>
  408d98:	b156      	cbz	r6, 408db0 <__udivmoddi4+0x29c>
  408d9a:	ebba 030e 	subs.w	r3, sl, lr
  408d9e:	eb64 0405 	sbc.w	r4, r4, r5
  408da2:	fa04 f707 	lsl.w	r7, r4, r7
  408da6:	40cb      	lsrs	r3, r1
  408da8:	431f      	orrs	r7, r3
  408daa:	40cc      	lsrs	r4, r1
  408dac:	6037      	str	r7, [r6, #0]
  408dae:	6074      	str	r4, [r6, #4]
  408db0:	2100      	movs	r1, #0
  408db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408db6:	4618      	mov	r0, r3
  408db8:	e6f8      	b.n	408bac <__udivmoddi4+0x98>
  408dba:	4690      	mov	r8, r2
  408dbc:	e6e0      	b.n	408b80 <__udivmoddi4+0x6c>
  408dbe:	45c2      	cmp	sl, r8
  408dc0:	d2ea      	bcs.n	408d98 <__udivmoddi4+0x284>
  408dc2:	ebb8 0e02 	subs.w	lr, r8, r2
  408dc6:	eb69 0503 	sbc.w	r5, r9, r3
  408dca:	3801      	subs	r0, #1
  408dcc:	e7e4      	b.n	408d98 <__udivmoddi4+0x284>
  408dce:	4628      	mov	r0, r5
  408dd0:	e7d7      	b.n	408d82 <__udivmoddi4+0x26e>
  408dd2:	4640      	mov	r0, r8
  408dd4:	e791      	b.n	408cfa <__udivmoddi4+0x1e6>
  408dd6:	4681      	mov	r9, r0
  408dd8:	e7be      	b.n	408d58 <__udivmoddi4+0x244>
  408dda:	4601      	mov	r1, r0
  408ddc:	e778      	b.n	408cd0 <__udivmoddi4+0x1bc>
  408dde:	3802      	subs	r0, #2
  408de0:	443c      	add	r4, r7
  408de2:	e745      	b.n	408c70 <__udivmoddi4+0x15c>
  408de4:	4608      	mov	r0, r1
  408de6:	e708      	b.n	408bfa <__udivmoddi4+0xe6>
  408de8:	f1a8 0802 	sub.w	r8, r8, #2
  408dec:	443d      	add	r5, r7
  408dee:	e72b      	b.n	408c48 <__udivmoddi4+0x134>

00408df0 <__aeabi_idiv0>:
  408df0:	4770      	bx	lr
  408df2:	bf00      	nop
  408df4:	092d452d 	.word	0x092d452d
  408df8:	39384d57 	.word	0x39384d57
  408dfc:	69203430 	.word	0x69203430
  408e00:	6974696e 	.word	0x6974696e
  408e04:	7a696c61 	.word	0x7a696c61
  408e08:	6f697461 	.word	0x6f697461
  408e0c:	6166206e 	.word	0x6166206e
  408e10:	64656c69 	.word	0x64656c69
  408e14:	00000d2e 	.word	0x00000d2e
  408e18:	39384d57 	.word	0x39384d57
  408e1c:	6e203430 	.word	0x6e203430
  408e20:	6620746f 	.word	0x6620746f
  408e24:	646e756f 	.word	0x646e756f
  408e28:	000d0a21 	.word	0x000d0a21

00408e2c <sysfont_glyphs>:
	...
  408e50:	00300000 00300030 00300030 00300030     ..0.0.0.0.0.0.0.
  408e60:	00300000 00000030 00000000 00000000     ..0.0...........
  408e70:	006c0000 006c006c 0000006c 00000000     ..l.l.l.l.......
	...
  408e94:	00480048 004800fc 00480048 004800fc     H.H...H.H.H...H.
  408ea4:	00000048 00000000 00000000 00100000     H...............
  408eb4:	003c0010 00300040 00040008 00100078     ..<.@.0.....x...
  408ec4:	00000010 00000000 00000000 00000000     ................
  408ed4:	00a4007c 004800a8 00140010 004a002a     |.....H.....*.J.
  408ee4:	00000044 00000000 00000000 00700000     D.............p.
  408ef4:	00880088 00700088 008a0088 008c008a     ......p.........
  408f04:	00000070 00000000 00000000 00100000     p...............
  408f14:	00100010 00000000 00000000 00000000     ................
	...
  408f30:	00100008 00200010 00200020 00200020     ...... . . . . .
  408f40:	00100020 00080010 00000000 00000000      ...............
  408f50:	00100020 00080010 00080008 00080008      ...............
  408f60:	00100008 00200010 00000000 00000000     ...... .........
  408f70:	00280000 007c0010 00280010 00000000     ..(...|...(.....
	...
  408f98:	00100010 00fe0010 00100010 00000010     ................
	...
  408fc0:	00180000 00300018 00000020 00000000     ......0. .......
	...
  408fdc:	00fe0000 00000000 00000000 00000000     ................
	...
  409000:	00180000 00000018 00000000 00000000     ................
  409010:	00000000 00080004 00100008 00200010     .............. .
  409020:	00400020 00000040 00000000 00000000      .@.@...........
  409030:	00780000 00840084 0094008c 00c400a4     ..x.............
  409040:	00840084 00000078 00000000 00000000     ....x...........
  409050:	00100000 00500030 00100010 00100010     ....0.P.........
  409060:	00100010 0000007c 00000000 00000000     ....|...........
  409070:	00700000 00080088 00100008 00200010     ..p........... .
  409080:	00400020 000000fc 00000000 00000000      .@.............
  409090:	00700000 00080088 00300008 00080008     ..p.......0.....
  4090a0:	00880008 00000070 00000000 00000000     ....p...........
  4090b0:	00080000 00280018 00480028 00880088     ......(.(.H.....
  4090c0:	000800fc 00000008 00000000 00000000     ................
  4090d0:	007c0000 00800080 00c400b8 00040004     ..|.............
  4090e0:	00840004 00000078 00000000 00000000     ....x...........
  4090f0:	00380000 00800040 00b00080 008400c8     ..8.@...........
  409100:	00480084 00000030 00000000 00000000     ..H.0...........
  409110:	00fc0000 00040004 00080008 00100010     ................
  409120:	00200020 00000040 00000000 00000000      . .@...........
  409130:	00780000 00840084 00780084 00840084     ..x.......x.....
  409140:	00840084 00000078 00000000 00000000     ....x...........
  409150:	00780000 00840084 008c0084 00040074     ..x.........t...
  409160:	00100008 000000e0 00000000 00000000     ................
	...
  409178:	00300000 00000030 00300000 00000030     ..0.0.....0.0...
	...
  409198:	00600000 00000060 00600000 00c00060     ..`.`.....`.`...
  4091a8:	00000080 00000000 00000000 00000000     ................
  4091b8:	00180004 00800060 00180060 00000004     ....`...`.......
	...
  4091d8:	007e0000 00000000 0000007e 00000000     ..~.....~.......
	...
  4091f8:	00300040 0002000c 0030000c 00000040     @.0.......0.@...
	...
  409210:	00700000 00080088 00100008 00200020     ..p......... . .
  409220:	00200000 00000020 00000000 00000000     .. . ...........
  409230:	00000000 003c0000 00ba0042 00aa00aa     ......<.B.......
  409240:	00bc00aa 003c0040 00000000 00000000     ....@.<.........
  409250:	00100000 00280010 00280028 007c0044     ......(.(.(.D.|.
  409260:	00820044 00000082 00000000 00000000     D...............
  409270:	00f00000 00880088 00f00088 00880088     ................
  409280:	00880088 000000f0 00000000 00000000     ................
  409290:	00380000 00800044 00800080 00800080     ..8.D...........
  4092a0:	00440080 00000038 00000000 00000000     ..D.8...........
  4092b0:	00f00000 00840088 00840084 00840084     ................
  4092c0:	00880084 000000f0 00000000 00000000     ................
  4092d0:	007c0000 00400040 00780040 00400040     ..|.@.@.@.x.@.@.
  4092e0:	00400040 0000007c 00000000 00000000     @.@.|...........
  4092f0:	007c0000 00400040 00400040 00400078     ..|.@.@.@.@.x.@.
  409300:	00400040 00000040 00000000 00000000     @.@.@...........
  409310:	00380000 00800044 00800080 0084009c     ..8.D...........
  409320:	00440084 0000003c 00000000 00000000     ..D.<...........
  409330:	00840000 00840084 00fc0084 00840084     ................
  409340:	00840084 00000084 00000000 00000000     ................
  409350:	007c0000 00100010 00100010 00100010     ..|.............
  409360:	00100010 0000007c 00000000 00000000     ....|...........
  409370:	00f80000 00080008 00080008 00080008     ................
  409380:	00100008 000000e0 00000000 00000000     ................
  409390:	00840000 00880084 00a00090 008800d0     ................
  4093a0:	00840088 00000084 00000000 00000000     ................
  4093b0:	00800000 00800080 00800080 00800080     ................
  4093c0:	00800080 000000fc 00000000 00000000     ................
  4093d0:	00840000 00cc0084 00b400cc 008400b4     ................
  4093e0:	00840084 00000084 00000000 00000000     ................
  4093f0:	00840000 00c400c4 00a400a4 00940094     ................
  409400:	008c008c 00000084 00000000 00000000     ................
  409410:	00300000 00840048 00840084 00840084     ..0.H...........
  409420:	00480084 00000030 00000000 00000000     ..H.0...........
  409430:	00f00000 00840088 00840084 00f00088     ................
  409440:	00800080 00000080 00000000 00000000     ................
  409450:	00300000 00840048 00840084 00840084     ..0.H...........
  409460:	00480084 00200030 0000001c 00000000     ..H.0. .........
  409470:	00f00000 00840088 00880084 009000f0     ................
  409480:	00840088 00000084 00000000 00000000     ................
  409490:	00780000 00800084 00300040 00040008     ..x.....@.0.....
  4094a0:	00840004 00000078 00000000 00000000     ....x...........
  4094b0:	00fe0000 00100010 00100010 00100010     ................
  4094c0:	00100010 00000010 00000000 00000000     ................
  4094d0:	00840000 00840084 00840084 00840084     ................
  4094e0:	00840084 00000078 00000000 00000000     ....x...........
  4094f0:	00820000 00440082 00440044 00280044     ......D.D.D.D.(.
  409500:	00280028 00000010 00000000 00000000     (.(.............
  409510:	00840000 00840084 00b40084 00b400b4     ................
  409520:	00480078 00000048 00000000 00000000     x.H.H...........
  409530:	00820000 00440044 00100028 00280010     ....D.D.(.....(.
  409540:	00440044 00000082 00000000 00000000     D.D.............
  409550:	00820000 00440044 00280028 00100028     ....D.D.(.(.(...
  409560:	00100010 00000010 00000000 00000000     ................
  409570:	00fc0000 00080004 00100008 00200010     .............. .
  409580:	00400040 000000fe 00000000 00000000     @.@.............
  409590:	008000e0 00800080 00800080 00800080     ................
  4095a0:	00800080 00e00080 00000000 00000000     ................
  4095b0:	00400000 00200040 00100020 00080010     ..@.@. . .......
  4095c0:	00040008 00000004 00000000 00000000     ................
  4095d0:	002000e0 00200020 00200020 00200020     .. . . . . . . .
  4095e0:	00200020 00e00020 00000000 00000000      . . ...........
  4095f0:	00100000 00440028 00000000 00000000     ....(.D.........
	...
  409624:	0000007c 00000000 00000000 00200000     |............. .
  409634:	00080010 00000000 00000000 00000000     ................
	...
  409658:	00040078 007c0004 008c0084 00000076     x.....|.....v...
	...
  409670:	00800080 00800080 00c400b8 00840084     ................
  409680:	00880084 000000f0 00000000 00000000     ................
	...
  409698:	0080007c 00800080 00800080 0000007c     |...........|...
	...
  4096b0:	00020002 00020002 0042003e 00820082     ........>.B.....
  4096c0:	00420082 0000003e 00000000 00000000     ..B.>...........
	...
  4096d8:	0082007c 00fe0082 00800080 0000007e     |...........~...
	...
  4096f0:	001c0000 00200020 002000fc 00200020     .... . ... . . .
  409700:	00200020 000000fc 00000000 00000000      . .............
	...
  409718:	0084007c 00840084 008c0084 00040074     |...........t...
  409728:	00380044 00000000 00800080 00800080     D.8.............
  409738:	00c400b8 00840084 00840084 00000084     ................
	...
  409750:	00100000 00000000 00100070 00100010     ........p.......
  409760:	00100010 0000007c 00000000 00000000     ....|...........
  409770:	00080000 00000000 00080078 00080008     ........x.......
  409780:	00080008 00080008 00e00010 00000000     ................
  409790:	00800080 00800080 00900088 00e000a0     ................
  4097a0:	00880090 00000084 00000000 00000000     ................
  4097b0:	00f00000 00100010 00100010 00100010     ................
  4097c0:	00100010 000000fe 00000000 00000000     ................
	...
  4097d8:	00d400ac 00940094 00940094 00000094     ................
	...
  4097f8:	00c400b8 00840084 00840084 00000084     ................
	...
  409818:	00840078 00840084 00840084 00000078     x...........x...
	...
  409838:	00c400b8 00840084 00840084 008000f8     ................
  409848:	00800080 00000000 00000000 00000000     ................
  409858:	0084007c 00840084 00840084 0004007c     |...........|...
  409868:	00040004 00000000 00000000 00000000     ................
  409878:	003000cc 00200020 00200020 000000f8     ..0. . . . .....
	...
  409898:	0080007c 00780080 00040004 000000f8     |.....x.........
	...
  4098b4:	00200000 002000fc 00200020 00200020     .. ... . . . . .
  4098c4:	0000001c 00000000 00000000 00000000     ................
  4098d4:	00000000 00880088 00880088 00880088     ................
  4098e4:	00000074 00000000 00000000 00000000     t...............
  4098f4:	00000000 00440082 00280044 00100028     ......D.D.(.(...
  409904:	00000010 00000000 00000000 00000000     ................
  409914:	00000000 00840084 00b400b4 00480048     ............H.H.
  409924:	00000048 00000000 00000000 00000000     H...............
  409934:	00000000 00280044 00100028 00440028     ....D.(.(...(.D.
  409944:	00000044 00000000 00000000 00000000     D...............
  409954:	00000000 00440082 00280044 00280028     ......D.D.(.(.(.
  409964:	00100010 00200020 00000000 00000000     .... . .........
  409974:	00000000 000400fc 00100008 00400020     ............ .@.
  409984:	000000fc 00000000 00000000 00100008     ................
  409994:	00080010 00100008 00080010 00100008     ................
  4099a4:	00080010 00000000 00000000 00100010     ................
  4099b4:	00100010 00000010 00100000 00100010     ................
  4099c4:	00100010 00000000 00000000 00100020     ............ ...
  4099d4:	00200010 00100020 00200010 00100020     .. . ..... . ...
  4099e4:	00200010 00000000 0a05000d 0000004b     .. .........K...
  4099f4:	00001932 0e00008b 32800008 030a0205     2..........2....
  409a04:	0f022003 00000a0f 18180000 00002020     . ..........  ..
  409a14:	0a000000 02020000 18180000 00030000     ................
  409a24:	00000000 18010002 1e1e1e1e 1e1e1e1e     ................
  409a34:	1e1e1e1e 00001e1e 00000000 00000000     ................
	...
  409a4c:	322e2520 00000066                        %.2f...

00409a54 <_global_impure_ptr>:
  409a54:	20400048 00464e49 00666e69 004e414e     H.@ INF.inf.NAN.
  409a64:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  409a74:	46454443 00000000 33323130 37363534     CDEF....01234567
  409a84:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  409a94:	0000296c 00000030                       l)..0...

00409a9c <blanks.7223>:
  409a9c:	20202020 20202020 20202020 20202020                     

00409aac <zeroes.7224>:
  409aac:	30303030 30303030 30303030 30303030     0000000000000000

00409abc <blanks.7217>:
  409abc:	20202020 20202020 20202020 20202020                     

00409acc <zeroes.7218>:
  409acc:	30303030 30303030 30303030 30303030     0000000000000000
  409adc:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  409aec:	00000043 49534f50 00000058 0000002e     C...POSIX.......
  409afc:	00000000                                ....

00409b00 <__mprec_bigtens>:
  409b00:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  409b10:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  409b20:	7f73bf3c 75154fdd                       <.s..O.u

00409b28 <__mprec_tens>:
  409b28:	00000000 3ff00000 00000000 40240000     .......?......$@
  409b38:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  409b48:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  409b58:	00000000 412e8480 00000000 416312d0     .......A......cA
  409b68:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  409b78:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  409b88:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  409b98:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  409ba8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  409bb8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  409bc8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  409bd8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  409be8:	79d99db4 44ea7843                       ...yCx.D

00409bf0 <p05.6055>:
  409bf0:	00000005 00000019 0000007d              ........}...

00409bfc <_ctype_>:
  409bfc:	20202000 20202020 28282020 20282828     .         ((((( 
  409c0c:	20202020 20202020 20202020 20202020                     
  409c1c:	10108820 10101010 10101010 10101010      ...............
  409c2c:	04040410 04040404 10040404 10101010     ................
  409c3c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  409c4c:	01010101 01010101 01010101 10101010     ................
  409c5c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  409c6c:	02020202 02020202 02020202 10101010     ................
  409c7c:	00000020 00000000 00000000 00000000      ...............
	...

00409d00 <_init>:
  409d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409d02:	bf00      	nop
  409d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409d06:	bc08      	pop	{r3}
  409d08:	469e      	mov	lr, r3
  409d0a:	4770      	bx	lr

00409d0c <__init_array_start>:
  409d0c:	00405dd5 	.word	0x00405dd5

00409d10 <__frame_dummy_init_array_entry>:
  409d10:	00400165                                e.@.

00409d14 <_fini>:
  409d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409d16:	bf00      	nop
  409d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409d1a:	bc08      	pop	{r3}
  409d1c:	469e      	mov	lr, r3
  409d1e:	4770      	bx	lr

00409d20 <__fini_array_start>:
  409d20:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <fillBuffer>:
2040000c:	0dc8 2040                                   ..@ 

20400010 <inBuffer>:
20400010:	2f48 2040                                   H/@ 

20400014 <inPingMode>:
20400014:	0001 0000                                   ....

20400018 <outBuffer>:
20400018:	1e48 2040                                   H.@ 

2040001c <outPingMode>:
2040001c:	0001 0000                                   ....

20400020 <processBuffer>:
20400020:	1f48 2040                                   H.@ 

20400024 <processPingMode>:
20400024:	0001 0000                                   ....

20400028 <sysfont>:
20400028:	0000 0000 8e2c 0040 100a 7d20               ....,.@... }

20400034 <g_interrupt_enabled>:
20400034:	0001 0000                                   ....

20400038 <SystemCoreClock>:
20400038:	0900 003d                                   ..=.

2040003c <pitch>:
2040003c:	0000 bf80                                   ....

20400040 <_impure_ptr>:
20400040:	0048 2040 0000 0000                         H.@ ....

20400048 <impure_data>:
20400048:	0000 0000 0334 2040 039c 2040 0404 2040     ....4.@ ..@ ..@ 
	...
204000f0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400100:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400470 <__malloc_av_>:
	...
20400478:	0470 2040 0470 2040 0478 2040 0478 2040     p.@ p.@ x.@ x.@ 
20400488:	0480 2040 0480 2040 0488 2040 0488 2040     ..@ ..@ ..@ ..@ 
20400498:	0490 2040 0490 2040 0498 2040 0498 2040     ..@ ..@ ..@ ..@ 
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 

20400878 <__malloc_sbrk_base>:
20400878:	ffff ffff                                   ....

2040087c <__malloc_trim_threshold>:
2040087c:	0000 0002                                   ....

20400880 <__atexit_recursive_mutex>:
20400880:	2fe0 2040                                   ./@ 

20400884 <__global_locale>:
20400884:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400904:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400924:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400944:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400964:	879d 0040 77f9 0040 0000 0000 9bfc 0040     ..@..w@.......@.
20400974:	9af8 0040 9a78 0040 9a78 0040 9a78 0040     ..@.x.@.x.@.x.@.
20400984:	9a78 0040 9a78 0040 9a78 0040 9a78 0040     x.@.x.@.x.@.x.@.
20400994:	9a78 0040 9a78 0040 ffff ffff ffff ffff     x.@.x.@.........
204009a4:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009cc:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
