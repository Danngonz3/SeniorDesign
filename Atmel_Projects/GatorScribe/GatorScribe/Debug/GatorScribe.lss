
GatorScribe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000074b4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004074b4  004074b4  000174b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009f0  20400000  004074bc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00002818  204009f0  00407eac  000209f0  2**2
                  ALLOC
  4 .stack        00002000  20403208  0040a6c4  000209f0  2**0
                  ALLOC
  5 .heap         00000200  20405208  0040c6c4  000209f0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209f0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a1e  2**0
                  CONTENTS, READONLY
  8 .debug_info   00029813  00000000  00000000  00020a77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005c20  00000000  00000000  0004a28a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a3a6  00000000  00000000  0004feaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d48  00000000  00000000  0005a250  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ec0  00000000  00000000  0005af98  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00029d71  00000000  00000000  0005be58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00019e30  00000000  00000000  00085bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009d1c1  00000000  00000000  0009f9f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002cbc  00000000  00000000  0013cbbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	08 52 40 20 c5 27 40 00 c1 27 40 00 c3 27 40 00     .R@ .'@..'@..'@.
  400010:	c1 27 40 00 c1 27 40 00 c1 27 40 00 00 00 00 00     .'@..'@..'@.....
	...
  40002c:	c1 27 40 00 c1 27 40 00 00 00 00 00 c1 27 40 00     .'@..'@......'@.
  40003c:	89 06 40 00 c1 27 40 00 c1 27 40 00 c1 27 40 00     ..@..'@..'@..'@.
  40004c:	c1 27 40 00 c1 27 40 00 c1 27 40 00 c1 27 40 00     .'@..'@..'@..'@.
  40005c:	c1 27 40 00 c1 27 40 00 00 00 00 00 7d 25 40 00     .'@..'@.....}%@.
  40006c:	91 25 40 00 a5 25 40 00 c1 27 40 00 c1 27 40 00     .%@..%@..'@..'@.
  40007c:	c1 27 40 00 b9 25 40 00 cd 25 40 00 c1 27 40 00     .'@..%@..%@..'@.
  40008c:	c1 27 40 00 c1 27 40 00 c1 27 40 00 c1 27 40 00     .'@..'@..'@..'@.
  40009c:	c1 27 40 00 c1 27 40 00 c1 27 40 00 c1 27 40 00     .'@..'@..'@..'@.
  4000ac:	c1 27 40 00 c1 27 40 00 c1 27 40 00 c1 27 40 00     .'@..'@..'@..'@.
  4000bc:	c1 27 40 00 c1 27 40 00 c1 27 40 00 c1 27 40 00     .'@..'@..'@..'@.
  4000cc:	c1 27 40 00 00 00 00 00 c1 27 40 00 00 00 00 00     .'@......'@.....
  4000dc:	c1 27 40 00 c1 27 40 00 c1 27 40 00 c1 27 40 00     .'@..'@..'@..'@.
  4000ec:	c1 27 40 00 c1 27 40 00 c1 27 40 00 c1 27 40 00     .'@..'@..'@..'@.
  4000fc:	c1 27 40 00 c1 27 40 00 c1 27 40 00 c1 27 40 00     .'@..'@..'@..'@.
  40010c:	c1 27 40 00 c1 27 40 00 c1 27 40 00 00 00 00 00     .'@..'@..'@.....
  40011c:	00 00 00 00 c1 27 40 00 c1 27 40 00 ad 01 40 00     .....'@..'@...@.
  40012c:	c1 27 40 00 c1 27 40 00 00 00 00 00 c1 27 40 00     .'@..'@......'@.
  40013c:	c1 27 40 00                                         .'@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009f0 	.word	0x204009f0
  40015c:	00000000 	.word	0x00000000
  400160:	004074bc 	.word	0x004074bc

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	004074bc 	.word	0x004074bc
  4001a0:	204009f4 	.word	0x204009f4
  4001a4:	004074bc 	.word	0x004074bc
  4001a8:	00000000 	.word	0x00000000

004001ac <XDMAC_Handler>:
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4001ac:	4b51      	ldr	r3, [pc, #324]	; (4002f4 <XDMAC_Handler+0x148>)
  4001ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
void XDMAC_Handler(void)
{
    uint32_t dma_status;
    
    dma_status = xdmac_channel_get_interrupt_status(XDMAC, XDMA_CH_SSC_RX);
    if (dma_status & XDMAC_CIS_BIS)
  4001b0:	f013 0f01 	tst.w	r3, #1
  4001b4:	f000 8087 	beq.w	4002c6 <XDMAC_Handler+0x11a>
{
  4001b8:	b470      	push	{r4, r5, r6}
    {
		if(inPingMode)
  4001ba:	4b4f      	ldr	r3, [pc, #316]	; (4002f8 <XDMAC_Handler+0x14c>)
  4001bc:	781b      	ldrb	r3, [r3, #0]
  4001be:	b16b      	cbz	r3, 4001dc <XDMAC_Handler+0x30>
		{
			inBuffer = inPingBuffer; 
  4001c0:	4a4e      	ldr	r2, [pc, #312]	; (4002fc <XDMAC_Handler+0x150>)
  4001c2:	4b4f      	ldr	r3, [pc, #316]	; (400300 <XDMAC_Handler+0x154>)
  4001c4:	601a      	str	r2, [r3, #0]
		}
		else 
		{
			inBuffer = inPongBuffer; 
		}
		inPingMode = !inPingMode; 
  4001c6:	4a4c      	ldr	r2, [pc, #304]	; (4002f8 <XDMAC_Handler+0x14c>)
  4001c8:	7813      	ldrb	r3, [r2, #0]
  4001ca:	f083 0301 	eor.w	r3, r3, #1
  4001ce:	7013      	strb	r3, [r2, #0]
		int processIdx = 0; 
		for(int i = 0; i < BUF_SIZE; i++)
  4001d0:	2300      	movs	r3, #0
		int processIdx = 0; 
  4001d2:	461c      	mov	r4, r3
		{
						
			outBuffer[i] = inBuffer[i];
  4001d4:	4d4b      	ldr	r5, [pc, #300]	; (400304 <XDMAC_Handler+0x158>)
  4001d6:	484a      	ldr	r0, [pc, #296]	; (400300 <XDMAC_Handler+0x154>)
			//outBuffer[i] = (uint16_t) ( ( (int32_t)((int16_t)inBuffer[i]) + (int32_t)(sin_wave[sinIdx++]/16) ) / 2 );
			//if(sinIdx == SIN_WAVE_LENGTH) sinIdx = 0;

			if (i % 4 == 0)
				fillBuffer[processIdx++] = (int16_t)inBuffer[i]; 
  4001d8:	4e4b      	ldr	r6, [pc, #300]	; (400308 <XDMAC_Handler+0x15c>)
  4001da:	e006      	b.n	4001ea <XDMAC_Handler+0x3e>
			inBuffer = inPongBuffer; 
  4001dc:	4a4b      	ldr	r2, [pc, #300]	; (40030c <XDMAC_Handler+0x160>)
  4001de:	4b48      	ldr	r3, [pc, #288]	; (400300 <XDMAC_Handler+0x154>)
  4001e0:	601a      	str	r2, [r3, #0]
  4001e2:	e7f0      	b.n	4001c6 <XDMAC_Handler+0x1a>
		for(int i = 0; i < BUF_SIZE; i++)
  4001e4:	3301      	adds	r3, #1
  4001e6:	2b80      	cmp	r3, #128	; 0x80
  4001e8:	d012      	beq.n	400210 <XDMAC_Handler+0x64>
			outBuffer[i] = inBuffer[i];
  4001ea:	6802      	ldr	r2, [r0, #0]
  4001ec:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  4001f0:	b292      	uxth	r2, r2
  4001f2:	6829      	ldr	r1, [r5, #0]
  4001f4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			if (i % 4 == 0)
  4001f8:	f013 0f03 	tst.w	r3, #3
  4001fc:	d1f2      	bne.n	4001e4 <XDMAC_Handler+0x38>
				fillBuffer[processIdx++] = (int16_t)inBuffer[i]; 
  4001fe:	6802      	ldr	r2, [r0, #0]
  400200:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  400204:	b212      	sxth	r2, r2
  400206:	6831      	ldr	r1, [r6, #0]
  400208:	f821 2014 	strh.w	r2, [r1, r4, lsl #1]
  40020c:	3401      	adds	r4, #1
  40020e:	e7e9      	b.n	4001e4 <XDMAC_Handler+0x38>
		}
		
		if (processPingMode)
  400210:	4b3f      	ldr	r3, [pc, #252]	; (400310 <XDMAC_Handler+0x164>)
  400212:	781b      	ldrb	r3, [r3, #0]
  400214:	2b00      	cmp	r3, #0
  400216:	d032      	beq.n	40027e <XDMAC_Handler+0xd2>
		{
			if (fillBuffer == &processPingBuffer[(TOTAL_PROCESS_BUFFERS-1)*PROCESS_BUF_SIZE])
  400218:	4b3b      	ldr	r3, [pc, #236]	; (400308 <XDMAC_Handler+0x15c>)
  40021a:	681b      	ldr	r3, [r3, #0]
  40021c:	4a3d      	ldr	r2, [pc, #244]	; (400314 <XDMAC_Handler+0x168>)
  40021e:	4293      	cmp	r3, r2
  400220:	d016      	beq.n	400250 <XDMAC_Handler+0xa4>
				else 
					dataReceived = 1; 
			}	
			else 
			{
				fillBuffer += PROCESS_BUF_SIZE; 
  400222:	3340      	adds	r3, #64	; 0x40
  400224:	4a38      	ldr	r2, [pc, #224]	; (400308 <XDMAC_Handler+0x15c>)
  400226:	6013      	str	r3, [r2, #0]
  400228:	4b32      	ldr	r3, [pc, #200]	; (4002f4 <XDMAC_Handler+0x148>)
  40022a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
		}
		
    }
	
	dma_status = xdmac_channel_get_interrupt_status(XDMAC, XDMA_CH_SSC_TX);
	if (dma_status & XDMAC_CIS_BIS)
  40022e:	f013 0f01 	tst.w	r3, #1
  400232:	d00b      	beq.n	40024c <XDMAC_Handler+0xa0>
	{
		if(outPingMode)
  400234:	4b38      	ldr	r3, [pc, #224]	; (400318 <XDMAC_Handler+0x16c>)
  400236:	781b      	ldrb	r3, [r3, #0]
  400238:	2b00      	cmp	r3, #0
  40023a:	d040      	beq.n	4002be <XDMAC_Handler+0x112>
		{
			outBuffer = outPingBuffer; 
  40023c:	4a37      	ldr	r2, [pc, #220]	; (40031c <XDMAC_Handler+0x170>)
  40023e:	4b31      	ldr	r3, [pc, #196]	; (400304 <XDMAC_Handler+0x158>)
  400240:	601a      	str	r2, [r3, #0]
		}
		else
		{
			outBuffer = outPongBuffer; 
		}
		outPingMode = !outPingMode; 
  400242:	4a35      	ldr	r2, [pc, #212]	; (400318 <XDMAC_Handler+0x16c>)
  400244:	7813      	ldrb	r3, [r2, #0]
  400246:	f083 0301 	eor.w	r3, r3, #1
  40024a:	7013      	strb	r3, [r2, #0]
	}
}
  40024c:	bc70      	pop	{r4, r5, r6}
  40024e:	4770      	bx	lr
				processBuffer = processPingBuffer; 
  400250:	f5a2 627c 	sub.w	r2, r2, #4032	; 0xfc0
  400254:	4b32      	ldr	r3, [pc, #200]	; (400320 <XDMAC_Handler+0x174>)
  400256:	601a      	str	r2, [r3, #0]
				fillBuffer = processPongBuffer; 
  400258:	4a32      	ldr	r2, [pc, #200]	; (400324 <XDMAC_Handler+0x178>)
  40025a:	4b2b      	ldr	r3, [pc, #172]	; (400308 <XDMAC_Handler+0x15c>)
  40025c:	601a      	str	r2, [r3, #0]
				processPingMode = !processPingMode; 
  40025e:	4a2c      	ldr	r2, [pc, #176]	; (400310 <XDMAC_Handler+0x164>)
  400260:	7813      	ldrb	r3, [r2, #0]
  400262:	f083 0301 	eor.w	r3, r3, #1
  400266:	7013      	strb	r3, [r2, #0]
				if (dataReceived)
  400268:	4b2f      	ldr	r3, [pc, #188]	; (400328 <XDMAC_Handler+0x17c>)
  40026a:	781b      	ldrb	r3, [r3, #0]
  40026c:	b11b      	cbz	r3, 400276 <XDMAC_Handler+0xca>
					outOfTime = 1; 
  40026e:	2201      	movs	r2, #1
  400270:	4b2e      	ldr	r3, [pc, #184]	; (40032c <XDMAC_Handler+0x180>)
  400272:	701a      	strb	r2, [r3, #0]
  400274:	e7d8      	b.n	400228 <XDMAC_Handler+0x7c>
					dataReceived = 1; 
  400276:	2201      	movs	r2, #1
  400278:	4b2b      	ldr	r3, [pc, #172]	; (400328 <XDMAC_Handler+0x17c>)
  40027a:	701a      	strb	r2, [r3, #0]
  40027c:	e7d4      	b.n	400228 <XDMAC_Handler+0x7c>
			if (fillBuffer == &processPongBuffer[(TOTAL_PROCESS_BUFFERS-1)*PROCESS_BUF_SIZE])
  40027e:	4b22      	ldr	r3, [pc, #136]	; (400308 <XDMAC_Handler+0x15c>)
  400280:	681b      	ldr	r3, [r3, #0]
  400282:	4a2b      	ldr	r2, [pc, #172]	; (400330 <XDMAC_Handler+0x184>)
  400284:	4293      	cmp	r3, r2
  400286:	d003      	beq.n	400290 <XDMAC_Handler+0xe4>
				fillBuffer += PROCESS_BUF_SIZE;
  400288:	3340      	adds	r3, #64	; 0x40
  40028a:	4a1f      	ldr	r2, [pc, #124]	; (400308 <XDMAC_Handler+0x15c>)
  40028c:	6013      	str	r3, [r2, #0]
  40028e:	e7cb      	b.n	400228 <XDMAC_Handler+0x7c>
				processBuffer = processPongBuffer;
  400290:	f5a2 627c 	sub.w	r2, r2, #4032	; 0xfc0
  400294:	4b22      	ldr	r3, [pc, #136]	; (400320 <XDMAC_Handler+0x174>)
  400296:	601a      	str	r2, [r3, #0]
				fillBuffer = processPingBuffer; 
  400298:	4a26      	ldr	r2, [pc, #152]	; (400334 <XDMAC_Handler+0x188>)
  40029a:	4b1b      	ldr	r3, [pc, #108]	; (400308 <XDMAC_Handler+0x15c>)
  40029c:	601a      	str	r2, [r3, #0]
				processPingMode = !processPingMode;
  40029e:	4a1c      	ldr	r2, [pc, #112]	; (400310 <XDMAC_Handler+0x164>)
  4002a0:	7813      	ldrb	r3, [r2, #0]
  4002a2:	f083 0301 	eor.w	r3, r3, #1
  4002a6:	7013      	strb	r3, [r2, #0]
				if (dataReceived)
  4002a8:	4b1f      	ldr	r3, [pc, #124]	; (400328 <XDMAC_Handler+0x17c>)
  4002aa:	781b      	ldrb	r3, [r3, #0]
  4002ac:	b11b      	cbz	r3, 4002b6 <XDMAC_Handler+0x10a>
					outOfTime = 1;
  4002ae:	2201      	movs	r2, #1
  4002b0:	4b1e      	ldr	r3, [pc, #120]	; (40032c <XDMAC_Handler+0x180>)
  4002b2:	701a      	strb	r2, [r3, #0]
  4002b4:	e7b8      	b.n	400228 <XDMAC_Handler+0x7c>
					dataReceived = 1;
  4002b6:	2201      	movs	r2, #1
  4002b8:	4b1b      	ldr	r3, [pc, #108]	; (400328 <XDMAC_Handler+0x17c>)
  4002ba:	701a      	strb	r2, [r3, #0]
  4002bc:	e7b4      	b.n	400228 <XDMAC_Handler+0x7c>
			outBuffer = outPongBuffer; 
  4002be:	4a1e      	ldr	r2, [pc, #120]	; (400338 <XDMAC_Handler+0x18c>)
  4002c0:	4b10      	ldr	r3, [pc, #64]	; (400304 <XDMAC_Handler+0x158>)
  4002c2:	601a      	str	r2, [r3, #0]
  4002c4:	e7bd      	b.n	400242 <XDMAC_Handler+0x96>
  4002c6:	4b0b      	ldr	r3, [pc, #44]	; (4002f4 <XDMAC_Handler+0x148>)
  4002c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
	if (dma_status & XDMAC_CIS_BIS)
  4002cc:	f013 0f01 	tst.w	r3, #1
  4002d0:	d0bd      	beq.n	40024e <XDMAC_Handler+0xa2>
		if(outPingMode)
  4002d2:	4b11      	ldr	r3, [pc, #68]	; (400318 <XDMAC_Handler+0x16c>)
  4002d4:	781b      	ldrb	r3, [r3, #0]
  4002d6:	b143      	cbz	r3, 4002ea <XDMAC_Handler+0x13e>
			outBuffer = outPingBuffer; 
  4002d8:	4a10      	ldr	r2, [pc, #64]	; (40031c <XDMAC_Handler+0x170>)
  4002da:	4b0a      	ldr	r3, [pc, #40]	; (400304 <XDMAC_Handler+0x158>)
  4002dc:	601a      	str	r2, [r3, #0]
		outPingMode = !outPingMode; 
  4002de:	4a0e      	ldr	r2, [pc, #56]	; (400318 <XDMAC_Handler+0x16c>)
  4002e0:	7813      	ldrb	r3, [r2, #0]
  4002e2:	f083 0301 	eor.w	r3, r3, #1
  4002e6:	7013      	strb	r3, [r2, #0]
  4002e8:	4770      	bx	lr
			outBuffer = outPongBuffer; 
  4002ea:	4a13      	ldr	r2, [pc, #76]	; (400338 <XDMAC_Handler+0x18c>)
  4002ec:	4b05      	ldr	r3, [pc, #20]	; (400304 <XDMAC_Handler+0x158>)
  4002ee:	601a      	str	r2, [r3, #0]
  4002f0:	e7f5      	b.n	4002de <XDMAC_Handler+0x132>
  4002f2:	bf00      	nop
  4002f4:	40078000 	.word	0x40078000
  4002f8:	20400014 	.word	0x20400014
  4002fc:	204030c8 	.word	0x204030c8
  400300:	20400010 	.word	0x20400010
  400304:	20400018 	.word	0x20400018
  400308:	2040000c 	.word	0x2040000c
  40030c:	20401dc8 	.word	0x20401dc8
  400310:	20400024 	.word	0x20400024
  400314:	20401d88 	.word	0x20401d88
  400318:	2040001c 	.word	0x2040001c
  40031c:	20401ec8 	.word	0x20401ec8
  400320:	20400020 	.word	0x20400020
  400324:	204020c8 	.word	0x204020c8
  400328:	20400a0c 	.word	0x20400a0c
  40032c:	20400a50 	.word	0x20400a50
  400330:	20403088 	.word	0x20403088
  400334:	20400dc8 	.word	0x20400dc8
  400338:	20401fc8 	.word	0x20401fc8

0040033c <configure_xdma>:
/******************************* XDMAC Interrupt Handler End *******************************/

/********************************** Public Functions Start **********************************/
void configure_xdma(void)
{
  40033c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400340:	b088      	sub	sp, #32
    uint16_t *src;
    
    xdmac_channel_config_t xdmac_channel_cfg = {0};
  400342:	2420      	movs	r4, #32
  400344:	4622      	mov	r2, r4
  400346:	2100      	movs	r1, #0
  400348:	4668      	mov	r0, sp
  40034a:	4b27      	ldr	r3, [pc, #156]	; (4003e8 <configure_xdma+0xac>)
  40034c:	4798      	blx	r3
    
    /* Initialize and enable DMA controller */
    pmc_enable_periph_clk(ID_XDMAC);
  40034e:	203a      	movs	r0, #58	; 0x3a
  400350:	4b26      	ldr	r3, [pc, #152]	; (4003ec <configure_xdma+0xb0>)
  400352:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400354:	4b26      	ldr	r3, [pc, #152]	; (4003f0 <configure_xdma+0xb4>)
  400356:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40035a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40035e:	f883 433a 	strb.w	r4, [r3, #826]	; 0x33a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400362:	605a      	str	r2, [r3, #4]
    NVIC_SetPriority(XDMAC_IRQn ,1);
    NVIC_EnableIRQ(XDMAC_IRQn);
    
    /********** Read Buffer ********/
    /* Initialize channel config */
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  400364:	4b23      	ldr	r3, [pc, #140]	; (4003f4 <configure_xdma+0xb8>)
  400366:	9303      	str	r3, [sp, #12]
    | XDMAC_CC_DIF_AHB_IF0
    | XDMAC_CC_SAM_FIXED_AM
    | XDMAC_CC_DAM_INCREMENTED_AM
    | XDMAC_CC_PERID(33);
	
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  400368:	4c23      	ldr	r4, [pc, #140]	; (4003f8 <configure_xdma+0xbc>)
  40036a:	466a      	mov	r2, sp
  40036c:	2100      	movs	r1, #0
  40036e:	4620      	mov	r0, r4
  400370:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 400424 <configure_xdma+0xe8>
  400374:	47c0      	blx	r8
    
    /* Initialize linked list descriptor */
    src = (uint16_t *)&inPingBuffer[0];
    linklist_read[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  400376:	4b21      	ldr	r3, [pc, #132]	; (4003fc <configure_xdma+0xc0>)
  400378:	4e21      	ldr	r6, [pc, #132]	; (400400 <configure_xdma+0xc4>)
  40037a:	605e      	str	r6, [r3, #4]
		| XDMAC_UBC_NDE_FETCH_EN
		| XDMAC_UBC_NSEN_UPDATED
		| XDMAC_CUBC_UBLEN(BUF_SIZE);
    linklist_read[0].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  40037c:	4a21      	ldr	r2, [pc, #132]	; (400404 <configure_xdma+0xc8>)
  40037e:	609a      	str	r2, [r3, #8]
    linklist_read[0].mbr_da = (uint32_t)(src);
  400380:	4921      	ldr	r1, [pc, #132]	; (400408 <configure_xdma+0xcc>)
  400382:	60d9      	str	r1, [r3, #12]
    linklist_read[0].mbr_nda = (uint32_t)&linklist_read[1];
  400384:	f103 0110 	add.w	r1, r3, #16
  400388:	6019      	str	r1, [r3, #0]
	src = (uint16_t *)&inPongBuffer[0];; 
	linklist_read[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  40038a:	615e      	str	r6, [r3, #20]
	    | XDMAC_UBC_NDE_FETCH_EN
	    | XDMAC_UBC_NSEN_UPDATED
	    | XDMAC_CUBC_UBLEN(BUF_SIZE);
	linklist_read[1].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  40038c:	619a      	str	r2, [r3, #24]
	linklist_read[1].mbr_da = (uint32_t)(src);
  40038e:	4a1f      	ldr	r2, [pc, #124]	; (40040c <configure_xdma+0xd0>)
  400390:	61da      	str	r2, [r3, #28]
	linklist_read[1].mbr_nda = (uint32_t)&linklist_read[0];
  400392:	611b      	str	r3, [r3, #16]
 */
static inline void xdmac_channel_set_descriptor_control(Xdmac *xdmac, uint32_t channel_num, uint32_t config)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  400394:	270f      	movs	r7, #15
  400396:	66e7      	str	r7, [r4, #108]	; 0x6c
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  400398:	f023 0303 	bic.w	r3, r3, #3
  40039c:	66a3      	str	r3, [r4, #104]	; 0x68
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  40039e:	2501      	movs	r5, #1
  4003a0:	60e5      	str	r5, [r4, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CIE = mask;
  4003a2:	6525      	str	r5, [r4, #80]	; 0x50
    xdmac_enable_interrupt(XDMAC, XDMA_CH_SSC_RX);
    xdmac_channel_enable_interrupt(XDMAC, XDMA_CH_SSC_RX, XDMAC_CIE_BIE);
    
    
    /******* Write buffer *******/
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4003a4:	4b1a      	ldr	r3, [pc, #104]	; (400410 <configure_xdma+0xd4>)
  4003a6:	9303      	str	r3, [sp, #12]
    | XDMAC_CC_DIF_AHB_IF1
    | XDMAC_CC_SAM_INCREMENTED_AM
    | XDMAC_CC_DAM_FIXED_AM
    | XDMAC_CC_PERID(32);
	
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  4003a8:	466a      	mov	r2, sp
  4003aa:	4629      	mov	r1, r5
  4003ac:	4620      	mov	r0, r4
  4003ae:	47c0      	blx	r8
    
    src = (uint16_t *)&outPingBuffer[0];
    linklist_write[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4003b0:	4b18      	ldr	r3, [pc, #96]	; (400414 <configure_xdma+0xd8>)
  4003b2:	605e      	str	r6, [r3, #4]
		 | XDMAC_UBC_NDE_FETCH_EN
		 | XDMAC_UBC_NSEN_UPDATED
			| XDMAC_CUBC_UBLEN(BUF_SIZE);
    linklist_write[0].mbr_sa = (uint32_t)(src);
  4003b4:	4a18      	ldr	r2, [pc, #96]	; (400418 <configure_xdma+0xdc>)
  4003b6:	609a      	str	r2, [r3, #8]
    linklist_write[0].mbr_da = (uint32_t)&(SSC->SSC_THR);
  4003b8:	4a18      	ldr	r2, [pc, #96]	; (40041c <configure_xdma+0xe0>)
  4003ba:	60da      	str	r2, [r3, #12]
    linklist_write[0].mbr_nda = (uint32_t)&linklist_write[1];
  4003bc:	f103 0110 	add.w	r1, r3, #16
  4003c0:	6019      	str	r1, [r3, #0]
	
	src = (uint16_t *)&outPongBuffer[0];
	linklist_write[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4003c2:	615e      	str	r6, [r3, #20]
	    | XDMAC_UBC_NDE_FETCH_EN
	    | XDMAC_UBC_NSEN_UPDATED
	    | XDMAC_CUBC_UBLEN(BUF_SIZE);
	linklist_write[1].mbr_sa = (uint32_t)(src);
  4003c4:	4916      	ldr	r1, [pc, #88]	; (400420 <configure_xdma+0xe4>)
  4003c6:	6199      	str	r1, [r3, #24]
	linklist_write[1].mbr_da = (uint32_t)&(SSC->SSC_THR);
  4003c8:	61da      	str	r2, [r3, #28]
	linklist_write[1].mbr_nda = (uint32_t)&linklist_write[0];
  4003ca:	611b      	str	r3, [r3, #16]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  4003cc:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  4003d0:	f023 0303 	bic.w	r3, r3, #3
  4003d4:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  4003d8:	2302      	movs	r3, #2
  4003da:	60e3      	str	r3, [r4, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CIE = mask;
  4003dc:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
    xdmac_channel_set_descriptor_addr(XDMAC, XDMA_CH_SSC_TX, (uint32_t)(&linklist_write[0]), 0);
    
    xdmac_enable_interrupt(XDMAC, XDMA_CH_SSC_TX);
    xdmac_channel_enable_interrupt(XDMAC, XDMA_CH_SSC_TX, XDMAC_CIE_BIE);
    
}
  4003e0:	b008      	add	sp, #32
  4003e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4003e6:	bf00      	nop
  4003e8:	0040398d 	.word	0x0040398d
  4003ec:	00402701 	.word	0x00402701
  4003f0:	e000e100 	.word	0xe000e100
  4003f4:	21042801 	.word	0x21042801
  4003f8:	40078000 	.word	0x40078000
  4003fc:	20400a10 	.word	0x20400a10
  400400:	0b000080 	.word	0x0b000080
  400404:	40004020 	.word	0x40004020
  400408:	204030c8 	.word	0x204030c8
  40040c:	20401dc8 	.word	0x20401dc8
  400410:	20014811 	.word	0x20014811
  400414:	20400a30 	.word	0x20400a30
  400418:	20401ec8 	.word	0x20401ec8
  40041c:	40004024 	.word	0x40004024
  400420:	20401fc8 	.word	0x20401fc8
  400424:	00401e99 	.word	0x00401e99

00400428 <audio_init>:

#include "DMA_Audio.h"
#include "WM8904_Driver.h"

void audio_init(void)
{
  400428:	b510      	push	{r4, lr}
	/* Initialize WM8904 TWI interface*/
	if (wm8904_twi_init() != TWIHS_SUCCESS) {
  40042a:	4b13      	ldr	r3, [pc, #76]	; (400478 <audio_init+0x50>)
  40042c:	4798      	blx	r3
  40042e:	b118      	cbz	r0, 400438 <audio_init+0x10>
		printf("-E-\tWM8904 initialization failed.\r");
  400430:	4812      	ldr	r0, [pc, #72]	; (40047c <audio_init+0x54>)
  400432:	4b13      	ldr	r3, [pc, #76]	; (400480 <audio_init+0x58>)
  400434:	4798      	blx	r3
  400436:	e7fe      	b.n	400436 <audio_init+0xe>
			/* Capture error */
		}
	}
		
	/* Configure CODEC */
	configure_codec();
  400438:	4b12      	ldr	r3, [pc, #72]	; (400484 <audio_init+0x5c>)
  40043a:	4798      	blx	r3
		
	/* Configure SSC */
	configure_ssc();
  40043c:	4b12      	ldr	r3, [pc, #72]	; (400488 <audio_init+0x60>)
  40043e:	4798      	blx	r3
		
	/* Configure XDMA */
	configure_xdma();
  400440:	4b12      	ldr	r3, [pc, #72]	; (40048c <audio_init+0x64>)
  400442:	4798      	blx	r3
		
	/* Enable the DAC master clock */
	pmc_pck_set_prescaler(PMC_PCK_2, PMC_MCKR_PRES_CLK_1);
  400444:	2100      	movs	r1, #0
  400446:	2002      	movs	r0, #2
  400448:	4b11      	ldr	r3, [pc, #68]	; (400490 <audio_init+0x68>)
  40044a:	4798      	blx	r3
	pmc_pck_set_source(PMC_PCK_2, PMC_MCKR_CSS_SLOW_CLK);
  40044c:	2100      	movs	r1, #0
  40044e:	2002      	movs	r0, #2
  400450:	4b10      	ldr	r3, [pc, #64]	; (400494 <audio_init+0x6c>)
  400452:	4798      	blx	r3
	pmc_enable_pck(PMC_PCK_2);
  400454:	2002      	movs	r0, #2
  400456:	4b10      	ldr	r3, [pc, #64]	; (400498 <audio_init+0x70>)
  400458:	4798      	blx	r3
		
	/* Start playing */
	ssc_enable_rx(SSC);
  40045a:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40045e:	4b0f      	ldr	r3, [pc, #60]	; (40049c <audio_init+0x74>)
  400460:	4798      	blx	r3
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  400462:	4c0f      	ldr	r4, [pc, #60]	; (4004a0 <audio_init+0x78>)
  400464:	2301      	movs	r3, #1
  400466:	61e3      	str	r3, [r4, #28]
	xdmac_channel_enable(XDMAC, XDMA_CH_SSC_RX);
	// might want to enable in the first xdma interrupt (if you care)
	ssc_enable_tx(SSC);
  400468:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40046c:	4b0d      	ldr	r3, [pc, #52]	; (4004a4 <audio_init+0x7c>)
  40046e:	4798      	blx	r3
  400470:	2302      	movs	r3, #2
  400472:	61e3      	str	r3, [r4, #28]
  400474:	bd10      	pop	{r4, pc}
  400476:	bf00      	nop
  400478:	0040163d 	.word	0x0040163d
  40047c:	00406248 	.word	0x00406248
  400480:	004033f5 	.word	0x004033f5
  400484:	00400561 	.word	0x00400561
  400488:	004004a9 	.word	0x004004a9
  40048c:	0040033d 	.word	0x0040033d
  400490:	00402755 	.word	0x00402755
  400494:	00402781 	.word	0x00402781
  400498:	004027ad 	.word	0x004027ad
  40049c:	00401b5f 	.word	0x00401b5f
  4004a0:	40078000 	.word	0x40078000
  4004a4:	00401b6b 	.word	0x00401b6b

004004a8 <configure_ssc>:
#include "WM8904_Driver.h"


/********************************** Public Functions Start **********************************/
void configure_ssc(void)
{
  4004a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4004ac:	b09c      	sub	sp, #112	; 0x70
	clock_opt_t tx_clk_option, rx_clk_option;
	data_frame_opt_t tx_data_frame_option, rx_data_frame_option;

	/* Initialize clock */
	pmc_enable_periph_clk(ID_SSC);
  4004ae:	2016      	movs	r0, #22
  4004b0:	4b24      	ldr	r3, [pc, #144]	; (400544 <configure_ssc+0x9c>)
  4004b2:	4798      	blx	r3

	/* Reset SSC */
	ssc_reset(SSC);
  4004b4:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4004b8:	4b23      	ldr	r3, [pc, #140]	; (400548 <configure_ssc+0xa0>)
  4004ba:	4798      	blx	r3

	/* Transmitter clock mode configuration. */
	tx_clk_option.ul_cks = SSC_TCMR_CKS_TK;
  4004bc:	2302      	movs	r3, #2
  4004be:	9315      	str	r3, [sp, #84]	; 0x54
	tx_clk_option.ul_cko = SSC_TCMR_CKO_NONE;
  4004c0:	2400      	movs	r4, #0
  4004c2:	9416      	str	r4, [sp, #88]	; 0x58
	tx_clk_option.ul_cki = 0;
  4004c4:	9417      	str	r4, [sp, #92]	; 0x5c
	tx_clk_option.ul_ckg = SSC_TCMR_CKG_CONTINUOUS;
  4004c6:	9418      	str	r4, [sp, #96]	; 0x60
	tx_clk_option.ul_start_sel = SSC_TCMR_START_TF_EDGE;
  4004c8:	f44f 68e0 	mov.w	r8, #1792	; 0x700
  4004cc:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
	tx_clk_option.ul_sttdly = 1;
  4004d0:	2601      	movs	r6, #1
  4004d2:	961a      	str	r6, [sp, #104]	; 0x68
	tx_clk_option.ul_period = BITS_BY_SLOT - 1;
  4004d4:	250f      	movs	r5, #15
  4004d6:	9519      	str	r5, [sp, #100]	; 0x64
	/* Transmitter frame mode configuration. */
	tx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
  4004d8:	9507      	str	r5, [sp, #28]
	tx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  4004da:	2780      	movs	r7, #128	; 0x80
  4004dc:	9708      	str	r7, [sp, #32]
	tx_data_frame_option.ul_datnb = 0;
  4004de:	9409      	str	r4, [sp, #36]	; 0x24
	tx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;
  4004e0:	950a      	str	r5, [sp, #40]	; 0x28
	tx_data_frame_option.ul_fslen_ext = 0;
  4004e2:	940b      	str	r4, [sp, #44]	; 0x2c
	tx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  4004e4:	940c      	str	r4, [sp, #48]	; 0x30
	tx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  4004e6:	940d      	str	r4, [sp, #52]	; 0x34
	/* Configure the SSC transmitter to I2S mode. */
	ssc_set_transmitter(SSC, &tx_clk_option, &tx_data_frame_option);
  4004e8:	aa07      	add	r2, sp, #28
  4004ea:	a915      	add	r1, sp, #84	; 0x54
  4004ec:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4004f0:	4b16      	ldr	r3, [pc, #88]	; (40054c <configure_ssc+0xa4>)
  4004f2:	4798      	blx	r3

	/* Receiver clock mode configuration. */
	rx_clk_option.ul_cks = SSC_RCMR_CKS_TK;
  4004f4:	960e      	str	r6, [sp, #56]	; 0x38
	rx_clk_option.ul_cko = SSC_RCMR_CKO_NONE;
  4004f6:	940f      	str	r4, [sp, #60]	; 0x3c
	rx_clk_option.ul_cki = SSC_RCMR_CKI;
  4004f8:	2320      	movs	r3, #32
  4004fa:	9310      	str	r3, [sp, #64]	; 0x40
	rx_clk_option.ul_ckg = SSC_RCMR_CKG_CONTINUOUS;
  4004fc:	9411      	str	r4, [sp, #68]	; 0x44
	rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_EDGE;
  4004fe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
	rx_clk_option.ul_sttdly = 1;	
  400502:	9613      	str	r6, [sp, #76]	; 0x4c
	rx_clk_option.ul_period = BITS_BY_SLOT;	
  400504:	2310      	movs	r3, #16
  400506:	9312      	str	r3, [sp, #72]	; 0x48
	/* Receiver frame mode configuration. */
	rx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
  400508:	9500      	str	r5, [sp, #0]
	rx_data_frame_option.ul_msbf = SSC_RFMR_MSBF;
  40050a:	9701      	str	r7, [sp, #4]
	rx_data_frame_option.ul_datnb = 0;
  40050c:	9402      	str	r4, [sp, #8]
	rx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;	
  40050e:	9503      	str	r5, [sp, #12]
	rx_data_frame_option.ul_fslen_ext = 0;
  400510:	9404      	str	r4, [sp, #16]
	rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  400512:	9405      	str	r4, [sp, #20]
	rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  400514:	9406      	str	r4, [sp, #24]
	/* Configure the SSC transmitter to I2S mode. */
	ssc_set_receiver(SSC, &rx_clk_option, &rx_data_frame_option);
  400516:	466a      	mov	r2, sp
  400518:	a90e      	add	r1, sp, #56	; 0x38
  40051a:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40051e:	4b0c      	ldr	r3, [pc, #48]	; (400550 <configure_ssc+0xa8>)
  400520:	4798      	blx	r3

	/* Disable transmitter first */
	ssc_disable_tx(SSC);
  400522:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400526:	4b0b      	ldr	r3, [pc, #44]	; (400554 <configure_ssc+0xac>)
  400528:	4798      	blx	r3
	ssc_disable_rx(SSC);
  40052a:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40052e:	4b0a      	ldr	r3, [pc, #40]	; (400558 <configure_ssc+0xb0>)
  400530:	4798      	blx	r3

	/* Disable All Interrupt */
	ssc_disable_interrupt(SSC, 0xFFFFFFFF);
  400532:	f04f 31ff 	mov.w	r1, #4294967295
  400536:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40053a:	4b08      	ldr	r3, [pc, #32]	; (40055c <configure_ssc+0xb4>)
  40053c:	4798      	blx	r3
}
  40053e:	b01c      	add	sp, #112	; 0x70
  400540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400544:	00402701 	.word	0x00402701
  400548:	00401b4b 	.word	0x00401b4b
  40054c:	00401bef 	.word	0x00401bef
  400550:	00401b7b 	.word	0x00401b7b
  400554:	00401b73 	.word	0x00401b73
  400558:	00401b65 	.word	0x00401b65
  40055c:	00401c63 	.word	0x00401c63

00400560 <configure_codec>:


void configure_codec(void)
{
  400560:	b570      	push	{r4, r5, r6, lr}
	uint16_t data = 0;
	/* check that WM8904 is present */
	wm8904_write_register(WM8904_SW_RESET_AND_ID, 0xFFFF);
  400562:	f64f 71ff 	movw	r1, #65535	; 0xffff
  400566:	2000      	movs	r0, #0
  400568:	4b40      	ldr	r3, [pc, #256]	; (40066c <configure_codec+0x10c>)
  40056a:	4798      	blx	r3
	data = wm8904_read_register(WM8904_SW_RESET_AND_ID);
  40056c:	2000      	movs	r0, #0
  40056e:	4b40      	ldr	r3, [pc, #256]	; (400670 <configure_codec+0x110>)
  400570:	4798      	blx	r3
	if(data != 0x8904) {
  400572:	f648 1304 	movw	r3, #35076	; 0x8904
  400576:	4298      	cmp	r0, r3
  400578:	d003      	beq.n	400582 <configure_codec+0x22>
		printf("WM8904 not found!\n\r");
  40057a:	483e      	ldr	r0, [pc, #248]	; (400674 <configure_codec+0x114>)
  40057c:	4b3e      	ldr	r3, [pc, #248]	; (400678 <configure_codec+0x118>)
  40057e:	4798      	blx	r3
  400580:	e7fe      	b.n	400580 <configure_codec+0x20>
		while(1);
	}

	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS);	
  400582:	2108      	movs	r1, #8
  400584:	2004      	movs	r0, #4
  400586:	4c39      	ldr	r4, [pc, #228]	; (40066c <configure_codec+0x10c>)
  400588:	47a0      	blx	r4
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |	
  40058a:	2147      	movs	r1, #71	; 0x47
  40058c:	2005      	movs	r0, #5
  40058e:	47a0      	blx	r4
	WM8904_VMID_RES_FAST | WM8904_VMID_ENA);
	delay_ms(5);
  400590:	4e3a      	ldr	r6, [pc, #232]	; (40067c <configure_codec+0x11c>)
  400592:	4630      	mov	r0, r6
  400594:	4d3a      	ldr	r5, [pc, #232]	; (400680 <configure_codec+0x120>)
  400596:	47a8      	blx	r5
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |
  400598:	2143      	movs	r1, #67	; 0x43
  40059a:	2005      	movs	r0, #5
  40059c:	47a0      	blx	r4
	WM8904_VMID_RES_NORMAL | WM8904_VMID_ENA);
	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS | WM8904_BIAS_ENA);
  40059e:	2109      	movs	r1, #9
  4005a0:	2004      	movs	r0, #4
  4005a2:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_0, WM8904_INL_ENA | WM8904_INR_ENA);
  4005a4:	2103      	movs	r1, #3
  4005a6:	200c      	movs	r0, #12
  4005a8:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_2, WM8904_HPL_PGA_ENA | WM8904_HPR_PGA_ENA);
  4005aa:	2103      	movs	r1, #3
  4005ac:	200e      	movs	r0, #14
  4005ae:	47a0      	blx	r4
	wm8904_write_register(WM8904_DAC_DIGITAL_1, WM8904_DEEMPH(0));
  4005b0:	2100      	movs	r1, #0
  4005b2:	2021      	movs	r0, #33	; 0x21
  4005b4:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_OUT12_ZC, 0x0000);
  4005b6:	2100      	movs	r1, #0
  4005b8:	203d      	movs	r0, #61	; 0x3d
  4005ba:	47a0      	blx	r4
	wm8904_write_register(WM8904_CHARGE_PUMP_0, WM8904_CP_ENA);
  4005bc:	2101      	movs	r1, #1
  4005be:	2062      	movs	r0, #98	; 0x62
  4005c0:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLASS_W_0, WM8904_CP_DYN_PWR);
  4005c2:	2101      	movs	r1, #1
  4005c4:	2068      	movs	r0, #104	; 0x68
  4005c6:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_1, 0x0000);
  4005c8:	2100      	movs	r1, #0
  4005ca:	2074      	movs	r0, #116	; 0x74
  4005cc:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_2, WM8904_FLL_OUTDIV(7)| WM8904_FLL_FRATIO(4));
  4005ce:	f240 7104 	movw	r1, #1796	; 0x704
  4005d2:	2075      	movs	r0, #117	; 0x75
  4005d4:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_3, WM8904_FLL_K(0x8000));
  4005d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  4005da:	2076      	movs	r0, #118	; 0x76
  4005dc:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_4, WM8904_FLL_N(0xBB));
  4005de:	f44f 51bb 	mov.w	r1, #5984	; 0x1760
  4005e2:	2077      	movs	r0, #119	; 0x77
  4005e4:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_1, WM8904_FLL_FRACN_ENA | WM8904_FLL_ENA);
  4005e6:	2105      	movs	r1, #5
  4005e8:	2074      	movs	r0, #116	; 0x74
  4005ea:	47a0      	blx	r4
	delay_ms(5);
  4005ec:	4630      	mov	r0, r6
  4005ee:	47a8      	blx	r5
	wm8904_write_register(WM8904_CLOCK_RATES_1, WM8904_CLK_SYS_RATE(3) | WM8904_SAMPLE_RATE(SAMPLE_RATE));
  4005f0:	f640 4105 	movw	r1, #3077	; 0xc05
  4005f4:	2015      	movs	r0, #21
  4005f6:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLOCK_RATES_0, 0x0000);
  4005f8:	2100      	movs	r1, #0
  4005fa:	2014      	movs	r0, #20
  4005fc:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLOCK_RATES_2,
  4005fe:	f244 0106 	movw	r1, #16390	; 0x4006
  400602:	2016      	movs	r0, #22
  400604:	47a0      	blx	r4
	WM8904_SYSCLK_SRC | WM8904_CLK_SYS_ENA | WM8904_CLK_DSP_ENA);
	wm8904_write_register(WM8904_AUDIO_INTERFACE_1, WM8904_BCLK_DIR | WM8904_AIF_FMT_I2S); 
  400606:	2142      	movs	r1, #66	; 0x42
  400608:	2019      	movs	r0, #25
  40060a:	47a0      	blx	r4
	wm8904_write_register(WM8904_AUDIO_INTERFACE_2, WM8904_BCLK_DIV(8));
  40060c:	2108      	movs	r1, #8
  40060e:	201a      	movs	r0, #26
  400610:	47a0      	blx	r4
	wm8904_write_register(WM8904_AUDIO_INTERFACE_3, WM8904_LRCLK_DIR | WM8904_LRCLK_RATE(0x20));
  400612:	f44f 6102 	mov.w	r1, #2080	; 0x820
  400616:	201b      	movs	r0, #27
  400618:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_6,
  40061a:	210f      	movs	r1, #15
  40061c:	2012      	movs	r0, #18
  40061e:	47a0      	blx	r4
	WM8904_DACL_ENA | WM8904_DACR_ENA |
	WM8904_ADCL_ENA | WM8904_ADCR_ENA);
	delay_ms(5);
  400620:	4630      	mov	r0, r6
  400622:	47a8      	blx	r5
	wm8904_write_register(WM8904_ANALOGUE_LEFT_INPUT_0, WM8904_LIN_VOL(0x10));
  400624:	2110      	movs	r1, #16
  400626:	202c      	movs	r0, #44	; 0x2c
  400628:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_RIGHT_INPUT_0, WM8904_RIN_VOL(0x10));
  40062a:	2110      	movs	r1, #16
  40062c:	202d      	movs	r0, #45	; 0x2d
  40062e:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  400630:	2111      	movs	r1, #17
  400632:	205a      	movs	r0, #90	; 0x5a
  400634:	47a0      	blx	r4
	WM8904_HPL_ENA | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  400636:	2133      	movs	r1, #51	; 0x33
  400638:	205a      	movs	r0, #90	; 0x5a
  40063a:	47a0      	blx	r4
	WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_DC_SERVO_0,
  40063c:	210f      	movs	r1, #15
  40063e:	2043      	movs	r0, #67	; 0x43
  400640:	47a0      	blx	r4
	WM8904_DCS_ENA_CHAN_3 | WM8904_DCS_ENA_CHAN_2 |
	WM8904_DCS_ENA_CHAN_1 | WM8904_DCS_ENA_CHAN_0);
	wm8904_write_register(WM8904_DC_SERVO_1,
  400642:	21f0      	movs	r1, #240	; 0xf0
  400644:	2044      	movs	r0, #68	; 0x44
  400646:	47a0      	blx	r4
	WM8904_DCS_TRIG_STARTUP_3 | WM8904_DCS_TRIG_STARTUP_2 |
	WM8904_DCS_TRIG_STARTUP_1 | WM8904_DCS_TRIG_STARTUP_0);
	delay_ms(100);
  400648:	4e0e      	ldr	r6, [pc, #56]	; (400684 <configure_codec+0x124>)
  40064a:	4630      	mov	r0, r6
  40064c:	47a8      	blx	r5
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  40064e:	2177      	movs	r1, #119	; 0x77
  400650:	205a      	movs	r0, #90	; 0x5a
  400652:	47a0      	blx	r4
	WM8904_HPL_ENA_OUTP | WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_ENA_OUTP | WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  400654:	21ff      	movs	r1, #255	; 0xff
  400656:	205a      	movs	r0, #90	; 0x5a
  400658:	47a0      	blx	r4
	WM8904_HPL_RMV_SHORT | WM8904_HPL_ENA_OUTP | WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_RMV_SHORT | WM8904_HPR_ENA_OUTP | WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_OUT1_LEFT, WM8904_HPOUT_VU | WM8904_HPOUTL_VOL(0x39));
  40065a:	21b9      	movs	r1, #185	; 0xb9
  40065c:	2039      	movs	r0, #57	; 0x39
  40065e:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_OUT1_RIGHT, WM8904_HPOUT_VU | WM8904_HPOUTR_VOL(0x39));
  400660:	21b9      	movs	r1, #185	; 0xb9
  400662:	203a      	movs	r0, #58	; 0x3a
  400664:	47a0      	blx	r4
	delay_ms(100);
  400666:	4630      	mov	r0, r6
  400668:	47a8      	blx	r5
  40066a:	bd70      	pop	{r4, r5, r6, pc}
  40066c:	004015c5 	.word	0x004015c5
  400670:	00401601 	.word	0x00401601
  400674:	0040626c 	.word	0x0040626c
  400678:	004033f5 	.word	0x004033f5
  40067c:	0003dbc2 	.word	0x0003dbc2
  400680:	20400001 	.word	0x20400001
  400684:	004d2b25 	.word	0x004d2b25

00400688 <SysTick_Handler>:
}

/* Systick Interrupt Handler */ 
void SysTick_Handler(void)
{
	msCount++;
  400688:	4a06      	ldr	r2, [pc, #24]	; (4006a4 <SysTick_Handler+0x1c>)
  40068a:	6813      	ldr	r3, [r2, #0]
  40068c:	3301      	adds	r3, #1
  40068e:	6013      	str	r3, [r2, #0]
	led_indicator_freq--;
  400690:	4a05      	ldr	r2, [pc, #20]	; (4006a8 <SysTick_Handler+0x20>)
  400692:	6813      	ldr	r3, [r2, #0]
  400694:	3b01      	subs	r3, #1
  400696:	6013      	str	r3, [r2, #0]
	led_indicator_duration++;
  400698:	4a04      	ldr	r2, [pc, #16]	; (4006ac <SysTick_Handler+0x24>)
  40069a:	6813      	ldr	r3, [r2, #0]
  40069c:	3301      	adds	r3, #1
  40069e:	6013      	str	r3, [r2, #0]
  4006a0:	4770      	bx	lr
  4006a2:	bf00      	nop
  4006a4:	20400a5c 	.word	0x20400a5c
  4006a8:	20400a58 	.word	0x20400a58
  4006ac:	20400a54 	.word	0x20400a54

004006b0 <gfx_set_clipping>:
static gfx_ext_draw_handler_t gfx_ext_draw_func;

/* This function is documented in gfx.h */
void gfx_set_clipping(gfx_coord_t min_x, gfx_coord_t min_y,
		gfx_coord_t max_x, gfx_coord_t max_y)
{
  4006b0:	b410      	push	{r4}
  4006b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  4006b6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31

	if (min_y < 0) {
		min_y = 0;
	}

	if (max_x >= gfx_width) {
  4006ba:	4c0c      	ldr	r4, [pc, #48]	; (4006ec <gfx_set_clipping+0x3c>)
  4006bc:	f9b4 4000 	ldrsh.w	r4, [r4]
  4006c0:	4294      	cmp	r4, r2
  4006c2:	dc01      	bgt.n	4006c8 <gfx_set_clipping+0x18>
		max_x = gfx_width - 1;
  4006c4:	1e62      	subs	r2, r4, #1
  4006c6:	b212      	sxth	r2, r2
	}

	if (max_y >= gfx_height) {
  4006c8:	4c09      	ldr	r4, [pc, #36]	; (4006f0 <gfx_set_clipping+0x40>)
  4006ca:	f9b4 4000 	ldrsh.w	r4, [r4]
  4006ce:	429c      	cmp	r4, r3
  4006d0:	dc01      	bgt.n	4006d6 <gfx_set_clipping+0x26>
		max_y = gfx_height - 1;
  4006d2:	3c01      	subs	r4, #1
  4006d4:	b223      	sxth	r3, r4
	}

	gfx_min_x = min_x;
  4006d6:	4c07      	ldr	r4, [pc, #28]	; (4006f4 <gfx_set_clipping+0x44>)
  4006d8:	8020      	strh	r0, [r4, #0]
	gfx_min_y = min_y;
  4006da:	4807      	ldr	r0, [pc, #28]	; (4006f8 <gfx_set_clipping+0x48>)
  4006dc:	8001      	strh	r1, [r0, #0]
	gfx_max_x = max_x;
  4006de:	4907      	ldr	r1, [pc, #28]	; (4006fc <gfx_set_clipping+0x4c>)
  4006e0:	800a      	strh	r2, [r1, #0]
	gfx_max_y = max_y;
  4006e2:	4a07      	ldr	r2, [pc, #28]	; (400700 <gfx_set_clipping+0x50>)
  4006e4:	8013      	strh	r3, [r2, #0]
#endif
}
  4006e6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006ea:	4770      	bx	lr
  4006ec:	204031c8 	.word	0x204031c8
  4006f0:	204031d2 	.word	0x204031d2
  4006f4:	204031cc 	.word	0x204031cc
  4006f8:	204031d0 	.word	0x204031d0
  4006fc:	204031ca 	.word	0x204031ca
  400700:	204031ce 	.word	0x204031ce

00400704 <gfx_generic_draw_filled_rect>:
		gfx_color_t color)
{
	gfx_coord_t x2;
	gfx_coord_t y2;

	if ((width == 0) || (height == 0)) {
  400704:	2a00      	cmp	r2, #0
  400706:	d05c      	beq.n	4007c2 <gfx_generic_draw_filled_rect+0xbe>
{
  400708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40070a:	461c      	mov	r4, r3
  40070c:	4615      	mov	r5, r2
	if ((width == 0) || (height == 0)) {
  40070e:	2b00      	cmp	r3, #0
  400710:	d048      	beq.n	4007a4 <gfx_generic_draw_filled_rect+0xa0>
		return;
	}

	/* Invert if width or height is negative. */
	if (width < 0) {
  400712:	2a00      	cmp	r2, #0
  400714:	db47      	blt.n	4007a6 <gfx_generic_draw_filled_rect+0xa2>
		width = -width;
		x -= width - 1;
	}

	if (height < 0) {
  400716:	2c00      	cmp	r4, #0
  400718:	db4c      	blt.n	4007b4 <gfx_generic_draw_filled_rect+0xb0>
		y -= height - 1;
	}

#ifdef CONF_GFX_USE_CLIPPING
	/* Nothing to do if entire rectangle is outside clipping region. */
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
  40071a:	4b2a      	ldr	r3, [pc, #168]	; (4007c4 <gfx_generic_draw_filled_rect+0xc0>)
  40071c:	f9b3 6000 	ldrsh.w	r6, [r3]
  400720:	42b0      	cmp	r0, r6
  400722:	dc3f      	bgt.n	4007a4 <gfx_generic_draw_filled_rect+0xa0>
  400724:	4b28      	ldr	r3, [pc, #160]	; (4007c8 <gfx_generic_draw_filled_rect+0xc4>)
  400726:	f9b3 7000 	ldrsh.w	r7, [r3]
  40072a:	42b9      	cmp	r1, r7
  40072c:	dc3a      	bgt.n	4007a4 <gfx_generic_draw_filled_rect+0xa0>
			((x + width) <= gfx_min_x) ||
  40072e:	4b27      	ldr	r3, [pc, #156]	; (4007cc <gfx_generic_draw_filled_rect+0xc8>)
  400730:	f9b3 3000 	ldrsh.w	r3, [r3]
  400734:	1942      	adds	r2, r0, r5
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
  400736:	429a      	cmp	r2, r3
  400738:	dd34      	ble.n	4007a4 <gfx_generic_draw_filled_rect+0xa0>
			((y + height) <= gfx_min_y)) {
  40073a:	4a25      	ldr	r2, [pc, #148]	; (4007d0 <gfx_generic_draw_filled_rect+0xcc>)
  40073c:	f9b2 2000 	ldrsh.w	r2, [r2]
  400740:	eb01 0e04 	add.w	lr, r1, r4
			((x + width) <= gfx_min_x) ||
  400744:	4596      	cmp	lr, r2
  400746:	dd2d      	ble.n	4007a4 <gfx_generic_draw_filled_rect+0xa0>
		return;
	}

	/* Clip if outside left X limit. */
	if (x < gfx_min_x) {
  400748:	4298      	cmp	r0, r3
  40074a:	da03      	bge.n	400754 <gfx_generic_draw_filled_rect+0x50>
		width -= gfx_min_x - x;
  40074c:	4405      	add	r5, r0
  40074e:	1aed      	subs	r5, r5, r3
  400750:	b22d      	sxth	r5, r5
		x = gfx_min_x;
  400752:	4618      	mov	r0, r3
	}

	/* Clip if outside top Y limit. */
	if (y < gfx_min_y) {
  400754:	4291      	cmp	r1, r2
  400756:	da03      	bge.n	400760 <gfx_generic_draw_filled_rect+0x5c>
		height -= gfx_min_y - y;
  400758:	440c      	add	r4, r1
  40075a:	1aa4      	subs	r4, r4, r2
  40075c:	b224      	sxth	r4, r4
		y = gfx_min_y;
  40075e:	4611      	mov	r1, r2
	}
#endif

	/*  Compute bottom right point. */
	x2 = x + width - 1;
  400760:	fa1f fc80 	uxth.w	ip, r0
  400764:	eb0c 0205 	add.w	r2, ip, r5
  400768:	3a01      	subs	r2, #1
  40076a:	b212      	sxth	r2, r2
	y2 = y + height - 1;
  40076c:	fa1f fe81 	uxth.w	lr, r1
  400770:	eb0e 0304 	add.w	r3, lr, r4
  400774:	3b01      	subs	r3, #1
  400776:	b21b      	sxth	r3, r3

#ifdef CONF_GFX_USE_CLIPPING
	/* Clip if outside right X limit. */
	if (x2 > gfx_max_x) {
  400778:	4296      	cmp	r6, r2
  40077a:	da04      	bge.n	400786 <gfx_generic_draw_filled_rect+0x82>
		x2 = gfx_max_x;
		width = x2 - x + 1;
  40077c:	1c75      	adds	r5, r6, #1
  40077e:	eba5 050c 	sub.w	r5, r5, ip
  400782:	b22d      	sxth	r5, r5
		x2 = gfx_max_x;
  400784:	4632      	mov	r2, r6
	}

	/* Clip if outside bottom Y limit. */
	if (y2 > gfx_max_y) {
  400786:	429f      	cmp	r7, r3
  400788:	da04      	bge.n	400794 <gfx_generic_draw_filled_rect+0x90>
		y2 = gfx_max_y;
		height = y2 - y + 1;
  40078a:	1c7c      	adds	r4, r7, #1
  40078c:	eba4 040e 	sub.w	r4, r4, lr
  400790:	b224      	sxth	r4, r4
		y2 = gfx_max_y;
  400792:	463b      	mov	r3, r7
	}
#endif

	/* Set up draw area and duplicate pixel color until area is full. */
	gfx_set_limits(x, y, x2, y2);
  400794:	4e0f      	ldr	r6, [pc, #60]	; (4007d4 <gfx_generic_draw_filled_rect+0xd0>)
  400796:	47b0      	blx	r6
	gfx_duplicate_pixel(color, (uint32_t)width * height);
  400798:	fb04 f105 	mul.w	r1, r4, r5
  40079c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
  4007a0:	4b0d      	ldr	r3, [pc, #52]	; (4007d8 <gfx_generic_draw_filled_rect+0xd4>)
  4007a2:	4798      	blx	r3
  4007a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		width = -width;
  4007a6:	b293      	uxth	r3, r2
  4007a8:	425d      	negs	r5, r3
  4007aa:	b22d      	sxth	r5, r5
		x -= width - 1;
  4007ac:	3001      	adds	r0, #1
  4007ae:	4418      	add	r0, r3
  4007b0:	b200      	sxth	r0, r0
  4007b2:	e7b0      	b.n	400716 <gfx_generic_draw_filled_rect+0x12>
		height = -height;
  4007b4:	b2a3      	uxth	r3, r4
  4007b6:	425c      	negs	r4, r3
  4007b8:	b224      	sxth	r4, r4
		y -= height - 1;
  4007ba:	3101      	adds	r1, #1
  4007bc:	4419      	add	r1, r3
  4007be:	b209      	sxth	r1, r1
  4007c0:	e7ab      	b.n	40071a <gfx_generic_draw_filled_rect+0x16>
  4007c2:	4770      	bx	lr
  4007c4:	204031ca 	.word	0x204031ca
  4007c8:	204031ce 	.word	0x204031ce
  4007cc:	204031cc 	.word	0x204031cc
  4007d0:	204031d0 	.word	0x204031d0
  4007d4:	00401a05 	.word	0x00401a05
  4007d8:	00401ab9 	.word	0x00401ab9

004007dc <gfx_ili9488_set_orientation>:
gfx_coord_t gfx_height, gfx_width;
gfx_coord_t gfx_min_x, gfx_min_y;
gfx_coord_t gfx_max_x, gfx_max_y;

void gfx_ili9488_set_orientation(uint8_t flags)
{
  4007dc:	b510      	push	{r4, lr}
  4007de:	4604      	mov	r4, r0
	ili9488_set_orientation(flags);
  4007e0:	4b11      	ldr	r3, [pc, #68]	; (400828 <gfx_ili9488_set_orientation+0x4c>)
  4007e2:	4798      	blx	r3

	/* Switch width and height if XY is switched. */
	if ((flags & GFX_SWITCH_XY) != 0x00) {
  4007e4:	f014 0f04 	tst.w	r4, #4
  4007e8:	d114      	bne.n	400814 <gfx_ili9488_set_orientation+0x38>
		gfx_width = ILI9488_SWITCH_XY_WIDTH;
		gfx_height = ILI9488_SWITCH_XY_HEIGHT;
	} else {
		gfx_width = ILI9488_SWITCH_XY_HEIGHT;
  4007ea:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  4007ee:	4b0f      	ldr	r3, [pc, #60]	; (40082c <gfx_ili9488_set_orientation+0x50>)
  4007f0:	801a      	strh	r2, [r3, #0]
		gfx_height = ILI9488_SWITCH_XY_WIDTH;
  4007f2:	f44f 72a0 	mov.w	r2, #320	; 0x140
  4007f6:	4b0e      	ldr	r3, [pc, #56]	; (400830 <gfx_ili9488_set_orientation+0x54>)
  4007f8:	801a      	strh	r2, [r3, #0]
		//gfx_height = ILI9488_SWITCH_XY_HEIGHT;
	}

#ifdef CONF_GFX_USE_CLIPPING
	/* Reset clipping region. */
	gfx_set_clipping(0, 0, gfx_width - 1, gfx_height - 1);
  4007fa:	4b0d      	ldr	r3, [pc, #52]	; (400830 <gfx_ili9488_set_orientation+0x54>)
  4007fc:	881b      	ldrh	r3, [r3, #0]
  4007fe:	3b01      	subs	r3, #1
  400800:	4a0a      	ldr	r2, [pc, #40]	; (40082c <gfx_ili9488_set_orientation+0x50>)
  400802:	8812      	ldrh	r2, [r2, #0]
  400804:	3a01      	subs	r2, #1
  400806:	b21b      	sxth	r3, r3
  400808:	b212      	sxth	r2, r2
  40080a:	2100      	movs	r1, #0
  40080c:	4608      	mov	r0, r1
  40080e:	4c09      	ldr	r4, [pc, #36]	; (400834 <gfx_ili9488_set_orientation+0x58>)
  400810:	47a0      	blx	r4
  400812:	bd10      	pop	{r4, pc}
		gfx_width = ILI9488_SWITCH_XY_WIDTH;
  400814:	f44f 72a0 	mov.w	r2, #320	; 0x140
  400818:	4b04      	ldr	r3, [pc, #16]	; (40082c <gfx_ili9488_set_orientation+0x50>)
  40081a:	801a      	strh	r2, [r3, #0]
		gfx_height = ILI9488_SWITCH_XY_HEIGHT;
  40081c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  400820:	4b03      	ldr	r3, [pc, #12]	; (400830 <gfx_ili9488_set_orientation+0x54>)
  400822:	801a      	strh	r2, [r3, #0]
  400824:	e7e9      	b.n	4007fa <gfx_ili9488_set_orientation+0x1e>
  400826:	bf00      	nop
  400828:	00401a2d 	.word	0x00401a2d
  40082c:	204031c8 	.word	0x204031c8
  400830:	204031d2 	.word	0x204031d2
  400834:	004006b1 	.word	0x004006b1

00400838 <gfx_ili9488_draw_pixel>:

	return color;
}

void gfx_ili9488_draw_pixel(gfx_coord_t x, gfx_coord_t y, gfx_color_t color)
{
  400838:	b538      	push	{r3, r4, r5, lr}
#ifdef CONF_GFX_USE_CLIPPING
	if ((x < gfx_min_x) || (x > gfx_max_x) ||
  40083a:	4c0f      	ldr	r4, [pc, #60]	; (400878 <gfx_ili9488_draw_pixel+0x40>)
  40083c:	f9b4 4000 	ldrsh.w	r4, [r4]
  400840:	4284      	cmp	r4, r0
  400842:	dc0e      	bgt.n	400862 <gfx_ili9488_draw_pixel+0x2a>
  400844:	4b0d      	ldr	r3, [pc, #52]	; (40087c <gfx_ili9488_draw_pixel+0x44>)
  400846:	f9b3 3000 	ldrsh.w	r3, [r3]
  40084a:	4283      	cmp	r3, r0
  40084c:	db09      	blt.n	400862 <gfx_ili9488_draw_pixel+0x2a>
			(y < gfx_min_y) || (y > gfx_max_y)) {
  40084e:	4b0c      	ldr	r3, [pc, #48]	; (400880 <gfx_ili9488_draw_pixel+0x48>)
	if ((x < gfx_min_x) || (x > gfx_max_x) ||
  400850:	f9b3 3000 	ldrsh.w	r3, [r3]
  400854:	428b      	cmp	r3, r1
  400856:	dc04      	bgt.n	400862 <gfx_ili9488_draw_pixel+0x2a>
			(y < gfx_min_y) || (y > gfx_max_y)) {
  400858:	4b0a      	ldr	r3, [pc, #40]	; (400884 <gfx_ili9488_draw_pixel+0x4c>)
  40085a:	f9b3 3000 	ldrsh.w	r3, [r3]
  40085e:	428b      	cmp	r3, r1
  400860:	da00      	bge.n	400864 <gfx_ili9488_draw_pixel+0x2c>
  400862:	bd38      	pop	{r3, r4, r5, pc}
  400864:	4614      	mov	r4, r2
		return;
	}
#endif

	/* Set up draw area and write the two bytes of pixel data. */
	gfx_set_limits(x, y, x, y);
  400866:	460b      	mov	r3, r1
  400868:	4602      	mov	r2, r0
  40086a:	4d07      	ldr	r5, [pc, #28]	; (400888 <gfx_ili9488_draw_pixel+0x50>)
  40086c:	47a8      	blx	r5
	ili9488_write_gram(color);
  40086e:	4620      	mov	r0, r4
  400870:	4b06      	ldr	r3, [pc, #24]	; (40088c <gfx_ili9488_draw_pixel+0x54>)
  400872:	4798      	blx	r3
  400874:	e7f5      	b.n	400862 <gfx_ili9488_draw_pixel+0x2a>
  400876:	bf00      	nop
  400878:	204031cc 	.word	0x204031cc
  40087c:	204031ca 	.word	0x204031ca
  400880:	204031d0 	.word	0x204031d0
  400884:	204031ce 	.word	0x204031ce
  400888:	00401a05 	.word	0x00401a05
  40088c:	00401a79 	.word	0x00401a79

00400890 <gfx_ili9488_init>:
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
	LCD_MULTI_WD(us_data, size);
}

void gfx_ili9488_init(void)
{
  400890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400894:	b086      	sub	sp, #24
	struct ili9488_opt_t g_ili9488_display_opt;

	/* Initialize globals */
	gfx_width = ILI9488_LCD_WIDTH;
  400896:	4d21      	ldr	r5, [pc, #132]	; (40091c <gfx_ili9488_init+0x8c>)
  400898:	f44f 72a0 	mov.w	r2, #320	; 0x140
  40089c:	802a      	strh	r2, [r5, #0]
	gfx_height = ILI9488_LCD_HEIGHT;
  40089e:	4e20      	ldr	r6, [pc, #128]	; (400920 <gfx_ili9488_init+0x90>)
  4008a0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  4008a4:	8033      	strh	r3, [r6, #0]

	/* Initialize display parameter */
	g_ili9488_display_opt.ul_width= ILI9488_LCD_WIDTH;
  4008a6:	9202      	str	r2, [sp, #8]
	g_ili9488_display_opt.ul_height = ILI9488_LCD_HEIGHT;
  4008a8:	9303      	str	r3, [sp, #12]
	g_ili9488_display_opt.foreground_color= COLOR_WHITE;
  4008aa:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  4008ae:	9304      	str	r3, [sp, #16]
	g_ili9488_display_opt.background_color = COLOR_BLACK;
  4008b0:	2400      	movs	r4, #0
  4008b2:	9405      	str	r4, [sp, #20]

	ili9488_init(&g_ili9488_display_opt);
  4008b4:	a802      	add	r0, sp, #8
  4008b6:	4b1b      	ldr	r3, [pc, #108]	; (400924 <gfx_ili9488_init+0x94>)
  4008b8:	4798      	blx	r3
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  4008ba:	f8df 8088 	ldr.w	r8, [pc, #136]	; 400944 <gfx_ili9488_init+0xb4>
  4008be:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4008c2:	4640      	mov	r0, r8
  4008c4:	4b18      	ldr	r3, [pc, #96]	; (400928 <gfx_ili9488_init+0x98>)
  4008c6:	4798      	blx	r3

/* Define EBI access for ILI9488 16-bit System Interface.*/
#ifdef ILI9488_EBIMODE
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  4008c8:	f04f 47c6 	mov.w	r7, #1660944384	; 0x63000000
  4008cc:	2353      	movs	r3, #83	; 0x53
  4008ce:	803b      	strh	r3, [r7, #0]
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  4008d0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4008d4:	4640      	mov	r0, r8
  4008d6:	4b15      	ldr	r3, [pc, #84]	; (40092c <gfx_ili9488_init+0x9c>)
  4008d8:	4798      	blx	r3
		*(volatile uint16_t *)(BOARD_ILI9488_ADDR) = lcd_data;
	}
	static inline void LCD_MULTI_WD(const uint16_t *lcd_data, uint32_t size)
	{
		while(size--) {
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  4008da:	2324      	movs	r3, #36	; 0x24
  4008dc:	803b      	strh	r3, [r7, #0]
	
	/* Attempt to make display brighter :( */ 
	ili9488_color_t param = 0x24;
	ili9488_write_register(ILI9488_CMD_WRITE_CTRL_DISPLAY, &param, 1); 
	ili9488_write_brightness(0xFFFF);
  4008de:	f64f 70ff 	movw	r0, #65535	; 0xffff
  4008e2:	4b13      	ldr	r3, [pc, #76]	; (400930 <gfx_ili9488_init+0xa0>)
  4008e4:	4798      	blx	r3

	ili9488_display_on();
  4008e6:	4b13      	ldr	r3, [pc, #76]	; (400934 <gfx_ili9488_init+0xa4>)
  4008e8:	4798      	blx	r3

	/* Set clipping area to whole screen initially */
	gfx_set_clipping(0, 0, gfx_width, gfx_height);
  4008ea:	f9b6 3000 	ldrsh.w	r3, [r6]
  4008ee:	f9b5 2000 	ldrsh.w	r2, [r5]
  4008f2:	4621      	mov	r1, r4
  4008f4:	4620      	mov	r0, r4
  4008f6:	4f10      	ldr	r7, [pc, #64]	; (400938 <gfx_ili9488_init+0xa8>)
  4008f8:	47b8      	blx	r7

	gfx_set_orientation(GFX_FLIP_Y);
  4008fa:	2002      	movs	r0, #2
  4008fc:	4b0f      	ldr	r3, [pc, #60]	; (40093c <gfx_ili9488_init+0xac>)
  4008fe:	4798      	blx	r3
	gfx_draw_filled_rect(0, 0, gfx_width, gfx_height, g_ili9488_display_opt.background_color);			
  400900:	f9b6 3000 	ldrsh.w	r3, [r6]
  400904:	f9b5 2000 	ldrsh.w	r2, [r5]
  400908:	f8bd 1014 	ldrh.w	r1, [sp, #20]
  40090c:	9100      	str	r1, [sp, #0]
  40090e:	4621      	mov	r1, r4
  400910:	4620      	mov	r0, r4
  400912:	4c0b      	ldr	r4, [pc, #44]	; (400940 <gfx_ili9488_init+0xb0>)
  400914:	47a0      	blx	r4
}
  400916:	b006      	add	sp, #24
  400918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40091c:	204031c8 	.word	0x204031c8
  400920:	204031d2 	.word	0x204031d2
  400924:	00401879 	.word	0x00401879
  400928:	00402271 	.word	0x00402271
  40092c:	0040226d 	.word	0x0040226d
  400930:	004019e9 	.word	0x004019e9
  400934:	004017e9 	.word	0x004017e9
  400938:	004006b1 	.word	0x004006b1
  40093c:	004007dd 	.word	0x004007dd
  400940:	00400705 	.word	0x00400705
  400944:	400e1200 	.word	0x400e1200

00400948 <gfx_draw_char>:
 * \param text_color  Foreground color to draw the text string in
 */
void gfx_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font, const gfx_color_t bg_color,
		const gfx_color_t text_color)
{
  400948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40094c:	b085      	sub	sp, #20
  40094e:	4604      	mov	r4, r0
  400950:	4688      	mov	r8, r1
  400952:	4691      	mov	r9, r2
  400954:	469a      	mov	sl, r3
  400956:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
  40095a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  40095e:	9302      	str	r3, [sp, #8]
	if (bg_color != GFX_COLOR_TRANSPARENT) {
  400960:	f24f 031e 	movw	r3, #61470	; 0xf01e
  400964:	4299      	cmp	r1, r3
  400966:	d008      	beq.n	40097a <gfx_draw_char+0x32>
		gfx_draw_filled_rect(x, y, font->width, font->height, bg_color);
  400968:	f89a 3009 	ldrb.w	r3, [sl, #9]
  40096c:	f89a 2008 	ldrb.w	r2, [sl, #8]
  400970:	9100      	str	r1, [sp, #0]
  400972:	4649      	mov	r1, r9
  400974:	4640      	mov	r0, r8
  400976:	4d25      	ldr	r5, [pc, #148]	; (400a0c <gfx_draw_char+0xc4>)
  400978:	47a8      	blx	r5
	}

	switch (font->type) {
  40097a:	f89a 3000 	ldrb.w	r3, [sl]
  40097e:	b113      	cbz	r3, 400986 <gfx_draw_char+0x3e>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  400980:	b005      	add	sp, #20
  400982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  400986:	f89a 3008 	ldrb.w	r3, [sl, #8]
  40098a:	08da      	lsrs	r2, r3, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  40098c:	f013 0f07 	tst.w	r3, #7
		char_row_size++;
  400990:	bf18      	it	ne
  400992:	3201      	addne	r2, #1
	glyph_data_offset = char_row_size * font->height *
  400994:	f89a 3009 	ldrb.w	r3, [sl, #9]
			((uint8_t)ch - font->first_char);
  400998:	f89a 700a 	ldrb.w	r7, [sl, #10]
  40099c:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  40099e:	fb17 f703 	smulbb	r7, r7, r3
  4009a2:	fb17 f702 	smulbb	r7, r7, r2
	glyph_data = font->data.progmem + glyph_data_offset;
  4009a6:	f8da 2004 	ldr.w	r2, [sl, #4]
  4009aa:	fa12 f787 	uxtah	r7, r2, r7
  4009ae:	3b01      	subs	r3, #1
  4009b0:	f109 0201 	add.w	r2, r9, #1
  4009b4:	fa52 f383 	uxtab	r3, r2, r3
  4009b8:	b29b      	uxth	r3, r3
  4009ba:	9303      	str	r3, [sp, #12]
				gfx_draw_pixel(inc_x, inc_y, color);
  4009bc:	f8df b050 	ldr.w	fp, [pc, #80]	; 400a10 <gfx_draw_char+0xc8>
  4009c0:	e01d      	b.n	4009fe <gfx_draw_char+0xb6>
			glyph_byte <<= 1;
  4009c2:	0064      	lsls	r4, r4, #1
  4009c4:	b2e4      	uxtb	r4, r4
  4009c6:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  4009c8:	b2eb      	uxtb	r3, r5
  4009ca:	429e      	cmp	r6, r3
  4009cc:	d90e      	bls.n	4009ec <gfx_draw_char+0xa4>
  4009ce:	eb05 0008 	add.w	r0, r5, r8
  4009d2:	b200      	sxth	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  4009d4:	f015 0f07 	tst.w	r5, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  4009d8:	bf08      	it	eq
  4009da:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  4009de:	f014 0f80 	tst.w	r4, #128	; 0x80
  4009e2:	d0ee      	beq.n	4009c2 <gfx_draw_char+0x7a>
				gfx_draw_pixel(inc_x, inc_y, color);
  4009e4:	9a02      	ldr	r2, [sp, #8]
  4009e6:	4649      	mov	r1, r9
  4009e8:	47d8      	blx	fp
  4009ea:	e7ea      	b.n	4009c2 <gfx_draw_char+0x7a>
  4009ec:	f109 0901 	add.w	r9, r9, #1
  4009f0:	fa1f f389 	uxth.w	r3, r9
		inc_y += 1;
  4009f4:	fa0f f983 	sxth.w	r9, r3
	} while (rows_left > 0);
  4009f8:	9a03      	ldr	r2, [sp, #12]
  4009fa:	429a      	cmp	r2, r3
  4009fc:	d0c0      	beq.n	400980 <gfx_draw_char+0x38>
		uint8_t pixelsToDraw = font->width;
  4009fe:	f89a 6008 	ldrb.w	r6, [sl, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  400a02:	2e00      	cmp	r6, #0
  400a04:	d0f2      	beq.n	4009ec <gfx_draw_char+0xa4>
  400a06:	2500      	movs	r5, #0
  400a08:	462c      	mov	r4, r5
  400a0a:	e7e0      	b.n	4009ce <gfx_draw_char+0x86>
  400a0c:	00400705 	.word	0x00400705
  400a10:	00400839 	.word	0x00400839

00400a14 <gfx_get_string_bounding_box>:
 * \param width    Pointer to width result
 * \param height   Pointer to height result
 */
void gfx_get_string_bounding_box(const char *str, const struct font *font,
		gfx_coord_t *width, gfx_coord_t *height)
{
  400a14:	b5f0      	push	{r4, r5, r6, r7, lr}
	gfx_coord_t font_width = font->width;
  400a16:	7a0f      	ldrb	r7, [r1, #8]
	gfx_coord_t font_height = font->height;
  400a18:	f891 e009 	ldrb.w	lr, [r1, #9]
  400a1c:	fa0f f58e 	sxth.w	r5, lr

	gfx_coord_t max_width = 1;
	gfx_coord_t max_height = font_height;
	gfx_coord_t x = 0;
  400a20:	2100      	movs	r1, #0
	gfx_coord_t max_width = 1;
  400a22:	2601      	movs	r6, #1

	/* Handle each character until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = 0;
  400a24:	468c      	mov	ip, r1
  400a26:	e005      	b.n	400a34 <gfx_get_string_bounding_box+0x20>
			max_height += font_height;
  400a28:	4475      	add	r5, lr
  400a2a:	b22d      	sxth	r5, r5
			x = 0;
  400a2c:	4661      	mov	r1, ip
			x += font_width;
			if (x > max_width) {
				max_width = x;
			}
		}
	} while (*(++str));
  400a2e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
  400a32:	b154      	cbz	r4, 400a4a <gfx_get_string_bounding_box+0x36>
		if (*str == '\n') {
  400a34:	7804      	ldrb	r4, [r0, #0]
  400a36:	2c0a      	cmp	r4, #10
  400a38:	d0f6      	beq.n	400a28 <gfx_get_string_bounding_box+0x14>
		} else if (*str == '\r') {
  400a3a:	2c0d      	cmp	r4, #13
  400a3c:	d0f7      	beq.n	400a2e <gfx_get_string_bounding_box+0x1a>
			x += font_width;
  400a3e:	4439      	add	r1, r7
  400a40:	b209      	sxth	r1, r1
  400a42:	428e      	cmp	r6, r1
  400a44:	bfb8      	it	lt
  400a46:	460e      	movlt	r6, r1
  400a48:	e7f1      	b.n	400a2e <gfx_get_string_bounding_box+0x1a>

	/* Return values through references */
	*width = max_width;
  400a4a:	8016      	strh	r6, [r2, #0]
	*height = max_height;
  400a4c:	801d      	strh	r5, [r3, #0]
  400a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00400a50 <gfx_draw_string_aligned>:
{
  400a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400a54:	b087      	sub	sp, #28
  400a56:	4606      	mov	r6, r0
  400a58:	9103      	str	r1, [sp, #12]
  400a5a:	4690      	mov	r8, r2
  400a5c:	461f      	mov	r7, r3
  400a5e:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
  400a62:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
  400a66:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
  400a6a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
  400a6e:	9302      	str	r3, [sp, #8]
	gfx_get_string_bounding_box(str, font, &bounding_x, &bounding_y);
  400a70:	ab05      	add	r3, sp, #20
  400a72:	f10d 0216 	add.w	r2, sp, #22
  400a76:	4639      	mov	r1, r7
  400a78:	4d47      	ldr	r5, [pc, #284]	; (400b98 <gfx_draw_string_aligned+0x148>)
  400a7a:	47a8      	blx	r5
	if (text_pos & TEXT_POS_CENTER_Y) {
  400a7c:	f014 0f02 	tst.w	r4, #2
  400a80:	d01b      	beq.n	400aba <gfx_draw_string_aligned+0x6a>
		y -= bounding_y / 2;
  400a82:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  400a86:	2b00      	cmp	r3, #0
  400a88:	bfb8      	it	lt
  400a8a:	3301      	addlt	r3, #1
  400a8c:	eba8 0863 	sub.w	r8, r8, r3, asr #1
  400a90:	fa0f f888 	sxth.w	r8, r8
	if (text_pos & TEXT_POS_CENTER_X) {
  400a94:	f014 0f10 	tst.w	r4, #16
  400a98:	d019      	beq.n	400ace <gfx_draw_string_aligned+0x7e>
		x -= bounding_x / 2;
  400a9a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
  400a9e:	2b00      	cmp	r3, #0
  400aa0:	bfb8      	it	lt
  400aa2:	3301      	addlt	r3, #1
  400aa4:	9a03      	ldr	r2, [sp, #12]
  400aa6:	eba2 0363 	sub.w	r3, r2, r3, asr #1
  400aaa:	b21b      	sxth	r3, r3
  400aac:	9303      	str	r3, [sp, #12]
	while (*str != '\0') {
  400aae:	7833      	ldrb	r3, [r6, #0]
  400ab0:	2b00      	cmp	r3, #0
  400ab2:	d06d      	beq.n	400b90 <gfx_draw_string_aligned+0x140>
				gfx_draw_char(*curr_line_text, curr_line_x, y,
  400ab4:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 400b9c <gfx_draw_string_aligned+0x14c>
  400ab8:	e067      	b.n	400b8a <gfx_draw_string_aligned+0x13a>
	} else if (text_pos & TEXT_POS_BOTTOM) {
  400aba:	f014 0f04 	tst.w	r4, #4
  400abe:	d0e9      	beq.n	400a94 <gfx_draw_string_aligned+0x44>
		y -= bounding_y;
  400ac0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  400ac4:	eba8 0803 	sub.w	r8, r8, r3
  400ac8:	fa0f f888 	sxth.w	r8, r8
  400acc:	e7e2      	b.n	400a94 <gfx_draw_string_aligned+0x44>
	} else if (text_pos & TEXT_POS_RIGHT) {
  400ace:	f014 0f20 	tst.w	r4, #32
  400ad2:	d0ec      	beq.n	400aae <gfx_draw_string_aligned+0x5e>
		x -= bounding_x;
  400ad4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  400ad8:	9a03      	ldr	r2, [sp, #12]
  400ada:	1ad3      	subs	r3, r2, r3
  400adc:	b21b      	sxth	r3, r3
  400ade:	9303      	str	r3, [sp, #12]
  400ae0:	e7e5      	b.n	400aae <gfx_draw_string_aligned+0x5e>
				str++;
  400ae2:	3501      	adds	r5, #1
		if (text_align == TEXT_ALIGN_CENTER) {
  400ae4:	9a02      	ldr	r2, [sp, #8]
  400ae6:	2a02      	cmp	r2, #2
  400ae8:	d014      	beq.n	400b14 <gfx_draw_string_aligned+0xc4>
		} else if (text_align == TEXT_ALIGN_RIGHT) {
  400aea:	9a02      	ldr	r2, [sp, #8]
  400aec:	2a01      	cmp	r2, #1
  400aee:	d024      	beq.n	400b3a <gfx_draw_string_aligned+0xea>
		gfx_coord_t curr_line_x = x;
  400af0:	9c03      	ldr	r4, [sp, #12]
  400af2:	464b      	mov	r3, r9
  400af4:	46a9      	mov	r9, r5
  400af6:	461d      	mov	r5, r3
  400af8:	e02c      	b.n	400b54 <gfx_draw_string_aligned+0x104>
		} while (*(++str) != '\0');
  400afa:	f815 2f01 	ldrb.w	r2, [r5, #1]!
  400afe:	2a00      	cmp	r2, #0
  400b00:	d0f0      	beq.n	400ae4 <gfx_draw_string_aligned+0x94>
			if (*str == '\n') {
  400b02:	782a      	ldrb	r2, [r5, #0]
  400b04:	2a0a      	cmp	r2, #10
  400b06:	d0ec      	beq.n	400ae2 <gfx_draw_string_aligned+0x92>
			} else if (*str != '\r') {
  400b08:	2a0d      	cmp	r2, #13
  400b0a:	d0f6      	beq.n	400afa <gfx_draw_string_aligned+0xaa>
				curr_line_width += font->width;
  400b0c:	7a3a      	ldrb	r2, [r7, #8]
  400b0e:	4413      	add	r3, r2
  400b10:	b21b      	sxth	r3, r3
  400b12:	e7f2      	b.n	400afa <gfx_draw_string_aligned+0xaa>
			curr_line_x += (bounding_x / 2) - (curr_line_width / 2);
  400b14:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
  400b18:	2a00      	cmp	r2, #0
  400b1a:	bfb8      	it	lt
  400b1c:	3201      	addlt	r2, #1
  400b1e:	9903      	ldr	r1, [sp, #12]
  400b20:	eb01 0462 	add.w	r4, r1, r2, asr #1
  400b24:	461a      	mov	r2, r3
  400b26:	2b00      	cmp	r3, #0
  400b28:	bfb8      	it	lt
  400b2a:	1c5a      	addlt	r2, r3, #1
  400b2c:	eba4 0462 	sub.w	r4, r4, r2, asr #1
  400b30:	b224      	sxth	r4, r4
  400b32:	464b      	mov	r3, r9
  400b34:	46a9      	mov	r9, r5
  400b36:	461d      	mov	r5, r3
  400b38:	e00c      	b.n	400b54 <gfx_draw_string_aligned+0x104>
			curr_line_x += bounding_x - curr_line_width;
  400b3a:	f8bd 4016 	ldrh.w	r4, [sp, #22]
  400b3e:	9a03      	ldr	r2, [sp, #12]
  400b40:	4414      	add	r4, r2
  400b42:	1ae4      	subs	r4, r4, r3
  400b44:	b224      	sxth	r4, r4
  400b46:	464b      	mov	r3, r9
  400b48:	46a9      	mov	r9, r5
  400b4a:	461d      	mov	r5, r3
  400b4c:	e002      	b.n	400b54 <gfx_draw_string_aligned+0x104>
		} while (*(++curr_line_text) != '\0');
  400b4e:	f816 3f01 	ldrb.w	r3, [r6, #1]!
  400b52:	b17b      	cbz	r3, 400b74 <gfx_draw_string_aligned+0x124>
			if (*curr_line_text == '\n') {
  400b54:	7830      	ldrb	r0, [r6, #0]
  400b56:	280a      	cmp	r0, #10
  400b58:	d00c      	beq.n	400b74 <gfx_draw_string_aligned+0x124>
			} else if (*curr_line_text != '\r') {
  400b5a:	280d      	cmp	r0, #13
  400b5c:	d0f7      	beq.n	400b4e <gfx_draw_string_aligned+0xfe>
				gfx_draw_char(*curr_line_text, curr_line_x, y,
  400b5e:	f8cd a004 	str.w	sl, [sp, #4]
  400b62:	9500      	str	r5, [sp, #0]
  400b64:	463b      	mov	r3, r7
  400b66:	4642      	mov	r2, r8
  400b68:	4621      	mov	r1, r4
  400b6a:	47d8      	blx	fp
				curr_line_x += font->width;
  400b6c:	7a3b      	ldrb	r3, [r7, #8]
  400b6e:	441c      	add	r4, r3
  400b70:	b224      	sxth	r4, r4
  400b72:	e7ec      	b.n	400b4e <gfx_draw_string_aligned+0xfe>
  400b74:	462b      	mov	r3, r5
  400b76:	464d      	mov	r5, r9
  400b78:	4699      	mov	r9, r3
		y += font->height + 1;
  400b7a:	7a7b      	ldrb	r3, [r7, #9]
  400b7c:	3301      	adds	r3, #1
  400b7e:	4498      	add	r8, r3
  400b80:	fa0f f888 	sxth.w	r8, r8
	while (*str != '\0') {
  400b84:	782b      	ldrb	r3, [r5, #0]
  400b86:	b11b      	cbz	r3, 400b90 <gfx_draw_string_aligned+0x140>
  400b88:	462e      	mov	r6, r5
  400b8a:	4635      	mov	r5, r6
  400b8c:	2300      	movs	r3, #0
  400b8e:	e7b8      	b.n	400b02 <gfx_draw_string_aligned+0xb2>
}
  400b90:	b007      	add	sp, #28
  400b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400b96:	bf00      	nop
  400b98:	00400a15 	.word	0x00400a15
  400b9c:	00400949 	.word	0x00400949

00400ba0 <lcd_init>:
#include "LCDLib.h"
#include "asf.h"

/*********************************** Public Functions Start ***********************************/
void lcd_init(void)
{
  400ba0:	b508      	push	{r3, lr}
	gfx_init();
  400ba2:	4b02      	ldr	r3, [pc, #8]	; (400bac <lcd_init+0xc>)
  400ba4:	4798      	blx	r3
	mxt_init();
  400ba6:	4b02      	ldr	r3, [pc, #8]	; (400bb0 <lcd_init+0x10>)
  400ba8:	4798      	blx	r3
  400baa:	bd08      	pop	{r3, pc}
  400bac:	00400891 	.word	0x00400891
  400bb0:	00400bb5 	.word	0x00400bb5

00400bb4 <mxt_init>:
	else 
		return false; 
}

void mxt_init(void)
{
  400bb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400bb8:	b09f      	sub	sp, #124	; 0x7c
	enum status_code status;

	/* T8 configuration object data */
	uint8_t t8_object[] = {
  400bba:	4c55      	ldr	r4, [pc, #340]	; (400d10 <mxt_init+0x15c>)
  400bbc:	ab1b      	add	r3, sp, #108	; 0x6c
  400bbe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  400bc2:	c303      	stmia	r3!, {r0, r1}
  400bc4:	801a      	strh	r2, [r3, #0]
		0x0d, 0x00, 0x05, 0x0a, 0x4b, 0x00, 0x00,
		0x00, 0x32, 0x19
	};

	/* T9 configuration object data */
	uint8_t t9_object[] = {
  400bc6:	ad12      	add	r5, sp, #72	; 0x48
  400bc8:	f104 060c 	add.w	r6, r4, #12
  400bcc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  400bce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  400bd0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  400bd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  400bd4:	6833      	ldr	r3, [r6, #0]
  400bd6:	602b      	str	r3, [r5, #0]
		0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x02,
		0x02
	};

	/* T46 configuration object data */
	uint8_t t46_object[] = {
  400bd8:	ab0f      	add	r3, sp, #60	; 0x3c
  400bda:	f104 0230 	add.w	r2, r4, #48	; 0x30
  400bde:	ca07      	ldmia	r2, {r0, r1, r2}
  400be0:	c303      	stmia	r3!, {r0, r1}
  400be2:	701a      	strb	r2, [r3, #0]
		0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x03,
		0x00, 0x00
	};
	
	/* T56 configuration object data */
	uint8_t t56_object[] = {
  400be4:	ad06      	add	r5, sp, #24
  400be6:	343c      	adds	r4, #60	; 0x3c
  400be8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  400bea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  400bec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  400bee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  400bf0:	6823      	ldr	r3, [r4, #0]
  400bf2:	702b      	strb	r3, [r5, #0]
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00
	};

	/* TWI configuration */
	twihs_master_options_t twi_opt = {
  400bf4:	2500      	movs	r5, #0
  400bf6:	9503      	str	r5, [sp, #12]
  400bf8:	9505      	str	r5, [sp, #20]
  400bfa:	4b46      	ldr	r3, [pc, #280]	; (400d14 <mxt_init+0x160>)
  400bfc:	9304      	str	r3, [sp, #16]
  400bfe:	274a      	movs	r7, #74	; 0x4a
  400c00:	f88d 7014 	strb.w	r7, [sp, #20]
		.speed = MXT_TWI_SPEED,
		.chip  = MAXTOUCH_TWI_ADDRESS,
	};
	
	/* Configure IRQ pin for MaxTouch */
	pio_configure(PIOD, PIO_INPUT, PIO_PD28, PIO_PULLUP);
  400c04:	2301      	movs	r3, #1
  400c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400c0a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400c0e:	4842      	ldr	r0, [pc, #264]	; (400d18 <mxt_init+0x164>)
  400c10:	4c42      	ldr	r4, [pc, #264]	; (400d1c <mxt_init+0x168>)
  400c12:	47a0      	blx	r4
typedef twihs_packet_t twihs_package_t;

static inline uint32_t twihs_master_setup(twihs_master_t p_twihs,
		twihs_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
  400c14:	4b42      	ldr	r3, [pc, #264]	; (400d20 <mxt_init+0x16c>)
  400c16:	9303      	str	r3, [sp, #12]
	p_opt->smbus      = 0;
  400c18:	f88d 5015 	strb.w	r5, [sp, #21]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400c1c:	2013      	movs	r0, #19
  400c1e:	4b41      	ldr	r3, [pc, #260]	; (400d24 <mxt_init+0x170>)
  400c20:	4798      	blx	r3
#endif		
	} else {
		// Do Nothing
	}
#endif
	return (twihs_master_init(p_twihs, p_opt));
  400c22:	4e41      	ldr	r6, [pc, #260]	; (400d28 <mxt_init+0x174>)
  400c24:	a903      	add	r1, sp, #12
  400c26:	4630      	mov	r0, r6
  400c28:	4b40      	ldr	r3, [pc, #256]	; (400d2c <mxt_init+0x178>)
  400c2a:	4798      	blx	r3

	status = (enum status_code)twihs_master_setup(MAXTOUCH_TWI_INTERFACE, &twi_opt);
	Assert(status == STATUS_OK);

	/* Initialize the maXTouch device */
	status = mxt_init_device(&device, MAXTOUCH_TWI_INTERFACE,
  400c2c:	4c40      	ldr	r4, [pc, #256]	; (400d30 <mxt_init+0x17c>)
  400c2e:	237c      	movs	r3, #124	; 0x7c
  400c30:	463a      	mov	r2, r7
  400c32:	4631      	mov	r1, r6
  400c34:	4620      	mov	r0, r4
  400c36:	4e3f      	ldr	r6, [pc, #252]	; (400d34 <mxt_init+0x180>)
  400c38:	47b0      	blx	r6
			MAXTOUCH_TWI_ADDRESS, MAXTOUCH_XPRO_CHG_PIO);
	Assert(status == STATUS_OK);

	/* Issue soft reset of maXTouch device by writing a non-zero value to
	 * the reset register */
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  400c3a:	462a      	mov	r2, r5
  400c3c:	2106      	movs	r1, #6
  400c3e:	4620      	mov	r0, r4
  400c40:	4e3d      	ldr	r6, [pc, #244]	; (400d38 <mxt_init+0x184>)
  400c42:	47b0      	blx	r6
  400c44:	2201      	movs	r2, #1
  400c46:	4601      	mov	r1, r0
  400c48:	4620      	mov	r0, r4
  400c4a:	4f3c      	ldr	r7, [pc, #240]	; (400d3c <mxt_init+0x188>)
  400c4c:	47b8      	blx	r7
			MXT_GEN_COMMANDPROCESSOR_T6, 0)
			+ MXT_GEN_COMMANDPROCESSOR_RESET, 0x01);

	/* Wait for the reset of the device to complete */
	delay_ms(MXT_RESET_TIME);
  400c4e:	483c      	ldr	r0, [pc, #240]	; (400d40 <mxt_init+0x18c>)
  400c50:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 400d4c <mxt_init+0x198>
  400c54:	47c8      	blx	r9

	// Write data to configuration registers in T7 configuration object 
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  400c56:	462a      	mov	r2, r5
  400c58:	2107      	movs	r1, #7
  400c5a:	4620      	mov	r0, r4
  400c5c:	47b0      	blx	r6
  400c5e:	2220      	movs	r2, #32
  400c60:	4601      	mov	r1, r0
  400c62:	4620      	mov	r0, r4
  400c64:	47b8      	blx	r7
			MXT_GEN_POWERCONFIG_T7, 0) + 0, 0x20);
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  400c66:	462a      	mov	r2, r5
  400c68:	2107      	movs	r1, #7
  400c6a:	4620      	mov	r0, r4
  400c6c:	47b0      	blx	r6
  400c6e:	1c41      	adds	r1, r0, #1
  400c70:	2210      	movs	r2, #16
  400c72:	b289      	uxth	r1, r1
  400c74:	4620      	mov	r0, r4
  400c76:	47b8      	blx	r7
			MXT_GEN_POWERCONFIG_T7, 0) + 1, 0x10);
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  400c78:	462a      	mov	r2, r5
  400c7a:	2107      	movs	r1, #7
  400c7c:	4620      	mov	r0, r4
  400c7e:	47b0      	blx	r6
  400c80:	1c81      	adds	r1, r0, #2
  400c82:	224b      	movs	r2, #75	; 0x4b
  400c84:	b289      	uxth	r1, r1
  400c86:	4620      	mov	r0, r4
  400c88:	47b8      	blx	r7
			MXT_GEN_POWERCONFIG_T7, 0) + 2, 0x4b);
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  400c8a:	462a      	mov	r2, r5
  400c8c:	2107      	movs	r1, #7
  400c8e:	4620      	mov	r0, r4
  400c90:	47b0      	blx	r6
  400c92:	1cc1      	adds	r1, r0, #3
  400c94:	2284      	movs	r2, #132	; 0x84
  400c96:	b289      	uxth	r1, r1
  400c98:	4620      	mov	r0, r4
  400c9a:	47b8      	blx	r7
			MXT_GEN_POWERCONFIG_T7, 0) + 3, 0x84);

	// Write predefined configuration data to configuration objects 
	mxt_write_config_object(&device, mxt_get_object_address(&device,
  400c9c:	462a      	mov	r2, r5
  400c9e:	2108      	movs	r1, #8
  400ca0:	4620      	mov	r0, r4
  400ca2:	47b0      	blx	r6
  400ca4:	aa1b      	add	r2, sp, #108	; 0x6c
  400ca6:	4601      	mov	r1, r0
  400ca8:	4620      	mov	r0, r4
  400caa:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 400d50 <mxt_init+0x19c>
  400cae:	47c0      	blx	r8
			MXT_GEN_ACQUISITIONCONFIG_T8, 0), &t8_object);
	mxt_write_config_object(&device, mxt_get_object_address(&device,
  400cb0:	462a      	mov	r2, r5
  400cb2:	2109      	movs	r1, #9
  400cb4:	4620      	mov	r0, r4
  400cb6:	47b0      	blx	r6
  400cb8:	aa12      	add	r2, sp, #72	; 0x48
  400cba:	4601      	mov	r1, r0
  400cbc:	4620      	mov	r0, r4
  400cbe:	47c0      	blx	r8
			MXT_TOUCH_MULTITOUCHSCREEN_T9, 0), &t9_object);
	mxt_write_config_object(&device, mxt_get_object_address(&device,
  400cc0:	462a      	mov	r2, r5
  400cc2:	212e      	movs	r1, #46	; 0x2e
  400cc4:	4620      	mov	r0, r4
  400cc6:	47b0      	blx	r6
  400cc8:	aa0f      	add	r2, sp, #60	; 0x3c
  400cca:	4601      	mov	r1, r0
  400ccc:	4620      	mov	r0, r4
  400cce:	47c0      	blx	r8
			MXT_SPT_CTE_CONFIGURATION_T46, 0), &t46_object);
	mxt_write_config_object(&device, mxt_get_object_address(&device,
  400cd0:	462a      	mov	r2, r5
  400cd2:	2138      	movs	r1, #56	; 0x38
  400cd4:	4620      	mov	r0, r4
  400cd6:	47b0      	blx	r6
  400cd8:	aa06      	add	r2, sp, #24
  400cda:	4601      	mov	r1, r0
  400cdc:	4620      	mov	r0, r4
  400cde:	47c0      	blx	r8
			MXT_PROCI_SHIELDLESS_T56, 0), &t56_object);

	// Issue recalibration command to maXTouch device by writing a non-zero
	 // value to the calibrate register 
	mxt_write_config_reg(&device, mxt_get_object_address(&device, MXT_GEN_COMMANDPROCESSOR_T6, 0) + MXT_GEN_COMMANDPROCESSOR_CALIBRATE, 0x01); 
  400ce0:	462a      	mov	r2, r5
  400ce2:	2106      	movs	r1, #6
  400ce4:	4620      	mov	r0, r4
  400ce6:	47b0      	blx	r6
  400ce8:	1c81      	adds	r1, r0, #2
  400cea:	2201      	movs	r2, #1
  400cec:	b289      	uxth	r1, r1
  400cee:	4620      	mov	r0, r4
  400cf0:	47b8      	blx	r7
	
	delay_ms(100); 
  400cf2:	4814      	ldr	r0, [pc, #80]	; (400d44 <mxt_init+0x190>)
  400cf4:	47c8      	blx	r9
  400cf6:	f44f 74af 	mov.w	r4, #350	; 0x15e
		mxt_read_message(data, &message);
  400cfa:	4e0d      	ldr	r6, [pc, #52]	; (400d30 <mxt_init+0x17c>)
  400cfc:	4d12      	ldr	r5, [pc, #72]	; (400d48 <mxt_init+0x194>)
  400cfe:	4669      	mov	r1, sp
  400d00:	4630      	mov	r0, r6
  400d02:	47a8      	blx	r5
	} while (--count);
  400d04:	3c01      	subs	r4, #1
  400d06:	d1fa      	bne.n	400cfe <mxt_init+0x14a>
	
	// Make chg pin high 
	mxt_make_highchg(&device);
}
  400d08:	b01f      	add	sp, #124	; 0x7c
  400d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400d0e:	bf00      	nop
  400d10:	00406e40 	.word	0x00406e40
  400d14:	00061a80 	.word	0x00061a80
  400d18:	400e1400 	.word	0x400e1400
  400d1c:	00402365 	.word	0x00402365
  400d20:	08f0d180 	.word	0x08f0d180
  400d24:	00402701 	.word	0x00402701
  400d28:	40018000 	.word	0x40018000
  400d2c:	00401d19 	.word	0x00401d19
  400d30:	20400a60 	.word	0x20400a60
  400d34:	00401155 	.word	0x00401155
  400d38:	004013ed 	.word	0x004013ed
  400d3c:	004014a5 	.word	0x004014a5
  400d40:	003228d8 	.word	0x003228d8
  400d44:	004d2b25 	.word	0x004d2b25
  400d48:	004014ed 	.word	0x004014ed
  400d4c:	20400001 	.word	0x20400001
  400d50:	0040142d 	.word	0x0040142d

00400d54 <get_midi_note>:
}
/**************************** Private Functions End *********************************/

/**************************** Public Functions Start *********************************/ 
void get_midi_note(int16_t *buffer, midi_note_t *note)
{
  400d54:	b510      	push	{r4, lr}
  400d56:	460c      	mov	r4, r1
	float32_t freq = Yin_getPitch(buffer); 
  400d58:	4b2c      	ldr	r3, [pc, #176]	; (400e0c <get_midi_note+0xb8>)
  400d5a:	4798      	blx	r3
  400d5c:	ee06 0a90 	vmov	s13, r0
	if (freq < 0)
  400d60:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400d68:	d448      	bmi.n	400dfc <get_midi_note+0xa8>
	float32_t temp_abs_diff = abs(frequency - midi_note_frequencies[i++]);   
  400d6a:	eddf 7a29 	vldr	s15, [pc, #164]	; 400e10 <get_midi_note+0xbc>
  400d6e:	ee76 7ae7 	vsub.f32	s15, s13, s15
  400d72:	eebd 7ae7 	vcvt.s32.f32	s14, s15
  400d76:	ee17 3a10 	vmov	r3, s14
  400d7a:	2b00      	cmp	r3, #0
  400d7c:	bfb8      	it	lt
  400d7e:	425b      	neglt	r3, r3
  400d80:	ee07 3a10 	vmov	s14, r3
  400d84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	float32_t abs_diff = abs(frequency - midi_note_frequencies[i++]); 
  400d88:	eddf 7a22 	vldr	s15, [pc, #136]	; 400e14 <get_midi_note+0xc0>
  400d8c:	ee76 7ae7 	vsub.f32	s15, s13, s15
  400d90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  400d94:	ee17 3a90 	vmov	r3, s15
  400d98:	2b00      	cmp	r3, #0
  400d9a:	bfb8      	it	lt
  400d9c:	425b      	neglt	r3, r3
  400d9e:	ee07 3a90 	vmov	s15, r3
  400da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	while (temp_abs_diff < abs_diff && i < 128)
  400da6:	eef4 7ac7 	vcmpe.f32	s15, s14
  400daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400dae:	dd2a      	ble.n	400e06 <get_midi_note+0xb2>
  400db0:	220e      	movs	r2, #14
		temp_abs_diff = abs(frequency - midi_note_frequencies[i++]);   
  400db2:	4919      	ldr	r1, [pc, #100]	; (400e18 <get_midi_note+0xc4>)
  400db4:	1c53      	adds	r3, r2, #1
  400db6:	b2db      	uxtb	r3, r3
  400db8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  400dbc:	edd2 7a00 	vldr	s15, [r2]
  400dc0:	ee76 7ae7 	vsub.f32	s15, s13, s15
  400dc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  400dc8:	ee17 2a90 	vmov	r2, s15
  400dcc:	2a00      	cmp	r2, #0
  400dce:	bfb8      	it	lt
  400dd0:	4252      	neglt	r2, r2
  400dd2:	ee07 2a90 	vmov	s15, r2
  400dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	while (temp_abs_diff < abs_diff && i < 128)
  400dda:	eef4 7ac7 	vcmpe.f32	s15, s14
  400dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400de2:	d505      	bpl.n	400df0 <get_midi_note+0x9c>
		temp_abs_diff = abs(frequency - midi_note_frequencies[i++]);   
  400de4:	461a      	mov	r2, r3
  400de6:	eeb0 7a67 	vmov.f32	s14, s15
	while (temp_abs_diff < abs_diff && i < 128)
  400dea:	f013 0f80 	tst.w	r3, #128	; 0x80
  400dee:	d0e1      	beq.n	400db4 <get_midi_note+0x60>
	return (i-2); 
  400df0:	3b02      	subs	r3, #2
	{
		note->note_number = -1; 
		note->velocity = -1; 
		return; 
	}
	note->note_number = get_midi_number(freq); 
  400df2:	b2db      	uxtb	r3, r3
  400df4:	8023      	strh	r3, [r4, #0]
	note->velocity = get_midi_velocity(buffer); 
  400df6:	2340      	movs	r3, #64	; 0x40
  400df8:	8063      	strh	r3, [r4, #2]
  400dfa:	bd10      	pop	{r4, pc}
		note->note_number = -1; 
  400dfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
  400e00:	8023      	strh	r3, [r4, #0]
		note->velocity = -1; 
  400e02:	8063      	strh	r3, [r4, #2]
		return; 
  400e04:	bd10      	pop	{r4, pc}
	float32_t temp_abs_diff = abs(frequency - midi_note_frequencies[i++]);   
  400e06:	230e      	movs	r3, #14
  400e08:	e7f2      	b.n	400df0 <get_midi_note+0x9c>
  400e0a:	bf00      	nop
  400e0c:	00400e79 	.word	0x00400e79
  400e10:	418a978d 	.word	0x418a978d
  400e14:	4182d0e5 	.word	0x4182d0e5
  400e18:	00406ea8 	.word	0x00406ea8

00400e1c <get_midi_note_name>:
}

void get_midi_note_name(char *note_name, int16_t note_number)
{
  400e1c:	b508      	push	{r3, lr}
  400e1e:	4603      	mov	r3, r0
	if (note_number == -1)
  400e20:	f1b1 3fff 	cmp.w	r1, #4294967295
  400e24:	d006      	beq.n	400e34 <get_midi_note_name+0x18>
	{
		strcpy(note_name, "No note");
		return;
	}
	strcpy(note_name, &midi_note_names[note_number][0]);
  400e26:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  400e2a:	4b05      	ldr	r3, [pc, #20]	; (400e40 <get_midi_note_name+0x24>)
  400e2c:	4419      	add	r1, r3
  400e2e:	4b05      	ldr	r3, [pc, #20]	; (400e44 <get_midi_note_name+0x28>)
  400e30:	4798      	blx	r3
  400e32:	bd08      	pop	{r3, pc}
		strcpy(note_name, "No note");
  400e34:	4a04      	ldr	r2, [pc, #16]	; (400e48 <get_midi_note_name+0x2c>)
  400e36:	ca03      	ldmia	r2!, {r0, r1}
  400e38:	6018      	str	r0, [r3, #0]
  400e3a:	6059      	str	r1, [r3, #4]
		return;
  400e3c:	bd08      	pop	{r3, pc}
  400e3e:	bf00      	nop
  400e40:	004070a8 	.word	0x004070a8
  400e44:	00403a65 	.word	0x00403a65
  400e48:	00406ea0 	.word	0x00406ea0

00400e4c <Yin_init>:
/**
 * Initialise the Yin pitch detection object
 * @param bufferSize Length of the audio buffer to analyse
 * @param threshold  Allowed uncertainty (e.g 0.05 will return a pitch with ~95% probability)
 */
void Yin_init(int16_t bufferSize, float32_t threshold){
  400e4c:	b510      	push	{r4, lr}
	/* Initialise the fields of the Yin structure passed in */
	yin.bufferSize = bufferSize;
  400e4e:	4b08      	ldr	r3, [pc, #32]	; (400e70 <Yin_init+0x24>)
  400e50:	8018      	strh	r0, [r3, #0]
	yin.halfBufferSize = bufferSize / 2;
  400e52:	4603      	mov	r3, r0
  400e54:	2800      	cmp	r0, #0
  400e56:	bfb8      	it	lt
  400e58:	1c43      	addlt	r3, r0, #1
  400e5a:	1058      	asrs	r0, r3, #1
  400e5c:	4c04      	ldr	r4, [pc, #16]	; (400e70 <Yin_init+0x24>)
  400e5e:	8060      	strh	r0, [r4, #2]
	yin.probability = 0.0;
  400e60:	2300      	movs	r3, #0
  400e62:	60a3      	str	r3, [r4, #8]
	yin.threshold = threshold;
  400e64:	60e1      	str	r1, [r4, #12]
	
	/* Allocate the autocorellation buffer */
	yin.yinBuffer = (float32_t *) malloc(sizeof(float32_t)* yin.halfBufferSize);
  400e66:	0080      	lsls	r0, r0, #2
  400e68:	4b02      	ldr	r3, [pc, #8]	; (400e74 <Yin_init+0x28>)
  400e6a:	4798      	blx	r3
  400e6c:	6060      	str	r0, [r4, #4]
  400e6e:	bd10      	pop	{r4, pc}
  400e70:	20400a80 	.word	0x20400a80
  400e74:	0040341d 	.word	0x0040341d

00400e78 <Yin_getPitch>:
/**
 * Runs the Yin pitch detection algortihm
 * @param  buffer Buffer of samples to analyse
 * @return        Fundamental frequency of the signal in Hz. Returns -1 if pitch can't be found
 */
float32_t Yin_getPitch(int16_t* buffer){
  400e78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400e7c:	ed2d 8b04 	vpush	{d8-d9}
	for(tau = 0 ; tau < yin.halfBufferSize; tau++)
  400e80:	4bac      	ldr	r3, [pc, #688]	; (401134 <Yin_getPitch+0x2bc>)
  400e82:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
  400e86:	f1be 0f00 	cmp.w	lr, #0
  400e8a:	dd38      	ble.n	400efe <Yin_getPitch+0x86>
  400e8c:	f1a0 0c02 	sub.w	ip, r0, #2
  400e90:	685f      	ldr	r7, [r3, #4]
  400e92:	fa1f f38e 	uxth.w	r3, lr
  400e96:	f103 38ff 	add.w	r8, r3, #4294967295
  400e9a:	fa1f f888 	uxth.w	r8, r8
  400e9e:	eb00 0848 	add.w	r8, r0, r8, lsl #1
  400ea2:	1e9e      	subs	r6, r3, #2
  400ea4:	b2b6      	uxth	r6, r6
  400ea6:	3601      	adds	r6, #1
  400ea8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
		delta = buffer[0] - buffer[tau];
  400eac:	f9b0 3000 	ldrsh.w	r3, [r0]
  400eb0:	f93c 2f02 	ldrsh.w	r2, [ip, #2]!
  400eb4:	1a9b      	subs	r3, r3, r2
  400eb6:	ee07 3a90 	vmov	s15, r3
  400eba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400ebe:	4639      	mov	r1, r7
		yin.yinBuffer[tau] = delta*delta; 
  400ec0:	ee67 7aa7 	vmul.f32	s15, s15, s15
  400ec4:	edc7 7a00 	vstr	s15, [r7]
		for(i = 1; i < yin.halfBufferSize; i++)
  400ec8:	f1be 0f01 	cmp.w	lr, #1
  400ecc:	dd14      	ble.n	400ef8 <Yin_getPitch+0x80>
  400ece:	4602      	mov	r2, r0
  400ed0:	4664      	mov	r4, ip
			delta = buffer[i] - buffer[i + tau];
  400ed2:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
  400ed6:	f934 5f02 	ldrsh.w	r5, [r4, #2]!
  400eda:	1b5b      	subs	r3, r3, r5
  400edc:	ee07 3a90 	vmov	s15, r3
  400ee0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			yin.yinBuffer[tau] += delta * delta;
  400ee4:	ee67 7aa7 	vmul.f32	s15, s15, s15
  400ee8:	ed91 7a00 	vldr	s14, [r1]
  400eec:	ee77 7a27 	vadd.f32	s15, s14, s15
  400ef0:	edc1 7a00 	vstr	s15, [r1]
		for(i = 1; i < yin.halfBufferSize; i++)
  400ef4:	42b2      	cmp	r2, r6
  400ef6:	d1ec      	bne.n	400ed2 <Yin_getPitch+0x5a>
  400ef8:	3704      	adds	r7, #4
	for(tau = 0 ; tau < yin.halfBufferSize; tau++)
  400efa:	45c4      	cmp	ip, r8
  400efc:	d1d6      	bne.n	400eac <Yin_getPitch+0x34>
	yin.yinBuffer[0] = 1;
  400efe:	4b8d      	ldr	r3, [pc, #564]	; (401134 <Yin_getPitch+0x2bc>)
  400f00:	6859      	ldr	r1, [r3, #4]
  400f02:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
  400f06:	600b      	str	r3, [r1, #0]
	for (tau = 1; tau < yin.halfBufferSize; tau++) {
  400f08:	f1be 0f01 	cmp.w	lr, #1
  400f0c:	dd15      	ble.n	400f3a <Yin_getPitch+0xc2>
  400f0e:	1d0a      	adds	r2, r1, #4
  400f10:	ed9f 7a89 	vldr	s14, [pc, #548]	; 401138 <Yin_getPitch+0x2c0>
  400f14:	2301      	movs	r3, #1
		runningSum += yin.yinBuffer[tau];
  400f16:	edd2 6a00 	vldr	s13, [r2]
  400f1a:	ee37 7a26 	vadd.f32	s14, s14, s13
		yin.yinBuffer[tau] *= tau / runningSum;
  400f1e:	ee07 3a90 	vmov	s15, r3
  400f22:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
  400f26:	eec6 7a07 	vdiv.f32	s15, s12, s14
  400f2a:	ee67 7aa6 	vmul.f32	s15, s15, s13
  400f2e:	ece2 7a01 	vstmia	r2!, {s15}
  400f32:	3301      	adds	r3, #1
  400f34:	b21b      	sxth	r3, r3
	for (tau = 1; tau < yin.halfBufferSize; tau++) {
  400f36:	4573      	cmp	r3, lr
  400f38:	d1ed      	bne.n	400f16 <Yin_getPitch+0x9e>
	for (tau = 2; tau < yin.halfBufferSize ; tau++) {
  400f3a:	f1be 0f02 	cmp.w	lr, #2
  400f3e:	f340 80b7 	ble.w	4010b0 <Yin_getPitch+0x238>
		if (yin.yinBuffer[tau] < yin.threshold) {
  400f42:	4b7c      	ldr	r3, [pc, #496]	; (401134 <Yin_getPitch+0x2bc>)
  400f44:	ed93 7a03 	vldr	s14, [r3, #12]
  400f48:	edd1 7a02 	vldr	s15, [r1, #8]
  400f4c:	eef4 7ac7 	vcmpe.f32	s15, s14
  400f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400f54:	f100 80aa 	bmi.w	4010ac <Yin_getPitch+0x234>
  400f58:	f101 030c 	add.w	r3, r1, #12
  400f5c:	2402      	movs	r4, #2
  400f5e:	3401      	adds	r4, #1
  400f60:	b224      	sxth	r4, r4
	for (tau = 2; tau < yin.halfBufferSize ; tau++) {
  400f62:	4574      	cmp	r4, lr
  400f64:	f000 80a6 	beq.w	4010b4 <Yin_getPitch+0x23c>
		if (yin.yinBuffer[tau] < yin.threshold) {
  400f68:	ecf3 7a01 	vldmia	r3!, {s15}
  400f6c:	eef4 7ac7 	vcmpe.f32	s15, s14
  400f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400f74:	d5f3      	bpl.n	400f5e <Yin_getPitch+0xe6>
			while (tau + 1 < yin.halfBufferSize && yin.yinBuffer[tau + 1] < yin.yinBuffer[tau]) {
  400f76:	4672      	mov	r2, lr
  400f78:	1c63      	adds	r3, r4, #1
  400f7a:	4573      	cmp	r3, lr
  400f7c:	da1a      	bge.n	400fb4 <Yin_getPitch+0x13c>
  400f7e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  400f82:	ed13 7a01 	vldr	s14, [r3, #-4]
  400f86:	edd3 7a00 	vldr	s15, [r3]
  400f8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
  400f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400f92:	dd0f      	ble.n	400fb4 <Yin_getPitch+0x13c>
  400f94:	3401      	adds	r4, #1
  400f96:	b224      	sxth	r4, r4
  400f98:	1c63      	adds	r3, r4, #1
  400f9a:	4293      	cmp	r3, r2
  400f9c:	da0a      	bge.n	400fb4 <Yin_getPitch+0x13c>
  400f9e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  400fa2:	ed93 7a00 	vldr	s14, [r3]
  400fa6:	ed53 7a01 	vldr	s15, [r3, #-4]
  400faa:	eeb4 7ae7 	vcmpe.f32	s14, s15
  400fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400fb2:	d4ef      	bmi.n	400f94 <Yin_getPitch+0x11c>
			yin.probability = 1 - yin.yinBuffer[tau];
  400fb4:	eb01 0384 	add.w	r3, r1, r4, lsl #2
  400fb8:	ed93 7a00 	vldr	s14, [r3]
  400fbc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  400fc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
  400fc4:	4b5b      	ldr	r3, [pc, #364]	; (401134 <Yin_getPitch+0x2bc>)
  400fc6:	edc3 7a02 	vstr	s15, [r3, #8]
	if (tau == yin.halfBufferSize || yin.yinBuffer[tau] >= yin.threshold) {
  400fca:	4574      	cmp	r4, lr
  400fcc:	d072      	beq.n	4010b4 <Yin_getPitch+0x23c>
  400fce:	eb01 0384 	add.w	r3, r1, r4, lsl #2
  400fd2:	ed93 8a00 	vldr	s16, [r3]
  400fd6:	4b57      	ldr	r3, [pc, #348]	; (401134 <Yin_getPitch+0x2bc>)
  400fd8:	edd3 7a03 	vldr	s15, [r3, #12]
  400fdc:	eeb4 8ae7 	vcmpe.f32	s16, s15
  400fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400fe4:	da66      	bge.n	4010b4 <Yin_getPitch+0x23c>
	
	/* Step 3: Search through the normalised cumulative mean array and find values that are over the threshold */
	tauEstimate = Yin_absoluteThreshold();
	
	/* Step 5: Interpolate the shift value (tau) to improve the pitch estimate. */
	if(tauEstimate != -1){
  400fe6:	f1b4 3fff 	cmp.w	r4, #4294967295
  400fea:	f000 8081 	beq.w	4010f0 <Yin_getPitch+0x278>
	if (tauEstimate < 1) {
  400fee:	2c00      	cmp	r4, #0
  400ff0:	f340 8084 	ble.w	4010fc <Yin_getPitch+0x284>
		x0 = tauEstimate - 1;
  400ff4:	1e63      	subs	r3, r4, #1
  400ff6:	b21b      	sxth	r3, r3
	if (tauEstimate + 1 < yin.halfBufferSize) {
  400ff8:	1c62      	adds	r2, r4, #1
  400ffa:	4572      	cmp	r2, lr
  400ffc:	f280 8082 	bge.w	401104 <Yin_getPitch+0x28c>
		x2 = tauEstimate + 1;
  401000:	b212      	sxth	r2, r2
	if (x0 == tauEstimate) {
  401002:	429c      	cmp	r4, r3
  401004:	d05c      	beq.n	4010c0 <Yin_getPitch+0x248>
	else if (x2 == tauEstimate) {
  401006:	4294      	cmp	r4, r2
  401008:	d05d      	beq.n	4010c6 <Yin_getPitch+0x24e>
		s0 = yin.yinBuffer[x0];
  40100a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  40100e:	edd3 8a00 	vldr	s17, [r3]
		s2 = yin.yinBuffer[x2];
  401012:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  401016:	ed92 9a00 	vldr	s18, [r2]
		betterTau = (float32_t)(tauEstimate) + (s2 - s0) / (2.0 * (2.0 * s1 - s2 - s0));
  40101a:	4d48      	ldr	r5, [pc, #288]	; (40113c <Yin_getPitch+0x2c4>)
  40101c:	ee79 7a68 	vsub.f32	s15, s18, s17
  401020:	ee17 0a90 	vmov	r0, s15
  401024:	47a8      	blx	r5
  401026:	4682      	mov	sl, r0
  401028:	468b      	mov	fp, r1
  40102a:	ee18 0a10 	vmov	r0, s16
  40102e:	47a8      	blx	r5
  401030:	4e43      	ldr	r6, [pc, #268]	; (401140 <Yin_getPitch+0x2c8>)
  401032:	4602      	mov	r2, r0
  401034:	460b      	mov	r3, r1
  401036:	47b0      	blx	r6
  401038:	4680      	mov	r8, r0
  40103a:	4689      	mov	r9, r1
  40103c:	ee19 0a10 	vmov	r0, s18
  401040:	47a8      	blx	r5
  401042:	4f40      	ldr	r7, [pc, #256]	; (401144 <Yin_getPitch+0x2cc>)
  401044:	4602      	mov	r2, r0
  401046:	460b      	mov	r3, r1
  401048:	4640      	mov	r0, r8
  40104a:	4649      	mov	r1, r9
  40104c:	47b8      	blx	r7
  40104e:	4680      	mov	r8, r0
  401050:	4689      	mov	r9, r1
  401052:	ee18 0a90 	vmov	r0, s17
  401056:	47a8      	blx	r5
  401058:	4602      	mov	r2, r0
  40105a:	460b      	mov	r3, r1
  40105c:	4640      	mov	r0, r8
  40105e:	4649      	mov	r1, r9
  401060:	47b8      	blx	r7
  401062:	4602      	mov	r2, r0
  401064:	460b      	mov	r3, r1
  401066:	47b0      	blx	r6
  401068:	4602      	mov	r2, r0
  40106a:	460b      	mov	r3, r1
  40106c:	4650      	mov	r0, sl
  40106e:	4659      	mov	r1, fp
  401070:	4f35      	ldr	r7, [pc, #212]	; (401148 <Yin_getPitch+0x2d0>)
  401072:	47b8      	blx	r7
  401074:	4680      	mov	r8, r0
  401076:	4689      	mov	r9, r1
  401078:	ee07 4a90 	vmov	s15, r4
  40107c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  401080:	ee17 0a90 	vmov	r0, s15
  401084:	47a8      	blx	r5
  401086:	4602      	mov	r2, r0
  401088:	460b      	mov	r3, r1
  40108a:	4640      	mov	r0, r8
  40108c:	4649      	mov	r1, r9
  40108e:	47b0      	blx	r6
  401090:	4b2e      	ldr	r3, [pc, #184]	; (40114c <Yin_getPitch+0x2d4>)
  401092:	4798      	blx	r3
  401094:	ee07 0a90 	vmov	s15, r0
		pitchInHertz = YIN_SAMPLING_RATE / Yin_parabolicInterpolation(tauEstimate);
  401098:	eddf 6a2d 	vldr	s13, [pc, #180]	; 401150 <Yin_getPitch+0x2d8>
  40109c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	}
	return pitchInHertz;
}
  4010a0:	ee17 0a10 	vmov	r0, s14
  4010a4:	ecbd 8b04 	vpop	{d8-d9}
  4010a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (yin.yinBuffer[tau] < yin.threshold) {
  4010ac:	2402      	movs	r4, #2
  4010ae:	e762      	b.n	400f76 <Yin_getPitch+0xfe>
	for (tau = 2; tau < yin.halfBufferSize ; tau++) {
  4010b0:	2402      	movs	r4, #2
  4010b2:	e78a      	b.n	400fca <Yin_getPitch+0x152>
		yin.probability = 0;
  4010b4:	2200      	movs	r2, #0
  4010b6:	4b1f      	ldr	r3, [pc, #124]	; (401134 <Yin_getPitch+0x2bc>)
  4010b8:	609a      	str	r2, [r3, #8]
	float32_t pitchInHertz = -1;
  4010ba:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  4010be:	e7ef      	b.n	4010a0 <Yin_getPitch+0x228>
		x0 = tauEstimate - 1;
  4010c0:	461c      	mov	r4, r3
		x2 = tauEstimate + 1;
  4010c2:	4613      	mov	r3, r2
  4010c4:	e021      	b.n	40110a <Yin_getPitch+0x292>
  4010c6:	4614      	mov	r4, r2
		if (yin.yinBuffer[tauEstimate] <= yin.yinBuffer[x0]) {
  4010c8:	eb01 0284 	add.w	r2, r1, r4, lsl #2
  4010cc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  4010d0:	ed92 7a00 	vldr	s14, [r2]
  4010d4:	edd1 7a00 	vldr	s15, [r1]
  4010d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
  4010dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			betterTau = (float32_t)tauEstimate;
  4010e0:	bf94      	ite	ls
  4010e2:	ee07 4a90 	vmovls	s15, r4
			betterTau = (float32_t)x0;
  4010e6:	ee07 3a90 	vmovhi	s15, r3
  4010ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4010ee:	e7d3      	b.n	401098 <Yin_getPitch+0x220>
	float32_t pitchInHertz = -1;
  4010f0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
	return pitchInHertz;
  4010f4:	e7d4      	b.n	4010a0 <Yin_getPitch+0x228>
		x2 = tauEstimate + 1;
  4010f6:	1c63      	adds	r3, r4, #1
  4010f8:	b21b      	sxth	r3, r3
  4010fa:	e006      	b.n	40110a <Yin_getPitch+0x292>
	if (tauEstimate + 1 < yin.halfBufferSize) {
  4010fc:	1c63      	adds	r3, r4, #1
  4010fe:	459e      	cmp	lr, r3
  401100:	dcf9      	bgt.n	4010f6 <Yin_getPitch+0x27e>
  401102:	4623      	mov	r3, r4
	if (x0 == tauEstimate) {
  401104:	429c      	cmp	r4, r3
  401106:	d1df      	bne.n	4010c8 <Yin_getPitch+0x250>
  401108:	461c      	mov	r4, r3
		if (yin.yinBuffer[tauEstimate] <= yin.yinBuffer[x2]) {
  40110a:	eb01 0284 	add.w	r2, r1, r4, lsl #2
  40110e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  401112:	ed92 7a00 	vldr	s14, [r2]
  401116:	edd1 7a00 	vldr	s15, [r1]
  40111a:	eeb4 7ae7 	vcmpe.f32	s14, s15
  40111e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			betterTau = (float32_t)tauEstimate;
  401122:	bf94      	ite	ls
  401124:	ee07 4a90 	vmovls	s15, r4
			betterTau = (float32_t)x2;
  401128:	ee07 3a90 	vmovhi	s15, r3
  40112c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  401130:	e7b2      	b.n	401098 <Yin_getPitch+0x220>
  401132:	bf00      	nop
  401134:	20400a80 	.word	0x20400a80
  401138:	00000000 	.word	0x00000000
  40113c:	00402e39 	.word	0x00402e39
  401140:	00402b7d 	.word	0x00402b7d
  401144:	00402b79 	.word	0x00402b79
  401148:	00403135 	.word	0x00403135
  40114c:	00403305 	.word	0x00403305
  401150:	46b5a400 	.word	0x46b5a400

00401154 <mxt_init_device>:
 * \param chgpin IOPORT pin instance attached to the maXTouch device's /CHG pin
 * \return Operation result status code
 */
status_code_t mxt_init_device(struct mxt_device *device,
		twihs_master_t interface, uint8_t chip_adr, uint32_t chgpin)
{
  401154:	b5f0      	push	{r4, r5, r6, r7, lr}
  401156:	b087      	sub	sp, #28
  401158:	4604      	mov	r4, r0
  40115a:	460e      	mov	r6, r1
  40115c:	4617      	mov	r7, r2
	int8_t status;

	/* Set TWI interface, TWI address and CHG-pin of the maXTouch device. */
	device->interface = interface;
  40115e:	6081      	str	r1, [r0, #8]
	device->mxt_chip_adr = chip_adr;
  401160:	7302      	strb	r2, [r0, #12]
	device->chgpin = chgpin;
  401162:	6183      	str	r3, [r0, #24]
	device->handler = NULL;
  401164:	2500      	movs	r5, #0
  401166:	6105      	str	r5, [r0, #16]
			malloc(sizeof(struct mxt_info_object));
  401168:	2007      	movs	r0, #7
  40116a:	4b9d      	ldr	r3, [pc, #628]	; (4013e0 <mxt_init_device+0x28c>)
  40116c:	4798      	blx	r3
	device->info_object = (struct mxt_info_object *)
  40116e:	6020      	str	r0, [r4, #0]
	twihs_package_t packet = {
  401170:	9501      	str	r5, [sp, #4]
  401172:	9505      	str	r5, [sp, #20]
  401174:	2302      	movs	r3, #2
  401176:	9302      	str	r3, [sp, #8]
  401178:	9003      	str	r0, [sp, #12]
  40117a:	2307      	movs	r3, #7
  40117c:	9304      	str	r3, [sp, #16]
  40117e:	f88d 7014 	strb.w	r7, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  401182:	a901      	add	r1, sp, #4
  401184:	4630      	mov	r0, r6
  401186:	4b97      	ldr	r3, [pc, #604]	; (4013e4 <mxt_init_device+0x290>)
  401188:	4798      	blx	r3
  40118a:	1b40      	subs	r0, r0, r5
  40118c:	bf18      	it	ne
  40118e:	2001      	movne	r0, #1
  401190:	4240      	negs	r0, r0
	if ((status = mxt_read_id_block(device)) != STATUS_OK) {
  401192:	b108      	cbz	r0, 401198 <mxt_init_device+0x44>
	}

	device->multitouch_report_offset = status;

	return STATUS_OK;
}
  401194:	b007      	add	sp, #28
  401196:	bdf0      	pop	{r4, r5, r6, r7, pc}
			malloc(device->info_object->obj_count *
  401198:	6825      	ldr	r5, [r4, #0]
  40119a:	79a8      	ldrb	r0, [r5, #6]
  40119c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4011a0:	0040      	lsls	r0, r0, #1
  4011a2:	4b8f      	ldr	r3, [pc, #572]	; (4013e0 <mxt_init_device+0x28c>)
  4011a4:	4798      	blx	r3
	device->object_list = (struct mxt_object *)
  4011a6:	6060      	str	r0, [r4, #4]
	twihs_package_t packet = {
  4011a8:	2300      	movs	r3, #0
  4011aa:	9301      	str	r3, [sp, #4]
  4011ac:	9304      	str	r3, [sp, #16]
  4011ae:	9305      	str	r3, [sp, #20]
  4011b0:	2307      	movs	r3, #7
  4011b2:	f88d 3004 	strb.w	r3, [sp, #4]
  4011b6:	2302      	movs	r3, #2
  4011b8:	9302      	str	r3, [sp, #8]
  4011ba:	9003      	str	r0, [sp, #12]
		.length       = device->info_object->obj_count *
  4011bc:	79ab      	ldrb	r3, [r5, #6]
  4011be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4011c2:	005b      	lsls	r3, r3, #1
	twihs_package_t packet = {
  4011c4:	9304      	str	r3, [sp, #16]
  4011c6:	7b23      	ldrb	r3, [r4, #12]
  4011c8:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4011cc:	a901      	add	r1, sp, #4
  4011ce:	68a0      	ldr	r0, [r4, #8]
  4011d0:	4b84      	ldr	r3, [pc, #528]	; (4013e4 <mxt_init_device+0x290>)
  4011d2:	4798      	blx	r3
  4011d4:	3000      	adds	r0, #0
  4011d6:	bf18      	it	ne
  4011d8:	2001      	movne	r0, #1
  4011da:	4240      	negs	r0, r0
	if (status != STATUS_OK) {
  4011dc:	2800      	cmp	r0, #0
  4011de:	d1d9      	bne.n	401194 <mxt_init_device+0x40>
	uint8_t *id_pointer = (uint8_t *)device->info_object;
  4011e0:	6827      	ldr	r7, [r4, #0]
	uint8_t *objects_pointer = (uint8_t *)device->object_list;
  4011e2:	6860      	ldr	r0, [r4, #4]
			(device->info_object->obj_count *
  4011e4:	79bb      	ldrb	r3, [r7, #6]
  4011e6:	eb03 0643 	add.w	r6, r3, r3, lsl #1
  4011ea:	0076      	lsls	r6, r6, #1
	crc_area_size = MXT_ID_BLOCK_SIZE +
  4011ec:	3607      	adds	r6, #7
  4011ee:	b2b6      	uxth	r6, r6
  4011f0:	463a      	mov	r2, r7
  4011f2:	3706      	adds	r7, #6
	uint32_t crc_tmp = 0;
  4011f4:	2100      	movs	r1, #0
		result ^= crcpoly;
  4011f6:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 4013e8 <mxt_init_device+0x294>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  4011fa:	f892 e001 	ldrb.w	lr, [r2, #1]
  4011fe:	7815      	ldrb	r5, [r2, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  401200:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
  401204:	ea85 0141 	eor.w	r1, r5, r1, lsl #1
	if (result & 0x1000000) {
  401208:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
		result ^= crcpoly;
  40120c:	bf18      	it	ne
  40120e:	ea81 010c 	eorne.w	r1, r1, ip
  401212:	3202      	adds	r2, #2
	for (i = 0; i < MXT_ID_BLOCK_SIZE - 1; i += 2) {
  401214:	42ba      	cmp	r2, r7
  401216:	d1f0      	bne.n	4011fa <mxt_init_device+0xa6>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  401218:	7802      	ldrb	r2, [r0, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  40121a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40121e:	ea83 0241 	eor.w	r2, r3, r1, lsl #1
	if (result & 0x1000000) {
  401222:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  401226:	d003      	beq.n	401230 <mxt_init_device+0xdc>
		result ^= crcpoly;
  401228:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  40122c:	f082 021b 	eor.w	r2, r2, #27
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  401230:	f1a6 0708 	sub.w	r7, r6, #8
  401234:	2f01      	cmp	r7, #1
  401236:	dd12      	ble.n	40125e <mxt_init_device+0x10a>
  401238:	2301      	movs	r3, #1
		result ^= crcpoly;
  40123a:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 4013e8 <mxt_init_device+0x294>
		crc_tmp = mxt_crc_24(crc_tmp, objects_pointer[i],
  40123e:	18c1      	adds	r1, r0, r3
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  401240:	784d      	ldrb	r5, [r1, #1]
  401242:	5cc1      	ldrb	r1, [r0, r3]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  401244:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  401248:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
	if (result & 0x1000000) {
  40124c:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		result ^= crcpoly;
  401250:	bf18      	it	ne
  401252:	ea82 020e 	eorne.w	r2, r2, lr
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  401256:	3302      	adds	r3, #2
  401258:	b29b      	uxth	r3, r3
  40125a:	42bb      	cmp	r3, r7
  40125c:	dbef      	blt.n	40123e <mxt_init_device+0xea>
	crc_tmp = mxt_crc_24(crc_tmp,
  40125e:	4430      	add	r0, r6
	result = ((crc << 1u) ^ (uint32_t)data_word);
  401260:	f810 3c08 	ldrb.w	r3, [r0, #-8]
  401264:	ea83 0242 	eor.w	r2, r3, r2, lsl #1
	if (result & 0x1000000) {
  401268:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  40126c:	d003      	beq.n	401276 <mxt_init_device+0x122>
		result ^= crcpoly;
  40126e:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  401272:	f082 021b 	eor.w	r2, r2, #27
	*crc = (crc_tmp & 0x00FFFFFF);
  401276:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	twihs_package_t packet = {
  40127a:	2300      	movs	r3, #0
  40127c:	9301      	str	r3, [sp, #4]
  40127e:	9305      	str	r3, [sp, #20]
  401280:	f88d 6004 	strb.w	r6, [sp, #4]
  401284:	0a36      	lsrs	r6, r6, #8
  401286:	f88d 6005 	strb.w	r6, [sp, #5]
  40128a:	2302      	movs	r3, #2
  40128c:	9302      	str	r3, [sp, #8]
  40128e:	f8cd d00c 	str.w	sp, [sp, #12]
  401292:	2303      	movs	r3, #3
  401294:	9304      	str	r3, [sp, #16]
  401296:	7b23      	ldrb	r3, [r4, #12]
  401298:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  40129c:	a901      	add	r1, sp, #4
  40129e:	68a0      	ldr	r0, [r4, #8]
  4012a0:	4b50      	ldr	r3, [pc, #320]	; (4013e4 <mxt_init_device+0x290>)
  4012a2:	4798      	blx	r3
  4012a4:	b328      	cbz	r0, 4012f2 <mxt_init_device+0x19e>
		return ERR_IO_ERROR;
  4012a6:	f04f 33ff 	mov.w	r3, #4294967295
	if (crc_calculated != crc_read) {
  4012aa:	42ab      	cmp	r3, r5
  4012ac:	f040 808b 	bne.w	4013c6 <mxt_init_device+0x272>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4012b0:	6825      	ldr	r5, [r4, #0]
  4012b2:	79a8      	ldrb	r0, [r5, #6]
  4012b4:	b198      	cbz	r0, 4012de <mxt_init_device+0x18a>
  4012b6:	2300      	movs	r3, #0
  4012b8:	3301      	adds	r3, #1
  4012ba:	b2da      	uxtb	r2, r3
  4012bc:	4290      	cmp	r0, r2
  4012be:	d8fb      	bhi.n	4012b8 <mxt_init_device+0x164>
		tot_report_ids += (device->object_list[i].num_report_ids);
  4012c0:	6862      	ldr	r2, [r4, #4]
  4012c2:	1e43      	subs	r3, r0, #1
  4012c4:	b2db      	uxtb	r3, r3
  4012c6:	3301      	adds	r3, #1
  4012c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4012cc:	eb02 0143 	add.w	r1, r2, r3, lsl #1
  4012d0:	2000      	movs	r0, #0
  4012d2:	7953      	ldrb	r3, [r2, #5]
  4012d4:	4418      	add	r0, r3
  4012d6:	b2c0      	uxtb	r0, r0
  4012d8:	3206      	adds	r2, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4012da:	4291      	cmp	r1, r2
  4012dc:	d1f9      	bne.n	4012d2 <mxt_init_device+0x17e>
			malloc(sizeof(struct mxt_report_id_map) *
  4012de:	0040      	lsls	r0, r0, #1
  4012e0:	4b3f      	ldr	r3, [pc, #252]	; (4013e0 <mxt_init_device+0x28c>)
  4012e2:	4798      	blx	r3
	device->report_id_map = (struct mxt_report_id_map *)
  4012e4:	6160      	str	r0, [r4, #20]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4012e6:	79ab      	ldrb	r3, [r5, #6]
  4012e8:	b173      	cbz	r3, 401308 <mxt_init_device+0x1b4>
  4012ea:	2700      	movs	r7, #0
  4012ec:	2601      	movs	r6, #1
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  4012ee:	46be      	mov	lr, r7
  4012f0:	e037      	b.n	401362 <mxt_init_device+0x20e>
		return ((uint32_t)crc[2] << 16) | ((uint16_t)crc[1] << 8) | crc[0];
  4012f2:	f89d 2002 	ldrb.w	r2, [sp, #2]
  4012f6:	f89d 3000 	ldrb.w	r3, [sp]
  4012fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4012fe:	f89d 2001 	ldrb.w	r2, [sp, #1]
  401302:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401306:	e7d0      	b.n	4012aa <mxt_init_device+0x156>
		return ERR_BAD_DATA;
  401308:	f06f 0003 	mvn.w	r0, #3
  40130c:	e742      	b.n	401194 <mxt_init_device+0x40>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  40130e:	3001      	adds	r0, #1
  401310:	b2c0      	uxtb	r0, r0
  401312:	6862      	ldr	r2, [r4, #4]
  401314:	1953      	adds	r3, r2, r5
  401316:	7919      	ldrb	r1, [r3, #4]
  401318:	4281      	cmp	r1, r0
  40131a:	d31c      	bcc.n	401356 <mxt_init_device+0x202>
			if (device->object_list[i].num_report_ids != 0) {
  40131c:	795b      	ldrb	r3, [r3, #5]
  40131e:	2b00      	cmp	r3, #0
  401320:	d0f5      	beq.n	40130e <mxt_init_device+0x1ba>
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  401322:	6862      	ldr	r2, [r4, #4]
  401324:	442a      	add	r2, r5
  401326:	7953      	ldrb	r3, [r2, #5]
  401328:	2b00      	cmp	r3, #0
  40132a:	d0f0      	beq.n	40130e <mxt_init_device+0x1ba>
  40132c:	4633      	mov	r3, r6
							device->object_list[i].type;
  40132e:	7811      	ldrb	r1, [r2, #0]
					device->report_id_map[id_index].object_type =
  401330:	6962      	ldr	r2, [r4, #20]
  401332:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
					device->report_id_map[id_index].instance = j;
  401336:	6962      	ldr	r2, [r4, #20]
  401338:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  40133c:	7050      	strb	r0, [r2, #1]
					id_index++;
  40133e:	3301      	adds	r3, #1
  401340:	b2db      	uxtb	r3, r3
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  401342:	6862      	ldr	r2, [r4, #4]
  401344:	442a      	add	r2, r5
  401346:	1b99      	subs	r1, r3, r6
  401348:	f892 c005 	ldrb.w	ip, [r2, #5]
  40134c:	b2c9      	uxtb	r1, r1
  40134e:	458c      	cmp	ip, r1
  401350:	d8ed      	bhi.n	40132e <mxt_init_device+0x1da>
					id_index++;
  401352:	461e      	mov	r6, r3
  401354:	e7db      	b.n	40130e <mxt_init_device+0x1ba>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401356:	3701      	adds	r7, #1
  401358:	b2ff      	uxtb	r7, r7
  40135a:	6823      	ldr	r3, [r4, #0]
  40135c:	799b      	ldrb	r3, [r3, #6]
  40135e:	429f      	cmp	r7, r3
  401360:	d207      	bcs.n	401372 <mxt_init_device+0x21e>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  401362:	eb07 0347 	add.w	r3, r7, r7, lsl #1
  401366:	005a      	lsls	r2, r3, #1
  401368:	4615      	mov	r5, r2
  40136a:	6863      	ldr	r3, [r4, #4]
  40136c:	4413      	add	r3, r2
  40136e:	4670      	mov	r0, lr
  401370:	e7d4      	b.n	40131c <mxt_init_device+0x1c8>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401372:	b35b      	cbz	r3, 4013cc <mxt_init_device+0x278>
  401374:	4610      	mov	r0, r2
  401376:	3b01      	subs	r3, #1
  401378:	b2db      	uxtb	r3, r3
  40137a:	3301      	adds	r3, #1
  40137c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  401380:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  401384:	2100      	movs	r1, #0
		tot_report_ids += (device->object_list[i].num_report_ids);
  401386:	7943      	ldrb	r3, [r0, #5]
  401388:	4419      	add	r1, r3
  40138a:	b2c9      	uxtb	r1, r1
  40138c:	3006      	adds	r0, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40138e:	4282      	cmp	r2, r0
  401390:	d1f9      	bne.n	401386 <mxt_init_device+0x232>
	for (i = 0; i < tot_rpt_id; ++i) {
  401392:	b1f1      	cbz	r1, 4013d2 <mxt_init_device+0x27e>
		if (device->report_id_map[i].object_type == object_type) {
  401394:	6962      	ldr	r2, [r4, #20]
  401396:	7813      	ldrb	r3, [r2, #0]
  401398:	2b09      	cmp	r3, #9
  40139a:	d00f      	beq.n	4013bc <mxt_init_device+0x268>
  40139c:	2300      	movs	r3, #0
	for (i = 0; i < tot_rpt_id; ++i) {
  40139e:	3301      	adds	r3, #1
  4013a0:	b2db      	uxtb	r3, r3
  4013a2:	428b      	cmp	r3, r1
  4013a4:	d00c      	beq.n	4013c0 <mxt_init_device+0x26c>
		if (device->report_id_map[i].object_type == object_type) {
  4013a6:	f812 0f02 	ldrb.w	r0, [r2, #2]!
  4013aa:	2809      	cmp	r0, #9
  4013ac:	d1f7      	bne.n	40139e <mxt_init_device+0x24a>
			return i;
  4013ae:	b25b      	sxtb	r3, r3
	if (status == -1) {
  4013b0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4013b4:	d010      	beq.n	4013d8 <mxt_init_device+0x284>
	device->multitouch_report_offset = status;
  4013b6:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
  4013b8:	2000      	movs	r0, #0
  4013ba:	e6eb      	b.n	401194 <mxt_init_device+0x40>
		if (device->report_id_map[i].object_type == object_type) {
  4013bc:	2300      	movs	r3, #0
  4013be:	e7f6      	b.n	4013ae <mxt_init_device+0x25a>
		return ERR_BAD_DATA;
  4013c0:	f06f 0003 	mvn.w	r0, #3
  4013c4:	e6e6      	b.n	401194 <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  4013c6:	f06f 0003 	mvn.w	r0, #3
  4013ca:	e6e3      	b.n	401194 <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  4013cc:	f06f 0003 	mvn.w	r0, #3
  4013d0:	e6e0      	b.n	401194 <mxt_init_device+0x40>
  4013d2:	f06f 0003 	mvn.w	r0, #3
  4013d6:	e6dd      	b.n	401194 <mxt_init_device+0x40>
  4013d8:	f06f 0003 	mvn.w	r0, #3
  4013dc:	e6da      	b.n	401194 <mxt_init_device+0x40>
  4013de:	bf00      	nop
  4013e0:	0040341d 	.word	0x0040341d
  4013e4:	00401d4d 	.word	0x00401d4d
  4013e8:	0080001b 	.word	0x0080001b

004013ec <mxt_get_object_address>:
uint16_t mxt_get_object_address(struct mxt_device *device, uint8_t object_id,
		uint8_t instance)
{
	uint8_t i;

	for (i = 0; i < device->info_object->obj_count; i++) {
  4013ec:	6803      	ldr	r3, [r0, #0]
  4013ee:	799a      	ldrb	r2, [r3, #6]
  4013f0:	b1d2      	cbz	r2, 401428 <mxt_get_object_address+0x3c>
{
  4013f2:	b410      	push	{r4}
		if (object_id == device->object_list[i].type) {
  4013f4:	6844      	ldr	r4, [r0, #4]
  4013f6:	7823      	ldrb	r3, [r4, #0]
  4013f8:	428b      	cmp	r3, r1
  4013fa:	d00e      	beq.n	40141a <mxt_get_object_address+0x2e>
  4013fc:	1da3      	adds	r3, r4, #6
  4013fe:	3a01      	subs	r2, #1
  401400:	b2d2      	uxtb	r2, r2
  401402:	3201      	adds	r2, #1
  401404:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  401408:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; i++) {
  40140c:	4293      	cmp	r3, r2
  40140e:	d009      	beq.n	401424 <mxt_get_object_address+0x38>
		if (object_id == device->object_list[i].type) {
  401410:	461c      	mov	r4, r3
  401412:	f813 0b06 	ldrb.w	r0, [r3], #6
  401416:	4288      	cmp	r0, r1
  401418:	d1f8      	bne.n	40140c <mxt_get_object_address+0x20>
			return device->object_list[i].start_address;
  40141a:	f8b4 0001 	ldrh.w	r0, [r4, #1]
		}
	}

	return 0;
}
  40141e:	f85d 4b04 	ldr.w	r4, [sp], #4
  401422:	4770      	bx	lr
	return 0;
  401424:	2000      	movs	r0, #0
  401426:	e7fa      	b.n	40141e <mxt_get_object_address+0x32>
  401428:	2000      	movs	r0, #0
  40142a:	4770      	bx	lr

0040142c <mxt_write_config_object>:
 * \param *obj_data Pointer to memory buffer containing object data
 * \result Operation result status code
 */
status_code_t mxt_write_config_object(struct mxt_device *device,
		mxt_memory_adr memory_adr, void *obj_data)
{
  40142c:	b530      	push	{r4, r5, lr}
  40142e:	b087      	sub	sp, #28
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  401430:	2300      	movs	r3, #0
  401432:	9301      	str	r3, [sp, #4]
  401434:	9304      	str	r3, [sp, #16]
  401436:	9305      	str	r3, [sp, #20]
  401438:	f88d 1004 	strb.w	r1, [sp, #4]
  40143c:	0a0b      	lsrs	r3, r1, #8
  40143e:	f88d 3005 	strb.w	r3, [sp, #5]
  401442:	2302      	movs	r3, #2
  401444:	9302      	str	r3, [sp, #8]
  401446:	9203      	str	r2, [sp, #12]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401448:	6803      	ldr	r3, [r0, #0]
  40144a:	799a      	ldrb	r2, [r3, #6]
  40144c:	b1ba      	cbz	r2, 40147e <mxt_write_config_object+0x52>
		if (device->object_list[i].start_address == mem_adr) {
  40144e:	6844      	ldr	r4, [r0, #4]
  401450:	f8b4 3001 	ldrh.w	r3, [r4, #1]
  401454:	428b      	cmp	r3, r1
  401456:	d00f      	beq.n	401478 <mxt_write_config_object+0x4c>
  401458:	1da3      	adds	r3, r4, #6
  40145a:	3a01      	subs	r2, #1
  40145c:	b2d2      	uxtb	r2, r2
  40145e:	3201      	adds	r2, #1
  401460:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  401464:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401468:	4293      	cmp	r3, r2
  40146a:	d016      	beq.n	40149a <mxt_write_config_object+0x6e>
		if (device->object_list[i].start_address == mem_adr) {
  40146c:	461c      	mov	r4, r3
  40146e:	3306      	adds	r3, #6
  401470:	f8b4 5001 	ldrh.w	r5, [r4, #1]
  401474:	428d      	cmp	r5, r1
  401476:	d1f7      	bne.n	401468 <mxt_write_config_object+0x3c>
			return (device->object_list[i].size + 1);
  401478:	78e2      	ldrb	r2, [r4, #3]
  40147a:	3201      	adds	r2, #1
  40147c:	b2d2      	uxtb	r2, r2
		.addr[0]      = memory_adr,
		.addr[1]      = memory_adr >> 8,
		.addr_length  = sizeof(mxt_memory_adr),
		.chip         = device->mxt_chip_adr,
		.buffer       = obj_data,
		.length       = mxt_get_object_size(device, memory_adr)
  40147e:	9204      	str	r2, [sp, #16]
	twihs_package_t packet = {
  401480:	7b03      	ldrb	r3, [r0, #12]
  401482:	f88d 3014 	strb.w	r3, [sp, #20]
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  401486:	a901      	add	r1, sp, #4
  401488:	6880      	ldr	r0, [r0, #8]
  40148a:	4b05      	ldr	r3, [pc, #20]	; (4014a0 <mxt_write_config_object+0x74>)
  40148c:	4798      	blx	r3
  40148e:	3000      	adds	r0, #0
  401490:	bf18      	it	ne
  401492:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}

}
  401494:	4240      	negs	r0, r0
  401496:	b007      	add	sp, #28
  401498:	bd30      	pop	{r4, r5, pc}
	return 0;
  40149a:	2200      	movs	r2, #0
  40149c:	e7ef      	b.n	40147e <mxt_write_config_object+0x52>
  40149e:	bf00      	nop
  4014a0:	00401df9 	.word	0x00401df9

004014a4 <mxt_write_config_reg>:
 * \param value Value to be written to register
 * \result Operation result status code
 */
status_code_t mxt_write_config_reg(struct mxt_device *device,
		mxt_memory_adr memory_adr, uint8_t value)
{
  4014a4:	b500      	push	{lr}
  4014a6:	b089      	sub	sp, #36	; 0x24
  4014a8:	f88d 2007 	strb.w	r2, [sp, #7]
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  4014ac:	2300      	movs	r3, #0
  4014ae:	9303      	str	r3, [sp, #12]
  4014b0:	9307      	str	r3, [sp, #28]
  4014b2:	f88d 100c 	strb.w	r1, [sp, #12]
  4014b6:	0a09      	lsrs	r1, r1, #8
  4014b8:	f88d 100d 	strb.w	r1, [sp, #13]
  4014bc:	2302      	movs	r3, #2
  4014be:	9304      	str	r3, [sp, #16]
  4014c0:	f10d 0307 	add.w	r3, sp, #7
  4014c4:	9305      	str	r3, [sp, #20]
  4014c6:	2301      	movs	r3, #1
  4014c8:	9306      	str	r3, [sp, #24]
  4014ca:	7b03      	ldrb	r3, [r0, #12]
  4014cc:	f88d 301c 	strb.w	r3, [sp, #28]
		.chip         = device->mxt_chip_adr,
		.buffer       = &value,
		.length       = sizeof(value)
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  4014d0:	a903      	add	r1, sp, #12
  4014d2:	6880      	ldr	r0, [r0, #8]
  4014d4:	4b04      	ldr	r3, [pc, #16]	; (4014e8 <mxt_write_config_reg+0x44>)
  4014d6:	4798      	blx	r3
  4014d8:	3000      	adds	r0, #0
  4014da:	bf18      	it	ne
  4014dc:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}
}
  4014de:	4240      	negs	r0, r0
  4014e0:	b009      	add	sp, #36	; 0x24
  4014e2:	f85d fb04 	ldr.w	pc, [sp], #4
  4014e6:	bf00      	nop
  4014e8:	00401df9 	.word	0x00401df9

004014ec <mxt_read_message>:
 * \param *message Pointer to mxt_message instance
 * \return Operation result status code
 */
status_code_t mxt_read_message(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
  4014ec:	b530      	push	{r4, r5, lr}
  4014ee:	b087      	sub	sp, #28
  4014f0:	4604      	mov	r4, r0
  4014f2:	460d      	mov	r5, r1
	uint16_t obj_adr = mxt_get_object_address(device,
  4014f4:	2200      	movs	r2, #0
  4014f6:	2105      	movs	r1, #5
  4014f8:	4b0d      	ldr	r3, [pc, #52]	; (401530 <mxt_read_message+0x44>)
  4014fa:	4798      	blx	r3
			MXT_GEN_MESSAGEPROCESSOR_T5, 0);

	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  4014fc:	2300      	movs	r3, #0
  4014fe:	9301      	str	r3, [sp, #4]
  401500:	9305      	str	r3, [sp, #20]
  401502:	f88d 0004 	strb.w	r0, [sp, #4]
  401506:	0a00      	lsrs	r0, r0, #8
  401508:	f88d 0005 	strb.w	r0, [sp, #5]
  40150c:	2302      	movs	r3, #2
  40150e:	9302      	str	r3, [sp, #8]
  401510:	9503      	str	r5, [sp, #12]
  401512:	2309      	movs	r3, #9
  401514:	9304      	str	r3, [sp, #16]
  401516:	7b23      	ldrb	r3, [r4, #12]
  401518:	f88d 3014 	strb.w	r3, [sp, #20]
		.buffer       = message,
		.length       = MXT_TWI_MSG_SIZE_T5
	};

	/* Read information from the slave */
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  40151c:	a901      	add	r1, sp, #4
  40151e:	68a0      	ldr	r0, [r4, #8]
  401520:	4b04      	ldr	r3, [pc, #16]	; (401534 <mxt_read_message+0x48>)
  401522:	4798      	blx	r3
  401524:	3000      	adds	r0, #0
  401526:	bf18      	it	ne
  401528:	2001      	movne	r0, #1
		return mxt_validate_message(&packet);
#else
		return STATUS_OK;
#endif
	}
}
  40152a:	4240      	negs	r0, r0
  40152c:	b007      	add	sp, #28
  40152e:	bd30      	pop	{r4, r5, pc}
  401530:	004013ed 	.word	0x004013ed
  401534:	00401d4d 	.word	0x00401d4d

00401538 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  401538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  40153c:	b980      	cbnz	r0, 401560 <_read+0x28>
  40153e:	460c      	mov	r4, r1
  401540:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  401542:	2a00      	cmp	r2, #0
  401544:	dd0f      	ble.n	401566 <_read+0x2e>
  401546:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  401548:	4e08      	ldr	r6, [pc, #32]	; (40156c <_read+0x34>)
  40154a:	4d09      	ldr	r5, [pc, #36]	; (401570 <_read+0x38>)
  40154c:	6830      	ldr	r0, [r6, #0]
  40154e:	4621      	mov	r1, r4
  401550:	682b      	ldr	r3, [r5, #0]
  401552:	4798      	blx	r3
		ptr++;
  401554:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  401556:	42bc      	cmp	r4, r7
  401558:	d1f8      	bne.n	40154c <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40155a:	4640      	mov	r0, r8
  40155c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  401560:	f04f 38ff 	mov.w	r8, #4294967295
  401564:	e7f9      	b.n	40155a <_read+0x22>
	for (; len > 0; --len) {
  401566:	4680      	mov	r8, r0
  401568:	e7f7      	b.n	40155a <_read+0x22>
  40156a:	bf00      	nop
  40156c:	204031dc 	.word	0x204031dc
  401570:	204031d4 	.word	0x204031d4

00401574 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  401574:	3801      	subs	r0, #1
  401576:	2802      	cmp	r0, #2
  401578:	d815      	bhi.n	4015a6 <_write+0x32>
{
  40157a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40157e:	460e      	mov	r6, r1
  401580:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  401582:	b19a      	cbz	r2, 4015ac <_write+0x38>
  401584:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  401586:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4015c0 <_write+0x4c>
  40158a:	4f0c      	ldr	r7, [pc, #48]	; (4015bc <_write+0x48>)
  40158c:	f8d8 0000 	ldr.w	r0, [r8]
  401590:	f815 1b01 	ldrb.w	r1, [r5], #1
  401594:	683b      	ldr	r3, [r7, #0]
  401596:	4798      	blx	r3
  401598:	2800      	cmp	r0, #0
  40159a:	db0a      	blt.n	4015b2 <_write+0x3e>
  40159c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40159e:	3c01      	subs	r4, #1
  4015a0:	d1f4      	bne.n	40158c <_write+0x18>
  4015a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4015a6:	f04f 30ff 	mov.w	r0, #4294967295
  4015aa:	4770      	bx	lr
	for (; len != 0; --len) {
  4015ac:	4610      	mov	r0, r2
  4015ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4015b2:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4015b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4015ba:	bf00      	nop
  4015bc:	204031d8 	.word	0x204031d8
  4015c0:	204031dc 	.word	0x204031dc

004015c4 <wm8904_write_register>:
 *
 * \param uc_register_address Register address to write
 * \param us_data Data to write.
 */
void wm8904_write_register(uint8_t uc_register_address, uint16_t us_data)
{
  4015c4:	b500      	push	{lr}
  4015c6:	b087      	sub	sp, #28
	uint8_t uc_temp_data[2];
	twihs_packet_t packet;

	uc_temp_data[0] = (us_data & 0xff00) >> 8;
  4015c8:	0a0b      	lsrs	r3, r1, #8
  4015ca:	f88d 3014 	strb.w	r3, [sp, #20]
	uc_temp_data[1] = us_data & 0xff;
  4015ce:	f88d 1015 	strb.w	r1, [sp, #21]

	packet.addr[0]     = uc_register_address;
  4015d2:	f88d 0000 	strb.w	r0, [sp]
	packet.addr_length = 0x1;
  4015d6:	2301      	movs	r3, #1
  4015d8:	9301      	str	r3, [sp, #4]
	packet.buffer      = uc_temp_data;
  4015da:	ab05      	add	r3, sp, #20
  4015dc:	9302      	str	r3, [sp, #8]
	packet.length      = 0x2;
  4015de:	2302      	movs	r3, #2
  4015e0:	9303      	str	r3, [sp, #12]
	packet.chip        = WM8904_SLAVE_ADDRESS;
  4015e2:	231a      	movs	r3, #26
  4015e4:	f88d 3010 	strb.w	r3, [sp, #16]

	twihs_master_write(WM8904_TWIHS, &packet);
  4015e8:	4669      	mov	r1, sp
  4015ea:	4803      	ldr	r0, [pc, #12]	; (4015f8 <wm8904_write_register+0x34>)
  4015ec:	4b03      	ldr	r3, [pc, #12]	; (4015fc <wm8904_write_register+0x38>)
  4015ee:	4798      	blx	r3
}
  4015f0:	b007      	add	sp, #28
  4015f2:	f85d fb04 	ldr.w	pc, [sp], #4
  4015f6:	bf00      	nop
  4015f8:	40018000 	.word	0x40018000
  4015fc:	00401df9 	.word	0x00401df9

00401600 <wm8904_read_register>:
 *
 * \param uc_register_address Register address to write
 * \retun Register value.
 */
uint16_t wm8904_read_register(uint8_t uc_register_address)
{
  401600:	b500      	push	{lr}
  401602:	b087      	sub	sp, #28
	uint8_t uc_temp_data[2];
	twihs_packet_t packet;
	uint16_t us_data;

	packet.addr[0]     = uc_register_address;
  401604:	f88d 0000 	strb.w	r0, [sp]
	packet.addr_length = 0x1;
  401608:	2301      	movs	r3, #1
  40160a:	9301      	str	r3, [sp, #4]
	packet.buffer      = uc_temp_data;
  40160c:	ab05      	add	r3, sp, #20
  40160e:	9302      	str	r3, [sp, #8]
	packet.length      = 0x2;
  401610:	2302      	movs	r3, #2
  401612:	9303      	str	r3, [sp, #12]
	packet.chip        = WM8904_SLAVE_ADDRESS;
  401614:	231a      	movs	r3, #26
  401616:	f88d 3010 	strb.w	r3, [sp, #16]

	twihs_master_read(WM8904_TWIHS, &packet);
  40161a:	4669      	mov	r1, sp
  40161c:	4805      	ldr	r0, [pc, #20]	; (401634 <wm8904_read_register+0x34>)
  40161e:	4b06      	ldr	r3, [pc, #24]	; (401638 <wm8904_read_register+0x38>)
  401620:	4798      	blx	r3
	us_data = (((uint16_t)uc_temp_data[0] << 8) & 0xff00) | uc_temp_data[1];
  401622:	f89d 0014 	ldrb.w	r0, [sp, #20]
  401626:	f89d 3015 	ldrb.w	r3, [sp, #21]

	return us_data;
}
  40162a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  40162e:	b007      	add	sp, #28
  401630:	f85d fb04 	ldr.w	pc, [sp], #4
  401634:	40018000 	.word	0x40018000
  401638:	00401d4d 	.word	0x00401d4d

0040163c <wm8904_twi_init>:
 * \brief Initialize TWIHS connect to WM8904.
 *
 * \retun TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t wm8904_twi_init(void)
{
  40163c:	b510      	push	{r4, lr}
  40163e:	b084      	sub	sp, #16
	pio_configure_pin(WM8904_TK_PIO, WM8904_TK_FLAGS);
  401640:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401644:	2021      	movs	r0, #33	; 0x21
  401646:	4c15      	ldr	r4, [pc, #84]	; (40169c <wm8904_twi_init+0x60>)
  401648:	47a0      	blx	r4
	pio_configure_pin(WM8904_TF_PIO, WM8904_TF_FLAGS);
  40164a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40164e:	2020      	movs	r0, #32
  401650:	47a0      	blx	r4
	pio_configure_pin(WM8904_TD_PIO, WM8904_TD_FLAGS);
  401652:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401656:	207a      	movs	r0, #122	; 0x7a
  401658:	47a0      	blx	r4
	pio_configure_pin(WM8904_RK_PIO, WM8904_RK_FLAGS);
  40165a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40165e:	2016      	movs	r0, #22
  401660:	47a0      	blx	r4
	pio_configure_pin(WM8904_RF_PIO, WM8904_RF_FLAGS);
  401662:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401666:	2078      	movs	r0, #120	; 0x78
  401668:	47a0      	blx	r4
	pio_configure_pin(WM8904_RD_PIO, WM8904_RD_FLAGS);
  40166a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40166e:	200a      	movs	r0, #10
  401670:	47a0      	blx	r4
	pio_configure_pin(WM8904_PCK2_PIO, WM8904_PCK2_FLAGS);
  401672:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401676:	2012      	movs	r0, #18
  401678:	47a0      	blx	r4

	twihs_options_t opt;
	opt.master_clk = sysclk_get_cpu_hz();
	opt.speed = WM8904_TWIHS_CLK;
  40167a:	4b09      	ldr	r3, [pc, #36]	; (4016a0 <wm8904_twi_init+0x64>)
  40167c:	9302      	str	r3, [sp, #8]
	p_opt->master_clk = sysclk_get_peripheral_hz();
  40167e:	4b09      	ldr	r3, [pc, #36]	; (4016a4 <wm8904_twi_init+0x68>)
  401680:	9301      	str	r3, [sp, #4]
	p_opt->smbus      = 0;
  401682:	2300      	movs	r3, #0
  401684:	f88d 300d 	strb.w	r3, [sp, #13]
  401688:	2013      	movs	r0, #19
  40168a:	4b07      	ldr	r3, [pc, #28]	; (4016a8 <wm8904_twi_init+0x6c>)
  40168c:	4798      	blx	r3
	return (twihs_master_init(p_twihs, p_opt));
  40168e:	a901      	add	r1, sp, #4
  401690:	4806      	ldr	r0, [pc, #24]	; (4016ac <wm8904_twi_init+0x70>)
  401692:	4b07      	ldr	r3, [pc, #28]	; (4016b0 <wm8904_twi_init+0x74>)
  401694:	4798      	blx	r3
	return twihs_master_setup(WM8904_TWIHS, &opt);
}
  401696:	b004      	add	sp, #16
  401698:	bd10      	pop	{r4, pc}
  40169a:	bf00      	nop
  40169c:	004023fd 	.word	0x004023fd
  4016a0:	00061a80 	.word	0x00061a80
  4016a4:	08f0d180 	.word	0x08f0d180
  4016a8:	00402701 	.word	0x00402701
  4016ac:	40018000 	.word	0x40018000
  4016b0:	00401d19 	.word	0x00401d19

004016b4 <ili9488_write_ram_prepare>:

/**
 * \brief Prepare to write GRAM data.
 */
static void ili9488_write_ram_prepare(void)
{
  4016b4:	b508      	push	{r3, lr}
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  4016b6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4016ba:	4804      	ldr	r0, [pc, #16]	; (4016cc <ili9488_write_ram_prepare+0x18>)
  4016bc:	4b04      	ldr	r3, [pc, #16]	; (4016d0 <ili9488_write_ram_prepare+0x1c>)
  4016be:	4798      	blx	r3
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  4016c0:	222c      	movs	r2, #44	; 0x2c
  4016c2:	f04f 43c6 	mov.w	r3, #1660944384	; 0x63000000
  4016c6:	801a      	strh	r2, [r3, #0]
  4016c8:	bd08      	pop	{r3, pc}
  4016ca:	bf00      	nop
  4016cc:	400e1200 	.word	0x400e1200
  4016d0:	00402271 	.word	0x00402271

004016d4 <ili9488_write_register>:
 * \param uc_reg register address.
 * \param us_data data to be written.
 * \param size the number of parameters.
 */
static void ili9488_write_register(uint8_t uc_reg, const ili9488_color_t *us_data, uint32_t size)
{
  4016d4:	b570      	push	{r4, r5, r6, lr}
  4016d6:	4606      	mov	r6, r0
  4016d8:	460d      	mov	r5, r1
  4016da:	4614      	mov	r4, r2
	/* CDS pin is set low level when writing command*/
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  4016dc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4016e0:	480c      	ldr	r0, [pc, #48]	; (401714 <ili9488_write_register+0x40>)
  4016e2:	4b0d      	ldr	r3, [pc, #52]	; (401718 <ili9488_write_register+0x44>)
  4016e4:	4798      	blx	r3
  4016e6:	b2b6      	uxth	r6, r6
  4016e8:	f04f 43c6 	mov.w	r3, #1660944384	; 0x63000000
  4016ec:	801e      	strh	r6, [r3, #0]
	LCD_IR(uc_reg);

	if(size == 0) {
  4016ee:	b904      	cbnz	r4, 4016f2 <ili9488_write_register+0x1e>
  4016f0:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	/* CDS pin is set high level when writing parameters or image data*/
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  4016f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4016f6:	4807      	ldr	r0, [pc, #28]	; (401714 <ili9488_write_register+0x40>)
  4016f8:	4b08      	ldr	r3, [pc, #32]	; (40171c <ili9488_write_register+0x48>)
  4016fa:	4798      	blx	r3
		while(size--) {
  4016fc:	1e62      	subs	r2, r4, #1
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  4016fe:	f04f 41c6 	mov.w	r1, #1660944384	; 0x63000000
  401702:	f835 3b02 	ldrh.w	r3, [r5], #2
  401706:	800b      	strh	r3, [r1, #0]
		while(size--) {
  401708:	3a01      	subs	r2, #1
  40170a:	f1b2 3fff 	cmp.w	r2, #4294967295
  40170e:	d1f8      	bne.n	401702 <ili9488_write_register+0x2e>
  401710:	e7ee      	b.n	4016f0 <ili9488_write_register+0x1c>
  401712:	bf00      	nop
  401714:	400e1200 	.word	0x400e1200
  401718:	00402271 	.word	0x00402271
  40171c:	0040226d 	.word	0x0040226d

00401720 <ili9488_delay>:
 */
void ili9488_delay(uint32_t ul_ms)
{
	uint32_t i;

	for(i = 0; i < ul_ms; i++) {
  401720:	4601      	mov	r1, r0
  401722:	b130      	cbz	r0, 401732 <ili9488_delay+0x12>
  401724:	4a03      	ldr	r2, [pc, #12]	; (401734 <ili9488_delay+0x14>)
{
  401726:	4b04      	ldr	r3, [pc, #16]	; (401738 <ili9488_delay+0x18>)
		for(i = 0; i < 100000; i++) {
  401728:	3b01      	subs	r3, #1
  40172a:	d1fd      	bne.n	401728 <ili9488_delay+0x8>
	for(i = 0; i < ul_ms; i++) {
  40172c:	4291      	cmp	r1, r2
  40172e:	d8fa      	bhi.n	401726 <ili9488_delay+0x6>
  401730:	4770      	bx	lr
  401732:	4770      	bx	lr
  401734:	000186a1 	.word	0x000186a1
  401738:	000186a0 	.word	0x000186a0

0040173c <ili9488_set_display_direction>:
 * \brief ILI9488 configure landscape.
 *
 * \Param LandscaprMode Landscape Mode.
 */
void ili9488_set_display_direction(enum ili9488_display_direction direction )
{
  40173c:	b500      	push	{lr}
  40173e:	b083      	sub	sp, #12
	ili9488_color_t value;
	if(direction) {
  401740:	b958      	cbnz	r0, 40175a <ili9488_set_display_direction+0x1e>
		value = 0xE8;
	} else {
		value = 0x48;
  401742:	2348      	movs	r3, #72	; 0x48
  401744:	f8ad 3006 	strh.w	r3, [sp, #6]
	}
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &value, 1);
  401748:	2201      	movs	r2, #1
  40174a:	f10d 0106 	add.w	r1, sp, #6
  40174e:	2036      	movs	r0, #54	; 0x36
  401750:	4b04      	ldr	r3, [pc, #16]	; (401764 <ili9488_set_display_direction+0x28>)
  401752:	4798      	blx	r3
}
  401754:	b003      	add	sp, #12
  401756:	f85d fb04 	ldr.w	pc, [sp], #4
		value = 0xE8;
  40175a:	23e8      	movs	r3, #232	; 0xe8
  40175c:	f8ad 3006 	strh.w	r3, [sp, #6]
  401760:	e7f2      	b.n	401748 <ili9488_set_display_direction+0xc>
  401762:	bf00      	nop
  401764:	004016d5 	.word	0x004016d5

00401768 <ili9488_set_window>:
 * \Param y start position.
 * \Param width  Width of window.
 * \Param height Height of window.
 */
void ili9488_set_window(uint16_t x, uint16_t y, uint16_t width, uint16_t height )
{
  401768:	b510      	push	{r4, lr}
  40176a:	b084      	sub	sp, #16
	uint32_t cnt = 0;
	ili9488_color_t buf[4];

	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	col_start  =  x ;
  40176c:	f8ad 000e 	strh.w	r0, [sp, #14]
	col_end    =  width + x - 1;
  401770:	3a01      	subs	r2, #1
  401772:	4402      	add	r2, r0
  401774:	f8ad 200c 	strh.w	r2, [sp, #12]

	row_start = y ;
  401778:	f8ad 100a 	strh.w	r1, [sp, #10]
	row_end   = height + y - 1;
  40177c:	3b01      	subs	r3, #1
  40177e:	4419      	add	r1, r3
  401780:	f8ad 1008 	strh.w	r1, [sp, #8]

	buf[0] = get_8b_to_16b(col_start);
  401784:	0a03      	lsrs	r3, r0, #8
  401786:	f8ad 3000 	strh.w	r3, [sp]
	buf[1] = get_0b_to_8b(col_start);
  40178a:	b2c0      	uxtb	r0, r0
  40178c:	f8ad 0002 	strh.w	r0, [sp, #2]
	buf[2] = get_8b_to_16b(col_end);
  401790:	f3c2 2307 	ubfx	r3, r2, #8, #8
  401794:	f8ad 3004 	strh.w	r3, [sp, #4]
	buf[3] = get_0b_to_8b(col_end);
  401798:	b2d2      	uxtb	r2, r2
  40179a:	f8ad 2006 	strh.w	r2, [sp, #6]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  40179e:	2204      	movs	r2, #4
  4017a0:	4669      	mov	r1, sp
  4017a2:	202a      	movs	r0, #42	; 0x2a
  4017a4:	4c0f      	ldr	r4, [pc, #60]	; (4017e4 <ili9488_set_window+0x7c>)
  4017a6:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  4017a8:	2200      	movs	r2, #0
  4017aa:	4611      	mov	r1, r2
  4017ac:	4610      	mov	r0, r2
  4017ae:	47a0      	blx	r4

	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(row_start);
  4017b0:	f89d 300b 	ldrb.w	r3, [sp, #11]
  4017b4:	f8ad 3000 	strh.w	r3, [sp]
	buf[1] = get_0b_to_8b(row_start);
  4017b8:	f89d 300a 	ldrb.w	r3, [sp, #10]
  4017bc:	f8ad 3002 	strh.w	r3, [sp, #2]
	buf[2] = get_8b_to_16b(row_end);
  4017c0:	f89d 3009 	ldrb.w	r3, [sp, #9]
  4017c4:	f8ad 3004 	strh.w	r3, [sp, #4]
	buf[3] = get_0b_to_8b(row_end);
  4017c8:	f89d 3008 	ldrb.w	r3, [sp, #8]
  4017cc:	f8ad 3006 	strh.w	r3, [sp, #6]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  4017d0:	2204      	movs	r2, #4
  4017d2:	4669      	mov	r1, sp
  4017d4:	202b      	movs	r0, #43	; 0x2b
  4017d6:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  4017d8:	2200      	movs	r2, #0
  4017da:	4611      	mov	r1, r2
  4017dc:	4610      	mov	r0, r2
  4017de:	47a0      	blx	r4
}
  4017e0:	b004      	add	sp, #16
  4017e2:	bd10      	pop	{r4, pc}
  4017e4:	004016d5 	.word	0x004016d5

004017e8 <ili9488_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9488_display_on(void)
{
  4017e8:	b508      	push	{r3, lr}
	ili9488_write_register(ILI9488_CMD_DISPLAY_ON, 0, 0);
  4017ea:	2200      	movs	r2, #0
  4017ec:	4611      	mov	r1, r2
  4017ee:	2029      	movs	r0, #41	; 0x29
  4017f0:	4b01      	ldr	r3, [pc, #4]	; (4017f8 <ili9488_display_on+0x10>)
  4017f2:	4798      	blx	r3
  4017f4:	bd08      	pop	{r3, pc}
  4017f6:	bf00      	nop
  4017f8:	004016d5 	.word	0x004016d5

004017fc <ili9488_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili9488_set_foreground_color(uint32_t ul_color)
{
  4017fc:	4a04      	ldr	r2, [pc, #16]	; (401810 <ili9488_set_foreground_color+0x14>)
  4017fe:	1e93      	subs	r3, r2, #2
  401800:	f202 227e 	addw	r2, r2, #638	; 0x27e
	uint32_t i;
#ifdef ILI9488_EBIMODE
	/* Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
		g_ul_pixel_cache[i] = ul_color;
  401804:	f823 0f02 	strh.w	r0, [r3, #2]!
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
  401808:	4293      	cmp	r3, r2
  40180a:	d1fb      	bne.n	401804 <ili9488_set_foreground_color+0x8>
		g_ul_pixel_cache[i++] = ul_color>>16;
		g_ul_pixel_cache[i++] = ul_color>>8;
		g_ul_pixel_cache[i++] = ul_color&0xFF;
	}
#endif
}
  40180c:	4770      	bx	lr
  40180e:	bf00      	nop
  401810:	20400a90 	.word	0x20400a90

00401814 <ili9488_set_cursor_position>:
 *
 * \param x X coordinate of upper-left corner on LCD.
 * \param y Y coordinate of upper-left corner on LCD.
 */
void ili9488_set_cursor_position(uint16_t x, uint16_t y)
{
  401814:	b510      	push	{r4, lr}
  401816:	b084      	sub	sp, #16
  401818:	f8ad 0006 	strh.w	r0, [sp, #6]
  40181c:	f8ad 1004 	strh.w	r1, [sp, #4]
	uint32_t cnt = 0;

	ili9488_color_t buf[4];
	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	buf[0] = get_8b_to_16b(x);
  401820:	0a03      	lsrs	r3, r0, #8
  401822:	f8ad 3008 	strh.w	r3, [sp, #8]
	buf[1] = get_0b_to_8b(x);
  401826:	b2c0      	uxtb	r0, r0
  401828:	f8ad 000a 	strh.w	r0, [sp, #10]
	buf[2] = get_8b_to_16b(x);
  40182c:	f8ad 300c 	strh.w	r3, [sp, #12]
	buf[3] = get_0b_to_8b(x);
  401830:	f8ad 000e 	strh.w	r0, [sp, #14]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  401834:	2204      	movs	r2, #4
  401836:	a902      	add	r1, sp, #8
  401838:	202a      	movs	r0, #42	; 0x2a
  40183a:	4c0e      	ldr	r4, [pc, #56]	; (401874 <ili9488_set_cursor_position+0x60>)
  40183c:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  40183e:	2200      	movs	r2, #0
  401840:	4611      	mov	r1, r2
  401842:	4610      	mov	r0, r2
  401844:	47a0      	blx	r4


	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(y);
  401846:	f89d 2005 	ldrb.w	r2, [sp, #5]
  40184a:	f8ad 2008 	strh.w	r2, [sp, #8]
	buf[1] = get_0b_to_8b(y);
  40184e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  401852:	f8ad 300a 	strh.w	r3, [sp, #10]
	buf[2] = get_8b_to_16b(y);
  401856:	f8ad 200c 	strh.w	r2, [sp, #12]
	buf[3] = get_0b_to_8b(y);
  40185a:	f8ad 300e 	strh.w	r3, [sp, #14]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  40185e:	2204      	movs	r2, #4
  401860:	a902      	add	r1, sp, #8
  401862:	202b      	movs	r0, #43	; 0x2b
  401864:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  401866:	2200      	movs	r2, #0
  401868:	4611      	mov	r1, r2
  40186a:	4610      	mov	r0, r2
  40186c:	47a0      	blx	r4
}
  40186e:	b004      	add	sp, #16
  401870:	bd10      	pop	{r4, pc}
  401872:	bf00      	nop
  401874:	004016d5 	.word	0x004016d5

00401878 <ili9488_init>:
{
  401878:	b5f0      	push	{r4, r5, r6, r7, lr}
  40187a:	b085      	sub	sp, #20
  40187c:	4604      	mov	r4, r0
	pmc_enable_periph_clk(ID_SMC);
  40187e:	2009      	movs	r0, #9
  401880:	4b46      	ldr	r3, [pc, #280]	; (40199c <ili9488_init+0x124>)
  401882:	4798      	blx	r3
	smc_set_setup_timing(SMC, BOARD_ILI9488_EBI_NPCS, SMC_SETUP_NWE_SETUP(0)
  401884:	4d46      	ldr	r5, [pc, #280]	; (4019a0 <ili9488_init+0x128>)
  401886:	2200      	movs	r2, #0
  401888:	2103      	movs	r1, #3
  40188a:	4628      	mov	r0, r5
  40188c:	4b45      	ldr	r3, [pc, #276]	; (4019a4 <ili9488_init+0x12c>)
  40188e:	4798      	blx	r3
	smc_set_pulse_timing(SMC, BOARD_ILI9488_EBI_NPCS , SMC_PULSE_NWE_PULSE(3)
  401890:	4a45      	ldr	r2, [pc, #276]	; (4019a8 <ili9488_init+0x130>)
  401892:	2103      	movs	r1, #3
  401894:	4628      	mov	r0, r5
  401896:	4b45      	ldr	r3, [pc, #276]	; (4019ac <ili9488_init+0x134>)
  401898:	4798      	blx	r3
	smc_set_cycle_timing(SMC, BOARD_ILI9488_EBI_NPCS, SMC_CYCLE_NWE_CYCLE(0x4)
  40189a:	4a45      	ldr	r2, [pc, #276]	; (4019b0 <ili9488_init+0x138>)
  40189c:	2103      	movs	r1, #3
  40189e:	4628      	mov	r0, r5
  4018a0:	4b44      	ldr	r3, [pc, #272]	; (4019b4 <ili9488_init+0x13c>)
  4018a2:	4798      	blx	r3
	smc_set_mode(SMC, BOARD_ILI9488_EBI_NPCS, SMC_MODE_READ_MODE
  4018a4:	4a44      	ldr	r2, [pc, #272]	; (4019b8 <ili9488_init+0x140>)
  4018a6:	2103      	movs	r1, #3
  4018a8:	4628      	mov	r0, r5
  4018aa:	4b44      	ldr	r3, [pc, #272]	; (4019bc <ili9488_init+0x144>)
  4018ac:	4798      	blx	r3
	ili9488_write_register(ILI9488_CMD_SOFTWARE_RESET, 0x0000, 0);
  4018ae:	2200      	movs	r2, #0
  4018b0:	4611      	mov	r1, r2
  4018b2:	2001      	movs	r0, #1
  4018b4:	4e42      	ldr	r6, [pc, #264]	; (4019c0 <ili9488_init+0x148>)
  4018b6:	47b0      	blx	r6
	ili9488_delay(200);
  4018b8:	20c8      	movs	r0, #200	; 0xc8
  4018ba:	4d42      	ldr	r5, [pc, #264]	; (4019c4 <ili9488_init+0x14c>)
  4018bc:	47a8      	blx	r5
	ili9488_write_register(ILI9488_CMD_SLEEP_OUT, 0x0000, 0);
  4018be:	2200      	movs	r2, #0
  4018c0:	4611      	mov	r1, r2
  4018c2:	2011      	movs	r0, #17
  4018c4:	47b0      	blx	r6
	ili9488_delay(200);
  4018c6:	20c8      	movs	r0, #200	; 0xc8
  4018c8:	47a8      	blx	r5
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  4018ca:	4e3f      	ldr	r6, [pc, #252]	; (4019c8 <ili9488_init+0x150>)
  4018cc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4018d0:	4630      	mov	r0, r6
  4018d2:	4b3e      	ldr	r3, [pc, #248]	; (4019cc <ili9488_init+0x154>)
  4018d4:	4798      	blx	r3
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  4018d6:	f04f 45c6 	mov.w	r5, #1660944384	; 0x63000000
  4018da:	23d3      	movs	r3, #211	; 0xd3
  4018dc:	802b      	strh	r3, [r5, #0]
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  4018de:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4018e2:	4630      	mov	r0, r6
  4018e4:	4b3a      	ldr	r3, [pc, #232]	; (4019d0 <ili9488_init+0x158>)
  4018e6:	4798      	blx	r3
		return *(volatile uint16_t *)(BOARD_ILI9488_ADDR);
	}
	static inline void LCD_MULTI_RD(uint16_t *pbuffer, uint32_t size)
	{
		while(size--) {
			*pbuffer++ = *((volatile uint16_t *)(BOARD_ILI9488_ADDR));
  4018e8:	882b      	ldrh	r3, [r5, #0]
  4018ea:	f8ad 3004 	strh.w	r3, [sp, #4]
  4018ee:	8829      	ldrh	r1, [r5, #0]
  4018f0:	b289      	uxth	r1, r1
  4018f2:	f8ad 1006 	strh.w	r1, [sp, #6]
  4018f6:	882b      	ldrh	r3, [r5, #0]
  4018f8:	b29b      	uxth	r3, r3
  4018fa:	f8ad 3008 	strh.w	r3, [sp, #8]
  4018fe:	882a      	ldrh	r2, [r5, #0]
  401900:	b292      	uxth	r2, r2
  401902:	f8ad 200a 	strh.w	r2, [sp, #10]
  401906:	8828      	ldrh	r0, [r5, #0]
		chipid |= (*ptr &0xFF)<< (shift_cnt << 3);
  401908:	b2c9      	uxtb	r1, r1
  40190a:	b2db      	uxtb	r3, r3
  40190c:	021b      	lsls	r3, r3, #8
  40190e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  401912:	b2d2      	uxtb	r2, r2
  401914:	4313      	orrs	r3, r2
	if (chipid != ILI9488_DEVICE_CODE) {
  401916:	f249 4288 	movw	r2, #38024	; 0x9488
  40191a:	4293      	cmp	r3, r2
  40191c:	d002      	beq.n	401924 <ili9488_init+0xac>
		return 1;
  40191e:	2001      	movs	r0, #1
}
  401920:	b005      	add	sp, #20
  401922:	bdf0      	pop	{r4, r5, r6, r7, pc}
	param = 0x48;
  401924:	ae04      	add	r6, sp, #16
  401926:	2348      	movs	r3, #72	; 0x48
  401928:	f826 3d02 	strh.w	r3, [r6, #-2]!
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &param, 1);
  40192c:	2201      	movs	r2, #1
  40192e:	4631      	mov	r1, r6
  401930:	2036      	movs	r0, #54	; 0x36
  401932:	4f23      	ldr	r7, [pc, #140]	; (4019c0 <ili9488_init+0x148>)
  401934:	47b8      	blx	r7
	ili9488_delay(100);
  401936:	2064      	movs	r0, #100	; 0x64
  401938:	4d22      	ldr	r5, [pc, #136]	; (4019c4 <ili9488_init+0x14c>)
  40193a:	47a8      	blx	r5
	param = 0x04;
  40193c:	2304      	movs	r3, #4
  40193e:	f8ad 300e 	strh.w	r3, [sp, #14]
	ili9488_write_register(ILI9488_CMD_CABC_CONTROL_9, &param, 1);
  401942:	2201      	movs	r2, #1
  401944:	4631      	mov	r1, r6
  401946:	20cf      	movs	r0, #207	; 0xcf
  401948:	47b8      	blx	r7
	ili9488_delay(100);
  40194a:	2064      	movs	r0, #100	; 0x64
  40194c:	47a8      	blx	r5
	param = 0x05;
  40194e:	2305      	movs	r3, #5
  401950:	f8ad 300e 	strh.w	r3, [sp, #14]
	ili9488_write_register(ILI9488_CMD_COLMOD_PIXEL_FORMAT_SET, &param, 1);
  401954:	2201      	movs	r2, #1
  401956:	4631      	mov	r1, r6
  401958:	203a      	movs	r0, #58	; 0x3a
  40195a:	47b8      	blx	r7
	ili9488_delay(100);
  40195c:	2064      	movs	r0, #100	; 0x64
  40195e:	47a8      	blx	r5
	ili9488_write_register(ILI9488_CMD_PARTIAL_MODE_ON, 0, 0);
  401960:	2200      	movs	r2, #0
  401962:	4611      	mov	r1, r2
  401964:	2012      	movs	r0, #18
  401966:	47b8      	blx	r7
	ili9488_delay(100);
  401968:	2064      	movs	r0, #100	; 0x64
  40196a:	47a8      	blx	r5
	ili9488_display_on();
  40196c:	4b19      	ldr	r3, [pc, #100]	; (4019d4 <ili9488_init+0x15c>)
  40196e:	4798      	blx	r3
	ili9488_delay(100);
  401970:	2064      	movs	r0, #100	; 0x64
  401972:	47a8      	blx	r5
	ili9488_set_display_direction(LANDSCAPE);
  401974:	2000      	movs	r0, #0
  401976:	4b18      	ldr	r3, [pc, #96]	; (4019d8 <ili9488_init+0x160>)
  401978:	4798      	blx	r3
	ili9488_delay(100);
  40197a:	2064      	movs	r0, #100	; 0x64
  40197c:	47a8      	blx	r5
	ili9488_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  40197e:	88a3      	ldrh	r3, [r4, #4]
  401980:	8822      	ldrh	r2, [r4, #0]
  401982:	2100      	movs	r1, #0
  401984:	4608      	mov	r0, r1
  401986:	4d15      	ldr	r5, [pc, #84]	; (4019dc <ili9488_init+0x164>)
  401988:	47a8      	blx	r5
	ili9488_set_foreground_color(p_opt->foreground_color);
  40198a:	68a0      	ldr	r0, [r4, #8]
  40198c:	4b14      	ldr	r3, [pc, #80]	; (4019e0 <ili9488_init+0x168>)
  40198e:	4798      	blx	r3
	ili9488_set_cursor_position(0, 0);
  401990:	2100      	movs	r1, #0
  401992:	4608      	mov	r0, r1
  401994:	4b13      	ldr	r3, [pc, #76]	; (4019e4 <ili9488_init+0x16c>)
  401996:	4798      	blx	r3
	return 0;
  401998:	2000      	movs	r0, #0
  40199a:	e7c1      	b.n	401920 <ili9488_init+0xa8>
  40199c:	00402701 	.word	0x00402701
  4019a0:	40080000 	.word	0x40080000
  4019a4:	00401b2d 	.word	0x00401b2d
  4019a8:	0a0a0403 	.word	0x0a0a0403
  4019ac:	00401b33 	.word	0x00401b33
  4019b0:	000a0004 	.word	0x000a0004
  4019b4:	00401b3b 	.word	0x00401b3b
  4019b8:	000f1003 	.word	0x000f1003
  4019bc:	00401b43 	.word	0x00401b43
  4019c0:	004016d5 	.word	0x004016d5
  4019c4:	00401721 	.word	0x00401721
  4019c8:	400e1200 	.word	0x400e1200
  4019cc:	00402271 	.word	0x00402271
  4019d0:	0040226d 	.word	0x0040226d
  4019d4:	004017e9 	.word	0x004017e9
  4019d8:	0040173d 	.word	0x0040173d
  4019dc:	00401769 	.word	0x00401769
  4019e0:	004017fd 	.word	0x004017fd
  4019e4:	00401815 	.word	0x00401815

004019e8 <ili9488_write_brightness>:
 * Configures the display for a given brightness value
 *
 * \param us_value brightness value need to written.
 */
void ili9488_write_brightness(uint16_t us_value)
{
  4019e8:	b500      	push	{lr}
  4019ea:	b083      	sub	sp, #12
  4019ec:	a902      	add	r1, sp, #8
  4019ee:	f821 0d02 	strh.w	r0, [r1, #-2]!
	ili9488_write_register(ILI9488_CMD_WRITE_DISPLAY_BRIGHTNESS, (ili9488_color_t *)&us_value, 1);
  4019f2:	2201      	movs	r2, #1
  4019f4:	2051      	movs	r0, #81	; 0x51
  4019f6:	4b02      	ldr	r3, [pc, #8]	; (401a00 <ili9488_write_brightness+0x18>)
  4019f8:	4798      	blx	r3
}
  4019fa:	b003      	add	sp, #12
  4019fc:	f85d fb04 	ldr.w	pc, [sp], #4
  401a00:	004016d5 	.word	0x004016d5

00401a04 <ili9488_set_limits>:
 * \param end_x The x coordinate of the bottom right corner
 * \param end_y The y coordinate of the bottom right corner
 */
void ili9488_set_limits(ili9488_coord_t start_x, ili9488_coord_t start_y,
		ili9488_coord_t end_x, ili9488_coord_t end_y)
{
  401a04:	b410      	push	{r4}
	limit_start_x = start_x;
  401a06:	4c05      	ldr	r4, [pc, #20]	; (401a1c <ili9488_set_limits+0x18>)
  401a08:	8020      	strh	r0, [r4, #0]
	limit_start_y = start_y;
  401a0a:	4805      	ldr	r0, [pc, #20]	; (401a20 <ili9488_set_limits+0x1c>)
  401a0c:	8001      	strh	r1, [r0, #0]
	limit_end_x = end_x;
  401a0e:	4905      	ldr	r1, [pc, #20]	; (401a24 <ili9488_set_limits+0x20>)
  401a10:	800a      	strh	r2, [r1, #0]
	limit_end_y = end_y;
  401a12:	4a05      	ldr	r2, [pc, #20]	; (401a28 <ili9488_set_limits+0x24>)
  401a14:	8013      	strh	r3, [r2, #0]
}
  401a16:	f85d 4b04 	ldr.w	r4, [sp], #4
  401a1a:	4770      	bx	lr
  401a1c:	20400d14 	.word	0x20400d14
  401a20:	20400d16 	.word	0x20400d16
  401a24:	20400d10 	.word	0x20400d10
  401a28:	20400d12 	.word	0x20400d12

00401a2c <ili9488_set_orientation>:
 *
 * \param flags Orientation flags to use, see \ref ILI9488_FLIP_X, \ref ILI9488_FLIP_Y
 *        and \ref ILI9488_SWITCH_XY.
 */
void ili9488_set_orientation(uint8_t flags)
{
  401a2c:	b500      	push	{lr}
  401a2e:	b083      	sub	sp, #12
	/* Flip X/Y and reverse X orientation and set BGR mode*/
	ili9488_color_t madctl = 0x68;

	if (flags & ILI9488_FLIP_X) {
  401a30:	f010 0f01 	tst.w	r0, #1
	ili9488_color_t madctl = 0x68;
  401a34:	bf0c      	ite	eq
  401a36:	2368      	moveq	r3, #104	; 0x68
		madctl &= ~(1 << 6);
  401a38:	2328      	movne	r3, #40	; 0x28
  401a3a:	f8ad 3006 	strh.w	r3, [sp, #6]
	}

	if (flags & ILI9488_FLIP_Y) {
  401a3e:	f010 0f02 	tst.w	r0, #2
  401a42:	d005      	beq.n	401a50 <ili9488_set_orientation+0x24>
		madctl |= 1 << 7;
  401a44:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  401a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401a4c:	f8ad 3006 	strh.w	r3, [sp, #6]
	}

	if (flags & ILI9488_SWITCH_XY) {
  401a50:	f010 0f04 	tst.w	r0, #4
  401a54:	d005      	beq.n	401a62 <ili9488_set_orientation+0x36>
		madctl &= ~(1 << 5);
  401a56:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  401a5a:	f023 0320 	bic.w	r3, r3, #32
  401a5e:	f8ad 3006 	strh.w	r3, [sp, #6]
	}

	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &madctl, 1);
  401a62:	2201      	movs	r2, #1
  401a64:	f10d 0106 	add.w	r1, sp, #6
  401a68:	2036      	movs	r0, #54	; 0x36
  401a6a:	4b02      	ldr	r3, [pc, #8]	; (401a74 <ili9488_set_orientation+0x48>)
  401a6c:	4798      	blx	r3
}
  401a6e:	b003      	add	sp, #12
  401a70:	f85d fb04 	ldr.w	pc, [sp], #4
  401a74:	004016d5 	.word	0x004016d5

00401a78 <ili9488_write_gram>:
 * \endcode
 *
 * \param color The color pixel to write to the screen
 */
void ili9488_write_gram(uint16_t color)
{
  401a78:	b510      	push	{r4, lr}
  401a7a:	4604      	mov	r4, r0
	ili9488_set_cursor_position(limit_start_x, limit_start_y);
  401a7c:	4b08      	ldr	r3, [pc, #32]	; (401aa0 <ili9488_write_gram+0x28>)
  401a7e:	8819      	ldrh	r1, [r3, #0]
  401a80:	4b08      	ldr	r3, [pc, #32]	; (401aa4 <ili9488_write_gram+0x2c>)
  401a82:	8818      	ldrh	r0, [r3, #0]
  401a84:	4b08      	ldr	r3, [pc, #32]	; (401aa8 <ili9488_write_gram+0x30>)
  401a86:	4798      	blx	r3
	ili9488_write_ram_prepare();
  401a88:	4b08      	ldr	r3, [pc, #32]	; (401aac <ili9488_write_gram+0x34>)
  401a8a:	4798      	blx	r3
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401a8c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401a90:	4807      	ldr	r0, [pc, #28]	; (401ab0 <ili9488_write_gram+0x38>)
  401a92:	4b08      	ldr	r3, [pc, #32]	; (401ab4 <ili9488_write_gram+0x3c>)
  401a94:	4798      	blx	r3
		*(volatile uint16_t *)(BOARD_ILI9488_ADDR) = lcd_data;
  401a96:	f04f 43c6 	mov.w	r3, #1660944384	; 0x63000000
  401a9a:	801c      	strh	r4, [r3, #0]
  401a9c:	bd10      	pop	{r4, pc}
  401a9e:	bf00      	nop
  401aa0:	20400d16 	.word	0x20400d16
  401aa4:	20400d14 	.word	0x20400d14
  401aa8:	00401815 	.word	0x00401815
  401aac:	004016b5 	.word	0x004016b5
  401ab0:	400e1200 	.word	0x400e1200
  401ab4:	0040226d 	.word	0x0040226d

00401ab8 <ili9488_duplicate_pixel>:
 *
 * \param color The color to write to the display
 * \param count The number of pixels to write with this color
 */
void ili9488_duplicate_pixel(const uint16_t color, uint32_t count)
{
  401ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401abc:	4605      	mov	r5, r0
  401abe:	460e      	mov	r6, r1
	ili9488_set_window(limit_start_x, limit_start_y, (limit_end_x - limit_start_x) + 1, (limit_end_y - limit_start_y) + 1);
  401ac0:	4b12      	ldr	r3, [pc, #72]	; (401b0c <ili9488_duplicate_pixel+0x54>)
  401ac2:	8818      	ldrh	r0, [r3, #0]
  401ac4:	4b12      	ldr	r3, [pc, #72]	; (401b10 <ili9488_duplicate_pixel+0x58>)
  401ac6:	8819      	ldrh	r1, [r3, #0]
  401ac8:	4b12      	ldr	r3, [pc, #72]	; (401b14 <ili9488_duplicate_pixel+0x5c>)
  401aca:	881b      	ldrh	r3, [r3, #0]
  401acc:	3301      	adds	r3, #1
  401ace:	1a5b      	subs	r3, r3, r1
  401ad0:	4a11      	ldr	r2, [pc, #68]	; (401b18 <ili9488_duplicate_pixel+0x60>)
  401ad2:	8812      	ldrh	r2, [r2, #0]
  401ad4:	3201      	adds	r2, #1
  401ad6:	1a12      	subs	r2, r2, r0
  401ad8:	b29b      	uxth	r3, r3
  401ada:	b292      	uxth	r2, r2
  401adc:	4c0f      	ldr	r4, [pc, #60]	; (401b1c <ili9488_duplicate_pixel+0x64>)
  401ade:	47a0      	blx	r4
	ili9488_write_ram_prepare();
  401ae0:	4b0f      	ldr	r3, [pc, #60]	; (401b20 <ili9488_duplicate_pixel+0x68>)
  401ae2:	4798      	blx	r3

#ifdef ILI9488_EBIMODE
	while (count--) {
  401ae4:	b17e      	cbz	r6, 401b06 <ili9488_duplicate_pixel+0x4e>
  401ae6:	1e74      	subs	r4, r6, #1
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401ae8:	f8df 803c 	ldr.w	r8, [pc, #60]	; 401b28 <ili9488_duplicate_pixel+0x70>
  401aec:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
  401af0:	4e0c      	ldr	r6, [pc, #48]	; (401b24 <ili9488_duplicate_pixel+0x6c>)
  401af2:	4639      	mov	r1, r7
  401af4:	4640      	mov	r0, r8
  401af6:	47b0      	blx	r6
  401af8:	f04f 43c6 	mov.w	r3, #1660944384	; 0x63000000
  401afc:	801d      	strh	r5, [r3, #0]
	while (count--) {
  401afe:	3c01      	subs	r4, #1
  401b00:	f1b4 3fff 	cmp.w	r4, #4294967295
  401b04:	d1f5      	bne.n	401af2 <ili9488_duplicate_pixel+0x3a>
  401b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401b0a:	bf00      	nop
  401b0c:	20400d14 	.word	0x20400d14
  401b10:	20400d16 	.word	0x20400d16
  401b14:	20400d12 	.word	0x20400d12
  401b18:	20400d10 	.word	0x20400d10
  401b1c:	00401769 	.word	0x00401769
  401b20:	004016b5 	.word	0x004016b5
  401b24:	0040226d 	.word	0x0040226d
  401b28:	400e1200 	.word	0x400e1200

00401b2c <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
  401b2c:	0109      	lsls	r1, r1, #4
  401b2e:	5042      	str	r2, [r0, r1]
  401b30:	4770      	bx	lr

00401b32 <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
  401b32:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  401b36:	604a      	str	r2, [r1, #4]
  401b38:	4770      	bx	lr

00401b3a <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
  401b3a:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  401b3e:	608a      	str	r2, [r1, #8]
  401b40:	4770      	bx	lr

00401b42 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
  401b42:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  401b46:	60ca      	str	r2, [r1, #12]
  401b48:	4770      	bx	lr

00401b4a <ssc_reset>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_reset(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_SWRST;
  401b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401b4e:	6003      	str	r3, [r0, #0]
	p_ssc->SSC_CMR = 0;
  401b50:	2300      	movs	r3, #0
  401b52:	6043      	str	r3, [r0, #4]
	p_ssc->SSC_RCMR = 0;
  401b54:	6103      	str	r3, [r0, #16]
	p_ssc->SSC_RFMR = 0;
  401b56:	6143      	str	r3, [r0, #20]
	p_ssc->SSC_TCMR = 0;
  401b58:	6183      	str	r3, [r0, #24]
	p_ssc->SSC_TFMR = 0;
  401b5a:	61c3      	str	r3, [r0, #28]
  401b5c:	4770      	bx	lr

00401b5e <ssc_enable_rx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_rx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_RXEN;
  401b5e:	2301      	movs	r3, #1
  401b60:	6003      	str	r3, [r0, #0]
  401b62:	4770      	bx	lr

00401b64 <ssc_disable_rx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_disable_rx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_RXDIS;
  401b64:	2302      	movs	r3, #2
  401b66:	6003      	str	r3, [r0, #0]
  401b68:	4770      	bx	lr

00401b6a <ssc_enable_tx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_tx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_TXEN;
  401b6a:	f44f 7380 	mov.w	r3, #256	; 0x100
  401b6e:	6003      	str	r3, [r0, #0]
  401b70:	4770      	bx	lr

00401b72 <ssc_disable_tx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_disable_tx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_TXDIS;
  401b72:	f44f 7300 	mov.w	r3, #512	; 0x200
  401b76:	6003      	str	r3, [r0, #0]
  401b78:	4770      	bx	lr

00401b7a <ssc_set_receiver>:
 * \param p_rx_clk_opt Pointer to the receiver clock configuration structure.
 * \param p_rx_data_frame Pointer to the receiver data frame configuration structure.
 */
void ssc_set_receiver(Ssc *p_ssc, clock_opt_t *p_rx_clk_opt,
		data_frame_opt_t *p_rx_data_frame)
{
  401b7a:	b430      	push	{r4, r5}
	if (p_rx_clk_opt == NULL) {
  401b7c:	2900      	cmp	r1, #0
  401b7e:	d030      	beq.n	401be2 <ssc_set_receiver+0x68>
  401b80:	460c      	mov	r4, r1
		p_ssc->SSC_RCMR = 0;
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  401b82:	6901      	ldr	r1, [r0, #16]
  401b84:	6823      	ldr	r3, [r4, #0]
  401b86:	6865      	ldr	r5, [r4, #4]
  401b88:	432b      	orrs	r3, r5
  401b8a:	430b      	orrs	r3, r1
  401b8c:	68a1      	ldr	r1, [r4, #8]
  401b8e:	430b      	orrs	r3, r1
  401b90:	68e1      	ldr	r1, [r4, #12]
  401b92:	430b      	orrs	r3, r1
  401b94:	69a1      	ldr	r1, [r4, #24]
  401b96:	430b      	orrs	r3, r1
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
				p_rx_clk_opt->ul_ckg |
				p_rx_clk_opt->ul_start_sel |
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
  401b98:	6921      	ldr	r1, [r4, #16]
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  401b9a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  401b9e:	6961      	ldr	r1, [r4, #20]
  401ba0:	0409      	lsls	r1, r1, #16
  401ba2:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  401ba6:	430b      	orrs	r3, r1
  401ba8:	6103      	str	r3, [r0, #16]
	}

	if (p_rx_data_frame == NULL) {
  401baa:	b1ea      	cbz	r2, 401be8 <ssc_set_receiver+0x6e>
		p_ssc->SSC_RFMR = 0;
	} else {
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  401bac:	6941      	ldr	r1, [r0, #20]
  401bae:	6853      	ldr	r3, [r2, #4]
  401bb0:	6954      	ldr	r4, [r2, #20]
  401bb2:	4323      	orrs	r3, r4
  401bb4:	6994      	ldr	r4, [r2, #24]
  401bb6:	4323      	orrs	r3, r4
  401bb8:	430b      	orrs	r3, r1
  401bba:	6811      	ldr	r1, [r2, #0]
  401bbc:	f001 011f 	and.w	r1, r1, #31
  401bc0:	430b      	orrs	r3, r1
				p_rx_data_frame->ul_msbf |
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
  401bc2:	6911      	ldr	r1, [r2, #16]
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  401bc4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  401bc8:	6891      	ldr	r1, [r2, #8]
  401bca:	0209      	lsls	r1, r1, #8
  401bcc:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  401bd0:	430b      	orrs	r3, r1
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  401bd2:	68d2      	ldr	r2, [r2, #12]
  401bd4:	0412      	lsls	r2, r2, #16
  401bd6:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  401bda:	4313      	orrs	r3, r2
  401bdc:	6143      	str	r3, [r0, #20]
				p_rx_data_frame->ul_fsos |
				p_rx_data_frame->ul_fsedge;
	}
}
  401bde:	bc30      	pop	{r4, r5}
  401be0:	4770      	bx	lr
		p_ssc->SSC_RCMR = 0;
  401be2:	2300      	movs	r3, #0
  401be4:	6103      	str	r3, [r0, #16]
  401be6:	e7e0      	b.n	401baa <ssc_set_receiver+0x30>
		p_ssc->SSC_RFMR = 0;
  401be8:	2300      	movs	r3, #0
  401bea:	6143      	str	r3, [r0, #20]
  401bec:	e7f7      	b.n	401bde <ssc_set_receiver+0x64>

00401bee <ssc_set_transmitter>:
 * \param p_tx_clk_opt Pointer to the transmitter clock configuration structure.
 * \param p_tx_data_frame Pointer to the transmitter data frame configuration structure.
 */
void ssc_set_transmitter(Ssc *p_ssc, clock_opt_t *p_tx_clk_opt,
		data_frame_opt_t *p_tx_data_frame)
{
  401bee:	b430      	push	{r4, r5}
	if (p_tx_clk_opt == NULL) {
  401bf0:	2900      	cmp	r1, #0
  401bf2:	d030      	beq.n	401c56 <ssc_set_transmitter+0x68>
  401bf4:	460c      	mov	r4, r1
		p_ssc->SSC_TCMR = 0;
	} else {
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  401bf6:	6981      	ldr	r1, [r0, #24]
  401bf8:	6823      	ldr	r3, [r4, #0]
  401bfa:	6865      	ldr	r5, [r4, #4]
  401bfc:	432b      	orrs	r3, r5
  401bfe:	430b      	orrs	r3, r1
  401c00:	68a1      	ldr	r1, [r4, #8]
  401c02:	430b      	orrs	r3, r1
  401c04:	68e1      	ldr	r1, [r4, #12]
  401c06:	430b      	orrs	r3, r1
  401c08:	69a1      	ldr	r1, [r4, #24]
  401c0a:	430b      	orrs	r3, r1
				p_tx_clk_opt->ul_cko | p_tx_clk_opt->ul_cki |
				p_tx_clk_opt->ul_ckg |
				p_tx_clk_opt->ul_start_sel |
				SSC_TCMR_PERIOD(p_tx_clk_opt->ul_period) |
  401c0c:	6921      	ldr	r1, [r4, #16]
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  401c0e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
				SSC_TCMR_STTDLY(p_tx_clk_opt->ul_sttdly);
  401c12:	6961      	ldr	r1, [r4, #20]
  401c14:	0409      	lsls	r1, r1, #16
  401c16:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  401c1a:	430b      	orrs	r3, r1
  401c1c:	6183      	str	r3, [r0, #24]
	}

	if (p_tx_data_frame == NULL) {
  401c1e:	b1ea      	cbz	r2, 401c5c <ssc_set_transmitter+0x6e>
		p_ssc->SSC_TFMR = 0;
	} else {
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  401c20:	69c1      	ldr	r1, [r0, #28]
  401c22:	6853      	ldr	r3, [r2, #4]
  401c24:	6954      	ldr	r4, [r2, #20]
  401c26:	4323      	orrs	r3, r4
  401c28:	6994      	ldr	r4, [r2, #24]
  401c2a:	4323      	orrs	r3, r4
  401c2c:	430b      	orrs	r3, r1
  401c2e:	6811      	ldr	r1, [r2, #0]
  401c30:	f001 011f 	and.w	r1, r1, #31
  401c34:	430b      	orrs	r3, r1
				p_tx_data_frame->ul_msbf |
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
				SSC_TFMR_FSLEN_EXT(p_tx_data_frame->ul_fslen_ext) |
  401c36:	6911      	ldr	r1, [r2, #16]
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  401c38:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
  401c3c:	6891      	ldr	r1, [r2, #8]
  401c3e:	0209      	lsls	r1, r1, #8
  401c40:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  401c44:	430b      	orrs	r3, r1
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
  401c46:	68d2      	ldr	r2, [r2, #12]
  401c48:	0412      	lsls	r2, r2, #16
  401c4a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  401c4e:	4313      	orrs	r3, r2
  401c50:	61c3      	str	r3, [r0, #28]
				p_tx_data_frame->ul_fsos |
				p_tx_data_frame->ul_fsedge;
	}
}
  401c52:	bc30      	pop	{r4, r5}
  401c54:	4770      	bx	lr
		p_ssc->SSC_TCMR = 0;
  401c56:	2300      	movs	r3, #0
  401c58:	6183      	str	r3, [r0, #24]
  401c5a:	e7e0      	b.n	401c1e <ssc_set_transmitter+0x30>
		p_ssc->SSC_TFMR = 0;
  401c5c:	2300      	movs	r3, #0
  401c5e:	61c3      	str	r3, [r0, #28]
  401c60:	e7f7      	b.n	401c52 <ssc_set_transmitter+0x64>

00401c62 <ssc_disable_interrupt>:
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void ssc_disable_interrupt(Ssc *p_ssc, uint32_t ul_sources)
{
	p_ssc->SSC_IDR = ul_sources;
  401c62:	6481      	str	r1, [r0, #72]	; 0x48
  401c64:	4770      	bx	lr
	...

00401c68 <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401c68:	4b28      	ldr	r3, [pc, #160]	; (401d0c <twihs_set_speed+0xa4>)
  401c6a:	4299      	cmp	r1, r3
  401c6c:	d84b      	bhi.n	401d06 <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  401c6e:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  401c72:	4299      	cmp	r1, r3
  401c74:	d92d      	bls.n	401cd2 <twihs_set_speed+0x6a>
{
  401c76:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401c78:	4c25      	ldr	r4, [pc, #148]	; (401d10 <twihs_set_speed+0xa8>)
  401c7a:	fba4 3402 	umull	r3, r4, r4, r2
  401c7e:	0ba4      	lsrs	r4, r4, #14
  401c80:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401c82:	4b24      	ldr	r3, [pc, #144]	; (401d14 <twihs_set_speed+0xac>)
  401c84:	440b      	add	r3, r1
  401c86:	009b      	lsls	r3, r3, #2
  401c88:	fbb2 f2f3 	udiv	r2, r2, r3
  401c8c:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401c8e:	2cff      	cmp	r4, #255	; 0xff
  401c90:	d91d      	bls.n	401cce <twihs_set_speed+0x66>
  401c92:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  401c94:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  401c96:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401c98:	2cff      	cmp	r4, #255	; 0xff
  401c9a:	d901      	bls.n	401ca0 <twihs_set_speed+0x38>
  401c9c:	2906      	cmp	r1, #6
  401c9e:	d9f9      	bls.n	401c94 <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401ca0:	2aff      	cmp	r2, #255	; 0xff
  401ca2:	d907      	bls.n	401cb4 <twihs_set_speed+0x4c>
  401ca4:	2906      	cmp	r1, #6
  401ca6:	d805      	bhi.n	401cb4 <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  401ca8:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  401caa:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401cac:	2aff      	cmp	r2, #255	; 0xff
  401cae:	d901      	bls.n	401cb4 <twihs_set_speed+0x4c>
  401cb0:	2906      	cmp	r1, #6
  401cb2:	d9f9      	bls.n	401ca8 <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401cb4:	0213      	lsls	r3, r2, #8
  401cb6:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  401cb8:	0409      	lsls	r1, r1, #16
  401cba:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401cbe:	430b      	orrs	r3, r1
  401cc0:	b2e4      	uxtb	r4, r4
  401cc2:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  401cc4:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  401cc6:	2000      	movs	r0, #0
}
  401cc8:	f85d 4b04 	ldr.w	r4, [sp], #4
  401ccc:	4770      	bx	lr
	uint32_t ckdiv = 0;
  401cce:	2100      	movs	r1, #0
  401cd0:	e7e6      	b.n	401ca0 <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401cd2:	0049      	lsls	r1, r1, #1
  401cd4:	fbb2 f2f1 	udiv	r2, r2, r1
  401cd8:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401cda:	2aff      	cmp	r2, #255	; 0xff
  401cdc:	d911      	bls.n	401d02 <twihs_set_speed+0x9a>
  401cde:	2300      	movs	r3, #0
			ckdiv++;
  401ce0:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  401ce2:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401ce4:	2aff      	cmp	r2, #255	; 0xff
  401ce6:	d901      	bls.n	401cec <twihs_set_speed+0x84>
  401ce8:	2b06      	cmp	r3, #6
  401cea:	d9f9      	bls.n	401ce0 <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401cec:	0211      	lsls	r1, r2, #8
  401cee:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  401cf0:	041b      	lsls	r3, r3, #16
  401cf2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401cf6:	430b      	orrs	r3, r1
  401cf8:	b2d2      	uxtb	r2, r2
  401cfa:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  401cfc:	6102      	str	r2, [r0, #16]
	return PASS;
  401cfe:	2000      	movs	r0, #0
  401d00:	4770      	bx	lr
	uint32_t ckdiv = 0;
  401d02:	2300      	movs	r3, #0
  401d04:	e7f2      	b.n	401cec <twihs_set_speed+0x84>
		return FAIL;
  401d06:	2001      	movs	r0, #1
  401d08:	4770      	bx	lr
  401d0a:	bf00      	nop
  401d0c:	00061a80 	.word	0x00061a80
  401d10:	057619f1 	.word	0x057619f1
  401d14:	3ffd1200 	.word	0x3ffd1200

00401d18 <twihs_master_init>:
{
  401d18:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  401d1a:	f04f 32ff 	mov.w	r2, #4294967295
  401d1e:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  401d20:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  401d22:	2280      	movs	r2, #128	; 0x80
  401d24:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  401d26:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401d28:	2208      	movs	r2, #8
  401d2a:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  401d2c:	2220      	movs	r2, #32
  401d2e:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401d30:	2204      	movs	r2, #4
  401d32:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401d34:	680a      	ldr	r2, [r1, #0]
  401d36:	6849      	ldr	r1, [r1, #4]
  401d38:	4b03      	ldr	r3, [pc, #12]	; (401d48 <twihs_master_init+0x30>)
  401d3a:	4798      	blx	r3
}
  401d3c:	2801      	cmp	r0, #1
  401d3e:	bf14      	ite	ne
  401d40:	2000      	movne	r0, #0
  401d42:	2001      	moveq	r0, #1
  401d44:	bd08      	pop	{r3, pc}
  401d46:	bf00      	nop
  401d48:	00401c69 	.word	0x00401c69

00401d4c <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  401d4c:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  401d4e:	2a00      	cmp	r2, #0
  401d50:	d04c      	beq.n	401dec <twihs_master_read+0xa0>
{
  401d52:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401d54:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401d56:	2600      	movs	r6, #0
  401d58:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401d5a:	684b      	ldr	r3, [r1, #4]
  401d5c:	021b      	lsls	r3, r3, #8
  401d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401d62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  401d66:	7c0d      	ldrb	r5, [r1, #16]
  401d68:	042d      	lsls	r5, r5, #16
  401d6a:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  401d6e:	432b      	orrs	r3, r5
  401d70:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401d72:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401d74:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  401d76:	b15d      	cbz	r5, 401d90 <twihs_master_read+0x44>
	val = addr[0];
  401d78:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  401d7a:	2d01      	cmp	r5, #1
  401d7c:	dd02      	ble.n	401d84 <twihs_master_read+0x38>
		val |= addr[1];
  401d7e:	784e      	ldrb	r6, [r1, #1]
  401d80:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	if (len > 2) {
  401d84:	2d02      	cmp	r5, #2
  401d86:	dd04      	ble.n	401d92 <twihs_master_read+0x46>
		val |= addr[2];
  401d88:	7889      	ldrb	r1, [r1, #2]
  401d8a:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  401d8e:	e000      	b.n	401d92 <twihs_master_read+0x46>
		return 0;
  401d90:	2300      	movs	r3, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401d92:	60c3      	str	r3, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  401d94:	2301      	movs	r3, #1
  401d96:	6003      	str	r3, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401d98:	2502      	movs	r5, #2
  401d9a:	e012      	b.n	401dc2 <twihs_master_read+0x76>
  401d9c:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  401d9e:	f013 0f02 	tst.w	r3, #2
  401da2:	d01b      	beq.n	401ddc <twihs_master_read+0x90>
		*buffer++ = p_twihs->TWIHS_RHR;
  401da4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401da6:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401da8:	6a03      	ldr	r3, [r0, #32]
  401daa:	f013 0f01 	tst.w	r3, #1
  401dae:	d0fb      	beq.n	401da8 <twihs_master_read+0x5c>
	p_twihs->TWIHS_SR;
  401db0:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  401db2:	2000      	movs	r0, #0
}
  401db4:	bc70      	pop	{r4, r5, r6}
  401db6:	4770      	bx	lr
		*buffer++ = p_twihs->TWIHS_RHR;
  401db8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401dba:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt > 0) {
  401dbe:	3a01      	subs	r2, #1
  401dc0:	d0f2      	beq.n	401da8 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  401dc2:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401dc4:	f413 7f80 	tst.w	r3, #256	; 0x100
  401dc8:	d114      	bne.n	401df4 <twihs_master_read+0xa8>
  401dca:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  401dce:	2a01      	cmp	r2, #1
  401dd0:	d0e4      	beq.n	401d9c <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  401dd2:	f013 0f02 	tst.w	r3, #2
  401dd6:	d1ef      	bne.n	401db8 <twihs_master_read+0x6c>
	while (cnt > 0) {
  401dd8:	2a00      	cmp	r2, #0
  401dda:	d0e5      	beq.n	401da8 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  401ddc:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401dde:	f413 7f80 	tst.w	r3, #256	; 0x100
  401de2:	d105      	bne.n	401df0 <twihs_master_read+0xa4>
		if (!timeout--) {
  401de4:	3901      	subs	r1, #1
  401de6:	d1f2      	bne.n	401dce <twihs_master_read+0x82>
			return TWIHS_ERROR_TIMEOUT;
  401de8:	2009      	movs	r0, #9
  401dea:	e7e3      	b.n	401db4 <twihs_master_read+0x68>
		return TWIHS_INVALID_ARGUMENT;
  401dec:	2001      	movs	r0, #1
  401dee:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401df0:	2005      	movs	r0, #5
  401df2:	e7df      	b.n	401db4 <twihs_master_read+0x68>
  401df4:	2005      	movs	r0, #5
  401df6:	e7dd      	b.n	401db4 <twihs_master_read+0x68>

00401df8 <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  401df8:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  401dfa:	2b00      	cmp	r3, #0
  401dfc:	d043      	beq.n	401e86 <twihs_master_write+0x8e>
{
  401dfe:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401e00:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401e02:	2600      	movs	r6, #0
  401e04:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401e06:	7c0a      	ldrb	r2, [r1, #16]
  401e08:	0412      	lsls	r2, r2, #16
  401e0a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401e0e:	684d      	ldr	r5, [r1, #4]
  401e10:	022d      	lsls	r5, r5, #8
  401e12:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401e16:	432a      	orrs	r2, r5
  401e18:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401e1a:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401e1c:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  401e1e:	b15d      	cbz	r5, 401e38 <twihs_master_write+0x40>
	val = addr[0];
  401e20:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  401e22:	2d01      	cmp	r5, #1
  401e24:	dd02      	ble.n	401e2c <twihs_master_write+0x34>
		val |= addr[1];
  401e26:	784e      	ldrb	r6, [r1, #1]
  401e28:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  401e2c:	2d02      	cmp	r5, #2
  401e2e:	dd04      	ble.n	401e3a <twihs_master_write+0x42>
		val |= addr[2];
  401e30:	7889      	ldrb	r1, [r1, #2]
  401e32:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  401e36:	e000      	b.n	401e3a <twihs_master_write+0x42>
		return 0;
  401e38:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401e3a:	60c2      	str	r2, [r0, #12]
  401e3c:	e004      	b.n	401e48 <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  401e3e:	f814 2b01 	ldrb.w	r2, [r4], #1
  401e42:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  401e44:	3b01      	subs	r3, #1
  401e46:	d00f      	beq.n	401e68 <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  401e48:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401e4a:	f412 7f80 	tst.w	r2, #256	; 0x100
  401e4e:	d11e      	bne.n	401e8e <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  401e50:	f012 0f04 	tst.w	r2, #4
  401e54:	d1f3      	bne.n	401e3e <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  401e56:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401e58:	f412 7f80 	tst.w	r2, #256	; 0x100
  401e5c:	d115      	bne.n	401e8a <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  401e5e:	f012 0f04 	tst.w	r2, #4
  401e62:	d1ec      	bne.n	401e3e <twihs_master_write+0x46>
	while (cnt > 0) {
  401e64:	2b00      	cmp	r3, #0
  401e66:	d1f6      	bne.n	401e56 <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  401e68:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401e6a:	f413 7f80 	tst.w	r3, #256	; 0x100
  401e6e:	d111      	bne.n	401e94 <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  401e70:	f013 0f04 	tst.w	r3, #4
  401e74:	d0f8      	beq.n	401e68 <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401e76:	2302      	movs	r3, #2
  401e78:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401e7a:	6a03      	ldr	r3, [r0, #32]
  401e7c:	f013 0f01 	tst.w	r3, #1
  401e80:	d0fb      	beq.n	401e7a <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  401e82:	2000      	movs	r0, #0
  401e84:	e004      	b.n	401e90 <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  401e86:	2001      	movs	r0, #1
  401e88:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401e8a:	2005      	movs	r0, #5
  401e8c:	e000      	b.n	401e90 <twihs_master_write+0x98>
  401e8e:	2005      	movs	r0, #5
}
  401e90:	bc70      	pop	{r4, r5, r6}
  401e92:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401e94:	2005      	movs	r0, #5
  401e96:	e7fb      	b.n	401e90 <twihs_master_write+0x98>

00401e98 <xdmac_configure_transfer>:
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  401e98:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  401e9c:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  401e9e:	6853      	ldr	r3, [r2, #4]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  401ea0:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  401ea2:	6893      	ldr	r3, [r2, #8]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  401ea4:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  401ea6:	6813      	ldr	r3, [r2, #0]
  401ea8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401eac:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  401eae:	6913      	ldr	r3, [r2, #16]
  401eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
  401eb4:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  401eb6:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  401eb8:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  401eba:	6993      	ldr	r3, [r2, #24]
  401ebc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401ec0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  401ec4:	69d3      	ldr	r3, [r2, #28]
  401ec6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401eca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  401ece:	68d3      	ldr	r3, [r2, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  401ed0:	678b      	str	r3, [r1, #120]	; 0x78
  401ed2:	4770      	bx	lr

00401ed4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401ed4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401ed6:	4810      	ldr	r0, [pc, #64]	; (401f18 <sysclk_init+0x44>)
  401ed8:	4b10      	ldr	r3, [pc, #64]	; (401f1c <sysclk_init+0x48>)
  401eda:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401edc:	213e      	movs	r1, #62	; 0x3e
  401ede:	2000      	movs	r0, #0
  401ee0:	4b0f      	ldr	r3, [pc, #60]	; (401f20 <sysclk_init+0x4c>)
  401ee2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  401ee4:	4c0f      	ldr	r4, [pc, #60]	; (401f24 <sysclk_init+0x50>)
  401ee6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  401ee8:	2800      	cmp	r0, #0
  401eea:	d0fc      	beq.n	401ee6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  401eec:	4b0e      	ldr	r3, [pc, #56]	; (401f28 <sysclk_init+0x54>)
  401eee:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401ef0:	4a0e      	ldr	r2, [pc, #56]	; (401f2c <sysclk_init+0x58>)
  401ef2:	4b0f      	ldr	r3, [pc, #60]	; (401f30 <sysclk_init+0x5c>)
  401ef4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  401ef6:	4c0f      	ldr	r4, [pc, #60]	; (401f34 <sysclk_init+0x60>)
  401ef8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401efa:	2800      	cmp	r0, #0
  401efc:	d0fc      	beq.n	401ef8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  401efe:	2002      	movs	r0, #2
  401f00:	4b0d      	ldr	r3, [pc, #52]	; (401f38 <sysclk_init+0x64>)
  401f02:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401f04:	2000      	movs	r0, #0
  401f06:	4b0d      	ldr	r3, [pc, #52]	; (401f3c <sysclk_init+0x68>)
  401f08:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401f0a:	4b0d      	ldr	r3, [pc, #52]	; (401f40 <sysclk_init+0x6c>)
  401f0c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401f0e:	4802      	ldr	r0, [pc, #8]	; (401f18 <sysclk_init+0x44>)
  401f10:	4b02      	ldr	r3, [pc, #8]	; (401f1c <sysclk_init+0x48>)
  401f12:	4798      	blx	r3
  401f14:	bd10      	pop	{r4, pc}
  401f16:	bf00      	nop
  401f18:	11e1a300 	.word	0x11e1a300
  401f1c:	00402999 	.word	0x00402999
  401f20:	0040267d 	.word	0x0040267d
  401f24:	004026d1 	.word	0x004026d1
  401f28:	004026e1 	.word	0x004026e1
  401f2c:	20183f01 	.word	0x20183f01
  401f30:	400e0600 	.word	0x400e0600
  401f34:	004026f1 	.word	0x004026f1
  401f38:	004025e1 	.word	0x004025e1
  401f3c:	00402619 	.word	0x00402619
  401f40:	0040288d 	.word	0x0040288d

00401f44 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  401f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401f46:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401f4a:	4b99      	ldr	r3, [pc, #612]	; (4021b0 <board_init+0x26c>)
  401f4c:	605a      	str	r2, [r3, #4]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401f4e:	f3bf 8f5f 	dmb	sy
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  401f52:	4f98      	ldr	r7, [pc, #608]	; (4021b4 <board_init+0x270>)
  401f54:	4638      	mov	r0, r7
  401f56:	4d98      	ldr	r5, [pc, #608]	; (4021b8 <board_init+0x274>)
  401f58:	47a8      	blx	r5
	dw_region_attr =
  401f5a:	4e98      	ldr	r6, [pc, #608]	; (4021bc <board_init+0x278>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401f5c:	ea40 0106 	orr.w	r1, r0, r6
  401f60:	2011      	movs	r0, #17
  401f62:	4c97      	ldr	r4, [pc, #604]	; (4021c0 <board_init+0x27c>)
  401f64:	47a0      	blx	r4
		mpu_cal_mpu_region_size(IFLASH_END_ADDRESS - IFLASH_START_ADDRESS) |
  401f66:	4897      	ldr	r0, [pc, #604]	; (4021c4 <board_init+0x280>)
  401f68:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401f6a:	4997      	ldr	r1, [pc, #604]	; (4021c8 <board_init+0x284>)
  401f6c:	4301      	orrs	r1, r0
  401f6e:	4897      	ldr	r0, [pc, #604]	; (4021cc <board_init+0x288>)
  401f70:	47a0      	blx	r4
		mpu_cal_mpu_region_size(DTCM_END_ADDRESS - DTCM_START_ADDRESS) |
  401f72:	4638      	mov	r0, r7
  401f74:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401f76:	ea40 0106 	orr.w	r1, r0, r6
  401f7a:	4895      	ldr	r0, [pc, #596]	; (4021d0 <board_init+0x28c>)
  401f7c:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SRAM_FIRST_END_ADDRESS - SRAM_FIRST_START_ADDRESS)
  401f7e:	4895      	ldr	r0, [pc, #596]	; (4021d4 <board_init+0x290>)
  401f80:	47a8      	blx	r5
	dw_region_attr =
  401f82:	f106 7608 	add.w	r6, r6, #35651584	; 0x2200000
  401f86:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401f8a:	ea40 0106 	orr.w	r1, r0, r6
  401f8e:	4892      	ldr	r0, [pc, #584]	; (4021d8 <board_init+0x294>)
  401f90:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SRAM_SECOND_END_ADDRESS - SRAM_SECOND_START_ADDRESS) |
  401f92:	4892      	ldr	r0, [pc, #584]	; (4021dc <board_init+0x298>)
  401f94:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401f96:	ea40 0106 	orr.w	r1, r0, r6
  401f9a:	4891      	ldr	r0, [pc, #580]	; (4021e0 <board_init+0x29c>)
  401f9c:	47a0      	blx	r4
		mpu_cal_mpu_region_size(PERIPHERALS_END_ADDRESS - PERIPHERALS_START_ADDRESS)
  401f9e:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  401fa2:	47a8      	blx	r5
	dw_region_attr = MPU_AP_FULL_ACCESS |
  401fa4:	4e8f      	ldr	r6, [pc, #572]	; (4021e4 <board_init+0x2a0>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401fa6:	ea40 0106 	orr.w	r1, r0, r6
  401faa:	488f      	ldr	r0, [pc, #572]	; (4021e8 <board_init+0x2a4>)
  401fac:	47a0      	blx	r4
		mpu_cal_mpu_region_size(EXT_EBI_END_ADDRESS - EXT_EBI_START_ADDRESS) |
  401fae:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  401fb2:	47a8      	blx	r5
	dw_region_attr =
  401fb4:	4f8d      	ldr	r7, [pc, #564]	; (4021ec <board_init+0x2a8>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401fb6:	ea40 0107 	orr.w	r1, r0, r7
  401fba:	488d      	ldr	r0, [pc, #564]	; (4021f0 <board_init+0x2ac>)
  401fbc:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SDRAM_END_ADDRESS - SDRAM_START_ADDRESS) |
  401fbe:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  401fc2:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401fc4:	498b      	ldr	r1, [pc, #556]	; (4021f4 <board_init+0x2b0>)
  401fc6:	4301      	orrs	r1, r0
  401fc8:	488b      	ldr	r0, [pc, #556]	; (4021f8 <board_init+0x2b4>)
  401fca:	47a0      	blx	r4
		mpu_cal_mpu_region_size(QSPI_END_ADDRESS - QSPI_START_ADDRESS) |
  401fcc:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  401fd0:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401fd2:	ea40 0107 	orr.w	r1, r0, r7
  401fd6:	4889      	ldr	r0, [pc, #548]	; (4021fc <board_init+0x2b8>)
  401fd8:	47a0      	blx	r4
		mpu_cal_mpu_region_size(USBHSRAM_END_ADDRESS - USBHSRAM_START_ADDRESS) |
  401fda:	4889      	ldr	r0, [pc, #548]	; (402200 <board_init+0x2bc>)
  401fdc:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401fde:	ea40 0106 	orr.w	r1, r0, r6
  401fe2:	4888      	ldr	r0, [pc, #544]	; (402204 <board_init+0x2c0>)
  401fe4:	47a0      	blx	r4
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  401fe6:	4c88      	ldr	r4, [pc, #544]	; (402208 <board_init+0x2c4>)
  401fe8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401fea:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
  401fee:	6263      	str	r3, [r4, #36]	; 0x24
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  401ff0:	2005      	movs	r0, #5
  401ff2:	4b86      	ldr	r3, [pc, #536]	; (40220c <board_init+0x2c8>)
  401ff4:	4798      	blx	r3
  __ASM volatile ("dsb");
  401ff6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401ffa:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401ffe:	4b84      	ldr	r3, [pc, #528]	; (402210 <board_init+0x2cc>)
  402000:	4a84      	ldr	r2, [pc, #528]	; (402214 <board_init+0x2d0>)
  402002:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  402004:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
  402008:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  40200a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40200e:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  402012:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  402016:	f023 0301 	bic.w	r3, r3, #1
  40201a:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  40201e:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
  402022:	f023 0301 	bic.w	r3, r3, #1
  402026:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  __ASM volatile ("dsb");
  40202a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40202e:	f3bf 8f6f 	isb	sy
  402032:	200a      	movs	r0, #10
  402034:	4c78      	ldr	r4, [pc, #480]	; (402218 <board_init+0x2d4>)
  402036:	47a0      	blx	r4
  402038:	200b      	movs	r0, #11
  40203a:	47a0      	blx	r4
  40203c:	200c      	movs	r0, #12
  40203e:	47a0      	blx	r4
  402040:	2010      	movs	r0, #16
  402042:	47a0      	blx	r4
  402044:	2011      	movs	r0, #17
  402046:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402048:	4c74      	ldr	r4, [pc, #464]	; (40221c <board_init+0x2d8>)
  40204a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  40204e:	6123      	str	r3, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402050:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402054:	6323      	str	r3, [r4, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402056:	4e72      	ldr	r6, [pc, #456]	; (402220 <board_init+0x2dc>)
  402058:	f44f 7500 	mov.w	r5, #512	; 0x200
  40205c:	6135      	str	r5, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40205e:	f8c6 50a0 	str.w	r5, [r6, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402062:	6335      	str	r5, [r6, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402064:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402066:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  40206a:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40206c:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  402070:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  402072:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  402074:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  402078:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40207a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  40207e:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402080:	6f63      	ldr	r3, [r4, #116]	; 0x74
  402082:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  402086:	6763      	str	r3, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  402088:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40208c:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  402090:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  402094:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  402098:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40209a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40209e:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4020a0:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4020a2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4020a6:	6f22      	ldr	r2, [r4, #112]	; 0x70
  4020a8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  4020ac:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4020ae:	6f62      	ldr	r2, [r4, #116]	; 0x74
  4020b0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  4020b4:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4020b6:	6063      	str	r3, [r4, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4020b8:	4a5a      	ldr	r2, [pc, #360]	; (402224 <board_init+0x2e0>)
  4020ba:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4020be:	f043 0310 	orr.w	r3, r3, #16
  4020c2:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  4020c6:	f502 22b2 	add.w	r2, r2, #364544	; 0x59000
  4020ca:	2310      	movs	r3, #16
  4020cc:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4020ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  4020d2:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  4020d4:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4020d6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4020da:	6f11      	ldr	r1, [r2, #112]	; 0x70
  4020dc:	4319      	orrs	r1, r3
  4020de:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4020e0:	6f51      	ldr	r1, [r2, #116]	; 0x74
  4020e2:	4319      	orrs	r1, r3
  4020e4:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4020e6:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  4020e8:	2208      	movs	r2, #8
  4020ea:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4020ec:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4020f0:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4020f2:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4020f4:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4020f8:	6f21      	ldr	r1, [r4, #112]	; 0x70
  4020fa:	f021 0108 	bic.w	r1, r1, #8
  4020fe:	6721      	str	r1, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402100:	6f61      	ldr	r1, [r4, #116]	; 0x74
  402102:	f021 0108 	bic.w	r1, r1, #8
  402106:	6761      	str	r1, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402108:	6062      	str	r2, [r4, #4]
		base->PIO_PUDR = mask;
  40210a:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40210c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  402110:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  402112:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402114:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402118:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40211a:	f022 0210 	bic.w	r2, r2, #16
  40211e:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402120:	6f62      	ldr	r2, [r4, #116]	; 0x74
  402122:	f022 0210 	bic.w	r2, r2, #16
  402126:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402128:	6063      	str	r3, [r4, #4]
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  40212a:	2300      	movs	r3, #0
  40212c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  402130:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  402134:	4630      	mov	r0, r6
  402136:	4f3c      	ldr	r7, [pc, #240]	; (402228 <board_init+0x2e4>)
  402138:	47b8      	blx	r7
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  40213a:	2300      	movs	r3, #0
  40213c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  402140:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  402144:	4630      	mov	r0, r6
  402146:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  402148:	2301      	movs	r3, #1
  40214a:	22ff      	movs	r2, #255	; 0xff
  40214c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402150:	4630      	mov	r0, r6
  402152:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  402154:	2301      	movs	r3, #1
  402156:	223f      	movs	r2, #63	; 0x3f
  402158:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40215c:	4833      	ldr	r0, [pc, #204]	; (40222c <board_init+0x2e8>)
  40215e:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  402160:	2301      	movs	r3, #1
  402162:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  402166:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40216a:	4620      	mov	r0, r4
  40216c:	47b8      	blx	r7
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  40216e:	2301      	movs	r3, #1
  402170:	f44f 7280 	mov.w	r2, #256	; 0x100
  402174:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402178:	4630      	mov	r0, r6
  40217a:	47b8      	blx	r7
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  40217c:	2301      	movs	r3, #1
  40217e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402182:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402186:	4630      	mov	r0, r6
  402188:	47b8      	blx	r7
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  40218a:	2301      	movs	r3, #1
  40218c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402190:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402194:	4826      	ldr	r0, [pc, #152]	; (402230 <board_init+0x2ec>)
  402196:	47b8      	blx	r7
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  402198:	2300      	movs	r3, #0
  40219a:	462a      	mov	r2, r5
  40219c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4021a0:	4630      	mov	r0, r6
  4021a2:	47b8      	blx	r7
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  4021a4:	4629      	mov	r1, r5
  4021a6:	4630      	mov	r0, r6
  4021a8:	4b22      	ldr	r3, [pc, #136]	; (402234 <board_init+0x2f0>)
  4021aa:	4798      	blx	r3
  4021ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4021ae:	bf00      	nop
  4021b0:	400e1850 	.word	0x400e1850
  4021b4:	003fffff 	.word	0x003fffff
  4021b8:	00402251 	.word	0x00402251
  4021bc:	01000001 	.word	0x01000001
  4021c0:	00402245 	.word	0x00402245
  4021c4:	001fffff 	.word	0x001fffff
  4021c8:	06230001 	.word	0x06230001
  4021cc:	00400012 	.word	0x00400012
  4021d0:	20000013 	.word	0x20000013
  4021d4:	0003ffff 	.word	0x0003ffff
  4021d8:	20400014 	.word	0x20400014
  4021dc:	0001ffff 	.word	0x0001ffff
  4021e0:	20440015 	.word	0x20440015
  4021e4:	13010001 	.word	0x13010001
  4021e8:	40000016 	.word	0x40000016
  4021ec:	03000001 	.word	0x03000001
  4021f0:	60000017 	.word	0x60000017
  4021f4:	03250001 	.word	0x03250001
  4021f8:	70000018 	.word	0x70000018
  4021fc:	80000019 	.word	0x80000019
  402200:	000fffff 	.word	0x000fffff
  402204:	a010001a 	.word	0xa010001a
  402208:	e000ed00 	.word	0xe000ed00
  40220c:	00402239 	.word	0x00402239
  402210:	400e0c00 	.word	0x400e0c00
  402214:	5a00080c 	.word	0x5a00080c
  402218:	00402701 	.word	0x00402701
  40221c:	400e0e00 	.word	0x400e0e00
  402220:	400e1200 	.word	0x400e1200
  402224:	40088000 	.word	0x40088000
  402228:	00402365 	.word	0x00402365
  40222c:	400e1600 	.word	0x400e1600
  402230:	400e1400 	.word	0x400e1400
  402234:	0040226d 	.word	0x0040226d

00402238 <mpu_enable>:
 *
 * \param dwMPUEnable  Enable/Disable the memory region.
 */
void mpu_enable(uint32_t dw_mpu_enable)
{
	MPU->CTRL = dw_mpu_enable ;
  402238:	4b01      	ldr	r3, [pc, #4]	; (402240 <mpu_enable+0x8>)
  40223a:	6058      	str	r0, [r3, #4]
  40223c:	4770      	bx	lr
  40223e:	bf00      	nop
  402240:	e000ed90 	.word	0xe000ed90

00402244 <mpu_set_region>:
 * \param dwRegionBaseAddr  Memory region base address.
 * \param dwRegionAttr  Memory region attributes.
 */
void mpu_set_region(uint32_t dw_region_base_addr, uint32_t dw_region_attr)
{
	MPU->RBAR = dw_region_base_addr;
  402244:	4b01      	ldr	r3, [pc, #4]	; (40224c <mpu_set_region+0x8>)
  402246:	60d8      	str	r0, [r3, #12]
	MPU->RASR = dw_region_attr;
  402248:	6119      	str	r1, [r3, #16]
  40224a:	4770      	bx	lr
  40224c:	e000ed90 	.word	0xe000ed90

00402250 <mpu_cal_mpu_region_size>:
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;

	while( dwReturnValue < 31 ) {
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  402250:	2820      	cmp	r0, #32
  402252:	d909      	bls.n	402268 <mpu_cal_mpu_region_size+0x18>
  402254:	2304      	movs	r3, #4
  402256:	2220      	movs	r2, #32
			break;
		} else {
			dwReturnValue++;
  402258:	3301      	adds	r3, #1
		}
		dwRegionSize <<= 1;
  40225a:	0052      	lsls	r2, r2, #1
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  40225c:	4290      	cmp	r0, r2
  40225e:	d901      	bls.n	402264 <mpu_cal_mpu_region_size+0x14>
  402260:	2b1e      	cmp	r3, #30
  402262:	d9f9      	bls.n	402258 <mpu_cal_mpu_region_size+0x8>
	}

	return ( dwReturnValue << 1 );
}
  402264:	0058      	lsls	r0, r3, #1
  402266:	4770      	bx	lr
	uint32_t dwReturnValue = 4;
  402268:	2304      	movs	r3, #4
  40226a:	e7fb      	b.n	402264 <mpu_cal_mpu_region_size+0x14>

0040226c <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  40226c:	6301      	str	r1, [r0, #48]	; 0x30
  40226e:	4770      	bx	lr

00402270 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  402270:	6341      	str	r1, [r0, #52]	; 0x34
  402272:	4770      	bx	lr

00402274 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  402274:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  402276:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40227a:	d03a      	beq.n	4022f2 <pio_set_peripheral+0x7e>
  40227c:	d813      	bhi.n	4022a6 <pio_set_peripheral+0x32>
  40227e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  402282:	d025      	beq.n	4022d0 <pio_set_peripheral+0x5c>
  402284:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402288:	d10a      	bne.n	4022a0 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40228a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40228c:	4313      	orrs	r3, r2
  40228e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402290:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402292:	6f41      	ldr	r1, [r0, #116]	; 0x74
  402294:	400b      	ands	r3, r1
  402296:	ea23 0302 	bic.w	r3, r3, r2
  40229a:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40229c:	6042      	str	r2, [r0, #4]
  40229e:	4770      	bx	lr
	switch (ul_type) {
  4022a0:	2900      	cmp	r1, #0
  4022a2:	d1fb      	bne.n	40229c <pio_set_peripheral+0x28>
  4022a4:	4770      	bx	lr
  4022a6:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4022aa:	d021      	beq.n	4022f0 <pio_set_peripheral+0x7c>
  4022ac:	d809      	bhi.n	4022c2 <pio_set_peripheral+0x4e>
  4022ae:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4022b2:	d1f3      	bne.n	40229c <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4022b4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4022b6:	4313      	orrs	r3, r2
  4022b8:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4022ba:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4022bc:	4313      	orrs	r3, r2
  4022be:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4022c0:	e7ec      	b.n	40229c <pio_set_peripheral+0x28>
	switch (ul_type) {
  4022c2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4022c6:	d013      	beq.n	4022f0 <pio_set_peripheral+0x7c>
  4022c8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4022cc:	d010      	beq.n	4022f0 <pio_set_peripheral+0x7c>
  4022ce:	e7e5      	b.n	40229c <pio_set_peripheral+0x28>
{
  4022d0:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4022d2:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4022d4:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4022d6:	43d3      	mvns	r3, r2
  4022d8:	4021      	ands	r1, r4
  4022da:	461c      	mov	r4, r3
  4022dc:	4019      	ands	r1, r3
  4022de:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4022e0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4022e2:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4022e4:	400b      	ands	r3, r1
  4022e6:	4023      	ands	r3, r4
  4022e8:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4022ea:	6042      	str	r2, [r0, #4]
}
  4022ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  4022f0:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4022f2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4022f4:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4022f6:	400b      	ands	r3, r1
  4022f8:	ea23 0302 	bic.w	r3, r3, r2
  4022fc:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4022fe:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402300:	4313      	orrs	r3, r2
  402302:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402304:	e7ca      	b.n	40229c <pio_set_peripheral+0x28>

00402306 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  402306:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  402308:	f012 0f01 	tst.w	r2, #1
  40230c:	d10d      	bne.n	40232a <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  40230e:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402310:	f012 0f0a 	tst.w	r2, #10
  402314:	d00b      	beq.n	40232e <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  402316:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  402318:	f012 0f02 	tst.w	r2, #2
  40231c:	d109      	bne.n	402332 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  40231e:	f012 0f08 	tst.w	r2, #8
  402322:	d008      	beq.n	402336 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  402324:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  402328:	e005      	b.n	402336 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  40232a:	6641      	str	r1, [r0, #100]	; 0x64
  40232c:	e7f0      	b.n	402310 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  40232e:	6241      	str	r1, [r0, #36]	; 0x24
  402330:	e7f2      	b.n	402318 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  402332:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  402336:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  402338:	6001      	str	r1, [r0, #0]
  40233a:	4770      	bx	lr

0040233c <pio_set_output>:
{
  40233c:	b410      	push	{r4}
  40233e:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  402340:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  402342:	b94c      	cbnz	r4, 402358 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  402344:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  402346:	b14b      	cbz	r3, 40235c <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  402348:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40234a:	b94a      	cbnz	r2, 402360 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  40234c:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  40234e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  402350:	6001      	str	r1, [r0, #0]
}
  402352:	f85d 4b04 	ldr.w	r4, [sp], #4
  402356:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  402358:	6641      	str	r1, [r0, #100]	; 0x64
  40235a:	e7f4      	b.n	402346 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  40235c:	6541      	str	r1, [r0, #84]	; 0x54
  40235e:	e7f4      	b.n	40234a <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  402360:	6301      	str	r1, [r0, #48]	; 0x30
  402362:	e7f4      	b.n	40234e <pio_set_output+0x12>

00402364 <pio_configure>:
{
  402364:	b570      	push	{r4, r5, r6, lr}
  402366:	b082      	sub	sp, #8
  402368:	4605      	mov	r5, r0
  40236a:	4616      	mov	r6, r2
  40236c:	461c      	mov	r4, r3
	switch (ul_type) {
  40236e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  402372:	d014      	beq.n	40239e <pio_configure+0x3a>
  402374:	d90a      	bls.n	40238c <pio_configure+0x28>
  402376:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40237a:	d024      	beq.n	4023c6 <pio_configure+0x62>
  40237c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402380:	d021      	beq.n	4023c6 <pio_configure+0x62>
  402382:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  402386:	d017      	beq.n	4023b8 <pio_configure+0x54>
		return 0;
  402388:	2000      	movs	r0, #0
  40238a:	e01a      	b.n	4023c2 <pio_configure+0x5e>
	switch (ul_type) {
  40238c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402390:	d005      	beq.n	40239e <pio_configure+0x3a>
  402392:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  402396:	d002      	beq.n	40239e <pio_configure+0x3a>
  402398:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40239c:	d1f4      	bne.n	402388 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40239e:	4632      	mov	r2, r6
  4023a0:	4628      	mov	r0, r5
  4023a2:	4b11      	ldr	r3, [pc, #68]	; (4023e8 <pio_configure+0x84>)
  4023a4:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4023a6:	f014 0f01 	tst.w	r4, #1
  4023aa:	d102      	bne.n	4023b2 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  4023ac:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  4023ae:	2001      	movs	r0, #1
  4023b0:	e007      	b.n	4023c2 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  4023b2:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  4023b4:	2001      	movs	r0, #1
  4023b6:	e004      	b.n	4023c2 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  4023b8:	461a      	mov	r2, r3
  4023ba:	4631      	mov	r1, r6
  4023bc:	4b0b      	ldr	r3, [pc, #44]	; (4023ec <pio_configure+0x88>)
  4023be:	4798      	blx	r3
	return 1;
  4023c0:	2001      	movs	r0, #1
}
  4023c2:	b002      	add	sp, #8
  4023c4:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4023c6:	f004 0301 	and.w	r3, r4, #1
  4023ca:	9300      	str	r3, [sp, #0]
  4023cc:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4023d0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4023d4:	bf14      	ite	ne
  4023d6:	2200      	movne	r2, #0
  4023d8:	2201      	moveq	r2, #1
  4023da:	4631      	mov	r1, r6
  4023dc:	4628      	mov	r0, r5
  4023de:	4c04      	ldr	r4, [pc, #16]	; (4023f0 <pio_configure+0x8c>)
  4023e0:	47a0      	blx	r4
	return 1;
  4023e2:	2001      	movs	r0, #1
		break;
  4023e4:	e7ed      	b.n	4023c2 <pio_configure+0x5e>
  4023e6:	bf00      	nop
  4023e8:	00402275 	.word	0x00402275
  4023ec:	00402307 	.word	0x00402307
  4023f0:	0040233d 	.word	0x0040233d

004023f4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4023f4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4023f6:	4770      	bx	lr

004023f8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4023f8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4023fa:	4770      	bx	lr

004023fc <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4023fc:	b570      	push	{r4, r5, r6, lr}
  4023fe:	b082      	sub	sp, #8
  402400:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402402:	4c46      	ldr	r4, [pc, #280]	; (40251c <pio_configure_pin+0x120>)
  402404:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  402408:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  40240a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  40240e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  402412:	d059      	beq.n	4024c8 <pio_configure_pin+0xcc>
  402414:	d80a      	bhi.n	40242c <pio_configure_pin+0x30>
  402416:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40241a:	d02f      	beq.n	40247c <pio_configure_pin+0x80>
  40241c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  402420:	d03f      	beq.n	4024a2 <pio_configure_pin+0xa6>
  402422:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  402426:	d016      	beq.n	402456 <pio_configure_pin+0x5a>
		return 0;
  402428:	2000      	movs	r0, #0
  40242a:	e012      	b.n	402452 <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  40242c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  402430:	d05d      	beq.n	4024ee <pio_configure_pin+0xf2>
  402432:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  402436:	d05a      	beq.n	4024ee <pio_configure_pin+0xf2>
  402438:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40243c:	d1f4      	bne.n	402428 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40243e:	f000 011f 	and.w	r1, r0, #31
  402442:	2601      	movs	r6, #1
  402444:	462a      	mov	r2, r5
  402446:	fa06 f101 	lsl.w	r1, r6, r1
  40244a:	4620      	mov	r0, r4
  40244c:	4b34      	ldr	r3, [pc, #208]	; (402520 <pio_configure_pin+0x124>)
  40244e:	4798      	blx	r3
	return 1;
  402450:	4630      	mov	r0, r6
}
  402452:	b002      	add	sp, #8
  402454:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  402456:	f000 001f 	and.w	r0, r0, #31
  40245a:	2601      	movs	r6, #1
  40245c:	4086      	lsls	r6, r0
  40245e:	4632      	mov	r2, r6
  402460:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402464:	4620      	mov	r0, r4
  402466:	4b2f      	ldr	r3, [pc, #188]	; (402524 <pio_configure_pin+0x128>)
  402468:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40246a:	f015 0f01 	tst.w	r5, #1
  40246e:	d102      	bne.n	402476 <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  402470:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  402472:	2001      	movs	r0, #1
  402474:	e7ed      	b.n	402452 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  402476:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  402478:	2001      	movs	r0, #1
  40247a:	e7ea      	b.n	402452 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40247c:	f000 001f 	and.w	r0, r0, #31
  402480:	2601      	movs	r6, #1
  402482:	4086      	lsls	r6, r0
  402484:	4632      	mov	r2, r6
  402486:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40248a:	4620      	mov	r0, r4
  40248c:	4b25      	ldr	r3, [pc, #148]	; (402524 <pio_configure_pin+0x128>)
  40248e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  402490:	f015 0f01 	tst.w	r5, #1
  402494:	d102      	bne.n	40249c <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  402496:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  402498:	2001      	movs	r0, #1
  40249a:	e7da      	b.n	402452 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  40249c:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  40249e:	2001      	movs	r0, #1
  4024a0:	e7d7      	b.n	402452 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4024a2:	f000 001f 	and.w	r0, r0, #31
  4024a6:	2601      	movs	r6, #1
  4024a8:	4086      	lsls	r6, r0
  4024aa:	4632      	mov	r2, r6
  4024ac:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4024b0:	4620      	mov	r0, r4
  4024b2:	4b1c      	ldr	r3, [pc, #112]	; (402524 <pio_configure_pin+0x128>)
  4024b4:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4024b6:	f015 0f01 	tst.w	r5, #1
  4024ba:	d102      	bne.n	4024c2 <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  4024bc:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4024be:	2001      	movs	r0, #1
  4024c0:	e7c7      	b.n	402452 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4024c2:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4024c4:	2001      	movs	r0, #1
  4024c6:	e7c4      	b.n	402452 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4024c8:	f000 001f 	and.w	r0, r0, #31
  4024cc:	2601      	movs	r6, #1
  4024ce:	4086      	lsls	r6, r0
  4024d0:	4632      	mov	r2, r6
  4024d2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4024d6:	4620      	mov	r0, r4
  4024d8:	4b12      	ldr	r3, [pc, #72]	; (402524 <pio_configure_pin+0x128>)
  4024da:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4024dc:	f015 0f01 	tst.w	r5, #1
  4024e0:	d102      	bne.n	4024e8 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  4024e2:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4024e4:	2001      	movs	r0, #1
  4024e6:	e7b4      	b.n	402452 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4024e8:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4024ea:	2001      	movs	r0, #1
  4024ec:	e7b1      	b.n	402452 <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4024ee:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4024f2:	f000 011f 	and.w	r1, r0, #31
  4024f6:	2601      	movs	r6, #1
  4024f8:	ea05 0306 	and.w	r3, r5, r6
  4024fc:	9300      	str	r3, [sp, #0]
  4024fe:	f3c5 0380 	ubfx	r3, r5, #2, #1
  402502:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  402506:	bf14      	ite	ne
  402508:	2200      	movne	r2, #0
  40250a:	2201      	moveq	r2, #1
  40250c:	fa06 f101 	lsl.w	r1, r6, r1
  402510:	4620      	mov	r0, r4
  402512:	4c05      	ldr	r4, [pc, #20]	; (402528 <pio_configure_pin+0x12c>)
  402514:	47a0      	blx	r4
	return 1;
  402516:	4630      	mov	r0, r6
		break;
  402518:	e79b      	b.n	402452 <pio_configure_pin+0x56>
  40251a:	bf00      	nop
  40251c:	00200707 	.word	0x00200707
  402520:	00402307 	.word	0x00402307
  402524:	00402275 	.word	0x00402275
  402528:	0040233d 	.word	0x0040233d

0040252c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40252c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402530:	4604      	mov	r4, r0
  402532:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  402534:	4b0e      	ldr	r3, [pc, #56]	; (402570 <pio_handler_process+0x44>)
  402536:	4798      	blx	r3
  402538:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40253a:	4620      	mov	r0, r4
  40253c:	4b0d      	ldr	r3, [pc, #52]	; (402574 <pio_handler_process+0x48>)
  40253e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  402540:	4005      	ands	r5, r0
  402542:	d013      	beq.n	40256c <pio_handler_process+0x40>
  402544:	4c0c      	ldr	r4, [pc, #48]	; (402578 <pio_handler_process+0x4c>)
  402546:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40254a:	e003      	b.n	402554 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40254c:	42b4      	cmp	r4, r6
  40254e:	d00d      	beq.n	40256c <pio_handler_process+0x40>
  402550:	3410      	adds	r4, #16
		while (status != 0) {
  402552:	b15d      	cbz	r5, 40256c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  402554:	6820      	ldr	r0, [r4, #0]
  402556:	4540      	cmp	r0, r8
  402558:	d1f8      	bne.n	40254c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40255a:	6861      	ldr	r1, [r4, #4]
  40255c:	4229      	tst	r1, r5
  40255e:	d0f5      	beq.n	40254c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402560:	68e3      	ldr	r3, [r4, #12]
  402562:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402564:	6863      	ldr	r3, [r4, #4]
  402566:	ea25 0503 	bic.w	r5, r5, r3
  40256a:	e7ef      	b.n	40254c <pio_handler_process+0x20>
  40256c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402570:	004023f5 	.word	0x004023f5
  402574:	004023f9 	.word	0x004023f9
  402578:	20400d18 	.word	0x20400d18

0040257c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40257c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40257e:	210a      	movs	r1, #10
  402580:	4801      	ldr	r0, [pc, #4]	; (402588 <PIOA_Handler+0xc>)
  402582:	4b02      	ldr	r3, [pc, #8]	; (40258c <PIOA_Handler+0x10>)
  402584:	4798      	blx	r3
  402586:	bd08      	pop	{r3, pc}
  402588:	400e0e00 	.word	0x400e0e00
  40258c:	0040252d 	.word	0x0040252d

00402590 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  402590:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  402592:	210b      	movs	r1, #11
  402594:	4801      	ldr	r0, [pc, #4]	; (40259c <PIOB_Handler+0xc>)
  402596:	4b02      	ldr	r3, [pc, #8]	; (4025a0 <PIOB_Handler+0x10>)
  402598:	4798      	blx	r3
  40259a:	bd08      	pop	{r3, pc}
  40259c:	400e1000 	.word	0x400e1000
  4025a0:	0040252d 	.word	0x0040252d

004025a4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4025a4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4025a6:	210c      	movs	r1, #12
  4025a8:	4801      	ldr	r0, [pc, #4]	; (4025b0 <PIOC_Handler+0xc>)
  4025aa:	4b02      	ldr	r3, [pc, #8]	; (4025b4 <PIOC_Handler+0x10>)
  4025ac:	4798      	blx	r3
  4025ae:	bd08      	pop	{r3, pc}
  4025b0:	400e1200 	.word	0x400e1200
  4025b4:	0040252d 	.word	0x0040252d

004025b8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4025b8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4025ba:	2110      	movs	r1, #16
  4025bc:	4801      	ldr	r0, [pc, #4]	; (4025c4 <PIOD_Handler+0xc>)
  4025be:	4b02      	ldr	r3, [pc, #8]	; (4025c8 <PIOD_Handler+0x10>)
  4025c0:	4798      	blx	r3
  4025c2:	bd08      	pop	{r3, pc}
  4025c4:	400e1400 	.word	0x400e1400
  4025c8:	0040252d 	.word	0x0040252d

004025cc <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4025cc:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4025ce:	2111      	movs	r1, #17
  4025d0:	4801      	ldr	r0, [pc, #4]	; (4025d8 <PIOE_Handler+0xc>)
  4025d2:	4b02      	ldr	r3, [pc, #8]	; (4025dc <PIOE_Handler+0x10>)
  4025d4:	4798      	blx	r3
  4025d6:	bd08      	pop	{r3, pc}
  4025d8:	400e1600 	.word	0x400e1600
  4025dc:	0040252d 	.word	0x0040252d

004025e0 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4025e0:	2803      	cmp	r0, #3
  4025e2:	d011      	beq.n	402608 <pmc_mck_set_division+0x28>
  4025e4:	2804      	cmp	r0, #4
  4025e6:	d012      	beq.n	40260e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4025e8:	2802      	cmp	r0, #2
  4025ea:	bf0c      	ite	eq
  4025ec:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4025f0:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4025f2:	4a08      	ldr	r2, [pc, #32]	; (402614 <pmc_mck_set_division+0x34>)
  4025f4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4025f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4025fa:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  4025fc:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4025fe:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402600:	f013 0f08 	tst.w	r3, #8
  402604:	d0fb      	beq.n	4025fe <pmc_mck_set_division+0x1e>
}
  402606:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  402608:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  40260c:	e7f1      	b.n	4025f2 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40260e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  402612:	e7ee      	b.n	4025f2 <pmc_mck_set_division+0x12>
  402614:	400e0600 	.word	0x400e0600

00402618 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402618:	4a17      	ldr	r2, [pc, #92]	; (402678 <pmc_switch_mck_to_pllack+0x60>)
  40261a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40261c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402620:	4318      	orrs	r0, r3
  402622:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402624:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402626:	f013 0f08 	tst.w	r3, #8
  40262a:	d10a      	bne.n	402642 <pmc_switch_mck_to_pllack+0x2a>
  40262c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402630:	4911      	ldr	r1, [pc, #68]	; (402678 <pmc_switch_mck_to_pllack+0x60>)
  402632:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402634:	f012 0f08 	tst.w	r2, #8
  402638:	d103      	bne.n	402642 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40263a:	3b01      	subs	r3, #1
  40263c:	d1f9      	bne.n	402632 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40263e:	2001      	movs	r0, #1
  402640:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402642:	4a0d      	ldr	r2, [pc, #52]	; (402678 <pmc_switch_mck_to_pllack+0x60>)
  402644:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402646:	f023 0303 	bic.w	r3, r3, #3
  40264a:	f043 0302 	orr.w	r3, r3, #2
  40264e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402650:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402652:	f013 0f08 	tst.w	r3, #8
  402656:	d10a      	bne.n	40266e <pmc_switch_mck_to_pllack+0x56>
  402658:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40265c:	4906      	ldr	r1, [pc, #24]	; (402678 <pmc_switch_mck_to_pllack+0x60>)
  40265e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402660:	f012 0f08 	tst.w	r2, #8
  402664:	d105      	bne.n	402672 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402666:	3b01      	subs	r3, #1
  402668:	d1f9      	bne.n	40265e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40266a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40266c:	4770      	bx	lr
	return 0;
  40266e:	2000      	movs	r0, #0
  402670:	4770      	bx	lr
  402672:	2000      	movs	r0, #0
  402674:	4770      	bx	lr
  402676:	bf00      	nop
  402678:	400e0600 	.word	0x400e0600

0040267c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40267c:	b9a0      	cbnz	r0, 4026a8 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40267e:	480e      	ldr	r0, [pc, #56]	; (4026b8 <pmc_switch_mainck_to_xtal+0x3c>)
  402680:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  402682:	0209      	lsls	r1, r1, #8
  402684:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402686:	4a0d      	ldr	r2, [pc, #52]	; (4026bc <pmc_switch_mainck_to_xtal+0x40>)
  402688:	401a      	ands	r2, r3
  40268a:	4b0d      	ldr	r3, [pc, #52]	; (4026c0 <pmc_switch_mainck_to_xtal+0x44>)
  40268c:	4313      	orrs	r3, r2
  40268e:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402690:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402692:	4602      	mov	r2, r0
  402694:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402696:	f013 0f01 	tst.w	r3, #1
  40269a:	d0fb      	beq.n	402694 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40269c:	4a06      	ldr	r2, [pc, #24]	; (4026b8 <pmc_switch_mainck_to_xtal+0x3c>)
  40269e:	6a11      	ldr	r1, [r2, #32]
  4026a0:	4b08      	ldr	r3, [pc, #32]	; (4026c4 <pmc_switch_mainck_to_xtal+0x48>)
  4026a2:	430b      	orrs	r3, r1
  4026a4:	6213      	str	r3, [r2, #32]
  4026a6:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4026a8:	4903      	ldr	r1, [pc, #12]	; (4026b8 <pmc_switch_mainck_to_xtal+0x3c>)
  4026aa:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4026ac:	4a06      	ldr	r2, [pc, #24]	; (4026c8 <pmc_switch_mainck_to_xtal+0x4c>)
  4026ae:	401a      	ands	r2, r3
  4026b0:	4b06      	ldr	r3, [pc, #24]	; (4026cc <pmc_switch_mainck_to_xtal+0x50>)
  4026b2:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4026b4:	620b      	str	r3, [r1, #32]
  4026b6:	4770      	bx	lr
  4026b8:	400e0600 	.word	0x400e0600
  4026bc:	ffc8fffc 	.word	0xffc8fffc
  4026c0:	00370001 	.word	0x00370001
  4026c4:	01370000 	.word	0x01370000
  4026c8:	fec8fffc 	.word	0xfec8fffc
  4026cc:	01370002 	.word	0x01370002

004026d0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4026d0:	4b02      	ldr	r3, [pc, #8]	; (4026dc <pmc_osc_is_ready_mainck+0xc>)
  4026d2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4026d4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4026d8:	4770      	bx	lr
  4026da:	bf00      	nop
  4026dc:	400e0600 	.word	0x400e0600

004026e0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4026e0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4026e4:	4b01      	ldr	r3, [pc, #4]	; (4026ec <pmc_disable_pllack+0xc>)
  4026e6:	629a      	str	r2, [r3, #40]	; 0x28
  4026e8:	4770      	bx	lr
  4026ea:	bf00      	nop
  4026ec:	400e0600 	.word	0x400e0600

004026f0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4026f0:	4b02      	ldr	r3, [pc, #8]	; (4026fc <pmc_is_locked_pllack+0xc>)
  4026f2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4026f4:	f000 0002 	and.w	r0, r0, #2
  4026f8:	4770      	bx	lr
  4026fa:	bf00      	nop
  4026fc:	400e0600 	.word	0x400e0600

00402700 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  402700:	283f      	cmp	r0, #63	; 0x3f
  402702:	d81e      	bhi.n	402742 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  402704:	281f      	cmp	r0, #31
  402706:	d80c      	bhi.n	402722 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402708:	4b11      	ldr	r3, [pc, #68]	; (402750 <pmc_enable_periph_clk+0x50>)
  40270a:	699a      	ldr	r2, [r3, #24]
  40270c:	2301      	movs	r3, #1
  40270e:	4083      	lsls	r3, r0
  402710:	4393      	bics	r3, r2
  402712:	d018      	beq.n	402746 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  402714:	2301      	movs	r3, #1
  402716:	fa03 f000 	lsl.w	r0, r3, r0
  40271a:	4b0d      	ldr	r3, [pc, #52]	; (402750 <pmc_enable_periph_clk+0x50>)
  40271c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40271e:	2000      	movs	r0, #0
  402720:	4770      	bx	lr
		ul_id -= 32;
  402722:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402724:	4b0a      	ldr	r3, [pc, #40]	; (402750 <pmc_enable_periph_clk+0x50>)
  402726:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40272a:	2301      	movs	r3, #1
  40272c:	4083      	lsls	r3, r0
  40272e:	4393      	bics	r3, r2
  402730:	d00b      	beq.n	40274a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  402732:	2301      	movs	r3, #1
  402734:	fa03 f000 	lsl.w	r0, r3, r0
  402738:	4b05      	ldr	r3, [pc, #20]	; (402750 <pmc_enable_periph_clk+0x50>)
  40273a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40273e:	2000      	movs	r0, #0
  402740:	4770      	bx	lr
		return 1;
  402742:	2001      	movs	r0, #1
  402744:	4770      	bx	lr
	return 0;
  402746:	2000      	movs	r0, #0
  402748:	4770      	bx	lr
  40274a:	2000      	movs	r0, #0
}
  40274c:	4770      	bx	lr
  40274e:	bf00      	nop
  402750:	400e0600 	.word	0x400e0600

00402754 <pmc_pck_set_prescaler>:
 *
 * \param ul_id Peripheral ID.
 * \param ul_pres Prescaler value.
 */
void pmc_pck_set_prescaler(uint32_t ul_id, uint32_t ul_pres)
{
  402754:	4a09      	ldr	r2, [pc, #36]	; (40277c <pmc_pck_set_prescaler+0x28>)
  402756:	eb02 0280 	add.w	r2, r2, r0, lsl #2
	PMC->PMC_PCK[ul_id] =
			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_PRES_Msk) | ul_pres;
  40275a:	6c13      	ldr	r3, [r2, #64]	; 0x40
  40275c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
  402760:	4319      	orrs	r1, r3
	PMC->PMC_PCK[ul_id] =
  402762:	6411      	str	r1, [r2, #64]	; 0x40
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  402764:	f44f 7380 	mov.w	r3, #256	; 0x100
  402768:	fa03 f000 	lsl.w	r0, r3, r0
  40276c:	4b03      	ldr	r3, [pc, #12]	; (40277c <pmc_pck_set_prescaler+0x28>)
  40276e:	681a      	ldr	r2, [r3, #0]
  402770:	4202      	tst	r2, r0
  402772:	d002      	beq.n	40277a <pmc_pck_set_prescaler+0x26>
			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
  402774:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  402776:	4210      	tst	r0, r2
  402778:	d0f9      	beq.n	40276e <pmc_pck_set_prescaler+0x1a>
  40277a:	4770      	bx	lr
  40277c:	400e0600 	.word	0x400e0600

00402780 <pmc_pck_set_source>:
 *
 * \param ul_id Peripheral ID.
 * \param ul_source Source selection value.
 */
void pmc_pck_set_source(uint32_t ul_id, uint32_t ul_source)
{
  402780:	4a09      	ldr	r2, [pc, #36]	; (4027a8 <pmc_pck_set_source+0x28>)
  402782:	eb02 0280 	add.w	r2, r2, r0, lsl #2
	PMC->PMC_PCK[ul_id] =
			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_CSS_Msk) | ul_source;
  402786:	6c13      	ldr	r3, [r2, #64]	; 0x40
  402788:	f023 0307 	bic.w	r3, r3, #7
  40278c:	4319      	orrs	r1, r3
	PMC->PMC_PCK[ul_id] =
  40278e:	6411      	str	r1, [r2, #64]	; 0x40
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  402790:	f44f 7380 	mov.w	r3, #256	; 0x100
  402794:	fa03 f000 	lsl.w	r0, r3, r0
  402798:	4b03      	ldr	r3, [pc, #12]	; (4027a8 <pmc_pck_set_source+0x28>)
  40279a:	681a      	ldr	r2, [r3, #0]
  40279c:	4202      	tst	r2, r0
  40279e:	d002      	beq.n	4027a6 <pmc_pck_set_source+0x26>
			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
  4027a0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  4027a2:	4210      	tst	r0, r2
  4027a4:	d0f9      	beq.n	40279a <pmc_pck_set_source+0x1a>
  4027a6:	4770      	bx	lr
  4027a8:	400e0600 	.word	0x400e0600

004027ac <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  4027ac:	f44f 7380 	mov.w	r3, #256	; 0x100
  4027b0:	fa03 f000 	lsl.w	r0, r3, r0
  4027b4:	4b01      	ldr	r3, [pc, #4]	; (4027bc <pmc_enable_pck+0x10>)
  4027b6:	6018      	str	r0, [r3, #0]
  4027b8:	4770      	bx	lr
  4027ba:	bf00      	nop
  4027bc:	400e0600 	.word	0x400e0600

004027c0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4027c0:	e7fe      	b.n	4027c0 <Dummy_Handler>

004027c2 <Dummy_Handler2>:
	while (1) {
	}
}

void Dummy_Handler2(void)
{
  4027c2:	e7fe      	b.n	4027c2 <Dummy_Handler2>

004027c4 <Reset_Handler>:
{
  4027c4:	b500      	push	{lr}
  4027c6:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4027c8:	4b25      	ldr	r3, [pc, #148]	; (402860 <Reset_Handler+0x9c>)
  4027ca:	4a26      	ldr	r2, [pc, #152]	; (402864 <Reset_Handler+0xa0>)
  4027cc:	429a      	cmp	r2, r3
  4027ce:	d010      	beq.n	4027f2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4027d0:	4b25      	ldr	r3, [pc, #148]	; (402868 <Reset_Handler+0xa4>)
  4027d2:	4a23      	ldr	r2, [pc, #140]	; (402860 <Reset_Handler+0x9c>)
  4027d4:	429a      	cmp	r2, r3
  4027d6:	d20c      	bcs.n	4027f2 <Reset_Handler+0x2e>
  4027d8:	3b01      	subs	r3, #1
  4027da:	1a9b      	subs	r3, r3, r2
  4027dc:	f023 0303 	bic.w	r3, r3, #3
  4027e0:	3304      	adds	r3, #4
  4027e2:	4413      	add	r3, r2
  4027e4:	491f      	ldr	r1, [pc, #124]	; (402864 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4027e6:	f851 0b04 	ldr.w	r0, [r1], #4
  4027ea:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4027ee:	429a      	cmp	r2, r3
  4027f0:	d1f9      	bne.n	4027e6 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4027f2:	4b1e      	ldr	r3, [pc, #120]	; (40286c <Reset_Handler+0xa8>)
  4027f4:	4a1e      	ldr	r2, [pc, #120]	; (402870 <Reset_Handler+0xac>)
  4027f6:	429a      	cmp	r2, r3
  4027f8:	d20a      	bcs.n	402810 <Reset_Handler+0x4c>
  4027fa:	3b01      	subs	r3, #1
  4027fc:	1a9b      	subs	r3, r3, r2
  4027fe:	f023 0303 	bic.w	r3, r3, #3
  402802:	3304      	adds	r3, #4
  402804:	4413      	add	r3, r2
                *pDest++ = 0;
  402806:	2100      	movs	r1, #0
  402808:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  40280c:	4293      	cmp	r3, r2
  40280e:	d1fb      	bne.n	402808 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  402810:	4a18      	ldr	r2, [pc, #96]	; (402874 <Reset_Handler+0xb0>)
  402812:	4b19      	ldr	r3, [pc, #100]	; (402878 <Reset_Handler+0xb4>)
  402814:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402818:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40281a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40281e:	fab3 f383 	clz	r3, r3
  402822:	095b      	lsrs	r3, r3, #5
  402824:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402826:	b672      	cpsid	i
  __ASM volatile ("dmb");
  402828:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40282c:	2200      	movs	r2, #0
  40282e:	4b13      	ldr	r3, [pc, #76]	; (40287c <Reset_Handler+0xb8>)
  402830:	701a      	strb	r2, [r3, #0]
	return flags;
  402832:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  402834:	4a12      	ldr	r2, [pc, #72]	; (402880 <Reset_Handler+0xbc>)
  402836:	6813      	ldr	r3, [r2, #0]
  402838:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40283c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40283e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402842:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402846:	b129      	cbz	r1, 402854 <Reset_Handler+0x90>
		cpu_irq_enable();
  402848:	2201      	movs	r2, #1
  40284a:	4b0c      	ldr	r3, [pc, #48]	; (40287c <Reset_Handler+0xb8>)
  40284c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40284e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402852:	b662      	cpsie	i
        __libc_init_array();
  402854:	4b0b      	ldr	r3, [pc, #44]	; (402884 <Reset_Handler+0xc0>)
  402856:	4798      	blx	r3
        main();
  402858:	4b0b      	ldr	r3, [pc, #44]	; (402888 <Reset_Handler+0xc4>)
  40285a:	4798      	blx	r3
  40285c:	e7fe      	b.n	40285c <Reset_Handler+0x98>
  40285e:	bf00      	nop
  402860:	20400000 	.word	0x20400000
  402864:	004074bc 	.word	0x004074bc
  402868:	204009f0 	.word	0x204009f0
  40286c:	20403208 	.word	0x20403208
  402870:	204009f0 	.word	0x204009f0
  402874:	e000ed00 	.word	0xe000ed00
  402878:	00400000 	.word	0x00400000
  40287c:	20400034 	.word	0x20400034
  402880:	e000ed88 	.word	0xe000ed88
  402884:	004033a5 	.word	0x004033a5
  402888:	00402a75 	.word	0x00402a75

0040288c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  40288c:	4b3b      	ldr	r3, [pc, #236]	; (40297c <SystemCoreClockUpdate+0xf0>)
  40288e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402890:	f003 0303 	and.w	r3, r3, #3
  402894:	2b01      	cmp	r3, #1
  402896:	d01d      	beq.n	4028d4 <SystemCoreClockUpdate+0x48>
  402898:	b183      	cbz	r3, 4028bc <SystemCoreClockUpdate+0x30>
  40289a:	2b02      	cmp	r3, #2
  40289c:	d036      	beq.n	40290c <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40289e:	4b37      	ldr	r3, [pc, #220]	; (40297c <SystemCoreClockUpdate+0xf0>)
  4028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4028a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4028a6:	2b70      	cmp	r3, #112	; 0x70
  4028a8:	d05f      	beq.n	40296a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4028aa:	4b34      	ldr	r3, [pc, #208]	; (40297c <SystemCoreClockUpdate+0xf0>)
  4028ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4028ae:	4934      	ldr	r1, [pc, #208]	; (402980 <SystemCoreClockUpdate+0xf4>)
  4028b0:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4028b4:	680b      	ldr	r3, [r1, #0]
  4028b6:	40d3      	lsrs	r3, r2
  4028b8:	600b      	str	r3, [r1, #0]
  4028ba:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4028bc:	4b31      	ldr	r3, [pc, #196]	; (402984 <SystemCoreClockUpdate+0xf8>)
  4028be:	695b      	ldr	r3, [r3, #20]
  4028c0:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4028c4:	bf14      	ite	ne
  4028c6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4028ca:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4028ce:	4b2c      	ldr	r3, [pc, #176]	; (402980 <SystemCoreClockUpdate+0xf4>)
  4028d0:	601a      	str	r2, [r3, #0]
  4028d2:	e7e4      	b.n	40289e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4028d4:	4b29      	ldr	r3, [pc, #164]	; (40297c <SystemCoreClockUpdate+0xf0>)
  4028d6:	6a1b      	ldr	r3, [r3, #32]
  4028d8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4028dc:	d003      	beq.n	4028e6 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4028de:	4a2a      	ldr	r2, [pc, #168]	; (402988 <SystemCoreClockUpdate+0xfc>)
  4028e0:	4b27      	ldr	r3, [pc, #156]	; (402980 <SystemCoreClockUpdate+0xf4>)
  4028e2:	601a      	str	r2, [r3, #0]
  4028e4:	e7db      	b.n	40289e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4028e6:	4a29      	ldr	r2, [pc, #164]	; (40298c <SystemCoreClockUpdate+0x100>)
  4028e8:	4b25      	ldr	r3, [pc, #148]	; (402980 <SystemCoreClockUpdate+0xf4>)
  4028ea:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4028ec:	4b23      	ldr	r3, [pc, #140]	; (40297c <SystemCoreClockUpdate+0xf0>)
  4028ee:	6a1b      	ldr	r3, [r3, #32]
  4028f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4028f4:	2b10      	cmp	r3, #16
  4028f6:	d005      	beq.n	402904 <SystemCoreClockUpdate+0x78>
  4028f8:	2b20      	cmp	r3, #32
  4028fa:	d1d0      	bne.n	40289e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4028fc:	4a22      	ldr	r2, [pc, #136]	; (402988 <SystemCoreClockUpdate+0xfc>)
  4028fe:	4b20      	ldr	r3, [pc, #128]	; (402980 <SystemCoreClockUpdate+0xf4>)
  402900:	601a      	str	r2, [r3, #0]
          break;
  402902:	e7cc      	b.n	40289e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  402904:	4a22      	ldr	r2, [pc, #136]	; (402990 <SystemCoreClockUpdate+0x104>)
  402906:	4b1e      	ldr	r3, [pc, #120]	; (402980 <SystemCoreClockUpdate+0xf4>)
  402908:	601a      	str	r2, [r3, #0]
          break;
  40290a:	e7c8      	b.n	40289e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40290c:	4b1b      	ldr	r3, [pc, #108]	; (40297c <SystemCoreClockUpdate+0xf0>)
  40290e:	6a1b      	ldr	r3, [r3, #32]
  402910:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402914:	d016      	beq.n	402944 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402916:	4a1c      	ldr	r2, [pc, #112]	; (402988 <SystemCoreClockUpdate+0xfc>)
  402918:	4b19      	ldr	r3, [pc, #100]	; (402980 <SystemCoreClockUpdate+0xf4>)
  40291a:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  40291c:	4b17      	ldr	r3, [pc, #92]	; (40297c <SystemCoreClockUpdate+0xf0>)
  40291e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402920:	f003 0303 	and.w	r3, r3, #3
  402924:	2b02      	cmp	r3, #2
  402926:	d1ba      	bne.n	40289e <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402928:	4a14      	ldr	r2, [pc, #80]	; (40297c <SystemCoreClockUpdate+0xf0>)
  40292a:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40292c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40292e:	4814      	ldr	r0, [pc, #80]	; (402980 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402930:	f3c1 410a 	ubfx	r1, r1, #16, #11
  402934:	6803      	ldr	r3, [r0, #0]
  402936:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40293a:	b2d2      	uxtb	r2, r2
  40293c:	fbb3 f3f2 	udiv	r3, r3, r2
  402940:	6003      	str	r3, [r0, #0]
  402942:	e7ac      	b.n	40289e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402944:	4a11      	ldr	r2, [pc, #68]	; (40298c <SystemCoreClockUpdate+0x100>)
  402946:	4b0e      	ldr	r3, [pc, #56]	; (402980 <SystemCoreClockUpdate+0xf4>)
  402948:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40294a:	4b0c      	ldr	r3, [pc, #48]	; (40297c <SystemCoreClockUpdate+0xf0>)
  40294c:	6a1b      	ldr	r3, [r3, #32]
  40294e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402952:	2b10      	cmp	r3, #16
  402954:	d005      	beq.n	402962 <SystemCoreClockUpdate+0xd6>
  402956:	2b20      	cmp	r3, #32
  402958:	d1e0      	bne.n	40291c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40295a:	4a0b      	ldr	r2, [pc, #44]	; (402988 <SystemCoreClockUpdate+0xfc>)
  40295c:	4b08      	ldr	r3, [pc, #32]	; (402980 <SystemCoreClockUpdate+0xf4>)
  40295e:	601a      	str	r2, [r3, #0]
          break;
  402960:	e7dc      	b.n	40291c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  402962:	4a0b      	ldr	r2, [pc, #44]	; (402990 <SystemCoreClockUpdate+0x104>)
  402964:	4b06      	ldr	r3, [pc, #24]	; (402980 <SystemCoreClockUpdate+0xf4>)
  402966:	601a      	str	r2, [r3, #0]
          break;
  402968:	e7d8      	b.n	40291c <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40296a:	4a05      	ldr	r2, [pc, #20]	; (402980 <SystemCoreClockUpdate+0xf4>)
  40296c:	6813      	ldr	r3, [r2, #0]
  40296e:	4909      	ldr	r1, [pc, #36]	; (402994 <SystemCoreClockUpdate+0x108>)
  402970:	fba1 1303 	umull	r1, r3, r1, r3
  402974:	085b      	lsrs	r3, r3, #1
  402976:	6013      	str	r3, [r2, #0]
  402978:	4770      	bx	lr
  40297a:	bf00      	nop
  40297c:	400e0600 	.word	0x400e0600
  402980:	20400038 	.word	0x20400038
  402984:	400e1810 	.word	0x400e1810
  402988:	00b71b00 	.word	0x00b71b00
  40298c:	003d0900 	.word	0x003d0900
  402990:	007a1200 	.word	0x007a1200
  402994:	aaaaaaab 	.word	0xaaaaaaab

00402998 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402998:	4b16      	ldr	r3, [pc, #88]	; (4029f4 <system_init_flash+0x5c>)
  40299a:	4298      	cmp	r0, r3
  40299c:	d913      	bls.n	4029c6 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40299e:	4b16      	ldr	r3, [pc, #88]	; (4029f8 <system_init_flash+0x60>)
  4029a0:	4298      	cmp	r0, r3
  4029a2:	d915      	bls.n	4029d0 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4029a4:	4b15      	ldr	r3, [pc, #84]	; (4029fc <system_init_flash+0x64>)
  4029a6:	4298      	cmp	r0, r3
  4029a8:	d916      	bls.n	4029d8 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4029aa:	4b15      	ldr	r3, [pc, #84]	; (402a00 <system_init_flash+0x68>)
  4029ac:	4298      	cmp	r0, r3
  4029ae:	d917      	bls.n	4029e0 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4029b0:	4b14      	ldr	r3, [pc, #80]	; (402a04 <system_init_flash+0x6c>)
  4029b2:	4298      	cmp	r0, r3
  4029b4:	d918      	bls.n	4029e8 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4029b6:	4b14      	ldr	r3, [pc, #80]	; (402a08 <system_init_flash+0x70>)
  4029b8:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4029ba:	bf94      	ite	ls
  4029bc:	4a13      	ldrls	r2, [pc, #76]	; (402a0c <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4029be:	4a14      	ldrhi	r2, [pc, #80]	; (402a10 <system_init_flash+0x78>)
  4029c0:	4b14      	ldr	r3, [pc, #80]	; (402a14 <system_init_flash+0x7c>)
  4029c2:	601a      	str	r2, [r3, #0]
  4029c4:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4029c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4029ca:	4b12      	ldr	r3, [pc, #72]	; (402a14 <system_init_flash+0x7c>)
  4029cc:	601a      	str	r2, [r3, #0]
  4029ce:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4029d0:	4a11      	ldr	r2, [pc, #68]	; (402a18 <system_init_flash+0x80>)
  4029d2:	4b10      	ldr	r3, [pc, #64]	; (402a14 <system_init_flash+0x7c>)
  4029d4:	601a      	str	r2, [r3, #0]
  4029d6:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4029d8:	4a10      	ldr	r2, [pc, #64]	; (402a1c <system_init_flash+0x84>)
  4029da:	4b0e      	ldr	r3, [pc, #56]	; (402a14 <system_init_flash+0x7c>)
  4029dc:	601a      	str	r2, [r3, #0]
  4029de:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4029e0:	4a0f      	ldr	r2, [pc, #60]	; (402a20 <system_init_flash+0x88>)
  4029e2:	4b0c      	ldr	r3, [pc, #48]	; (402a14 <system_init_flash+0x7c>)
  4029e4:	601a      	str	r2, [r3, #0]
  4029e6:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4029e8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4029ec:	4b09      	ldr	r3, [pc, #36]	; (402a14 <system_init_flash+0x7c>)
  4029ee:	601a      	str	r2, [r3, #0]
  4029f0:	4770      	bx	lr
  4029f2:	bf00      	nop
  4029f4:	015ef3bf 	.word	0x015ef3bf
  4029f8:	02bde77f 	.word	0x02bde77f
  4029fc:	041cdb3f 	.word	0x041cdb3f
  402a00:	057bceff 	.word	0x057bceff
  402a04:	06dac2bf 	.word	0x06dac2bf
  402a08:	0839b67f 	.word	0x0839b67f
  402a0c:	04000500 	.word	0x04000500
  402a10:	04000600 	.word	0x04000600
  402a14:	400e0c00 	.word	0x400e0c00
  402a18:	04000100 	.word	0x04000100
  402a1c:	04000200 	.word	0x04000200
  402a20:	04000300 	.word	0x04000300

00402a24 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  402a24:	4b0a      	ldr	r3, [pc, #40]	; (402a50 <_sbrk+0x2c>)
  402a26:	681b      	ldr	r3, [r3, #0]
  402a28:	b153      	cbz	r3, 402a40 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  402a2a:	4b09      	ldr	r3, [pc, #36]	; (402a50 <_sbrk+0x2c>)
  402a2c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  402a2e:	181a      	adds	r2, r3, r0
  402a30:	4908      	ldr	r1, [pc, #32]	; (402a54 <_sbrk+0x30>)
  402a32:	4291      	cmp	r1, r2
  402a34:	db08      	blt.n	402a48 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  402a36:	4610      	mov	r0, r2
  402a38:	4a05      	ldr	r2, [pc, #20]	; (402a50 <_sbrk+0x2c>)
  402a3a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  402a3c:	4618      	mov	r0, r3
  402a3e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  402a40:	4a05      	ldr	r2, [pc, #20]	; (402a58 <_sbrk+0x34>)
  402a42:	4b03      	ldr	r3, [pc, #12]	; (402a50 <_sbrk+0x2c>)
  402a44:	601a      	str	r2, [r3, #0]
  402a46:	e7f0      	b.n	402a2a <_sbrk+0x6>
		return (caddr_t) -1;	
  402a48:	f04f 30ff 	mov.w	r0, #4294967295
}
  402a4c:	4770      	bx	lr
  402a4e:	bf00      	nop
  402a50:	20400d88 	.word	0x20400d88
  402a54:	2045fffc 	.word	0x2045fffc
  402a58:	20405408 	.word	0x20405408

00402a5c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  402a5c:	f04f 30ff 	mov.w	r0, #4294967295
  402a60:	4770      	bx	lr

00402a62 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  402a62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  402a66:	604b      	str	r3, [r1, #4]

	return 0;
}
  402a68:	2000      	movs	r0, #0
  402a6a:	4770      	bx	lr

00402a6c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  402a6c:	2001      	movs	r0, #1
  402a6e:	4770      	bx	lr

00402a70 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  402a70:	2000      	movs	r0, #0
  402a72:	4770      	bx	lr

00402a74 <main>:
extern volatile bool outOfTime; 
static volatile midi_note_t oldNote = {0, 0};
static volatile midi_note_t note = {-1,0};
static volatile int lcd_refresh = 0;
int main(void)
{
  402a74:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  402a78:	b08d      	sub	sp, #52	; 0x34
	sysclk_init();
  402a7a:	4b2e      	ldr	r3, [pc, #184]	; (402b34 <main+0xc0>)
  402a7c:	4798      	blx	r3
	board_init();
  402a7e:	4b2e      	ldr	r3, [pc, #184]	; (402b38 <main+0xc4>)
  402a80:	4798      	blx	r3
	lcd_init(); 
  402a82:	4b2e      	ldr	r3, [pc, #184]	; (402b3c <main+0xc8>)
  402a84:	4798      	blx	r3
	Yin_init(PITCH_BUF_SIZE, YIN_DEFAULT_THRESHOLD);
  402a86:	492e      	ldr	r1, [pc, #184]	; (402b40 <main+0xcc>)
  402a88:	f44f 6000 	mov.w	r0, #2048	; 0x800
  402a8c:	4b2d      	ldr	r3, [pc, #180]	; (402b44 <main+0xd0>)
  402a8e:	4798      	blx	r3
	audio_init();
  402a90:	4b2d      	ldr	r3, [pc, #180]	; (402b48 <main+0xd4>)
  402a92:	4798      	blx	r3

	//start_gatorscribe();
	int16_t *audio; 
	while(1)
	{
		lcd_refresh++;
  402a94:	4c2d      	ldr	r4, [pc, #180]	; (402b4c <main+0xd8>)
		if (lcd_refresh == LCD_DELAY)
		{
			if (oldNote.note_number != note.note_number)
  402a96:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 402b60 <main+0xec>
  402a9a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 402b64 <main+0xf0>
  402a9e:	f8cd 8014 	str.w	r8, [sp, #20]
				TEXT_POS_LEFT, TEXT_ALIGN_LEFT);
				oldNote.note_number = note.note_number;
			}
			lcd_refresh = 0;
		}
		if (dataReceived)
  402aa2:	4d2b      	ldr	r5, [pc, #172]	; (402b50 <main+0xdc>)
  402aa4:	e004      	b.n	402ab0 <main+0x3c>
			lcd_refresh = 0;
  402aa6:	2300      	movs	r3, #0
  402aa8:	6023      	str	r3, [r4, #0]
		if (dataReceived)
  402aaa:	782b      	ldrb	r3, [r5, #0]
  402aac:	2b00      	cmp	r3, #0
  402aae:	d139      	bne.n	402b24 <main+0xb0>
		lcd_refresh++;
  402ab0:	6823      	ldr	r3, [r4, #0]
  402ab2:	3301      	adds	r3, #1
  402ab4:	6023      	str	r3, [r4, #0]
		if (lcd_refresh == LCD_DELAY)
  402ab6:	6823      	ldr	r3, [r4, #0]
  402ab8:	2b32      	cmp	r3, #50	; 0x32
  402aba:	d1f6      	bne.n	402aaa <main+0x36>
			if (oldNote.note_number != note.note_number)
  402abc:	f8b9 2000 	ldrh.w	r2, [r9]
  402ac0:	b212      	sxth	r2, r2
  402ac2:	f8b8 3000 	ldrh.w	r3, [r8]
  402ac6:	b21b      	sxth	r3, r3
  402ac8:	429a      	cmp	r2, r3
  402aca:	d0ec      	beq.n	402aa6 <main+0x32>
				get_midi_note_name(str, oldNote.note_number); 
  402acc:	f8b9 1000 	ldrh.w	r1, [r9]
  402ad0:	b209      	sxth	r1, r1
  402ad2:	a807      	add	r0, sp, #28
  402ad4:	f8df b090 	ldr.w	fp, [pc, #144]	; 402b68 <main+0xf4>
  402ad8:	47d8      	blx	fp
				gfx_draw_string_aligned((const char *)str,
  402ada:	2600      	movs	r6, #0
  402adc:	9603      	str	r6, [sp, #12]
  402ade:	2308      	movs	r3, #8
  402ae0:	9302      	str	r3, [sp, #8]
  402ae2:	9601      	str	r6, [sp, #4]
  402ae4:	f24f 071e 	movw	r7, #61470	; 0xf01e
  402ae8:	9700      	str	r7, [sp, #0]
  402aea:	4b1a      	ldr	r3, [pc, #104]	; (402b54 <main+0xe0>)
  402aec:	2296      	movs	r2, #150	; 0x96
  402aee:	4611      	mov	r1, r2
  402af0:	a807      	add	r0, sp, #28
  402af2:	f8df a078 	ldr.w	sl, [pc, #120]	; 402b6c <main+0xf8>
  402af6:	47d0      	blx	sl
				get_midi_note_name(str, note.note_number);
  402af8:	f8b8 1000 	ldrh.w	r1, [r8]
  402afc:	b209      	sxth	r1, r1
  402afe:	a807      	add	r0, sp, #28
  402b00:	47d8      	blx	fp
				gfx_draw_string_aligned((const char *)str,
  402b02:	9603      	str	r6, [sp, #12]
  402b04:	2308      	movs	r3, #8
  402b06:	9302      	str	r3, [sp, #8]
  402b08:	f64f 73ff 	movw	r3, #65535	; 0xffff
  402b0c:	9301      	str	r3, [sp, #4]
  402b0e:	9700      	str	r7, [sp, #0]
  402b10:	4b10      	ldr	r3, [pc, #64]	; (402b54 <main+0xe0>)
  402b12:	2296      	movs	r2, #150	; 0x96
  402b14:	4611      	mov	r1, r2
  402b16:	a807      	add	r0, sp, #28
  402b18:	47d0      	blx	sl
				oldNote.note_number = note.note_number;
  402b1a:	f8b8 3000 	ldrh.w	r3, [r8]
  402b1e:	f8a9 3000 	strh.w	r3, [r9]
  402b22:	e7c0      	b.n	402aa6 <main+0x32>
		{
			
			get_midi_note((int16_t *)processBuffer, (midi_note_t *)&note); 
  402b24:	9905      	ldr	r1, [sp, #20]
  402b26:	4b0c      	ldr	r3, [pc, #48]	; (402b58 <main+0xe4>)
  402b28:	6818      	ldr	r0, [r3, #0]
  402b2a:	4b0c      	ldr	r3, [pc, #48]	; (402b5c <main+0xe8>)
  402b2c:	4798      	blx	r3
			
			dataReceived = false; 
  402b2e:	2300      	movs	r3, #0
  402b30:	702b      	strb	r3, [r5, #0]
  402b32:	e7bd      	b.n	402ab0 <main+0x3c>
  402b34:	00401ed5 	.word	0x00401ed5
  402b38:	00401f45 	.word	0x00401f45
  402b3c:	00400ba1 	.word	0x00400ba1
  402b40:	3d4ccccd 	.word	0x3d4ccccd
  402b44:	00400e4d 	.word	0x00400e4d
  402b48:	00400429 	.word	0x00400429
  402b4c:	20400d8c 	.word	0x20400d8c
  402b50:	20400a0c 	.word	0x20400a0c
  402b54:	20400028 	.word	0x20400028
  402b58:	20400020 	.word	0x20400020
  402b5c:	00400d55 	.word	0x00400d55
  402b60:	20400d90 	.word	0x20400d90
  402b64:	2040003c 	.word	0x2040003c
  402b68:	00400e1d 	.word	0x00400e1d
  402b6c:	00400a51 	.word	0x00400a51

00402b70 <__aeabi_drsub>:
  402b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  402b74:	e002      	b.n	402b7c <__adddf3>
  402b76:	bf00      	nop

00402b78 <__aeabi_dsub>:
  402b78:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00402b7c <__adddf3>:
  402b7c:	b530      	push	{r4, r5, lr}
  402b7e:	ea4f 0441 	mov.w	r4, r1, lsl #1
  402b82:	ea4f 0543 	mov.w	r5, r3, lsl #1
  402b86:	ea94 0f05 	teq	r4, r5
  402b8a:	bf08      	it	eq
  402b8c:	ea90 0f02 	teqeq	r0, r2
  402b90:	bf1f      	itttt	ne
  402b92:	ea54 0c00 	orrsne.w	ip, r4, r0
  402b96:	ea55 0c02 	orrsne.w	ip, r5, r2
  402b9a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  402b9e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402ba2:	f000 80e2 	beq.w	402d6a <__adddf3+0x1ee>
  402ba6:	ea4f 5454 	mov.w	r4, r4, lsr #21
  402baa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  402bae:	bfb8      	it	lt
  402bb0:	426d      	neglt	r5, r5
  402bb2:	dd0c      	ble.n	402bce <__adddf3+0x52>
  402bb4:	442c      	add	r4, r5
  402bb6:	ea80 0202 	eor.w	r2, r0, r2
  402bba:	ea81 0303 	eor.w	r3, r1, r3
  402bbe:	ea82 0000 	eor.w	r0, r2, r0
  402bc2:	ea83 0101 	eor.w	r1, r3, r1
  402bc6:	ea80 0202 	eor.w	r2, r0, r2
  402bca:	ea81 0303 	eor.w	r3, r1, r3
  402bce:	2d36      	cmp	r5, #54	; 0x36
  402bd0:	bf88      	it	hi
  402bd2:	bd30      	pophi	{r4, r5, pc}
  402bd4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402bd8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402bdc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  402be0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  402be4:	d002      	beq.n	402bec <__adddf3+0x70>
  402be6:	4240      	negs	r0, r0
  402be8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402bec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  402bf0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402bf4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  402bf8:	d002      	beq.n	402c00 <__adddf3+0x84>
  402bfa:	4252      	negs	r2, r2
  402bfc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  402c00:	ea94 0f05 	teq	r4, r5
  402c04:	f000 80a7 	beq.w	402d56 <__adddf3+0x1da>
  402c08:	f1a4 0401 	sub.w	r4, r4, #1
  402c0c:	f1d5 0e20 	rsbs	lr, r5, #32
  402c10:	db0d      	blt.n	402c2e <__adddf3+0xb2>
  402c12:	fa02 fc0e 	lsl.w	ip, r2, lr
  402c16:	fa22 f205 	lsr.w	r2, r2, r5
  402c1a:	1880      	adds	r0, r0, r2
  402c1c:	f141 0100 	adc.w	r1, r1, #0
  402c20:	fa03 f20e 	lsl.w	r2, r3, lr
  402c24:	1880      	adds	r0, r0, r2
  402c26:	fa43 f305 	asr.w	r3, r3, r5
  402c2a:	4159      	adcs	r1, r3
  402c2c:	e00e      	b.n	402c4c <__adddf3+0xd0>
  402c2e:	f1a5 0520 	sub.w	r5, r5, #32
  402c32:	f10e 0e20 	add.w	lr, lr, #32
  402c36:	2a01      	cmp	r2, #1
  402c38:	fa03 fc0e 	lsl.w	ip, r3, lr
  402c3c:	bf28      	it	cs
  402c3e:	f04c 0c02 	orrcs.w	ip, ip, #2
  402c42:	fa43 f305 	asr.w	r3, r3, r5
  402c46:	18c0      	adds	r0, r0, r3
  402c48:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  402c4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402c50:	d507      	bpl.n	402c62 <__adddf3+0xe6>
  402c52:	f04f 0e00 	mov.w	lr, #0
  402c56:	f1dc 0c00 	rsbs	ip, ip, #0
  402c5a:	eb7e 0000 	sbcs.w	r0, lr, r0
  402c5e:	eb6e 0101 	sbc.w	r1, lr, r1
  402c62:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  402c66:	d31b      	bcc.n	402ca0 <__adddf3+0x124>
  402c68:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  402c6c:	d30c      	bcc.n	402c88 <__adddf3+0x10c>
  402c6e:	0849      	lsrs	r1, r1, #1
  402c70:	ea5f 0030 	movs.w	r0, r0, rrx
  402c74:	ea4f 0c3c 	mov.w	ip, ip, rrx
  402c78:	f104 0401 	add.w	r4, r4, #1
  402c7c:	ea4f 5244 	mov.w	r2, r4, lsl #21
  402c80:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  402c84:	f080 809a 	bcs.w	402dbc <__adddf3+0x240>
  402c88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  402c8c:	bf08      	it	eq
  402c8e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402c92:	f150 0000 	adcs.w	r0, r0, #0
  402c96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402c9a:	ea41 0105 	orr.w	r1, r1, r5
  402c9e:	bd30      	pop	{r4, r5, pc}
  402ca0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  402ca4:	4140      	adcs	r0, r0
  402ca6:	eb41 0101 	adc.w	r1, r1, r1
  402caa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402cae:	f1a4 0401 	sub.w	r4, r4, #1
  402cb2:	d1e9      	bne.n	402c88 <__adddf3+0x10c>
  402cb4:	f091 0f00 	teq	r1, #0
  402cb8:	bf04      	itt	eq
  402cba:	4601      	moveq	r1, r0
  402cbc:	2000      	moveq	r0, #0
  402cbe:	fab1 f381 	clz	r3, r1
  402cc2:	bf08      	it	eq
  402cc4:	3320      	addeq	r3, #32
  402cc6:	f1a3 030b 	sub.w	r3, r3, #11
  402cca:	f1b3 0220 	subs.w	r2, r3, #32
  402cce:	da0c      	bge.n	402cea <__adddf3+0x16e>
  402cd0:	320c      	adds	r2, #12
  402cd2:	dd08      	ble.n	402ce6 <__adddf3+0x16a>
  402cd4:	f102 0c14 	add.w	ip, r2, #20
  402cd8:	f1c2 020c 	rsb	r2, r2, #12
  402cdc:	fa01 f00c 	lsl.w	r0, r1, ip
  402ce0:	fa21 f102 	lsr.w	r1, r1, r2
  402ce4:	e00c      	b.n	402d00 <__adddf3+0x184>
  402ce6:	f102 0214 	add.w	r2, r2, #20
  402cea:	bfd8      	it	le
  402cec:	f1c2 0c20 	rsble	ip, r2, #32
  402cf0:	fa01 f102 	lsl.w	r1, r1, r2
  402cf4:	fa20 fc0c 	lsr.w	ip, r0, ip
  402cf8:	bfdc      	itt	le
  402cfa:	ea41 010c 	orrle.w	r1, r1, ip
  402cfe:	4090      	lslle	r0, r2
  402d00:	1ae4      	subs	r4, r4, r3
  402d02:	bfa2      	ittt	ge
  402d04:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  402d08:	4329      	orrge	r1, r5
  402d0a:	bd30      	popge	{r4, r5, pc}
  402d0c:	ea6f 0404 	mvn.w	r4, r4
  402d10:	3c1f      	subs	r4, #31
  402d12:	da1c      	bge.n	402d4e <__adddf3+0x1d2>
  402d14:	340c      	adds	r4, #12
  402d16:	dc0e      	bgt.n	402d36 <__adddf3+0x1ba>
  402d18:	f104 0414 	add.w	r4, r4, #20
  402d1c:	f1c4 0220 	rsb	r2, r4, #32
  402d20:	fa20 f004 	lsr.w	r0, r0, r4
  402d24:	fa01 f302 	lsl.w	r3, r1, r2
  402d28:	ea40 0003 	orr.w	r0, r0, r3
  402d2c:	fa21 f304 	lsr.w	r3, r1, r4
  402d30:	ea45 0103 	orr.w	r1, r5, r3
  402d34:	bd30      	pop	{r4, r5, pc}
  402d36:	f1c4 040c 	rsb	r4, r4, #12
  402d3a:	f1c4 0220 	rsb	r2, r4, #32
  402d3e:	fa20 f002 	lsr.w	r0, r0, r2
  402d42:	fa01 f304 	lsl.w	r3, r1, r4
  402d46:	ea40 0003 	orr.w	r0, r0, r3
  402d4a:	4629      	mov	r1, r5
  402d4c:	bd30      	pop	{r4, r5, pc}
  402d4e:	fa21 f004 	lsr.w	r0, r1, r4
  402d52:	4629      	mov	r1, r5
  402d54:	bd30      	pop	{r4, r5, pc}
  402d56:	f094 0f00 	teq	r4, #0
  402d5a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  402d5e:	bf06      	itte	eq
  402d60:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  402d64:	3401      	addeq	r4, #1
  402d66:	3d01      	subne	r5, #1
  402d68:	e74e      	b.n	402c08 <__adddf3+0x8c>
  402d6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402d6e:	bf18      	it	ne
  402d70:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402d74:	d029      	beq.n	402dca <__adddf3+0x24e>
  402d76:	ea94 0f05 	teq	r4, r5
  402d7a:	bf08      	it	eq
  402d7c:	ea90 0f02 	teqeq	r0, r2
  402d80:	d005      	beq.n	402d8e <__adddf3+0x212>
  402d82:	ea54 0c00 	orrs.w	ip, r4, r0
  402d86:	bf04      	itt	eq
  402d88:	4619      	moveq	r1, r3
  402d8a:	4610      	moveq	r0, r2
  402d8c:	bd30      	pop	{r4, r5, pc}
  402d8e:	ea91 0f03 	teq	r1, r3
  402d92:	bf1e      	ittt	ne
  402d94:	2100      	movne	r1, #0
  402d96:	2000      	movne	r0, #0
  402d98:	bd30      	popne	{r4, r5, pc}
  402d9a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  402d9e:	d105      	bne.n	402dac <__adddf3+0x230>
  402da0:	0040      	lsls	r0, r0, #1
  402da2:	4149      	adcs	r1, r1
  402da4:	bf28      	it	cs
  402da6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  402daa:	bd30      	pop	{r4, r5, pc}
  402dac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  402db0:	bf3c      	itt	cc
  402db2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  402db6:	bd30      	popcc	{r4, r5, pc}
  402db8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402dbc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  402dc0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402dc4:	f04f 0000 	mov.w	r0, #0
  402dc8:	bd30      	pop	{r4, r5, pc}
  402dca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402dce:	bf1a      	itte	ne
  402dd0:	4619      	movne	r1, r3
  402dd2:	4610      	movne	r0, r2
  402dd4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  402dd8:	bf1c      	itt	ne
  402dda:	460b      	movne	r3, r1
  402ddc:	4602      	movne	r2, r0
  402dde:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402de2:	bf06      	itte	eq
  402de4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  402de8:	ea91 0f03 	teqeq	r1, r3
  402dec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  402df0:	bd30      	pop	{r4, r5, pc}
  402df2:	bf00      	nop

00402df4 <__aeabi_ui2d>:
  402df4:	f090 0f00 	teq	r0, #0
  402df8:	bf04      	itt	eq
  402dfa:	2100      	moveq	r1, #0
  402dfc:	4770      	bxeq	lr
  402dfe:	b530      	push	{r4, r5, lr}
  402e00:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402e04:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402e08:	f04f 0500 	mov.w	r5, #0
  402e0c:	f04f 0100 	mov.w	r1, #0
  402e10:	e750      	b.n	402cb4 <__adddf3+0x138>
  402e12:	bf00      	nop

00402e14 <__aeabi_i2d>:
  402e14:	f090 0f00 	teq	r0, #0
  402e18:	bf04      	itt	eq
  402e1a:	2100      	moveq	r1, #0
  402e1c:	4770      	bxeq	lr
  402e1e:	b530      	push	{r4, r5, lr}
  402e20:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402e24:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402e28:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  402e2c:	bf48      	it	mi
  402e2e:	4240      	negmi	r0, r0
  402e30:	f04f 0100 	mov.w	r1, #0
  402e34:	e73e      	b.n	402cb4 <__adddf3+0x138>
  402e36:	bf00      	nop

00402e38 <__aeabi_f2d>:
  402e38:	0042      	lsls	r2, r0, #1
  402e3a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  402e3e:	ea4f 0131 	mov.w	r1, r1, rrx
  402e42:	ea4f 7002 	mov.w	r0, r2, lsl #28
  402e46:	bf1f      	itttt	ne
  402e48:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  402e4c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402e50:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  402e54:	4770      	bxne	lr
  402e56:	f092 0f00 	teq	r2, #0
  402e5a:	bf14      	ite	ne
  402e5c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402e60:	4770      	bxeq	lr
  402e62:	b530      	push	{r4, r5, lr}
  402e64:	f44f 7460 	mov.w	r4, #896	; 0x380
  402e68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402e6c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402e70:	e720      	b.n	402cb4 <__adddf3+0x138>
  402e72:	bf00      	nop

00402e74 <__aeabi_ul2d>:
  402e74:	ea50 0201 	orrs.w	r2, r0, r1
  402e78:	bf08      	it	eq
  402e7a:	4770      	bxeq	lr
  402e7c:	b530      	push	{r4, r5, lr}
  402e7e:	f04f 0500 	mov.w	r5, #0
  402e82:	e00a      	b.n	402e9a <__aeabi_l2d+0x16>

00402e84 <__aeabi_l2d>:
  402e84:	ea50 0201 	orrs.w	r2, r0, r1
  402e88:	bf08      	it	eq
  402e8a:	4770      	bxeq	lr
  402e8c:	b530      	push	{r4, r5, lr}
  402e8e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  402e92:	d502      	bpl.n	402e9a <__aeabi_l2d+0x16>
  402e94:	4240      	negs	r0, r0
  402e96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402e9a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402e9e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402ea2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  402ea6:	f43f aedc 	beq.w	402c62 <__adddf3+0xe6>
  402eaa:	f04f 0203 	mov.w	r2, #3
  402eae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402eb2:	bf18      	it	ne
  402eb4:	3203      	addne	r2, #3
  402eb6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402eba:	bf18      	it	ne
  402ebc:	3203      	addne	r2, #3
  402ebe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  402ec2:	f1c2 0320 	rsb	r3, r2, #32
  402ec6:	fa00 fc03 	lsl.w	ip, r0, r3
  402eca:	fa20 f002 	lsr.w	r0, r0, r2
  402ece:	fa01 fe03 	lsl.w	lr, r1, r3
  402ed2:	ea40 000e 	orr.w	r0, r0, lr
  402ed6:	fa21 f102 	lsr.w	r1, r1, r2
  402eda:	4414      	add	r4, r2
  402edc:	e6c1      	b.n	402c62 <__adddf3+0xe6>
  402ede:	bf00      	nop

00402ee0 <__aeabi_dmul>:
  402ee0:	b570      	push	{r4, r5, r6, lr}
  402ee2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402ee6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402eea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402eee:	bf1d      	ittte	ne
  402ef0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402ef4:	ea94 0f0c 	teqne	r4, ip
  402ef8:	ea95 0f0c 	teqne	r5, ip
  402efc:	f000 f8de 	bleq	4030bc <__aeabi_dmul+0x1dc>
  402f00:	442c      	add	r4, r5
  402f02:	ea81 0603 	eor.w	r6, r1, r3
  402f06:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  402f0a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  402f0e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  402f12:	bf18      	it	ne
  402f14:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  402f18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402f1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402f20:	d038      	beq.n	402f94 <__aeabi_dmul+0xb4>
  402f22:	fba0 ce02 	umull	ip, lr, r0, r2
  402f26:	f04f 0500 	mov.w	r5, #0
  402f2a:	fbe1 e502 	umlal	lr, r5, r1, r2
  402f2e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  402f32:	fbe0 e503 	umlal	lr, r5, r0, r3
  402f36:	f04f 0600 	mov.w	r6, #0
  402f3a:	fbe1 5603 	umlal	r5, r6, r1, r3
  402f3e:	f09c 0f00 	teq	ip, #0
  402f42:	bf18      	it	ne
  402f44:	f04e 0e01 	orrne.w	lr, lr, #1
  402f48:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  402f4c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  402f50:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  402f54:	d204      	bcs.n	402f60 <__aeabi_dmul+0x80>
  402f56:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  402f5a:	416d      	adcs	r5, r5
  402f5c:	eb46 0606 	adc.w	r6, r6, r6
  402f60:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  402f64:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  402f68:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  402f6c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  402f70:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  402f74:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402f78:	bf88      	it	hi
  402f7a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402f7e:	d81e      	bhi.n	402fbe <__aeabi_dmul+0xde>
  402f80:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  402f84:	bf08      	it	eq
  402f86:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  402f8a:	f150 0000 	adcs.w	r0, r0, #0
  402f8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402f92:	bd70      	pop	{r4, r5, r6, pc}
  402f94:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  402f98:	ea46 0101 	orr.w	r1, r6, r1
  402f9c:	ea40 0002 	orr.w	r0, r0, r2
  402fa0:	ea81 0103 	eor.w	r1, r1, r3
  402fa4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  402fa8:	bfc2      	ittt	gt
  402faa:	ebd4 050c 	rsbsgt	r5, r4, ip
  402fae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402fb2:	bd70      	popgt	{r4, r5, r6, pc}
  402fb4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402fb8:	f04f 0e00 	mov.w	lr, #0
  402fbc:	3c01      	subs	r4, #1
  402fbe:	f300 80ab 	bgt.w	403118 <__aeabi_dmul+0x238>
  402fc2:	f114 0f36 	cmn.w	r4, #54	; 0x36
  402fc6:	bfde      	ittt	le
  402fc8:	2000      	movle	r0, #0
  402fca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  402fce:	bd70      	pople	{r4, r5, r6, pc}
  402fd0:	f1c4 0400 	rsb	r4, r4, #0
  402fd4:	3c20      	subs	r4, #32
  402fd6:	da35      	bge.n	403044 <__aeabi_dmul+0x164>
  402fd8:	340c      	adds	r4, #12
  402fda:	dc1b      	bgt.n	403014 <__aeabi_dmul+0x134>
  402fdc:	f104 0414 	add.w	r4, r4, #20
  402fe0:	f1c4 0520 	rsb	r5, r4, #32
  402fe4:	fa00 f305 	lsl.w	r3, r0, r5
  402fe8:	fa20 f004 	lsr.w	r0, r0, r4
  402fec:	fa01 f205 	lsl.w	r2, r1, r5
  402ff0:	ea40 0002 	orr.w	r0, r0, r2
  402ff4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  402ff8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402ffc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403000:	fa21 f604 	lsr.w	r6, r1, r4
  403004:	eb42 0106 	adc.w	r1, r2, r6
  403008:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40300c:	bf08      	it	eq
  40300e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403012:	bd70      	pop	{r4, r5, r6, pc}
  403014:	f1c4 040c 	rsb	r4, r4, #12
  403018:	f1c4 0520 	rsb	r5, r4, #32
  40301c:	fa00 f304 	lsl.w	r3, r0, r4
  403020:	fa20 f005 	lsr.w	r0, r0, r5
  403024:	fa01 f204 	lsl.w	r2, r1, r4
  403028:	ea40 0002 	orr.w	r0, r0, r2
  40302c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403030:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403034:	f141 0100 	adc.w	r1, r1, #0
  403038:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40303c:	bf08      	it	eq
  40303e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403042:	bd70      	pop	{r4, r5, r6, pc}
  403044:	f1c4 0520 	rsb	r5, r4, #32
  403048:	fa00 f205 	lsl.w	r2, r0, r5
  40304c:	ea4e 0e02 	orr.w	lr, lr, r2
  403050:	fa20 f304 	lsr.w	r3, r0, r4
  403054:	fa01 f205 	lsl.w	r2, r1, r5
  403058:	ea43 0302 	orr.w	r3, r3, r2
  40305c:	fa21 f004 	lsr.w	r0, r1, r4
  403060:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403064:	fa21 f204 	lsr.w	r2, r1, r4
  403068:	ea20 0002 	bic.w	r0, r0, r2
  40306c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  403070:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403074:	bf08      	it	eq
  403076:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40307a:	bd70      	pop	{r4, r5, r6, pc}
  40307c:	f094 0f00 	teq	r4, #0
  403080:	d10f      	bne.n	4030a2 <__aeabi_dmul+0x1c2>
  403082:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  403086:	0040      	lsls	r0, r0, #1
  403088:	eb41 0101 	adc.w	r1, r1, r1
  40308c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403090:	bf08      	it	eq
  403092:	3c01      	subeq	r4, #1
  403094:	d0f7      	beq.n	403086 <__aeabi_dmul+0x1a6>
  403096:	ea41 0106 	orr.w	r1, r1, r6
  40309a:	f095 0f00 	teq	r5, #0
  40309e:	bf18      	it	ne
  4030a0:	4770      	bxne	lr
  4030a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4030a6:	0052      	lsls	r2, r2, #1
  4030a8:	eb43 0303 	adc.w	r3, r3, r3
  4030ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4030b0:	bf08      	it	eq
  4030b2:	3d01      	subeq	r5, #1
  4030b4:	d0f7      	beq.n	4030a6 <__aeabi_dmul+0x1c6>
  4030b6:	ea43 0306 	orr.w	r3, r3, r6
  4030ba:	4770      	bx	lr
  4030bc:	ea94 0f0c 	teq	r4, ip
  4030c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4030c4:	bf18      	it	ne
  4030c6:	ea95 0f0c 	teqne	r5, ip
  4030ca:	d00c      	beq.n	4030e6 <__aeabi_dmul+0x206>
  4030cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4030d0:	bf18      	it	ne
  4030d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4030d6:	d1d1      	bne.n	40307c <__aeabi_dmul+0x19c>
  4030d8:	ea81 0103 	eor.w	r1, r1, r3
  4030dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4030e0:	f04f 0000 	mov.w	r0, #0
  4030e4:	bd70      	pop	{r4, r5, r6, pc}
  4030e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4030ea:	bf06      	itte	eq
  4030ec:	4610      	moveq	r0, r2
  4030ee:	4619      	moveq	r1, r3
  4030f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4030f4:	d019      	beq.n	40312a <__aeabi_dmul+0x24a>
  4030f6:	ea94 0f0c 	teq	r4, ip
  4030fa:	d102      	bne.n	403102 <__aeabi_dmul+0x222>
  4030fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  403100:	d113      	bne.n	40312a <__aeabi_dmul+0x24a>
  403102:	ea95 0f0c 	teq	r5, ip
  403106:	d105      	bne.n	403114 <__aeabi_dmul+0x234>
  403108:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40310c:	bf1c      	itt	ne
  40310e:	4610      	movne	r0, r2
  403110:	4619      	movne	r1, r3
  403112:	d10a      	bne.n	40312a <__aeabi_dmul+0x24a>
  403114:	ea81 0103 	eor.w	r1, r1, r3
  403118:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40311c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403120:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403124:	f04f 0000 	mov.w	r0, #0
  403128:	bd70      	pop	{r4, r5, r6, pc}
  40312a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40312e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  403132:	bd70      	pop	{r4, r5, r6, pc}

00403134 <__aeabi_ddiv>:
  403134:	b570      	push	{r4, r5, r6, lr}
  403136:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40313a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40313e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  403142:	bf1d      	ittte	ne
  403144:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403148:	ea94 0f0c 	teqne	r4, ip
  40314c:	ea95 0f0c 	teqne	r5, ip
  403150:	f000 f8a7 	bleq	4032a2 <__aeabi_ddiv+0x16e>
  403154:	eba4 0405 	sub.w	r4, r4, r5
  403158:	ea81 0e03 	eor.w	lr, r1, r3
  40315c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403160:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403164:	f000 8088 	beq.w	403278 <__aeabi_ddiv+0x144>
  403168:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40316c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  403170:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  403174:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  403178:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40317c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  403180:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  403184:	ea4f 2600 	mov.w	r6, r0, lsl #8
  403188:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40318c:	429d      	cmp	r5, r3
  40318e:	bf08      	it	eq
  403190:	4296      	cmpeq	r6, r2
  403192:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  403196:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40319a:	d202      	bcs.n	4031a2 <__aeabi_ddiv+0x6e>
  40319c:	085b      	lsrs	r3, r3, #1
  40319e:	ea4f 0232 	mov.w	r2, r2, rrx
  4031a2:	1ab6      	subs	r6, r6, r2
  4031a4:	eb65 0503 	sbc.w	r5, r5, r3
  4031a8:	085b      	lsrs	r3, r3, #1
  4031aa:	ea4f 0232 	mov.w	r2, r2, rrx
  4031ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4031b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4031b6:	ebb6 0e02 	subs.w	lr, r6, r2
  4031ba:	eb75 0e03 	sbcs.w	lr, r5, r3
  4031be:	bf22      	ittt	cs
  4031c0:	1ab6      	subcs	r6, r6, r2
  4031c2:	4675      	movcs	r5, lr
  4031c4:	ea40 000c 	orrcs.w	r0, r0, ip
  4031c8:	085b      	lsrs	r3, r3, #1
  4031ca:	ea4f 0232 	mov.w	r2, r2, rrx
  4031ce:	ebb6 0e02 	subs.w	lr, r6, r2
  4031d2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4031d6:	bf22      	ittt	cs
  4031d8:	1ab6      	subcs	r6, r6, r2
  4031da:	4675      	movcs	r5, lr
  4031dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4031e0:	085b      	lsrs	r3, r3, #1
  4031e2:	ea4f 0232 	mov.w	r2, r2, rrx
  4031e6:	ebb6 0e02 	subs.w	lr, r6, r2
  4031ea:	eb75 0e03 	sbcs.w	lr, r5, r3
  4031ee:	bf22      	ittt	cs
  4031f0:	1ab6      	subcs	r6, r6, r2
  4031f2:	4675      	movcs	r5, lr
  4031f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4031f8:	085b      	lsrs	r3, r3, #1
  4031fa:	ea4f 0232 	mov.w	r2, r2, rrx
  4031fe:	ebb6 0e02 	subs.w	lr, r6, r2
  403202:	eb75 0e03 	sbcs.w	lr, r5, r3
  403206:	bf22      	ittt	cs
  403208:	1ab6      	subcs	r6, r6, r2
  40320a:	4675      	movcs	r5, lr
  40320c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  403210:	ea55 0e06 	orrs.w	lr, r5, r6
  403214:	d018      	beq.n	403248 <__aeabi_ddiv+0x114>
  403216:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40321a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40321e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  403222:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  403226:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40322a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40322e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  403232:	d1c0      	bne.n	4031b6 <__aeabi_ddiv+0x82>
  403234:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403238:	d10b      	bne.n	403252 <__aeabi_ddiv+0x11e>
  40323a:	ea41 0100 	orr.w	r1, r1, r0
  40323e:	f04f 0000 	mov.w	r0, #0
  403242:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  403246:	e7b6      	b.n	4031b6 <__aeabi_ddiv+0x82>
  403248:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40324c:	bf04      	itt	eq
  40324e:	4301      	orreq	r1, r0
  403250:	2000      	moveq	r0, #0
  403252:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403256:	bf88      	it	hi
  403258:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40325c:	f63f aeaf 	bhi.w	402fbe <__aeabi_dmul+0xde>
  403260:	ebb5 0c03 	subs.w	ip, r5, r3
  403264:	bf04      	itt	eq
  403266:	ebb6 0c02 	subseq.w	ip, r6, r2
  40326a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40326e:	f150 0000 	adcs.w	r0, r0, #0
  403272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403276:	bd70      	pop	{r4, r5, r6, pc}
  403278:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40327c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  403280:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  403284:	bfc2      	ittt	gt
  403286:	ebd4 050c 	rsbsgt	r5, r4, ip
  40328a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40328e:	bd70      	popgt	{r4, r5, r6, pc}
  403290:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403294:	f04f 0e00 	mov.w	lr, #0
  403298:	3c01      	subs	r4, #1
  40329a:	e690      	b.n	402fbe <__aeabi_dmul+0xde>
  40329c:	ea45 0e06 	orr.w	lr, r5, r6
  4032a0:	e68d      	b.n	402fbe <__aeabi_dmul+0xde>
  4032a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4032a6:	ea94 0f0c 	teq	r4, ip
  4032aa:	bf08      	it	eq
  4032ac:	ea95 0f0c 	teqeq	r5, ip
  4032b0:	f43f af3b 	beq.w	40312a <__aeabi_dmul+0x24a>
  4032b4:	ea94 0f0c 	teq	r4, ip
  4032b8:	d10a      	bne.n	4032d0 <__aeabi_ddiv+0x19c>
  4032ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4032be:	f47f af34 	bne.w	40312a <__aeabi_dmul+0x24a>
  4032c2:	ea95 0f0c 	teq	r5, ip
  4032c6:	f47f af25 	bne.w	403114 <__aeabi_dmul+0x234>
  4032ca:	4610      	mov	r0, r2
  4032cc:	4619      	mov	r1, r3
  4032ce:	e72c      	b.n	40312a <__aeabi_dmul+0x24a>
  4032d0:	ea95 0f0c 	teq	r5, ip
  4032d4:	d106      	bne.n	4032e4 <__aeabi_ddiv+0x1b0>
  4032d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4032da:	f43f aefd 	beq.w	4030d8 <__aeabi_dmul+0x1f8>
  4032de:	4610      	mov	r0, r2
  4032e0:	4619      	mov	r1, r3
  4032e2:	e722      	b.n	40312a <__aeabi_dmul+0x24a>
  4032e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4032e8:	bf18      	it	ne
  4032ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4032ee:	f47f aec5 	bne.w	40307c <__aeabi_dmul+0x19c>
  4032f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4032f6:	f47f af0d 	bne.w	403114 <__aeabi_dmul+0x234>
  4032fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4032fe:	f47f aeeb 	bne.w	4030d8 <__aeabi_dmul+0x1f8>
  403302:	e712      	b.n	40312a <__aeabi_dmul+0x24a>

00403304 <__aeabi_d2f>:
  403304:	ea4f 0241 	mov.w	r2, r1, lsl #1
  403308:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  40330c:	bf24      	itt	cs
  40330e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  403312:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  403316:	d90d      	bls.n	403334 <__aeabi_d2f+0x30>
  403318:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40331c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  403320:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  403324:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  403328:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  40332c:	bf08      	it	eq
  40332e:	f020 0001 	biceq.w	r0, r0, #1
  403332:	4770      	bx	lr
  403334:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  403338:	d121      	bne.n	40337e <__aeabi_d2f+0x7a>
  40333a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  40333e:	bfbc      	itt	lt
  403340:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  403344:	4770      	bxlt	lr
  403346:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40334a:	ea4f 5252 	mov.w	r2, r2, lsr #21
  40334e:	f1c2 0218 	rsb	r2, r2, #24
  403352:	f1c2 0c20 	rsb	ip, r2, #32
  403356:	fa10 f30c 	lsls.w	r3, r0, ip
  40335a:	fa20 f002 	lsr.w	r0, r0, r2
  40335e:	bf18      	it	ne
  403360:	f040 0001 	orrne.w	r0, r0, #1
  403364:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  403368:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  40336c:	fa03 fc0c 	lsl.w	ip, r3, ip
  403370:	ea40 000c 	orr.w	r0, r0, ip
  403374:	fa23 f302 	lsr.w	r3, r3, r2
  403378:	ea4f 0343 	mov.w	r3, r3, lsl #1
  40337c:	e7cc      	b.n	403318 <__aeabi_d2f+0x14>
  40337e:	ea7f 5362 	mvns.w	r3, r2, asr #21
  403382:	d107      	bne.n	403394 <__aeabi_d2f+0x90>
  403384:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  403388:	bf1e      	ittt	ne
  40338a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  40338e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  403392:	4770      	bxne	lr
  403394:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  403398:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40339c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4033a0:	4770      	bx	lr
  4033a2:	bf00      	nop

004033a4 <__libc_init_array>:
  4033a4:	b570      	push	{r4, r5, r6, lr}
  4033a6:	4e0f      	ldr	r6, [pc, #60]	; (4033e4 <__libc_init_array+0x40>)
  4033a8:	4d0f      	ldr	r5, [pc, #60]	; (4033e8 <__libc_init_array+0x44>)
  4033aa:	1b76      	subs	r6, r6, r5
  4033ac:	10b6      	asrs	r6, r6, #2
  4033ae:	bf18      	it	ne
  4033b0:	2400      	movne	r4, #0
  4033b2:	d005      	beq.n	4033c0 <__libc_init_array+0x1c>
  4033b4:	3401      	adds	r4, #1
  4033b6:	f855 3b04 	ldr.w	r3, [r5], #4
  4033ba:	4798      	blx	r3
  4033bc:	42a6      	cmp	r6, r4
  4033be:	d1f9      	bne.n	4033b4 <__libc_init_array+0x10>
  4033c0:	4e0a      	ldr	r6, [pc, #40]	; (4033ec <__libc_init_array+0x48>)
  4033c2:	4d0b      	ldr	r5, [pc, #44]	; (4033f0 <__libc_init_array+0x4c>)
  4033c4:	1b76      	subs	r6, r6, r5
  4033c6:	f004 f863 	bl	407490 <_init>
  4033ca:	10b6      	asrs	r6, r6, #2
  4033cc:	bf18      	it	ne
  4033ce:	2400      	movne	r4, #0
  4033d0:	d006      	beq.n	4033e0 <__libc_init_array+0x3c>
  4033d2:	3401      	adds	r4, #1
  4033d4:	f855 3b04 	ldr.w	r3, [r5], #4
  4033d8:	4798      	blx	r3
  4033da:	42a6      	cmp	r6, r4
  4033dc:	d1f9      	bne.n	4033d2 <__libc_init_array+0x2e>
  4033de:	bd70      	pop	{r4, r5, r6, pc}
  4033e0:	bd70      	pop	{r4, r5, r6, pc}
  4033e2:	bf00      	nop
  4033e4:	0040749c 	.word	0x0040749c
  4033e8:	0040749c 	.word	0x0040749c
  4033ec:	004074a4 	.word	0x004074a4
  4033f0:	0040749c 	.word	0x0040749c

004033f4 <iprintf>:
  4033f4:	b40f      	push	{r0, r1, r2, r3}
  4033f6:	b500      	push	{lr}
  4033f8:	4907      	ldr	r1, [pc, #28]	; (403418 <iprintf+0x24>)
  4033fa:	b083      	sub	sp, #12
  4033fc:	ab04      	add	r3, sp, #16
  4033fe:	6808      	ldr	r0, [r1, #0]
  403400:	f853 2b04 	ldr.w	r2, [r3], #4
  403404:	6881      	ldr	r1, [r0, #8]
  403406:	9301      	str	r3, [sp, #4]
  403408:	f000 fbca 	bl	403ba0 <_vfiprintf_r>
  40340c:	b003      	add	sp, #12
  40340e:	f85d eb04 	ldr.w	lr, [sp], #4
  403412:	b004      	add	sp, #16
  403414:	4770      	bx	lr
  403416:	bf00      	nop
  403418:	20400040 	.word	0x20400040

0040341c <malloc>:
  40341c:	4b02      	ldr	r3, [pc, #8]	; (403428 <malloc+0xc>)
  40341e:	4601      	mov	r1, r0
  403420:	6818      	ldr	r0, [r3, #0]
  403422:	f000 b803 	b.w	40342c <_malloc_r>
  403426:	bf00      	nop
  403428:	20400040 	.word	0x20400040

0040342c <_malloc_r>:
  40342c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403430:	f101 060b 	add.w	r6, r1, #11
  403434:	2e16      	cmp	r6, #22
  403436:	b083      	sub	sp, #12
  403438:	4605      	mov	r5, r0
  40343a:	f240 809e 	bls.w	40357a <_malloc_r+0x14e>
  40343e:	f036 0607 	bics.w	r6, r6, #7
  403442:	f100 80bd 	bmi.w	4035c0 <_malloc_r+0x194>
  403446:	42b1      	cmp	r1, r6
  403448:	f200 80ba 	bhi.w	4035c0 <_malloc_r+0x194>
  40344c:	f000 faec 	bl	403a28 <__malloc_lock>
  403450:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403454:	f0c0 8293 	bcc.w	40397e <_malloc_r+0x552>
  403458:	0a73      	lsrs	r3, r6, #9
  40345a:	f000 80b8 	beq.w	4035ce <_malloc_r+0x1a2>
  40345e:	2b04      	cmp	r3, #4
  403460:	f200 8179 	bhi.w	403756 <_malloc_r+0x32a>
  403464:	09b3      	lsrs	r3, r6, #6
  403466:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40346a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40346e:	00c3      	lsls	r3, r0, #3
  403470:	4fbf      	ldr	r7, [pc, #764]	; (403770 <_malloc_r+0x344>)
  403472:	443b      	add	r3, r7
  403474:	f1a3 0108 	sub.w	r1, r3, #8
  403478:	685c      	ldr	r4, [r3, #4]
  40347a:	42a1      	cmp	r1, r4
  40347c:	d106      	bne.n	40348c <_malloc_r+0x60>
  40347e:	e00c      	b.n	40349a <_malloc_r+0x6e>
  403480:	2a00      	cmp	r2, #0
  403482:	f280 80aa 	bge.w	4035da <_malloc_r+0x1ae>
  403486:	68e4      	ldr	r4, [r4, #12]
  403488:	42a1      	cmp	r1, r4
  40348a:	d006      	beq.n	40349a <_malloc_r+0x6e>
  40348c:	6863      	ldr	r3, [r4, #4]
  40348e:	f023 0303 	bic.w	r3, r3, #3
  403492:	1b9a      	subs	r2, r3, r6
  403494:	2a0f      	cmp	r2, #15
  403496:	ddf3      	ble.n	403480 <_malloc_r+0x54>
  403498:	4670      	mov	r0, lr
  40349a:	693c      	ldr	r4, [r7, #16]
  40349c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403784 <_malloc_r+0x358>
  4034a0:	4574      	cmp	r4, lr
  4034a2:	f000 81ab 	beq.w	4037fc <_malloc_r+0x3d0>
  4034a6:	6863      	ldr	r3, [r4, #4]
  4034a8:	f023 0303 	bic.w	r3, r3, #3
  4034ac:	1b9a      	subs	r2, r3, r6
  4034ae:	2a0f      	cmp	r2, #15
  4034b0:	f300 8190 	bgt.w	4037d4 <_malloc_r+0x3a8>
  4034b4:	2a00      	cmp	r2, #0
  4034b6:	f8c7 e014 	str.w	lr, [r7, #20]
  4034ba:	f8c7 e010 	str.w	lr, [r7, #16]
  4034be:	f280 809d 	bge.w	4035fc <_malloc_r+0x1d0>
  4034c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4034c6:	f080 8161 	bcs.w	40378c <_malloc_r+0x360>
  4034ca:	08db      	lsrs	r3, r3, #3
  4034cc:	f103 0c01 	add.w	ip, r3, #1
  4034d0:	1099      	asrs	r1, r3, #2
  4034d2:	687a      	ldr	r2, [r7, #4]
  4034d4:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4034d8:	f8c4 8008 	str.w	r8, [r4, #8]
  4034dc:	2301      	movs	r3, #1
  4034de:	408b      	lsls	r3, r1
  4034e0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4034e4:	4313      	orrs	r3, r2
  4034e6:	3908      	subs	r1, #8
  4034e8:	60e1      	str	r1, [r4, #12]
  4034ea:	607b      	str	r3, [r7, #4]
  4034ec:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4034f0:	f8c8 400c 	str.w	r4, [r8, #12]
  4034f4:	1082      	asrs	r2, r0, #2
  4034f6:	2401      	movs	r4, #1
  4034f8:	4094      	lsls	r4, r2
  4034fa:	429c      	cmp	r4, r3
  4034fc:	f200 808b 	bhi.w	403616 <_malloc_r+0x1ea>
  403500:	421c      	tst	r4, r3
  403502:	d106      	bne.n	403512 <_malloc_r+0xe6>
  403504:	f020 0003 	bic.w	r0, r0, #3
  403508:	0064      	lsls	r4, r4, #1
  40350a:	421c      	tst	r4, r3
  40350c:	f100 0004 	add.w	r0, r0, #4
  403510:	d0fa      	beq.n	403508 <_malloc_r+0xdc>
  403512:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403516:	46cc      	mov	ip, r9
  403518:	4680      	mov	r8, r0
  40351a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40351e:	459c      	cmp	ip, r3
  403520:	d107      	bne.n	403532 <_malloc_r+0x106>
  403522:	e16d      	b.n	403800 <_malloc_r+0x3d4>
  403524:	2a00      	cmp	r2, #0
  403526:	f280 817b 	bge.w	403820 <_malloc_r+0x3f4>
  40352a:	68db      	ldr	r3, [r3, #12]
  40352c:	459c      	cmp	ip, r3
  40352e:	f000 8167 	beq.w	403800 <_malloc_r+0x3d4>
  403532:	6859      	ldr	r1, [r3, #4]
  403534:	f021 0103 	bic.w	r1, r1, #3
  403538:	1b8a      	subs	r2, r1, r6
  40353a:	2a0f      	cmp	r2, #15
  40353c:	ddf2      	ble.n	403524 <_malloc_r+0xf8>
  40353e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403542:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403546:	9300      	str	r3, [sp, #0]
  403548:	199c      	adds	r4, r3, r6
  40354a:	4628      	mov	r0, r5
  40354c:	f046 0601 	orr.w	r6, r6, #1
  403550:	f042 0501 	orr.w	r5, r2, #1
  403554:	605e      	str	r6, [r3, #4]
  403556:	f8c8 c00c 	str.w	ip, [r8, #12]
  40355a:	f8cc 8008 	str.w	r8, [ip, #8]
  40355e:	617c      	str	r4, [r7, #20]
  403560:	613c      	str	r4, [r7, #16]
  403562:	f8c4 e00c 	str.w	lr, [r4, #12]
  403566:	f8c4 e008 	str.w	lr, [r4, #8]
  40356a:	6065      	str	r5, [r4, #4]
  40356c:	505a      	str	r2, [r3, r1]
  40356e:	f000 fa61 	bl	403a34 <__malloc_unlock>
  403572:	9b00      	ldr	r3, [sp, #0]
  403574:	f103 0408 	add.w	r4, r3, #8
  403578:	e01e      	b.n	4035b8 <_malloc_r+0x18c>
  40357a:	2910      	cmp	r1, #16
  40357c:	d820      	bhi.n	4035c0 <_malloc_r+0x194>
  40357e:	f000 fa53 	bl	403a28 <__malloc_lock>
  403582:	2610      	movs	r6, #16
  403584:	2318      	movs	r3, #24
  403586:	2002      	movs	r0, #2
  403588:	4f79      	ldr	r7, [pc, #484]	; (403770 <_malloc_r+0x344>)
  40358a:	443b      	add	r3, r7
  40358c:	f1a3 0208 	sub.w	r2, r3, #8
  403590:	685c      	ldr	r4, [r3, #4]
  403592:	4294      	cmp	r4, r2
  403594:	f000 813d 	beq.w	403812 <_malloc_r+0x3e6>
  403598:	6863      	ldr	r3, [r4, #4]
  40359a:	68e1      	ldr	r1, [r4, #12]
  40359c:	68a6      	ldr	r6, [r4, #8]
  40359e:	f023 0303 	bic.w	r3, r3, #3
  4035a2:	4423      	add	r3, r4
  4035a4:	4628      	mov	r0, r5
  4035a6:	685a      	ldr	r2, [r3, #4]
  4035a8:	60f1      	str	r1, [r6, #12]
  4035aa:	f042 0201 	orr.w	r2, r2, #1
  4035ae:	608e      	str	r6, [r1, #8]
  4035b0:	605a      	str	r2, [r3, #4]
  4035b2:	f000 fa3f 	bl	403a34 <__malloc_unlock>
  4035b6:	3408      	adds	r4, #8
  4035b8:	4620      	mov	r0, r4
  4035ba:	b003      	add	sp, #12
  4035bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4035c0:	2400      	movs	r4, #0
  4035c2:	230c      	movs	r3, #12
  4035c4:	4620      	mov	r0, r4
  4035c6:	602b      	str	r3, [r5, #0]
  4035c8:	b003      	add	sp, #12
  4035ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4035ce:	2040      	movs	r0, #64	; 0x40
  4035d0:	f44f 7300 	mov.w	r3, #512	; 0x200
  4035d4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4035d8:	e74a      	b.n	403470 <_malloc_r+0x44>
  4035da:	4423      	add	r3, r4
  4035dc:	68e1      	ldr	r1, [r4, #12]
  4035de:	685a      	ldr	r2, [r3, #4]
  4035e0:	68a6      	ldr	r6, [r4, #8]
  4035e2:	f042 0201 	orr.w	r2, r2, #1
  4035e6:	60f1      	str	r1, [r6, #12]
  4035e8:	4628      	mov	r0, r5
  4035ea:	608e      	str	r6, [r1, #8]
  4035ec:	605a      	str	r2, [r3, #4]
  4035ee:	f000 fa21 	bl	403a34 <__malloc_unlock>
  4035f2:	3408      	adds	r4, #8
  4035f4:	4620      	mov	r0, r4
  4035f6:	b003      	add	sp, #12
  4035f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4035fc:	4423      	add	r3, r4
  4035fe:	4628      	mov	r0, r5
  403600:	685a      	ldr	r2, [r3, #4]
  403602:	f042 0201 	orr.w	r2, r2, #1
  403606:	605a      	str	r2, [r3, #4]
  403608:	f000 fa14 	bl	403a34 <__malloc_unlock>
  40360c:	3408      	adds	r4, #8
  40360e:	4620      	mov	r0, r4
  403610:	b003      	add	sp, #12
  403612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403616:	68bc      	ldr	r4, [r7, #8]
  403618:	6863      	ldr	r3, [r4, #4]
  40361a:	f023 0803 	bic.w	r8, r3, #3
  40361e:	45b0      	cmp	r8, r6
  403620:	d304      	bcc.n	40362c <_malloc_r+0x200>
  403622:	eba8 0306 	sub.w	r3, r8, r6
  403626:	2b0f      	cmp	r3, #15
  403628:	f300 8085 	bgt.w	403736 <_malloc_r+0x30a>
  40362c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403788 <_malloc_r+0x35c>
  403630:	4b50      	ldr	r3, [pc, #320]	; (403774 <_malloc_r+0x348>)
  403632:	f8d9 2000 	ldr.w	r2, [r9]
  403636:	681b      	ldr	r3, [r3, #0]
  403638:	3201      	adds	r2, #1
  40363a:	4433      	add	r3, r6
  40363c:	eb04 0a08 	add.w	sl, r4, r8
  403640:	f000 8155 	beq.w	4038ee <_malloc_r+0x4c2>
  403644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403648:	330f      	adds	r3, #15
  40364a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40364e:	f02b 0b0f 	bic.w	fp, fp, #15
  403652:	4659      	mov	r1, fp
  403654:	4628      	mov	r0, r5
  403656:	f000 f9f3 	bl	403a40 <_sbrk_r>
  40365a:	1c41      	adds	r1, r0, #1
  40365c:	4602      	mov	r2, r0
  40365e:	f000 80fc 	beq.w	40385a <_malloc_r+0x42e>
  403662:	4582      	cmp	sl, r0
  403664:	f200 80f7 	bhi.w	403856 <_malloc_r+0x42a>
  403668:	4b43      	ldr	r3, [pc, #268]	; (403778 <_malloc_r+0x34c>)
  40366a:	6819      	ldr	r1, [r3, #0]
  40366c:	4459      	add	r1, fp
  40366e:	6019      	str	r1, [r3, #0]
  403670:	f000 814d 	beq.w	40390e <_malloc_r+0x4e2>
  403674:	f8d9 0000 	ldr.w	r0, [r9]
  403678:	3001      	adds	r0, #1
  40367a:	bf1b      	ittet	ne
  40367c:	eba2 0a0a 	subne.w	sl, r2, sl
  403680:	4451      	addne	r1, sl
  403682:	f8c9 2000 	streq.w	r2, [r9]
  403686:	6019      	strne	r1, [r3, #0]
  403688:	f012 0107 	ands.w	r1, r2, #7
  40368c:	f000 8115 	beq.w	4038ba <_malloc_r+0x48e>
  403690:	f1c1 0008 	rsb	r0, r1, #8
  403694:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403698:	4402      	add	r2, r0
  40369a:	3108      	adds	r1, #8
  40369c:	eb02 090b 	add.w	r9, r2, fp
  4036a0:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4036a4:	eba1 0909 	sub.w	r9, r1, r9
  4036a8:	4649      	mov	r1, r9
  4036aa:	4628      	mov	r0, r5
  4036ac:	9301      	str	r3, [sp, #4]
  4036ae:	9200      	str	r2, [sp, #0]
  4036b0:	f000 f9c6 	bl	403a40 <_sbrk_r>
  4036b4:	1c43      	adds	r3, r0, #1
  4036b6:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4036ba:	f000 8143 	beq.w	403944 <_malloc_r+0x518>
  4036be:	1a80      	subs	r0, r0, r2
  4036c0:	4448      	add	r0, r9
  4036c2:	f040 0001 	orr.w	r0, r0, #1
  4036c6:	6819      	ldr	r1, [r3, #0]
  4036c8:	60ba      	str	r2, [r7, #8]
  4036ca:	4449      	add	r1, r9
  4036cc:	42bc      	cmp	r4, r7
  4036ce:	6050      	str	r0, [r2, #4]
  4036d0:	6019      	str	r1, [r3, #0]
  4036d2:	d017      	beq.n	403704 <_malloc_r+0x2d8>
  4036d4:	f1b8 0f0f 	cmp.w	r8, #15
  4036d8:	f240 80fb 	bls.w	4038d2 <_malloc_r+0x4a6>
  4036dc:	6860      	ldr	r0, [r4, #4]
  4036de:	f1a8 020c 	sub.w	r2, r8, #12
  4036e2:	f022 0207 	bic.w	r2, r2, #7
  4036e6:	eb04 0e02 	add.w	lr, r4, r2
  4036ea:	f000 0001 	and.w	r0, r0, #1
  4036ee:	f04f 0c05 	mov.w	ip, #5
  4036f2:	4310      	orrs	r0, r2
  4036f4:	2a0f      	cmp	r2, #15
  4036f6:	6060      	str	r0, [r4, #4]
  4036f8:	f8ce c004 	str.w	ip, [lr, #4]
  4036fc:	f8ce c008 	str.w	ip, [lr, #8]
  403700:	f200 8117 	bhi.w	403932 <_malloc_r+0x506>
  403704:	4b1d      	ldr	r3, [pc, #116]	; (40377c <_malloc_r+0x350>)
  403706:	68bc      	ldr	r4, [r7, #8]
  403708:	681a      	ldr	r2, [r3, #0]
  40370a:	4291      	cmp	r1, r2
  40370c:	bf88      	it	hi
  40370e:	6019      	strhi	r1, [r3, #0]
  403710:	4b1b      	ldr	r3, [pc, #108]	; (403780 <_malloc_r+0x354>)
  403712:	681a      	ldr	r2, [r3, #0]
  403714:	4291      	cmp	r1, r2
  403716:	6862      	ldr	r2, [r4, #4]
  403718:	bf88      	it	hi
  40371a:	6019      	strhi	r1, [r3, #0]
  40371c:	f022 0203 	bic.w	r2, r2, #3
  403720:	4296      	cmp	r6, r2
  403722:	eba2 0306 	sub.w	r3, r2, r6
  403726:	d801      	bhi.n	40372c <_malloc_r+0x300>
  403728:	2b0f      	cmp	r3, #15
  40372a:	dc04      	bgt.n	403736 <_malloc_r+0x30a>
  40372c:	4628      	mov	r0, r5
  40372e:	f000 f981 	bl	403a34 <__malloc_unlock>
  403732:	2400      	movs	r4, #0
  403734:	e740      	b.n	4035b8 <_malloc_r+0x18c>
  403736:	19a2      	adds	r2, r4, r6
  403738:	f043 0301 	orr.w	r3, r3, #1
  40373c:	f046 0601 	orr.w	r6, r6, #1
  403740:	6066      	str	r6, [r4, #4]
  403742:	4628      	mov	r0, r5
  403744:	60ba      	str	r2, [r7, #8]
  403746:	6053      	str	r3, [r2, #4]
  403748:	f000 f974 	bl	403a34 <__malloc_unlock>
  40374c:	3408      	adds	r4, #8
  40374e:	4620      	mov	r0, r4
  403750:	b003      	add	sp, #12
  403752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403756:	2b14      	cmp	r3, #20
  403758:	d971      	bls.n	40383e <_malloc_r+0x412>
  40375a:	2b54      	cmp	r3, #84	; 0x54
  40375c:	f200 80a3 	bhi.w	4038a6 <_malloc_r+0x47a>
  403760:	0b33      	lsrs	r3, r6, #12
  403762:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403766:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40376a:	00c3      	lsls	r3, r0, #3
  40376c:	e680      	b.n	403470 <_malloc_r+0x44>
  40376e:	bf00      	nop
  403770:	20400470 	.word	0x20400470
  403774:	20400dc4 	.word	0x20400dc4
  403778:	20400d94 	.word	0x20400d94
  40377c:	20400dbc 	.word	0x20400dbc
  403780:	20400dc0 	.word	0x20400dc0
  403784:	20400478 	.word	0x20400478
  403788:	20400878 	.word	0x20400878
  40378c:	0a5a      	lsrs	r2, r3, #9
  40378e:	2a04      	cmp	r2, #4
  403790:	d95b      	bls.n	40384a <_malloc_r+0x41e>
  403792:	2a14      	cmp	r2, #20
  403794:	f200 80ae 	bhi.w	4038f4 <_malloc_r+0x4c8>
  403798:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40379c:	00c9      	lsls	r1, r1, #3
  40379e:	325b      	adds	r2, #91	; 0x5b
  4037a0:	eb07 0c01 	add.w	ip, r7, r1
  4037a4:	5879      	ldr	r1, [r7, r1]
  4037a6:	f1ac 0c08 	sub.w	ip, ip, #8
  4037aa:	458c      	cmp	ip, r1
  4037ac:	f000 8088 	beq.w	4038c0 <_malloc_r+0x494>
  4037b0:	684a      	ldr	r2, [r1, #4]
  4037b2:	f022 0203 	bic.w	r2, r2, #3
  4037b6:	4293      	cmp	r3, r2
  4037b8:	d273      	bcs.n	4038a2 <_malloc_r+0x476>
  4037ba:	6889      	ldr	r1, [r1, #8]
  4037bc:	458c      	cmp	ip, r1
  4037be:	d1f7      	bne.n	4037b0 <_malloc_r+0x384>
  4037c0:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4037c4:	687b      	ldr	r3, [r7, #4]
  4037c6:	60e2      	str	r2, [r4, #12]
  4037c8:	f8c4 c008 	str.w	ip, [r4, #8]
  4037cc:	6094      	str	r4, [r2, #8]
  4037ce:	f8cc 400c 	str.w	r4, [ip, #12]
  4037d2:	e68f      	b.n	4034f4 <_malloc_r+0xc8>
  4037d4:	19a1      	adds	r1, r4, r6
  4037d6:	f046 0c01 	orr.w	ip, r6, #1
  4037da:	f042 0601 	orr.w	r6, r2, #1
  4037de:	f8c4 c004 	str.w	ip, [r4, #4]
  4037e2:	4628      	mov	r0, r5
  4037e4:	6179      	str	r1, [r7, #20]
  4037e6:	6139      	str	r1, [r7, #16]
  4037e8:	f8c1 e00c 	str.w	lr, [r1, #12]
  4037ec:	f8c1 e008 	str.w	lr, [r1, #8]
  4037f0:	604e      	str	r6, [r1, #4]
  4037f2:	50e2      	str	r2, [r4, r3]
  4037f4:	f000 f91e 	bl	403a34 <__malloc_unlock>
  4037f8:	3408      	adds	r4, #8
  4037fa:	e6dd      	b.n	4035b8 <_malloc_r+0x18c>
  4037fc:	687b      	ldr	r3, [r7, #4]
  4037fe:	e679      	b.n	4034f4 <_malloc_r+0xc8>
  403800:	f108 0801 	add.w	r8, r8, #1
  403804:	f018 0f03 	tst.w	r8, #3
  403808:	f10c 0c08 	add.w	ip, ip, #8
  40380c:	f47f ae85 	bne.w	40351a <_malloc_r+0xee>
  403810:	e02d      	b.n	40386e <_malloc_r+0x442>
  403812:	68dc      	ldr	r4, [r3, #12]
  403814:	42a3      	cmp	r3, r4
  403816:	bf08      	it	eq
  403818:	3002      	addeq	r0, #2
  40381a:	f43f ae3e 	beq.w	40349a <_malloc_r+0x6e>
  40381e:	e6bb      	b.n	403598 <_malloc_r+0x16c>
  403820:	4419      	add	r1, r3
  403822:	461c      	mov	r4, r3
  403824:	684a      	ldr	r2, [r1, #4]
  403826:	68db      	ldr	r3, [r3, #12]
  403828:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40382c:	f042 0201 	orr.w	r2, r2, #1
  403830:	604a      	str	r2, [r1, #4]
  403832:	4628      	mov	r0, r5
  403834:	60f3      	str	r3, [r6, #12]
  403836:	609e      	str	r6, [r3, #8]
  403838:	f000 f8fc 	bl	403a34 <__malloc_unlock>
  40383c:	e6bc      	b.n	4035b8 <_malloc_r+0x18c>
  40383e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403842:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403846:	00c3      	lsls	r3, r0, #3
  403848:	e612      	b.n	403470 <_malloc_r+0x44>
  40384a:	099a      	lsrs	r2, r3, #6
  40384c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403850:	00c9      	lsls	r1, r1, #3
  403852:	3238      	adds	r2, #56	; 0x38
  403854:	e7a4      	b.n	4037a0 <_malloc_r+0x374>
  403856:	42bc      	cmp	r4, r7
  403858:	d054      	beq.n	403904 <_malloc_r+0x4d8>
  40385a:	68bc      	ldr	r4, [r7, #8]
  40385c:	6862      	ldr	r2, [r4, #4]
  40385e:	f022 0203 	bic.w	r2, r2, #3
  403862:	e75d      	b.n	403720 <_malloc_r+0x2f4>
  403864:	f859 3908 	ldr.w	r3, [r9], #-8
  403868:	4599      	cmp	r9, r3
  40386a:	f040 8086 	bne.w	40397a <_malloc_r+0x54e>
  40386e:	f010 0f03 	tst.w	r0, #3
  403872:	f100 30ff 	add.w	r0, r0, #4294967295
  403876:	d1f5      	bne.n	403864 <_malloc_r+0x438>
  403878:	687b      	ldr	r3, [r7, #4]
  40387a:	ea23 0304 	bic.w	r3, r3, r4
  40387e:	607b      	str	r3, [r7, #4]
  403880:	0064      	lsls	r4, r4, #1
  403882:	429c      	cmp	r4, r3
  403884:	f63f aec7 	bhi.w	403616 <_malloc_r+0x1ea>
  403888:	2c00      	cmp	r4, #0
  40388a:	f43f aec4 	beq.w	403616 <_malloc_r+0x1ea>
  40388e:	421c      	tst	r4, r3
  403890:	4640      	mov	r0, r8
  403892:	f47f ae3e 	bne.w	403512 <_malloc_r+0xe6>
  403896:	0064      	lsls	r4, r4, #1
  403898:	421c      	tst	r4, r3
  40389a:	f100 0004 	add.w	r0, r0, #4
  40389e:	d0fa      	beq.n	403896 <_malloc_r+0x46a>
  4038a0:	e637      	b.n	403512 <_malloc_r+0xe6>
  4038a2:	468c      	mov	ip, r1
  4038a4:	e78c      	b.n	4037c0 <_malloc_r+0x394>
  4038a6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4038aa:	d815      	bhi.n	4038d8 <_malloc_r+0x4ac>
  4038ac:	0bf3      	lsrs	r3, r6, #15
  4038ae:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4038b2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4038b6:	00c3      	lsls	r3, r0, #3
  4038b8:	e5da      	b.n	403470 <_malloc_r+0x44>
  4038ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4038be:	e6ed      	b.n	40369c <_malloc_r+0x270>
  4038c0:	687b      	ldr	r3, [r7, #4]
  4038c2:	1092      	asrs	r2, r2, #2
  4038c4:	2101      	movs	r1, #1
  4038c6:	fa01 f202 	lsl.w	r2, r1, r2
  4038ca:	4313      	orrs	r3, r2
  4038cc:	607b      	str	r3, [r7, #4]
  4038ce:	4662      	mov	r2, ip
  4038d0:	e779      	b.n	4037c6 <_malloc_r+0x39a>
  4038d2:	2301      	movs	r3, #1
  4038d4:	6053      	str	r3, [r2, #4]
  4038d6:	e729      	b.n	40372c <_malloc_r+0x300>
  4038d8:	f240 5254 	movw	r2, #1364	; 0x554
  4038dc:	4293      	cmp	r3, r2
  4038de:	d822      	bhi.n	403926 <_malloc_r+0x4fa>
  4038e0:	0cb3      	lsrs	r3, r6, #18
  4038e2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4038e6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4038ea:	00c3      	lsls	r3, r0, #3
  4038ec:	e5c0      	b.n	403470 <_malloc_r+0x44>
  4038ee:	f103 0b10 	add.w	fp, r3, #16
  4038f2:	e6ae      	b.n	403652 <_malloc_r+0x226>
  4038f4:	2a54      	cmp	r2, #84	; 0x54
  4038f6:	d829      	bhi.n	40394c <_malloc_r+0x520>
  4038f8:	0b1a      	lsrs	r2, r3, #12
  4038fa:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4038fe:	00c9      	lsls	r1, r1, #3
  403900:	326e      	adds	r2, #110	; 0x6e
  403902:	e74d      	b.n	4037a0 <_malloc_r+0x374>
  403904:	4b20      	ldr	r3, [pc, #128]	; (403988 <_malloc_r+0x55c>)
  403906:	6819      	ldr	r1, [r3, #0]
  403908:	4459      	add	r1, fp
  40390a:	6019      	str	r1, [r3, #0]
  40390c:	e6b2      	b.n	403674 <_malloc_r+0x248>
  40390e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403912:	2800      	cmp	r0, #0
  403914:	f47f aeae 	bne.w	403674 <_malloc_r+0x248>
  403918:	eb08 030b 	add.w	r3, r8, fp
  40391c:	68ba      	ldr	r2, [r7, #8]
  40391e:	f043 0301 	orr.w	r3, r3, #1
  403922:	6053      	str	r3, [r2, #4]
  403924:	e6ee      	b.n	403704 <_malloc_r+0x2d8>
  403926:	207f      	movs	r0, #127	; 0x7f
  403928:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40392c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403930:	e59e      	b.n	403470 <_malloc_r+0x44>
  403932:	f104 0108 	add.w	r1, r4, #8
  403936:	4628      	mov	r0, r5
  403938:	9300      	str	r3, [sp, #0]
  40393a:	f001 fa4d 	bl	404dd8 <_free_r>
  40393e:	9b00      	ldr	r3, [sp, #0]
  403940:	6819      	ldr	r1, [r3, #0]
  403942:	e6df      	b.n	403704 <_malloc_r+0x2d8>
  403944:	2001      	movs	r0, #1
  403946:	f04f 0900 	mov.w	r9, #0
  40394a:	e6bc      	b.n	4036c6 <_malloc_r+0x29a>
  40394c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403950:	d805      	bhi.n	40395e <_malloc_r+0x532>
  403952:	0bda      	lsrs	r2, r3, #15
  403954:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403958:	00c9      	lsls	r1, r1, #3
  40395a:	3277      	adds	r2, #119	; 0x77
  40395c:	e720      	b.n	4037a0 <_malloc_r+0x374>
  40395e:	f240 5154 	movw	r1, #1364	; 0x554
  403962:	428a      	cmp	r2, r1
  403964:	d805      	bhi.n	403972 <_malloc_r+0x546>
  403966:	0c9a      	lsrs	r2, r3, #18
  403968:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40396c:	00c9      	lsls	r1, r1, #3
  40396e:	327c      	adds	r2, #124	; 0x7c
  403970:	e716      	b.n	4037a0 <_malloc_r+0x374>
  403972:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403976:	227e      	movs	r2, #126	; 0x7e
  403978:	e712      	b.n	4037a0 <_malloc_r+0x374>
  40397a:	687b      	ldr	r3, [r7, #4]
  40397c:	e780      	b.n	403880 <_malloc_r+0x454>
  40397e:	08f0      	lsrs	r0, r6, #3
  403980:	f106 0308 	add.w	r3, r6, #8
  403984:	e600      	b.n	403588 <_malloc_r+0x15c>
  403986:	bf00      	nop
  403988:	20400d94 	.word	0x20400d94

0040398c <memset>:
  40398c:	b470      	push	{r4, r5, r6}
  40398e:	0786      	lsls	r6, r0, #30
  403990:	d046      	beq.n	403a20 <memset+0x94>
  403992:	1e54      	subs	r4, r2, #1
  403994:	2a00      	cmp	r2, #0
  403996:	d041      	beq.n	403a1c <memset+0x90>
  403998:	b2ca      	uxtb	r2, r1
  40399a:	4603      	mov	r3, r0
  40399c:	e002      	b.n	4039a4 <memset+0x18>
  40399e:	f114 34ff 	adds.w	r4, r4, #4294967295
  4039a2:	d33b      	bcc.n	403a1c <memset+0x90>
  4039a4:	f803 2b01 	strb.w	r2, [r3], #1
  4039a8:	079d      	lsls	r5, r3, #30
  4039aa:	d1f8      	bne.n	40399e <memset+0x12>
  4039ac:	2c03      	cmp	r4, #3
  4039ae:	d92e      	bls.n	403a0e <memset+0x82>
  4039b0:	b2cd      	uxtb	r5, r1
  4039b2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4039b6:	2c0f      	cmp	r4, #15
  4039b8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4039bc:	d919      	bls.n	4039f2 <memset+0x66>
  4039be:	f103 0210 	add.w	r2, r3, #16
  4039c2:	4626      	mov	r6, r4
  4039c4:	3e10      	subs	r6, #16
  4039c6:	2e0f      	cmp	r6, #15
  4039c8:	f842 5c10 	str.w	r5, [r2, #-16]
  4039cc:	f842 5c0c 	str.w	r5, [r2, #-12]
  4039d0:	f842 5c08 	str.w	r5, [r2, #-8]
  4039d4:	f842 5c04 	str.w	r5, [r2, #-4]
  4039d8:	f102 0210 	add.w	r2, r2, #16
  4039dc:	d8f2      	bhi.n	4039c4 <memset+0x38>
  4039de:	f1a4 0210 	sub.w	r2, r4, #16
  4039e2:	f022 020f 	bic.w	r2, r2, #15
  4039e6:	f004 040f 	and.w	r4, r4, #15
  4039ea:	3210      	adds	r2, #16
  4039ec:	2c03      	cmp	r4, #3
  4039ee:	4413      	add	r3, r2
  4039f0:	d90d      	bls.n	403a0e <memset+0x82>
  4039f2:	461e      	mov	r6, r3
  4039f4:	4622      	mov	r2, r4
  4039f6:	3a04      	subs	r2, #4
  4039f8:	2a03      	cmp	r2, #3
  4039fa:	f846 5b04 	str.w	r5, [r6], #4
  4039fe:	d8fa      	bhi.n	4039f6 <memset+0x6a>
  403a00:	1f22      	subs	r2, r4, #4
  403a02:	f022 0203 	bic.w	r2, r2, #3
  403a06:	3204      	adds	r2, #4
  403a08:	4413      	add	r3, r2
  403a0a:	f004 0403 	and.w	r4, r4, #3
  403a0e:	b12c      	cbz	r4, 403a1c <memset+0x90>
  403a10:	b2c9      	uxtb	r1, r1
  403a12:	441c      	add	r4, r3
  403a14:	f803 1b01 	strb.w	r1, [r3], #1
  403a18:	429c      	cmp	r4, r3
  403a1a:	d1fb      	bne.n	403a14 <memset+0x88>
  403a1c:	bc70      	pop	{r4, r5, r6}
  403a1e:	4770      	bx	lr
  403a20:	4614      	mov	r4, r2
  403a22:	4603      	mov	r3, r0
  403a24:	e7c2      	b.n	4039ac <memset+0x20>
  403a26:	bf00      	nop

00403a28 <__malloc_lock>:
  403a28:	4801      	ldr	r0, [pc, #4]	; (403a30 <__malloc_lock+0x8>)
  403a2a:	f001 bc6f 	b.w	40530c <__retarget_lock_acquire_recursive>
  403a2e:	bf00      	nop
  403a30:	204031f0 	.word	0x204031f0

00403a34 <__malloc_unlock>:
  403a34:	4801      	ldr	r0, [pc, #4]	; (403a3c <__malloc_unlock+0x8>)
  403a36:	f001 bc6b 	b.w	405310 <__retarget_lock_release_recursive>
  403a3a:	bf00      	nop
  403a3c:	204031f0 	.word	0x204031f0

00403a40 <_sbrk_r>:
  403a40:	b538      	push	{r3, r4, r5, lr}
  403a42:	4c07      	ldr	r4, [pc, #28]	; (403a60 <_sbrk_r+0x20>)
  403a44:	2300      	movs	r3, #0
  403a46:	4605      	mov	r5, r0
  403a48:	4608      	mov	r0, r1
  403a4a:	6023      	str	r3, [r4, #0]
  403a4c:	f7fe ffea 	bl	402a24 <_sbrk>
  403a50:	1c43      	adds	r3, r0, #1
  403a52:	d000      	beq.n	403a56 <_sbrk_r+0x16>
  403a54:	bd38      	pop	{r3, r4, r5, pc}
  403a56:	6823      	ldr	r3, [r4, #0]
  403a58:	2b00      	cmp	r3, #0
  403a5a:	d0fb      	beq.n	403a54 <_sbrk_r+0x14>
  403a5c:	602b      	str	r3, [r5, #0]
  403a5e:	bd38      	pop	{r3, r4, r5, pc}
  403a60:	20403204 	.word	0x20403204

00403a64 <strcpy>:
  403a64:	ea80 0201 	eor.w	r2, r0, r1
  403a68:	4684      	mov	ip, r0
  403a6a:	f012 0f03 	tst.w	r2, #3
  403a6e:	d14f      	bne.n	403b10 <strcpy+0xac>
  403a70:	f011 0f03 	tst.w	r1, #3
  403a74:	d132      	bne.n	403adc <strcpy+0x78>
  403a76:	f84d 4d04 	str.w	r4, [sp, #-4]!
  403a7a:	f011 0f04 	tst.w	r1, #4
  403a7e:	f851 3b04 	ldr.w	r3, [r1], #4
  403a82:	d00b      	beq.n	403a9c <strcpy+0x38>
  403a84:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  403a88:	439a      	bics	r2, r3
  403a8a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  403a8e:	bf04      	itt	eq
  403a90:	f84c 3b04 	streq.w	r3, [ip], #4
  403a94:	f851 3b04 	ldreq.w	r3, [r1], #4
  403a98:	d116      	bne.n	403ac8 <strcpy+0x64>
  403a9a:	bf00      	nop
  403a9c:	f851 4b04 	ldr.w	r4, [r1], #4
  403aa0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  403aa4:	439a      	bics	r2, r3
  403aa6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  403aaa:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  403aae:	d10b      	bne.n	403ac8 <strcpy+0x64>
  403ab0:	f84c 3b04 	str.w	r3, [ip], #4
  403ab4:	43a2      	bics	r2, r4
  403ab6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  403aba:	bf04      	itt	eq
  403abc:	f851 3b04 	ldreq.w	r3, [r1], #4
  403ac0:	f84c 4b04 	streq.w	r4, [ip], #4
  403ac4:	d0ea      	beq.n	403a9c <strcpy+0x38>
  403ac6:	4623      	mov	r3, r4
  403ac8:	f80c 3b01 	strb.w	r3, [ip], #1
  403acc:	f013 0fff 	tst.w	r3, #255	; 0xff
  403ad0:	ea4f 2333 	mov.w	r3, r3, ror #8
  403ad4:	d1f8      	bne.n	403ac8 <strcpy+0x64>
  403ad6:	f85d 4b04 	ldr.w	r4, [sp], #4
  403ada:	4770      	bx	lr
  403adc:	f011 0f01 	tst.w	r1, #1
  403ae0:	d006      	beq.n	403af0 <strcpy+0x8c>
  403ae2:	f811 2b01 	ldrb.w	r2, [r1], #1
  403ae6:	f80c 2b01 	strb.w	r2, [ip], #1
  403aea:	2a00      	cmp	r2, #0
  403aec:	bf08      	it	eq
  403aee:	4770      	bxeq	lr
  403af0:	f011 0f02 	tst.w	r1, #2
  403af4:	d0bf      	beq.n	403a76 <strcpy+0x12>
  403af6:	f831 2b02 	ldrh.w	r2, [r1], #2
  403afa:	f012 0fff 	tst.w	r2, #255	; 0xff
  403afe:	bf16      	itet	ne
  403b00:	f82c 2b02 	strhne.w	r2, [ip], #2
  403b04:	f88c 2000 	strbeq.w	r2, [ip]
  403b08:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  403b0c:	d1b3      	bne.n	403a76 <strcpy+0x12>
  403b0e:	4770      	bx	lr
  403b10:	f811 2b01 	ldrb.w	r2, [r1], #1
  403b14:	f80c 2b01 	strb.w	r2, [ip], #1
  403b18:	2a00      	cmp	r2, #0
  403b1a:	d1f9      	bne.n	403b10 <strcpy+0xac>
  403b1c:	4770      	bx	lr
  403b1e:	bf00      	nop

00403b20 <__sprint_r.part.0>:
  403b20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403b24:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  403b26:	049c      	lsls	r4, r3, #18
  403b28:	4693      	mov	fp, r2
  403b2a:	d52f      	bpl.n	403b8c <__sprint_r.part.0+0x6c>
  403b2c:	6893      	ldr	r3, [r2, #8]
  403b2e:	6812      	ldr	r2, [r2, #0]
  403b30:	b353      	cbz	r3, 403b88 <__sprint_r.part.0+0x68>
  403b32:	460e      	mov	r6, r1
  403b34:	4607      	mov	r7, r0
  403b36:	f102 0908 	add.w	r9, r2, #8
  403b3a:	e919 0420 	ldmdb	r9, {r5, sl}
  403b3e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  403b42:	d017      	beq.n	403b74 <__sprint_r.part.0+0x54>
  403b44:	3d04      	subs	r5, #4
  403b46:	2400      	movs	r4, #0
  403b48:	e001      	b.n	403b4e <__sprint_r.part.0+0x2e>
  403b4a:	45a0      	cmp	r8, r4
  403b4c:	d010      	beq.n	403b70 <__sprint_r.part.0+0x50>
  403b4e:	4632      	mov	r2, r6
  403b50:	f855 1f04 	ldr.w	r1, [r5, #4]!
  403b54:	4638      	mov	r0, r7
  403b56:	f001 f8bb 	bl	404cd0 <_fputwc_r>
  403b5a:	1c43      	adds	r3, r0, #1
  403b5c:	f104 0401 	add.w	r4, r4, #1
  403b60:	d1f3      	bne.n	403b4a <__sprint_r.part.0+0x2a>
  403b62:	2300      	movs	r3, #0
  403b64:	f8cb 3008 	str.w	r3, [fp, #8]
  403b68:	f8cb 3004 	str.w	r3, [fp, #4]
  403b6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b70:	f8db 3008 	ldr.w	r3, [fp, #8]
  403b74:	f02a 0a03 	bic.w	sl, sl, #3
  403b78:	eba3 030a 	sub.w	r3, r3, sl
  403b7c:	f8cb 3008 	str.w	r3, [fp, #8]
  403b80:	f109 0908 	add.w	r9, r9, #8
  403b84:	2b00      	cmp	r3, #0
  403b86:	d1d8      	bne.n	403b3a <__sprint_r.part.0+0x1a>
  403b88:	2000      	movs	r0, #0
  403b8a:	e7ea      	b.n	403b62 <__sprint_r.part.0+0x42>
  403b8c:	f001 fa0a 	bl	404fa4 <__sfvwrite_r>
  403b90:	2300      	movs	r3, #0
  403b92:	f8cb 3008 	str.w	r3, [fp, #8]
  403b96:	f8cb 3004 	str.w	r3, [fp, #4]
  403b9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b9e:	bf00      	nop

00403ba0 <_vfiprintf_r>:
  403ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403ba4:	b0ad      	sub	sp, #180	; 0xb4
  403ba6:	461d      	mov	r5, r3
  403ba8:	468b      	mov	fp, r1
  403baa:	4690      	mov	r8, r2
  403bac:	9307      	str	r3, [sp, #28]
  403bae:	9006      	str	r0, [sp, #24]
  403bb0:	b118      	cbz	r0, 403bba <_vfiprintf_r+0x1a>
  403bb2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403bb4:	2b00      	cmp	r3, #0
  403bb6:	f000 80f3 	beq.w	403da0 <_vfiprintf_r+0x200>
  403bba:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403bbe:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  403bc2:	07df      	lsls	r7, r3, #31
  403bc4:	b281      	uxth	r1, r0
  403bc6:	d402      	bmi.n	403bce <_vfiprintf_r+0x2e>
  403bc8:	058e      	lsls	r6, r1, #22
  403bca:	f140 80fc 	bpl.w	403dc6 <_vfiprintf_r+0x226>
  403bce:	048c      	lsls	r4, r1, #18
  403bd0:	d40a      	bmi.n	403be8 <_vfiprintf_r+0x48>
  403bd2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403bd6:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  403bda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  403bde:	f8ab 100c 	strh.w	r1, [fp, #12]
  403be2:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  403be6:	b289      	uxth	r1, r1
  403be8:	0708      	lsls	r0, r1, #28
  403bea:	f140 80b3 	bpl.w	403d54 <_vfiprintf_r+0x1b4>
  403bee:	f8db 3010 	ldr.w	r3, [fp, #16]
  403bf2:	2b00      	cmp	r3, #0
  403bf4:	f000 80ae 	beq.w	403d54 <_vfiprintf_r+0x1b4>
  403bf8:	f001 031a 	and.w	r3, r1, #26
  403bfc:	2b0a      	cmp	r3, #10
  403bfe:	f000 80b5 	beq.w	403d6c <_vfiprintf_r+0x1cc>
  403c02:	2300      	movs	r3, #0
  403c04:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  403c08:	930b      	str	r3, [sp, #44]	; 0x2c
  403c0a:	9311      	str	r3, [sp, #68]	; 0x44
  403c0c:	9310      	str	r3, [sp, #64]	; 0x40
  403c0e:	9303      	str	r3, [sp, #12]
  403c10:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  403c14:	46ca      	mov	sl, r9
  403c16:	f8cd b010 	str.w	fp, [sp, #16]
  403c1a:	f898 3000 	ldrb.w	r3, [r8]
  403c1e:	4644      	mov	r4, r8
  403c20:	b1fb      	cbz	r3, 403c62 <_vfiprintf_r+0xc2>
  403c22:	2b25      	cmp	r3, #37	; 0x25
  403c24:	d102      	bne.n	403c2c <_vfiprintf_r+0x8c>
  403c26:	e01c      	b.n	403c62 <_vfiprintf_r+0xc2>
  403c28:	2b25      	cmp	r3, #37	; 0x25
  403c2a:	d003      	beq.n	403c34 <_vfiprintf_r+0x94>
  403c2c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403c30:	2b00      	cmp	r3, #0
  403c32:	d1f9      	bne.n	403c28 <_vfiprintf_r+0x88>
  403c34:	eba4 0508 	sub.w	r5, r4, r8
  403c38:	b19d      	cbz	r5, 403c62 <_vfiprintf_r+0xc2>
  403c3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403c3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403c3e:	f8ca 8000 	str.w	r8, [sl]
  403c42:	3301      	adds	r3, #1
  403c44:	442a      	add	r2, r5
  403c46:	2b07      	cmp	r3, #7
  403c48:	f8ca 5004 	str.w	r5, [sl, #4]
  403c4c:	9211      	str	r2, [sp, #68]	; 0x44
  403c4e:	9310      	str	r3, [sp, #64]	; 0x40
  403c50:	dd7a      	ble.n	403d48 <_vfiprintf_r+0x1a8>
  403c52:	2a00      	cmp	r2, #0
  403c54:	f040 84b0 	bne.w	4045b8 <_vfiprintf_r+0xa18>
  403c58:	9b03      	ldr	r3, [sp, #12]
  403c5a:	9210      	str	r2, [sp, #64]	; 0x40
  403c5c:	442b      	add	r3, r5
  403c5e:	46ca      	mov	sl, r9
  403c60:	9303      	str	r3, [sp, #12]
  403c62:	7823      	ldrb	r3, [r4, #0]
  403c64:	2b00      	cmp	r3, #0
  403c66:	f000 83e0 	beq.w	40442a <_vfiprintf_r+0x88a>
  403c6a:	2000      	movs	r0, #0
  403c6c:	f04f 0300 	mov.w	r3, #0
  403c70:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  403c74:	f104 0801 	add.w	r8, r4, #1
  403c78:	7862      	ldrb	r2, [r4, #1]
  403c7a:	4605      	mov	r5, r0
  403c7c:	4606      	mov	r6, r0
  403c7e:	4603      	mov	r3, r0
  403c80:	f04f 34ff 	mov.w	r4, #4294967295
  403c84:	f108 0801 	add.w	r8, r8, #1
  403c88:	f1a2 0120 	sub.w	r1, r2, #32
  403c8c:	2958      	cmp	r1, #88	; 0x58
  403c8e:	f200 82de 	bhi.w	40424e <_vfiprintf_r+0x6ae>
  403c92:	e8df f011 	tbh	[pc, r1, lsl #1]
  403c96:	0221      	.short	0x0221
  403c98:	02dc02dc 	.word	0x02dc02dc
  403c9c:	02dc0229 	.word	0x02dc0229
  403ca0:	02dc02dc 	.word	0x02dc02dc
  403ca4:	02dc02dc 	.word	0x02dc02dc
  403ca8:	028902dc 	.word	0x028902dc
  403cac:	02dc0295 	.word	0x02dc0295
  403cb0:	02bd00a2 	.word	0x02bd00a2
  403cb4:	019f02dc 	.word	0x019f02dc
  403cb8:	01a401a4 	.word	0x01a401a4
  403cbc:	01a401a4 	.word	0x01a401a4
  403cc0:	01a401a4 	.word	0x01a401a4
  403cc4:	01a401a4 	.word	0x01a401a4
  403cc8:	02dc01a4 	.word	0x02dc01a4
  403ccc:	02dc02dc 	.word	0x02dc02dc
  403cd0:	02dc02dc 	.word	0x02dc02dc
  403cd4:	02dc02dc 	.word	0x02dc02dc
  403cd8:	02dc02dc 	.word	0x02dc02dc
  403cdc:	01b202dc 	.word	0x01b202dc
  403ce0:	02dc02dc 	.word	0x02dc02dc
  403ce4:	02dc02dc 	.word	0x02dc02dc
  403ce8:	02dc02dc 	.word	0x02dc02dc
  403cec:	02dc02dc 	.word	0x02dc02dc
  403cf0:	02dc02dc 	.word	0x02dc02dc
  403cf4:	02dc0197 	.word	0x02dc0197
  403cf8:	02dc02dc 	.word	0x02dc02dc
  403cfc:	02dc02dc 	.word	0x02dc02dc
  403d00:	02dc019b 	.word	0x02dc019b
  403d04:	025302dc 	.word	0x025302dc
  403d08:	02dc02dc 	.word	0x02dc02dc
  403d0c:	02dc02dc 	.word	0x02dc02dc
  403d10:	02dc02dc 	.word	0x02dc02dc
  403d14:	02dc02dc 	.word	0x02dc02dc
  403d18:	02dc02dc 	.word	0x02dc02dc
  403d1c:	021b025a 	.word	0x021b025a
  403d20:	02dc02dc 	.word	0x02dc02dc
  403d24:	026e02dc 	.word	0x026e02dc
  403d28:	02dc021b 	.word	0x02dc021b
  403d2c:	027302dc 	.word	0x027302dc
  403d30:	01f502dc 	.word	0x01f502dc
  403d34:	02090182 	.word	0x02090182
  403d38:	02dc02d7 	.word	0x02dc02d7
  403d3c:	02dc029a 	.word	0x02dc029a
  403d40:	02dc00a7 	.word	0x02dc00a7
  403d44:	022e02dc 	.word	0x022e02dc
  403d48:	f10a 0a08 	add.w	sl, sl, #8
  403d4c:	9b03      	ldr	r3, [sp, #12]
  403d4e:	442b      	add	r3, r5
  403d50:	9303      	str	r3, [sp, #12]
  403d52:	e786      	b.n	403c62 <_vfiprintf_r+0xc2>
  403d54:	4659      	mov	r1, fp
  403d56:	9806      	ldr	r0, [sp, #24]
  403d58:	f000 fdac 	bl	4048b4 <__swsetup_r>
  403d5c:	bb18      	cbnz	r0, 403da6 <_vfiprintf_r+0x206>
  403d5e:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  403d62:	f001 031a 	and.w	r3, r1, #26
  403d66:	2b0a      	cmp	r3, #10
  403d68:	f47f af4b 	bne.w	403c02 <_vfiprintf_r+0x62>
  403d6c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  403d70:	2b00      	cmp	r3, #0
  403d72:	f6ff af46 	blt.w	403c02 <_vfiprintf_r+0x62>
  403d76:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403d7a:	07db      	lsls	r3, r3, #31
  403d7c:	d405      	bmi.n	403d8a <_vfiprintf_r+0x1ea>
  403d7e:	058f      	lsls	r7, r1, #22
  403d80:	d403      	bmi.n	403d8a <_vfiprintf_r+0x1ea>
  403d82:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403d86:	f001 fac3 	bl	405310 <__retarget_lock_release_recursive>
  403d8a:	462b      	mov	r3, r5
  403d8c:	4642      	mov	r2, r8
  403d8e:	4659      	mov	r1, fp
  403d90:	9806      	ldr	r0, [sp, #24]
  403d92:	f000 fd4d 	bl	404830 <__sbprintf>
  403d96:	9003      	str	r0, [sp, #12]
  403d98:	9803      	ldr	r0, [sp, #12]
  403d9a:	b02d      	add	sp, #180	; 0xb4
  403d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403da0:	f000 fef4 	bl	404b8c <__sinit>
  403da4:	e709      	b.n	403bba <_vfiprintf_r+0x1a>
  403da6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403daa:	07d9      	lsls	r1, r3, #31
  403dac:	d404      	bmi.n	403db8 <_vfiprintf_r+0x218>
  403dae:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403db2:	059a      	lsls	r2, r3, #22
  403db4:	f140 84aa 	bpl.w	40470c <_vfiprintf_r+0xb6c>
  403db8:	f04f 33ff 	mov.w	r3, #4294967295
  403dbc:	9303      	str	r3, [sp, #12]
  403dbe:	9803      	ldr	r0, [sp, #12]
  403dc0:	b02d      	add	sp, #180	; 0xb4
  403dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403dc6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403dca:	f001 fa9f 	bl	40530c <__retarget_lock_acquire_recursive>
  403dce:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  403dd2:	b281      	uxth	r1, r0
  403dd4:	e6fb      	b.n	403bce <_vfiprintf_r+0x2e>
  403dd6:	4276      	negs	r6, r6
  403dd8:	9207      	str	r2, [sp, #28]
  403dda:	f043 0304 	orr.w	r3, r3, #4
  403dde:	f898 2000 	ldrb.w	r2, [r8]
  403de2:	e74f      	b.n	403c84 <_vfiprintf_r+0xe4>
  403de4:	9608      	str	r6, [sp, #32]
  403de6:	069e      	lsls	r6, r3, #26
  403de8:	f100 8450 	bmi.w	40468c <_vfiprintf_r+0xaec>
  403dec:	9907      	ldr	r1, [sp, #28]
  403dee:	06dd      	lsls	r5, r3, #27
  403df0:	460a      	mov	r2, r1
  403df2:	f100 83ef 	bmi.w	4045d4 <_vfiprintf_r+0xa34>
  403df6:	0658      	lsls	r0, r3, #25
  403df8:	f140 83ec 	bpl.w	4045d4 <_vfiprintf_r+0xa34>
  403dfc:	880e      	ldrh	r6, [r1, #0]
  403dfe:	3104      	adds	r1, #4
  403e00:	2700      	movs	r7, #0
  403e02:	2201      	movs	r2, #1
  403e04:	9107      	str	r1, [sp, #28]
  403e06:	f04f 0100 	mov.w	r1, #0
  403e0a:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  403e0e:	2500      	movs	r5, #0
  403e10:	1c61      	adds	r1, r4, #1
  403e12:	f000 8116 	beq.w	404042 <_vfiprintf_r+0x4a2>
  403e16:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  403e1a:	9102      	str	r1, [sp, #8]
  403e1c:	ea56 0107 	orrs.w	r1, r6, r7
  403e20:	f040 8114 	bne.w	40404c <_vfiprintf_r+0x4ac>
  403e24:	2c00      	cmp	r4, #0
  403e26:	f040 835c 	bne.w	4044e2 <_vfiprintf_r+0x942>
  403e2a:	2a00      	cmp	r2, #0
  403e2c:	f040 83b7 	bne.w	40459e <_vfiprintf_r+0x9fe>
  403e30:	f013 0301 	ands.w	r3, r3, #1
  403e34:	9305      	str	r3, [sp, #20]
  403e36:	f000 8457 	beq.w	4046e8 <_vfiprintf_r+0xb48>
  403e3a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  403e3e:	2330      	movs	r3, #48	; 0x30
  403e40:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  403e44:	9b05      	ldr	r3, [sp, #20]
  403e46:	42a3      	cmp	r3, r4
  403e48:	bfb8      	it	lt
  403e4a:	4623      	movlt	r3, r4
  403e4c:	9301      	str	r3, [sp, #4]
  403e4e:	b10d      	cbz	r5, 403e54 <_vfiprintf_r+0x2b4>
  403e50:	3301      	adds	r3, #1
  403e52:	9301      	str	r3, [sp, #4]
  403e54:	9b02      	ldr	r3, [sp, #8]
  403e56:	f013 0302 	ands.w	r3, r3, #2
  403e5a:	9309      	str	r3, [sp, #36]	; 0x24
  403e5c:	d002      	beq.n	403e64 <_vfiprintf_r+0x2c4>
  403e5e:	9b01      	ldr	r3, [sp, #4]
  403e60:	3302      	adds	r3, #2
  403e62:	9301      	str	r3, [sp, #4]
  403e64:	9b02      	ldr	r3, [sp, #8]
  403e66:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  403e6a:	930a      	str	r3, [sp, #40]	; 0x28
  403e6c:	f040 8217 	bne.w	40429e <_vfiprintf_r+0x6fe>
  403e70:	9b08      	ldr	r3, [sp, #32]
  403e72:	9a01      	ldr	r2, [sp, #4]
  403e74:	1a9d      	subs	r5, r3, r2
  403e76:	2d00      	cmp	r5, #0
  403e78:	f340 8211 	ble.w	40429e <_vfiprintf_r+0x6fe>
  403e7c:	2d10      	cmp	r5, #16
  403e7e:	f340 8490 	ble.w	4047a2 <_vfiprintf_r+0xc02>
  403e82:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403e84:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403e86:	4ec4      	ldr	r6, [pc, #784]	; (404198 <_vfiprintf_r+0x5f8>)
  403e88:	46d6      	mov	lr, sl
  403e8a:	2710      	movs	r7, #16
  403e8c:	46a2      	mov	sl, r4
  403e8e:	4619      	mov	r1, r3
  403e90:	9c06      	ldr	r4, [sp, #24]
  403e92:	e007      	b.n	403ea4 <_vfiprintf_r+0x304>
  403e94:	f101 0c02 	add.w	ip, r1, #2
  403e98:	f10e 0e08 	add.w	lr, lr, #8
  403e9c:	4601      	mov	r1, r0
  403e9e:	3d10      	subs	r5, #16
  403ea0:	2d10      	cmp	r5, #16
  403ea2:	dd11      	ble.n	403ec8 <_vfiprintf_r+0x328>
  403ea4:	1c48      	adds	r0, r1, #1
  403ea6:	3210      	adds	r2, #16
  403ea8:	2807      	cmp	r0, #7
  403eaa:	9211      	str	r2, [sp, #68]	; 0x44
  403eac:	e88e 00c0 	stmia.w	lr, {r6, r7}
  403eb0:	9010      	str	r0, [sp, #64]	; 0x40
  403eb2:	ddef      	ble.n	403e94 <_vfiprintf_r+0x2f4>
  403eb4:	2a00      	cmp	r2, #0
  403eb6:	f040 81e4 	bne.w	404282 <_vfiprintf_r+0x6e2>
  403eba:	3d10      	subs	r5, #16
  403ebc:	2d10      	cmp	r5, #16
  403ebe:	4611      	mov	r1, r2
  403ec0:	f04f 0c01 	mov.w	ip, #1
  403ec4:	46ce      	mov	lr, r9
  403ec6:	dced      	bgt.n	403ea4 <_vfiprintf_r+0x304>
  403ec8:	4654      	mov	r4, sl
  403eca:	4661      	mov	r1, ip
  403ecc:	46f2      	mov	sl, lr
  403ece:	442a      	add	r2, r5
  403ed0:	2907      	cmp	r1, #7
  403ed2:	9211      	str	r2, [sp, #68]	; 0x44
  403ed4:	f8ca 6000 	str.w	r6, [sl]
  403ed8:	f8ca 5004 	str.w	r5, [sl, #4]
  403edc:	9110      	str	r1, [sp, #64]	; 0x40
  403ede:	f300 82ec 	bgt.w	4044ba <_vfiprintf_r+0x91a>
  403ee2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403ee6:	f10a 0a08 	add.w	sl, sl, #8
  403eea:	1c48      	adds	r0, r1, #1
  403eec:	2d00      	cmp	r5, #0
  403eee:	f040 81de 	bne.w	4042ae <_vfiprintf_r+0x70e>
  403ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403ef4:	2b00      	cmp	r3, #0
  403ef6:	f000 81f8 	beq.w	4042ea <_vfiprintf_r+0x74a>
  403efa:	3202      	adds	r2, #2
  403efc:	a90e      	add	r1, sp, #56	; 0x38
  403efe:	2302      	movs	r3, #2
  403f00:	2807      	cmp	r0, #7
  403f02:	9211      	str	r2, [sp, #68]	; 0x44
  403f04:	9010      	str	r0, [sp, #64]	; 0x40
  403f06:	e88a 000a 	stmia.w	sl, {r1, r3}
  403f0a:	f340 81ea 	ble.w	4042e2 <_vfiprintf_r+0x742>
  403f0e:	2a00      	cmp	r2, #0
  403f10:	f040 838c 	bne.w	40462c <_vfiprintf_r+0xa8c>
  403f14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403f16:	2b80      	cmp	r3, #128	; 0x80
  403f18:	f04f 0001 	mov.w	r0, #1
  403f1c:	4611      	mov	r1, r2
  403f1e:	46ca      	mov	sl, r9
  403f20:	f040 81e7 	bne.w	4042f2 <_vfiprintf_r+0x752>
  403f24:	9b08      	ldr	r3, [sp, #32]
  403f26:	9d01      	ldr	r5, [sp, #4]
  403f28:	1b5e      	subs	r6, r3, r5
  403f2a:	2e00      	cmp	r6, #0
  403f2c:	f340 81e1 	ble.w	4042f2 <_vfiprintf_r+0x752>
  403f30:	2e10      	cmp	r6, #16
  403f32:	4d9a      	ldr	r5, [pc, #616]	; (40419c <_vfiprintf_r+0x5fc>)
  403f34:	f340 8450 	ble.w	4047d8 <_vfiprintf_r+0xc38>
  403f38:	46d4      	mov	ip, sl
  403f3a:	2710      	movs	r7, #16
  403f3c:	46a2      	mov	sl, r4
  403f3e:	9c06      	ldr	r4, [sp, #24]
  403f40:	e007      	b.n	403f52 <_vfiprintf_r+0x3b2>
  403f42:	f101 0e02 	add.w	lr, r1, #2
  403f46:	f10c 0c08 	add.w	ip, ip, #8
  403f4a:	4601      	mov	r1, r0
  403f4c:	3e10      	subs	r6, #16
  403f4e:	2e10      	cmp	r6, #16
  403f50:	dd11      	ble.n	403f76 <_vfiprintf_r+0x3d6>
  403f52:	1c48      	adds	r0, r1, #1
  403f54:	3210      	adds	r2, #16
  403f56:	2807      	cmp	r0, #7
  403f58:	9211      	str	r2, [sp, #68]	; 0x44
  403f5a:	e88c 00a0 	stmia.w	ip, {r5, r7}
  403f5e:	9010      	str	r0, [sp, #64]	; 0x40
  403f60:	ddef      	ble.n	403f42 <_vfiprintf_r+0x3a2>
  403f62:	2a00      	cmp	r2, #0
  403f64:	f040 829d 	bne.w	4044a2 <_vfiprintf_r+0x902>
  403f68:	3e10      	subs	r6, #16
  403f6a:	2e10      	cmp	r6, #16
  403f6c:	f04f 0e01 	mov.w	lr, #1
  403f70:	4611      	mov	r1, r2
  403f72:	46cc      	mov	ip, r9
  403f74:	dced      	bgt.n	403f52 <_vfiprintf_r+0x3b2>
  403f76:	4654      	mov	r4, sl
  403f78:	46e2      	mov	sl, ip
  403f7a:	4432      	add	r2, r6
  403f7c:	f1be 0f07 	cmp.w	lr, #7
  403f80:	9211      	str	r2, [sp, #68]	; 0x44
  403f82:	e88a 0060 	stmia.w	sl, {r5, r6}
  403f86:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  403f8a:	f300 8369 	bgt.w	404660 <_vfiprintf_r+0xac0>
  403f8e:	f10a 0a08 	add.w	sl, sl, #8
  403f92:	f10e 0001 	add.w	r0, lr, #1
  403f96:	4671      	mov	r1, lr
  403f98:	e1ab      	b.n	4042f2 <_vfiprintf_r+0x752>
  403f9a:	9608      	str	r6, [sp, #32]
  403f9c:	f013 0220 	ands.w	r2, r3, #32
  403fa0:	f040 838c 	bne.w	4046bc <_vfiprintf_r+0xb1c>
  403fa4:	f013 0110 	ands.w	r1, r3, #16
  403fa8:	f040 831a 	bne.w	4045e0 <_vfiprintf_r+0xa40>
  403fac:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  403fb0:	f000 8316 	beq.w	4045e0 <_vfiprintf_r+0xa40>
  403fb4:	9807      	ldr	r0, [sp, #28]
  403fb6:	460a      	mov	r2, r1
  403fb8:	4601      	mov	r1, r0
  403fba:	3104      	adds	r1, #4
  403fbc:	8806      	ldrh	r6, [r0, #0]
  403fbe:	9107      	str	r1, [sp, #28]
  403fc0:	2700      	movs	r7, #0
  403fc2:	e720      	b.n	403e06 <_vfiprintf_r+0x266>
  403fc4:	9608      	str	r6, [sp, #32]
  403fc6:	f043 0310 	orr.w	r3, r3, #16
  403fca:	e7e7      	b.n	403f9c <_vfiprintf_r+0x3fc>
  403fcc:	9608      	str	r6, [sp, #32]
  403fce:	f043 0310 	orr.w	r3, r3, #16
  403fd2:	e708      	b.n	403de6 <_vfiprintf_r+0x246>
  403fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403fd8:	f898 2000 	ldrb.w	r2, [r8]
  403fdc:	e652      	b.n	403c84 <_vfiprintf_r+0xe4>
  403fde:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  403fe2:	2600      	movs	r6, #0
  403fe4:	f818 2b01 	ldrb.w	r2, [r8], #1
  403fe8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  403fec:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  403ff0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  403ff4:	2909      	cmp	r1, #9
  403ff6:	d9f5      	bls.n	403fe4 <_vfiprintf_r+0x444>
  403ff8:	e646      	b.n	403c88 <_vfiprintf_r+0xe8>
  403ffa:	9608      	str	r6, [sp, #32]
  403ffc:	2800      	cmp	r0, #0
  403ffe:	f040 8408 	bne.w	404812 <_vfiprintf_r+0xc72>
  404002:	f043 0310 	orr.w	r3, r3, #16
  404006:	069e      	lsls	r6, r3, #26
  404008:	f100 834c 	bmi.w	4046a4 <_vfiprintf_r+0xb04>
  40400c:	06dd      	lsls	r5, r3, #27
  40400e:	f100 82f3 	bmi.w	4045f8 <_vfiprintf_r+0xa58>
  404012:	0658      	lsls	r0, r3, #25
  404014:	f140 82f0 	bpl.w	4045f8 <_vfiprintf_r+0xa58>
  404018:	9d07      	ldr	r5, [sp, #28]
  40401a:	f9b5 6000 	ldrsh.w	r6, [r5]
  40401e:	462a      	mov	r2, r5
  404020:	17f7      	asrs	r7, r6, #31
  404022:	3204      	adds	r2, #4
  404024:	4630      	mov	r0, r6
  404026:	4639      	mov	r1, r7
  404028:	9207      	str	r2, [sp, #28]
  40402a:	2800      	cmp	r0, #0
  40402c:	f171 0200 	sbcs.w	r2, r1, #0
  404030:	f2c0 835d 	blt.w	4046ee <_vfiprintf_r+0xb4e>
  404034:	1c61      	adds	r1, r4, #1
  404036:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40403a:	f04f 0201 	mov.w	r2, #1
  40403e:	f47f aeea 	bne.w	403e16 <_vfiprintf_r+0x276>
  404042:	ea56 0107 	orrs.w	r1, r6, r7
  404046:	f000 824d 	beq.w	4044e4 <_vfiprintf_r+0x944>
  40404a:	9302      	str	r3, [sp, #8]
  40404c:	2a01      	cmp	r2, #1
  40404e:	f000 828c 	beq.w	40456a <_vfiprintf_r+0x9ca>
  404052:	2a02      	cmp	r2, #2
  404054:	f040 825c 	bne.w	404510 <_vfiprintf_r+0x970>
  404058:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40405a:	46cb      	mov	fp, r9
  40405c:	0933      	lsrs	r3, r6, #4
  40405e:	f006 010f 	and.w	r1, r6, #15
  404062:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  404066:	093a      	lsrs	r2, r7, #4
  404068:	461e      	mov	r6, r3
  40406a:	4617      	mov	r7, r2
  40406c:	5c43      	ldrb	r3, [r0, r1]
  40406e:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  404072:	ea56 0307 	orrs.w	r3, r6, r7
  404076:	d1f1      	bne.n	40405c <_vfiprintf_r+0x4bc>
  404078:	eba9 030b 	sub.w	r3, r9, fp
  40407c:	9305      	str	r3, [sp, #20]
  40407e:	e6e1      	b.n	403e44 <_vfiprintf_r+0x2a4>
  404080:	2800      	cmp	r0, #0
  404082:	f040 83c0 	bne.w	404806 <_vfiprintf_r+0xc66>
  404086:	0699      	lsls	r1, r3, #26
  404088:	f100 8367 	bmi.w	40475a <_vfiprintf_r+0xbba>
  40408c:	06da      	lsls	r2, r3, #27
  40408e:	f100 80f1 	bmi.w	404274 <_vfiprintf_r+0x6d4>
  404092:	065b      	lsls	r3, r3, #25
  404094:	f140 80ee 	bpl.w	404274 <_vfiprintf_r+0x6d4>
  404098:	9a07      	ldr	r2, [sp, #28]
  40409a:	6813      	ldr	r3, [r2, #0]
  40409c:	3204      	adds	r2, #4
  40409e:	9207      	str	r2, [sp, #28]
  4040a0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4040a4:	801a      	strh	r2, [r3, #0]
  4040a6:	e5b8      	b.n	403c1a <_vfiprintf_r+0x7a>
  4040a8:	9807      	ldr	r0, [sp, #28]
  4040aa:	4a3d      	ldr	r2, [pc, #244]	; (4041a0 <_vfiprintf_r+0x600>)
  4040ac:	9608      	str	r6, [sp, #32]
  4040ae:	920b      	str	r2, [sp, #44]	; 0x2c
  4040b0:	6806      	ldr	r6, [r0, #0]
  4040b2:	2278      	movs	r2, #120	; 0x78
  4040b4:	2130      	movs	r1, #48	; 0x30
  4040b6:	3004      	adds	r0, #4
  4040b8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4040bc:	f043 0302 	orr.w	r3, r3, #2
  4040c0:	9007      	str	r0, [sp, #28]
  4040c2:	2700      	movs	r7, #0
  4040c4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4040c8:	2202      	movs	r2, #2
  4040ca:	e69c      	b.n	403e06 <_vfiprintf_r+0x266>
  4040cc:	9608      	str	r6, [sp, #32]
  4040ce:	2800      	cmp	r0, #0
  4040d0:	d099      	beq.n	404006 <_vfiprintf_r+0x466>
  4040d2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4040d6:	e796      	b.n	404006 <_vfiprintf_r+0x466>
  4040d8:	f898 2000 	ldrb.w	r2, [r8]
  4040dc:	2d00      	cmp	r5, #0
  4040de:	f47f add1 	bne.w	403c84 <_vfiprintf_r+0xe4>
  4040e2:	2001      	movs	r0, #1
  4040e4:	2520      	movs	r5, #32
  4040e6:	e5cd      	b.n	403c84 <_vfiprintf_r+0xe4>
  4040e8:	f043 0301 	orr.w	r3, r3, #1
  4040ec:	f898 2000 	ldrb.w	r2, [r8]
  4040f0:	e5c8      	b.n	403c84 <_vfiprintf_r+0xe4>
  4040f2:	9608      	str	r6, [sp, #32]
  4040f4:	2800      	cmp	r0, #0
  4040f6:	f040 8393 	bne.w	404820 <_vfiprintf_r+0xc80>
  4040fa:	4929      	ldr	r1, [pc, #164]	; (4041a0 <_vfiprintf_r+0x600>)
  4040fc:	910b      	str	r1, [sp, #44]	; 0x2c
  4040fe:	069f      	lsls	r7, r3, #26
  404100:	f100 82e8 	bmi.w	4046d4 <_vfiprintf_r+0xb34>
  404104:	9807      	ldr	r0, [sp, #28]
  404106:	06de      	lsls	r6, r3, #27
  404108:	4601      	mov	r1, r0
  40410a:	f100 8270 	bmi.w	4045ee <_vfiprintf_r+0xa4e>
  40410e:	065d      	lsls	r5, r3, #25
  404110:	f140 826d 	bpl.w	4045ee <_vfiprintf_r+0xa4e>
  404114:	3104      	adds	r1, #4
  404116:	8806      	ldrh	r6, [r0, #0]
  404118:	9107      	str	r1, [sp, #28]
  40411a:	2700      	movs	r7, #0
  40411c:	07d8      	lsls	r0, r3, #31
  40411e:	f140 8222 	bpl.w	404566 <_vfiprintf_r+0x9c6>
  404122:	ea56 0107 	orrs.w	r1, r6, r7
  404126:	f000 821e 	beq.w	404566 <_vfiprintf_r+0x9c6>
  40412a:	2130      	movs	r1, #48	; 0x30
  40412c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  404130:	f043 0302 	orr.w	r3, r3, #2
  404134:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404138:	2202      	movs	r2, #2
  40413a:	e664      	b.n	403e06 <_vfiprintf_r+0x266>
  40413c:	9608      	str	r6, [sp, #32]
  40413e:	2800      	cmp	r0, #0
  404140:	f040 836b 	bne.w	40481a <_vfiprintf_r+0xc7a>
  404144:	4917      	ldr	r1, [pc, #92]	; (4041a4 <_vfiprintf_r+0x604>)
  404146:	910b      	str	r1, [sp, #44]	; 0x2c
  404148:	e7d9      	b.n	4040fe <_vfiprintf_r+0x55e>
  40414a:	9907      	ldr	r1, [sp, #28]
  40414c:	9608      	str	r6, [sp, #32]
  40414e:	680a      	ldr	r2, [r1, #0]
  404150:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404154:	f04f 0000 	mov.w	r0, #0
  404158:	460a      	mov	r2, r1
  40415a:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40415e:	3204      	adds	r2, #4
  404160:	2001      	movs	r0, #1
  404162:	9001      	str	r0, [sp, #4]
  404164:	9207      	str	r2, [sp, #28]
  404166:	9005      	str	r0, [sp, #20]
  404168:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40416c:	9302      	str	r3, [sp, #8]
  40416e:	2400      	movs	r4, #0
  404170:	e670      	b.n	403e54 <_vfiprintf_r+0x2b4>
  404172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404176:	f898 2000 	ldrb.w	r2, [r8]
  40417a:	e583      	b.n	403c84 <_vfiprintf_r+0xe4>
  40417c:	f898 2000 	ldrb.w	r2, [r8]
  404180:	2a6c      	cmp	r2, #108	; 0x6c
  404182:	bf03      	ittte	eq
  404184:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  404188:	f043 0320 	orreq.w	r3, r3, #32
  40418c:	f108 0801 	addeq.w	r8, r8, #1
  404190:	f043 0310 	orrne.w	r3, r3, #16
  404194:	e576      	b.n	403c84 <_vfiprintf_r+0xe4>
  404196:	bf00      	nop
  404198:	0040735c 	.word	0x0040735c
  40419c:	0040736c 	.word	0x0040736c
  4041a0:	00407340 	.word	0x00407340
  4041a4:	0040732c 	.word	0x0040732c
  4041a8:	9907      	ldr	r1, [sp, #28]
  4041aa:	680e      	ldr	r6, [r1, #0]
  4041ac:	460a      	mov	r2, r1
  4041ae:	2e00      	cmp	r6, #0
  4041b0:	f102 0204 	add.w	r2, r2, #4
  4041b4:	f6ff ae0f 	blt.w	403dd6 <_vfiprintf_r+0x236>
  4041b8:	9207      	str	r2, [sp, #28]
  4041ba:	f898 2000 	ldrb.w	r2, [r8]
  4041be:	e561      	b.n	403c84 <_vfiprintf_r+0xe4>
  4041c0:	f898 2000 	ldrb.w	r2, [r8]
  4041c4:	2001      	movs	r0, #1
  4041c6:	252b      	movs	r5, #43	; 0x2b
  4041c8:	e55c      	b.n	403c84 <_vfiprintf_r+0xe4>
  4041ca:	9907      	ldr	r1, [sp, #28]
  4041cc:	9608      	str	r6, [sp, #32]
  4041ce:	f8d1 b000 	ldr.w	fp, [r1]
  4041d2:	f04f 0200 	mov.w	r2, #0
  4041d6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4041da:	1d0e      	adds	r6, r1, #4
  4041dc:	f1bb 0f00 	cmp.w	fp, #0
  4041e0:	f000 82e5 	beq.w	4047ae <_vfiprintf_r+0xc0e>
  4041e4:	1c67      	adds	r7, r4, #1
  4041e6:	f000 82c4 	beq.w	404772 <_vfiprintf_r+0xbd2>
  4041ea:	4622      	mov	r2, r4
  4041ec:	2100      	movs	r1, #0
  4041ee:	4658      	mov	r0, fp
  4041f0:	9301      	str	r3, [sp, #4]
  4041f2:	f001 f91d 	bl	405430 <memchr>
  4041f6:	9b01      	ldr	r3, [sp, #4]
  4041f8:	2800      	cmp	r0, #0
  4041fa:	f000 82e5 	beq.w	4047c8 <_vfiprintf_r+0xc28>
  4041fe:	eba0 020b 	sub.w	r2, r0, fp
  404202:	9205      	str	r2, [sp, #20]
  404204:	9607      	str	r6, [sp, #28]
  404206:	9302      	str	r3, [sp, #8]
  404208:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40420c:	2400      	movs	r4, #0
  40420e:	e619      	b.n	403e44 <_vfiprintf_r+0x2a4>
  404210:	f898 2000 	ldrb.w	r2, [r8]
  404214:	2a2a      	cmp	r2, #42	; 0x2a
  404216:	f108 0701 	add.w	r7, r8, #1
  40421a:	f000 82e9 	beq.w	4047f0 <_vfiprintf_r+0xc50>
  40421e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404222:	2909      	cmp	r1, #9
  404224:	46b8      	mov	r8, r7
  404226:	f04f 0400 	mov.w	r4, #0
  40422a:	f63f ad2d 	bhi.w	403c88 <_vfiprintf_r+0xe8>
  40422e:	f818 2b01 	ldrb.w	r2, [r8], #1
  404232:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404236:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  40423a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40423e:	2909      	cmp	r1, #9
  404240:	d9f5      	bls.n	40422e <_vfiprintf_r+0x68e>
  404242:	e521      	b.n	403c88 <_vfiprintf_r+0xe8>
  404244:	f043 0320 	orr.w	r3, r3, #32
  404248:	f898 2000 	ldrb.w	r2, [r8]
  40424c:	e51a      	b.n	403c84 <_vfiprintf_r+0xe4>
  40424e:	9608      	str	r6, [sp, #32]
  404250:	2800      	cmp	r0, #0
  404252:	f040 82db 	bne.w	40480c <_vfiprintf_r+0xc6c>
  404256:	2a00      	cmp	r2, #0
  404258:	f000 80e7 	beq.w	40442a <_vfiprintf_r+0x88a>
  40425c:	2101      	movs	r1, #1
  40425e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404262:	f04f 0200 	mov.w	r2, #0
  404266:	9101      	str	r1, [sp, #4]
  404268:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40426c:	9105      	str	r1, [sp, #20]
  40426e:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  404272:	e77b      	b.n	40416c <_vfiprintf_r+0x5cc>
  404274:	9a07      	ldr	r2, [sp, #28]
  404276:	6813      	ldr	r3, [r2, #0]
  404278:	3204      	adds	r2, #4
  40427a:	9207      	str	r2, [sp, #28]
  40427c:	9a03      	ldr	r2, [sp, #12]
  40427e:	601a      	str	r2, [r3, #0]
  404280:	e4cb      	b.n	403c1a <_vfiprintf_r+0x7a>
  404282:	aa0f      	add	r2, sp, #60	; 0x3c
  404284:	9904      	ldr	r1, [sp, #16]
  404286:	4620      	mov	r0, r4
  404288:	f7ff fc4a 	bl	403b20 <__sprint_r.part.0>
  40428c:	2800      	cmp	r0, #0
  40428e:	f040 8139 	bne.w	404504 <_vfiprintf_r+0x964>
  404292:	9910      	ldr	r1, [sp, #64]	; 0x40
  404294:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404296:	f101 0c01 	add.w	ip, r1, #1
  40429a:	46ce      	mov	lr, r9
  40429c:	e5ff      	b.n	403e9e <_vfiprintf_r+0x2fe>
  40429e:	9910      	ldr	r1, [sp, #64]	; 0x40
  4042a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4042a2:	1c48      	adds	r0, r1, #1
  4042a4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4042a8:	2d00      	cmp	r5, #0
  4042aa:	f43f ae22 	beq.w	403ef2 <_vfiprintf_r+0x352>
  4042ae:	3201      	adds	r2, #1
  4042b0:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4042b4:	2101      	movs	r1, #1
  4042b6:	2807      	cmp	r0, #7
  4042b8:	9211      	str	r2, [sp, #68]	; 0x44
  4042ba:	9010      	str	r0, [sp, #64]	; 0x40
  4042bc:	f8ca 5000 	str.w	r5, [sl]
  4042c0:	f8ca 1004 	str.w	r1, [sl, #4]
  4042c4:	f340 8108 	ble.w	4044d8 <_vfiprintf_r+0x938>
  4042c8:	2a00      	cmp	r2, #0
  4042ca:	f040 81bc 	bne.w	404646 <_vfiprintf_r+0xaa6>
  4042ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4042d0:	2b00      	cmp	r3, #0
  4042d2:	f43f ae1f 	beq.w	403f14 <_vfiprintf_r+0x374>
  4042d6:	ab0e      	add	r3, sp, #56	; 0x38
  4042d8:	2202      	movs	r2, #2
  4042da:	4608      	mov	r0, r1
  4042dc:	931c      	str	r3, [sp, #112]	; 0x70
  4042de:	921d      	str	r2, [sp, #116]	; 0x74
  4042e0:	46ca      	mov	sl, r9
  4042e2:	4601      	mov	r1, r0
  4042e4:	f10a 0a08 	add.w	sl, sl, #8
  4042e8:	3001      	adds	r0, #1
  4042ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4042ec:	2b80      	cmp	r3, #128	; 0x80
  4042ee:	f43f ae19 	beq.w	403f24 <_vfiprintf_r+0x384>
  4042f2:	9b05      	ldr	r3, [sp, #20]
  4042f4:	1ae4      	subs	r4, r4, r3
  4042f6:	2c00      	cmp	r4, #0
  4042f8:	dd2e      	ble.n	404358 <_vfiprintf_r+0x7b8>
  4042fa:	2c10      	cmp	r4, #16
  4042fc:	4db3      	ldr	r5, [pc, #716]	; (4045cc <_vfiprintf_r+0xa2c>)
  4042fe:	dd1e      	ble.n	40433e <_vfiprintf_r+0x79e>
  404300:	46d6      	mov	lr, sl
  404302:	2610      	movs	r6, #16
  404304:	9f06      	ldr	r7, [sp, #24]
  404306:	f8dd a010 	ldr.w	sl, [sp, #16]
  40430a:	e006      	b.n	40431a <_vfiprintf_r+0x77a>
  40430c:	1c88      	adds	r0, r1, #2
  40430e:	f10e 0e08 	add.w	lr, lr, #8
  404312:	4619      	mov	r1, r3
  404314:	3c10      	subs	r4, #16
  404316:	2c10      	cmp	r4, #16
  404318:	dd10      	ble.n	40433c <_vfiprintf_r+0x79c>
  40431a:	1c4b      	adds	r3, r1, #1
  40431c:	3210      	adds	r2, #16
  40431e:	2b07      	cmp	r3, #7
  404320:	9211      	str	r2, [sp, #68]	; 0x44
  404322:	e88e 0060 	stmia.w	lr, {r5, r6}
  404326:	9310      	str	r3, [sp, #64]	; 0x40
  404328:	ddf0      	ble.n	40430c <_vfiprintf_r+0x76c>
  40432a:	2a00      	cmp	r2, #0
  40432c:	d165      	bne.n	4043fa <_vfiprintf_r+0x85a>
  40432e:	3c10      	subs	r4, #16
  404330:	2c10      	cmp	r4, #16
  404332:	f04f 0001 	mov.w	r0, #1
  404336:	4611      	mov	r1, r2
  404338:	46ce      	mov	lr, r9
  40433a:	dcee      	bgt.n	40431a <_vfiprintf_r+0x77a>
  40433c:	46f2      	mov	sl, lr
  40433e:	4422      	add	r2, r4
  404340:	2807      	cmp	r0, #7
  404342:	9211      	str	r2, [sp, #68]	; 0x44
  404344:	f8ca 5000 	str.w	r5, [sl]
  404348:	f8ca 4004 	str.w	r4, [sl, #4]
  40434c:	9010      	str	r0, [sp, #64]	; 0x40
  40434e:	f300 8085 	bgt.w	40445c <_vfiprintf_r+0x8bc>
  404352:	f10a 0a08 	add.w	sl, sl, #8
  404356:	3001      	adds	r0, #1
  404358:	9905      	ldr	r1, [sp, #20]
  40435a:	f8ca b000 	str.w	fp, [sl]
  40435e:	440a      	add	r2, r1
  404360:	2807      	cmp	r0, #7
  404362:	9211      	str	r2, [sp, #68]	; 0x44
  404364:	f8ca 1004 	str.w	r1, [sl, #4]
  404368:	9010      	str	r0, [sp, #64]	; 0x40
  40436a:	f340 8082 	ble.w	404472 <_vfiprintf_r+0x8d2>
  40436e:	2a00      	cmp	r2, #0
  404370:	f040 8118 	bne.w	4045a4 <_vfiprintf_r+0xa04>
  404374:	9b02      	ldr	r3, [sp, #8]
  404376:	9210      	str	r2, [sp, #64]	; 0x40
  404378:	0758      	lsls	r0, r3, #29
  40437a:	d535      	bpl.n	4043e8 <_vfiprintf_r+0x848>
  40437c:	9b08      	ldr	r3, [sp, #32]
  40437e:	9901      	ldr	r1, [sp, #4]
  404380:	1a5c      	subs	r4, r3, r1
  404382:	2c00      	cmp	r4, #0
  404384:	f340 80e7 	ble.w	404556 <_vfiprintf_r+0x9b6>
  404388:	46ca      	mov	sl, r9
  40438a:	2c10      	cmp	r4, #16
  40438c:	f340 8218 	ble.w	4047c0 <_vfiprintf_r+0xc20>
  404390:	9910      	ldr	r1, [sp, #64]	; 0x40
  404392:	4e8f      	ldr	r6, [pc, #572]	; (4045d0 <_vfiprintf_r+0xa30>)
  404394:	9f06      	ldr	r7, [sp, #24]
  404396:	f8dd b010 	ldr.w	fp, [sp, #16]
  40439a:	2510      	movs	r5, #16
  40439c:	e006      	b.n	4043ac <_vfiprintf_r+0x80c>
  40439e:	1c88      	adds	r0, r1, #2
  4043a0:	f10a 0a08 	add.w	sl, sl, #8
  4043a4:	4619      	mov	r1, r3
  4043a6:	3c10      	subs	r4, #16
  4043a8:	2c10      	cmp	r4, #16
  4043aa:	dd11      	ble.n	4043d0 <_vfiprintf_r+0x830>
  4043ac:	1c4b      	adds	r3, r1, #1
  4043ae:	3210      	adds	r2, #16
  4043b0:	2b07      	cmp	r3, #7
  4043b2:	9211      	str	r2, [sp, #68]	; 0x44
  4043b4:	f8ca 6000 	str.w	r6, [sl]
  4043b8:	f8ca 5004 	str.w	r5, [sl, #4]
  4043bc:	9310      	str	r3, [sp, #64]	; 0x40
  4043be:	ddee      	ble.n	40439e <_vfiprintf_r+0x7fe>
  4043c0:	bb42      	cbnz	r2, 404414 <_vfiprintf_r+0x874>
  4043c2:	3c10      	subs	r4, #16
  4043c4:	2c10      	cmp	r4, #16
  4043c6:	f04f 0001 	mov.w	r0, #1
  4043ca:	4611      	mov	r1, r2
  4043cc:	46ca      	mov	sl, r9
  4043ce:	dced      	bgt.n	4043ac <_vfiprintf_r+0x80c>
  4043d0:	4422      	add	r2, r4
  4043d2:	2807      	cmp	r0, #7
  4043d4:	9211      	str	r2, [sp, #68]	; 0x44
  4043d6:	f8ca 6000 	str.w	r6, [sl]
  4043da:	f8ca 4004 	str.w	r4, [sl, #4]
  4043de:	9010      	str	r0, [sp, #64]	; 0x40
  4043e0:	dd51      	ble.n	404486 <_vfiprintf_r+0x8e6>
  4043e2:	2a00      	cmp	r2, #0
  4043e4:	f040 819b 	bne.w	40471e <_vfiprintf_r+0xb7e>
  4043e8:	9b03      	ldr	r3, [sp, #12]
  4043ea:	9a08      	ldr	r2, [sp, #32]
  4043ec:	9901      	ldr	r1, [sp, #4]
  4043ee:	428a      	cmp	r2, r1
  4043f0:	bfac      	ite	ge
  4043f2:	189b      	addge	r3, r3, r2
  4043f4:	185b      	addlt	r3, r3, r1
  4043f6:	9303      	str	r3, [sp, #12]
  4043f8:	e04e      	b.n	404498 <_vfiprintf_r+0x8f8>
  4043fa:	aa0f      	add	r2, sp, #60	; 0x3c
  4043fc:	4651      	mov	r1, sl
  4043fe:	4638      	mov	r0, r7
  404400:	f7ff fb8e 	bl	403b20 <__sprint_r.part.0>
  404404:	2800      	cmp	r0, #0
  404406:	f040 813f 	bne.w	404688 <_vfiprintf_r+0xae8>
  40440a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40440c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40440e:	1c48      	adds	r0, r1, #1
  404410:	46ce      	mov	lr, r9
  404412:	e77f      	b.n	404314 <_vfiprintf_r+0x774>
  404414:	aa0f      	add	r2, sp, #60	; 0x3c
  404416:	4659      	mov	r1, fp
  404418:	4638      	mov	r0, r7
  40441a:	f7ff fb81 	bl	403b20 <__sprint_r.part.0>
  40441e:	b960      	cbnz	r0, 40443a <_vfiprintf_r+0x89a>
  404420:	9910      	ldr	r1, [sp, #64]	; 0x40
  404422:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404424:	1c48      	adds	r0, r1, #1
  404426:	46ca      	mov	sl, r9
  404428:	e7bd      	b.n	4043a6 <_vfiprintf_r+0x806>
  40442a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40442c:	f8dd b010 	ldr.w	fp, [sp, #16]
  404430:	2b00      	cmp	r3, #0
  404432:	f040 81d4 	bne.w	4047de <_vfiprintf_r+0xc3e>
  404436:	2300      	movs	r3, #0
  404438:	9310      	str	r3, [sp, #64]	; 0x40
  40443a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40443e:	f013 0f01 	tst.w	r3, #1
  404442:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404446:	d102      	bne.n	40444e <_vfiprintf_r+0x8ae>
  404448:	059a      	lsls	r2, r3, #22
  40444a:	f140 80de 	bpl.w	40460a <_vfiprintf_r+0xa6a>
  40444e:	065b      	lsls	r3, r3, #25
  404450:	f53f acb2 	bmi.w	403db8 <_vfiprintf_r+0x218>
  404454:	9803      	ldr	r0, [sp, #12]
  404456:	b02d      	add	sp, #180	; 0xb4
  404458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40445c:	2a00      	cmp	r2, #0
  40445e:	f040 8106 	bne.w	40466e <_vfiprintf_r+0xace>
  404462:	9a05      	ldr	r2, [sp, #20]
  404464:	921d      	str	r2, [sp, #116]	; 0x74
  404466:	2301      	movs	r3, #1
  404468:	9211      	str	r2, [sp, #68]	; 0x44
  40446a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40446e:	9310      	str	r3, [sp, #64]	; 0x40
  404470:	46ca      	mov	sl, r9
  404472:	f10a 0a08 	add.w	sl, sl, #8
  404476:	9b02      	ldr	r3, [sp, #8]
  404478:	0759      	lsls	r1, r3, #29
  40447a:	d504      	bpl.n	404486 <_vfiprintf_r+0x8e6>
  40447c:	9b08      	ldr	r3, [sp, #32]
  40447e:	9901      	ldr	r1, [sp, #4]
  404480:	1a5c      	subs	r4, r3, r1
  404482:	2c00      	cmp	r4, #0
  404484:	dc81      	bgt.n	40438a <_vfiprintf_r+0x7ea>
  404486:	9b03      	ldr	r3, [sp, #12]
  404488:	9908      	ldr	r1, [sp, #32]
  40448a:	9801      	ldr	r0, [sp, #4]
  40448c:	4281      	cmp	r1, r0
  40448e:	bfac      	ite	ge
  404490:	185b      	addge	r3, r3, r1
  404492:	181b      	addlt	r3, r3, r0
  404494:	9303      	str	r3, [sp, #12]
  404496:	bb72      	cbnz	r2, 4044f6 <_vfiprintf_r+0x956>
  404498:	2300      	movs	r3, #0
  40449a:	9310      	str	r3, [sp, #64]	; 0x40
  40449c:	46ca      	mov	sl, r9
  40449e:	f7ff bbbc 	b.w	403c1a <_vfiprintf_r+0x7a>
  4044a2:	aa0f      	add	r2, sp, #60	; 0x3c
  4044a4:	9904      	ldr	r1, [sp, #16]
  4044a6:	4620      	mov	r0, r4
  4044a8:	f7ff fb3a 	bl	403b20 <__sprint_r.part.0>
  4044ac:	bb50      	cbnz	r0, 404504 <_vfiprintf_r+0x964>
  4044ae:	9910      	ldr	r1, [sp, #64]	; 0x40
  4044b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4044b2:	f101 0e01 	add.w	lr, r1, #1
  4044b6:	46cc      	mov	ip, r9
  4044b8:	e548      	b.n	403f4c <_vfiprintf_r+0x3ac>
  4044ba:	2a00      	cmp	r2, #0
  4044bc:	f040 8140 	bne.w	404740 <_vfiprintf_r+0xba0>
  4044c0:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4044c4:	2900      	cmp	r1, #0
  4044c6:	f000 811b 	beq.w	404700 <_vfiprintf_r+0xb60>
  4044ca:	2201      	movs	r2, #1
  4044cc:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4044d0:	4610      	mov	r0, r2
  4044d2:	921d      	str	r2, [sp, #116]	; 0x74
  4044d4:	911c      	str	r1, [sp, #112]	; 0x70
  4044d6:	46ca      	mov	sl, r9
  4044d8:	4601      	mov	r1, r0
  4044da:	f10a 0a08 	add.w	sl, sl, #8
  4044de:	3001      	adds	r0, #1
  4044e0:	e507      	b.n	403ef2 <_vfiprintf_r+0x352>
  4044e2:	9b02      	ldr	r3, [sp, #8]
  4044e4:	2a01      	cmp	r2, #1
  4044e6:	f000 8098 	beq.w	40461a <_vfiprintf_r+0xa7a>
  4044ea:	2a02      	cmp	r2, #2
  4044ec:	d10d      	bne.n	40450a <_vfiprintf_r+0x96a>
  4044ee:	9302      	str	r3, [sp, #8]
  4044f0:	2600      	movs	r6, #0
  4044f2:	2700      	movs	r7, #0
  4044f4:	e5b0      	b.n	404058 <_vfiprintf_r+0x4b8>
  4044f6:	aa0f      	add	r2, sp, #60	; 0x3c
  4044f8:	9904      	ldr	r1, [sp, #16]
  4044fa:	9806      	ldr	r0, [sp, #24]
  4044fc:	f7ff fb10 	bl	403b20 <__sprint_r.part.0>
  404500:	2800      	cmp	r0, #0
  404502:	d0c9      	beq.n	404498 <_vfiprintf_r+0x8f8>
  404504:	f8dd b010 	ldr.w	fp, [sp, #16]
  404508:	e797      	b.n	40443a <_vfiprintf_r+0x89a>
  40450a:	9302      	str	r3, [sp, #8]
  40450c:	2600      	movs	r6, #0
  40450e:	2700      	movs	r7, #0
  404510:	4649      	mov	r1, r9
  404512:	e000      	b.n	404516 <_vfiprintf_r+0x976>
  404514:	4659      	mov	r1, fp
  404516:	08f2      	lsrs	r2, r6, #3
  404518:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  40451c:	08f8      	lsrs	r0, r7, #3
  40451e:	f006 0307 	and.w	r3, r6, #7
  404522:	4607      	mov	r7, r0
  404524:	4616      	mov	r6, r2
  404526:	3330      	adds	r3, #48	; 0x30
  404528:	ea56 0207 	orrs.w	r2, r6, r7
  40452c:	f801 3c01 	strb.w	r3, [r1, #-1]
  404530:	f101 3bff 	add.w	fp, r1, #4294967295
  404534:	d1ee      	bne.n	404514 <_vfiprintf_r+0x974>
  404536:	9a02      	ldr	r2, [sp, #8]
  404538:	07d6      	lsls	r6, r2, #31
  40453a:	f57f ad9d 	bpl.w	404078 <_vfiprintf_r+0x4d8>
  40453e:	2b30      	cmp	r3, #48	; 0x30
  404540:	f43f ad9a 	beq.w	404078 <_vfiprintf_r+0x4d8>
  404544:	3902      	subs	r1, #2
  404546:	2330      	movs	r3, #48	; 0x30
  404548:	f80b 3c01 	strb.w	r3, [fp, #-1]
  40454c:	eba9 0301 	sub.w	r3, r9, r1
  404550:	9305      	str	r3, [sp, #20]
  404552:	468b      	mov	fp, r1
  404554:	e476      	b.n	403e44 <_vfiprintf_r+0x2a4>
  404556:	9b03      	ldr	r3, [sp, #12]
  404558:	9a08      	ldr	r2, [sp, #32]
  40455a:	428a      	cmp	r2, r1
  40455c:	bfac      	ite	ge
  40455e:	189b      	addge	r3, r3, r2
  404560:	185b      	addlt	r3, r3, r1
  404562:	9303      	str	r3, [sp, #12]
  404564:	e798      	b.n	404498 <_vfiprintf_r+0x8f8>
  404566:	2202      	movs	r2, #2
  404568:	e44d      	b.n	403e06 <_vfiprintf_r+0x266>
  40456a:	2f00      	cmp	r7, #0
  40456c:	bf08      	it	eq
  40456e:	2e0a      	cmpeq	r6, #10
  404570:	d352      	bcc.n	404618 <_vfiprintf_r+0xa78>
  404572:	46cb      	mov	fp, r9
  404574:	4630      	mov	r0, r6
  404576:	4639      	mov	r1, r7
  404578:	220a      	movs	r2, #10
  40457a:	2300      	movs	r3, #0
  40457c:	f001 fcdc 	bl	405f38 <__aeabi_uldivmod>
  404580:	3230      	adds	r2, #48	; 0x30
  404582:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  404586:	4630      	mov	r0, r6
  404588:	4639      	mov	r1, r7
  40458a:	2300      	movs	r3, #0
  40458c:	220a      	movs	r2, #10
  40458e:	f001 fcd3 	bl	405f38 <__aeabi_uldivmod>
  404592:	4606      	mov	r6, r0
  404594:	460f      	mov	r7, r1
  404596:	ea56 0307 	orrs.w	r3, r6, r7
  40459a:	d1eb      	bne.n	404574 <_vfiprintf_r+0x9d4>
  40459c:	e56c      	b.n	404078 <_vfiprintf_r+0x4d8>
  40459e:	9405      	str	r4, [sp, #20]
  4045a0:	46cb      	mov	fp, r9
  4045a2:	e44f      	b.n	403e44 <_vfiprintf_r+0x2a4>
  4045a4:	aa0f      	add	r2, sp, #60	; 0x3c
  4045a6:	9904      	ldr	r1, [sp, #16]
  4045a8:	9806      	ldr	r0, [sp, #24]
  4045aa:	f7ff fab9 	bl	403b20 <__sprint_r.part.0>
  4045ae:	2800      	cmp	r0, #0
  4045b0:	d1a8      	bne.n	404504 <_vfiprintf_r+0x964>
  4045b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4045b4:	46ca      	mov	sl, r9
  4045b6:	e75e      	b.n	404476 <_vfiprintf_r+0x8d6>
  4045b8:	aa0f      	add	r2, sp, #60	; 0x3c
  4045ba:	9904      	ldr	r1, [sp, #16]
  4045bc:	9806      	ldr	r0, [sp, #24]
  4045be:	f7ff faaf 	bl	403b20 <__sprint_r.part.0>
  4045c2:	2800      	cmp	r0, #0
  4045c4:	d19e      	bne.n	404504 <_vfiprintf_r+0x964>
  4045c6:	46ca      	mov	sl, r9
  4045c8:	f7ff bbc0 	b.w	403d4c <_vfiprintf_r+0x1ac>
  4045cc:	0040736c 	.word	0x0040736c
  4045d0:	0040735c 	.word	0x0040735c
  4045d4:	3104      	adds	r1, #4
  4045d6:	6816      	ldr	r6, [r2, #0]
  4045d8:	9107      	str	r1, [sp, #28]
  4045da:	2201      	movs	r2, #1
  4045dc:	2700      	movs	r7, #0
  4045de:	e412      	b.n	403e06 <_vfiprintf_r+0x266>
  4045e0:	9807      	ldr	r0, [sp, #28]
  4045e2:	4601      	mov	r1, r0
  4045e4:	3104      	adds	r1, #4
  4045e6:	6806      	ldr	r6, [r0, #0]
  4045e8:	9107      	str	r1, [sp, #28]
  4045ea:	2700      	movs	r7, #0
  4045ec:	e40b      	b.n	403e06 <_vfiprintf_r+0x266>
  4045ee:	680e      	ldr	r6, [r1, #0]
  4045f0:	3104      	adds	r1, #4
  4045f2:	9107      	str	r1, [sp, #28]
  4045f4:	2700      	movs	r7, #0
  4045f6:	e591      	b.n	40411c <_vfiprintf_r+0x57c>
  4045f8:	9907      	ldr	r1, [sp, #28]
  4045fa:	680e      	ldr	r6, [r1, #0]
  4045fc:	460a      	mov	r2, r1
  4045fe:	17f7      	asrs	r7, r6, #31
  404600:	3204      	adds	r2, #4
  404602:	9207      	str	r2, [sp, #28]
  404604:	4630      	mov	r0, r6
  404606:	4639      	mov	r1, r7
  404608:	e50f      	b.n	40402a <_vfiprintf_r+0x48a>
  40460a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40460e:	f000 fe7f 	bl	405310 <__retarget_lock_release_recursive>
  404612:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404616:	e71a      	b.n	40444e <_vfiprintf_r+0x8ae>
  404618:	9b02      	ldr	r3, [sp, #8]
  40461a:	9302      	str	r3, [sp, #8]
  40461c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  404620:	3630      	adds	r6, #48	; 0x30
  404622:	2301      	movs	r3, #1
  404624:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  404628:	9305      	str	r3, [sp, #20]
  40462a:	e40b      	b.n	403e44 <_vfiprintf_r+0x2a4>
  40462c:	aa0f      	add	r2, sp, #60	; 0x3c
  40462e:	9904      	ldr	r1, [sp, #16]
  404630:	9806      	ldr	r0, [sp, #24]
  404632:	f7ff fa75 	bl	403b20 <__sprint_r.part.0>
  404636:	2800      	cmp	r0, #0
  404638:	f47f af64 	bne.w	404504 <_vfiprintf_r+0x964>
  40463c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40463e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404640:	1c48      	adds	r0, r1, #1
  404642:	46ca      	mov	sl, r9
  404644:	e651      	b.n	4042ea <_vfiprintf_r+0x74a>
  404646:	aa0f      	add	r2, sp, #60	; 0x3c
  404648:	9904      	ldr	r1, [sp, #16]
  40464a:	9806      	ldr	r0, [sp, #24]
  40464c:	f7ff fa68 	bl	403b20 <__sprint_r.part.0>
  404650:	2800      	cmp	r0, #0
  404652:	f47f af57 	bne.w	404504 <_vfiprintf_r+0x964>
  404656:	9910      	ldr	r1, [sp, #64]	; 0x40
  404658:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40465a:	1c48      	adds	r0, r1, #1
  40465c:	46ca      	mov	sl, r9
  40465e:	e448      	b.n	403ef2 <_vfiprintf_r+0x352>
  404660:	2a00      	cmp	r2, #0
  404662:	f040 8091 	bne.w	404788 <_vfiprintf_r+0xbe8>
  404666:	2001      	movs	r0, #1
  404668:	4611      	mov	r1, r2
  40466a:	46ca      	mov	sl, r9
  40466c:	e641      	b.n	4042f2 <_vfiprintf_r+0x752>
  40466e:	aa0f      	add	r2, sp, #60	; 0x3c
  404670:	9904      	ldr	r1, [sp, #16]
  404672:	9806      	ldr	r0, [sp, #24]
  404674:	f7ff fa54 	bl	403b20 <__sprint_r.part.0>
  404678:	2800      	cmp	r0, #0
  40467a:	f47f af43 	bne.w	404504 <_vfiprintf_r+0x964>
  40467e:	9810      	ldr	r0, [sp, #64]	; 0x40
  404680:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404682:	3001      	adds	r0, #1
  404684:	46ca      	mov	sl, r9
  404686:	e667      	b.n	404358 <_vfiprintf_r+0x7b8>
  404688:	46d3      	mov	fp, sl
  40468a:	e6d6      	b.n	40443a <_vfiprintf_r+0x89a>
  40468c:	9e07      	ldr	r6, [sp, #28]
  40468e:	3607      	adds	r6, #7
  404690:	f026 0207 	bic.w	r2, r6, #7
  404694:	f102 0108 	add.w	r1, r2, #8
  404698:	e9d2 6700 	ldrd	r6, r7, [r2]
  40469c:	9107      	str	r1, [sp, #28]
  40469e:	2201      	movs	r2, #1
  4046a0:	f7ff bbb1 	b.w	403e06 <_vfiprintf_r+0x266>
  4046a4:	9e07      	ldr	r6, [sp, #28]
  4046a6:	3607      	adds	r6, #7
  4046a8:	f026 0607 	bic.w	r6, r6, #7
  4046ac:	e9d6 0100 	ldrd	r0, r1, [r6]
  4046b0:	f106 0208 	add.w	r2, r6, #8
  4046b4:	9207      	str	r2, [sp, #28]
  4046b6:	4606      	mov	r6, r0
  4046b8:	460f      	mov	r7, r1
  4046ba:	e4b6      	b.n	40402a <_vfiprintf_r+0x48a>
  4046bc:	9e07      	ldr	r6, [sp, #28]
  4046be:	3607      	adds	r6, #7
  4046c0:	f026 0207 	bic.w	r2, r6, #7
  4046c4:	f102 0108 	add.w	r1, r2, #8
  4046c8:	e9d2 6700 	ldrd	r6, r7, [r2]
  4046cc:	9107      	str	r1, [sp, #28]
  4046ce:	2200      	movs	r2, #0
  4046d0:	f7ff bb99 	b.w	403e06 <_vfiprintf_r+0x266>
  4046d4:	9e07      	ldr	r6, [sp, #28]
  4046d6:	3607      	adds	r6, #7
  4046d8:	f026 0107 	bic.w	r1, r6, #7
  4046dc:	f101 0008 	add.w	r0, r1, #8
  4046e0:	9007      	str	r0, [sp, #28]
  4046e2:	e9d1 6700 	ldrd	r6, r7, [r1]
  4046e6:	e519      	b.n	40411c <_vfiprintf_r+0x57c>
  4046e8:	46cb      	mov	fp, r9
  4046ea:	f7ff bbab 	b.w	403e44 <_vfiprintf_r+0x2a4>
  4046ee:	252d      	movs	r5, #45	; 0x2d
  4046f0:	4276      	negs	r6, r6
  4046f2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4046f6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4046fa:	2201      	movs	r2, #1
  4046fc:	f7ff bb88 	b.w	403e10 <_vfiprintf_r+0x270>
  404700:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404702:	b9b3      	cbnz	r3, 404732 <_vfiprintf_r+0xb92>
  404704:	4611      	mov	r1, r2
  404706:	2001      	movs	r0, #1
  404708:	46ca      	mov	sl, r9
  40470a:	e5f2      	b.n	4042f2 <_vfiprintf_r+0x752>
  40470c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404710:	f000 fdfe 	bl	405310 <__retarget_lock_release_recursive>
  404714:	f04f 33ff 	mov.w	r3, #4294967295
  404718:	9303      	str	r3, [sp, #12]
  40471a:	f7ff bb50 	b.w	403dbe <_vfiprintf_r+0x21e>
  40471e:	aa0f      	add	r2, sp, #60	; 0x3c
  404720:	9904      	ldr	r1, [sp, #16]
  404722:	9806      	ldr	r0, [sp, #24]
  404724:	f7ff f9fc 	bl	403b20 <__sprint_r.part.0>
  404728:	2800      	cmp	r0, #0
  40472a:	f47f aeeb 	bne.w	404504 <_vfiprintf_r+0x964>
  40472e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404730:	e6a9      	b.n	404486 <_vfiprintf_r+0x8e6>
  404732:	ab0e      	add	r3, sp, #56	; 0x38
  404734:	2202      	movs	r2, #2
  404736:	931c      	str	r3, [sp, #112]	; 0x70
  404738:	921d      	str	r2, [sp, #116]	; 0x74
  40473a:	2001      	movs	r0, #1
  40473c:	46ca      	mov	sl, r9
  40473e:	e5d0      	b.n	4042e2 <_vfiprintf_r+0x742>
  404740:	aa0f      	add	r2, sp, #60	; 0x3c
  404742:	9904      	ldr	r1, [sp, #16]
  404744:	9806      	ldr	r0, [sp, #24]
  404746:	f7ff f9eb 	bl	403b20 <__sprint_r.part.0>
  40474a:	2800      	cmp	r0, #0
  40474c:	f47f aeda 	bne.w	404504 <_vfiprintf_r+0x964>
  404750:	9910      	ldr	r1, [sp, #64]	; 0x40
  404752:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404754:	1c48      	adds	r0, r1, #1
  404756:	46ca      	mov	sl, r9
  404758:	e5a4      	b.n	4042a4 <_vfiprintf_r+0x704>
  40475a:	9a07      	ldr	r2, [sp, #28]
  40475c:	9903      	ldr	r1, [sp, #12]
  40475e:	6813      	ldr	r3, [r2, #0]
  404760:	17cd      	asrs	r5, r1, #31
  404762:	4608      	mov	r0, r1
  404764:	3204      	adds	r2, #4
  404766:	4629      	mov	r1, r5
  404768:	9207      	str	r2, [sp, #28]
  40476a:	e9c3 0100 	strd	r0, r1, [r3]
  40476e:	f7ff ba54 	b.w	403c1a <_vfiprintf_r+0x7a>
  404772:	4658      	mov	r0, fp
  404774:	9607      	str	r6, [sp, #28]
  404776:	9302      	str	r3, [sp, #8]
  404778:	f001 f9a2 	bl	405ac0 <strlen>
  40477c:	2400      	movs	r4, #0
  40477e:	9005      	str	r0, [sp, #20]
  404780:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404784:	f7ff bb5e 	b.w	403e44 <_vfiprintf_r+0x2a4>
  404788:	aa0f      	add	r2, sp, #60	; 0x3c
  40478a:	9904      	ldr	r1, [sp, #16]
  40478c:	9806      	ldr	r0, [sp, #24]
  40478e:	f7ff f9c7 	bl	403b20 <__sprint_r.part.0>
  404792:	2800      	cmp	r0, #0
  404794:	f47f aeb6 	bne.w	404504 <_vfiprintf_r+0x964>
  404798:	9910      	ldr	r1, [sp, #64]	; 0x40
  40479a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40479c:	1c48      	adds	r0, r1, #1
  40479e:	46ca      	mov	sl, r9
  4047a0:	e5a7      	b.n	4042f2 <_vfiprintf_r+0x752>
  4047a2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4047a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4047a6:	4e20      	ldr	r6, [pc, #128]	; (404828 <_vfiprintf_r+0xc88>)
  4047a8:	3101      	adds	r1, #1
  4047aa:	f7ff bb90 	b.w	403ece <_vfiprintf_r+0x32e>
  4047ae:	2c06      	cmp	r4, #6
  4047b0:	bf28      	it	cs
  4047b2:	2406      	movcs	r4, #6
  4047b4:	9405      	str	r4, [sp, #20]
  4047b6:	9607      	str	r6, [sp, #28]
  4047b8:	9401      	str	r4, [sp, #4]
  4047ba:	f8df b070 	ldr.w	fp, [pc, #112]	; 40482c <_vfiprintf_r+0xc8c>
  4047be:	e4d5      	b.n	40416c <_vfiprintf_r+0x5cc>
  4047c0:	9810      	ldr	r0, [sp, #64]	; 0x40
  4047c2:	4e19      	ldr	r6, [pc, #100]	; (404828 <_vfiprintf_r+0xc88>)
  4047c4:	3001      	adds	r0, #1
  4047c6:	e603      	b.n	4043d0 <_vfiprintf_r+0x830>
  4047c8:	9405      	str	r4, [sp, #20]
  4047ca:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4047ce:	9607      	str	r6, [sp, #28]
  4047d0:	9302      	str	r3, [sp, #8]
  4047d2:	4604      	mov	r4, r0
  4047d4:	f7ff bb36 	b.w	403e44 <_vfiprintf_r+0x2a4>
  4047d8:	4686      	mov	lr, r0
  4047da:	f7ff bbce 	b.w	403f7a <_vfiprintf_r+0x3da>
  4047de:	9806      	ldr	r0, [sp, #24]
  4047e0:	aa0f      	add	r2, sp, #60	; 0x3c
  4047e2:	4659      	mov	r1, fp
  4047e4:	f7ff f99c 	bl	403b20 <__sprint_r.part.0>
  4047e8:	2800      	cmp	r0, #0
  4047ea:	f43f ae24 	beq.w	404436 <_vfiprintf_r+0x896>
  4047ee:	e624      	b.n	40443a <_vfiprintf_r+0x89a>
  4047f0:	9907      	ldr	r1, [sp, #28]
  4047f2:	f898 2001 	ldrb.w	r2, [r8, #1]
  4047f6:	680c      	ldr	r4, [r1, #0]
  4047f8:	3104      	adds	r1, #4
  4047fa:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4047fe:	46b8      	mov	r8, r7
  404800:	9107      	str	r1, [sp, #28]
  404802:	f7ff ba3f 	b.w	403c84 <_vfiprintf_r+0xe4>
  404806:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40480a:	e43c      	b.n	404086 <_vfiprintf_r+0x4e6>
  40480c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404810:	e521      	b.n	404256 <_vfiprintf_r+0x6b6>
  404812:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404816:	f7ff bbf4 	b.w	404002 <_vfiprintf_r+0x462>
  40481a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40481e:	e491      	b.n	404144 <_vfiprintf_r+0x5a4>
  404820:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404824:	e469      	b.n	4040fa <_vfiprintf_r+0x55a>
  404826:	bf00      	nop
  404828:	0040735c 	.word	0x0040735c
  40482c:	00407354 	.word	0x00407354

00404830 <__sbprintf>:
  404830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404834:	460c      	mov	r4, r1
  404836:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40483a:	8989      	ldrh	r1, [r1, #12]
  40483c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40483e:	89e5      	ldrh	r5, [r4, #14]
  404840:	9619      	str	r6, [sp, #100]	; 0x64
  404842:	f021 0102 	bic.w	r1, r1, #2
  404846:	4606      	mov	r6, r0
  404848:	69e0      	ldr	r0, [r4, #28]
  40484a:	f8ad 100c 	strh.w	r1, [sp, #12]
  40484e:	4617      	mov	r7, r2
  404850:	f44f 6180 	mov.w	r1, #1024	; 0x400
  404854:	6a62      	ldr	r2, [r4, #36]	; 0x24
  404856:	f8ad 500e 	strh.w	r5, [sp, #14]
  40485a:	4698      	mov	r8, r3
  40485c:	ad1a      	add	r5, sp, #104	; 0x68
  40485e:	2300      	movs	r3, #0
  404860:	9007      	str	r0, [sp, #28]
  404862:	a816      	add	r0, sp, #88	; 0x58
  404864:	9209      	str	r2, [sp, #36]	; 0x24
  404866:	9306      	str	r3, [sp, #24]
  404868:	9500      	str	r5, [sp, #0]
  40486a:	9504      	str	r5, [sp, #16]
  40486c:	9102      	str	r1, [sp, #8]
  40486e:	9105      	str	r1, [sp, #20]
  404870:	f000 fd48 	bl	405304 <__retarget_lock_init_recursive>
  404874:	4643      	mov	r3, r8
  404876:	463a      	mov	r2, r7
  404878:	4669      	mov	r1, sp
  40487a:	4630      	mov	r0, r6
  40487c:	f7ff f990 	bl	403ba0 <_vfiprintf_r>
  404880:	1e05      	subs	r5, r0, #0
  404882:	db07      	blt.n	404894 <__sbprintf+0x64>
  404884:	4630      	mov	r0, r6
  404886:	4669      	mov	r1, sp
  404888:	f000 f928 	bl	404adc <_fflush_r>
  40488c:	2800      	cmp	r0, #0
  40488e:	bf18      	it	ne
  404890:	f04f 35ff 	movne.w	r5, #4294967295
  404894:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  404898:	065b      	lsls	r3, r3, #25
  40489a:	d503      	bpl.n	4048a4 <__sbprintf+0x74>
  40489c:	89a3      	ldrh	r3, [r4, #12]
  40489e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4048a2:	81a3      	strh	r3, [r4, #12]
  4048a4:	9816      	ldr	r0, [sp, #88]	; 0x58
  4048a6:	f000 fd2f 	bl	405308 <__retarget_lock_close_recursive>
  4048aa:	4628      	mov	r0, r5
  4048ac:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4048b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004048b4 <__swsetup_r>:
  4048b4:	b538      	push	{r3, r4, r5, lr}
  4048b6:	4b30      	ldr	r3, [pc, #192]	; (404978 <__swsetup_r+0xc4>)
  4048b8:	681b      	ldr	r3, [r3, #0]
  4048ba:	4605      	mov	r5, r0
  4048bc:	460c      	mov	r4, r1
  4048be:	b113      	cbz	r3, 4048c6 <__swsetup_r+0x12>
  4048c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4048c2:	2a00      	cmp	r2, #0
  4048c4:	d038      	beq.n	404938 <__swsetup_r+0x84>
  4048c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4048ca:	b293      	uxth	r3, r2
  4048cc:	0718      	lsls	r0, r3, #28
  4048ce:	d50c      	bpl.n	4048ea <__swsetup_r+0x36>
  4048d0:	6920      	ldr	r0, [r4, #16]
  4048d2:	b1a8      	cbz	r0, 404900 <__swsetup_r+0x4c>
  4048d4:	f013 0201 	ands.w	r2, r3, #1
  4048d8:	d01e      	beq.n	404918 <__swsetup_r+0x64>
  4048da:	6963      	ldr	r3, [r4, #20]
  4048dc:	2200      	movs	r2, #0
  4048de:	425b      	negs	r3, r3
  4048e0:	61a3      	str	r3, [r4, #24]
  4048e2:	60a2      	str	r2, [r4, #8]
  4048e4:	b1f0      	cbz	r0, 404924 <__swsetup_r+0x70>
  4048e6:	2000      	movs	r0, #0
  4048e8:	bd38      	pop	{r3, r4, r5, pc}
  4048ea:	06d9      	lsls	r1, r3, #27
  4048ec:	d53c      	bpl.n	404968 <__swsetup_r+0xb4>
  4048ee:	0758      	lsls	r0, r3, #29
  4048f0:	d426      	bmi.n	404940 <__swsetup_r+0x8c>
  4048f2:	6920      	ldr	r0, [r4, #16]
  4048f4:	f042 0308 	orr.w	r3, r2, #8
  4048f8:	81a3      	strh	r3, [r4, #12]
  4048fa:	b29b      	uxth	r3, r3
  4048fc:	2800      	cmp	r0, #0
  4048fe:	d1e9      	bne.n	4048d4 <__swsetup_r+0x20>
  404900:	f403 7220 	and.w	r2, r3, #640	; 0x280
  404904:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  404908:	d0e4      	beq.n	4048d4 <__swsetup_r+0x20>
  40490a:	4628      	mov	r0, r5
  40490c:	4621      	mov	r1, r4
  40490e:	f000 fd2f 	bl	405370 <__smakebuf_r>
  404912:	89a3      	ldrh	r3, [r4, #12]
  404914:	6920      	ldr	r0, [r4, #16]
  404916:	e7dd      	b.n	4048d4 <__swsetup_r+0x20>
  404918:	0799      	lsls	r1, r3, #30
  40491a:	bf58      	it	pl
  40491c:	6962      	ldrpl	r2, [r4, #20]
  40491e:	60a2      	str	r2, [r4, #8]
  404920:	2800      	cmp	r0, #0
  404922:	d1e0      	bne.n	4048e6 <__swsetup_r+0x32>
  404924:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404928:	061a      	lsls	r2, r3, #24
  40492a:	d5dd      	bpl.n	4048e8 <__swsetup_r+0x34>
  40492c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404930:	81a3      	strh	r3, [r4, #12]
  404932:	f04f 30ff 	mov.w	r0, #4294967295
  404936:	bd38      	pop	{r3, r4, r5, pc}
  404938:	4618      	mov	r0, r3
  40493a:	f000 f927 	bl	404b8c <__sinit>
  40493e:	e7c2      	b.n	4048c6 <__swsetup_r+0x12>
  404940:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404942:	b151      	cbz	r1, 40495a <__swsetup_r+0xa6>
  404944:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404948:	4299      	cmp	r1, r3
  40494a:	d004      	beq.n	404956 <__swsetup_r+0xa2>
  40494c:	4628      	mov	r0, r5
  40494e:	f000 fa43 	bl	404dd8 <_free_r>
  404952:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404956:	2300      	movs	r3, #0
  404958:	6323      	str	r3, [r4, #48]	; 0x30
  40495a:	2300      	movs	r3, #0
  40495c:	6920      	ldr	r0, [r4, #16]
  40495e:	6063      	str	r3, [r4, #4]
  404960:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  404964:	6020      	str	r0, [r4, #0]
  404966:	e7c5      	b.n	4048f4 <__swsetup_r+0x40>
  404968:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40496c:	2309      	movs	r3, #9
  40496e:	602b      	str	r3, [r5, #0]
  404970:	f04f 30ff 	mov.w	r0, #4294967295
  404974:	81a2      	strh	r2, [r4, #12]
  404976:	bd38      	pop	{r3, r4, r5, pc}
  404978:	20400040 	.word	0x20400040

0040497c <register_fini>:
  40497c:	4b02      	ldr	r3, [pc, #8]	; (404988 <register_fini+0xc>)
  40497e:	b113      	cbz	r3, 404986 <register_fini+0xa>
  404980:	4802      	ldr	r0, [pc, #8]	; (40498c <register_fini+0x10>)
  404982:	f000 b805 	b.w	404990 <atexit>
  404986:	4770      	bx	lr
  404988:	00000000 	.word	0x00000000
  40498c:	00404bfd 	.word	0x00404bfd

00404990 <atexit>:
  404990:	2300      	movs	r3, #0
  404992:	4601      	mov	r1, r0
  404994:	461a      	mov	r2, r3
  404996:	4618      	mov	r0, r3
  404998:	f001 b9a6 	b.w	405ce8 <__register_exitproc>

0040499c <__sflush_r>:
  40499c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4049a0:	b29a      	uxth	r2, r3
  4049a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4049a6:	460d      	mov	r5, r1
  4049a8:	0711      	lsls	r1, r2, #28
  4049aa:	4680      	mov	r8, r0
  4049ac:	d43a      	bmi.n	404a24 <__sflush_r+0x88>
  4049ae:	686a      	ldr	r2, [r5, #4]
  4049b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4049b4:	2a00      	cmp	r2, #0
  4049b6:	81ab      	strh	r3, [r5, #12]
  4049b8:	dd6f      	ble.n	404a9a <__sflush_r+0xfe>
  4049ba:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4049bc:	2c00      	cmp	r4, #0
  4049be:	d049      	beq.n	404a54 <__sflush_r+0xb8>
  4049c0:	2200      	movs	r2, #0
  4049c2:	b29b      	uxth	r3, r3
  4049c4:	f8d8 6000 	ldr.w	r6, [r8]
  4049c8:	f8c8 2000 	str.w	r2, [r8]
  4049cc:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4049d0:	d067      	beq.n	404aa2 <__sflush_r+0x106>
  4049d2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4049d4:	075f      	lsls	r7, r3, #29
  4049d6:	d505      	bpl.n	4049e4 <__sflush_r+0x48>
  4049d8:	6869      	ldr	r1, [r5, #4]
  4049da:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4049dc:	1a52      	subs	r2, r2, r1
  4049de:	b10b      	cbz	r3, 4049e4 <__sflush_r+0x48>
  4049e0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4049e2:	1ad2      	subs	r2, r2, r3
  4049e4:	2300      	movs	r3, #0
  4049e6:	69e9      	ldr	r1, [r5, #28]
  4049e8:	4640      	mov	r0, r8
  4049ea:	47a0      	blx	r4
  4049ec:	1c44      	adds	r4, r0, #1
  4049ee:	d03c      	beq.n	404a6a <__sflush_r+0xce>
  4049f0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4049f4:	692a      	ldr	r2, [r5, #16]
  4049f6:	602a      	str	r2, [r5, #0]
  4049f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4049fc:	2200      	movs	r2, #0
  4049fe:	81ab      	strh	r3, [r5, #12]
  404a00:	04db      	lsls	r3, r3, #19
  404a02:	606a      	str	r2, [r5, #4]
  404a04:	d447      	bmi.n	404a96 <__sflush_r+0xfa>
  404a06:	6b29      	ldr	r1, [r5, #48]	; 0x30
  404a08:	f8c8 6000 	str.w	r6, [r8]
  404a0c:	b311      	cbz	r1, 404a54 <__sflush_r+0xb8>
  404a0e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  404a12:	4299      	cmp	r1, r3
  404a14:	d002      	beq.n	404a1c <__sflush_r+0x80>
  404a16:	4640      	mov	r0, r8
  404a18:	f000 f9de 	bl	404dd8 <_free_r>
  404a1c:	2000      	movs	r0, #0
  404a1e:	6328      	str	r0, [r5, #48]	; 0x30
  404a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404a24:	692e      	ldr	r6, [r5, #16]
  404a26:	b1ae      	cbz	r6, 404a54 <__sflush_r+0xb8>
  404a28:	682c      	ldr	r4, [r5, #0]
  404a2a:	602e      	str	r6, [r5, #0]
  404a2c:	0791      	lsls	r1, r2, #30
  404a2e:	bf0c      	ite	eq
  404a30:	696b      	ldreq	r3, [r5, #20]
  404a32:	2300      	movne	r3, #0
  404a34:	1ba4      	subs	r4, r4, r6
  404a36:	60ab      	str	r3, [r5, #8]
  404a38:	e00a      	b.n	404a50 <__sflush_r+0xb4>
  404a3a:	4623      	mov	r3, r4
  404a3c:	4632      	mov	r2, r6
  404a3e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  404a40:	69e9      	ldr	r1, [r5, #28]
  404a42:	4640      	mov	r0, r8
  404a44:	47b8      	blx	r7
  404a46:	2800      	cmp	r0, #0
  404a48:	eba4 0400 	sub.w	r4, r4, r0
  404a4c:	4406      	add	r6, r0
  404a4e:	dd04      	ble.n	404a5a <__sflush_r+0xbe>
  404a50:	2c00      	cmp	r4, #0
  404a52:	dcf2      	bgt.n	404a3a <__sflush_r+0x9e>
  404a54:	2000      	movs	r0, #0
  404a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404a5a:	89ab      	ldrh	r3, [r5, #12]
  404a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404a60:	81ab      	strh	r3, [r5, #12]
  404a62:	f04f 30ff 	mov.w	r0, #4294967295
  404a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404a6a:	f8d8 4000 	ldr.w	r4, [r8]
  404a6e:	2c1d      	cmp	r4, #29
  404a70:	d8f3      	bhi.n	404a5a <__sflush_r+0xbe>
  404a72:	4b19      	ldr	r3, [pc, #100]	; (404ad8 <__sflush_r+0x13c>)
  404a74:	40e3      	lsrs	r3, r4
  404a76:	43db      	mvns	r3, r3
  404a78:	f013 0301 	ands.w	r3, r3, #1
  404a7c:	d1ed      	bne.n	404a5a <__sflush_r+0xbe>
  404a7e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  404a82:	606b      	str	r3, [r5, #4]
  404a84:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  404a88:	6929      	ldr	r1, [r5, #16]
  404a8a:	81ab      	strh	r3, [r5, #12]
  404a8c:	04da      	lsls	r2, r3, #19
  404a8e:	6029      	str	r1, [r5, #0]
  404a90:	d5b9      	bpl.n	404a06 <__sflush_r+0x6a>
  404a92:	2c00      	cmp	r4, #0
  404a94:	d1b7      	bne.n	404a06 <__sflush_r+0x6a>
  404a96:	6528      	str	r0, [r5, #80]	; 0x50
  404a98:	e7b5      	b.n	404a06 <__sflush_r+0x6a>
  404a9a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  404a9c:	2a00      	cmp	r2, #0
  404a9e:	dc8c      	bgt.n	4049ba <__sflush_r+0x1e>
  404aa0:	e7d8      	b.n	404a54 <__sflush_r+0xb8>
  404aa2:	2301      	movs	r3, #1
  404aa4:	69e9      	ldr	r1, [r5, #28]
  404aa6:	4640      	mov	r0, r8
  404aa8:	47a0      	blx	r4
  404aaa:	1c43      	adds	r3, r0, #1
  404aac:	4602      	mov	r2, r0
  404aae:	d002      	beq.n	404ab6 <__sflush_r+0x11a>
  404ab0:	89ab      	ldrh	r3, [r5, #12]
  404ab2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  404ab4:	e78e      	b.n	4049d4 <__sflush_r+0x38>
  404ab6:	f8d8 3000 	ldr.w	r3, [r8]
  404aba:	2b00      	cmp	r3, #0
  404abc:	d0f8      	beq.n	404ab0 <__sflush_r+0x114>
  404abe:	2b1d      	cmp	r3, #29
  404ac0:	d001      	beq.n	404ac6 <__sflush_r+0x12a>
  404ac2:	2b16      	cmp	r3, #22
  404ac4:	d102      	bne.n	404acc <__sflush_r+0x130>
  404ac6:	f8c8 6000 	str.w	r6, [r8]
  404aca:	e7c3      	b.n	404a54 <__sflush_r+0xb8>
  404acc:	89ab      	ldrh	r3, [r5, #12]
  404ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404ad2:	81ab      	strh	r3, [r5, #12]
  404ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404ad8:	20400001 	.word	0x20400001

00404adc <_fflush_r>:
  404adc:	b538      	push	{r3, r4, r5, lr}
  404ade:	460d      	mov	r5, r1
  404ae0:	4604      	mov	r4, r0
  404ae2:	b108      	cbz	r0, 404ae8 <_fflush_r+0xc>
  404ae4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404ae6:	b1bb      	cbz	r3, 404b18 <_fflush_r+0x3c>
  404ae8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  404aec:	b188      	cbz	r0, 404b12 <_fflush_r+0x36>
  404aee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  404af0:	07db      	lsls	r3, r3, #31
  404af2:	d401      	bmi.n	404af8 <_fflush_r+0x1c>
  404af4:	0581      	lsls	r1, r0, #22
  404af6:	d517      	bpl.n	404b28 <_fflush_r+0x4c>
  404af8:	4620      	mov	r0, r4
  404afa:	4629      	mov	r1, r5
  404afc:	f7ff ff4e 	bl	40499c <__sflush_r>
  404b00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  404b02:	07da      	lsls	r2, r3, #31
  404b04:	4604      	mov	r4, r0
  404b06:	d402      	bmi.n	404b0e <_fflush_r+0x32>
  404b08:	89ab      	ldrh	r3, [r5, #12]
  404b0a:	059b      	lsls	r3, r3, #22
  404b0c:	d507      	bpl.n	404b1e <_fflush_r+0x42>
  404b0e:	4620      	mov	r0, r4
  404b10:	bd38      	pop	{r3, r4, r5, pc}
  404b12:	4604      	mov	r4, r0
  404b14:	4620      	mov	r0, r4
  404b16:	bd38      	pop	{r3, r4, r5, pc}
  404b18:	f000 f838 	bl	404b8c <__sinit>
  404b1c:	e7e4      	b.n	404ae8 <_fflush_r+0xc>
  404b1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  404b20:	f000 fbf6 	bl	405310 <__retarget_lock_release_recursive>
  404b24:	4620      	mov	r0, r4
  404b26:	bd38      	pop	{r3, r4, r5, pc}
  404b28:	6da8      	ldr	r0, [r5, #88]	; 0x58
  404b2a:	f000 fbef 	bl	40530c <__retarget_lock_acquire_recursive>
  404b2e:	e7e3      	b.n	404af8 <_fflush_r+0x1c>

00404b30 <_cleanup_r>:
  404b30:	4901      	ldr	r1, [pc, #4]	; (404b38 <_cleanup_r+0x8>)
  404b32:	f000 bbaf 	b.w	405294 <_fwalk_reent>
  404b36:	bf00      	nop
  404b38:	00405dd1 	.word	0x00405dd1

00404b3c <std.isra.0>:
  404b3c:	b510      	push	{r4, lr}
  404b3e:	2300      	movs	r3, #0
  404b40:	4604      	mov	r4, r0
  404b42:	8181      	strh	r1, [r0, #12]
  404b44:	81c2      	strh	r2, [r0, #14]
  404b46:	6003      	str	r3, [r0, #0]
  404b48:	6043      	str	r3, [r0, #4]
  404b4a:	6083      	str	r3, [r0, #8]
  404b4c:	6643      	str	r3, [r0, #100]	; 0x64
  404b4e:	6103      	str	r3, [r0, #16]
  404b50:	6143      	str	r3, [r0, #20]
  404b52:	6183      	str	r3, [r0, #24]
  404b54:	4619      	mov	r1, r3
  404b56:	2208      	movs	r2, #8
  404b58:	305c      	adds	r0, #92	; 0x5c
  404b5a:	f7fe ff17 	bl	40398c <memset>
  404b5e:	4807      	ldr	r0, [pc, #28]	; (404b7c <std.isra.0+0x40>)
  404b60:	4907      	ldr	r1, [pc, #28]	; (404b80 <std.isra.0+0x44>)
  404b62:	4a08      	ldr	r2, [pc, #32]	; (404b84 <std.isra.0+0x48>)
  404b64:	4b08      	ldr	r3, [pc, #32]	; (404b88 <std.isra.0+0x4c>)
  404b66:	6220      	str	r0, [r4, #32]
  404b68:	61e4      	str	r4, [r4, #28]
  404b6a:	6261      	str	r1, [r4, #36]	; 0x24
  404b6c:	62a2      	str	r2, [r4, #40]	; 0x28
  404b6e:	62e3      	str	r3, [r4, #44]	; 0x2c
  404b70:	f104 0058 	add.w	r0, r4, #88	; 0x58
  404b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404b78:	f000 bbc4 	b.w	405304 <__retarget_lock_init_recursive>
  404b7c:	00405a19 	.word	0x00405a19
  404b80:	00405a3d 	.word	0x00405a3d
  404b84:	00405a79 	.word	0x00405a79
  404b88:	00405a99 	.word	0x00405a99

00404b8c <__sinit>:
  404b8c:	b510      	push	{r4, lr}
  404b8e:	4604      	mov	r4, r0
  404b90:	4812      	ldr	r0, [pc, #72]	; (404bdc <__sinit+0x50>)
  404b92:	f000 fbbb 	bl	40530c <__retarget_lock_acquire_recursive>
  404b96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  404b98:	b9d2      	cbnz	r2, 404bd0 <__sinit+0x44>
  404b9a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  404b9e:	4810      	ldr	r0, [pc, #64]	; (404be0 <__sinit+0x54>)
  404ba0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  404ba4:	2103      	movs	r1, #3
  404ba6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  404baa:	63e0      	str	r0, [r4, #60]	; 0x3c
  404bac:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  404bb0:	6860      	ldr	r0, [r4, #4]
  404bb2:	2104      	movs	r1, #4
  404bb4:	f7ff ffc2 	bl	404b3c <std.isra.0>
  404bb8:	2201      	movs	r2, #1
  404bba:	2109      	movs	r1, #9
  404bbc:	68a0      	ldr	r0, [r4, #8]
  404bbe:	f7ff ffbd 	bl	404b3c <std.isra.0>
  404bc2:	2202      	movs	r2, #2
  404bc4:	2112      	movs	r1, #18
  404bc6:	68e0      	ldr	r0, [r4, #12]
  404bc8:	f7ff ffb8 	bl	404b3c <std.isra.0>
  404bcc:	2301      	movs	r3, #1
  404bce:	63a3      	str	r3, [r4, #56]	; 0x38
  404bd0:	4802      	ldr	r0, [pc, #8]	; (404bdc <__sinit+0x50>)
  404bd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404bd6:	f000 bb9b 	b.w	405310 <__retarget_lock_release_recursive>
  404bda:	bf00      	nop
  404bdc:	204031ec 	.word	0x204031ec
  404be0:	00404b31 	.word	0x00404b31

00404be4 <__sfp_lock_acquire>:
  404be4:	4801      	ldr	r0, [pc, #4]	; (404bec <__sfp_lock_acquire+0x8>)
  404be6:	f000 bb91 	b.w	40530c <__retarget_lock_acquire_recursive>
  404bea:	bf00      	nop
  404bec:	20403200 	.word	0x20403200

00404bf0 <__sfp_lock_release>:
  404bf0:	4801      	ldr	r0, [pc, #4]	; (404bf8 <__sfp_lock_release+0x8>)
  404bf2:	f000 bb8d 	b.w	405310 <__retarget_lock_release_recursive>
  404bf6:	bf00      	nop
  404bf8:	20403200 	.word	0x20403200

00404bfc <__libc_fini_array>:
  404bfc:	b538      	push	{r3, r4, r5, lr}
  404bfe:	4c0a      	ldr	r4, [pc, #40]	; (404c28 <__libc_fini_array+0x2c>)
  404c00:	4d0a      	ldr	r5, [pc, #40]	; (404c2c <__libc_fini_array+0x30>)
  404c02:	1b64      	subs	r4, r4, r5
  404c04:	10a4      	asrs	r4, r4, #2
  404c06:	d00a      	beq.n	404c1e <__libc_fini_array+0x22>
  404c08:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  404c0c:	3b01      	subs	r3, #1
  404c0e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  404c12:	3c01      	subs	r4, #1
  404c14:	f855 3904 	ldr.w	r3, [r5], #-4
  404c18:	4798      	blx	r3
  404c1a:	2c00      	cmp	r4, #0
  404c1c:	d1f9      	bne.n	404c12 <__libc_fini_array+0x16>
  404c1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404c22:	f002 bc3f 	b.w	4074a4 <_fini>
  404c26:	bf00      	nop
  404c28:	004074b4 	.word	0x004074b4
  404c2c:	004074b0 	.word	0x004074b0

00404c30 <__fputwc>:
  404c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404c34:	b082      	sub	sp, #8
  404c36:	4680      	mov	r8, r0
  404c38:	4689      	mov	r9, r1
  404c3a:	4614      	mov	r4, r2
  404c3c:	f000 fb54 	bl	4052e8 <__locale_mb_cur_max>
  404c40:	2801      	cmp	r0, #1
  404c42:	d036      	beq.n	404cb2 <__fputwc+0x82>
  404c44:	464a      	mov	r2, r9
  404c46:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  404c4a:	a901      	add	r1, sp, #4
  404c4c:	4640      	mov	r0, r8
  404c4e:	f000 fffd 	bl	405c4c <_wcrtomb_r>
  404c52:	1c42      	adds	r2, r0, #1
  404c54:	4606      	mov	r6, r0
  404c56:	d025      	beq.n	404ca4 <__fputwc+0x74>
  404c58:	b3a8      	cbz	r0, 404cc6 <__fputwc+0x96>
  404c5a:	f89d e004 	ldrb.w	lr, [sp, #4]
  404c5e:	2500      	movs	r5, #0
  404c60:	f10d 0a04 	add.w	sl, sp, #4
  404c64:	e009      	b.n	404c7a <__fputwc+0x4a>
  404c66:	6823      	ldr	r3, [r4, #0]
  404c68:	1c5a      	adds	r2, r3, #1
  404c6a:	6022      	str	r2, [r4, #0]
  404c6c:	f883 e000 	strb.w	lr, [r3]
  404c70:	3501      	adds	r5, #1
  404c72:	42b5      	cmp	r5, r6
  404c74:	d227      	bcs.n	404cc6 <__fputwc+0x96>
  404c76:	f815 e00a 	ldrb.w	lr, [r5, sl]
  404c7a:	68a3      	ldr	r3, [r4, #8]
  404c7c:	3b01      	subs	r3, #1
  404c7e:	2b00      	cmp	r3, #0
  404c80:	60a3      	str	r3, [r4, #8]
  404c82:	daf0      	bge.n	404c66 <__fputwc+0x36>
  404c84:	69a7      	ldr	r7, [r4, #24]
  404c86:	42bb      	cmp	r3, r7
  404c88:	4671      	mov	r1, lr
  404c8a:	4622      	mov	r2, r4
  404c8c:	4640      	mov	r0, r8
  404c8e:	db02      	blt.n	404c96 <__fputwc+0x66>
  404c90:	f1be 0f0a 	cmp.w	lr, #10
  404c94:	d1e7      	bne.n	404c66 <__fputwc+0x36>
  404c96:	f000 ff81 	bl	405b9c <__swbuf_r>
  404c9a:	1c43      	adds	r3, r0, #1
  404c9c:	d1e8      	bne.n	404c70 <__fputwc+0x40>
  404c9e:	b002      	add	sp, #8
  404ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404ca4:	89a3      	ldrh	r3, [r4, #12]
  404ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404caa:	81a3      	strh	r3, [r4, #12]
  404cac:	b002      	add	sp, #8
  404cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404cb2:	f109 33ff 	add.w	r3, r9, #4294967295
  404cb6:	2bfe      	cmp	r3, #254	; 0xfe
  404cb8:	d8c4      	bhi.n	404c44 <__fputwc+0x14>
  404cba:	fa5f fe89 	uxtb.w	lr, r9
  404cbe:	4606      	mov	r6, r0
  404cc0:	f88d e004 	strb.w	lr, [sp, #4]
  404cc4:	e7cb      	b.n	404c5e <__fputwc+0x2e>
  404cc6:	4648      	mov	r0, r9
  404cc8:	b002      	add	sp, #8
  404cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404cce:	bf00      	nop

00404cd0 <_fputwc_r>:
  404cd0:	b530      	push	{r4, r5, lr}
  404cd2:	6e53      	ldr	r3, [r2, #100]	; 0x64
  404cd4:	f013 0f01 	tst.w	r3, #1
  404cd8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  404cdc:	4614      	mov	r4, r2
  404cde:	b083      	sub	sp, #12
  404ce0:	4605      	mov	r5, r0
  404ce2:	b29a      	uxth	r2, r3
  404ce4:	d101      	bne.n	404cea <_fputwc_r+0x1a>
  404ce6:	0590      	lsls	r0, r2, #22
  404ce8:	d51c      	bpl.n	404d24 <_fputwc_r+0x54>
  404cea:	0490      	lsls	r0, r2, #18
  404cec:	d406      	bmi.n	404cfc <_fputwc_r+0x2c>
  404cee:	6e62      	ldr	r2, [r4, #100]	; 0x64
  404cf0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404cf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  404cf8:	81a3      	strh	r3, [r4, #12]
  404cfa:	6662      	str	r2, [r4, #100]	; 0x64
  404cfc:	4628      	mov	r0, r5
  404cfe:	4622      	mov	r2, r4
  404d00:	f7ff ff96 	bl	404c30 <__fputwc>
  404d04:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404d06:	07da      	lsls	r2, r3, #31
  404d08:	4605      	mov	r5, r0
  404d0a:	d402      	bmi.n	404d12 <_fputwc_r+0x42>
  404d0c:	89a3      	ldrh	r3, [r4, #12]
  404d0e:	059b      	lsls	r3, r3, #22
  404d10:	d502      	bpl.n	404d18 <_fputwc_r+0x48>
  404d12:	4628      	mov	r0, r5
  404d14:	b003      	add	sp, #12
  404d16:	bd30      	pop	{r4, r5, pc}
  404d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404d1a:	f000 faf9 	bl	405310 <__retarget_lock_release_recursive>
  404d1e:	4628      	mov	r0, r5
  404d20:	b003      	add	sp, #12
  404d22:	bd30      	pop	{r4, r5, pc}
  404d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404d26:	9101      	str	r1, [sp, #4]
  404d28:	f000 faf0 	bl	40530c <__retarget_lock_acquire_recursive>
  404d2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404d30:	9901      	ldr	r1, [sp, #4]
  404d32:	b29a      	uxth	r2, r3
  404d34:	e7d9      	b.n	404cea <_fputwc_r+0x1a>
  404d36:	bf00      	nop

00404d38 <_malloc_trim_r>:
  404d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404d3a:	4f24      	ldr	r7, [pc, #144]	; (404dcc <_malloc_trim_r+0x94>)
  404d3c:	460c      	mov	r4, r1
  404d3e:	4606      	mov	r6, r0
  404d40:	f7fe fe72 	bl	403a28 <__malloc_lock>
  404d44:	68bb      	ldr	r3, [r7, #8]
  404d46:	685d      	ldr	r5, [r3, #4]
  404d48:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  404d4c:	310f      	adds	r1, #15
  404d4e:	f025 0503 	bic.w	r5, r5, #3
  404d52:	4429      	add	r1, r5
  404d54:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  404d58:	f021 010f 	bic.w	r1, r1, #15
  404d5c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  404d60:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  404d64:	db07      	blt.n	404d76 <_malloc_trim_r+0x3e>
  404d66:	2100      	movs	r1, #0
  404d68:	4630      	mov	r0, r6
  404d6a:	f7fe fe69 	bl	403a40 <_sbrk_r>
  404d6e:	68bb      	ldr	r3, [r7, #8]
  404d70:	442b      	add	r3, r5
  404d72:	4298      	cmp	r0, r3
  404d74:	d004      	beq.n	404d80 <_malloc_trim_r+0x48>
  404d76:	4630      	mov	r0, r6
  404d78:	f7fe fe5c 	bl	403a34 <__malloc_unlock>
  404d7c:	2000      	movs	r0, #0
  404d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404d80:	4261      	negs	r1, r4
  404d82:	4630      	mov	r0, r6
  404d84:	f7fe fe5c 	bl	403a40 <_sbrk_r>
  404d88:	3001      	adds	r0, #1
  404d8a:	d00d      	beq.n	404da8 <_malloc_trim_r+0x70>
  404d8c:	4b10      	ldr	r3, [pc, #64]	; (404dd0 <_malloc_trim_r+0x98>)
  404d8e:	68ba      	ldr	r2, [r7, #8]
  404d90:	6819      	ldr	r1, [r3, #0]
  404d92:	1b2d      	subs	r5, r5, r4
  404d94:	f045 0501 	orr.w	r5, r5, #1
  404d98:	4630      	mov	r0, r6
  404d9a:	1b09      	subs	r1, r1, r4
  404d9c:	6055      	str	r5, [r2, #4]
  404d9e:	6019      	str	r1, [r3, #0]
  404da0:	f7fe fe48 	bl	403a34 <__malloc_unlock>
  404da4:	2001      	movs	r0, #1
  404da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404da8:	2100      	movs	r1, #0
  404daa:	4630      	mov	r0, r6
  404dac:	f7fe fe48 	bl	403a40 <_sbrk_r>
  404db0:	68ba      	ldr	r2, [r7, #8]
  404db2:	1a83      	subs	r3, r0, r2
  404db4:	2b0f      	cmp	r3, #15
  404db6:	ddde      	ble.n	404d76 <_malloc_trim_r+0x3e>
  404db8:	4c06      	ldr	r4, [pc, #24]	; (404dd4 <_malloc_trim_r+0x9c>)
  404dba:	4905      	ldr	r1, [pc, #20]	; (404dd0 <_malloc_trim_r+0x98>)
  404dbc:	6824      	ldr	r4, [r4, #0]
  404dbe:	f043 0301 	orr.w	r3, r3, #1
  404dc2:	1b00      	subs	r0, r0, r4
  404dc4:	6053      	str	r3, [r2, #4]
  404dc6:	6008      	str	r0, [r1, #0]
  404dc8:	e7d5      	b.n	404d76 <_malloc_trim_r+0x3e>
  404dca:	bf00      	nop
  404dcc:	20400470 	.word	0x20400470
  404dd0:	20400d94 	.word	0x20400d94
  404dd4:	20400878 	.word	0x20400878

00404dd8 <_free_r>:
  404dd8:	2900      	cmp	r1, #0
  404dda:	d044      	beq.n	404e66 <_free_r+0x8e>
  404ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404de0:	460d      	mov	r5, r1
  404de2:	4680      	mov	r8, r0
  404de4:	f7fe fe20 	bl	403a28 <__malloc_lock>
  404de8:	f855 7c04 	ldr.w	r7, [r5, #-4]
  404dec:	4969      	ldr	r1, [pc, #420]	; (404f94 <_free_r+0x1bc>)
  404dee:	f027 0301 	bic.w	r3, r7, #1
  404df2:	f1a5 0408 	sub.w	r4, r5, #8
  404df6:	18e2      	adds	r2, r4, r3
  404df8:	688e      	ldr	r6, [r1, #8]
  404dfa:	6850      	ldr	r0, [r2, #4]
  404dfc:	42b2      	cmp	r2, r6
  404dfe:	f020 0003 	bic.w	r0, r0, #3
  404e02:	d05e      	beq.n	404ec2 <_free_r+0xea>
  404e04:	07fe      	lsls	r6, r7, #31
  404e06:	6050      	str	r0, [r2, #4]
  404e08:	d40b      	bmi.n	404e22 <_free_r+0x4a>
  404e0a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  404e0e:	1be4      	subs	r4, r4, r7
  404e10:	f101 0e08 	add.w	lr, r1, #8
  404e14:	68a5      	ldr	r5, [r4, #8]
  404e16:	4575      	cmp	r5, lr
  404e18:	443b      	add	r3, r7
  404e1a:	d06d      	beq.n	404ef8 <_free_r+0x120>
  404e1c:	68e7      	ldr	r7, [r4, #12]
  404e1e:	60ef      	str	r7, [r5, #12]
  404e20:	60bd      	str	r5, [r7, #8]
  404e22:	1815      	adds	r5, r2, r0
  404e24:	686d      	ldr	r5, [r5, #4]
  404e26:	07ed      	lsls	r5, r5, #31
  404e28:	d53e      	bpl.n	404ea8 <_free_r+0xd0>
  404e2a:	f043 0201 	orr.w	r2, r3, #1
  404e2e:	6062      	str	r2, [r4, #4]
  404e30:	50e3      	str	r3, [r4, r3]
  404e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404e36:	d217      	bcs.n	404e68 <_free_r+0x90>
  404e38:	08db      	lsrs	r3, r3, #3
  404e3a:	1c58      	adds	r0, r3, #1
  404e3c:	109a      	asrs	r2, r3, #2
  404e3e:	684d      	ldr	r5, [r1, #4]
  404e40:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  404e44:	60a7      	str	r7, [r4, #8]
  404e46:	2301      	movs	r3, #1
  404e48:	4093      	lsls	r3, r2
  404e4a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  404e4e:	432b      	orrs	r3, r5
  404e50:	3a08      	subs	r2, #8
  404e52:	60e2      	str	r2, [r4, #12]
  404e54:	604b      	str	r3, [r1, #4]
  404e56:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  404e5a:	60fc      	str	r4, [r7, #12]
  404e5c:	4640      	mov	r0, r8
  404e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404e62:	f7fe bde7 	b.w	403a34 <__malloc_unlock>
  404e66:	4770      	bx	lr
  404e68:	0a5a      	lsrs	r2, r3, #9
  404e6a:	2a04      	cmp	r2, #4
  404e6c:	d852      	bhi.n	404f14 <_free_r+0x13c>
  404e6e:	099a      	lsrs	r2, r3, #6
  404e70:	f102 0739 	add.w	r7, r2, #57	; 0x39
  404e74:	00ff      	lsls	r7, r7, #3
  404e76:	f102 0538 	add.w	r5, r2, #56	; 0x38
  404e7a:	19c8      	adds	r0, r1, r7
  404e7c:	59ca      	ldr	r2, [r1, r7]
  404e7e:	3808      	subs	r0, #8
  404e80:	4290      	cmp	r0, r2
  404e82:	d04f      	beq.n	404f24 <_free_r+0x14c>
  404e84:	6851      	ldr	r1, [r2, #4]
  404e86:	f021 0103 	bic.w	r1, r1, #3
  404e8a:	428b      	cmp	r3, r1
  404e8c:	d232      	bcs.n	404ef4 <_free_r+0x11c>
  404e8e:	6892      	ldr	r2, [r2, #8]
  404e90:	4290      	cmp	r0, r2
  404e92:	d1f7      	bne.n	404e84 <_free_r+0xac>
  404e94:	68c3      	ldr	r3, [r0, #12]
  404e96:	60a0      	str	r0, [r4, #8]
  404e98:	60e3      	str	r3, [r4, #12]
  404e9a:	609c      	str	r4, [r3, #8]
  404e9c:	60c4      	str	r4, [r0, #12]
  404e9e:	4640      	mov	r0, r8
  404ea0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404ea4:	f7fe bdc6 	b.w	403a34 <__malloc_unlock>
  404ea8:	6895      	ldr	r5, [r2, #8]
  404eaa:	4f3b      	ldr	r7, [pc, #236]	; (404f98 <_free_r+0x1c0>)
  404eac:	42bd      	cmp	r5, r7
  404eae:	4403      	add	r3, r0
  404eb0:	d040      	beq.n	404f34 <_free_r+0x15c>
  404eb2:	68d0      	ldr	r0, [r2, #12]
  404eb4:	60e8      	str	r0, [r5, #12]
  404eb6:	f043 0201 	orr.w	r2, r3, #1
  404eba:	6085      	str	r5, [r0, #8]
  404ebc:	6062      	str	r2, [r4, #4]
  404ebe:	50e3      	str	r3, [r4, r3]
  404ec0:	e7b7      	b.n	404e32 <_free_r+0x5a>
  404ec2:	07ff      	lsls	r7, r7, #31
  404ec4:	4403      	add	r3, r0
  404ec6:	d407      	bmi.n	404ed8 <_free_r+0x100>
  404ec8:	f855 2c08 	ldr.w	r2, [r5, #-8]
  404ecc:	1aa4      	subs	r4, r4, r2
  404ece:	4413      	add	r3, r2
  404ed0:	68a0      	ldr	r0, [r4, #8]
  404ed2:	68e2      	ldr	r2, [r4, #12]
  404ed4:	60c2      	str	r2, [r0, #12]
  404ed6:	6090      	str	r0, [r2, #8]
  404ed8:	4a30      	ldr	r2, [pc, #192]	; (404f9c <_free_r+0x1c4>)
  404eda:	6812      	ldr	r2, [r2, #0]
  404edc:	f043 0001 	orr.w	r0, r3, #1
  404ee0:	4293      	cmp	r3, r2
  404ee2:	6060      	str	r0, [r4, #4]
  404ee4:	608c      	str	r4, [r1, #8]
  404ee6:	d3b9      	bcc.n	404e5c <_free_r+0x84>
  404ee8:	4b2d      	ldr	r3, [pc, #180]	; (404fa0 <_free_r+0x1c8>)
  404eea:	4640      	mov	r0, r8
  404eec:	6819      	ldr	r1, [r3, #0]
  404eee:	f7ff ff23 	bl	404d38 <_malloc_trim_r>
  404ef2:	e7b3      	b.n	404e5c <_free_r+0x84>
  404ef4:	4610      	mov	r0, r2
  404ef6:	e7cd      	b.n	404e94 <_free_r+0xbc>
  404ef8:	1811      	adds	r1, r2, r0
  404efa:	6849      	ldr	r1, [r1, #4]
  404efc:	07c9      	lsls	r1, r1, #31
  404efe:	d444      	bmi.n	404f8a <_free_r+0x1b2>
  404f00:	6891      	ldr	r1, [r2, #8]
  404f02:	68d2      	ldr	r2, [r2, #12]
  404f04:	60ca      	str	r2, [r1, #12]
  404f06:	4403      	add	r3, r0
  404f08:	f043 0001 	orr.w	r0, r3, #1
  404f0c:	6091      	str	r1, [r2, #8]
  404f0e:	6060      	str	r0, [r4, #4]
  404f10:	50e3      	str	r3, [r4, r3]
  404f12:	e7a3      	b.n	404e5c <_free_r+0x84>
  404f14:	2a14      	cmp	r2, #20
  404f16:	d816      	bhi.n	404f46 <_free_r+0x16e>
  404f18:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  404f1c:	00ff      	lsls	r7, r7, #3
  404f1e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  404f22:	e7aa      	b.n	404e7a <_free_r+0xa2>
  404f24:	10aa      	asrs	r2, r5, #2
  404f26:	2301      	movs	r3, #1
  404f28:	684d      	ldr	r5, [r1, #4]
  404f2a:	4093      	lsls	r3, r2
  404f2c:	432b      	orrs	r3, r5
  404f2e:	604b      	str	r3, [r1, #4]
  404f30:	4603      	mov	r3, r0
  404f32:	e7b0      	b.n	404e96 <_free_r+0xbe>
  404f34:	f043 0201 	orr.w	r2, r3, #1
  404f38:	614c      	str	r4, [r1, #20]
  404f3a:	610c      	str	r4, [r1, #16]
  404f3c:	60e5      	str	r5, [r4, #12]
  404f3e:	60a5      	str	r5, [r4, #8]
  404f40:	6062      	str	r2, [r4, #4]
  404f42:	50e3      	str	r3, [r4, r3]
  404f44:	e78a      	b.n	404e5c <_free_r+0x84>
  404f46:	2a54      	cmp	r2, #84	; 0x54
  404f48:	d806      	bhi.n	404f58 <_free_r+0x180>
  404f4a:	0b1a      	lsrs	r2, r3, #12
  404f4c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  404f50:	00ff      	lsls	r7, r7, #3
  404f52:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  404f56:	e790      	b.n	404e7a <_free_r+0xa2>
  404f58:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404f5c:	d806      	bhi.n	404f6c <_free_r+0x194>
  404f5e:	0bda      	lsrs	r2, r3, #15
  404f60:	f102 0778 	add.w	r7, r2, #120	; 0x78
  404f64:	00ff      	lsls	r7, r7, #3
  404f66:	f102 0577 	add.w	r5, r2, #119	; 0x77
  404f6a:	e786      	b.n	404e7a <_free_r+0xa2>
  404f6c:	f240 5054 	movw	r0, #1364	; 0x554
  404f70:	4282      	cmp	r2, r0
  404f72:	d806      	bhi.n	404f82 <_free_r+0x1aa>
  404f74:	0c9a      	lsrs	r2, r3, #18
  404f76:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  404f7a:	00ff      	lsls	r7, r7, #3
  404f7c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  404f80:	e77b      	b.n	404e7a <_free_r+0xa2>
  404f82:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  404f86:	257e      	movs	r5, #126	; 0x7e
  404f88:	e777      	b.n	404e7a <_free_r+0xa2>
  404f8a:	f043 0101 	orr.w	r1, r3, #1
  404f8e:	6061      	str	r1, [r4, #4]
  404f90:	6013      	str	r3, [r2, #0]
  404f92:	e763      	b.n	404e5c <_free_r+0x84>
  404f94:	20400470 	.word	0x20400470
  404f98:	20400478 	.word	0x20400478
  404f9c:	2040087c 	.word	0x2040087c
  404fa0:	20400dc4 	.word	0x20400dc4

00404fa4 <__sfvwrite_r>:
  404fa4:	6893      	ldr	r3, [r2, #8]
  404fa6:	2b00      	cmp	r3, #0
  404fa8:	d073      	beq.n	405092 <__sfvwrite_r+0xee>
  404faa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404fae:	898b      	ldrh	r3, [r1, #12]
  404fb0:	b083      	sub	sp, #12
  404fb2:	460c      	mov	r4, r1
  404fb4:	0719      	lsls	r1, r3, #28
  404fb6:	9000      	str	r0, [sp, #0]
  404fb8:	4616      	mov	r6, r2
  404fba:	d526      	bpl.n	40500a <__sfvwrite_r+0x66>
  404fbc:	6922      	ldr	r2, [r4, #16]
  404fbe:	b322      	cbz	r2, 40500a <__sfvwrite_r+0x66>
  404fc0:	f013 0002 	ands.w	r0, r3, #2
  404fc4:	6835      	ldr	r5, [r6, #0]
  404fc6:	d02c      	beq.n	405022 <__sfvwrite_r+0x7e>
  404fc8:	f04f 0900 	mov.w	r9, #0
  404fcc:	4fb0      	ldr	r7, [pc, #704]	; (405290 <__sfvwrite_r+0x2ec>)
  404fce:	46c8      	mov	r8, r9
  404fd0:	46b2      	mov	sl, r6
  404fd2:	45b8      	cmp	r8, r7
  404fd4:	4643      	mov	r3, r8
  404fd6:	464a      	mov	r2, r9
  404fd8:	bf28      	it	cs
  404fda:	463b      	movcs	r3, r7
  404fdc:	9800      	ldr	r0, [sp, #0]
  404fde:	f1b8 0f00 	cmp.w	r8, #0
  404fe2:	d050      	beq.n	405086 <__sfvwrite_r+0xe2>
  404fe4:	69e1      	ldr	r1, [r4, #28]
  404fe6:	6a66      	ldr	r6, [r4, #36]	; 0x24
  404fe8:	47b0      	blx	r6
  404fea:	2800      	cmp	r0, #0
  404fec:	dd58      	ble.n	4050a0 <__sfvwrite_r+0xfc>
  404fee:	f8da 3008 	ldr.w	r3, [sl, #8]
  404ff2:	1a1b      	subs	r3, r3, r0
  404ff4:	4481      	add	r9, r0
  404ff6:	eba8 0800 	sub.w	r8, r8, r0
  404ffa:	f8ca 3008 	str.w	r3, [sl, #8]
  404ffe:	2b00      	cmp	r3, #0
  405000:	d1e7      	bne.n	404fd2 <__sfvwrite_r+0x2e>
  405002:	2000      	movs	r0, #0
  405004:	b003      	add	sp, #12
  405006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40500a:	4621      	mov	r1, r4
  40500c:	9800      	ldr	r0, [sp, #0]
  40500e:	f7ff fc51 	bl	4048b4 <__swsetup_r>
  405012:	2800      	cmp	r0, #0
  405014:	f040 8133 	bne.w	40527e <__sfvwrite_r+0x2da>
  405018:	89a3      	ldrh	r3, [r4, #12]
  40501a:	6835      	ldr	r5, [r6, #0]
  40501c:	f013 0002 	ands.w	r0, r3, #2
  405020:	d1d2      	bne.n	404fc8 <__sfvwrite_r+0x24>
  405022:	f013 0901 	ands.w	r9, r3, #1
  405026:	d145      	bne.n	4050b4 <__sfvwrite_r+0x110>
  405028:	464f      	mov	r7, r9
  40502a:	9601      	str	r6, [sp, #4]
  40502c:	b337      	cbz	r7, 40507c <__sfvwrite_r+0xd8>
  40502e:	059a      	lsls	r2, r3, #22
  405030:	f8d4 8008 	ldr.w	r8, [r4, #8]
  405034:	f140 8083 	bpl.w	40513e <__sfvwrite_r+0x19a>
  405038:	4547      	cmp	r7, r8
  40503a:	46c3      	mov	fp, r8
  40503c:	f0c0 80ab 	bcc.w	405196 <__sfvwrite_r+0x1f2>
  405040:	f413 6f90 	tst.w	r3, #1152	; 0x480
  405044:	f040 80ac 	bne.w	4051a0 <__sfvwrite_r+0x1fc>
  405048:	6820      	ldr	r0, [r4, #0]
  40504a:	46ba      	mov	sl, r7
  40504c:	465a      	mov	r2, fp
  40504e:	4649      	mov	r1, r9
  405050:	f000 fad8 	bl	405604 <memmove>
  405054:	68a2      	ldr	r2, [r4, #8]
  405056:	6823      	ldr	r3, [r4, #0]
  405058:	eba2 0208 	sub.w	r2, r2, r8
  40505c:	445b      	add	r3, fp
  40505e:	60a2      	str	r2, [r4, #8]
  405060:	6023      	str	r3, [r4, #0]
  405062:	9a01      	ldr	r2, [sp, #4]
  405064:	6893      	ldr	r3, [r2, #8]
  405066:	eba3 030a 	sub.w	r3, r3, sl
  40506a:	44d1      	add	r9, sl
  40506c:	eba7 070a 	sub.w	r7, r7, sl
  405070:	6093      	str	r3, [r2, #8]
  405072:	2b00      	cmp	r3, #0
  405074:	d0c5      	beq.n	405002 <__sfvwrite_r+0x5e>
  405076:	89a3      	ldrh	r3, [r4, #12]
  405078:	2f00      	cmp	r7, #0
  40507a:	d1d8      	bne.n	40502e <__sfvwrite_r+0x8a>
  40507c:	f8d5 9000 	ldr.w	r9, [r5]
  405080:	686f      	ldr	r7, [r5, #4]
  405082:	3508      	adds	r5, #8
  405084:	e7d2      	b.n	40502c <__sfvwrite_r+0x88>
  405086:	f8d5 9000 	ldr.w	r9, [r5]
  40508a:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40508e:	3508      	adds	r5, #8
  405090:	e79f      	b.n	404fd2 <__sfvwrite_r+0x2e>
  405092:	2000      	movs	r0, #0
  405094:	4770      	bx	lr
  405096:	4621      	mov	r1, r4
  405098:	9800      	ldr	r0, [sp, #0]
  40509a:	f7ff fd1f 	bl	404adc <_fflush_r>
  40509e:	b370      	cbz	r0, 4050fe <__sfvwrite_r+0x15a>
  4050a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4050a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4050a8:	f04f 30ff 	mov.w	r0, #4294967295
  4050ac:	81a3      	strh	r3, [r4, #12]
  4050ae:	b003      	add	sp, #12
  4050b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4050b4:	4681      	mov	r9, r0
  4050b6:	4633      	mov	r3, r6
  4050b8:	464e      	mov	r6, r9
  4050ba:	46a8      	mov	r8, r5
  4050bc:	469a      	mov	sl, r3
  4050be:	464d      	mov	r5, r9
  4050c0:	b34e      	cbz	r6, 405116 <__sfvwrite_r+0x172>
  4050c2:	b380      	cbz	r0, 405126 <__sfvwrite_r+0x182>
  4050c4:	6820      	ldr	r0, [r4, #0]
  4050c6:	6923      	ldr	r3, [r4, #16]
  4050c8:	6962      	ldr	r2, [r4, #20]
  4050ca:	45b1      	cmp	r9, r6
  4050cc:	46cb      	mov	fp, r9
  4050ce:	bf28      	it	cs
  4050d0:	46b3      	movcs	fp, r6
  4050d2:	4298      	cmp	r0, r3
  4050d4:	465f      	mov	r7, fp
  4050d6:	d904      	bls.n	4050e2 <__sfvwrite_r+0x13e>
  4050d8:	68a3      	ldr	r3, [r4, #8]
  4050da:	4413      	add	r3, r2
  4050dc:	459b      	cmp	fp, r3
  4050de:	f300 80a6 	bgt.w	40522e <__sfvwrite_r+0x28a>
  4050e2:	4593      	cmp	fp, r2
  4050e4:	db4b      	blt.n	40517e <__sfvwrite_r+0x1da>
  4050e6:	4613      	mov	r3, r2
  4050e8:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4050ea:	69e1      	ldr	r1, [r4, #28]
  4050ec:	9800      	ldr	r0, [sp, #0]
  4050ee:	462a      	mov	r2, r5
  4050f0:	47b8      	blx	r7
  4050f2:	1e07      	subs	r7, r0, #0
  4050f4:	ddd4      	ble.n	4050a0 <__sfvwrite_r+0xfc>
  4050f6:	ebb9 0907 	subs.w	r9, r9, r7
  4050fa:	d0cc      	beq.n	405096 <__sfvwrite_r+0xf2>
  4050fc:	2001      	movs	r0, #1
  4050fe:	f8da 3008 	ldr.w	r3, [sl, #8]
  405102:	1bdb      	subs	r3, r3, r7
  405104:	443d      	add	r5, r7
  405106:	1bf6      	subs	r6, r6, r7
  405108:	f8ca 3008 	str.w	r3, [sl, #8]
  40510c:	2b00      	cmp	r3, #0
  40510e:	f43f af78 	beq.w	405002 <__sfvwrite_r+0x5e>
  405112:	2e00      	cmp	r6, #0
  405114:	d1d5      	bne.n	4050c2 <__sfvwrite_r+0x11e>
  405116:	f108 0308 	add.w	r3, r8, #8
  40511a:	e913 0060 	ldmdb	r3, {r5, r6}
  40511e:	4698      	mov	r8, r3
  405120:	3308      	adds	r3, #8
  405122:	2e00      	cmp	r6, #0
  405124:	d0f9      	beq.n	40511a <__sfvwrite_r+0x176>
  405126:	4632      	mov	r2, r6
  405128:	210a      	movs	r1, #10
  40512a:	4628      	mov	r0, r5
  40512c:	f000 f980 	bl	405430 <memchr>
  405130:	2800      	cmp	r0, #0
  405132:	f000 80a1 	beq.w	405278 <__sfvwrite_r+0x2d4>
  405136:	3001      	adds	r0, #1
  405138:	eba0 0905 	sub.w	r9, r0, r5
  40513c:	e7c2      	b.n	4050c4 <__sfvwrite_r+0x120>
  40513e:	6820      	ldr	r0, [r4, #0]
  405140:	6923      	ldr	r3, [r4, #16]
  405142:	4298      	cmp	r0, r3
  405144:	d802      	bhi.n	40514c <__sfvwrite_r+0x1a8>
  405146:	6963      	ldr	r3, [r4, #20]
  405148:	429f      	cmp	r7, r3
  40514a:	d25d      	bcs.n	405208 <__sfvwrite_r+0x264>
  40514c:	45b8      	cmp	r8, r7
  40514e:	bf28      	it	cs
  405150:	46b8      	movcs	r8, r7
  405152:	4642      	mov	r2, r8
  405154:	4649      	mov	r1, r9
  405156:	f000 fa55 	bl	405604 <memmove>
  40515a:	68a3      	ldr	r3, [r4, #8]
  40515c:	6822      	ldr	r2, [r4, #0]
  40515e:	eba3 0308 	sub.w	r3, r3, r8
  405162:	4442      	add	r2, r8
  405164:	60a3      	str	r3, [r4, #8]
  405166:	6022      	str	r2, [r4, #0]
  405168:	b10b      	cbz	r3, 40516e <__sfvwrite_r+0x1ca>
  40516a:	46c2      	mov	sl, r8
  40516c:	e779      	b.n	405062 <__sfvwrite_r+0xbe>
  40516e:	4621      	mov	r1, r4
  405170:	9800      	ldr	r0, [sp, #0]
  405172:	f7ff fcb3 	bl	404adc <_fflush_r>
  405176:	2800      	cmp	r0, #0
  405178:	d192      	bne.n	4050a0 <__sfvwrite_r+0xfc>
  40517a:	46c2      	mov	sl, r8
  40517c:	e771      	b.n	405062 <__sfvwrite_r+0xbe>
  40517e:	465a      	mov	r2, fp
  405180:	4629      	mov	r1, r5
  405182:	f000 fa3f 	bl	405604 <memmove>
  405186:	68a2      	ldr	r2, [r4, #8]
  405188:	6823      	ldr	r3, [r4, #0]
  40518a:	eba2 020b 	sub.w	r2, r2, fp
  40518e:	445b      	add	r3, fp
  405190:	60a2      	str	r2, [r4, #8]
  405192:	6023      	str	r3, [r4, #0]
  405194:	e7af      	b.n	4050f6 <__sfvwrite_r+0x152>
  405196:	6820      	ldr	r0, [r4, #0]
  405198:	46b8      	mov	r8, r7
  40519a:	46ba      	mov	sl, r7
  40519c:	46bb      	mov	fp, r7
  40519e:	e755      	b.n	40504c <__sfvwrite_r+0xa8>
  4051a0:	6962      	ldr	r2, [r4, #20]
  4051a2:	6820      	ldr	r0, [r4, #0]
  4051a4:	6921      	ldr	r1, [r4, #16]
  4051a6:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4051aa:	eba0 0a01 	sub.w	sl, r0, r1
  4051ae:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4051b2:	f10a 0001 	add.w	r0, sl, #1
  4051b6:	ea4f 0868 	mov.w	r8, r8, asr #1
  4051ba:	4438      	add	r0, r7
  4051bc:	4540      	cmp	r0, r8
  4051be:	4642      	mov	r2, r8
  4051c0:	bf84      	itt	hi
  4051c2:	4680      	movhi	r8, r0
  4051c4:	4642      	movhi	r2, r8
  4051c6:	055b      	lsls	r3, r3, #21
  4051c8:	d544      	bpl.n	405254 <__sfvwrite_r+0x2b0>
  4051ca:	4611      	mov	r1, r2
  4051cc:	9800      	ldr	r0, [sp, #0]
  4051ce:	f7fe f92d 	bl	40342c <_malloc_r>
  4051d2:	4683      	mov	fp, r0
  4051d4:	2800      	cmp	r0, #0
  4051d6:	d055      	beq.n	405284 <__sfvwrite_r+0x2e0>
  4051d8:	4652      	mov	r2, sl
  4051da:	6921      	ldr	r1, [r4, #16]
  4051dc:	f000 f978 	bl	4054d0 <memcpy>
  4051e0:	89a3      	ldrh	r3, [r4, #12]
  4051e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4051e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4051ea:	81a3      	strh	r3, [r4, #12]
  4051ec:	eb0b 000a 	add.w	r0, fp, sl
  4051f0:	eba8 030a 	sub.w	r3, r8, sl
  4051f4:	f8c4 b010 	str.w	fp, [r4, #16]
  4051f8:	f8c4 8014 	str.w	r8, [r4, #20]
  4051fc:	6020      	str	r0, [r4, #0]
  4051fe:	60a3      	str	r3, [r4, #8]
  405200:	46b8      	mov	r8, r7
  405202:	46ba      	mov	sl, r7
  405204:	46bb      	mov	fp, r7
  405206:	e721      	b.n	40504c <__sfvwrite_r+0xa8>
  405208:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40520c:	42b9      	cmp	r1, r7
  40520e:	bf28      	it	cs
  405210:	4639      	movcs	r1, r7
  405212:	464a      	mov	r2, r9
  405214:	fb91 f1f3 	sdiv	r1, r1, r3
  405218:	9800      	ldr	r0, [sp, #0]
  40521a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40521c:	fb03 f301 	mul.w	r3, r3, r1
  405220:	69e1      	ldr	r1, [r4, #28]
  405222:	47b0      	blx	r6
  405224:	f1b0 0a00 	subs.w	sl, r0, #0
  405228:	f73f af1b 	bgt.w	405062 <__sfvwrite_r+0xbe>
  40522c:	e738      	b.n	4050a0 <__sfvwrite_r+0xfc>
  40522e:	461a      	mov	r2, r3
  405230:	4629      	mov	r1, r5
  405232:	9301      	str	r3, [sp, #4]
  405234:	f000 f9e6 	bl	405604 <memmove>
  405238:	6822      	ldr	r2, [r4, #0]
  40523a:	9b01      	ldr	r3, [sp, #4]
  40523c:	9800      	ldr	r0, [sp, #0]
  40523e:	441a      	add	r2, r3
  405240:	6022      	str	r2, [r4, #0]
  405242:	4621      	mov	r1, r4
  405244:	f7ff fc4a 	bl	404adc <_fflush_r>
  405248:	9b01      	ldr	r3, [sp, #4]
  40524a:	2800      	cmp	r0, #0
  40524c:	f47f af28 	bne.w	4050a0 <__sfvwrite_r+0xfc>
  405250:	461f      	mov	r7, r3
  405252:	e750      	b.n	4050f6 <__sfvwrite_r+0x152>
  405254:	9800      	ldr	r0, [sp, #0]
  405256:	f000 fa39 	bl	4056cc <_realloc_r>
  40525a:	4683      	mov	fp, r0
  40525c:	2800      	cmp	r0, #0
  40525e:	d1c5      	bne.n	4051ec <__sfvwrite_r+0x248>
  405260:	9d00      	ldr	r5, [sp, #0]
  405262:	6921      	ldr	r1, [r4, #16]
  405264:	4628      	mov	r0, r5
  405266:	f7ff fdb7 	bl	404dd8 <_free_r>
  40526a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40526e:	220c      	movs	r2, #12
  405270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  405274:	602a      	str	r2, [r5, #0]
  405276:	e715      	b.n	4050a4 <__sfvwrite_r+0x100>
  405278:	f106 0901 	add.w	r9, r6, #1
  40527c:	e722      	b.n	4050c4 <__sfvwrite_r+0x120>
  40527e:	f04f 30ff 	mov.w	r0, #4294967295
  405282:	e6bf      	b.n	405004 <__sfvwrite_r+0x60>
  405284:	9a00      	ldr	r2, [sp, #0]
  405286:	230c      	movs	r3, #12
  405288:	6013      	str	r3, [r2, #0]
  40528a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40528e:	e709      	b.n	4050a4 <__sfvwrite_r+0x100>
  405290:	7ffffc00 	.word	0x7ffffc00

00405294 <_fwalk_reent>:
  405294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405298:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40529c:	d01f      	beq.n	4052de <_fwalk_reent+0x4a>
  40529e:	4688      	mov	r8, r1
  4052a0:	4606      	mov	r6, r0
  4052a2:	f04f 0900 	mov.w	r9, #0
  4052a6:	687d      	ldr	r5, [r7, #4]
  4052a8:	68bc      	ldr	r4, [r7, #8]
  4052aa:	3d01      	subs	r5, #1
  4052ac:	d411      	bmi.n	4052d2 <_fwalk_reent+0x3e>
  4052ae:	89a3      	ldrh	r3, [r4, #12]
  4052b0:	2b01      	cmp	r3, #1
  4052b2:	f105 35ff 	add.w	r5, r5, #4294967295
  4052b6:	d908      	bls.n	4052ca <_fwalk_reent+0x36>
  4052b8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4052bc:	3301      	adds	r3, #1
  4052be:	4621      	mov	r1, r4
  4052c0:	4630      	mov	r0, r6
  4052c2:	d002      	beq.n	4052ca <_fwalk_reent+0x36>
  4052c4:	47c0      	blx	r8
  4052c6:	ea49 0900 	orr.w	r9, r9, r0
  4052ca:	1c6b      	adds	r3, r5, #1
  4052cc:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4052d0:	d1ed      	bne.n	4052ae <_fwalk_reent+0x1a>
  4052d2:	683f      	ldr	r7, [r7, #0]
  4052d4:	2f00      	cmp	r7, #0
  4052d6:	d1e6      	bne.n	4052a6 <_fwalk_reent+0x12>
  4052d8:	4648      	mov	r0, r9
  4052da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4052de:	46b9      	mov	r9, r7
  4052e0:	4648      	mov	r0, r9
  4052e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4052e6:	bf00      	nop

004052e8 <__locale_mb_cur_max>:
  4052e8:	4b04      	ldr	r3, [pc, #16]	; (4052fc <__locale_mb_cur_max+0x14>)
  4052ea:	4a05      	ldr	r2, [pc, #20]	; (405300 <__locale_mb_cur_max+0x18>)
  4052ec:	681b      	ldr	r3, [r3, #0]
  4052ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4052f0:	2b00      	cmp	r3, #0
  4052f2:	bf08      	it	eq
  4052f4:	4613      	moveq	r3, r2
  4052f6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4052fa:	4770      	bx	lr
  4052fc:	20400040 	.word	0x20400040
  405300:	20400884 	.word	0x20400884

00405304 <__retarget_lock_init_recursive>:
  405304:	4770      	bx	lr
  405306:	bf00      	nop

00405308 <__retarget_lock_close_recursive>:
  405308:	4770      	bx	lr
  40530a:	bf00      	nop

0040530c <__retarget_lock_acquire_recursive>:
  40530c:	4770      	bx	lr
  40530e:	bf00      	nop

00405310 <__retarget_lock_release_recursive>:
  405310:	4770      	bx	lr
  405312:	bf00      	nop

00405314 <__swhatbuf_r>:
  405314:	b570      	push	{r4, r5, r6, lr}
  405316:	460c      	mov	r4, r1
  405318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40531c:	2900      	cmp	r1, #0
  40531e:	b090      	sub	sp, #64	; 0x40
  405320:	4615      	mov	r5, r2
  405322:	461e      	mov	r6, r3
  405324:	db14      	blt.n	405350 <__swhatbuf_r+0x3c>
  405326:	aa01      	add	r2, sp, #4
  405328:	f000 fdb4 	bl	405e94 <_fstat_r>
  40532c:	2800      	cmp	r0, #0
  40532e:	db0f      	blt.n	405350 <__swhatbuf_r+0x3c>
  405330:	9a02      	ldr	r2, [sp, #8]
  405332:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405336:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40533a:	fab2 f282 	clz	r2, r2
  40533e:	0952      	lsrs	r2, r2, #5
  405340:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405344:	f44f 6000 	mov.w	r0, #2048	; 0x800
  405348:	6032      	str	r2, [r6, #0]
  40534a:	602b      	str	r3, [r5, #0]
  40534c:	b010      	add	sp, #64	; 0x40
  40534e:	bd70      	pop	{r4, r5, r6, pc}
  405350:	89a2      	ldrh	r2, [r4, #12]
  405352:	2300      	movs	r3, #0
  405354:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  405358:	6033      	str	r3, [r6, #0]
  40535a:	d004      	beq.n	405366 <__swhatbuf_r+0x52>
  40535c:	2240      	movs	r2, #64	; 0x40
  40535e:	4618      	mov	r0, r3
  405360:	602a      	str	r2, [r5, #0]
  405362:	b010      	add	sp, #64	; 0x40
  405364:	bd70      	pop	{r4, r5, r6, pc}
  405366:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40536a:	602b      	str	r3, [r5, #0]
  40536c:	b010      	add	sp, #64	; 0x40
  40536e:	bd70      	pop	{r4, r5, r6, pc}

00405370 <__smakebuf_r>:
  405370:	898a      	ldrh	r2, [r1, #12]
  405372:	0792      	lsls	r2, r2, #30
  405374:	460b      	mov	r3, r1
  405376:	d506      	bpl.n	405386 <__smakebuf_r+0x16>
  405378:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40537c:	2101      	movs	r1, #1
  40537e:	601a      	str	r2, [r3, #0]
  405380:	611a      	str	r2, [r3, #16]
  405382:	6159      	str	r1, [r3, #20]
  405384:	4770      	bx	lr
  405386:	b5f0      	push	{r4, r5, r6, r7, lr}
  405388:	b083      	sub	sp, #12
  40538a:	ab01      	add	r3, sp, #4
  40538c:	466a      	mov	r2, sp
  40538e:	460c      	mov	r4, r1
  405390:	4606      	mov	r6, r0
  405392:	f7ff ffbf 	bl	405314 <__swhatbuf_r>
  405396:	9900      	ldr	r1, [sp, #0]
  405398:	4605      	mov	r5, r0
  40539a:	4630      	mov	r0, r6
  40539c:	f7fe f846 	bl	40342c <_malloc_r>
  4053a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4053a4:	b1d8      	cbz	r0, 4053de <__smakebuf_r+0x6e>
  4053a6:	9a01      	ldr	r2, [sp, #4]
  4053a8:	4f15      	ldr	r7, [pc, #84]	; (405400 <__smakebuf_r+0x90>)
  4053aa:	9900      	ldr	r1, [sp, #0]
  4053ac:	63f7      	str	r7, [r6, #60]	; 0x3c
  4053ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4053b2:	81a3      	strh	r3, [r4, #12]
  4053b4:	6020      	str	r0, [r4, #0]
  4053b6:	6120      	str	r0, [r4, #16]
  4053b8:	6161      	str	r1, [r4, #20]
  4053ba:	b91a      	cbnz	r2, 4053c4 <__smakebuf_r+0x54>
  4053bc:	432b      	orrs	r3, r5
  4053be:	81a3      	strh	r3, [r4, #12]
  4053c0:	b003      	add	sp, #12
  4053c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4053c4:	4630      	mov	r0, r6
  4053c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4053ca:	f000 fd77 	bl	405ebc <_isatty_r>
  4053ce:	b1a0      	cbz	r0, 4053fa <__smakebuf_r+0x8a>
  4053d0:	89a3      	ldrh	r3, [r4, #12]
  4053d2:	f023 0303 	bic.w	r3, r3, #3
  4053d6:	f043 0301 	orr.w	r3, r3, #1
  4053da:	b21b      	sxth	r3, r3
  4053dc:	e7ee      	b.n	4053bc <__smakebuf_r+0x4c>
  4053de:	059a      	lsls	r2, r3, #22
  4053e0:	d4ee      	bmi.n	4053c0 <__smakebuf_r+0x50>
  4053e2:	f023 0303 	bic.w	r3, r3, #3
  4053e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4053ea:	f043 0302 	orr.w	r3, r3, #2
  4053ee:	2101      	movs	r1, #1
  4053f0:	81a3      	strh	r3, [r4, #12]
  4053f2:	6022      	str	r2, [r4, #0]
  4053f4:	6122      	str	r2, [r4, #16]
  4053f6:	6161      	str	r1, [r4, #20]
  4053f8:	e7e2      	b.n	4053c0 <__smakebuf_r+0x50>
  4053fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4053fe:	e7dd      	b.n	4053bc <__smakebuf_r+0x4c>
  405400:	00404b31 	.word	0x00404b31

00405404 <__ascii_mbtowc>:
  405404:	b082      	sub	sp, #8
  405406:	b149      	cbz	r1, 40541c <__ascii_mbtowc+0x18>
  405408:	b15a      	cbz	r2, 405422 <__ascii_mbtowc+0x1e>
  40540a:	b16b      	cbz	r3, 405428 <__ascii_mbtowc+0x24>
  40540c:	7813      	ldrb	r3, [r2, #0]
  40540e:	600b      	str	r3, [r1, #0]
  405410:	7812      	ldrb	r2, [r2, #0]
  405412:	1c10      	adds	r0, r2, #0
  405414:	bf18      	it	ne
  405416:	2001      	movne	r0, #1
  405418:	b002      	add	sp, #8
  40541a:	4770      	bx	lr
  40541c:	a901      	add	r1, sp, #4
  40541e:	2a00      	cmp	r2, #0
  405420:	d1f3      	bne.n	40540a <__ascii_mbtowc+0x6>
  405422:	4610      	mov	r0, r2
  405424:	b002      	add	sp, #8
  405426:	4770      	bx	lr
  405428:	f06f 0001 	mvn.w	r0, #1
  40542c:	e7f4      	b.n	405418 <__ascii_mbtowc+0x14>
  40542e:	bf00      	nop

00405430 <memchr>:
  405430:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405434:	2a10      	cmp	r2, #16
  405436:	db2b      	blt.n	405490 <memchr+0x60>
  405438:	f010 0f07 	tst.w	r0, #7
  40543c:	d008      	beq.n	405450 <memchr+0x20>
  40543e:	f810 3b01 	ldrb.w	r3, [r0], #1
  405442:	3a01      	subs	r2, #1
  405444:	428b      	cmp	r3, r1
  405446:	d02d      	beq.n	4054a4 <memchr+0x74>
  405448:	f010 0f07 	tst.w	r0, #7
  40544c:	b342      	cbz	r2, 4054a0 <memchr+0x70>
  40544e:	d1f6      	bne.n	40543e <memchr+0xe>
  405450:	b4f0      	push	{r4, r5, r6, r7}
  405452:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405456:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40545a:	f022 0407 	bic.w	r4, r2, #7
  40545e:	f07f 0700 	mvns.w	r7, #0
  405462:	2300      	movs	r3, #0
  405464:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405468:	3c08      	subs	r4, #8
  40546a:	ea85 0501 	eor.w	r5, r5, r1
  40546e:	ea86 0601 	eor.w	r6, r6, r1
  405472:	fa85 f547 	uadd8	r5, r5, r7
  405476:	faa3 f587 	sel	r5, r3, r7
  40547a:	fa86 f647 	uadd8	r6, r6, r7
  40547e:	faa5 f687 	sel	r6, r5, r7
  405482:	b98e      	cbnz	r6, 4054a8 <memchr+0x78>
  405484:	d1ee      	bne.n	405464 <memchr+0x34>
  405486:	bcf0      	pop	{r4, r5, r6, r7}
  405488:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40548c:	f002 0207 	and.w	r2, r2, #7
  405490:	b132      	cbz	r2, 4054a0 <memchr+0x70>
  405492:	f810 3b01 	ldrb.w	r3, [r0], #1
  405496:	3a01      	subs	r2, #1
  405498:	ea83 0301 	eor.w	r3, r3, r1
  40549c:	b113      	cbz	r3, 4054a4 <memchr+0x74>
  40549e:	d1f8      	bne.n	405492 <memchr+0x62>
  4054a0:	2000      	movs	r0, #0
  4054a2:	4770      	bx	lr
  4054a4:	3801      	subs	r0, #1
  4054a6:	4770      	bx	lr
  4054a8:	2d00      	cmp	r5, #0
  4054aa:	bf06      	itte	eq
  4054ac:	4635      	moveq	r5, r6
  4054ae:	3803      	subeq	r0, #3
  4054b0:	3807      	subne	r0, #7
  4054b2:	f015 0f01 	tst.w	r5, #1
  4054b6:	d107      	bne.n	4054c8 <memchr+0x98>
  4054b8:	3001      	adds	r0, #1
  4054ba:	f415 7f80 	tst.w	r5, #256	; 0x100
  4054be:	bf02      	ittt	eq
  4054c0:	3001      	addeq	r0, #1
  4054c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4054c6:	3001      	addeq	r0, #1
  4054c8:	bcf0      	pop	{r4, r5, r6, r7}
  4054ca:	3801      	subs	r0, #1
  4054cc:	4770      	bx	lr
  4054ce:	bf00      	nop

004054d0 <memcpy>:
  4054d0:	4684      	mov	ip, r0
  4054d2:	ea41 0300 	orr.w	r3, r1, r0
  4054d6:	f013 0303 	ands.w	r3, r3, #3
  4054da:	d16d      	bne.n	4055b8 <memcpy+0xe8>
  4054dc:	3a40      	subs	r2, #64	; 0x40
  4054de:	d341      	bcc.n	405564 <memcpy+0x94>
  4054e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4054e4:	f840 3b04 	str.w	r3, [r0], #4
  4054e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4054ec:	f840 3b04 	str.w	r3, [r0], #4
  4054f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4054f4:	f840 3b04 	str.w	r3, [r0], #4
  4054f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4054fc:	f840 3b04 	str.w	r3, [r0], #4
  405500:	f851 3b04 	ldr.w	r3, [r1], #4
  405504:	f840 3b04 	str.w	r3, [r0], #4
  405508:	f851 3b04 	ldr.w	r3, [r1], #4
  40550c:	f840 3b04 	str.w	r3, [r0], #4
  405510:	f851 3b04 	ldr.w	r3, [r1], #4
  405514:	f840 3b04 	str.w	r3, [r0], #4
  405518:	f851 3b04 	ldr.w	r3, [r1], #4
  40551c:	f840 3b04 	str.w	r3, [r0], #4
  405520:	f851 3b04 	ldr.w	r3, [r1], #4
  405524:	f840 3b04 	str.w	r3, [r0], #4
  405528:	f851 3b04 	ldr.w	r3, [r1], #4
  40552c:	f840 3b04 	str.w	r3, [r0], #4
  405530:	f851 3b04 	ldr.w	r3, [r1], #4
  405534:	f840 3b04 	str.w	r3, [r0], #4
  405538:	f851 3b04 	ldr.w	r3, [r1], #4
  40553c:	f840 3b04 	str.w	r3, [r0], #4
  405540:	f851 3b04 	ldr.w	r3, [r1], #4
  405544:	f840 3b04 	str.w	r3, [r0], #4
  405548:	f851 3b04 	ldr.w	r3, [r1], #4
  40554c:	f840 3b04 	str.w	r3, [r0], #4
  405550:	f851 3b04 	ldr.w	r3, [r1], #4
  405554:	f840 3b04 	str.w	r3, [r0], #4
  405558:	f851 3b04 	ldr.w	r3, [r1], #4
  40555c:	f840 3b04 	str.w	r3, [r0], #4
  405560:	3a40      	subs	r2, #64	; 0x40
  405562:	d2bd      	bcs.n	4054e0 <memcpy+0x10>
  405564:	3230      	adds	r2, #48	; 0x30
  405566:	d311      	bcc.n	40558c <memcpy+0xbc>
  405568:	f851 3b04 	ldr.w	r3, [r1], #4
  40556c:	f840 3b04 	str.w	r3, [r0], #4
  405570:	f851 3b04 	ldr.w	r3, [r1], #4
  405574:	f840 3b04 	str.w	r3, [r0], #4
  405578:	f851 3b04 	ldr.w	r3, [r1], #4
  40557c:	f840 3b04 	str.w	r3, [r0], #4
  405580:	f851 3b04 	ldr.w	r3, [r1], #4
  405584:	f840 3b04 	str.w	r3, [r0], #4
  405588:	3a10      	subs	r2, #16
  40558a:	d2ed      	bcs.n	405568 <memcpy+0x98>
  40558c:	320c      	adds	r2, #12
  40558e:	d305      	bcc.n	40559c <memcpy+0xcc>
  405590:	f851 3b04 	ldr.w	r3, [r1], #4
  405594:	f840 3b04 	str.w	r3, [r0], #4
  405598:	3a04      	subs	r2, #4
  40559a:	d2f9      	bcs.n	405590 <memcpy+0xc0>
  40559c:	3204      	adds	r2, #4
  40559e:	d008      	beq.n	4055b2 <memcpy+0xe2>
  4055a0:	07d2      	lsls	r2, r2, #31
  4055a2:	bf1c      	itt	ne
  4055a4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4055a8:	f800 3b01 	strbne.w	r3, [r0], #1
  4055ac:	d301      	bcc.n	4055b2 <memcpy+0xe2>
  4055ae:	880b      	ldrh	r3, [r1, #0]
  4055b0:	8003      	strh	r3, [r0, #0]
  4055b2:	4660      	mov	r0, ip
  4055b4:	4770      	bx	lr
  4055b6:	bf00      	nop
  4055b8:	2a08      	cmp	r2, #8
  4055ba:	d313      	bcc.n	4055e4 <memcpy+0x114>
  4055bc:	078b      	lsls	r3, r1, #30
  4055be:	d08d      	beq.n	4054dc <memcpy+0xc>
  4055c0:	f010 0303 	ands.w	r3, r0, #3
  4055c4:	d08a      	beq.n	4054dc <memcpy+0xc>
  4055c6:	f1c3 0304 	rsb	r3, r3, #4
  4055ca:	1ad2      	subs	r2, r2, r3
  4055cc:	07db      	lsls	r3, r3, #31
  4055ce:	bf1c      	itt	ne
  4055d0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4055d4:	f800 3b01 	strbne.w	r3, [r0], #1
  4055d8:	d380      	bcc.n	4054dc <memcpy+0xc>
  4055da:	f831 3b02 	ldrh.w	r3, [r1], #2
  4055de:	f820 3b02 	strh.w	r3, [r0], #2
  4055e2:	e77b      	b.n	4054dc <memcpy+0xc>
  4055e4:	3a04      	subs	r2, #4
  4055e6:	d3d9      	bcc.n	40559c <memcpy+0xcc>
  4055e8:	3a01      	subs	r2, #1
  4055ea:	f811 3b01 	ldrb.w	r3, [r1], #1
  4055ee:	f800 3b01 	strb.w	r3, [r0], #1
  4055f2:	d2f9      	bcs.n	4055e8 <memcpy+0x118>
  4055f4:	780b      	ldrb	r3, [r1, #0]
  4055f6:	7003      	strb	r3, [r0, #0]
  4055f8:	784b      	ldrb	r3, [r1, #1]
  4055fa:	7043      	strb	r3, [r0, #1]
  4055fc:	788b      	ldrb	r3, [r1, #2]
  4055fe:	7083      	strb	r3, [r0, #2]
  405600:	4660      	mov	r0, ip
  405602:	4770      	bx	lr

00405604 <memmove>:
  405604:	4288      	cmp	r0, r1
  405606:	b5f0      	push	{r4, r5, r6, r7, lr}
  405608:	d90d      	bls.n	405626 <memmove+0x22>
  40560a:	188b      	adds	r3, r1, r2
  40560c:	4298      	cmp	r0, r3
  40560e:	d20a      	bcs.n	405626 <memmove+0x22>
  405610:	1884      	adds	r4, r0, r2
  405612:	2a00      	cmp	r2, #0
  405614:	d051      	beq.n	4056ba <memmove+0xb6>
  405616:	4622      	mov	r2, r4
  405618:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40561c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  405620:	4299      	cmp	r1, r3
  405622:	d1f9      	bne.n	405618 <memmove+0x14>
  405624:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405626:	2a0f      	cmp	r2, #15
  405628:	d948      	bls.n	4056bc <memmove+0xb8>
  40562a:	ea41 0300 	orr.w	r3, r1, r0
  40562e:	079b      	lsls	r3, r3, #30
  405630:	d146      	bne.n	4056c0 <memmove+0xbc>
  405632:	f100 0410 	add.w	r4, r0, #16
  405636:	f101 0310 	add.w	r3, r1, #16
  40563a:	4615      	mov	r5, r2
  40563c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  405640:	f844 6c10 	str.w	r6, [r4, #-16]
  405644:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405648:	f844 6c0c 	str.w	r6, [r4, #-12]
  40564c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  405650:	f844 6c08 	str.w	r6, [r4, #-8]
  405654:	3d10      	subs	r5, #16
  405656:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40565a:	f844 6c04 	str.w	r6, [r4, #-4]
  40565e:	2d0f      	cmp	r5, #15
  405660:	f103 0310 	add.w	r3, r3, #16
  405664:	f104 0410 	add.w	r4, r4, #16
  405668:	d8e8      	bhi.n	40563c <memmove+0x38>
  40566a:	f1a2 0310 	sub.w	r3, r2, #16
  40566e:	f023 030f 	bic.w	r3, r3, #15
  405672:	f002 0e0f 	and.w	lr, r2, #15
  405676:	3310      	adds	r3, #16
  405678:	f1be 0f03 	cmp.w	lr, #3
  40567c:	4419      	add	r1, r3
  40567e:	4403      	add	r3, r0
  405680:	d921      	bls.n	4056c6 <memmove+0xc2>
  405682:	1f1e      	subs	r6, r3, #4
  405684:	460d      	mov	r5, r1
  405686:	4674      	mov	r4, lr
  405688:	3c04      	subs	r4, #4
  40568a:	f855 7b04 	ldr.w	r7, [r5], #4
  40568e:	f846 7f04 	str.w	r7, [r6, #4]!
  405692:	2c03      	cmp	r4, #3
  405694:	d8f8      	bhi.n	405688 <memmove+0x84>
  405696:	f1ae 0404 	sub.w	r4, lr, #4
  40569a:	f024 0403 	bic.w	r4, r4, #3
  40569e:	3404      	adds	r4, #4
  4056a0:	4421      	add	r1, r4
  4056a2:	4423      	add	r3, r4
  4056a4:	f002 0203 	and.w	r2, r2, #3
  4056a8:	b162      	cbz	r2, 4056c4 <memmove+0xc0>
  4056aa:	3b01      	subs	r3, #1
  4056ac:	440a      	add	r2, r1
  4056ae:	f811 4b01 	ldrb.w	r4, [r1], #1
  4056b2:	f803 4f01 	strb.w	r4, [r3, #1]!
  4056b6:	428a      	cmp	r2, r1
  4056b8:	d1f9      	bne.n	4056ae <memmove+0xaa>
  4056ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4056bc:	4603      	mov	r3, r0
  4056be:	e7f3      	b.n	4056a8 <memmove+0xa4>
  4056c0:	4603      	mov	r3, r0
  4056c2:	e7f2      	b.n	4056aa <memmove+0xa6>
  4056c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4056c6:	4672      	mov	r2, lr
  4056c8:	e7ee      	b.n	4056a8 <memmove+0xa4>
  4056ca:	bf00      	nop

004056cc <_realloc_r>:
  4056cc:	2900      	cmp	r1, #0
  4056ce:	f000 8095 	beq.w	4057fc <_realloc_r+0x130>
  4056d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4056d6:	460d      	mov	r5, r1
  4056d8:	4616      	mov	r6, r2
  4056da:	b083      	sub	sp, #12
  4056dc:	4680      	mov	r8, r0
  4056de:	f106 070b 	add.w	r7, r6, #11
  4056e2:	f7fe f9a1 	bl	403a28 <__malloc_lock>
  4056e6:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4056ea:	2f16      	cmp	r7, #22
  4056ec:	f02e 0403 	bic.w	r4, lr, #3
  4056f0:	f1a5 0908 	sub.w	r9, r5, #8
  4056f4:	d83c      	bhi.n	405770 <_realloc_r+0xa4>
  4056f6:	2210      	movs	r2, #16
  4056f8:	4617      	mov	r7, r2
  4056fa:	42be      	cmp	r6, r7
  4056fc:	d83d      	bhi.n	40577a <_realloc_r+0xae>
  4056fe:	4294      	cmp	r4, r2
  405700:	da43      	bge.n	40578a <_realloc_r+0xbe>
  405702:	4bc4      	ldr	r3, [pc, #784]	; (405a14 <_realloc_r+0x348>)
  405704:	6899      	ldr	r1, [r3, #8]
  405706:	eb09 0004 	add.w	r0, r9, r4
  40570a:	4288      	cmp	r0, r1
  40570c:	f000 80b4 	beq.w	405878 <_realloc_r+0x1ac>
  405710:	6843      	ldr	r3, [r0, #4]
  405712:	f023 0101 	bic.w	r1, r3, #1
  405716:	4401      	add	r1, r0
  405718:	6849      	ldr	r1, [r1, #4]
  40571a:	07c9      	lsls	r1, r1, #31
  40571c:	d54c      	bpl.n	4057b8 <_realloc_r+0xec>
  40571e:	f01e 0f01 	tst.w	lr, #1
  405722:	f000 809b 	beq.w	40585c <_realloc_r+0x190>
  405726:	4631      	mov	r1, r6
  405728:	4640      	mov	r0, r8
  40572a:	f7fd fe7f 	bl	40342c <_malloc_r>
  40572e:	4606      	mov	r6, r0
  405730:	2800      	cmp	r0, #0
  405732:	d03a      	beq.n	4057aa <_realloc_r+0xde>
  405734:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405738:	f023 0301 	bic.w	r3, r3, #1
  40573c:	444b      	add	r3, r9
  40573e:	f1a0 0208 	sub.w	r2, r0, #8
  405742:	429a      	cmp	r2, r3
  405744:	f000 8121 	beq.w	40598a <_realloc_r+0x2be>
  405748:	1f22      	subs	r2, r4, #4
  40574a:	2a24      	cmp	r2, #36	; 0x24
  40574c:	f200 8107 	bhi.w	40595e <_realloc_r+0x292>
  405750:	2a13      	cmp	r2, #19
  405752:	f200 80db 	bhi.w	40590c <_realloc_r+0x240>
  405756:	4603      	mov	r3, r0
  405758:	462a      	mov	r2, r5
  40575a:	6811      	ldr	r1, [r2, #0]
  40575c:	6019      	str	r1, [r3, #0]
  40575e:	6851      	ldr	r1, [r2, #4]
  405760:	6059      	str	r1, [r3, #4]
  405762:	6892      	ldr	r2, [r2, #8]
  405764:	609a      	str	r2, [r3, #8]
  405766:	4629      	mov	r1, r5
  405768:	4640      	mov	r0, r8
  40576a:	f7ff fb35 	bl	404dd8 <_free_r>
  40576e:	e01c      	b.n	4057aa <_realloc_r+0xde>
  405770:	f027 0707 	bic.w	r7, r7, #7
  405774:	2f00      	cmp	r7, #0
  405776:	463a      	mov	r2, r7
  405778:	dabf      	bge.n	4056fa <_realloc_r+0x2e>
  40577a:	2600      	movs	r6, #0
  40577c:	230c      	movs	r3, #12
  40577e:	4630      	mov	r0, r6
  405780:	f8c8 3000 	str.w	r3, [r8]
  405784:	b003      	add	sp, #12
  405786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40578a:	462e      	mov	r6, r5
  40578c:	1be3      	subs	r3, r4, r7
  40578e:	2b0f      	cmp	r3, #15
  405790:	d81e      	bhi.n	4057d0 <_realloc_r+0x104>
  405792:	f8d9 3004 	ldr.w	r3, [r9, #4]
  405796:	f003 0301 	and.w	r3, r3, #1
  40579a:	4323      	orrs	r3, r4
  40579c:	444c      	add	r4, r9
  40579e:	f8c9 3004 	str.w	r3, [r9, #4]
  4057a2:	6863      	ldr	r3, [r4, #4]
  4057a4:	f043 0301 	orr.w	r3, r3, #1
  4057a8:	6063      	str	r3, [r4, #4]
  4057aa:	4640      	mov	r0, r8
  4057ac:	f7fe f942 	bl	403a34 <__malloc_unlock>
  4057b0:	4630      	mov	r0, r6
  4057b2:	b003      	add	sp, #12
  4057b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4057b8:	f023 0303 	bic.w	r3, r3, #3
  4057bc:	18e1      	adds	r1, r4, r3
  4057be:	4291      	cmp	r1, r2
  4057c0:	db1f      	blt.n	405802 <_realloc_r+0x136>
  4057c2:	68c3      	ldr	r3, [r0, #12]
  4057c4:	6882      	ldr	r2, [r0, #8]
  4057c6:	462e      	mov	r6, r5
  4057c8:	60d3      	str	r3, [r2, #12]
  4057ca:	460c      	mov	r4, r1
  4057cc:	609a      	str	r2, [r3, #8]
  4057ce:	e7dd      	b.n	40578c <_realloc_r+0xc0>
  4057d0:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4057d4:	eb09 0107 	add.w	r1, r9, r7
  4057d8:	f002 0201 	and.w	r2, r2, #1
  4057dc:	444c      	add	r4, r9
  4057de:	f043 0301 	orr.w	r3, r3, #1
  4057e2:	4317      	orrs	r7, r2
  4057e4:	f8c9 7004 	str.w	r7, [r9, #4]
  4057e8:	604b      	str	r3, [r1, #4]
  4057ea:	6863      	ldr	r3, [r4, #4]
  4057ec:	f043 0301 	orr.w	r3, r3, #1
  4057f0:	3108      	adds	r1, #8
  4057f2:	6063      	str	r3, [r4, #4]
  4057f4:	4640      	mov	r0, r8
  4057f6:	f7ff faef 	bl	404dd8 <_free_r>
  4057fa:	e7d6      	b.n	4057aa <_realloc_r+0xde>
  4057fc:	4611      	mov	r1, r2
  4057fe:	f7fd be15 	b.w	40342c <_malloc_r>
  405802:	f01e 0f01 	tst.w	lr, #1
  405806:	d18e      	bne.n	405726 <_realloc_r+0x5a>
  405808:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40580c:	eba9 0a01 	sub.w	sl, r9, r1
  405810:	f8da 1004 	ldr.w	r1, [sl, #4]
  405814:	f021 0103 	bic.w	r1, r1, #3
  405818:	440b      	add	r3, r1
  40581a:	4423      	add	r3, r4
  40581c:	4293      	cmp	r3, r2
  40581e:	db25      	blt.n	40586c <_realloc_r+0x1a0>
  405820:	68c2      	ldr	r2, [r0, #12]
  405822:	6881      	ldr	r1, [r0, #8]
  405824:	4656      	mov	r6, sl
  405826:	60ca      	str	r2, [r1, #12]
  405828:	6091      	str	r1, [r2, #8]
  40582a:	f8da 100c 	ldr.w	r1, [sl, #12]
  40582e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405832:	1f22      	subs	r2, r4, #4
  405834:	2a24      	cmp	r2, #36	; 0x24
  405836:	60c1      	str	r1, [r0, #12]
  405838:	6088      	str	r0, [r1, #8]
  40583a:	f200 8094 	bhi.w	405966 <_realloc_r+0x29a>
  40583e:	2a13      	cmp	r2, #19
  405840:	d96f      	bls.n	405922 <_realloc_r+0x256>
  405842:	6829      	ldr	r1, [r5, #0]
  405844:	f8ca 1008 	str.w	r1, [sl, #8]
  405848:	6869      	ldr	r1, [r5, #4]
  40584a:	f8ca 100c 	str.w	r1, [sl, #12]
  40584e:	2a1b      	cmp	r2, #27
  405850:	f200 80a2 	bhi.w	405998 <_realloc_r+0x2cc>
  405854:	3508      	adds	r5, #8
  405856:	f10a 0210 	add.w	r2, sl, #16
  40585a:	e063      	b.n	405924 <_realloc_r+0x258>
  40585c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  405860:	eba9 0a03 	sub.w	sl, r9, r3
  405864:	f8da 1004 	ldr.w	r1, [sl, #4]
  405868:	f021 0103 	bic.w	r1, r1, #3
  40586c:	1863      	adds	r3, r4, r1
  40586e:	4293      	cmp	r3, r2
  405870:	f6ff af59 	blt.w	405726 <_realloc_r+0x5a>
  405874:	4656      	mov	r6, sl
  405876:	e7d8      	b.n	40582a <_realloc_r+0x15e>
  405878:	6841      	ldr	r1, [r0, #4]
  40587a:	f021 0b03 	bic.w	fp, r1, #3
  40587e:	44a3      	add	fp, r4
  405880:	f107 0010 	add.w	r0, r7, #16
  405884:	4583      	cmp	fp, r0
  405886:	da56      	bge.n	405936 <_realloc_r+0x26a>
  405888:	f01e 0f01 	tst.w	lr, #1
  40588c:	f47f af4b 	bne.w	405726 <_realloc_r+0x5a>
  405890:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405894:	eba9 0a01 	sub.w	sl, r9, r1
  405898:	f8da 1004 	ldr.w	r1, [sl, #4]
  40589c:	f021 0103 	bic.w	r1, r1, #3
  4058a0:	448b      	add	fp, r1
  4058a2:	4558      	cmp	r0, fp
  4058a4:	dce2      	bgt.n	40586c <_realloc_r+0x1a0>
  4058a6:	4656      	mov	r6, sl
  4058a8:	f8da 100c 	ldr.w	r1, [sl, #12]
  4058ac:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4058b0:	1f22      	subs	r2, r4, #4
  4058b2:	2a24      	cmp	r2, #36	; 0x24
  4058b4:	60c1      	str	r1, [r0, #12]
  4058b6:	6088      	str	r0, [r1, #8]
  4058b8:	f200 808f 	bhi.w	4059da <_realloc_r+0x30e>
  4058bc:	2a13      	cmp	r2, #19
  4058be:	f240 808a 	bls.w	4059d6 <_realloc_r+0x30a>
  4058c2:	6829      	ldr	r1, [r5, #0]
  4058c4:	f8ca 1008 	str.w	r1, [sl, #8]
  4058c8:	6869      	ldr	r1, [r5, #4]
  4058ca:	f8ca 100c 	str.w	r1, [sl, #12]
  4058ce:	2a1b      	cmp	r2, #27
  4058d0:	f200 808a 	bhi.w	4059e8 <_realloc_r+0x31c>
  4058d4:	3508      	adds	r5, #8
  4058d6:	f10a 0210 	add.w	r2, sl, #16
  4058da:	6829      	ldr	r1, [r5, #0]
  4058dc:	6011      	str	r1, [r2, #0]
  4058de:	6869      	ldr	r1, [r5, #4]
  4058e0:	6051      	str	r1, [r2, #4]
  4058e2:	68a9      	ldr	r1, [r5, #8]
  4058e4:	6091      	str	r1, [r2, #8]
  4058e6:	eb0a 0107 	add.w	r1, sl, r7
  4058ea:	ebab 0207 	sub.w	r2, fp, r7
  4058ee:	f042 0201 	orr.w	r2, r2, #1
  4058f2:	6099      	str	r1, [r3, #8]
  4058f4:	604a      	str	r2, [r1, #4]
  4058f6:	f8da 3004 	ldr.w	r3, [sl, #4]
  4058fa:	f003 0301 	and.w	r3, r3, #1
  4058fe:	431f      	orrs	r7, r3
  405900:	4640      	mov	r0, r8
  405902:	f8ca 7004 	str.w	r7, [sl, #4]
  405906:	f7fe f895 	bl	403a34 <__malloc_unlock>
  40590a:	e751      	b.n	4057b0 <_realloc_r+0xe4>
  40590c:	682b      	ldr	r3, [r5, #0]
  40590e:	6003      	str	r3, [r0, #0]
  405910:	686b      	ldr	r3, [r5, #4]
  405912:	6043      	str	r3, [r0, #4]
  405914:	2a1b      	cmp	r2, #27
  405916:	d82d      	bhi.n	405974 <_realloc_r+0x2a8>
  405918:	f100 0308 	add.w	r3, r0, #8
  40591c:	f105 0208 	add.w	r2, r5, #8
  405920:	e71b      	b.n	40575a <_realloc_r+0x8e>
  405922:	4632      	mov	r2, r6
  405924:	6829      	ldr	r1, [r5, #0]
  405926:	6011      	str	r1, [r2, #0]
  405928:	6869      	ldr	r1, [r5, #4]
  40592a:	6051      	str	r1, [r2, #4]
  40592c:	68a9      	ldr	r1, [r5, #8]
  40592e:	6091      	str	r1, [r2, #8]
  405930:	461c      	mov	r4, r3
  405932:	46d1      	mov	r9, sl
  405934:	e72a      	b.n	40578c <_realloc_r+0xc0>
  405936:	eb09 0107 	add.w	r1, r9, r7
  40593a:	ebab 0b07 	sub.w	fp, fp, r7
  40593e:	f04b 0201 	orr.w	r2, fp, #1
  405942:	6099      	str	r1, [r3, #8]
  405944:	604a      	str	r2, [r1, #4]
  405946:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40594a:	f003 0301 	and.w	r3, r3, #1
  40594e:	431f      	orrs	r7, r3
  405950:	4640      	mov	r0, r8
  405952:	f845 7c04 	str.w	r7, [r5, #-4]
  405956:	f7fe f86d 	bl	403a34 <__malloc_unlock>
  40595a:	462e      	mov	r6, r5
  40595c:	e728      	b.n	4057b0 <_realloc_r+0xe4>
  40595e:	4629      	mov	r1, r5
  405960:	f7ff fe50 	bl	405604 <memmove>
  405964:	e6ff      	b.n	405766 <_realloc_r+0x9a>
  405966:	4629      	mov	r1, r5
  405968:	4630      	mov	r0, r6
  40596a:	461c      	mov	r4, r3
  40596c:	46d1      	mov	r9, sl
  40596e:	f7ff fe49 	bl	405604 <memmove>
  405972:	e70b      	b.n	40578c <_realloc_r+0xc0>
  405974:	68ab      	ldr	r3, [r5, #8]
  405976:	6083      	str	r3, [r0, #8]
  405978:	68eb      	ldr	r3, [r5, #12]
  40597a:	60c3      	str	r3, [r0, #12]
  40597c:	2a24      	cmp	r2, #36	; 0x24
  40597e:	d017      	beq.n	4059b0 <_realloc_r+0x2e4>
  405980:	f100 0310 	add.w	r3, r0, #16
  405984:	f105 0210 	add.w	r2, r5, #16
  405988:	e6e7      	b.n	40575a <_realloc_r+0x8e>
  40598a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40598e:	f023 0303 	bic.w	r3, r3, #3
  405992:	441c      	add	r4, r3
  405994:	462e      	mov	r6, r5
  405996:	e6f9      	b.n	40578c <_realloc_r+0xc0>
  405998:	68a9      	ldr	r1, [r5, #8]
  40599a:	f8ca 1010 	str.w	r1, [sl, #16]
  40599e:	68e9      	ldr	r1, [r5, #12]
  4059a0:	f8ca 1014 	str.w	r1, [sl, #20]
  4059a4:	2a24      	cmp	r2, #36	; 0x24
  4059a6:	d00c      	beq.n	4059c2 <_realloc_r+0x2f6>
  4059a8:	3510      	adds	r5, #16
  4059aa:	f10a 0218 	add.w	r2, sl, #24
  4059ae:	e7b9      	b.n	405924 <_realloc_r+0x258>
  4059b0:	692b      	ldr	r3, [r5, #16]
  4059b2:	6103      	str	r3, [r0, #16]
  4059b4:	696b      	ldr	r3, [r5, #20]
  4059b6:	6143      	str	r3, [r0, #20]
  4059b8:	f105 0218 	add.w	r2, r5, #24
  4059bc:	f100 0318 	add.w	r3, r0, #24
  4059c0:	e6cb      	b.n	40575a <_realloc_r+0x8e>
  4059c2:	692a      	ldr	r2, [r5, #16]
  4059c4:	f8ca 2018 	str.w	r2, [sl, #24]
  4059c8:	696a      	ldr	r2, [r5, #20]
  4059ca:	f8ca 201c 	str.w	r2, [sl, #28]
  4059ce:	3518      	adds	r5, #24
  4059d0:	f10a 0220 	add.w	r2, sl, #32
  4059d4:	e7a6      	b.n	405924 <_realloc_r+0x258>
  4059d6:	4632      	mov	r2, r6
  4059d8:	e77f      	b.n	4058da <_realloc_r+0x20e>
  4059da:	4629      	mov	r1, r5
  4059dc:	4630      	mov	r0, r6
  4059de:	9301      	str	r3, [sp, #4]
  4059e0:	f7ff fe10 	bl	405604 <memmove>
  4059e4:	9b01      	ldr	r3, [sp, #4]
  4059e6:	e77e      	b.n	4058e6 <_realloc_r+0x21a>
  4059e8:	68a9      	ldr	r1, [r5, #8]
  4059ea:	f8ca 1010 	str.w	r1, [sl, #16]
  4059ee:	68e9      	ldr	r1, [r5, #12]
  4059f0:	f8ca 1014 	str.w	r1, [sl, #20]
  4059f4:	2a24      	cmp	r2, #36	; 0x24
  4059f6:	d003      	beq.n	405a00 <_realloc_r+0x334>
  4059f8:	3510      	adds	r5, #16
  4059fa:	f10a 0218 	add.w	r2, sl, #24
  4059fe:	e76c      	b.n	4058da <_realloc_r+0x20e>
  405a00:	692a      	ldr	r2, [r5, #16]
  405a02:	f8ca 2018 	str.w	r2, [sl, #24]
  405a06:	696a      	ldr	r2, [r5, #20]
  405a08:	f8ca 201c 	str.w	r2, [sl, #28]
  405a0c:	3518      	adds	r5, #24
  405a0e:	f10a 0220 	add.w	r2, sl, #32
  405a12:	e762      	b.n	4058da <_realloc_r+0x20e>
  405a14:	20400470 	.word	0x20400470

00405a18 <__sread>:
  405a18:	b510      	push	{r4, lr}
  405a1a:	460c      	mov	r4, r1
  405a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405a20:	f000 fa74 	bl	405f0c <_read_r>
  405a24:	2800      	cmp	r0, #0
  405a26:	db03      	blt.n	405a30 <__sread+0x18>
  405a28:	6d23      	ldr	r3, [r4, #80]	; 0x50
  405a2a:	4403      	add	r3, r0
  405a2c:	6523      	str	r3, [r4, #80]	; 0x50
  405a2e:	bd10      	pop	{r4, pc}
  405a30:	89a3      	ldrh	r3, [r4, #12]
  405a32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  405a36:	81a3      	strh	r3, [r4, #12]
  405a38:	bd10      	pop	{r4, pc}
  405a3a:	bf00      	nop

00405a3c <__swrite>:
  405a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405a40:	4616      	mov	r6, r2
  405a42:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  405a46:	461f      	mov	r7, r3
  405a48:	05d3      	lsls	r3, r2, #23
  405a4a:	460c      	mov	r4, r1
  405a4c:	4605      	mov	r5, r0
  405a4e:	d507      	bpl.n	405a60 <__swrite+0x24>
  405a50:	2200      	movs	r2, #0
  405a52:	2302      	movs	r3, #2
  405a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405a58:	f000 fa42 	bl	405ee0 <_lseek_r>
  405a5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405a60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405a64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  405a68:	81a2      	strh	r2, [r4, #12]
  405a6a:	463b      	mov	r3, r7
  405a6c:	4632      	mov	r2, r6
  405a6e:	4628      	mov	r0, r5
  405a70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405a74:	f000 b922 	b.w	405cbc <_write_r>

00405a78 <__sseek>:
  405a78:	b510      	push	{r4, lr}
  405a7a:	460c      	mov	r4, r1
  405a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405a80:	f000 fa2e 	bl	405ee0 <_lseek_r>
  405a84:	89a3      	ldrh	r3, [r4, #12]
  405a86:	1c42      	adds	r2, r0, #1
  405a88:	bf0e      	itee	eq
  405a8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  405a8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  405a92:	6520      	strne	r0, [r4, #80]	; 0x50
  405a94:	81a3      	strh	r3, [r4, #12]
  405a96:	bd10      	pop	{r4, pc}

00405a98 <__sclose>:
  405a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405a9c:	f000 b986 	b.w	405dac <_close_r>
	...

00405ac0 <strlen>:
  405ac0:	f890 f000 	pld	[r0]
  405ac4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  405ac8:	f020 0107 	bic.w	r1, r0, #7
  405acc:	f06f 0c00 	mvn.w	ip, #0
  405ad0:	f010 0407 	ands.w	r4, r0, #7
  405ad4:	f891 f020 	pld	[r1, #32]
  405ad8:	f040 8049 	bne.w	405b6e <strlen+0xae>
  405adc:	f04f 0400 	mov.w	r4, #0
  405ae0:	f06f 0007 	mvn.w	r0, #7
  405ae4:	e9d1 2300 	ldrd	r2, r3, [r1]
  405ae8:	f891 f040 	pld	[r1, #64]	; 0x40
  405aec:	f100 0008 	add.w	r0, r0, #8
  405af0:	fa82 f24c 	uadd8	r2, r2, ip
  405af4:	faa4 f28c 	sel	r2, r4, ip
  405af8:	fa83 f34c 	uadd8	r3, r3, ip
  405afc:	faa2 f38c 	sel	r3, r2, ip
  405b00:	bb4b      	cbnz	r3, 405b56 <strlen+0x96>
  405b02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  405b06:	fa82 f24c 	uadd8	r2, r2, ip
  405b0a:	f100 0008 	add.w	r0, r0, #8
  405b0e:	faa4 f28c 	sel	r2, r4, ip
  405b12:	fa83 f34c 	uadd8	r3, r3, ip
  405b16:	faa2 f38c 	sel	r3, r2, ip
  405b1a:	b9e3      	cbnz	r3, 405b56 <strlen+0x96>
  405b1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  405b20:	fa82 f24c 	uadd8	r2, r2, ip
  405b24:	f100 0008 	add.w	r0, r0, #8
  405b28:	faa4 f28c 	sel	r2, r4, ip
  405b2c:	fa83 f34c 	uadd8	r3, r3, ip
  405b30:	faa2 f38c 	sel	r3, r2, ip
  405b34:	b97b      	cbnz	r3, 405b56 <strlen+0x96>
  405b36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  405b3a:	f101 0120 	add.w	r1, r1, #32
  405b3e:	fa82 f24c 	uadd8	r2, r2, ip
  405b42:	f100 0008 	add.w	r0, r0, #8
  405b46:	faa4 f28c 	sel	r2, r4, ip
  405b4a:	fa83 f34c 	uadd8	r3, r3, ip
  405b4e:	faa2 f38c 	sel	r3, r2, ip
  405b52:	2b00      	cmp	r3, #0
  405b54:	d0c6      	beq.n	405ae4 <strlen+0x24>
  405b56:	2a00      	cmp	r2, #0
  405b58:	bf04      	itt	eq
  405b5a:	3004      	addeq	r0, #4
  405b5c:	461a      	moveq	r2, r3
  405b5e:	ba12      	rev	r2, r2
  405b60:	fab2 f282 	clz	r2, r2
  405b64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  405b68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  405b6c:	4770      	bx	lr
  405b6e:	e9d1 2300 	ldrd	r2, r3, [r1]
  405b72:	f004 0503 	and.w	r5, r4, #3
  405b76:	f1c4 0000 	rsb	r0, r4, #0
  405b7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  405b7e:	f014 0f04 	tst.w	r4, #4
  405b82:	f891 f040 	pld	[r1, #64]	; 0x40
  405b86:	fa0c f505 	lsl.w	r5, ip, r5
  405b8a:	ea62 0205 	orn	r2, r2, r5
  405b8e:	bf1c      	itt	ne
  405b90:	ea63 0305 	ornne	r3, r3, r5
  405b94:	4662      	movne	r2, ip
  405b96:	f04f 0400 	mov.w	r4, #0
  405b9a:	e7a9      	b.n	405af0 <strlen+0x30>

00405b9c <__swbuf_r>:
  405b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405b9e:	460d      	mov	r5, r1
  405ba0:	4614      	mov	r4, r2
  405ba2:	4606      	mov	r6, r0
  405ba4:	b110      	cbz	r0, 405bac <__swbuf_r+0x10>
  405ba6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405ba8:	2b00      	cmp	r3, #0
  405baa:	d04b      	beq.n	405c44 <__swbuf_r+0xa8>
  405bac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405bb0:	69a3      	ldr	r3, [r4, #24]
  405bb2:	60a3      	str	r3, [r4, #8]
  405bb4:	b291      	uxth	r1, r2
  405bb6:	0708      	lsls	r0, r1, #28
  405bb8:	d539      	bpl.n	405c2e <__swbuf_r+0x92>
  405bba:	6923      	ldr	r3, [r4, #16]
  405bbc:	2b00      	cmp	r3, #0
  405bbe:	d036      	beq.n	405c2e <__swbuf_r+0x92>
  405bc0:	b2ed      	uxtb	r5, r5
  405bc2:	0489      	lsls	r1, r1, #18
  405bc4:	462f      	mov	r7, r5
  405bc6:	d515      	bpl.n	405bf4 <__swbuf_r+0x58>
  405bc8:	6822      	ldr	r2, [r4, #0]
  405bca:	6961      	ldr	r1, [r4, #20]
  405bcc:	1ad3      	subs	r3, r2, r3
  405bce:	428b      	cmp	r3, r1
  405bd0:	da1c      	bge.n	405c0c <__swbuf_r+0x70>
  405bd2:	3301      	adds	r3, #1
  405bd4:	68a1      	ldr	r1, [r4, #8]
  405bd6:	1c50      	adds	r0, r2, #1
  405bd8:	3901      	subs	r1, #1
  405bda:	60a1      	str	r1, [r4, #8]
  405bdc:	6020      	str	r0, [r4, #0]
  405bde:	7015      	strb	r5, [r2, #0]
  405be0:	6962      	ldr	r2, [r4, #20]
  405be2:	429a      	cmp	r2, r3
  405be4:	d01a      	beq.n	405c1c <__swbuf_r+0x80>
  405be6:	89a3      	ldrh	r3, [r4, #12]
  405be8:	07db      	lsls	r3, r3, #31
  405bea:	d501      	bpl.n	405bf0 <__swbuf_r+0x54>
  405bec:	2d0a      	cmp	r5, #10
  405bee:	d015      	beq.n	405c1c <__swbuf_r+0x80>
  405bf0:	4638      	mov	r0, r7
  405bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405bf4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  405bf6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405bfa:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  405bfe:	81a2      	strh	r2, [r4, #12]
  405c00:	6822      	ldr	r2, [r4, #0]
  405c02:	6661      	str	r1, [r4, #100]	; 0x64
  405c04:	6961      	ldr	r1, [r4, #20]
  405c06:	1ad3      	subs	r3, r2, r3
  405c08:	428b      	cmp	r3, r1
  405c0a:	dbe2      	blt.n	405bd2 <__swbuf_r+0x36>
  405c0c:	4621      	mov	r1, r4
  405c0e:	4630      	mov	r0, r6
  405c10:	f7fe ff64 	bl	404adc <_fflush_r>
  405c14:	b940      	cbnz	r0, 405c28 <__swbuf_r+0x8c>
  405c16:	6822      	ldr	r2, [r4, #0]
  405c18:	2301      	movs	r3, #1
  405c1a:	e7db      	b.n	405bd4 <__swbuf_r+0x38>
  405c1c:	4621      	mov	r1, r4
  405c1e:	4630      	mov	r0, r6
  405c20:	f7fe ff5c 	bl	404adc <_fflush_r>
  405c24:	2800      	cmp	r0, #0
  405c26:	d0e3      	beq.n	405bf0 <__swbuf_r+0x54>
  405c28:	f04f 37ff 	mov.w	r7, #4294967295
  405c2c:	e7e0      	b.n	405bf0 <__swbuf_r+0x54>
  405c2e:	4621      	mov	r1, r4
  405c30:	4630      	mov	r0, r6
  405c32:	f7fe fe3f 	bl	4048b4 <__swsetup_r>
  405c36:	2800      	cmp	r0, #0
  405c38:	d1f6      	bne.n	405c28 <__swbuf_r+0x8c>
  405c3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405c3e:	6923      	ldr	r3, [r4, #16]
  405c40:	b291      	uxth	r1, r2
  405c42:	e7bd      	b.n	405bc0 <__swbuf_r+0x24>
  405c44:	f7fe ffa2 	bl	404b8c <__sinit>
  405c48:	e7b0      	b.n	405bac <__swbuf_r+0x10>
  405c4a:	bf00      	nop

00405c4c <_wcrtomb_r>:
  405c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  405c4e:	4606      	mov	r6, r0
  405c50:	b085      	sub	sp, #20
  405c52:	461f      	mov	r7, r3
  405c54:	b189      	cbz	r1, 405c7a <_wcrtomb_r+0x2e>
  405c56:	4c10      	ldr	r4, [pc, #64]	; (405c98 <_wcrtomb_r+0x4c>)
  405c58:	4d10      	ldr	r5, [pc, #64]	; (405c9c <_wcrtomb_r+0x50>)
  405c5a:	6824      	ldr	r4, [r4, #0]
  405c5c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  405c5e:	2c00      	cmp	r4, #0
  405c60:	bf08      	it	eq
  405c62:	462c      	moveq	r4, r5
  405c64:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  405c68:	47a0      	blx	r4
  405c6a:	1c43      	adds	r3, r0, #1
  405c6c:	d103      	bne.n	405c76 <_wcrtomb_r+0x2a>
  405c6e:	2200      	movs	r2, #0
  405c70:	238a      	movs	r3, #138	; 0x8a
  405c72:	603a      	str	r2, [r7, #0]
  405c74:	6033      	str	r3, [r6, #0]
  405c76:	b005      	add	sp, #20
  405c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405c7a:	460c      	mov	r4, r1
  405c7c:	4906      	ldr	r1, [pc, #24]	; (405c98 <_wcrtomb_r+0x4c>)
  405c7e:	4a07      	ldr	r2, [pc, #28]	; (405c9c <_wcrtomb_r+0x50>)
  405c80:	6809      	ldr	r1, [r1, #0]
  405c82:	6b49      	ldr	r1, [r1, #52]	; 0x34
  405c84:	2900      	cmp	r1, #0
  405c86:	bf08      	it	eq
  405c88:	4611      	moveq	r1, r2
  405c8a:	4622      	mov	r2, r4
  405c8c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  405c90:	a901      	add	r1, sp, #4
  405c92:	47a0      	blx	r4
  405c94:	e7e9      	b.n	405c6a <_wcrtomb_r+0x1e>
  405c96:	bf00      	nop
  405c98:	20400040 	.word	0x20400040
  405c9c:	20400884 	.word	0x20400884

00405ca0 <__ascii_wctomb>:
  405ca0:	b121      	cbz	r1, 405cac <__ascii_wctomb+0xc>
  405ca2:	2aff      	cmp	r2, #255	; 0xff
  405ca4:	d804      	bhi.n	405cb0 <__ascii_wctomb+0x10>
  405ca6:	700a      	strb	r2, [r1, #0]
  405ca8:	2001      	movs	r0, #1
  405caa:	4770      	bx	lr
  405cac:	4608      	mov	r0, r1
  405cae:	4770      	bx	lr
  405cb0:	238a      	movs	r3, #138	; 0x8a
  405cb2:	6003      	str	r3, [r0, #0]
  405cb4:	f04f 30ff 	mov.w	r0, #4294967295
  405cb8:	4770      	bx	lr
  405cba:	bf00      	nop

00405cbc <_write_r>:
  405cbc:	b570      	push	{r4, r5, r6, lr}
  405cbe:	460d      	mov	r5, r1
  405cc0:	4c08      	ldr	r4, [pc, #32]	; (405ce4 <_write_r+0x28>)
  405cc2:	4611      	mov	r1, r2
  405cc4:	4606      	mov	r6, r0
  405cc6:	461a      	mov	r2, r3
  405cc8:	4628      	mov	r0, r5
  405cca:	2300      	movs	r3, #0
  405ccc:	6023      	str	r3, [r4, #0]
  405cce:	f7fb fc51 	bl	401574 <_write>
  405cd2:	1c43      	adds	r3, r0, #1
  405cd4:	d000      	beq.n	405cd8 <_write_r+0x1c>
  405cd6:	bd70      	pop	{r4, r5, r6, pc}
  405cd8:	6823      	ldr	r3, [r4, #0]
  405cda:	2b00      	cmp	r3, #0
  405cdc:	d0fb      	beq.n	405cd6 <_write_r+0x1a>
  405cde:	6033      	str	r3, [r6, #0]
  405ce0:	bd70      	pop	{r4, r5, r6, pc}
  405ce2:	bf00      	nop
  405ce4:	20403204 	.word	0x20403204

00405ce8 <__register_exitproc>:
  405ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405cec:	4d2c      	ldr	r5, [pc, #176]	; (405da0 <__register_exitproc+0xb8>)
  405cee:	4606      	mov	r6, r0
  405cf0:	6828      	ldr	r0, [r5, #0]
  405cf2:	4698      	mov	r8, r3
  405cf4:	460f      	mov	r7, r1
  405cf6:	4691      	mov	r9, r2
  405cf8:	f7ff fb08 	bl	40530c <__retarget_lock_acquire_recursive>
  405cfc:	4b29      	ldr	r3, [pc, #164]	; (405da4 <__register_exitproc+0xbc>)
  405cfe:	681c      	ldr	r4, [r3, #0]
  405d00:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  405d04:	2b00      	cmp	r3, #0
  405d06:	d03e      	beq.n	405d86 <__register_exitproc+0x9e>
  405d08:	685a      	ldr	r2, [r3, #4]
  405d0a:	2a1f      	cmp	r2, #31
  405d0c:	dc1c      	bgt.n	405d48 <__register_exitproc+0x60>
  405d0e:	f102 0e01 	add.w	lr, r2, #1
  405d12:	b176      	cbz	r6, 405d32 <__register_exitproc+0x4a>
  405d14:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  405d18:	2401      	movs	r4, #1
  405d1a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  405d1e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  405d22:	4094      	lsls	r4, r2
  405d24:	4320      	orrs	r0, r4
  405d26:	2e02      	cmp	r6, #2
  405d28:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  405d2c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  405d30:	d023      	beq.n	405d7a <__register_exitproc+0x92>
  405d32:	3202      	adds	r2, #2
  405d34:	f8c3 e004 	str.w	lr, [r3, #4]
  405d38:	6828      	ldr	r0, [r5, #0]
  405d3a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  405d3e:	f7ff fae7 	bl	405310 <__retarget_lock_release_recursive>
  405d42:	2000      	movs	r0, #0
  405d44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405d48:	4b17      	ldr	r3, [pc, #92]	; (405da8 <__register_exitproc+0xc0>)
  405d4a:	b30b      	cbz	r3, 405d90 <__register_exitproc+0xa8>
  405d4c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  405d50:	f7fd fb64 	bl	40341c <malloc>
  405d54:	4603      	mov	r3, r0
  405d56:	b1d8      	cbz	r0, 405d90 <__register_exitproc+0xa8>
  405d58:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  405d5c:	6002      	str	r2, [r0, #0]
  405d5e:	2100      	movs	r1, #0
  405d60:	6041      	str	r1, [r0, #4]
  405d62:	460a      	mov	r2, r1
  405d64:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  405d68:	f04f 0e01 	mov.w	lr, #1
  405d6c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  405d70:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  405d74:	2e00      	cmp	r6, #0
  405d76:	d0dc      	beq.n	405d32 <__register_exitproc+0x4a>
  405d78:	e7cc      	b.n	405d14 <__register_exitproc+0x2c>
  405d7a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  405d7e:	430c      	orrs	r4, r1
  405d80:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  405d84:	e7d5      	b.n	405d32 <__register_exitproc+0x4a>
  405d86:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  405d8a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  405d8e:	e7bb      	b.n	405d08 <__register_exitproc+0x20>
  405d90:	6828      	ldr	r0, [r5, #0]
  405d92:	f7ff fabd 	bl	405310 <__retarget_lock_release_recursive>
  405d96:	f04f 30ff 	mov.w	r0, #4294967295
  405d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405d9e:	bf00      	nop
  405da0:	20400880 	.word	0x20400880
  405da4:	00407328 	.word	0x00407328
  405da8:	0040341d 	.word	0x0040341d

00405dac <_close_r>:
  405dac:	b538      	push	{r3, r4, r5, lr}
  405dae:	4c07      	ldr	r4, [pc, #28]	; (405dcc <_close_r+0x20>)
  405db0:	2300      	movs	r3, #0
  405db2:	4605      	mov	r5, r0
  405db4:	4608      	mov	r0, r1
  405db6:	6023      	str	r3, [r4, #0]
  405db8:	f7fc fe50 	bl	402a5c <_close>
  405dbc:	1c43      	adds	r3, r0, #1
  405dbe:	d000      	beq.n	405dc2 <_close_r+0x16>
  405dc0:	bd38      	pop	{r3, r4, r5, pc}
  405dc2:	6823      	ldr	r3, [r4, #0]
  405dc4:	2b00      	cmp	r3, #0
  405dc6:	d0fb      	beq.n	405dc0 <_close_r+0x14>
  405dc8:	602b      	str	r3, [r5, #0]
  405dca:	bd38      	pop	{r3, r4, r5, pc}
  405dcc:	20403204 	.word	0x20403204

00405dd0 <_fclose_r>:
  405dd0:	b570      	push	{r4, r5, r6, lr}
  405dd2:	b159      	cbz	r1, 405dec <_fclose_r+0x1c>
  405dd4:	4605      	mov	r5, r0
  405dd6:	460c      	mov	r4, r1
  405dd8:	b110      	cbz	r0, 405de0 <_fclose_r+0x10>
  405dda:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405ddc:	2b00      	cmp	r3, #0
  405dde:	d03c      	beq.n	405e5a <_fclose_r+0x8a>
  405de0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405de2:	07d8      	lsls	r0, r3, #31
  405de4:	d505      	bpl.n	405df2 <_fclose_r+0x22>
  405de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405dea:	b92b      	cbnz	r3, 405df8 <_fclose_r+0x28>
  405dec:	2600      	movs	r6, #0
  405dee:	4630      	mov	r0, r6
  405df0:	bd70      	pop	{r4, r5, r6, pc}
  405df2:	89a3      	ldrh	r3, [r4, #12]
  405df4:	0599      	lsls	r1, r3, #22
  405df6:	d53c      	bpl.n	405e72 <_fclose_r+0xa2>
  405df8:	4621      	mov	r1, r4
  405dfa:	4628      	mov	r0, r5
  405dfc:	f7fe fdce 	bl	40499c <__sflush_r>
  405e00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  405e02:	4606      	mov	r6, r0
  405e04:	b133      	cbz	r3, 405e14 <_fclose_r+0x44>
  405e06:	69e1      	ldr	r1, [r4, #28]
  405e08:	4628      	mov	r0, r5
  405e0a:	4798      	blx	r3
  405e0c:	2800      	cmp	r0, #0
  405e0e:	bfb8      	it	lt
  405e10:	f04f 36ff 	movlt.w	r6, #4294967295
  405e14:	89a3      	ldrh	r3, [r4, #12]
  405e16:	061a      	lsls	r2, r3, #24
  405e18:	d422      	bmi.n	405e60 <_fclose_r+0x90>
  405e1a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405e1c:	b141      	cbz	r1, 405e30 <_fclose_r+0x60>
  405e1e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405e22:	4299      	cmp	r1, r3
  405e24:	d002      	beq.n	405e2c <_fclose_r+0x5c>
  405e26:	4628      	mov	r0, r5
  405e28:	f7fe ffd6 	bl	404dd8 <_free_r>
  405e2c:	2300      	movs	r3, #0
  405e2e:	6323      	str	r3, [r4, #48]	; 0x30
  405e30:	6c61      	ldr	r1, [r4, #68]	; 0x44
  405e32:	b121      	cbz	r1, 405e3e <_fclose_r+0x6e>
  405e34:	4628      	mov	r0, r5
  405e36:	f7fe ffcf 	bl	404dd8 <_free_r>
  405e3a:	2300      	movs	r3, #0
  405e3c:	6463      	str	r3, [r4, #68]	; 0x44
  405e3e:	f7fe fed1 	bl	404be4 <__sfp_lock_acquire>
  405e42:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405e44:	2200      	movs	r2, #0
  405e46:	07db      	lsls	r3, r3, #31
  405e48:	81a2      	strh	r2, [r4, #12]
  405e4a:	d50e      	bpl.n	405e6a <_fclose_r+0x9a>
  405e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405e4e:	f7ff fa5b 	bl	405308 <__retarget_lock_close_recursive>
  405e52:	f7fe fecd 	bl	404bf0 <__sfp_lock_release>
  405e56:	4630      	mov	r0, r6
  405e58:	bd70      	pop	{r4, r5, r6, pc}
  405e5a:	f7fe fe97 	bl	404b8c <__sinit>
  405e5e:	e7bf      	b.n	405de0 <_fclose_r+0x10>
  405e60:	6921      	ldr	r1, [r4, #16]
  405e62:	4628      	mov	r0, r5
  405e64:	f7fe ffb8 	bl	404dd8 <_free_r>
  405e68:	e7d7      	b.n	405e1a <_fclose_r+0x4a>
  405e6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405e6c:	f7ff fa50 	bl	405310 <__retarget_lock_release_recursive>
  405e70:	e7ec      	b.n	405e4c <_fclose_r+0x7c>
  405e72:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405e74:	f7ff fa4a 	bl	40530c <__retarget_lock_acquire_recursive>
  405e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405e7c:	2b00      	cmp	r3, #0
  405e7e:	d1bb      	bne.n	405df8 <_fclose_r+0x28>
  405e80:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405e82:	f016 0601 	ands.w	r6, r6, #1
  405e86:	d1b1      	bne.n	405dec <_fclose_r+0x1c>
  405e88:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405e8a:	f7ff fa41 	bl	405310 <__retarget_lock_release_recursive>
  405e8e:	4630      	mov	r0, r6
  405e90:	bd70      	pop	{r4, r5, r6, pc}
  405e92:	bf00      	nop

00405e94 <_fstat_r>:
  405e94:	b538      	push	{r3, r4, r5, lr}
  405e96:	460b      	mov	r3, r1
  405e98:	4c07      	ldr	r4, [pc, #28]	; (405eb8 <_fstat_r+0x24>)
  405e9a:	4605      	mov	r5, r0
  405e9c:	4611      	mov	r1, r2
  405e9e:	4618      	mov	r0, r3
  405ea0:	2300      	movs	r3, #0
  405ea2:	6023      	str	r3, [r4, #0]
  405ea4:	f7fc fddd 	bl	402a62 <_fstat>
  405ea8:	1c43      	adds	r3, r0, #1
  405eaa:	d000      	beq.n	405eae <_fstat_r+0x1a>
  405eac:	bd38      	pop	{r3, r4, r5, pc}
  405eae:	6823      	ldr	r3, [r4, #0]
  405eb0:	2b00      	cmp	r3, #0
  405eb2:	d0fb      	beq.n	405eac <_fstat_r+0x18>
  405eb4:	602b      	str	r3, [r5, #0]
  405eb6:	bd38      	pop	{r3, r4, r5, pc}
  405eb8:	20403204 	.word	0x20403204

00405ebc <_isatty_r>:
  405ebc:	b538      	push	{r3, r4, r5, lr}
  405ebe:	4c07      	ldr	r4, [pc, #28]	; (405edc <_isatty_r+0x20>)
  405ec0:	2300      	movs	r3, #0
  405ec2:	4605      	mov	r5, r0
  405ec4:	4608      	mov	r0, r1
  405ec6:	6023      	str	r3, [r4, #0]
  405ec8:	f7fc fdd0 	bl	402a6c <_isatty>
  405ecc:	1c43      	adds	r3, r0, #1
  405ece:	d000      	beq.n	405ed2 <_isatty_r+0x16>
  405ed0:	bd38      	pop	{r3, r4, r5, pc}
  405ed2:	6823      	ldr	r3, [r4, #0]
  405ed4:	2b00      	cmp	r3, #0
  405ed6:	d0fb      	beq.n	405ed0 <_isatty_r+0x14>
  405ed8:	602b      	str	r3, [r5, #0]
  405eda:	bd38      	pop	{r3, r4, r5, pc}
  405edc:	20403204 	.word	0x20403204

00405ee0 <_lseek_r>:
  405ee0:	b570      	push	{r4, r5, r6, lr}
  405ee2:	460d      	mov	r5, r1
  405ee4:	4c08      	ldr	r4, [pc, #32]	; (405f08 <_lseek_r+0x28>)
  405ee6:	4611      	mov	r1, r2
  405ee8:	4606      	mov	r6, r0
  405eea:	461a      	mov	r2, r3
  405eec:	4628      	mov	r0, r5
  405eee:	2300      	movs	r3, #0
  405ef0:	6023      	str	r3, [r4, #0]
  405ef2:	f7fc fdbd 	bl	402a70 <_lseek>
  405ef6:	1c43      	adds	r3, r0, #1
  405ef8:	d000      	beq.n	405efc <_lseek_r+0x1c>
  405efa:	bd70      	pop	{r4, r5, r6, pc}
  405efc:	6823      	ldr	r3, [r4, #0]
  405efe:	2b00      	cmp	r3, #0
  405f00:	d0fb      	beq.n	405efa <_lseek_r+0x1a>
  405f02:	6033      	str	r3, [r6, #0]
  405f04:	bd70      	pop	{r4, r5, r6, pc}
  405f06:	bf00      	nop
  405f08:	20403204 	.word	0x20403204

00405f0c <_read_r>:
  405f0c:	b570      	push	{r4, r5, r6, lr}
  405f0e:	460d      	mov	r5, r1
  405f10:	4c08      	ldr	r4, [pc, #32]	; (405f34 <_read_r+0x28>)
  405f12:	4611      	mov	r1, r2
  405f14:	4606      	mov	r6, r0
  405f16:	461a      	mov	r2, r3
  405f18:	4628      	mov	r0, r5
  405f1a:	2300      	movs	r3, #0
  405f1c:	6023      	str	r3, [r4, #0]
  405f1e:	f7fb fb0b 	bl	401538 <_read>
  405f22:	1c43      	adds	r3, r0, #1
  405f24:	d000      	beq.n	405f28 <_read_r+0x1c>
  405f26:	bd70      	pop	{r4, r5, r6, pc}
  405f28:	6823      	ldr	r3, [r4, #0]
  405f2a:	2b00      	cmp	r3, #0
  405f2c:	d0fb      	beq.n	405f26 <_read_r+0x1a>
  405f2e:	6033      	str	r3, [r6, #0]
  405f30:	bd70      	pop	{r4, r5, r6, pc}
  405f32:	bf00      	nop
  405f34:	20403204 	.word	0x20403204

00405f38 <__aeabi_uldivmod>:
  405f38:	b953      	cbnz	r3, 405f50 <__aeabi_uldivmod+0x18>
  405f3a:	b94a      	cbnz	r2, 405f50 <__aeabi_uldivmod+0x18>
  405f3c:	2900      	cmp	r1, #0
  405f3e:	bf08      	it	eq
  405f40:	2800      	cmpeq	r0, #0
  405f42:	bf1c      	itt	ne
  405f44:	f04f 31ff 	movne.w	r1, #4294967295
  405f48:	f04f 30ff 	movne.w	r0, #4294967295
  405f4c:	f000 b97a 	b.w	406244 <__aeabi_idiv0>
  405f50:	f1ad 0c08 	sub.w	ip, sp, #8
  405f54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  405f58:	f000 f806 	bl	405f68 <__udivmoddi4>
  405f5c:	f8dd e004 	ldr.w	lr, [sp, #4]
  405f60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405f64:	b004      	add	sp, #16
  405f66:	4770      	bx	lr

00405f68 <__udivmoddi4>:
  405f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405f6c:	468c      	mov	ip, r1
  405f6e:	460d      	mov	r5, r1
  405f70:	4604      	mov	r4, r0
  405f72:	9e08      	ldr	r6, [sp, #32]
  405f74:	2b00      	cmp	r3, #0
  405f76:	d151      	bne.n	40601c <__udivmoddi4+0xb4>
  405f78:	428a      	cmp	r2, r1
  405f7a:	4617      	mov	r7, r2
  405f7c:	d96d      	bls.n	40605a <__udivmoddi4+0xf2>
  405f7e:	fab2 fe82 	clz	lr, r2
  405f82:	f1be 0f00 	cmp.w	lr, #0
  405f86:	d00b      	beq.n	405fa0 <__udivmoddi4+0x38>
  405f88:	f1ce 0c20 	rsb	ip, lr, #32
  405f8c:	fa01 f50e 	lsl.w	r5, r1, lr
  405f90:	fa20 fc0c 	lsr.w	ip, r0, ip
  405f94:	fa02 f70e 	lsl.w	r7, r2, lr
  405f98:	ea4c 0c05 	orr.w	ip, ip, r5
  405f9c:	fa00 f40e 	lsl.w	r4, r0, lr
  405fa0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  405fa4:	0c25      	lsrs	r5, r4, #16
  405fa6:	fbbc f8fa 	udiv	r8, ip, sl
  405faa:	fa1f f987 	uxth.w	r9, r7
  405fae:	fb0a cc18 	mls	ip, sl, r8, ip
  405fb2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  405fb6:	fb08 f309 	mul.w	r3, r8, r9
  405fba:	42ab      	cmp	r3, r5
  405fbc:	d90a      	bls.n	405fd4 <__udivmoddi4+0x6c>
  405fbe:	19ed      	adds	r5, r5, r7
  405fc0:	f108 32ff 	add.w	r2, r8, #4294967295
  405fc4:	f080 8123 	bcs.w	40620e <__udivmoddi4+0x2a6>
  405fc8:	42ab      	cmp	r3, r5
  405fca:	f240 8120 	bls.w	40620e <__udivmoddi4+0x2a6>
  405fce:	f1a8 0802 	sub.w	r8, r8, #2
  405fd2:	443d      	add	r5, r7
  405fd4:	1aed      	subs	r5, r5, r3
  405fd6:	b2a4      	uxth	r4, r4
  405fd8:	fbb5 f0fa 	udiv	r0, r5, sl
  405fdc:	fb0a 5510 	mls	r5, sl, r0, r5
  405fe0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  405fe4:	fb00 f909 	mul.w	r9, r0, r9
  405fe8:	45a1      	cmp	r9, r4
  405fea:	d909      	bls.n	406000 <__udivmoddi4+0x98>
  405fec:	19e4      	adds	r4, r4, r7
  405fee:	f100 33ff 	add.w	r3, r0, #4294967295
  405ff2:	f080 810a 	bcs.w	40620a <__udivmoddi4+0x2a2>
  405ff6:	45a1      	cmp	r9, r4
  405ff8:	f240 8107 	bls.w	40620a <__udivmoddi4+0x2a2>
  405ffc:	3802      	subs	r0, #2
  405ffe:	443c      	add	r4, r7
  406000:	eba4 0409 	sub.w	r4, r4, r9
  406004:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406008:	2100      	movs	r1, #0
  40600a:	2e00      	cmp	r6, #0
  40600c:	d061      	beq.n	4060d2 <__udivmoddi4+0x16a>
  40600e:	fa24 f40e 	lsr.w	r4, r4, lr
  406012:	2300      	movs	r3, #0
  406014:	6034      	str	r4, [r6, #0]
  406016:	6073      	str	r3, [r6, #4]
  406018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40601c:	428b      	cmp	r3, r1
  40601e:	d907      	bls.n	406030 <__udivmoddi4+0xc8>
  406020:	2e00      	cmp	r6, #0
  406022:	d054      	beq.n	4060ce <__udivmoddi4+0x166>
  406024:	2100      	movs	r1, #0
  406026:	e886 0021 	stmia.w	r6, {r0, r5}
  40602a:	4608      	mov	r0, r1
  40602c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406030:	fab3 f183 	clz	r1, r3
  406034:	2900      	cmp	r1, #0
  406036:	f040 808e 	bne.w	406156 <__udivmoddi4+0x1ee>
  40603a:	42ab      	cmp	r3, r5
  40603c:	d302      	bcc.n	406044 <__udivmoddi4+0xdc>
  40603e:	4282      	cmp	r2, r0
  406040:	f200 80fa 	bhi.w	406238 <__udivmoddi4+0x2d0>
  406044:	1a84      	subs	r4, r0, r2
  406046:	eb65 0503 	sbc.w	r5, r5, r3
  40604a:	2001      	movs	r0, #1
  40604c:	46ac      	mov	ip, r5
  40604e:	2e00      	cmp	r6, #0
  406050:	d03f      	beq.n	4060d2 <__udivmoddi4+0x16a>
  406052:	e886 1010 	stmia.w	r6, {r4, ip}
  406056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40605a:	b912      	cbnz	r2, 406062 <__udivmoddi4+0xfa>
  40605c:	2701      	movs	r7, #1
  40605e:	fbb7 f7f2 	udiv	r7, r7, r2
  406062:	fab7 fe87 	clz	lr, r7
  406066:	f1be 0f00 	cmp.w	lr, #0
  40606a:	d134      	bne.n	4060d6 <__udivmoddi4+0x16e>
  40606c:	1beb      	subs	r3, r5, r7
  40606e:	0c3a      	lsrs	r2, r7, #16
  406070:	fa1f fc87 	uxth.w	ip, r7
  406074:	2101      	movs	r1, #1
  406076:	fbb3 f8f2 	udiv	r8, r3, r2
  40607a:	0c25      	lsrs	r5, r4, #16
  40607c:	fb02 3318 	mls	r3, r2, r8, r3
  406080:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406084:	fb0c f308 	mul.w	r3, ip, r8
  406088:	42ab      	cmp	r3, r5
  40608a:	d907      	bls.n	40609c <__udivmoddi4+0x134>
  40608c:	19ed      	adds	r5, r5, r7
  40608e:	f108 30ff 	add.w	r0, r8, #4294967295
  406092:	d202      	bcs.n	40609a <__udivmoddi4+0x132>
  406094:	42ab      	cmp	r3, r5
  406096:	f200 80d1 	bhi.w	40623c <__udivmoddi4+0x2d4>
  40609a:	4680      	mov	r8, r0
  40609c:	1aed      	subs	r5, r5, r3
  40609e:	b2a3      	uxth	r3, r4
  4060a0:	fbb5 f0f2 	udiv	r0, r5, r2
  4060a4:	fb02 5510 	mls	r5, r2, r0, r5
  4060a8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4060ac:	fb0c fc00 	mul.w	ip, ip, r0
  4060b0:	45a4      	cmp	ip, r4
  4060b2:	d907      	bls.n	4060c4 <__udivmoddi4+0x15c>
  4060b4:	19e4      	adds	r4, r4, r7
  4060b6:	f100 33ff 	add.w	r3, r0, #4294967295
  4060ba:	d202      	bcs.n	4060c2 <__udivmoddi4+0x15a>
  4060bc:	45a4      	cmp	ip, r4
  4060be:	f200 80b8 	bhi.w	406232 <__udivmoddi4+0x2ca>
  4060c2:	4618      	mov	r0, r3
  4060c4:	eba4 040c 	sub.w	r4, r4, ip
  4060c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4060cc:	e79d      	b.n	40600a <__udivmoddi4+0xa2>
  4060ce:	4631      	mov	r1, r6
  4060d0:	4630      	mov	r0, r6
  4060d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4060d6:	f1ce 0420 	rsb	r4, lr, #32
  4060da:	fa05 f30e 	lsl.w	r3, r5, lr
  4060de:	fa07 f70e 	lsl.w	r7, r7, lr
  4060e2:	fa20 f804 	lsr.w	r8, r0, r4
  4060e6:	0c3a      	lsrs	r2, r7, #16
  4060e8:	fa25 f404 	lsr.w	r4, r5, r4
  4060ec:	ea48 0803 	orr.w	r8, r8, r3
  4060f0:	fbb4 f1f2 	udiv	r1, r4, r2
  4060f4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4060f8:	fb02 4411 	mls	r4, r2, r1, r4
  4060fc:	fa1f fc87 	uxth.w	ip, r7
  406100:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  406104:	fb01 f30c 	mul.w	r3, r1, ip
  406108:	42ab      	cmp	r3, r5
  40610a:	fa00 f40e 	lsl.w	r4, r0, lr
  40610e:	d909      	bls.n	406124 <__udivmoddi4+0x1bc>
  406110:	19ed      	adds	r5, r5, r7
  406112:	f101 30ff 	add.w	r0, r1, #4294967295
  406116:	f080 808a 	bcs.w	40622e <__udivmoddi4+0x2c6>
  40611a:	42ab      	cmp	r3, r5
  40611c:	f240 8087 	bls.w	40622e <__udivmoddi4+0x2c6>
  406120:	3902      	subs	r1, #2
  406122:	443d      	add	r5, r7
  406124:	1aeb      	subs	r3, r5, r3
  406126:	fa1f f588 	uxth.w	r5, r8
  40612a:	fbb3 f0f2 	udiv	r0, r3, r2
  40612e:	fb02 3310 	mls	r3, r2, r0, r3
  406132:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406136:	fb00 f30c 	mul.w	r3, r0, ip
  40613a:	42ab      	cmp	r3, r5
  40613c:	d907      	bls.n	40614e <__udivmoddi4+0x1e6>
  40613e:	19ed      	adds	r5, r5, r7
  406140:	f100 38ff 	add.w	r8, r0, #4294967295
  406144:	d26f      	bcs.n	406226 <__udivmoddi4+0x2be>
  406146:	42ab      	cmp	r3, r5
  406148:	d96d      	bls.n	406226 <__udivmoddi4+0x2be>
  40614a:	3802      	subs	r0, #2
  40614c:	443d      	add	r5, r7
  40614e:	1aeb      	subs	r3, r5, r3
  406150:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  406154:	e78f      	b.n	406076 <__udivmoddi4+0x10e>
  406156:	f1c1 0720 	rsb	r7, r1, #32
  40615a:	fa22 f807 	lsr.w	r8, r2, r7
  40615e:	408b      	lsls	r3, r1
  406160:	fa05 f401 	lsl.w	r4, r5, r1
  406164:	ea48 0303 	orr.w	r3, r8, r3
  406168:	fa20 fe07 	lsr.w	lr, r0, r7
  40616c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  406170:	40fd      	lsrs	r5, r7
  406172:	ea4e 0e04 	orr.w	lr, lr, r4
  406176:	fbb5 f9fc 	udiv	r9, r5, ip
  40617a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40617e:	fb0c 5519 	mls	r5, ip, r9, r5
  406182:	fa1f f883 	uxth.w	r8, r3
  406186:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40618a:	fb09 f408 	mul.w	r4, r9, r8
  40618e:	42ac      	cmp	r4, r5
  406190:	fa02 f201 	lsl.w	r2, r2, r1
  406194:	fa00 fa01 	lsl.w	sl, r0, r1
  406198:	d908      	bls.n	4061ac <__udivmoddi4+0x244>
  40619a:	18ed      	adds	r5, r5, r3
  40619c:	f109 30ff 	add.w	r0, r9, #4294967295
  4061a0:	d243      	bcs.n	40622a <__udivmoddi4+0x2c2>
  4061a2:	42ac      	cmp	r4, r5
  4061a4:	d941      	bls.n	40622a <__udivmoddi4+0x2c2>
  4061a6:	f1a9 0902 	sub.w	r9, r9, #2
  4061aa:	441d      	add	r5, r3
  4061ac:	1b2d      	subs	r5, r5, r4
  4061ae:	fa1f fe8e 	uxth.w	lr, lr
  4061b2:	fbb5 f0fc 	udiv	r0, r5, ip
  4061b6:	fb0c 5510 	mls	r5, ip, r0, r5
  4061ba:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4061be:	fb00 f808 	mul.w	r8, r0, r8
  4061c2:	45a0      	cmp	r8, r4
  4061c4:	d907      	bls.n	4061d6 <__udivmoddi4+0x26e>
  4061c6:	18e4      	adds	r4, r4, r3
  4061c8:	f100 35ff 	add.w	r5, r0, #4294967295
  4061cc:	d229      	bcs.n	406222 <__udivmoddi4+0x2ba>
  4061ce:	45a0      	cmp	r8, r4
  4061d0:	d927      	bls.n	406222 <__udivmoddi4+0x2ba>
  4061d2:	3802      	subs	r0, #2
  4061d4:	441c      	add	r4, r3
  4061d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4061da:	eba4 0408 	sub.w	r4, r4, r8
  4061de:	fba0 8902 	umull	r8, r9, r0, r2
  4061e2:	454c      	cmp	r4, r9
  4061e4:	46c6      	mov	lr, r8
  4061e6:	464d      	mov	r5, r9
  4061e8:	d315      	bcc.n	406216 <__udivmoddi4+0x2ae>
  4061ea:	d012      	beq.n	406212 <__udivmoddi4+0x2aa>
  4061ec:	b156      	cbz	r6, 406204 <__udivmoddi4+0x29c>
  4061ee:	ebba 030e 	subs.w	r3, sl, lr
  4061f2:	eb64 0405 	sbc.w	r4, r4, r5
  4061f6:	fa04 f707 	lsl.w	r7, r4, r7
  4061fa:	40cb      	lsrs	r3, r1
  4061fc:	431f      	orrs	r7, r3
  4061fe:	40cc      	lsrs	r4, r1
  406200:	6037      	str	r7, [r6, #0]
  406202:	6074      	str	r4, [r6, #4]
  406204:	2100      	movs	r1, #0
  406206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40620a:	4618      	mov	r0, r3
  40620c:	e6f8      	b.n	406000 <__udivmoddi4+0x98>
  40620e:	4690      	mov	r8, r2
  406210:	e6e0      	b.n	405fd4 <__udivmoddi4+0x6c>
  406212:	45c2      	cmp	sl, r8
  406214:	d2ea      	bcs.n	4061ec <__udivmoddi4+0x284>
  406216:	ebb8 0e02 	subs.w	lr, r8, r2
  40621a:	eb69 0503 	sbc.w	r5, r9, r3
  40621e:	3801      	subs	r0, #1
  406220:	e7e4      	b.n	4061ec <__udivmoddi4+0x284>
  406222:	4628      	mov	r0, r5
  406224:	e7d7      	b.n	4061d6 <__udivmoddi4+0x26e>
  406226:	4640      	mov	r0, r8
  406228:	e791      	b.n	40614e <__udivmoddi4+0x1e6>
  40622a:	4681      	mov	r9, r0
  40622c:	e7be      	b.n	4061ac <__udivmoddi4+0x244>
  40622e:	4601      	mov	r1, r0
  406230:	e778      	b.n	406124 <__udivmoddi4+0x1bc>
  406232:	3802      	subs	r0, #2
  406234:	443c      	add	r4, r7
  406236:	e745      	b.n	4060c4 <__udivmoddi4+0x15c>
  406238:	4608      	mov	r0, r1
  40623a:	e708      	b.n	40604e <__udivmoddi4+0xe6>
  40623c:	f1a8 0802 	sub.w	r8, r8, #2
  406240:	443d      	add	r5, r7
  406242:	e72b      	b.n	40609c <__udivmoddi4+0x134>

00406244 <__aeabi_idiv0>:
  406244:	4770      	bx	lr
  406246:	bf00      	nop
  406248:	092d452d 	.word	0x092d452d
  40624c:	39384d57 	.word	0x39384d57
  406250:	69203430 	.word	0x69203430
  406254:	6974696e 	.word	0x6974696e
  406258:	7a696c61 	.word	0x7a696c61
  40625c:	6f697461 	.word	0x6f697461
  406260:	6166206e 	.word	0x6166206e
  406264:	64656c69 	.word	0x64656c69
  406268:	00000d2e 	.word	0x00000d2e
  40626c:	39384d57 	.word	0x39384d57
  406270:	6e203430 	.word	0x6e203430
  406274:	6620746f 	.word	0x6620746f
  406278:	646e756f 	.word	0x646e756f
  40627c:	000d0a21 	.word	0x000d0a21

00406280 <sysfont_glyphs>:
	...
  4062a4:	00300000 00300030 00300030 00300030     ..0.0.0.0.0.0.0.
  4062b4:	00300000 00000030 00000000 00000000     ..0.0...........
  4062c4:	006c0000 006c006c 0000006c 00000000     ..l.l.l.l.......
	...
  4062e8:	00480048 004800fc 00480048 004800fc     H.H...H.H.H...H.
  4062f8:	00000048 00000000 00000000 00100000     H...............
  406308:	003c0010 00300040 00040008 00100078     ..<.@.0.....x...
  406318:	00000010 00000000 00000000 00000000     ................
  406328:	00a4007c 004800a8 00140010 004a002a     |.....H.....*.J.
  406338:	00000044 00000000 00000000 00700000     D.............p.
  406348:	00880088 00700088 008a0088 008c008a     ......p.........
  406358:	00000070 00000000 00000000 00100000     p...............
  406368:	00100010 00000000 00000000 00000000     ................
	...
  406384:	00100008 00200010 00200020 00200020     ...... . . . . .
  406394:	00100020 00080010 00000000 00000000      ...............
  4063a4:	00100020 00080010 00080008 00080008      ...............
  4063b4:	00100008 00200010 00000000 00000000     ...... .........
  4063c4:	00280000 007c0010 00280010 00000000     ..(...|...(.....
	...
  4063ec:	00100010 00fe0010 00100010 00000010     ................
	...
  406414:	00180000 00300018 00000020 00000000     ......0. .......
	...
  406430:	00fe0000 00000000 00000000 00000000     ................
	...
  406454:	00180000 00000018 00000000 00000000     ................
  406464:	00000000 00080004 00100008 00200010     .............. .
  406474:	00400020 00000040 00000000 00000000      .@.@...........
  406484:	00780000 00840084 0094008c 00c400a4     ..x.............
  406494:	00840084 00000078 00000000 00000000     ....x...........
  4064a4:	00100000 00500030 00100010 00100010     ....0.P.........
  4064b4:	00100010 0000007c 00000000 00000000     ....|...........
  4064c4:	00700000 00080088 00100008 00200010     ..p........... .
  4064d4:	00400020 000000fc 00000000 00000000      .@.............
  4064e4:	00700000 00080088 00300008 00080008     ..p.......0.....
  4064f4:	00880008 00000070 00000000 00000000     ....p...........
  406504:	00080000 00280018 00480028 00880088     ......(.(.H.....
  406514:	000800fc 00000008 00000000 00000000     ................
  406524:	007c0000 00800080 00c400b8 00040004     ..|.............
  406534:	00840004 00000078 00000000 00000000     ....x...........
  406544:	00380000 00800040 00b00080 008400c8     ..8.@...........
  406554:	00480084 00000030 00000000 00000000     ..H.0...........
  406564:	00fc0000 00040004 00080008 00100010     ................
  406574:	00200020 00000040 00000000 00000000      . .@...........
  406584:	00780000 00840084 00780084 00840084     ..x.......x.....
  406594:	00840084 00000078 00000000 00000000     ....x...........
  4065a4:	00780000 00840084 008c0084 00040074     ..x.........t...
  4065b4:	00100008 000000e0 00000000 00000000     ................
	...
  4065cc:	00300000 00000030 00300000 00000030     ..0.0.....0.0...
	...
  4065ec:	00600000 00000060 00600000 00c00060     ..`.`.....`.`...
  4065fc:	00000080 00000000 00000000 00000000     ................
  40660c:	00180004 00800060 00180060 00000004     ....`...`.......
	...
  40662c:	007e0000 00000000 0000007e 00000000     ..~.....~.......
	...
  40664c:	00300040 0002000c 0030000c 00000040     @.0.......0.@...
	...
  406664:	00700000 00080088 00100008 00200020     ..p......... . .
  406674:	00200000 00000020 00000000 00000000     .. . ...........
  406684:	00000000 003c0000 00ba0042 00aa00aa     ......<.B.......
  406694:	00bc00aa 003c0040 00000000 00000000     ....@.<.........
  4066a4:	00100000 00280010 00280028 007c0044     ......(.(.(.D.|.
  4066b4:	00820044 00000082 00000000 00000000     D...............
  4066c4:	00f00000 00880088 00f00088 00880088     ................
  4066d4:	00880088 000000f0 00000000 00000000     ................
  4066e4:	00380000 00800044 00800080 00800080     ..8.D...........
  4066f4:	00440080 00000038 00000000 00000000     ..D.8...........
  406704:	00f00000 00840088 00840084 00840084     ................
  406714:	00880084 000000f0 00000000 00000000     ................
  406724:	007c0000 00400040 00780040 00400040     ..|.@.@.@.x.@.@.
  406734:	00400040 0000007c 00000000 00000000     @.@.|...........
  406744:	007c0000 00400040 00400040 00400078     ..|.@.@.@.@.x.@.
  406754:	00400040 00000040 00000000 00000000     @.@.@...........
  406764:	00380000 00800044 00800080 0084009c     ..8.D...........
  406774:	00440084 0000003c 00000000 00000000     ..D.<...........
  406784:	00840000 00840084 00fc0084 00840084     ................
  406794:	00840084 00000084 00000000 00000000     ................
  4067a4:	007c0000 00100010 00100010 00100010     ..|.............
  4067b4:	00100010 0000007c 00000000 00000000     ....|...........
  4067c4:	00f80000 00080008 00080008 00080008     ................
  4067d4:	00100008 000000e0 00000000 00000000     ................
  4067e4:	00840000 00880084 00a00090 008800d0     ................
  4067f4:	00840088 00000084 00000000 00000000     ................
  406804:	00800000 00800080 00800080 00800080     ................
  406814:	00800080 000000fc 00000000 00000000     ................
  406824:	00840000 00cc0084 00b400cc 008400b4     ................
  406834:	00840084 00000084 00000000 00000000     ................
  406844:	00840000 00c400c4 00a400a4 00940094     ................
  406854:	008c008c 00000084 00000000 00000000     ................
  406864:	00300000 00840048 00840084 00840084     ..0.H...........
  406874:	00480084 00000030 00000000 00000000     ..H.0...........
  406884:	00f00000 00840088 00840084 00f00088     ................
  406894:	00800080 00000080 00000000 00000000     ................
  4068a4:	00300000 00840048 00840084 00840084     ..0.H...........
  4068b4:	00480084 00200030 0000001c 00000000     ..H.0. .........
  4068c4:	00f00000 00840088 00880084 009000f0     ................
  4068d4:	00840088 00000084 00000000 00000000     ................
  4068e4:	00780000 00800084 00300040 00040008     ..x.....@.0.....
  4068f4:	00840004 00000078 00000000 00000000     ....x...........
  406904:	00fe0000 00100010 00100010 00100010     ................
  406914:	00100010 00000010 00000000 00000000     ................
  406924:	00840000 00840084 00840084 00840084     ................
  406934:	00840084 00000078 00000000 00000000     ....x...........
  406944:	00820000 00440082 00440044 00280044     ......D.D.D.D.(.
  406954:	00280028 00000010 00000000 00000000     (.(.............
  406964:	00840000 00840084 00b40084 00b400b4     ................
  406974:	00480078 00000048 00000000 00000000     x.H.H...........
  406984:	00820000 00440044 00100028 00280010     ....D.D.(.....(.
  406994:	00440044 00000082 00000000 00000000     D.D.............
  4069a4:	00820000 00440044 00280028 00100028     ....D.D.(.(.(...
  4069b4:	00100010 00000010 00000000 00000000     ................
  4069c4:	00fc0000 00080004 00100008 00200010     .............. .
  4069d4:	00400040 000000fe 00000000 00000000     @.@.............
  4069e4:	008000e0 00800080 00800080 00800080     ................
  4069f4:	00800080 00e00080 00000000 00000000     ................
  406a04:	00400000 00200040 00100020 00080010     ..@.@. . .......
  406a14:	00040008 00000004 00000000 00000000     ................
  406a24:	002000e0 00200020 00200020 00200020     .. . . . . . . .
  406a34:	00200020 00e00020 00000000 00000000      . . ...........
  406a44:	00100000 00440028 00000000 00000000     ....(.D.........
	...
  406a78:	0000007c 00000000 00000000 00200000     |............. .
  406a88:	00080010 00000000 00000000 00000000     ................
	...
  406aac:	00040078 007c0004 008c0084 00000076     x.....|.....v...
	...
  406ac4:	00800080 00800080 00c400b8 00840084     ................
  406ad4:	00880084 000000f0 00000000 00000000     ................
	...
  406aec:	0080007c 00800080 00800080 0000007c     |...........|...
	...
  406b04:	00020002 00020002 0042003e 00820082     ........>.B.....
  406b14:	00420082 0000003e 00000000 00000000     ..B.>...........
	...
  406b2c:	0082007c 00fe0082 00800080 0000007e     |...........~...
	...
  406b44:	001c0000 00200020 002000fc 00200020     .... . ... . . .
  406b54:	00200020 000000fc 00000000 00000000      . .............
	...
  406b6c:	0084007c 00840084 008c0084 00040074     |...........t...
  406b7c:	00380044 00000000 00800080 00800080     D.8.............
  406b8c:	00c400b8 00840084 00840084 00000084     ................
	...
  406ba4:	00100000 00000000 00100070 00100010     ........p.......
  406bb4:	00100010 0000007c 00000000 00000000     ....|...........
  406bc4:	00080000 00000000 00080078 00080008     ........x.......
  406bd4:	00080008 00080008 00e00010 00000000     ................
  406be4:	00800080 00800080 00900088 00e000a0     ................
  406bf4:	00880090 00000084 00000000 00000000     ................
  406c04:	00f00000 00100010 00100010 00100010     ................
  406c14:	00100010 000000fe 00000000 00000000     ................
	...
  406c2c:	00d400ac 00940094 00940094 00000094     ................
	...
  406c4c:	00c400b8 00840084 00840084 00000084     ................
	...
  406c6c:	00840078 00840084 00840084 00000078     x...........x...
	...
  406c8c:	00c400b8 00840084 00840084 008000f8     ................
  406c9c:	00800080 00000000 00000000 00000000     ................
  406cac:	0084007c 00840084 00840084 0004007c     |...........|...
  406cbc:	00040004 00000000 00000000 00000000     ................
  406ccc:	003000cc 00200020 00200020 000000f8     ..0. . . . .....
	...
  406cec:	0080007c 00780080 00040004 000000f8     |.....x.........
	...
  406d08:	00200000 002000fc 00200020 00200020     .. ... . . . . .
  406d18:	0000001c 00000000 00000000 00000000     ................
  406d28:	00000000 00880088 00880088 00880088     ................
  406d38:	00000074 00000000 00000000 00000000     t...............
  406d48:	00000000 00440082 00280044 00100028     ......D.D.(.(...
  406d58:	00000010 00000000 00000000 00000000     ................
  406d68:	00000000 00840084 00b400b4 00480048     ............H.H.
  406d78:	00000048 00000000 00000000 00000000     H...............
  406d88:	00000000 00280044 00100028 00440028     ....D.(.(...(.D.
  406d98:	00000044 00000000 00000000 00000000     D...............
  406da8:	00000000 00440082 00280044 00280028     ......D.D.(.(.(.
  406db8:	00100010 00200020 00000000 00000000     .... . .........
  406dc8:	00000000 000400fc 00100008 00400020     ............ .@.
  406dd8:	000000fc 00000000 00000000 00100008     ................
  406de8:	00080010 00100008 00080010 00100008     ................
  406df8:	00080010 00000000 00000000 00100010     ................
  406e08:	00100010 00000010 00100000 00100010     ................
  406e18:	00100010 00000000 00000000 00100020     ............ ...
  406e28:	00200010 00100020 00200010 00100020     .. . ..... . ...
  406e38:	00200010 00000000 0a05000d 0000004b     .. .........K...
  406e48:	00001932 0e00008b 32800008 030a0205     2..........2....
  406e58:	0f022003 00000a0f 18180000 00002020     . ..........  ..
  406e68:	0a000000 02020000 18180000 00030000     ................
  406e78:	00000000 18010002 1e1e1e1e 1e1e1e1e     ................
  406e88:	1e1e1e1e 00001e1e 00000000 00000000     ................
	...
  406ea0:	6e206f4e 0065746f                       No note.

00406ea8 <midi_note_frequencies>:
  406ea8:	4102d0e5 410a978d 4112d4fe 411b9168     ...A...A...Ah..A
  406eb8:	4124d0e5 412e9ba6 4138fdf4 41440000     ..$A...A..8A..DA
  406ec8:	414fa5e3 415c0000 41691687 4176f1aa     ..OA..\A..iA..vA
  406ed8:	4182d0e5 418a978d 4192d4fe 419b8f5c     ...A...A...A\..A
  406ee8:	41a4d0e5 41ae9db2 41b90000 41c40000     ...A...A...A...A
  406ef8:	41cfa7f0 41dc0000 41e9147b 41f6f1aa     ...A...A{..A...A
  406f08:	4202cfdf 420a978d 4212d4fe 421b9062     ...B...B...Bb..B
  406f18:	4224cfdf 422e9db2 4238fefa 4243fefa     ..$B...B..8B..CB
  406f28:	424fa6e9 425c0000 4269147b 4276f0a4     ..OB..\B{.iB..vB
  406f38:	4282cfdf 428a978d 4292d4fe 429b9062     ...B...B...Bb..B
  406f48:	42a4d062 42ae9d2f 42b8ff7d 42c3ff7d     b..B/..B}..B}..B
  406f58:	42cfa6e9 42dc0000 42e914fe 42f6f127     ...B...B...B'..B
  406f68:	4302d021 430a974c 4312d4fe 431b9021     !..CL..C...C!..C
  406f78:	4324d062 432e9d2f 4338ff3b 4343ff7d     b.$C/..C;.8C}.CC
  406f88:	434fa6e9 435c0000 436914fe 4376f127     ..OC..\C..iC'.vC
  406f98:	4382d021 438a976d 4392d51f 439b9042     !..Cm..C...CB..C
  406fa8:	43a4d062 43ae9d2f 43b8ff3b 43c3ff5c     b..C/..C;..C\..C
  406fb8:	43cfa70a 43dc0000 43e914fe 43f6f106     ...C...C...C...C
  406fc8:	4402d010 440a975c 4412d51f 441b9042     ...D\..D...DB..D
  406fd8:	4424d052 442e9d2f 4438ff4c 4443ff6d     R.$D/..DL.8Dm.CD
  406fe8:	444fa6fa 445c0000 446914fe 4476f117     ..OD..\D..iD..vD
  406ff8:	4482d010 448a9764 4492d517 449b9042     ...Dd..D...DB..D
  407008:	44a4d052 44ae9d37 44b8ff4c 44c3ff6d     R..D7..DL..Dm..D
  407018:	44cfa702 44dc0000 44e914f6 44f6f10e     ...D...D...D...D
  407028:	4502d014 450a9760 4512d517 451b9042     ...E`..E...EB..E
  407038:	4524d052 452e9d37 4538ff48 4543ff68     R.$E7..EH.8Eh.CE
  407048:	454fa702 455c0000 456914f6 4576f10e     ..OE..\E..iE..vE
  407058:	4582d012 458a9760 4592d517 459b9042     ...E`..E...EB..E
  407068:	45a4d054 45ae9d37 45b8ff4a 45c3ff6a     T..E7..EJ..Ej..E
  407078:	45cfa700 45dc0000 45e914f6 45f6f110     ...E...E...E...E
  407088:	4602d012 460a9760 4612d518 461b9041     ...F`..F...FA..F
  407098:	4624d052 462e9d33 4638ff48 4643ff66     R.$F3..FH.8Ff.CF

004070a8 <midi_note_names>:
  4070a8:	00312d43 2d234300 2d440031 44000031     C-1..C#-1.D-1..D
  4070b8:	00312d23 00312d45 312d4600 23460000     #-1.E-1..F-1..F#
  4070c8:	4700312d 0000312d 312d2347 312d4100     -1.G-1..G#-1.A-1
  4070d8:	23410000 4200312d 0000312d 00003043     ..A#-1.B-1..C0..
  4070e8:	30234300 30440000 44000000 00003023     .C#0..D0...D#0..
  4070f8:	00003045 00304600 23460000 47000030     E0...F0...F#0..G
  407108:	00000030 00302347 00304100 23410000     0...G#0..A0...A#
  407118:	42000030 00000030 00003143 31234300     0..B0...C1...C#1
  407128:	31440000 44000000 00003123 00003145     ..D1...D#1..E1..
  407138:	00314600 23460000 47000031 00000031     .F1...F#1..G1...
  407148:	00312347 00314100 23410000 42000031     G#1..A1...A#1..B
  407158:	00000031 00003243 32234300 32440000     1...C2...C#2..D2
  407168:	44000000 00003223 00003245 00324600     ...D#2..E2...F2.
  407178:	23460000 47000032 00000032 00322347     ..F#2..G2...G#2.
  407188:	00324100 23410000 42000032 00000032     .A2...A#2..B2...
  407198:	00003343 33234300 33440000 44000000     C3...C#3..D3...D
  4071a8:	00003323 00003345 00334600 23460000     #3..E3...F3...F#
  4071b8:	47000033 00000033 00332347 00334100     3..G3...G#3..A3.
  4071c8:	23410000 42000033 00000033 00203443     ..A#3..B3...C4 .
  4071d8:	34234300 34440000 44000000 00003423     .C#4..D4...D#4..
  4071e8:	00003445 00344600 23460000 47000034     E4...F4...F#4..G
  4071f8:	00000034 00342347 00344100 23410000     4...G#4..A4...A#
  407208:	42000034 00000034 00003543 35234300     4..B4...C5...C#5
  407218:	35440000 44000000 00003523 00003545     ..D5...D#5..E5..
  407228:	00354600 23460000 47000035 00000035     .F5...F#5..G5...
  407238:	00352347 00354100 23410000 42000035     G#5..A5...A#5..B
  407248:	00000035 00003643 36234300 36440000     5...C6...C#6..D6
  407258:	44000000 00003623 00003645 00364600     ...D#6..E6...F6.
  407268:	23460000 47000036 00000036 00362347     ..F#6..G6...G#6.
  407278:	00364100 23410000 42000036 00000036     .A6...A#6..B6...
  407288:	00003743 37234300 37440000 44000000     C7...C#7..D7...D
  407298:	00003723 00003745 00374600 23460000     #7..E7...F7...F#
  4072a8:	47000037 00000037 00372347 00374100     7..G7...G#7..A7.
  4072b8:	23410000 42000037 00000037 00003843     ..A#7..B7...C8..
  4072c8:	38234300 38440000 44000000 00003823     .C#8..D8...D#8..
  4072d8:	00003845 00384600 23460000 47000038     E8...F8...F#8..G
  4072e8:	00000038 00382347 00384100 23410000     8...G#8..A8...A#
  4072f8:	42000038 00000038 00003943 39234300     8..B8...C9...C#9
  407308:	39440000 44000000 00003923 00003945     ..D9...D#9..E9..
  407318:	00394600 23460000 47000039 00000039     .F9...F#9..G9...

00407328 <_global_impure_ptr>:
  407328:	20400048 33323130 37363534 42413938     H.@ 0123456789AB
  407338:	46454443 00000000 33323130 37363534     CDEF....01234567
  407348:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  407358:	0000296c                                l)..

0040735c <blanks.7217>:
  40735c:	20202020 20202020 20202020 20202020                     

0040736c <zeroes.7218>:
  40736c:	30303030 30303030 30303030 30303030     0000000000000000
  40737c:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0040738c <_ctype_>:
  40738c:	20202000 20202020 28282020 20282828     .         ((((( 
  40739c:	20202020 20202020 20202020 20202020                     
  4073ac:	10108820 10101010 10101010 10101010      ...............
  4073bc:	04040410 04040404 10040404 10101010     ................
  4073cc:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4073dc:	01010101 01010101 01010101 10101010     ................
  4073ec:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4073fc:	02020202 02020202 02020202 10101010     ................
  40740c:	00000020 00000000 00000000 00000000      ...............
	...

00407490 <_init>:
  407490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407492:	bf00      	nop
  407494:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407496:	bc08      	pop	{r3}
  407498:	469e      	mov	lr, r3
  40749a:	4770      	bx	lr

0040749c <__init_array_start>:
  40749c:	0040497d 	.word	0x0040497d

004074a0 <__frame_dummy_init_array_entry>:
  4074a0:	00400165                                e.@.

004074a4 <_fini>:
  4074a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4074a6:	bf00      	nop
  4074a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4074aa:	bc08      	pop	{r3}
  4074ac:	469e      	mov	lr, r3
  4074ae:	4770      	bx	lr

004074b0 <__fini_array_start>:
  4074b0:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <fillBuffer>:
2040000c:	0dc8 2040                                   ..@ 

20400010 <inBuffer>:
20400010:	30c8 2040                                   .0@ 

20400014 <inPingMode>:
20400014:	0001 0000                                   ....

20400018 <outBuffer>:
20400018:	1ec8 2040                                   ..@ 

2040001c <outPingMode>:
2040001c:	0001 0000                                   ....

20400020 <processBuffer>:
20400020:	20c8 2040                                   . @ 

20400024 <processPingMode>:
20400024:	0001 0000                                   ....

20400028 <sysfont>:
20400028:	0000 0000 6280 0040 100a 7d20               .....b@... }

20400034 <g_interrupt_enabled>:
20400034:	0001 0000                                   ....

20400038 <SystemCoreClock>:
20400038:	0900 003d                                   ..=.

2040003c <note>:
2040003c:	ffff 0000                                   ....

20400040 <_impure_ptr>:
20400040:	0048 2040 0000 0000                         H.@ ....

20400048 <impure_data>:
20400048:	0000 0000 0334 2040 039c 2040 0404 2040     ....4.@ ..@ ..@ 
	...
204000f0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400100:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400470 <__malloc_av_>:
	...
20400478:	0470 2040 0470 2040 0478 2040 0478 2040     p.@ p.@ x.@ x.@ 
20400488:	0480 2040 0480 2040 0488 2040 0488 2040     ..@ ..@ ..@ ..@ 
20400498:	0490 2040 0490 2040 0498 2040 0498 2040     ..@ ..@ ..@ ..@ 
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 

20400878 <__malloc_sbrk_base>:
20400878:	ffff ffff                                   ....

2040087c <__malloc_trim_threshold>:
2040087c:	0000 0002                                   ....

20400880 <__atexit_recursive_mutex>:
20400880:	31e0 2040                                   .1@ 

20400884 <__global_locale>:
20400884:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400904:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400924:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400944:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400964:	5ca1 0040 5405 0040 0000 0000 738c 0040     .\@..T@......s@.
20400974:	7388 0040 733c 0040 733c 0040 733c 0040     .s@.<s@.<s@.<s@.
20400984:	733c 0040 733c 0040 733c 0040 733c 0040     <s@.<s@.<s@.<s@.
20400994:	733c 0040 733c 0040 ffff ffff ffff ffff     <s@.<s@.........
204009a4:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009cc:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
