
GatorScribe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007708  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00407708  00407708  00017708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a00  20400000  00407710  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000490e8  20404000  0040c000  00024000  2**14
                  ALLOC
  4 .stack        00002000  2044d0e8  004550e8  00024000  2**0
                  ALLOC
  5 .heap         00000200  2044f0e8  004570e8  00024000  2**0
                  ALLOC
  6 .ARM.attributes 0000002c  00000000  00000000  00020a00  2**0
                  CONTENTS, READONLY
  7 .comment      000000b4  00000000  00000000  00020a2c  2**0
                  CONTENTS, READONLY
  8 .debug_info   00020770  00000000  00000000  00020ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004ba9  00000000  00000000  00041250  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009b9a  00000000  00000000  00045df9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000cf0  00000000  00000000  0004f993  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001f00  00000000  00000000  00050683  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00025daa  00000000  00000000  00052583  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00014d07  00000000  00000000  0007832d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009d38b  00000000  00000000  0008d034  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002b60  00000000  00000000  0012a3c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e8 f0 44 20 49 24 40 00 41 24 40 00 45 24 40 00     ..D I$@.A$@.E$@.
  400010:	41 24 40 00 41 24 40 00 41 24 40 00 00 00 00 00     A$@.A$@.A$@.....
	...
  40002c:	41 24 40 00 41 24 40 00 00 00 00 00 41 24 40 00     A$@.A$@.....A$@.
  40003c:	41 24 40 00 41 24 40 00 41 24 40 00 41 24 40 00     A$@.A$@.A$@.A$@.
  40004c:	41 24 40 00 41 24 40 00 41 24 40 00 41 24 40 00     A$@.A$@.A$@.A$@.
  40005c:	41 24 40 00 41 24 40 00 00 00 00 00 81 1e 40 00     A$@.A$@.......@.
  40006c:	4d 1f 40 00 19 20 40 00 41 24 40 00 d5 26 40 00     M.@.. @.A$@..&@.
  40007c:	41 24 40 00 e5 20 40 00 b1 21 40 00 41 24 40 00     A$@.. @..!@.A$@.
  40008c:	41 24 40 00 41 24 40 00 41 24 40 00 41 24 40 00     A$@.A$@.A$@.A$@.
  40009c:	41 24 40 00 41 24 40 00 41 24 40 00 41 24 40 00     A$@.A$@.A$@.A$@.
  4000ac:	41 24 40 00 41 24 40 00 41 24 40 00 41 24 40 00     A$@.A$@.A$@.A$@.
  4000bc:	41 24 40 00 41 24 40 00 41 24 40 00 41 24 40 00     A$@.A$@.A$@.A$@.
  4000cc:	41 24 40 00 00 00 00 00 41 24 40 00 00 00 00 00     A$@.....A$@.....
  4000dc:	41 24 40 00 41 24 40 00 41 24 40 00 41 24 40 00     A$@.A$@.A$@.A$@.
  4000ec:	41 24 40 00 41 24 40 00 41 24 40 00 41 24 40 00     A$@.A$@.A$@.A$@.
  4000fc:	41 24 40 00 41 24 40 00 41 24 40 00 41 24 40 00     A$@.A$@.A$@.A$@.
  40010c:	41 24 40 00 41 24 40 00 41 24 40 00 00 00 00 00     A$@.A$@.A$@.....
  40011c:	00 00 00 00 41 24 40 00 41 24 40 00 ad 01 40 00     ....A$@.A$@...@.
  40012c:	41 24 40 00 41 24 40 00 00 00 00 00 41 24 40 00     A$@.A$@.....A$@.
  40013c:	41 24 40 00                                         A$@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20404000 	.word	0x20404000
  40015c:	00000000 	.word	0x00000000
  400160:	00407710 	.word	0x00407710

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00407710 	.word	0x00407710
  4001a0:	20404004 	.word	0x20404004
  4001a4:	00407710 	.word	0x00407710
  4001a8:	00000000 	.word	0x00000000

004001ac <XDMAC_Handler>:
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4001ac:	4b21      	ldr	r3, [pc, #132]	; (400234 <XDMAC_Handler+0x88>)
/*********************************** Extern Variables End ***********************************/

#define One_over_max_int16 0.0000305185f 
/******************************* XDMAC Interrupt Handler Start *******************************/ 
void XDMAC_Handler(void)
{
  4001ae:	b470      	push	{r4, r5, r6}
  4001b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    uint32_t dma_status;
    
    dma_status = xdmac_channel_get_interrupt_status(XDMAC, XDMA_CH_SSC_RX);
    if (dma_status & XDMAC_CIS_BIS)
  4001b2:	07da      	lsls	r2, r3, #31
  4001b4:	d529      	bpl.n	40020a <XDMAC_Handler+0x5e>
    {
		// Update input and process buffers to be used 
		if(inPingMode)
  4001b6:	4d20      	ldr	r5, [pc, #128]	; (400238 <XDMAC_Handler+0x8c>)
		else 
		{
			inBuffer = inPongBuffer; 
			processBuffer = processPongBuffer; 
		}
		inPingMode = !inPingMode; 
  4001b8:	2200      	movs	r2, #0
			processBuffer = processPingBuffer; 
  4001ba:	4c20      	ldr	r4, [pc, #128]	; (40023c <XDMAC_Handler+0x90>)
		if(inPingMode)
  4001bc:	782b      	ldrb	r3, [r5, #0]
			processBuffer = processPingBuffer; 
  4001be:	4820      	ldr	r0, [pc, #128]	; (400240 <XDMAC_Handler+0x94>)
  4001c0:	4293      	cmp	r3, r2
		inPingMode = !inPingMode; 
  4001c2:	782e      	ldrb	r6, [r5, #0]
			processBuffer = processPingBuffer; 
  4001c4:	491f      	ldr	r1, [pc, #124]	; (400244 <XDMAC_Handler+0x98>)
  4001c6:	4b20      	ldr	r3, [pc, #128]	; (400248 <XDMAC_Handler+0x9c>)
  4001c8:	bf1c      	itt	ne
  4001ca:	4621      	movne	r1, r4
  4001cc:	4603      	movne	r3, r0
		inPingMode = !inPingMode; 
  4001ce:	f086 0601 	eor.w	r6, r6, #1
  4001d2:	4c1e      	ldr	r4, [pc, #120]	; (40024c <XDMAC_Handler+0xa0>)
  4001d4:	481e      	ldr	r0, [pc, #120]	; (400250 <XDMAC_Handler+0xa4>)
		
		int processIdx = 0;
		// Fill process buffer - only left channel decimated by 1
		for(int i = 0; i < IO_BUF_SIZE; i+=2)
		{
			processBuffer[processIdx++] = ((float )(int16_t)inBuffer[i]) * One_over_max_int16; 
  4001d6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 400254 <XDMAC_Handler+0xa8>
		inPingMode = !inPingMode; 
  4001da:	702e      	strb	r6, [r5, #0]
  4001dc:	6021      	str	r1, [r4, #0]
  4001de:	6003      	str	r3, [r0, #0]
  4001e0:	e001      	b.n	4001e6 <XDMAC_Handler+0x3a>
  4001e2:	6821      	ldr	r1, [r4, #0]
  4001e4:	6803      	ldr	r3, [r0, #0]
			processBuffer[processIdx++] = ((float )(int16_t)inBuffer[i]) * One_over_max_int16; 
  4001e6:	5a9b      	ldrh	r3, [r3, r2]
  4001e8:	4411      	add	r1, r2
  4001ea:	3204      	adds	r2, #4
  4001ec:	b21b      	sxth	r3, r3
		for(int i = 0; i < IO_BUF_SIZE; i+=2)
  4001ee:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
			processBuffer[processIdx++] = ((float )(int16_t)inBuffer[i]) * One_over_max_int16; 
  4001f2:	ee07 3a90 	vmov	s15, r3
  4001f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4001fa:	ee67 7a87 	vmul.f32	s15, s15, s14
  4001fe:	edc1 7a00 	vstr	s15, [r1]
		for(int i = 0; i < IO_BUF_SIZE; i+=2)
  400202:	d1ee      	bne.n	4001e2 <XDMAC_Handler+0x36>
		}
		dataReceived = true; // can check for out of time here 
  400204:	4b14      	ldr	r3, [pc, #80]	; (400258 <XDMAC_Handler+0xac>)
  400206:	2201      	movs	r2, #1
  400208:	701a      	strb	r2, [r3, #0]
  40020a:	4b0a      	ldr	r3, [pc, #40]	; (400234 <XDMAC_Handler+0x88>)
  40020c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    }
	
	dma_status = xdmac_channel_get_interrupt_status(XDMAC, XDMA_CH_SSC_TX);
	if (dma_status & XDMAC_CIS_BIS)
  400210:	07db      	lsls	r3, r3, #31
  400212:	d50c      	bpl.n	40022e <XDMAC_Handler+0x82>
	{
		// update output buffer to be used 
		if(outPingMode)
  400214:	4b11      	ldr	r3, [pc, #68]	; (40025c <XDMAC_Handler+0xb0>)
		{
			outBuffer = outPingBuffer; 
  400216:	4812      	ldr	r0, [pc, #72]	; (400260 <XDMAC_Handler+0xb4>)
		if(outPingMode)
  400218:	781c      	ldrb	r4, [r3, #0]
			outBuffer = outPingBuffer; 
  40021a:	4912      	ldr	r1, [pc, #72]	; (400264 <XDMAC_Handler+0xb8>)
		}
		else
		{
			outBuffer = outPongBuffer; 
		}
		outPingMode = !outPingMode; 
  40021c:	781a      	ldrb	r2, [r3, #0]
			outBuffer = outPingBuffer; 
  40021e:	2c00      	cmp	r4, #0
  400220:	bf18      	it	ne
  400222:	4601      	movne	r1, r0
  400224:	4810      	ldr	r0, [pc, #64]	; (400268 <XDMAC_Handler+0xbc>)
		outPingMode = !outPingMode; 
  400226:	f082 0201 	eor.w	r2, r2, #1
  40022a:	6001      	str	r1, [r0, #0]
  40022c:	701a      	strb	r2, [r3, #0]
	}
}
  40022e:	bc70      	pop	{r4, r5, r6}
  400230:	4770      	bx	lr
  400232:	bf00      	nop
  400234:	40078000 	.word	0x40078000
  400238:	20400010 	.word	0x20400010
  40023c:	20447000 	.word	0x20447000
  400240:	2044c000 	.word	0x2044c000
  400244:	2044b000 	.word	0x2044b000
  400248:	20448000 	.word	0x20448000
  40024c:	2040001c 	.word	0x2040001c
  400250:	2040000c 	.word	0x2040000c
  400254:	380000fd 	.word	0x380000fd
  400258:	2040401c 	.word	0x2040401c
  40025c:	20400018 	.word	0x20400018
  400260:	20449000 	.word	0x20449000
  400264:	2044a000 	.word	0x2044a000
  400268:	20400014 	.word	0x20400014

0040026c <configure_xdma>:
/******************************* XDMAC Interrupt Handler End *******************************/

/********************************** Public Functions Start **********************************/
void configure_xdma(void)
{
  40026c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint16_t *src;
    
    xdmac_channel_config_t xdmac_channel_cfg = {0};
  400270:	2620      	movs	r6, #32
{
  400272:	b088      	sub	sp, #32
    xdmac_channel_config_t xdmac_channel_cfg = {0};
  400274:	2100      	movs	r1, #0
  400276:	4b30      	ldr	r3, [pc, #192]	; (400338 <configure_xdma+0xcc>)
  400278:	4632      	mov	r2, r6
  40027a:	4668      	mov	r0, sp
  40027c:	4798      	blx	r3
    
    /* Initialize and enable DMA controller */
    pmc_enable_periph_clk(ID_XDMAC);
  40027e:	4b2f      	ldr	r3, [pc, #188]	; (40033c <configure_xdma+0xd0>)
  400280:	203a      	movs	r0, #58	; 0x3a
    | XDMAC_CC_DIF_AHB_IF0
    | XDMAC_CC_SAM_FIXED_AM
    | XDMAC_CC_DAM_INCREMENTED_AM
    | XDMAC_CC_PERID(33);
	
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  400282:	4c2f      	ldr	r4, [pc, #188]	; (400340 <configure_xdma+0xd4>)
    pmc_enable_periph_clk(ID_XDMAC);
  400284:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400286:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
  40028a:	4b2e      	ldr	r3, [pc, #184]	; (400344 <configure_xdma+0xd8>)
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  40028c:	466a      	mov	r2, sp
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  40028e:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 400358 <configure_xdma+0xec>
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  400292:	4620      	mov	r0, r4
  400294:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
  400298:	2100      	movs	r1, #0
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40029a:	f883 633a 	strb.w	r6, [r3, #826]	; 0x33a
 */
static inline void xdmac_channel_set_descriptor_control(Xdmac *xdmac, uint32_t channel_num, uint32_t config)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  40029e:	270f      	movs	r7, #15
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4002a0:	605d      	str	r5, [r3, #4]
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  4002a2:	2501      	movs	r5, #1
  4002a4:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 40035c <configure_xdma+0xf0>
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4002a8:	f8cd e00c 	str.w	lr, [sp, #12]
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  4002ac:	47c0      	blx	r8
    
    /* Initialize linked list descriptor */
    src = (uint16_t *)&inPingBuffer[0];
    linklist_read[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002ae:	4b26      	ldr	r3, [pc, #152]	; (400348 <configure_xdma+0xdc>)
    | XDMAC_CC_DIF_AHB_IF1
    | XDMAC_CC_SAM_INCREMENTED_AM
    | XDMAC_CC_DAM_FIXED_AM
    | XDMAC_CC_PERID(32);
	
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  4002b0:	466a      	mov	r2, sp
    linklist_read[0].mbr_da = (uint32_t)(src);
  4002b2:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 400360 <configure_xdma+0xf4>
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  4002b6:	4629      	mov	r1, r5
    linklist_read[0].mbr_nda = (uint32_t)&linklist_read[1];
  4002b8:	f103 0010 	add.w	r0, r3, #16
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  4002bc:	f023 0603 	bic.w	r6, r3, #3
	linklist_read[1].mbr_da = (uint32_t)(src);
  4002c0:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 400364 <configure_xdma+0xf8>
    linklist_read[0].mbr_nda = (uint32_t)&linklist_read[1];
  4002c4:	6018      	str	r0, [r3, #0]
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  4002c6:	4620      	mov	r0, r4
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  4002c8:	66e7      	str	r7, [r4, #108]	; 0x6c
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  4002ca:	66a6      	str	r6, [r4, #104]	; 0x68
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  4002cc:	60e5      	str	r5, [r4, #12]
    linklist_read[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002ce:	4e1f      	ldr	r6, [pc, #124]	; (40034c <configure_xdma+0xe0>)
	xdmac->XDMAC_CHID[channel_num].XDMAC_CIE = mask;
  4002d0:	6525      	str	r5, [r4, #80]	; 0x50
    linklist_read[0].mbr_da = (uint32_t)(src);
  4002d2:	f8c3 e00c 	str.w	lr, [r3, #12]
    linklist_read[0].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  4002d6:	f8df e090 	ldr.w	lr, [pc, #144]	; 400368 <configure_xdma+0xfc>
	linklist_read[1].mbr_da = (uint32_t)(src);
  4002da:	f8c3 c01c 	str.w	ip, [r3, #28]
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4002de:	f8df c08c 	ldr.w	ip, [pc, #140]	; 40036c <configure_xdma+0x100>
    linklist_read[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002e2:	605e      	str	r6, [r3, #4]
	linklist_read[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002e4:	615e      	str	r6, [r3, #20]
    linklist_read[0].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  4002e6:	f8c3 e008 	str.w	lr, [r3, #8]
	linklist_read[1].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  4002ea:	f8c3 e018 	str.w	lr, [r3, #24]
	linklist_read[1].mbr_nda = (uint32_t)&linklist_read[0];
  4002ee:	611b      	str	r3, [r3, #16]
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4002f0:	f8cd c00c 	str.w	ip, [sp, #12]
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  4002f4:	47c0      	blx	r8
    
    src = (uint16_t *)&outPingBuffer[0];
    linklist_write[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002f6:	4b16      	ldr	r3, [pc, #88]	; (400350 <configure_xdma+0xe4>)
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  4002f8:	2102      	movs	r1, #2
		 | XDMAC_UBC_NDE_FETCH_EN
		 | XDMAC_UBC_NSEN_UPDATED
			| XDMAC_CUBC_UBLEN(IO_BUF_SIZE);
    linklist_write[0].mbr_sa = (uint32_t)(src);
    linklist_write[0].mbr_da = (uint32_t)&(SSC->SSC_THR);
  4002fa:	4a16      	ldr	r2, [pc, #88]	; (400354 <configure_xdma+0xe8>)
    linklist_write[0].mbr_sa = (uint32_t)(src);
  4002fc:	f8df c070 	ldr.w	ip, [pc, #112]	; 400370 <configure_xdma+0x104>
    linklist_write[0].mbr_nda = (uint32_t)&linklist_write[1];
  400300:	f103 0810 	add.w	r8, r3, #16
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  400304:	f023 0003 	bic.w	r0, r3, #3
	src = (uint16_t *)&outPongBuffer[0];
	linklist_write[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
	    | XDMAC_UBC_NDE_FETCH_EN
	    | XDMAC_UBC_NSEN_UPDATED
	    | XDMAC_CUBC_UBLEN(IO_BUF_SIZE);
	linklist_write[1].mbr_sa = (uint32_t)(src);
  400308:	f8df e068 	ldr.w	lr, [pc, #104]	; 400374 <configure_xdma+0x108>
    linklist_write[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  40030c:	605e      	str	r6, [r3, #4]
	linklist_write[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  40030e:	615e      	str	r6, [r3, #20]
	linklist_write[1].mbr_da = (uint32_t)&(SSC->SSC_THR);
	linklist_write[1].mbr_nda = (uint32_t)&linklist_write[0];
  400310:	611b      	str	r3, [r3, #16]
    linklist_write[0].mbr_nda = (uint32_t)&linklist_write[1];
  400312:	f8c3 8000 	str.w	r8, [r3]
    linklist_write[0].mbr_sa = (uint32_t)(src);
  400316:	f8c3 c008 	str.w	ip, [r3, #8]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  40031a:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
	linklist_write[1].mbr_sa = (uint32_t)(src);
  40031e:	f8c3 e018 	str.w	lr, [r3, #24]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  400322:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
    linklist_write[0].mbr_da = (uint32_t)&(SSC->SSC_THR);
  400326:	60da      	str	r2, [r3, #12]
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  400328:	60e1      	str	r1, [r4, #12]
	linklist_write[1].mbr_da = (uint32_t)&(SSC->SSC_THR);
  40032a:	61da      	str	r2, [r3, #28]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CIE = mask;
  40032c:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
    xdmac_channel_set_descriptor_addr(XDMAC, XDMA_CH_SSC_TX, (uint32_t)(&linklist_write[0]), 0);
    
    xdmac_enable_interrupt(XDMAC, XDMA_CH_SSC_TX);
    xdmac_channel_enable_interrupt(XDMAC, XDMA_CH_SSC_TX, XDMAC_CIE_BIE);
    
}
  400330:	b008      	add	sp, #32
  400332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400336:	bf00      	nop
  400338:	0040447d 	.word	0x0040447d
  40033c:	0040237d 	.word	0x0040237d
  400340:	40078000 	.word	0x40078000
  400344:	e000e100 	.word	0xe000e100
  400348:	20404020 	.word	0x20404020
  40034c:	0b000800 	.word	0x0b000800
  400350:	20404040 	.word	0x20404040
  400354:	40004024 	.word	0x40004024
  400358:	21042801 	.word	0x21042801
  40035c:	004017f9 	.word	0x004017f9
  400360:	2044c000 	.word	0x2044c000
  400364:	20448000 	.word	0x20448000
  400368:	40004020 	.word	0x40004020
  40036c:	20014811 	.word	0x20014811
  400370:	20449000 	.word	0x20449000
  400374:	2044a000 	.word	0x2044a000

00400378 <audio_init>:
#include "DMA_Audio.h"
#include "WM8904_Driver.h"
#include "ASF/sam/utils/cmsis/samv71/include/component/supc.h"

void audio_init(void)
{
  400378:	b510      	push	{r4, lr}
	/* Initialize WM8904 TWI interface*/
	if (wm8904_twi_init() != TWIHS_SUCCESS) {
  40037a:	4b13      	ldr	r3, [pc, #76]	; (4003c8 <audio_init+0x50>)
  40037c:	4798      	blx	r3
  40037e:	b118      	cbz	r0, 400388 <audio_init+0x10>
		printf("-E-\tWM8904 initialization failed.\r");
  400380:	4812      	ldr	r0, [pc, #72]	; (4003cc <audio_init+0x54>)
  400382:	4b13      	ldr	r3, [pc, #76]	; (4003d0 <audio_init+0x58>)
  400384:	4798      	blx	r3
  400386:	e7fe      	b.n	400386 <audio_init+0xe>
			/* Capture error */
		}
	}
		
	/* Configure CODEC */
	configure_codec();
  400388:	4b12      	ldr	r3, [pc, #72]	; (4003d4 <audio_init+0x5c>)
  40038a:	4604      	mov	r4, r0
  40038c:	4798      	blx	r3
		
	/* Configure SSC */
	configure_ssc();
  40038e:	4b12      	ldr	r3, [pc, #72]	; (4003d8 <audio_init+0x60>)
  400390:	4798      	blx	r3
		
	/* Configure XDMA */
	configure_xdma();
  400392:	4b12      	ldr	r3, [pc, #72]	; (4003dc <audio_init+0x64>)
  400394:	4798      	blx	r3
		
	/* Enable the DAC master clock (MCLK) */
	pmc_pck_set_prescaler(PMC_PCK_2, PMC_MCKR_PRES_CLK_1);
  400396:	4621      	mov	r1, r4
  400398:	2002      	movs	r0, #2
  40039a:	4b11      	ldr	r3, [pc, #68]	; (4003e0 <audio_init+0x68>)
  40039c:	4798      	blx	r3
	pmc_pck_set_source(PMC_PCK_2, PMC_MCKR_CSS_SLOW_CLK);
  40039e:	4621      	mov	r1, r4
  4003a0:	2002      	movs	r0, #2
  4003a2:	4b10      	ldr	r3, [pc, #64]	; (4003e4 <audio_init+0x6c>)
  4003a4:	4798      	blx	r3
	pmc_enable_pck(PMC_PCK_2);
  4003a6:	2002      	movs	r0, #2
  4003a8:	4b0f      	ldr	r3, [pc, #60]	; (4003e8 <audio_init+0x70>)
  4003aa:	4798      	blx	r3
		
	/* Start playing */
	ssc_enable_rx(SSC);
  4003ac:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4003b0:	4b0e      	ldr	r3, [pc, #56]	; (4003ec <audio_init+0x74>)
  4003b2:	4798      	blx	r3
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  4003b4:	4c0e      	ldr	r4, [pc, #56]	; (4003f0 <audio_init+0x78>)
  4003b6:	2201      	movs	r2, #1
	xdmac_channel_enable(XDMAC, XDMA_CH_SSC_RX);
	// might want to enable in the first xdma interrupt (if you care)
	ssc_enable_tx(SSC);
  4003b8:	4b0e      	ldr	r3, [pc, #56]	; (4003f4 <audio_init+0x7c>)
  4003ba:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4003be:	61e2      	str	r2, [r4, #28]
  4003c0:	4798      	blx	r3
  4003c2:	2302      	movs	r3, #2
  4003c4:	61e3      	str	r3, [r4, #28]
  4003c6:	bd10      	pop	{r4, pc}
  4003c8:	00401379 	.word	0x00401379
  4003cc:	00406b48 	.word	0x00406b48
  4003d0:	00403db1 	.word	0x00403db1
  4003d4:	004004bd 	.word	0x004004bd
  4003d8:	004003f9 	.word	0x004003f9
  4003dc:	0040026d 	.word	0x0040026d
  4003e0:	004023c5 	.word	0x004023c5
  4003e4:	004023f9 	.word	0x004023f9
  4003e8:	0040242d 	.word	0x0040242d
  4003ec:	00401405 	.word	0x00401405
  4003f0:	40078000 	.word	0x40078000
  4003f4:	00401415 	.word	0x00401415

004003f8 <configure_ssc>:
#include "WM8904_Driver.h"


/********************************** Public Functions Start **********************************/
void configure_ssc(void)
{
  4003f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	clock_opt_t tx_clk_option, rx_clk_option;
	data_frame_opt_t tx_data_frame_option, rx_data_frame_option;

	/* Initialize clock */
	pmc_enable_periph_clk(ID_SSC);
  4003fc:	4b28      	ldr	r3, [pc, #160]	; (4004a0 <configure_ssc+0xa8>)
{
  4003fe:	b09c      	sub	sp, #112	; 0x70
	pmc_enable_periph_clk(ID_SSC);
  400400:	2016      	movs	r0, #22
	/* Reset SSC */
	ssc_reset(SSC);

	/* Transmitter clock mode configuration. */
	tx_clk_option.ul_cks = SSC_TCMR_CKS_TK;
	tx_clk_option.ul_cko = SSC_TCMR_CKO_NONE;
  400402:	2400      	movs	r4, #0
	pmc_enable_periph_clk(ID_SSC);
  400404:	4798      	blx	r3
	ssc_reset(SSC);
  400406:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40040a:	4b26      	ldr	r3, [pc, #152]	; (4004a4 <configure_ssc+0xac>)
	tx_clk_option.ul_cki = 0;
	tx_clk_option.ul_ckg = SSC_TCMR_CKG_CONTINUOUS;
	tx_clk_option.ul_start_sel = SSC_TCMR_START_TF_EDGE;
	tx_clk_option.ul_sttdly = 1;
	tx_clk_option.ul_period = BITS_BY_SLOT - 1;
  40040c:	250f      	movs	r5, #15
	ssc_reset(SSC);
  40040e:	4798      	blx	r3
	tx_clk_option.ul_sttdly = 1;
  400410:	2601      	movs	r6, #1
	tx_clk_option.ul_start_sel = SSC_TCMR_START_TF_EDGE;
  400412:	f44f 68e0 	mov.w	r8, #1792	; 0x700
	tx_clk_option.ul_cks = SSC_TCMR_CKS_TK;
  400416:	f04f 0e02 	mov.w	lr, #2
	/* Transmitter frame mode configuration. */
	tx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
	tx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  40041a:	2780      	movs	r7, #128	; 0x80
	tx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;
	tx_data_frame_option.ul_fslen_ext = 0;
	tx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
	tx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
	/* Configure the SSC transmitter to I2S mode. */
	ssc_set_transmitter(SSC, &tx_clk_option, &tx_data_frame_option);
  40041c:	aa0e      	add	r2, sp, #56	; 0x38
  40041e:	4669      	mov	r1, sp
  400420:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400424:	4b20      	ldr	r3, [pc, #128]	; (4004a8 <configure_ssc+0xb0>)
	tx_clk_option.ul_cks = SSC_TCMR_CKS_TK;
  400426:	f8cd e000 	str.w	lr, [sp]
	tx_clk_option.ul_cko = SSC_TCMR_CKO_NONE;
  40042a:	9401      	str	r4, [sp, #4]
	tx_clk_option.ul_cki = 0;
  40042c:	9402      	str	r4, [sp, #8]
	tx_clk_option.ul_ckg = SSC_TCMR_CKG_CONTINUOUS;
  40042e:	9403      	str	r4, [sp, #12]
	tx_data_frame_option.ul_datnb = 0;
  400430:	9410      	str	r4, [sp, #64]	; 0x40
	tx_data_frame_option.ul_fslen_ext = 0;
  400432:	9412      	str	r4, [sp, #72]	; 0x48
	tx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  400434:	9413      	str	r4, [sp, #76]	; 0x4c
	tx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  400436:	9414      	str	r4, [sp, #80]	; 0x50
	tx_clk_option.ul_start_sel = SSC_TCMR_START_TF_EDGE;
  400438:	f8cd 8018 	str.w	r8, [sp, #24]
	tx_clk_option.ul_sttdly = 1;
  40043c:	9605      	str	r6, [sp, #20]
	tx_clk_option.ul_period = BITS_BY_SLOT - 1;
  40043e:	9504      	str	r5, [sp, #16]
	tx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
  400440:	950e      	str	r5, [sp, #56]	; 0x38
	tx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;
  400442:	9511      	str	r5, [sp, #68]	; 0x44
	tx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  400444:	970f      	str	r7, [sp, #60]	; 0x3c
	ssc_set_transmitter(SSC, &tx_clk_option, &tx_data_frame_option);
  400446:	4798      	blx	r3

	/* Receiver clock mode configuration. */
	rx_clk_option.ul_cks = SSC_RCMR_CKS_TK;
	rx_clk_option.ul_cko = SSC_RCMR_CKO_NONE;
	rx_clk_option.ul_cki = SSC_RCMR_CKI;
  400448:	f04f 0c20 	mov.w	ip, #32
	rx_clk_option.ul_ckg = SSC_RCMR_CKG_CONTINUOUS;
	rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_EDGE;
	rx_clk_option.ul_sttdly = 1;	
	rx_clk_option.ul_period = BITS_BY_SLOT;	
  40044c:	f04f 0e10 	mov.w	lr, #16
	rx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;	
	rx_data_frame_option.ul_fslen_ext = 0;
	rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
	rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
	/* Configure the SSC transmitter to I2S mode. */
	ssc_set_receiver(SSC, &rx_clk_option, &rx_data_frame_option);
  400450:	aa15      	add	r2, sp, #84	; 0x54
  400452:	a907      	add	r1, sp, #28
  400454:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400458:	4b14      	ldr	r3, [pc, #80]	; (4004ac <configure_ssc+0xb4>)
	rx_clk_option.ul_cki = SSC_RCMR_CKI;
  40045a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
	rx_clk_option.ul_period = BITS_BY_SLOT;	
  40045e:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
	rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_EDGE;
  400462:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
	rx_clk_option.ul_cks = SSC_RCMR_CKS_TK;
  400466:	9607      	str	r6, [sp, #28]
	rx_clk_option.ul_cko = SSC_RCMR_CKO_NONE;
  400468:	9408      	str	r4, [sp, #32]
	rx_clk_option.ul_ckg = SSC_RCMR_CKG_CONTINUOUS;
  40046a:	940a      	str	r4, [sp, #40]	; 0x28
	rx_clk_option.ul_sttdly = 1;	
  40046c:	960c      	str	r6, [sp, #48]	; 0x30
	rx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
  40046e:	9515      	str	r5, [sp, #84]	; 0x54
	rx_data_frame_option.ul_msbf = SSC_RFMR_MSBF;
  400470:	9716      	str	r7, [sp, #88]	; 0x58
	rx_data_frame_option.ul_datnb = 0;
  400472:	9417      	str	r4, [sp, #92]	; 0x5c
	rx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;	
  400474:	9518      	str	r5, [sp, #96]	; 0x60
	rx_data_frame_option.ul_fslen_ext = 0;
  400476:	9419      	str	r4, [sp, #100]	; 0x64
	rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  400478:	941a      	str	r4, [sp, #104]	; 0x68
	rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  40047a:	941b      	str	r4, [sp, #108]	; 0x6c
	ssc_set_receiver(SSC, &rx_clk_option, &rx_data_frame_option);
  40047c:	4798      	blx	r3

	/* Disable transmitter first */
	ssc_disable_tx(SSC);
  40047e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400482:	4b0b      	ldr	r3, [pc, #44]	; (4004b0 <configure_ssc+0xb8>)
  400484:	4798      	blx	r3
	ssc_disable_rx(SSC);
  400486:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40048a:	4b0a      	ldr	r3, [pc, #40]	; (4004b4 <configure_ssc+0xbc>)
  40048c:	4798      	blx	r3

	/* Disable All Interrupt */
	ssc_disable_interrupt(SSC, 0xFFFFFFFF);
  40048e:	f04f 31ff 	mov.w	r1, #4294967295
  400492:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400496:	4b08      	ldr	r3, [pc, #32]	; (4004b8 <configure_ssc+0xc0>)
  400498:	4798      	blx	r3
}
  40049a:	b01c      	add	sp, #112	; 0x70
  40049c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4004a0:	0040237d 	.word	0x0040237d
  4004a4:	004013f1 	.word	0x004013f1
  4004a8:	00401499 	.word	0x00401499
  4004ac:	00401425 	.word	0x00401425
  4004b0:	0040141d 	.word	0x0040141d
  4004b4:	0040140d 	.word	0x0040140d
  4004b8:	0040150d 	.word	0x0040150d

004004bc <configure_codec>:


void configure_codec(void)
{
  4004bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t data = 0;
	/* check that WM8904 is present */
	wm8904_write_register(WM8904_SW_RESET_AND_ID, 0xFFFF);
  4004c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
  4004c4:	4c3d      	ldr	r4, [pc, #244]	; (4005bc <configure_codec+0x100>)
  4004c6:	2000      	movs	r0, #0
	}

	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS);	
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |	
	WM8904_VMID_RES_FAST | WM8904_VMID_ENA);
	delay_ms(5);
  4004c8:	4e3d      	ldr	r6, [pc, #244]	; (4005c0 <configure_codec+0x104>)
	wm8904_write_register(WM8904_SW_RESET_AND_ID, 0xFFFF);
  4004ca:	47a0      	blx	r4
	data = wm8904_read_register(WM8904_SW_RESET_AND_ID);
  4004cc:	4b3d      	ldr	r3, [pc, #244]	; (4005c4 <configure_codec+0x108>)
  4004ce:	2000      	movs	r0, #0
	delay_ms(5);
  4004d0:	4d3d      	ldr	r5, [pc, #244]	; (4005c8 <configure_codec+0x10c>)
	data = wm8904_read_register(WM8904_SW_RESET_AND_ID);
  4004d2:	4798      	blx	r3
	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS);	
  4004d4:	2108      	movs	r1, #8
  4004d6:	2004      	movs	r0, #4
	WM8904_DCS_ENA_CHAN_3 | WM8904_DCS_ENA_CHAN_2 |
	WM8904_DCS_ENA_CHAN_1 | WM8904_DCS_ENA_CHAN_0);
	wm8904_write_register(WM8904_DC_SERVO_1,
	WM8904_DCS_TRIG_STARTUP_3 | WM8904_DCS_TRIG_STARTUP_2 |
	WM8904_DCS_TRIG_STARTUP_1 | WM8904_DCS_TRIG_STARTUP_0);
	delay_ms(100);
  4004d8:	4f3c      	ldr	r7, [pc, #240]	; (4005cc <configure_codec+0x110>)
	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS);	
  4004da:	47a0      	blx	r4
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |	
  4004dc:	2147      	movs	r1, #71	; 0x47
  4004de:	2005      	movs	r0, #5
  4004e0:	47a0      	blx	r4
	delay_ms(5);
  4004e2:	4630      	mov	r0, r6
  4004e4:	47a8      	blx	r5
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |
  4004e6:	2143      	movs	r1, #67	; 0x43
  4004e8:	2005      	movs	r0, #5
  4004ea:	47a0      	blx	r4
	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS | WM8904_BIAS_ENA);
  4004ec:	2109      	movs	r1, #9
  4004ee:	2004      	movs	r0, #4
  4004f0:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_0, WM8904_INL_ENA | WM8904_INR_ENA);
  4004f2:	2103      	movs	r1, #3
  4004f4:	200c      	movs	r0, #12
  4004f6:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_2, WM8904_HPL_PGA_ENA | WM8904_HPR_PGA_ENA);
  4004f8:	2103      	movs	r1, #3
  4004fa:	200e      	movs	r0, #14
  4004fc:	47a0      	blx	r4
	wm8904_write_register(WM8904_DAC_DIGITAL_1, WM8904_DEEMPH(0));
  4004fe:	2100      	movs	r1, #0
  400500:	2021      	movs	r0, #33	; 0x21
  400502:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_OUT12_ZC, 0x0000);
  400504:	2100      	movs	r1, #0
  400506:	203d      	movs	r0, #61	; 0x3d
  400508:	47a0      	blx	r4
	wm8904_write_register(WM8904_CHARGE_PUMP_0, WM8904_CP_ENA);
  40050a:	2101      	movs	r1, #1
  40050c:	2062      	movs	r0, #98	; 0x62
  40050e:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLASS_W_0, WM8904_CP_DYN_PWR);
  400510:	2101      	movs	r1, #1
  400512:	2068      	movs	r0, #104	; 0x68
  400514:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_1, 0x0000);
  400516:	2100      	movs	r1, #0
  400518:	2074      	movs	r0, #116	; 0x74
  40051a:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_2, WM8904_FLL_OUTDIV(7)| WM8904_FLL_FRATIO(4));
  40051c:	f240 7104 	movw	r1, #1796	; 0x704
  400520:	2075      	movs	r0, #117	; 0x75
  400522:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_3, WM8904_FLL_K(0x8000));
  400524:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  400528:	2076      	movs	r0, #118	; 0x76
  40052a:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_4, WM8904_FLL_N(0xBB));
  40052c:	f44f 51bb 	mov.w	r1, #5984	; 0x1760
  400530:	2077      	movs	r0, #119	; 0x77
  400532:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_1, WM8904_FLL_FRACN_ENA | WM8904_FLL_ENA);
  400534:	2105      	movs	r1, #5
  400536:	2074      	movs	r0, #116	; 0x74
  400538:	47a0      	blx	r4
	delay_ms(5);
  40053a:	4630      	mov	r0, r6
  40053c:	47a8      	blx	r5
	wm8904_write_register(WM8904_CLOCK_RATES_1, WM8904_CLK_SYS_RATE(3) | WM8904_SAMPLE_RATE(SAMPLE_RATE));
  40053e:	f640 4105 	movw	r1, #3077	; 0xc05
  400542:	2015      	movs	r0, #21
  400544:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLOCK_RATES_0, 0x0000);
  400546:	2100      	movs	r1, #0
  400548:	2014      	movs	r0, #20
  40054a:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLOCK_RATES_2,
  40054c:	f244 0106 	movw	r1, #16390	; 0x4006
  400550:	2016      	movs	r0, #22
  400552:	47a0      	blx	r4
	wm8904_write_register(WM8904_AUDIO_INTERFACE_1, WM8904_BCLK_DIR | WM8904_AIF_FMT_I2S); 
  400554:	2142      	movs	r1, #66	; 0x42
  400556:	2019      	movs	r0, #25
  400558:	47a0      	blx	r4
	wm8904_write_register(WM8904_AUDIO_INTERFACE_2, WM8904_BCLK_DIV(8));
  40055a:	2108      	movs	r1, #8
  40055c:	201a      	movs	r0, #26
  40055e:	47a0      	blx	r4
	wm8904_write_register(WM8904_AUDIO_INTERFACE_3, WM8904_LRCLK_DIR | WM8904_LRCLK_RATE(0x20));
  400560:	f44f 6102 	mov.w	r1, #2080	; 0x820
  400564:	201b      	movs	r0, #27
  400566:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_6,
  400568:	210f      	movs	r1, #15
  40056a:	2012      	movs	r0, #18
  40056c:	47a0      	blx	r4
	delay_ms(5);
  40056e:	4630      	mov	r0, r6
  400570:	47a8      	blx	r5
	wm8904_write_register(WM8904_ANALOGUE_LEFT_INPUT_0, WM8904_LIN_VOL(0x10));
  400572:	2110      	movs	r1, #16
  400574:	202c      	movs	r0, #44	; 0x2c
  400576:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_RIGHT_INPUT_0, WM8904_RIN_VOL(0x10));
  400578:	2110      	movs	r1, #16
  40057a:	202d      	movs	r0, #45	; 0x2d
  40057c:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  40057e:	2111      	movs	r1, #17
  400580:	205a      	movs	r0, #90	; 0x5a
  400582:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  400584:	2133      	movs	r1, #51	; 0x33
  400586:	205a      	movs	r0, #90	; 0x5a
  400588:	47a0      	blx	r4
	wm8904_write_register(WM8904_DC_SERVO_0,
  40058a:	210f      	movs	r1, #15
  40058c:	2043      	movs	r0, #67	; 0x43
  40058e:	47a0      	blx	r4
	wm8904_write_register(WM8904_DC_SERVO_1,
  400590:	21f0      	movs	r1, #240	; 0xf0
  400592:	2044      	movs	r0, #68	; 0x44
  400594:	47a0      	blx	r4
	delay_ms(100);
  400596:	4638      	mov	r0, r7
  400598:	47a8      	blx	r5
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  40059a:	2177      	movs	r1, #119	; 0x77
  40059c:	205a      	movs	r0, #90	; 0x5a
  40059e:	47a0      	blx	r4
	WM8904_HPL_ENA_OUTP | WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_ENA_OUTP | WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  4005a0:	21ff      	movs	r1, #255	; 0xff
  4005a2:	205a      	movs	r0, #90	; 0x5a
  4005a4:	47a0      	blx	r4
	WM8904_HPL_RMV_SHORT | WM8904_HPL_ENA_OUTP | WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_RMV_SHORT | WM8904_HPR_ENA_OUTP | WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_OUT1_LEFT, WM8904_HPOUT_VU | WM8904_HPOUTL_VOL(0x39));
  4005a6:	21b9      	movs	r1, #185	; 0xb9
  4005a8:	2039      	movs	r0, #57	; 0x39
  4005aa:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_OUT1_RIGHT, WM8904_HPOUT_VU | WM8904_HPOUTR_VOL(0x39));
  4005ac:	203a      	movs	r0, #58	; 0x3a
  4005ae:	21b9      	movs	r1, #185	; 0xb9
  4005b0:	47a0      	blx	r4
	delay_ms(100);
  4005b2:	4638      	mov	r0, r7
  4005b4:	462b      	mov	r3, r5
}
  4005b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	delay_ms(100);
  4005ba:	4718      	bx	r3
  4005bc:	00401301 	.word	0x00401301
  4005c0:	0003dbc2 	.word	0x0003dbc2
  4005c4:	0040133d 	.word	0x0040133d
  4005c8:	20400001 	.word	0x20400001
  4005cc:	004d2b25 	.word	0x004d2b25

004005d0 <computeWaveletPitch>:
	float pitchF = 0.0f;
	int32_t i, j;
	float si, si1;
	float power; 
	
	arm_copy_f32(samples, sam, WIN_SIZE); 
  4005d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4005d4:	4995      	ldr	r1, [pc, #596]	; (40082c <computeWaveletPitch+0x25c>)
  4005d6:	4b96      	ldr	r3, [pc, #600]	; (400830 <computeWaveletPitch+0x260>)
	
	return pitchF;
}

float computeWaveletPitch(float * samples)
{
  4005d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int32_t curSamNb = WIN_SIZE;
  4005dc:	4692      	mov	sl, r2
	int32_t curLevel = 0;
  4005de:	2400      	movs	r4, #0
		memset(distances, 0, WIN_SIZE*sizeof(int32_t));
  4005e0:	f8df b268 	ldr.w	fp, [pc, #616]	; 40084c <computeWaveletPitch+0x27c>
{
  4005e4:	ed2d 8b04 	vpush	{d8-d9}
  4005e8:	b087      	sub	sp, #28
	float curModeDistance = -1.0f;
  4005ea:	eeff 9a00 	vmov.f32	s19, #240	; 0xbf800000 -1.0
	arm_copy_f32(samples, sam, WIN_SIZE); 
  4005ee:	4798      	blx	r3
		arm_max_f32(sam, WIN_SIZE, &maxValue, &temp_idx); 
  4005f0:	4651      	mov	r1, sl
  4005f2:	ab03      	add	r3, sp, #12
  4005f4:	aa04      	add	r2, sp, #16
  4005f6:	488d      	ldr	r0, [pc, #564]	; (40082c <computeWaveletPitch+0x25c>)
	int32_t curLevel = 0;
  4005f8:	9400      	str	r4, [sp, #0]
		arm_max_f32(sam, WIN_SIZE, &maxValue, &temp_idx); 
  4005fa:	4c8e      	ldr	r4, [pc, #568]	; (400834 <computeWaveletPitch+0x264>)
  4005fc:	47a0      	blx	r4
		arm_min_f32(sam, WIN_SIZE, &minValue, &temp_idx); 
  4005fe:	ab03      	add	r3, sp, #12
  400600:	aa05      	add	r2, sp, #20
  400602:	4651      	mov	r1, sl
  400604:	4889      	ldr	r0, [pc, #548]	; (40082c <computeWaveletPitch+0x25c>)
  400606:	4c8c      	ldr	r4, [pc, #560]	; (400838 <computeWaveletPitch+0x268>)
  400608:	47a0      	blx	r4
		float amplitudeMax = (maxValue > -minValue ? maxValue : -minValue);
  40060a:	ed9d 9a05 	vldr	s18, [sp, #20]
		ampltitudeThreshold = amplitudeMax*maximaThresholdRatio;		
  40060e:	eef6 7a08 	vmov.f32	s15, #104	; 0x3f400000  0.750
		float amplitudeMax = (maxValue > -minValue ? maxValue : -minValue);
  400612:	ed9d 7a04 	vldr	s14, [sp, #16]
  400616:	eeb1 9a49 	vneg.f32	s18, s18
	int32_t res = 1, j;
  40061a:	2301      	movs	r3, #1
		delta = DYW_SAMPLING_RATE/(_2power(curLevel)*maxF);
  40061c:	eddf 8a87 	vldr	s17, [pc, #540]	; 40083c <computeWaveletPitch+0x26c>
		if (curSamNb < 2) return pitchF;
  400620:	ed9f 8a87 	vldr	s16, [pc, #540]	; 400840 <computeWaveletPitch+0x270>
		float amplitudeMax = (maxValue > -minValue ? maxValue : -minValue);
  400624:	fe89 9a07 	vmaxnm.f32	s18, s18, s14
		ampltitudeThreshold = amplitudeMax*maximaThresholdRatio;		
  400628:	ee29 9a27 	vmul.f32	s18, s18, s15
		delta = DYW_SAMPLING_RATE/(_2power(curLevel)*maxF);
  40062c:	ee07 3a90 	vmov	s15, r3
		if (curSamNb < 2) return pitchF;
  400630:	f1ba 0f01 	cmp.w	sl, #1
		delta = DYW_SAMPLING_RATE/(_2power(curLevel)*maxF);
  400634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400638:	ee88 7aa7 	vdiv.f32	s14, s17, s15
  40063c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
  400640:	ee17 4a90 	vmov	r4, s15
		if (curSamNb < 2) return pitchF;
  400644:	f340 8284 	ble.w	400b50 <computeWaveletPitch+0x580>
  400648:	f1ba 0f03 	cmp.w	sl, #3
  40064c:	f340 826b 	ble.w	400b26 <computeWaveletPitch+0x556>
  400650:	f1aa 0e04 	sub.w	lr, sl, #4
  400654:	4b75      	ldr	r3, [pc, #468]	; (40082c <computeWaveletPitch+0x25c>)
  400656:	2000      	movs	r0, #0
  400658:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 400850 <computeWaveletPitch+0x280>
  40065c:	f02e 0e01 	bic.w	lr, lr, #1
  400660:	4619      	mov	r1, r3
  400662:	9301      	str	r3, [sp, #4]
  400664:	4602      	mov	r2, r0
  400666:	edd3 7a00 	vldr	s15, [r3]
  40066a:	f10e 0e03 	add.w	lr, lr, #3
  40066e:	4606      	mov	r6, r0
  400670:	4605      	mov	r5, r0
  400672:	46c4      	mov	ip, r8
  400674:	eeb0 7a48 	vmov.f32	s14, s16
  400678:	2301      	movs	r3, #1
  40067a:	e050      	b.n	40071e <computeWaveletPitch+0x14e>
						if (i -1 > lastmaxIndex + delta) 
  40067c:	2201      	movs	r2, #1
			si = sam[i]; // - theDC;
  40067e:	edd1 7a02 	vldr	s15, [r1, #8]
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
  400682:	eef5 7a40 	vcmp.f32	s15, #0.0
  400686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40068a:	dd06      	ble.n	40069a <computeWaveletPitch+0xca>
  40068c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400694:	d801      	bhi.n	40069a <computeWaveletPitch+0xca>
  400696:	2000      	movs	r0, #0
  400698:	2201      	movs	r2, #1
			if (si1 >= 0 && si < 0) {findMin = 1; findMax = 0; }
  40069a:	eef5 7a40 	vcmp.f32	s15, #0.0
  40069e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006a2:	d506      	bpl.n	4006b2 <computeWaveletPitch+0xe2>
  4006a4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  4006a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006ac:	db01      	blt.n	4006b2 <computeWaveletPitch+0xe2>
  4006ae:	2001      	movs	r0, #1
  4006b0:	2200      	movs	r2, #0
			if (previousDV > -1000.0f) 
  4006b2:	eeb4 6ac8 	vcmpe.f32	s12, s16
			dv = si - si1;
  4006b6:	ee37 7ae6 	vsub.f32	s14, s15, s13
			if (previousDV > -1000.0f) 
  4006ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006be:	dd2a      	ble.n	400716 <computeWaveletPitch+0x146>
				if (findMin && previousDV < 0.0f && dv >= 0.0f) 
  4006c0:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
  4006c4:	f000 0701 	and.w	r7, r0, #1
  4006c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006cc:	bf58      	it	pl
  4006ce:	2700      	movpl	r7, #0
  4006d0:	b1af      	cbz	r7, 4006fe <computeWaveletPitch+0x12e>
  4006d2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  4006d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006da:	db10      	blt.n	4006fe <computeWaveletPitch+0x12e>
					if (Abs(si1) >= ampltitudeThreshold) 
  4006dc:	eef0 5ae6 	vabs.f32	s11, s13
  4006e0:	eeb4 9ae5 	vcmpe.f32	s18, s11
  4006e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006e8:	d809      	bhi.n	4006fe <computeWaveletPitch+0x12e>
						if (i - 1 > lastMinIndex + delta)
  4006ea:	eb04 070c 	add.w	r7, r4, ip
  4006ee:	429f      	cmp	r7, r3
  4006f0:	da05      	bge.n	4006fe <computeWaveletPitch+0x12e>
							mins[nbMins++] = i - 1;
  4006f2:	4854      	ldr	r0, [pc, #336]	; (400844 <computeWaveletPitch+0x274>)
  4006f4:	469c      	mov	ip, r3
  4006f6:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
  4006fa:	3501      	adds	r5, #1
							findMin = 0;
  4006fc:	2000      	movs	r0, #0
				if (findMax && previousDV > 0.0f && dv <= 0.0f) 
  4006fe:	eeb5 6a40 	vcmp.f32	s12, #0.0
  400702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400706:	dd06      	ble.n	400716 <computeWaveletPitch+0x146>
  400708:	b12a      	cbz	r2, 400716 <computeWaveletPitch+0x146>
  40070a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  40070e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400712:	d96b      	bls.n	4007ec <computeWaveletPitch+0x21c>
						if (i -1 > lastmaxIndex + delta) 
  400714:	2201      	movs	r2, #1
  400716:	3302      	adds	r3, #2
  400718:	3108      	adds	r1, #8
  40071a:	4573      	cmp	r3, lr
  40071c:	d07b      	beq.n	400816 <computeWaveletPitch+0x246>
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
  40071e:	eef5 7a40 	vcmp.f32	s15, #0.0
			si = sam[i]; // - theDC;
  400722:	edd1 6a01 	vldr	s13, [r1, #4]
  400726:	1e5f      	subs	r7, r3, #1
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
  400728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40072c:	d806      	bhi.n	40073c <computeWaveletPitch+0x16c>
  40072e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400736:	dd01      	ble.n	40073c <computeWaveletPitch+0x16c>
  400738:	2000      	movs	r0, #0
  40073a:	2201      	movs	r2, #1
			if (si1 >= 0 && si < 0) {findMin = 1; findMax = 0; }
  40073c:	eef5 7a40 	vcmp.f32	s15, #0.0
  400740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400744:	db06      	blt.n	400754 <computeWaveletPitch+0x184>
  400746:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  40074a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40074e:	d501      	bpl.n	400754 <computeWaveletPitch+0x184>
  400750:	2001      	movs	r0, #1
  400752:	2200      	movs	r2, #0
			if (previousDV > -1000.0f) 
  400754:	eeb4 7ac8 	vcmpe.f32	s14, s16
			dv = si - si1;
  400758:	ee36 6ae7 	vsub.f32	s12, s13, s15
			if (previousDV > -1000.0f) 
  40075c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400760:	dd8d      	ble.n	40067e <computeWaveletPitch+0xae>
				if (findMin && previousDV < 0.0f && dv >= 0.0f) 
  400762:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  400766:	f000 0901 	and.w	r9, r0, #1
  40076a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40076e:	bf58      	it	pl
  400770:	f04f 0900 	movpl.w	r9, #0
  400774:	f1b9 0f00 	cmp.w	r9, #0
  400778:	d015      	beq.n	4007a6 <computeWaveletPitch+0x1d6>
  40077a:	eeb5 6a40 	vcmp.f32	s12, #0.0
  40077e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400782:	db10      	blt.n	4007a6 <computeWaveletPitch+0x1d6>
					if (Abs(si1) >= ampltitudeThreshold) 
  400784:	eef0 5ae7 	vabs.f32	s11, s15
  400788:	eeb4 9ae5 	vcmpe.f32	s18, s11
  40078c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400790:	d809      	bhi.n	4007a6 <computeWaveletPitch+0x1d6>
						if (i - 1 > lastMinIndex + delta)
  400792:	eb04 090c 	add.w	r9, r4, ip
  400796:	45b9      	cmp	r9, r7
  400798:	da05      	bge.n	4007a6 <computeWaveletPitch+0x1d6>
							mins[nbMins++] = i - 1;
  40079a:	482a      	ldr	r0, [pc, #168]	; (400844 <computeWaveletPitch+0x274>)
  40079c:	46bc      	mov	ip, r7
  40079e:	f840 7025 	str.w	r7, [r0, r5, lsl #2]
  4007a2:	3501      	adds	r5, #1
							findMin = 0;
  4007a4:	2000      	movs	r0, #0
				if (findMax && previousDV > 0.0f && dv <= 0.0f) 
  4007a6:	eeb5 7a40 	vcmp.f32	s14, #0.0
  4007aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4007ae:	f77f af66 	ble.w	40067e <computeWaveletPitch+0xae>
  4007b2:	2a00      	cmp	r2, #0
  4007b4:	f43f af63 	beq.w	40067e <computeWaveletPitch+0xae>
  4007b8:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
  4007bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4007c0:	f63f af5c 	bhi.w	40067c <computeWaveletPitch+0xac>
					if (Abs(si1) >= ampltitudeThreshold) 
  4007c4:	eef0 7ae7 	vabs.f32	s15, s15
  4007c8:	eeb4 9ae7 	vcmpe.f32	s18, s15
  4007cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4007d0:	f63f af54 	bhi.w	40067c <computeWaveletPitch+0xac>
						if (i -1 > lastmaxIndex + delta) 
  4007d4:	eb04 0208 	add.w	r2, r4, r8
  4007d8:	42ba      	cmp	r2, r7
  4007da:	f6bf af4f 	bge.w	40067c <computeWaveletPitch+0xac>
							maxs[nbMaxs++] = i - 1;
  4007de:	4a1a      	ldr	r2, [pc, #104]	; (400848 <computeWaveletPitch+0x278>)
  4007e0:	46b8      	mov	r8, r7
  4007e2:	f842 7026 	str.w	r7, [r2, r6, lsl #2]
  4007e6:	3601      	adds	r6, #1
							findMax = 0;
  4007e8:	2200      	movs	r2, #0
  4007ea:	e748      	b.n	40067e <computeWaveletPitch+0xae>
					if (Abs(si1) >= ampltitudeThreshold) 
  4007ec:	eef0 6ae6 	vabs.f32	s13, s13
  4007f0:	eeb4 9ae6 	vcmpe.f32	s18, s13
  4007f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4007f8:	d88c      	bhi.n	400714 <computeWaveletPitch+0x144>
						if (i -1 > lastmaxIndex + delta) 
  4007fa:	eb04 0208 	add.w	r2, r4, r8
  4007fe:	429a      	cmp	r2, r3
  400800:	da88      	bge.n	400714 <computeWaveletPitch+0x144>
							maxs[nbMaxs++] = i - 1;
  400802:	4a11      	ldr	r2, [pc, #68]	; (400848 <computeWaveletPitch+0x278>)
  400804:	4698      	mov	r8, r3
  400806:	3108      	adds	r1, #8
  400808:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  40080c:	3302      	adds	r3, #2
  40080e:	3601      	adds	r6, #1
							findMax = 0;
  400810:	2200      	movs	r2, #0
  400812:	4573      	cmp	r3, lr
  400814:	d183      	bne.n	40071e <computeWaveletPitch+0x14e>
  400816:	9f01      	ldr	r7, [sp, #4]
  400818:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
							mins[nbMins++] = i - 1;
  40081c:	f8df 9024 	ldr.w	r9, [pc, #36]	; 400844 <computeWaveletPitch+0x274>
  400820:	46a6      	mov	lr, r4
  400822:	4419      	add	r1, r3
  400824:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  400828:	e01a      	b.n	400860 <computeWaveletPitch+0x290>
  40082a:	bf00      	nop
  40082c:	20407400 	.word	0x20407400
  400830:	004031c1 	.word	0x004031c1
  400834:	0040335d 	.word	0x0040335d
  400838:	00403281 	.word	0x00403281
  40083c:	41780419 	.word	0x41780419
  400840:	c47a0000 	.word	0xc47a0000
  400844:	20406400 	.word	0x20406400
  400848:	20405400 	.word	0x20405400
  40084c:	20404400 	.word	0x20404400
  400850:	fff0bdc0 	.word	0xfff0bdc0
						if (i -1 > lastmaxIndex + delta) 
  400854:	2201      	movs	r2, #1
		for (i = 1; i < curSamNb; i++) 
  400856:	3301      	adds	r3, #1
			dv = si - si1;
  400858:	eeb0 7a67 	vmov.f32	s14, s15
		for (i = 1; i < curSamNb; i++) 
  40085c:	459a      	cmp	sl, r3
  40085e:	dd65      	ble.n	40092c <computeWaveletPitch+0x35c>
			si = sam[i]; // - theDC;
  400860:	edd1 7a01 	vldr	s15, [r1, #4]
  400864:	1e5f      	subs	r7, r3, #1
			si1 = sam[i-1]; // - theDC;
  400866:	ecf1 6a01 	vldmia	r1!, {s13}
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
  40086a:	eef5 7a40 	vcmp.f32	s15, #0.0
  40086e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400872:	dd06      	ble.n	400882 <computeWaveletPitch+0x2b2>
  400874:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40087c:	d801      	bhi.n	400882 <computeWaveletPitch+0x2b2>
  40087e:	2000      	movs	r0, #0
  400880:	2201      	movs	r2, #1
			if (si1 >= 0 && si < 0) {findMin = 1; findMax = 0; }
  400882:	eef5 7a40 	vcmp.f32	s15, #0.0
  400886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40088a:	d506      	bpl.n	40089a <computeWaveletPitch+0x2ca>
  40088c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400894:	db01      	blt.n	40089a <computeWaveletPitch+0x2ca>
  400896:	2001      	movs	r0, #1
  400898:	2200      	movs	r2, #0
			if (previousDV > -1000.0f) 
  40089a:	eeb4 7ac8 	vcmpe.f32	s14, s16
			dv = si - si1;
  40089e:	ee77 7ae6 	vsub.f32	s15, s15, s13
			if (previousDV > -1000.0f) 
  4008a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008a6:	ddd6      	ble.n	400856 <computeWaveletPitch+0x286>
				if (findMin && previousDV < 0.0f && dv >= 0.0f) 
  4008a8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  4008ac:	f000 0401 	and.w	r4, r0, #1
  4008b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008b4:	bf58      	it	pl
  4008b6:	2400      	movpl	r4, #0
  4008b8:	b1a4      	cbz	r4, 4008e4 <computeWaveletPitch+0x314>
  4008ba:	eef5 7a40 	vcmp.f32	s15, #0.0
  4008be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008c2:	db0f      	blt.n	4008e4 <computeWaveletPitch+0x314>
					if (Abs(si1) >= ampltitudeThreshold) 
  4008c4:	eeb0 6ae6 	vabs.f32	s12, s13
  4008c8:	eeb4 9ac6 	vcmpe.f32	s18, s12
  4008cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008d0:	d808      	bhi.n	4008e4 <computeWaveletPitch+0x314>
						if (i - 1 > lastMinIndex + delta)
  4008d2:	eb0e 040c 	add.w	r4, lr, ip
  4008d6:	42bc      	cmp	r4, r7
  4008d8:	da04      	bge.n	4008e4 <computeWaveletPitch+0x314>
							mins[nbMins++] = i - 1;
  4008da:	f849 7025 	str.w	r7, [r9, r5, lsl #2]
  4008de:	46bc      	mov	ip, r7
  4008e0:	3501      	adds	r5, #1
							findMin = 0;
  4008e2:	2000      	movs	r0, #0
				if (findMax && previousDV > 0.0f && dv <= 0.0f) 
  4008e4:	eeb5 7a40 	vcmp.f32	s14, #0.0
  4008e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008ec:	ddb3      	ble.n	400856 <computeWaveletPitch+0x286>
  4008ee:	2a00      	cmp	r2, #0
  4008f0:	d0b1      	beq.n	400856 <computeWaveletPitch+0x286>
  4008f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  4008f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008fa:	d8ab      	bhi.n	400854 <computeWaveletPitch+0x284>
					if (Abs(si1) >= ampltitudeThreshold) 
  4008fc:	eef0 6ae6 	vabs.f32	s13, s13
  400900:	eeb4 9ae6 	vcmpe.f32	s18, s13
  400904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400908:	d8a4      	bhi.n	400854 <computeWaveletPitch+0x284>
						if (i -1 > lastmaxIndex + delta) 
  40090a:	eb0e 0208 	add.w	r2, lr, r8
  40090e:	42ba      	cmp	r2, r7
  400910:	daa0      	bge.n	400854 <computeWaveletPitch+0x284>
		for (i = 1; i < curSamNb; i++) 
  400912:	3301      	adds	r3, #1
							maxs[nbMaxs++] = i - 1;
  400914:	4acf      	ldr	r2, [pc, #828]	; (400c54 <computeWaveletPitch+0x684>)
  400916:	46b8      	mov	r8, r7
			dv = si - si1;
  400918:	eeb0 7a67 	vmov.f32	s14, s15
		for (i = 1; i < curSamNb; i++) 
  40091c:	459a      	cmp	sl, r3
							maxs[nbMaxs++] = i - 1;
  40091e:	f842 7026 	str.w	r7, [r2, r6, lsl #2]
  400922:	f106 0601 	add.w	r6, r6, #1
							findMax = 0;
  400926:	f04f 0200 	mov.w	r2, #0
		for (i = 1; i < curSamNb; i++) 
  40092a:	dc99      	bgt.n	400860 <computeWaveletPitch+0x290>
  40092c:	4674      	mov	r4, lr
		if (nbMins == 0 && nbMaxs == 0) 
  40092e:	b915      	cbnz	r5, 400936 <computeWaveletPitch+0x366>
  400930:	2e00      	cmp	r6, #0
  400932:	f000 810d 	beq.w	400b50 <computeWaveletPitch+0x580>
		memset(distances, 0, WIN_SIZE*sizeof(int32_t));
  400936:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40093a:	2100      	movs	r1, #0
  40093c:	4658      	mov	r0, fp
  40093e:	4bc6      	ldr	r3, [pc, #792]	; (400c58 <computeWaveletPitch+0x688>)
  400940:	4798      	blx	r3
		for (i = 0 ; i < nbMins ; i++) 
  400942:	b34d      	cbz	r5, 400998 <computeWaveletPitch+0x3c8>
  400944:	f8df e32c 	ldr.w	lr, [pc, #812]	; 400c74 <computeWaveletPitch+0x6a4>
  400948:	2202      	movs	r2, #2
  40094a:	2700      	movs	r7, #0
  40094c:	4671      	mov	r1, lr
  40094e:	e012      	b.n	400976 <computeWaveletPitch+0x3a6>
					d = Abs(mins[i] - mins[i+j]);
  400950:	f8d1 c000 	ldr.w	ip, [r1]
  400954:	684b      	ldr	r3, [r1, #4]
  400956:	ebac 0303 	sub.w	r3, ip, r3
  40095a:	2b00      	cmp	r3, #0
  40095c:	bfb8      	it	lt
  40095e:	425b      	neglt	r3, r3
				if (i+j < nbMins) 
  400960:	42aa      	cmp	r2, r5
					distances[d]++; 
  400962:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
  400966:	f100 0001 	add.w	r0, r0, #1
  40096a:	f84b 0023 	str.w	r0, [fp, r3, lsl #2]
				if (i+j < nbMins) 
  40096e:	f2c0 80cc 	blt.w	400b0a <computeWaveletPitch+0x53a>
  400972:	3104      	adds	r1, #4
  400974:	3201      	adds	r2, #1
  400976:	3701      	adds	r7, #1
  400978:	42af      	cmp	r7, r5
  40097a:	dbe9      	blt.n	400950 <computeWaveletPitch+0x380>
  40097c:	42aa      	cmp	r2, r5
  40097e:	da0b      	bge.n	400998 <computeWaveletPitch+0x3c8>
					d = Abs(mins[i] - mins[i+j]);
  400980:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
  400984:	680b      	ldr	r3, [r1, #0]
  400986:	1a9b      	subs	r3, r3, r2
  400988:	2b00      	cmp	r3, #0
  40098a:	bfb8      	it	lt
  40098c:	425b      	neglt	r3, r3
					distances[d]++; 
  40098e:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
  400992:	3201      	adds	r2, #1
  400994:	f84b 2023 	str.w	r2, [fp, r3, lsl #2]
		for (i = 0 ; i < nbMaxs ; i++) 
  400998:	b346      	cbz	r6, 4009ec <computeWaveletPitch+0x41c>
  40099a:	4dae      	ldr	r5, [pc, #696]	; (400c54 <computeWaveletPitch+0x684>)
  40099c:	2202      	movs	r2, #2
  40099e:	2700      	movs	r7, #0
  4009a0:	4629      	mov	r1, r5
  4009a2:	e012      	b.n	4009ca <computeWaveletPitch+0x3fa>
					d = Abs(maxs[i] - maxs[i+j]);
  4009a4:	f8d1 e000 	ldr.w	lr, [r1]
  4009a8:	684b      	ldr	r3, [r1, #4]
  4009aa:	ebae 0303 	sub.w	r3, lr, r3
  4009ae:	2b00      	cmp	r3, #0
  4009b0:	bfb8      	it	lt
  4009b2:	425b      	neglt	r3, r3
				if (i+j < nbMaxs) 
  4009b4:	42b2      	cmp	r2, r6
					distances[d]++; 
  4009b6:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
  4009ba:	f100 0001 	add.w	r0, r0, #1
  4009be:	f84b 0023 	str.w	r0, [fp, r3, lsl #2]
				if (i+j < nbMaxs) 
  4009c2:	f2c0 818f 	blt.w	400ce4 <computeWaveletPitch+0x714>
  4009c6:	3104      	adds	r1, #4
  4009c8:	3201      	adds	r2, #1
  4009ca:	3701      	adds	r7, #1
  4009cc:	42b7      	cmp	r7, r6
  4009ce:	dbe9      	blt.n	4009a4 <computeWaveletPitch+0x3d4>
  4009d0:	42b2      	cmp	r2, r6
  4009d2:	da0b      	bge.n	4009ec <computeWaveletPitch+0x41c>
					d = Abs(maxs[i] - maxs[i+j]);
  4009d4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4009d8:	680b      	ldr	r3, [r1, #0]
  4009da:	1a9b      	subs	r3, r3, r2
  4009dc:	2b00      	cmp	r3, #0
  4009de:	bfb8      	it	lt
  4009e0:	425b      	neglt	r3, r3
					distances[d]++; 
  4009e2:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
  4009e6:	3201      	adds	r2, #1
  4009e8:	f84b 2023 	str.w	r2, [fp, r3, lsl #2]
		for (i = 0 ; i < nbMaxs ; i++) 
  4009ec:	f04f 36ff 	mov.w	r6, #4294967295
  4009f0:	f1c4 0e00 	rsb	lr, r4, #0
  4009f4:	2500      	movs	r5, #0
  4009f6:	f104 0c01 	add.w	ip, r4, #1
  4009fa:	4637      	mov	r7, r6
			for (j = -delta ; j <= delta ; j++) 
  4009fc:	4574      	cmp	r4, lr
  4009fe:	f2c0 8082 	blt.w	400b06 <computeWaveletPitch+0x536>
  400a02:	1b2b      	subs	r3, r5, r4
  400a04:	eb0c 0205 	add.w	r2, ip, r5
  400a08:	2100      	movs	r1, #0
				if (i+j >=0 && i+j < curSamNb)
  400a0a:	4553      	cmp	r3, sl
  400a0c:	da04      	bge.n	400a18 <computeWaveletPitch+0x448>
  400a0e:	2b00      	cmp	r3, #0
  400a10:	db02      	blt.n	400a18 <computeWaveletPitch+0x448>
					summed += distances[i+j];
  400a12:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
  400a16:	4401      	add	r1, r0
  400a18:	3301      	adds	r3, #1
			for (j = -delta ; j <= delta ; j++) 
  400a1a:	4293      	cmp	r3, r2
  400a1c:	d1f5      	bne.n	400a0a <computeWaveletPitch+0x43a>
			if (summed == bestValue) 
  400a1e:	42b9      	cmp	r1, r7
  400a20:	d06c      	beq.n	400afc <computeWaveletPitch+0x52c>
			else if (summed > bestValue) 
  400a22:	dd01      	ble.n	400a28 <computeWaveletPitch+0x458>
  400a24:	460f      	mov	r7, r1
  400a26:	462e      	mov	r6, r5
		for (i = 0; i< curSamNb; i++) 
  400a28:	3501      	adds	r5, #1
  400a2a:	4555      	cmp	r5, sl
  400a2c:	d1e6      	bne.n	4009fc <computeWaveletPitch+0x42c>
		for (j = -delta ; j <= delta ; j++) 
  400a2e:	4574      	cmp	r4, lr
  400a30:	f2c0 8087 	blt.w	400b42 <computeWaveletPitch+0x572>
  400a34:	ed9f 7a89 	vldr	s14, [pc, #548]	; 400c5c <computeWaveletPitch+0x68c>
  400a38:	1c62      	adds	r2, r4, #1
  400a3a:	1b33      	subs	r3, r6, r4
  400a3c:	eef0 6a47 	vmov.f32	s13, s14
  400a40:	4416      	add	r6, r2
			if (bestDistance+j >=0 && bestDistance+j < WIN_SIZE) 
  400a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  400a46:	d211      	bcs.n	400a6c <computeWaveletPitch+0x49c>
				int32_t nbDist = distances[bestDistance+j];
  400a48:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
					distAvg += (bestDistance+j)*nbDist;
  400a4c:	fb02 f103 	mul.w	r1, r2, r3
					nbDists += nbDist;
  400a50:	ee06 2a10 	vmov	s12, r2
				if (nbDist > 0) {
  400a54:	2a00      	cmp	r2, #0
					distAvg += (bestDistance+j)*nbDist;
  400a56:	ee07 1a90 	vmov	s15, r1
					nbDists += nbDist;
  400a5a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
					distAvg += (bestDistance+j)*nbDist;
  400a5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (nbDist > 0) {
  400a62:	dd03      	ble.n	400a6c <computeWaveletPitch+0x49c>
					nbDists += nbDist;
  400a64:	ee76 6a86 	vadd.f32	s13, s13, s12
					distAvg += (bestDistance+j)*nbDist;
  400a68:	ee37 7a27 	vadd.f32	s14, s14, s15
  400a6c:	3301      	adds	r3, #1
		for (j = -delta ; j <= delta ; j++) 
  400a6e:	42b3      	cmp	r3, r6
  400a70:	d1e7      	bne.n	400a42 <computeWaveletPitch+0x472>
  400a72:	ee87 6a26 	vdiv.f32	s12, s14, s13
				pitchF = DYW_SAMPLING_RATE/(_2power(curLevel-1)*curModeDistance);
  400a76:	9b00      	ldr	r3, [sp, #0]
		if (curModeDistance > -1.0f) 
  400a78:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  400a7c:	eef4 9ae7 	vcmpe.f32	s19, s15
  400a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400a84:	dd12      	ble.n	400aac <computeWaveletPitch+0x4dc>
			float similarity = Abs(distAvg*2 - curModeDistance);
  400a86:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
			if (similarity <= 2*delta) 
  400a8a:	0064      	lsls	r4, r4, #1
			float similarity = Abs(distAvg*2 - curModeDistance);
  400a8c:	eef0 6a69 	vmov.f32	s13, s19
			if (similarity <= 2*delta) 
  400a90:	ee07 4a90 	vmov	s15, r4
			float similarity = Abs(distAvg*2 - curModeDistance);
  400a94:	eed6 6a07 	vfnms.f32	s13, s12, s14
			if (similarity <= 2*delta) 
  400a98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			float similarity = Abs(distAvg*2 - curModeDistance);
  400a9c:	eeb0 7ae6 	vabs.f32	s14, s13
			if (similarity <= 2*delta) 
  400aa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
  400aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400aa8:	f240 8087 	bls.w	400bba <computeWaveletPitch+0x5ea>
		curLevel = curLevel + 1;
  400aac:	3301      	adds	r3, #1
		if (curLevel >= maxFLWTlevels) 
  400aae:	2b06      	cmp	r3, #6
		curLevel = curLevel + 1;
  400ab0:	9300      	str	r3, [sp, #0]
		if (curLevel >= maxFLWTlevels) 
  400ab2:	d04d      	beq.n	400b50 <computeWaveletPitch+0x580>
  400ab4:	9b01      	ldr	r3, [sp, #4]
		for (i = 0; i < curSamNb/2; i++)
  400ab6:	ea4f 0a6a 	mov.w	sl, sl, asr #1
  400aba:	4a69      	ldr	r2, [pc, #420]	; (400c60 <computeWaveletPitch+0x690>)
			sam[i] = (sam[2*i] + sam[2*i + 1]) * 0.5f;
  400abc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
  400ac0:	eb03 01ca 	add.w	r1, r3, sl, lsl #3
		for (i = 0; i < curSamNb/2; i++)
  400ac4:	4613      	mov	r3, r2
			sam[i] = (sam[2*i] + sam[2*i + 1]) * 0.5f;
  400ac6:	ed93 7a00 	vldr	s14, [r3]
  400aca:	3308      	adds	r3, #8
  400acc:	ed53 7a01 	vldr	s15, [r3, #-4]
		for (i = 0; i < curSamNb/2; i++)
  400ad0:	428b      	cmp	r3, r1
			sam[i] = (sam[2*i] + sam[2*i + 1]) * 0.5f;
  400ad2:	ee77 7a27 	vadd.f32	s15, s14, s15
  400ad6:	ee67 7aa6 	vmul.f32	s15, s15, s13
  400ada:	ece2 7a01 	vstmia	r2!, {s15}
		for (i = 0; i < curSamNb/2; i++)
  400ade:	d1f2      	bne.n	400ac6 <computeWaveletPitch+0x4f6>
	for (j = 0; j < i; j++) res <<= 1;
  400ae0:	9b00      	ldr	r3, [sp, #0]
  400ae2:	2b01      	cmp	r3, #1
  400ae4:	d057      	beq.n	400b96 <computeWaveletPitch+0x5c6>
  400ae6:	2b02      	cmp	r3, #2
  400ae8:	d030      	beq.n	400b4c <computeWaveletPitch+0x57c>
  400aea:	2b03      	cmp	r3, #3
  400aec:	d02c      	beq.n	400b48 <computeWaveletPitch+0x578>
  400aee:	2b05      	cmp	r3, #5
  400af0:	bf0c      	ite	eq
  400af2:	2320      	moveq	r3, #32
  400af4:	2310      	movne	r3, #16
		curModeDistance = distAvg;
  400af6:	eef0 9a46 	vmov.f32	s19, s12
  400afa:	e597      	b.n	40062c <computeWaveletPitch+0x5c>
				if (i == 2*bestDistance)
  400afc:	ebb5 0f46 	cmp.w	r5, r6, lsl #1
  400b00:	bf08      	it	eq
  400b02:	462e      	moveq	r6, r5
  400b04:	e790      	b.n	400a28 <computeWaveletPitch+0x458>
			int32_t summed = 0;
  400b06:	2100      	movs	r1, #0
  400b08:	e789      	b.n	400a1e <computeWaveletPitch+0x44e>
					d = Abs(mins[i] - mins[i+j]);
  400b0a:	f85e 3022 	ldr.w	r3, [lr, r2, lsl #2]
  400b0e:	ebac 0303 	sub.w	r3, ip, r3
  400b12:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
  400b16:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
					distances[d]++; 
  400b1a:	f85b 3020 	ldr.w	r3, [fp, r0, lsl #2]
  400b1e:	3301      	adds	r3, #1
  400b20:	f84b 3020 	str.w	r3, [fp, r0, lsl #2]
  400b24:	e725      	b.n	400972 <computeWaveletPitch+0x3a2>
		if (curSamNb < 2) return pitchF;
  400b26:	2000      	movs	r0, #0
  400b28:	494d      	ldr	r1, [pc, #308]	; (400c60 <computeWaveletPitch+0x690>)
  400b2a:	f8df 814c 	ldr.w	r8, [pc, #332]	; 400c78 <computeWaveletPitch+0x6a8>
  400b2e:	eeb0 7a48 	vmov.f32	s14, s16
  400b32:	2301      	movs	r3, #1
  400b34:	4602      	mov	r2, r0
  400b36:	4606      	mov	r6, r0
  400b38:	4605      	mov	r5, r0
  400b3a:	46c4      	mov	ip, r8
  400b3c:	9101      	str	r1, [sp, #4]
  400b3e:	460f      	mov	r7, r1
  400b40:	e66a      	b.n	400818 <computeWaveletPitch+0x248>
		for (j = -delta ; j <= delta ; j++) 
  400b42:	ed9f 6a48 	vldr	s12, [pc, #288]	; 400c64 <computeWaveletPitch+0x694>
  400b46:	e796      	b.n	400a76 <computeWaveletPitch+0x4a6>
	for (j = 0; j < i; j++) res <<= 1;
  400b48:	2308      	movs	r3, #8
  400b4a:	e7d4      	b.n	400af6 <computeWaveletPitch+0x526>
  400b4c:	2304      	movs	r3, #4
  400b4e:	e7d2      	b.n	400af6 <computeWaveletPitch+0x526>
		if (pitchtracker._prevPitch > -1.0f) 
  400b50:	4a45      	ldr	r2, [pc, #276]	; (400c68 <computeWaveletPitch+0x698>)
  400b52:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  400b56:	edd2 7a00 	vldr	s15, [r2]
  400b5a:	eef4 7ac7 	vcmpe.f32	s15, s14
  400b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400b62:	dd1a      	ble.n	400b9a <computeWaveletPitch+0x5ca>
			if (pitchtracker._pitchConfidence >= 1) 
  400b64:	6853      	ldr	r3, [r2, #4]
  400b66:	2b00      	cmp	r3, #0
  400b68:	dd20      	ble.n	400bac <computeWaveletPitch+0x5dc>
				pitchtracker._pitchConfidence = Max(0, pitchtracker._pitchConfidence - 1);
  400b6a:	3b01      	subs	r3, #1
  400b6c:	6053      	str	r3, [r2, #4]
	if (pitchtracker._pitchConfidence >= 1) 
  400b6e:	2b00      	cmp	r3, #0
  400b70:	dd13      	ble.n	400b9a <computeWaveletPitch+0x5ca>
	if (pitch < -1.0f) pitch = 0.0f;
  400b72:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
  400b76:	ed9f 7a39 	vldr	s14, [pc, #228]	; 400c5c <computeWaveletPitch+0x68c>
  400b7a:	eef4 7a66 	vcmp.f32	s15, s13
  400b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400b82:	bf48      	it	mi
  400b84:	eef0 7a47 	vmovmi.f32	s15, s14
	return _dywapitch_dynamicprocess(get_raw_pitch(samples)); 
  400b88:	ee17 0a90 	vmov	r0, s15
  400b8c:	b007      	add	sp, #28
  400b8e:	ecbd 8b04 	vpop	{d8-d9}
  400b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (j = 0; j < i; j++) res <<= 1;
  400b96:	2302      	movs	r3, #2
  400b98:	e7ad      	b.n	400af6 <computeWaveletPitch+0x526>
	float estimatedPitch = -1.0f;
  400b9a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  400b9e:	ee17 0a90 	vmov	r0, s15
  400ba2:	b007      	add	sp, #28
  400ba4:	ecbd 8b04 	vpop	{d8-d9}
  400ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				pitchtracker._pitchConfidence = 0;
  400bac:	2300      	movs	r3, #0
				pitchtracker._prevPitch = -1.0f;
  400bae:	ed82 7a00 	vstr	s14, [r2]
		pitch = -1.0f;
  400bb2:	eef0 7a47 	vmov.f32	s15, s14
				pitchtracker._pitchConfidence = 0;
  400bb6:	6053      	str	r3, [r2, #4]
  400bb8:	e7f1      	b.n	400b9e <computeWaveletPitch+0x5ce>
				pitchF = DYW_SAMPLING_RATE/(_2power(curLevel-1)*curModeDistance);
  400bba:	3b01      	subs	r3, #1
	for (j = 0; j < i; j++) res <<= 1;
  400bbc:	2b00      	cmp	r3, #0
  400bbe:	f340 808e 	ble.w	400cde <computeWaveletPitch+0x70e>
  400bc2:	2b01      	cmp	r3, #1
  400bc4:	f000 809e 	beq.w	400d04 <computeWaveletPitch+0x734>
  400bc8:	2b02      	cmp	r3, #2
  400bca:	f000 8099 	beq.w	400d00 <computeWaveletPitch+0x730>
  400bce:	2b04      	cmp	r3, #4
  400bd0:	bf0c      	ite	eq
  400bd2:	2310      	moveq	r3, #16
  400bd4:	2308      	movne	r3, #8
  400bd6:	ee07 3a90 	vmov	s15, r3
  400bda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				pitchF = DYW_SAMPLING_RATE/(_2power(curLevel-1)*curModeDistance);
  400bde:	ee69 9aa7 	vmul.f32	s19, s19, s15
  400be2:	eddf 6a22 	vldr	s13, [pc, #136]	; 400c6c <computeWaveletPitch+0x69c>
	if (pitch < 1.0f) pitch = -1.0f;
  400be6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
				pitchF = DYW_SAMPLING_RATE/(_2power(curLevel-1)*curModeDistance);
  400bea:	eec6 7aa9 	vdiv.f32	s15, s13, s19
	if (pitch < 1.0f) pitch = -1.0f;
  400bee:	eef4 7ac7 	vcmpe.f32	s15, s14
  400bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400bf6:	d4ab      	bmi.n	400b50 <computeWaveletPitch+0x580>
	if (pitch > -1.0) {
  400bf8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  400bfc:	eef4 7ac7 	vcmpe.f32	s15, s14
  400c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400c04:	dda4      	ble.n	400b50 <computeWaveletPitch+0x580>
		if (pitchtracker._prevPitch < 0.0f) 
  400c06:	4a18      	ldr	r2, [pc, #96]	; (400c68 <computeWaveletPitch+0x698>)
  400c08:	edd2 6a00 	vldr	s13, [r2]
  400c0c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400c14:	d43a      	bmi.n	400c8c <computeWaveletPitch+0x6bc>
		else if (abs(pitchtracker._prevPitch - pitch)/pitch < acceptedError) 
  400c16:	ee36 7ae7 	vsub.f32	s14, s13, s15
  400c1a:	ed9f 6a15 	vldr	s12, [pc, #84]	; 400c70 <computeWaveletPitch+0x6a0>
  400c1e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  400c22:	ee17 3a10 	vmov	r3, s14
  400c26:	2b00      	cmp	r3, #0
  400c28:	bfb8      	it	lt
  400c2a:	425b      	neglt	r3, r3
  400c2c:	ee07 3a10 	vmov	s14, r3
			pitchtracker._pitchConfidence = Min(maxConfidence, pitchtracker._pitchConfidence + 1); // maximum 3
  400c30:	6853      	ldr	r3, [r2, #4]
		else if (abs(pitchtracker._prevPitch - pitch)/pitch < acceptedError) 
  400c32:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  400c36:	eec7 5a27 	vdiv.f32	s11, s14, s15
  400c3a:	eef4 5ac6 	vcmpe.f32	s11, s12
  400c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400c42:	d51b      	bpl.n	400c7c <computeWaveletPitch+0x6ac>
			pitchtracker._pitchConfidence = Min(maxConfidence, pitchtracker._pitchConfidence + 1); // maximum 3
  400c44:	2b04      	cmp	r3, #4
			pitchtracker._prevPitch = pitch;
  400c46:	edc2 7a00 	vstr	s15, [r2]
			pitchtracker._pitchConfidence = Min(maxConfidence, pitchtracker._pitchConfidence + 1); // maximum 3
  400c4a:	bfd4      	ite	le
  400c4c:	3301      	addle	r3, #1
  400c4e:	2305      	movgt	r3, #5
				pitchtracker._pitchConfidence = max(0, pitchtracker._pitchConfidence - 1);
  400c50:	6053      	str	r3, [r2, #4]
  400c52:	e78c      	b.n	400b6e <computeWaveletPitch+0x59e>
  400c54:	20405400 	.word	0x20405400
  400c58:	0040447d 	.word	0x0040447d
  400c5c:	00000000 	.word	0x00000000
  400c60:	20407400 	.word	0x20407400
  400c64:	7fc00000 	.word	0x7fc00000
  400c68:	20400020 	.word	0x20400020
  400c6c:	4735a700 	.word	0x4735a700
  400c70:	3e4ccccd 	.word	0x3e4ccccd
  400c74:	20406400 	.word	0x20406400
  400c78:	fff0bdc0 	.word	0xfff0bdc0
		else if ((pitchtracker._pitchConfidence >= maxConfidence-2) && Abs(pitchtracker._prevPitch - 2.0f*pitch)/(2.0f*pitch) < acceptedError) 
  400c7c:	2b02      	cmp	r3, #2
  400c7e:	dc0a      	bgt.n	400c96 <computeWaveletPitch+0x6c6>
			if (pitchtracker._pitchConfidence >= 1) 
  400c80:	2b00      	cmp	r3, #0
  400c82:	dd03      	ble.n	400c8c <computeWaveletPitch+0x6bc>
				pitchtracker._pitchConfidence = max(0, pitchtracker._pitchConfidence - 1);
  400c84:	3b01      	subs	r3, #1
				estimatedPitch = pitchtracker._prevPitch;
  400c86:	eef0 7a66 	vmov.f32	s15, s13
  400c8a:	e7e1      	b.n	400c50 <computeWaveletPitch+0x680>
				pitchtracker._pitchConfidence = 1;
  400c8c:	2301      	movs	r3, #1
				pitchtracker._prevPitch = pitch;
  400c8e:	edc2 7a00 	vstr	s15, [r2]
				pitchtracker._pitchConfidence = 1;
  400c92:	6053      	str	r3, [r2, #4]
  400c94:	e76d      	b.n	400b72 <computeWaveletPitch+0x5a2>
		else if ((pitchtracker._pitchConfidence >= maxConfidence-2) && Abs(pitchtracker._prevPitch - 2.0f*pitch)/(2.0f*pitch) < acceptedError) 
  400c96:	ee37 7aa7 	vadd.f32	s14, s15, s15
  400c9a:	ee76 5ac7 	vsub.f32	s11, s13, s14
  400c9e:	eef0 5ae5 	vabs.f32	s11, s11
  400ca2:	ee85 5a87 	vdiv.f32	s10, s11, s14
  400ca6:	eeb4 5ac6 	vcmpe.f32	s10, s12
  400caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400cae:	d504      	bpl.n	400cba <computeWaveletPitch+0x6ea>
			pitchtracker._prevPitch = estimatedPitch;
  400cb0:	ed82 7a00 	vstr	s14, [r2]
			estimatedPitch = 2.0f*pitch;
  400cb4:	eef0 7a47 	vmov.f32	s15, s14
  400cb8:	e75b      	b.n	400b72 <computeWaveletPitch+0x5a2>
		else if ((pitchtracker._pitchConfidence >= maxConfidence-2) && Abs(pitchtracker._prevPitch - 0.5f*pitch)/(0.5f*pitch) < acceptedError) 
  400cba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
  400cbe:	ee67 7a87 	vmul.f32	s15, s15, s14
  400cc2:	ee36 7ae7 	vsub.f32	s14, s13, s15
  400cc6:	eeb0 7ac7 	vabs.f32	s14, s14
  400cca:	eec7 5a27 	vdiv.f32	s11, s14, s15
  400cce:	eef4 5ac6 	vcmpe.f32	s11, s12
  400cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400cd6:	d5d5      	bpl.n	400c84 <computeWaveletPitch+0x6b4>
			pitchtracker._prevPitch = estimatedPitch;
  400cd8:	edc2 7a00 	vstr	s15, [r2]
  400cdc:	e749      	b.n	400b72 <computeWaveletPitch+0x5a2>
	for (j = 0; j < i; j++) res <<= 1;
  400cde:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  400ce2:	e77c      	b.n	400bde <computeWaveletPitch+0x60e>
					d = Abs(maxs[i] - maxs[i+j]);
  400ce4:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
  400ce8:	ebae 0303 	sub.w	r3, lr, r3
  400cec:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
  400cf0:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
					distances[d]++; 
  400cf4:	f85b 3020 	ldr.w	r3, [fp, r0, lsl #2]
  400cf8:	3301      	adds	r3, #1
  400cfa:	f84b 3020 	str.w	r3, [fp, r0, lsl #2]
  400cfe:	e662      	b.n	4009c6 <computeWaveletPitch+0x3f6>
	for (j = 0; j < i; j++) res <<= 1;
  400d00:	2304      	movs	r3, #4
  400d02:	e768      	b.n	400bd6 <computeWaveletPitch+0x606>
  400d04:	2302      	movs	r3, #2
  400d06:	e766      	b.n	400bd6 <computeWaveletPitch+0x606>

00400d08 <PSOLA_init>:
static float prev_pitch_shifts[MAX_NUM_SHIFTS]; 
static float window[10*WIN_SIZE]; // sufficiently large window array  
/************************ Static variables *********************/

void PSOLA_init(void)
{
  400d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	arm_fill_f32(0.0f, input_ring_buffer, RING_BUFFER_SIZE); 
  400d0a:	2600      	movs	r6, #0
  400d0c:	4c19      	ldr	r4, [pc, #100]	; (400d74 <PSOLA_init+0x6c>)
  400d0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400d12:	4919      	ldr	r1, [pc, #100]	; (400d78 <PSOLA_init+0x70>)
  400d14:	4630      	mov	r0, r6
	arm_fill_f32(0.0f, output_ring_buffer, RING_BUFFER_SIZE);
	arm_fill_f32(0.0f, window, 10*WIN_SIZE); 
	arm_fill_f32(1.0f, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  400d16:	4d19      	ldr	r5, [pc, #100]	; (400d7c <PSOLA_init+0x74>)
	arm_fill_f32(0.0f, input_ring_buffer, RING_BUFFER_SIZE); 
  400d18:	47a0      	blx	r4
	arm_fill_f32(0.0f, output_ring_buffer, RING_BUFFER_SIZE);
  400d1a:	4630      	mov	r0, r6
  400d1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400d20:	4917      	ldr	r1, [pc, #92]	; (400d80 <PSOLA_init+0x78>)
  400d22:	47a0      	blx	r4
	arm_fill_f32(0.0f, window, 10*WIN_SIZE); 
  400d24:	4630      	mov	r0, r6
  400d26:	f44f 5220 	mov.w	r2, #10240	; 0x2800
  400d2a:	4916      	ldr	r1, [pc, #88]	; (400d84 <PSOLA_init+0x7c>)
  400d2c:	47a0      	blx	r4
  400d2e:	272c      	movs	r7, #44	; 0x2c
	arm_fill_f32(1.0f, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  400d30:	4629      	mov	r1, r5
  400d32:	220b      	movs	r2, #11
  400d34:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
	prev_pitch_shifts[0] = 1.0f; 
  400d38:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
	arm_fill_f32(1.0f, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  400d3c:	47a0      	blx	r4
	prev_pitch_shifts[1] = -1.0f; 
  400d3e:	4b12      	ldr	r3, [pc, #72]	; (400d88 <PSOLA_init+0x80>)
  400d40:	463a      	mov	r2, r7
  400d42:	4c12      	ldr	r4, [pc, #72]	; (400d8c <PSOLA_init+0x84>)
  400d44:	2100      	movs	r1, #0
  400d46:	4812      	ldr	r0, [pc, #72]	; (400d90 <PSOLA_init+0x88>)
  400d48:	606b      	str	r3, [r5, #4]
	prev_pitch_shifts[0] = 1.0f; 
  400d4a:	602e      	str	r6, [r5, #0]
  400d4c:	47a0      	blx	r4
  400d4e:	463a      	mov	r2, r7
  400d50:	2100      	movs	r1, #0
  400d52:	4810      	ldr	r0, [pc, #64]	; (400d94 <PSOLA_init+0x8c>)
	{
		outPtrList[i] = 0; 
		saved_samplesLeftInPeriod[i] = 0; 
	}
		
	current_num_shifts = 1; // always doing root 
  400d54:	2701      	movs	r7, #1
  400d56:	47a0      	blx	r4
  400d58:	4e0f      	ldr	r6, [pc, #60]	; (400d98 <PSOLA_init+0x90>)
	
	readPos = RING_BUFFER_SIZE - WIN_SIZE; // + WEIRD_OFFSET; 
  400d5a:	4c10      	ldr	r4, [pc, #64]	; (400d9c <PSOLA_init+0x94>)
  400d5c:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	inPtr = 0; 
  400d60:	490f      	ldr	r1, [pc, #60]	; (400da0 <PSOLA_init+0x98>)
  400d62:	2000      	movs	r0, #0
	inputPeriodLength = PSOLA_SAMPLE_RATE / MINIMUM_PITCH; 
  400d64:	4b0f      	ldr	r3, [pc, #60]	; (400da4 <PSOLA_init+0x9c>)
  400d66:	f240 12d1 	movw	r2, #465	; 0x1d1
	current_num_shifts = 1; // always doing root 
  400d6a:	6037      	str	r7, [r6, #0]
	readPos = RING_BUFFER_SIZE - WIN_SIZE; // + WEIRD_OFFSET; 
  400d6c:	6025      	str	r5, [r4, #0]
	inPtr = 0; 
  400d6e:	6008      	str	r0, [r1, #0]
	inputPeriodLength = PSOLA_SAMPLE_RATE / MINIMUM_PITCH; 
  400d70:	601a      	str	r2, [r3, #0]
  400d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400d74:	00403191 	.word	0x00403191
  400d78:	20409000 	.word	0x20409000
  400d7c:	20412000 	.word	0x20412000
  400d80:	2040e000 	.word	0x2040e000
  400d84:	2041205c 	.word	0x2041205c
  400d88:	bf800000 	.word	0xbf800000
  400d8c:	0040447d 	.word	0x0040447d
  400d90:	2040d000 	.word	0x2040d000
  400d94:	20412030 	.word	0x20412030
  400d98:	20408400 	.word	0x20408400
  400d9c:	2041202c 	.word	0x2041202c
  400da0:	20408404 	.word	0x20408404
  400da4:	20408408 	.word	0x20408408

00400da8 <create_harmonies>:
	currentPitch = MINIMUM_PITCH; 
}

// assumes valid pitch shifts 
void create_harmonies(float* input, float *output, float inputPitch, float *pitch_shifts_in, float harm_volume, float dry_volume)
{
  400da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400dac:	ed2d 8b06 	vpush	{d8-d10}
  400db0:	b08d      	sub	sp, #52	; 0x34
  400db2:	ee09 2a10 	vmov	s18, r2
  400db6:	4ca3      	ldr	r4, [pc, #652]	; (401044 <create_harmonies+0x29c>)
  400db8:	9308      	str	r3, [sp, #32]
	uint32_t i, w; 
	int32_t olaIdx; 
	
	uint32_t saved_inPtr = inPtr; 
  400dba:	4ba3      	ldr	r3, [pc, #652]	; (401048 <create_harmonies+0x2a0>)
{
  400dbc:	910b      	str	r1, [sp, #44]	; 0x2c
	uint32_t saved_inPtr = inPtr; 
  400dbe:	681b      	ldr	r3, [r3, #0]
{
  400dc0:	ed9d 8a1c 	vldr	s16, [sp, #112]	; 0x70
	uint32_t outPtr; 
	uint32_t pitch_idx = 0; 
	
	uint32_t starting_input_ptr = inPtr + WIN_SIZE; 
  400dc4:	461a      	mov	r2, r3
	uint32_t saved_inPtr = inPtr; 
  400dc6:	9306      	str	r3, [sp, #24]
{
  400dc8:	eddd 8a1d 	vldr	s17, [sp, #116]	; 0x74
	uint32_t starting_input_ptr = inPtr + WIN_SIZE; 
  400dcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  400dd0:	f502 6100 	add.w	r1, r2, #2048	; 0x800
	for (i = 0; i < WIN_SIZE; i++)
	{
		input_ring_buffer[(starting_input_ptr++) & RING_BUFFER_MASK] = input[i]; 
  400dd4:	f3c3 020b 	ubfx	r2, r3, #0, #12
  400dd8:	3301      	adds	r3, #1
  400dda:	f850 5b04 	ldr.w	r5, [r0], #4
  400dde:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	for (i = 0; i < WIN_SIZE; i++)
  400de2:	428b      	cmp	r3, r1
		input_ring_buffer[(starting_input_ptr++) & RING_BUFFER_MASK] = input[i]; 
  400de4:	6015      	str	r5, [r2, #0]
	for (i = 0; i < WIN_SIZE; i++)
  400de6:	d1f5      	bne.n	400dd4 <create_harmonies+0x2c>
	}
		
	uint32_t outLag;
	uint32_t inHalfAway;
	float periodRatio;
	float inputPeriodLengthRecip = 1.0f / inputPeriodLength;
  400de8:	4b98      	ldr	r3, [pc, #608]	; (40104c <create_harmonies+0x2a4>)
  400dea:	f8d3 8000 	ldr.w	r8, [r3]
  400dee:	ee07 8a90 	vmov	s15, r8
	uint32_t samplesLeftInPeriod = 0; 
	
	// pre-compute window function	
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400df2:	f1b8 0f00 	cmp.w	r8, #0
	float inputPeriodLengthRecip = 1.0f / inputPeriodLength;
  400df6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400dfa:	dd22      	ble.n	400e42 <create_harmonies+0x9a>
  400dfc:	ed9f 7a94 	vldr	s14, [pc, #592]	; 401050 <create_harmonies+0x2a8>
	{
		window[w] = (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  400e00:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
  400e04:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
  400e08:	4e92      	ldr	r6, [pc, #584]	; (401054 <create_harmonies+0x2ac>)
  400e0a:	eec7 9a27 	vdiv.f32	s19, s14, s15
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e0e:	2500      	movs	r5, #0
  400e10:	4f91      	ldr	r7, [pc, #580]	; (401058 <create_harmonies+0x2b0>)
		window[w] = (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  400e12:	ee07 5a90 	vmov	s15, r5
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e16:	3501      	adds	r5, #1
		window[w] = (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  400e18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400e1c:	ee67 7aa9 	vmul.f32	s15, s15, s19
  400e20:	ee17 0a90 	vmov	r0, s15
  400e24:	47b8      	blx	r7
  400e26:	ee07 0a90 	vmov	s15, r0
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e2a:	4b88      	ldr	r3, [pc, #544]	; (40104c <create_harmonies+0x2a4>)
		window[w] = (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  400e2c:	ee7a 7ae7 	vsub.f32	s15, s21, s15
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e30:	681b      	ldr	r3, [r3, #0]
		window[w] = (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  400e32:	ee67 7a8a 	vmul.f32	s15, s15, s20
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e36:	ebb5 0f43 	cmp.w	r5, r3, lsl #1
		window[w] = (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  400e3a:	ece6 7a01 	vstmia	r6!, {s15}
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e3e:	dbe8      	blt.n	400e12 <create_harmonies+0x6a>
  400e40:	4698      	mov	r8, r3
	}
		
	// for each pitch shift 
	while(pitch_shifts_in[pitch_idx] > 0.0f && pitch_idx < MAX_NUM_SHIFTS)
  400e42:	9908      	ldr	r1, [sp, #32]
  400e44:	ed91 7a00 	vldr	s14, [r1]
  400e48:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  400e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400e50:	f340 81f4 	ble.w	40123c <create_harmonies+0x494>
  400e54:	4b81      	ldr	r3, [pc, #516]	; (40105c <create_harmonies+0x2b4>)
  400e56:	ee07 8a90 	vmov	s15, r8
		
		if (pitch_idx > current_num_shifts - 1)
		{
			// find closest harmony for the onset of a new harmony 
			float tmp; 
			float min = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[0]); 
  400e5a:	4a81      	ldr	r2, [pc, #516]	; (401060 <create_harmonies+0x2b8>)
		periodRatio = 1.0f / pitch_shifts_in[pitch_idx]; 
  400e5c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
  400e60:	4618      	mov	r0, r3
  400e62:	9309      	str	r3, [sp, #36]	; 0x24
			outPtr = outPtrList[0]; 
			for (i = 1; i < current_num_shifts; i++)
			{
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400e64:	2300      	movs	r3, #0
  400e66:	eef8 0ae7 	vcvt.f32.s32	s1, s15
  400e6a:	6800      	ldr	r0, [r0, #0]
  400e6c:	3104      	adds	r1, #4
  400e6e:	469b      	mov	fp, r3
			float min = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[0]); 
  400e70:	ed92 1a00 	vldr	s2, [r2]
  400e74:	9003      	str	r0, [sp, #12]
  400e76:	3801      	subs	r0, #1
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400e78:	edd2 1a01 	vldr	s3, [r2, #4]
  400e7c:	f1c8 0900 	rsb	r9, r8, #0
  400e80:	900a      	str	r0, [sp, #40]	; 0x28
  400e82:	ed92 2a02 	vldr	s4, [r2, #8]
  400e86:	4877      	ldr	r0, [pc, #476]	; (401064 <create_harmonies+0x2bc>)
  400e88:	edd2 2a03 	vldr	s5, [r2, #12]
  400e8c:	ed92 3a04 	vldr	s6, [r2, #16]
  400e90:	edd2 3a05 	vldr	s7, [r2, #20]
  400e94:	ed92 4a06 	vldr	s8, [r2, #24]
  400e98:	edd2 4a07 	vldr	s9, [r2, #28]
  400e9c:	ed92 5a08 	vldr	s10, [r2, #32]
  400ea0:	edd2 5a09 	vldr	s11, [r2, #36]	; 0x24
  400ea4:	ed92 6a0a 	vldr	s12, [r2, #40]	; 0x28
  400ea8:	4d6f      	ldr	r5, [pc, #444]	; (401068 <create_harmonies+0x2c0>)
  400eaa:	9005      	str	r0, [sp, #20]
  400eac:	9107      	str	r1, [sp, #28]
		if (pitch_idx > current_num_shifts - 1)
  400eae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
		periodRatio = 1.0f / pitch_shifts_in[pitch_idx]; 
  400eb0:	eec0 9a07 	vdiv.f32	s19, s0, s14
		if (pitch_idx > current_num_shifts - 1)
  400eb4:	4593      	cmp	fp, r2
  400eb6:	f240 81b8 	bls.w	40122a <create_harmonies+0x482>
			outPtr = outPtrList[0]; 
  400eba:	4a6c      	ldr	r2, [pc, #432]	; (40106c <create_harmonies+0x2c4>)
			float min = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[0]); 
  400ebc:	ee77 7a41 	vsub.f32	s15, s14, s2
			outPtr = outPtrList[0]; 
  400ec0:	f8d2 e000 	ldr.w	lr, [r2]
			for (i = 1; i < current_num_shifts; i++)
  400ec4:	9a03      	ldr	r2, [sp, #12]
			float min = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[0]); 
  400ec6:	eef0 7ae7 	vabs.f32	s15, s15
			for (i = 1; i < current_num_shifts; i++)
  400eca:	2a01      	cmp	r2, #1
  400ecc:	f240 80d0 	bls.w	401070 <create_harmonies+0x2c8>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400ed0:	ee77 6a61 	vsub.f32	s13, s14, s3
  400ed4:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  400ed8:	eef4 7ae6 	vcmpe.f32	s15, s13
  400edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400ee0:	dd06      	ble.n	400ef0 <create_harmonies+0x148>
				{
					outPtr = outPtrList[i]; 
  400ee2:	4b62      	ldr	r3, [pc, #392]	; (40106c <create_harmonies+0x2c4>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400ee4:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  400ee8:	f8d3 e004 	ldr.w	lr, [r3, #4]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  400eec:	4b5d      	ldr	r3, [pc, #372]	; (401064 <create_harmonies+0x2bc>)
  400eee:	685b      	ldr	r3, [r3, #4]
			for (i = 1; i < current_num_shifts; i++)
  400ef0:	2a02      	cmp	r2, #2
  400ef2:	f000 80bd 	beq.w	401070 <create_harmonies+0x2c8>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400ef6:	ee77 6a42 	vsub.f32	s13, s14, s4
  400efa:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  400efe:	eef4 7ae6 	vcmpe.f32	s15, s13
  400f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400f06:	dd06      	ble.n	400f16 <create_harmonies+0x16e>
					outPtr = outPtrList[i]; 
  400f08:	4b58      	ldr	r3, [pc, #352]	; (40106c <create_harmonies+0x2c4>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400f0a:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  400f0e:	f8d3 e008 	ldr.w	lr, [r3, #8]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  400f12:	4b54      	ldr	r3, [pc, #336]	; (401064 <create_harmonies+0x2bc>)
  400f14:	689b      	ldr	r3, [r3, #8]
			for (i = 1; i < current_num_shifts; i++)
  400f16:	2a03      	cmp	r2, #3
  400f18:	f000 80aa 	beq.w	401070 <create_harmonies+0x2c8>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400f1c:	ee77 6a62 	vsub.f32	s13, s14, s5
  400f20:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  400f24:	eef4 7ae6 	vcmpe.f32	s15, s13
  400f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400f2c:	dd06      	ble.n	400f3c <create_harmonies+0x194>
					outPtr = outPtrList[i]; 
  400f2e:	4b4f      	ldr	r3, [pc, #316]	; (40106c <create_harmonies+0x2c4>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400f30:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  400f34:	f8d3 e00c 	ldr.w	lr, [r3, #12]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  400f38:	4b4a      	ldr	r3, [pc, #296]	; (401064 <create_harmonies+0x2bc>)
  400f3a:	68db      	ldr	r3, [r3, #12]
			for (i = 1; i < current_num_shifts; i++)
  400f3c:	2a04      	cmp	r2, #4
  400f3e:	f000 8097 	beq.w	401070 <create_harmonies+0x2c8>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400f42:	ee77 6a43 	vsub.f32	s13, s14, s6
  400f46:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  400f4a:	eef4 7ae6 	vcmpe.f32	s15, s13
  400f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400f52:	dd06      	ble.n	400f62 <create_harmonies+0x1ba>
					outPtr = outPtrList[i]; 
  400f54:	4b45      	ldr	r3, [pc, #276]	; (40106c <create_harmonies+0x2c4>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400f56:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  400f5a:	f8d3 e010 	ldr.w	lr, [r3, #16]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  400f5e:	4b41      	ldr	r3, [pc, #260]	; (401064 <create_harmonies+0x2bc>)
  400f60:	691b      	ldr	r3, [r3, #16]
			for (i = 1; i < current_num_shifts; i++)
  400f62:	2a05      	cmp	r2, #5
  400f64:	f000 8084 	beq.w	401070 <create_harmonies+0x2c8>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400f68:	ee77 6a63 	vsub.f32	s13, s14, s7
  400f6c:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  400f70:	eef4 7ae6 	vcmpe.f32	s15, s13
  400f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400f78:	dd06      	ble.n	400f88 <create_harmonies+0x1e0>
					outPtr = outPtrList[i]; 
  400f7a:	4b3c      	ldr	r3, [pc, #240]	; (40106c <create_harmonies+0x2c4>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400f7c:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  400f80:	f8d3 e014 	ldr.w	lr, [r3, #20]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  400f84:	4b37      	ldr	r3, [pc, #220]	; (401064 <create_harmonies+0x2bc>)
  400f86:	695b      	ldr	r3, [r3, #20]
			for (i = 1; i < current_num_shifts; i++)
  400f88:	2a06      	cmp	r2, #6
  400f8a:	d071      	beq.n	401070 <create_harmonies+0x2c8>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400f8c:	ee77 6a44 	vsub.f32	s13, s14, s8
  400f90:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  400f94:	eef4 7ae6 	vcmpe.f32	s15, s13
  400f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400f9c:	dd06      	ble.n	400fac <create_harmonies+0x204>
					outPtr = outPtrList[i]; 
  400f9e:	4b33      	ldr	r3, [pc, #204]	; (40106c <create_harmonies+0x2c4>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400fa0:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  400fa4:	f8d3 e018 	ldr.w	lr, [r3, #24]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  400fa8:	4b2e      	ldr	r3, [pc, #184]	; (401064 <create_harmonies+0x2bc>)
  400faa:	699b      	ldr	r3, [r3, #24]
			for (i = 1; i < current_num_shifts; i++)
  400fac:	2a07      	cmp	r2, #7
  400fae:	d05f      	beq.n	401070 <create_harmonies+0x2c8>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400fb0:	ee77 6a64 	vsub.f32	s13, s14, s9
  400fb4:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  400fb8:	eef4 7ae6 	vcmpe.f32	s15, s13
  400fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400fc0:	dd06      	ble.n	400fd0 <create_harmonies+0x228>
					outPtr = outPtrList[i]; 
  400fc2:	4b2a      	ldr	r3, [pc, #168]	; (40106c <create_harmonies+0x2c4>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400fc4:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  400fc8:	f8d3 e01c 	ldr.w	lr, [r3, #28]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  400fcc:	4b25      	ldr	r3, [pc, #148]	; (401064 <create_harmonies+0x2bc>)
  400fce:	69db      	ldr	r3, [r3, #28]
			for (i = 1; i < current_num_shifts; i++)
  400fd0:	2a08      	cmp	r2, #8
  400fd2:	d04d      	beq.n	401070 <create_harmonies+0x2c8>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400fd4:	ee77 6a45 	vsub.f32	s13, s14, s10
  400fd8:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  400fdc:	eef4 7ae6 	vcmpe.f32	s15, s13
  400fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400fe4:	dd06      	ble.n	400ff4 <create_harmonies+0x24c>
					outPtr = outPtrList[i]; 
  400fe6:	4b21      	ldr	r3, [pc, #132]	; (40106c <create_harmonies+0x2c4>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400fe8:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  400fec:	f8d3 e020 	ldr.w	lr, [r3, #32]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  400ff0:	4b1c      	ldr	r3, [pc, #112]	; (401064 <create_harmonies+0x2bc>)
  400ff2:	6a1b      	ldr	r3, [r3, #32]
			for (i = 1; i < current_num_shifts; i++)
  400ff4:	2a09      	cmp	r2, #9
  400ff6:	d03b      	beq.n	401070 <create_harmonies+0x2c8>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400ff8:	ee77 6a65 	vsub.f32	s13, s14, s11
  400ffc:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  401000:	eef4 7ae6 	vcmpe.f32	s15, s13
  401004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  401008:	dd06      	ble.n	401018 <create_harmonies+0x270>
					outPtr = outPtrList[i]; 
  40100a:	4b18      	ldr	r3, [pc, #96]	; (40106c <create_harmonies+0x2c4>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  40100c:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  401010:	f8d3 e024 	ldr.w	lr, [r3, #36]	; 0x24
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  401014:	4b13      	ldr	r3, [pc, #76]	; (401064 <create_harmonies+0x2bc>)
  401016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			for (i = 1; i < current_num_shifts; i++)
  401018:	2a0a      	cmp	r2, #10
  40101a:	d029      	beq.n	401070 <create_harmonies+0x2c8>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  40101c:	ee37 7a46 	vsub.f32	s14, s14, s12
  401020:	eeb0 7ac7 	vabs.f32	s14, s14
				if (tmp < min)
  401024:	eef4 7ac7 	vcmpe.f32	s15, s14
  401028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40102c:	dd04      	ble.n	401038 <create_harmonies+0x290>
					outPtr = outPtrList[i]; 
  40102e:	4b0f      	ldr	r3, [pc, #60]	; (40106c <create_harmonies+0x2c4>)
  401030:	f8d3 e028 	ldr.w	lr, [r3, #40]	; 0x28
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  401034:	4b0b      	ldr	r3, [pc, #44]	; (401064 <create_harmonies+0x2bc>)
  401036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			for (i = 1; i < current_num_shifts; i++)
  401038:	2a0b      	cmp	r2, #11
  40103a:	d019      	beq.n	401070 <create_harmonies+0x2c8>
  40103c:	4b02      	ldr	r3, [pc, #8]	; (401048 <create_harmonies+0x2a0>)
  40103e:	9a06      	ldr	r2, [sp, #24]
  401040:	601a      	str	r2, [r3, #0]
  401042:	bf00      	nop
  401044:	20409000 	.word	0x20409000
  401048:	20408404 	.word	0x20408404
  40104c:	20408408 	.word	0x20408408
  401050:	40490fdb 	.word	0x40490fdb
  401054:	2041205c 	.word	0x2041205c
  401058:	00403439 	.word	0x00403439
  40105c:	20408400 	.word	0x20408400
  401060:	20412000 	.word	0x20412000
  401064:	20412030 	.word	0x20412030
  401068:	2040e000 	.word	0x2040e000
  40106c:	2040d000 	.word	0x2040d000
  401070:	ea4f 028b 	mov.w	r2, fp, lsl #2
  401074:	9202      	str	r2, [sp, #8]
  401076:	ee60 9aa9 	vmul.f32	s19, s1, s19
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  40107a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40107e:	f8dd a018 	ldr.w	sl, [sp, #24]
  401082:	9204      	str	r2, [sp, #16]
  401084:	eefc 7ae9 	vcvt.u32.f32	s15, s19
  401088:	f8cd b000 	str.w	fp, [sp]
  40108c:	edcd 7a01 	vstr	s15, [sp, #4]
			samplesLeftInPeriod = saved_samplesLeftInPeriod[pitch_idx]; 
		}
		
		for (i = 0; i < WIN_SIZE; i++)
		{		
			if (samplesLeftInPeriod == 0)
  401090:	2b00      	cmp	r3, #0
  401092:	d13d      	bne.n	401110 <create_harmonies+0x368>
			{
				outLag = 1; 
			
				inHalfAway = (inPtr + RING_BUFFER_SIZE_D2) & RING_BUFFER_MASK;
  401094:	f50a 6c00 	add.w	ip, sl, #2048	; 0x800
  401098:	f3cc 0c0b 	ubfx	ip, ip, #0, #12
                
				if (inHalfAway < RING_BUFFER_SIZE_D2) 
  40109c:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
  4010a0:	f080 80bc 	bcs.w	40121c <create_harmonies+0x474>
				{
					/* The zero element of the input buffer lies
						in (inptr, inHalfAway] */
					if (outPtr < inHalfAway || outPtr > inPtr) {
  4010a4:	45f4      	cmp	ip, lr
  4010a6:	d832      	bhi.n	40110e <create_harmonies+0x366>
  4010a8:	45f2      	cmp	sl, lr
  4010aa:	d330      	bcc.n	40110e <create_harmonies+0x366>
  4010ac:	f50a 7b16 	add.w	fp, sl, #600	; 0x258
				}

				while(outLag == 1)
				{
					// set outPtr about the sample at which we OLA 
					outPtr = (outPtr + (uint32_t)((float)inputPeriodLength * periodRatio)) & RING_BUFFER_MASK; 
  4010b0:	9b01      	ldr	r3, [sp, #4]
  4010b2:	449e      	add	lr, r3
				
					// OLA 
					if (pitch_idx == 0)
  4010b4:	9b00      	ldr	r3, [sp, #0]
					outPtr = (outPtr + (uint32_t)((float)inputPeriodLength * periodRatio)) & RING_BUFFER_MASK; 
  4010b6:	f3ce 0e0b 	ubfx	lr, lr, #0, #12
					if (pitch_idx == 0)
  4010ba:	2b00      	cmp	r3, #0
  4010bc:	f040 8082 	bne.w	4011c4 <create_harmonies+0x41c>
					{
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  4010c0:	45c8      	cmp	r8, r9
  4010c2:	dd1e      	ble.n	401102 <create_harmonies+0x35a>
  4010c4:	ebae 0208 	sub.w	r2, lr, r8
  4010c8:	485f      	ldr	r0, [pc, #380]	; (401248 <create_harmonies+0x4a0>)
  4010ca:	eb0e 0708 	add.w	r7, lr, r8
  4010ce:	ebab 060e 	sub.w	r6, fp, lr
						{
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
							dry_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4010d2:	18b3      	adds	r3, r6, r2
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  4010d4:	f3c2 010b 	ubfx	r1, r2, #0, #12
							dry_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4010d8:	ecb0 7a01 	vldmia	r0!, {s14}
  4010dc:	3201      	adds	r2, #1
  4010de:	f3c3 030b 	ubfx	r3, r3, #0, #12
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  4010e2:	eb05 0181 	add.w	r1, r5, r1, lsl #2
							dry_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4010e6:	ee27 7a28 	vmul.f32	s14, s14, s17
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  4010ea:	4297      	cmp	r7, r2
							dry_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4010ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  4010f0:	edd1 7a00 	vldr	s15, [r1]
  4010f4:	edd3 6a00 	vldr	s13, [r3]
  4010f8:	eee7 7a26 	vfma.f32	s15, s14, s13
  4010fc:	edc1 7a00 	vstr	s15, [r1]
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  401100:	d1e7      	bne.n	4010d2 <create_harmonies+0x32a>
								harm_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
						}
					}
	
					
					if (inHalfAway < RING_BUFFER_SIZE_D2) 
  401102:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
  401106:	f080 8082 	bcs.w	40120e <create_harmonies+0x466>
					{
						/* The zero element of the input buffer lies
							in (inptr, inHalfAway] */
						if (outPtr < inHalfAway || outPtr > inPtr) {
  40110a:	45f4      	cmp	ip, lr
  40110c:	d950      	bls.n	4011b0 <create_harmonies+0x408>
						}
					}		
				}
			
				// assume uniform frequency within window 
				samplesLeftInPeriod = inputPeriodLength;
  40110e:	4643      	mov	r3, r8
		for (i = 0; i < WIN_SIZE; i++)
  401110:	9a04      	ldr	r2, [sp, #16]
			}
		
			--samplesLeftInPeriod; 
		
			// inc/wrap input ring buffer index 
			inPtr = (inPtr+1) & RING_BUFFER_MASK; 		
  401112:	f10a 0a01 	add.w	sl, sl, #1
			--samplesLeftInPeriod; 
  401116:	3b01      	subs	r3, #1
		for (i = 0; i < WIN_SIZE; i++)
  401118:	3a01      	subs	r2, #1
			inPtr = (inPtr+1) & RING_BUFFER_MASK; 		
  40111a:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
		for (i = 0; i < WIN_SIZE; i++)
  40111e:	9204      	str	r2, [sp, #16]
  401120:	d1b6      	bne.n	401090 <create_harmonies+0x2e8>
		}

		saved_samplesLeftInPeriod[pitch_idx] = samplesLeftInPeriod; 
  401122:	9a05      	ldr	r2, [sp, #20]
		outPtrList[pitch_idx] = outPtr; 
  401124:	9902      	ldr	r1, [sp, #8]
		saved_samplesLeftInPeriod[pitch_idx] = samplesLeftInPeriod; 
  401126:	6013      	str	r3, [r2, #0]
		outPtrList[pitch_idx] = outPtr; 
  401128:	4a48      	ldr	r2, [pc, #288]	; (40124c <create_harmonies+0x4a4>)
  40112a:	f8dd b000 	ldr.w	fp, [sp]
  40112e:	f842 e001 	str.w	lr, [r2, r1]
	while(pitch_shifts_in[pitch_idx] > 0.0f && pitch_idx < MAX_NUM_SHIFTS)
  401132:	9a07      	ldr	r2, [sp, #28]
		pitch_idx++;  
  401134:	f10b 0b01 	add.w	fp, fp, #1
	while(pitch_shifts_in[pitch_idx] > 0.0f && pitch_idx < MAX_NUM_SHIFTS)
  401138:	ecb2 7a01 	vldmia	r2!, {s14}
  40113c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  401140:	9207      	str	r2, [sp, #28]
  401142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  401146:	dd07      	ble.n	401158 <create_harmonies+0x3b0>
  401148:	9a05      	ldr	r2, [sp, #20]
  40114a:	f1bb 0f0b 	cmp.w	fp, #11
  40114e:	f102 0204 	add.w	r2, r2, #4
  401152:	9205      	str	r2, [sp, #20]
  401154:	f47f aeab 	bne.w	400eae <create_harmonies+0x106>
  401158:	4b3d      	ldr	r3, [pc, #244]	; (401250 <create_harmonies+0x4a8>)
  40115a:	f8c3 a000 	str.w	sl, [r3]
  40115e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	}
	
	for(i = 0; i < WIN_SIZE; i++)
	{
		output[i] = output_ring_buffer[readPos]; 	
		output_ring_buffer[readPos] = 0.0f;
  401160:	2400      	movs	r4, #0
  401162:	493c      	ldr	r1, [pc, #240]	; (401254 <create_harmonies+0x4ac>)
  401164:	4e3c      	ldr	r6, [pc, #240]	; (401258 <create_harmonies+0x4b0>)
  401166:	f502 5580 	add.w	r5, r2, #4096	; 0x1000
  40116a:	680b      	ldr	r3, [r1, #0]
		output[i] = output_ring_buffer[readPos]; 	
  40116c:	eb06 0083 	add.w	r0, r6, r3, lsl #2
		readPos = (readPos+1) & RING_BUFFER_MASK;
  401170:	3301      	adds	r3, #1
		output[i] = output_ring_buffer[readPos]; 	
  401172:	6807      	ldr	r7, [r0, #0]
		readPos = (readPos+1) & RING_BUFFER_MASK;
  401174:	f3c3 030b 	ubfx	r3, r3, #0, #12
		output[i] = output_ring_buffer[readPos]; 	
  401178:	f842 7b04 	str.w	r7, [r2], #4
	for(i = 0; i < WIN_SIZE; i++)
  40117c:	42aa      	cmp	r2, r5
		output_ring_buffer[readPos] = 0.0f;
  40117e:	6004      	str	r4, [r0, #0]
	for(i = 0; i < WIN_SIZE; i++)
  401180:	d1f4      	bne.n	40116c <create_harmonies+0x3c4>
	// variables for next harmonization  
	//if ((pitch_idx-1) > 0)
		//samplesLeftInPeriod = cum_samplesLeftInPeriod / (pitch_idx-1); // average the number of samples left in period 
	
	currentPitch = inputPitch; 
	inputPeriodLength = (uint32_t)(PSOLA_SAMPLE_RATE / currentPitch);
  401182:	ed9f 7a36 	vldr	s14, [pc, #216]	; 40125c <create_harmonies+0x4b4>
	current_num_shifts = pitch_idx; 
	arm_copy_f32(pitch_shifts_in, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  401186:	220b      	movs	r2, #11
	current_num_shifts = pitch_idx; 
  401188:	9c09      	ldr	r4, [sp, #36]	; 0x24
	inputPeriodLength = (uint32_t)(PSOLA_SAMPLE_RATE / currentPitch);
  40118a:	eec7 7a09 	vdiv.f32	s15, s14, s18
  40118e:	600b      	str	r3, [r1, #0]
	current_num_shifts = pitch_idx; 
  401190:	f8c4 b000 	str.w	fp, [r4]
	arm_copy_f32(pitch_shifts_in, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  401194:	9808      	ldr	r0, [sp, #32]
	inputPeriodLength = (uint32_t)(PSOLA_SAMPLE_RATE / currentPitch);
  401196:	4c32      	ldr	r4, [pc, #200]	; (401260 <create_harmonies+0x4b8>)
	arm_copy_f32(pitch_shifts_in, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  401198:	4932      	ldr	r1, [pc, #200]	; (401264 <create_harmonies+0x4bc>)
  40119a:	4b33      	ldr	r3, [pc, #204]	; (401268 <create_harmonies+0x4c0>)
	inputPeriodLength = (uint32_t)(PSOLA_SAMPLE_RATE / currentPitch);
  40119c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  4011a0:	edc4 7a00 	vstr	s15, [r4]
}
  4011a4:	b00d      	add	sp, #52	; 0x34
  4011a6:	ecbd 8b06 	vpop	{d8-d10}
  4011aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	arm_copy_f32(pitch_shifts_in, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  4011ae:	4718      	bx	r3
						if (outPtr < inHalfAway || outPtr > inPtr) {
  4011b0:	45d6      	cmp	lr, sl
  4011b2:	d8ac      	bhi.n	40110e <create_harmonies+0x366>
					outPtr = (outPtr + (uint32_t)((float)inputPeriodLength * periodRatio)) & RING_BUFFER_MASK; 
  4011b4:	9b01      	ldr	r3, [sp, #4]
  4011b6:	449e      	add	lr, r3
					if (pitch_idx == 0)
  4011b8:	9b00      	ldr	r3, [sp, #0]
					outPtr = (outPtr + (uint32_t)((float)inputPeriodLength * periodRatio)) & RING_BUFFER_MASK; 
  4011ba:	f3ce 0e0b 	ubfx	lr, lr, #0, #12
					if (pitch_idx == 0)
  4011be:	2b00      	cmp	r3, #0
  4011c0:	f43f af7e 	beq.w	4010c0 <create_harmonies+0x318>
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  4011c4:	45c8      	cmp	r8, r9
  4011c6:	dd9c      	ble.n	401102 <create_harmonies+0x35a>
  4011c8:	ebae 0208 	sub.w	r2, lr, r8
  4011cc:	481e      	ldr	r0, [pc, #120]	; (401248 <create_harmonies+0x4a0>)
  4011ce:	eb0e 0708 	add.w	r7, lr, r8
  4011d2:	ebab 060e 	sub.w	r6, fp, lr
								harm_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4011d6:	18b3      	adds	r3, r6, r2
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  4011d8:	f3c2 010b 	ubfx	r1, r2, #0, #12
								harm_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4011dc:	ecb0 7a01 	vldmia	r0!, {s14}
  4011e0:	3201      	adds	r2, #1
  4011e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  4011e6:	eb05 0181 	add.w	r1, r5, r1, lsl #2
								harm_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4011ea:	ee27 7a08 	vmul.f32	s14, s14, s16
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  4011ee:	4297      	cmp	r7, r2
								harm_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4011f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  4011f4:	edd1 7a00 	vldr	s15, [r1]
  4011f8:	edd3 6a00 	vldr	s13, [r3]
  4011fc:	eee7 7a26 	vfma.f32	s15, s14, s13
  401200:	edc1 7a00 	vstr	s15, [r1]
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  401204:	d1e7      	bne.n	4011d6 <create_harmonies+0x42e>
					if (inHalfAway < RING_BUFFER_SIZE_D2) 
  401206:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
  40120a:	f4ff af7e 	bcc.w	40110a <create_harmonies+0x362>
						if (outPtr > inPtr && outPtr < inHalfAway) {
  40120e:	45d6      	cmp	lr, sl
  401210:	f67f af4e 	bls.w	4010b0 <create_harmonies+0x308>
  401214:	45f4      	cmp	ip, lr
  401216:	f63f af7a 	bhi.w	40110e <create_harmonies+0x366>
  40121a:	e749      	b.n	4010b0 <create_harmonies+0x308>
					if (outPtr > inPtr && outPtr < inHalfAway) {
  40121c:	45f2      	cmp	sl, lr
  40121e:	f4bf af45 	bcs.w	4010ac <create_harmonies+0x304>
  401222:	45f4      	cmp	ip, lr
  401224:	f63f af73 	bhi.w	40110e <create_harmonies+0x366>
  401228:	e740      	b.n	4010ac <create_harmonies+0x304>
			outPtr = outPtrList[pitch_idx]; 
  40122a:	ea4f 038b 	mov.w	r3, fp, lsl #2
  40122e:	9302      	str	r3, [sp, #8]
  401230:	4b06      	ldr	r3, [pc, #24]	; (40124c <create_harmonies+0x4a4>)
  401232:	f853 e02b 	ldr.w	lr, [r3, fp, lsl #2]
			samplesLeftInPeriod = saved_samplesLeftInPeriod[pitch_idx]; 
  401236:	9b05      	ldr	r3, [sp, #20]
  401238:	681b      	ldr	r3, [r3, #0]
  40123a:	e71c      	b.n	401076 <create_harmonies+0x2ce>
  40123c:	4b0b      	ldr	r3, [pc, #44]	; (40126c <create_harmonies+0x4c4>)
	while(pitch_shifts_in[pitch_idx] > 0.0f && pitch_idx < MAX_NUM_SHIFTS)
  40123e:	f04f 0b00 	mov.w	fp, #0
  401242:	9309      	str	r3, [sp, #36]	; 0x24
  401244:	e78b      	b.n	40115e <create_harmonies+0x3b6>
  401246:	bf00      	nop
  401248:	2041205c 	.word	0x2041205c
  40124c:	2040d000 	.word	0x2040d000
  401250:	20408404 	.word	0x20408404
  401254:	2041202c 	.word	0x2041202c
  401258:	2040e000 	.word	0x2040e000
  40125c:	4735a700 	.word	0x4735a700
  401260:	20408408 	.word	0x20408408
  401264:	20412000 	.word	0x20412000
  401268:	004031c1 	.word	0x004031c1
  40126c:	20408400 	.word	0x20408400

00401270 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  401270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  401274:	b990      	cbnz	r0, 40129c <_read+0x2c>
		return -1;
	}

	for (; len > 0; --len) {
  401276:	2a00      	cmp	r2, #0
  401278:	4690      	mov	r8, r2
  40127a:	dd0d      	ble.n	401298 <_read+0x28>
  40127c:	460c      	mov	r4, r1
  40127e:	188f      	adds	r7, r1, r2
  401280:	4e08      	ldr	r6, [pc, #32]	; (4012a4 <_read+0x34>)
  401282:	4d09      	ldr	r5, [pc, #36]	; (4012a8 <_read+0x38>)
		ptr_get(stdio_base, ptr);
  401284:	4621      	mov	r1, r4
		ptr++;
  401286:	3401      	adds	r4, #1
		ptr_get(stdio_base, ptr);
  401288:	6830      	ldr	r0, [r6, #0]
  40128a:	682b      	ldr	r3, [r5, #0]
  40128c:	4798      	blx	r3
	for (; len > 0; --len) {
  40128e:	42bc      	cmp	r4, r7
  401290:	d1f8      	bne.n	401284 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  401292:	4640      	mov	r0, r8
  401294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (; len > 0; --len) {
  401298:	4680      	mov	r8, r0
  40129a:	e7fa      	b.n	401292 <_read+0x22>
		return -1;
  40129c:	f04f 38ff 	mov.w	r8, #4294967295
  4012a0:	e7f7      	b.n	401292 <_read+0x22>
  4012a2:	bf00      	nop
  4012a4:	2044d008 	.word	0x2044d008
  4012a8:	2044d000 	.word	0x2044d000

004012ac <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4012ac:	3801      	subs	r0, #1
  4012ae:	2802      	cmp	r0, #2
  4012b0:	d81e      	bhi.n	4012f0 <_write+0x44>
{
  4012b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4012b6:	4615      	mov	r5, r2
		return -1;
	}

	for (; len != 0; --len) {
  4012b8:	b1ba      	cbz	r2, 4012ea <_write+0x3e>
  4012ba:	460e      	mov	r6, r1
  4012bc:	460c      	mov	r4, r1
  4012be:	f8df 803c 	ldr.w	r8, [pc, #60]	; 4012fc <_write+0x50>
  4012c2:	4f0d      	ldr	r7, [pc, #52]	; (4012f8 <_write+0x4c>)
  4012c4:	e001      	b.n	4012ca <_write+0x1e>
  4012c6:	3d01      	subs	r5, #1
  4012c8:	d00d      	beq.n	4012e6 <_write+0x3a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4012ca:	f814 1b01 	ldrb.w	r1, [r4], #1
  4012ce:	f8d8 0000 	ldr.w	r0, [r8]
  4012d2:	683b      	ldr	r3, [r7, #0]
  4012d4:	4798      	blx	r3
  4012d6:	2800      	cmp	r0, #0
  4012d8:	eba4 0006 	sub.w	r0, r4, r6
  4012dc:	daf3      	bge.n	4012c6 <_write+0x1a>
		return -1;
  4012de:	f04f 30ff 	mov.w	r0, #4294967295
  4012e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4012e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (; len != 0; --len) {
  4012ea:	4610      	mov	r0, r2
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  4012ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4012f0:	f04f 30ff 	mov.w	r0, #4294967295
}
  4012f4:	4770      	bx	lr
  4012f6:	bf00      	nop
  4012f8:	2044d004 	.word	0x2044d004
  4012fc:	2044d008 	.word	0x2044d008

00401300 <wm8904_write_register>:
 *
 * \param uc_register_address Register address to write
 * \param us_data Data to write.
 */
void wm8904_write_register(uint8_t uc_register_address, uint16_t us_data)
{
  401300:	b570      	push	{r4, r5, r6, lr}
  401302:	460b      	mov	r3, r1
  401304:	b086      	sub	sp, #24
	uint8_t uc_temp_data[2];
	twihs_packet_t packet;

	uc_temp_data[0] = (us_data & 0xff00) >> 8;
  401306:	0a0e      	lsrs	r6, r1, #8

	packet.addr[0]     = uc_register_address;
	packet.addr_length = 0x1;
	packet.buffer      = uc_temp_data;
	packet.length      = 0x2;
	packet.chip        = WM8904_SLAVE_ADDRESS;
  401308:	221a      	movs	r2, #26
	uc_temp_data[1] = us_data & 0xff;
  40130a:	f88d 3001 	strb.w	r3, [sp, #1]
	packet.addr_length = 0x1;
  40130e:	2501      	movs	r5, #1
	packet.length      = 0x2;
  401310:	2402      	movs	r4, #2

	twihs_master_write(WM8904_TWIHS, &packet);
  401312:	a901      	add	r1, sp, #4
  401314:	4b07      	ldr	r3, [pc, #28]	; (401334 <wm8904_write_register+0x34>)
	packet.addr[0]     = uc_register_address;
  401316:	f88d 0004 	strb.w	r0, [sp, #4]
	twihs_master_write(WM8904_TWIHS, &packet);
  40131a:	4807      	ldr	r0, [pc, #28]	; (401338 <wm8904_write_register+0x38>)
	uc_temp_data[0] = (us_data & 0xff00) >> 8;
  40131c:	f88d 6000 	strb.w	r6, [sp]
	packet.addr_length = 0x1;
  401320:	9502      	str	r5, [sp, #8]
	packet.buffer      = uc_temp_data;
  401322:	f8cd d00c 	str.w	sp, [sp, #12]
	packet.length      = 0x2;
  401326:	9404      	str	r4, [sp, #16]
	packet.chip        = WM8904_SLAVE_ADDRESS;
  401328:	f88d 2014 	strb.w	r2, [sp, #20]
	twihs_master_write(WM8904_TWIHS, &packet);
  40132c:	4798      	blx	r3
}
  40132e:	b006      	add	sp, #24
  401330:	bd70      	pop	{r4, r5, r6, pc}
  401332:	bf00      	nop
  401334:	004016a5 	.word	0x004016a5
  401338:	40018000 	.word	0x40018000

0040133c <wm8904_read_register>:
 *
 * \param uc_register_address Register address to write
 * \retun Register value.
 */
uint16_t wm8904_read_register(uint8_t uc_register_address)
{
  40133c:	b530      	push	{r4, r5, lr}
  40133e:	b087      	sub	sp, #28

	packet.addr[0]     = uc_register_address;
	packet.addr_length = 0x1;
	packet.buffer      = uc_temp_data;
	packet.length      = 0x2;
	packet.chip        = WM8904_SLAVE_ADDRESS;
  401340:	221a      	movs	r2, #26
	packet.addr_length = 0x1;
  401342:	2501      	movs	r5, #1
	packet.length      = 0x2;
  401344:	2402      	movs	r4, #2
	packet.addr[0]     = uc_register_address;
  401346:	f88d 0004 	strb.w	r0, [sp, #4]

	twihs_master_read(WM8904_TWIHS, &packet);
  40134a:	a901      	add	r1, sp, #4
  40134c:	4b08      	ldr	r3, [pc, #32]	; (401370 <wm8904_read_register+0x34>)
  40134e:	4809      	ldr	r0, [pc, #36]	; (401374 <wm8904_read_register+0x38>)
	packet.addr_length = 0x1;
  401350:	9502      	str	r5, [sp, #8]
	packet.buffer      = uc_temp_data;
  401352:	f8cd d00c 	str.w	sp, [sp, #12]
	packet.length      = 0x2;
  401356:	9404      	str	r4, [sp, #16]
	packet.chip        = WM8904_SLAVE_ADDRESS;
  401358:	f88d 2014 	strb.w	r2, [sp, #20]
	twihs_master_read(WM8904_TWIHS, &packet);
  40135c:	4798      	blx	r3
	us_data = (((uint16_t)uc_temp_data[0] << 8) & 0xff00) | uc_temp_data[1];
  40135e:	f89d 0000 	ldrb.w	r0, [sp]
  401362:	f89d 3001 	ldrb.w	r3, [sp, #1]

	return us_data;
}
  401366:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  40136a:	b007      	add	sp, #28
  40136c:	bd30      	pop	{r4, r5, pc}
  40136e:	bf00      	nop
  401370:	004015f1 	.word	0x004015f1
  401374:	40018000 	.word	0x40018000

00401378 <wm8904_twi_init>:
 * \brief Initialize TWIHS connect to WM8904.
 *
 * \retun TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t wm8904_twi_init(void)
{
  401378:	b510      	push	{r4, lr}
	pio_configure_pin(WM8904_TK_PIO, WM8904_TK_FLAGS);
  40137a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
{
  40137e:	b084      	sub	sp, #16
	pio_configure_pin(WM8904_TK_PIO, WM8904_TK_FLAGS);
  401380:	4c15      	ldr	r4, [pc, #84]	; (4013d8 <wm8904_twi_init+0x60>)
  401382:	2021      	movs	r0, #33	; 0x21
  401384:	47a0      	blx	r4
	pio_configure_pin(WM8904_TF_PIO, WM8904_TF_FLAGS);
  401386:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40138a:	2020      	movs	r0, #32
  40138c:	47a0      	blx	r4
	pio_configure_pin(WM8904_TD_PIO, WM8904_TD_FLAGS);
  40138e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401392:	207a      	movs	r0, #122	; 0x7a
  401394:	47a0      	blx	r4
	pio_configure_pin(WM8904_RK_PIO, WM8904_RK_FLAGS);
  401396:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40139a:	2016      	movs	r0, #22
  40139c:	47a0      	blx	r4
	pio_configure_pin(WM8904_RF_PIO, WM8904_RF_FLAGS);
  40139e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4013a2:	2078      	movs	r0, #120	; 0x78
  4013a4:	47a0      	blx	r4
	pio_configure_pin(WM8904_RD_PIO, WM8904_RD_FLAGS);
  4013a6:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4013aa:	200a      	movs	r0, #10
  4013ac:	47a0      	blx	r4
	pio_configure_pin(WM8904_PCK2_PIO, WM8904_PCK2_FLAGS);
  4013ae:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4013b2:	2012      	movs	r0, #18
  4013b4:	47a0      	blx	r4

static inline uint32_t twihs_master_setup(twihs_master_t p_twihs,
		twihs_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
	p_opt->smbus      = 0;
  4013b6:	2200      	movs	r2, #0
	p_opt->master_clk = sysclk_get_peripheral_hz();
  4013b8:	4908      	ldr	r1, [pc, #32]	; (4013dc <wm8904_twi_init+0x64>)
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4013ba:	2013      	movs	r0, #19

	twihs_options_t opt;
	opt.master_clk = sysclk_get_cpu_hz();
	opt.speed = WM8904_TWIHS_CLK;
  4013bc:	4c08      	ldr	r4, [pc, #32]	; (4013e0 <wm8904_twi_init+0x68>)
  4013be:	4b09      	ldr	r3, [pc, #36]	; (4013e4 <wm8904_twi_init+0x6c>)
  4013c0:	9101      	str	r1, [sp, #4]
	p_opt->smbus      = 0;
  4013c2:	f88d 200d 	strb.w	r2, [sp, #13]
  4013c6:	9402      	str	r4, [sp, #8]
  4013c8:	4798      	blx	r3
#endif		
	} else {
		// Do Nothing
	}
#endif
	return (twihs_master_init(p_twihs, p_opt));
  4013ca:	a901      	add	r1, sp, #4
  4013cc:	4b06      	ldr	r3, [pc, #24]	; (4013e8 <wm8904_twi_init+0x70>)
  4013ce:	4807      	ldr	r0, [pc, #28]	; (4013ec <wm8904_twi_init+0x74>)
  4013d0:	4798      	blx	r3
	return twihs_master_setup(WM8904_TWIHS, &opt);
}
  4013d2:	b004      	add	sp, #16
  4013d4:	bd10      	pop	{r4, pc}
  4013d6:	bf00      	nop
  4013d8:	00401d2d 	.word	0x00401d2d
  4013dc:	08f0d180 	.word	0x08f0d180
  4013e0:	00061a80 	.word	0x00061a80
  4013e4:	0040237d 	.word	0x0040237d
  4013e8:	00401511 	.word	0x00401511
  4013ec:	40018000 	.word	0x40018000

004013f0 <ssc_reset>:
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_reset(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_SWRST;
	p_ssc->SSC_CMR = 0;
  4013f0:	2300      	movs	r3, #0
	p_ssc->SSC_CR = SSC_CR_SWRST;
  4013f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4013f6:	6002      	str	r2, [r0, #0]
	p_ssc->SSC_CMR = 0;
  4013f8:	6043      	str	r3, [r0, #4]
	p_ssc->SSC_RCMR = 0;
  4013fa:	6103      	str	r3, [r0, #16]
	p_ssc->SSC_RFMR = 0;
  4013fc:	6143      	str	r3, [r0, #20]
	p_ssc->SSC_TCMR = 0;
  4013fe:	6183      	str	r3, [r0, #24]
	p_ssc->SSC_TFMR = 0;
  401400:	61c3      	str	r3, [r0, #28]
  401402:	4770      	bx	lr

00401404 <ssc_enable_rx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_rx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_RXEN;
  401404:	2301      	movs	r3, #1
  401406:	6003      	str	r3, [r0, #0]
  401408:	4770      	bx	lr
  40140a:	bf00      	nop

0040140c <ssc_disable_rx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_disable_rx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_RXDIS;
  40140c:	2302      	movs	r3, #2
  40140e:	6003      	str	r3, [r0, #0]
  401410:	4770      	bx	lr
  401412:	bf00      	nop

00401414 <ssc_enable_tx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_tx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_TXEN;
  401414:	f44f 7380 	mov.w	r3, #256	; 0x100
  401418:	6003      	str	r3, [r0, #0]
  40141a:	4770      	bx	lr

0040141c <ssc_disable_tx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_disable_tx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_TXDIS;
  40141c:	f44f 7300 	mov.w	r3, #512	; 0x200
  401420:	6003      	str	r3, [r0, #0]
  401422:	4770      	bx	lr

00401424 <ssc_set_receiver>:
 * \param p_rx_clk_opt Pointer to the receiver clock configuration structure.
 * \param p_rx_data_frame Pointer to the receiver data frame configuration structure.
 */
void ssc_set_receiver(Ssc *p_ssc, clock_opt_t *p_rx_clk_opt,
		data_frame_opt_t *p_rx_data_frame)
{
  401424:	b4f0      	push	{r4, r5, r6, r7}
	if (p_rx_clk_opt == NULL) {
  401426:	2900      	cmp	r1, #0
  401428:	d02f      	beq.n	40148a <ssc_set_receiver+0x66>
		p_ssc->SSC_RCMR = 0;
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  40142a:	6904      	ldr	r4, [r0, #16]
  40142c:	68cf      	ldr	r7, [r1, #12]
  40142e:	698e      	ldr	r6, [r1, #24]
  401430:	e891 0028 	ldmia.w	r1, {r3, r5}
  401434:	432b      	orrs	r3, r5
  401436:	688d      	ldr	r5, [r1, #8]
  401438:	4323      	orrs	r3, r4
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
				p_rx_clk_opt->ul_ckg |
				p_rx_clk_opt->ul_start_sel |
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  40143a:	694c      	ldr	r4, [r1, #20]
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  40143c:	432b      	orrs	r3, r5
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
  40143e:	690d      	ldr	r5, [r1, #16]
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  401440:	0421      	lsls	r1, r4, #16
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  401442:	433b      	orrs	r3, r7
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  401444:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  401448:	4333      	orrs	r3, r6
  40144a:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  40144e:	430b      	orrs	r3, r1
  401450:	6103      	str	r3, [r0, #16]
	}

	if (p_rx_data_frame == NULL) {
  401452:	b1ea      	cbz	r2, 401490 <ssc_set_receiver+0x6c>
		p_ssc->SSC_RFMR = 0;
	} else {
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  401454:	6954      	ldr	r4, [r2, #20]
  401456:	6853      	ldr	r3, [r2, #4]
  401458:	6991      	ldr	r1, [r2, #24]
  40145a:	4323      	orrs	r3, r4
  40145c:	6946      	ldr	r6, [r0, #20]
  40145e:	6814      	ldr	r4, [r2, #0]
  401460:	430b      	orrs	r3, r1
				p_rx_data_frame->ul_msbf |
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  401462:	6891      	ldr	r1, [r2, #8]
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  401464:	f004 041f 	and.w	r4, r4, #31
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
  401468:	6915      	ldr	r5, [r2, #16]
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  40146a:	4333      	orrs	r3, r6
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  40146c:	68d2      	ldr	r2, [r2, #12]
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  40146e:	0209      	lsls	r1, r1, #8
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  401470:	4323      	orrs	r3, r4
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  401472:	0412      	lsls	r2, r2, #16
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  401474:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  401478:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  40147c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  401480:	430b      	orrs	r3, r1
  401482:	4313      	orrs	r3, r2
				p_rx_data_frame->ul_fsos |
				p_rx_data_frame->ul_fsedge;
	}
}
  401484:	bcf0      	pop	{r4, r5, r6, r7}
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  401486:	6143      	str	r3, [r0, #20]
}
  401488:	4770      	bx	lr
		p_ssc->SSC_RCMR = 0;
  40148a:	6101      	str	r1, [r0, #16]
	if (p_rx_data_frame == NULL) {
  40148c:	2a00      	cmp	r2, #0
  40148e:	d1e1      	bne.n	401454 <ssc_set_receiver+0x30>
		p_ssc->SSC_RFMR = 0;
  401490:	6142      	str	r2, [r0, #20]
}
  401492:	bcf0      	pop	{r4, r5, r6, r7}
  401494:	4770      	bx	lr
  401496:	bf00      	nop

00401498 <ssc_set_transmitter>:
 * \param p_tx_clk_opt Pointer to the transmitter clock configuration structure.
 * \param p_tx_data_frame Pointer to the transmitter data frame configuration structure.
 */
void ssc_set_transmitter(Ssc *p_ssc, clock_opt_t *p_tx_clk_opt,
		data_frame_opt_t *p_tx_data_frame)
{
  401498:	b4f0      	push	{r4, r5, r6, r7}
	if (p_tx_clk_opt == NULL) {
  40149a:	2900      	cmp	r1, #0
  40149c:	d02f      	beq.n	4014fe <ssc_set_transmitter+0x66>
		p_ssc->SSC_TCMR = 0;
	} else {
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  40149e:	6984      	ldr	r4, [r0, #24]
  4014a0:	68cf      	ldr	r7, [r1, #12]
  4014a2:	698e      	ldr	r6, [r1, #24]
  4014a4:	e891 0028 	ldmia.w	r1, {r3, r5}
  4014a8:	432b      	orrs	r3, r5
  4014aa:	688d      	ldr	r5, [r1, #8]
  4014ac:	4323      	orrs	r3, r4
				p_tx_clk_opt->ul_cko | p_tx_clk_opt->ul_cki |
				p_tx_clk_opt->ul_ckg |
				p_tx_clk_opt->ul_start_sel |
				SSC_TCMR_PERIOD(p_tx_clk_opt->ul_period) |
				SSC_TCMR_STTDLY(p_tx_clk_opt->ul_sttdly);
  4014ae:	694c      	ldr	r4, [r1, #20]
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  4014b0:	432b      	orrs	r3, r5
				SSC_TCMR_PERIOD(p_tx_clk_opt->ul_period) |
  4014b2:	690d      	ldr	r5, [r1, #16]
				SSC_TCMR_STTDLY(p_tx_clk_opt->ul_sttdly);
  4014b4:	0421      	lsls	r1, r4, #16
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  4014b6:	433b      	orrs	r3, r7
				SSC_TCMR_STTDLY(p_tx_clk_opt->ul_sttdly);
  4014b8:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  4014bc:	4333      	orrs	r3, r6
  4014be:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  4014c2:	430b      	orrs	r3, r1
  4014c4:	6183      	str	r3, [r0, #24]
	}

	if (p_tx_data_frame == NULL) {
  4014c6:	b1ea      	cbz	r2, 401504 <ssc_set_transmitter+0x6c>
		p_ssc->SSC_TFMR = 0;
	} else {
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  4014c8:	6954      	ldr	r4, [r2, #20]
  4014ca:	6853      	ldr	r3, [r2, #4]
  4014cc:	6991      	ldr	r1, [r2, #24]
  4014ce:	4323      	orrs	r3, r4
  4014d0:	69c6      	ldr	r6, [r0, #28]
  4014d2:	6814      	ldr	r4, [r2, #0]
  4014d4:	430b      	orrs	r3, r1
				p_tx_data_frame->ul_msbf |
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
  4014d6:	6891      	ldr	r1, [r2, #8]
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  4014d8:	f004 041f 	and.w	r4, r4, #31
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
				SSC_TFMR_FSLEN_EXT(p_tx_data_frame->ul_fslen_ext) |
  4014dc:	6915      	ldr	r5, [r2, #16]
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  4014de:	4333      	orrs	r3, r6
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
  4014e0:	68d2      	ldr	r2, [r2, #12]
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
  4014e2:	0209      	lsls	r1, r1, #8
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  4014e4:	4323      	orrs	r3, r4
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
  4014e6:	0412      	lsls	r2, r2, #16
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
  4014e8:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  4014ec:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
  4014f0:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  4014f4:	430b      	orrs	r3, r1
  4014f6:	4313      	orrs	r3, r2
				p_tx_data_frame->ul_fsos |
				p_tx_data_frame->ul_fsedge;
	}
}
  4014f8:	bcf0      	pop	{r4, r5, r6, r7}
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  4014fa:	61c3      	str	r3, [r0, #28]
}
  4014fc:	4770      	bx	lr
		p_ssc->SSC_TCMR = 0;
  4014fe:	6181      	str	r1, [r0, #24]
	if (p_tx_data_frame == NULL) {
  401500:	2a00      	cmp	r2, #0
  401502:	d1e1      	bne.n	4014c8 <ssc_set_transmitter+0x30>
		p_ssc->SSC_TFMR = 0;
  401504:	61c2      	str	r2, [r0, #28]
}
  401506:	bcf0      	pop	{r4, r5, r6, r7}
  401508:	4770      	bx	lr
  40150a:	bf00      	nop

0040150c <ssc_disable_interrupt>:
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void ssc_disable_interrupt(Ssc *p_ssc, uint32_t ul_sources)
{
	p_ssc->SSC_IDR = ul_sources;
  40150c:	6481      	str	r1, [r0, #72]	; 0x48
  40150e:	4770      	bx	lr

00401510 <twihs_master_init>:
 * \param p_opt Options for initializing the TWIHS module (see \ref twihs_options_t).
 *
 * \return TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twihs_master_init(Twihs *p_twihs, const twihs_options_t *p_opt)
{
  401510:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t status = TWIHS_SUCCESS;

	/* Disable TWIHS interrupts */
	p_twihs->TWIHS_IDR = ~0UL;
  401512:	f04f 33ff 	mov.w	r3, #4294967295
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  401516:	2680      	movs	r6, #128	; 0x80
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401518:	2204      	movs	r2, #4
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  40151a:	2508      	movs	r5, #8
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  40151c:	2420      	movs	r4, #32
	p_twihs->TWIHS_IDR = ~0UL;
  40151e:	6283      	str	r3, [r0, #40]	; 0x28
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401520:	4b2f      	ldr	r3, [pc, #188]	; (4015e0 <twihs_master_init+0xd0>)
	p_twihs->TWIHS_SR;
  401522:	6a07      	ldr	r7, [r0, #32]
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  401524:	6006      	str	r6, [r0, #0]
	p_twihs->TWIHS_RHR;
  401526:	6b06      	ldr	r6, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401528:	6005      	str	r5, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  40152a:	6004      	str	r4, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  40152c:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  40152e:	684a      	ldr	r2, [r1, #4]
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401530:	429a      	cmp	r2, r3
  401532:	d84d      	bhi.n	4015d0 <twihs_master_init+0xc0>
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  401534:	4c2b      	ldr	r4, [pc, #172]	; (4015e4 <twihs_master_init+0xd4>)
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401536:	680b      	ldr	r3, [r1, #0]
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  401538:	42a2      	cmp	r2, r4
  40153a:	d92e      	bls.n	40159a <twihs_master_init+0x8a>
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  40153c:	4c2a      	ldr	r4, [pc, #168]	; (4015e8 <twihs_master_init+0xd8>)
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  40153e:	492b      	ldr	r1, [pc, #172]	; (4015ec <twihs_master_init+0xdc>)
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401540:	4414      	add	r4, r2
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401542:	fba1 2103 	umull	r2, r1, r1, r3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401546:	00a4      	lsls	r4, r4, #2
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401548:	0b89      	lsrs	r1, r1, #14
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  40154a:	fbb3 f3f4 	udiv	r3, r3, r4
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  40154e:	3903      	subs	r1, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401550:	3b03      	subs	r3, #3
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401552:	29ff      	cmp	r1, #255	; 0xff
  401554:	d940      	bls.n	4015d8 <twihs_master_init+0xc8>
  401556:	2200      	movs	r2, #0
  401558:	e000      	b.n	40155c <twihs_master_init+0x4c>
  40155a:	b13c      	cbz	r4, 40156c <twihs_master_init+0x5c>
			ckdiv++;
  40155c:	3201      	adds	r2, #1
			cldiv /= TWIHS_CLK_DIVIDER;
  40155e:	0849      	lsrs	r1, r1, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401560:	2a06      	cmp	r2, #6
  401562:	bf8c      	ite	hi
  401564:	2400      	movhi	r4, #0
  401566:	2401      	movls	r4, #1
  401568:	29ff      	cmp	r1, #255	; 0xff
  40156a:	d8f6      	bhi.n	40155a <twihs_master_init+0x4a>
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40156c:	2bff      	cmp	r3, #255	; 0xff
  40156e:	d907      	bls.n	401580 <twihs_master_init+0x70>
  401570:	b914      	cbnz	r4, 401578 <twihs_master_init+0x68>
  401572:	e005      	b.n	401580 <twihs_master_init+0x70>
  401574:	2a06      	cmp	r2, #6
  401576:	d803      	bhi.n	401580 <twihs_master_init+0x70>
			chdiv /= TWIHS_CLK_DIVIDER;
  401578:	085b      	lsrs	r3, r3, #1
			ckdiv++;
  40157a:	3201      	adds	r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40157c:	2bff      	cmp	r3, #255	; 0xff
  40157e:	d8f9      	bhi.n	401574 <twihs_master_init+0x64>
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401580:	021b      	lsls	r3, r3, #8
	uint32_t status = TWIHS_SUCCESS;
  401582:	2400      	movs	r4, #0
				TWIHS_CWGR_CKDIV(ckdiv);
  401584:	0412      	lsls	r2, r2, #16
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401586:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  401588:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  40158c:	b2c9      	uxtb	r1, r1
  40158e:	4313      	orrs	r3, r2
  401590:	430b      	orrs	r3, r1
		p_twihs->TWIHS_CWGR =
  401592:	6103      	str	r3, [r0, #16]
}
  401594:	4620      	mov	r0, r4
  401596:	bcf0      	pop	{r4, r5, r6, r7}
  401598:	4770      	bx	lr
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  40159a:	0052      	lsls	r2, r2, #1
  40159c:	fbb3 f3f2 	udiv	r3, r3, r2
  4015a0:	3b03      	subs	r3, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4015a2:	2200      	movs	r2, #0
  4015a4:	2bff      	cmp	r3, #255	; 0xff
  4015a6:	d802      	bhi.n	4015ae <twihs_master_init+0x9e>
  4015a8:	e008      	b.n	4015bc <twihs_master_init+0xac>
  4015aa:	2a06      	cmp	r2, #6
  4015ac:	d803      	bhi.n	4015b6 <twihs_master_init+0xa6>
			c_lh_div /= TWIHS_CLK_DIVIDER;
  4015ae:	085b      	lsrs	r3, r3, #1
			ckdiv++;
  4015b0:	3201      	adds	r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4015b2:	2bff      	cmp	r3, #255	; 0xff
  4015b4:	d8f9      	bhi.n	4015aa <twihs_master_init+0x9a>
  4015b6:	0412      	lsls	r2, r2, #16
  4015b8:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  4015bc:	0219      	lsls	r1, r3, #8
	uint32_t status = TWIHS_SUCCESS;
  4015be:	2400      	movs	r4, #0
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  4015c0:	b2db      	uxtb	r3, r3
  4015c2:	b289      	uxth	r1, r1
  4015c4:	4313      	orrs	r3, r2
  4015c6:	430b      	orrs	r3, r1
		p_twihs->TWIHS_CWGR =
  4015c8:	6103      	str	r3, [r0, #16]
}
  4015ca:	4620      	mov	r0, r4
  4015cc:	bcf0      	pop	{r4, r5, r6, r7}
  4015ce:	4770      	bx	lr
		status = TWIHS_INVALID_ARGUMENT;
  4015d0:	2401      	movs	r4, #1
}
  4015d2:	4620      	mov	r0, r4
  4015d4:	bcf0      	pop	{r4, r5, r6, r7}
  4015d6:	4770      	bx	lr
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4015d8:	2401      	movs	r4, #1
	uint32_t ckdiv = 0;
  4015da:	2200      	movs	r2, #0
  4015dc:	e7c6      	b.n	40156c <twihs_master_init+0x5c>
  4015de:	bf00      	nop
  4015e0:	00061a80 	.word	0x00061a80
  4015e4:	0005dc00 	.word	0x0005dc00
  4015e8:	3ffd1200 	.word	0x3ffd1200
  4015ec:	057619f1 	.word	0x057619f1

004015f0 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  4015f0:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  4015f2:	2a00      	cmp	r2, #0
  4015f4:	d053      	beq.n	40169e <twihs_master_read+0xae>
{
  4015f6:	b470      	push	{r4, r5, r6}
	p_twihs->TWIHS_MMR = 0;
  4015f8:	2600      	movs	r6, #0
	uint8_t *buffer = p_packet->buffer;
  4015fa:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  4015fc:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4015fe:	684b      	ldr	r3, [r1, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401600:	7c0d      	ldrb	r5, [r1, #16]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401602:	021b      	lsls	r3, r3, #8
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401604:	042d      	lsls	r5, r5, #16
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401606:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  40160a:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  40160e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  401612:	432b      	orrs	r3, r5
  401614:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401616:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401618:	684b      	ldr	r3, [r1, #4]
	if (len == 0)
  40161a:	b99b      	cbnz	r3, 401644 <twihs_master_read+0x54>
		return 0;
  40161c:	461d      	mov	r5, r3
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  40161e:	2301      	movs	r3, #1
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401620:	60c5      	str	r5, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  401622:	6003      	str	r3, [r0, #0]
		status = p_twihs->TWIHS_SR;
  401624:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401626:	05d9      	lsls	r1, r3, #23
  401628:	d41f      	bmi.n	40166a <twihs_master_read+0x7a>
  40162a:	2a01      	cmp	r2, #1
  40162c:	d020      	beq.n	401670 <twihs_master_read+0x80>
  40162e:	f247 5130 	movw	r1, #30000	; 0x7530
		if (!(status & TWIHS_SR_RXRDY)) {
  401632:	079e      	lsls	r6, r3, #30
  401634:	d412      	bmi.n	40165c <twihs_master_read+0x6c>
		status = p_twihs->TWIHS_SR;
  401636:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401638:	05dd      	lsls	r5, r3, #23
  40163a:	d416      	bmi.n	40166a <twihs_master_read+0x7a>
		if (!timeout--) {
  40163c:	3901      	subs	r1, #1
  40163e:	d1f8      	bne.n	401632 <twihs_master_read+0x42>
			return TWIHS_ERROR_TIMEOUT;
  401640:	2009      	movs	r0, #9
  401642:	e02a      	b.n	40169a <twihs_master_read+0xaa>
	if (len > 1) {
  401644:	2b01      	cmp	r3, #1
	val = addr[0];
  401646:	780d      	ldrb	r5, [r1, #0]
	if (len > 1) {
  401648:	dde9      	ble.n	40161e <twihs_master_read+0x2e>
		val |= addr[1];
  40164a:	784e      	ldrb	r6, [r1, #1]
	if (len > 2) {
  40164c:	2b02      	cmp	r3, #2
		val |= addr[1];
  40164e:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
	if (len > 2) {
  401652:	d0e4      	beq.n	40161e <twihs_master_read+0x2e>
		val |= addr[2];
  401654:	788b      	ldrb	r3, [r1, #2]
  401656:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
  40165a:	e7e0      	b.n	40161e <twihs_master_read+0x2e>
		*buffer++ = p_twihs->TWIHS_RHR;
  40165c:	6b03      	ldr	r3, [r0, #48]	; 0x30
		cnt--;
  40165e:	3a01      	subs	r2, #1
		*buffer++ = p_twihs->TWIHS_RHR;
  401660:	f804 3b01 	strb.w	r3, [r4], #1
		status = p_twihs->TWIHS_SR;
  401664:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401666:	05d9      	lsls	r1, r3, #23
  401668:	d5df      	bpl.n	40162a <twihs_master_read+0x3a>
			return TWIHS_RECEIVE_NACK;
  40166a:	2005      	movs	r0, #5
}
  40166c:	bc70      	pop	{r4, r5, r6}
  40166e:	4770      	bx	lr
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401670:	2102      	movs	r1, #2
		if (!(status & TWIHS_SR_RXRDY)) {
  401672:	079d      	lsls	r5, r3, #30
		if (status & TWIHS_SR_NACK) {
  401674:	f247 5230 	movw	r2, #30000	; 0x7530
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401678:	6001      	str	r1, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  40167a:	d407      	bmi.n	40168c <twihs_master_read+0x9c>
		status = p_twihs->TWIHS_SR;
  40167c:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40167e:	05de      	lsls	r6, r3, #23
  401680:	d4f3      	bmi.n	40166a <twihs_master_read+0x7a>
		if (!timeout--) {
  401682:	3a01      	subs	r2, #1
  401684:	d0dc      	beq.n	401640 <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  401686:	079d      	lsls	r5, r3, #30
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401688:	6001      	str	r1, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  40168a:	d5f7      	bpl.n	40167c <twihs_master_read+0x8c>
		*buffer++ = p_twihs->TWIHS_RHR;
  40168c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40168e:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401690:	6a03      	ldr	r3, [r0, #32]
  401692:	07db      	lsls	r3, r3, #31
  401694:	d5fc      	bpl.n	401690 <twihs_master_read+0xa0>
	p_twihs->TWIHS_SR;
  401696:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  401698:	2000      	movs	r0, #0
}
  40169a:	bc70      	pop	{r4, r5, r6}
  40169c:	4770      	bx	lr
		return TWIHS_INVALID_ARGUMENT;
  40169e:	2001      	movs	r0, #1
  4016a0:	4770      	bx	lr
  4016a2:	bf00      	nop

004016a4 <twihs_master_write>:
{
  4016a4:	4603      	mov	r3, r0
	uint32_t status, cnt = p_packet->length;
  4016a6:	68c8      	ldr	r0, [r1, #12]
	if (cnt == 0) {
  4016a8:	2800      	cmp	r0, #0
  4016aa:	d034      	beq.n	401716 <twihs_master_write+0x72>
{
  4016ac:	b470      	push	{r4, r5, r6}
	p_twihs->TWIHS_MMR = 0;
  4016ae:	2600      	movs	r6, #0
	uint8_t *buffer = p_packet->buffer;
  4016b0:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  4016b2:	605e      	str	r6, [r3, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  4016b4:	7c0a      	ldrb	r2, [r1, #16]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4016b6:	684d      	ldr	r5, [r1, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  4016b8:	0412      	lsls	r2, r2, #16
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4016ba:	022d      	lsls	r5, r5, #8
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  4016bc:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4016c0:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  4016c4:	432a      	orrs	r2, r5
  4016c6:	605a      	str	r2, [r3, #4]
	p_twihs->TWIHS_IADR = 0;
  4016c8:	60de      	str	r6, [r3, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4016ca:	684a      	ldr	r2, [r1, #4]
	if (len == 0)
  4016cc:	b98a      	cbnz	r2, 4016f2 <twihs_master_write+0x4e>
		return 0;
  4016ce:	4615      	mov	r5, r2
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4016d0:	60dd      	str	r5, [r3, #12]
		status = p_twihs->TWIHS_SR;
  4016d2:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWIHS_SR_NACK) {
  4016d4:	05d6      	lsls	r6, r2, #23
  4016d6:	d409      	bmi.n	4016ec <twihs_master_write+0x48>
		if (!(status & TWIHS_SR_TXRDY)) {
  4016d8:	0755      	lsls	r5, r2, #29
  4016da:	d5fa      	bpl.n	4016d2 <twihs_master_write+0x2e>
		p_twihs->TWIHS_THR = *buffer++;
  4016dc:	f814 2b01 	ldrb.w	r2, [r4], #1
	while (cnt > 0) {
  4016e0:	3801      	subs	r0, #1
		p_twihs->TWIHS_THR = *buffer++;
  4016e2:	635a      	str	r2, [r3, #52]	; 0x34
	while (cnt > 0) {
  4016e4:	d013      	beq.n	40170e <twihs_master_write+0x6a>
		status = p_twihs->TWIHS_SR;
  4016e6:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWIHS_SR_NACK) {
  4016e8:	05d6      	lsls	r6, r2, #23
  4016ea:	d5f5      	bpl.n	4016d8 <twihs_master_write+0x34>
			return TWIHS_RECEIVE_NACK;
  4016ec:	2005      	movs	r0, #5
}
  4016ee:	bc70      	pop	{r4, r5, r6}
  4016f0:	4770      	bx	lr
	if (len > 1) {
  4016f2:	2a01      	cmp	r2, #1
	val = addr[0];
  4016f4:	780d      	ldrb	r5, [r1, #0]
	if (len > 1) {
  4016f6:	ddeb      	ble.n	4016d0 <twihs_master_write+0x2c>
		val |= addr[1];
  4016f8:	784e      	ldrb	r6, [r1, #1]
	if (len > 2) {
  4016fa:	2a02      	cmp	r2, #2
		val |= addr[1];
  4016fc:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
	if (len > 2) {
  401700:	d0e6      	beq.n	4016d0 <twihs_master_write+0x2c>
		val |= addr[2];
  401702:	788a      	ldrb	r2, [r1, #2]
  401704:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
  401708:	e7e2      	b.n	4016d0 <twihs_master_write+0x2c>
		if (status & TWIHS_SR_TXRDY) {
  40170a:	0751      	lsls	r1, r2, #29
  40170c:	d405      	bmi.n	40171a <twihs_master_write+0x76>
		status = p_twihs->TWIHS_SR;
  40170e:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWIHS_SR_NACK) {
  401710:	05d4      	lsls	r4, r2, #23
  401712:	d4eb      	bmi.n	4016ec <twihs_master_write+0x48>
  401714:	e7f9      	b.n	40170a <twihs_master_write+0x66>
		return TWIHS_INVALID_ARGUMENT;
  401716:	2001      	movs	r0, #1
  401718:	4770      	bx	lr
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  40171a:	2202      	movs	r2, #2
  40171c:	601a      	str	r2, [r3, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  40171e:	6a1a      	ldr	r2, [r3, #32]
  401720:	07d2      	lsls	r2, r2, #31
  401722:	d5fc      	bpl.n	40171e <twihs_master_write+0x7a>
}
  401724:	bc70      	pop	{r4, r5, r6}
  401726:	4770      	bx	lr

00401728 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  401728:	b5f0      	push	{r4, r5, r6, r7, lr}
  40172a:	4603      	mov	r3, r0
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40172c:	4c24      	ldr	r4, [pc, #144]	; (4017c0 <usart_init_rs232+0x98>)
	p_usart->US_MR = 0;
  40172e:	2000      	movs	r0, #0
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401730:	f04f 0e88 	mov.w	lr, #136	; 0x88
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401734:	f8c3 40e4 	str.w	r4, [r3, #228]	; 0xe4
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401738:	2724      	movs	r7, #36	; 0x24
	p_usart->US_CR = US_CR_RSTSTA;
  40173a:	f44f 7680 	mov.w	r6, #256	; 0x100
	p_usart->US_CR = US_CR_RTSDIS;
  40173e:	f44f 2500 	mov.w	r5, #524288	; 0x80000
	ul_reg_val = 0;
  401742:	4c20      	ldr	r4, [pc, #128]	; (4017c4 <usart_init_rs232+0x9c>)
	p_usart->US_MR = 0;
  401744:	6058      	str	r0, [r3, #4]
	ul_reg_val = 0;
  401746:	6020      	str	r0, [r4, #0]
	p_usart->US_RTOR = 0;
  401748:	6258      	str	r0, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40174a:	6298      	str	r0, [r3, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40174c:	f8c3 e000 	str.w	lr, [r3]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401750:	601f      	str	r7, [r3, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  401752:	601e      	str	r6, [r3, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  401754:	601d      	str	r5, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401756:	b361      	cbz	r1, 4017b2 <usart_init_rs232+0x8a>
  401758:	6808      	ldr	r0, [r1, #0]
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  40175a:	0105      	lsls	r5, r0, #4
  40175c:	42aa      	cmp	r2, r5
  40175e:	d31c      	bcc.n	40179a <usart_init_rs232+0x72>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401760:	0868      	lsrs	r0, r5, #1
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401762:	f64f 76fe 	movw	r6, #65534	; 0xfffe
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401766:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
  40176a:	fbb2 f2f5 	udiv	r2, r2, r5
	cd = cd_fp >> 3;
  40176e:	08d5      	lsrs	r5, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401770:	1e68      	subs	r0, r5, #1
  401772:	42b0      	cmp	r0, r6
  401774:	d81d      	bhi.n	4017b2 <usart_init_rs232+0x8a>
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401776:	0412      	lsls	r2, r2, #16
	p_usart->US_MR |= ul_reg_val;
  401778:	2000      	movs	r0, #0
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40177a:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  40177e:	432a      	orrs	r2, r5
  401780:	621a      	str	r2, [r3, #32]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401782:	684d      	ldr	r5, [r1, #4]
  401784:	688a      	ldr	r2, [r1, #8]
  401786:	690f      	ldr	r7, [r1, #16]
  401788:	432a      	orrs	r2, r5
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40178a:	68ce      	ldr	r6, [r1, #12]
	p_usart->US_MR |= ul_reg_val;
  40178c:	6859      	ldr	r1, [r3, #4]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40178e:	433a      	orrs	r2, r7
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401790:	4332      	orrs	r2, r6
	p_usart->US_MR |= ul_reg_val;
  401792:	4311      	orrs	r1, r2
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401794:	6022      	str	r2, [r4, #0]
	p_usart->US_MR |= ul_reg_val;
  401796:	6059      	str	r1, [r3, #4]
  401798:	bdf0      	pop	{r4, r5, r6, r7, pc}
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40179a:	00c0      	lsls	r0, r0, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40179c:	f64f 76fe 	movw	r6, #65534	; 0xfffe
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4017a0:	00d2      	lsls	r2, r2, #3
  4017a2:	eb02 0250 	add.w	r2, r2, r0, lsr #1
  4017a6:	fbb2 f2f0 	udiv	r2, r2, r0
	cd = cd_fp >> 3;
  4017aa:	08d5      	lsrs	r5, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4017ac:	1e68      	subs	r0, r5, #1
  4017ae:	42b0      	cmp	r0, r6
  4017b0:	d901      	bls.n	4017b6 <usart_init_rs232+0x8e>
		return 1;
  4017b2:	2001      	movs	r0, #1
  4017b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		p_usart->US_MR |= US_MR_OVER;
  4017b6:	6858      	ldr	r0, [r3, #4]
  4017b8:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
  4017bc:	6058      	str	r0, [r3, #4]
  4017be:	e7da      	b.n	401776 <usart_init_rs232+0x4e>
  4017c0:	55534100 	.word	0x55534100
  4017c4:	2041c05c 	.word	0x2041c05c

004017c8 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4017c8:	2340      	movs	r3, #64	; 0x40
  4017ca:	6003      	str	r3, [r0, #0]
  4017cc:	4770      	bx	lr
  4017ce:	bf00      	nop

004017d0 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4017d0:	2310      	movs	r3, #16
  4017d2:	6003      	str	r3, [r0, #0]
  4017d4:	4770      	bx	lr
  4017d6:	bf00      	nop

004017d8 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
  4017d8:	6081      	str	r1, [r0, #8]
  4017da:	4770      	bx	lr

004017dc <usart_get_status>:
	return p_usart->US_CSR;
  4017dc:	6940      	ldr	r0, [r0, #20]
}
  4017de:	4770      	bx	lr

004017e0 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4017e0:	6943      	ldr	r3, [r0, #20]
  4017e2:	07db      	lsls	r3, r3, #31
  4017e4:	d505      	bpl.n	4017f2 <usart_read+0x12>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4017e6:	6983      	ldr	r3, [r0, #24]
	return 0;
  4017e8:	2000      	movs	r0, #0
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4017ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4017ee:	600b      	str	r3, [r1, #0]
	return 0;
  4017f0:	4770      	bx	lr
		return 1;
  4017f2:	2001      	movs	r0, #1
}
  4017f4:	4770      	bx	lr
  4017f6:	bf00      	nop

004017f8 <xdmac_configure_transfer>:
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4017f8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  4017fc:	6853      	ldr	r3, [r2, #4]
  4017fe:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  401800:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  401802:	6893      	ldr	r3, [r2, #8]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  401804:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  401806:	6813      	ldr	r3, [r2, #0]
  401808:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40180c:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  40180e:	6913      	ldr	r3, [r2, #16]
  401810:	f3c3 030b 	ubfx	r3, r3, #0, #12
  401814:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  401816:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  401818:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  40181a:	6993      	ldr	r3, [r2, #24]
  40181c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401820:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  401824:	69d3      	ldr	r3, [r2, #28]
  401826:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40182a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  40182e:	68d3      	ldr	r3, [r2, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  401830:	678b      	str	r3, [r1, #120]	; 0x78
  401832:	4770      	bx	lr

00401834 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401834:	b570      	push	{r4, r5, r6, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401836:	4810      	ldr	r0, [pc, #64]	; (401878 <sysclk_init+0x44>)
  401838:	4d10      	ldr	r5, [pc, #64]	; (40187c <sysclk_init+0x48>)
  40183a:	47a8      	blx	r5
	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
		break;

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  40183c:	2020      	movs	r0, #32
  40183e:	4b10      	ldr	r3, [pc, #64]	; (401880 <sysclk_init+0x4c>)
  401840:	4c10      	ldr	r4, [pc, #64]	; (401884 <sysclk_init+0x50>)
  401842:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  401844:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  401846:	2800      	cmp	r0, #0
  401848:	d0fc      	beq.n	401844 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40184a:	4b0f      	ldr	r3, [pc, #60]	; (401888 <sysclk_init+0x54>)
  40184c:	4798      	blx	r3
  40184e:	4c0f      	ldr	r4, [pc, #60]	; (40188c <sysclk_init+0x58>)
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401850:	4b0f      	ldr	r3, [pc, #60]	; (401890 <sysclk_init+0x5c>)
  401852:	4a10      	ldr	r2, [pc, #64]	; (401894 <sysclk_init+0x60>)
  401854:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  401856:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401858:	2800      	cmp	r0, #0
  40185a:	d0fc      	beq.n	401856 <sysclk_init+0x22>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  40185c:	2002      	movs	r0, #2
  40185e:	4b0e      	ldr	r3, [pc, #56]	; (401898 <sysclk_init+0x64>)
  401860:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401862:	4b0e      	ldr	r3, [pc, #56]	; (40189c <sysclk_init+0x68>)
  401864:	2000      	movs	r0, #0
  401866:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401868:	4b0d      	ldr	r3, [pc, #52]	; (4018a0 <sysclk_init+0x6c>)
  40186a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40186c:	462b      	mov	r3, r5
  40186e:	4802      	ldr	r0, [pc, #8]	; (401878 <sysclk_init+0x44>)

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  401870:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	system_init_flash(sysclk_get_cpu_hz());
  401874:	4718      	bx	r3
  401876:	bf00      	nop
  401878:	11e1a300 	.word	0x11e1a300
  40187c:	004025e9 	.word	0x004025e9
  401880:	00402301 	.word	0x00402301
  401884:	0040234d 	.word	0x0040234d
  401888:	0040235d 	.word	0x0040235d
  40188c:	0040236d 	.word	0x0040236d
  401890:	400e0600 	.word	0x400e0600
  401894:	20183f01 	.word	0x20183f01
  401898:	0040227d 	.word	0x0040227d
  40189c:	004022ad 	.word	0x004022ad
  4018a0:	00402501 	.word	0x00402501

004018a4 <board_init>:

void board_init(void)
{
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4018a4:	4ba4      	ldr	r3, [pc, #656]	; (401b38 <board_init+0x294>)
  4018a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
{
  4018aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	WDT->WDT_MR = WDT_MR_WDDIS;
  4018ae:	605a      	str	r2, [r3, #4]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4018b0:	f3bf 8f5f 	dmb	sy
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  4018b4:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 401bac <board_init+0x308>
	dw_region_attr =
  4018b8:	4fa0      	ldr	r7, [pc, #640]	; (401b3c <board_init+0x298>)
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  4018ba:	4ea1      	ldr	r6, [pc, #644]	; (401b40 <board_init+0x29c>)
  4018bc:	4640      	mov	r0, r8
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4018be:	4da1      	ldr	r5, [pc, #644]	; (401b44 <board_init+0x2a0>)
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  4018c0:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4018c2:	ea40 0107 	orr.w	r1, r0, r7
  4018c6:	2011      	movs	r0, #17
  4018c8:	47a8      	blx	r5
		mpu_cal_mpu_region_size(IFLASH_END_ADDRESS - IFLASH_START_ADDRESS) |
  4018ca:	489f      	ldr	r0, [pc, #636]	; (401b48 <board_init+0x2a4>)
  4018cc:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4018ce:	499f      	ldr	r1, [pc, #636]	; (401b4c <board_init+0x2a8>)
	dw_region_attr =
  4018d0:	4c9f      	ldr	r4, [pc, #636]	; (401b50 <board_init+0x2ac>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4018d2:	4301      	orrs	r1, r0
  4018d4:	489f      	ldr	r0, [pc, #636]	; (401b54 <board_init+0x2b0>)
  4018d6:	47a8      	blx	r5
		mpu_cal_mpu_region_size(DTCM_END_ADDRESS - DTCM_START_ADDRESS) |
  4018d8:	4640      	mov	r0, r8
  4018da:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4018dc:	ea40 0107 	orr.w	r1, r0, r7
  4018e0:	489d      	ldr	r0, [pc, #628]	; (401b58 <board_init+0x2b4>)
  4018e2:	47a8      	blx	r5
		mpu_cal_mpu_region_size(SRAM_FIRST_END_ADDRESS - SRAM_FIRST_START_ADDRESS)
  4018e4:	489d      	ldr	r0, [pc, #628]	; (401b5c <board_init+0x2b8>)
  4018e6:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4018e8:	ea40 0104 	orr.w	r1, r0, r4
  4018ec:	489c      	ldr	r0, [pc, #624]	; (401b60 <board_init+0x2bc>)
  4018ee:	47a8      	blx	r5
		mpu_cal_mpu_region_size(SRAM_SECOND_END_ADDRESS - SRAM_SECOND_START_ADDRESS) |
  4018f0:	489c      	ldr	r0, [pc, #624]	; (401b64 <board_init+0x2c0>)
  4018f2:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4018f4:	ea40 0104 	orr.w	r1, r0, r4
  4018f8:	489b      	ldr	r0, [pc, #620]	; (401b68 <board_init+0x2c4>)
  4018fa:	47a8      	blx	r5
		mpu_cal_mpu_region_size(PERIPHERALS_END_ADDRESS - PERIPHERALS_START_ADDRESS)
  4018fc:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  401900:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401902:	499a      	ldr	r1, [pc, #616]	; (401b6c <board_init+0x2c8>)
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  401904:	4c9a      	ldr	r4, [pc, #616]	; (401b70 <board_init+0x2cc>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401906:	4301      	orrs	r1, r0
  401908:	489a      	ldr	r0, [pc, #616]	; (401b74 <board_init+0x2d0>)
  40190a:	47a8      	blx	r5
		mpu_cal_mpu_region_size(EXT_EBI_END_ADDRESS - EXT_EBI_START_ADDRESS) |
  40190c:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  401910:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401912:	4999      	ldr	r1, [pc, #612]	; (401b78 <board_init+0x2d4>)
  401914:	4301      	orrs	r1, r0
  401916:	4899      	ldr	r0, [pc, #612]	; (401b7c <board_init+0x2d8>)
  401918:	47a8      	blx	r5
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  40191a:	6a63      	ldr	r3, [r4, #36]	; 0x24
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  40191c:	2005      	movs	r0, #5
  40191e:	4a98      	ldr	r2, [pc, #608]	; (401b80 <board_init+0x2dc>)
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  401920:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
  401924:	6263      	str	r3, [r4, #36]	; 0x24
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  401926:	4790      	blx	r2
  __ASM volatile ("dsb");
  401928:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40192c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb");
  401930:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401934:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  401938:	f04f 0900 	mov.w	r9, #0
  40193c:	f8c4 9250 	str.w	r9, [r4, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  401940:	6963      	ldr	r3, [r4, #20]
  401942:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  401946:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb");
  401948:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40194c:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401950:	4b8c      	ldr	r3, [pc, #560]	; (401b84 <board_init+0x2e0>)
  401952:	498d      	ldr	r1, [pc, #564]	; (401b88 <board_init+0x2e4>)
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401954:	4a8d      	ldr	r2, [pc, #564]	; (401b8c <board_init+0x2e8>)
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401956:	6059      	str	r1, [r3, #4]
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401958:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  40195a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40195e:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  401962:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  401966:	f023 0301 	bic.w	r3, r3, #1
  40196a:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  40196e:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
  401972:	f023 0301 	bic.w	r3, r3, #1
  401976:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  __ASM volatile ("dsb");
  40197a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40197e:	f3bf 8f6f 	isb	sy
  401982:	4c83      	ldr	r4, [pc, #524]	; (401b90 <board_init+0x2ec>)
  401984:	200a      	movs	r0, #10
  401986:	47a0      	blx	r4
  401988:	200b      	movs	r0, #11
  40198a:	47a0      	blx	r4
  40198c:	200c      	movs	r0, #12
  40198e:	47a0      	blx	r4
  401990:	2010      	movs	r0, #16
  401992:	47a0      	blx	r4
  401994:	2011      	movs	r0, #17
  401996:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401998:	f44f 7500 	mov.w	r5, #512	; 0x200
  40199c:	4c7d      	ldr	r4, [pc, #500]	; (401b94 <board_init+0x2f0>)
  40199e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  4019a2:	4f7d      	ldr	r7, [pc, #500]	; (401b98 <board_init+0x2f4>)
		base->PIO_PUDR = mask;
  4019a4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4019a8:	6123      	str	r3, [r4, #16]
		base->PIO_PUDR = mask;
  4019aa:	2610      	movs	r6, #16
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4019ac:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_PUDR = mask;
  4019b0:	f04f 0e08 	mov.w	lr, #8
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4019b4:	6323      	str	r3, [r4, #48]	; 0x30
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  4019b6:	4638      	mov	r0, r7
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4019b8:	613d      	str	r5, [r7, #16]
  4019ba:	464b      	mov	r3, r9
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4019bc:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
  4019c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4019c4:	633d      	str	r5, [r7, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4019c6:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4019c8:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  4019cc:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4019ce:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4019d2:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  4019d4:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  4019d6:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4019da:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4019de:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 401bb0 <board_init+0x30c>
  4019e2:	f42c 7c00 	bic.w	ip, ip, #512	; 0x200
  4019e6:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4019ea:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  4019ee:	f42c 7c00 	bic.w	ip, ip, #512	; 0x200
  4019f2:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4019f6:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4019fa:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4019fe:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  401a02:	6621      	str	r1, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401a04:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401a08:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401a0a:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401a0c:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401a10:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  401a14:	f42c 1c00 	bic.w	ip, ip, #2097152	; 0x200000
  401a18:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401a1c:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  401a20:	f42c 1c00 	bic.w	ip, ip, #2097152	; 0x200000
  401a24:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401a28:	6061      	str	r1, [r4, #4]
  401a2a:	f8d8 1114 	ldr.w	r1, [r8, #276]	; 0x114
  401a2e:	ea41 0c06 	orr.w	ip, r1, r6
		base->PIO_PUDR = mask;
  401a32:	495a      	ldr	r1, [pc, #360]	; (401b9c <board_init+0x2f8>)
  401a34:	f8c8 c114 	str.w	ip, [r8, #276]	; 0x114
  401a38:	660e      	str	r6, [r1, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401a3a:	f8c1 6090 	str.w	r6, [r1, #144]	; 0x90
		base->PIO_MDDR = mask;
  401a3e:	654e      	str	r6, [r1, #84]	; 0x54
		base->PIO_IFDR = mask;
  401a40:	624e      	str	r6, [r1, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401a42:	f8c1 6080 	str.w	r6, [r1, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401a46:	f8d1 c070 	ldr.w	ip, [r1, #112]	; 0x70
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  401a4a:	f8df 8168 	ldr.w	r8, [pc, #360]	; 401bb4 <board_init+0x310>
  401a4e:	ea4c 0c06 	orr.w	ip, ip, r6
  401a52:	f8c1 c070 	str.w	ip, [r1, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401a56:	f8d1 c074 	ldr.w	ip, [r1, #116]	; 0x74
  401a5a:	ea4c 0c06 	orr.w	ip, ip, r6
  401a5e:	f8c1 c074 	str.w	ip, [r1, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401a62:	604e      	str	r6, [r1, #4]
  401a64:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
		base->PIO_PUDR = mask;
  401a68:	f8c4 e060 	str.w	lr, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401a6c:	f8c4 e090 	str.w	lr, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401a70:	f8c4 e054 	str.w	lr, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401a74:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401a78:	f8c4 e080 	str.w	lr, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401a7c:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  401a80:	f02c 0c08 	bic.w	ip, ip, #8
  401a84:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401a88:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  401a8c:	f02c 0c08 	bic.w	ip, ip, #8
  401a90:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401a94:	f8c4 e004 	str.w	lr, [r4, #4]
		base->PIO_PUDR = mask;
  401a98:	6626      	str	r6, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401a9a:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401a9e:	6566      	str	r6, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401aa0:	6266      	str	r6, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401aa2:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401aa6:	f8d4 e070 	ldr.w	lr, [r4, #112]	; 0x70
  401aaa:	f02e 0e10 	bic.w	lr, lr, #16
  401aae:	f8c4 e070 	str.w	lr, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401ab2:	f8d4 e074 	ldr.w	lr, [r4, #116]	; 0x74
  401ab6:	f02e 0e10 	bic.w	lr, lr, #16
  401aba:	f8c4 e074 	str.w	lr, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401abe:	6066      	str	r6, [r4, #4]
  401ac0:	47c0      	blx	r8
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  401ac2:	464b      	mov	r3, r9
  401ac4:	4638      	mov	r0, r7
  401ac6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401aca:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401ace:	47c0      	blx	r8
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  401ad0:	4638      	mov	r0, r7
  401ad2:	2301      	movs	r3, #1
  401ad4:	22ff      	movs	r2, #255	; 0xff
  401ad6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401ada:	47c0      	blx	r8
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  401adc:	2301      	movs	r3, #1
  401ade:	223f      	movs	r2, #63	; 0x3f
  401ae0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401ae4:	482e      	ldr	r0, [pc, #184]	; (401ba0 <board_init+0x2fc>)
  401ae6:	47c0      	blx	r8
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  401ae8:	4620      	mov	r0, r4
  401aea:	2301      	movs	r3, #1
  401aec:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  401af0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401af4:	47c0      	blx	r8
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  401af6:	4638      	mov	r0, r7
  401af8:	2301      	movs	r3, #1
  401afa:	f44f 7280 	mov.w	r2, #256	; 0x100
  401afe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401b02:	47c0      	blx	r8
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  401b04:	4638      	mov	r0, r7
  401b06:	2301      	movs	r3, #1
  401b08:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401b0c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401b10:	47c0      	blx	r8
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  401b12:	2301      	movs	r3, #1
  401b14:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401b18:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401b1c:	4821      	ldr	r0, [pc, #132]	; (401ba4 <board_init+0x300>)
  401b1e:	47c0      	blx	r8
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  401b20:	464b      	mov	r3, r9
  401b22:	462a      	mov	r2, r5
  401b24:	4638      	mov	r0, r7
  401b26:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401b2a:	47c0      	blx	r8
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  401b2c:	4629      	mov	r1, r5
  401b2e:	4638      	mov	r0, r7
  401b30:	4b1d      	ldr	r3, [pc, #116]	; (401ba8 <board_init+0x304>)
	pio_configure_pin(ISI_PCK_PIO, ISI_PCK_FLAGS);
	pio_configure_pin(ISI_PCK0_PIO, ISI_PCK0_FLAGS);
	pio_configure_pin(OV_PWD_GPIO, OV_PWD_FLAGS);
	pio_configure_pin(OV_RST_GPIO, OV_RST_FLAGS);
#endif
}
  401b32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  401b36:	4718      	bx	r3
  401b38:	400e1850 	.word	0x400e1850
  401b3c:	01000001 	.word	0x01000001
  401b40:	00401bd1 	.word	0x00401bd1
  401b44:	00401bc5 	.word	0x00401bc5
  401b48:	001fffff 	.word	0x001fffff
  401b4c:	06230001 	.word	0x06230001
  401b50:	03230001 	.word	0x03230001
  401b54:	00400012 	.word	0x00400012
  401b58:	20000013 	.word	0x20000013
  401b5c:	0003ffff 	.word	0x0003ffff
  401b60:	20400014 	.word	0x20400014
  401b64:	0001ffff 	.word	0x0001ffff
  401b68:	20440015 	.word	0x20440015
  401b6c:	13010001 	.word	0x13010001
  401b70:	e000ed00 	.word	0xe000ed00
  401b74:	40000016 	.word	0x40000016
  401b78:	03000001 	.word	0x03000001
  401b7c:	60000017 	.word	0x60000017
  401b80:	00401bb9 	.word	0x00401bb9
  401b84:	400e0c00 	.word	0x400e0c00
  401b88:	5a00080c 	.word	0x5a00080c
  401b8c:	5a00070c 	.word	0x5a00070c
  401b90:	0040237d 	.word	0x0040237d
  401b94:	400e0e00 	.word	0x400e0e00
  401b98:	400e1200 	.word	0x400e1200
  401b9c:	400e1000 	.word	0x400e1000
  401ba0:	400e1600 	.word	0x400e1600
  401ba4:	400e1400 	.word	0x400e1400
  401ba8:	00401bf5 	.word	0x00401bf5
  401bac:	003fffff 	.word	0x003fffff
  401bb0:	40088000 	.word	0x40088000
  401bb4:	00401bf9 	.word	0x00401bf9

00401bb8 <mpu_enable>:
 *
 * \param dwMPUEnable  Enable/Disable the memory region.
 */
void mpu_enable(uint32_t dw_mpu_enable)
{
	MPU->CTRL = dw_mpu_enable ;
  401bb8:	4b01      	ldr	r3, [pc, #4]	; (401bc0 <mpu_enable+0x8>)
  401bba:	6058      	str	r0, [r3, #4]
  401bbc:	4770      	bx	lr
  401bbe:	bf00      	nop
  401bc0:	e000ed90 	.word	0xe000ed90

00401bc4 <mpu_set_region>:
 * \param dwRegionBaseAddr  Memory region base address.
 * \param dwRegionAttr  Memory region attributes.
 */
void mpu_set_region(uint32_t dw_region_base_addr, uint32_t dw_region_attr)
{
	MPU->RBAR = dw_region_base_addr;
  401bc4:	4b01      	ldr	r3, [pc, #4]	; (401bcc <mpu_set_region+0x8>)
  401bc6:	60d8      	str	r0, [r3, #12]
	MPU->RASR = dw_region_attr;
  401bc8:	6119      	str	r1, [r3, #16]
  401bca:	4770      	bx	lr
  401bcc:	e000ed90 	.word	0xe000ed90

00401bd0 <mpu_cal_mpu_region_size>:
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;

	while( dwReturnValue < 31 ) {
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  401bd0:	2820      	cmp	r0, #32
  401bd2:	d90d      	bls.n	401bf0 <mpu_cal_mpu_region_size+0x20>
  401bd4:	2240      	movs	r2, #64	; 0x40
  401bd6:	2305      	movs	r3, #5
  401bd8:	e002      	b.n	401be0 <mpu_cal_mpu_region_size+0x10>
			break;
		} else {
			dwReturnValue++;
  401bda:	3301      	adds	r3, #1
	while( dwReturnValue < 31 ) {
  401bdc:	2b1f      	cmp	r3, #31
  401bde:	d005      	beq.n	401bec <mpu_cal_mpu_region_size+0x1c>
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  401be0:	4290      	cmp	r0, r2
		}
		dwRegionSize <<= 1;
  401be2:	ea4f 0242 	mov.w	r2, r2, lsl #1
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  401be6:	d8f8      	bhi.n	401bda <mpu_cal_mpu_region_size+0xa>
  401be8:	0058      	lsls	r0, r3, #1
  401bea:	4770      	bx	lr
  401bec:	203e      	movs	r0, #62	; 0x3e
  401bee:	4770      	bx	lr
  401bf0:	2008      	movs	r0, #8
	}

	return ( dwReturnValue << 1 );
}
  401bf2:	4770      	bx	lr

00401bf4 <pio_set>:
  401bf4:	6301      	str	r1, [r0, #48]	; 0x30
  401bf6:	4770      	bx	lr

00401bf8 <pio_configure>:
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
	/* Configure pins */
	switch (ul_type) {
  401bf8:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
{
  401bfc:	b430      	push	{r4, r5}
	switch (ul_type) {
  401bfe:	d03b      	beq.n	401c78 <pio_configure+0x80>
  401c00:	d931      	bls.n	401c66 <pio_configure+0x6e>
  401c02:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401c06:	d01b      	beq.n	401c40 <pio_configure+0x48>
  401c08:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401c0c:	d018      	beq.n	401c40 <pio_configure+0x48>
  401c0e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401c12:	d003      	beq.n	401c1c <pio_configure+0x24>
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
		break;

	default:
		return 0;
  401c14:	2300      	movs	r3, #0
	}

	return 1;
}
  401c16:	bc30      	pop	{r4, r5}
  401c18:	4618      	mov	r0, r3
  401c1a:	4770      	bx	lr
	if (ul_pull_up_enable) {
  401c1c:	07dd      	lsls	r5, r3, #31
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401c1e:	6442      	str	r2, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401c20:	d448      	bmi.n	401cb4 <pio_configure+0xbc>
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401c22:	f013 0f0a 	tst.w	r3, #10
		p_pio->PIO_PUDR = ul_mask;
  401c26:	6602      	str	r2, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401c28:	d048      	beq.n	401cbc <pio_configure+0xc4>
	if (ul_attribute & PIO_DEGLITCH) {
  401c2a:	079c      	lsls	r4, r3, #30
		p_pio->PIO_IFER = ul_mask;
  401c2c:	6202      	str	r2, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  401c2e:	d548      	bpl.n	401cc2 <pio_configure+0xca>
		p_pio->PIO_IFSCDR = ul_mask;
  401c30:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
	return 1;
  401c34:	2301      	movs	r3, #1
	p_pio->PIO_ODR = ul_mask;
  401c36:	6142      	str	r2, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401c38:	6002      	str	r2, [r0, #0]
}
  401c3a:	4618      	mov	r0, r3
  401c3c:	bc30      	pop	{r4, r5}
  401c3e:	4770      	bx	lr
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  401c40:	f003 0404 	and.w	r4, r3, #4
	if (ul_pull_up_enable) {
  401c44:	07db      	lsls	r3, r3, #31
	p_pio->PIO_IDR = ul_mask;
  401c46:	6442      	str	r2, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401c48:	d52f      	bpl.n	401caa <pio_configure+0xb2>
		p_pio->PIO_PUER = ul_mask;
  401c4a:	6642      	str	r2, [r0, #100]	; 0x64
	if (ul_multidrive_enable) {
  401c4c:	2c00      	cmp	r4, #0
  401c4e:	d02f      	beq.n	401cb0 <pio_configure+0xb8>
		p_pio->PIO_MDER = ul_mask;
  401c50:	6502      	str	r2, [r0, #80]	; 0x50
	if (ul_default_level) {
  401c52:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401c56:	d04e      	beq.n	401cf6 <pio_configure+0xfe>
		p_pio->PIO_CODR = ul_mask;
  401c58:	6342      	str	r2, [r0, #52]	; 0x34
	return 1;
  401c5a:	2301      	movs	r3, #1
	p_pio->PIO_OER = ul_mask;
  401c5c:	6102      	str	r2, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401c5e:	6002      	str	r2, [r0, #0]
}
  401c60:	4618      	mov	r0, r3
  401c62:	bc30      	pop	{r4, r5}
  401c64:	4770      	bx	lr
	switch (ul_type) {
  401c66:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401c6a:	d005      	beq.n	401c78 <pio_configure+0x80>
  401c6c:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401c70:	d002      	beq.n	401c78 <pio_configure+0x80>
  401c72:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401c76:	d1cd      	bne.n	401c14 <pio_configure+0x1c>
	switch (ul_type) {
  401c78:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
	p_pio->PIO_IDR = ul_mask;
  401c7c:	6442      	str	r2, [r0, #68]	; 0x44
	switch (ul_type) {
  401c7e:	d03c      	beq.n	401cfa <pio_configure+0x102>
  401c80:	d924      	bls.n	401ccc <pio_configure+0xd4>
  401c82:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401c86:	d042      	beq.n	401d0e <pio_configure+0x116>
  401c88:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401c8c:	d105      	bne.n	401c9a <pio_configure+0xa2>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c8e:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401c90:	4311      	orrs	r1, r2
  401c92:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401c94:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401c96:	4311      	orrs	r1, r2
  401c98:	6741      	str	r1, [r0, #116]	; 0x74
	if (ul_pull_up_enable) {
  401c9a:	07db      	lsls	r3, r3, #31
	p_pio->PIO_PDR = ul_mask;
  401c9c:	6042      	str	r2, [r0, #4]
	if (ul_pull_up_enable) {
  401c9e:	d525      	bpl.n	401cec <pio_configure+0xf4>
	return 1;
  401ca0:	2301      	movs	r3, #1
		p_pio->PIO_PUER = ul_mask;
  401ca2:	6642      	str	r2, [r0, #100]	; 0x64
}
  401ca4:	4618      	mov	r0, r3
  401ca6:	bc30      	pop	{r4, r5}
  401ca8:	4770      	bx	lr
		p_pio->PIO_PUDR = ul_mask;
  401caa:	6602      	str	r2, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  401cac:	2c00      	cmp	r4, #0
  401cae:	d1cf      	bne.n	401c50 <pio_configure+0x58>
		p_pio->PIO_MDDR = ul_mask;
  401cb0:	6542      	str	r2, [r0, #84]	; 0x54
  401cb2:	e7ce      	b.n	401c52 <pio_configure+0x5a>
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401cb4:	f013 0f0a 	tst.w	r3, #10
		p_pio->PIO_PUER = ul_mask;
  401cb8:	6642      	str	r2, [r0, #100]	; 0x64
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401cba:	d1b6      	bne.n	401c2a <pio_configure+0x32>
	if (ul_attribute & PIO_DEGLITCH) {
  401cbc:	079c      	lsls	r4, r3, #30
		p_pio->PIO_IFDR = ul_mask;
  401cbe:	6242      	str	r2, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  401cc0:	d4b6      	bmi.n	401c30 <pio_configure+0x38>
		if (ul_attribute & PIO_DEBOUNCE) {
  401cc2:	0719      	lsls	r1, r3, #28
  401cc4:	d5b6      	bpl.n	401c34 <pio_configure+0x3c>
			p_pio->PIO_IFSCER = ul_mask;
  401cc6:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  401cca:	e7b3      	b.n	401c34 <pio_configure+0x3c>
	switch (ul_type) {
  401ccc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401cd0:	d1e3      	bne.n	401c9a <pio_configure+0xa2>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401cd2:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401cd4:	43d1      	mvns	r1, r2
  401cd6:	6f05      	ldr	r5, [r0, #112]	; 0x70
  401cd8:	402c      	ands	r4, r5
  401cda:	460d      	mov	r5, r1
  401cdc:	400c      	ands	r4, r1
  401cde:	6704      	str	r4, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401ce0:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401ce2:	6f44      	ldr	r4, [r0, #116]	; 0x74
  401ce4:	4021      	ands	r1, r4
  401ce6:	4029      	ands	r1, r5
  401ce8:	6741      	str	r1, [r0, #116]	; 0x74
  401cea:	e7d6      	b.n	401c9a <pio_configure+0xa2>
	return 1;
  401cec:	2301      	movs	r3, #1
		p_pio->PIO_PUDR = ul_mask;
  401cee:	6602      	str	r2, [r0, #96]	; 0x60
}
  401cf0:	4618      	mov	r0, r3
  401cf2:	bc30      	pop	{r4, r5}
  401cf4:	4770      	bx	lr
		p_pio->PIO_SODR = ul_mask;
  401cf6:	6302      	str	r2, [r0, #48]	; 0x30
  401cf8:	e7af      	b.n	401c5a <pio_configure+0x62>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401cfa:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401cfc:	4311      	orrs	r1, r2
  401cfe:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401d00:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401d02:	6f44      	ldr	r4, [r0, #116]	; 0x74
  401d04:	4021      	ands	r1, r4
  401d06:	ea21 0102 	bic.w	r1, r1, r2
  401d0a:	6741      	str	r1, [r0, #116]	; 0x74
  401d0c:	e7c5      	b.n	401c9a <pio_configure+0xa2>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401d0e:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401d10:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401d12:	4021      	ands	r1, r4
  401d14:	ea21 0102 	bic.w	r1, r1, r2
  401d18:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401d1a:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401d1c:	4311      	orrs	r1, r2
  401d1e:	6741      	str	r1, [r0, #116]	; 0x74
  401d20:	e7bb      	b.n	401c9a <pio_configure+0xa2>
  401d22:	bf00      	nop

00401d24 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401d24:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401d26:	4770      	bx	lr

00401d28 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401d28:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401d2a:	4770      	bx	lr

00401d2c <pio_configure_pin>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401d2c:	4b53      	ldr	r3, [pc, #332]	; (401e7c <pio_configure_pin+0x150>)
	switch (ul_flags & PIO_TYPE_Msk) {
  401d2e:	f001 42f0 	and.w	r2, r1, #2013265920	; 0x78000000
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401d32:	eb03 1350 	add.w	r3, r3, r0, lsr #5
	switch (ul_flags & PIO_TYPE_Msk) {
  401d36:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
{
  401d3a:	b470      	push	{r4, r5, r6}
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401d3c:	ea4f 2343 	mov.w	r3, r3, lsl #9
	switch (ul_flags & PIO_TYPE_Msk) {
  401d40:	d06d      	beq.n	401e1e <pio_configure_pin+0xf2>
  401d42:	d80b      	bhi.n	401d5c <pio_configure_pin+0x30>
  401d44:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
  401d48:	d027      	beq.n	401d9a <pio_configure_pin+0x6e>
  401d4a:	f1b2 5fc0 	cmp.w	r2, #402653184	; 0x18000000
  401d4e:	d052      	beq.n	401df6 <pio_configure_pin+0xca>
  401d50:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
  401d54:	d038      	beq.n	401dc8 <pio_configure_pin+0x9c>
		return 0;
  401d56:	2000      	movs	r0, #0
}
  401d58:	bc70      	pop	{r4, r5, r6}
  401d5a:	4770      	bx	lr
	switch (ul_flags & PIO_TYPE_Msk) {
  401d5c:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
  401d60:	d066      	beq.n	401e30 <pio_configure_pin+0x104>
  401d62:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401d66:	d063      	beq.n	401e30 <pio_configure_pin+0x104>
  401d68:	f1b2 5f20 	cmp.w	r2, #671088640	; 0x28000000
  401d6c:	d1f3      	bne.n	401d56 <pio_configure_pin+0x2a>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401d6e:	f000 001f 	and.w	r0, r0, #31
  401d72:	2201      	movs	r2, #1
	if (ul_pull_up_enable) {
  401d74:	07cd      	lsls	r5, r1, #31
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401d76:	fa02 f200 	lsl.w	r2, r2, r0
	p_pio->PIO_IDR = ul_mask;
  401d7a:	645a      	str	r2, [r3, #68]	; 0x44
	if (ul_pull_up_enable) {
  401d7c:	d573      	bpl.n	401e66 <pio_configure_pin+0x13a>
		p_pio->PIO_PUER = ul_mask;
  401d7e:	665a      	str	r2, [r3, #100]	; 0x64
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401d80:	f011 0f0a 	tst.w	r1, #10
  401d84:	d06d      	beq.n	401e62 <pio_configure_pin+0x136>
		p_pio->PIO_IFER = ul_mask;
  401d86:	621a      	str	r2, [r3, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  401d88:	078c      	lsls	r4, r1, #30
  401d8a:	d56e      	bpl.n	401e6a <pio_configure_pin+0x13e>
		p_pio->PIO_IFSCDR = ul_mask;
  401d8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  401d90:	615a      	str	r2, [r3, #20]
	return 1;
  401d92:	2001      	movs	r0, #1
	p_pio->PIO_PER = ul_mask;
  401d94:	601a      	str	r2, [r3, #0]
}
  401d96:	bc70      	pop	{r4, r5, r6}
  401d98:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401d9a:	f000 021f 	and.w	r2, r0, #31
  401d9e:	2001      	movs	r0, #1
	if (ul_pull_up_enable) {
  401da0:	07c9      	lsls	r1, r1, #31
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401da2:	fa00 f202 	lsl.w	r2, r0, r2
	p_pio->PIO_IDR = ul_mask;
  401da6:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABCDSR[0];
  401da8:	6f1c      	ldr	r4, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401daa:	ea44 0402 	orr.w	r4, r4, r2
  401dae:	671c      	str	r4, [r3, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401db0:	6f5c      	ldr	r4, [r3, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401db2:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  401db4:	ea04 0405 	and.w	r4, r4, r5
  401db8:	ea24 0402 	bic.w	r4, r4, r2
  401dbc:	675c      	str	r4, [r3, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  401dbe:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
  401dc0:	d516      	bpl.n	401df0 <pio_configure_pin+0xc4>
		p_pio->PIO_PUER = ul_mask;
  401dc2:	665a      	str	r2, [r3, #100]	; 0x64
}
  401dc4:	bc70      	pop	{r4, r5, r6}
  401dc6:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401dc8:	f000 021f 	and.w	r2, r0, #31
  401dcc:	2001      	movs	r0, #1
  401dce:	fa00 f202 	lsl.w	r2, r0, r2
	p_pio->PIO_IDR = ul_mask;
  401dd2:	645a      	str	r2, [r3, #68]	; 0x44
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401dd4:	43d6      	mvns	r6, r2
		ul_sr = p_pio->PIO_ABCDSR[0];
  401dd6:	6f1d      	ldr	r5, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401dd8:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  401dda:	4025      	ands	r5, r4
  401ddc:	4035      	ands	r5, r6
  401dde:	671d      	str	r5, [r3, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401de0:	6f5c      	ldr	r4, [r3, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401de2:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  401de4:	402c      	ands	r4, r5
  401de6:	4034      	ands	r4, r6
  401de8:	675c      	str	r4, [r3, #116]	; 0x74
	if (ul_pull_up_enable) {
  401dea:	07cc      	lsls	r4, r1, #31
	p_pio->PIO_PDR = ul_mask;
  401dec:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
  401dee:	d4e8      	bmi.n	401dc2 <pio_configure_pin+0x96>
		p_pio->PIO_PUDR = ul_mask;
  401df0:	661a      	str	r2, [r3, #96]	; 0x60
}
  401df2:	bc70      	pop	{r4, r5, r6}
  401df4:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401df6:	f000 021f 	and.w	r2, r0, #31
  401dfa:	2001      	movs	r0, #1
  401dfc:	fa00 f202 	lsl.w	r2, r0, r2
	p_pio->PIO_IDR = ul_mask;
  401e00:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABCDSR[0];
  401e02:	6f1c      	ldr	r4, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401e04:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  401e06:	402c      	ands	r4, r5
  401e08:	ea24 0402 	bic.w	r4, r4, r2
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401e0c:	671c      	str	r4, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
  401e0e:	07ce      	lsls	r6, r1, #31
		ul_sr = p_pio->PIO_ABCDSR[1];
  401e10:	6f5c      	ldr	r4, [r3, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401e12:	ea44 0402 	orr.w	r4, r4, r2
  401e16:	675c      	str	r4, [r3, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  401e18:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
  401e1a:	d5e9      	bpl.n	401df0 <pio_configure_pin+0xc4>
  401e1c:	e7d1      	b.n	401dc2 <pio_configure_pin+0x96>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401e1e:	f000 021f 	and.w	r2, r0, #31
  401e22:	2001      	movs	r0, #1
  401e24:	fa00 f202 	lsl.w	r2, r0, r2
	p_pio->PIO_IDR = ul_mask;
  401e28:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABCDSR[0];
  401e2a:	6f1c      	ldr	r4, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401e2c:	4314      	orrs	r4, r2
  401e2e:	e7ed      	b.n	401e0c <pio_configure_pin+0xe0>
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401e30:	f000 001f 	and.w	r0, r0, #31
  401e34:	2201      	movs	r2, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401e36:	f001 5460 	and.w	r4, r1, #939524096	; 0x38000000
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  401e3a:	f001 0504 	and.w	r5, r1, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401e3e:	4082      	lsls	r2, r0
	if (ul_pull_up_enable) {
  401e40:	07c9      	lsls	r1, r1, #31
	p_pio->PIO_IDR = ul_mask;
  401e42:	645a      	str	r2, [r3, #68]	; 0x44
	if (ul_pull_up_enable) {
  401e44:	d50b      	bpl.n	401e5e <pio_configure_pin+0x132>
		p_pio->PIO_PUER = ul_mask;
  401e46:	665a      	str	r2, [r3, #100]	; 0x64
	if (ul_multidrive_enable) {
  401e48:	b1a5      	cbz	r5, 401e74 <pio_configure_pin+0x148>
		p_pio->PIO_MDER = ul_mask;
  401e4a:	651a      	str	r2, [r3, #80]	; 0x50
	if (ul_default_level) {
  401e4c:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
  401e50:	d012      	beq.n	401e78 <pio_configure_pin+0x14c>
		p_pio->PIO_CODR = ul_mask;
  401e52:	635a      	str	r2, [r3, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  401e54:	611a      	str	r2, [r3, #16]
	return 1;
  401e56:	2001      	movs	r0, #1
	p_pio->PIO_PER = ul_mask;
  401e58:	601a      	str	r2, [r3, #0]
}
  401e5a:	bc70      	pop	{r4, r5, r6}
  401e5c:	4770      	bx	lr
		p_pio->PIO_PUDR = ul_mask;
  401e5e:	661a      	str	r2, [r3, #96]	; 0x60
  401e60:	e7f2      	b.n	401e48 <pio_configure_pin+0x11c>
		p_pio->PIO_IFDR = ul_mask;
  401e62:	625a      	str	r2, [r3, #36]	; 0x24
  401e64:	e790      	b.n	401d88 <pio_configure_pin+0x5c>
		p_pio->PIO_PUDR = ul_mask;
  401e66:	661a      	str	r2, [r3, #96]	; 0x60
  401e68:	e78a      	b.n	401d80 <pio_configure_pin+0x54>
		if (ul_attribute & PIO_DEBOUNCE) {
  401e6a:	0708      	lsls	r0, r1, #28
  401e6c:	d590      	bpl.n	401d90 <pio_configure_pin+0x64>
			p_pio->PIO_IFSCER = ul_mask;
  401e6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  401e72:	e78d      	b.n	401d90 <pio_configure_pin+0x64>
		p_pio->PIO_MDDR = ul_mask;
  401e74:	655a      	str	r2, [r3, #84]	; 0x54
  401e76:	e7e9      	b.n	401e4c <pio_configure_pin+0x120>
		p_pio->PIO_SODR = ul_mask;
  401e78:	631a      	str	r2, [r3, #48]	; 0x30
  401e7a:	e7eb      	b.n	401e54 <pio_configure_pin+0x128>
  401e7c:	00200707 	.word	0x00200707

00401e80 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401e80:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  401e82:	4b2e      	ldr	r3, [pc, #184]	; (401f3c <PIOA_Handler+0xbc>)
  401e84:	482e      	ldr	r0, [pc, #184]	; (401f40 <PIOA_Handler+0xc0>)
  401e86:	4798      	blx	r3
  401e88:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401e8a:	4b2e      	ldr	r3, [pc, #184]	; (401f44 <PIOA_Handler+0xc4>)
  401e8c:	482c      	ldr	r0, [pc, #176]	; (401f40 <PIOA_Handler+0xc0>)
  401e8e:	4798      	blx	r3
	if (status != 0) {
  401e90:	4005      	ands	r5, r0
  401e92:	d015      	beq.n	401ec0 <PIOA_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401e94:	4c2c      	ldr	r4, [pc, #176]	; (401f48 <PIOA_Handler+0xc8>)
  401e96:	6820      	ldr	r0, [r4, #0]
  401e98:	280a      	cmp	r0, #10
  401e9a:	d019      	beq.n	401ed0 <PIOA_Handler+0x50>
  401e9c:	6920      	ldr	r0, [r4, #16]
  401e9e:	280a      	cmp	r0, #10
  401ea0:	d01f      	beq.n	401ee2 <PIOA_Handler+0x62>
  401ea2:	6a20      	ldr	r0, [r4, #32]
  401ea4:	280a      	cmp	r0, #10
  401ea6:	d025      	beq.n	401ef4 <PIOA_Handler+0x74>
  401ea8:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401eaa:	280a      	cmp	r0, #10
  401eac:	d02b      	beq.n	401f06 <PIOA_Handler+0x86>
  401eae:	6c20      	ldr	r0, [r4, #64]	; 0x40
  401eb0:	280a      	cmp	r0, #10
  401eb2:	d031      	beq.n	401f18 <PIOA_Handler+0x98>
  401eb4:	6d20      	ldr	r0, [r4, #80]	; 0x50
  401eb6:	280a      	cmp	r0, #10
  401eb8:	d037      	beq.n	401f2a <PIOA_Handler+0xaa>
  401eba:	6e20      	ldr	r0, [r4, #96]	; 0x60
  401ebc:	280a      	cmp	r0, #10
  401ebe:	d000      	beq.n	401ec2 <PIOA_Handler+0x42>
  401ec0:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401ec2:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401ec4:	4229      	tst	r1, r5
  401ec6:	d0fb      	beq.n	401ec0 <PIOA_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401ec8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	pio_handler_process(PIOA, ID_PIOA);
}
  401eca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401ece:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401ed0:	6861      	ldr	r1, [r4, #4]
  401ed2:	420d      	tst	r5, r1
  401ed4:	d0e2      	beq.n	401e9c <PIOA_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401ed6:	68e3      	ldr	r3, [r4, #12]
  401ed8:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401eda:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  401edc:	439d      	bics	r5, r3
  401ede:	d0ef      	beq.n	401ec0 <PIOA_Handler+0x40>
  401ee0:	e7dc      	b.n	401e9c <PIOA_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401ee2:	6961      	ldr	r1, [r4, #20]
  401ee4:	4229      	tst	r1, r5
  401ee6:	d0dc      	beq.n	401ea2 <PIOA_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401ee8:	69e3      	ldr	r3, [r4, #28]
  401eea:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401eec:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  401eee:	439d      	bics	r5, r3
  401ef0:	d0e6      	beq.n	401ec0 <PIOA_Handler+0x40>
  401ef2:	e7d6      	b.n	401ea2 <PIOA_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401ef4:	6a61      	ldr	r1, [r4, #36]	; 0x24
  401ef6:	4229      	tst	r1, r5
  401ef8:	d0d6      	beq.n	401ea8 <PIOA_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401efa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401efc:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401efe:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  401f00:	439d      	bics	r5, r3
  401f02:	d0dd      	beq.n	401ec0 <PIOA_Handler+0x40>
  401f04:	e7d0      	b.n	401ea8 <PIOA_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401f06:	6b61      	ldr	r1, [r4, #52]	; 0x34
  401f08:	4229      	tst	r1, r5
  401f0a:	d0d0      	beq.n	401eae <PIOA_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401f0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401f0e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401f10:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  401f12:	439d      	bics	r5, r3
  401f14:	d0d4      	beq.n	401ec0 <PIOA_Handler+0x40>
  401f16:	e7ca      	b.n	401eae <PIOA_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401f18:	6c61      	ldr	r1, [r4, #68]	; 0x44
  401f1a:	4229      	tst	r1, r5
  401f1c:	d0ca      	beq.n	401eb4 <PIOA_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401f1e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401f20:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401f22:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  401f24:	439d      	bics	r5, r3
  401f26:	d0cb      	beq.n	401ec0 <PIOA_Handler+0x40>
  401f28:	e7c4      	b.n	401eb4 <PIOA_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401f2a:	6d61      	ldr	r1, [r4, #84]	; 0x54
  401f2c:	4229      	tst	r1, r5
  401f2e:	d0c4      	beq.n	401eba <PIOA_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401f30:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  401f32:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401f34:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  401f36:	439d      	bics	r5, r3
  401f38:	d0c2      	beq.n	401ec0 <PIOA_Handler+0x40>
  401f3a:	e7be      	b.n	401eba <PIOA_Handler+0x3a>
  401f3c:	00401d25 	.word	0x00401d25
  401f40:	400e0e00 	.word	0x400e0e00
  401f44:	00401d29 	.word	0x00401d29
  401f48:	2041c060 	.word	0x2041c060

00401f4c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401f4c:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  401f4e:	4b2e      	ldr	r3, [pc, #184]	; (402008 <PIOB_Handler+0xbc>)
  401f50:	482e      	ldr	r0, [pc, #184]	; (40200c <PIOB_Handler+0xc0>)
  401f52:	4798      	blx	r3
  401f54:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401f56:	4b2e      	ldr	r3, [pc, #184]	; (402010 <PIOB_Handler+0xc4>)
  401f58:	482c      	ldr	r0, [pc, #176]	; (40200c <PIOB_Handler+0xc0>)
  401f5a:	4798      	blx	r3
	if (status != 0) {
  401f5c:	4005      	ands	r5, r0
  401f5e:	d015      	beq.n	401f8c <PIOB_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401f60:	4c2c      	ldr	r4, [pc, #176]	; (402014 <PIOB_Handler+0xc8>)
  401f62:	6820      	ldr	r0, [r4, #0]
  401f64:	280b      	cmp	r0, #11
  401f66:	d019      	beq.n	401f9c <PIOB_Handler+0x50>
  401f68:	6920      	ldr	r0, [r4, #16]
  401f6a:	280b      	cmp	r0, #11
  401f6c:	d01f      	beq.n	401fae <PIOB_Handler+0x62>
  401f6e:	6a20      	ldr	r0, [r4, #32]
  401f70:	280b      	cmp	r0, #11
  401f72:	d025      	beq.n	401fc0 <PIOB_Handler+0x74>
  401f74:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401f76:	280b      	cmp	r0, #11
  401f78:	d02b      	beq.n	401fd2 <PIOB_Handler+0x86>
  401f7a:	6c20      	ldr	r0, [r4, #64]	; 0x40
  401f7c:	280b      	cmp	r0, #11
  401f7e:	d031      	beq.n	401fe4 <PIOB_Handler+0x98>
  401f80:	6d20      	ldr	r0, [r4, #80]	; 0x50
  401f82:	280b      	cmp	r0, #11
  401f84:	d037      	beq.n	401ff6 <PIOB_Handler+0xaa>
  401f86:	6e20      	ldr	r0, [r4, #96]	; 0x60
  401f88:	280b      	cmp	r0, #11
  401f8a:	d000      	beq.n	401f8e <PIOB_Handler+0x42>
  401f8c:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401f8e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401f90:	4229      	tst	r1, r5
  401f92:	d0fb      	beq.n	401f8c <PIOB_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401f94:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    pio_handler_process(PIOB, ID_PIOB);
}
  401f96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401f9a:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401f9c:	6861      	ldr	r1, [r4, #4]
  401f9e:	420d      	tst	r5, r1
  401fa0:	d0e2      	beq.n	401f68 <PIOB_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401fa2:	68e3      	ldr	r3, [r4, #12]
  401fa4:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401fa6:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  401fa8:	439d      	bics	r5, r3
  401faa:	d0ef      	beq.n	401f8c <PIOB_Handler+0x40>
  401fac:	e7dc      	b.n	401f68 <PIOB_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401fae:	6961      	ldr	r1, [r4, #20]
  401fb0:	4229      	tst	r1, r5
  401fb2:	d0dc      	beq.n	401f6e <PIOB_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401fb4:	69e3      	ldr	r3, [r4, #28]
  401fb6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401fb8:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  401fba:	439d      	bics	r5, r3
  401fbc:	d0e6      	beq.n	401f8c <PIOB_Handler+0x40>
  401fbe:	e7d6      	b.n	401f6e <PIOB_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401fc0:	6a61      	ldr	r1, [r4, #36]	; 0x24
  401fc2:	4229      	tst	r1, r5
  401fc4:	d0d6      	beq.n	401f74 <PIOB_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401fc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401fc8:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401fca:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  401fcc:	439d      	bics	r5, r3
  401fce:	d0dd      	beq.n	401f8c <PIOB_Handler+0x40>
  401fd0:	e7d0      	b.n	401f74 <PIOB_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401fd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
  401fd4:	4229      	tst	r1, r5
  401fd6:	d0d0      	beq.n	401f7a <PIOB_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401fd8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401fda:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401fdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  401fde:	439d      	bics	r5, r3
  401fe0:	d0d4      	beq.n	401f8c <PIOB_Handler+0x40>
  401fe2:	e7ca      	b.n	401f7a <PIOB_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401fe4:	6c61      	ldr	r1, [r4, #68]	; 0x44
  401fe6:	4229      	tst	r1, r5
  401fe8:	d0ca      	beq.n	401f80 <PIOB_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401fea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401fec:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401fee:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  401ff0:	439d      	bics	r5, r3
  401ff2:	d0cb      	beq.n	401f8c <PIOB_Handler+0x40>
  401ff4:	e7c4      	b.n	401f80 <PIOB_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401ff6:	6d61      	ldr	r1, [r4, #84]	; 0x54
  401ff8:	4229      	tst	r1, r5
  401ffa:	d0c4      	beq.n	401f86 <PIOB_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401ffc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  401ffe:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402000:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  402002:	439d      	bics	r5, r3
  402004:	d0c2      	beq.n	401f8c <PIOB_Handler+0x40>
  402006:	e7be      	b.n	401f86 <PIOB_Handler+0x3a>
  402008:	00401d25 	.word	0x00401d25
  40200c:	400e1000 	.word	0x400e1000
  402010:	00401d29 	.word	0x00401d29
  402014:	2041c060 	.word	0x2041c060

00402018 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  402018:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  40201a:	4b2e      	ldr	r3, [pc, #184]	; (4020d4 <PIOC_Handler+0xbc>)
  40201c:	482e      	ldr	r0, [pc, #184]	; (4020d8 <PIOC_Handler+0xc0>)
  40201e:	4798      	blx	r3
  402020:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  402022:	4b2e      	ldr	r3, [pc, #184]	; (4020dc <PIOC_Handler+0xc4>)
  402024:	482c      	ldr	r0, [pc, #176]	; (4020d8 <PIOC_Handler+0xc0>)
  402026:	4798      	blx	r3
	if (status != 0) {
  402028:	4005      	ands	r5, r0
  40202a:	d015      	beq.n	402058 <PIOC_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  40202c:	4c2c      	ldr	r4, [pc, #176]	; (4020e0 <PIOC_Handler+0xc8>)
  40202e:	6820      	ldr	r0, [r4, #0]
  402030:	280c      	cmp	r0, #12
  402032:	d019      	beq.n	402068 <PIOC_Handler+0x50>
  402034:	6920      	ldr	r0, [r4, #16]
  402036:	280c      	cmp	r0, #12
  402038:	d01f      	beq.n	40207a <PIOC_Handler+0x62>
  40203a:	6a20      	ldr	r0, [r4, #32]
  40203c:	280c      	cmp	r0, #12
  40203e:	d025      	beq.n	40208c <PIOC_Handler+0x74>
  402040:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402042:	280c      	cmp	r0, #12
  402044:	d02b      	beq.n	40209e <PIOC_Handler+0x86>
  402046:	6c20      	ldr	r0, [r4, #64]	; 0x40
  402048:	280c      	cmp	r0, #12
  40204a:	d031      	beq.n	4020b0 <PIOC_Handler+0x98>
  40204c:	6d20      	ldr	r0, [r4, #80]	; 0x50
  40204e:	280c      	cmp	r0, #12
  402050:	d037      	beq.n	4020c2 <PIOC_Handler+0xaa>
  402052:	6e20      	ldr	r0, [r4, #96]	; 0x60
  402054:	280c      	cmp	r0, #12
  402056:	d000      	beq.n	40205a <PIOC_Handler+0x42>
  402058:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40205a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40205c:	4229      	tst	r1, r5
  40205e:	d0fb      	beq.n	402058 <PIOC_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402060:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	pio_handler_process(PIOC, ID_PIOC);
}
  402062:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402066:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402068:	6861      	ldr	r1, [r4, #4]
  40206a:	420d      	tst	r5, r1
  40206c:	d0e2      	beq.n	402034 <PIOC_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40206e:	68e3      	ldr	r3, [r4, #12]
  402070:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402072:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  402074:	439d      	bics	r5, r3
  402076:	d0ef      	beq.n	402058 <PIOC_Handler+0x40>
  402078:	e7dc      	b.n	402034 <PIOC_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40207a:	6961      	ldr	r1, [r4, #20]
  40207c:	4229      	tst	r1, r5
  40207e:	d0dc      	beq.n	40203a <PIOC_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402080:	69e3      	ldr	r3, [r4, #28]
  402082:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402084:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  402086:	439d      	bics	r5, r3
  402088:	d0e6      	beq.n	402058 <PIOC_Handler+0x40>
  40208a:	e7d6      	b.n	40203a <PIOC_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40208c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  40208e:	4229      	tst	r1, r5
  402090:	d0d6      	beq.n	402040 <PIOC_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402092:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402094:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402096:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  402098:	439d      	bics	r5, r3
  40209a:	d0dd      	beq.n	402058 <PIOC_Handler+0x40>
  40209c:	e7d0      	b.n	402040 <PIOC_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40209e:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4020a0:	4229      	tst	r1, r5
  4020a2:	d0d0      	beq.n	402046 <PIOC_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4020a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4020a6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4020a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  4020aa:	439d      	bics	r5, r3
  4020ac:	d0d4      	beq.n	402058 <PIOC_Handler+0x40>
  4020ae:	e7ca      	b.n	402046 <PIOC_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4020b0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4020b2:	4229      	tst	r1, r5
  4020b4:	d0ca      	beq.n	40204c <PIOC_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4020b6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  4020b8:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4020ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  4020bc:	439d      	bics	r5, r3
  4020be:	d0cb      	beq.n	402058 <PIOC_Handler+0x40>
  4020c0:	e7c4      	b.n	40204c <PIOC_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4020c2:	6d61      	ldr	r1, [r4, #84]	; 0x54
  4020c4:	4229      	tst	r1, r5
  4020c6:	d0c4      	beq.n	402052 <PIOC_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4020c8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  4020ca:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4020cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  4020ce:	439d      	bics	r5, r3
  4020d0:	d0c2      	beq.n	402058 <PIOC_Handler+0x40>
  4020d2:	e7be      	b.n	402052 <PIOC_Handler+0x3a>
  4020d4:	00401d25 	.word	0x00401d25
  4020d8:	400e1200 	.word	0x400e1200
  4020dc:	00401d29 	.word	0x00401d29
  4020e0:	2041c060 	.word	0x2041c060

004020e4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4020e4:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  4020e6:	4b2e      	ldr	r3, [pc, #184]	; (4021a0 <PIOD_Handler+0xbc>)
  4020e8:	482e      	ldr	r0, [pc, #184]	; (4021a4 <PIOD_Handler+0xc0>)
  4020ea:	4798      	blx	r3
  4020ec:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4020ee:	4b2e      	ldr	r3, [pc, #184]	; (4021a8 <PIOD_Handler+0xc4>)
  4020f0:	482c      	ldr	r0, [pc, #176]	; (4021a4 <PIOD_Handler+0xc0>)
  4020f2:	4798      	blx	r3
	if (status != 0) {
  4020f4:	4005      	ands	r5, r0
  4020f6:	d015      	beq.n	402124 <PIOD_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4020f8:	4c2c      	ldr	r4, [pc, #176]	; (4021ac <PIOD_Handler+0xc8>)
  4020fa:	6820      	ldr	r0, [r4, #0]
  4020fc:	2810      	cmp	r0, #16
  4020fe:	d019      	beq.n	402134 <PIOD_Handler+0x50>
  402100:	6920      	ldr	r0, [r4, #16]
  402102:	2810      	cmp	r0, #16
  402104:	d01f      	beq.n	402146 <PIOD_Handler+0x62>
  402106:	6a20      	ldr	r0, [r4, #32]
  402108:	2810      	cmp	r0, #16
  40210a:	d025      	beq.n	402158 <PIOD_Handler+0x74>
  40210c:	6b20      	ldr	r0, [r4, #48]	; 0x30
  40210e:	2810      	cmp	r0, #16
  402110:	d02b      	beq.n	40216a <PIOD_Handler+0x86>
  402112:	6c20      	ldr	r0, [r4, #64]	; 0x40
  402114:	2810      	cmp	r0, #16
  402116:	d031      	beq.n	40217c <PIOD_Handler+0x98>
  402118:	6d20      	ldr	r0, [r4, #80]	; 0x50
  40211a:	2810      	cmp	r0, #16
  40211c:	d037      	beq.n	40218e <PIOD_Handler+0xaa>
  40211e:	6e20      	ldr	r0, [r4, #96]	; 0x60
  402120:	2810      	cmp	r0, #16
  402122:	d000      	beq.n	402126 <PIOD_Handler+0x42>
  402124:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402126:	6e61      	ldr	r1, [r4, #100]	; 0x64
  402128:	4229      	tst	r1, r5
  40212a:	d0fb      	beq.n	402124 <PIOD_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40212c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	pio_handler_process(PIOD, ID_PIOD);
}
  40212e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402132:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402134:	6861      	ldr	r1, [r4, #4]
  402136:	420d      	tst	r5, r1
  402138:	d0e2      	beq.n	402100 <PIOD_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40213a:	68e3      	ldr	r3, [r4, #12]
  40213c:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40213e:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  402140:	439d      	bics	r5, r3
  402142:	d0ef      	beq.n	402124 <PIOD_Handler+0x40>
  402144:	e7dc      	b.n	402100 <PIOD_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402146:	6961      	ldr	r1, [r4, #20]
  402148:	4229      	tst	r1, r5
  40214a:	d0dc      	beq.n	402106 <PIOD_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40214c:	69e3      	ldr	r3, [r4, #28]
  40214e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402150:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  402152:	439d      	bics	r5, r3
  402154:	d0e6      	beq.n	402124 <PIOD_Handler+0x40>
  402156:	e7d6      	b.n	402106 <PIOD_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402158:	6a61      	ldr	r1, [r4, #36]	; 0x24
  40215a:	4229      	tst	r1, r5
  40215c:	d0d6      	beq.n	40210c <PIOD_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40215e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402160:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402162:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  402164:	439d      	bics	r5, r3
  402166:	d0dd      	beq.n	402124 <PIOD_Handler+0x40>
  402168:	e7d0      	b.n	40210c <PIOD_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40216a:	6b61      	ldr	r1, [r4, #52]	; 0x34
  40216c:	4229      	tst	r1, r5
  40216e:	d0d0      	beq.n	402112 <PIOD_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402170:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402172:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402174:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  402176:	439d      	bics	r5, r3
  402178:	d0d4      	beq.n	402124 <PIOD_Handler+0x40>
  40217a:	e7ca      	b.n	402112 <PIOD_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40217c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40217e:	4229      	tst	r1, r5
  402180:	d0ca      	beq.n	402118 <PIOD_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402182:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  402184:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402186:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  402188:	439d      	bics	r5, r3
  40218a:	d0cb      	beq.n	402124 <PIOD_Handler+0x40>
  40218c:	e7c4      	b.n	402118 <PIOD_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40218e:	6d61      	ldr	r1, [r4, #84]	; 0x54
  402190:	4229      	tst	r1, r5
  402192:	d0c4      	beq.n	40211e <PIOD_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402194:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  402196:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402198:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  40219a:	439d      	bics	r5, r3
  40219c:	d0c2      	beq.n	402124 <PIOD_Handler+0x40>
  40219e:	e7be      	b.n	40211e <PIOD_Handler+0x3a>
  4021a0:	00401d25 	.word	0x00401d25
  4021a4:	400e1400 	.word	0x400e1400
  4021a8:	00401d29 	.word	0x00401d29
  4021ac:	2041c060 	.word	0x2041c060

004021b0 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4021b0:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  4021b2:	4b2e      	ldr	r3, [pc, #184]	; (40226c <PIOE_Handler+0xbc>)
  4021b4:	482e      	ldr	r0, [pc, #184]	; (402270 <PIOE_Handler+0xc0>)
  4021b6:	4798      	blx	r3
  4021b8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4021ba:	4b2e      	ldr	r3, [pc, #184]	; (402274 <PIOE_Handler+0xc4>)
  4021bc:	482c      	ldr	r0, [pc, #176]	; (402270 <PIOE_Handler+0xc0>)
  4021be:	4798      	blx	r3
	if (status != 0) {
  4021c0:	4005      	ands	r5, r0
  4021c2:	d015      	beq.n	4021f0 <PIOE_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4021c4:	4c2c      	ldr	r4, [pc, #176]	; (402278 <PIOE_Handler+0xc8>)
  4021c6:	6820      	ldr	r0, [r4, #0]
  4021c8:	2811      	cmp	r0, #17
  4021ca:	d019      	beq.n	402200 <PIOE_Handler+0x50>
  4021cc:	6920      	ldr	r0, [r4, #16]
  4021ce:	2811      	cmp	r0, #17
  4021d0:	d01f      	beq.n	402212 <PIOE_Handler+0x62>
  4021d2:	6a20      	ldr	r0, [r4, #32]
  4021d4:	2811      	cmp	r0, #17
  4021d6:	d025      	beq.n	402224 <PIOE_Handler+0x74>
  4021d8:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4021da:	2811      	cmp	r0, #17
  4021dc:	d02b      	beq.n	402236 <PIOE_Handler+0x86>
  4021de:	6c20      	ldr	r0, [r4, #64]	; 0x40
  4021e0:	2811      	cmp	r0, #17
  4021e2:	d031      	beq.n	402248 <PIOE_Handler+0x98>
  4021e4:	6d20      	ldr	r0, [r4, #80]	; 0x50
  4021e6:	2811      	cmp	r0, #17
  4021e8:	d037      	beq.n	40225a <PIOE_Handler+0xaa>
  4021ea:	6e20      	ldr	r0, [r4, #96]	; 0x60
  4021ec:	2811      	cmp	r0, #17
  4021ee:	d000      	beq.n	4021f2 <PIOE_Handler+0x42>
  4021f0:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4021f2:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4021f4:	4229      	tst	r1, r5
  4021f6:	d0fb      	beq.n	4021f0 <PIOE_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4021f8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	pio_handler_process(PIOE, ID_PIOE);
}
  4021fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4021fe:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402200:	6861      	ldr	r1, [r4, #4]
  402202:	420d      	tst	r5, r1
  402204:	d0e2      	beq.n	4021cc <PIOE_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402206:	68e3      	ldr	r3, [r4, #12]
  402208:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40220a:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  40220c:	439d      	bics	r5, r3
  40220e:	d0ef      	beq.n	4021f0 <PIOE_Handler+0x40>
  402210:	e7dc      	b.n	4021cc <PIOE_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402212:	6961      	ldr	r1, [r4, #20]
  402214:	4229      	tst	r1, r5
  402216:	d0dc      	beq.n	4021d2 <PIOE_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402218:	69e3      	ldr	r3, [r4, #28]
  40221a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40221c:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  40221e:	439d      	bics	r5, r3
  402220:	d0e6      	beq.n	4021f0 <PIOE_Handler+0x40>
  402222:	e7d6      	b.n	4021d2 <PIOE_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402224:	6a61      	ldr	r1, [r4, #36]	; 0x24
  402226:	4229      	tst	r1, r5
  402228:	d0d6      	beq.n	4021d8 <PIOE_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40222a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40222c:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40222e:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  402230:	439d      	bics	r5, r3
  402232:	d0dd      	beq.n	4021f0 <PIOE_Handler+0x40>
  402234:	e7d0      	b.n	4021d8 <PIOE_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402236:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402238:	4229      	tst	r1, r5
  40223a:	d0d0      	beq.n	4021de <PIOE_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40223c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40223e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402240:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  402242:	439d      	bics	r5, r3
  402244:	d0d4      	beq.n	4021f0 <PIOE_Handler+0x40>
  402246:	e7ca      	b.n	4021de <PIOE_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402248:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40224a:	4229      	tst	r1, r5
  40224c:	d0ca      	beq.n	4021e4 <PIOE_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40224e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  402250:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402252:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  402254:	439d      	bics	r5, r3
  402256:	d0cb      	beq.n	4021f0 <PIOE_Handler+0x40>
  402258:	e7c4      	b.n	4021e4 <PIOE_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40225a:	6d61      	ldr	r1, [r4, #84]	; 0x54
  40225c:	4229      	tst	r1, r5
  40225e:	d0c4      	beq.n	4021ea <PIOE_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402260:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  402262:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402264:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  402266:	439d      	bics	r5, r3
  402268:	d0c2      	beq.n	4021f0 <PIOE_Handler+0x40>
  40226a:	e7be      	b.n	4021ea <PIOE_Handler+0x3a>
  40226c:	00401d25 	.word	0x00401d25
  402270:	400e1600 	.word	0x400e1600
  402274:	00401d29 	.word	0x00401d29
  402278:	2041c060 	.word	0x2041c060

0040227c <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  40227c:	3802      	subs	r0, #2
  40227e:	2802      	cmp	r0, #2
  402280:	d80d      	bhi.n	40229e <pmc_mck_set_division+0x22>
  402282:	4b08      	ldr	r3, [pc, #32]	; (4022a4 <pmc_mck_set_division+0x28>)
  402284:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  402288:	4907      	ldr	r1, [pc, #28]	; (4022a8 <pmc_mck_set_division+0x2c>)
  40228a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40228c:	460a      	mov	r2, r1
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40228e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  402292:	4303      	orrs	r3, r0
	PMC->PMC_MCKR =
  402294:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402296:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402298:	071b      	lsls	r3, r3, #28
  40229a:	d5fc      	bpl.n	402296 <pmc_mck_set_division+0x1a>
}
  40229c:	4770      	bx	lr
{
  40229e:	2000      	movs	r0, #0
  4022a0:	e7f2      	b.n	402288 <pmc_mck_set_division+0xc>
  4022a2:	bf00      	nop
  4022a4:	00406b6c 	.word	0x00406b6c
  4022a8:	400e0600 	.word	0x400e0600

004022ac <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4022ac:	4913      	ldr	r1, [pc, #76]	; (4022fc <pmc_switch_mck_to_pllack+0x50>)
  4022ae:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4022b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4022b4:	4318      	orrs	r0, r3
  4022b6:	6308      	str	r0, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4022b8:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  4022ba:	0718      	lsls	r0, r3, #28
  4022bc:	d407      	bmi.n	4022ce <pmc_switch_mck_to_pllack+0x22>
  4022be:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4022c2:	e001      	b.n	4022c8 <pmc_switch_mck_to_pllack+0x1c>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4022c4:	3b01      	subs	r3, #1
  4022c6:	d016      	beq.n	4022f6 <pmc_switch_mck_to_pllack+0x4a>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4022c8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4022ca:	0712      	lsls	r2, r2, #28
  4022cc:	d5fa      	bpl.n	4022c4 <pmc_switch_mck_to_pllack+0x18>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4022ce:	490b      	ldr	r1, [pc, #44]	; (4022fc <pmc_switch_mck_to_pllack+0x50>)
  4022d0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4022d2:	f023 0303 	bic.w	r3, r3, #3
  4022d6:	f043 0302 	orr.w	r3, r3, #2
  4022da:	630b      	str	r3, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4022dc:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  4022de:	0718      	lsls	r0, r3, #28
  4022e0:	d407      	bmi.n	4022f2 <pmc_switch_mck_to_pllack+0x46>
  4022e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4022e6:	e001      	b.n	4022ec <pmc_switch_mck_to_pllack+0x40>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4022e8:	3b01      	subs	r3, #1
  4022ea:	d004      	beq.n	4022f6 <pmc_switch_mck_to_pllack+0x4a>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4022ec:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4022ee:	0712      	lsls	r2, r2, #28
  4022f0:	d5fa      	bpl.n	4022e8 <pmc_switch_mck_to_pllack+0x3c>
			return 1;
		}
	}

	return 0;
  4022f2:	2000      	movs	r0, #0
}
  4022f4:	4770      	bx	lr
			return 1;
  4022f6:	2001      	movs	r0, #1
  4022f8:	4770      	bx	lr
  4022fa:	bf00      	nop
  4022fc:	400e0600 	.word	0x400e0600

00402300 <pmc_switch_mainck_to_fastrc>:
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  402300:	4a0e      	ldr	r2, [pc, #56]	; (40233c <pmc_switch_mainck_to_fastrc+0x3c>)
{
  402302:	b410      	push	{r4}
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  402304:	4c0e      	ldr	r4, [pc, #56]	; (402340 <pmc_switch_mainck_to_fastrc+0x40>)

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402306:	4611      	mov	r1, r2
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  402308:	6a13      	ldr	r3, [r2, #32]
  40230a:	431c      	orrs	r4, r3
  40230c:	6214      	str	r4, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40230e:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  402310:	039a      	lsls	r2, r3, #14
  402312:	d5fc      	bpl.n	40230e <pmc_switch_mainck_to_fastrc+0xe>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  402314:	6a0c      	ldr	r4, [r1, #32]
  402316:	4b0b      	ldr	r3, [pc, #44]	; (402344 <pmc_switch_mainck_to_fastrc+0x44>)
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402318:	4a08      	ldr	r2, [pc, #32]	; (40233c <pmc_switch_mainck_to_fastrc+0x3c>)
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40231a:	4023      	ands	r3, r4
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  40231c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402320:	4318      	orrs	r0, r3
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  402322:	6208      	str	r0, [r1, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402324:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402326:	039b      	lsls	r3, r3, #14
  402328:	d5fc      	bpl.n	402324 <pmc_switch_mainck_to_fastrc+0x24>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  40232a:	6a11      	ldr	r1, [r2, #32]
  40232c:	4b06      	ldr	r3, [pc, #24]	; (402348 <pmc_switch_mainck_to_fastrc+0x48>)
  40232e:	400b      	ands	r3, r1
  402330:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402334:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  402336:	f85d 4b04 	ldr.w	r4, [sp], #4
  40233a:	4770      	bx	lr
  40233c:	400e0600 	.word	0x400e0600
  402340:	00370008 	.word	0x00370008
  402344:	ffc8ff8f 	.word	0xffc8ff8f
  402348:	fec8ffff 	.word	0xfec8ffff

0040234c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40234c:	4b02      	ldr	r3, [pc, #8]	; (402358 <pmc_osc_is_ready_mainck+0xc>)
  40234e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402350:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402354:	4770      	bx	lr
  402356:	bf00      	nop
  402358:	400e0600 	.word	0x400e0600

0040235c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40235c:	4b02      	ldr	r3, [pc, #8]	; (402368 <pmc_disable_pllack+0xc>)
  40235e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402362:	629a      	str	r2, [r3, #40]	; 0x28
  402364:	4770      	bx	lr
  402366:	bf00      	nop
  402368:	400e0600 	.word	0x400e0600

0040236c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40236c:	4b02      	ldr	r3, [pc, #8]	; (402378 <pmc_is_locked_pllack+0xc>)
  40236e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402370:	f000 0002 	and.w	r0, r0, #2
  402374:	4770      	bx	lr
  402376:	bf00      	nop
  402378:	400e0600 	.word	0x400e0600

0040237c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40237c:	283f      	cmp	r0, #63	; 0x3f
  40237e:	d81a      	bhi.n	4023b6 <pmc_enable_periph_clk+0x3a>
		return 1;
	}

	if (ul_id < 32) {
  402380:	281f      	cmp	r0, #31
  402382:	d80a      	bhi.n	40239a <pmc_enable_periph_clk+0x1e>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402384:	2301      	movs	r3, #1
  402386:	4a0e      	ldr	r2, [pc, #56]	; (4023c0 <pmc_enable_periph_clk+0x44>)
  402388:	fa03 f000 	lsl.w	r0, r3, r0
  40238c:	6991      	ldr	r1, [r2, #24]
  40238e:	ea30 0301 	bics.w	r3, r0, r1
  402392:	d012      	beq.n	4023ba <pmc_enable_periph_clk+0x3e>
			PMC->PMC_PCER0 = 1 << ul_id;
  402394:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402396:	2000      	movs	r0, #0
  402398:	4770      	bx	lr
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40239a:	2301      	movs	r3, #1
		ul_id -= 32;
  40239c:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40239e:	4a08      	ldr	r2, [pc, #32]	; (4023c0 <pmc_enable_periph_clk+0x44>)
  4023a0:	fa03 f000 	lsl.w	r0, r3, r0
  4023a4:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
  4023a8:	ea30 0303 	bics.w	r3, r0, r3
  4023ac:	d005      	beq.n	4023ba <pmc_enable_periph_clk+0x3e>
			PMC->PMC_PCER1 = 1 << ul_id;
  4023ae:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
	return 0;
  4023b2:	2000      	movs	r0, #0
  4023b4:	4770      	bx	lr
		return 1;
  4023b6:	2001      	movs	r0, #1
  4023b8:	4770      	bx	lr
	return 0;
  4023ba:	2000      	movs	r0, #0
}
  4023bc:	4770      	bx	lr
  4023be:	bf00      	nop
  4023c0:	400e0600 	.word	0x400e0600

004023c4 <pmc_pck_set_prescaler>:
 *
 * \param ul_id Peripheral ID.
 * \param ul_pres Prescaler value.
 */
void pmc_pck_set_prescaler(uint32_t ul_id, uint32_t ul_pres)
{
  4023c4:	4b0b      	ldr	r3, [pc, #44]	; (4023f4 <pmc_pck_set_prescaler+0x30>)
  4023c6:	f44f 7280 	mov.w	r2, #256	; 0x100
  4023ca:	b410      	push	{r4}
  4023cc:	eb03 0480 	add.w	r4, r3, r0, lsl #2
  4023d0:	fa02 f000 	lsl.w	r0, r2, r0
	PMC->PMC_PCK[ul_id] =
			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_PRES_Msk) | ul_pres;
  4023d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4023d6:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  4023da:	4311      	orrs	r1, r2
	PMC->PMC_PCK[ul_id] =
  4023dc:	6421      	str	r1, [r4, #64]	; 0x40
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  4023de:	e002      	b.n	4023e6 <pmc_pck_set_prescaler+0x22>
			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
  4023e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  4023e2:	4202      	tst	r2, r0
  4023e4:	d102      	bne.n	4023ec <pmc_pck_set_prescaler+0x28>
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  4023e6:	681a      	ldr	r2, [r3, #0]
  4023e8:	4202      	tst	r2, r0
  4023ea:	d1f9      	bne.n	4023e0 <pmc_pck_set_prescaler+0x1c>
}
  4023ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  4023f0:	4770      	bx	lr
  4023f2:	bf00      	nop
  4023f4:	400e0600 	.word	0x400e0600

004023f8 <pmc_pck_set_source>:
 *
 * \param ul_id Peripheral ID.
 * \param ul_source Source selection value.
 */
void pmc_pck_set_source(uint32_t ul_id, uint32_t ul_source)
{
  4023f8:	4b0b      	ldr	r3, [pc, #44]	; (402428 <pmc_pck_set_source+0x30>)
  4023fa:	f44f 7280 	mov.w	r2, #256	; 0x100
  4023fe:	b410      	push	{r4}
  402400:	eb03 0480 	add.w	r4, r3, r0, lsl #2
  402404:	fa02 f000 	lsl.w	r0, r2, r0
	PMC->PMC_PCK[ul_id] =
			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_CSS_Msk) | ul_source;
  402408:	6c22      	ldr	r2, [r4, #64]	; 0x40
  40240a:	f022 0207 	bic.w	r2, r2, #7
  40240e:	4311      	orrs	r1, r2
	PMC->PMC_PCK[ul_id] =
  402410:	6421      	str	r1, [r4, #64]	; 0x40
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  402412:	e002      	b.n	40241a <pmc_pck_set_source+0x22>
			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
  402414:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  402416:	4202      	tst	r2, r0
  402418:	d102      	bne.n	402420 <pmc_pck_set_source+0x28>
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  40241a:	681a      	ldr	r2, [r3, #0]
  40241c:	4202      	tst	r2, r0
  40241e:	d1f9      	bne.n	402414 <pmc_pck_set_source+0x1c>
}
  402420:	f85d 4b04 	ldr.w	r4, [sp], #4
  402424:	4770      	bx	lr
  402426:	bf00      	nop
  402428:	400e0600 	.word	0x400e0600

0040242c <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  40242c:	f44f 7380 	mov.w	r3, #256	; 0x100
  402430:	4a02      	ldr	r2, [pc, #8]	; (40243c <pmc_enable_pck+0x10>)
  402432:	fa03 f000 	lsl.w	r0, r3, r0
  402436:	6010      	str	r0, [r2, #0]
  402438:	4770      	bx	lr
  40243a:	bf00      	nop
  40243c:	400e0600 	.word	0x400e0600

00402440 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402440:	e7fe      	b.n	402440 <Dummy_Handler>
  402442:	bf00      	nop

00402444 <Dummy_Handler2>:
	while (1) {
	}
}

void Dummy_Handler2(void)
{
  402444:	e7fe      	b.n	402444 <Dummy_Handler2>
  402446:	bf00      	nop

00402448 <Reset_Handler>:
        if (pSrc != pDest) {
  402448:	4920      	ldr	r1, [pc, #128]	; (4024cc <Reset_Handler+0x84>)
  40244a:	4821      	ldr	r0, [pc, #132]	; (4024d0 <Reset_Handler+0x88>)
  40244c:	4281      	cmp	r1, r0
{
  40244e:	b510      	push	{r4, lr}
  402450:	b082      	sub	sp, #8
        if (pSrc != pDest) {
  402452:	d009      	beq.n	402468 <Reset_Handler+0x20>
                for (; pDest < &_erelocate;) {
  402454:	4b1f      	ldr	r3, [pc, #124]	; (4024d4 <Reset_Handler+0x8c>)
  402456:	4298      	cmp	r0, r3
  402458:	d206      	bcs.n	402468 <Reset_Handler+0x20>
                        *pDest++ = *pSrc++;
  40245a:	43c2      	mvns	r2, r0
  40245c:	4c1e      	ldr	r4, [pc, #120]	; (4024d8 <Reset_Handler+0x90>)
  40245e:	441a      	add	r2, r3
  402460:	f022 0203 	bic.w	r2, r2, #3
  402464:	3204      	adds	r2, #4
  402466:	47a0      	blx	r4
        for (pDest = &_szero; pDest < &_ezero;) {
  402468:	481c      	ldr	r0, [pc, #112]	; (4024dc <Reset_Handler+0x94>)
  40246a:	4b1d      	ldr	r3, [pc, #116]	; (4024e0 <Reset_Handler+0x98>)
  40246c:	4298      	cmp	r0, r3
  40246e:	d207      	bcs.n	402480 <Reset_Handler+0x38>
                *pDest++ = 0;
  402470:	43c2      	mvns	r2, r0
  402472:	2100      	movs	r1, #0
  402474:	4c1b      	ldr	r4, [pc, #108]	; (4024e4 <Reset_Handler+0x9c>)
  402476:	441a      	add	r2, r3
  402478:	f022 0203 	bic.w	r2, r2, #3
  40247c:	3204      	adds	r2, #4
  40247e:	47a0      	blx	r4
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  402480:	4b19      	ldr	r3, [pc, #100]	; (4024e8 <Reset_Handler+0xa0>)
  402482:	4a1a      	ldr	r2, [pc, #104]	; (4024ec <Reset_Handler+0xa4>)
  402484:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402488:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40248a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40248e:	fab3 f383 	clz	r3, r3
  402492:	095b      	lsrs	r3, r3, #5
  402494:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402496:	b672      	cpsid	i
  __ASM volatile ("dmb");
  402498:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40249c:	4a14      	ldr	r2, [pc, #80]	; (4024f0 <Reset_Handler+0xa8>)
  40249e:	2300      	movs	r3, #0
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4024a0:	4914      	ldr	r1, [pc, #80]	; (4024f4 <Reset_Handler+0xac>)
  4024a2:	7013      	strb	r3, [r2, #0]
	return flags;
  4024a4:	9801      	ldr	r0, [sp, #4]
  4024a6:	680b      	ldr	r3, [r1, #0]
  4024a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4024ac:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb");
  4024ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4024b2:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4024b6:	b120      	cbz	r0, 4024c2 <Reset_Handler+0x7a>
		cpu_irq_enable();
  4024b8:	2301      	movs	r3, #1
  4024ba:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dmb");
  4024bc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4024c0:	b662      	cpsie	i
        __libc_init_array();
  4024c2:	4b0d      	ldr	r3, [pc, #52]	; (4024f8 <Reset_Handler+0xb0>)
  4024c4:	4798      	blx	r3
        main();
  4024c6:	4b0d      	ldr	r3, [pc, #52]	; (4024fc <Reset_Handler+0xb4>)
  4024c8:	4798      	blx	r3
  4024ca:	e7fe      	b.n	4024ca <Reset_Handler+0x82>
  4024cc:	00407710 	.word	0x00407710
  4024d0:	20400000 	.word	0x20400000
  4024d4:	20400a00 	.word	0x20400a00
  4024d8:	00404349 	.word	0x00404349
  4024dc:	20404000 	.word	0x20404000
  4024e0:	2044d0e8 	.word	0x2044d0e8
  4024e4:	0040447d 	.word	0x0040447d
  4024e8:	00400000 	.word	0x00400000
  4024ec:	e000ed00 	.word	0xe000ed00
  4024f0:	20400028 	.word	0x20400028
  4024f4:	e000ed88 	.word	0xe000ed88
  4024f8:	00403d61 	.word	0x00403d61
  4024fc:	004029cd 	.word	0x004029cd

00402500 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  402500:	4a32      	ldr	r2, [pc, #200]	; (4025cc <SystemCoreClockUpdate+0xcc>)
  402502:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402504:	f003 0303 	and.w	r3, r3, #3
  402508:	2b01      	cmp	r3, #1
  40250a:	d03c      	beq.n	402586 <SystemCoreClockUpdate+0x86>
  40250c:	d325      	bcc.n	40255a <SystemCoreClockUpdate+0x5a>
  40250e:	2b02      	cmp	r3, #2
  402510:	d00d      	beq.n	40252e <SystemCoreClockUpdate+0x2e>
  402512:	482f      	ldr	r0, [pc, #188]	; (4025d0 <SystemCoreClockUpdate+0xd0>)
  402514:	6803      	ldr	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402516:	492d      	ldr	r1, [pc, #180]	; (4025cc <SystemCoreClockUpdate+0xcc>)
  402518:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  40251a:	f002 0270 	and.w	r2, r2, #112	; 0x70
  40251e:	2a70      	cmp	r2, #112	; 0x70
  402520:	d02b      	beq.n	40257a <SystemCoreClockUpdate+0x7a>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402522:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  402524:	f3c2 1202 	ubfx	r2, r2, #4, #3
  402528:	40d3      	lsrs	r3, r2
  40252a:	6003      	str	r3, [r0, #0]
  40252c:	4770      	bx	lr
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40252e:	6a13      	ldr	r3, [r2, #32]
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402530:	4827      	ldr	r0, [pc, #156]	; (4025d0 <SystemCoreClockUpdate+0xd0>)
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402532:	01db      	lsls	r3, r3, #7
  402534:	d53a      	bpl.n	4025ac <SystemCoreClockUpdate+0xac>
            SystemCoreClock *= 3U;
  402536:	4b27      	ldr	r3, [pc, #156]	; (4025d4 <SystemCoreClockUpdate+0xd4>)
  402538:	6003      	str	r3, [r0, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  40253a:	4924      	ldr	r1, [pc, #144]	; (4025cc <SystemCoreClockUpdate+0xcc>)
  40253c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  40253e:	f002 0203 	and.w	r2, r2, #3
  402542:	2a02      	cmp	r2, #2
  402544:	d1e7      	bne.n	402516 <SystemCoreClockUpdate+0x16>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402546:	6a8a      	ldr	r2, [r1, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402548:	6a89      	ldr	r1, [r1, #40]	; 0x28
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40254a:	f3c2 420a 	ubfx	r2, r2, #16, #11
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40254e:	b2c9      	uxtb	r1, r1
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402550:	fb02 3303 	mla	r3, r2, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402554:	fbb3 f3f1 	udiv	r3, r3, r1
  402558:	e7dd      	b.n	402516 <SystemCoreClockUpdate+0x16>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40255a:	4b1f      	ldr	r3, [pc, #124]	; (4025d8 <SystemCoreClockUpdate+0xd8>)
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40255c:	491b      	ldr	r1, [pc, #108]	; (4025cc <SystemCoreClockUpdate+0xcc>)
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40255e:	695b      	ldr	r3, [r3, #20]
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402560:	6b0a      	ldr	r2, [r1, #48]	; 0x30
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  402562:	f013 0f80 	tst.w	r3, #128	; 0x80
  402566:	481a      	ldr	r0, [pc, #104]	; (4025d0 <SystemCoreClockUpdate+0xd0>)
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402568:	f002 0270 	and.w	r2, r2, #112	; 0x70
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40256c:	bf14      	ite	ne
  40256e:	f44f 4300 	movne.w	r3, #32768	; 0x8000
  402572:	f44f 43fa 	moveq.w	r3, #32000	; 0x7d00
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402576:	2a70      	cmp	r2, #112	; 0x70
  402578:	d1d3      	bne.n	402522 <SystemCoreClockUpdate+0x22>
    SystemCoreClock /= 3U;
  40257a:	4a18      	ldr	r2, [pc, #96]	; (4025dc <SystemCoreClockUpdate+0xdc>)
  40257c:	fba2 2303 	umull	r2, r3, r2, r3
  402580:	085b      	lsrs	r3, r3, #1
  402582:	6003      	str	r3, [r0, #0]
  402584:	4770      	bx	lr
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402586:	6a13      	ldr	r3, [r2, #32]
  402588:	01d9      	lsls	r1, r3, #7
  40258a:	d40c      	bmi.n	4025a6 <SystemCoreClockUpdate+0xa6>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40258c:	4810      	ldr	r0, [pc, #64]	; (4025d0 <SystemCoreClockUpdate+0xd0>)
  40258e:	4914      	ldr	r1, [pc, #80]	; (4025e0 <SystemCoreClockUpdate+0xe0>)
  402590:	6001      	str	r1, [r0, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402592:	6a12      	ldr	r2, [r2, #32]
  402594:	f002 0270 	and.w	r2, r2, #112	; 0x70
  402598:	2a10      	cmp	r2, #16
  40259a:	d011      	beq.n	4025c0 <SystemCoreClockUpdate+0xc0>
  40259c:	4b0d      	ldr	r3, [pc, #52]	; (4025d4 <SystemCoreClockUpdate+0xd4>)
  40259e:	2a20      	cmp	r2, #32
  4025a0:	bf18      	it	ne
  4025a2:	460b      	movne	r3, r1
  4025a4:	e7b7      	b.n	402516 <SystemCoreClockUpdate+0x16>
  4025a6:	4b0b      	ldr	r3, [pc, #44]	; (4025d4 <SystemCoreClockUpdate+0xd4>)
  4025a8:	4809      	ldr	r0, [pc, #36]	; (4025d0 <SystemCoreClockUpdate+0xd0>)
  4025aa:	e7b4      	b.n	402516 <SystemCoreClockUpdate+0x16>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4025ac:	4b0c      	ldr	r3, [pc, #48]	; (4025e0 <SystemCoreClockUpdate+0xe0>)
  4025ae:	6003      	str	r3, [r0, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4025b0:	6a12      	ldr	r2, [r2, #32]
  4025b2:	f002 0270 	and.w	r2, r2, #112	; 0x70
  4025b6:	2a10      	cmp	r2, #16
  4025b8:	d004      	beq.n	4025c4 <SystemCoreClockUpdate+0xc4>
  4025ba:	2a20      	cmp	r2, #32
  4025bc:	d0bb      	beq.n	402536 <SystemCoreClockUpdate+0x36>
  4025be:	e7bc      	b.n	40253a <SystemCoreClockUpdate+0x3a>
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4025c0:	4b08      	ldr	r3, [pc, #32]	; (4025e4 <SystemCoreClockUpdate+0xe4>)
  4025c2:	e7a8      	b.n	402516 <SystemCoreClockUpdate+0x16>
            SystemCoreClock *= 2U;
  4025c4:	4b07      	ldr	r3, [pc, #28]	; (4025e4 <SystemCoreClockUpdate+0xe4>)
  4025c6:	6003      	str	r3, [r0, #0]
          break;
  4025c8:	e7b7      	b.n	40253a <SystemCoreClockUpdate+0x3a>
  4025ca:	bf00      	nop
  4025cc:	400e0600 	.word	0x400e0600
  4025d0:	2040002c 	.word	0x2040002c
  4025d4:	00b71b00 	.word	0x00b71b00
  4025d8:	400e1810 	.word	0x400e1810
  4025dc:	aaaaaaab 	.word	0xaaaaaaab
  4025e0:	003d0900 	.word	0x003d0900
  4025e4:	007a1200 	.word	0x007a1200

004025e8 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4025e8:	4b16      	ldr	r3, [pc, #88]	; (402644 <system_init_flash+0x5c>)
  4025ea:	4298      	cmp	r0, r3
  4025ec:	d917      	bls.n	40261e <system_init_flash+0x36>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4025ee:	4b16      	ldr	r3, [pc, #88]	; (402648 <system_init_flash+0x60>)
  4025f0:	4298      	cmp	r0, r3
  4025f2:	d910      	bls.n	402616 <system_init_flash+0x2e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4025f4:	4b15      	ldr	r3, [pc, #84]	; (40264c <system_init_flash+0x64>)
  4025f6:	4298      	cmp	r0, r3
  4025f8:	d91a      	bls.n	402630 <system_init_flash+0x48>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4025fa:	4b15      	ldr	r3, [pc, #84]	; (402650 <system_init_flash+0x68>)
  4025fc:	4298      	cmp	r0, r3
  4025fe:	d913      	bls.n	402628 <system_init_flash+0x40>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  402600:	4b14      	ldr	r3, [pc, #80]	; (402654 <system_init_flash+0x6c>)
  402602:	4298      	cmp	r0, r3
  402604:	d918      	bls.n	402638 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  402606:	4b14      	ldr	r3, [pc, #80]	; (402658 <system_init_flash+0x70>)
  402608:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40260a:	4b14      	ldr	r3, [pc, #80]	; (40265c <system_init_flash+0x74>)
  40260c:	bf94      	ite	ls
  40260e:	4a14      	ldrls	r2, [pc, #80]	; (402660 <system_init_flash+0x78>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  402610:	4a14      	ldrhi	r2, [pc, #80]	; (402664 <system_init_flash+0x7c>)
  402612:	601a      	str	r2, [r3, #0]
  402614:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402616:	4b11      	ldr	r3, [pc, #68]	; (40265c <system_init_flash+0x74>)
  402618:	4a13      	ldr	r2, [pc, #76]	; (402668 <system_init_flash+0x80>)
  40261a:	601a      	str	r2, [r3, #0]
  40261c:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40261e:	4b0f      	ldr	r3, [pc, #60]	; (40265c <system_init_flash+0x74>)
  402620:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402624:	601a      	str	r2, [r3, #0]
  402626:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402628:	4b0c      	ldr	r3, [pc, #48]	; (40265c <system_init_flash+0x74>)
  40262a:	4a10      	ldr	r2, [pc, #64]	; (40266c <system_init_flash+0x84>)
  40262c:	601a      	str	r2, [r3, #0]
  40262e:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402630:	4b0a      	ldr	r3, [pc, #40]	; (40265c <system_init_flash+0x74>)
  402632:	4a0f      	ldr	r2, [pc, #60]	; (402670 <system_init_flash+0x88>)
  402634:	601a      	str	r2, [r3, #0]
  402636:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402638:	4b08      	ldr	r3, [pc, #32]	; (40265c <system_init_flash+0x74>)
  40263a:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40263e:	601a      	str	r2, [r3, #0]
  402640:	4770      	bx	lr
  402642:	bf00      	nop
  402644:	015ef3bf 	.word	0x015ef3bf
  402648:	02bde77f 	.word	0x02bde77f
  40264c:	041cdb3f 	.word	0x041cdb3f
  402650:	057bceff 	.word	0x057bceff
  402654:	06dac2bf 	.word	0x06dac2bf
  402658:	0839b67f 	.word	0x0839b67f
  40265c:	400e0c00 	.word	0x400e0c00
  402660:	04000500 	.word	0x04000500
  402664:	04000600 	.word	0x04000600
  402668:	04000100 	.word	0x04000100
  40266c:	04000300 	.word	0x04000300
  402670:	04000200 	.word	0x04000200

00402674 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  402674:	4a0d      	ldr	r2, [pc, #52]	; (4026ac <_sbrk+0x38>)
	int ramend = (int)&__ram_end__;
  402676:	490e      	ldr	r1, [pc, #56]	; (4026b0 <_sbrk+0x3c>)
	if (heap == NULL) {
  402678:	6813      	ldr	r3, [r2, #0]
  40267a:	b143      	cbz	r3, 40268e <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
  40267c:	4418      	add	r0, r3
  40267e:	4281      	cmp	r1, r0
  402680:	db02      	blt.n	402688 <_sbrk+0x14>
		return (caddr_t) -1;	
	}

	heap += incr;
  402682:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  402684:	4618      	mov	r0, r3
  402686:	4770      	bx	lr
		return (caddr_t) -1;	
  402688:	f04f 30ff 	mov.w	r0, #4294967295
  40268c:	4770      	bx	lr
{
  40268e:	b410      	push	{r4}
		heap = (unsigned char *)&_end;
  402690:	4c08      	ldr	r4, [pc, #32]	; (4026b4 <_sbrk+0x40>)
	if (((int)prev_heap + incr) > ramend) {
  402692:	4420      	add	r0, r4
		heap = (unsigned char *)&_end;
  402694:	6014      	str	r4, [r2, #0]
	if (((int)prev_heap + incr) > ramend) {
  402696:	4281      	cmp	r1, r0
  402698:	db04      	blt.n	4026a4 <_sbrk+0x30>
	heap += incr;
  40269a:	6010      	str	r0, [r2, #0]
	return (caddr_t) prev_heap;
  40269c:	4620      	mov	r0, r4
}
  40269e:	f85d 4b04 	ldr.w	r4, [sp], #4
  4026a2:	4770      	bx	lr
		return (caddr_t) -1;	
  4026a4:	f04f 30ff 	mov.w	r0, #4294967295
  4026a8:	e7f9      	b.n	40269e <_sbrk+0x2a>
  4026aa:	bf00      	nop
  4026ac:	2041c0d0 	.word	0x2041c0d0
  4026b0:	2045fffc 	.word	0x2045fffc
  4026b4:	2044f2e8 	.word	0x2044f2e8

004026b8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4026b8:	f04f 30ff 	mov.w	r0, #4294967295
  4026bc:	4770      	bx	lr
  4026be:	bf00      	nop

004026c0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4026c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000

	return 0;
}
  4026c4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
  4026c6:	604b      	str	r3, [r1, #4]
}
  4026c8:	4770      	bx	lr
  4026ca:	bf00      	nop

004026cc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4026cc:	2001      	movs	r0, #1
  4026ce:	4770      	bx	lr

004026d0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4026d0:	2000      	movs	r0, #0
  4026d2:	4770      	bx	lr

004026d4 <USART1_Handler>:
volatile bool waiting_for_chorus_speed = false;
volatile float chorus_speed = 0.5f;

volatile bool autotune = true; 
void USART_SERIAL_ISR_HANDLER(void)
{
  4026d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t dw_status = usart_get_status(USART_SERIAL);
  4026d8:	4b98      	ldr	r3, [pc, #608]	; (40293c <USART1_Handler+0x268>)
{
  4026da:	b082      	sub	sp, #8
	uint32_t dw_status = usart_get_status(USART_SERIAL);
  4026dc:	4898      	ldr	r0, [pc, #608]	; (402940 <USART1_Handler+0x26c>)
  4026de:	4798      	blx	r3
	if (dw_status & US_CSR_RXRDY) {
  4026e0:	07c3      	lsls	r3, r0, #31
  4026e2:	d402      	bmi.n	4026ea <USART1_Handler+0x16>
			harmony_list_read = harmony_list_fill;		
			harmony_list_fill = temp; 
			harmony_idx = 0; 
		}
	}
}
  4026e4:	b002      	add	sp, #8
  4026e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		usart_read(USART_SERIAL, &received_byte);
  4026ea:	4b96      	ldr	r3, [pc, #600]	; (402944 <USART1_Handler+0x270>)
  4026ec:	a901      	add	r1, sp, #4
  4026ee:	4894      	ldr	r0, [pc, #592]	; (402940 <USART1_Handler+0x26c>)
  4026f0:	4798      	blx	r3
		if (waiting_for_harm_volume)
  4026f2:	4a95      	ldr	r2, [pc, #596]	; (402948 <USART1_Handler+0x274>)
  4026f4:	7813      	ldrb	r3, [r2, #0]
  4026f6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  4026fa:	b98b      	cbnz	r3, 402720 <USART1_Handler+0x4c>
		else if (waiting_for_master_volume)
  4026fc:	4993      	ldr	r1, [pc, #588]	; (40294c <USART1_Handler+0x278>)
  4026fe:	780b      	ldrb	r3, [r1, #0]
  402700:	f003 04ff 	and.w	r4, r3, #255	; 0xff
  402704:	b1e3      	cbz	r3, 402740 <USART1_Handler+0x6c>
			master_volume = (float)received_byte / 127.0f;
  402706:	eddd 7a01 	vldr	s15, [sp, #4]
  40270a:	ed9f 7a91 	vldr	s14, [pc, #580]	; 402950 <USART1_Handler+0x27c>
  40270e:	eef8 7a67 	vcvt.f32.u32	s15, s15
  402712:	4b90      	ldr	r3, [pc, #576]	; (402954 <USART1_Handler+0x280>)
  402714:	ee67 7a87 	vmul.f32	s15, s15, s14
  402718:	edc3 7a00 	vstr	s15, [r3]
			waiting_for_master_volume = false;
  40271c:	7008      	strb	r0, [r1, #0]
  40271e:	e7e1      	b.n	4026e4 <USART1_Handler+0x10>
			harm_volume = (float)received_byte / 127.0f; 
  402720:	eddd 7a01 	vldr	s15, [sp, #4]
			waiting_for_harm_volume = false; 
  402724:	2300      	movs	r3, #0
			harm_volume = (float)received_byte / 127.0f; 
  402726:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 402950 <USART1_Handler+0x27c>
  40272a:	eef8 7a67 	vcvt.f32.u32	s15, s15
  40272e:	498a      	ldr	r1, [pc, #552]	; (402958 <USART1_Handler+0x284>)
  402730:	ee67 7a87 	vmul.f32	s15, s15, s14
  402734:	edc1 7a00 	vstr	s15, [r1]
			waiting_for_harm_volume = false; 
  402738:	7013      	strb	r3, [r2, #0]
}
  40273a:	b002      	add	sp, #8
  40273c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		else if (waiting_for_dry_volume)
  402740:	4886      	ldr	r0, [pc, #536]	; (40295c <USART1_Handler+0x288>)
  402742:	7803      	ldrb	r3, [r0, #0]
  402744:	f003 05ff 	and.w	r5, r3, #255	; 0xff
  402748:	b94b      	cbnz	r3, 40275e <USART1_Handler+0x8a>
		else if (waiting_for_pitch_bend)
  40274a:	4c85      	ldr	r4, [pc, #532]	; (402960 <USART1_Handler+0x28c>)
  40274c:	7823      	ldrb	r3, [r4, #0]
  40274e:	f003 06ff 	and.w	r6, r3, #255	; 0xff
  402752:	b18b      	cbz	r3, 402778 <USART1_Handler+0xa4>
			pitch_bend = received_byte;
  402754:	9a01      	ldr	r2, [sp, #4]
  402756:	4b83      	ldr	r3, [pc, #524]	; (402964 <USART1_Handler+0x290>)
  402758:	601a      	str	r2, [r3, #0]
			waiting_for_pitch_bend = false;
  40275a:	7025      	strb	r5, [r4, #0]
  40275c:	e7c2      	b.n	4026e4 <USART1_Handler+0x10>
			dry_volume = (float)received_byte / 127.0f;
  40275e:	eddd 7a01 	vldr	s15, [sp, #4]
  402762:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 402950 <USART1_Handler+0x27c>
  402766:	eef8 7a67 	vcvt.f32.u32	s15, s15
  40276a:	4b7f      	ldr	r3, [pc, #508]	; (402968 <USART1_Handler+0x294>)
  40276c:	ee67 7a87 	vmul.f32	s15, s15, s14
  402770:	edc3 7a00 	vstr	s15, [r3]
			waiting_for_dry_volume = false;
  402774:	7004      	strb	r4, [r0, #0]
  402776:	e7b5      	b.n	4026e4 <USART1_Handler+0x10>
		else if (waiting_for_reverb_volume)
  402778:	4d7c      	ldr	r5, [pc, #496]	; (40296c <USART1_Handler+0x298>)
  40277a:	782b      	ldrb	r3, [r5, #0]
  40277c:	f003 07ff 	and.w	r7, r3, #255	; 0xff
  402780:	b163      	cbz	r3, 40279c <USART1_Handler+0xc8>
			reverb_volume = (float)received_byte / 127.0f;;
  402782:	eddd 7a01 	vldr	s15, [sp, #4]
  402786:	ed9f 7a72 	vldr	s14, [pc, #456]	; 402950 <USART1_Handler+0x27c>
  40278a:	eef8 7a67 	vcvt.f32.u32	s15, s15
  40278e:	4b78      	ldr	r3, [pc, #480]	; (402970 <USART1_Handler+0x29c>)
  402790:	ee67 7a87 	vmul.f32	s15, s15, s14
  402794:	edc3 7a00 	vstr	s15, [r3]
			waiting_for_reverb_volume = false;
  402798:	702e      	strb	r6, [r5, #0]
  40279a:	e7a3      	b.n	4026e4 <USART1_Handler+0x10>
		else if (waiting_for_delay_volume)
  40279c:	4e75      	ldr	r6, [pc, #468]	; (402974 <USART1_Handler+0x2a0>)
  40279e:	7833      	ldrb	r3, [r6, #0]
  4027a0:	f003 0eff 	and.w	lr, r3, #255	; 0xff
  4027a4:	b163      	cbz	r3, 4027c0 <USART1_Handler+0xec>
			delay_volume = 0.7f * (float)received_byte / 127.0f;
  4027a6:	eddd 7a01 	vldr	s15, [sp, #4]
  4027aa:	ed9f 7a73 	vldr	s14, [pc, #460]	; 402978 <USART1_Handler+0x2a4>
  4027ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
  4027b2:	4b72      	ldr	r3, [pc, #456]	; (40297c <USART1_Handler+0x2a8>)
  4027b4:	ee67 7a87 	vmul.f32	s15, s15, s14
  4027b8:	edc3 7a00 	vstr	s15, [r3]
			waiting_for_delay_volume = false;
  4027bc:	7037      	strb	r7, [r6, #0]
  4027be:	e791      	b.n	4026e4 <USART1_Handler+0x10>
		else if (waiting_for_delay_speed)
  4027c0:	4f6f      	ldr	r7, [pc, #444]	; (402980 <USART1_Handler+0x2ac>)
  4027c2:	783b      	ldrb	r3, [r7, #0]
  4027c4:	f003 0cff 	and.w	ip, r3, #255	; 0xff
  4027c8:	b18b      	cbz	r3, 4027ee <USART1_Handler+0x11a>
			delay_speed = 16200 - 14000 * (float)received_byte / 127.0f;
  4027ca:	eddd 7a01 	vldr	s15, [sp, #4]
  4027ce:	eddf 6a6d 	vldr	s13, [pc, #436]	; 402984 <USART1_Handler+0x2b0>
  4027d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  4027d6:	eddf 7a6c 	vldr	s15, [pc, #432]	; 402988 <USART1_Handler+0x2b4>
  4027da:	4b6c      	ldr	r3, [pc, #432]	; (40298c <USART1_Handler+0x2b8>)
  4027dc:	eee7 7a66 	vfms.f32	s15, s14, s13
  4027e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  4027e4:	edc3 7a00 	vstr	s15, [r3]
			waiting_for_delay_speed = false;
  4027e8:	f887 e000 	strb.w	lr, [r7]
  4027ec:	e77a      	b.n	4026e4 <USART1_Handler+0x10>
		else if (waiting_for_delay_feedback)
  4027ee:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 4029c0 <USART1_Handler+0x2ec>
  4027f2:	f89e 3000 	ldrb.w	r3, [lr]
  4027f6:	b16b      	cbz	r3, 402814 <USART1_Handler+0x140>
			delay_feedback = 0.8f * (float)received_byte / 127.0f;
  4027f8:	eddd 7a01 	vldr	s15, [sp, #4]
  4027fc:	ed9f 7a64 	vldr	s14, [pc, #400]	; 402990 <USART1_Handler+0x2bc>
  402800:	eef8 7a67 	vcvt.f32.u32	s15, s15
  402804:	4b63      	ldr	r3, [pc, #396]	; (402994 <USART1_Handler+0x2c0>)
  402806:	ee67 7a87 	vmul.f32	s15, s15, s14
  40280a:	edc3 7a00 	vstr	s15, [r3]
			waiting_for_delay_feedback = false;
  40280e:	f88e c000 	strb.w	ip, [lr]
  402812:	e767      	b.n	4026e4 <USART1_Handler+0x10>
		else if (waiting_for_chorus_volume)
  402814:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 4029c4 <USART1_Handler+0x2f0>
  402818:	f898 3000 	ldrb.w	r3, [r8]
  40281c:	b173      	cbz	r3, 40283c <USART1_Handler+0x168>
			chorus_volume = (float)received_byte / 127.0f;;
  40281e:	eddd 7a01 	vldr	s15, [sp, #4]
			waiting_for_chorus_volume = false;
  402822:	2300      	movs	r3, #0
			chorus_volume = (float)received_byte / 127.0f;;
  402824:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 402950 <USART1_Handler+0x27c>
  402828:	eef8 7a67 	vcvt.f32.u32	s15, s15
  40282c:	4a5a      	ldr	r2, [pc, #360]	; (402998 <USART1_Handler+0x2c4>)
  40282e:	ee67 7a87 	vmul.f32	s15, s15, s14
  402832:	edc2 7a00 	vstr	s15, [r2]
			waiting_for_chorus_volume = false;
  402836:	f888 3000 	strb.w	r3, [r8]
  40283a:	e753      	b.n	4026e4 <USART1_Handler+0x10>
		else if (waiting_for_chorus_speed)
  40283c:	f8df c188 	ldr.w	ip, [pc, #392]	; 4029c8 <USART1_Handler+0x2f4>
  402840:	f89c 3000 	ldrb.w	r3, [ip]
  402844:	b183      	cbz	r3, 402868 <USART1_Handler+0x194>
			chorus_speed = 0.4f + 5.0f*(float)received_byte / 127.0f;;
  402846:	eddd 7a01 	vldr	s15, [sp, #4]
			waiting_for_chorus_speed = false;
  40284a:	2300      	movs	r3, #0
			chorus_speed = 0.4f + 5.0f*(float)received_byte / 127.0f;;
  40284c:	eddf 6a53 	vldr	s13, [pc, #332]	; 40299c <USART1_Handler+0x2c8>
  402850:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  402854:	eddf 7a52 	vldr	s15, [pc, #328]	; 4029a0 <USART1_Handler+0x2cc>
  402858:	4a52      	ldr	r2, [pc, #328]	; (4029a4 <USART1_Handler+0x2d0>)
  40285a:	eee7 7a26 	vfma.f32	s15, s14, s13
  40285e:	edc2 7a00 	vstr	s15, [r2]
			waiting_for_chorus_speed = false;
  402862:	f88c 3000 	strb.w	r3, [ip]
  402866:	e73d      	b.n	4026e4 <USART1_Handler+0x10>
		else if (received_byte == HARMONY_VOLUME_FLAG) 
  402868:	9b01      	ldr	r3, [sp, #4]
  40286a:	2bff      	cmp	r3, #255	; 0xff
  40286c:	d02c      	beq.n	4028c8 <USART1_Handler+0x1f4>
		else if (received_byte == DRY_VOLUME_FLAG)
  40286e:	2bf7      	cmp	r3, #247	; 0xf7
  402870:	d030      	beq.n	4028d4 <USART1_Handler+0x200>
		else if (received_byte == MASTER_VOLUME_FLAG)
  402872:	2bfe      	cmp	r3, #254	; 0xfe
  402874:	d02b      	beq.n	4028ce <USART1_Handler+0x1fa>
		else if (received_byte == PITCH_BEND_FLAG)
  402876:	2bfd      	cmp	r3, #253	; 0xfd
  402878:	d04f      	beq.n	40291a <USART1_Handler+0x246>
		else if (received_byte == REVERB_VOLUME_FLAG)
  40287a:	2bfb      	cmp	r3, #251	; 0xfb
  40287c:	d04a      	beq.n	402914 <USART1_Handler+0x240>
		else if (received_byte == DELAY_VOLUME_FLAG)
  40287e:	2bf6      	cmp	r3, #246	; 0xf6
  402880:	d059      	beq.n	402936 <USART1_Handler+0x262>
		else if (received_byte == DELAY_SPEED_FLAG)
  402882:	2bf8      	cmp	r3, #248	; 0xf8
  402884:	d054      	beq.n	402930 <USART1_Handler+0x25c>
		else if (received_byte == DELAY_FEEDBACK_FLAG)
  402886:	2bf9      	cmp	r3, #249	; 0xf9
  402888:	d04e      	beq.n	402928 <USART1_Handler+0x254>
		else if (received_byte == CHORUS_VOLUME_FLAG)
  40288a:	2bfa      	cmp	r3, #250	; 0xfa
  40288c:	d048      	beq.n	402920 <USART1_Handler+0x24c>
		else if (received_byte == CHORUS_SPEED_FLAG)
  40288e:	2bf5      	cmp	r3, #245	; 0xf5
  402890:	d03c      	beq.n	40290c <USART1_Handler+0x238>
		else if (received_byte == AUTOTUNE_FLAG)
  402892:	2bfc      	cmp	r3, #252	; 0xfc
  402894:	d034      	beq.n	402900 <USART1_Handler+0x22c>
		else if (received_byte != 0 && harmony_idx < MAX_NUM_SHIFTS)
  402896:	4a44      	ldr	r2, [pc, #272]	; (4029a8 <USART1_Handler+0x2d4>)
  402898:	b1fb      	cbz	r3, 4028da <USART1_Handler+0x206>
  40289a:	6811      	ldr	r1, [r2, #0]
  40289c:	290a      	cmp	r1, #10
  40289e:	d81c      	bhi.n	4028da <USART1_Handler+0x206>
			harmony_list_fill[harmony_idx].freq = midi_note_frequencies[received_byte]; 
  4028a0:	4c42      	ldr	r4, [pc, #264]	; (4029ac <USART1_Handler+0x2d8>)
  4028a2:	4843      	ldr	r0, [pc, #268]	; (4029b0 <USART1_Handler+0x2dc>)
  4028a4:	6815      	ldr	r5, [r2, #0]
  4028a6:	6821      	ldr	r1, [r4, #0]
  4028a8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  4028ac:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
  4028b0:	681b      	ldr	r3, [r3, #0]
  4028b2:	600b      	str	r3, [r1, #0]
			harmony_list_fill[harmony_idx].idx = received_byte; 
  4028b4:	6810      	ldr	r0, [r2, #0]
  4028b6:	6823      	ldr	r3, [r4, #0]
  4028b8:	9901      	ldr	r1, [sp, #4]
  4028ba:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  4028be:	6059      	str	r1, [r3, #4]
			harmony_idx++;
  4028c0:	6813      	ldr	r3, [r2, #0]
  4028c2:	3301      	adds	r3, #1
  4028c4:	6013      	str	r3, [r2, #0]
  4028c6:	e70d      	b.n	4026e4 <USART1_Handler+0x10>
			waiting_for_harm_volume = true; 
  4028c8:	2301      	movs	r3, #1
  4028ca:	7013      	strb	r3, [r2, #0]
  4028cc:	e70a      	b.n	4026e4 <USART1_Handler+0x10>
			waiting_for_master_volume = true;
  4028ce:	2301      	movs	r3, #1
  4028d0:	700b      	strb	r3, [r1, #0]
  4028d2:	e707      	b.n	4026e4 <USART1_Handler+0x10>
			waiting_for_dry_volume = true;
  4028d4:	2301      	movs	r3, #1
  4028d6:	7003      	strb	r3, [r0, #0]
  4028d8:	e704      	b.n	4026e4 <USART1_Handler+0x10>
			harmony_list_fill[harmony_idx].freq = END_OF_SHIFTS; 
  4028da:	4934      	ldr	r1, [pc, #208]	; (4029ac <USART1_Handler+0x2d8>)
			harmony_list_fill[harmony_idx].idx = 0; // dont care 
  4028dc:	2000      	movs	r0, #0
			harmony_list_fill[harmony_idx].freq = END_OF_SHIFTS; 
  4028de:	6816      	ldr	r6, [r2, #0]
  4028e0:	680b      	ldr	r3, [r1, #0]
  4028e2:	4d34      	ldr	r5, [pc, #208]	; (4029b4 <USART1_Handler+0x2e0>)
  4028e4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
			harmony_t *temp = (harmony_t *)harmony_list_read; 
  4028e8:	4c33      	ldr	r4, [pc, #204]	; (4029b8 <USART1_Handler+0x2e4>)
			harmony_list_fill[harmony_idx].freq = END_OF_SHIFTS; 
  4028ea:	601d      	str	r5, [r3, #0]
			harmony_list_fill[harmony_idx].idx = 0; // dont care 
  4028ec:	680d      	ldr	r5, [r1, #0]
  4028ee:	6813      	ldr	r3, [r2, #0]
			harmony_t *temp = (harmony_t *)harmony_list_read; 
  4028f0:	6826      	ldr	r6, [r4, #0]
			harmony_list_fill[harmony_idx].idx = 0; // dont care 
  4028f2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
			harmony_list_read = harmony_list_fill;		
  4028f6:	6025      	str	r5, [r4, #0]
			harmony_list_fill = temp; 
  4028f8:	600e      	str	r6, [r1, #0]
			harmony_list_fill[harmony_idx].idx = 0; // dont care 
  4028fa:	6058      	str	r0, [r3, #4]
			harmony_idx = 0; 
  4028fc:	6010      	str	r0, [r2, #0]
}
  4028fe:	e6f1      	b.n	4026e4 <USART1_Handler+0x10>
			autotune = !autotune; 
  402900:	4a2e      	ldr	r2, [pc, #184]	; (4029bc <USART1_Handler+0x2e8>)
  402902:	7813      	ldrb	r3, [r2, #0]
  402904:	f083 0301 	eor.w	r3, r3, #1
  402908:	7013      	strb	r3, [r2, #0]
  40290a:	e6eb      	b.n	4026e4 <USART1_Handler+0x10>
			waiting_for_chorus_speed = true;
  40290c:	2301      	movs	r3, #1
  40290e:	f88c 3000 	strb.w	r3, [ip]
  402912:	e6e7      	b.n	4026e4 <USART1_Handler+0x10>
			waiting_for_reverb_volume = true;
  402914:	2301      	movs	r3, #1
  402916:	702b      	strb	r3, [r5, #0]
  402918:	e6e4      	b.n	4026e4 <USART1_Handler+0x10>
			waiting_for_pitch_bend = true;
  40291a:	2301      	movs	r3, #1
  40291c:	7023      	strb	r3, [r4, #0]
  40291e:	e6e1      	b.n	4026e4 <USART1_Handler+0x10>
			waiting_for_chorus_volume = true;
  402920:	2301      	movs	r3, #1
  402922:	f888 3000 	strb.w	r3, [r8]
  402926:	e6dd      	b.n	4026e4 <USART1_Handler+0x10>
			waiting_for_delay_feedback = true;
  402928:	2301      	movs	r3, #1
  40292a:	f88e 3000 	strb.w	r3, [lr]
  40292e:	e6d9      	b.n	4026e4 <USART1_Handler+0x10>
			waiting_for_delay_speed = true;
  402930:	2301      	movs	r3, #1
  402932:	703b      	strb	r3, [r7, #0]
  402934:	e6d6      	b.n	4026e4 <USART1_Handler+0x10>
			waiting_for_delay_volume = true;
  402936:	2301      	movs	r3, #1
  402938:	7033      	strb	r3, [r6, #0]
  40293a:	e6d3      	b.n	4026e4 <USART1_Handler+0x10>
  40293c:	004017dd 	.word	0x004017dd
  402940:	40028000 	.word	0x40028000
  402944:	004017e1 	.word	0x004017e1
  402948:	2044540a 	.word	0x2044540a
  40294c:	2044540b 	.word	0x2044540b
  402950:	3c010204 	.word	0x3c010204
  402954:	2040004c 	.word	0x2040004c
  402958:	20400040 	.word	0x20400040
  40295c:	20445409 	.word	0x20445409
  402960:	2044540c 	.word	0x2044540c
  402964:	20400050 	.word	0x20400050
  402968:	2040003c 	.word	0x2040003c
  40296c:	2044540d 	.word	0x2044540d
  402970:	20445400 	.word	0x20445400
  402974:	20445408 	.word	0x20445408
  402978:	3bb49c6c 	.word	0x3bb49c6c
  40297c:	20430004 	.word	0x20430004
  402980:	20445407 	.word	0x20445407
  402984:	42dc78f2 	.word	0x42dc78f2
  402988:	467d2000 	.word	0x467d2000
  40298c:	20400038 	.word	0x20400038
  402990:	3bce69a0 	.word	0x3bce69a0
  402994:	20430000 	.word	0x20430000
  402998:	2041c0d4 	.word	0x2041c0d4
  40299c:	3d214285 	.word	0x3d214285
  4029a0:	3ecccccd 	.word	0x3ecccccd
  4029a4:	20400034 	.word	0x20400034
  4029a8:	20444000 	.word	0x20444000
  4029ac:	20400044 	.word	0x20400044
  4029b0:	00406b78 	.word	0x00406b78
  4029b4:	bf800000 	.word	0xbf800000
  4029b8:	20400048 	.word	0x20400048
  4029bc:	20400030 	.word	0x20400030
  4029c0:	20445406 	.word	0x20445406
  4029c4:	20445405 	.word	0x20445405
  4029c8:	20445404 	.word	0x20445404

004029cc <main>:
// uncomment to communicate to pc console over uart for debug 
//#define USING_CONSOLE
volatile uint32_t delay; 

int main(void)
{
  4029cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sysclk_init();
  4029d0:	4bb7      	ldr	r3, [pc, #732]	; (402cb0 <main+0x2e4>)
{
  4029d2:	ed2d 8b06 	vpush	{d8-d10}
  4029d6:	b097      	sub	sp, #92	; 0x5c
	sysclk_init();
  4029d8:	4798      	blx	r3
	board_init();
  4029da:	4bb6      	ldr	r3, [pc, #728]	; (402cb4 <main+0x2e8>)
  4029dc:	4798      	blx	r3
  __ASM volatile ("dsb");
  4029de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4029e2:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_DisableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->CCR &= ~SCB_CCR_IC_Msk;            // disable I-Cache
  4029e6:	4bb4      	ldr	r3, [pc, #720]	; (402cb8 <main+0x2ec>)
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4029e8:	2400      	movs	r4, #0
    SCB->CCR &= ~SCB_CCR_IC_Msk;            // disable I-Cache
  4029ea:	695a      	ldr	r2, [r3, #20]
  4029ec:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  4029f0:	615a      	str	r2, [r3, #20]
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4029f2:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
  __ASM volatile ("dsb");
  4029f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4029fa:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb");
  4029fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402a02:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  402a06:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  402a0a:	695a      	ldr	r2, [r3, #20]
  402a0c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  402a10:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  402a12:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402a16:	f3bf 8f6f 	isb	sy
 	SCB_DisableICache(); 
// 	lcd_init(); 
 	SCB_EnableICache();
	audio_init();
  402a1a:	4ba8      	ldr	r3, [pc, #672]	; (402cbc <main+0x2f0>)
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  402a1c:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
  402a20:	4798      	blx	r3
#ifdef USING_CONSOLE
	configure_console();
#endif 
	PSOLA_init(); 
  402a22:	4ba7      	ldr	r3, [pc, #668]	; (402cc0 <main+0x2f4>)
  402a24:	4798      	blx	r3
	usart_settings.char_length = opt->charlength;
  402a26:	21c0      	movs	r1, #192	; 0xc0
	usart_settings.parity_type = opt->paritytype;
  402a28:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402a2c:	4ba5      	ldr	r3, [pc, #660]	; (402cc4 <main+0x2f8>)
  402a2e:	200e      	movs	r0, #14
	usart_settings.baudrate = opt->baudrate;
  402a30:	950a      	str	r5, [sp, #40]	; 0x28
	usart_settings.char_length = opt->charlength;
  402a32:	910b      	str	r1, [sp, #44]	; 0x2c
  402a34:	f06f 0501 	mvn.w	r5, #1
	usart_settings.parity_type = opt->paritytype;
  402a38:	920c      	str	r2, [sp, #48]	; 0x30
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  402a3a:	f44f 4b80 	mov.w	fp, #16384	; 0x4000
	usart_settings.stop_bits= opt->stopbits;
  402a3e:	940d      	str	r4, [sp, #52]	; 0x34
  402a40:	462f      	mov	r7, r5
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  402a42:	940e      	str	r4, [sp, #56]	; 0x38
	}
	
	float oneOverInputPitch = 1.0f;
	float pitch_shift, power;
	float harmony_shifts[MAX_NUM_SHIFTS+1];
	harmony_shifts[0] = NO_SHIFT;
  402a44:	f04f 587e 	mov.w	r8, #1065353216	; 0x3f800000
	uint32_t num_of_shifts = 0; 
	uint32_t circ_buf_idx = 0; 
	float closest_note = 0; 
	float desired_pitch; 
	uint32_t in_pitch_idx = 0; 
	uint32_t sin_cnt = 0; 
  402a48:	9402      	str	r4, [sp, #8]
  402a4a:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  402a4c:	4a9e      	ldr	r2, [pc, #632]	; (402cc8 <main+0x2fc>)
  402a4e:	a90a      	add	r1, sp, #40	; 0x28
  402a50:	4b9e      	ldr	r3, [pc, #632]	; (402ccc <main+0x300>)
  402a52:	46a1      	mov	r9, r4
  402a54:	489e      	ldr	r0, [pc, #632]	; (402cd0 <main+0x304>)
  402a56:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  402a58:	4e9e      	ldr	r6, [pc, #632]	; (402cd4 <main+0x308>)
  402a5a:	489d      	ldr	r0, [pc, #628]	; (402cd0 <main+0x304>)
  402a5c:	47b0      	blx	r6
		usart_enable_rx(p_usart);
  402a5e:	4d9e      	ldr	r5, [pc, #632]	; (402cd8 <main+0x30c>)
  402a60:	489b      	ldr	r0, [pc, #620]	; (402cd0 <main+0x304>)
  402a62:	47a8      	blx	r5
	usart_enable_tx(USART_SERIAL);
  402a64:	489a      	ldr	r0, [pc, #616]	; (402cd0 <main+0x304>)
  402a66:	47b0      	blx	r6
	usart_enable_rx(USART_SERIAL);
  402a68:	4899      	ldr	r0, [pc, #612]	; (402cd0 <main+0x304>)
  402a6a:	47a8      	blx	r5
	usart_enable_interrupt(USART_SERIAL, US_IER_RXRDY); 
  402a6c:	2101      	movs	r1, #1
  402a6e:	4898      	ldr	r0, [pc, #608]	; (402cd0 <main+0x304>)
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402a70:	2500      	movs	r5, #0
	usart_enable_interrupt(USART_SERIAL, US_IER_RXRDY); 
  402a72:	4b9a      	ldr	r3, [pc, #616]	; (402cdc <main+0x310>)
  402a74:	4798      	blx	r3
  402a76:	4b9a      	ldr	r3, [pc, #616]	; (402ce0 <main+0x314>)
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402a78:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 402d3c <main+0x370>
  402a7c:	f04f 0e40 	mov.w	lr, #64	; 0x40
  402a80:	1aff      	subs	r7, r7, r3
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402a82:	4e98      	ldr	r6, [pc, #608]	; (402ce4 <main+0x318>)
  402a84:	4b98      	ldr	r3, [pc, #608]	; (402ce8 <main+0x31c>)
	uint32_t chorus_delay; 
	uint32_t wet_idx = 0; 
	arm_fill_f32(0.0f, wet_circ_buffer, WIN_SIZE); 
  402a86:	4628      	mov	r0, r5
	harmony_shifts[1] = END_OF_SHIFTS; 
  402a88:	f8df c2b4 	ldr.w	ip, [pc, #692]	; 402d40 <main+0x374>
	arm_fill_f32(0.0f, wet_circ_buffer, WIN_SIZE); 
  402a8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402a90:	9707      	str	r7, [sp, #28]
  402a92:	f88a e30e 	strb.w	lr, [sl, #782]	; 0x30e
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  402a96:	f8ca b180 	str.w	fp, [sl, #384]	; 0x180
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402a9a:	f8ca b000 	str.w	fp, [sl]
  402a9e:	f8df a2a4 	ldr.w	sl, [pc, #676]	; 402d44 <main+0x378>
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402aa2:	6035      	str	r5, [r6, #0]
	arm_fill_f32(0.0f, wet_circ_buffer, WIN_SIZE); 
  402aa4:	4991      	ldr	r1, [pc, #580]	; (402cec <main+0x320>)
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402aa6:	601d      	str	r5, [r3, #0]
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  402aa8:	6074      	str	r4, [r6, #4]
  402aaa:	605c      	str	r4, [r3, #4]
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402aac:	60b5      	str	r5, [r6, #8]
  402aae:	609d      	str	r5, [r3, #8]
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  402ab0:	60f4      	str	r4, [r6, #12]
  402ab2:	60dc      	str	r4, [r3, #12]
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402ab4:	6135      	str	r5, [r6, #16]
  402ab6:	611d      	str	r5, [r3, #16]
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  402ab8:	6174      	str	r4, [r6, #20]
  402aba:	615c      	str	r4, [r3, #20]
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402abc:	61b5      	str	r5, [r6, #24]
  402abe:	619d      	str	r5, [r3, #24]
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  402ac0:	61f4      	str	r4, [r6, #28]
  402ac2:	61dc      	str	r4, [r3, #28]
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402ac4:	6235      	str	r5, [r6, #32]
  402ac6:	621d      	str	r5, [r3, #32]
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  402ac8:	6274      	str	r4, [r6, #36]	; 0x24
  402aca:	625c      	str	r4, [r3, #36]	; 0x24
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402acc:	62b5      	str	r5, [r6, #40]	; 0x28
  402ace:	629d      	str	r5, [r3, #40]	; 0x28
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  402ad0:	62f4      	str	r4, [r6, #44]	; 0x2c
  402ad2:	62dc      	str	r4, [r3, #44]	; 0x2c
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402ad4:	6335      	str	r5, [r6, #48]	; 0x30
  402ad6:	631d      	str	r5, [r3, #48]	; 0x30
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  402ad8:	6374      	str	r4, [r6, #52]	; 0x34
  402ada:	635c      	str	r4, [r3, #52]	; 0x34
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402adc:	63b5      	str	r5, [r6, #56]	; 0x38
  402ade:	639d      	str	r5, [r3, #56]	; 0x38
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  402ae0:	63f4      	str	r4, [r6, #60]	; 0x3c
  402ae2:	63dc      	str	r4, [r3, #60]	; 0x3c
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402ae4:	6435      	str	r5, [r6, #64]	; 0x40
  402ae6:	641d      	str	r5, [r3, #64]	; 0x40
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  402ae8:	6474      	str	r4, [r6, #68]	; 0x44
  402aea:	645c      	str	r4, [r3, #68]	; 0x44
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402aec:	64b5      	str	r5, [r6, #72]	; 0x48
  402aee:	649d      	str	r5, [r3, #72]	; 0x48
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  402af0:	64f4      	str	r4, [r6, #76]	; 0x4c
  402af2:	64dc      	str	r4, [r3, #76]	; 0x4c
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  402af4:	6535      	str	r5, [r6, #80]	; 0x50
  402af6:	651d      	str	r5, [r3, #80]	; 0x50
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  402af8:	6574      	str	r4, [r6, #84]	; 0x54
  402afa:	655c      	str	r4, [r3, #84]	; 0x54
	arm_fill_f32(0.0f, wet_circ_buffer, WIN_SIZE); 
  402afc:	4b7c      	ldr	r3, [pc, #496]	; (402cf0 <main+0x324>)
	harmony_shifts[1] = END_OF_SHIFTS; 
  402afe:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
	harmony_shifts[MAX_NUM_SHIFTS] = END_OF_SHIFTS; // should never change 
  402b02:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
	harmony_shifts[0] = NO_SHIFT;
  402b06:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
	arm_fill_f32(0.0f, wet_circ_buffer, WIN_SIZE); 
  402b0a:	4798      	blx	r3
	arm_fill_f32(0.0f, dry_circ_buffer, CIRC_BUF_SIZE);
  402b0c:	465a      	mov	r2, fp
  402b0e:	4628      	mov	r0, r5
  402b10:	4651      	mov	r1, sl
  402b12:	4b77      	ldr	r3, [pc, #476]	; (402cf0 <main+0x324>)
  402b14:	4798      	blx	r3
	arm_fill_f32(0.0f, delay_circ_buffer, CIRC_BUF_SIZE);
  402b16:	465a      	mov	r2, fp
  402b18:	4628      	mov	r0, r5
  402b1a:	4976      	ldr	r1, [pc, #472]	; (402cf4 <main+0x328>)
  402b1c:	4b74      	ldr	r3, [pc, #464]	; (402cf0 <main+0x324>)
  402b1e:	eddf aa76 	vldr	s21, [pc, #472]	; 402cf8 <main+0x32c>
			// wet audio 
			uint32_t curr_dry_idx = circ_buf_idx - (uint32_t)WIN_SIZE;
			uint32_t curr_wet_idx = wet_idx; 
			// chorus params -- could make speed a param 
			float n_freq = chorus_speed / PSOLA_SAMPLE_RATE; 
			uint32_t num_samples_in_period = 1 / n_freq; 
  402b22:	eddf 8a76 	vldr	s17, [pc, #472]	; 402cfc <main+0x330>
  402b26:	f8df b220 	ldr.w	fp, [pc, #544]	; 402d48 <main+0x37c>
	arm_fill_f32(0.0f, delay_circ_buffer, CIRC_BUF_SIZE);
  402b2a:	4798      	blx	r3
		if (dataReceived)
  402b2c:	4b74      	ldr	r3, [pc, #464]	; (402d00 <main+0x334>)
  402b2e:	781b      	ldrb	r3, [r3, #0]
  402b30:	2b00      	cmp	r3, #0
  402b32:	d0fb      	beq.n	402b2c <main+0x160>
			inputPitch = computeWaveletPitch((float  *)processBuffer);
  402b34:	4a73      	ldr	r2, [pc, #460]	; (402d04 <main+0x338>)
			dataReceived = false; 
  402b36:	2300      	movs	r3, #0
			oneOverInputPitch = 1.0f / inputPitch;
  402b38:	ed9f 9a73 	vldr	s18, [pc, #460]	; 402d08 <main+0x33c>
			inputPitch = computeWaveletPitch((float  *)processBuffer);
  402b3c:	6810      	ldr	r0, [r2, #0]
			dataReceived = false; 
  402b3e:	4a70      	ldr	r2, [pc, #448]	; (402d00 <main+0x334>)
  402b40:	7013      	strb	r3, [r2, #0]
			inputPitch = computeWaveletPitch((float  *)processBuffer);
  402b42:	4b72      	ldr	r3, [pc, #456]	; (402d0c <main+0x340>)
  402b44:	4798      	blx	r3
			oneOverInputPitch = 1.0f / inputPitch;
  402b46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  402b4a:	ee07 0a90 	vmov	s15, r0
	uint32_t lo = 12; // lowest at C0
  402b4e:	220c      	movs	r2, #12
	uint32_t hi = 127;
  402b50:	207f      	movs	r0, #127	; 0x7f
  402b52:	fe87 8aaa 	vmaxnm.f32	s16, s15, s21
			oneOverInputPitch = 1.0f / inputPitch;
  402b56:	eec7 9a08 	vdiv.f32	s19, s14, s16
  402b5a:	eddf 7a6d 	vldr	s15, [pc, #436]	; 402d10 <main+0x344>
		mid = (hi + lo) >> 1;
  402b5e:	1813      	adds	r3, r2, r0
  402b60:	085b      	lsrs	r3, r3, #1
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402b62:	ee77 7ac8 	vsub.f32	s15, s15, s16
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402b66:	ee39 7a48 	vsub.f32	s14, s18, s16
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402b6a:	1c59      	adds	r1, r3, #1
  402b6c:	eef0 7ae7 	vabs.f32	s15, s15
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402b70:	eeb0 7ac7 	vabs.f32	s14, s14
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402b74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402b78:	eebc 7ac7 	vcvt.u32.f32	s14, s14
		if (d2 <= d1)
  402b7c:	ee17 5a90 	vmov	r5, s15
  402b80:	ee17 4a10 	vmov	r4, s14
  402b84:	42ac      	cmp	r4, r5
  402b86:	d21f      	bcs.n	402bc8 <main+0x1fc>
  402b88:	e14e      	b.n	402e28 <main+0x45c>
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402b8a:	1c5c      	adds	r4, r3, #1
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402b8c:	4a61      	ldr	r2, [pc, #388]	; (402d14 <main+0x348>)
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402b8e:	4d61      	ldr	r5, [pc, #388]	; (402d14 <main+0x348>)
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402b90:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402b94:	eb05 0584 	add.w	r5, r5, r4, lsl #2
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402b98:	ed92 9a00 	vldr	s18, [r2]
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402b9c:	edd5 7a00 	vldr	s15, [r5]
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402ba0:	ee39 7a48 	vsub.f32	s14, s18, s16
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402ba4:	ee77 7ac8 	vsub.f32	s15, s15, s16
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402ba8:	eeb0 7ac7 	vabs.f32	s14, s14
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402bac:	eef0 7ae7 	vabs.f32	s15, s15
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402bb0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402bb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		if (d2 <= d1)
  402bb8:	ee17 2a10 	vmov	r2, s14
  402bbc:	ee17 5a90 	vmov	r5, s15
  402bc0:	42aa      	cmp	r2, r5
  402bc2:	f0c0 8132 	bcc.w	402e2a <main+0x45e>
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402bc6:	4621      	mov	r1, r4
		mid = (hi + lo) >> 1;
  402bc8:	180b      	adds	r3, r1, r0
	while (lo < hi)
  402bca:	4281      	cmp	r1, r0
		mid = (hi + lo) >> 1;
  402bcc:	ea4f 0353 	mov.w	r3, r3, lsr #1
	while (lo < hi)
  402bd0:	d3db      	bcc.n	402b8a <main+0x1be>
  402bd2:	4b50      	ldr	r3, [pc, #320]	; (402d14 <main+0x348>)
  402bd4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  402bd8:	ed93 9a00 	vldr	s18, [r3]
			if (autotune)
  402bdc:	4b4e      	ldr	r3, [pc, #312]	; (402d18 <main+0x34c>)
  402bde:	781a      	ldrb	r2, [r3, #0]
			if (pitch_bend < 56 || pitch_bend > 72) // higher bounds for noise affecting pitch bend wheel 
  402be0:	4b4e      	ldr	r3, [pc, #312]	; (402d1c <main+0x350>)
				desired_pitch = closest_note;
  402be2:	2a00      	cmp	r2, #0
			if (pitch_bend < 56 || pitch_bend > 72) // higher bounds for noise affecting pitch bend wheel 
  402be4:	681b      	ldr	r3, [r3, #0]
				desired_pitch = closest_note;
  402be6:	bf14      	ite	ne
  402be8:	eef0 7a49 	vmovne.f32	s15, s18
  402bec:	eef0 7a48 	vmoveq.f32	s15, s16
			if (pitch_bend < 56 || pitch_bend > 72) // higher bounds for noise affecting pitch bend wheel 
  402bf0:	2b37      	cmp	r3, #55	; 0x37
  402bf2:	d903      	bls.n	402bfc <main+0x230>
  402bf4:	4b49      	ldr	r3, [pc, #292]	; (402d1c <main+0x350>)
  402bf6:	681b      	ldr	r3, [r3, #0]
  402bf8:	2b48      	cmp	r3, #72	; 0x48
  402bfa:	d91e      	bls.n	402c3a <main+0x26e>
				bend_pitch(&desired_pitch, in_pitch_idx, (uint32_t)pitch_bend);
  402bfc:	4b47      	ldr	r3, [pc, #284]	; (402d1c <main+0x350>)
  402bfe:	681b      	ldr	r3, [r3, #0]
	if (pitch_idx < 0 || pitch_idx > 127 || bend < 0 || bend > 127)
  402c00:	2b7f      	cmp	r3, #127	; 0x7f
  402c02:	d81a      	bhi.n	402c3a <main+0x26e>
	if (pitch_bend > 64)
  402c04:	4b45      	ldr	r3, [pc, #276]	; (402d1c <main+0x350>)
  402c06:	681b      	ldr	r3, [r3, #0]
  402c08:	2b40      	cmp	r3, #64	; 0x40
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  402c0a:	4b44      	ldr	r3, [pc, #272]	; (402d1c <main+0x350>)
  402c0c:	edd3 6a00 	vldr	s13, [r3]
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  402c10:	4b40      	ldr	r3, [pc, #256]	; (402d14 <main+0x348>)
  402c12:	eb03 0080 	add.w	r0, r3, r0, lsl #2
	if (pitch_bend > 64)
  402c16:	f200 8260 	bhi.w	4030da <main+0x70e>
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402c1a:	eef8 6a66 	vcvt.f32.u32	s13, s13
  402c1e:	ed9f 6a40 	vldr	s12, [pc, #256]	; 402d20 <main+0x354>
  402c22:	ed9f 7a40 	vldr	s14, [pc, #256]	; 402d24 <main+0x358>
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402c26:	ed50 5a02 	vldr	s11, [r0, #-8]
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402c2a:	ee76 6ac6 	vsub.f32	s13, s13, s12
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402c2e:	ee39 6a65 	vsub.f32	s12, s18, s11
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402c32:	ee26 7a87 	vmul.f32	s14, s13, s14
  402c36:	eee7 7a06 	vfma.f32	s15, s14, s12
			pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402c3a:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
			arm_power_f32((float  *)processBuffer, WIN_SIZE>>2, &power);
  402c3e:	4b31      	ldr	r3, [pc, #196]	; (402d04 <main+0x338>)
			pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402c40:	ee77 7ac8 	vsub.f32	s15, s15, s16
			arm_power_f32((float  *)processBuffer, WIN_SIZE>>2, &power);
  402c44:	aa09      	add	r2, sp, #36	; 0x24
  402c46:	6818      	ldr	r0, [r3, #0]
  402c48:	f44f 7180 	mov.w	r1, #256	; 0x100
			pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402c4c:	eeb0 7a4a 	vmov.f32	s14, s20
			arm_power_f32((float  *)processBuffer, WIN_SIZE>>2, &power);
  402c50:	4b35      	ldr	r3, [pc, #212]	; (402d28 <main+0x35c>)
			pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402c52:	eea9 7aa7 	vfma.f32	s14, s19, s15
			harmony_shifts[0] = pitch_shift ;
  402c56:	ed8d 7a0a 	vstr	s14, [sp, #40]	; 0x28
			arm_power_f32((float  *)processBuffer, WIN_SIZE>>2, &power);
  402c5a:	4798      	blx	r3
			if (inputPitch > MINIMUM_PITCH && power > POWER_THRESHOLD)
  402c5c:	eeb4 8aea 	vcmpe.f32	s16, s21
  402c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402c64:	f340 80f0 	ble.w	402e48 <main+0x47c>
  402c68:	eddf 7a30 	vldr	s15, [pc, #192]	; 402d2c <main+0x360>
  402c6c:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
  402c70:	eeb4 7ae7 	vcmpe.f32	s14, s15
  402c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402c78:	f340 80e6 	ble.w	402e48 <main+0x47c>
				while(harmony_list_read[i].freq > 1.0f && i < MAX_NUM_SHIFTS-1)
  402c7c:	4b2c      	ldr	r3, [pc, #176]	; (402d30 <main+0x364>)
  402c7e:	681b      	ldr	r3, [r3, #0]
  402c80:	edd3 7a00 	vldr	s15, [r3]
  402c84:	eef4 7aca 	vcmpe.f32	s15, s20
  402c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402c8c:	f340 821d 	ble.w	4030ca <main+0x6fe>
						if (pitch_shift > 0.1f && pitch_shift < 6.0f) // range check 
  402c90:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
				while(harmony_list_read[i].freq > 1.0f && i < MAX_NUM_SHIFTS-1)
  402c94:	2001      	movs	r0, #1
					if (Abs(harmony_list_read[i].freq - closest_note) > 1.0f) // don't harmonies input pitch twice 
  402c96:	eeb0 7a4a 	vmov.f32	s14, s20
				while(harmony_list_read[i].freq > 1.0f && i < MAX_NUM_SHIFTS-1)
  402c9a:	2200      	movs	r2, #0
						if (pitch_shift > 0.1f && pitch_shift < 6.0f) // range check 
  402c9c:	eddf 6a25 	vldr	s13, [pc, #148]	; 402d34 <main+0x368>
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402ca0:	eddf 3a1f 	vldr	s7, [pc, #124]	; 402d20 <main+0x354>
  402ca4:	eddf 4a1f 	vldr	s9, [pc, #124]	; 402d24 <main+0x358>
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  402ca8:	ed9f 4a23 	vldr	s8, [pc, #140]	; 402d38 <main+0x36c>
  402cac:	e07d      	b.n	402daa <main+0x3de>
  402cae:	bf00      	nop
  402cb0:	00401835 	.word	0x00401835
  402cb4:	004018a5 	.word	0x004018a5
  402cb8:	e000ed00 	.word	0xe000ed00
  402cbc:	00400379 	.word	0x00400379
  402cc0:	00400d09 	.word	0x00400d09
  402cc4:	0040237d 	.word	0x0040237d
  402cc8:	08f0d180 	.word	0x08f0d180
  402ccc:	00401729 	.word	0x00401729
  402cd0:	40028000 	.word	0x40028000
  402cd4:	004017c9 	.word	0x004017c9
  402cd8:	004017d1 	.word	0x004017d1
  402cdc:	004017d9 	.word	0x004017d9
  402ce0:	20444400 	.word	0x20444400
  402ce4:	2044d068 	.word	0x2044d068
  402ce8:	2044d00c 	.word	0x2044d00c
  402cec:	20445800 	.word	0x20445800
  402cf0:	00403191 	.word	0x00403191
  402cf4:	20420000 	.word	0x20420000
  402cf8:	42c80000 	.word	0x42c80000
  402cfc:	4735a700 	.word	0x4735a700
  402d00:	2040401c 	.word	0x2040401c
  402d04:	2040001c 	.word	0x2040001c
  402d08:	43dc0000 	.word	0x43dc0000
  402d0c:	004005d1 	.word	0x004005d1
  402d10:	43e914fe 	.word	0x43e914fe
  402d14:	00406b78 	.word	0x00406b78
  402d18:	20400030 	.word	0x20400030
  402d1c:	20400050 	.word	0x20400050
  402d20:	42800000 	.word	0x42800000
  402d24:	3c800000 	.word	0x3c800000
  402d28:	00403215 	.word	0x00403215
  402d2c:	358637bd 	.word	0x358637bd
  402d30:	20400048 	.word	0x20400048
  402d34:	bf666666 	.word	0xbf666666
  402d38:	427c0000 	.word	0x427c0000
  402d3c:	e000e100 	.word	0xe000e100
  402d40:	bf800000 	.word	0xbf800000
  402d44:	20434000 	.word	0x20434000
  402d48:	20400014 	.word	0x20400014
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402d4c:	ee75 5ae3 	vsub.f32	s11, s11, s7
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402d50:	ed94 3a00 	vldr	s6, [r4]
  402d54:	ed14 5a02 	vldr	s10, [r4, #-8]
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402d58:	ee65 5aa4 	vmul.f32	s11, s11, s9
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402d5c:	ee33 5a45 	vsub.f32	s10, s6, s10
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402d60:	eee5 7a25 	vfma.f32	s15, s10, s11
						pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402d64:	ee77 7ac8 	vsub.f32	s15, s15, s16
  402d68:	ee67 7aa9 	vmul.f32	s15, s15, s19
						if (pitch_shift > 0.1f && pitch_shift < 6.0f) // range check 
  402d6c:	eef4 7a66 	vcmp.f32	s15, s13
  402d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402d74:	dd0c      	ble.n	402d90 <main+0x3c4>
  402d76:	eef4 7a46 	vcmp.f32	s15, s12
  402d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402d7e:	d507      	bpl.n	402d90 <main+0x3c4>
							harmony_shifts[num_of_shifts++] = pitch_shift;
  402d80:	a916      	add	r1, sp, #88	; 0x58
						pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402d82:	ee77 7a87 	vadd.f32	s15, s15, s14
							harmony_shifts[num_of_shifts++] = pitch_shift;
  402d86:	eb01 0180 	add.w	r1, r1, r0, lsl #2
  402d8a:	3001      	adds	r0, #1
  402d8c:	ed41 7a0c 	vstr	s15, [r1, #-48]	; 0xffffffd0
				while(harmony_list_read[i].freq > 1.0f && i < MAX_NUM_SHIFTS-1)
  402d90:	3308      	adds	r3, #8
  402d92:	edd3 7a00 	vldr	s15, [r3]
					i++; 
  402d96:	3201      	adds	r2, #1
				while(harmony_list_read[i].freq > 1.0f && i < MAX_NUM_SHIFTS-1)
  402d98:	eef4 7a47 	vcmp.f32	s15, s14
  402d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402da0:	f340 8194 	ble.w	4030cc <main+0x700>
  402da4:	2a0a      	cmp	r2, #10
  402da6:	f000 8191 	beq.w	4030cc <main+0x700>
					if (Abs(harmony_list_read[i].freq - closest_note) > 1.0f) // don't harmonies input pitch twice 
  402daa:	edd3 7a00 	vldr	s15, [r3]
  402dae:	ee77 7ac9 	vsub.f32	s15, s15, s18
  402db2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  402db6:	edd3 7a00 	vldr	s15, [r3]
  402dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402dbe:	bf4c      	ite	mi
  402dc0:	ee79 7a67 	vsubmi.f32	s15, s18, s15
  402dc4:	ee77 7ac9 	vsubpl.f32	s15, s15, s18
  402dc8:	eef4 7ac7 	vcmpe.f32	s15, s14
  402dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402dd0:	bfcc      	ite	gt
  402dd2:	2101      	movgt	r1, #1
  402dd4:	2100      	movle	r1, #0
  402dd6:	2900      	cmp	r1, #0
  402dd8:	d0da      	beq.n	402d90 <main+0x3c4>
						if (pitch_bend != 64)
  402dda:	49c9      	ldr	r1, [pc, #804]	; (403100 <main+0x734>)
						desired_pitch = harmony_list_read[i].freq; 
  402ddc:	edd3 7a00 	vldr	s15, [r3]
						if (pitch_bend != 64)
  402de0:	6809      	ldr	r1, [r1, #0]
  402de2:	2940      	cmp	r1, #64	; 0x40
  402de4:	d0be      	beq.n	402d64 <main+0x398>
							bend_pitch(&desired_pitch, harmony_list_read[i].idx, (uint32_t)pitch_bend);
  402de6:	6859      	ldr	r1, [r3, #4]
  402de8:	4cc5      	ldr	r4, [pc, #788]	; (403100 <main+0x734>)
	if (pitch_idx < 0 || pitch_idx > 127 || bend < 0 || bend > 127)
  402dea:	297f      	cmp	r1, #127	; 0x7f
							bend_pitch(&desired_pitch, harmony_list_read[i].idx, (uint32_t)pitch_bend);
  402dec:	6824      	ldr	r4, [r4, #0]
	if (pitch_idx < 0 || pitch_idx > 127 || bend < 0 || bend > 127)
  402dee:	d8b9      	bhi.n	402d64 <main+0x398>
  402df0:	2c7f      	cmp	r4, #127	; 0x7f
  402df2:	d8b7      	bhi.n	402d64 <main+0x398>
	if (pitch_bend > 64)
  402df4:	4cc2      	ldr	r4, [pc, #776]	; (403100 <main+0x734>)
  402df6:	6824      	ldr	r4, [r4, #0]
  402df8:	2c40      	cmp	r4, #64	; 0x40
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  402dfa:	4cc1      	ldr	r4, [pc, #772]	; (403100 <main+0x734>)
  402dfc:	edd4 5a00 	vldr	s11, [r4]
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  402e00:	4cc0      	ldr	r4, [pc, #768]	; (403104 <main+0x738>)
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  402e02:	eef8 5a65 	vcvt.f32.u32	s11, s11
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  402e06:	eb04 0481 	add.w	r4, r4, r1, lsl #2
  402e0a:	4621      	mov	r1, r4
	if (pitch_bend > 64)
  402e0c:	d99e      	bls.n	402d4c <main+0x380>
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  402e0e:	ee75 5ac4 	vsub.f32	s11, s11, s8
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  402e12:	ed94 3a02 	vldr	s6, [r4, #8]
  402e16:	ed94 5a00 	vldr	s10, [r4]
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  402e1a:	ee65 5aa4 	vmul.f32	s11, s11, s9
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  402e1e:	ee33 5a45 	vsub.f32	s10, s6, s10
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  402e22:	eee5 7a25 	vfma.f32	s15, s10, s11
  402e26:	e79d      	b.n	402d64 <main+0x398>
		if (d2 <= d1)
  402e28:	4611      	mov	r1, r2
	while (lo < hi)
  402e2a:	428b      	cmp	r3, r1
  402e2c:	f240 8166 	bls.w	4030fc <main+0x730>
  402e30:	185c      	adds	r4, r3, r1
  402e32:	4618      	mov	r0, r3
  402e34:	460a      	mov	r2, r1
  402e36:	49b3      	ldr	r1, [pc, #716]	; (403104 <main+0x738>)
  402e38:	0863      	lsrs	r3, r4, #1
  402e3a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  402e3e:	ed91 9a00 	vldr	s18, [r1]
  402e42:	edd1 7a01 	vldr	s15, [r1, #4]
  402e46:	e68a      	b.n	402b5e <main+0x192>
				harmony_shifts[1] = END_OF_SHIFTS; 	
  402e48:	4baf      	ldr	r3, [pc, #700]	; (403108 <main+0x73c>)
  402e4a:	930b      	str	r3, [sp, #44]	; 0x2c
			create_harmonies((float  *)processBuffer, mixed_buffer, inputPitch, harmony_shifts, (float)harm_volume, (float)dry_volume); 
  402e4c:	4baf      	ldr	r3, [pc, #700]	; (40310c <main+0x740>)
  402e4e:	4ab0      	ldr	r2, [pc, #704]	; (403110 <main+0x744>)
  402e50:	6819      	ldr	r1, [r3, #0]
  402e52:	ab0a      	add	r3, sp, #40	; 0x28
  402e54:	6814      	ldr	r4, [r2, #0]
  402e56:	ee18 2a10 	vmov	r2, s16
  402e5a:	48ae      	ldr	r0, [pc, #696]	; (403114 <main+0x748>)
  402e5c:	6800      	ldr	r0, [r0, #0]
  402e5e:	9100      	str	r1, [sp, #0]
  402e60:	9401      	str	r4, [sp, #4]
  402e62:	49ad      	ldr	r1, [pc, #692]	; (403118 <main+0x74c>)
  402e64:	4cad      	ldr	r4, [pc, #692]	; (40311c <main+0x750>)
  402e66:	47a0      	blx	r4
  402e68:	4cab      	ldr	r4, [pc, #684]	; (403118 <main+0x74c>)
  402e6a:	464a      	mov	r2, r9
				dry_circ_buffer[circ_buf_idx++ & CIRC_MASK] = mixed_buffer[i];
  402e6c:	f3c2 030d 	ubfx	r3, r2, #0, #14
  402e70:	f854 1b04 	ldr.w	r1, [r4], #4
  402e74:	3201      	adds	r2, #1
  402e76:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  402e7a:	6019      	str	r1, [r3, #0]
			for (i = 0; i < WIN_SIZE; i++)
  402e7c:	4ba8      	ldr	r3, [pc, #672]	; (403120 <main+0x754>)
  402e7e:	429c      	cmp	r4, r3
  402e80:	d1f4      	bne.n	402e6c <main+0x4a0>
			float n_freq = chorus_speed / PSOLA_SAMPLE_RATE; 
  402e82:	4ba8      	ldr	r3, [pc, #672]	; (403124 <main+0x758>)
  402e84:	ed9f 8aa8 	vldr	s16, [pc, #672]	; 403128 <main+0x75c>
  402e88:	edd3 7a00 	vldr	s15, [r3]
  402e8c:	f509 6380 	add.w	r3, r9, #1024	; 0x400
  402e90:	4da6      	ldr	r5, [pc, #664]	; (40312c <main+0x760>)
			uint32_t num_samples_in_period = 1 / n_freq; 
  402e92:	ee88 7aa7 	vdiv.f32	s14, s17, s15
  402e96:	9305      	str	r3, [sp, #20]
			float val; 
			for (i = 0; i < WIN_SIZE; i++, curr_wet_idx++, curr_dry_idx++)
			{				
				wet_circ_buffer[i] = (1.0f - 0.5*(delay_volume + chorus_volume + reverb_volume)) * mixed_buffer[i]; 						
				// chorus
				chorus_delay = (0.01f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  402e98:	ed9f aaa5 	vldr	s20, [pc, #660]	; 403130 <main+0x764>
			uint32_t num_samples_in_period = 1 / n_freq; 
  402e9c:	4b9e      	ldr	r3, [pc, #632]	; (403118 <main+0x74c>)
				chorus_delay = (0.01f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  402e9e:	eddf 9aa5 	vldr	s19, [pc, #660]	; 403134 <main+0x768>
				if (sin_cnt == num_samples_in_period)
					sin_cnt = 0;
				wet_circ_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_dry_idx - chorus_delay)  & CIRC_MASK] +
  402ea2:	ed9f 9aa5 	vldr	s18, [pc, #660]	; 403138 <main+0x76c>
  402ea6:	ee27 8a88 	vmul.f32	s16, s15, s16
			uint32_t num_samples_in_period = 1 / n_freq; 
  402eaa:	9303      	str	r3, [sp, #12]
  402eac:	9406      	str	r4, [sp, #24]
  402eae:	eefc 7ac7 	vcvt.u32.f32	s15, s14
  402eb2:	edcd 7a04 	vstr	s15, [sp, #16]
				wet_circ_buffer[i] = (1.0f - 0.5*(delay_volume + chorus_volume + reverb_volume)) * mixed_buffer[i]; 						
  402eb6:	4ba1      	ldr	r3, [pc, #644]	; (40313c <main+0x770>)
  402eb8:	4aa1      	ldr	r2, [pc, #644]	; (403140 <main+0x774>)
  402eba:	ed93 7a00 	vldr	s14, [r3]
  402ebe:	edd2 7a00 	vldr	s15, [r2]
  402ec2:	4aa0      	ldr	r2, [pc, #640]	; (403144 <main+0x778>)
  402ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
				chorus_delay = (0.01f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  402ec8:	9b02      	ldr	r3, [sp, #8]
				wet_circ_buffer[i] = (1.0f - 0.5*(delay_volume + chorus_volume + reverb_volume)) * mixed_buffer[i]; 						
  402eca:	edd2 6a00 	vldr	s13, [r2]
  402ece:	9a03      	ldr	r2, [sp, #12]
				chorus_delay = (0.01f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  402ed0:	1c5c      	adds	r4, r3, #1
				wet_circ_buffer[i] = (1.0f - 0.5*(delay_volume + chorus_volume + reverb_volume)) * mixed_buffer[i]; 						
  402ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
  402ed6:	4e9c      	ldr	r6, [pc, #624]	; (403148 <main+0x77c>)
  402ed8:	f852 8b04 	ldr.w	r8, [r2], #4
  402edc:	ee17 0a90 	vmov	r0, s15
  402ee0:	9203      	str	r2, [sp, #12]
  402ee2:	4a9a      	ldr	r2, [pc, #616]	; (40314c <main+0x780>)
  402ee4:	4790      	blx	r2
  402ee6:	2200      	movs	r2, #0
  402ee8:	4b99      	ldr	r3, [pc, #612]	; (403150 <main+0x784>)
  402eea:	47b0      	blx	r6
  402eec:	4e99      	ldr	r6, [pc, #612]	; (403154 <main+0x788>)
  402eee:	460b      	mov	r3, r1
  402ef0:	4602      	mov	r2, r0
  402ef2:	4999      	ldr	r1, [pc, #612]	; (403158 <main+0x78c>)
  402ef4:	2000      	movs	r0, #0
  402ef6:	47b0      	blx	r6
  402ef8:	4606      	mov	r6, r0
  402efa:	460f      	mov	r7, r1
  402efc:	4a93      	ldr	r2, [pc, #588]	; (40314c <main+0x780>)
  402efe:	4640      	mov	r0, r8
  402f00:	4790      	blx	r2
  402f02:	460b      	mov	r3, r1
  402f04:	4602      	mov	r2, r0
  402f06:	4639      	mov	r1, r7
  402f08:	4630      	mov	r0, r6
  402f0a:	4e8f      	ldr	r6, [pc, #572]	; (403148 <main+0x77c>)
  402f0c:	47b0      	blx	r6
  402f0e:	4a93      	ldr	r2, [pc, #588]	; (40315c <main+0x790>)
  402f10:	4790      	blx	r2
				chorus_delay = (0.01f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  402f12:	eddd 7a02 	vldr	s15, [sp, #8]
				if (sin_cnt == num_samples_in_period)
  402f16:	9a04      	ldr	r2, [sp, #16]
  402f18:	4623      	mov	r3, r4
				chorus_delay = (0.01f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  402f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
				wet_circ_buffer[i] = (1.0f - 0.5*(delay_volume + chorus_volume + reverb_volume)) * mixed_buffer[i]; 						
  402f1e:	6028      	str	r0, [r5, #0]
				if (sin_cnt == num_samples_in_period)
  402f20:	42a2      	cmp	r2, r4
  402f22:	bf08      	it	eq
  402f24:	2300      	moveq	r3, #0
				wet_circ_buffer[i] += delay_volume * delay_circ_buffer[curr_dry_idx & CIRC_MASK];
				
				// reverb
				wet_circ_buffer[i] += reverb_volume * 0.33f *
						(dry_circ_buffer[(curr_dry_idx - 2001)  & CIRC_MASK] +
						dry_circ_buffer[(curr_dry_idx - 1503)  & CIRC_MASK] + 
  402f26:	f2a9 54df 	subw	r4, r9, #1503	; 0x5df
				wet_circ_buffer[i] += reverb_volume * 0.33f *
  402f2a:	4e86      	ldr	r6, [pc, #536]	; (403144 <main+0x778>)
				chorus_delay = (0.01f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  402f2c:	ee67 7a88 	vmul.f32	s15, s15, s16
				if (sin_cnt == num_samples_in_period)
  402f30:	9302      	str	r3, [sp, #8]
				chorus_delay = (0.01f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  402f32:	4b8b      	ldr	r3, [pc, #556]	; (403160 <main+0x794>)
						dry_circ_buffer[(curr_dry_idx - 1503)  & CIRC_MASK] + 
  402f34:	f3c4 040d 	ubfx	r4, r4, #0, #14
				chorus_delay = (0.01f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  402f38:	ee17 0a90 	vmov	r0, s15
						dry_circ_buffer[(curr_dry_idx - 1503)  & CIRC_MASK] + 
  402f3c:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
				chorus_delay = (0.01f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  402f40:	4798      	blx	r3
  402f42:	eef0 7a69 	vmov.f32	s15, s19
  402f46:	ee07 0a10 	vmov	s14, r0
						(dry_circ_buffer[(curr_dry_idx - 2001)  & CIRC_MASK] +
  402f4a:	f46f 63fa 	mvn.w	r3, #2000	; 0x7d0
						dry_circ_buffer[(curr_dry_idx - 1203)  & CIRC_MASK] ); 
  402f4e:	f2a9 40b3 	subw	r0, r9, #1203	; 0x4b3
				wet_circ_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_dry_idx - chorus_delay)  & CIRC_MASK] +
  402f52:	4a7b      	ldr	r2, [pc, #492]	; (403140 <main+0x774>)
				chorus_delay = (0.01f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  402f54:	eee7 7a0a 	vfma.f32	s15, s14, s20
						(dry_circ_buffer[(curr_dry_idx - 2001)  & CIRC_MASK] +
  402f58:	444b      	add	r3, r9
						dry_circ_buffer[(curr_dry_idx - 1203)  & CIRC_MASK] ); 
  402f5a:	f3c0 000d 	ubfx	r0, r0, #0, #14
				wet_circ_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_dry_idx - chorus_delay)  & CIRC_MASK] +
  402f5e:	ed92 4a00 	vldr	s8, [r2]
						(dry_circ_buffer[(curr_dry_idx - 2001)  & CIRC_MASK] +
  402f62:	f3c3 030d 	ubfx	r3, r3, #0, #14
				delay_circ_buffer[curr_dry_idx & CIRC_MASK] = wet_circ_buffer[i] + delay_feedback * delay_circ_buffer[(curr_wet_idx - delay_speed)  & CIRC_MASK];	
  402f66:	f3c9 010d 	ubfx	r1, r9, #0, #14
						dry_circ_buffer[(curr_dry_idx - 1203)  & CIRC_MASK] ); 
  402f6a:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
				wet_circ_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_dry_idx - chorus_delay)  & CIRC_MASK] +
  402f6e:	ee24 4a09 	vmul.f32	s8, s8, s18
						(dry_circ_buffer[(curr_dry_idx - 2001)  & CIRC_MASK] +
  402f72:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
				wet_circ_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_dry_idx - chorus_delay)  & CIRC_MASK] +
  402f76:	edd5 5a00 	vldr	s11, [r5]
				wet_circ_buffer[i] += reverb_volume * 0.33f *
  402f7a:	ed9f 5a7a 	vldr	s10, [pc, #488]	; 403164 <main+0x798>
				chorus_delay = (0.01f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  402f7e:	ee67 7aa8 	vmul.f32	s15, s15, s17
						(dry_circ_buffer[(curr_dry_idx - 2001)  & CIRC_MASK] +
  402f82:	ed93 6a00 	vldr	s12, [r3]
				delay_circ_buffer[curr_dry_idx & CIRC_MASK] = wet_circ_buffer[i] + delay_feedback * delay_circ_buffer[(curr_wet_idx - delay_speed)  & CIRC_MASK];	
  402f86:	4b78      	ldr	r3, [pc, #480]	; (403168 <main+0x79c>)
				chorus_delay = (0.01f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  402f88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
				delay_circ_buffer[curr_dry_idx & CIRC_MASK] = wet_circ_buffer[i] + delay_feedback * delay_circ_buffer[(curr_wet_idx - delay_speed)  & CIRC_MASK];	
  402f8c:	681a      	ldr	r2, [r3, #0]
  402f8e:	eba9 0202 	sub.w	r2, r9, r2
				chorus_delay = (0.01f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  402f92:	ee17 3a90 	vmov	r3, s15
						(dry_circ_buffer[(curr_dry_idx - 2001)  & CIRC_MASK] +
  402f96:	edd4 7a00 	vldr	s15, [r4]
				delay_circ_buffer[curr_dry_idx & CIRC_MASK] = wet_circ_buffer[i] + delay_feedback * delay_circ_buffer[(curr_wet_idx - delay_speed)  & CIRC_MASK];	
  402f9a:	4c74      	ldr	r4, [pc, #464]	; (40316c <main+0x7a0>)
  402f9c:	f3c2 020d 	ubfx	r2, r2, #0, #14
						(dry_circ_buffer[(curr_dry_idx - 2001)  & CIRC_MASK] +
  402fa0:	ee36 6a27 	vadd.f32	s12, s12, s15
						dry_circ_buffer[(curr_dry_idx - 1503)  & CIRC_MASK] + 
  402fa4:	edd0 7a00 	vldr	s15, [r0]
				wet_circ_buffer[i] += delay_volume * delay_circ_buffer[curr_dry_idx & CIRC_MASK];
  402fa8:	4864      	ldr	r0, [pc, #400]	; (40313c <main+0x770>)
				wet_circ_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_dry_idx - chorus_delay)  & CIRC_MASK] +
  402faa:	eba9 0303 	sub.w	r3, r9, r3
				delay_circ_buffer[curr_dry_idx & CIRC_MASK] = wet_circ_buffer[i] + delay_feedback * delay_circ_buffer[(curr_wet_idx - delay_speed)  & CIRC_MASK];	
  402fae:	ed94 3a00 	vldr	s6, [r4]
			for (i = 0; i < WIN_SIZE; i++, curr_wet_idx++, curr_dry_idx++)
  402fb2:	f109 0901 	add.w	r9, r9, #1
				wet_circ_buffer[i] += delay_volume * delay_circ_buffer[curr_dry_idx & CIRC_MASK];
  402fb6:	edd0 3a00 	vldr	s7, [r0]
														dry_circ_buffer[(curr_dry_idx - 199 - chorus_delay)  & CIRC_MASK] +
  402fba:	f1a3 04c7 	sub.w	r4, r3, #199	; 0xc7
				delay_circ_buffer[curr_dry_idx & CIRC_MASK] = wet_circ_buffer[i] + delay_feedback * delay_circ_buffer[(curr_wet_idx - delay_speed)  & CIRC_MASK];	
  402fbe:	486c      	ldr	r0, [pc, #432]	; (403170 <main+0x7a4>)
						dry_circ_buffer[(curr_dry_idx - 1503)  & CIRC_MASK] + 
  402fc0:	ee36 6a27 	vadd.f32	s12, s12, s15
														dry_circ_buffer[(curr_dry_idx - 199 - chorus_delay)  & CIRC_MASK] +
  402fc4:	f3c4 040d 	ubfx	r4, r4, #0, #14
				wet_circ_buffer[i] += reverb_volume * 0.33f *
  402fc8:	edd6 4a00 	vldr	s9, [r6]
				delay_circ_buffer[curr_dry_idx & CIRC_MASK] = wet_circ_buffer[i] + delay_feedback * delay_circ_buffer[(curr_wet_idx - delay_speed)  & CIRC_MASK];	
  402fcc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
														dry_circ_buffer[(curr_dry_idx - 401 - chorus_delay)  & CIRC_MASK] +
  402fd0:	f46f 70c8 	mvn.w	r0, #400	; 0x190
				delay_circ_buffer[curr_dry_idx & CIRC_MASK] = wet_circ_buffer[i] + delay_feedback * delay_circ_buffer[(curr_wet_idx - delay_speed)  & CIRC_MASK];	
  402fd4:	4e66      	ldr	r6, [pc, #408]	; (403170 <main+0x7a4>)
														dry_circ_buffer[(curr_dry_idx - 199 - chorus_delay)  & CIRC_MASK] +
  402fd6:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
														dry_circ_buffer[(curr_dry_idx - 401 - chorus_delay)  & CIRC_MASK] +
  402fda:	1818      	adds	r0, r3, r0
				wet_circ_buffer[i] += reverb_volume * 0.33f *
  402fdc:	ee24 5a85 	vmul.f32	s10, s9, s10
				delay_circ_buffer[curr_dry_idx & CIRC_MASK] = wet_circ_buffer[i] + delay_feedback * delay_circ_buffer[(curr_wet_idx - delay_speed)  & CIRC_MASK];	
  402fe0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
														dry_circ_buffer[(curr_dry_idx - 199 - chorus_delay)  & CIRC_MASK] +
  402fe4:	ed94 7a00 	vldr	s14, [r4]
														dry_circ_buffer[(curr_dry_idx - 401 - chorus_delay)  & CIRC_MASK] +
  402fe8:	f3c0 000d 	ubfx	r0, r0, #0, #14
														dry_circ_buffer[(curr_dry_idx - 601 - chorus_delay)  & CIRC_MASK] +
  402fec:	f46f 7416 	mvn.w	r4, #600	; 0x258
				wet_circ_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_dry_idx - chorus_delay)  & CIRC_MASK] +
  402ff0:	f3c3 060d 	ubfx	r6, r3, #0, #14
				delay_circ_buffer[curr_dry_idx & CIRC_MASK] = wet_circ_buffer[i] + delay_feedback * delay_circ_buffer[(curr_wet_idx - delay_speed)  & CIRC_MASK];	
  402ff4:	edd2 2a00 	vldr	s5, [r2]
														dry_circ_buffer[(curr_dry_idx - 401 - chorus_delay)  & CIRC_MASK] +
  402ff8:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
														dry_circ_buffer[(curr_dry_idx - 601 - chorus_delay)  & CIRC_MASK] +
  402ffc:	191a      	adds	r2, r3, r4
														dry_circ_buffer[(curr_dry_idx - 199 - chorus_delay)  & CIRC_MASK] +
  402ffe:	edd0 7a00 	vldr	s15, [r0]
				wet_circ_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_dry_idx - chorus_delay)  & CIRC_MASK] +
  403002:	eb0a 0086 	add.w	r0, sl, r6, lsl #2
														dry_circ_buffer[(curr_dry_idx - 809 - chorus_delay)  & CIRC_MASK]));			
  403006:	f46f 764a 	mvn.w	r6, #808	; 0x328
														dry_circ_buffer[(curr_dry_idx - 601 - chorus_delay)  & CIRC_MASK] +
  40300a:	f3c2 020d 	ubfx	r2, r2, #0, #14
														dry_circ_buffer[(curr_dry_idx - 199 - chorus_delay)  & CIRC_MASK] +
  40300e:	ee77 7a27 	vadd.f32	s15, s14, s15
  403012:	edd0 6a00 	vldr	s13, [r0]
														dry_circ_buffer[(curr_dry_idx - 809 - chorus_delay)  & CIRC_MASK]));			
  403016:	4433      	add	r3, r6
														dry_circ_buffer[(curr_dry_idx - 601 - chorus_delay)  & CIRC_MASK] +
  403018:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
														dry_circ_buffer[(curr_dry_idx - 199 - chorus_delay)  & CIRC_MASK] +
  40301c:	ee77 7aa6 	vadd.f32	s15, s15, s13
														dry_circ_buffer[(curr_dry_idx - 809 - chorus_delay)  & CIRC_MASK]));			
  403020:	f3c3 030d 	ubfx	r3, r3, #0, #14
														dry_circ_buffer[(curr_dry_idx - 401 - chorus_delay)  & CIRC_MASK] +
  403024:	ed92 7a00 	vldr	s14, [r2]
														dry_circ_buffer[(curr_dry_idx - 809 - chorus_delay)  & CIRC_MASK]));			
  403028:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
														dry_circ_buffer[(curr_dry_idx - 401 - chorus_delay)  & CIRC_MASK] +
  40302c:	ee37 7a87 	vadd.f32	s14, s15, s14
														dry_circ_buffer[(curr_dry_idx - 601 - chorus_delay)  & CIRC_MASK] +
  403030:	edd3 7a00 	vldr	s15, [r3]
			for (i = 0; i < WIN_SIZE; i++, curr_wet_idx++, curr_dry_idx++)
  403034:	9b05      	ldr	r3, [sp, #20]
														dry_circ_buffer[(curr_dry_idx - 601 - chorus_delay)  & CIRC_MASK] +
  403036:	ee77 7a27 	vadd.f32	s15, s14, s15
			for (i = 0; i < WIN_SIZE; i++, curr_wet_idx++, curr_dry_idx++)
  40303a:	4599      	cmp	r9, r3
				wet_circ_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_dry_idx - chorus_delay)  & CIRC_MASK] +
  40303c:	eee7 5a84 	vfma.f32	s11, s15, s8
  403040:	eef0 7a65 	vmov.f32	s15, s11
				delay_circ_buffer[curr_dry_idx & CIRC_MASK] = wet_circ_buffer[i] + delay_feedback * delay_circ_buffer[(curr_wet_idx - delay_speed)  & CIRC_MASK];	
  403044:	eeb0 7a65 	vmov.f32	s14, s11
				wet_circ_buffer[i] += reverb_volume * 0.33f *
  403048:	eee6 7a05 	vfma.f32	s15, s12, s10
				delay_circ_buffer[curr_dry_idx & CIRC_MASK] = wet_circ_buffer[i] + delay_feedback * delay_circ_buffer[(curr_wet_idx - delay_speed)  & CIRC_MASK];	
  40304c:	eea2 7a83 	vfma.f32	s14, s5, s6
				wet_circ_buffer[i] += reverb_volume * 0.33f *
  403050:	eee7 7a23 	vfma.f32	s15, s14, s7
				delay_circ_buffer[curr_dry_idx & CIRC_MASK] = wet_circ_buffer[i] + delay_feedback * delay_circ_buffer[(curr_wet_idx - delay_speed)  & CIRC_MASK];	
  403054:	ed81 7a00 	vstr	s14, [r1]
				wet_circ_buffer[i] += reverb_volume * 0.33f *
  403058:	ece5 7a01 	vstmia	r5!, {s15}
			for (i = 0; i < WIN_SIZE; i++, curr_wet_idx++, curr_dry_idx++)
  40305c:	f47f af2b 	bne.w	402eb6 <main+0x4ea>
  403060:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  403064:	4931      	ldr	r1, [pc, #196]	; (40312c <main+0x760>)
  403066:	4b43      	ldr	r3, [pc, #268]	; (403174 <main+0x7a8>)
  403068:	482b      	ldr	r0, [pc, #172]	; (403118 <main+0x74c>)
  40306a:	9c06      	ldr	r4, [sp, #24]
  40306c:	4798      	blx	r3
			{
				 mixed_buffer[i] = wet_circ_buffer[i];
			}

			// scale output 
			arm_scale_f32(mixed_buffer, (float)INT16_MAX * master_volume * 0.5, mixed_buffer, WIN_SIZE);
  40306e:	4b42      	ldr	r3, [pc, #264]	; (403178 <main+0x7ac>)
  403070:	eddf 7a42 	vldr	s15, [pc, #264]	; 40317c <main+0x7b0>
  403074:	ed93 7a00 	vldr	s14, [r3]
  403078:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40307c:	4a26      	ldr	r2, [pc, #152]	; (403118 <main+0x74c>)
  40307e:	ee67 7a27 	vmul.f32	s15, s14, s15
  403082:	4d3f      	ldr	r5, [pc, #252]	; (403180 <main+0x7b4>)
  403084:	4610      	mov	r0, r2
  403086:	ee17 1a90 	vmov	r1, s15
  40308a:	47a8      	blx	r5
  40308c:	4b22      	ldr	r3, [pc, #136]	; (403118 <main+0x74c>)
  40308e:	9f07      	ldr	r7, [sp, #28]
  403090:	4a21      	ldr	r2, [pc, #132]	; (403118 <main+0x74c>)
			
			// Sound out 
			uint32_t idx = 0; 
			for(i = 0; i < IO_BUF_SIZE; i+=2)
			{
				outBuffer[i] = (uint16_t)(int16_t)(mixed_buffer[idx++]);  
  403092:	f8db 6000 	ldr.w	r6, [fp]
  403096:	1a98      	subs	r0, r3, r2
  403098:	ecf3 7a01 	vldmia	r3!, {s15}
  40309c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
				outBuffer[i+1] = outBuffer[i]; 
  4030a0:	18fd      	adds	r5, r7, r3
			for(i = 0; i < IO_BUF_SIZE; i+=2)
  4030a2:	42a3      	cmp	r3, r4
				outBuffer[i] = (uint16_t)(int16_t)(mixed_buffer[idx++]);  
  4030a4:	edcd 7a03 	vstr	s15, [sp, #12]
  4030a8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4030ac:	5232      	strh	r2, [r6, r0]
				outBuffer[i+1] = outBuffer[i]; 
  4030ae:	5a32      	ldrh	r2, [r6, r0]
  4030b0:	b292      	uxth	r2, r2
  4030b2:	5372      	strh	r2, [r6, r5]
			for(i = 0; i < IO_BUF_SIZE; i+=2)
  4030b4:	d1ec      	bne.n	403090 <main+0x6c4>
			}
			
			// check if we're too slow 
			if (dataReceived)
  4030b6:	4b33      	ldr	r3, [pc, #204]	; (403184 <main+0x7b8>)
  4030b8:	781b      	ldrb	r3, [r3, #0]
  4030ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
  4030be:	2b00      	cmp	r3, #0
  4030c0:	f47f ad34 	bne.w	402b2c <main+0x160>
// 				{
// 					// taking too long ... never 
// 				}
			}
			else 
				dataReceived = false; 
  4030c4:	4b2f      	ldr	r3, [pc, #188]	; (403184 <main+0x7b8>)
  4030c6:	701a      	strb	r2, [r3, #0]
  4030c8:	e530      	b.n	402b2c <main+0x160>
				while(harmony_list_read[i].freq > 1.0f && i < MAX_NUM_SHIFTS-1)
  4030ca:	2001      	movs	r0, #1
				harmony_shifts[num_of_shifts] = END_OF_SHIFTS; 
  4030cc:	aa16      	add	r2, sp, #88	; 0x58
  4030ce:	4b0e      	ldr	r3, [pc, #56]	; (403108 <main+0x73c>)
  4030d0:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  4030d4:	f840 3c30 	str.w	r3, [r0, #-48]
  4030d8:	e6b8      	b.n	402e4c <main+0x480>
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  4030da:	eef8 6a66 	vcvt.f32.u32	s13, s13
  4030de:	ed9f 6a2a 	vldr	s12, [pc, #168]	; 403188 <main+0x7bc>
  4030e2:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 40318c <main+0x7c0>
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  4030e6:	edd0 5a02 	vldr	s11, [r0, #8]
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  4030ea:	ee76 6ac6 	vsub.f32	s13, s13, s12
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  4030ee:	ee35 6ac9 	vsub.f32	s12, s11, s18
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  4030f2:	ee26 7a87 	vmul.f32	s14, s13, s14
  4030f6:	eee7 7a06 	vfma.f32	s15, s14, s12
  4030fa:	e59e      	b.n	402c3a <main+0x26e>
	while (lo < hi)
  4030fc:	4618      	mov	r0, r3
  4030fe:	e56d      	b.n	402bdc <main+0x210>
  403100:	20400050 	.word	0x20400050
  403104:	00406b78 	.word	0x00406b78
  403108:	bf800000 	.word	0xbf800000
  40310c:	20400040 	.word	0x20400040
  403110:	2040003c 	.word	0x2040003c
  403114:	2040001c 	.word	0x2040001c
  403118:	20444400 	.word	0x20444400
  40311c:	00400da9 	.word	0x00400da9
  403120:	20445400 	.word	0x20445400
  403124:	20400034 	.word	0x20400034
  403128:	390dad45 	.word	0x390dad45
  40312c:	20445800 	.word	0x20445800
  403130:	3b449ba6 	.word	0x3b449ba6
  403134:	3c23d70a 	.word	0x3c23d70a
  403138:	3e4ccccd 	.word	0x3e4ccccd
  40313c:	20430004 	.word	0x20430004
  403140:	2041c0d4 	.word	0x2041c0d4
  403144:	20445400 	.word	0x20445400
  403148:	0040389d 	.word	0x0040389d
  40314c:	004037f5 	.word	0x004037f5
  403150:	3fe00000 	.word	0x3fe00000
  403154:	00403535 	.word	0x00403535
  403158:	3ff00000 	.word	0x3ff00000
  40315c:	00403cc1 	.word	0x00403cc1
  403160:	00403439 	.word	0x00403439
  403164:	3ea8f5c3 	.word	0x3ea8f5c3
  403168:	20400038 	.word	0x20400038
  40316c:	20430000 	.word	0x20430000
  403170:	20420000 	.word	0x20420000
  403174:	00404349 	.word	0x00404349
  403178:	2040004c 	.word	0x2040004c
  40317c:	467ffe00 	.word	0x467ffe00
  403180:	004034c1 	.word	0x004034c1
  403184:	2040401c 	.word	0x2040401c
  403188:	427c0000 	.word	0x427c0000
  40318c:	3c800000 	.word	0x3c800000

00403190 <arm_fill_f32>:
  403190:	b430      	push	{r4, r5}
  403192:	0895      	lsrs	r5, r2, #2
  403194:	d00b      	beq.n	4031ae <arm_fill_f32+0x1e>
  403196:	460b      	mov	r3, r1
  403198:	462c      	mov	r4, r5
  40319a:	3c01      	subs	r4, #1
  40319c:	6018      	str	r0, [r3, #0]
  40319e:	6058      	str	r0, [r3, #4]
  4031a0:	6098      	str	r0, [r3, #8]
  4031a2:	60d8      	str	r0, [r3, #12]
  4031a4:	f103 0310 	add.w	r3, r3, #16
  4031a8:	d1f7      	bne.n	40319a <arm_fill_f32+0xa>
  4031aa:	eb01 1105 	add.w	r1, r1, r5, lsl #4
  4031ae:	f012 0203 	ands.w	r2, r2, #3
  4031b2:	d003      	beq.n	4031bc <arm_fill_f32+0x2c>
  4031b4:	3a01      	subs	r2, #1
  4031b6:	f841 0b04 	str.w	r0, [r1], #4
  4031ba:	d1fb      	bne.n	4031b4 <arm_fill_f32+0x24>
  4031bc:	bc30      	pop	{r4, r5}
  4031be:	4770      	bx	lr

004031c0 <arm_copy_f32>:
  4031c0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  4031c4:	ea5f 0992 	movs.w	r9, r2, lsr #2
  4031c8:	d018      	beq.n	4031fc <arm_copy_f32+0x3c>
  4031ca:	4604      	mov	r4, r0
  4031cc:	460b      	mov	r3, r1
  4031ce:	464d      	mov	r5, r9
  4031d0:	f8d4 8000 	ldr.w	r8, [r4]
  4031d4:	f8d4 c004 	ldr.w	ip, [r4, #4]
  4031d8:	68a7      	ldr	r7, [r4, #8]
  4031da:	68e6      	ldr	r6, [r4, #12]
  4031dc:	3d01      	subs	r5, #1
  4031de:	f8c3 8000 	str.w	r8, [r3]
  4031e2:	f8c3 c004 	str.w	ip, [r3, #4]
  4031e6:	609f      	str	r7, [r3, #8]
  4031e8:	60de      	str	r6, [r3, #12]
  4031ea:	f104 0410 	add.w	r4, r4, #16
  4031ee:	f103 0310 	add.w	r3, r3, #16
  4031f2:	d1ed      	bne.n	4031d0 <arm_copy_f32+0x10>
  4031f4:	ea4f 1909 	mov.w	r9, r9, lsl #4
  4031f8:	4448      	add	r0, r9
  4031fa:	4449      	add	r1, r9
  4031fc:	f012 0203 	ands.w	r2, r2, #3
  403200:	d005      	beq.n	40320e <arm_copy_f32+0x4e>
  403202:	f850 3b04 	ldr.w	r3, [r0], #4
  403206:	3a01      	subs	r2, #1
  403208:	f841 3b04 	str.w	r3, [r1], #4
  40320c:	d1f9      	bne.n	403202 <arm_copy_f32+0x42>
  40320e:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
  403212:	4770      	bx	lr

00403214 <arm_power_f32>:
  403214:	b430      	push	{r4, r5}
  403216:	088d      	lsrs	r5, r1, #2
  403218:	eddf 7a18 	vldr	s15, [pc, #96]	; 40327c <arm_power_f32+0x68>
  40321c:	d01f      	beq.n	40325e <arm_power_f32+0x4a>
  40321e:	4603      	mov	r3, r0
  403220:	462c      	mov	r4, r5
  403222:	edd3 6a00 	vldr	s13, [r3]
  403226:	ed93 7a01 	vldr	s14, [r3, #4]
  40322a:	ee66 6aa6 	vmul.f32	s13, s13, s13
  40322e:	ee27 6a07 	vmul.f32	s12, s14, s14
  403232:	ee76 7aa7 	vadd.f32	s15, s13, s15
  403236:	ed93 7a02 	vldr	s14, [r3, #8]
  40323a:	ee76 7a27 	vadd.f32	s15, s12, s15
  40323e:	ee67 6a07 	vmul.f32	s13, s14, s14
  403242:	ed93 7a03 	vldr	s14, [r3, #12]
  403246:	ee76 6aa7 	vadd.f32	s13, s13, s15
  40324a:	ee27 7a07 	vmul.f32	s14, s14, s14
  40324e:	3c01      	subs	r4, #1
  403250:	f103 0310 	add.w	r3, r3, #16
  403254:	ee77 7a26 	vadd.f32	s15, s14, s13
  403258:	d1e3      	bne.n	403222 <arm_power_f32+0xe>
  40325a:	eb00 1005 	add.w	r0, r0, r5, lsl #4
  40325e:	f011 0103 	ands.w	r1, r1, #3
  403262:	d007      	beq.n	403274 <arm_power_f32+0x60>
  403264:	ecb0 7a01 	vldmia	r0!, {s14}
  403268:	ee27 7a07 	vmul.f32	s14, s14, s14
  40326c:	3901      	subs	r1, #1
  40326e:	ee77 7a87 	vadd.f32	s15, s15, s14
  403272:	d1f7      	bne.n	403264 <arm_power_f32+0x50>
  403274:	edc2 7a00 	vstr	s15, [r2]
  403278:	bc30      	pop	{r4, r5}
  40327a:	4770      	bx	lr
  40327c:	00000000 	.word	0x00000000

00403280 <arm_min_f32>:
  403280:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  403284:	f101 3cff 	add.w	ip, r1, #4294967295
  403288:	ea5f 099c 	movs.w	r9, ip, lsr #2
  40328c:	f100 0704 	add.w	r7, r0, #4
  403290:	edd0 7a00 	vldr	s15, [r0]
  403294:	d05c      	beq.n	403350 <arm_min_f32+0xd0>
  403296:	463c      	mov	r4, r7
  403298:	464e      	mov	r6, r9
  40329a:	2004      	movs	r0, #4
  40329c:	2500      	movs	r5, #0
  40329e:	edd4 6a00 	vldr	s13, [r4]
  4032a2:	eef4 6ae7 	vcmpe.f32	s13, s15
  4032a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4032aa:	ed94 7a01 	vldr	s14, [r4, #4]
  4032ae:	bf48      	it	mi
  4032b0:	eef0 7a66 	vmovmi.f32	s15, s13
  4032b4:	eef4 7ac7 	vcmpe.f32	s15, s14
  4032b8:	f1a0 0803 	sub.w	r8, r0, #3
  4032bc:	bf48      	it	mi
  4032be:	4645      	movmi	r5, r8
  4032c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4032c4:	edd4 6a02 	vldr	s13, [r4, #8]
  4032c8:	bfc8      	it	gt
  4032ca:	eef0 7a47 	vmovgt.f32	s15, s14
  4032ce:	eef4 7ae6 	vcmpe.f32	s15, s13
  4032d2:	f1a0 0802 	sub.w	r8, r0, #2
  4032d6:	bfc8      	it	gt
  4032d8:	4645      	movgt	r5, r8
  4032da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4032de:	ed94 7a03 	vldr	s14, [r4, #12]
  4032e2:	bfc8      	it	gt
  4032e4:	eef0 7a66 	vmovgt.f32	s15, s13
  4032e8:	eef4 7ac7 	vcmpe.f32	s15, s14
  4032ec:	f100 38ff 	add.w	r8, r0, #4294967295
  4032f0:	bfc8      	it	gt
  4032f2:	4645      	movgt	r5, r8
  4032f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4032f8:	bfc8      	it	gt
  4032fa:	4605      	movgt	r5, r0
  4032fc:	bfc8      	it	gt
  4032fe:	eef0 7a47 	vmovgt.f32	s15, s14
  403302:	3e01      	subs	r6, #1
  403304:	f104 0410 	add.w	r4, r4, #16
  403308:	f100 0004 	add.w	r0, r0, #4
  40330c:	d1c7      	bne.n	40329e <arm_min_f32+0x1e>
  40330e:	eb07 1709 	add.w	r7, r7, r9, lsl #4
  403312:	f01c 0c03 	ands.w	ip, ip, #3
  403316:	d01d      	beq.n	403354 <arm_min_f32+0xd4>
  403318:	ebcc 0101 	rsb	r1, ip, r1
  40331c:	2000      	movs	r0, #0
  40331e:	ecb7 7a01 	vldmia	r7!, {s14}
  403322:	eeb4 7ae7 	vcmpe.f32	s14, s15
  403326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40332a:	bf48      	it	mi
  40332c:	eef0 7a47 	vmovmi.f32	s15, s14
  403330:	eb01 0400 	add.w	r4, r1, r0
  403334:	f100 0001 	add.w	r0, r0, #1
  403338:	bf48      	it	mi
  40333a:	4625      	movmi	r5, r4
  40333c:	4560      	cmp	r0, ip
  40333e:	eeb0 7a67 	vmov.f32	s14, s15
  403342:	d1ec      	bne.n	40331e <arm_min_f32+0x9e>
  403344:	ed82 7a00 	vstr	s14, [r2]
  403348:	601d      	str	r5, [r3, #0]
  40334a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
  40334e:	4770      	bx	lr
  403350:	464d      	mov	r5, r9
  403352:	e7de      	b.n	403312 <arm_min_f32+0x92>
  403354:	eeb0 7a67 	vmov.f32	s14, s15
  403358:	e7f4      	b.n	403344 <arm_min_f32+0xc4>
  40335a:	bf00      	nop

0040335c <arm_max_f32>:
  40335c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  403360:	f101 3cff 	add.w	ip, r1, #4294967295
  403364:	ea5f 099c 	movs.w	r9, ip, lsr #2
  403368:	f100 0704 	add.w	r7, r0, #4
  40336c:	edd0 7a00 	vldr	s15, [r0]
  403370:	d05c      	beq.n	40342c <arm_max_f32+0xd0>
  403372:	463c      	mov	r4, r7
  403374:	464e      	mov	r6, r9
  403376:	2004      	movs	r0, #4
  403378:	2500      	movs	r5, #0
  40337a:	edd4 6a00 	vldr	s13, [r4]
  40337e:	eef4 6ae7 	vcmpe.f32	s13, s15
  403382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403386:	ed94 7a01 	vldr	s14, [r4, #4]
  40338a:	bfc8      	it	gt
  40338c:	eef0 7a66 	vmovgt.f32	s15, s13
  403390:	eef4 7ac7 	vcmpe.f32	s15, s14
  403394:	f1a0 0803 	sub.w	r8, r0, #3
  403398:	bfc8      	it	gt
  40339a:	4645      	movgt	r5, r8
  40339c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4033a0:	edd4 6a02 	vldr	s13, [r4, #8]
  4033a4:	bf48      	it	mi
  4033a6:	eef0 7a47 	vmovmi.f32	s15, s14
  4033aa:	eef4 7ae6 	vcmpe.f32	s15, s13
  4033ae:	f1a0 0802 	sub.w	r8, r0, #2
  4033b2:	bf48      	it	mi
  4033b4:	4645      	movmi	r5, r8
  4033b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4033ba:	ed94 7a03 	vldr	s14, [r4, #12]
  4033be:	bf48      	it	mi
  4033c0:	eef0 7a66 	vmovmi.f32	s15, s13
  4033c4:	eef4 7ac7 	vcmpe.f32	s15, s14
  4033c8:	f100 38ff 	add.w	r8, r0, #4294967295
  4033cc:	bf48      	it	mi
  4033ce:	4645      	movmi	r5, r8
  4033d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4033d4:	bf48      	it	mi
  4033d6:	4605      	movmi	r5, r0
  4033d8:	bf48      	it	mi
  4033da:	eef0 7a47 	vmovmi.f32	s15, s14
  4033de:	3e01      	subs	r6, #1
  4033e0:	f104 0410 	add.w	r4, r4, #16
  4033e4:	f100 0004 	add.w	r0, r0, #4
  4033e8:	d1c7      	bne.n	40337a <arm_max_f32+0x1e>
  4033ea:	eb07 1709 	add.w	r7, r7, r9, lsl #4
  4033ee:	f01c 0c03 	ands.w	ip, ip, #3
  4033f2:	d01d      	beq.n	403430 <arm_max_f32+0xd4>
  4033f4:	ebcc 0101 	rsb	r1, ip, r1
  4033f8:	2000      	movs	r0, #0
  4033fa:	ecb7 7a01 	vldmia	r7!, {s14}
  4033fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
  403402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403406:	bfc8      	it	gt
  403408:	eef0 7a47 	vmovgt.f32	s15, s14
  40340c:	eb01 0400 	add.w	r4, r1, r0
  403410:	f100 0001 	add.w	r0, r0, #1
  403414:	bfc8      	it	gt
  403416:	4625      	movgt	r5, r4
  403418:	4560      	cmp	r0, ip
  40341a:	eeb0 7a67 	vmov.f32	s14, s15
  40341e:	d1ec      	bne.n	4033fa <arm_max_f32+0x9e>
  403420:	ed82 7a00 	vstr	s14, [r2]
  403424:	601d      	str	r5, [r3, #0]
  403426:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
  40342a:	4770      	bx	lr
  40342c:	464d      	mov	r5, r9
  40342e:	e7de      	b.n	4033ee <arm_max_f32+0x92>
  403430:	eeb0 7a67 	vmov.f32	s14, s15
  403434:	e7f4      	b.n	403420 <arm_max_f32+0xc4>
  403436:	bf00      	nop

00403438 <arm_cos_f32>:
  403438:	eddf 7a1e 	vldr	s15, [pc, #120]	; 4034b4 <arm_cos_f32+0x7c>
  40343c:	ee06 0a90 	vmov	s13, r0
  403440:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
  403444:	ee66 7aa7 	vmul.f32	s15, s13, s15
  403448:	ee77 7a87 	vadd.f32	s15, s15, s14
  40344c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  403450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403454:	eebd 7ae7 	vcvt.s32.f32	s14, s15
  403458:	d504      	bpl.n	403464 <arm_cos_f32+0x2c>
  40345a:	ee17 3a10 	vmov	r3, s14
  40345e:	3b01      	subs	r3, #1
  403460:	ee07 3a10 	vmov	s14, r3
  403464:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  403468:	eddf 6a13 	vldr	s13, [pc, #76]	; 4034b8 <arm_cos_f32+0x80>
  40346c:	ee77 7ac7 	vsub.f32	s15, s15, s14
  403470:	ee67 7aa6 	vmul.f32	s15, s15, s13
  403474:	eefc 6ae7 	vcvt.u32.f32	s13, s15
  403478:	ee16 3a90 	vmov	r3, s13
  40347c:	f3c3 0308 	ubfx	r3, r3, #0, #9
  403480:	ee07 3a10 	vmov	s14, r3
  403484:	eef8 6a47 	vcvt.f32.u32	s13, s14
  403488:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  40348c:	ee77 7ae6 	vsub.f32	s15, s15, s13
  403490:	4a0a      	ldr	r2, [pc, #40]	; (4034bc <arm_cos_f32+0x84>)
  403492:	ee37 7a67 	vsub.f32	s14, s14, s15
  403496:	eb02 0183 	add.w	r1, r2, r3, lsl #2
  40349a:	ed91 6a00 	vldr	s12, [r1]
  40349e:	edd1 6a01 	vldr	s13, [r1, #4]
  4034a2:	ee27 7a06 	vmul.f32	s14, s14, s12
  4034a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
  4034aa:	ee77 7a27 	vadd.f32	s15, s14, s15
  4034ae:	ee17 0a90 	vmov	r0, s15
  4034b2:	4770      	bx	lr
  4034b4:	3e22f983 	.word	0x3e22f983
  4034b8:	44000000 	.word	0x44000000
  4034bc:	00406d78 	.word	0x00406d78

004034c0 <arm_scale_f32>:
  4034c0:	b470      	push	{r4, r5, r6}
  4034c2:	089e      	lsrs	r6, r3, #2
  4034c4:	ee07 1a90 	vmov	s15, r1
  4034c8:	d023      	beq.n	403512 <arm_scale_f32+0x52>
  4034ca:	4635      	mov	r5, r6
  4034cc:	4614      	mov	r4, r2
  4034ce:	4601      	mov	r1, r0
  4034d0:	edd1 5a00 	vldr	s11, [r1]
  4034d4:	ed91 6a01 	vldr	s12, [r1, #4]
  4034d8:	edd1 6a02 	vldr	s13, [r1, #8]
  4034dc:	ed91 7a03 	vldr	s14, [r1, #12]
  4034e0:	ee65 5aa7 	vmul.f32	s11, s11, s15
  4034e4:	ee26 6a27 	vmul.f32	s12, s12, s15
  4034e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
  4034ec:	ee27 7a27 	vmul.f32	s14, s14, s15
  4034f0:	3d01      	subs	r5, #1
  4034f2:	edc4 5a00 	vstr	s11, [r4]
  4034f6:	ed84 6a01 	vstr	s12, [r4, #4]
  4034fa:	edc4 6a02 	vstr	s13, [r4, #8]
  4034fe:	ed84 7a03 	vstr	s14, [r4, #12]
  403502:	f101 0110 	add.w	r1, r1, #16
  403506:	f104 0410 	add.w	r4, r4, #16
  40350a:	d1e1      	bne.n	4034d0 <arm_scale_f32+0x10>
  40350c:	0136      	lsls	r6, r6, #4
  40350e:	4430      	add	r0, r6
  403510:	4432      	add	r2, r6
  403512:	f013 0303 	ands.w	r3, r3, #3
  403516:	d007      	beq.n	403528 <arm_scale_f32+0x68>
  403518:	ecb0 7a01 	vldmia	r0!, {s14}
  40351c:	ee27 7a27 	vmul.f32	s14, s14, s15
  403520:	3b01      	subs	r3, #1
  403522:	eca2 7a01 	vstmia	r2!, {s14}
  403526:	d1f7      	bne.n	403518 <arm_scale_f32+0x58>
  403528:	bc70      	pop	{r4, r5, r6}
  40352a:	4770      	bx	lr

0040352c <__aeabi_drsub>:
  40352c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  403530:	e002      	b.n	403538 <__adddf3>
  403532:	bf00      	nop

00403534 <__aeabi_dsub>:
  403534:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00403538 <__adddf3>:
  403538:	b530      	push	{r4, r5, lr}
  40353a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40353e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  403542:	ea94 0f05 	teq	r4, r5
  403546:	bf08      	it	eq
  403548:	ea90 0f02 	teqeq	r0, r2
  40354c:	bf1f      	itttt	ne
  40354e:	ea54 0c00 	orrsne.w	ip, r4, r0
  403552:	ea55 0c02 	orrsne.w	ip, r5, r2
  403556:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40355a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40355e:	f000 80e2 	beq.w	403726 <__adddf3+0x1ee>
  403562:	ea4f 5454 	mov.w	r4, r4, lsr #21
  403566:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40356a:	bfb8      	it	lt
  40356c:	426d      	neglt	r5, r5
  40356e:	dd0c      	ble.n	40358a <__adddf3+0x52>
  403570:	442c      	add	r4, r5
  403572:	ea80 0202 	eor.w	r2, r0, r2
  403576:	ea81 0303 	eor.w	r3, r1, r3
  40357a:	ea82 0000 	eor.w	r0, r2, r0
  40357e:	ea83 0101 	eor.w	r1, r3, r1
  403582:	ea80 0202 	eor.w	r2, r0, r2
  403586:	ea81 0303 	eor.w	r3, r1, r3
  40358a:	2d36      	cmp	r5, #54	; 0x36
  40358c:	bf88      	it	hi
  40358e:	bd30      	pophi	{r4, r5, pc}
  403590:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  403594:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403598:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40359c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4035a0:	d002      	beq.n	4035a8 <__adddf3+0x70>
  4035a2:	4240      	negs	r0, r0
  4035a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4035a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4035ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4035b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4035b4:	d002      	beq.n	4035bc <__adddf3+0x84>
  4035b6:	4252      	negs	r2, r2
  4035b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4035bc:	ea94 0f05 	teq	r4, r5
  4035c0:	f000 80a7 	beq.w	403712 <__adddf3+0x1da>
  4035c4:	f1a4 0401 	sub.w	r4, r4, #1
  4035c8:	f1d5 0e20 	rsbs	lr, r5, #32
  4035cc:	db0d      	blt.n	4035ea <__adddf3+0xb2>
  4035ce:	fa02 fc0e 	lsl.w	ip, r2, lr
  4035d2:	fa22 f205 	lsr.w	r2, r2, r5
  4035d6:	1880      	adds	r0, r0, r2
  4035d8:	f141 0100 	adc.w	r1, r1, #0
  4035dc:	fa03 f20e 	lsl.w	r2, r3, lr
  4035e0:	1880      	adds	r0, r0, r2
  4035e2:	fa43 f305 	asr.w	r3, r3, r5
  4035e6:	4159      	adcs	r1, r3
  4035e8:	e00e      	b.n	403608 <__adddf3+0xd0>
  4035ea:	f1a5 0520 	sub.w	r5, r5, #32
  4035ee:	f10e 0e20 	add.w	lr, lr, #32
  4035f2:	2a01      	cmp	r2, #1
  4035f4:	fa03 fc0e 	lsl.w	ip, r3, lr
  4035f8:	bf28      	it	cs
  4035fa:	f04c 0c02 	orrcs.w	ip, ip, #2
  4035fe:	fa43 f305 	asr.w	r3, r3, r5
  403602:	18c0      	adds	r0, r0, r3
  403604:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  403608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40360c:	d507      	bpl.n	40361e <__adddf3+0xe6>
  40360e:	f04f 0e00 	mov.w	lr, #0
  403612:	f1dc 0c00 	rsbs	ip, ip, #0
  403616:	eb7e 0000 	sbcs.w	r0, lr, r0
  40361a:	eb6e 0101 	sbc.w	r1, lr, r1
  40361e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  403622:	d31b      	bcc.n	40365c <__adddf3+0x124>
  403624:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  403628:	d30c      	bcc.n	403644 <__adddf3+0x10c>
  40362a:	0849      	lsrs	r1, r1, #1
  40362c:	ea5f 0030 	movs.w	r0, r0, rrx
  403630:	ea4f 0c3c 	mov.w	ip, ip, rrx
  403634:	f104 0401 	add.w	r4, r4, #1
  403638:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40363c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  403640:	f080 809a 	bcs.w	403778 <__adddf3+0x240>
  403644:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  403648:	bf08      	it	eq
  40364a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40364e:	f150 0000 	adcs.w	r0, r0, #0
  403652:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403656:	ea41 0105 	orr.w	r1, r1, r5
  40365a:	bd30      	pop	{r4, r5, pc}
  40365c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  403660:	4140      	adcs	r0, r0
  403662:	eb41 0101 	adc.w	r1, r1, r1
  403666:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40366a:	f1a4 0401 	sub.w	r4, r4, #1
  40366e:	d1e9      	bne.n	403644 <__adddf3+0x10c>
  403670:	f091 0f00 	teq	r1, #0
  403674:	bf04      	itt	eq
  403676:	4601      	moveq	r1, r0
  403678:	2000      	moveq	r0, #0
  40367a:	fab1 f381 	clz	r3, r1
  40367e:	bf08      	it	eq
  403680:	3320      	addeq	r3, #32
  403682:	f1a3 030b 	sub.w	r3, r3, #11
  403686:	f1b3 0220 	subs.w	r2, r3, #32
  40368a:	da0c      	bge.n	4036a6 <__adddf3+0x16e>
  40368c:	320c      	adds	r2, #12
  40368e:	dd08      	ble.n	4036a2 <__adddf3+0x16a>
  403690:	f102 0c14 	add.w	ip, r2, #20
  403694:	f1c2 020c 	rsb	r2, r2, #12
  403698:	fa01 f00c 	lsl.w	r0, r1, ip
  40369c:	fa21 f102 	lsr.w	r1, r1, r2
  4036a0:	e00c      	b.n	4036bc <__adddf3+0x184>
  4036a2:	f102 0214 	add.w	r2, r2, #20
  4036a6:	bfd8      	it	le
  4036a8:	f1c2 0c20 	rsble	ip, r2, #32
  4036ac:	fa01 f102 	lsl.w	r1, r1, r2
  4036b0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4036b4:	bfdc      	itt	le
  4036b6:	ea41 010c 	orrle.w	r1, r1, ip
  4036ba:	4090      	lslle	r0, r2
  4036bc:	1ae4      	subs	r4, r4, r3
  4036be:	bfa2      	ittt	ge
  4036c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4036c4:	4329      	orrge	r1, r5
  4036c6:	bd30      	popge	{r4, r5, pc}
  4036c8:	ea6f 0404 	mvn.w	r4, r4
  4036cc:	3c1f      	subs	r4, #31
  4036ce:	da1c      	bge.n	40370a <__adddf3+0x1d2>
  4036d0:	340c      	adds	r4, #12
  4036d2:	dc0e      	bgt.n	4036f2 <__adddf3+0x1ba>
  4036d4:	f104 0414 	add.w	r4, r4, #20
  4036d8:	f1c4 0220 	rsb	r2, r4, #32
  4036dc:	fa20 f004 	lsr.w	r0, r0, r4
  4036e0:	fa01 f302 	lsl.w	r3, r1, r2
  4036e4:	ea40 0003 	orr.w	r0, r0, r3
  4036e8:	fa21 f304 	lsr.w	r3, r1, r4
  4036ec:	ea45 0103 	orr.w	r1, r5, r3
  4036f0:	bd30      	pop	{r4, r5, pc}
  4036f2:	f1c4 040c 	rsb	r4, r4, #12
  4036f6:	f1c4 0220 	rsb	r2, r4, #32
  4036fa:	fa20 f002 	lsr.w	r0, r0, r2
  4036fe:	fa01 f304 	lsl.w	r3, r1, r4
  403702:	ea40 0003 	orr.w	r0, r0, r3
  403706:	4629      	mov	r1, r5
  403708:	bd30      	pop	{r4, r5, pc}
  40370a:	fa21 f004 	lsr.w	r0, r1, r4
  40370e:	4629      	mov	r1, r5
  403710:	bd30      	pop	{r4, r5, pc}
  403712:	f094 0f00 	teq	r4, #0
  403716:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40371a:	bf06      	itte	eq
  40371c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  403720:	3401      	addeq	r4, #1
  403722:	3d01      	subne	r5, #1
  403724:	e74e      	b.n	4035c4 <__adddf3+0x8c>
  403726:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40372a:	bf18      	it	ne
  40372c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403730:	d029      	beq.n	403786 <__adddf3+0x24e>
  403732:	ea94 0f05 	teq	r4, r5
  403736:	bf08      	it	eq
  403738:	ea90 0f02 	teqeq	r0, r2
  40373c:	d005      	beq.n	40374a <__adddf3+0x212>
  40373e:	ea54 0c00 	orrs.w	ip, r4, r0
  403742:	bf04      	itt	eq
  403744:	4619      	moveq	r1, r3
  403746:	4610      	moveq	r0, r2
  403748:	bd30      	pop	{r4, r5, pc}
  40374a:	ea91 0f03 	teq	r1, r3
  40374e:	bf1e      	ittt	ne
  403750:	2100      	movne	r1, #0
  403752:	2000      	movne	r0, #0
  403754:	bd30      	popne	{r4, r5, pc}
  403756:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40375a:	d105      	bne.n	403768 <__adddf3+0x230>
  40375c:	0040      	lsls	r0, r0, #1
  40375e:	4149      	adcs	r1, r1
  403760:	bf28      	it	cs
  403762:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  403766:	bd30      	pop	{r4, r5, pc}
  403768:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40376c:	bf3c      	itt	cc
  40376e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  403772:	bd30      	popcc	{r4, r5, pc}
  403774:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403778:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40377c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403780:	f04f 0000 	mov.w	r0, #0
  403784:	bd30      	pop	{r4, r5, pc}
  403786:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40378a:	bf1a      	itte	ne
  40378c:	4619      	movne	r1, r3
  40378e:	4610      	movne	r0, r2
  403790:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  403794:	bf1c      	itt	ne
  403796:	460b      	movne	r3, r1
  403798:	4602      	movne	r2, r0
  40379a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40379e:	bf06      	itte	eq
  4037a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4037a4:	ea91 0f03 	teqeq	r1, r3
  4037a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4037ac:	bd30      	pop	{r4, r5, pc}
  4037ae:	bf00      	nop

004037b0 <__aeabi_ui2d>:
  4037b0:	f090 0f00 	teq	r0, #0
  4037b4:	bf04      	itt	eq
  4037b6:	2100      	moveq	r1, #0
  4037b8:	4770      	bxeq	lr
  4037ba:	b530      	push	{r4, r5, lr}
  4037bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4037c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4037c4:	f04f 0500 	mov.w	r5, #0
  4037c8:	f04f 0100 	mov.w	r1, #0
  4037cc:	e750      	b.n	403670 <__adddf3+0x138>
  4037ce:	bf00      	nop

004037d0 <__aeabi_i2d>:
  4037d0:	f090 0f00 	teq	r0, #0
  4037d4:	bf04      	itt	eq
  4037d6:	2100      	moveq	r1, #0
  4037d8:	4770      	bxeq	lr
  4037da:	b530      	push	{r4, r5, lr}
  4037dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4037e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4037e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4037e8:	bf48      	it	mi
  4037ea:	4240      	negmi	r0, r0
  4037ec:	f04f 0100 	mov.w	r1, #0
  4037f0:	e73e      	b.n	403670 <__adddf3+0x138>
  4037f2:	bf00      	nop

004037f4 <__aeabi_f2d>:
  4037f4:	0042      	lsls	r2, r0, #1
  4037f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4037fa:	ea4f 0131 	mov.w	r1, r1, rrx
  4037fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
  403802:	bf1f      	itttt	ne
  403804:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  403808:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40380c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  403810:	4770      	bxne	lr
  403812:	f092 0f00 	teq	r2, #0
  403816:	bf14      	ite	ne
  403818:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40381c:	4770      	bxeq	lr
  40381e:	b530      	push	{r4, r5, lr}
  403820:	f44f 7460 	mov.w	r4, #896	; 0x380
  403824:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403828:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40382c:	e720      	b.n	403670 <__adddf3+0x138>
  40382e:	bf00      	nop

00403830 <__aeabi_ul2d>:
  403830:	ea50 0201 	orrs.w	r2, r0, r1
  403834:	bf08      	it	eq
  403836:	4770      	bxeq	lr
  403838:	b530      	push	{r4, r5, lr}
  40383a:	f04f 0500 	mov.w	r5, #0
  40383e:	e00a      	b.n	403856 <__aeabi_l2d+0x16>

00403840 <__aeabi_l2d>:
  403840:	ea50 0201 	orrs.w	r2, r0, r1
  403844:	bf08      	it	eq
  403846:	4770      	bxeq	lr
  403848:	b530      	push	{r4, r5, lr}
  40384a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40384e:	d502      	bpl.n	403856 <__aeabi_l2d+0x16>
  403850:	4240      	negs	r0, r0
  403852:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403856:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40385a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40385e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  403862:	f43f aedc 	beq.w	40361e <__adddf3+0xe6>
  403866:	f04f 0203 	mov.w	r2, #3
  40386a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40386e:	bf18      	it	ne
  403870:	3203      	addne	r2, #3
  403872:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  403876:	bf18      	it	ne
  403878:	3203      	addne	r2, #3
  40387a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40387e:	f1c2 0320 	rsb	r3, r2, #32
  403882:	fa00 fc03 	lsl.w	ip, r0, r3
  403886:	fa20 f002 	lsr.w	r0, r0, r2
  40388a:	fa01 fe03 	lsl.w	lr, r1, r3
  40388e:	ea40 000e 	orr.w	r0, r0, lr
  403892:	fa21 f102 	lsr.w	r1, r1, r2
  403896:	4414      	add	r4, r2
  403898:	e6c1      	b.n	40361e <__adddf3+0xe6>
  40389a:	bf00      	nop

0040389c <__aeabi_dmul>:
  40389c:	b570      	push	{r4, r5, r6, lr}
  40389e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4038a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4038a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4038aa:	bf1d      	ittte	ne
  4038ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4038b0:	ea94 0f0c 	teqne	r4, ip
  4038b4:	ea95 0f0c 	teqne	r5, ip
  4038b8:	f000 f8de 	bleq	403a78 <__aeabi_dmul+0x1dc>
  4038bc:	442c      	add	r4, r5
  4038be:	ea81 0603 	eor.w	r6, r1, r3
  4038c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4038c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4038ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4038ce:	bf18      	it	ne
  4038d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4038d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4038d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4038dc:	d038      	beq.n	403950 <__aeabi_dmul+0xb4>
  4038de:	fba0 ce02 	umull	ip, lr, r0, r2
  4038e2:	f04f 0500 	mov.w	r5, #0
  4038e6:	fbe1 e502 	umlal	lr, r5, r1, r2
  4038ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4038ee:	fbe0 e503 	umlal	lr, r5, r0, r3
  4038f2:	f04f 0600 	mov.w	r6, #0
  4038f6:	fbe1 5603 	umlal	r5, r6, r1, r3
  4038fa:	f09c 0f00 	teq	ip, #0
  4038fe:	bf18      	it	ne
  403900:	f04e 0e01 	orrne.w	lr, lr, #1
  403904:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  403908:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40390c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  403910:	d204      	bcs.n	40391c <__aeabi_dmul+0x80>
  403912:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  403916:	416d      	adcs	r5, r5
  403918:	eb46 0606 	adc.w	r6, r6, r6
  40391c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  403920:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  403924:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  403928:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40392c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  403930:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403934:	bf88      	it	hi
  403936:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40393a:	d81e      	bhi.n	40397a <__aeabi_dmul+0xde>
  40393c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  403940:	bf08      	it	eq
  403942:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  403946:	f150 0000 	adcs.w	r0, r0, #0
  40394a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40394e:	bd70      	pop	{r4, r5, r6, pc}
  403950:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  403954:	ea46 0101 	orr.w	r1, r6, r1
  403958:	ea40 0002 	orr.w	r0, r0, r2
  40395c:	ea81 0103 	eor.w	r1, r1, r3
  403960:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  403964:	bfc2      	ittt	gt
  403966:	ebd4 050c 	rsbsgt	r5, r4, ip
  40396a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40396e:	bd70      	popgt	{r4, r5, r6, pc}
  403970:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403974:	f04f 0e00 	mov.w	lr, #0
  403978:	3c01      	subs	r4, #1
  40397a:	f300 80ab 	bgt.w	403ad4 <__aeabi_dmul+0x238>
  40397e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  403982:	bfde      	ittt	le
  403984:	2000      	movle	r0, #0
  403986:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40398a:	bd70      	pople	{r4, r5, r6, pc}
  40398c:	f1c4 0400 	rsb	r4, r4, #0
  403990:	3c20      	subs	r4, #32
  403992:	da35      	bge.n	403a00 <__aeabi_dmul+0x164>
  403994:	340c      	adds	r4, #12
  403996:	dc1b      	bgt.n	4039d0 <__aeabi_dmul+0x134>
  403998:	f104 0414 	add.w	r4, r4, #20
  40399c:	f1c4 0520 	rsb	r5, r4, #32
  4039a0:	fa00 f305 	lsl.w	r3, r0, r5
  4039a4:	fa20 f004 	lsr.w	r0, r0, r4
  4039a8:	fa01 f205 	lsl.w	r2, r1, r5
  4039ac:	ea40 0002 	orr.w	r0, r0, r2
  4039b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4039b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4039b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4039bc:	fa21 f604 	lsr.w	r6, r1, r4
  4039c0:	eb42 0106 	adc.w	r1, r2, r6
  4039c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4039c8:	bf08      	it	eq
  4039ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4039ce:	bd70      	pop	{r4, r5, r6, pc}
  4039d0:	f1c4 040c 	rsb	r4, r4, #12
  4039d4:	f1c4 0520 	rsb	r5, r4, #32
  4039d8:	fa00 f304 	lsl.w	r3, r0, r4
  4039dc:	fa20 f005 	lsr.w	r0, r0, r5
  4039e0:	fa01 f204 	lsl.w	r2, r1, r4
  4039e4:	ea40 0002 	orr.w	r0, r0, r2
  4039e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4039ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4039f0:	f141 0100 	adc.w	r1, r1, #0
  4039f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4039f8:	bf08      	it	eq
  4039fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4039fe:	bd70      	pop	{r4, r5, r6, pc}
  403a00:	f1c4 0520 	rsb	r5, r4, #32
  403a04:	fa00 f205 	lsl.w	r2, r0, r5
  403a08:	ea4e 0e02 	orr.w	lr, lr, r2
  403a0c:	fa20 f304 	lsr.w	r3, r0, r4
  403a10:	fa01 f205 	lsl.w	r2, r1, r5
  403a14:	ea43 0302 	orr.w	r3, r3, r2
  403a18:	fa21 f004 	lsr.w	r0, r1, r4
  403a1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403a20:	fa21 f204 	lsr.w	r2, r1, r4
  403a24:	ea20 0002 	bic.w	r0, r0, r2
  403a28:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  403a2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403a30:	bf08      	it	eq
  403a32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403a36:	bd70      	pop	{r4, r5, r6, pc}
  403a38:	f094 0f00 	teq	r4, #0
  403a3c:	d10f      	bne.n	403a5e <__aeabi_dmul+0x1c2>
  403a3e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  403a42:	0040      	lsls	r0, r0, #1
  403a44:	eb41 0101 	adc.w	r1, r1, r1
  403a48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403a4c:	bf08      	it	eq
  403a4e:	3c01      	subeq	r4, #1
  403a50:	d0f7      	beq.n	403a42 <__aeabi_dmul+0x1a6>
  403a52:	ea41 0106 	orr.w	r1, r1, r6
  403a56:	f095 0f00 	teq	r5, #0
  403a5a:	bf18      	it	ne
  403a5c:	4770      	bxne	lr
  403a5e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  403a62:	0052      	lsls	r2, r2, #1
  403a64:	eb43 0303 	adc.w	r3, r3, r3
  403a68:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  403a6c:	bf08      	it	eq
  403a6e:	3d01      	subeq	r5, #1
  403a70:	d0f7      	beq.n	403a62 <__aeabi_dmul+0x1c6>
  403a72:	ea43 0306 	orr.w	r3, r3, r6
  403a76:	4770      	bx	lr
  403a78:	ea94 0f0c 	teq	r4, ip
  403a7c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403a80:	bf18      	it	ne
  403a82:	ea95 0f0c 	teqne	r5, ip
  403a86:	d00c      	beq.n	403aa2 <__aeabi_dmul+0x206>
  403a88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403a8c:	bf18      	it	ne
  403a8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403a92:	d1d1      	bne.n	403a38 <__aeabi_dmul+0x19c>
  403a94:	ea81 0103 	eor.w	r1, r1, r3
  403a98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403a9c:	f04f 0000 	mov.w	r0, #0
  403aa0:	bd70      	pop	{r4, r5, r6, pc}
  403aa2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403aa6:	bf06      	itte	eq
  403aa8:	4610      	moveq	r0, r2
  403aaa:	4619      	moveq	r1, r3
  403aac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403ab0:	d019      	beq.n	403ae6 <__aeabi_dmul+0x24a>
  403ab2:	ea94 0f0c 	teq	r4, ip
  403ab6:	d102      	bne.n	403abe <__aeabi_dmul+0x222>
  403ab8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  403abc:	d113      	bne.n	403ae6 <__aeabi_dmul+0x24a>
  403abe:	ea95 0f0c 	teq	r5, ip
  403ac2:	d105      	bne.n	403ad0 <__aeabi_dmul+0x234>
  403ac4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  403ac8:	bf1c      	itt	ne
  403aca:	4610      	movne	r0, r2
  403acc:	4619      	movne	r1, r3
  403ace:	d10a      	bne.n	403ae6 <__aeabi_dmul+0x24a>
  403ad0:	ea81 0103 	eor.w	r1, r1, r3
  403ad4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403ad8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403adc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403ae0:	f04f 0000 	mov.w	r0, #0
  403ae4:	bd70      	pop	{r4, r5, r6, pc}
  403ae6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403aea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  403aee:	bd70      	pop	{r4, r5, r6, pc}

00403af0 <__aeabi_ddiv>:
  403af0:	b570      	push	{r4, r5, r6, lr}
  403af2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403af6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  403afa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  403afe:	bf1d      	ittte	ne
  403b00:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403b04:	ea94 0f0c 	teqne	r4, ip
  403b08:	ea95 0f0c 	teqne	r5, ip
  403b0c:	f000 f8a7 	bleq	403c5e <__aeabi_ddiv+0x16e>
  403b10:	eba4 0405 	sub.w	r4, r4, r5
  403b14:	ea81 0e03 	eor.w	lr, r1, r3
  403b18:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403b1c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403b20:	f000 8088 	beq.w	403c34 <__aeabi_ddiv+0x144>
  403b24:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403b28:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  403b2c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  403b30:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  403b34:	ea4f 2202 	mov.w	r2, r2, lsl #8
  403b38:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  403b3c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  403b40:	ea4f 2600 	mov.w	r6, r0, lsl #8
  403b44:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  403b48:	429d      	cmp	r5, r3
  403b4a:	bf08      	it	eq
  403b4c:	4296      	cmpeq	r6, r2
  403b4e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  403b52:	f504 7440 	add.w	r4, r4, #768	; 0x300
  403b56:	d202      	bcs.n	403b5e <__aeabi_ddiv+0x6e>
  403b58:	085b      	lsrs	r3, r3, #1
  403b5a:	ea4f 0232 	mov.w	r2, r2, rrx
  403b5e:	1ab6      	subs	r6, r6, r2
  403b60:	eb65 0503 	sbc.w	r5, r5, r3
  403b64:	085b      	lsrs	r3, r3, #1
  403b66:	ea4f 0232 	mov.w	r2, r2, rrx
  403b6a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  403b6e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  403b72:	ebb6 0e02 	subs.w	lr, r6, r2
  403b76:	eb75 0e03 	sbcs.w	lr, r5, r3
  403b7a:	bf22      	ittt	cs
  403b7c:	1ab6      	subcs	r6, r6, r2
  403b7e:	4675      	movcs	r5, lr
  403b80:	ea40 000c 	orrcs.w	r0, r0, ip
  403b84:	085b      	lsrs	r3, r3, #1
  403b86:	ea4f 0232 	mov.w	r2, r2, rrx
  403b8a:	ebb6 0e02 	subs.w	lr, r6, r2
  403b8e:	eb75 0e03 	sbcs.w	lr, r5, r3
  403b92:	bf22      	ittt	cs
  403b94:	1ab6      	subcs	r6, r6, r2
  403b96:	4675      	movcs	r5, lr
  403b98:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  403b9c:	085b      	lsrs	r3, r3, #1
  403b9e:	ea4f 0232 	mov.w	r2, r2, rrx
  403ba2:	ebb6 0e02 	subs.w	lr, r6, r2
  403ba6:	eb75 0e03 	sbcs.w	lr, r5, r3
  403baa:	bf22      	ittt	cs
  403bac:	1ab6      	subcs	r6, r6, r2
  403bae:	4675      	movcs	r5, lr
  403bb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  403bb4:	085b      	lsrs	r3, r3, #1
  403bb6:	ea4f 0232 	mov.w	r2, r2, rrx
  403bba:	ebb6 0e02 	subs.w	lr, r6, r2
  403bbe:	eb75 0e03 	sbcs.w	lr, r5, r3
  403bc2:	bf22      	ittt	cs
  403bc4:	1ab6      	subcs	r6, r6, r2
  403bc6:	4675      	movcs	r5, lr
  403bc8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  403bcc:	ea55 0e06 	orrs.w	lr, r5, r6
  403bd0:	d018      	beq.n	403c04 <__aeabi_ddiv+0x114>
  403bd2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  403bd6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  403bda:	ea4f 1606 	mov.w	r6, r6, lsl #4
  403bde:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  403be2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  403be6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  403bea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  403bee:	d1c0      	bne.n	403b72 <__aeabi_ddiv+0x82>
  403bf0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403bf4:	d10b      	bne.n	403c0e <__aeabi_ddiv+0x11e>
  403bf6:	ea41 0100 	orr.w	r1, r1, r0
  403bfa:	f04f 0000 	mov.w	r0, #0
  403bfe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  403c02:	e7b6      	b.n	403b72 <__aeabi_ddiv+0x82>
  403c04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403c08:	bf04      	itt	eq
  403c0a:	4301      	orreq	r1, r0
  403c0c:	2000      	moveq	r0, #0
  403c0e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403c12:	bf88      	it	hi
  403c14:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403c18:	f63f aeaf 	bhi.w	40397a <__aeabi_dmul+0xde>
  403c1c:	ebb5 0c03 	subs.w	ip, r5, r3
  403c20:	bf04      	itt	eq
  403c22:	ebb6 0c02 	subseq.w	ip, r6, r2
  403c26:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403c2a:	f150 0000 	adcs.w	r0, r0, #0
  403c2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403c32:	bd70      	pop	{r4, r5, r6, pc}
  403c34:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  403c38:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  403c3c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  403c40:	bfc2      	ittt	gt
  403c42:	ebd4 050c 	rsbsgt	r5, r4, ip
  403c46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403c4a:	bd70      	popgt	{r4, r5, r6, pc}
  403c4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403c50:	f04f 0e00 	mov.w	lr, #0
  403c54:	3c01      	subs	r4, #1
  403c56:	e690      	b.n	40397a <__aeabi_dmul+0xde>
  403c58:	ea45 0e06 	orr.w	lr, r5, r6
  403c5c:	e68d      	b.n	40397a <__aeabi_dmul+0xde>
  403c5e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403c62:	ea94 0f0c 	teq	r4, ip
  403c66:	bf08      	it	eq
  403c68:	ea95 0f0c 	teqeq	r5, ip
  403c6c:	f43f af3b 	beq.w	403ae6 <__aeabi_dmul+0x24a>
  403c70:	ea94 0f0c 	teq	r4, ip
  403c74:	d10a      	bne.n	403c8c <__aeabi_ddiv+0x19c>
  403c76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  403c7a:	f47f af34 	bne.w	403ae6 <__aeabi_dmul+0x24a>
  403c7e:	ea95 0f0c 	teq	r5, ip
  403c82:	f47f af25 	bne.w	403ad0 <__aeabi_dmul+0x234>
  403c86:	4610      	mov	r0, r2
  403c88:	4619      	mov	r1, r3
  403c8a:	e72c      	b.n	403ae6 <__aeabi_dmul+0x24a>
  403c8c:	ea95 0f0c 	teq	r5, ip
  403c90:	d106      	bne.n	403ca0 <__aeabi_ddiv+0x1b0>
  403c92:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403c96:	f43f aefd 	beq.w	403a94 <__aeabi_dmul+0x1f8>
  403c9a:	4610      	mov	r0, r2
  403c9c:	4619      	mov	r1, r3
  403c9e:	e722      	b.n	403ae6 <__aeabi_dmul+0x24a>
  403ca0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403ca4:	bf18      	it	ne
  403ca6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403caa:	f47f aec5 	bne.w	403a38 <__aeabi_dmul+0x19c>
  403cae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  403cb2:	f47f af0d 	bne.w	403ad0 <__aeabi_dmul+0x234>
  403cb6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  403cba:	f47f aeeb 	bne.w	403a94 <__aeabi_dmul+0x1f8>
  403cbe:	e712      	b.n	403ae6 <__aeabi_dmul+0x24a>

00403cc0 <__aeabi_d2f>:
  403cc0:	ea4f 0241 	mov.w	r2, r1, lsl #1
  403cc4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  403cc8:	bf24      	itt	cs
  403cca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  403cce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  403cd2:	d90d      	bls.n	403cf0 <__aeabi_d2f+0x30>
  403cd4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  403cd8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  403cdc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  403ce0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  403ce4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  403ce8:	bf08      	it	eq
  403cea:	f020 0001 	biceq.w	r0, r0, #1
  403cee:	4770      	bx	lr
  403cf0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  403cf4:	d121      	bne.n	403d3a <__aeabi_d2f+0x7a>
  403cf6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  403cfa:	bfbc      	itt	lt
  403cfc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  403d00:	4770      	bxlt	lr
  403d02:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403d06:	ea4f 5252 	mov.w	r2, r2, lsr #21
  403d0a:	f1c2 0218 	rsb	r2, r2, #24
  403d0e:	f1c2 0c20 	rsb	ip, r2, #32
  403d12:	fa10 f30c 	lsls.w	r3, r0, ip
  403d16:	fa20 f002 	lsr.w	r0, r0, r2
  403d1a:	bf18      	it	ne
  403d1c:	f040 0001 	orrne.w	r0, r0, #1
  403d20:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  403d24:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  403d28:	fa03 fc0c 	lsl.w	ip, r3, ip
  403d2c:	ea40 000c 	orr.w	r0, r0, ip
  403d30:	fa23 f302 	lsr.w	r3, r3, r2
  403d34:	ea4f 0343 	mov.w	r3, r3, lsl #1
  403d38:	e7cc      	b.n	403cd4 <__aeabi_d2f+0x14>
  403d3a:	ea7f 5362 	mvns.w	r3, r2, asr #21
  403d3e:	d107      	bne.n	403d50 <__aeabi_d2f+0x90>
  403d40:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  403d44:	bf1e      	ittt	ne
  403d46:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  403d4a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  403d4e:	4770      	bxne	lr
  403d50:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  403d54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  403d58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  403d5c:	4770      	bx	lr
  403d5e:	bf00      	nop

00403d60 <__libc_init_array>:
  403d60:	b570      	push	{r4, r5, r6, lr}
  403d62:	4e0f      	ldr	r6, [pc, #60]	; (403da0 <__libc_init_array+0x40>)
  403d64:	4d0f      	ldr	r5, [pc, #60]	; (403da4 <__libc_init_array+0x44>)
  403d66:	1b76      	subs	r6, r6, r5
  403d68:	10b6      	asrs	r6, r6, #2
  403d6a:	bf18      	it	ne
  403d6c:	2400      	movne	r4, #0
  403d6e:	d005      	beq.n	403d7c <__libc_init_array+0x1c>
  403d70:	3401      	adds	r4, #1
  403d72:	f855 3b04 	ldr.w	r3, [r5], #4
  403d76:	4798      	blx	r3
  403d78:	42a6      	cmp	r6, r4
  403d7a:	d1f9      	bne.n	403d70 <__libc_init_array+0x10>
  403d7c:	4e0a      	ldr	r6, [pc, #40]	; (403da8 <__libc_init_array+0x48>)
  403d7e:	4d0b      	ldr	r5, [pc, #44]	; (403dac <__libc_init_array+0x4c>)
  403d80:	1b76      	subs	r6, r6, r5
  403d82:	f003 fcaf 	bl	4076e4 <_init>
  403d86:	10b6      	asrs	r6, r6, #2
  403d88:	bf18      	it	ne
  403d8a:	2400      	movne	r4, #0
  403d8c:	d006      	beq.n	403d9c <__libc_init_array+0x3c>
  403d8e:	3401      	adds	r4, #1
  403d90:	f855 3b04 	ldr.w	r3, [r5], #4
  403d94:	4798      	blx	r3
  403d96:	42a6      	cmp	r6, r4
  403d98:	d1f9      	bne.n	403d8e <__libc_init_array+0x2e>
  403d9a:	bd70      	pop	{r4, r5, r6, pc}
  403d9c:	bd70      	pop	{r4, r5, r6, pc}
  403d9e:	bf00      	nop
  403da0:	004076f0 	.word	0x004076f0
  403da4:	004076f0 	.word	0x004076f0
  403da8:	004076f8 	.word	0x004076f8
  403dac:	004076f0 	.word	0x004076f0

00403db0 <iprintf>:
  403db0:	b40f      	push	{r0, r1, r2, r3}
  403db2:	b500      	push	{lr}
  403db4:	4907      	ldr	r1, [pc, #28]	; (403dd4 <iprintf+0x24>)
  403db6:	b083      	sub	sp, #12
  403db8:	ab04      	add	r3, sp, #16
  403dba:	6808      	ldr	r0, [r1, #0]
  403dbc:	f853 2b04 	ldr.w	r2, [r3], #4
  403dc0:	6881      	ldr	r1, [r0, #8]
  403dc2:	9301      	str	r3, [sp, #4]
  403dc4:	f000 fc06 	bl	4045d4 <_vfiprintf_r>
  403dc8:	b003      	add	sp, #12
  403dca:	f85d eb04 	ldr.w	lr, [sp], #4
  403dce:	b004      	add	sp, #16
  403dd0:	4770      	bx	lr
  403dd2:	bf00      	nop
  403dd4:	20400054 	.word	0x20400054

00403dd8 <malloc>:
  403dd8:	4b02      	ldr	r3, [pc, #8]	; (403de4 <malloc+0xc>)
  403dda:	4601      	mov	r1, r0
  403ddc:	6818      	ldr	r0, [r3, #0]
  403dde:	f000 b803 	b.w	403de8 <_malloc_r>
  403de2:	bf00      	nop
  403de4:	20400054 	.word	0x20400054

00403de8 <_malloc_r>:
  403de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403dec:	f101 060b 	add.w	r6, r1, #11
  403df0:	2e16      	cmp	r6, #22
  403df2:	b083      	sub	sp, #12
  403df4:	4605      	mov	r5, r0
  403df6:	f240 809e 	bls.w	403f36 <_malloc_r+0x14e>
  403dfa:	f036 0607 	bics.w	r6, r6, #7
  403dfe:	f100 80bd 	bmi.w	403f7c <_malloc_r+0x194>
  403e02:	42b1      	cmp	r1, r6
  403e04:	f200 80ba 	bhi.w	403f7c <_malloc_r+0x194>
  403e08:	f000 fb86 	bl	404518 <__malloc_lock>
  403e0c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403e10:	f0c0 8293 	bcc.w	40433a <_malloc_r+0x552>
  403e14:	0a73      	lsrs	r3, r6, #9
  403e16:	f000 80b8 	beq.w	403f8a <_malloc_r+0x1a2>
  403e1a:	2b04      	cmp	r3, #4
  403e1c:	f200 8179 	bhi.w	404112 <_malloc_r+0x32a>
  403e20:	09b3      	lsrs	r3, r6, #6
  403e22:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403e26:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403e2a:	00c3      	lsls	r3, r0, #3
  403e2c:	4fbf      	ldr	r7, [pc, #764]	; (40412c <_malloc_r+0x344>)
  403e2e:	443b      	add	r3, r7
  403e30:	f1a3 0108 	sub.w	r1, r3, #8
  403e34:	685c      	ldr	r4, [r3, #4]
  403e36:	42a1      	cmp	r1, r4
  403e38:	d106      	bne.n	403e48 <_malloc_r+0x60>
  403e3a:	e00c      	b.n	403e56 <_malloc_r+0x6e>
  403e3c:	2a00      	cmp	r2, #0
  403e3e:	f280 80aa 	bge.w	403f96 <_malloc_r+0x1ae>
  403e42:	68e4      	ldr	r4, [r4, #12]
  403e44:	42a1      	cmp	r1, r4
  403e46:	d006      	beq.n	403e56 <_malloc_r+0x6e>
  403e48:	6863      	ldr	r3, [r4, #4]
  403e4a:	f023 0303 	bic.w	r3, r3, #3
  403e4e:	1b9a      	subs	r2, r3, r6
  403e50:	2a0f      	cmp	r2, #15
  403e52:	ddf3      	ble.n	403e3c <_malloc_r+0x54>
  403e54:	4670      	mov	r0, lr
  403e56:	693c      	ldr	r4, [r7, #16]
  403e58:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 404140 <_malloc_r+0x358>
  403e5c:	4574      	cmp	r4, lr
  403e5e:	f000 81ab 	beq.w	4041b8 <_malloc_r+0x3d0>
  403e62:	6863      	ldr	r3, [r4, #4]
  403e64:	f023 0303 	bic.w	r3, r3, #3
  403e68:	1b9a      	subs	r2, r3, r6
  403e6a:	2a0f      	cmp	r2, #15
  403e6c:	f300 8190 	bgt.w	404190 <_malloc_r+0x3a8>
  403e70:	2a00      	cmp	r2, #0
  403e72:	f8c7 e014 	str.w	lr, [r7, #20]
  403e76:	f8c7 e010 	str.w	lr, [r7, #16]
  403e7a:	f280 809d 	bge.w	403fb8 <_malloc_r+0x1d0>
  403e7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403e82:	f080 8161 	bcs.w	404148 <_malloc_r+0x360>
  403e86:	08db      	lsrs	r3, r3, #3
  403e88:	f103 0c01 	add.w	ip, r3, #1
  403e8c:	1099      	asrs	r1, r3, #2
  403e8e:	687a      	ldr	r2, [r7, #4]
  403e90:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403e94:	f8c4 8008 	str.w	r8, [r4, #8]
  403e98:	2301      	movs	r3, #1
  403e9a:	408b      	lsls	r3, r1
  403e9c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403ea0:	4313      	orrs	r3, r2
  403ea2:	3908      	subs	r1, #8
  403ea4:	60e1      	str	r1, [r4, #12]
  403ea6:	607b      	str	r3, [r7, #4]
  403ea8:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403eac:	f8c8 400c 	str.w	r4, [r8, #12]
  403eb0:	1082      	asrs	r2, r0, #2
  403eb2:	2401      	movs	r4, #1
  403eb4:	4094      	lsls	r4, r2
  403eb6:	429c      	cmp	r4, r3
  403eb8:	f200 808b 	bhi.w	403fd2 <_malloc_r+0x1ea>
  403ebc:	421c      	tst	r4, r3
  403ebe:	d106      	bne.n	403ece <_malloc_r+0xe6>
  403ec0:	f020 0003 	bic.w	r0, r0, #3
  403ec4:	0064      	lsls	r4, r4, #1
  403ec6:	421c      	tst	r4, r3
  403ec8:	f100 0004 	add.w	r0, r0, #4
  403ecc:	d0fa      	beq.n	403ec4 <_malloc_r+0xdc>
  403ece:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403ed2:	46cc      	mov	ip, r9
  403ed4:	4680      	mov	r8, r0
  403ed6:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403eda:	459c      	cmp	ip, r3
  403edc:	d107      	bne.n	403eee <_malloc_r+0x106>
  403ede:	e16d      	b.n	4041bc <_malloc_r+0x3d4>
  403ee0:	2a00      	cmp	r2, #0
  403ee2:	f280 817b 	bge.w	4041dc <_malloc_r+0x3f4>
  403ee6:	68db      	ldr	r3, [r3, #12]
  403ee8:	459c      	cmp	ip, r3
  403eea:	f000 8167 	beq.w	4041bc <_malloc_r+0x3d4>
  403eee:	6859      	ldr	r1, [r3, #4]
  403ef0:	f021 0103 	bic.w	r1, r1, #3
  403ef4:	1b8a      	subs	r2, r1, r6
  403ef6:	2a0f      	cmp	r2, #15
  403ef8:	ddf2      	ble.n	403ee0 <_malloc_r+0xf8>
  403efa:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403efe:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403f02:	9300      	str	r3, [sp, #0]
  403f04:	199c      	adds	r4, r3, r6
  403f06:	4628      	mov	r0, r5
  403f08:	f046 0601 	orr.w	r6, r6, #1
  403f0c:	f042 0501 	orr.w	r5, r2, #1
  403f10:	605e      	str	r6, [r3, #4]
  403f12:	f8c8 c00c 	str.w	ip, [r8, #12]
  403f16:	f8cc 8008 	str.w	r8, [ip, #8]
  403f1a:	617c      	str	r4, [r7, #20]
  403f1c:	613c      	str	r4, [r7, #16]
  403f1e:	f8c4 e00c 	str.w	lr, [r4, #12]
  403f22:	f8c4 e008 	str.w	lr, [r4, #8]
  403f26:	6065      	str	r5, [r4, #4]
  403f28:	505a      	str	r2, [r3, r1]
  403f2a:	f000 fafb 	bl	404524 <__malloc_unlock>
  403f2e:	9b00      	ldr	r3, [sp, #0]
  403f30:	f103 0408 	add.w	r4, r3, #8
  403f34:	e01e      	b.n	403f74 <_malloc_r+0x18c>
  403f36:	2910      	cmp	r1, #16
  403f38:	d820      	bhi.n	403f7c <_malloc_r+0x194>
  403f3a:	f000 faed 	bl	404518 <__malloc_lock>
  403f3e:	2610      	movs	r6, #16
  403f40:	2318      	movs	r3, #24
  403f42:	2002      	movs	r0, #2
  403f44:	4f79      	ldr	r7, [pc, #484]	; (40412c <_malloc_r+0x344>)
  403f46:	443b      	add	r3, r7
  403f48:	f1a3 0208 	sub.w	r2, r3, #8
  403f4c:	685c      	ldr	r4, [r3, #4]
  403f4e:	4294      	cmp	r4, r2
  403f50:	f000 813d 	beq.w	4041ce <_malloc_r+0x3e6>
  403f54:	6863      	ldr	r3, [r4, #4]
  403f56:	68e1      	ldr	r1, [r4, #12]
  403f58:	68a6      	ldr	r6, [r4, #8]
  403f5a:	f023 0303 	bic.w	r3, r3, #3
  403f5e:	4423      	add	r3, r4
  403f60:	4628      	mov	r0, r5
  403f62:	685a      	ldr	r2, [r3, #4]
  403f64:	60f1      	str	r1, [r6, #12]
  403f66:	f042 0201 	orr.w	r2, r2, #1
  403f6a:	608e      	str	r6, [r1, #8]
  403f6c:	605a      	str	r2, [r3, #4]
  403f6e:	f000 fad9 	bl	404524 <__malloc_unlock>
  403f72:	3408      	adds	r4, #8
  403f74:	4620      	mov	r0, r4
  403f76:	b003      	add	sp, #12
  403f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f7c:	2400      	movs	r4, #0
  403f7e:	230c      	movs	r3, #12
  403f80:	4620      	mov	r0, r4
  403f82:	602b      	str	r3, [r5, #0]
  403f84:	b003      	add	sp, #12
  403f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f8a:	2040      	movs	r0, #64	; 0x40
  403f8c:	f44f 7300 	mov.w	r3, #512	; 0x200
  403f90:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403f94:	e74a      	b.n	403e2c <_malloc_r+0x44>
  403f96:	4423      	add	r3, r4
  403f98:	68e1      	ldr	r1, [r4, #12]
  403f9a:	685a      	ldr	r2, [r3, #4]
  403f9c:	68a6      	ldr	r6, [r4, #8]
  403f9e:	f042 0201 	orr.w	r2, r2, #1
  403fa2:	60f1      	str	r1, [r6, #12]
  403fa4:	4628      	mov	r0, r5
  403fa6:	608e      	str	r6, [r1, #8]
  403fa8:	605a      	str	r2, [r3, #4]
  403faa:	f000 fabb 	bl	404524 <__malloc_unlock>
  403fae:	3408      	adds	r4, #8
  403fb0:	4620      	mov	r0, r4
  403fb2:	b003      	add	sp, #12
  403fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403fb8:	4423      	add	r3, r4
  403fba:	4628      	mov	r0, r5
  403fbc:	685a      	ldr	r2, [r3, #4]
  403fbe:	f042 0201 	orr.w	r2, r2, #1
  403fc2:	605a      	str	r2, [r3, #4]
  403fc4:	f000 faae 	bl	404524 <__malloc_unlock>
  403fc8:	3408      	adds	r4, #8
  403fca:	4620      	mov	r0, r4
  403fcc:	b003      	add	sp, #12
  403fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403fd2:	68bc      	ldr	r4, [r7, #8]
  403fd4:	6863      	ldr	r3, [r4, #4]
  403fd6:	f023 0803 	bic.w	r8, r3, #3
  403fda:	45b0      	cmp	r8, r6
  403fdc:	d304      	bcc.n	403fe8 <_malloc_r+0x200>
  403fde:	eba8 0306 	sub.w	r3, r8, r6
  403fe2:	2b0f      	cmp	r3, #15
  403fe4:	f300 8085 	bgt.w	4040f2 <_malloc_r+0x30a>
  403fe8:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404144 <_malloc_r+0x35c>
  403fec:	4b50      	ldr	r3, [pc, #320]	; (404130 <_malloc_r+0x348>)
  403fee:	f8d9 2000 	ldr.w	r2, [r9]
  403ff2:	681b      	ldr	r3, [r3, #0]
  403ff4:	3201      	adds	r2, #1
  403ff6:	4433      	add	r3, r6
  403ff8:	eb04 0a08 	add.w	sl, r4, r8
  403ffc:	f000 8155 	beq.w	4042aa <_malloc_r+0x4c2>
  404000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  404004:	330f      	adds	r3, #15
  404006:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40400a:	f02b 0b0f 	bic.w	fp, fp, #15
  40400e:	4659      	mov	r1, fp
  404010:	4628      	mov	r0, r5
  404012:	f000 fa8d 	bl	404530 <_sbrk_r>
  404016:	1c41      	adds	r1, r0, #1
  404018:	4602      	mov	r2, r0
  40401a:	f000 80fc 	beq.w	404216 <_malloc_r+0x42e>
  40401e:	4582      	cmp	sl, r0
  404020:	f200 80f7 	bhi.w	404212 <_malloc_r+0x42a>
  404024:	4b43      	ldr	r3, [pc, #268]	; (404134 <_malloc_r+0x34c>)
  404026:	6819      	ldr	r1, [r3, #0]
  404028:	4459      	add	r1, fp
  40402a:	6019      	str	r1, [r3, #0]
  40402c:	f000 814d 	beq.w	4042ca <_malloc_r+0x4e2>
  404030:	f8d9 0000 	ldr.w	r0, [r9]
  404034:	3001      	adds	r0, #1
  404036:	bf1b      	ittet	ne
  404038:	eba2 0a0a 	subne.w	sl, r2, sl
  40403c:	4451      	addne	r1, sl
  40403e:	f8c9 2000 	streq.w	r2, [r9]
  404042:	6019      	strne	r1, [r3, #0]
  404044:	f012 0107 	ands.w	r1, r2, #7
  404048:	f000 8115 	beq.w	404276 <_malloc_r+0x48e>
  40404c:	f1c1 0008 	rsb	r0, r1, #8
  404050:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404054:	4402      	add	r2, r0
  404056:	3108      	adds	r1, #8
  404058:	eb02 090b 	add.w	r9, r2, fp
  40405c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  404060:	eba1 0909 	sub.w	r9, r1, r9
  404064:	4649      	mov	r1, r9
  404066:	4628      	mov	r0, r5
  404068:	9301      	str	r3, [sp, #4]
  40406a:	9200      	str	r2, [sp, #0]
  40406c:	f000 fa60 	bl	404530 <_sbrk_r>
  404070:	1c43      	adds	r3, r0, #1
  404072:	e89d 000c 	ldmia.w	sp, {r2, r3}
  404076:	f000 8143 	beq.w	404300 <_malloc_r+0x518>
  40407a:	1a80      	subs	r0, r0, r2
  40407c:	4448      	add	r0, r9
  40407e:	f040 0001 	orr.w	r0, r0, #1
  404082:	6819      	ldr	r1, [r3, #0]
  404084:	60ba      	str	r2, [r7, #8]
  404086:	4449      	add	r1, r9
  404088:	42bc      	cmp	r4, r7
  40408a:	6050      	str	r0, [r2, #4]
  40408c:	6019      	str	r1, [r3, #0]
  40408e:	d017      	beq.n	4040c0 <_malloc_r+0x2d8>
  404090:	f1b8 0f0f 	cmp.w	r8, #15
  404094:	f240 80fb 	bls.w	40428e <_malloc_r+0x4a6>
  404098:	6860      	ldr	r0, [r4, #4]
  40409a:	f1a8 020c 	sub.w	r2, r8, #12
  40409e:	f022 0207 	bic.w	r2, r2, #7
  4040a2:	eb04 0e02 	add.w	lr, r4, r2
  4040a6:	f000 0001 	and.w	r0, r0, #1
  4040aa:	f04f 0c05 	mov.w	ip, #5
  4040ae:	4310      	orrs	r0, r2
  4040b0:	2a0f      	cmp	r2, #15
  4040b2:	6060      	str	r0, [r4, #4]
  4040b4:	f8ce c004 	str.w	ip, [lr, #4]
  4040b8:	f8ce c008 	str.w	ip, [lr, #8]
  4040bc:	f200 8117 	bhi.w	4042ee <_malloc_r+0x506>
  4040c0:	4b1d      	ldr	r3, [pc, #116]	; (404138 <_malloc_r+0x350>)
  4040c2:	68bc      	ldr	r4, [r7, #8]
  4040c4:	681a      	ldr	r2, [r3, #0]
  4040c6:	4291      	cmp	r1, r2
  4040c8:	bf88      	it	hi
  4040ca:	6019      	strhi	r1, [r3, #0]
  4040cc:	4b1b      	ldr	r3, [pc, #108]	; (40413c <_malloc_r+0x354>)
  4040ce:	681a      	ldr	r2, [r3, #0]
  4040d0:	4291      	cmp	r1, r2
  4040d2:	6862      	ldr	r2, [r4, #4]
  4040d4:	bf88      	it	hi
  4040d6:	6019      	strhi	r1, [r3, #0]
  4040d8:	f022 0203 	bic.w	r2, r2, #3
  4040dc:	4296      	cmp	r6, r2
  4040de:	eba2 0306 	sub.w	r3, r2, r6
  4040e2:	d801      	bhi.n	4040e8 <_malloc_r+0x300>
  4040e4:	2b0f      	cmp	r3, #15
  4040e6:	dc04      	bgt.n	4040f2 <_malloc_r+0x30a>
  4040e8:	4628      	mov	r0, r5
  4040ea:	f000 fa1b 	bl	404524 <__malloc_unlock>
  4040ee:	2400      	movs	r4, #0
  4040f0:	e740      	b.n	403f74 <_malloc_r+0x18c>
  4040f2:	19a2      	adds	r2, r4, r6
  4040f4:	f043 0301 	orr.w	r3, r3, #1
  4040f8:	f046 0601 	orr.w	r6, r6, #1
  4040fc:	6066      	str	r6, [r4, #4]
  4040fe:	4628      	mov	r0, r5
  404100:	60ba      	str	r2, [r7, #8]
  404102:	6053      	str	r3, [r2, #4]
  404104:	f000 fa0e 	bl	404524 <__malloc_unlock>
  404108:	3408      	adds	r4, #8
  40410a:	4620      	mov	r0, r4
  40410c:	b003      	add	sp, #12
  40410e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404112:	2b14      	cmp	r3, #20
  404114:	d971      	bls.n	4041fa <_malloc_r+0x412>
  404116:	2b54      	cmp	r3, #84	; 0x54
  404118:	f200 80a3 	bhi.w	404262 <_malloc_r+0x47a>
  40411c:	0b33      	lsrs	r3, r6, #12
  40411e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  404122:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  404126:	00c3      	lsls	r3, r0, #3
  404128:	e680      	b.n	403e2c <_malloc_r+0x44>
  40412a:	bf00      	nop
  40412c:	20400480 	.word	0x20400480
  404130:	20446830 	.word	0x20446830
  404134:	20446800 	.word	0x20446800
  404138:	20446828 	.word	0x20446828
  40413c:	2044682c 	.word	0x2044682c
  404140:	20400488 	.word	0x20400488
  404144:	20400888 	.word	0x20400888
  404148:	0a5a      	lsrs	r2, r3, #9
  40414a:	2a04      	cmp	r2, #4
  40414c:	d95b      	bls.n	404206 <_malloc_r+0x41e>
  40414e:	2a14      	cmp	r2, #20
  404150:	f200 80ae 	bhi.w	4042b0 <_malloc_r+0x4c8>
  404154:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404158:	00c9      	lsls	r1, r1, #3
  40415a:	325b      	adds	r2, #91	; 0x5b
  40415c:	eb07 0c01 	add.w	ip, r7, r1
  404160:	5879      	ldr	r1, [r7, r1]
  404162:	f1ac 0c08 	sub.w	ip, ip, #8
  404166:	458c      	cmp	ip, r1
  404168:	f000 8088 	beq.w	40427c <_malloc_r+0x494>
  40416c:	684a      	ldr	r2, [r1, #4]
  40416e:	f022 0203 	bic.w	r2, r2, #3
  404172:	4293      	cmp	r3, r2
  404174:	d273      	bcs.n	40425e <_malloc_r+0x476>
  404176:	6889      	ldr	r1, [r1, #8]
  404178:	458c      	cmp	ip, r1
  40417a:	d1f7      	bne.n	40416c <_malloc_r+0x384>
  40417c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  404180:	687b      	ldr	r3, [r7, #4]
  404182:	60e2      	str	r2, [r4, #12]
  404184:	f8c4 c008 	str.w	ip, [r4, #8]
  404188:	6094      	str	r4, [r2, #8]
  40418a:	f8cc 400c 	str.w	r4, [ip, #12]
  40418e:	e68f      	b.n	403eb0 <_malloc_r+0xc8>
  404190:	19a1      	adds	r1, r4, r6
  404192:	f046 0c01 	orr.w	ip, r6, #1
  404196:	f042 0601 	orr.w	r6, r2, #1
  40419a:	f8c4 c004 	str.w	ip, [r4, #4]
  40419e:	4628      	mov	r0, r5
  4041a0:	6179      	str	r1, [r7, #20]
  4041a2:	6139      	str	r1, [r7, #16]
  4041a4:	f8c1 e00c 	str.w	lr, [r1, #12]
  4041a8:	f8c1 e008 	str.w	lr, [r1, #8]
  4041ac:	604e      	str	r6, [r1, #4]
  4041ae:	50e2      	str	r2, [r4, r3]
  4041b0:	f000 f9b8 	bl	404524 <__malloc_unlock>
  4041b4:	3408      	adds	r4, #8
  4041b6:	e6dd      	b.n	403f74 <_malloc_r+0x18c>
  4041b8:	687b      	ldr	r3, [r7, #4]
  4041ba:	e679      	b.n	403eb0 <_malloc_r+0xc8>
  4041bc:	f108 0801 	add.w	r8, r8, #1
  4041c0:	f018 0f03 	tst.w	r8, #3
  4041c4:	f10c 0c08 	add.w	ip, ip, #8
  4041c8:	f47f ae85 	bne.w	403ed6 <_malloc_r+0xee>
  4041cc:	e02d      	b.n	40422a <_malloc_r+0x442>
  4041ce:	68dc      	ldr	r4, [r3, #12]
  4041d0:	42a3      	cmp	r3, r4
  4041d2:	bf08      	it	eq
  4041d4:	3002      	addeq	r0, #2
  4041d6:	f43f ae3e 	beq.w	403e56 <_malloc_r+0x6e>
  4041da:	e6bb      	b.n	403f54 <_malloc_r+0x16c>
  4041dc:	4419      	add	r1, r3
  4041de:	461c      	mov	r4, r3
  4041e0:	684a      	ldr	r2, [r1, #4]
  4041e2:	68db      	ldr	r3, [r3, #12]
  4041e4:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4041e8:	f042 0201 	orr.w	r2, r2, #1
  4041ec:	604a      	str	r2, [r1, #4]
  4041ee:	4628      	mov	r0, r5
  4041f0:	60f3      	str	r3, [r6, #12]
  4041f2:	609e      	str	r6, [r3, #8]
  4041f4:	f000 f996 	bl	404524 <__malloc_unlock>
  4041f8:	e6bc      	b.n	403f74 <_malloc_r+0x18c>
  4041fa:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4041fe:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  404202:	00c3      	lsls	r3, r0, #3
  404204:	e612      	b.n	403e2c <_malloc_r+0x44>
  404206:	099a      	lsrs	r2, r3, #6
  404208:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40420c:	00c9      	lsls	r1, r1, #3
  40420e:	3238      	adds	r2, #56	; 0x38
  404210:	e7a4      	b.n	40415c <_malloc_r+0x374>
  404212:	42bc      	cmp	r4, r7
  404214:	d054      	beq.n	4042c0 <_malloc_r+0x4d8>
  404216:	68bc      	ldr	r4, [r7, #8]
  404218:	6862      	ldr	r2, [r4, #4]
  40421a:	f022 0203 	bic.w	r2, r2, #3
  40421e:	e75d      	b.n	4040dc <_malloc_r+0x2f4>
  404220:	f859 3908 	ldr.w	r3, [r9], #-8
  404224:	4599      	cmp	r9, r3
  404226:	f040 8086 	bne.w	404336 <_malloc_r+0x54e>
  40422a:	f010 0f03 	tst.w	r0, #3
  40422e:	f100 30ff 	add.w	r0, r0, #4294967295
  404232:	d1f5      	bne.n	404220 <_malloc_r+0x438>
  404234:	687b      	ldr	r3, [r7, #4]
  404236:	ea23 0304 	bic.w	r3, r3, r4
  40423a:	607b      	str	r3, [r7, #4]
  40423c:	0064      	lsls	r4, r4, #1
  40423e:	429c      	cmp	r4, r3
  404240:	f63f aec7 	bhi.w	403fd2 <_malloc_r+0x1ea>
  404244:	2c00      	cmp	r4, #0
  404246:	f43f aec4 	beq.w	403fd2 <_malloc_r+0x1ea>
  40424a:	421c      	tst	r4, r3
  40424c:	4640      	mov	r0, r8
  40424e:	f47f ae3e 	bne.w	403ece <_malloc_r+0xe6>
  404252:	0064      	lsls	r4, r4, #1
  404254:	421c      	tst	r4, r3
  404256:	f100 0004 	add.w	r0, r0, #4
  40425a:	d0fa      	beq.n	404252 <_malloc_r+0x46a>
  40425c:	e637      	b.n	403ece <_malloc_r+0xe6>
  40425e:	468c      	mov	ip, r1
  404260:	e78c      	b.n	40417c <_malloc_r+0x394>
  404262:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404266:	d815      	bhi.n	404294 <_malloc_r+0x4ac>
  404268:	0bf3      	lsrs	r3, r6, #15
  40426a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40426e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  404272:	00c3      	lsls	r3, r0, #3
  404274:	e5da      	b.n	403e2c <_malloc_r+0x44>
  404276:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40427a:	e6ed      	b.n	404058 <_malloc_r+0x270>
  40427c:	687b      	ldr	r3, [r7, #4]
  40427e:	1092      	asrs	r2, r2, #2
  404280:	2101      	movs	r1, #1
  404282:	fa01 f202 	lsl.w	r2, r1, r2
  404286:	4313      	orrs	r3, r2
  404288:	607b      	str	r3, [r7, #4]
  40428a:	4662      	mov	r2, ip
  40428c:	e779      	b.n	404182 <_malloc_r+0x39a>
  40428e:	2301      	movs	r3, #1
  404290:	6053      	str	r3, [r2, #4]
  404292:	e729      	b.n	4040e8 <_malloc_r+0x300>
  404294:	f240 5254 	movw	r2, #1364	; 0x554
  404298:	4293      	cmp	r3, r2
  40429a:	d822      	bhi.n	4042e2 <_malloc_r+0x4fa>
  40429c:	0cb3      	lsrs	r3, r6, #18
  40429e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4042a2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4042a6:	00c3      	lsls	r3, r0, #3
  4042a8:	e5c0      	b.n	403e2c <_malloc_r+0x44>
  4042aa:	f103 0b10 	add.w	fp, r3, #16
  4042ae:	e6ae      	b.n	40400e <_malloc_r+0x226>
  4042b0:	2a54      	cmp	r2, #84	; 0x54
  4042b2:	d829      	bhi.n	404308 <_malloc_r+0x520>
  4042b4:	0b1a      	lsrs	r2, r3, #12
  4042b6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4042ba:	00c9      	lsls	r1, r1, #3
  4042bc:	326e      	adds	r2, #110	; 0x6e
  4042be:	e74d      	b.n	40415c <_malloc_r+0x374>
  4042c0:	4b20      	ldr	r3, [pc, #128]	; (404344 <_malloc_r+0x55c>)
  4042c2:	6819      	ldr	r1, [r3, #0]
  4042c4:	4459      	add	r1, fp
  4042c6:	6019      	str	r1, [r3, #0]
  4042c8:	e6b2      	b.n	404030 <_malloc_r+0x248>
  4042ca:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4042ce:	2800      	cmp	r0, #0
  4042d0:	f47f aeae 	bne.w	404030 <_malloc_r+0x248>
  4042d4:	eb08 030b 	add.w	r3, r8, fp
  4042d8:	68ba      	ldr	r2, [r7, #8]
  4042da:	f043 0301 	orr.w	r3, r3, #1
  4042de:	6053      	str	r3, [r2, #4]
  4042e0:	e6ee      	b.n	4040c0 <_malloc_r+0x2d8>
  4042e2:	207f      	movs	r0, #127	; 0x7f
  4042e4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4042e8:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4042ec:	e59e      	b.n	403e2c <_malloc_r+0x44>
  4042ee:	f104 0108 	add.w	r1, r4, #8
  4042f2:	4628      	mov	r0, r5
  4042f4:	9300      	str	r3, [sp, #0]
  4042f6:	f001 fa89 	bl	40580c <_free_r>
  4042fa:	9b00      	ldr	r3, [sp, #0]
  4042fc:	6819      	ldr	r1, [r3, #0]
  4042fe:	e6df      	b.n	4040c0 <_malloc_r+0x2d8>
  404300:	2001      	movs	r0, #1
  404302:	f04f 0900 	mov.w	r9, #0
  404306:	e6bc      	b.n	404082 <_malloc_r+0x29a>
  404308:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40430c:	d805      	bhi.n	40431a <_malloc_r+0x532>
  40430e:	0bda      	lsrs	r2, r3, #15
  404310:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404314:	00c9      	lsls	r1, r1, #3
  404316:	3277      	adds	r2, #119	; 0x77
  404318:	e720      	b.n	40415c <_malloc_r+0x374>
  40431a:	f240 5154 	movw	r1, #1364	; 0x554
  40431e:	428a      	cmp	r2, r1
  404320:	d805      	bhi.n	40432e <_malloc_r+0x546>
  404322:	0c9a      	lsrs	r2, r3, #18
  404324:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404328:	00c9      	lsls	r1, r1, #3
  40432a:	327c      	adds	r2, #124	; 0x7c
  40432c:	e716      	b.n	40415c <_malloc_r+0x374>
  40432e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  404332:	227e      	movs	r2, #126	; 0x7e
  404334:	e712      	b.n	40415c <_malloc_r+0x374>
  404336:	687b      	ldr	r3, [r7, #4]
  404338:	e780      	b.n	40423c <_malloc_r+0x454>
  40433a:	08f0      	lsrs	r0, r6, #3
  40433c:	f106 0308 	add.w	r3, r6, #8
  404340:	e600      	b.n	403f44 <_malloc_r+0x15c>
  404342:	bf00      	nop
  404344:	20446800 	.word	0x20446800

00404348 <memcpy>:
  404348:	4684      	mov	ip, r0
  40434a:	ea41 0300 	orr.w	r3, r1, r0
  40434e:	f013 0303 	ands.w	r3, r3, #3
  404352:	d16d      	bne.n	404430 <memcpy+0xe8>
  404354:	3a40      	subs	r2, #64	; 0x40
  404356:	d341      	bcc.n	4043dc <memcpy+0x94>
  404358:	f851 3b04 	ldr.w	r3, [r1], #4
  40435c:	f840 3b04 	str.w	r3, [r0], #4
  404360:	f851 3b04 	ldr.w	r3, [r1], #4
  404364:	f840 3b04 	str.w	r3, [r0], #4
  404368:	f851 3b04 	ldr.w	r3, [r1], #4
  40436c:	f840 3b04 	str.w	r3, [r0], #4
  404370:	f851 3b04 	ldr.w	r3, [r1], #4
  404374:	f840 3b04 	str.w	r3, [r0], #4
  404378:	f851 3b04 	ldr.w	r3, [r1], #4
  40437c:	f840 3b04 	str.w	r3, [r0], #4
  404380:	f851 3b04 	ldr.w	r3, [r1], #4
  404384:	f840 3b04 	str.w	r3, [r0], #4
  404388:	f851 3b04 	ldr.w	r3, [r1], #4
  40438c:	f840 3b04 	str.w	r3, [r0], #4
  404390:	f851 3b04 	ldr.w	r3, [r1], #4
  404394:	f840 3b04 	str.w	r3, [r0], #4
  404398:	f851 3b04 	ldr.w	r3, [r1], #4
  40439c:	f840 3b04 	str.w	r3, [r0], #4
  4043a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4043a4:	f840 3b04 	str.w	r3, [r0], #4
  4043a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4043ac:	f840 3b04 	str.w	r3, [r0], #4
  4043b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4043b4:	f840 3b04 	str.w	r3, [r0], #4
  4043b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4043bc:	f840 3b04 	str.w	r3, [r0], #4
  4043c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4043c4:	f840 3b04 	str.w	r3, [r0], #4
  4043c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4043cc:	f840 3b04 	str.w	r3, [r0], #4
  4043d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4043d4:	f840 3b04 	str.w	r3, [r0], #4
  4043d8:	3a40      	subs	r2, #64	; 0x40
  4043da:	d2bd      	bcs.n	404358 <memcpy+0x10>
  4043dc:	3230      	adds	r2, #48	; 0x30
  4043de:	d311      	bcc.n	404404 <memcpy+0xbc>
  4043e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4043e4:	f840 3b04 	str.w	r3, [r0], #4
  4043e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4043ec:	f840 3b04 	str.w	r3, [r0], #4
  4043f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4043f4:	f840 3b04 	str.w	r3, [r0], #4
  4043f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4043fc:	f840 3b04 	str.w	r3, [r0], #4
  404400:	3a10      	subs	r2, #16
  404402:	d2ed      	bcs.n	4043e0 <memcpy+0x98>
  404404:	320c      	adds	r2, #12
  404406:	d305      	bcc.n	404414 <memcpy+0xcc>
  404408:	f851 3b04 	ldr.w	r3, [r1], #4
  40440c:	f840 3b04 	str.w	r3, [r0], #4
  404410:	3a04      	subs	r2, #4
  404412:	d2f9      	bcs.n	404408 <memcpy+0xc0>
  404414:	3204      	adds	r2, #4
  404416:	d008      	beq.n	40442a <memcpy+0xe2>
  404418:	07d2      	lsls	r2, r2, #31
  40441a:	bf1c      	itt	ne
  40441c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404420:	f800 3b01 	strbne.w	r3, [r0], #1
  404424:	d301      	bcc.n	40442a <memcpy+0xe2>
  404426:	880b      	ldrh	r3, [r1, #0]
  404428:	8003      	strh	r3, [r0, #0]
  40442a:	4660      	mov	r0, ip
  40442c:	4770      	bx	lr
  40442e:	bf00      	nop
  404430:	2a08      	cmp	r2, #8
  404432:	d313      	bcc.n	40445c <memcpy+0x114>
  404434:	078b      	lsls	r3, r1, #30
  404436:	d08d      	beq.n	404354 <memcpy+0xc>
  404438:	f010 0303 	ands.w	r3, r0, #3
  40443c:	d08a      	beq.n	404354 <memcpy+0xc>
  40443e:	f1c3 0304 	rsb	r3, r3, #4
  404442:	1ad2      	subs	r2, r2, r3
  404444:	07db      	lsls	r3, r3, #31
  404446:	bf1c      	itt	ne
  404448:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40444c:	f800 3b01 	strbne.w	r3, [r0], #1
  404450:	d380      	bcc.n	404354 <memcpy+0xc>
  404452:	f831 3b02 	ldrh.w	r3, [r1], #2
  404456:	f820 3b02 	strh.w	r3, [r0], #2
  40445a:	e77b      	b.n	404354 <memcpy+0xc>
  40445c:	3a04      	subs	r2, #4
  40445e:	d3d9      	bcc.n	404414 <memcpy+0xcc>
  404460:	3a01      	subs	r2, #1
  404462:	f811 3b01 	ldrb.w	r3, [r1], #1
  404466:	f800 3b01 	strb.w	r3, [r0], #1
  40446a:	d2f9      	bcs.n	404460 <memcpy+0x118>
  40446c:	780b      	ldrb	r3, [r1, #0]
  40446e:	7003      	strb	r3, [r0, #0]
  404470:	784b      	ldrb	r3, [r1, #1]
  404472:	7043      	strb	r3, [r0, #1]
  404474:	788b      	ldrb	r3, [r1, #2]
  404476:	7083      	strb	r3, [r0, #2]
  404478:	4660      	mov	r0, ip
  40447a:	4770      	bx	lr

0040447c <memset>:
  40447c:	b470      	push	{r4, r5, r6}
  40447e:	0786      	lsls	r6, r0, #30
  404480:	d046      	beq.n	404510 <memset+0x94>
  404482:	1e54      	subs	r4, r2, #1
  404484:	2a00      	cmp	r2, #0
  404486:	d041      	beq.n	40450c <memset+0x90>
  404488:	b2ca      	uxtb	r2, r1
  40448a:	4603      	mov	r3, r0
  40448c:	e002      	b.n	404494 <memset+0x18>
  40448e:	f114 34ff 	adds.w	r4, r4, #4294967295
  404492:	d33b      	bcc.n	40450c <memset+0x90>
  404494:	f803 2b01 	strb.w	r2, [r3], #1
  404498:	079d      	lsls	r5, r3, #30
  40449a:	d1f8      	bne.n	40448e <memset+0x12>
  40449c:	2c03      	cmp	r4, #3
  40449e:	d92e      	bls.n	4044fe <memset+0x82>
  4044a0:	b2cd      	uxtb	r5, r1
  4044a2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4044a6:	2c0f      	cmp	r4, #15
  4044a8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4044ac:	d919      	bls.n	4044e2 <memset+0x66>
  4044ae:	f103 0210 	add.w	r2, r3, #16
  4044b2:	4626      	mov	r6, r4
  4044b4:	3e10      	subs	r6, #16
  4044b6:	2e0f      	cmp	r6, #15
  4044b8:	f842 5c10 	str.w	r5, [r2, #-16]
  4044bc:	f842 5c0c 	str.w	r5, [r2, #-12]
  4044c0:	f842 5c08 	str.w	r5, [r2, #-8]
  4044c4:	f842 5c04 	str.w	r5, [r2, #-4]
  4044c8:	f102 0210 	add.w	r2, r2, #16
  4044cc:	d8f2      	bhi.n	4044b4 <memset+0x38>
  4044ce:	f1a4 0210 	sub.w	r2, r4, #16
  4044d2:	f022 020f 	bic.w	r2, r2, #15
  4044d6:	f004 040f 	and.w	r4, r4, #15
  4044da:	3210      	adds	r2, #16
  4044dc:	2c03      	cmp	r4, #3
  4044de:	4413      	add	r3, r2
  4044e0:	d90d      	bls.n	4044fe <memset+0x82>
  4044e2:	461e      	mov	r6, r3
  4044e4:	4622      	mov	r2, r4
  4044e6:	3a04      	subs	r2, #4
  4044e8:	2a03      	cmp	r2, #3
  4044ea:	f846 5b04 	str.w	r5, [r6], #4
  4044ee:	d8fa      	bhi.n	4044e6 <memset+0x6a>
  4044f0:	1f22      	subs	r2, r4, #4
  4044f2:	f022 0203 	bic.w	r2, r2, #3
  4044f6:	3204      	adds	r2, #4
  4044f8:	4413      	add	r3, r2
  4044fa:	f004 0403 	and.w	r4, r4, #3
  4044fe:	b12c      	cbz	r4, 40450c <memset+0x90>
  404500:	b2c9      	uxtb	r1, r1
  404502:	441c      	add	r4, r3
  404504:	f803 1b01 	strb.w	r1, [r3], #1
  404508:	429c      	cmp	r4, r3
  40450a:	d1fb      	bne.n	404504 <memset+0x88>
  40450c:	bc70      	pop	{r4, r5, r6}
  40450e:	4770      	bx	lr
  404510:	4614      	mov	r4, r2
  404512:	4603      	mov	r3, r0
  404514:	e7c2      	b.n	40449c <memset+0x20>
  404516:	bf00      	nop

00404518 <__malloc_lock>:
  404518:	4801      	ldr	r0, [pc, #4]	; (404520 <__malloc_lock+0x8>)
  40451a:	f001 bc11 	b.w	405d40 <__retarget_lock_acquire_recursive>
  40451e:	bf00      	nop
  404520:	2044d0d0 	.word	0x2044d0d0

00404524 <__malloc_unlock>:
  404524:	4801      	ldr	r0, [pc, #4]	; (40452c <__malloc_unlock+0x8>)
  404526:	f001 bc0d 	b.w	405d44 <__retarget_lock_release_recursive>
  40452a:	bf00      	nop
  40452c:	2044d0d0 	.word	0x2044d0d0

00404530 <_sbrk_r>:
  404530:	b538      	push	{r3, r4, r5, lr}
  404532:	4c07      	ldr	r4, [pc, #28]	; (404550 <_sbrk_r+0x20>)
  404534:	2300      	movs	r3, #0
  404536:	4605      	mov	r5, r0
  404538:	4608      	mov	r0, r1
  40453a:	6023      	str	r3, [r4, #0]
  40453c:	f7fe f89a 	bl	402674 <_sbrk>
  404540:	1c43      	adds	r3, r0, #1
  404542:	d000      	beq.n	404546 <_sbrk_r+0x16>
  404544:	bd38      	pop	{r3, r4, r5, pc}
  404546:	6823      	ldr	r3, [r4, #0]
  404548:	2b00      	cmp	r3, #0
  40454a:	d0fb      	beq.n	404544 <_sbrk_r+0x14>
  40454c:	602b      	str	r3, [r5, #0]
  40454e:	bd38      	pop	{r3, r4, r5, pc}
  404550:	2044d0e4 	.word	0x2044d0e4

00404554 <__sprint_r.part.0>:
  404554:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404558:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40455a:	049c      	lsls	r4, r3, #18
  40455c:	4693      	mov	fp, r2
  40455e:	d52f      	bpl.n	4045c0 <__sprint_r.part.0+0x6c>
  404560:	6893      	ldr	r3, [r2, #8]
  404562:	6812      	ldr	r2, [r2, #0]
  404564:	b353      	cbz	r3, 4045bc <__sprint_r.part.0+0x68>
  404566:	460e      	mov	r6, r1
  404568:	4607      	mov	r7, r0
  40456a:	f102 0908 	add.w	r9, r2, #8
  40456e:	e919 0420 	ldmdb	r9, {r5, sl}
  404572:	ea5f 089a 	movs.w	r8, sl, lsr #2
  404576:	d017      	beq.n	4045a8 <__sprint_r.part.0+0x54>
  404578:	3d04      	subs	r5, #4
  40457a:	2400      	movs	r4, #0
  40457c:	e001      	b.n	404582 <__sprint_r.part.0+0x2e>
  40457e:	45a0      	cmp	r8, r4
  404580:	d010      	beq.n	4045a4 <__sprint_r.part.0+0x50>
  404582:	4632      	mov	r2, r6
  404584:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404588:	4638      	mov	r0, r7
  40458a:	f001 f8bb 	bl	405704 <_fputwc_r>
  40458e:	1c43      	adds	r3, r0, #1
  404590:	f104 0401 	add.w	r4, r4, #1
  404594:	d1f3      	bne.n	40457e <__sprint_r.part.0+0x2a>
  404596:	2300      	movs	r3, #0
  404598:	f8cb 3008 	str.w	r3, [fp, #8]
  40459c:	f8cb 3004 	str.w	r3, [fp, #4]
  4045a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4045a4:	f8db 3008 	ldr.w	r3, [fp, #8]
  4045a8:	f02a 0a03 	bic.w	sl, sl, #3
  4045ac:	eba3 030a 	sub.w	r3, r3, sl
  4045b0:	f8cb 3008 	str.w	r3, [fp, #8]
  4045b4:	f109 0908 	add.w	r9, r9, #8
  4045b8:	2b00      	cmp	r3, #0
  4045ba:	d1d8      	bne.n	40456e <__sprint_r.part.0+0x1a>
  4045bc:	2000      	movs	r0, #0
  4045be:	e7ea      	b.n	404596 <__sprint_r.part.0+0x42>
  4045c0:	f001 fa0a 	bl	4059d8 <__sfvwrite_r>
  4045c4:	2300      	movs	r3, #0
  4045c6:	f8cb 3008 	str.w	r3, [fp, #8]
  4045ca:	f8cb 3004 	str.w	r3, [fp, #4]
  4045ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4045d2:	bf00      	nop

004045d4 <_vfiprintf_r>:
  4045d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4045d8:	b0ad      	sub	sp, #180	; 0xb4
  4045da:	461d      	mov	r5, r3
  4045dc:	468b      	mov	fp, r1
  4045de:	4690      	mov	r8, r2
  4045e0:	9307      	str	r3, [sp, #28]
  4045e2:	9006      	str	r0, [sp, #24]
  4045e4:	b118      	cbz	r0, 4045ee <_vfiprintf_r+0x1a>
  4045e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4045e8:	2b00      	cmp	r3, #0
  4045ea:	f000 80f3 	beq.w	4047d4 <_vfiprintf_r+0x200>
  4045ee:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4045f2:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4045f6:	07df      	lsls	r7, r3, #31
  4045f8:	b281      	uxth	r1, r0
  4045fa:	d402      	bmi.n	404602 <_vfiprintf_r+0x2e>
  4045fc:	058e      	lsls	r6, r1, #22
  4045fe:	f140 80fc 	bpl.w	4047fa <_vfiprintf_r+0x226>
  404602:	048c      	lsls	r4, r1, #18
  404604:	d40a      	bmi.n	40461c <_vfiprintf_r+0x48>
  404606:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40460a:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  40460e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  404612:	f8ab 100c 	strh.w	r1, [fp, #12]
  404616:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  40461a:	b289      	uxth	r1, r1
  40461c:	0708      	lsls	r0, r1, #28
  40461e:	f140 80b3 	bpl.w	404788 <_vfiprintf_r+0x1b4>
  404622:	f8db 3010 	ldr.w	r3, [fp, #16]
  404626:	2b00      	cmp	r3, #0
  404628:	f000 80ae 	beq.w	404788 <_vfiprintf_r+0x1b4>
  40462c:	f001 031a 	and.w	r3, r1, #26
  404630:	2b0a      	cmp	r3, #10
  404632:	f000 80b5 	beq.w	4047a0 <_vfiprintf_r+0x1cc>
  404636:	2300      	movs	r3, #0
  404638:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  40463c:	930b      	str	r3, [sp, #44]	; 0x2c
  40463e:	9311      	str	r3, [sp, #68]	; 0x44
  404640:	9310      	str	r3, [sp, #64]	; 0x40
  404642:	9303      	str	r3, [sp, #12]
  404644:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  404648:	46ca      	mov	sl, r9
  40464a:	f8cd b010 	str.w	fp, [sp, #16]
  40464e:	f898 3000 	ldrb.w	r3, [r8]
  404652:	4644      	mov	r4, r8
  404654:	b1fb      	cbz	r3, 404696 <_vfiprintf_r+0xc2>
  404656:	2b25      	cmp	r3, #37	; 0x25
  404658:	d102      	bne.n	404660 <_vfiprintf_r+0x8c>
  40465a:	e01c      	b.n	404696 <_vfiprintf_r+0xc2>
  40465c:	2b25      	cmp	r3, #37	; 0x25
  40465e:	d003      	beq.n	404668 <_vfiprintf_r+0x94>
  404660:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404664:	2b00      	cmp	r3, #0
  404666:	d1f9      	bne.n	40465c <_vfiprintf_r+0x88>
  404668:	eba4 0508 	sub.w	r5, r4, r8
  40466c:	b19d      	cbz	r5, 404696 <_vfiprintf_r+0xc2>
  40466e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404670:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404672:	f8ca 8000 	str.w	r8, [sl]
  404676:	3301      	adds	r3, #1
  404678:	442a      	add	r2, r5
  40467a:	2b07      	cmp	r3, #7
  40467c:	f8ca 5004 	str.w	r5, [sl, #4]
  404680:	9211      	str	r2, [sp, #68]	; 0x44
  404682:	9310      	str	r3, [sp, #64]	; 0x40
  404684:	dd7a      	ble.n	40477c <_vfiprintf_r+0x1a8>
  404686:	2a00      	cmp	r2, #0
  404688:	f040 84b0 	bne.w	404fec <_vfiprintf_r+0xa18>
  40468c:	9b03      	ldr	r3, [sp, #12]
  40468e:	9210      	str	r2, [sp, #64]	; 0x40
  404690:	442b      	add	r3, r5
  404692:	46ca      	mov	sl, r9
  404694:	9303      	str	r3, [sp, #12]
  404696:	7823      	ldrb	r3, [r4, #0]
  404698:	2b00      	cmp	r3, #0
  40469a:	f000 83e0 	beq.w	404e5e <_vfiprintf_r+0x88a>
  40469e:	2000      	movs	r0, #0
  4046a0:	f04f 0300 	mov.w	r3, #0
  4046a4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4046a8:	f104 0801 	add.w	r8, r4, #1
  4046ac:	7862      	ldrb	r2, [r4, #1]
  4046ae:	4605      	mov	r5, r0
  4046b0:	4606      	mov	r6, r0
  4046b2:	4603      	mov	r3, r0
  4046b4:	f04f 34ff 	mov.w	r4, #4294967295
  4046b8:	f108 0801 	add.w	r8, r8, #1
  4046bc:	f1a2 0120 	sub.w	r1, r2, #32
  4046c0:	2958      	cmp	r1, #88	; 0x58
  4046c2:	f200 82de 	bhi.w	404c82 <_vfiprintf_r+0x6ae>
  4046c6:	e8df f011 	tbh	[pc, r1, lsl #1]
  4046ca:	0221      	.short	0x0221
  4046cc:	02dc02dc 	.word	0x02dc02dc
  4046d0:	02dc0229 	.word	0x02dc0229
  4046d4:	02dc02dc 	.word	0x02dc02dc
  4046d8:	02dc02dc 	.word	0x02dc02dc
  4046dc:	028902dc 	.word	0x028902dc
  4046e0:	02dc0295 	.word	0x02dc0295
  4046e4:	02bd00a2 	.word	0x02bd00a2
  4046e8:	019f02dc 	.word	0x019f02dc
  4046ec:	01a401a4 	.word	0x01a401a4
  4046f0:	01a401a4 	.word	0x01a401a4
  4046f4:	01a401a4 	.word	0x01a401a4
  4046f8:	01a401a4 	.word	0x01a401a4
  4046fc:	02dc01a4 	.word	0x02dc01a4
  404700:	02dc02dc 	.word	0x02dc02dc
  404704:	02dc02dc 	.word	0x02dc02dc
  404708:	02dc02dc 	.word	0x02dc02dc
  40470c:	02dc02dc 	.word	0x02dc02dc
  404710:	01b202dc 	.word	0x01b202dc
  404714:	02dc02dc 	.word	0x02dc02dc
  404718:	02dc02dc 	.word	0x02dc02dc
  40471c:	02dc02dc 	.word	0x02dc02dc
  404720:	02dc02dc 	.word	0x02dc02dc
  404724:	02dc02dc 	.word	0x02dc02dc
  404728:	02dc0197 	.word	0x02dc0197
  40472c:	02dc02dc 	.word	0x02dc02dc
  404730:	02dc02dc 	.word	0x02dc02dc
  404734:	02dc019b 	.word	0x02dc019b
  404738:	025302dc 	.word	0x025302dc
  40473c:	02dc02dc 	.word	0x02dc02dc
  404740:	02dc02dc 	.word	0x02dc02dc
  404744:	02dc02dc 	.word	0x02dc02dc
  404748:	02dc02dc 	.word	0x02dc02dc
  40474c:	02dc02dc 	.word	0x02dc02dc
  404750:	021b025a 	.word	0x021b025a
  404754:	02dc02dc 	.word	0x02dc02dc
  404758:	026e02dc 	.word	0x026e02dc
  40475c:	02dc021b 	.word	0x02dc021b
  404760:	027302dc 	.word	0x027302dc
  404764:	01f502dc 	.word	0x01f502dc
  404768:	02090182 	.word	0x02090182
  40476c:	02dc02d7 	.word	0x02dc02d7
  404770:	02dc029a 	.word	0x02dc029a
  404774:	02dc00a7 	.word	0x02dc00a7
  404778:	022e02dc 	.word	0x022e02dc
  40477c:	f10a 0a08 	add.w	sl, sl, #8
  404780:	9b03      	ldr	r3, [sp, #12]
  404782:	442b      	add	r3, r5
  404784:	9303      	str	r3, [sp, #12]
  404786:	e786      	b.n	404696 <_vfiprintf_r+0xc2>
  404788:	4659      	mov	r1, fp
  40478a:	9806      	ldr	r0, [sp, #24]
  40478c:	f000 fdac 	bl	4052e8 <__swsetup_r>
  404790:	bb18      	cbnz	r0, 4047da <_vfiprintf_r+0x206>
  404792:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  404796:	f001 031a 	and.w	r3, r1, #26
  40479a:	2b0a      	cmp	r3, #10
  40479c:	f47f af4b 	bne.w	404636 <_vfiprintf_r+0x62>
  4047a0:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4047a4:	2b00      	cmp	r3, #0
  4047a6:	f6ff af46 	blt.w	404636 <_vfiprintf_r+0x62>
  4047aa:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4047ae:	07db      	lsls	r3, r3, #31
  4047b0:	d405      	bmi.n	4047be <_vfiprintf_r+0x1ea>
  4047b2:	058f      	lsls	r7, r1, #22
  4047b4:	d403      	bmi.n	4047be <_vfiprintf_r+0x1ea>
  4047b6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4047ba:	f001 fac3 	bl	405d44 <__retarget_lock_release_recursive>
  4047be:	462b      	mov	r3, r5
  4047c0:	4642      	mov	r2, r8
  4047c2:	4659      	mov	r1, fp
  4047c4:	9806      	ldr	r0, [sp, #24]
  4047c6:	f000 fd4d 	bl	405264 <__sbprintf>
  4047ca:	9003      	str	r0, [sp, #12]
  4047cc:	9803      	ldr	r0, [sp, #12]
  4047ce:	b02d      	add	sp, #180	; 0xb4
  4047d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4047d4:	f000 fef4 	bl	4055c0 <__sinit>
  4047d8:	e709      	b.n	4045ee <_vfiprintf_r+0x1a>
  4047da:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4047de:	07d9      	lsls	r1, r3, #31
  4047e0:	d404      	bmi.n	4047ec <_vfiprintf_r+0x218>
  4047e2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4047e6:	059a      	lsls	r2, r3, #22
  4047e8:	f140 84aa 	bpl.w	405140 <_vfiprintf_r+0xb6c>
  4047ec:	f04f 33ff 	mov.w	r3, #4294967295
  4047f0:	9303      	str	r3, [sp, #12]
  4047f2:	9803      	ldr	r0, [sp, #12]
  4047f4:	b02d      	add	sp, #180	; 0xb4
  4047f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4047fa:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4047fe:	f001 fa9f 	bl	405d40 <__retarget_lock_acquire_recursive>
  404802:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  404806:	b281      	uxth	r1, r0
  404808:	e6fb      	b.n	404602 <_vfiprintf_r+0x2e>
  40480a:	4276      	negs	r6, r6
  40480c:	9207      	str	r2, [sp, #28]
  40480e:	f043 0304 	orr.w	r3, r3, #4
  404812:	f898 2000 	ldrb.w	r2, [r8]
  404816:	e74f      	b.n	4046b8 <_vfiprintf_r+0xe4>
  404818:	9608      	str	r6, [sp, #32]
  40481a:	069e      	lsls	r6, r3, #26
  40481c:	f100 8450 	bmi.w	4050c0 <_vfiprintf_r+0xaec>
  404820:	9907      	ldr	r1, [sp, #28]
  404822:	06dd      	lsls	r5, r3, #27
  404824:	460a      	mov	r2, r1
  404826:	f100 83ef 	bmi.w	405008 <_vfiprintf_r+0xa34>
  40482a:	0658      	lsls	r0, r3, #25
  40482c:	f140 83ec 	bpl.w	405008 <_vfiprintf_r+0xa34>
  404830:	880e      	ldrh	r6, [r1, #0]
  404832:	3104      	adds	r1, #4
  404834:	2700      	movs	r7, #0
  404836:	2201      	movs	r2, #1
  404838:	9107      	str	r1, [sp, #28]
  40483a:	f04f 0100 	mov.w	r1, #0
  40483e:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  404842:	2500      	movs	r5, #0
  404844:	1c61      	adds	r1, r4, #1
  404846:	f000 8116 	beq.w	404a76 <_vfiprintf_r+0x4a2>
  40484a:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  40484e:	9102      	str	r1, [sp, #8]
  404850:	ea56 0107 	orrs.w	r1, r6, r7
  404854:	f040 8114 	bne.w	404a80 <_vfiprintf_r+0x4ac>
  404858:	2c00      	cmp	r4, #0
  40485a:	f040 835c 	bne.w	404f16 <_vfiprintf_r+0x942>
  40485e:	2a00      	cmp	r2, #0
  404860:	f040 83b7 	bne.w	404fd2 <_vfiprintf_r+0x9fe>
  404864:	f013 0301 	ands.w	r3, r3, #1
  404868:	9305      	str	r3, [sp, #20]
  40486a:	f000 8457 	beq.w	40511c <_vfiprintf_r+0xb48>
  40486e:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  404872:	2330      	movs	r3, #48	; 0x30
  404874:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  404878:	9b05      	ldr	r3, [sp, #20]
  40487a:	42a3      	cmp	r3, r4
  40487c:	bfb8      	it	lt
  40487e:	4623      	movlt	r3, r4
  404880:	9301      	str	r3, [sp, #4]
  404882:	b10d      	cbz	r5, 404888 <_vfiprintf_r+0x2b4>
  404884:	3301      	adds	r3, #1
  404886:	9301      	str	r3, [sp, #4]
  404888:	9b02      	ldr	r3, [sp, #8]
  40488a:	f013 0302 	ands.w	r3, r3, #2
  40488e:	9309      	str	r3, [sp, #36]	; 0x24
  404890:	d002      	beq.n	404898 <_vfiprintf_r+0x2c4>
  404892:	9b01      	ldr	r3, [sp, #4]
  404894:	3302      	adds	r3, #2
  404896:	9301      	str	r3, [sp, #4]
  404898:	9b02      	ldr	r3, [sp, #8]
  40489a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40489e:	930a      	str	r3, [sp, #40]	; 0x28
  4048a0:	f040 8217 	bne.w	404cd2 <_vfiprintf_r+0x6fe>
  4048a4:	9b08      	ldr	r3, [sp, #32]
  4048a6:	9a01      	ldr	r2, [sp, #4]
  4048a8:	1a9d      	subs	r5, r3, r2
  4048aa:	2d00      	cmp	r5, #0
  4048ac:	f340 8211 	ble.w	404cd2 <_vfiprintf_r+0x6fe>
  4048b0:	2d10      	cmp	r5, #16
  4048b2:	f340 8490 	ble.w	4051d6 <_vfiprintf_r+0xc02>
  4048b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4048b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4048ba:	4ec4      	ldr	r6, [pc, #784]	; (404bcc <_vfiprintf_r+0x5f8>)
  4048bc:	46d6      	mov	lr, sl
  4048be:	2710      	movs	r7, #16
  4048c0:	46a2      	mov	sl, r4
  4048c2:	4619      	mov	r1, r3
  4048c4:	9c06      	ldr	r4, [sp, #24]
  4048c6:	e007      	b.n	4048d8 <_vfiprintf_r+0x304>
  4048c8:	f101 0c02 	add.w	ip, r1, #2
  4048cc:	f10e 0e08 	add.w	lr, lr, #8
  4048d0:	4601      	mov	r1, r0
  4048d2:	3d10      	subs	r5, #16
  4048d4:	2d10      	cmp	r5, #16
  4048d6:	dd11      	ble.n	4048fc <_vfiprintf_r+0x328>
  4048d8:	1c48      	adds	r0, r1, #1
  4048da:	3210      	adds	r2, #16
  4048dc:	2807      	cmp	r0, #7
  4048de:	9211      	str	r2, [sp, #68]	; 0x44
  4048e0:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4048e4:	9010      	str	r0, [sp, #64]	; 0x40
  4048e6:	ddef      	ble.n	4048c8 <_vfiprintf_r+0x2f4>
  4048e8:	2a00      	cmp	r2, #0
  4048ea:	f040 81e4 	bne.w	404cb6 <_vfiprintf_r+0x6e2>
  4048ee:	3d10      	subs	r5, #16
  4048f0:	2d10      	cmp	r5, #16
  4048f2:	4611      	mov	r1, r2
  4048f4:	f04f 0c01 	mov.w	ip, #1
  4048f8:	46ce      	mov	lr, r9
  4048fa:	dced      	bgt.n	4048d8 <_vfiprintf_r+0x304>
  4048fc:	4654      	mov	r4, sl
  4048fe:	4661      	mov	r1, ip
  404900:	46f2      	mov	sl, lr
  404902:	442a      	add	r2, r5
  404904:	2907      	cmp	r1, #7
  404906:	9211      	str	r2, [sp, #68]	; 0x44
  404908:	f8ca 6000 	str.w	r6, [sl]
  40490c:	f8ca 5004 	str.w	r5, [sl, #4]
  404910:	9110      	str	r1, [sp, #64]	; 0x40
  404912:	f300 82ec 	bgt.w	404eee <_vfiprintf_r+0x91a>
  404916:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40491a:	f10a 0a08 	add.w	sl, sl, #8
  40491e:	1c48      	adds	r0, r1, #1
  404920:	2d00      	cmp	r5, #0
  404922:	f040 81de 	bne.w	404ce2 <_vfiprintf_r+0x70e>
  404926:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404928:	2b00      	cmp	r3, #0
  40492a:	f000 81f8 	beq.w	404d1e <_vfiprintf_r+0x74a>
  40492e:	3202      	adds	r2, #2
  404930:	a90e      	add	r1, sp, #56	; 0x38
  404932:	2302      	movs	r3, #2
  404934:	2807      	cmp	r0, #7
  404936:	9211      	str	r2, [sp, #68]	; 0x44
  404938:	9010      	str	r0, [sp, #64]	; 0x40
  40493a:	e88a 000a 	stmia.w	sl, {r1, r3}
  40493e:	f340 81ea 	ble.w	404d16 <_vfiprintf_r+0x742>
  404942:	2a00      	cmp	r2, #0
  404944:	f040 838c 	bne.w	405060 <_vfiprintf_r+0xa8c>
  404948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40494a:	2b80      	cmp	r3, #128	; 0x80
  40494c:	f04f 0001 	mov.w	r0, #1
  404950:	4611      	mov	r1, r2
  404952:	46ca      	mov	sl, r9
  404954:	f040 81e7 	bne.w	404d26 <_vfiprintf_r+0x752>
  404958:	9b08      	ldr	r3, [sp, #32]
  40495a:	9d01      	ldr	r5, [sp, #4]
  40495c:	1b5e      	subs	r6, r3, r5
  40495e:	2e00      	cmp	r6, #0
  404960:	f340 81e1 	ble.w	404d26 <_vfiprintf_r+0x752>
  404964:	2e10      	cmp	r6, #16
  404966:	4d9a      	ldr	r5, [pc, #616]	; (404bd0 <_vfiprintf_r+0x5fc>)
  404968:	f340 8450 	ble.w	40520c <_vfiprintf_r+0xc38>
  40496c:	46d4      	mov	ip, sl
  40496e:	2710      	movs	r7, #16
  404970:	46a2      	mov	sl, r4
  404972:	9c06      	ldr	r4, [sp, #24]
  404974:	e007      	b.n	404986 <_vfiprintf_r+0x3b2>
  404976:	f101 0e02 	add.w	lr, r1, #2
  40497a:	f10c 0c08 	add.w	ip, ip, #8
  40497e:	4601      	mov	r1, r0
  404980:	3e10      	subs	r6, #16
  404982:	2e10      	cmp	r6, #16
  404984:	dd11      	ble.n	4049aa <_vfiprintf_r+0x3d6>
  404986:	1c48      	adds	r0, r1, #1
  404988:	3210      	adds	r2, #16
  40498a:	2807      	cmp	r0, #7
  40498c:	9211      	str	r2, [sp, #68]	; 0x44
  40498e:	e88c 00a0 	stmia.w	ip, {r5, r7}
  404992:	9010      	str	r0, [sp, #64]	; 0x40
  404994:	ddef      	ble.n	404976 <_vfiprintf_r+0x3a2>
  404996:	2a00      	cmp	r2, #0
  404998:	f040 829d 	bne.w	404ed6 <_vfiprintf_r+0x902>
  40499c:	3e10      	subs	r6, #16
  40499e:	2e10      	cmp	r6, #16
  4049a0:	f04f 0e01 	mov.w	lr, #1
  4049a4:	4611      	mov	r1, r2
  4049a6:	46cc      	mov	ip, r9
  4049a8:	dced      	bgt.n	404986 <_vfiprintf_r+0x3b2>
  4049aa:	4654      	mov	r4, sl
  4049ac:	46e2      	mov	sl, ip
  4049ae:	4432      	add	r2, r6
  4049b0:	f1be 0f07 	cmp.w	lr, #7
  4049b4:	9211      	str	r2, [sp, #68]	; 0x44
  4049b6:	e88a 0060 	stmia.w	sl, {r5, r6}
  4049ba:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4049be:	f300 8369 	bgt.w	405094 <_vfiprintf_r+0xac0>
  4049c2:	f10a 0a08 	add.w	sl, sl, #8
  4049c6:	f10e 0001 	add.w	r0, lr, #1
  4049ca:	4671      	mov	r1, lr
  4049cc:	e1ab      	b.n	404d26 <_vfiprintf_r+0x752>
  4049ce:	9608      	str	r6, [sp, #32]
  4049d0:	f013 0220 	ands.w	r2, r3, #32
  4049d4:	f040 838c 	bne.w	4050f0 <_vfiprintf_r+0xb1c>
  4049d8:	f013 0110 	ands.w	r1, r3, #16
  4049dc:	f040 831a 	bne.w	405014 <_vfiprintf_r+0xa40>
  4049e0:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4049e4:	f000 8316 	beq.w	405014 <_vfiprintf_r+0xa40>
  4049e8:	9807      	ldr	r0, [sp, #28]
  4049ea:	460a      	mov	r2, r1
  4049ec:	4601      	mov	r1, r0
  4049ee:	3104      	adds	r1, #4
  4049f0:	8806      	ldrh	r6, [r0, #0]
  4049f2:	9107      	str	r1, [sp, #28]
  4049f4:	2700      	movs	r7, #0
  4049f6:	e720      	b.n	40483a <_vfiprintf_r+0x266>
  4049f8:	9608      	str	r6, [sp, #32]
  4049fa:	f043 0310 	orr.w	r3, r3, #16
  4049fe:	e7e7      	b.n	4049d0 <_vfiprintf_r+0x3fc>
  404a00:	9608      	str	r6, [sp, #32]
  404a02:	f043 0310 	orr.w	r3, r3, #16
  404a06:	e708      	b.n	40481a <_vfiprintf_r+0x246>
  404a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404a0c:	f898 2000 	ldrb.w	r2, [r8]
  404a10:	e652      	b.n	4046b8 <_vfiprintf_r+0xe4>
  404a12:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404a16:	2600      	movs	r6, #0
  404a18:	f818 2b01 	ldrb.w	r2, [r8], #1
  404a1c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  404a20:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  404a24:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404a28:	2909      	cmp	r1, #9
  404a2a:	d9f5      	bls.n	404a18 <_vfiprintf_r+0x444>
  404a2c:	e646      	b.n	4046bc <_vfiprintf_r+0xe8>
  404a2e:	9608      	str	r6, [sp, #32]
  404a30:	2800      	cmp	r0, #0
  404a32:	f040 8408 	bne.w	405246 <_vfiprintf_r+0xc72>
  404a36:	f043 0310 	orr.w	r3, r3, #16
  404a3a:	069e      	lsls	r6, r3, #26
  404a3c:	f100 834c 	bmi.w	4050d8 <_vfiprintf_r+0xb04>
  404a40:	06dd      	lsls	r5, r3, #27
  404a42:	f100 82f3 	bmi.w	40502c <_vfiprintf_r+0xa58>
  404a46:	0658      	lsls	r0, r3, #25
  404a48:	f140 82f0 	bpl.w	40502c <_vfiprintf_r+0xa58>
  404a4c:	9d07      	ldr	r5, [sp, #28]
  404a4e:	f9b5 6000 	ldrsh.w	r6, [r5]
  404a52:	462a      	mov	r2, r5
  404a54:	17f7      	asrs	r7, r6, #31
  404a56:	3204      	adds	r2, #4
  404a58:	4630      	mov	r0, r6
  404a5a:	4639      	mov	r1, r7
  404a5c:	9207      	str	r2, [sp, #28]
  404a5e:	2800      	cmp	r0, #0
  404a60:	f171 0200 	sbcs.w	r2, r1, #0
  404a64:	f2c0 835d 	blt.w	405122 <_vfiprintf_r+0xb4e>
  404a68:	1c61      	adds	r1, r4, #1
  404a6a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404a6e:	f04f 0201 	mov.w	r2, #1
  404a72:	f47f aeea 	bne.w	40484a <_vfiprintf_r+0x276>
  404a76:	ea56 0107 	orrs.w	r1, r6, r7
  404a7a:	f000 824d 	beq.w	404f18 <_vfiprintf_r+0x944>
  404a7e:	9302      	str	r3, [sp, #8]
  404a80:	2a01      	cmp	r2, #1
  404a82:	f000 828c 	beq.w	404f9e <_vfiprintf_r+0x9ca>
  404a86:	2a02      	cmp	r2, #2
  404a88:	f040 825c 	bne.w	404f44 <_vfiprintf_r+0x970>
  404a8c:	980b      	ldr	r0, [sp, #44]	; 0x2c
  404a8e:	46cb      	mov	fp, r9
  404a90:	0933      	lsrs	r3, r6, #4
  404a92:	f006 010f 	and.w	r1, r6, #15
  404a96:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  404a9a:	093a      	lsrs	r2, r7, #4
  404a9c:	461e      	mov	r6, r3
  404a9e:	4617      	mov	r7, r2
  404aa0:	5c43      	ldrb	r3, [r0, r1]
  404aa2:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  404aa6:	ea56 0307 	orrs.w	r3, r6, r7
  404aaa:	d1f1      	bne.n	404a90 <_vfiprintf_r+0x4bc>
  404aac:	eba9 030b 	sub.w	r3, r9, fp
  404ab0:	9305      	str	r3, [sp, #20]
  404ab2:	e6e1      	b.n	404878 <_vfiprintf_r+0x2a4>
  404ab4:	2800      	cmp	r0, #0
  404ab6:	f040 83c0 	bne.w	40523a <_vfiprintf_r+0xc66>
  404aba:	0699      	lsls	r1, r3, #26
  404abc:	f100 8367 	bmi.w	40518e <_vfiprintf_r+0xbba>
  404ac0:	06da      	lsls	r2, r3, #27
  404ac2:	f100 80f1 	bmi.w	404ca8 <_vfiprintf_r+0x6d4>
  404ac6:	065b      	lsls	r3, r3, #25
  404ac8:	f140 80ee 	bpl.w	404ca8 <_vfiprintf_r+0x6d4>
  404acc:	9a07      	ldr	r2, [sp, #28]
  404ace:	6813      	ldr	r3, [r2, #0]
  404ad0:	3204      	adds	r2, #4
  404ad2:	9207      	str	r2, [sp, #28]
  404ad4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  404ad8:	801a      	strh	r2, [r3, #0]
  404ada:	e5b8      	b.n	40464e <_vfiprintf_r+0x7a>
  404adc:	9807      	ldr	r0, [sp, #28]
  404ade:	4a3d      	ldr	r2, [pc, #244]	; (404bd4 <_vfiprintf_r+0x600>)
  404ae0:	9608      	str	r6, [sp, #32]
  404ae2:	920b      	str	r2, [sp, #44]	; 0x2c
  404ae4:	6806      	ldr	r6, [r0, #0]
  404ae6:	2278      	movs	r2, #120	; 0x78
  404ae8:	2130      	movs	r1, #48	; 0x30
  404aea:	3004      	adds	r0, #4
  404aec:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  404af0:	f043 0302 	orr.w	r3, r3, #2
  404af4:	9007      	str	r0, [sp, #28]
  404af6:	2700      	movs	r7, #0
  404af8:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404afc:	2202      	movs	r2, #2
  404afe:	e69c      	b.n	40483a <_vfiprintf_r+0x266>
  404b00:	9608      	str	r6, [sp, #32]
  404b02:	2800      	cmp	r0, #0
  404b04:	d099      	beq.n	404a3a <_vfiprintf_r+0x466>
  404b06:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404b0a:	e796      	b.n	404a3a <_vfiprintf_r+0x466>
  404b0c:	f898 2000 	ldrb.w	r2, [r8]
  404b10:	2d00      	cmp	r5, #0
  404b12:	f47f add1 	bne.w	4046b8 <_vfiprintf_r+0xe4>
  404b16:	2001      	movs	r0, #1
  404b18:	2520      	movs	r5, #32
  404b1a:	e5cd      	b.n	4046b8 <_vfiprintf_r+0xe4>
  404b1c:	f043 0301 	orr.w	r3, r3, #1
  404b20:	f898 2000 	ldrb.w	r2, [r8]
  404b24:	e5c8      	b.n	4046b8 <_vfiprintf_r+0xe4>
  404b26:	9608      	str	r6, [sp, #32]
  404b28:	2800      	cmp	r0, #0
  404b2a:	f040 8393 	bne.w	405254 <_vfiprintf_r+0xc80>
  404b2e:	4929      	ldr	r1, [pc, #164]	; (404bd4 <_vfiprintf_r+0x600>)
  404b30:	910b      	str	r1, [sp, #44]	; 0x2c
  404b32:	069f      	lsls	r7, r3, #26
  404b34:	f100 82e8 	bmi.w	405108 <_vfiprintf_r+0xb34>
  404b38:	9807      	ldr	r0, [sp, #28]
  404b3a:	06de      	lsls	r6, r3, #27
  404b3c:	4601      	mov	r1, r0
  404b3e:	f100 8270 	bmi.w	405022 <_vfiprintf_r+0xa4e>
  404b42:	065d      	lsls	r5, r3, #25
  404b44:	f140 826d 	bpl.w	405022 <_vfiprintf_r+0xa4e>
  404b48:	3104      	adds	r1, #4
  404b4a:	8806      	ldrh	r6, [r0, #0]
  404b4c:	9107      	str	r1, [sp, #28]
  404b4e:	2700      	movs	r7, #0
  404b50:	07d8      	lsls	r0, r3, #31
  404b52:	f140 8222 	bpl.w	404f9a <_vfiprintf_r+0x9c6>
  404b56:	ea56 0107 	orrs.w	r1, r6, r7
  404b5a:	f000 821e 	beq.w	404f9a <_vfiprintf_r+0x9c6>
  404b5e:	2130      	movs	r1, #48	; 0x30
  404b60:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  404b64:	f043 0302 	orr.w	r3, r3, #2
  404b68:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404b6c:	2202      	movs	r2, #2
  404b6e:	e664      	b.n	40483a <_vfiprintf_r+0x266>
  404b70:	9608      	str	r6, [sp, #32]
  404b72:	2800      	cmp	r0, #0
  404b74:	f040 836b 	bne.w	40524e <_vfiprintf_r+0xc7a>
  404b78:	4917      	ldr	r1, [pc, #92]	; (404bd8 <_vfiprintf_r+0x604>)
  404b7a:	910b      	str	r1, [sp, #44]	; 0x2c
  404b7c:	e7d9      	b.n	404b32 <_vfiprintf_r+0x55e>
  404b7e:	9907      	ldr	r1, [sp, #28]
  404b80:	9608      	str	r6, [sp, #32]
  404b82:	680a      	ldr	r2, [r1, #0]
  404b84:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404b88:	f04f 0000 	mov.w	r0, #0
  404b8c:	460a      	mov	r2, r1
  404b8e:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  404b92:	3204      	adds	r2, #4
  404b94:	2001      	movs	r0, #1
  404b96:	9001      	str	r0, [sp, #4]
  404b98:	9207      	str	r2, [sp, #28]
  404b9a:	9005      	str	r0, [sp, #20]
  404b9c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  404ba0:	9302      	str	r3, [sp, #8]
  404ba2:	2400      	movs	r4, #0
  404ba4:	e670      	b.n	404888 <_vfiprintf_r+0x2b4>
  404ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404baa:	f898 2000 	ldrb.w	r2, [r8]
  404bae:	e583      	b.n	4046b8 <_vfiprintf_r+0xe4>
  404bb0:	f898 2000 	ldrb.w	r2, [r8]
  404bb4:	2a6c      	cmp	r2, #108	; 0x6c
  404bb6:	bf03      	ittte	eq
  404bb8:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  404bbc:	f043 0320 	orreq.w	r3, r3, #32
  404bc0:	f108 0801 	addeq.w	r8, r8, #1
  404bc4:	f043 0310 	orrne.w	r3, r3, #16
  404bc8:	e576      	b.n	4046b8 <_vfiprintf_r+0xe4>
  404bca:	bf00      	nop
  404bcc:	004075b0 	.word	0x004075b0
  404bd0:	004075c0 	.word	0x004075c0
  404bd4:	00407594 	.word	0x00407594
  404bd8:	00407580 	.word	0x00407580
  404bdc:	9907      	ldr	r1, [sp, #28]
  404bde:	680e      	ldr	r6, [r1, #0]
  404be0:	460a      	mov	r2, r1
  404be2:	2e00      	cmp	r6, #0
  404be4:	f102 0204 	add.w	r2, r2, #4
  404be8:	f6ff ae0f 	blt.w	40480a <_vfiprintf_r+0x236>
  404bec:	9207      	str	r2, [sp, #28]
  404bee:	f898 2000 	ldrb.w	r2, [r8]
  404bf2:	e561      	b.n	4046b8 <_vfiprintf_r+0xe4>
  404bf4:	f898 2000 	ldrb.w	r2, [r8]
  404bf8:	2001      	movs	r0, #1
  404bfa:	252b      	movs	r5, #43	; 0x2b
  404bfc:	e55c      	b.n	4046b8 <_vfiprintf_r+0xe4>
  404bfe:	9907      	ldr	r1, [sp, #28]
  404c00:	9608      	str	r6, [sp, #32]
  404c02:	f8d1 b000 	ldr.w	fp, [r1]
  404c06:	f04f 0200 	mov.w	r2, #0
  404c0a:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404c0e:	1d0e      	adds	r6, r1, #4
  404c10:	f1bb 0f00 	cmp.w	fp, #0
  404c14:	f000 82e5 	beq.w	4051e2 <_vfiprintf_r+0xc0e>
  404c18:	1c67      	adds	r7, r4, #1
  404c1a:	f000 82c4 	beq.w	4051a6 <_vfiprintf_r+0xbd2>
  404c1e:	4622      	mov	r2, r4
  404c20:	2100      	movs	r1, #0
  404c22:	4658      	mov	r0, fp
  404c24:	9301      	str	r3, [sp, #4]
  404c26:	f001 f923 	bl	405e70 <memchr>
  404c2a:	9b01      	ldr	r3, [sp, #4]
  404c2c:	2800      	cmp	r0, #0
  404c2e:	f000 82e5 	beq.w	4051fc <_vfiprintf_r+0xc28>
  404c32:	eba0 020b 	sub.w	r2, r0, fp
  404c36:	9205      	str	r2, [sp, #20]
  404c38:	9607      	str	r6, [sp, #28]
  404c3a:	9302      	str	r3, [sp, #8]
  404c3c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404c40:	2400      	movs	r4, #0
  404c42:	e619      	b.n	404878 <_vfiprintf_r+0x2a4>
  404c44:	f898 2000 	ldrb.w	r2, [r8]
  404c48:	2a2a      	cmp	r2, #42	; 0x2a
  404c4a:	f108 0701 	add.w	r7, r8, #1
  404c4e:	f000 82e9 	beq.w	405224 <_vfiprintf_r+0xc50>
  404c52:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404c56:	2909      	cmp	r1, #9
  404c58:	46b8      	mov	r8, r7
  404c5a:	f04f 0400 	mov.w	r4, #0
  404c5e:	f63f ad2d 	bhi.w	4046bc <_vfiprintf_r+0xe8>
  404c62:	f818 2b01 	ldrb.w	r2, [r8], #1
  404c66:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404c6a:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  404c6e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404c72:	2909      	cmp	r1, #9
  404c74:	d9f5      	bls.n	404c62 <_vfiprintf_r+0x68e>
  404c76:	e521      	b.n	4046bc <_vfiprintf_r+0xe8>
  404c78:	f043 0320 	orr.w	r3, r3, #32
  404c7c:	f898 2000 	ldrb.w	r2, [r8]
  404c80:	e51a      	b.n	4046b8 <_vfiprintf_r+0xe4>
  404c82:	9608      	str	r6, [sp, #32]
  404c84:	2800      	cmp	r0, #0
  404c86:	f040 82db 	bne.w	405240 <_vfiprintf_r+0xc6c>
  404c8a:	2a00      	cmp	r2, #0
  404c8c:	f000 80e7 	beq.w	404e5e <_vfiprintf_r+0x88a>
  404c90:	2101      	movs	r1, #1
  404c92:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404c96:	f04f 0200 	mov.w	r2, #0
  404c9a:	9101      	str	r1, [sp, #4]
  404c9c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404ca0:	9105      	str	r1, [sp, #20]
  404ca2:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  404ca6:	e77b      	b.n	404ba0 <_vfiprintf_r+0x5cc>
  404ca8:	9a07      	ldr	r2, [sp, #28]
  404caa:	6813      	ldr	r3, [r2, #0]
  404cac:	3204      	adds	r2, #4
  404cae:	9207      	str	r2, [sp, #28]
  404cb0:	9a03      	ldr	r2, [sp, #12]
  404cb2:	601a      	str	r2, [r3, #0]
  404cb4:	e4cb      	b.n	40464e <_vfiprintf_r+0x7a>
  404cb6:	aa0f      	add	r2, sp, #60	; 0x3c
  404cb8:	9904      	ldr	r1, [sp, #16]
  404cba:	4620      	mov	r0, r4
  404cbc:	f7ff fc4a 	bl	404554 <__sprint_r.part.0>
  404cc0:	2800      	cmp	r0, #0
  404cc2:	f040 8139 	bne.w	404f38 <_vfiprintf_r+0x964>
  404cc6:	9910      	ldr	r1, [sp, #64]	; 0x40
  404cc8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404cca:	f101 0c01 	add.w	ip, r1, #1
  404cce:	46ce      	mov	lr, r9
  404cd0:	e5ff      	b.n	4048d2 <_vfiprintf_r+0x2fe>
  404cd2:	9910      	ldr	r1, [sp, #64]	; 0x40
  404cd4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404cd6:	1c48      	adds	r0, r1, #1
  404cd8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404cdc:	2d00      	cmp	r5, #0
  404cde:	f43f ae22 	beq.w	404926 <_vfiprintf_r+0x352>
  404ce2:	3201      	adds	r2, #1
  404ce4:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  404ce8:	2101      	movs	r1, #1
  404cea:	2807      	cmp	r0, #7
  404cec:	9211      	str	r2, [sp, #68]	; 0x44
  404cee:	9010      	str	r0, [sp, #64]	; 0x40
  404cf0:	f8ca 5000 	str.w	r5, [sl]
  404cf4:	f8ca 1004 	str.w	r1, [sl, #4]
  404cf8:	f340 8108 	ble.w	404f0c <_vfiprintf_r+0x938>
  404cfc:	2a00      	cmp	r2, #0
  404cfe:	f040 81bc 	bne.w	40507a <_vfiprintf_r+0xaa6>
  404d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404d04:	2b00      	cmp	r3, #0
  404d06:	f43f ae1f 	beq.w	404948 <_vfiprintf_r+0x374>
  404d0a:	ab0e      	add	r3, sp, #56	; 0x38
  404d0c:	2202      	movs	r2, #2
  404d0e:	4608      	mov	r0, r1
  404d10:	931c      	str	r3, [sp, #112]	; 0x70
  404d12:	921d      	str	r2, [sp, #116]	; 0x74
  404d14:	46ca      	mov	sl, r9
  404d16:	4601      	mov	r1, r0
  404d18:	f10a 0a08 	add.w	sl, sl, #8
  404d1c:	3001      	adds	r0, #1
  404d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404d20:	2b80      	cmp	r3, #128	; 0x80
  404d22:	f43f ae19 	beq.w	404958 <_vfiprintf_r+0x384>
  404d26:	9b05      	ldr	r3, [sp, #20]
  404d28:	1ae4      	subs	r4, r4, r3
  404d2a:	2c00      	cmp	r4, #0
  404d2c:	dd2e      	ble.n	404d8c <_vfiprintf_r+0x7b8>
  404d2e:	2c10      	cmp	r4, #16
  404d30:	4db3      	ldr	r5, [pc, #716]	; (405000 <_vfiprintf_r+0xa2c>)
  404d32:	dd1e      	ble.n	404d72 <_vfiprintf_r+0x79e>
  404d34:	46d6      	mov	lr, sl
  404d36:	2610      	movs	r6, #16
  404d38:	9f06      	ldr	r7, [sp, #24]
  404d3a:	f8dd a010 	ldr.w	sl, [sp, #16]
  404d3e:	e006      	b.n	404d4e <_vfiprintf_r+0x77a>
  404d40:	1c88      	adds	r0, r1, #2
  404d42:	f10e 0e08 	add.w	lr, lr, #8
  404d46:	4619      	mov	r1, r3
  404d48:	3c10      	subs	r4, #16
  404d4a:	2c10      	cmp	r4, #16
  404d4c:	dd10      	ble.n	404d70 <_vfiprintf_r+0x79c>
  404d4e:	1c4b      	adds	r3, r1, #1
  404d50:	3210      	adds	r2, #16
  404d52:	2b07      	cmp	r3, #7
  404d54:	9211      	str	r2, [sp, #68]	; 0x44
  404d56:	e88e 0060 	stmia.w	lr, {r5, r6}
  404d5a:	9310      	str	r3, [sp, #64]	; 0x40
  404d5c:	ddf0      	ble.n	404d40 <_vfiprintf_r+0x76c>
  404d5e:	2a00      	cmp	r2, #0
  404d60:	d165      	bne.n	404e2e <_vfiprintf_r+0x85a>
  404d62:	3c10      	subs	r4, #16
  404d64:	2c10      	cmp	r4, #16
  404d66:	f04f 0001 	mov.w	r0, #1
  404d6a:	4611      	mov	r1, r2
  404d6c:	46ce      	mov	lr, r9
  404d6e:	dcee      	bgt.n	404d4e <_vfiprintf_r+0x77a>
  404d70:	46f2      	mov	sl, lr
  404d72:	4422      	add	r2, r4
  404d74:	2807      	cmp	r0, #7
  404d76:	9211      	str	r2, [sp, #68]	; 0x44
  404d78:	f8ca 5000 	str.w	r5, [sl]
  404d7c:	f8ca 4004 	str.w	r4, [sl, #4]
  404d80:	9010      	str	r0, [sp, #64]	; 0x40
  404d82:	f300 8085 	bgt.w	404e90 <_vfiprintf_r+0x8bc>
  404d86:	f10a 0a08 	add.w	sl, sl, #8
  404d8a:	3001      	adds	r0, #1
  404d8c:	9905      	ldr	r1, [sp, #20]
  404d8e:	f8ca b000 	str.w	fp, [sl]
  404d92:	440a      	add	r2, r1
  404d94:	2807      	cmp	r0, #7
  404d96:	9211      	str	r2, [sp, #68]	; 0x44
  404d98:	f8ca 1004 	str.w	r1, [sl, #4]
  404d9c:	9010      	str	r0, [sp, #64]	; 0x40
  404d9e:	f340 8082 	ble.w	404ea6 <_vfiprintf_r+0x8d2>
  404da2:	2a00      	cmp	r2, #0
  404da4:	f040 8118 	bne.w	404fd8 <_vfiprintf_r+0xa04>
  404da8:	9b02      	ldr	r3, [sp, #8]
  404daa:	9210      	str	r2, [sp, #64]	; 0x40
  404dac:	0758      	lsls	r0, r3, #29
  404dae:	d535      	bpl.n	404e1c <_vfiprintf_r+0x848>
  404db0:	9b08      	ldr	r3, [sp, #32]
  404db2:	9901      	ldr	r1, [sp, #4]
  404db4:	1a5c      	subs	r4, r3, r1
  404db6:	2c00      	cmp	r4, #0
  404db8:	f340 80e7 	ble.w	404f8a <_vfiprintf_r+0x9b6>
  404dbc:	46ca      	mov	sl, r9
  404dbe:	2c10      	cmp	r4, #16
  404dc0:	f340 8218 	ble.w	4051f4 <_vfiprintf_r+0xc20>
  404dc4:	9910      	ldr	r1, [sp, #64]	; 0x40
  404dc6:	4e8f      	ldr	r6, [pc, #572]	; (405004 <_vfiprintf_r+0xa30>)
  404dc8:	9f06      	ldr	r7, [sp, #24]
  404dca:	f8dd b010 	ldr.w	fp, [sp, #16]
  404dce:	2510      	movs	r5, #16
  404dd0:	e006      	b.n	404de0 <_vfiprintf_r+0x80c>
  404dd2:	1c88      	adds	r0, r1, #2
  404dd4:	f10a 0a08 	add.w	sl, sl, #8
  404dd8:	4619      	mov	r1, r3
  404dda:	3c10      	subs	r4, #16
  404ddc:	2c10      	cmp	r4, #16
  404dde:	dd11      	ble.n	404e04 <_vfiprintf_r+0x830>
  404de0:	1c4b      	adds	r3, r1, #1
  404de2:	3210      	adds	r2, #16
  404de4:	2b07      	cmp	r3, #7
  404de6:	9211      	str	r2, [sp, #68]	; 0x44
  404de8:	f8ca 6000 	str.w	r6, [sl]
  404dec:	f8ca 5004 	str.w	r5, [sl, #4]
  404df0:	9310      	str	r3, [sp, #64]	; 0x40
  404df2:	ddee      	ble.n	404dd2 <_vfiprintf_r+0x7fe>
  404df4:	bb42      	cbnz	r2, 404e48 <_vfiprintf_r+0x874>
  404df6:	3c10      	subs	r4, #16
  404df8:	2c10      	cmp	r4, #16
  404dfa:	f04f 0001 	mov.w	r0, #1
  404dfe:	4611      	mov	r1, r2
  404e00:	46ca      	mov	sl, r9
  404e02:	dced      	bgt.n	404de0 <_vfiprintf_r+0x80c>
  404e04:	4422      	add	r2, r4
  404e06:	2807      	cmp	r0, #7
  404e08:	9211      	str	r2, [sp, #68]	; 0x44
  404e0a:	f8ca 6000 	str.w	r6, [sl]
  404e0e:	f8ca 4004 	str.w	r4, [sl, #4]
  404e12:	9010      	str	r0, [sp, #64]	; 0x40
  404e14:	dd51      	ble.n	404eba <_vfiprintf_r+0x8e6>
  404e16:	2a00      	cmp	r2, #0
  404e18:	f040 819b 	bne.w	405152 <_vfiprintf_r+0xb7e>
  404e1c:	9b03      	ldr	r3, [sp, #12]
  404e1e:	9a08      	ldr	r2, [sp, #32]
  404e20:	9901      	ldr	r1, [sp, #4]
  404e22:	428a      	cmp	r2, r1
  404e24:	bfac      	ite	ge
  404e26:	189b      	addge	r3, r3, r2
  404e28:	185b      	addlt	r3, r3, r1
  404e2a:	9303      	str	r3, [sp, #12]
  404e2c:	e04e      	b.n	404ecc <_vfiprintf_r+0x8f8>
  404e2e:	aa0f      	add	r2, sp, #60	; 0x3c
  404e30:	4651      	mov	r1, sl
  404e32:	4638      	mov	r0, r7
  404e34:	f7ff fb8e 	bl	404554 <__sprint_r.part.0>
  404e38:	2800      	cmp	r0, #0
  404e3a:	f040 813f 	bne.w	4050bc <_vfiprintf_r+0xae8>
  404e3e:	9910      	ldr	r1, [sp, #64]	; 0x40
  404e40:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404e42:	1c48      	adds	r0, r1, #1
  404e44:	46ce      	mov	lr, r9
  404e46:	e77f      	b.n	404d48 <_vfiprintf_r+0x774>
  404e48:	aa0f      	add	r2, sp, #60	; 0x3c
  404e4a:	4659      	mov	r1, fp
  404e4c:	4638      	mov	r0, r7
  404e4e:	f7ff fb81 	bl	404554 <__sprint_r.part.0>
  404e52:	b960      	cbnz	r0, 404e6e <_vfiprintf_r+0x89a>
  404e54:	9910      	ldr	r1, [sp, #64]	; 0x40
  404e56:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404e58:	1c48      	adds	r0, r1, #1
  404e5a:	46ca      	mov	sl, r9
  404e5c:	e7bd      	b.n	404dda <_vfiprintf_r+0x806>
  404e5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404e60:	f8dd b010 	ldr.w	fp, [sp, #16]
  404e64:	2b00      	cmp	r3, #0
  404e66:	f040 81d4 	bne.w	405212 <_vfiprintf_r+0xc3e>
  404e6a:	2300      	movs	r3, #0
  404e6c:	9310      	str	r3, [sp, #64]	; 0x40
  404e6e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404e72:	f013 0f01 	tst.w	r3, #1
  404e76:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404e7a:	d102      	bne.n	404e82 <_vfiprintf_r+0x8ae>
  404e7c:	059a      	lsls	r2, r3, #22
  404e7e:	f140 80de 	bpl.w	40503e <_vfiprintf_r+0xa6a>
  404e82:	065b      	lsls	r3, r3, #25
  404e84:	f53f acb2 	bmi.w	4047ec <_vfiprintf_r+0x218>
  404e88:	9803      	ldr	r0, [sp, #12]
  404e8a:	b02d      	add	sp, #180	; 0xb4
  404e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e90:	2a00      	cmp	r2, #0
  404e92:	f040 8106 	bne.w	4050a2 <_vfiprintf_r+0xace>
  404e96:	9a05      	ldr	r2, [sp, #20]
  404e98:	921d      	str	r2, [sp, #116]	; 0x74
  404e9a:	2301      	movs	r3, #1
  404e9c:	9211      	str	r2, [sp, #68]	; 0x44
  404e9e:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  404ea2:	9310      	str	r3, [sp, #64]	; 0x40
  404ea4:	46ca      	mov	sl, r9
  404ea6:	f10a 0a08 	add.w	sl, sl, #8
  404eaa:	9b02      	ldr	r3, [sp, #8]
  404eac:	0759      	lsls	r1, r3, #29
  404eae:	d504      	bpl.n	404eba <_vfiprintf_r+0x8e6>
  404eb0:	9b08      	ldr	r3, [sp, #32]
  404eb2:	9901      	ldr	r1, [sp, #4]
  404eb4:	1a5c      	subs	r4, r3, r1
  404eb6:	2c00      	cmp	r4, #0
  404eb8:	dc81      	bgt.n	404dbe <_vfiprintf_r+0x7ea>
  404eba:	9b03      	ldr	r3, [sp, #12]
  404ebc:	9908      	ldr	r1, [sp, #32]
  404ebe:	9801      	ldr	r0, [sp, #4]
  404ec0:	4281      	cmp	r1, r0
  404ec2:	bfac      	ite	ge
  404ec4:	185b      	addge	r3, r3, r1
  404ec6:	181b      	addlt	r3, r3, r0
  404ec8:	9303      	str	r3, [sp, #12]
  404eca:	bb72      	cbnz	r2, 404f2a <_vfiprintf_r+0x956>
  404ecc:	2300      	movs	r3, #0
  404ece:	9310      	str	r3, [sp, #64]	; 0x40
  404ed0:	46ca      	mov	sl, r9
  404ed2:	f7ff bbbc 	b.w	40464e <_vfiprintf_r+0x7a>
  404ed6:	aa0f      	add	r2, sp, #60	; 0x3c
  404ed8:	9904      	ldr	r1, [sp, #16]
  404eda:	4620      	mov	r0, r4
  404edc:	f7ff fb3a 	bl	404554 <__sprint_r.part.0>
  404ee0:	bb50      	cbnz	r0, 404f38 <_vfiprintf_r+0x964>
  404ee2:	9910      	ldr	r1, [sp, #64]	; 0x40
  404ee4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404ee6:	f101 0e01 	add.w	lr, r1, #1
  404eea:	46cc      	mov	ip, r9
  404eec:	e548      	b.n	404980 <_vfiprintf_r+0x3ac>
  404eee:	2a00      	cmp	r2, #0
  404ef0:	f040 8140 	bne.w	405174 <_vfiprintf_r+0xba0>
  404ef4:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  404ef8:	2900      	cmp	r1, #0
  404efa:	f000 811b 	beq.w	405134 <_vfiprintf_r+0xb60>
  404efe:	2201      	movs	r2, #1
  404f00:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  404f04:	4610      	mov	r0, r2
  404f06:	921d      	str	r2, [sp, #116]	; 0x74
  404f08:	911c      	str	r1, [sp, #112]	; 0x70
  404f0a:	46ca      	mov	sl, r9
  404f0c:	4601      	mov	r1, r0
  404f0e:	f10a 0a08 	add.w	sl, sl, #8
  404f12:	3001      	adds	r0, #1
  404f14:	e507      	b.n	404926 <_vfiprintf_r+0x352>
  404f16:	9b02      	ldr	r3, [sp, #8]
  404f18:	2a01      	cmp	r2, #1
  404f1a:	f000 8098 	beq.w	40504e <_vfiprintf_r+0xa7a>
  404f1e:	2a02      	cmp	r2, #2
  404f20:	d10d      	bne.n	404f3e <_vfiprintf_r+0x96a>
  404f22:	9302      	str	r3, [sp, #8]
  404f24:	2600      	movs	r6, #0
  404f26:	2700      	movs	r7, #0
  404f28:	e5b0      	b.n	404a8c <_vfiprintf_r+0x4b8>
  404f2a:	aa0f      	add	r2, sp, #60	; 0x3c
  404f2c:	9904      	ldr	r1, [sp, #16]
  404f2e:	9806      	ldr	r0, [sp, #24]
  404f30:	f7ff fb10 	bl	404554 <__sprint_r.part.0>
  404f34:	2800      	cmp	r0, #0
  404f36:	d0c9      	beq.n	404ecc <_vfiprintf_r+0x8f8>
  404f38:	f8dd b010 	ldr.w	fp, [sp, #16]
  404f3c:	e797      	b.n	404e6e <_vfiprintf_r+0x89a>
  404f3e:	9302      	str	r3, [sp, #8]
  404f40:	2600      	movs	r6, #0
  404f42:	2700      	movs	r7, #0
  404f44:	4649      	mov	r1, r9
  404f46:	e000      	b.n	404f4a <_vfiprintf_r+0x976>
  404f48:	4659      	mov	r1, fp
  404f4a:	08f2      	lsrs	r2, r6, #3
  404f4c:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  404f50:	08f8      	lsrs	r0, r7, #3
  404f52:	f006 0307 	and.w	r3, r6, #7
  404f56:	4607      	mov	r7, r0
  404f58:	4616      	mov	r6, r2
  404f5a:	3330      	adds	r3, #48	; 0x30
  404f5c:	ea56 0207 	orrs.w	r2, r6, r7
  404f60:	f801 3c01 	strb.w	r3, [r1, #-1]
  404f64:	f101 3bff 	add.w	fp, r1, #4294967295
  404f68:	d1ee      	bne.n	404f48 <_vfiprintf_r+0x974>
  404f6a:	9a02      	ldr	r2, [sp, #8]
  404f6c:	07d6      	lsls	r6, r2, #31
  404f6e:	f57f ad9d 	bpl.w	404aac <_vfiprintf_r+0x4d8>
  404f72:	2b30      	cmp	r3, #48	; 0x30
  404f74:	f43f ad9a 	beq.w	404aac <_vfiprintf_r+0x4d8>
  404f78:	3902      	subs	r1, #2
  404f7a:	2330      	movs	r3, #48	; 0x30
  404f7c:	f80b 3c01 	strb.w	r3, [fp, #-1]
  404f80:	eba9 0301 	sub.w	r3, r9, r1
  404f84:	9305      	str	r3, [sp, #20]
  404f86:	468b      	mov	fp, r1
  404f88:	e476      	b.n	404878 <_vfiprintf_r+0x2a4>
  404f8a:	9b03      	ldr	r3, [sp, #12]
  404f8c:	9a08      	ldr	r2, [sp, #32]
  404f8e:	428a      	cmp	r2, r1
  404f90:	bfac      	ite	ge
  404f92:	189b      	addge	r3, r3, r2
  404f94:	185b      	addlt	r3, r3, r1
  404f96:	9303      	str	r3, [sp, #12]
  404f98:	e798      	b.n	404ecc <_vfiprintf_r+0x8f8>
  404f9a:	2202      	movs	r2, #2
  404f9c:	e44d      	b.n	40483a <_vfiprintf_r+0x266>
  404f9e:	2f00      	cmp	r7, #0
  404fa0:	bf08      	it	eq
  404fa2:	2e0a      	cmpeq	r6, #10
  404fa4:	d352      	bcc.n	40504c <_vfiprintf_r+0xa78>
  404fa6:	46cb      	mov	fp, r9
  404fa8:	4630      	mov	r0, r6
  404faa:	4639      	mov	r1, r7
  404fac:	220a      	movs	r2, #10
  404fae:	2300      	movs	r3, #0
  404fb0:	f001 fc42 	bl	406838 <__aeabi_uldivmod>
  404fb4:	3230      	adds	r2, #48	; 0x30
  404fb6:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  404fba:	4630      	mov	r0, r6
  404fbc:	4639      	mov	r1, r7
  404fbe:	2300      	movs	r3, #0
  404fc0:	220a      	movs	r2, #10
  404fc2:	f001 fc39 	bl	406838 <__aeabi_uldivmod>
  404fc6:	4606      	mov	r6, r0
  404fc8:	460f      	mov	r7, r1
  404fca:	ea56 0307 	orrs.w	r3, r6, r7
  404fce:	d1eb      	bne.n	404fa8 <_vfiprintf_r+0x9d4>
  404fd0:	e56c      	b.n	404aac <_vfiprintf_r+0x4d8>
  404fd2:	9405      	str	r4, [sp, #20]
  404fd4:	46cb      	mov	fp, r9
  404fd6:	e44f      	b.n	404878 <_vfiprintf_r+0x2a4>
  404fd8:	aa0f      	add	r2, sp, #60	; 0x3c
  404fda:	9904      	ldr	r1, [sp, #16]
  404fdc:	9806      	ldr	r0, [sp, #24]
  404fde:	f7ff fab9 	bl	404554 <__sprint_r.part.0>
  404fe2:	2800      	cmp	r0, #0
  404fe4:	d1a8      	bne.n	404f38 <_vfiprintf_r+0x964>
  404fe6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404fe8:	46ca      	mov	sl, r9
  404fea:	e75e      	b.n	404eaa <_vfiprintf_r+0x8d6>
  404fec:	aa0f      	add	r2, sp, #60	; 0x3c
  404fee:	9904      	ldr	r1, [sp, #16]
  404ff0:	9806      	ldr	r0, [sp, #24]
  404ff2:	f7ff faaf 	bl	404554 <__sprint_r.part.0>
  404ff6:	2800      	cmp	r0, #0
  404ff8:	d19e      	bne.n	404f38 <_vfiprintf_r+0x964>
  404ffa:	46ca      	mov	sl, r9
  404ffc:	f7ff bbc0 	b.w	404780 <_vfiprintf_r+0x1ac>
  405000:	004075c0 	.word	0x004075c0
  405004:	004075b0 	.word	0x004075b0
  405008:	3104      	adds	r1, #4
  40500a:	6816      	ldr	r6, [r2, #0]
  40500c:	9107      	str	r1, [sp, #28]
  40500e:	2201      	movs	r2, #1
  405010:	2700      	movs	r7, #0
  405012:	e412      	b.n	40483a <_vfiprintf_r+0x266>
  405014:	9807      	ldr	r0, [sp, #28]
  405016:	4601      	mov	r1, r0
  405018:	3104      	adds	r1, #4
  40501a:	6806      	ldr	r6, [r0, #0]
  40501c:	9107      	str	r1, [sp, #28]
  40501e:	2700      	movs	r7, #0
  405020:	e40b      	b.n	40483a <_vfiprintf_r+0x266>
  405022:	680e      	ldr	r6, [r1, #0]
  405024:	3104      	adds	r1, #4
  405026:	9107      	str	r1, [sp, #28]
  405028:	2700      	movs	r7, #0
  40502a:	e591      	b.n	404b50 <_vfiprintf_r+0x57c>
  40502c:	9907      	ldr	r1, [sp, #28]
  40502e:	680e      	ldr	r6, [r1, #0]
  405030:	460a      	mov	r2, r1
  405032:	17f7      	asrs	r7, r6, #31
  405034:	3204      	adds	r2, #4
  405036:	9207      	str	r2, [sp, #28]
  405038:	4630      	mov	r0, r6
  40503a:	4639      	mov	r1, r7
  40503c:	e50f      	b.n	404a5e <_vfiprintf_r+0x48a>
  40503e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405042:	f000 fe7f 	bl	405d44 <__retarget_lock_release_recursive>
  405046:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40504a:	e71a      	b.n	404e82 <_vfiprintf_r+0x8ae>
  40504c:	9b02      	ldr	r3, [sp, #8]
  40504e:	9302      	str	r3, [sp, #8]
  405050:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  405054:	3630      	adds	r6, #48	; 0x30
  405056:	2301      	movs	r3, #1
  405058:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  40505c:	9305      	str	r3, [sp, #20]
  40505e:	e40b      	b.n	404878 <_vfiprintf_r+0x2a4>
  405060:	aa0f      	add	r2, sp, #60	; 0x3c
  405062:	9904      	ldr	r1, [sp, #16]
  405064:	9806      	ldr	r0, [sp, #24]
  405066:	f7ff fa75 	bl	404554 <__sprint_r.part.0>
  40506a:	2800      	cmp	r0, #0
  40506c:	f47f af64 	bne.w	404f38 <_vfiprintf_r+0x964>
  405070:	9910      	ldr	r1, [sp, #64]	; 0x40
  405072:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405074:	1c48      	adds	r0, r1, #1
  405076:	46ca      	mov	sl, r9
  405078:	e651      	b.n	404d1e <_vfiprintf_r+0x74a>
  40507a:	aa0f      	add	r2, sp, #60	; 0x3c
  40507c:	9904      	ldr	r1, [sp, #16]
  40507e:	9806      	ldr	r0, [sp, #24]
  405080:	f7ff fa68 	bl	404554 <__sprint_r.part.0>
  405084:	2800      	cmp	r0, #0
  405086:	f47f af57 	bne.w	404f38 <_vfiprintf_r+0x964>
  40508a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40508c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40508e:	1c48      	adds	r0, r1, #1
  405090:	46ca      	mov	sl, r9
  405092:	e448      	b.n	404926 <_vfiprintf_r+0x352>
  405094:	2a00      	cmp	r2, #0
  405096:	f040 8091 	bne.w	4051bc <_vfiprintf_r+0xbe8>
  40509a:	2001      	movs	r0, #1
  40509c:	4611      	mov	r1, r2
  40509e:	46ca      	mov	sl, r9
  4050a0:	e641      	b.n	404d26 <_vfiprintf_r+0x752>
  4050a2:	aa0f      	add	r2, sp, #60	; 0x3c
  4050a4:	9904      	ldr	r1, [sp, #16]
  4050a6:	9806      	ldr	r0, [sp, #24]
  4050a8:	f7ff fa54 	bl	404554 <__sprint_r.part.0>
  4050ac:	2800      	cmp	r0, #0
  4050ae:	f47f af43 	bne.w	404f38 <_vfiprintf_r+0x964>
  4050b2:	9810      	ldr	r0, [sp, #64]	; 0x40
  4050b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4050b6:	3001      	adds	r0, #1
  4050b8:	46ca      	mov	sl, r9
  4050ba:	e667      	b.n	404d8c <_vfiprintf_r+0x7b8>
  4050bc:	46d3      	mov	fp, sl
  4050be:	e6d6      	b.n	404e6e <_vfiprintf_r+0x89a>
  4050c0:	9e07      	ldr	r6, [sp, #28]
  4050c2:	3607      	adds	r6, #7
  4050c4:	f026 0207 	bic.w	r2, r6, #7
  4050c8:	f102 0108 	add.w	r1, r2, #8
  4050cc:	e9d2 6700 	ldrd	r6, r7, [r2]
  4050d0:	9107      	str	r1, [sp, #28]
  4050d2:	2201      	movs	r2, #1
  4050d4:	f7ff bbb1 	b.w	40483a <_vfiprintf_r+0x266>
  4050d8:	9e07      	ldr	r6, [sp, #28]
  4050da:	3607      	adds	r6, #7
  4050dc:	f026 0607 	bic.w	r6, r6, #7
  4050e0:	e9d6 0100 	ldrd	r0, r1, [r6]
  4050e4:	f106 0208 	add.w	r2, r6, #8
  4050e8:	9207      	str	r2, [sp, #28]
  4050ea:	4606      	mov	r6, r0
  4050ec:	460f      	mov	r7, r1
  4050ee:	e4b6      	b.n	404a5e <_vfiprintf_r+0x48a>
  4050f0:	9e07      	ldr	r6, [sp, #28]
  4050f2:	3607      	adds	r6, #7
  4050f4:	f026 0207 	bic.w	r2, r6, #7
  4050f8:	f102 0108 	add.w	r1, r2, #8
  4050fc:	e9d2 6700 	ldrd	r6, r7, [r2]
  405100:	9107      	str	r1, [sp, #28]
  405102:	2200      	movs	r2, #0
  405104:	f7ff bb99 	b.w	40483a <_vfiprintf_r+0x266>
  405108:	9e07      	ldr	r6, [sp, #28]
  40510a:	3607      	adds	r6, #7
  40510c:	f026 0107 	bic.w	r1, r6, #7
  405110:	f101 0008 	add.w	r0, r1, #8
  405114:	9007      	str	r0, [sp, #28]
  405116:	e9d1 6700 	ldrd	r6, r7, [r1]
  40511a:	e519      	b.n	404b50 <_vfiprintf_r+0x57c>
  40511c:	46cb      	mov	fp, r9
  40511e:	f7ff bbab 	b.w	404878 <_vfiprintf_r+0x2a4>
  405122:	252d      	movs	r5, #45	; 0x2d
  405124:	4276      	negs	r6, r6
  405126:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40512a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40512e:	2201      	movs	r2, #1
  405130:	f7ff bb88 	b.w	404844 <_vfiprintf_r+0x270>
  405134:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405136:	b9b3      	cbnz	r3, 405166 <_vfiprintf_r+0xb92>
  405138:	4611      	mov	r1, r2
  40513a:	2001      	movs	r0, #1
  40513c:	46ca      	mov	sl, r9
  40513e:	e5f2      	b.n	404d26 <_vfiprintf_r+0x752>
  405140:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405144:	f000 fdfe 	bl	405d44 <__retarget_lock_release_recursive>
  405148:	f04f 33ff 	mov.w	r3, #4294967295
  40514c:	9303      	str	r3, [sp, #12]
  40514e:	f7ff bb50 	b.w	4047f2 <_vfiprintf_r+0x21e>
  405152:	aa0f      	add	r2, sp, #60	; 0x3c
  405154:	9904      	ldr	r1, [sp, #16]
  405156:	9806      	ldr	r0, [sp, #24]
  405158:	f7ff f9fc 	bl	404554 <__sprint_r.part.0>
  40515c:	2800      	cmp	r0, #0
  40515e:	f47f aeeb 	bne.w	404f38 <_vfiprintf_r+0x964>
  405162:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405164:	e6a9      	b.n	404eba <_vfiprintf_r+0x8e6>
  405166:	ab0e      	add	r3, sp, #56	; 0x38
  405168:	2202      	movs	r2, #2
  40516a:	931c      	str	r3, [sp, #112]	; 0x70
  40516c:	921d      	str	r2, [sp, #116]	; 0x74
  40516e:	2001      	movs	r0, #1
  405170:	46ca      	mov	sl, r9
  405172:	e5d0      	b.n	404d16 <_vfiprintf_r+0x742>
  405174:	aa0f      	add	r2, sp, #60	; 0x3c
  405176:	9904      	ldr	r1, [sp, #16]
  405178:	9806      	ldr	r0, [sp, #24]
  40517a:	f7ff f9eb 	bl	404554 <__sprint_r.part.0>
  40517e:	2800      	cmp	r0, #0
  405180:	f47f aeda 	bne.w	404f38 <_vfiprintf_r+0x964>
  405184:	9910      	ldr	r1, [sp, #64]	; 0x40
  405186:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405188:	1c48      	adds	r0, r1, #1
  40518a:	46ca      	mov	sl, r9
  40518c:	e5a4      	b.n	404cd8 <_vfiprintf_r+0x704>
  40518e:	9a07      	ldr	r2, [sp, #28]
  405190:	9903      	ldr	r1, [sp, #12]
  405192:	6813      	ldr	r3, [r2, #0]
  405194:	17cd      	asrs	r5, r1, #31
  405196:	4608      	mov	r0, r1
  405198:	3204      	adds	r2, #4
  40519a:	4629      	mov	r1, r5
  40519c:	9207      	str	r2, [sp, #28]
  40519e:	e9c3 0100 	strd	r0, r1, [r3]
  4051a2:	f7ff ba54 	b.w	40464e <_vfiprintf_r+0x7a>
  4051a6:	4658      	mov	r0, fp
  4051a8:	9607      	str	r6, [sp, #28]
  4051aa:	9302      	str	r3, [sp, #8]
  4051ac:	f001 f908 	bl	4063c0 <strlen>
  4051b0:	2400      	movs	r4, #0
  4051b2:	9005      	str	r0, [sp, #20]
  4051b4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4051b8:	f7ff bb5e 	b.w	404878 <_vfiprintf_r+0x2a4>
  4051bc:	aa0f      	add	r2, sp, #60	; 0x3c
  4051be:	9904      	ldr	r1, [sp, #16]
  4051c0:	9806      	ldr	r0, [sp, #24]
  4051c2:	f7ff f9c7 	bl	404554 <__sprint_r.part.0>
  4051c6:	2800      	cmp	r0, #0
  4051c8:	f47f aeb6 	bne.w	404f38 <_vfiprintf_r+0x964>
  4051cc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4051ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4051d0:	1c48      	adds	r0, r1, #1
  4051d2:	46ca      	mov	sl, r9
  4051d4:	e5a7      	b.n	404d26 <_vfiprintf_r+0x752>
  4051d6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4051d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4051da:	4e20      	ldr	r6, [pc, #128]	; (40525c <_vfiprintf_r+0xc88>)
  4051dc:	3101      	adds	r1, #1
  4051de:	f7ff bb90 	b.w	404902 <_vfiprintf_r+0x32e>
  4051e2:	2c06      	cmp	r4, #6
  4051e4:	bf28      	it	cs
  4051e6:	2406      	movcs	r4, #6
  4051e8:	9405      	str	r4, [sp, #20]
  4051ea:	9607      	str	r6, [sp, #28]
  4051ec:	9401      	str	r4, [sp, #4]
  4051ee:	f8df b070 	ldr.w	fp, [pc, #112]	; 405260 <_vfiprintf_r+0xc8c>
  4051f2:	e4d5      	b.n	404ba0 <_vfiprintf_r+0x5cc>
  4051f4:	9810      	ldr	r0, [sp, #64]	; 0x40
  4051f6:	4e19      	ldr	r6, [pc, #100]	; (40525c <_vfiprintf_r+0xc88>)
  4051f8:	3001      	adds	r0, #1
  4051fa:	e603      	b.n	404e04 <_vfiprintf_r+0x830>
  4051fc:	9405      	str	r4, [sp, #20]
  4051fe:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405202:	9607      	str	r6, [sp, #28]
  405204:	9302      	str	r3, [sp, #8]
  405206:	4604      	mov	r4, r0
  405208:	f7ff bb36 	b.w	404878 <_vfiprintf_r+0x2a4>
  40520c:	4686      	mov	lr, r0
  40520e:	f7ff bbce 	b.w	4049ae <_vfiprintf_r+0x3da>
  405212:	9806      	ldr	r0, [sp, #24]
  405214:	aa0f      	add	r2, sp, #60	; 0x3c
  405216:	4659      	mov	r1, fp
  405218:	f7ff f99c 	bl	404554 <__sprint_r.part.0>
  40521c:	2800      	cmp	r0, #0
  40521e:	f43f ae24 	beq.w	404e6a <_vfiprintf_r+0x896>
  405222:	e624      	b.n	404e6e <_vfiprintf_r+0x89a>
  405224:	9907      	ldr	r1, [sp, #28]
  405226:	f898 2001 	ldrb.w	r2, [r8, #1]
  40522a:	680c      	ldr	r4, [r1, #0]
  40522c:	3104      	adds	r1, #4
  40522e:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  405232:	46b8      	mov	r8, r7
  405234:	9107      	str	r1, [sp, #28]
  405236:	f7ff ba3f 	b.w	4046b8 <_vfiprintf_r+0xe4>
  40523a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40523e:	e43c      	b.n	404aba <_vfiprintf_r+0x4e6>
  405240:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405244:	e521      	b.n	404c8a <_vfiprintf_r+0x6b6>
  405246:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40524a:	f7ff bbf4 	b.w	404a36 <_vfiprintf_r+0x462>
  40524e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405252:	e491      	b.n	404b78 <_vfiprintf_r+0x5a4>
  405254:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405258:	e469      	b.n	404b2e <_vfiprintf_r+0x55a>
  40525a:	bf00      	nop
  40525c:	004075b0 	.word	0x004075b0
  405260:	004075a8 	.word	0x004075a8

00405264 <__sbprintf>:
  405264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405268:	460c      	mov	r4, r1
  40526a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40526e:	8989      	ldrh	r1, [r1, #12]
  405270:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405272:	89e5      	ldrh	r5, [r4, #14]
  405274:	9619      	str	r6, [sp, #100]	; 0x64
  405276:	f021 0102 	bic.w	r1, r1, #2
  40527a:	4606      	mov	r6, r0
  40527c:	69e0      	ldr	r0, [r4, #28]
  40527e:	f8ad 100c 	strh.w	r1, [sp, #12]
  405282:	4617      	mov	r7, r2
  405284:	f44f 6180 	mov.w	r1, #1024	; 0x400
  405288:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40528a:	f8ad 500e 	strh.w	r5, [sp, #14]
  40528e:	4698      	mov	r8, r3
  405290:	ad1a      	add	r5, sp, #104	; 0x68
  405292:	2300      	movs	r3, #0
  405294:	9007      	str	r0, [sp, #28]
  405296:	a816      	add	r0, sp, #88	; 0x58
  405298:	9209      	str	r2, [sp, #36]	; 0x24
  40529a:	9306      	str	r3, [sp, #24]
  40529c:	9500      	str	r5, [sp, #0]
  40529e:	9504      	str	r5, [sp, #16]
  4052a0:	9102      	str	r1, [sp, #8]
  4052a2:	9105      	str	r1, [sp, #20]
  4052a4:	f000 fd48 	bl	405d38 <__retarget_lock_init_recursive>
  4052a8:	4643      	mov	r3, r8
  4052aa:	463a      	mov	r2, r7
  4052ac:	4669      	mov	r1, sp
  4052ae:	4630      	mov	r0, r6
  4052b0:	f7ff f990 	bl	4045d4 <_vfiprintf_r>
  4052b4:	1e05      	subs	r5, r0, #0
  4052b6:	db07      	blt.n	4052c8 <__sbprintf+0x64>
  4052b8:	4630      	mov	r0, r6
  4052ba:	4669      	mov	r1, sp
  4052bc:	f000 f928 	bl	405510 <_fflush_r>
  4052c0:	2800      	cmp	r0, #0
  4052c2:	bf18      	it	ne
  4052c4:	f04f 35ff 	movne.w	r5, #4294967295
  4052c8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4052cc:	065b      	lsls	r3, r3, #25
  4052ce:	d503      	bpl.n	4052d8 <__sbprintf+0x74>
  4052d0:	89a3      	ldrh	r3, [r4, #12]
  4052d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4052d6:	81a3      	strh	r3, [r4, #12]
  4052d8:	9816      	ldr	r0, [sp, #88]	; 0x58
  4052da:	f000 fd2f 	bl	405d3c <__retarget_lock_close_recursive>
  4052de:	4628      	mov	r0, r5
  4052e0:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4052e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004052e8 <__swsetup_r>:
  4052e8:	b538      	push	{r3, r4, r5, lr}
  4052ea:	4b30      	ldr	r3, [pc, #192]	; (4053ac <__swsetup_r+0xc4>)
  4052ec:	681b      	ldr	r3, [r3, #0]
  4052ee:	4605      	mov	r5, r0
  4052f0:	460c      	mov	r4, r1
  4052f2:	b113      	cbz	r3, 4052fa <__swsetup_r+0x12>
  4052f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4052f6:	2a00      	cmp	r2, #0
  4052f8:	d038      	beq.n	40536c <__swsetup_r+0x84>
  4052fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4052fe:	b293      	uxth	r3, r2
  405300:	0718      	lsls	r0, r3, #28
  405302:	d50c      	bpl.n	40531e <__swsetup_r+0x36>
  405304:	6920      	ldr	r0, [r4, #16]
  405306:	b1a8      	cbz	r0, 405334 <__swsetup_r+0x4c>
  405308:	f013 0201 	ands.w	r2, r3, #1
  40530c:	d01e      	beq.n	40534c <__swsetup_r+0x64>
  40530e:	6963      	ldr	r3, [r4, #20]
  405310:	2200      	movs	r2, #0
  405312:	425b      	negs	r3, r3
  405314:	61a3      	str	r3, [r4, #24]
  405316:	60a2      	str	r2, [r4, #8]
  405318:	b1f0      	cbz	r0, 405358 <__swsetup_r+0x70>
  40531a:	2000      	movs	r0, #0
  40531c:	bd38      	pop	{r3, r4, r5, pc}
  40531e:	06d9      	lsls	r1, r3, #27
  405320:	d53c      	bpl.n	40539c <__swsetup_r+0xb4>
  405322:	0758      	lsls	r0, r3, #29
  405324:	d426      	bmi.n	405374 <__swsetup_r+0x8c>
  405326:	6920      	ldr	r0, [r4, #16]
  405328:	f042 0308 	orr.w	r3, r2, #8
  40532c:	81a3      	strh	r3, [r4, #12]
  40532e:	b29b      	uxth	r3, r3
  405330:	2800      	cmp	r0, #0
  405332:	d1e9      	bne.n	405308 <__swsetup_r+0x20>
  405334:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405338:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40533c:	d0e4      	beq.n	405308 <__swsetup_r+0x20>
  40533e:	4628      	mov	r0, r5
  405340:	4621      	mov	r1, r4
  405342:	f000 fd2f 	bl	405da4 <__smakebuf_r>
  405346:	89a3      	ldrh	r3, [r4, #12]
  405348:	6920      	ldr	r0, [r4, #16]
  40534a:	e7dd      	b.n	405308 <__swsetup_r+0x20>
  40534c:	0799      	lsls	r1, r3, #30
  40534e:	bf58      	it	pl
  405350:	6962      	ldrpl	r2, [r4, #20]
  405352:	60a2      	str	r2, [r4, #8]
  405354:	2800      	cmp	r0, #0
  405356:	d1e0      	bne.n	40531a <__swsetup_r+0x32>
  405358:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40535c:	061a      	lsls	r2, r3, #24
  40535e:	d5dd      	bpl.n	40531c <__swsetup_r+0x34>
  405360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405364:	81a3      	strh	r3, [r4, #12]
  405366:	f04f 30ff 	mov.w	r0, #4294967295
  40536a:	bd38      	pop	{r3, r4, r5, pc}
  40536c:	4618      	mov	r0, r3
  40536e:	f000 f927 	bl	4055c0 <__sinit>
  405372:	e7c2      	b.n	4052fa <__swsetup_r+0x12>
  405374:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405376:	b151      	cbz	r1, 40538e <__swsetup_r+0xa6>
  405378:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40537c:	4299      	cmp	r1, r3
  40537e:	d004      	beq.n	40538a <__swsetup_r+0xa2>
  405380:	4628      	mov	r0, r5
  405382:	f000 fa43 	bl	40580c <_free_r>
  405386:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40538a:	2300      	movs	r3, #0
  40538c:	6323      	str	r3, [r4, #48]	; 0x30
  40538e:	2300      	movs	r3, #0
  405390:	6920      	ldr	r0, [r4, #16]
  405392:	6063      	str	r3, [r4, #4]
  405394:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  405398:	6020      	str	r0, [r4, #0]
  40539a:	e7c5      	b.n	405328 <__swsetup_r+0x40>
  40539c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4053a0:	2309      	movs	r3, #9
  4053a2:	602b      	str	r3, [r5, #0]
  4053a4:	f04f 30ff 	mov.w	r0, #4294967295
  4053a8:	81a2      	strh	r2, [r4, #12]
  4053aa:	bd38      	pop	{r3, r4, r5, pc}
  4053ac:	20400054 	.word	0x20400054

004053b0 <register_fini>:
  4053b0:	4b02      	ldr	r3, [pc, #8]	; (4053bc <register_fini+0xc>)
  4053b2:	b113      	cbz	r3, 4053ba <register_fini+0xa>
  4053b4:	4802      	ldr	r0, [pc, #8]	; (4053c0 <register_fini+0x10>)
  4053b6:	f000 b805 	b.w	4053c4 <atexit>
  4053ba:	4770      	bx	lr
  4053bc:	00000000 	.word	0x00000000
  4053c0:	00405631 	.word	0x00405631

004053c4 <atexit>:
  4053c4:	2300      	movs	r3, #0
  4053c6:	4601      	mov	r1, r0
  4053c8:	461a      	mov	r2, r3
  4053ca:	4618      	mov	r0, r3
  4053cc:	f001 b90c 	b.w	4065e8 <__register_exitproc>

004053d0 <__sflush_r>:
  4053d0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4053d4:	b29a      	uxth	r2, r3
  4053d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4053da:	460d      	mov	r5, r1
  4053dc:	0711      	lsls	r1, r2, #28
  4053de:	4680      	mov	r8, r0
  4053e0:	d43a      	bmi.n	405458 <__sflush_r+0x88>
  4053e2:	686a      	ldr	r2, [r5, #4]
  4053e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4053e8:	2a00      	cmp	r2, #0
  4053ea:	81ab      	strh	r3, [r5, #12]
  4053ec:	dd6f      	ble.n	4054ce <__sflush_r+0xfe>
  4053ee:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4053f0:	2c00      	cmp	r4, #0
  4053f2:	d049      	beq.n	405488 <__sflush_r+0xb8>
  4053f4:	2200      	movs	r2, #0
  4053f6:	b29b      	uxth	r3, r3
  4053f8:	f8d8 6000 	ldr.w	r6, [r8]
  4053fc:	f8c8 2000 	str.w	r2, [r8]
  405400:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  405404:	d067      	beq.n	4054d6 <__sflush_r+0x106>
  405406:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  405408:	075f      	lsls	r7, r3, #29
  40540a:	d505      	bpl.n	405418 <__sflush_r+0x48>
  40540c:	6869      	ldr	r1, [r5, #4]
  40540e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  405410:	1a52      	subs	r2, r2, r1
  405412:	b10b      	cbz	r3, 405418 <__sflush_r+0x48>
  405414:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  405416:	1ad2      	subs	r2, r2, r3
  405418:	2300      	movs	r3, #0
  40541a:	69e9      	ldr	r1, [r5, #28]
  40541c:	4640      	mov	r0, r8
  40541e:	47a0      	blx	r4
  405420:	1c44      	adds	r4, r0, #1
  405422:	d03c      	beq.n	40549e <__sflush_r+0xce>
  405424:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  405428:	692a      	ldr	r2, [r5, #16]
  40542a:	602a      	str	r2, [r5, #0]
  40542c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  405430:	2200      	movs	r2, #0
  405432:	81ab      	strh	r3, [r5, #12]
  405434:	04db      	lsls	r3, r3, #19
  405436:	606a      	str	r2, [r5, #4]
  405438:	d447      	bmi.n	4054ca <__sflush_r+0xfa>
  40543a:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40543c:	f8c8 6000 	str.w	r6, [r8]
  405440:	b311      	cbz	r1, 405488 <__sflush_r+0xb8>
  405442:	f105 0340 	add.w	r3, r5, #64	; 0x40
  405446:	4299      	cmp	r1, r3
  405448:	d002      	beq.n	405450 <__sflush_r+0x80>
  40544a:	4640      	mov	r0, r8
  40544c:	f000 f9de 	bl	40580c <_free_r>
  405450:	2000      	movs	r0, #0
  405452:	6328      	str	r0, [r5, #48]	; 0x30
  405454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405458:	692e      	ldr	r6, [r5, #16]
  40545a:	b1ae      	cbz	r6, 405488 <__sflush_r+0xb8>
  40545c:	682c      	ldr	r4, [r5, #0]
  40545e:	602e      	str	r6, [r5, #0]
  405460:	0791      	lsls	r1, r2, #30
  405462:	bf0c      	ite	eq
  405464:	696b      	ldreq	r3, [r5, #20]
  405466:	2300      	movne	r3, #0
  405468:	1ba4      	subs	r4, r4, r6
  40546a:	60ab      	str	r3, [r5, #8]
  40546c:	e00a      	b.n	405484 <__sflush_r+0xb4>
  40546e:	4623      	mov	r3, r4
  405470:	4632      	mov	r2, r6
  405472:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  405474:	69e9      	ldr	r1, [r5, #28]
  405476:	4640      	mov	r0, r8
  405478:	47b8      	blx	r7
  40547a:	2800      	cmp	r0, #0
  40547c:	eba4 0400 	sub.w	r4, r4, r0
  405480:	4406      	add	r6, r0
  405482:	dd04      	ble.n	40548e <__sflush_r+0xbe>
  405484:	2c00      	cmp	r4, #0
  405486:	dcf2      	bgt.n	40546e <__sflush_r+0x9e>
  405488:	2000      	movs	r0, #0
  40548a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40548e:	89ab      	ldrh	r3, [r5, #12]
  405490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405494:	81ab      	strh	r3, [r5, #12]
  405496:	f04f 30ff 	mov.w	r0, #4294967295
  40549a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40549e:	f8d8 4000 	ldr.w	r4, [r8]
  4054a2:	2c1d      	cmp	r4, #29
  4054a4:	d8f3      	bhi.n	40548e <__sflush_r+0xbe>
  4054a6:	4b19      	ldr	r3, [pc, #100]	; (40550c <__sflush_r+0x13c>)
  4054a8:	40e3      	lsrs	r3, r4
  4054aa:	43db      	mvns	r3, r3
  4054ac:	f013 0301 	ands.w	r3, r3, #1
  4054b0:	d1ed      	bne.n	40548e <__sflush_r+0xbe>
  4054b2:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4054b6:	606b      	str	r3, [r5, #4]
  4054b8:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4054bc:	6929      	ldr	r1, [r5, #16]
  4054be:	81ab      	strh	r3, [r5, #12]
  4054c0:	04da      	lsls	r2, r3, #19
  4054c2:	6029      	str	r1, [r5, #0]
  4054c4:	d5b9      	bpl.n	40543a <__sflush_r+0x6a>
  4054c6:	2c00      	cmp	r4, #0
  4054c8:	d1b7      	bne.n	40543a <__sflush_r+0x6a>
  4054ca:	6528      	str	r0, [r5, #80]	; 0x50
  4054cc:	e7b5      	b.n	40543a <__sflush_r+0x6a>
  4054ce:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4054d0:	2a00      	cmp	r2, #0
  4054d2:	dc8c      	bgt.n	4053ee <__sflush_r+0x1e>
  4054d4:	e7d8      	b.n	405488 <__sflush_r+0xb8>
  4054d6:	2301      	movs	r3, #1
  4054d8:	69e9      	ldr	r1, [r5, #28]
  4054da:	4640      	mov	r0, r8
  4054dc:	47a0      	blx	r4
  4054de:	1c43      	adds	r3, r0, #1
  4054e0:	4602      	mov	r2, r0
  4054e2:	d002      	beq.n	4054ea <__sflush_r+0x11a>
  4054e4:	89ab      	ldrh	r3, [r5, #12]
  4054e6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4054e8:	e78e      	b.n	405408 <__sflush_r+0x38>
  4054ea:	f8d8 3000 	ldr.w	r3, [r8]
  4054ee:	2b00      	cmp	r3, #0
  4054f0:	d0f8      	beq.n	4054e4 <__sflush_r+0x114>
  4054f2:	2b1d      	cmp	r3, #29
  4054f4:	d001      	beq.n	4054fa <__sflush_r+0x12a>
  4054f6:	2b16      	cmp	r3, #22
  4054f8:	d102      	bne.n	405500 <__sflush_r+0x130>
  4054fa:	f8c8 6000 	str.w	r6, [r8]
  4054fe:	e7c3      	b.n	405488 <__sflush_r+0xb8>
  405500:	89ab      	ldrh	r3, [r5, #12]
  405502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405506:	81ab      	strh	r3, [r5, #12]
  405508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40550c:	20400001 	.word	0x20400001

00405510 <_fflush_r>:
  405510:	b538      	push	{r3, r4, r5, lr}
  405512:	460d      	mov	r5, r1
  405514:	4604      	mov	r4, r0
  405516:	b108      	cbz	r0, 40551c <_fflush_r+0xc>
  405518:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40551a:	b1bb      	cbz	r3, 40554c <_fflush_r+0x3c>
  40551c:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  405520:	b188      	cbz	r0, 405546 <_fflush_r+0x36>
  405522:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  405524:	07db      	lsls	r3, r3, #31
  405526:	d401      	bmi.n	40552c <_fflush_r+0x1c>
  405528:	0581      	lsls	r1, r0, #22
  40552a:	d517      	bpl.n	40555c <_fflush_r+0x4c>
  40552c:	4620      	mov	r0, r4
  40552e:	4629      	mov	r1, r5
  405530:	f7ff ff4e 	bl	4053d0 <__sflush_r>
  405534:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  405536:	07da      	lsls	r2, r3, #31
  405538:	4604      	mov	r4, r0
  40553a:	d402      	bmi.n	405542 <_fflush_r+0x32>
  40553c:	89ab      	ldrh	r3, [r5, #12]
  40553e:	059b      	lsls	r3, r3, #22
  405540:	d507      	bpl.n	405552 <_fflush_r+0x42>
  405542:	4620      	mov	r0, r4
  405544:	bd38      	pop	{r3, r4, r5, pc}
  405546:	4604      	mov	r4, r0
  405548:	4620      	mov	r0, r4
  40554a:	bd38      	pop	{r3, r4, r5, pc}
  40554c:	f000 f838 	bl	4055c0 <__sinit>
  405550:	e7e4      	b.n	40551c <_fflush_r+0xc>
  405552:	6da8      	ldr	r0, [r5, #88]	; 0x58
  405554:	f000 fbf6 	bl	405d44 <__retarget_lock_release_recursive>
  405558:	4620      	mov	r0, r4
  40555a:	bd38      	pop	{r3, r4, r5, pc}
  40555c:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40555e:	f000 fbef 	bl	405d40 <__retarget_lock_acquire_recursive>
  405562:	e7e3      	b.n	40552c <_fflush_r+0x1c>

00405564 <_cleanup_r>:
  405564:	4901      	ldr	r1, [pc, #4]	; (40556c <_cleanup_r+0x8>)
  405566:	f000 bbaf 	b.w	405cc8 <_fwalk_reent>
  40556a:	bf00      	nop
  40556c:	004066d1 	.word	0x004066d1

00405570 <std.isra.0>:
  405570:	b510      	push	{r4, lr}
  405572:	2300      	movs	r3, #0
  405574:	4604      	mov	r4, r0
  405576:	8181      	strh	r1, [r0, #12]
  405578:	81c2      	strh	r2, [r0, #14]
  40557a:	6003      	str	r3, [r0, #0]
  40557c:	6043      	str	r3, [r0, #4]
  40557e:	6083      	str	r3, [r0, #8]
  405580:	6643      	str	r3, [r0, #100]	; 0x64
  405582:	6103      	str	r3, [r0, #16]
  405584:	6143      	str	r3, [r0, #20]
  405586:	6183      	str	r3, [r0, #24]
  405588:	4619      	mov	r1, r3
  40558a:	2208      	movs	r2, #8
  40558c:	305c      	adds	r0, #92	; 0x5c
  40558e:	f7fe ff75 	bl	40447c <memset>
  405592:	4807      	ldr	r0, [pc, #28]	; (4055b0 <std.isra.0+0x40>)
  405594:	4907      	ldr	r1, [pc, #28]	; (4055b4 <std.isra.0+0x44>)
  405596:	4a08      	ldr	r2, [pc, #32]	; (4055b8 <std.isra.0+0x48>)
  405598:	4b08      	ldr	r3, [pc, #32]	; (4055bc <std.isra.0+0x4c>)
  40559a:	6220      	str	r0, [r4, #32]
  40559c:	61e4      	str	r4, [r4, #28]
  40559e:	6261      	str	r1, [r4, #36]	; 0x24
  4055a0:	62a2      	str	r2, [r4, #40]	; 0x28
  4055a2:	62e3      	str	r3, [r4, #44]	; 0x2c
  4055a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4055a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4055ac:	f000 bbc4 	b.w	405d38 <__retarget_lock_init_recursive>
  4055b0:	00406325 	.word	0x00406325
  4055b4:	00406349 	.word	0x00406349
  4055b8:	00406385 	.word	0x00406385
  4055bc:	004063a5 	.word	0x004063a5

004055c0 <__sinit>:
  4055c0:	b510      	push	{r4, lr}
  4055c2:	4604      	mov	r4, r0
  4055c4:	4812      	ldr	r0, [pc, #72]	; (405610 <__sinit+0x50>)
  4055c6:	f000 fbbb 	bl	405d40 <__retarget_lock_acquire_recursive>
  4055ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4055cc:	b9d2      	cbnz	r2, 405604 <__sinit+0x44>
  4055ce:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4055d2:	4810      	ldr	r0, [pc, #64]	; (405614 <__sinit+0x54>)
  4055d4:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4055d8:	2103      	movs	r1, #3
  4055da:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4055de:	63e0      	str	r0, [r4, #60]	; 0x3c
  4055e0:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4055e4:	6860      	ldr	r0, [r4, #4]
  4055e6:	2104      	movs	r1, #4
  4055e8:	f7ff ffc2 	bl	405570 <std.isra.0>
  4055ec:	2201      	movs	r2, #1
  4055ee:	2109      	movs	r1, #9
  4055f0:	68a0      	ldr	r0, [r4, #8]
  4055f2:	f7ff ffbd 	bl	405570 <std.isra.0>
  4055f6:	2202      	movs	r2, #2
  4055f8:	2112      	movs	r1, #18
  4055fa:	68e0      	ldr	r0, [r4, #12]
  4055fc:	f7ff ffb8 	bl	405570 <std.isra.0>
  405600:	2301      	movs	r3, #1
  405602:	63a3      	str	r3, [r4, #56]	; 0x38
  405604:	4802      	ldr	r0, [pc, #8]	; (405610 <__sinit+0x50>)
  405606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40560a:	f000 bb9b 	b.w	405d44 <__retarget_lock_release_recursive>
  40560e:	bf00      	nop
  405610:	2044d0cc 	.word	0x2044d0cc
  405614:	00405565 	.word	0x00405565

00405618 <__sfp_lock_acquire>:
  405618:	4801      	ldr	r0, [pc, #4]	; (405620 <__sfp_lock_acquire+0x8>)
  40561a:	f000 bb91 	b.w	405d40 <__retarget_lock_acquire_recursive>
  40561e:	bf00      	nop
  405620:	2044d0e0 	.word	0x2044d0e0

00405624 <__sfp_lock_release>:
  405624:	4801      	ldr	r0, [pc, #4]	; (40562c <__sfp_lock_release+0x8>)
  405626:	f000 bb8d 	b.w	405d44 <__retarget_lock_release_recursive>
  40562a:	bf00      	nop
  40562c:	2044d0e0 	.word	0x2044d0e0

00405630 <__libc_fini_array>:
  405630:	b538      	push	{r3, r4, r5, lr}
  405632:	4c0a      	ldr	r4, [pc, #40]	; (40565c <__libc_fini_array+0x2c>)
  405634:	4d0a      	ldr	r5, [pc, #40]	; (405660 <__libc_fini_array+0x30>)
  405636:	1b64      	subs	r4, r4, r5
  405638:	10a4      	asrs	r4, r4, #2
  40563a:	d00a      	beq.n	405652 <__libc_fini_array+0x22>
  40563c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  405640:	3b01      	subs	r3, #1
  405642:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  405646:	3c01      	subs	r4, #1
  405648:	f855 3904 	ldr.w	r3, [r5], #-4
  40564c:	4798      	blx	r3
  40564e:	2c00      	cmp	r4, #0
  405650:	d1f9      	bne.n	405646 <__libc_fini_array+0x16>
  405652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405656:	f002 b84f 	b.w	4076f8 <_fini>
  40565a:	bf00      	nop
  40565c:	00407708 	.word	0x00407708
  405660:	00407704 	.word	0x00407704

00405664 <__fputwc>:
  405664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405668:	b082      	sub	sp, #8
  40566a:	4680      	mov	r8, r0
  40566c:	4689      	mov	r9, r1
  40566e:	4614      	mov	r4, r2
  405670:	f000 fb54 	bl	405d1c <__locale_mb_cur_max>
  405674:	2801      	cmp	r0, #1
  405676:	d036      	beq.n	4056e6 <__fputwc+0x82>
  405678:	464a      	mov	r2, r9
  40567a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40567e:	a901      	add	r1, sp, #4
  405680:	4640      	mov	r0, r8
  405682:	f000 ff63 	bl	40654c <_wcrtomb_r>
  405686:	1c42      	adds	r2, r0, #1
  405688:	4606      	mov	r6, r0
  40568a:	d025      	beq.n	4056d8 <__fputwc+0x74>
  40568c:	b3a8      	cbz	r0, 4056fa <__fputwc+0x96>
  40568e:	f89d e004 	ldrb.w	lr, [sp, #4]
  405692:	2500      	movs	r5, #0
  405694:	f10d 0a04 	add.w	sl, sp, #4
  405698:	e009      	b.n	4056ae <__fputwc+0x4a>
  40569a:	6823      	ldr	r3, [r4, #0]
  40569c:	1c5a      	adds	r2, r3, #1
  40569e:	6022      	str	r2, [r4, #0]
  4056a0:	f883 e000 	strb.w	lr, [r3]
  4056a4:	3501      	adds	r5, #1
  4056a6:	42b5      	cmp	r5, r6
  4056a8:	d227      	bcs.n	4056fa <__fputwc+0x96>
  4056aa:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4056ae:	68a3      	ldr	r3, [r4, #8]
  4056b0:	3b01      	subs	r3, #1
  4056b2:	2b00      	cmp	r3, #0
  4056b4:	60a3      	str	r3, [r4, #8]
  4056b6:	daf0      	bge.n	40569a <__fputwc+0x36>
  4056b8:	69a7      	ldr	r7, [r4, #24]
  4056ba:	42bb      	cmp	r3, r7
  4056bc:	4671      	mov	r1, lr
  4056be:	4622      	mov	r2, r4
  4056c0:	4640      	mov	r0, r8
  4056c2:	db02      	blt.n	4056ca <__fputwc+0x66>
  4056c4:	f1be 0f0a 	cmp.w	lr, #10
  4056c8:	d1e7      	bne.n	40569a <__fputwc+0x36>
  4056ca:	f000 fee7 	bl	40649c <__swbuf_r>
  4056ce:	1c43      	adds	r3, r0, #1
  4056d0:	d1e8      	bne.n	4056a4 <__fputwc+0x40>
  4056d2:	b002      	add	sp, #8
  4056d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4056d8:	89a3      	ldrh	r3, [r4, #12]
  4056da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4056de:	81a3      	strh	r3, [r4, #12]
  4056e0:	b002      	add	sp, #8
  4056e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4056e6:	f109 33ff 	add.w	r3, r9, #4294967295
  4056ea:	2bfe      	cmp	r3, #254	; 0xfe
  4056ec:	d8c4      	bhi.n	405678 <__fputwc+0x14>
  4056ee:	fa5f fe89 	uxtb.w	lr, r9
  4056f2:	4606      	mov	r6, r0
  4056f4:	f88d e004 	strb.w	lr, [sp, #4]
  4056f8:	e7cb      	b.n	405692 <__fputwc+0x2e>
  4056fa:	4648      	mov	r0, r9
  4056fc:	b002      	add	sp, #8
  4056fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405702:	bf00      	nop

00405704 <_fputwc_r>:
  405704:	b530      	push	{r4, r5, lr}
  405706:	6e53      	ldr	r3, [r2, #100]	; 0x64
  405708:	f013 0f01 	tst.w	r3, #1
  40570c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  405710:	4614      	mov	r4, r2
  405712:	b083      	sub	sp, #12
  405714:	4605      	mov	r5, r0
  405716:	b29a      	uxth	r2, r3
  405718:	d101      	bne.n	40571e <_fputwc_r+0x1a>
  40571a:	0590      	lsls	r0, r2, #22
  40571c:	d51c      	bpl.n	405758 <_fputwc_r+0x54>
  40571e:	0490      	lsls	r0, r2, #18
  405720:	d406      	bmi.n	405730 <_fputwc_r+0x2c>
  405722:	6e62      	ldr	r2, [r4, #100]	; 0x64
  405724:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405728:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40572c:	81a3      	strh	r3, [r4, #12]
  40572e:	6662      	str	r2, [r4, #100]	; 0x64
  405730:	4628      	mov	r0, r5
  405732:	4622      	mov	r2, r4
  405734:	f7ff ff96 	bl	405664 <__fputwc>
  405738:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40573a:	07da      	lsls	r2, r3, #31
  40573c:	4605      	mov	r5, r0
  40573e:	d402      	bmi.n	405746 <_fputwc_r+0x42>
  405740:	89a3      	ldrh	r3, [r4, #12]
  405742:	059b      	lsls	r3, r3, #22
  405744:	d502      	bpl.n	40574c <_fputwc_r+0x48>
  405746:	4628      	mov	r0, r5
  405748:	b003      	add	sp, #12
  40574a:	bd30      	pop	{r4, r5, pc}
  40574c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40574e:	f000 faf9 	bl	405d44 <__retarget_lock_release_recursive>
  405752:	4628      	mov	r0, r5
  405754:	b003      	add	sp, #12
  405756:	bd30      	pop	{r4, r5, pc}
  405758:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40575a:	9101      	str	r1, [sp, #4]
  40575c:	f000 faf0 	bl	405d40 <__retarget_lock_acquire_recursive>
  405760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405764:	9901      	ldr	r1, [sp, #4]
  405766:	b29a      	uxth	r2, r3
  405768:	e7d9      	b.n	40571e <_fputwc_r+0x1a>
  40576a:	bf00      	nop

0040576c <_malloc_trim_r>:
  40576c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40576e:	4f24      	ldr	r7, [pc, #144]	; (405800 <_malloc_trim_r+0x94>)
  405770:	460c      	mov	r4, r1
  405772:	4606      	mov	r6, r0
  405774:	f7fe fed0 	bl	404518 <__malloc_lock>
  405778:	68bb      	ldr	r3, [r7, #8]
  40577a:	685d      	ldr	r5, [r3, #4]
  40577c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  405780:	310f      	adds	r1, #15
  405782:	f025 0503 	bic.w	r5, r5, #3
  405786:	4429      	add	r1, r5
  405788:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40578c:	f021 010f 	bic.w	r1, r1, #15
  405790:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  405794:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405798:	db07      	blt.n	4057aa <_malloc_trim_r+0x3e>
  40579a:	2100      	movs	r1, #0
  40579c:	4630      	mov	r0, r6
  40579e:	f7fe fec7 	bl	404530 <_sbrk_r>
  4057a2:	68bb      	ldr	r3, [r7, #8]
  4057a4:	442b      	add	r3, r5
  4057a6:	4298      	cmp	r0, r3
  4057a8:	d004      	beq.n	4057b4 <_malloc_trim_r+0x48>
  4057aa:	4630      	mov	r0, r6
  4057ac:	f7fe feba 	bl	404524 <__malloc_unlock>
  4057b0:	2000      	movs	r0, #0
  4057b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4057b4:	4261      	negs	r1, r4
  4057b6:	4630      	mov	r0, r6
  4057b8:	f7fe feba 	bl	404530 <_sbrk_r>
  4057bc:	3001      	adds	r0, #1
  4057be:	d00d      	beq.n	4057dc <_malloc_trim_r+0x70>
  4057c0:	4b10      	ldr	r3, [pc, #64]	; (405804 <_malloc_trim_r+0x98>)
  4057c2:	68ba      	ldr	r2, [r7, #8]
  4057c4:	6819      	ldr	r1, [r3, #0]
  4057c6:	1b2d      	subs	r5, r5, r4
  4057c8:	f045 0501 	orr.w	r5, r5, #1
  4057cc:	4630      	mov	r0, r6
  4057ce:	1b09      	subs	r1, r1, r4
  4057d0:	6055      	str	r5, [r2, #4]
  4057d2:	6019      	str	r1, [r3, #0]
  4057d4:	f7fe fea6 	bl	404524 <__malloc_unlock>
  4057d8:	2001      	movs	r0, #1
  4057da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4057dc:	2100      	movs	r1, #0
  4057de:	4630      	mov	r0, r6
  4057e0:	f7fe fea6 	bl	404530 <_sbrk_r>
  4057e4:	68ba      	ldr	r2, [r7, #8]
  4057e6:	1a83      	subs	r3, r0, r2
  4057e8:	2b0f      	cmp	r3, #15
  4057ea:	ddde      	ble.n	4057aa <_malloc_trim_r+0x3e>
  4057ec:	4c06      	ldr	r4, [pc, #24]	; (405808 <_malloc_trim_r+0x9c>)
  4057ee:	4905      	ldr	r1, [pc, #20]	; (405804 <_malloc_trim_r+0x98>)
  4057f0:	6824      	ldr	r4, [r4, #0]
  4057f2:	f043 0301 	orr.w	r3, r3, #1
  4057f6:	1b00      	subs	r0, r0, r4
  4057f8:	6053      	str	r3, [r2, #4]
  4057fa:	6008      	str	r0, [r1, #0]
  4057fc:	e7d5      	b.n	4057aa <_malloc_trim_r+0x3e>
  4057fe:	bf00      	nop
  405800:	20400480 	.word	0x20400480
  405804:	20446800 	.word	0x20446800
  405808:	20400888 	.word	0x20400888

0040580c <_free_r>:
  40580c:	2900      	cmp	r1, #0
  40580e:	d044      	beq.n	40589a <_free_r+0x8e>
  405810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405814:	460d      	mov	r5, r1
  405816:	4680      	mov	r8, r0
  405818:	f7fe fe7e 	bl	404518 <__malloc_lock>
  40581c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  405820:	4969      	ldr	r1, [pc, #420]	; (4059c8 <_free_r+0x1bc>)
  405822:	f027 0301 	bic.w	r3, r7, #1
  405826:	f1a5 0408 	sub.w	r4, r5, #8
  40582a:	18e2      	adds	r2, r4, r3
  40582c:	688e      	ldr	r6, [r1, #8]
  40582e:	6850      	ldr	r0, [r2, #4]
  405830:	42b2      	cmp	r2, r6
  405832:	f020 0003 	bic.w	r0, r0, #3
  405836:	d05e      	beq.n	4058f6 <_free_r+0xea>
  405838:	07fe      	lsls	r6, r7, #31
  40583a:	6050      	str	r0, [r2, #4]
  40583c:	d40b      	bmi.n	405856 <_free_r+0x4a>
  40583e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  405842:	1be4      	subs	r4, r4, r7
  405844:	f101 0e08 	add.w	lr, r1, #8
  405848:	68a5      	ldr	r5, [r4, #8]
  40584a:	4575      	cmp	r5, lr
  40584c:	443b      	add	r3, r7
  40584e:	d06d      	beq.n	40592c <_free_r+0x120>
  405850:	68e7      	ldr	r7, [r4, #12]
  405852:	60ef      	str	r7, [r5, #12]
  405854:	60bd      	str	r5, [r7, #8]
  405856:	1815      	adds	r5, r2, r0
  405858:	686d      	ldr	r5, [r5, #4]
  40585a:	07ed      	lsls	r5, r5, #31
  40585c:	d53e      	bpl.n	4058dc <_free_r+0xd0>
  40585e:	f043 0201 	orr.w	r2, r3, #1
  405862:	6062      	str	r2, [r4, #4]
  405864:	50e3      	str	r3, [r4, r3]
  405866:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40586a:	d217      	bcs.n	40589c <_free_r+0x90>
  40586c:	08db      	lsrs	r3, r3, #3
  40586e:	1c58      	adds	r0, r3, #1
  405870:	109a      	asrs	r2, r3, #2
  405872:	684d      	ldr	r5, [r1, #4]
  405874:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405878:	60a7      	str	r7, [r4, #8]
  40587a:	2301      	movs	r3, #1
  40587c:	4093      	lsls	r3, r2
  40587e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  405882:	432b      	orrs	r3, r5
  405884:	3a08      	subs	r2, #8
  405886:	60e2      	str	r2, [r4, #12]
  405888:	604b      	str	r3, [r1, #4]
  40588a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40588e:	60fc      	str	r4, [r7, #12]
  405890:	4640      	mov	r0, r8
  405892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405896:	f7fe be45 	b.w	404524 <__malloc_unlock>
  40589a:	4770      	bx	lr
  40589c:	0a5a      	lsrs	r2, r3, #9
  40589e:	2a04      	cmp	r2, #4
  4058a0:	d852      	bhi.n	405948 <_free_r+0x13c>
  4058a2:	099a      	lsrs	r2, r3, #6
  4058a4:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4058a8:	00ff      	lsls	r7, r7, #3
  4058aa:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4058ae:	19c8      	adds	r0, r1, r7
  4058b0:	59ca      	ldr	r2, [r1, r7]
  4058b2:	3808      	subs	r0, #8
  4058b4:	4290      	cmp	r0, r2
  4058b6:	d04f      	beq.n	405958 <_free_r+0x14c>
  4058b8:	6851      	ldr	r1, [r2, #4]
  4058ba:	f021 0103 	bic.w	r1, r1, #3
  4058be:	428b      	cmp	r3, r1
  4058c0:	d232      	bcs.n	405928 <_free_r+0x11c>
  4058c2:	6892      	ldr	r2, [r2, #8]
  4058c4:	4290      	cmp	r0, r2
  4058c6:	d1f7      	bne.n	4058b8 <_free_r+0xac>
  4058c8:	68c3      	ldr	r3, [r0, #12]
  4058ca:	60a0      	str	r0, [r4, #8]
  4058cc:	60e3      	str	r3, [r4, #12]
  4058ce:	609c      	str	r4, [r3, #8]
  4058d0:	60c4      	str	r4, [r0, #12]
  4058d2:	4640      	mov	r0, r8
  4058d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4058d8:	f7fe be24 	b.w	404524 <__malloc_unlock>
  4058dc:	6895      	ldr	r5, [r2, #8]
  4058de:	4f3b      	ldr	r7, [pc, #236]	; (4059cc <_free_r+0x1c0>)
  4058e0:	42bd      	cmp	r5, r7
  4058e2:	4403      	add	r3, r0
  4058e4:	d040      	beq.n	405968 <_free_r+0x15c>
  4058e6:	68d0      	ldr	r0, [r2, #12]
  4058e8:	60e8      	str	r0, [r5, #12]
  4058ea:	f043 0201 	orr.w	r2, r3, #1
  4058ee:	6085      	str	r5, [r0, #8]
  4058f0:	6062      	str	r2, [r4, #4]
  4058f2:	50e3      	str	r3, [r4, r3]
  4058f4:	e7b7      	b.n	405866 <_free_r+0x5a>
  4058f6:	07ff      	lsls	r7, r7, #31
  4058f8:	4403      	add	r3, r0
  4058fa:	d407      	bmi.n	40590c <_free_r+0x100>
  4058fc:	f855 2c08 	ldr.w	r2, [r5, #-8]
  405900:	1aa4      	subs	r4, r4, r2
  405902:	4413      	add	r3, r2
  405904:	68a0      	ldr	r0, [r4, #8]
  405906:	68e2      	ldr	r2, [r4, #12]
  405908:	60c2      	str	r2, [r0, #12]
  40590a:	6090      	str	r0, [r2, #8]
  40590c:	4a30      	ldr	r2, [pc, #192]	; (4059d0 <_free_r+0x1c4>)
  40590e:	6812      	ldr	r2, [r2, #0]
  405910:	f043 0001 	orr.w	r0, r3, #1
  405914:	4293      	cmp	r3, r2
  405916:	6060      	str	r0, [r4, #4]
  405918:	608c      	str	r4, [r1, #8]
  40591a:	d3b9      	bcc.n	405890 <_free_r+0x84>
  40591c:	4b2d      	ldr	r3, [pc, #180]	; (4059d4 <_free_r+0x1c8>)
  40591e:	4640      	mov	r0, r8
  405920:	6819      	ldr	r1, [r3, #0]
  405922:	f7ff ff23 	bl	40576c <_malloc_trim_r>
  405926:	e7b3      	b.n	405890 <_free_r+0x84>
  405928:	4610      	mov	r0, r2
  40592a:	e7cd      	b.n	4058c8 <_free_r+0xbc>
  40592c:	1811      	adds	r1, r2, r0
  40592e:	6849      	ldr	r1, [r1, #4]
  405930:	07c9      	lsls	r1, r1, #31
  405932:	d444      	bmi.n	4059be <_free_r+0x1b2>
  405934:	6891      	ldr	r1, [r2, #8]
  405936:	68d2      	ldr	r2, [r2, #12]
  405938:	60ca      	str	r2, [r1, #12]
  40593a:	4403      	add	r3, r0
  40593c:	f043 0001 	orr.w	r0, r3, #1
  405940:	6091      	str	r1, [r2, #8]
  405942:	6060      	str	r0, [r4, #4]
  405944:	50e3      	str	r3, [r4, r3]
  405946:	e7a3      	b.n	405890 <_free_r+0x84>
  405948:	2a14      	cmp	r2, #20
  40594a:	d816      	bhi.n	40597a <_free_r+0x16e>
  40594c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405950:	00ff      	lsls	r7, r7, #3
  405952:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  405956:	e7aa      	b.n	4058ae <_free_r+0xa2>
  405958:	10aa      	asrs	r2, r5, #2
  40595a:	2301      	movs	r3, #1
  40595c:	684d      	ldr	r5, [r1, #4]
  40595e:	4093      	lsls	r3, r2
  405960:	432b      	orrs	r3, r5
  405962:	604b      	str	r3, [r1, #4]
  405964:	4603      	mov	r3, r0
  405966:	e7b0      	b.n	4058ca <_free_r+0xbe>
  405968:	f043 0201 	orr.w	r2, r3, #1
  40596c:	614c      	str	r4, [r1, #20]
  40596e:	610c      	str	r4, [r1, #16]
  405970:	60e5      	str	r5, [r4, #12]
  405972:	60a5      	str	r5, [r4, #8]
  405974:	6062      	str	r2, [r4, #4]
  405976:	50e3      	str	r3, [r4, r3]
  405978:	e78a      	b.n	405890 <_free_r+0x84>
  40597a:	2a54      	cmp	r2, #84	; 0x54
  40597c:	d806      	bhi.n	40598c <_free_r+0x180>
  40597e:	0b1a      	lsrs	r2, r3, #12
  405980:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  405984:	00ff      	lsls	r7, r7, #3
  405986:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40598a:	e790      	b.n	4058ae <_free_r+0xa2>
  40598c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405990:	d806      	bhi.n	4059a0 <_free_r+0x194>
  405992:	0bda      	lsrs	r2, r3, #15
  405994:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405998:	00ff      	lsls	r7, r7, #3
  40599a:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40599e:	e786      	b.n	4058ae <_free_r+0xa2>
  4059a0:	f240 5054 	movw	r0, #1364	; 0x554
  4059a4:	4282      	cmp	r2, r0
  4059a6:	d806      	bhi.n	4059b6 <_free_r+0x1aa>
  4059a8:	0c9a      	lsrs	r2, r3, #18
  4059aa:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4059ae:	00ff      	lsls	r7, r7, #3
  4059b0:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4059b4:	e77b      	b.n	4058ae <_free_r+0xa2>
  4059b6:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4059ba:	257e      	movs	r5, #126	; 0x7e
  4059bc:	e777      	b.n	4058ae <_free_r+0xa2>
  4059be:	f043 0101 	orr.w	r1, r3, #1
  4059c2:	6061      	str	r1, [r4, #4]
  4059c4:	6013      	str	r3, [r2, #0]
  4059c6:	e763      	b.n	405890 <_free_r+0x84>
  4059c8:	20400480 	.word	0x20400480
  4059cc:	20400488 	.word	0x20400488
  4059d0:	2040088c 	.word	0x2040088c
  4059d4:	20446830 	.word	0x20446830

004059d8 <__sfvwrite_r>:
  4059d8:	6893      	ldr	r3, [r2, #8]
  4059da:	2b00      	cmp	r3, #0
  4059dc:	d073      	beq.n	405ac6 <__sfvwrite_r+0xee>
  4059de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4059e2:	898b      	ldrh	r3, [r1, #12]
  4059e4:	b083      	sub	sp, #12
  4059e6:	460c      	mov	r4, r1
  4059e8:	0719      	lsls	r1, r3, #28
  4059ea:	9000      	str	r0, [sp, #0]
  4059ec:	4616      	mov	r6, r2
  4059ee:	d526      	bpl.n	405a3e <__sfvwrite_r+0x66>
  4059f0:	6922      	ldr	r2, [r4, #16]
  4059f2:	b322      	cbz	r2, 405a3e <__sfvwrite_r+0x66>
  4059f4:	f013 0002 	ands.w	r0, r3, #2
  4059f8:	6835      	ldr	r5, [r6, #0]
  4059fa:	d02c      	beq.n	405a56 <__sfvwrite_r+0x7e>
  4059fc:	f04f 0900 	mov.w	r9, #0
  405a00:	4fb0      	ldr	r7, [pc, #704]	; (405cc4 <__sfvwrite_r+0x2ec>)
  405a02:	46c8      	mov	r8, r9
  405a04:	46b2      	mov	sl, r6
  405a06:	45b8      	cmp	r8, r7
  405a08:	4643      	mov	r3, r8
  405a0a:	464a      	mov	r2, r9
  405a0c:	bf28      	it	cs
  405a0e:	463b      	movcs	r3, r7
  405a10:	9800      	ldr	r0, [sp, #0]
  405a12:	f1b8 0f00 	cmp.w	r8, #0
  405a16:	d050      	beq.n	405aba <__sfvwrite_r+0xe2>
  405a18:	69e1      	ldr	r1, [r4, #28]
  405a1a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405a1c:	47b0      	blx	r6
  405a1e:	2800      	cmp	r0, #0
  405a20:	dd58      	ble.n	405ad4 <__sfvwrite_r+0xfc>
  405a22:	f8da 3008 	ldr.w	r3, [sl, #8]
  405a26:	1a1b      	subs	r3, r3, r0
  405a28:	4481      	add	r9, r0
  405a2a:	eba8 0800 	sub.w	r8, r8, r0
  405a2e:	f8ca 3008 	str.w	r3, [sl, #8]
  405a32:	2b00      	cmp	r3, #0
  405a34:	d1e7      	bne.n	405a06 <__sfvwrite_r+0x2e>
  405a36:	2000      	movs	r0, #0
  405a38:	b003      	add	sp, #12
  405a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405a3e:	4621      	mov	r1, r4
  405a40:	9800      	ldr	r0, [sp, #0]
  405a42:	f7ff fc51 	bl	4052e8 <__swsetup_r>
  405a46:	2800      	cmp	r0, #0
  405a48:	f040 8133 	bne.w	405cb2 <__sfvwrite_r+0x2da>
  405a4c:	89a3      	ldrh	r3, [r4, #12]
  405a4e:	6835      	ldr	r5, [r6, #0]
  405a50:	f013 0002 	ands.w	r0, r3, #2
  405a54:	d1d2      	bne.n	4059fc <__sfvwrite_r+0x24>
  405a56:	f013 0901 	ands.w	r9, r3, #1
  405a5a:	d145      	bne.n	405ae8 <__sfvwrite_r+0x110>
  405a5c:	464f      	mov	r7, r9
  405a5e:	9601      	str	r6, [sp, #4]
  405a60:	b337      	cbz	r7, 405ab0 <__sfvwrite_r+0xd8>
  405a62:	059a      	lsls	r2, r3, #22
  405a64:	f8d4 8008 	ldr.w	r8, [r4, #8]
  405a68:	f140 8083 	bpl.w	405b72 <__sfvwrite_r+0x19a>
  405a6c:	4547      	cmp	r7, r8
  405a6e:	46c3      	mov	fp, r8
  405a70:	f0c0 80ab 	bcc.w	405bca <__sfvwrite_r+0x1f2>
  405a74:	f413 6f90 	tst.w	r3, #1152	; 0x480
  405a78:	f040 80ac 	bne.w	405bd4 <__sfvwrite_r+0x1fc>
  405a7c:	6820      	ldr	r0, [r4, #0]
  405a7e:	46ba      	mov	sl, r7
  405a80:	465a      	mov	r2, fp
  405a82:	4649      	mov	r1, r9
  405a84:	f000 fa44 	bl	405f10 <memmove>
  405a88:	68a2      	ldr	r2, [r4, #8]
  405a8a:	6823      	ldr	r3, [r4, #0]
  405a8c:	eba2 0208 	sub.w	r2, r2, r8
  405a90:	445b      	add	r3, fp
  405a92:	60a2      	str	r2, [r4, #8]
  405a94:	6023      	str	r3, [r4, #0]
  405a96:	9a01      	ldr	r2, [sp, #4]
  405a98:	6893      	ldr	r3, [r2, #8]
  405a9a:	eba3 030a 	sub.w	r3, r3, sl
  405a9e:	44d1      	add	r9, sl
  405aa0:	eba7 070a 	sub.w	r7, r7, sl
  405aa4:	6093      	str	r3, [r2, #8]
  405aa6:	2b00      	cmp	r3, #0
  405aa8:	d0c5      	beq.n	405a36 <__sfvwrite_r+0x5e>
  405aaa:	89a3      	ldrh	r3, [r4, #12]
  405aac:	2f00      	cmp	r7, #0
  405aae:	d1d8      	bne.n	405a62 <__sfvwrite_r+0x8a>
  405ab0:	f8d5 9000 	ldr.w	r9, [r5]
  405ab4:	686f      	ldr	r7, [r5, #4]
  405ab6:	3508      	adds	r5, #8
  405ab8:	e7d2      	b.n	405a60 <__sfvwrite_r+0x88>
  405aba:	f8d5 9000 	ldr.w	r9, [r5]
  405abe:	f8d5 8004 	ldr.w	r8, [r5, #4]
  405ac2:	3508      	adds	r5, #8
  405ac4:	e79f      	b.n	405a06 <__sfvwrite_r+0x2e>
  405ac6:	2000      	movs	r0, #0
  405ac8:	4770      	bx	lr
  405aca:	4621      	mov	r1, r4
  405acc:	9800      	ldr	r0, [sp, #0]
  405ace:	f7ff fd1f 	bl	405510 <_fflush_r>
  405ad2:	b370      	cbz	r0, 405b32 <__sfvwrite_r+0x15a>
  405ad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405adc:	f04f 30ff 	mov.w	r0, #4294967295
  405ae0:	81a3      	strh	r3, [r4, #12]
  405ae2:	b003      	add	sp, #12
  405ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ae8:	4681      	mov	r9, r0
  405aea:	4633      	mov	r3, r6
  405aec:	464e      	mov	r6, r9
  405aee:	46a8      	mov	r8, r5
  405af0:	469a      	mov	sl, r3
  405af2:	464d      	mov	r5, r9
  405af4:	b34e      	cbz	r6, 405b4a <__sfvwrite_r+0x172>
  405af6:	b380      	cbz	r0, 405b5a <__sfvwrite_r+0x182>
  405af8:	6820      	ldr	r0, [r4, #0]
  405afa:	6923      	ldr	r3, [r4, #16]
  405afc:	6962      	ldr	r2, [r4, #20]
  405afe:	45b1      	cmp	r9, r6
  405b00:	46cb      	mov	fp, r9
  405b02:	bf28      	it	cs
  405b04:	46b3      	movcs	fp, r6
  405b06:	4298      	cmp	r0, r3
  405b08:	465f      	mov	r7, fp
  405b0a:	d904      	bls.n	405b16 <__sfvwrite_r+0x13e>
  405b0c:	68a3      	ldr	r3, [r4, #8]
  405b0e:	4413      	add	r3, r2
  405b10:	459b      	cmp	fp, r3
  405b12:	f300 80a6 	bgt.w	405c62 <__sfvwrite_r+0x28a>
  405b16:	4593      	cmp	fp, r2
  405b18:	db4b      	blt.n	405bb2 <__sfvwrite_r+0x1da>
  405b1a:	4613      	mov	r3, r2
  405b1c:	6a67      	ldr	r7, [r4, #36]	; 0x24
  405b1e:	69e1      	ldr	r1, [r4, #28]
  405b20:	9800      	ldr	r0, [sp, #0]
  405b22:	462a      	mov	r2, r5
  405b24:	47b8      	blx	r7
  405b26:	1e07      	subs	r7, r0, #0
  405b28:	ddd4      	ble.n	405ad4 <__sfvwrite_r+0xfc>
  405b2a:	ebb9 0907 	subs.w	r9, r9, r7
  405b2e:	d0cc      	beq.n	405aca <__sfvwrite_r+0xf2>
  405b30:	2001      	movs	r0, #1
  405b32:	f8da 3008 	ldr.w	r3, [sl, #8]
  405b36:	1bdb      	subs	r3, r3, r7
  405b38:	443d      	add	r5, r7
  405b3a:	1bf6      	subs	r6, r6, r7
  405b3c:	f8ca 3008 	str.w	r3, [sl, #8]
  405b40:	2b00      	cmp	r3, #0
  405b42:	f43f af78 	beq.w	405a36 <__sfvwrite_r+0x5e>
  405b46:	2e00      	cmp	r6, #0
  405b48:	d1d5      	bne.n	405af6 <__sfvwrite_r+0x11e>
  405b4a:	f108 0308 	add.w	r3, r8, #8
  405b4e:	e913 0060 	ldmdb	r3, {r5, r6}
  405b52:	4698      	mov	r8, r3
  405b54:	3308      	adds	r3, #8
  405b56:	2e00      	cmp	r6, #0
  405b58:	d0f9      	beq.n	405b4e <__sfvwrite_r+0x176>
  405b5a:	4632      	mov	r2, r6
  405b5c:	210a      	movs	r1, #10
  405b5e:	4628      	mov	r0, r5
  405b60:	f000 f986 	bl	405e70 <memchr>
  405b64:	2800      	cmp	r0, #0
  405b66:	f000 80a1 	beq.w	405cac <__sfvwrite_r+0x2d4>
  405b6a:	3001      	adds	r0, #1
  405b6c:	eba0 0905 	sub.w	r9, r0, r5
  405b70:	e7c2      	b.n	405af8 <__sfvwrite_r+0x120>
  405b72:	6820      	ldr	r0, [r4, #0]
  405b74:	6923      	ldr	r3, [r4, #16]
  405b76:	4298      	cmp	r0, r3
  405b78:	d802      	bhi.n	405b80 <__sfvwrite_r+0x1a8>
  405b7a:	6963      	ldr	r3, [r4, #20]
  405b7c:	429f      	cmp	r7, r3
  405b7e:	d25d      	bcs.n	405c3c <__sfvwrite_r+0x264>
  405b80:	45b8      	cmp	r8, r7
  405b82:	bf28      	it	cs
  405b84:	46b8      	movcs	r8, r7
  405b86:	4642      	mov	r2, r8
  405b88:	4649      	mov	r1, r9
  405b8a:	f000 f9c1 	bl	405f10 <memmove>
  405b8e:	68a3      	ldr	r3, [r4, #8]
  405b90:	6822      	ldr	r2, [r4, #0]
  405b92:	eba3 0308 	sub.w	r3, r3, r8
  405b96:	4442      	add	r2, r8
  405b98:	60a3      	str	r3, [r4, #8]
  405b9a:	6022      	str	r2, [r4, #0]
  405b9c:	b10b      	cbz	r3, 405ba2 <__sfvwrite_r+0x1ca>
  405b9e:	46c2      	mov	sl, r8
  405ba0:	e779      	b.n	405a96 <__sfvwrite_r+0xbe>
  405ba2:	4621      	mov	r1, r4
  405ba4:	9800      	ldr	r0, [sp, #0]
  405ba6:	f7ff fcb3 	bl	405510 <_fflush_r>
  405baa:	2800      	cmp	r0, #0
  405bac:	d192      	bne.n	405ad4 <__sfvwrite_r+0xfc>
  405bae:	46c2      	mov	sl, r8
  405bb0:	e771      	b.n	405a96 <__sfvwrite_r+0xbe>
  405bb2:	465a      	mov	r2, fp
  405bb4:	4629      	mov	r1, r5
  405bb6:	f000 f9ab 	bl	405f10 <memmove>
  405bba:	68a2      	ldr	r2, [r4, #8]
  405bbc:	6823      	ldr	r3, [r4, #0]
  405bbe:	eba2 020b 	sub.w	r2, r2, fp
  405bc2:	445b      	add	r3, fp
  405bc4:	60a2      	str	r2, [r4, #8]
  405bc6:	6023      	str	r3, [r4, #0]
  405bc8:	e7af      	b.n	405b2a <__sfvwrite_r+0x152>
  405bca:	6820      	ldr	r0, [r4, #0]
  405bcc:	46b8      	mov	r8, r7
  405bce:	46ba      	mov	sl, r7
  405bd0:	46bb      	mov	fp, r7
  405bd2:	e755      	b.n	405a80 <__sfvwrite_r+0xa8>
  405bd4:	6962      	ldr	r2, [r4, #20]
  405bd6:	6820      	ldr	r0, [r4, #0]
  405bd8:	6921      	ldr	r1, [r4, #16]
  405bda:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  405bde:	eba0 0a01 	sub.w	sl, r0, r1
  405be2:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  405be6:	f10a 0001 	add.w	r0, sl, #1
  405bea:	ea4f 0868 	mov.w	r8, r8, asr #1
  405bee:	4438      	add	r0, r7
  405bf0:	4540      	cmp	r0, r8
  405bf2:	4642      	mov	r2, r8
  405bf4:	bf84      	itt	hi
  405bf6:	4680      	movhi	r8, r0
  405bf8:	4642      	movhi	r2, r8
  405bfa:	055b      	lsls	r3, r3, #21
  405bfc:	d544      	bpl.n	405c88 <__sfvwrite_r+0x2b0>
  405bfe:	4611      	mov	r1, r2
  405c00:	9800      	ldr	r0, [sp, #0]
  405c02:	f7fe f8f1 	bl	403de8 <_malloc_r>
  405c06:	4683      	mov	fp, r0
  405c08:	2800      	cmp	r0, #0
  405c0a:	d055      	beq.n	405cb8 <__sfvwrite_r+0x2e0>
  405c0c:	4652      	mov	r2, sl
  405c0e:	6921      	ldr	r1, [r4, #16]
  405c10:	f7fe fb9a 	bl	404348 <memcpy>
  405c14:	89a3      	ldrh	r3, [r4, #12]
  405c16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  405c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405c1e:	81a3      	strh	r3, [r4, #12]
  405c20:	eb0b 000a 	add.w	r0, fp, sl
  405c24:	eba8 030a 	sub.w	r3, r8, sl
  405c28:	f8c4 b010 	str.w	fp, [r4, #16]
  405c2c:	f8c4 8014 	str.w	r8, [r4, #20]
  405c30:	6020      	str	r0, [r4, #0]
  405c32:	60a3      	str	r3, [r4, #8]
  405c34:	46b8      	mov	r8, r7
  405c36:	46ba      	mov	sl, r7
  405c38:	46bb      	mov	fp, r7
  405c3a:	e721      	b.n	405a80 <__sfvwrite_r+0xa8>
  405c3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  405c40:	42b9      	cmp	r1, r7
  405c42:	bf28      	it	cs
  405c44:	4639      	movcs	r1, r7
  405c46:	464a      	mov	r2, r9
  405c48:	fb91 f1f3 	sdiv	r1, r1, r3
  405c4c:	9800      	ldr	r0, [sp, #0]
  405c4e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405c50:	fb03 f301 	mul.w	r3, r3, r1
  405c54:	69e1      	ldr	r1, [r4, #28]
  405c56:	47b0      	blx	r6
  405c58:	f1b0 0a00 	subs.w	sl, r0, #0
  405c5c:	f73f af1b 	bgt.w	405a96 <__sfvwrite_r+0xbe>
  405c60:	e738      	b.n	405ad4 <__sfvwrite_r+0xfc>
  405c62:	461a      	mov	r2, r3
  405c64:	4629      	mov	r1, r5
  405c66:	9301      	str	r3, [sp, #4]
  405c68:	f000 f952 	bl	405f10 <memmove>
  405c6c:	6822      	ldr	r2, [r4, #0]
  405c6e:	9b01      	ldr	r3, [sp, #4]
  405c70:	9800      	ldr	r0, [sp, #0]
  405c72:	441a      	add	r2, r3
  405c74:	6022      	str	r2, [r4, #0]
  405c76:	4621      	mov	r1, r4
  405c78:	f7ff fc4a 	bl	405510 <_fflush_r>
  405c7c:	9b01      	ldr	r3, [sp, #4]
  405c7e:	2800      	cmp	r0, #0
  405c80:	f47f af28 	bne.w	405ad4 <__sfvwrite_r+0xfc>
  405c84:	461f      	mov	r7, r3
  405c86:	e750      	b.n	405b2a <__sfvwrite_r+0x152>
  405c88:	9800      	ldr	r0, [sp, #0]
  405c8a:	f000 f9a5 	bl	405fd8 <_realloc_r>
  405c8e:	4683      	mov	fp, r0
  405c90:	2800      	cmp	r0, #0
  405c92:	d1c5      	bne.n	405c20 <__sfvwrite_r+0x248>
  405c94:	9d00      	ldr	r5, [sp, #0]
  405c96:	6921      	ldr	r1, [r4, #16]
  405c98:	4628      	mov	r0, r5
  405c9a:	f7ff fdb7 	bl	40580c <_free_r>
  405c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405ca2:	220c      	movs	r2, #12
  405ca4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  405ca8:	602a      	str	r2, [r5, #0]
  405caa:	e715      	b.n	405ad8 <__sfvwrite_r+0x100>
  405cac:	f106 0901 	add.w	r9, r6, #1
  405cb0:	e722      	b.n	405af8 <__sfvwrite_r+0x120>
  405cb2:	f04f 30ff 	mov.w	r0, #4294967295
  405cb6:	e6bf      	b.n	405a38 <__sfvwrite_r+0x60>
  405cb8:	9a00      	ldr	r2, [sp, #0]
  405cba:	230c      	movs	r3, #12
  405cbc:	6013      	str	r3, [r2, #0]
  405cbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405cc2:	e709      	b.n	405ad8 <__sfvwrite_r+0x100>
  405cc4:	7ffffc00 	.word	0x7ffffc00

00405cc8 <_fwalk_reent>:
  405cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405ccc:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  405cd0:	d01f      	beq.n	405d12 <_fwalk_reent+0x4a>
  405cd2:	4688      	mov	r8, r1
  405cd4:	4606      	mov	r6, r0
  405cd6:	f04f 0900 	mov.w	r9, #0
  405cda:	687d      	ldr	r5, [r7, #4]
  405cdc:	68bc      	ldr	r4, [r7, #8]
  405cde:	3d01      	subs	r5, #1
  405ce0:	d411      	bmi.n	405d06 <_fwalk_reent+0x3e>
  405ce2:	89a3      	ldrh	r3, [r4, #12]
  405ce4:	2b01      	cmp	r3, #1
  405ce6:	f105 35ff 	add.w	r5, r5, #4294967295
  405cea:	d908      	bls.n	405cfe <_fwalk_reent+0x36>
  405cec:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  405cf0:	3301      	adds	r3, #1
  405cf2:	4621      	mov	r1, r4
  405cf4:	4630      	mov	r0, r6
  405cf6:	d002      	beq.n	405cfe <_fwalk_reent+0x36>
  405cf8:	47c0      	blx	r8
  405cfa:	ea49 0900 	orr.w	r9, r9, r0
  405cfe:	1c6b      	adds	r3, r5, #1
  405d00:	f104 0468 	add.w	r4, r4, #104	; 0x68
  405d04:	d1ed      	bne.n	405ce2 <_fwalk_reent+0x1a>
  405d06:	683f      	ldr	r7, [r7, #0]
  405d08:	2f00      	cmp	r7, #0
  405d0a:	d1e6      	bne.n	405cda <_fwalk_reent+0x12>
  405d0c:	4648      	mov	r0, r9
  405d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405d12:	46b9      	mov	r9, r7
  405d14:	4648      	mov	r0, r9
  405d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405d1a:	bf00      	nop

00405d1c <__locale_mb_cur_max>:
  405d1c:	4b04      	ldr	r3, [pc, #16]	; (405d30 <__locale_mb_cur_max+0x14>)
  405d1e:	4a05      	ldr	r2, [pc, #20]	; (405d34 <__locale_mb_cur_max+0x18>)
  405d20:	681b      	ldr	r3, [r3, #0]
  405d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  405d24:	2b00      	cmp	r3, #0
  405d26:	bf08      	it	eq
  405d28:	4613      	moveq	r3, r2
  405d2a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  405d2e:	4770      	bx	lr
  405d30:	20400054 	.word	0x20400054
  405d34:	20400894 	.word	0x20400894

00405d38 <__retarget_lock_init_recursive>:
  405d38:	4770      	bx	lr
  405d3a:	bf00      	nop

00405d3c <__retarget_lock_close_recursive>:
  405d3c:	4770      	bx	lr
  405d3e:	bf00      	nop

00405d40 <__retarget_lock_acquire_recursive>:
  405d40:	4770      	bx	lr
  405d42:	bf00      	nop

00405d44 <__retarget_lock_release_recursive>:
  405d44:	4770      	bx	lr
  405d46:	bf00      	nop

00405d48 <__swhatbuf_r>:
  405d48:	b570      	push	{r4, r5, r6, lr}
  405d4a:	460c      	mov	r4, r1
  405d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405d50:	2900      	cmp	r1, #0
  405d52:	b090      	sub	sp, #64	; 0x40
  405d54:	4615      	mov	r5, r2
  405d56:	461e      	mov	r6, r3
  405d58:	db14      	blt.n	405d84 <__swhatbuf_r+0x3c>
  405d5a:	aa01      	add	r2, sp, #4
  405d5c:	f000 fd1a 	bl	406794 <_fstat_r>
  405d60:	2800      	cmp	r0, #0
  405d62:	db0f      	blt.n	405d84 <__swhatbuf_r+0x3c>
  405d64:	9a02      	ldr	r2, [sp, #8]
  405d66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405d6a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  405d6e:	fab2 f282 	clz	r2, r2
  405d72:	0952      	lsrs	r2, r2, #5
  405d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405d78:	f44f 6000 	mov.w	r0, #2048	; 0x800
  405d7c:	6032      	str	r2, [r6, #0]
  405d7e:	602b      	str	r3, [r5, #0]
  405d80:	b010      	add	sp, #64	; 0x40
  405d82:	bd70      	pop	{r4, r5, r6, pc}
  405d84:	89a2      	ldrh	r2, [r4, #12]
  405d86:	2300      	movs	r3, #0
  405d88:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  405d8c:	6033      	str	r3, [r6, #0]
  405d8e:	d004      	beq.n	405d9a <__swhatbuf_r+0x52>
  405d90:	2240      	movs	r2, #64	; 0x40
  405d92:	4618      	mov	r0, r3
  405d94:	602a      	str	r2, [r5, #0]
  405d96:	b010      	add	sp, #64	; 0x40
  405d98:	bd70      	pop	{r4, r5, r6, pc}
  405d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405d9e:	602b      	str	r3, [r5, #0]
  405da0:	b010      	add	sp, #64	; 0x40
  405da2:	bd70      	pop	{r4, r5, r6, pc}

00405da4 <__smakebuf_r>:
  405da4:	898a      	ldrh	r2, [r1, #12]
  405da6:	0792      	lsls	r2, r2, #30
  405da8:	460b      	mov	r3, r1
  405daa:	d506      	bpl.n	405dba <__smakebuf_r+0x16>
  405dac:	f101 0243 	add.w	r2, r1, #67	; 0x43
  405db0:	2101      	movs	r1, #1
  405db2:	601a      	str	r2, [r3, #0]
  405db4:	611a      	str	r2, [r3, #16]
  405db6:	6159      	str	r1, [r3, #20]
  405db8:	4770      	bx	lr
  405dba:	b5f0      	push	{r4, r5, r6, r7, lr}
  405dbc:	b083      	sub	sp, #12
  405dbe:	ab01      	add	r3, sp, #4
  405dc0:	466a      	mov	r2, sp
  405dc2:	460c      	mov	r4, r1
  405dc4:	4606      	mov	r6, r0
  405dc6:	f7ff ffbf 	bl	405d48 <__swhatbuf_r>
  405dca:	9900      	ldr	r1, [sp, #0]
  405dcc:	4605      	mov	r5, r0
  405dce:	4630      	mov	r0, r6
  405dd0:	f7fe f80a 	bl	403de8 <_malloc_r>
  405dd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405dd8:	b1d8      	cbz	r0, 405e12 <__smakebuf_r+0x6e>
  405dda:	9a01      	ldr	r2, [sp, #4]
  405ddc:	4f15      	ldr	r7, [pc, #84]	; (405e34 <__smakebuf_r+0x90>)
  405dde:	9900      	ldr	r1, [sp, #0]
  405de0:	63f7      	str	r7, [r6, #60]	; 0x3c
  405de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405de6:	81a3      	strh	r3, [r4, #12]
  405de8:	6020      	str	r0, [r4, #0]
  405dea:	6120      	str	r0, [r4, #16]
  405dec:	6161      	str	r1, [r4, #20]
  405dee:	b91a      	cbnz	r2, 405df8 <__smakebuf_r+0x54>
  405df0:	432b      	orrs	r3, r5
  405df2:	81a3      	strh	r3, [r4, #12]
  405df4:	b003      	add	sp, #12
  405df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405df8:	4630      	mov	r0, r6
  405dfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405dfe:	f000 fcdd 	bl	4067bc <_isatty_r>
  405e02:	b1a0      	cbz	r0, 405e2e <__smakebuf_r+0x8a>
  405e04:	89a3      	ldrh	r3, [r4, #12]
  405e06:	f023 0303 	bic.w	r3, r3, #3
  405e0a:	f043 0301 	orr.w	r3, r3, #1
  405e0e:	b21b      	sxth	r3, r3
  405e10:	e7ee      	b.n	405df0 <__smakebuf_r+0x4c>
  405e12:	059a      	lsls	r2, r3, #22
  405e14:	d4ee      	bmi.n	405df4 <__smakebuf_r+0x50>
  405e16:	f023 0303 	bic.w	r3, r3, #3
  405e1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  405e1e:	f043 0302 	orr.w	r3, r3, #2
  405e22:	2101      	movs	r1, #1
  405e24:	81a3      	strh	r3, [r4, #12]
  405e26:	6022      	str	r2, [r4, #0]
  405e28:	6122      	str	r2, [r4, #16]
  405e2a:	6161      	str	r1, [r4, #20]
  405e2c:	e7e2      	b.n	405df4 <__smakebuf_r+0x50>
  405e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405e32:	e7dd      	b.n	405df0 <__smakebuf_r+0x4c>
  405e34:	00405565 	.word	0x00405565

00405e38 <__ascii_mbtowc>:
  405e38:	b082      	sub	sp, #8
  405e3a:	b149      	cbz	r1, 405e50 <__ascii_mbtowc+0x18>
  405e3c:	b15a      	cbz	r2, 405e56 <__ascii_mbtowc+0x1e>
  405e3e:	b16b      	cbz	r3, 405e5c <__ascii_mbtowc+0x24>
  405e40:	7813      	ldrb	r3, [r2, #0]
  405e42:	600b      	str	r3, [r1, #0]
  405e44:	7812      	ldrb	r2, [r2, #0]
  405e46:	1c10      	adds	r0, r2, #0
  405e48:	bf18      	it	ne
  405e4a:	2001      	movne	r0, #1
  405e4c:	b002      	add	sp, #8
  405e4e:	4770      	bx	lr
  405e50:	a901      	add	r1, sp, #4
  405e52:	2a00      	cmp	r2, #0
  405e54:	d1f3      	bne.n	405e3e <__ascii_mbtowc+0x6>
  405e56:	4610      	mov	r0, r2
  405e58:	b002      	add	sp, #8
  405e5a:	4770      	bx	lr
  405e5c:	f06f 0001 	mvn.w	r0, #1
  405e60:	e7f4      	b.n	405e4c <__ascii_mbtowc+0x14>
  405e62:	bf00      	nop
	...

00405e70 <memchr>:
  405e70:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405e74:	2a10      	cmp	r2, #16
  405e76:	db2b      	blt.n	405ed0 <memchr+0x60>
  405e78:	f010 0f07 	tst.w	r0, #7
  405e7c:	d008      	beq.n	405e90 <memchr+0x20>
  405e7e:	f810 3b01 	ldrb.w	r3, [r0], #1
  405e82:	3a01      	subs	r2, #1
  405e84:	428b      	cmp	r3, r1
  405e86:	d02d      	beq.n	405ee4 <memchr+0x74>
  405e88:	f010 0f07 	tst.w	r0, #7
  405e8c:	b342      	cbz	r2, 405ee0 <memchr+0x70>
  405e8e:	d1f6      	bne.n	405e7e <memchr+0xe>
  405e90:	b4f0      	push	{r4, r5, r6, r7}
  405e92:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405e96:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  405e9a:	f022 0407 	bic.w	r4, r2, #7
  405e9e:	f07f 0700 	mvns.w	r7, #0
  405ea2:	2300      	movs	r3, #0
  405ea4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405ea8:	3c08      	subs	r4, #8
  405eaa:	ea85 0501 	eor.w	r5, r5, r1
  405eae:	ea86 0601 	eor.w	r6, r6, r1
  405eb2:	fa85 f547 	uadd8	r5, r5, r7
  405eb6:	faa3 f587 	sel	r5, r3, r7
  405eba:	fa86 f647 	uadd8	r6, r6, r7
  405ebe:	faa5 f687 	sel	r6, r5, r7
  405ec2:	b98e      	cbnz	r6, 405ee8 <memchr+0x78>
  405ec4:	d1ee      	bne.n	405ea4 <memchr+0x34>
  405ec6:	bcf0      	pop	{r4, r5, r6, r7}
  405ec8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405ecc:	f002 0207 	and.w	r2, r2, #7
  405ed0:	b132      	cbz	r2, 405ee0 <memchr+0x70>
  405ed2:	f810 3b01 	ldrb.w	r3, [r0], #1
  405ed6:	3a01      	subs	r2, #1
  405ed8:	ea83 0301 	eor.w	r3, r3, r1
  405edc:	b113      	cbz	r3, 405ee4 <memchr+0x74>
  405ede:	d1f8      	bne.n	405ed2 <memchr+0x62>
  405ee0:	2000      	movs	r0, #0
  405ee2:	4770      	bx	lr
  405ee4:	3801      	subs	r0, #1
  405ee6:	4770      	bx	lr
  405ee8:	2d00      	cmp	r5, #0
  405eea:	bf06      	itte	eq
  405eec:	4635      	moveq	r5, r6
  405eee:	3803      	subeq	r0, #3
  405ef0:	3807      	subne	r0, #7
  405ef2:	f015 0f01 	tst.w	r5, #1
  405ef6:	d107      	bne.n	405f08 <memchr+0x98>
  405ef8:	3001      	adds	r0, #1
  405efa:	f415 7f80 	tst.w	r5, #256	; 0x100
  405efe:	bf02      	ittt	eq
  405f00:	3001      	addeq	r0, #1
  405f02:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405f06:	3001      	addeq	r0, #1
  405f08:	bcf0      	pop	{r4, r5, r6, r7}
  405f0a:	3801      	subs	r0, #1
  405f0c:	4770      	bx	lr
  405f0e:	bf00      	nop

00405f10 <memmove>:
  405f10:	4288      	cmp	r0, r1
  405f12:	b5f0      	push	{r4, r5, r6, r7, lr}
  405f14:	d90d      	bls.n	405f32 <memmove+0x22>
  405f16:	188b      	adds	r3, r1, r2
  405f18:	4298      	cmp	r0, r3
  405f1a:	d20a      	bcs.n	405f32 <memmove+0x22>
  405f1c:	1884      	adds	r4, r0, r2
  405f1e:	2a00      	cmp	r2, #0
  405f20:	d051      	beq.n	405fc6 <memmove+0xb6>
  405f22:	4622      	mov	r2, r4
  405f24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  405f28:	f802 4d01 	strb.w	r4, [r2, #-1]!
  405f2c:	4299      	cmp	r1, r3
  405f2e:	d1f9      	bne.n	405f24 <memmove+0x14>
  405f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405f32:	2a0f      	cmp	r2, #15
  405f34:	d948      	bls.n	405fc8 <memmove+0xb8>
  405f36:	ea41 0300 	orr.w	r3, r1, r0
  405f3a:	079b      	lsls	r3, r3, #30
  405f3c:	d146      	bne.n	405fcc <memmove+0xbc>
  405f3e:	f100 0410 	add.w	r4, r0, #16
  405f42:	f101 0310 	add.w	r3, r1, #16
  405f46:	4615      	mov	r5, r2
  405f48:	f853 6c10 	ldr.w	r6, [r3, #-16]
  405f4c:	f844 6c10 	str.w	r6, [r4, #-16]
  405f50:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405f54:	f844 6c0c 	str.w	r6, [r4, #-12]
  405f58:	f853 6c08 	ldr.w	r6, [r3, #-8]
  405f5c:	f844 6c08 	str.w	r6, [r4, #-8]
  405f60:	3d10      	subs	r5, #16
  405f62:	f853 6c04 	ldr.w	r6, [r3, #-4]
  405f66:	f844 6c04 	str.w	r6, [r4, #-4]
  405f6a:	2d0f      	cmp	r5, #15
  405f6c:	f103 0310 	add.w	r3, r3, #16
  405f70:	f104 0410 	add.w	r4, r4, #16
  405f74:	d8e8      	bhi.n	405f48 <memmove+0x38>
  405f76:	f1a2 0310 	sub.w	r3, r2, #16
  405f7a:	f023 030f 	bic.w	r3, r3, #15
  405f7e:	f002 0e0f 	and.w	lr, r2, #15
  405f82:	3310      	adds	r3, #16
  405f84:	f1be 0f03 	cmp.w	lr, #3
  405f88:	4419      	add	r1, r3
  405f8a:	4403      	add	r3, r0
  405f8c:	d921      	bls.n	405fd2 <memmove+0xc2>
  405f8e:	1f1e      	subs	r6, r3, #4
  405f90:	460d      	mov	r5, r1
  405f92:	4674      	mov	r4, lr
  405f94:	3c04      	subs	r4, #4
  405f96:	f855 7b04 	ldr.w	r7, [r5], #4
  405f9a:	f846 7f04 	str.w	r7, [r6, #4]!
  405f9e:	2c03      	cmp	r4, #3
  405fa0:	d8f8      	bhi.n	405f94 <memmove+0x84>
  405fa2:	f1ae 0404 	sub.w	r4, lr, #4
  405fa6:	f024 0403 	bic.w	r4, r4, #3
  405faa:	3404      	adds	r4, #4
  405fac:	4421      	add	r1, r4
  405fae:	4423      	add	r3, r4
  405fb0:	f002 0203 	and.w	r2, r2, #3
  405fb4:	b162      	cbz	r2, 405fd0 <memmove+0xc0>
  405fb6:	3b01      	subs	r3, #1
  405fb8:	440a      	add	r2, r1
  405fba:	f811 4b01 	ldrb.w	r4, [r1], #1
  405fbe:	f803 4f01 	strb.w	r4, [r3, #1]!
  405fc2:	428a      	cmp	r2, r1
  405fc4:	d1f9      	bne.n	405fba <memmove+0xaa>
  405fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405fc8:	4603      	mov	r3, r0
  405fca:	e7f3      	b.n	405fb4 <memmove+0xa4>
  405fcc:	4603      	mov	r3, r0
  405fce:	e7f2      	b.n	405fb6 <memmove+0xa6>
  405fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405fd2:	4672      	mov	r2, lr
  405fd4:	e7ee      	b.n	405fb4 <memmove+0xa4>
  405fd6:	bf00      	nop

00405fd8 <_realloc_r>:
  405fd8:	2900      	cmp	r1, #0
  405fda:	f000 8095 	beq.w	406108 <_realloc_r+0x130>
  405fde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405fe2:	460d      	mov	r5, r1
  405fe4:	4616      	mov	r6, r2
  405fe6:	b083      	sub	sp, #12
  405fe8:	4680      	mov	r8, r0
  405fea:	f106 070b 	add.w	r7, r6, #11
  405fee:	f7fe fa93 	bl	404518 <__malloc_lock>
  405ff2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  405ff6:	2f16      	cmp	r7, #22
  405ff8:	f02e 0403 	bic.w	r4, lr, #3
  405ffc:	f1a5 0908 	sub.w	r9, r5, #8
  406000:	d83c      	bhi.n	40607c <_realloc_r+0xa4>
  406002:	2210      	movs	r2, #16
  406004:	4617      	mov	r7, r2
  406006:	42be      	cmp	r6, r7
  406008:	d83d      	bhi.n	406086 <_realloc_r+0xae>
  40600a:	4294      	cmp	r4, r2
  40600c:	da43      	bge.n	406096 <_realloc_r+0xbe>
  40600e:	4bc4      	ldr	r3, [pc, #784]	; (406320 <_realloc_r+0x348>)
  406010:	6899      	ldr	r1, [r3, #8]
  406012:	eb09 0004 	add.w	r0, r9, r4
  406016:	4288      	cmp	r0, r1
  406018:	f000 80b4 	beq.w	406184 <_realloc_r+0x1ac>
  40601c:	6843      	ldr	r3, [r0, #4]
  40601e:	f023 0101 	bic.w	r1, r3, #1
  406022:	4401      	add	r1, r0
  406024:	6849      	ldr	r1, [r1, #4]
  406026:	07c9      	lsls	r1, r1, #31
  406028:	d54c      	bpl.n	4060c4 <_realloc_r+0xec>
  40602a:	f01e 0f01 	tst.w	lr, #1
  40602e:	f000 809b 	beq.w	406168 <_realloc_r+0x190>
  406032:	4631      	mov	r1, r6
  406034:	4640      	mov	r0, r8
  406036:	f7fd fed7 	bl	403de8 <_malloc_r>
  40603a:	4606      	mov	r6, r0
  40603c:	2800      	cmp	r0, #0
  40603e:	d03a      	beq.n	4060b6 <_realloc_r+0xde>
  406040:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406044:	f023 0301 	bic.w	r3, r3, #1
  406048:	444b      	add	r3, r9
  40604a:	f1a0 0208 	sub.w	r2, r0, #8
  40604e:	429a      	cmp	r2, r3
  406050:	f000 8121 	beq.w	406296 <_realloc_r+0x2be>
  406054:	1f22      	subs	r2, r4, #4
  406056:	2a24      	cmp	r2, #36	; 0x24
  406058:	f200 8107 	bhi.w	40626a <_realloc_r+0x292>
  40605c:	2a13      	cmp	r2, #19
  40605e:	f200 80db 	bhi.w	406218 <_realloc_r+0x240>
  406062:	4603      	mov	r3, r0
  406064:	462a      	mov	r2, r5
  406066:	6811      	ldr	r1, [r2, #0]
  406068:	6019      	str	r1, [r3, #0]
  40606a:	6851      	ldr	r1, [r2, #4]
  40606c:	6059      	str	r1, [r3, #4]
  40606e:	6892      	ldr	r2, [r2, #8]
  406070:	609a      	str	r2, [r3, #8]
  406072:	4629      	mov	r1, r5
  406074:	4640      	mov	r0, r8
  406076:	f7ff fbc9 	bl	40580c <_free_r>
  40607a:	e01c      	b.n	4060b6 <_realloc_r+0xde>
  40607c:	f027 0707 	bic.w	r7, r7, #7
  406080:	2f00      	cmp	r7, #0
  406082:	463a      	mov	r2, r7
  406084:	dabf      	bge.n	406006 <_realloc_r+0x2e>
  406086:	2600      	movs	r6, #0
  406088:	230c      	movs	r3, #12
  40608a:	4630      	mov	r0, r6
  40608c:	f8c8 3000 	str.w	r3, [r8]
  406090:	b003      	add	sp, #12
  406092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406096:	462e      	mov	r6, r5
  406098:	1be3      	subs	r3, r4, r7
  40609a:	2b0f      	cmp	r3, #15
  40609c:	d81e      	bhi.n	4060dc <_realloc_r+0x104>
  40609e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4060a2:	f003 0301 	and.w	r3, r3, #1
  4060a6:	4323      	orrs	r3, r4
  4060a8:	444c      	add	r4, r9
  4060aa:	f8c9 3004 	str.w	r3, [r9, #4]
  4060ae:	6863      	ldr	r3, [r4, #4]
  4060b0:	f043 0301 	orr.w	r3, r3, #1
  4060b4:	6063      	str	r3, [r4, #4]
  4060b6:	4640      	mov	r0, r8
  4060b8:	f7fe fa34 	bl	404524 <__malloc_unlock>
  4060bc:	4630      	mov	r0, r6
  4060be:	b003      	add	sp, #12
  4060c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4060c4:	f023 0303 	bic.w	r3, r3, #3
  4060c8:	18e1      	adds	r1, r4, r3
  4060ca:	4291      	cmp	r1, r2
  4060cc:	db1f      	blt.n	40610e <_realloc_r+0x136>
  4060ce:	68c3      	ldr	r3, [r0, #12]
  4060d0:	6882      	ldr	r2, [r0, #8]
  4060d2:	462e      	mov	r6, r5
  4060d4:	60d3      	str	r3, [r2, #12]
  4060d6:	460c      	mov	r4, r1
  4060d8:	609a      	str	r2, [r3, #8]
  4060da:	e7dd      	b.n	406098 <_realloc_r+0xc0>
  4060dc:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4060e0:	eb09 0107 	add.w	r1, r9, r7
  4060e4:	f002 0201 	and.w	r2, r2, #1
  4060e8:	444c      	add	r4, r9
  4060ea:	f043 0301 	orr.w	r3, r3, #1
  4060ee:	4317      	orrs	r7, r2
  4060f0:	f8c9 7004 	str.w	r7, [r9, #4]
  4060f4:	604b      	str	r3, [r1, #4]
  4060f6:	6863      	ldr	r3, [r4, #4]
  4060f8:	f043 0301 	orr.w	r3, r3, #1
  4060fc:	3108      	adds	r1, #8
  4060fe:	6063      	str	r3, [r4, #4]
  406100:	4640      	mov	r0, r8
  406102:	f7ff fb83 	bl	40580c <_free_r>
  406106:	e7d6      	b.n	4060b6 <_realloc_r+0xde>
  406108:	4611      	mov	r1, r2
  40610a:	f7fd be6d 	b.w	403de8 <_malloc_r>
  40610e:	f01e 0f01 	tst.w	lr, #1
  406112:	d18e      	bne.n	406032 <_realloc_r+0x5a>
  406114:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406118:	eba9 0a01 	sub.w	sl, r9, r1
  40611c:	f8da 1004 	ldr.w	r1, [sl, #4]
  406120:	f021 0103 	bic.w	r1, r1, #3
  406124:	440b      	add	r3, r1
  406126:	4423      	add	r3, r4
  406128:	4293      	cmp	r3, r2
  40612a:	db25      	blt.n	406178 <_realloc_r+0x1a0>
  40612c:	68c2      	ldr	r2, [r0, #12]
  40612e:	6881      	ldr	r1, [r0, #8]
  406130:	4656      	mov	r6, sl
  406132:	60ca      	str	r2, [r1, #12]
  406134:	6091      	str	r1, [r2, #8]
  406136:	f8da 100c 	ldr.w	r1, [sl, #12]
  40613a:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40613e:	1f22      	subs	r2, r4, #4
  406140:	2a24      	cmp	r2, #36	; 0x24
  406142:	60c1      	str	r1, [r0, #12]
  406144:	6088      	str	r0, [r1, #8]
  406146:	f200 8094 	bhi.w	406272 <_realloc_r+0x29a>
  40614a:	2a13      	cmp	r2, #19
  40614c:	d96f      	bls.n	40622e <_realloc_r+0x256>
  40614e:	6829      	ldr	r1, [r5, #0]
  406150:	f8ca 1008 	str.w	r1, [sl, #8]
  406154:	6869      	ldr	r1, [r5, #4]
  406156:	f8ca 100c 	str.w	r1, [sl, #12]
  40615a:	2a1b      	cmp	r2, #27
  40615c:	f200 80a2 	bhi.w	4062a4 <_realloc_r+0x2cc>
  406160:	3508      	adds	r5, #8
  406162:	f10a 0210 	add.w	r2, sl, #16
  406166:	e063      	b.n	406230 <_realloc_r+0x258>
  406168:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40616c:	eba9 0a03 	sub.w	sl, r9, r3
  406170:	f8da 1004 	ldr.w	r1, [sl, #4]
  406174:	f021 0103 	bic.w	r1, r1, #3
  406178:	1863      	adds	r3, r4, r1
  40617a:	4293      	cmp	r3, r2
  40617c:	f6ff af59 	blt.w	406032 <_realloc_r+0x5a>
  406180:	4656      	mov	r6, sl
  406182:	e7d8      	b.n	406136 <_realloc_r+0x15e>
  406184:	6841      	ldr	r1, [r0, #4]
  406186:	f021 0b03 	bic.w	fp, r1, #3
  40618a:	44a3      	add	fp, r4
  40618c:	f107 0010 	add.w	r0, r7, #16
  406190:	4583      	cmp	fp, r0
  406192:	da56      	bge.n	406242 <_realloc_r+0x26a>
  406194:	f01e 0f01 	tst.w	lr, #1
  406198:	f47f af4b 	bne.w	406032 <_realloc_r+0x5a>
  40619c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4061a0:	eba9 0a01 	sub.w	sl, r9, r1
  4061a4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4061a8:	f021 0103 	bic.w	r1, r1, #3
  4061ac:	448b      	add	fp, r1
  4061ae:	4558      	cmp	r0, fp
  4061b0:	dce2      	bgt.n	406178 <_realloc_r+0x1a0>
  4061b2:	4656      	mov	r6, sl
  4061b4:	f8da 100c 	ldr.w	r1, [sl, #12]
  4061b8:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4061bc:	1f22      	subs	r2, r4, #4
  4061be:	2a24      	cmp	r2, #36	; 0x24
  4061c0:	60c1      	str	r1, [r0, #12]
  4061c2:	6088      	str	r0, [r1, #8]
  4061c4:	f200 808f 	bhi.w	4062e6 <_realloc_r+0x30e>
  4061c8:	2a13      	cmp	r2, #19
  4061ca:	f240 808a 	bls.w	4062e2 <_realloc_r+0x30a>
  4061ce:	6829      	ldr	r1, [r5, #0]
  4061d0:	f8ca 1008 	str.w	r1, [sl, #8]
  4061d4:	6869      	ldr	r1, [r5, #4]
  4061d6:	f8ca 100c 	str.w	r1, [sl, #12]
  4061da:	2a1b      	cmp	r2, #27
  4061dc:	f200 808a 	bhi.w	4062f4 <_realloc_r+0x31c>
  4061e0:	3508      	adds	r5, #8
  4061e2:	f10a 0210 	add.w	r2, sl, #16
  4061e6:	6829      	ldr	r1, [r5, #0]
  4061e8:	6011      	str	r1, [r2, #0]
  4061ea:	6869      	ldr	r1, [r5, #4]
  4061ec:	6051      	str	r1, [r2, #4]
  4061ee:	68a9      	ldr	r1, [r5, #8]
  4061f0:	6091      	str	r1, [r2, #8]
  4061f2:	eb0a 0107 	add.w	r1, sl, r7
  4061f6:	ebab 0207 	sub.w	r2, fp, r7
  4061fa:	f042 0201 	orr.w	r2, r2, #1
  4061fe:	6099      	str	r1, [r3, #8]
  406200:	604a      	str	r2, [r1, #4]
  406202:	f8da 3004 	ldr.w	r3, [sl, #4]
  406206:	f003 0301 	and.w	r3, r3, #1
  40620a:	431f      	orrs	r7, r3
  40620c:	4640      	mov	r0, r8
  40620e:	f8ca 7004 	str.w	r7, [sl, #4]
  406212:	f7fe f987 	bl	404524 <__malloc_unlock>
  406216:	e751      	b.n	4060bc <_realloc_r+0xe4>
  406218:	682b      	ldr	r3, [r5, #0]
  40621a:	6003      	str	r3, [r0, #0]
  40621c:	686b      	ldr	r3, [r5, #4]
  40621e:	6043      	str	r3, [r0, #4]
  406220:	2a1b      	cmp	r2, #27
  406222:	d82d      	bhi.n	406280 <_realloc_r+0x2a8>
  406224:	f100 0308 	add.w	r3, r0, #8
  406228:	f105 0208 	add.w	r2, r5, #8
  40622c:	e71b      	b.n	406066 <_realloc_r+0x8e>
  40622e:	4632      	mov	r2, r6
  406230:	6829      	ldr	r1, [r5, #0]
  406232:	6011      	str	r1, [r2, #0]
  406234:	6869      	ldr	r1, [r5, #4]
  406236:	6051      	str	r1, [r2, #4]
  406238:	68a9      	ldr	r1, [r5, #8]
  40623a:	6091      	str	r1, [r2, #8]
  40623c:	461c      	mov	r4, r3
  40623e:	46d1      	mov	r9, sl
  406240:	e72a      	b.n	406098 <_realloc_r+0xc0>
  406242:	eb09 0107 	add.w	r1, r9, r7
  406246:	ebab 0b07 	sub.w	fp, fp, r7
  40624a:	f04b 0201 	orr.w	r2, fp, #1
  40624e:	6099      	str	r1, [r3, #8]
  406250:	604a      	str	r2, [r1, #4]
  406252:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406256:	f003 0301 	and.w	r3, r3, #1
  40625a:	431f      	orrs	r7, r3
  40625c:	4640      	mov	r0, r8
  40625e:	f845 7c04 	str.w	r7, [r5, #-4]
  406262:	f7fe f95f 	bl	404524 <__malloc_unlock>
  406266:	462e      	mov	r6, r5
  406268:	e728      	b.n	4060bc <_realloc_r+0xe4>
  40626a:	4629      	mov	r1, r5
  40626c:	f7ff fe50 	bl	405f10 <memmove>
  406270:	e6ff      	b.n	406072 <_realloc_r+0x9a>
  406272:	4629      	mov	r1, r5
  406274:	4630      	mov	r0, r6
  406276:	461c      	mov	r4, r3
  406278:	46d1      	mov	r9, sl
  40627a:	f7ff fe49 	bl	405f10 <memmove>
  40627e:	e70b      	b.n	406098 <_realloc_r+0xc0>
  406280:	68ab      	ldr	r3, [r5, #8]
  406282:	6083      	str	r3, [r0, #8]
  406284:	68eb      	ldr	r3, [r5, #12]
  406286:	60c3      	str	r3, [r0, #12]
  406288:	2a24      	cmp	r2, #36	; 0x24
  40628a:	d017      	beq.n	4062bc <_realloc_r+0x2e4>
  40628c:	f100 0310 	add.w	r3, r0, #16
  406290:	f105 0210 	add.w	r2, r5, #16
  406294:	e6e7      	b.n	406066 <_realloc_r+0x8e>
  406296:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40629a:	f023 0303 	bic.w	r3, r3, #3
  40629e:	441c      	add	r4, r3
  4062a0:	462e      	mov	r6, r5
  4062a2:	e6f9      	b.n	406098 <_realloc_r+0xc0>
  4062a4:	68a9      	ldr	r1, [r5, #8]
  4062a6:	f8ca 1010 	str.w	r1, [sl, #16]
  4062aa:	68e9      	ldr	r1, [r5, #12]
  4062ac:	f8ca 1014 	str.w	r1, [sl, #20]
  4062b0:	2a24      	cmp	r2, #36	; 0x24
  4062b2:	d00c      	beq.n	4062ce <_realloc_r+0x2f6>
  4062b4:	3510      	adds	r5, #16
  4062b6:	f10a 0218 	add.w	r2, sl, #24
  4062ba:	e7b9      	b.n	406230 <_realloc_r+0x258>
  4062bc:	692b      	ldr	r3, [r5, #16]
  4062be:	6103      	str	r3, [r0, #16]
  4062c0:	696b      	ldr	r3, [r5, #20]
  4062c2:	6143      	str	r3, [r0, #20]
  4062c4:	f105 0218 	add.w	r2, r5, #24
  4062c8:	f100 0318 	add.w	r3, r0, #24
  4062cc:	e6cb      	b.n	406066 <_realloc_r+0x8e>
  4062ce:	692a      	ldr	r2, [r5, #16]
  4062d0:	f8ca 2018 	str.w	r2, [sl, #24]
  4062d4:	696a      	ldr	r2, [r5, #20]
  4062d6:	f8ca 201c 	str.w	r2, [sl, #28]
  4062da:	3518      	adds	r5, #24
  4062dc:	f10a 0220 	add.w	r2, sl, #32
  4062e0:	e7a6      	b.n	406230 <_realloc_r+0x258>
  4062e2:	4632      	mov	r2, r6
  4062e4:	e77f      	b.n	4061e6 <_realloc_r+0x20e>
  4062e6:	4629      	mov	r1, r5
  4062e8:	4630      	mov	r0, r6
  4062ea:	9301      	str	r3, [sp, #4]
  4062ec:	f7ff fe10 	bl	405f10 <memmove>
  4062f0:	9b01      	ldr	r3, [sp, #4]
  4062f2:	e77e      	b.n	4061f2 <_realloc_r+0x21a>
  4062f4:	68a9      	ldr	r1, [r5, #8]
  4062f6:	f8ca 1010 	str.w	r1, [sl, #16]
  4062fa:	68e9      	ldr	r1, [r5, #12]
  4062fc:	f8ca 1014 	str.w	r1, [sl, #20]
  406300:	2a24      	cmp	r2, #36	; 0x24
  406302:	d003      	beq.n	40630c <_realloc_r+0x334>
  406304:	3510      	adds	r5, #16
  406306:	f10a 0218 	add.w	r2, sl, #24
  40630a:	e76c      	b.n	4061e6 <_realloc_r+0x20e>
  40630c:	692a      	ldr	r2, [r5, #16]
  40630e:	f8ca 2018 	str.w	r2, [sl, #24]
  406312:	696a      	ldr	r2, [r5, #20]
  406314:	f8ca 201c 	str.w	r2, [sl, #28]
  406318:	3518      	adds	r5, #24
  40631a:	f10a 0220 	add.w	r2, sl, #32
  40631e:	e762      	b.n	4061e6 <_realloc_r+0x20e>
  406320:	20400480 	.word	0x20400480

00406324 <__sread>:
  406324:	b510      	push	{r4, lr}
  406326:	460c      	mov	r4, r1
  406328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40632c:	f000 fa6e 	bl	40680c <_read_r>
  406330:	2800      	cmp	r0, #0
  406332:	db03      	blt.n	40633c <__sread+0x18>
  406334:	6d23      	ldr	r3, [r4, #80]	; 0x50
  406336:	4403      	add	r3, r0
  406338:	6523      	str	r3, [r4, #80]	; 0x50
  40633a:	bd10      	pop	{r4, pc}
  40633c:	89a3      	ldrh	r3, [r4, #12]
  40633e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406342:	81a3      	strh	r3, [r4, #12]
  406344:	bd10      	pop	{r4, pc}
  406346:	bf00      	nop

00406348 <__swrite>:
  406348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40634c:	4616      	mov	r6, r2
  40634e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  406352:	461f      	mov	r7, r3
  406354:	05d3      	lsls	r3, r2, #23
  406356:	460c      	mov	r4, r1
  406358:	4605      	mov	r5, r0
  40635a:	d507      	bpl.n	40636c <__swrite+0x24>
  40635c:	2200      	movs	r2, #0
  40635e:	2302      	movs	r3, #2
  406360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406364:	f000 fa3c 	bl	4067e0 <_lseek_r>
  406368:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40636c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406370:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406374:	81a2      	strh	r2, [r4, #12]
  406376:	463b      	mov	r3, r7
  406378:	4632      	mov	r2, r6
  40637a:	4628      	mov	r0, r5
  40637c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406380:	f000 b91c 	b.w	4065bc <_write_r>

00406384 <__sseek>:
  406384:	b510      	push	{r4, lr}
  406386:	460c      	mov	r4, r1
  406388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40638c:	f000 fa28 	bl	4067e0 <_lseek_r>
  406390:	89a3      	ldrh	r3, [r4, #12]
  406392:	1c42      	adds	r2, r0, #1
  406394:	bf0e      	itee	eq
  406396:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40639a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40639e:	6520      	strne	r0, [r4, #80]	; 0x50
  4063a0:	81a3      	strh	r3, [r4, #12]
  4063a2:	bd10      	pop	{r4, pc}

004063a4 <__sclose>:
  4063a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4063a8:	f000 b980 	b.w	4066ac <_close_r>
	...

004063c0 <strlen>:
  4063c0:	f890 f000 	pld	[r0]
  4063c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4063c8:	f020 0107 	bic.w	r1, r0, #7
  4063cc:	f06f 0c00 	mvn.w	ip, #0
  4063d0:	f010 0407 	ands.w	r4, r0, #7
  4063d4:	f891 f020 	pld	[r1, #32]
  4063d8:	f040 8049 	bne.w	40646e <strlen+0xae>
  4063dc:	f04f 0400 	mov.w	r4, #0
  4063e0:	f06f 0007 	mvn.w	r0, #7
  4063e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4063e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4063ec:	f100 0008 	add.w	r0, r0, #8
  4063f0:	fa82 f24c 	uadd8	r2, r2, ip
  4063f4:	faa4 f28c 	sel	r2, r4, ip
  4063f8:	fa83 f34c 	uadd8	r3, r3, ip
  4063fc:	faa2 f38c 	sel	r3, r2, ip
  406400:	bb4b      	cbnz	r3, 406456 <strlen+0x96>
  406402:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406406:	fa82 f24c 	uadd8	r2, r2, ip
  40640a:	f100 0008 	add.w	r0, r0, #8
  40640e:	faa4 f28c 	sel	r2, r4, ip
  406412:	fa83 f34c 	uadd8	r3, r3, ip
  406416:	faa2 f38c 	sel	r3, r2, ip
  40641a:	b9e3      	cbnz	r3, 406456 <strlen+0x96>
  40641c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  406420:	fa82 f24c 	uadd8	r2, r2, ip
  406424:	f100 0008 	add.w	r0, r0, #8
  406428:	faa4 f28c 	sel	r2, r4, ip
  40642c:	fa83 f34c 	uadd8	r3, r3, ip
  406430:	faa2 f38c 	sel	r3, r2, ip
  406434:	b97b      	cbnz	r3, 406456 <strlen+0x96>
  406436:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40643a:	f101 0120 	add.w	r1, r1, #32
  40643e:	fa82 f24c 	uadd8	r2, r2, ip
  406442:	f100 0008 	add.w	r0, r0, #8
  406446:	faa4 f28c 	sel	r2, r4, ip
  40644a:	fa83 f34c 	uadd8	r3, r3, ip
  40644e:	faa2 f38c 	sel	r3, r2, ip
  406452:	2b00      	cmp	r3, #0
  406454:	d0c6      	beq.n	4063e4 <strlen+0x24>
  406456:	2a00      	cmp	r2, #0
  406458:	bf04      	itt	eq
  40645a:	3004      	addeq	r0, #4
  40645c:	461a      	moveq	r2, r3
  40645e:	ba12      	rev	r2, r2
  406460:	fab2 f282 	clz	r2, r2
  406464:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406468:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40646c:	4770      	bx	lr
  40646e:	e9d1 2300 	ldrd	r2, r3, [r1]
  406472:	f004 0503 	and.w	r5, r4, #3
  406476:	f1c4 0000 	rsb	r0, r4, #0
  40647a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40647e:	f014 0f04 	tst.w	r4, #4
  406482:	f891 f040 	pld	[r1, #64]	; 0x40
  406486:	fa0c f505 	lsl.w	r5, ip, r5
  40648a:	ea62 0205 	orn	r2, r2, r5
  40648e:	bf1c      	itt	ne
  406490:	ea63 0305 	ornne	r3, r3, r5
  406494:	4662      	movne	r2, ip
  406496:	f04f 0400 	mov.w	r4, #0
  40649a:	e7a9      	b.n	4063f0 <strlen+0x30>

0040649c <__swbuf_r>:
  40649c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40649e:	460d      	mov	r5, r1
  4064a0:	4614      	mov	r4, r2
  4064a2:	4606      	mov	r6, r0
  4064a4:	b110      	cbz	r0, 4064ac <__swbuf_r+0x10>
  4064a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4064a8:	2b00      	cmp	r3, #0
  4064aa:	d04b      	beq.n	406544 <__swbuf_r+0xa8>
  4064ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4064b0:	69a3      	ldr	r3, [r4, #24]
  4064b2:	60a3      	str	r3, [r4, #8]
  4064b4:	b291      	uxth	r1, r2
  4064b6:	0708      	lsls	r0, r1, #28
  4064b8:	d539      	bpl.n	40652e <__swbuf_r+0x92>
  4064ba:	6923      	ldr	r3, [r4, #16]
  4064bc:	2b00      	cmp	r3, #0
  4064be:	d036      	beq.n	40652e <__swbuf_r+0x92>
  4064c0:	b2ed      	uxtb	r5, r5
  4064c2:	0489      	lsls	r1, r1, #18
  4064c4:	462f      	mov	r7, r5
  4064c6:	d515      	bpl.n	4064f4 <__swbuf_r+0x58>
  4064c8:	6822      	ldr	r2, [r4, #0]
  4064ca:	6961      	ldr	r1, [r4, #20]
  4064cc:	1ad3      	subs	r3, r2, r3
  4064ce:	428b      	cmp	r3, r1
  4064d0:	da1c      	bge.n	40650c <__swbuf_r+0x70>
  4064d2:	3301      	adds	r3, #1
  4064d4:	68a1      	ldr	r1, [r4, #8]
  4064d6:	1c50      	adds	r0, r2, #1
  4064d8:	3901      	subs	r1, #1
  4064da:	60a1      	str	r1, [r4, #8]
  4064dc:	6020      	str	r0, [r4, #0]
  4064de:	7015      	strb	r5, [r2, #0]
  4064e0:	6962      	ldr	r2, [r4, #20]
  4064e2:	429a      	cmp	r2, r3
  4064e4:	d01a      	beq.n	40651c <__swbuf_r+0x80>
  4064e6:	89a3      	ldrh	r3, [r4, #12]
  4064e8:	07db      	lsls	r3, r3, #31
  4064ea:	d501      	bpl.n	4064f0 <__swbuf_r+0x54>
  4064ec:	2d0a      	cmp	r5, #10
  4064ee:	d015      	beq.n	40651c <__swbuf_r+0x80>
  4064f0:	4638      	mov	r0, r7
  4064f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4064f4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4064f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4064fa:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4064fe:	81a2      	strh	r2, [r4, #12]
  406500:	6822      	ldr	r2, [r4, #0]
  406502:	6661      	str	r1, [r4, #100]	; 0x64
  406504:	6961      	ldr	r1, [r4, #20]
  406506:	1ad3      	subs	r3, r2, r3
  406508:	428b      	cmp	r3, r1
  40650a:	dbe2      	blt.n	4064d2 <__swbuf_r+0x36>
  40650c:	4621      	mov	r1, r4
  40650e:	4630      	mov	r0, r6
  406510:	f7fe fffe 	bl	405510 <_fflush_r>
  406514:	b940      	cbnz	r0, 406528 <__swbuf_r+0x8c>
  406516:	6822      	ldr	r2, [r4, #0]
  406518:	2301      	movs	r3, #1
  40651a:	e7db      	b.n	4064d4 <__swbuf_r+0x38>
  40651c:	4621      	mov	r1, r4
  40651e:	4630      	mov	r0, r6
  406520:	f7fe fff6 	bl	405510 <_fflush_r>
  406524:	2800      	cmp	r0, #0
  406526:	d0e3      	beq.n	4064f0 <__swbuf_r+0x54>
  406528:	f04f 37ff 	mov.w	r7, #4294967295
  40652c:	e7e0      	b.n	4064f0 <__swbuf_r+0x54>
  40652e:	4621      	mov	r1, r4
  406530:	4630      	mov	r0, r6
  406532:	f7fe fed9 	bl	4052e8 <__swsetup_r>
  406536:	2800      	cmp	r0, #0
  406538:	d1f6      	bne.n	406528 <__swbuf_r+0x8c>
  40653a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40653e:	6923      	ldr	r3, [r4, #16]
  406540:	b291      	uxth	r1, r2
  406542:	e7bd      	b.n	4064c0 <__swbuf_r+0x24>
  406544:	f7ff f83c 	bl	4055c0 <__sinit>
  406548:	e7b0      	b.n	4064ac <__swbuf_r+0x10>
  40654a:	bf00      	nop

0040654c <_wcrtomb_r>:
  40654c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40654e:	4606      	mov	r6, r0
  406550:	b085      	sub	sp, #20
  406552:	461f      	mov	r7, r3
  406554:	b189      	cbz	r1, 40657a <_wcrtomb_r+0x2e>
  406556:	4c10      	ldr	r4, [pc, #64]	; (406598 <_wcrtomb_r+0x4c>)
  406558:	4d10      	ldr	r5, [pc, #64]	; (40659c <_wcrtomb_r+0x50>)
  40655a:	6824      	ldr	r4, [r4, #0]
  40655c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40655e:	2c00      	cmp	r4, #0
  406560:	bf08      	it	eq
  406562:	462c      	moveq	r4, r5
  406564:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  406568:	47a0      	blx	r4
  40656a:	1c43      	adds	r3, r0, #1
  40656c:	d103      	bne.n	406576 <_wcrtomb_r+0x2a>
  40656e:	2200      	movs	r2, #0
  406570:	238a      	movs	r3, #138	; 0x8a
  406572:	603a      	str	r2, [r7, #0]
  406574:	6033      	str	r3, [r6, #0]
  406576:	b005      	add	sp, #20
  406578:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40657a:	460c      	mov	r4, r1
  40657c:	4906      	ldr	r1, [pc, #24]	; (406598 <_wcrtomb_r+0x4c>)
  40657e:	4a07      	ldr	r2, [pc, #28]	; (40659c <_wcrtomb_r+0x50>)
  406580:	6809      	ldr	r1, [r1, #0]
  406582:	6b49      	ldr	r1, [r1, #52]	; 0x34
  406584:	2900      	cmp	r1, #0
  406586:	bf08      	it	eq
  406588:	4611      	moveq	r1, r2
  40658a:	4622      	mov	r2, r4
  40658c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  406590:	a901      	add	r1, sp, #4
  406592:	47a0      	blx	r4
  406594:	e7e9      	b.n	40656a <_wcrtomb_r+0x1e>
  406596:	bf00      	nop
  406598:	20400054 	.word	0x20400054
  40659c:	20400894 	.word	0x20400894

004065a0 <__ascii_wctomb>:
  4065a0:	b121      	cbz	r1, 4065ac <__ascii_wctomb+0xc>
  4065a2:	2aff      	cmp	r2, #255	; 0xff
  4065a4:	d804      	bhi.n	4065b0 <__ascii_wctomb+0x10>
  4065a6:	700a      	strb	r2, [r1, #0]
  4065a8:	2001      	movs	r0, #1
  4065aa:	4770      	bx	lr
  4065ac:	4608      	mov	r0, r1
  4065ae:	4770      	bx	lr
  4065b0:	238a      	movs	r3, #138	; 0x8a
  4065b2:	6003      	str	r3, [r0, #0]
  4065b4:	f04f 30ff 	mov.w	r0, #4294967295
  4065b8:	4770      	bx	lr
  4065ba:	bf00      	nop

004065bc <_write_r>:
  4065bc:	b570      	push	{r4, r5, r6, lr}
  4065be:	460d      	mov	r5, r1
  4065c0:	4c08      	ldr	r4, [pc, #32]	; (4065e4 <_write_r+0x28>)
  4065c2:	4611      	mov	r1, r2
  4065c4:	4606      	mov	r6, r0
  4065c6:	461a      	mov	r2, r3
  4065c8:	4628      	mov	r0, r5
  4065ca:	2300      	movs	r3, #0
  4065cc:	6023      	str	r3, [r4, #0]
  4065ce:	f7fa fe6d 	bl	4012ac <_write>
  4065d2:	1c43      	adds	r3, r0, #1
  4065d4:	d000      	beq.n	4065d8 <_write_r+0x1c>
  4065d6:	bd70      	pop	{r4, r5, r6, pc}
  4065d8:	6823      	ldr	r3, [r4, #0]
  4065da:	2b00      	cmp	r3, #0
  4065dc:	d0fb      	beq.n	4065d6 <_write_r+0x1a>
  4065de:	6033      	str	r3, [r6, #0]
  4065e0:	bd70      	pop	{r4, r5, r6, pc}
  4065e2:	bf00      	nop
  4065e4:	2044d0e4 	.word	0x2044d0e4

004065e8 <__register_exitproc>:
  4065e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4065ec:	4d2c      	ldr	r5, [pc, #176]	; (4066a0 <__register_exitproc+0xb8>)
  4065ee:	4606      	mov	r6, r0
  4065f0:	6828      	ldr	r0, [r5, #0]
  4065f2:	4698      	mov	r8, r3
  4065f4:	460f      	mov	r7, r1
  4065f6:	4691      	mov	r9, r2
  4065f8:	f7ff fba2 	bl	405d40 <__retarget_lock_acquire_recursive>
  4065fc:	4b29      	ldr	r3, [pc, #164]	; (4066a4 <__register_exitproc+0xbc>)
  4065fe:	681c      	ldr	r4, [r3, #0]
  406600:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  406604:	2b00      	cmp	r3, #0
  406606:	d03e      	beq.n	406686 <__register_exitproc+0x9e>
  406608:	685a      	ldr	r2, [r3, #4]
  40660a:	2a1f      	cmp	r2, #31
  40660c:	dc1c      	bgt.n	406648 <__register_exitproc+0x60>
  40660e:	f102 0e01 	add.w	lr, r2, #1
  406612:	b176      	cbz	r6, 406632 <__register_exitproc+0x4a>
  406614:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  406618:	2401      	movs	r4, #1
  40661a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40661e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  406622:	4094      	lsls	r4, r2
  406624:	4320      	orrs	r0, r4
  406626:	2e02      	cmp	r6, #2
  406628:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40662c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  406630:	d023      	beq.n	40667a <__register_exitproc+0x92>
  406632:	3202      	adds	r2, #2
  406634:	f8c3 e004 	str.w	lr, [r3, #4]
  406638:	6828      	ldr	r0, [r5, #0]
  40663a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40663e:	f7ff fb81 	bl	405d44 <__retarget_lock_release_recursive>
  406642:	2000      	movs	r0, #0
  406644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406648:	4b17      	ldr	r3, [pc, #92]	; (4066a8 <__register_exitproc+0xc0>)
  40664a:	b30b      	cbz	r3, 406690 <__register_exitproc+0xa8>
  40664c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406650:	f7fd fbc2 	bl	403dd8 <malloc>
  406654:	4603      	mov	r3, r0
  406656:	b1d8      	cbz	r0, 406690 <__register_exitproc+0xa8>
  406658:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40665c:	6002      	str	r2, [r0, #0]
  40665e:	2100      	movs	r1, #0
  406660:	6041      	str	r1, [r0, #4]
  406662:	460a      	mov	r2, r1
  406664:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406668:	f04f 0e01 	mov.w	lr, #1
  40666c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406670:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  406674:	2e00      	cmp	r6, #0
  406676:	d0dc      	beq.n	406632 <__register_exitproc+0x4a>
  406678:	e7cc      	b.n	406614 <__register_exitproc+0x2c>
  40667a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40667e:	430c      	orrs	r4, r1
  406680:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406684:	e7d5      	b.n	406632 <__register_exitproc+0x4a>
  406686:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40668a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40668e:	e7bb      	b.n	406608 <__register_exitproc+0x20>
  406690:	6828      	ldr	r0, [r5, #0]
  406692:	f7ff fb57 	bl	405d44 <__retarget_lock_release_recursive>
  406696:	f04f 30ff 	mov.w	r0, #4294967295
  40669a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40669e:	bf00      	nop
  4066a0:	20400890 	.word	0x20400890
  4066a4:	0040757c 	.word	0x0040757c
  4066a8:	00403dd9 	.word	0x00403dd9

004066ac <_close_r>:
  4066ac:	b538      	push	{r3, r4, r5, lr}
  4066ae:	4c07      	ldr	r4, [pc, #28]	; (4066cc <_close_r+0x20>)
  4066b0:	2300      	movs	r3, #0
  4066b2:	4605      	mov	r5, r0
  4066b4:	4608      	mov	r0, r1
  4066b6:	6023      	str	r3, [r4, #0]
  4066b8:	f7fb fffe 	bl	4026b8 <_close>
  4066bc:	1c43      	adds	r3, r0, #1
  4066be:	d000      	beq.n	4066c2 <_close_r+0x16>
  4066c0:	bd38      	pop	{r3, r4, r5, pc}
  4066c2:	6823      	ldr	r3, [r4, #0]
  4066c4:	2b00      	cmp	r3, #0
  4066c6:	d0fb      	beq.n	4066c0 <_close_r+0x14>
  4066c8:	602b      	str	r3, [r5, #0]
  4066ca:	bd38      	pop	{r3, r4, r5, pc}
  4066cc:	2044d0e4 	.word	0x2044d0e4

004066d0 <_fclose_r>:
  4066d0:	b570      	push	{r4, r5, r6, lr}
  4066d2:	b159      	cbz	r1, 4066ec <_fclose_r+0x1c>
  4066d4:	4605      	mov	r5, r0
  4066d6:	460c      	mov	r4, r1
  4066d8:	b110      	cbz	r0, 4066e0 <_fclose_r+0x10>
  4066da:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4066dc:	2b00      	cmp	r3, #0
  4066de:	d03c      	beq.n	40675a <_fclose_r+0x8a>
  4066e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4066e2:	07d8      	lsls	r0, r3, #31
  4066e4:	d505      	bpl.n	4066f2 <_fclose_r+0x22>
  4066e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4066ea:	b92b      	cbnz	r3, 4066f8 <_fclose_r+0x28>
  4066ec:	2600      	movs	r6, #0
  4066ee:	4630      	mov	r0, r6
  4066f0:	bd70      	pop	{r4, r5, r6, pc}
  4066f2:	89a3      	ldrh	r3, [r4, #12]
  4066f4:	0599      	lsls	r1, r3, #22
  4066f6:	d53c      	bpl.n	406772 <_fclose_r+0xa2>
  4066f8:	4621      	mov	r1, r4
  4066fa:	4628      	mov	r0, r5
  4066fc:	f7fe fe68 	bl	4053d0 <__sflush_r>
  406700:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  406702:	4606      	mov	r6, r0
  406704:	b133      	cbz	r3, 406714 <_fclose_r+0x44>
  406706:	69e1      	ldr	r1, [r4, #28]
  406708:	4628      	mov	r0, r5
  40670a:	4798      	blx	r3
  40670c:	2800      	cmp	r0, #0
  40670e:	bfb8      	it	lt
  406710:	f04f 36ff 	movlt.w	r6, #4294967295
  406714:	89a3      	ldrh	r3, [r4, #12]
  406716:	061a      	lsls	r2, r3, #24
  406718:	d422      	bmi.n	406760 <_fclose_r+0x90>
  40671a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40671c:	b141      	cbz	r1, 406730 <_fclose_r+0x60>
  40671e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406722:	4299      	cmp	r1, r3
  406724:	d002      	beq.n	40672c <_fclose_r+0x5c>
  406726:	4628      	mov	r0, r5
  406728:	f7ff f870 	bl	40580c <_free_r>
  40672c:	2300      	movs	r3, #0
  40672e:	6323      	str	r3, [r4, #48]	; 0x30
  406730:	6c61      	ldr	r1, [r4, #68]	; 0x44
  406732:	b121      	cbz	r1, 40673e <_fclose_r+0x6e>
  406734:	4628      	mov	r0, r5
  406736:	f7ff f869 	bl	40580c <_free_r>
  40673a:	2300      	movs	r3, #0
  40673c:	6463      	str	r3, [r4, #68]	; 0x44
  40673e:	f7fe ff6b 	bl	405618 <__sfp_lock_acquire>
  406742:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406744:	2200      	movs	r2, #0
  406746:	07db      	lsls	r3, r3, #31
  406748:	81a2      	strh	r2, [r4, #12]
  40674a:	d50e      	bpl.n	40676a <_fclose_r+0x9a>
  40674c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40674e:	f7ff faf5 	bl	405d3c <__retarget_lock_close_recursive>
  406752:	f7fe ff67 	bl	405624 <__sfp_lock_release>
  406756:	4630      	mov	r0, r6
  406758:	bd70      	pop	{r4, r5, r6, pc}
  40675a:	f7fe ff31 	bl	4055c0 <__sinit>
  40675e:	e7bf      	b.n	4066e0 <_fclose_r+0x10>
  406760:	6921      	ldr	r1, [r4, #16]
  406762:	4628      	mov	r0, r5
  406764:	f7ff f852 	bl	40580c <_free_r>
  406768:	e7d7      	b.n	40671a <_fclose_r+0x4a>
  40676a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40676c:	f7ff faea 	bl	405d44 <__retarget_lock_release_recursive>
  406770:	e7ec      	b.n	40674c <_fclose_r+0x7c>
  406772:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406774:	f7ff fae4 	bl	405d40 <__retarget_lock_acquire_recursive>
  406778:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40677c:	2b00      	cmp	r3, #0
  40677e:	d1bb      	bne.n	4066f8 <_fclose_r+0x28>
  406780:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406782:	f016 0601 	ands.w	r6, r6, #1
  406786:	d1b1      	bne.n	4066ec <_fclose_r+0x1c>
  406788:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40678a:	f7ff fadb 	bl	405d44 <__retarget_lock_release_recursive>
  40678e:	4630      	mov	r0, r6
  406790:	bd70      	pop	{r4, r5, r6, pc}
  406792:	bf00      	nop

00406794 <_fstat_r>:
  406794:	b538      	push	{r3, r4, r5, lr}
  406796:	460b      	mov	r3, r1
  406798:	4c07      	ldr	r4, [pc, #28]	; (4067b8 <_fstat_r+0x24>)
  40679a:	4605      	mov	r5, r0
  40679c:	4611      	mov	r1, r2
  40679e:	4618      	mov	r0, r3
  4067a0:	2300      	movs	r3, #0
  4067a2:	6023      	str	r3, [r4, #0]
  4067a4:	f7fb ff8c 	bl	4026c0 <_fstat>
  4067a8:	1c43      	adds	r3, r0, #1
  4067aa:	d000      	beq.n	4067ae <_fstat_r+0x1a>
  4067ac:	bd38      	pop	{r3, r4, r5, pc}
  4067ae:	6823      	ldr	r3, [r4, #0]
  4067b0:	2b00      	cmp	r3, #0
  4067b2:	d0fb      	beq.n	4067ac <_fstat_r+0x18>
  4067b4:	602b      	str	r3, [r5, #0]
  4067b6:	bd38      	pop	{r3, r4, r5, pc}
  4067b8:	2044d0e4 	.word	0x2044d0e4

004067bc <_isatty_r>:
  4067bc:	b538      	push	{r3, r4, r5, lr}
  4067be:	4c07      	ldr	r4, [pc, #28]	; (4067dc <_isatty_r+0x20>)
  4067c0:	2300      	movs	r3, #0
  4067c2:	4605      	mov	r5, r0
  4067c4:	4608      	mov	r0, r1
  4067c6:	6023      	str	r3, [r4, #0]
  4067c8:	f7fb ff80 	bl	4026cc <_isatty>
  4067cc:	1c43      	adds	r3, r0, #1
  4067ce:	d000      	beq.n	4067d2 <_isatty_r+0x16>
  4067d0:	bd38      	pop	{r3, r4, r5, pc}
  4067d2:	6823      	ldr	r3, [r4, #0]
  4067d4:	2b00      	cmp	r3, #0
  4067d6:	d0fb      	beq.n	4067d0 <_isatty_r+0x14>
  4067d8:	602b      	str	r3, [r5, #0]
  4067da:	bd38      	pop	{r3, r4, r5, pc}
  4067dc:	2044d0e4 	.word	0x2044d0e4

004067e0 <_lseek_r>:
  4067e0:	b570      	push	{r4, r5, r6, lr}
  4067e2:	460d      	mov	r5, r1
  4067e4:	4c08      	ldr	r4, [pc, #32]	; (406808 <_lseek_r+0x28>)
  4067e6:	4611      	mov	r1, r2
  4067e8:	4606      	mov	r6, r0
  4067ea:	461a      	mov	r2, r3
  4067ec:	4628      	mov	r0, r5
  4067ee:	2300      	movs	r3, #0
  4067f0:	6023      	str	r3, [r4, #0]
  4067f2:	f7fb ff6d 	bl	4026d0 <_lseek>
  4067f6:	1c43      	adds	r3, r0, #1
  4067f8:	d000      	beq.n	4067fc <_lseek_r+0x1c>
  4067fa:	bd70      	pop	{r4, r5, r6, pc}
  4067fc:	6823      	ldr	r3, [r4, #0]
  4067fe:	2b00      	cmp	r3, #0
  406800:	d0fb      	beq.n	4067fa <_lseek_r+0x1a>
  406802:	6033      	str	r3, [r6, #0]
  406804:	bd70      	pop	{r4, r5, r6, pc}
  406806:	bf00      	nop
  406808:	2044d0e4 	.word	0x2044d0e4

0040680c <_read_r>:
  40680c:	b570      	push	{r4, r5, r6, lr}
  40680e:	460d      	mov	r5, r1
  406810:	4c08      	ldr	r4, [pc, #32]	; (406834 <_read_r+0x28>)
  406812:	4611      	mov	r1, r2
  406814:	4606      	mov	r6, r0
  406816:	461a      	mov	r2, r3
  406818:	4628      	mov	r0, r5
  40681a:	2300      	movs	r3, #0
  40681c:	6023      	str	r3, [r4, #0]
  40681e:	f7fa fd27 	bl	401270 <_read>
  406822:	1c43      	adds	r3, r0, #1
  406824:	d000      	beq.n	406828 <_read_r+0x1c>
  406826:	bd70      	pop	{r4, r5, r6, pc}
  406828:	6823      	ldr	r3, [r4, #0]
  40682a:	2b00      	cmp	r3, #0
  40682c:	d0fb      	beq.n	406826 <_read_r+0x1a>
  40682e:	6033      	str	r3, [r6, #0]
  406830:	bd70      	pop	{r4, r5, r6, pc}
  406832:	bf00      	nop
  406834:	2044d0e4 	.word	0x2044d0e4

00406838 <__aeabi_uldivmod>:
  406838:	b953      	cbnz	r3, 406850 <__aeabi_uldivmod+0x18>
  40683a:	b94a      	cbnz	r2, 406850 <__aeabi_uldivmod+0x18>
  40683c:	2900      	cmp	r1, #0
  40683e:	bf08      	it	eq
  406840:	2800      	cmpeq	r0, #0
  406842:	bf1c      	itt	ne
  406844:	f04f 31ff 	movne.w	r1, #4294967295
  406848:	f04f 30ff 	movne.w	r0, #4294967295
  40684c:	f000 b97a 	b.w	406b44 <__aeabi_idiv0>
  406850:	f1ad 0c08 	sub.w	ip, sp, #8
  406854:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  406858:	f000 f806 	bl	406868 <__udivmoddi4>
  40685c:	f8dd e004 	ldr.w	lr, [sp, #4]
  406860:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406864:	b004      	add	sp, #16
  406866:	4770      	bx	lr

00406868 <__udivmoddi4>:
  406868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40686c:	468c      	mov	ip, r1
  40686e:	460d      	mov	r5, r1
  406870:	4604      	mov	r4, r0
  406872:	9e08      	ldr	r6, [sp, #32]
  406874:	2b00      	cmp	r3, #0
  406876:	d151      	bne.n	40691c <__udivmoddi4+0xb4>
  406878:	428a      	cmp	r2, r1
  40687a:	4617      	mov	r7, r2
  40687c:	d96d      	bls.n	40695a <__udivmoddi4+0xf2>
  40687e:	fab2 fe82 	clz	lr, r2
  406882:	f1be 0f00 	cmp.w	lr, #0
  406886:	d00b      	beq.n	4068a0 <__udivmoddi4+0x38>
  406888:	f1ce 0c20 	rsb	ip, lr, #32
  40688c:	fa01 f50e 	lsl.w	r5, r1, lr
  406890:	fa20 fc0c 	lsr.w	ip, r0, ip
  406894:	fa02 f70e 	lsl.w	r7, r2, lr
  406898:	ea4c 0c05 	orr.w	ip, ip, r5
  40689c:	fa00 f40e 	lsl.w	r4, r0, lr
  4068a0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4068a4:	0c25      	lsrs	r5, r4, #16
  4068a6:	fbbc f8fa 	udiv	r8, ip, sl
  4068aa:	fa1f f987 	uxth.w	r9, r7
  4068ae:	fb0a cc18 	mls	ip, sl, r8, ip
  4068b2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4068b6:	fb08 f309 	mul.w	r3, r8, r9
  4068ba:	42ab      	cmp	r3, r5
  4068bc:	d90a      	bls.n	4068d4 <__udivmoddi4+0x6c>
  4068be:	19ed      	adds	r5, r5, r7
  4068c0:	f108 32ff 	add.w	r2, r8, #4294967295
  4068c4:	f080 8123 	bcs.w	406b0e <__udivmoddi4+0x2a6>
  4068c8:	42ab      	cmp	r3, r5
  4068ca:	f240 8120 	bls.w	406b0e <__udivmoddi4+0x2a6>
  4068ce:	f1a8 0802 	sub.w	r8, r8, #2
  4068d2:	443d      	add	r5, r7
  4068d4:	1aed      	subs	r5, r5, r3
  4068d6:	b2a4      	uxth	r4, r4
  4068d8:	fbb5 f0fa 	udiv	r0, r5, sl
  4068dc:	fb0a 5510 	mls	r5, sl, r0, r5
  4068e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4068e4:	fb00 f909 	mul.w	r9, r0, r9
  4068e8:	45a1      	cmp	r9, r4
  4068ea:	d909      	bls.n	406900 <__udivmoddi4+0x98>
  4068ec:	19e4      	adds	r4, r4, r7
  4068ee:	f100 33ff 	add.w	r3, r0, #4294967295
  4068f2:	f080 810a 	bcs.w	406b0a <__udivmoddi4+0x2a2>
  4068f6:	45a1      	cmp	r9, r4
  4068f8:	f240 8107 	bls.w	406b0a <__udivmoddi4+0x2a2>
  4068fc:	3802      	subs	r0, #2
  4068fe:	443c      	add	r4, r7
  406900:	eba4 0409 	sub.w	r4, r4, r9
  406904:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406908:	2100      	movs	r1, #0
  40690a:	2e00      	cmp	r6, #0
  40690c:	d061      	beq.n	4069d2 <__udivmoddi4+0x16a>
  40690e:	fa24 f40e 	lsr.w	r4, r4, lr
  406912:	2300      	movs	r3, #0
  406914:	6034      	str	r4, [r6, #0]
  406916:	6073      	str	r3, [r6, #4]
  406918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40691c:	428b      	cmp	r3, r1
  40691e:	d907      	bls.n	406930 <__udivmoddi4+0xc8>
  406920:	2e00      	cmp	r6, #0
  406922:	d054      	beq.n	4069ce <__udivmoddi4+0x166>
  406924:	2100      	movs	r1, #0
  406926:	e886 0021 	stmia.w	r6, {r0, r5}
  40692a:	4608      	mov	r0, r1
  40692c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406930:	fab3 f183 	clz	r1, r3
  406934:	2900      	cmp	r1, #0
  406936:	f040 808e 	bne.w	406a56 <__udivmoddi4+0x1ee>
  40693a:	42ab      	cmp	r3, r5
  40693c:	d302      	bcc.n	406944 <__udivmoddi4+0xdc>
  40693e:	4282      	cmp	r2, r0
  406940:	f200 80fa 	bhi.w	406b38 <__udivmoddi4+0x2d0>
  406944:	1a84      	subs	r4, r0, r2
  406946:	eb65 0503 	sbc.w	r5, r5, r3
  40694a:	2001      	movs	r0, #1
  40694c:	46ac      	mov	ip, r5
  40694e:	2e00      	cmp	r6, #0
  406950:	d03f      	beq.n	4069d2 <__udivmoddi4+0x16a>
  406952:	e886 1010 	stmia.w	r6, {r4, ip}
  406956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40695a:	b912      	cbnz	r2, 406962 <__udivmoddi4+0xfa>
  40695c:	2701      	movs	r7, #1
  40695e:	fbb7 f7f2 	udiv	r7, r7, r2
  406962:	fab7 fe87 	clz	lr, r7
  406966:	f1be 0f00 	cmp.w	lr, #0
  40696a:	d134      	bne.n	4069d6 <__udivmoddi4+0x16e>
  40696c:	1beb      	subs	r3, r5, r7
  40696e:	0c3a      	lsrs	r2, r7, #16
  406970:	fa1f fc87 	uxth.w	ip, r7
  406974:	2101      	movs	r1, #1
  406976:	fbb3 f8f2 	udiv	r8, r3, r2
  40697a:	0c25      	lsrs	r5, r4, #16
  40697c:	fb02 3318 	mls	r3, r2, r8, r3
  406980:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406984:	fb0c f308 	mul.w	r3, ip, r8
  406988:	42ab      	cmp	r3, r5
  40698a:	d907      	bls.n	40699c <__udivmoddi4+0x134>
  40698c:	19ed      	adds	r5, r5, r7
  40698e:	f108 30ff 	add.w	r0, r8, #4294967295
  406992:	d202      	bcs.n	40699a <__udivmoddi4+0x132>
  406994:	42ab      	cmp	r3, r5
  406996:	f200 80d1 	bhi.w	406b3c <__udivmoddi4+0x2d4>
  40699a:	4680      	mov	r8, r0
  40699c:	1aed      	subs	r5, r5, r3
  40699e:	b2a3      	uxth	r3, r4
  4069a0:	fbb5 f0f2 	udiv	r0, r5, r2
  4069a4:	fb02 5510 	mls	r5, r2, r0, r5
  4069a8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4069ac:	fb0c fc00 	mul.w	ip, ip, r0
  4069b0:	45a4      	cmp	ip, r4
  4069b2:	d907      	bls.n	4069c4 <__udivmoddi4+0x15c>
  4069b4:	19e4      	adds	r4, r4, r7
  4069b6:	f100 33ff 	add.w	r3, r0, #4294967295
  4069ba:	d202      	bcs.n	4069c2 <__udivmoddi4+0x15a>
  4069bc:	45a4      	cmp	ip, r4
  4069be:	f200 80b8 	bhi.w	406b32 <__udivmoddi4+0x2ca>
  4069c2:	4618      	mov	r0, r3
  4069c4:	eba4 040c 	sub.w	r4, r4, ip
  4069c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4069cc:	e79d      	b.n	40690a <__udivmoddi4+0xa2>
  4069ce:	4631      	mov	r1, r6
  4069d0:	4630      	mov	r0, r6
  4069d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4069d6:	f1ce 0420 	rsb	r4, lr, #32
  4069da:	fa05 f30e 	lsl.w	r3, r5, lr
  4069de:	fa07 f70e 	lsl.w	r7, r7, lr
  4069e2:	fa20 f804 	lsr.w	r8, r0, r4
  4069e6:	0c3a      	lsrs	r2, r7, #16
  4069e8:	fa25 f404 	lsr.w	r4, r5, r4
  4069ec:	ea48 0803 	orr.w	r8, r8, r3
  4069f0:	fbb4 f1f2 	udiv	r1, r4, r2
  4069f4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4069f8:	fb02 4411 	mls	r4, r2, r1, r4
  4069fc:	fa1f fc87 	uxth.w	ip, r7
  406a00:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  406a04:	fb01 f30c 	mul.w	r3, r1, ip
  406a08:	42ab      	cmp	r3, r5
  406a0a:	fa00 f40e 	lsl.w	r4, r0, lr
  406a0e:	d909      	bls.n	406a24 <__udivmoddi4+0x1bc>
  406a10:	19ed      	adds	r5, r5, r7
  406a12:	f101 30ff 	add.w	r0, r1, #4294967295
  406a16:	f080 808a 	bcs.w	406b2e <__udivmoddi4+0x2c6>
  406a1a:	42ab      	cmp	r3, r5
  406a1c:	f240 8087 	bls.w	406b2e <__udivmoddi4+0x2c6>
  406a20:	3902      	subs	r1, #2
  406a22:	443d      	add	r5, r7
  406a24:	1aeb      	subs	r3, r5, r3
  406a26:	fa1f f588 	uxth.w	r5, r8
  406a2a:	fbb3 f0f2 	udiv	r0, r3, r2
  406a2e:	fb02 3310 	mls	r3, r2, r0, r3
  406a32:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406a36:	fb00 f30c 	mul.w	r3, r0, ip
  406a3a:	42ab      	cmp	r3, r5
  406a3c:	d907      	bls.n	406a4e <__udivmoddi4+0x1e6>
  406a3e:	19ed      	adds	r5, r5, r7
  406a40:	f100 38ff 	add.w	r8, r0, #4294967295
  406a44:	d26f      	bcs.n	406b26 <__udivmoddi4+0x2be>
  406a46:	42ab      	cmp	r3, r5
  406a48:	d96d      	bls.n	406b26 <__udivmoddi4+0x2be>
  406a4a:	3802      	subs	r0, #2
  406a4c:	443d      	add	r5, r7
  406a4e:	1aeb      	subs	r3, r5, r3
  406a50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  406a54:	e78f      	b.n	406976 <__udivmoddi4+0x10e>
  406a56:	f1c1 0720 	rsb	r7, r1, #32
  406a5a:	fa22 f807 	lsr.w	r8, r2, r7
  406a5e:	408b      	lsls	r3, r1
  406a60:	fa05 f401 	lsl.w	r4, r5, r1
  406a64:	ea48 0303 	orr.w	r3, r8, r3
  406a68:	fa20 fe07 	lsr.w	lr, r0, r7
  406a6c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  406a70:	40fd      	lsrs	r5, r7
  406a72:	ea4e 0e04 	orr.w	lr, lr, r4
  406a76:	fbb5 f9fc 	udiv	r9, r5, ip
  406a7a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  406a7e:	fb0c 5519 	mls	r5, ip, r9, r5
  406a82:	fa1f f883 	uxth.w	r8, r3
  406a86:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  406a8a:	fb09 f408 	mul.w	r4, r9, r8
  406a8e:	42ac      	cmp	r4, r5
  406a90:	fa02 f201 	lsl.w	r2, r2, r1
  406a94:	fa00 fa01 	lsl.w	sl, r0, r1
  406a98:	d908      	bls.n	406aac <__udivmoddi4+0x244>
  406a9a:	18ed      	adds	r5, r5, r3
  406a9c:	f109 30ff 	add.w	r0, r9, #4294967295
  406aa0:	d243      	bcs.n	406b2a <__udivmoddi4+0x2c2>
  406aa2:	42ac      	cmp	r4, r5
  406aa4:	d941      	bls.n	406b2a <__udivmoddi4+0x2c2>
  406aa6:	f1a9 0902 	sub.w	r9, r9, #2
  406aaa:	441d      	add	r5, r3
  406aac:	1b2d      	subs	r5, r5, r4
  406aae:	fa1f fe8e 	uxth.w	lr, lr
  406ab2:	fbb5 f0fc 	udiv	r0, r5, ip
  406ab6:	fb0c 5510 	mls	r5, ip, r0, r5
  406aba:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  406abe:	fb00 f808 	mul.w	r8, r0, r8
  406ac2:	45a0      	cmp	r8, r4
  406ac4:	d907      	bls.n	406ad6 <__udivmoddi4+0x26e>
  406ac6:	18e4      	adds	r4, r4, r3
  406ac8:	f100 35ff 	add.w	r5, r0, #4294967295
  406acc:	d229      	bcs.n	406b22 <__udivmoddi4+0x2ba>
  406ace:	45a0      	cmp	r8, r4
  406ad0:	d927      	bls.n	406b22 <__udivmoddi4+0x2ba>
  406ad2:	3802      	subs	r0, #2
  406ad4:	441c      	add	r4, r3
  406ad6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  406ada:	eba4 0408 	sub.w	r4, r4, r8
  406ade:	fba0 8902 	umull	r8, r9, r0, r2
  406ae2:	454c      	cmp	r4, r9
  406ae4:	46c6      	mov	lr, r8
  406ae6:	464d      	mov	r5, r9
  406ae8:	d315      	bcc.n	406b16 <__udivmoddi4+0x2ae>
  406aea:	d012      	beq.n	406b12 <__udivmoddi4+0x2aa>
  406aec:	b156      	cbz	r6, 406b04 <__udivmoddi4+0x29c>
  406aee:	ebba 030e 	subs.w	r3, sl, lr
  406af2:	eb64 0405 	sbc.w	r4, r4, r5
  406af6:	fa04 f707 	lsl.w	r7, r4, r7
  406afa:	40cb      	lsrs	r3, r1
  406afc:	431f      	orrs	r7, r3
  406afe:	40cc      	lsrs	r4, r1
  406b00:	6037      	str	r7, [r6, #0]
  406b02:	6074      	str	r4, [r6, #4]
  406b04:	2100      	movs	r1, #0
  406b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406b0a:	4618      	mov	r0, r3
  406b0c:	e6f8      	b.n	406900 <__udivmoddi4+0x98>
  406b0e:	4690      	mov	r8, r2
  406b10:	e6e0      	b.n	4068d4 <__udivmoddi4+0x6c>
  406b12:	45c2      	cmp	sl, r8
  406b14:	d2ea      	bcs.n	406aec <__udivmoddi4+0x284>
  406b16:	ebb8 0e02 	subs.w	lr, r8, r2
  406b1a:	eb69 0503 	sbc.w	r5, r9, r3
  406b1e:	3801      	subs	r0, #1
  406b20:	e7e4      	b.n	406aec <__udivmoddi4+0x284>
  406b22:	4628      	mov	r0, r5
  406b24:	e7d7      	b.n	406ad6 <__udivmoddi4+0x26e>
  406b26:	4640      	mov	r0, r8
  406b28:	e791      	b.n	406a4e <__udivmoddi4+0x1e6>
  406b2a:	4681      	mov	r9, r0
  406b2c:	e7be      	b.n	406aac <__udivmoddi4+0x244>
  406b2e:	4601      	mov	r1, r0
  406b30:	e778      	b.n	406a24 <__udivmoddi4+0x1bc>
  406b32:	3802      	subs	r0, #2
  406b34:	443c      	add	r4, r7
  406b36:	e745      	b.n	4069c4 <__udivmoddi4+0x15c>
  406b38:	4608      	mov	r0, r1
  406b3a:	e708      	b.n	40694e <__udivmoddi4+0xe6>
  406b3c:	f1a8 0802 	sub.w	r8, r8, #2
  406b40:	443d      	add	r5, r7
  406b42:	e72b      	b.n	40699c <__udivmoddi4+0x134>

00406b44 <__aeabi_idiv0>:
  406b44:	4770      	bx	lr
  406b46:	bf00      	nop
  406b48:	092d452d 	.word	0x092d452d
  406b4c:	39384d57 	.word	0x39384d57
  406b50:	69203430 	.word	0x69203430
  406b54:	6974696e 	.word	0x6974696e
  406b58:	7a696c61 	.word	0x7a696c61
  406b5c:	6f697461 	.word	0x6f697461
  406b60:	6166206e 	.word	0x6166206e
  406b64:	64656c69 	.word	0x64656c69
  406b68:	00000d2e 	.word	0x00000d2e

00406b6c <CSWTCH.7>:
  406b6c:	00000100 00000300 00000200              ............

00406b78 <midi_note_frequencies>:
  406b78:	4102d0e5 410a978d 4112d4fe 411b9168     ...A...A...Ah..A
  406b88:	4124d0e5 412e9ba6 4138fdf4 41440000     ..$A...A..8A..DA
  406b98:	414fa5e3 415c0000 41691687 4176f1aa     ..OA..\A..iA..vA
  406ba8:	4182d0e5 418a978d 4192d4fe 419b8f5c     ...A...A...A\..A
  406bb8:	41a4d0e5 41ae9db2 41b90000 41c40000     ...A...A...A...A
  406bc8:	41cfa7f0 41dc0000 41e9147b 41f6f1aa     ...A...A{..A...A
  406bd8:	4202cfdf 420a978d 4212d4fe 421b9062     ...B...B...Bb..B
  406be8:	4224cfdf 422e9db2 4238fefa 4243fefa     ..$B...B..8B..CB
  406bf8:	424fa6e9 425c0000 4269147b 4276f0a4     ..OB..\B{.iB..vB
  406c08:	4282cfdf 428a978d 4292d4fe 429b9062     ...B...B...Bb..B
  406c18:	42a4d062 42ae9d2f 42b8ff7d 42c3ff7d     b..B/..B}..B}..B
  406c28:	42cfa6e9 42dc0000 42e914fe 42f6f127     ...B...B...B'..B
  406c38:	4302d021 430a974c 4312d4fe 431b9021     !..CL..C...C!..C
  406c48:	4324d062 432e9d2f 4338ff3b 4343ff7d     b.$C/..C;.8C}.CC
  406c58:	434fa6e9 435c0000 436914fe 4376f127     ..OC..\C..iC'.vC
  406c68:	4382d021 438a976d 4392d51f 439b9042     !..Cm..C...CB..C
  406c78:	43a4d062 43ae9d2f 43b8ff3b 43c3ff5c     b..C/..C;..C\..C
  406c88:	43cfa70a 43dc0000 43e914fe 43f6f106     ...C...C...C...C
  406c98:	4402d010 440a975c 4412d51f 441b9042     ...D\..D...DB..D
  406ca8:	4424d052 442e9d2f 4438ff4c 4443ff6d     R.$D/..DL.8Dm.CD
  406cb8:	444fa6fa 445c0000 446914fe 4476f117     ..OD..\D..iD..vD
  406cc8:	4482d010 448a9764 4492d517 449b9042     ...Dd..D...DB..D
  406cd8:	44a4d052 44ae9d37 44b8ff4c 44c3ff6d     R..D7..DL..Dm..D
  406ce8:	44cfa702 44dc0000 44e914f6 44f6f10e     ...D...D...D...D
  406cf8:	4502d014 450a9760 4512d517 451b9042     ...E`..E...EB..E
  406d08:	4524d052 452e9d37 4538ff48 4543ff68     R.$E7..EH.8Eh.CE
  406d18:	454fa702 455c0000 456914f6 4576f10e     ..OE..\E..iE..vE
  406d28:	4582d012 458a9760 4592d517 459b9042     ...E`..E...EB..E
  406d38:	45a4d054 45ae9d37 45b8ff4a 45c3ff6a     T..E7..EJ..Ej..E
  406d48:	45cfa700 45dc0000 45e914f6 45f6f110     ...E...E...E...E
  406d58:	4602d012 460a9760 4612d518 461b9041     ...F`..F...FA..F
  406d68:	4624d052 462e9d33 4638ff48 4643ff66     R.$F3..FH.8Ff.CF

00406d78 <sinTable_f32>:
  406d78:	00000000 3c490e92 3cc90ab1 3d16c32b     ......I<...<+..=
  406d88:	3d48fb2e 3d7b2b75 3d96a904 3dafb680     ..H=u+{=...=...=
  406d98:	3dc8bd36 3de1bc2f 3dfab273 3e09cf87     6..=/..=s..=...>
  406da8:	3e164083 3e22abb5 3e2f10a2 3e3b6ecf     .@.>..">../>.n;>
  406db8:	3e47c5c2 3e541501 3e605c13 3e6c9a7f     ..G>..T>.\`>..l>
  406dc8:	3e78cfcc 3e827dc0 3e888e93 3e8e9a22     ..x>.}.>...>"..>
  406dd8:	3e94a032 3e9aa086 3ea09ae5 3ea68f12     2..>...>...>...>
  406de8:	3eac7cd4 3eb263ef 3eb8442a 3ebe1d49     .|.>.c.>*D.>I..>
  406df8:	3ec3ef15 3ec9b953 3ecf7bca 3ed53641     ...>S..>.{.>A6.>
  406e08:	3edae880 3ee0924f 3ee63375 3eebcbbb     ...>O..>u3.>...>
  406e18:	3ef15aea 3ef6e0cb 3efc5d27 3f00e7e4     .Z.>...>'].>...?
  406e28:	3f039c3d 3f064b82 3f08f59b 3f0b9a6b     =..?.K.?...?k..?
  406e38:	3f0e39da 3f10d3cd 3f13682a 3f15f6d9     .9.?...?*h.?...?
  406e48:	3f187fc0 3f1b02c6 3f1d7fd1 3f1ff6cb     ...?...?...?...?
  406e58:	3f226799 3f24d225 3f273656 3f299415     .g"?%.$?V6'?..)?
  406e68:	3f2beb4a 3f2e3bde 3f3085bb 3f32c8c9     J.+?.;.?..0?..2?
  406e78:	3f3504f3 3f373a23 3f396842 3f3b8f3b     ..5?#:7?Bh9?;.;?
  406e88:	3f3daef9 3f3fc767 3f41d870 3f43e201     ..=?g.??p.A?..C?
  406e98:	3f45e403 3f47de65 3f49d112 3f4bbbf8     ..E?e.G?..I?..K?
  406ea8:	3f4d9f02 3f4f7a20 3f514d3d 3f531849     ..M? zO?=MQ?I.S?
  406eb8:	3f54db31 3f5695e5 3f584853 3f59f26a     1.T?..V?SHX?j.Y?
  406ec8:	3f5b941a 3f5d2d53 3f5ebe05 3f604621     ..[?S-]?..^?!F`?
  406ed8:	3f61c597 3f633c5a 3f64aa59 3f660f88     ..a?Z<c?Y.d?..f?
  406ee8:	3f676bd8 3f68bf3c 3f6a09a7 3f6b4b0c     .kg?<.h?..j?.Kk?
  406ef8:	3f6c835e 3f6db293 3f6ed89e 3f6ff573     ^.l?..m?..n?s.o?
  406f08:	3f710908 3f721352 3f731447 3f740bdd     ..q?R.r?G.s?..t?
  406f18:	3f74fa0b 3f75dec6 3f76ba07 3f778bc5     ..t?..u?..v?..w?
  406f28:	3f7853f8 3f791298 3f79c79d 3f7a7302     .Sx?..y?..y?.sz?
  406f38:	3f7b14be 3f7baccd 3f7c3b28 3f7cbfc9     ..{?..{?(;|?..|?
  406f48:	3f7d3aac 3f7dabcc 3f7e1323 3f7e70b0     .:}?..}?#.~?.p~?
  406f58:	3f7ec46d 3f7f0e58 3f7f4e6d 3f7f84ab     m.~?X..?mN.?...?
  406f68:	3f7fb10f 3f7fd397 3f7fec43 3f7ffb11     ...?...?C..?...?
  406f78:	3f800000 3f7ffb11 3f7fec43 3f7fd397     ...?...?C..?...?
  406f88:	3f7fb10f 3f7f84ab 3f7f4e6d 3f7f0e58     ...?...?mN.?X..?
  406f98:	3f7ec46d 3f7e70b0 3f7e1323 3f7dabcc     m.~?.p~?#.~?..}?
  406fa8:	3f7d3aac 3f7cbfc9 3f7c3b28 3f7baccd     .:}?..|?(;|?..{?
  406fb8:	3f7b14be 3f7a7302 3f79c79d 3f791298     ..{?.sz?..y?..y?
  406fc8:	3f7853f8 3f778bc5 3f76ba07 3f75dec6     .Sx?..w?..v?..u?
  406fd8:	3f74fa0b 3f740bdd 3f731447 3f721352     ..t?..t?G.s?R.r?
  406fe8:	3f710908 3f6ff573 3f6ed89e 3f6db293     ..q?s.o?..n?..m?
  406ff8:	3f6c835e 3f6b4b0c 3f6a09a7 3f68bf3c     ^.l?.Kk?..j?<.h?
  407008:	3f676bd8 3f660f88 3f64aa59 3f633c5a     .kg?..f?Y.d?Z<c?
  407018:	3f61c597 3f604621 3f5ebe05 3f5d2d53     ..a?!F`?..^?S-]?
  407028:	3f5b941a 3f59f26a 3f584853 3f5695e5     ..[?j.Y?SHX?..V?
  407038:	3f54db31 3f531849 3f514d3d 3f4f7a20     1.T?I.S?=MQ? zO?
  407048:	3f4d9f02 3f4bbbf8 3f49d112 3f47de65     ..M?..K?..I?e.G?
  407058:	3f45e403 3f43e201 3f41d870 3f3fc767     ..E?..C?p.A?g.??
  407068:	3f3daef9 3f3b8f3b 3f396842 3f373a23     ..=?;.;?Bh9?#:7?
  407078:	3f3504f3 3f32c8c9 3f3085bb 3f2e3bde     ..5?..2?..0?.;.?
  407088:	3f2beb4a 3f299415 3f273656 3f24d225     J.+?..)?V6'?%.$?
  407098:	3f226799 3f1ff6cb 3f1d7fd1 3f1b02c6     .g"?...?...?...?
  4070a8:	3f187fc0 3f15f6d9 3f13682a 3f10d3cd     ...?...?*h.?...?
  4070b8:	3f0e39da 3f0b9a6b 3f08f59b 3f064b82     .9.?k..?...?.K.?
  4070c8:	3f039c3d 3f00e7e4 3efc5d27 3ef6e0cb     =..?...?'].>...>
  4070d8:	3ef15aea 3eebcbbb 3ee63375 3ee0924f     .Z.>...>u3.>O..>
  4070e8:	3edae880 3ed53641 3ecf7bca 3ec9b953     ...>A6.>.{.>S..>
  4070f8:	3ec3ef15 3ebe1d49 3eb8442a 3eb263ef     ...>I..>*D.>.c.>
  407108:	3eac7cd4 3ea68f12 3ea09ae5 3e9aa086     .|.>...>...>...>
  407118:	3e94a032 3e8e9a22 3e888e93 3e827dc0     2..>"..>...>.}.>
  407128:	3e78cfcc 3e6c9a7f 3e605c13 3e541501     ..x>..l>.\`>..T>
  407138:	3e47c5c2 3e3b6ecf 3e2f10a2 3e22abb5     ..G>.n;>../>..">
  407148:	3e164083 3e09cf87 3dfab273 3de1bc2f     .@.>...>s..=/..=
  407158:	3dc8bd36 3dafb680 3d96a904 3d7b2b75     6..=...=...=u+{=
  407168:	3d48fb2e 3d16c32b 3cc90ab1 3c490e92     ..H=+..=...<..I<
  407178:	00000000 bc490e92 bcc90ab1 bd16c32b     ......I.....+...
  407188:	bd48fb2e bd7b2b75 bd96a904 bdafb680     ..H.u+{.........
  407198:	bdc8bd36 bde1bc2f bdfab273 be09cf87     6.../...s.......
  4071a8:	be164083 be22abb5 be2f10a2 be3b6ecf     .@....".../..n;.
  4071b8:	be47c5c2 be541501 be605c13 be6c9a7f     ..G...T..\`...l.
  4071c8:	be78cfcc be827dc0 be888e93 be8e9a22     ..x..}......"...
  4071d8:	be94a032 be9aa086 bea09ae5 bea68f12     2...............
  4071e8:	beac7cd4 beb263ef beb8442a bebe1d49     .|...c..*D..I...
  4071f8:	bec3ef15 bec9b953 becf7bca bed53641     ....S....{..A6..
  407208:	bedae880 bee0924f bee63375 beebcbbb     ....O...u3......
  407218:	bef15aea bef6e0cb befc5d27 bf00e7e4     .Z......']......
  407228:	bf039c3d bf064b82 bf08f59b bf0b9a6b     =....K......k...
  407238:	bf0e39da bf10d3cd bf13682a bf15f6d9     .9......*h......
  407248:	bf187fc0 bf1b02c6 bf1d7fd1 bf1ff6cb     ................
  407258:	bf226799 bf24d225 bf273656 bf299415     .g".%.$.V6'...).
  407268:	bf2beb4a bf2e3bde bf3085bb bf32c8c9     J.+..;....0...2.
  407278:	bf3504f3 bf373a23 bf396842 bf3b8f3b     ..5.#:7.Bh9.;.;.
  407288:	bf3daef9 bf3fc767 bf41d870 bf43e201     ..=.g.?.p.A...C.
  407298:	bf45e403 bf47de65 bf49d112 bf4bbbf8     ..E.e.G...I...K.
  4072a8:	bf4d9f02 bf4f7a20 bf514d3d bf531849     ..M. zO.=MQ.I.S.
  4072b8:	bf54db31 bf5695e5 bf584853 bf59f26a     1.T...V.SHX.j.Y.
  4072c8:	bf5b941a bf5d2d53 bf5ebe05 bf604621     ..[.S-]...^.!F`.
  4072d8:	bf61c597 bf633c5a bf64aa59 bf660f88     ..a.Z<c.Y.d...f.
  4072e8:	bf676bd8 bf68bf3c bf6a09a7 bf6b4b0c     .kg.<.h...j..Kk.
  4072f8:	bf6c835e bf6db293 bf6ed89e bf6ff573     ^.l...m...n.s.o.
  407308:	bf710908 bf721352 bf731447 bf740bdd     ..q.R.r.G.s...t.
  407318:	bf74fa0b bf75dec6 bf76ba07 bf778bc5     ..t...u...v...w.
  407328:	bf7853f8 bf791298 bf79c79d bf7a7302     .Sx...y...y..sz.
  407338:	bf7b14be bf7baccd bf7c3b28 bf7cbfc9     ..{...{.(;|...|.
  407348:	bf7d3aac bf7dabcc bf7e1323 bf7e70b0     .:}...}.#.~..p~.
  407358:	bf7ec46d bf7f0e58 bf7f4e6d bf7f84ab     m.~.X...mN......
  407368:	bf7fb10f bf7fd397 bf7fec43 bf7ffb11     ........C.......
  407378:	bf800000 bf7ffb11 bf7fec43 bf7fd397     ........C.......
  407388:	bf7fb10f bf7f84ab bf7f4e6d bf7f0e58     ........mN..X...
  407398:	bf7ec46d bf7e70b0 bf7e1323 bf7dabcc     m.~..p~.#.~...}.
  4073a8:	bf7d3aac bf7cbfc9 bf7c3b28 bf7baccd     .:}...|.(;|...{.
  4073b8:	bf7b14be bf7a7302 bf79c79d bf791298     ..{..sz...y...y.
  4073c8:	bf7853f8 bf778bc5 bf76ba07 bf75dec6     .Sx...w...v...u.
  4073d8:	bf74fa0b bf740bdd bf731447 bf721352     ..t...t.G.s.R.r.
  4073e8:	bf710908 bf6ff573 bf6ed89e bf6db293     ..q.s.o...n...m.
  4073f8:	bf6c835e bf6b4b0c bf6a09a7 bf68bf3c     ^.l..Kk...j.<.h.
  407408:	bf676bd8 bf660f88 bf64aa59 bf633c5a     .kg...f.Y.d.Z<c.
  407418:	bf61c597 bf604621 bf5ebe05 bf5d2d53     ..a.!F`...^.S-].
  407428:	bf5b941a bf59f26a bf584853 bf5695e5     ..[.j.Y.SHX...V.
  407438:	bf54db31 bf531849 bf514d3d bf4f7a20     1.T.I.S.=MQ. zO.
  407448:	bf4d9f02 bf4bbbf8 bf49d112 bf47de65     ..M...K...I.e.G.
  407458:	bf45e403 bf43e201 bf41d870 bf3fc767     ..E...C.p.A.g.?.
  407468:	bf3daef9 bf3b8f3b bf396842 bf373a23     ..=.;.;.Bh9.#:7.
  407478:	bf3504f3 bf32c8c9 bf3085bb bf2e3bde     ..5...2...0..;..
  407488:	bf2beb4a bf299415 bf273656 bf24d225     J.+...).V6'.%.$.
  407498:	bf226799 bf1ff6cb bf1d7fd1 bf1b02c6     .g".............
  4074a8:	bf187fc0 bf15f6d9 bf13682a bf10d3cd     ........*h......
  4074b8:	bf0e39da bf0b9a6b bf08f59b bf064b82     .9..k........K..
  4074c8:	bf039c3d bf00e7e4 befc5d27 bef6e0cb     =.......']......
  4074d8:	bef15aea beebcbbb bee63375 bee0924f     .Z......u3..O...
  4074e8:	bedae880 bed53641 becf7bca bec9b953     ....A6...{..S...
  4074f8:	bec3ef15 bebe1d49 beb8442a beb263ef     ....I...*D...c..
  407508:	beac7cd4 bea68f12 bea09ae5 be9aa086     .|..............
  407518:	be94a032 be8e9a22 be888e93 be827dc0     2..."........}..
  407528:	be78cfcc be6c9a7f be605c13 be541501     ..x...l..\`...T.
  407538:	be47c5c2 be3b6ecf be2f10a2 be22abb5     ..G..n;.../...".
  407548:	be164083 be09cf87 bdfab273 bde1bc2f     .@......s.../...
  407558:	bdc8bd36 bdafb680 bd96a904 bd7b2b75     6...........u+{.
  407568:	bd48fb2e bd16c32b bcc90ab1 bc490e92     ..H.+.........I.
  407578:	80000000                                ....

0040757c <_global_impure_ptr>:
  40757c:	20400058 33323130 37363534 42413938     X.@ 0123456789AB
  40758c:	46454443 00000000 33323130 37363534     CDEF....01234567
  40759c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  4075ac:	0000296c                                l)..

004075b0 <blanks.8340>:
  4075b0:	20202020 20202020 20202020 20202020                     

004075c0 <zeroes.8341>:
  4075c0:	30303030 30303030 30303030 30303030     0000000000000000
  4075d0:	00000043 49534f50 00000058 0000002e     C...POSIX.......

004075e0 <_ctype_>:
  4075e0:	20202000 20202020 28282020 20282828     .         ((((( 
  4075f0:	20202020 20202020 20202020 20202020                     
  407600:	10108820 10101010 10101010 10101010      ...............
  407610:	04040410 04040404 10040404 10101010     ................
  407620:	41411010 41414141 01010101 01010101     ..AAAAAA........
  407630:	01010101 01010101 01010101 10101010     ................
  407640:	42421010 42424242 02020202 02020202     ..BBBBBB........
  407650:	02020202 02020202 02020202 10101010     ................
  407660:	00000020 00000000 00000000 00000000      ...............
	...

004076e4 <_init>:
  4076e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4076e6:	bf00      	nop
  4076e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4076ea:	bc08      	pop	{r3}
  4076ec:	469e      	mov	lr, r3
  4076ee:	4770      	bx	lr

004076f0 <__init_array_start>:
  4076f0:	004053b1 	.word	0x004053b1

004076f4 <__frame_dummy_init_array_entry>:
  4076f4:	00400165                                e.@.

004076f8 <_fini>:
  4076f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4076fa:	bf00      	nop
  4076fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4076fe:	bc08      	pop	{r3}
  407700:	469e      	mov	lr, r3
  407702:	4770      	bx	lr

00407704 <__fini_array_start>:
  407704:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <inBuffer>:
2040000c:	c000 2044                                   ..D 

20400010 <inPingMode>:
20400010:	0001 0000                                   ....

20400014 <outBuffer>:
20400014:	9000 2044                                   ..D 

20400018 <outPingMode>:
20400018:	0001 0000                                   ....

2040001c <processBuffer>:
2040001c:	7000 2044                                   .pD 

20400020 <pitchtracker>:
20400020:	0000 bf80 ffff ffff                         ........

20400028 <g_interrupt_enabled>:
20400028:	0001 0000                                   ....

2040002c <SystemCoreClock>:
2040002c:	0900 003d                                   ..=.

20400030 <autotune>:
20400030:	0001 0000                                   ....

20400034 <chorus_speed>:
20400034:	0000 3f00                                   ...?

20400038 <delay_speed>:
20400038:	1770 0000                                   p...

2040003c <dry_volume>:
2040003c:	0000 3f80                                   ...?

20400040 <harm_volume>:
20400040:	0000 3f80                                   ...?

20400044 <harmony_list_fill>:
20400044:	d00c 2044                                   ..D 

20400048 <harmony_list_read>:
20400048:	d068 2044                                   h.D 

2040004c <master_volume>:
2040004c:	0000 3f80                                   ...?

20400050 <pitch_bend>:
20400050:	0040 0000                                   @...

20400054 <_impure_ptr>:
20400054:	0058 2040                                   X.@ 

20400058 <impure_data>:
20400058:	0000 0000 0344 2040 03ac 2040 0414 2040     ....D.@ ..@ ..@ 
	...
20400100:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400110:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400480 <__malloc_av_>:
	...
20400488:	0480 2040 0480 2040 0488 2040 0488 2040     ..@ ..@ ..@ ..@ 
20400498:	0490 2040 0490 2040 0498 2040 0498 2040     ..@ ..@ ..@ ..@ 
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 

20400888 <__malloc_sbrk_base>:
20400888:	ffff ffff                                   ....

2040088c <__malloc_trim_threshold>:
2040088c:	0000 0002                                   ....

20400890 <__atexit_recursive_mutex>:
20400890:	d0c0 2044                                   ..D 

20400894 <__global_locale>:
20400894:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400934:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400954:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400974:	65a1 0040 5e39 0040 0000 0000 75e0 0040     .e@.9^@......u@.
20400984:	75dc 0040 7590 0040 7590 0040 7590 0040     .u@..u@..u@..u@.
20400994:	7590 0040 7590 0040 7590 0040 7590 0040     .u@..u@..u@..u@.
204009a4:	7590 0040 7590 0040 ffff ffff ffff ffff     .u@..u@.........
204009b4:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009dc:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
