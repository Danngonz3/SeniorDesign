
GatorScribe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008c2c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00408c2c  00408c2c  00018c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a08  20400000  00408c34  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000468f0  20404000  00410000  00024000  2**14
                  ALLOC
  4 .stack        00002000  2044a8f0  004568f0  00024000  2**0
                  ALLOC
  5 .heap         00000200  2044c8f0  004588f0  00024000  2**0
                  ALLOC
  6 .ARM.attributes 0000002c  00000000  00000000  00020a08  2**0
                  CONTENTS, READONLY
  7 .comment      000000b4  00000000  00000000  00020a34  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002e34b  00000000  00000000  00020ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00006317  00000000  00000000  0004ee33  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00011389  00000000  00000000  0005514a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001000  00000000  00000000  000664d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003c68  00000000  00000000  000674d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000295e2  00000000  00000000  0006b13b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001bf41  00000000  00000000  0009471d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009e678  00000000  00000000  000b065e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003878  00000000  00000000  0014ecd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f0 c8 44 20 f1 31 40 00 e9 31 40 00 ed 31 40 00     ..D .1@..1@..1@.
  400010:	e9 31 40 00 e9 31 40 00 e9 31 40 00 00 00 00 00     .1@..1@..1@.....
	...
  40002c:	e9 31 40 00 e9 31 40 00 00 00 00 00 e9 31 40 00     .1@..1@......1@.
  40003c:	e9 31 40 00 e9 31 40 00 e9 31 40 00 e9 31 40 00     .1@..1@..1@..1@.
  40004c:	e9 31 40 00 e9 31 40 00 e9 31 40 00 e9 31 40 00     .1@..1@..1@..1@.
  40005c:	e9 31 40 00 e9 31 40 00 00 00 00 00 29 2c 40 00     .1@..1@.....),@.
  40006c:	f5 2c 40 00 c1 2d 40 00 e9 31 40 00 7d 34 40 00     .,@..-@..1@.}4@.
  40007c:	e9 31 40 00 8d 2e 40 00 59 2f 40 00 e9 31 40 00     .1@...@.Y/@..1@.
  40008c:	e9 31 40 00 e9 31 40 00 e9 31 40 00 e9 31 40 00     .1@..1@..1@..1@.
  40009c:	e9 31 40 00 e9 31 40 00 e9 31 40 00 e9 31 40 00     .1@..1@..1@..1@.
  4000ac:	e9 31 40 00 e9 31 40 00 e9 31 40 00 e9 31 40 00     .1@..1@..1@..1@.
  4000bc:	e9 31 40 00 e9 31 40 00 e9 31 40 00 e9 31 40 00     .1@..1@..1@..1@.
  4000cc:	e9 31 40 00 00 00 00 00 e9 31 40 00 00 00 00 00     .1@......1@.....
  4000dc:	e9 31 40 00 e9 31 40 00 e9 31 40 00 e9 31 40 00     .1@..1@..1@..1@.
  4000ec:	e9 31 40 00 e9 31 40 00 e9 31 40 00 e9 31 40 00     .1@..1@..1@..1@.
  4000fc:	e9 31 40 00 e9 31 40 00 e9 31 40 00 e9 31 40 00     .1@..1@..1@..1@.
  40010c:	e9 31 40 00 e9 31 40 00 e9 31 40 00 00 00 00 00     .1@..1@..1@.....
  40011c:	00 00 00 00 e9 31 40 00 e9 31 40 00 ad 01 40 00     .....1@..1@...@.
  40012c:	e9 31 40 00 e9 31 40 00 00 00 00 00 e9 31 40 00     .1@..1@......1@.
  40013c:	e9 31 40 00                                         .1@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20404000 	.word	0x20404000
  40015c:	00000000 	.word	0x00000000
  400160:	00408c34 	.word	0x00408c34

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00408c34 	.word	0x00408c34
  4001a0:	20404004 	.word	0x20404004
  4001a4:	00408c34 	.word	0x00408c34
  4001a8:	00000000 	.word	0x00000000

004001ac <XDMAC_Handler>:
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4001ac:	4b1d      	ldr	r3, [pc, #116]	; (400224 <XDMAC_Handler+0x78>)
/********************************** Public Variables End **********************************/

#define One_over_max_int16 0.0000305185f 
/******************************* XDMAC Interrupt Handler Start *******************************/ 
void XDMAC_Handler(void)
{
  4001ae:	b470      	push	{r4, r5, r6}
  4001b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    uint32_t dma_status;
    
    dma_status = xdmac_channel_get_interrupt_status(XDMAC, XDMA_CH_SSC_RX);
    if (dma_status & XDMAC_CIS_BIS)
  4001b2:	07da      	lsls	r2, r3, #31
  4001b4:	d522      	bpl.n	4001fc <XDMAC_Handler+0x50>
    {
		// update input buffer to be used 
		if(inPingMode)
  4001b6:	4c1c      	ldr	r4, [pc, #112]	; (400228 <XDMAC_Handler+0x7c>)
		{
			inBuffer = inPingBuffer; 
		}
		else 
		{
			inBuffer = inPongBuffer; 
  4001b8:	4a1c      	ldr	r2, [pc, #112]	; (40022c <XDMAC_Handler+0x80>)
		if(inPingMode)
  4001ba:	7821      	ldrb	r1, [r4, #0]
			inBuffer = inPongBuffer; 
  4001bc:	4b1c      	ldr	r3, [pc, #112]	; (400230 <XDMAC_Handler+0x84>)
		}
		inPingMode = !inPingMode; 
  4001be:	7825      	ldrb	r5, [r4, #0]
			inBuffer = inPongBuffer; 
  4001c0:	2900      	cmp	r1, #0
  4001c2:	bf08      	it	eq
  4001c4:	4613      	moveq	r3, r2
  4001c6:	4a1b      	ldr	r2, [pc, #108]	; (400234 <XDMAC_Handler+0x88>)
		inPingMode = !inPingMode; 
  4001c8:	f085 0501 	eor.w	r5, r5, #1
  4001cc:	4e1a      	ldr	r6, [pc, #104]	; (400238 <XDMAC_Handler+0x8c>)
  4001ce:	4619      	mov	r1, r3
  4001d0:	f502 5080 	add.w	r0, r2, #4096	; 0x1000
		
		// fill process buffer - only left channel 
		uint32_t processIdx = 0; 
		for(uint32_t i = 0; i < IO_BUF_SIZE; i+=2, processIdx++)
		{
			processBuffer[processIdx] = ((float )(int16_t)inBuffer[i]) * One_over_max_int16; 
  4001d4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 40023c <XDMAC_Handler+0x90>
		inPingMode = !inPingMode; 
  4001d8:	7025      	strb	r5, [r4, #0]
  4001da:	6033      	str	r3, [r6, #0]
			processBuffer[processIdx] = ((float )(int16_t)inBuffer[i]) * One_over_max_int16; 
  4001dc:	f831 3b04 	ldrh.w	r3, [r1], #4
  4001e0:	b21b      	sxth	r3, r3
  4001e2:	ee07 3a90 	vmov	s15, r3
  4001e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4001ea:	ee67 7a87 	vmul.f32	s15, s15, s14
  4001ee:	ece2 7a01 	vstmia	r2!, {s15}
		for(uint32_t i = 0; i < IO_BUF_SIZE; i+=2, processIdx++)
  4001f2:	4282      	cmp	r2, r0
  4001f4:	d1f2      	bne.n	4001dc <XDMAC_Handler+0x30>
		}
		
		// data is ready to be processed in the main 
		dataReceived = true; 
  4001f6:	4b12      	ldr	r3, [pc, #72]	; (400240 <XDMAC_Handler+0x94>)
  4001f8:	2201      	movs	r2, #1
  4001fa:	701a      	strb	r2, [r3, #0]
  4001fc:	4b09      	ldr	r3, [pc, #36]	; (400224 <XDMAC_Handler+0x78>)
  4001fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    }
	
	dma_status = xdmac_channel_get_interrupt_status(XDMAC, XDMA_CH_SSC_TX);
	if (dma_status & XDMAC_CIS_BIS)
  400202:	07db      	lsls	r3, r3, #31
  400204:	d50c      	bpl.n	400220 <XDMAC_Handler+0x74>
	{
		// update output buffer to be used 
		if(outPingMode)
  400206:	4b0f      	ldr	r3, [pc, #60]	; (400244 <XDMAC_Handler+0x98>)
		{   
			outBuffer = outPingBuffer; 
		}
		else
		{
			outBuffer = outPongBuffer; 
  400208:	480f      	ldr	r0, [pc, #60]	; (400248 <XDMAC_Handler+0x9c>)
		if(outPingMode)
  40020a:	781c      	ldrb	r4, [r3, #0]
			outBuffer = outPongBuffer; 
  40020c:	490f      	ldr	r1, [pc, #60]	; (40024c <XDMAC_Handler+0xa0>)
		}
		outPingMode = !outPingMode; 
  40020e:	781a      	ldrb	r2, [r3, #0]
			outBuffer = outPongBuffer; 
  400210:	2c00      	cmp	r4, #0
  400212:	bf08      	it	eq
  400214:	4601      	moveq	r1, r0
  400216:	480e      	ldr	r0, [pc, #56]	; (400250 <XDMAC_Handler+0xa4>)
		outPingMode = !outPingMode; 
  400218:	f082 0201 	eor.w	r2, r2, #1
  40021c:	6001      	str	r1, [r0, #0]
  40021e:	701a      	strb	r2, [r3, #0]
	}
}
  400220:	bc70      	pop	{r4, r5, r6}
  400222:	4770      	bx	lr
  400224:	40078000 	.word	0x40078000
  400228:	20400010 	.word	0x20400010
  40022c:	20445800 	.word	0x20445800
  400230:	20449800 	.word	0x20449800
  400234:	20446800 	.word	0x20446800
  400238:	2040000c 	.word	0x2040000c
  40023c:	380000fd 	.word	0x380000fd
  400240:	2040401c 	.word	0x2040401c
  400244:	20400018 	.word	0x20400018
  400248:	20448800 	.word	0x20448800
  40024c:	20447800 	.word	0x20447800
  400250:	20400014 	.word	0x20400014

00400254 <configure_xdma>:
/******************************* XDMAC Interrupt Handler End *******************************/

/********************************** Public Functions Start **********************************/
void configure_xdma(void)
{
  400254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint16_t *src;
    
    xdmac_channel_config_t xdmac_channel_cfg = {0};
  400258:	2620      	movs	r6, #32
{
  40025a:	b088      	sub	sp, #32
    xdmac_channel_config_t xdmac_channel_cfg = {0};
  40025c:	2100      	movs	r1, #0
  40025e:	4b30      	ldr	r3, [pc, #192]	; (400320 <configure_xdma+0xcc>)
  400260:	4632      	mov	r2, r6
  400262:	4668      	mov	r0, sp
  400264:	4798      	blx	r3
    
    /* Initialize and enable DMA controller */
    pmc_enable_periph_clk(ID_XDMAC);
  400266:	4b2f      	ldr	r3, [pc, #188]	; (400324 <configure_xdma+0xd0>)
  400268:	203a      	movs	r0, #58	; 0x3a
    | XDMAC_CC_DIF_AHB_IF0
    | XDMAC_CC_SAM_FIXED_AM
    | XDMAC_CC_DAM_INCREMENTED_AM
    | XDMAC_CC_PERID(33);
	
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  40026a:	4c2f      	ldr	r4, [pc, #188]	; (400328 <configure_xdma+0xd4>)
    pmc_enable_periph_clk(ID_XDMAC);
  40026c:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40026e:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
  400272:	4b2e      	ldr	r3, [pc, #184]	; (40032c <configure_xdma+0xd8>)
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  400274:	466a      	mov	r2, sp
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  400276:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 400340 <configure_xdma+0xec>
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  40027a:	4620      	mov	r0, r4
  40027c:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
  400280:	2100      	movs	r1, #0
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400282:	f883 633a 	strb.w	r6, [r3, #826]	; 0x33a
 */
static inline void xdmac_channel_set_descriptor_control(Xdmac *xdmac, uint32_t channel_num, uint32_t config)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  400286:	270f      	movs	r7, #15
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400288:	605d      	str	r5, [r3, #4]
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  40028a:	2501      	movs	r5, #1
  40028c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 400344 <configure_xdma+0xf0>
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  400290:	f8cd e00c 	str.w	lr, [sp, #12]
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  400294:	47c0      	blx	r8
    
    /* Initialize linked list descriptor */
    src = (uint16_t *)&inPingBuffer[0];
    linklist_read[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  400296:	4b26      	ldr	r3, [pc, #152]	; (400330 <configure_xdma+0xdc>)
    | XDMAC_CC_DIF_AHB_IF1
    | XDMAC_CC_SAM_INCREMENTED_AM
    | XDMAC_CC_DAM_FIXED_AM
    | XDMAC_CC_PERID(32);
	
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  400298:	466a      	mov	r2, sp
    linklist_read[0].mbr_da = (uint32_t)(src);
  40029a:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 400348 <configure_xdma+0xf4>
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  40029e:	4629      	mov	r1, r5
    linklist_read[0].mbr_nda = (uint32_t)&linklist_read[1];
  4002a0:	f103 0010 	add.w	r0, r3, #16
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  4002a4:	f023 0603 	bic.w	r6, r3, #3
	linklist_read[1].mbr_da = (uint32_t)(src);
  4002a8:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 40034c <configure_xdma+0xf8>
    linklist_read[0].mbr_nda = (uint32_t)&linklist_read[1];
  4002ac:	6018      	str	r0, [r3, #0]
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  4002ae:	4620      	mov	r0, r4
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  4002b0:	66e7      	str	r7, [r4, #108]	; 0x6c
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  4002b2:	66a6      	str	r6, [r4, #104]	; 0x68
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  4002b4:	60e5      	str	r5, [r4, #12]
    linklist_read[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002b6:	4e1f      	ldr	r6, [pc, #124]	; (400334 <configure_xdma+0xe0>)
	xdmac->XDMAC_CHID[channel_num].XDMAC_CIE = mask;
  4002b8:	6525      	str	r5, [r4, #80]	; 0x50
    linklist_read[0].mbr_da = (uint32_t)(src);
  4002ba:	f8c3 e00c 	str.w	lr, [r3, #12]
    linklist_read[0].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  4002be:	f8df e090 	ldr.w	lr, [pc, #144]	; 400350 <configure_xdma+0xfc>
	linklist_read[1].mbr_da = (uint32_t)(src);
  4002c2:	f8c3 c01c 	str.w	ip, [r3, #28]
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4002c6:	f8df c08c 	ldr.w	ip, [pc, #140]	; 400354 <configure_xdma+0x100>
    linklist_read[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002ca:	605e      	str	r6, [r3, #4]
	linklist_read[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002cc:	615e      	str	r6, [r3, #20]
    linklist_read[0].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  4002ce:	f8c3 e008 	str.w	lr, [r3, #8]
	linklist_read[1].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  4002d2:	f8c3 e018 	str.w	lr, [r3, #24]
	linklist_read[1].mbr_nda = (uint32_t)&linklist_read[0];
  4002d6:	611b      	str	r3, [r3, #16]
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4002d8:	f8cd c00c 	str.w	ip, [sp, #12]
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  4002dc:	47c0      	blx	r8
    
    src = (uint16_t *)&outPingBuffer[0];
    linklist_write[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002de:	4b16      	ldr	r3, [pc, #88]	; (400338 <configure_xdma+0xe4>)
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  4002e0:	2102      	movs	r1, #2
		 | XDMAC_UBC_NDE_FETCH_EN
		 | XDMAC_UBC_NSEN_UPDATED
			| XDMAC_CUBC_UBLEN(IO_BUF_SIZE);
    linklist_write[0].mbr_sa = (uint32_t)(src);
    linklist_write[0].mbr_da = (uint32_t)&(SSC->SSC_THR);
  4002e2:	4a16      	ldr	r2, [pc, #88]	; (40033c <configure_xdma+0xe8>)
    linklist_write[0].mbr_sa = (uint32_t)(src);
  4002e4:	f8df c070 	ldr.w	ip, [pc, #112]	; 400358 <configure_xdma+0x104>
    linklist_write[0].mbr_nda = (uint32_t)&linklist_write[1];
  4002e8:	f103 0810 	add.w	r8, r3, #16
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  4002ec:	f023 0003 	bic.w	r0, r3, #3
	src = (uint16_t *)&outPongBuffer[0];
	linklist_write[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
	    | XDMAC_UBC_NDE_FETCH_EN
	    | XDMAC_UBC_NSEN_UPDATED
	    | XDMAC_CUBC_UBLEN(IO_BUF_SIZE);
	linklist_write[1].mbr_sa = (uint32_t)(src);
  4002f0:	f8df e068 	ldr.w	lr, [pc, #104]	; 40035c <configure_xdma+0x108>
    linklist_write[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002f4:	605e      	str	r6, [r3, #4]
	linklist_write[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002f6:	615e      	str	r6, [r3, #20]
	linklist_write[1].mbr_da = (uint32_t)&(SSC->SSC_THR);
	linklist_write[1].mbr_nda = (uint32_t)&linklist_write[0];
  4002f8:	611b      	str	r3, [r3, #16]
    linklist_write[0].mbr_nda = (uint32_t)&linklist_write[1];
  4002fa:	f8c3 8000 	str.w	r8, [r3]
    linklist_write[0].mbr_sa = (uint32_t)(src);
  4002fe:	f8c3 c008 	str.w	ip, [r3, #8]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  400302:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
	linklist_write[1].mbr_sa = (uint32_t)(src);
  400306:	f8c3 e018 	str.w	lr, [r3, #24]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  40030a:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
    linklist_write[0].mbr_da = (uint32_t)&(SSC->SSC_THR);
  40030e:	60da      	str	r2, [r3, #12]
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  400310:	60e1      	str	r1, [r4, #12]
	linklist_write[1].mbr_da = (uint32_t)&(SSC->SSC_THR);
  400312:	61da      	str	r2, [r3, #28]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CIE = mask;
  400314:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
    xdmac_channel_set_descriptor_addr(XDMAC, XDMA_CH_SSC_TX, (uint32_t)(&linklist_write[0]), 0);
    
    xdmac_enable_interrupt(XDMAC, XDMA_CH_SSC_TX);
    xdmac_channel_enable_interrupt(XDMAC, XDMA_CH_SSC_TX, XDMAC_CIE_BIE);
    
}
  400318:	b008      	add	sp, #32
  40031a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40031e:	bf00      	nop
  400320:	00405949 	.word	0x00405949
  400324:	00403125 	.word	0x00403125
  400328:	40078000 	.word	0x40078000
  40032c:	e000e100 	.word	0xe000e100
  400330:	20404020 	.word	0x20404020
  400334:	0b000800 	.word	0x0b000800
  400338:	20404040 	.word	0x20404040
  40033c:	40004024 	.word	0x40004024
  400340:	21042801 	.word	0x21042801
  400344:	0040259d 	.word	0x0040259d
  400348:	20449800 	.word	0x20449800
  40034c:	20445800 	.word	0x20445800
  400350:	40004020 	.word	0x40004020
  400354:	20014811 	.word	0x20014811
  400358:	20447800 	.word	0x20447800
  40035c:	20448800 	.word	0x20448800

00400360 <audio_init>:
#include "DMA_Audio.h"
#include "WM8904_Driver.h"
#include "ASF/sam/utils/cmsis/samv71/include/component/supc.h"

void audio_init(void)
{
  400360:	b510      	push	{r4, lr}
	/* Initialize WM8904 TWI interface*/
	if (wm8904_twi_init() != TWIHS_SUCCESS) {
  400362:	4b13      	ldr	r3, [pc, #76]	; (4003b0 <audio_init+0x50>)
  400364:	4798      	blx	r3
  400366:	b118      	cbz	r0, 400370 <audio_init+0x10>
		printf("-E-\tWM8904 initialization failed.\r");
  400368:	4812      	ldr	r0, [pc, #72]	; (4003b4 <audio_init+0x54>)
  40036a:	4b13      	ldr	r3, [pc, #76]	; (4003b8 <audio_init+0x58>)
  40036c:	4798      	blx	r3
  40036e:	e7fe      	b.n	40036e <audio_init+0xe>
			/* Capture error */
		}
	}
		
	/* Configure CODEC */
	configure_codec();
  400370:	4b12      	ldr	r3, [pc, #72]	; (4003bc <audio_init+0x5c>)
  400372:	4604      	mov	r4, r0
  400374:	4798      	blx	r3
		
	/* Configure SSC */
	configure_ssc();
  400376:	4b12      	ldr	r3, [pc, #72]	; (4003c0 <audio_init+0x60>)
  400378:	4798      	blx	r3
		
	/* Configure XDMA */
	configure_xdma();
  40037a:	4b12      	ldr	r3, [pc, #72]	; (4003c4 <audio_init+0x64>)
  40037c:	4798      	blx	r3
		
	/* Enable the DAC master clock (MCLK) */
	pmc_pck_set_prescaler(PMC_PCK_2, PMC_MCKR_PRES_CLK_1);
  40037e:	4621      	mov	r1, r4
  400380:	2002      	movs	r0, #2
  400382:	4b11      	ldr	r3, [pc, #68]	; (4003c8 <audio_init+0x68>)
  400384:	4798      	blx	r3
	pmc_pck_set_source(PMC_PCK_2, PMC_MCKR_CSS_SLOW_CLK);
  400386:	4621      	mov	r1, r4
  400388:	2002      	movs	r0, #2
  40038a:	4b10      	ldr	r3, [pc, #64]	; (4003cc <audio_init+0x6c>)
  40038c:	4798      	blx	r3
	pmc_enable_pck(PMC_PCK_2);
  40038e:	2002      	movs	r0, #2
  400390:	4b0f      	ldr	r3, [pc, #60]	; (4003d0 <audio_init+0x70>)
  400392:	4798      	blx	r3
		
	/* Start playing */
	ssc_enable_rx(SSC);
  400394:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400398:	4b0e      	ldr	r3, [pc, #56]	; (4003d4 <audio_init+0x74>)
  40039a:	4798      	blx	r3
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  40039c:	4c0e      	ldr	r4, [pc, #56]	; (4003d8 <audio_init+0x78>)
  40039e:	2201      	movs	r2, #1
	xdmac_channel_enable(XDMAC, XDMA_CH_SSC_RX);
	// might want to enable in the first xdma interrupt (if you care)
	ssc_enable_tx(SSC);
  4003a0:	4b0e      	ldr	r3, [pc, #56]	; (4003dc <audio_init+0x7c>)
  4003a2:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4003a6:	61e2      	str	r2, [r4, #28]
  4003a8:	4798      	blx	r3
  4003aa:	2302      	movs	r3, #2
  4003ac:	61e3      	str	r3, [r4, #28]
  4003ae:	bd10      	pop	{r4, pc}
  4003b0:	00401d19 	.word	0x00401d19
  4003b4:	00408008 	.word	0x00408008
  4003b8:	0040527d 	.word	0x0040527d
  4003bc:	004004a5 	.word	0x004004a5
  4003c0:	004003e1 	.word	0x004003e1
  4003c4:	00400255 	.word	0x00400255
  4003c8:	0040316d 	.word	0x0040316d
  4003cc:	004031a1 	.word	0x004031a1
  4003d0:	004031d5 	.word	0x004031d5
  4003d4:	004021a9 	.word	0x004021a9
  4003d8:	40078000 	.word	0x40078000
  4003dc:	004021b9 	.word	0x004021b9

004003e0 <configure_ssc>:
#include "WM8904_Driver.h"


/********************************** Public Functions Start **********************************/
void configure_ssc(void)
{
  4003e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	clock_opt_t tx_clk_option, rx_clk_option;
	data_frame_opt_t tx_data_frame_option, rx_data_frame_option;

	/* Initialize clock */
	pmc_enable_periph_clk(ID_SSC);
  4003e4:	4b28      	ldr	r3, [pc, #160]	; (400488 <configure_ssc+0xa8>)
{
  4003e6:	b09c      	sub	sp, #112	; 0x70
	pmc_enable_periph_clk(ID_SSC);
  4003e8:	2016      	movs	r0, #22
	/* Reset SSC */
	ssc_reset(SSC);

	/* Transmitter clock mode configuration. */
	tx_clk_option.ul_cks = SSC_TCMR_CKS_TK;
	tx_clk_option.ul_cko = SSC_TCMR_CKO_NONE;
  4003ea:	2400      	movs	r4, #0
	pmc_enable_periph_clk(ID_SSC);
  4003ec:	4798      	blx	r3
	ssc_reset(SSC);
  4003ee:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4003f2:	4b26      	ldr	r3, [pc, #152]	; (40048c <configure_ssc+0xac>)
	tx_clk_option.ul_cki = 0;
	tx_clk_option.ul_ckg = SSC_TCMR_CKG_CONTINUOUS;
	tx_clk_option.ul_start_sel = SSC_TCMR_START_TF_EDGE;
	tx_clk_option.ul_sttdly = 1;
	tx_clk_option.ul_period = BITS_BY_SLOT - 1;
  4003f4:	250f      	movs	r5, #15
	ssc_reset(SSC);
  4003f6:	4798      	blx	r3
	tx_clk_option.ul_sttdly = 1;
  4003f8:	2601      	movs	r6, #1
	tx_clk_option.ul_start_sel = SSC_TCMR_START_TF_EDGE;
  4003fa:	f44f 68e0 	mov.w	r8, #1792	; 0x700
	tx_clk_option.ul_cks = SSC_TCMR_CKS_TK;
  4003fe:	f04f 0e02 	mov.w	lr, #2
	/* Transmitter frame mode configuration. */
	tx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
	tx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  400402:	2780      	movs	r7, #128	; 0x80
	tx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;
	tx_data_frame_option.ul_fslen_ext = 0;
	tx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
	tx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
	/* Configure the SSC transmitter to I2S mode. */
	ssc_set_transmitter(SSC, &tx_clk_option, &tx_data_frame_option);
  400404:	aa0e      	add	r2, sp, #56	; 0x38
  400406:	4669      	mov	r1, sp
  400408:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40040c:	4b20      	ldr	r3, [pc, #128]	; (400490 <configure_ssc+0xb0>)
	tx_clk_option.ul_cks = SSC_TCMR_CKS_TK;
  40040e:	f8cd e000 	str.w	lr, [sp]
	tx_clk_option.ul_cko = SSC_TCMR_CKO_NONE;
  400412:	9401      	str	r4, [sp, #4]
	tx_clk_option.ul_cki = 0;
  400414:	9402      	str	r4, [sp, #8]
	tx_clk_option.ul_ckg = SSC_TCMR_CKG_CONTINUOUS;
  400416:	9403      	str	r4, [sp, #12]
	tx_data_frame_option.ul_datnb = 0;
  400418:	9410      	str	r4, [sp, #64]	; 0x40
	tx_data_frame_option.ul_fslen_ext = 0;
  40041a:	9412      	str	r4, [sp, #72]	; 0x48
	tx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  40041c:	9413      	str	r4, [sp, #76]	; 0x4c
	tx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  40041e:	9414      	str	r4, [sp, #80]	; 0x50
	tx_clk_option.ul_start_sel = SSC_TCMR_START_TF_EDGE;
  400420:	f8cd 8018 	str.w	r8, [sp, #24]
	tx_clk_option.ul_sttdly = 1;
  400424:	9605      	str	r6, [sp, #20]
	tx_clk_option.ul_period = BITS_BY_SLOT - 1;
  400426:	9504      	str	r5, [sp, #16]
	tx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
  400428:	950e      	str	r5, [sp, #56]	; 0x38
	tx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;
  40042a:	9511      	str	r5, [sp, #68]	; 0x44
	tx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  40042c:	970f      	str	r7, [sp, #60]	; 0x3c
	ssc_set_transmitter(SSC, &tx_clk_option, &tx_data_frame_option);
  40042e:	4798      	blx	r3

	/* Receiver clock mode configuration. */
	rx_clk_option.ul_cks = SSC_RCMR_CKS_TK;
	rx_clk_option.ul_cko = SSC_RCMR_CKO_NONE;
	rx_clk_option.ul_cki = SSC_RCMR_CKI;
  400430:	f04f 0c20 	mov.w	ip, #32
	rx_clk_option.ul_ckg = SSC_RCMR_CKG_CONTINUOUS;
	rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_EDGE;
	rx_clk_option.ul_sttdly = 1;	
	rx_clk_option.ul_period = BITS_BY_SLOT;	
  400434:	f04f 0e10 	mov.w	lr, #16
	rx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;	
	rx_data_frame_option.ul_fslen_ext = 0;
	rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
	rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
	/* Configure the SSC transmitter to I2S mode. */
	ssc_set_receiver(SSC, &rx_clk_option, &rx_data_frame_option);
  400438:	aa15      	add	r2, sp, #84	; 0x54
  40043a:	a907      	add	r1, sp, #28
  40043c:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400440:	4b14      	ldr	r3, [pc, #80]	; (400494 <configure_ssc+0xb4>)
	rx_clk_option.ul_cki = SSC_RCMR_CKI;
  400442:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
	rx_clk_option.ul_period = BITS_BY_SLOT;	
  400446:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
	rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_EDGE;
  40044a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
	rx_clk_option.ul_cks = SSC_RCMR_CKS_TK;
  40044e:	9607      	str	r6, [sp, #28]
	rx_clk_option.ul_cko = SSC_RCMR_CKO_NONE;
  400450:	9408      	str	r4, [sp, #32]
	rx_clk_option.ul_ckg = SSC_RCMR_CKG_CONTINUOUS;
  400452:	940a      	str	r4, [sp, #40]	; 0x28
	rx_clk_option.ul_sttdly = 1;	
  400454:	960c      	str	r6, [sp, #48]	; 0x30
	rx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
  400456:	9515      	str	r5, [sp, #84]	; 0x54
	rx_data_frame_option.ul_msbf = SSC_RFMR_MSBF;
  400458:	9716      	str	r7, [sp, #88]	; 0x58
	rx_data_frame_option.ul_datnb = 0;
  40045a:	9417      	str	r4, [sp, #92]	; 0x5c
	rx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;	
  40045c:	9518      	str	r5, [sp, #96]	; 0x60
	rx_data_frame_option.ul_fslen_ext = 0;
  40045e:	9419      	str	r4, [sp, #100]	; 0x64
	rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  400460:	941a      	str	r4, [sp, #104]	; 0x68
	rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  400462:	941b      	str	r4, [sp, #108]	; 0x6c
	ssc_set_receiver(SSC, &rx_clk_option, &rx_data_frame_option);
  400464:	4798      	blx	r3

	/* Disable transmitter first */
	ssc_disable_tx(SSC);
  400466:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40046a:	4b0b      	ldr	r3, [pc, #44]	; (400498 <configure_ssc+0xb8>)
  40046c:	4798      	blx	r3
	ssc_disable_rx(SSC);
  40046e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400472:	4b0a      	ldr	r3, [pc, #40]	; (40049c <configure_ssc+0xbc>)
  400474:	4798      	blx	r3

	/* Disable All Interrupt */
	ssc_disable_interrupt(SSC, 0xFFFFFFFF);
  400476:	f04f 31ff 	mov.w	r1, #4294967295
  40047a:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40047e:	4b08      	ldr	r3, [pc, #32]	; (4004a0 <configure_ssc+0xc0>)
  400480:	4798      	blx	r3
}
  400482:	b01c      	add	sp, #112	; 0x70
  400484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400488:	00403125 	.word	0x00403125
  40048c:	00402195 	.word	0x00402195
  400490:	0040223d 	.word	0x0040223d
  400494:	004021c9 	.word	0x004021c9
  400498:	004021c1 	.word	0x004021c1
  40049c:	004021b1 	.word	0x004021b1
  4004a0:	004022b1 	.word	0x004022b1

004004a4 <configure_codec>:


void configure_codec(void)
{
  4004a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t data = 0;
	/* check that WM8904 is present */
	wm8904_write_register(WM8904_SW_RESET_AND_ID, 0xFFFF);
  4004a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
  4004ac:	4c3d      	ldr	r4, [pc, #244]	; (4005a4 <configure_codec+0x100>)
  4004ae:	2000      	movs	r0, #0
	}

	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS);	
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |	
	WM8904_VMID_RES_FAST | WM8904_VMID_ENA);
	delay_ms(5);
  4004b0:	4e3d      	ldr	r6, [pc, #244]	; (4005a8 <configure_codec+0x104>)
	wm8904_write_register(WM8904_SW_RESET_AND_ID, 0xFFFF);
  4004b2:	47a0      	blx	r4
	data = wm8904_read_register(WM8904_SW_RESET_AND_ID);
  4004b4:	4b3d      	ldr	r3, [pc, #244]	; (4005ac <configure_codec+0x108>)
  4004b6:	2000      	movs	r0, #0
	delay_ms(5);
  4004b8:	4d3d      	ldr	r5, [pc, #244]	; (4005b0 <configure_codec+0x10c>)
	data = wm8904_read_register(WM8904_SW_RESET_AND_ID);
  4004ba:	4798      	blx	r3
	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS);	
  4004bc:	2108      	movs	r1, #8
  4004be:	2004      	movs	r0, #4
	WM8904_DCS_ENA_CHAN_3 | WM8904_DCS_ENA_CHAN_2 |
	WM8904_DCS_ENA_CHAN_1 | WM8904_DCS_ENA_CHAN_0);
	wm8904_write_register(WM8904_DC_SERVO_1,
	WM8904_DCS_TRIG_STARTUP_3 | WM8904_DCS_TRIG_STARTUP_2 |
	WM8904_DCS_TRIG_STARTUP_1 | WM8904_DCS_TRIG_STARTUP_0);
	delay_ms(100);
  4004c0:	4f3c      	ldr	r7, [pc, #240]	; (4005b4 <configure_codec+0x110>)
	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS);	
  4004c2:	47a0      	blx	r4
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |	
  4004c4:	2147      	movs	r1, #71	; 0x47
  4004c6:	2005      	movs	r0, #5
  4004c8:	47a0      	blx	r4
	delay_ms(5);
  4004ca:	4630      	mov	r0, r6
  4004cc:	47a8      	blx	r5
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |
  4004ce:	2143      	movs	r1, #67	; 0x43
  4004d0:	2005      	movs	r0, #5
  4004d2:	47a0      	blx	r4
	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS | WM8904_BIAS_ENA);
  4004d4:	2109      	movs	r1, #9
  4004d6:	2004      	movs	r0, #4
  4004d8:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_0, WM8904_INL_ENA | WM8904_INR_ENA);
  4004da:	2103      	movs	r1, #3
  4004dc:	200c      	movs	r0, #12
  4004de:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_2, WM8904_HPL_PGA_ENA | WM8904_HPR_PGA_ENA);
  4004e0:	2103      	movs	r1, #3
  4004e2:	200e      	movs	r0, #14
  4004e4:	47a0      	blx	r4
	wm8904_write_register(WM8904_DAC_DIGITAL_1, WM8904_DEEMPH(0));
  4004e6:	2100      	movs	r1, #0
  4004e8:	2021      	movs	r0, #33	; 0x21
  4004ea:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_OUT12_ZC, 0x0000);
  4004ec:	2100      	movs	r1, #0
  4004ee:	203d      	movs	r0, #61	; 0x3d
  4004f0:	47a0      	blx	r4
	wm8904_write_register(WM8904_CHARGE_PUMP_0, WM8904_CP_ENA);
  4004f2:	2101      	movs	r1, #1
  4004f4:	2062      	movs	r0, #98	; 0x62
  4004f6:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLASS_W_0, WM8904_CP_DYN_PWR);
  4004f8:	2101      	movs	r1, #1
  4004fa:	2068      	movs	r0, #104	; 0x68
  4004fc:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_1, 0x0000);
  4004fe:	2100      	movs	r1, #0
  400500:	2074      	movs	r0, #116	; 0x74
  400502:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_2, WM8904_FLL_OUTDIV(7)| WM8904_FLL_FRATIO(4));
  400504:	f240 7104 	movw	r1, #1796	; 0x704
  400508:	2075      	movs	r0, #117	; 0x75
  40050a:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_3, WM8904_FLL_K(0x8000));
  40050c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  400510:	2076      	movs	r0, #118	; 0x76
  400512:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_4, WM8904_FLL_N(0xBB));
  400514:	f44f 51bb 	mov.w	r1, #5984	; 0x1760
  400518:	2077      	movs	r0, #119	; 0x77
  40051a:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_1, WM8904_FLL_FRACN_ENA | WM8904_FLL_ENA);
  40051c:	2105      	movs	r1, #5
  40051e:	2074      	movs	r0, #116	; 0x74
  400520:	47a0      	blx	r4
	delay_ms(5);
  400522:	4630      	mov	r0, r6
  400524:	47a8      	blx	r5
	wm8904_write_register(WM8904_CLOCK_RATES_1, WM8904_CLK_SYS_RATE(3) | WM8904_SAMPLE_RATE(SAMPLE_RATE));
  400526:	f640 4105 	movw	r1, #3077	; 0xc05
  40052a:	2015      	movs	r0, #21
  40052c:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLOCK_RATES_0, 0x0000);
  40052e:	2100      	movs	r1, #0
  400530:	2014      	movs	r0, #20
  400532:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLOCK_RATES_2,
  400534:	f244 0106 	movw	r1, #16390	; 0x4006
  400538:	2016      	movs	r0, #22
  40053a:	47a0      	blx	r4
	wm8904_write_register(WM8904_AUDIO_INTERFACE_1, WM8904_BCLK_DIR | WM8904_AIF_FMT_I2S); 
  40053c:	2142      	movs	r1, #66	; 0x42
  40053e:	2019      	movs	r0, #25
  400540:	47a0      	blx	r4
	wm8904_write_register(WM8904_AUDIO_INTERFACE_2, WM8904_BCLK_DIV(8));
  400542:	2108      	movs	r1, #8
  400544:	201a      	movs	r0, #26
  400546:	47a0      	blx	r4
	wm8904_write_register(WM8904_AUDIO_INTERFACE_3, WM8904_LRCLK_DIR | WM8904_LRCLK_RATE(0x20));
  400548:	f44f 6102 	mov.w	r1, #2080	; 0x820
  40054c:	201b      	movs	r0, #27
  40054e:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_6,
  400550:	210f      	movs	r1, #15
  400552:	2012      	movs	r0, #18
  400554:	47a0      	blx	r4
	delay_ms(5);
  400556:	4630      	mov	r0, r6
  400558:	47a8      	blx	r5
	wm8904_write_register(WM8904_ANALOGUE_LEFT_INPUT_0, WM8904_LIN_VOL(0x10));
  40055a:	2110      	movs	r1, #16
  40055c:	202c      	movs	r0, #44	; 0x2c
  40055e:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_RIGHT_INPUT_0, WM8904_RIN_VOL(0x10));
  400560:	2110      	movs	r1, #16
  400562:	202d      	movs	r0, #45	; 0x2d
  400564:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  400566:	2111      	movs	r1, #17
  400568:	205a      	movs	r0, #90	; 0x5a
  40056a:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  40056c:	2133      	movs	r1, #51	; 0x33
  40056e:	205a      	movs	r0, #90	; 0x5a
  400570:	47a0      	blx	r4
	wm8904_write_register(WM8904_DC_SERVO_0,
  400572:	210f      	movs	r1, #15
  400574:	2043      	movs	r0, #67	; 0x43
  400576:	47a0      	blx	r4
	wm8904_write_register(WM8904_DC_SERVO_1,
  400578:	21f0      	movs	r1, #240	; 0xf0
  40057a:	2044      	movs	r0, #68	; 0x44
  40057c:	47a0      	blx	r4
	delay_ms(100);
  40057e:	4638      	mov	r0, r7
  400580:	47a8      	blx	r5
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  400582:	2177      	movs	r1, #119	; 0x77
  400584:	205a      	movs	r0, #90	; 0x5a
  400586:	47a0      	blx	r4
	WM8904_HPL_ENA_OUTP | WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_ENA_OUTP | WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  400588:	21ff      	movs	r1, #255	; 0xff
  40058a:	205a      	movs	r0, #90	; 0x5a
  40058c:	47a0      	blx	r4
	WM8904_HPL_RMV_SHORT | WM8904_HPL_ENA_OUTP | WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_RMV_SHORT | WM8904_HPR_ENA_OUTP | WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_OUT1_LEFT, WM8904_HPOUT_VU | WM8904_HPOUTL_VOL(0x39));
  40058e:	21b9      	movs	r1, #185	; 0xb9
  400590:	2039      	movs	r0, #57	; 0x39
  400592:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_OUT1_RIGHT, WM8904_HPOUT_VU | WM8904_HPOUTR_VOL(0x39));
  400594:	203a      	movs	r0, #58	; 0x3a
  400596:	21b9      	movs	r1, #185	; 0xb9
  400598:	47a0      	blx	r4
	delay_ms(100);
  40059a:	4638      	mov	r0, r7
  40059c:	462b      	mov	r3, r5
}
  40059e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	delay_ms(100);
  4005a2:	4718      	bx	r3
  4005a4:	00401ca1 	.word	0x00401ca1
  4005a8:	0003dbc2 	.word	0x0003dbc2
  4005ac:	00401cdd 	.word	0x00401cdd
  4005b0:	20400001 	.word	0x20400001
  4005b4:	004d2b25 	.word	0x004d2b25

004005b8 <computeWaveletPitch>:
{
	float pitchF = 0.0f;
	int32_t i, j;
	float si, si1;
	
	arm_copy_f32(samples, sam, WIN_SIZE); 
  4005b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4005bc:	4995      	ldr	r1, [pc, #596]	; (400814 <computeWaveletPitch+0x25c>)
  4005be:	4b96      	ldr	r3, [pc, #600]	; (400818 <computeWaveletPitch+0x260>)
	
	return pitchF;
}

float computeWaveletPitch(float * samples)
{
  4005c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int32_t curSamNb = WIN_SIZE;
  4005c4:	4692      	mov	sl, r2
	int32_t curLevel = 0;
  4005c6:	2400      	movs	r4, #0
		memset(distances, 0, WIN_SIZE*sizeof(int32_t));
  4005c8:	f8df b268 	ldr.w	fp, [pc, #616]	; 400834 <computeWaveletPitch+0x27c>
{
  4005cc:	ed2d 8b04 	vpush	{d8-d9}
  4005d0:	b087      	sub	sp, #28
	float curModeDistance = -1.0f;
  4005d2:	eeff 9a00 	vmov.f32	s19, #240	; 0xbf800000 -1.0
	arm_copy_f32(samples, sam, WIN_SIZE); 
  4005d6:	4798      	blx	r3
		arm_max_f32(sam, WIN_SIZE, &maxValue, &temp_idx); 
  4005d8:	4651      	mov	r1, sl
  4005da:	ab03      	add	r3, sp, #12
  4005dc:	aa04      	add	r2, sp, #16
  4005de:	488d      	ldr	r0, [pc, #564]	; (400814 <computeWaveletPitch+0x25c>)
	int32_t curLevel = 0;
  4005e0:	9400      	str	r4, [sp, #0]
		arm_max_f32(sam, WIN_SIZE, &maxValue, &temp_idx); 
  4005e2:	4c8e      	ldr	r4, [pc, #568]	; (40081c <computeWaveletPitch+0x264>)
  4005e4:	47a0      	blx	r4
		arm_min_f32(sam, WIN_SIZE, &minValue, &temp_idx); 
  4005e6:	ab03      	add	r3, sp, #12
  4005e8:	aa05      	add	r2, sp, #20
  4005ea:	4651      	mov	r1, sl
  4005ec:	4889      	ldr	r0, [pc, #548]	; (400814 <computeWaveletPitch+0x25c>)
  4005ee:	4c8c      	ldr	r4, [pc, #560]	; (400820 <computeWaveletPitch+0x268>)
  4005f0:	47a0      	blx	r4
		float amplitudeMax = (maxValue > -minValue ? maxValue : -minValue);
  4005f2:	ed9d 9a05 	vldr	s18, [sp, #20]
		ampltitudeThreshold = amplitudeMax*maximaThresholdRatio;		
  4005f6:	eef6 7a08 	vmov.f32	s15, #104	; 0x3f400000  0.750
		float amplitudeMax = (maxValue > -minValue ? maxValue : -minValue);
  4005fa:	ed9d 7a04 	vldr	s14, [sp, #16]
  4005fe:	eeb1 9a49 	vneg.f32	s18, s18
	int32_t res = 1, j;
  400602:	2301      	movs	r3, #1
		delta = DYW_SAMPLING_RATE/(_2power(curLevel)*maxF);
  400604:	eddf 8a87 	vldr	s17, [pc, #540]	; 400824 <computeWaveletPitch+0x26c>
		if (curSamNb < 2) return pitchF;
  400608:	ed9f 8a87 	vldr	s16, [pc, #540]	; 400828 <computeWaveletPitch+0x270>
		float amplitudeMax = (maxValue > -minValue ? maxValue : -minValue);
  40060c:	fe89 9a07 	vmaxnm.f32	s18, s18, s14
		ampltitudeThreshold = amplitudeMax*maximaThresholdRatio;		
  400610:	ee29 9a27 	vmul.f32	s18, s18, s15
		delta = DYW_SAMPLING_RATE/(_2power(curLevel)*maxF);
  400614:	ee07 3a90 	vmov	s15, r3
		if (curSamNb < 2) return pitchF;
  400618:	f1ba 0f01 	cmp.w	sl, #1
		delta = DYW_SAMPLING_RATE/(_2power(curLevel)*maxF);
  40061c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400620:	ee88 7aa7 	vdiv.f32	s14, s17, s15
  400624:	eefd 7ac7 	vcvt.s32.f32	s15, s14
  400628:	ee17 4a90 	vmov	r4, s15
		if (curSamNb < 2) return pitchF;
  40062c:	f340 8284 	ble.w	400b38 <computeWaveletPitch+0x580>
  400630:	f1ba 0f03 	cmp.w	sl, #3
  400634:	f340 826b 	ble.w	400b0e <computeWaveletPitch+0x556>
  400638:	f1aa 0e04 	sub.w	lr, sl, #4
  40063c:	4b75      	ldr	r3, [pc, #468]	; (400814 <computeWaveletPitch+0x25c>)
  40063e:	2000      	movs	r0, #0
  400640:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 400838 <computeWaveletPitch+0x280>
  400644:	f02e 0e01 	bic.w	lr, lr, #1
  400648:	4619      	mov	r1, r3
  40064a:	9301      	str	r3, [sp, #4]
  40064c:	4602      	mov	r2, r0
  40064e:	edd3 7a00 	vldr	s15, [r3]
  400652:	f10e 0e03 	add.w	lr, lr, #3
  400656:	4606      	mov	r6, r0
  400658:	4605      	mov	r5, r0
  40065a:	46c4      	mov	ip, r8
  40065c:	eeb0 7a48 	vmov.f32	s14, s16
  400660:	2301      	movs	r3, #1
  400662:	e050      	b.n	400706 <computeWaveletPitch+0x14e>
						if (i -1 > lastmaxIndex + delta) 
  400664:	2201      	movs	r2, #1
			si = sam[i]; // - theDC;
  400666:	edd1 7a02 	vldr	s15, [r1, #8]
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
  40066a:	eef5 7a40 	vcmp.f32	s15, #0.0
  40066e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400672:	dd06      	ble.n	400682 <computeWaveletPitch+0xca>
  400674:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40067c:	d801      	bhi.n	400682 <computeWaveletPitch+0xca>
  40067e:	2000      	movs	r0, #0
  400680:	2201      	movs	r2, #1
			if (si1 >= 0 && si < 0) {findMin = 1; findMax = 0; }
  400682:	eef5 7a40 	vcmp.f32	s15, #0.0
  400686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40068a:	d506      	bpl.n	40069a <computeWaveletPitch+0xe2>
  40068c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400694:	db01      	blt.n	40069a <computeWaveletPitch+0xe2>
  400696:	2001      	movs	r0, #1
  400698:	2200      	movs	r2, #0
			if (previousDV > -1000.0f) 
  40069a:	eeb4 6ac8 	vcmpe.f32	s12, s16
			dv = si - si1;
  40069e:	ee37 7ae6 	vsub.f32	s14, s15, s13
			if (previousDV > -1000.0f) 
  4006a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006a6:	dd2a      	ble.n	4006fe <computeWaveletPitch+0x146>
				if (findMin && previousDV < 0.0f && dv >= 0.0f) 
  4006a8:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
  4006ac:	f000 0701 	and.w	r7, r0, #1
  4006b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006b4:	bf58      	it	pl
  4006b6:	2700      	movpl	r7, #0
  4006b8:	b1af      	cbz	r7, 4006e6 <computeWaveletPitch+0x12e>
  4006ba:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  4006be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006c2:	db10      	blt.n	4006e6 <computeWaveletPitch+0x12e>
					if (Abs(si1) >= ampltitudeThreshold) 
  4006c4:	eef0 5ae6 	vabs.f32	s11, s13
  4006c8:	eeb4 9ae5 	vcmpe.f32	s18, s11
  4006cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006d0:	d809      	bhi.n	4006e6 <computeWaveletPitch+0x12e>
						if (i - 1 > lastMinIndex + delta)
  4006d2:	eb04 070c 	add.w	r7, r4, ip
  4006d6:	429f      	cmp	r7, r3
  4006d8:	da05      	bge.n	4006e6 <computeWaveletPitch+0x12e>
							mins[nbMins++] = i - 1;
  4006da:	4854      	ldr	r0, [pc, #336]	; (40082c <computeWaveletPitch+0x274>)
  4006dc:	469c      	mov	ip, r3
  4006de:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
  4006e2:	3501      	adds	r5, #1
							findMin = 0;
  4006e4:	2000      	movs	r0, #0
				if (findMax && previousDV > 0.0f && dv <= 0.0f) 
  4006e6:	eeb5 6a40 	vcmp.f32	s12, #0.0
  4006ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006ee:	dd06      	ble.n	4006fe <computeWaveletPitch+0x146>
  4006f0:	b12a      	cbz	r2, 4006fe <computeWaveletPitch+0x146>
  4006f2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  4006f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006fa:	d96b      	bls.n	4007d4 <computeWaveletPitch+0x21c>
						if (i -1 > lastmaxIndex + delta) 
  4006fc:	2201      	movs	r2, #1
  4006fe:	3302      	adds	r3, #2
  400700:	3108      	adds	r1, #8
  400702:	4573      	cmp	r3, lr
  400704:	d07b      	beq.n	4007fe <computeWaveletPitch+0x246>
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
  400706:	eef5 7a40 	vcmp.f32	s15, #0.0
			si = sam[i]; // - theDC;
  40070a:	edd1 6a01 	vldr	s13, [r1, #4]
  40070e:	1e5f      	subs	r7, r3, #1
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
  400710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400714:	d806      	bhi.n	400724 <computeWaveletPitch+0x16c>
  400716:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  40071a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40071e:	dd01      	ble.n	400724 <computeWaveletPitch+0x16c>
  400720:	2000      	movs	r0, #0
  400722:	2201      	movs	r2, #1
			if (si1 >= 0 && si < 0) {findMin = 1; findMax = 0; }
  400724:	eef5 7a40 	vcmp.f32	s15, #0.0
  400728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40072c:	db06      	blt.n	40073c <computeWaveletPitch+0x184>
  40072e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400736:	d501      	bpl.n	40073c <computeWaveletPitch+0x184>
  400738:	2001      	movs	r0, #1
  40073a:	2200      	movs	r2, #0
			if (previousDV > -1000.0f) 
  40073c:	eeb4 7ac8 	vcmpe.f32	s14, s16
			dv = si - si1;
  400740:	ee36 6ae7 	vsub.f32	s12, s13, s15
			if (previousDV > -1000.0f) 
  400744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400748:	dd8d      	ble.n	400666 <computeWaveletPitch+0xae>
				if (findMin && previousDV < 0.0f && dv >= 0.0f) 
  40074a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  40074e:	f000 0901 	and.w	r9, r0, #1
  400752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400756:	bf58      	it	pl
  400758:	f04f 0900 	movpl.w	r9, #0
  40075c:	f1b9 0f00 	cmp.w	r9, #0
  400760:	d015      	beq.n	40078e <computeWaveletPitch+0x1d6>
  400762:	eeb5 6a40 	vcmp.f32	s12, #0.0
  400766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40076a:	db10      	blt.n	40078e <computeWaveletPitch+0x1d6>
					if (Abs(si1) >= ampltitudeThreshold) 
  40076c:	eef0 5ae7 	vabs.f32	s11, s15
  400770:	eeb4 9ae5 	vcmpe.f32	s18, s11
  400774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400778:	d809      	bhi.n	40078e <computeWaveletPitch+0x1d6>
						if (i - 1 > lastMinIndex + delta)
  40077a:	eb04 090c 	add.w	r9, r4, ip
  40077e:	45b9      	cmp	r9, r7
  400780:	da05      	bge.n	40078e <computeWaveletPitch+0x1d6>
							mins[nbMins++] = i - 1;
  400782:	482a      	ldr	r0, [pc, #168]	; (40082c <computeWaveletPitch+0x274>)
  400784:	46bc      	mov	ip, r7
  400786:	f840 7025 	str.w	r7, [r0, r5, lsl #2]
  40078a:	3501      	adds	r5, #1
							findMin = 0;
  40078c:	2000      	movs	r0, #0
				if (findMax && previousDV > 0.0f && dv <= 0.0f) 
  40078e:	eeb5 7a40 	vcmp.f32	s14, #0.0
  400792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400796:	f77f af66 	ble.w	400666 <computeWaveletPitch+0xae>
  40079a:	2a00      	cmp	r2, #0
  40079c:	f43f af63 	beq.w	400666 <computeWaveletPitch+0xae>
  4007a0:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
  4007a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4007a8:	f63f af5c 	bhi.w	400664 <computeWaveletPitch+0xac>
					if (Abs(si1) >= ampltitudeThreshold) 
  4007ac:	eef0 7ae7 	vabs.f32	s15, s15
  4007b0:	eeb4 9ae7 	vcmpe.f32	s18, s15
  4007b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4007b8:	f63f af54 	bhi.w	400664 <computeWaveletPitch+0xac>
						if (i -1 > lastmaxIndex + delta) 
  4007bc:	eb04 0208 	add.w	r2, r4, r8
  4007c0:	42ba      	cmp	r2, r7
  4007c2:	f6bf af4f 	bge.w	400664 <computeWaveletPitch+0xac>
							maxs[nbMaxs++] = i - 1;
  4007c6:	4a1a      	ldr	r2, [pc, #104]	; (400830 <computeWaveletPitch+0x278>)
  4007c8:	46b8      	mov	r8, r7
  4007ca:	f842 7026 	str.w	r7, [r2, r6, lsl #2]
  4007ce:	3601      	adds	r6, #1
							findMax = 0;
  4007d0:	2200      	movs	r2, #0
  4007d2:	e748      	b.n	400666 <computeWaveletPitch+0xae>
					if (Abs(si1) >= ampltitudeThreshold) 
  4007d4:	eef0 6ae6 	vabs.f32	s13, s13
  4007d8:	eeb4 9ae6 	vcmpe.f32	s18, s13
  4007dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4007e0:	d88c      	bhi.n	4006fc <computeWaveletPitch+0x144>
						if (i -1 > lastmaxIndex + delta) 
  4007e2:	eb04 0208 	add.w	r2, r4, r8
  4007e6:	429a      	cmp	r2, r3
  4007e8:	da88      	bge.n	4006fc <computeWaveletPitch+0x144>
							maxs[nbMaxs++] = i - 1;
  4007ea:	4a11      	ldr	r2, [pc, #68]	; (400830 <computeWaveletPitch+0x278>)
  4007ec:	4698      	mov	r8, r3
  4007ee:	3108      	adds	r1, #8
  4007f0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  4007f4:	3302      	adds	r3, #2
  4007f6:	3601      	adds	r6, #1
							findMax = 0;
  4007f8:	2200      	movs	r2, #0
  4007fa:	4573      	cmp	r3, lr
  4007fc:	d183      	bne.n	400706 <computeWaveletPitch+0x14e>
  4007fe:	9f01      	ldr	r7, [sp, #4]
  400800:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
							mins[nbMins++] = i - 1;
  400804:	f8df 9024 	ldr.w	r9, [pc, #36]	; 40082c <computeWaveletPitch+0x274>
  400808:	46a6      	mov	lr, r4
  40080a:	4419      	add	r1, r3
  40080c:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  400810:	e01a      	b.n	400848 <computeWaveletPitch+0x290>
  400812:	bf00      	nop
  400814:	20407400 	.word	0x20407400
  400818:	00404049 	.word	0x00404049
  40081c:	004041e5 	.word	0x004041e5
  400820:	00404109 	.word	0x00404109
  400824:	41780419 	.word	0x41780419
  400828:	c47a0000 	.word	0xc47a0000
  40082c:	20406400 	.word	0x20406400
  400830:	20405400 	.word	0x20405400
  400834:	20404400 	.word	0x20404400
  400838:	fff0bdc0 	.word	0xfff0bdc0
						if (i -1 > lastmaxIndex + delta) 
  40083c:	2201      	movs	r2, #1
		for (i = 1; i < curSamNb; i++) 
  40083e:	3301      	adds	r3, #1
			dv = si - si1;
  400840:	eeb0 7a67 	vmov.f32	s14, s15
		for (i = 1; i < curSamNb; i++) 
  400844:	459a      	cmp	sl, r3
  400846:	dd65      	ble.n	400914 <computeWaveletPitch+0x35c>
			si = sam[i]; // - theDC;
  400848:	edd1 7a01 	vldr	s15, [r1, #4]
  40084c:	1e5f      	subs	r7, r3, #1
			si1 = sam[i-1]; // - theDC;
  40084e:	ecf1 6a01 	vldmia	r1!, {s13}
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
  400852:	eef5 7a40 	vcmp.f32	s15, #0.0
  400856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40085a:	dd06      	ble.n	40086a <computeWaveletPitch+0x2b2>
  40085c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400864:	d801      	bhi.n	40086a <computeWaveletPitch+0x2b2>
  400866:	2000      	movs	r0, #0
  400868:	2201      	movs	r2, #1
			if (si1 >= 0 && si < 0) {findMin = 1; findMax = 0; }
  40086a:	eef5 7a40 	vcmp.f32	s15, #0.0
  40086e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400872:	d506      	bpl.n	400882 <computeWaveletPitch+0x2ca>
  400874:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40087c:	db01      	blt.n	400882 <computeWaveletPitch+0x2ca>
  40087e:	2001      	movs	r0, #1
  400880:	2200      	movs	r2, #0
			if (previousDV > -1000.0f) 
  400882:	eeb4 7ac8 	vcmpe.f32	s14, s16
			dv = si - si1;
  400886:	ee77 7ae6 	vsub.f32	s15, s15, s13
			if (previousDV > -1000.0f) 
  40088a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40088e:	ddd6      	ble.n	40083e <computeWaveletPitch+0x286>
				if (findMin && previousDV < 0.0f && dv >= 0.0f) 
  400890:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  400894:	f000 0401 	and.w	r4, r0, #1
  400898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40089c:	bf58      	it	pl
  40089e:	2400      	movpl	r4, #0
  4008a0:	b1a4      	cbz	r4, 4008cc <computeWaveletPitch+0x314>
  4008a2:	eef5 7a40 	vcmp.f32	s15, #0.0
  4008a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008aa:	db0f      	blt.n	4008cc <computeWaveletPitch+0x314>
					if (Abs(si1) >= ampltitudeThreshold) 
  4008ac:	eeb0 6ae6 	vabs.f32	s12, s13
  4008b0:	eeb4 9ac6 	vcmpe.f32	s18, s12
  4008b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008b8:	d808      	bhi.n	4008cc <computeWaveletPitch+0x314>
						if (i - 1 > lastMinIndex + delta)
  4008ba:	eb0e 040c 	add.w	r4, lr, ip
  4008be:	42bc      	cmp	r4, r7
  4008c0:	da04      	bge.n	4008cc <computeWaveletPitch+0x314>
							mins[nbMins++] = i - 1;
  4008c2:	f849 7025 	str.w	r7, [r9, r5, lsl #2]
  4008c6:	46bc      	mov	ip, r7
  4008c8:	3501      	adds	r5, #1
							findMin = 0;
  4008ca:	2000      	movs	r0, #0
				if (findMax && previousDV > 0.0f && dv <= 0.0f) 
  4008cc:	eeb5 7a40 	vcmp.f32	s14, #0.0
  4008d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008d4:	ddb3      	ble.n	40083e <computeWaveletPitch+0x286>
  4008d6:	2a00      	cmp	r2, #0
  4008d8:	d0b1      	beq.n	40083e <computeWaveletPitch+0x286>
  4008da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  4008de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008e2:	d8ab      	bhi.n	40083c <computeWaveletPitch+0x284>
					if (Abs(si1) >= ampltitudeThreshold) 
  4008e4:	eef0 6ae6 	vabs.f32	s13, s13
  4008e8:	eeb4 9ae6 	vcmpe.f32	s18, s13
  4008ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008f0:	d8a4      	bhi.n	40083c <computeWaveletPitch+0x284>
						if (i -1 > lastmaxIndex + delta) 
  4008f2:	eb0e 0208 	add.w	r2, lr, r8
  4008f6:	42ba      	cmp	r2, r7
  4008f8:	daa0      	bge.n	40083c <computeWaveletPitch+0x284>
		for (i = 1; i < curSamNb; i++) 
  4008fa:	3301      	adds	r3, #1
							maxs[nbMaxs++] = i - 1;
  4008fc:	4acf      	ldr	r2, [pc, #828]	; (400c3c <computeWaveletPitch+0x684>)
  4008fe:	46b8      	mov	r8, r7
			dv = si - si1;
  400900:	eeb0 7a67 	vmov.f32	s14, s15
		for (i = 1; i < curSamNb; i++) 
  400904:	459a      	cmp	sl, r3
							maxs[nbMaxs++] = i - 1;
  400906:	f842 7026 	str.w	r7, [r2, r6, lsl #2]
  40090a:	f106 0601 	add.w	r6, r6, #1
							findMax = 0;
  40090e:	f04f 0200 	mov.w	r2, #0
		for (i = 1; i < curSamNb; i++) 
  400912:	dc99      	bgt.n	400848 <computeWaveletPitch+0x290>
  400914:	4674      	mov	r4, lr
		if (nbMins == 0 && nbMaxs == 0) 
  400916:	b915      	cbnz	r5, 40091e <computeWaveletPitch+0x366>
  400918:	2e00      	cmp	r6, #0
  40091a:	f000 810d 	beq.w	400b38 <computeWaveletPitch+0x580>
		memset(distances, 0, WIN_SIZE*sizeof(int32_t));
  40091e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400922:	2100      	movs	r1, #0
  400924:	4658      	mov	r0, fp
  400926:	4bc6      	ldr	r3, [pc, #792]	; (400c40 <computeWaveletPitch+0x688>)
  400928:	4798      	blx	r3
		for (i = 0 ; i < nbMins ; i++) 
  40092a:	b34d      	cbz	r5, 400980 <computeWaveletPitch+0x3c8>
  40092c:	f8df e32c 	ldr.w	lr, [pc, #812]	; 400c5c <computeWaveletPitch+0x6a4>
  400930:	2202      	movs	r2, #2
  400932:	2700      	movs	r7, #0
  400934:	4671      	mov	r1, lr
  400936:	e012      	b.n	40095e <computeWaveletPitch+0x3a6>
					d = Abs(mins[i] - mins[i+j]);
  400938:	f8d1 c000 	ldr.w	ip, [r1]
  40093c:	684b      	ldr	r3, [r1, #4]
  40093e:	ebac 0303 	sub.w	r3, ip, r3
  400942:	2b00      	cmp	r3, #0
  400944:	bfb8      	it	lt
  400946:	425b      	neglt	r3, r3
				if (i+j < nbMins) 
  400948:	42aa      	cmp	r2, r5
					distances[d]++; 
  40094a:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
  40094e:	f100 0001 	add.w	r0, r0, #1
  400952:	f84b 0023 	str.w	r0, [fp, r3, lsl #2]
				if (i+j < nbMins) 
  400956:	f2c0 80cc 	blt.w	400af2 <computeWaveletPitch+0x53a>
  40095a:	3104      	adds	r1, #4
  40095c:	3201      	adds	r2, #1
  40095e:	3701      	adds	r7, #1
  400960:	42af      	cmp	r7, r5
  400962:	dbe9      	blt.n	400938 <computeWaveletPitch+0x380>
  400964:	42aa      	cmp	r2, r5
  400966:	da0b      	bge.n	400980 <computeWaveletPitch+0x3c8>
					d = Abs(mins[i] - mins[i+j]);
  400968:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
  40096c:	680b      	ldr	r3, [r1, #0]
  40096e:	1a9b      	subs	r3, r3, r2
  400970:	2b00      	cmp	r3, #0
  400972:	bfb8      	it	lt
  400974:	425b      	neglt	r3, r3
					distances[d]++; 
  400976:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
  40097a:	3201      	adds	r2, #1
  40097c:	f84b 2023 	str.w	r2, [fp, r3, lsl #2]
		for (i = 0 ; i < nbMaxs ; i++) 
  400980:	b346      	cbz	r6, 4009d4 <computeWaveletPitch+0x41c>
  400982:	4dae      	ldr	r5, [pc, #696]	; (400c3c <computeWaveletPitch+0x684>)
  400984:	2202      	movs	r2, #2
  400986:	2700      	movs	r7, #0
  400988:	4629      	mov	r1, r5
  40098a:	e012      	b.n	4009b2 <computeWaveletPitch+0x3fa>
					d = Abs(maxs[i] - maxs[i+j]);
  40098c:	f8d1 e000 	ldr.w	lr, [r1]
  400990:	684b      	ldr	r3, [r1, #4]
  400992:	ebae 0303 	sub.w	r3, lr, r3
  400996:	2b00      	cmp	r3, #0
  400998:	bfb8      	it	lt
  40099a:	425b      	neglt	r3, r3
				if (i+j < nbMaxs) 
  40099c:	42b2      	cmp	r2, r6
					distances[d]++; 
  40099e:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
  4009a2:	f100 0001 	add.w	r0, r0, #1
  4009a6:	f84b 0023 	str.w	r0, [fp, r3, lsl #2]
				if (i+j < nbMaxs) 
  4009aa:	f2c0 818f 	blt.w	400ccc <computeWaveletPitch+0x714>
  4009ae:	3104      	adds	r1, #4
  4009b0:	3201      	adds	r2, #1
  4009b2:	3701      	adds	r7, #1
  4009b4:	42b7      	cmp	r7, r6
  4009b6:	dbe9      	blt.n	40098c <computeWaveletPitch+0x3d4>
  4009b8:	42b2      	cmp	r2, r6
  4009ba:	da0b      	bge.n	4009d4 <computeWaveletPitch+0x41c>
					d = Abs(maxs[i] - maxs[i+j]);
  4009bc:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4009c0:	680b      	ldr	r3, [r1, #0]
  4009c2:	1a9b      	subs	r3, r3, r2
  4009c4:	2b00      	cmp	r3, #0
  4009c6:	bfb8      	it	lt
  4009c8:	425b      	neglt	r3, r3
					distances[d]++; 
  4009ca:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
  4009ce:	3201      	adds	r2, #1
  4009d0:	f84b 2023 	str.w	r2, [fp, r3, lsl #2]
		for (i = 0 ; i < nbMaxs ; i++) 
  4009d4:	f04f 36ff 	mov.w	r6, #4294967295
  4009d8:	f1c4 0e00 	rsb	lr, r4, #0
  4009dc:	2500      	movs	r5, #0
  4009de:	f104 0c01 	add.w	ip, r4, #1
  4009e2:	4637      	mov	r7, r6
			for (j = -delta ; j <= delta ; j++) 
  4009e4:	4574      	cmp	r4, lr
  4009e6:	f2c0 8082 	blt.w	400aee <computeWaveletPitch+0x536>
  4009ea:	1b2b      	subs	r3, r5, r4
  4009ec:	eb0c 0205 	add.w	r2, ip, r5
  4009f0:	2100      	movs	r1, #0
				if (i+j >=0 && i+j < curSamNb)
  4009f2:	4553      	cmp	r3, sl
  4009f4:	da04      	bge.n	400a00 <computeWaveletPitch+0x448>
  4009f6:	2b00      	cmp	r3, #0
  4009f8:	db02      	blt.n	400a00 <computeWaveletPitch+0x448>
					summed += distances[i+j];
  4009fa:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
  4009fe:	4401      	add	r1, r0
  400a00:	3301      	adds	r3, #1
			for (j = -delta ; j <= delta ; j++) 
  400a02:	4293      	cmp	r3, r2
  400a04:	d1f5      	bne.n	4009f2 <computeWaveletPitch+0x43a>
			if (summed == bestValue) 
  400a06:	42b9      	cmp	r1, r7
  400a08:	d06c      	beq.n	400ae4 <computeWaveletPitch+0x52c>
			else if (summed > bestValue) 
  400a0a:	dd01      	ble.n	400a10 <computeWaveletPitch+0x458>
  400a0c:	460f      	mov	r7, r1
  400a0e:	462e      	mov	r6, r5
		for (i = 0; i< curSamNb; i++) 
  400a10:	3501      	adds	r5, #1
  400a12:	4555      	cmp	r5, sl
  400a14:	d1e6      	bne.n	4009e4 <computeWaveletPitch+0x42c>
		for (j = -delta ; j <= delta ; j++) 
  400a16:	4574      	cmp	r4, lr
  400a18:	f2c0 8087 	blt.w	400b2a <computeWaveletPitch+0x572>
  400a1c:	ed9f 7a89 	vldr	s14, [pc, #548]	; 400c44 <computeWaveletPitch+0x68c>
  400a20:	1c62      	adds	r2, r4, #1
  400a22:	1b33      	subs	r3, r6, r4
  400a24:	eef0 6a47 	vmov.f32	s13, s14
  400a28:	4416      	add	r6, r2
			if (bestDistance+j >=0 && bestDistance+j < WIN_SIZE) 
  400a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  400a2e:	d211      	bcs.n	400a54 <computeWaveletPitch+0x49c>
				int32_t nbDist = distances[bestDistance+j];
  400a30:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
					distAvg += (bestDistance+j)*nbDist;
  400a34:	fb02 f103 	mul.w	r1, r2, r3
					nbDists += nbDist;
  400a38:	ee06 2a10 	vmov	s12, r2
				if (nbDist > 0) {
  400a3c:	2a00      	cmp	r2, #0
					distAvg += (bestDistance+j)*nbDist;
  400a3e:	ee07 1a90 	vmov	s15, r1
					nbDists += nbDist;
  400a42:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
					distAvg += (bestDistance+j)*nbDist;
  400a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (nbDist > 0) {
  400a4a:	dd03      	ble.n	400a54 <computeWaveletPitch+0x49c>
					nbDists += nbDist;
  400a4c:	ee76 6a86 	vadd.f32	s13, s13, s12
					distAvg += (bestDistance+j)*nbDist;
  400a50:	ee37 7a27 	vadd.f32	s14, s14, s15
  400a54:	3301      	adds	r3, #1
		for (j = -delta ; j <= delta ; j++) 
  400a56:	42b3      	cmp	r3, r6
  400a58:	d1e7      	bne.n	400a2a <computeWaveletPitch+0x472>
  400a5a:	ee87 6a26 	vdiv.f32	s12, s14, s13
				pitchF = DYW_SAMPLING_RATE/(_2power(curLevel-1)*curModeDistance);
  400a5e:	9b00      	ldr	r3, [sp, #0]
		if (curModeDistance > -1.0f) 
  400a60:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  400a64:	eef4 9ae7 	vcmpe.f32	s19, s15
  400a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400a6c:	dd12      	ble.n	400a94 <computeWaveletPitch+0x4dc>
			float similarity = Abs(distAvg*2 - curModeDistance);
  400a6e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
			if (similarity <= 2*delta) 
  400a72:	0064      	lsls	r4, r4, #1
			float similarity = Abs(distAvg*2 - curModeDistance);
  400a74:	eef0 6a69 	vmov.f32	s13, s19
			if (similarity <= 2*delta) 
  400a78:	ee07 4a90 	vmov	s15, r4
			float similarity = Abs(distAvg*2 - curModeDistance);
  400a7c:	eed6 6a07 	vfnms.f32	s13, s12, s14
			if (similarity <= 2*delta) 
  400a80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			float similarity = Abs(distAvg*2 - curModeDistance);
  400a84:	eeb0 7ae6 	vabs.f32	s14, s13
			if (similarity <= 2*delta) 
  400a88:	eeb4 7ae7 	vcmpe.f32	s14, s15
  400a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400a90:	f240 8087 	bls.w	400ba2 <computeWaveletPitch+0x5ea>
		curLevel = curLevel + 1;
  400a94:	3301      	adds	r3, #1
		if (curLevel >= maxFLWTlevels) 
  400a96:	2b06      	cmp	r3, #6
		curLevel = curLevel + 1;
  400a98:	9300      	str	r3, [sp, #0]
		if (curLevel >= maxFLWTlevels) 
  400a9a:	d04d      	beq.n	400b38 <computeWaveletPitch+0x580>
  400a9c:	9b01      	ldr	r3, [sp, #4]
		for (i = 0; i < curSamNb/2; i++)
  400a9e:	ea4f 0a6a 	mov.w	sl, sl, asr #1
  400aa2:	4a69      	ldr	r2, [pc, #420]	; (400c48 <computeWaveletPitch+0x690>)
			sam[i] = (sam[2*i] + sam[2*i + 1]) * 0.5f;
  400aa4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
  400aa8:	eb03 01ca 	add.w	r1, r3, sl, lsl #3
		for (i = 0; i < curSamNb/2; i++)
  400aac:	4613      	mov	r3, r2
			sam[i] = (sam[2*i] + sam[2*i + 1]) * 0.5f;
  400aae:	ed93 7a00 	vldr	s14, [r3]
  400ab2:	3308      	adds	r3, #8
  400ab4:	ed53 7a01 	vldr	s15, [r3, #-4]
		for (i = 0; i < curSamNb/2; i++)
  400ab8:	428b      	cmp	r3, r1
			sam[i] = (sam[2*i] + sam[2*i + 1]) * 0.5f;
  400aba:	ee77 7a27 	vadd.f32	s15, s14, s15
  400abe:	ee67 7aa6 	vmul.f32	s15, s15, s13
  400ac2:	ece2 7a01 	vstmia	r2!, {s15}
		for (i = 0; i < curSamNb/2; i++)
  400ac6:	d1f2      	bne.n	400aae <computeWaveletPitch+0x4f6>
	for (j = 0; j < i; j++) res <<= 1;
  400ac8:	9b00      	ldr	r3, [sp, #0]
  400aca:	2b01      	cmp	r3, #1
  400acc:	d057      	beq.n	400b7e <computeWaveletPitch+0x5c6>
  400ace:	2b02      	cmp	r3, #2
  400ad0:	d030      	beq.n	400b34 <computeWaveletPitch+0x57c>
  400ad2:	2b03      	cmp	r3, #3
  400ad4:	d02c      	beq.n	400b30 <computeWaveletPitch+0x578>
  400ad6:	2b05      	cmp	r3, #5
  400ad8:	bf0c      	ite	eq
  400ada:	2320      	moveq	r3, #32
  400adc:	2310      	movne	r3, #16
		curModeDistance = distAvg;
  400ade:	eef0 9a46 	vmov.f32	s19, s12
  400ae2:	e597      	b.n	400614 <computeWaveletPitch+0x5c>
				if (i == 2*bestDistance)
  400ae4:	ebb5 0f46 	cmp.w	r5, r6, lsl #1
  400ae8:	bf08      	it	eq
  400aea:	462e      	moveq	r6, r5
  400aec:	e790      	b.n	400a10 <computeWaveletPitch+0x458>
			int32_t summed = 0;
  400aee:	2100      	movs	r1, #0
  400af0:	e789      	b.n	400a06 <computeWaveletPitch+0x44e>
					d = Abs(mins[i] - mins[i+j]);
  400af2:	f85e 3022 	ldr.w	r3, [lr, r2, lsl #2]
  400af6:	ebac 0303 	sub.w	r3, ip, r3
  400afa:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
  400afe:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
					distances[d]++; 
  400b02:	f85b 3020 	ldr.w	r3, [fp, r0, lsl #2]
  400b06:	3301      	adds	r3, #1
  400b08:	f84b 3020 	str.w	r3, [fp, r0, lsl #2]
  400b0c:	e725      	b.n	40095a <computeWaveletPitch+0x3a2>
		if (curSamNb < 2) return pitchF;
  400b0e:	2000      	movs	r0, #0
  400b10:	494d      	ldr	r1, [pc, #308]	; (400c48 <computeWaveletPitch+0x690>)
  400b12:	f8df 814c 	ldr.w	r8, [pc, #332]	; 400c60 <computeWaveletPitch+0x6a8>
  400b16:	eeb0 7a48 	vmov.f32	s14, s16
  400b1a:	2301      	movs	r3, #1
  400b1c:	4602      	mov	r2, r0
  400b1e:	4606      	mov	r6, r0
  400b20:	4605      	mov	r5, r0
  400b22:	46c4      	mov	ip, r8
  400b24:	9101      	str	r1, [sp, #4]
  400b26:	460f      	mov	r7, r1
  400b28:	e66a      	b.n	400800 <computeWaveletPitch+0x248>
		for (j = -delta ; j <= delta ; j++) 
  400b2a:	ed9f 6a48 	vldr	s12, [pc, #288]	; 400c4c <computeWaveletPitch+0x694>
  400b2e:	e796      	b.n	400a5e <computeWaveletPitch+0x4a6>
	for (j = 0; j < i; j++) res <<= 1;
  400b30:	2308      	movs	r3, #8
  400b32:	e7d4      	b.n	400ade <computeWaveletPitch+0x526>
  400b34:	2304      	movs	r3, #4
  400b36:	e7d2      	b.n	400ade <computeWaveletPitch+0x526>
		if (pitchtracker._prevPitch > -1.0f) 
  400b38:	4a45      	ldr	r2, [pc, #276]	; (400c50 <computeWaveletPitch+0x698>)
  400b3a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  400b3e:	edd2 7a00 	vldr	s15, [r2]
  400b42:	eef4 7ac7 	vcmpe.f32	s15, s14
  400b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400b4a:	dd1a      	ble.n	400b82 <computeWaveletPitch+0x5ca>
			if (pitchtracker._pitchConfidence >= 1) 
  400b4c:	6853      	ldr	r3, [r2, #4]
  400b4e:	2b00      	cmp	r3, #0
  400b50:	dd20      	ble.n	400b94 <computeWaveletPitch+0x5dc>
				pitchtracker._pitchConfidence = Max(0, pitchtracker._pitchConfidence - 1);
  400b52:	3b01      	subs	r3, #1
  400b54:	6053      	str	r3, [r2, #4]
	if (pitchtracker._pitchConfidence >= 1) 
  400b56:	2b00      	cmp	r3, #0
  400b58:	dd13      	ble.n	400b82 <computeWaveletPitch+0x5ca>
	if (pitch < -1.0f) pitch = 0.0f;
  400b5a:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
  400b5e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 400c44 <computeWaveletPitch+0x68c>
  400b62:	eef4 7a66 	vcmp.f32	s15, s13
  400b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400b6a:	bf48      	it	mi
  400b6c:	eef0 7a47 	vmovmi.f32	s15, s14
	return _dywapitch_dynamicprocess(get_raw_pitch(samples)); 
  400b70:	ee17 0a90 	vmov	r0, s15
  400b74:	b007      	add	sp, #28
  400b76:	ecbd 8b04 	vpop	{d8-d9}
  400b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (j = 0; j < i; j++) res <<= 1;
  400b7e:	2302      	movs	r3, #2
  400b80:	e7ad      	b.n	400ade <computeWaveletPitch+0x526>
	float estimatedPitch = -1.0f;
  400b82:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  400b86:	ee17 0a90 	vmov	r0, s15
  400b8a:	b007      	add	sp, #28
  400b8c:	ecbd 8b04 	vpop	{d8-d9}
  400b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				pitchtracker._pitchConfidence = 0;
  400b94:	2300      	movs	r3, #0
				pitchtracker._prevPitch = -1.0f;
  400b96:	ed82 7a00 	vstr	s14, [r2]
		pitch = -1.0f;
  400b9a:	eef0 7a47 	vmov.f32	s15, s14
				pitchtracker._pitchConfidence = 0;
  400b9e:	6053      	str	r3, [r2, #4]
  400ba0:	e7f1      	b.n	400b86 <computeWaveletPitch+0x5ce>
				pitchF = DYW_SAMPLING_RATE/(_2power(curLevel-1)*curModeDistance);
  400ba2:	3b01      	subs	r3, #1
	for (j = 0; j < i; j++) res <<= 1;
  400ba4:	2b00      	cmp	r3, #0
  400ba6:	f340 808e 	ble.w	400cc6 <computeWaveletPitch+0x70e>
  400baa:	2b01      	cmp	r3, #1
  400bac:	f000 809e 	beq.w	400cec <computeWaveletPitch+0x734>
  400bb0:	2b02      	cmp	r3, #2
  400bb2:	f000 8099 	beq.w	400ce8 <computeWaveletPitch+0x730>
  400bb6:	2b04      	cmp	r3, #4
  400bb8:	bf0c      	ite	eq
  400bba:	2310      	moveq	r3, #16
  400bbc:	2308      	movne	r3, #8
  400bbe:	ee07 3a90 	vmov	s15, r3
  400bc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				pitchF = DYW_SAMPLING_RATE/(_2power(curLevel-1)*curModeDistance);
  400bc6:	ee69 9aa7 	vmul.f32	s19, s19, s15
  400bca:	eddf 6a22 	vldr	s13, [pc, #136]	; 400c54 <computeWaveletPitch+0x69c>
	if (pitch < 1.0f) pitch = -1.0f;
  400bce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
				pitchF = DYW_SAMPLING_RATE/(_2power(curLevel-1)*curModeDistance);
  400bd2:	eec6 7aa9 	vdiv.f32	s15, s13, s19
	if (pitch < 1.0f) pitch = -1.0f;
  400bd6:	eef4 7ac7 	vcmpe.f32	s15, s14
  400bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400bde:	d4ab      	bmi.n	400b38 <computeWaveletPitch+0x580>
	if (pitch > -1.0) {
  400be0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  400be4:	eef4 7ac7 	vcmpe.f32	s15, s14
  400be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400bec:	dda4      	ble.n	400b38 <computeWaveletPitch+0x580>
		if (pitchtracker._prevPitch < 0.0f) 
  400bee:	4a18      	ldr	r2, [pc, #96]	; (400c50 <computeWaveletPitch+0x698>)
  400bf0:	edd2 6a00 	vldr	s13, [r2]
  400bf4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400bfc:	d43a      	bmi.n	400c74 <computeWaveletPitch+0x6bc>
		else if (abs(pitchtracker._prevPitch - pitch)/pitch < acceptedError) 
  400bfe:	ee36 7ae7 	vsub.f32	s14, s13, s15
  400c02:	ed9f 6a15 	vldr	s12, [pc, #84]	; 400c58 <computeWaveletPitch+0x6a0>
  400c06:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  400c0a:	ee17 3a10 	vmov	r3, s14
  400c0e:	2b00      	cmp	r3, #0
  400c10:	bfb8      	it	lt
  400c12:	425b      	neglt	r3, r3
  400c14:	ee07 3a10 	vmov	s14, r3
			pitchtracker._pitchConfidence = Min(maxConfidence, pitchtracker._pitchConfidence + 1); // maximum 3
  400c18:	6853      	ldr	r3, [r2, #4]
		else if (abs(pitchtracker._prevPitch - pitch)/pitch < acceptedError) 
  400c1a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  400c1e:	eec7 5a27 	vdiv.f32	s11, s14, s15
  400c22:	eef4 5ac6 	vcmpe.f32	s11, s12
  400c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400c2a:	d51b      	bpl.n	400c64 <computeWaveletPitch+0x6ac>
			pitchtracker._pitchConfidence = Min(maxConfidence, pitchtracker._pitchConfidence + 1); // maximum 3
  400c2c:	2b04      	cmp	r3, #4
			pitchtracker._prevPitch = pitch;
  400c2e:	edc2 7a00 	vstr	s15, [r2]
			pitchtracker._pitchConfidence = Min(maxConfidence, pitchtracker._pitchConfidence + 1); // maximum 3
  400c32:	bfd4      	ite	le
  400c34:	3301      	addle	r3, #1
  400c36:	2305      	movgt	r3, #5
				pitchtracker._pitchConfidence = max(0, pitchtracker._pitchConfidence - 1);
  400c38:	6053      	str	r3, [r2, #4]
  400c3a:	e78c      	b.n	400b56 <computeWaveletPitch+0x59e>
  400c3c:	20405400 	.word	0x20405400
  400c40:	00405949 	.word	0x00405949
  400c44:	00000000 	.word	0x00000000
  400c48:	20407400 	.word	0x20407400
  400c4c:	7fc00000 	.word	0x7fc00000
  400c50:	2040001c 	.word	0x2040001c
  400c54:	4735a700 	.word	0x4735a700
  400c58:	3e4ccccd 	.word	0x3e4ccccd
  400c5c:	20406400 	.word	0x20406400
  400c60:	fff0bdc0 	.word	0xfff0bdc0
		else if ((pitchtracker._pitchConfidence >= maxConfidence-2) && Abs(pitchtracker._prevPitch - 2.0f*pitch)/(2.0f*pitch) < acceptedError) 
  400c64:	2b02      	cmp	r3, #2
  400c66:	dc0a      	bgt.n	400c7e <computeWaveletPitch+0x6c6>
			if (pitchtracker._pitchConfidence >= 1) 
  400c68:	2b00      	cmp	r3, #0
  400c6a:	dd03      	ble.n	400c74 <computeWaveletPitch+0x6bc>
				pitchtracker._pitchConfidence = max(0, pitchtracker._pitchConfidence - 1);
  400c6c:	3b01      	subs	r3, #1
				estimatedPitch = pitchtracker._prevPitch;
  400c6e:	eef0 7a66 	vmov.f32	s15, s13
  400c72:	e7e1      	b.n	400c38 <computeWaveletPitch+0x680>
				pitchtracker._pitchConfidence = 1;
  400c74:	2301      	movs	r3, #1
				pitchtracker._prevPitch = pitch;
  400c76:	edc2 7a00 	vstr	s15, [r2]
				pitchtracker._pitchConfidence = 1;
  400c7a:	6053      	str	r3, [r2, #4]
  400c7c:	e76d      	b.n	400b5a <computeWaveletPitch+0x5a2>
		else if ((pitchtracker._pitchConfidence >= maxConfidence-2) && Abs(pitchtracker._prevPitch - 2.0f*pitch)/(2.0f*pitch) < acceptedError) 
  400c7e:	ee37 7aa7 	vadd.f32	s14, s15, s15
  400c82:	ee76 5ac7 	vsub.f32	s11, s13, s14
  400c86:	eef0 5ae5 	vabs.f32	s11, s11
  400c8a:	ee85 5a87 	vdiv.f32	s10, s11, s14
  400c8e:	eeb4 5ac6 	vcmpe.f32	s10, s12
  400c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400c96:	d504      	bpl.n	400ca2 <computeWaveletPitch+0x6ea>
			pitchtracker._prevPitch = estimatedPitch;
  400c98:	ed82 7a00 	vstr	s14, [r2]
			estimatedPitch = 2.0f*pitch;
  400c9c:	eef0 7a47 	vmov.f32	s15, s14
  400ca0:	e75b      	b.n	400b5a <computeWaveletPitch+0x5a2>
		else if ((pitchtracker._pitchConfidence >= maxConfidence-2) && Abs(pitchtracker._prevPitch - 0.5f*pitch)/(0.5f*pitch) < acceptedError) 
  400ca2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
  400ca6:	ee67 7a87 	vmul.f32	s15, s15, s14
  400caa:	ee36 7ae7 	vsub.f32	s14, s13, s15
  400cae:	eeb0 7ac7 	vabs.f32	s14, s14
  400cb2:	eec7 5a27 	vdiv.f32	s11, s14, s15
  400cb6:	eef4 5ac6 	vcmpe.f32	s11, s12
  400cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400cbe:	d5d5      	bpl.n	400c6c <computeWaveletPitch+0x6b4>
			pitchtracker._prevPitch = estimatedPitch;
  400cc0:	edc2 7a00 	vstr	s15, [r2]
  400cc4:	e749      	b.n	400b5a <computeWaveletPitch+0x5a2>
	for (j = 0; j < i; j++) res <<= 1;
  400cc6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  400cca:	e77c      	b.n	400bc6 <computeWaveletPitch+0x60e>
					d = Abs(maxs[i] - maxs[i+j]);
  400ccc:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
  400cd0:	ebae 0303 	sub.w	r3, lr, r3
  400cd4:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
  400cd8:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
					distances[d]++; 
  400cdc:	f85b 3020 	ldr.w	r3, [fp, r0, lsl #2]
  400ce0:	3301      	adds	r3, #1
  400ce2:	f84b 3020 	str.w	r3, [fp, r0, lsl #2]
  400ce6:	e662      	b.n	4009ae <computeWaveletPitch+0x3f6>
	for (j = 0; j < i; j++) res <<= 1;
  400ce8:	2304      	movs	r3, #4
  400cea:	e768      	b.n	400bbe <computeWaveletPitch+0x606>
  400cec:	2302      	movs	r3, #2
  400cee:	e766      	b.n	400bbe <computeWaveletPitch+0x606>

00400cf0 <gfx_set_clipping>:
static gfx_ext_draw_handler_t gfx_ext_draw_func;

/* This function is documented in gfx.h */
void gfx_set_clipping(gfx_coord_t min_x, gfx_coord_t min_y,
		gfx_coord_t max_x, gfx_coord_t max_y)
{
  400cf0:	b4f0      	push	{r4, r5, r6, r7}

	if (min_y < 0) {
		min_y = 0;
	}

	if (max_x >= gfx_width) {
  400cf2:	4c0e      	ldr	r4, [pc, #56]	; (400d2c <gfx_set_clipping+0x3c>)
  400cf4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  400cf8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  400cfc:	f9b4 4000 	ldrsh.w	r4, [r4]
  400d00:	4294      	cmp	r4, r2
  400d02:	dc01      	bgt.n	400d08 <gfx_set_clipping+0x18>
		max_x = gfx_width - 1;
  400d04:	1e62      	subs	r2, r4, #1
  400d06:	b212      	sxth	r2, r2
	}

	if (max_y >= gfx_height) {
  400d08:	4c09      	ldr	r4, [pc, #36]	; (400d30 <gfx_set_clipping+0x40>)
  400d0a:	f9b4 4000 	ldrsh.w	r4, [r4]
  400d0e:	429c      	cmp	r4, r3
  400d10:	dc01      	bgt.n	400d16 <gfx_set_clipping+0x26>
		max_y = gfx_height - 1;
  400d12:	3c01      	subs	r4, #1
  400d14:	b223      	sxth	r3, r4
	}

	gfx_min_x = min_x;
  400d16:	4f07      	ldr	r7, [pc, #28]	; (400d34 <gfx_set_clipping+0x44>)
	gfx_min_y = min_y;
  400d18:	4e07      	ldr	r6, [pc, #28]	; (400d38 <gfx_set_clipping+0x48>)
	gfx_max_x = max_x;
  400d1a:	4d08      	ldr	r5, [pc, #32]	; (400d3c <gfx_set_clipping+0x4c>)
	gfx_max_y = max_y;
  400d1c:	4c08      	ldr	r4, [pc, #32]	; (400d40 <gfx_set_clipping+0x50>)
	gfx_min_x = min_x;
  400d1e:	8038      	strh	r0, [r7, #0]
	gfx_min_y = min_y;
  400d20:	8031      	strh	r1, [r6, #0]
	gfx_max_x = max_x;
  400d22:	802a      	strh	r2, [r5, #0]
	gfx_max_y = max_y;
  400d24:	8023      	strh	r3, [r4, #0]
#endif
}
  400d26:	bcf0      	pop	{r4, r5, r6, r7}
  400d28:	4770      	bx	lr
  400d2a:	bf00      	nop
  400d2c:	2044a800 	.word	0x2044a800
  400d30:	2044a80a 	.word	0x2044a80a
  400d34:	2044a802 	.word	0x2044a802
  400d38:	2044a806 	.word	0x2044a806
  400d3c:	2044a804 	.word	0x2044a804
  400d40:	2044a808 	.word	0x2044a808

00400d44 <gfx_generic_draw_filled_rect>:

/* This function is documented in gfx.h */
void gfx_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		gfx_color_t color)
{
  400d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400d48:	f8bd 7020 	ldrh.w	r7, [sp, #32]
	gfx_coord_t x2;
	gfx_coord_t y2;

	if ((width == 0) || (height == 0)) {
  400d4c:	2a00      	cmp	r2, #0
  400d4e:	d047      	beq.n	400de0 <gfx_generic_draw_filled_rect+0x9c>
  400d50:	461d      	mov	r5, r3
  400d52:	2b00      	cmp	r3, #0
  400d54:	d044      	beq.n	400de0 <gfx_generic_draw_filled_rect+0x9c>
		return;
	}

	/* Invert if width or height is negative. */
	if (width < 0) {
  400d56:	2a00      	cmp	r2, #0
  400d58:	4614      	mov	r4, r2
  400d5a:	db4f      	blt.n	400dfc <gfx_generic_draw_filled_rect+0xb8>
		width = -width;
		x -= width - 1;
	}

	if (height < 0) {
  400d5c:	2d00      	cmp	r5, #0
  400d5e:	db41      	blt.n	400de4 <gfx_generic_draw_filled_rect+0xa0>
		y -= height - 1;
	}

#ifdef CONF_GFX_USE_CLIPPING
	/* Nothing to do if entire rectangle is outside clipping region. */
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
  400d60:	4b32      	ldr	r3, [pc, #200]	; (400e2c <gfx_generic_draw_filled_rect+0xe8>)
  400d62:	f9b3 6000 	ldrsh.w	r6, [r3]
  400d66:	4286      	cmp	r6, r0
  400d68:	db3a      	blt.n	400de0 <gfx_generic_draw_filled_rect+0x9c>
  400d6a:	4b31      	ldr	r3, [pc, #196]	; (400e30 <gfx_generic_draw_filled_rect+0xec>)
  400d6c:	f9b3 e000 	ldrsh.w	lr, [r3]
  400d70:	458e      	cmp	lr, r1
  400d72:	db35      	blt.n	400de0 <gfx_generic_draw_filled_rect+0x9c>
			((x + width) <= gfx_min_x) ||
  400d74:	4b2f      	ldr	r3, [pc, #188]	; (400e34 <gfx_generic_draw_filled_rect+0xf0>)
  400d76:	1902      	adds	r2, r0, r4
  400d78:	f9b3 3000 	ldrsh.w	r3, [r3]
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
  400d7c:	429a      	cmp	r2, r3
  400d7e:	dd2f      	ble.n	400de0 <gfx_generic_draw_filled_rect+0x9c>
			((y + height) <= gfx_min_y)) {
  400d80:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 400e40 <gfx_generic_draw_filled_rect+0xfc>
  400d84:	eb01 0a05 	add.w	sl, r1, r5
  400d88:	f9bc 9000 	ldrsh.w	r9, [ip]
			((x + width) <= gfx_min_x) ||
  400d8c:	45ca      	cmp	sl, r9
  400d8e:	dd27      	ble.n	400de0 <gfx_generic_draw_filled_rect+0x9c>
		return;
	}

	/* Clip if outside left X limit. */
	if (x < gfx_min_x) {
  400d90:	4298      	cmp	r0, r3
  400d92:	db3d      	blt.n	400e10 <gfx_generic_draw_filled_rect+0xcc>
  400d94:	fa1f fc80 	uxth.w	ip, r0
		width -= gfx_min_x - x;
		x = gfx_min_x;
	}

	/* Clip if outside top Y limit. */
	if (y < gfx_min_y) {
  400d98:	4549      	cmp	r1, r9
  400d9a:	db40      	blt.n	400e1e <gfx_generic_draw_filled_rect+0xda>
  400d9c:	fa1f f881 	uxth.w	r8, r1
		y = gfx_min_y;
	}
#endif

	/*  Compute bottom right point. */
	x2 = x + width - 1;
  400da0:	f10c 32ff 	add.w	r2, ip, #4294967295
	y2 = y + height - 1;
  400da4:	f108 33ff 	add.w	r3, r8, #4294967295
	x2 = x + width - 1;
  400da8:	4422      	add	r2, r4
	y2 = y + height - 1;
  400daa:	442b      	add	r3, r5
	x2 = x + width - 1;
  400dac:	b212      	sxth	r2, r2
	y2 = y + height - 1;
  400dae:	b21b      	sxth	r3, r3

#ifdef CONF_GFX_USE_CLIPPING
	/* Clip if outside right X limit. */
	if (x2 > gfx_max_x) {
  400db0:	4296      	cmp	r6, r2
  400db2:	da04      	bge.n	400dbe <gfx_generic_draw_filled_rect+0x7a>
		x2 = gfx_max_x;
		width = x2 - x + 1;
  400db4:	1c74      	adds	r4, r6, #1
  400db6:	4632      	mov	r2, r6
  400db8:	eba4 040c 	sub.w	r4, r4, ip
  400dbc:	b224      	sxth	r4, r4
	}

	/* Clip if outside bottom Y limit. */
	if (y2 > gfx_max_y) {
  400dbe:	459e      	cmp	lr, r3
  400dc0:	da05      	bge.n	400dce <gfx_generic_draw_filled_rect+0x8a>
		y2 = gfx_max_y;
		height = y2 - y + 1;
  400dc2:	f10e 0501 	add.w	r5, lr, #1
  400dc6:	4673      	mov	r3, lr
  400dc8:	eba5 0508 	sub.w	r5, r5, r8
  400dcc:	b22d      	sxth	r5, r5
	}
#endif

	/* Set up draw area and duplicate pixel color until area is full. */
	gfx_set_limits(x, y, x2, y2);
  400dce:	4e1a      	ldr	r6, [pc, #104]	; (400e38 <gfx_generic_draw_filled_rect+0xf4>)
  400dd0:	47b0      	blx	r6
	gfx_duplicate_pixel(color, (uint32_t)width * height);
  400dd2:	fb04 f105 	mul.w	r1, r4, r5
  400dd6:	4638      	mov	r0, r7
  400dd8:	4b18      	ldr	r3, [pc, #96]	; (400e3c <gfx_generic_draw_filled_rect+0xf8>)
}
  400dda:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gfx_duplicate_pixel(color, (uint32_t)width * height);
  400dde:	4718      	bx	r3
  400de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		height = -height;
  400de4:	b2ab      	uxth	r3, r5
		y -= height - 1;
  400de6:	3101      	adds	r1, #1
		height = -height;
  400de8:	425d      	negs	r5, r3
		y -= height - 1;
  400dea:	4419      	add	r1, r3
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
  400dec:	4b0f      	ldr	r3, [pc, #60]	; (400e2c <gfx_generic_draw_filled_rect+0xe8>)
		height = -height;
  400dee:	b22d      	sxth	r5, r5
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
  400df0:	f9b3 6000 	ldrsh.w	r6, [r3]
		y -= height - 1;
  400df4:	b209      	sxth	r1, r1
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
  400df6:	4286      	cmp	r6, r0
  400df8:	dab7      	bge.n	400d6a <gfx_generic_draw_filled_rect+0x26>
  400dfa:	e7f1      	b.n	400de0 <gfx_generic_draw_filled_rect+0x9c>
		width = -width;
  400dfc:	b293      	uxth	r3, r2
		x -= width - 1;
  400dfe:	3001      	adds	r0, #1
	if (height < 0) {
  400e00:	2d00      	cmp	r5, #0
		width = -width;
  400e02:	f1c3 0400 	rsb	r4, r3, #0
		x -= width - 1;
  400e06:	4418      	add	r0, r3
		width = -width;
  400e08:	b224      	sxth	r4, r4
		x -= width - 1;
  400e0a:	b200      	sxth	r0, r0
	if (height < 0) {
  400e0c:	daa8      	bge.n	400d60 <gfx_generic_draw_filled_rect+0x1c>
  400e0e:	e7e9      	b.n	400de4 <gfx_generic_draw_filled_rect+0xa0>
		width -= gfx_min_x - x;
  400e10:	fa1f fc83 	uxth.w	ip, r3
  400e14:	4618      	mov	r0, r3
  400e16:	eba2 040c 	sub.w	r4, r2, ip
  400e1a:	b224      	sxth	r4, r4
  400e1c:	e7bc      	b.n	400d98 <gfx_generic_draw_filled_rect+0x54>
		height -= gfx_min_y - y;
  400e1e:	fa1f f889 	uxth.w	r8, r9
  400e22:	4649      	mov	r1, r9
  400e24:	ebaa 0508 	sub.w	r5, sl, r8
  400e28:	b22d      	sxth	r5, r5
  400e2a:	e7b9      	b.n	400da0 <gfx_generic_draw_filled_rect+0x5c>
  400e2c:	2044a804 	.word	0x2044a804
  400e30:	2044a808 	.word	0x2044a808
  400e34:	2044a802 	.word	0x2044a802
  400e38:	0040207d 	.word	0x0040207d
  400e3c:	004020fd 	.word	0x004020fd
  400e40:	2044a806 	.word	0x2044a806

00400e44 <gfx_ili9488_init>:
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
	LCD_MULTI_WD(us_data, size);
}

void gfx_ili9488_init(void)
{
  400e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400e48:	b086      	sub	sp, #24

	/* Initialize display parameter */
	g_ili9488_display_opt.ul_width= ILI9488_LCD_WIDTH;
	g_ili9488_display_opt.ul_height = ILI9488_LCD_HEIGHT;
	g_ili9488_display_opt.foreground_color= COLOR_WHITE;
	g_ili9488_display_opt.background_color = COLOR_BLACK;
  400e4a:	2400      	movs	r4, #0
	gfx_width = ILI9488_LCD_WIDTH;
  400e4c:	4d28      	ldr	r5, [pc, #160]	; (400ef0 <gfx_ili9488_init+0xac>)
	g_ili9488_display_opt.foreground_color= COLOR_WHITE;
  400e4e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
	gfx_height = ILI9488_LCD_HEIGHT;
  400e52:	4e28      	ldr	r6, [pc, #160]	; (400ef4 <gfx_ili9488_init+0xb0>)
	gfx_width = ILI9488_LCD_WIDTH;
  400e54:	f44f 78a0 	mov.w	r8, #320	; 0x140
	gfx_height = ILI9488_LCD_HEIGHT;
  400e58:	f44f 77f0 	mov.w	r7, #480	; 0x1e0
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  400e5c:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 400f14 <gfx_ili9488_init+0xd0>

	ili9488_init(&g_ili9488_display_opt);
  400e60:	a802      	add	r0, sp, #8
  400e62:	4b25      	ldr	r3, [pc, #148]	; (400ef8 <gfx_ili9488_init+0xb4>)
	g_ili9488_display_opt.foreground_color= COLOR_WHITE;
  400e64:	9204      	str	r2, [sp, #16]

/* Define EBI access for ILI9488 16-bit System Interface.*/
#ifdef ILI9488_EBIMODE
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  400e66:	f04f 49c6 	mov.w	r9, #1660944384	; 0x63000000
	gfx_width = ILI9488_LCD_WIDTH;
  400e6a:	f8a5 8000 	strh.w	r8, [r5]
	g_ili9488_display_opt.background_color = COLOR_BLACK;
  400e6e:	9405      	str	r4, [sp, #20]
	g_ili9488_display_opt.ul_width= ILI9488_LCD_WIDTH;
  400e70:	f8cd 8008 	str.w	r8, [sp, #8]
	gfx_height = ILI9488_LCD_HEIGHT;
  400e74:	8037      	strh	r7, [r6, #0]
	g_ili9488_display_opt.ul_height = ILI9488_LCD_HEIGHT;
  400e76:	9703      	str	r7, [sp, #12]
	ili9488_init(&g_ili9488_display_opt);
  400e78:	4798      	blx	r3
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  400e7a:	4650      	mov	r0, sl
  400e7c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400e80:	4b1e      	ldr	r3, [pc, #120]	; (400efc <gfx_ili9488_init+0xb8>)
  400e82:	4798      	blx	r3
  400e84:	2353      	movs	r3, #83	; 0x53
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  400e86:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400e8a:	4650      	mov	r0, sl
  400e8c:	f8a9 3000 	strh.w	r3, [r9]
  400e90:	4b1b      	ldr	r3, [pc, #108]	; (400f00 <gfx_ili9488_init+0xbc>)
  400e92:	4798      	blx	r3
		*(volatile uint16_t *)(BOARD_ILI9488_ADDR) = lcd_data;
	}
	static inline void LCD_MULTI_WD(const uint16_t *lcd_data, uint32_t size)
	{
		while(size--) {
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  400e94:	2224      	movs	r2, #36	; 0x24
	
	/* Attempt to make display brighter :( */ 
	ili9488_color_t param = 0x24;
	ili9488_write_register(ILI9488_CMD_WRITE_CTRL_DISPLAY, &param, 1); 
	ili9488_write_brightness(0xFFFF);
  400e96:	f64f 70ff 	movw	r0, #65535	; 0xffff
  400e9a:	4b1a      	ldr	r3, [pc, #104]	; (400f04 <gfx_ili9488_init+0xc0>)
  400e9c:	f8a9 2000 	strh.w	r2, [r9]
  400ea0:	4798      	blx	r3

	ili9488_display_on();
  400ea2:	4b19      	ldr	r3, [pc, #100]	; (400f08 <gfx_ili9488_init+0xc4>)
  400ea4:	4798      	blx	r3

	/* Set clipping area to whole screen initially */
	gfx_set_clipping(0, 0, gfx_width, gfx_height);
  400ea6:	f8df 9070 	ldr.w	r9, [pc, #112]	; 400f18 <gfx_ili9488_init+0xd4>
  400eaa:	4621      	mov	r1, r4
  400eac:	f9b5 2000 	ldrsh.w	r2, [r5]
  400eb0:	f9b6 3000 	ldrsh.w	r3, [r6]
  400eb4:	4620      	mov	r0, r4
  400eb6:	47c8      	blx	r9
	ili9488_set_orientation(flags);
  400eb8:	2002      	movs	r0, #2
  400eba:	4b14      	ldr	r3, [pc, #80]	; (400f0c <gfx_ili9488_init+0xc8>)
  400ebc:	4798      	blx	r3
	gfx_set_clipping(0, 0, gfx_width - 1, gfx_height - 1);
  400ebe:	4621      	mov	r1, r4
  400ec0:	4620      	mov	r0, r4
  400ec2:	f240 133f 	movw	r3, #319	; 0x13f
  400ec6:	f240 12df 	movw	r2, #479	; 0x1df
		gfx_width = ILI9488_SWITCH_XY_HEIGHT;
  400eca:	802f      	strh	r7, [r5, #0]
		gfx_height = ILI9488_SWITCH_XY_WIDTH;
  400ecc:	f8a6 8000 	strh.w	r8, [r6]
	gfx_set_clipping(0, 0, gfx_width - 1, gfx_height - 1);
  400ed0:	47c8      	blx	r9

	gfx_set_orientation(GFX_FLIP_Y);
	gfx_draw_filled_rect(0, 0, gfx_width, gfx_height, g_ili9488_display_opt.background_color);			
  400ed2:	f9b5 2000 	ldrsh.w	r2, [r5]
  400ed6:	4621      	mov	r1, r4
  400ed8:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  400edc:	4620      	mov	r0, r4
  400ede:	f9b6 3000 	ldrsh.w	r3, [r6]
  400ee2:	4c0b      	ldr	r4, [pc, #44]	; (400f10 <gfx_ili9488_init+0xcc>)
  400ee4:	9500      	str	r5, [sp, #0]
  400ee6:	47a0      	blx	r4
}
  400ee8:	b006      	add	sp, #24
  400eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400eee:	bf00      	nop
  400ef0:	2044a800 	.word	0x2044a800
  400ef4:	2044a80a 	.word	0x2044a80a
  400ef8:	00401f05 	.word	0x00401f05
  400efc:	0040299d 	.word	0x0040299d
  400f00:	00402999 	.word	0x00402999
  400f04:	00402049 	.word	0x00402049
  400f08:	00401e4d 	.word	0x00401e4d
  400f0c:	004020a5 	.word	0x004020a5
  400f10:	00400d45 	.word	0x00400d45
  400f14:	400e1200 	.word	0x400e1200
  400f18:	00400cf1 	.word	0x00400cf1

00400f1c <lcd_init>:
#include "LCDLib.h"
#include "asf.h"

/*********************************** Public Functions Start ***********************************/
void lcd_init(void)
{
  400f1c:	b510      	push	{r4, lr}
	gfx_init();
  400f1e:	4b03      	ldr	r3, [pc, #12]	; (400f2c <lcd_init+0x10>)
  400f20:	4798      	blx	r3
	mxt_init();
  400f22:	4b03      	ldr	r3, [pc, #12]	; (400f30 <lcd_init+0x14>)
}
  400f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mxt_init();
  400f28:	4718      	bx	r3
  400f2a:	bf00      	nop
  400f2c:	00400e45 	.word	0x00400e45
  400f30:	00400f35 	.word	0x00400f35

00400f34 <mxt_init>:
	else 
		return false; 
}

void mxt_init(void)
{
  400f34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	enum status_code status;

	/* T8 configuration object data */
	uint8_t t8_object[] = {
  400f38:	4c57      	ldr	r4, [pc, #348]	; (401098 <mxt_init+0x164>)
{
  400f3a:	b09f      	sub	sp, #124	; 0x7c
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
			MXT_GEN_COMMANDPROCESSOR_T6, 0)
			+ MXT_GEN_COMMANDPROCESSOR_RESET, 0x01);

	/* Wait for the reset of the device to complete */
	delay_ms(MXT_RESET_TIME);
  400f3c:	f8df 9190 	ldr.w	r9, [pc, #400]	; 4010d0 <mxt_init+0x19c>
	uint8_t t9_object[] = {
  400f40:	f104 050c 	add.w	r5, r4, #12
	uint8_t t8_object[] = {
  400f44:	ab06      	add	r3, sp, #24
	uint8_t t9_object[] = {
  400f46:	af15      	add	r7, sp, #84	; 0x54
	uint8_t t46_object[] = {
  400f48:	f104 0c30 	add.w	ip, r4, #48	; 0x30
  400f4c:	46ee      	mov	lr, sp
	uint8_t t56_object[] = {
  400f4e:	ae0c      	add	r6, sp, #48	; 0x30
			MXT_GEN_POWERCONFIG_T7, 0) + 2, 0x4b);
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
			MXT_GEN_POWERCONFIG_T7, 0) + 3, 0x84);

	// Write predefined configuration data to configuration objects 
	mxt_write_config_object(&device, mxt_get_object_address(&device,
  400f50:	f8df 8180 	ldr.w	r8, [pc, #384]	; 4010d4 <mxt_init+0x1a0>
	uint8_t t8_object[] = {
  400f54:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  400f58:	c303      	stmia	r3!, {r0, r1}
  400f5a:	801a      	strh	r2, [r3, #0]
	uint8_t t56_object[] = {
  400f5c:	343c      	adds	r4, #60	; 0x3c
	uint8_t t9_object[] = {
  400f5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400f60:	c70f      	stmia	r7!, {r0, r1, r2, r3}
  400f62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400f64:	c70f      	stmia	r7!, {r0, r1, r2, r3}
	uint8_t t46_object[] = {
  400f66:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
	uint8_t t9_object[] = {
  400f6a:	682b      	ldr	r3, [r5, #0]
	twihs_master_options_t twi_opt = {
  400f6c:	2500      	movs	r5, #0
	uint8_t t46_object[] = {
  400f6e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
	uint8_t t9_object[] = {
  400f72:	603b      	str	r3, [r7, #0]
	twihs_master_options_t twi_opt = {
  400f74:	274a      	movs	r7, #74	; 0x4a
	uint8_t t46_object[] = {
  400f76:	f88e 2000 	strb.w	r2, [lr]
	twihs_master_options_t twi_opt = {
  400f7a:	f8df e15c 	ldr.w	lr, [pc, #348]	; 4010d8 <mxt_init+0x1a4>
	uint8_t t56_object[] = {
  400f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  400f80:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  400f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  400f84:	f8d4 c000 	ldr.w	ip, [r4]
	pio_configure(PIOD, PIO_INPUT, PIO_PD28, PIO_PULLUP);
  400f88:	4c44      	ldr	r4, [pc, #272]	; (40109c <mxt_init+0x168>)
	twihs_master_options_t twi_opt = {
  400f8a:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
  400f8e:	950b      	str	r5, [sp, #44]	; 0x2c
  400f90:	9509      	str	r5, [sp, #36]	; 0x24
  400f92:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
	uint8_t t56_object[] = {
  400f96:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	pio_configure(PIOD, PIO_INPUT, PIO_PD28, PIO_PULLUP);
  400f98:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400f9c:	2301      	movs	r3, #1
  400f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400fa2:	483f      	ldr	r0, [pc, #252]	; (4010a0 <mxt_init+0x16c>)
	uint8_t t56_object[] = {
  400fa4:	f886 c000 	strb.w	ip, [r6]
	pio_configure(PIOD, PIO_INPUT, PIO_PD28, PIO_PULLUP);
  400fa8:	47a0      	blx	r4
typedef twihs_packet_t twihs_package_t;

static inline uint32_t twihs_master_setup(twihs_master_t p_twihs,
		twihs_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
  400faa:	4a3e      	ldr	r2, [pc, #248]	; (4010a4 <mxt_init+0x170>)
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400fac:	2013      	movs	r0, #19
  400fae:	4b3e      	ldr	r3, [pc, #248]	; (4010a8 <mxt_init+0x174>)

	// Issue recalibration command to maXTouch device by writing a non-zero
	 // value to the calibrate register 
	mxt_write_config_reg(&device, mxt_get_object_address(&device, MXT_GEN_COMMANDPROCESSOR_T6, 0) + MXT_GEN_COMMANDPROCESSOR_CALIBRATE, 0x01); 
	
	delay_ms(100); 
  400fb0:	f44f 74af 	mov.w	r4, #350	; 0x15e
  400fb4:	9209      	str	r2, [sp, #36]	; 0x24
	p_opt->smbus      = 0;
  400fb6:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
  400fba:	4798      	blx	r3
#endif		
	} else {
		// Do Nothing
	}
#endif
	return (twihs_master_init(p_twihs, p_opt));
  400fbc:	a909      	add	r1, sp, #36	; 0x24
  400fbe:	4b3b      	ldr	r3, [pc, #236]	; (4010ac <mxt_init+0x178>)
  400fc0:	483b      	ldr	r0, [pc, #236]	; (4010b0 <mxt_init+0x17c>)
  400fc2:	4798      	blx	r3
	status = mxt_init_device(&device, MAXTOUCH_TWI_INTERFACE,
  400fc4:	4e3b      	ldr	r6, [pc, #236]	; (4010b4 <mxt_init+0x180>)
  400fc6:	237c      	movs	r3, #124	; 0x7c
  400fc8:	463a      	mov	r2, r7
  400fca:	4939      	ldr	r1, [pc, #228]	; (4010b0 <mxt_init+0x17c>)
  400fcc:	483a      	ldr	r0, [pc, #232]	; (4010b8 <mxt_init+0x184>)
  400fce:	47b0      	blx	r6
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  400fd0:	4e3a      	ldr	r6, [pc, #232]	; (4010bc <mxt_init+0x188>)
  400fd2:	462a      	mov	r2, r5
  400fd4:	2106      	movs	r1, #6
  400fd6:	4838      	ldr	r0, [pc, #224]	; (4010b8 <mxt_init+0x184>)
  400fd8:	4f39      	ldr	r7, [pc, #228]	; (4010c0 <mxt_init+0x18c>)
  400fda:	47b0      	blx	r6
  400fdc:	2201      	movs	r2, #1
  400fde:	4601      	mov	r1, r0
  400fe0:	4835      	ldr	r0, [pc, #212]	; (4010b8 <mxt_init+0x184>)
  400fe2:	47b8      	blx	r7
	delay_ms(MXT_RESET_TIME);
  400fe4:	4837      	ldr	r0, [pc, #220]	; (4010c4 <mxt_init+0x190>)
  400fe6:	47c8      	blx	r9
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  400fe8:	462a      	mov	r2, r5
  400fea:	2107      	movs	r1, #7
  400fec:	4832      	ldr	r0, [pc, #200]	; (4010b8 <mxt_init+0x184>)
  400fee:	47b0      	blx	r6
  400ff0:	2220      	movs	r2, #32
  400ff2:	4601      	mov	r1, r0
  400ff4:	4830      	ldr	r0, [pc, #192]	; (4010b8 <mxt_init+0x184>)
  400ff6:	47b8      	blx	r7
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  400ff8:	462a      	mov	r2, r5
  400ffa:	2107      	movs	r1, #7
  400ffc:	482e      	ldr	r0, [pc, #184]	; (4010b8 <mxt_init+0x184>)
  400ffe:	47b0      	blx	r6
  401000:	1c41      	adds	r1, r0, #1
  401002:	2210      	movs	r2, #16
  401004:	482c      	ldr	r0, [pc, #176]	; (4010b8 <mxt_init+0x184>)
  401006:	b289      	uxth	r1, r1
  401008:	47b8      	blx	r7
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  40100a:	462a      	mov	r2, r5
  40100c:	2107      	movs	r1, #7
  40100e:	482a      	ldr	r0, [pc, #168]	; (4010b8 <mxt_init+0x184>)
  401010:	47b0      	blx	r6
  401012:	1c81      	adds	r1, r0, #2
  401014:	224b      	movs	r2, #75	; 0x4b
  401016:	4828      	ldr	r0, [pc, #160]	; (4010b8 <mxt_init+0x184>)
  401018:	b289      	uxth	r1, r1
  40101a:	47b8      	blx	r7
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  40101c:	462a      	mov	r2, r5
  40101e:	2107      	movs	r1, #7
  401020:	4825      	ldr	r0, [pc, #148]	; (4010b8 <mxt_init+0x184>)
  401022:	47b0      	blx	r6
  401024:	1cc1      	adds	r1, r0, #3
  401026:	2284      	movs	r2, #132	; 0x84
  401028:	4823      	ldr	r0, [pc, #140]	; (4010b8 <mxt_init+0x184>)
  40102a:	b289      	uxth	r1, r1
  40102c:	47b8      	blx	r7
	mxt_write_config_object(&device, mxt_get_object_address(&device,
  40102e:	462a      	mov	r2, r5
  401030:	2108      	movs	r1, #8
  401032:	4821      	ldr	r0, [pc, #132]	; (4010b8 <mxt_init+0x184>)
  401034:	47b0      	blx	r6
  401036:	aa06      	add	r2, sp, #24
  401038:	4601      	mov	r1, r0
  40103a:	481f      	ldr	r0, [pc, #124]	; (4010b8 <mxt_init+0x184>)
  40103c:	47c0      	blx	r8
	mxt_write_config_object(&device, mxt_get_object_address(&device,
  40103e:	462a      	mov	r2, r5
  401040:	2109      	movs	r1, #9
  401042:	481d      	ldr	r0, [pc, #116]	; (4010b8 <mxt_init+0x184>)
  401044:	47b0      	blx	r6
  401046:	aa15      	add	r2, sp, #84	; 0x54
  401048:	4601      	mov	r1, r0
  40104a:	481b      	ldr	r0, [pc, #108]	; (4010b8 <mxt_init+0x184>)
  40104c:	47c0      	blx	r8
	mxt_write_config_object(&device, mxt_get_object_address(&device,
  40104e:	462a      	mov	r2, r5
  401050:	212e      	movs	r1, #46	; 0x2e
  401052:	4819      	ldr	r0, [pc, #100]	; (4010b8 <mxt_init+0x184>)
  401054:	47b0      	blx	r6
  401056:	466a      	mov	r2, sp
  401058:	4601      	mov	r1, r0
  40105a:	4817      	ldr	r0, [pc, #92]	; (4010b8 <mxt_init+0x184>)
  40105c:	47c0      	blx	r8
	mxt_write_config_object(&device, mxt_get_object_address(&device,
  40105e:	462a      	mov	r2, r5
  401060:	2138      	movs	r1, #56	; 0x38
  401062:	4815      	ldr	r0, [pc, #84]	; (4010b8 <mxt_init+0x184>)
  401064:	47b0      	blx	r6
  401066:	aa0c      	add	r2, sp, #48	; 0x30
  401068:	4601      	mov	r1, r0
  40106a:	4813      	ldr	r0, [pc, #76]	; (4010b8 <mxt_init+0x184>)
  40106c:	47c0      	blx	r8
	mxt_write_config_reg(&device, mxt_get_object_address(&device, MXT_GEN_COMMANDPROCESSOR_T6, 0) + MXT_GEN_COMMANDPROCESSOR_CALIBRATE, 0x01); 
  40106e:	462a      	mov	r2, r5
  401070:	2106      	movs	r1, #6
  401072:	4811      	ldr	r0, [pc, #68]	; (4010b8 <mxt_init+0x184>)
  401074:	47b0      	blx	r6
  401076:	1c81      	adds	r1, r0, #2
  401078:	2201      	movs	r2, #1
  40107a:	480f      	ldr	r0, [pc, #60]	; (4010b8 <mxt_init+0x184>)
  40107c:	b289      	uxth	r1, r1
  40107e:	4e12      	ldr	r6, [pc, #72]	; (4010c8 <mxt_init+0x194>)
  401080:	47b8      	blx	r7
	delay_ms(100); 
  401082:	4812      	ldr	r0, [pc, #72]	; (4010cc <mxt_init+0x198>)
		mxt_read_message(data, &message);
  401084:	4d0c      	ldr	r5, [pc, #48]	; (4010b8 <mxt_init+0x184>)
	delay_ms(100); 
  401086:	47c8      	blx	r9
		mxt_read_message(data, &message);
  401088:	a903      	add	r1, sp, #12
  40108a:	4628      	mov	r0, r5
  40108c:	47b0      	blx	r6
	} while (--count);
  40108e:	3c01      	subs	r4, #1
  401090:	d1fa      	bne.n	401088 <mxt_init+0x154>
	
	// Make chg pin high 
	mxt_make_highchg(&device);
}
  401092:	b01f      	add	sp, #124	; 0x7c
  401094:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401098:	0040802c 	.word	0x0040802c
  40109c:	004029a1 	.word	0x004029a1
  4010a0:	400e1400 	.word	0x400e1400
  4010a4:	08f0d180 	.word	0x08f0d180
  4010a8:	00403125 	.word	0x00403125
  4010ac:	004022b5 	.word	0x004022b5
  4010b0:	40018000 	.word	0x40018000
  4010b4:	00401685 	.word	0x00401685
  4010b8:	20408400 	.word	0x20408400
  4010bc:	00401a89 	.word	0x00401a89
  4010c0:	00401b4d 	.word	0x00401b4d
  4010c4:	003228d8 	.word	0x003228d8
  4010c8:	00401b95 	.word	0x00401b95
  4010cc:	004d2b25 	.word	0x004d2b25
  4010d0:	20400001 	.word	0x20400001
  4010d4:	00401ad1 	.word	0x00401ad1
  4010d8:	00061a80 	.word	0x00061a80

004010dc <PSOLA_init>:
static float prev_pitch_shifts[MAX_NUM_SHIFTS]; 
static float window[10*WIN_SIZE]; // sufficiently large window array  
/************************ Static variables *********************/

void PSOLA_init(void)
{
  4010dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	arm_fill_f32(0.0f, input_ring_buffer, RING_BUFFER_SIZE); 
  4010de:	2600      	movs	r6, #0
  4010e0:	4c19      	ldr	r4, [pc, #100]	; (401148 <PSOLA_init+0x6c>)
  4010e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4010e6:	4919      	ldr	r1, [pc, #100]	; (40114c <PSOLA_init+0x70>)
  4010e8:	4630      	mov	r0, r6
	arm_fill_f32(0.0f, output_ring_buffer, RING_BUFFER_SIZE);
	arm_fill_f32(0.0f, window, 10*WIN_SIZE); 
	arm_fill_f32(1.0f, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  4010ea:	4d19      	ldr	r5, [pc, #100]	; (401150 <PSOLA_init+0x74>)
	arm_fill_f32(0.0f, input_ring_buffer, RING_BUFFER_SIZE); 
  4010ec:	47a0      	blx	r4
	arm_fill_f32(0.0f, output_ring_buffer, RING_BUFFER_SIZE);
  4010ee:	4630      	mov	r0, r6
  4010f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4010f4:	4917      	ldr	r1, [pc, #92]	; (401154 <PSOLA_init+0x78>)
  4010f6:	47a0      	blx	r4
	arm_fill_f32(0.0f, window, 10*WIN_SIZE); 
  4010f8:	4630      	mov	r0, r6
  4010fa:	f44f 5220 	mov.w	r2, #10240	; 0x2800
  4010fe:	4916      	ldr	r1, [pc, #88]	; (401158 <PSOLA_init+0x7c>)
  401100:	47a0      	blx	r4
  401102:	272c      	movs	r7, #44	; 0x2c
	arm_fill_f32(1.0f, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  401104:	4629      	mov	r1, r5
  401106:	220b      	movs	r2, #11
  401108:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
	prev_pitch_shifts[0] = 1.0f; 
  40110c:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
	arm_fill_f32(1.0f, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  401110:	47a0      	blx	r4
	prev_pitch_shifts[1] = -1.0f; 
  401112:	4b12      	ldr	r3, [pc, #72]	; (40115c <PSOLA_init+0x80>)
  401114:	463a      	mov	r2, r7
  401116:	4c12      	ldr	r4, [pc, #72]	; (401160 <PSOLA_init+0x84>)
  401118:	2100      	movs	r1, #0
  40111a:	4812      	ldr	r0, [pc, #72]	; (401164 <PSOLA_init+0x88>)
  40111c:	606b      	str	r3, [r5, #4]
	prev_pitch_shifts[0] = 1.0f; 
  40111e:	602e      	str	r6, [r5, #0]
  401120:	47a0      	blx	r4
  401122:	463a      	mov	r2, r7
  401124:	2100      	movs	r1, #0
  401126:	4810      	ldr	r0, [pc, #64]	; (401168 <PSOLA_init+0x8c>)
	{
		outPtrList[i] = 0; 
		saved_samplesLeftInPeriod[i] = 0; 
	}
		
	current_num_shifts = 1; // always doing root 
  401128:	2701      	movs	r7, #1
  40112a:	47a0      	blx	r4
  40112c:	4e0f      	ldr	r6, [pc, #60]	; (40116c <PSOLA_init+0x90>)
	
	readPos = RING_BUFFER_SIZE - WIN_SIZE; // + WEIRD_OFFSET; 
  40112e:	4c10      	ldr	r4, [pc, #64]	; (401170 <PSOLA_init+0x94>)
  401130:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	inPtr = 0; 
  401134:	490f      	ldr	r1, [pc, #60]	; (401174 <PSOLA_init+0x98>)
  401136:	2000      	movs	r0, #0
	inputPeriodLength = PSOLA_SAMPLE_RATE / MINIMUM_PITCH; 
  401138:	4b0f      	ldr	r3, [pc, #60]	; (401178 <PSOLA_init+0x9c>)
  40113a:	f240 12d1 	movw	r2, #465	; 0x1d1
	current_num_shifts = 1; // always doing root 
  40113e:	6037      	str	r7, [r6, #0]
	readPos = RING_BUFFER_SIZE - WIN_SIZE; // + WEIRD_OFFSET; 
  401140:	6025      	str	r5, [r4, #0]
	inPtr = 0; 
  401142:	6008      	str	r0, [r1, #0]
	inputPeriodLength = PSOLA_SAMPLE_RATE / MINIMUM_PITCH; 
  401144:	601a      	str	r2, [r3, #0]
  401146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401148:	00404019 	.word	0x00404019
  40114c:	20409000 	.word	0x20409000
  401150:	20412000 	.word	0x20412000
  401154:	2040e000 	.word	0x2040e000
  401158:	2041205c 	.word	0x2041205c
  40115c:	bf800000 	.word	0xbf800000
  401160:	00405949 	.word	0x00405949
  401164:	2040d000 	.word	0x2040d000
  401168:	20412030 	.word	0x20412030
  40116c:	20408420 	.word	0x20408420
  401170:	2041202c 	.word	0x2041202c
  401174:	20408424 	.word	0x20408424
  401178:	20408428 	.word	0x20408428

0040117c <create_harmonies>:
	currentPitch = MINIMUM_PITCH; 
}

// assumes valid pitch shifts 
void create_harmonies(float* input, float *output, float inputPitch, float *pitch_shifts_in, float harm_volume, float dry_volume)
{
  40117c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401180:	ed2d 8b08 	vpush	{d8-d11}
  401184:	b08d      	sub	sp, #52	; 0x34
  401186:	ee09 2a10 	vmov	s18, r2
  40118a:	4cb2      	ldr	r4, [pc, #712]	; (401454 <create_harmonies+0x2d8>)
  40118c:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t i, w; 
	int32_t olaIdx; 
	
	uint32_t saved_inPtr = inPtr; 
  40118e:	4bb2      	ldr	r3, [pc, #712]	; (401458 <create_harmonies+0x2dc>)
{
  401190:	910b      	str	r1, [sp, #44]	; 0x2c
	uint32_t saved_inPtr = inPtr; 
  401192:	681b      	ldr	r3, [r3, #0]
{
  401194:	ed9d 8a1e 	vldr	s16, [sp, #120]	; 0x78
	uint32_t outPtr; 
	uint32_t pitch_idx = 0; 
	
	uint32_t starting_input_ptr = inPtr + WIN_SIZE; 
  401198:	461a      	mov	r2, r3
	uint32_t saved_inPtr = inPtr; 
  40119a:	9307      	str	r3, [sp, #28]
{
  40119c:	eddd 8a1f 	vldr	s17, [sp, #124]	; 0x7c
	uint32_t starting_input_ptr = inPtr + WIN_SIZE; 
  4011a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  4011a4:	f502 6100 	add.w	r1, r2, #2048	; 0x800
	for (i = 0; i < WIN_SIZE; i++)
	{
		input_ring_buffer[(starting_input_ptr++) & RING_BUFFER_MASK] = input[i]; 
  4011a8:	f3c3 020b 	ubfx	r2, r3, #0, #12
  4011ac:	3301      	adds	r3, #1
  4011ae:	f850 5b04 	ldr.w	r5, [r0], #4
  4011b2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	for (i = 0; i < WIN_SIZE; i++)
  4011b6:	428b      	cmp	r3, r1
		input_ring_buffer[(starting_input_ptr++) & RING_BUFFER_MASK] = input[i]; 
  4011b8:	6015      	str	r5, [r2, #0]
	for (i = 0; i < WIN_SIZE; i++)
  4011ba:	d1f5      	bne.n	4011a8 <create_harmonies+0x2c>
	}
			
	uint32_t outLag;
	uint32_t inHalfAway;
	float periodRatio;
	float inputPeriodLengthRecip = 1.0f / inputPeriodLength;
  4011bc:	4ba7      	ldr	r3, [pc, #668]	; (40145c <create_harmonies+0x2e0>)
  4011be:	f8d3 8000 	ldr.w	r8, [r3]
	uint32_t samplesLeftInPeriod = 0; 
	
	float scale = 1.0f;  
	if (current_num_shifts > 1) 
  4011c2:	4ba7      	ldr	r3, [pc, #668]	; (401460 <create_harmonies+0x2e4>)
	float inputPeriodLengthRecip = 1.0f / inputPeriodLength;
  4011c4:	ee07 8a90 	vmov	s15, r8
	if (current_num_shifts > 1) 
  4011c8:	6818      	ldr	r0, [r3, #0]
	float inputPeriodLengthRecip = 1.0f / inputPeriodLength;
  4011ca:	eef8 aae7 	vcvt.f32.s32	s21, s15
	if (current_num_shifts > 1) 
  4011ce:	2801      	cmp	r0, #1
  4011d0:	f240 813c 	bls.w	40144c <create_harmonies+0x2d0>
		scale = 1.0f / log((float)(current_num_shifts+1)); 
  4011d4:	3001      	adds	r0, #1
  4011d6:	4ba3      	ldr	r3, [pc, #652]	; (401464 <create_harmonies+0x2e8>)
  4011d8:	4da3      	ldr	r5, [pc, #652]	; (401468 <create_harmonies+0x2ec>)
  4011da:	ee07 0a90 	vmov	s15, r0
  4011de:	eef8 7a67 	vcvt.f32.u32	s15, s15
  4011e2:	ee17 0a90 	vmov	r0, s15
  4011e6:	4798      	blx	r3
  4011e8:	4ba0      	ldr	r3, [pc, #640]	; (40146c <create_harmonies+0x2f0>)
  4011ea:	4798      	blx	r3
  4011ec:	4602      	mov	r2, r0
  4011ee:	460b      	mov	r3, r1
  4011f0:	2000      	movs	r0, #0
  4011f2:	499f      	ldr	r1, [pc, #636]	; (401470 <create_harmonies+0x2f4>)
  4011f4:	47a8      	blx	r5
  4011f6:	4b9f      	ldr	r3, [pc, #636]	; (401474 <create_harmonies+0x2f8>)
  4011f8:	4798      	blx	r3
  4011fa:	ee07 0a90 	vmov	s15, r0
	
	// pre-compute window function	
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  4011fe:	f1b8 0f00 	cmp.w	r8, #0
  401202:	dd24      	ble.n	40124e <create_harmonies+0xd2>
  401204:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 401478 <create_harmonies+0x2fc>
  401208:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
	{
		window[w] = scale * (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  40120c:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
  401210:	4e9a      	ldr	r6, [pc, #616]	; (40147c <create_harmonies+0x300>)
  401212:	ee87 aa2a 	vdiv.f32	s20, s14, s21
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  401216:	2500      	movs	r5, #0
  401218:	4f99      	ldr	r7, [pc, #612]	; (401480 <create_harmonies+0x304>)
  40121a:	ee67 9aa9 	vmul.f32	s19, s15, s19
		window[w] = scale * (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  40121e:	ee07 5a90 	vmov	s15, r5
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  401222:	3501      	adds	r5, #1
		window[w] = scale * (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  401224:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  401228:	ee67 7a8a 	vmul.f32	s15, s15, s20
  40122c:	ee17 0a90 	vmov	r0, s15
  401230:	47b8      	blx	r7
  401232:	ee07 0a90 	vmov	s15, r0
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  401236:	4b89      	ldr	r3, [pc, #548]	; (40145c <create_harmonies+0x2e0>)
		window[w] = scale * (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  401238:	ee7b 7a67 	vsub.f32	s15, s22, s15
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  40123c:	681b      	ldr	r3, [r3, #0]
		window[w] = scale * (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  40123e:	ee67 7aa9 	vmul.f32	s15, s15, s19
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  401242:	ebb5 0f43 	cmp.w	r5, r3, lsl #1
		window[w] = scale * (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  401246:	ece6 7a01 	vstmia	r6!, {s15}
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  40124a:	dbe8      	blt.n	40121e <create_harmonies+0xa2>
  40124c:	4698      	mov	r8, r3
	}
		
	// for each pitch shift 
	while(pitch_shifts_in[pitch_idx] > 0.0f && pitch_idx < MAX_NUM_SHIFTS)
  40124e:	9909      	ldr	r1, [sp, #36]	; 0x24
  401250:	ed91 7a00 	vldr	s14, [r1]
  401254:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  401258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40125c:	f340 81d2 	ble.w	401604 <create_harmonies+0x488>
  401260:	4b7f      	ldr	r3, [pc, #508]	; (401460 <create_harmonies+0x2e4>)
  401262:	ee07 8a90 	vmov	s15, r8
		
		if (pitch_idx > current_num_shifts - 1)
		{
			// find closest harmony for the onset of a new harmony 
			float tmp; 
			float min = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[0]); 
  401266:	4a87      	ldr	r2, [pc, #540]	; (401484 <create_harmonies+0x308>)
		periodRatio = 1.0f / pitch_shifts_in[pitch_idx]; 
  401268:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
  40126c:	681b      	ldr	r3, [r3, #0]
  40126e:	eef8 0ae7 	vcvt.f32.s32	s1, s15
  401272:	3104      	adds	r1, #4
			float min = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[0]); 
  401274:	ed92 1a00 	vldr	s2, [r2]
  401278:	4618      	mov	r0, r3
  40127a:	9304      	str	r3, [sp, #16]
			outPtr = outPtrList[0]; 
			for (i = 1; i < current_num_shifts; i++)
			{
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  40127c:	2300      	movs	r3, #0
  40127e:	edd2 1a01 	vldr	s3, [r2, #4]
  401282:	3801      	subs	r0, #1
  401284:	ed92 2a02 	vldr	s4, [r2, #8]
  401288:	469b      	mov	fp, r3
  40128a:	edd2 2a03 	vldr	s5, [r2, #12]
  40128e:	900a      	str	r0, [sp, #40]	; 0x28
  401290:	f1c8 0900 	rsb	r9, r8, #0
  401294:	487c      	ldr	r0, [pc, #496]	; (401488 <create_harmonies+0x30c>)
  401296:	ed92 3a04 	vldr	s6, [r2, #16]
  40129a:	edd2 3a05 	vldr	s7, [r2, #20]
  40129e:	ed92 4a06 	vldr	s8, [r2, #24]
  4012a2:	edd2 4a07 	vldr	s9, [r2, #28]
  4012a6:	ed92 5a08 	vldr	s10, [r2, #32]
  4012aa:	edd2 5a09 	vldr	s11, [r2, #36]	; 0x24
  4012ae:	ed92 6a0a 	vldr	s12, [r2, #40]	; 0x28
  4012b2:	4d76      	ldr	r5, [pc, #472]	; (40148c <create_harmonies+0x310>)
  4012b4:	9006      	str	r0, [sp, #24]
  4012b6:	9108      	str	r1, [sp, #32]
		if (pitch_idx > current_num_shifts - 1)
  4012b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
		periodRatio = 1.0f / pitch_shifts_in[pitch_idx]; 
  4012ba:	eec0 9a07 	vdiv.f32	s19, s0, s14
		if (pitch_idx > current_num_shifts - 1)
  4012be:	4593      	cmp	fp, r2
  4012c0:	f240 8197 	bls.w	4015f2 <create_harmonies+0x476>
			outPtr = outPtrList[0]; 
  4012c4:	4a72      	ldr	r2, [pc, #456]	; (401490 <create_harmonies+0x314>)
			float min = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[0]); 
  4012c6:	ee77 7a41 	vsub.f32	s15, s14, s2
			outPtr = outPtrList[0]; 
  4012ca:	f8d2 e000 	ldr.w	lr, [r2]
			for (i = 1; i < current_num_shifts; i++)
  4012ce:	9a04      	ldr	r2, [sp, #16]
			float min = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[0]); 
  4012d0:	eef0 7ae7 	vabs.f32	s15, s15
			for (i = 1; i < current_num_shifts; i++)
  4012d4:	2a01      	cmp	r2, #1
  4012d6:	f240 80dd 	bls.w	401494 <create_harmonies+0x318>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  4012da:	ee77 6a61 	vsub.f32	s13, s14, s3
  4012de:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  4012e2:	eef4 7ae6 	vcmpe.f32	s15, s13
  4012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4012ea:	dd06      	ble.n	4012fa <create_harmonies+0x17e>
				{
					outPtr = outPtrList[i]; 
  4012ec:	4b68      	ldr	r3, [pc, #416]	; (401490 <create_harmonies+0x314>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  4012ee:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  4012f2:	f8d3 e004 	ldr.w	lr, [r3, #4]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  4012f6:	4b64      	ldr	r3, [pc, #400]	; (401488 <create_harmonies+0x30c>)
  4012f8:	685b      	ldr	r3, [r3, #4]
			for (i = 1; i < current_num_shifts; i++)
  4012fa:	2a02      	cmp	r2, #2
  4012fc:	f000 80ca 	beq.w	401494 <create_harmonies+0x318>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  401300:	ee77 6a42 	vsub.f32	s13, s14, s4
  401304:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  401308:	eef4 7ae6 	vcmpe.f32	s15, s13
  40130c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  401310:	dd06      	ble.n	401320 <create_harmonies+0x1a4>
					outPtr = outPtrList[i]; 
  401312:	4b5f      	ldr	r3, [pc, #380]	; (401490 <create_harmonies+0x314>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  401314:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  401318:	f8d3 e008 	ldr.w	lr, [r3, #8]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  40131c:	4b5a      	ldr	r3, [pc, #360]	; (401488 <create_harmonies+0x30c>)
  40131e:	689b      	ldr	r3, [r3, #8]
			for (i = 1; i < current_num_shifts; i++)
  401320:	2a03      	cmp	r2, #3
  401322:	f000 80b7 	beq.w	401494 <create_harmonies+0x318>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  401326:	ee77 6a62 	vsub.f32	s13, s14, s5
  40132a:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  40132e:	eef4 7ae6 	vcmpe.f32	s15, s13
  401332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  401336:	dd06      	ble.n	401346 <create_harmonies+0x1ca>
					outPtr = outPtrList[i]; 
  401338:	4b55      	ldr	r3, [pc, #340]	; (401490 <create_harmonies+0x314>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  40133a:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  40133e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  401342:	4b51      	ldr	r3, [pc, #324]	; (401488 <create_harmonies+0x30c>)
  401344:	68db      	ldr	r3, [r3, #12]
			for (i = 1; i < current_num_shifts; i++)
  401346:	2a04      	cmp	r2, #4
  401348:	f000 80a4 	beq.w	401494 <create_harmonies+0x318>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  40134c:	ee77 6a43 	vsub.f32	s13, s14, s6
  401350:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  401354:	eef4 7ae6 	vcmpe.f32	s15, s13
  401358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40135c:	dd06      	ble.n	40136c <create_harmonies+0x1f0>
					outPtr = outPtrList[i]; 
  40135e:	4b4c      	ldr	r3, [pc, #304]	; (401490 <create_harmonies+0x314>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  401360:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  401364:	f8d3 e010 	ldr.w	lr, [r3, #16]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  401368:	4b47      	ldr	r3, [pc, #284]	; (401488 <create_harmonies+0x30c>)
  40136a:	691b      	ldr	r3, [r3, #16]
			for (i = 1; i < current_num_shifts; i++)
  40136c:	2a05      	cmp	r2, #5
  40136e:	f000 8091 	beq.w	401494 <create_harmonies+0x318>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  401372:	ee77 6a63 	vsub.f32	s13, s14, s7
  401376:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  40137a:	eef4 7ae6 	vcmpe.f32	s15, s13
  40137e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  401382:	dd06      	ble.n	401392 <create_harmonies+0x216>
					outPtr = outPtrList[i]; 
  401384:	4b42      	ldr	r3, [pc, #264]	; (401490 <create_harmonies+0x314>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  401386:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  40138a:	f8d3 e014 	ldr.w	lr, [r3, #20]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  40138e:	4b3e      	ldr	r3, [pc, #248]	; (401488 <create_harmonies+0x30c>)
  401390:	695b      	ldr	r3, [r3, #20]
			for (i = 1; i < current_num_shifts; i++)
  401392:	2a06      	cmp	r2, #6
  401394:	d07e      	beq.n	401494 <create_harmonies+0x318>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  401396:	ee77 6a44 	vsub.f32	s13, s14, s8
  40139a:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  40139e:	eef4 7ae6 	vcmpe.f32	s15, s13
  4013a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4013a6:	dd06      	ble.n	4013b6 <create_harmonies+0x23a>
					outPtr = outPtrList[i]; 
  4013a8:	4b39      	ldr	r3, [pc, #228]	; (401490 <create_harmonies+0x314>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  4013aa:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  4013ae:	f8d3 e018 	ldr.w	lr, [r3, #24]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  4013b2:	4b35      	ldr	r3, [pc, #212]	; (401488 <create_harmonies+0x30c>)
  4013b4:	699b      	ldr	r3, [r3, #24]
			for (i = 1; i < current_num_shifts; i++)
  4013b6:	2a07      	cmp	r2, #7
  4013b8:	d06c      	beq.n	401494 <create_harmonies+0x318>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  4013ba:	ee77 6a64 	vsub.f32	s13, s14, s9
  4013be:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  4013c2:	eef4 7ae6 	vcmpe.f32	s15, s13
  4013c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4013ca:	dd06      	ble.n	4013da <create_harmonies+0x25e>
					outPtr = outPtrList[i]; 
  4013cc:	4b30      	ldr	r3, [pc, #192]	; (401490 <create_harmonies+0x314>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  4013ce:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  4013d2:	f8d3 e01c 	ldr.w	lr, [r3, #28]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  4013d6:	4b2c      	ldr	r3, [pc, #176]	; (401488 <create_harmonies+0x30c>)
  4013d8:	69db      	ldr	r3, [r3, #28]
			for (i = 1; i < current_num_shifts; i++)
  4013da:	2a08      	cmp	r2, #8
  4013dc:	d05a      	beq.n	401494 <create_harmonies+0x318>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  4013de:	ee77 6a45 	vsub.f32	s13, s14, s10
  4013e2:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  4013e6:	eef4 7ae6 	vcmpe.f32	s15, s13
  4013ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4013ee:	dd06      	ble.n	4013fe <create_harmonies+0x282>
					outPtr = outPtrList[i]; 
  4013f0:	4b27      	ldr	r3, [pc, #156]	; (401490 <create_harmonies+0x314>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  4013f2:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  4013f6:	f8d3 e020 	ldr.w	lr, [r3, #32]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  4013fa:	4b23      	ldr	r3, [pc, #140]	; (401488 <create_harmonies+0x30c>)
  4013fc:	6a1b      	ldr	r3, [r3, #32]
			for (i = 1; i < current_num_shifts; i++)
  4013fe:	2a09      	cmp	r2, #9
  401400:	d048      	beq.n	401494 <create_harmonies+0x318>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  401402:	ee77 6a65 	vsub.f32	s13, s14, s11
  401406:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  40140a:	eef4 7ae6 	vcmpe.f32	s15, s13
  40140e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  401412:	dd06      	ble.n	401422 <create_harmonies+0x2a6>
					outPtr = outPtrList[i]; 
  401414:	4b1e      	ldr	r3, [pc, #120]	; (401490 <create_harmonies+0x314>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  401416:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  40141a:	f8d3 e024 	ldr.w	lr, [r3, #36]	; 0x24
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  40141e:	4b1a      	ldr	r3, [pc, #104]	; (401488 <create_harmonies+0x30c>)
  401420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			for (i = 1; i < current_num_shifts; i++)
  401422:	2a0a      	cmp	r2, #10
  401424:	d036      	beq.n	401494 <create_harmonies+0x318>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  401426:	ee37 7a46 	vsub.f32	s14, s14, s12
  40142a:	eeb0 7ac7 	vabs.f32	s14, s14
				if (tmp < min)
  40142e:	eef4 7ac7 	vcmpe.f32	s15, s14
  401432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  401436:	dd04      	ble.n	401442 <create_harmonies+0x2c6>
					outPtr = outPtrList[i]; 
  401438:	4b15      	ldr	r3, [pc, #84]	; (401490 <create_harmonies+0x314>)
  40143a:	f8d3 e028 	ldr.w	lr, [r3, #40]	; 0x28
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  40143e:	4b12      	ldr	r3, [pc, #72]	; (401488 <create_harmonies+0x30c>)
  401440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			for (i = 1; i < current_num_shifts; i++)
  401442:	2a0b      	cmp	r2, #11
  401444:	d026      	beq.n	401494 <create_harmonies+0x318>
  401446:	4b04      	ldr	r3, [pc, #16]	; (401458 <create_harmonies+0x2dc>)
  401448:	9a07      	ldr	r2, [sp, #28]
  40144a:	601a      	str	r2, [r3, #0]
	float scale = 1.0f;  
  40144c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  401450:	e6d5      	b.n	4011fe <create_harmonies+0x82>
  401452:	bf00      	nop
  401454:	20409000 	.word	0x20409000
  401458:	20408424 	.word	0x20408424
  40145c:	20408428 	.word	0x20408428
  401460:	20408420 	.word	0x20408420
  401464:	00404b79 	.word	0x00404b79
  401468:	00404e75 	.word	0x00404e75
  40146c:	004043b5 	.word	0x004043b5
  401470:	3ff00000 	.word	0x3ff00000
  401474:	00405181 	.word	0x00405181
  401478:	40490fdb 	.word	0x40490fdb
  40147c:	2041205c 	.word	0x2041205c
  401480:	004042c1 	.word	0x004042c1
  401484:	20412000 	.word	0x20412000
  401488:	20412030 	.word	0x20412030
  40148c:	2040e000 	.word	0x2040e000
  401490:	2040d000 	.word	0x2040d000
  401494:	ea4f 028b 	mov.w	r2, fp, lsl #2
  401498:	9203      	str	r2, [sp, #12]
  40149a:	ee60 9aa9 	vmul.f32	s19, s1, s19
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  40149e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4014a2:	f8dd a01c 	ldr.w	sl, [sp, #28]
  4014a6:	9205      	str	r2, [sp, #20]
  4014a8:	eefc 7ae9 	vcvt.u32.f32	s15, s19
  4014ac:	f8cd b004 	str.w	fp, [sp, #4]
  4014b0:	edcd 7a02 	vstr	s15, [sp, #8]
			samplesLeftInPeriod = saved_samplesLeftInPeriod[pitch_idx]; 
		}
		
		for (i = 0; i < WIN_SIZE; i++)
		{		
			if (samplesLeftInPeriod == 0)
  4014b4:	2b00      	cmp	r3, #0
  4014b6:	d13b      	bne.n	401530 <create_harmonies+0x3b4>
			{
				outLag = 1; 
			
				inHalfAway = (inPtr + RING_BUFFER_SIZE_D2) & RING_BUFFER_MASK;
  4014b8:	f50a 6c00 	add.w	ip, sl, #2048	; 0x800
  4014bc:	f3cc 0c0b 	ubfx	ip, ip, #0, #12
                
				if (inHalfAway < RING_BUFFER_SIZE_D2) 
  4014c0:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
  4014c4:	f080 808f 	bcs.w	4015e6 <create_harmonies+0x46a>
				{
					/* The zero element of the input buffer lies
						in (inptr, inHalfAway] */
					if (outPtr < inHalfAway || outPtr > inPtr) {
  4014c8:	45f4      	cmp	ip, lr
  4014ca:	d830      	bhi.n	40152e <create_harmonies+0x3b2>
  4014cc:	45f2      	cmp	sl, lr
  4014ce:	d32e      	bcc.n	40152e <create_harmonies+0x3b2>
  4014d0:	f50a 7b16 	add.w	fp, sl, #600	; 0x258
				}

				while(outLag == 1)
				{
					// set outPtr about the sample at which we OLA 
					outPtr = (outPtr + (uint32_t)((float)inputPeriodLength * periodRatio)) & RING_BUFFER_MASK; 
  4014d4:	9b02      	ldr	r3, [sp, #8]
  4014d6:	449e      	add	lr, r3
				
					// OLA 
					if (pitch_idx == 0)
  4014d8:	9b01      	ldr	r3, [sp, #4]
					outPtr = (outPtr + (uint32_t)((float)inputPeriodLength * periodRatio)) & RING_BUFFER_MASK; 
  4014da:	f3ce 0e0b 	ubfx	lr, lr, #0, #12
					if (pitch_idx == 0)
  4014de:	2b00      	cmp	r3, #0
  4014e0:	d157      	bne.n	401592 <create_harmonies+0x416>
					{
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  4014e2:	45c8      	cmp	r8, r9
  4014e4:	dd1e      	ble.n	401524 <create_harmonies+0x3a8>
  4014e6:	ebae 0208 	sub.w	r2, lr, r8
  4014ea:	485c      	ldr	r0, [pc, #368]	; (40165c <create_harmonies+0x4e0>)
  4014ec:	eb0e 0708 	add.w	r7, lr, r8
  4014f0:	ebab 060e 	sub.w	r6, fp, lr
						{
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
							dry_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4014f4:	18b3      	adds	r3, r6, r2
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  4014f6:	f3c2 010b 	ubfx	r1, r2, #0, #12
							dry_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4014fa:	ecb0 7a01 	vldmia	r0!, {s14}
  4014fe:	3201      	adds	r2, #1
  401500:	f3c3 030b 	ubfx	r3, r3, #0, #12
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  401504:	eb05 0181 	add.w	r1, r5, r1, lsl #2
							dry_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  401508:	ee27 7a28 	vmul.f32	s14, s14, s17
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  40150c:	4297      	cmp	r7, r2
							dry_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  40150e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  401512:	edd1 7a00 	vldr	s15, [r1]
  401516:	edd3 6a00 	vldr	s13, [r3]
  40151a:	eee7 7a26 	vfma.f32	s15, s14, s13
  40151e:	edc1 7a00 	vstr	s15, [r1]
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  401522:	d1e7      	bne.n	4014f4 <create_harmonies+0x378>
								harm_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
						}
					}
	
					
					if (inHalfAway < RING_BUFFER_SIZE_D2) 
  401524:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
  401528:	d257      	bcs.n	4015da <create_harmonies+0x45e>
					{
						/* The zero element of the input buffer lies
							in (inptr, inHalfAway] */
						if (outPtr < inHalfAway || outPtr > inPtr) {
  40152a:	45f4      	cmp	ip, lr
  40152c:	d928      	bls.n	401580 <create_harmonies+0x404>
						}
					}		
				}
			
				// assume uniform frequency within window 
				samplesLeftInPeriod = inputPeriodLength;
  40152e:	4643      	mov	r3, r8
		for (i = 0; i < WIN_SIZE; i++)
  401530:	9a05      	ldr	r2, [sp, #20]
			}
		
			--samplesLeftInPeriod; 
		
			// inc/wrap input ring buffer index 
			inPtr = (inPtr+1) & RING_BUFFER_MASK; 		
  401532:	f10a 0a01 	add.w	sl, sl, #1
			--samplesLeftInPeriod; 
  401536:	3b01      	subs	r3, #1
		for (i = 0; i < WIN_SIZE; i++)
  401538:	3a01      	subs	r2, #1
			inPtr = (inPtr+1) & RING_BUFFER_MASK; 		
  40153a:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
		for (i = 0; i < WIN_SIZE; i++)
  40153e:	9205      	str	r2, [sp, #20]
  401540:	d1b8      	bne.n	4014b4 <create_harmonies+0x338>
		}

		saved_samplesLeftInPeriod[pitch_idx] = samplesLeftInPeriod; 
  401542:	9a06      	ldr	r2, [sp, #24]
		outPtrList[pitch_idx] = outPtr; 
  401544:	9903      	ldr	r1, [sp, #12]
		saved_samplesLeftInPeriod[pitch_idx] = samplesLeftInPeriod; 
  401546:	6013      	str	r3, [r2, #0]
		outPtrList[pitch_idx] = outPtr; 
  401548:	4a45      	ldr	r2, [pc, #276]	; (401660 <create_harmonies+0x4e4>)
  40154a:	f8dd b004 	ldr.w	fp, [sp, #4]
  40154e:	f842 e001 	str.w	lr, [r2, r1]
	while(pitch_shifts_in[pitch_idx] > 0.0f && pitch_idx < MAX_NUM_SHIFTS)
  401552:	9a08      	ldr	r2, [sp, #32]
		pitch_idx++;  
  401554:	f10b 0b01 	add.w	fp, fp, #1
	while(pitch_shifts_in[pitch_idx] > 0.0f && pitch_idx < MAX_NUM_SHIFTS)
  401558:	ecb2 7a01 	vldmia	r2!, {s14}
  40155c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  401560:	9208      	str	r2, [sp, #32]
  401562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  401566:	dd07      	ble.n	401578 <create_harmonies+0x3fc>
  401568:	9a06      	ldr	r2, [sp, #24]
  40156a:	f1bb 0f0b 	cmp.w	fp, #11
  40156e:	f102 0204 	add.w	r2, r2, #4
  401572:	9206      	str	r2, [sp, #24]
  401574:	f47f aea0 	bne.w	4012b8 <create_harmonies+0x13c>
  401578:	4b3a      	ldr	r3, [pc, #232]	; (401664 <create_harmonies+0x4e8>)
  40157a:	f8c3 a000 	str.w	sl, [r3]
  40157e:	e043      	b.n	401608 <create_harmonies+0x48c>
						if (outPtr < inHalfAway || outPtr > inPtr) {
  401580:	45d6      	cmp	lr, sl
  401582:	d8d4      	bhi.n	40152e <create_harmonies+0x3b2>
					outPtr = (outPtr + (uint32_t)((float)inputPeriodLength * periodRatio)) & RING_BUFFER_MASK; 
  401584:	9b02      	ldr	r3, [sp, #8]
  401586:	449e      	add	lr, r3
					if (pitch_idx == 0)
  401588:	9b01      	ldr	r3, [sp, #4]
					outPtr = (outPtr + (uint32_t)((float)inputPeriodLength * periodRatio)) & RING_BUFFER_MASK; 
  40158a:	f3ce 0e0b 	ubfx	lr, lr, #0, #12
					if (pitch_idx == 0)
  40158e:	2b00      	cmp	r3, #0
  401590:	d0a7      	beq.n	4014e2 <create_harmonies+0x366>
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  401592:	45c8      	cmp	r8, r9
  401594:	ddc6      	ble.n	401524 <create_harmonies+0x3a8>
  401596:	ebae 0208 	sub.w	r2, lr, r8
  40159a:	4830      	ldr	r0, [pc, #192]	; (40165c <create_harmonies+0x4e0>)
  40159c:	eb0e 0708 	add.w	r7, lr, r8
  4015a0:	ebab 060e 	sub.w	r6, fp, lr
								harm_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4015a4:	18b3      	adds	r3, r6, r2
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  4015a6:	f3c2 010b 	ubfx	r1, r2, #0, #12
								harm_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4015aa:	ecb0 7a01 	vldmia	r0!, {s14}
  4015ae:	3201      	adds	r2, #1
  4015b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  4015b4:	eb05 0181 	add.w	r1, r5, r1, lsl #2
								harm_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4015b8:	ee27 7a08 	vmul.f32	s14, s14, s16
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  4015bc:	4297      	cmp	r7, r2
								harm_volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4015be:	eb04 0383 	add.w	r3, r4, r3, lsl #2
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  4015c2:	edd1 7a00 	vldr	s15, [r1]
  4015c6:	edd3 6a00 	vldr	s13, [r3]
  4015ca:	eee7 7a26 	vfma.f32	s15, s14, s13
  4015ce:	edc1 7a00 	vstr	s15, [r1]
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  4015d2:	d1e7      	bne.n	4015a4 <create_harmonies+0x428>
					if (inHalfAway < RING_BUFFER_SIZE_D2) 
  4015d4:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
  4015d8:	d3a7      	bcc.n	40152a <create_harmonies+0x3ae>
						if (outPtr > inPtr && outPtr < inHalfAway) {
  4015da:	45d6      	cmp	lr, sl
  4015dc:	f67f af7a 	bls.w	4014d4 <create_harmonies+0x358>
  4015e0:	45f4      	cmp	ip, lr
  4015e2:	d8a4      	bhi.n	40152e <create_harmonies+0x3b2>
  4015e4:	e776      	b.n	4014d4 <create_harmonies+0x358>
					if (outPtr > inPtr && outPtr < inHalfAway) {
  4015e6:	45f2      	cmp	sl, lr
  4015e8:	f4bf af72 	bcs.w	4014d0 <create_harmonies+0x354>
  4015ec:	45f4      	cmp	ip, lr
  4015ee:	d89e      	bhi.n	40152e <create_harmonies+0x3b2>
  4015f0:	e76e      	b.n	4014d0 <create_harmonies+0x354>
			outPtr = outPtrList[pitch_idx]; 
  4015f2:	ea4f 038b 	mov.w	r3, fp, lsl #2
  4015f6:	9303      	str	r3, [sp, #12]
  4015f8:	4b19      	ldr	r3, [pc, #100]	; (401660 <create_harmonies+0x4e4>)
  4015fa:	f853 e02b 	ldr.w	lr, [r3, fp, lsl #2]
			samplesLeftInPeriod = saved_samplesLeftInPeriod[pitch_idx]; 
  4015fe:	9b06      	ldr	r3, [sp, #24]
  401600:	681b      	ldr	r3, [r3, #0]
  401602:	e74a      	b.n	40149a <create_harmonies+0x31e>
	while(pitch_shifts_in[pitch_idx] > 0.0f && pitch_idx < MAX_NUM_SHIFTS)
  401604:	f04f 0b00 	mov.w	fp, #0
  401608:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	}
	
	for(i = 0; i < WIN_SIZE; i++)
	{
		output[i] = output_ring_buffer[readPos]; 	
		output_ring_buffer[readPos] = 0.0f;
  40160a:	2400      	movs	r4, #0
  40160c:	4916      	ldr	r1, [pc, #88]	; (401668 <create_harmonies+0x4ec>)
  40160e:	4e17      	ldr	r6, [pc, #92]	; (40166c <create_harmonies+0x4f0>)
  401610:	f502 5580 	add.w	r5, r2, #4096	; 0x1000
  401614:	680b      	ldr	r3, [r1, #0]
		output[i] = output_ring_buffer[readPos]; 	
  401616:	eb06 0083 	add.w	r0, r6, r3, lsl #2
		readPos = (readPos+1) & RING_BUFFER_MASK;
  40161a:	3301      	adds	r3, #1
		output[i] = output_ring_buffer[readPos]; 	
  40161c:	6807      	ldr	r7, [r0, #0]
		readPos = (readPos+1) & RING_BUFFER_MASK;
  40161e:	f3c3 030b 	ubfx	r3, r3, #0, #12
		output[i] = output_ring_buffer[readPos]; 	
  401622:	f842 7b04 	str.w	r7, [r2], #4
	for(i = 0; i < WIN_SIZE; i++)
  401626:	42aa      	cmp	r2, r5
		output_ring_buffer[readPos] = 0.0f;
  401628:	6004      	str	r4, [r0, #0]
	for(i = 0; i < WIN_SIZE; i++)
  40162a:	d1f4      	bne.n	401616 <create_harmonies+0x49a>
	// averaging -- not used currently 
	//if (pitch_idx > 1) //  scale = 2.0f / (float)current_num_shifts ; // just in case 
	//arm_scale_f32(output, 2.0f, output, WIN_SIZE); 
	
	currentPitch = inputPitch; 
	inputPeriodLength = (uint32_t)(PSOLA_SAMPLE_RATE / currentPitch);
  40162c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 401670 <create_harmonies+0x4f4>
	current_num_shifts = pitch_idx; 
	arm_copy_f32(pitch_shifts_in, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  401630:	220b      	movs	r2, #11
	current_num_shifts = pitch_idx; 
  401632:	4c10      	ldr	r4, [pc, #64]	; (401674 <create_harmonies+0x4f8>)
	inputPeriodLength = (uint32_t)(PSOLA_SAMPLE_RATE / currentPitch);
  401634:	eec7 7a09 	vdiv.f32	s15, s14, s18
  401638:	600b      	str	r3, [r1, #0]
	current_num_shifts = pitch_idx; 
  40163a:	f8c4 b000 	str.w	fp, [r4]
	arm_copy_f32(pitch_shifts_in, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  40163e:	9809      	ldr	r0, [sp, #36]	; 0x24
	inputPeriodLength = (uint32_t)(PSOLA_SAMPLE_RATE / currentPitch);
  401640:	4c0d      	ldr	r4, [pc, #52]	; (401678 <create_harmonies+0x4fc>)
	arm_copy_f32(pitch_shifts_in, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  401642:	490e      	ldr	r1, [pc, #56]	; (40167c <create_harmonies+0x500>)
  401644:	4b0e      	ldr	r3, [pc, #56]	; (401680 <create_harmonies+0x504>)
	inputPeriodLength = (uint32_t)(PSOLA_SAMPLE_RATE / currentPitch);
  401646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  40164a:	edc4 7a00 	vstr	s15, [r4]
}
  40164e:	b00d      	add	sp, #52	; 0x34
  401650:	ecbd 8b08 	vpop	{d8-d11}
  401654:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	arm_copy_f32(pitch_shifts_in, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  401658:	4718      	bx	r3
  40165a:	bf00      	nop
  40165c:	2041205c 	.word	0x2041205c
  401660:	2040d000 	.word	0x2040d000
  401664:	20408424 	.word	0x20408424
  401668:	2041202c 	.word	0x2041202c
  40166c:	2040e000 	.word	0x2040e000
  401670:	4735a700 	.word	0x4735a700
  401674:	20408420 	.word	0x20408420
  401678:	20408428 	.word	0x20408428
  40167c:	20412000 	.word	0x20412000
  401680:	00404049 	.word	0x00404049

00401684 <mxt_init_device>:
 * \param chgpin IOPORT pin instance attached to the maXTouch device's /CHG pin
 * \return Operation result status code
 */
status_code_t mxt_init_device(struct mxt_device *device,
		twihs_master_t interface, uint8_t chip_adr, uint32_t chgpin)
{
  401684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401688:	4604      	mov	r4, r0

	/* Set TWI interface, TWI address and CHG-pin of the maXTouch device. */
	device->interface = interface;
	device->mxt_chip_adr = chip_adr;
	device->chgpin = chgpin;
	device->handler = NULL;
  40168a:	2500      	movs	r5, #0
	device->chgpin = chgpin;
  40168c:	6183      	str	r3, [r0, #24]
			malloc(sizeof(struct mxt_info_object));
  40168e:	2007      	movs	r0, #7
{
  401690:	b089      	sub	sp, #36	; 0x24
	device->interface = interface;
  401692:	60a1      	str	r1, [r4, #8]
	device->handler = NULL;
  401694:	6125      	str	r5, [r4, #16]
{
  401696:	468a      	mov	sl, r1
	device->mxt_chip_adr = chip_adr;
  401698:	7322      	strb	r2, [r4, #12]
{
  40169a:	4617      	mov	r7, r2
			malloc(sizeof(struct mxt_info_object));
  40169c:	4e4e      	ldr	r6, [pc, #312]	; (4017d8 <mxt_init_device+0x154>)
	twihs_package_t packet = {
  40169e:	4681      	mov	r9, r0
			malloc(sizeof(struct mxt_info_object));
  4016a0:	47b0      	blx	r6
  4016a2:	4603      	mov	r3, r0
	twihs_package_t packet = {
  4016a4:	f04f 0802 	mov.w	r8, #2
  4016a8:	9507      	str	r5, [sp, #28]
  4016aa:	9503      	str	r5, [sp, #12]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4016ac:	4650      	mov	r0, sl
	device->info_object = (struct mxt_info_object *)
  4016ae:	6023      	str	r3, [r4, #0]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4016b0:	a903      	add	r1, sp, #12
  4016b2:	4d4a      	ldr	r5, [pc, #296]	; (4017dc <mxt_init_device+0x158>)
	twihs_package_t packet = {
  4016b4:	9305      	str	r3, [sp, #20]
  4016b6:	f88d 701c 	strb.w	r7, [sp, #28]
  4016ba:	f8cd 8010 	str.w	r8, [sp, #16]
  4016be:	f8cd 9018 	str.w	r9, [sp, #24]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4016c2:	47a8      	blx	r5
  4016c4:	2800      	cmp	r0, #0
  4016c6:	f040 81d7 	bne.w	401a78 <mxt_init_device+0x3f4>
			malloc(device->info_object->obj_count *
  4016ca:	f8d4 a000 	ldr.w	sl, [r4]
  4016ce:	4607      	mov	r7, r0
  4016d0:	f89a 0006 	ldrb.w	r0, [sl, #6]
  4016d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4016d8:	0040      	lsls	r0, r0, #1
  4016da:	47b0      	blx	r6
	twihs_package_t packet = {
  4016dc:	9703      	str	r7, [sp, #12]
	device->object_list = (struct mxt_object *)
  4016de:	6060      	str	r0, [r4, #4]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4016e0:	a903      	add	r1, sp, #12
	twihs_package_t packet = {
  4016e2:	9005      	str	r0, [sp, #20]
  4016e4:	9706      	str	r7, [sp, #24]
  4016e6:	9707      	str	r7, [sp, #28]
  4016e8:	f88d 900c 	strb.w	r9, [sp, #12]
  4016ec:	f8cd 8010 	str.w	r8, [sp, #16]
		.length       = device->info_object->obj_count *
  4016f0:	f89a 3006 	ldrb.w	r3, [sl, #6]
	twihs_package_t packet = {
  4016f4:	7b22      	ldrb	r2, [r4, #12]
		.length       = device->info_object->obj_count *
  4016f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4016fa:	68a0      	ldr	r0, [r4, #8]
	twihs_package_t packet = {
  4016fc:	f88d 201c 	strb.w	r2, [sp, #28]
		.length       = device->info_object->obj_count *
  401700:	005b      	lsls	r3, r3, #1
	twihs_package_t packet = {
  401702:	9306      	str	r3, [sp, #24]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  401704:	47a8      	blx	r5
  401706:	2800      	cmp	r0, #0
  401708:	f040 81b6 	bne.w	401a78 <mxt_init_device+0x3f4>
  40170c:	e894 0088 	ldmia.w	r4, {r3, r7}
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  401710:	7819      	ldrb	r1, [r3, #0]
  401712:	7858      	ldrb	r0, [r3, #1]
  401714:	78da      	ldrb	r2, [r3, #3]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  401716:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  40171a:	7899      	ldrb	r1, [r3, #2]
  40171c:	f893 e005 	ldrb.w	lr, [r3, #5]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  401720:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  401724:	791a      	ldrb	r2, [r3, #4]
			(device->info_object->obj_count *
  401726:	799b      	ldrb	r3, [r3, #6]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  401728:	ea81 0140 	eor.w	r1, r1, r0, lsl #1
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  40172c:	7838      	ldrb	r0, [r7, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  40172e:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
			(device->info_object->obj_count *
  401732:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
	result = ((crc << 1u) ^ (uint32_t)data_word);
  401736:	ea82 0241 	eor.w	r2, r2, r1, lsl #1
		result ^= crcpoly;
  40173a:	4929      	ldr	r1, [pc, #164]	; (4017e0 <mxt_init_device+0x15c>)
	result = ((crc << 1u) ^ (uint32_t)data_word);
  40173c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
			(device->info_object->obj_count *
  401740:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
	result = ((crc << 1u) ^ (uint32_t)data_word);
  401744:	ea83 0342 	eor.w	r3, r3, r2, lsl #1
	crc_area_size = MXT_ID_BLOCK_SIZE +
  401748:	f10c 0c07 	add.w	ip, ip, #7
	if (result & 0x1000000) {
  40174c:	01da      	lsls	r2, r3, #7
	crc_area_size = MXT_ID_BLOCK_SIZE +
  40174e:	fa1f fc8c 	uxth.w	ip, ip
	if (result & 0x1000000) {
  401752:	d43e      	bmi.n	4017d2 <mxt_init_device+0x14e>
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  401754:	f1ac 0e08 	sub.w	lr, ip, #8
  401758:	f1be 0f01 	cmp.w	lr, #1
  40175c:	dd13      	ble.n	401786 <mxt_init_device+0x102>
  40175e:	2001      	movs	r0, #1
		result ^= crcpoly;
  401760:	f8df 807c 	ldr.w	r8, [pc, #124]	; 4017e0 <mxt_init_device+0x15c>
		crc_tmp = mxt_crc_24(crc_tmp, objects_pointer[i],
  401764:	1839      	adds	r1, r7, r0
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  401766:	5c3a      	ldrb	r2, [r7, r0]
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  401768:	3002      	adds	r0, #2
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  40176a:	7849      	ldrb	r1, [r1, #1]
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  40176c:	b280      	uxth	r0, r0
	result = ((crc << 1u) ^ (uint32_t)data_word);
  40176e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  401772:	ea82 0343 	eor.w	r3, r2, r3, lsl #1
  401776:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
		result ^= crcpoly;
  40177a:	ea83 0208 	eor.w	r2, r3, r8
  40177e:	bf18      	it	ne
  401780:	4613      	movne	r3, r2
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  401782:	4570      	cmp	r0, lr
  401784:	dbee      	blt.n	401764 <mxt_init_device+0xe0>
	crc_tmp = mxt_crc_24(crc_tmp,
  401786:	4467      	add	r7, ip
	result = ((crc << 1u) ^ (uint32_t)data_word);
  401788:	f817 7c08 	ldrb.w	r7, [r7, #-8]
  40178c:	ea87 0743 	eor.w	r7, r7, r3, lsl #1
	if (result & 0x1000000) {
  401790:	01f9      	lsls	r1, r7, #7
  401792:	d503      	bpl.n	40179c <mxt_init_device+0x118>
		result ^= crcpoly;
  401794:	f487 0700 	eor.w	r7, r7, #8388608	; 0x800000
  401798:	f087 071b 	eor.w	r7, r7, #27
	twihs_package_t packet = {
  40179c:	2002      	movs	r0, #2
  40179e:	2300      	movs	r3, #0
  4017a0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
  4017a4:	2203      	movs	r2, #3
  4017a6:	9004      	str	r0, [sp, #16]
  4017a8:	a802      	add	r0, sp, #8
  4017aa:	9303      	str	r3, [sp, #12]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4017ac:	a903      	add	r1, sp, #12
	twihs_package_t packet = {
  4017ae:	9307      	str	r3, [sp, #28]
  4017b0:	7b23      	ldrb	r3, [r4, #12]
  4017b2:	9005      	str	r0, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4017b4:	68a0      	ldr	r0, [r4, #8]
	twihs_package_t packet = {
  4017b6:	f88d c00c 	strb.w	ip, [sp, #12]
  4017ba:	f88d e00d 	strb.w	lr, [sp, #13]
  4017be:	9206      	str	r2, [sp, #24]
  4017c0:	f88d 301c 	strb.w	r3, [sp, #28]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4017c4:	47a8      	blx	r5
  4017c6:	b168      	cbz	r0, 4017e4 <mxt_init_device+0x160>
		return ERR_BAD_DATA;
  4017c8:	f06f 0003 	mvn.w	r0, #3
	}

	device->multitouch_report_offset = status;

	return STATUS_OK;
}
  4017cc:	b009      	add	sp, #36	; 0x24
  4017ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result ^= crcpoly;
  4017d2:	404b      	eors	r3, r1
  4017d4:	e7be      	b.n	401754 <mxt_init_device+0xd0>
  4017d6:	bf00      	nop
  4017d8:	004052a5 	.word	0x004052a5
  4017dc:	00402395 	.word	0x00402395
  4017e0:	0080001b 	.word	0x0080001b
		return ((uint32_t)crc[2] << 16) | ((uint16_t)crc[1] << 8) | crc[0];
  4017e4:	f89d 500a 	ldrb.w	r5, [sp, #10]
	*crc = (crc_tmp & 0x00FFFFFF);
  4017e8:	f027 437f 	bic.w	r3, r7, #4278190080	; 0xff000000
		return ((uint32_t)crc[2] << 16) | ((uint16_t)crc[1] << 8) | crc[0];
  4017ec:	f89d 2008 	ldrb.w	r2, [sp, #8]
  4017f0:	f89d 1009 	ldrb.w	r1, [sp, #9]
  4017f4:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
  4017f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	if (crc_calculated != crc_read) {
  4017fc:	429a      	cmp	r2, r3
  4017fe:	d1e3      	bne.n	4017c8 <mxt_init_device+0x144>
  401800:	6823      	ldr	r3, [r4, #0]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401802:	799f      	ldrb	r7, [r3, #6]
  401804:	9301      	str	r3, [sp, #4]
  401806:	2f00      	cmp	r7, #0
  401808:	f000 8139 	beq.w	401a7e <mxt_init_device+0x3fa>
  40180c:	f1a7 0a08 	sub.w	sl, r7, #8
  401810:	1e7b      	subs	r3, r7, #1
  401812:	f8d4 8004 	ldr.w	r8, [r4, #4]
  401816:	f3ca 0ac4 	ubfx	sl, sl, #3, #5
  40181a:	2b43      	cmp	r3, #67	; 0x43
  40181c:	4603      	mov	r3, r0
  40181e:	f10a 0a01 	add.w	sl, sl, #1
  401822:	ea4f 02ca 	mov.w	r2, sl, lsl #3
  401826:	b2d2      	uxtb	r2, r2
  401828:	f240 8116 	bls.w	401a58 <mxt_init_device+0x3d4>
  40182c:	f108 0935 	add.w	r9, r8, #53	; 0x35
  401830:	4686      	mov	lr, r0
  401832:	4601      	mov	r1, r0
		tot_report_ids += (device->object_list[i].num_report_ids);
  401834:	2000      	movs	r0, #0
  401836:	f819 cc18 	ldrb.w	ip, [r9, #-24]
  40183a:	f819 bc30 	ldrb.w	fp, [r9, #-48]
  40183e:	3301      	adds	r3, #1
  401840:	4605      	mov	r5, r0
  401842:	f109 0930 	add.w	r9, r9, #48	; 0x30
  401846:	f36b 0007 	bfi	r0, fp, #0, #8
  40184a:	f819 bc42 	ldrb.w	fp, [r9, #-66]
  40184e:	f36c 0507 	bfi	r5, ip, #0, #8
  401852:	f819 cc5a 	ldrb.w	ip, [r9, #-90]
  401856:	f36b 250f 	bfi	r5, fp, #8, #8
  40185a:	f819 bc3c 	ldrb.w	fp, [r9, #-60]
  40185e:	f36c 200f 	bfi	r0, ip, #8, #8
  401862:	f819 cc54 	ldrb.w	ip, [r9, #-84]
  401866:	f36b 4517 	bfi	r5, fp, #16, #8
  40186a:	f819 bc36 	ldrb.w	fp, [r9, #-54]
  40186e:	f36c 4017 	bfi	r0, ip, #16, #8
  401872:	f819 cc4e 	ldrb.w	ip, [r9, #-78]
  401876:	f36b 651f 	bfi	r5, fp, #24, #8
  40187a:	f001 3b7f 	and.w	fp, r1, #2139062143	; 0x7f7f7f7f
  40187e:	f36c 601f 	bfi	r0, ip, #24, #8
  401882:	f005 3c7f 	and.w	ip, r5, #2139062143	; 0x7f7f7f7f
  401886:	4069      	eors	r1, r5
  401888:	f000 357f 	and.w	r5, r0, #2139062143	; 0x7f7f7f7f
  40188c:	ea80 000e 	eor.w	r0, r0, lr
  401890:	44dc      	add	ip, fp
  401892:	f00e 3e7f 	and.w	lr, lr, #2139062143	; 0x7f7f7f7f
  401896:	fa5f fb83 	uxtb.w	fp, r3
  40189a:	f001 3180 	and.w	r1, r1, #2155905152	; 0x80808080
  40189e:	f000 3080 	and.w	r0, r0, #2155905152	; 0x80808080
  4018a2:	44ae      	add	lr, r5
  4018a4:	45da      	cmp	sl, fp
  4018a6:	ea8c 0101 	eor.w	r1, ip, r1
  4018aa:	ea8e 0e00 	eor.w	lr, lr, r0
  4018ae:	d8c1      	bhi.n	401834 <mxt_init_device+0x1b0>
  4018b0:	f3ce 2307 	ubfx	r3, lr, #8, #8
  4018b4:	f3ce 4c07 	ubfx	ip, lr, #16, #8
  4018b8:	f3c1 2507 	ubfx	r5, r1, #8, #8
  4018bc:	f3c1 4007 	ubfx	r0, r1, #16, #8
  4018c0:	4473      	add	r3, lr
  4018c2:	4297      	cmp	r7, r2
  4018c4:	4463      	add	r3, ip
  4018c6:	eb03 631e 	add.w	r3, r3, lr, lsr #24
  4018ca:	440b      	add	r3, r1
  4018cc:	442b      	add	r3, r5
  4018ce:	4403      	add	r3, r0
  4018d0:	eb03 6311 	add.w	r3, r3, r1, lsr #24
  4018d4:	b2db      	uxtb	r3, r3
  4018d6:	d00a      	beq.n	4018ee <mxt_init_device+0x26a>
  4018d8:	eb02 0142 	add.w	r1, r2, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4018dc:	3201      	adds	r2, #1
		tot_report_ids += (device->object_list[i].num_report_ids);
  4018de:	eb08 0141 	add.w	r1, r8, r1, lsl #1
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4018e2:	b2d2      	uxtb	r2, r2
		tot_report_ids += (device->object_list[i].num_report_ids);
  4018e4:	7949      	ldrb	r1, [r1, #5]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4018e6:	4297      	cmp	r7, r2
		tot_report_ids += (device->object_list[i].num_report_ids);
  4018e8:	440b      	add	r3, r1
  4018ea:	b2db      	uxtb	r3, r3
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4018ec:	d8f4      	bhi.n	4018d8 <mxt_init_device+0x254>
  4018ee:	0058      	lsls	r0, r3, #1
			malloc(sizeof(struct mxt_report_id_map) *
  4018f0:	47b0      	blx	r6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4018f2:	9b01      	ldr	r3, [sp, #4]
	device->report_id_map = (struct mxt_report_id_map *)
  4018f4:	6160      	str	r0, [r4, #20]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4018f6:	799b      	ldrb	r3, [r3, #6]
  4018f8:	2b00      	cmp	r3, #0
  4018fa:	f43f af65 	beq.w	4017c8 <mxt_init_device+0x144>
  4018fe:	6860      	ldr	r0, [r4, #4]
  401900:	f04f 0c00 	mov.w	ip, #0
  401904:	2701      	movs	r7, #1
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  401906:	eb0c 0e4c 	add.w	lr, ip, ip, lsl #1
  40190a:	2500      	movs	r5, #0
  40190c:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
  401910:	eb00 010e 	add.w	r1, r0, lr
			if (device->object_list[i].num_report_ids != 0) {
  401914:	794b      	ldrb	r3, [r1, #5]
  401916:	b1a3      	cbz	r3, 401942 <mxt_init_device+0x2be>
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  401918:	463b      	mov	r3, r7
					device->report_id_map[id_index].object_type =
  40191a:	b218      	sxth	r0, r3
  40191c:	6962      	ldr	r2, [r4, #20]
							device->object_list[i].type;
  40191e:	7809      	ldrb	r1, [r1, #0]
					id_index++;
  401920:	3301      	adds	r3, #1
					device->report_id_map[id_index].object_type =
  401922:	f802 1010 	strb.w	r1, [r2, r0, lsl #1]
					id_index++;
  401926:	b2db      	uxtb	r3, r3
					device->report_id_map[id_index].instance = j;
  401928:	6961      	ldr	r1, [r4, #20]
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  40192a:	1bda      	subs	r2, r3, r7
					device->report_id_map[id_index].instance = j;
  40192c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  401930:	b2d2      	uxtb	r2, r2
					device->report_id_map[id_index].instance = j;
  401932:	704d      	strb	r5, [r1, #1]
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  401934:	6860      	ldr	r0, [r4, #4]
  401936:	eb00 010e 	add.w	r1, r0, lr
  40193a:	794e      	ldrb	r6, [r1, #5]
  40193c:	4296      	cmp	r6, r2
  40193e:	d8ec      	bhi.n	40191a <mxt_init_device+0x296>
					id_index++;
  401940:	461f      	mov	r7, r3
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  401942:	3501      	adds	r5, #1
  401944:	790b      	ldrb	r3, [r1, #4]
  401946:	b2ed      	uxtb	r5, r5
  401948:	42ab      	cmp	r3, r5
  40194a:	d2e3      	bcs.n	401914 <mxt_init_device+0x290>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40194c:	f10c 0c01 	add.w	ip, ip, #1
  401950:	6823      	ldr	r3, [r4, #0]
  401952:	fa5f fc8c 	uxtb.w	ip, ip
  401956:	7999      	ldrb	r1, [r3, #6]
  401958:	458c      	cmp	ip, r1
  40195a:	d3d4      	bcc.n	401906 <mxt_init_device+0x282>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40195c:	2900      	cmp	r1, #0
  40195e:	f43f af33 	beq.w	4017c8 <mxt_init_device+0x144>
  401962:	f1a1 0c08 	sub.w	ip, r1, #8
  401966:	1e4b      	subs	r3, r1, #1
  401968:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
  40196c:	2b43      	cmp	r3, #67	; 0x43
  40196e:	f10c 0c01 	add.w	ip, ip, #1
  401972:	ea4f 05cc 	mov.w	r5, ip, lsl #3
  401976:	b2ed      	uxtb	r5, r5
  401978:	d970      	bls.n	401a5c <mxt_init_device+0x3d8>
  40197a:	f04f 0800 	mov.w	r8, #0
  40197e:	f100 0735 	add.w	r7, r0, #53	; 0x35
  401982:	4642      	mov	r2, r8
  401984:	4646      	mov	r6, r8
		tot_report_ids += (device->object_list[i].num_report_ids);
  401986:	2300      	movs	r3, #0
  401988:	f817 9c18 	ldrb.w	r9, [r7, #-24]
  40198c:	f817 ac30 	ldrb.w	sl, [r7, #-48]
  401990:	f108 0801 	add.w	r8, r8, #1
  401994:	469e      	mov	lr, r3
  401996:	3730      	adds	r7, #48	; 0x30
  401998:	f36a 0307 	bfi	r3, sl, #0, #8
  40199c:	f817 ac42 	ldrb.w	sl, [r7, #-66]
  4019a0:	f369 0e07 	bfi	lr, r9, #0, #8
  4019a4:	f817 9c5a 	ldrb.w	r9, [r7, #-90]
  4019a8:	f36a 2e0f 	bfi	lr, sl, #8, #8
  4019ac:	f369 230f 	bfi	r3, r9, #8, #8
  4019b0:	f817 ac3c 	ldrb.w	sl, [r7, #-60]
  4019b4:	f817 9c54 	ldrb.w	r9, [r7, #-84]
  4019b8:	f36a 4e17 	bfi	lr, sl, #16, #8
  4019bc:	f817 ac36 	ldrb.w	sl, [r7, #-54]
  4019c0:	f369 4317 	bfi	r3, r9, #16, #8
  4019c4:	f817 9c4e 	ldrb.w	r9, [r7, #-78]
  4019c8:	f36a 6e1f 	bfi	lr, sl, #24, #8
  4019cc:	f006 3a7f 	and.w	sl, r6, #2139062143	; 0x7f7f7f7f
  4019d0:	f369 631f 	bfi	r3, r9, #24, #8
  4019d4:	ea8e 0606 	eor.w	r6, lr, r6
  4019d8:	f00e 397f 	and.w	r9, lr, #2139062143	; 0x7f7f7f7f
  4019dc:	f003 3b7f 	and.w	fp, r3, #2139062143	; 0x7f7f7f7f
  4019e0:	fa5f fe88 	uxtb.w	lr, r8
  4019e4:	4053      	eors	r3, r2
  4019e6:	f002 327f 	and.w	r2, r2, #2139062143	; 0x7f7f7f7f
  4019ea:	f006 3680 	and.w	r6, r6, #2155905152	; 0x80808080
  4019ee:	44d1      	add	r9, sl
  4019f0:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
  4019f4:	445a      	add	r2, fp
  4019f6:	45f4      	cmp	ip, lr
  4019f8:	ea89 0606 	eor.w	r6, r9, r6
  4019fc:	ea82 0203 	eor.w	r2, r2, r3
  401a00:	d8c1      	bhi.n	401986 <mxt_init_device+0x302>
  401a02:	f3c2 2307 	ubfx	r3, r2, #8, #8
  401a06:	f3c2 4c07 	ubfx	ip, r2, #16, #8
  401a0a:	f3c6 2e07 	ubfx	lr, r6, #8, #8
  401a0e:	f3c6 4707 	ubfx	r7, r6, #16, #8
  401a12:	4413      	add	r3, r2
  401a14:	42a9      	cmp	r1, r5
  401a16:	4463      	add	r3, ip
  401a18:	eb03 6312 	add.w	r3, r3, r2, lsr #24
  401a1c:	4433      	add	r3, r6
  401a1e:	4473      	add	r3, lr
  401a20:	443b      	add	r3, r7
  401a22:	eb03 6316 	add.w	r3, r3, r6, lsr #24
  401a26:	b2db      	uxtb	r3, r3
  401a28:	d11a      	bne.n	401a60 <mxt_init_device+0x3dc>
	for (i = 0; i < tot_rpt_id; ++i) {
  401a2a:	2b00      	cmp	r3, #0
  401a2c:	f43f aecc 	beq.w	4017c8 <mxt_init_device+0x144>
		if (device->report_id_map[i].object_type == object_type) {
  401a30:	6961      	ldr	r1, [r4, #20]
  401a32:	780a      	ldrb	r2, [r1, #0]
  401a34:	2a09      	cmp	r2, #9
  401a36:	d024      	beq.n	401a82 <mxt_init_device+0x3fe>
  401a38:	2200      	movs	r2, #0
	for (i = 0; i < tot_rpt_id; ++i) {
  401a3a:	3201      	adds	r2, #1
  401a3c:	b2d2      	uxtb	r2, r2
  401a3e:	429a      	cmp	r2, r3
  401a40:	f43f aec2 	beq.w	4017c8 <mxt_init_device+0x144>
		if (device->report_id_map[i].object_type == object_type) {
  401a44:	f811 0f02 	ldrb.w	r0, [r1, #2]!
  401a48:	2809      	cmp	r0, #9
  401a4a:	d1f6      	bne.n	401a3a <mxt_init_device+0x3b6>
  401a4c:	b252      	sxtb	r2, r2
	return STATUS_OK;
  401a4e:	2000      	movs	r0, #0
	device->multitouch_report_offset = status;
  401a50:	7722      	strb	r2, [r4, #28]
}
  401a52:	b009      	add	sp, #36	; 0x24
  401a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401a58:	4602      	mov	r2, r0
  401a5a:	e73d      	b.n	4018d8 <mxt_init_device+0x254>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401a5c:	2300      	movs	r3, #0
  401a5e:	461d      	mov	r5, r3
		tot_report_ids += (device->object_list[i].num_report_ids);
  401a60:	eb05 0245 	add.w	r2, r5, r5, lsl #1
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401a64:	3501      	adds	r5, #1
		tot_report_ids += (device->object_list[i].num_report_ids);
  401a66:	eb00 0242 	add.w	r2, r0, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401a6a:	b2ed      	uxtb	r5, r5
		tot_report_ids += (device->object_list[i].num_report_ids);
  401a6c:	7952      	ldrb	r2, [r2, #5]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401a6e:	42a9      	cmp	r1, r5
		tot_report_ids += (device->object_list[i].num_report_ids);
  401a70:	4413      	add	r3, r2
  401a72:	b2db      	uxtb	r3, r3
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401a74:	d8f4      	bhi.n	401a60 <mxt_init_device+0x3dc>
  401a76:	e7d8      	b.n	401a2a <mxt_init_device+0x3a6>
  401a78:	f04f 30ff 	mov.w	r0, #4294967295
  401a7c:	e6a6      	b.n	4017cc <mxt_init_device+0x148>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401a7e:	4638      	mov	r0, r7
  401a80:	e736      	b.n	4018f0 <mxt_init_device+0x26c>
		if (device->report_id_map[i].object_type == object_type) {
  401a82:	2200      	movs	r2, #0
  401a84:	e7e3      	b.n	401a4e <mxt_init_device+0x3ca>
  401a86:	bf00      	nop

00401a88 <mxt_get_object_address>:
uint16_t mxt_get_object_address(struct mxt_device *device, uint8_t object_id,
		uint8_t instance)
{
	uint8_t i;

	for (i = 0; i < device->info_object->obj_count; i++) {
  401a88:	6803      	ldr	r3, [r0, #0]
  401a8a:	799b      	ldrb	r3, [r3, #6]
  401a8c:	b1eb      	cbz	r3, 401aca <mxt_get_object_address+0x42>
{
  401a8e:	b410      	push	{r4}
		if (object_id == device->object_list[i].type) {
  401a90:	6844      	ldr	r4, [r0, #4]
  401a92:	7822      	ldrb	r2, [r4, #0]
  401a94:	428a      	cmp	r2, r1
  401a96:	d013      	beq.n	401ac0 <mxt_get_object_address+0x38>
  401a98:	1e5a      	subs	r2, r3, #1
  401a9a:	1da3      	adds	r3, r4, #6
  401a9c:	b2d2      	uxtb	r2, r2
  401a9e:	3201      	adds	r2, #1
  401aa0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  401aa4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
  401aa8:	e003      	b.n	401ab2 <mxt_get_object_address+0x2a>
  401aaa:	f813 0b06 	ldrb.w	r0, [r3], #6
  401aae:	4288      	cmp	r0, r1
  401ab0:	d006      	beq.n	401ac0 <mxt_get_object_address+0x38>
	for (i = 0; i < device->info_object->obj_count; i++) {
  401ab2:	4293      	cmp	r3, r2
		if (object_id == device->object_list[i].type) {
  401ab4:	461c      	mov	r4, r3
	for (i = 0; i < device->info_object->obj_count; i++) {
  401ab6:	d1f8      	bne.n	401aaa <mxt_get_object_address+0x22>
			return device->object_list[i].start_address;
		}
	}

	return 0;
  401ab8:	2000      	movs	r0, #0
}
  401aba:	f85d 4b04 	ldr.w	r4, [sp], #4
  401abe:	4770      	bx	lr
			return device->object_list[i].start_address;
  401ac0:	f8b4 0001 	ldrh.w	r0, [r4, #1]
}
  401ac4:	f85d 4b04 	ldr.w	r4, [sp], #4
  401ac8:	4770      	bx	lr
	return 0;
  401aca:	4618      	mov	r0, r3
  401acc:	4770      	bx	lr
  401ace:	bf00      	nop

00401ad0 <mxt_write_config_object>:
 * \param *obj_data Pointer to memory buffer containing object data
 * \result Operation result status code
 */
status_code_t mxt_write_config_object(struct mxt_device *device,
		mxt_memory_adr memory_adr, void *obj_data)
{
  401ad0:	b530      	push	{r4, r5, lr}
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  401ad2:	2300      	movs	r3, #0
{
  401ad4:	b087      	sub	sp, #28
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401ad6:	6804      	ldr	r4, [r0, #0]
	twihs_package_t packet = {
  401ad8:	2502      	movs	r5, #2
  401ada:	9301      	str	r3, [sp, #4]
  401adc:	9203      	str	r2, [sp, #12]
  401ade:	0a0a      	lsrs	r2, r1, #8
  401ae0:	9304      	str	r3, [sp, #16]
  401ae2:	9305      	str	r3, [sp, #20]
  401ae4:	9502      	str	r5, [sp, #8]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401ae6:	79a3      	ldrb	r3, [r4, #6]
	twihs_package_t packet = {
  401ae8:	f88d 1004 	strb.w	r1, [sp, #4]
  401aec:	f88d 2005 	strb.w	r2, [sp, #5]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401af0:	b1bb      	cbz	r3, 401b22 <mxt_write_config_object+0x52>
		if (device->object_list[i].start_address == mem_adr) {
  401af2:	6844      	ldr	r4, [r0, #4]
  401af4:	f8b4 2001 	ldrh.w	r2, [r4, #1]
  401af8:	428a      	cmp	r2, r1
  401afa:	d020      	beq.n	401b3e <mxt_write_config_object+0x6e>
  401afc:	1e5a      	subs	r2, r3, #1
  401afe:	1da3      	adds	r3, r4, #6
  401b00:	b2d2      	uxtb	r2, r2
  401b02:	3201      	adds	r2, #1
  401b04:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  401b08:	eb04 0242 	add.w	r2, r4, r2, lsl #1
  401b0c:	e003      	b.n	401b16 <mxt_write_config_object+0x46>
  401b0e:	f8b4 5001 	ldrh.w	r5, [r4, #1]
  401b12:	428d      	cmp	r5, r1
  401b14:	d013      	beq.n	401b3e <mxt_write_config_object+0x6e>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401b16:	429a      	cmp	r2, r3
		if (device->object_list[i].start_address == mem_adr) {
  401b18:	461c      	mov	r4, r3
  401b1a:	f103 0306 	add.w	r3, r3, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401b1e:	d1f6      	bne.n	401b0e <mxt_write_config_object+0x3e>
  401b20:	2300      	movs	r3, #0
	twihs_package_t packet = {
  401b22:	7b04      	ldrb	r4, [r0, #12]
		.chip         = device->mxt_chip_adr,
		.buffer       = obj_data,
		.length       = mxt_get_object_size(device, memory_adr)
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  401b24:	a901      	add	r1, sp, #4
  401b26:	4a08      	ldr	r2, [pc, #32]	; (401b48 <mxt_write_config_object+0x78>)
  401b28:	6880      	ldr	r0, [r0, #8]
	twihs_package_t packet = {
  401b2a:	9304      	str	r3, [sp, #16]
  401b2c:	f88d 4014 	strb.w	r4, [sp, #20]
	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  401b30:	4790      	blx	r2
  401b32:	3000      	adds	r0, #0
  401b34:	bf18      	it	ne
  401b36:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}

}
  401b38:	4240      	negs	r0, r0
  401b3a:	b007      	add	sp, #28
  401b3c:	bd30      	pop	{r4, r5, pc}
			return (device->object_list[i].size + 1);
  401b3e:	78e3      	ldrb	r3, [r4, #3]
  401b40:	3301      	adds	r3, #1
  401b42:	b2db      	uxtb	r3, r3
  401b44:	e7ed      	b.n	401b22 <mxt_write_config_object+0x52>
  401b46:	bf00      	nop
  401b48:	00402449 	.word	0x00402449

00401b4c <mxt_write_config_reg>:
 * \param value Value to be written to register
 * \result Operation result status code
 */
status_code_t mxt_write_config_reg(struct mxt_device *device,
		mxt_memory_adr memory_adr, uint8_t value)
{
  401b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  401b4e:	b089      	sub	sp, #36	; 0x24
  401b50:	460c      	mov	r4, r1
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  401b52:	2300      	movs	r3, #0
  401b54:	0a09      	lsrs	r1, r1, #8
  401b56:	7b07      	ldrb	r7, [r0, #12]
  401b58:	2602      	movs	r6, #2
{
  401b5a:	f88d 2007 	strb.w	r2, [sp, #7]
	twihs_package_t packet = {
  401b5e:	f10d 0507 	add.w	r5, sp, #7
  401b62:	2201      	movs	r2, #1
  401b64:	9303      	str	r3, [sp, #12]
  401b66:	9307      	str	r3, [sp, #28]
  401b68:	f88d 100d 	strb.w	r1, [sp, #13]
		.chip         = device->mxt_chip_adr,
		.buffer       = &value,
		.length       = sizeof(value)
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  401b6c:	a903      	add	r1, sp, #12
  401b6e:	4b08      	ldr	r3, [pc, #32]	; (401b90 <mxt_write_config_reg+0x44>)
  401b70:	6880      	ldr	r0, [r0, #8]
	twihs_package_t packet = {
  401b72:	f88d 400c 	strb.w	r4, [sp, #12]
  401b76:	f88d 701c 	strb.w	r7, [sp, #28]
  401b7a:	9604      	str	r6, [sp, #16]
  401b7c:	9505      	str	r5, [sp, #20]
  401b7e:	9206      	str	r2, [sp, #24]
	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  401b80:	4798      	blx	r3
  401b82:	3000      	adds	r0, #0
  401b84:	bf18      	it	ne
  401b86:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}
}
  401b88:	4240      	negs	r0, r0
  401b8a:	b009      	add	sp, #36	; 0x24
  401b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401b8e:	bf00      	nop
  401b90:	00402449 	.word	0x00402449

00401b94 <mxt_read_message>:
 * \param *message Pointer to mxt_message instance
 * \return Operation result status code
 */
status_code_t mxt_read_message(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
  401b94:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < device->info_object->obj_count; i++) {
  401b96:	6803      	ldr	r3, [r0, #0]
{
  401b98:	b087      	sub	sp, #28
	for (i = 0; i < device->info_object->obj_count; i++) {
  401b9a:	799b      	ldrb	r3, [r3, #6]
  401b9c:	2b00      	cmp	r3, #0
  401b9e:	d033      	beq.n	401c08 <mxt_read_message+0x74>
		if (object_id == device->object_list[i].type) {
  401ba0:	6845      	ldr	r5, [r0, #4]
  401ba2:	782a      	ldrb	r2, [r5, #0]
  401ba4:	2a05      	cmp	r2, #5
  401ba6:	d02a      	beq.n	401bfe <mxt_read_message+0x6a>
  401ba8:	1e5a      	subs	r2, r3, #1
  401baa:	1dab      	adds	r3, r5, #6
  401bac:	b2d2      	uxtb	r2, r2
  401bae:	3201      	adds	r2, #1
  401bb0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  401bb4:	eb05 0242 	add.w	r2, r5, r2, lsl #1
  401bb8:	e003      	b.n	401bc2 <mxt_read_message+0x2e>
  401bba:	f813 4b06 	ldrb.w	r4, [r3], #6
  401bbe:	2c05      	cmp	r4, #5
  401bc0:	d01d      	beq.n	401bfe <mxt_read_message+0x6a>
	for (i = 0; i < device->info_object->obj_count; i++) {
  401bc2:	4293      	cmp	r3, r2
		if (object_id == device->object_list[i].type) {
  401bc4:	461d      	mov	r5, r3
	for (i = 0; i < device->info_object->obj_count; i++) {
  401bc6:	d1f8      	bne.n	401bba <mxt_read_message+0x26>
  401bc8:	2300      	movs	r3, #0
  401bca:	461f      	mov	r7, r3
	uint16_t obj_adr = mxt_get_object_address(device,
			MXT_GEN_MESSAGEPROCESSOR_T5, 0);

	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  401bcc:	2200      	movs	r2, #0
  401bce:	7b04      	ldrb	r4, [r0, #12]
  401bd0:	2602      	movs	r6, #2
  401bd2:	2509      	movs	r5, #9
  401bd4:	9201      	str	r2, [sp, #4]
  401bd6:	9205      	str	r2, [sp, #20]
  401bd8:	9103      	str	r1, [sp, #12]
		.buffer       = message,
		.length       = MXT_TWI_MSG_SIZE_T5
	};

	/* Read information from the slave */
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  401bda:	a901      	add	r1, sp, #4
  401bdc:	4a0b      	ldr	r2, [pc, #44]	; (401c0c <mxt_read_message+0x78>)
  401bde:	6880      	ldr	r0, [r0, #8]
	twihs_package_t packet = {
  401be0:	f88d 7004 	strb.w	r7, [sp, #4]
  401be4:	f88d 3005 	strb.w	r3, [sp, #5]
  401be8:	9602      	str	r6, [sp, #8]
  401bea:	9504      	str	r5, [sp, #16]
  401bec:	f88d 4014 	strb.w	r4, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  401bf0:	4790      	blx	r2
  401bf2:	3000      	adds	r0, #0
  401bf4:	bf18      	it	ne
  401bf6:	2001      	movne	r0, #1
		return mxt_validate_message(&packet);
#else
		return STATUS_OK;
#endif
	}
}
  401bf8:	4240      	negs	r0, r0
  401bfa:	b007      	add	sp, #28
  401bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return device->object_list[i].start_address;
  401bfe:	f8b5 3001 	ldrh.w	r3, [r5, #1]
  401c02:	b2df      	uxtb	r7, r3
  401c04:	0a1b      	lsrs	r3, r3, #8
  401c06:	e7e1      	b.n	401bcc <mxt_read_message+0x38>
	for (i = 0; i < device->info_object->obj_count; i++) {
  401c08:	461f      	mov	r7, r3
  401c0a:	e7df      	b.n	401bcc <mxt_read_message+0x38>
  401c0c:	00402395 	.word	0x00402395

00401c10 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  401c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  401c14:	b990      	cbnz	r0, 401c3c <_read+0x2c>
		return -1;
	}

	for (; len > 0; --len) {
  401c16:	2a00      	cmp	r2, #0
  401c18:	4690      	mov	r8, r2
  401c1a:	dd0d      	ble.n	401c38 <_read+0x28>
  401c1c:	460c      	mov	r4, r1
  401c1e:	188f      	adds	r7, r1, r2
  401c20:	4e08      	ldr	r6, [pc, #32]	; (401c44 <_read+0x34>)
  401c22:	4d09      	ldr	r5, [pc, #36]	; (401c48 <_read+0x38>)
		ptr_get(stdio_base, ptr);
  401c24:	4621      	mov	r1, r4
		ptr++;
  401c26:	3401      	adds	r4, #1
		ptr_get(stdio_base, ptr);
  401c28:	6830      	ldr	r0, [r6, #0]
  401c2a:	682b      	ldr	r3, [r5, #0]
  401c2c:	4798      	blx	r3
	for (; len > 0; --len) {
  401c2e:	42bc      	cmp	r4, r7
  401c30:	d1f8      	bne.n	401c24 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  401c32:	4640      	mov	r0, r8
  401c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (; len > 0; --len) {
  401c38:	4680      	mov	r8, r0
  401c3a:	e7fa      	b.n	401c32 <_read+0x22>
		return -1;
  401c3c:	f04f 38ff 	mov.w	r8, #4294967295
  401c40:	e7f7      	b.n	401c32 <_read+0x22>
  401c42:	bf00      	nop
  401c44:	2044a814 	.word	0x2044a814
  401c48:	2044a80c 	.word	0x2044a80c

00401c4c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  401c4c:	3801      	subs	r0, #1
  401c4e:	2802      	cmp	r0, #2
  401c50:	d81e      	bhi.n	401c90 <_write+0x44>
{
  401c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401c56:	4615      	mov	r5, r2
		return -1;
	}

	for (; len != 0; --len) {
  401c58:	b1ba      	cbz	r2, 401c8a <_write+0x3e>
  401c5a:	460e      	mov	r6, r1
  401c5c:	460c      	mov	r4, r1
  401c5e:	f8df 803c 	ldr.w	r8, [pc, #60]	; 401c9c <_write+0x50>
  401c62:	4f0d      	ldr	r7, [pc, #52]	; (401c98 <_write+0x4c>)
  401c64:	e001      	b.n	401c6a <_write+0x1e>
  401c66:	3d01      	subs	r5, #1
  401c68:	d00d      	beq.n	401c86 <_write+0x3a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  401c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
  401c6e:	f8d8 0000 	ldr.w	r0, [r8]
  401c72:	683b      	ldr	r3, [r7, #0]
  401c74:	4798      	blx	r3
  401c76:	2800      	cmp	r0, #0
  401c78:	eba4 0006 	sub.w	r0, r4, r6
  401c7c:	daf3      	bge.n	401c66 <_write+0x1a>
		return -1;
  401c7e:	f04f 30ff 	mov.w	r0, #4294967295
  401c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (; len != 0; --len) {
  401c8a:	4610      	mov	r0, r2
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  401c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  401c90:	f04f 30ff 	mov.w	r0, #4294967295
}
  401c94:	4770      	bx	lr
  401c96:	bf00      	nop
  401c98:	2044a810 	.word	0x2044a810
  401c9c:	2044a814 	.word	0x2044a814

00401ca0 <wm8904_write_register>:
 *
 * \param uc_register_address Register address to write
 * \param us_data Data to write.
 */
void wm8904_write_register(uint8_t uc_register_address, uint16_t us_data)
{
  401ca0:	b570      	push	{r4, r5, r6, lr}
  401ca2:	460b      	mov	r3, r1
  401ca4:	b086      	sub	sp, #24
	uint8_t uc_temp_data[2];
	twihs_packet_t packet;

	uc_temp_data[0] = (us_data & 0xff00) >> 8;
  401ca6:	0a0e      	lsrs	r6, r1, #8

	packet.addr[0]     = uc_register_address;
	packet.addr_length = 0x1;
	packet.buffer      = uc_temp_data;
	packet.length      = 0x2;
	packet.chip        = WM8904_SLAVE_ADDRESS;
  401ca8:	221a      	movs	r2, #26
	uc_temp_data[1] = us_data & 0xff;
  401caa:	f88d 3001 	strb.w	r3, [sp, #1]
	packet.addr_length = 0x1;
  401cae:	2501      	movs	r5, #1
	packet.length      = 0x2;
  401cb0:	2402      	movs	r4, #2

	twihs_master_write(WM8904_TWIHS, &packet);
  401cb2:	a901      	add	r1, sp, #4
  401cb4:	4b07      	ldr	r3, [pc, #28]	; (401cd4 <wm8904_write_register+0x34>)
	packet.addr[0]     = uc_register_address;
  401cb6:	f88d 0004 	strb.w	r0, [sp, #4]
	twihs_master_write(WM8904_TWIHS, &packet);
  401cba:	4807      	ldr	r0, [pc, #28]	; (401cd8 <wm8904_write_register+0x38>)
	uc_temp_data[0] = (us_data & 0xff00) >> 8;
  401cbc:	f88d 6000 	strb.w	r6, [sp]
	packet.addr_length = 0x1;
  401cc0:	9502      	str	r5, [sp, #8]
	packet.buffer      = uc_temp_data;
  401cc2:	f8cd d00c 	str.w	sp, [sp, #12]
	packet.length      = 0x2;
  401cc6:	9404      	str	r4, [sp, #16]
	packet.chip        = WM8904_SLAVE_ADDRESS;
  401cc8:	f88d 2014 	strb.w	r2, [sp, #20]
	twihs_master_write(WM8904_TWIHS, &packet);
  401ccc:	4798      	blx	r3
}
  401cce:	b006      	add	sp, #24
  401cd0:	bd70      	pop	{r4, r5, r6, pc}
  401cd2:	bf00      	nop
  401cd4:	00402449 	.word	0x00402449
  401cd8:	40018000 	.word	0x40018000

00401cdc <wm8904_read_register>:
 *
 * \param uc_register_address Register address to write
 * \retun Register value.
 */
uint16_t wm8904_read_register(uint8_t uc_register_address)
{
  401cdc:	b530      	push	{r4, r5, lr}
  401cde:	b087      	sub	sp, #28

	packet.addr[0]     = uc_register_address;
	packet.addr_length = 0x1;
	packet.buffer      = uc_temp_data;
	packet.length      = 0x2;
	packet.chip        = WM8904_SLAVE_ADDRESS;
  401ce0:	221a      	movs	r2, #26
	packet.addr_length = 0x1;
  401ce2:	2501      	movs	r5, #1
	packet.length      = 0x2;
  401ce4:	2402      	movs	r4, #2
	packet.addr[0]     = uc_register_address;
  401ce6:	f88d 0004 	strb.w	r0, [sp, #4]

	twihs_master_read(WM8904_TWIHS, &packet);
  401cea:	a901      	add	r1, sp, #4
  401cec:	4b08      	ldr	r3, [pc, #32]	; (401d10 <wm8904_read_register+0x34>)
  401cee:	4809      	ldr	r0, [pc, #36]	; (401d14 <wm8904_read_register+0x38>)
	packet.addr_length = 0x1;
  401cf0:	9502      	str	r5, [sp, #8]
	packet.buffer      = uc_temp_data;
  401cf2:	f8cd d00c 	str.w	sp, [sp, #12]
	packet.length      = 0x2;
  401cf6:	9404      	str	r4, [sp, #16]
	packet.chip        = WM8904_SLAVE_ADDRESS;
  401cf8:	f88d 2014 	strb.w	r2, [sp, #20]
	twihs_master_read(WM8904_TWIHS, &packet);
  401cfc:	4798      	blx	r3
	us_data = (((uint16_t)uc_temp_data[0] << 8) & 0xff00) | uc_temp_data[1];
  401cfe:	f89d 0000 	ldrb.w	r0, [sp]
  401d02:	f89d 3001 	ldrb.w	r3, [sp, #1]

	return us_data;
}
  401d06:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  401d0a:	b007      	add	sp, #28
  401d0c:	bd30      	pop	{r4, r5, pc}
  401d0e:	bf00      	nop
  401d10:	00402395 	.word	0x00402395
  401d14:	40018000 	.word	0x40018000

00401d18 <wm8904_twi_init>:
 * \brief Initialize TWIHS connect to WM8904.
 *
 * \retun TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t wm8904_twi_init(void)
{
  401d18:	b510      	push	{r4, lr}
	pio_configure_pin(WM8904_TK_PIO, WM8904_TK_FLAGS);
  401d1a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
{
  401d1e:	b084      	sub	sp, #16
	pio_configure_pin(WM8904_TK_PIO, WM8904_TK_FLAGS);
  401d20:	4c15      	ldr	r4, [pc, #84]	; (401d78 <wm8904_twi_init+0x60>)
  401d22:	2021      	movs	r0, #33	; 0x21
  401d24:	47a0      	blx	r4
	pio_configure_pin(WM8904_TF_PIO, WM8904_TF_FLAGS);
  401d26:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401d2a:	2020      	movs	r0, #32
  401d2c:	47a0      	blx	r4
	pio_configure_pin(WM8904_TD_PIO, WM8904_TD_FLAGS);
  401d2e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401d32:	207a      	movs	r0, #122	; 0x7a
  401d34:	47a0      	blx	r4
	pio_configure_pin(WM8904_RK_PIO, WM8904_RK_FLAGS);
  401d36:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401d3a:	2016      	movs	r0, #22
  401d3c:	47a0      	blx	r4
	pio_configure_pin(WM8904_RF_PIO, WM8904_RF_FLAGS);
  401d3e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401d42:	2078      	movs	r0, #120	; 0x78
  401d44:	47a0      	blx	r4
	pio_configure_pin(WM8904_RD_PIO, WM8904_RD_FLAGS);
  401d46:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401d4a:	200a      	movs	r0, #10
  401d4c:	47a0      	blx	r4
	pio_configure_pin(WM8904_PCK2_PIO, WM8904_PCK2_FLAGS);
  401d4e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401d52:	2012      	movs	r0, #18
  401d54:	47a0      	blx	r4
	p_opt->smbus      = 0;
  401d56:	2200      	movs	r2, #0
	p_opt->master_clk = sysclk_get_peripheral_hz();
  401d58:	4908      	ldr	r1, [pc, #32]	; (401d7c <wm8904_twi_init+0x64>)
  401d5a:	2013      	movs	r0, #19

	twihs_options_t opt;
	opt.master_clk = sysclk_get_cpu_hz();
	opt.speed = WM8904_TWIHS_CLK;
  401d5c:	4c08      	ldr	r4, [pc, #32]	; (401d80 <wm8904_twi_init+0x68>)
  401d5e:	4b09      	ldr	r3, [pc, #36]	; (401d84 <wm8904_twi_init+0x6c>)
  401d60:	9101      	str	r1, [sp, #4]
	p_opt->smbus      = 0;
  401d62:	f88d 200d 	strb.w	r2, [sp, #13]
  401d66:	9402      	str	r4, [sp, #8]
  401d68:	4798      	blx	r3
	return (twihs_master_init(p_twihs, p_opt));
  401d6a:	a901      	add	r1, sp, #4
  401d6c:	4b06      	ldr	r3, [pc, #24]	; (401d88 <wm8904_twi_init+0x70>)
  401d6e:	4807      	ldr	r0, [pc, #28]	; (401d8c <wm8904_twi_init+0x74>)
  401d70:	4798      	blx	r3
	return twihs_master_setup(WM8904_TWIHS, &opt);
}
  401d72:	b004      	add	sp, #16
  401d74:	bd10      	pop	{r4, pc}
  401d76:	bf00      	nop
  401d78:	00402ad5 	.word	0x00402ad5
  401d7c:	08f0d180 	.word	0x08f0d180
  401d80:	00061a80 	.word	0x00061a80
  401d84:	00403125 	.word	0x00403125
  401d88:	004022b5 	.word	0x004022b5
  401d8c:	40018000 	.word	0x40018000

00401d90 <ili9488_set_window>:
 * \Param y start position.
 * \Param width  Width of window.
 * \Param height Height of window.
 */
void ili9488_set_window(uint16_t x, uint16_t y, uint16_t width, uint16_t height )
{
  401d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ili9488_color_t buf[4];

	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	col_start  =  x ;
	col_end    =  width + x - 1;
  401d94:	3a01      	subs	r2, #1
{
  401d96:	460c      	mov	r4, r1

	row_start = y ;
	row_end   = height + y - 1;
  401d98:	3b01      	subs	r3, #1
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401d9a:	4f29      	ldr	r7, [pc, #164]	; (401e40 <ili9488_set_window+0xb0>)
{
  401d9c:	b085      	sub	sp, #20
	col_end    =  width + x - 1;
  401d9e:	4402      	add	r2, r0
{
  401da0:	4605      	mov	r5, r0
	row_end   = height + y - 1;
  401da2:	4423      	add	r3, r4
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401da4:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 401e48 <ili9488_set_window+0xb8>
  401da8:	4638      	mov	r0, r7
  401daa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000

	buf[0] = get_8b_to_16b(col_start);
	buf[1] = get_0b_to_8b(col_start);
	buf[2] = get_8b_to_16b(col_end);
  401dae:	f3c2 2a07 	ubfx	sl, r2, #8, #8
	buf[3] = get_0b_to_8b(col_end);
  401db2:	b2d6      	uxtb	r6, r2
	col_end    =  width + x - 1;
  401db4:	f8ad 200a 	strh.w	r2, [sp, #10]
	row_end   = height + y - 1;
  401db8:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf[0] = get_8b_to_16b(col_start);
  401dbc:	ea4f 2b15 	mov.w	fp, r5, lsr #8
	col_start  =  x ;
  401dc0:	f8ad 5008 	strh.w	r5, [sp, #8]
	buf[1] = get_0b_to_8b(col_start);
  401dc4:	b2ed      	uxtb	r5, r5
	row_start = y ;
  401dc6:	f8ad 400c 	strh.w	r4, [sp, #12]
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  401dca:	f04f 44c6 	mov.w	r4, #1660944384	; 0x63000000
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401dce:	47c0      	blx	r8
  401dd0:	222a      	movs	r2, #42	; 0x2a
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401dd2:	4b1c      	ldr	r3, [pc, #112]	; (401e44 <ili9488_set_window+0xb4>)
  401dd4:	4638      	mov	r0, r7
  401dd6:	8022      	strh	r2, [r4, #0]
  401dd8:	f04f 0900 	mov.w	r9, #0
  401ddc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401de0:	9301      	str	r3, [sp, #4]
  401de2:	4798      	blx	r3
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  401de4:	f8a4 b000 	strh.w	fp, [r4]
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401de8:	4638      	mov	r0, r7
  401dea:	8025      	strh	r5, [r4, #0]
  401dec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401df0:	f8a4 a000 	strh.w	sl, [r4]
  401df4:	8026      	strh	r6, [r4, #0]
  401df6:	47c0      	blx	r8
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  401df8:	f8a4 9000 	strh.w	r9, [r4]
  401dfc:	4638      	mov	r0, r7
  401dfe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);

	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(row_start);
  401e02:	f89d b00d 	ldrb.w	fp, [sp, #13]
	buf[1] = get_0b_to_8b(row_start);
  401e06:	f89d a00c 	ldrb.w	sl, [sp, #12]
	buf[2] = get_8b_to_16b(row_end);
  401e0a:	f89d 600f 	ldrb.w	r6, [sp, #15]
	buf[3] = get_0b_to_8b(row_end);
  401e0e:	f89d 500e 	ldrb.w	r5, [sp, #14]
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401e12:	47c0      	blx	r8
  401e14:	222b      	movs	r2, #43	; 0x2b
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401e16:	4638      	mov	r0, r7
  401e18:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401e1c:	8022      	strh	r2, [r4, #0]
  401e1e:	9b01      	ldr	r3, [sp, #4]
  401e20:	4798      	blx	r3
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401e22:	4638      	mov	r0, r7
  401e24:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  401e28:	f8a4 b000 	strh.w	fp, [r4]
  401e2c:	f8a4 a000 	strh.w	sl, [r4]
  401e30:	8026      	strh	r6, [r4, #0]
  401e32:	8025      	strh	r5, [r4, #0]
  401e34:	47c0      	blx	r8
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  401e36:	f8a4 9000 	strh.w	r9, [r4]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
}
  401e3a:	b005      	add	sp, #20
  401e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401e40:	400e1200 	.word	0x400e1200
  401e44:	00402999 	.word	0x00402999
  401e48:	0040299d 	.word	0x0040299d

00401e4c <ili9488_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9488_display_on(void)
{
  401e4c:	b508      	push	{r3, lr}
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401e4e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401e52:	4b04      	ldr	r3, [pc, #16]	; (401e64 <ili9488_display_on+0x18>)
  401e54:	4804      	ldr	r0, [pc, #16]	; (401e68 <ili9488_display_on+0x1c>)
  401e56:	4798      	blx	r3
  401e58:	f04f 43c6 	mov.w	r3, #1660944384	; 0x63000000
  401e5c:	2229      	movs	r2, #41	; 0x29
  401e5e:	801a      	strh	r2, [r3, #0]
  401e60:	bd08      	pop	{r3, pc}
  401e62:	bf00      	nop
  401e64:	0040299d 	.word	0x0040299d
  401e68:	400e1200 	.word	0x400e1200

00401e6c <ili9488_set_cursor_position>:
 *
 * \param x X coordinate of upper-left corner on LCD.
 * \param y Y coordinate of upper-left corner on LCD.
 */
void ili9488_set_cursor_position(uint16_t x, uint16_t y)
{
  401e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401e70:	4d21      	ldr	r5, [pc, #132]	; (401ef8 <ili9488_set_cursor_position+0x8c>)
{
  401e72:	b082      	sub	sp, #8
  401e74:	4606      	mov	r6, r0
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401e76:	4f21      	ldr	r7, [pc, #132]	; (401efc <ili9488_set_cursor_position+0x90>)
{
  401e78:	f8ad 1004 	strh.w	r1, [sp, #4]
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401e7c:	4628      	mov	r0, r5
  401e7e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401e82:	f04f 44c6 	mov.w	r4, #1660944384	; 0x63000000
{
  401e86:	f8ad 6006 	strh.w	r6, [sp, #6]
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401e8a:	47b8      	blx	r7
  401e8c:	232a      	movs	r3, #42	; 0x2a
	uint32_t cnt = 0;

	ili9488_color_t buf[4];
	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	buf[0] = get_8b_to_16b(x);
  401e8e:	ea4f 2916 	mov.w	r9, r6, lsr #8
	buf[1] = get_0b_to_8b(x);
  401e92:	b2f6      	uxtb	r6, r6
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401e94:	4628      	mov	r0, r5
  401e96:	8023      	strh	r3, [r4, #0]
  401e98:	f04f 0800 	mov.w	r8, #0
  401e9c:	f8df a060 	ldr.w	sl, [pc, #96]	; 401f00 <ili9488_set_cursor_position+0x94>
  401ea0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401ea4:	47d0      	blx	sl
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  401ea6:	f8a4 9000 	strh.w	r9, [r4]
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401eaa:	4628      	mov	r0, r5
  401eac:	8026      	strh	r6, [r4, #0]
  401eae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401eb2:	f8a4 9000 	strh.w	r9, [r4]
  401eb6:	8026      	strh	r6, [r4, #0]
  401eb8:	47b8      	blx	r7
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  401eba:	f8a4 8000 	strh.w	r8, [r4]
  401ebe:	4628      	mov	r0, r5
  401ec0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);


	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(y);
  401ec4:	f89d 9005 	ldrb.w	r9, [sp, #5]
	buf[1] = get_0b_to_8b(y);
  401ec8:	f89d 6004 	ldrb.w	r6, [sp, #4]
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401ecc:	47b8      	blx	r7
  401ece:	232b      	movs	r3, #43	; 0x2b
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401ed0:	4628      	mov	r0, r5
  401ed2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401ed6:	8023      	strh	r3, [r4, #0]
  401ed8:	47d0      	blx	sl
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401eda:	4628      	mov	r0, r5
  401edc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  401ee0:	f8a4 9000 	strh.w	r9, [r4]
  401ee4:	8026      	strh	r6, [r4, #0]
  401ee6:	f8a4 9000 	strh.w	r9, [r4]
  401eea:	8026      	strh	r6, [r4, #0]
  401eec:	47b8      	blx	r7
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  401eee:	f8a4 8000 	strh.w	r8, [r4]
	buf[2] = get_8b_to_16b(y);
	buf[3] = get_0b_to_8b(y);
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
}
  401ef2:	b002      	add	sp, #8
  401ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401ef8:	400e1200 	.word	0x400e1200
  401efc:	0040299d 	.word	0x0040299d
  401f00:	00402999 	.word	0x00402999

00401f04 <ili9488_init>:
{
  401f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401f08:	4607      	mov	r7, r0
	pmc_enable_periph_clk(ID_SMC);
  401f0a:	4b40      	ldr	r3, [pc, #256]	; (40200c <ili9488_init+0x108>)
  401f0c:	2009      	movs	r0, #9
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401f0e:	4d40      	ldr	r5, [pc, #256]	; (402010 <ili9488_init+0x10c>)
	pmc_enable_periph_clk(ID_SMC);
  401f10:	4798      	blx	r3
	smc_set_setup_timing(SMC, BOARD_ILI9488_EBI_NPCS, SMC_SETUP_NWE_SETUP(0)
  401f12:	2200      	movs	r2, #0
  401f14:	2103      	movs	r1, #3
  401f16:	483f      	ldr	r0, [pc, #252]	; (402014 <ili9488_init+0x110>)
  401f18:	4b3f      	ldr	r3, [pc, #252]	; (402018 <ili9488_init+0x114>)
  401f1a:	f04f 44c6 	mov.w	r4, #1660944384	; 0x63000000
  401f1e:	4798      	blx	r3
	smc_set_pulse_timing(SMC, BOARD_ILI9488_EBI_NPCS , SMC_PULSE_NWE_PULSE(3)
  401f20:	4a3e      	ldr	r2, [pc, #248]	; (40201c <ili9488_init+0x118>)
  401f22:	2103      	movs	r1, #3
  401f24:	483b      	ldr	r0, [pc, #236]	; (402014 <ili9488_init+0x110>)
  401f26:	4b3e      	ldr	r3, [pc, #248]	; (402020 <ili9488_init+0x11c>)
  401f28:	f04f 0936 	mov.w	r9, #54	; 0x36
  401f2c:	4798      	blx	r3
	smc_set_cycle_timing(SMC, BOARD_ILI9488_EBI_NPCS, SMC_CYCLE_NWE_CYCLE(0x4)
  401f2e:	4a3d      	ldr	r2, [pc, #244]	; (402024 <ili9488_init+0x120>)
  401f30:	2103      	movs	r1, #3
  401f32:	4838      	ldr	r0, [pc, #224]	; (402014 <ili9488_init+0x110>)
  401f34:	4b3c      	ldr	r3, [pc, #240]	; (402028 <ili9488_init+0x124>)
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  401f36:	f04f 0848 	mov.w	r8, #72	; 0x48
  401f3a:	4798      	blx	r3
	smc_set_mode(SMC, BOARD_ILI9488_EBI_NPCS, SMC_MODE_READ_MODE
  401f3c:	4a3b      	ldr	r2, [pc, #236]	; (40202c <ili9488_init+0x128>)
  401f3e:	4b3c      	ldr	r3, [pc, #240]	; (402030 <ili9488_init+0x12c>)
  401f40:	2103      	movs	r1, #3
  401f42:	4834      	ldr	r0, [pc, #208]	; (402014 <ili9488_init+0x110>)
  401f44:	4798      	blx	r3
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401f46:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401f4a:	483a      	ldr	r0, [pc, #232]	; (402034 <ili9488_init+0x130>)
  401f4c:	47a8      	blx	r5
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  401f4e:	2301      	movs	r3, #1
  401f50:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401f54:	4837      	ldr	r0, [pc, #220]	; (402034 <ili9488_init+0x130>)
  401f56:	8023      	strh	r3, [r4, #0]
  401f58:	47a8      	blx	r5
  401f5a:	2311      	movs	r3, #17
  401f5c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401f60:	4834      	ldr	r0, [pc, #208]	; (402034 <ili9488_init+0x130>)
  401f62:	8023      	strh	r3, [r4, #0]
  401f64:	47a8      	blx	r5
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401f66:	4e34      	ldr	r6, [pc, #208]	; (402038 <ili9488_init+0x134>)
  401f68:	f8a4 9000 	strh.w	r9, [r4]
  401f6c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401f70:	4830      	ldr	r0, [pc, #192]	; (402034 <ili9488_init+0x130>)
  401f72:	47b0      	blx	r6
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  401f74:	f8a4 8000 	strh.w	r8, [r4]
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401f78:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401f7c:	482d      	ldr	r0, [pc, #180]	; (402034 <ili9488_init+0x130>)
  401f7e:	47a8      	blx	r5
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  401f80:	23cf      	movs	r3, #207	; 0xcf
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401f82:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401f86:	482b      	ldr	r0, [pc, #172]	; (402034 <ili9488_init+0x130>)
  401f88:	8023      	strh	r3, [r4, #0]
  401f8a:	47b0      	blx	r6
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  401f8c:	2304      	movs	r3, #4
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401f8e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401f92:	4828      	ldr	r0, [pc, #160]	; (402034 <ili9488_init+0x130>)
  401f94:	8023      	strh	r3, [r4, #0]
  401f96:	47a8      	blx	r5
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  401f98:	233a      	movs	r3, #58	; 0x3a
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401f9a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401f9e:	4825      	ldr	r0, [pc, #148]	; (402034 <ili9488_init+0x130>)
  401fa0:	8023      	strh	r3, [r4, #0]
  401fa2:	47b0      	blx	r6
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  401fa4:	2305      	movs	r3, #5
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401fa6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401faa:	4822      	ldr	r0, [pc, #136]	; (402034 <ili9488_init+0x130>)
  401fac:	8023      	strh	r3, [r4, #0]
  401fae:	47a8      	blx	r5
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  401fb0:	2312      	movs	r3, #18
  401fb2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401fb6:	481f      	ldr	r0, [pc, #124]	; (402034 <ili9488_init+0x130>)
  401fb8:	8023      	strh	r3, [r4, #0]
  401fba:	47a8      	blx	r5
  401fbc:	2329      	movs	r3, #41	; 0x29
  401fbe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401fc2:	481c      	ldr	r0, [pc, #112]	; (402034 <ili9488_init+0x130>)
  401fc4:	8023      	strh	r3, [r4, #0]
  401fc6:	47a8      	blx	r5
  401fc8:	f8a4 9000 	strh.w	r9, [r4]
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401fcc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401fd0:	4818      	ldr	r0, [pc, #96]	; (402034 <ili9488_init+0x130>)
  401fd2:	47b0      	blx	r6
	ili9488_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  401fd4:	2100      	movs	r1, #0
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  401fd6:	f8a4 8000 	strh.w	r8, [r4]
  401fda:	4608      	mov	r0, r1
  401fdc:	88bb      	ldrh	r3, [r7, #4]
  401fde:	883a      	ldrh	r2, [r7, #0]
  401fe0:	4c16      	ldr	r4, [pc, #88]	; (40203c <ili9488_init+0x138>)
  401fe2:	47a0      	blx	r4
  401fe4:	8938      	ldrh	r0, [r7, #8]
  401fe6:	2200      	movs	r2, #0
	ili9488_set_foreground_color(p_opt->foreground_color);
  401fe8:	4b15      	ldr	r3, [pc, #84]	; (402040 <ili9488_init+0x13c>)
  401fea:	f360 020f 	bfi	r2, r0, #0, #16
  401fee:	f503 7120 	add.w	r1, r3, #640	; 0x280
  401ff2:	f360 421f 	bfi	r2, r0, #16, #16
		g_ul_pixel_cache[i] = ul_color;
  401ff6:	f843 2b04 	str.w	r2, [r3], #4
  401ffa:	428b      	cmp	r3, r1
  401ffc:	d1fb      	bne.n	401ff6 <ili9488_init+0xf2>
	ili9488_set_cursor_position(0, 0);
  401ffe:	2100      	movs	r1, #0
  402000:	4b10      	ldr	r3, [pc, #64]	; (402044 <ili9488_init+0x140>)
  402002:	4608      	mov	r0, r1
  402004:	4798      	blx	r3
}
  402006:	2000      	movs	r0, #0
  402008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40200c:	00403125 	.word	0x00403125
  402010:	0040299d 	.word	0x0040299d
  402014:	40080000 	.word	0x40080000
  402018:	00402175 	.word	0x00402175
  40201c:	0a0a0403 	.word	0x0a0a0403
  402020:	0040217d 	.word	0x0040217d
  402024:	000a0004 	.word	0x000a0004
  402028:	00402185 	.word	0x00402185
  40202c:	000f1003 	.word	0x000f1003
  402030:	0040218d 	.word	0x0040218d
  402034:	400e1200 	.word	0x400e1200
  402038:	00402999 	.word	0x00402999
  40203c:	00401d91 	.word	0x00401d91
  402040:	2041c05c 	.word	0x2041c05c
  402044:	00401e6d 	.word	0x00401e6d

00402048 <ili9488_write_brightness>:
 * Configures the display for a given brightness value
 *
 * \param us_value brightness value need to written.
 */
void ili9488_write_brightness(uint16_t us_value)
{
  402048:	b570      	push	{r4, r5, r6, lr}
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  40204a:	4d09      	ldr	r5, [pc, #36]	; (402070 <ili9488_write_brightness+0x28>)
{
  40204c:	4606      	mov	r6, r0
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  40204e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402052:	4b08      	ldr	r3, [pc, #32]	; (402074 <ili9488_write_brightness+0x2c>)
  402054:	4628      	mov	r0, r5
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  402056:	f04f 44c6 	mov.w	r4, #1660944384	; 0x63000000
  40205a:	4798      	blx	r3
  40205c:	2351      	movs	r3, #81	; 0x51
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  40205e:	4628      	mov	r0, r5
  402060:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402064:	8023      	strh	r3, [r4, #0]
  402066:	4b04      	ldr	r3, [pc, #16]	; (402078 <ili9488_write_brightness+0x30>)
  402068:	4798      	blx	r3
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  40206a:	8026      	strh	r6, [r4, #0]
  40206c:	bd70      	pop	{r4, r5, r6, pc}
  40206e:	bf00      	nop
  402070:	400e1200 	.word	0x400e1200
  402074:	0040299d 	.word	0x0040299d
  402078:	00402999 	.word	0x00402999

0040207c <ili9488_set_limits>:
 * \param end_x The x coordinate of the bottom right corner
 * \param end_y The y coordinate of the bottom right corner
 */
void ili9488_set_limits(ili9488_coord_t start_x, ili9488_coord_t start_y,
		ili9488_coord_t end_x, ili9488_coord_t end_y)
{
  40207c:	b4f0      	push	{r4, r5, r6, r7}
	limit_start_x = start_x;
  40207e:	4f05      	ldr	r7, [pc, #20]	; (402094 <ili9488_set_limits+0x18>)
	limit_start_y = start_y;
  402080:	4e05      	ldr	r6, [pc, #20]	; (402098 <ili9488_set_limits+0x1c>)
	limit_end_x = end_x;
  402082:	4d06      	ldr	r5, [pc, #24]	; (40209c <ili9488_set_limits+0x20>)
	limit_end_y = end_y;
  402084:	4c06      	ldr	r4, [pc, #24]	; (4020a0 <ili9488_set_limits+0x24>)
	limit_start_x = start_x;
  402086:	8038      	strh	r0, [r7, #0]
	limit_start_y = start_y;
  402088:	8031      	strh	r1, [r6, #0]
	limit_end_x = end_x;
  40208a:	802a      	strh	r2, [r5, #0]
	limit_end_y = end_y;
  40208c:	8023      	strh	r3, [r4, #0]
}
  40208e:	bcf0      	pop	{r4, r5, r6, r7}
  402090:	4770      	bx	lr
  402092:	bf00      	nop
  402094:	2041c2e0 	.word	0x2041c2e0
  402098:	2041c2e2 	.word	0x2041c2e2
  40209c:	2041c2dc 	.word	0x2041c2dc
  4020a0:	2041c2de 	.word	0x2041c2de

004020a4 <ili9488_set_orientation>:
 *
 * \param flags Orientation flags to use, see \ref ILI9488_FLIP_X, \ref ILI9488_FLIP_Y
 *        and \ref ILI9488_SWITCH_XY.
 */
void ili9488_set_orientation(uint8_t flags)
{
  4020a4:	b538      	push	{r3, r4, r5, lr}
	/* Flip X/Y and reverse X orientation and set BGR mode*/
	ili9488_color_t madctl = 0x68;

	if (flags & ILI9488_FLIP_X) {
  4020a6:	f000 0301 	and.w	r3, r0, #1
  4020aa:	2b00      	cmp	r3, #0
  4020ac:	bf0b      	itete	eq
  4020ae:	2448      	moveq	r4, #72	; 0x48
  4020b0:	2408      	movne	r4, #8
  4020b2:	21c8      	moveq	r1, #200	; 0xc8
  4020b4:	2188      	movne	r1, #136	; 0x88
  4020b6:	bf0b      	itete	eq
  4020b8:	22e8      	moveq	r2, #232	; 0xe8
  4020ba:	22a8      	movne	r2, #168	; 0xa8
  4020bc:	2368      	moveq	r3, #104	; 0x68
  4020be:	2328      	movne	r3, #40	; 0x28
		madctl &= ~(1 << 6);
	}

	if (flags & ILI9488_FLIP_Y) {
  4020c0:	0785      	lsls	r5, r0, #30
  4020c2:	d501      	bpl.n	4020c8 <ili9488_set_orientation+0x24>
  4020c4:	460c      	mov	r4, r1
		madctl |= 1 << 7;
  4020c6:	4613      	mov	r3, r2
	}

	if (flags & ILI9488_SWITCH_XY) {
  4020c8:	f010 0f04 	tst.w	r0, #4
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  4020cc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4020d0:	4807      	ldr	r0, [pc, #28]	; (4020f0 <ili9488_set_orientation+0x4c>)
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  4020d2:	f04f 45c6 	mov.w	r5, #1660944384	; 0x63000000
  4020d6:	4a07      	ldr	r2, [pc, #28]	; (4020f4 <ili9488_set_orientation+0x50>)
	if (flags & ILI9488_SWITCH_XY) {
  4020d8:	bf08      	it	eq
  4020da:	461c      	moveq	r4, r3
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  4020dc:	4790      	blx	r2
  4020de:	2336      	movs	r3, #54	; 0x36
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  4020e0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4020e4:	4802      	ldr	r0, [pc, #8]	; (4020f0 <ili9488_set_orientation+0x4c>)
  4020e6:	802b      	strh	r3, [r5, #0]
  4020e8:	4b03      	ldr	r3, [pc, #12]	; (4020f8 <ili9488_set_orientation+0x54>)
  4020ea:	4798      	blx	r3
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  4020ec:	802c      	strh	r4, [r5, #0]
  4020ee:	bd38      	pop	{r3, r4, r5, pc}
  4020f0:	400e1200 	.word	0x400e1200
  4020f4:	0040299d 	.word	0x0040299d
  4020f8:	00402999 	.word	0x00402999

004020fc <ili9488_duplicate_pixel>:
 * \param color The color to write to the display
 * \param count The number of pixels to write with this color
 */
void ili9488_duplicate_pixel(const uint16_t color, uint32_t count)
{
	ili9488_set_window(limit_start_x, limit_start_y, (limit_end_x - limit_start_x) + 1, (limit_end_y - limit_start_y) + 1);
  4020fc:	4b15      	ldr	r3, [pc, #84]	; (402154 <ili9488_duplicate_pixel+0x58>)
  4020fe:	4a16      	ldr	r2, [pc, #88]	; (402158 <ili9488_duplicate_pixel+0x5c>)
{
  402100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402104:	4606      	mov	r6, r0
	ili9488_set_window(limit_start_x, limit_start_y, (limit_end_x - limit_start_x) + 1, (limit_end_y - limit_start_y) + 1);
  402106:	881b      	ldrh	r3, [r3, #0]
  402108:	8812      	ldrh	r2, [r2, #0]
{
  40210a:	460f      	mov	r7, r1
	ili9488_set_window(limit_start_x, limit_start_y, (limit_end_x - limit_start_x) + 1, (limit_end_y - limit_start_y) + 1);
  40210c:	4813      	ldr	r0, [pc, #76]	; (40215c <ili9488_duplicate_pixel+0x60>)
  40210e:	3301      	adds	r3, #1
  402110:	4913      	ldr	r1, [pc, #76]	; (402160 <ili9488_duplicate_pixel+0x64>)
  402112:	3201      	adds	r2, #1
  402114:	8800      	ldrh	r0, [r0, #0]
  402116:	8809      	ldrh	r1, [r1, #0]
  402118:	1a12      	subs	r2, r2, r0
  40211a:	4d12      	ldr	r5, [pc, #72]	; (402164 <ili9488_duplicate_pixel+0x68>)
  40211c:	1a5b      	subs	r3, r3, r1
  40211e:	b292      	uxth	r2, r2
  402120:	b29b      	uxth	r3, r3
  402122:	47a8      	blx	r5
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  402124:	4b10      	ldr	r3, [pc, #64]	; (402168 <ili9488_duplicate_pixel+0x6c>)
  402126:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40212a:	4810      	ldr	r0, [pc, #64]	; (40216c <ili9488_duplicate_pixel+0x70>)
  40212c:	4798      	blx	r3
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  40212e:	f04f 45c6 	mov.w	r5, #1660944384	; 0x63000000
  402132:	232c      	movs	r3, #44	; 0x2c
  402134:	802b      	strh	r3, [r5, #0]
	ili9488_write_ram_prepare();

#ifdef ILI9488_EBIMODE
	while (count--) {
  402136:	b15f      	cbz	r7, 402150 <ili9488_duplicate_pixel+0x54>
  402138:	1e7c      	subs	r4, r7, #1
  40213a:	f8df 8034 	ldr.w	r8, [pc, #52]	; 402170 <ili9488_duplicate_pixel+0x74>
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  40213e:	4f0b      	ldr	r7, [pc, #44]	; (40216c <ili9488_duplicate_pixel+0x70>)
	while (count--) {
  402140:	3c01      	subs	r4, #1
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  402142:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402146:	4638      	mov	r0, r7
  402148:	47c0      	blx	r8
	while (count--) {
  40214a:	1c63      	adds	r3, r4, #1
		*(volatile uint16_t *)(BOARD_ILI9488_ADDR) = lcd_data;
  40214c:	802e      	strh	r6, [r5, #0]
  40214e:	d1f7      	bne.n	402140 <ili9488_duplicate_pixel+0x44>
  402150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402154:	2041c2de 	.word	0x2041c2de
  402158:	2041c2dc 	.word	0x2041c2dc
  40215c:	2041c2e0 	.word	0x2041c2e0
  402160:	2041c2e2 	.word	0x2041c2e2
  402164:	00401d91 	.word	0x00401d91
  402168:	0040299d 	.word	0x0040299d
  40216c:	400e1200 	.word	0x400e1200
  402170:	00402999 	.word	0x00402999

00402174 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
  402174:	0109      	lsls	r1, r1, #4
  402176:	5042      	str	r2, [r0, r1]
  402178:	4770      	bx	lr
  40217a:	bf00      	nop

0040217c <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
  40217c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  402180:	604a      	str	r2, [r1, #4]
  402182:	4770      	bx	lr

00402184 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
  402184:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  402188:	608a      	str	r2, [r1, #8]
  40218a:	4770      	bx	lr

0040218c <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
  40218c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  402190:	60ca      	str	r2, [r1, #12]
  402192:	4770      	bx	lr

00402194 <ssc_reset>:
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_reset(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_SWRST;
	p_ssc->SSC_CMR = 0;
  402194:	2300      	movs	r3, #0
	p_ssc->SSC_CR = SSC_CR_SWRST;
  402196:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40219a:	6002      	str	r2, [r0, #0]
	p_ssc->SSC_CMR = 0;
  40219c:	6043      	str	r3, [r0, #4]
	p_ssc->SSC_RCMR = 0;
  40219e:	6103      	str	r3, [r0, #16]
	p_ssc->SSC_RFMR = 0;
  4021a0:	6143      	str	r3, [r0, #20]
	p_ssc->SSC_TCMR = 0;
  4021a2:	6183      	str	r3, [r0, #24]
	p_ssc->SSC_TFMR = 0;
  4021a4:	61c3      	str	r3, [r0, #28]
  4021a6:	4770      	bx	lr

004021a8 <ssc_enable_rx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_rx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_RXEN;
  4021a8:	2301      	movs	r3, #1
  4021aa:	6003      	str	r3, [r0, #0]
  4021ac:	4770      	bx	lr
  4021ae:	bf00      	nop

004021b0 <ssc_disable_rx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_disable_rx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_RXDIS;
  4021b0:	2302      	movs	r3, #2
  4021b2:	6003      	str	r3, [r0, #0]
  4021b4:	4770      	bx	lr
  4021b6:	bf00      	nop

004021b8 <ssc_enable_tx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_tx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_TXEN;
  4021b8:	f44f 7380 	mov.w	r3, #256	; 0x100
  4021bc:	6003      	str	r3, [r0, #0]
  4021be:	4770      	bx	lr

004021c0 <ssc_disable_tx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_disable_tx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_TXDIS;
  4021c0:	f44f 7300 	mov.w	r3, #512	; 0x200
  4021c4:	6003      	str	r3, [r0, #0]
  4021c6:	4770      	bx	lr

004021c8 <ssc_set_receiver>:
 * \param p_rx_clk_opt Pointer to the receiver clock configuration structure.
 * \param p_rx_data_frame Pointer to the receiver data frame configuration structure.
 */
void ssc_set_receiver(Ssc *p_ssc, clock_opt_t *p_rx_clk_opt,
		data_frame_opt_t *p_rx_data_frame)
{
  4021c8:	b4f0      	push	{r4, r5, r6, r7}
	if (p_rx_clk_opt == NULL) {
  4021ca:	2900      	cmp	r1, #0
  4021cc:	d02f      	beq.n	40222e <ssc_set_receiver+0x66>
		p_ssc->SSC_RCMR = 0;
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  4021ce:	6904      	ldr	r4, [r0, #16]
  4021d0:	68cf      	ldr	r7, [r1, #12]
  4021d2:	698e      	ldr	r6, [r1, #24]
  4021d4:	e891 0028 	ldmia.w	r1, {r3, r5}
  4021d8:	432b      	orrs	r3, r5
  4021da:	688d      	ldr	r5, [r1, #8]
  4021dc:	4323      	orrs	r3, r4
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
				p_rx_clk_opt->ul_ckg |
				p_rx_clk_opt->ul_start_sel |
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  4021de:	694c      	ldr	r4, [r1, #20]
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  4021e0:	432b      	orrs	r3, r5
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
  4021e2:	690d      	ldr	r5, [r1, #16]
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  4021e4:	0421      	lsls	r1, r4, #16
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  4021e6:	433b      	orrs	r3, r7
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  4021e8:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  4021ec:	4333      	orrs	r3, r6
  4021ee:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  4021f2:	430b      	orrs	r3, r1
  4021f4:	6103      	str	r3, [r0, #16]
	}

	if (p_rx_data_frame == NULL) {
  4021f6:	b1ea      	cbz	r2, 402234 <ssc_set_receiver+0x6c>
		p_ssc->SSC_RFMR = 0;
	} else {
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  4021f8:	6954      	ldr	r4, [r2, #20]
  4021fa:	6853      	ldr	r3, [r2, #4]
  4021fc:	6991      	ldr	r1, [r2, #24]
  4021fe:	4323      	orrs	r3, r4
  402200:	6946      	ldr	r6, [r0, #20]
  402202:	6814      	ldr	r4, [r2, #0]
  402204:	430b      	orrs	r3, r1
				p_rx_data_frame->ul_msbf |
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  402206:	6891      	ldr	r1, [r2, #8]
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  402208:	f004 041f 	and.w	r4, r4, #31
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
  40220c:	6915      	ldr	r5, [r2, #16]
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  40220e:	4333      	orrs	r3, r6
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  402210:	68d2      	ldr	r2, [r2, #12]
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  402212:	0209      	lsls	r1, r1, #8
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  402214:	4323      	orrs	r3, r4
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  402216:	0412      	lsls	r2, r2, #16
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  402218:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  40221c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  402220:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  402224:	430b      	orrs	r3, r1
  402226:	4313      	orrs	r3, r2
				p_rx_data_frame->ul_fsos |
				p_rx_data_frame->ul_fsedge;
	}
}
  402228:	bcf0      	pop	{r4, r5, r6, r7}
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  40222a:	6143      	str	r3, [r0, #20]
}
  40222c:	4770      	bx	lr
		p_ssc->SSC_RCMR = 0;
  40222e:	6101      	str	r1, [r0, #16]
	if (p_rx_data_frame == NULL) {
  402230:	2a00      	cmp	r2, #0
  402232:	d1e1      	bne.n	4021f8 <ssc_set_receiver+0x30>
		p_ssc->SSC_RFMR = 0;
  402234:	6142      	str	r2, [r0, #20]
}
  402236:	bcf0      	pop	{r4, r5, r6, r7}
  402238:	4770      	bx	lr
  40223a:	bf00      	nop

0040223c <ssc_set_transmitter>:
 * \param p_tx_clk_opt Pointer to the transmitter clock configuration structure.
 * \param p_tx_data_frame Pointer to the transmitter data frame configuration structure.
 */
void ssc_set_transmitter(Ssc *p_ssc, clock_opt_t *p_tx_clk_opt,
		data_frame_opt_t *p_tx_data_frame)
{
  40223c:	b4f0      	push	{r4, r5, r6, r7}
	if (p_tx_clk_opt == NULL) {
  40223e:	2900      	cmp	r1, #0
  402240:	d02f      	beq.n	4022a2 <ssc_set_transmitter+0x66>
		p_ssc->SSC_TCMR = 0;
	} else {
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  402242:	6984      	ldr	r4, [r0, #24]
  402244:	68cf      	ldr	r7, [r1, #12]
  402246:	698e      	ldr	r6, [r1, #24]
  402248:	e891 0028 	ldmia.w	r1, {r3, r5}
  40224c:	432b      	orrs	r3, r5
  40224e:	688d      	ldr	r5, [r1, #8]
  402250:	4323      	orrs	r3, r4
				p_tx_clk_opt->ul_cko | p_tx_clk_opt->ul_cki |
				p_tx_clk_opt->ul_ckg |
				p_tx_clk_opt->ul_start_sel |
				SSC_TCMR_PERIOD(p_tx_clk_opt->ul_period) |
				SSC_TCMR_STTDLY(p_tx_clk_opt->ul_sttdly);
  402252:	694c      	ldr	r4, [r1, #20]
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  402254:	432b      	orrs	r3, r5
				SSC_TCMR_PERIOD(p_tx_clk_opt->ul_period) |
  402256:	690d      	ldr	r5, [r1, #16]
				SSC_TCMR_STTDLY(p_tx_clk_opt->ul_sttdly);
  402258:	0421      	lsls	r1, r4, #16
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  40225a:	433b      	orrs	r3, r7
				SSC_TCMR_STTDLY(p_tx_clk_opt->ul_sttdly);
  40225c:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  402260:	4333      	orrs	r3, r6
  402262:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  402266:	430b      	orrs	r3, r1
  402268:	6183      	str	r3, [r0, #24]
	}

	if (p_tx_data_frame == NULL) {
  40226a:	b1ea      	cbz	r2, 4022a8 <ssc_set_transmitter+0x6c>
		p_ssc->SSC_TFMR = 0;
	} else {
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  40226c:	6954      	ldr	r4, [r2, #20]
  40226e:	6853      	ldr	r3, [r2, #4]
  402270:	6991      	ldr	r1, [r2, #24]
  402272:	4323      	orrs	r3, r4
  402274:	69c6      	ldr	r6, [r0, #28]
  402276:	6814      	ldr	r4, [r2, #0]
  402278:	430b      	orrs	r3, r1
				p_tx_data_frame->ul_msbf |
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
  40227a:	6891      	ldr	r1, [r2, #8]
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  40227c:	f004 041f 	and.w	r4, r4, #31
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
				SSC_TFMR_FSLEN_EXT(p_tx_data_frame->ul_fslen_ext) |
  402280:	6915      	ldr	r5, [r2, #16]
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  402282:	4333      	orrs	r3, r6
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
  402284:	68d2      	ldr	r2, [r2, #12]
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
  402286:	0209      	lsls	r1, r1, #8
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  402288:	4323      	orrs	r3, r4
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
  40228a:	0412      	lsls	r2, r2, #16
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
  40228c:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  402290:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
  402294:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  402298:	430b      	orrs	r3, r1
  40229a:	4313      	orrs	r3, r2
				p_tx_data_frame->ul_fsos |
				p_tx_data_frame->ul_fsedge;
	}
}
  40229c:	bcf0      	pop	{r4, r5, r6, r7}
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  40229e:	61c3      	str	r3, [r0, #28]
}
  4022a0:	4770      	bx	lr
		p_ssc->SSC_TCMR = 0;
  4022a2:	6181      	str	r1, [r0, #24]
	if (p_tx_data_frame == NULL) {
  4022a4:	2a00      	cmp	r2, #0
  4022a6:	d1e1      	bne.n	40226c <ssc_set_transmitter+0x30>
		p_ssc->SSC_TFMR = 0;
  4022a8:	61c2      	str	r2, [r0, #28]
}
  4022aa:	bcf0      	pop	{r4, r5, r6, r7}
  4022ac:	4770      	bx	lr
  4022ae:	bf00      	nop

004022b0 <ssc_disable_interrupt>:
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void ssc_disable_interrupt(Ssc *p_ssc, uint32_t ul_sources)
{
	p_ssc->SSC_IDR = ul_sources;
  4022b0:	6481      	str	r1, [r0, #72]	; 0x48
  4022b2:	4770      	bx	lr

004022b4 <twihs_master_init>:
 * \param p_opt Options for initializing the TWIHS module (see \ref twihs_options_t).
 *
 * \return TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twihs_master_init(Twihs *p_twihs, const twihs_options_t *p_opt)
{
  4022b4:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t status = TWIHS_SUCCESS;

	/* Disable TWIHS interrupts */
	p_twihs->TWIHS_IDR = ~0UL;
  4022b6:	f04f 33ff 	mov.w	r3, #4294967295
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  4022ba:	2680      	movs	r6, #128	; 0x80
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  4022bc:	2204      	movs	r2, #4
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  4022be:	2508      	movs	r5, #8
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  4022c0:	2420      	movs	r4, #32
	p_twihs->TWIHS_IDR = ~0UL;
  4022c2:	6283      	str	r3, [r0, #40]	; 0x28
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4022c4:	4b2f      	ldr	r3, [pc, #188]	; (402384 <twihs_master_init+0xd0>)
	p_twihs->TWIHS_SR;
  4022c6:	6a07      	ldr	r7, [r0, #32]
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  4022c8:	6006      	str	r6, [r0, #0]
	p_twihs->TWIHS_RHR;
  4022ca:	6b06      	ldr	r6, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  4022cc:	6005      	str	r5, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  4022ce:	6004      	str	r4, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  4022d0:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  4022d2:	684a      	ldr	r2, [r1, #4]
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4022d4:	429a      	cmp	r2, r3
  4022d6:	d84d      	bhi.n	402374 <twihs_master_init+0xc0>
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4022d8:	4c2b      	ldr	r4, [pc, #172]	; (402388 <twihs_master_init+0xd4>)
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  4022da:	680b      	ldr	r3, [r1, #0]
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4022dc:	42a2      	cmp	r2, r4
  4022de:	d92e      	bls.n	40233e <twihs_master_init+0x8a>
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4022e0:	4c2a      	ldr	r4, [pc, #168]	; (40238c <twihs_master_init+0xd8>)
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4022e2:	492b      	ldr	r1, [pc, #172]	; (402390 <twihs_master_init+0xdc>)
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4022e4:	4414      	add	r4, r2
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4022e6:	fba1 2103 	umull	r2, r1, r1, r3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4022ea:	00a4      	lsls	r4, r4, #2
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4022ec:	0b89      	lsrs	r1, r1, #14
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4022ee:	fbb3 f3f4 	udiv	r3, r3, r4
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4022f2:	3903      	subs	r1, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4022f4:	3b03      	subs	r3, #3
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4022f6:	29ff      	cmp	r1, #255	; 0xff
  4022f8:	d940      	bls.n	40237c <twihs_master_init+0xc8>
  4022fa:	2200      	movs	r2, #0
  4022fc:	e000      	b.n	402300 <twihs_master_init+0x4c>
  4022fe:	b13c      	cbz	r4, 402310 <twihs_master_init+0x5c>
			ckdiv++;
  402300:	3201      	adds	r2, #1
			cldiv /= TWIHS_CLK_DIVIDER;
  402302:	0849      	lsrs	r1, r1, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  402304:	2a06      	cmp	r2, #6
  402306:	bf8c      	ite	hi
  402308:	2400      	movhi	r4, #0
  40230a:	2401      	movls	r4, #1
  40230c:	29ff      	cmp	r1, #255	; 0xff
  40230e:	d8f6      	bhi.n	4022fe <twihs_master_init+0x4a>
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  402310:	2bff      	cmp	r3, #255	; 0xff
  402312:	d907      	bls.n	402324 <twihs_master_init+0x70>
  402314:	b914      	cbnz	r4, 40231c <twihs_master_init+0x68>
  402316:	e005      	b.n	402324 <twihs_master_init+0x70>
  402318:	2a06      	cmp	r2, #6
  40231a:	d803      	bhi.n	402324 <twihs_master_init+0x70>
			chdiv /= TWIHS_CLK_DIVIDER;
  40231c:	085b      	lsrs	r3, r3, #1
			ckdiv++;
  40231e:	3201      	adds	r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  402320:	2bff      	cmp	r3, #255	; 0xff
  402322:	d8f9      	bhi.n	402318 <twihs_master_init+0x64>
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  402324:	021b      	lsls	r3, r3, #8
	uint32_t status = TWIHS_SUCCESS;
  402326:	2400      	movs	r4, #0
				TWIHS_CWGR_CKDIV(ckdiv);
  402328:	0412      	lsls	r2, r2, #16
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  40232a:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  40232c:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  402330:	b2c9      	uxtb	r1, r1
  402332:	4313      	orrs	r3, r2
  402334:	430b      	orrs	r3, r1
		p_twihs->TWIHS_CWGR =
  402336:	6103      	str	r3, [r0, #16]
}
  402338:	4620      	mov	r0, r4
  40233a:	bcf0      	pop	{r4, r5, r6, r7}
  40233c:	4770      	bx	lr
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  40233e:	0052      	lsls	r2, r2, #1
  402340:	fbb3 f3f2 	udiv	r3, r3, r2
  402344:	3b03      	subs	r3, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  402346:	2200      	movs	r2, #0
  402348:	2bff      	cmp	r3, #255	; 0xff
  40234a:	d802      	bhi.n	402352 <twihs_master_init+0x9e>
  40234c:	e008      	b.n	402360 <twihs_master_init+0xac>
  40234e:	2a06      	cmp	r2, #6
  402350:	d803      	bhi.n	40235a <twihs_master_init+0xa6>
			c_lh_div /= TWIHS_CLK_DIVIDER;
  402352:	085b      	lsrs	r3, r3, #1
			ckdiv++;
  402354:	3201      	adds	r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  402356:	2bff      	cmp	r3, #255	; 0xff
  402358:	d8f9      	bhi.n	40234e <twihs_master_init+0x9a>
  40235a:	0412      	lsls	r2, r2, #16
  40235c:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  402360:	0219      	lsls	r1, r3, #8
	uint32_t status = TWIHS_SUCCESS;
  402362:	2400      	movs	r4, #0
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  402364:	b2db      	uxtb	r3, r3
  402366:	b289      	uxth	r1, r1
  402368:	4313      	orrs	r3, r2
  40236a:	430b      	orrs	r3, r1
		p_twihs->TWIHS_CWGR =
  40236c:	6103      	str	r3, [r0, #16]
}
  40236e:	4620      	mov	r0, r4
  402370:	bcf0      	pop	{r4, r5, r6, r7}
  402372:	4770      	bx	lr
		status = TWIHS_INVALID_ARGUMENT;
  402374:	2401      	movs	r4, #1
}
  402376:	4620      	mov	r0, r4
  402378:	bcf0      	pop	{r4, r5, r6, r7}
  40237a:	4770      	bx	lr
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40237c:	2401      	movs	r4, #1
	uint32_t ckdiv = 0;
  40237e:	2200      	movs	r2, #0
  402380:	e7c6      	b.n	402310 <twihs_master_init+0x5c>
  402382:	bf00      	nop
  402384:	00061a80 	.word	0x00061a80
  402388:	0005dc00 	.word	0x0005dc00
  40238c:	3ffd1200 	.word	0x3ffd1200
  402390:	057619f1 	.word	0x057619f1

00402394 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  402394:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  402396:	2a00      	cmp	r2, #0
  402398:	d053      	beq.n	402442 <twihs_master_read+0xae>
{
  40239a:	b470      	push	{r4, r5, r6}
	p_twihs->TWIHS_MMR = 0;
  40239c:	2600      	movs	r6, #0
	uint8_t *buffer = p_packet->buffer;
  40239e:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  4023a0:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4023a2:	684b      	ldr	r3, [r1, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  4023a4:	7c0d      	ldrb	r5, [r1, #16]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4023a6:	021b      	lsls	r3, r3, #8
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  4023a8:	042d      	lsls	r5, r5, #16
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4023aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  4023ae:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  4023b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4023b6:	432b      	orrs	r3, r5
  4023b8:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  4023ba:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4023bc:	684b      	ldr	r3, [r1, #4]
	if (len == 0)
  4023be:	b99b      	cbnz	r3, 4023e8 <twihs_master_read+0x54>
		return 0;
  4023c0:	461d      	mov	r5, r3
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  4023c2:	2301      	movs	r3, #1
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4023c4:	60c5      	str	r5, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  4023c6:	6003      	str	r3, [r0, #0]
		status = p_twihs->TWIHS_SR;
  4023c8:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4023ca:	05d9      	lsls	r1, r3, #23
  4023cc:	d41f      	bmi.n	40240e <twihs_master_read+0x7a>
  4023ce:	2a01      	cmp	r2, #1
  4023d0:	d020      	beq.n	402414 <twihs_master_read+0x80>
  4023d2:	f247 5130 	movw	r1, #30000	; 0x7530
		if (!(status & TWIHS_SR_RXRDY)) {
  4023d6:	079e      	lsls	r6, r3, #30
  4023d8:	d412      	bmi.n	402400 <twihs_master_read+0x6c>
		status = p_twihs->TWIHS_SR;
  4023da:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4023dc:	05dd      	lsls	r5, r3, #23
  4023de:	d416      	bmi.n	40240e <twihs_master_read+0x7a>
		if (!timeout--) {
  4023e0:	3901      	subs	r1, #1
  4023e2:	d1f8      	bne.n	4023d6 <twihs_master_read+0x42>
			return TWIHS_ERROR_TIMEOUT;
  4023e4:	2009      	movs	r0, #9
  4023e6:	e02a      	b.n	40243e <twihs_master_read+0xaa>
	if (len > 1) {
  4023e8:	2b01      	cmp	r3, #1
	val = addr[0];
  4023ea:	780d      	ldrb	r5, [r1, #0]
	if (len > 1) {
  4023ec:	dde9      	ble.n	4023c2 <twihs_master_read+0x2e>
		val |= addr[1];
  4023ee:	784e      	ldrb	r6, [r1, #1]
	if (len > 2) {
  4023f0:	2b02      	cmp	r3, #2
		val |= addr[1];
  4023f2:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
	if (len > 2) {
  4023f6:	d0e4      	beq.n	4023c2 <twihs_master_read+0x2e>
		val |= addr[2];
  4023f8:	788b      	ldrb	r3, [r1, #2]
  4023fa:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
  4023fe:	e7e0      	b.n	4023c2 <twihs_master_read+0x2e>
		*buffer++ = p_twihs->TWIHS_RHR;
  402400:	6b03      	ldr	r3, [r0, #48]	; 0x30
		cnt--;
  402402:	3a01      	subs	r2, #1
		*buffer++ = p_twihs->TWIHS_RHR;
  402404:	f804 3b01 	strb.w	r3, [r4], #1
		status = p_twihs->TWIHS_SR;
  402408:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40240a:	05d9      	lsls	r1, r3, #23
  40240c:	d5df      	bpl.n	4023ce <twihs_master_read+0x3a>
			return TWIHS_RECEIVE_NACK;
  40240e:	2005      	movs	r0, #5
}
  402410:	bc70      	pop	{r4, r5, r6}
  402412:	4770      	bx	lr
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  402414:	2102      	movs	r1, #2
		if (!(status & TWIHS_SR_RXRDY)) {
  402416:	079d      	lsls	r5, r3, #30
		if (status & TWIHS_SR_NACK) {
  402418:	f247 5230 	movw	r2, #30000	; 0x7530
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  40241c:	6001      	str	r1, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  40241e:	d407      	bmi.n	402430 <twihs_master_read+0x9c>
		status = p_twihs->TWIHS_SR;
  402420:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  402422:	05de      	lsls	r6, r3, #23
  402424:	d4f3      	bmi.n	40240e <twihs_master_read+0x7a>
		if (!timeout--) {
  402426:	3a01      	subs	r2, #1
  402428:	d0dc      	beq.n	4023e4 <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  40242a:	079d      	lsls	r5, r3, #30
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  40242c:	6001      	str	r1, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  40242e:	d5f7      	bpl.n	402420 <twihs_master_read+0x8c>
		*buffer++ = p_twihs->TWIHS_RHR;
  402430:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402432:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  402434:	6a03      	ldr	r3, [r0, #32]
  402436:	07db      	lsls	r3, r3, #31
  402438:	d5fc      	bpl.n	402434 <twihs_master_read+0xa0>
	p_twihs->TWIHS_SR;
  40243a:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  40243c:	2000      	movs	r0, #0
}
  40243e:	bc70      	pop	{r4, r5, r6}
  402440:	4770      	bx	lr
		return TWIHS_INVALID_ARGUMENT;
  402442:	2001      	movs	r0, #1
  402444:	4770      	bx	lr
  402446:	bf00      	nop

00402448 <twihs_master_write>:
{
  402448:	4603      	mov	r3, r0
	uint32_t status, cnt = p_packet->length;
  40244a:	68c8      	ldr	r0, [r1, #12]
	if (cnt == 0) {
  40244c:	2800      	cmp	r0, #0
  40244e:	d034      	beq.n	4024ba <twihs_master_write+0x72>
{
  402450:	b470      	push	{r4, r5, r6}
	p_twihs->TWIHS_MMR = 0;
  402452:	2600      	movs	r6, #0
	uint8_t *buffer = p_packet->buffer;
  402454:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  402456:	605e      	str	r6, [r3, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  402458:	7c0a      	ldrb	r2, [r1, #16]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40245a:	684d      	ldr	r5, [r1, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  40245c:	0412      	lsls	r2, r2, #16
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40245e:	022d      	lsls	r5, r5, #8
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  402460:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  402464:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  402468:	432a      	orrs	r2, r5
  40246a:	605a      	str	r2, [r3, #4]
	p_twihs->TWIHS_IADR = 0;
  40246c:	60de      	str	r6, [r3, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  40246e:	684a      	ldr	r2, [r1, #4]
	if (len == 0)
  402470:	b98a      	cbnz	r2, 402496 <twihs_master_write+0x4e>
		return 0;
  402472:	4615      	mov	r5, r2
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  402474:	60dd      	str	r5, [r3, #12]
		status = p_twihs->TWIHS_SR;
  402476:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWIHS_SR_NACK) {
  402478:	05d6      	lsls	r6, r2, #23
  40247a:	d409      	bmi.n	402490 <twihs_master_write+0x48>
		if (!(status & TWIHS_SR_TXRDY)) {
  40247c:	0755      	lsls	r5, r2, #29
  40247e:	d5fa      	bpl.n	402476 <twihs_master_write+0x2e>
		p_twihs->TWIHS_THR = *buffer++;
  402480:	f814 2b01 	ldrb.w	r2, [r4], #1
	while (cnt > 0) {
  402484:	3801      	subs	r0, #1
		p_twihs->TWIHS_THR = *buffer++;
  402486:	635a      	str	r2, [r3, #52]	; 0x34
	while (cnt > 0) {
  402488:	d013      	beq.n	4024b2 <twihs_master_write+0x6a>
		status = p_twihs->TWIHS_SR;
  40248a:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWIHS_SR_NACK) {
  40248c:	05d6      	lsls	r6, r2, #23
  40248e:	d5f5      	bpl.n	40247c <twihs_master_write+0x34>
			return TWIHS_RECEIVE_NACK;
  402490:	2005      	movs	r0, #5
}
  402492:	bc70      	pop	{r4, r5, r6}
  402494:	4770      	bx	lr
	if (len > 1) {
  402496:	2a01      	cmp	r2, #1
	val = addr[0];
  402498:	780d      	ldrb	r5, [r1, #0]
	if (len > 1) {
  40249a:	ddeb      	ble.n	402474 <twihs_master_write+0x2c>
		val |= addr[1];
  40249c:	784e      	ldrb	r6, [r1, #1]
	if (len > 2) {
  40249e:	2a02      	cmp	r2, #2
		val |= addr[1];
  4024a0:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
	if (len > 2) {
  4024a4:	d0e6      	beq.n	402474 <twihs_master_write+0x2c>
		val |= addr[2];
  4024a6:	788a      	ldrb	r2, [r1, #2]
  4024a8:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
  4024ac:	e7e2      	b.n	402474 <twihs_master_write+0x2c>
		if (status & TWIHS_SR_TXRDY) {
  4024ae:	0751      	lsls	r1, r2, #29
  4024b0:	d405      	bmi.n	4024be <twihs_master_write+0x76>
		status = p_twihs->TWIHS_SR;
  4024b2:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWIHS_SR_NACK) {
  4024b4:	05d4      	lsls	r4, r2, #23
  4024b6:	d4eb      	bmi.n	402490 <twihs_master_write+0x48>
  4024b8:	e7f9      	b.n	4024ae <twihs_master_write+0x66>
		return TWIHS_INVALID_ARGUMENT;
  4024ba:	2001      	movs	r0, #1
  4024bc:	4770      	bx	lr
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4024be:	2202      	movs	r2, #2
  4024c0:	601a      	str	r2, [r3, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4024c2:	6a1a      	ldr	r2, [r3, #32]
  4024c4:	07d2      	lsls	r2, r2, #31
  4024c6:	d5fc      	bpl.n	4024c2 <twihs_master_write+0x7a>
}
  4024c8:	bc70      	pop	{r4, r5, r6}
  4024ca:	4770      	bx	lr

004024cc <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4024cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4024ce:	4603      	mov	r3, r0
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4024d0:	4c24      	ldr	r4, [pc, #144]	; (402564 <usart_init_rs232+0x98>)
	p_usart->US_MR = 0;
  4024d2:	2000      	movs	r0, #0
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4024d4:	f04f 0e88 	mov.w	lr, #136	; 0x88
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4024d8:	f8c3 40e4 	str.w	r4, [r3, #228]	; 0xe4
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4024dc:	2724      	movs	r7, #36	; 0x24
	p_usart->US_CR = US_CR_RSTSTA;
  4024de:	f44f 7680 	mov.w	r6, #256	; 0x100
	p_usart->US_CR = US_CR_RTSDIS;
  4024e2:	f44f 2500 	mov.w	r5, #524288	; 0x80000
	ul_reg_val = 0;
  4024e6:	4c20      	ldr	r4, [pc, #128]	; (402568 <usart_init_rs232+0x9c>)
	p_usart->US_MR = 0;
  4024e8:	6058      	str	r0, [r3, #4]
	ul_reg_val = 0;
  4024ea:	6020      	str	r0, [r4, #0]
	p_usart->US_RTOR = 0;
  4024ec:	6258      	str	r0, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4024ee:	6298      	str	r0, [r3, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4024f0:	f8c3 e000 	str.w	lr, [r3]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4024f4:	601f      	str	r7, [r3, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  4024f6:	601e      	str	r6, [r3, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  4024f8:	601d      	str	r5, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4024fa:	b361      	cbz	r1, 402556 <usart_init_rs232+0x8a>
  4024fc:	6808      	ldr	r0, [r1, #0]
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4024fe:	0105      	lsls	r5, r0, #4
  402500:	42aa      	cmp	r2, r5
  402502:	d31c      	bcc.n	40253e <usart_init_rs232+0x72>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  402504:	0868      	lsrs	r0, r5, #1
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  402506:	f64f 76fe 	movw	r6, #65534	; 0xfffe
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40250a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
  40250e:	fbb2 f2f5 	udiv	r2, r2, r5
	cd = cd_fp >> 3;
  402512:	08d5      	lsrs	r5, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  402514:	1e68      	subs	r0, r5, #1
  402516:	42b0      	cmp	r0, r6
  402518:	d81d      	bhi.n	402556 <usart_init_rs232+0x8a>
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40251a:	0412      	lsls	r2, r2, #16
	p_usart->US_MR |= ul_reg_val;
  40251c:	2000      	movs	r0, #0
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40251e:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  402522:	432a      	orrs	r2, r5
  402524:	621a      	str	r2, [r3, #32]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  402526:	684d      	ldr	r5, [r1, #4]
  402528:	688a      	ldr	r2, [r1, #8]
  40252a:	690f      	ldr	r7, [r1, #16]
  40252c:	432a      	orrs	r2, r5
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40252e:	68ce      	ldr	r6, [r1, #12]
	p_usart->US_MR |= ul_reg_val;
  402530:	6859      	ldr	r1, [r3, #4]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  402532:	433a      	orrs	r2, r7
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  402534:	4332      	orrs	r2, r6
	p_usart->US_MR |= ul_reg_val;
  402536:	4311      	orrs	r1, r2
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  402538:	6022      	str	r2, [r4, #0]
	p_usart->US_MR |= ul_reg_val;
  40253a:	6059      	str	r1, [r3, #4]
  40253c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40253e:	00c0      	lsls	r0, r0, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  402540:	f64f 76fe 	movw	r6, #65534	; 0xfffe
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  402544:	00d2      	lsls	r2, r2, #3
  402546:	eb02 0250 	add.w	r2, r2, r0, lsr #1
  40254a:	fbb2 f2f0 	udiv	r2, r2, r0
	cd = cd_fp >> 3;
  40254e:	08d5      	lsrs	r5, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  402550:	1e68      	subs	r0, r5, #1
  402552:	42b0      	cmp	r0, r6
  402554:	d901      	bls.n	40255a <usart_init_rs232+0x8e>
		return 1;
  402556:	2001      	movs	r0, #1
  402558:	bdf0      	pop	{r4, r5, r6, r7, pc}
		p_usart->US_MR |= US_MR_OVER;
  40255a:	6858      	ldr	r0, [r3, #4]
  40255c:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
  402560:	6058      	str	r0, [r3, #4]
  402562:	e7da      	b.n	40251a <usart_init_rs232+0x4e>
  402564:	55534100 	.word	0x55534100
  402568:	2041c2e4 	.word	0x2041c2e4

0040256c <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  40256c:	2340      	movs	r3, #64	; 0x40
  40256e:	6003      	str	r3, [r0, #0]
  402570:	4770      	bx	lr
  402572:	bf00      	nop

00402574 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  402574:	2310      	movs	r3, #16
  402576:	6003      	str	r3, [r0, #0]
  402578:	4770      	bx	lr
  40257a:	bf00      	nop

0040257c <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
  40257c:	6081      	str	r1, [r0, #8]
  40257e:	4770      	bx	lr

00402580 <usart_get_status>:
	return p_usart->US_CSR;
  402580:	6940      	ldr	r0, [r0, #20]
}
  402582:	4770      	bx	lr

00402584 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  402584:	6943      	ldr	r3, [r0, #20]
  402586:	07db      	lsls	r3, r3, #31
  402588:	d505      	bpl.n	402596 <usart_read+0x12>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40258a:	6983      	ldr	r3, [r0, #24]
	return 0;
  40258c:	2000      	movs	r0, #0
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40258e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  402592:	600b      	str	r3, [r1, #0]
	return 0;
  402594:	4770      	bx	lr
		return 1;
  402596:	2001      	movs	r0, #1
}
  402598:	4770      	bx	lr
  40259a:	bf00      	nop

0040259c <xdmac_configure_transfer>:
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  40259c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  4025a0:	6853      	ldr	r3, [r2, #4]
  4025a2:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  4025a4:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  4025a6:	6893      	ldr	r3, [r2, #8]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  4025a8:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  4025aa:	6813      	ldr	r3, [r2, #0]
  4025ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4025b0:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  4025b2:	6913      	ldr	r3, [r2, #16]
  4025b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4025b8:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  4025ba:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  4025bc:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  4025be:	6993      	ldr	r3, [r2, #24]
  4025c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4025c4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  4025c8:	69d3      	ldr	r3, [r2, #28]
  4025ca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4025ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  4025d2:	68d3      	ldr	r3, [r2, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  4025d4:	678b      	str	r3, [r1, #120]	; 0x78
  4025d6:	4770      	bx	lr

004025d8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4025d8:	b570      	push	{r4, r5, r6, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4025da:	4810      	ldr	r0, [pc, #64]	; (40261c <sysclk_init+0x44>)
  4025dc:	4d10      	ldr	r5, [pc, #64]	; (402620 <sysclk_init+0x48>)
  4025de:	47a8      	blx	r5
	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
		break;

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4025e0:	2020      	movs	r0, #32
  4025e2:	4b10      	ldr	r3, [pc, #64]	; (402624 <sysclk_init+0x4c>)
  4025e4:	4c10      	ldr	r4, [pc, #64]	; (402628 <sysclk_init+0x50>)
  4025e6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4025e8:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4025ea:	2800      	cmp	r0, #0
  4025ec:	d0fc      	beq.n	4025e8 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4025ee:	4b0f      	ldr	r3, [pc, #60]	; (40262c <sysclk_init+0x54>)
  4025f0:	4798      	blx	r3
  4025f2:	4c0f      	ldr	r4, [pc, #60]	; (402630 <sysclk_init+0x58>)
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4025f4:	4b0f      	ldr	r3, [pc, #60]	; (402634 <sysclk_init+0x5c>)
  4025f6:	4a10      	ldr	r2, [pc, #64]	; (402638 <sysclk_init+0x60>)
  4025f8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4025fa:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4025fc:	2800      	cmp	r0, #0
  4025fe:	d0fc      	beq.n	4025fa <sysclk_init+0x22>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  402600:	2002      	movs	r0, #2
  402602:	4b0e      	ldr	r3, [pc, #56]	; (40263c <sysclk_init+0x64>)
  402604:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  402606:	4b0e      	ldr	r3, [pc, #56]	; (402640 <sysclk_init+0x68>)
  402608:	2000      	movs	r0, #0
  40260a:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40260c:	4b0d      	ldr	r3, [pc, #52]	; (402644 <sysclk_init+0x6c>)
  40260e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  402610:	462b      	mov	r3, r5
  402612:	4802      	ldr	r0, [pc, #8]	; (40261c <sysclk_init+0x44>)

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  402614:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	system_init_flash(sysclk_get_cpu_hz());
  402618:	4718      	bx	r3
  40261a:	bf00      	nop
  40261c:	11e1a300 	.word	0x11e1a300
  402620:	00403391 	.word	0x00403391
  402624:	004030a9 	.word	0x004030a9
  402628:	004030f5 	.word	0x004030f5
  40262c:	00403105 	.word	0x00403105
  402630:	00403115 	.word	0x00403115
  402634:	400e0600 	.word	0x400e0600
  402638:	20183f01 	.word	0x20183f01
  40263c:	00403025 	.word	0x00403025
  402640:	00403055 	.word	0x00403055
  402644:	004032a9 	.word	0x004032a9

00402648 <board_init>:

void board_init(void)
{
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  402648:	4ba4      	ldr	r3, [pc, #656]	; (4028dc <board_init+0x294>)
  40264a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
{
  40264e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	WDT->WDT_MR = WDT_MR_WDDIS;
  402652:	605a      	str	r2, [r3, #4]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402654:	f3bf 8f5f 	dmb	sy
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  402658:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 402950 <board_init+0x308>
	dw_region_attr =
  40265c:	4fa0      	ldr	r7, [pc, #640]	; (4028e0 <board_init+0x298>)
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  40265e:	4ea1      	ldr	r6, [pc, #644]	; (4028e4 <board_init+0x29c>)
  402660:	4640      	mov	r0, r8
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  402662:	4da1      	ldr	r5, [pc, #644]	; (4028e8 <board_init+0x2a0>)
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  402664:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  402666:	ea40 0107 	orr.w	r1, r0, r7
  40266a:	2011      	movs	r0, #17
  40266c:	47a8      	blx	r5
		mpu_cal_mpu_region_size(IFLASH_END_ADDRESS - IFLASH_START_ADDRESS) |
  40266e:	489f      	ldr	r0, [pc, #636]	; (4028ec <board_init+0x2a4>)
  402670:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  402672:	499f      	ldr	r1, [pc, #636]	; (4028f0 <board_init+0x2a8>)
	dw_region_attr =
  402674:	4c9f      	ldr	r4, [pc, #636]	; (4028f4 <board_init+0x2ac>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  402676:	4301      	orrs	r1, r0
  402678:	489f      	ldr	r0, [pc, #636]	; (4028f8 <board_init+0x2b0>)
  40267a:	47a8      	blx	r5
		mpu_cal_mpu_region_size(DTCM_END_ADDRESS - DTCM_START_ADDRESS) |
  40267c:	4640      	mov	r0, r8
  40267e:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  402680:	ea40 0107 	orr.w	r1, r0, r7
  402684:	489d      	ldr	r0, [pc, #628]	; (4028fc <board_init+0x2b4>)
  402686:	47a8      	blx	r5
		mpu_cal_mpu_region_size(SRAM_FIRST_END_ADDRESS - SRAM_FIRST_START_ADDRESS)
  402688:	489d      	ldr	r0, [pc, #628]	; (402900 <board_init+0x2b8>)
  40268a:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40268c:	ea40 0104 	orr.w	r1, r0, r4
  402690:	489c      	ldr	r0, [pc, #624]	; (402904 <board_init+0x2bc>)
  402692:	47a8      	blx	r5
		mpu_cal_mpu_region_size(SRAM_SECOND_END_ADDRESS - SRAM_SECOND_START_ADDRESS) |
  402694:	489c      	ldr	r0, [pc, #624]	; (402908 <board_init+0x2c0>)
  402696:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  402698:	ea40 0104 	orr.w	r1, r0, r4
  40269c:	489b      	ldr	r0, [pc, #620]	; (40290c <board_init+0x2c4>)
  40269e:	47a8      	blx	r5
		mpu_cal_mpu_region_size(PERIPHERALS_END_ADDRESS - PERIPHERALS_START_ADDRESS)
  4026a0:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  4026a4:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4026a6:	499a      	ldr	r1, [pc, #616]	; (402910 <board_init+0x2c8>)
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  4026a8:	4c9a      	ldr	r4, [pc, #616]	; (402914 <board_init+0x2cc>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4026aa:	4301      	orrs	r1, r0
  4026ac:	489a      	ldr	r0, [pc, #616]	; (402918 <board_init+0x2d0>)
  4026ae:	47a8      	blx	r5
		mpu_cal_mpu_region_size(EXT_EBI_END_ADDRESS - EXT_EBI_START_ADDRESS) |
  4026b0:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  4026b4:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4026b6:	4999      	ldr	r1, [pc, #612]	; (40291c <board_init+0x2d4>)
  4026b8:	4301      	orrs	r1, r0
  4026ba:	4899      	ldr	r0, [pc, #612]	; (402920 <board_init+0x2d8>)
  4026bc:	47a8      	blx	r5
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  4026be:	6a63      	ldr	r3, [r4, #36]	; 0x24
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  4026c0:	2005      	movs	r0, #5
  4026c2:	4a98      	ldr	r2, [pc, #608]	; (402924 <board_init+0x2dc>)
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  4026c4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
  4026c8:	6263      	str	r3, [r4, #36]	; 0x24
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  4026ca:	4790      	blx	r2
  __ASM volatile ("dsb");
  4026cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4026d0:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb");
  4026d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4026d8:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4026dc:	f04f 0900 	mov.w	r9, #0
  4026e0:	f8c4 9250 	str.w	r9, [r4, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4026e4:	6963      	ldr	r3, [r4, #20]
  4026e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  4026ea:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb");
  4026ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4026f0:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4026f4:	4b8c      	ldr	r3, [pc, #560]	; (402928 <board_init+0x2e0>)
  4026f6:	498d      	ldr	r1, [pc, #564]	; (40292c <board_init+0x2e4>)
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4026f8:	4a8d      	ldr	r2, [pc, #564]	; (402930 <board_init+0x2e8>)
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4026fa:	6059      	str	r1, [r3, #4]
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4026fc:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  4026fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402702:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  402706:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  40270a:	f023 0301 	bic.w	r3, r3, #1
  40270e:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  402712:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
  402716:	f023 0301 	bic.w	r3, r3, #1
  40271a:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  __ASM volatile ("dsb");
  40271e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402722:	f3bf 8f6f 	isb	sy
  402726:	4c83      	ldr	r4, [pc, #524]	; (402934 <board_init+0x2ec>)
  402728:	200a      	movs	r0, #10
  40272a:	47a0      	blx	r4
  40272c:	200b      	movs	r0, #11
  40272e:	47a0      	blx	r4
  402730:	200c      	movs	r0, #12
  402732:	47a0      	blx	r4
  402734:	2010      	movs	r0, #16
  402736:	47a0      	blx	r4
  402738:	2011      	movs	r0, #17
  40273a:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40273c:	f44f 7500 	mov.w	r5, #512	; 0x200
  402740:	4c7d      	ldr	r4, [pc, #500]	; (402938 <board_init+0x2f0>)
  402742:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  402746:	4f7d      	ldr	r7, [pc, #500]	; (40293c <board_init+0x2f4>)
		base->PIO_PUDR = mask;
  402748:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40274c:	6123      	str	r3, [r4, #16]
		base->PIO_PUDR = mask;
  40274e:	2610      	movs	r6, #16
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402750:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_PUDR = mask;
  402754:	f04f 0e08 	mov.w	lr, #8
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402758:	6323      	str	r3, [r4, #48]	; 0x30
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  40275a:	4638      	mov	r0, r7
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40275c:	613d      	str	r5, [r7, #16]
  40275e:	464b      	mov	r3, r9
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402760:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
  402764:	f44f 5200 	mov.w	r2, #8192	; 0x2000
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402768:	633d      	str	r5, [r7, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40276a:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40276c:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  402770:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  402772:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  402776:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  402778:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  40277a:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40277e:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  402782:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 402954 <board_init+0x30c>
  402786:	f42c 7c00 	bic.w	ip, ip, #512	; 0x200
  40278a:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40278e:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  402792:	f42c 7c00 	bic.w	ip, ip, #512	; 0x200
  402796:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40279a:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40279e:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4027a2:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4027a6:	6621      	str	r1, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4027a8:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4027ac:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4027ae:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4027b0:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4027b4:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  4027b8:	f42c 1c00 	bic.w	ip, ip, #2097152	; 0x200000
  4027bc:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4027c0:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  4027c4:	f42c 1c00 	bic.w	ip, ip, #2097152	; 0x200000
  4027c8:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4027cc:	6061      	str	r1, [r4, #4]
  4027ce:	f8d8 1114 	ldr.w	r1, [r8, #276]	; 0x114
  4027d2:	ea41 0c06 	orr.w	ip, r1, r6
		base->PIO_PUDR = mask;
  4027d6:	495a      	ldr	r1, [pc, #360]	; (402940 <board_init+0x2f8>)
  4027d8:	f8c8 c114 	str.w	ip, [r8, #276]	; 0x114
  4027dc:	660e      	str	r6, [r1, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4027de:	f8c1 6090 	str.w	r6, [r1, #144]	; 0x90
		base->PIO_MDDR = mask;
  4027e2:	654e      	str	r6, [r1, #84]	; 0x54
		base->PIO_IFDR = mask;
  4027e4:	624e      	str	r6, [r1, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4027e6:	f8c1 6080 	str.w	r6, [r1, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4027ea:	f8d1 c070 	ldr.w	ip, [r1, #112]	; 0x70
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  4027ee:	f8df 8168 	ldr.w	r8, [pc, #360]	; 402958 <board_init+0x310>
  4027f2:	ea4c 0c06 	orr.w	ip, ip, r6
  4027f6:	f8c1 c070 	str.w	ip, [r1, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4027fa:	f8d1 c074 	ldr.w	ip, [r1, #116]	; 0x74
  4027fe:	ea4c 0c06 	orr.w	ip, ip, r6
  402802:	f8c1 c074 	str.w	ip, [r1, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402806:	604e      	str	r6, [r1, #4]
  402808:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
		base->PIO_PUDR = mask;
  40280c:	f8c4 e060 	str.w	lr, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402810:	f8c4 e090 	str.w	lr, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  402814:	f8c4 e054 	str.w	lr, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  402818:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40281c:	f8c4 e080 	str.w	lr, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402820:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  402824:	f02c 0c08 	bic.w	ip, ip, #8
  402828:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40282c:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  402830:	f02c 0c08 	bic.w	ip, ip, #8
  402834:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402838:	f8c4 e004 	str.w	lr, [r4, #4]
		base->PIO_PUDR = mask;
  40283c:	6626      	str	r6, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40283e:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  402842:	6566      	str	r6, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  402844:	6266      	str	r6, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402846:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40284a:	f8d4 e070 	ldr.w	lr, [r4, #112]	; 0x70
  40284e:	f02e 0e10 	bic.w	lr, lr, #16
  402852:	f8c4 e070 	str.w	lr, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402856:	f8d4 e074 	ldr.w	lr, [r4, #116]	; 0x74
  40285a:	f02e 0e10 	bic.w	lr, lr, #16
  40285e:	f8c4 e074 	str.w	lr, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402862:	6066      	str	r6, [r4, #4]
  402864:	47c0      	blx	r8
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  402866:	464b      	mov	r3, r9
  402868:	4638      	mov	r0, r7
  40286a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40286e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  402872:	47c0      	blx	r8
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  402874:	4638      	mov	r0, r7
  402876:	2301      	movs	r3, #1
  402878:	22ff      	movs	r2, #255	; 0xff
  40287a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40287e:	47c0      	blx	r8
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  402880:	2301      	movs	r3, #1
  402882:	223f      	movs	r2, #63	; 0x3f
  402884:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402888:	482e      	ldr	r0, [pc, #184]	; (402944 <board_init+0x2fc>)
  40288a:	47c0      	blx	r8
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  40288c:	4620      	mov	r0, r4
  40288e:	2301      	movs	r3, #1
  402890:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  402894:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402898:	47c0      	blx	r8
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  40289a:	4638      	mov	r0, r7
  40289c:	2301      	movs	r3, #1
  40289e:	f44f 7280 	mov.w	r2, #256	; 0x100
  4028a2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4028a6:	47c0      	blx	r8
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  4028a8:	4638      	mov	r0, r7
  4028aa:	2301      	movs	r3, #1
  4028ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4028b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4028b4:	47c0      	blx	r8
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  4028b6:	2301      	movs	r3, #1
  4028b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4028bc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4028c0:	4821      	ldr	r0, [pc, #132]	; (402948 <board_init+0x300>)
  4028c2:	47c0      	blx	r8
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  4028c4:	464b      	mov	r3, r9
  4028c6:	462a      	mov	r2, r5
  4028c8:	4638      	mov	r0, r7
  4028ca:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4028ce:	47c0      	blx	r8
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  4028d0:	4629      	mov	r1, r5
  4028d2:	4638      	mov	r0, r7
  4028d4:	4b1d      	ldr	r3, [pc, #116]	; (40294c <board_init+0x304>)
	pio_configure_pin(ISI_PCK_PIO, ISI_PCK_FLAGS);
	pio_configure_pin(ISI_PCK0_PIO, ISI_PCK0_FLAGS);
	pio_configure_pin(OV_PWD_GPIO, OV_PWD_FLAGS);
	pio_configure_pin(OV_RST_GPIO, OV_RST_FLAGS);
#endif
}
  4028d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  4028da:	4718      	bx	r3
  4028dc:	400e1850 	.word	0x400e1850
  4028e0:	01000001 	.word	0x01000001
  4028e4:	00402975 	.word	0x00402975
  4028e8:	00402969 	.word	0x00402969
  4028ec:	001fffff 	.word	0x001fffff
  4028f0:	06230001 	.word	0x06230001
  4028f4:	03230001 	.word	0x03230001
  4028f8:	00400012 	.word	0x00400012
  4028fc:	20000013 	.word	0x20000013
  402900:	0003ffff 	.word	0x0003ffff
  402904:	20400014 	.word	0x20400014
  402908:	0001ffff 	.word	0x0001ffff
  40290c:	20440015 	.word	0x20440015
  402910:	13010001 	.word	0x13010001
  402914:	e000ed00 	.word	0xe000ed00
  402918:	40000016 	.word	0x40000016
  40291c:	03000001 	.word	0x03000001
  402920:	60000017 	.word	0x60000017
  402924:	0040295d 	.word	0x0040295d
  402928:	400e0c00 	.word	0x400e0c00
  40292c:	5a00080c 	.word	0x5a00080c
  402930:	5a00070c 	.word	0x5a00070c
  402934:	00403125 	.word	0x00403125
  402938:	400e0e00 	.word	0x400e0e00
  40293c:	400e1200 	.word	0x400e1200
  402940:	400e1000 	.word	0x400e1000
  402944:	400e1600 	.word	0x400e1600
  402948:	400e1400 	.word	0x400e1400
  40294c:	00402999 	.word	0x00402999
  402950:	003fffff 	.word	0x003fffff
  402954:	40088000 	.word	0x40088000
  402958:	004029a1 	.word	0x004029a1

0040295c <mpu_enable>:
 *
 * \param dwMPUEnable  Enable/Disable the memory region.
 */
void mpu_enable(uint32_t dw_mpu_enable)
{
	MPU->CTRL = dw_mpu_enable ;
  40295c:	4b01      	ldr	r3, [pc, #4]	; (402964 <mpu_enable+0x8>)
  40295e:	6058      	str	r0, [r3, #4]
  402960:	4770      	bx	lr
  402962:	bf00      	nop
  402964:	e000ed90 	.word	0xe000ed90

00402968 <mpu_set_region>:
 * \param dwRegionBaseAddr  Memory region base address.
 * \param dwRegionAttr  Memory region attributes.
 */
void mpu_set_region(uint32_t dw_region_base_addr, uint32_t dw_region_attr)
{
	MPU->RBAR = dw_region_base_addr;
  402968:	4b01      	ldr	r3, [pc, #4]	; (402970 <mpu_set_region+0x8>)
  40296a:	60d8      	str	r0, [r3, #12]
	MPU->RASR = dw_region_attr;
  40296c:	6119      	str	r1, [r3, #16]
  40296e:	4770      	bx	lr
  402970:	e000ed90 	.word	0xe000ed90

00402974 <mpu_cal_mpu_region_size>:
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;

	while( dwReturnValue < 31 ) {
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  402974:	2820      	cmp	r0, #32
  402976:	d90d      	bls.n	402994 <mpu_cal_mpu_region_size+0x20>
  402978:	2240      	movs	r2, #64	; 0x40
  40297a:	2305      	movs	r3, #5
  40297c:	e002      	b.n	402984 <mpu_cal_mpu_region_size+0x10>
			break;
		} else {
			dwReturnValue++;
  40297e:	3301      	adds	r3, #1
	while( dwReturnValue < 31 ) {
  402980:	2b1f      	cmp	r3, #31
  402982:	d005      	beq.n	402990 <mpu_cal_mpu_region_size+0x1c>
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  402984:	4290      	cmp	r0, r2
		}
		dwRegionSize <<= 1;
  402986:	ea4f 0242 	mov.w	r2, r2, lsl #1
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  40298a:	d8f8      	bhi.n	40297e <mpu_cal_mpu_region_size+0xa>
  40298c:	0058      	lsls	r0, r3, #1
  40298e:	4770      	bx	lr
  402990:	203e      	movs	r0, #62	; 0x3e
  402992:	4770      	bx	lr
  402994:	2008      	movs	r0, #8
	}

	return ( dwReturnValue << 1 );
}
  402996:	4770      	bx	lr

00402998 <pio_set>:
  402998:	6301      	str	r1, [r0, #48]	; 0x30
  40299a:	4770      	bx	lr

0040299c <pio_clear>:
  40299c:	6341      	str	r1, [r0, #52]	; 0x34
  40299e:	4770      	bx	lr

004029a0 <pio_configure>:
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
	/* Configure pins */
	switch (ul_type) {
  4029a0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
{
  4029a4:	b430      	push	{r4, r5}
	switch (ul_type) {
  4029a6:	d03b      	beq.n	402a20 <pio_configure+0x80>
  4029a8:	d931      	bls.n	402a0e <pio_configure+0x6e>
  4029aa:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4029ae:	d01b      	beq.n	4029e8 <pio_configure+0x48>
  4029b0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4029b4:	d018      	beq.n	4029e8 <pio_configure+0x48>
  4029b6:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4029ba:	d003      	beq.n	4029c4 <pio_configure+0x24>
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
		break;

	default:
		return 0;
  4029bc:	2300      	movs	r3, #0
	}

	return 1;
}
  4029be:	bc30      	pop	{r4, r5}
  4029c0:	4618      	mov	r0, r3
  4029c2:	4770      	bx	lr
	if (ul_pull_up_enable) {
  4029c4:	07dd      	lsls	r5, r3, #31
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4029c6:	6442      	str	r2, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4029c8:	d448      	bmi.n	402a5c <pio_configure+0xbc>
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4029ca:	f013 0f0a 	tst.w	r3, #10
		p_pio->PIO_PUDR = ul_mask;
  4029ce:	6602      	str	r2, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4029d0:	d048      	beq.n	402a64 <pio_configure+0xc4>
	if (ul_attribute & PIO_DEGLITCH) {
  4029d2:	079c      	lsls	r4, r3, #30
		p_pio->PIO_IFER = ul_mask;
  4029d4:	6202      	str	r2, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4029d6:	d548      	bpl.n	402a6a <pio_configure+0xca>
		p_pio->PIO_IFSCDR = ul_mask;
  4029d8:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
	return 1;
  4029dc:	2301      	movs	r3, #1
	p_pio->PIO_ODR = ul_mask;
  4029de:	6142      	str	r2, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4029e0:	6002      	str	r2, [r0, #0]
}
  4029e2:	4618      	mov	r0, r3
  4029e4:	bc30      	pop	{r4, r5}
  4029e6:	4770      	bx	lr
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  4029e8:	f003 0404 	and.w	r4, r3, #4
	if (ul_pull_up_enable) {
  4029ec:	07db      	lsls	r3, r3, #31
	p_pio->PIO_IDR = ul_mask;
  4029ee:	6442      	str	r2, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4029f0:	d52f      	bpl.n	402a52 <pio_configure+0xb2>
		p_pio->PIO_PUER = ul_mask;
  4029f2:	6642      	str	r2, [r0, #100]	; 0x64
	if (ul_multidrive_enable) {
  4029f4:	2c00      	cmp	r4, #0
  4029f6:	d02f      	beq.n	402a58 <pio_configure+0xb8>
		p_pio->PIO_MDER = ul_mask;
  4029f8:	6502      	str	r2, [r0, #80]	; 0x50
	if (ul_default_level) {
  4029fa:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4029fe:	d04e      	beq.n	402a9e <pio_configure+0xfe>
		p_pio->PIO_CODR = ul_mask;
  402a00:	6342      	str	r2, [r0, #52]	; 0x34
	return 1;
  402a02:	2301      	movs	r3, #1
	p_pio->PIO_OER = ul_mask;
  402a04:	6102      	str	r2, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  402a06:	6002      	str	r2, [r0, #0]
}
  402a08:	4618      	mov	r0, r3
  402a0a:	bc30      	pop	{r4, r5}
  402a0c:	4770      	bx	lr
	switch (ul_type) {
  402a0e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402a12:	d005      	beq.n	402a20 <pio_configure+0x80>
  402a14:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  402a18:	d002      	beq.n	402a20 <pio_configure+0x80>
  402a1a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  402a1e:	d1cd      	bne.n	4029bc <pio_configure+0x1c>
	switch (ul_type) {
  402a20:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
	p_pio->PIO_IDR = ul_mask;
  402a24:	6442      	str	r2, [r0, #68]	; 0x44
	switch (ul_type) {
  402a26:	d03c      	beq.n	402aa2 <pio_configure+0x102>
  402a28:	d924      	bls.n	402a74 <pio_configure+0xd4>
  402a2a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  402a2e:	d042      	beq.n	402ab6 <pio_configure+0x116>
  402a30:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  402a34:	d105      	bne.n	402a42 <pio_configure+0xa2>
		ul_sr = p_pio->PIO_ABCDSR[0];
  402a36:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402a38:	4311      	orrs	r1, r2
  402a3a:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402a3c:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402a3e:	4311      	orrs	r1, r2
  402a40:	6741      	str	r1, [r0, #116]	; 0x74
	if (ul_pull_up_enable) {
  402a42:	07db      	lsls	r3, r3, #31
	p_pio->PIO_PDR = ul_mask;
  402a44:	6042      	str	r2, [r0, #4]
	if (ul_pull_up_enable) {
  402a46:	d525      	bpl.n	402a94 <pio_configure+0xf4>
	return 1;
  402a48:	2301      	movs	r3, #1
		p_pio->PIO_PUER = ul_mask;
  402a4a:	6642      	str	r2, [r0, #100]	; 0x64
}
  402a4c:	4618      	mov	r0, r3
  402a4e:	bc30      	pop	{r4, r5}
  402a50:	4770      	bx	lr
		p_pio->PIO_PUDR = ul_mask;
  402a52:	6602      	str	r2, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  402a54:	2c00      	cmp	r4, #0
  402a56:	d1cf      	bne.n	4029f8 <pio_configure+0x58>
		p_pio->PIO_MDDR = ul_mask;
  402a58:	6542      	str	r2, [r0, #84]	; 0x54
  402a5a:	e7ce      	b.n	4029fa <pio_configure+0x5a>
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402a5c:	f013 0f0a 	tst.w	r3, #10
		p_pio->PIO_PUER = ul_mask;
  402a60:	6642      	str	r2, [r0, #100]	; 0x64
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402a62:	d1b6      	bne.n	4029d2 <pio_configure+0x32>
	if (ul_attribute & PIO_DEGLITCH) {
  402a64:	079c      	lsls	r4, r3, #30
		p_pio->PIO_IFDR = ul_mask;
  402a66:	6242      	str	r2, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  402a68:	d4b6      	bmi.n	4029d8 <pio_configure+0x38>
		if (ul_attribute & PIO_DEBOUNCE) {
  402a6a:	0719      	lsls	r1, r3, #28
  402a6c:	d5b6      	bpl.n	4029dc <pio_configure+0x3c>
			p_pio->PIO_IFSCER = ul_mask;
  402a6e:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  402a72:	e7b3      	b.n	4029dc <pio_configure+0x3c>
	switch (ul_type) {
  402a74:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  402a78:	d1e3      	bne.n	402a42 <pio_configure+0xa2>
		ul_sr = p_pio->PIO_ABCDSR[0];
  402a7a:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402a7c:	43d1      	mvns	r1, r2
  402a7e:	6f05      	ldr	r5, [r0, #112]	; 0x70
  402a80:	402c      	ands	r4, r5
  402a82:	460d      	mov	r5, r1
  402a84:	400c      	ands	r4, r1
  402a86:	6704      	str	r4, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402a88:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402a8a:	6f44      	ldr	r4, [r0, #116]	; 0x74
  402a8c:	4021      	ands	r1, r4
  402a8e:	4029      	ands	r1, r5
  402a90:	6741      	str	r1, [r0, #116]	; 0x74
  402a92:	e7d6      	b.n	402a42 <pio_configure+0xa2>
	return 1;
  402a94:	2301      	movs	r3, #1
		p_pio->PIO_PUDR = ul_mask;
  402a96:	6602      	str	r2, [r0, #96]	; 0x60
}
  402a98:	4618      	mov	r0, r3
  402a9a:	bc30      	pop	{r4, r5}
  402a9c:	4770      	bx	lr
		p_pio->PIO_SODR = ul_mask;
  402a9e:	6302      	str	r2, [r0, #48]	; 0x30
  402aa0:	e7af      	b.n	402a02 <pio_configure+0x62>
		ul_sr = p_pio->PIO_ABCDSR[0];
  402aa2:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402aa4:	4311      	orrs	r1, r2
  402aa6:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402aa8:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402aaa:	6f44      	ldr	r4, [r0, #116]	; 0x74
  402aac:	4021      	ands	r1, r4
  402aae:	ea21 0102 	bic.w	r1, r1, r2
  402ab2:	6741      	str	r1, [r0, #116]	; 0x74
  402ab4:	e7c5      	b.n	402a42 <pio_configure+0xa2>
		ul_sr = p_pio->PIO_ABCDSR[0];
  402ab6:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402ab8:	6f04      	ldr	r4, [r0, #112]	; 0x70
  402aba:	4021      	ands	r1, r4
  402abc:	ea21 0102 	bic.w	r1, r1, r2
  402ac0:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402ac2:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402ac4:	4311      	orrs	r1, r2
  402ac6:	6741      	str	r1, [r0, #116]	; 0x74
  402ac8:	e7bb      	b.n	402a42 <pio_configure+0xa2>
  402aca:	bf00      	nop

00402acc <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  402acc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  402ace:	4770      	bx	lr

00402ad0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  402ad0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  402ad2:	4770      	bx	lr

00402ad4 <pio_configure_pin>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402ad4:	4b53      	ldr	r3, [pc, #332]	; (402c24 <pio_configure_pin+0x150>)
	switch (ul_flags & PIO_TYPE_Msk) {
  402ad6:	f001 42f0 	and.w	r2, r1, #2013265920	; 0x78000000
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402ada:	eb03 1350 	add.w	r3, r3, r0, lsr #5
	switch (ul_flags & PIO_TYPE_Msk) {
  402ade:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
{
  402ae2:	b470      	push	{r4, r5, r6}
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402ae4:	ea4f 2343 	mov.w	r3, r3, lsl #9
	switch (ul_flags & PIO_TYPE_Msk) {
  402ae8:	d06d      	beq.n	402bc6 <pio_configure_pin+0xf2>
  402aea:	d80b      	bhi.n	402b04 <pio_configure_pin+0x30>
  402aec:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
  402af0:	d027      	beq.n	402b42 <pio_configure_pin+0x6e>
  402af2:	f1b2 5fc0 	cmp.w	r2, #402653184	; 0x18000000
  402af6:	d052      	beq.n	402b9e <pio_configure_pin+0xca>
  402af8:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
  402afc:	d038      	beq.n	402b70 <pio_configure_pin+0x9c>
		return 0;
  402afe:	2000      	movs	r0, #0
}
  402b00:	bc70      	pop	{r4, r5, r6}
  402b02:	4770      	bx	lr
	switch (ul_flags & PIO_TYPE_Msk) {
  402b04:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
  402b08:	d066      	beq.n	402bd8 <pio_configure_pin+0x104>
  402b0a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  402b0e:	d063      	beq.n	402bd8 <pio_configure_pin+0x104>
  402b10:	f1b2 5f20 	cmp.w	r2, #671088640	; 0x28000000
  402b14:	d1f3      	bne.n	402afe <pio_configure_pin+0x2a>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  402b16:	f000 001f 	and.w	r0, r0, #31
  402b1a:	2201      	movs	r2, #1
	if (ul_pull_up_enable) {
  402b1c:	07cd      	lsls	r5, r1, #31
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  402b1e:	fa02 f200 	lsl.w	r2, r2, r0
	p_pio->PIO_IDR = ul_mask;
  402b22:	645a      	str	r2, [r3, #68]	; 0x44
	if (ul_pull_up_enable) {
  402b24:	d573      	bpl.n	402c0e <pio_configure_pin+0x13a>
		p_pio->PIO_PUER = ul_mask;
  402b26:	665a      	str	r2, [r3, #100]	; 0x64
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402b28:	f011 0f0a 	tst.w	r1, #10
  402b2c:	d06d      	beq.n	402c0a <pio_configure_pin+0x136>
		p_pio->PIO_IFER = ul_mask;
  402b2e:	621a      	str	r2, [r3, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  402b30:	078c      	lsls	r4, r1, #30
  402b32:	d56e      	bpl.n	402c12 <pio_configure_pin+0x13e>
		p_pio->PIO_IFSCDR = ul_mask;
  402b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  402b38:	615a      	str	r2, [r3, #20]
	return 1;
  402b3a:	2001      	movs	r0, #1
	p_pio->PIO_PER = ul_mask;
  402b3c:	601a      	str	r2, [r3, #0]
}
  402b3e:	bc70      	pop	{r4, r5, r6}
  402b40:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  402b42:	f000 021f 	and.w	r2, r0, #31
  402b46:	2001      	movs	r0, #1
	if (ul_pull_up_enable) {
  402b48:	07c9      	lsls	r1, r1, #31
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  402b4a:	fa00 f202 	lsl.w	r2, r0, r2
	p_pio->PIO_IDR = ul_mask;
  402b4e:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABCDSR[0];
  402b50:	6f1c      	ldr	r4, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402b52:	ea44 0402 	orr.w	r4, r4, r2
  402b56:	671c      	str	r4, [r3, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402b58:	6f5c      	ldr	r4, [r3, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402b5a:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  402b5c:	ea04 0405 	and.w	r4, r4, r5
  402b60:	ea24 0402 	bic.w	r4, r4, r2
  402b64:	675c      	str	r4, [r3, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  402b66:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
  402b68:	d516      	bpl.n	402b98 <pio_configure_pin+0xc4>
		p_pio->PIO_PUER = ul_mask;
  402b6a:	665a      	str	r2, [r3, #100]	; 0x64
}
  402b6c:	bc70      	pop	{r4, r5, r6}
  402b6e:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  402b70:	f000 021f 	and.w	r2, r0, #31
  402b74:	2001      	movs	r0, #1
  402b76:	fa00 f202 	lsl.w	r2, r0, r2
	p_pio->PIO_IDR = ul_mask;
  402b7a:	645a      	str	r2, [r3, #68]	; 0x44
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402b7c:	43d6      	mvns	r6, r2
		ul_sr = p_pio->PIO_ABCDSR[0];
  402b7e:	6f1d      	ldr	r5, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402b80:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  402b82:	4025      	ands	r5, r4
  402b84:	4035      	ands	r5, r6
  402b86:	671d      	str	r5, [r3, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402b88:	6f5c      	ldr	r4, [r3, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402b8a:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  402b8c:	402c      	ands	r4, r5
  402b8e:	4034      	ands	r4, r6
  402b90:	675c      	str	r4, [r3, #116]	; 0x74
	if (ul_pull_up_enable) {
  402b92:	07cc      	lsls	r4, r1, #31
	p_pio->PIO_PDR = ul_mask;
  402b94:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
  402b96:	d4e8      	bmi.n	402b6a <pio_configure_pin+0x96>
		p_pio->PIO_PUDR = ul_mask;
  402b98:	661a      	str	r2, [r3, #96]	; 0x60
}
  402b9a:	bc70      	pop	{r4, r5, r6}
  402b9c:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  402b9e:	f000 021f 	and.w	r2, r0, #31
  402ba2:	2001      	movs	r0, #1
  402ba4:	fa00 f202 	lsl.w	r2, r0, r2
	p_pio->PIO_IDR = ul_mask;
  402ba8:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABCDSR[0];
  402baa:	6f1c      	ldr	r4, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402bac:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  402bae:	402c      	ands	r4, r5
  402bb0:	ea24 0402 	bic.w	r4, r4, r2
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402bb4:	671c      	str	r4, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
  402bb6:	07ce      	lsls	r6, r1, #31
		ul_sr = p_pio->PIO_ABCDSR[1];
  402bb8:	6f5c      	ldr	r4, [r3, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402bba:	ea44 0402 	orr.w	r4, r4, r2
  402bbe:	675c      	str	r4, [r3, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  402bc0:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
  402bc2:	d5e9      	bpl.n	402b98 <pio_configure_pin+0xc4>
  402bc4:	e7d1      	b.n	402b6a <pio_configure_pin+0x96>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  402bc6:	f000 021f 	and.w	r2, r0, #31
  402bca:	2001      	movs	r0, #1
  402bcc:	fa00 f202 	lsl.w	r2, r0, r2
	p_pio->PIO_IDR = ul_mask;
  402bd0:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABCDSR[0];
  402bd2:	6f1c      	ldr	r4, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402bd4:	4314      	orrs	r4, r2
  402bd6:	e7ed      	b.n	402bb4 <pio_configure_pin+0xe0>
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  402bd8:	f000 001f 	and.w	r0, r0, #31
  402bdc:	2201      	movs	r2, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  402bde:	f001 5460 	and.w	r4, r1, #939524096	; 0x38000000
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  402be2:	f001 0504 	and.w	r5, r1, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  402be6:	4082      	lsls	r2, r0
	if (ul_pull_up_enable) {
  402be8:	07c9      	lsls	r1, r1, #31
	p_pio->PIO_IDR = ul_mask;
  402bea:	645a      	str	r2, [r3, #68]	; 0x44
	if (ul_pull_up_enable) {
  402bec:	d50b      	bpl.n	402c06 <pio_configure_pin+0x132>
		p_pio->PIO_PUER = ul_mask;
  402bee:	665a      	str	r2, [r3, #100]	; 0x64
	if (ul_multidrive_enable) {
  402bf0:	b1a5      	cbz	r5, 402c1c <pio_configure_pin+0x148>
		p_pio->PIO_MDER = ul_mask;
  402bf2:	651a      	str	r2, [r3, #80]	; 0x50
	if (ul_default_level) {
  402bf4:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
  402bf8:	d012      	beq.n	402c20 <pio_configure_pin+0x14c>
		p_pio->PIO_CODR = ul_mask;
  402bfa:	635a      	str	r2, [r3, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  402bfc:	611a      	str	r2, [r3, #16]
	return 1;
  402bfe:	2001      	movs	r0, #1
	p_pio->PIO_PER = ul_mask;
  402c00:	601a      	str	r2, [r3, #0]
}
  402c02:	bc70      	pop	{r4, r5, r6}
  402c04:	4770      	bx	lr
		p_pio->PIO_PUDR = ul_mask;
  402c06:	661a      	str	r2, [r3, #96]	; 0x60
  402c08:	e7f2      	b.n	402bf0 <pio_configure_pin+0x11c>
		p_pio->PIO_IFDR = ul_mask;
  402c0a:	625a      	str	r2, [r3, #36]	; 0x24
  402c0c:	e790      	b.n	402b30 <pio_configure_pin+0x5c>
		p_pio->PIO_PUDR = ul_mask;
  402c0e:	661a      	str	r2, [r3, #96]	; 0x60
  402c10:	e78a      	b.n	402b28 <pio_configure_pin+0x54>
		if (ul_attribute & PIO_DEBOUNCE) {
  402c12:	0708      	lsls	r0, r1, #28
  402c14:	d590      	bpl.n	402b38 <pio_configure_pin+0x64>
			p_pio->PIO_IFSCER = ul_mask;
  402c16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  402c1a:	e78d      	b.n	402b38 <pio_configure_pin+0x64>
		p_pio->PIO_MDDR = ul_mask;
  402c1c:	655a      	str	r2, [r3, #84]	; 0x54
  402c1e:	e7e9      	b.n	402bf4 <pio_configure_pin+0x120>
		p_pio->PIO_SODR = ul_mask;
  402c20:	631a      	str	r2, [r3, #48]	; 0x30
  402c22:	e7eb      	b.n	402bfc <pio_configure_pin+0x128>
  402c24:	00200707 	.word	0x00200707

00402c28 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  402c28:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  402c2a:	4b2e      	ldr	r3, [pc, #184]	; (402ce4 <PIOA_Handler+0xbc>)
  402c2c:	482e      	ldr	r0, [pc, #184]	; (402ce8 <PIOA_Handler+0xc0>)
  402c2e:	4798      	blx	r3
  402c30:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  402c32:	4b2e      	ldr	r3, [pc, #184]	; (402cec <PIOA_Handler+0xc4>)
  402c34:	482c      	ldr	r0, [pc, #176]	; (402ce8 <PIOA_Handler+0xc0>)
  402c36:	4798      	blx	r3
	if (status != 0) {
  402c38:	4005      	ands	r5, r0
  402c3a:	d015      	beq.n	402c68 <PIOA_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  402c3c:	4c2c      	ldr	r4, [pc, #176]	; (402cf0 <PIOA_Handler+0xc8>)
  402c3e:	6820      	ldr	r0, [r4, #0]
  402c40:	280a      	cmp	r0, #10
  402c42:	d019      	beq.n	402c78 <PIOA_Handler+0x50>
  402c44:	6920      	ldr	r0, [r4, #16]
  402c46:	280a      	cmp	r0, #10
  402c48:	d01f      	beq.n	402c8a <PIOA_Handler+0x62>
  402c4a:	6a20      	ldr	r0, [r4, #32]
  402c4c:	280a      	cmp	r0, #10
  402c4e:	d025      	beq.n	402c9c <PIOA_Handler+0x74>
  402c50:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402c52:	280a      	cmp	r0, #10
  402c54:	d02b      	beq.n	402cae <PIOA_Handler+0x86>
  402c56:	6c20      	ldr	r0, [r4, #64]	; 0x40
  402c58:	280a      	cmp	r0, #10
  402c5a:	d031      	beq.n	402cc0 <PIOA_Handler+0x98>
  402c5c:	6d20      	ldr	r0, [r4, #80]	; 0x50
  402c5e:	280a      	cmp	r0, #10
  402c60:	d037      	beq.n	402cd2 <PIOA_Handler+0xaa>
  402c62:	6e20      	ldr	r0, [r4, #96]	; 0x60
  402c64:	280a      	cmp	r0, #10
  402c66:	d000      	beq.n	402c6a <PIOA_Handler+0x42>
  402c68:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402c6a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  402c6c:	4229      	tst	r1, r5
  402c6e:	d0fb      	beq.n	402c68 <PIOA_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402c70:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	pio_handler_process(PIOA, ID_PIOA);
}
  402c72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402c76:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402c78:	6861      	ldr	r1, [r4, #4]
  402c7a:	420d      	tst	r5, r1
  402c7c:	d0e2      	beq.n	402c44 <PIOA_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402c7e:	68e3      	ldr	r3, [r4, #12]
  402c80:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402c82:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  402c84:	439d      	bics	r5, r3
  402c86:	d0ef      	beq.n	402c68 <PIOA_Handler+0x40>
  402c88:	e7dc      	b.n	402c44 <PIOA_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402c8a:	6961      	ldr	r1, [r4, #20]
  402c8c:	4229      	tst	r1, r5
  402c8e:	d0dc      	beq.n	402c4a <PIOA_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402c90:	69e3      	ldr	r3, [r4, #28]
  402c92:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402c94:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  402c96:	439d      	bics	r5, r3
  402c98:	d0e6      	beq.n	402c68 <PIOA_Handler+0x40>
  402c9a:	e7d6      	b.n	402c4a <PIOA_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402c9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  402c9e:	4229      	tst	r1, r5
  402ca0:	d0d6      	beq.n	402c50 <PIOA_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402ca2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402ca4:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402ca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  402ca8:	439d      	bics	r5, r3
  402caa:	d0dd      	beq.n	402c68 <PIOA_Handler+0x40>
  402cac:	e7d0      	b.n	402c50 <PIOA_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402cae:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402cb0:	4229      	tst	r1, r5
  402cb2:	d0d0      	beq.n	402c56 <PIOA_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402cb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402cb6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402cb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  402cba:	439d      	bics	r5, r3
  402cbc:	d0d4      	beq.n	402c68 <PIOA_Handler+0x40>
  402cbe:	e7ca      	b.n	402c56 <PIOA_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402cc0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  402cc2:	4229      	tst	r1, r5
  402cc4:	d0ca      	beq.n	402c5c <PIOA_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402cc6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  402cc8:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402cca:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  402ccc:	439d      	bics	r5, r3
  402cce:	d0cb      	beq.n	402c68 <PIOA_Handler+0x40>
  402cd0:	e7c4      	b.n	402c5c <PIOA_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402cd2:	6d61      	ldr	r1, [r4, #84]	; 0x54
  402cd4:	4229      	tst	r1, r5
  402cd6:	d0c4      	beq.n	402c62 <PIOA_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402cd8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  402cda:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402cdc:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  402cde:	439d      	bics	r5, r3
  402ce0:	d0c2      	beq.n	402c68 <PIOA_Handler+0x40>
  402ce2:	e7be      	b.n	402c62 <PIOA_Handler+0x3a>
  402ce4:	00402acd 	.word	0x00402acd
  402ce8:	400e0e00 	.word	0x400e0e00
  402cec:	00402ad1 	.word	0x00402ad1
  402cf0:	2041c2e8 	.word	0x2041c2e8

00402cf4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  402cf4:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  402cf6:	4b2e      	ldr	r3, [pc, #184]	; (402db0 <PIOB_Handler+0xbc>)
  402cf8:	482e      	ldr	r0, [pc, #184]	; (402db4 <PIOB_Handler+0xc0>)
  402cfa:	4798      	blx	r3
  402cfc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  402cfe:	4b2e      	ldr	r3, [pc, #184]	; (402db8 <PIOB_Handler+0xc4>)
  402d00:	482c      	ldr	r0, [pc, #176]	; (402db4 <PIOB_Handler+0xc0>)
  402d02:	4798      	blx	r3
	if (status != 0) {
  402d04:	4005      	ands	r5, r0
  402d06:	d015      	beq.n	402d34 <PIOB_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  402d08:	4c2c      	ldr	r4, [pc, #176]	; (402dbc <PIOB_Handler+0xc8>)
  402d0a:	6820      	ldr	r0, [r4, #0]
  402d0c:	280b      	cmp	r0, #11
  402d0e:	d019      	beq.n	402d44 <PIOB_Handler+0x50>
  402d10:	6920      	ldr	r0, [r4, #16]
  402d12:	280b      	cmp	r0, #11
  402d14:	d01f      	beq.n	402d56 <PIOB_Handler+0x62>
  402d16:	6a20      	ldr	r0, [r4, #32]
  402d18:	280b      	cmp	r0, #11
  402d1a:	d025      	beq.n	402d68 <PIOB_Handler+0x74>
  402d1c:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402d1e:	280b      	cmp	r0, #11
  402d20:	d02b      	beq.n	402d7a <PIOB_Handler+0x86>
  402d22:	6c20      	ldr	r0, [r4, #64]	; 0x40
  402d24:	280b      	cmp	r0, #11
  402d26:	d031      	beq.n	402d8c <PIOB_Handler+0x98>
  402d28:	6d20      	ldr	r0, [r4, #80]	; 0x50
  402d2a:	280b      	cmp	r0, #11
  402d2c:	d037      	beq.n	402d9e <PIOB_Handler+0xaa>
  402d2e:	6e20      	ldr	r0, [r4, #96]	; 0x60
  402d30:	280b      	cmp	r0, #11
  402d32:	d000      	beq.n	402d36 <PIOB_Handler+0x42>
  402d34:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402d36:	6e61      	ldr	r1, [r4, #100]	; 0x64
  402d38:	4229      	tst	r1, r5
  402d3a:	d0fb      	beq.n	402d34 <PIOB_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402d3c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    pio_handler_process(PIOB, ID_PIOB);
}
  402d3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402d42:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402d44:	6861      	ldr	r1, [r4, #4]
  402d46:	420d      	tst	r5, r1
  402d48:	d0e2      	beq.n	402d10 <PIOB_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402d4a:	68e3      	ldr	r3, [r4, #12]
  402d4c:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402d4e:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  402d50:	439d      	bics	r5, r3
  402d52:	d0ef      	beq.n	402d34 <PIOB_Handler+0x40>
  402d54:	e7dc      	b.n	402d10 <PIOB_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402d56:	6961      	ldr	r1, [r4, #20]
  402d58:	4229      	tst	r1, r5
  402d5a:	d0dc      	beq.n	402d16 <PIOB_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402d5c:	69e3      	ldr	r3, [r4, #28]
  402d5e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402d60:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  402d62:	439d      	bics	r5, r3
  402d64:	d0e6      	beq.n	402d34 <PIOB_Handler+0x40>
  402d66:	e7d6      	b.n	402d16 <PIOB_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402d68:	6a61      	ldr	r1, [r4, #36]	; 0x24
  402d6a:	4229      	tst	r1, r5
  402d6c:	d0d6      	beq.n	402d1c <PIOB_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402d6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402d70:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402d72:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  402d74:	439d      	bics	r5, r3
  402d76:	d0dd      	beq.n	402d34 <PIOB_Handler+0x40>
  402d78:	e7d0      	b.n	402d1c <PIOB_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402d7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402d7c:	4229      	tst	r1, r5
  402d7e:	d0d0      	beq.n	402d22 <PIOB_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402d80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402d82:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402d84:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  402d86:	439d      	bics	r5, r3
  402d88:	d0d4      	beq.n	402d34 <PIOB_Handler+0x40>
  402d8a:	e7ca      	b.n	402d22 <PIOB_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402d8c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  402d8e:	4229      	tst	r1, r5
  402d90:	d0ca      	beq.n	402d28 <PIOB_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402d92:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  402d94:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402d96:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  402d98:	439d      	bics	r5, r3
  402d9a:	d0cb      	beq.n	402d34 <PIOB_Handler+0x40>
  402d9c:	e7c4      	b.n	402d28 <PIOB_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402d9e:	6d61      	ldr	r1, [r4, #84]	; 0x54
  402da0:	4229      	tst	r1, r5
  402da2:	d0c4      	beq.n	402d2e <PIOB_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402da4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  402da6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402da8:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  402daa:	439d      	bics	r5, r3
  402dac:	d0c2      	beq.n	402d34 <PIOB_Handler+0x40>
  402dae:	e7be      	b.n	402d2e <PIOB_Handler+0x3a>
  402db0:	00402acd 	.word	0x00402acd
  402db4:	400e1000 	.word	0x400e1000
  402db8:	00402ad1 	.word	0x00402ad1
  402dbc:	2041c2e8 	.word	0x2041c2e8

00402dc0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  402dc0:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  402dc2:	4b2e      	ldr	r3, [pc, #184]	; (402e7c <PIOC_Handler+0xbc>)
  402dc4:	482e      	ldr	r0, [pc, #184]	; (402e80 <PIOC_Handler+0xc0>)
  402dc6:	4798      	blx	r3
  402dc8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  402dca:	4b2e      	ldr	r3, [pc, #184]	; (402e84 <PIOC_Handler+0xc4>)
  402dcc:	482c      	ldr	r0, [pc, #176]	; (402e80 <PIOC_Handler+0xc0>)
  402dce:	4798      	blx	r3
	if (status != 0) {
  402dd0:	4005      	ands	r5, r0
  402dd2:	d015      	beq.n	402e00 <PIOC_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  402dd4:	4c2c      	ldr	r4, [pc, #176]	; (402e88 <PIOC_Handler+0xc8>)
  402dd6:	6820      	ldr	r0, [r4, #0]
  402dd8:	280c      	cmp	r0, #12
  402dda:	d019      	beq.n	402e10 <PIOC_Handler+0x50>
  402ddc:	6920      	ldr	r0, [r4, #16]
  402dde:	280c      	cmp	r0, #12
  402de0:	d01f      	beq.n	402e22 <PIOC_Handler+0x62>
  402de2:	6a20      	ldr	r0, [r4, #32]
  402de4:	280c      	cmp	r0, #12
  402de6:	d025      	beq.n	402e34 <PIOC_Handler+0x74>
  402de8:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402dea:	280c      	cmp	r0, #12
  402dec:	d02b      	beq.n	402e46 <PIOC_Handler+0x86>
  402dee:	6c20      	ldr	r0, [r4, #64]	; 0x40
  402df0:	280c      	cmp	r0, #12
  402df2:	d031      	beq.n	402e58 <PIOC_Handler+0x98>
  402df4:	6d20      	ldr	r0, [r4, #80]	; 0x50
  402df6:	280c      	cmp	r0, #12
  402df8:	d037      	beq.n	402e6a <PIOC_Handler+0xaa>
  402dfa:	6e20      	ldr	r0, [r4, #96]	; 0x60
  402dfc:	280c      	cmp	r0, #12
  402dfe:	d000      	beq.n	402e02 <PIOC_Handler+0x42>
  402e00:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402e02:	6e61      	ldr	r1, [r4, #100]	; 0x64
  402e04:	4229      	tst	r1, r5
  402e06:	d0fb      	beq.n	402e00 <PIOC_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402e08:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	pio_handler_process(PIOC, ID_PIOC);
}
  402e0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402e0e:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402e10:	6861      	ldr	r1, [r4, #4]
  402e12:	420d      	tst	r5, r1
  402e14:	d0e2      	beq.n	402ddc <PIOC_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402e16:	68e3      	ldr	r3, [r4, #12]
  402e18:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402e1a:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  402e1c:	439d      	bics	r5, r3
  402e1e:	d0ef      	beq.n	402e00 <PIOC_Handler+0x40>
  402e20:	e7dc      	b.n	402ddc <PIOC_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402e22:	6961      	ldr	r1, [r4, #20]
  402e24:	4229      	tst	r1, r5
  402e26:	d0dc      	beq.n	402de2 <PIOC_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402e28:	69e3      	ldr	r3, [r4, #28]
  402e2a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402e2c:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  402e2e:	439d      	bics	r5, r3
  402e30:	d0e6      	beq.n	402e00 <PIOC_Handler+0x40>
  402e32:	e7d6      	b.n	402de2 <PIOC_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402e34:	6a61      	ldr	r1, [r4, #36]	; 0x24
  402e36:	4229      	tst	r1, r5
  402e38:	d0d6      	beq.n	402de8 <PIOC_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402e3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402e3c:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402e3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  402e40:	439d      	bics	r5, r3
  402e42:	d0dd      	beq.n	402e00 <PIOC_Handler+0x40>
  402e44:	e7d0      	b.n	402de8 <PIOC_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402e46:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402e48:	4229      	tst	r1, r5
  402e4a:	d0d0      	beq.n	402dee <PIOC_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402e4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402e4e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402e50:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  402e52:	439d      	bics	r5, r3
  402e54:	d0d4      	beq.n	402e00 <PIOC_Handler+0x40>
  402e56:	e7ca      	b.n	402dee <PIOC_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402e58:	6c61      	ldr	r1, [r4, #68]	; 0x44
  402e5a:	4229      	tst	r1, r5
  402e5c:	d0ca      	beq.n	402df4 <PIOC_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402e5e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  402e60:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402e62:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  402e64:	439d      	bics	r5, r3
  402e66:	d0cb      	beq.n	402e00 <PIOC_Handler+0x40>
  402e68:	e7c4      	b.n	402df4 <PIOC_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402e6a:	6d61      	ldr	r1, [r4, #84]	; 0x54
  402e6c:	4229      	tst	r1, r5
  402e6e:	d0c4      	beq.n	402dfa <PIOC_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402e70:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  402e72:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402e74:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  402e76:	439d      	bics	r5, r3
  402e78:	d0c2      	beq.n	402e00 <PIOC_Handler+0x40>
  402e7a:	e7be      	b.n	402dfa <PIOC_Handler+0x3a>
  402e7c:	00402acd 	.word	0x00402acd
  402e80:	400e1200 	.word	0x400e1200
  402e84:	00402ad1 	.word	0x00402ad1
  402e88:	2041c2e8 	.word	0x2041c2e8

00402e8c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  402e8c:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  402e8e:	4b2e      	ldr	r3, [pc, #184]	; (402f48 <PIOD_Handler+0xbc>)
  402e90:	482e      	ldr	r0, [pc, #184]	; (402f4c <PIOD_Handler+0xc0>)
  402e92:	4798      	blx	r3
  402e94:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  402e96:	4b2e      	ldr	r3, [pc, #184]	; (402f50 <PIOD_Handler+0xc4>)
  402e98:	482c      	ldr	r0, [pc, #176]	; (402f4c <PIOD_Handler+0xc0>)
  402e9a:	4798      	blx	r3
	if (status != 0) {
  402e9c:	4005      	ands	r5, r0
  402e9e:	d015      	beq.n	402ecc <PIOD_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  402ea0:	4c2c      	ldr	r4, [pc, #176]	; (402f54 <PIOD_Handler+0xc8>)
  402ea2:	6820      	ldr	r0, [r4, #0]
  402ea4:	2810      	cmp	r0, #16
  402ea6:	d019      	beq.n	402edc <PIOD_Handler+0x50>
  402ea8:	6920      	ldr	r0, [r4, #16]
  402eaa:	2810      	cmp	r0, #16
  402eac:	d01f      	beq.n	402eee <PIOD_Handler+0x62>
  402eae:	6a20      	ldr	r0, [r4, #32]
  402eb0:	2810      	cmp	r0, #16
  402eb2:	d025      	beq.n	402f00 <PIOD_Handler+0x74>
  402eb4:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402eb6:	2810      	cmp	r0, #16
  402eb8:	d02b      	beq.n	402f12 <PIOD_Handler+0x86>
  402eba:	6c20      	ldr	r0, [r4, #64]	; 0x40
  402ebc:	2810      	cmp	r0, #16
  402ebe:	d031      	beq.n	402f24 <PIOD_Handler+0x98>
  402ec0:	6d20      	ldr	r0, [r4, #80]	; 0x50
  402ec2:	2810      	cmp	r0, #16
  402ec4:	d037      	beq.n	402f36 <PIOD_Handler+0xaa>
  402ec6:	6e20      	ldr	r0, [r4, #96]	; 0x60
  402ec8:	2810      	cmp	r0, #16
  402eca:	d000      	beq.n	402ece <PIOD_Handler+0x42>
  402ecc:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402ece:	6e61      	ldr	r1, [r4, #100]	; 0x64
  402ed0:	4229      	tst	r1, r5
  402ed2:	d0fb      	beq.n	402ecc <PIOD_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402ed4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	pio_handler_process(PIOD, ID_PIOD);
}
  402ed6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402eda:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402edc:	6861      	ldr	r1, [r4, #4]
  402ede:	420d      	tst	r5, r1
  402ee0:	d0e2      	beq.n	402ea8 <PIOD_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402ee2:	68e3      	ldr	r3, [r4, #12]
  402ee4:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402ee6:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  402ee8:	439d      	bics	r5, r3
  402eea:	d0ef      	beq.n	402ecc <PIOD_Handler+0x40>
  402eec:	e7dc      	b.n	402ea8 <PIOD_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402eee:	6961      	ldr	r1, [r4, #20]
  402ef0:	4229      	tst	r1, r5
  402ef2:	d0dc      	beq.n	402eae <PIOD_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402ef4:	69e3      	ldr	r3, [r4, #28]
  402ef6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402ef8:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  402efa:	439d      	bics	r5, r3
  402efc:	d0e6      	beq.n	402ecc <PIOD_Handler+0x40>
  402efe:	e7d6      	b.n	402eae <PIOD_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402f00:	6a61      	ldr	r1, [r4, #36]	; 0x24
  402f02:	4229      	tst	r1, r5
  402f04:	d0d6      	beq.n	402eb4 <PIOD_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402f06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402f08:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402f0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  402f0c:	439d      	bics	r5, r3
  402f0e:	d0dd      	beq.n	402ecc <PIOD_Handler+0x40>
  402f10:	e7d0      	b.n	402eb4 <PIOD_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402f12:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402f14:	4229      	tst	r1, r5
  402f16:	d0d0      	beq.n	402eba <PIOD_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402f18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402f1a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402f1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  402f1e:	439d      	bics	r5, r3
  402f20:	d0d4      	beq.n	402ecc <PIOD_Handler+0x40>
  402f22:	e7ca      	b.n	402eba <PIOD_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402f24:	6c61      	ldr	r1, [r4, #68]	; 0x44
  402f26:	4229      	tst	r1, r5
  402f28:	d0ca      	beq.n	402ec0 <PIOD_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402f2a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  402f2c:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402f2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  402f30:	439d      	bics	r5, r3
  402f32:	d0cb      	beq.n	402ecc <PIOD_Handler+0x40>
  402f34:	e7c4      	b.n	402ec0 <PIOD_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402f36:	6d61      	ldr	r1, [r4, #84]	; 0x54
  402f38:	4229      	tst	r1, r5
  402f3a:	d0c4      	beq.n	402ec6 <PIOD_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402f3c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  402f3e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402f40:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  402f42:	439d      	bics	r5, r3
  402f44:	d0c2      	beq.n	402ecc <PIOD_Handler+0x40>
  402f46:	e7be      	b.n	402ec6 <PIOD_Handler+0x3a>
  402f48:	00402acd 	.word	0x00402acd
  402f4c:	400e1400 	.word	0x400e1400
  402f50:	00402ad1 	.word	0x00402ad1
  402f54:	2041c2e8 	.word	0x2041c2e8

00402f58 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  402f58:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  402f5a:	4b2e      	ldr	r3, [pc, #184]	; (403014 <PIOE_Handler+0xbc>)
  402f5c:	482e      	ldr	r0, [pc, #184]	; (403018 <PIOE_Handler+0xc0>)
  402f5e:	4798      	blx	r3
  402f60:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  402f62:	4b2e      	ldr	r3, [pc, #184]	; (40301c <PIOE_Handler+0xc4>)
  402f64:	482c      	ldr	r0, [pc, #176]	; (403018 <PIOE_Handler+0xc0>)
  402f66:	4798      	blx	r3
	if (status != 0) {
  402f68:	4005      	ands	r5, r0
  402f6a:	d015      	beq.n	402f98 <PIOE_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  402f6c:	4c2c      	ldr	r4, [pc, #176]	; (403020 <PIOE_Handler+0xc8>)
  402f6e:	6820      	ldr	r0, [r4, #0]
  402f70:	2811      	cmp	r0, #17
  402f72:	d019      	beq.n	402fa8 <PIOE_Handler+0x50>
  402f74:	6920      	ldr	r0, [r4, #16]
  402f76:	2811      	cmp	r0, #17
  402f78:	d01f      	beq.n	402fba <PIOE_Handler+0x62>
  402f7a:	6a20      	ldr	r0, [r4, #32]
  402f7c:	2811      	cmp	r0, #17
  402f7e:	d025      	beq.n	402fcc <PIOE_Handler+0x74>
  402f80:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402f82:	2811      	cmp	r0, #17
  402f84:	d02b      	beq.n	402fde <PIOE_Handler+0x86>
  402f86:	6c20      	ldr	r0, [r4, #64]	; 0x40
  402f88:	2811      	cmp	r0, #17
  402f8a:	d031      	beq.n	402ff0 <PIOE_Handler+0x98>
  402f8c:	6d20      	ldr	r0, [r4, #80]	; 0x50
  402f8e:	2811      	cmp	r0, #17
  402f90:	d037      	beq.n	403002 <PIOE_Handler+0xaa>
  402f92:	6e20      	ldr	r0, [r4, #96]	; 0x60
  402f94:	2811      	cmp	r0, #17
  402f96:	d000      	beq.n	402f9a <PIOE_Handler+0x42>
  402f98:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402f9a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  402f9c:	4229      	tst	r1, r5
  402f9e:	d0fb      	beq.n	402f98 <PIOE_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402fa0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	pio_handler_process(PIOE, ID_PIOE);
}
  402fa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402fa6:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402fa8:	6861      	ldr	r1, [r4, #4]
  402faa:	420d      	tst	r5, r1
  402fac:	d0e2      	beq.n	402f74 <PIOE_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402fae:	68e3      	ldr	r3, [r4, #12]
  402fb0:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402fb2:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  402fb4:	439d      	bics	r5, r3
  402fb6:	d0ef      	beq.n	402f98 <PIOE_Handler+0x40>
  402fb8:	e7dc      	b.n	402f74 <PIOE_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402fba:	6961      	ldr	r1, [r4, #20]
  402fbc:	4229      	tst	r1, r5
  402fbe:	d0dc      	beq.n	402f7a <PIOE_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402fc0:	69e3      	ldr	r3, [r4, #28]
  402fc2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402fc4:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  402fc6:	439d      	bics	r5, r3
  402fc8:	d0e6      	beq.n	402f98 <PIOE_Handler+0x40>
  402fca:	e7d6      	b.n	402f7a <PIOE_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402fcc:	6a61      	ldr	r1, [r4, #36]	; 0x24
  402fce:	4229      	tst	r1, r5
  402fd0:	d0d6      	beq.n	402f80 <PIOE_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402fd2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402fd4:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  402fd8:	439d      	bics	r5, r3
  402fda:	d0dd      	beq.n	402f98 <PIOE_Handler+0x40>
  402fdc:	e7d0      	b.n	402f80 <PIOE_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402fde:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402fe0:	4229      	tst	r1, r5
  402fe2:	d0d0      	beq.n	402f86 <PIOE_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402fe4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402fe6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402fe8:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  402fea:	439d      	bics	r5, r3
  402fec:	d0d4      	beq.n	402f98 <PIOE_Handler+0x40>
  402fee:	e7ca      	b.n	402f86 <PIOE_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402ff0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  402ff2:	4229      	tst	r1, r5
  402ff4:	d0ca      	beq.n	402f8c <PIOE_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402ff6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  402ff8:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402ffa:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  402ffc:	439d      	bics	r5, r3
  402ffe:	d0cb      	beq.n	402f98 <PIOE_Handler+0x40>
  403000:	e7c4      	b.n	402f8c <PIOE_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  403002:	6d61      	ldr	r1, [r4, #84]	; 0x54
  403004:	4229      	tst	r1, r5
  403006:	d0c4      	beq.n	402f92 <PIOE_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  403008:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  40300a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40300c:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  40300e:	439d      	bics	r5, r3
  403010:	d0c2      	beq.n	402f98 <PIOE_Handler+0x40>
  403012:	e7be      	b.n	402f92 <PIOE_Handler+0x3a>
  403014:	00402acd 	.word	0x00402acd
  403018:	400e1600 	.word	0x400e1600
  40301c:	00402ad1 	.word	0x00402ad1
  403020:	2041c2e8 	.word	0x2041c2e8

00403024 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  403024:	3802      	subs	r0, #2
  403026:	2802      	cmp	r0, #2
  403028:	d80d      	bhi.n	403046 <pmc_mck_set_division+0x22>
  40302a:	4b08      	ldr	r3, [pc, #32]	; (40304c <pmc_mck_set_division+0x28>)
  40302c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  403030:	4907      	ldr	r1, [pc, #28]	; (403050 <pmc_mck_set_division+0x2c>)
  403032:	6b0b      	ldr	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  403034:	460a      	mov	r2, r1
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  403036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40303a:	4303      	orrs	r3, r0
	PMC->PMC_MCKR =
  40303c:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40303e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403040:	071b      	lsls	r3, r3, #28
  403042:	d5fc      	bpl.n	40303e <pmc_mck_set_division+0x1a>
}
  403044:	4770      	bx	lr
{
  403046:	2000      	movs	r0, #0
  403048:	e7f2      	b.n	403030 <pmc_mck_set_division+0xc>
  40304a:	bf00      	nop
  40304c:	0040808c 	.word	0x0040808c
  403050:	400e0600 	.word	0x400e0600

00403054 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  403054:	4913      	ldr	r1, [pc, #76]	; (4030a4 <pmc_switch_mck_to_pllack+0x50>)
  403056:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  403058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40305c:	4318      	orrs	r0, r3
  40305e:	6308      	str	r0, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403060:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  403062:	0718      	lsls	r0, r3, #28
  403064:	d407      	bmi.n	403076 <pmc_switch_mck_to_pllack+0x22>
  403066:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40306a:	e001      	b.n	403070 <pmc_switch_mck_to_pllack+0x1c>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40306c:	3b01      	subs	r3, #1
  40306e:	d016      	beq.n	40309e <pmc_switch_mck_to_pllack+0x4a>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403070:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  403072:	0712      	lsls	r2, r2, #28
  403074:	d5fa      	bpl.n	40306c <pmc_switch_mck_to_pllack+0x18>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  403076:	490b      	ldr	r1, [pc, #44]	; (4030a4 <pmc_switch_mck_to_pllack+0x50>)
  403078:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40307a:	f023 0303 	bic.w	r3, r3, #3
  40307e:	f043 0302 	orr.w	r3, r3, #2
  403082:	630b      	str	r3, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403084:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  403086:	0718      	lsls	r0, r3, #28
  403088:	d407      	bmi.n	40309a <pmc_switch_mck_to_pllack+0x46>
  40308a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40308e:	e001      	b.n	403094 <pmc_switch_mck_to_pllack+0x40>
			--ul_timeout) {
		if (ul_timeout == 0) {
  403090:	3b01      	subs	r3, #1
  403092:	d004      	beq.n	40309e <pmc_switch_mck_to_pllack+0x4a>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403094:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  403096:	0712      	lsls	r2, r2, #28
  403098:	d5fa      	bpl.n	403090 <pmc_switch_mck_to_pllack+0x3c>
			return 1;
		}
	}

	return 0;
  40309a:	2000      	movs	r0, #0
}
  40309c:	4770      	bx	lr
			return 1;
  40309e:	2001      	movs	r0, #1
  4030a0:	4770      	bx	lr
  4030a2:	bf00      	nop
  4030a4:	400e0600 	.word	0x400e0600

004030a8 <pmc_switch_mainck_to_fastrc>:
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4030a8:	4a0e      	ldr	r2, [pc, #56]	; (4030e4 <pmc_switch_mainck_to_fastrc+0x3c>)
{
  4030aa:	b410      	push	{r4}
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4030ac:	4c0e      	ldr	r4, [pc, #56]	; (4030e8 <pmc_switch_mainck_to_fastrc+0x40>)

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4030ae:	4611      	mov	r1, r2
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4030b0:	6a13      	ldr	r3, [r2, #32]
  4030b2:	431c      	orrs	r4, r3
  4030b4:	6214      	str	r4, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4030b6:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  4030b8:	039a      	lsls	r2, r3, #14
  4030ba:	d5fc      	bpl.n	4030b6 <pmc_switch_mainck_to_fastrc+0xe>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4030bc:	6a0c      	ldr	r4, [r1, #32]
  4030be:	4b0b      	ldr	r3, [pc, #44]	; (4030ec <pmc_switch_mainck_to_fastrc+0x44>)
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4030c0:	4a08      	ldr	r2, [pc, #32]	; (4030e4 <pmc_switch_mainck_to_fastrc+0x3c>)
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4030c2:	4023      	ands	r3, r4
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4030c4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4030c8:	4318      	orrs	r0, r3
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4030ca:	6208      	str	r0, [r1, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4030cc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4030ce:	039b      	lsls	r3, r3, #14
  4030d0:	d5fc      	bpl.n	4030cc <pmc_switch_mainck_to_fastrc+0x24>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4030d2:	6a11      	ldr	r1, [r2, #32]
  4030d4:	4b06      	ldr	r3, [pc, #24]	; (4030f0 <pmc_switch_mainck_to_fastrc+0x48>)
  4030d6:	400b      	ands	r3, r1
  4030d8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4030dc:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4030de:	f85d 4b04 	ldr.w	r4, [sp], #4
  4030e2:	4770      	bx	lr
  4030e4:	400e0600 	.word	0x400e0600
  4030e8:	00370008 	.word	0x00370008
  4030ec:	ffc8ff8f 	.word	0xffc8ff8f
  4030f0:	fec8ffff 	.word	0xfec8ffff

004030f4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4030f4:	4b02      	ldr	r3, [pc, #8]	; (403100 <pmc_osc_is_ready_mainck+0xc>)
  4030f6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4030f8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4030fc:	4770      	bx	lr
  4030fe:	bf00      	nop
  403100:	400e0600 	.word	0x400e0600

00403104 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  403104:	4b02      	ldr	r3, [pc, #8]	; (403110 <pmc_disable_pllack+0xc>)
  403106:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40310a:	629a      	str	r2, [r3, #40]	; 0x28
  40310c:	4770      	bx	lr
  40310e:	bf00      	nop
  403110:	400e0600 	.word	0x400e0600

00403114 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  403114:	4b02      	ldr	r3, [pc, #8]	; (403120 <pmc_is_locked_pllack+0xc>)
  403116:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  403118:	f000 0002 	and.w	r0, r0, #2
  40311c:	4770      	bx	lr
  40311e:	bf00      	nop
  403120:	400e0600 	.word	0x400e0600

00403124 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  403124:	283f      	cmp	r0, #63	; 0x3f
  403126:	d81a      	bhi.n	40315e <pmc_enable_periph_clk+0x3a>
		return 1;
	}

	if (ul_id < 32) {
  403128:	281f      	cmp	r0, #31
  40312a:	d80a      	bhi.n	403142 <pmc_enable_periph_clk+0x1e>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40312c:	2301      	movs	r3, #1
  40312e:	4a0e      	ldr	r2, [pc, #56]	; (403168 <pmc_enable_periph_clk+0x44>)
  403130:	fa03 f000 	lsl.w	r0, r3, r0
  403134:	6991      	ldr	r1, [r2, #24]
  403136:	ea30 0301 	bics.w	r3, r0, r1
  40313a:	d012      	beq.n	403162 <pmc_enable_periph_clk+0x3e>
			PMC->PMC_PCER0 = 1 << ul_id;
  40313c:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40313e:	2000      	movs	r0, #0
  403140:	4770      	bx	lr
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  403142:	2301      	movs	r3, #1
		ul_id -= 32;
  403144:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  403146:	4a08      	ldr	r2, [pc, #32]	; (403168 <pmc_enable_periph_clk+0x44>)
  403148:	fa03 f000 	lsl.w	r0, r3, r0
  40314c:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
  403150:	ea30 0303 	bics.w	r3, r0, r3
  403154:	d005      	beq.n	403162 <pmc_enable_periph_clk+0x3e>
			PMC->PMC_PCER1 = 1 << ul_id;
  403156:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
	return 0;
  40315a:	2000      	movs	r0, #0
  40315c:	4770      	bx	lr
		return 1;
  40315e:	2001      	movs	r0, #1
  403160:	4770      	bx	lr
	return 0;
  403162:	2000      	movs	r0, #0
}
  403164:	4770      	bx	lr
  403166:	bf00      	nop
  403168:	400e0600 	.word	0x400e0600

0040316c <pmc_pck_set_prescaler>:
 *
 * \param ul_id Peripheral ID.
 * \param ul_pres Prescaler value.
 */
void pmc_pck_set_prescaler(uint32_t ul_id, uint32_t ul_pres)
{
  40316c:	4b0b      	ldr	r3, [pc, #44]	; (40319c <pmc_pck_set_prescaler+0x30>)
  40316e:	f44f 7280 	mov.w	r2, #256	; 0x100
  403172:	b410      	push	{r4}
  403174:	eb03 0480 	add.w	r4, r3, r0, lsl #2
  403178:	fa02 f000 	lsl.w	r0, r2, r0
	PMC->PMC_PCK[ul_id] =
			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_PRES_Msk) | ul_pres;
  40317c:	6c22      	ldr	r2, [r4, #64]	; 0x40
  40317e:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  403182:	4311      	orrs	r1, r2
	PMC->PMC_PCK[ul_id] =
  403184:	6421      	str	r1, [r4, #64]	; 0x40
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  403186:	e002      	b.n	40318e <pmc_pck_set_prescaler+0x22>
			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
  403188:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  40318a:	4202      	tst	r2, r0
  40318c:	d102      	bne.n	403194 <pmc_pck_set_prescaler+0x28>
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  40318e:	681a      	ldr	r2, [r3, #0]
  403190:	4202      	tst	r2, r0
  403192:	d1f9      	bne.n	403188 <pmc_pck_set_prescaler+0x1c>
}
  403194:	f85d 4b04 	ldr.w	r4, [sp], #4
  403198:	4770      	bx	lr
  40319a:	bf00      	nop
  40319c:	400e0600 	.word	0x400e0600

004031a0 <pmc_pck_set_source>:
 *
 * \param ul_id Peripheral ID.
 * \param ul_source Source selection value.
 */
void pmc_pck_set_source(uint32_t ul_id, uint32_t ul_source)
{
  4031a0:	4b0b      	ldr	r3, [pc, #44]	; (4031d0 <pmc_pck_set_source+0x30>)
  4031a2:	f44f 7280 	mov.w	r2, #256	; 0x100
  4031a6:	b410      	push	{r4}
  4031a8:	eb03 0480 	add.w	r4, r3, r0, lsl #2
  4031ac:	fa02 f000 	lsl.w	r0, r2, r0
	PMC->PMC_PCK[ul_id] =
			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_CSS_Msk) | ul_source;
  4031b0:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4031b2:	f022 0207 	bic.w	r2, r2, #7
  4031b6:	4311      	orrs	r1, r2
	PMC->PMC_PCK[ul_id] =
  4031b8:	6421      	str	r1, [r4, #64]	; 0x40
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  4031ba:	e002      	b.n	4031c2 <pmc_pck_set_source+0x22>
			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
  4031bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  4031be:	4202      	tst	r2, r0
  4031c0:	d102      	bne.n	4031c8 <pmc_pck_set_source+0x28>
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  4031c2:	681a      	ldr	r2, [r3, #0]
  4031c4:	4202      	tst	r2, r0
  4031c6:	d1f9      	bne.n	4031bc <pmc_pck_set_source+0x1c>
}
  4031c8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4031cc:	4770      	bx	lr
  4031ce:	bf00      	nop
  4031d0:	400e0600 	.word	0x400e0600

004031d4 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  4031d4:	f44f 7380 	mov.w	r3, #256	; 0x100
  4031d8:	4a02      	ldr	r2, [pc, #8]	; (4031e4 <pmc_enable_pck+0x10>)
  4031da:	fa03 f000 	lsl.w	r0, r3, r0
  4031de:	6010      	str	r0, [r2, #0]
  4031e0:	4770      	bx	lr
  4031e2:	bf00      	nop
  4031e4:	400e0600 	.word	0x400e0600

004031e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4031e8:	e7fe      	b.n	4031e8 <Dummy_Handler>
  4031ea:	bf00      	nop

004031ec <Dummy_Handler2>:
	while (1) {
	}
}

void Dummy_Handler2(void)
{
  4031ec:	e7fe      	b.n	4031ec <Dummy_Handler2>
  4031ee:	bf00      	nop

004031f0 <Reset_Handler>:
        if (pSrc != pDest) {
  4031f0:	4920      	ldr	r1, [pc, #128]	; (403274 <Reset_Handler+0x84>)
  4031f2:	4821      	ldr	r0, [pc, #132]	; (403278 <Reset_Handler+0x88>)
  4031f4:	4281      	cmp	r1, r0
{
  4031f6:	b510      	push	{r4, lr}
  4031f8:	b082      	sub	sp, #8
        if (pSrc != pDest) {
  4031fa:	d009      	beq.n	403210 <Reset_Handler+0x20>
                for (; pDest < &_erelocate;) {
  4031fc:	4b1f      	ldr	r3, [pc, #124]	; (40327c <Reset_Handler+0x8c>)
  4031fe:	4298      	cmp	r0, r3
  403200:	d206      	bcs.n	403210 <Reset_Handler+0x20>
                        *pDest++ = *pSrc++;
  403202:	43c2      	mvns	r2, r0
  403204:	4c1e      	ldr	r4, [pc, #120]	; (403280 <Reset_Handler+0x90>)
  403206:	441a      	add	r2, r3
  403208:	f022 0203 	bic.w	r2, r2, #3
  40320c:	3204      	adds	r2, #4
  40320e:	47a0      	blx	r4
        for (pDest = &_szero; pDest < &_ezero;) {
  403210:	481c      	ldr	r0, [pc, #112]	; (403284 <Reset_Handler+0x94>)
  403212:	4b1d      	ldr	r3, [pc, #116]	; (403288 <Reset_Handler+0x98>)
  403214:	4298      	cmp	r0, r3
  403216:	d207      	bcs.n	403228 <Reset_Handler+0x38>
                *pDest++ = 0;
  403218:	43c2      	mvns	r2, r0
  40321a:	2100      	movs	r1, #0
  40321c:	4c1b      	ldr	r4, [pc, #108]	; (40328c <Reset_Handler+0x9c>)
  40321e:	441a      	add	r2, r3
  403220:	f022 0203 	bic.w	r2, r2, #3
  403224:	3204      	adds	r2, #4
  403226:	47a0      	blx	r4
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  403228:	4b19      	ldr	r3, [pc, #100]	; (403290 <Reset_Handler+0xa0>)
  40322a:	4a1a      	ldr	r2, [pc, #104]	; (403294 <Reset_Handler+0xa4>)
  40322c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  403230:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403232:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403236:	fab3 f383 	clz	r3, r3
  40323a:	095b      	lsrs	r3, r3, #5
  40323c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40323e:	b672      	cpsid	i
  __ASM volatile ("dmb");
  403240:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403244:	4a14      	ldr	r2, [pc, #80]	; (403298 <Reset_Handler+0xa8>)
  403246:	2300      	movs	r3, #0
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  403248:	4914      	ldr	r1, [pc, #80]	; (40329c <Reset_Handler+0xac>)
  40324a:	7013      	strb	r3, [r2, #0]
	return flags;
  40324c:	9801      	ldr	r0, [sp, #4]
  40324e:	680b      	ldr	r3, [r1, #0]
  403250:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  403254:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb");
  403256:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40325a:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40325e:	b120      	cbz	r0, 40326a <Reset_Handler+0x7a>
		cpu_irq_enable();
  403260:	2301      	movs	r3, #1
  403262:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dmb");
  403264:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403268:	b662      	cpsie	i
        __libc_init_array();
  40326a:	4b0d      	ldr	r3, [pc, #52]	; (4032a0 <Reset_Handler+0xb0>)
  40326c:	4798      	blx	r3
        main();
  40326e:	4b0d      	ldr	r3, [pc, #52]	; (4032a4 <Reset_Handler+0xb4>)
  403270:	4798      	blx	r3
  403272:	e7fe      	b.n	403272 <Reset_Handler+0x82>
  403274:	00408c34 	.word	0x00408c34
  403278:	20400000 	.word	0x20400000
  40327c:	20400a08 	.word	0x20400a08
  403280:	00405815 	.word	0x00405815
  403284:	20404000 	.word	0x20404000
  403288:	2044a8f0 	.word	0x2044a8f0
  40328c:	00405949 	.word	0x00405949
  403290:	00400000 	.word	0x00400000
  403294:	e000ed00 	.word	0xe000ed00
  403298:	20400024 	.word	0x20400024
  40329c:	e000ed88 	.word	0xe000ed88
  4032a0:	0040522d 	.word	0x0040522d
  4032a4:	00403785 	.word	0x00403785

004032a8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4032a8:	4a32      	ldr	r2, [pc, #200]	; (403374 <SystemCoreClockUpdate+0xcc>)
  4032aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4032ac:	f003 0303 	and.w	r3, r3, #3
  4032b0:	2b01      	cmp	r3, #1
  4032b2:	d03c      	beq.n	40332e <SystemCoreClockUpdate+0x86>
  4032b4:	d325      	bcc.n	403302 <SystemCoreClockUpdate+0x5a>
  4032b6:	2b02      	cmp	r3, #2
  4032b8:	d00d      	beq.n	4032d6 <SystemCoreClockUpdate+0x2e>
  4032ba:	482f      	ldr	r0, [pc, #188]	; (403378 <SystemCoreClockUpdate+0xd0>)
  4032bc:	6803      	ldr	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4032be:	492d      	ldr	r1, [pc, #180]	; (403374 <SystemCoreClockUpdate+0xcc>)
  4032c0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4032c2:	f002 0270 	and.w	r2, r2, #112	; 0x70
  4032c6:	2a70      	cmp	r2, #112	; 0x70
  4032c8:	d02b      	beq.n	403322 <SystemCoreClockUpdate+0x7a>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4032ca:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4032cc:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4032d0:	40d3      	lsrs	r3, r2
  4032d2:	6003      	str	r3, [r0, #0]
  4032d4:	4770      	bx	lr
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4032d6:	6a13      	ldr	r3, [r2, #32]
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4032d8:	4827      	ldr	r0, [pc, #156]	; (403378 <SystemCoreClockUpdate+0xd0>)
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4032da:	01db      	lsls	r3, r3, #7
  4032dc:	d53a      	bpl.n	403354 <SystemCoreClockUpdate+0xac>
            SystemCoreClock *= 3U;
  4032de:	4b27      	ldr	r3, [pc, #156]	; (40337c <SystemCoreClockUpdate+0xd4>)
  4032e0:	6003      	str	r3, [r0, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4032e2:	4924      	ldr	r1, [pc, #144]	; (403374 <SystemCoreClockUpdate+0xcc>)
  4032e4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4032e6:	f002 0203 	and.w	r2, r2, #3
  4032ea:	2a02      	cmp	r2, #2
  4032ec:	d1e7      	bne.n	4032be <SystemCoreClockUpdate+0x16>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4032ee:	6a8a      	ldr	r2, [r1, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4032f0:	6a89      	ldr	r1, [r1, #40]	; 0x28
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4032f2:	f3c2 420a 	ubfx	r2, r2, #16, #11
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4032f6:	b2c9      	uxtb	r1, r1
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4032f8:	fb02 3303 	mla	r3, r2, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4032fc:	fbb3 f3f1 	udiv	r3, r3, r1
  403300:	e7dd      	b.n	4032be <SystemCoreClockUpdate+0x16>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  403302:	4b1f      	ldr	r3, [pc, #124]	; (403380 <SystemCoreClockUpdate+0xd8>)
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  403304:	491b      	ldr	r1, [pc, #108]	; (403374 <SystemCoreClockUpdate+0xcc>)
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  403306:	695b      	ldr	r3, [r3, #20]
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  403308:	6b0a      	ldr	r2, [r1, #48]	; 0x30
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40330a:	f013 0f80 	tst.w	r3, #128	; 0x80
  40330e:	481a      	ldr	r0, [pc, #104]	; (403378 <SystemCoreClockUpdate+0xd0>)
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  403310:	f002 0270 	and.w	r2, r2, #112	; 0x70
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  403314:	bf14      	ite	ne
  403316:	f44f 4300 	movne.w	r3, #32768	; 0x8000
  40331a:	f44f 43fa 	moveq.w	r3, #32000	; 0x7d00
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40331e:	2a70      	cmp	r2, #112	; 0x70
  403320:	d1d3      	bne.n	4032ca <SystemCoreClockUpdate+0x22>
    SystemCoreClock /= 3U;
  403322:	4a18      	ldr	r2, [pc, #96]	; (403384 <SystemCoreClockUpdate+0xdc>)
  403324:	fba2 2303 	umull	r2, r3, r2, r3
  403328:	085b      	lsrs	r3, r3, #1
  40332a:	6003      	str	r3, [r0, #0]
  40332c:	4770      	bx	lr
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40332e:	6a13      	ldr	r3, [r2, #32]
  403330:	01d9      	lsls	r1, r3, #7
  403332:	d40c      	bmi.n	40334e <SystemCoreClockUpdate+0xa6>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403334:	4810      	ldr	r0, [pc, #64]	; (403378 <SystemCoreClockUpdate+0xd0>)
  403336:	4914      	ldr	r1, [pc, #80]	; (403388 <SystemCoreClockUpdate+0xe0>)
  403338:	6001      	str	r1, [r0, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40333a:	6a12      	ldr	r2, [r2, #32]
  40333c:	f002 0270 	and.w	r2, r2, #112	; 0x70
  403340:	2a10      	cmp	r2, #16
  403342:	d011      	beq.n	403368 <SystemCoreClockUpdate+0xc0>
  403344:	4b0d      	ldr	r3, [pc, #52]	; (40337c <SystemCoreClockUpdate+0xd4>)
  403346:	2a20      	cmp	r2, #32
  403348:	bf18      	it	ne
  40334a:	460b      	movne	r3, r1
  40334c:	e7b7      	b.n	4032be <SystemCoreClockUpdate+0x16>
  40334e:	4b0b      	ldr	r3, [pc, #44]	; (40337c <SystemCoreClockUpdate+0xd4>)
  403350:	4809      	ldr	r0, [pc, #36]	; (403378 <SystemCoreClockUpdate+0xd0>)
  403352:	e7b4      	b.n	4032be <SystemCoreClockUpdate+0x16>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403354:	4b0c      	ldr	r3, [pc, #48]	; (403388 <SystemCoreClockUpdate+0xe0>)
  403356:	6003      	str	r3, [r0, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  403358:	6a12      	ldr	r2, [r2, #32]
  40335a:	f002 0270 	and.w	r2, r2, #112	; 0x70
  40335e:	2a10      	cmp	r2, #16
  403360:	d004      	beq.n	40336c <SystemCoreClockUpdate+0xc4>
  403362:	2a20      	cmp	r2, #32
  403364:	d0bb      	beq.n	4032de <SystemCoreClockUpdate+0x36>
  403366:	e7bc      	b.n	4032e2 <SystemCoreClockUpdate+0x3a>
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  403368:	4b08      	ldr	r3, [pc, #32]	; (40338c <SystemCoreClockUpdate+0xe4>)
  40336a:	e7a8      	b.n	4032be <SystemCoreClockUpdate+0x16>
            SystemCoreClock *= 2U;
  40336c:	4b07      	ldr	r3, [pc, #28]	; (40338c <SystemCoreClockUpdate+0xe4>)
  40336e:	6003      	str	r3, [r0, #0]
          break;
  403370:	e7b7      	b.n	4032e2 <SystemCoreClockUpdate+0x3a>
  403372:	bf00      	nop
  403374:	400e0600 	.word	0x400e0600
  403378:	20400028 	.word	0x20400028
  40337c:	00b71b00 	.word	0x00b71b00
  403380:	400e1810 	.word	0x400e1810
  403384:	aaaaaaab 	.word	0xaaaaaaab
  403388:	003d0900 	.word	0x003d0900
  40338c:	007a1200 	.word	0x007a1200

00403390 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  403390:	4b16      	ldr	r3, [pc, #88]	; (4033ec <system_init_flash+0x5c>)
  403392:	4298      	cmp	r0, r3
  403394:	d917      	bls.n	4033c6 <system_init_flash+0x36>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  403396:	4b16      	ldr	r3, [pc, #88]	; (4033f0 <system_init_flash+0x60>)
  403398:	4298      	cmp	r0, r3
  40339a:	d910      	bls.n	4033be <system_init_flash+0x2e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  40339c:	4b15      	ldr	r3, [pc, #84]	; (4033f4 <system_init_flash+0x64>)
  40339e:	4298      	cmp	r0, r3
  4033a0:	d91a      	bls.n	4033d8 <system_init_flash+0x48>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4033a2:	4b15      	ldr	r3, [pc, #84]	; (4033f8 <system_init_flash+0x68>)
  4033a4:	4298      	cmp	r0, r3
  4033a6:	d913      	bls.n	4033d0 <system_init_flash+0x40>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4033a8:	4b14      	ldr	r3, [pc, #80]	; (4033fc <system_init_flash+0x6c>)
  4033aa:	4298      	cmp	r0, r3
  4033ac:	d918      	bls.n	4033e0 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4033ae:	4b14      	ldr	r3, [pc, #80]	; (403400 <system_init_flash+0x70>)
  4033b0:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4033b2:	4b14      	ldr	r3, [pc, #80]	; (403404 <system_init_flash+0x74>)
  4033b4:	bf94      	ite	ls
  4033b6:	4a14      	ldrls	r2, [pc, #80]	; (403408 <system_init_flash+0x78>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4033b8:	4a14      	ldrhi	r2, [pc, #80]	; (40340c <system_init_flash+0x7c>)
  4033ba:	601a      	str	r2, [r3, #0]
  4033bc:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4033be:	4b11      	ldr	r3, [pc, #68]	; (403404 <system_init_flash+0x74>)
  4033c0:	4a13      	ldr	r2, [pc, #76]	; (403410 <system_init_flash+0x80>)
  4033c2:	601a      	str	r2, [r3, #0]
  4033c4:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4033c6:	4b0f      	ldr	r3, [pc, #60]	; (403404 <system_init_flash+0x74>)
  4033c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4033cc:	601a      	str	r2, [r3, #0]
  4033ce:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4033d0:	4b0c      	ldr	r3, [pc, #48]	; (403404 <system_init_flash+0x74>)
  4033d2:	4a10      	ldr	r2, [pc, #64]	; (403414 <system_init_flash+0x84>)
  4033d4:	601a      	str	r2, [r3, #0]
  4033d6:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4033d8:	4b0a      	ldr	r3, [pc, #40]	; (403404 <system_init_flash+0x74>)
  4033da:	4a0f      	ldr	r2, [pc, #60]	; (403418 <system_init_flash+0x88>)
  4033dc:	601a      	str	r2, [r3, #0]
  4033de:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4033e0:	4b08      	ldr	r3, [pc, #32]	; (403404 <system_init_flash+0x74>)
  4033e2:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4033e6:	601a      	str	r2, [r3, #0]
  4033e8:	4770      	bx	lr
  4033ea:	bf00      	nop
  4033ec:	015ef3bf 	.word	0x015ef3bf
  4033f0:	02bde77f 	.word	0x02bde77f
  4033f4:	041cdb3f 	.word	0x041cdb3f
  4033f8:	057bceff 	.word	0x057bceff
  4033fc:	06dac2bf 	.word	0x06dac2bf
  403400:	0839b67f 	.word	0x0839b67f
  403404:	400e0c00 	.word	0x400e0c00
  403408:	04000500 	.word	0x04000500
  40340c:	04000600 	.word	0x04000600
  403410:	04000100 	.word	0x04000100
  403414:	04000300 	.word	0x04000300
  403418:	04000200 	.word	0x04000200

0040341c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  40341c:	4a0d      	ldr	r2, [pc, #52]	; (403454 <_sbrk+0x38>)
	int ramend = (int)&__ram_end__;
  40341e:	490e      	ldr	r1, [pc, #56]	; (403458 <_sbrk+0x3c>)
	if (heap == NULL) {
  403420:	6813      	ldr	r3, [r2, #0]
  403422:	b143      	cbz	r3, 403436 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
  403424:	4418      	add	r0, r3
  403426:	4281      	cmp	r1, r0
  403428:	db02      	blt.n	403430 <_sbrk+0x14>
		return (caddr_t) -1;	
	}

	heap += incr;
  40342a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40342c:	4618      	mov	r0, r3
  40342e:	4770      	bx	lr
		return (caddr_t) -1;	
  403430:	f04f 30ff 	mov.w	r0, #4294967295
  403434:	4770      	bx	lr
{
  403436:	b410      	push	{r4}
		heap = (unsigned char *)&_end;
  403438:	4c08      	ldr	r4, [pc, #32]	; (40345c <_sbrk+0x40>)
	if (((int)prev_heap + incr) > ramend) {
  40343a:	4420      	add	r0, r4
		heap = (unsigned char *)&_end;
  40343c:	6014      	str	r4, [r2, #0]
	if (((int)prev_heap + incr) > ramend) {
  40343e:	4281      	cmp	r1, r0
  403440:	db04      	blt.n	40344c <_sbrk+0x30>
	heap += incr;
  403442:	6010      	str	r0, [r2, #0]
	return (caddr_t) prev_heap;
  403444:	4620      	mov	r0, r4
}
  403446:	f85d 4b04 	ldr.w	r4, [sp], #4
  40344a:	4770      	bx	lr
		return (caddr_t) -1;	
  40344c:	f04f 30ff 	mov.w	r0, #4294967295
  403450:	e7f9      	b.n	403446 <_sbrk+0x2a>
  403452:	bf00      	nop
  403454:	2041c358 	.word	0x2041c358
  403458:	2045fffc 	.word	0x2045fffc
  40345c:	2044caf0 	.word	0x2044caf0

00403460 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  403460:	f04f 30ff 	mov.w	r0, #4294967295
  403464:	4770      	bx	lr
  403466:	bf00      	nop

00403468 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  403468:	f44f 5300 	mov.w	r3, #8192	; 0x2000

	return 0;
}
  40346c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
  40346e:	604b      	str	r3, [r1, #4]
}
  403470:	4770      	bx	lr
  403472:	bf00      	nop

00403474 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  403474:	2001      	movs	r0, #1
  403476:	4770      	bx	lr

00403478 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  403478:	2000      	movs	r0, #0
  40347a:	4770      	bx	lr

0040347c <USART1_Handler>:
volatile bool waiting_for_chorus_speed = false;
volatile float chorus_speed = 0.02f;

volatile bool autotune = true; 
void USART_SERIAL_ISR_HANDLER(void)
{
  40347c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t dw_status = usart_get_status(USART_SERIAL);
  403480:	4b99      	ldr	r3, [pc, #612]	; (4036e8 <USART1_Handler+0x26c>)
{
  403482:	b082      	sub	sp, #8
	uint32_t dw_status = usart_get_status(USART_SERIAL);
  403484:	4899      	ldr	r0, [pc, #612]	; (4036ec <USART1_Handler+0x270>)
  403486:	4798      	blx	r3
	if (dw_status & US_CSR_RXRDY) {
  403488:	07c3      	lsls	r3, r0, #31
  40348a:	d402      	bmi.n	403492 <USART1_Handler+0x16>
			harmony_list_read = harmony_list_fill;		
			harmony_list_fill = temp; 
			harmony_idx = 0; 
		}
	}
}
  40348c:	b002      	add	sp, #8
  40348e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		usart_read(USART_SERIAL, &received_byte);
  403492:	4b97      	ldr	r3, [pc, #604]	; (4036f0 <USART1_Handler+0x274>)
  403494:	a901      	add	r1, sp, #4
  403496:	4895      	ldr	r0, [pc, #596]	; (4036ec <USART1_Handler+0x270>)
  403498:	4798      	blx	r3
		if (waiting_for_harm_volume)
  40349a:	4a96      	ldr	r2, [pc, #600]	; (4036f4 <USART1_Handler+0x278>)
  40349c:	7813      	ldrb	r3, [r2, #0]
  40349e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  4034a2:	b98b      	cbnz	r3, 4034c8 <USART1_Handler+0x4c>
		else if (waiting_for_master_volume)
  4034a4:	4994      	ldr	r1, [pc, #592]	; (4036f8 <USART1_Handler+0x27c>)
  4034a6:	780b      	ldrb	r3, [r1, #0]
  4034a8:	f003 04ff 	and.w	r4, r3, #255	; 0xff
  4034ac:	b1e3      	cbz	r3, 4034e8 <USART1_Handler+0x6c>
			master_volume = 1.2f*(float)received_byte / 127.0f;
  4034ae:	eddd 7a01 	vldr	s15, [sp, #4]
  4034b2:	ed9f 7a92 	vldr	s14, [pc, #584]	; 4036fc <USART1_Handler+0x280>
  4034b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
  4034ba:	4b91      	ldr	r3, [pc, #580]	; (403700 <USART1_Handler+0x284>)
  4034bc:	ee67 7a87 	vmul.f32	s15, s15, s14
  4034c0:	edc3 7a00 	vstr	s15, [r3]
			waiting_for_master_volume = false;
  4034c4:	7008      	strb	r0, [r1, #0]
  4034c6:	e7e1      	b.n	40348c <USART1_Handler+0x10>
			harm_volume = (float)received_byte / 127.0f; 
  4034c8:	eddd 7a01 	vldr	s15, [sp, #4]
			waiting_for_harm_volume = false; 
  4034cc:	2300      	movs	r3, #0
			harm_volume = (float)received_byte / 127.0f; 
  4034ce:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 403704 <USART1_Handler+0x288>
  4034d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
  4034d6:	498c      	ldr	r1, [pc, #560]	; (403708 <USART1_Handler+0x28c>)
  4034d8:	ee67 7a87 	vmul.f32	s15, s15, s14
  4034dc:	edc1 7a00 	vstr	s15, [r1]
			waiting_for_harm_volume = false; 
  4034e0:	7013      	strb	r3, [r2, #0]
}
  4034e2:	b002      	add	sp, #8
  4034e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		else if (waiting_for_dry_volume)
  4034e8:	4888      	ldr	r0, [pc, #544]	; (40370c <USART1_Handler+0x290>)
  4034ea:	7803      	ldrb	r3, [r0, #0]
  4034ec:	f003 05ff 	and.w	r5, r3, #255	; 0xff
  4034f0:	b94b      	cbnz	r3, 403506 <USART1_Handler+0x8a>
		else if (waiting_for_pitch_bend)
  4034f2:	4c87      	ldr	r4, [pc, #540]	; (403710 <USART1_Handler+0x294>)
  4034f4:	7823      	ldrb	r3, [r4, #0]
  4034f6:	f003 06ff 	and.w	r6, r3, #255	; 0xff
  4034fa:	b19b      	cbz	r3, 403524 <USART1_Handler+0xa8>
			pitch_bend = received_byte;
  4034fc:	9a01      	ldr	r2, [sp, #4]
  4034fe:	4b85      	ldr	r3, [pc, #532]	; (403714 <USART1_Handler+0x298>)
  403500:	601a      	str	r2, [r3, #0]
			waiting_for_pitch_bend = false;
  403502:	7025      	strb	r5, [r4, #0]
  403504:	e7c2      	b.n	40348c <USART1_Handler+0x10>
			dry_volume = 0.1f + 0.9f*(float)received_byte / 127.0f;
  403506:	eddd 7a01 	vldr	s15, [sp, #4]
  40350a:	eddf 6a83 	vldr	s13, [pc, #524]	; 403718 <USART1_Handler+0x29c>
  40350e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  403512:	eddf 7a82 	vldr	s15, [pc, #520]	; 40371c <USART1_Handler+0x2a0>
  403516:	4b82      	ldr	r3, [pc, #520]	; (403720 <USART1_Handler+0x2a4>)
  403518:	eee7 7a26 	vfma.f32	s15, s14, s13
  40351c:	edc3 7a00 	vstr	s15, [r3]
			waiting_for_dry_volume = false;
  403520:	7004      	strb	r4, [r0, #0]
  403522:	e7b3      	b.n	40348c <USART1_Handler+0x10>
		else if (waiting_for_reverb_volume)
  403524:	4d7f      	ldr	r5, [pc, #508]	; (403724 <USART1_Handler+0x2a8>)
  403526:	782b      	ldrb	r3, [r5, #0]
  403528:	f003 07ff 	and.w	r7, r3, #255	; 0xff
  40352c:	b163      	cbz	r3, 403548 <USART1_Handler+0xcc>
			reverb_volume = (float)received_byte / 127.0f;;
  40352e:	eddd 7a01 	vldr	s15, [sp, #4]
  403532:	ed9f 7a74 	vldr	s14, [pc, #464]	; 403704 <USART1_Handler+0x288>
  403536:	eef8 7a67 	vcvt.f32.u32	s15, s15
  40353a:	4b7b      	ldr	r3, [pc, #492]	; (403728 <USART1_Handler+0x2ac>)
  40353c:	ee67 7a87 	vmul.f32	s15, s15, s14
  403540:	edc3 7a00 	vstr	s15, [r3]
			waiting_for_reverb_volume = false;
  403544:	702e      	strb	r6, [r5, #0]
  403546:	e7a1      	b.n	40348c <USART1_Handler+0x10>
		else if (waiting_for_delay_volume)
  403548:	4e78      	ldr	r6, [pc, #480]	; (40372c <USART1_Handler+0x2b0>)
  40354a:	7833      	ldrb	r3, [r6, #0]
  40354c:	f003 0eff 	and.w	lr, r3, #255	; 0xff
  403550:	b163      	cbz	r3, 40356c <USART1_Handler+0xf0>
			delay_volume = 0.7f * (float)received_byte / 127.0f;
  403552:	eddd 7a01 	vldr	s15, [sp, #4]
  403556:	ed9f 7a76 	vldr	s14, [pc, #472]	; 403730 <USART1_Handler+0x2b4>
  40355a:	eef8 7a67 	vcvt.f32.u32	s15, s15
  40355e:	4b75      	ldr	r3, [pc, #468]	; (403734 <USART1_Handler+0x2b8>)
  403560:	ee67 7a87 	vmul.f32	s15, s15, s14
  403564:	edc3 7a00 	vstr	s15, [r3]
			waiting_for_delay_volume = false;
  403568:	7037      	strb	r7, [r6, #0]
  40356a:	e78f      	b.n	40348c <USART1_Handler+0x10>
		else if (waiting_for_delay_speed)
  40356c:	4f72      	ldr	r7, [pc, #456]	; (403738 <USART1_Handler+0x2bc>)
  40356e:	783b      	ldrb	r3, [r7, #0]
  403570:	f003 0cff 	and.w	ip, r3, #255	; 0xff
  403574:	b18b      	cbz	r3, 40359a <USART1_Handler+0x11e>
			delay_speed = 16200 - 14000 * (float)received_byte / 127.0f;
  403576:	eddd 7a01 	vldr	s15, [sp, #4]
  40357a:	eddf 6a70 	vldr	s13, [pc, #448]	; 40373c <USART1_Handler+0x2c0>
  40357e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  403582:	eddf 7a6f 	vldr	s15, [pc, #444]	; 403740 <USART1_Handler+0x2c4>
  403586:	4b6f      	ldr	r3, [pc, #444]	; (403744 <USART1_Handler+0x2c8>)
  403588:	eee7 7a66 	vfms.f32	s15, s14, s13
  40358c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  403590:	edc3 7a00 	vstr	s15, [r3]
			waiting_for_delay_speed = false;
  403594:	f887 e000 	strb.w	lr, [r7]
  403598:	e778      	b.n	40348c <USART1_Handler+0x10>
		else if (waiting_for_delay_feedback)
  40359a:	f8df e1dc 	ldr.w	lr, [pc, #476]	; 403778 <USART1_Handler+0x2fc>
  40359e:	f89e 3000 	ldrb.w	r3, [lr]
  4035a2:	b16b      	cbz	r3, 4035c0 <USART1_Handler+0x144>
			delay_feedback = 0.8f * (float)received_byte / 127.0f;
  4035a4:	eddd 7a01 	vldr	s15, [sp, #4]
  4035a8:	ed9f 7a67 	vldr	s14, [pc, #412]	; 403748 <USART1_Handler+0x2cc>
  4035ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
  4035b0:	4b66      	ldr	r3, [pc, #408]	; (40374c <USART1_Handler+0x2d0>)
  4035b2:	ee67 7a87 	vmul.f32	s15, s15, s14
  4035b6:	edc3 7a00 	vstr	s15, [r3]
			waiting_for_delay_feedback = false;
  4035ba:	f88e c000 	strb.w	ip, [lr]
  4035be:	e765      	b.n	40348c <USART1_Handler+0x10>
		else if (waiting_for_chorus_volume)
  4035c0:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 40377c <USART1_Handler+0x300>
  4035c4:	f898 3000 	ldrb.w	r3, [r8]
  4035c8:	b173      	cbz	r3, 4035e8 <USART1_Handler+0x16c>
			chorus_volume = (float)received_byte / 127.0f;;
  4035ca:	eddd 7a01 	vldr	s15, [sp, #4]
			waiting_for_chorus_volume = false;
  4035ce:	2300      	movs	r3, #0
			chorus_volume = (float)received_byte / 127.0f;;
  4035d0:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 403704 <USART1_Handler+0x288>
  4035d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
  4035d8:	4a5d      	ldr	r2, [pc, #372]	; (403750 <USART1_Handler+0x2d4>)
  4035da:	ee67 7a87 	vmul.f32	s15, s15, s14
  4035de:	edc2 7a00 	vstr	s15, [r2]
			waiting_for_chorus_volume = false;
  4035e2:	f888 3000 	strb.w	r3, [r8]
  4035e6:	e751      	b.n	40348c <USART1_Handler+0x10>
		else if (waiting_for_chorus_speed)
  4035e8:	f8df c194 	ldr.w	ip, [pc, #404]	; 403780 <USART1_Handler+0x304>
  4035ec:	f89c 3000 	ldrb.w	r3, [ip]
  4035f0:	b183      	cbz	r3, 403614 <USART1_Handler+0x198>
			chorus_speed = 0.05f + 2.0f*(float)received_byte / 127.0f;;
  4035f2:	eddd 7a01 	vldr	s15, [sp, #4]
			waiting_for_chorus_speed = false;
  4035f6:	2300      	movs	r3, #0
			chorus_speed = 0.05f + 2.0f*(float)received_byte / 127.0f;;
  4035f8:	eddf 6a56 	vldr	s13, [pc, #344]	; 403754 <USART1_Handler+0x2d8>
  4035fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  403600:	eddf 7a55 	vldr	s15, [pc, #340]	; 403758 <USART1_Handler+0x2dc>
  403604:	4a55      	ldr	r2, [pc, #340]	; (40375c <USART1_Handler+0x2e0>)
  403606:	eee7 7a26 	vfma.f32	s15, s14, s13
  40360a:	edc2 7a00 	vstr	s15, [r2]
			waiting_for_chorus_speed = false;
  40360e:	f88c 3000 	strb.w	r3, [ip]
  403612:	e73b      	b.n	40348c <USART1_Handler+0x10>
		else if (received_byte == HARMONY_VOLUME_FLAG) 
  403614:	9b01      	ldr	r3, [sp, #4]
  403616:	2bff      	cmp	r3, #255	; 0xff
  403618:	d02c      	beq.n	403674 <USART1_Handler+0x1f8>
		else if (received_byte == DRY_VOLUME_FLAG)
  40361a:	2bf7      	cmp	r3, #247	; 0xf7
  40361c:	d030      	beq.n	403680 <USART1_Handler+0x204>
		else if (received_byte == MASTER_VOLUME_FLAG)
  40361e:	2bfe      	cmp	r3, #254	; 0xfe
  403620:	d02b      	beq.n	40367a <USART1_Handler+0x1fe>
		else if (received_byte == PITCH_BEND_FLAG)
  403622:	2bfd      	cmp	r3, #253	; 0xfd
  403624:	d04f      	beq.n	4036c6 <USART1_Handler+0x24a>
		else if (received_byte == REVERB_VOLUME_FLAG)
  403626:	2bfb      	cmp	r3, #251	; 0xfb
  403628:	d04a      	beq.n	4036c0 <USART1_Handler+0x244>
		else if (received_byte == DELAY_VOLUME_FLAG)
  40362a:	2bf6      	cmp	r3, #246	; 0xf6
  40362c:	d059      	beq.n	4036e2 <USART1_Handler+0x266>
		else if (received_byte == DELAY_SPEED_FLAG)
  40362e:	2bf8      	cmp	r3, #248	; 0xf8
  403630:	d054      	beq.n	4036dc <USART1_Handler+0x260>
		else if (received_byte == DELAY_FEEDBACK_FLAG)
  403632:	2bf9      	cmp	r3, #249	; 0xf9
  403634:	d04e      	beq.n	4036d4 <USART1_Handler+0x258>
		else if (received_byte == CHORUS_VOLUME_FLAG)
  403636:	2bfa      	cmp	r3, #250	; 0xfa
  403638:	d048      	beq.n	4036cc <USART1_Handler+0x250>
		else if (received_byte == CHORUS_SPEED_FLAG)
  40363a:	2bf5      	cmp	r3, #245	; 0xf5
  40363c:	d03c      	beq.n	4036b8 <USART1_Handler+0x23c>
		else if (received_byte == AUTOTUNE_FLAG)
  40363e:	2bfc      	cmp	r3, #252	; 0xfc
  403640:	d034      	beq.n	4036ac <USART1_Handler+0x230>
		else if (received_byte != 0 && harmony_idx < MAX_NUM_SHIFTS)
  403642:	4a47      	ldr	r2, [pc, #284]	; (403760 <USART1_Handler+0x2e4>)
  403644:	b1fb      	cbz	r3, 403686 <USART1_Handler+0x20a>
  403646:	6811      	ldr	r1, [r2, #0]
  403648:	290a      	cmp	r1, #10
  40364a:	d81c      	bhi.n	403686 <USART1_Handler+0x20a>
			harmony_list_fill[harmony_idx].freq = midi_note_frequencies[received_byte]; 
  40364c:	4c45      	ldr	r4, [pc, #276]	; (403764 <USART1_Handler+0x2e8>)
  40364e:	4846      	ldr	r0, [pc, #280]	; (403768 <USART1_Handler+0x2ec>)
  403650:	6815      	ldr	r5, [r2, #0]
  403652:	6821      	ldr	r1, [r4, #0]
  403654:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  403658:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
  40365c:	681b      	ldr	r3, [r3, #0]
  40365e:	600b      	str	r3, [r1, #0]
			harmony_list_fill[harmony_idx].idx = received_byte; 
  403660:	6810      	ldr	r0, [r2, #0]
  403662:	6823      	ldr	r3, [r4, #0]
  403664:	9901      	ldr	r1, [sp, #4]
  403666:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  40366a:	6059      	str	r1, [r3, #4]
			harmony_idx++;
  40366c:	6813      	ldr	r3, [r2, #0]
  40366e:	3301      	adds	r3, #1
  403670:	6013      	str	r3, [r2, #0]
  403672:	e70b      	b.n	40348c <USART1_Handler+0x10>
			waiting_for_harm_volume = true; 
  403674:	2301      	movs	r3, #1
  403676:	7013      	strb	r3, [r2, #0]
  403678:	e708      	b.n	40348c <USART1_Handler+0x10>
			waiting_for_master_volume = true;
  40367a:	2301      	movs	r3, #1
  40367c:	700b      	strb	r3, [r1, #0]
  40367e:	e705      	b.n	40348c <USART1_Handler+0x10>
			waiting_for_dry_volume = true;
  403680:	2301      	movs	r3, #1
  403682:	7003      	strb	r3, [r0, #0]
  403684:	e702      	b.n	40348c <USART1_Handler+0x10>
			harmony_list_fill[harmony_idx].freq = END_OF_SHIFTS; 
  403686:	4937      	ldr	r1, [pc, #220]	; (403764 <USART1_Handler+0x2e8>)
			harmony_list_fill[harmony_idx].idx = 0; // dont care 
  403688:	2000      	movs	r0, #0
			harmony_list_fill[harmony_idx].freq = END_OF_SHIFTS; 
  40368a:	6816      	ldr	r6, [r2, #0]
  40368c:	680b      	ldr	r3, [r1, #0]
  40368e:	4d37      	ldr	r5, [pc, #220]	; (40376c <USART1_Handler+0x2f0>)
  403690:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
			harmony_t *temp = (harmony_t *)harmony_list_read; 
  403694:	4c36      	ldr	r4, [pc, #216]	; (403770 <USART1_Handler+0x2f4>)
			harmony_list_fill[harmony_idx].freq = END_OF_SHIFTS; 
  403696:	601d      	str	r5, [r3, #0]
			harmony_list_fill[harmony_idx].idx = 0; // dont care 
  403698:	680d      	ldr	r5, [r1, #0]
  40369a:	6813      	ldr	r3, [r2, #0]
			harmony_t *temp = (harmony_t *)harmony_list_read; 
  40369c:	6826      	ldr	r6, [r4, #0]
			harmony_list_fill[harmony_idx].idx = 0; // dont care 
  40369e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
			harmony_list_read = harmony_list_fill;		
  4036a2:	6025      	str	r5, [r4, #0]
			harmony_list_fill = temp; 
  4036a4:	600e      	str	r6, [r1, #0]
			harmony_list_fill[harmony_idx].idx = 0; // dont care 
  4036a6:	6058      	str	r0, [r3, #4]
			harmony_idx = 0; 
  4036a8:	6010      	str	r0, [r2, #0]
}
  4036aa:	e6ef      	b.n	40348c <USART1_Handler+0x10>
			autotune = !autotune; 
  4036ac:	4a31      	ldr	r2, [pc, #196]	; (403774 <USART1_Handler+0x2f8>)
  4036ae:	7813      	ldrb	r3, [r2, #0]
  4036b0:	f083 0301 	eor.w	r3, r3, #1
  4036b4:	7013      	strb	r3, [r2, #0]
  4036b6:	e6e9      	b.n	40348c <USART1_Handler+0x10>
			waiting_for_chorus_speed = true;
  4036b8:	2301      	movs	r3, #1
  4036ba:	f88c 3000 	strb.w	r3, [ip]
  4036be:	e6e5      	b.n	40348c <USART1_Handler+0x10>
			waiting_for_reverb_volume = true;
  4036c0:	2301      	movs	r3, #1
  4036c2:	702b      	strb	r3, [r5, #0]
  4036c4:	e6e2      	b.n	40348c <USART1_Handler+0x10>
			waiting_for_pitch_bend = true;
  4036c6:	2301      	movs	r3, #1
  4036c8:	7023      	strb	r3, [r4, #0]
  4036ca:	e6df      	b.n	40348c <USART1_Handler+0x10>
			waiting_for_chorus_volume = true;
  4036cc:	2301      	movs	r3, #1
  4036ce:	f888 3000 	strb.w	r3, [r8]
  4036d2:	e6db      	b.n	40348c <USART1_Handler+0x10>
			waiting_for_delay_feedback = true;
  4036d4:	2301      	movs	r3, #1
  4036d6:	f88e 3000 	strb.w	r3, [lr]
  4036da:	e6d7      	b.n	40348c <USART1_Handler+0x10>
			waiting_for_delay_speed = true;
  4036dc:	2301      	movs	r3, #1
  4036de:	703b      	strb	r3, [r7, #0]
  4036e0:	e6d4      	b.n	40348c <USART1_Handler+0x10>
			waiting_for_delay_volume = true;
  4036e2:	2301      	movs	r3, #1
  4036e4:	7033      	strb	r3, [r6, #0]
  4036e6:	e6d1      	b.n	40348c <USART1_Handler+0x10>
  4036e8:	00402581 	.word	0x00402581
  4036ec:	40028000 	.word	0x40028000
  4036f0:	00402585 	.word	0x00402585
  4036f4:	2044540a 	.word	0x2044540a
  4036f8:	2044540b 	.word	0x2044540b
  4036fc:	3c1acf38 	.word	0x3c1acf38
  403700:	2040004c 	.word	0x2040004c
  403704:	3c010204 	.word	0x3c010204
  403708:	20400040 	.word	0x20400040
  40370c:	20445409 	.word	0x20445409
  403710:	2044540c 	.word	0x2044540c
  403714:	20400050 	.word	0x20400050
  403718:	3be836d4 	.word	0x3be836d4
  40371c:	3dcccccd 	.word	0x3dcccccd
  403720:	2040003c 	.word	0x2040003c
  403724:	2044540d 	.word	0x2044540d
  403728:	20445400 	.word	0x20445400
  40372c:	20445408 	.word	0x20445408
  403730:	3bb49c6c 	.word	0x3bb49c6c
  403734:	20430000 	.word	0x20430000
  403738:	20445407 	.word	0x20445407
  40373c:	42dc78f2 	.word	0x42dc78f2
  403740:	467d2000 	.word	0x467d2000
  403744:	20400038 	.word	0x20400038
  403748:	3bce69a0 	.word	0x3bce69a0
  40374c:	20400034 	.word	0x20400034
  403750:	2041c35c 	.word	0x2041c35c
  403754:	3c810204 	.word	0x3c810204
  403758:	3d4ccccd 	.word	0x3d4ccccd
  40375c:	20400030 	.word	0x20400030
  403760:	20444000 	.word	0x20444000
  403764:	20400044 	.word	0x20400044
  403768:	00408098 	.word	0x00408098
  40376c:	bf800000 	.word	0xbf800000
  403770:	20400048 	.word	0x20400048
  403774:	2040002c 	.word	0x2040002c
  403778:	20445406 	.word	0x20445406
  40377c:	20445405 	.word	0x20445405
  403780:	20445404 	.word	0x20445404

00403784 <main>:

// uncomment to communicate to pc console over uart for debug 
//#define USING_CONSOLE

int main(void)
{
  403784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sysclk_init();
  403788:	4ba9      	ldr	r3, [pc, #676]	; (403a30 <main+0x2ac>)
{
  40378a:	ed2d 8b06 	vpush	{d8-d10}
  40378e:	b095      	sub	sp, #84	; 0x54
	sysclk_init();
  403790:	4798      	blx	r3
	board_init();
  403792:	4ba8      	ldr	r3, [pc, #672]	; (403a34 <main+0x2b0>)
  403794:	4798      	blx	r3
  __ASM volatile ("dsb");
  403796:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40379a:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_DisableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->CCR &= ~SCB_CCR_IC_Msk;            // disable I-Cache
  40379e:	4ea6      	ldr	r6, [pc, #664]	; (403a38 <main+0x2b4>)
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4037a0:	2400      	movs	r4, #0
    SCB->CCR &= ~SCB_CCR_IC_Msk;            // disable I-Cache
  4037a2:	6973      	ldr	r3, [r6, #20]
  4037a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  4037a8:	6173      	str	r3, [r6, #20]
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4037aa:	f8c6 4250 	str.w	r4, [r6, #592]	; 0x250
  __ASM volatile ("dsb");
  4037ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4037b2:	f3bf 8f6f 	isb	sy
 	SCB_DisableICache(); 
 	lcd_init(); 
  4037b6:	4ba1      	ldr	r3, [pc, #644]	; (403a3c <main+0x2b8>)
  4037b8:	4798      	blx	r3
  __ASM volatile ("dsb");
  4037ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4037be:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4037c2:	f8c6 4250 	str.w	r4, [r6, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4037c6:	6973      	ldr	r3, [r6, #20]
  4037c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  4037cc:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb");
  4037ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4037d2:	f3bf 8f6f 	isb	sy
 	SCB_EnableICache();
	audio_init();
  4037d6:	4b9a      	ldr	r3, [pc, #616]	; (403a40 <main+0x2bc>)
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  4037d8:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
  4037dc:	4798      	blx	r3
#ifdef USING_CONSOLE
	configure_console();
#endif 
	PSOLA_init(); 
  4037de:	4b99      	ldr	r3, [pc, #612]	; (403a44 <main+0x2c0>)
  4037e0:	4798      	blx	r3
	usart_settings.char_length = opt->charlength;
  4037e2:	21c0      	movs	r1, #192	; 0xc0
	usart_settings.parity_type = opt->paritytype;
  4037e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4037e8:	4b97      	ldr	r3, [pc, #604]	; (403a48 <main+0x2c4>)
  4037ea:	200e      	movs	r0, #14
	usart_settings.baudrate = opt->baudrate;
  4037ec:	9708      	str	r7, [sp, #32]
	usart_settings.char_length = opt->charlength;
  4037ee:	9109      	str	r1, [sp, #36]	; 0x24
	usart_settings.parity_type = opt->paritytype;
  4037f0:	920a      	str	r2, [sp, #40]	; 0x28
	usart_settings.stop_bits= opt->stopbits;
  4037f2:	940b      	str	r4, [sp, #44]	; 0x2c
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4037f4:	940c      	str	r4, [sp, #48]	; 0x30
  4037f6:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4037f8:	a908      	add	r1, sp, #32
  4037fa:	4a94      	ldr	r2, [pc, #592]	; (403a4c <main+0x2c8>)
  4037fc:	4b94      	ldr	r3, [pc, #592]	; (403a50 <main+0x2cc>)
  4037fe:	4895      	ldr	r0, [pc, #596]	; (403a54 <main+0x2d0>)
  403800:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  403802:	f8df 8294 	ldr.w	r8, [pc, #660]	; 403a98 <main+0x314>
  403806:	4893      	ldr	r0, [pc, #588]	; (403a54 <main+0x2d0>)
  403808:	47c0      	blx	r8
		usart_enable_rx(p_usart);
  40380a:	4f93      	ldr	r7, [pc, #588]	; (403a58 <main+0x2d4>)
  40380c:	4891      	ldr	r0, [pc, #580]	; (403a54 <main+0x2d0>)
  40380e:	47b8      	blx	r7
	usart_enable_tx(USART_SERIAL);
  403810:	4890      	ldr	r0, [pc, #576]	; (403a54 <main+0x2d0>)
  403812:	47c0      	blx	r8
	usart_enable_rx(USART_SERIAL);
  403814:	488f      	ldr	r0, [pc, #572]	; (403a54 <main+0x2d0>)
  403816:	47b8      	blx	r7
	usart_enable_interrupt(USART_SERIAL, US_IER_RXRDY);
  403818:	2101      	movs	r1, #1
  40381a:	488e      	ldr	r0, [pc, #568]	; (403a54 <main+0x2d0>)
  40381c:	4b8f      	ldr	r3, [pc, #572]	; (403a5c <main+0x2d8>)
  40381e:	4798      	blx	r3
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403820:	4b8f      	ldr	r3, [pc, #572]	; (403a60 <main+0x2dc>)
  403822:	2240      	movs	r2, #64	; 0x40
  403824:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  403828:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  40382c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403830:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb");
  403832:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403836:	f3bf 8f6f 	isb	sy
    SCB->CCR &= ~SCB_CCR_IC_Msk;            // disable I-Cache
  40383a:	6973      	ldr	r3, [r6, #20]
  40383c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  403840:	6173      	str	r3, [r6, #20]
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  403842:	f8c6 4250 	str.w	r4, [r6, #592]	; 0x250
  __ASM volatile ("dsb");
  403846:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40384a:	f3bf 8f6f 	isb	sy
	configure_uart(); 
	 
	 // draw smiley face 
	SCB_DisableICache(); 
	gfx_draw_filled_rect(100, 100, 20, 20, GFX_COLOR_YELLOW);
  40384e:	f64f 78e0 	movw	r8, #65504	; 0xffe0
  403852:	2314      	movs	r3, #20
  403854:	2164      	movs	r1, #100	; 0x64
  403856:	4f83      	ldr	r7, [pc, #524]	; (403a64 <main+0x2e0>)
  403858:	461a      	mov	r2, r3
  40385a:	f8cd 8000 	str.w	r8, [sp]
  40385e:	4608      	mov	r0, r1
  403860:	47b8      	blx	r7
	gfx_draw_filled_rect(200, 100, 20, 20, GFX_COLOR_YELLOW);
  403862:	2314      	movs	r3, #20
  403864:	f8cd 8000 	str.w	r8, [sp]
  403868:	2164      	movs	r1, #100	; 0x64
  40386a:	461a      	mov	r2, r3
  40386c:	20c8      	movs	r0, #200	; 0xc8
  40386e:	47b8      	blx	r7
	gfx_draw_filled_rect(80, 180, 20, 20, GFX_COLOR_YELLOW);
  403870:	2314      	movs	r3, #20
  403872:	f8cd 8000 	str.w	r8, [sp]
  403876:	21b4      	movs	r1, #180	; 0xb4
  403878:	461a      	mov	r2, r3
  40387a:	2050      	movs	r0, #80	; 0x50
  40387c:	47b8      	blx	r7
	gfx_draw_filled_rect(100, 200, 20, 20, GFX_COLOR_YELLOW);
  40387e:	2314      	movs	r3, #20
  403880:	f8cd 8000 	str.w	r8, [sp]
  403884:	21c8      	movs	r1, #200	; 0xc8
  403886:	461a      	mov	r2, r3
  403888:	2064      	movs	r0, #100	; 0x64
  40388a:	47b8      	blx	r7
	gfx_draw_filled_rect(120, 220, 20, 20, GFX_COLOR_YELLOW);
  40388c:	2314      	movs	r3, #20
  40388e:	f8cd 8000 	str.w	r8, [sp]
  403892:	21dc      	movs	r1, #220	; 0xdc
  403894:	461a      	mov	r2, r3
  403896:	2078      	movs	r0, #120	; 0x78
  403898:	47b8      	blx	r7
	gfx_draw_filled_rect(140, 220, 20, 20, GFX_COLOR_YELLOW);
  40389a:	2314      	movs	r3, #20
  40389c:	f8cd 8000 	str.w	r8, [sp]
  4038a0:	21dc      	movs	r1, #220	; 0xdc
  4038a2:	461a      	mov	r2, r3
  4038a4:	208c      	movs	r0, #140	; 0x8c
  4038a6:	47b8      	blx	r7
	gfx_draw_filled_rect(160, 220, 20, 20, GFX_COLOR_YELLOW);
  4038a8:	2314      	movs	r3, #20
  4038aa:	f8cd 8000 	str.w	r8, [sp]
  4038ae:	21dc      	movs	r1, #220	; 0xdc
  4038b0:	461a      	mov	r2, r3
  4038b2:	20a0      	movs	r0, #160	; 0xa0
  4038b4:	47b8      	blx	r7
	gfx_draw_filled_rect(180, 220, 20, 20, GFX_COLOR_YELLOW);
  4038b6:	2314      	movs	r3, #20
  4038b8:	f8cd 8000 	str.w	r8, [sp]
  4038bc:	21dc      	movs	r1, #220	; 0xdc
  4038be:	461a      	mov	r2, r3
  4038c0:	20b4      	movs	r0, #180	; 0xb4
  4038c2:	47b8      	blx	r7
	gfx_draw_filled_rect(200, 200, 20, 20, GFX_COLOR_YELLOW);
  4038c4:	2314      	movs	r3, #20
  4038c6:	21c8      	movs	r1, #200	; 0xc8
  4038c8:	f8cd 8000 	str.w	r8, [sp]
  4038cc:	461a      	mov	r2, r3
  4038ce:	4608      	mov	r0, r1
  4038d0:	47b8      	blx	r7
	gfx_draw_filled_rect(220, 180, 20, 20, GFX_COLOR_YELLOW);
  4038d2:	2314      	movs	r3, #20
  4038d4:	f8cd 8000 	str.w	r8, [sp]
  4038d8:	21b4      	movs	r1, #180	; 0xb4
  4038da:	461a      	mov	r2, r3
  4038dc:	20dc      	movs	r0, #220	; 0xdc
  4038de:	47b8      	blx	r7
  __ASM volatile ("dsb");
  4038e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4038e4:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4038e8:	f8c6 4250 	str.w	r4, [r6, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4038ec:	6973      	ldr	r3, [r6, #20]
  4038ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  4038f2:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb");
  4038f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4038f8:	f3bf 8f6f 	isb	sy
  4038fc:	f06f 0301 	mvn.w	r3, #1
  403900:	4d59      	ldr	r5, [pc, #356]	; (403a68 <main+0x2e4>)
	/*************** Application code variables start ***************/
	uint32_t i;
	
	for (i = 0; i < MAX_NUM_SHIFTS; i++)
	{
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  403902:	2600      	movs	r6, #0
  403904:	f8df e194 	ldr.w	lr, [pc, #404]	; 403a9c <main+0x318>
  403908:	461f      	mov	r7, r3
  40390a:	4b58      	ldr	r3, [pc, #352]	; (403a6c <main+0x2e8>)
	float inputPitch; 
	float oneOverInputPitch = 1.0f;
	float pitch_shift, power;
	float harmony_shifts[MAX_NUM_SHIFTS+1];
	harmony_shifts[0] = NO_SHIFT;
	harmony_shifts[1] = END_OF_SHIFTS; 
  40390c:	f8df c190 	ldr.w	ip, [pc, #400]	; 403aa0 <main+0x31c>
	harmony_shifts[0] = NO_SHIFT;
  403910:	f04f 587e 	mov.w	r8, #1065353216	; 0x3f800000
  403914:	1b7f      	subs	r7, r7, r5
	float closest_note = 0; 
	float desired_pitch; 
	uint32_t in_pitch_idx = 0; 
	uint32_t sin_cnt = 0; 
	uint32_t chorus_delay; 
	arm_fill_f32(0.0f, dry_circ_buffer, CIRC_BUF_SIZE);
  403916:	4956      	ldr	r1, [pc, #344]	; (403a70 <main+0x2ec>)
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  403918:	f8ce 6000 	str.w	r6, [lr]
	arm_fill_f32(0.0f, dry_circ_buffer, CIRC_BUF_SIZE);
  40391c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  403920:	601e      	str	r6, [r3, #0]
	arm_fill_f32(0.0f, dry_circ_buffer, CIRC_BUF_SIZE);
  403922:	4630      	mov	r0, r6
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  403924:	f8ce 4004 	str.w	r4, [lr, #4]
  403928:	4689      	mov	r9, r1
  40392a:	605c      	str	r4, [r3, #4]
	uint32_t sin_cnt = 0; 
  40392c:	46a3      	mov	fp, r4
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  40392e:	f8ce 6008 	str.w	r6, [lr, #8]
	uint32_t sin_cnt = 0; 
  403932:	46a2      	mov	sl, r4
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  403934:	609e      	str	r6, [r3, #8]
  403936:	9705      	str	r7, [sp, #20]
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  403938:	f8ce 400c 	str.w	r4, [lr, #12]
  40393c:	60dc      	str	r4, [r3, #12]
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  40393e:	f8ce 6010 	str.w	r6, [lr, #16]
  403942:	611e      	str	r6, [r3, #16]
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  403944:	f8ce 4014 	str.w	r4, [lr, #20]
  403948:	615c      	str	r4, [r3, #20]
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  40394a:	f8ce 6018 	str.w	r6, [lr, #24]
  40394e:	619e      	str	r6, [r3, #24]
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  403950:	f8ce 401c 	str.w	r4, [lr, #28]
  403954:	61dc      	str	r4, [r3, #28]
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  403956:	f8ce 6020 	str.w	r6, [lr, #32]
  40395a:	621e      	str	r6, [r3, #32]
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  40395c:	f8ce 4024 	str.w	r4, [lr, #36]	; 0x24
  403960:	625c      	str	r4, [r3, #36]	; 0x24
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  403962:	f8ce 6028 	str.w	r6, [lr, #40]	; 0x28
  403966:	629e      	str	r6, [r3, #40]	; 0x28
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  403968:	f8ce 402c 	str.w	r4, [lr, #44]	; 0x2c
  40396c:	62dc      	str	r4, [r3, #44]	; 0x2c
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  40396e:	f8ce 6030 	str.w	r6, [lr, #48]	; 0x30
  403972:	631e      	str	r6, [r3, #48]	; 0x30
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  403974:	f8ce 4034 	str.w	r4, [lr, #52]	; 0x34
  403978:	635c      	str	r4, [r3, #52]	; 0x34
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  40397a:	f8ce 6038 	str.w	r6, [lr, #56]	; 0x38
  40397e:	639e      	str	r6, [r3, #56]	; 0x38
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  403980:	f8ce 403c 	str.w	r4, [lr, #60]	; 0x3c
  403984:	63dc      	str	r4, [r3, #60]	; 0x3c
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  403986:	f8ce 6040 	str.w	r6, [lr, #64]	; 0x40
  40398a:	641e      	str	r6, [r3, #64]	; 0x40
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  40398c:	f8ce 4044 	str.w	r4, [lr, #68]	; 0x44
  403990:	645c      	str	r4, [r3, #68]	; 0x44
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  403992:	f8ce 6048 	str.w	r6, [lr, #72]	; 0x48
  403996:	649e      	str	r6, [r3, #72]	; 0x48
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  403998:	f8ce 404c 	str.w	r4, [lr, #76]	; 0x4c
  40399c:	64dc      	str	r4, [r3, #76]	; 0x4c
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  40399e:	f8ce 6050 	str.w	r6, [lr, #80]	; 0x50
  4039a2:	651e      	str	r6, [r3, #80]	; 0x50
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  4039a4:	f8ce 4054 	str.w	r4, [lr, #84]	; 0x54
  4039a8:	655c      	str	r4, [r3, #84]	; 0x54
	arm_fill_f32(0.0f, dry_circ_buffer, CIRC_BUF_SIZE);
  4039aa:	4b32      	ldr	r3, [pc, #200]	; (403a74 <main+0x2f0>)
	harmony_shifts[0] = NO_SHIFT;
  4039ac:	f8cd 8020 	str.w	r8, [sp, #32]
	harmony_shifts[1] = END_OF_SHIFTS; 
  4039b0:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
	harmony_shifts[MAX_NUM_SHIFTS] = END_OF_SHIFTS; // should never change 
  4039b4:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
	arm_fill_f32(0.0f, dry_circ_buffer, CIRC_BUF_SIZE);
  4039b8:	4798      	blx	r3
	arm_fill_f32(0.0f, delay_circ_buffer, CIRC_BUF_SIZE);
  4039ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4039be:	4630      	mov	r0, r6
  4039c0:	492d      	ldr	r1, [pc, #180]	; (403a78 <main+0x2f4>)
  4039c2:	4b2c      	ldr	r3, [pc, #176]	; (403a74 <main+0x2f0>)
  4039c4:	eddf aa2d 	vldr	s21, [pc, #180]	; 403a7c <main+0x2f8>
			
			// Add audio effects 
			uint32_t curr_idx = circ_buf_idx - (uint32_t)WIN_SIZE;
			// chorus params 
			float n_freq = chorus_speed / PSOLA_SAMPLE_RATE; 
			uint32_t num_samples_in_period = 1 / n_freq; 
  4039c8:	eddf 8a2d 	vldr	s17, [pc, #180]	; 403a80 <main+0x2fc>
  4039cc:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 403aa4 <main+0x320>
	arm_fill_f32(0.0f, delay_circ_buffer, CIRC_BUF_SIZE);
  4039d0:	4798      	blx	r3
		if (dataReceived)
  4039d2:	4b2c      	ldr	r3, [pc, #176]	; (403a84 <main+0x300>)
  4039d4:	781b      	ldrb	r3, [r3, #0]
  4039d6:	2b00      	cmp	r3, #0
  4039d8:	d0fb      	beq.n	4039d2 <main+0x24e>
			dataReceived = false; 
  4039da:	4a2a      	ldr	r2, [pc, #168]	; (403a84 <main+0x300>)
  4039dc:	2300      	movs	r3, #0
			inputPitch = computeWaveletPitch(processBuffer);
  4039de:	482a      	ldr	r0, [pc, #168]	; (403a88 <main+0x304>)
			dataReceived = false; 
  4039e0:	7013      	strb	r3, [r2, #0]
			inputPitch = computeWaveletPitch(processBuffer);
  4039e2:	4b2a      	ldr	r3, [pc, #168]	; (403a8c <main+0x308>)
  4039e4:	4798      	blx	r3
			oneOverInputPitch = 1.0f / inputPitch;
  4039e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  4039ea:	ee07 0a90 	vmov	s15, r0
  4039ee:	ed9f 9a28 	vldr	s18, [pc, #160]	; 403a90 <main+0x30c>
	uint32_t hi = 127;
  4039f2:	207f      	movs	r0, #127	; 0x7f
	uint32_t lo = 12; // lowest at C0
  4039f4:	220c      	movs	r2, #12
  4039f6:	fe87 8aaa 	vmaxnm.f32	s16, s15, s21
			oneOverInputPitch = 1.0f / inputPitch;
  4039fa:	eec7 9a08 	vdiv.f32	s19, s14, s16
  4039fe:	eddf 7a25 	vldr	s15, [pc, #148]	; 403a94 <main+0x310>
		mid = (hi + lo) >> 1;
  403a02:	1813      	adds	r3, r2, r0
  403a04:	085b      	lsrs	r3, r3, #1
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  403a06:	ee77 7ac8 	vsub.f32	s15, s15, s16
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  403a0a:	ee39 7a48 	vsub.f32	s14, s18, s16
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  403a0e:	1c59      	adds	r1, r3, #1
  403a10:	eef0 7ae7 	vabs.f32	s15, s15
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  403a14:	eeb0 7ac7 	vabs.f32	s14, s14
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  403a18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  403a1c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
		if (d2 <= d1)
  403a20:	ee17 5a90 	vmov	r5, s15
  403a24:	ee17 4a10 	vmov	r4, s14
  403a28:	42ac      	cmp	r4, r5
  403a2a:	d25c      	bcs.n	403ae6 <main+0x362>
  403a2c:	e13b      	b.n	403ca6 <main+0x522>
  403a2e:	bf00      	nop
  403a30:	004025d9 	.word	0x004025d9
  403a34:	00402649 	.word	0x00402649
  403a38:	e000ed00 	.word	0xe000ed00
  403a3c:	00400f1d 	.word	0x00400f1d
  403a40:	00400361 	.word	0x00400361
  403a44:	004010dd 	.word	0x004010dd
  403a48:	00403125 	.word	0x00403125
  403a4c:	08f0d180 	.word	0x08f0d180
  403a50:	004024cd 	.word	0x004024cd
  403a54:	40028000 	.word	0x40028000
  403a58:	00402575 	.word	0x00402575
  403a5c:	0040257d 	.word	0x0040257d
  403a60:	e000e100 	.word	0xe000e100
  403a64:	00400d45 	.word	0x00400d45
  403a68:	20444400 	.word	0x20444400
  403a6c:	2044a818 	.word	0x2044a818
  403a70:	20434000 	.word	0x20434000
  403a74:	00404019 	.word	0x00404019
  403a78:	20420000 	.word	0x20420000
  403a7c:	42c80000 	.word	0x42c80000
  403a80:	4735a700 	.word	0x4735a700
  403a84:	2040401c 	.word	0x2040401c
  403a88:	20446800 	.word	0x20446800
  403a8c:	004005b9 	.word	0x004005b9
  403a90:	43dc0000 	.word	0x43dc0000
  403a94:	43e914fe 	.word	0x43e914fe
  403a98:	0040256d 	.word	0x0040256d
  403a9c:	2044a870 	.word	0x2044a870
  403aa0:	bf800000 	.word	0xbf800000
  403aa4:	20400014 	.word	0x20400014
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  403aa8:	1c5c      	adds	r4, r3, #1
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  403aaa:	4a87      	ldr	r2, [pc, #540]	; (403cc8 <main+0x544>)
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  403aac:	4d86      	ldr	r5, [pc, #536]	; (403cc8 <main+0x544>)
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  403aae:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  403ab2:	eb05 0584 	add.w	r5, r5, r4, lsl #2
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  403ab6:	ed92 9a00 	vldr	s18, [r2]
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  403aba:	edd5 7a00 	vldr	s15, [r5]
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  403abe:	ee39 7a48 	vsub.f32	s14, s18, s16
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  403ac2:	ee77 7ac8 	vsub.f32	s15, s15, s16
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  403ac6:	eeb0 7ac7 	vabs.f32	s14, s14
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  403aca:	eef0 7ae7 	vabs.f32	s15, s15
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  403ace:	eebc 7ac7 	vcvt.u32.f32	s14, s14
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  403ad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		if (d2 <= d1)
  403ad6:	ee17 2a10 	vmov	r2, s14
  403ada:	ee17 5a90 	vmov	r5, s15
  403ade:	42aa      	cmp	r2, r5
  403ae0:	f0c0 80e2 	bcc.w	403ca8 <main+0x524>
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  403ae4:	4621      	mov	r1, r4
		mid = (hi + lo) >> 1;
  403ae6:	180b      	adds	r3, r1, r0
	while (lo < hi)
  403ae8:	4281      	cmp	r1, r0
		mid = (hi + lo) >> 1;
  403aea:	ea4f 0353 	mov.w	r3, r3, lsr #1
	while (lo < hi)
  403aee:	d3db      	bcc.n	403aa8 <main+0x324>
  403af0:	4b75      	ldr	r3, [pc, #468]	; (403cc8 <main+0x544>)
  403af2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  403af6:	ed93 9a00 	vldr	s18, [r3]
				if (autotune)
  403afa:	4b74      	ldr	r3, [pc, #464]	; (403ccc <main+0x548>)
  403afc:	781a      	ldrb	r2, [r3, #0]
				if (pitch_bend < 56 || pitch_bend > 72) // higher bounds for noise affecting pitch bend wheel 
  403afe:	4b74      	ldr	r3, [pc, #464]	; (403cd0 <main+0x54c>)
					desired_pitch = closest_note;
  403b00:	2a00      	cmp	r2, #0
				if (pitch_bend < 56 || pitch_bend > 72) // higher bounds for noise affecting pitch bend wheel 
  403b02:	681b      	ldr	r3, [r3, #0]
					desired_pitch = closest_note;
  403b04:	bf14      	ite	ne
  403b06:	eef0 7a49 	vmovne.f32	s15, s18
  403b0a:	eef0 7a48 	vmoveq.f32	s15, s16
				if (pitch_bend < 56 || pitch_bend > 72) // higher bounds for noise affecting pitch bend wheel 
  403b0e:	2b37      	cmp	r3, #55	; 0x37
  403b10:	d903      	bls.n	403b1a <main+0x396>
  403b12:	4b6f      	ldr	r3, [pc, #444]	; (403cd0 <main+0x54c>)
  403b14:	681b      	ldr	r3, [r3, #0]
  403b16:	2b48      	cmp	r3, #72	; 0x48
  403b18:	d91e      	bls.n	403b58 <main+0x3d4>
					bend_pitch(&desired_pitch, in_pitch_idx, (uint32_t)pitch_bend);
  403b1a:	4b6d      	ldr	r3, [pc, #436]	; (403cd0 <main+0x54c>)
  403b1c:	681b      	ldr	r3, [r3, #0]
	if (pitch_idx < 0 || pitch_idx > 127 || bend < 0 || bend > 127)
  403b1e:	2b7f      	cmp	r3, #127	; 0x7f
  403b20:	d81a      	bhi.n	403b58 <main+0x3d4>
	if (pitch_bend > 64)
  403b22:	4b6b      	ldr	r3, [pc, #428]	; (403cd0 <main+0x54c>)
  403b24:	681b      	ldr	r3, [r3, #0]
  403b26:	2b40      	cmp	r3, #64	; 0x40
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  403b28:	4b69      	ldr	r3, [pc, #420]	; (403cd0 <main+0x54c>)
  403b2a:	edd3 6a00 	vldr	s13, [r3]
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  403b2e:	4b66      	ldr	r3, [pc, #408]	; (403cc8 <main+0x544>)
  403b30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
	if (pitch_bend > 64)
  403b34:	f200 821c 	bhi.w	403f70 <main+0x7ec>
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  403b38:	eef8 6a66 	vcvt.f32.u32	s13, s13
  403b3c:	ed9f 6a65 	vldr	s12, [pc, #404]	; 403cd4 <main+0x550>
  403b40:	ed9f 7a65 	vldr	s14, [pc, #404]	; 403cd8 <main+0x554>
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  403b44:	ed50 5a02 	vldr	s11, [r0, #-8]
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  403b48:	ee76 6ac6 	vsub.f32	s13, s13, s12
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  403b4c:	ee39 6a65 	vsub.f32	s12, s18, s11
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  403b50:	ee26 7a87 	vmul.f32	s14, s13, s14
  403b54:	eee7 7a06 	vfma.f32	s15, s14, s12
				pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  403b58:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
			arm_power_f32(processBuffer, WIN_SIZE>>2, &power);
  403b5c:	aa07      	add	r2, sp, #28
				pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  403b5e:	ee77 7ac8 	vsub.f32	s15, s15, s16
			arm_power_f32(processBuffer, WIN_SIZE>>2, &power);
  403b62:	f44f 7180 	mov.w	r1, #256	; 0x100
  403b66:	485d      	ldr	r0, [pc, #372]	; (403cdc <main+0x558>)
				pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  403b68:	eeb0 7a4a 	vmov.f32	s14, s20
			arm_power_f32(processBuffer, WIN_SIZE>>2, &power);
  403b6c:	4b5c      	ldr	r3, [pc, #368]	; (403ce0 <main+0x55c>)
				pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  403b6e:	eea9 7aa7 	vfma.f32	s14, s19, s15
				harmony_shifts[0] = pitch_shift ;
  403b72:	ed8d 7a08 	vstr	s14, [sp, #32]
			arm_power_f32(processBuffer, WIN_SIZE>>2, &power);
  403b76:	4798      	blx	r3
			if (inputPitch > MINIMUM_PITCH && power > POWER_THRESHOLD)
  403b78:	eeb4 8aea 	vcmpe.f32	s16, s21
  403b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403b80:	f340 80b8 	ble.w	403cf4 <main+0x570>
  403b84:	eddf 7a57 	vldr	s15, [pc, #348]	; 403ce4 <main+0x560>
  403b88:	ed9d 7a07 	vldr	s14, [sp, #28]
  403b8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
  403b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403b94:	f340 80ae 	ble.w	403cf4 <main+0x570>
				while(harmony_list_read[i].freq > 1.0f && i < MAX_NUM_SHIFTS-1)
  403b98:	4b53      	ldr	r3, [pc, #332]	; (403ce8 <main+0x564>)
  403b9a:	681b      	ldr	r3, [r3, #0]
  403b9c:	edd3 7a00 	vldr	s15, [r3]
  403ba0:	eef4 7aca 	vcmpe.f32	s15, s20
  403ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403ba8:	f340 81da 	ble.w	403f60 <main+0x7dc>
						if (pitch_shift > 0.1f && pitch_shift < 6.0f) // range check 
  403bac:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
				while(harmony_list_read[i].freq > 1.0f && i < MAX_NUM_SHIFTS-1)
  403bb0:	2001      	movs	r0, #1
					if (Abs(harmony_list_read[i].freq - closest_note) > 1.0f) // don't harmonize input pitch twice 
  403bb2:	eeb0 7a4a 	vmov.f32	s14, s20
				while(harmony_list_read[i].freq > 1.0f && i < MAX_NUM_SHIFTS-1)
  403bb6:	2200      	movs	r2, #0
						if (pitch_shift > 0.1f && pitch_shift < 6.0f) // range check 
  403bb8:	eddf 6a4c 	vldr	s13, [pc, #304]	; 403cec <main+0x568>
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  403bbc:	eddf 3a45 	vldr	s7, [pc, #276]	; 403cd4 <main+0x550>
  403bc0:	eddf 4a45 	vldr	s9, [pc, #276]	; 403cd8 <main+0x554>
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  403bc4:	ed9f 4a4a 	vldr	s8, [pc, #296]	; 403cf0 <main+0x56c>
  403bc8:	e02e      	b.n	403c28 <main+0x4a4>
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  403bca:	ee75 5ae3 	vsub.f32	s11, s11, s7
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  403bce:	ed94 3a00 	vldr	s6, [r4]
  403bd2:	ed14 5a02 	vldr	s10, [r4, #-8]
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  403bd6:	ee65 5aa4 	vmul.f32	s11, s11, s9
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  403bda:	ee33 5a45 	vsub.f32	s10, s6, s10
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  403bde:	eee5 7a85 	vfma.f32	s15, s11, s10
						pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  403be2:	ee77 7ac8 	vsub.f32	s15, s15, s16
  403be6:	ee67 7aa9 	vmul.f32	s15, s15, s19
						if (pitch_shift > 0.1f && pitch_shift < 6.0f) // range check 
  403bea:	eef4 7a66 	vcmp.f32	s15, s13
  403bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403bf2:	dd0c      	ble.n	403c0e <main+0x48a>
  403bf4:	eef4 7a46 	vcmp.f32	s15, s12
  403bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403bfc:	d507      	bpl.n	403c0e <main+0x48a>
							harmony_shifts[num_of_shifts++] = pitch_shift;
  403bfe:	a914      	add	r1, sp, #80	; 0x50
						pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  403c00:	ee77 7a87 	vadd.f32	s15, s15, s14
							harmony_shifts[num_of_shifts++] = pitch_shift;
  403c04:	eb01 0180 	add.w	r1, r1, r0, lsl #2
  403c08:	3001      	adds	r0, #1
  403c0a:	ed41 7a0c 	vstr	s15, [r1, #-48]	; 0xffffffd0
					i++; 
  403c0e:	3201      	adds	r2, #1
				while(harmony_list_read[i].freq > 1.0f && i < MAX_NUM_SHIFTS-1)
  403c10:	3308      	adds	r3, #8
  403c12:	edd3 7a00 	vldr	s15, [r3]
  403c16:	2a0a      	cmp	r2, #10
  403c18:	f000 81a3 	beq.w	403f62 <main+0x7de>
  403c1c:	eef4 7ac7 	vcmpe.f32	s15, s14
  403c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403c24:	f340 819d 	ble.w	403f62 <main+0x7de>
					if (Abs(harmony_list_read[i].freq - closest_note) > 1.0f) // don't harmonize input pitch twice 
  403c28:	edd3 7a00 	vldr	s15, [r3]
  403c2c:	ee77 7ac9 	vsub.f32	s15, s15, s18
  403c30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  403c34:	edd3 7a00 	vldr	s15, [r3]
  403c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403c3c:	bf4c      	ite	mi
  403c3e:	ee79 7a67 	vsubmi.f32	s15, s18, s15
  403c42:	ee77 7ac9 	vsubpl.f32	s15, s15, s18
  403c46:	eef4 7ac7 	vcmpe.f32	s15, s14
  403c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403c4e:	bfcc      	ite	gt
  403c50:	2101      	movgt	r1, #1
  403c52:	2100      	movle	r1, #0
  403c54:	2900      	cmp	r1, #0
  403c56:	d0da      	beq.n	403c0e <main+0x48a>
						if (pitch_bend != 64)
  403c58:	491d      	ldr	r1, [pc, #116]	; (403cd0 <main+0x54c>)
						desired_pitch = harmony_list_read[i].freq; 
  403c5a:	edd3 7a00 	vldr	s15, [r3]
						if (pitch_bend != 64)
  403c5e:	6809      	ldr	r1, [r1, #0]
  403c60:	2940      	cmp	r1, #64	; 0x40
  403c62:	d0be      	beq.n	403be2 <main+0x45e>
							bend_pitch(&desired_pitch, harmony_list_read[i].idx, (uint32_t)pitch_bend);
  403c64:	6859      	ldr	r1, [r3, #4]
  403c66:	4c1a      	ldr	r4, [pc, #104]	; (403cd0 <main+0x54c>)
	if (pitch_idx < 0 || pitch_idx > 127 || bend < 0 || bend > 127)
  403c68:	297f      	cmp	r1, #127	; 0x7f
							bend_pitch(&desired_pitch, harmony_list_read[i].idx, (uint32_t)pitch_bend);
  403c6a:	6824      	ldr	r4, [r4, #0]
	if (pitch_idx < 0 || pitch_idx > 127 || bend < 0 || bend > 127)
  403c6c:	d8b9      	bhi.n	403be2 <main+0x45e>
  403c6e:	2c7f      	cmp	r4, #127	; 0x7f
  403c70:	d8b7      	bhi.n	403be2 <main+0x45e>
	if (pitch_bend > 64)
  403c72:	4c17      	ldr	r4, [pc, #92]	; (403cd0 <main+0x54c>)
  403c74:	6824      	ldr	r4, [r4, #0]
  403c76:	2c40      	cmp	r4, #64	; 0x40
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  403c78:	4c15      	ldr	r4, [pc, #84]	; (403cd0 <main+0x54c>)
  403c7a:	edd4 5a00 	vldr	s11, [r4]
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  403c7e:	4c12      	ldr	r4, [pc, #72]	; (403cc8 <main+0x544>)
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  403c80:	eef8 5a65 	vcvt.f32.u32	s11, s11
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  403c84:	eb04 0481 	add.w	r4, r4, r1, lsl #2
  403c88:	4621      	mov	r1, r4
	if (pitch_bend > 64)
  403c8a:	d99e      	bls.n	403bca <main+0x446>
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  403c8c:	ee75 5ac4 	vsub.f32	s11, s11, s8
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  403c90:	ed94 3a02 	vldr	s6, [r4, #8]
  403c94:	ed94 5a00 	vldr	s10, [r4]
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  403c98:	ee65 5aa4 	vmul.f32	s11, s11, s9
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  403c9c:	ee33 5a45 	vsub.f32	s10, s6, s10
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  403ca0:	eee5 7a85 	vfma.f32	s15, s11, s10
  403ca4:	e79d      	b.n	403be2 <main+0x45e>
		if (d2 <= d1)
  403ca6:	4611      	mov	r1, r2
	while (lo < hi)
  403ca8:	428b      	cmp	r3, r1
  403caa:	f240 8172 	bls.w	403f92 <main+0x80e>
  403cae:	185c      	adds	r4, r3, r1
  403cb0:	4618      	mov	r0, r3
  403cb2:	460a      	mov	r2, r1
  403cb4:	4904      	ldr	r1, [pc, #16]	; (403cc8 <main+0x544>)
  403cb6:	0863      	lsrs	r3, r4, #1
  403cb8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  403cbc:	ed91 9a00 	vldr	s18, [r1]
  403cc0:	edd1 7a01 	vldr	s15, [r1, #4]
  403cc4:	e69d      	b.n	403a02 <main+0x27e>
  403cc6:	bf00      	nop
  403cc8:	00408098 	.word	0x00408098
  403ccc:	2040002c 	.word	0x2040002c
  403cd0:	20400050 	.word	0x20400050
  403cd4:	42800000 	.word	0x42800000
  403cd8:	3c800000 	.word	0x3c800000
  403cdc:	20446800 	.word	0x20446800
  403ce0:	0040409d 	.word	0x0040409d
  403ce4:	358637bd 	.word	0x358637bd
  403ce8:	20400048 	.word	0x20400048
  403cec:	bf666666 	.word	0xbf666666
  403cf0:	427c0000 	.word	0x427c0000
				harmony_shifts[1] = END_OF_SHIFTS; 	
  403cf4:	4ba8      	ldr	r3, [pc, #672]	; (403f98 <main+0x814>)
  403cf6:	9309      	str	r3, [sp, #36]	; 0x24
			create_harmonies(processBuffer, out_buffer, inputPitch, harmony_shifts, (float)harm_volume, (float)dry_volume); 
  403cf8:	4ba8      	ldr	r3, [pc, #672]	; (403f9c <main+0x818>)
  403cfa:	4aa9      	ldr	r2, [pc, #676]	; (403fa0 <main+0x81c>)
  403cfc:	6819      	ldr	r1, [r3, #0]
  403cfe:	ab08      	add	r3, sp, #32
  403d00:	6810      	ldr	r0, [r2, #0]
  403d02:	ee18 2a10 	vmov	r2, s16
  403d06:	9100      	str	r1, [sp, #0]
  403d08:	9001      	str	r0, [sp, #4]
  403d0a:	49a6      	ldr	r1, [pc, #664]	; (403fa4 <main+0x820>)
  403d0c:	48a6      	ldr	r0, [pc, #664]	; (403fa8 <main+0x824>)
  403d0e:	4ca7      	ldr	r4, [pc, #668]	; (403fac <main+0x828>)
  403d10:	47a0      	blx	r4
  403d12:	4da4      	ldr	r5, [pc, #656]	; (403fa4 <main+0x820>)
  403d14:	465a      	mov	r2, fp
				dry_circ_buffer[circ_buf_idx++ & CIRC_MASK] = out_buffer[i];
  403d16:	f3c2 030d 	ubfx	r3, r2, #0, #14
  403d1a:	f855 1b04 	ldr.w	r1, [r5], #4
  403d1e:	3201      	adds	r2, #1
  403d20:	eb09 0383 	add.w	r3, r9, r3, lsl #2
  403d24:	6019      	str	r1, [r3, #0]
			for (i = 0; i < WIN_SIZE; i++)
  403d26:	4ba2      	ldr	r3, [pc, #648]	; (403fb0 <main+0x82c>)
  403d28:	429d      	cmp	r5, r3
  403d2a:	d1f4      	bne.n	403d16 <main+0x592>
			float n_freq = chorus_speed / PSOLA_SAMPLE_RATE; 
  403d2c:	4ba1      	ldr	r3, [pc, #644]	; (403fb4 <main+0x830>)
  403d2e:	ed9f 8aa2 	vldr	s16, [pc, #648]	; 403fb8 <main+0x834>
  403d32:	edd3 7a00 	vldr	s15, [r3]
  403d36:	f50b 6380 	add.w	r3, fp, #1024	; 0x400
			uint32_t num_samples_in_period = 1 / n_freq; 
  403d3a:	9504      	str	r5, [sp, #16]
  403d3c:	4655      	mov	r5, sl
  403d3e:	ee88 7aa7 	vdiv.f32	s14, s17, s15
  403d42:	4c98      	ldr	r4, [pc, #608]	; (403fa4 <main+0x820>)
			for (i = 0; i < WIN_SIZE; i++, curr_idx++)
			{				
				out_buffer[i] = (1.0f - 0.5*(delay_volume + chorus_volume + reverb_volume)) * out_buffer[i]; 
						
				// chorus
				chorus_delay = (0.008f + 0.001f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  403d44:	ed9f aa9d 	vldr	s20, [pc, #628]	; 403fbc <main+0x838>
  403d48:	eddf 9a9d 	vldr	s19, [pc, #628]	; 403fc0 <main+0x83c>
				if (sin_cnt == num_samples_in_period)
					sin_cnt = 0;
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  403d4c:	ed9f 9a9d 	vldr	s18, [pc, #628]	; 403fc4 <main+0x840>
  403d50:	9303      	str	r3, [sp, #12]
  403d52:	ee27 8a88 	vmul.f32	s16, s15, s16
			uint32_t num_samples_in_period = 1 / n_freq; 
  403d56:	eefc 7ac7 	vcvt.u32.f32	s15, s14
  403d5a:	edcd 7a02 	vstr	s15, [sp, #8]
				out_buffer[i] = (1.0f - 0.5*(delay_volume + chorus_volume + reverb_volume)) * out_buffer[i]; 
  403d5e:	4b9a      	ldr	r3, [pc, #616]	; (403fc8 <main+0x844>)
				chorus_delay = (0.008f + 0.001f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  403d60:	f105 0a01 	add.w	sl, r5, #1
				out_buffer[i] = (1.0f - 0.5*(delay_volume + chorus_volume + reverb_volume)) * out_buffer[i]; 
  403d64:	4e99      	ldr	r6, [pc, #612]	; (403fcc <main+0x848>)
  403d66:	ed93 7a00 	vldr	s14, [r3]
  403d6a:	4b99      	ldr	r3, [pc, #612]	; (403fd0 <main+0x84c>)
  403d6c:	edd3 7a00 	vldr	s15, [r3]
  403d70:	4b98      	ldr	r3, [pc, #608]	; (403fd4 <main+0x850>)
  403d72:	ee77 7a27 	vadd.f32	s15, s14, s15
  403d76:	edd3 6a00 	vldr	s13, [r3]
  403d7a:	4b97      	ldr	r3, [pc, #604]	; (403fd8 <main+0x854>)
  403d7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
  403d80:	ee17 0a90 	vmov	r0, s15
  403d84:	4798      	blx	r3
  403d86:	2200      	movs	r2, #0
  403d88:	4b94      	ldr	r3, [pc, #592]	; (403fdc <main+0x858>)
  403d8a:	47b0      	blx	r6
  403d8c:	4e94      	ldr	r6, [pc, #592]	; (403fe0 <main+0x85c>)
  403d8e:	4602      	mov	r2, r0
  403d90:	460b      	mov	r3, r1
  403d92:	2000      	movs	r0, #0
  403d94:	4993      	ldr	r1, [pc, #588]	; (403fe4 <main+0x860>)
  403d96:	47b0      	blx	r6
  403d98:	4606      	mov	r6, r0
  403d9a:	460f      	mov	r7, r1
  403d9c:	6820      	ldr	r0, [r4, #0]
  403d9e:	4b8e      	ldr	r3, [pc, #568]	; (403fd8 <main+0x854>)
  403da0:	4798      	blx	r3
  403da2:	4602      	mov	r2, r0
  403da4:	460b      	mov	r3, r1
  403da6:	4630      	mov	r0, r6
  403da8:	4639      	mov	r1, r7
  403daa:	4e88      	ldr	r6, [pc, #544]	; (403fcc <main+0x848>)
  403dac:	47b0      	blx	r6
  403dae:	4b8e      	ldr	r3, [pc, #568]	; (403fe8 <main+0x864>)
  403db0:	4798      	blx	r3
				chorus_delay = (0.008f + 0.001f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  403db2:	ee07 5a90 	vmov	s15, r5
				if (sin_cnt == num_samples_in_period)
  403db6:	9b02      	ldr	r3, [sp, #8]
				chorus_delay = (0.008f + 0.001f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  403db8:	eef8 7a67 	vcvt.f32.u32	s15, s15
				out_buffer[i] = (1.0f - 0.5*(delay_volume + chorus_volume + reverb_volume)) * out_buffer[i]; 
  403dbc:	6020      	str	r0, [r4, #0]
				if (sin_cnt == num_samples_in_period)
  403dbe:	4553      	cmp	r3, sl
  403dc0:	bf14      	ite	ne
  403dc2:	4655      	movne	r5, sl
  403dc4:	2500      	moveq	r5, #0
				chorus_delay = (0.008f + 0.001f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  403dc6:	4b89      	ldr	r3, [pc, #548]	; (403fec <main+0x868>)
				// delay
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
				out_buffer[i] += delay_volume * delay_circ_buffer[curr_idx & CIRC_MASK];
				
				// reverb
				out_buffer[i] += reverb_volume * 0.33f *
  403dc8:	4f82      	ldr	r7, [pc, #520]	; (403fd4 <main+0x850>)
				chorus_delay = (0.008f + 0.001f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  403dca:	ee67 7a88 	vmul.f32	s15, s15, s16
  403dce:	ee17 0a90 	vmov	r0, s15
  403dd2:	4798      	blx	r3
  403dd4:	eef0 7a69 	vmov.f32	s15, s19
  403dd8:	ee07 0a10 	vmov	s14, r0
						(dry_circ_buffer[(curr_idx - 2001)  & CIRC_MASK] +
  403ddc:	f46f 63fa 	mvn.w	r3, #2000	; 0x7d0
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  403de0:	4a7b      	ldr	r2, [pc, #492]	; (403fd0 <main+0x84c>)
														dry_circ_buffer[(curr_idx - 809 - chorus_delay)  & CIRC_MASK]));			
  403de2:	f46f 7e4a 	mvn.w	lr, #808	; 0x328
				chorus_delay = (0.008f + 0.001f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  403de6:	eee7 7a0a 	vfma.f32	s15, s14, s20
						(dry_circ_buffer[(curr_idx - 2001)  & CIRC_MASK] +
  403dea:	eb0b 0103 	add.w	r1, fp, r3
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  403dee:	edd2 4a00 	vldr	s9, [r2]
						dry_circ_buffer[(curr_idx - 1503)  & CIRC_MASK] + 
  403df2:	f2ab 53df 	subw	r3, fp, #1503	; 0x5df
						dry_circ_buffer[(curr_idx - 1203)  & CIRC_MASK] ); 
  403df6:	f2ab 42b3 	subw	r2, fp, #1203	; 0x4b3
						(dry_circ_buffer[(curr_idx - 2001)  & CIRC_MASK] +
  403dfa:	f3c1 010d 	ubfx	r1, r1, #0, #14
						dry_circ_buffer[(curr_idx - 1503)  & CIRC_MASK] + 
  403dfe:	f3c3 030d 	ubfx	r3, r3, #0, #14
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  403e02:	487b      	ldr	r0, [pc, #492]	; (403ff0 <main+0x86c>)
						dry_circ_buffer[(curr_idx - 1203)  & CIRC_MASK] ); 
  403e04:	f3c2 020d 	ubfx	r2, r2, #0, #14
						(dry_circ_buffer[(curr_idx - 2001)  & CIRC_MASK] +
  403e08:	eb09 0181 	add.w	r1, r9, r1, lsl #2
						dry_circ_buffer[(curr_idx - 1503)  & CIRC_MASK] + 
  403e0c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  403e10:	ee64 4a89 	vmul.f32	s9, s9, s18
				chorus_delay = (0.008f + 0.001f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  403e14:	ee67 7aa8 	vmul.f32	s15, s15, s17
						dry_circ_buffer[(curr_idx - 1203)  & CIRC_MASK] ); 
  403e18:	eb09 0282 	add.w	r2, r9, r2, lsl #2
						(dry_circ_buffer[(curr_idx - 2001)  & CIRC_MASK] +
  403e1c:	ed93 7a00 	vldr	s14, [r3]
  403e20:	ed91 6a00 	vldr	s12, [r1]
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  403e24:	f3cb 010d 	ubfx	r1, fp, #0, #14
				chorus_delay = (0.008f + 0.001f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  403e28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  403e2c:	edd4 5a00 	vldr	s11, [r4]
						(dry_circ_buffer[(curr_idx - 2001)  & CIRC_MASK] +
  403e30:	ee36 6a07 	vadd.f32	s12, s12, s14
				chorus_delay = (0.008f + 0.001f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * PSOLA_SAMPLE_RATE;
  403e34:	ee17 3a90 	vmov	r3, s15
						dry_circ_buffer[(curr_idx - 1503)  & CIRC_MASK] + 
  403e38:	edd2 7a00 	vldr	s15, [r2]
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  403e3c:	4a6d      	ldr	r2, [pc, #436]	; (403ff4 <main+0x870>)
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  403e3e:	ebab 0303 	sub.w	r3, fp, r3
						dry_circ_buffer[(curr_idx - 1503)  & CIRC_MASK] + 
  403e42:	ee36 6a27 	vadd.f32	s12, s12, s15
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  403e46:	6812      	ldr	r2, [r2, #0]
  403e48:	edd0 3a00 	vldr	s7, [r0]
														dry_circ_buffer[(curr_idx - 199 - chorus_delay)  & CIRC_MASK] +
  403e4c:	f1a3 06c7 	sub.w	r6, r3, #199	; 0xc7
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  403e50:	4869      	ldr	r0, [pc, #420]	; (403ff8 <main+0x874>)
  403e52:	ebab 0202 	sub.w	r2, fp, r2
														dry_circ_buffer[(curr_idx - 199 - chorus_delay)  & CIRC_MASK] +
  403e56:	f3c6 060d 	ubfx	r6, r6, #0, #14
				out_buffer[i] += reverb_volume * 0.33f *
  403e5a:	eddf 7a68 	vldr	s15, [pc, #416]	; 403ffc <main+0x878>
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  403e5e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
				out_buffer[i] += delay_volume * delay_circ_buffer[curr_idx & CIRC_MASK];
  403e62:	4859      	ldr	r0, [pc, #356]	; (403fc8 <main+0x844>)
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  403e64:	f3c2 020d 	ubfx	r2, r2, #0, #14
														dry_circ_buffer[(curr_idx - 199 - chorus_delay)  & CIRC_MASK] +
  403e68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
				out_buffer[i] += delay_volume * delay_circ_buffer[curr_idx & CIRC_MASK];
  403e6c:	ed90 4a00 	vldr	s8, [r0]
														dry_circ_buffer[(curr_idx - 401 - chorus_delay)  & CIRC_MASK] +
  403e70:	f46f 70c8 	mvn.w	r0, #400	; 0x190
				out_buffer[i] += reverb_volume * 0.33f *
  403e74:	ed97 5a00 	vldr	s10, [r7]
			for (i = 0; i < WIN_SIZE; i++, curr_idx++)
  403e78:	f10b 0b01 	add.w	fp, fp, #1
														dry_circ_buffer[(curr_idx - 401 - chorus_delay)  & CIRC_MASK] +
  403e7c:	1818      	adds	r0, r3, r0
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  403e7e:	4f5e      	ldr	r7, [pc, #376]	; (403ff8 <main+0x874>)
														dry_circ_buffer[(curr_idx - 199 - chorus_delay)  & CIRC_MASK] +
  403e80:	ed96 7a00 	vldr	s14, [r6]
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  403e84:	f3c3 060d 	ubfx	r6, r3, #0, #14
														dry_circ_buffer[(curr_idx - 401 - chorus_delay)  & CIRC_MASK] +
  403e88:	f3c0 000d 	ubfx	r0, r0, #0, #14
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  403e8c:	eb07 0282 	add.w	r2, r7, r2, lsl #2
														dry_circ_buffer[(curr_idx - 601 - chorus_delay)  & CIRC_MASK] +
  403e90:	f46f 7716 	mvn.w	r7, #600	; 0x258
				out_buffer[i] += reverb_volume * 0.33f *
  403e94:	ee25 5a27 	vmul.f32	s10, s10, s15
														dry_circ_buffer[(curr_idx - 401 - chorus_delay)  & CIRC_MASK] +
  403e98:	eb09 0080 	add.w	r0, r9, r0, lsl #2
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  403e9c:	ed92 3a00 	vldr	s6, [r2]
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  403ea0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
														dry_circ_buffer[(curr_idx - 199 - chorus_delay)  & CIRC_MASK] +
  403ea4:	edd0 7a00 	vldr	s15, [r0]
														dry_circ_buffer[(curr_idx - 601 - chorus_delay)  & CIRC_MASK] +
  403ea8:	19d8      	adds	r0, r3, r7
														dry_circ_buffer[(curr_idx - 809 - chorus_delay)  & CIRC_MASK]));			
  403eaa:	4473      	add	r3, lr
														dry_circ_buffer[(curr_idx - 199 - chorus_delay)  & CIRC_MASK] +
  403eac:	ee77 7a27 	vadd.f32	s15, s14, s15
														dry_circ_buffer[(curr_idx - 601 - chorus_delay)  & CIRC_MASK] +
  403eb0:	f3c0 000d 	ubfx	r0, r0, #0, #14
														dry_circ_buffer[(curr_idx - 199 - chorus_delay)  & CIRC_MASK] +
  403eb4:	ed96 7a00 	vldr	s14, [r6]
														dry_circ_buffer[(curr_idx - 809 - chorus_delay)  & CIRC_MASK]));			
  403eb8:	f3c3 030d 	ubfx	r3, r3, #0, #14
														dry_circ_buffer[(curr_idx - 601 - chorus_delay)  & CIRC_MASK] +
  403ebc:	eb09 0080 	add.w	r0, r9, r0, lsl #2
														dry_circ_buffer[(curr_idx - 199 - chorus_delay)  & CIRC_MASK] +
  403ec0:	ee77 7a87 	vadd.f32	s15, s15, s14
														dry_circ_buffer[(curr_idx - 809 - chorus_delay)  & CIRC_MASK]));			
  403ec4:	eb09 0383 	add.w	r3, r9, r3, lsl #2
														dry_circ_buffer[(curr_idx - 401 - chorus_delay)  & CIRC_MASK] +
  403ec8:	edd0 6a00 	vldr	s13, [r0]
														dry_circ_buffer[(curr_idx - 601 - chorus_delay)  & CIRC_MASK] +
  403ecc:	ed93 7a00 	vldr	s14, [r3]
														dry_circ_buffer[(curr_idx - 401 - chorus_delay)  & CIRC_MASK] +
  403ed0:	ee77 7aa6 	vadd.f32	s15, s15, s13
			for (i = 0; i < WIN_SIZE; i++, curr_idx++)
  403ed4:	9b03      	ldr	r3, [sp, #12]
  403ed6:	459b      	cmp	fp, r3
														dry_circ_buffer[(curr_idx - 601 - chorus_delay)  & CIRC_MASK] +
  403ed8:	ee77 7a87 	vadd.f32	s15, s15, s14
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  403edc:	eee4 5aa7 	vfma.f32	s11, s9, s15
  403ee0:	eef0 7a65 	vmov.f32	s15, s11
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  403ee4:	eeb0 7a65 	vmov.f32	s14, s11
				out_buffer[i] += reverb_volume * 0.33f *
  403ee8:	eee6 7a05 	vfma.f32	s15, s12, s10
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  403eec:	eea3 7a23 	vfma.f32	s14, s6, s7
				out_buffer[i] += reverb_volume * 0.33f *
  403ef0:	eee7 7a04 	vfma.f32	s15, s14, s8
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  403ef4:	ed81 7a00 	vstr	s14, [r1]
				out_buffer[i] += reverb_volume * 0.33f *
  403ef8:	ece4 7a01 	vstmia	r4!, {s15}
			for (i = 0; i < WIN_SIZE; i++, curr_idx++)
  403efc:	f47f af2f 	bne.w	403d5e <main+0x5da>
			}
	
			// scale output 
			arm_scale_f32(out_buffer, (float)INT16_MAX * master_volume, out_buffer, WIN_SIZE);
  403f00:	4b3f      	ldr	r3, [pc, #252]	; (404000 <main+0x87c>)
  403f02:	46aa      	mov	sl, r5
  403f04:	eddf 7a3f 	vldr	s15, [pc, #252]	; 404004 <main+0x880>
  403f08:	ed93 7a00 	vldr	s14, [r3]
  403f0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403f10:	4a24      	ldr	r2, [pc, #144]	; (403fa4 <main+0x820>)
  403f12:	ee67 7a27 	vmul.f32	s15, s14, s15
  403f16:	4c3c      	ldr	r4, [pc, #240]	; (404008 <main+0x884>)
  403f18:	4610      	mov	r0, r2
  403f1a:	9d04      	ldr	r5, [sp, #16]
  403f1c:	ee17 1a90 	vmov	r1, s15
  403f20:	47a0      	blx	r4
  403f22:	4b20      	ldr	r3, [pc, #128]	; (403fa4 <main+0x820>)
  403f24:	9f05      	ldr	r7, [sp, #20]
  403f26:	4a1f      	ldr	r2, [pc, #124]	; (403fa4 <main+0x820>)
			
			// Sound out 
			uint32_t idx = 0; 
			for(i = 0; i < IO_BUF_SIZE; i+=2)
			{
				outBuffer[i] = (uint16_t)(int16_t)(out_buffer[idx++]);  
  403f28:	f8d8 6000 	ldr.w	r6, [r8]
  403f2c:	1a98      	subs	r0, r3, r2
  403f2e:	ecf3 7a01 	vldmia	r3!, {s15}
  403f32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
				outBuffer[i+1] = outBuffer[i]; 
  403f36:	18fc      	adds	r4, r7, r3
			for(i = 0; i < IO_BUF_SIZE; i+=2)
  403f38:	429d      	cmp	r5, r3
				outBuffer[i] = (uint16_t)(int16_t)(out_buffer[idx++]);  
  403f3a:	edcd 7a02 	vstr	s15, [sp, #8]
  403f3e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  403f42:	5232      	strh	r2, [r6, r0]
				outBuffer[i+1] = outBuffer[i]; 
  403f44:	5a32      	ldrh	r2, [r6, r0]
  403f46:	b292      	uxth	r2, r2
  403f48:	5332      	strh	r2, [r6, r4]
			for(i = 0; i < IO_BUF_SIZE; i+=2)
  403f4a:	d1ec      	bne.n	403f26 <main+0x7a2>
			}
			
			// check if we're too slow 
			if (dataReceived)
  403f4c:	4b2f      	ldr	r3, [pc, #188]	; (40400c <main+0x888>)
  403f4e:	781b      	ldrb	r3, [r3, #0]
  403f50:	f003 02ff 	and.w	r2, r3, #255	; 0xff
  403f54:	2b00      	cmp	r3, #0
  403f56:	f47f ad3c 	bne.w	4039d2 <main+0x24e>
// 				{
// 					// taking too long ... uncomment for debug 
// 				}
			}
			else 
				dataReceived = false; 
  403f5a:	4b2c      	ldr	r3, [pc, #176]	; (40400c <main+0x888>)
  403f5c:	701a      	strb	r2, [r3, #0]
  403f5e:	e538      	b.n	4039d2 <main+0x24e>
				while(harmony_list_read[i].freq > 1.0f && i < MAX_NUM_SHIFTS-1)
  403f60:	2001      	movs	r0, #1
				harmony_shifts[num_of_shifts] = END_OF_SHIFTS; 
  403f62:	aa14      	add	r2, sp, #80	; 0x50
  403f64:	4b0c      	ldr	r3, [pc, #48]	; (403f98 <main+0x814>)
  403f66:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  403f6a:	f840 3c30 	str.w	r3, [r0, #-48]
  403f6e:	e6c3      	b.n	403cf8 <main+0x574>
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  403f70:	eef8 6a66 	vcvt.f32.u32	s13, s13
  403f74:	ed9f 6a26 	vldr	s12, [pc, #152]	; 404010 <main+0x88c>
  403f78:	ed9f 7a26 	vldr	s14, [pc, #152]	; 404014 <main+0x890>
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  403f7c:	edd0 5a02 	vldr	s11, [r0, #8]
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  403f80:	ee76 6ac6 	vsub.f32	s13, s13, s12
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  403f84:	ee35 6ac9 	vsub.f32	s12, s11, s18
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  403f88:	ee26 7a87 	vmul.f32	s14, s13, s14
  403f8c:	eee7 7a06 	vfma.f32	s15, s14, s12
  403f90:	e5e2      	b.n	403b58 <main+0x3d4>
	while (lo < hi)
  403f92:	4618      	mov	r0, r3
  403f94:	e5b1      	b.n	403afa <main+0x376>
  403f96:	bf00      	nop
  403f98:	bf800000 	.word	0xbf800000
  403f9c:	20400040 	.word	0x20400040
  403fa0:	2040003c 	.word	0x2040003c
  403fa4:	20444400 	.word	0x20444400
  403fa8:	20446800 	.word	0x20446800
  403fac:	0040117d 	.word	0x0040117d
  403fb0:	20445400 	.word	0x20445400
  403fb4:	20400030 	.word	0x20400030
  403fb8:	390dad45 	.word	0x390dad45
  403fbc:	3a83126f 	.word	0x3a83126f
  403fc0:	3c03126f 	.word	0x3c03126f
  403fc4:	3e4ccccd 	.word	0x3e4ccccd
  403fc8:	20430000 	.word	0x20430000
  403fcc:	00404c21 	.word	0x00404c21
  403fd0:	2041c35c 	.word	0x2041c35c
  403fd4:	20445400 	.word	0x20445400
  403fd8:	00404b79 	.word	0x00404b79
  403fdc:	3fe00000 	.word	0x3fe00000
  403fe0:	004048b9 	.word	0x004048b9
  403fe4:	3ff00000 	.word	0x3ff00000
  403fe8:	00405181 	.word	0x00405181
  403fec:	004042c1 	.word	0x004042c1
  403ff0:	20400034 	.word	0x20400034
  403ff4:	20400038 	.word	0x20400038
  403ff8:	20420000 	.word	0x20420000
  403ffc:	3ea8f5c3 	.word	0x3ea8f5c3
  404000:	2040004c 	.word	0x2040004c
  404004:	46fffe00 	.word	0x46fffe00
  404008:	00404349 	.word	0x00404349
  40400c:	2040401c 	.word	0x2040401c
  404010:	427c0000 	.word	0x427c0000
  404014:	3c800000 	.word	0x3c800000

00404018 <arm_fill_f32>:
  404018:	b430      	push	{r4, r5}
  40401a:	0895      	lsrs	r5, r2, #2
  40401c:	d00b      	beq.n	404036 <arm_fill_f32+0x1e>
  40401e:	460b      	mov	r3, r1
  404020:	462c      	mov	r4, r5
  404022:	3c01      	subs	r4, #1
  404024:	6018      	str	r0, [r3, #0]
  404026:	6058      	str	r0, [r3, #4]
  404028:	6098      	str	r0, [r3, #8]
  40402a:	60d8      	str	r0, [r3, #12]
  40402c:	f103 0310 	add.w	r3, r3, #16
  404030:	d1f7      	bne.n	404022 <arm_fill_f32+0xa>
  404032:	eb01 1105 	add.w	r1, r1, r5, lsl #4
  404036:	f012 0203 	ands.w	r2, r2, #3
  40403a:	d003      	beq.n	404044 <arm_fill_f32+0x2c>
  40403c:	3a01      	subs	r2, #1
  40403e:	f841 0b04 	str.w	r0, [r1], #4
  404042:	d1fb      	bne.n	40403c <arm_fill_f32+0x24>
  404044:	bc30      	pop	{r4, r5}
  404046:	4770      	bx	lr

00404048 <arm_copy_f32>:
  404048:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  40404c:	ea5f 0992 	movs.w	r9, r2, lsr #2
  404050:	d018      	beq.n	404084 <arm_copy_f32+0x3c>
  404052:	4604      	mov	r4, r0
  404054:	460b      	mov	r3, r1
  404056:	464d      	mov	r5, r9
  404058:	f8d4 8000 	ldr.w	r8, [r4]
  40405c:	f8d4 c004 	ldr.w	ip, [r4, #4]
  404060:	68a7      	ldr	r7, [r4, #8]
  404062:	68e6      	ldr	r6, [r4, #12]
  404064:	3d01      	subs	r5, #1
  404066:	f8c3 8000 	str.w	r8, [r3]
  40406a:	f8c3 c004 	str.w	ip, [r3, #4]
  40406e:	609f      	str	r7, [r3, #8]
  404070:	60de      	str	r6, [r3, #12]
  404072:	f104 0410 	add.w	r4, r4, #16
  404076:	f103 0310 	add.w	r3, r3, #16
  40407a:	d1ed      	bne.n	404058 <arm_copy_f32+0x10>
  40407c:	ea4f 1909 	mov.w	r9, r9, lsl #4
  404080:	4448      	add	r0, r9
  404082:	4449      	add	r1, r9
  404084:	f012 0203 	ands.w	r2, r2, #3
  404088:	d005      	beq.n	404096 <arm_copy_f32+0x4e>
  40408a:	f850 3b04 	ldr.w	r3, [r0], #4
  40408e:	3a01      	subs	r2, #1
  404090:	f841 3b04 	str.w	r3, [r1], #4
  404094:	d1f9      	bne.n	40408a <arm_copy_f32+0x42>
  404096:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
  40409a:	4770      	bx	lr

0040409c <arm_power_f32>:
  40409c:	b430      	push	{r4, r5}
  40409e:	088d      	lsrs	r5, r1, #2
  4040a0:	eddf 7a18 	vldr	s15, [pc, #96]	; 404104 <arm_power_f32+0x68>
  4040a4:	d01f      	beq.n	4040e6 <arm_power_f32+0x4a>
  4040a6:	4603      	mov	r3, r0
  4040a8:	462c      	mov	r4, r5
  4040aa:	edd3 6a00 	vldr	s13, [r3]
  4040ae:	ed93 7a01 	vldr	s14, [r3, #4]
  4040b2:	ee66 6aa6 	vmul.f32	s13, s13, s13
  4040b6:	ee27 6a07 	vmul.f32	s12, s14, s14
  4040ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
  4040be:	ed93 7a02 	vldr	s14, [r3, #8]
  4040c2:	ee76 7a27 	vadd.f32	s15, s12, s15
  4040c6:	ee67 6a07 	vmul.f32	s13, s14, s14
  4040ca:	ed93 7a03 	vldr	s14, [r3, #12]
  4040ce:	ee76 6aa7 	vadd.f32	s13, s13, s15
  4040d2:	ee27 7a07 	vmul.f32	s14, s14, s14
  4040d6:	3c01      	subs	r4, #1
  4040d8:	f103 0310 	add.w	r3, r3, #16
  4040dc:	ee77 7a26 	vadd.f32	s15, s14, s13
  4040e0:	d1e3      	bne.n	4040aa <arm_power_f32+0xe>
  4040e2:	eb00 1005 	add.w	r0, r0, r5, lsl #4
  4040e6:	f011 0103 	ands.w	r1, r1, #3
  4040ea:	d007      	beq.n	4040fc <arm_power_f32+0x60>
  4040ec:	ecb0 7a01 	vldmia	r0!, {s14}
  4040f0:	ee27 7a07 	vmul.f32	s14, s14, s14
  4040f4:	3901      	subs	r1, #1
  4040f6:	ee77 7a87 	vadd.f32	s15, s15, s14
  4040fa:	d1f7      	bne.n	4040ec <arm_power_f32+0x50>
  4040fc:	edc2 7a00 	vstr	s15, [r2]
  404100:	bc30      	pop	{r4, r5}
  404102:	4770      	bx	lr
  404104:	00000000 	.word	0x00000000

00404108 <arm_min_f32>:
  404108:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  40410c:	f101 3cff 	add.w	ip, r1, #4294967295
  404110:	ea5f 099c 	movs.w	r9, ip, lsr #2
  404114:	f100 0704 	add.w	r7, r0, #4
  404118:	edd0 7a00 	vldr	s15, [r0]
  40411c:	d05c      	beq.n	4041d8 <arm_min_f32+0xd0>
  40411e:	463c      	mov	r4, r7
  404120:	464e      	mov	r6, r9
  404122:	2004      	movs	r0, #4
  404124:	2500      	movs	r5, #0
  404126:	edd4 6a00 	vldr	s13, [r4]
  40412a:	eef4 6ae7 	vcmpe.f32	s13, s15
  40412e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  404132:	ed94 7a01 	vldr	s14, [r4, #4]
  404136:	bf48      	it	mi
  404138:	eef0 7a66 	vmovmi.f32	s15, s13
  40413c:	eef4 7ac7 	vcmpe.f32	s15, s14
  404140:	f1a0 0803 	sub.w	r8, r0, #3
  404144:	bf48      	it	mi
  404146:	4645      	movmi	r5, r8
  404148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40414c:	edd4 6a02 	vldr	s13, [r4, #8]
  404150:	bfc8      	it	gt
  404152:	eef0 7a47 	vmovgt.f32	s15, s14
  404156:	eef4 7ae6 	vcmpe.f32	s15, s13
  40415a:	f1a0 0802 	sub.w	r8, r0, #2
  40415e:	bfc8      	it	gt
  404160:	4645      	movgt	r5, r8
  404162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  404166:	ed94 7a03 	vldr	s14, [r4, #12]
  40416a:	bfc8      	it	gt
  40416c:	eef0 7a66 	vmovgt.f32	s15, s13
  404170:	eef4 7ac7 	vcmpe.f32	s15, s14
  404174:	f100 38ff 	add.w	r8, r0, #4294967295
  404178:	bfc8      	it	gt
  40417a:	4645      	movgt	r5, r8
  40417c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  404180:	bfc8      	it	gt
  404182:	4605      	movgt	r5, r0
  404184:	bfc8      	it	gt
  404186:	eef0 7a47 	vmovgt.f32	s15, s14
  40418a:	3e01      	subs	r6, #1
  40418c:	f104 0410 	add.w	r4, r4, #16
  404190:	f100 0004 	add.w	r0, r0, #4
  404194:	d1c7      	bne.n	404126 <arm_min_f32+0x1e>
  404196:	eb07 1709 	add.w	r7, r7, r9, lsl #4
  40419a:	f01c 0c03 	ands.w	ip, ip, #3
  40419e:	d01d      	beq.n	4041dc <arm_min_f32+0xd4>
  4041a0:	ebcc 0101 	rsb	r1, ip, r1
  4041a4:	2000      	movs	r0, #0
  4041a6:	ecb7 7a01 	vldmia	r7!, {s14}
  4041aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
  4041ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4041b2:	bf48      	it	mi
  4041b4:	eef0 7a47 	vmovmi.f32	s15, s14
  4041b8:	eb01 0400 	add.w	r4, r1, r0
  4041bc:	f100 0001 	add.w	r0, r0, #1
  4041c0:	bf48      	it	mi
  4041c2:	4625      	movmi	r5, r4
  4041c4:	4560      	cmp	r0, ip
  4041c6:	eeb0 7a67 	vmov.f32	s14, s15
  4041ca:	d1ec      	bne.n	4041a6 <arm_min_f32+0x9e>
  4041cc:	ed82 7a00 	vstr	s14, [r2]
  4041d0:	601d      	str	r5, [r3, #0]
  4041d2:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
  4041d6:	4770      	bx	lr
  4041d8:	464d      	mov	r5, r9
  4041da:	e7de      	b.n	40419a <arm_min_f32+0x92>
  4041dc:	eeb0 7a67 	vmov.f32	s14, s15
  4041e0:	e7f4      	b.n	4041cc <arm_min_f32+0xc4>
  4041e2:	bf00      	nop

004041e4 <arm_max_f32>:
  4041e4:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  4041e8:	f101 3cff 	add.w	ip, r1, #4294967295
  4041ec:	ea5f 099c 	movs.w	r9, ip, lsr #2
  4041f0:	f100 0704 	add.w	r7, r0, #4
  4041f4:	edd0 7a00 	vldr	s15, [r0]
  4041f8:	d05c      	beq.n	4042b4 <arm_max_f32+0xd0>
  4041fa:	463c      	mov	r4, r7
  4041fc:	464e      	mov	r6, r9
  4041fe:	2004      	movs	r0, #4
  404200:	2500      	movs	r5, #0
  404202:	edd4 6a00 	vldr	s13, [r4]
  404206:	eef4 6ae7 	vcmpe.f32	s13, s15
  40420a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40420e:	ed94 7a01 	vldr	s14, [r4, #4]
  404212:	bfc8      	it	gt
  404214:	eef0 7a66 	vmovgt.f32	s15, s13
  404218:	eef4 7ac7 	vcmpe.f32	s15, s14
  40421c:	f1a0 0803 	sub.w	r8, r0, #3
  404220:	bfc8      	it	gt
  404222:	4645      	movgt	r5, r8
  404224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  404228:	edd4 6a02 	vldr	s13, [r4, #8]
  40422c:	bf48      	it	mi
  40422e:	eef0 7a47 	vmovmi.f32	s15, s14
  404232:	eef4 7ae6 	vcmpe.f32	s15, s13
  404236:	f1a0 0802 	sub.w	r8, r0, #2
  40423a:	bf48      	it	mi
  40423c:	4645      	movmi	r5, r8
  40423e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  404242:	ed94 7a03 	vldr	s14, [r4, #12]
  404246:	bf48      	it	mi
  404248:	eef0 7a66 	vmovmi.f32	s15, s13
  40424c:	eef4 7ac7 	vcmpe.f32	s15, s14
  404250:	f100 38ff 	add.w	r8, r0, #4294967295
  404254:	bf48      	it	mi
  404256:	4645      	movmi	r5, r8
  404258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40425c:	bf48      	it	mi
  40425e:	4605      	movmi	r5, r0
  404260:	bf48      	it	mi
  404262:	eef0 7a47 	vmovmi.f32	s15, s14
  404266:	3e01      	subs	r6, #1
  404268:	f104 0410 	add.w	r4, r4, #16
  40426c:	f100 0004 	add.w	r0, r0, #4
  404270:	d1c7      	bne.n	404202 <arm_max_f32+0x1e>
  404272:	eb07 1709 	add.w	r7, r7, r9, lsl #4
  404276:	f01c 0c03 	ands.w	ip, ip, #3
  40427a:	d01d      	beq.n	4042b8 <arm_max_f32+0xd4>
  40427c:	ebcc 0101 	rsb	r1, ip, r1
  404280:	2000      	movs	r0, #0
  404282:	ecb7 7a01 	vldmia	r7!, {s14}
  404286:	eeb4 7ae7 	vcmpe.f32	s14, s15
  40428a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40428e:	bfc8      	it	gt
  404290:	eef0 7a47 	vmovgt.f32	s15, s14
  404294:	eb01 0400 	add.w	r4, r1, r0
  404298:	f100 0001 	add.w	r0, r0, #1
  40429c:	bfc8      	it	gt
  40429e:	4625      	movgt	r5, r4
  4042a0:	4560      	cmp	r0, ip
  4042a2:	eeb0 7a67 	vmov.f32	s14, s15
  4042a6:	d1ec      	bne.n	404282 <arm_max_f32+0x9e>
  4042a8:	ed82 7a00 	vstr	s14, [r2]
  4042ac:	601d      	str	r5, [r3, #0]
  4042ae:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
  4042b2:	4770      	bx	lr
  4042b4:	464d      	mov	r5, r9
  4042b6:	e7de      	b.n	404276 <arm_max_f32+0x92>
  4042b8:	eeb0 7a67 	vmov.f32	s14, s15
  4042bc:	e7f4      	b.n	4042a8 <arm_max_f32+0xc4>
  4042be:	bf00      	nop

004042c0 <arm_cos_f32>:
  4042c0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 40433c <arm_cos_f32+0x7c>
  4042c4:	ee06 0a90 	vmov	s13, r0
  4042c8:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
  4042cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
  4042d0:	ee77 7a87 	vadd.f32	s15, s15, s14
  4042d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  4042d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4042dc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
  4042e0:	d504      	bpl.n	4042ec <arm_cos_f32+0x2c>
  4042e2:	ee17 3a10 	vmov	r3, s14
  4042e6:	3b01      	subs	r3, #1
  4042e8:	ee07 3a10 	vmov	s14, r3
  4042ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  4042f0:	eddf 6a13 	vldr	s13, [pc, #76]	; 404340 <arm_cos_f32+0x80>
  4042f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
  4042f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
  4042fc:	eefc 6ae7 	vcvt.u32.f32	s13, s15
  404300:	ee16 3a90 	vmov	r3, s13
  404304:	f3c3 0308 	ubfx	r3, r3, #0, #9
  404308:	ee07 3a10 	vmov	s14, r3
  40430c:	eef8 6a47 	vcvt.f32.u32	s13, s14
  404310:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  404314:	ee77 7ae6 	vsub.f32	s15, s15, s13
  404318:	4a0a      	ldr	r2, [pc, #40]	; (404344 <arm_cos_f32+0x84>)
  40431a:	ee37 7a67 	vsub.f32	s14, s14, s15
  40431e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
  404322:	ed91 6a00 	vldr	s12, [r1]
  404326:	edd1 6a01 	vldr	s13, [r1, #4]
  40432a:	ee27 7a06 	vmul.f32	s14, s14, s12
  40432e:	ee67 7aa6 	vmul.f32	s15, s15, s13
  404332:	ee77 7a27 	vadd.f32	s15, s14, s15
  404336:	ee17 0a90 	vmov	r0, s15
  40433a:	4770      	bx	lr
  40433c:	3e22f983 	.word	0x3e22f983
  404340:	44000000 	.word	0x44000000
  404344:	00408298 	.word	0x00408298

00404348 <arm_scale_f32>:
  404348:	b470      	push	{r4, r5, r6}
  40434a:	089e      	lsrs	r6, r3, #2
  40434c:	ee07 1a90 	vmov	s15, r1
  404350:	d023      	beq.n	40439a <arm_scale_f32+0x52>
  404352:	4635      	mov	r5, r6
  404354:	4614      	mov	r4, r2
  404356:	4601      	mov	r1, r0
  404358:	edd1 5a00 	vldr	s11, [r1]
  40435c:	ed91 6a01 	vldr	s12, [r1, #4]
  404360:	edd1 6a02 	vldr	s13, [r1, #8]
  404364:	ed91 7a03 	vldr	s14, [r1, #12]
  404368:	ee65 5aa7 	vmul.f32	s11, s11, s15
  40436c:	ee26 6a27 	vmul.f32	s12, s12, s15
  404370:	ee66 6aa7 	vmul.f32	s13, s13, s15
  404374:	ee27 7a27 	vmul.f32	s14, s14, s15
  404378:	3d01      	subs	r5, #1
  40437a:	edc4 5a00 	vstr	s11, [r4]
  40437e:	ed84 6a01 	vstr	s12, [r4, #4]
  404382:	edc4 6a02 	vstr	s13, [r4, #8]
  404386:	ed84 7a03 	vstr	s14, [r4, #12]
  40438a:	f101 0110 	add.w	r1, r1, #16
  40438e:	f104 0410 	add.w	r4, r4, #16
  404392:	d1e1      	bne.n	404358 <arm_scale_f32+0x10>
  404394:	0136      	lsls	r6, r6, #4
  404396:	4430      	add	r0, r6
  404398:	4432      	add	r2, r6
  40439a:	f013 0303 	ands.w	r3, r3, #3
  40439e:	d007      	beq.n	4043b0 <arm_scale_f32+0x68>
  4043a0:	ecb0 7a01 	vldmia	r0!, {s14}
  4043a4:	ee27 7a27 	vmul.f32	s14, s14, s15
  4043a8:	3b01      	subs	r3, #1
  4043aa:	eca2 7a01 	vstmia	r2!, {s14}
  4043ae:	d1f7      	bne.n	4043a0 <arm_scale_f32+0x58>
  4043b0:	bc70      	pop	{r4, r5, r6}
  4043b2:	4770      	bx	lr

004043b4 <log>:
  4043b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4043b8:	b08b      	sub	sp, #44	; 0x2c
  4043ba:	4604      	mov	r4, r0
  4043bc:	460d      	mov	r5, r1
  4043be:	f000 f87b 	bl	4044b8 <__ieee754_log>
  4043c2:	4b37      	ldr	r3, [pc, #220]	; (4044a0 <log+0xec>)
  4043c4:	f993 6000 	ldrsb.w	r6, [r3]
  4043c8:	1c73      	adds	r3, r6, #1
  4043ca:	4680      	mov	r8, r0
  4043cc:	4689      	mov	r9, r1
  4043ce:	d00d      	beq.n	4043ec <log+0x38>
  4043d0:	4622      	mov	r2, r4
  4043d2:	462b      	mov	r3, r5
  4043d4:	4620      	mov	r0, r4
  4043d6:	4629      	mov	r1, r5
  4043d8:	f000 febc 	bl	405154 <__aeabi_dcmpun>
  4043dc:	b930      	cbnz	r0, 4043ec <log+0x38>
  4043de:	2200      	movs	r2, #0
  4043e0:	2300      	movs	r3, #0
  4043e2:	4620      	mov	r0, r4
  4043e4:	4629      	mov	r1, r5
  4043e6:	f000 feab 	bl	405140 <__aeabi_dcmpgt>
  4043ea:	b120      	cbz	r0, 4043f6 <log+0x42>
  4043ec:	4640      	mov	r0, r8
  4043ee:	4649      	mov	r1, r9
  4043f0:	b00b      	add	sp, #44	; 0x2c
  4043f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4043f6:	4b2b      	ldr	r3, [pc, #172]	; (4044a4 <log+0xf0>)
  4043f8:	9008      	str	r0, [sp, #32]
  4043fa:	e9cd 4502 	strd	r4, r5, [sp, #8]
  4043fe:	e9cd 4504 	strd	r4, r5, [sp, #16]
  404402:	9301      	str	r3, [sp, #4]
  404404:	b9de      	cbnz	r6, 40443e <log+0x8a>
  404406:	4f28      	ldr	r7, [pc, #160]	; (4044a8 <log+0xf4>)
  404408:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
  40440c:	4620      	mov	r0, r4
  40440e:	4629      	mov	r1, r5
  404410:	2200      	movs	r2, #0
  404412:	2300      	movs	r3, #0
  404414:	e9cd 6706 	strd	r6, r7, [sp, #24]
  404418:	f000 fe6a 	bl	4050f0 <__aeabi_dcmpeq>
  40441c:	2800      	cmp	r0, #0
  40441e:	d037      	beq.n	404490 <log+0xdc>
  404420:	2302      	movs	r3, #2
  404422:	9300      	str	r3, [sp, #0]
  404424:	4668      	mov	r0, sp
  404426:	f000 fa3b 	bl	4048a0 <matherr>
  40442a:	b1c8      	cbz	r0, 404460 <log+0xac>
  40442c:	9b08      	ldr	r3, [sp, #32]
  40442e:	b9e3      	cbnz	r3, 40446a <log+0xb6>
  404430:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  404434:	4640      	mov	r0, r8
  404436:	4649      	mov	r1, r9
  404438:	b00b      	add	sp, #44	; 0x2c
  40443a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40443e:	f8df 9070 	ldr.w	r9, [pc, #112]	; 4044b0 <log+0xfc>
  404442:	f04f 0800 	mov.w	r8, #0
  404446:	4620      	mov	r0, r4
  404448:	4629      	mov	r1, r5
  40444a:	2200      	movs	r2, #0
  40444c:	2300      	movs	r3, #0
  40444e:	e9cd 8906 	strd	r8, r9, [sp, #24]
  404452:	f000 fe4d 	bl	4050f0 <__aeabi_dcmpeq>
  404456:	b168      	cbz	r0, 404474 <log+0xc0>
  404458:	2302      	movs	r3, #2
  40445a:	429e      	cmp	r6, r3
  40445c:	9300      	str	r3, [sp, #0]
  40445e:	d1e1      	bne.n	404424 <log+0x70>
  404460:	f000 fede 	bl	405220 <__errno>
  404464:	2322      	movs	r3, #34	; 0x22
  404466:	6003      	str	r3, [r0, #0]
  404468:	e7e0      	b.n	40442c <log+0x78>
  40446a:	f000 fed9 	bl	405220 <__errno>
  40446e:	9b08      	ldr	r3, [sp, #32]
  404470:	6003      	str	r3, [r0, #0]
  404472:	e7dd      	b.n	404430 <log+0x7c>
  404474:	2301      	movs	r3, #1
  404476:	2e02      	cmp	r6, #2
  404478:	9300      	str	r3, [sp, #0]
  40447a:	d10b      	bne.n	404494 <log+0xe0>
  40447c:	f000 fed0 	bl	405220 <__errno>
  404480:	2321      	movs	r3, #33	; 0x21
  404482:	6003      	str	r3, [r0, #0]
  404484:	4809      	ldr	r0, [pc, #36]	; (4044ac <log+0xf8>)
  404486:	f000 fa0d 	bl	4048a4 <nan>
  40448a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40448e:	e7cd      	b.n	40442c <log+0x78>
  404490:	2301      	movs	r3, #1
  404492:	9300      	str	r3, [sp, #0]
  404494:	4668      	mov	r0, sp
  404496:	f000 fa03 	bl	4048a0 <matherr>
  40449a:	2800      	cmp	r0, #0
  40449c:	d1f2      	bne.n	404484 <log+0xd0>
  40449e:	e7ed      	b.n	40447c <log+0xc8>
  4044a0:	20400054 	.word	0x20400054
  4044a4:	00408a9c 	.word	0x00408a9c
  4044a8:	c7efffff 	.word	0xc7efffff
  4044ac:	00408ab4 	.word	0x00408ab4
  4044b0:	fff00000 	.word	0xfff00000
  4044b4:	00000000 	.word	0x00000000

004044b8 <__ieee754_log>:
  4044b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4044bc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4044c0:	b085      	sub	sp, #20
  4044c2:	4606      	mov	r6, r0
  4044c4:	460f      	mov	r7, r1
  4044c6:	460b      	mov	r3, r1
  4044c8:	da5a      	bge.n	404580 <__ieee754_log+0xc8>
  4044ca:	4602      	mov	r2, r0
  4044cc:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
  4044d0:	4322      	orrs	r2, r4
  4044d2:	f000 80f8 	beq.w	4046c6 <__ieee754_log+0x20e>
  4044d6:	2900      	cmp	r1, #0
  4044d8:	f2c0 817a 	blt.w	4047d0 <__ieee754_log+0x318>
  4044dc:	2200      	movs	r2, #0
  4044de:	4bd6      	ldr	r3, [pc, #856]	; (404838 <__ieee754_log+0x380>)
  4044e0:	f000 fb9e 	bl	404c20 <__aeabi_dmul>
  4044e4:	4ad5      	ldr	r2, [pc, #852]	; (40483c <__ieee754_log+0x384>)
  4044e6:	460b      	mov	r3, r1
  4044e8:	4293      	cmp	r3, r2
  4044ea:	4606      	mov	r6, r0
  4044ec:	460f      	mov	r7, r1
  4044ee:	f06f 0c35 	mvn.w	ip, #53	; 0x35
  4044f2:	dc4a      	bgt.n	40458a <__ieee754_log+0xd2>
  4044f4:	f3c3 0513 	ubfx	r5, r3, #0, #20
  4044f8:	f505 2e15 	add.w	lr, r5, #610304	; 0x95000
  4044fc:	f60e 7e64 	addw	lr, lr, #3940	; 0xf64
  404500:	f40e 1e80 	and.w	lr, lr, #1048576	; 0x100000
  404504:	f08e 527f 	eor.w	r2, lr, #1069547520	; 0x3fc00000
  404508:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
  40450c:	151c      	asrs	r4, r3, #20
  40450e:	ea42 0705 	orr.w	r7, r2, r5
  404512:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
  404516:	4464      	add	r4, ip
  404518:	2200      	movs	r2, #0
  40451a:	4bc9      	ldr	r3, [pc, #804]	; (404840 <__ieee754_log+0x388>)
  40451c:	4630      	mov	r0, r6
  40451e:	4639      	mov	r1, r7
  404520:	eb04 541e 	add.w	r4, r4, lr, lsr #20
  404524:	f000 f9c8 	bl	4048b8 <__aeabi_dsub>
  404528:	1cab      	adds	r3, r5, #2
  40452a:	f3c3 0313 	ubfx	r3, r3, #0, #20
  40452e:	2b02      	cmp	r3, #2
  404530:	4682      	mov	sl, r0
  404532:	468b      	mov	fp, r1
  404534:	f04f 0200 	mov.w	r2, #0
  404538:	dc30      	bgt.n	40459c <__ieee754_log+0xe4>
  40453a:	2300      	movs	r3, #0
  40453c:	f000 fdd8 	bl	4050f0 <__aeabi_dcmpeq>
  404540:	2800      	cmp	r0, #0
  404542:	f000 80c9 	beq.w	4046d8 <__ieee754_log+0x220>
  404546:	2c00      	cmp	r4, #0
  404548:	f000 814b 	beq.w	4047e2 <__ieee754_log+0x32a>
  40454c:	4620      	mov	r0, r4
  40454e:	f000 fb01 	bl	404b54 <__aeabi_i2d>
  404552:	a3a5      	add	r3, pc, #660	; (adr r3, 4047e8 <__ieee754_log+0x330>)
  404554:	e9d3 2300 	ldrd	r2, r3, [r3]
  404558:	4606      	mov	r6, r0
  40455a:	460f      	mov	r7, r1
  40455c:	f000 fb60 	bl	404c20 <__aeabi_dmul>
  404560:	a3a3      	add	r3, pc, #652	; (adr r3, 4047f0 <__ieee754_log+0x338>)
  404562:	e9d3 2300 	ldrd	r2, r3, [r3]
  404566:	4604      	mov	r4, r0
  404568:	460d      	mov	r5, r1
  40456a:	4630      	mov	r0, r6
  40456c:	4639      	mov	r1, r7
  40456e:	f000 fb57 	bl	404c20 <__aeabi_dmul>
  404572:	4602      	mov	r2, r0
  404574:	460b      	mov	r3, r1
  404576:	4620      	mov	r0, r4
  404578:	4629      	mov	r1, r5
  40457a:	f000 f99f 	bl	4048bc <__adddf3>
  40457e:	e00a      	b.n	404596 <__ieee754_log+0xde>
  404580:	4aae      	ldr	r2, [pc, #696]	; (40483c <__ieee754_log+0x384>)
  404582:	4293      	cmp	r3, r2
  404584:	f04f 0c00 	mov.w	ip, #0
  404588:	ddb4      	ble.n	4044f4 <__ieee754_log+0x3c>
  40458a:	4632      	mov	r2, r6
  40458c:	463b      	mov	r3, r7
  40458e:	4630      	mov	r0, r6
  404590:	4639      	mov	r1, r7
  404592:	f000 f993 	bl	4048bc <__adddf3>
  404596:	b005      	add	sp, #20
  404598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40459c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4045a0:	f000 f98c 	bl	4048bc <__adddf3>
  4045a4:	4602      	mov	r2, r0
  4045a6:	460b      	mov	r3, r1
  4045a8:	4650      	mov	r0, sl
  4045aa:	4659      	mov	r1, fp
  4045ac:	f000 fc62 	bl	404e74 <__aeabi_ddiv>
  4045b0:	4606      	mov	r6, r0
  4045b2:	4620      	mov	r0, r4
  4045b4:	460f      	mov	r7, r1
  4045b6:	f000 facd 	bl	404b54 <__aeabi_i2d>
  4045ba:	4632      	mov	r2, r6
  4045bc:	e9cd 0100 	strd	r0, r1, [sp]
  4045c0:	463b      	mov	r3, r7
  4045c2:	4630      	mov	r0, r6
  4045c4:	4639      	mov	r1, r7
  4045c6:	e9cd 6702 	strd	r6, r7, [sp, #8]
  4045ca:	f000 fb29 	bl	404c20 <__aeabi_dmul>
  4045ce:	4602      	mov	r2, r0
  4045d0:	460b      	mov	r3, r1
  4045d2:	4680      	mov	r8, r0
  4045d4:	4689      	mov	r9, r1
  4045d6:	f000 fb23 	bl	404c20 <__aeabi_dmul>
  4045da:	a387      	add	r3, pc, #540	; (adr r3, 4047f8 <__ieee754_log+0x340>)
  4045dc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4045e0:	4606      	mov	r6, r0
  4045e2:	460f      	mov	r7, r1
  4045e4:	f000 fb1c 	bl	404c20 <__aeabi_dmul>
  4045e8:	a385      	add	r3, pc, #532	; (adr r3, 404800 <__ieee754_log+0x348>)
  4045ea:	e9d3 2300 	ldrd	r2, r3, [r3]
  4045ee:	f000 f965 	bl	4048bc <__adddf3>
  4045f2:	4632      	mov	r2, r6
  4045f4:	463b      	mov	r3, r7
  4045f6:	f000 fb13 	bl	404c20 <__aeabi_dmul>
  4045fa:	a383      	add	r3, pc, #524	; (adr r3, 404808 <__ieee754_log+0x350>)
  4045fc:	e9d3 2300 	ldrd	r2, r3, [r3]
  404600:	f000 f95c 	bl	4048bc <__adddf3>
  404604:	4632      	mov	r2, r6
  404606:	463b      	mov	r3, r7
  404608:	f000 fb0a 	bl	404c20 <__aeabi_dmul>
  40460c:	a380      	add	r3, pc, #512	; (adr r3, 404810 <__ieee754_log+0x358>)
  40460e:	e9d3 2300 	ldrd	r2, r3, [r3]
  404612:	f000 f953 	bl	4048bc <__adddf3>
  404616:	4642      	mov	r2, r8
  404618:	464b      	mov	r3, r9
  40461a:	f000 fb01 	bl	404c20 <__aeabi_dmul>
  40461e:	a37e      	add	r3, pc, #504	; (adr r3, 404818 <__ieee754_log+0x360>)
  404620:	e9d3 2300 	ldrd	r2, r3, [r3]
  404624:	4680      	mov	r8, r0
  404626:	4689      	mov	r9, r1
  404628:	4630      	mov	r0, r6
  40462a:	4639      	mov	r1, r7
  40462c:	f000 faf8 	bl	404c20 <__aeabi_dmul>
  404630:	a37b      	add	r3, pc, #492	; (adr r3, 404820 <__ieee754_log+0x368>)
  404632:	e9d3 2300 	ldrd	r2, r3, [r3]
  404636:	f000 f941 	bl	4048bc <__adddf3>
  40463a:	4632      	mov	r2, r6
  40463c:	463b      	mov	r3, r7
  40463e:	f000 faef 	bl	404c20 <__aeabi_dmul>
  404642:	a379      	add	r3, pc, #484	; (adr r3, 404828 <__ieee754_log+0x370>)
  404644:	e9d3 2300 	ldrd	r2, r3, [r3]
  404648:	f000 f938 	bl	4048bc <__adddf3>
  40464c:	4632      	mov	r2, r6
  40464e:	463b      	mov	r3, r7
  404650:	f000 fae6 	bl	404c20 <__aeabi_dmul>
  404654:	460b      	mov	r3, r1
  404656:	4602      	mov	r2, r0
  404658:	4649      	mov	r1, r9
  40465a:	4640      	mov	r0, r8
  40465c:	f000 f92e 	bl	4048bc <__adddf3>
  404660:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
  404664:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
  404668:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
  40466c:	3551      	adds	r5, #81	; 0x51
  40466e:	431d      	orrs	r5, r3
  404670:	2d00      	cmp	r5, #0
  404672:	4680      	mov	r8, r0
  404674:	4689      	mov	r9, r1
  404676:	dd56      	ble.n	404726 <__ieee754_log+0x26e>
  404678:	2200      	movs	r2, #0
  40467a:	4b72      	ldr	r3, [pc, #456]	; (404844 <__ieee754_log+0x38c>)
  40467c:	4650      	mov	r0, sl
  40467e:	4659      	mov	r1, fp
  404680:	f000 face 	bl	404c20 <__aeabi_dmul>
  404684:	4652      	mov	r2, sl
  404686:	465b      	mov	r3, fp
  404688:	f000 faca 	bl	404c20 <__aeabi_dmul>
  40468c:	4606      	mov	r6, r0
  40468e:	460f      	mov	r7, r1
  404690:	2c00      	cmp	r4, #0
  404692:	d168      	bne.n	404766 <__ieee754_log+0x2ae>
  404694:	4632      	mov	r2, r6
  404696:	463b      	mov	r3, r7
  404698:	4640      	mov	r0, r8
  40469a:	4649      	mov	r1, r9
  40469c:	f000 f90e 	bl	4048bc <__adddf3>
  4046a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4046a4:	f000 fabc 	bl	404c20 <__aeabi_dmul>
  4046a8:	4602      	mov	r2, r0
  4046aa:	460b      	mov	r3, r1
  4046ac:	4630      	mov	r0, r6
  4046ae:	4639      	mov	r1, r7
  4046b0:	f000 f902 	bl	4048b8 <__aeabi_dsub>
  4046b4:	4602      	mov	r2, r0
  4046b6:	460b      	mov	r3, r1
  4046b8:	4650      	mov	r0, sl
  4046ba:	4659      	mov	r1, fp
  4046bc:	f000 f8fc 	bl	4048b8 <__aeabi_dsub>
  4046c0:	b005      	add	sp, #20
  4046c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4046c6:	2200      	movs	r2, #0
  4046c8:	2300      	movs	r3, #0
  4046ca:	2000      	movs	r0, #0
  4046cc:	495e      	ldr	r1, [pc, #376]	; (404848 <__ieee754_log+0x390>)
  4046ce:	f000 fbd1 	bl	404e74 <__aeabi_ddiv>
  4046d2:	b005      	add	sp, #20
  4046d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4046d8:	a355      	add	r3, pc, #340	; (adr r3, 404830 <__ieee754_log+0x378>)
  4046da:	e9d3 2300 	ldrd	r2, r3, [r3]
  4046de:	4650      	mov	r0, sl
  4046e0:	4659      	mov	r1, fp
  4046e2:	f000 fa9d 	bl	404c20 <__aeabi_dmul>
  4046e6:	4602      	mov	r2, r0
  4046e8:	460b      	mov	r3, r1
  4046ea:	2000      	movs	r0, #0
  4046ec:	4955      	ldr	r1, [pc, #340]	; (404844 <__ieee754_log+0x38c>)
  4046ee:	f000 f8e3 	bl	4048b8 <__aeabi_dsub>
  4046f2:	4652      	mov	r2, sl
  4046f4:	4606      	mov	r6, r0
  4046f6:	460f      	mov	r7, r1
  4046f8:	465b      	mov	r3, fp
  4046fa:	4650      	mov	r0, sl
  4046fc:	4659      	mov	r1, fp
  4046fe:	f000 fa8f 	bl	404c20 <__aeabi_dmul>
  404702:	4602      	mov	r2, r0
  404704:	460b      	mov	r3, r1
  404706:	4630      	mov	r0, r6
  404708:	4639      	mov	r1, r7
  40470a:	f000 fa89 	bl	404c20 <__aeabi_dmul>
  40470e:	4606      	mov	r6, r0
  404710:	460f      	mov	r7, r1
  404712:	2c00      	cmp	r4, #0
  404714:	f040 809a 	bne.w	40484c <__ieee754_log+0x394>
  404718:	4602      	mov	r2, r0
  40471a:	460b      	mov	r3, r1
  40471c:	4650      	mov	r0, sl
  40471e:	4659      	mov	r1, fp
  404720:	f000 f8ca 	bl	4048b8 <__aeabi_dsub>
  404724:	e737      	b.n	404596 <__ieee754_log+0xde>
  404726:	2c00      	cmp	r4, #0
  404728:	f000 80a4 	beq.w	404874 <__ieee754_log+0x3bc>
  40472c:	a32e      	add	r3, pc, #184	; (adr r3, 4047e8 <__ieee754_log+0x330>)
  40472e:	e9d3 2300 	ldrd	r2, r3, [r3]
  404732:	e9dd 0100 	ldrd	r0, r1, [sp]
  404736:	f000 fa73 	bl	404c20 <__aeabi_dmul>
  40473a:	4642      	mov	r2, r8
  40473c:	464b      	mov	r3, r9
  40473e:	4604      	mov	r4, r0
  404740:	460d      	mov	r5, r1
  404742:	4650      	mov	r0, sl
  404744:	4659      	mov	r1, fp
  404746:	f000 f8b7 	bl	4048b8 <__aeabi_dsub>
  40474a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40474e:	f000 fa67 	bl	404c20 <__aeabi_dmul>
  404752:	a327      	add	r3, pc, #156	; (adr r3, 4047f0 <__ieee754_log+0x338>)
  404754:	e9d3 2300 	ldrd	r2, r3, [r3]
  404758:	4606      	mov	r6, r0
  40475a:	460f      	mov	r7, r1
  40475c:	e9dd 0100 	ldrd	r0, r1, [sp]
  404760:	f000 fa5e 	bl	404c20 <__aeabi_dmul>
  404764:	e021      	b.n	4047aa <__ieee754_log+0x2f2>
  404766:	a320      	add	r3, pc, #128	; (adr r3, 4047e8 <__ieee754_log+0x330>)
  404768:	e9d3 2300 	ldrd	r2, r3, [r3]
  40476c:	e9dd 0100 	ldrd	r0, r1, [sp]
  404770:	f000 fa56 	bl	404c20 <__aeabi_dmul>
  404774:	4632      	mov	r2, r6
  404776:	463b      	mov	r3, r7
  404778:	4604      	mov	r4, r0
  40477a:	460d      	mov	r5, r1
  40477c:	4640      	mov	r0, r8
  40477e:	4649      	mov	r1, r9
  404780:	f000 f89c 	bl	4048bc <__adddf3>
  404784:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404788:	f000 fa4a 	bl	404c20 <__aeabi_dmul>
  40478c:	a318      	add	r3, pc, #96	; (adr r3, 4047f0 <__ieee754_log+0x338>)
  40478e:	e9d3 2300 	ldrd	r2, r3, [r3]
  404792:	4680      	mov	r8, r0
  404794:	4689      	mov	r9, r1
  404796:	e9dd 0100 	ldrd	r0, r1, [sp]
  40479a:	f000 fa41 	bl	404c20 <__aeabi_dmul>
  40479e:	4602      	mov	r2, r0
  4047a0:	460b      	mov	r3, r1
  4047a2:	4640      	mov	r0, r8
  4047a4:	4649      	mov	r1, r9
  4047a6:	f000 f889 	bl	4048bc <__adddf3>
  4047aa:	4602      	mov	r2, r0
  4047ac:	460b      	mov	r3, r1
  4047ae:	4630      	mov	r0, r6
  4047b0:	4639      	mov	r1, r7
  4047b2:	f000 f881 	bl	4048b8 <__aeabi_dsub>
  4047b6:	4652      	mov	r2, sl
  4047b8:	465b      	mov	r3, fp
  4047ba:	f000 f87d 	bl	4048b8 <__aeabi_dsub>
  4047be:	4602      	mov	r2, r0
  4047c0:	460b      	mov	r3, r1
  4047c2:	4620      	mov	r0, r4
  4047c4:	4629      	mov	r1, r5
  4047c6:	f000 f877 	bl	4048b8 <__aeabi_dsub>
  4047ca:	b005      	add	sp, #20
  4047cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4047d0:	4602      	mov	r2, r0
  4047d2:	460b      	mov	r3, r1
  4047d4:	f000 f870 	bl	4048b8 <__aeabi_dsub>
  4047d8:	2200      	movs	r2, #0
  4047da:	2300      	movs	r3, #0
  4047dc:	f000 fb4a 	bl	404e74 <__aeabi_ddiv>
  4047e0:	e6d9      	b.n	404596 <__ieee754_log+0xde>
  4047e2:	2000      	movs	r0, #0
  4047e4:	2100      	movs	r1, #0
  4047e6:	e6d6      	b.n	404596 <__ieee754_log+0xde>
  4047e8:	fee00000 	.word	0xfee00000
  4047ec:	3fe62e42 	.word	0x3fe62e42
  4047f0:	35793c76 	.word	0x35793c76
  4047f4:	3dea39ef 	.word	0x3dea39ef
  4047f8:	df3e5244 	.word	0xdf3e5244
  4047fc:	3fc2f112 	.word	0x3fc2f112
  404800:	96cb03de 	.word	0x96cb03de
  404804:	3fc74664 	.word	0x3fc74664
  404808:	94229359 	.word	0x94229359
  40480c:	3fd24924 	.word	0x3fd24924
  404810:	55555593 	.word	0x55555593
  404814:	3fe55555 	.word	0x3fe55555
  404818:	d078c69f 	.word	0xd078c69f
  40481c:	3fc39a09 	.word	0x3fc39a09
  404820:	1d8e78af 	.word	0x1d8e78af
  404824:	3fcc71c5 	.word	0x3fcc71c5
  404828:	9997fa04 	.word	0x9997fa04
  40482c:	3fd99999 	.word	0x3fd99999
  404830:	55555555 	.word	0x55555555
  404834:	3fd55555 	.word	0x3fd55555
  404838:	43500000 	.word	0x43500000
  40483c:	7fefffff 	.word	0x7fefffff
  404840:	3ff00000 	.word	0x3ff00000
  404844:	3fe00000 	.word	0x3fe00000
  404848:	c3500000 	.word	0xc3500000
  40484c:	4620      	mov	r0, r4
  40484e:	f000 f981 	bl	404b54 <__aeabi_i2d>
  404852:	a30f      	add	r3, pc, #60	; (adr r3, 404890 <__ieee754_log+0x3d8>)
  404854:	e9d3 2300 	ldrd	r2, r3, [r3]
  404858:	4680      	mov	r8, r0
  40485a:	4689      	mov	r9, r1
  40485c:	f000 f9e0 	bl	404c20 <__aeabi_dmul>
  404860:	a30d      	add	r3, pc, #52	; (adr r3, 404898 <__ieee754_log+0x3e0>)
  404862:	e9d3 2300 	ldrd	r2, r3, [r3]
  404866:	4604      	mov	r4, r0
  404868:	460d      	mov	r5, r1
  40486a:	4640      	mov	r0, r8
  40486c:	4649      	mov	r1, r9
  40486e:	f000 f9d7 	bl	404c20 <__aeabi_dmul>
  404872:	e79a      	b.n	4047aa <__ieee754_log+0x2f2>
  404874:	4602      	mov	r2, r0
  404876:	460b      	mov	r3, r1
  404878:	4650      	mov	r0, sl
  40487a:	4659      	mov	r1, fp
  40487c:	f000 f81c 	bl	4048b8 <__aeabi_dsub>
  404880:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404884:	f000 f9cc 	bl	404c20 <__aeabi_dmul>
  404888:	e714      	b.n	4046b4 <__ieee754_log+0x1fc>
  40488a:	bf00      	nop
  40488c:	f3af 8000 	nop.w
  404890:	fee00000 	.word	0xfee00000
  404894:	3fe62e42 	.word	0x3fe62e42
  404898:	35793c76 	.word	0x35793c76
  40489c:	3dea39ef 	.word	0x3dea39ef

004048a0 <matherr>:
  4048a0:	2000      	movs	r0, #0
  4048a2:	4770      	bx	lr

004048a4 <nan>:
  4048a4:	2000      	movs	r0, #0
  4048a6:	4901      	ldr	r1, [pc, #4]	; (4048ac <nan+0x8>)
  4048a8:	4770      	bx	lr
  4048aa:	bf00      	nop
  4048ac:	7ff80000 	.word	0x7ff80000

004048b0 <__aeabi_drsub>:
  4048b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4048b4:	e002      	b.n	4048bc <__adddf3>
  4048b6:	bf00      	nop

004048b8 <__aeabi_dsub>:
  4048b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004048bc <__adddf3>:
  4048bc:	b530      	push	{r4, r5, lr}
  4048be:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4048c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4048c6:	ea94 0f05 	teq	r4, r5
  4048ca:	bf08      	it	eq
  4048cc:	ea90 0f02 	teqeq	r0, r2
  4048d0:	bf1f      	itttt	ne
  4048d2:	ea54 0c00 	orrsne.w	ip, r4, r0
  4048d6:	ea55 0c02 	orrsne.w	ip, r5, r2
  4048da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4048de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4048e2:	f000 80e2 	beq.w	404aaa <__adddf3+0x1ee>
  4048e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4048ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4048ee:	bfb8      	it	lt
  4048f0:	426d      	neglt	r5, r5
  4048f2:	dd0c      	ble.n	40490e <__adddf3+0x52>
  4048f4:	442c      	add	r4, r5
  4048f6:	ea80 0202 	eor.w	r2, r0, r2
  4048fa:	ea81 0303 	eor.w	r3, r1, r3
  4048fe:	ea82 0000 	eor.w	r0, r2, r0
  404902:	ea83 0101 	eor.w	r1, r3, r1
  404906:	ea80 0202 	eor.w	r2, r0, r2
  40490a:	ea81 0303 	eor.w	r3, r1, r3
  40490e:	2d36      	cmp	r5, #54	; 0x36
  404910:	bf88      	it	hi
  404912:	bd30      	pophi	{r4, r5, pc}
  404914:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  404918:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40491c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  404920:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  404924:	d002      	beq.n	40492c <__adddf3+0x70>
  404926:	4240      	negs	r0, r0
  404928:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40492c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  404930:	ea4f 3303 	mov.w	r3, r3, lsl #12
  404934:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  404938:	d002      	beq.n	404940 <__adddf3+0x84>
  40493a:	4252      	negs	r2, r2
  40493c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  404940:	ea94 0f05 	teq	r4, r5
  404944:	f000 80a7 	beq.w	404a96 <__adddf3+0x1da>
  404948:	f1a4 0401 	sub.w	r4, r4, #1
  40494c:	f1d5 0e20 	rsbs	lr, r5, #32
  404950:	db0d      	blt.n	40496e <__adddf3+0xb2>
  404952:	fa02 fc0e 	lsl.w	ip, r2, lr
  404956:	fa22 f205 	lsr.w	r2, r2, r5
  40495a:	1880      	adds	r0, r0, r2
  40495c:	f141 0100 	adc.w	r1, r1, #0
  404960:	fa03 f20e 	lsl.w	r2, r3, lr
  404964:	1880      	adds	r0, r0, r2
  404966:	fa43 f305 	asr.w	r3, r3, r5
  40496a:	4159      	adcs	r1, r3
  40496c:	e00e      	b.n	40498c <__adddf3+0xd0>
  40496e:	f1a5 0520 	sub.w	r5, r5, #32
  404972:	f10e 0e20 	add.w	lr, lr, #32
  404976:	2a01      	cmp	r2, #1
  404978:	fa03 fc0e 	lsl.w	ip, r3, lr
  40497c:	bf28      	it	cs
  40497e:	f04c 0c02 	orrcs.w	ip, ip, #2
  404982:	fa43 f305 	asr.w	r3, r3, r5
  404986:	18c0      	adds	r0, r0, r3
  404988:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40498c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  404990:	d507      	bpl.n	4049a2 <__adddf3+0xe6>
  404992:	f04f 0e00 	mov.w	lr, #0
  404996:	f1dc 0c00 	rsbs	ip, ip, #0
  40499a:	eb7e 0000 	sbcs.w	r0, lr, r0
  40499e:	eb6e 0101 	sbc.w	r1, lr, r1
  4049a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4049a6:	d31b      	bcc.n	4049e0 <__adddf3+0x124>
  4049a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4049ac:	d30c      	bcc.n	4049c8 <__adddf3+0x10c>
  4049ae:	0849      	lsrs	r1, r1, #1
  4049b0:	ea5f 0030 	movs.w	r0, r0, rrx
  4049b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4049b8:	f104 0401 	add.w	r4, r4, #1
  4049bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4049c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4049c4:	f080 809a 	bcs.w	404afc <__adddf3+0x240>
  4049c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4049cc:	bf08      	it	eq
  4049ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4049d2:	f150 0000 	adcs.w	r0, r0, #0
  4049d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4049da:	ea41 0105 	orr.w	r1, r1, r5
  4049de:	bd30      	pop	{r4, r5, pc}
  4049e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4049e4:	4140      	adcs	r0, r0
  4049e6:	eb41 0101 	adc.w	r1, r1, r1
  4049ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4049ee:	f1a4 0401 	sub.w	r4, r4, #1
  4049f2:	d1e9      	bne.n	4049c8 <__adddf3+0x10c>
  4049f4:	f091 0f00 	teq	r1, #0
  4049f8:	bf04      	itt	eq
  4049fa:	4601      	moveq	r1, r0
  4049fc:	2000      	moveq	r0, #0
  4049fe:	fab1 f381 	clz	r3, r1
  404a02:	bf08      	it	eq
  404a04:	3320      	addeq	r3, #32
  404a06:	f1a3 030b 	sub.w	r3, r3, #11
  404a0a:	f1b3 0220 	subs.w	r2, r3, #32
  404a0e:	da0c      	bge.n	404a2a <__adddf3+0x16e>
  404a10:	320c      	adds	r2, #12
  404a12:	dd08      	ble.n	404a26 <__adddf3+0x16a>
  404a14:	f102 0c14 	add.w	ip, r2, #20
  404a18:	f1c2 020c 	rsb	r2, r2, #12
  404a1c:	fa01 f00c 	lsl.w	r0, r1, ip
  404a20:	fa21 f102 	lsr.w	r1, r1, r2
  404a24:	e00c      	b.n	404a40 <__adddf3+0x184>
  404a26:	f102 0214 	add.w	r2, r2, #20
  404a2a:	bfd8      	it	le
  404a2c:	f1c2 0c20 	rsble	ip, r2, #32
  404a30:	fa01 f102 	lsl.w	r1, r1, r2
  404a34:	fa20 fc0c 	lsr.w	ip, r0, ip
  404a38:	bfdc      	itt	le
  404a3a:	ea41 010c 	orrle.w	r1, r1, ip
  404a3e:	4090      	lslle	r0, r2
  404a40:	1ae4      	subs	r4, r4, r3
  404a42:	bfa2      	ittt	ge
  404a44:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  404a48:	4329      	orrge	r1, r5
  404a4a:	bd30      	popge	{r4, r5, pc}
  404a4c:	ea6f 0404 	mvn.w	r4, r4
  404a50:	3c1f      	subs	r4, #31
  404a52:	da1c      	bge.n	404a8e <__adddf3+0x1d2>
  404a54:	340c      	adds	r4, #12
  404a56:	dc0e      	bgt.n	404a76 <__adddf3+0x1ba>
  404a58:	f104 0414 	add.w	r4, r4, #20
  404a5c:	f1c4 0220 	rsb	r2, r4, #32
  404a60:	fa20 f004 	lsr.w	r0, r0, r4
  404a64:	fa01 f302 	lsl.w	r3, r1, r2
  404a68:	ea40 0003 	orr.w	r0, r0, r3
  404a6c:	fa21 f304 	lsr.w	r3, r1, r4
  404a70:	ea45 0103 	orr.w	r1, r5, r3
  404a74:	bd30      	pop	{r4, r5, pc}
  404a76:	f1c4 040c 	rsb	r4, r4, #12
  404a7a:	f1c4 0220 	rsb	r2, r4, #32
  404a7e:	fa20 f002 	lsr.w	r0, r0, r2
  404a82:	fa01 f304 	lsl.w	r3, r1, r4
  404a86:	ea40 0003 	orr.w	r0, r0, r3
  404a8a:	4629      	mov	r1, r5
  404a8c:	bd30      	pop	{r4, r5, pc}
  404a8e:	fa21 f004 	lsr.w	r0, r1, r4
  404a92:	4629      	mov	r1, r5
  404a94:	bd30      	pop	{r4, r5, pc}
  404a96:	f094 0f00 	teq	r4, #0
  404a9a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  404a9e:	bf06      	itte	eq
  404aa0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  404aa4:	3401      	addeq	r4, #1
  404aa6:	3d01      	subne	r5, #1
  404aa8:	e74e      	b.n	404948 <__adddf3+0x8c>
  404aaa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  404aae:	bf18      	it	ne
  404ab0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  404ab4:	d029      	beq.n	404b0a <__adddf3+0x24e>
  404ab6:	ea94 0f05 	teq	r4, r5
  404aba:	bf08      	it	eq
  404abc:	ea90 0f02 	teqeq	r0, r2
  404ac0:	d005      	beq.n	404ace <__adddf3+0x212>
  404ac2:	ea54 0c00 	orrs.w	ip, r4, r0
  404ac6:	bf04      	itt	eq
  404ac8:	4619      	moveq	r1, r3
  404aca:	4610      	moveq	r0, r2
  404acc:	bd30      	pop	{r4, r5, pc}
  404ace:	ea91 0f03 	teq	r1, r3
  404ad2:	bf1e      	ittt	ne
  404ad4:	2100      	movne	r1, #0
  404ad6:	2000      	movne	r0, #0
  404ad8:	bd30      	popne	{r4, r5, pc}
  404ada:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  404ade:	d105      	bne.n	404aec <__adddf3+0x230>
  404ae0:	0040      	lsls	r0, r0, #1
  404ae2:	4149      	adcs	r1, r1
  404ae4:	bf28      	it	cs
  404ae6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  404aea:	bd30      	pop	{r4, r5, pc}
  404aec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  404af0:	bf3c      	itt	cc
  404af2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  404af6:	bd30      	popcc	{r4, r5, pc}
  404af8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  404afc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  404b00:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  404b04:	f04f 0000 	mov.w	r0, #0
  404b08:	bd30      	pop	{r4, r5, pc}
  404b0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  404b0e:	bf1a      	itte	ne
  404b10:	4619      	movne	r1, r3
  404b12:	4610      	movne	r0, r2
  404b14:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  404b18:	bf1c      	itt	ne
  404b1a:	460b      	movne	r3, r1
  404b1c:	4602      	movne	r2, r0
  404b1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  404b22:	bf06      	itte	eq
  404b24:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  404b28:	ea91 0f03 	teqeq	r1, r3
  404b2c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  404b30:	bd30      	pop	{r4, r5, pc}
  404b32:	bf00      	nop

00404b34 <__aeabi_ui2d>:
  404b34:	f090 0f00 	teq	r0, #0
  404b38:	bf04      	itt	eq
  404b3a:	2100      	moveq	r1, #0
  404b3c:	4770      	bxeq	lr
  404b3e:	b530      	push	{r4, r5, lr}
  404b40:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404b44:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404b48:	f04f 0500 	mov.w	r5, #0
  404b4c:	f04f 0100 	mov.w	r1, #0
  404b50:	e750      	b.n	4049f4 <__adddf3+0x138>
  404b52:	bf00      	nop

00404b54 <__aeabi_i2d>:
  404b54:	f090 0f00 	teq	r0, #0
  404b58:	bf04      	itt	eq
  404b5a:	2100      	moveq	r1, #0
  404b5c:	4770      	bxeq	lr
  404b5e:	b530      	push	{r4, r5, lr}
  404b60:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404b64:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404b68:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  404b6c:	bf48      	it	mi
  404b6e:	4240      	negmi	r0, r0
  404b70:	f04f 0100 	mov.w	r1, #0
  404b74:	e73e      	b.n	4049f4 <__adddf3+0x138>
  404b76:	bf00      	nop

00404b78 <__aeabi_f2d>:
  404b78:	0042      	lsls	r2, r0, #1
  404b7a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  404b7e:	ea4f 0131 	mov.w	r1, r1, rrx
  404b82:	ea4f 7002 	mov.w	r0, r2, lsl #28
  404b86:	bf1f      	itttt	ne
  404b88:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  404b8c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  404b90:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  404b94:	4770      	bxne	lr
  404b96:	f092 0f00 	teq	r2, #0
  404b9a:	bf14      	ite	ne
  404b9c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  404ba0:	4770      	bxeq	lr
  404ba2:	b530      	push	{r4, r5, lr}
  404ba4:	f44f 7460 	mov.w	r4, #896	; 0x380
  404ba8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  404bac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  404bb0:	e720      	b.n	4049f4 <__adddf3+0x138>
  404bb2:	bf00      	nop

00404bb4 <__aeabi_ul2d>:
  404bb4:	ea50 0201 	orrs.w	r2, r0, r1
  404bb8:	bf08      	it	eq
  404bba:	4770      	bxeq	lr
  404bbc:	b530      	push	{r4, r5, lr}
  404bbe:	f04f 0500 	mov.w	r5, #0
  404bc2:	e00a      	b.n	404bda <__aeabi_l2d+0x16>

00404bc4 <__aeabi_l2d>:
  404bc4:	ea50 0201 	orrs.w	r2, r0, r1
  404bc8:	bf08      	it	eq
  404bca:	4770      	bxeq	lr
  404bcc:	b530      	push	{r4, r5, lr}
  404bce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  404bd2:	d502      	bpl.n	404bda <__aeabi_l2d+0x16>
  404bd4:	4240      	negs	r0, r0
  404bd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  404bda:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404bde:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404be2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  404be6:	f43f aedc 	beq.w	4049a2 <__adddf3+0xe6>
  404bea:	f04f 0203 	mov.w	r2, #3
  404bee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  404bf2:	bf18      	it	ne
  404bf4:	3203      	addne	r2, #3
  404bf6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  404bfa:	bf18      	it	ne
  404bfc:	3203      	addne	r2, #3
  404bfe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  404c02:	f1c2 0320 	rsb	r3, r2, #32
  404c06:	fa00 fc03 	lsl.w	ip, r0, r3
  404c0a:	fa20 f002 	lsr.w	r0, r0, r2
  404c0e:	fa01 fe03 	lsl.w	lr, r1, r3
  404c12:	ea40 000e 	orr.w	r0, r0, lr
  404c16:	fa21 f102 	lsr.w	r1, r1, r2
  404c1a:	4414      	add	r4, r2
  404c1c:	e6c1      	b.n	4049a2 <__adddf3+0xe6>
  404c1e:	bf00      	nop

00404c20 <__aeabi_dmul>:
  404c20:	b570      	push	{r4, r5, r6, lr}
  404c22:	f04f 0cff 	mov.w	ip, #255	; 0xff
  404c26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  404c2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  404c2e:	bf1d      	ittte	ne
  404c30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  404c34:	ea94 0f0c 	teqne	r4, ip
  404c38:	ea95 0f0c 	teqne	r5, ip
  404c3c:	f000 f8de 	bleq	404dfc <__aeabi_dmul+0x1dc>
  404c40:	442c      	add	r4, r5
  404c42:	ea81 0603 	eor.w	r6, r1, r3
  404c46:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  404c4a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  404c4e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  404c52:	bf18      	it	ne
  404c54:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  404c58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404c5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  404c60:	d038      	beq.n	404cd4 <__aeabi_dmul+0xb4>
  404c62:	fba0 ce02 	umull	ip, lr, r0, r2
  404c66:	f04f 0500 	mov.w	r5, #0
  404c6a:	fbe1 e502 	umlal	lr, r5, r1, r2
  404c6e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  404c72:	fbe0 e503 	umlal	lr, r5, r0, r3
  404c76:	f04f 0600 	mov.w	r6, #0
  404c7a:	fbe1 5603 	umlal	r5, r6, r1, r3
  404c7e:	f09c 0f00 	teq	ip, #0
  404c82:	bf18      	it	ne
  404c84:	f04e 0e01 	orrne.w	lr, lr, #1
  404c88:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  404c8c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  404c90:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  404c94:	d204      	bcs.n	404ca0 <__aeabi_dmul+0x80>
  404c96:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  404c9a:	416d      	adcs	r5, r5
  404c9c:	eb46 0606 	adc.w	r6, r6, r6
  404ca0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  404ca4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  404ca8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  404cac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  404cb0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  404cb4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  404cb8:	bf88      	it	hi
  404cba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  404cbe:	d81e      	bhi.n	404cfe <__aeabi_dmul+0xde>
  404cc0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  404cc4:	bf08      	it	eq
  404cc6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  404cca:	f150 0000 	adcs.w	r0, r0, #0
  404cce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  404cd2:	bd70      	pop	{r4, r5, r6, pc}
  404cd4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  404cd8:	ea46 0101 	orr.w	r1, r6, r1
  404cdc:	ea40 0002 	orr.w	r0, r0, r2
  404ce0:	ea81 0103 	eor.w	r1, r1, r3
  404ce4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  404ce8:	bfc2      	ittt	gt
  404cea:	ebd4 050c 	rsbsgt	r5, r4, ip
  404cee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  404cf2:	bd70      	popgt	{r4, r5, r6, pc}
  404cf4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404cf8:	f04f 0e00 	mov.w	lr, #0
  404cfc:	3c01      	subs	r4, #1
  404cfe:	f300 80ab 	bgt.w	404e58 <__aeabi_dmul+0x238>
  404d02:	f114 0f36 	cmn.w	r4, #54	; 0x36
  404d06:	bfde      	ittt	le
  404d08:	2000      	movle	r0, #0
  404d0a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  404d0e:	bd70      	pople	{r4, r5, r6, pc}
  404d10:	f1c4 0400 	rsb	r4, r4, #0
  404d14:	3c20      	subs	r4, #32
  404d16:	da35      	bge.n	404d84 <__aeabi_dmul+0x164>
  404d18:	340c      	adds	r4, #12
  404d1a:	dc1b      	bgt.n	404d54 <__aeabi_dmul+0x134>
  404d1c:	f104 0414 	add.w	r4, r4, #20
  404d20:	f1c4 0520 	rsb	r5, r4, #32
  404d24:	fa00 f305 	lsl.w	r3, r0, r5
  404d28:	fa20 f004 	lsr.w	r0, r0, r4
  404d2c:	fa01 f205 	lsl.w	r2, r1, r5
  404d30:	ea40 0002 	orr.w	r0, r0, r2
  404d34:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  404d38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  404d3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  404d40:	fa21 f604 	lsr.w	r6, r1, r4
  404d44:	eb42 0106 	adc.w	r1, r2, r6
  404d48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404d4c:	bf08      	it	eq
  404d4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  404d52:	bd70      	pop	{r4, r5, r6, pc}
  404d54:	f1c4 040c 	rsb	r4, r4, #12
  404d58:	f1c4 0520 	rsb	r5, r4, #32
  404d5c:	fa00 f304 	lsl.w	r3, r0, r4
  404d60:	fa20 f005 	lsr.w	r0, r0, r5
  404d64:	fa01 f204 	lsl.w	r2, r1, r4
  404d68:	ea40 0002 	orr.w	r0, r0, r2
  404d6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404d70:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  404d74:	f141 0100 	adc.w	r1, r1, #0
  404d78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404d7c:	bf08      	it	eq
  404d7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  404d82:	bd70      	pop	{r4, r5, r6, pc}
  404d84:	f1c4 0520 	rsb	r5, r4, #32
  404d88:	fa00 f205 	lsl.w	r2, r0, r5
  404d8c:	ea4e 0e02 	orr.w	lr, lr, r2
  404d90:	fa20 f304 	lsr.w	r3, r0, r4
  404d94:	fa01 f205 	lsl.w	r2, r1, r5
  404d98:	ea43 0302 	orr.w	r3, r3, r2
  404d9c:	fa21 f004 	lsr.w	r0, r1, r4
  404da0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404da4:	fa21 f204 	lsr.w	r2, r1, r4
  404da8:	ea20 0002 	bic.w	r0, r0, r2
  404dac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  404db0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404db4:	bf08      	it	eq
  404db6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  404dba:	bd70      	pop	{r4, r5, r6, pc}
  404dbc:	f094 0f00 	teq	r4, #0
  404dc0:	d10f      	bne.n	404de2 <__aeabi_dmul+0x1c2>
  404dc2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  404dc6:	0040      	lsls	r0, r0, #1
  404dc8:	eb41 0101 	adc.w	r1, r1, r1
  404dcc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404dd0:	bf08      	it	eq
  404dd2:	3c01      	subeq	r4, #1
  404dd4:	d0f7      	beq.n	404dc6 <__aeabi_dmul+0x1a6>
  404dd6:	ea41 0106 	orr.w	r1, r1, r6
  404dda:	f095 0f00 	teq	r5, #0
  404dde:	bf18      	it	ne
  404de0:	4770      	bxne	lr
  404de2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  404de6:	0052      	lsls	r2, r2, #1
  404de8:	eb43 0303 	adc.w	r3, r3, r3
  404dec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  404df0:	bf08      	it	eq
  404df2:	3d01      	subeq	r5, #1
  404df4:	d0f7      	beq.n	404de6 <__aeabi_dmul+0x1c6>
  404df6:	ea43 0306 	orr.w	r3, r3, r6
  404dfa:	4770      	bx	lr
  404dfc:	ea94 0f0c 	teq	r4, ip
  404e00:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  404e04:	bf18      	it	ne
  404e06:	ea95 0f0c 	teqne	r5, ip
  404e0a:	d00c      	beq.n	404e26 <__aeabi_dmul+0x206>
  404e0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404e10:	bf18      	it	ne
  404e12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404e16:	d1d1      	bne.n	404dbc <__aeabi_dmul+0x19c>
  404e18:	ea81 0103 	eor.w	r1, r1, r3
  404e1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404e20:	f04f 0000 	mov.w	r0, #0
  404e24:	bd70      	pop	{r4, r5, r6, pc}
  404e26:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404e2a:	bf06      	itte	eq
  404e2c:	4610      	moveq	r0, r2
  404e2e:	4619      	moveq	r1, r3
  404e30:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404e34:	d019      	beq.n	404e6a <__aeabi_dmul+0x24a>
  404e36:	ea94 0f0c 	teq	r4, ip
  404e3a:	d102      	bne.n	404e42 <__aeabi_dmul+0x222>
  404e3c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  404e40:	d113      	bne.n	404e6a <__aeabi_dmul+0x24a>
  404e42:	ea95 0f0c 	teq	r5, ip
  404e46:	d105      	bne.n	404e54 <__aeabi_dmul+0x234>
  404e48:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  404e4c:	bf1c      	itt	ne
  404e4e:	4610      	movne	r0, r2
  404e50:	4619      	movne	r1, r3
  404e52:	d10a      	bne.n	404e6a <__aeabi_dmul+0x24a>
  404e54:	ea81 0103 	eor.w	r1, r1, r3
  404e58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404e5c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  404e60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  404e64:	f04f 0000 	mov.w	r0, #0
  404e68:	bd70      	pop	{r4, r5, r6, pc}
  404e6a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  404e6e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  404e72:	bd70      	pop	{r4, r5, r6, pc}

00404e74 <__aeabi_ddiv>:
  404e74:	b570      	push	{r4, r5, r6, lr}
  404e76:	f04f 0cff 	mov.w	ip, #255	; 0xff
  404e7a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  404e7e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  404e82:	bf1d      	ittte	ne
  404e84:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  404e88:	ea94 0f0c 	teqne	r4, ip
  404e8c:	ea95 0f0c 	teqne	r5, ip
  404e90:	f000 f8a7 	bleq	404fe2 <__aeabi_ddiv+0x16e>
  404e94:	eba4 0405 	sub.w	r4, r4, r5
  404e98:	ea81 0e03 	eor.w	lr, r1, r3
  404e9c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  404ea0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  404ea4:	f000 8088 	beq.w	404fb8 <__aeabi_ddiv+0x144>
  404ea8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  404eac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  404eb0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  404eb4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  404eb8:	ea4f 2202 	mov.w	r2, r2, lsl #8
  404ebc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  404ec0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  404ec4:	ea4f 2600 	mov.w	r6, r0, lsl #8
  404ec8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  404ecc:	429d      	cmp	r5, r3
  404ece:	bf08      	it	eq
  404ed0:	4296      	cmpeq	r6, r2
  404ed2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  404ed6:	f504 7440 	add.w	r4, r4, #768	; 0x300
  404eda:	d202      	bcs.n	404ee2 <__aeabi_ddiv+0x6e>
  404edc:	085b      	lsrs	r3, r3, #1
  404ede:	ea4f 0232 	mov.w	r2, r2, rrx
  404ee2:	1ab6      	subs	r6, r6, r2
  404ee4:	eb65 0503 	sbc.w	r5, r5, r3
  404ee8:	085b      	lsrs	r3, r3, #1
  404eea:	ea4f 0232 	mov.w	r2, r2, rrx
  404eee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  404ef2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  404ef6:	ebb6 0e02 	subs.w	lr, r6, r2
  404efa:	eb75 0e03 	sbcs.w	lr, r5, r3
  404efe:	bf22      	ittt	cs
  404f00:	1ab6      	subcs	r6, r6, r2
  404f02:	4675      	movcs	r5, lr
  404f04:	ea40 000c 	orrcs.w	r0, r0, ip
  404f08:	085b      	lsrs	r3, r3, #1
  404f0a:	ea4f 0232 	mov.w	r2, r2, rrx
  404f0e:	ebb6 0e02 	subs.w	lr, r6, r2
  404f12:	eb75 0e03 	sbcs.w	lr, r5, r3
  404f16:	bf22      	ittt	cs
  404f18:	1ab6      	subcs	r6, r6, r2
  404f1a:	4675      	movcs	r5, lr
  404f1c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  404f20:	085b      	lsrs	r3, r3, #1
  404f22:	ea4f 0232 	mov.w	r2, r2, rrx
  404f26:	ebb6 0e02 	subs.w	lr, r6, r2
  404f2a:	eb75 0e03 	sbcs.w	lr, r5, r3
  404f2e:	bf22      	ittt	cs
  404f30:	1ab6      	subcs	r6, r6, r2
  404f32:	4675      	movcs	r5, lr
  404f34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  404f38:	085b      	lsrs	r3, r3, #1
  404f3a:	ea4f 0232 	mov.w	r2, r2, rrx
  404f3e:	ebb6 0e02 	subs.w	lr, r6, r2
  404f42:	eb75 0e03 	sbcs.w	lr, r5, r3
  404f46:	bf22      	ittt	cs
  404f48:	1ab6      	subcs	r6, r6, r2
  404f4a:	4675      	movcs	r5, lr
  404f4c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  404f50:	ea55 0e06 	orrs.w	lr, r5, r6
  404f54:	d018      	beq.n	404f88 <__aeabi_ddiv+0x114>
  404f56:	ea4f 1505 	mov.w	r5, r5, lsl #4
  404f5a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  404f5e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  404f62:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  404f66:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  404f6a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  404f6e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  404f72:	d1c0      	bne.n	404ef6 <__aeabi_ddiv+0x82>
  404f74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404f78:	d10b      	bne.n	404f92 <__aeabi_ddiv+0x11e>
  404f7a:	ea41 0100 	orr.w	r1, r1, r0
  404f7e:	f04f 0000 	mov.w	r0, #0
  404f82:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  404f86:	e7b6      	b.n	404ef6 <__aeabi_ddiv+0x82>
  404f88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404f8c:	bf04      	itt	eq
  404f8e:	4301      	orreq	r1, r0
  404f90:	2000      	moveq	r0, #0
  404f92:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  404f96:	bf88      	it	hi
  404f98:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  404f9c:	f63f aeaf 	bhi.w	404cfe <__aeabi_dmul+0xde>
  404fa0:	ebb5 0c03 	subs.w	ip, r5, r3
  404fa4:	bf04      	itt	eq
  404fa6:	ebb6 0c02 	subseq.w	ip, r6, r2
  404faa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  404fae:	f150 0000 	adcs.w	r0, r0, #0
  404fb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  404fb6:	bd70      	pop	{r4, r5, r6, pc}
  404fb8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  404fbc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  404fc0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  404fc4:	bfc2      	ittt	gt
  404fc6:	ebd4 050c 	rsbsgt	r5, r4, ip
  404fca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  404fce:	bd70      	popgt	{r4, r5, r6, pc}
  404fd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404fd4:	f04f 0e00 	mov.w	lr, #0
  404fd8:	3c01      	subs	r4, #1
  404fda:	e690      	b.n	404cfe <__aeabi_dmul+0xde>
  404fdc:	ea45 0e06 	orr.w	lr, r5, r6
  404fe0:	e68d      	b.n	404cfe <__aeabi_dmul+0xde>
  404fe2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  404fe6:	ea94 0f0c 	teq	r4, ip
  404fea:	bf08      	it	eq
  404fec:	ea95 0f0c 	teqeq	r5, ip
  404ff0:	f43f af3b 	beq.w	404e6a <__aeabi_dmul+0x24a>
  404ff4:	ea94 0f0c 	teq	r4, ip
  404ff8:	d10a      	bne.n	405010 <__aeabi_ddiv+0x19c>
  404ffa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  404ffe:	f47f af34 	bne.w	404e6a <__aeabi_dmul+0x24a>
  405002:	ea95 0f0c 	teq	r5, ip
  405006:	f47f af25 	bne.w	404e54 <__aeabi_dmul+0x234>
  40500a:	4610      	mov	r0, r2
  40500c:	4619      	mov	r1, r3
  40500e:	e72c      	b.n	404e6a <__aeabi_dmul+0x24a>
  405010:	ea95 0f0c 	teq	r5, ip
  405014:	d106      	bne.n	405024 <__aeabi_ddiv+0x1b0>
  405016:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40501a:	f43f aefd 	beq.w	404e18 <__aeabi_dmul+0x1f8>
  40501e:	4610      	mov	r0, r2
  405020:	4619      	mov	r1, r3
  405022:	e722      	b.n	404e6a <__aeabi_dmul+0x24a>
  405024:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405028:	bf18      	it	ne
  40502a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40502e:	f47f aec5 	bne.w	404dbc <__aeabi_dmul+0x19c>
  405032:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  405036:	f47f af0d 	bne.w	404e54 <__aeabi_dmul+0x234>
  40503a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40503e:	f47f aeeb 	bne.w	404e18 <__aeabi_dmul+0x1f8>
  405042:	e712      	b.n	404e6a <__aeabi_dmul+0x24a>

00405044 <__gedf2>:
  405044:	f04f 3cff 	mov.w	ip, #4294967295
  405048:	e006      	b.n	405058 <__cmpdf2+0x4>
  40504a:	bf00      	nop

0040504c <__ledf2>:
  40504c:	f04f 0c01 	mov.w	ip, #1
  405050:	e002      	b.n	405058 <__cmpdf2+0x4>
  405052:	bf00      	nop

00405054 <__cmpdf2>:
  405054:	f04f 0c01 	mov.w	ip, #1
  405058:	f84d cd04 	str.w	ip, [sp, #-4]!
  40505c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405060:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405064:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405068:	bf18      	it	ne
  40506a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40506e:	d01b      	beq.n	4050a8 <__cmpdf2+0x54>
  405070:	b001      	add	sp, #4
  405072:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  405076:	bf0c      	ite	eq
  405078:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40507c:	ea91 0f03 	teqne	r1, r3
  405080:	bf02      	ittt	eq
  405082:	ea90 0f02 	teqeq	r0, r2
  405086:	2000      	moveq	r0, #0
  405088:	4770      	bxeq	lr
  40508a:	f110 0f00 	cmn.w	r0, #0
  40508e:	ea91 0f03 	teq	r1, r3
  405092:	bf58      	it	pl
  405094:	4299      	cmppl	r1, r3
  405096:	bf08      	it	eq
  405098:	4290      	cmpeq	r0, r2
  40509a:	bf2c      	ite	cs
  40509c:	17d8      	asrcs	r0, r3, #31
  40509e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4050a2:	f040 0001 	orr.w	r0, r0, #1
  4050a6:	4770      	bx	lr
  4050a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4050ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4050b0:	d102      	bne.n	4050b8 <__cmpdf2+0x64>
  4050b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4050b6:	d107      	bne.n	4050c8 <__cmpdf2+0x74>
  4050b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4050bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4050c0:	d1d6      	bne.n	405070 <__cmpdf2+0x1c>
  4050c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4050c6:	d0d3      	beq.n	405070 <__cmpdf2+0x1c>
  4050c8:	f85d 0b04 	ldr.w	r0, [sp], #4
  4050cc:	4770      	bx	lr
  4050ce:	bf00      	nop

004050d0 <__aeabi_cdrcmple>:
  4050d0:	4684      	mov	ip, r0
  4050d2:	4610      	mov	r0, r2
  4050d4:	4662      	mov	r2, ip
  4050d6:	468c      	mov	ip, r1
  4050d8:	4619      	mov	r1, r3
  4050da:	4663      	mov	r3, ip
  4050dc:	e000      	b.n	4050e0 <__aeabi_cdcmpeq>
  4050de:	bf00      	nop

004050e0 <__aeabi_cdcmpeq>:
  4050e0:	b501      	push	{r0, lr}
  4050e2:	f7ff ffb7 	bl	405054 <__cmpdf2>
  4050e6:	2800      	cmp	r0, #0
  4050e8:	bf48      	it	mi
  4050ea:	f110 0f00 	cmnmi.w	r0, #0
  4050ee:	bd01      	pop	{r0, pc}

004050f0 <__aeabi_dcmpeq>:
  4050f0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4050f4:	f7ff fff4 	bl	4050e0 <__aeabi_cdcmpeq>
  4050f8:	bf0c      	ite	eq
  4050fa:	2001      	moveq	r0, #1
  4050fc:	2000      	movne	r0, #0
  4050fe:	f85d fb08 	ldr.w	pc, [sp], #8
  405102:	bf00      	nop

00405104 <__aeabi_dcmplt>:
  405104:	f84d ed08 	str.w	lr, [sp, #-8]!
  405108:	f7ff ffea 	bl	4050e0 <__aeabi_cdcmpeq>
  40510c:	bf34      	ite	cc
  40510e:	2001      	movcc	r0, #1
  405110:	2000      	movcs	r0, #0
  405112:	f85d fb08 	ldr.w	pc, [sp], #8
  405116:	bf00      	nop

00405118 <__aeabi_dcmple>:
  405118:	f84d ed08 	str.w	lr, [sp, #-8]!
  40511c:	f7ff ffe0 	bl	4050e0 <__aeabi_cdcmpeq>
  405120:	bf94      	ite	ls
  405122:	2001      	movls	r0, #1
  405124:	2000      	movhi	r0, #0
  405126:	f85d fb08 	ldr.w	pc, [sp], #8
  40512a:	bf00      	nop

0040512c <__aeabi_dcmpge>:
  40512c:	f84d ed08 	str.w	lr, [sp, #-8]!
  405130:	f7ff ffce 	bl	4050d0 <__aeabi_cdrcmple>
  405134:	bf94      	ite	ls
  405136:	2001      	movls	r0, #1
  405138:	2000      	movhi	r0, #0
  40513a:	f85d fb08 	ldr.w	pc, [sp], #8
  40513e:	bf00      	nop

00405140 <__aeabi_dcmpgt>:
  405140:	f84d ed08 	str.w	lr, [sp, #-8]!
  405144:	f7ff ffc4 	bl	4050d0 <__aeabi_cdrcmple>
  405148:	bf34      	ite	cc
  40514a:	2001      	movcc	r0, #1
  40514c:	2000      	movcs	r0, #0
  40514e:	f85d fb08 	ldr.w	pc, [sp], #8
  405152:	bf00      	nop

00405154 <__aeabi_dcmpun>:
  405154:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405158:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40515c:	d102      	bne.n	405164 <__aeabi_dcmpun+0x10>
  40515e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  405162:	d10a      	bne.n	40517a <__aeabi_dcmpun+0x26>
  405164:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405168:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40516c:	d102      	bne.n	405174 <__aeabi_dcmpun+0x20>
  40516e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  405172:	d102      	bne.n	40517a <__aeabi_dcmpun+0x26>
  405174:	f04f 0000 	mov.w	r0, #0
  405178:	4770      	bx	lr
  40517a:	f04f 0001 	mov.w	r0, #1
  40517e:	4770      	bx	lr

00405180 <__aeabi_d2f>:
  405180:	ea4f 0241 	mov.w	r2, r1, lsl #1
  405184:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  405188:	bf24      	itt	cs
  40518a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40518e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  405192:	d90d      	bls.n	4051b0 <__aeabi_d2f+0x30>
  405194:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  405198:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  40519c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  4051a0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  4051a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  4051a8:	bf08      	it	eq
  4051aa:	f020 0001 	biceq.w	r0, r0, #1
  4051ae:	4770      	bx	lr
  4051b0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  4051b4:	d121      	bne.n	4051fa <__aeabi_d2f+0x7a>
  4051b6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  4051ba:	bfbc      	itt	lt
  4051bc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  4051c0:	4770      	bxlt	lr
  4051c2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4051c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
  4051ca:	f1c2 0218 	rsb	r2, r2, #24
  4051ce:	f1c2 0c20 	rsb	ip, r2, #32
  4051d2:	fa10 f30c 	lsls.w	r3, r0, ip
  4051d6:	fa20 f002 	lsr.w	r0, r0, r2
  4051da:	bf18      	it	ne
  4051dc:	f040 0001 	orrne.w	r0, r0, #1
  4051e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4051e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  4051e8:	fa03 fc0c 	lsl.w	ip, r3, ip
  4051ec:	ea40 000c 	orr.w	r0, r0, ip
  4051f0:	fa23 f302 	lsr.w	r3, r3, r2
  4051f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
  4051f8:	e7cc      	b.n	405194 <__aeabi_d2f+0x14>
  4051fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
  4051fe:	d107      	bne.n	405210 <__aeabi_d2f+0x90>
  405200:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  405204:	bf1e      	ittt	ne
  405206:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  40520a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40520e:	4770      	bxne	lr
  405210:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  405214:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  405218:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40521c:	4770      	bx	lr
  40521e:	bf00      	nop

00405220 <__errno>:
  405220:	4b01      	ldr	r3, [pc, #4]	; (405228 <__errno+0x8>)
  405222:	6818      	ldr	r0, [r3, #0]
  405224:	4770      	bx	lr
  405226:	bf00      	nop
  405228:	20400058 	.word	0x20400058

0040522c <__libc_init_array>:
  40522c:	b570      	push	{r4, r5, r6, lr}
  40522e:	4e0f      	ldr	r6, [pc, #60]	; (40526c <__libc_init_array+0x40>)
  405230:	4d0f      	ldr	r5, [pc, #60]	; (405270 <__libc_init_array+0x44>)
  405232:	1b76      	subs	r6, r6, r5
  405234:	10b6      	asrs	r6, r6, #2
  405236:	bf18      	it	ne
  405238:	2400      	movne	r4, #0
  40523a:	d005      	beq.n	405248 <__libc_init_array+0x1c>
  40523c:	3401      	adds	r4, #1
  40523e:	f855 3b04 	ldr.w	r3, [r5], #4
  405242:	4798      	blx	r3
  405244:	42a6      	cmp	r6, r4
  405246:	d1f9      	bne.n	40523c <__libc_init_array+0x10>
  405248:	4e0a      	ldr	r6, [pc, #40]	; (405274 <__libc_init_array+0x48>)
  40524a:	4d0b      	ldr	r5, [pc, #44]	; (405278 <__libc_init_array+0x4c>)
  40524c:	1b76      	subs	r6, r6, r5
  40524e:	f003 fcdb 	bl	408c08 <_init>
  405252:	10b6      	asrs	r6, r6, #2
  405254:	bf18      	it	ne
  405256:	2400      	movne	r4, #0
  405258:	d006      	beq.n	405268 <__libc_init_array+0x3c>
  40525a:	3401      	adds	r4, #1
  40525c:	f855 3b04 	ldr.w	r3, [r5], #4
  405260:	4798      	blx	r3
  405262:	42a6      	cmp	r6, r4
  405264:	d1f9      	bne.n	40525a <__libc_init_array+0x2e>
  405266:	bd70      	pop	{r4, r5, r6, pc}
  405268:	bd70      	pop	{r4, r5, r6, pc}
  40526a:	bf00      	nop
  40526c:	00408c14 	.word	0x00408c14
  405270:	00408c14 	.word	0x00408c14
  405274:	00408c1c 	.word	0x00408c1c
  405278:	00408c14 	.word	0x00408c14

0040527c <iprintf>:
  40527c:	b40f      	push	{r0, r1, r2, r3}
  40527e:	b500      	push	{lr}
  405280:	4907      	ldr	r1, [pc, #28]	; (4052a0 <iprintf+0x24>)
  405282:	b083      	sub	sp, #12
  405284:	ab04      	add	r3, sp, #16
  405286:	6808      	ldr	r0, [r1, #0]
  405288:	f853 2b04 	ldr.w	r2, [r3], #4
  40528c:	6881      	ldr	r1, [r0, #8]
  40528e:	9301      	str	r3, [sp, #4]
  405290:	f000 fc06 	bl	405aa0 <_vfiprintf_r>
  405294:	b003      	add	sp, #12
  405296:	f85d eb04 	ldr.w	lr, [sp], #4
  40529a:	b004      	add	sp, #16
  40529c:	4770      	bx	lr
  40529e:	bf00      	nop
  4052a0:	20400058 	.word	0x20400058

004052a4 <malloc>:
  4052a4:	4b02      	ldr	r3, [pc, #8]	; (4052b0 <malloc+0xc>)
  4052a6:	4601      	mov	r1, r0
  4052a8:	6818      	ldr	r0, [r3, #0]
  4052aa:	f000 b803 	b.w	4052b4 <_malloc_r>
  4052ae:	bf00      	nop
  4052b0:	20400058 	.word	0x20400058

004052b4 <_malloc_r>:
  4052b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4052b8:	f101 060b 	add.w	r6, r1, #11
  4052bc:	2e16      	cmp	r6, #22
  4052be:	b083      	sub	sp, #12
  4052c0:	4605      	mov	r5, r0
  4052c2:	f240 809e 	bls.w	405402 <_malloc_r+0x14e>
  4052c6:	f036 0607 	bics.w	r6, r6, #7
  4052ca:	f100 80bd 	bmi.w	405448 <_malloc_r+0x194>
  4052ce:	42b1      	cmp	r1, r6
  4052d0:	f200 80ba 	bhi.w	405448 <_malloc_r+0x194>
  4052d4:	f000 fb86 	bl	4059e4 <__malloc_lock>
  4052d8:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4052dc:	f0c0 8293 	bcc.w	405806 <_malloc_r+0x552>
  4052e0:	0a73      	lsrs	r3, r6, #9
  4052e2:	f000 80b8 	beq.w	405456 <_malloc_r+0x1a2>
  4052e6:	2b04      	cmp	r3, #4
  4052e8:	f200 8179 	bhi.w	4055de <_malloc_r+0x32a>
  4052ec:	09b3      	lsrs	r3, r6, #6
  4052ee:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4052f2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4052f6:	00c3      	lsls	r3, r0, #3
  4052f8:	4fbf      	ldr	r7, [pc, #764]	; (4055f8 <_malloc_r+0x344>)
  4052fa:	443b      	add	r3, r7
  4052fc:	f1a3 0108 	sub.w	r1, r3, #8
  405300:	685c      	ldr	r4, [r3, #4]
  405302:	42a1      	cmp	r1, r4
  405304:	d106      	bne.n	405314 <_malloc_r+0x60>
  405306:	e00c      	b.n	405322 <_malloc_r+0x6e>
  405308:	2a00      	cmp	r2, #0
  40530a:	f280 80aa 	bge.w	405462 <_malloc_r+0x1ae>
  40530e:	68e4      	ldr	r4, [r4, #12]
  405310:	42a1      	cmp	r1, r4
  405312:	d006      	beq.n	405322 <_malloc_r+0x6e>
  405314:	6863      	ldr	r3, [r4, #4]
  405316:	f023 0303 	bic.w	r3, r3, #3
  40531a:	1b9a      	subs	r2, r3, r6
  40531c:	2a0f      	cmp	r2, #15
  40531e:	ddf3      	ble.n	405308 <_malloc_r+0x54>
  405320:	4670      	mov	r0, lr
  405322:	693c      	ldr	r4, [r7, #16]
  405324:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40560c <_malloc_r+0x358>
  405328:	4574      	cmp	r4, lr
  40532a:	f000 81ab 	beq.w	405684 <_malloc_r+0x3d0>
  40532e:	6863      	ldr	r3, [r4, #4]
  405330:	f023 0303 	bic.w	r3, r3, #3
  405334:	1b9a      	subs	r2, r3, r6
  405336:	2a0f      	cmp	r2, #15
  405338:	f300 8190 	bgt.w	40565c <_malloc_r+0x3a8>
  40533c:	2a00      	cmp	r2, #0
  40533e:	f8c7 e014 	str.w	lr, [r7, #20]
  405342:	f8c7 e010 	str.w	lr, [r7, #16]
  405346:	f280 809d 	bge.w	405484 <_malloc_r+0x1d0>
  40534a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40534e:	f080 8161 	bcs.w	405614 <_malloc_r+0x360>
  405352:	08db      	lsrs	r3, r3, #3
  405354:	f103 0c01 	add.w	ip, r3, #1
  405358:	1099      	asrs	r1, r3, #2
  40535a:	687a      	ldr	r2, [r7, #4]
  40535c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  405360:	f8c4 8008 	str.w	r8, [r4, #8]
  405364:	2301      	movs	r3, #1
  405366:	408b      	lsls	r3, r1
  405368:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40536c:	4313      	orrs	r3, r2
  40536e:	3908      	subs	r1, #8
  405370:	60e1      	str	r1, [r4, #12]
  405372:	607b      	str	r3, [r7, #4]
  405374:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  405378:	f8c8 400c 	str.w	r4, [r8, #12]
  40537c:	1082      	asrs	r2, r0, #2
  40537e:	2401      	movs	r4, #1
  405380:	4094      	lsls	r4, r2
  405382:	429c      	cmp	r4, r3
  405384:	f200 808b 	bhi.w	40549e <_malloc_r+0x1ea>
  405388:	421c      	tst	r4, r3
  40538a:	d106      	bne.n	40539a <_malloc_r+0xe6>
  40538c:	f020 0003 	bic.w	r0, r0, #3
  405390:	0064      	lsls	r4, r4, #1
  405392:	421c      	tst	r4, r3
  405394:	f100 0004 	add.w	r0, r0, #4
  405398:	d0fa      	beq.n	405390 <_malloc_r+0xdc>
  40539a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40539e:	46cc      	mov	ip, r9
  4053a0:	4680      	mov	r8, r0
  4053a2:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4053a6:	459c      	cmp	ip, r3
  4053a8:	d107      	bne.n	4053ba <_malloc_r+0x106>
  4053aa:	e16d      	b.n	405688 <_malloc_r+0x3d4>
  4053ac:	2a00      	cmp	r2, #0
  4053ae:	f280 817b 	bge.w	4056a8 <_malloc_r+0x3f4>
  4053b2:	68db      	ldr	r3, [r3, #12]
  4053b4:	459c      	cmp	ip, r3
  4053b6:	f000 8167 	beq.w	405688 <_malloc_r+0x3d4>
  4053ba:	6859      	ldr	r1, [r3, #4]
  4053bc:	f021 0103 	bic.w	r1, r1, #3
  4053c0:	1b8a      	subs	r2, r1, r6
  4053c2:	2a0f      	cmp	r2, #15
  4053c4:	ddf2      	ble.n	4053ac <_malloc_r+0xf8>
  4053c6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4053ca:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4053ce:	9300      	str	r3, [sp, #0]
  4053d0:	199c      	adds	r4, r3, r6
  4053d2:	4628      	mov	r0, r5
  4053d4:	f046 0601 	orr.w	r6, r6, #1
  4053d8:	f042 0501 	orr.w	r5, r2, #1
  4053dc:	605e      	str	r6, [r3, #4]
  4053de:	f8c8 c00c 	str.w	ip, [r8, #12]
  4053e2:	f8cc 8008 	str.w	r8, [ip, #8]
  4053e6:	617c      	str	r4, [r7, #20]
  4053e8:	613c      	str	r4, [r7, #16]
  4053ea:	f8c4 e00c 	str.w	lr, [r4, #12]
  4053ee:	f8c4 e008 	str.w	lr, [r4, #8]
  4053f2:	6065      	str	r5, [r4, #4]
  4053f4:	505a      	str	r2, [r3, r1]
  4053f6:	f000 fafb 	bl	4059f0 <__malloc_unlock>
  4053fa:	9b00      	ldr	r3, [sp, #0]
  4053fc:	f103 0408 	add.w	r4, r3, #8
  405400:	e01e      	b.n	405440 <_malloc_r+0x18c>
  405402:	2910      	cmp	r1, #16
  405404:	d820      	bhi.n	405448 <_malloc_r+0x194>
  405406:	f000 faed 	bl	4059e4 <__malloc_lock>
  40540a:	2610      	movs	r6, #16
  40540c:	2318      	movs	r3, #24
  40540e:	2002      	movs	r0, #2
  405410:	4f79      	ldr	r7, [pc, #484]	; (4055f8 <_malloc_r+0x344>)
  405412:	443b      	add	r3, r7
  405414:	f1a3 0208 	sub.w	r2, r3, #8
  405418:	685c      	ldr	r4, [r3, #4]
  40541a:	4294      	cmp	r4, r2
  40541c:	f000 813d 	beq.w	40569a <_malloc_r+0x3e6>
  405420:	6863      	ldr	r3, [r4, #4]
  405422:	68e1      	ldr	r1, [r4, #12]
  405424:	68a6      	ldr	r6, [r4, #8]
  405426:	f023 0303 	bic.w	r3, r3, #3
  40542a:	4423      	add	r3, r4
  40542c:	4628      	mov	r0, r5
  40542e:	685a      	ldr	r2, [r3, #4]
  405430:	60f1      	str	r1, [r6, #12]
  405432:	f042 0201 	orr.w	r2, r2, #1
  405436:	608e      	str	r6, [r1, #8]
  405438:	605a      	str	r2, [r3, #4]
  40543a:	f000 fad9 	bl	4059f0 <__malloc_unlock>
  40543e:	3408      	adds	r4, #8
  405440:	4620      	mov	r0, r4
  405442:	b003      	add	sp, #12
  405444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405448:	2400      	movs	r4, #0
  40544a:	230c      	movs	r3, #12
  40544c:	4620      	mov	r0, r4
  40544e:	602b      	str	r3, [r5, #0]
  405450:	b003      	add	sp, #12
  405452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405456:	2040      	movs	r0, #64	; 0x40
  405458:	f44f 7300 	mov.w	r3, #512	; 0x200
  40545c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  405460:	e74a      	b.n	4052f8 <_malloc_r+0x44>
  405462:	4423      	add	r3, r4
  405464:	68e1      	ldr	r1, [r4, #12]
  405466:	685a      	ldr	r2, [r3, #4]
  405468:	68a6      	ldr	r6, [r4, #8]
  40546a:	f042 0201 	orr.w	r2, r2, #1
  40546e:	60f1      	str	r1, [r6, #12]
  405470:	4628      	mov	r0, r5
  405472:	608e      	str	r6, [r1, #8]
  405474:	605a      	str	r2, [r3, #4]
  405476:	f000 fabb 	bl	4059f0 <__malloc_unlock>
  40547a:	3408      	adds	r4, #8
  40547c:	4620      	mov	r0, r4
  40547e:	b003      	add	sp, #12
  405480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405484:	4423      	add	r3, r4
  405486:	4628      	mov	r0, r5
  405488:	685a      	ldr	r2, [r3, #4]
  40548a:	f042 0201 	orr.w	r2, r2, #1
  40548e:	605a      	str	r2, [r3, #4]
  405490:	f000 faae 	bl	4059f0 <__malloc_unlock>
  405494:	3408      	adds	r4, #8
  405496:	4620      	mov	r0, r4
  405498:	b003      	add	sp, #12
  40549a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40549e:	68bc      	ldr	r4, [r7, #8]
  4054a0:	6863      	ldr	r3, [r4, #4]
  4054a2:	f023 0803 	bic.w	r8, r3, #3
  4054a6:	45b0      	cmp	r8, r6
  4054a8:	d304      	bcc.n	4054b4 <_malloc_r+0x200>
  4054aa:	eba8 0306 	sub.w	r3, r8, r6
  4054ae:	2b0f      	cmp	r3, #15
  4054b0:	f300 8085 	bgt.w	4055be <_malloc_r+0x30a>
  4054b4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 405610 <_malloc_r+0x35c>
  4054b8:	4b50      	ldr	r3, [pc, #320]	; (4055fc <_malloc_r+0x348>)
  4054ba:	f8d9 2000 	ldr.w	r2, [r9]
  4054be:	681b      	ldr	r3, [r3, #0]
  4054c0:	3201      	adds	r2, #1
  4054c2:	4433      	add	r3, r6
  4054c4:	eb04 0a08 	add.w	sl, r4, r8
  4054c8:	f000 8155 	beq.w	405776 <_malloc_r+0x4c2>
  4054cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4054d0:	330f      	adds	r3, #15
  4054d2:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4054d6:	f02b 0b0f 	bic.w	fp, fp, #15
  4054da:	4659      	mov	r1, fp
  4054dc:	4628      	mov	r0, r5
  4054de:	f000 fa8d 	bl	4059fc <_sbrk_r>
  4054e2:	1c41      	adds	r1, r0, #1
  4054e4:	4602      	mov	r2, r0
  4054e6:	f000 80fc 	beq.w	4056e2 <_malloc_r+0x42e>
  4054ea:	4582      	cmp	sl, r0
  4054ec:	f200 80f7 	bhi.w	4056de <_malloc_r+0x42a>
  4054f0:	4b43      	ldr	r3, [pc, #268]	; (405600 <_malloc_r+0x34c>)
  4054f2:	6819      	ldr	r1, [r3, #0]
  4054f4:	4459      	add	r1, fp
  4054f6:	6019      	str	r1, [r3, #0]
  4054f8:	f000 814d 	beq.w	405796 <_malloc_r+0x4e2>
  4054fc:	f8d9 0000 	ldr.w	r0, [r9]
  405500:	3001      	adds	r0, #1
  405502:	bf1b      	ittet	ne
  405504:	eba2 0a0a 	subne.w	sl, r2, sl
  405508:	4451      	addne	r1, sl
  40550a:	f8c9 2000 	streq.w	r2, [r9]
  40550e:	6019      	strne	r1, [r3, #0]
  405510:	f012 0107 	ands.w	r1, r2, #7
  405514:	f000 8115 	beq.w	405742 <_malloc_r+0x48e>
  405518:	f1c1 0008 	rsb	r0, r1, #8
  40551c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  405520:	4402      	add	r2, r0
  405522:	3108      	adds	r1, #8
  405524:	eb02 090b 	add.w	r9, r2, fp
  405528:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40552c:	eba1 0909 	sub.w	r9, r1, r9
  405530:	4649      	mov	r1, r9
  405532:	4628      	mov	r0, r5
  405534:	9301      	str	r3, [sp, #4]
  405536:	9200      	str	r2, [sp, #0]
  405538:	f000 fa60 	bl	4059fc <_sbrk_r>
  40553c:	1c43      	adds	r3, r0, #1
  40553e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  405542:	f000 8143 	beq.w	4057cc <_malloc_r+0x518>
  405546:	1a80      	subs	r0, r0, r2
  405548:	4448      	add	r0, r9
  40554a:	f040 0001 	orr.w	r0, r0, #1
  40554e:	6819      	ldr	r1, [r3, #0]
  405550:	60ba      	str	r2, [r7, #8]
  405552:	4449      	add	r1, r9
  405554:	42bc      	cmp	r4, r7
  405556:	6050      	str	r0, [r2, #4]
  405558:	6019      	str	r1, [r3, #0]
  40555a:	d017      	beq.n	40558c <_malloc_r+0x2d8>
  40555c:	f1b8 0f0f 	cmp.w	r8, #15
  405560:	f240 80fb 	bls.w	40575a <_malloc_r+0x4a6>
  405564:	6860      	ldr	r0, [r4, #4]
  405566:	f1a8 020c 	sub.w	r2, r8, #12
  40556a:	f022 0207 	bic.w	r2, r2, #7
  40556e:	eb04 0e02 	add.w	lr, r4, r2
  405572:	f000 0001 	and.w	r0, r0, #1
  405576:	f04f 0c05 	mov.w	ip, #5
  40557a:	4310      	orrs	r0, r2
  40557c:	2a0f      	cmp	r2, #15
  40557e:	6060      	str	r0, [r4, #4]
  405580:	f8ce c004 	str.w	ip, [lr, #4]
  405584:	f8ce c008 	str.w	ip, [lr, #8]
  405588:	f200 8117 	bhi.w	4057ba <_malloc_r+0x506>
  40558c:	4b1d      	ldr	r3, [pc, #116]	; (405604 <_malloc_r+0x350>)
  40558e:	68bc      	ldr	r4, [r7, #8]
  405590:	681a      	ldr	r2, [r3, #0]
  405592:	4291      	cmp	r1, r2
  405594:	bf88      	it	hi
  405596:	6019      	strhi	r1, [r3, #0]
  405598:	4b1b      	ldr	r3, [pc, #108]	; (405608 <_malloc_r+0x354>)
  40559a:	681a      	ldr	r2, [r3, #0]
  40559c:	4291      	cmp	r1, r2
  40559e:	6862      	ldr	r2, [r4, #4]
  4055a0:	bf88      	it	hi
  4055a2:	6019      	strhi	r1, [r3, #0]
  4055a4:	f022 0203 	bic.w	r2, r2, #3
  4055a8:	4296      	cmp	r6, r2
  4055aa:	eba2 0306 	sub.w	r3, r2, r6
  4055ae:	d801      	bhi.n	4055b4 <_malloc_r+0x300>
  4055b0:	2b0f      	cmp	r3, #15
  4055b2:	dc04      	bgt.n	4055be <_malloc_r+0x30a>
  4055b4:	4628      	mov	r0, r5
  4055b6:	f000 fa1b 	bl	4059f0 <__malloc_unlock>
  4055ba:	2400      	movs	r4, #0
  4055bc:	e740      	b.n	405440 <_malloc_r+0x18c>
  4055be:	19a2      	adds	r2, r4, r6
  4055c0:	f043 0301 	orr.w	r3, r3, #1
  4055c4:	f046 0601 	orr.w	r6, r6, #1
  4055c8:	6066      	str	r6, [r4, #4]
  4055ca:	4628      	mov	r0, r5
  4055cc:	60ba      	str	r2, [r7, #8]
  4055ce:	6053      	str	r3, [r2, #4]
  4055d0:	f000 fa0e 	bl	4059f0 <__malloc_unlock>
  4055d4:	3408      	adds	r4, #8
  4055d6:	4620      	mov	r0, r4
  4055d8:	b003      	add	sp, #12
  4055da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4055de:	2b14      	cmp	r3, #20
  4055e0:	d971      	bls.n	4056c6 <_malloc_r+0x412>
  4055e2:	2b54      	cmp	r3, #84	; 0x54
  4055e4:	f200 80a3 	bhi.w	40572e <_malloc_r+0x47a>
  4055e8:	0b33      	lsrs	r3, r6, #12
  4055ea:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4055ee:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4055f2:	00c3      	lsls	r3, r0, #3
  4055f4:	e680      	b.n	4052f8 <_malloc_r+0x44>
  4055f6:	bf00      	nop
  4055f8:	20400488 	.word	0x20400488
  4055fc:	20445440 	.word	0x20445440
  405600:	20445410 	.word	0x20445410
  405604:	20445438 	.word	0x20445438
  405608:	2044543c 	.word	0x2044543c
  40560c:	20400490 	.word	0x20400490
  405610:	20400890 	.word	0x20400890
  405614:	0a5a      	lsrs	r2, r3, #9
  405616:	2a04      	cmp	r2, #4
  405618:	d95b      	bls.n	4056d2 <_malloc_r+0x41e>
  40561a:	2a14      	cmp	r2, #20
  40561c:	f200 80ae 	bhi.w	40577c <_malloc_r+0x4c8>
  405620:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  405624:	00c9      	lsls	r1, r1, #3
  405626:	325b      	adds	r2, #91	; 0x5b
  405628:	eb07 0c01 	add.w	ip, r7, r1
  40562c:	5879      	ldr	r1, [r7, r1]
  40562e:	f1ac 0c08 	sub.w	ip, ip, #8
  405632:	458c      	cmp	ip, r1
  405634:	f000 8088 	beq.w	405748 <_malloc_r+0x494>
  405638:	684a      	ldr	r2, [r1, #4]
  40563a:	f022 0203 	bic.w	r2, r2, #3
  40563e:	4293      	cmp	r3, r2
  405640:	d273      	bcs.n	40572a <_malloc_r+0x476>
  405642:	6889      	ldr	r1, [r1, #8]
  405644:	458c      	cmp	ip, r1
  405646:	d1f7      	bne.n	405638 <_malloc_r+0x384>
  405648:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40564c:	687b      	ldr	r3, [r7, #4]
  40564e:	60e2      	str	r2, [r4, #12]
  405650:	f8c4 c008 	str.w	ip, [r4, #8]
  405654:	6094      	str	r4, [r2, #8]
  405656:	f8cc 400c 	str.w	r4, [ip, #12]
  40565a:	e68f      	b.n	40537c <_malloc_r+0xc8>
  40565c:	19a1      	adds	r1, r4, r6
  40565e:	f046 0c01 	orr.w	ip, r6, #1
  405662:	f042 0601 	orr.w	r6, r2, #1
  405666:	f8c4 c004 	str.w	ip, [r4, #4]
  40566a:	4628      	mov	r0, r5
  40566c:	6179      	str	r1, [r7, #20]
  40566e:	6139      	str	r1, [r7, #16]
  405670:	f8c1 e00c 	str.w	lr, [r1, #12]
  405674:	f8c1 e008 	str.w	lr, [r1, #8]
  405678:	604e      	str	r6, [r1, #4]
  40567a:	50e2      	str	r2, [r4, r3]
  40567c:	f000 f9b8 	bl	4059f0 <__malloc_unlock>
  405680:	3408      	adds	r4, #8
  405682:	e6dd      	b.n	405440 <_malloc_r+0x18c>
  405684:	687b      	ldr	r3, [r7, #4]
  405686:	e679      	b.n	40537c <_malloc_r+0xc8>
  405688:	f108 0801 	add.w	r8, r8, #1
  40568c:	f018 0f03 	tst.w	r8, #3
  405690:	f10c 0c08 	add.w	ip, ip, #8
  405694:	f47f ae85 	bne.w	4053a2 <_malloc_r+0xee>
  405698:	e02d      	b.n	4056f6 <_malloc_r+0x442>
  40569a:	68dc      	ldr	r4, [r3, #12]
  40569c:	42a3      	cmp	r3, r4
  40569e:	bf08      	it	eq
  4056a0:	3002      	addeq	r0, #2
  4056a2:	f43f ae3e 	beq.w	405322 <_malloc_r+0x6e>
  4056a6:	e6bb      	b.n	405420 <_malloc_r+0x16c>
  4056a8:	4419      	add	r1, r3
  4056aa:	461c      	mov	r4, r3
  4056ac:	684a      	ldr	r2, [r1, #4]
  4056ae:	68db      	ldr	r3, [r3, #12]
  4056b0:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4056b4:	f042 0201 	orr.w	r2, r2, #1
  4056b8:	604a      	str	r2, [r1, #4]
  4056ba:	4628      	mov	r0, r5
  4056bc:	60f3      	str	r3, [r6, #12]
  4056be:	609e      	str	r6, [r3, #8]
  4056c0:	f000 f996 	bl	4059f0 <__malloc_unlock>
  4056c4:	e6bc      	b.n	405440 <_malloc_r+0x18c>
  4056c6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4056ca:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4056ce:	00c3      	lsls	r3, r0, #3
  4056d0:	e612      	b.n	4052f8 <_malloc_r+0x44>
  4056d2:	099a      	lsrs	r2, r3, #6
  4056d4:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4056d8:	00c9      	lsls	r1, r1, #3
  4056da:	3238      	adds	r2, #56	; 0x38
  4056dc:	e7a4      	b.n	405628 <_malloc_r+0x374>
  4056de:	42bc      	cmp	r4, r7
  4056e0:	d054      	beq.n	40578c <_malloc_r+0x4d8>
  4056e2:	68bc      	ldr	r4, [r7, #8]
  4056e4:	6862      	ldr	r2, [r4, #4]
  4056e6:	f022 0203 	bic.w	r2, r2, #3
  4056ea:	e75d      	b.n	4055a8 <_malloc_r+0x2f4>
  4056ec:	f859 3908 	ldr.w	r3, [r9], #-8
  4056f0:	4599      	cmp	r9, r3
  4056f2:	f040 8086 	bne.w	405802 <_malloc_r+0x54e>
  4056f6:	f010 0f03 	tst.w	r0, #3
  4056fa:	f100 30ff 	add.w	r0, r0, #4294967295
  4056fe:	d1f5      	bne.n	4056ec <_malloc_r+0x438>
  405700:	687b      	ldr	r3, [r7, #4]
  405702:	ea23 0304 	bic.w	r3, r3, r4
  405706:	607b      	str	r3, [r7, #4]
  405708:	0064      	lsls	r4, r4, #1
  40570a:	429c      	cmp	r4, r3
  40570c:	f63f aec7 	bhi.w	40549e <_malloc_r+0x1ea>
  405710:	2c00      	cmp	r4, #0
  405712:	f43f aec4 	beq.w	40549e <_malloc_r+0x1ea>
  405716:	421c      	tst	r4, r3
  405718:	4640      	mov	r0, r8
  40571a:	f47f ae3e 	bne.w	40539a <_malloc_r+0xe6>
  40571e:	0064      	lsls	r4, r4, #1
  405720:	421c      	tst	r4, r3
  405722:	f100 0004 	add.w	r0, r0, #4
  405726:	d0fa      	beq.n	40571e <_malloc_r+0x46a>
  405728:	e637      	b.n	40539a <_malloc_r+0xe6>
  40572a:	468c      	mov	ip, r1
  40572c:	e78c      	b.n	405648 <_malloc_r+0x394>
  40572e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  405732:	d815      	bhi.n	405760 <_malloc_r+0x4ac>
  405734:	0bf3      	lsrs	r3, r6, #15
  405736:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40573a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40573e:	00c3      	lsls	r3, r0, #3
  405740:	e5da      	b.n	4052f8 <_malloc_r+0x44>
  405742:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  405746:	e6ed      	b.n	405524 <_malloc_r+0x270>
  405748:	687b      	ldr	r3, [r7, #4]
  40574a:	1092      	asrs	r2, r2, #2
  40574c:	2101      	movs	r1, #1
  40574e:	fa01 f202 	lsl.w	r2, r1, r2
  405752:	4313      	orrs	r3, r2
  405754:	607b      	str	r3, [r7, #4]
  405756:	4662      	mov	r2, ip
  405758:	e779      	b.n	40564e <_malloc_r+0x39a>
  40575a:	2301      	movs	r3, #1
  40575c:	6053      	str	r3, [r2, #4]
  40575e:	e729      	b.n	4055b4 <_malloc_r+0x300>
  405760:	f240 5254 	movw	r2, #1364	; 0x554
  405764:	4293      	cmp	r3, r2
  405766:	d822      	bhi.n	4057ae <_malloc_r+0x4fa>
  405768:	0cb3      	lsrs	r3, r6, #18
  40576a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40576e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  405772:	00c3      	lsls	r3, r0, #3
  405774:	e5c0      	b.n	4052f8 <_malloc_r+0x44>
  405776:	f103 0b10 	add.w	fp, r3, #16
  40577a:	e6ae      	b.n	4054da <_malloc_r+0x226>
  40577c:	2a54      	cmp	r2, #84	; 0x54
  40577e:	d829      	bhi.n	4057d4 <_malloc_r+0x520>
  405780:	0b1a      	lsrs	r2, r3, #12
  405782:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  405786:	00c9      	lsls	r1, r1, #3
  405788:	326e      	adds	r2, #110	; 0x6e
  40578a:	e74d      	b.n	405628 <_malloc_r+0x374>
  40578c:	4b20      	ldr	r3, [pc, #128]	; (405810 <_malloc_r+0x55c>)
  40578e:	6819      	ldr	r1, [r3, #0]
  405790:	4459      	add	r1, fp
  405792:	6019      	str	r1, [r3, #0]
  405794:	e6b2      	b.n	4054fc <_malloc_r+0x248>
  405796:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40579a:	2800      	cmp	r0, #0
  40579c:	f47f aeae 	bne.w	4054fc <_malloc_r+0x248>
  4057a0:	eb08 030b 	add.w	r3, r8, fp
  4057a4:	68ba      	ldr	r2, [r7, #8]
  4057a6:	f043 0301 	orr.w	r3, r3, #1
  4057aa:	6053      	str	r3, [r2, #4]
  4057ac:	e6ee      	b.n	40558c <_malloc_r+0x2d8>
  4057ae:	207f      	movs	r0, #127	; 0x7f
  4057b0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4057b4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4057b8:	e59e      	b.n	4052f8 <_malloc_r+0x44>
  4057ba:	f104 0108 	add.w	r1, r4, #8
  4057be:	4628      	mov	r0, r5
  4057c0:	9300      	str	r3, [sp, #0]
  4057c2:	f001 fa89 	bl	406cd8 <_free_r>
  4057c6:	9b00      	ldr	r3, [sp, #0]
  4057c8:	6819      	ldr	r1, [r3, #0]
  4057ca:	e6df      	b.n	40558c <_malloc_r+0x2d8>
  4057cc:	2001      	movs	r0, #1
  4057ce:	f04f 0900 	mov.w	r9, #0
  4057d2:	e6bc      	b.n	40554e <_malloc_r+0x29a>
  4057d4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4057d8:	d805      	bhi.n	4057e6 <_malloc_r+0x532>
  4057da:	0bda      	lsrs	r2, r3, #15
  4057dc:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4057e0:	00c9      	lsls	r1, r1, #3
  4057e2:	3277      	adds	r2, #119	; 0x77
  4057e4:	e720      	b.n	405628 <_malloc_r+0x374>
  4057e6:	f240 5154 	movw	r1, #1364	; 0x554
  4057ea:	428a      	cmp	r2, r1
  4057ec:	d805      	bhi.n	4057fa <_malloc_r+0x546>
  4057ee:	0c9a      	lsrs	r2, r3, #18
  4057f0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4057f4:	00c9      	lsls	r1, r1, #3
  4057f6:	327c      	adds	r2, #124	; 0x7c
  4057f8:	e716      	b.n	405628 <_malloc_r+0x374>
  4057fa:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4057fe:	227e      	movs	r2, #126	; 0x7e
  405800:	e712      	b.n	405628 <_malloc_r+0x374>
  405802:	687b      	ldr	r3, [r7, #4]
  405804:	e780      	b.n	405708 <_malloc_r+0x454>
  405806:	08f0      	lsrs	r0, r6, #3
  405808:	f106 0308 	add.w	r3, r6, #8
  40580c:	e600      	b.n	405410 <_malloc_r+0x15c>
  40580e:	bf00      	nop
  405810:	20445410 	.word	0x20445410

00405814 <memcpy>:
  405814:	4684      	mov	ip, r0
  405816:	ea41 0300 	orr.w	r3, r1, r0
  40581a:	f013 0303 	ands.w	r3, r3, #3
  40581e:	d16d      	bne.n	4058fc <memcpy+0xe8>
  405820:	3a40      	subs	r2, #64	; 0x40
  405822:	d341      	bcc.n	4058a8 <memcpy+0x94>
  405824:	f851 3b04 	ldr.w	r3, [r1], #4
  405828:	f840 3b04 	str.w	r3, [r0], #4
  40582c:	f851 3b04 	ldr.w	r3, [r1], #4
  405830:	f840 3b04 	str.w	r3, [r0], #4
  405834:	f851 3b04 	ldr.w	r3, [r1], #4
  405838:	f840 3b04 	str.w	r3, [r0], #4
  40583c:	f851 3b04 	ldr.w	r3, [r1], #4
  405840:	f840 3b04 	str.w	r3, [r0], #4
  405844:	f851 3b04 	ldr.w	r3, [r1], #4
  405848:	f840 3b04 	str.w	r3, [r0], #4
  40584c:	f851 3b04 	ldr.w	r3, [r1], #4
  405850:	f840 3b04 	str.w	r3, [r0], #4
  405854:	f851 3b04 	ldr.w	r3, [r1], #4
  405858:	f840 3b04 	str.w	r3, [r0], #4
  40585c:	f851 3b04 	ldr.w	r3, [r1], #4
  405860:	f840 3b04 	str.w	r3, [r0], #4
  405864:	f851 3b04 	ldr.w	r3, [r1], #4
  405868:	f840 3b04 	str.w	r3, [r0], #4
  40586c:	f851 3b04 	ldr.w	r3, [r1], #4
  405870:	f840 3b04 	str.w	r3, [r0], #4
  405874:	f851 3b04 	ldr.w	r3, [r1], #4
  405878:	f840 3b04 	str.w	r3, [r0], #4
  40587c:	f851 3b04 	ldr.w	r3, [r1], #4
  405880:	f840 3b04 	str.w	r3, [r0], #4
  405884:	f851 3b04 	ldr.w	r3, [r1], #4
  405888:	f840 3b04 	str.w	r3, [r0], #4
  40588c:	f851 3b04 	ldr.w	r3, [r1], #4
  405890:	f840 3b04 	str.w	r3, [r0], #4
  405894:	f851 3b04 	ldr.w	r3, [r1], #4
  405898:	f840 3b04 	str.w	r3, [r0], #4
  40589c:	f851 3b04 	ldr.w	r3, [r1], #4
  4058a0:	f840 3b04 	str.w	r3, [r0], #4
  4058a4:	3a40      	subs	r2, #64	; 0x40
  4058a6:	d2bd      	bcs.n	405824 <memcpy+0x10>
  4058a8:	3230      	adds	r2, #48	; 0x30
  4058aa:	d311      	bcc.n	4058d0 <memcpy+0xbc>
  4058ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4058b0:	f840 3b04 	str.w	r3, [r0], #4
  4058b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4058b8:	f840 3b04 	str.w	r3, [r0], #4
  4058bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4058c0:	f840 3b04 	str.w	r3, [r0], #4
  4058c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4058c8:	f840 3b04 	str.w	r3, [r0], #4
  4058cc:	3a10      	subs	r2, #16
  4058ce:	d2ed      	bcs.n	4058ac <memcpy+0x98>
  4058d0:	320c      	adds	r2, #12
  4058d2:	d305      	bcc.n	4058e0 <memcpy+0xcc>
  4058d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4058d8:	f840 3b04 	str.w	r3, [r0], #4
  4058dc:	3a04      	subs	r2, #4
  4058de:	d2f9      	bcs.n	4058d4 <memcpy+0xc0>
  4058e0:	3204      	adds	r2, #4
  4058e2:	d008      	beq.n	4058f6 <memcpy+0xe2>
  4058e4:	07d2      	lsls	r2, r2, #31
  4058e6:	bf1c      	itt	ne
  4058e8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4058ec:	f800 3b01 	strbne.w	r3, [r0], #1
  4058f0:	d301      	bcc.n	4058f6 <memcpy+0xe2>
  4058f2:	880b      	ldrh	r3, [r1, #0]
  4058f4:	8003      	strh	r3, [r0, #0]
  4058f6:	4660      	mov	r0, ip
  4058f8:	4770      	bx	lr
  4058fa:	bf00      	nop
  4058fc:	2a08      	cmp	r2, #8
  4058fe:	d313      	bcc.n	405928 <memcpy+0x114>
  405900:	078b      	lsls	r3, r1, #30
  405902:	d08d      	beq.n	405820 <memcpy+0xc>
  405904:	f010 0303 	ands.w	r3, r0, #3
  405908:	d08a      	beq.n	405820 <memcpy+0xc>
  40590a:	f1c3 0304 	rsb	r3, r3, #4
  40590e:	1ad2      	subs	r2, r2, r3
  405910:	07db      	lsls	r3, r3, #31
  405912:	bf1c      	itt	ne
  405914:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405918:	f800 3b01 	strbne.w	r3, [r0], #1
  40591c:	d380      	bcc.n	405820 <memcpy+0xc>
  40591e:	f831 3b02 	ldrh.w	r3, [r1], #2
  405922:	f820 3b02 	strh.w	r3, [r0], #2
  405926:	e77b      	b.n	405820 <memcpy+0xc>
  405928:	3a04      	subs	r2, #4
  40592a:	d3d9      	bcc.n	4058e0 <memcpy+0xcc>
  40592c:	3a01      	subs	r2, #1
  40592e:	f811 3b01 	ldrb.w	r3, [r1], #1
  405932:	f800 3b01 	strb.w	r3, [r0], #1
  405936:	d2f9      	bcs.n	40592c <memcpy+0x118>
  405938:	780b      	ldrb	r3, [r1, #0]
  40593a:	7003      	strb	r3, [r0, #0]
  40593c:	784b      	ldrb	r3, [r1, #1]
  40593e:	7043      	strb	r3, [r0, #1]
  405940:	788b      	ldrb	r3, [r1, #2]
  405942:	7083      	strb	r3, [r0, #2]
  405944:	4660      	mov	r0, ip
  405946:	4770      	bx	lr

00405948 <memset>:
  405948:	b470      	push	{r4, r5, r6}
  40594a:	0786      	lsls	r6, r0, #30
  40594c:	d046      	beq.n	4059dc <memset+0x94>
  40594e:	1e54      	subs	r4, r2, #1
  405950:	2a00      	cmp	r2, #0
  405952:	d041      	beq.n	4059d8 <memset+0x90>
  405954:	b2ca      	uxtb	r2, r1
  405956:	4603      	mov	r3, r0
  405958:	e002      	b.n	405960 <memset+0x18>
  40595a:	f114 34ff 	adds.w	r4, r4, #4294967295
  40595e:	d33b      	bcc.n	4059d8 <memset+0x90>
  405960:	f803 2b01 	strb.w	r2, [r3], #1
  405964:	079d      	lsls	r5, r3, #30
  405966:	d1f8      	bne.n	40595a <memset+0x12>
  405968:	2c03      	cmp	r4, #3
  40596a:	d92e      	bls.n	4059ca <memset+0x82>
  40596c:	b2cd      	uxtb	r5, r1
  40596e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  405972:	2c0f      	cmp	r4, #15
  405974:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  405978:	d919      	bls.n	4059ae <memset+0x66>
  40597a:	f103 0210 	add.w	r2, r3, #16
  40597e:	4626      	mov	r6, r4
  405980:	3e10      	subs	r6, #16
  405982:	2e0f      	cmp	r6, #15
  405984:	f842 5c10 	str.w	r5, [r2, #-16]
  405988:	f842 5c0c 	str.w	r5, [r2, #-12]
  40598c:	f842 5c08 	str.w	r5, [r2, #-8]
  405990:	f842 5c04 	str.w	r5, [r2, #-4]
  405994:	f102 0210 	add.w	r2, r2, #16
  405998:	d8f2      	bhi.n	405980 <memset+0x38>
  40599a:	f1a4 0210 	sub.w	r2, r4, #16
  40599e:	f022 020f 	bic.w	r2, r2, #15
  4059a2:	f004 040f 	and.w	r4, r4, #15
  4059a6:	3210      	adds	r2, #16
  4059a8:	2c03      	cmp	r4, #3
  4059aa:	4413      	add	r3, r2
  4059ac:	d90d      	bls.n	4059ca <memset+0x82>
  4059ae:	461e      	mov	r6, r3
  4059b0:	4622      	mov	r2, r4
  4059b2:	3a04      	subs	r2, #4
  4059b4:	2a03      	cmp	r2, #3
  4059b6:	f846 5b04 	str.w	r5, [r6], #4
  4059ba:	d8fa      	bhi.n	4059b2 <memset+0x6a>
  4059bc:	1f22      	subs	r2, r4, #4
  4059be:	f022 0203 	bic.w	r2, r2, #3
  4059c2:	3204      	adds	r2, #4
  4059c4:	4413      	add	r3, r2
  4059c6:	f004 0403 	and.w	r4, r4, #3
  4059ca:	b12c      	cbz	r4, 4059d8 <memset+0x90>
  4059cc:	b2c9      	uxtb	r1, r1
  4059ce:	441c      	add	r4, r3
  4059d0:	f803 1b01 	strb.w	r1, [r3], #1
  4059d4:	429c      	cmp	r4, r3
  4059d6:	d1fb      	bne.n	4059d0 <memset+0x88>
  4059d8:	bc70      	pop	{r4, r5, r6}
  4059da:	4770      	bx	lr
  4059dc:	4614      	mov	r4, r2
  4059de:	4603      	mov	r3, r0
  4059e0:	e7c2      	b.n	405968 <memset+0x20>
  4059e2:	bf00      	nop

004059e4 <__malloc_lock>:
  4059e4:	4801      	ldr	r0, [pc, #4]	; (4059ec <__malloc_lock+0x8>)
  4059e6:	f001 bc11 	b.w	40720c <__retarget_lock_acquire_recursive>
  4059ea:	bf00      	nop
  4059ec:	2044a8d8 	.word	0x2044a8d8

004059f0 <__malloc_unlock>:
  4059f0:	4801      	ldr	r0, [pc, #4]	; (4059f8 <__malloc_unlock+0x8>)
  4059f2:	f001 bc0d 	b.w	407210 <__retarget_lock_release_recursive>
  4059f6:	bf00      	nop
  4059f8:	2044a8d8 	.word	0x2044a8d8

004059fc <_sbrk_r>:
  4059fc:	b538      	push	{r3, r4, r5, lr}
  4059fe:	4c07      	ldr	r4, [pc, #28]	; (405a1c <_sbrk_r+0x20>)
  405a00:	2300      	movs	r3, #0
  405a02:	4605      	mov	r5, r0
  405a04:	4608      	mov	r0, r1
  405a06:	6023      	str	r3, [r4, #0]
  405a08:	f7fd fd08 	bl	40341c <_sbrk>
  405a0c:	1c43      	adds	r3, r0, #1
  405a0e:	d000      	beq.n	405a12 <_sbrk_r+0x16>
  405a10:	bd38      	pop	{r3, r4, r5, pc}
  405a12:	6823      	ldr	r3, [r4, #0]
  405a14:	2b00      	cmp	r3, #0
  405a16:	d0fb      	beq.n	405a10 <_sbrk_r+0x14>
  405a18:	602b      	str	r3, [r5, #0]
  405a1a:	bd38      	pop	{r3, r4, r5, pc}
  405a1c:	2044a8ec 	.word	0x2044a8ec

00405a20 <__sprint_r.part.0>:
  405a20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405a24:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  405a26:	049c      	lsls	r4, r3, #18
  405a28:	4693      	mov	fp, r2
  405a2a:	d52f      	bpl.n	405a8c <__sprint_r.part.0+0x6c>
  405a2c:	6893      	ldr	r3, [r2, #8]
  405a2e:	6812      	ldr	r2, [r2, #0]
  405a30:	b353      	cbz	r3, 405a88 <__sprint_r.part.0+0x68>
  405a32:	460e      	mov	r6, r1
  405a34:	4607      	mov	r7, r0
  405a36:	f102 0908 	add.w	r9, r2, #8
  405a3a:	e919 0420 	ldmdb	r9, {r5, sl}
  405a3e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  405a42:	d017      	beq.n	405a74 <__sprint_r.part.0+0x54>
  405a44:	3d04      	subs	r5, #4
  405a46:	2400      	movs	r4, #0
  405a48:	e001      	b.n	405a4e <__sprint_r.part.0+0x2e>
  405a4a:	45a0      	cmp	r8, r4
  405a4c:	d010      	beq.n	405a70 <__sprint_r.part.0+0x50>
  405a4e:	4632      	mov	r2, r6
  405a50:	f855 1f04 	ldr.w	r1, [r5, #4]!
  405a54:	4638      	mov	r0, r7
  405a56:	f001 f8bb 	bl	406bd0 <_fputwc_r>
  405a5a:	1c43      	adds	r3, r0, #1
  405a5c:	f104 0401 	add.w	r4, r4, #1
  405a60:	d1f3      	bne.n	405a4a <__sprint_r.part.0+0x2a>
  405a62:	2300      	movs	r3, #0
  405a64:	f8cb 3008 	str.w	r3, [fp, #8]
  405a68:	f8cb 3004 	str.w	r3, [fp, #4]
  405a6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405a70:	f8db 3008 	ldr.w	r3, [fp, #8]
  405a74:	f02a 0a03 	bic.w	sl, sl, #3
  405a78:	eba3 030a 	sub.w	r3, r3, sl
  405a7c:	f8cb 3008 	str.w	r3, [fp, #8]
  405a80:	f109 0908 	add.w	r9, r9, #8
  405a84:	2b00      	cmp	r3, #0
  405a86:	d1d8      	bne.n	405a3a <__sprint_r.part.0+0x1a>
  405a88:	2000      	movs	r0, #0
  405a8a:	e7ea      	b.n	405a62 <__sprint_r.part.0+0x42>
  405a8c:	f001 fa0a 	bl	406ea4 <__sfvwrite_r>
  405a90:	2300      	movs	r3, #0
  405a92:	f8cb 3008 	str.w	r3, [fp, #8]
  405a96:	f8cb 3004 	str.w	r3, [fp, #4]
  405a9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405a9e:	bf00      	nop

00405aa0 <_vfiprintf_r>:
  405aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405aa4:	b0ad      	sub	sp, #180	; 0xb4
  405aa6:	461d      	mov	r5, r3
  405aa8:	468b      	mov	fp, r1
  405aaa:	4690      	mov	r8, r2
  405aac:	9307      	str	r3, [sp, #28]
  405aae:	9006      	str	r0, [sp, #24]
  405ab0:	b118      	cbz	r0, 405aba <_vfiprintf_r+0x1a>
  405ab2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405ab4:	2b00      	cmp	r3, #0
  405ab6:	f000 80f3 	beq.w	405ca0 <_vfiprintf_r+0x200>
  405aba:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405abe:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  405ac2:	07df      	lsls	r7, r3, #31
  405ac4:	b281      	uxth	r1, r0
  405ac6:	d402      	bmi.n	405ace <_vfiprintf_r+0x2e>
  405ac8:	058e      	lsls	r6, r1, #22
  405aca:	f140 80fc 	bpl.w	405cc6 <_vfiprintf_r+0x226>
  405ace:	048c      	lsls	r4, r1, #18
  405ad0:	d40a      	bmi.n	405ae8 <_vfiprintf_r+0x48>
  405ad2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405ad6:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  405ada:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  405ade:	f8ab 100c 	strh.w	r1, [fp, #12]
  405ae2:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  405ae6:	b289      	uxth	r1, r1
  405ae8:	0708      	lsls	r0, r1, #28
  405aea:	f140 80b3 	bpl.w	405c54 <_vfiprintf_r+0x1b4>
  405aee:	f8db 3010 	ldr.w	r3, [fp, #16]
  405af2:	2b00      	cmp	r3, #0
  405af4:	f000 80ae 	beq.w	405c54 <_vfiprintf_r+0x1b4>
  405af8:	f001 031a 	and.w	r3, r1, #26
  405afc:	2b0a      	cmp	r3, #10
  405afe:	f000 80b5 	beq.w	405c6c <_vfiprintf_r+0x1cc>
  405b02:	2300      	movs	r3, #0
  405b04:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  405b08:	930b      	str	r3, [sp, #44]	; 0x2c
  405b0a:	9311      	str	r3, [sp, #68]	; 0x44
  405b0c:	9310      	str	r3, [sp, #64]	; 0x40
  405b0e:	9303      	str	r3, [sp, #12]
  405b10:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  405b14:	46ca      	mov	sl, r9
  405b16:	f8cd b010 	str.w	fp, [sp, #16]
  405b1a:	f898 3000 	ldrb.w	r3, [r8]
  405b1e:	4644      	mov	r4, r8
  405b20:	b1fb      	cbz	r3, 405b62 <_vfiprintf_r+0xc2>
  405b22:	2b25      	cmp	r3, #37	; 0x25
  405b24:	d102      	bne.n	405b2c <_vfiprintf_r+0x8c>
  405b26:	e01c      	b.n	405b62 <_vfiprintf_r+0xc2>
  405b28:	2b25      	cmp	r3, #37	; 0x25
  405b2a:	d003      	beq.n	405b34 <_vfiprintf_r+0x94>
  405b2c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  405b30:	2b00      	cmp	r3, #0
  405b32:	d1f9      	bne.n	405b28 <_vfiprintf_r+0x88>
  405b34:	eba4 0508 	sub.w	r5, r4, r8
  405b38:	b19d      	cbz	r5, 405b62 <_vfiprintf_r+0xc2>
  405b3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405b3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405b3e:	f8ca 8000 	str.w	r8, [sl]
  405b42:	3301      	adds	r3, #1
  405b44:	442a      	add	r2, r5
  405b46:	2b07      	cmp	r3, #7
  405b48:	f8ca 5004 	str.w	r5, [sl, #4]
  405b4c:	9211      	str	r2, [sp, #68]	; 0x44
  405b4e:	9310      	str	r3, [sp, #64]	; 0x40
  405b50:	dd7a      	ble.n	405c48 <_vfiprintf_r+0x1a8>
  405b52:	2a00      	cmp	r2, #0
  405b54:	f040 84b0 	bne.w	4064b8 <_vfiprintf_r+0xa18>
  405b58:	9b03      	ldr	r3, [sp, #12]
  405b5a:	9210      	str	r2, [sp, #64]	; 0x40
  405b5c:	442b      	add	r3, r5
  405b5e:	46ca      	mov	sl, r9
  405b60:	9303      	str	r3, [sp, #12]
  405b62:	7823      	ldrb	r3, [r4, #0]
  405b64:	2b00      	cmp	r3, #0
  405b66:	f000 83e0 	beq.w	40632a <_vfiprintf_r+0x88a>
  405b6a:	2000      	movs	r0, #0
  405b6c:	f04f 0300 	mov.w	r3, #0
  405b70:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  405b74:	f104 0801 	add.w	r8, r4, #1
  405b78:	7862      	ldrb	r2, [r4, #1]
  405b7a:	4605      	mov	r5, r0
  405b7c:	4606      	mov	r6, r0
  405b7e:	4603      	mov	r3, r0
  405b80:	f04f 34ff 	mov.w	r4, #4294967295
  405b84:	f108 0801 	add.w	r8, r8, #1
  405b88:	f1a2 0120 	sub.w	r1, r2, #32
  405b8c:	2958      	cmp	r1, #88	; 0x58
  405b8e:	f200 82de 	bhi.w	40614e <_vfiprintf_r+0x6ae>
  405b92:	e8df f011 	tbh	[pc, r1, lsl #1]
  405b96:	0221      	.short	0x0221
  405b98:	02dc02dc 	.word	0x02dc02dc
  405b9c:	02dc0229 	.word	0x02dc0229
  405ba0:	02dc02dc 	.word	0x02dc02dc
  405ba4:	02dc02dc 	.word	0x02dc02dc
  405ba8:	028902dc 	.word	0x028902dc
  405bac:	02dc0295 	.word	0x02dc0295
  405bb0:	02bd00a2 	.word	0x02bd00a2
  405bb4:	019f02dc 	.word	0x019f02dc
  405bb8:	01a401a4 	.word	0x01a401a4
  405bbc:	01a401a4 	.word	0x01a401a4
  405bc0:	01a401a4 	.word	0x01a401a4
  405bc4:	01a401a4 	.word	0x01a401a4
  405bc8:	02dc01a4 	.word	0x02dc01a4
  405bcc:	02dc02dc 	.word	0x02dc02dc
  405bd0:	02dc02dc 	.word	0x02dc02dc
  405bd4:	02dc02dc 	.word	0x02dc02dc
  405bd8:	02dc02dc 	.word	0x02dc02dc
  405bdc:	01b202dc 	.word	0x01b202dc
  405be0:	02dc02dc 	.word	0x02dc02dc
  405be4:	02dc02dc 	.word	0x02dc02dc
  405be8:	02dc02dc 	.word	0x02dc02dc
  405bec:	02dc02dc 	.word	0x02dc02dc
  405bf0:	02dc02dc 	.word	0x02dc02dc
  405bf4:	02dc0197 	.word	0x02dc0197
  405bf8:	02dc02dc 	.word	0x02dc02dc
  405bfc:	02dc02dc 	.word	0x02dc02dc
  405c00:	02dc019b 	.word	0x02dc019b
  405c04:	025302dc 	.word	0x025302dc
  405c08:	02dc02dc 	.word	0x02dc02dc
  405c0c:	02dc02dc 	.word	0x02dc02dc
  405c10:	02dc02dc 	.word	0x02dc02dc
  405c14:	02dc02dc 	.word	0x02dc02dc
  405c18:	02dc02dc 	.word	0x02dc02dc
  405c1c:	021b025a 	.word	0x021b025a
  405c20:	02dc02dc 	.word	0x02dc02dc
  405c24:	026e02dc 	.word	0x026e02dc
  405c28:	02dc021b 	.word	0x02dc021b
  405c2c:	027302dc 	.word	0x027302dc
  405c30:	01f502dc 	.word	0x01f502dc
  405c34:	02090182 	.word	0x02090182
  405c38:	02dc02d7 	.word	0x02dc02d7
  405c3c:	02dc029a 	.word	0x02dc029a
  405c40:	02dc00a7 	.word	0x02dc00a7
  405c44:	022e02dc 	.word	0x022e02dc
  405c48:	f10a 0a08 	add.w	sl, sl, #8
  405c4c:	9b03      	ldr	r3, [sp, #12]
  405c4e:	442b      	add	r3, r5
  405c50:	9303      	str	r3, [sp, #12]
  405c52:	e786      	b.n	405b62 <_vfiprintf_r+0xc2>
  405c54:	4659      	mov	r1, fp
  405c56:	9806      	ldr	r0, [sp, #24]
  405c58:	f000 fdac 	bl	4067b4 <__swsetup_r>
  405c5c:	bb18      	cbnz	r0, 405ca6 <_vfiprintf_r+0x206>
  405c5e:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  405c62:	f001 031a 	and.w	r3, r1, #26
  405c66:	2b0a      	cmp	r3, #10
  405c68:	f47f af4b 	bne.w	405b02 <_vfiprintf_r+0x62>
  405c6c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  405c70:	2b00      	cmp	r3, #0
  405c72:	f6ff af46 	blt.w	405b02 <_vfiprintf_r+0x62>
  405c76:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405c7a:	07db      	lsls	r3, r3, #31
  405c7c:	d405      	bmi.n	405c8a <_vfiprintf_r+0x1ea>
  405c7e:	058f      	lsls	r7, r1, #22
  405c80:	d403      	bmi.n	405c8a <_vfiprintf_r+0x1ea>
  405c82:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405c86:	f001 fac3 	bl	407210 <__retarget_lock_release_recursive>
  405c8a:	462b      	mov	r3, r5
  405c8c:	4642      	mov	r2, r8
  405c8e:	4659      	mov	r1, fp
  405c90:	9806      	ldr	r0, [sp, #24]
  405c92:	f000 fd4d 	bl	406730 <__sbprintf>
  405c96:	9003      	str	r0, [sp, #12]
  405c98:	9803      	ldr	r0, [sp, #12]
  405c9a:	b02d      	add	sp, #180	; 0xb4
  405c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ca0:	f000 fef4 	bl	406a8c <__sinit>
  405ca4:	e709      	b.n	405aba <_vfiprintf_r+0x1a>
  405ca6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405caa:	07d9      	lsls	r1, r3, #31
  405cac:	d404      	bmi.n	405cb8 <_vfiprintf_r+0x218>
  405cae:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405cb2:	059a      	lsls	r2, r3, #22
  405cb4:	f140 84aa 	bpl.w	40660c <_vfiprintf_r+0xb6c>
  405cb8:	f04f 33ff 	mov.w	r3, #4294967295
  405cbc:	9303      	str	r3, [sp, #12]
  405cbe:	9803      	ldr	r0, [sp, #12]
  405cc0:	b02d      	add	sp, #180	; 0xb4
  405cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405cc6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405cca:	f001 fa9f 	bl	40720c <__retarget_lock_acquire_recursive>
  405cce:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  405cd2:	b281      	uxth	r1, r0
  405cd4:	e6fb      	b.n	405ace <_vfiprintf_r+0x2e>
  405cd6:	4276      	negs	r6, r6
  405cd8:	9207      	str	r2, [sp, #28]
  405cda:	f043 0304 	orr.w	r3, r3, #4
  405cde:	f898 2000 	ldrb.w	r2, [r8]
  405ce2:	e74f      	b.n	405b84 <_vfiprintf_r+0xe4>
  405ce4:	9608      	str	r6, [sp, #32]
  405ce6:	069e      	lsls	r6, r3, #26
  405ce8:	f100 8450 	bmi.w	40658c <_vfiprintf_r+0xaec>
  405cec:	9907      	ldr	r1, [sp, #28]
  405cee:	06dd      	lsls	r5, r3, #27
  405cf0:	460a      	mov	r2, r1
  405cf2:	f100 83ef 	bmi.w	4064d4 <_vfiprintf_r+0xa34>
  405cf6:	0658      	lsls	r0, r3, #25
  405cf8:	f140 83ec 	bpl.w	4064d4 <_vfiprintf_r+0xa34>
  405cfc:	880e      	ldrh	r6, [r1, #0]
  405cfe:	3104      	adds	r1, #4
  405d00:	2700      	movs	r7, #0
  405d02:	2201      	movs	r2, #1
  405d04:	9107      	str	r1, [sp, #28]
  405d06:	f04f 0100 	mov.w	r1, #0
  405d0a:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  405d0e:	2500      	movs	r5, #0
  405d10:	1c61      	adds	r1, r4, #1
  405d12:	f000 8116 	beq.w	405f42 <_vfiprintf_r+0x4a2>
  405d16:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  405d1a:	9102      	str	r1, [sp, #8]
  405d1c:	ea56 0107 	orrs.w	r1, r6, r7
  405d20:	f040 8114 	bne.w	405f4c <_vfiprintf_r+0x4ac>
  405d24:	2c00      	cmp	r4, #0
  405d26:	f040 835c 	bne.w	4063e2 <_vfiprintf_r+0x942>
  405d2a:	2a00      	cmp	r2, #0
  405d2c:	f040 83b7 	bne.w	40649e <_vfiprintf_r+0x9fe>
  405d30:	f013 0301 	ands.w	r3, r3, #1
  405d34:	9305      	str	r3, [sp, #20]
  405d36:	f000 8457 	beq.w	4065e8 <_vfiprintf_r+0xb48>
  405d3a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  405d3e:	2330      	movs	r3, #48	; 0x30
  405d40:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  405d44:	9b05      	ldr	r3, [sp, #20]
  405d46:	42a3      	cmp	r3, r4
  405d48:	bfb8      	it	lt
  405d4a:	4623      	movlt	r3, r4
  405d4c:	9301      	str	r3, [sp, #4]
  405d4e:	b10d      	cbz	r5, 405d54 <_vfiprintf_r+0x2b4>
  405d50:	3301      	adds	r3, #1
  405d52:	9301      	str	r3, [sp, #4]
  405d54:	9b02      	ldr	r3, [sp, #8]
  405d56:	f013 0302 	ands.w	r3, r3, #2
  405d5a:	9309      	str	r3, [sp, #36]	; 0x24
  405d5c:	d002      	beq.n	405d64 <_vfiprintf_r+0x2c4>
  405d5e:	9b01      	ldr	r3, [sp, #4]
  405d60:	3302      	adds	r3, #2
  405d62:	9301      	str	r3, [sp, #4]
  405d64:	9b02      	ldr	r3, [sp, #8]
  405d66:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  405d6a:	930a      	str	r3, [sp, #40]	; 0x28
  405d6c:	f040 8217 	bne.w	40619e <_vfiprintf_r+0x6fe>
  405d70:	9b08      	ldr	r3, [sp, #32]
  405d72:	9a01      	ldr	r2, [sp, #4]
  405d74:	1a9d      	subs	r5, r3, r2
  405d76:	2d00      	cmp	r5, #0
  405d78:	f340 8211 	ble.w	40619e <_vfiprintf_r+0x6fe>
  405d7c:	2d10      	cmp	r5, #16
  405d7e:	f340 8490 	ble.w	4066a2 <_vfiprintf_r+0xc02>
  405d82:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405d84:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405d86:	4ec4      	ldr	r6, [pc, #784]	; (406098 <_vfiprintf_r+0x5f8>)
  405d88:	46d6      	mov	lr, sl
  405d8a:	2710      	movs	r7, #16
  405d8c:	46a2      	mov	sl, r4
  405d8e:	4619      	mov	r1, r3
  405d90:	9c06      	ldr	r4, [sp, #24]
  405d92:	e007      	b.n	405da4 <_vfiprintf_r+0x304>
  405d94:	f101 0c02 	add.w	ip, r1, #2
  405d98:	f10e 0e08 	add.w	lr, lr, #8
  405d9c:	4601      	mov	r1, r0
  405d9e:	3d10      	subs	r5, #16
  405da0:	2d10      	cmp	r5, #16
  405da2:	dd11      	ble.n	405dc8 <_vfiprintf_r+0x328>
  405da4:	1c48      	adds	r0, r1, #1
  405da6:	3210      	adds	r2, #16
  405da8:	2807      	cmp	r0, #7
  405daa:	9211      	str	r2, [sp, #68]	; 0x44
  405dac:	e88e 00c0 	stmia.w	lr, {r6, r7}
  405db0:	9010      	str	r0, [sp, #64]	; 0x40
  405db2:	ddef      	ble.n	405d94 <_vfiprintf_r+0x2f4>
  405db4:	2a00      	cmp	r2, #0
  405db6:	f040 81e4 	bne.w	406182 <_vfiprintf_r+0x6e2>
  405dba:	3d10      	subs	r5, #16
  405dbc:	2d10      	cmp	r5, #16
  405dbe:	4611      	mov	r1, r2
  405dc0:	f04f 0c01 	mov.w	ip, #1
  405dc4:	46ce      	mov	lr, r9
  405dc6:	dced      	bgt.n	405da4 <_vfiprintf_r+0x304>
  405dc8:	4654      	mov	r4, sl
  405dca:	4661      	mov	r1, ip
  405dcc:	46f2      	mov	sl, lr
  405dce:	442a      	add	r2, r5
  405dd0:	2907      	cmp	r1, #7
  405dd2:	9211      	str	r2, [sp, #68]	; 0x44
  405dd4:	f8ca 6000 	str.w	r6, [sl]
  405dd8:	f8ca 5004 	str.w	r5, [sl, #4]
  405ddc:	9110      	str	r1, [sp, #64]	; 0x40
  405dde:	f300 82ec 	bgt.w	4063ba <_vfiprintf_r+0x91a>
  405de2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405de6:	f10a 0a08 	add.w	sl, sl, #8
  405dea:	1c48      	adds	r0, r1, #1
  405dec:	2d00      	cmp	r5, #0
  405dee:	f040 81de 	bne.w	4061ae <_vfiprintf_r+0x70e>
  405df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405df4:	2b00      	cmp	r3, #0
  405df6:	f000 81f8 	beq.w	4061ea <_vfiprintf_r+0x74a>
  405dfa:	3202      	adds	r2, #2
  405dfc:	a90e      	add	r1, sp, #56	; 0x38
  405dfe:	2302      	movs	r3, #2
  405e00:	2807      	cmp	r0, #7
  405e02:	9211      	str	r2, [sp, #68]	; 0x44
  405e04:	9010      	str	r0, [sp, #64]	; 0x40
  405e06:	e88a 000a 	stmia.w	sl, {r1, r3}
  405e0a:	f340 81ea 	ble.w	4061e2 <_vfiprintf_r+0x742>
  405e0e:	2a00      	cmp	r2, #0
  405e10:	f040 838c 	bne.w	40652c <_vfiprintf_r+0xa8c>
  405e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405e16:	2b80      	cmp	r3, #128	; 0x80
  405e18:	f04f 0001 	mov.w	r0, #1
  405e1c:	4611      	mov	r1, r2
  405e1e:	46ca      	mov	sl, r9
  405e20:	f040 81e7 	bne.w	4061f2 <_vfiprintf_r+0x752>
  405e24:	9b08      	ldr	r3, [sp, #32]
  405e26:	9d01      	ldr	r5, [sp, #4]
  405e28:	1b5e      	subs	r6, r3, r5
  405e2a:	2e00      	cmp	r6, #0
  405e2c:	f340 81e1 	ble.w	4061f2 <_vfiprintf_r+0x752>
  405e30:	2e10      	cmp	r6, #16
  405e32:	4d9a      	ldr	r5, [pc, #616]	; (40609c <_vfiprintf_r+0x5fc>)
  405e34:	f340 8450 	ble.w	4066d8 <_vfiprintf_r+0xc38>
  405e38:	46d4      	mov	ip, sl
  405e3a:	2710      	movs	r7, #16
  405e3c:	46a2      	mov	sl, r4
  405e3e:	9c06      	ldr	r4, [sp, #24]
  405e40:	e007      	b.n	405e52 <_vfiprintf_r+0x3b2>
  405e42:	f101 0e02 	add.w	lr, r1, #2
  405e46:	f10c 0c08 	add.w	ip, ip, #8
  405e4a:	4601      	mov	r1, r0
  405e4c:	3e10      	subs	r6, #16
  405e4e:	2e10      	cmp	r6, #16
  405e50:	dd11      	ble.n	405e76 <_vfiprintf_r+0x3d6>
  405e52:	1c48      	adds	r0, r1, #1
  405e54:	3210      	adds	r2, #16
  405e56:	2807      	cmp	r0, #7
  405e58:	9211      	str	r2, [sp, #68]	; 0x44
  405e5a:	e88c 00a0 	stmia.w	ip, {r5, r7}
  405e5e:	9010      	str	r0, [sp, #64]	; 0x40
  405e60:	ddef      	ble.n	405e42 <_vfiprintf_r+0x3a2>
  405e62:	2a00      	cmp	r2, #0
  405e64:	f040 829d 	bne.w	4063a2 <_vfiprintf_r+0x902>
  405e68:	3e10      	subs	r6, #16
  405e6a:	2e10      	cmp	r6, #16
  405e6c:	f04f 0e01 	mov.w	lr, #1
  405e70:	4611      	mov	r1, r2
  405e72:	46cc      	mov	ip, r9
  405e74:	dced      	bgt.n	405e52 <_vfiprintf_r+0x3b2>
  405e76:	4654      	mov	r4, sl
  405e78:	46e2      	mov	sl, ip
  405e7a:	4432      	add	r2, r6
  405e7c:	f1be 0f07 	cmp.w	lr, #7
  405e80:	9211      	str	r2, [sp, #68]	; 0x44
  405e82:	e88a 0060 	stmia.w	sl, {r5, r6}
  405e86:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  405e8a:	f300 8369 	bgt.w	406560 <_vfiprintf_r+0xac0>
  405e8e:	f10a 0a08 	add.w	sl, sl, #8
  405e92:	f10e 0001 	add.w	r0, lr, #1
  405e96:	4671      	mov	r1, lr
  405e98:	e1ab      	b.n	4061f2 <_vfiprintf_r+0x752>
  405e9a:	9608      	str	r6, [sp, #32]
  405e9c:	f013 0220 	ands.w	r2, r3, #32
  405ea0:	f040 838c 	bne.w	4065bc <_vfiprintf_r+0xb1c>
  405ea4:	f013 0110 	ands.w	r1, r3, #16
  405ea8:	f040 831a 	bne.w	4064e0 <_vfiprintf_r+0xa40>
  405eac:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  405eb0:	f000 8316 	beq.w	4064e0 <_vfiprintf_r+0xa40>
  405eb4:	9807      	ldr	r0, [sp, #28]
  405eb6:	460a      	mov	r2, r1
  405eb8:	4601      	mov	r1, r0
  405eba:	3104      	adds	r1, #4
  405ebc:	8806      	ldrh	r6, [r0, #0]
  405ebe:	9107      	str	r1, [sp, #28]
  405ec0:	2700      	movs	r7, #0
  405ec2:	e720      	b.n	405d06 <_vfiprintf_r+0x266>
  405ec4:	9608      	str	r6, [sp, #32]
  405ec6:	f043 0310 	orr.w	r3, r3, #16
  405eca:	e7e7      	b.n	405e9c <_vfiprintf_r+0x3fc>
  405ecc:	9608      	str	r6, [sp, #32]
  405ece:	f043 0310 	orr.w	r3, r3, #16
  405ed2:	e708      	b.n	405ce6 <_vfiprintf_r+0x246>
  405ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405ed8:	f898 2000 	ldrb.w	r2, [r8]
  405edc:	e652      	b.n	405b84 <_vfiprintf_r+0xe4>
  405ede:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405ee2:	2600      	movs	r6, #0
  405ee4:	f818 2b01 	ldrb.w	r2, [r8], #1
  405ee8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  405eec:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  405ef0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405ef4:	2909      	cmp	r1, #9
  405ef6:	d9f5      	bls.n	405ee4 <_vfiprintf_r+0x444>
  405ef8:	e646      	b.n	405b88 <_vfiprintf_r+0xe8>
  405efa:	9608      	str	r6, [sp, #32]
  405efc:	2800      	cmp	r0, #0
  405efe:	f040 8408 	bne.w	406712 <_vfiprintf_r+0xc72>
  405f02:	f043 0310 	orr.w	r3, r3, #16
  405f06:	069e      	lsls	r6, r3, #26
  405f08:	f100 834c 	bmi.w	4065a4 <_vfiprintf_r+0xb04>
  405f0c:	06dd      	lsls	r5, r3, #27
  405f0e:	f100 82f3 	bmi.w	4064f8 <_vfiprintf_r+0xa58>
  405f12:	0658      	lsls	r0, r3, #25
  405f14:	f140 82f0 	bpl.w	4064f8 <_vfiprintf_r+0xa58>
  405f18:	9d07      	ldr	r5, [sp, #28]
  405f1a:	f9b5 6000 	ldrsh.w	r6, [r5]
  405f1e:	462a      	mov	r2, r5
  405f20:	17f7      	asrs	r7, r6, #31
  405f22:	3204      	adds	r2, #4
  405f24:	4630      	mov	r0, r6
  405f26:	4639      	mov	r1, r7
  405f28:	9207      	str	r2, [sp, #28]
  405f2a:	2800      	cmp	r0, #0
  405f2c:	f171 0200 	sbcs.w	r2, r1, #0
  405f30:	f2c0 835d 	blt.w	4065ee <_vfiprintf_r+0xb4e>
  405f34:	1c61      	adds	r1, r4, #1
  405f36:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405f3a:	f04f 0201 	mov.w	r2, #1
  405f3e:	f47f aeea 	bne.w	405d16 <_vfiprintf_r+0x276>
  405f42:	ea56 0107 	orrs.w	r1, r6, r7
  405f46:	f000 824d 	beq.w	4063e4 <_vfiprintf_r+0x944>
  405f4a:	9302      	str	r3, [sp, #8]
  405f4c:	2a01      	cmp	r2, #1
  405f4e:	f000 828c 	beq.w	40646a <_vfiprintf_r+0x9ca>
  405f52:	2a02      	cmp	r2, #2
  405f54:	f040 825c 	bne.w	406410 <_vfiprintf_r+0x970>
  405f58:	980b      	ldr	r0, [sp, #44]	; 0x2c
  405f5a:	46cb      	mov	fp, r9
  405f5c:	0933      	lsrs	r3, r6, #4
  405f5e:	f006 010f 	and.w	r1, r6, #15
  405f62:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  405f66:	093a      	lsrs	r2, r7, #4
  405f68:	461e      	mov	r6, r3
  405f6a:	4617      	mov	r7, r2
  405f6c:	5c43      	ldrb	r3, [r0, r1]
  405f6e:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  405f72:	ea56 0307 	orrs.w	r3, r6, r7
  405f76:	d1f1      	bne.n	405f5c <_vfiprintf_r+0x4bc>
  405f78:	eba9 030b 	sub.w	r3, r9, fp
  405f7c:	9305      	str	r3, [sp, #20]
  405f7e:	e6e1      	b.n	405d44 <_vfiprintf_r+0x2a4>
  405f80:	2800      	cmp	r0, #0
  405f82:	f040 83c0 	bne.w	406706 <_vfiprintf_r+0xc66>
  405f86:	0699      	lsls	r1, r3, #26
  405f88:	f100 8367 	bmi.w	40665a <_vfiprintf_r+0xbba>
  405f8c:	06da      	lsls	r2, r3, #27
  405f8e:	f100 80f1 	bmi.w	406174 <_vfiprintf_r+0x6d4>
  405f92:	065b      	lsls	r3, r3, #25
  405f94:	f140 80ee 	bpl.w	406174 <_vfiprintf_r+0x6d4>
  405f98:	9a07      	ldr	r2, [sp, #28]
  405f9a:	6813      	ldr	r3, [r2, #0]
  405f9c:	3204      	adds	r2, #4
  405f9e:	9207      	str	r2, [sp, #28]
  405fa0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  405fa4:	801a      	strh	r2, [r3, #0]
  405fa6:	e5b8      	b.n	405b1a <_vfiprintf_r+0x7a>
  405fa8:	9807      	ldr	r0, [sp, #28]
  405faa:	4a3d      	ldr	r2, [pc, #244]	; (4060a0 <_vfiprintf_r+0x600>)
  405fac:	9608      	str	r6, [sp, #32]
  405fae:	920b      	str	r2, [sp, #44]	; 0x2c
  405fb0:	6806      	ldr	r6, [r0, #0]
  405fb2:	2278      	movs	r2, #120	; 0x78
  405fb4:	2130      	movs	r1, #48	; 0x30
  405fb6:	3004      	adds	r0, #4
  405fb8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  405fbc:	f043 0302 	orr.w	r3, r3, #2
  405fc0:	9007      	str	r0, [sp, #28]
  405fc2:	2700      	movs	r7, #0
  405fc4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405fc8:	2202      	movs	r2, #2
  405fca:	e69c      	b.n	405d06 <_vfiprintf_r+0x266>
  405fcc:	9608      	str	r6, [sp, #32]
  405fce:	2800      	cmp	r0, #0
  405fd0:	d099      	beq.n	405f06 <_vfiprintf_r+0x466>
  405fd2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405fd6:	e796      	b.n	405f06 <_vfiprintf_r+0x466>
  405fd8:	f898 2000 	ldrb.w	r2, [r8]
  405fdc:	2d00      	cmp	r5, #0
  405fde:	f47f add1 	bne.w	405b84 <_vfiprintf_r+0xe4>
  405fe2:	2001      	movs	r0, #1
  405fe4:	2520      	movs	r5, #32
  405fe6:	e5cd      	b.n	405b84 <_vfiprintf_r+0xe4>
  405fe8:	f043 0301 	orr.w	r3, r3, #1
  405fec:	f898 2000 	ldrb.w	r2, [r8]
  405ff0:	e5c8      	b.n	405b84 <_vfiprintf_r+0xe4>
  405ff2:	9608      	str	r6, [sp, #32]
  405ff4:	2800      	cmp	r0, #0
  405ff6:	f040 8393 	bne.w	406720 <_vfiprintf_r+0xc80>
  405ffa:	4929      	ldr	r1, [pc, #164]	; (4060a0 <_vfiprintf_r+0x600>)
  405ffc:	910b      	str	r1, [sp, #44]	; 0x2c
  405ffe:	069f      	lsls	r7, r3, #26
  406000:	f100 82e8 	bmi.w	4065d4 <_vfiprintf_r+0xb34>
  406004:	9807      	ldr	r0, [sp, #28]
  406006:	06de      	lsls	r6, r3, #27
  406008:	4601      	mov	r1, r0
  40600a:	f100 8270 	bmi.w	4064ee <_vfiprintf_r+0xa4e>
  40600e:	065d      	lsls	r5, r3, #25
  406010:	f140 826d 	bpl.w	4064ee <_vfiprintf_r+0xa4e>
  406014:	3104      	adds	r1, #4
  406016:	8806      	ldrh	r6, [r0, #0]
  406018:	9107      	str	r1, [sp, #28]
  40601a:	2700      	movs	r7, #0
  40601c:	07d8      	lsls	r0, r3, #31
  40601e:	f140 8222 	bpl.w	406466 <_vfiprintf_r+0x9c6>
  406022:	ea56 0107 	orrs.w	r1, r6, r7
  406026:	f000 821e 	beq.w	406466 <_vfiprintf_r+0x9c6>
  40602a:	2130      	movs	r1, #48	; 0x30
  40602c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  406030:	f043 0302 	orr.w	r3, r3, #2
  406034:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  406038:	2202      	movs	r2, #2
  40603a:	e664      	b.n	405d06 <_vfiprintf_r+0x266>
  40603c:	9608      	str	r6, [sp, #32]
  40603e:	2800      	cmp	r0, #0
  406040:	f040 836b 	bne.w	40671a <_vfiprintf_r+0xc7a>
  406044:	4917      	ldr	r1, [pc, #92]	; (4060a4 <_vfiprintf_r+0x604>)
  406046:	910b      	str	r1, [sp, #44]	; 0x2c
  406048:	e7d9      	b.n	405ffe <_vfiprintf_r+0x55e>
  40604a:	9907      	ldr	r1, [sp, #28]
  40604c:	9608      	str	r6, [sp, #32]
  40604e:	680a      	ldr	r2, [r1, #0]
  406050:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  406054:	f04f 0000 	mov.w	r0, #0
  406058:	460a      	mov	r2, r1
  40605a:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40605e:	3204      	adds	r2, #4
  406060:	2001      	movs	r0, #1
  406062:	9001      	str	r0, [sp, #4]
  406064:	9207      	str	r2, [sp, #28]
  406066:	9005      	str	r0, [sp, #20]
  406068:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40606c:	9302      	str	r3, [sp, #8]
  40606e:	2400      	movs	r4, #0
  406070:	e670      	b.n	405d54 <_vfiprintf_r+0x2b4>
  406072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406076:	f898 2000 	ldrb.w	r2, [r8]
  40607a:	e583      	b.n	405b84 <_vfiprintf_r+0xe4>
  40607c:	f898 2000 	ldrb.w	r2, [r8]
  406080:	2a6c      	cmp	r2, #108	; 0x6c
  406082:	bf03      	ittte	eq
  406084:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  406088:	f043 0320 	orreq.w	r3, r3, #32
  40608c:	f108 0801 	addeq.w	r8, r8, #1
  406090:	f043 0310 	orrne.w	r3, r3, #16
  406094:	e576      	b.n	405b84 <_vfiprintf_r+0xe4>
  406096:	bf00      	nop
  406098:	00408ad4 	.word	0x00408ad4
  40609c:	00408ae4 	.word	0x00408ae4
  4060a0:	00408ab8 	.word	0x00408ab8
  4060a4:	00408aa4 	.word	0x00408aa4
  4060a8:	9907      	ldr	r1, [sp, #28]
  4060aa:	680e      	ldr	r6, [r1, #0]
  4060ac:	460a      	mov	r2, r1
  4060ae:	2e00      	cmp	r6, #0
  4060b0:	f102 0204 	add.w	r2, r2, #4
  4060b4:	f6ff ae0f 	blt.w	405cd6 <_vfiprintf_r+0x236>
  4060b8:	9207      	str	r2, [sp, #28]
  4060ba:	f898 2000 	ldrb.w	r2, [r8]
  4060be:	e561      	b.n	405b84 <_vfiprintf_r+0xe4>
  4060c0:	f898 2000 	ldrb.w	r2, [r8]
  4060c4:	2001      	movs	r0, #1
  4060c6:	252b      	movs	r5, #43	; 0x2b
  4060c8:	e55c      	b.n	405b84 <_vfiprintf_r+0xe4>
  4060ca:	9907      	ldr	r1, [sp, #28]
  4060cc:	9608      	str	r6, [sp, #32]
  4060ce:	f8d1 b000 	ldr.w	fp, [r1]
  4060d2:	f04f 0200 	mov.w	r2, #0
  4060d6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4060da:	1d0e      	adds	r6, r1, #4
  4060dc:	f1bb 0f00 	cmp.w	fp, #0
  4060e0:	f000 82e5 	beq.w	4066ae <_vfiprintf_r+0xc0e>
  4060e4:	1c67      	adds	r7, r4, #1
  4060e6:	f000 82c4 	beq.w	406672 <_vfiprintf_r+0xbd2>
  4060ea:	4622      	mov	r2, r4
  4060ec:	2100      	movs	r1, #0
  4060ee:	4658      	mov	r0, fp
  4060f0:	9301      	str	r3, [sp, #4]
  4060f2:	f001 f91d 	bl	407330 <memchr>
  4060f6:	9b01      	ldr	r3, [sp, #4]
  4060f8:	2800      	cmp	r0, #0
  4060fa:	f000 82e5 	beq.w	4066c8 <_vfiprintf_r+0xc28>
  4060fe:	eba0 020b 	sub.w	r2, r0, fp
  406102:	9205      	str	r2, [sp, #20]
  406104:	9607      	str	r6, [sp, #28]
  406106:	9302      	str	r3, [sp, #8]
  406108:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40610c:	2400      	movs	r4, #0
  40610e:	e619      	b.n	405d44 <_vfiprintf_r+0x2a4>
  406110:	f898 2000 	ldrb.w	r2, [r8]
  406114:	2a2a      	cmp	r2, #42	; 0x2a
  406116:	f108 0701 	add.w	r7, r8, #1
  40611a:	f000 82e9 	beq.w	4066f0 <_vfiprintf_r+0xc50>
  40611e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406122:	2909      	cmp	r1, #9
  406124:	46b8      	mov	r8, r7
  406126:	f04f 0400 	mov.w	r4, #0
  40612a:	f63f ad2d 	bhi.w	405b88 <_vfiprintf_r+0xe8>
  40612e:	f818 2b01 	ldrb.w	r2, [r8], #1
  406132:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  406136:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  40613a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40613e:	2909      	cmp	r1, #9
  406140:	d9f5      	bls.n	40612e <_vfiprintf_r+0x68e>
  406142:	e521      	b.n	405b88 <_vfiprintf_r+0xe8>
  406144:	f043 0320 	orr.w	r3, r3, #32
  406148:	f898 2000 	ldrb.w	r2, [r8]
  40614c:	e51a      	b.n	405b84 <_vfiprintf_r+0xe4>
  40614e:	9608      	str	r6, [sp, #32]
  406150:	2800      	cmp	r0, #0
  406152:	f040 82db 	bne.w	40670c <_vfiprintf_r+0xc6c>
  406156:	2a00      	cmp	r2, #0
  406158:	f000 80e7 	beq.w	40632a <_vfiprintf_r+0x88a>
  40615c:	2101      	movs	r1, #1
  40615e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  406162:	f04f 0200 	mov.w	r2, #0
  406166:	9101      	str	r1, [sp, #4]
  406168:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40616c:	9105      	str	r1, [sp, #20]
  40616e:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  406172:	e77b      	b.n	40606c <_vfiprintf_r+0x5cc>
  406174:	9a07      	ldr	r2, [sp, #28]
  406176:	6813      	ldr	r3, [r2, #0]
  406178:	3204      	adds	r2, #4
  40617a:	9207      	str	r2, [sp, #28]
  40617c:	9a03      	ldr	r2, [sp, #12]
  40617e:	601a      	str	r2, [r3, #0]
  406180:	e4cb      	b.n	405b1a <_vfiprintf_r+0x7a>
  406182:	aa0f      	add	r2, sp, #60	; 0x3c
  406184:	9904      	ldr	r1, [sp, #16]
  406186:	4620      	mov	r0, r4
  406188:	f7ff fc4a 	bl	405a20 <__sprint_r.part.0>
  40618c:	2800      	cmp	r0, #0
  40618e:	f040 8139 	bne.w	406404 <_vfiprintf_r+0x964>
  406192:	9910      	ldr	r1, [sp, #64]	; 0x40
  406194:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406196:	f101 0c01 	add.w	ip, r1, #1
  40619a:	46ce      	mov	lr, r9
  40619c:	e5ff      	b.n	405d9e <_vfiprintf_r+0x2fe>
  40619e:	9910      	ldr	r1, [sp, #64]	; 0x40
  4061a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4061a2:	1c48      	adds	r0, r1, #1
  4061a4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4061a8:	2d00      	cmp	r5, #0
  4061aa:	f43f ae22 	beq.w	405df2 <_vfiprintf_r+0x352>
  4061ae:	3201      	adds	r2, #1
  4061b0:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4061b4:	2101      	movs	r1, #1
  4061b6:	2807      	cmp	r0, #7
  4061b8:	9211      	str	r2, [sp, #68]	; 0x44
  4061ba:	9010      	str	r0, [sp, #64]	; 0x40
  4061bc:	f8ca 5000 	str.w	r5, [sl]
  4061c0:	f8ca 1004 	str.w	r1, [sl, #4]
  4061c4:	f340 8108 	ble.w	4063d8 <_vfiprintf_r+0x938>
  4061c8:	2a00      	cmp	r2, #0
  4061ca:	f040 81bc 	bne.w	406546 <_vfiprintf_r+0xaa6>
  4061ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4061d0:	2b00      	cmp	r3, #0
  4061d2:	f43f ae1f 	beq.w	405e14 <_vfiprintf_r+0x374>
  4061d6:	ab0e      	add	r3, sp, #56	; 0x38
  4061d8:	2202      	movs	r2, #2
  4061da:	4608      	mov	r0, r1
  4061dc:	931c      	str	r3, [sp, #112]	; 0x70
  4061de:	921d      	str	r2, [sp, #116]	; 0x74
  4061e0:	46ca      	mov	sl, r9
  4061e2:	4601      	mov	r1, r0
  4061e4:	f10a 0a08 	add.w	sl, sl, #8
  4061e8:	3001      	adds	r0, #1
  4061ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4061ec:	2b80      	cmp	r3, #128	; 0x80
  4061ee:	f43f ae19 	beq.w	405e24 <_vfiprintf_r+0x384>
  4061f2:	9b05      	ldr	r3, [sp, #20]
  4061f4:	1ae4      	subs	r4, r4, r3
  4061f6:	2c00      	cmp	r4, #0
  4061f8:	dd2e      	ble.n	406258 <_vfiprintf_r+0x7b8>
  4061fa:	2c10      	cmp	r4, #16
  4061fc:	4db3      	ldr	r5, [pc, #716]	; (4064cc <_vfiprintf_r+0xa2c>)
  4061fe:	dd1e      	ble.n	40623e <_vfiprintf_r+0x79e>
  406200:	46d6      	mov	lr, sl
  406202:	2610      	movs	r6, #16
  406204:	9f06      	ldr	r7, [sp, #24]
  406206:	f8dd a010 	ldr.w	sl, [sp, #16]
  40620a:	e006      	b.n	40621a <_vfiprintf_r+0x77a>
  40620c:	1c88      	adds	r0, r1, #2
  40620e:	f10e 0e08 	add.w	lr, lr, #8
  406212:	4619      	mov	r1, r3
  406214:	3c10      	subs	r4, #16
  406216:	2c10      	cmp	r4, #16
  406218:	dd10      	ble.n	40623c <_vfiprintf_r+0x79c>
  40621a:	1c4b      	adds	r3, r1, #1
  40621c:	3210      	adds	r2, #16
  40621e:	2b07      	cmp	r3, #7
  406220:	9211      	str	r2, [sp, #68]	; 0x44
  406222:	e88e 0060 	stmia.w	lr, {r5, r6}
  406226:	9310      	str	r3, [sp, #64]	; 0x40
  406228:	ddf0      	ble.n	40620c <_vfiprintf_r+0x76c>
  40622a:	2a00      	cmp	r2, #0
  40622c:	d165      	bne.n	4062fa <_vfiprintf_r+0x85a>
  40622e:	3c10      	subs	r4, #16
  406230:	2c10      	cmp	r4, #16
  406232:	f04f 0001 	mov.w	r0, #1
  406236:	4611      	mov	r1, r2
  406238:	46ce      	mov	lr, r9
  40623a:	dcee      	bgt.n	40621a <_vfiprintf_r+0x77a>
  40623c:	46f2      	mov	sl, lr
  40623e:	4422      	add	r2, r4
  406240:	2807      	cmp	r0, #7
  406242:	9211      	str	r2, [sp, #68]	; 0x44
  406244:	f8ca 5000 	str.w	r5, [sl]
  406248:	f8ca 4004 	str.w	r4, [sl, #4]
  40624c:	9010      	str	r0, [sp, #64]	; 0x40
  40624e:	f300 8085 	bgt.w	40635c <_vfiprintf_r+0x8bc>
  406252:	f10a 0a08 	add.w	sl, sl, #8
  406256:	3001      	adds	r0, #1
  406258:	9905      	ldr	r1, [sp, #20]
  40625a:	f8ca b000 	str.w	fp, [sl]
  40625e:	440a      	add	r2, r1
  406260:	2807      	cmp	r0, #7
  406262:	9211      	str	r2, [sp, #68]	; 0x44
  406264:	f8ca 1004 	str.w	r1, [sl, #4]
  406268:	9010      	str	r0, [sp, #64]	; 0x40
  40626a:	f340 8082 	ble.w	406372 <_vfiprintf_r+0x8d2>
  40626e:	2a00      	cmp	r2, #0
  406270:	f040 8118 	bne.w	4064a4 <_vfiprintf_r+0xa04>
  406274:	9b02      	ldr	r3, [sp, #8]
  406276:	9210      	str	r2, [sp, #64]	; 0x40
  406278:	0758      	lsls	r0, r3, #29
  40627a:	d535      	bpl.n	4062e8 <_vfiprintf_r+0x848>
  40627c:	9b08      	ldr	r3, [sp, #32]
  40627e:	9901      	ldr	r1, [sp, #4]
  406280:	1a5c      	subs	r4, r3, r1
  406282:	2c00      	cmp	r4, #0
  406284:	f340 80e7 	ble.w	406456 <_vfiprintf_r+0x9b6>
  406288:	46ca      	mov	sl, r9
  40628a:	2c10      	cmp	r4, #16
  40628c:	f340 8218 	ble.w	4066c0 <_vfiprintf_r+0xc20>
  406290:	9910      	ldr	r1, [sp, #64]	; 0x40
  406292:	4e8f      	ldr	r6, [pc, #572]	; (4064d0 <_vfiprintf_r+0xa30>)
  406294:	9f06      	ldr	r7, [sp, #24]
  406296:	f8dd b010 	ldr.w	fp, [sp, #16]
  40629a:	2510      	movs	r5, #16
  40629c:	e006      	b.n	4062ac <_vfiprintf_r+0x80c>
  40629e:	1c88      	adds	r0, r1, #2
  4062a0:	f10a 0a08 	add.w	sl, sl, #8
  4062a4:	4619      	mov	r1, r3
  4062a6:	3c10      	subs	r4, #16
  4062a8:	2c10      	cmp	r4, #16
  4062aa:	dd11      	ble.n	4062d0 <_vfiprintf_r+0x830>
  4062ac:	1c4b      	adds	r3, r1, #1
  4062ae:	3210      	adds	r2, #16
  4062b0:	2b07      	cmp	r3, #7
  4062b2:	9211      	str	r2, [sp, #68]	; 0x44
  4062b4:	f8ca 6000 	str.w	r6, [sl]
  4062b8:	f8ca 5004 	str.w	r5, [sl, #4]
  4062bc:	9310      	str	r3, [sp, #64]	; 0x40
  4062be:	ddee      	ble.n	40629e <_vfiprintf_r+0x7fe>
  4062c0:	bb42      	cbnz	r2, 406314 <_vfiprintf_r+0x874>
  4062c2:	3c10      	subs	r4, #16
  4062c4:	2c10      	cmp	r4, #16
  4062c6:	f04f 0001 	mov.w	r0, #1
  4062ca:	4611      	mov	r1, r2
  4062cc:	46ca      	mov	sl, r9
  4062ce:	dced      	bgt.n	4062ac <_vfiprintf_r+0x80c>
  4062d0:	4422      	add	r2, r4
  4062d2:	2807      	cmp	r0, #7
  4062d4:	9211      	str	r2, [sp, #68]	; 0x44
  4062d6:	f8ca 6000 	str.w	r6, [sl]
  4062da:	f8ca 4004 	str.w	r4, [sl, #4]
  4062de:	9010      	str	r0, [sp, #64]	; 0x40
  4062e0:	dd51      	ble.n	406386 <_vfiprintf_r+0x8e6>
  4062e2:	2a00      	cmp	r2, #0
  4062e4:	f040 819b 	bne.w	40661e <_vfiprintf_r+0xb7e>
  4062e8:	9b03      	ldr	r3, [sp, #12]
  4062ea:	9a08      	ldr	r2, [sp, #32]
  4062ec:	9901      	ldr	r1, [sp, #4]
  4062ee:	428a      	cmp	r2, r1
  4062f0:	bfac      	ite	ge
  4062f2:	189b      	addge	r3, r3, r2
  4062f4:	185b      	addlt	r3, r3, r1
  4062f6:	9303      	str	r3, [sp, #12]
  4062f8:	e04e      	b.n	406398 <_vfiprintf_r+0x8f8>
  4062fa:	aa0f      	add	r2, sp, #60	; 0x3c
  4062fc:	4651      	mov	r1, sl
  4062fe:	4638      	mov	r0, r7
  406300:	f7ff fb8e 	bl	405a20 <__sprint_r.part.0>
  406304:	2800      	cmp	r0, #0
  406306:	f040 813f 	bne.w	406588 <_vfiprintf_r+0xae8>
  40630a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40630c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40630e:	1c48      	adds	r0, r1, #1
  406310:	46ce      	mov	lr, r9
  406312:	e77f      	b.n	406214 <_vfiprintf_r+0x774>
  406314:	aa0f      	add	r2, sp, #60	; 0x3c
  406316:	4659      	mov	r1, fp
  406318:	4638      	mov	r0, r7
  40631a:	f7ff fb81 	bl	405a20 <__sprint_r.part.0>
  40631e:	b960      	cbnz	r0, 40633a <_vfiprintf_r+0x89a>
  406320:	9910      	ldr	r1, [sp, #64]	; 0x40
  406322:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406324:	1c48      	adds	r0, r1, #1
  406326:	46ca      	mov	sl, r9
  406328:	e7bd      	b.n	4062a6 <_vfiprintf_r+0x806>
  40632a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40632c:	f8dd b010 	ldr.w	fp, [sp, #16]
  406330:	2b00      	cmp	r3, #0
  406332:	f040 81d4 	bne.w	4066de <_vfiprintf_r+0xc3e>
  406336:	2300      	movs	r3, #0
  406338:	9310      	str	r3, [sp, #64]	; 0x40
  40633a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40633e:	f013 0f01 	tst.w	r3, #1
  406342:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  406346:	d102      	bne.n	40634e <_vfiprintf_r+0x8ae>
  406348:	059a      	lsls	r2, r3, #22
  40634a:	f140 80de 	bpl.w	40650a <_vfiprintf_r+0xa6a>
  40634e:	065b      	lsls	r3, r3, #25
  406350:	f53f acb2 	bmi.w	405cb8 <_vfiprintf_r+0x218>
  406354:	9803      	ldr	r0, [sp, #12]
  406356:	b02d      	add	sp, #180	; 0xb4
  406358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40635c:	2a00      	cmp	r2, #0
  40635e:	f040 8106 	bne.w	40656e <_vfiprintf_r+0xace>
  406362:	9a05      	ldr	r2, [sp, #20]
  406364:	921d      	str	r2, [sp, #116]	; 0x74
  406366:	2301      	movs	r3, #1
  406368:	9211      	str	r2, [sp, #68]	; 0x44
  40636a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40636e:	9310      	str	r3, [sp, #64]	; 0x40
  406370:	46ca      	mov	sl, r9
  406372:	f10a 0a08 	add.w	sl, sl, #8
  406376:	9b02      	ldr	r3, [sp, #8]
  406378:	0759      	lsls	r1, r3, #29
  40637a:	d504      	bpl.n	406386 <_vfiprintf_r+0x8e6>
  40637c:	9b08      	ldr	r3, [sp, #32]
  40637e:	9901      	ldr	r1, [sp, #4]
  406380:	1a5c      	subs	r4, r3, r1
  406382:	2c00      	cmp	r4, #0
  406384:	dc81      	bgt.n	40628a <_vfiprintf_r+0x7ea>
  406386:	9b03      	ldr	r3, [sp, #12]
  406388:	9908      	ldr	r1, [sp, #32]
  40638a:	9801      	ldr	r0, [sp, #4]
  40638c:	4281      	cmp	r1, r0
  40638e:	bfac      	ite	ge
  406390:	185b      	addge	r3, r3, r1
  406392:	181b      	addlt	r3, r3, r0
  406394:	9303      	str	r3, [sp, #12]
  406396:	bb72      	cbnz	r2, 4063f6 <_vfiprintf_r+0x956>
  406398:	2300      	movs	r3, #0
  40639a:	9310      	str	r3, [sp, #64]	; 0x40
  40639c:	46ca      	mov	sl, r9
  40639e:	f7ff bbbc 	b.w	405b1a <_vfiprintf_r+0x7a>
  4063a2:	aa0f      	add	r2, sp, #60	; 0x3c
  4063a4:	9904      	ldr	r1, [sp, #16]
  4063a6:	4620      	mov	r0, r4
  4063a8:	f7ff fb3a 	bl	405a20 <__sprint_r.part.0>
  4063ac:	bb50      	cbnz	r0, 406404 <_vfiprintf_r+0x964>
  4063ae:	9910      	ldr	r1, [sp, #64]	; 0x40
  4063b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4063b2:	f101 0e01 	add.w	lr, r1, #1
  4063b6:	46cc      	mov	ip, r9
  4063b8:	e548      	b.n	405e4c <_vfiprintf_r+0x3ac>
  4063ba:	2a00      	cmp	r2, #0
  4063bc:	f040 8140 	bne.w	406640 <_vfiprintf_r+0xba0>
  4063c0:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4063c4:	2900      	cmp	r1, #0
  4063c6:	f000 811b 	beq.w	406600 <_vfiprintf_r+0xb60>
  4063ca:	2201      	movs	r2, #1
  4063cc:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4063d0:	4610      	mov	r0, r2
  4063d2:	921d      	str	r2, [sp, #116]	; 0x74
  4063d4:	911c      	str	r1, [sp, #112]	; 0x70
  4063d6:	46ca      	mov	sl, r9
  4063d8:	4601      	mov	r1, r0
  4063da:	f10a 0a08 	add.w	sl, sl, #8
  4063de:	3001      	adds	r0, #1
  4063e0:	e507      	b.n	405df2 <_vfiprintf_r+0x352>
  4063e2:	9b02      	ldr	r3, [sp, #8]
  4063e4:	2a01      	cmp	r2, #1
  4063e6:	f000 8098 	beq.w	40651a <_vfiprintf_r+0xa7a>
  4063ea:	2a02      	cmp	r2, #2
  4063ec:	d10d      	bne.n	40640a <_vfiprintf_r+0x96a>
  4063ee:	9302      	str	r3, [sp, #8]
  4063f0:	2600      	movs	r6, #0
  4063f2:	2700      	movs	r7, #0
  4063f4:	e5b0      	b.n	405f58 <_vfiprintf_r+0x4b8>
  4063f6:	aa0f      	add	r2, sp, #60	; 0x3c
  4063f8:	9904      	ldr	r1, [sp, #16]
  4063fa:	9806      	ldr	r0, [sp, #24]
  4063fc:	f7ff fb10 	bl	405a20 <__sprint_r.part.0>
  406400:	2800      	cmp	r0, #0
  406402:	d0c9      	beq.n	406398 <_vfiprintf_r+0x8f8>
  406404:	f8dd b010 	ldr.w	fp, [sp, #16]
  406408:	e797      	b.n	40633a <_vfiprintf_r+0x89a>
  40640a:	9302      	str	r3, [sp, #8]
  40640c:	2600      	movs	r6, #0
  40640e:	2700      	movs	r7, #0
  406410:	4649      	mov	r1, r9
  406412:	e000      	b.n	406416 <_vfiprintf_r+0x976>
  406414:	4659      	mov	r1, fp
  406416:	08f2      	lsrs	r2, r6, #3
  406418:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  40641c:	08f8      	lsrs	r0, r7, #3
  40641e:	f006 0307 	and.w	r3, r6, #7
  406422:	4607      	mov	r7, r0
  406424:	4616      	mov	r6, r2
  406426:	3330      	adds	r3, #48	; 0x30
  406428:	ea56 0207 	orrs.w	r2, r6, r7
  40642c:	f801 3c01 	strb.w	r3, [r1, #-1]
  406430:	f101 3bff 	add.w	fp, r1, #4294967295
  406434:	d1ee      	bne.n	406414 <_vfiprintf_r+0x974>
  406436:	9a02      	ldr	r2, [sp, #8]
  406438:	07d6      	lsls	r6, r2, #31
  40643a:	f57f ad9d 	bpl.w	405f78 <_vfiprintf_r+0x4d8>
  40643e:	2b30      	cmp	r3, #48	; 0x30
  406440:	f43f ad9a 	beq.w	405f78 <_vfiprintf_r+0x4d8>
  406444:	3902      	subs	r1, #2
  406446:	2330      	movs	r3, #48	; 0x30
  406448:	f80b 3c01 	strb.w	r3, [fp, #-1]
  40644c:	eba9 0301 	sub.w	r3, r9, r1
  406450:	9305      	str	r3, [sp, #20]
  406452:	468b      	mov	fp, r1
  406454:	e476      	b.n	405d44 <_vfiprintf_r+0x2a4>
  406456:	9b03      	ldr	r3, [sp, #12]
  406458:	9a08      	ldr	r2, [sp, #32]
  40645a:	428a      	cmp	r2, r1
  40645c:	bfac      	ite	ge
  40645e:	189b      	addge	r3, r3, r2
  406460:	185b      	addlt	r3, r3, r1
  406462:	9303      	str	r3, [sp, #12]
  406464:	e798      	b.n	406398 <_vfiprintf_r+0x8f8>
  406466:	2202      	movs	r2, #2
  406468:	e44d      	b.n	405d06 <_vfiprintf_r+0x266>
  40646a:	2f00      	cmp	r7, #0
  40646c:	bf08      	it	eq
  40646e:	2e0a      	cmpeq	r6, #10
  406470:	d352      	bcc.n	406518 <_vfiprintf_r+0xa78>
  406472:	46cb      	mov	fp, r9
  406474:	4630      	mov	r0, r6
  406476:	4639      	mov	r1, r7
  406478:	220a      	movs	r2, #10
  40647a:	2300      	movs	r3, #0
  40647c:	f001 fc3c 	bl	407cf8 <__aeabi_uldivmod>
  406480:	3230      	adds	r2, #48	; 0x30
  406482:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  406486:	4630      	mov	r0, r6
  406488:	4639      	mov	r1, r7
  40648a:	2300      	movs	r3, #0
  40648c:	220a      	movs	r2, #10
  40648e:	f001 fc33 	bl	407cf8 <__aeabi_uldivmod>
  406492:	4606      	mov	r6, r0
  406494:	460f      	mov	r7, r1
  406496:	ea56 0307 	orrs.w	r3, r6, r7
  40649a:	d1eb      	bne.n	406474 <_vfiprintf_r+0x9d4>
  40649c:	e56c      	b.n	405f78 <_vfiprintf_r+0x4d8>
  40649e:	9405      	str	r4, [sp, #20]
  4064a0:	46cb      	mov	fp, r9
  4064a2:	e44f      	b.n	405d44 <_vfiprintf_r+0x2a4>
  4064a4:	aa0f      	add	r2, sp, #60	; 0x3c
  4064a6:	9904      	ldr	r1, [sp, #16]
  4064a8:	9806      	ldr	r0, [sp, #24]
  4064aa:	f7ff fab9 	bl	405a20 <__sprint_r.part.0>
  4064ae:	2800      	cmp	r0, #0
  4064b0:	d1a8      	bne.n	406404 <_vfiprintf_r+0x964>
  4064b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4064b4:	46ca      	mov	sl, r9
  4064b6:	e75e      	b.n	406376 <_vfiprintf_r+0x8d6>
  4064b8:	aa0f      	add	r2, sp, #60	; 0x3c
  4064ba:	9904      	ldr	r1, [sp, #16]
  4064bc:	9806      	ldr	r0, [sp, #24]
  4064be:	f7ff faaf 	bl	405a20 <__sprint_r.part.0>
  4064c2:	2800      	cmp	r0, #0
  4064c4:	d19e      	bne.n	406404 <_vfiprintf_r+0x964>
  4064c6:	46ca      	mov	sl, r9
  4064c8:	f7ff bbc0 	b.w	405c4c <_vfiprintf_r+0x1ac>
  4064cc:	00408ae4 	.word	0x00408ae4
  4064d0:	00408ad4 	.word	0x00408ad4
  4064d4:	3104      	adds	r1, #4
  4064d6:	6816      	ldr	r6, [r2, #0]
  4064d8:	9107      	str	r1, [sp, #28]
  4064da:	2201      	movs	r2, #1
  4064dc:	2700      	movs	r7, #0
  4064de:	e412      	b.n	405d06 <_vfiprintf_r+0x266>
  4064e0:	9807      	ldr	r0, [sp, #28]
  4064e2:	4601      	mov	r1, r0
  4064e4:	3104      	adds	r1, #4
  4064e6:	6806      	ldr	r6, [r0, #0]
  4064e8:	9107      	str	r1, [sp, #28]
  4064ea:	2700      	movs	r7, #0
  4064ec:	e40b      	b.n	405d06 <_vfiprintf_r+0x266>
  4064ee:	680e      	ldr	r6, [r1, #0]
  4064f0:	3104      	adds	r1, #4
  4064f2:	9107      	str	r1, [sp, #28]
  4064f4:	2700      	movs	r7, #0
  4064f6:	e591      	b.n	40601c <_vfiprintf_r+0x57c>
  4064f8:	9907      	ldr	r1, [sp, #28]
  4064fa:	680e      	ldr	r6, [r1, #0]
  4064fc:	460a      	mov	r2, r1
  4064fe:	17f7      	asrs	r7, r6, #31
  406500:	3204      	adds	r2, #4
  406502:	9207      	str	r2, [sp, #28]
  406504:	4630      	mov	r0, r6
  406506:	4639      	mov	r1, r7
  406508:	e50f      	b.n	405f2a <_vfiprintf_r+0x48a>
  40650a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40650e:	f000 fe7f 	bl	407210 <__retarget_lock_release_recursive>
  406512:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  406516:	e71a      	b.n	40634e <_vfiprintf_r+0x8ae>
  406518:	9b02      	ldr	r3, [sp, #8]
  40651a:	9302      	str	r3, [sp, #8]
  40651c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  406520:	3630      	adds	r6, #48	; 0x30
  406522:	2301      	movs	r3, #1
  406524:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  406528:	9305      	str	r3, [sp, #20]
  40652a:	e40b      	b.n	405d44 <_vfiprintf_r+0x2a4>
  40652c:	aa0f      	add	r2, sp, #60	; 0x3c
  40652e:	9904      	ldr	r1, [sp, #16]
  406530:	9806      	ldr	r0, [sp, #24]
  406532:	f7ff fa75 	bl	405a20 <__sprint_r.part.0>
  406536:	2800      	cmp	r0, #0
  406538:	f47f af64 	bne.w	406404 <_vfiprintf_r+0x964>
  40653c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40653e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406540:	1c48      	adds	r0, r1, #1
  406542:	46ca      	mov	sl, r9
  406544:	e651      	b.n	4061ea <_vfiprintf_r+0x74a>
  406546:	aa0f      	add	r2, sp, #60	; 0x3c
  406548:	9904      	ldr	r1, [sp, #16]
  40654a:	9806      	ldr	r0, [sp, #24]
  40654c:	f7ff fa68 	bl	405a20 <__sprint_r.part.0>
  406550:	2800      	cmp	r0, #0
  406552:	f47f af57 	bne.w	406404 <_vfiprintf_r+0x964>
  406556:	9910      	ldr	r1, [sp, #64]	; 0x40
  406558:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40655a:	1c48      	adds	r0, r1, #1
  40655c:	46ca      	mov	sl, r9
  40655e:	e448      	b.n	405df2 <_vfiprintf_r+0x352>
  406560:	2a00      	cmp	r2, #0
  406562:	f040 8091 	bne.w	406688 <_vfiprintf_r+0xbe8>
  406566:	2001      	movs	r0, #1
  406568:	4611      	mov	r1, r2
  40656a:	46ca      	mov	sl, r9
  40656c:	e641      	b.n	4061f2 <_vfiprintf_r+0x752>
  40656e:	aa0f      	add	r2, sp, #60	; 0x3c
  406570:	9904      	ldr	r1, [sp, #16]
  406572:	9806      	ldr	r0, [sp, #24]
  406574:	f7ff fa54 	bl	405a20 <__sprint_r.part.0>
  406578:	2800      	cmp	r0, #0
  40657a:	f47f af43 	bne.w	406404 <_vfiprintf_r+0x964>
  40657e:	9810      	ldr	r0, [sp, #64]	; 0x40
  406580:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406582:	3001      	adds	r0, #1
  406584:	46ca      	mov	sl, r9
  406586:	e667      	b.n	406258 <_vfiprintf_r+0x7b8>
  406588:	46d3      	mov	fp, sl
  40658a:	e6d6      	b.n	40633a <_vfiprintf_r+0x89a>
  40658c:	9e07      	ldr	r6, [sp, #28]
  40658e:	3607      	adds	r6, #7
  406590:	f026 0207 	bic.w	r2, r6, #7
  406594:	f102 0108 	add.w	r1, r2, #8
  406598:	e9d2 6700 	ldrd	r6, r7, [r2]
  40659c:	9107      	str	r1, [sp, #28]
  40659e:	2201      	movs	r2, #1
  4065a0:	f7ff bbb1 	b.w	405d06 <_vfiprintf_r+0x266>
  4065a4:	9e07      	ldr	r6, [sp, #28]
  4065a6:	3607      	adds	r6, #7
  4065a8:	f026 0607 	bic.w	r6, r6, #7
  4065ac:	e9d6 0100 	ldrd	r0, r1, [r6]
  4065b0:	f106 0208 	add.w	r2, r6, #8
  4065b4:	9207      	str	r2, [sp, #28]
  4065b6:	4606      	mov	r6, r0
  4065b8:	460f      	mov	r7, r1
  4065ba:	e4b6      	b.n	405f2a <_vfiprintf_r+0x48a>
  4065bc:	9e07      	ldr	r6, [sp, #28]
  4065be:	3607      	adds	r6, #7
  4065c0:	f026 0207 	bic.w	r2, r6, #7
  4065c4:	f102 0108 	add.w	r1, r2, #8
  4065c8:	e9d2 6700 	ldrd	r6, r7, [r2]
  4065cc:	9107      	str	r1, [sp, #28]
  4065ce:	2200      	movs	r2, #0
  4065d0:	f7ff bb99 	b.w	405d06 <_vfiprintf_r+0x266>
  4065d4:	9e07      	ldr	r6, [sp, #28]
  4065d6:	3607      	adds	r6, #7
  4065d8:	f026 0107 	bic.w	r1, r6, #7
  4065dc:	f101 0008 	add.w	r0, r1, #8
  4065e0:	9007      	str	r0, [sp, #28]
  4065e2:	e9d1 6700 	ldrd	r6, r7, [r1]
  4065e6:	e519      	b.n	40601c <_vfiprintf_r+0x57c>
  4065e8:	46cb      	mov	fp, r9
  4065ea:	f7ff bbab 	b.w	405d44 <_vfiprintf_r+0x2a4>
  4065ee:	252d      	movs	r5, #45	; 0x2d
  4065f0:	4276      	negs	r6, r6
  4065f2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4065f6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4065fa:	2201      	movs	r2, #1
  4065fc:	f7ff bb88 	b.w	405d10 <_vfiprintf_r+0x270>
  406600:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406602:	b9b3      	cbnz	r3, 406632 <_vfiprintf_r+0xb92>
  406604:	4611      	mov	r1, r2
  406606:	2001      	movs	r0, #1
  406608:	46ca      	mov	sl, r9
  40660a:	e5f2      	b.n	4061f2 <_vfiprintf_r+0x752>
  40660c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406610:	f000 fdfe 	bl	407210 <__retarget_lock_release_recursive>
  406614:	f04f 33ff 	mov.w	r3, #4294967295
  406618:	9303      	str	r3, [sp, #12]
  40661a:	f7ff bb50 	b.w	405cbe <_vfiprintf_r+0x21e>
  40661e:	aa0f      	add	r2, sp, #60	; 0x3c
  406620:	9904      	ldr	r1, [sp, #16]
  406622:	9806      	ldr	r0, [sp, #24]
  406624:	f7ff f9fc 	bl	405a20 <__sprint_r.part.0>
  406628:	2800      	cmp	r0, #0
  40662a:	f47f aeeb 	bne.w	406404 <_vfiprintf_r+0x964>
  40662e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406630:	e6a9      	b.n	406386 <_vfiprintf_r+0x8e6>
  406632:	ab0e      	add	r3, sp, #56	; 0x38
  406634:	2202      	movs	r2, #2
  406636:	931c      	str	r3, [sp, #112]	; 0x70
  406638:	921d      	str	r2, [sp, #116]	; 0x74
  40663a:	2001      	movs	r0, #1
  40663c:	46ca      	mov	sl, r9
  40663e:	e5d0      	b.n	4061e2 <_vfiprintf_r+0x742>
  406640:	aa0f      	add	r2, sp, #60	; 0x3c
  406642:	9904      	ldr	r1, [sp, #16]
  406644:	9806      	ldr	r0, [sp, #24]
  406646:	f7ff f9eb 	bl	405a20 <__sprint_r.part.0>
  40664a:	2800      	cmp	r0, #0
  40664c:	f47f aeda 	bne.w	406404 <_vfiprintf_r+0x964>
  406650:	9910      	ldr	r1, [sp, #64]	; 0x40
  406652:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406654:	1c48      	adds	r0, r1, #1
  406656:	46ca      	mov	sl, r9
  406658:	e5a4      	b.n	4061a4 <_vfiprintf_r+0x704>
  40665a:	9a07      	ldr	r2, [sp, #28]
  40665c:	9903      	ldr	r1, [sp, #12]
  40665e:	6813      	ldr	r3, [r2, #0]
  406660:	17cd      	asrs	r5, r1, #31
  406662:	4608      	mov	r0, r1
  406664:	3204      	adds	r2, #4
  406666:	4629      	mov	r1, r5
  406668:	9207      	str	r2, [sp, #28]
  40666a:	e9c3 0100 	strd	r0, r1, [r3]
  40666e:	f7ff ba54 	b.w	405b1a <_vfiprintf_r+0x7a>
  406672:	4658      	mov	r0, fp
  406674:	9607      	str	r6, [sp, #28]
  406676:	9302      	str	r3, [sp, #8]
  406678:	f001 f902 	bl	407880 <strlen>
  40667c:	2400      	movs	r4, #0
  40667e:	9005      	str	r0, [sp, #20]
  406680:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406684:	f7ff bb5e 	b.w	405d44 <_vfiprintf_r+0x2a4>
  406688:	aa0f      	add	r2, sp, #60	; 0x3c
  40668a:	9904      	ldr	r1, [sp, #16]
  40668c:	9806      	ldr	r0, [sp, #24]
  40668e:	f7ff f9c7 	bl	405a20 <__sprint_r.part.0>
  406692:	2800      	cmp	r0, #0
  406694:	f47f aeb6 	bne.w	406404 <_vfiprintf_r+0x964>
  406698:	9910      	ldr	r1, [sp, #64]	; 0x40
  40669a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40669c:	1c48      	adds	r0, r1, #1
  40669e:	46ca      	mov	sl, r9
  4066a0:	e5a7      	b.n	4061f2 <_vfiprintf_r+0x752>
  4066a2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4066a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4066a6:	4e20      	ldr	r6, [pc, #128]	; (406728 <_vfiprintf_r+0xc88>)
  4066a8:	3101      	adds	r1, #1
  4066aa:	f7ff bb90 	b.w	405dce <_vfiprintf_r+0x32e>
  4066ae:	2c06      	cmp	r4, #6
  4066b0:	bf28      	it	cs
  4066b2:	2406      	movcs	r4, #6
  4066b4:	9405      	str	r4, [sp, #20]
  4066b6:	9607      	str	r6, [sp, #28]
  4066b8:	9401      	str	r4, [sp, #4]
  4066ba:	f8df b070 	ldr.w	fp, [pc, #112]	; 40672c <_vfiprintf_r+0xc8c>
  4066be:	e4d5      	b.n	40606c <_vfiprintf_r+0x5cc>
  4066c0:	9810      	ldr	r0, [sp, #64]	; 0x40
  4066c2:	4e19      	ldr	r6, [pc, #100]	; (406728 <_vfiprintf_r+0xc88>)
  4066c4:	3001      	adds	r0, #1
  4066c6:	e603      	b.n	4062d0 <_vfiprintf_r+0x830>
  4066c8:	9405      	str	r4, [sp, #20]
  4066ca:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4066ce:	9607      	str	r6, [sp, #28]
  4066d0:	9302      	str	r3, [sp, #8]
  4066d2:	4604      	mov	r4, r0
  4066d4:	f7ff bb36 	b.w	405d44 <_vfiprintf_r+0x2a4>
  4066d8:	4686      	mov	lr, r0
  4066da:	f7ff bbce 	b.w	405e7a <_vfiprintf_r+0x3da>
  4066de:	9806      	ldr	r0, [sp, #24]
  4066e0:	aa0f      	add	r2, sp, #60	; 0x3c
  4066e2:	4659      	mov	r1, fp
  4066e4:	f7ff f99c 	bl	405a20 <__sprint_r.part.0>
  4066e8:	2800      	cmp	r0, #0
  4066ea:	f43f ae24 	beq.w	406336 <_vfiprintf_r+0x896>
  4066ee:	e624      	b.n	40633a <_vfiprintf_r+0x89a>
  4066f0:	9907      	ldr	r1, [sp, #28]
  4066f2:	f898 2001 	ldrb.w	r2, [r8, #1]
  4066f6:	680c      	ldr	r4, [r1, #0]
  4066f8:	3104      	adds	r1, #4
  4066fa:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4066fe:	46b8      	mov	r8, r7
  406700:	9107      	str	r1, [sp, #28]
  406702:	f7ff ba3f 	b.w	405b84 <_vfiprintf_r+0xe4>
  406706:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40670a:	e43c      	b.n	405f86 <_vfiprintf_r+0x4e6>
  40670c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406710:	e521      	b.n	406156 <_vfiprintf_r+0x6b6>
  406712:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406716:	f7ff bbf4 	b.w	405f02 <_vfiprintf_r+0x462>
  40671a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40671e:	e491      	b.n	406044 <_vfiprintf_r+0x5a4>
  406720:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406724:	e469      	b.n	405ffa <_vfiprintf_r+0x55a>
  406726:	bf00      	nop
  406728:	00408ad4 	.word	0x00408ad4
  40672c:	00408acc 	.word	0x00408acc

00406730 <__sbprintf>:
  406730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406734:	460c      	mov	r4, r1
  406736:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40673a:	8989      	ldrh	r1, [r1, #12]
  40673c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40673e:	89e5      	ldrh	r5, [r4, #14]
  406740:	9619      	str	r6, [sp, #100]	; 0x64
  406742:	f021 0102 	bic.w	r1, r1, #2
  406746:	4606      	mov	r6, r0
  406748:	69e0      	ldr	r0, [r4, #28]
  40674a:	f8ad 100c 	strh.w	r1, [sp, #12]
  40674e:	4617      	mov	r7, r2
  406750:	f44f 6180 	mov.w	r1, #1024	; 0x400
  406754:	6a62      	ldr	r2, [r4, #36]	; 0x24
  406756:	f8ad 500e 	strh.w	r5, [sp, #14]
  40675a:	4698      	mov	r8, r3
  40675c:	ad1a      	add	r5, sp, #104	; 0x68
  40675e:	2300      	movs	r3, #0
  406760:	9007      	str	r0, [sp, #28]
  406762:	a816      	add	r0, sp, #88	; 0x58
  406764:	9209      	str	r2, [sp, #36]	; 0x24
  406766:	9306      	str	r3, [sp, #24]
  406768:	9500      	str	r5, [sp, #0]
  40676a:	9504      	str	r5, [sp, #16]
  40676c:	9102      	str	r1, [sp, #8]
  40676e:	9105      	str	r1, [sp, #20]
  406770:	f000 fd48 	bl	407204 <__retarget_lock_init_recursive>
  406774:	4643      	mov	r3, r8
  406776:	463a      	mov	r2, r7
  406778:	4669      	mov	r1, sp
  40677a:	4630      	mov	r0, r6
  40677c:	f7ff f990 	bl	405aa0 <_vfiprintf_r>
  406780:	1e05      	subs	r5, r0, #0
  406782:	db07      	blt.n	406794 <__sbprintf+0x64>
  406784:	4630      	mov	r0, r6
  406786:	4669      	mov	r1, sp
  406788:	f000 f928 	bl	4069dc <_fflush_r>
  40678c:	2800      	cmp	r0, #0
  40678e:	bf18      	it	ne
  406790:	f04f 35ff 	movne.w	r5, #4294967295
  406794:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  406798:	065b      	lsls	r3, r3, #25
  40679a:	d503      	bpl.n	4067a4 <__sbprintf+0x74>
  40679c:	89a3      	ldrh	r3, [r4, #12]
  40679e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4067a2:	81a3      	strh	r3, [r4, #12]
  4067a4:	9816      	ldr	r0, [sp, #88]	; 0x58
  4067a6:	f000 fd2f 	bl	407208 <__retarget_lock_close_recursive>
  4067aa:	4628      	mov	r0, r5
  4067ac:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4067b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004067b4 <__swsetup_r>:
  4067b4:	b538      	push	{r3, r4, r5, lr}
  4067b6:	4b30      	ldr	r3, [pc, #192]	; (406878 <__swsetup_r+0xc4>)
  4067b8:	681b      	ldr	r3, [r3, #0]
  4067ba:	4605      	mov	r5, r0
  4067bc:	460c      	mov	r4, r1
  4067be:	b113      	cbz	r3, 4067c6 <__swsetup_r+0x12>
  4067c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4067c2:	2a00      	cmp	r2, #0
  4067c4:	d038      	beq.n	406838 <__swsetup_r+0x84>
  4067c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4067ca:	b293      	uxth	r3, r2
  4067cc:	0718      	lsls	r0, r3, #28
  4067ce:	d50c      	bpl.n	4067ea <__swsetup_r+0x36>
  4067d0:	6920      	ldr	r0, [r4, #16]
  4067d2:	b1a8      	cbz	r0, 406800 <__swsetup_r+0x4c>
  4067d4:	f013 0201 	ands.w	r2, r3, #1
  4067d8:	d01e      	beq.n	406818 <__swsetup_r+0x64>
  4067da:	6963      	ldr	r3, [r4, #20]
  4067dc:	2200      	movs	r2, #0
  4067de:	425b      	negs	r3, r3
  4067e0:	61a3      	str	r3, [r4, #24]
  4067e2:	60a2      	str	r2, [r4, #8]
  4067e4:	b1f0      	cbz	r0, 406824 <__swsetup_r+0x70>
  4067e6:	2000      	movs	r0, #0
  4067e8:	bd38      	pop	{r3, r4, r5, pc}
  4067ea:	06d9      	lsls	r1, r3, #27
  4067ec:	d53c      	bpl.n	406868 <__swsetup_r+0xb4>
  4067ee:	0758      	lsls	r0, r3, #29
  4067f0:	d426      	bmi.n	406840 <__swsetup_r+0x8c>
  4067f2:	6920      	ldr	r0, [r4, #16]
  4067f4:	f042 0308 	orr.w	r3, r2, #8
  4067f8:	81a3      	strh	r3, [r4, #12]
  4067fa:	b29b      	uxth	r3, r3
  4067fc:	2800      	cmp	r0, #0
  4067fe:	d1e9      	bne.n	4067d4 <__swsetup_r+0x20>
  406800:	f403 7220 	and.w	r2, r3, #640	; 0x280
  406804:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  406808:	d0e4      	beq.n	4067d4 <__swsetup_r+0x20>
  40680a:	4628      	mov	r0, r5
  40680c:	4621      	mov	r1, r4
  40680e:	f000 fd2f 	bl	407270 <__smakebuf_r>
  406812:	89a3      	ldrh	r3, [r4, #12]
  406814:	6920      	ldr	r0, [r4, #16]
  406816:	e7dd      	b.n	4067d4 <__swsetup_r+0x20>
  406818:	0799      	lsls	r1, r3, #30
  40681a:	bf58      	it	pl
  40681c:	6962      	ldrpl	r2, [r4, #20]
  40681e:	60a2      	str	r2, [r4, #8]
  406820:	2800      	cmp	r0, #0
  406822:	d1e0      	bne.n	4067e6 <__swsetup_r+0x32>
  406824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406828:	061a      	lsls	r2, r3, #24
  40682a:	d5dd      	bpl.n	4067e8 <__swsetup_r+0x34>
  40682c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406830:	81a3      	strh	r3, [r4, #12]
  406832:	f04f 30ff 	mov.w	r0, #4294967295
  406836:	bd38      	pop	{r3, r4, r5, pc}
  406838:	4618      	mov	r0, r3
  40683a:	f000 f927 	bl	406a8c <__sinit>
  40683e:	e7c2      	b.n	4067c6 <__swsetup_r+0x12>
  406840:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406842:	b151      	cbz	r1, 40685a <__swsetup_r+0xa6>
  406844:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406848:	4299      	cmp	r1, r3
  40684a:	d004      	beq.n	406856 <__swsetup_r+0xa2>
  40684c:	4628      	mov	r0, r5
  40684e:	f000 fa43 	bl	406cd8 <_free_r>
  406852:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406856:	2300      	movs	r3, #0
  406858:	6323      	str	r3, [r4, #48]	; 0x30
  40685a:	2300      	movs	r3, #0
  40685c:	6920      	ldr	r0, [r4, #16]
  40685e:	6063      	str	r3, [r4, #4]
  406860:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  406864:	6020      	str	r0, [r4, #0]
  406866:	e7c5      	b.n	4067f4 <__swsetup_r+0x40>
  406868:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40686c:	2309      	movs	r3, #9
  40686e:	602b      	str	r3, [r5, #0]
  406870:	f04f 30ff 	mov.w	r0, #4294967295
  406874:	81a2      	strh	r2, [r4, #12]
  406876:	bd38      	pop	{r3, r4, r5, pc}
  406878:	20400058 	.word	0x20400058

0040687c <register_fini>:
  40687c:	4b02      	ldr	r3, [pc, #8]	; (406888 <register_fini+0xc>)
  40687e:	b113      	cbz	r3, 406886 <register_fini+0xa>
  406880:	4802      	ldr	r0, [pc, #8]	; (40688c <register_fini+0x10>)
  406882:	f000 b805 	b.w	406890 <atexit>
  406886:	4770      	bx	lr
  406888:	00000000 	.word	0x00000000
  40688c:	00406afd 	.word	0x00406afd

00406890 <atexit>:
  406890:	2300      	movs	r3, #0
  406892:	4601      	mov	r1, r0
  406894:	461a      	mov	r2, r3
  406896:	4618      	mov	r0, r3
  406898:	f001 b906 	b.w	407aa8 <__register_exitproc>

0040689c <__sflush_r>:
  40689c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4068a0:	b29a      	uxth	r2, r3
  4068a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4068a6:	460d      	mov	r5, r1
  4068a8:	0711      	lsls	r1, r2, #28
  4068aa:	4680      	mov	r8, r0
  4068ac:	d43a      	bmi.n	406924 <__sflush_r+0x88>
  4068ae:	686a      	ldr	r2, [r5, #4]
  4068b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4068b4:	2a00      	cmp	r2, #0
  4068b6:	81ab      	strh	r3, [r5, #12]
  4068b8:	dd6f      	ble.n	40699a <__sflush_r+0xfe>
  4068ba:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4068bc:	2c00      	cmp	r4, #0
  4068be:	d049      	beq.n	406954 <__sflush_r+0xb8>
  4068c0:	2200      	movs	r2, #0
  4068c2:	b29b      	uxth	r3, r3
  4068c4:	f8d8 6000 	ldr.w	r6, [r8]
  4068c8:	f8c8 2000 	str.w	r2, [r8]
  4068cc:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4068d0:	d067      	beq.n	4069a2 <__sflush_r+0x106>
  4068d2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4068d4:	075f      	lsls	r7, r3, #29
  4068d6:	d505      	bpl.n	4068e4 <__sflush_r+0x48>
  4068d8:	6869      	ldr	r1, [r5, #4]
  4068da:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4068dc:	1a52      	subs	r2, r2, r1
  4068de:	b10b      	cbz	r3, 4068e4 <__sflush_r+0x48>
  4068e0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4068e2:	1ad2      	subs	r2, r2, r3
  4068e4:	2300      	movs	r3, #0
  4068e6:	69e9      	ldr	r1, [r5, #28]
  4068e8:	4640      	mov	r0, r8
  4068ea:	47a0      	blx	r4
  4068ec:	1c44      	adds	r4, r0, #1
  4068ee:	d03c      	beq.n	40696a <__sflush_r+0xce>
  4068f0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4068f4:	692a      	ldr	r2, [r5, #16]
  4068f6:	602a      	str	r2, [r5, #0]
  4068f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4068fc:	2200      	movs	r2, #0
  4068fe:	81ab      	strh	r3, [r5, #12]
  406900:	04db      	lsls	r3, r3, #19
  406902:	606a      	str	r2, [r5, #4]
  406904:	d447      	bmi.n	406996 <__sflush_r+0xfa>
  406906:	6b29      	ldr	r1, [r5, #48]	; 0x30
  406908:	f8c8 6000 	str.w	r6, [r8]
  40690c:	b311      	cbz	r1, 406954 <__sflush_r+0xb8>
  40690e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  406912:	4299      	cmp	r1, r3
  406914:	d002      	beq.n	40691c <__sflush_r+0x80>
  406916:	4640      	mov	r0, r8
  406918:	f000 f9de 	bl	406cd8 <_free_r>
  40691c:	2000      	movs	r0, #0
  40691e:	6328      	str	r0, [r5, #48]	; 0x30
  406920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406924:	692e      	ldr	r6, [r5, #16]
  406926:	b1ae      	cbz	r6, 406954 <__sflush_r+0xb8>
  406928:	682c      	ldr	r4, [r5, #0]
  40692a:	602e      	str	r6, [r5, #0]
  40692c:	0791      	lsls	r1, r2, #30
  40692e:	bf0c      	ite	eq
  406930:	696b      	ldreq	r3, [r5, #20]
  406932:	2300      	movne	r3, #0
  406934:	1ba4      	subs	r4, r4, r6
  406936:	60ab      	str	r3, [r5, #8]
  406938:	e00a      	b.n	406950 <__sflush_r+0xb4>
  40693a:	4623      	mov	r3, r4
  40693c:	4632      	mov	r2, r6
  40693e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  406940:	69e9      	ldr	r1, [r5, #28]
  406942:	4640      	mov	r0, r8
  406944:	47b8      	blx	r7
  406946:	2800      	cmp	r0, #0
  406948:	eba4 0400 	sub.w	r4, r4, r0
  40694c:	4406      	add	r6, r0
  40694e:	dd04      	ble.n	40695a <__sflush_r+0xbe>
  406950:	2c00      	cmp	r4, #0
  406952:	dcf2      	bgt.n	40693a <__sflush_r+0x9e>
  406954:	2000      	movs	r0, #0
  406956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40695a:	89ab      	ldrh	r3, [r5, #12]
  40695c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406960:	81ab      	strh	r3, [r5, #12]
  406962:	f04f 30ff 	mov.w	r0, #4294967295
  406966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40696a:	f8d8 4000 	ldr.w	r4, [r8]
  40696e:	2c1d      	cmp	r4, #29
  406970:	d8f3      	bhi.n	40695a <__sflush_r+0xbe>
  406972:	4b19      	ldr	r3, [pc, #100]	; (4069d8 <__sflush_r+0x13c>)
  406974:	40e3      	lsrs	r3, r4
  406976:	43db      	mvns	r3, r3
  406978:	f013 0301 	ands.w	r3, r3, #1
  40697c:	d1ed      	bne.n	40695a <__sflush_r+0xbe>
  40697e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  406982:	606b      	str	r3, [r5, #4]
  406984:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  406988:	6929      	ldr	r1, [r5, #16]
  40698a:	81ab      	strh	r3, [r5, #12]
  40698c:	04da      	lsls	r2, r3, #19
  40698e:	6029      	str	r1, [r5, #0]
  406990:	d5b9      	bpl.n	406906 <__sflush_r+0x6a>
  406992:	2c00      	cmp	r4, #0
  406994:	d1b7      	bne.n	406906 <__sflush_r+0x6a>
  406996:	6528      	str	r0, [r5, #80]	; 0x50
  406998:	e7b5      	b.n	406906 <__sflush_r+0x6a>
  40699a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40699c:	2a00      	cmp	r2, #0
  40699e:	dc8c      	bgt.n	4068ba <__sflush_r+0x1e>
  4069a0:	e7d8      	b.n	406954 <__sflush_r+0xb8>
  4069a2:	2301      	movs	r3, #1
  4069a4:	69e9      	ldr	r1, [r5, #28]
  4069a6:	4640      	mov	r0, r8
  4069a8:	47a0      	blx	r4
  4069aa:	1c43      	adds	r3, r0, #1
  4069ac:	4602      	mov	r2, r0
  4069ae:	d002      	beq.n	4069b6 <__sflush_r+0x11a>
  4069b0:	89ab      	ldrh	r3, [r5, #12]
  4069b2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4069b4:	e78e      	b.n	4068d4 <__sflush_r+0x38>
  4069b6:	f8d8 3000 	ldr.w	r3, [r8]
  4069ba:	2b00      	cmp	r3, #0
  4069bc:	d0f8      	beq.n	4069b0 <__sflush_r+0x114>
  4069be:	2b1d      	cmp	r3, #29
  4069c0:	d001      	beq.n	4069c6 <__sflush_r+0x12a>
  4069c2:	2b16      	cmp	r3, #22
  4069c4:	d102      	bne.n	4069cc <__sflush_r+0x130>
  4069c6:	f8c8 6000 	str.w	r6, [r8]
  4069ca:	e7c3      	b.n	406954 <__sflush_r+0xb8>
  4069cc:	89ab      	ldrh	r3, [r5, #12]
  4069ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4069d2:	81ab      	strh	r3, [r5, #12]
  4069d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4069d8:	20400001 	.word	0x20400001

004069dc <_fflush_r>:
  4069dc:	b538      	push	{r3, r4, r5, lr}
  4069de:	460d      	mov	r5, r1
  4069e0:	4604      	mov	r4, r0
  4069e2:	b108      	cbz	r0, 4069e8 <_fflush_r+0xc>
  4069e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4069e6:	b1bb      	cbz	r3, 406a18 <_fflush_r+0x3c>
  4069e8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4069ec:	b188      	cbz	r0, 406a12 <_fflush_r+0x36>
  4069ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4069f0:	07db      	lsls	r3, r3, #31
  4069f2:	d401      	bmi.n	4069f8 <_fflush_r+0x1c>
  4069f4:	0581      	lsls	r1, r0, #22
  4069f6:	d517      	bpl.n	406a28 <_fflush_r+0x4c>
  4069f8:	4620      	mov	r0, r4
  4069fa:	4629      	mov	r1, r5
  4069fc:	f7ff ff4e 	bl	40689c <__sflush_r>
  406a00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  406a02:	07da      	lsls	r2, r3, #31
  406a04:	4604      	mov	r4, r0
  406a06:	d402      	bmi.n	406a0e <_fflush_r+0x32>
  406a08:	89ab      	ldrh	r3, [r5, #12]
  406a0a:	059b      	lsls	r3, r3, #22
  406a0c:	d507      	bpl.n	406a1e <_fflush_r+0x42>
  406a0e:	4620      	mov	r0, r4
  406a10:	bd38      	pop	{r3, r4, r5, pc}
  406a12:	4604      	mov	r4, r0
  406a14:	4620      	mov	r0, r4
  406a16:	bd38      	pop	{r3, r4, r5, pc}
  406a18:	f000 f838 	bl	406a8c <__sinit>
  406a1c:	e7e4      	b.n	4069e8 <_fflush_r+0xc>
  406a1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  406a20:	f000 fbf6 	bl	407210 <__retarget_lock_release_recursive>
  406a24:	4620      	mov	r0, r4
  406a26:	bd38      	pop	{r3, r4, r5, pc}
  406a28:	6da8      	ldr	r0, [r5, #88]	; 0x58
  406a2a:	f000 fbef 	bl	40720c <__retarget_lock_acquire_recursive>
  406a2e:	e7e3      	b.n	4069f8 <_fflush_r+0x1c>

00406a30 <_cleanup_r>:
  406a30:	4901      	ldr	r1, [pc, #4]	; (406a38 <_cleanup_r+0x8>)
  406a32:	f000 bbaf 	b.w	407194 <_fwalk_reent>
  406a36:	bf00      	nop
  406a38:	00407b91 	.word	0x00407b91

00406a3c <std.isra.0>:
  406a3c:	b510      	push	{r4, lr}
  406a3e:	2300      	movs	r3, #0
  406a40:	4604      	mov	r4, r0
  406a42:	8181      	strh	r1, [r0, #12]
  406a44:	81c2      	strh	r2, [r0, #14]
  406a46:	6003      	str	r3, [r0, #0]
  406a48:	6043      	str	r3, [r0, #4]
  406a4a:	6083      	str	r3, [r0, #8]
  406a4c:	6643      	str	r3, [r0, #100]	; 0x64
  406a4e:	6103      	str	r3, [r0, #16]
  406a50:	6143      	str	r3, [r0, #20]
  406a52:	6183      	str	r3, [r0, #24]
  406a54:	4619      	mov	r1, r3
  406a56:	2208      	movs	r2, #8
  406a58:	305c      	adds	r0, #92	; 0x5c
  406a5a:	f7fe ff75 	bl	405948 <memset>
  406a5e:	4807      	ldr	r0, [pc, #28]	; (406a7c <std.isra.0+0x40>)
  406a60:	4907      	ldr	r1, [pc, #28]	; (406a80 <std.isra.0+0x44>)
  406a62:	4a08      	ldr	r2, [pc, #32]	; (406a84 <std.isra.0+0x48>)
  406a64:	4b08      	ldr	r3, [pc, #32]	; (406a88 <std.isra.0+0x4c>)
  406a66:	6220      	str	r0, [r4, #32]
  406a68:	61e4      	str	r4, [r4, #28]
  406a6a:	6261      	str	r1, [r4, #36]	; 0x24
  406a6c:	62a2      	str	r2, [r4, #40]	; 0x28
  406a6e:	62e3      	str	r3, [r4, #44]	; 0x2c
  406a70:	f104 0058 	add.w	r0, r4, #88	; 0x58
  406a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406a78:	f000 bbc4 	b.w	407204 <__retarget_lock_init_recursive>
  406a7c:	004077e5 	.word	0x004077e5
  406a80:	00407809 	.word	0x00407809
  406a84:	00407845 	.word	0x00407845
  406a88:	00407865 	.word	0x00407865

00406a8c <__sinit>:
  406a8c:	b510      	push	{r4, lr}
  406a8e:	4604      	mov	r4, r0
  406a90:	4812      	ldr	r0, [pc, #72]	; (406adc <__sinit+0x50>)
  406a92:	f000 fbbb 	bl	40720c <__retarget_lock_acquire_recursive>
  406a96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  406a98:	b9d2      	cbnz	r2, 406ad0 <__sinit+0x44>
  406a9a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  406a9e:	4810      	ldr	r0, [pc, #64]	; (406ae0 <__sinit+0x54>)
  406aa0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  406aa4:	2103      	movs	r1, #3
  406aa6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  406aaa:	63e0      	str	r0, [r4, #60]	; 0x3c
  406aac:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  406ab0:	6860      	ldr	r0, [r4, #4]
  406ab2:	2104      	movs	r1, #4
  406ab4:	f7ff ffc2 	bl	406a3c <std.isra.0>
  406ab8:	2201      	movs	r2, #1
  406aba:	2109      	movs	r1, #9
  406abc:	68a0      	ldr	r0, [r4, #8]
  406abe:	f7ff ffbd 	bl	406a3c <std.isra.0>
  406ac2:	2202      	movs	r2, #2
  406ac4:	2112      	movs	r1, #18
  406ac6:	68e0      	ldr	r0, [r4, #12]
  406ac8:	f7ff ffb8 	bl	406a3c <std.isra.0>
  406acc:	2301      	movs	r3, #1
  406ace:	63a3      	str	r3, [r4, #56]	; 0x38
  406ad0:	4802      	ldr	r0, [pc, #8]	; (406adc <__sinit+0x50>)
  406ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406ad6:	f000 bb9b 	b.w	407210 <__retarget_lock_release_recursive>
  406ada:	bf00      	nop
  406adc:	2044a8d4 	.word	0x2044a8d4
  406ae0:	00406a31 	.word	0x00406a31

00406ae4 <__sfp_lock_acquire>:
  406ae4:	4801      	ldr	r0, [pc, #4]	; (406aec <__sfp_lock_acquire+0x8>)
  406ae6:	f000 bb91 	b.w	40720c <__retarget_lock_acquire_recursive>
  406aea:	bf00      	nop
  406aec:	2044a8e8 	.word	0x2044a8e8

00406af0 <__sfp_lock_release>:
  406af0:	4801      	ldr	r0, [pc, #4]	; (406af8 <__sfp_lock_release+0x8>)
  406af2:	f000 bb8d 	b.w	407210 <__retarget_lock_release_recursive>
  406af6:	bf00      	nop
  406af8:	2044a8e8 	.word	0x2044a8e8

00406afc <__libc_fini_array>:
  406afc:	b538      	push	{r3, r4, r5, lr}
  406afe:	4c0a      	ldr	r4, [pc, #40]	; (406b28 <__libc_fini_array+0x2c>)
  406b00:	4d0a      	ldr	r5, [pc, #40]	; (406b2c <__libc_fini_array+0x30>)
  406b02:	1b64      	subs	r4, r4, r5
  406b04:	10a4      	asrs	r4, r4, #2
  406b06:	d00a      	beq.n	406b1e <__libc_fini_array+0x22>
  406b08:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  406b0c:	3b01      	subs	r3, #1
  406b0e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  406b12:	3c01      	subs	r4, #1
  406b14:	f855 3904 	ldr.w	r3, [r5], #-4
  406b18:	4798      	blx	r3
  406b1a:	2c00      	cmp	r4, #0
  406b1c:	d1f9      	bne.n	406b12 <__libc_fini_array+0x16>
  406b1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406b22:	f002 b87b 	b.w	408c1c <_fini>
  406b26:	bf00      	nop
  406b28:	00408c2c 	.word	0x00408c2c
  406b2c:	00408c28 	.word	0x00408c28

00406b30 <__fputwc>:
  406b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406b34:	b082      	sub	sp, #8
  406b36:	4680      	mov	r8, r0
  406b38:	4689      	mov	r9, r1
  406b3a:	4614      	mov	r4, r2
  406b3c:	f000 fb54 	bl	4071e8 <__locale_mb_cur_max>
  406b40:	2801      	cmp	r0, #1
  406b42:	d036      	beq.n	406bb2 <__fputwc+0x82>
  406b44:	464a      	mov	r2, r9
  406b46:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  406b4a:	a901      	add	r1, sp, #4
  406b4c:	4640      	mov	r0, r8
  406b4e:	f000 ff5d 	bl	407a0c <_wcrtomb_r>
  406b52:	1c42      	adds	r2, r0, #1
  406b54:	4606      	mov	r6, r0
  406b56:	d025      	beq.n	406ba4 <__fputwc+0x74>
  406b58:	b3a8      	cbz	r0, 406bc6 <__fputwc+0x96>
  406b5a:	f89d e004 	ldrb.w	lr, [sp, #4]
  406b5e:	2500      	movs	r5, #0
  406b60:	f10d 0a04 	add.w	sl, sp, #4
  406b64:	e009      	b.n	406b7a <__fputwc+0x4a>
  406b66:	6823      	ldr	r3, [r4, #0]
  406b68:	1c5a      	adds	r2, r3, #1
  406b6a:	6022      	str	r2, [r4, #0]
  406b6c:	f883 e000 	strb.w	lr, [r3]
  406b70:	3501      	adds	r5, #1
  406b72:	42b5      	cmp	r5, r6
  406b74:	d227      	bcs.n	406bc6 <__fputwc+0x96>
  406b76:	f815 e00a 	ldrb.w	lr, [r5, sl]
  406b7a:	68a3      	ldr	r3, [r4, #8]
  406b7c:	3b01      	subs	r3, #1
  406b7e:	2b00      	cmp	r3, #0
  406b80:	60a3      	str	r3, [r4, #8]
  406b82:	daf0      	bge.n	406b66 <__fputwc+0x36>
  406b84:	69a7      	ldr	r7, [r4, #24]
  406b86:	42bb      	cmp	r3, r7
  406b88:	4671      	mov	r1, lr
  406b8a:	4622      	mov	r2, r4
  406b8c:	4640      	mov	r0, r8
  406b8e:	db02      	blt.n	406b96 <__fputwc+0x66>
  406b90:	f1be 0f0a 	cmp.w	lr, #10
  406b94:	d1e7      	bne.n	406b66 <__fputwc+0x36>
  406b96:	f000 fee1 	bl	40795c <__swbuf_r>
  406b9a:	1c43      	adds	r3, r0, #1
  406b9c:	d1e8      	bne.n	406b70 <__fputwc+0x40>
  406b9e:	b002      	add	sp, #8
  406ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406ba4:	89a3      	ldrh	r3, [r4, #12]
  406ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406baa:	81a3      	strh	r3, [r4, #12]
  406bac:	b002      	add	sp, #8
  406bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406bb2:	f109 33ff 	add.w	r3, r9, #4294967295
  406bb6:	2bfe      	cmp	r3, #254	; 0xfe
  406bb8:	d8c4      	bhi.n	406b44 <__fputwc+0x14>
  406bba:	fa5f fe89 	uxtb.w	lr, r9
  406bbe:	4606      	mov	r6, r0
  406bc0:	f88d e004 	strb.w	lr, [sp, #4]
  406bc4:	e7cb      	b.n	406b5e <__fputwc+0x2e>
  406bc6:	4648      	mov	r0, r9
  406bc8:	b002      	add	sp, #8
  406bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406bce:	bf00      	nop

00406bd0 <_fputwc_r>:
  406bd0:	b530      	push	{r4, r5, lr}
  406bd2:	6e53      	ldr	r3, [r2, #100]	; 0x64
  406bd4:	f013 0f01 	tst.w	r3, #1
  406bd8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  406bdc:	4614      	mov	r4, r2
  406bde:	b083      	sub	sp, #12
  406be0:	4605      	mov	r5, r0
  406be2:	b29a      	uxth	r2, r3
  406be4:	d101      	bne.n	406bea <_fputwc_r+0x1a>
  406be6:	0590      	lsls	r0, r2, #22
  406be8:	d51c      	bpl.n	406c24 <_fputwc_r+0x54>
  406bea:	0490      	lsls	r0, r2, #18
  406bec:	d406      	bmi.n	406bfc <_fputwc_r+0x2c>
  406bee:	6e62      	ldr	r2, [r4, #100]	; 0x64
  406bf0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  406bf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  406bf8:	81a3      	strh	r3, [r4, #12]
  406bfa:	6662      	str	r2, [r4, #100]	; 0x64
  406bfc:	4628      	mov	r0, r5
  406bfe:	4622      	mov	r2, r4
  406c00:	f7ff ff96 	bl	406b30 <__fputwc>
  406c04:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406c06:	07da      	lsls	r2, r3, #31
  406c08:	4605      	mov	r5, r0
  406c0a:	d402      	bmi.n	406c12 <_fputwc_r+0x42>
  406c0c:	89a3      	ldrh	r3, [r4, #12]
  406c0e:	059b      	lsls	r3, r3, #22
  406c10:	d502      	bpl.n	406c18 <_fputwc_r+0x48>
  406c12:	4628      	mov	r0, r5
  406c14:	b003      	add	sp, #12
  406c16:	bd30      	pop	{r4, r5, pc}
  406c18:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406c1a:	f000 faf9 	bl	407210 <__retarget_lock_release_recursive>
  406c1e:	4628      	mov	r0, r5
  406c20:	b003      	add	sp, #12
  406c22:	bd30      	pop	{r4, r5, pc}
  406c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406c26:	9101      	str	r1, [sp, #4]
  406c28:	f000 faf0 	bl	40720c <__retarget_lock_acquire_recursive>
  406c2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406c30:	9901      	ldr	r1, [sp, #4]
  406c32:	b29a      	uxth	r2, r3
  406c34:	e7d9      	b.n	406bea <_fputwc_r+0x1a>
  406c36:	bf00      	nop

00406c38 <_malloc_trim_r>:
  406c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406c3a:	4f24      	ldr	r7, [pc, #144]	; (406ccc <_malloc_trim_r+0x94>)
  406c3c:	460c      	mov	r4, r1
  406c3e:	4606      	mov	r6, r0
  406c40:	f7fe fed0 	bl	4059e4 <__malloc_lock>
  406c44:	68bb      	ldr	r3, [r7, #8]
  406c46:	685d      	ldr	r5, [r3, #4]
  406c48:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  406c4c:	310f      	adds	r1, #15
  406c4e:	f025 0503 	bic.w	r5, r5, #3
  406c52:	4429      	add	r1, r5
  406c54:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  406c58:	f021 010f 	bic.w	r1, r1, #15
  406c5c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  406c60:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  406c64:	db07      	blt.n	406c76 <_malloc_trim_r+0x3e>
  406c66:	2100      	movs	r1, #0
  406c68:	4630      	mov	r0, r6
  406c6a:	f7fe fec7 	bl	4059fc <_sbrk_r>
  406c6e:	68bb      	ldr	r3, [r7, #8]
  406c70:	442b      	add	r3, r5
  406c72:	4298      	cmp	r0, r3
  406c74:	d004      	beq.n	406c80 <_malloc_trim_r+0x48>
  406c76:	4630      	mov	r0, r6
  406c78:	f7fe feba 	bl	4059f0 <__malloc_unlock>
  406c7c:	2000      	movs	r0, #0
  406c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406c80:	4261      	negs	r1, r4
  406c82:	4630      	mov	r0, r6
  406c84:	f7fe feba 	bl	4059fc <_sbrk_r>
  406c88:	3001      	adds	r0, #1
  406c8a:	d00d      	beq.n	406ca8 <_malloc_trim_r+0x70>
  406c8c:	4b10      	ldr	r3, [pc, #64]	; (406cd0 <_malloc_trim_r+0x98>)
  406c8e:	68ba      	ldr	r2, [r7, #8]
  406c90:	6819      	ldr	r1, [r3, #0]
  406c92:	1b2d      	subs	r5, r5, r4
  406c94:	f045 0501 	orr.w	r5, r5, #1
  406c98:	4630      	mov	r0, r6
  406c9a:	1b09      	subs	r1, r1, r4
  406c9c:	6055      	str	r5, [r2, #4]
  406c9e:	6019      	str	r1, [r3, #0]
  406ca0:	f7fe fea6 	bl	4059f0 <__malloc_unlock>
  406ca4:	2001      	movs	r0, #1
  406ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406ca8:	2100      	movs	r1, #0
  406caa:	4630      	mov	r0, r6
  406cac:	f7fe fea6 	bl	4059fc <_sbrk_r>
  406cb0:	68ba      	ldr	r2, [r7, #8]
  406cb2:	1a83      	subs	r3, r0, r2
  406cb4:	2b0f      	cmp	r3, #15
  406cb6:	ddde      	ble.n	406c76 <_malloc_trim_r+0x3e>
  406cb8:	4c06      	ldr	r4, [pc, #24]	; (406cd4 <_malloc_trim_r+0x9c>)
  406cba:	4905      	ldr	r1, [pc, #20]	; (406cd0 <_malloc_trim_r+0x98>)
  406cbc:	6824      	ldr	r4, [r4, #0]
  406cbe:	f043 0301 	orr.w	r3, r3, #1
  406cc2:	1b00      	subs	r0, r0, r4
  406cc4:	6053      	str	r3, [r2, #4]
  406cc6:	6008      	str	r0, [r1, #0]
  406cc8:	e7d5      	b.n	406c76 <_malloc_trim_r+0x3e>
  406cca:	bf00      	nop
  406ccc:	20400488 	.word	0x20400488
  406cd0:	20445410 	.word	0x20445410
  406cd4:	20400890 	.word	0x20400890

00406cd8 <_free_r>:
  406cd8:	2900      	cmp	r1, #0
  406cda:	d044      	beq.n	406d66 <_free_r+0x8e>
  406cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406ce0:	460d      	mov	r5, r1
  406ce2:	4680      	mov	r8, r0
  406ce4:	f7fe fe7e 	bl	4059e4 <__malloc_lock>
  406ce8:	f855 7c04 	ldr.w	r7, [r5, #-4]
  406cec:	4969      	ldr	r1, [pc, #420]	; (406e94 <_free_r+0x1bc>)
  406cee:	f027 0301 	bic.w	r3, r7, #1
  406cf2:	f1a5 0408 	sub.w	r4, r5, #8
  406cf6:	18e2      	adds	r2, r4, r3
  406cf8:	688e      	ldr	r6, [r1, #8]
  406cfa:	6850      	ldr	r0, [r2, #4]
  406cfc:	42b2      	cmp	r2, r6
  406cfe:	f020 0003 	bic.w	r0, r0, #3
  406d02:	d05e      	beq.n	406dc2 <_free_r+0xea>
  406d04:	07fe      	lsls	r6, r7, #31
  406d06:	6050      	str	r0, [r2, #4]
  406d08:	d40b      	bmi.n	406d22 <_free_r+0x4a>
  406d0a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  406d0e:	1be4      	subs	r4, r4, r7
  406d10:	f101 0e08 	add.w	lr, r1, #8
  406d14:	68a5      	ldr	r5, [r4, #8]
  406d16:	4575      	cmp	r5, lr
  406d18:	443b      	add	r3, r7
  406d1a:	d06d      	beq.n	406df8 <_free_r+0x120>
  406d1c:	68e7      	ldr	r7, [r4, #12]
  406d1e:	60ef      	str	r7, [r5, #12]
  406d20:	60bd      	str	r5, [r7, #8]
  406d22:	1815      	adds	r5, r2, r0
  406d24:	686d      	ldr	r5, [r5, #4]
  406d26:	07ed      	lsls	r5, r5, #31
  406d28:	d53e      	bpl.n	406da8 <_free_r+0xd0>
  406d2a:	f043 0201 	orr.w	r2, r3, #1
  406d2e:	6062      	str	r2, [r4, #4]
  406d30:	50e3      	str	r3, [r4, r3]
  406d32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406d36:	d217      	bcs.n	406d68 <_free_r+0x90>
  406d38:	08db      	lsrs	r3, r3, #3
  406d3a:	1c58      	adds	r0, r3, #1
  406d3c:	109a      	asrs	r2, r3, #2
  406d3e:	684d      	ldr	r5, [r1, #4]
  406d40:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  406d44:	60a7      	str	r7, [r4, #8]
  406d46:	2301      	movs	r3, #1
  406d48:	4093      	lsls	r3, r2
  406d4a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  406d4e:	432b      	orrs	r3, r5
  406d50:	3a08      	subs	r2, #8
  406d52:	60e2      	str	r2, [r4, #12]
  406d54:	604b      	str	r3, [r1, #4]
  406d56:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  406d5a:	60fc      	str	r4, [r7, #12]
  406d5c:	4640      	mov	r0, r8
  406d5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406d62:	f7fe be45 	b.w	4059f0 <__malloc_unlock>
  406d66:	4770      	bx	lr
  406d68:	0a5a      	lsrs	r2, r3, #9
  406d6a:	2a04      	cmp	r2, #4
  406d6c:	d852      	bhi.n	406e14 <_free_r+0x13c>
  406d6e:	099a      	lsrs	r2, r3, #6
  406d70:	f102 0739 	add.w	r7, r2, #57	; 0x39
  406d74:	00ff      	lsls	r7, r7, #3
  406d76:	f102 0538 	add.w	r5, r2, #56	; 0x38
  406d7a:	19c8      	adds	r0, r1, r7
  406d7c:	59ca      	ldr	r2, [r1, r7]
  406d7e:	3808      	subs	r0, #8
  406d80:	4290      	cmp	r0, r2
  406d82:	d04f      	beq.n	406e24 <_free_r+0x14c>
  406d84:	6851      	ldr	r1, [r2, #4]
  406d86:	f021 0103 	bic.w	r1, r1, #3
  406d8a:	428b      	cmp	r3, r1
  406d8c:	d232      	bcs.n	406df4 <_free_r+0x11c>
  406d8e:	6892      	ldr	r2, [r2, #8]
  406d90:	4290      	cmp	r0, r2
  406d92:	d1f7      	bne.n	406d84 <_free_r+0xac>
  406d94:	68c3      	ldr	r3, [r0, #12]
  406d96:	60a0      	str	r0, [r4, #8]
  406d98:	60e3      	str	r3, [r4, #12]
  406d9a:	609c      	str	r4, [r3, #8]
  406d9c:	60c4      	str	r4, [r0, #12]
  406d9e:	4640      	mov	r0, r8
  406da0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406da4:	f7fe be24 	b.w	4059f0 <__malloc_unlock>
  406da8:	6895      	ldr	r5, [r2, #8]
  406daa:	4f3b      	ldr	r7, [pc, #236]	; (406e98 <_free_r+0x1c0>)
  406dac:	42bd      	cmp	r5, r7
  406dae:	4403      	add	r3, r0
  406db0:	d040      	beq.n	406e34 <_free_r+0x15c>
  406db2:	68d0      	ldr	r0, [r2, #12]
  406db4:	60e8      	str	r0, [r5, #12]
  406db6:	f043 0201 	orr.w	r2, r3, #1
  406dba:	6085      	str	r5, [r0, #8]
  406dbc:	6062      	str	r2, [r4, #4]
  406dbe:	50e3      	str	r3, [r4, r3]
  406dc0:	e7b7      	b.n	406d32 <_free_r+0x5a>
  406dc2:	07ff      	lsls	r7, r7, #31
  406dc4:	4403      	add	r3, r0
  406dc6:	d407      	bmi.n	406dd8 <_free_r+0x100>
  406dc8:	f855 2c08 	ldr.w	r2, [r5, #-8]
  406dcc:	1aa4      	subs	r4, r4, r2
  406dce:	4413      	add	r3, r2
  406dd0:	68a0      	ldr	r0, [r4, #8]
  406dd2:	68e2      	ldr	r2, [r4, #12]
  406dd4:	60c2      	str	r2, [r0, #12]
  406dd6:	6090      	str	r0, [r2, #8]
  406dd8:	4a30      	ldr	r2, [pc, #192]	; (406e9c <_free_r+0x1c4>)
  406dda:	6812      	ldr	r2, [r2, #0]
  406ddc:	f043 0001 	orr.w	r0, r3, #1
  406de0:	4293      	cmp	r3, r2
  406de2:	6060      	str	r0, [r4, #4]
  406de4:	608c      	str	r4, [r1, #8]
  406de6:	d3b9      	bcc.n	406d5c <_free_r+0x84>
  406de8:	4b2d      	ldr	r3, [pc, #180]	; (406ea0 <_free_r+0x1c8>)
  406dea:	4640      	mov	r0, r8
  406dec:	6819      	ldr	r1, [r3, #0]
  406dee:	f7ff ff23 	bl	406c38 <_malloc_trim_r>
  406df2:	e7b3      	b.n	406d5c <_free_r+0x84>
  406df4:	4610      	mov	r0, r2
  406df6:	e7cd      	b.n	406d94 <_free_r+0xbc>
  406df8:	1811      	adds	r1, r2, r0
  406dfa:	6849      	ldr	r1, [r1, #4]
  406dfc:	07c9      	lsls	r1, r1, #31
  406dfe:	d444      	bmi.n	406e8a <_free_r+0x1b2>
  406e00:	6891      	ldr	r1, [r2, #8]
  406e02:	68d2      	ldr	r2, [r2, #12]
  406e04:	60ca      	str	r2, [r1, #12]
  406e06:	4403      	add	r3, r0
  406e08:	f043 0001 	orr.w	r0, r3, #1
  406e0c:	6091      	str	r1, [r2, #8]
  406e0e:	6060      	str	r0, [r4, #4]
  406e10:	50e3      	str	r3, [r4, r3]
  406e12:	e7a3      	b.n	406d5c <_free_r+0x84>
  406e14:	2a14      	cmp	r2, #20
  406e16:	d816      	bhi.n	406e46 <_free_r+0x16e>
  406e18:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  406e1c:	00ff      	lsls	r7, r7, #3
  406e1e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  406e22:	e7aa      	b.n	406d7a <_free_r+0xa2>
  406e24:	10aa      	asrs	r2, r5, #2
  406e26:	2301      	movs	r3, #1
  406e28:	684d      	ldr	r5, [r1, #4]
  406e2a:	4093      	lsls	r3, r2
  406e2c:	432b      	orrs	r3, r5
  406e2e:	604b      	str	r3, [r1, #4]
  406e30:	4603      	mov	r3, r0
  406e32:	e7b0      	b.n	406d96 <_free_r+0xbe>
  406e34:	f043 0201 	orr.w	r2, r3, #1
  406e38:	614c      	str	r4, [r1, #20]
  406e3a:	610c      	str	r4, [r1, #16]
  406e3c:	60e5      	str	r5, [r4, #12]
  406e3e:	60a5      	str	r5, [r4, #8]
  406e40:	6062      	str	r2, [r4, #4]
  406e42:	50e3      	str	r3, [r4, r3]
  406e44:	e78a      	b.n	406d5c <_free_r+0x84>
  406e46:	2a54      	cmp	r2, #84	; 0x54
  406e48:	d806      	bhi.n	406e58 <_free_r+0x180>
  406e4a:	0b1a      	lsrs	r2, r3, #12
  406e4c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  406e50:	00ff      	lsls	r7, r7, #3
  406e52:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  406e56:	e790      	b.n	406d7a <_free_r+0xa2>
  406e58:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406e5c:	d806      	bhi.n	406e6c <_free_r+0x194>
  406e5e:	0bda      	lsrs	r2, r3, #15
  406e60:	f102 0778 	add.w	r7, r2, #120	; 0x78
  406e64:	00ff      	lsls	r7, r7, #3
  406e66:	f102 0577 	add.w	r5, r2, #119	; 0x77
  406e6a:	e786      	b.n	406d7a <_free_r+0xa2>
  406e6c:	f240 5054 	movw	r0, #1364	; 0x554
  406e70:	4282      	cmp	r2, r0
  406e72:	d806      	bhi.n	406e82 <_free_r+0x1aa>
  406e74:	0c9a      	lsrs	r2, r3, #18
  406e76:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  406e7a:	00ff      	lsls	r7, r7, #3
  406e7c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  406e80:	e77b      	b.n	406d7a <_free_r+0xa2>
  406e82:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  406e86:	257e      	movs	r5, #126	; 0x7e
  406e88:	e777      	b.n	406d7a <_free_r+0xa2>
  406e8a:	f043 0101 	orr.w	r1, r3, #1
  406e8e:	6061      	str	r1, [r4, #4]
  406e90:	6013      	str	r3, [r2, #0]
  406e92:	e763      	b.n	406d5c <_free_r+0x84>
  406e94:	20400488 	.word	0x20400488
  406e98:	20400490 	.word	0x20400490
  406e9c:	20400894 	.word	0x20400894
  406ea0:	20445440 	.word	0x20445440

00406ea4 <__sfvwrite_r>:
  406ea4:	6893      	ldr	r3, [r2, #8]
  406ea6:	2b00      	cmp	r3, #0
  406ea8:	d073      	beq.n	406f92 <__sfvwrite_r+0xee>
  406eaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406eae:	898b      	ldrh	r3, [r1, #12]
  406eb0:	b083      	sub	sp, #12
  406eb2:	460c      	mov	r4, r1
  406eb4:	0719      	lsls	r1, r3, #28
  406eb6:	9000      	str	r0, [sp, #0]
  406eb8:	4616      	mov	r6, r2
  406eba:	d526      	bpl.n	406f0a <__sfvwrite_r+0x66>
  406ebc:	6922      	ldr	r2, [r4, #16]
  406ebe:	b322      	cbz	r2, 406f0a <__sfvwrite_r+0x66>
  406ec0:	f013 0002 	ands.w	r0, r3, #2
  406ec4:	6835      	ldr	r5, [r6, #0]
  406ec6:	d02c      	beq.n	406f22 <__sfvwrite_r+0x7e>
  406ec8:	f04f 0900 	mov.w	r9, #0
  406ecc:	4fb0      	ldr	r7, [pc, #704]	; (407190 <__sfvwrite_r+0x2ec>)
  406ece:	46c8      	mov	r8, r9
  406ed0:	46b2      	mov	sl, r6
  406ed2:	45b8      	cmp	r8, r7
  406ed4:	4643      	mov	r3, r8
  406ed6:	464a      	mov	r2, r9
  406ed8:	bf28      	it	cs
  406eda:	463b      	movcs	r3, r7
  406edc:	9800      	ldr	r0, [sp, #0]
  406ede:	f1b8 0f00 	cmp.w	r8, #0
  406ee2:	d050      	beq.n	406f86 <__sfvwrite_r+0xe2>
  406ee4:	69e1      	ldr	r1, [r4, #28]
  406ee6:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406ee8:	47b0      	blx	r6
  406eea:	2800      	cmp	r0, #0
  406eec:	dd58      	ble.n	406fa0 <__sfvwrite_r+0xfc>
  406eee:	f8da 3008 	ldr.w	r3, [sl, #8]
  406ef2:	1a1b      	subs	r3, r3, r0
  406ef4:	4481      	add	r9, r0
  406ef6:	eba8 0800 	sub.w	r8, r8, r0
  406efa:	f8ca 3008 	str.w	r3, [sl, #8]
  406efe:	2b00      	cmp	r3, #0
  406f00:	d1e7      	bne.n	406ed2 <__sfvwrite_r+0x2e>
  406f02:	2000      	movs	r0, #0
  406f04:	b003      	add	sp, #12
  406f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406f0a:	4621      	mov	r1, r4
  406f0c:	9800      	ldr	r0, [sp, #0]
  406f0e:	f7ff fc51 	bl	4067b4 <__swsetup_r>
  406f12:	2800      	cmp	r0, #0
  406f14:	f040 8133 	bne.w	40717e <__sfvwrite_r+0x2da>
  406f18:	89a3      	ldrh	r3, [r4, #12]
  406f1a:	6835      	ldr	r5, [r6, #0]
  406f1c:	f013 0002 	ands.w	r0, r3, #2
  406f20:	d1d2      	bne.n	406ec8 <__sfvwrite_r+0x24>
  406f22:	f013 0901 	ands.w	r9, r3, #1
  406f26:	d145      	bne.n	406fb4 <__sfvwrite_r+0x110>
  406f28:	464f      	mov	r7, r9
  406f2a:	9601      	str	r6, [sp, #4]
  406f2c:	b337      	cbz	r7, 406f7c <__sfvwrite_r+0xd8>
  406f2e:	059a      	lsls	r2, r3, #22
  406f30:	f8d4 8008 	ldr.w	r8, [r4, #8]
  406f34:	f140 8083 	bpl.w	40703e <__sfvwrite_r+0x19a>
  406f38:	4547      	cmp	r7, r8
  406f3a:	46c3      	mov	fp, r8
  406f3c:	f0c0 80ab 	bcc.w	407096 <__sfvwrite_r+0x1f2>
  406f40:	f413 6f90 	tst.w	r3, #1152	; 0x480
  406f44:	f040 80ac 	bne.w	4070a0 <__sfvwrite_r+0x1fc>
  406f48:	6820      	ldr	r0, [r4, #0]
  406f4a:	46ba      	mov	sl, r7
  406f4c:	465a      	mov	r2, fp
  406f4e:	4649      	mov	r1, r9
  406f50:	f000 fa3e 	bl	4073d0 <memmove>
  406f54:	68a2      	ldr	r2, [r4, #8]
  406f56:	6823      	ldr	r3, [r4, #0]
  406f58:	eba2 0208 	sub.w	r2, r2, r8
  406f5c:	445b      	add	r3, fp
  406f5e:	60a2      	str	r2, [r4, #8]
  406f60:	6023      	str	r3, [r4, #0]
  406f62:	9a01      	ldr	r2, [sp, #4]
  406f64:	6893      	ldr	r3, [r2, #8]
  406f66:	eba3 030a 	sub.w	r3, r3, sl
  406f6a:	44d1      	add	r9, sl
  406f6c:	eba7 070a 	sub.w	r7, r7, sl
  406f70:	6093      	str	r3, [r2, #8]
  406f72:	2b00      	cmp	r3, #0
  406f74:	d0c5      	beq.n	406f02 <__sfvwrite_r+0x5e>
  406f76:	89a3      	ldrh	r3, [r4, #12]
  406f78:	2f00      	cmp	r7, #0
  406f7a:	d1d8      	bne.n	406f2e <__sfvwrite_r+0x8a>
  406f7c:	f8d5 9000 	ldr.w	r9, [r5]
  406f80:	686f      	ldr	r7, [r5, #4]
  406f82:	3508      	adds	r5, #8
  406f84:	e7d2      	b.n	406f2c <__sfvwrite_r+0x88>
  406f86:	f8d5 9000 	ldr.w	r9, [r5]
  406f8a:	f8d5 8004 	ldr.w	r8, [r5, #4]
  406f8e:	3508      	adds	r5, #8
  406f90:	e79f      	b.n	406ed2 <__sfvwrite_r+0x2e>
  406f92:	2000      	movs	r0, #0
  406f94:	4770      	bx	lr
  406f96:	4621      	mov	r1, r4
  406f98:	9800      	ldr	r0, [sp, #0]
  406f9a:	f7ff fd1f 	bl	4069dc <_fflush_r>
  406f9e:	b370      	cbz	r0, 406ffe <__sfvwrite_r+0x15a>
  406fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406fa8:	f04f 30ff 	mov.w	r0, #4294967295
  406fac:	81a3      	strh	r3, [r4, #12]
  406fae:	b003      	add	sp, #12
  406fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406fb4:	4681      	mov	r9, r0
  406fb6:	4633      	mov	r3, r6
  406fb8:	464e      	mov	r6, r9
  406fba:	46a8      	mov	r8, r5
  406fbc:	469a      	mov	sl, r3
  406fbe:	464d      	mov	r5, r9
  406fc0:	b34e      	cbz	r6, 407016 <__sfvwrite_r+0x172>
  406fc2:	b380      	cbz	r0, 407026 <__sfvwrite_r+0x182>
  406fc4:	6820      	ldr	r0, [r4, #0]
  406fc6:	6923      	ldr	r3, [r4, #16]
  406fc8:	6962      	ldr	r2, [r4, #20]
  406fca:	45b1      	cmp	r9, r6
  406fcc:	46cb      	mov	fp, r9
  406fce:	bf28      	it	cs
  406fd0:	46b3      	movcs	fp, r6
  406fd2:	4298      	cmp	r0, r3
  406fd4:	465f      	mov	r7, fp
  406fd6:	d904      	bls.n	406fe2 <__sfvwrite_r+0x13e>
  406fd8:	68a3      	ldr	r3, [r4, #8]
  406fda:	4413      	add	r3, r2
  406fdc:	459b      	cmp	fp, r3
  406fde:	f300 80a6 	bgt.w	40712e <__sfvwrite_r+0x28a>
  406fe2:	4593      	cmp	fp, r2
  406fe4:	db4b      	blt.n	40707e <__sfvwrite_r+0x1da>
  406fe6:	4613      	mov	r3, r2
  406fe8:	6a67      	ldr	r7, [r4, #36]	; 0x24
  406fea:	69e1      	ldr	r1, [r4, #28]
  406fec:	9800      	ldr	r0, [sp, #0]
  406fee:	462a      	mov	r2, r5
  406ff0:	47b8      	blx	r7
  406ff2:	1e07      	subs	r7, r0, #0
  406ff4:	ddd4      	ble.n	406fa0 <__sfvwrite_r+0xfc>
  406ff6:	ebb9 0907 	subs.w	r9, r9, r7
  406ffa:	d0cc      	beq.n	406f96 <__sfvwrite_r+0xf2>
  406ffc:	2001      	movs	r0, #1
  406ffe:	f8da 3008 	ldr.w	r3, [sl, #8]
  407002:	1bdb      	subs	r3, r3, r7
  407004:	443d      	add	r5, r7
  407006:	1bf6      	subs	r6, r6, r7
  407008:	f8ca 3008 	str.w	r3, [sl, #8]
  40700c:	2b00      	cmp	r3, #0
  40700e:	f43f af78 	beq.w	406f02 <__sfvwrite_r+0x5e>
  407012:	2e00      	cmp	r6, #0
  407014:	d1d5      	bne.n	406fc2 <__sfvwrite_r+0x11e>
  407016:	f108 0308 	add.w	r3, r8, #8
  40701a:	e913 0060 	ldmdb	r3, {r5, r6}
  40701e:	4698      	mov	r8, r3
  407020:	3308      	adds	r3, #8
  407022:	2e00      	cmp	r6, #0
  407024:	d0f9      	beq.n	40701a <__sfvwrite_r+0x176>
  407026:	4632      	mov	r2, r6
  407028:	210a      	movs	r1, #10
  40702a:	4628      	mov	r0, r5
  40702c:	f000 f980 	bl	407330 <memchr>
  407030:	2800      	cmp	r0, #0
  407032:	f000 80a1 	beq.w	407178 <__sfvwrite_r+0x2d4>
  407036:	3001      	adds	r0, #1
  407038:	eba0 0905 	sub.w	r9, r0, r5
  40703c:	e7c2      	b.n	406fc4 <__sfvwrite_r+0x120>
  40703e:	6820      	ldr	r0, [r4, #0]
  407040:	6923      	ldr	r3, [r4, #16]
  407042:	4298      	cmp	r0, r3
  407044:	d802      	bhi.n	40704c <__sfvwrite_r+0x1a8>
  407046:	6963      	ldr	r3, [r4, #20]
  407048:	429f      	cmp	r7, r3
  40704a:	d25d      	bcs.n	407108 <__sfvwrite_r+0x264>
  40704c:	45b8      	cmp	r8, r7
  40704e:	bf28      	it	cs
  407050:	46b8      	movcs	r8, r7
  407052:	4642      	mov	r2, r8
  407054:	4649      	mov	r1, r9
  407056:	f000 f9bb 	bl	4073d0 <memmove>
  40705a:	68a3      	ldr	r3, [r4, #8]
  40705c:	6822      	ldr	r2, [r4, #0]
  40705e:	eba3 0308 	sub.w	r3, r3, r8
  407062:	4442      	add	r2, r8
  407064:	60a3      	str	r3, [r4, #8]
  407066:	6022      	str	r2, [r4, #0]
  407068:	b10b      	cbz	r3, 40706e <__sfvwrite_r+0x1ca>
  40706a:	46c2      	mov	sl, r8
  40706c:	e779      	b.n	406f62 <__sfvwrite_r+0xbe>
  40706e:	4621      	mov	r1, r4
  407070:	9800      	ldr	r0, [sp, #0]
  407072:	f7ff fcb3 	bl	4069dc <_fflush_r>
  407076:	2800      	cmp	r0, #0
  407078:	d192      	bne.n	406fa0 <__sfvwrite_r+0xfc>
  40707a:	46c2      	mov	sl, r8
  40707c:	e771      	b.n	406f62 <__sfvwrite_r+0xbe>
  40707e:	465a      	mov	r2, fp
  407080:	4629      	mov	r1, r5
  407082:	f000 f9a5 	bl	4073d0 <memmove>
  407086:	68a2      	ldr	r2, [r4, #8]
  407088:	6823      	ldr	r3, [r4, #0]
  40708a:	eba2 020b 	sub.w	r2, r2, fp
  40708e:	445b      	add	r3, fp
  407090:	60a2      	str	r2, [r4, #8]
  407092:	6023      	str	r3, [r4, #0]
  407094:	e7af      	b.n	406ff6 <__sfvwrite_r+0x152>
  407096:	6820      	ldr	r0, [r4, #0]
  407098:	46b8      	mov	r8, r7
  40709a:	46ba      	mov	sl, r7
  40709c:	46bb      	mov	fp, r7
  40709e:	e755      	b.n	406f4c <__sfvwrite_r+0xa8>
  4070a0:	6962      	ldr	r2, [r4, #20]
  4070a2:	6820      	ldr	r0, [r4, #0]
  4070a4:	6921      	ldr	r1, [r4, #16]
  4070a6:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4070aa:	eba0 0a01 	sub.w	sl, r0, r1
  4070ae:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4070b2:	f10a 0001 	add.w	r0, sl, #1
  4070b6:	ea4f 0868 	mov.w	r8, r8, asr #1
  4070ba:	4438      	add	r0, r7
  4070bc:	4540      	cmp	r0, r8
  4070be:	4642      	mov	r2, r8
  4070c0:	bf84      	itt	hi
  4070c2:	4680      	movhi	r8, r0
  4070c4:	4642      	movhi	r2, r8
  4070c6:	055b      	lsls	r3, r3, #21
  4070c8:	d544      	bpl.n	407154 <__sfvwrite_r+0x2b0>
  4070ca:	4611      	mov	r1, r2
  4070cc:	9800      	ldr	r0, [sp, #0]
  4070ce:	f7fe f8f1 	bl	4052b4 <_malloc_r>
  4070d2:	4683      	mov	fp, r0
  4070d4:	2800      	cmp	r0, #0
  4070d6:	d055      	beq.n	407184 <__sfvwrite_r+0x2e0>
  4070d8:	4652      	mov	r2, sl
  4070da:	6921      	ldr	r1, [r4, #16]
  4070dc:	f7fe fb9a 	bl	405814 <memcpy>
  4070e0:	89a3      	ldrh	r3, [r4, #12]
  4070e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4070e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4070ea:	81a3      	strh	r3, [r4, #12]
  4070ec:	eb0b 000a 	add.w	r0, fp, sl
  4070f0:	eba8 030a 	sub.w	r3, r8, sl
  4070f4:	f8c4 b010 	str.w	fp, [r4, #16]
  4070f8:	f8c4 8014 	str.w	r8, [r4, #20]
  4070fc:	6020      	str	r0, [r4, #0]
  4070fe:	60a3      	str	r3, [r4, #8]
  407100:	46b8      	mov	r8, r7
  407102:	46ba      	mov	sl, r7
  407104:	46bb      	mov	fp, r7
  407106:	e721      	b.n	406f4c <__sfvwrite_r+0xa8>
  407108:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40710c:	42b9      	cmp	r1, r7
  40710e:	bf28      	it	cs
  407110:	4639      	movcs	r1, r7
  407112:	464a      	mov	r2, r9
  407114:	fb91 f1f3 	sdiv	r1, r1, r3
  407118:	9800      	ldr	r0, [sp, #0]
  40711a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40711c:	fb03 f301 	mul.w	r3, r3, r1
  407120:	69e1      	ldr	r1, [r4, #28]
  407122:	47b0      	blx	r6
  407124:	f1b0 0a00 	subs.w	sl, r0, #0
  407128:	f73f af1b 	bgt.w	406f62 <__sfvwrite_r+0xbe>
  40712c:	e738      	b.n	406fa0 <__sfvwrite_r+0xfc>
  40712e:	461a      	mov	r2, r3
  407130:	4629      	mov	r1, r5
  407132:	9301      	str	r3, [sp, #4]
  407134:	f000 f94c 	bl	4073d0 <memmove>
  407138:	6822      	ldr	r2, [r4, #0]
  40713a:	9b01      	ldr	r3, [sp, #4]
  40713c:	9800      	ldr	r0, [sp, #0]
  40713e:	441a      	add	r2, r3
  407140:	6022      	str	r2, [r4, #0]
  407142:	4621      	mov	r1, r4
  407144:	f7ff fc4a 	bl	4069dc <_fflush_r>
  407148:	9b01      	ldr	r3, [sp, #4]
  40714a:	2800      	cmp	r0, #0
  40714c:	f47f af28 	bne.w	406fa0 <__sfvwrite_r+0xfc>
  407150:	461f      	mov	r7, r3
  407152:	e750      	b.n	406ff6 <__sfvwrite_r+0x152>
  407154:	9800      	ldr	r0, [sp, #0]
  407156:	f000 f99f 	bl	407498 <_realloc_r>
  40715a:	4683      	mov	fp, r0
  40715c:	2800      	cmp	r0, #0
  40715e:	d1c5      	bne.n	4070ec <__sfvwrite_r+0x248>
  407160:	9d00      	ldr	r5, [sp, #0]
  407162:	6921      	ldr	r1, [r4, #16]
  407164:	4628      	mov	r0, r5
  407166:	f7ff fdb7 	bl	406cd8 <_free_r>
  40716a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40716e:	220c      	movs	r2, #12
  407170:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  407174:	602a      	str	r2, [r5, #0]
  407176:	e715      	b.n	406fa4 <__sfvwrite_r+0x100>
  407178:	f106 0901 	add.w	r9, r6, #1
  40717c:	e722      	b.n	406fc4 <__sfvwrite_r+0x120>
  40717e:	f04f 30ff 	mov.w	r0, #4294967295
  407182:	e6bf      	b.n	406f04 <__sfvwrite_r+0x60>
  407184:	9a00      	ldr	r2, [sp, #0]
  407186:	230c      	movs	r3, #12
  407188:	6013      	str	r3, [r2, #0]
  40718a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40718e:	e709      	b.n	406fa4 <__sfvwrite_r+0x100>
  407190:	7ffffc00 	.word	0x7ffffc00

00407194 <_fwalk_reent>:
  407194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407198:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40719c:	d01f      	beq.n	4071de <_fwalk_reent+0x4a>
  40719e:	4688      	mov	r8, r1
  4071a0:	4606      	mov	r6, r0
  4071a2:	f04f 0900 	mov.w	r9, #0
  4071a6:	687d      	ldr	r5, [r7, #4]
  4071a8:	68bc      	ldr	r4, [r7, #8]
  4071aa:	3d01      	subs	r5, #1
  4071ac:	d411      	bmi.n	4071d2 <_fwalk_reent+0x3e>
  4071ae:	89a3      	ldrh	r3, [r4, #12]
  4071b0:	2b01      	cmp	r3, #1
  4071b2:	f105 35ff 	add.w	r5, r5, #4294967295
  4071b6:	d908      	bls.n	4071ca <_fwalk_reent+0x36>
  4071b8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4071bc:	3301      	adds	r3, #1
  4071be:	4621      	mov	r1, r4
  4071c0:	4630      	mov	r0, r6
  4071c2:	d002      	beq.n	4071ca <_fwalk_reent+0x36>
  4071c4:	47c0      	blx	r8
  4071c6:	ea49 0900 	orr.w	r9, r9, r0
  4071ca:	1c6b      	adds	r3, r5, #1
  4071cc:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4071d0:	d1ed      	bne.n	4071ae <_fwalk_reent+0x1a>
  4071d2:	683f      	ldr	r7, [r7, #0]
  4071d4:	2f00      	cmp	r7, #0
  4071d6:	d1e6      	bne.n	4071a6 <_fwalk_reent+0x12>
  4071d8:	4648      	mov	r0, r9
  4071da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4071de:	46b9      	mov	r9, r7
  4071e0:	4648      	mov	r0, r9
  4071e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4071e6:	bf00      	nop

004071e8 <__locale_mb_cur_max>:
  4071e8:	4b04      	ldr	r3, [pc, #16]	; (4071fc <__locale_mb_cur_max+0x14>)
  4071ea:	4a05      	ldr	r2, [pc, #20]	; (407200 <__locale_mb_cur_max+0x18>)
  4071ec:	681b      	ldr	r3, [r3, #0]
  4071ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4071f0:	2b00      	cmp	r3, #0
  4071f2:	bf08      	it	eq
  4071f4:	4613      	moveq	r3, r2
  4071f6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4071fa:	4770      	bx	lr
  4071fc:	20400058 	.word	0x20400058
  407200:	2040089c 	.word	0x2040089c

00407204 <__retarget_lock_init_recursive>:
  407204:	4770      	bx	lr
  407206:	bf00      	nop

00407208 <__retarget_lock_close_recursive>:
  407208:	4770      	bx	lr
  40720a:	bf00      	nop

0040720c <__retarget_lock_acquire_recursive>:
  40720c:	4770      	bx	lr
  40720e:	bf00      	nop

00407210 <__retarget_lock_release_recursive>:
  407210:	4770      	bx	lr
  407212:	bf00      	nop

00407214 <__swhatbuf_r>:
  407214:	b570      	push	{r4, r5, r6, lr}
  407216:	460c      	mov	r4, r1
  407218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40721c:	2900      	cmp	r1, #0
  40721e:	b090      	sub	sp, #64	; 0x40
  407220:	4615      	mov	r5, r2
  407222:	461e      	mov	r6, r3
  407224:	db14      	blt.n	407250 <__swhatbuf_r+0x3c>
  407226:	aa01      	add	r2, sp, #4
  407228:	f000 fd14 	bl	407c54 <_fstat_r>
  40722c:	2800      	cmp	r0, #0
  40722e:	db0f      	blt.n	407250 <__swhatbuf_r+0x3c>
  407230:	9a02      	ldr	r2, [sp, #8]
  407232:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  407236:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40723a:	fab2 f282 	clz	r2, r2
  40723e:	0952      	lsrs	r2, r2, #5
  407240:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407244:	f44f 6000 	mov.w	r0, #2048	; 0x800
  407248:	6032      	str	r2, [r6, #0]
  40724a:	602b      	str	r3, [r5, #0]
  40724c:	b010      	add	sp, #64	; 0x40
  40724e:	bd70      	pop	{r4, r5, r6, pc}
  407250:	89a2      	ldrh	r2, [r4, #12]
  407252:	2300      	movs	r3, #0
  407254:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  407258:	6033      	str	r3, [r6, #0]
  40725a:	d004      	beq.n	407266 <__swhatbuf_r+0x52>
  40725c:	2240      	movs	r2, #64	; 0x40
  40725e:	4618      	mov	r0, r3
  407260:	602a      	str	r2, [r5, #0]
  407262:	b010      	add	sp, #64	; 0x40
  407264:	bd70      	pop	{r4, r5, r6, pc}
  407266:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40726a:	602b      	str	r3, [r5, #0]
  40726c:	b010      	add	sp, #64	; 0x40
  40726e:	bd70      	pop	{r4, r5, r6, pc}

00407270 <__smakebuf_r>:
  407270:	898a      	ldrh	r2, [r1, #12]
  407272:	0792      	lsls	r2, r2, #30
  407274:	460b      	mov	r3, r1
  407276:	d506      	bpl.n	407286 <__smakebuf_r+0x16>
  407278:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40727c:	2101      	movs	r1, #1
  40727e:	601a      	str	r2, [r3, #0]
  407280:	611a      	str	r2, [r3, #16]
  407282:	6159      	str	r1, [r3, #20]
  407284:	4770      	bx	lr
  407286:	b5f0      	push	{r4, r5, r6, r7, lr}
  407288:	b083      	sub	sp, #12
  40728a:	ab01      	add	r3, sp, #4
  40728c:	466a      	mov	r2, sp
  40728e:	460c      	mov	r4, r1
  407290:	4606      	mov	r6, r0
  407292:	f7ff ffbf 	bl	407214 <__swhatbuf_r>
  407296:	9900      	ldr	r1, [sp, #0]
  407298:	4605      	mov	r5, r0
  40729a:	4630      	mov	r0, r6
  40729c:	f7fe f80a 	bl	4052b4 <_malloc_r>
  4072a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4072a4:	b1d8      	cbz	r0, 4072de <__smakebuf_r+0x6e>
  4072a6:	9a01      	ldr	r2, [sp, #4]
  4072a8:	4f15      	ldr	r7, [pc, #84]	; (407300 <__smakebuf_r+0x90>)
  4072aa:	9900      	ldr	r1, [sp, #0]
  4072ac:	63f7      	str	r7, [r6, #60]	; 0x3c
  4072ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4072b2:	81a3      	strh	r3, [r4, #12]
  4072b4:	6020      	str	r0, [r4, #0]
  4072b6:	6120      	str	r0, [r4, #16]
  4072b8:	6161      	str	r1, [r4, #20]
  4072ba:	b91a      	cbnz	r2, 4072c4 <__smakebuf_r+0x54>
  4072bc:	432b      	orrs	r3, r5
  4072be:	81a3      	strh	r3, [r4, #12]
  4072c0:	b003      	add	sp, #12
  4072c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4072c4:	4630      	mov	r0, r6
  4072c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4072ca:	f000 fcd7 	bl	407c7c <_isatty_r>
  4072ce:	b1a0      	cbz	r0, 4072fa <__smakebuf_r+0x8a>
  4072d0:	89a3      	ldrh	r3, [r4, #12]
  4072d2:	f023 0303 	bic.w	r3, r3, #3
  4072d6:	f043 0301 	orr.w	r3, r3, #1
  4072da:	b21b      	sxth	r3, r3
  4072dc:	e7ee      	b.n	4072bc <__smakebuf_r+0x4c>
  4072de:	059a      	lsls	r2, r3, #22
  4072e0:	d4ee      	bmi.n	4072c0 <__smakebuf_r+0x50>
  4072e2:	f023 0303 	bic.w	r3, r3, #3
  4072e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4072ea:	f043 0302 	orr.w	r3, r3, #2
  4072ee:	2101      	movs	r1, #1
  4072f0:	81a3      	strh	r3, [r4, #12]
  4072f2:	6022      	str	r2, [r4, #0]
  4072f4:	6122      	str	r2, [r4, #16]
  4072f6:	6161      	str	r1, [r4, #20]
  4072f8:	e7e2      	b.n	4072c0 <__smakebuf_r+0x50>
  4072fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4072fe:	e7dd      	b.n	4072bc <__smakebuf_r+0x4c>
  407300:	00406a31 	.word	0x00406a31

00407304 <__ascii_mbtowc>:
  407304:	b082      	sub	sp, #8
  407306:	b149      	cbz	r1, 40731c <__ascii_mbtowc+0x18>
  407308:	b15a      	cbz	r2, 407322 <__ascii_mbtowc+0x1e>
  40730a:	b16b      	cbz	r3, 407328 <__ascii_mbtowc+0x24>
  40730c:	7813      	ldrb	r3, [r2, #0]
  40730e:	600b      	str	r3, [r1, #0]
  407310:	7812      	ldrb	r2, [r2, #0]
  407312:	1c10      	adds	r0, r2, #0
  407314:	bf18      	it	ne
  407316:	2001      	movne	r0, #1
  407318:	b002      	add	sp, #8
  40731a:	4770      	bx	lr
  40731c:	a901      	add	r1, sp, #4
  40731e:	2a00      	cmp	r2, #0
  407320:	d1f3      	bne.n	40730a <__ascii_mbtowc+0x6>
  407322:	4610      	mov	r0, r2
  407324:	b002      	add	sp, #8
  407326:	4770      	bx	lr
  407328:	f06f 0001 	mvn.w	r0, #1
  40732c:	e7f4      	b.n	407318 <__ascii_mbtowc+0x14>
  40732e:	bf00      	nop

00407330 <memchr>:
  407330:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  407334:	2a10      	cmp	r2, #16
  407336:	db2b      	blt.n	407390 <memchr+0x60>
  407338:	f010 0f07 	tst.w	r0, #7
  40733c:	d008      	beq.n	407350 <memchr+0x20>
  40733e:	f810 3b01 	ldrb.w	r3, [r0], #1
  407342:	3a01      	subs	r2, #1
  407344:	428b      	cmp	r3, r1
  407346:	d02d      	beq.n	4073a4 <memchr+0x74>
  407348:	f010 0f07 	tst.w	r0, #7
  40734c:	b342      	cbz	r2, 4073a0 <memchr+0x70>
  40734e:	d1f6      	bne.n	40733e <memchr+0xe>
  407350:	b4f0      	push	{r4, r5, r6, r7}
  407352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  407356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40735a:	f022 0407 	bic.w	r4, r2, #7
  40735e:	f07f 0700 	mvns.w	r7, #0
  407362:	2300      	movs	r3, #0
  407364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  407368:	3c08      	subs	r4, #8
  40736a:	ea85 0501 	eor.w	r5, r5, r1
  40736e:	ea86 0601 	eor.w	r6, r6, r1
  407372:	fa85 f547 	uadd8	r5, r5, r7
  407376:	faa3 f587 	sel	r5, r3, r7
  40737a:	fa86 f647 	uadd8	r6, r6, r7
  40737e:	faa5 f687 	sel	r6, r5, r7
  407382:	b98e      	cbnz	r6, 4073a8 <memchr+0x78>
  407384:	d1ee      	bne.n	407364 <memchr+0x34>
  407386:	bcf0      	pop	{r4, r5, r6, r7}
  407388:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40738c:	f002 0207 	and.w	r2, r2, #7
  407390:	b132      	cbz	r2, 4073a0 <memchr+0x70>
  407392:	f810 3b01 	ldrb.w	r3, [r0], #1
  407396:	3a01      	subs	r2, #1
  407398:	ea83 0301 	eor.w	r3, r3, r1
  40739c:	b113      	cbz	r3, 4073a4 <memchr+0x74>
  40739e:	d1f8      	bne.n	407392 <memchr+0x62>
  4073a0:	2000      	movs	r0, #0
  4073a2:	4770      	bx	lr
  4073a4:	3801      	subs	r0, #1
  4073a6:	4770      	bx	lr
  4073a8:	2d00      	cmp	r5, #0
  4073aa:	bf06      	itte	eq
  4073ac:	4635      	moveq	r5, r6
  4073ae:	3803      	subeq	r0, #3
  4073b0:	3807      	subne	r0, #7
  4073b2:	f015 0f01 	tst.w	r5, #1
  4073b6:	d107      	bne.n	4073c8 <memchr+0x98>
  4073b8:	3001      	adds	r0, #1
  4073ba:	f415 7f80 	tst.w	r5, #256	; 0x100
  4073be:	bf02      	ittt	eq
  4073c0:	3001      	addeq	r0, #1
  4073c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4073c6:	3001      	addeq	r0, #1
  4073c8:	bcf0      	pop	{r4, r5, r6, r7}
  4073ca:	3801      	subs	r0, #1
  4073cc:	4770      	bx	lr
  4073ce:	bf00      	nop

004073d0 <memmove>:
  4073d0:	4288      	cmp	r0, r1
  4073d2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4073d4:	d90d      	bls.n	4073f2 <memmove+0x22>
  4073d6:	188b      	adds	r3, r1, r2
  4073d8:	4298      	cmp	r0, r3
  4073da:	d20a      	bcs.n	4073f2 <memmove+0x22>
  4073dc:	1884      	adds	r4, r0, r2
  4073de:	2a00      	cmp	r2, #0
  4073e0:	d051      	beq.n	407486 <memmove+0xb6>
  4073e2:	4622      	mov	r2, r4
  4073e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4073e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4073ec:	4299      	cmp	r1, r3
  4073ee:	d1f9      	bne.n	4073e4 <memmove+0x14>
  4073f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4073f2:	2a0f      	cmp	r2, #15
  4073f4:	d948      	bls.n	407488 <memmove+0xb8>
  4073f6:	ea41 0300 	orr.w	r3, r1, r0
  4073fa:	079b      	lsls	r3, r3, #30
  4073fc:	d146      	bne.n	40748c <memmove+0xbc>
  4073fe:	f100 0410 	add.w	r4, r0, #16
  407402:	f101 0310 	add.w	r3, r1, #16
  407406:	4615      	mov	r5, r2
  407408:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40740c:	f844 6c10 	str.w	r6, [r4, #-16]
  407410:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  407414:	f844 6c0c 	str.w	r6, [r4, #-12]
  407418:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40741c:	f844 6c08 	str.w	r6, [r4, #-8]
  407420:	3d10      	subs	r5, #16
  407422:	f853 6c04 	ldr.w	r6, [r3, #-4]
  407426:	f844 6c04 	str.w	r6, [r4, #-4]
  40742a:	2d0f      	cmp	r5, #15
  40742c:	f103 0310 	add.w	r3, r3, #16
  407430:	f104 0410 	add.w	r4, r4, #16
  407434:	d8e8      	bhi.n	407408 <memmove+0x38>
  407436:	f1a2 0310 	sub.w	r3, r2, #16
  40743a:	f023 030f 	bic.w	r3, r3, #15
  40743e:	f002 0e0f 	and.w	lr, r2, #15
  407442:	3310      	adds	r3, #16
  407444:	f1be 0f03 	cmp.w	lr, #3
  407448:	4419      	add	r1, r3
  40744a:	4403      	add	r3, r0
  40744c:	d921      	bls.n	407492 <memmove+0xc2>
  40744e:	1f1e      	subs	r6, r3, #4
  407450:	460d      	mov	r5, r1
  407452:	4674      	mov	r4, lr
  407454:	3c04      	subs	r4, #4
  407456:	f855 7b04 	ldr.w	r7, [r5], #4
  40745a:	f846 7f04 	str.w	r7, [r6, #4]!
  40745e:	2c03      	cmp	r4, #3
  407460:	d8f8      	bhi.n	407454 <memmove+0x84>
  407462:	f1ae 0404 	sub.w	r4, lr, #4
  407466:	f024 0403 	bic.w	r4, r4, #3
  40746a:	3404      	adds	r4, #4
  40746c:	4421      	add	r1, r4
  40746e:	4423      	add	r3, r4
  407470:	f002 0203 	and.w	r2, r2, #3
  407474:	b162      	cbz	r2, 407490 <memmove+0xc0>
  407476:	3b01      	subs	r3, #1
  407478:	440a      	add	r2, r1
  40747a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40747e:	f803 4f01 	strb.w	r4, [r3, #1]!
  407482:	428a      	cmp	r2, r1
  407484:	d1f9      	bne.n	40747a <memmove+0xaa>
  407486:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407488:	4603      	mov	r3, r0
  40748a:	e7f3      	b.n	407474 <memmove+0xa4>
  40748c:	4603      	mov	r3, r0
  40748e:	e7f2      	b.n	407476 <memmove+0xa6>
  407490:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407492:	4672      	mov	r2, lr
  407494:	e7ee      	b.n	407474 <memmove+0xa4>
  407496:	bf00      	nop

00407498 <_realloc_r>:
  407498:	2900      	cmp	r1, #0
  40749a:	f000 8095 	beq.w	4075c8 <_realloc_r+0x130>
  40749e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4074a2:	460d      	mov	r5, r1
  4074a4:	4616      	mov	r6, r2
  4074a6:	b083      	sub	sp, #12
  4074a8:	4680      	mov	r8, r0
  4074aa:	f106 070b 	add.w	r7, r6, #11
  4074ae:	f7fe fa99 	bl	4059e4 <__malloc_lock>
  4074b2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4074b6:	2f16      	cmp	r7, #22
  4074b8:	f02e 0403 	bic.w	r4, lr, #3
  4074bc:	f1a5 0908 	sub.w	r9, r5, #8
  4074c0:	d83c      	bhi.n	40753c <_realloc_r+0xa4>
  4074c2:	2210      	movs	r2, #16
  4074c4:	4617      	mov	r7, r2
  4074c6:	42be      	cmp	r6, r7
  4074c8:	d83d      	bhi.n	407546 <_realloc_r+0xae>
  4074ca:	4294      	cmp	r4, r2
  4074cc:	da43      	bge.n	407556 <_realloc_r+0xbe>
  4074ce:	4bc4      	ldr	r3, [pc, #784]	; (4077e0 <_realloc_r+0x348>)
  4074d0:	6899      	ldr	r1, [r3, #8]
  4074d2:	eb09 0004 	add.w	r0, r9, r4
  4074d6:	4288      	cmp	r0, r1
  4074d8:	f000 80b4 	beq.w	407644 <_realloc_r+0x1ac>
  4074dc:	6843      	ldr	r3, [r0, #4]
  4074de:	f023 0101 	bic.w	r1, r3, #1
  4074e2:	4401      	add	r1, r0
  4074e4:	6849      	ldr	r1, [r1, #4]
  4074e6:	07c9      	lsls	r1, r1, #31
  4074e8:	d54c      	bpl.n	407584 <_realloc_r+0xec>
  4074ea:	f01e 0f01 	tst.w	lr, #1
  4074ee:	f000 809b 	beq.w	407628 <_realloc_r+0x190>
  4074f2:	4631      	mov	r1, r6
  4074f4:	4640      	mov	r0, r8
  4074f6:	f7fd fedd 	bl	4052b4 <_malloc_r>
  4074fa:	4606      	mov	r6, r0
  4074fc:	2800      	cmp	r0, #0
  4074fe:	d03a      	beq.n	407576 <_realloc_r+0xde>
  407500:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407504:	f023 0301 	bic.w	r3, r3, #1
  407508:	444b      	add	r3, r9
  40750a:	f1a0 0208 	sub.w	r2, r0, #8
  40750e:	429a      	cmp	r2, r3
  407510:	f000 8121 	beq.w	407756 <_realloc_r+0x2be>
  407514:	1f22      	subs	r2, r4, #4
  407516:	2a24      	cmp	r2, #36	; 0x24
  407518:	f200 8107 	bhi.w	40772a <_realloc_r+0x292>
  40751c:	2a13      	cmp	r2, #19
  40751e:	f200 80db 	bhi.w	4076d8 <_realloc_r+0x240>
  407522:	4603      	mov	r3, r0
  407524:	462a      	mov	r2, r5
  407526:	6811      	ldr	r1, [r2, #0]
  407528:	6019      	str	r1, [r3, #0]
  40752a:	6851      	ldr	r1, [r2, #4]
  40752c:	6059      	str	r1, [r3, #4]
  40752e:	6892      	ldr	r2, [r2, #8]
  407530:	609a      	str	r2, [r3, #8]
  407532:	4629      	mov	r1, r5
  407534:	4640      	mov	r0, r8
  407536:	f7ff fbcf 	bl	406cd8 <_free_r>
  40753a:	e01c      	b.n	407576 <_realloc_r+0xde>
  40753c:	f027 0707 	bic.w	r7, r7, #7
  407540:	2f00      	cmp	r7, #0
  407542:	463a      	mov	r2, r7
  407544:	dabf      	bge.n	4074c6 <_realloc_r+0x2e>
  407546:	2600      	movs	r6, #0
  407548:	230c      	movs	r3, #12
  40754a:	4630      	mov	r0, r6
  40754c:	f8c8 3000 	str.w	r3, [r8]
  407550:	b003      	add	sp, #12
  407552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407556:	462e      	mov	r6, r5
  407558:	1be3      	subs	r3, r4, r7
  40755a:	2b0f      	cmp	r3, #15
  40755c:	d81e      	bhi.n	40759c <_realloc_r+0x104>
  40755e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  407562:	f003 0301 	and.w	r3, r3, #1
  407566:	4323      	orrs	r3, r4
  407568:	444c      	add	r4, r9
  40756a:	f8c9 3004 	str.w	r3, [r9, #4]
  40756e:	6863      	ldr	r3, [r4, #4]
  407570:	f043 0301 	orr.w	r3, r3, #1
  407574:	6063      	str	r3, [r4, #4]
  407576:	4640      	mov	r0, r8
  407578:	f7fe fa3a 	bl	4059f0 <__malloc_unlock>
  40757c:	4630      	mov	r0, r6
  40757e:	b003      	add	sp, #12
  407580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407584:	f023 0303 	bic.w	r3, r3, #3
  407588:	18e1      	adds	r1, r4, r3
  40758a:	4291      	cmp	r1, r2
  40758c:	db1f      	blt.n	4075ce <_realloc_r+0x136>
  40758e:	68c3      	ldr	r3, [r0, #12]
  407590:	6882      	ldr	r2, [r0, #8]
  407592:	462e      	mov	r6, r5
  407594:	60d3      	str	r3, [r2, #12]
  407596:	460c      	mov	r4, r1
  407598:	609a      	str	r2, [r3, #8]
  40759a:	e7dd      	b.n	407558 <_realloc_r+0xc0>
  40759c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4075a0:	eb09 0107 	add.w	r1, r9, r7
  4075a4:	f002 0201 	and.w	r2, r2, #1
  4075a8:	444c      	add	r4, r9
  4075aa:	f043 0301 	orr.w	r3, r3, #1
  4075ae:	4317      	orrs	r7, r2
  4075b0:	f8c9 7004 	str.w	r7, [r9, #4]
  4075b4:	604b      	str	r3, [r1, #4]
  4075b6:	6863      	ldr	r3, [r4, #4]
  4075b8:	f043 0301 	orr.w	r3, r3, #1
  4075bc:	3108      	adds	r1, #8
  4075be:	6063      	str	r3, [r4, #4]
  4075c0:	4640      	mov	r0, r8
  4075c2:	f7ff fb89 	bl	406cd8 <_free_r>
  4075c6:	e7d6      	b.n	407576 <_realloc_r+0xde>
  4075c8:	4611      	mov	r1, r2
  4075ca:	f7fd be73 	b.w	4052b4 <_malloc_r>
  4075ce:	f01e 0f01 	tst.w	lr, #1
  4075d2:	d18e      	bne.n	4074f2 <_realloc_r+0x5a>
  4075d4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4075d8:	eba9 0a01 	sub.w	sl, r9, r1
  4075dc:	f8da 1004 	ldr.w	r1, [sl, #4]
  4075e0:	f021 0103 	bic.w	r1, r1, #3
  4075e4:	440b      	add	r3, r1
  4075e6:	4423      	add	r3, r4
  4075e8:	4293      	cmp	r3, r2
  4075ea:	db25      	blt.n	407638 <_realloc_r+0x1a0>
  4075ec:	68c2      	ldr	r2, [r0, #12]
  4075ee:	6881      	ldr	r1, [r0, #8]
  4075f0:	4656      	mov	r6, sl
  4075f2:	60ca      	str	r2, [r1, #12]
  4075f4:	6091      	str	r1, [r2, #8]
  4075f6:	f8da 100c 	ldr.w	r1, [sl, #12]
  4075fa:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4075fe:	1f22      	subs	r2, r4, #4
  407600:	2a24      	cmp	r2, #36	; 0x24
  407602:	60c1      	str	r1, [r0, #12]
  407604:	6088      	str	r0, [r1, #8]
  407606:	f200 8094 	bhi.w	407732 <_realloc_r+0x29a>
  40760a:	2a13      	cmp	r2, #19
  40760c:	d96f      	bls.n	4076ee <_realloc_r+0x256>
  40760e:	6829      	ldr	r1, [r5, #0]
  407610:	f8ca 1008 	str.w	r1, [sl, #8]
  407614:	6869      	ldr	r1, [r5, #4]
  407616:	f8ca 100c 	str.w	r1, [sl, #12]
  40761a:	2a1b      	cmp	r2, #27
  40761c:	f200 80a2 	bhi.w	407764 <_realloc_r+0x2cc>
  407620:	3508      	adds	r5, #8
  407622:	f10a 0210 	add.w	r2, sl, #16
  407626:	e063      	b.n	4076f0 <_realloc_r+0x258>
  407628:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40762c:	eba9 0a03 	sub.w	sl, r9, r3
  407630:	f8da 1004 	ldr.w	r1, [sl, #4]
  407634:	f021 0103 	bic.w	r1, r1, #3
  407638:	1863      	adds	r3, r4, r1
  40763a:	4293      	cmp	r3, r2
  40763c:	f6ff af59 	blt.w	4074f2 <_realloc_r+0x5a>
  407640:	4656      	mov	r6, sl
  407642:	e7d8      	b.n	4075f6 <_realloc_r+0x15e>
  407644:	6841      	ldr	r1, [r0, #4]
  407646:	f021 0b03 	bic.w	fp, r1, #3
  40764a:	44a3      	add	fp, r4
  40764c:	f107 0010 	add.w	r0, r7, #16
  407650:	4583      	cmp	fp, r0
  407652:	da56      	bge.n	407702 <_realloc_r+0x26a>
  407654:	f01e 0f01 	tst.w	lr, #1
  407658:	f47f af4b 	bne.w	4074f2 <_realloc_r+0x5a>
  40765c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407660:	eba9 0a01 	sub.w	sl, r9, r1
  407664:	f8da 1004 	ldr.w	r1, [sl, #4]
  407668:	f021 0103 	bic.w	r1, r1, #3
  40766c:	448b      	add	fp, r1
  40766e:	4558      	cmp	r0, fp
  407670:	dce2      	bgt.n	407638 <_realloc_r+0x1a0>
  407672:	4656      	mov	r6, sl
  407674:	f8da 100c 	ldr.w	r1, [sl, #12]
  407678:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40767c:	1f22      	subs	r2, r4, #4
  40767e:	2a24      	cmp	r2, #36	; 0x24
  407680:	60c1      	str	r1, [r0, #12]
  407682:	6088      	str	r0, [r1, #8]
  407684:	f200 808f 	bhi.w	4077a6 <_realloc_r+0x30e>
  407688:	2a13      	cmp	r2, #19
  40768a:	f240 808a 	bls.w	4077a2 <_realloc_r+0x30a>
  40768e:	6829      	ldr	r1, [r5, #0]
  407690:	f8ca 1008 	str.w	r1, [sl, #8]
  407694:	6869      	ldr	r1, [r5, #4]
  407696:	f8ca 100c 	str.w	r1, [sl, #12]
  40769a:	2a1b      	cmp	r2, #27
  40769c:	f200 808a 	bhi.w	4077b4 <_realloc_r+0x31c>
  4076a0:	3508      	adds	r5, #8
  4076a2:	f10a 0210 	add.w	r2, sl, #16
  4076a6:	6829      	ldr	r1, [r5, #0]
  4076a8:	6011      	str	r1, [r2, #0]
  4076aa:	6869      	ldr	r1, [r5, #4]
  4076ac:	6051      	str	r1, [r2, #4]
  4076ae:	68a9      	ldr	r1, [r5, #8]
  4076b0:	6091      	str	r1, [r2, #8]
  4076b2:	eb0a 0107 	add.w	r1, sl, r7
  4076b6:	ebab 0207 	sub.w	r2, fp, r7
  4076ba:	f042 0201 	orr.w	r2, r2, #1
  4076be:	6099      	str	r1, [r3, #8]
  4076c0:	604a      	str	r2, [r1, #4]
  4076c2:	f8da 3004 	ldr.w	r3, [sl, #4]
  4076c6:	f003 0301 	and.w	r3, r3, #1
  4076ca:	431f      	orrs	r7, r3
  4076cc:	4640      	mov	r0, r8
  4076ce:	f8ca 7004 	str.w	r7, [sl, #4]
  4076d2:	f7fe f98d 	bl	4059f0 <__malloc_unlock>
  4076d6:	e751      	b.n	40757c <_realloc_r+0xe4>
  4076d8:	682b      	ldr	r3, [r5, #0]
  4076da:	6003      	str	r3, [r0, #0]
  4076dc:	686b      	ldr	r3, [r5, #4]
  4076de:	6043      	str	r3, [r0, #4]
  4076e0:	2a1b      	cmp	r2, #27
  4076e2:	d82d      	bhi.n	407740 <_realloc_r+0x2a8>
  4076e4:	f100 0308 	add.w	r3, r0, #8
  4076e8:	f105 0208 	add.w	r2, r5, #8
  4076ec:	e71b      	b.n	407526 <_realloc_r+0x8e>
  4076ee:	4632      	mov	r2, r6
  4076f0:	6829      	ldr	r1, [r5, #0]
  4076f2:	6011      	str	r1, [r2, #0]
  4076f4:	6869      	ldr	r1, [r5, #4]
  4076f6:	6051      	str	r1, [r2, #4]
  4076f8:	68a9      	ldr	r1, [r5, #8]
  4076fa:	6091      	str	r1, [r2, #8]
  4076fc:	461c      	mov	r4, r3
  4076fe:	46d1      	mov	r9, sl
  407700:	e72a      	b.n	407558 <_realloc_r+0xc0>
  407702:	eb09 0107 	add.w	r1, r9, r7
  407706:	ebab 0b07 	sub.w	fp, fp, r7
  40770a:	f04b 0201 	orr.w	r2, fp, #1
  40770e:	6099      	str	r1, [r3, #8]
  407710:	604a      	str	r2, [r1, #4]
  407712:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407716:	f003 0301 	and.w	r3, r3, #1
  40771a:	431f      	orrs	r7, r3
  40771c:	4640      	mov	r0, r8
  40771e:	f845 7c04 	str.w	r7, [r5, #-4]
  407722:	f7fe f965 	bl	4059f0 <__malloc_unlock>
  407726:	462e      	mov	r6, r5
  407728:	e728      	b.n	40757c <_realloc_r+0xe4>
  40772a:	4629      	mov	r1, r5
  40772c:	f7ff fe50 	bl	4073d0 <memmove>
  407730:	e6ff      	b.n	407532 <_realloc_r+0x9a>
  407732:	4629      	mov	r1, r5
  407734:	4630      	mov	r0, r6
  407736:	461c      	mov	r4, r3
  407738:	46d1      	mov	r9, sl
  40773a:	f7ff fe49 	bl	4073d0 <memmove>
  40773e:	e70b      	b.n	407558 <_realloc_r+0xc0>
  407740:	68ab      	ldr	r3, [r5, #8]
  407742:	6083      	str	r3, [r0, #8]
  407744:	68eb      	ldr	r3, [r5, #12]
  407746:	60c3      	str	r3, [r0, #12]
  407748:	2a24      	cmp	r2, #36	; 0x24
  40774a:	d017      	beq.n	40777c <_realloc_r+0x2e4>
  40774c:	f100 0310 	add.w	r3, r0, #16
  407750:	f105 0210 	add.w	r2, r5, #16
  407754:	e6e7      	b.n	407526 <_realloc_r+0x8e>
  407756:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40775a:	f023 0303 	bic.w	r3, r3, #3
  40775e:	441c      	add	r4, r3
  407760:	462e      	mov	r6, r5
  407762:	e6f9      	b.n	407558 <_realloc_r+0xc0>
  407764:	68a9      	ldr	r1, [r5, #8]
  407766:	f8ca 1010 	str.w	r1, [sl, #16]
  40776a:	68e9      	ldr	r1, [r5, #12]
  40776c:	f8ca 1014 	str.w	r1, [sl, #20]
  407770:	2a24      	cmp	r2, #36	; 0x24
  407772:	d00c      	beq.n	40778e <_realloc_r+0x2f6>
  407774:	3510      	adds	r5, #16
  407776:	f10a 0218 	add.w	r2, sl, #24
  40777a:	e7b9      	b.n	4076f0 <_realloc_r+0x258>
  40777c:	692b      	ldr	r3, [r5, #16]
  40777e:	6103      	str	r3, [r0, #16]
  407780:	696b      	ldr	r3, [r5, #20]
  407782:	6143      	str	r3, [r0, #20]
  407784:	f105 0218 	add.w	r2, r5, #24
  407788:	f100 0318 	add.w	r3, r0, #24
  40778c:	e6cb      	b.n	407526 <_realloc_r+0x8e>
  40778e:	692a      	ldr	r2, [r5, #16]
  407790:	f8ca 2018 	str.w	r2, [sl, #24]
  407794:	696a      	ldr	r2, [r5, #20]
  407796:	f8ca 201c 	str.w	r2, [sl, #28]
  40779a:	3518      	adds	r5, #24
  40779c:	f10a 0220 	add.w	r2, sl, #32
  4077a0:	e7a6      	b.n	4076f0 <_realloc_r+0x258>
  4077a2:	4632      	mov	r2, r6
  4077a4:	e77f      	b.n	4076a6 <_realloc_r+0x20e>
  4077a6:	4629      	mov	r1, r5
  4077a8:	4630      	mov	r0, r6
  4077aa:	9301      	str	r3, [sp, #4]
  4077ac:	f7ff fe10 	bl	4073d0 <memmove>
  4077b0:	9b01      	ldr	r3, [sp, #4]
  4077b2:	e77e      	b.n	4076b2 <_realloc_r+0x21a>
  4077b4:	68a9      	ldr	r1, [r5, #8]
  4077b6:	f8ca 1010 	str.w	r1, [sl, #16]
  4077ba:	68e9      	ldr	r1, [r5, #12]
  4077bc:	f8ca 1014 	str.w	r1, [sl, #20]
  4077c0:	2a24      	cmp	r2, #36	; 0x24
  4077c2:	d003      	beq.n	4077cc <_realloc_r+0x334>
  4077c4:	3510      	adds	r5, #16
  4077c6:	f10a 0218 	add.w	r2, sl, #24
  4077ca:	e76c      	b.n	4076a6 <_realloc_r+0x20e>
  4077cc:	692a      	ldr	r2, [r5, #16]
  4077ce:	f8ca 2018 	str.w	r2, [sl, #24]
  4077d2:	696a      	ldr	r2, [r5, #20]
  4077d4:	f8ca 201c 	str.w	r2, [sl, #28]
  4077d8:	3518      	adds	r5, #24
  4077da:	f10a 0220 	add.w	r2, sl, #32
  4077de:	e762      	b.n	4076a6 <_realloc_r+0x20e>
  4077e0:	20400488 	.word	0x20400488

004077e4 <__sread>:
  4077e4:	b510      	push	{r4, lr}
  4077e6:	460c      	mov	r4, r1
  4077e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4077ec:	f000 fa6e 	bl	407ccc <_read_r>
  4077f0:	2800      	cmp	r0, #0
  4077f2:	db03      	blt.n	4077fc <__sread+0x18>
  4077f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4077f6:	4403      	add	r3, r0
  4077f8:	6523      	str	r3, [r4, #80]	; 0x50
  4077fa:	bd10      	pop	{r4, pc}
  4077fc:	89a3      	ldrh	r3, [r4, #12]
  4077fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  407802:	81a3      	strh	r3, [r4, #12]
  407804:	bd10      	pop	{r4, pc}
  407806:	bf00      	nop

00407808 <__swrite>:
  407808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40780c:	4616      	mov	r6, r2
  40780e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  407812:	461f      	mov	r7, r3
  407814:	05d3      	lsls	r3, r2, #23
  407816:	460c      	mov	r4, r1
  407818:	4605      	mov	r5, r0
  40781a:	d507      	bpl.n	40782c <__swrite+0x24>
  40781c:	2200      	movs	r2, #0
  40781e:	2302      	movs	r3, #2
  407820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407824:	f000 fa3c 	bl	407ca0 <_lseek_r>
  407828:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40782c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407830:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  407834:	81a2      	strh	r2, [r4, #12]
  407836:	463b      	mov	r3, r7
  407838:	4632      	mov	r2, r6
  40783a:	4628      	mov	r0, r5
  40783c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407840:	f000 b91c 	b.w	407a7c <_write_r>

00407844 <__sseek>:
  407844:	b510      	push	{r4, lr}
  407846:	460c      	mov	r4, r1
  407848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40784c:	f000 fa28 	bl	407ca0 <_lseek_r>
  407850:	89a3      	ldrh	r3, [r4, #12]
  407852:	1c42      	adds	r2, r0, #1
  407854:	bf0e      	itee	eq
  407856:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40785a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40785e:	6520      	strne	r0, [r4, #80]	; 0x50
  407860:	81a3      	strh	r3, [r4, #12]
  407862:	bd10      	pop	{r4, pc}

00407864 <__sclose>:
  407864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407868:	f000 b980 	b.w	407b6c <_close_r>
	...

00407880 <strlen>:
  407880:	f890 f000 	pld	[r0]
  407884:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  407888:	f020 0107 	bic.w	r1, r0, #7
  40788c:	f06f 0c00 	mvn.w	ip, #0
  407890:	f010 0407 	ands.w	r4, r0, #7
  407894:	f891 f020 	pld	[r1, #32]
  407898:	f040 8049 	bne.w	40792e <strlen+0xae>
  40789c:	f04f 0400 	mov.w	r4, #0
  4078a0:	f06f 0007 	mvn.w	r0, #7
  4078a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4078a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4078ac:	f100 0008 	add.w	r0, r0, #8
  4078b0:	fa82 f24c 	uadd8	r2, r2, ip
  4078b4:	faa4 f28c 	sel	r2, r4, ip
  4078b8:	fa83 f34c 	uadd8	r3, r3, ip
  4078bc:	faa2 f38c 	sel	r3, r2, ip
  4078c0:	bb4b      	cbnz	r3, 407916 <strlen+0x96>
  4078c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4078c6:	fa82 f24c 	uadd8	r2, r2, ip
  4078ca:	f100 0008 	add.w	r0, r0, #8
  4078ce:	faa4 f28c 	sel	r2, r4, ip
  4078d2:	fa83 f34c 	uadd8	r3, r3, ip
  4078d6:	faa2 f38c 	sel	r3, r2, ip
  4078da:	b9e3      	cbnz	r3, 407916 <strlen+0x96>
  4078dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4078e0:	fa82 f24c 	uadd8	r2, r2, ip
  4078e4:	f100 0008 	add.w	r0, r0, #8
  4078e8:	faa4 f28c 	sel	r2, r4, ip
  4078ec:	fa83 f34c 	uadd8	r3, r3, ip
  4078f0:	faa2 f38c 	sel	r3, r2, ip
  4078f4:	b97b      	cbnz	r3, 407916 <strlen+0x96>
  4078f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4078fa:	f101 0120 	add.w	r1, r1, #32
  4078fe:	fa82 f24c 	uadd8	r2, r2, ip
  407902:	f100 0008 	add.w	r0, r0, #8
  407906:	faa4 f28c 	sel	r2, r4, ip
  40790a:	fa83 f34c 	uadd8	r3, r3, ip
  40790e:	faa2 f38c 	sel	r3, r2, ip
  407912:	2b00      	cmp	r3, #0
  407914:	d0c6      	beq.n	4078a4 <strlen+0x24>
  407916:	2a00      	cmp	r2, #0
  407918:	bf04      	itt	eq
  40791a:	3004      	addeq	r0, #4
  40791c:	461a      	moveq	r2, r3
  40791e:	ba12      	rev	r2, r2
  407920:	fab2 f282 	clz	r2, r2
  407924:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  407928:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40792c:	4770      	bx	lr
  40792e:	e9d1 2300 	ldrd	r2, r3, [r1]
  407932:	f004 0503 	and.w	r5, r4, #3
  407936:	f1c4 0000 	rsb	r0, r4, #0
  40793a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40793e:	f014 0f04 	tst.w	r4, #4
  407942:	f891 f040 	pld	[r1, #64]	; 0x40
  407946:	fa0c f505 	lsl.w	r5, ip, r5
  40794a:	ea62 0205 	orn	r2, r2, r5
  40794e:	bf1c      	itt	ne
  407950:	ea63 0305 	ornne	r3, r3, r5
  407954:	4662      	movne	r2, ip
  407956:	f04f 0400 	mov.w	r4, #0
  40795a:	e7a9      	b.n	4078b0 <strlen+0x30>

0040795c <__swbuf_r>:
  40795c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40795e:	460d      	mov	r5, r1
  407960:	4614      	mov	r4, r2
  407962:	4606      	mov	r6, r0
  407964:	b110      	cbz	r0, 40796c <__swbuf_r+0x10>
  407966:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407968:	2b00      	cmp	r3, #0
  40796a:	d04b      	beq.n	407a04 <__swbuf_r+0xa8>
  40796c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407970:	69a3      	ldr	r3, [r4, #24]
  407972:	60a3      	str	r3, [r4, #8]
  407974:	b291      	uxth	r1, r2
  407976:	0708      	lsls	r0, r1, #28
  407978:	d539      	bpl.n	4079ee <__swbuf_r+0x92>
  40797a:	6923      	ldr	r3, [r4, #16]
  40797c:	2b00      	cmp	r3, #0
  40797e:	d036      	beq.n	4079ee <__swbuf_r+0x92>
  407980:	b2ed      	uxtb	r5, r5
  407982:	0489      	lsls	r1, r1, #18
  407984:	462f      	mov	r7, r5
  407986:	d515      	bpl.n	4079b4 <__swbuf_r+0x58>
  407988:	6822      	ldr	r2, [r4, #0]
  40798a:	6961      	ldr	r1, [r4, #20]
  40798c:	1ad3      	subs	r3, r2, r3
  40798e:	428b      	cmp	r3, r1
  407990:	da1c      	bge.n	4079cc <__swbuf_r+0x70>
  407992:	3301      	adds	r3, #1
  407994:	68a1      	ldr	r1, [r4, #8]
  407996:	1c50      	adds	r0, r2, #1
  407998:	3901      	subs	r1, #1
  40799a:	60a1      	str	r1, [r4, #8]
  40799c:	6020      	str	r0, [r4, #0]
  40799e:	7015      	strb	r5, [r2, #0]
  4079a0:	6962      	ldr	r2, [r4, #20]
  4079a2:	429a      	cmp	r2, r3
  4079a4:	d01a      	beq.n	4079dc <__swbuf_r+0x80>
  4079a6:	89a3      	ldrh	r3, [r4, #12]
  4079a8:	07db      	lsls	r3, r3, #31
  4079aa:	d501      	bpl.n	4079b0 <__swbuf_r+0x54>
  4079ac:	2d0a      	cmp	r5, #10
  4079ae:	d015      	beq.n	4079dc <__swbuf_r+0x80>
  4079b0:	4638      	mov	r0, r7
  4079b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4079b4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4079b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4079ba:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4079be:	81a2      	strh	r2, [r4, #12]
  4079c0:	6822      	ldr	r2, [r4, #0]
  4079c2:	6661      	str	r1, [r4, #100]	; 0x64
  4079c4:	6961      	ldr	r1, [r4, #20]
  4079c6:	1ad3      	subs	r3, r2, r3
  4079c8:	428b      	cmp	r3, r1
  4079ca:	dbe2      	blt.n	407992 <__swbuf_r+0x36>
  4079cc:	4621      	mov	r1, r4
  4079ce:	4630      	mov	r0, r6
  4079d0:	f7ff f804 	bl	4069dc <_fflush_r>
  4079d4:	b940      	cbnz	r0, 4079e8 <__swbuf_r+0x8c>
  4079d6:	6822      	ldr	r2, [r4, #0]
  4079d8:	2301      	movs	r3, #1
  4079da:	e7db      	b.n	407994 <__swbuf_r+0x38>
  4079dc:	4621      	mov	r1, r4
  4079de:	4630      	mov	r0, r6
  4079e0:	f7fe fffc 	bl	4069dc <_fflush_r>
  4079e4:	2800      	cmp	r0, #0
  4079e6:	d0e3      	beq.n	4079b0 <__swbuf_r+0x54>
  4079e8:	f04f 37ff 	mov.w	r7, #4294967295
  4079ec:	e7e0      	b.n	4079b0 <__swbuf_r+0x54>
  4079ee:	4621      	mov	r1, r4
  4079f0:	4630      	mov	r0, r6
  4079f2:	f7fe fedf 	bl	4067b4 <__swsetup_r>
  4079f6:	2800      	cmp	r0, #0
  4079f8:	d1f6      	bne.n	4079e8 <__swbuf_r+0x8c>
  4079fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4079fe:	6923      	ldr	r3, [r4, #16]
  407a00:	b291      	uxth	r1, r2
  407a02:	e7bd      	b.n	407980 <__swbuf_r+0x24>
  407a04:	f7ff f842 	bl	406a8c <__sinit>
  407a08:	e7b0      	b.n	40796c <__swbuf_r+0x10>
  407a0a:	bf00      	nop

00407a0c <_wcrtomb_r>:
  407a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  407a0e:	4606      	mov	r6, r0
  407a10:	b085      	sub	sp, #20
  407a12:	461f      	mov	r7, r3
  407a14:	b189      	cbz	r1, 407a3a <_wcrtomb_r+0x2e>
  407a16:	4c10      	ldr	r4, [pc, #64]	; (407a58 <_wcrtomb_r+0x4c>)
  407a18:	4d10      	ldr	r5, [pc, #64]	; (407a5c <_wcrtomb_r+0x50>)
  407a1a:	6824      	ldr	r4, [r4, #0]
  407a1c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  407a1e:	2c00      	cmp	r4, #0
  407a20:	bf08      	it	eq
  407a22:	462c      	moveq	r4, r5
  407a24:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  407a28:	47a0      	blx	r4
  407a2a:	1c43      	adds	r3, r0, #1
  407a2c:	d103      	bne.n	407a36 <_wcrtomb_r+0x2a>
  407a2e:	2200      	movs	r2, #0
  407a30:	238a      	movs	r3, #138	; 0x8a
  407a32:	603a      	str	r2, [r7, #0]
  407a34:	6033      	str	r3, [r6, #0]
  407a36:	b005      	add	sp, #20
  407a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407a3a:	460c      	mov	r4, r1
  407a3c:	4906      	ldr	r1, [pc, #24]	; (407a58 <_wcrtomb_r+0x4c>)
  407a3e:	4a07      	ldr	r2, [pc, #28]	; (407a5c <_wcrtomb_r+0x50>)
  407a40:	6809      	ldr	r1, [r1, #0]
  407a42:	6b49      	ldr	r1, [r1, #52]	; 0x34
  407a44:	2900      	cmp	r1, #0
  407a46:	bf08      	it	eq
  407a48:	4611      	moveq	r1, r2
  407a4a:	4622      	mov	r2, r4
  407a4c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  407a50:	a901      	add	r1, sp, #4
  407a52:	47a0      	blx	r4
  407a54:	e7e9      	b.n	407a2a <_wcrtomb_r+0x1e>
  407a56:	bf00      	nop
  407a58:	20400058 	.word	0x20400058
  407a5c:	2040089c 	.word	0x2040089c

00407a60 <__ascii_wctomb>:
  407a60:	b121      	cbz	r1, 407a6c <__ascii_wctomb+0xc>
  407a62:	2aff      	cmp	r2, #255	; 0xff
  407a64:	d804      	bhi.n	407a70 <__ascii_wctomb+0x10>
  407a66:	700a      	strb	r2, [r1, #0]
  407a68:	2001      	movs	r0, #1
  407a6a:	4770      	bx	lr
  407a6c:	4608      	mov	r0, r1
  407a6e:	4770      	bx	lr
  407a70:	238a      	movs	r3, #138	; 0x8a
  407a72:	6003      	str	r3, [r0, #0]
  407a74:	f04f 30ff 	mov.w	r0, #4294967295
  407a78:	4770      	bx	lr
  407a7a:	bf00      	nop

00407a7c <_write_r>:
  407a7c:	b570      	push	{r4, r5, r6, lr}
  407a7e:	460d      	mov	r5, r1
  407a80:	4c08      	ldr	r4, [pc, #32]	; (407aa4 <_write_r+0x28>)
  407a82:	4611      	mov	r1, r2
  407a84:	4606      	mov	r6, r0
  407a86:	461a      	mov	r2, r3
  407a88:	4628      	mov	r0, r5
  407a8a:	2300      	movs	r3, #0
  407a8c:	6023      	str	r3, [r4, #0]
  407a8e:	f7fa f8dd 	bl	401c4c <_write>
  407a92:	1c43      	adds	r3, r0, #1
  407a94:	d000      	beq.n	407a98 <_write_r+0x1c>
  407a96:	bd70      	pop	{r4, r5, r6, pc}
  407a98:	6823      	ldr	r3, [r4, #0]
  407a9a:	2b00      	cmp	r3, #0
  407a9c:	d0fb      	beq.n	407a96 <_write_r+0x1a>
  407a9e:	6033      	str	r3, [r6, #0]
  407aa0:	bd70      	pop	{r4, r5, r6, pc}
  407aa2:	bf00      	nop
  407aa4:	2044a8ec 	.word	0x2044a8ec

00407aa8 <__register_exitproc>:
  407aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407aac:	4d2c      	ldr	r5, [pc, #176]	; (407b60 <__register_exitproc+0xb8>)
  407aae:	4606      	mov	r6, r0
  407ab0:	6828      	ldr	r0, [r5, #0]
  407ab2:	4698      	mov	r8, r3
  407ab4:	460f      	mov	r7, r1
  407ab6:	4691      	mov	r9, r2
  407ab8:	f7ff fba8 	bl	40720c <__retarget_lock_acquire_recursive>
  407abc:	4b29      	ldr	r3, [pc, #164]	; (407b64 <__register_exitproc+0xbc>)
  407abe:	681c      	ldr	r4, [r3, #0]
  407ac0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  407ac4:	2b00      	cmp	r3, #0
  407ac6:	d03e      	beq.n	407b46 <__register_exitproc+0x9e>
  407ac8:	685a      	ldr	r2, [r3, #4]
  407aca:	2a1f      	cmp	r2, #31
  407acc:	dc1c      	bgt.n	407b08 <__register_exitproc+0x60>
  407ace:	f102 0e01 	add.w	lr, r2, #1
  407ad2:	b176      	cbz	r6, 407af2 <__register_exitproc+0x4a>
  407ad4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  407ad8:	2401      	movs	r4, #1
  407ada:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  407ade:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  407ae2:	4094      	lsls	r4, r2
  407ae4:	4320      	orrs	r0, r4
  407ae6:	2e02      	cmp	r6, #2
  407ae8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  407aec:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  407af0:	d023      	beq.n	407b3a <__register_exitproc+0x92>
  407af2:	3202      	adds	r2, #2
  407af4:	f8c3 e004 	str.w	lr, [r3, #4]
  407af8:	6828      	ldr	r0, [r5, #0]
  407afa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  407afe:	f7ff fb87 	bl	407210 <__retarget_lock_release_recursive>
  407b02:	2000      	movs	r0, #0
  407b04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407b08:	4b17      	ldr	r3, [pc, #92]	; (407b68 <__register_exitproc+0xc0>)
  407b0a:	b30b      	cbz	r3, 407b50 <__register_exitproc+0xa8>
  407b0c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  407b10:	f7fd fbc8 	bl	4052a4 <malloc>
  407b14:	4603      	mov	r3, r0
  407b16:	b1d8      	cbz	r0, 407b50 <__register_exitproc+0xa8>
  407b18:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  407b1c:	6002      	str	r2, [r0, #0]
  407b1e:	2100      	movs	r1, #0
  407b20:	6041      	str	r1, [r0, #4]
  407b22:	460a      	mov	r2, r1
  407b24:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  407b28:	f04f 0e01 	mov.w	lr, #1
  407b2c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  407b30:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  407b34:	2e00      	cmp	r6, #0
  407b36:	d0dc      	beq.n	407af2 <__register_exitproc+0x4a>
  407b38:	e7cc      	b.n	407ad4 <__register_exitproc+0x2c>
  407b3a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  407b3e:	430c      	orrs	r4, r1
  407b40:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  407b44:	e7d5      	b.n	407af2 <__register_exitproc+0x4a>
  407b46:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  407b4a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  407b4e:	e7bb      	b.n	407ac8 <__register_exitproc+0x20>
  407b50:	6828      	ldr	r0, [r5, #0]
  407b52:	f7ff fb5d 	bl	407210 <__retarget_lock_release_recursive>
  407b56:	f04f 30ff 	mov.w	r0, #4294967295
  407b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407b5e:	bf00      	nop
  407b60:	20400898 	.word	0x20400898
  407b64:	00408aa0 	.word	0x00408aa0
  407b68:	004052a5 	.word	0x004052a5

00407b6c <_close_r>:
  407b6c:	b538      	push	{r3, r4, r5, lr}
  407b6e:	4c07      	ldr	r4, [pc, #28]	; (407b8c <_close_r+0x20>)
  407b70:	2300      	movs	r3, #0
  407b72:	4605      	mov	r5, r0
  407b74:	4608      	mov	r0, r1
  407b76:	6023      	str	r3, [r4, #0]
  407b78:	f7fb fc72 	bl	403460 <_close>
  407b7c:	1c43      	adds	r3, r0, #1
  407b7e:	d000      	beq.n	407b82 <_close_r+0x16>
  407b80:	bd38      	pop	{r3, r4, r5, pc}
  407b82:	6823      	ldr	r3, [r4, #0]
  407b84:	2b00      	cmp	r3, #0
  407b86:	d0fb      	beq.n	407b80 <_close_r+0x14>
  407b88:	602b      	str	r3, [r5, #0]
  407b8a:	bd38      	pop	{r3, r4, r5, pc}
  407b8c:	2044a8ec 	.word	0x2044a8ec

00407b90 <_fclose_r>:
  407b90:	b570      	push	{r4, r5, r6, lr}
  407b92:	b159      	cbz	r1, 407bac <_fclose_r+0x1c>
  407b94:	4605      	mov	r5, r0
  407b96:	460c      	mov	r4, r1
  407b98:	b110      	cbz	r0, 407ba0 <_fclose_r+0x10>
  407b9a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407b9c:	2b00      	cmp	r3, #0
  407b9e:	d03c      	beq.n	407c1a <_fclose_r+0x8a>
  407ba0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407ba2:	07d8      	lsls	r0, r3, #31
  407ba4:	d505      	bpl.n	407bb2 <_fclose_r+0x22>
  407ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407baa:	b92b      	cbnz	r3, 407bb8 <_fclose_r+0x28>
  407bac:	2600      	movs	r6, #0
  407bae:	4630      	mov	r0, r6
  407bb0:	bd70      	pop	{r4, r5, r6, pc}
  407bb2:	89a3      	ldrh	r3, [r4, #12]
  407bb4:	0599      	lsls	r1, r3, #22
  407bb6:	d53c      	bpl.n	407c32 <_fclose_r+0xa2>
  407bb8:	4621      	mov	r1, r4
  407bba:	4628      	mov	r0, r5
  407bbc:	f7fe fe6e 	bl	40689c <__sflush_r>
  407bc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  407bc2:	4606      	mov	r6, r0
  407bc4:	b133      	cbz	r3, 407bd4 <_fclose_r+0x44>
  407bc6:	69e1      	ldr	r1, [r4, #28]
  407bc8:	4628      	mov	r0, r5
  407bca:	4798      	blx	r3
  407bcc:	2800      	cmp	r0, #0
  407bce:	bfb8      	it	lt
  407bd0:	f04f 36ff 	movlt.w	r6, #4294967295
  407bd4:	89a3      	ldrh	r3, [r4, #12]
  407bd6:	061a      	lsls	r2, r3, #24
  407bd8:	d422      	bmi.n	407c20 <_fclose_r+0x90>
  407bda:	6b21      	ldr	r1, [r4, #48]	; 0x30
  407bdc:	b141      	cbz	r1, 407bf0 <_fclose_r+0x60>
  407bde:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407be2:	4299      	cmp	r1, r3
  407be4:	d002      	beq.n	407bec <_fclose_r+0x5c>
  407be6:	4628      	mov	r0, r5
  407be8:	f7ff f876 	bl	406cd8 <_free_r>
  407bec:	2300      	movs	r3, #0
  407bee:	6323      	str	r3, [r4, #48]	; 0x30
  407bf0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  407bf2:	b121      	cbz	r1, 407bfe <_fclose_r+0x6e>
  407bf4:	4628      	mov	r0, r5
  407bf6:	f7ff f86f 	bl	406cd8 <_free_r>
  407bfa:	2300      	movs	r3, #0
  407bfc:	6463      	str	r3, [r4, #68]	; 0x44
  407bfe:	f7fe ff71 	bl	406ae4 <__sfp_lock_acquire>
  407c02:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407c04:	2200      	movs	r2, #0
  407c06:	07db      	lsls	r3, r3, #31
  407c08:	81a2      	strh	r2, [r4, #12]
  407c0a:	d50e      	bpl.n	407c2a <_fclose_r+0x9a>
  407c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407c0e:	f7ff fafb 	bl	407208 <__retarget_lock_close_recursive>
  407c12:	f7fe ff6d 	bl	406af0 <__sfp_lock_release>
  407c16:	4630      	mov	r0, r6
  407c18:	bd70      	pop	{r4, r5, r6, pc}
  407c1a:	f7fe ff37 	bl	406a8c <__sinit>
  407c1e:	e7bf      	b.n	407ba0 <_fclose_r+0x10>
  407c20:	6921      	ldr	r1, [r4, #16]
  407c22:	4628      	mov	r0, r5
  407c24:	f7ff f858 	bl	406cd8 <_free_r>
  407c28:	e7d7      	b.n	407bda <_fclose_r+0x4a>
  407c2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407c2c:	f7ff faf0 	bl	407210 <__retarget_lock_release_recursive>
  407c30:	e7ec      	b.n	407c0c <_fclose_r+0x7c>
  407c32:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407c34:	f7ff faea 	bl	40720c <__retarget_lock_acquire_recursive>
  407c38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407c3c:	2b00      	cmp	r3, #0
  407c3e:	d1bb      	bne.n	407bb8 <_fclose_r+0x28>
  407c40:	6e66      	ldr	r6, [r4, #100]	; 0x64
  407c42:	f016 0601 	ands.w	r6, r6, #1
  407c46:	d1b1      	bne.n	407bac <_fclose_r+0x1c>
  407c48:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407c4a:	f7ff fae1 	bl	407210 <__retarget_lock_release_recursive>
  407c4e:	4630      	mov	r0, r6
  407c50:	bd70      	pop	{r4, r5, r6, pc}
  407c52:	bf00      	nop

00407c54 <_fstat_r>:
  407c54:	b538      	push	{r3, r4, r5, lr}
  407c56:	460b      	mov	r3, r1
  407c58:	4c07      	ldr	r4, [pc, #28]	; (407c78 <_fstat_r+0x24>)
  407c5a:	4605      	mov	r5, r0
  407c5c:	4611      	mov	r1, r2
  407c5e:	4618      	mov	r0, r3
  407c60:	2300      	movs	r3, #0
  407c62:	6023      	str	r3, [r4, #0]
  407c64:	f7fb fc00 	bl	403468 <_fstat>
  407c68:	1c43      	adds	r3, r0, #1
  407c6a:	d000      	beq.n	407c6e <_fstat_r+0x1a>
  407c6c:	bd38      	pop	{r3, r4, r5, pc}
  407c6e:	6823      	ldr	r3, [r4, #0]
  407c70:	2b00      	cmp	r3, #0
  407c72:	d0fb      	beq.n	407c6c <_fstat_r+0x18>
  407c74:	602b      	str	r3, [r5, #0]
  407c76:	bd38      	pop	{r3, r4, r5, pc}
  407c78:	2044a8ec 	.word	0x2044a8ec

00407c7c <_isatty_r>:
  407c7c:	b538      	push	{r3, r4, r5, lr}
  407c7e:	4c07      	ldr	r4, [pc, #28]	; (407c9c <_isatty_r+0x20>)
  407c80:	2300      	movs	r3, #0
  407c82:	4605      	mov	r5, r0
  407c84:	4608      	mov	r0, r1
  407c86:	6023      	str	r3, [r4, #0]
  407c88:	f7fb fbf4 	bl	403474 <_isatty>
  407c8c:	1c43      	adds	r3, r0, #1
  407c8e:	d000      	beq.n	407c92 <_isatty_r+0x16>
  407c90:	bd38      	pop	{r3, r4, r5, pc}
  407c92:	6823      	ldr	r3, [r4, #0]
  407c94:	2b00      	cmp	r3, #0
  407c96:	d0fb      	beq.n	407c90 <_isatty_r+0x14>
  407c98:	602b      	str	r3, [r5, #0]
  407c9a:	bd38      	pop	{r3, r4, r5, pc}
  407c9c:	2044a8ec 	.word	0x2044a8ec

00407ca0 <_lseek_r>:
  407ca0:	b570      	push	{r4, r5, r6, lr}
  407ca2:	460d      	mov	r5, r1
  407ca4:	4c08      	ldr	r4, [pc, #32]	; (407cc8 <_lseek_r+0x28>)
  407ca6:	4611      	mov	r1, r2
  407ca8:	4606      	mov	r6, r0
  407caa:	461a      	mov	r2, r3
  407cac:	4628      	mov	r0, r5
  407cae:	2300      	movs	r3, #0
  407cb0:	6023      	str	r3, [r4, #0]
  407cb2:	f7fb fbe1 	bl	403478 <_lseek>
  407cb6:	1c43      	adds	r3, r0, #1
  407cb8:	d000      	beq.n	407cbc <_lseek_r+0x1c>
  407cba:	bd70      	pop	{r4, r5, r6, pc}
  407cbc:	6823      	ldr	r3, [r4, #0]
  407cbe:	2b00      	cmp	r3, #0
  407cc0:	d0fb      	beq.n	407cba <_lseek_r+0x1a>
  407cc2:	6033      	str	r3, [r6, #0]
  407cc4:	bd70      	pop	{r4, r5, r6, pc}
  407cc6:	bf00      	nop
  407cc8:	2044a8ec 	.word	0x2044a8ec

00407ccc <_read_r>:
  407ccc:	b570      	push	{r4, r5, r6, lr}
  407cce:	460d      	mov	r5, r1
  407cd0:	4c08      	ldr	r4, [pc, #32]	; (407cf4 <_read_r+0x28>)
  407cd2:	4611      	mov	r1, r2
  407cd4:	4606      	mov	r6, r0
  407cd6:	461a      	mov	r2, r3
  407cd8:	4628      	mov	r0, r5
  407cda:	2300      	movs	r3, #0
  407cdc:	6023      	str	r3, [r4, #0]
  407cde:	f7f9 ff97 	bl	401c10 <_read>
  407ce2:	1c43      	adds	r3, r0, #1
  407ce4:	d000      	beq.n	407ce8 <_read_r+0x1c>
  407ce6:	bd70      	pop	{r4, r5, r6, pc}
  407ce8:	6823      	ldr	r3, [r4, #0]
  407cea:	2b00      	cmp	r3, #0
  407cec:	d0fb      	beq.n	407ce6 <_read_r+0x1a>
  407cee:	6033      	str	r3, [r6, #0]
  407cf0:	bd70      	pop	{r4, r5, r6, pc}
  407cf2:	bf00      	nop
  407cf4:	2044a8ec 	.word	0x2044a8ec

00407cf8 <__aeabi_uldivmod>:
  407cf8:	b953      	cbnz	r3, 407d10 <__aeabi_uldivmod+0x18>
  407cfa:	b94a      	cbnz	r2, 407d10 <__aeabi_uldivmod+0x18>
  407cfc:	2900      	cmp	r1, #0
  407cfe:	bf08      	it	eq
  407d00:	2800      	cmpeq	r0, #0
  407d02:	bf1c      	itt	ne
  407d04:	f04f 31ff 	movne.w	r1, #4294967295
  407d08:	f04f 30ff 	movne.w	r0, #4294967295
  407d0c:	f000 b97a 	b.w	408004 <__aeabi_idiv0>
  407d10:	f1ad 0c08 	sub.w	ip, sp, #8
  407d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  407d18:	f000 f806 	bl	407d28 <__udivmoddi4>
  407d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
  407d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  407d24:	b004      	add	sp, #16
  407d26:	4770      	bx	lr

00407d28 <__udivmoddi4>:
  407d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407d2c:	468c      	mov	ip, r1
  407d2e:	460d      	mov	r5, r1
  407d30:	4604      	mov	r4, r0
  407d32:	9e08      	ldr	r6, [sp, #32]
  407d34:	2b00      	cmp	r3, #0
  407d36:	d151      	bne.n	407ddc <__udivmoddi4+0xb4>
  407d38:	428a      	cmp	r2, r1
  407d3a:	4617      	mov	r7, r2
  407d3c:	d96d      	bls.n	407e1a <__udivmoddi4+0xf2>
  407d3e:	fab2 fe82 	clz	lr, r2
  407d42:	f1be 0f00 	cmp.w	lr, #0
  407d46:	d00b      	beq.n	407d60 <__udivmoddi4+0x38>
  407d48:	f1ce 0c20 	rsb	ip, lr, #32
  407d4c:	fa01 f50e 	lsl.w	r5, r1, lr
  407d50:	fa20 fc0c 	lsr.w	ip, r0, ip
  407d54:	fa02 f70e 	lsl.w	r7, r2, lr
  407d58:	ea4c 0c05 	orr.w	ip, ip, r5
  407d5c:	fa00 f40e 	lsl.w	r4, r0, lr
  407d60:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  407d64:	0c25      	lsrs	r5, r4, #16
  407d66:	fbbc f8fa 	udiv	r8, ip, sl
  407d6a:	fa1f f987 	uxth.w	r9, r7
  407d6e:	fb0a cc18 	mls	ip, sl, r8, ip
  407d72:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  407d76:	fb08 f309 	mul.w	r3, r8, r9
  407d7a:	42ab      	cmp	r3, r5
  407d7c:	d90a      	bls.n	407d94 <__udivmoddi4+0x6c>
  407d7e:	19ed      	adds	r5, r5, r7
  407d80:	f108 32ff 	add.w	r2, r8, #4294967295
  407d84:	f080 8123 	bcs.w	407fce <__udivmoddi4+0x2a6>
  407d88:	42ab      	cmp	r3, r5
  407d8a:	f240 8120 	bls.w	407fce <__udivmoddi4+0x2a6>
  407d8e:	f1a8 0802 	sub.w	r8, r8, #2
  407d92:	443d      	add	r5, r7
  407d94:	1aed      	subs	r5, r5, r3
  407d96:	b2a4      	uxth	r4, r4
  407d98:	fbb5 f0fa 	udiv	r0, r5, sl
  407d9c:	fb0a 5510 	mls	r5, sl, r0, r5
  407da0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  407da4:	fb00 f909 	mul.w	r9, r0, r9
  407da8:	45a1      	cmp	r9, r4
  407daa:	d909      	bls.n	407dc0 <__udivmoddi4+0x98>
  407dac:	19e4      	adds	r4, r4, r7
  407dae:	f100 33ff 	add.w	r3, r0, #4294967295
  407db2:	f080 810a 	bcs.w	407fca <__udivmoddi4+0x2a2>
  407db6:	45a1      	cmp	r9, r4
  407db8:	f240 8107 	bls.w	407fca <__udivmoddi4+0x2a2>
  407dbc:	3802      	subs	r0, #2
  407dbe:	443c      	add	r4, r7
  407dc0:	eba4 0409 	sub.w	r4, r4, r9
  407dc4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  407dc8:	2100      	movs	r1, #0
  407dca:	2e00      	cmp	r6, #0
  407dcc:	d061      	beq.n	407e92 <__udivmoddi4+0x16a>
  407dce:	fa24 f40e 	lsr.w	r4, r4, lr
  407dd2:	2300      	movs	r3, #0
  407dd4:	6034      	str	r4, [r6, #0]
  407dd6:	6073      	str	r3, [r6, #4]
  407dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407ddc:	428b      	cmp	r3, r1
  407dde:	d907      	bls.n	407df0 <__udivmoddi4+0xc8>
  407de0:	2e00      	cmp	r6, #0
  407de2:	d054      	beq.n	407e8e <__udivmoddi4+0x166>
  407de4:	2100      	movs	r1, #0
  407de6:	e886 0021 	stmia.w	r6, {r0, r5}
  407dea:	4608      	mov	r0, r1
  407dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407df0:	fab3 f183 	clz	r1, r3
  407df4:	2900      	cmp	r1, #0
  407df6:	f040 808e 	bne.w	407f16 <__udivmoddi4+0x1ee>
  407dfa:	42ab      	cmp	r3, r5
  407dfc:	d302      	bcc.n	407e04 <__udivmoddi4+0xdc>
  407dfe:	4282      	cmp	r2, r0
  407e00:	f200 80fa 	bhi.w	407ff8 <__udivmoddi4+0x2d0>
  407e04:	1a84      	subs	r4, r0, r2
  407e06:	eb65 0503 	sbc.w	r5, r5, r3
  407e0a:	2001      	movs	r0, #1
  407e0c:	46ac      	mov	ip, r5
  407e0e:	2e00      	cmp	r6, #0
  407e10:	d03f      	beq.n	407e92 <__udivmoddi4+0x16a>
  407e12:	e886 1010 	stmia.w	r6, {r4, ip}
  407e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407e1a:	b912      	cbnz	r2, 407e22 <__udivmoddi4+0xfa>
  407e1c:	2701      	movs	r7, #1
  407e1e:	fbb7 f7f2 	udiv	r7, r7, r2
  407e22:	fab7 fe87 	clz	lr, r7
  407e26:	f1be 0f00 	cmp.w	lr, #0
  407e2a:	d134      	bne.n	407e96 <__udivmoddi4+0x16e>
  407e2c:	1beb      	subs	r3, r5, r7
  407e2e:	0c3a      	lsrs	r2, r7, #16
  407e30:	fa1f fc87 	uxth.w	ip, r7
  407e34:	2101      	movs	r1, #1
  407e36:	fbb3 f8f2 	udiv	r8, r3, r2
  407e3a:	0c25      	lsrs	r5, r4, #16
  407e3c:	fb02 3318 	mls	r3, r2, r8, r3
  407e40:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  407e44:	fb0c f308 	mul.w	r3, ip, r8
  407e48:	42ab      	cmp	r3, r5
  407e4a:	d907      	bls.n	407e5c <__udivmoddi4+0x134>
  407e4c:	19ed      	adds	r5, r5, r7
  407e4e:	f108 30ff 	add.w	r0, r8, #4294967295
  407e52:	d202      	bcs.n	407e5a <__udivmoddi4+0x132>
  407e54:	42ab      	cmp	r3, r5
  407e56:	f200 80d1 	bhi.w	407ffc <__udivmoddi4+0x2d4>
  407e5a:	4680      	mov	r8, r0
  407e5c:	1aed      	subs	r5, r5, r3
  407e5e:	b2a3      	uxth	r3, r4
  407e60:	fbb5 f0f2 	udiv	r0, r5, r2
  407e64:	fb02 5510 	mls	r5, r2, r0, r5
  407e68:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  407e6c:	fb0c fc00 	mul.w	ip, ip, r0
  407e70:	45a4      	cmp	ip, r4
  407e72:	d907      	bls.n	407e84 <__udivmoddi4+0x15c>
  407e74:	19e4      	adds	r4, r4, r7
  407e76:	f100 33ff 	add.w	r3, r0, #4294967295
  407e7a:	d202      	bcs.n	407e82 <__udivmoddi4+0x15a>
  407e7c:	45a4      	cmp	ip, r4
  407e7e:	f200 80b8 	bhi.w	407ff2 <__udivmoddi4+0x2ca>
  407e82:	4618      	mov	r0, r3
  407e84:	eba4 040c 	sub.w	r4, r4, ip
  407e88:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  407e8c:	e79d      	b.n	407dca <__udivmoddi4+0xa2>
  407e8e:	4631      	mov	r1, r6
  407e90:	4630      	mov	r0, r6
  407e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407e96:	f1ce 0420 	rsb	r4, lr, #32
  407e9a:	fa05 f30e 	lsl.w	r3, r5, lr
  407e9e:	fa07 f70e 	lsl.w	r7, r7, lr
  407ea2:	fa20 f804 	lsr.w	r8, r0, r4
  407ea6:	0c3a      	lsrs	r2, r7, #16
  407ea8:	fa25 f404 	lsr.w	r4, r5, r4
  407eac:	ea48 0803 	orr.w	r8, r8, r3
  407eb0:	fbb4 f1f2 	udiv	r1, r4, r2
  407eb4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  407eb8:	fb02 4411 	mls	r4, r2, r1, r4
  407ebc:	fa1f fc87 	uxth.w	ip, r7
  407ec0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  407ec4:	fb01 f30c 	mul.w	r3, r1, ip
  407ec8:	42ab      	cmp	r3, r5
  407eca:	fa00 f40e 	lsl.w	r4, r0, lr
  407ece:	d909      	bls.n	407ee4 <__udivmoddi4+0x1bc>
  407ed0:	19ed      	adds	r5, r5, r7
  407ed2:	f101 30ff 	add.w	r0, r1, #4294967295
  407ed6:	f080 808a 	bcs.w	407fee <__udivmoddi4+0x2c6>
  407eda:	42ab      	cmp	r3, r5
  407edc:	f240 8087 	bls.w	407fee <__udivmoddi4+0x2c6>
  407ee0:	3902      	subs	r1, #2
  407ee2:	443d      	add	r5, r7
  407ee4:	1aeb      	subs	r3, r5, r3
  407ee6:	fa1f f588 	uxth.w	r5, r8
  407eea:	fbb3 f0f2 	udiv	r0, r3, r2
  407eee:	fb02 3310 	mls	r3, r2, r0, r3
  407ef2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  407ef6:	fb00 f30c 	mul.w	r3, r0, ip
  407efa:	42ab      	cmp	r3, r5
  407efc:	d907      	bls.n	407f0e <__udivmoddi4+0x1e6>
  407efe:	19ed      	adds	r5, r5, r7
  407f00:	f100 38ff 	add.w	r8, r0, #4294967295
  407f04:	d26f      	bcs.n	407fe6 <__udivmoddi4+0x2be>
  407f06:	42ab      	cmp	r3, r5
  407f08:	d96d      	bls.n	407fe6 <__udivmoddi4+0x2be>
  407f0a:	3802      	subs	r0, #2
  407f0c:	443d      	add	r5, r7
  407f0e:	1aeb      	subs	r3, r5, r3
  407f10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  407f14:	e78f      	b.n	407e36 <__udivmoddi4+0x10e>
  407f16:	f1c1 0720 	rsb	r7, r1, #32
  407f1a:	fa22 f807 	lsr.w	r8, r2, r7
  407f1e:	408b      	lsls	r3, r1
  407f20:	fa05 f401 	lsl.w	r4, r5, r1
  407f24:	ea48 0303 	orr.w	r3, r8, r3
  407f28:	fa20 fe07 	lsr.w	lr, r0, r7
  407f2c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  407f30:	40fd      	lsrs	r5, r7
  407f32:	ea4e 0e04 	orr.w	lr, lr, r4
  407f36:	fbb5 f9fc 	udiv	r9, r5, ip
  407f3a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  407f3e:	fb0c 5519 	mls	r5, ip, r9, r5
  407f42:	fa1f f883 	uxth.w	r8, r3
  407f46:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  407f4a:	fb09 f408 	mul.w	r4, r9, r8
  407f4e:	42ac      	cmp	r4, r5
  407f50:	fa02 f201 	lsl.w	r2, r2, r1
  407f54:	fa00 fa01 	lsl.w	sl, r0, r1
  407f58:	d908      	bls.n	407f6c <__udivmoddi4+0x244>
  407f5a:	18ed      	adds	r5, r5, r3
  407f5c:	f109 30ff 	add.w	r0, r9, #4294967295
  407f60:	d243      	bcs.n	407fea <__udivmoddi4+0x2c2>
  407f62:	42ac      	cmp	r4, r5
  407f64:	d941      	bls.n	407fea <__udivmoddi4+0x2c2>
  407f66:	f1a9 0902 	sub.w	r9, r9, #2
  407f6a:	441d      	add	r5, r3
  407f6c:	1b2d      	subs	r5, r5, r4
  407f6e:	fa1f fe8e 	uxth.w	lr, lr
  407f72:	fbb5 f0fc 	udiv	r0, r5, ip
  407f76:	fb0c 5510 	mls	r5, ip, r0, r5
  407f7a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  407f7e:	fb00 f808 	mul.w	r8, r0, r8
  407f82:	45a0      	cmp	r8, r4
  407f84:	d907      	bls.n	407f96 <__udivmoddi4+0x26e>
  407f86:	18e4      	adds	r4, r4, r3
  407f88:	f100 35ff 	add.w	r5, r0, #4294967295
  407f8c:	d229      	bcs.n	407fe2 <__udivmoddi4+0x2ba>
  407f8e:	45a0      	cmp	r8, r4
  407f90:	d927      	bls.n	407fe2 <__udivmoddi4+0x2ba>
  407f92:	3802      	subs	r0, #2
  407f94:	441c      	add	r4, r3
  407f96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  407f9a:	eba4 0408 	sub.w	r4, r4, r8
  407f9e:	fba0 8902 	umull	r8, r9, r0, r2
  407fa2:	454c      	cmp	r4, r9
  407fa4:	46c6      	mov	lr, r8
  407fa6:	464d      	mov	r5, r9
  407fa8:	d315      	bcc.n	407fd6 <__udivmoddi4+0x2ae>
  407faa:	d012      	beq.n	407fd2 <__udivmoddi4+0x2aa>
  407fac:	b156      	cbz	r6, 407fc4 <__udivmoddi4+0x29c>
  407fae:	ebba 030e 	subs.w	r3, sl, lr
  407fb2:	eb64 0405 	sbc.w	r4, r4, r5
  407fb6:	fa04 f707 	lsl.w	r7, r4, r7
  407fba:	40cb      	lsrs	r3, r1
  407fbc:	431f      	orrs	r7, r3
  407fbe:	40cc      	lsrs	r4, r1
  407fc0:	6037      	str	r7, [r6, #0]
  407fc2:	6074      	str	r4, [r6, #4]
  407fc4:	2100      	movs	r1, #0
  407fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407fca:	4618      	mov	r0, r3
  407fcc:	e6f8      	b.n	407dc0 <__udivmoddi4+0x98>
  407fce:	4690      	mov	r8, r2
  407fd0:	e6e0      	b.n	407d94 <__udivmoddi4+0x6c>
  407fd2:	45c2      	cmp	sl, r8
  407fd4:	d2ea      	bcs.n	407fac <__udivmoddi4+0x284>
  407fd6:	ebb8 0e02 	subs.w	lr, r8, r2
  407fda:	eb69 0503 	sbc.w	r5, r9, r3
  407fde:	3801      	subs	r0, #1
  407fe0:	e7e4      	b.n	407fac <__udivmoddi4+0x284>
  407fe2:	4628      	mov	r0, r5
  407fe4:	e7d7      	b.n	407f96 <__udivmoddi4+0x26e>
  407fe6:	4640      	mov	r0, r8
  407fe8:	e791      	b.n	407f0e <__udivmoddi4+0x1e6>
  407fea:	4681      	mov	r9, r0
  407fec:	e7be      	b.n	407f6c <__udivmoddi4+0x244>
  407fee:	4601      	mov	r1, r0
  407ff0:	e778      	b.n	407ee4 <__udivmoddi4+0x1bc>
  407ff2:	3802      	subs	r0, #2
  407ff4:	443c      	add	r4, r7
  407ff6:	e745      	b.n	407e84 <__udivmoddi4+0x15c>
  407ff8:	4608      	mov	r0, r1
  407ffa:	e708      	b.n	407e0e <__udivmoddi4+0xe6>
  407ffc:	f1a8 0802 	sub.w	r8, r8, #2
  408000:	443d      	add	r5, r7
  408002:	e72b      	b.n	407e5c <__udivmoddi4+0x134>

00408004 <__aeabi_idiv0>:
  408004:	4770      	bx	lr
  408006:	bf00      	nop
  408008:	092d452d 	.word	0x092d452d
  40800c:	39384d57 	.word	0x39384d57
  408010:	69203430 	.word	0x69203430
  408014:	6974696e 	.word	0x6974696e
  408018:	7a696c61 	.word	0x7a696c61
  40801c:	6f697461 	.word	0x6f697461
  408020:	6166206e 	.word	0x6166206e
  408024:	64656c69 	.word	0x64656c69
  408028:	00000d2e 	.word	0x00000d2e
  40802c:	0a05000d 	.word	0x0a05000d
  408030:	0000004b 	.word	0x0000004b
  408034:	00001932 	.word	0x00001932
  408038:	0e00008b 	.word	0x0e00008b
  40803c:	32800008 	.word	0x32800008
  408040:	030a0205 	.word	0x030a0205
  408044:	0f022003 	.word	0x0f022003
  408048:	00000a0f 	.word	0x00000a0f
  40804c:	18180000 	.word	0x18180000
  408050:	00002020 	.word	0x00002020
  408054:	0a000000 	.word	0x0a000000
  408058:	02020000 	.word	0x02020000
  40805c:	18180000 	.word	0x18180000
  408060:	00030000 	.word	0x00030000
  408064:	00000000 	.word	0x00000000
  408068:	18010002 	.word	0x18010002
  40806c:	1e1e1e1e 	.word	0x1e1e1e1e
  408070:	1e1e1e1e 	.word	0x1e1e1e1e
  408074:	1e1e1e1e 	.word	0x1e1e1e1e
  408078:	00001e1e 	.word	0x00001e1e
	...

0040808c <CSWTCH.7>:
  40808c:	00000100 00000300 00000200              ............

00408098 <midi_note_frequencies>:
  408098:	4102d0e5 410a978d 4112d4fe 411b9168     ...A...A...Ah..A
  4080a8:	4124d0e5 412e9ba6 4138fdf4 41440000     ..$A...A..8A..DA
  4080b8:	414fa5e3 415c0000 41691687 4176f1aa     ..OA..\A..iA..vA
  4080c8:	4182d0e5 418a978d 4192d4fe 419b8f5c     ...A...A...A\..A
  4080d8:	41a4d0e5 41ae9db2 41b90000 41c40000     ...A...A...A...A
  4080e8:	41cfa7f0 41dc0000 41e9147b 41f6f1aa     ...A...A{..A...A
  4080f8:	4202cfdf 420a978d 4212d4fe 421b9062     ...B...B...Bb..B
  408108:	4224cfdf 422e9db2 4238fefa 4243fefa     ..$B...B..8B..CB
  408118:	424fa6e9 425c0000 4269147b 4276f0a4     ..OB..\B{.iB..vB
  408128:	4282cfdf 428a978d 4292d4fe 429b9062     ...B...B...Bb..B
  408138:	42a4d062 42ae9d2f 42b8ff7d 42c3ff7d     b..B/..B}..B}..B
  408148:	42cfa6e9 42dc0000 42e914fe 42f6f127     ...B...B...B'..B
  408158:	4302d021 430a974c 4312d4fe 431b9021     !..CL..C...C!..C
  408168:	4324d062 432e9d2f 4338ff3b 4343ff7d     b.$C/..C;.8C}.CC
  408178:	434fa6e9 435c0000 436914fe 4376f127     ..OC..\C..iC'.vC
  408188:	4382d021 438a976d 4392d51f 439b9042     !..Cm..C...CB..C
  408198:	43a4d062 43ae9d2f 43b8ff3b 43c3ff5c     b..C/..C;..C\..C
  4081a8:	43cfa70a 43dc0000 43e914fe 43f6f106     ...C...C...C...C
  4081b8:	4402d010 440a975c 4412d51f 441b9042     ...D\..D...DB..D
  4081c8:	4424d052 442e9d2f 4438ff4c 4443ff6d     R.$D/..DL.8Dm.CD
  4081d8:	444fa6fa 445c0000 446914fe 4476f117     ..OD..\D..iD..vD
  4081e8:	4482d010 448a9764 4492d517 449b9042     ...Dd..D...DB..D
  4081f8:	44a4d052 44ae9d37 44b8ff4c 44c3ff6d     R..D7..DL..Dm..D
  408208:	44cfa702 44dc0000 44e914f6 44f6f10e     ...D...D...D...D
  408218:	4502d014 450a9760 4512d517 451b9042     ...E`..E...EB..E
  408228:	4524d052 452e9d37 4538ff48 4543ff68     R.$E7..EH.8Eh.CE
  408238:	454fa702 455c0000 456914f6 4576f10e     ..OE..\E..iE..vE
  408248:	4582d012 458a9760 4592d517 459b9042     ...E`..E...EB..E
  408258:	45a4d054 45ae9d37 45b8ff4a 45c3ff6a     T..E7..EJ..Ej..E
  408268:	45cfa700 45dc0000 45e914f6 45f6f110     ...E...E...E...E
  408278:	4602d012 460a9760 4612d518 461b9041     ...F`..F...FA..F
  408288:	4624d052 462e9d33 4638ff48 4643ff66     R.$F3..FH.8Ff.CF

00408298 <sinTable_f32>:
  408298:	00000000 3c490e92 3cc90ab1 3d16c32b     ......I<...<+..=
  4082a8:	3d48fb2e 3d7b2b75 3d96a904 3dafb680     ..H=u+{=...=...=
  4082b8:	3dc8bd36 3de1bc2f 3dfab273 3e09cf87     6..=/..=s..=...>
  4082c8:	3e164083 3e22abb5 3e2f10a2 3e3b6ecf     .@.>..">../>.n;>
  4082d8:	3e47c5c2 3e541501 3e605c13 3e6c9a7f     ..G>..T>.\`>..l>
  4082e8:	3e78cfcc 3e827dc0 3e888e93 3e8e9a22     ..x>.}.>...>"..>
  4082f8:	3e94a032 3e9aa086 3ea09ae5 3ea68f12     2..>...>...>...>
  408308:	3eac7cd4 3eb263ef 3eb8442a 3ebe1d49     .|.>.c.>*D.>I..>
  408318:	3ec3ef15 3ec9b953 3ecf7bca 3ed53641     ...>S..>.{.>A6.>
  408328:	3edae880 3ee0924f 3ee63375 3eebcbbb     ...>O..>u3.>...>
  408338:	3ef15aea 3ef6e0cb 3efc5d27 3f00e7e4     .Z.>...>'].>...?
  408348:	3f039c3d 3f064b82 3f08f59b 3f0b9a6b     =..?.K.?...?k..?
  408358:	3f0e39da 3f10d3cd 3f13682a 3f15f6d9     .9.?...?*h.?...?
  408368:	3f187fc0 3f1b02c6 3f1d7fd1 3f1ff6cb     ...?...?...?...?
  408378:	3f226799 3f24d225 3f273656 3f299415     .g"?%.$?V6'?..)?
  408388:	3f2beb4a 3f2e3bde 3f3085bb 3f32c8c9     J.+?.;.?..0?..2?
  408398:	3f3504f3 3f373a23 3f396842 3f3b8f3b     ..5?#:7?Bh9?;.;?
  4083a8:	3f3daef9 3f3fc767 3f41d870 3f43e201     ..=?g.??p.A?..C?
  4083b8:	3f45e403 3f47de65 3f49d112 3f4bbbf8     ..E?e.G?..I?..K?
  4083c8:	3f4d9f02 3f4f7a20 3f514d3d 3f531849     ..M? zO?=MQ?I.S?
  4083d8:	3f54db31 3f5695e5 3f584853 3f59f26a     1.T?..V?SHX?j.Y?
  4083e8:	3f5b941a 3f5d2d53 3f5ebe05 3f604621     ..[?S-]?..^?!F`?
  4083f8:	3f61c597 3f633c5a 3f64aa59 3f660f88     ..a?Z<c?Y.d?..f?
  408408:	3f676bd8 3f68bf3c 3f6a09a7 3f6b4b0c     .kg?<.h?..j?.Kk?
  408418:	3f6c835e 3f6db293 3f6ed89e 3f6ff573     ^.l?..m?..n?s.o?
  408428:	3f710908 3f721352 3f731447 3f740bdd     ..q?R.r?G.s?..t?
  408438:	3f74fa0b 3f75dec6 3f76ba07 3f778bc5     ..t?..u?..v?..w?
  408448:	3f7853f8 3f791298 3f79c79d 3f7a7302     .Sx?..y?..y?.sz?
  408458:	3f7b14be 3f7baccd 3f7c3b28 3f7cbfc9     ..{?..{?(;|?..|?
  408468:	3f7d3aac 3f7dabcc 3f7e1323 3f7e70b0     .:}?..}?#.~?.p~?
  408478:	3f7ec46d 3f7f0e58 3f7f4e6d 3f7f84ab     m.~?X..?mN.?...?
  408488:	3f7fb10f 3f7fd397 3f7fec43 3f7ffb11     ...?...?C..?...?
  408498:	3f800000 3f7ffb11 3f7fec43 3f7fd397     ...?...?C..?...?
  4084a8:	3f7fb10f 3f7f84ab 3f7f4e6d 3f7f0e58     ...?...?mN.?X..?
  4084b8:	3f7ec46d 3f7e70b0 3f7e1323 3f7dabcc     m.~?.p~?#.~?..}?
  4084c8:	3f7d3aac 3f7cbfc9 3f7c3b28 3f7baccd     .:}?..|?(;|?..{?
  4084d8:	3f7b14be 3f7a7302 3f79c79d 3f791298     ..{?.sz?..y?..y?
  4084e8:	3f7853f8 3f778bc5 3f76ba07 3f75dec6     .Sx?..w?..v?..u?
  4084f8:	3f74fa0b 3f740bdd 3f731447 3f721352     ..t?..t?G.s?R.r?
  408508:	3f710908 3f6ff573 3f6ed89e 3f6db293     ..q?s.o?..n?..m?
  408518:	3f6c835e 3f6b4b0c 3f6a09a7 3f68bf3c     ^.l?.Kk?..j?<.h?
  408528:	3f676bd8 3f660f88 3f64aa59 3f633c5a     .kg?..f?Y.d?Z<c?
  408538:	3f61c597 3f604621 3f5ebe05 3f5d2d53     ..a?!F`?..^?S-]?
  408548:	3f5b941a 3f59f26a 3f584853 3f5695e5     ..[?j.Y?SHX?..V?
  408558:	3f54db31 3f531849 3f514d3d 3f4f7a20     1.T?I.S?=MQ? zO?
  408568:	3f4d9f02 3f4bbbf8 3f49d112 3f47de65     ..M?..K?..I?e.G?
  408578:	3f45e403 3f43e201 3f41d870 3f3fc767     ..E?..C?p.A?g.??
  408588:	3f3daef9 3f3b8f3b 3f396842 3f373a23     ..=?;.;?Bh9?#:7?
  408598:	3f3504f3 3f32c8c9 3f3085bb 3f2e3bde     ..5?..2?..0?.;.?
  4085a8:	3f2beb4a 3f299415 3f273656 3f24d225     J.+?..)?V6'?%.$?
  4085b8:	3f226799 3f1ff6cb 3f1d7fd1 3f1b02c6     .g"?...?...?...?
  4085c8:	3f187fc0 3f15f6d9 3f13682a 3f10d3cd     ...?...?*h.?...?
  4085d8:	3f0e39da 3f0b9a6b 3f08f59b 3f064b82     .9.?k..?...?.K.?
  4085e8:	3f039c3d 3f00e7e4 3efc5d27 3ef6e0cb     =..?...?'].>...>
  4085f8:	3ef15aea 3eebcbbb 3ee63375 3ee0924f     .Z.>...>u3.>O..>
  408608:	3edae880 3ed53641 3ecf7bca 3ec9b953     ...>A6.>.{.>S..>
  408618:	3ec3ef15 3ebe1d49 3eb8442a 3eb263ef     ...>I..>*D.>.c.>
  408628:	3eac7cd4 3ea68f12 3ea09ae5 3e9aa086     .|.>...>...>...>
  408638:	3e94a032 3e8e9a22 3e888e93 3e827dc0     2..>"..>...>.}.>
  408648:	3e78cfcc 3e6c9a7f 3e605c13 3e541501     ..x>..l>.\`>..T>
  408658:	3e47c5c2 3e3b6ecf 3e2f10a2 3e22abb5     ..G>.n;>../>..">
  408668:	3e164083 3e09cf87 3dfab273 3de1bc2f     .@.>...>s..=/..=
  408678:	3dc8bd36 3dafb680 3d96a904 3d7b2b75     6..=...=...=u+{=
  408688:	3d48fb2e 3d16c32b 3cc90ab1 3c490e92     ..H=+..=...<..I<
  408698:	00000000 bc490e92 bcc90ab1 bd16c32b     ......I.....+...
  4086a8:	bd48fb2e bd7b2b75 bd96a904 bdafb680     ..H.u+{.........
  4086b8:	bdc8bd36 bde1bc2f bdfab273 be09cf87     6.../...s.......
  4086c8:	be164083 be22abb5 be2f10a2 be3b6ecf     .@....".../..n;.
  4086d8:	be47c5c2 be541501 be605c13 be6c9a7f     ..G...T..\`...l.
  4086e8:	be78cfcc be827dc0 be888e93 be8e9a22     ..x..}......"...
  4086f8:	be94a032 be9aa086 bea09ae5 bea68f12     2...............
  408708:	beac7cd4 beb263ef beb8442a bebe1d49     .|...c..*D..I...
  408718:	bec3ef15 bec9b953 becf7bca bed53641     ....S....{..A6..
  408728:	bedae880 bee0924f bee63375 beebcbbb     ....O...u3......
  408738:	bef15aea bef6e0cb befc5d27 bf00e7e4     .Z......']......
  408748:	bf039c3d bf064b82 bf08f59b bf0b9a6b     =....K......k...
  408758:	bf0e39da bf10d3cd bf13682a bf15f6d9     .9......*h......
  408768:	bf187fc0 bf1b02c6 bf1d7fd1 bf1ff6cb     ................
  408778:	bf226799 bf24d225 bf273656 bf299415     .g".%.$.V6'...).
  408788:	bf2beb4a bf2e3bde bf3085bb bf32c8c9     J.+..;....0...2.
  408798:	bf3504f3 bf373a23 bf396842 bf3b8f3b     ..5.#:7.Bh9.;.;.
  4087a8:	bf3daef9 bf3fc767 bf41d870 bf43e201     ..=.g.?.p.A...C.
  4087b8:	bf45e403 bf47de65 bf49d112 bf4bbbf8     ..E.e.G...I...K.
  4087c8:	bf4d9f02 bf4f7a20 bf514d3d bf531849     ..M. zO.=MQ.I.S.
  4087d8:	bf54db31 bf5695e5 bf584853 bf59f26a     1.T...V.SHX.j.Y.
  4087e8:	bf5b941a bf5d2d53 bf5ebe05 bf604621     ..[.S-]...^.!F`.
  4087f8:	bf61c597 bf633c5a bf64aa59 bf660f88     ..a.Z<c.Y.d...f.
  408808:	bf676bd8 bf68bf3c bf6a09a7 bf6b4b0c     .kg.<.h...j..Kk.
  408818:	bf6c835e bf6db293 bf6ed89e bf6ff573     ^.l...m...n.s.o.
  408828:	bf710908 bf721352 bf731447 bf740bdd     ..q.R.r.G.s...t.
  408838:	bf74fa0b bf75dec6 bf76ba07 bf778bc5     ..t...u...v...w.
  408848:	bf7853f8 bf791298 bf79c79d bf7a7302     .Sx...y...y..sz.
  408858:	bf7b14be bf7baccd bf7c3b28 bf7cbfc9     ..{...{.(;|...|.
  408868:	bf7d3aac bf7dabcc bf7e1323 bf7e70b0     .:}...}.#.~..p~.
  408878:	bf7ec46d bf7f0e58 bf7f4e6d bf7f84ab     m.~.X...mN......
  408888:	bf7fb10f bf7fd397 bf7fec43 bf7ffb11     ........C.......
  408898:	bf800000 bf7ffb11 bf7fec43 bf7fd397     ........C.......
  4088a8:	bf7fb10f bf7f84ab bf7f4e6d bf7f0e58     ........mN..X...
  4088b8:	bf7ec46d bf7e70b0 bf7e1323 bf7dabcc     m.~..p~.#.~...}.
  4088c8:	bf7d3aac bf7cbfc9 bf7c3b28 bf7baccd     .:}...|.(;|...{.
  4088d8:	bf7b14be bf7a7302 bf79c79d bf791298     ..{..sz...y...y.
  4088e8:	bf7853f8 bf778bc5 bf76ba07 bf75dec6     .Sx...w...v...u.
  4088f8:	bf74fa0b bf740bdd bf731447 bf721352     ..t...t.G.s.R.r.
  408908:	bf710908 bf6ff573 bf6ed89e bf6db293     ..q.s.o...n...m.
  408918:	bf6c835e bf6b4b0c bf6a09a7 bf68bf3c     ^.l..Kk...j.<.h.
  408928:	bf676bd8 bf660f88 bf64aa59 bf633c5a     .kg...f.Y.d.Z<c.
  408938:	bf61c597 bf604621 bf5ebe05 bf5d2d53     ..a.!F`...^.S-].
  408948:	bf5b941a bf59f26a bf584853 bf5695e5     ..[.j.Y.SHX...V.
  408958:	bf54db31 bf531849 bf514d3d bf4f7a20     1.T.I.S.=MQ. zO.
  408968:	bf4d9f02 bf4bbbf8 bf49d112 bf47de65     ..M...K...I.e.G.
  408978:	bf45e403 bf43e201 bf41d870 bf3fc767     ..E...C.p.A.g.?.
  408988:	bf3daef9 bf3b8f3b bf396842 bf373a23     ..=.;.;.Bh9.#:7.
  408998:	bf3504f3 bf32c8c9 bf3085bb bf2e3bde     ..5...2...0..;..
  4089a8:	bf2beb4a bf299415 bf273656 bf24d225     J.+...).V6'.%.$.
  4089b8:	bf226799 bf1ff6cb bf1d7fd1 bf1b02c6     .g".............
  4089c8:	bf187fc0 bf15f6d9 bf13682a bf10d3cd     ........*h......
  4089d8:	bf0e39da bf0b9a6b bf08f59b bf064b82     .9..k........K..
  4089e8:	bf039c3d bf00e7e4 befc5d27 bef6e0cb     =.......']......
  4089f8:	bef15aea beebcbbb bee63375 bee0924f     .Z......u3..O...
  408a08:	bedae880 bed53641 becf7bca bec9b953     ....A6...{..S...
  408a18:	bec3ef15 bebe1d49 beb8442a beb263ef     ....I...*D...c..
  408a28:	beac7cd4 bea68f12 bea09ae5 be9aa086     .|..............
  408a38:	be94a032 be8e9a22 be888e93 be827dc0     2..."........}..
  408a48:	be78cfcc be6c9a7f be605c13 be541501     ..x...l..\`...T.
  408a58:	be47c5c2 be3b6ecf be2f10a2 be22abb5     ..G..n;.../...".
  408a68:	be164083 be09cf87 bdfab273 bde1bc2f     .@......s.../...
  408a78:	bdc8bd36 bdafb680 bd96a904 bd7b2b75     6...........u+{.
  408a88:	bd48fb2e bd16c32b bcc90ab1 bc490e92     ..H.+.........I.
  408a98:	80000000 00676f6c                       ....log.

00408aa0 <_global_impure_ptr>:
  408aa0:	20400060 33323130 37363534 42413938     `.@ 0123456789AB
  408ab0:	46454443 00000000 33323130 37363534     CDEF....01234567
  408ac0:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  408ad0:	0000296c                                l)..

00408ad4 <blanks.8340>:
  408ad4:	20202020 20202020 20202020 20202020                     

00408ae4 <zeroes.8341>:
  408ae4:	30303030 30303030 30303030 30303030     0000000000000000
  408af4:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00408b04 <_ctype_>:
  408b04:	20202000 20202020 28282020 20282828     .         ((((( 
  408b14:	20202020 20202020 20202020 20202020                     
  408b24:	10108820 10101010 10101010 10101010      ...............
  408b34:	04040410 04040404 10040404 10101010     ................
  408b44:	41411010 41414141 01010101 01010101     ..AAAAAA........
  408b54:	01010101 01010101 01010101 10101010     ................
  408b64:	42421010 42424242 02020202 02020202     ..BBBBBB........
  408b74:	02020202 02020202 02020202 10101010     ................
  408b84:	00000020 00000000 00000000 00000000      ...............
	...

00408c08 <_init>:
  408c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408c0a:	bf00      	nop
  408c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408c0e:	bc08      	pop	{r3}
  408c10:	469e      	mov	lr, r3
  408c12:	4770      	bx	lr

00408c14 <__init_array_start>:
  408c14:	0040687d 	.word	0x0040687d

00408c18 <__frame_dummy_init_array_entry>:
  408c18:	00400165                                e.@.

00408c1c <_fini>:
  408c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408c1e:	bf00      	nop
  408c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408c22:	bc08      	pop	{r3}
  408c24:	469e      	mov	lr, r3
  408c26:	4770      	bx	lr

00408c28 <__fini_array_start>:
  408c28:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <inBuffer>:
2040000c:	9800 2044                                   ..D 

20400010 <inPingMode>:
20400010:	0001 0000                                   ....

20400014 <outBuffer>:
20400014:	7800 2044                                   .xD 

20400018 <outPingMode>:
20400018:	0001 0000                                   ....

2040001c <pitchtracker>:
2040001c:	0000 bf80 ffff ffff                         ........

20400024 <g_interrupt_enabled>:
20400024:	0001 0000                                   ....

20400028 <SystemCoreClock>:
20400028:	0900 003d                                   ..=.

2040002c <autotune>:
2040002c:	0001 0000                                   ....

20400030 <chorus_speed>:
20400030:	d70a 3ca3                                   ...<

20400034 <delay_feedback>:
20400034:	cccd 3e4c                                   ..L>

20400038 <delay_speed>:
20400038:	2710 0000                                   .'..

2040003c <dry_volume>:
2040003c:	0000 3f80                                   ...?

20400040 <harm_volume>:
20400040:	0000 3f80                                   ...?

20400044 <harmony_list_fill>:
20400044:	a818 2044                                   ..D 

20400048 <harmony_list_read>:
20400048:	a870 2044                                   p.D 

2040004c <master_volume>:
2040004c:	0000 3f80                                   ...?

20400050 <pitch_bend>:
20400050:	0040 0000                                   @...

20400054 <__fdlib_version>:
20400054:	0001 0000                                   ....

20400058 <_impure_ptr>:
20400058:	0060 2040 0000 0000                         `.@ ....

20400060 <impure_data>:
20400060:	0000 0000 034c 2040 03b4 2040 041c 2040     ....L.@ ..@ ..@ 
	...
20400108:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400118:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400488 <__malloc_av_>:
	...
20400490:	0488 2040 0488 2040 0490 2040 0490 2040     ..@ ..@ ..@ ..@ 
204004a0:	0498 2040 0498 2040 04a0 2040 04a0 2040     ..@ ..@ ..@ ..@ 
204004b0:	04a8 2040 04a8 2040 04b0 2040 04b0 2040     ..@ ..@ ..@ ..@ 
204004c0:	04b8 2040 04b8 2040 04c0 2040 04c0 2040     ..@ ..@ ..@ ..@ 
204004d0:	04c8 2040 04c8 2040 04d0 2040 04d0 2040     ..@ ..@ ..@ ..@ 
204004e0:	04d8 2040 04d8 2040 04e0 2040 04e0 2040     ..@ ..@ ..@ ..@ 
204004f0:	04e8 2040 04e8 2040 04f0 2040 04f0 2040     ..@ ..@ ..@ ..@ 
20400500:	04f8 2040 04f8 2040 0500 2040 0500 2040     ..@ ..@ ..@ ..@ 
20400510:	0508 2040 0508 2040 0510 2040 0510 2040     ..@ ..@ ..@ ..@ 
20400520:	0518 2040 0518 2040 0520 2040 0520 2040     ..@ ..@  .@  .@ 
20400530:	0528 2040 0528 2040 0530 2040 0530 2040     (.@ (.@ 0.@ 0.@ 
20400540:	0538 2040 0538 2040 0540 2040 0540 2040     8.@ 8.@ @.@ @.@ 
20400550:	0548 2040 0548 2040 0550 2040 0550 2040     H.@ H.@ P.@ P.@ 
20400560:	0558 2040 0558 2040 0560 2040 0560 2040     X.@ X.@ `.@ `.@ 
20400570:	0568 2040 0568 2040 0570 2040 0570 2040     h.@ h.@ p.@ p.@ 
20400580:	0578 2040 0578 2040 0580 2040 0580 2040     x.@ x.@ ..@ ..@ 
20400590:	0588 2040 0588 2040 0590 2040 0590 2040     ..@ ..@ ..@ ..@ 
204005a0:	0598 2040 0598 2040 05a0 2040 05a0 2040     ..@ ..@ ..@ ..@ 
204005b0:	05a8 2040 05a8 2040 05b0 2040 05b0 2040     ..@ ..@ ..@ ..@ 
204005c0:	05b8 2040 05b8 2040 05c0 2040 05c0 2040     ..@ ..@ ..@ ..@ 
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 
20400870:	0868 2040 0868 2040 0870 2040 0870 2040     h.@ h.@ p.@ p.@ 
20400880:	0878 2040 0878 2040 0880 2040 0880 2040     x.@ x.@ ..@ ..@ 

20400890 <__malloc_sbrk_base>:
20400890:	ffff ffff                                   ....

20400894 <__malloc_trim_threshold>:
20400894:	0000 0002                                   ....

20400898 <__atexit_recursive_mutex>:
20400898:	a8c8 2044                                   ..D 

2040089c <__global_locale>:
2040089c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008bc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040091c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040093c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040095c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040097c:	7a61 0040 7305 0040 0000 0000 8b04 0040     az@..s@.......@.
2040098c:	8b00 0040 8ab4 0040 8ab4 0040 8ab4 0040     ..@...@...@...@.
2040099c:	8ab4 0040 8ab4 0040 8ab4 0040 8ab4 0040     ..@...@...@...@.
204009ac:	8ab4 0040 8ab4 0040 ffff ffff ffff ffff     ..@...@.........
204009bc:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009e4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
