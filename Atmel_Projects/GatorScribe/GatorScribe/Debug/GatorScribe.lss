
GatorScribe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a00c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040a00c  0040a00c  0001a00c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a08  20400000  0040a014  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0003dcfc  20402000  0040e000  00022000  2**13
                  ALLOC
  4 .stack        00002004  2043fcfc  0044bcfc  00022000  2**0
                  ALLOC
  5 .heap         00000200  20441d00  0044dd00  00022000  2**0
                  ALLOC
  6 .ARM.attributes 0000002c  00000000  00000000  00020a08  2**0
                  CONTENTS, READONLY
  7 .comment      000000b4  00000000  00000000  00020a34  2**0
                  CONTENTS, READONLY
  8 .debug_info   000423d1  00000000  00000000  00020ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00008c63  00000000  00000000  00062eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001ad85  00000000  00000000  0006bb1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001668  00000000  00000000  000868a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000051a0  00000000  00000000  00087f09  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002ed01  00000000  00000000  0008d0a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00026cc2  00000000  00000000  000bbdaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a7c21  00000000  00000000  000e2a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004bc0  00000000  00000000  0018a690  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	00 1d 44 20 cd 31 40 00 c5 31 40 00 c9 31 40 00     ..D .1@..1@..1@.
  400010:	c5 31 40 00 c5 31 40 00 c5 31 40 00 00 00 00 00     .1@..1@..1@.....
	...
  40002c:	21 36 40 00 c5 31 40 00 00 00 00 00 c1 36 40 00     !6@..1@......6@.
  40003c:	25 37 40 00 c5 31 40 00 c5 31 40 00 c5 31 40 00     %7@..1@..1@..1@.
  40004c:	c5 31 40 00 c5 31 40 00 c5 31 40 00 c5 31 40 00     .1@..1@..1@..1@.
  40005c:	c5 31 40 00 c5 31 40 00 00 00 00 00 fd 2b 40 00     .1@..1@......+@.
  40006c:	c9 2c 40 00 95 2d 40 00 c5 31 40 00 81 51 40 00     .,@..-@..1@..Q@.
  40007c:	c5 31 40 00 61 2e 40 00 2d 2f 40 00 c5 31 40 00     .1@.a.@.-/@..1@.
  40008c:	c5 31 40 00 c5 31 40 00 c5 31 40 00 c5 31 40 00     .1@..1@..1@..1@.
  40009c:	c5 31 40 00 c5 31 40 00 c5 31 40 00 c5 31 40 00     .1@..1@..1@..1@.
  4000ac:	c5 31 40 00 c5 31 40 00 c5 31 40 00 c5 31 40 00     .1@..1@..1@..1@.
  4000bc:	c5 31 40 00 c5 31 40 00 c5 31 40 00 c5 31 40 00     .1@..1@..1@..1@.
  4000cc:	c5 31 40 00 00 00 00 00 c5 31 40 00 00 00 00 00     .1@......1@.....
  4000dc:	c5 31 40 00 c5 31 40 00 c5 31 40 00 c5 31 40 00     .1@..1@..1@..1@.
  4000ec:	c5 31 40 00 c5 31 40 00 c5 31 40 00 c5 31 40 00     .1@..1@..1@..1@.
  4000fc:	c5 31 40 00 c5 31 40 00 c5 31 40 00 c5 31 40 00     .1@..1@..1@..1@.
  40010c:	c5 31 40 00 c5 31 40 00 c5 31 40 00 00 00 00 00     .1@..1@..1@.....
  40011c:	00 00 00 00 c5 31 40 00 c5 31 40 00 ad 01 40 00     .....1@..1@...@.
  40012c:	c5 31 40 00 c5 31 40 00 00 00 00 00 c5 31 40 00     .1@..1@......1@.
  40013c:	c5 31 40 00                                         .1@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20402000 	.word	0x20402000
  40015c:	00000000 	.word	0x00000000
  400160:	0040a014 	.word	0x0040a014

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040a014 	.word	0x0040a014
  4001a0:	20402004 	.word	0x20402004
  4001a4:	0040a014 	.word	0x0040a014
  4001a8:	00000000 	.word	0x00000000

004001ac <XDMAC_Handler>:
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4001ac:	4b21      	ldr	r3, [pc, #132]	; (400234 <XDMAC_Handler+0x88>)
/*********************************** Extern Variables End ***********************************/

#define One_over_max_int16 0.0000305185f 
/******************************* XDMAC Interrupt Handler Start *******************************/ 
void XDMAC_Handler(void)
{
  4001ae:	b470      	push	{r4, r5, r6}
  4001b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    uint32_t dma_status;
    
    dma_status = xdmac_channel_get_interrupt_status(XDMAC, XDMA_CH_SSC_RX);
    if (dma_status & XDMAC_CIS_BIS)
  4001b2:	07da      	lsls	r2, r3, #31
  4001b4:	d529      	bpl.n	40020a <XDMAC_Handler+0x5e>
    {
		// Update input and process buffers to be used 
		if(inPingMode)
  4001b6:	4d20      	ldr	r5, [pc, #128]	; (400238 <XDMAC_Handler+0x8c>)
		else 
		{
			inBuffer = inPongBuffer; 
			processBuffer = processPongBuffer; 
		}
		inPingMode = !inPingMode; 
  4001b8:	2200      	movs	r2, #0
			processBuffer = processPingBuffer; 
  4001ba:	4c20      	ldr	r4, [pc, #128]	; (40023c <XDMAC_Handler+0x90>)
		if(inPingMode)
  4001bc:	782b      	ldrb	r3, [r5, #0]
			processBuffer = processPingBuffer; 
  4001be:	4820      	ldr	r0, [pc, #128]	; (400240 <XDMAC_Handler+0x94>)
  4001c0:	4293      	cmp	r3, r2
		inPingMode = !inPingMode; 
  4001c2:	782e      	ldrb	r6, [r5, #0]
			processBuffer = processPingBuffer; 
  4001c4:	491f      	ldr	r1, [pc, #124]	; (400244 <XDMAC_Handler+0x98>)
  4001c6:	4b20      	ldr	r3, [pc, #128]	; (400248 <XDMAC_Handler+0x9c>)
  4001c8:	bf1c      	itt	ne
  4001ca:	4621      	movne	r1, r4
  4001cc:	4603      	movne	r3, r0
		inPingMode = !inPingMode; 
  4001ce:	f086 0601 	eor.w	r6, r6, #1
  4001d2:	4c1e      	ldr	r4, [pc, #120]	; (40024c <XDMAC_Handler+0xa0>)
  4001d4:	481e      	ldr	r0, [pc, #120]	; (400250 <XDMAC_Handler+0xa4>)
		
		int processIdx = 0;
		// Fill process buffer - only left channel decimated by 1
		for(int i = 0; i < IO_BUF_SIZE; i+=2)
		{
			processBuffer[processIdx++] = ((float )(int16_t)inBuffer[i]) * One_over_max_int16; 
  4001d6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 400254 <XDMAC_Handler+0xa8>
		inPingMode = !inPingMode; 
  4001da:	702e      	strb	r6, [r5, #0]
  4001dc:	6021      	str	r1, [r4, #0]
  4001de:	6003      	str	r3, [r0, #0]
  4001e0:	e001      	b.n	4001e6 <XDMAC_Handler+0x3a>
  4001e2:	6821      	ldr	r1, [r4, #0]
  4001e4:	6803      	ldr	r3, [r0, #0]
			processBuffer[processIdx++] = ((float )(int16_t)inBuffer[i]) * One_over_max_int16; 
  4001e6:	5a9b      	ldrh	r3, [r3, r2]
  4001e8:	4411      	add	r1, r2
  4001ea:	3204      	adds	r2, #4
  4001ec:	b21b      	sxth	r3, r3
		for(int i = 0; i < IO_BUF_SIZE; i+=2)
  4001ee:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
			processBuffer[processIdx++] = ((float )(int16_t)inBuffer[i]) * One_over_max_int16; 
  4001f2:	ee07 3a90 	vmov	s15, r3
  4001f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4001fa:	ee67 7a87 	vmul.f32	s15, s15, s14
  4001fe:	edc1 7a00 	vstr	s15, [r1]
		for(int i = 0; i < IO_BUF_SIZE; i+=2)
  400202:	d1ee      	bne.n	4001e2 <XDMAC_Handler+0x36>
		}
		dataReceived = true; // can check for out of time here 
  400204:	4b14      	ldr	r3, [pc, #80]	; (400258 <XDMAC_Handler+0xac>)
  400206:	2201      	movs	r2, #1
  400208:	701a      	strb	r2, [r3, #0]
  40020a:	4b0a      	ldr	r3, [pc, #40]	; (400234 <XDMAC_Handler+0x88>)
  40020c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    }
	
	dma_status = xdmac_channel_get_interrupt_status(XDMAC, XDMA_CH_SSC_TX);
	if (dma_status & XDMAC_CIS_BIS)
  400210:	07db      	lsls	r3, r3, #31
  400212:	d50c      	bpl.n	40022e <XDMAC_Handler+0x82>
	{
		// update output buffer to be used 
		if(outPingMode)
  400214:	4b11      	ldr	r3, [pc, #68]	; (40025c <XDMAC_Handler+0xb0>)
		{
			outBuffer = outPingBuffer; 
  400216:	4812      	ldr	r0, [pc, #72]	; (400260 <XDMAC_Handler+0xb4>)
		if(outPingMode)
  400218:	781c      	ldrb	r4, [r3, #0]
			outBuffer = outPingBuffer; 
  40021a:	4912      	ldr	r1, [pc, #72]	; (400264 <XDMAC_Handler+0xb8>)
		}
		else
		{
			outBuffer = outPongBuffer; 
		}
		outPingMode = !outPingMode; 
  40021c:	781a      	ldrb	r2, [r3, #0]
			outBuffer = outPingBuffer; 
  40021e:	2c00      	cmp	r4, #0
  400220:	bf18      	it	ne
  400222:	4601      	movne	r1, r0
  400224:	4810      	ldr	r0, [pc, #64]	; (400268 <XDMAC_Handler+0xbc>)
		outPingMode = !outPingMode; 
  400226:	f082 0201 	eor.w	r2, r2, #1
  40022a:	6001      	str	r1, [r0, #0]
  40022c:	701a      	strb	r2, [r3, #0]
	}
}
  40022e:	bc70      	pop	{r4, r5, r6}
  400230:	4770      	bx	lr
  400232:	bf00      	nop
  400234:	40078000 	.word	0x40078000
  400238:	20400010 	.word	0x20400010
  40023c:	2043cc00 	.word	0x2043cc00
  400240:	2043f400 	.word	0x2043f400
  400244:	2043ec00 	.word	0x2043ec00
  400248:	2043d400 	.word	0x2043d400
  40024c:	2040001c 	.word	0x2040001c
  400250:	2040000c 	.word	0x2040000c
  400254:	380000fd 	.word	0x380000fd
  400258:	2040201c 	.word	0x2040201c
  40025c:	20400018 	.word	0x20400018
  400260:	2043dc00 	.word	0x2043dc00
  400264:	2043e400 	.word	0x2043e400
  400268:	20400014 	.word	0x20400014

0040026c <configure_xdma>:
/******************************* XDMAC Interrupt Handler End *******************************/

/********************************** Public Functions Start **********************************/
void configure_xdma(void)
{
  40026c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint16_t *src;
    
    xdmac_channel_config_t xdmac_channel_cfg = {0};
  400270:	2620      	movs	r6, #32
{
  400272:	b088      	sub	sp, #32
    xdmac_channel_config_t xdmac_channel_cfg = {0};
  400274:	2100      	movs	r1, #0
  400276:	4b30      	ldr	r3, [pc, #192]	; (400338 <configure_xdma+0xcc>)
  400278:	4632      	mov	r2, r6
  40027a:	4668      	mov	r0, sp
  40027c:	4798      	blx	r3
    
    /* Initialize and enable DMA controller */
    pmc_enable_periph_clk(ID_XDMAC);
  40027e:	4b2f      	ldr	r3, [pc, #188]	; (40033c <configure_xdma+0xd0>)
  400280:	203a      	movs	r0, #58	; 0x3a
    | XDMAC_CC_DIF_AHB_IF0
    | XDMAC_CC_SAM_FIXED_AM
    | XDMAC_CC_DAM_INCREMENTED_AM
    | XDMAC_CC_PERID(33);
	
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  400282:	4c2f      	ldr	r4, [pc, #188]	; (400340 <configure_xdma+0xd4>)
    pmc_enable_periph_clk(ID_XDMAC);
  400284:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400286:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
  40028a:	4b2e      	ldr	r3, [pc, #184]	; (400344 <configure_xdma+0xd8>)
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  40028c:	466a      	mov	r2, sp
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  40028e:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 400358 <configure_xdma+0xec>
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  400292:	4620      	mov	r0, r4
  400294:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
  400298:	2100      	movs	r1, #0
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40029a:	f883 633a 	strb.w	r6, [r3, #826]	; 0x33a
 */
static inline void xdmac_channel_set_descriptor_control(Xdmac *xdmac, uint32_t channel_num, uint32_t config)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  40029e:	270f      	movs	r7, #15
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4002a0:	605d      	str	r5, [r3, #4]
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  4002a2:	2501      	movs	r5, #1
  4002a4:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 40035c <configure_xdma+0xf0>
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4002a8:	f8cd e00c 	str.w	lr, [sp, #12]
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  4002ac:	47c0      	blx	r8
    
    /* Initialize linked list descriptor */
    src = (uint16_t *)&inPingBuffer[0];
    linklist_read[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002ae:	4b26      	ldr	r3, [pc, #152]	; (400348 <configure_xdma+0xdc>)
    | XDMAC_CC_DIF_AHB_IF1
    | XDMAC_CC_SAM_INCREMENTED_AM
    | XDMAC_CC_DAM_FIXED_AM
    | XDMAC_CC_PERID(32);
	
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  4002b0:	466a      	mov	r2, sp
    linklist_read[0].mbr_da = (uint32_t)(src);
  4002b2:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 400360 <configure_xdma+0xf4>
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  4002b6:	4629      	mov	r1, r5
    linklist_read[0].mbr_nda = (uint32_t)&linklist_read[1];
  4002b8:	f103 0010 	add.w	r0, r3, #16
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  4002bc:	f023 0603 	bic.w	r6, r3, #3
	linklist_read[1].mbr_da = (uint32_t)(src);
  4002c0:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 400364 <configure_xdma+0xf8>
    linklist_read[0].mbr_nda = (uint32_t)&linklist_read[1];
  4002c4:	6018      	str	r0, [r3, #0]
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  4002c6:	4620      	mov	r0, r4
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  4002c8:	66e7      	str	r7, [r4, #108]	; 0x6c
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  4002ca:	66a6      	str	r6, [r4, #104]	; 0x68
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  4002cc:	60e5      	str	r5, [r4, #12]
    linklist_read[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002ce:	4e1f      	ldr	r6, [pc, #124]	; (40034c <configure_xdma+0xe0>)
	xdmac->XDMAC_CHID[channel_num].XDMAC_CIE = mask;
  4002d0:	6525      	str	r5, [r4, #80]	; 0x50
    linklist_read[0].mbr_da = (uint32_t)(src);
  4002d2:	f8c3 e00c 	str.w	lr, [r3, #12]
    linklist_read[0].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  4002d6:	f8df e090 	ldr.w	lr, [pc, #144]	; 400368 <configure_xdma+0xfc>
	linklist_read[1].mbr_da = (uint32_t)(src);
  4002da:	f8c3 c01c 	str.w	ip, [r3, #28]
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4002de:	f8df c08c 	ldr.w	ip, [pc, #140]	; 40036c <configure_xdma+0x100>
    linklist_read[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002e2:	605e      	str	r6, [r3, #4]
	linklist_read[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002e4:	615e      	str	r6, [r3, #20]
    linklist_read[0].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  4002e6:	f8c3 e008 	str.w	lr, [r3, #8]
	linklist_read[1].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  4002ea:	f8c3 e018 	str.w	lr, [r3, #24]
	linklist_read[1].mbr_nda = (uint32_t)&linklist_read[0];
  4002ee:	611b      	str	r3, [r3, #16]
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4002f0:	f8cd c00c 	str.w	ip, [sp, #12]
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  4002f4:	47c0      	blx	r8
    
    src = (uint16_t *)&outPingBuffer[0];
    linklist_write[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002f6:	4b16      	ldr	r3, [pc, #88]	; (400350 <configure_xdma+0xe4>)
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  4002f8:	2102      	movs	r1, #2
		 | XDMAC_UBC_NDE_FETCH_EN
		 | XDMAC_UBC_NSEN_UPDATED
			| XDMAC_CUBC_UBLEN(IO_BUF_SIZE);
    linklist_write[0].mbr_sa = (uint32_t)(src);
    linklist_write[0].mbr_da = (uint32_t)&(SSC->SSC_THR);
  4002fa:	4a16      	ldr	r2, [pc, #88]	; (400354 <configure_xdma+0xe8>)
    linklist_write[0].mbr_sa = (uint32_t)(src);
  4002fc:	f8df c070 	ldr.w	ip, [pc, #112]	; 400370 <configure_xdma+0x104>
    linklist_write[0].mbr_nda = (uint32_t)&linklist_write[1];
  400300:	f103 0810 	add.w	r8, r3, #16
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  400304:	f023 0003 	bic.w	r0, r3, #3
	src = (uint16_t *)&outPongBuffer[0];
	linklist_write[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
	    | XDMAC_UBC_NDE_FETCH_EN
	    | XDMAC_UBC_NSEN_UPDATED
	    | XDMAC_CUBC_UBLEN(IO_BUF_SIZE);
	linklist_write[1].mbr_sa = (uint32_t)(src);
  400308:	f8df e068 	ldr.w	lr, [pc, #104]	; 400374 <configure_xdma+0x108>
    linklist_write[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  40030c:	605e      	str	r6, [r3, #4]
	linklist_write[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  40030e:	615e      	str	r6, [r3, #20]
	linklist_write[1].mbr_da = (uint32_t)&(SSC->SSC_THR);
	linklist_write[1].mbr_nda = (uint32_t)&linklist_write[0];
  400310:	611b      	str	r3, [r3, #16]
    linklist_write[0].mbr_nda = (uint32_t)&linklist_write[1];
  400312:	f8c3 8000 	str.w	r8, [r3]
    linklist_write[0].mbr_sa = (uint32_t)(src);
  400316:	f8c3 c008 	str.w	ip, [r3, #8]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  40031a:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
	linklist_write[1].mbr_sa = (uint32_t)(src);
  40031e:	f8c3 e018 	str.w	lr, [r3, #24]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  400322:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
    linklist_write[0].mbr_da = (uint32_t)&(SSC->SSC_THR);
  400326:	60da      	str	r2, [r3, #12]
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  400328:	60e1      	str	r1, [r4, #12]
	linklist_write[1].mbr_da = (uint32_t)&(SSC->SSC_THR);
  40032a:	61da      	str	r2, [r3, #28]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CIE = mask;
  40032c:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
    xdmac_channel_set_descriptor_addr(XDMAC, XDMA_CH_SSC_TX, (uint32_t)(&linklist_write[0]), 0);
    
    xdmac_enable_interrupt(XDMAC, XDMA_CH_SSC_TX);
    xdmac_channel_enable_interrupt(XDMAC, XDMA_CH_SSC_TX, XDMAC_CIE_BIE);
    
}
  400330:	b008      	add	sp, #32
  400332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400336:	bf00      	nop
  400338:	00406cfd 	.word	0x00406cfd
  40033c:	00403101 	.word	0x00403101
  400340:	40078000 	.word	0x40078000
  400344:	e000e100 	.word	0xe000e100
  400348:	20402020 	.word	0x20402020
  40034c:	0b000400 	.word	0x0b000400
  400350:	20402040 	.word	0x20402040
  400354:	40004024 	.word	0x40004024
  400358:	21042801 	.word	0x21042801
  40035c:	00402571 	.word	0x00402571
  400360:	2043f400 	.word	0x2043f400
  400364:	2043d400 	.word	0x2043d400
  400368:	40004020 	.word	0x40004020
  40036c:	20014811 	.word	0x20014811
  400370:	2043dc00 	.word	0x2043dc00
  400374:	2043e400 	.word	0x2043e400

00400378 <audio_init>:

#include "DMA_Audio.h"
#include "WM8904_Driver.h"

void audio_init(void)
{
  400378:	b510      	push	{r4, lr}
	/* Initialize WM8904 TWI interface*/
	if (wm8904_twi_init() != TWIHS_SUCCESS) {
  40037a:	4b13      	ldr	r3, [pc, #76]	; (4003c8 <audio_init+0x50>)
  40037c:	4798      	blx	r3
  40037e:	b118      	cbz	r0, 400388 <audio_init+0x10>
		printf("-E-\tWM8904 initialization failed.\r");
  400380:	4812      	ldr	r0, [pc, #72]	; (4003cc <audio_init+0x54>)
  400382:	4b13      	ldr	r3, [pc, #76]	; (4003d0 <audio_init+0x58>)
  400384:	4798      	blx	r3
  400386:	e7fe      	b.n	400386 <audio_init+0xe>
			/* Capture error */
		}
	}
		
	/* Configure CODEC */
	configure_codec();
  400388:	4b12      	ldr	r3, [pc, #72]	; (4003d4 <audio_init+0x5c>)
  40038a:	4604      	mov	r4, r0
  40038c:	4798      	blx	r3
		
	/* Configure SSC */
	configure_ssc();
  40038e:	4b12      	ldr	r3, [pc, #72]	; (4003d8 <audio_init+0x60>)
  400390:	4798      	blx	r3
		
	/* Configure XDMA */
	configure_xdma();
  400392:	4b12      	ldr	r3, [pc, #72]	; (4003dc <audio_init+0x64>)
  400394:	4798      	blx	r3
		
	/* Enable the DAC master clock */
	pmc_pck_set_prescaler(PMC_PCK_2, PMC_MCKR_PRES_CLK_1);
  400396:	4621      	mov	r1, r4
  400398:	2002      	movs	r0, #2
  40039a:	4b11      	ldr	r3, [pc, #68]	; (4003e0 <audio_init+0x68>)
  40039c:	4798      	blx	r3
	pmc_pck_set_source(PMC_PCK_2, PMC_MCKR_CSS_SLOW_CLK);
  40039e:	4621      	mov	r1, r4
  4003a0:	2002      	movs	r0, #2
  4003a2:	4b10      	ldr	r3, [pc, #64]	; (4003e4 <audio_init+0x6c>)
  4003a4:	4798      	blx	r3
	pmc_enable_pck(PMC_PCK_2);
  4003a6:	2002      	movs	r0, #2
  4003a8:	4b0f      	ldr	r3, [pc, #60]	; (4003e8 <audio_init+0x70>)
  4003aa:	4798      	blx	r3
		
	/* Start playing */
	ssc_enable_rx(SSC);
  4003ac:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4003b0:	4b0e      	ldr	r3, [pc, #56]	; (4003ec <audio_init+0x74>)
  4003b2:	4798      	blx	r3
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  4003b4:	4c0e      	ldr	r4, [pc, #56]	; (4003f0 <audio_init+0x78>)
  4003b6:	2201      	movs	r2, #1
	xdmac_channel_enable(XDMAC, XDMA_CH_SSC_RX);
	// might want to enable in the first xdma interrupt (if you care)
	ssc_enable_tx(SSC);
  4003b8:	4b0e      	ldr	r3, [pc, #56]	; (4003f4 <audio_init+0x7c>)
  4003ba:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4003be:	61e2      	str	r2, [r4, #28]
  4003c0:	4798      	blx	r3
  4003c2:	2302      	movs	r3, #2
  4003c4:	61e3      	str	r3, [r4, #28]
  4003c6:	bd10      	pop	{r4, pc}
  4003c8:	00401ced 	.word	0x00401ced
  4003cc:	004093d8 	.word	0x004093d8
  4003d0:	00406631 	.word	0x00406631
  4003d4:	004004bd 	.word	0x004004bd
  4003d8:	004003f9 	.word	0x004003f9
  4003dc:	0040026d 	.word	0x0040026d
  4003e0:	00403149 	.word	0x00403149
  4003e4:	0040317d 	.word	0x0040317d
  4003e8:	004031b1 	.word	0x004031b1
  4003ec:	0040217d 	.word	0x0040217d
  4003f0:	40078000 	.word	0x40078000
  4003f4:	0040218d 	.word	0x0040218d

004003f8 <configure_ssc>:
#include "WM8904_Driver.h"


/********************************** Public Functions Start **********************************/
void configure_ssc(void)
{
  4003f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	clock_opt_t tx_clk_option, rx_clk_option;
	data_frame_opt_t tx_data_frame_option, rx_data_frame_option;

	/* Initialize clock */
	pmc_enable_periph_clk(ID_SSC);
  4003fc:	4b28      	ldr	r3, [pc, #160]	; (4004a0 <configure_ssc+0xa8>)
{
  4003fe:	b09c      	sub	sp, #112	; 0x70
	pmc_enable_periph_clk(ID_SSC);
  400400:	2016      	movs	r0, #22
	/* Reset SSC */
	ssc_reset(SSC);

	/* Transmitter clock mode configuration. */
	tx_clk_option.ul_cks = SSC_TCMR_CKS_TK;
	tx_clk_option.ul_cko = SSC_TCMR_CKO_NONE;
  400402:	2400      	movs	r4, #0
	pmc_enable_periph_clk(ID_SSC);
  400404:	4798      	blx	r3
	ssc_reset(SSC);
  400406:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40040a:	4b26      	ldr	r3, [pc, #152]	; (4004a4 <configure_ssc+0xac>)
	tx_clk_option.ul_cki = 0;
	tx_clk_option.ul_ckg = SSC_TCMR_CKG_CONTINUOUS;
	tx_clk_option.ul_start_sel = SSC_TCMR_START_TF_EDGE;
	tx_clk_option.ul_sttdly = 1;
	tx_clk_option.ul_period = BITS_BY_SLOT - 1;
  40040c:	250f      	movs	r5, #15
	ssc_reset(SSC);
  40040e:	4798      	blx	r3
	tx_clk_option.ul_sttdly = 1;
  400410:	2601      	movs	r6, #1
	tx_clk_option.ul_start_sel = SSC_TCMR_START_TF_EDGE;
  400412:	f44f 68e0 	mov.w	r8, #1792	; 0x700
	tx_clk_option.ul_cks = SSC_TCMR_CKS_TK;
  400416:	f04f 0e02 	mov.w	lr, #2
	/* Transmitter frame mode configuration. */
	tx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
	tx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  40041a:	2780      	movs	r7, #128	; 0x80
	tx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;
	tx_data_frame_option.ul_fslen_ext = 0;
	tx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
	tx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
	/* Configure the SSC transmitter to I2S mode. */
	ssc_set_transmitter(SSC, &tx_clk_option, &tx_data_frame_option);
  40041c:	aa0e      	add	r2, sp, #56	; 0x38
  40041e:	4669      	mov	r1, sp
  400420:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400424:	4b20      	ldr	r3, [pc, #128]	; (4004a8 <configure_ssc+0xb0>)
	tx_clk_option.ul_cks = SSC_TCMR_CKS_TK;
  400426:	f8cd e000 	str.w	lr, [sp]
	tx_clk_option.ul_cko = SSC_TCMR_CKO_NONE;
  40042a:	9401      	str	r4, [sp, #4]
	tx_clk_option.ul_cki = 0;
  40042c:	9402      	str	r4, [sp, #8]
	tx_clk_option.ul_ckg = SSC_TCMR_CKG_CONTINUOUS;
  40042e:	9403      	str	r4, [sp, #12]
	tx_data_frame_option.ul_datnb = 0;
  400430:	9410      	str	r4, [sp, #64]	; 0x40
	tx_data_frame_option.ul_fslen_ext = 0;
  400432:	9412      	str	r4, [sp, #72]	; 0x48
	tx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  400434:	9413      	str	r4, [sp, #76]	; 0x4c
	tx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  400436:	9414      	str	r4, [sp, #80]	; 0x50
	tx_clk_option.ul_start_sel = SSC_TCMR_START_TF_EDGE;
  400438:	f8cd 8018 	str.w	r8, [sp, #24]
	tx_clk_option.ul_sttdly = 1;
  40043c:	9605      	str	r6, [sp, #20]
	tx_clk_option.ul_period = BITS_BY_SLOT - 1;
  40043e:	9504      	str	r5, [sp, #16]
	tx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
  400440:	950e      	str	r5, [sp, #56]	; 0x38
	tx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;
  400442:	9511      	str	r5, [sp, #68]	; 0x44
	tx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  400444:	970f      	str	r7, [sp, #60]	; 0x3c
	ssc_set_transmitter(SSC, &tx_clk_option, &tx_data_frame_option);
  400446:	4798      	blx	r3

	/* Receiver clock mode configuration. */
	rx_clk_option.ul_cks = SSC_RCMR_CKS_TK;
	rx_clk_option.ul_cko = SSC_RCMR_CKO_NONE;
	rx_clk_option.ul_cki = SSC_RCMR_CKI;
  400448:	f04f 0c20 	mov.w	ip, #32
	rx_clk_option.ul_ckg = SSC_RCMR_CKG_CONTINUOUS;
	rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_EDGE;
	rx_clk_option.ul_sttdly = 1;	
	rx_clk_option.ul_period = BITS_BY_SLOT;	
  40044c:	f04f 0e10 	mov.w	lr, #16
	rx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;	
	rx_data_frame_option.ul_fslen_ext = 0;
	rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
	rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
	/* Configure the SSC transmitter to I2S mode. */
	ssc_set_receiver(SSC, &rx_clk_option, &rx_data_frame_option);
  400450:	aa15      	add	r2, sp, #84	; 0x54
  400452:	a907      	add	r1, sp, #28
  400454:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400458:	4b14      	ldr	r3, [pc, #80]	; (4004ac <configure_ssc+0xb4>)
	rx_clk_option.ul_cki = SSC_RCMR_CKI;
  40045a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
	rx_clk_option.ul_period = BITS_BY_SLOT;	
  40045e:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
	rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_EDGE;
  400462:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
	rx_clk_option.ul_cks = SSC_RCMR_CKS_TK;
  400466:	9607      	str	r6, [sp, #28]
	rx_clk_option.ul_cko = SSC_RCMR_CKO_NONE;
  400468:	9408      	str	r4, [sp, #32]
	rx_clk_option.ul_ckg = SSC_RCMR_CKG_CONTINUOUS;
  40046a:	940a      	str	r4, [sp, #40]	; 0x28
	rx_clk_option.ul_sttdly = 1;	
  40046c:	960c      	str	r6, [sp, #48]	; 0x30
	rx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
  40046e:	9515      	str	r5, [sp, #84]	; 0x54
	rx_data_frame_option.ul_msbf = SSC_RFMR_MSBF;
  400470:	9716      	str	r7, [sp, #88]	; 0x58
	rx_data_frame_option.ul_datnb = 0;
  400472:	9417      	str	r4, [sp, #92]	; 0x5c
	rx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;	
  400474:	9518      	str	r5, [sp, #96]	; 0x60
	rx_data_frame_option.ul_fslen_ext = 0;
  400476:	9419      	str	r4, [sp, #100]	; 0x64
	rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  400478:	941a      	str	r4, [sp, #104]	; 0x68
	rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  40047a:	941b      	str	r4, [sp, #108]	; 0x6c
	ssc_set_receiver(SSC, &rx_clk_option, &rx_data_frame_option);
  40047c:	4798      	blx	r3

	/* Disable transmitter first */
	ssc_disable_tx(SSC);
  40047e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400482:	4b0b      	ldr	r3, [pc, #44]	; (4004b0 <configure_ssc+0xb8>)
  400484:	4798      	blx	r3
	ssc_disable_rx(SSC);
  400486:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40048a:	4b0a      	ldr	r3, [pc, #40]	; (4004b4 <configure_ssc+0xbc>)
  40048c:	4798      	blx	r3

	/* Disable All Interrupt */
	ssc_disable_interrupt(SSC, 0xFFFFFFFF);
  40048e:	f04f 31ff 	mov.w	r1, #4294967295
  400492:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400496:	4b08      	ldr	r3, [pc, #32]	; (4004b8 <configure_ssc+0xc0>)
  400498:	4798      	blx	r3
}
  40049a:	b01c      	add	sp, #112	; 0x70
  40049c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4004a0:	00403101 	.word	0x00403101
  4004a4:	00402169 	.word	0x00402169
  4004a8:	00402211 	.word	0x00402211
  4004ac:	0040219d 	.word	0x0040219d
  4004b0:	00402195 	.word	0x00402195
  4004b4:	00402185 	.word	0x00402185
  4004b8:	00402285 	.word	0x00402285

004004bc <configure_codec>:


void configure_codec(void)
{
  4004bc:	b570      	push	{r4, r5, r6, lr}
	uint16_t data = 0;
	/* check that WM8904 is present */
	wm8904_write_register(WM8904_SW_RESET_AND_ID, 0xFFFF);
  4004be:	f64f 71ff 	movw	r1, #65535	; 0xffff
  4004c2:	2000      	movs	r0, #0
  4004c4:	4c40      	ldr	r4, [pc, #256]	; (4005c8 <configure_codec+0x10c>)
  4004c6:	47a0      	blx	r4
	data = wm8904_read_register(WM8904_SW_RESET_AND_ID);
  4004c8:	4b40      	ldr	r3, [pc, #256]	; (4005cc <configure_codec+0x110>)
  4004ca:	2000      	movs	r0, #0
  4004cc:	4798      	blx	r3
	if(data != 0x8904) {
  4004ce:	f648 1304 	movw	r3, #35076	; 0x8904
  4004d2:	4298      	cmp	r0, r3
  4004d4:	d003      	beq.n	4004de <configure_codec+0x22>
		printf("WM8904 not found!\n\r");
  4004d6:	483e      	ldr	r0, [pc, #248]	; (4005d0 <configure_codec+0x114>)
  4004d8:	4b3e      	ldr	r3, [pc, #248]	; (4005d4 <configure_codec+0x118>)
  4004da:	4798      	blx	r3
  4004dc:	e7fe      	b.n	4004dc <configure_codec+0x20>
		while(1);
	}

	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS);	
  4004de:	2108      	movs	r1, #8
  4004e0:	2004      	movs	r0, #4
  4004e2:	47a0      	blx	r4
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |	
  4004e4:	2147      	movs	r1, #71	; 0x47
  4004e6:	2005      	movs	r0, #5
	WM8904_VMID_RES_FAST | WM8904_VMID_ENA);
	delay_ms(5);
  4004e8:	4d3b      	ldr	r5, [pc, #236]	; (4005d8 <configure_codec+0x11c>)
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |	
  4004ea:	47a0      	blx	r4
	delay_ms(5);
  4004ec:	483b      	ldr	r0, [pc, #236]	; (4005dc <configure_codec+0x120>)
  4004ee:	47a8      	blx	r5
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |
  4004f0:	2143      	movs	r1, #67	; 0x43
  4004f2:	2005      	movs	r0, #5
  4004f4:	47a0      	blx	r4
	WM8904_VMID_RES_NORMAL | WM8904_VMID_ENA);
	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS | WM8904_BIAS_ENA);
  4004f6:	2109      	movs	r1, #9
  4004f8:	2004      	movs	r0, #4
  4004fa:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_0, WM8904_INL_ENA | WM8904_INR_ENA);
  4004fc:	2103      	movs	r1, #3
  4004fe:	200c      	movs	r0, #12
  400500:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_2, WM8904_HPL_PGA_ENA | WM8904_HPR_PGA_ENA);
  400502:	2103      	movs	r1, #3
  400504:	200e      	movs	r0, #14
  400506:	47a0      	blx	r4
	wm8904_write_register(WM8904_DAC_DIGITAL_1, WM8904_DEEMPH(0));
  400508:	2100      	movs	r1, #0
  40050a:	2021      	movs	r0, #33	; 0x21
  40050c:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_OUT12_ZC, 0x0000);
  40050e:	2100      	movs	r1, #0
  400510:	203d      	movs	r0, #61	; 0x3d
  400512:	47a0      	blx	r4
	wm8904_write_register(WM8904_CHARGE_PUMP_0, WM8904_CP_ENA);
  400514:	2101      	movs	r1, #1
  400516:	2062      	movs	r0, #98	; 0x62
  400518:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLASS_W_0, WM8904_CP_DYN_PWR);
  40051a:	2101      	movs	r1, #1
  40051c:	2068      	movs	r0, #104	; 0x68
  40051e:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_1, 0x0000);
  400520:	2100      	movs	r1, #0
  400522:	2074      	movs	r0, #116	; 0x74
  400524:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_2, WM8904_FLL_OUTDIV(7)| WM8904_FLL_FRATIO(4));
  400526:	f240 7104 	movw	r1, #1796	; 0x704
  40052a:	2075      	movs	r0, #117	; 0x75
  40052c:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_3, WM8904_FLL_K(0x8000));
  40052e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  400532:	2076      	movs	r0, #118	; 0x76
  400534:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_4, WM8904_FLL_N(0xBB));
  400536:	f44f 51bb 	mov.w	r1, #5984	; 0x1760
  40053a:	2077      	movs	r0, #119	; 0x77
  40053c:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_1, WM8904_FLL_FRACN_ENA | WM8904_FLL_ENA);
  40053e:	2105      	movs	r1, #5
  400540:	2074      	movs	r0, #116	; 0x74
  400542:	47a0      	blx	r4
	delay_ms(5);
  400544:	4825      	ldr	r0, [pc, #148]	; (4005dc <configure_codec+0x120>)
  400546:	47a8      	blx	r5
	wm8904_write_register(WM8904_CLOCK_RATES_1, WM8904_CLK_SYS_RATE(3) | WM8904_SAMPLE_RATE(SAMPLE_RATE));
  400548:	f640 4105 	movw	r1, #3077	; 0xc05
  40054c:	2015      	movs	r0, #21
  40054e:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLOCK_RATES_0, 0x0000);
  400550:	2100      	movs	r1, #0
  400552:	2014      	movs	r0, #20
  400554:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLOCK_RATES_2,
  400556:	f244 0106 	movw	r1, #16390	; 0x4006
  40055a:	2016      	movs	r0, #22
  40055c:	47a0      	blx	r4
	WM8904_SYSCLK_SRC | WM8904_CLK_SYS_ENA | WM8904_CLK_DSP_ENA);
	wm8904_write_register(WM8904_AUDIO_INTERFACE_1, WM8904_BCLK_DIR | WM8904_AIF_FMT_I2S); 
  40055e:	2142      	movs	r1, #66	; 0x42
  400560:	2019      	movs	r0, #25
  400562:	47a0      	blx	r4
	wm8904_write_register(WM8904_AUDIO_INTERFACE_2, WM8904_BCLK_DIV(8));
  400564:	2108      	movs	r1, #8
  400566:	201a      	movs	r0, #26
  400568:	47a0      	blx	r4
	wm8904_write_register(WM8904_AUDIO_INTERFACE_3, WM8904_LRCLK_DIR | WM8904_LRCLK_RATE(0x20));
  40056a:	f44f 6102 	mov.w	r1, #2080	; 0x820
  40056e:	201b      	movs	r0, #27
  400570:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_6,
  400572:	210f      	movs	r1, #15
  400574:	2012      	movs	r0, #18
  400576:	47a0      	blx	r4
	WM8904_DACL_ENA | WM8904_DACR_ENA |
	WM8904_ADCL_ENA | WM8904_ADCR_ENA);
	delay_ms(5);
  400578:	4818      	ldr	r0, [pc, #96]	; (4005dc <configure_codec+0x120>)
  40057a:	47a8      	blx	r5
	wm8904_write_register(WM8904_ANALOGUE_LEFT_INPUT_0, WM8904_LIN_VOL(0x10));
  40057c:	2110      	movs	r1, #16
  40057e:	202c      	movs	r0, #44	; 0x2c
  400580:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_RIGHT_INPUT_0, WM8904_RIN_VOL(0x10));
  400582:	2110      	movs	r1, #16
  400584:	202d      	movs	r0, #45	; 0x2d
  400586:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  400588:	2111      	movs	r1, #17
  40058a:	205a      	movs	r0, #90	; 0x5a
  40058c:	47a0      	blx	r4
	WM8904_HPL_ENA | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  40058e:	2133      	movs	r1, #51	; 0x33
  400590:	205a      	movs	r0, #90	; 0x5a
  400592:	47a0      	blx	r4
	WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_DC_SERVO_0,
  400594:	210f      	movs	r1, #15
  400596:	2043      	movs	r0, #67	; 0x43
  400598:	47a0      	blx	r4
	WM8904_DCS_ENA_CHAN_3 | WM8904_DCS_ENA_CHAN_2 |
	WM8904_DCS_ENA_CHAN_1 | WM8904_DCS_ENA_CHAN_0);
	wm8904_write_register(WM8904_DC_SERVO_1,
  40059a:	21f0      	movs	r1, #240	; 0xf0
  40059c:	2044      	movs	r0, #68	; 0x44
  40059e:	47a0      	blx	r4
	WM8904_DCS_TRIG_STARTUP_3 | WM8904_DCS_TRIG_STARTUP_2 |
	WM8904_DCS_TRIG_STARTUP_1 | WM8904_DCS_TRIG_STARTUP_0);
	delay_ms(100);
  4005a0:	480f      	ldr	r0, [pc, #60]	; (4005e0 <configure_codec+0x124>)
  4005a2:	47a8      	blx	r5
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  4005a4:	2177      	movs	r1, #119	; 0x77
  4005a6:	205a      	movs	r0, #90	; 0x5a
  4005a8:	47a0      	blx	r4
	WM8904_HPL_ENA_OUTP | WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_ENA_OUTP | WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  4005aa:	21ff      	movs	r1, #255	; 0xff
  4005ac:	205a      	movs	r0, #90	; 0x5a
  4005ae:	47a0      	blx	r4
	WM8904_HPL_RMV_SHORT | WM8904_HPL_ENA_OUTP | WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_RMV_SHORT | WM8904_HPR_ENA_OUTP | WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_OUT1_LEFT, WM8904_HPOUT_VU | WM8904_HPOUTL_VOL(0x39));
  4005b0:	21b9      	movs	r1, #185	; 0xb9
  4005b2:	2039      	movs	r0, #57	; 0x39
  4005b4:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_OUT1_RIGHT, WM8904_HPOUT_VU | WM8904_HPOUTR_VOL(0x39));
  4005b6:	203a      	movs	r0, #58	; 0x3a
  4005b8:	21b9      	movs	r1, #185	; 0xb9
  4005ba:	47a0      	blx	r4
	delay_ms(100);
  4005bc:	462b      	mov	r3, r5
  4005be:	4808      	ldr	r0, [pc, #32]	; (4005e0 <configure_codec+0x124>)
}
  4005c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	delay_ms(100);
  4005c4:	4718      	bx	r3
  4005c6:	bf00      	nop
  4005c8:	00401c75 	.word	0x00401c75
  4005cc:	00401cb1 	.word	0x00401cb1
  4005d0:	004093fc 	.word	0x004093fc
  4005d4:	00406631 	.word	0x00406631
  4005d8:	20400001 	.word	0x20400001
  4005dc:	0003dbc2 	.word	0x0003dbc2
  4005e0:	004d2b25 	.word	0x004d2b25

004005e4 <computeWaveletPitch>:
	float pitchF = 0.0f;
	int32_t i, j;
	float si, si1;
	float power; 
	
	arm_copy_f32(samples, sam, WIN_SIZE); 
  4005e4:	f44f 7200 	mov.w	r2, #512	; 0x200
  4005e8:	4995      	ldr	r1, [pc, #596]	; (400840 <computeWaveletPitch+0x25c>)
  4005ea:	4b96      	ldr	r3, [pc, #600]	; (400844 <computeWaveletPitch+0x260>)
	
	return pitchF;
}

float computeWaveletPitch(float * samples)
{
  4005ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int32_t curSamNb = WIN_SIZE;
  4005f0:	4692      	mov	sl, r2
	int32_t curLevel = 0;
  4005f2:	2400      	movs	r4, #0
		memset(distances, 0, WIN_SIZE*sizeof(int32_t));
  4005f4:	f8df b268 	ldr.w	fp, [pc, #616]	; 400860 <computeWaveletPitch+0x27c>
{
  4005f8:	ed2d 8b04 	vpush	{d8-d9}
  4005fc:	b087      	sub	sp, #28
	float curModeDistance = -1.0f;
  4005fe:	eeff 9a00 	vmov.f32	s19, #240	; 0xbf800000 -1.0
	arm_copy_f32(samples, sam, WIN_SIZE); 
  400602:	4798      	blx	r3
		arm_max_f32(sam, WIN_SIZE, &maxValue, &temp_idx); 
  400604:	4651      	mov	r1, sl
  400606:	ab03      	add	r3, sp, #12
  400608:	aa04      	add	r2, sp, #16
  40060a:	488d      	ldr	r0, [pc, #564]	; (400840 <computeWaveletPitch+0x25c>)
	int32_t curLevel = 0;
  40060c:	9400      	str	r4, [sp, #0]
		arm_max_f32(sam, WIN_SIZE, &maxValue, &temp_idx); 
  40060e:	4c8e      	ldr	r4, [pc, #568]	; (400848 <computeWaveletPitch+0x264>)
  400610:	47a0      	blx	r4
		arm_min_f32(sam, WIN_SIZE, &minValue, &temp_idx); 
  400612:	ab03      	add	r3, sp, #12
  400614:	aa05      	add	r2, sp, #20
  400616:	4651      	mov	r1, sl
  400618:	4889      	ldr	r0, [pc, #548]	; (400840 <computeWaveletPitch+0x25c>)
  40061a:	4c8c      	ldr	r4, [pc, #560]	; (40084c <computeWaveletPitch+0x268>)
  40061c:	47a0      	blx	r4
		float amplitudeMax = (maxValue > -minValue ? maxValue : -minValue);
  40061e:	ed9d 9a05 	vldr	s18, [sp, #20]
		ampltitudeThreshold = amplitudeMax*maximaThresholdRatio;		
  400622:	eef6 7a08 	vmov.f32	s15, #104	; 0x3f400000  0.750
		float amplitudeMax = (maxValue > -minValue ? maxValue : -minValue);
  400626:	ed9d 7a04 	vldr	s14, [sp, #16]
  40062a:	eeb1 9a49 	vneg.f32	s18, s18
	int32_t res = 1, j;
  40062e:	2301      	movs	r3, #1
		delta = DYW_SAMPLING_RATE/(_2power(curLevel)*maxF);
  400630:	eddf 8a87 	vldr	s17, [pc, #540]	; 400850 <computeWaveletPitch+0x26c>
		if (curSamNb < 2) return pitchF;
  400634:	ed9f 8a87 	vldr	s16, [pc, #540]	; 400854 <computeWaveletPitch+0x270>
		float amplitudeMax = (maxValue > -minValue ? maxValue : -minValue);
  400638:	fe89 9a07 	vmaxnm.f32	s18, s18, s14
		ampltitudeThreshold = amplitudeMax*maximaThresholdRatio;		
  40063c:	ee29 9a27 	vmul.f32	s18, s18, s15
		delta = DYW_SAMPLING_RATE/(_2power(curLevel)*maxF);
  400640:	ee07 3a90 	vmov	s15, r3
		if (curSamNb < 2) return pitchF;
  400644:	f1ba 0f01 	cmp.w	sl, #1
		delta = DYW_SAMPLING_RATE/(_2power(curLevel)*maxF);
  400648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40064c:	ee88 7aa7 	vdiv.f32	s14, s17, s15
  400650:	eefd 7ac7 	vcvt.s32.f32	s15, s14
  400654:	ee17 4a90 	vmov	r4, s15
		if (curSamNb < 2) return pitchF;
  400658:	f340 827d 	ble.w	400b56 <computeWaveletPitch+0x572>
  40065c:	f1ba 0f03 	cmp.w	sl, #3
  400660:	f340 826b 	ble.w	400b3a <computeWaveletPitch+0x556>
  400664:	f1aa 0e04 	sub.w	lr, sl, #4
  400668:	4b75      	ldr	r3, [pc, #468]	; (400840 <computeWaveletPitch+0x25c>)
  40066a:	2000      	movs	r0, #0
  40066c:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 400864 <computeWaveletPitch+0x280>
  400670:	f02e 0e01 	bic.w	lr, lr, #1
  400674:	4619      	mov	r1, r3
  400676:	9301      	str	r3, [sp, #4]
  400678:	4602      	mov	r2, r0
  40067a:	edd3 7a00 	vldr	s15, [r3]
  40067e:	f10e 0e03 	add.w	lr, lr, #3
  400682:	4606      	mov	r6, r0
  400684:	4605      	mov	r5, r0
  400686:	46c4      	mov	ip, r8
  400688:	eeb0 7a48 	vmov.f32	s14, s16
  40068c:	2301      	movs	r3, #1
  40068e:	e050      	b.n	400732 <computeWaveletPitch+0x14e>
						if (i -1 > lastmaxIndex + delta) 
  400690:	2201      	movs	r2, #1
			si = sam[i]; // - theDC;
  400692:	edd1 7a02 	vldr	s15, [r1, #8]
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
  400696:	eef5 7a40 	vcmp.f32	s15, #0.0
  40069a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40069e:	dd06      	ble.n	4006ae <computeWaveletPitch+0xca>
  4006a0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  4006a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006a8:	d801      	bhi.n	4006ae <computeWaveletPitch+0xca>
  4006aa:	2000      	movs	r0, #0
  4006ac:	2201      	movs	r2, #1
			if (si1 >= 0 && si < 0) {findMin = 1; findMax = 0; }
  4006ae:	eef5 7a40 	vcmp.f32	s15, #0.0
  4006b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006b6:	d506      	bpl.n	4006c6 <computeWaveletPitch+0xe2>
  4006b8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  4006bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006c0:	db01      	blt.n	4006c6 <computeWaveletPitch+0xe2>
  4006c2:	2001      	movs	r0, #1
  4006c4:	2200      	movs	r2, #0
			if (previousDV > -1000.0f) 
  4006c6:	eeb4 6ac8 	vcmpe.f32	s12, s16
			dv = si - si1;
  4006ca:	ee37 7ae6 	vsub.f32	s14, s15, s13
			if (previousDV > -1000.0f) 
  4006ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006d2:	dd2a      	ble.n	40072a <computeWaveletPitch+0x146>
				if (findMin && previousDV < 0.0f && dv >= 0.0f) 
  4006d4:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
  4006d8:	f000 0701 	and.w	r7, r0, #1
  4006dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006e0:	bf58      	it	pl
  4006e2:	2700      	movpl	r7, #0
  4006e4:	b1af      	cbz	r7, 400712 <computeWaveletPitch+0x12e>
  4006e6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  4006ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006ee:	db10      	blt.n	400712 <computeWaveletPitch+0x12e>
					if (Abs(si1) >= ampltitudeThreshold) 
  4006f0:	eef0 5ae6 	vabs.f32	s11, s13
  4006f4:	eeb4 9ae5 	vcmpe.f32	s18, s11
  4006f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006fc:	d809      	bhi.n	400712 <computeWaveletPitch+0x12e>
						if (i - 1 > lastMinIndex + delta)
  4006fe:	eb04 070c 	add.w	r7, r4, ip
  400702:	429f      	cmp	r7, r3
  400704:	da05      	bge.n	400712 <computeWaveletPitch+0x12e>
							mins[nbMins++] = i - 1;
  400706:	4854      	ldr	r0, [pc, #336]	; (400858 <computeWaveletPitch+0x274>)
  400708:	469c      	mov	ip, r3
  40070a:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
  40070e:	3501      	adds	r5, #1
							findMin = 0;
  400710:	2000      	movs	r0, #0
				if (findMax && previousDV > 0.0f && dv <= 0.0f) 
  400712:	eeb5 6a40 	vcmp.f32	s12, #0.0
  400716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40071a:	dd06      	ble.n	40072a <computeWaveletPitch+0x146>
  40071c:	b12a      	cbz	r2, 40072a <computeWaveletPitch+0x146>
  40071e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  400722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400726:	d96b      	bls.n	400800 <computeWaveletPitch+0x21c>
						if (i -1 > lastmaxIndex + delta) 
  400728:	2201      	movs	r2, #1
  40072a:	3302      	adds	r3, #2
  40072c:	3108      	adds	r1, #8
  40072e:	4573      	cmp	r3, lr
  400730:	d07b      	beq.n	40082a <computeWaveletPitch+0x246>
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
  400732:	eef5 7a40 	vcmp.f32	s15, #0.0
			si = sam[i]; // - theDC;
  400736:	edd1 6a01 	vldr	s13, [r1, #4]
  40073a:	1e5f      	subs	r7, r3, #1
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
  40073c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400740:	d806      	bhi.n	400750 <computeWaveletPitch+0x16c>
  400742:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40074a:	dd01      	ble.n	400750 <computeWaveletPitch+0x16c>
  40074c:	2000      	movs	r0, #0
  40074e:	2201      	movs	r2, #1
			if (si1 >= 0 && si < 0) {findMin = 1; findMax = 0; }
  400750:	eef5 7a40 	vcmp.f32	s15, #0.0
  400754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400758:	db06      	blt.n	400768 <computeWaveletPitch+0x184>
  40075a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  40075e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400762:	d501      	bpl.n	400768 <computeWaveletPitch+0x184>
  400764:	2001      	movs	r0, #1
  400766:	2200      	movs	r2, #0
			if (previousDV > -1000.0f) 
  400768:	eeb4 7ac8 	vcmpe.f32	s14, s16
			dv = si - si1;
  40076c:	ee36 6ae7 	vsub.f32	s12, s13, s15
			if (previousDV > -1000.0f) 
  400770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400774:	dd8d      	ble.n	400692 <computeWaveletPitch+0xae>
				if (findMin && previousDV < 0.0f && dv >= 0.0f) 
  400776:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  40077a:	f000 0901 	and.w	r9, r0, #1
  40077e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400782:	bf58      	it	pl
  400784:	f04f 0900 	movpl.w	r9, #0
  400788:	f1b9 0f00 	cmp.w	r9, #0
  40078c:	d015      	beq.n	4007ba <computeWaveletPitch+0x1d6>
  40078e:	eeb5 6a40 	vcmp.f32	s12, #0.0
  400792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400796:	db10      	blt.n	4007ba <computeWaveletPitch+0x1d6>
					if (Abs(si1) >= ampltitudeThreshold) 
  400798:	eef0 5ae7 	vabs.f32	s11, s15
  40079c:	eeb4 9ae5 	vcmpe.f32	s18, s11
  4007a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4007a4:	d809      	bhi.n	4007ba <computeWaveletPitch+0x1d6>
						if (i - 1 > lastMinIndex + delta)
  4007a6:	eb04 090c 	add.w	r9, r4, ip
  4007aa:	45b9      	cmp	r9, r7
  4007ac:	da05      	bge.n	4007ba <computeWaveletPitch+0x1d6>
							mins[nbMins++] = i - 1;
  4007ae:	482a      	ldr	r0, [pc, #168]	; (400858 <computeWaveletPitch+0x274>)
  4007b0:	46bc      	mov	ip, r7
  4007b2:	f840 7025 	str.w	r7, [r0, r5, lsl #2]
  4007b6:	3501      	adds	r5, #1
							findMin = 0;
  4007b8:	2000      	movs	r0, #0
				if (findMax && previousDV > 0.0f && dv <= 0.0f) 
  4007ba:	eeb5 7a40 	vcmp.f32	s14, #0.0
  4007be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4007c2:	f77f af66 	ble.w	400692 <computeWaveletPitch+0xae>
  4007c6:	2a00      	cmp	r2, #0
  4007c8:	f43f af63 	beq.w	400692 <computeWaveletPitch+0xae>
  4007cc:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
  4007d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4007d4:	f63f af5c 	bhi.w	400690 <computeWaveletPitch+0xac>
					if (Abs(si1) >= ampltitudeThreshold) 
  4007d8:	eef0 7ae7 	vabs.f32	s15, s15
  4007dc:	eeb4 9ae7 	vcmpe.f32	s18, s15
  4007e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4007e4:	f63f af54 	bhi.w	400690 <computeWaveletPitch+0xac>
						if (i -1 > lastmaxIndex + delta) 
  4007e8:	eb04 0208 	add.w	r2, r4, r8
  4007ec:	42ba      	cmp	r2, r7
  4007ee:	f6bf af4f 	bge.w	400690 <computeWaveletPitch+0xac>
							maxs[nbMaxs++] = i - 1;
  4007f2:	4a1a      	ldr	r2, [pc, #104]	; (40085c <computeWaveletPitch+0x278>)
  4007f4:	46b8      	mov	r8, r7
  4007f6:	f842 7026 	str.w	r7, [r2, r6, lsl #2]
  4007fa:	3601      	adds	r6, #1
							findMax = 0;
  4007fc:	2200      	movs	r2, #0
  4007fe:	e748      	b.n	400692 <computeWaveletPitch+0xae>
					if (Abs(si1) >= ampltitudeThreshold) 
  400800:	eef0 6ae6 	vabs.f32	s13, s13
  400804:	eeb4 9ae6 	vcmpe.f32	s18, s13
  400808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40080c:	d88c      	bhi.n	400728 <computeWaveletPitch+0x144>
						if (i -1 > lastmaxIndex + delta) 
  40080e:	eb04 0208 	add.w	r2, r4, r8
  400812:	429a      	cmp	r2, r3
  400814:	da88      	bge.n	400728 <computeWaveletPitch+0x144>
							maxs[nbMaxs++] = i - 1;
  400816:	4a11      	ldr	r2, [pc, #68]	; (40085c <computeWaveletPitch+0x278>)
  400818:	4698      	mov	r8, r3
  40081a:	3108      	adds	r1, #8
  40081c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  400820:	3302      	adds	r3, #2
  400822:	3601      	adds	r6, #1
							findMax = 0;
  400824:	2200      	movs	r2, #0
  400826:	4573      	cmp	r3, lr
  400828:	d183      	bne.n	400732 <computeWaveletPitch+0x14e>
  40082a:	9f01      	ldr	r7, [sp, #4]
  40082c:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
							mins[nbMins++] = i - 1;
  400830:	f8df 9024 	ldr.w	r9, [pc, #36]	; 400858 <computeWaveletPitch+0x274>
  400834:	46a6      	mov	lr, r4
  400836:	4419      	add	r1, r3
  400838:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  40083c:	e01a      	b.n	400874 <computeWaveletPitch+0x290>
  40083e:	bf00      	nop
  400840:	20403a00 	.word	0x20403a00
  400844:	00405a41 	.word	0x00405a41
  400848:	00405bdd 	.word	0x00405bdd
  40084c:	00405b01 	.word	0x00405b01
  400850:	41780419 	.word	0x41780419
  400854:	c47a0000 	.word	0xc47a0000
  400858:	20403200 	.word	0x20403200
  40085c:	20402a00 	.word	0x20402a00
  400860:	20402200 	.word	0x20402200
  400864:	fff0bdc0 	.word	0xfff0bdc0
						if (i -1 > lastmaxIndex + delta) 
  400868:	2201      	movs	r2, #1
		for (i = 1; i < curSamNb; i++) 
  40086a:	3301      	adds	r3, #1
			dv = si - si1;
  40086c:	eeb0 7a67 	vmov.f32	s14, s15
		for (i = 1; i < curSamNb; i++) 
  400870:	459a      	cmp	sl, r3
  400872:	dd65      	ble.n	400940 <computeWaveletPitch+0x35c>
			si = sam[i]; // - theDC;
  400874:	edd1 7a01 	vldr	s15, [r1, #4]
  400878:	1e5f      	subs	r7, r3, #1
			si1 = sam[i-1]; // - theDC;
  40087a:	ecf1 6a01 	vldmia	r1!, {s13}
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
  40087e:	eef5 7a40 	vcmp.f32	s15, #0.0
  400882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400886:	dd06      	ble.n	400896 <computeWaveletPitch+0x2b2>
  400888:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  40088c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400890:	d801      	bhi.n	400896 <computeWaveletPitch+0x2b2>
  400892:	2000      	movs	r0, #0
  400894:	2201      	movs	r2, #1
			if (si1 >= 0 && si < 0) {findMin = 1; findMax = 0; }
  400896:	eef5 7a40 	vcmp.f32	s15, #0.0
  40089a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40089e:	d506      	bpl.n	4008ae <computeWaveletPitch+0x2ca>
  4008a0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  4008a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008a8:	db01      	blt.n	4008ae <computeWaveletPitch+0x2ca>
  4008aa:	2001      	movs	r0, #1
  4008ac:	2200      	movs	r2, #0
			if (previousDV > -1000.0f) 
  4008ae:	eeb4 7ac8 	vcmpe.f32	s14, s16
			dv = si - si1;
  4008b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
			if (previousDV > -1000.0f) 
  4008b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008ba:	ddd6      	ble.n	40086a <computeWaveletPitch+0x286>
				if (findMin && previousDV < 0.0f && dv >= 0.0f) 
  4008bc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  4008c0:	f000 0401 	and.w	r4, r0, #1
  4008c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008c8:	bf58      	it	pl
  4008ca:	2400      	movpl	r4, #0
  4008cc:	b1a4      	cbz	r4, 4008f8 <computeWaveletPitch+0x314>
  4008ce:	eef5 7a40 	vcmp.f32	s15, #0.0
  4008d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008d6:	db0f      	blt.n	4008f8 <computeWaveletPitch+0x314>
					if (Abs(si1) >= ampltitudeThreshold) 
  4008d8:	eeb0 6ae6 	vabs.f32	s12, s13
  4008dc:	eeb4 9ac6 	vcmpe.f32	s18, s12
  4008e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008e4:	d808      	bhi.n	4008f8 <computeWaveletPitch+0x314>
						if (i - 1 > lastMinIndex + delta)
  4008e6:	eb0e 040c 	add.w	r4, lr, ip
  4008ea:	42bc      	cmp	r4, r7
  4008ec:	da04      	bge.n	4008f8 <computeWaveletPitch+0x314>
							mins[nbMins++] = i - 1;
  4008ee:	f849 7025 	str.w	r7, [r9, r5, lsl #2]
  4008f2:	46bc      	mov	ip, r7
  4008f4:	3501      	adds	r5, #1
							findMin = 0;
  4008f6:	2000      	movs	r0, #0
				if (findMax && previousDV > 0.0f && dv <= 0.0f) 
  4008f8:	eeb5 7a40 	vcmp.f32	s14, #0.0
  4008fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400900:	ddb3      	ble.n	40086a <computeWaveletPitch+0x286>
  400902:	2a00      	cmp	r2, #0
  400904:	d0b1      	beq.n	40086a <computeWaveletPitch+0x286>
  400906:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  40090a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40090e:	d8ab      	bhi.n	400868 <computeWaveletPitch+0x284>
					if (Abs(si1) >= ampltitudeThreshold) 
  400910:	eef0 6ae6 	vabs.f32	s13, s13
  400914:	eeb4 9ae6 	vcmpe.f32	s18, s13
  400918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40091c:	d8a4      	bhi.n	400868 <computeWaveletPitch+0x284>
						if (i -1 > lastmaxIndex + delta) 
  40091e:	eb0e 0208 	add.w	r2, lr, r8
  400922:	42ba      	cmp	r2, r7
  400924:	daa0      	bge.n	400868 <computeWaveletPitch+0x284>
		for (i = 1; i < curSamNb; i++) 
  400926:	3301      	adds	r3, #1
							maxs[nbMaxs++] = i - 1;
  400928:	4aac      	ldr	r2, [pc, #688]	; (400bdc <computeWaveletPitch+0x5f8>)
  40092a:	46b8      	mov	r8, r7
			dv = si - si1;
  40092c:	eeb0 7a67 	vmov.f32	s14, s15
		for (i = 1; i < curSamNb; i++) 
  400930:	459a      	cmp	sl, r3
							maxs[nbMaxs++] = i - 1;
  400932:	f842 7026 	str.w	r7, [r2, r6, lsl #2]
  400936:	f106 0601 	add.w	r6, r6, #1
							findMax = 0;
  40093a:	f04f 0200 	mov.w	r2, #0
		for (i = 1; i < curSamNb; i++) 
  40093e:	dc99      	bgt.n	400874 <computeWaveletPitch+0x290>
  400940:	4674      	mov	r4, lr
		if (nbMins == 0 && nbMaxs == 0) 
  400942:	b915      	cbnz	r5, 40094a <computeWaveletPitch+0x366>
  400944:	2e00      	cmp	r6, #0
  400946:	f000 8106 	beq.w	400b56 <computeWaveletPitch+0x572>
		memset(distances, 0, WIN_SIZE*sizeof(int32_t));
  40094a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40094e:	2100      	movs	r1, #0
  400950:	4658      	mov	r0, fp
  400952:	4ba3      	ldr	r3, [pc, #652]	; (400be0 <computeWaveletPitch+0x5fc>)
  400954:	4798      	blx	r3
		for (i = 0 ; i < nbMins ; i++) 
  400956:	b34d      	cbz	r5, 4009ac <computeWaveletPitch+0x3c8>
  400958:	f8df e298 	ldr.w	lr, [pc, #664]	; 400bf4 <computeWaveletPitch+0x610>
  40095c:	2202      	movs	r2, #2
  40095e:	2700      	movs	r7, #0
  400960:	4671      	mov	r1, lr
  400962:	e012      	b.n	40098a <computeWaveletPitch+0x3a6>
					d = Abs(mins[i] - mins[i+j]);
  400964:	f8d1 c000 	ldr.w	ip, [r1]
  400968:	684b      	ldr	r3, [r1, #4]
  40096a:	ebac 0303 	sub.w	r3, ip, r3
  40096e:	2b00      	cmp	r3, #0
  400970:	bfb8      	it	lt
  400972:	425b      	neglt	r3, r3
				if (i+j < nbMins) 
  400974:	42aa      	cmp	r2, r5
					distances[d]++; 
  400976:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
  40097a:	f100 0001 	add.w	r0, r0, #1
  40097e:	f84b 0023 	str.w	r0, [fp, r3, lsl #2]
				if (i+j < nbMins) 
  400982:	f2c0 80cc 	blt.w	400b1e <computeWaveletPitch+0x53a>
  400986:	3104      	adds	r1, #4
  400988:	3201      	adds	r2, #1
  40098a:	3701      	adds	r7, #1
  40098c:	42af      	cmp	r7, r5
  40098e:	dbe9      	blt.n	400964 <computeWaveletPitch+0x380>
  400990:	42aa      	cmp	r2, r5
  400992:	da0b      	bge.n	4009ac <computeWaveletPitch+0x3c8>
					d = Abs(mins[i] - mins[i+j]);
  400994:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
  400998:	680b      	ldr	r3, [r1, #0]
  40099a:	1a9b      	subs	r3, r3, r2
  40099c:	2b00      	cmp	r3, #0
  40099e:	bfb8      	it	lt
  4009a0:	425b      	neglt	r3, r3
					distances[d]++; 
  4009a2:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
  4009a6:	3201      	adds	r2, #1
  4009a8:	f84b 2023 	str.w	r2, [fp, r3, lsl #2]
		for (i = 0 ; i < nbMaxs ; i++) 
  4009ac:	b346      	cbz	r6, 400a00 <computeWaveletPitch+0x41c>
  4009ae:	4d8b      	ldr	r5, [pc, #556]	; (400bdc <computeWaveletPitch+0x5f8>)
  4009b0:	2202      	movs	r2, #2
  4009b2:	2700      	movs	r7, #0
  4009b4:	4629      	mov	r1, r5
  4009b6:	e012      	b.n	4009de <computeWaveletPitch+0x3fa>
					d = Abs(maxs[i] - maxs[i+j]);
  4009b8:	f8d1 e000 	ldr.w	lr, [r1]
  4009bc:	684b      	ldr	r3, [r1, #4]
  4009be:	ebae 0303 	sub.w	r3, lr, r3
  4009c2:	2b00      	cmp	r3, #0
  4009c4:	bfb8      	it	lt
  4009c6:	425b      	neglt	r3, r3
				if (i+j < nbMaxs) 
  4009c8:	42b2      	cmp	r2, r6
					distances[d]++; 
  4009ca:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
  4009ce:	f100 0001 	add.w	r0, r0, #1
  4009d2:	f84b 0023 	str.w	r0, [fp, r3, lsl #2]
				if (i+j < nbMaxs) 
  4009d6:	f2c0 8193 	blt.w	400d00 <computeWaveletPitch+0x71c>
  4009da:	3104      	adds	r1, #4
  4009dc:	3201      	adds	r2, #1
  4009de:	3701      	adds	r7, #1
  4009e0:	42b7      	cmp	r7, r6
  4009e2:	dbe9      	blt.n	4009b8 <computeWaveletPitch+0x3d4>
  4009e4:	42b2      	cmp	r2, r6
  4009e6:	da0b      	bge.n	400a00 <computeWaveletPitch+0x41c>
					d = Abs(maxs[i] - maxs[i+j]);
  4009e8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4009ec:	680b      	ldr	r3, [r1, #0]
  4009ee:	1a9b      	subs	r3, r3, r2
  4009f0:	2b00      	cmp	r3, #0
  4009f2:	bfb8      	it	lt
  4009f4:	425b      	neglt	r3, r3
					distances[d]++; 
  4009f6:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
  4009fa:	3201      	adds	r2, #1
  4009fc:	f84b 2023 	str.w	r2, [fp, r3, lsl #2]
		for (i = 0 ; i < nbMaxs ; i++) 
  400a00:	f04f 36ff 	mov.w	r6, #4294967295
  400a04:	f1c4 0e00 	rsb	lr, r4, #0
  400a08:	2500      	movs	r5, #0
  400a0a:	f104 0c01 	add.w	ip, r4, #1
  400a0e:	4637      	mov	r7, r6
			for (j = -delta ; j <= delta ; j++) 
  400a10:	4574      	cmp	r4, lr
  400a12:	f2c0 8082 	blt.w	400b1a <computeWaveletPitch+0x536>
  400a16:	1b2b      	subs	r3, r5, r4
  400a18:	eb0c 0205 	add.w	r2, ip, r5
  400a1c:	2100      	movs	r1, #0
				if (i+j >=0 && i+j < curSamNb)
  400a1e:	4553      	cmp	r3, sl
  400a20:	da04      	bge.n	400a2c <computeWaveletPitch+0x448>
  400a22:	2b00      	cmp	r3, #0
  400a24:	db02      	blt.n	400a2c <computeWaveletPitch+0x448>
					summed += distances[i+j];
  400a26:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
  400a2a:	4401      	add	r1, r0
  400a2c:	3301      	adds	r3, #1
			for (j = -delta ; j <= delta ; j++) 
  400a2e:	4293      	cmp	r3, r2
  400a30:	d1f5      	bne.n	400a1e <computeWaveletPitch+0x43a>
			if (summed == bestValue) 
  400a32:	42b9      	cmp	r1, r7
  400a34:	d06c      	beq.n	400b10 <computeWaveletPitch+0x52c>
			else if (summed > bestValue) 
  400a36:	dd01      	ble.n	400a3c <computeWaveletPitch+0x458>
  400a38:	460f      	mov	r7, r1
  400a3a:	462e      	mov	r6, r5
		for (i = 0; i< curSamNb; i++) 
  400a3c:	3501      	adds	r5, #1
  400a3e:	4555      	cmp	r5, sl
  400a40:	d1e6      	bne.n	400a10 <computeWaveletPitch+0x42c>
		for (j = -delta ; j <= delta ; j++) 
  400a42:	4574      	cmp	r4, lr
  400a44:	f2c0 80aa 	blt.w	400b9c <computeWaveletPitch+0x5b8>
  400a48:	ed9f 7a66 	vldr	s14, [pc, #408]	; 400be4 <computeWaveletPitch+0x600>
  400a4c:	1c62      	adds	r2, r4, #1
  400a4e:	1b33      	subs	r3, r6, r4
  400a50:	eef0 6a47 	vmov.f32	s13, s14
  400a54:	4416      	add	r6, r2
			if (bestDistance+j >=0 && bestDistance+j < WIN_SIZE) 
  400a56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  400a5a:	d211      	bcs.n	400a80 <computeWaveletPitch+0x49c>
				int32_t nbDist = distances[bestDistance+j];
  400a5c:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
					distAvg += (bestDistance+j)*nbDist;
  400a60:	fb02 f103 	mul.w	r1, r2, r3
					nbDists += nbDist;
  400a64:	ee06 2a10 	vmov	s12, r2
				if (nbDist > 0) {
  400a68:	2a00      	cmp	r2, #0
					distAvg += (bestDistance+j)*nbDist;
  400a6a:	ee07 1a90 	vmov	s15, r1
					nbDists += nbDist;
  400a6e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
					distAvg += (bestDistance+j)*nbDist;
  400a72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (nbDist > 0) {
  400a76:	dd03      	ble.n	400a80 <computeWaveletPitch+0x49c>
					nbDists += nbDist;
  400a78:	ee76 6a86 	vadd.f32	s13, s13, s12
					distAvg += (bestDistance+j)*nbDist;
  400a7c:	ee37 7a27 	vadd.f32	s14, s14, s15
  400a80:	3301      	adds	r3, #1
		for (j = -delta ; j <= delta ; j++) 
  400a82:	42b3      	cmp	r3, r6
  400a84:	d1e7      	bne.n	400a56 <computeWaveletPitch+0x472>
  400a86:	ee87 6a26 	vdiv.f32	s12, s14, s13
				pitchF = DYW_SAMPLING_RATE/(_2power(curLevel-1)*curModeDistance);
  400a8a:	9b00      	ldr	r3, [sp, #0]
		if (curModeDistance > -1.0f) 
  400a8c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  400a90:	eef4 9ae7 	vcmpe.f32	s19, s15
  400a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400a98:	dd12      	ble.n	400ac0 <computeWaveletPitch+0x4dc>
			float similarity = Abs(distAvg*2 - curModeDistance);
  400a9a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
			if (similarity <= 2*delta) 
  400a9e:	0064      	lsls	r4, r4, #1
			float similarity = Abs(distAvg*2 - curModeDistance);
  400aa0:	eef0 6a69 	vmov.f32	s13, s19
			if (similarity <= 2*delta) 
  400aa4:	ee07 4a90 	vmov	s15, r4
			float similarity = Abs(distAvg*2 - curModeDistance);
  400aa8:	eed6 6a07 	vfnms.f32	s13, s12, s14
			if (similarity <= 2*delta) 
  400aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			float similarity = Abs(distAvg*2 - curModeDistance);
  400ab0:	eeb0 7ae6 	vabs.f32	s14, s13
			if (similarity <= 2*delta) 
  400ab4:	eeb4 7ae7 	vcmpe.f32	s14, s15
  400ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400abc:	f240 80a0 	bls.w	400c00 <computeWaveletPitch+0x61c>
		curLevel = curLevel + 1;
  400ac0:	3301      	adds	r3, #1
		if (curLevel >= maxFLWTlevels) 
  400ac2:	2b06      	cmp	r3, #6
		curLevel = curLevel + 1;
  400ac4:	9300      	str	r3, [sp, #0]
		if (curLevel >= maxFLWTlevels) 
  400ac6:	d046      	beq.n	400b56 <computeWaveletPitch+0x572>
  400ac8:	9b01      	ldr	r3, [sp, #4]
		for (i = 0; i < curSamNb/2; i++)
  400aca:	ea4f 0a6a 	mov.w	sl, sl, asr #1
  400ace:	4a46      	ldr	r2, [pc, #280]	; (400be8 <computeWaveletPitch+0x604>)
			sam[i] = (sam[2*i] + sam[2*i + 1]) * 0.5f;
  400ad0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
  400ad4:	eb03 01ca 	add.w	r1, r3, sl, lsl #3
		for (i = 0; i < curSamNb/2; i++)
  400ad8:	4613      	mov	r3, r2
			sam[i] = (sam[2*i] + sam[2*i + 1]) * 0.5f;
  400ada:	ed93 7a00 	vldr	s14, [r3]
  400ade:	3308      	adds	r3, #8
  400ae0:	ed53 7a01 	vldr	s15, [r3, #-4]
		for (i = 0; i < curSamNb/2; i++)
  400ae4:	428b      	cmp	r3, r1
			sam[i] = (sam[2*i] + sam[2*i + 1]) * 0.5f;
  400ae6:	ee77 7a27 	vadd.f32	s15, s14, s15
  400aea:	ee67 7aa6 	vmul.f32	s15, s15, s13
  400aee:	ece2 7a01 	vstmia	r2!, {s15}
		for (i = 0; i < curSamNb/2; i++)
  400af2:	d1f2      	bne.n	400ada <computeWaveletPitch+0x4f6>
	for (j = 0; j < i; j++) res <<= 1;
  400af4:	9b00      	ldr	r3, [sp, #0]
  400af6:	2b01      	cmp	r3, #1
  400af8:	d057      	beq.n	400baa <computeWaveletPitch+0x5c6>
  400afa:	2b02      	cmp	r3, #2
  400afc:	d053      	beq.n	400ba6 <computeWaveletPitch+0x5c2>
  400afe:	2b03      	cmp	r3, #3
  400b00:	d04f      	beq.n	400ba2 <computeWaveletPitch+0x5be>
  400b02:	2b05      	cmp	r3, #5
  400b04:	bf0c      	ite	eq
  400b06:	2320      	moveq	r3, #32
  400b08:	2310      	movne	r3, #16
		curModeDistance = distAvg;
  400b0a:	eef0 9a46 	vmov.f32	s19, s12
  400b0e:	e597      	b.n	400640 <computeWaveletPitch+0x5c>
				if (i == 2*bestDistance)
  400b10:	ebb5 0f46 	cmp.w	r5, r6, lsl #1
  400b14:	bf08      	it	eq
  400b16:	462e      	moveq	r6, r5
  400b18:	e790      	b.n	400a3c <computeWaveletPitch+0x458>
			int32_t summed = 0;
  400b1a:	2100      	movs	r1, #0
  400b1c:	e789      	b.n	400a32 <computeWaveletPitch+0x44e>
					d = Abs(mins[i] - mins[i+j]);
  400b1e:	f85e 3022 	ldr.w	r3, [lr, r2, lsl #2]
  400b22:	ebac 0303 	sub.w	r3, ip, r3
  400b26:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
  400b2a:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
					distances[d]++; 
  400b2e:	f85b 3020 	ldr.w	r3, [fp, r0, lsl #2]
  400b32:	3301      	adds	r3, #1
  400b34:	f84b 3020 	str.w	r3, [fp, r0, lsl #2]
  400b38:	e725      	b.n	400986 <computeWaveletPitch+0x3a2>
		if (curSamNb < 2) return pitchF;
  400b3a:	2000      	movs	r0, #0
  400b3c:	492a      	ldr	r1, [pc, #168]	; (400be8 <computeWaveletPitch+0x604>)
  400b3e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 400bf8 <computeWaveletPitch+0x614>
  400b42:	eeb0 7a48 	vmov.f32	s14, s16
  400b46:	2301      	movs	r3, #1
  400b48:	4602      	mov	r2, r0
  400b4a:	4606      	mov	r6, r0
  400b4c:	4605      	mov	r5, r0
  400b4e:	46c4      	mov	ip, r8
  400b50:	9101      	str	r1, [sp, #4]
  400b52:	460f      	mov	r7, r1
  400b54:	e66a      	b.n	40082c <computeWaveletPitch+0x248>
		if (pitchtracker._prevPitch > -1.0f) 
  400b56:	4a25      	ldr	r2, [pc, #148]	; (400bec <computeWaveletPitch+0x608>)
  400b58:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  400b5c:	edd2 7a00 	vldr	s15, [r2]
  400b60:	eef4 7ac7 	vcmpe.f32	s15, s14
  400b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400b68:	dd21      	ble.n	400bae <computeWaveletPitch+0x5ca>
			if (pitchtracker._pitchConfidence >= 1) 
  400b6a:	6853      	ldr	r3, [r2, #4]
  400b6c:	2b00      	cmp	r3, #0
  400b6e:	dd27      	ble.n	400bc0 <computeWaveletPitch+0x5dc>
				pitchtracker._pitchConfidence = Max(0, pitchtracker._pitchConfidence - 1);
  400b70:	3b01      	subs	r3, #1
  400b72:	6053      	str	r3, [r2, #4]
	if (pitchtracker._pitchConfidence >= 1) 
  400b74:	2b00      	cmp	r3, #0
  400b76:	dd1a      	ble.n	400bae <computeWaveletPitch+0x5ca>
	if (pitch < -1.0f) pitch = 0.0f;
  400b78:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
  400b7c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 400be4 <computeWaveletPitch+0x600>
  400b80:	eef4 7a66 	vcmp.f32	s15, s13
  400b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400b88:	bf48      	it	mi
  400b8a:	eef0 7a47 	vmovmi.f32	s15, s14
	return _dywapitch_dynamicprocess(get_raw_pitch(samples)); 
  400b8e:	ee17 0a90 	vmov	r0, s15
  400b92:	b007      	add	sp, #28
  400b94:	ecbd 8b04 	vpop	{d8-d9}
  400b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (j = -delta ; j <= delta ; j++) 
  400b9c:	ed9f 6a14 	vldr	s12, [pc, #80]	; 400bf0 <computeWaveletPitch+0x60c>
  400ba0:	e773      	b.n	400a8a <computeWaveletPitch+0x4a6>
	for (j = 0; j < i; j++) res <<= 1;
  400ba2:	2308      	movs	r3, #8
  400ba4:	e7b1      	b.n	400b0a <computeWaveletPitch+0x526>
  400ba6:	2304      	movs	r3, #4
  400ba8:	e7af      	b.n	400b0a <computeWaveletPitch+0x526>
  400baa:	2302      	movs	r3, #2
  400bac:	e7ad      	b.n	400b0a <computeWaveletPitch+0x526>
	float estimatedPitch = -1.0f;
  400bae:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  400bb2:	ee17 0a90 	vmov	r0, s15
  400bb6:	b007      	add	sp, #28
  400bb8:	ecbd 8b04 	vpop	{d8-d9}
  400bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pitch = -1.0f;
  400bc0:	eef0 7a47 	vmov.f32	s15, s14
				pitchtracker._pitchConfidence = 0;
  400bc4:	2300      	movs	r3, #0
				pitchtracker._prevPitch = -1.0f;
  400bc6:	ed82 7a00 	vstr	s14, [r2]
				pitchtracker._pitchConfidence = 0;
  400bca:	6053      	str	r3, [r2, #4]
  400bcc:	ee17 0a90 	vmov	r0, s15
  400bd0:	b007      	add	sp, #28
  400bd2:	ecbd 8b04 	vpop	{d8-d9}
  400bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400bda:	bf00      	nop
  400bdc:	20402a00 	.word	0x20402a00
  400be0:	00406cfd 	.word	0x00406cfd
  400be4:	00000000 	.word	0x00000000
  400be8:	20403a00 	.word	0x20403a00
  400bec:	20400020 	.word	0x20400020
  400bf0:	7fc00000 	.word	0x7fc00000
  400bf4:	20403200 	.word	0x20403200
  400bf8:	fff0bdc0 	.word	0xfff0bdc0
  400bfc:	4735a700 	.word	0x4735a700
				pitchF = DYW_SAMPLING_RATE/(_2power(curLevel-1)*curModeDistance);
  400c00:	3b01      	subs	r3, #1
	for (j = 0; j < i; j++) res <<= 1;
  400c02:	2b00      	cmp	r3, #0
  400c04:	dd79      	ble.n	400cfa <computeWaveletPitch+0x716>
  400c06:	2b01      	cmp	r3, #1
  400c08:	f000 808a 	beq.w	400d20 <computeWaveletPitch+0x73c>
  400c0c:	2b02      	cmp	r3, #2
  400c0e:	f000 8085 	beq.w	400d1c <computeWaveletPitch+0x738>
  400c12:	2b04      	cmp	r3, #4
  400c14:	bf0c      	ite	eq
  400c16:	2310      	moveq	r3, #16
  400c18:	2308      	movne	r3, #8
  400c1a:	ee07 3a90 	vmov	s15, r3
  400c1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				pitchF = DYW_SAMPLING_RATE/(_2power(curLevel-1)*curModeDistance);
  400c22:	ee69 9aa7 	vmul.f32	s19, s19, s15
  400c26:	ed5f 6a0b 	vldr	s13, [pc, #-44]	; 400bfc <computeWaveletPitch+0x618>
	if (pitch < 1.0f) pitch = -1.0f;
  400c2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
				pitchF = DYW_SAMPLING_RATE/(_2power(curLevel-1)*curModeDistance);
  400c2e:	eec6 7aa9 	vdiv.f32	s15, s13, s19
	if (pitch < 1.0f) pitch = -1.0f;
  400c32:	eef4 7ac7 	vcmpe.f32	s15, s14
  400c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400c3a:	d48c      	bmi.n	400b56 <computeWaveletPitch+0x572>
	if (pitch > -1.0) {
  400c3c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  400c40:	eef4 7ac7 	vcmpe.f32	s15, s14
  400c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400c48:	dd85      	ble.n	400b56 <computeWaveletPitch+0x572>
		if (pitchtracker._prevPitch < 0.0f) 
  400c4a:	4a36      	ldr	r2, [pc, #216]	; (400d24 <computeWaveletPitch+0x740>)
  400c4c:	edd2 6a00 	vldr	s13, [r2]
  400c50:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400c58:	d426      	bmi.n	400ca8 <computeWaveletPitch+0x6c4>
		else if (abs(pitchtracker._prevPitch - pitch)/pitch < acceptedError) 
  400c5a:	ee36 7ae7 	vsub.f32	s14, s13, s15
  400c5e:	ed9f 6a32 	vldr	s12, [pc, #200]	; 400d28 <computeWaveletPitch+0x744>
  400c62:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  400c66:	ee17 3a10 	vmov	r3, s14
  400c6a:	2b00      	cmp	r3, #0
  400c6c:	bfb8      	it	lt
  400c6e:	425b      	neglt	r3, r3
  400c70:	ee07 3a10 	vmov	s14, r3
			pitchtracker._pitchConfidence = Min(maxConfidence, pitchtracker._pitchConfidence + 1); // maximum 3
  400c74:	6853      	ldr	r3, [r2, #4]
		else if (abs(pitchtracker._prevPitch - pitch)/pitch < acceptedError) 
  400c76:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  400c7a:	eec7 5a27 	vdiv.f32	s11, s14, s15
  400c7e:	eef4 5ac6 	vcmpe.f32	s11, s12
  400c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400c86:	d507      	bpl.n	400c98 <computeWaveletPitch+0x6b4>
			pitchtracker._pitchConfidence = Min(maxConfidence, pitchtracker._pitchConfidence + 1); // maximum 3
  400c88:	2b04      	cmp	r3, #4
			pitchtracker._prevPitch = pitch;
  400c8a:	edc2 7a00 	vstr	s15, [r2]
			pitchtracker._pitchConfidence = Min(maxConfidence, pitchtracker._pitchConfidence + 1); // maximum 3
  400c8e:	bfd4      	ite	le
  400c90:	3301      	addle	r3, #1
  400c92:	2305      	movgt	r3, #5
				pitchtracker._pitchConfidence = max(0, pitchtracker._pitchConfidence - 1);
  400c94:	6053      	str	r3, [r2, #4]
  400c96:	e76d      	b.n	400b74 <computeWaveletPitch+0x590>
		else if ((pitchtracker._pitchConfidence >= maxConfidence-2) && Abs(pitchtracker._prevPitch - 2.0f*pitch)/(2.0f*pitch) < acceptedError) 
  400c98:	2b02      	cmp	r3, #2
  400c9a:	dc0a      	bgt.n	400cb2 <computeWaveletPitch+0x6ce>
			if (pitchtracker._pitchConfidence >= 1) 
  400c9c:	2b00      	cmp	r3, #0
  400c9e:	dd03      	ble.n	400ca8 <computeWaveletPitch+0x6c4>
				pitchtracker._pitchConfidence = max(0, pitchtracker._pitchConfidence - 1);
  400ca0:	3b01      	subs	r3, #1
				estimatedPitch = pitchtracker._prevPitch;
  400ca2:	eef0 7a66 	vmov.f32	s15, s13
  400ca6:	e7f5      	b.n	400c94 <computeWaveletPitch+0x6b0>
				pitchtracker._pitchConfidence = 1;
  400ca8:	2301      	movs	r3, #1
				pitchtracker._prevPitch = pitch;
  400caa:	edc2 7a00 	vstr	s15, [r2]
				pitchtracker._pitchConfidence = 1;
  400cae:	6053      	str	r3, [r2, #4]
  400cb0:	e762      	b.n	400b78 <computeWaveletPitch+0x594>
		else if ((pitchtracker._pitchConfidence >= maxConfidence-2) && Abs(pitchtracker._prevPitch - 2.0f*pitch)/(2.0f*pitch) < acceptedError) 
  400cb2:	ee37 7aa7 	vadd.f32	s14, s15, s15
  400cb6:	ee76 5ac7 	vsub.f32	s11, s13, s14
  400cba:	eef0 5ae5 	vabs.f32	s11, s11
  400cbe:	ee85 5a87 	vdiv.f32	s10, s11, s14
  400cc2:	eeb4 5ac6 	vcmpe.f32	s10, s12
  400cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400cca:	d504      	bpl.n	400cd6 <computeWaveletPitch+0x6f2>
			pitchtracker._prevPitch = estimatedPitch;
  400ccc:	ed82 7a00 	vstr	s14, [r2]
			estimatedPitch = 2.0f*pitch;
  400cd0:	eef0 7a47 	vmov.f32	s15, s14
  400cd4:	e750      	b.n	400b78 <computeWaveletPitch+0x594>
		else if ((pitchtracker._pitchConfidence >= maxConfidence-2) && Abs(pitchtracker._prevPitch - 0.5f*pitch)/(0.5f*pitch) < acceptedError) 
  400cd6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
  400cda:	ee67 7a87 	vmul.f32	s15, s15, s14
  400cde:	ee36 7ae7 	vsub.f32	s14, s13, s15
  400ce2:	eeb0 7ac7 	vabs.f32	s14, s14
  400ce6:	eec7 5a27 	vdiv.f32	s11, s14, s15
  400cea:	eef4 5ac6 	vcmpe.f32	s11, s12
  400cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400cf2:	d5d5      	bpl.n	400ca0 <computeWaveletPitch+0x6bc>
			pitchtracker._prevPitch = estimatedPitch;
  400cf4:	edc2 7a00 	vstr	s15, [r2]
  400cf8:	e73e      	b.n	400b78 <computeWaveletPitch+0x594>
	for (j = 0; j < i; j++) res <<= 1;
  400cfa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  400cfe:	e790      	b.n	400c22 <computeWaveletPitch+0x63e>
					d = Abs(maxs[i] - maxs[i+j]);
  400d00:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
  400d04:	ebae 0303 	sub.w	r3, lr, r3
  400d08:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
  400d0c:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
					distances[d]++; 
  400d10:	f85b 3020 	ldr.w	r3, [fp, r0, lsl #2]
  400d14:	3301      	adds	r3, #1
  400d16:	f84b 3020 	str.w	r3, [fp, r0, lsl #2]
  400d1a:	e65e      	b.n	4009da <computeWaveletPitch+0x3f6>
	for (j = 0; j < i; j++) res <<= 1;
  400d1c:	2304      	movs	r3, #4
  400d1e:	e77c      	b.n	400c1a <computeWaveletPitch+0x636>
  400d20:	2302      	movs	r3, #2
  400d22:	e77a      	b.n	400c1a <computeWaveletPitch+0x636>
  400d24:	20400020 	.word	0x20400020
  400d28:	3e4ccccd 	.word	0x3e4ccccd

00400d2c <gfx_set_clipping>:
static gfx_ext_draw_handler_t gfx_ext_draw_func;

/* This function is documented in gfx.h */
void gfx_set_clipping(gfx_coord_t min_x, gfx_coord_t min_y,
		gfx_coord_t max_x, gfx_coord_t max_y)
{
  400d2c:	b4f0      	push	{r4, r5, r6, r7}

	if (min_y < 0) {
		min_y = 0;
	}

	if (max_x >= gfx_width) {
  400d2e:	4c0e      	ldr	r4, [pc, #56]	; (400d68 <gfx_set_clipping+0x3c>)
  400d30:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  400d34:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  400d38:	f9b4 4000 	ldrsh.w	r4, [r4]
  400d3c:	4294      	cmp	r4, r2
  400d3e:	dc01      	bgt.n	400d44 <gfx_set_clipping+0x18>
		max_x = gfx_width - 1;
  400d40:	1e62      	subs	r2, r4, #1
  400d42:	b212      	sxth	r2, r2
	}

	if (max_y >= gfx_height) {
  400d44:	4c09      	ldr	r4, [pc, #36]	; (400d6c <gfx_set_clipping+0x40>)
  400d46:	f9b4 4000 	ldrsh.w	r4, [r4]
  400d4a:	429c      	cmp	r4, r3
  400d4c:	dc01      	bgt.n	400d52 <gfx_set_clipping+0x26>
		max_y = gfx_height - 1;
  400d4e:	3c01      	subs	r4, #1
  400d50:	b223      	sxth	r3, r4
	}

	gfx_min_x = min_x;
  400d52:	4f07      	ldr	r7, [pc, #28]	; (400d70 <gfx_set_clipping+0x44>)
	gfx_min_y = min_y;
  400d54:	4e07      	ldr	r6, [pc, #28]	; (400d74 <gfx_set_clipping+0x48>)
	gfx_max_x = max_x;
  400d56:	4d08      	ldr	r5, [pc, #32]	; (400d78 <gfx_set_clipping+0x4c>)
	gfx_max_y = max_y;
  400d58:	4c08      	ldr	r4, [pc, #32]	; (400d7c <gfx_set_clipping+0x50>)
	gfx_min_x = min_x;
  400d5a:	8038      	strh	r0, [r7, #0]
	gfx_min_y = min_y;
  400d5c:	8031      	strh	r1, [r6, #0]
	gfx_max_x = max_x;
  400d5e:	802a      	strh	r2, [r5, #0]
	gfx_max_y = max_y;
  400d60:	8023      	strh	r3, [r4, #0]
#endif
}
  400d62:	bcf0      	pop	{r4, r5, r6, r7}
  400d64:	4770      	bx	lr
  400d66:	bf00      	nop
  400d68:	2043fc00 	.word	0x2043fc00
  400d6c:	2043fc0a 	.word	0x2043fc0a
  400d70:	2043fc02 	.word	0x2043fc02
  400d74:	2043fc06 	.word	0x2043fc06
  400d78:	2043fc04 	.word	0x2043fc04
  400d7c:	2043fc08 	.word	0x2043fc08

00400d80 <gfx_generic_draw_filled_rect>:

/* This function is documented in gfx.h */
void gfx_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		gfx_color_t color)
{
  400d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400d84:	f8bd 7020 	ldrh.w	r7, [sp, #32]
	gfx_coord_t x2;
	gfx_coord_t y2;

	if ((width == 0) || (height == 0)) {
  400d88:	2a00      	cmp	r2, #0
  400d8a:	d047      	beq.n	400e1c <gfx_generic_draw_filled_rect+0x9c>
  400d8c:	461d      	mov	r5, r3
  400d8e:	2b00      	cmp	r3, #0
  400d90:	d044      	beq.n	400e1c <gfx_generic_draw_filled_rect+0x9c>
		return;
	}

	/* Invert if width or height is negative. */
	if (width < 0) {
  400d92:	2a00      	cmp	r2, #0
  400d94:	4614      	mov	r4, r2
  400d96:	db4f      	blt.n	400e38 <gfx_generic_draw_filled_rect+0xb8>
		width = -width;
		x -= width - 1;
	}

	if (height < 0) {
  400d98:	2d00      	cmp	r5, #0
  400d9a:	db41      	blt.n	400e20 <gfx_generic_draw_filled_rect+0xa0>
		y -= height - 1;
	}

#ifdef CONF_GFX_USE_CLIPPING
	/* Nothing to do if entire rectangle is outside clipping region. */
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
  400d9c:	4b32      	ldr	r3, [pc, #200]	; (400e68 <gfx_generic_draw_filled_rect+0xe8>)
  400d9e:	f9b3 6000 	ldrsh.w	r6, [r3]
  400da2:	4286      	cmp	r6, r0
  400da4:	db3a      	blt.n	400e1c <gfx_generic_draw_filled_rect+0x9c>
  400da6:	4b31      	ldr	r3, [pc, #196]	; (400e6c <gfx_generic_draw_filled_rect+0xec>)
  400da8:	f9b3 e000 	ldrsh.w	lr, [r3]
  400dac:	458e      	cmp	lr, r1
  400dae:	db35      	blt.n	400e1c <gfx_generic_draw_filled_rect+0x9c>
			((x + width) <= gfx_min_x) ||
  400db0:	4b2f      	ldr	r3, [pc, #188]	; (400e70 <gfx_generic_draw_filled_rect+0xf0>)
  400db2:	1902      	adds	r2, r0, r4
  400db4:	f9b3 3000 	ldrsh.w	r3, [r3]
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
  400db8:	429a      	cmp	r2, r3
  400dba:	dd2f      	ble.n	400e1c <gfx_generic_draw_filled_rect+0x9c>
			((y + height) <= gfx_min_y)) {
  400dbc:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 400e7c <gfx_generic_draw_filled_rect+0xfc>
  400dc0:	eb01 0a05 	add.w	sl, r1, r5
  400dc4:	f9bc 9000 	ldrsh.w	r9, [ip]
			((x + width) <= gfx_min_x) ||
  400dc8:	45ca      	cmp	sl, r9
  400dca:	dd27      	ble.n	400e1c <gfx_generic_draw_filled_rect+0x9c>
		return;
	}

	/* Clip if outside left X limit. */
	if (x < gfx_min_x) {
  400dcc:	4298      	cmp	r0, r3
  400dce:	db3d      	blt.n	400e4c <gfx_generic_draw_filled_rect+0xcc>
  400dd0:	fa1f fc80 	uxth.w	ip, r0
		width -= gfx_min_x - x;
		x = gfx_min_x;
	}

	/* Clip if outside top Y limit. */
	if (y < gfx_min_y) {
  400dd4:	4549      	cmp	r1, r9
  400dd6:	db40      	blt.n	400e5a <gfx_generic_draw_filled_rect+0xda>
  400dd8:	fa1f f881 	uxth.w	r8, r1
		y = gfx_min_y;
	}
#endif

	/*  Compute bottom right point. */
	x2 = x + width - 1;
  400ddc:	f10c 32ff 	add.w	r2, ip, #4294967295
	y2 = y + height - 1;
  400de0:	f108 33ff 	add.w	r3, r8, #4294967295
	x2 = x + width - 1;
  400de4:	4422      	add	r2, r4
	y2 = y + height - 1;
  400de6:	442b      	add	r3, r5
	x2 = x + width - 1;
  400de8:	b212      	sxth	r2, r2
	y2 = y + height - 1;
  400dea:	b21b      	sxth	r3, r3

#ifdef CONF_GFX_USE_CLIPPING
	/* Clip if outside right X limit. */
	if (x2 > gfx_max_x) {
  400dec:	4296      	cmp	r6, r2
  400dee:	da04      	bge.n	400dfa <gfx_generic_draw_filled_rect+0x7a>
		x2 = gfx_max_x;
		width = x2 - x + 1;
  400df0:	1c74      	adds	r4, r6, #1
  400df2:	4632      	mov	r2, r6
  400df4:	eba4 040c 	sub.w	r4, r4, ip
  400df8:	b224      	sxth	r4, r4
	}

	/* Clip if outside bottom Y limit. */
	if (y2 > gfx_max_y) {
  400dfa:	459e      	cmp	lr, r3
  400dfc:	da05      	bge.n	400e0a <gfx_generic_draw_filled_rect+0x8a>
		y2 = gfx_max_y;
		height = y2 - y + 1;
  400dfe:	f10e 0501 	add.w	r5, lr, #1
  400e02:	4673      	mov	r3, lr
  400e04:	eba5 0508 	sub.w	r5, r5, r8
  400e08:	b22d      	sxth	r5, r5
	}
#endif

	/* Set up draw area and duplicate pixel color until area is full. */
	gfx_set_limits(x, y, x2, y2);
  400e0a:	4e1a      	ldr	r6, [pc, #104]	; (400e74 <gfx_generic_draw_filled_rect+0xf4>)
  400e0c:	47b0      	blx	r6
	gfx_duplicate_pixel(color, (uint32_t)width * height);
  400e0e:	fb04 f105 	mul.w	r1, r4, r5
  400e12:	4638      	mov	r0, r7
  400e14:	4b18      	ldr	r3, [pc, #96]	; (400e78 <gfx_generic_draw_filled_rect+0xf8>)
}
  400e16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gfx_duplicate_pixel(color, (uint32_t)width * height);
  400e1a:	4718      	bx	r3
  400e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		height = -height;
  400e20:	b2ab      	uxth	r3, r5
		y -= height - 1;
  400e22:	3101      	adds	r1, #1
		height = -height;
  400e24:	425d      	negs	r5, r3
		y -= height - 1;
  400e26:	4419      	add	r1, r3
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
  400e28:	4b0f      	ldr	r3, [pc, #60]	; (400e68 <gfx_generic_draw_filled_rect+0xe8>)
		height = -height;
  400e2a:	b22d      	sxth	r5, r5
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
  400e2c:	f9b3 6000 	ldrsh.w	r6, [r3]
		y -= height - 1;
  400e30:	b209      	sxth	r1, r1
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
  400e32:	4286      	cmp	r6, r0
  400e34:	dab7      	bge.n	400da6 <gfx_generic_draw_filled_rect+0x26>
  400e36:	e7f1      	b.n	400e1c <gfx_generic_draw_filled_rect+0x9c>
		width = -width;
  400e38:	b293      	uxth	r3, r2
		x -= width - 1;
  400e3a:	3001      	adds	r0, #1
	if (height < 0) {
  400e3c:	2d00      	cmp	r5, #0
		width = -width;
  400e3e:	f1c3 0400 	rsb	r4, r3, #0
		x -= width - 1;
  400e42:	4418      	add	r0, r3
		width = -width;
  400e44:	b224      	sxth	r4, r4
		x -= width - 1;
  400e46:	b200      	sxth	r0, r0
	if (height < 0) {
  400e48:	daa8      	bge.n	400d9c <gfx_generic_draw_filled_rect+0x1c>
  400e4a:	e7e9      	b.n	400e20 <gfx_generic_draw_filled_rect+0xa0>
		width -= gfx_min_x - x;
  400e4c:	fa1f fc83 	uxth.w	ip, r3
  400e50:	4618      	mov	r0, r3
  400e52:	eba2 040c 	sub.w	r4, r2, ip
  400e56:	b224      	sxth	r4, r4
  400e58:	e7bc      	b.n	400dd4 <gfx_generic_draw_filled_rect+0x54>
		height -= gfx_min_y - y;
  400e5a:	fa1f f889 	uxth.w	r8, r9
  400e5e:	4649      	mov	r1, r9
  400e60:	ebaa 0508 	sub.w	r5, sl, r8
  400e64:	b22d      	sxth	r5, r5
  400e66:	e7b9      	b.n	400ddc <gfx_generic_draw_filled_rect+0x5c>
  400e68:	2043fc04 	.word	0x2043fc04
  400e6c:	2043fc08 	.word	0x2043fc08
  400e70:	2043fc02 	.word	0x2043fc02
  400e74:	00402051 	.word	0x00402051
  400e78:	004020d1 	.word	0x004020d1
  400e7c:	2043fc06 	.word	0x2043fc06

00400e80 <gfx_ili9488_init>:
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
	LCD_MULTI_WD(us_data, size);
}

void gfx_ili9488_init(void)
{
  400e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400e84:	b086      	sub	sp, #24

	/* Initialize display parameter */
	g_ili9488_display_opt.ul_width= ILI9488_LCD_WIDTH;
	g_ili9488_display_opt.ul_height = ILI9488_LCD_HEIGHT;
	g_ili9488_display_opt.foreground_color= COLOR_WHITE;
	g_ili9488_display_opt.background_color = COLOR_BLACK;
  400e86:	2400      	movs	r4, #0
	gfx_width = ILI9488_LCD_WIDTH;
  400e88:	4d28      	ldr	r5, [pc, #160]	; (400f2c <gfx_ili9488_init+0xac>)
	g_ili9488_display_opt.foreground_color= COLOR_WHITE;
  400e8a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
	gfx_height = ILI9488_LCD_HEIGHT;
  400e8e:	4e28      	ldr	r6, [pc, #160]	; (400f30 <gfx_ili9488_init+0xb0>)
	gfx_width = ILI9488_LCD_WIDTH;
  400e90:	f44f 78a0 	mov.w	r8, #320	; 0x140
	gfx_height = ILI9488_LCD_HEIGHT;
  400e94:	f44f 77f0 	mov.w	r7, #480	; 0x1e0
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  400e98:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 400f50 <gfx_ili9488_init+0xd0>

	ili9488_init(&g_ili9488_display_opt);
  400e9c:	a802      	add	r0, sp, #8
  400e9e:	4b25      	ldr	r3, [pc, #148]	; (400f34 <gfx_ili9488_init+0xb4>)
	g_ili9488_display_opt.foreground_color= COLOR_WHITE;
  400ea0:	9204      	str	r2, [sp, #16]

/* Define EBI access for ILI9488 16-bit System Interface.*/
#ifdef ILI9488_EBIMODE
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  400ea2:	f04f 49c6 	mov.w	r9, #1660944384	; 0x63000000
	gfx_width = ILI9488_LCD_WIDTH;
  400ea6:	f8a5 8000 	strh.w	r8, [r5]
	g_ili9488_display_opt.background_color = COLOR_BLACK;
  400eaa:	9405      	str	r4, [sp, #20]
	g_ili9488_display_opt.ul_width= ILI9488_LCD_WIDTH;
  400eac:	f8cd 8008 	str.w	r8, [sp, #8]
	gfx_height = ILI9488_LCD_HEIGHT;
  400eb0:	8037      	strh	r7, [r6, #0]
	g_ili9488_display_opt.ul_height = ILI9488_LCD_HEIGHT;
  400eb2:	9703      	str	r7, [sp, #12]
	ili9488_init(&g_ili9488_display_opt);
  400eb4:	4798      	blx	r3
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  400eb6:	4650      	mov	r0, sl
  400eb8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400ebc:	4b1e      	ldr	r3, [pc, #120]	; (400f38 <gfx_ili9488_init+0xb8>)
  400ebe:	4798      	blx	r3
  400ec0:	2353      	movs	r3, #83	; 0x53
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  400ec2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400ec6:	4650      	mov	r0, sl
  400ec8:	f8a9 3000 	strh.w	r3, [r9]
  400ecc:	4b1b      	ldr	r3, [pc, #108]	; (400f3c <gfx_ili9488_init+0xbc>)
  400ece:	4798      	blx	r3
		*(volatile uint16_t *)(BOARD_ILI9488_ADDR) = lcd_data;
	}
	static inline void LCD_MULTI_WD(const uint16_t *lcd_data, uint32_t size)
	{
		while(size--) {
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  400ed0:	2224      	movs	r2, #36	; 0x24
	
	/* Attempt to make display brighter :( */ 
	ili9488_color_t param = 0x24;
	ili9488_write_register(ILI9488_CMD_WRITE_CTRL_DISPLAY, &param, 1); 
	ili9488_write_brightness(0xFFFF);
  400ed2:	f64f 70ff 	movw	r0, #65535	; 0xffff
  400ed6:	4b1a      	ldr	r3, [pc, #104]	; (400f40 <gfx_ili9488_init+0xc0>)
  400ed8:	f8a9 2000 	strh.w	r2, [r9]
  400edc:	4798      	blx	r3

	ili9488_display_on();
  400ede:	4b19      	ldr	r3, [pc, #100]	; (400f44 <gfx_ili9488_init+0xc4>)
  400ee0:	4798      	blx	r3

	/* Set clipping area to whole screen initially */
	gfx_set_clipping(0, 0, gfx_width, gfx_height);
  400ee2:	f8df 9070 	ldr.w	r9, [pc, #112]	; 400f54 <gfx_ili9488_init+0xd4>
  400ee6:	4621      	mov	r1, r4
  400ee8:	f9b5 2000 	ldrsh.w	r2, [r5]
  400eec:	f9b6 3000 	ldrsh.w	r3, [r6]
  400ef0:	4620      	mov	r0, r4
  400ef2:	47c8      	blx	r9
	ili9488_set_orientation(flags);
  400ef4:	2002      	movs	r0, #2
  400ef6:	4b14      	ldr	r3, [pc, #80]	; (400f48 <gfx_ili9488_init+0xc8>)
  400ef8:	4798      	blx	r3
	gfx_set_clipping(0, 0, gfx_width - 1, gfx_height - 1);
  400efa:	4621      	mov	r1, r4
  400efc:	4620      	mov	r0, r4
  400efe:	f240 133f 	movw	r3, #319	; 0x13f
  400f02:	f240 12df 	movw	r2, #479	; 0x1df
		gfx_width = ILI9488_SWITCH_XY_HEIGHT;
  400f06:	802f      	strh	r7, [r5, #0]
		gfx_height = ILI9488_SWITCH_XY_WIDTH;
  400f08:	f8a6 8000 	strh.w	r8, [r6]
	gfx_set_clipping(0, 0, gfx_width - 1, gfx_height - 1);
  400f0c:	47c8      	blx	r9

	gfx_set_orientation(GFX_FLIP_Y);
	gfx_draw_filled_rect(0, 0, gfx_width, gfx_height, g_ili9488_display_opt.background_color);			
  400f0e:	f9b5 2000 	ldrsh.w	r2, [r5]
  400f12:	4621      	mov	r1, r4
  400f14:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  400f18:	4620      	mov	r0, r4
  400f1a:	f9b6 3000 	ldrsh.w	r3, [r6]
  400f1e:	4c0b      	ldr	r4, [pc, #44]	; (400f4c <gfx_ili9488_init+0xcc>)
  400f20:	9500      	str	r5, [sp, #0]
  400f22:	47a0      	blx	r4
}
  400f24:	b006      	add	sp, #24
  400f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400f2a:	bf00      	nop
  400f2c:	2043fc00 	.word	0x2043fc00
  400f30:	2043fc0a 	.word	0x2043fc0a
  400f34:	00401ed9 	.word	0x00401ed9
  400f38:	00402971 	.word	0x00402971
  400f3c:	0040296d 	.word	0x0040296d
  400f40:	0040201d 	.word	0x0040201d
  400f44:	00401e21 	.word	0x00401e21
  400f48:	00402079 	.word	0x00402079
  400f4c:	00400d81 	.word	0x00400d81
  400f50:	400e1200 	.word	0x400e1200
  400f54:	00400d2d 	.word	0x00400d2d

00400f58 <lcd_init>:
#include "LCDLib.h"
#include "asf.h"

/*********************************** Public Functions Start ***********************************/
void lcd_init(void)
{
  400f58:	b510      	push	{r4, lr}
	gfx_init();
  400f5a:	4b03      	ldr	r3, [pc, #12]	; (400f68 <lcd_init+0x10>)
  400f5c:	4798      	blx	r3
	mxt_init();
  400f5e:	4b03      	ldr	r3, [pc, #12]	; (400f6c <lcd_init+0x14>)
}
  400f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mxt_init();
  400f64:	4718      	bx	r3
  400f66:	bf00      	nop
  400f68:	00400e81 	.word	0x00400e81
  400f6c:	00400f71 	.word	0x00400f71

00400f70 <mxt_init>:
	else 
		return false; 
}

void mxt_init(void)
{
  400f70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	enum status_code status;

	/* T8 configuration object data */
	uint8_t t8_object[] = {
  400f74:	4c57      	ldr	r4, [pc, #348]	; (4010d4 <mxt_init+0x164>)
{
  400f76:	b09f      	sub	sp, #124	; 0x7c
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
			MXT_GEN_COMMANDPROCESSOR_T6, 0)
			+ MXT_GEN_COMMANDPROCESSOR_RESET, 0x01);

	/* Wait for the reset of the device to complete */
	delay_ms(MXT_RESET_TIME);
  400f78:	f8df 9190 	ldr.w	r9, [pc, #400]	; 40110c <mxt_init+0x19c>
	uint8_t t9_object[] = {
  400f7c:	f104 050c 	add.w	r5, r4, #12
	uint8_t t8_object[] = {
  400f80:	ab06      	add	r3, sp, #24
	uint8_t t9_object[] = {
  400f82:	af15      	add	r7, sp, #84	; 0x54
	uint8_t t46_object[] = {
  400f84:	f104 0c30 	add.w	ip, r4, #48	; 0x30
  400f88:	46ee      	mov	lr, sp
	uint8_t t56_object[] = {
  400f8a:	ae0c      	add	r6, sp, #48	; 0x30
			MXT_GEN_POWERCONFIG_T7, 0) + 2, 0x4b);
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
			MXT_GEN_POWERCONFIG_T7, 0) + 3, 0x84);

	// Write predefined configuration data to configuration objects 
	mxt_write_config_object(&device, mxt_get_object_address(&device,
  400f8c:	f8df 8180 	ldr.w	r8, [pc, #384]	; 401110 <mxt_init+0x1a0>
	uint8_t t8_object[] = {
  400f90:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  400f94:	c303      	stmia	r3!, {r0, r1}
  400f96:	801a      	strh	r2, [r3, #0]
	uint8_t t56_object[] = {
  400f98:	343c      	adds	r4, #60	; 0x3c
	uint8_t t9_object[] = {
  400f9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400f9c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
  400f9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400fa0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
	uint8_t t46_object[] = {
  400fa2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
	uint8_t t9_object[] = {
  400fa6:	682b      	ldr	r3, [r5, #0]
	twihs_master_options_t twi_opt = {
  400fa8:	2500      	movs	r5, #0
	uint8_t t46_object[] = {
  400faa:	e8ae 0003 	stmia.w	lr!, {r0, r1}
	uint8_t t9_object[] = {
  400fae:	603b      	str	r3, [r7, #0]
	twihs_master_options_t twi_opt = {
  400fb0:	274a      	movs	r7, #74	; 0x4a
	uint8_t t46_object[] = {
  400fb2:	f88e 2000 	strb.w	r2, [lr]
	twihs_master_options_t twi_opt = {
  400fb6:	f8df e15c 	ldr.w	lr, [pc, #348]	; 401114 <mxt_init+0x1a4>
	uint8_t t56_object[] = {
  400fba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  400fbc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  400fbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  400fc0:	f8d4 c000 	ldr.w	ip, [r4]
	pio_configure(PIOD, PIO_INPUT, PIO_PD28, PIO_PULLUP);
  400fc4:	4c44      	ldr	r4, [pc, #272]	; (4010d8 <mxt_init+0x168>)
	twihs_master_options_t twi_opt = {
  400fc6:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
  400fca:	950b      	str	r5, [sp, #44]	; 0x2c
  400fcc:	9509      	str	r5, [sp, #36]	; 0x24
  400fce:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
	uint8_t t56_object[] = {
  400fd2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	pio_configure(PIOD, PIO_INPUT, PIO_PD28, PIO_PULLUP);
  400fd4:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400fd8:	2301      	movs	r3, #1
  400fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400fde:	483f      	ldr	r0, [pc, #252]	; (4010dc <mxt_init+0x16c>)
	uint8_t t56_object[] = {
  400fe0:	f886 c000 	strb.w	ip, [r6]
	pio_configure(PIOD, PIO_INPUT, PIO_PD28, PIO_PULLUP);
  400fe4:	47a0      	blx	r4
typedef twihs_packet_t twihs_package_t;

static inline uint32_t twihs_master_setup(twihs_master_t p_twihs,
		twihs_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
  400fe6:	4a3e      	ldr	r2, [pc, #248]	; (4010e0 <mxt_init+0x170>)
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400fe8:	2013      	movs	r0, #19
  400fea:	4b3e      	ldr	r3, [pc, #248]	; (4010e4 <mxt_init+0x174>)

	// Issue recalibration command to maXTouch device by writing a non-zero
	 // value to the calibrate register 
	mxt_write_config_reg(&device, mxt_get_object_address(&device, MXT_GEN_COMMANDPROCESSOR_T6, 0) + MXT_GEN_COMMANDPROCESSOR_CALIBRATE, 0x01); 
	
	delay_ms(100); 
  400fec:	f44f 74af 	mov.w	r4, #350	; 0x15e
  400ff0:	9209      	str	r2, [sp, #36]	; 0x24
	p_opt->smbus      = 0;
  400ff2:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
  400ff6:	4798      	blx	r3
#endif		
	} else {
		// Do Nothing
	}
#endif
	return (twihs_master_init(p_twihs, p_opt));
  400ff8:	a909      	add	r1, sp, #36	; 0x24
  400ffa:	4b3b      	ldr	r3, [pc, #236]	; (4010e8 <mxt_init+0x178>)
  400ffc:	483b      	ldr	r0, [pc, #236]	; (4010ec <mxt_init+0x17c>)
  400ffe:	4798      	blx	r3
	status = mxt_init_device(&device, MAXTOUCH_TWI_INTERFACE,
  401000:	4e3b      	ldr	r6, [pc, #236]	; (4010f0 <mxt_init+0x180>)
  401002:	237c      	movs	r3, #124	; 0x7c
  401004:	463a      	mov	r2, r7
  401006:	4939      	ldr	r1, [pc, #228]	; (4010ec <mxt_init+0x17c>)
  401008:	483a      	ldr	r0, [pc, #232]	; (4010f4 <mxt_init+0x184>)
  40100a:	47b0      	blx	r6
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  40100c:	4e3a      	ldr	r6, [pc, #232]	; (4010f8 <mxt_init+0x188>)
  40100e:	462a      	mov	r2, r5
  401010:	2106      	movs	r1, #6
  401012:	4838      	ldr	r0, [pc, #224]	; (4010f4 <mxt_init+0x184>)
  401014:	4f39      	ldr	r7, [pc, #228]	; (4010fc <mxt_init+0x18c>)
  401016:	47b0      	blx	r6
  401018:	2201      	movs	r2, #1
  40101a:	4601      	mov	r1, r0
  40101c:	4835      	ldr	r0, [pc, #212]	; (4010f4 <mxt_init+0x184>)
  40101e:	47b8      	blx	r7
	delay_ms(MXT_RESET_TIME);
  401020:	4837      	ldr	r0, [pc, #220]	; (401100 <mxt_init+0x190>)
  401022:	47c8      	blx	r9
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  401024:	462a      	mov	r2, r5
  401026:	2107      	movs	r1, #7
  401028:	4832      	ldr	r0, [pc, #200]	; (4010f4 <mxt_init+0x184>)
  40102a:	47b0      	blx	r6
  40102c:	2220      	movs	r2, #32
  40102e:	4601      	mov	r1, r0
  401030:	4830      	ldr	r0, [pc, #192]	; (4010f4 <mxt_init+0x184>)
  401032:	47b8      	blx	r7
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  401034:	462a      	mov	r2, r5
  401036:	2107      	movs	r1, #7
  401038:	482e      	ldr	r0, [pc, #184]	; (4010f4 <mxt_init+0x184>)
  40103a:	47b0      	blx	r6
  40103c:	1c41      	adds	r1, r0, #1
  40103e:	2210      	movs	r2, #16
  401040:	482c      	ldr	r0, [pc, #176]	; (4010f4 <mxt_init+0x184>)
  401042:	b289      	uxth	r1, r1
  401044:	47b8      	blx	r7
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  401046:	462a      	mov	r2, r5
  401048:	2107      	movs	r1, #7
  40104a:	482a      	ldr	r0, [pc, #168]	; (4010f4 <mxt_init+0x184>)
  40104c:	47b0      	blx	r6
  40104e:	1c81      	adds	r1, r0, #2
  401050:	224b      	movs	r2, #75	; 0x4b
  401052:	4828      	ldr	r0, [pc, #160]	; (4010f4 <mxt_init+0x184>)
  401054:	b289      	uxth	r1, r1
  401056:	47b8      	blx	r7
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  401058:	462a      	mov	r2, r5
  40105a:	2107      	movs	r1, #7
  40105c:	4825      	ldr	r0, [pc, #148]	; (4010f4 <mxt_init+0x184>)
  40105e:	47b0      	blx	r6
  401060:	1cc1      	adds	r1, r0, #3
  401062:	2284      	movs	r2, #132	; 0x84
  401064:	4823      	ldr	r0, [pc, #140]	; (4010f4 <mxt_init+0x184>)
  401066:	b289      	uxth	r1, r1
  401068:	47b8      	blx	r7
	mxt_write_config_object(&device, mxt_get_object_address(&device,
  40106a:	462a      	mov	r2, r5
  40106c:	2108      	movs	r1, #8
  40106e:	4821      	ldr	r0, [pc, #132]	; (4010f4 <mxt_init+0x184>)
  401070:	47b0      	blx	r6
  401072:	aa06      	add	r2, sp, #24
  401074:	4601      	mov	r1, r0
  401076:	481f      	ldr	r0, [pc, #124]	; (4010f4 <mxt_init+0x184>)
  401078:	47c0      	blx	r8
	mxt_write_config_object(&device, mxt_get_object_address(&device,
  40107a:	462a      	mov	r2, r5
  40107c:	2109      	movs	r1, #9
  40107e:	481d      	ldr	r0, [pc, #116]	; (4010f4 <mxt_init+0x184>)
  401080:	47b0      	blx	r6
  401082:	aa15      	add	r2, sp, #84	; 0x54
  401084:	4601      	mov	r1, r0
  401086:	481b      	ldr	r0, [pc, #108]	; (4010f4 <mxt_init+0x184>)
  401088:	47c0      	blx	r8
	mxt_write_config_object(&device, mxt_get_object_address(&device,
  40108a:	462a      	mov	r2, r5
  40108c:	212e      	movs	r1, #46	; 0x2e
  40108e:	4819      	ldr	r0, [pc, #100]	; (4010f4 <mxt_init+0x184>)
  401090:	47b0      	blx	r6
  401092:	466a      	mov	r2, sp
  401094:	4601      	mov	r1, r0
  401096:	4817      	ldr	r0, [pc, #92]	; (4010f4 <mxt_init+0x184>)
  401098:	47c0      	blx	r8
	mxt_write_config_object(&device, mxt_get_object_address(&device,
  40109a:	462a      	mov	r2, r5
  40109c:	2138      	movs	r1, #56	; 0x38
  40109e:	4815      	ldr	r0, [pc, #84]	; (4010f4 <mxt_init+0x184>)
  4010a0:	47b0      	blx	r6
  4010a2:	aa0c      	add	r2, sp, #48	; 0x30
  4010a4:	4601      	mov	r1, r0
  4010a6:	4813      	ldr	r0, [pc, #76]	; (4010f4 <mxt_init+0x184>)
  4010a8:	47c0      	blx	r8
	mxt_write_config_reg(&device, mxt_get_object_address(&device, MXT_GEN_COMMANDPROCESSOR_T6, 0) + MXT_GEN_COMMANDPROCESSOR_CALIBRATE, 0x01); 
  4010aa:	462a      	mov	r2, r5
  4010ac:	2106      	movs	r1, #6
  4010ae:	4811      	ldr	r0, [pc, #68]	; (4010f4 <mxt_init+0x184>)
  4010b0:	47b0      	blx	r6
  4010b2:	1c81      	adds	r1, r0, #2
  4010b4:	2201      	movs	r2, #1
  4010b6:	480f      	ldr	r0, [pc, #60]	; (4010f4 <mxt_init+0x184>)
  4010b8:	b289      	uxth	r1, r1
  4010ba:	4e12      	ldr	r6, [pc, #72]	; (401104 <mxt_init+0x194>)
  4010bc:	47b8      	blx	r7
	delay_ms(100); 
  4010be:	4812      	ldr	r0, [pc, #72]	; (401108 <mxt_init+0x198>)
		mxt_read_message(data, &message);
  4010c0:	4d0c      	ldr	r5, [pc, #48]	; (4010f4 <mxt_init+0x184>)
	delay_ms(100); 
  4010c2:	47c8      	blx	r9
		mxt_read_message(data, &message);
  4010c4:	a903      	add	r1, sp, #12
  4010c6:	4628      	mov	r0, r5
  4010c8:	47b0      	blx	r6
	} while (--count);
  4010ca:	3c01      	subs	r4, #1
  4010cc:	d1fa      	bne.n	4010c4 <mxt_init+0x154>
	
	// Make chg pin high 
	mxt_make_highchg(&device);
}
  4010ce:	b01f      	add	sp, #124	; 0x7c
  4010d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4010d4:	00409410 	.word	0x00409410
  4010d8:	00402975 	.word	0x00402975
  4010dc:	400e1400 	.word	0x400e1400
  4010e0:	08f0d180 	.word	0x08f0d180
  4010e4:	00403101 	.word	0x00403101
  4010e8:	00402289 	.word	0x00402289
  4010ec:	40018000 	.word	0x40018000
  4010f0:	00401659 	.word	0x00401659
  4010f4:	20404200 	.word	0x20404200
  4010f8:	00401a5d 	.word	0x00401a5d
  4010fc:	00401b21 	.word	0x00401b21
  401100:	003228d8 	.word	0x003228d8
  401104:	00401b69 	.word	0x00401b69
  401108:	004d2b25 	.word	0x004d2b25
  40110c:	20400001 	.word	0x20400001
  401110:	00401aa5 	.word	0x00401aa5
  401114:	00061a80 	.word	0x00061a80

00401118 <PSOLA_init>:
static float prev_pitch_shifts[MAX_NUM_SHIFTS]; 
static float window[10*WIN_SIZE]; // sufficiently large window array  
/************************ Static variables *********************/

void PSOLA_init(void)
{
  401118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	arm_fill_f32(0.0f, input_ring_buffer, RING_BUFFER_SIZE); 
  40111a:	2600      	movs	r6, #0
  40111c:	4c19      	ldr	r4, [pc, #100]	; (401184 <PSOLA_init+0x6c>)
  40111e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  401122:	4919      	ldr	r1, [pc, #100]	; (401188 <PSOLA_init+0x70>)
  401124:	4630      	mov	r0, r6
	arm_fill_f32(0.0f, output_ring_buffer, RING_BUFFER_SIZE);
	arm_fill_f32(0.0f, window, 10*WIN_SIZE); 
	arm_fill_f32(1.0f, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  401126:	4d19      	ldr	r5, [pc, #100]	; (40118c <PSOLA_init+0x74>)
	arm_fill_f32(0.0f, input_ring_buffer, RING_BUFFER_SIZE); 
  401128:	47a0      	blx	r4
	arm_fill_f32(0.0f, output_ring_buffer, RING_BUFFER_SIZE);
  40112a:	4630      	mov	r0, r6
  40112c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  401130:	4917      	ldr	r1, [pc, #92]	; (401190 <PSOLA_init+0x78>)
  401132:	47a0      	blx	r4
	arm_fill_f32(0.0f, window, 10*WIN_SIZE); 
  401134:	4630      	mov	r0, r6
  401136:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  40113a:	4916      	ldr	r1, [pc, #88]	; (401194 <PSOLA_init+0x7c>)
  40113c:	47a0      	blx	r4
  40113e:	272c      	movs	r7, #44	; 0x2c
	arm_fill_f32(1.0f, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  401140:	4629      	mov	r1, r5
  401142:	220b      	movs	r2, #11
  401144:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
	prev_pitch_shifts[0] = 1.0f; 
  401148:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
	arm_fill_f32(1.0f, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  40114c:	47a0      	blx	r4
	prev_pitch_shifts[1] = -1.0f; 
  40114e:	4b12      	ldr	r3, [pc, #72]	; (401198 <PSOLA_init+0x80>)
  401150:	463a      	mov	r2, r7
  401152:	4c12      	ldr	r4, [pc, #72]	; (40119c <PSOLA_init+0x84>)
  401154:	2100      	movs	r1, #0
  401156:	4812      	ldr	r0, [pc, #72]	; (4011a0 <PSOLA_init+0x88>)
  401158:	606b      	str	r3, [r5, #4]
	prev_pitch_shifts[0] = 1.0f; 
  40115a:	602e      	str	r6, [r5, #0]
  40115c:	47a0      	blx	r4
  40115e:	463a      	mov	r2, r7
  401160:	2100      	movs	r1, #0
  401162:	4810      	ldr	r0, [pc, #64]	; (4011a4 <PSOLA_init+0x8c>)
	{
		outPtrList[i] = 0; 
		saved_samplesLeftInPeriod[i] = 0; 
	}
		
	current_num_shifts = 1; // always doing root 
  401164:	2701      	movs	r7, #1
  401166:	47a0      	blx	r4
  401168:	4e0f      	ldr	r6, [pc, #60]	; (4011a8 <PSOLA_init+0x90>)
	
	readPos = RING_BUFFER_SIZE - WIN_SIZE; // + WEIRD_OFFSET; 
  40116a:	4c10      	ldr	r4, [pc, #64]	; (4011ac <PSOLA_init+0x94>)
  40116c:	f44f 5578 	mov.w	r5, #15872	; 0x3e00
	inPtr = 0; 
  401170:	490f      	ldr	r1, [pc, #60]	; (4011b0 <PSOLA_init+0x98>)
  401172:	2000      	movs	r0, #0
	inputPeriodLength = PSOLA_SAMPLE_RATE / MINIMUM_PITCH; 
  401174:	4b0f      	ldr	r3, [pc, #60]	; (4011b4 <PSOLA_init+0x9c>)
  401176:	f240 2245 	movw	r2, #581	; 0x245
	current_num_shifts = 1; // always doing root 
  40117a:	6037      	str	r7, [r6, #0]
	readPos = RING_BUFFER_SIZE - WIN_SIZE; // + WEIRD_OFFSET; 
  40117c:	6025      	str	r5, [r4, #0]
	inPtr = 0; 
  40117e:	6008      	str	r0, [r1, #0]
	inputPeriodLength = PSOLA_SAMPLE_RATE / MINIMUM_PITCH; 
  401180:	601a      	str	r2, [r3, #0]
  401182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401184:	00405a11 	.word	0x00405a11
  401188:	2040422c 	.word	0x2040422c
  40118c:	20424258 	.word	0x20424258
  401190:	20414258 	.word	0x20414258
  401194:	204242b4 	.word	0x204242b4
  401198:	bf800000 	.word	0xbf800000
  40119c:	00406cfd 	.word	0x00406cfd
  4011a0:	2041422c 	.word	0x2041422c
  4011a4:	20424288 	.word	0x20424288
  4011a8:	20404220 	.word	0x20404220
  4011ac:	20424284 	.word	0x20424284
  4011b0:	20404224 	.word	0x20404224
  4011b4:	20404228 	.word	0x20404228

004011b8 <create_harmonies>:
	currentPitch = MINIMUM_PITCH; 
}

// assumes valid pitch shifts 
void create_harmonies(float* input, float *output, float inputPitch, float *pitch_shifts_in, float volume)
{
  4011b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4011bc:	ed2d 8b06 	vpush	{d8-d10}
  4011c0:	b08d      	sub	sp, #52	; 0x34
  4011c2:	ee08 2a90 	vmov	s17, r2
  4011c6:	4da2      	ldr	r5, [pc, #648]	; (401450 <create_harmonies+0x298>)
  4011c8:	9308      	str	r3, [sp, #32]
	uint32_t i, w; 
	int32_t olaIdx; 
	
	uint32_t saved_inPtr = inPtr; 
  4011ca:	4ba2      	ldr	r3, [pc, #648]	; (401454 <create_harmonies+0x29c>)
{
  4011cc:	910b      	str	r1, [sp, #44]	; 0x2c
	uint32_t saved_inPtr = inPtr; 
  4011ce:	681b      	ldr	r3, [r3, #0]
{
  4011d0:	ed9d 8a1c 	vldr	s16, [sp, #112]	; 0x70
	uint32_t outPtr; 
	uint32_t pitch_idx = 0; 
	
	uint32_t starting_input_ptr = inPtr + WIN_SIZE; 
  4011d4:	461a      	mov	r2, r3
	uint32_t saved_inPtr = inPtr; 
  4011d6:	9306      	str	r3, [sp, #24]
	uint32_t starting_input_ptr = inPtr + WIN_SIZE; 
  4011d8:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4011dc:	f502 6180 	add.w	r1, r2, #1024	; 0x400
	for (i = 0; i < WIN_SIZE; i++)
	{
		input_ring_buffer[(starting_input_ptr++) & RING_BUFFER_MASK] = input[i]; 
  4011e0:	f3c3 020d 	ubfx	r2, r3, #0, #14
  4011e4:	3301      	adds	r3, #1
  4011e6:	f850 4b04 	ldr.w	r4, [r0], #4
  4011ea:	eb05 0282 	add.w	r2, r5, r2, lsl #2
	for (i = 0; i < WIN_SIZE; i++)
  4011ee:	428b      	cmp	r3, r1
		input_ring_buffer[(starting_input_ptr++) & RING_BUFFER_MASK] = input[i]; 
  4011f0:	6014      	str	r4, [r2, #0]
	for (i = 0; i < WIN_SIZE; i++)
  4011f2:	d1f5      	bne.n	4011e0 <create_harmonies+0x28>
	}
		
	uint32_t outLag;
	uint32_t inHalfAway;
	float periodRatio;
	float inputPeriodLengthRecip = 1.0f / inputPeriodLength;
  4011f4:	4b98      	ldr	r3, [pc, #608]	; (401458 <create_harmonies+0x2a0>)
  4011f6:	f8d3 9000 	ldr.w	r9, [r3]
  4011fa:	ee07 9a90 	vmov	s15, r9
	uint32_t samplesLeftInPeriod = 0; 
	
	// pre-compute window function	
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  4011fe:	f1b9 0f00 	cmp.w	r9, #0
	float inputPeriodLengthRecip = 1.0f / inputPeriodLength;
  401202:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  401206:	dd22      	ble.n	40124e <create_harmonies+0x96>
  401208:	ed9f 7a94 	vldr	s14, [pc, #592]	; 40145c <create_harmonies+0x2a4>
	{
		window[w] = (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  40120c:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
  401210:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
  401214:	4e92      	ldr	r6, [pc, #584]	; (401460 <create_harmonies+0x2a8>)
  401216:	ee87 9a27 	vdiv.f32	s18, s14, s15
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  40121a:	2400      	movs	r4, #0
  40121c:	4f91      	ldr	r7, [pc, #580]	; (401464 <create_harmonies+0x2ac>)
		window[w] = (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  40121e:	ee07 4a90 	vmov	s15, r4
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  401222:	3401      	adds	r4, #1
		window[w] = (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  401224:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  401228:	ee67 7a89 	vmul.f32	s15, s15, s18
  40122c:	ee17 0a90 	vmov	r0, s15
  401230:	47b8      	blx	r7
  401232:	ee07 0a90 	vmov	s15, r0
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  401236:	4b88      	ldr	r3, [pc, #544]	; (401458 <create_harmonies+0x2a0>)
		window[w] = (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  401238:	ee7a 7a67 	vsub.f32	s15, s20, s15
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  40123c:	681b      	ldr	r3, [r3, #0]
		window[w] = (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  40123e:	ee67 7aa9 	vmul.f32	s15, s15, s19
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  401242:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
		window[w] = (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  401246:	ece6 7a01 	vstmia	r6!, {s15}
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  40124a:	dbe8      	blt.n	40121e <create_harmonies+0x66>
  40124c:	4699      	mov	r9, r3
	}
		
	// for each pitch shift 
	while(pitch_shifts_in[pitch_idx] > 0.0f && pitch_idx < MAX_NUM_SHIFTS)
  40124e:	9908      	ldr	r1, [sp, #32]
  401250:	ed91 7a00 	vldr	s14, [r1]
  401254:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  401258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40125c:	f340 81e3 	ble.w	401626 <create_harmonies+0x46e>
  401260:	4b81      	ldr	r3, [pc, #516]	; (401468 <create_harmonies+0x2b0>)
  401262:	ee07 9a90 	vmov	s15, r9
		
		if (pitch_idx > current_num_shifts - 1)
		{
			// find closest harmony for the onset of a new harmony 
			float tmp; 
			float min = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[0]); 
  401266:	4a81      	ldr	r2, [pc, #516]	; (40146c <create_harmonies+0x2b4>)
		periodRatio = 1.0f / pitch_shifts_in[pitch_idx]; 
  401268:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
  40126c:	4618      	mov	r0, r3
  40126e:	9309      	str	r3, [sp, #36]	; 0x24
			outPtr = outPtrList[0]; 
			for (i = 1; i < current_num_shifts; i++)
			{
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  401270:	2300      	movs	r3, #0
  401272:	eef8 0ae7 	vcvt.f32.s32	s1, s15
  401276:	6800      	ldr	r0, [r0, #0]
  401278:	3104      	adds	r1, #4
  40127a:	469b      	mov	fp, r3
			float min = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[0]); 
  40127c:	ed92 1a00 	vldr	s2, [r2]
  401280:	9003      	str	r0, [sp, #12]
  401282:	3801      	subs	r0, #1
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  401284:	edd2 1a01 	vldr	s3, [r2, #4]
  401288:	f1c9 0a00 	rsb	sl, r9, #0
  40128c:	900a      	str	r0, [sp, #40]	; 0x28
  40128e:	ed92 2a02 	vldr	s4, [r2, #8]
  401292:	4877      	ldr	r0, [pc, #476]	; (401470 <create_harmonies+0x2b8>)
  401294:	edd2 2a03 	vldr	s5, [r2, #12]
  401298:	ed92 3a04 	vldr	s6, [r2, #16]
  40129c:	edd2 3a05 	vldr	s7, [r2, #20]
  4012a0:	ed92 4a06 	vldr	s8, [r2, #24]
  4012a4:	edd2 4a07 	vldr	s9, [r2, #28]
  4012a8:	ed92 5a08 	vldr	s10, [r2, #32]
  4012ac:	edd2 5a09 	vldr	s11, [r2, #36]	; 0x24
  4012b0:	ed92 6a0a 	vldr	s12, [r2, #40]	; 0x28
  4012b4:	4e6f      	ldr	r6, [pc, #444]	; (401474 <create_harmonies+0x2bc>)
  4012b6:	9005      	str	r0, [sp, #20]
  4012b8:	9107      	str	r1, [sp, #28]
		if (pitch_idx > current_num_shifts - 1)
  4012ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
		periodRatio = 1.0f / pitch_shifts_in[pitch_idx]; 
  4012bc:	ee80 9a07 	vdiv.f32	s18, s0, s14
		if (pitch_idx > current_num_shifts - 1)
  4012c0:	4593      	cmp	fp, r2
  4012c2:	f240 81a7 	bls.w	401614 <create_harmonies+0x45c>
			outPtr = outPtrList[0]; 
  4012c6:	4a6c      	ldr	r2, [pc, #432]	; (401478 <create_harmonies+0x2c0>)
			float min = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[0]); 
  4012c8:	ee77 7a41 	vsub.f32	s15, s14, s2
			outPtr = outPtrList[0]; 
  4012cc:	f8d2 e000 	ldr.w	lr, [r2]
			for (i = 1; i < current_num_shifts; i++)
  4012d0:	9a03      	ldr	r2, [sp, #12]
			float min = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[0]); 
  4012d2:	eef0 7ae7 	vabs.f32	s15, s15
			for (i = 1; i < current_num_shifts; i++)
  4012d6:	2a01      	cmp	r2, #1
  4012d8:	f240 80d0 	bls.w	40147c <create_harmonies+0x2c4>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  4012dc:	ee77 6a61 	vsub.f32	s13, s14, s3
  4012e0:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  4012e4:	eef4 7ae6 	vcmpe.f32	s15, s13
  4012e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4012ec:	dd06      	ble.n	4012fc <create_harmonies+0x144>
				{
					outPtr = outPtrList[i]; 
  4012ee:	4b62      	ldr	r3, [pc, #392]	; (401478 <create_harmonies+0x2c0>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  4012f0:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  4012f4:	f8d3 e004 	ldr.w	lr, [r3, #4]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  4012f8:	4b5d      	ldr	r3, [pc, #372]	; (401470 <create_harmonies+0x2b8>)
  4012fa:	685b      	ldr	r3, [r3, #4]
			for (i = 1; i < current_num_shifts; i++)
  4012fc:	2a02      	cmp	r2, #2
  4012fe:	f000 80bd 	beq.w	40147c <create_harmonies+0x2c4>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  401302:	ee77 6a42 	vsub.f32	s13, s14, s4
  401306:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  40130a:	eef4 7ae6 	vcmpe.f32	s15, s13
  40130e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  401312:	dd06      	ble.n	401322 <create_harmonies+0x16a>
					outPtr = outPtrList[i]; 
  401314:	4b58      	ldr	r3, [pc, #352]	; (401478 <create_harmonies+0x2c0>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  401316:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  40131a:	f8d3 e008 	ldr.w	lr, [r3, #8]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  40131e:	4b54      	ldr	r3, [pc, #336]	; (401470 <create_harmonies+0x2b8>)
  401320:	689b      	ldr	r3, [r3, #8]
			for (i = 1; i < current_num_shifts; i++)
  401322:	2a03      	cmp	r2, #3
  401324:	f000 80aa 	beq.w	40147c <create_harmonies+0x2c4>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  401328:	ee77 6a62 	vsub.f32	s13, s14, s5
  40132c:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  401330:	eef4 7ae6 	vcmpe.f32	s15, s13
  401334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  401338:	dd06      	ble.n	401348 <create_harmonies+0x190>
					outPtr = outPtrList[i]; 
  40133a:	4b4f      	ldr	r3, [pc, #316]	; (401478 <create_harmonies+0x2c0>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  40133c:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  401340:	f8d3 e00c 	ldr.w	lr, [r3, #12]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  401344:	4b4a      	ldr	r3, [pc, #296]	; (401470 <create_harmonies+0x2b8>)
  401346:	68db      	ldr	r3, [r3, #12]
			for (i = 1; i < current_num_shifts; i++)
  401348:	2a04      	cmp	r2, #4
  40134a:	f000 8097 	beq.w	40147c <create_harmonies+0x2c4>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  40134e:	ee77 6a43 	vsub.f32	s13, s14, s6
  401352:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  401356:	eef4 7ae6 	vcmpe.f32	s15, s13
  40135a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40135e:	dd06      	ble.n	40136e <create_harmonies+0x1b6>
					outPtr = outPtrList[i]; 
  401360:	4b45      	ldr	r3, [pc, #276]	; (401478 <create_harmonies+0x2c0>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  401362:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  401366:	f8d3 e010 	ldr.w	lr, [r3, #16]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  40136a:	4b41      	ldr	r3, [pc, #260]	; (401470 <create_harmonies+0x2b8>)
  40136c:	691b      	ldr	r3, [r3, #16]
			for (i = 1; i < current_num_shifts; i++)
  40136e:	2a05      	cmp	r2, #5
  401370:	f000 8084 	beq.w	40147c <create_harmonies+0x2c4>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  401374:	ee77 6a63 	vsub.f32	s13, s14, s7
  401378:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  40137c:	eef4 7ae6 	vcmpe.f32	s15, s13
  401380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  401384:	dd06      	ble.n	401394 <create_harmonies+0x1dc>
					outPtr = outPtrList[i]; 
  401386:	4b3c      	ldr	r3, [pc, #240]	; (401478 <create_harmonies+0x2c0>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  401388:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  40138c:	f8d3 e014 	ldr.w	lr, [r3, #20]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  401390:	4b37      	ldr	r3, [pc, #220]	; (401470 <create_harmonies+0x2b8>)
  401392:	695b      	ldr	r3, [r3, #20]
			for (i = 1; i < current_num_shifts; i++)
  401394:	2a06      	cmp	r2, #6
  401396:	d071      	beq.n	40147c <create_harmonies+0x2c4>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  401398:	ee77 6a44 	vsub.f32	s13, s14, s8
  40139c:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  4013a0:	eef4 7ae6 	vcmpe.f32	s15, s13
  4013a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4013a8:	dd06      	ble.n	4013b8 <create_harmonies+0x200>
					outPtr = outPtrList[i]; 
  4013aa:	4b33      	ldr	r3, [pc, #204]	; (401478 <create_harmonies+0x2c0>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  4013ac:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  4013b0:	f8d3 e018 	ldr.w	lr, [r3, #24]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  4013b4:	4b2e      	ldr	r3, [pc, #184]	; (401470 <create_harmonies+0x2b8>)
  4013b6:	699b      	ldr	r3, [r3, #24]
			for (i = 1; i < current_num_shifts; i++)
  4013b8:	2a07      	cmp	r2, #7
  4013ba:	d05f      	beq.n	40147c <create_harmonies+0x2c4>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  4013bc:	ee77 6a64 	vsub.f32	s13, s14, s9
  4013c0:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  4013c4:	eef4 7ae6 	vcmpe.f32	s15, s13
  4013c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4013cc:	dd06      	ble.n	4013dc <create_harmonies+0x224>
					outPtr = outPtrList[i]; 
  4013ce:	4b2a      	ldr	r3, [pc, #168]	; (401478 <create_harmonies+0x2c0>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  4013d0:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  4013d4:	f8d3 e01c 	ldr.w	lr, [r3, #28]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  4013d8:	4b25      	ldr	r3, [pc, #148]	; (401470 <create_harmonies+0x2b8>)
  4013da:	69db      	ldr	r3, [r3, #28]
			for (i = 1; i < current_num_shifts; i++)
  4013dc:	2a08      	cmp	r2, #8
  4013de:	d04d      	beq.n	40147c <create_harmonies+0x2c4>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  4013e0:	ee77 6a45 	vsub.f32	s13, s14, s10
  4013e4:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  4013e8:	eef4 7ae6 	vcmpe.f32	s15, s13
  4013ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4013f0:	dd06      	ble.n	401400 <create_harmonies+0x248>
					outPtr = outPtrList[i]; 
  4013f2:	4b21      	ldr	r3, [pc, #132]	; (401478 <create_harmonies+0x2c0>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  4013f4:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  4013f8:	f8d3 e020 	ldr.w	lr, [r3, #32]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  4013fc:	4b1c      	ldr	r3, [pc, #112]	; (401470 <create_harmonies+0x2b8>)
  4013fe:	6a1b      	ldr	r3, [r3, #32]
			for (i = 1; i < current_num_shifts; i++)
  401400:	2a09      	cmp	r2, #9
  401402:	d03b      	beq.n	40147c <create_harmonies+0x2c4>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  401404:	ee77 6a65 	vsub.f32	s13, s14, s11
  401408:	eef0 6ae6 	vabs.f32	s13, s13
				if (tmp < min)
  40140c:	eef4 7ae6 	vcmpe.f32	s15, s13
  401410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  401414:	dd06      	ble.n	401424 <create_harmonies+0x26c>
					outPtr = outPtrList[i]; 
  401416:	4b18      	ldr	r3, [pc, #96]	; (401478 <create_harmonies+0x2c0>)
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  401418:	eef0 7a66 	vmov.f32	s15, s13
					outPtr = outPtrList[i]; 
  40141c:	f8d3 e024 	ldr.w	lr, [r3, #36]	; 0x24
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  401420:	4b13      	ldr	r3, [pc, #76]	; (401470 <create_harmonies+0x2b8>)
  401422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			for (i = 1; i < current_num_shifts; i++)
  401424:	2a0a      	cmp	r2, #10
  401426:	d029      	beq.n	40147c <create_harmonies+0x2c4>
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  401428:	ee37 7a46 	vsub.f32	s14, s14, s12
  40142c:	eeb0 7ac7 	vabs.f32	s14, s14
				if (tmp < min)
  401430:	eef4 7ac7 	vcmpe.f32	s15, s14
  401434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  401438:	dd04      	ble.n	401444 <create_harmonies+0x28c>
					outPtr = outPtrList[i]; 
  40143a:	4b0f      	ldr	r3, [pc, #60]	; (401478 <create_harmonies+0x2c0>)
  40143c:	f8d3 e028 	ldr.w	lr, [r3, #40]	; 0x28
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  401440:	4b0b      	ldr	r3, [pc, #44]	; (401470 <create_harmonies+0x2b8>)
  401442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			for (i = 1; i < current_num_shifts; i++)
  401444:	2a0b      	cmp	r2, #11
  401446:	d019      	beq.n	40147c <create_harmonies+0x2c4>
  401448:	4b02      	ldr	r3, [pc, #8]	; (401454 <create_harmonies+0x29c>)
  40144a:	9a06      	ldr	r2, [sp, #24]
  40144c:	601a      	str	r2, [r3, #0]
  40144e:	bf00      	nop
  401450:	2040422c 	.word	0x2040422c
  401454:	20404224 	.word	0x20404224
  401458:	20404228 	.word	0x20404228
  40145c:	40490fdb 	.word	0x40490fdb
  401460:	204242b4 	.word	0x204242b4
  401464:	00405cb9 	.word	0x00405cb9
  401468:	20404220 	.word	0x20404220
  40146c:	20424258 	.word	0x20424258
  401470:	20424288 	.word	0x20424288
  401474:	20414258 	.word	0x20414258
  401478:	2041422c 	.word	0x2041422c
  40147c:	ea4f 028b 	mov.w	r2, fp, lsl #2
  401480:	9202      	str	r2, [sp, #8]
  401482:	ee20 9a89 	vmul.f32	s18, s1, s18
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  401486:	f44f 7200 	mov.w	r2, #512	; 0x200
  40148a:	f8dd c018 	ldr.w	ip, [sp, #24]
  40148e:	9204      	str	r2, [sp, #16]
  401490:	eefc 7ac9 	vcvt.u32.f32	s15, s18
  401494:	edcd 7a01 	vstr	s15, [sp, #4]
			samplesLeftInPeriod = saved_samplesLeftInPeriod[pitch_idx]; 
		}
		
		for (i = 0; i < WIN_SIZE; i++)
		{		
			if (samplesLeftInPeriod == 0)
  401498:	bbbb      	cbnz	r3, 40150a <create_harmonies+0x352>
			{
				outLag = 1; 
			
				inHalfAway = (inPtr + RING_BUFFER_SIZE_D2) & RING_BUFFER_MASK;
  40149a:	f50c 5800 	add.w	r8, ip, #8192	; 0x2000
  40149e:	f3c8 080d 	ubfx	r8, r8, #0, #14
                
				if (inHalfAway < RING_BUFFER_SIZE_D2) 
  4014a2:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
  4014a6:	f080 80b2 	bcs.w	40160e <create_harmonies+0x456>
				{
					/* The zero element of the input buffer lies
						in (inptr, inHalfAway] */
					if (outPtr < inHalfAway || outPtr > inPtr) {
  4014aa:	45f0      	cmp	r8, lr
  4014ac:	d82c      	bhi.n	401508 <create_harmonies+0x350>
  4014ae:	45f4      	cmp	ip, lr
  4014b0:	d32a      	bcc.n	401508 <create_harmonies+0x350>
				}

				while(outLag == 1)
				{
					// set outPtr about the sample at which we OLA 
					outPtr = (outPtr + (uint32_t)((float)inputPeriodLength * periodRatio)) & RING_BUFFER_MASK; 
  4014b2:	9b01      	ldr	r3, [sp, #4]
  4014b4:	449e      	add	lr, r3
  4014b6:	f3ce 0e0d 	ubfx	lr, lr, #0, #14
				
					// OLA 
					if (pitch_idx == 0)
  4014ba:	f1bb 0f00 	cmp.w	fp, #0
  4014be:	d17b      	bne.n	4015b8 <create_harmonies+0x400>
					{
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  4014c0:	45d1      	cmp	r9, sl
  4014c2:	dd1c      	ble.n	4014fe <create_harmonies+0x346>
  4014c4:	ebae 0209 	sub.w	r2, lr, r9
  4014c8:	4c59      	ldr	r4, [pc, #356]	; (401630 <create_harmonies+0x478>)
  4014ca:	eb0e 0709 	add.w	r7, lr, r9
  4014ce:	ebac 000e 	sub.w	r0, ip, lr
						{
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
							window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4014d2:	1883      	adds	r3, r0, r2
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  4014d4:	f3c2 010d 	ubfx	r1, r2, #0, #14
							window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4014d8:	ecf4 6a01 	vldmia	r4!, {s13}
  4014dc:	3201      	adds	r2, #1
  4014de:	f3c3 030d 	ubfx	r3, r3, #0, #14
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  4014e2:	eb06 0181 	add.w	r1, r6, r1, lsl #2
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  4014e6:	4297      	cmp	r7, r2
							window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4014e8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  4014ec:	edd1 7a00 	vldr	s15, [r1]
  4014f0:	ed93 7a00 	vldr	s14, [r3]
  4014f4:	eee6 7a87 	vfma.f32	s15, s13, s14
  4014f8:	edc1 7a00 	vstr	s15, [r1]
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  4014fc:	d1e9      	bne.n	4014d2 <create_harmonies+0x31a>
								volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
						}
					}
	
					
					if (inHalfAway < RING_BUFFER_SIZE_D2) 
  4014fe:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
  401502:	d27d      	bcs.n	401600 <create_harmonies+0x448>
					{
						/* The zero element of the input buffer lies
							in (inptr, inHalfAway] */
						if (outPtr < inHalfAway || outPtr > inPtr) {
  401504:	45f0      	cmp	r8, lr
  401506:	d94e      	bls.n	4015a6 <create_harmonies+0x3ee>
						}
					}		
				}
			
				// assume uniform frequency within window 
				samplesLeftInPeriod = inputPeriodLength;
  401508:	464b      	mov	r3, r9
		for (i = 0; i < WIN_SIZE; i++)
  40150a:	9a04      	ldr	r2, [sp, #16]
			}
		
			--samplesLeftInPeriod; 
		
			// inc/wrap input ring buffer index 
			inPtr = (inPtr+1) & RING_BUFFER_MASK; 		
  40150c:	f10c 0c01 	add.w	ip, ip, #1
			--samplesLeftInPeriod; 
  401510:	3b01      	subs	r3, #1
		for (i = 0; i < WIN_SIZE; i++)
  401512:	3a01      	subs	r2, #1
			inPtr = (inPtr+1) & RING_BUFFER_MASK; 		
  401514:	f3cc 0c0d 	ubfx	ip, ip, #0, #14
		for (i = 0; i < WIN_SIZE; i++)
  401518:	9204      	str	r2, [sp, #16]
  40151a:	d1bd      	bne.n	401498 <create_harmonies+0x2e0>
		}

		saved_samplesLeftInPeriod[pitch_idx] = samplesLeftInPeriod; 
  40151c:	9a05      	ldr	r2, [sp, #20]
		outPtrList[pitch_idx] = outPtr; 
		pitch_idx++;  
  40151e:	f10b 0b01 	add.w	fp, fp, #1
		outPtrList[pitch_idx] = outPtr; 
  401522:	9902      	ldr	r1, [sp, #8]
		saved_samplesLeftInPeriod[pitch_idx] = samplesLeftInPeriod; 
  401524:	6013      	str	r3, [r2, #0]
		outPtrList[pitch_idx] = outPtr; 
  401526:	4a43      	ldr	r2, [pc, #268]	; (401634 <create_harmonies+0x47c>)
  401528:	f842 e001 	str.w	lr, [r2, r1]
	while(pitch_shifts_in[pitch_idx] > 0.0f && pitch_idx < MAX_NUM_SHIFTS)
  40152c:	9a07      	ldr	r2, [sp, #28]
  40152e:	ecb2 7a01 	vldmia	r2!, {s14}
  401532:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  401536:	9207      	str	r2, [sp, #28]
  401538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40153c:	dd07      	ble.n	40154e <create_harmonies+0x396>
  40153e:	9a05      	ldr	r2, [sp, #20]
  401540:	f1bb 0f0b 	cmp.w	fp, #11
  401544:	f102 0204 	add.w	r2, r2, #4
  401548:	9205      	str	r2, [sp, #20]
  40154a:	f47f aeb6 	bne.w	4012ba <create_harmonies+0x102>
  40154e:	4b3a      	ldr	r3, [pc, #232]	; (401638 <create_harmonies+0x480>)
  401550:	f8c3 c000 	str.w	ip, [r3]
  401554:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	}
	
	for(i = 0; i < WIN_SIZE; i++)
	{
		output[i] = output_ring_buffer[readPos]; 	
		output_ring_buffer[readPos] = 0.0f;
  401556:	2400      	movs	r4, #0
  401558:	4938      	ldr	r1, [pc, #224]	; (40163c <create_harmonies+0x484>)
  40155a:	4e39      	ldr	r6, [pc, #228]	; (401640 <create_harmonies+0x488>)
  40155c:	f502 6500 	add.w	r5, r2, #2048	; 0x800
  401560:	680b      	ldr	r3, [r1, #0]
		output[i] = output_ring_buffer[readPos]; 	
  401562:	eb06 0083 	add.w	r0, r6, r3, lsl #2
		readPos = (readPos+1) & RING_BUFFER_MASK;
  401566:	3301      	adds	r3, #1
		output[i] = output_ring_buffer[readPos]; 	
  401568:	6807      	ldr	r7, [r0, #0]
		readPos = (readPos+1) & RING_BUFFER_MASK;
  40156a:	f3c3 030d 	ubfx	r3, r3, #0, #14
		output[i] = output_ring_buffer[readPos]; 	
  40156e:	f842 7b04 	str.w	r7, [r2], #4
	for(i = 0; i < WIN_SIZE; i++)
  401572:	4295      	cmp	r5, r2
		output_ring_buffer[readPos] = 0.0f;
  401574:	6004      	str	r4, [r0, #0]
	for(i = 0; i < WIN_SIZE; i++)
  401576:	d1f4      	bne.n	401562 <create_harmonies+0x3aa>
	// variables for next harmonization  
	//if ((pitch_idx-1) > 0)
		//samplesLeftInPeriod = cum_samplesLeftInPeriod / (pitch_idx-1); // average the number of samples left in period 
	
	currentPitch = inputPitch; 
	inputPeriodLength = (uint32_t)(PSOLA_SAMPLE_RATE / currentPitch);
  401578:	ed9f 7a32 	vldr	s14, [pc, #200]	; 401644 <create_harmonies+0x48c>
	current_num_shifts = pitch_idx; 
	arm_copy_f32(pitch_shifts_in, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  40157c:	220b      	movs	r2, #11
	current_num_shifts = pitch_idx; 
  40157e:	9c09      	ldr	r4, [sp, #36]	; 0x24
	inputPeriodLength = (uint32_t)(PSOLA_SAMPLE_RATE / currentPitch);
  401580:	eec7 7a28 	vdiv.f32	s15, s14, s17
  401584:	600b      	str	r3, [r1, #0]
	current_num_shifts = pitch_idx; 
  401586:	f8c4 b000 	str.w	fp, [r4]
	arm_copy_f32(pitch_shifts_in, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  40158a:	9808      	ldr	r0, [sp, #32]
	inputPeriodLength = (uint32_t)(PSOLA_SAMPLE_RATE / currentPitch);
  40158c:	4c2e      	ldr	r4, [pc, #184]	; (401648 <create_harmonies+0x490>)
	arm_copy_f32(pitch_shifts_in, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  40158e:	492f      	ldr	r1, [pc, #188]	; (40164c <create_harmonies+0x494>)
  401590:	4b2f      	ldr	r3, [pc, #188]	; (401650 <create_harmonies+0x498>)
	inputPeriodLength = (uint32_t)(PSOLA_SAMPLE_RATE / currentPitch);
  401592:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  401596:	edc4 7a00 	vstr	s15, [r4]
}
  40159a:	b00d      	add	sp, #52	; 0x34
  40159c:	ecbd 8b06 	vpop	{d8-d10}
  4015a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	arm_copy_f32(pitch_shifts_in, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  4015a4:	4718      	bx	r3
						if (outPtr < inHalfAway || outPtr > inPtr) {
  4015a6:	45e6      	cmp	lr, ip
  4015a8:	d8ae      	bhi.n	401508 <create_harmonies+0x350>
					outPtr = (outPtr + (uint32_t)((float)inputPeriodLength * periodRatio)) & RING_BUFFER_MASK; 
  4015aa:	9b01      	ldr	r3, [sp, #4]
  4015ac:	449e      	add	lr, r3
  4015ae:	f3ce 0e0d 	ubfx	lr, lr, #0, #14
					if (pitch_idx == 0)
  4015b2:	f1bb 0f00 	cmp.w	fp, #0
  4015b6:	d083      	beq.n	4014c0 <create_harmonies+0x308>
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  4015b8:	45d1      	cmp	r9, sl
  4015ba:	dda0      	ble.n	4014fe <create_harmonies+0x346>
  4015bc:	ebae 0209 	sub.w	r2, lr, r9
  4015c0:	4c1b      	ldr	r4, [pc, #108]	; (401630 <create_harmonies+0x478>)
  4015c2:	eb0e 0709 	add.w	r7, lr, r9
  4015c6:	ebac 000e 	sub.w	r0, ip, lr
								volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4015ca:	1883      	adds	r3, r0, r2
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  4015cc:	f3c2 010d 	ubfx	r1, r2, #0, #14
								volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4015d0:	ecb4 7a01 	vldmia	r4!, {s14}
  4015d4:	3201      	adds	r2, #1
  4015d6:	f3c3 030d 	ubfx	r3, r3, #0, #14
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  4015da:	eb06 0181 	add.w	r1, r6, r1, lsl #2
								volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4015de:	ee27 7a08 	vmul.f32	s14, s14, s16
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  4015e2:	4297      	cmp	r7, r2
								volume * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + WEIRD_OFFSET) & RING_BUFFER_MASK];
  4015e4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  4015e8:	edd1 7a00 	vldr	s15, [r1]
  4015ec:	edd3 6a00 	vldr	s13, [r3]
  4015f0:	eee7 7a26 	vfma.f32	s15, s14, s13
  4015f4:	edc1 7a00 	vstr	s15, [r1]
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  4015f8:	d1e7      	bne.n	4015ca <create_harmonies+0x412>
					if (inHalfAway < RING_BUFFER_SIZE_D2) 
  4015fa:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
  4015fe:	d381      	bcc.n	401504 <create_harmonies+0x34c>
						if (outPtr > inPtr && outPtr < inHalfAway) {
  401600:	45e6      	cmp	lr, ip
  401602:	f67f af56 	bls.w	4014b2 <create_harmonies+0x2fa>
					if (outPtr > inPtr && outPtr < inHalfAway) {
  401606:	45f0      	cmp	r8, lr
  401608:	f63f af7e 	bhi.w	401508 <create_harmonies+0x350>
  40160c:	e751      	b.n	4014b2 <create_harmonies+0x2fa>
  40160e:	45f4      	cmp	ip, lr
  401610:	d3f9      	bcc.n	401606 <create_harmonies+0x44e>
  401612:	e74e      	b.n	4014b2 <create_harmonies+0x2fa>
			outPtr = outPtrList[pitch_idx]; 
  401614:	ea4f 038b 	mov.w	r3, fp, lsl #2
  401618:	9302      	str	r3, [sp, #8]
  40161a:	4b06      	ldr	r3, [pc, #24]	; (401634 <create_harmonies+0x47c>)
  40161c:	f853 e02b 	ldr.w	lr, [r3, fp, lsl #2]
			samplesLeftInPeriod = saved_samplesLeftInPeriod[pitch_idx]; 
  401620:	9b05      	ldr	r3, [sp, #20]
  401622:	681b      	ldr	r3, [r3, #0]
  401624:	e72d      	b.n	401482 <create_harmonies+0x2ca>
  401626:	4b0b      	ldr	r3, [pc, #44]	; (401654 <create_harmonies+0x49c>)
	while(pitch_shifts_in[pitch_idx] > 0.0f && pitch_idx < MAX_NUM_SHIFTS)
  401628:	f04f 0b00 	mov.w	fp, #0
  40162c:	9309      	str	r3, [sp, #36]	; 0x24
  40162e:	e791      	b.n	401554 <create_harmonies+0x39c>
  401630:	204242b4 	.word	0x204242b4
  401634:	2041422c 	.word	0x2041422c
  401638:	20404224 	.word	0x20404224
  40163c:	20424284 	.word	0x20424284
  401640:	20414258 	.word	0x20414258
  401644:	4735a700 	.word	0x4735a700
  401648:	20404228 	.word	0x20404228
  40164c:	20424258 	.word	0x20424258
  401650:	00405a41 	.word	0x00405a41
  401654:	20404220 	.word	0x20404220

00401658 <mxt_init_device>:
 * \param chgpin IOPORT pin instance attached to the maXTouch device's /CHG pin
 * \return Operation result status code
 */
status_code_t mxt_init_device(struct mxt_device *device,
		twihs_master_t interface, uint8_t chip_adr, uint32_t chgpin)
{
  401658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40165c:	4604      	mov	r4, r0

	/* Set TWI interface, TWI address and CHG-pin of the maXTouch device. */
	device->interface = interface;
	device->mxt_chip_adr = chip_adr;
	device->chgpin = chgpin;
	device->handler = NULL;
  40165e:	2500      	movs	r5, #0
	device->chgpin = chgpin;
  401660:	6183      	str	r3, [r0, #24]
			malloc(sizeof(struct mxt_info_object));
  401662:	2007      	movs	r0, #7
{
  401664:	b089      	sub	sp, #36	; 0x24
	device->interface = interface;
  401666:	60a1      	str	r1, [r4, #8]
	device->handler = NULL;
  401668:	6125      	str	r5, [r4, #16]
{
  40166a:	468a      	mov	sl, r1
	device->mxt_chip_adr = chip_adr;
  40166c:	7322      	strb	r2, [r4, #12]
{
  40166e:	4617      	mov	r7, r2
			malloc(sizeof(struct mxt_info_object));
  401670:	4e4e      	ldr	r6, [pc, #312]	; (4017ac <mxt_init_device+0x154>)
	twihs_package_t packet = {
  401672:	4681      	mov	r9, r0
			malloc(sizeof(struct mxt_info_object));
  401674:	47b0      	blx	r6
  401676:	4603      	mov	r3, r0
	twihs_package_t packet = {
  401678:	f04f 0802 	mov.w	r8, #2
  40167c:	9507      	str	r5, [sp, #28]
  40167e:	9503      	str	r5, [sp, #12]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  401680:	4650      	mov	r0, sl
	device->info_object = (struct mxt_info_object *)
  401682:	6023      	str	r3, [r4, #0]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  401684:	a903      	add	r1, sp, #12
  401686:	4d4a      	ldr	r5, [pc, #296]	; (4017b0 <mxt_init_device+0x158>)
	twihs_package_t packet = {
  401688:	9305      	str	r3, [sp, #20]
  40168a:	f88d 701c 	strb.w	r7, [sp, #28]
  40168e:	f8cd 8010 	str.w	r8, [sp, #16]
  401692:	f8cd 9018 	str.w	r9, [sp, #24]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  401696:	47a8      	blx	r5
  401698:	2800      	cmp	r0, #0
  40169a:	f040 81d7 	bne.w	401a4c <mxt_init_device+0x3f4>
			malloc(device->info_object->obj_count *
  40169e:	f8d4 a000 	ldr.w	sl, [r4]
  4016a2:	4607      	mov	r7, r0
  4016a4:	f89a 0006 	ldrb.w	r0, [sl, #6]
  4016a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4016ac:	0040      	lsls	r0, r0, #1
  4016ae:	47b0      	blx	r6
	twihs_package_t packet = {
  4016b0:	9703      	str	r7, [sp, #12]
	device->object_list = (struct mxt_object *)
  4016b2:	6060      	str	r0, [r4, #4]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4016b4:	a903      	add	r1, sp, #12
	twihs_package_t packet = {
  4016b6:	9005      	str	r0, [sp, #20]
  4016b8:	9706      	str	r7, [sp, #24]
  4016ba:	9707      	str	r7, [sp, #28]
  4016bc:	f88d 900c 	strb.w	r9, [sp, #12]
  4016c0:	f8cd 8010 	str.w	r8, [sp, #16]
		.length       = device->info_object->obj_count *
  4016c4:	f89a 3006 	ldrb.w	r3, [sl, #6]
	twihs_package_t packet = {
  4016c8:	7b22      	ldrb	r2, [r4, #12]
		.length       = device->info_object->obj_count *
  4016ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4016ce:	68a0      	ldr	r0, [r4, #8]
	twihs_package_t packet = {
  4016d0:	f88d 201c 	strb.w	r2, [sp, #28]
		.length       = device->info_object->obj_count *
  4016d4:	005b      	lsls	r3, r3, #1
	twihs_package_t packet = {
  4016d6:	9306      	str	r3, [sp, #24]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4016d8:	47a8      	blx	r5
  4016da:	2800      	cmp	r0, #0
  4016dc:	f040 81b6 	bne.w	401a4c <mxt_init_device+0x3f4>
  4016e0:	e894 0088 	ldmia.w	r4, {r3, r7}
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  4016e4:	7819      	ldrb	r1, [r3, #0]
  4016e6:	7858      	ldrb	r0, [r3, #1]
  4016e8:	78da      	ldrb	r2, [r3, #3]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4016ea:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  4016ee:	7899      	ldrb	r1, [r3, #2]
  4016f0:	f893 e005 	ldrb.w	lr, [r3, #5]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4016f4:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  4016f8:	791a      	ldrb	r2, [r3, #4]
			(device->info_object->obj_count *
  4016fa:	799b      	ldrb	r3, [r3, #6]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4016fc:	ea81 0140 	eor.w	r1, r1, r0, lsl #1
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  401700:	7838      	ldrb	r0, [r7, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  401702:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
			(device->info_object->obj_count *
  401706:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
	result = ((crc << 1u) ^ (uint32_t)data_word);
  40170a:	ea82 0241 	eor.w	r2, r2, r1, lsl #1
		result ^= crcpoly;
  40170e:	4929      	ldr	r1, [pc, #164]	; (4017b4 <mxt_init_device+0x15c>)
	result = ((crc << 1u) ^ (uint32_t)data_word);
  401710:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
			(device->info_object->obj_count *
  401714:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
	result = ((crc << 1u) ^ (uint32_t)data_word);
  401718:	ea83 0342 	eor.w	r3, r3, r2, lsl #1
	crc_area_size = MXT_ID_BLOCK_SIZE +
  40171c:	f10c 0c07 	add.w	ip, ip, #7
	if (result & 0x1000000) {
  401720:	01da      	lsls	r2, r3, #7
	crc_area_size = MXT_ID_BLOCK_SIZE +
  401722:	fa1f fc8c 	uxth.w	ip, ip
	if (result & 0x1000000) {
  401726:	d43e      	bmi.n	4017a6 <mxt_init_device+0x14e>
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  401728:	f1ac 0e08 	sub.w	lr, ip, #8
  40172c:	f1be 0f01 	cmp.w	lr, #1
  401730:	dd13      	ble.n	40175a <mxt_init_device+0x102>
  401732:	2001      	movs	r0, #1
		result ^= crcpoly;
  401734:	f8df 807c 	ldr.w	r8, [pc, #124]	; 4017b4 <mxt_init_device+0x15c>
		crc_tmp = mxt_crc_24(crc_tmp, objects_pointer[i],
  401738:	1839      	adds	r1, r7, r0
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  40173a:	5c3a      	ldrb	r2, [r7, r0]
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  40173c:	3002      	adds	r0, #2
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  40173e:	7849      	ldrb	r1, [r1, #1]
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  401740:	b280      	uxth	r0, r0
	result = ((crc << 1u) ^ (uint32_t)data_word);
  401742:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  401746:	ea82 0343 	eor.w	r3, r2, r3, lsl #1
  40174a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
		result ^= crcpoly;
  40174e:	ea83 0208 	eor.w	r2, r3, r8
  401752:	bf18      	it	ne
  401754:	4613      	movne	r3, r2
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  401756:	4570      	cmp	r0, lr
  401758:	dbee      	blt.n	401738 <mxt_init_device+0xe0>
	crc_tmp = mxt_crc_24(crc_tmp,
  40175a:	4467      	add	r7, ip
	result = ((crc << 1u) ^ (uint32_t)data_word);
  40175c:	f817 7c08 	ldrb.w	r7, [r7, #-8]
  401760:	ea87 0743 	eor.w	r7, r7, r3, lsl #1
	if (result & 0x1000000) {
  401764:	01f9      	lsls	r1, r7, #7
  401766:	d503      	bpl.n	401770 <mxt_init_device+0x118>
		result ^= crcpoly;
  401768:	f487 0700 	eor.w	r7, r7, #8388608	; 0x800000
  40176c:	f087 071b 	eor.w	r7, r7, #27
	twihs_package_t packet = {
  401770:	2002      	movs	r0, #2
  401772:	2300      	movs	r3, #0
  401774:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
  401778:	2203      	movs	r2, #3
  40177a:	9004      	str	r0, [sp, #16]
  40177c:	a802      	add	r0, sp, #8
  40177e:	9303      	str	r3, [sp, #12]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  401780:	a903      	add	r1, sp, #12
	twihs_package_t packet = {
  401782:	9307      	str	r3, [sp, #28]
  401784:	7b23      	ldrb	r3, [r4, #12]
  401786:	9005      	str	r0, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  401788:	68a0      	ldr	r0, [r4, #8]
	twihs_package_t packet = {
  40178a:	f88d c00c 	strb.w	ip, [sp, #12]
  40178e:	f88d e00d 	strb.w	lr, [sp, #13]
  401792:	9206      	str	r2, [sp, #24]
  401794:	f88d 301c 	strb.w	r3, [sp, #28]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  401798:	47a8      	blx	r5
  40179a:	b168      	cbz	r0, 4017b8 <mxt_init_device+0x160>
		return ERR_BAD_DATA;
  40179c:	f06f 0003 	mvn.w	r0, #3
	}

	device->multitouch_report_offset = status;

	return STATUS_OK;
}
  4017a0:	b009      	add	sp, #36	; 0x24
  4017a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result ^= crcpoly;
  4017a6:	404b      	eors	r3, r1
  4017a8:	e7be      	b.n	401728 <mxt_init_device+0xd0>
  4017aa:	bf00      	nop
  4017ac:	00406659 	.word	0x00406659
  4017b0:	00402369 	.word	0x00402369
  4017b4:	0080001b 	.word	0x0080001b
		return ((uint32_t)crc[2] << 16) | ((uint16_t)crc[1] << 8) | crc[0];
  4017b8:	f89d 500a 	ldrb.w	r5, [sp, #10]
	*crc = (crc_tmp & 0x00FFFFFF);
  4017bc:	f027 437f 	bic.w	r3, r7, #4278190080	; 0xff000000
		return ((uint32_t)crc[2] << 16) | ((uint16_t)crc[1] << 8) | crc[0];
  4017c0:	f89d 2008 	ldrb.w	r2, [sp, #8]
  4017c4:	f89d 1009 	ldrb.w	r1, [sp, #9]
  4017c8:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
  4017cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	if (crc_calculated != crc_read) {
  4017d0:	429a      	cmp	r2, r3
  4017d2:	d1e3      	bne.n	40179c <mxt_init_device+0x144>
  4017d4:	6823      	ldr	r3, [r4, #0]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4017d6:	799f      	ldrb	r7, [r3, #6]
  4017d8:	9301      	str	r3, [sp, #4]
  4017da:	2f00      	cmp	r7, #0
  4017dc:	f000 8139 	beq.w	401a52 <mxt_init_device+0x3fa>
  4017e0:	f1a7 0a08 	sub.w	sl, r7, #8
  4017e4:	1e7b      	subs	r3, r7, #1
  4017e6:	f8d4 8004 	ldr.w	r8, [r4, #4]
  4017ea:	f3ca 0ac4 	ubfx	sl, sl, #3, #5
  4017ee:	2b43      	cmp	r3, #67	; 0x43
  4017f0:	4603      	mov	r3, r0
  4017f2:	f10a 0a01 	add.w	sl, sl, #1
  4017f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
  4017fa:	b2d2      	uxtb	r2, r2
  4017fc:	f240 8116 	bls.w	401a2c <mxt_init_device+0x3d4>
  401800:	f108 0935 	add.w	r9, r8, #53	; 0x35
  401804:	4686      	mov	lr, r0
  401806:	4601      	mov	r1, r0
		tot_report_ids += (device->object_list[i].num_report_ids);
  401808:	2000      	movs	r0, #0
  40180a:	f819 cc18 	ldrb.w	ip, [r9, #-24]
  40180e:	f819 bc30 	ldrb.w	fp, [r9, #-48]
  401812:	3301      	adds	r3, #1
  401814:	4605      	mov	r5, r0
  401816:	f109 0930 	add.w	r9, r9, #48	; 0x30
  40181a:	f36b 0007 	bfi	r0, fp, #0, #8
  40181e:	f819 bc42 	ldrb.w	fp, [r9, #-66]
  401822:	f36c 0507 	bfi	r5, ip, #0, #8
  401826:	f819 cc5a 	ldrb.w	ip, [r9, #-90]
  40182a:	f36b 250f 	bfi	r5, fp, #8, #8
  40182e:	f819 bc3c 	ldrb.w	fp, [r9, #-60]
  401832:	f36c 200f 	bfi	r0, ip, #8, #8
  401836:	f819 cc54 	ldrb.w	ip, [r9, #-84]
  40183a:	f36b 4517 	bfi	r5, fp, #16, #8
  40183e:	f819 bc36 	ldrb.w	fp, [r9, #-54]
  401842:	f36c 4017 	bfi	r0, ip, #16, #8
  401846:	f819 cc4e 	ldrb.w	ip, [r9, #-78]
  40184a:	f36b 651f 	bfi	r5, fp, #24, #8
  40184e:	f001 3b7f 	and.w	fp, r1, #2139062143	; 0x7f7f7f7f
  401852:	f36c 601f 	bfi	r0, ip, #24, #8
  401856:	f005 3c7f 	and.w	ip, r5, #2139062143	; 0x7f7f7f7f
  40185a:	4069      	eors	r1, r5
  40185c:	f000 357f 	and.w	r5, r0, #2139062143	; 0x7f7f7f7f
  401860:	ea80 000e 	eor.w	r0, r0, lr
  401864:	44dc      	add	ip, fp
  401866:	f00e 3e7f 	and.w	lr, lr, #2139062143	; 0x7f7f7f7f
  40186a:	fa5f fb83 	uxtb.w	fp, r3
  40186e:	f001 3180 	and.w	r1, r1, #2155905152	; 0x80808080
  401872:	f000 3080 	and.w	r0, r0, #2155905152	; 0x80808080
  401876:	44ae      	add	lr, r5
  401878:	45da      	cmp	sl, fp
  40187a:	ea8c 0101 	eor.w	r1, ip, r1
  40187e:	ea8e 0e00 	eor.w	lr, lr, r0
  401882:	d8c1      	bhi.n	401808 <mxt_init_device+0x1b0>
  401884:	f3ce 2307 	ubfx	r3, lr, #8, #8
  401888:	f3ce 4c07 	ubfx	ip, lr, #16, #8
  40188c:	f3c1 2507 	ubfx	r5, r1, #8, #8
  401890:	f3c1 4007 	ubfx	r0, r1, #16, #8
  401894:	4473      	add	r3, lr
  401896:	4297      	cmp	r7, r2
  401898:	4463      	add	r3, ip
  40189a:	eb03 631e 	add.w	r3, r3, lr, lsr #24
  40189e:	440b      	add	r3, r1
  4018a0:	442b      	add	r3, r5
  4018a2:	4403      	add	r3, r0
  4018a4:	eb03 6311 	add.w	r3, r3, r1, lsr #24
  4018a8:	b2db      	uxtb	r3, r3
  4018aa:	d00a      	beq.n	4018c2 <mxt_init_device+0x26a>
  4018ac:	eb02 0142 	add.w	r1, r2, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4018b0:	3201      	adds	r2, #1
		tot_report_ids += (device->object_list[i].num_report_ids);
  4018b2:	eb08 0141 	add.w	r1, r8, r1, lsl #1
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4018b6:	b2d2      	uxtb	r2, r2
		tot_report_ids += (device->object_list[i].num_report_ids);
  4018b8:	7949      	ldrb	r1, [r1, #5]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4018ba:	4297      	cmp	r7, r2
		tot_report_ids += (device->object_list[i].num_report_ids);
  4018bc:	440b      	add	r3, r1
  4018be:	b2db      	uxtb	r3, r3
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4018c0:	d8f4      	bhi.n	4018ac <mxt_init_device+0x254>
  4018c2:	0058      	lsls	r0, r3, #1
			malloc(sizeof(struct mxt_report_id_map) *
  4018c4:	47b0      	blx	r6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4018c6:	9b01      	ldr	r3, [sp, #4]
	device->report_id_map = (struct mxt_report_id_map *)
  4018c8:	6160      	str	r0, [r4, #20]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4018ca:	799b      	ldrb	r3, [r3, #6]
  4018cc:	2b00      	cmp	r3, #0
  4018ce:	f43f af65 	beq.w	40179c <mxt_init_device+0x144>
  4018d2:	6860      	ldr	r0, [r4, #4]
  4018d4:	f04f 0c00 	mov.w	ip, #0
  4018d8:	2701      	movs	r7, #1
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  4018da:	eb0c 0e4c 	add.w	lr, ip, ip, lsl #1
  4018de:	2500      	movs	r5, #0
  4018e0:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
  4018e4:	eb00 010e 	add.w	r1, r0, lr
			if (device->object_list[i].num_report_ids != 0) {
  4018e8:	794b      	ldrb	r3, [r1, #5]
  4018ea:	b1a3      	cbz	r3, 401916 <mxt_init_device+0x2be>
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  4018ec:	463b      	mov	r3, r7
					device->report_id_map[id_index].object_type =
  4018ee:	b218      	sxth	r0, r3
  4018f0:	6962      	ldr	r2, [r4, #20]
							device->object_list[i].type;
  4018f2:	7809      	ldrb	r1, [r1, #0]
					id_index++;
  4018f4:	3301      	adds	r3, #1
					device->report_id_map[id_index].object_type =
  4018f6:	f802 1010 	strb.w	r1, [r2, r0, lsl #1]
					id_index++;
  4018fa:	b2db      	uxtb	r3, r3
					device->report_id_map[id_index].instance = j;
  4018fc:	6961      	ldr	r1, [r4, #20]
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  4018fe:	1bda      	subs	r2, r3, r7
					device->report_id_map[id_index].instance = j;
  401900:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  401904:	b2d2      	uxtb	r2, r2
					device->report_id_map[id_index].instance = j;
  401906:	704d      	strb	r5, [r1, #1]
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  401908:	6860      	ldr	r0, [r4, #4]
  40190a:	eb00 010e 	add.w	r1, r0, lr
  40190e:	794e      	ldrb	r6, [r1, #5]
  401910:	4296      	cmp	r6, r2
  401912:	d8ec      	bhi.n	4018ee <mxt_init_device+0x296>
					id_index++;
  401914:	461f      	mov	r7, r3
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  401916:	3501      	adds	r5, #1
  401918:	790b      	ldrb	r3, [r1, #4]
  40191a:	b2ed      	uxtb	r5, r5
  40191c:	42ab      	cmp	r3, r5
  40191e:	d2e3      	bcs.n	4018e8 <mxt_init_device+0x290>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401920:	f10c 0c01 	add.w	ip, ip, #1
  401924:	6823      	ldr	r3, [r4, #0]
  401926:	fa5f fc8c 	uxtb.w	ip, ip
  40192a:	7999      	ldrb	r1, [r3, #6]
  40192c:	458c      	cmp	ip, r1
  40192e:	d3d4      	bcc.n	4018da <mxt_init_device+0x282>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401930:	2900      	cmp	r1, #0
  401932:	f43f af33 	beq.w	40179c <mxt_init_device+0x144>
  401936:	f1a1 0c08 	sub.w	ip, r1, #8
  40193a:	1e4b      	subs	r3, r1, #1
  40193c:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
  401940:	2b43      	cmp	r3, #67	; 0x43
  401942:	f10c 0c01 	add.w	ip, ip, #1
  401946:	ea4f 05cc 	mov.w	r5, ip, lsl #3
  40194a:	b2ed      	uxtb	r5, r5
  40194c:	d970      	bls.n	401a30 <mxt_init_device+0x3d8>
  40194e:	f04f 0800 	mov.w	r8, #0
  401952:	f100 0735 	add.w	r7, r0, #53	; 0x35
  401956:	4642      	mov	r2, r8
  401958:	4646      	mov	r6, r8
		tot_report_ids += (device->object_list[i].num_report_ids);
  40195a:	2300      	movs	r3, #0
  40195c:	f817 9c18 	ldrb.w	r9, [r7, #-24]
  401960:	f817 ac30 	ldrb.w	sl, [r7, #-48]
  401964:	f108 0801 	add.w	r8, r8, #1
  401968:	469e      	mov	lr, r3
  40196a:	3730      	adds	r7, #48	; 0x30
  40196c:	f36a 0307 	bfi	r3, sl, #0, #8
  401970:	f817 ac42 	ldrb.w	sl, [r7, #-66]
  401974:	f369 0e07 	bfi	lr, r9, #0, #8
  401978:	f817 9c5a 	ldrb.w	r9, [r7, #-90]
  40197c:	f36a 2e0f 	bfi	lr, sl, #8, #8
  401980:	f369 230f 	bfi	r3, r9, #8, #8
  401984:	f817 ac3c 	ldrb.w	sl, [r7, #-60]
  401988:	f817 9c54 	ldrb.w	r9, [r7, #-84]
  40198c:	f36a 4e17 	bfi	lr, sl, #16, #8
  401990:	f817 ac36 	ldrb.w	sl, [r7, #-54]
  401994:	f369 4317 	bfi	r3, r9, #16, #8
  401998:	f817 9c4e 	ldrb.w	r9, [r7, #-78]
  40199c:	f36a 6e1f 	bfi	lr, sl, #24, #8
  4019a0:	f006 3a7f 	and.w	sl, r6, #2139062143	; 0x7f7f7f7f
  4019a4:	f369 631f 	bfi	r3, r9, #24, #8
  4019a8:	ea8e 0606 	eor.w	r6, lr, r6
  4019ac:	f00e 397f 	and.w	r9, lr, #2139062143	; 0x7f7f7f7f
  4019b0:	f003 3b7f 	and.w	fp, r3, #2139062143	; 0x7f7f7f7f
  4019b4:	fa5f fe88 	uxtb.w	lr, r8
  4019b8:	4053      	eors	r3, r2
  4019ba:	f002 327f 	and.w	r2, r2, #2139062143	; 0x7f7f7f7f
  4019be:	f006 3680 	and.w	r6, r6, #2155905152	; 0x80808080
  4019c2:	44d1      	add	r9, sl
  4019c4:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
  4019c8:	445a      	add	r2, fp
  4019ca:	45f4      	cmp	ip, lr
  4019cc:	ea89 0606 	eor.w	r6, r9, r6
  4019d0:	ea82 0203 	eor.w	r2, r2, r3
  4019d4:	d8c1      	bhi.n	40195a <mxt_init_device+0x302>
  4019d6:	f3c2 2307 	ubfx	r3, r2, #8, #8
  4019da:	f3c2 4c07 	ubfx	ip, r2, #16, #8
  4019de:	f3c6 2e07 	ubfx	lr, r6, #8, #8
  4019e2:	f3c6 4707 	ubfx	r7, r6, #16, #8
  4019e6:	4413      	add	r3, r2
  4019e8:	42a9      	cmp	r1, r5
  4019ea:	4463      	add	r3, ip
  4019ec:	eb03 6312 	add.w	r3, r3, r2, lsr #24
  4019f0:	4433      	add	r3, r6
  4019f2:	4473      	add	r3, lr
  4019f4:	443b      	add	r3, r7
  4019f6:	eb03 6316 	add.w	r3, r3, r6, lsr #24
  4019fa:	b2db      	uxtb	r3, r3
  4019fc:	d11a      	bne.n	401a34 <mxt_init_device+0x3dc>
	for (i = 0; i < tot_rpt_id; ++i) {
  4019fe:	2b00      	cmp	r3, #0
  401a00:	f43f aecc 	beq.w	40179c <mxt_init_device+0x144>
		if (device->report_id_map[i].object_type == object_type) {
  401a04:	6961      	ldr	r1, [r4, #20]
  401a06:	780a      	ldrb	r2, [r1, #0]
  401a08:	2a09      	cmp	r2, #9
  401a0a:	d024      	beq.n	401a56 <mxt_init_device+0x3fe>
  401a0c:	2200      	movs	r2, #0
	for (i = 0; i < tot_rpt_id; ++i) {
  401a0e:	3201      	adds	r2, #1
  401a10:	b2d2      	uxtb	r2, r2
  401a12:	429a      	cmp	r2, r3
  401a14:	f43f aec2 	beq.w	40179c <mxt_init_device+0x144>
		if (device->report_id_map[i].object_type == object_type) {
  401a18:	f811 0f02 	ldrb.w	r0, [r1, #2]!
  401a1c:	2809      	cmp	r0, #9
  401a1e:	d1f6      	bne.n	401a0e <mxt_init_device+0x3b6>
  401a20:	b252      	sxtb	r2, r2
	return STATUS_OK;
  401a22:	2000      	movs	r0, #0
	device->multitouch_report_offset = status;
  401a24:	7722      	strb	r2, [r4, #28]
}
  401a26:	b009      	add	sp, #36	; 0x24
  401a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401a2c:	4602      	mov	r2, r0
  401a2e:	e73d      	b.n	4018ac <mxt_init_device+0x254>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401a30:	2300      	movs	r3, #0
  401a32:	461d      	mov	r5, r3
		tot_report_ids += (device->object_list[i].num_report_ids);
  401a34:	eb05 0245 	add.w	r2, r5, r5, lsl #1
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401a38:	3501      	adds	r5, #1
		tot_report_ids += (device->object_list[i].num_report_ids);
  401a3a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401a3e:	b2ed      	uxtb	r5, r5
		tot_report_ids += (device->object_list[i].num_report_ids);
  401a40:	7952      	ldrb	r2, [r2, #5]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401a42:	42a9      	cmp	r1, r5
		tot_report_ids += (device->object_list[i].num_report_ids);
  401a44:	4413      	add	r3, r2
  401a46:	b2db      	uxtb	r3, r3
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401a48:	d8f4      	bhi.n	401a34 <mxt_init_device+0x3dc>
  401a4a:	e7d8      	b.n	4019fe <mxt_init_device+0x3a6>
  401a4c:	f04f 30ff 	mov.w	r0, #4294967295
  401a50:	e6a6      	b.n	4017a0 <mxt_init_device+0x148>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401a52:	4638      	mov	r0, r7
  401a54:	e736      	b.n	4018c4 <mxt_init_device+0x26c>
		if (device->report_id_map[i].object_type == object_type) {
  401a56:	2200      	movs	r2, #0
  401a58:	e7e3      	b.n	401a22 <mxt_init_device+0x3ca>
  401a5a:	bf00      	nop

00401a5c <mxt_get_object_address>:
uint16_t mxt_get_object_address(struct mxt_device *device, uint8_t object_id,
		uint8_t instance)
{
	uint8_t i;

	for (i = 0; i < device->info_object->obj_count; i++) {
  401a5c:	6803      	ldr	r3, [r0, #0]
  401a5e:	799b      	ldrb	r3, [r3, #6]
  401a60:	b1eb      	cbz	r3, 401a9e <mxt_get_object_address+0x42>
{
  401a62:	b410      	push	{r4}
		if (object_id == device->object_list[i].type) {
  401a64:	6844      	ldr	r4, [r0, #4]
  401a66:	7822      	ldrb	r2, [r4, #0]
  401a68:	428a      	cmp	r2, r1
  401a6a:	d013      	beq.n	401a94 <mxt_get_object_address+0x38>
  401a6c:	1e5a      	subs	r2, r3, #1
  401a6e:	1da3      	adds	r3, r4, #6
  401a70:	b2d2      	uxtb	r2, r2
  401a72:	3201      	adds	r2, #1
  401a74:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  401a78:	eb04 0242 	add.w	r2, r4, r2, lsl #1
  401a7c:	e003      	b.n	401a86 <mxt_get_object_address+0x2a>
  401a7e:	f813 0b06 	ldrb.w	r0, [r3], #6
  401a82:	4288      	cmp	r0, r1
  401a84:	d006      	beq.n	401a94 <mxt_get_object_address+0x38>
	for (i = 0; i < device->info_object->obj_count; i++) {
  401a86:	4293      	cmp	r3, r2
		if (object_id == device->object_list[i].type) {
  401a88:	461c      	mov	r4, r3
	for (i = 0; i < device->info_object->obj_count; i++) {
  401a8a:	d1f8      	bne.n	401a7e <mxt_get_object_address+0x22>
			return device->object_list[i].start_address;
		}
	}

	return 0;
  401a8c:	2000      	movs	r0, #0
}
  401a8e:	f85d 4b04 	ldr.w	r4, [sp], #4
  401a92:	4770      	bx	lr
			return device->object_list[i].start_address;
  401a94:	f8b4 0001 	ldrh.w	r0, [r4, #1]
}
  401a98:	f85d 4b04 	ldr.w	r4, [sp], #4
  401a9c:	4770      	bx	lr
	return 0;
  401a9e:	4618      	mov	r0, r3
  401aa0:	4770      	bx	lr
  401aa2:	bf00      	nop

00401aa4 <mxt_write_config_object>:
 * \param *obj_data Pointer to memory buffer containing object data
 * \result Operation result status code
 */
status_code_t mxt_write_config_object(struct mxt_device *device,
		mxt_memory_adr memory_adr, void *obj_data)
{
  401aa4:	b530      	push	{r4, r5, lr}
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  401aa6:	2300      	movs	r3, #0
{
  401aa8:	b087      	sub	sp, #28
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401aaa:	6804      	ldr	r4, [r0, #0]
	twihs_package_t packet = {
  401aac:	2502      	movs	r5, #2
  401aae:	9301      	str	r3, [sp, #4]
  401ab0:	9203      	str	r2, [sp, #12]
  401ab2:	0a0a      	lsrs	r2, r1, #8
  401ab4:	9304      	str	r3, [sp, #16]
  401ab6:	9305      	str	r3, [sp, #20]
  401ab8:	9502      	str	r5, [sp, #8]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401aba:	79a3      	ldrb	r3, [r4, #6]
	twihs_package_t packet = {
  401abc:	f88d 1004 	strb.w	r1, [sp, #4]
  401ac0:	f88d 2005 	strb.w	r2, [sp, #5]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401ac4:	b1bb      	cbz	r3, 401af6 <mxt_write_config_object+0x52>
		if (device->object_list[i].start_address == mem_adr) {
  401ac6:	6844      	ldr	r4, [r0, #4]
  401ac8:	f8b4 2001 	ldrh.w	r2, [r4, #1]
  401acc:	428a      	cmp	r2, r1
  401ace:	d020      	beq.n	401b12 <mxt_write_config_object+0x6e>
  401ad0:	1e5a      	subs	r2, r3, #1
  401ad2:	1da3      	adds	r3, r4, #6
  401ad4:	b2d2      	uxtb	r2, r2
  401ad6:	3201      	adds	r2, #1
  401ad8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  401adc:	eb04 0242 	add.w	r2, r4, r2, lsl #1
  401ae0:	e003      	b.n	401aea <mxt_write_config_object+0x46>
  401ae2:	f8b4 5001 	ldrh.w	r5, [r4, #1]
  401ae6:	428d      	cmp	r5, r1
  401ae8:	d013      	beq.n	401b12 <mxt_write_config_object+0x6e>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401aea:	429a      	cmp	r2, r3
		if (device->object_list[i].start_address == mem_adr) {
  401aec:	461c      	mov	r4, r3
  401aee:	f103 0306 	add.w	r3, r3, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  401af2:	d1f6      	bne.n	401ae2 <mxt_write_config_object+0x3e>
  401af4:	2300      	movs	r3, #0
	twihs_package_t packet = {
  401af6:	7b04      	ldrb	r4, [r0, #12]
		.chip         = device->mxt_chip_adr,
		.buffer       = obj_data,
		.length       = mxt_get_object_size(device, memory_adr)
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  401af8:	a901      	add	r1, sp, #4
  401afa:	4a08      	ldr	r2, [pc, #32]	; (401b1c <mxt_write_config_object+0x78>)
  401afc:	6880      	ldr	r0, [r0, #8]
	twihs_package_t packet = {
  401afe:	9304      	str	r3, [sp, #16]
  401b00:	f88d 4014 	strb.w	r4, [sp, #20]
	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  401b04:	4790      	blx	r2
  401b06:	3000      	adds	r0, #0
  401b08:	bf18      	it	ne
  401b0a:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}

}
  401b0c:	4240      	negs	r0, r0
  401b0e:	b007      	add	sp, #28
  401b10:	bd30      	pop	{r4, r5, pc}
			return (device->object_list[i].size + 1);
  401b12:	78e3      	ldrb	r3, [r4, #3]
  401b14:	3301      	adds	r3, #1
  401b16:	b2db      	uxtb	r3, r3
  401b18:	e7ed      	b.n	401af6 <mxt_write_config_object+0x52>
  401b1a:	bf00      	nop
  401b1c:	0040241d 	.word	0x0040241d

00401b20 <mxt_write_config_reg>:
 * \param value Value to be written to register
 * \result Operation result status code
 */
status_code_t mxt_write_config_reg(struct mxt_device *device,
		mxt_memory_adr memory_adr, uint8_t value)
{
  401b20:	b5f0      	push	{r4, r5, r6, r7, lr}
  401b22:	b089      	sub	sp, #36	; 0x24
  401b24:	460c      	mov	r4, r1
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  401b26:	2300      	movs	r3, #0
  401b28:	0a09      	lsrs	r1, r1, #8
  401b2a:	7b07      	ldrb	r7, [r0, #12]
  401b2c:	2602      	movs	r6, #2
{
  401b2e:	f88d 2007 	strb.w	r2, [sp, #7]
	twihs_package_t packet = {
  401b32:	f10d 0507 	add.w	r5, sp, #7
  401b36:	2201      	movs	r2, #1
  401b38:	9303      	str	r3, [sp, #12]
  401b3a:	9307      	str	r3, [sp, #28]
  401b3c:	f88d 100d 	strb.w	r1, [sp, #13]
		.chip         = device->mxt_chip_adr,
		.buffer       = &value,
		.length       = sizeof(value)
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  401b40:	a903      	add	r1, sp, #12
  401b42:	4b08      	ldr	r3, [pc, #32]	; (401b64 <mxt_write_config_reg+0x44>)
  401b44:	6880      	ldr	r0, [r0, #8]
	twihs_package_t packet = {
  401b46:	f88d 400c 	strb.w	r4, [sp, #12]
  401b4a:	f88d 701c 	strb.w	r7, [sp, #28]
  401b4e:	9604      	str	r6, [sp, #16]
  401b50:	9505      	str	r5, [sp, #20]
  401b52:	9206      	str	r2, [sp, #24]
	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  401b54:	4798      	blx	r3
  401b56:	3000      	adds	r0, #0
  401b58:	bf18      	it	ne
  401b5a:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}
}
  401b5c:	4240      	negs	r0, r0
  401b5e:	b009      	add	sp, #36	; 0x24
  401b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401b62:	bf00      	nop
  401b64:	0040241d 	.word	0x0040241d

00401b68 <mxt_read_message>:
 * \param *message Pointer to mxt_message instance
 * \return Operation result status code
 */
status_code_t mxt_read_message(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
  401b68:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < device->info_object->obj_count; i++) {
  401b6a:	6803      	ldr	r3, [r0, #0]
{
  401b6c:	b087      	sub	sp, #28
	for (i = 0; i < device->info_object->obj_count; i++) {
  401b6e:	799b      	ldrb	r3, [r3, #6]
  401b70:	2b00      	cmp	r3, #0
  401b72:	d033      	beq.n	401bdc <mxt_read_message+0x74>
		if (object_id == device->object_list[i].type) {
  401b74:	6845      	ldr	r5, [r0, #4]
  401b76:	782a      	ldrb	r2, [r5, #0]
  401b78:	2a05      	cmp	r2, #5
  401b7a:	d02a      	beq.n	401bd2 <mxt_read_message+0x6a>
  401b7c:	1e5a      	subs	r2, r3, #1
  401b7e:	1dab      	adds	r3, r5, #6
  401b80:	b2d2      	uxtb	r2, r2
  401b82:	3201      	adds	r2, #1
  401b84:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  401b88:	eb05 0242 	add.w	r2, r5, r2, lsl #1
  401b8c:	e003      	b.n	401b96 <mxt_read_message+0x2e>
  401b8e:	f813 4b06 	ldrb.w	r4, [r3], #6
  401b92:	2c05      	cmp	r4, #5
  401b94:	d01d      	beq.n	401bd2 <mxt_read_message+0x6a>
	for (i = 0; i < device->info_object->obj_count; i++) {
  401b96:	4293      	cmp	r3, r2
		if (object_id == device->object_list[i].type) {
  401b98:	461d      	mov	r5, r3
	for (i = 0; i < device->info_object->obj_count; i++) {
  401b9a:	d1f8      	bne.n	401b8e <mxt_read_message+0x26>
  401b9c:	2300      	movs	r3, #0
  401b9e:	461f      	mov	r7, r3
	uint16_t obj_adr = mxt_get_object_address(device,
			MXT_GEN_MESSAGEPROCESSOR_T5, 0);

	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  401ba0:	2200      	movs	r2, #0
  401ba2:	7b04      	ldrb	r4, [r0, #12]
  401ba4:	2602      	movs	r6, #2
  401ba6:	2509      	movs	r5, #9
  401ba8:	9201      	str	r2, [sp, #4]
  401baa:	9205      	str	r2, [sp, #20]
  401bac:	9103      	str	r1, [sp, #12]
		.buffer       = message,
		.length       = MXT_TWI_MSG_SIZE_T5
	};

	/* Read information from the slave */
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  401bae:	a901      	add	r1, sp, #4
  401bb0:	4a0b      	ldr	r2, [pc, #44]	; (401be0 <mxt_read_message+0x78>)
  401bb2:	6880      	ldr	r0, [r0, #8]
	twihs_package_t packet = {
  401bb4:	f88d 7004 	strb.w	r7, [sp, #4]
  401bb8:	f88d 3005 	strb.w	r3, [sp, #5]
  401bbc:	9602      	str	r6, [sp, #8]
  401bbe:	9504      	str	r5, [sp, #16]
  401bc0:	f88d 4014 	strb.w	r4, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  401bc4:	4790      	blx	r2
  401bc6:	3000      	adds	r0, #0
  401bc8:	bf18      	it	ne
  401bca:	2001      	movne	r0, #1
		return mxt_validate_message(&packet);
#else
		return STATUS_OK;
#endif
	}
}
  401bcc:	4240      	negs	r0, r0
  401bce:	b007      	add	sp, #28
  401bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return device->object_list[i].start_address;
  401bd2:	f8b5 3001 	ldrh.w	r3, [r5, #1]
  401bd6:	b2df      	uxtb	r7, r3
  401bd8:	0a1b      	lsrs	r3, r3, #8
  401bda:	e7e1      	b.n	401ba0 <mxt_read_message+0x38>
	for (i = 0; i < device->info_object->obj_count; i++) {
  401bdc:	461f      	mov	r7, r3
  401bde:	e7df      	b.n	401ba0 <mxt_read_message+0x38>
  401be0:	00402369 	.word	0x00402369

00401be4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  401be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  401be8:	b990      	cbnz	r0, 401c10 <_read+0x2c>
		return -1;
	}

	for (; len > 0; --len) {
  401bea:	2a00      	cmp	r2, #0
  401bec:	4690      	mov	r8, r2
  401bee:	dd0d      	ble.n	401c0c <_read+0x28>
  401bf0:	460c      	mov	r4, r1
  401bf2:	188f      	adds	r7, r1, r2
  401bf4:	4e08      	ldr	r6, [pc, #32]	; (401c18 <_read+0x34>)
  401bf6:	4d09      	ldr	r5, [pc, #36]	; (401c1c <_read+0x38>)
		ptr_get(stdio_base, ptr);
  401bf8:	4621      	mov	r1, r4
		ptr++;
  401bfa:	3401      	adds	r4, #1
		ptr_get(stdio_base, ptr);
  401bfc:	6830      	ldr	r0, [r6, #0]
  401bfe:	682b      	ldr	r3, [r5, #0]
  401c00:	4798      	blx	r3
	for (; len > 0; --len) {
  401c02:	42bc      	cmp	r4, r7
  401c04:	d1f8      	bne.n	401bf8 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  401c06:	4640      	mov	r0, r8
  401c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (; len > 0; --len) {
  401c0c:	4680      	mov	r8, r0
  401c0e:	e7fa      	b.n	401c06 <_read+0x22>
		return -1;
  401c10:	f04f 38ff 	mov.w	r8, #4294967295
  401c14:	e7f7      	b.n	401c06 <_read+0x22>
  401c16:	bf00      	nop
  401c18:	2043fc14 	.word	0x2043fc14
  401c1c:	2043fc0c 	.word	0x2043fc0c

00401c20 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  401c20:	3801      	subs	r0, #1
  401c22:	2802      	cmp	r0, #2
  401c24:	d81e      	bhi.n	401c64 <_write+0x44>
{
  401c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401c2a:	4615      	mov	r5, r2
		return -1;
	}

	for (; len != 0; --len) {
  401c2c:	b1ba      	cbz	r2, 401c5e <_write+0x3e>
  401c2e:	460e      	mov	r6, r1
  401c30:	460c      	mov	r4, r1
  401c32:	f8df 803c 	ldr.w	r8, [pc, #60]	; 401c70 <_write+0x50>
  401c36:	4f0d      	ldr	r7, [pc, #52]	; (401c6c <_write+0x4c>)
  401c38:	e001      	b.n	401c3e <_write+0x1e>
  401c3a:	3d01      	subs	r5, #1
  401c3c:	d00d      	beq.n	401c5a <_write+0x3a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  401c3e:	f814 1b01 	ldrb.w	r1, [r4], #1
  401c42:	f8d8 0000 	ldr.w	r0, [r8]
  401c46:	683b      	ldr	r3, [r7, #0]
  401c48:	4798      	blx	r3
  401c4a:	2800      	cmp	r0, #0
  401c4c:	eba4 0006 	sub.w	r0, r4, r6
  401c50:	daf3      	bge.n	401c3a <_write+0x1a>
		return -1;
  401c52:	f04f 30ff 	mov.w	r0, #4294967295
  401c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (; len != 0; --len) {
  401c5e:	4610      	mov	r0, r2
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  401c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  401c64:	f04f 30ff 	mov.w	r0, #4294967295
}
  401c68:	4770      	bx	lr
  401c6a:	bf00      	nop
  401c6c:	2043fc10 	.word	0x2043fc10
  401c70:	2043fc14 	.word	0x2043fc14

00401c74 <wm8904_write_register>:
 *
 * \param uc_register_address Register address to write
 * \param us_data Data to write.
 */
void wm8904_write_register(uint8_t uc_register_address, uint16_t us_data)
{
  401c74:	b570      	push	{r4, r5, r6, lr}
  401c76:	460b      	mov	r3, r1
  401c78:	b086      	sub	sp, #24
	uint8_t uc_temp_data[2];
	twihs_packet_t packet;

	uc_temp_data[0] = (us_data & 0xff00) >> 8;
  401c7a:	0a0e      	lsrs	r6, r1, #8

	packet.addr[0]     = uc_register_address;
	packet.addr_length = 0x1;
	packet.buffer      = uc_temp_data;
	packet.length      = 0x2;
	packet.chip        = WM8904_SLAVE_ADDRESS;
  401c7c:	221a      	movs	r2, #26
	uc_temp_data[1] = us_data & 0xff;
  401c7e:	f88d 3001 	strb.w	r3, [sp, #1]
	packet.addr_length = 0x1;
  401c82:	2501      	movs	r5, #1
	packet.length      = 0x2;
  401c84:	2402      	movs	r4, #2

	twihs_master_write(WM8904_TWIHS, &packet);
  401c86:	a901      	add	r1, sp, #4
  401c88:	4b07      	ldr	r3, [pc, #28]	; (401ca8 <wm8904_write_register+0x34>)
	packet.addr[0]     = uc_register_address;
  401c8a:	f88d 0004 	strb.w	r0, [sp, #4]
	twihs_master_write(WM8904_TWIHS, &packet);
  401c8e:	4807      	ldr	r0, [pc, #28]	; (401cac <wm8904_write_register+0x38>)
	uc_temp_data[0] = (us_data & 0xff00) >> 8;
  401c90:	f88d 6000 	strb.w	r6, [sp]
	packet.addr_length = 0x1;
  401c94:	9502      	str	r5, [sp, #8]
	packet.buffer      = uc_temp_data;
  401c96:	f8cd d00c 	str.w	sp, [sp, #12]
	packet.length      = 0x2;
  401c9a:	9404      	str	r4, [sp, #16]
	packet.chip        = WM8904_SLAVE_ADDRESS;
  401c9c:	f88d 2014 	strb.w	r2, [sp, #20]
	twihs_master_write(WM8904_TWIHS, &packet);
  401ca0:	4798      	blx	r3
}
  401ca2:	b006      	add	sp, #24
  401ca4:	bd70      	pop	{r4, r5, r6, pc}
  401ca6:	bf00      	nop
  401ca8:	0040241d 	.word	0x0040241d
  401cac:	40018000 	.word	0x40018000

00401cb0 <wm8904_read_register>:
 *
 * \param uc_register_address Register address to write
 * \retun Register value.
 */
uint16_t wm8904_read_register(uint8_t uc_register_address)
{
  401cb0:	b530      	push	{r4, r5, lr}
  401cb2:	b087      	sub	sp, #28

	packet.addr[0]     = uc_register_address;
	packet.addr_length = 0x1;
	packet.buffer      = uc_temp_data;
	packet.length      = 0x2;
	packet.chip        = WM8904_SLAVE_ADDRESS;
  401cb4:	221a      	movs	r2, #26
	packet.addr_length = 0x1;
  401cb6:	2501      	movs	r5, #1
	packet.length      = 0x2;
  401cb8:	2402      	movs	r4, #2
	packet.addr[0]     = uc_register_address;
  401cba:	f88d 0004 	strb.w	r0, [sp, #4]

	twihs_master_read(WM8904_TWIHS, &packet);
  401cbe:	a901      	add	r1, sp, #4
  401cc0:	4b08      	ldr	r3, [pc, #32]	; (401ce4 <wm8904_read_register+0x34>)
  401cc2:	4809      	ldr	r0, [pc, #36]	; (401ce8 <wm8904_read_register+0x38>)
	packet.addr_length = 0x1;
  401cc4:	9502      	str	r5, [sp, #8]
	packet.buffer      = uc_temp_data;
  401cc6:	f8cd d00c 	str.w	sp, [sp, #12]
	packet.length      = 0x2;
  401cca:	9404      	str	r4, [sp, #16]
	packet.chip        = WM8904_SLAVE_ADDRESS;
  401ccc:	f88d 2014 	strb.w	r2, [sp, #20]
	twihs_master_read(WM8904_TWIHS, &packet);
  401cd0:	4798      	blx	r3
	us_data = (((uint16_t)uc_temp_data[0] << 8) & 0xff00) | uc_temp_data[1];
  401cd2:	f89d 0000 	ldrb.w	r0, [sp]
  401cd6:	f89d 3001 	ldrb.w	r3, [sp, #1]

	return us_data;
}
  401cda:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  401cde:	b007      	add	sp, #28
  401ce0:	bd30      	pop	{r4, r5, pc}
  401ce2:	bf00      	nop
  401ce4:	00402369 	.word	0x00402369
  401ce8:	40018000 	.word	0x40018000

00401cec <wm8904_twi_init>:
 * \brief Initialize TWIHS connect to WM8904.
 *
 * \retun TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t wm8904_twi_init(void)
{
  401cec:	b510      	push	{r4, lr}
	pio_configure_pin(WM8904_TK_PIO, WM8904_TK_FLAGS);
  401cee:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
{
  401cf2:	b084      	sub	sp, #16
	pio_configure_pin(WM8904_TK_PIO, WM8904_TK_FLAGS);
  401cf4:	4c15      	ldr	r4, [pc, #84]	; (401d4c <wm8904_twi_init+0x60>)
  401cf6:	2021      	movs	r0, #33	; 0x21
  401cf8:	47a0      	blx	r4
	pio_configure_pin(WM8904_TF_PIO, WM8904_TF_FLAGS);
  401cfa:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401cfe:	2020      	movs	r0, #32
  401d00:	47a0      	blx	r4
	pio_configure_pin(WM8904_TD_PIO, WM8904_TD_FLAGS);
  401d02:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401d06:	207a      	movs	r0, #122	; 0x7a
  401d08:	47a0      	blx	r4
	pio_configure_pin(WM8904_RK_PIO, WM8904_RK_FLAGS);
  401d0a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401d0e:	2016      	movs	r0, #22
  401d10:	47a0      	blx	r4
	pio_configure_pin(WM8904_RF_PIO, WM8904_RF_FLAGS);
  401d12:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401d16:	2078      	movs	r0, #120	; 0x78
  401d18:	47a0      	blx	r4
	pio_configure_pin(WM8904_RD_PIO, WM8904_RD_FLAGS);
  401d1a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401d1e:	200a      	movs	r0, #10
  401d20:	47a0      	blx	r4
	pio_configure_pin(WM8904_PCK2_PIO, WM8904_PCK2_FLAGS);
  401d22:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401d26:	2012      	movs	r0, #18
  401d28:	47a0      	blx	r4
	p_opt->smbus      = 0;
  401d2a:	2200      	movs	r2, #0
	p_opt->master_clk = sysclk_get_peripheral_hz();
  401d2c:	4908      	ldr	r1, [pc, #32]	; (401d50 <wm8904_twi_init+0x64>)
  401d2e:	2013      	movs	r0, #19

	twihs_options_t opt;
	opt.master_clk = sysclk_get_cpu_hz();
	opt.speed = WM8904_TWIHS_CLK;
  401d30:	4c08      	ldr	r4, [pc, #32]	; (401d54 <wm8904_twi_init+0x68>)
  401d32:	4b09      	ldr	r3, [pc, #36]	; (401d58 <wm8904_twi_init+0x6c>)
  401d34:	9101      	str	r1, [sp, #4]
	p_opt->smbus      = 0;
  401d36:	f88d 200d 	strb.w	r2, [sp, #13]
  401d3a:	9402      	str	r4, [sp, #8]
  401d3c:	4798      	blx	r3
	return (twihs_master_init(p_twihs, p_opt));
  401d3e:	a901      	add	r1, sp, #4
  401d40:	4b06      	ldr	r3, [pc, #24]	; (401d5c <wm8904_twi_init+0x70>)
  401d42:	4807      	ldr	r0, [pc, #28]	; (401d60 <wm8904_twi_init+0x74>)
  401d44:	4798      	blx	r3
	return twihs_master_setup(WM8904_TWIHS, &opt);
}
  401d46:	b004      	add	sp, #16
  401d48:	bd10      	pop	{r4, pc}
  401d4a:	bf00      	nop
  401d4c:	00402aa9 	.word	0x00402aa9
  401d50:	08f0d180 	.word	0x08f0d180
  401d54:	00061a80 	.word	0x00061a80
  401d58:	00403101 	.word	0x00403101
  401d5c:	00402289 	.word	0x00402289
  401d60:	40018000 	.word	0x40018000

00401d64 <ili9488_set_window>:
 * \Param y start position.
 * \Param width  Width of window.
 * \Param height Height of window.
 */
void ili9488_set_window(uint16_t x, uint16_t y, uint16_t width, uint16_t height )
{
  401d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ili9488_color_t buf[4];

	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	col_start  =  x ;
	col_end    =  width + x - 1;
  401d68:	3a01      	subs	r2, #1
{
  401d6a:	460c      	mov	r4, r1

	row_start = y ;
	row_end   = height + y - 1;
  401d6c:	3b01      	subs	r3, #1
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401d6e:	4f29      	ldr	r7, [pc, #164]	; (401e14 <ili9488_set_window+0xb0>)
{
  401d70:	b085      	sub	sp, #20
	col_end    =  width + x - 1;
  401d72:	4402      	add	r2, r0
{
  401d74:	4605      	mov	r5, r0
	row_end   = height + y - 1;
  401d76:	4423      	add	r3, r4
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401d78:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 401e1c <ili9488_set_window+0xb8>
  401d7c:	4638      	mov	r0, r7
  401d7e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000

	buf[0] = get_8b_to_16b(col_start);
	buf[1] = get_0b_to_8b(col_start);
	buf[2] = get_8b_to_16b(col_end);
  401d82:	f3c2 2a07 	ubfx	sl, r2, #8, #8
	buf[3] = get_0b_to_8b(col_end);
  401d86:	b2d6      	uxtb	r6, r2
	col_end    =  width + x - 1;
  401d88:	f8ad 200a 	strh.w	r2, [sp, #10]
	row_end   = height + y - 1;
  401d8c:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf[0] = get_8b_to_16b(col_start);
  401d90:	ea4f 2b15 	mov.w	fp, r5, lsr #8
	col_start  =  x ;
  401d94:	f8ad 5008 	strh.w	r5, [sp, #8]
	buf[1] = get_0b_to_8b(col_start);
  401d98:	b2ed      	uxtb	r5, r5
	row_start = y ;
  401d9a:	f8ad 400c 	strh.w	r4, [sp, #12]
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  401d9e:	f04f 44c6 	mov.w	r4, #1660944384	; 0x63000000
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401da2:	47c0      	blx	r8
  401da4:	222a      	movs	r2, #42	; 0x2a
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401da6:	4b1c      	ldr	r3, [pc, #112]	; (401e18 <ili9488_set_window+0xb4>)
  401da8:	4638      	mov	r0, r7
  401daa:	8022      	strh	r2, [r4, #0]
  401dac:	f04f 0900 	mov.w	r9, #0
  401db0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401db4:	9301      	str	r3, [sp, #4]
  401db6:	4798      	blx	r3
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  401db8:	f8a4 b000 	strh.w	fp, [r4]
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401dbc:	4638      	mov	r0, r7
  401dbe:	8025      	strh	r5, [r4, #0]
  401dc0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401dc4:	f8a4 a000 	strh.w	sl, [r4]
  401dc8:	8026      	strh	r6, [r4, #0]
  401dca:	47c0      	blx	r8
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  401dcc:	f8a4 9000 	strh.w	r9, [r4]
  401dd0:	4638      	mov	r0, r7
  401dd2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);

	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(row_start);
  401dd6:	f89d b00d 	ldrb.w	fp, [sp, #13]
	buf[1] = get_0b_to_8b(row_start);
  401dda:	f89d a00c 	ldrb.w	sl, [sp, #12]
	buf[2] = get_8b_to_16b(row_end);
  401dde:	f89d 600f 	ldrb.w	r6, [sp, #15]
	buf[3] = get_0b_to_8b(row_end);
  401de2:	f89d 500e 	ldrb.w	r5, [sp, #14]
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401de6:	47c0      	blx	r8
  401de8:	222b      	movs	r2, #43	; 0x2b
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401dea:	4638      	mov	r0, r7
  401dec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401df0:	8022      	strh	r2, [r4, #0]
  401df2:	9b01      	ldr	r3, [sp, #4]
  401df4:	4798      	blx	r3
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401df6:	4638      	mov	r0, r7
  401df8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  401dfc:	f8a4 b000 	strh.w	fp, [r4]
  401e00:	f8a4 a000 	strh.w	sl, [r4]
  401e04:	8026      	strh	r6, [r4, #0]
  401e06:	8025      	strh	r5, [r4, #0]
  401e08:	47c0      	blx	r8
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  401e0a:	f8a4 9000 	strh.w	r9, [r4]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
}
  401e0e:	b005      	add	sp, #20
  401e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401e14:	400e1200 	.word	0x400e1200
  401e18:	0040296d 	.word	0x0040296d
  401e1c:	00402971 	.word	0x00402971

00401e20 <ili9488_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9488_display_on(void)
{
  401e20:	b508      	push	{r3, lr}
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401e22:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401e26:	4b04      	ldr	r3, [pc, #16]	; (401e38 <ili9488_display_on+0x18>)
  401e28:	4804      	ldr	r0, [pc, #16]	; (401e3c <ili9488_display_on+0x1c>)
  401e2a:	4798      	blx	r3
  401e2c:	f04f 43c6 	mov.w	r3, #1660944384	; 0x63000000
  401e30:	2229      	movs	r2, #41	; 0x29
  401e32:	801a      	strh	r2, [r3, #0]
  401e34:	bd08      	pop	{r3, pc}
  401e36:	bf00      	nop
  401e38:	00402971 	.word	0x00402971
  401e3c:	400e1200 	.word	0x400e1200

00401e40 <ili9488_set_cursor_position>:
 *
 * \param x X coordinate of upper-left corner on LCD.
 * \param y Y coordinate of upper-left corner on LCD.
 */
void ili9488_set_cursor_position(uint16_t x, uint16_t y)
{
  401e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401e44:	4d21      	ldr	r5, [pc, #132]	; (401ecc <ili9488_set_cursor_position+0x8c>)
{
  401e46:	b082      	sub	sp, #8
  401e48:	4606      	mov	r6, r0
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401e4a:	4f21      	ldr	r7, [pc, #132]	; (401ed0 <ili9488_set_cursor_position+0x90>)
{
  401e4c:	f8ad 1004 	strh.w	r1, [sp, #4]
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401e50:	4628      	mov	r0, r5
  401e52:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401e56:	f04f 44c6 	mov.w	r4, #1660944384	; 0x63000000
{
  401e5a:	f8ad 6006 	strh.w	r6, [sp, #6]
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401e5e:	47b8      	blx	r7
  401e60:	232a      	movs	r3, #42	; 0x2a
	uint32_t cnt = 0;

	ili9488_color_t buf[4];
	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	buf[0] = get_8b_to_16b(x);
  401e62:	ea4f 2916 	mov.w	r9, r6, lsr #8
	buf[1] = get_0b_to_8b(x);
  401e66:	b2f6      	uxtb	r6, r6
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401e68:	4628      	mov	r0, r5
  401e6a:	8023      	strh	r3, [r4, #0]
  401e6c:	f04f 0800 	mov.w	r8, #0
  401e70:	f8df a060 	ldr.w	sl, [pc, #96]	; 401ed4 <ili9488_set_cursor_position+0x94>
  401e74:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401e78:	47d0      	blx	sl
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  401e7a:	f8a4 9000 	strh.w	r9, [r4]
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401e7e:	4628      	mov	r0, r5
  401e80:	8026      	strh	r6, [r4, #0]
  401e82:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401e86:	f8a4 9000 	strh.w	r9, [r4]
  401e8a:	8026      	strh	r6, [r4, #0]
  401e8c:	47b8      	blx	r7
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  401e8e:	f8a4 8000 	strh.w	r8, [r4]
  401e92:	4628      	mov	r0, r5
  401e94:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);


	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(y);
  401e98:	f89d 9005 	ldrb.w	r9, [sp, #5]
	buf[1] = get_0b_to_8b(y);
  401e9c:	f89d 6004 	ldrb.w	r6, [sp, #4]
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401ea0:	47b8      	blx	r7
  401ea2:	232b      	movs	r3, #43	; 0x2b
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401ea4:	4628      	mov	r0, r5
  401ea6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401eaa:	8023      	strh	r3, [r4, #0]
  401eac:	47d0      	blx	sl
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401eae:	4628      	mov	r0, r5
  401eb0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  401eb4:	f8a4 9000 	strh.w	r9, [r4]
  401eb8:	8026      	strh	r6, [r4, #0]
  401eba:	f8a4 9000 	strh.w	r9, [r4]
  401ebe:	8026      	strh	r6, [r4, #0]
  401ec0:	47b8      	blx	r7
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  401ec2:	f8a4 8000 	strh.w	r8, [r4]
	buf[2] = get_8b_to_16b(y);
	buf[3] = get_0b_to_8b(y);
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
}
  401ec6:	b002      	add	sp, #8
  401ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401ecc:	400e1200 	.word	0x400e1200
  401ed0:	00402971 	.word	0x00402971
  401ed4:	0040296d 	.word	0x0040296d

00401ed8 <ili9488_init>:
{
  401ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401edc:	4607      	mov	r7, r0
	pmc_enable_periph_clk(ID_SMC);
  401ede:	4b40      	ldr	r3, [pc, #256]	; (401fe0 <ili9488_init+0x108>)
  401ee0:	2009      	movs	r0, #9
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401ee2:	4d40      	ldr	r5, [pc, #256]	; (401fe4 <ili9488_init+0x10c>)
	pmc_enable_periph_clk(ID_SMC);
  401ee4:	4798      	blx	r3
	smc_set_setup_timing(SMC, BOARD_ILI9488_EBI_NPCS, SMC_SETUP_NWE_SETUP(0)
  401ee6:	2200      	movs	r2, #0
  401ee8:	2103      	movs	r1, #3
  401eea:	483f      	ldr	r0, [pc, #252]	; (401fe8 <ili9488_init+0x110>)
  401eec:	4b3f      	ldr	r3, [pc, #252]	; (401fec <ili9488_init+0x114>)
  401eee:	f04f 44c6 	mov.w	r4, #1660944384	; 0x63000000
  401ef2:	4798      	blx	r3
	smc_set_pulse_timing(SMC, BOARD_ILI9488_EBI_NPCS , SMC_PULSE_NWE_PULSE(3)
  401ef4:	4a3e      	ldr	r2, [pc, #248]	; (401ff0 <ili9488_init+0x118>)
  401ef6:	2103      	movs	r1, #3
  401ef8:	483b      	ldr	r0, [pc, #236]	; (401fe8 <ili9488_init+0x110>)
  401efa:	4b3e      	ldr	r3, [pc, #248]	; (401ff4 <ili9488_init+0x11c>)
  401efc:	f04f 0936 	mov.w	r9, #54	; 0x36
  401f00:	4798      	blx	r3
	smc_set_cycle_timing(SMC, BOARD_ILI9488_EBI_NPCS, SMC_CYCLE_NWE_CYCLE(0x4)
  401f02:	4a3d      	ldr	r2, [pc, #244]	; (401ff8 <ili9488_init+0x120>)
  401f04:	2103      	movs	r1, #3
  401f06:	4838      	ldr	r0, [pc, #224]	; (401fe8 <ili9488_init+0x110>)
  401f08:	4b3c      	ldr	r3, [pc, #240]	; (401ffc <ili9488_init+0x124>)
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  401f0a:	f04f 0848 	mov.w	r8, #72	; 0x48
  401f0e:	4798      	blx	r3
	smc_set_mode(SMC, BOARD_ILI9488_EBI_NPCS, SMC_MODE_READ_MODE
  401f10:	4a3b      	ldr	r2, [pc, #236]	; (402000 <ili9488_init+0x128>)
  401f12:	4b3c      	ldr	r3, [pc, #240]	; (402004 <ili9488_init+0x12c>)
  401f14:	2103      	movs	r1, #3
  401f16:	4834      	ldr	r0, [pc, #208]	; (401fe8 <ili9488_init+0x110>)
  401f18:	4798      	blx	r3
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401f1a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401f1e:	483a      	ldr	r0, [pc, #232]	; (402008 <ili9488_init+0x130>)
  401f20:	47a8      	blx	r5
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  401f22:	2301      	movs	r3, #1
  401f24:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401f28:	4837      	ldr	r0, [pc, #220]	; (402008 <ili9488_init+0x130>)
  401f2a:	8023      	strh	r3, [r4, #0]
  401f2c:	47a8      	blx	r5
  401f2e:	2311      	movs	r3, #17
  401f30:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401f34:	4834      	ldr	r0, [pc, #208]	; (402008 <ili9488_init+0x130>)
  401f36:	8023      	strh	r3, [r4, #0]
  401f38:	47a8      	blx	r5
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401f3a:	4e34      	ldr	r6, [pc, #208]	; (40200c <ili9488_init+0x134>)
  401f3c:	f8a4 9000 	strh.w	r9, [r4]
  401f40:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401f44:	4830      	ldr	r0, [pc, #192]	; (402008 <ili9488_init+0x130>)
  401f46:	47b0      	blx	r6
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  401f48:	f8a4 8000 	strh.w	r8, [r4]
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401f4c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401f50:	482d      	ldr	r0, [pc, #180]	; (402008 <ili9488_init+0x130>)
  401f52:	47a8      	blx	r5
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  401f54:	23cf      	movs	r3, #207	; 0xcf
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401f56:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401f5a:	482b      	ldr	r0, [pc, #172]	; (402008 <ili9488_init+0x130>)
  401f5c:	8023      	strh	r3, [r4, #0]
  401f5e:	47b0      	blx	r6
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  401f60:	2304      	movs	r3, #4
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401f62:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401f66:	4828      	ldr	r0, [pc, #160]	; (402008 <ili9488_init+0x130>)
  401f68:	8023      	strh	r3, [r4, #0]
  401f6a:	47a8      	blx	r5
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  401f6c:	233a      	movs	r3, #58	; 0x3a
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401f6e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401f72:	4825      	ldr	r0, [pc, #148]	; (402008 <ili9488_init+0x130>)
  401f74:	8023      	strh	r3, [r4, #0]
  401f76:	47b0      	blx	r6
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  401f78:	2305      	movs	r3, #5
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401f7a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401f7e:	4822      	ldr	r0, [pc, #136]	; (402008 <ili9488_init+0x130>)
  401f80:	8023      	strh	r3, [r4, #0]
  401f82:	47a8      	blx	r5
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  401f84:	2312      	movs	r3, #18
  401f86:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401f8a:	481f      	ldr	r0, [pc, #124]	; (402008 <ili9488_init+0x130>)
  401f8c:	8023      	strh	r3, [r4, #0]
  401f8e:	47a8      	blx	r5
  401f90:	2329      	movs	r3, #41	; 0x29
  401f92:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401f96:	481c      	ldr	r0, [pc, #112]	; (402008 <ili9488_init+0x130>)
  401f98:	8023      	strh	r3, [r4, #0]
  401f9a:	47a8      	blx	r5
  401f9c:	f8a4 9000 	strh.w	r9, [r4]
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401fa0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401fa4:	4818      	ldr	r0, [pc, #96]	; (402008 <ili9488_init+0x130>)
  401fa6:	47b0      	blx	r6
	ili9488_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  401fa8:	2100      	movs	r1, #0
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  401faa:	f8a4 8000 	strh.w	r8, [r4]
  401fae:	4608      	mov	r0, r1
  401fb0:	88bb      	ldrh	r3, [r7, #4]
  401fb2:	883a      	ldrh	r2, [r7, #0]
  401fb4:	4c16      	ldr	r4, [pc, #88]	; (402010 <ili9488_init+0x138>)
  401fb6:	47a0      	blx	r4
  401fb8:	8938      	ldrh	r0, [r7, #8]
  401fba:	2200      	movs	r2, #0
	ili9488_set_foreground_color(p_opt->foreground_color);
  401fbc:	4b15      	ldr	r3, [pc, #84]	; (402014 <ili9488_init+0x13c>)
  401fbe:	f360 020f 	bfi	r2, r0, #0, #16
  401fc2:	f503 7120 	add.w	r1, r3, #640	; 0x280
  401fc6:	f360 421f 	bfi	r2, r0, #16, #16
		g_ul_pixel_cache[i] = ul_color;
  401fca:	f843 2b04 	str.w	r2, [r3], #4
  401fce:	428b      	cmp	r3, r1
  401fd0:	d1fb      	bne.n	401fca <ili9488_init+0xf2>
	ili9488_set_cursor_position(0, 0);
  401fd2:	2100      	movs	r1, #0
  401fd4:	4b10      	ldr	r3, [pc, #64]	; (402018 <ili9488_init+0x140>)
  401fd6:	4608      	mov	r0, r1
  401fd8:	4798      	blx	r3
}
  401fda:	2000      	movs	r0, #0
  401fdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401fe0:	00403101 	.word	0x00403101
  401fe4:	00402971 	.word	0x00402971
  401fe8:	40080000 	.word	0x40080000
  401fec:	00402149 	.word	0x00402149
  401ff0:	0a0a0403 	.word	0x0a0a0403
  401ff4:	00402151 	.word	0x00402151
  401ff8:	000a0004 	.word	0x000a0004
  401ffc:	00402159 	.word	0x00402159
  402000:	000f1003 	.word	0x000f1003
  402004:	00402161 	.word	0x00402161
  402008:	400e1200 	.word	0x400e1200
  40200c:	0040296d 	.word	0x0040296d
  402010:	00401d65 	.word	0x00401d65
  402014:	204292b4 	.word	0x204292b4
  402018:	00401e41 	.word	0x00401e41

0040201c <ili9488_write_brightness>:
 * Configures the display for a given brightness value
 *
 * \param us_value brightness value need to written.
 */
void ili9488_write_brightness(uint16_t us_value)
{
  40201c:	b570      	push	{r4, r5, r6, lr}
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  40201e:	4d09      	ldr	r5, [pc, #36]	; (402044 <ili9488_write_brightness+0x28>)
{
  402020:	4606      	mov	r6, r0
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  402022:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402026:	4b08      	ldr	r3, [pc, #32]	; (402048 <ili9488_write_brightness+0x2c>)
  402028:	4628      	mov	r0, r5
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  40202a:	f04f 44c6 	mov.w	r4, #1660944384	; 0x63000000
  40202e:	4798      	blx	r3
  402030:	2351      	movs	r3, #81	; 0x51
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  402032:	4628      	mov	r0, r5
  402034:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402038:	8023      	strh	r3, [r4, #0]
  40203a:	4b04      	ldr	r3, [pc, #16]	; (40204c <ili9488_write_brightness+0x30>)
  40203c:	4798      	blx	r3
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  40203e:	8026      	strh	r6, [r4, #0]
  402040:	bd70      	pop	{r4, r5, r6, pc}
  402042:	bf00      	nop
  402044:	400e1200 	.word	0x400e1200
  402048:	00402971 	.word	0x00402971
  40204c:	0040296d 	.word	0x0040296d

00402050 <ili9488_set_limits>:
 * \param end_x The x coordinate of the bottom right corner
 * \param end_y The y coordinate of the bottom right corner
 */
void ili9488_set_limits(ili9488_coord_t start_x, ili9488_coord_t start_y,
		ili9488_coord_t end_x, ili9488_coord_t end_y)
{
  402050:	b4f0      	push	{r4, r5, r6, r7}
	limit_start_x = start_x;
  402052:	4f05      	ldr	r7, [pc, #20]	; (402068 <ili9488_set_limits+0x18>)
	limit_start_y = start_y;
  402054:	4e05      	ldr	r6, [pc, #20]	; (40206c <ili9488_set_limits+0x1c>)
	limit_end_x = end_x;
  402056:	4d06      	ldr	r5, [pc, #24]	; (402070 <ili9488_set_limits+0x20>)
	limit_end_y = end_y;
  402058:	4c06      	ldr	r4, [pc, #24]	; (402074 <ili9488_set_limits+0x24>)
	limit_start_x = start_x;
  40205a:	8038      	strh	r0, [r7, #0]
	limit_start_y = start_y;
  40205c:	8031      	strh	r1, [r6, #0]
	limit_end_x = end_x;
  40205e:	802a      	strh	r2, [r5, #0]
	limit_end_y = end_y;
  402060:	8023      	strh	r3, [r4, #0]
}
  402062:	bcf0      	pop	{r4, r5, r6, r7}
  402064:	4770      	bx	lr
  402066:	bf00      	nop
  402068:	20429538 	.word	0x20429538
  40206c:	2042953a 	.word	0x2042953a
  402070:	20429534 	.word	0x20429534
  402074:	20429536 	.word	0x20429536

00402078 <ili9488_set_orientation>:
 *
 * \param flags Orientation flags to use, see \ref ILI9488_FLIP_X, \ref ILI9488_FLIP_Y
 *        and \ref ILI9488_SWITCH_XY.
 */
void ili9488_set_orientation(uint8_t flags)
{
  402078:	b538      	push	{r3, r4, r5, lr}
	/* Flip X/Y and reverse X orientation and set BGR mode*/
	ili9488_color_t madctl = 0x68;

	if (flags & ILI9488_FLIP_X) {
  40207a:	f000 0301 	and.w	r3, r0, #1
  40207e:	2b00      	cmp	r3, #0
  402080:	bf0b      	itete	eq
  402082:	2448      	moveq	r4, #72	; 0x48
  402084:	2408      	movne	r4, #8
  402086:	21c8      	moveq	r1, #200	; 0xc8
  402088:	2188      	movne	r1, #136	; 0x88
  40208a:	bf0b      	itete	eq
  40208c:	22e8      	moveq	r2, #232	; 0xe8
  40208e:	22a8      	movne	r2, #168	; 0xa8
  402090:	2368      	moveq	r3, #104	; 0x68
  402092:	2328      	movne	r3, #40	; 0x28
		madctl &= ~(1 << 6);
	}

	if (flags & ILI9488_FLIP_Y) {
  402094:	0785      	lsls	r5, r0, #30
  402096:	d501      	bpl.n	40209c <ili9488_set_orientation+0x24>
  402098:	460c      	mov	r4, r1
		madctl |= 1 << 7;
  40209a:	4613      	mov	r3, r2
	}

	if (flags & ILI9488_SWITCH_XY) {
  40209c:	f010 0f04 	tst.w	r0, #4
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  4020a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4020a4:	4807      	ldr	r0, [pc, #28]	; (4020c4 <ili9488_set_orientation+0x4c>)
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  4020a6:	f04f 45c6 	mov.w	r5, #1660944384	; 0x63000000
  4020aa:	4a07      	ldr	r2, [pc, #28]	; (4020c8 <ili9488_set_orientation+0x50>)
	if (flags & ILI9488_SWITCH_XY) {
  4020ac:	bf08      	it	eq
  4020ae:	461c      	moveq	r4, r3
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  4020b0:	4790      	blx	r2
  4020b2:	2336      	movs	r3, #54	; 0x36
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  4020b4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4020b8:	4802      	ldr	r0, [pc, #8]	; (4020c4 <ili9488_set_orientation+0x4c>)
  4020ba:	802b      	strh	r3, [r5, #0]
  4020bc:	4b03      	ldr	r3, [pc, #12]	; (4020cc <ili9488_set_orientation+0x54>)
  4020be:	4798      	blx	r3
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  4020c0:	802c      	strh	r4, [r5, #0]
  4020c2:	bd38      	pop	{r3, r4, r5, pc}
  4020c4:	400e1200 	.word	0x400e1200
  4020c8:	00402971 	.word	0x00402971
  4020cc:	0040296d 	.word	0x0040296d

004020d0 <ili9488_duplicate_pixel>:
 * \param color The color to write to the display
 * \param count The number of pixels to write with this color
 */
void ili9488_duplicate_pixel(const uint16_t color, uint32_t count)
{
	ili9488_set_window(limit_start_x, limit_start_y, (limit_end_x - limit_start_x) + 1, (limit_end_y - limit_start_y) + 1);
  4020d0:	4b15      	ldr	r3, [pc, #84]	; (402128 <ili9488_duplicate_pixel+0x58>)
  4020d2:	4a16      	ldr	r2, [pc, #88]	; (40212c <ili9488_duplicate_pixel+0x5c>)
{
  4020d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4020d8:	4606      	mov	r6, r0
	ili9488_set_window(limit_start_x, limit_start_y, (limit_end_x - limit_start_x) + 1, (limit_end_y - limit_start_y) + 1);
  4020da:	881b      	ldrh	r3, [r3, #0]
  4020dc:	8812      	ldrh	r2, [r2, #0]
{
  4020de:	460f      	mov	r7, r1
	ili9488_set_window(limit_start_x, limit_start_y, (limit_end_x - limit_start_x) + 1, (limit_end_y - limit_start_y) + 1);
  4020e0:	4813      	ldr	r0, [pc, #76]	; (402130 <ili9488_duplicate_pixel+0x60>)
  4020e2:	3301      	adds	r3, #1
  4020e4:	4913      	ldr	r1, [pc, #76]	; (402134 <ili9488_duplicate_pixel+0x64>)
  4020e6:	3201      	adds	r2, #1
  4020e8:	8800      	ldrh	r0, [r0, #0]
  4020ea:	8809      	ldrh	r1, [r1, #0]
  4020ec:	1a12      	subs	r2, r2, r0
  4020ee:	4d12      	ldr	r5, [pc, #72]	; (402138 <ili9488_duplicate_pixel+0x68>)
  4020f0:	1a5b      	subs	r3, r3, r1
  4020f2:	b292      	uxth	r2, r2
  4020f4:	b29b      	uxth	r3, r3
  4020f6:	47a8      	blx	r5
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  4020f8:	4b10      	ldr	r3, [pc, #64]	; (40213c <ili9488_duplicate_pixel+0x6c>)
  4020fa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4020fe:	4810      	ldr	r0, [pc, #64]	; (402140 <ili9488_duplicate_pixel+0x70>)
  402100:	4798      	blx	r3
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  402102:	f04f 45c6 	mov.w	r5, #1660944384	; 0x63000000
  402106:	232c      	movs	r3, #44	; 0x2c
  402108:	802b      	strh	r3, [r5, #0]
	ili9488_write_ram_prepare();

#ifdef ILI9488_EBIMODE
	while (count--) {
  40210a:	b15f      	cbz	r7, 402124 <ili9488_duplicate_pixel+0x54>
  40210c:	1e7c      	subs	r4, r7, #1
  40210e:	f8df 8034 	ldr.w	r8, [pc, #52]	; 402144 <ili9488_duplicate_pixel+0x74>
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  402112:	4f0b      	ldr	r7, [pc, #44]	; (402140 <ili9488_duplicate_pixel+0x70>)
	while (count--) {
  402114:	3c01      	subs	r4, #1
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  402116:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40211a:	4638      	mov	r0, r7
  40211c:	47c0      	blx	r8
	while (count--) {
  40211e:	1c63      	adds	r3, r4, #1
		*(volatile uint16_t *)(BOARD_ILI9488_ADDR) = lcd_data;
  402120:	802e      	strh	r6, [r5, #0]
  402122:	d1f7      	bne.n	402114 <ili9488_duplicate_pixel+0x44>
  402124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402128:	20429536 	.word	0x20429536
  40212c:	20429534 	.word	0x20429534
  402130:	20429538 	.word	0x20429538
  402134:	2042953a 	.word	0x2042953a
  402138:	00401d65 	.word	0x00401d65
  40213c:	00402971 	.word	0x00402971
  402140:	400e1200 	.word	0x400e1200
  402144:	0040296d 	.word	0x0040296d

00402148 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
  402148:	0109      	lsls	r1, r1, #4
  40214a:	5042      	str	r2, [r0, r1]
  40214c:	4770      	bx	lr
  40214e:	bf00      	nop

00402150 <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
  402150:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  402154:	604a      	str	r2, [r1, #4]
  402156:	4770      	bx	lr

00402158 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
  402158:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  40215c:	608a      	str	r2, [r1, #8]
  40215e:	4770      	bx	lr

00402160 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
  402160:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  402164:	60ca      	str	r2, [r1, #12]
  402166:	4770      	bx	lr

00402168 <ssc_reset>:
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_reset(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_SWRST;
	p_ssc->SSC_CMR = 0;
  402168:	2300      	movs	r3, #0
	p_ssc->SSC_CR = SSC_CR_SWRST;
  40216a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40216e:	6002      	str	r2, [r0, #0]
	p_ssc->SSC_CMR = 0;
  402170:	6043      	str	r3, [r0, #4]
	p_ssc->SSC_RCMR = 0;
  402172:	6103      	str	r3, [r0, #16]
	p_ssc->SSC_RFMR = 0;
  402174:	6143      	str	r3, [r0, #20]
	p_ssc->SSC_TCMR = 0;
  402176:	6183      	str	r3, [r0, #24]
	p_ssc->SSC_TFMR = 0;
  402178:	61c3      	str	r3, [r0, #28]
  40217a:	4770      	bx	lr

0040217c <ssc_enable_rx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_rx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_RXEN;
  40217c:	2301      	movs	r3, #1
  40217e:	6003      	str	r3, [r0, #0]
  402180:	4770      	bx	lr
  402182:	bf00      	nop

00402184 <ssc_disable_rx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_disable_rx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_RXDIS;
  402184:	2302      	movs	r3, #2
  402186:	6003      	str	r3, [r0, #0]
  402188:	4770      	bx	lr
  40218a:	bf00      	nop

0040218c <ssc_enable_tx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_tx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_TXEN;
  40218c:	f44f 7380 	mov.w	r3, #256	; 0x100
  402190:	6003      	str	r3, [r0, #0]
  402192:	4770      	bx	lr

00402194 <ssc_disable_tx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_disable_tx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_TXDIS;
  402194:	f44f 7300 	mov.w	r3, #512	; 0x200
  402198:	6003      	str	r3, [r0, #0]
  40219a:	4770      	bx	lr

0040219c <ssc_set_receiver>:
 * \param p_rx_clk_opt Pointer to the receiver clock configuration structure.
 * \param p_rx_data_frame Pointer to the receiver data frame configuration structure.
 */
void ssc_set_receiver(Ssc *p_ssc, clock_opt_t *p_rx_clk_opt,
		data_frame_opt_t *p_rx_data_frame)
{
  40219c:	b4f0      	push	{r4, r5, r6, r7}
	if (p_rx_clk_opt == NULL) {
  40219e:	2900      	cmp	r1, #0
  4021a0:	d02f      	beq.n	402202 <ssc_set_receiver+0x66>
		p_ssc->SSC_RCMR = 0;
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  4021a2:	6904      	ldr	r4, [r0, #16]
  4021a4:	68cf      	ldr	r7, [r1, #12]
  4021a6:	698e      	ldr	r6, [r1, #24]
  4021a8:	e891 0028 	ldmia.w	r1, {r3, r5}
  4021ac:	432b      	orrs	r3, r5
  4021ae:	688d      	ldr	r5, [r1, #8]
  4021b0:	4323      	orrs	r3, r4
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
				p_rx_clk_opt->ul_ckg |
				p_rx_clk_opt->ul_start_sel |
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  4021b2:	694c      	ldr	r4, [r1, #20]
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  4021b4:	432b      	orrs	r3, r5
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
  4021b6:	690d      	ldr	r5, [r1, #16]
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  4021b8:	0421      	lsls	r1, r4, #16
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  4021ba:	433b      	orrs	r3, r7
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  4021bc:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  4021c0:	4333      	orrs	r3, r6
  4021c2:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  4021c6:	430b      	orrs	r3, r1
  4021c8:	6103      	str	r3, [r0, #16]
	}

	if (p_rx_data_frame == NULL) {
  4021ca:	b1ea      	cbz	r2, 402208 <ssc_set_receiver+0x6c>
		p_ssc->SSC_RFMR = 0;
	} else {
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  4021cc:	6954      	ldr	r4, [r2, #20]
  4021ce:	6853      	ldr	r3, [r2, #4]
  4021d0:	6991      	ldr	r1, [r2, #24]
  4021d2:	4323      	orrs	r3, r4
  4021d4:	6946      	ldr	r6, [r0, #20]
  4021d6:	6814      	ldr	r4, [r2, #0]
  4021d8:	430b      	orrs	r3, r1
				p_rx_data_frame->ul_msbf |
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  4021da:	6891      	ldr	r1, [r2, #8]
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  4021dc:	f004 041f 	and.w	r4, r4, #31
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
  4021e0:	6915      	ldr	r5, [r2, #16]
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  4021e2:	4333      	orrs	r3, r6
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  4021e4:	68d2      	ldr	r2, [r2, #12]
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  4021e6:	0209      	lsls	r1, r1, #8
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  4021e8:	4323      	orrs	r3, r4
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  4021ea:	0412      	lsls	r2, r2, #16
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  4021ec:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  4021f0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  4021f4:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  4021f8:	430b      	orrs	r3, r1
  4021fa:	4313      	orrs	r3, r2
				p_rx_data_frame->ul_fsos |
				p_rx_data_frame->ul_fsedge;
	}
}
  4021fc:	bcf0      	pop	{r4, r5, r6, r7}
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  4021fe:	6143      	str	r3, [r0, #20]
}
  402200:	4770      	bx	lr
		p_ssc->SSC_RCMR = 0;
  402202:	6101      	str	r1, [r0, #16]
	if (p_rx_data_frame == NULL) {
  402204:	2a00      	cmp	r2, #0
  402206:	d1e1      	bne.n	4021cc <ssc_set_receiver+0x30>
		p_ssc->SSC_RFMR = 0;
  402208:	6142      	str	r2, [r0, #20]
}
  40220a:	bcf0      	pop	{r4, r5, r6, r7}
  40220c:	4770      	bx	lr
  40220e:	bf00      	nop

00402210 <ssc_set_transmitter>:
 * \param p_tx_clk_opt Pointer to the transmitter clock configuration structure.
 * \param p_tx_data_frame Pointer to the transmitter data frame configuration structure.
 */
void ssc_set_transmitter(Ssc *p_ssc, clock_opt_t *p_tx_clk_opt,
		data_frame_opt_t *p_tx_data_frame)
{
  402210:	b4f0      	push	{r4, r5, r6, r7}
	if (p_tx_clk_opt == NULL) {
  402212:	2900      	cmp	r1, #0
  402214:	d02f      	beq.n	402276 <ssc_set_transmitter+0x66>
		p_ssc->SSC_TCMR = 0;
	} else {
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  402216:	6984      	ldr	r4, [r0, #24]
  402218:	68cf      	ldr	r7, [r1, #12]
  40221a:	698e      	ldr	r6, [r1, #24]
  40221c:	e891 0028 	ldmia.w	r1, {r3, r5}
  402220:	432b      	orrs	r3, r5
  402222:	688d      	ldr	r5, [r1, #8]
  402224:	4323      	orrs	r3, r4
				p_tx_clk_opt->ul_cko | p_tx_clk_opt->ul_cki |
				p_tx_clk_opt->ul_ckg |
				p_tx_clk_opt->ul_start_sel |
				SSC_TCMR_PERIOD(p_tx_clk_opt->ul_period) |
				SSC_TCMR_STTDLY(p_tx_clk_opt->ul_sttdly);
  402226:	694c      	ldr	r4, [r1, #20]
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  402228:	432b      	orrs	r3, r5
				SSC_TCMR_PERIOD(p_tx_clk_opt->ul_period) |
  40222a:	690d      	ldr	r5, [r1, #16]
				SSC_TCMR_STTDLY(p_tx_clk_opt->ul_sttdly);
  40222c:	0421      	lsls	r1, r4, #16
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  40222e:	433b      	orrs	r3, r7
				SSC_TCMR_STTDLY(p_tx_clk_opt->ul_sttdly);
  402230:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  402234:	4333      	orrs	r3, r6
  402236:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  40223a:	430b      	orrs	r3, r1
  40223c:	6183      	str	r3, [r0, #24]
	}

	if (p_tx_data_frame == NULL) {
  40223e:	b1ea      	cbz	r2, 40227c <ssc_set_transmitter+0x6c>
		p_ssc->SSC_TFMR = 0;
	} else {
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  402240:	6954      	ldr	r4, [r2, #20]
  402242:	6853      	ldr	r3, [r2, #4]
  402244:	6991      	ldr	r1, [r2, #24]
  402246:	4323      	orrs	r3, r4
  402248:	69c6      	ldr	r6, [r0, #28]
  40224a:	6814      	ldr	r4, [r2, #0]
  40224c:	430b      	orrs	r3, r1
				p_tx_data_frame->ul_msbf |
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
  40224e:	6891      	ldr	r1, [r2, #8]
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  402250:	f004 041f 	and.w	r4, r4, #31
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
				SSC_TFMR_FSLEN_EXT(p_tx_data_frame->ul_fslen_ext) |
  402254:	6915      	ldr	r5, [r2, #16]
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  402256:	4333      	orrs	r3, r6
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
  402258:	68d2      	ldr	r2, [r2, #12]
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
  40225a:	0209      	lsls	r1, r1, #8
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  40225c:	4323      	orrs	r3, r4
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
  40225e:	0412      	lsls	r2, r2, #16
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
  402260:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  402264:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
  402268:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  40226c:	430b      	orrs	r3, r1
  40226e:	4313      	orrs	r3, r2
				p_tx_data_frame->ul_fsos |
				p_tx_data_frame->ul_fsedge;
	}
}
  402270:	bcf0      	pop	{r4, r5, r6, r7}
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  402272:	61c3      	str	r3, [r0, #28]
}
  402274:	4770      	bx	lr
		p_ssc->SSC_TCMR = 0;
  402276:	6181      	str	r1, [r0, #24]
	if (p_tx_data_frame == NULL) {
  402278:	2a00      	cmp	r2, #0
  40227a:	d1e1      	bne.n	402240 <ssc_set_transmitter+0x30>
		p_ssc->SSC_TFMR = 0;
  40227c:	61c2      	str	r2, [r0, #28]
}
  40227e:	bcf0      	pop	{r4, r5, r6, r7}
  402280:	4770      	bx	lr
  402282:	bf00      	nop

00402284 <ssc_disable_interrupt>:
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void ssc_disable_interrupt(Ssc *p_ssc, uint32_t ul_sources)
{
	p_ssc->SSC_IDR = ul_sources;
  402284:	6481      	str	r1, [r0, #72]	; 0x48
  402286:	4770      	bx	lr

00402288 <twihs_master_init>:
 * \param p_opt Options for initializing the TWIHS module (see \ref twihs_options_t).
 *
 * \return TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twihs_master_init(Twihs *p_twihs, const twihs_options_t *p_opt)
{
  402288:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t status = TWIHS_SUCCESS;

	/* Disable TWIHS interrupts */
	p_twihs->TWIHS_IDR = ~0UL;
  40228a:	f04f 33ff 	mov.w	r3, #4294967295
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  40228e:	2680      	movs	r6, #128	; 0x80
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  402290:	2204      	movs	r2, #4
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  402292:	2508      	movs	r5, #8
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  402294:	2420      	movs	r4, #32
	p_twihs->TWIHS_IDR = ~0UL;
  402296:	6283      	str	r3, [r0, #40]	; 0x28
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  402298:	4b2f      	ldr	r3, [pc, #188]	; (402358 <twihs_master_init+0xd0>)
	p_twihs->TWIHS_SR;
  40229a:	6a07      	ldr	r7, [r0, #32]
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  40229c:	6006      	str	r6, [r0, #0]
	p_twihs->TWIHS_RHR;
  40229e:	6b06      	ldr	r6, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  4022a0:	6005      	str	r5, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  4022a2:	6004      	str	r4, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  4022a4:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  4022a6:	684a      	ldr	r2, [r1, #4]
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4022a8:	429a      	cmp	r2, r3
  4022aa:	d84d      	bhi.n	402348 <twihs_master_init+0xc0>
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4022ac:	4c2b      	ldr	r4, [pc, #172]	; (40235c <twihs_master_init+0xd4>)
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  4022ae:	680b      	ldr	r3, [r1, #0]
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4022b0:	42a2      	cmp	r2, r4
  4022b2:	d92e      	bls.n	402312 <twihs_master_init+0x8a>
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4022b4:	4c2a      	ldr	r4, [pc, #168]	; (402360 <twihs_master_init+0xd8>)
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4022b6:	492b      	ldr	r1, [pc, #172]	; (402364 <twihs_master_init+0xdc>)
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4022b8:	4414      	add	r4, r2
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4022ba:	fba1 2103 	umull	r2, r1, r1, r3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4022be:	00a4      	lsls	r4, r4, #2
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4022c0:	0b89      	lsrs	r1, r1, #14
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4022c2:	fbb3 f3f4 	udiv	r3, r3, r4
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4022c6:	3903      	subs	r1, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4022c8:	3b03      	subs	r3, #3
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4022ca:	29ff      	cmp	r1, #255	; 0xff
  4022cc:	d940      	bls.n	402350 <twihs_master_init+0xc8>
  4022ce:	2200      	movs	r2, #0
  4022d0:	e000      	b.n	4022d4 <twihs_master_init+0x4c>
  4022d2:	b13c      	cbz	r4, 4022e4 <twihs_master_init+0x5c>
			ckdiv++;
  4022d4:	3201      	adds	r2, #1
			cldiv /= TWIHS_CLK_DIVIDER;
  4022d6:	0849      	lsrs	r1, r1, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4022d8:	2a06      	cmp	r2, #6
  4022da:	bf8c      	ite	hi
  4022dc:	2400      	movhi	r4, #0
  4022de:	2401      	movls	r4, #1
  4022e0:	29ff      	cmp	r1, #255	; 0xff
  4022e2:	d8f6      	bhi.n	4022d2 <twihs_master_init+0x4a>
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4022e4:	2bff      	cmp	r3, #255	; 0xff
  4022e6:	d907      	bls.n	4022f8 <twihs_master_init+0x70>
  4022e8:	b914      	cbnz	r4, 4022f0 <twihs_master_init+0x68>
  4022ea:	e005      	b.n	4022f8 <twihs_master_init+0x70>
  4022ec:	2a06      	cmp	r2, #6
  4022ee:	d803      	bhi.n	4022f8 <twihs_master_init+0x70>
			chdiv /= TWIHS_CLK_DIVIDER;
  4022f0:	085b      	lsrs	r3, r3, #1
			ckdiv++;
  4022f2:	3201      	adds	r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4022f4:	2bff      	cmp	r3, #255	; 0xff
  4022f6:	d8f9      	bhi.n	4022ec <twihs_master_init+0x64>
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  4022f8:	021b      	lsls	r3, r3, #8
	uint32_t status = TWIHS_SUCCESS;
  4022fa:	2400      	movs	r4, #0
				TWIHS_CWGR_CKDIV(ckdiv);
  4022fc:	0412      	lsls	r2, r2, #16
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  4022fe:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  402300:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  402304:	b2c9      	uxtb	r1, r1
  402306:	4313      	orrs	r3, r2
  402308:	430b      	orrs	r3, r1
		p_twihs->TWIHS_CWGR =
  40230a:	6103      	str	r3, [r0, #16]
}
  40230c:	4620      	mov	r0, r4
  40230e:	bcf0      	pop	{r4, r5, r6, r7}
  402310:	4770      	bx	lr
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  402312:	0052      	lsls	r2, r2, #1
  402314:	fbb3 f3f2 	udiv	r3, r3, r2
  402318:	3b03      	subs	r3, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40231a:	2200      	movs	r2, #0
  40231c:	2bff      	cmp	r3, #255	; 0xff
  40231e:	d802      	bhi.n	402326 <twihs_master_init+0x9e>
  402320:	e008      	b.n	402334 <twihs_master_init+0xac>
  402322:	2a06      	cmp	r2, #6
  402324:	d803      	bhi.n	40232e <twihs_master_init+0xa6>
			c_lh_div /= TWIHS_CLK_DIVIDER;
  402326:	085b      	lsrs	r3, r3, #1
			ckdiv++;
  402328:	3201      	adds	r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40232a:	2bff      	cmp	r3, #255	; 0xff
  40232c:	d8f9      	bhi.n	402322 <twihs_master_init+0x9a>
  40232e:	0412      	lsls	r2, r2, #16
  402330:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  402334:	0219      	lsls	r1, r3, #8
	uint32_t status = TWIHS_SUCCESS;
  402336:	2400      	movs	r4, #0
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  402338:	b2db      	uxtb	r3, r3
  40233a:	b289      	uxth	r1, r1
  40233c:	4313      	orrs	r3, r2
  40233e:	430b      	orrs	r3, r1
		p_twihs->TWIHS_CWGR =
  402340:	6103      	str	r3, [r0, #16]
}
  402342:	4620      	mov	r0, r4
  402344:	bcf0      	pop	{r4, r5, r6, r7}
  402346:	4770      	bx	lr
		status = TWIHS_INVALID_ARGUMENT;
  402348:	2401      	movs	r4, #1
}
  40234a:	4620      	mov	r0, r4
  40234c:	bcf0      	pop	{r4, r5, r6, r7}
  40234e:	4770      	bx	lr
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  402350:	2401      	movs	r4, #1
	uint32_t ckdiv = 0;
  402352:	2200      	movs	r2, #0
  402354:	e7c6      	b.n	4022e4 <twihs_master_init+0x5c>
  402356:	bf00      	nop
  402358:	00061a80 	.word	0x00061a80
  40235c:	0005dc00 	.word	0x0005dc00
  402360:	3ffd1200 	.word	0x3ffd1200
  402364:	057619f1 	.word	0x057619f1

00402368 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  402368:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  40236a:	2a00      	cmp	r2, #0
  40236c:	d053      	beq.n	402416 <twihs_master_read+0xae>
{
  40236e:	b470      	push	{r4, r5, r6}
	p_twihs->TWIHS_MMR = 0;
  402370:	2600      	movs	r6, #0
	uint8_t *buffer = p_packet->buffer;
  402372:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  402374:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  402376:	684b      	ldr	r3, [r1, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  402378:	7c0d      	ldrb	r5, [r1, #16]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40237a:	021b      	lsls	r3, r3, #8
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  40237c:	042d      	lsls	r5, r5, #16
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40237e:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  402382:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  402386:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  40238a:	432b      	orrs	r3, r5
  40238c:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  40238e:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  402390:	684b      	ldr	r3, [r1, #4]
	if (len == 0)
  402392:	b99b      	cbnz	r3, 4023bc <twihs_master_read+0x54>
		return 0;
  402394:	461d      	mov	r5, r3
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  402396:	2301      	movs	r3, #1
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  402398:	60c5      	str	r5, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  40239a:	6003      	str	r3, [r0, #0]
		status = p_twihs->TWIHS_SR;
  40239c:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40239e:	05d9      	lsls	r1, r3, #23
  4023a0:	d41f      	bmi.n	4023e2 <twihs_master_read+0x7a>
  4023a2:	2a01      	cmp	r2, #1
  4023a4:	d020      	beq.n	4023e8 <twihs_master_read+0x80>
  4023a6:	f247 5130 	movw	r1, #30000	; 0x7530
		if (!(status & TWIHS_SR_RXRDY)) {
  4023aa:	079e      	lsls	r6, r3, #30
  4023ac:	d412      	bmi.n	4023d4 <twihs_master_read+0x6c>
		status = p_twihs->TWIHS_SR;
  4023ae:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4023b0:	05dd      	lsls	r5, r3, #23
  4023b2:	d416      	bmi.n	4023e2 <twihs_master_read+0x7a>
		if (!timeout--) {
  4023b4:	3901      	subs	r1, #1
  4023b6:	d1f8      	bne.n	4023aa <twihs_master_read+0x42>
			return TWIHS_ERROR_TIMEOUT;
  4023b8:	2009      	movs	r0, #9
  4023ba:	e02a      	b.n	402412 <twihs_master_read+0xaa>
	if (len > 1) {
  4023bc:	2b01      	cmp	r3, #1
	val = addr[0];
  4023be:	780d      	ldrb	r5, [r1, #0]
	if (len > 1) {
  4023c0:	dde9      	ble.n	402396 <twihs_master_read+0x2e>
		val |= addr[1];
  4023c2:	784e      	ldrb	r6, [r1, #1]
	if (len > 2) {
  4023c4:	2b02      	cmp	r3, #2
		val |= addr[1];
  4023c6:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
	if (len > 2) {
  4023ca:	d0e4      	beq.n	402396 <twihs_master_read+0x2e>
		val |= addr[2];
  4023cc:	788b      	ldrb	r3, [r1, #2]
  4023ce:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
  4023d2:	e7e0      	b.n	402396 <twihs_master_read+0x2e>
		*buffer++ = p_twihs->TWIHS_RHR;
  4023d4:	6b03      	ldr	r3, [r0, #48]	; 0x30
		cnt--;
  4023d6:	3a01      	subs	r2, #1
		*buffer++ = p_twihs->TWIHS_RHR;
  4023d8:	f804 3b01 	strb.w	r3, [r4], #1
		status = p_twihs->TWIHS_SR;
  4023dc:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4023de:	05d9      	lsls	r1, r3, #23
  4023e0:	d5df      	bpl.n	4023a2 <twihs_master_read+0x3a>
			return TWIHS_RECEIVE_NACK;
  4023e2:	2005      	movs	r0, #5
}
  4023e4:	bc70      	pop	{r4, r5, r6}
  4023e6:	4770      	bx	lr
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4023e8:	2102      	movs	r1, #2
		if (!(status & TWIHS_SR_RXRDY)) {
  4023ea:	079d      	lsls	r5, r3, #30
		if (status & TWIHS_SR_NACK) {
  4023ec:	f247 5230 	movw	r2, #30000	; 0x7530
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4023f0:	6001      	str	r1, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  4023f2:	d407      	bmi.n	402404 <twihs_master_read+0x9c>
		status = p_twihs->TWIHS_SR;
  4023f4:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4023f6:	05de      	lsls	r6, r3, #23
  4023f8:	d4f3      	bmi.n	4023e2 <twihs_master_read+0x7a>
		if (!timeout--) {
  4023fa:	3a01      	subs	r2, #1
  4023fc:	d0dc      	beq.n	4023b8 <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  4023fe:	079d      	lsls	r5, r3, #30
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  402400:	6001      	str	r1, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  402402:	d5f7      	bpl.n	4023f4 <twihs_master_read+0x8c>
		*buffer++ = p_twihs->TWIHS_RHR;
  402404:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402406:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  402408:	6a03      	ldr	r3, [r0, #32]
  40240a:	07db      	lsls	r3, r3, #31
  40240c:	d5fc      	bpl.n	402408 <twihs_master_read+0xa0>
	p_twihs->TWIHS_SR;
  40240e:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  402410:	2000      	movs	r0, #0
}
  402412:	bc70      	pop	{r4, r5, r6}
  402414:	4770      	bx	lr
		return TWIHS_INVALID_ARGUMENT;
  402416:	2001      	movs	r0, #1
  402418:	4770      	bx	lr
  40241a:	bf00      	nop

0040241c <twihs_master_write>:
{
  40241c:	4603      	mov	r3, r0
	uint32_t status, cnt = p_packet->length;
  40241e:	68c8      	ldr	r0, [r1, #12]
	if (cnt == 0) {
  402420:	2800      	cmp	r0, #0
  402422:	d034      	beq.n	40248e <twihs_master_write+0x72>
{
  402424:	b470      	push	{r4, r5, r6}
	p_twihs->TWIHS_MMR = 0;
  402426:	2600      	movs	r6, #0
	uint8_t *buffer = p_packet->buffer;
  402428:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  40242a:	605e      	str	r6, [r3, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  40242c:	7c0a      	ldrb	r2, [r1, #16]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40242e:	684d      	ldr	r5, [r1, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  402430:	0412      	lsls	r2, r2, #16
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  402432:	022d      	lsls	r5, r5, #8
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  402434:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  402438:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  40243c:	432a      	orrs	r2, r5
  40243e:	605a      	str	r2, [r3, #4]
	p_twihs->TWIHS_IADR = 0;
  402440:	60de      	str	r6, [r3, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  402442:	684a      	ldr	r2, [r1, #4]
	if (len == 0)
  402444:	b98a      	cbnz	r2, 40246a <twihs_master_write+0x4e>
		return 0;
  402446:	4615      	mov	r5, r2
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  402448:	60dd      	str	r5, [r3, #12]
		status = p_twihs->TWIHS_SR;
  40244a:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWIHS_SR_NACK) {
  40244c:	05d6      	lsls	r6, r2, #23
  40244e:	d409      	bmi.n	402464 <twihs_master_write+0x48>
		if (!(status & TWIHS_SR_TXRDY)) {
  402450:	0755      	lsls	r5, r2, #29
  402452:	d5fa      	bpl.n	40244a <twihs_master_write+0x2e>
		p_twihs->TWIHS_THR = *buffer++;
  402454:	f814 2b01 	ldrb.w	r2, [r4], #1
	while (cnt > 0) {
  402458:	3801      	subs	r0, #1
		p_twihs->TWIHS_THR = *buffer++;
  40245a:	635a      	str	r2, [r3, #52]	; 0x34
	while (cnt > 0) {
  40245c:	d013      	beq.n	402486 <twihs_master_write+0x6a>
		status = p_twihs->TWIHS_SR;
  40245e:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWIHS_SR_NACK) {
  402460:	05d6      	lsls	r6, r2, #23
  402462:	d5f5      	bpl.n	402450 <twihs_master_write+0x34>
			return TWIHS_RECEIVE_NACK;
  402464:	2005      	movs	r0, #5
}
  402466:	bc70      	pop	{r4, r5, r6}
  402468:	4770      	bx	lr
	if (len > 1) {
  40246a:	2a01      	cmp	r2, #1
	val = addr[0];
  40246c:	780d      	ldrb	r5, [r1, #0]
	if (len > 1) {
  40246e:	ddeb      	ble.n	402448 <twihs_master_write+0x2c>
		val |= addr[1];
  402470:	784e      	ldrb	r6, [r1, #1]
	if (len > 2) {
  402472:	2a02      	cmp	r2, #2
		val |= addr[1];
  402474:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
	if (len > 2) {
  402478:	d0e6      	beq.n	402448 <twihs_master_write+0x2c>
		val |= addr[2];
  40247a:	788a      	ldrb	r2, [r1, #2]
  40247c:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
  402480:	e7e2      	b.n	402448 <twihs_master_write+0x2c>
		if (status & TWIHS_SR_TXRDY) {
  402482:	0751      	lsls	r1, r2, #29
  402484:	d405      	bmi.n	402492 <twihs_master_write+0x76>
		status = p_twihs->TWIHS_SR;
  402486:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWIHS_SR_NACK) {
  402488:	05d4      	lsls	r4, r2, #23
  40248a:	d4eb      	bmi.n	402464 <twihs_master_write+0x48>
  40248c:	e7f9      	b.n	402482 <twihs_master_write+0x66>
		return TWIHS_INVALID_ARGUMENT;
  40248e:	2001      	movs	r0, #1
  402490:	4770      	bx	lr
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  402492:	2202      	movs	r2, #2
  402494:	601a      	str	r2, [r3, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  402496:	6a1a      	ldr	r2, [r3, #32]
  402498:	07d2      	lsls	r2, r2, #31
  40249a:	d5fc      	bpl.n	402496 <twihs_master_write+0x7a>
}
  40249c:	bc70      	pop	{r4, r5, r6}
  40249e:	4770      	bx	lr

004024a0 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4024a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4024a2:	4603      	mov	r3, r0
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4024a4:	4c24      	ldr	r4, [pc, #144]	; (402538 <usart_init_rs232+0x98>)
	p_usart->US_MR = 0;
  4024a6:	2000      	movs	r0, #0
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4024a8:	f04f 0e88 	mov.w	lr, #136	; 0x88
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4024ac:	f8c3 40e4 	str.w	r4, [r3, #228]	; 0xe4
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4024b0:	2724      	movs	r7, #36	; 0x24
	p_usart->US_CR = US_CR_RSTSTA;
  4024b2:	f44f 7680 	mov.w	r6, #256	; 0x100
	p_usart->US_CR = US_CR_RTSDIS;
  4024b6:	f44f 2500 	mov.w	r5, #524288	; 0x80000
	ul_reg_val = 0;
  4024ba:	4c20      	ldr	r4, [pc, #128]	; (40253c <usart_init_rs232+0x9c>)
	p_usart->US_MR = 0;
  4024bc:	6058      	str	r0, [r3, #4]
	ul_reg_val = 0;
  4024be:	6020      	str	r0, [r4, #0]
	p_usart->US_RTOR = 0;
  4024c0:	6258      	str	r0, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4024c2:	6298      	str	r0, [r3, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4024c4:	f8c3 e000 	str.w	lr, [r3]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4024c8:	601f      	str	r7, [r3, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  4024ca:	601e      	str	r6, [r3, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  4024cc:	601d      	str	r5, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4024ce:	b361      	cbz	r1, 40252a <usart_init_rs232+0x8a>
  4024d0:	6808      	ldr	r0, [r1, #0]
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4024d2:	0105      	lsls	r5, r0, #4
  4024d4:	42aa      	cmp	r2, r5
  4024d6:	d31c      	bcc.n	402512 <usart_init_rs232+0x72>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4024d8:	0868      	lsrs	r0, r5, #1
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4024da:	f64f 76fe 	movw	r6, #65534	; 0xfffe
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4024de:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
  4024e2:	fbb2 f2f5 	udiv	r2, r2, r5
	cd = cd_fp >> 3;
  4024e6:	08d5      	lsrs	r5, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4024e8:	1e68      	subs	r0, r5, #1
  4024ea:	42b0      	cmp	r0, r6
  4024ec:	d81d      	bhi.n	40252a <usart_init_rs232+0x8a>
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4024ee:	0412      	lsls	r2, r2, #16
	p_usart->US_MR |= ul_reg_val;
  4024f0:	2000      	movs	r0, #0
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4024f2:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4024f6:	432a      	orrs	r2, r5
  4024f8:	621a      	str	r2, [r3, #32]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4024fa:	684d      	ldr	r5, [r1, #4]
  4024fc:	688a      	ldr	r2, [r1, #8]
  4024fe:	690f      	ldr	r7, [r1, #16]
  402500:	432a      	orrs	r2, r5
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  402502:	68ce      	ldr	r6, [r1, #12]
	p_usart->US_MR |= ul_reg_val;
  402504:	6859      	ldr	r1, [r3, #4]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  402506:	433a      	orrs	r2, r7
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  402508:	4332      	orrs	r2, r6
	p_usart->US_MR |= ul_reg_val;
  40250a:	4311      	orrs	r1, r2
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40250c:	6022      	str	r2, [r4, #0]
	p_usart->US_MR |= ul_reg_val;
  40250e:	6059      	str	r1, [r3, #4]
  402510:	bdf0      	pop	{r4, r5, r6, r7, pc}
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  402512:	00c0      	lsls	r0, r0, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  402514:	f64f 76fe 	movw	r6, #65534	; 0xfffe
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  402518:	00d2      	lsls	r2, r2, #3
  40251a:	eb02 0250 	add.w	r2, r2, r0, lsr #1
  40251e:	fbb2 f2f0 	udiv	r2, r2, r0
	cd = cd_fp >> 3;
  402522:	08d5      	lsrs	r5, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  402524:	1e68      	subs	r0, r5, #1
  402526:	42b0      	cmp	r0, r6
  402528:	d901      	bls.n	40252e <usart_init_rs232+0x8e>
		return 1;
  40252a:	2001      	movs	r0, #1
  40252c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		p_usart->US_MR |= US_MR_OVER;
  40252e:	6858      	ldr	r0, [r3, #4]
  402530:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
  402534:	6058      	str	r0, [r3, #4]
  402536:	e7da      	b.n	4024ee <usart_init_rs232+0x4e>
  402538:	55534100 	.word	0x55534100
  40253c:	2042953c 	.word	0x2042953c

00402540 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  402540:	2340      	movs	r3, #64	; 0x40
  402542:	6003      	str	r3, [r0, #0]
  402544:	4770      	bx	lr
  402546:	bf00      	nop

00402548 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  402548:	2310      	movs	r3, #16
  40254a:	6003      	str	r3, [r0, #0]
  40254c:	4770      	bx	lr
  40254e:	bf00      	nop

00402550 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
  402550:	6081      	str	r1, [r0, #8]
  402552:	4770      	bx	lr

00402554 <usart_get_status>:
	return p_usart->US_CSR;
  402554:	6940      	ldr	r0, [r0, #20]
}
  402556:	4770      	bx	lr

00402558 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  402558:	6943      	ldr	r3, [r0, #20]
  40255a:	07db      	lsls	r3, r3, #31
  40255c:	d505      	bpl.n	40256a <usart_read+0x12>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40255e:	6983      	ldr	r3, [r0, #24]
	return 0;
  402560:	2000      	movs	r0, #0
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  402562:	f3c3 0308 	ubfx	r3, r3, #0, #9
  402566:	600b      	str	r3, [r1, #0]
	return 0;
  402568:	4770      	bx	lr
		return 1;
  40256a:	2001      	movs	r0, #1
}
  40256c:	4770      	bx	lr
  40256e:	bf00      	nop

00402570 <xdmac_configure_transfer>:
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  402570:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  402574:	6853      	ldr	r3, [r2, #4]
  402576:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  402578:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  40257a:	6893      	ldr	r3, [r2, #8]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  40257c:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  40257e:	6813      	ldr	r3, [r2, #0]
  402580:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  402584:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  402586:	6913      	ldr	r3, [r2, #16]
  402588:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40258c:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  40258e:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  402590:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  402592:	6993      	ldr	r3, [r2, #24]
  402594:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  402598:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  40259c:	69d3      	ldr	r3, [r2, #28]
  40259e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4025a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  4025a6:	68d3      	ldr	r3, [r2, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  4025a8:	678b      	str	r3, [r1, #120]	; 0x78
  4025aa:	4770      	bx	lr

004025ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4025ac:	b570      	push	{r4, r5, r6, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4025ae:	4810      	ldr	r0, [pc, #64]	; (4025f0 <sysclk_init+0x44>)
  4025b0:	4d10      	ldr	r5, [pc, #64]	; (4025f4 <sysclk_init+0x48>)
  4025b2:	47a8      	blx	r5
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4025b4:	213e      	movs	r1, #62	; 0x3e
  4025b6:	2000      	movs	r0, #0
  4025b8:	4b0f      	ldr	r3, [pc, #60]	; (4025f8 <sysclk_init+0x4c>)
  4025ba:	4c10      	ldr	r4, [pc, #64]	; (4025fc <sysclk_init+0x50>)
  4025bc:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4025be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4025c0:	2800      	cmp	r0, #0
  4025c2:	d0fc      	beq.n	4025be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4025c4:	4b0e      	ldr	r3, [pc, #56]	; (402600 <sysclk_init+0x54>)
  4025c6:	4798      	blx	r3
  4025c8:	4c0e      	ldr	r4, [pc, #56]	; (402604 <sysclk_init+0x58>)
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4025ca:	4b0f      	ldr	r3, [pc, #60]	; (402608 <sysclk_init+0x5c>)
  4025cc:	4a0f      	ldr	r2, [pc, #60]	; (40260c <sysclk_init+0x60>)
  4025ce:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4025d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4025d2:	2800      	cmp	r0, #0
  4025d4:	d0fc      	beq.n	4025d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4025d6:	2002      	movs	r0, #2
  4025d8:	4b0d      	ldr	r3, [pc, #52]	; (402610 <sysclk_init+0x64>)
  4025da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4025dc:	4b0d      	ldr	r3, [pc, #52]	; (402614 <sysclk_init+0x68>)
  4025de:	2000      	movs	r0, #0
  4025e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4025e2:	4b0d      	ldr	r3, [pc, #52]	; (402618 <sysclk_init+0x6c>)
  4025e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4025e6:	462b      	mov	r3, r5
  4025e8:	4801      	ldr	r0, [pc, #4]	; (4025f0 <sysclk_init+0x44>)

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4025ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	system_init_flash(sysclk_get_cpu_hz());
  4025ee:	4718      	bx	r3
  4025f0:	11e1a300 	.word	0x11e1a300
  4025f4:	0040336d 	.word	0x0040336d
  4025f8:	0040307d 	.word	0x0040307d
  4025fc:	004030d1 	.word	0x004030d1
  402600:	004030e1 	.word	0x004030e1
  402604:	004030f1 	.word	0x004030f1
  402608:	400e0600 	.word	0x400e0600
  40260c:	20183f01 	.word	0x20183f01
  402610:	00402ff9 	.word	0x00402ff9
  402614:	00403029 	.word	0x00403029
  402618:	00403285 	.word	0x00403285

0040261c <board_init>:

void board_init(void)
{
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40261c:	4ba4      	ldr	r3, [pc, #656]	; (4028b0 <board_init+0x294>)
  40261e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
{
  402622:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	WDT->WDT_MR = WDT_MR_WDDIS;
  402626:	605a      	str	r2, [r3, #4]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402628:	f3bf 8f5f 	dmb	sy
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  40262c:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 402924 <board_init+0x308>
	dw_region_attr =
  402630:	4fa0      	ldr	r7, [pc, #640]	; (4028b4 <board_init+0x298>)
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  402632:	4ea1      	ldr	r6, [pc, #644]	; (4028b8 <board_init+0x29c>)
  402634:	4640      	mov	r0, r8
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  402636:	4da1      	ldr	r5, [pc, #644]	; (4028bc <board_init+0x2a0>)
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  402638:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40263a:	ea40 0107 	orr.w	r1, r0, r7
  40263e:	2011      	movs	r0, #17
  402640:	47a8      	blx	r5
		mpu_cal_mpu_region_size(IFLASH_END_ADDRESS - IFLASH_START_ADDRESS) |
  402642:	489f      	ldr	r0, [pc, #636]	; (4028c0 <board_init+0x2a4>)
  402644:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  402646:	499f      	ldr	r1, [pc, #636]	; (4028c4 <board_init+0x2a8>)
	dw_region_attr =
  402648:	4c9f      	ldr	r4, [pc, #636]	; (4028c8 <board_init+0x2ac>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40264a:	4301      	orrs	r1, r0
  40264c:	489f      	ldr	r0, [pc, #636]	; (4028cc <board_init+0x2b0>)
  40264e:	47a8      	blx	r5
		mpu_cal_mpu_region_size(DTCM_END_ADDRESS - DTCM_START_ADDRESS) |
  402650:	4640      	mov	r0, r8
  402652:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  402654:	ea40 0107 	orr.w	r1, r0, r7
  402658:	489d      	ldr	r0, [pc, #628]	; (4028d0 <board_init+0x2b4>)
  40265a:	47a8      	blx	r5
		mpu_cal_mpu_region_size(SRAM_FIRST_END_ADDRESS - SRAM_FIRST_START_ADDRESS)
  40265c:	489d      	ldr	r0, [pc, #628]	; (4028d4 <board_init+0x2b8>)
  40265e:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  402660:	ea40 0104 	orr.w	r1, r0, r4
  402664:	489c      	ldr	r0, [pc, #624]	; (4028d8 <board_init+0x2bc>)
  402666:	47a8      	blx	r5
		mpu_cal_mpu_region_size(SRAM_SECOND_END_ADDRESS - SRAM_SECOND_START_ADDRESS) |
  402668:	489c      	ldr	r0, [pc, #624]	; (4028dc <board_init+0x2c0>)
  40266a:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40266c:	ea40 0104 	orr.w	r1, r0, r4
  402670:	489b      	ldr	r0, [pc, #620]	; (4028e0 <board_init+0x2c4>)
  402672:	47a8      	blx	r5
		mpu_cal_mpu_region_size(PERIPHERALS_END_ADDRESS - PERIPHERALS_START_ADDRESS)
  402674:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  402678:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40267a:	499a      	ldr	r1, [pc, #616]	; (4028e4 <board_init+0x2c8>)
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  40267c:	4c9a      	ldr	r4, [pc, #616]	; (4028e8 <board_init+0x2cc>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40267e:	4301      	orrs	r1, r0
  402680:	489a      	ldr	r0, [pc, #616]	; (4028ec <board_init+0x2d0>)
  402682:	47a8      	blx	r5
		mpu_cal_mpu_region_size(EXT_EBI_END_ADDRESS - EXT_EBI_START_ADDRESS) |
  402684:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  402688:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40268a:	4999      	ldr	r1, [pc, #612]	; (4028f0 <board_init+0x2d4>)
  40268c:	4301      	orrs	r1, r0
  40268e:	4899      	ldr	r0, [pc, #612]	; (4028f4 <board_init+0x2d8>)
  402690:	47a8      	blx	r5
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  402692:	6a63      	ldr	r3, [r4, #36]	; 0x24
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  402694:	2005      	movs	r0, #5
  402696:	4a98      	ldr	r2, [pc, #608]	; (4028f8 <board_init+0x2dc>)
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  402698:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
  40269c:	6263      	str	r3, [r4, #36]	; 0x24
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  40269e:	4790      	blx	r2
  __ASM volatile ("dsb");
  4026a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4026a4:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb");
  4026a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4026ac:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4026b0:	f04f 0900 	mov.w	r9, #0
  4026b4:	f8c4 9250 	str.w	r9, [r4, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4026b8:	6963      	ldr	r3, [r4, #20]
  4026ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  4026be:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb");
  4026c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4026c4:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4026c8:	4b8c      	ldr	r3, [pc, #560]	; (4028fc <board_init+0x2e0>)
  4026ca:	498d      	ldr	r1, [pc, #564]	; (402900 <board_init+0x2e4>)
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4026cc:	4a8d      	ldr	r2, [pc, #564]	; (402904 <board_init+0x2e8>)
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4026ce:	6059      	str	r1, [r3, #4]
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4026d0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  4026d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4026d6:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4026da:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  4026de:	f023 0301 	bic.w	r3, r3, #1
  4026e2:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4026e6:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
  4026ea:	f023 0301 	bic.w	r3, r3, #1
  4026ee:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  __ASM volatile ("dsb");
  4026f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4026f6:	f3bf 8f6f 	isb	sy
  4026fa:	4c83      	ldr	r4, [pc, #524]	; (402908 <board_init+0x2ec>)
  4026fc:	200a      	movs	r0, #10
  4026fe:	47a0      	blx	r4
  402700:	200b      	movs	r0, #11
  402702:	47a0      	blx	r4
  402704:	200c      	movs	r0, #12
  402706:	47a0      	blx	r4
  402708:	2010      	movs	r0, #16
  40270a:	47a0      	blx	r4
  40270c:	2011      	movs	r0, #17
  40270e:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402710:	f44f 7500 	mov.w	r5, #512	; 0x200
  402714:	4c7d      	ldr	r4, [pc, #500]	; (40290c <board_init+0x2f0>)
  402716:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  40271a:	4f7d      	ldr	r7, [pc, #500]	; (402910 <board_init+0x2f4>)
		base->PIO_PUDR = mask;
  40271c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402720:	6123      	str	r3, [r4, #16]
		base->PIO_PUDR = mask;
  402722:	2610      	movs	r6, #16
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402724:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_PUDR = mask;
  402728:	f04f 0e08 	mov.w	lr, #8
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40272c:	6323      	str	r3, [r4, #48]	; 0x30
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  40272e:	4638      	mov	r0, r7
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402730:	613d      	str	r5, [r7, #16]
  402732:	464b      	mov	r3, r9
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402734:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
  402738:	f44f 5200 	mov.w	r2, #8192	; 0x2000
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40273c:	633d      	str	r5, [r7, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40273e:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402740:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  402744:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  402746:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40274a:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  40274c:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  40274e:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  402752:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  402756:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 402928 <board_init+0x30c>
  40275a:	f42c 7c00 	bic.w	ip, ip, #512	; 0x200
  40275e:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402762:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  402766:	f42c 7c00 	bic.w	ip, ip, #512	; 0x200
  40276a:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40276e:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  402772:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  402776:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  40277a:	6621      	str	r1, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40277c:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  402780:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  402782:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402784:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402788:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40278c:	f42c 1c00 	bic.w	ip, ip, #2097152	; 0x200000
  402790:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402794:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  402798:	f42c 1c00 	bic.w	ip, ip, #2097152	; 0x200000
  40279c:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4027a0:	6061      	str	r1, [r4, #4]
  4027a2:	f8d8 1114 	ldr.w	r1, [r8, #276]	; 0x114
  4027a6:	ea41 0c06 	orr.w	ip, r1, r6
		base->PIO_PUDR = mask;
  4027aa:	495a      	ldr	r1, [pc, #360]	; (402914 <board_init+0x2f8>)
  4027ac:	f8c8 c114 	str.w	ip, [r8, #276]	; 0x114
  4027b0:	660e      	str	r6, [r1, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4027b2:	f8c1 6090 	str.w	r6, [r1, #144]	; 0x90
		base->PIO_MDDR = mask;
  4027b6:	654e      	str	r6, [r1, #84]	; 0x54
		base->PIO_IFDR = mask;
  4027b8:	624e      	str	r6, [r1, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4027ba:	f8c1 6080 	str.w	r6, [r1, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4027be:	f8d1 c070 	ldr.w	ip, [r1, #112]	; 0x70
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  4027c2:	f8df 8168 	ldr.w	r8, [pc, #360]	; 40292c <board_init+0x310>
  4027c6:	ea4c 0c06 	orr.w	ip, ip, r6
  4027ca:	f8c1 c070 	str.w	ip, [r1, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4027ce:	f8d1 c074 	ldr.w	ip, [r1, #116]	; 0x74
  4027d2:	ea4c 0c06 	orr.w	ip, ip, r6
  4027d6:	f8c1 c074 	str.w	ip, [r1, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4027da:	604e      	str	r6, [r1, #4]
  4027dc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
		base->PIO_PUDR = mask;
  4027e0:	f8c4 e060 	str.w	lr, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4027e4:	f8c4 e090 	str.w	lr, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4027e8:	f8c4 e054 	str.w	lr, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4027ec:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4027f0:	f8c4 e080 	str.w	lr, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4027f4:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  4027f8:	f02c 0c08 	bic.w	ip, ip, #8
  4027fc:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402800:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  402804:	f02c 0c08 	bic.w	ip, ip, #8
  402808:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40280c:	f8c4 e004 	str.w	lr, [r4, #4]
		base->PIO_PUDR = mask;
  402810:	6626      	str	r6, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402812:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  402816:	6566      	str	r6, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  402818:	6266      	str	r6, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40281a:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40281e:	f8d4 e070 	ldr.w	lr, [r4, #112]	; 0x70
  402822:	f02e 0e10 	bic.w	lr, lr, #16
  402826:	f8c4 e070 	str.w	lr, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40282a:	f8d4 e074 	ldr.w	lr, [r4, #116]	; 0x74
  40282e:	f02e 0e10 	bic.w	lr, lr, #16
  402832:	f8c4 e074 	str.w	lr, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402836:	6066      	str	r6, [r4, #4]
  402838:	47c0      	blx	r8
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  40283a:	464b      	mov	r3, r9
  40283c:	4638      	mov	r0, r7
  40283e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  402842:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  402846:	47c0      	blx	r8
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  402848:	4638      	mov	r0, r7
  40284a:	2301      	movs	r3, #1
  40284c:	22ff      	movs	r2, #255	; 0xff
  40284e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402852:	47c0      	blx	r8
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  402854:	2301      	movs	r3, #1
  402856:	223f      	movs	r2, #63	; 0x3f
  402858:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40285c:	482e      	ldr	r0, [pc, #184]	; (402918 <board_init+0x2fc>)
  40285e:	47c0      	blx	r8
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  402860:	4620      	mov	r0, r4
  402862:	2301      	movs	r3, #1
  402864:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  402868:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40286c:	47c0      	blx	r8
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  40286e:	4638      	mov	r0, r7
  402870:	2301      	movs	r3, #1
  402872:	f44f 7280 	mov.w	r2, #256	; 0x100
  402876:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40287a:	47c0      	blx	r8
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  40287c:	4638      	mov	r0, r7
  40287e:	2301      	movs	r3, #1
  402880:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402884:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402888:	47c0      	blx	r8
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  40288a:	2301      	movs	r3, #1
  40288c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402890:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402894:	4821      	ldr	r0, [pc, #132]	; (40291c <board_init+0x300>)
  402896:	47c0      	blx	r8
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  402898:	464b      	mov	r3, r9
  40289a:	462a      	mov	r2, r5
  40289c:	4638      	mov	r0, r7
  40289e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4028a2:	47c0      	blx	r8
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  4028a4:	4629      	mov	r1, r5
  4028a6:	4638      	mov	r0, r7
  4028a8:	4b1d      	ldr	r3, [pc, #116]	; (402920 <board_init+0x304>)
	pio_configure_pin(ISI_PCK_PIO, ISI_PCK_FLAGS);
	pio_configure_pin(ISI_PCK0_PIO, ISI_PCK0_FLAGS);
	pio_configure_pin(OV_PWD_GPIO, OV_PWD_FLAGS);
	pio_configure_pin(OV_RST_GPIO, OV_RST_FLAGS);
#endif
}
  4028aa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  4028ae:	4718      	bx	r3
  4028b0:	400e1850 	.word	0x400e1850
  4028b4:	01000001 	.word	0x01000001
  4028b8:	00402949 	.word	0x00402949
  4028bc:	0040293d 	.word	0x0040293d
  4028c0:	001fffff 	.word	0x001fffff
  4028c4:	06230001 	.word	0x06230001
  4028c8:	03230001 	.word	0x03230001
  4028cc:	00400012 	.word	0x00400012
  4028d0:	20000013 	.word	0x20000013
  4028d4:	0003ffff 	.word	0x0003ffff
  4028d8:	20400014 	.word	0x20400014
  4028dc:	0001ffff 	.word	0x0001ffff
  4028e0:	20440015 	.word	0x20440015
  4028e4:	13010001 	.word	0x13010001
  4028e8:	e000ed00 	.word	0xe000ed00
  4028ec:	40000016 	.word	0x40000016
  4028f0:	03000001 	.word	0x03000001
  4028f4:	60000017 	.word	0x60000017
  4028f8:	00402931 	.word	0x00402931
  4028fc:	400e0c00 	.word	0x400e0c00
  402900:	5a00080c 	.word	0x5a00080c
  402904:	5a00070c 	.word	0x5a00070c
  402908:	00403101 	.word	0x00403101
  40290c:	400e0e00 	.word	0x400e0e00
  402910:	400e1200 	.word	0x400e1200
  402914:	400e1000 	.word	0x400e1000
  402918:	400e1600 	.word	0x400e1600
  40291c:	400e1400 	.word	0x400e1400
  402920:	0040296d 	.word	0x0040296d
  402924:	003fffff 	.word	0x003fffff
  402928:	40088000 	.word	0x40088000
  40292c:	00402975 	.word	0x00402975

00402930 <mpu_enable>:
 *
 * \param dwMPUEnable  Enable/Disable the memory region.
 */
void mpu_enable(uint32_t dw_mpu_enable)
{
	MPU->CTRL = dw_mpu_enable ;
  402930:	4b01      	ldr	r3, [pc, #4]	; (402938 <mpu_enable+0x8>)
  402932:	6058      	str	r0, [r3, #4]
  402934:	4770      	bx	lr
  402936:	bf00      	nop
  402938:	e000ed90 	.word	0xe000ed90

0040293c <mpu_set_region>:
 * \param dwRegionBaseAddr  Memory region base address.
 * \param dwRegionAttr  Memory region attributes.
 */
void mpu_set_region(uint32_t dw_region_base_addr, uint32_t dw_region_attr)
{
	MPU->RBAR = dw_region_base_addr;
  40293c:	4b01      	ldr	r3, [pc, #4]	; (402944 <mpu_set_region+0x8>)
  40293e:	60d8      	str	r0, [r3, #12]
	MPU->RASR = dw_region_attr;
  402940:	6119      	str	r1, [r3, #16]
  402942:	4770      	bx	lr
  402944:	e000ed90 	.word	0xe000ed90

00402948 <mpu_cal_mpu_region_size>:
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;

	while( dwReturnValue < 31 ) {
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  402948:	2820      	cmp	r0, #32
  40294a:	d90d      	bls.n	402968 <mpu_cal_mpu_region_size+0x20>
  40294c:	2240      	movs	r2, #64	; 0x40
  40294e:	2305      	movs	r3, #5
  402950:	e002      	b.n	402958 <mpu_cal_mpu_region_size+0x10>
			break;
		} else {
			dwReturnValue++;
  402952:	3301      	adds	r3, #1
	while( dwReturnValue < 31 ) {
  402954:	2b1f      	cmp	r3, #31
  402956:	d005      	beq.n	402964 <mpu_cal_mpu_region_size+0x1c>
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  402958:	4290      	cmp	r0, r2
		}
		dwRegionSize <<= 1;
  40295a:	ea4f 0242 	mov.w	r2, r2, lsl #1
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  40295e:	d8f8      	bhi.n	402952 <mpu_cal_mpu_region_size+0xa>
  402960:	0058      	lsls	r0, r3, #1
  402962:	4770      	bx	lr
  402964:	203e      	movs	r0, #62	; 0x3e
  402966:	4770      	bx	lr
  402968:	2008      	movs	r0, #8
	}

	return ( dwReturnValue << 1 );
}
  40296a:	4770      	bx	lr

0040296c <pio_set>:
  40296c:	6301      	str	r1, [r0, #48]	; 0x30
  40296e:	4770      	bx	lr

00402970 <pio_clear>:
  402970:	6341      	str	r1, [r0, #52]	; 0x34
  402972:	4770      	bx	lr

00402974 <pio_configure>:
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
	/* Configure pins */
	switch (ul_type) {
  402974:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
{
  402978:	b430      	push	{r4, r5}
	switch (ul_type) {
  40297a:	d03b      	beq.n	4029f4 <pio_configure+0x80>
  40297c:	d931      	bls.n	4029e2 <pio_configure+0x6e>
  40297e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  402982:	d01b      	beq.n	4029bc <pio_configure+0x48>
  402984:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402988:	d018      	beq.n	4029bc <pio_configure+0x48>
  40298a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40298e:	d003      	beq.n	402998 <pio_configure+0x24>
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
		break;

	default:
		return 0;
  402990:	2300      	movs	r3, #0
	}

	return 1;
}
  402992:	bc30      	pop	{r4, r5}
  402994:	4618      	mov	r0, r3
  402996:	4770      	bx	lr
	if (ul_pull_up_enable) {
  402998:	07dd      	lsls	r5, r3, #31
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40299a:	6442      	str	r2, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40299c:	d448      	bmi.n	402a30 <pio_configure+0xbc>
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40299e:	f013 0f0a 	tst.w	r3, #10
		p_pio->PIO_PUDR = ul_mask;
  4029a2:	6602      	str	r2, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4029a4:	d048      	beq.n	402a38 <pio_configure+0xc4>
	if (ul_attribute & PIO_DEGLITCH) {
  4029a6:	079c      	lsls	r4, r3, #30
		p_pio->PIO_IFER = ul_mask;
  4029a8:	6202      	str	r2, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4029aa:	d548      	bpl.n	402a3e <pio_configure+0xca>
		p_pio->PIO_IFSCDR = ul_mask;
  4029ac:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
	return 1;
  4029b0:	2301      	movs	r3, #1
	p_pio->PIO_ODR = ul_mask;
  4029b2:	6142      	str	r2, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4029b4:	6002      	str	r2, [r0, #0]
}
  4029b6:	4618      	mov	r0, r3
  4029b8:	bc30      	pop	{r4, r5}
  4029ba:	4770      	bx	lr
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  4029bc:	f003 0404 	and.w	r4, r3, #4
	if (ul_pull_up_enable) {
  4029c0:	07db      	lsls	r3, r3, #31
	p_pio->PIO_IDR = ul_mask;
  4029c2:	6442      	str	r2, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4029c4:	d52f      	bpl.n	402a26 <pio_configure+0xb2>
		p_pio->PIO_PUER = ul_mask;
  4029c6:	6642      	str	r2, [r0, #100]	; 0x64
	if (ul_multidrive_enable) {
  4029c8:	2c00      	cmp	r4, #0
  4029ca:	d02f      	beq.n	402a2c <pio_configure+0xb8>
		p_pio->PIO_MDER = ul_mask;
  4029cc:	6502      	str	r2, [r0, #80]	; 0x50
	if (ul_default_level) {
  4029ce:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4029d2:	d04e      	beq.n	402a72 <pio_configure+0xfe>
		p_pio->PIO_CODR = ul_mask;
  4029d4:	6342      	str	r2, [r0, #52]	; 0x34
	return 1;
  4029d6:	2301      	movs	r3, #1
	p_pio->PIO_OER = ul_mask;
  4029d8:	6102      	str	r2, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4029da:	6002      	str	r2, [r0, #0]
}
  4029dc:	4618      	mov	r0, r3
  4029de:	bc30      	pop	{r4, r5}
  4029e0:	4770      	bx	lr
	switch (ul_type) {
  4029e2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4029e6:	d005      	beq.n	4029f4 <pio_configure+0x80>
  4029e8:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4029ec:	d002      	beq.n	4029f4 <pio_configure+0x80>
  4029ee:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4029f2:	d1cd      	bne.n	402990 <pio_configure+0x1c>
	switch (ul_type) {
  4029f4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
	p_pio->PIO_IDR = ul_mask;
  4029f8:	6442      	str	r2, [r0, #68]	; 0x44
	switch (ul_type) {
  4029fa:	d03c      	beq.n	402a76 <pio_configure+0x102>
  4029fc:	d924      	bls.n	402a48 <pio_configure+0xd4>
  4029fe:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  402a02:	d042      	beq.n	402a8a <pio_configure+0x116>
  402a04:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  402a08:	d105      	bne.n	402a16 <pio_configure+0xa2>
		ul_sr = p_pio->PIO_ABCDSR[0];
  402a0a:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402a0c:	4311      	orrs	r1, r2
  402a0e:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402a10:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402a12:	4311      	orrs	r1, r2
  402a14:	6741      	str	r1, [r0, #116]	; 0x74
	if (ul_pull_up_enable) {
  402a16:	07db      	lsls	r3, r3, #31
	p_pio->PIO_PDR = ul_mask;
  402a18:	6042      	str	r2, [r0, #4]
	if (ul_pull_up_enable) {
  402a1a:	d525      	bpl.n	402a68 <pio_configure+0xf4>
	return 1;
  402a1c:	2301      	movs	r3, #1
		p_pio->PIO_PUER = ul_mask;
  402a1e:	6642      	str	r2, [r0, #100]	; 0x64
}
  402a20:	4618      	mov	r0, r3
  402a22:	bc30      	pop	{r4, r5}
  402a24:	4770      	bx	lr
		p_pio->PIO_PUDR = ul_mask;
  402a26:	6602      	str	r2, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  402a28:	2c00      	cmp	r4, #0
  402a2a:	d1cf      	bne.n	4029cc <pio_configure+0x58>
		p_pio->PIO_MDDR = ul_mask;
  402a2c:	6542      	str	r2, [r0, #84]	; 0x54
  402a2e:	e7ce      	b.n	4029ce <pio_configure+0x5a>
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402a30:	f013 0f0a 	tst.w	r3, #10
		p_pio->PIO_PUER = ul_mask;
  402a34:	6642      	str	r2, [r0, #100]	; 0x64
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402a36:	d1b6      	bne.n	4029a6 <pio_configure+0x32>
	if (ul_attribute & PIO_DEGLITCH) {
  402a38:	079c      	lsls	r4, r3, #30
		p_pio->PIO_IFDR = ul_mask;
  402a3a:	6242      	str	r2, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  402a3c:	d4b6      	bmi.n	4029ac <pio_configure+0x38>
		if (ul_attribute & PIO_DEBOUNCE) {
  402a3e:	0719      	lsls	r1, r3, #28
  402a40:	d5b6      	bpl.n	4029b0 <pio_configure+0x3c>
			p_pio->PIO_IFSCER = ul_mask;
  402a42:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  402a46:	e7b3      	b.n	4029b0 <pio_configure+0x3c>
	switch (ul_type) {
  402a48:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  402a4c:	d1e3      	bne.n	402a16 <pio_configure+0xa2>
		ul_sr = p_pio->PIO_ABCDSR[0];
  402a4e:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402a50:	43d1      	mvns	r1, r2
  402a52:	6f05      	ldr	r5, [r0, #112]	; 0x70
  402a54:	402c      	ands	r4, r5
  402a56:	460d      	mov	r5, r1
  402a58:	400c      	ands	r4, r1
  402a5a:	6704      	str	r4, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402a5c:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402a5e:	6f44      	ldr	r4, [r0, #116]	; 0x74
  402a60:	4021      	ands	r1, r4
  402a62:	4029      	ands	r1, r5
  402a64:	6741      	str	r1, [r0, #116]	; 0x74
  402a66:	e7d6      	b.n	402a16 <pio_configure+0xa2>
	return 1;
  402a68:	2301      	movs	r3, #1
		p_pio->PIO_PUDR = ul_mask;
  402a6a:	6602      	str	r2, [r0, #96]	; 0x60
}
  402a6c:	4618      	mov	r0, r3
  402a6e:	bc30      	pop	{r4, r5}
  402a70:	4770      	bx	lr
		p_pio->PIO_SODR = ul_mask;
  402a72:	6302      	str	r2, [r0, #48]	; 0x30
  402a74:	e7af      	b.n	4029d6 <pio_configure+0x62>
		ul_sr = p_pio->PIO_ABCDSR[0];
  402a76:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402a78:	4311      	orrs	r1, r2
  402a7a:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402a7c:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402a7e:	6f44      	ldr	r4, [r0, #116]	; 0x74
  402a80:	4021      	ands	r1, r4
  402a82:	ea21 0102 	bic.w	r1, r1, r2
  402a86:	6741      	str	r1, [r0, #116]	; 0x74
  402a88:	e7c5      	b.n	402a16 <pio_configure+0xa2>
		ul_sr = p_pio->PIO_ABCDSR[0];
  402a8a:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402a8c:	6f04      	ldr	r4, [r0, #112]	; 0x70
  402a8e:	4021      	ands	r1, r4
  402a90:	ea21 0102 	bic.w	r1, r1, r2
  402a94:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402a96:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402a98:	4311      	orrs	r1, r2
  402a9a:	6741      	str	r1, [r0, #116]	; 0x74
  402a9c:	e7bb      	b.n	402a16 <pio_configure+0xa2>
  402a9e:	bf00      	nop

00402aa0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  402aa0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  402aa2:	4770      	bx	lr

00402aa4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  402aa4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  402aa6:	4770      	bx	lr

00402aa8 <pio_configure_pin>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402aa8:	4b53      	ldr	r3, [pc, #332]	; (402bf8 <pio_configure_pin+0x150>)
	switch (ul_flags & PIO_TYPE_Msk) {
  402aaa:	f001 42f0 	and.w	r2, r1, #2013265920	; 0x78000000
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402aae:	eb03 1350 	add.w	r3, r3, r0, lsr #5
	switch (ul_flags & PIO_TYPE_Msk) {
  402ab2:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
{
  402ab6:	b470      	push	{r4, r5, r6}
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402ab8:	ea4f 2343 	mov.w	r3, r3, lsl #9
	switch (ul_flags & PIO_TYPE_Msk) {
  402abc:	d06d      	beq.n	402b9a <pio_configure_pin+0xf2>
  402abe:	d80b      	bhi.n	402ad8 <pio_configure_pin+0x30>
  402ac0:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
  402ac4:	d027      	beq.n	402b16 <pio_configure_pin+0x6e>
  402ac6:	f1b2 5fc0 	cmp.w	r2, #402653184	; 0x18000000
  402aca:	d052      	beq.n	402b72 <pio_configure_pin+0xca>
  402acc:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
  402ad0:	d038      	beq.n	402b44 <pio_configure_pin+0x9c>
		return 0;
  402ad2:	2000      	movs	r0, #0
}
  402ad4:	bc70      	pop	{r4, r5, r6}
  402ad6:	4770      	bx	lr
	switch (ul_flags & PIO_TYPE_Msk) {
  402ad8:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
  402adc:	d066      	beq.n	402bac <pio_configure_pin+0x104>
  402ade:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  402ae2:	d063      	beq.n	402bac <pio_configure_pin+0x104>
  402ae4:	f1b2 5f20 	cmp.w	r2, #671088640	; 0x28000000
  402ae8:	d1f3      	bne.n	402ad2 <pio_configure_pin+0x2a>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  402aea:	f000 001f 	and.w	r0, r0, #31
  402aee:	2201      	movs	r2, #1
	if (ul_pull_up_enable) {
  402af0:	07cd      	lsls	r5, r1, #31
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  402af2:	fa02 f200 	lsl.w	r2, r2, r0
	p_pio->PIO_IDR = ul_mask;
  402af6:	645a      	str	r2, [r3, #68]	; 0x44
	if (ul_pull_up_enable) {
  402af8:	d573      	bpl.n	402be2 <pio_configure_pin+0x13a>
		p_pio->PIO_PUER = ul_mask;
  402afa:	665a      	str	r2, [r3, #100]	; 0x64
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402afc:	f011 0f0a 	tst.w	r1, #10
  402b00:	d06d      	beq.n	402bde <pio_configure_pin+0x136>
		p_pio->PIO_IFER = ul_mask;
  402b02:	621a      	str	r2, [r3, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  402b04:	078c      	lsls	r4, r1, #30
  402b06:	d56e      	bpl.n	402be6 <pio_configure_pin+0x13e>
		p_pio->PIO_IFSCDR = ul_mask;
  402b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  402b0c:	615a      	str	r2, [r3, #20]
	return 1;
  402b0e:	2001      	movs	r0, #1
	p_pio->PIO_PER = ul_mask;
  402b10:	601a      	str	r2, [r3, #0]
}
  402b12:	bc70      	pop	{r4, r5, r6}
  402b14:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  402b16:	f000 021f 	and.w	r2, r0, #31
  402b1a:	2001      	movs	r0, #1
	if (ul_pull_up_enable) {
  402b1c:	07c9      	lsls	r1, r1, #31
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  402b1e:	fa00 f202 	lsl.w	r2, r0, r2
	p_pio->PIO_IDR = ul_mask;
  402b22:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABCDSR[0];
  402b24:	6f1c      	ldr	r4, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402b26:	ea44 0402 	orr.w	r4, r4, r2
  402b2a:	671c      	str	r4, [r3, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402b2c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402b2e:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  402b30:	ea04 0405 	and.w	r4, r4, r5
  402b34:	ea24 0402 	bic.w	r4, r4, r2
  402b38:	675c      	str	r4, [r3, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  402b3a:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
  402b3c:	d516      	bpl.n	402b6c <pio_configure_pin+0xc4>
		p_pio->PIO_PUER = ul_mask;
  402b3e:	665a      	str	r2, [r3, #100]	; 0x64
}
  402b40:	bc70      	pop	{r4, r5, r6}
  402b42:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  402b44:	f000 021f 	and.w	r2, r0, #31
  402b48:	2001      	movs	r0, #1
  402b4a:	fa00 f202 	lsl.w	r2, r0, r2
	p_pio->PIO_IDR = ul_mask;
  402b4e:	645a      	str	r2, [r3, #68]	; 0x44
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402b50:	43d6      	mvns	r6, r2
		ul_sr = p_pio->PIO_ABCDSR[0];
  402b52:	6f1d      	ldr	r5, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402b54:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  402b56:	4025      	ands	r5, r4
  402b58:	4035      	ands	r5, r6
  402b5a:	671d      	str	r5, [r3, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402b5c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402b5e:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  402b60:	402c      	ands	r4, r5
  402b62:	4034      	ands	r4, r6
  402b64:	675c      	str	r4, [r3, #116]	; 0x74
	if (ul_pull_up_enable) {
  402b66:	07cc      	lsls	r4, r1, #31
	p_pio->PIO_PDR = ul_mask;
  402b68:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
  402b6a:	d4e8      	bmi.n	402b3e <pio_configure_pin+0x96>
		p_pio->PIO_PUDR = ul_mask;
  402b6c:	661a      	str	r2, [r3, #96]	; 0x60
}
  402b6e:	bc70      	pop	{r4, r5, r6}
  402b70:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  402b72:	f000 021f 	and.w	r2, r0, #31
  402b76:	2001      	movs	r0, #1
  402b78:	fa00 f202 	lsl.w	r2, r0, r2
	p_pio->PIO_IDR = ul_mask;
  402b7c:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABCDSR[0];
  402b7e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402b80:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  402b82:	402c      	ands	r4, r5
  402b84:	ea24 0402 	bic.w	r4, r4, r2
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402b88:	671c      	str	r4, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
  402b8a:	07ce      	lsls	r6, r1, #31
		ul_sr = p_pio->PIO_ABCDSR[1];
  402b8c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402b8e:	ea44 0402 	orr.w	r4, r4, r2
  402b92:	675c      	str	r4, [r3, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  402b94:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
  402b96:	d5e9      	bpl.n	402b6c <pio_configure_pin+0xc4>
  402b98:	e7d1      	b.n	402b3e <pio_configure_pin+0x96>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  402b9a:	f000 021f 	and.w	r2, r0, #31
  402b9e:	2001      	movs	r0, #1
  402ba0:	fa00 f202 	lsl.w	r2, r0, r2
	p_pio->PIO_IDR = ul_mask;
  402ba4:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABCDSR[0];
  402ba6:	6f1c      	ldr	r4, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402ba8:	4314      	orrs	r4, r2
  402baa:	e7ed      	b.n	402b88 <pio_configure_pin+0xe0>
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  402bac:	f000 001f 	and.w	r0, r0, #31
  402bb0:	2201      	movs	r2, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  402bb2:	f001 5460 	and.w	r4, r1, #939524096	; 0x38000000
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  402bb6:	f001 0504 	and.w	r5, r1, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  402bba:	4082      	lsls	r2, r0
	if (ul_pull_up_enable) {
  402bbc:	07c9      	lsls	r1, r1, #31
	p_pio->PIO_IDR = ul_mask;
  402bbe:	645a      	str	r2, [r3, #68]	; 0x44
	if (ul_pull_up_enable) {
  402bc0:	d50b      	bpl.n	402bda <pio_configure_pin+0x132>
		p_pio->PIO_PUER = ul_mask;
  402bc2:	665a      	str	r2, [r3, #100]	; 0x64
	if (ul_multidrive_enable) {
  402bc4:	b1a5      	cbz	r5, 402bf0 <pio_configure_pin+0x148>
		p_pio->PIO_MDER = ul_mask;
  402bc6:	651a      	str	r2, [r3, #80]	; 0x50
	if (ul_default_level) {
  402bc8:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
  402bcc:	d012      	beq.n	402bf4 <pio_configure_pin+0x14c>
		p_pio->PIO_CODR = ul_mask;
  402bce:	635a      	str	r2, [r3, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  402bd0:	611a      	str	r2, [r3, #16]
	return 1;
  402bd2:	2001      	movs	r0, #1
	p_pio->PIO_PER = ul_mask;
  402bd4:	601a      	str	r2, [r3, #0]
}
  402bd6:	bc70      	pop	{r4, r5, r6}
  402bd8:	4770      	bx	lr
		p_pio->PIO_PUDR = ul_mask;
  402bda:	661a      	str	r2, [r3, #96]	; 0x60
  402bdc:	e7f2      	b.n	402bc4 <pio_configure_pin+0x11c>
		p_pio->PIO_IFDR = ul_mask;
  402bde:	625a      	str	r2, [r3, #36]	; 0x24
  402be0:	e790      	b.n	402b04 <pio_configure_pin+0x5c>
		p_pio->PIO_PUDR = ul_mask;
  402be2:	661a      	str	r2, [r3, #96]	; 0x60
  402be4:	e78a      	b.n	402afc <pio_configure_pin+0x54>
		if (ul_attribute & PIO_DEBOUNCE) {
  402be6:	0708      	lsls	r0, r1, #28
  402be8:	d590      	bpl.n	402b0c <pio_configure_pin+0x64>
			p_pio->PIO_IFSCER = ul_mask;
  402bea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  402bee:	e78d      	b.n	402b0c <pio_configure_pin+0x64>
		p_pio->PIO_MDDR = ul_mask;
  402bf0:	655a      	str	r2, [r3, #84]	; 0x54
  402bf2:	e7e9      	b.n	402bc8 <pio_configure_pin+0x120>
		p_pio->PIO_SODR = ul_mask;
  402bf4:	631a      	str	r2, [r3, #48]	; 0x30
  402bf6:	e7eb      	b.n	402bd0 <pio_configure_pin+0x128>
  402bf8:	00200707 	.word	0x00200707

00402bfc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  402bfc:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  402bfe:	4b2e      	ldr	r3, [pc, #184]	; (402cb8 <PIOA_Handler+0xbc>)
  402c00:	482e      	ldr	r0, [pc, #184]	; (402cbc <PIOA_Handler+0xc0>)
  402c02:	4798      	blx	r3
  402c04:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  402c06:	4b2e      	ldr	r3, [pc, #184]	; (402cc0 <PIOA_Handler+0xc4>)
  402c08:	482c      	ldr	r0, [pc, #176]	; (402cbc <PIOA_Handler+0xc0>)
  402c0a:	4798      	blx	r3
	if (status != 0) {
  402c0c:	4005      	ands	r5, r0
  402c0e:	d015      	beq.n	402c3c <PIOA_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  402c10:	4c2c      	ldr	r4, [pc, #176]	; (402cc4 <PIOA_Handler+0xc8>)
  402c12:	6820      	ldr	r0, [r4, #0]
  402c14:	280a      	cmp	r0, #10
  402c16:	d019      	beq.n	402c4c <PIOA_Handler+0x50>
  402c18:	6920      	ldr	r0, [r4, #16]
  402c1a:	280a      	cmp	r0, #10
  402c1c:	d01f      	beq.n	402c5e <PIOA_Handler+0x62>
  402c1e:	6a20      	ldr	r0, [r4, #32]
  402c20:	280a      	cmp	r0, #10
  402c22:	d025      	beq.n	402c70 <PIOA_Handler+0x74>
  402c24:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402c26:	280a      	cmp	r0, #10
  402c28:	d02b      	beq.n	402c82 <PIOA_Handler+0x86>
  402c2a:	6c20      	ldr	r0, [r4, #64]	; 0x40
  402c2c:	280a      	cmp	r0, #10
  402c2e:	d031      	beq.n	402c94 <PIOA_Handler+0x98>
  402c30:	6d20      	ldr	r0, [r4, #80]	; 0x50
  402c32:	280a      	cmp	r0, #10
  402c34:	d037      	beq.n	402ca6 <PIOA_Handler+0xaa>
  402c36:	6e20      	ldr	r0, [r4, #96]	; 0x60
  402c38:	280a      	cmp	r0, #10
  402c3a:	d000      	beq.n	402c3e <PIOA_Handler+0x42>
  402c3c:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402c3e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  402c40:	4229      	tst	r1, r5
  402c42:	d0fb      	beq.n	402c3c <PIOA_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402c44:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	pio_handler_process(PIOA, ID_PIOA);
}
  402c46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402c4a:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402c4c:	6861      	ldr	r1, [r4, #4]
  402c4e:	420d      	tst	r5, r1
  402c50:	d0e2      	beq.n	402c18 <PIOA_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402c52:	68e3      	ldr	r3, [r4, #12]
  402c54:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402c56:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  402c58:	439d      	bics	r5, r3
  402c5a:	d0ef      	beq.n	402c3c <PIOA_Handler+0x40>
  402c5c:	e7dc      	b.n	402c18 <PIOA_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402c5e:	6961      	ldr	r1, [r4, #20]
  402c60:	4229      	tst	r1, r5
  402c62:	d0dc      	beq.n	402c1e <PIOA_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402c64:	69e3      	ldr	r3, [r4, #28]
  402c66:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402c68:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  402c6a:	439d      	bics	r5, r3
  402c6c:	d0e6      	beq.n	402c3c <PIOA_Handler+0x40>
  402c6e:	e7d6      	b.n	402c1e <PIOA_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402c70:	6a61      	ldr	r1, [r4, #36]	; 0x24
  402c72:	4229      	tst	r1, r5
  402c74:	d0d6      	beq.n	402c24 <PIOA_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402c76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402c78:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402c7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  402c7c:	439d      	bics	r5, r3
  402c7e:	d0dd      	beq.n	402c3c <PIOA_Handler+0x40>
  402c80:	e7d0      	b.n	402c24 <PIOA_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402c82:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402c84:	4229      	tst	r1, r5
  402c86:	d0d0      	beq.n	402c2a <PIOA_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402c88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402c8a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402c8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  402c8e:	439d      	bics	r5, r3
  402c90:	d0d4      	beq.n	402c3c <PIOA_Handler+0x40>
  402c92:	e7ca      	b.n	402c2a <PIOA_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402c94:	6c61      	ldr	r1, [r4, #68]	; 0x44
  402c96:	4229      	tst	r1, r5
  402c98:	d0ca      	beq.n	402c30 <PIOA_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402c9a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  402c9c:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402c9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  402ca0:	439d      	bics	r5, r3
  402ca2:	d0cb      	beq.n	402c3c <PIOA_Handler+0x40>
  402ca4:	e7c4      	b.n	402c30 <PIOA_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402ca6:	6d61      	ldr	r1, [r4, #84]	; 0x54
  402ca8:	4229      	tst	r1, r5
  402caa:	d0c4      	beq.n	402c36 <PIOA_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402cac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  402cae:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402cb0:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  402cb2:	439d      	bics	r5, r3
  402cb4:	d0c2      	beq.n	402c3c <PIOA_Handler+0x40>
  402cb6:	e7be      	b.n	402c36 <PIOA_Handler+0x3a>
  402cb8:	00402aa1 	.word	0x00402aa1
  402cbc:	400e0e00 	.word	0x400e0e00
  402cc0:	00402aa5 	.word	0x00402aa5
  402cc4:	20429540 	.word	0x20429540

00402cc8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  402cc8:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  402cca:	4b2e      	ldr	r3, [pc, #184]	; (402d84 <PIOB_Handler+0xbc>)
  402ccc:	482e      	ldr	r0, [pc, #184]	; (402d88 <PIOB_Handler+0xc0>)
  402cce:	4798      	blx	r3
  402cd0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  402cd2:	4b2e      	ldr	r3, [pc, #184]	; (402d8c <PIOB_Handler+0xc4>)
  402cd4:	482c      	ldr	r0, [pc, #176]	; (402d88 <PIOB_Handler+0xc0>)
  402cd6:	4798      	blx	r3
	if (status != 0) {
  402cd8:	4005      	ands	r5, r0
  402cda:	d015      	beq.n	402d08 <PIOB_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  402cdc:	4c2c      	ldr	r4, [pc, #176]	; (402d90 <PIOB_Handler+0xc8>)
  402cde:	6820      	ldr	r0, [r4, #0]
  402ce0:	280b      	cmp	r0, #11
  402ce2:	d019      	beq.n	402d18 <PIOB_Handler+0x50>
  402ce4:	6920      	ldr	r0, [r4, #16]
  402ce6:	280b      	cmp	r0, #11
  402ce8:	d01f      	beq.n	402d2a <PIOB_Handler+0x62>
  402cea:	6a20      	ldr	r0, [r4, #32]
  402cec:	280b      	cmp	r0, #11
  402cee:	d025      	beq.n	402d3c <PIOB_Handler+0x74>
  402cf0:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402cf2:	280b      	cmp	r0, #11
  402cf4:	d02b      	beq.n	402d4e <PIOB_Handler+0x86>
  402cf6:	6c20      	ldr	r0, [r4, #64]	; 0x40
  402cf8:	280b      	cmp	r0, #11
  402cfa:	d031      	beq.n	402d60 <PIOB_Handler+0x98>
  402cfc:	6d20      	ldr	r0, [r4, #80]	; 0x50
  402cfe:	280b      	cmp	r0, #11
  402d00:	d037      	beq.n	402d72 <PIOB_Handler+0xaa>
  402d02:	6e20      	ldr	r0, [r4, #96]	; 0x60
  402d04:	280b      	cmp	r0, #11
  402d06:	d000      	beq.n	402d0a <PIOB_Handler+0x42>
  402d08:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402d0a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  402d0c:	4229      	tst	r1, r5
  402d0e:	d0fb      	beq.n	402d08 <PIOB_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402d10:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    pio_handler_process(PIOB, ID_PIOB);
}
  402d12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402d16:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402d18:	6861      	ldr	r1, [r4, #4]
  402d1a:	420d      	tst	r5, r1
  402d1c:	d0e2      	beq.n	402ce4 <PIOB_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402d1e:	68e3      	ldr	r3, [r4, #12]
  402d20:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402d22:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  402d24:	439d      	bics	r5, r3
  402d26:	d0ef      	beq.n	402d08 <PIOB_Handler+0x40>
  402d28:	e7dc      	b.n	402ce4 <PIOB_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402d2a:	6961      	ldr	r1, [r4, #20]
  402d2c:	4229      	tst	r1, r5
  402d2e:	d0dc      	beq.n	402cea <PIOB_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402d30:	69e3      	ldr	r3, [r4, #28]
  402d32:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402d34:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  402d36:	439d      	bics	r5, r3
  402d38:	d0e6      	beq.n	402d08 <PIOB_Handler+0x40>
  402d3a:	e7d6      	b.n	402cea <PIOB_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402d3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  402d3e:	4229      	tst	r1, r5
  402d40:	d0d6      	beq.n	402cf0 <PIOB_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402d42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402d44:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402d46:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  402d48:	439d      	bics	r5, r3
  402d4a:	d0dd      	beq.n	402d08 <PIOB_Handler+0x40>
  402d4c:	e7d0      	b.n	402cf0 <PIOB_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402d4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402d50:	4229      	tst	r1, r5
  402d52:	d0d0      	beq.n	402cf6 <PIOB_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402d54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402d56:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402d58:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  402d5a:	439d      	bics	r5, r3
  402d5c:	d0d4      	beq.n	402d08 <PIOB_Handler+0x40>
  402d5e:	e7ca      	b.n	402cf6 <PIOB_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402d60:	6c61      	ldr	r1, [r4, #68]	; 0x44
  402d62:	4229      	tst	r1, r5
  402d64:	d0ca      	beq.n	402cfc <PIOB_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402d66:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  402d68:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402d6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  402d6c:	439d      	bics	r5, r3
  402d6e:	d0cb      	beq.n	402d08 <PIOB_Handler+0x40>
  402d70:	e7c4      	b.n	402cfc <PIOB_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402d72:	6d61      	ldr	r1, [r4, #84]	; 0x54
  402d74:	4229      	tst	r1, r5
  402d76:	d0c4      	beq.n	402d02 <PIOB_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402d78:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  402d7a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402d7c:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  402d7e:	439d      	bics	r5, r3
  402d80:	d0c2      	beq.n	402d08 <PIOB_Handler+0x40>
  402d82:	e7be      	b.n	402d02 <PIOB_Handler+0x3a>
  402d84:	00402aa1 	.word	0x00402aa1
  402d88:	400e1000 	.word	0x400e1000
  402d8c:	00402aa5 	.word	0x00402aa5
  402d90:	20429540 	.word	0x20429540

00402d94 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  402d94:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  402d96:	4b2e      	ldr	r3, [pc, #184]	; (402e50 <PIOC_Handler+0xbc>)
  402d98:	482e      	ldr	r0, [pc, #184]	; (402e54 <PIOC_Handler+0xc0>)
  402d9a:	4798      	blx	r3
  402d9c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  402d9e:	4b2e      	ldr	r3, [pc, #184]	; (402e58 <PIOC_Handler+0xc4>)
  402da0:	482c      	ldr	r0, [pc, #176]	; (402e54 <PIOC_Handler+0xc0>)
  402da2:	4798      	blx	r3
	if (status != 0) {
  402da4:	4005      	ands	r5, r0
  402da6:	d015      	beq.n	402dd4 <PIOC_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  402da8:	4c2c      	ldr	r4, [pc, #176]	; (402e5c <PIOC_Handler+0xc8>)
  402daa:	6820      	ldr	r0, [r4, #0]
  402dac:	280c      	cmp	r0, #12
  402dae:	d019      	beq.n	402de4 <PIOC_Handler+0x50>
  402db0:	6920      	ldr	r0, [r4, #16]
  402db2:	280c      	cmp	r0, #12
  402db4:	d01f      	beq.n	402df6 <PIOC_Handler+0x62>
  402db6:	6a20      	ldr	r0, [r4, #32]
  402db8:	280c      	cmp	r0, #12
  402dba:	d025      	beq.n	402e08 <PIOC_Handler+0x74>
  402dbc:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402dbe:	280c      	cmp	r0, #12
  402dc0:	d02b      	beq.n	402e1a <PIOC_Handler+0x86>
  402dc2:	6c20      	ldr	r0, [r4, #64]	; 0x40
  402dc4:	280c      	cmp	r0, #12
  402dc6:	d031      	beq.n	402e2c <PIOC_Handler+0x98>
  402dc8:	6d20      	ldr	r0, [r4, #80]	; 0x50
  402dca:	280c      	cmp	r0, #12
  402dcc:	d037      	beq.n	402e3e <PIOC_Handler+0xaa>
  402dce:	6e20      	ldr	r0, [r4, #96]	; 0x60
  402dd0:	280c      	cmp	r0, #12
  402dd2:	d000      	beq.n	402dd6 <PIOC_Handler+0x42>
  402dd4:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402dd6:	6e61      	ldr	r1, [r4, #100]	; 0x64
  402dd8:	4229      	tst	r1, r5
  402dda:	d0fb      	beq.n	402dd4 <PIOC_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402ddc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	pio_handler_process(PIOC, ID_PIOC);
}
  402dde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402de2:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402de4:	6861      	ldr	r1, [r4, #4]
  402de6:	420d      	tst	r5, r1
  402de8:	d0e2      	beq.n	402db0 <PIOC_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402dea:	68e3      	ldr	r3, [r4, #12]
  402dec:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402dee:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  402df0:	439d      	bics	r5, r3
  402df2:	d0ef      	beq.n	402dd4 <PIOC_Handler+0x40>
  402df4:	e7dc      	b.n	402db0 <PIOC_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402df6:	6961      	ldr	r1, [r4, #20]
  402df8:	4229      	tst	r1, r5
  402dfa:	d0dc      	beq.n	402db6 <PIOC_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402dfc:	69e3      	ldr	r3, [r4, #28]
  402dfe:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402e00:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  402e02:	439d      	bics	r5, r3
  402e04:	d0e6      	beq.n	402dd4 <PIOC_Handler+0x40>
  402e06:	e7d6      	b.n	402db6 <PIOC_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402e08:	6a61      	ldr	r1, [r4, #36]	; 0x24
  402e0a:	4229      	tst	r1, r5
  402e0c:	d0d6      	beq.n	402dbc <PIOC_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402e0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402e10:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402e12:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  402e14:	439d      	bics	r5, r3
  402e16:	d0dd      	beq.n	402dd4 <PIOC_Handler+0x40>
  402e18:	e7d0      	b.n	402dbc <PIOC_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402e1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402e1c:	4229      	tst	r1, r5
  402e1e:	d0d0      	beq.n	402dc2 <PIOC_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402e20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402e22:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402e24:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  402e26:	439d      	bics	r5, r3
  402e28:	d0d4      	beq.n	402dd4 <PIOC_Handler+0x40>
  402e2a:	e7ca      	b.n	402dc2 <PIOC_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402e2c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  402e2e:	4229      	tst	r1, r5
  402e30:	d0ca      	beq.n	402dc8 <PIOC_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402e32:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  402e34:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402e36:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  402e38:	439d      	bics	r5, r3
  402e3a:	d0cb      	beq.n	402dd4 <PIOC_Handler+0x40>
  402e3c:	e7c4      	b.n	402dc8 <PIOC_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402e3e:	6d61      	ldr	r1, [r4, #84]	; 0x54
  402e40:	4229      	tst	r1, r5
  402e42:	d0c4      	beq.n	402dce <PIOC_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402e44:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  402e46:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402e48:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  402e4a:	439d      	bics	r5, r3
  402e4c:	d0c2      	beq.n	402dd4 <PIOC_Handler+0x40>
  402e4e:	e7be      	b.n	402dce <PIOC_Handler+0x3a>
  402e50:	00402aa1 	.word	0x00402aa1
  402e54:	400e1200 	.word	0x400e1200
  402e58:	00402aa5 	.word	0x00402aa5
  402e5c:	20429540 	.word	0x20429540

00402e60 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  402e60:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  402e62:	4b2e      	ldr	r3, [pc, #184]	; (402f1c <PIOD_Handler+0xbc>)
  402e64:	482e      	ldr	r0, [pc, #184]	; (402f20 <PIOD_Handler+0xc0>)
  402e66:	4798      	blx	r3
  402e68:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  402e6a:	4b2e      	ldr	r3, [pc, #184]	; (402f24 <PIOD_Handler+0xc4>)
  402e6c:	482c      	ldr	r0, [pc, #176]	; (402f20 <PIOD_Handler+0xc0>)
  402e6e:	4798      	blx	r3
	if (status != 0) {
  402e70:	4005      	ands	r5, r0
  402e72:	d015      	beq.n	402ea0 <PIOD_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  402e74:	4c2c      	ldr	r4, [pc, #176]	; (402f28 <PIOD_Handler+0xc8>)
  402e76:	6820      	ldr	r0, [r4, #0]
  402e78:	2810      	cmp	r0, #16
  402e7a:	d019      	beq.n	402eb0 <PIOD_Handler+0x50>
  402e7c:	6920      	ldr	r0, [r4, #16]
  402e7e:	2810      	cmp	r0, #16
  402e80:	d01f      	beq.n	402ec2 <PIOD_Handler+0x62>
  402e82:	6a20      	ldr	r0, [r4, #32]
  402e84:	2810      	cmp	r0, #16
  402e86:	d025      	beq.n	402ed4 <PIOD_Handler+0x74>
  402e88:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402e8a:	2810      	cmp	r0, #16
  402e8c:	d02b      	beq.n	402ee6 <PIOD_Handler+0x86>
  402e8e:	6c20      	ldr	r0, [r4, #64]	; 0x40
  402e90:	2810      	cmp	r0, #16
  402e92:	d031      	beq.n	402ef8 <PIOD_Handler+0x98>
  402e94:	6d20      	ldr	r0, [r4, #80]	; 0x50
  402e96:	2810      	cmp	r0, #16
  402e98:	d037      	beq.n	402f0a <PIOD_Handler+0xaa>
  402e9a:	6e20      	ldr	r0, [r4, #96]	; 0x60
  402e9c:	2810      	cmp	r0, #16
  402e9e:	d000      	beq.n	402ea2 <PIOD_Handler+0x42>
  402ea0:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402ea2:	6e61      	ldr	r1, [r4, #100]	; 0x64
  402ea4:	4229      	tst	r1, r5
  402ea6:	d0fb      	beq.n	402ea0 <PIOD_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402ea8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	pio_handler_process(PIOD, ID_PIOD);
}
  402eaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402eae:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402eb0:	6861      	ldr	r1, [r4, #4]
  402eb2:	420d      	tst	r5, r1
  402eb4:	d0e2      	beq.n	402e7c <PIOD_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402eb6:	68e3      	ldr	r3, [r4, #12]
  402eb8:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402eba:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  402ebc:	439d      	bics	r5, r3
  402ebe:	d0ef      	beq.n	402ea0 <PIOD_Handler+0x40>
  402ec0:	e7dc      	b.n	402e7c <PIOD_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402ec2:	6961      	ldr	r1, [r4, #20]
  402ec4:	4229      	tst	r1, r5
  402ec6:	d0dc      	beq.n	402e82 <PIOD_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402ec8:	69e3      	ldr	r3, [r4, #28]
  402eca:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402ecc:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  402ece:	439d      	bics	r5, r3
  402ed0:	d0e6      	beq.n	402ea0 <PIOD_Handler+0x40>
  402ed2:	e7d6      	b.n	402e82 <PIOD_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402ed4:	6a61      	ldr	r1, [r4, #36]	; 0x24
  402ed6:	4229      	tst	r1, r5
  402ed8:	d0d6      	beq.n	402e88 <PIOD_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402eda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402edc:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402ede:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  402ee0:	439d      	bics	r5, r3
  402ee2:	d0dd      	beq.n	402ea0 <PIOD_Handler+0x40>
  402ee4:	e7d0      	b.n	402e88 <PIOD_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402ee6:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402ee8:	4229      	tst	r1, r5
  402eea:	d0d0      	beq.n	402e8e <PIOD_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402eec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402eee:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402ef0:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  402ef2:	439d      	bics	r5, r3
  402ef4:	d0d4      	beq.n	402ea0 <PIOD_Handler+0x40>
  402ef6:	e7ca      	b.n	402e8e <PIOD_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402ef8:	6c61      	ldr	r1, [r4, #68]	; 0x44
  402efa:	4229      	tst	r1, r5
  402efc:	d0ca      	beq.n	402e94 <PIOD_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402efe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  402f00:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402f02:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  402f04:	439d      	bics	r5, r3
  402f06:	d0cb      	beq.n	402ea0 <PIOD_Handler+0x40>
  402f08:	e7c4      	b.n	402e94 <PIOD_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402f0a:	6d61      	ldr	r1, [r4, #84]	; 0x54
  402f0c:	4229      	tst	r1, r5
  402f0e:	d0c4      	beq.n	402e9a <PIOD_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402f10:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  402f12:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402f14:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  402f16:	439d      	bics	r5, r3
  402f18:	d0c2      	beq.n	402ea0 <PIOD_Handler+0x40>
  402f1a:	e7be      	b.n	402e9a <PIOD_Handler+0x3a>
  402f1c:	00402aa1 	.word	0x00402aa1
  402f20:	400e1400 	.word	0x400e1400
  402f24:	00402aa5 	.word	0x00402aa5
  402f28:	20429540 	.word	0x20429540

00402f2c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  402f2c:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
  402f2e:	4b2e      	ldr	r3, [pc, #184]	; (402fe8 <PIOE_Handler+0xbc>)
  402f30:	482e      	ldr	r0, [pc, #184]	; (402fec <PIOE_Handler+0xc0>)
  402f32:	4798      	blx	r3
  402f34:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  402f36:	4b2e      	ldr	r3, [pc, #184]	; (402ff0 <PIOE_Handler+0xc4>)
  402f38:	482c      	ldr	r0, [pc, #176]	; (402fec <PIOE_Handler+0xc0>)
  402f3a:	4798      	blx	r3
	if (status != 0) {
  402f3c:	4005      	ands	r5, r0
  402f3e:	d015      	beq.n	402f6c <PIOE_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  402f40:	4c2c      	ldr	r4, [pc, #176]	; (402ff4 <PIOE_Handler+0xc8>)
  402f42:	6820      	ldr	r0, [r4, #0]
  402f44:	2811      	cmp	r0, #17
  402f46:	d019      	beq.n	402f7c <PIOE_Handler+0x50>
  402f48:	6920      	ldr	r0, [r4, #16]
  402f4a:	2811      	cmp	r0, #17
  402f4c:	d01f      	beq.n	402f8e <PIOE_Handler+0x62>
  402f4e:	6a20      	ldr	r0, [r4, #32]
  402f50:	2811      	cmp	r0, #17
  402f52:	d025      	beq.n	402fa0 <PIOE_Handler+0x74>
  402f54:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402f56:	2811      	cmp	r0, #17
  402f58:	d02b      	beq.n	402fb2 <PIOE_Handler+0x86>
  402f5a:	6c20      	ldr	r0, [r4, #64]	; 0x40
  402f5c:	2811      	cmp	r0, #17
  402f5e:	d031      	beq.n	402fc4 <PIOE_Handler+0x98>
  402f60:	6d20      	ldr	r0, [r4, #80]	; 0x50
  402f62:	2811      	cmp	r0, #17
  402f64:	d037      	beq.n	402fd6 <PIOE_Handler+0xaa>
  402f66:	6e20      	ldr	r0, [r4, #96]	; 0x60
  402f68:	2811      	cmp	r0, #17
  402f6a:	d000      	beq.n	402f6e <PIOE_Handler+0x42>
  402f6c:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402f6e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  402f70:	4229      	tst	r1, r5
  402f72:	d0fb      	beq.n	402f6c <PIOE_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402f74:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	pio_handler_process(PIOE, ID_PIOE);
}
  402f76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402f7a:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402f7c:	6861      	ldr	r1, [r4, #4]
  402f7e:	420d      	tst	r5, r1
  402f80:	d0e2      	beq.n	402f48 <PIOE_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402f82:	68e3      	ldr	r3, [r4, #12]
  402f84:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402f86:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
  402f88:	439d      	bics	r5, r3
  402f8a:	d0ef      	beq.n	402f6c <PIOE_Handler+0x40>
  402f8c:	e7dc      	b.n	402f48 <PIOE_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402f8e:	6961      	ldr	r1, [r4, #20]
  402f90:	4229      	tst	r1, r5
  402f92:	d0dc      	beq.n	402f4e <PIOE_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402f94:	69e3      	ldr	r3, [r4, #28]
  402f96:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402f98:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
  402f9a:	439d      	bics	r5, r3
  402f9c:	d0e6      	beq.n	402f6c <PIOE_Handler+0x40>
  402f9e:	e7d6      	b.n	402f4e <PIOE_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402fa0:	6a61      	ldr	r1, [r4, #36]	; 0x24
  402fa2:	4229      	tst	r1, r5
  402fa4:	d0d6      	beq.n	402f54 <PIOE_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402fa6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402fa8:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402faa:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
  402fac:	439d      	bics	r5, r3
  402fae:	d0dd      	beq.n	402f6c <PIOE_Handler+0x40>
  402fb0:	e7d0      	b.n	402f54 <PIOE_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402fb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402fb4:	4229      	tst	r1, r5
  402fb6:	d0d0      	beq.n	402f5a <PIOE_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402fb8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402fba:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402fbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
  402fbe:	439d      	bics	r5, r3
  402fc0:	d0d4      	beq.n	402f6c <PIOE_Handler+0x40>
  402fc2:	e7ca      	b.n	402f5a <PIOE_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402fc4:	6c61      	ldr	r1, [r4, #68]	; 0x44
  402fc6:	4229      	tst	r1, r5
  402fc8:	d0ca      	beq.n	402f60 <PIOE_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402fca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  402fcc:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402fce:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
  402fd0:	439d      	bics	r5, r3
  402fd2:	d0cb      	beq.n	402f6c <PIOE_Handler+0x40>
  402fd4:	e7c4      	b.n	402f60 <PIOE_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402fd6:	6d61      	ldr	r1, [r4, #84]	; 0x54
  402fd8:	4229      	tst	r1, r5
  402fda:	d0c4      	beq.n	402f66 <PIOE_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402fdc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  402fde:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402fe0:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
  402fe2:	439d      	bics	r5, r3
  402fe4:	d0c2      	beq.n	402f6c <PIOE_Handler+0x40>
  402fe6:	e7be      	b.n	402f66 <PIOE_Handler+0x3a>
  402fe8:	00402aa1 	.word	0x00402aa1
  402fec:	400e1600 	.word	0x400e1600
  402ff0:	00402aa5 	.word	0x00402aa5
  402ff4:	20429540 	.word	0x20429540

00402ff8 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  402ff8:	3802      	subs	r0, #2
  402ffa:	2802      	cmp	r0, #2
  402ffc:	d80d      	bhi.n	40301a <pmc_mck_set_division+0x22>
  402ffe:	4b08      	ldr	r3, [pc, #32]	; (403020 <pmc_mck_set_division+0x28>)
  403000:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  403004:	4907      	ldr	r1, [pc, #28]	; (403024 <pmc_mck_set_division+0x2c>)
  403006:	6b0b      	ldr	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  403008:	460a      	mov	r2, r1
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40300a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40300e:	4303      	orrs	r3, r0
	PMC->PMC_MCKR =
  403010:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  403012:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403014:	071b      	lsls	r3, r3, #28
  403016:	d5fc      	bpl.n	403012 <pmc_mck_set_division+0x1a>
}
  403018:	4770      	bx	lr
{
  40301a:	2000      	movs	r0, #0
  40301c:	e7f2      	b.n	403004 <pmc_mck_set_division+0xc>
  40301e:	bf00      	nop
  403020:	00409470 	.word	0x00409470
  403024:	400e0600 	.word	0x400e0600

00403028 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  403028:	4913      	ldr	r1, [pc, #76]	; (403078 <pmc_switch_mck_to_pllack+0x50>)
  40302a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40302c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  403030:	4318      	orrs	r0, r3
  403032:	6308      	str	r0, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403034:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  403036:	0718      	lsls	r0, r3, #28
  403038:	d407      	bmi.n	40304a <pmc_switch_mck_to_pllack+0x22>
  40303a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40303e:	e001      	b.n	403044 <pmc_switch_mck_to_pllack+0x1c>
			--ul_timeout) {
		if (ul_timeout == 0) {
  403040:	3b01      	subs	r3, #1
  403042:	d016      	beq.n	403072 <pmc_switch_mck_to_pllack+0x4a>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403044:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  403046:	0712      	lsls	r2, r2, #28
  403048:	d5fa      	bpl.n	403040 <pmc_switch_mck_to_pllack+0x18>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40304a:	490b      	ldr	r1, [pc, #44]	; (403078 <pmc_switch_mck_to_pllack+0x50>)
  40304c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40304e:	f023 0303 	bic.w	r3, r3, #3
  403052:	f043 0302 	orr.w	r3, r3, #2
  403056:	630b      	str	r3, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403058:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  40305a:	0718      	lsls	r0, r3, #28
  40305c:	d407      	bmi.n	40306e <pmc_switch_mck_to_pllack+0x46>
  40305e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403062:	e001      	b.n	403068 <pmc_switch_mck_to_pllack+0x40>
			--ul_timeout) {
		if (ul_timeout == 0) {
  403064:	3b01      	subs	r3, #1
  403066:	d004      	beq.n	403072 <pmc_switch_mck_to_pllack+0x4a>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403068:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40306a:	0712      	lsls	r2, r2, #28
  40306c:	d5fa      	bpl.n	403064 <pmc_switch_mck_to_pllack+0x3c>
			return 1;
		}
	}

	return 0;
  40306e:	2000      	movs	r0, #0
}
  403070:	4770      	bx	lr
			return 1;
  403072:	2001      	movs	r0, #1
  403074:	4770      	bx	lr
  403076:	bf00      	nop
  403078:	400e0600 	.word	0x400e0600

0040307c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40307c:	b9a0      	cbnz	r0, 4030a8 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40307e:	4b0e      	ldr	r3, [pc, #56]	; (4030b8 <pmc_switch_mainck_to_xtal+0x3c>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  403080:	0209      	lsls	r1, r1, #8
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  403082:	480e      	ldr	r0, [pc, #56]	; (4030bc <pmc_switch_mainck_to_xtal+0x40>)
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  403084:	b289      	uxth	r1, r1
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  403086:	461a      	mov	r2, r3
{
  403088:	b430      	push	{r4, r5}
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40308a:	4c0d      	ldr	r4, [pc, #52]	; (4030c0 <pmc_switch_mainck_to_xtal+0x44>)
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40308c:	6a1d      	ldr	r5, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40308e:	402c      	ands	r4, r5
  403090:	4320      	orrs	r0, r4
  403092:	4301      	orrs	r1, r0
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  403094:	6219      	str	r1, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  403096:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403098:	07db      	lsls	r3, r3, #31
  40309a:	d5fc      	bpl.n	403096 <pmc_switch_mainck_to_xtal+0x1a>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40309c:	6a11      	ldr	r1, [r2, #32]
  40309e:	4b09      	ldr	r3, [pc, #36]	; (4030c4 <pmc_switch_mainck_to_xtal+0x48>)
  4030a0:	430b      	orrs	r3, r1
  4030a2:	6213      	str	r3, [r2, #32]
	}
}
  4030a4:	bc30      	pop	{r4, r5}
  4030a6:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4030a8:	4903      	ldr	r1, [pc, #12]	; (4030b8 <pmc_switch_mainck_to_xtal+0x3c>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4030aa:	4a07      	ldr	r2, [pc, #28]	; (4030c8 <pmc_switch_mainck_to_xtal+0x4c>)
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4030ac:	6a08      	ldr	r0, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4030ae:	4b07      	ldr	r3, [pc, #28]	; (4030cc <pmc_switch_mainck_to_xtal+0x50>)
  4030b0:	4002      	ands	r2, r0
  4030b2:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4030b4:	620b      	str	r3, [r1, #32]
  4030b6:	4770      	bx	lr
  4030b8:	400e0600 	.word	0x400e0600
  4030bc:	00370001 	.word	0x00370001
  4030c0:	ffc8fffc 	.word	0xffc8fffc
  4030c4:	01370000 	.word	0x01370000
  4030c8:	fec8fffc 	.word	0xfec8fffc
  4030cc:	01370002 	.word	0x01370002

004030d0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4030d0:	4b02      	ldr	r3, [pc, #8]	; (4030dc <pmc_osc_is_ready_mainck+0xc>)
  4030d2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4030d4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4030d8:	4770      	bx	lr
  4030da:	bf00      	nop
  4030dc:	400e0600 	.word	0x400e0600

004030e0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4030e0:	4b02      	ldr	r3, [pc, #8]	; (4030ec <pmc_disable_pllack+0xc>)
  4030e2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4030e6:	629a      	str	r2, [r3, #40]	; 0x28
  4030e8:	4770      	bx	lr
  4030ea:	bf00      	nop
  4030ec:	400e0600 	.word	0x400e0600

004030f0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4030f0:	4b02      	ldr	r3, [pc, #8]	; (4030fc <pmc_is_locked_pllack+0xc>)
  4030f2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4030f4:	f000 0002 	and.w	r0, r0, #2
  4030f8:	4770      	bx	lr
  4030fa:	bf00      	nop
  4030fc:	400e0600 	.word	0x400e0600

00403100 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  403100:	283f      	cmp	r0, #63	; 0x3f
  403102:	d81a      	bhi.n	40313a <pmc_enable_periph_clk+0x3a>
		return 1;
	}

	if (ul_id < 32) {
  403104:	281f      	cmp	r0, #31
  403106:	d80a      	bhi.n	40311e <pmc_enable_periph_clk+0x1e>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  403108:	2301      	movs	r3, #1
  40310a:	4a0e      	ldr	r2, [pc, #56]	; (403144 <pmc_enable_periph_clk+0x44>)
  40310c:	fa03 f000 	lsl.w	r0, r3, r0
  403110:	6991      	ldr	r1, [r2, #24]
  403112:	ea30 0301 	bics.w	r3, r0, r1
  403116:	d012      	beq.n	40313e <pmc_enable_periph_clk+0x3e>
			PMC->PMC_PCER0 = 1 << ul_id;
  403118:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40311a:	2000      	movs	r0, #0
  40311c:	4770      	bx	lr
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40311e:	2301      	movs	r3, #1
		ul_id -= 32;
  403120:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  403122:	4a08      	ldr	r2, [pc, #32]	; (403144 <pmc_enable_periph_clk+0x44>)
  403124:	fa03 f000 	lsl.w	r0, r3, r0
  403128:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
  40312c:	ea30 0303 	bics.w	r3, r0, r3
  403130:	d005      	beq.n	40313e <pmc_enable_periph_clk+0x3e>
			PMC->PMC_PCER1 = 1 << ul_id;
  403132:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
	return 0;
  403136:	2000      	movs	r0, #0
  403138:	4770      	bx	lr
		return 1;
  40313a:	2001      	movs	r0, #1
  40313c:	4770      	bx	lr
	return 0;
  40313e:	2000      	movs	r0, #0
}
  403140:	4770      	bx	lr
  403142:	bf00      	nop
  403144:	400e0600 	.word	0x400e0600

00403148 <pmc_pck_set_prescaler>:
 *
 * \param ul_id Peripheral ID.
 * \param ul_pres Prescaler value.
 */
void pmc_pck_set_prescaler(uint32_t ul_id, uint32_t ul_pres)
{
  403148:	4b0b      	ldr	r3, [pc, #44]	; (403178 <pmc_pck_set_prescaler+0x30>)
  40314a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40314e:	b410      	push	{r4}
  403150:	eb03 0480 	add.w	r4, r3, r0, lsl #2
  403154:	fa02 f000 	lsl.w	r0, r2, r0
	PMC->PMC_PCK[ul_id] =
			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_PRES_Msk) | ul_pres;
  403158:	6c22      	ldr	r2, [r4, #64]	; 0x40
  40315a:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  40315e:	4311      	orrs	r1, r2
	PMC->PMC_PCK[ul_id] =
  403160:	6421      	str	r1, [r4, #64]	; 0x40
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  403162:	e002      	b.n	40316a <pmc_pck_set_prescaler+0x22>
			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
  403164:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  403166:	4202      	tst	r2, r0
  403168:	d102      	bne.n	403170 <pmc_pck_set_prescaler+0x28>
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  40316a:	681a      	ldr	r2, [r3, #0]
  40316c:	4202      	tst	r2, r0
  40316e:	d1f9      	bne.n	403164 <pmc_pck_set_prescaler+0x1c>
}
  403170:	f85d 4b04 	ldr.w	r4, [sp], #4
  403174:	4770      	bx	lr
  403176:	bf00      	nop
  403178:	400e0600 	.word	0x400e0600

0040317c <pmc_pck_set_source>:
 *
 * \param ul_id Peripheral ID.
 * \param ul_source Source selection value.
 */
void pmc_pck_set_source(uint32_t ul_id, uint32_t ul_source)
{
  40317c:	4b0b      	ldr	r3, [pc, #44]	; (4031ac <pmc_pck_set_source+0x30>)
  40317e:	f44f 7280 	mov.w	r2, #256	; 0x100
  403182:	b410      	push	{r4}
  403184:	eb03 0480 	add.w	r4, r3, r0, lsl #2
  403188:	fa02 f000 	lsl.w	r0, r2, r0
	PMC->PMC_PCK[ul_id] =
			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_CSS_Msk) | ul_source;
  40318c:	6c22      	ldr	r2, [r4, #64]	; 0x40
  40318e:	f022 0207 	bic.w	r2, r2, #7
  403192:	4311      	orrs	r1, r2
	PMC->PMC_PCK[ul_id] =
  403194:	6421      	str	r1, [r4, #64]	; 0x40
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  403196:	e002      	b.n	40319e <pmc_pck_set_source+0x22>
			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
  403198:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  40319a:	4202      	tst	r2, r0
  40319c:	d102      	bne.n	4031a4 <pmc_pck_set_source+0x28>
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  40319e:	681a      	ldr	r2, [r3, #0]
  4031a0:	4202      	tst	r2, r0
  4031a2:	d1f9      	bne.n	403198 <pmc_pck_set_source+0x1c>
}
  4031a4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4031a8:	4770      	bx	lr
  4031aa:	bf00      	nop
  4031ac:	400e0600 	.word	0x400e0600

004031b0 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  4031b0:	f44f 7380 	mov.w	r3, #256	; 0x100
  4031b4:	4a02      	ldr	r2, [pc, #8]	; (4031c0 <pmc_enable_pck+0x10>)
  4031b6:	fa03 f000 	lsl.w	r0, r3, r0
  4031ba:	6010      	str	r0, [r2, #0]
  4031bc:	4770      	bx	lr
  4031be:	bf00      	nop
  4031c0:	400e0600 	.word	0x400e0600

004031c4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4031c4:	e7fe      	b.n	4031c4 <Dummy_Handler>
  4031c6:	bf00      	nop

004031c8 <Dummy_Handler2>:
	while (1) {
	}
}

void Dummy_Handler2(void)
{
  4031c8:	e7fe      	b.n	4031c8 <Dummy_Handler2>
  4031ca:	bf00      	nop

004031cc <Reset_Handler>:
        if (pSrc != pDest) {
  4031cc:	4920      	ldr	r1, [pc, #128]	; (403250 <Reset_Handler+0x84>)
  4031ce:	4821      	ldr	r0, [pc, #132]	; (403254 <Reset_Handler+0x88>)
  4031d0:	4281      	cmp	r1, r0
{
  4031d2:	b510      	push	{r4, lr}
  4031d4:	b082      	sub	sp, #8
        if (pSrc != pDest) {
  4031d6:	d009      	beq.n	4031ec <Reset_Handler+0x20>
                for (; pDest < &_erelocate;) {
  4031d8:	4b1f      	ldr	r3, [pc, #124]	; (403258 <Reset_Handler+0x8c>)
  4031da:	4298      	cmp	r0, r3
  4031dc:	d206      	bcs.n	4031ec <Reset_Handler+0x20>
                        *pDest++ = *pSrc++;
  4031de:	43c2      	mvns	r2, r0
  4031e0:	4c1e      	ldr	r4, [pc, #120]	; (40325c <Reset_Handler+0x90>)
  4031e2:	441a      	add	r2, r3
  4031e4:	f022 0203 	bic.w	r2, r2, #3
  4031e8:	3204      	adds	r2, #4
  4031ea:	47a0      	blx	r4
        for (pDest = &_szero; pDest < &_ezero;) {
  4031ec:	481c      	ldr	r0, [pc, #112]	; (403260 <Reset_Handler+0x94>)
  4031ee:	4b1d      	ldr	r3, [pc, #116]	; (403264 <Reset_Handler+0x98>)
  4031f0:	4298      	cmp	r0, r3
  4031f2:	d207      	bcs.n	403204 <Reset_Handler+0x38>
                *pDest++ = 0;
  4031f4:	43c2      	mvns	r2, r0
  4031f6:	2100      	movs	r1, #0
  4031f8:	4c1b      	ldr	r4, [pc, #108]	; (403268 <Reset_Handler+0x9c>)
  4031fa:	441a      	add	r2, r3
  4031fc:	f022 0203 	bic.w	r2, r2, #3
  403200:	3204      	adds	r2, #4
  403202:	47a0      	blx	r4
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  403204:	4b19      	ldr	r3, [pc, #100]	; (40326c <Reset_Handler+0xa0>)
  403206:	4a1a      	ldr	r2, [pc, #104]	; (403270 <Reset_Handler+0xa4>)
  403208:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40320c:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40320e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403212:	fab3 f383 	clz	r3, r3
  403216:	095b      	lsrs	r3, r3, #5
  403218:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40321a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  40321c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403220:	4a14      	ldr	r2, [pc, #80]	; (403274 <Reset_Handler+0xa8>)
  403222:	2300      	movs	r3, #0
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  403224:	4914      	ldr	r1, [pc, #80]	; (403278 <Reset_Handler+0xac>)
  403226:	7013      	strb	r3, [r2, #0]
	return flags;
  403228:	9801      	ldr	r0, [sp, #4]
  40322a:	680b      	ldr	r3, [r1, #0]
  40322c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  403230:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb");
  403232:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403236:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40323a:	b120      	cbz	r0, 403246 <Reset_Handler+0x7a>
		cpu_irq_enable();
  40323c:	2301      	movs	r3, #1
  40323e:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dmb");
  403240:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403244:	b662      	cpsie	i
        __libc_init_array();
  403246:	4b0d      	ldr	r3, [pc, #52]	; (40327c <Reset_Handler+0xb0>)
  403248:	4798      	blx	r3
        main();
  40324a:	4b0d      	ldr	r3, [pc, #52]	; (403280 <Reset_Handler+0xb4>)
  40324c:	4798      	blx	r3
  40324e:	e7fe      	b.n	40324e <Reset_Handler+0x82>
  403250:	0040a014 	.word	0x0040a014
  403254:	20400000 	.word	0x20400000
  403258:	20400a08 	.word	0x20400a08
  40325c:	00406bc9 	.word	0x00406bc9
  403260:	20402000 	.word	0x20402000
  403264:	2043fcfc 	.word	0x2043fcfc
  403268:	00406cfd 	.word	0x00406cfd
  40326c:	00400000 	.word	0x00400000
  403270:	e000ed00 	.word	0xe000ed00
  403274:	20400028 	.word	0x20400028
  403278:	e000ed88 	.word	0xe000ed88
  40327c:	004065e1 	.word	0x004065e1
  403280:	004052c1 	.word	0x004052c1

00403284 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  403284:	4a32      	ldr	r2, [pc, #200]	; (403350 <SystemCoreClockUpdate+0xcc>)
  403286:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403288:	f003 0303 	and.w	r3, r3, #3
  40328c:	2b01      	cmp	r3, #1
  40328e:	d03c      	beq.n	40330a <SystemCoreClockUpdate+0x86>
  403290:	d325      	bcc.n	4032de <SystemCoreClockUpdate+0x5a>
  403292:	2b02      	cmp	r3, #2
  403294:	d00d      	beq.n	4032b2 <SystemCoreClockUpdate+0x2e>
  403296:	482f      	ldr	r0, [pc, #188]	; (403354 <SystemCoreClockUpdate+0xd0>)
  403298:	6803      	ldr	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40329a:	492d      	ldr	r1, [pc, #180]	; (403350 <SystemCoreClockUpdate+0xcc>)
  40329c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  40329e:	f002 0270 	and.w	r2, r2, #112	; 0x70
  4032a2:	2a70      	cmp	r2, #112	; 0x70
  4032a4:	d02b      	beq.n	4032fe <SystemCoreClockUpdate+0x7a>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4032a6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4032a8:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4032ac:	40d3      	lsrs	r3, r2
  4032ae:	6003      	str	r3, [r0, #0]
  4032b0:	4770      	bx	lr
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4032b2:	6a13      	ldr	r3, [r2, #32]
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4032b4:	4827      	ldr	r0, [pc, #156]	; (403354 <SystemCoreClockUpdate+0xd0>)
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4032b6:	01db      	lsls	r3, r3, #7
  4032b8:	d53a      	bpl.n	403330 <SystemCoreClockUpdate+0xac>
            SystemCoreClock *= 3U;
  4032ba:	4b27      	ldr	r3, [pc, #156]	; (403358 <SystemCoreClockUpdate+0xd4>)
  4032bc:	6003      	str	r3, [r0, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4032be:	4924      	ldr	r1, [pc, #144]	; (403350 <SystemCoreClockUpdate+0xcc>)
  4032c0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4032c2:	f002 0203 	and.w	r2, r2, #3
  4032c6:	2a02      	cmp	r2, #2
  4032c8:	d1e7      	bne.n	40329a <SystemCoreClockUpdate+0x16>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4032ca:	6a8a      	ldr	r2, [r1, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4032cc:	6a89      	ldr	r1, [r1, #40]	; 0x28
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4032ce:	f3c2 420a 	ubfx	r2, r2, #16, #11
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4032d2:	b2c9      	uxtb	r1, r1
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4032d4:	fb02 3303 	mla	r3, r2, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4032d8:	fbb3 f3f1 	udiv	r3, r3, r1
  4032dc:	e7dd      	b.n	40329a <SystemCoreClockUpdate+0x16>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4032de:	4b1f      	ldr	r3, [pc, #124]	; (40335c <SystemCoreClockUpdate+0xd8>)
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4032e0:	491b      	ldr	r1, [pc, #108]	; (403350 <SystemCoreClockUpdate+0xcc>)
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4032e2:	695b      	ldr	r3, [r3, #20]
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4032e4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4032e6:	f013 0f80 	tst.w	r3, #128	; 0x80
  4032ea:	481a      	ldr	r0, [pc, #104]	; (403354 <SystemCoreClockUpdate+0xd0>)
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4032ec:	f002 0270 	and.w	r2, r2, #112	; 0x70
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4032f0:	bf14      	ite	ne
  4032f2:	f44f 4300 	movne.w	r3, #32768	; 0x8000
  4032f6:	f44f 43fa 	moveq.w	r3, #32000	; 0x7d00
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4032fa:	2a70      	cmp	r2, #112	; 0x70
  4032fc:	d1d3      	bne.n	4032a6 <SystemCoreClockUpdate+0x22>
    SystemCoreClock /= 3U;
  4032fe:	4a18      	ldr	r2, [pc, #96]	; (403360 <SystemCoreClockUpdate+0xdc>)
  403300:	fba2 2303 	umull	r2, r3, r2, r3
  403304:	085b      	lsrs	r3, r3, #1
  403306:	6003      	str	r3, [r0, #0]
  403308:	4770      	bx	lr
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40330a:	6a13      	ldr	r3, [r2, #32]
  40330c:	01d9      	lsls	r1, r3, #7
  40330e:	d40c      	bmi.n	40332a <SystemCoreClockUpdate+0xa6>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403310:	4810      	ldr	r0, [pc, #64]	; (403354 <SystemCoreClockUpdate+0xd0>)
  403312:	4914      	ldr	r1, [pc, #80]	; (403364 <SystemCoreClockUpdate+0xe0>)
  403314:	6001      	str	r1, [r0, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  403316:	6a12      	ldr	r2, [r2, #32]
  403318:	f002 0270 	and.w	r2, r2, #112	; 0x70
  40331c:	2a10      	cmp	r2, #16
  40331e:	d011      	beq.n	403344 <SystemCoreClockUpdate+0xc0>
  403320:	4b0d      	ldr	r3, [pc, #52]	; (403358 <SystemCoreClockUpdate+0xd4>)
  403322:	2a20      	cmp	r2, #32
  403324:	bf18      	it	ne
  403326:	460b      	movne	r3, r1
  403328:	e7b7      	b.n	40329a <SystemCoreClockUpdate+0x16>
  40332a:	4b0b      	ldr	r3, [pc, #44]	; (403358 <SystemCoreClockUpdate+0xd4>)
  40332c:	4809      	ldr	r0, [pc, #36]	; (403354 <SystemCoreClockUpdate+0xd0>)
  40332e:	e7b4      	b.n	40329a <SystemCoreClockUpdate+0x16>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403330:	4b0c      	ldr	r3, [pc, #48]	; (403364 <SystemCoreClockUpdate+0xe0>)
  403332:	6003      	str	r3, [r0, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  403334:	6a12      	ldr	r2, [r2, #32]
  403336:	f002 0270 	and.w	r2, r2, #112	; 0x70
  40333a:	2a10      	cmp	r2, #16
  40333c:	d004      	beq.n	403348 <SystemCoreClockUpdate+0xc4>
  40333e:	2a20      	cmp	r2, #32
  403340:	d0bb      	beq.n	4032ba <SystemCoreClockUpdate+0x36>
  403342:	e7bc      	b.n	4032be <SystemCoreClockUpdate+0x3a>
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  403344:	4b08      	ldr	r3, [pc, #32]	; (403368 <SystemCoreClockUpdate+0xe4>)
  403346:	e7a8      	b.n	40329a <SystemCoreClockUpdate+0x16>
            SystemCoreClock *= 2U;
  403348:	4b07      	ldr	r3, [pc, #28]	; (403368 <SystemCoreClockUpdate+0xe4>)
  40334a:	6003      	str	r3, [r0, #0]
          break;
  40334c:	e7b7      	b.n	4032be <SystemCoreClockUpdate+0x3a>
  40334e:	bf00      	nop
  403350:	400e0600 	.word	0x400e0600
  403354:	2040002c 	.word	0x2040002c
  403358:	00b71b00 	.word	0x00b71b00
  40335c:	400e1810 	.word	0x400e1810
  403360:	aaaaaaab 	.word	0xaaaaaaab
  403364:	003d0900 	.word	0x003d0900
  403368:	007a1200 	.word	0x007a1200

0040336c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  40336c:	4b16      	ldr	r3, [pc, #88]	; (4033c8 <system_init_flash+0x5c>)
  40336e:	4298      	cmp	r0, r3
  403370:	d917      	bls.n	4033a2 <system_init_flash+0x36>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  403372:	4b16      	ldr	r3, [pc, #88]	; (4033cc <system_init_flash+0x60>)
  403374:	4298      	cmp	r0, r3
  403376:	d910      	bls.n	40339a <system_init_flash+0x2e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  403378:	4b15      	ldr	r3, [pc, #84]	; (4033d0 <system_init_flash+0x64>)
  40337a:	4298      	cmp	r0, r3
  40337c:	d91a      	bls.n	4033b4 <system_init_flash+0x48>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40337e:	4b15      	ldr	r3, [pc, #84]	; (4033d4 <system_init_flash+0x68>)
  403380:	4298      	cmp	r0, r3
  403382:	d913      	bls.n	4033ac <system_init_flash+0x40>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  403384:	4b14      	ldr	r3, [pc, #80]	; (4033d8 <system_init_flash+0x6c>)
  403386:	4298      	cmp	r0, r3
  403388:	d918      	bls.n	4033bc <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  40338a:	4b14      	ldr	r3, [pc, #80]	; (4033dc <system_init_flash+0x70>)
  40338c:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40338e:	4b14      	ldr	r3, [pc, #80]	; (4033e0 <system_init_flash+0x74>)
  403390:	bf94      	ite	ls
  403392:	4a14      	ldrls	r2, [pc, #80]	; (4033e4 <system_init_flash+0x78>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  403394:	4a14      	ldrhi	r2, [pc, #80]	; (4033e8 <system_init_flash+0x7c>)
  403396:	601a      	str	r2, [r3, #0]
  403398:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40339a:	4b11      	ldr	r3, [pc, #68]	; (4033e0 <system_init_flash+0x74>)
  40339c:	4a13      	ldr	r2, [pc, #76]	; (4033ec <system_init_flash+0x80>)
  40339e:	601a      	str	r2, [r3, #0]
  4033a0:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4033a2:	4b0f      	ldr	r3, [pc, #60]	; (4033e0 <system_init_flash+0x74>)
  4033a4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4033a8:	601a      	str	r2, [r3, #0]
  4033aa:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4033ac:	4b0c      	ldr	r3, [pc, #48]	; (4033e0 <system_init_flash+0x74>)
  4033ae:	4a10      	ldr	r2, [pc, #64]	; (4033f0 <system_init_flash+0x84>)
  4033b0:	601a      	str	r2, [r3, #0]
  4033b2:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4033b4:	4b0a      	ldr	r3, [pc, #40]	; (4033e0 <system_init_flash+0x74>)
  4033b6:	4a0f      	ldr	r2, [pc, #60]	; (4033f4 <system_init_flash+0x88>)
  4033b8:	601a      	str	r2, [r3, #0]
  4033ba:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4033bc:	4b08      	ldr	r3, [pc, #32]	; (4033e0 <system_init_flash+0x74>)
  4033be:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4033c2:	601a      	str	r2, [r3, #0]
  4033c4:	4770      	bx	lr
  4033c6:	bf00      	nop
  4033c8:	015ef3bf 	.word	0x015ef3bf
  4033cc:	02bde77f 	.word	0x02bde77f
  4033d0:	041cdb3f 	.word	0x041cdb3f
  4033d4:	057bceff 	.word	0x057bceff
  4033d8:	06dac2bf 	.word	0x06dac2bf
  4033dc:	0839b67f 	.word	0x0839b67f
  4033e0:	400e0c00 	.word	0x400e0c00
  4033e4:	04000500 	.word	0x04000500
  4033e8:	04000600 	.word	0x04000600
  4033ec:	04000100 	.word	0x04000100
  4033f0:	04000300 	.word	0x04000300
  4033f4:	04000200 	.word	0x04000200

004033f8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4033f8:	4a0d      	ldr	r2, [pc, #52]	; (403430 <_sbrk+0x38>)
	int ramend = (int)&__ram_end__;
  4033fa:	490e      	ldr	r1, [pc, #56]	; (403434 <_sbrk+0x3c>)
	if (heap == NULL) {
  4033fc:	6813      	ldr	r3, [r2, #0]
  4033fe:	b143      	cbz	r3, 403412 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
  403400:	4418      	add	r0, r3
  403402:	4281      	cmp	r1, r0
  403404:	db02      	blt.n	40340c <_sbrk+0x14>
		return (caddr_t) -1;	
	}

	heap += incr;
  403406:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  403408:	4618      	mov	r0, r3
  40340a:	4770      	bx	lr
		return (caddr_t) -1;	
  40340c:	f04f 30ff 	mov.w	r0, #4294967295
  403410:	4770      	bx	lr
{
  403412:	b410      	push	{r4}
		heap = (unsigned char *)&_end;
  403414:	4c08      	ldr	r4, [pc, #32]	; (403438 <_sbrk+0x40>)
	if (((int)prev_heap + incr) > ramend) {
  403416:	4420      	add	r0, r4
		heap = (unsigned char *)&_end;
  403418:	6014      	str	r4, [r2, #0]
	if (((int)prev_heap + incr) > ramend) {
  40341a:	4281      	cmp	r1, r0
  40341c:	db04      	blt.n	403428 <_sbrk+0x30>
	heap += incr;
  40341e:	6010      	str	r0, [r2, #0]
	return (caddr_t) prev_heap;
  403420:	4620      	mov	r0, r4
}
  403422:	f85d 4b04 	ldr.w	r4, [sp], #4
  403426:	4770      	bx	lr
		return (caddr_t) -1;	
  403428:	f04f 30ff 	mov.w	r0, #4294967295
  40342c:	e7f9      	b.n	403422 <_sbrk+0x2a>
  40342e:	bf00      	nop
  403430:	204295b0 	.word	0x204295b0
  403434:	2045fffc 	.word	0x2045fffc
  403438:	20441f00 	.word	0x20441f00

0040343c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  40343c:	f04f 30ff 	mov.w	r0, #4294967295
  403440:	4770      	bx	lr
  403442:	bf00      	nop

00403444 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  403444:	f44f 5300 	mov.w	r3, #8192	; 0x2000

	return 0;
}
  403448:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
  40344a:	604b      	str	r3, [r1, #4]
}
  40344c:	4770      	bx	lr
  40344e:	bf00      	nop

00403450 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  403450:	2001      	movs	r0, #1
  403452:	4770      	bx	lr

00403454 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  403454:	2000      	movs	r0, #0
  403456:	4770      	bx	lr

00403458 <xEventGroupSetBits.part.0>:

	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
  403458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40345c:	4604      	mov	r4, r0
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	vTaskSuspendAll();
  40345e:	4b15      	ldr	r3, [pc, #84]	; (4034b4 <xEventGroupSetBits.part.0+0x5c>)
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
  403460:	460e      	mov	r6, r1
	vTaskSuspendAll();
  403462:	4798      	blx	r3
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
  403464:	6823      	ldr	r3, [r4, #0]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  403466:	f104 070c 	add.w	r7, r4, #12
		pxListItem = listGET_HEAD_ENTRY( pxList );
  40346a:	6920      	ldr	r0, [r4, #16]
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
  40346c:	2500      	movs	r5, #0
		pxEventBits->uxEventBits |= uxBitsToSet;
  40346e:	4333      	orrs	r3, r6
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
  403470:	4e11      	ldr	r6, [pc, #68]	; (4034b8 <xEventGroupSetBits.part.0+0x60>)
		pxEventBits->uxEventBits |= uxBitsToSet;
  403472:	6023      	str	r3, [r4, #0]
		while( pxListItem != pxListEnd )
  403474:	4287      	cmp	r7, r0
  403476:	6821      	ldr	r1, [r4, #0]
  403478:	d014      	beq.n	4034a4 <xEventGroupSetBits.part.0+0x4c>
			pxNext = listGET_NEXT( pxListItem );
  40347a:	e890 0108 	ldmia.w	r0, {r3, r8}
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
  40347e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
  403482:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
  403486:	d102      	bne.n	40348e <xEventGroupSetBits.part.0+0x36>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
  403488:	420a      	tst	r2, r1
  40348a:	d103      	bne.n	403494 <xEventGroupSetBits.part.0+0x3c>
  40348c:	e008      	b.n	4034a0 <xEventGroupSetBits.part.0+0x48>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
  40348e:	ea32 0e01 	bics.w	lr, r2, r1
  403492:	d105      	bne.n	4034a0 <xEventGroupSetBits.part.0+0x48>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
  403494:	01db      	lsls	r3, r3, #7
  403496:	d500      	bpl.n	40349a <xEventGroupSetBits.part.0+0x42>
					uxBitsToClear |= uxBitsWaitedFor;
  403498:	4315      	orrs	r5, r2
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
  40349a:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  40349e:	47b0      	blx	r6
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
  4034a0:	4640      	mov	r0, r8
  4034a2:	e7e7      	b.n	403474 <xEventGroupSetBits.part.0+0x1c>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
  4034a4:	ea21 0105 	bic.w	r1, r1, r5
	}
	( void ) xTaskResumeAll();
  4034a8:	4b04      	ldr	r3, [pc, #16]	; (4034bc <xEventGroupSetBits.part.0+0x64>)
		pxEventBits->uxEventBits &= ~uxBitsToClear;
  4034aa:	6021      	str	r1, [r4, #0]
	( void ) xTaskResumeAll();
  4034ac:	4798      	blx	r3

	return pxEventBits->uxEventBits;
  4034ae:	6820      	ldr	r0, [r4, #0]
}
  4034b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4034b4:	00403f19 	.word	0x00403f19
  4034b8:	004043f1 	.word	0x004043f1
  4034bc:	004040b9 	.word	0x004040b9

004034c0 <vEventGroupClearBitsCallback>:
	configASSERT( xEventGroup );
  4034c0:	b1d0      	cbz	r0, 4034f8 <vEventGroupClearBitsCallback+0x38>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
  4034c2:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
  4034c6:	d00a      	beq.n	4034de <vEventGroupClearBitsCallback+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  4034c8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4034cc:	b672      	cpsid	i
  4034ce:	f383 8811 	msr	BASEPRI, r3
  4034d2:	f3bf 8f6f 	isb	sy
  4034d6:	f3bf 8f4f 	dsb	sy
  4034da:	b662      	cpsie	i
  4034dc:	e7fe      	b.n	4034dc <vEventGroupClearBitsCallback+0x1c>
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
  4034de:	b570      	push	{r4, r5, r6, lr}
  4034e0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  4034e2:	4b0b      	ldr	r3, [pc, #44]	; (403510 <vEventGroupClearBitsCallback+0x50>)
  4034e4:	460d      	mov	r5, r1
  4034e6:	4798      	blx	r3
		pxEventBits->uxEventBits &= ~uxBitsToClear;
  4034e8:	6823      	ldr	r3, [r4, #0]
	taskEXIT_CRITICAL();
  4034ea:	4a0a      	ldr	r2, [pc, #40]	; (403514 <vEventGroupClearBitsCallback+0x54>)
		pxEventBits->uxEventBits &= ~uxBitsToClear;
  4034ec:	ea23 0305 	bic.w	r3, r3, r5
  4034f0:	6023      	str	r3, [r4, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
  4034f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
  4034f6:	4710      	bx	r2
  4034f8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4034fc:	b672      	cpsid	i
  4034fe:	f383 8811 	msr	BASEPRI, r3
  403502:	f3bf 8f6f 	isb	sy
  403506:	f3bf 8f4f 	dsb	sy
  40350a:	b662      	cpsie	i
  40350c:	e7fe      	b.n	40350c <vEventGroupClearBitsCallback+0x4c>
  40350e:	bf00      	nop
  403510:	00403645 	.word	0x00403645
  403514:	00403691 	.word	0x00403691

00403518 <vEventGroupSetBitsCallback>:
	configASSERT( xEventGroup );
  403518:	b168      	cbz	r0, 403536 <vEventGroupSetBitsCallback+0x1e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
  40351a:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
  40351e:	d015      	beq.n	40354c <vEventGroupSetBitsCallback+0x34>
  403520:	f04f 0380 	mov.w	r3, #128	; 0x80
  403524:	b672      	cpsid	i
  403526:	f383 8811 	msr	BASEPRI, r3
  40352a:	f3bf 8f6f 	isb	sy
  40352e:	f3bf 8f4f 	dsb	sy
  403532:	b662      	cpsie	i
  403534:	e7fe      	b.n	403534 <vEventGroupSetBitsCallback+0x1c>
  403536:	f04f 0380 	mov.w	r3, #128	; 0x80
  40353a:	b672      	cpsid	i
  40353c:	f383 8811 	msr	BASEPRI, r3
  403540:	f3bf 8f6f 	isb	sy
  403544:	f3bf 8f4f 	dsb	sy
  403548:	b662      	cpsie	i
  40354a:	e7fe      	b.n	40354a <vEventGroupSetBitsCallback+0x32>
  40354c:	4b00      	ldr	r3, [pc, #0]	; (403550 <vEventGroupSetBitsCallback+0x38>)
  40354e:	4718      	bx	r3
  403550:	00403459 	.word	0x00403459

00403554 <xEventGroupClearBitsFromISR>:
	{
  403554:	b410      	push	{r4}
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL );
  403556:	4c04      	ldr	r4, [pc, #16]	; (403568 <xEventGroupClearBitsFromISR+0x14>)
  403558:	460a      	mov	r2, r1
  40355a:	2300      	movs	r3, #0
  40355c:	4601      	mov	r1, r0
  40355e:	46a4      	mov	ip, r4
  403560:	4802      	ldr	r0, [pc, #8]	; (40356c <xEventGroupClearBitsFromISR+0x18>)
	}
  403562:	f85d 4b04 	ldr.w	r4, [sp], #4
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL );
  403566:	4760      	bx	ip
  403568:	004048ed 	.word	0x004048ed
  40356c:	004034c1 	.word	0x004034c1

00403570 <xEventGroupGetBitsFromISR>:

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  403570:	f3ef 8311 	mrs	r3, BASEPRI
  403574:	f04f 0280 	mov.w	r2, #128	; 0x80
  403578:	b672      	cpsid	i
  40357a:	f382 8811 	msr	BASEPRI, r2
  40357e:	f3bf 8f6f 	isb	sy
  403582:	f3bf 8f4f 	dsb	sy
  403586:	b662      	cpsie	i
		uxReturn = pxEventBits->uxEventBits;
  403588:	6800      	ldr	r0, [r0, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  40358a:	f383 8811 	msr	BASEPRI, r3
}
  40358e:	4770      	bx	lr

00403590 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
  403590:	b410      	push	{r4}
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
  403592:	4c04      	ldr	r4, [pc, #16]	; (4035a4 <xEventGroupSetBitsFromISR+0x14>)
  403594:	4613      	mov	r3, r2
  403596:	460a      	mov	r2, r1
  403598:	4601      	mov	r1, r0
  40359a:	46a4      	mov	ip, r4
  40359c:	4802      	ldr	r0, [pc, #8]	; (4035a8 <xEventGroupSetBitsFromISR+0x18>)

		return xReturn;
	}
  40359e:	f85d 4b04 	ldr.w	r4, [sp], #4
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
  4035a2:	4760      	bx	ip
  4035a4:	004048ed 	.word	0x004048ed
  4035a8:	00403519 	.word	0x00403519

004035ac <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  4035ac:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  4035ae:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  4035b0:	689a      	ldr	r2, [r3, #8]
  4035b2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  4035b4:	689a      	ldr	r2, [r3, #8]
  4035b6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  4035b8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4035ba:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4035bc:	6803      	ldr	r3, [r0, #0]
  4035be:	3301      	adds	r3, #1
  4035c0:	6003      	str	r3, [r0, #0]
  4035c2:	4770      	bx	lr

004035c4 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  4035c4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  4035c6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4035c8:	1c6b      	adds	r3, r5, #1
  4035ca:	d011      	beq.n	4035f0 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4035cc:	f100 0208 	add.w	r2, r0, #8
  4035d0:	e000      	b.n	4035d4 <vListInsert+0x10>
  4035d2:	461a      	mov	r2, r3
  4035d4:	6853      	ldr	r3, [r2, #4]
  4035d6:	681c      	ldr	r4, [r3, #0]
  4035d8:	42a5      	cmp	r5, r4
  4035da:	d2fa      	bcs.n	4035d2 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4035dc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  4035de:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  4035e0:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  4035e2:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4035e4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4035e6:	6803      	ldr	r3, [r0, #0]
  4035e8:	3301      	adds	r3, #1
}
  4035ea:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
  4035ec:	6003      	str	r3, [r0, #0]
}
  4035ee:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
  4035f0:	6902      	ldr	r2, [r0, #16]
  4035f2:	6853      	ldr	r3, [r2, #4]
  4035f4:	e7f2      	b.n	4035dc <vListInsert+0x18>
  4035f6:	bf00      	nop

004035f8 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4035f8:	6842      	ldr	r2, [r0, #4]
  4035fa:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  4035fc:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4035fe:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  403600:	6882      	ldr	r2, [r0, #8]
  403602:	6841      	ldr	r1, [r0, #4]
  403604:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  403606:	685a      	ldr	r2, [r3, #4]
  403608:	4290      	cmp	r0, r2
  40360a:	d006      	beq.n	40361a <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  40360c:	2200      	movs	r2, #0
  40360e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  403610:	681a      	ldr	r2, [r3, #0]
  403612:	3a01      	subs	r2, #1
  403614:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  403616:	6818      	ldr	r0, [r3, #0]
}
  403618:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  40361a:	6882      	ldr	r2, [r0, #8]
  40361c:	605a      	str	r2, [r3, #4]
  40361e:	e7f5      	b.n	40360c <uxListRemove+0x14>

00403620 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
  403620:	4b07      	ldr	r3, [pc, #28]	; (403640 <pxCurrentTCBConst2>)
  403622:	6819      	ldr	r1, [r3, #0]
  403624:	6808      	ldr	r0, [r1, #0]
  403626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40362a:	f380 8809 	msr	PSP, r0
  40362e:	f3bf 8f6f 	isb	sy
  403632:	f04f 0000 	mov.w	r0, #0
  403636:	f380 8811 	msr	BASEPRI, r0
  40363a:	4770      	bx	lr
  40363c:	f3af 8000 	nop.w

00403640 <pxCurrentTCBConst2>:
  403640:	204295bc 	.word	0x204295bc

00403644 <vPortEnterCritical>:
	__asm volatile
  403644:	f04f 0380 	mov.w	r3, #128	; 0x80
  403648:	b672      	cpsid	i
  40364a:	f383 8811 	msr	BASEPRI, r3
  40364e:	f3bf 8f6f 	isb	sy
  403652:	f3bf 8f4f 	dsb	sy
  403656:	b662      	cpsie	i
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
  403658:	4a0b      	ldr	r2, [pc, #44]	; (403688 <vPortEnterCritical+0x44>)
  40365a:	6813      	ldr	r3, [r2, #0]
  40365c:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
  40365e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
  403660:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  403662:	d000      	beq.n	403666 <vPortEnterCritical+0x22>
  403664:	4770      	bx	lr
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  403666:	4b09      	ldr	r3, [pc, #36]	; (40368c <vPortEnterCritical+0x48>)
  403668:	681b      	ldr	r3, [r3, #0]
  40366a:	f013 0fff 	tst.w	r3, #255	; 0xff
  40366e:	d0f9      	beq.n	403664 <vPortEnterCritical+0x20>
  403670:	f04f 0380 	mov.w	r3, #128	; 0x80
  403674:	b672      	cpsid	i
  403676:	f383 8811 	msr	BASEPRI, r3
  40367a:	f3bf 8f6f 	isb	sy
  40367e:	f3bf 8f4f 	dsb	sy
  403682:	b662      	cpsie	i
  403684:	e7fe      	b.n	403684 <vPortEnterCritical+0x40>
  403686:	bf00      	nop
  403688:	20400030 	.word	0x20400030
  40368c:	e000ed04 	.word	0xe000ed04

00403690 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
  403690:	4a09      	ldr	r2, [pc, #36]	; (4036b8 <vPortExitCritical+0x28>)
  403692:	6813      	ldr	r3, [r2, #0]
  403694:	b953      	cbnz	r3, 4036ac <vPortExitCritical+0x1c>
  403696:	f04f 0380 	mov.w	r3, #128	; 0x80
  40369a:	b672      	cpsid	i
  40369c:	f383 8811 	msr	BASEPRI, r3
  4036a0:	f3bf 8f6f 	isb	sy
  4036a4:	f3bf 8f4f 	dsb	sy
  4036a8:	b662      	cpsie	i
  4036aa:	e7fe      	b.n	4036aa <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  4036ac:	3b01      	subs	r3, #1
  4036ae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  4036b0:	b90b      	cbnz	r3, 4036b6 <vPortExitCritical+0x26>
	__asm volatile
  4036b2:	f383 8811 	msr	BASEPRI, r3
  4036b6:	4770      	bx	lr
  4036b8:	20400030 	.word	0x20400030
  4036bc:	00000000 	.word	0x00000000

004036c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
  4036c0:	f3ef 8009 	mrs	r0, PSP
  4036c4:	f3bf 8f6f 	isb	sy
  4036c8:	4b15      	ldr	r3, [pc, #84]	; (403720 <pxCurrentTCBConst>)
  4036ca:	681a      	ldr	r2, [r3, #0]
  4036cc:	f01e 0f10 	tst.w	lr, #16
  4036d0:	bf08      	it	eq
  4036d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  4036d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4036da:	6010      	str	r0, [r2, #0]
  4036dc:	e92d 0009 	stmdb	sp!, {r0, r3}
  4036e0:	f04f 0080 	mov.w	r0, #128	; 0x80
  4036e4:	b672      	cpsid	i
  4036e6:	f380 8811 	msr	BASEPRI, r0
  4036ea:	f3bf 8f4f 	dsb	sy
  4036ee:	f3bf 8f6f 	isb	sy
  4036f2:	b662      	cpsie	i
  4036f4:	f000 fd7e 	bl	4041f4 <vTaskSwitchContext>
  4036f8:	f04f 0000 	mov.w	r0, #0
  4036fc:	f380 8811 	msr	BASEPRI, r0
  403700:	bc09      	pop	{r0, r3}
  403702:	6819      	ldr	r1, [r3, #0]
  403704:	6808      	ldr	r0, [r1, #0]
  403706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40370a:	f01e 0f10 	tst.w	lr, #16
  40370e:	bf08      	it	eq
  403710:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  403714:	f380 8809 	msr	PSP, r0
  403718:	f3bf 8f6f 	isb	sy
  40371c:	4770      	bx	lr
  40371e:	bf00      	nop

00403720 <pxCurrentTCBConst>:
  403720:	204295bc 	.word	0x204295bc

00403724 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
  403724:	b508      	push	{r3, lr}
	__asm volatile
  403726:	f04f 0380 	mov.w	r3, #128	; 0x80
  40372a:	b672      	cpsid	i
  40372c:	f383 8811 	msr	BASEPRI, r3
  403730:	f3bf 8f6f 	isb	sy
  403734:	f3bf 8f4f 	dsb	sy
  403738:	b662      	cpsie	i
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
  40373a:	4b05      	ldr	r3, [pc, #20]	; (403750 <SysTick_Handler+0x2c>)
  40373c:	4798      	blx	r3
  40373e:	b118      	cbz	r0, 403748 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  403740:	4b04      	ldr	r3, [pc, #16]	; (403754 <SysTick_Handler+0x30>)
  403742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403746:	601a      	str	r2, [r3, #0]
	__asm volatile
  403748:	2300      	movs	r3, #0
  40374a:	f383 8811 	msr	BASEPRI, r3
  40374e:	bd08      	pop	{r3, pc}
  403750:	00403f3d 	.word	0x00403f3d
  403754:	e000ed04 	.word	0xe000ed04

00403758 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
  403758:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  40375c:	2b0f      	cmp	r3, #15
  40375e:	d910      	bls.n	403782 <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  403760:	4912      	ldr	r1, [pc, #72]	; (4037ac <vPortValidateInterruptPriority+0x54>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  403762:	4a13      	ldr	r2, [pc, #76]	; (4037b0 <vPortValidateInterruptPriority+0x58>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  403764:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  403766:	7812      	ldrb	r2, [r2, #0]
  403768:	429a      	cmp	r2, r3
  40376a:	d90a      	bls.n	403782 <vPortValidateInterruptPriority+0x2a>
	__asm volatile
  40376c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403770:	b672      	cpsid	i
  403772:	f383 8811 	msr	BASEPRI, r3
  403776:	f3bf 8f6f 	isb	sy
  40377a:	f3bf 8f4f 	dsb	sy
  40377e:	b662      	cpsie	i
  403780:	e7fe      	b.n	403780 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  403782:	4b0c      	ldr	r3, [pc, #48]	; (4037b4 <vPortValidateInterruptPriority+0x5c>)
  403784:	4a0c      	ldr	r2, [pc, #48]	; (4037b8 <vPortValidateInterruptPriority+0x60>)
  403786:	681b      	ldr	r3, [r3, #0]
  403788:	6812      	ldr	r2, [r2, #0]
  40378a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40378e:	4293      	cmp	r3, r2
  403790:	d90a      	bls.n	4037a8 <vPortValidateInterruptPriority+0x50>
  403792:	f04f 0380 	mov.w	r3, #128	; 0x80
  403796:	b672      	cpsid	i
  403798:	f383 8811 	msr	BASEPRI, r3
  40379c:	f3bf 8f6f 	isb	sy
  4037a0:	f3bf 8f4f 	dsb	sy
  4037a4:	b662      	cpsie	i
  4037a6:	e7fe      	b.n	4037a6 <vPortValidateInterruptPriority+0x4e>
  4037a8:	4770      	bx	lr
  4037aa:	bf00      	nop
  4037ac:	e000e3f0 	.word	0xe000e3f0
  4037b0:	204295b4 	.word	0x204295b4
  4037b4:	e000ed0c 	.word	0xe000ed0c
  4037b8:	204295b8 	.word	0x204295b8

004037bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  4037bc:	b570      	push	{r4, r5, r6, lr}
  4037be:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  4037c0:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
  4037c2:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  4037c4:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  4037c6:	b932      	cbnz	r2, 4037d6 <prvCopyDataToQueue+0x1a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4037c8:	6805      	ldr	r5, [r0, #0]
  4037ca:	bb35      	cbnz	r5, 40381a <prvCopyDataToQueue+0x5e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  4037cc:	6840      	ldr	r0, [r0, #4]
  4037ce:	4b16      	ldr	r3, [pc, #88]	; (403828 <prvCopyDataToQueue+0x6c>)
  4037d0:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4037d2:	6065      	str	r5, [r4, #4]
  4037d4:	e024      	b.n	403820 <prvCopyDataToQueue+0x64>
  4037d6:	4b15      	ldr	r3, [pc, #84]	; (40382c <prvCopyDataToQueue+0x70>)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
  4037d8:	b965      	cbnz	r5, 4037f4 <prvCopyDataToQueue+0x38>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  4037da:	6880      	ldr	r0, [r0, #8]
  4037dc:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4037de:	68a3      	ldr	r3, [r4, #8]
  4037e0:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4037e2:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4037e4:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4037e6:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4037e8:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4037ea:	d316      	bcc.n	40381a <prvCopyDataToQueue+0x5e>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4037ec:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
  4037ee:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4037f0:	60a3      	str	r3, [r4, #8]
  4037f2:	e015      	b.n	403820 <prvCopyDataToQueue+0x64>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4037f4:	68c0      	ldr	r0, [r0, #12]
  4037f6:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4037f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4037fa:	68e2      	ldr	r2, [r4, #12]
  4037fc:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4037fe:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  403800:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  403802:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  403804:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  403806:	d202      	bcs.n	40380e <prvCopyDataToQueue+0x52>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  403808:	6862      	ldr	r2, [r4, #4]
  40380a:	4413      	add	r3, r2
  40380c:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
  40380e:	2d02      	cmp	r5, #2
  403810:	d103      	bne.n	40381a <prvCopyDataToQueue+0x5e>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  403812:	b126      	cbz	r6, 40381e <prvCopyDataToQueue+0x62>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
  403814:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
  403816:	2000      	movs	r0, #0
  403818:	e002      	b.n	403820 <prvCopyDataToQueue+0x64>
  40381a:	2000      	movs	r0, #0
  40381c:	e000      	b.n	403820 <prvCopyDataToQueue+0x64>
  40381e:	4630      	mov	r0, r6
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  403820:	3601      	adds	r6, #1
  403822:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
  403824:	bd70      	pop	{r4, r5, r6, pc}
  403826:	bf00      	nop
  403828:	00404571 	.word	0x00404571
  40382c:	00406bc9 	.word	0x00406bc9

00403830 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  403830:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
  403832:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  403834:	b172      	cbz	r2, 403854 <prvCopyDataFromQueue+0x24>
  403836:	4608      	mov	r0, r1
{
  403838:	b410      	push	{r4}
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  40383a:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  40383c:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  40383e:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  403840:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  403842:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  403844:	d301      	bcc.n	40384a <prvCopyDataFromQueue+0x1a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  403846:	6819      	ldr	r1, [r3, #0]
  403848:	60d9      	str	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  40384a:	68d9      	ldr	r1, [r3, #12]
	}
}
  40384c:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  403850:	4b01      	ldr	r3, [pc, #4]	; (403858 <prvCopyDataFromQueue+0x28>)
  403852:	4718      	bx	r3
  403854:	4770      	bx	lr
  403856:	bf00      	nop
  403858:	00406bc9 	.word	0x00406bc9

0040385c <prvNotifyQueueSetContainer.part.0>:
  40385c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403860:	b672      	cpsid	i
  403862:	f383 8811 	msr	BASEPRI, r3
  403866:	f3bf 8f6f 	isb	sy
  40386a:	f3bf 8f4f 	dsb	sy
  40386e:	b662      	cpsie	i
  403870:	e7fe      	b.n	403870 <prvNotifyQueueSetContainer.part.0+0x14>
  403872:	bf00      	nop

00403874 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  403874:	b570      	push	{r4, r5, r6, lr}
  403876:	b082      	sub	sp, #8
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  403878:	6c84      	ldr	r4, [r0, #72]	; 0x48
	{
  40387a:	9001      	str	r0, [sp, #4]
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  40387c:	b1b4      	cbz	r4, 4038ac <prvNotifyQueueSetContainer+0x38>
  40387e:	460a      	mov	r2, r1
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  403880:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  403882:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  403884:	4299      	cmp	r1, r3
  403886:	d30a      	bcc.n	40389e <prvNotifyQueueSetContainer+0x2a>
  403888:	f04f 0380 	mov.w	r3, #128	; 0x80
  40388c:	b672      	cpsid	i
  40388e:	f383 8811 	msr	BASEPRI, r3
  403892:	f3bf 8f6f 	isb	sy
  403896:	f3bf 8f4f 	dsb	sy
  40389a:	b662      	cpsie	i
  40389c:	e7fe      	b.n	40389c <prvNotifyQueueSetContainer+0x28>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  40389e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  4038a0:	428b      	cmp	r3, r1
  4038a2:	d805      	bhi.n	4038b0 <prvNotifyQueueSetContainer+0x3c>
	BaseType_t xReturn = pdFALSE;
  4038a4:	2600      	movs	r6, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4038a6:	4630      	mov	r0, r6
  4038a8:	b002      	add	sp, #8
  4038aa:	bd70      	pop	{r4, r5, r6, pc}
  4038ac:	4b0f      	ldr	r3, [pc, #60]	; (4038ec <prvNotifyQueueSetContainer+0x78>)
  4038ae:	4798      	blx	r3
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  4038b0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  4038b4:	a901      	add	r1, sp, #4
  4038b6:	4b0e      	ldr	r3, [pc, #56]	; (4038f0 <prvNotifyQueueSetContainer+0x7c>)
  4038b8:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  4038ba:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  4038bc:	4798      	blx	r3
  4038be:	4606      	mov	r6, r0
			if( cTxLock == queueUNLOCKED )
  4038c0:	1c6b      	adds	r3, r5, #1
  4038c2:	d006      	beq.n	4038d2 <prvNotifyQueueSetContainer+0x5e>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
  4038c4:	1c6b      	adds	r3, r5, #1
	}
  4038c6:	4630      	mov	r0, r6
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
  4038c8:	b25b      	sxtb	r3, r3
  4038ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
  4038ce:	b002      	add	sp, #8
  4038d0:	bd70      	pop	{r4, r5, r6, pc}
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  4038d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4038d4:	2b00      	cmp	r3, #0
  4038d6:	d0e6      	beq.n	4038a6 <prvNotifyQueueSetContainer+0x32>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  4038d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4038dc:	4b05      	ldr	r3, [pc, #20]	; (4038f4 <prvNotifyQueueSetContainer+0x80>)
  4038de:	4798      	blx	r3
						xReturn = pdTRUE;
  4038e0:	2800      	cmp	r0, #0
  4038e2:	bf18      	it	ne
  4038e4:	2601      	movne	r6, #1
	}
  4038e6:	4630      	mov	r0, r6
  4038e8:	b002      	add	sp, #8
  4038ea:	bd70      	pop	{r4, r5, r6, pc}
  4038ec:	0040385d 	.word	0x0040385d
  4038f0:	004037bd 	.word	0x004037bd
  4038f4:	0040435d 	.word	0x0040435d

004038f8 <xQueueReceiveFromISR.part.2>:
BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
  4038f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4038fc:	4b1c      	ldr	r3, [pc, #112]	; (403970 <xQueueReceiveFromISR.part.2+0x78>)
BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
  4038fe:	4607      	mov	r7, r0
  403900:	4689      	mov	r9, r1
  403902:	4690      	mov	r8, r2
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  403904:	4798      	blx	r3
	__asm volatile
  403906:	f3ef 8611 	mrs	r6, BASEPRI
  40390a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40390e:	b672      	cpsid	i
  403910:	f383 8811 	msr	BASEPRI, r3
  403914:	f3bf 8f6f 	isb	sy
  403918:	f3bf 8f4f 	dsb	sy
  40391c:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  40391e:	6bbc      	ldr	r4, [r7, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  403920:	b30c      	cbz	r4, 403966 <xQueueReceiveFromISR.part.2+0x6e>
			const int8_t cRxLock = pxQueue->cRxLock;
  403922:	f897 5044 	ldrb.w	r5, [r7, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
  403926:	4649      	mov	r1, r9
  403928:	4b12      	ldr	r3, [pc, #72]	; (403974 <xQueueReceiveFromISR.part.2+0x7c>)
  40392a:	4638      	mov	r0, r7
			const int8_t cRxLock = pxQueue->cRxLock;
  40392c:	b26d      	sxtb	r5, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
  40392e:	3c01      	subs	r4, #1
			prvCopyDataFromQueue( pxQueue, pvBuffer );
  403930:	4798      	blx	r3
			if( cRxLock == queueUNLOCKED )
  403932:	1c6b      	adds	r3, r5, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
  403934:	63bc      	str	r4, [r7, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
  403936:	d110      	bne.n	40395a <xQueueReceiveFromISR.part.2+0x62>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  403938:	693b      	ldr	r3, [r7, #16]
  40393a:	b90b      	cbnz	r3, 403940 <xQueueReceiveFromISR.part.2+0x48>
			xReturn = pdPASS;
  40393c:	2001      	movs	r0, #1
  40393e:	e013      	b.n	403968 <xQueueReceiveFromISR.part.2+0x70>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  403940:	f107 0010 	add.w	r0, r7, #16
  403944:	4b0c      	ldr	r3, [pc, #48]	; (403978 <xQueueReceiveFromISR.part.2+0x80>)
  403946:	4798      	blx	r3
						if( pxHigherPriorityTaskWoken != NULL )
  403948:	f1b8 0f00 	cmp.w	r8, #0
  40394c:	d0f6      	beq.n	40393c <xQueueReceiveFromISR.part.2+0x44>
  40394e:	2800      	cmp	r0, #0
  403950:	d0f4      	beq.n	40393c <xQueueReceiveFromISR.part.2+0x44>
							*pxHigherPriorityTaskWoken = pdTRUE;
  403952:	2001      	movs	r0, #1
  403954:	f8c8 0000 	str.w	r0, [r8]
  403958:	e006      	b.n	403968 <xQueueReceiveFromISR.part.2+0x70>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
  40395a:	3501      	adds	r5, #1
			xReturn = pdPASS;
  40395c:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
  40395e:	b26d      	sxtb	r5, r5
  403960:	f887 5044 	strb.w	r5, [r7, #68]	; 0x44
  403964:	e000      	b.n	403968 <xQueueReceiveFromISR.part.2+0x70>
			xReturn = pdFAIL;
  403966:	4620      	mov	r0, r4
	__asm volatile
  403968:	f386 8811 	msr	BASEPRI, r6
}
  40396c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403970:	00403759 	.word	0x00403759
  403974:	00403831 	.word	0x00403831
  403978:	0040435d 	.word	0x0040435d

0040397c <prvUnlockQueue>:
{
  40397c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403980:	4604      	mov	r4, r0
  403982:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
  403984:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 403a74 <prvUnlockQueue+0xf8>
  403988:	47c0      	blx	r8
		int8_t cTxLock = pxQueue->cTxLock;
  40398a:	f894 7045 	ldrb.w	r7, [r4, #69]	; 0x45
  40398e:	b27f      	sxtb	r7, r7
		while( cTxLock > queueLOCKED_UNMODIFIED )
  403990:	2f00      	cmp	r7, #0
  403992:	dd1e      	ble.n	4039d2 <prvUnlockQueue+0x56>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  403994:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 403a78 <prvUnlockQueue+0xfc>
						vTaskMissedYield();
  403998:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 403a6c <prvUnlockQueue+0xf0>
				if( pxQueue->pxQueueSetContainer != NULL )
  40399c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
  40399e:	2d00      	cmp	r5, #0
  4039a0:	d03c      	beq.n	403a1c <prvUnlockQueue+0xa0>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  4039a2:	6baa      	ldr	r2, [r5, #56]	; 0x38
  4039a4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4039a6:	9401      	str	r4, [sp, #4]
  4039a8:	429a      	cmp	r2, r3
  4039aa:	d30a      	bcc.n	4039c2 <prvUnlockQueue+0x46>
	__asm volatile
  4039ac:	f04f 0380 	mov.w	r3, #128	; 0x80
  4039b0:	b672      	cpsid	i
  4039b2:	f383 8811 	msr	BASEPRI, r3
  4039b6:	f3bf 8f6f 	isb	sy
  4039ba:	f3bf 8f4f 	dsb	sy
  4039be:	b662      	cpsie	i
  4039c0:	e7fe      	b.n	4039c0 <prvUnlockQueue+0x44>
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  4039c2:	6baa      	ldr	r2, [r5, #56]	; 0x38
  4039c4:	4293      	cmp	r3, r2
  4039c6:	d833      	bhi.n	403a30 <prvUnlockQueue+0xb4>
  4039c8:	1e7b      	subs	r3, r7, #1
  4039ca:	b2db      	uxtb	r3, r3
  4039cc:	b25f      	sxtb	r7, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
  4039ce:	2b00      	cmp	r3, #0
  4039d0:	d1e4      	bne.n	40399c <prvUnlockQueue+0x20>
		pxQueue->cTxLock = queueUNLOCKED;
  4039d2:	23ff      	movs	r3, #255	; 0xff
	taskEXIT_CRITICAL();
  4039d4:	4e24      	ldr	r6, [pc, #144]	; (403a68 <prvUnlockQueue+0xec>)
		pxQueue->cTxLock = queueUNLOCKED;
  4039d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
  4039da:	47b0      	blx	r6
	taskENTER_CRITICAL();
  4039dc:	47c0      	blx	r8
		int8_t cRxLock = pxQueue->cRxLock;
  4039de:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
  4039e2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
  4039e4:	2d00      	cmp	r5, #0
  4039e6:	dd12      	ble.n	403a0e <prvUnlockQueue+0x92>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4039e8:	6923      	ldr	r3, [r4, #16]
  4039ea:	b183      	cbz	r3, 403a0e <prvUnlockQueue+0x92>
  4039ec:	f104 0910 	add.w	r9, r4, #16
  4039f0:	f8df 8084 	ldr.w	r8, [pc, #132]	; 403a78 <prvUnlockQueue+0xfc>
					vTaskMissedYield();
  4039f4:	4f1d      	ldr	r7, [pc, #116]	; (403a6c <prvUnlockQueue+0xf0>)
  4039f6:	e001      	b.n	4039fc <prvUnlockQueue+0x80>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4039f8:	6923      	ldr	r3, [r4, #16]
  4039fa:	b143      	cbz	r3, 403a0e <prvUnlockQueue+0x92>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4039fc:	4648      	mov	r0, r9
  4039fe:	47c0      	blx	r8
  403a00:	b100      	cbz	r0, 403a04 <prvUnlockQueue+0x88>
					vTaskMissedYield();
  403a02:	47b8      	blx	r7
  403a04:	3d01      	subs	r5, #1
  403a06:	b2eb      	uxtb	r3, r5
  403a08:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
  403a0a:	2b00      	cmp	r3, #0
  403a0c:	d1f4      	bne.n	4039f8 <prvUnlockQueue+0x7c>
		pxQueue->cRxLock = queueUNLOCKED;
  403a0e:	23ff      	movs	r3, #255	; 0xff
  403a10:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  403a14:	47b0      	blx	r6
}
  403a16:	b003      	add	sp, #12
  403a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  403a1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403a1e:	2b00      	cmp	r3, #0
  403a20:	d0d7      	beq.n	4039d2 <prvUnlockQueue+0x56>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  403a22:	f104 0024 	add.w	r0, r4, #36	; 0x24
  403a26:	47c8      	blx	r9
  403a28:	2800      	cmp	r0, #0
  403a2a:	d0cd      	beq.n	4039c8 <prvUnlockQueue+0x4c>
						vTaskMissedYield();
  403a2c:	47d8      	blx	fp
  403a2e:	e7cb      	b.n	4039c8 <prvUnlockQueue+0x4c>
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  403a30:	f895 6045 	ldrb.w	r6, [r5, #69]	; 0x45
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  403a34:	2200      	movs	r2, #0
  403a36:	4b0e      	ldr	r3, [pc, #56]	; (403a70 <prvUnlockQueue+0xf4>)
  403a38:	a901      	add	r1, sp, #4
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  403a3a:	b276      	sxtb	r6, r6
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  403a3c:	4628      	mov	r0, r5
  403a3e:	4798      	blx	r3
  403a40:	4682      	mov	sl, r0
			if( cTxLock == queueUNLOCKED )
  403a42:	1c73      	adds	r3, r6, #1
  403a44:	d007      	beq.n	403a56 <prvUnlockQueue+0xda>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
  403a46:	1c73      	adds	r3, r6, #1
  403a48:	b25b      	sxtb	r3, r3
  403a4a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  403a4e:	f1ba 0f00 	cmp.w	sl, #0
  403a52:	d0b9      	beq.n	4039c8 <prvUnlockQueue+0x4c>
  403a54:	e7ea      	b.n	403a2c <prvUnlockQueue+0xb0>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  403a56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  403a58:	2b00      	cmp	r3, #0
  403a5a:	d0f8      	beq.n	403a4e <prvUnlockQueue+0xd2>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  403a5c:	f105 0024 	add.w	r0, r5, #36	; 0x24
  403a60:	47c8      	blx	r9
  403a62:	2800      	cmp	r0, #0
  403a64:	d0f3      	beq.n	403a4e <prvUnlockQueue+0xd2>
  403a66:	e7e1      	b.n	403a2c <prvUnlockQueue+0xb0>
  403a68:	00403691 	.word	0x00403691
  403a6c:	00404545 	.word	0x00404545
  403a70:	004037bd 	.word	0x004037bd
  403a74:	00403645 	.word	0x00403645
  403a78:	0040435d 	.word	0x0040435d

00403a7c <xQueueGenericSend>:
{
  403a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403a80:	b085      	sub	sp, #20
  403a82:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  403a84:	2800      	cmp	r0, #0
  403a86:	f000 80b8 	beq.w	403bfa <xQueueGenericSend+0x17e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  403a8a:	2900      	cmp	r1, #0
  403a8c:	f000 80a6 	beq.w	403bdc <xQueueGenericSend+0x160>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  403a90:	2b02      	cmp	r3, #2
  403a92:	f000 8094 	beq.w	403bbe <xQueueGenericSend+0x142>
  403a96:	461e      	mov	r6, r3
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  403a98:	4b65      	ldr	r3, [pc, #404]	; (403c30 <xQueueGenericSend+0x1b4>)
  403a9a:	4604      	mov	r4, r0
  403a9c:	4688      	mov	r8, r1
  403a9e:	4798      	blx	r3
  403aa0:	b910      	cbnz	r0, 403aa8 <xQueueGenericSend+0x2c>
  403aa2:	9b01      	ldr	r3, [sp, #4]
  403aa4:	2b00      	cmp	r3, #0
  403aa6:	d178      	bne.n	403b9a <xQueueGenericSend+0x11e>
  403aa8:	f1a6 0502 	sub.w	r5, r6, #2
{
  403aac:	f04f 0a00 	mov.w	sl, #0
  403ab0:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 403c5c <xQueueGenericSend+0x1e0>
  403ab4:	fab5 f585 	clz	r5, r5
  403ab8:	4f5e      	ldr	r7, [pc, #376]	; (403c34 <xQueueGenericSend+0x1b8>)
					vTaskInternalSetTimeOutState( &xTimeOut );
  403aba:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 403c60 <xQueueGenericSend+0x1e4>
  403abe:	096d      	lsrs	r5, r5, #5
  403ac0:	e024      	b.n	403b0c <xQueueGenericSend+0x90>
  403ac2:	f10d 0a08 	add.w	sl, sp, #8
		taskEXIT_CRITICAL();
  403ac6:	47b8      	blx	r7
		vTaskSuspendAll();
  403ac8:	4b5b      	ldr	r3, [pc, #364]	; (403c38 <xQueueGenericSend+0x1bc>)
  403aca:	4798      	blx	r3
		prvLockQueue( pxQueue );
  403acc:	47c8      	blx	r9
  403ace:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  403ad2:	2bff      	cmp	r3, #255	; 0xff
  403ad4:	f000 80a7 	beq.w	403c26 <xQueueGenericSend+0x1aa>
  403ad8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  403adc:	2bff      	cmp	r3, #255	; 0xff
  403ade:	f000 809e 	beq.w	403c1e <xQueueGenericSend+0x1a2>
  403ae2:	47b8      	blx	r7
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  403ae4:	4650      	mov	r0, sl
  403ae6:	a901      	add	r1, sp, #4
  403ae8:	4b54      	ldr	r3, [pc, #336]	; (403c3c <xQueueGenericSend+0x1c0>)
  403aea:	4798      	blx	r3
  403aec:	2800      	cmp	r0, #0
  403aee:	f040 808f 	bne.w	403c10 <xQueueGenericSend+0x194>
	taskENTER_CRITICAL();
  403af2:	47c8      	blx	r9
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  403af4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  403af6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  403af8:	429a      	cmp	r2, r3
  403afa:	d017      	beq.n	403b2c <xQueueGenericSend+0xb0>
	taskEXIT_CRITICAL();
  403afc:	47b8      	blx	r7
				prvUnlockQueue( pxQueue );
  403afe:	4b50      	ldr	r3, [pc, #320]	; (403c40 <xQueueGenericSend+0x1c4>)
  403b00:	4620      	mov	r0, r4
  403b02:	4798      	blx	r3
				( void ) xTaskResumeAll();
  403b04:	4b4f      	ldr	r3, [pc, #316]	; (403c44 <xQueueGenericSend+0x1c8>)
  403b06:	4798      	blx	r3
  403b08:	f04f 0a01 	mov.w	sl, #1
		taskENTER_CRITICAL();
  403b0c:	47c8      	blx	r9
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  403b0e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  403b10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  403b12:	429a      	cmp	r2, r3
  403b14:	d325      	bcc.n	403b62 <xQueueGenericSend+0xe6>
  403b16:	bb25      	cbnz	r5, 403b62 <xQueueGenericSend+0xe6>
				if( xTicksToWait == ( TickType_t ) 0 )
  403b18:	9b01      	ldr	r3, [sp, #4]
  403b1a:	b1eb      	cbz	r3, 403b58 <xQueueGenericSend+0xdc>
				else if( xEntryTimeSet == pdFALSE )
  403b1c:	f1ba 0f00 	cmp.w	sl, #0
  403b20:	d1cf      	bne.n	403ac2 <xQueueGenericSend+0x46>
					vTaskInternalSetTimeOutState( &xTimeOut );
  403b22:	f10d 0a08 	add.w	sl, sp, #8
  403b26:	4650      	mov	r0, sl
  403b28:	47d8      	blx	fp
  403b2a:	e7cc      	b.n	403ac6 <xQueueGenericSend+0x4a>
	taskEXIT_CRITICAL();
  403b2c:	47b8      	blx	r7
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  403b2e:	9901      	ldr	r1, [sp, #4]
  403b30:	f104 0010 	add.w	r0, r4, #16
  403b34:	4b44      	ldr	r3, [pc, #272]	; (403c48 <xQueueGenericSend+0x1cc>)
  403b36:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  403b38:	4b41      	ldr	r3, [pc, #260]	; (403c40 <xQueueGenericSend+0x1c4>)
  403b3a:	4620      	mov	r0, r4
  403b3c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  403b3e:	4b41      	ldr	r3, [pc, #260]	; (403c44 <xQueueGenericSend+0x1c8>)
  403b40:	4798      	blx	r3
  403b42:	2800      	cmp	r0, #0
  403b44:	d1e0      	bne.n	403b08 <xQueueGenericSend+0x8c>
					portYIELD_WITHIN_API();
  403b46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  403b4a:	4a40      	ldr	r2, [pc, #256]	; (403c4c <xQueueGenericSend+0x1d0>)
  403b4c:	6013      	str	r3, [r2, #0]
  403b4e:	f3bf 8f4f 	dsb	sy
  403b52:	f3bf 8f6f 	isb	sy
  403b56:	e7d7      	b.n	403b08 <xQueueGenericSend+0x8c>
					taskEXIT_CRITICAL();
  403b58:	47b8      	blx	r7
					return errQUEUE_FULL;
  403b5a:	4628      	mov	r0, r5
}
  403b5c:	b005      	add	sp, #20
  403b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  403b62:	4b3b      	ldr	r3, [pc, #236]	; (403c50 <xQueueGenericSend+0x1d4>)
  403b64:	4641      	mov	r1, r8
  403b66:	4632      	mov	r2, r6
  403b68:	4620      	mov	r0, r4
  403b6a:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  403b6c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  403b6e:	b17b      	cbz	r3, 403b90 <xQueueGenericSend+0x114>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  403b70:	4631      	mov	r1, r6
  403b72:	4620      	mov	r0, r4
  403b74:	4b37      	ldr	r3, [pc, #220]	; (403c54 <xQueueGenericSend+0x1d8>)
  403b76:	4798      	blx	r3
  403b78:	b138      	cbz	r0, 403b8a <xQueueGenericSend+0x10e>
							queueYIELD_IF_USING_PREEMPTION();
  403b7a:	4b34      	ldr	r3, [pc, #208]	; (403c4c <xQueueGenericSend+0x1d0>)
  403b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403b80:	601a      	str	r2, [r3, #0]
  403b82:	f3bf 8f4f 	dsb	sy
  403b86:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  403b8a:	47b8      	blx	r7
				return pdPASS;
  403b8c:	2001      	movs	r0, #1
  403b8e:	e7e5      	b.n	403b5c <xQueueGenericSend+0xe0>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  403b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403b92:	b96b      	cbnz	r3, 403bb0 <xQueueGenericSend+0x134>
						else if( xYieldRequired != pdFALSE )
  403b94:	2800      	cmp	r0, #0
  403b96:	d1f0      	bne.n	403b7a <xQueueGenericSend+0xfe>
  403b98:	e7f7      	b.n	403b8a <xQueueGenericSend+0x10e>
  403b9a:	f04f 0380 	mov.w	r3, #128	; 0x80
  403b9e:	b672      	cpsid	i
  403ba0:	f383 8811 	msr	BASEPRI, r3
  403ba4:	f3bf 8f6f 	isb	sy
  403ba8:	f3bf 8f4f 	dsb	sy
  403bac:	b662      	cpsie	i
  403bae:	e7fe      	b.n	403bae <xQueueGenericSend+0x132>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  403bb0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  403bb4:	4b28      	ldr	r3, [pc, #160]	; (403c58 <xQueueGenericSend+0x1dc>)
  403bb6:	4798      	blx	r3
  403bb8:	2800      	cmp	r0, #0
  403bba:	d1de      	bne.n	403b7a <xQueueGenericSend+0xfe>
  403bbc:	e7e5      	b.n	403b8a <xQueueGenericSend+0x10e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  403bbe:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  403bc0:	2a01      	cmp	r2, #1
  403bc2:	f43f af68 	beq.w	403a96 <xQueueGenericSend+0x1a>
  403bc6:	f04f 0380 	mov.w	r3, #128	; 0x80
  403bca:	b672      	cpsid	i
  403bcc:	f383 8811 	msr	BASEPRI, r3
  403bd0:	f3bf 8f6f 	isb	sy
  403bd4:	f3bf 8f4f 	dsb	sy
  403bd8:	b662      	cpsie	i
  403bda:	e7fe      	b.n	403bda <xQueueGenericSend+0x15e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  403bdc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  403bde:	2a00      	cmp	r2, #0
  403be0:	f43f af56 	beq.w	403a90 <xQueueGenericSend+0x14>
  403be4:	f04f 0380 	mov.w	r3, #128	; 0x80
  403be8:	b672      	cpsid	i
  403bea:	f383 8811 	msr	BASEPRI, r3
  403bee:	f3bf 8f6f 	isb	sy
  403bf2:	f3bf 8f4f 	dsb	sy
  403bf6:	b662      	cpsie	i
  403bf8:	e7fe      	b.n	403bf8 <xQueueGenericSend+0x17c>
  403bfa:	f04f 0380 	mov.w	r3, #128	; 0x80
  403bfe:	b672      	cpsid	i
  403c00:	f383 8811 	msr	BASEPRI, r3
  403c04:	f3bf 8f6f 	isb	sy
  403c08:	f3bf 8f4f 	dsb	sy
  403c0c:	b662      	cpsie	i
  403c0e:	e7fe      	b.n	403c0e <xQueueGenericSend+0x192>
			prvUnlockQueue( pxQueue );
  403c10:	4620      	mov	r0, r4
  403c12:	4b0b      	ldr	r3, [pc, #44]	; (403c40 <xQueueGenericSend+0x1c4>)
  403c14:	4798      	blx	r3
			( void ) xTaskResumeAll();
  403c16:	4b0b      	ldr	r3, [pc, #44]	; (403c44 <xQueueGenericSend+0x1c8>)
  403c18:	4798      	blx	r3
			return errQUEUE_FULL;
  403c1a:	2000      	movs	r0, #0
  403c1c:	e79e      	b.n	403b5c <xQueueGenericSend+0xe0>
		prvLockQueue( pxQueue );
  403c1e:	2300      	movs	r3, #0
  403c20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  403c24:	e75d      	b.n	403ae2 <xQueueGenericSend+0x66>
  403c26:	2300      	movs	r3, #0
  403c28:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  403c2c:	e754      	b.n	403ad8 <xQueueGenericSend+0x5c>
  403c2e:	bf00      	nop
  403c30:	00404551 	.word	0x00404551
  403c34:	00403691 	.word	0x00403691
  403c38:	00403f19 	.word	0x00403f19
  403c3c:	004044a1 	.word	0x004044a1
  403c40:	0040397d 	.word	0x0040397d
  403c44:	004040b9 	.word	0x004040b9
  403c48:	004042a5 	.word	0x004042a5
  403c4c:	e000ed04 	.word	0xe000ed04
  403c50:	004037bd 	.word	0x004037bd
  403c54:	00403875 	.word	0x00403875
  403c58:	0040435d 	.word	0x0040435d
  403c5c:	00403645 	.word	0x00403645
  403c60:	00404489 	.word	0x00404489

00403c64 <xQueueGenericSendFromISR>:
{
  403c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
  403c68:	b318      	cbz	r0, 403cb2 <xQueueGenericSendFromISR+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  403c6a:	2900      	cmp	r1, #0
  403c6c:	d04a      	beq.n	403d04 <xQueueGenericSendFromISR+0xa0>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  403c6e:	2b02      	cmp	r3, #2
  403c70:	d03a      	beq.n	403ce8 <xQueueGenericSendFromISR+0x84>
  403c72:	461f      	mov	r7, r3
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  403c74:	4b38      	ldr	r3, [pc, #224]	; (403d58 <xQueueGenericSendFromISR+0xf4>)
  403c76:	4604      	mov	r4, r0
  403c78:	4690      	mov	r8, r2
  403c7a:	4689      	mov	r9, r1
  403c7c:	4798      	blx	r3
	__asm volatile
  403c7e:	f3ef 8611 	mrs	r6, BASEPRI
  403c82:	f04f 0380 	mov.w	r3, #128	; 0x80
  403c86:	b672      	cpsid	i
  403c88:	f383 8811 	msr	BASEPRI, r3
  403c8c:	f3bf 8f6f 	isb	sy
  403c90:	f3bf 8f4f 	dsb	sy
  403c94:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  403c96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  403c98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  403c9a:	429a      	cmp	r2, r3
  403c9c:	d314      	bcc.n	403cc8 <xQueueGenericSendFromISR+0x64>
  403c9e:	f1a7 0002 	sub.w	r0, r7, #2
  403ca2:	fab0 f080 	clz	r0, r0
  403ca6:	0940      	lsrs	r0, r0, #5
  403ca8:	b970      	cbnz	r0, 403cc8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
  403caa:	f386 8811 	msr	BASEPRI, r6
}
  403cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
  403cb2:	f04f 0380 	mov.w	r3, #128	; 0x80
  403cb6:	b672      	cpsid	i
  403cb8:	f383 8811 	msr	BASEPRI, r3
  403cbc:	f3bf 8f6f 	isb	sy
  403cc0:	f3bf 8f4f 	dsb	sy
  403cc4:	b662      	cpsie	i
  403cc6:	e7fe      	b.n	403cc6 <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
  403cc8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  403ccc:	4649      	mov	r1, r9
  403cce:	4b23      	ldr	r3, [pc, #140]	; (403d5c <xQueueGenericSendFromISR+0xf8>)
  403cd0:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
  403cd2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  403cd4:	4620      	mov	r0, r4
  403cd6:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
  403cd8:	1c6b      	adds	r3, r5, #1
  403cda:	d021      	beq.n	403d20 <xQueueGenericSendFromISR+0xbc>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  403cdc:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
  403cde:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  403ce0:	b25b      	sxtb	r3, r3
  403ce2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  403ce6:	e7e0      	b.n	403caa <xQueueGenericSendFromISR+0x46>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  403ce8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  403cea:	2c01      	cmp	r4, #1
  403cec:	d0c1      	beq.n	403c72 <xQueueGenericSendFromISR+0xe>
  403cee:	f04f 0380 	mov.w	r3, #128	; 0x80
  403cf2:	b672      	cpsid	i
  403cf4:	f383 8811 	msr	BASEPRI, r3
  403cf8:	f3bf 8f6f 	isb	sy
  403cfc:	f3bf 8f4f 	dsb	sy
  403d00:	b662      	cpsie	i
  403d02:	e7fe      	b.n	403d02 <xQueueGenericSendFromISR+0x9e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  403d04:	6c04      	ldr	r4, [r0, #64]	; 0x40
  403d06:	2c00      	cmp	r4, #0
  403d08:	d0b1      	beq.n	403c6e <xQueueGenericSendFromISR+0xa>
  403d0a:	f04f 0380 	mov.w	r3, #128	; 0x80
  403d0e:	b672      	cpsid	i
  403d10:	f383 8811 	msr	BASEPRI, r3
  403d14:	f3bf 8f6f 	isb	sy
  403d18:	f3bf 8f4f 	dsb	sy
  403d1c:	b662      	cpsie	i
  403d1e:	e7fe      	b.n	403d1e <xQueueGenericSendFromISR+0xba>
					if( pxQueue->pxQueueSetContainer != NULL )
  403d20:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  403d22:	b15b      	cbz	r3, 403d3c <xQueueGenericSendFromISR+0xd8>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  403d24:	4639      	mov	r1, r7
  403d26:	4620      	mov	r0, r4
  403d28:	4b0d      	ldr	r3, [pc, #52]	; (403d60 <xQueueGenericSendFromISR+0xfc>)
  403d2a:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  403d2c:	b140      	cbz	r0, 403d40 <xQueueGenericSendFromISR+0xdc>
  403d2e:	f1b8 0f00 	cmp.w	r8, #0
  403d32:	d005      	beq.n	403d40 <xQueueGenericSendFromISR+0xdc>
								*pxHigherPriorityTaskWoken = pdTRUE;
  403d34:	2001      	movs	r0, #1
  403d36:	f8c8 0000 	str.w	r0, [r8]
  403d3a:	e7b6      	b.n	403caa <xQueueGenericSendFromISR+0x46>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  403d3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403d3e:	b90b      	cbnz	r3, 403d44 <xQueueGenericSendFromISR+0xe0>
			xReturn = pdPASS;
  403d40:	2001      	movs	r0, #1
  403d42:	e7b2      	b.n	403caa <xQueueGenericSendFromISR+0x46>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  403d44:	f104 0024 	add.w	r0, r4, #36	; 0x24
  403d48:	4b06      	ldr	r3, [pc, #24]	; (403d64 <xQueueGenericSendFromISR+0x100>)
  403d4a:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  403d4c:	f1b8 0f00 	cmp.w	r8, #0
  403d50:	d0f6      	beq.n	403d40 <xQueueGenericSendFromISR+0xdc>
  403d52:	2800      	cmp	r0, #0
  403d54:	d1ee      	bne.n	403d34 <xQueueGenericSendFromISR+0xd0>
  403d56:	e7f3      	b.n	403d40 <xQueueGenericSendFromISR+0xdc>
  403d58:	00403759 	.word	0x00403759
  403d5c:	004037bd 	.word	0x004037bd
  403d60:	00403875 	.word	0x00403875
  403d64:	0040435d 	.word	0x0040435d

00403d68 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  403d68:	2800      	cmp	r0, #0
  403d6a:	d033      	beq.n	403dd4 <xQueueGiveFromISR+0x6c>
	configASSERT( pxQueue->uxItemSize == 0 );
  403d6c:	6c03      	ldr	r3, [r0, #64]	; 0x40
  403d6e:	b153      	cbz	r3, 403d86 <xQueueGiveFromISR+0x1e>
  403d70:	f04f 0380 	mov.w	r3, #128	; 0x80
  403d74:	b672      	cpsid	i
  403d76:	f383 8811 	msr	BASEPRI, r3
  403d7a:	f3bf 8f6f 	isb	sy
  403d7e:	f3bf 8f4f 	dsb	sy
  403d82:	b662      	cpsie	i
  403d84:	e7fe      	b.n	403d84 <xQueueGiveFromISR+0x1c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  403d86:	6803      	ldr	r3, [r0, #0]
  403d88:	2b00      	cmp	r3, #0
  403d8a:	d03b      	beq.n	403e04 <xQueueGiveFromISR+0x9c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  403d8c:	4b2a      	ldr	r3, [pc, #168]	; (403e38 <xQueueGiveFromISR+0xd0>)
{
  403d8e:	b570      	push	{r4, r5, r6, lr}
  403d90:	4604      	mov	r4, r0
  403d92:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  403d94:	4798      	blx	r3
	__asm volatile
  403d96:	f3ef 8511 	mrs	r5, BASEPRI
  403d9a:	f04f 0380 	mov.w	r3, #128	; 0x80
  403d9e:	b672      	cpsid	i
  403da0:	f383 8811 	msr	BASEPRI, r3
  403da4:	f3bf 8f6f 	isb	sy
  403da8:	f3bf 8f4f 	dsb	sy
  403dac:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  403dae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
  403db0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  403db2:	429a      	cmp	r2, r3
  403db4:	d224      	bcs.n	403e00 <xQueueGiveFromISR+0x98>
			const int8_t cTxLock = pxQueue->cTxLock;
  403db6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  403dba:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
  403dbc:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  403dbe:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
  403dc0:	1c5a      	adds	r2, r3, #1
  403dc2:	d012      	beq.n	403dea <xQueueGiveFromISR+0x82>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  403dc4:	3301      	adds	r3, #1
			xReturn = pdPASS;
  403dc6:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  403dc8:	b25b      	sxtb	r3, r3
  403dca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
  403dce:	f385 8811 	msr	BASEPRI, r5
}
  403dd2:	bd70      	pop	{r4, r5, r6, pc}
	__asm volatile
  403dd4:	f04f 0380 	mov.w	r3, #128	; 0x80
  403dd8:	b672      	cpsid	i
  403dda:	f383 8811 	msr	BASEPRI, r3
  403dde:	f3bf 8f6f 	isb	sy
  403de2:	f3bf 8f4f 	dsb	sy
  403de6:	b662      	cpsie	i
  403de8:	e7fe      	b.n	403de8 <xQueueGiveFromISR+0x80>
					if( pxQueue->pxQueueSetContainer != NULL )
  403dea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  403dec:	b1c3      	cbz	r3, 403e20 <xQueueGiveFromISR+0xb8>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  403dee:	4620      	mov	r0, r4
  403df0:	2100      	movs	r1, #0
  403df2:	4b12      	ldr	r3, [pc, #72]	; (403e3c <xQueueGiveFromISR+0xd4>)
  403df4:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  403df6:	b1e0      	cbz	r0, 403e32 <xQueueGiveFromISR+0xca>
  403df8:	b1de      	cbz	r6, 403e32 <xQueueGiveFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
  403dfa:	2001      	movs	r0, #1
  403dfc:	6030      	str	r0, [r6, #0]
  403dfe:	e7e6      	b.n	403dce <xQueueGiveFromISR+0x66>
			xReturn = errQUEUE_FULL;
  403e00:	2000      	movs	r0, #0
  403e02:	e7e4      	b.n	403dce <xQueueGiveFromISR+0x66>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  403e04:	6843      	ldr	r3, [r0, #4]
  403e06:	2b00      	cmp	r3, #0
  403e08:	d0c0      	beq.n	403d8c <xQueueGiveFromISR+0x24>
  403e0a:	f04f 0380 	mov.w	r3, #128	; 0x80
  403e0e:	b672      	cpsid	i
  403e10:	f383 8811 	msr	BASEPRI, r3
  403e14:	f3bf 8f6f 	isb	sy
  403e18:	f3bf 8f4f 	dsb	sy
  403e1c:	b662      	cpsie	i
  403e1e:	e7fe      	b.n	403e1e <xQueueGiveFromISR+0xb6>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  403e20:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403e22:	b133      	cbz	r3, 403e32 <xQueueGiveFromISR+0xca>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  403e24:	f104 0024 	add.w	r0, r4, #36	; 0x24
  403e28:	4b05      	ldr	r3, [pc, #20]	; (403e40 <xQueueGiveFromISR+0xd8>)
  403e2a:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  403e2c:	b10e      	cbz	r6, 403e32 <xQueueGiveFromISR+0xca>
  403e2e:	2800      	cmp	r0, #0
  403e30:	d1e3      	bne.n	403dfa <xQueueGiveFromISR+0x92>
			xReturn = pdPASS;
  403e32:	2001      	movs	r0, #1
  403e34:	e7cb      	b.n	403dce <xQueueGiveFromISR+0x66>
  403e36:	bf00      	nop
  403e38:	00403759 	.word	0x00403759
  403e3c:	00403875 	.word	0x00403875
  403e40:	0040435d 	.word	0x0040435d

00403e44 <xQueueReceiveFromISR>:
	configASSERT( pxQueue );
  403e44:	b110      	cbz	r0, 403e4c <xQueueReceiveFromISR+0x8>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  403e46:	b161      	cbz	r1, 403e62 <xQueueReceiveFromISR+0x1e>
  403e48:	4b0d      	ldr	r3, [pc, #52]	; (403e80 <xQueueReceiveFromISR+0x3c>)
  403e4a:	4718      	bx	r3
  403e4c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403e50:	b672      	cpsid	i
  403e52:	f383 8811 	msr	BASEPRI, r3
  403e56:	f3bf 8f6f 	isb	sy
  403e5a:	f3bf 8f4f 	dsb	sy
  403e5e:	b662      	cpsie	i
  403e60:	e7fe      	b.n	403e60 <xQueueReceiveFromISR+0x1c>
  403e62:	6c03      	ldr	r3, [r0, #64]	; 0x40
  403e64:	2b00      	cmp	r3, #0
  403e66:	d0ef      	beq.n	403e48 <xQueueReceiveFromISR+0x4>
  403e68:	f04f 0380 	mov.w	r3, #128	; 0x80
  403e6c:	b672      	cpsid	i
  403e6e:	f383 8811 	msr	BASEPRI, r3
  403e72:	f3bf 8f6f 	isb	sy
  403e76:	f3bf 8f4f 	dsb	sy
  403e7a:	b662      	cpsie	i
  403e7c:	e7fe      	b.n	403e7c <xQueueReceiveFromISR+0x38>
  403e7e:	bf00      	nop
  403e80:	004038f9 	.word	0x004038f9

00403e84 <xQueuePeekFromISR>:
{
  403e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxQueue );
  403e86:	b170      	cbz	r0, 403ea6 <xQueuePeekFromISR+0x22>
	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
  403e88:	6c03      	ldr	r3, [r0, #64]	; 0x40
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  403e8a:	2900      	cmp	r1, #0
  403e8c:	d032      	beq.n	403ef4 <xQueuePeekFromISR+0x70>
	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
  403e8e:	b9ab      	cbnz	r3, 403ebc <xQueuePeekFromISR+0x38>
  403e90:	f04f 0380 	mov.w	r3, #128	; 0x80
  403e94:	b672      	cpsid	i
  403e96:	f383 8811 	msr	BASEPRI, r3
  403e9a:	f3bf 8f6f 	isb	sy
  403e9e:	f3bf 8f4f 	dsb	sy
  403ea2:	b662      	cpsie	i
  403ea4:	e7fe      	b.n	403ea4 <xQueuePeekFromISR+0x20>
  403ea6:	f04f 0380 	mov.w	r3, #128	; 0x80
  403eaa:	b672      	cpsid	i
  403eac:	f383 8811 	msr	BASEPRI, r3
  403eb0:	f3bf 8f6f 	isb	sy
  403eb4:	f3bf 8f4f 	dsb	sy
  403eb8:	b662      	cpsie	i
  403eba:	e7fe      	b.n	403eba <xQueuePeekFromISR+0x36>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  403ebc:	4b14      	ldr	r3, [pc, #80]	; (403f10 <xQueuePeekFromISR+0x8c>)
  403ebe:	4604      	mov	r4, r0
  403ec0:	460d      	mov	r5, r1
  403ec2:	4798      	blx	r3
	__asm volatile
  403ec4:	f3ef 8611 	mrs	r6, BASEPRI
  403ec8:	f04f 0380 	mov.w	r3, #128	; 0x80
  403ecc:	b672      	cpsid	i
  403ece:	f383 8811 	msr	BASEPRI, r3
  403ed2:	f3bf 8f6f 	isb	sy
  403ed6:	f3bf 8f4f 	dsb	sy
  403eda:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  403edc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  403ede:	b130      	cbz	r0, 403eee <xQueuePeekFromISR+0x6a>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
  403ee0:	4620      	mov	r0, r4
  403ee2:	4629      	mov	r1, r5
  403ee4:	4b0b      	ldr	r3, [pc, #44]	; (403f14 <xQueuePeekFromISR+0x90>)
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  403ee6:	68e7      	ldr	r7, [r4, #12]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
  403ee8:	4798      	blx	r3
			xReturn = pdPASS;
  403eea:	2001      	movs	r0, #1
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  403eec:	60e7      	str	r7, [r4, #12]
	__asm volatile
  403eee:	f386 8811 	msr	BASEPRI, r6
}
  403ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  403ef4:	2b00      	cmp	r3, #0
  403ef6:	d0cb      	beq.n	403e90 <xQueuePeekFromISR+0xc>
	__asm volatile
  403ef8:	f04f 0380 	mov.w	r3, #128	; 0x80
  403efc:	b672      	cpsid	i
  403efe:	f383 8811 	msr	BASEPRI, r3
  403f02:	f3bf 8f6f 	isb	sy
  403f06:	f3bf 8f4f 	dsb	sy
  403f0a:	b662      	cpsie	i
  403f0c:	e7fe      	b.n	403f0c <xQueuePeekFromISR+0x88>
  403f0e:	bf00      	nop
  403f10:	00403759 	.word	0x00403759
  403f14:	00403831 	.word	0x00403831

00403f18 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
  403f18:	4a02      	ldr	r2, [pc, #8]	; (403f24 <vTaskSuspendAll+0xc>)
  403f1a:	6813      	ldr	r3, [r2, #0]
  403f1c:	3301      	adds	r3, #1
  403f1e:	6013      	str	r3, [r2, #0]
  403f20:	4770      	bx	lr
  403f22:	bf00      	nop
  403f24:	20429634 	.word	0x20429634

00403f28 <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
  403f28:	b508      	push	{r3, lr}
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  403f2a:	4b02      	ldr	r3, [pc, #8]	; (403f34 <xTaskGetTickCountFromISR+0xc>)
  403f2c:	4798      	blx	r3

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
	{
		xReturn = xTickCount;
  403f2e:	4b02      	ldr	r3, [pc, #8]	; (403f38 <xTaskGetTickCountFromISR+0x10>)
  403f30:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
  403f32:	bd08      	pop	{r3, pc}
  403f34:	00403759 	.word	0x00403759
  403f38:	20429670 	.word	0x20429670

00403f3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
  403f3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  403f40:	4b4f      	ldr	r3, [pc, #316]	; (404080 <xTaskIncrementTick+0x144>)
  403f42:	681b      	ldr	r3, [r3, #0]
  403f44:	2b00      	cmp	r3, #0
  403f46:	d16f      	bne.n	404028 <xTaskIncrementTick+0xec>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  403f48:	4b4e      	ldr	r3, [pc, #312]	; (404084 <xTaskIncrementTick+0x148>)
  403f4a:	681e      	ldr	r6, [r3, #0]
  403f4c:	3601      	adds	r6, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
  403f4e:	601e      	str	r6, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
  403f50:	2e00      	cmp	r6, #0
  403f52:	d05a      	beq.n	40400a <xTaskIncrementTick+0xce>
  403f54:	f8df a158 	ldr.w	sl, [pc, #344]	; 4040b0 <xTaskIncrementTick+0x174>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
  403f58:	f8da 2000 	ldr.w	r2, [sl]
  403f5c:	2400      	movs	r4, #0
  403f5e:	4296      	cmp	r6, r2
  403f60:	d36a      	bcc.n	404038 <xTaskIncrementTick+0xfc>
  403f62:	4d49      	ldr	r5, [pc, #292]	; (404088 <xTaskIncrementTick+0x14c>)
  403f64:	4f49      	ldr	r7, [pc, #292]	; (40408c <xTaskIncrementTick+0x150>)
  403f66:	f8df 814c 	ldr.w	r8, [pc, #332]	; 4040b4 <xTaskIncrementTick+0x178>
  403f6a:	e02f      	b.n	403fcc <xTaskIncrementTick+0x90>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  403f6c:	682a      	ldr	r2, [r5, #0]
  403f6e:	68d2      	ldr	r2, [r2, #12]
  403f70:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  403f74:	f8d9 1004 	ldr.w	r1, [r9, #4]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  403f78:	f109 0b04 	add.w	fp, r9, #4
					if( xConstTickCount < xItemValue )
  403f7c:	428e      	cmp	r6, r1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  403f7e:	4658      	mov	r0, fp
					if( xConstTickCount < xItemValue )
  403f80:	d373      	bcc.n	40406a <xTaskIncrementTick+0x12e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  403f82:	4b43      	ldr	r3, [pc, #268]	; (404090 <xTaskIncrementTick+0x154>)
  403f84:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  403f86:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  403f8a:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  403f8e:	b109      	cbz	r1, 403f94 <xTaskIncrementTick+0x58>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  403f90:	4b3f      	ldr	r3, [pc, #252]	; (404090 <xTaskIncrementTick+0x154>)
  403f92:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
  403f94:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
  403f98:	f04f 0e01 	mov.w	lr, #1
  403f9c:	4b3d      	ldr	r3, [pc, #244]	; (404094 <xTaskIncrementTick+0x158>)
  403f9e:	4659      	mov	r1, fp
  403fa0:	fa0e fe00 	lsl.w	lr, lr, r0
  403fa4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403fa8:	681b      	ldr	r3, [r3, #0]
  403faa:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  403fae:	ea4e 0e03 	orr.w	lr, lr, r3
  403fb2:	4b38      	ldr	r3, [pc, #224]	; (404094 <xTaskIncrementTick+0x158>)
  403fb4:	f8c3 e000 	str.w	lr, [r3]
  403fb8:	4b37      	ldr	r3, [pc, #220]	; (404098 <xTaskIncrementTick+0x15c>)
  403fba:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  403fbc:	f8d8 0000 	ldr.w	r0, [r8]
  403fc0:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
  403fc4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
						{
							xSwitchRequired = pdTRUE;
  403fc6:	4291      	cmp	r1, r2
  403fc8:	bf28      	it	cs
  403fca:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  403fcc:	682a      	ldr	r2, [r5, #0]
  403fce:	6812      	ldr	r2, [r2, #0]
  403fd0:	2a00      	cmp	r2, #0
  403fd2:	d1cb      	bne.n	403f6c <xTaskIncrementTick+0x30>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  403fd4:	f04f 32ff 	mov.w	r2, #4294967295
  403fd8:	f8ca 2000 	str.w	r2, [sl]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  403fdc:	f8d8 3000 	ldr.w	r3, [r8]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  403fe0:	492e      	ldr	r1, [pc, #184]	; (40409c <xTaskIncrementTick+0x160>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  403fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  403fe4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  403fe8:	009b      	lsls	r3, r3, #2
  403fea:	58fa      	ldr	r2, [r7, r3]
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  403fec:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
  403fee:	2a02      	cmp	r2, #2
  403ff0:	bf28      	it	cs
  403ff2:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  403ff4:	b90b      	cbnz	r3, 403ffa <xTaskIncrementTick+0xbe>
			{
				vApplicationTickHook();
  403ff6:	4b2a      	ldr	r3, [pc, #168]	; (4040a0 <xTaskIncrementTick+0x164>)
  403ff8:	4798      	blx	r3
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
  403ffa:	4b2a      	ldr	r3, [pc, #168]	; (4040a4 <xTaskIncrementTick+0x168>)
  403ffc:	681b      	ldr	r3, [r3, #0]
		{
			xSwitchRequired = pdTRUE;
  403ffe:	2b00      	cmp	r3, #0
  404000:	bf18      	it	ne
  404002:	2401      	movne	r4, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
  404004:	4620      	mov	r0, r4
  404006:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
  40400a:	4d1f      	ldr	r5, [pc, #124]	; (404088 <xTaskIncrementTick+0x14c>)
  40400c:	682b      	ldr	r3, [r5, #0]
  40400e:	681b      	ldr	r3, [r3, #0]
  404010:	b1b3      	cbz	r3, 404040 <xTaskIncrementTick+0x104>
  404012:	f04f 0380 	mov.w	r3, #128	; 0x80
  404016:	b672      	cpsid	i
  404018:	f383 8811 	msr	BASEPRI, r3
  40401c:	f3bf 8f6f 	isb	sy
  404020:	f3bf 8f4f 	dsb	sy
  404024:	b662      	cpsie	i
  404026:	e7fe      	b.n	404026 <xTaskIncrementTick+0xea>
		++uxPendedTicks;
  404028:	4a1c      	ldr	r2, [pc, #112]	; (40409c <xTaskIncrementTick+0x160>)
BaseType_t xSwitchRequired = pdFALSE;
  40402a:	2400      	movs	r4, #0
			vApplicationTickHook();
  40402c:	491c      	ldr	r1, [pc, #112]	; (4040a0 <xTaskIncrementTick+0x164>)
		++uxPendedTicks;
  40402e:	6813      	ldr	r3, [r2, #0]
  404030:	3301      	adds	r3, #1
  404032:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  404034:	4788      	blx	r1
  404036:	e7e0      	b.n	403ffa <xTaskIncrementTick+0xbe>
  404038:	4f14      	ldr	r7, [pc, #80]	; (40408c <xTaskIncrementTick+0x150>)
  40403a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 4040b4 <xTaskIncrementTick+0x178>
  40403e:	e7cd      	b.n	403fdc <xTaskIncrementTick+0xa0>
			taskSWITCH_DELAYED_LISTS();
  404040:	4b19      	ldr	r3, [pc, #100]	; (4040a8 <xTaskIncrementTick+0x16c>)
  404042:	6829      	ldr	r1, [r5, #0]
  404044:	4a19      	ldr	r2, [pc, #100]	; (4040ac <xTaskIncrementTick+0x170>)
  404046:	6818      	ldr	r0, [r3, #0]
  404048:	6028      	str	r0, [r5, #0]
  40404a:	6019      	str	r1, [r3, #0]
  40404c:	6813      	ldr	r3, [r2, #0]
  40404e:	3301      	adds	r3, #1
  404050:	6013      	str	r3, [r2, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  404052:	682b      	ldr	r3, [r5, #0]
  404054:	681b      	ldr	r3, [r3, #0]
  404056:	b15b      	cbz	r3, 404070 <xTaskIncrementTick+0x134>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  404058:	682a      	ldr	r2, [r5, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
  40405a:	f8df a054 	ldr.w	sl, [pc, #84]	; 4040b0 <xTaskIncrementTick+0x174>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  40405e:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
  404060:	68d2      	ldr	r2, [r2, #12]
  404062:	6852      	ldr	r2, [r2, #4]
  404064:	f8ca 2000 	str.w	r2, [sl]
  404068:	e776      	b.n	403f58 <xTaskIncrementTick+0x1c>
						xNextTaskUnblockTime = xItemValue;
  40406a:	f8ca 1000 	str.w	r1, [sl]
						break;
  40406e:	e7b5      	b.n	403fdc <xTaskIncrementTick+0xa0>
		xNextTaskUnblockTime = portMAX_DELAY;
  404070:	f8df a03c 	ldr.w	sl, [pc, #60]	; 4040b0 <xTaskIncrementTick+0x174>
  404074:	f04f 32ff 	mov.w	r2, #4294967295
  404078:	f8ca 2000 	str.w	r2, [sl]
  40407c:	e76c      	b.n	403f58 <xTaskIncrementTick+0x1c>
  40407e:	bf00      	nop
  404080:	20429634 	.word	0x20429634
  404084:	20429670 	.word	0x20429670
  404088:	204295c0 	.word	0x204295c0
  40408c:	204295c8 	.word	0x204295c8
  404090:	004035f9 	.word	0x004035f9
  404094:	20429638 	.word	0x20429638
  404098:	004035ad 	.word	0x004035ad
  40409c:	20429630 	.word	0x20429630
  4040a0:	004059e1 	.word	0x004059e1
  4040a4:	20429674 	.word	0x20429674
  4040a8:	204295c4 	.word	0x204295c4
  4040ac:	20429640 	.word	0x20429640
  4040b0:	2042963c 	.word	0x2042963c
  4040b4:	204295bc 	.word	0x204295bc

004040b8 <xTaskResumeAll>:
{
  4040b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
  4040bc:	4c3d      	ldr	r4, [pc, #244]	; (4041b4 <xTaskResumeAll+0xfc>)
  4040be:	6823      	ldr	r3, [r4, #0]
  4040c0:	b953      	cbnz	r3, 4040d8 <xTaskResumeAll+0x20>
  4040c2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4040c6:	b672      	cpsid	i
  4040c8:	f383 8811 	msr	BASEPRI, r3
  4040cc:	f3bf 8f6f 	isb	sy
  4040d0:	f3bf 8f4f 	dsb	sy
  4040d4:	b662      	cpsie	i
  4040d6:	e7fe      	b.n	4040d6 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  4040d8:	4b37      	ldr	r3, [pc, #220]	; (4041b8 <xTaskResumeAll+0x100>)
  4040da:	4798      	blx	r3
		--uxSchedulerSuspended;
  4040dc:	6823      	ldr	r3, [r4, #0]
  4040de:	3b01      	subs	r3, #1
  4040e0:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4040e2:	6824      	ldr	r4, [r4, #0]
  4040e4:	2c00      	cmp	r4, #0
  4040e6:	d157      	bne.n	404198 <xTaskResumeAll+0xe0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  4040e8:	4b34      	ldr	r3, [pc, #208]	; (4041bc <xTaskResumeAll+0x104>)
  4040ea:	681b      	ldr	r3, [r3, #0]
  4040ec:	2b00      	cmp	r3, #0
  4040ee:	d053      	beq.n	404198 <xTaskResumeAll+0xe0>
  4040f0:	4d33      	ldr	r5, [pc, #204]	; (4041c0 <xTaskResumeAll+0x108>)
  4040f2:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 4041e8 <xTaskResumeAll+0x130>
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4040f6:	4f33      	ldr	r7, [pc, #204]	; (4041c4 <xTaskResumeAll+0x10c>)
					prvAddTaskToReadyList( pxTCB );
  4040f8:	4e33      	ldr	r6, [pc, #204]	; (4041c8 <xTaskResumeAll+0x110>)
  4040fa:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 4041ec <xTaskResumeAll+0x134>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4040fe:	f8db 3000 	ldr.w	r3, [fp]
					prvAddTaskToReadyList( pxTCB );
  404102:	f04f 0801 	mov.w	r8, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  404106:	b333      	cbz	r3, 404156 <xTaskResumeAll+0x9e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  404108:	f8db 300c 	ldr.w	r3, [fp, #12]
  40410c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  40410e:	f104 0a04 	add.w	sl, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  404112:	f104 0018 	add.w	r0, r4, #24
  404116:	47b8      	blx	r7
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  404118:	4650      	mov	r0, sl
  40411a:	47b8      	blx	r7
					prvAddTaskToReadyList( pxTCB );
  40411c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40411e:	f8d6 e000 	ldr.w	lr, [r6]
  404122:	4651      	mov	r1, sl
  404124:	fa08 f300 	lsl.w	r3, r8, r0
  404128:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40412c:	4a27      	ldr	r2, [pc, #156]	; (4041cc <xTaskResumeAll+0x114>)
  40412e:	ea43 030e 	orr.w	r3, r3, lr
  404132:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  404136:	6033      	str	r3, [r6, #0]
  404138:	4790      	blx	r2
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40413a:	4b25      	ldr	r3, [pc, #148]	; (4041d0 <xTaskResumeAll+0x118>)
  40413c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40413e:	681b      	ldr	r3, [r3, #0]
  404140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  404142:	429a      	cmp	r2, r3
  404144:	d3db      	bcc.n	4040fe <xTaskResumeAll+0x46>
						xYieldPending = pdTRUE;
  404146:	f8c5 8000 	str.w	r8, [r5]
					prvAddTaskToReadyList( pxTCB );
  40414a:	f04f 0801 	mov.w	r8, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40414e:	f8db 3000 	ldr.w	r3, [fp]
  404152:	2b00      	cmp	r3, #0
  404154:	d1d8      	bne.n	404108 <xTaskResumeAll+0x50>
				if( pxTCB != NULL )
  404156:	b13c      	cbz	r4, 404168 <xTaskResumeAll+0xb0>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  404158:	4b1e      	ldr	r3, [pc, #120]	; (4041d4 <xTaskResumeAll+0x11c>)
  40415a:	681a      	ldr	r2, [r3, #0]
  40415c:	6812      	ldr	r2, [r2, #0]
  40415e:	bb0a      	cbnz	r2, 4041a4 <xTaskResumeAll+0xec>
		xNextTaskUnblockTime = portMAX_DELAY;
  404160:	4b1d      	ldr	r3, [pc, #116]	; (4041d8 <xTaskResumeAll+0x120>)
  404162:	f04f 32ff 	mov.w	r2, #4294967295
  404166:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
  404168:	4e1c      	ldr	r6, [pc, #112]	; (4041dc <xTaskResumeAll+0x124>)
  40416a:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
  40416c:	b144      	cbz	r4, 404180 <xTaskResumeAll+0xc8>
  40416e:	f8df 8080 	ldr.w	r8, [pc, #128]	; 4041f0 <xTaskResumeAll+0x138>
								xYieldPending = pdTRUE;
  404172:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
  404174:	47c0      	blx	r8
  404176:	b100      	cbz	r0, 40417a <xTaskResumeAll+0xc2>
								xYieldPending = pdTRUE;
  404178:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
  40417a:	3c01      	subs	r4, #1
  40417c:	d1fa      	bne.n	404174 <xTaskResumeAll+0xbc>
						uxPendedTicks = 0;
  40417e:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
  404180:	682b      	ldr	r3, [r5, #0]
  404182:	b14b      	cbz	r3, 404198 <xTaskResumeAll+0xe0>
					taskYIELD_IF_USING_PREEMPTION();
  404184:	4b16      	ldr	r3, [pc, #88]	; (4041e0 <xTaskResumeAll+0x128>)
  404186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40418a:	601a      	str	r2, [r3, #0]
  40418c:	f3bf 8f4f 	dsb	sy
  404190:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  404194:	2401      	movs	r4, #1
  404196:	e000      	b.n	40419a <xTaskResumeAll+0xe2>
BaseType_t xAlreadyYielded = pdFALSE;
  404198:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  40419a:	4b12      	ldr	r3, [pc, #72]	; (4041e4 <xTaskResumeAll+0x12c>)
  40419c:	4798      	blx	r3
}
  40419e:	4620      	mov	r0, r4
  4041a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4041a4:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
  4041a6:	4b0c      	ldr	r3, [pc, #48]	; (4041d8 <xTaskResumeAll+0x120>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4041a8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
  4041aa:	68d2      	ldr	r2, [r2, #12]
  4041ac:	6852      	ldr	r2, [r2, #4]
  4041ae:	601a      	str	r2, [r3, #0]
  4041b0:	e7da      	b.n	404168 <xTaskResumeAll+0xb0>
  4041b2:	bf00      	nop
  4041b4:	20429634 	.word	0x20429634
  4041b8:	00403645 	.word	0x00403645
  4041bc:	2042962c 	.word	0x2042962c
  4041c0:	20429674 	.word	0x20429674
  4041c4:	004035f9 	.word	0x004035f9
  4041c8:	20429638 	.word	0x20429638
  4041cc:	004035ad 	.word	0x004035ad
  4041d0:	204295bc 	.word	0x204295bc
  4041d4:	204295c0 	.word	0x204295c0
  4041d8:	2042963c 	.word	0x2042963c
  4041dc:	20429630 	.word	0x20429630
  4041e0:	e000ed04 	.word	0xe000ed04
  4041e4:	00403691 	.word	0x00403691
  4041e8:	20429644 	.word	0x20429644
  4041ec:	204295c8 	.word	0x204295c8
  4041f0:	00403f3d 	.word	0x00403f3d

004041f4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  4041f4:	4b25      	ldr	r3, [pc, #148]	; (40428c <vTaskSwitchContext+0x98>)
  4041f6:	681b      	ldr	r3, [r3, #0]
  4041f8:	2b00      	cmp	r3, #0
  4041fa:	d135      	bne.n	404268 <vTaskSwitchContext+0x74>
		xYieldPending = pdFALSE;
  4041fc:	4a24      	ldr	r2, [pc, #144]	; (404290 <vTaskSwitchContext+0x9c>)
{
  4041fe:	b510      	push	{r4, lr}
		taskCHECK_FOR_STACK_OVERFLOW();
  404200:	4c24      	ldr	r4, [pc, #144]	; (404294 <vTaskSwitchContext+0xa0>)
		xYieldPending = pdFALSE;
  404202:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  404204:	6823      	ldr	r3, [r4, #0]
  404206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404208:	681a      	ldr	r2, [r3, #0]
  40420a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40420e:	d103      	bne.n	404218 <vTaskSwitchContext+0x24>
  404210:	685a      	ldr	r2, [r3, #4]
  404212:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  404216:	d02b      	beq.n	404270 <vTaskSwitchContext+0x7c>
  404218:	6820      	ldr	r0, [r4, #0]
  40421a:	6821      	ldr	r1, [r4, #0]
  40421c:	4b1e      	ldr	r3, [pc, #120]	; (404298 <vTaskSwitchContext+0xa4>)
  40421e:	3134      	adds	r1, #52	; 0x34
  404220:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  404222:	4b1e      	ldr	r3, [pc, #120]	; (40429c <vTaskSwitchContext+0xa8>)
  404224:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
  404226:	fab3 f383 	clz	r3, r3
  40422a:	b2db      	uxtb	r3, r3
  40422c:	4a1c      	ldr	r2, [pc, #112]	; (4042a0 <vTaskSwitchContext+0xac>)
  40422e:	f1c3 031f 	rsb	r3, r3, #31
  404232:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  404236:	009b      	lsls	r3, r3, #2
  404238:	58d0      	ldr	r0, [r2, r3]
  40423a:	18d1      	adds	r1, r2, r3
  40423c:	b950      	cbnz	r0, 404254 <vTaskSwitchContext+0x60>
	__asm volatile
  40423e:	f04f 0380 	mov.w	r3, #128	; 0x80
  404242:	b672      	cpsid	i
  404244:	f383 8811 	msr	BASEPRI, r3
  404248:	f3bf 8f6f 	isb	sy
  40424c:	f3bf 8f4f 	dsb	sy
  404250:	b662      	cpsie	i
  404252:	e7fe      	b.n	404252 <vTaskSwitchContext+0x5e>
  404254:	3308      	adds	r3, #8
  404256:	6848      	ldr	r0, [r1, #4]
  404258:	441a      	add	r2, r3
  40425a:	6843      	ldr	r3, [r0, #4]
  40425c:	4293      	cmp	r3, r2
  40425e:	604b      	str	r3, [r1, #4]
  404260:	d00f      	beq.n	404282 <vTaskSwitchContext+0x8e>
  404262:	68db      	ldr	r3, [r3, #12]
  404264:	6023      	str	r3, [r4, #0]
  404266:	bd10      	pop	{r4, pc}
		xYieldPending = pdTRUE;
  404268:	4b09      	ldr	r3, [pc, #36]	; (404290 <vTaskSwitchContext+0x9c>)
  40426a:	2201      	movs	r2, #1
  40426c:	601a      	str	r2, [r3, #0]
  40426e:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  404270:	689a      	ldr	r2, [r3, #8]
  404272:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  404276:	d1cf      	bne.n	404218 <vTaskSwitchContext+0x24>
  404278:	68db      	ldr	r3, [r3, #12]
  40427a:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  40427e:	d1cb      	bne.n	404218 <vTaskSwitchContext+0x24>
  404280:	e7cf      	b.n	404222 <vTaskSwitchContext+0x2e>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  404282:	685b      	ldr	r3, [r3, #4]
  404284:	604b      	str	r3, [r1, #4]
  404286:	68db      	ldr	r3, [r3, #12]
  404288:	6023      	str	r3, [r4, #0]
  40428a:	bd10      	pop	{r4, pc}
  40428c:	20429634 	.word	0x20429634
  404290:	20429674 	.word	0x20429674
  404294:	204295bc 	.word	0x204295bc
  404298:	004059c9 	.word	0x004059c9
  40429c:	20429638 	.word	0x20429638
  4042a0:	204295c8 	.word	0x204295c8

004042a4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
  4042a4:	2800      	cmp	r0, #0
  4042a6:	d02a      	beq.n	4042fe <vTaskPlaceOnEventList+0x5a>
{
  4042a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4042ac:	4d21      	ldr	r5, [pc, #132]	; (404334 <vTaskPlaceOnEventList+0x90>)
  4042ae:	460c      	mov	r4, r1
  4042b0:	4e21      	ldr	r6, [pc, #132]	; (404338 <vTaskPlaceOnEventList+0x94>)
  4042b2:	6829      	ldr	r1, [r5, #0]
  4042b4:	3118      	adds	r1, #24
  4042b6:	47b0      	blx	r6


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
  4042b8:	4a20      	ldr	r2, [pc, #128]	; (40433c <vTaskPlaceOnEventList+0x98>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  4042ba:	4b21      	ldr	r3, [pc, #132]	; (404340 <vTaskPlaceOnEventList+0x9c>)
const TickType_t xConstTickCount = xTickCount;
  4042bc:	6817      	ldr	r7, [r2, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  4042be:	6828      	ldr	r0, [r5, #0]
  4042c0:	3004      	adds	r0, #4
  4042c2:	4798      	blx	r3
  4042c4:	b940      	cbnz	r0, 4042d8 <vTaskPlaceOnEventList+0x34>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4042c6:	682b      	ldr	r3, [r5, #0]
  4042c8:	2201      	movs	r2, #1
  4042ca:	491e      	ldr	r1, [pc, #120]	; (404344 <vTaskPlaceOnEventList+0xa0>)
  4042cc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  4042ce:	680b      	ldr	r3, [r1, #0]
  4042d0:	4082      	lsls	r2, r0
  4042d2:	ea23 0302 	bic.w	r3, r3, r2
  4042d6:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  4042d8:	1c63      	adds	r3, r4, #1
  4042da:	d01b      	beq.n	404314 <vTaskPlaceOnEventList+0x70>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
  4042dc:	443c      	add	r4, r7

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  4042de:	682b      	ldr	r3, [r5, #0]

			if( xTimeToWake < xConstTickCount )
  4042e0:	42a7      	cmp	r7, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  4042e2:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
  4042e4:	d81d      	bhi.n	404322 <vTaskPlaceOnEventList+0x7e>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  4042e6:	4b18      	ldr	r3, [pc, #96]	; (404348 <vTaskPlaceOnEventList+0xa4>)
  4042e8:	6818      	ldr	r0, [r3, #0]
  4042ea:	6829      	ldr	r1, [r5, #0]
  4042ec:	3104      	adds	r1, #4
  4042ee:	47b0      	blx	r6

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
  4042f0:	4b16      	ldr	r3, [pc, #88]	; (40434c <vTaskPlaceOnEventList+0xa8>)
  4042f2:	681a      	ldr	r2, [r3, #0]
  4042f4:	4294      	cmp	r4, r2
  4042f6:	d200      	bcs.n	4042fa <vTaskPlaceOnEventList+0x56>
				{
					xNextTaskUnblockTime = xTimeToWake;
  4042f8:	601c      	str	r4, [r3, #0]
  4042fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4042fe:	f04f 0380 	mov.w	r3, #128	; 0x80
  404302:	b672      	cpsid	i
  404304:	f383 8811 	msr	BASEPRI, r3
  404308:	f3bf 8f6f 	isb	sy
  40430c:	f3bf 8f4f 	dsb	sy
  404310:	b662      	cpsie	i
  404312:	e7fe      	b.n	404312 <vTaskPlaceOnEventList+0x6e>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  404314:	6829      	ldr	r1, [r5, #0]
  404316:	480e      	ldr	r0, [pc, #56]	; (404350 <vTaskPlaceOnEventList+0xac>)
  404318:	3104      	adds	r1, #4
  40431a:	4b0e      	ldr	r3, [pc, #56]	; (404354 <vTaskPlaceOnEventList+0xb0>)
}
  40431c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  404320:	4718      	bx	r3
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  404322:	4b0d      	ldr	r3, [pc, #52]	; (404358 <vTaskPlaceOnEventList+0xb4>)
  404324:	6818      	ldr	r0, [r3, #0]
  404326:	4633      	mov	r3, r6
  404328:	6829      	ldr	r1, [r5, #0]
}
  40432a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  40432e:	3104      	adds	r1, #4
  404330:	4718      	bx	r3
  404332:	bf00      	nop
  404334:	204295bc 	.word	0x204295bc
  404338:	004035c5 	.word	0x004035c5
  40433c:	20429670 	.word	0x20429670
  404340:	004035f9 	.word	0x004035f9
  404344:	20429638 	.word	0x20429638
  404348:	204295c0 	.word	0x204295c0
  40434c:	2042963c 	.word	0x2042963c
  404350:	2042965c 	.word	0x2042965c
  404354:	004035ad 	.word	0x004035ad
  404358:	204295c4 	.word	0x204295c4

0040435c <xTaskRemoveFromEventList>:
{
  40435c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  40435e:	68c3      	ldr	r3, [r0, #12]
  404360:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  404362:	b31c      	cbz	r4, 4043ac <xTaskRemoveFromEventList+0x50>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  404364:	f104 0518 	add.w	r5, r4, #24
  404368:	4f19      	ldr	r7, [pc, #100]	; (4043d0 <xTaskRemoveFromEventList+0x74>)
  40436a:	4628      	mov	r0, r5
  40436c:	47b8      	blx	r7
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40436e:	4b19      	ldr	r3, [pc, #100]	; (4043d4 <xTaskRemoveFromEventList+0x78>)
  404370:	681b      	ldr	r3, [r3, #0]
  404372:	bb43      	cbnz	r3, 4043c6 <xTaskRemoveFromEventList+0x6a>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
  404374:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
  404376:	4d18      	ldr	r5, [pc, #96]	; (4043d8 <xTaskRemoveFromEventList+0x7c>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
  404378:	4630      	mov	r0, r6
  40437a:	47b8      	blx	r7
		prvAddTaskToReadyList( pxUnblockedTCB );
  40437c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40437e:	2301      	movs	r3, #1
  404380:	4816      	ldr	r0, [pc, #88]	; (4043dc <xTaskRemoveFromEventList+0x80>)
  404382:	eb02 0782 	add.w	r7, r2, r2, lsl #2
  404386:	4631      	mov	r1, r6
  404388:	4093      	lsls	r3, r2
  40438a:	682a      	ldr	r2, [r5, #0]
  40438c:	eb00 0087 	add.w	r0, r0, r7, lsl #2
  404390:	4313      	orrs	r3, r2
  404392:	4a13      	ldr	r2, [pc, #76]	; (4043e0 <xTaskRemoveFromEventList+0x84>)
  404394:	602b      	str	r3, [r5, #0]
  404396:	4790      	blx	r2
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  404398:	4b12      	ldr	r3, [pc, #72]	; (4043e4 <xTaskRemoveFromEventList+0x88>)
  40439a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40439c:	681b      	ldr	r3, [r3, #0]
  40439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4043a0:	429a      	cmp	r2, r3
  4043a2:	d90e      	bls.n	4043c2 <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
  4043a4:	4b10      	ldr	r3, [pc, #64]	; (4043e8 <xTaskRemoveFromEventList+0x8c>)
  4043a6:	2001      	movs	r0, #1
  4043a8:	6018      	str	r0, [r3, #0]
  4043aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4043ac:	f04f 0380 	mov.w	r3, #128	; 0x80
  4043b0:	b672      	cpsid	i
  4043b2:	f383 8811 	msr	BASEPRI, r3
  4043b6:	f3bf 8f6f 	isb	sy
  4043ba:	f3bf 8f4f 	dsb	sy
  4043be:	b662      	cpsie	i
  4043c0:	e7fe      	b.n	4043c0 <xTaskRemoveFromEventList+0x64>
		xReturn = pdFALSE;
  4043c2:	2000      	movs	r0, #0
}
  4043c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4043c6:	4629      	mov	r1, r5
  4043c8:	4808      	ldr	r0, [pc, #32]	; (4043ec <xTaskRemoveFromEventList+0x90>)
  4043ca:	4b05      	ldr	r3, [pc, #20]	; (4043e0 <xTaskRemoveFromEventList+0x84>)
  4043cc:	4798      	blx	r3
  4043ce:	e7e3      	b.n	404398 <xTaskRemoveFromEventList+0x3c>
  4043d0:	004035f9 	.word	0x004035f9
  4043d4:	20429634 	.word	0x20429634
  4043d8:	20429638 	.word	0x20429638
  4043dc:	204295c8 	.word	0x204295c8
  4043e0:	004035ad 	.word	0x004035ad
  4043e4:	204295bc 	.word	0x204295bc
  4043e8:	20429674 	.word	0x20429674
  4043ec:	20429644 	.word	0x20429644

004043f0 <vTaskRemoveFromUnorderedEventList>:
{
  4043f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
  4043f2:	4b1e      	ldr	r3, [pc, #120]	; (40446c <vTaskRemoveFromUnorderedEventList+0x7c>)
  4043f4:	681b      	ldr	r3, [r3, #0]
  4043f6:	b953      	cbnz	r3, 40440e <vTaskRemoveFromUnorderedEventList+0x1e>
  4043f8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4043fc:	b672      	cpsid	i
  4043fe:	f383 8811 	msr	BASEPRI, r3
  404402:	f3bf 8f6f 	isb	sy
  404406:	f3bf 8f4f 	dsb	sy
  40440a:	b662      	cpsie	i
  40440c:	e7fe      	b.n	40440c <vTaskRemoveFromUnorderedEventList+0x1c>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
  40440e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
  404412:	68c4      	ldr	r4, [r0, #12]
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
  404414:	6001      	str	r1, [r0, #0]
	configASSERT( pxUnblockedTCB );
  404416:	b1ec      	cbz	r4, 404454 <vTaskRemoveFromUnorderedEventList+0x64>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
  404418:	1d26      	adds	r6, r4, #4
	( void ) uxListRemove( pxEventListItem );
  40441a:	4f15      	ldr	r7, [pc, #84]	; (404470 <vTaskRemoveFromUnorderedEventList+0x80>)
  40441c:	47b8      	blx	r7
	prvAddTaskToReadyList( pxUnblockedTCB );
  40441e:	2501      	movs	r5, #1
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
  404420:	4630      	mov	r0, r6
  404422:	47b8      	blx	r7
	prvAddTaskToReadyList( pxUnblockedTCB );
  404424:	4a13      	ldr	r2, [pc, #76]	; (404474 <vTaskRemoveFromUnorderedEventList+0x84>)
  404426:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  404428:	4631      	mov	r1, r6
  40442a:	6816      	ldr	r6, [r2, #0]
  40442c:	fa05 f300 	lsl.w	r3, r5, r0
  404430:	4f11      	ldr	r7, [pc, #68]	; (404478 <vTaskRemoveFromUnorderedEventList+0x88>)
  404432:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  404436:	4333      	orrs	r3, r6
  404438:	4e10      	ldr	r6, [pc, #64]	; (40447c <vTaskRemoveFromUnorderedEventList+0x8c>)
  40443a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  40443e:	6013      	str	r3, [r2, #0]
  404440:	47b0      	blx	r6
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  404442:	4b0f      	ldr	r3, [pc, #60]	; (404480 <vTaskRemoveFromUnorderedEventList+0x90>)
  404444:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  404446:	681b      	ldr	r3, [r3, #0]
  404448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40444a:	429a      	cmp	r2, r3
  40444c:	d901      	bls.n	404452 <vTaskRemoveFromUnorderedEventList+0x62>
		xYieldPending = pdTRUE;
  40444e:	4b0d      	ldr	r3, [pc, #52]	; (404484 <vTaskRemoveFromUnorderedEventList+0x94>)
  404450:	601d      	str	r5, [r3, #0]
  404452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404454:	f04f 0380 	mov.w	r3, #128	; 0x80
  404458:	b672      	cpsid	i
  40445a:	f383 8811 	msr	BASEPRI, r3
  40445e:	f3bf 8f6f 	isb	sy
  404462:	f3bf 8f4f 	dsb	sy
  404466:	b662      	cpsie	i
  404468:	e7fe      	b.n	404468 <vTaskRemoveFromUnorderedEventList+0x78>
  40446a:	bf00      	nop
  40446c:	20429634 	.word	0x20429634
  404470:	004035f9 	.word	0x004035f9
  404474:	20429638 	.word	0x20429638
  404478:	204295c8 	.word	0x204295c8
  40447c:	004035ad 	.word	0x004035ad
  404480:	204295bc 	.word	0x204295bc
  404484:	20429674 	.word	0x20429674

00404488 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  404488:	4a03      	ldr	r2, [pc, #12]	; (404498 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
  40448a:	4b04      	ldr	r3, [pc, #16]	; (40449c <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  40448c:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  40448e:	681b      	ldr	r3, [r3, #0]
  404490:	e880 000c 	stmia.w	r0, {r2, r3}
  404494:	4770      	bx	lr
  404496:	bf00      	nop
  404498:	20429640 	.word	0x20429640
  40449c:	20429670 	.word	0x20429670

004044a0 <xTaskCheckForTimeOut>:
{
  4044a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
  4044a2:	2800      	cmp	r0, #0
  4044a4:	d02d      	beq.n	404502 <xTaskCheckForTimeOut+0x62>
	configASSERT( pxTicksToWait );
  4044a6:	b309      	cbz	r1, 4044ec <xTaskCheckForTimeOut+0x4c>
  4044a8:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4044aa:	4b22      	ldr	r3, [pc, #136]	; (404534 <xTaskCheckForTimeOut+0x94>)
  4044ac:	4604      	mov	r4, r0
  4044ae:	4798      	blx	r3
			if( *pxTicksToWait == portMAX_DELAY )
  4044b0:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
  4044b2:	f8df e08c 	ldr.w	lr, [pc, #140]	; 404540 <xTaskCheckForTimeOut+0xa0>
			if( *pxTicksToWait == portMAX_DELAY )
  4044b6:	1c59      	adds	r1, r3, #1
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  4044b8:	6866      	ldr	r6, [r4, #4]
		const TickType_t xConstTickCount = xTickCount;
  4044ba:	f8de 2000 	ldr.w	r2, [lr]
			if( *pxTicksToWait == portMAX_DELAY )
  4044be:	d037      	beq.n	404530 <xTaskCheckForTimeOut+0x90>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  4044c0:	481d      	ldr	r0, [pc, #116]	; (404538 <xTaskCheckForTimeOut+0x98>)
  4044c2:	6821      	ldr	r1, [r4, #0]
  4044c4:	6807      	ldr	r7, [r0, #0]
  4044c6:	42b9      	cmp	r1, r7
  4044c8:	d006      	beq.n	4044d8 <xTaskCheckForTimeOut+0x38>
  4044ca:	42b2      	cmp	r2, r6
  4044cc:	d304      	bcc.n	4044d8 <xTaskCheckForTimeOut+0x38>
			xReturn = pdTRUE;
  4044ce:	2601      	movs	r6, #1
	taskEXIT_CRITICAL();
  4044d0:	4b1a      	ldr	r3, [pc, #104]	; (40453c <xTaskCheckForTimeOut+0x9c>)
  4044d2:	4798      	blx	r3
}
  4044d4:	4630      	mov	r0, r6
  4044d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  4044d8:	1b92      	subs	r2, r2, r6
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
  4044da:	429a      	cmp	r2, r3
  4044dc:	d31c      	bcc.n	404518 <xTaskCheckForTimeOut+0x78>
			*pxTicksToWait = 0;
  4044de:	2300      	movs	r3, #0
			xReturn = pdTRUE;
  4044e0:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
  4044e2:	602b      	str	r3, [r5, #0]
	taskEXIT_CRITICAL();
  4044e4:	4b15      	ldr	r3, [pc, #84]	; (40453c <xTaskCheckForTimeOut+0x9c>)
  4044e6:	4798      	blx	r3
}
  4044e8:	4630      	mov	r0, r6
  4044ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4044ec:	f04f 0380 	mov.w	r3, #128	; 0x80
  4044f0:	b672      	cpsid	i
  4044f2:	f383 8811 	msr	BASEPRI, r3
  4044f6:	f3bf 8f6f 	isb	sy
  4044fa:	f3bf 8f4f 	dsb	sy
  4044fe:	b662      	cpsie	i
  404500:	e7fe      	b.n	404500 <xTaskCheckForTimeOut+0x60>
  404502:	f04f 0380 	mov.w	r3, #128	; 0x80
  404506:	b672      	cpsid	i
  404508:	f383 8811 	msr	BASEPRI, r3
  40450c:	f3bf 8f6f 	isb	sy
  404510:	f3bf 8f4f 	dsb	sy
  404514:	b662      	cpsie	i
  404516:	e7fe      	b.n	404516 <xTaskCheckForTimeOut+0x76>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  404518:	6800      	ldr	r0, [r0, #0]
			*pxTicksToWait -= xElapsedTime;
  40451a:	1a9b      	subs	r3, r3, r2
	pxTimeOut->xTimeOnEntering = xTickCount;
  40451c:	f8de 2000 	ldr.w	r2, [lr]
			xReturn = pdFALSE;
  404520:	2600      	movs	r6, #0
			*pxTicksToWait -= xElapsedTime;
  404522:	602b      	str	r3, [r5, #0]
	taskEXIT_CRITICAL();
  404524:	4b05      	ldr	r3, [pc, #20]	; (40453c <xTaskCheckForTimeOut+0x9c>)
	pxTimeOut->xTimeOnEntering = xTickCount;
  404526:	e884 0005 	stmia.w	r4, {r0, r2}
	taskEXIT_CRITICAL();
  40452a:	4798      	blx	r3
}
  40452c:	4630      	mov	r0, r6
  40452e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
  404530:	2600      	movs	r6, #0
  404532:	e7cd      	b.n	4044d0 <xTaskCheckForTimeOut+0x30>
  404534:	00403645 	.word	0x00403645
  404538:	20429640 	.word	0x20429640
  40453c:	00403691 	.word	0x00403691
  404540:	20429670 	.word	0x20429670

00404544 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  404544:	4b01      	ldr	r3, [pc, #4]	; (40454c <vTaskMissedYield+0x8>)
  404546:	2201      	movs	r2, #1
  404548:	601a      	str	r2, [r3, #0]
  40454a:	4770      	bx	lr
  40454c:	20429674 	.word	0x20429674

00404550 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
  404550:	4b05      	ldr	r3, [pc, #20]	; (404568 <xTaskGetSchedulerState+0x18>)
  404552:	681b      	ldr	r3, [r3, #0]
  404554:	b133      	cbz	r3, 404564 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  404556:	4b05      	ldr	r3, [pc, #20]	; (40456c <xTaskGetSchedulerState+0x1c>)
  404558:	681b      	ldr	r3, [r3, #0]
  40455a:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
  40455c:	bf0c      	ite	eq
  40455e:	2002      	moveq	r0, #2
  404560:	2000      	movne	r0, #0
  404562:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  404564:	2001      	movs	r0, #1
	}
  404566:	4770      	bx	lr
  404568:	20429658 	.word	0x20429658
  40456c:	20429634 	.word	0x20429634

00404570 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
  404570:	2800      	cmp	r0, #0
  404572:	d042      	beq.n	4045fa <xTaskPriorityDisinherit+0x8a>
	{
  404574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
  404576:	4b2b      	ldr	r3, [pc, #172]	; (404624 <xTaskPriorityDisinherit+0xb4>)
  404578:	681b      	ldr	r3, [r3, #0]
  40457a:	4298      	cmp	r0, r3
  40457c:	d00a      	beq.n	404594 <xTaskPriorityDisinherit+0x24>
  40457e:	f04f 0380 	mov.w	r3, #128	; 0x80
  404582:	b672      	cpsid	i
  404584:	f383 8811 	msr	BASEPRI, r3
  404588:	f3bf 8f6f 	isb	sy
  40458c:	f3bf 8f4f 	dsb	sy
  404590:	b662      	cpsie	i
  404592:	e7fe      	b.n	404592 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
  404594:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  404596:	b953      	cbnz	r3, 4045ae <xTaskPriorityDisinherit+0x3e>
  404598:	f04f 0380 	mov.w	r3, #128	; 0x80
  40459c:	b672      	cpsid	i
  40459e:	f383 8811 	msr	BASEPRI, r3
  4045a2:	f3bf 8f6f 	isb	sy
  4045a6:	f3bf 8f4f 	dsb	sy
  4045aa:	b662      	cpsie	i
  4045ac:	e7fe      	b.n	4045ac <xTaskPriorityDisinherit+0x3c>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4045ae:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
  4045b0:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4045b2:	6c82      	ldr	r2, [r0, #72]	; 0x48
			( pxTCB->uxMutexesHeld )--;
  4045b4:	64c3      	str	r3, [r0, #76]	; 0x4c
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  4045b6:	4291      	cmp	r1, r2
  4045b8:	d031      	beq.n	40461e <xTaskPriorityDisinherit+0xae>
  4045ba:	2b00      	cmp	r3, #0
  4045bc:	d12f      	bne.n	40461e <xTaskPriorityDisinherit+0xae>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  4045be:	1d07      	adds	r7, r0, #4
  4045c0:	4604      	mov	r4, r0
  4045c2:	4b19      	ldr	r3, [pc, #100]	; (404628 <xTaskPriorityDisinherit+0xb8>)
  4045c4:	4638      	mov	r0, r7
  4045c6:	4798      	blx	r3
  4045c8:	b1c8      	cbz	r0, 4045fe <xTaskPriorityDisinherit+0x8e>
  4045ca:	4818      	ldr	r0, [pc, #96]	; (40462c <xTaskPriorityDisinherit+0xbc>)
  4045cc:	4a18      	ldr	r2, [pc, #96]	; (404630 <xTaskPriorityDisinherit+0xc0>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  4045ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
					prvAddTaskToReadyList( pxTCB );
  4045d0:	2501      	movs	r5, #1
  4045d2:	f8d2 e000 	ldr.w	lr, [r2]
  4045d6:	4639      	mov	r1, r7
  4045d8:	fa05 f603 	lsl.w	r6, r5, r3
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4045dc:	f1c3 0705 	rsb	r7, r3, #5
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  4045e0:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  4045e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4045e6:	ea46 060e 	orr.w	r6, r6, lr
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4045ea:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  4045ec:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  4045f0:	4b10      	ldr	r3, [pc, #64]	; (404634 <xTaskPriorityDisinherit+0xc4>)
  4045f2:	6016      	str	r6, [r2, #0]
  4045f4:	4798      	blx	r3
					xReturn = pdTRUE;
  4045f6:	4628      	mov	r0, r5
	}
  4045f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BaseType_t xReturn = pdFALSE;
  4045fa:	2000      	movs	r0, #0
	}
  4045fc:	4770      	bx	lr
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4045fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  404600:	480a      	ldr	r0, [pc, #40]	; (40462c <xTaskPriorityDisinherit+0xbc>)
  404602:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  404606:	4a0a      	ldr	r2, [pc, #40]	; (404630 <xTaskPriorityDisinherit+0xc0>)
  404608:	009b      	lsls	r3, r3, #2
  40460a:	58c3      	ldr	r3, [r0, r3]
  40460c:	2b00      	cmp	r3, #0
  40460e:	d1de      	bne.n	4045ce <xTaskPriorityDisinherit+0x5e>
  404610:	2501      	movs	r5, #1
  404612:	6813      	ldr	r3, [r2, #0]
  404614:	40b5      	lsls	r5, r6
  404616:	ea23 0305 	bic.w	r3, r3, r5
  40461a:	6013      	str	r3, [r2, #0]
  40461c:	e7d7      	b.n	4045ce <xTaskPriorityDisinherit+0x5e>
	BaseType_t xReturn = pdFALSE;
  40461e:	2000      	movs	r0, #0
  404620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404622:	bf00      	nop
  404624:	204295bc 	.word	0x204295bc
  404628:	004035f9 	.word	0x004035f9
  40462c:	204295c8 	.word	0x204295c8
  404630:	20429638 	.word	0x20429638
  404634:	004035ad 	.word	0x004035ad

00404638 <xTaskGenericNotifyFromISR>:
	{
  404638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40463c:	9f08      	ldr	r7, [sp, #32]
		configASSERT( xTaskToNotify );
  40463e:	b368      	cbz	r0, 40469c <xTaskGenericNotifyFromISR+0x64>
  404640:	4699      	mov	r9, r3
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  404642:	4b43      	ldr	r3, [pc, #268]	; (404750 <xTaskGenericNotifyFromISR+0x118>)
  404644:	4604      	mov	r4, r0
  404646:	4615      	mov	r5, r2
  404648:	4688      	mov	r8, r1
  40464a:	4798      	blx	r3
	__asm volatile
  40464c:	f3ef 8611 	mrs	r6, BASEPRI
  404650:	f04f 0380 	mov.w	r3, #128	; 0x80
  404654:	b672      	cpsid	i
  404656:	f383 8811 	msr	BASEPRI, r3
  40465a:	f3bf 8f6f 	isb	sy
  40465e:	f3bf 8f4f 	dsb	sy
  404662:	b662      	cpsie	i
			if( pulPreviousNotificationValue != NULL )
  404664:	f1b9 0f00 	cmp.w	r9, #0
  404668:	d002      	beq.n	404670 <xTaskGenericNotifyFromISR+0x38>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
  40466a:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40466c:	f8c9 3000 	str.w	r3, [r9]
			switch( eAction )
  404670:	1e6b      	subs	r3, r5, #1
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
  404672:	2202      	movs	r2, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
  404674:	f894 5054 	ldrb.w	r5, [r4, #84]	; 0x54
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
  404678:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
			ucOriginalNotifyState = pxTCB->ucNotifyState;
  40467c:	b2ed      	uxtb	r5, r5
			switch( eAction )
  40467e:	2b03      	cmp	r3, #3
  404680:	d805      	bhi.n	40468e <xTaskGenericNotifyFromISR+0x56>
  404682:	e8df f003 	tbb	[pc, r3]
  404686:	2327      	.short	0x2327
  404688:	2c02      	.short	0x2c02
						pxTCB->ulNotifiedValue = ulValue;
  40468a:	f8c4 8050 	str.w	r8, [r4, #80]	; 0x50
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
  40468e:	2d01      	cmp	r5, #1
  404690:	d00f      	beq.n	4046b2 <xTaskGenericNotifyFromISR+0x7a>
	{
  404692:	2001      	movs	r0, #1
	__asm volatile
  404694:	f386 8811 	msr	BASEPRI, r6
	}
  404698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
  40469c:	f04f 0380 	mov.w	r3, #128	; 0x80
  4046a0:	b672      	cpsid	i
  4046a2:	f383 8811 	msr	BASEPRI, r3
  4046a6:	f3bf 8f6f 	isb	sy
  4046aa:	f3bf 8f4f 	dsb	sy
  4046ae:	b662      	cpsie	i
  4046b0:	e7fe      	b.n	4046b0 <xTaskGenericNotifyFromISR+0x78>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
  4046b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  4046b4:	b1d3      	cbz	r3, 4046ec <xTaskGenericNotifyFromISR+0xb4>
  4046b6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4046ba:	b672      	cpsid	i
  4046bc:	f383 8811 	msr	BASEPRI, r3
  4046c0:	f3bf 8f6f 	isb	sy
  4046c4:	f3bf 8f4f 	dsb	sy
  4046c8:	b662      	cpsie	i
  4046ca:	e7fe      	b.n	4046ca <xTaskGenericNotifyFromISR+0x92>
					( pxTCB->ulNotifiedValue )++;
  4046cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4046ce:	3301      	adds	r3, #1
  4046d0:	6523      	str	r3, [r4, #80]	; 0x50
					break;
  4046d2:	e7dc      	b.n	40468e <xTaskGenericNotifyFromISR+0x56>
					pxTCB->ulNotifiedValue |= ulValue;
  4046d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4046d6:	ea43 0308 	orr.w	r3, r3, r8
  4046da:	6523      	str	r3, [r4, #80]	; 0x50
					break;
  4046dc:	e7d7      	b.n	40468e <xTaskGenericNotifyFromISR+0x56>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
  4046de:	2d02      	cmp	r5, #2
  4046e0:	d1d3      	bne.n	40468a <xTaskGenericNotifyFromISR+0x52>
						xReturn = pdFAIL;
  4046e2:	2000      	movs	r0, #0
	__asm volatile
  4046e4:	f386 8811 	msr	BASEPRI, r6
	}
  4046e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4046ec:	4b19      	ldr	r3, [pc, #100]	; (404754 <xTaskGenericNotifyFromISR+0x11c>)
  4046ee:	681b      	ldr	r3, [r3, #0]
  4046f0:	bb0b      	cbnz	r3, 404736 <xTaskGenericNotifyFromISR+0xfe>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  4046f2:	f104 0804 	add.w	r8, r4, #4
  4046f6:	4b18      	ldr	r3, [pc, #96]	; (404758 <xTaskGenericNotifyFromISR+0x120>)
  4046f8:	4640      	mov	r0, r8
  4046fa:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
  4046fc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4046fe:	4a17      	ldr	r2, [pc, #92]	; (40475c <xTaskGenericNotifyFromISR+0x124>)
  404700:	4641      	mov	r1, r8
  404702:	fa05 f300 	lsl.w	r3, r5, r0
  404706:	f8df e068 	ldr.w	lr, [pc, #104]	; 404770 <xTaskGenericNotifyFromISR+0x138>
  40470a:	6815      	ldr	r5, [r2, #0]
  40470c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  404710:	432b      	orrs	r3, r5
  404712:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
  404716:	4d12      	ldr	r5, [pc, #72]	; (404760 <xTaskGenericNotifyFromISR+0x128>)
  404718:	6013      	str	r3, [r2, #0]
  40471a:	47a8      	blx	r5
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
  40471c:	4b11      	ldr	r3, [pc, #68]	; (404764 <xTaskGenericNotifyFromISR+0x12c>)
  40471e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  404720:	681b      	ldr	r3, [r3, #0]
  404722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  404724:	429a      	cmp	r2, r3
  404726:	d9b4      	bls.n	404692 <xTaskGenericNotifyFromISR+0x5a>
					if( pxHigherPriorityTaskWoken != NULL )
  404728:	b15f      	cbz	r7, 404742 <xTaskGenericNotifyFromISR+0x10a>
						*pxHigherPriorityTaskWoken = pdTRUE;
  40472a:	2001      	movs	r0, #1
  40472c:	6038      	str	r0, [r7, #0]
  40472e:	f386 8811 	msr	BASEPRI, r6
	}
  404732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
  404736:	f104 0118 	add.w	r1, r4, #24
  40473a:	480b      	ldr	r0, [pc, #44]	; (404768 <xTaskGenericNotifyFromISR+0x130>)
  40473c:	4b08      	ldr	r3, [pc, #32]	; (404760 <xTaskGenericNotifyFromISR+0x128>)
  40473e:	4798      	blx	r3
  404740:	e7ec      	b.n	40471c <xTaskGenericNotifyFromISR+0xe4>
						xYieldPending = pdTRUE;
  404742:	4b0a      	ldr	r3, [pc, #40]	; (40476c <xTaskGenericNotifyFromISR+0x134>)
  404744:	2001      	movs	r0, #1
  404746:	6018      	str	r0, [r3, #0]
  404748:	f386 8811 	msr	BASEPRI, r6
	}
  40474c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404750:	00403759 	.word	0x00403759
  404754:	20429634 	.word	0x20429634
  404758:	004035f9 	.word	0x004035f9
  40475c:	20429638 	.word	0x20429638
  404760:	004035ad 	.word	0x004035ad
  404764:	204295bc 	.word	0x204295bc
  404768:	20429644 	.word	0x20429644
  40476c:	20429674 	.word	0x20429674
  404770:	204295c8 	.word	0x204295c8

00404774 <vTaskNotifyGiveFromISR>:
		configASSERT( xTaskToNotify );
  404774:	b308      	cbz	r0, 4047ba <vTaskNotifyGiveFromISR+0x46>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  404776:	4b36      	ldr	r3, [pc, #216]	; (404850 <vTaskNotifyGiveFromISR+0xdc>)
	{
  404778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40477c:	4604      	mov	r4, r0
  40477e:	460e      	mov	r6, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  404780:	4798      	blx	r3
	__asm volatile
  404782:	f3ef 8711 	mrs	r7, BASEPRI
  404786:	f04f 0380 	mov.w	r3, #128	; 0x80
  40478a:	b672      	cpsid	i
  40478c:	f383 8811 	msr	BASEPRI, r3
  404790:	f3bf 8f6f 	isb	sy
  404794:	f3bf 8f4f 	dsb	sy
  404798:	b662      	cpsie	i
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
  40479a:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
  40479c:	f894 5054 	ldrb.w	r5, [r4, #84]	; 0x54
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
  4047a0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
			ucOriginalNotifyState = pxTCB->ucNotifyState;
  4047a4:	b2ed      	uxtb	r5, r5
			( pxTCB->ulNotifiedValue )++;
  4047a6:	6d23      	ldr	r3, [r4, #80]	; 0x50
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
  4047a8:	2d01      	cmp	r5, #1
			( pxTCB->ulNotifiedValue )++;
  4047aa:	f103 0301 	add.w	r3, r3, #1
  4047ae:	6523      	str	r3, [r4, #80]	; 0x50
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
  4047b0:	d00e      	beq.n	4047d0 <vTaskNotifyGiveFromISR+0x5c>
	__asm volatile
  4047b2:	f387 8811 	msr	BASEPRI, r7
  4047b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  4047ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4047be:	b672      	cpsid	i
  4047c0:	f383 8811 	msr	BASEPRI, r3
  4047c4:	f3bf 8f6f 	isb	sy
  4047c8:	f3bf 8f4f 	dsb	sy
  4047cc:	b662      	cpsie	i
  4047ce:	e7fe      	b.n	4047ce <vTaskNotifyGiveFromISR+0x5a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
  4047d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  4047d2:	b153      	cbz	r3, 4047ea <vTaskNotifyGiveFromISR+0x76>
  4047d4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4047d8:	b672      	cpsid	i
  4047da:	f383 8811 	msr	BASEPRI, r3
  4047de:	f3bf 8f6f 	isb	sy
  4047e2:	f3bf 8f4f 	dsb	sy
  4047e6:	b662      	cpsie	i
  4047e8:	e7fe      	b.n	4047e8 <vTaskNotifyGiveFromISR+0x74>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4047ea:	4b1a      	ldr	r3, [pc, #104]	; (404854 <vTaskNotifyGiveFromISR+0xe0>)
  4047ec:	681b      	ldr	r3, [r3, #0]
  4047ee:	bb0b      	cbnz	r3, 404834 <vTaskNotifyGiveFromISR+0xc0>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  4047f0:	f104 0804 	add.w	r8, r4, #4
  4047f4:	4b18      	ldr	r3, [pc, #96]	; (404858 <vTaskNotifyGiveFromISR+0xe4>)
  4047f6:	4640      	mov	r0, r8
  4047f8:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
  4047fa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4047fc:	4a17      	ldr	r2, [pc, #92]	; (40485c <vTaskNotifyGiveFromISR+0xe8>)
  4047fe:	4641      	mov	r1, r8
  404800:	fa05 f300 	lsl.w	r3, r5, r0
  404804:	f8df e068 	ldr.w	lr, [pc, #104]	; 404870 <vTaskNotifyGiveFromISR+0xfc>
  404808:	6815      	ldr	r5, [r2, #0]
  40480a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40480e:	432b      	orrs	r3, r5
  404810:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
  404814:	4d12      	ldr	r5, [pc, #72]	; (404860 <vTaskNotifyGiveFromISR+0xec>)
  404816:	6013      	str	r3, [r2, #0]
  404818:	47a8      	blx	r5
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
  40481a:	4b12      	ldr	r3, [pc, #72]	; (404864 <vTaskNotifyGiveFromISR+0xf0>)
  40481c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40481e:	681b      	ldr	r3, [r3, #0]
  404820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  404822:	429a      	cmp	r2, r3
  404824:	d9c5      	bls.n	4047b2 <vTaskNotifyGiveFromISR+0x3e>
					if( pxHigherPriorityTaskWoken != NULL )
  404826:	b15e      	cbz	r6, 404840 <vTaskNotifyGiveFromISR+0xcc>
						*pxHigherPriorityTaskWoken = pdTRUE;
  404828:	2301      	movs	r3, #1
  40482a:	6033      	str	r3, [r6, #0]
	__asm volatile
  40482c:	f387 8811 	msr	BASEPRI, r7
  404830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
  404834:	f104 0118 	add.w	r1, r4, #24
  404838:	480b      	ldr	r0, [pc, #44]	; (404868 <vTaskNotifyGiveFromISR+0xf4>)
  40483a:	4b09      	ldr	r3, [pc, #36]	; (404860 <vTaskNotifyGiveFromISR+0xec>)
  40483c:	4798      	blx	r3
  40483e:	e7ec      	b.n	40481a <vTaskNotifyGiveFromISR+0xa6>
						xYieldPending = pdTRUE;
  404840:	4b0a      	ldr	r3, [pc, #40]	; (40486c <vTaskNotifyGiveFromISR+0xf8>)
  404842:	2201      	movs	r2, #1
  404844:	601a      	str	r2, [r3, #0]
  404846:	f387 8811 	msr	BASEPRI, r7
  40484a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40484e:	bf00      	nop
  404850:	00403759 	.word	0x00403759
  404854:	20429634 	.word	0x20429634
  404858:	004035f9 	.word	0x004035f9
  40485c:	20429638 	.word	0x20429638
  404860:	004035ad 	.word	0x004035ad
  404864:	204295bc 	.word	0x204295bc
  404868:	20429644 	.word	0x20429644
  40486c:	20429674 	.word	0x20429674
  404870:	204295c8 	.word	0x204295c8

00404874 <xTimerGenericCommand>:
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
  404874:	b338      	cbz	r0, 4048c6 <xTimerGenericCommand+0x52>
{
  404876:	b570      	push	{r4, r5, r6, lr}

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  404878:	4d18      	ldr	r5, [pc, #96]	; (4048dc <xTimerGenericCommand+0x68>)
  40487a:	4604      	mov	r4, r0
{
  40487c:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
  40487e:	6828      	ldr	r0, [r5, #0]
  404880:	b188      	cbz	r0, 4048a6 <xTimerGenericCommand+0x32>
  404882:	4616      	mov	r6, r2
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  404884:	2905      	cmp	r1, #5
  404886:	461a      	mov	r2, r3
  404888:	460b      	mov	r3, r1
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  40488a:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  40488c:	e88d 0048 	stmia.w	sp, {r3, r6}
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  404890:	dc0b      	bgt.n	4048aa <xTimerGenericCommand+0x36>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  404892:	4b13      	ldr	r3, [pc, #76]	; (4048e0 <xTimerGenericCommand+0x6c>)
  404894:	4798      	blx	r3
  404896:	2802      	cmp	r0, #2
  404898:	d00d      	beq.n	4048b6 <xTimerGenericCommand+0x42>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  40489a:	2300      	movs	r3, #0
  40489c:	6828      	ldr	r0, [r5, #0]
  40489e:	4669      	mov	r1, sp
  4048a0:	4c10      	ldr	r4, [pc, #64]	; (4048e4 <xTimerGenericCommand+0x70>)
  4048a2:	461a      	mov	r2, r3
  4048a4:	47a0      	blx	r4
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
  4048a6:	b004      	add	sp, #16
  4048a8:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4048aa:	2300      	movs	r3, #0
  4048ac:	4669      	mov	r1, sp
  4048ae:	4c0e      	ldr	r4, [pc, #56]	; (4048e8 <xTimerGenericCommand+0x74>)
  4048b0:	47a0      	blx	r4
}
  4048b2:	b004      	add	sp, #16
  4048b4:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  4048b6:	2300      	movs	r3, #0
  4048b8:	9a08      	ldr	r2, [sp, #32]
  4048ba:	4669      	mov	r1, sp
  4048bc:	4c09      	ldr	r4, [pc, #36]	; (4048e4 <xTimerGenericCommand+0x70>)
  4048be:	6828      	ldr	r0, [r5, #0]
  4048c0:	47a0      	blx	r4
}
  4048c2:	b004      	add	sp, #16
  4048c4:	bd70      	pop	{r4, r5, r6, pc}
	__asm volatile
  4048c6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4048ca:	b672      	cpsid	i
  4048cc:	f383 8811 	msr	BASEPRI, r3
  4048d0:	f3bf 8f6f 	isb	sy
  4048d4:	f3bf 8f4f 	dsb	sy
  4048d8:	b662      	cpsie	i
  4048da:	e7fe      	b.n	4048da <xTimerGenericCommand+0x66>
  4048dc:	20429678 	.word	0x20429678
  4048e0:	00404551 	.word	0x00404551
  4048e4:	00403a7d 	.word	0x00403a7d
  4048e8:	00403c65 	.word	0x00403c65

004048ec <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
  4048ec:	b570      	push	{r4, r5, r6, lr}
  4048ee:	461e      	mov	r6, r3
  4048f0:	b084      	sub	sp, #16
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4048f2:	4c07      	ldr	r4, [pc, #28]	; (404910 <xTimerPendFunctionCallFromISR+0x24>)
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
  4048f4:	f06f 0501 	mvn.w	r5, #1
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
  4048f8:	9001      	str	r0, [sp, #4]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4048fa:	2300      	movs	r3, #0
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
  4048fc:	9102      	str	r1, [sp, #8]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4048fe:	4669      	mov	r1, sp
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
  404900:	9203      	str	r2, [sp, #12]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  404902:	4632      	mov	r2, r6
  404904:	6820      	ldr	r0, [r4, #0]
  404906:	4c03      	ldr	r4, [pc, #12]	; (404914 <xTimerPendFunctionCallFromISR+0x28>)
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
  404908:	9500      	str	r5, [sp, #0]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  40490a:	47a0      	blx	r4

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
  40490c:	b004      	add	sp, #16
  40490e:	bd70      	pop	{r4, r5, r6, pc}
  404910:	20429678 	.word	0x20429678
  404914:	00403c65 	.word	0x00403c65

00404918 <vPeriodicEventGroupsProcessing>:
	return xError;
}
/*-----------------------------------------------------------*/

void vPeriodicEventGroupsProcessing( void )
{
  404918:	b510      	push	{r4, lr}
BaseType_t xMessagePosted;

	/* Called periodically from the tick hook to exercise the "FromISR"
	functions. */

	xCallCount++;
  40491a:	4c1e      	ldr	r4, [pc, #120]	; (404994 <vPeriodicEventGroupsProcessing+0x7c>)
  40491c:	6823      	ldr	r3, [r4, #0]
  40491e:	3301      	adds	r3, #1

	if( xCallCount == xSetBitCount )
  404920:	2b64      	cmp	r3, #100	; 0x64
	xCallCount++;
  404922:	6023      	str	r3, [r4, #0]
	if( xCallCount == xSetBitCount )
  404924:	d012      	beq.n	40494c <vPeriodicEventGroupsProcessing+0x34>
			{
				xISRTestError = pdTRUE;
			}
		}
	}
	else if( xCallCount == xGetBitsCount )
  404926:	2bc8      	cmp	r3, #200	; 0xc8
  404928:	d019      	beq.n	40495e <vPeriodicEventGroupsProcessing+0x46>
		if( uxReturned != uxBitsToSet )
		{
			xISRTestError = pdTRUE;
		}
	}
	else if( xCallCount == xClearBitsCount )
  40492a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
  40492e:	d000      	beq.n	404932 <vPeriodicEventGroupsProcessing+0x1a>
  404930:	bd10      	pop	{r4, pc}
	{
		/* Clear the bits again. */
		uxReturned = ( EventBits_t ) xEventGroupClearBitsFromISR( xISREventGroup, uxBitsToSet );
  404932:	4a19      	ldr	r2, [pc, #100]	; (404998 <vPeriodicEventGroupsProcessing+0x80>)
  404934:	2112      	movs	r1, #18
  404936:	4b19      	ldr	r3, [pc, #100]	; (40499c <vPeriodicEventGroupsProcessing+0x84>)
  404938:	6810      	ldr	r0, [r2, #0]
  40493a:	4798      	blx	r3

		/* Check the message was posted. */
		if( uxReturned != pdPASS )
  40493c:	2801      	cmp	r0, #1
  40493e:	d01d      	beq.n	40497c <vPeriodicEventGroupsProcessing+0x64>
		{
			xISRTestError = pdTRUE;
  404940:	4a17      	ldr	r2, [pc, #92]	; (4049a0 <vPeriodicEventGroupsProcessing+0x88>)
  404942:	2101      	movs	r1, #1
		}

		/* Go back to the start. */
		xCallCount = 0;
  404944:	2300      	movs	r3, #0
			xISRTestError = pdTRUE;
  404946:	6011      	str	r1, [r2, #0]
		xCallCount = 0;
  404948:	6023      	str	r3, [r4, #0]
  40494a:	bd10      	pop	{r4, pc}
		uxReturned = xEventGroupGetBitsFromISR( xISREventGroup );
  40494c:	4c12      	ldr	r4, [pc, #72]	; (404998 <vPeriodicEventGroupsProcessing+0x80>)
  40494e:	4b15      	ldr	r3, [pc, #84]	; (4049a4 <vPeriodicEventGroupsProcessing+0x8c>)
  404950:	6820      	ldr	r0, [r4, #0]
  404952:	4798      	blx	r3
		if( uxReturned != 0x00 )
  404954:	b150      	cbz	r0, 40496c <vPeriodicEventGroupsProcessing+0x54>
			xISRTestError = pdTRUE;
  404956:	4b12      	ldr	r3, [pc, #72]	; (4049a0 <vPeriodicEventGroupsProcessing+0x88>)
  404958:	2201      	movs	r2, #1
  40495a:	601a      	str	r2, [r3, #0]
  40495c:	bd10      	pop	{r4, pc}
		uxReturned = xEventGroupGetBitsFromISR( xISREventGroup );
  40495e:	4a0e      	ldr	r2, [pc, #56]	; (404998 <vPeriodicEventGroupsProcessing+0x80>)
  404960:	4b10      	ldr	r3, [pc, #64]	; (4049a4 <vPeriodicEventGroupsProcessing+0x8c>)
  404962:	6810      	ldr	r0, [r2, #0]
  404964:	4798      	blx	r3
		if( uxReturned != uxBitsToSet )
  404966:	2812      	cmp	r0, #18
  404968:	d1f5      	bne.n	404956 <vPeriodicEventGroupsProcessing+0x3e>
  40496a:	bd10      	pop	{r4, pc}
			xMessagePosted = xEventGroupSetBitsFromISR( xISREventGroup, uxBitsToSet, NULL );
  40496c:	4602      	mov	r2, r0
  40496e:	2112      	movs	r1, #18
  404970:	6820      	ldr	r0, [r4, #0]
  404972:	4b0d      	ldr	r3, [pc, #52]	; (4049a8 <vPeriodicEventGroupsProcessing+0x90>)
  404974:	4798      	blx	r3
			if( xMessagePosted != pdPASS )
  404976:	2801      	cmp	r0, #1
  404978:	d1ed      	bne.n	404956 <vPeriodicEventGroupsProcessing+0x3e>
  40497a:	bd10      	pop	{r4, pc}
  40497c:	4b08      	ldr	r3, [pc, #32]	; (4049a0 <vPeriodicEventGroupsProcessing+0x88>)
		xCallCount = 0;
  40497e:	2200      	movs	r2, #0
  404980:	681b      	ldr	r3, [r3, #0]
  404982:	6022      	str	r2, [r4, #0]

		/* If no errors have been detected then increment the count of test
		cycles. */
		if( xISRTestError == pdFALSE )
  404984:	b923      	cbnz	r3, 404990 <vPeriodicEventGroupsProcessing+0x78>
		{
			ulISRCycles++;
  404986:	4a09      	ldr	r2, [pc, #36]	; (4049ac <vPeriodicEventGroupsProcessing+0x94>)
  404988:	6813      	ldr	r3, [r2, #0]
  40498a:	3301      	adds	r3, #1
  40498c:	6013      	str	r3, [r2, #0]
	}
	else
	{
		/* Nothing else to do. */
	}
}
  40498e:	e7cf      	b.n	404930 <vPeriodicEventGroupsProcessing+0x18>
  404990:	bd10      	pop	{r4, pc}
  404992:	bf00      	nop
  404994:	20429680 	.word	0x20429680
  404998:	20429684 	.word	0x20429684
  40499c:	00403555 	.word	0x00403555
  4049a0:	20429688 	.word	0x20429688
  4049a4:	00403571 	.word	0x00403571
  4049a8:	00403591 	.word	0x00403591
  4049ac:	2042967c 	.word	0x2042967c

004049b0 <vInterruptSemaphorePeriodicTest>:
	}
}
/*-----------------------------------------------------------*/

void vInterruptSemaphorePeriodicTest( void )
{
  4049b0:	b5f0      	push	{r4, r5, r6, r7, lr}
static TickType_t xLastGiveTime = 0;
BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  4049b2:	2600      	movs	r6, #0
{
  4049b4:	b083      	sub	sp, #12
TickType_t xTimeNow;

	/* No mutual exclusion on xOkToGiveMutex, but this is only test code (and
	only executed on a 32-bit architecture) so ignore that in this case. */
	xTimeNow = xTaskGetTickCountFromISR();
	if( ( ( TickType_t ) ( xTimeNow - xLastGiveTime ) ) >= pdMS_TO_TICKS( intsemINTERRUPT_MUTEX_GIVE_PERIOD_MS ) )
  4049b6:	4c1c      	ldr	r4, [pc, #112]	; (404a28 <vInterruptSemaphorePeriodicTest+0x78>)
	xTimeNow = xTaskGetTickCountFromISR();
  4049b8:	4b1c      	ldr	r3, [pc, #112]	; (404a2c <vInterruptSemaphorePeriodicTest+0x7c>)
BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  4049ba:	9601      	str	r6, [sp, #4]
	xTimeNow = xTaskGetTickCountFromISR();
  4049bc:	4798      	blx	r3
	if( ( ( TickType_t ) ( xTimeNow - xLastGiveTime ) ) >= pdMS_TO_TICKS( intsemINTERRUPT_MUTEX_GIVE_PERIOD_MS ) )
  4049be:	6823      	ldr	r3, [r4, #0]
  4049c0:	1ac3      	subs	r3, r0, r3
  4049c2:	2b63      	cmp	r3, #99	; 0x63
  4049c4:	d90a      	bls.n	4049dc <vInterruptSemaphorePeriodicTest+0x2c>
	{
		configASSERT( xISRMutex );
  4049c6:	4f1a      	ldr	r7, [pc, #104]	; (404a30 <vInterruptSemaphorePeriodicTest+0x80>)
  4049c8:	4605      	mov	r5, r0
  4049ca:	6838      	ldr	r0, [r7, #0]
  4049cc:	b308      	cbz	r0, 404a12 <vInterruptSemaphorePeriodicTest+0x62>
		if( xOkToGiveMutex != pdFALSE )
  4049ce:	4b19      	ldr	r3, [pc, #100]	; (404a34 <vInterruptSemaphorePeriodicTest+0x84>)
  4049d0:	681b      	ldr	r3, [r3, #0]
  4049d2:	b92b      	cbnz	r3, 4049e0 <vInterruptSemaphorePeriodicTest+0x30>

			/* Second give attempt should fail. */
			configASSERT( xSemaphoreGiveFromISR( xISRMutex, &xHigherPriorityTaskWoken ) == pdFAIL );
		}

		if( xOkToGiveCountingSemaphore != pdFALSE )
  4049d4:	4b18      	ldr	r3, [pc, #96]	; (404a38 <vInterruptSemaphorePeriodicTest+0x88>)
  4049d6:	681b      	ldr	r3, [r3, #0]
  4049d8:	b9ab      	cbnz	r3, 404a06 <vInterruptSemaphorePeriodicTest+0x56>
		{
			xSemaphoreGiveFromISR( xISRCountingSemaphore, &xHigherPriorityTaskWoken );
		}
		xLastGiveTime = xTimeNow;
  4049da:	6025      	str	r5, [r4, #0]
	}

	/* Remove compiler warnings about the value being set but not used. */
	( void ) xHigherPriorityTaskWoken;
}
  4049dc:	b003      	add	sp, #12
  4049de:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xSemaphoreGiveFromISR( xISRMutex, NULL );
  4049e0:	4631      	mov	r1, r6
  4049e2:	4e16      	ldr	r6, [pc, #88]	; (404a3c <vInterruptSemaphorePeriodicTest+0x8c>)
  4049e4:	47b0      	blx	r6
			configASSERT( xSemaphoreGiveFromISR( xISRMutex, &xHigherPriorityTaskWoken ) == pdFAIL );
  4049e6:	6838      	ldr	r0, [r7, #0]
  4049e8:	a901      	add	r1, sp, #4
  4049ea:	47b0      	blx	r6
  4049ec:	2800      	cmp	r0, #0
  4049ee:	d0f1      	beq.n	4049d4 <vInterruptSemaphorePeriodicTest+0x24>
  4049f0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4049f4:	b672      	cpsid	i
  4049f6:	f383 8811 	msr	BASEPRI, r3
  4049fa:	f3bf 8f6f 	isb	sy
  4049fe:	f3bf 8f4f 	dsb	sy
  404a02:	b662      	cpsie	i
  404a04:	e7fe      	b.n	404a04 <vInterruptSemaphorePeriodicTest+0x54>
			xSemaphoreGiveFromISR( xISRCountingSemaphore, &xHigherPriorityTaskWoken );
  404a06:	4a0e      	ldr	r2, [pc, #56]	; (404a40 <vInterruptSemaphorePeriodicTest+0x90>)
  404a08:	a901      	add	r1, sp, #4
  404a0a:	4b0c      	ldr	r3, [pc, #48]	; (404a3c <vInterruptSemaphorePeriodicTest+0x8c>)
  404a0c:	6810      	ldr	r0, [r2, #0]
  404a0e:	4798      	blx	r3
  404a10:	e7e3      	b.n	4049da <vInterruptSemaphorePeriodicTest+0x2a>
  404a12:	f04f 0380 	mov.w	r3, #128	; 0x80
  404a16:	b672      	cpsid	i
  404a18:	f383 8811 	msr	BASEPRI, r3
  404a1c:	f3bf 8f6f 	isb	sy
  404a20:	f3bf 8f4f 	dsb	sy
  404a24:	b662      	cpsie	i
  404a26:	e7fe      	b.n	404a26 <vInterruptSemaphorePeriodicTest+0x76>
  404a28:	20429694 	.word	0x20429694
  404a2c:	00403f29 	.word	0x00403f29
  404a30:	20429690 	.word	0x20429690
  404a34:	2042969c 	.word	0x2042969c
  404a38:	20429698 	.word	0x20429698
  404a3c:	00403d69 	.word	0x00403d69
  404a40:	2042968c 	.word	0x2042968c

00404a44 <vQueueOverwritePeriodicISRDemo>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vQueueOverwritePeriodicISRDemo( void )
{
  404a44:	b570      	push	{r4, r5, r6, lr}
uint32_t ulRx;

	/* This function should be called from an interrupt, such as the tick hook
	function vApplicationTickHook(). */

	configASSERT( xISRQueue );
  404a46:	4d21      	ldr	r5, [pc, #132]	; (404acc <vQueueOverwritePeriodicISRDemo+0x88>)
{
  404a48:	b084      	sub	sp, #16
const uint32_t ulTx1 = 10UL, ulTx2 = 20UL, ulNumberOfSwitchCases = 3UL;
  404a4a:	220a      	movs	r2, #10
  404a4c:	2314      	movs	r3, #20
	configASSERT( xISRQueue );
  404a4e:	6828      	ldr	r0, [r5, #0]
const uint32_t ulTx1 = 10UL, ulTx2 = 20UL, ulNumberOfSwitchCases = 3UL;
  404a50:	9201      	str	r2, [sp, #4]
  404a52:	9302      	str	r3, [sp, #8]
	configASSERT( xISRQueue );
  404a54:	2800      	cmp	r0, #0
  404a56:	d02d      	beq.n	404ab4 <vQueueOverwritePeriodicISRDemo+0x70>

	switch( ulCallCount )
  404a58:	4c1d      	ldr	r4, [pc, #116]	; (404ad0 <vQueueOverwritePeriodicISRDemo+0x8c>)
  404a5a:	6823      	ldr	r3, [r4, #0]
  404a5c:	2b01      	cmp	r3, #1
  404a5e:	d022      	beq.n	404aa6 <vQueueOverwritePeriodicISRDemo+0x62>
  404a60:	d313      	bcc.n	404a8a <vQueueOverwritePeriodicISRDemo+0x46>
  404a62:	2b02      	cmp	r3, #2
  404a64:	d10a      	bne.n	404a7c <vQueueOverwritePeriodicISRDemo+0x38>
			break;

		case 2:
			/* Read from the queue to empty the queue again.  The value read
			should be ulTx2. */
			xQueueReceiveFromISR( xISRQueue, &ulRx, NULL );
  404a66:	4b1b      	ldr	r3, [pc, #108]	; (404ad4 <vQueueOverwritePeriodicISRDemo+0x90>)
  404a68:	2200      	movs	r2, #0
  404a6a:	a903      	add	r1, sp, #12
  404a6c:	4798      	blx	r3

			if( ulRx != ulTx2 )
  404a6e:	9b03      	ldr	r3, [sp, #12]
  404a70:	2b14      	cmp	r3, #20
  404a72:	d016      	beq.n	404aa2 <vQueueOverwritePeriodicISRDemo+0x5e>
			{
				xISRTestStatus = pdFAIL;
  404a74:	4a18      	ldr	r2, [pc, #96]	; (404ad8 <vQueueOverwritePeriodicISRDemo+0x94>)
  404a76:	2100      	movs	r1, #0
  404a78:	6823      	ldr	r3, [r4, #0]
  404a7a:	6011      	str	r1, [r2, #0]
			break;
	}

	/* Run the next case in the switch statement above next time this function
	is called. */
	ulCallCount++;
  404a7c:	3301      	adds	r3, #1

	if( ulCallCount >= ulNumberOfSwitchCases )
  404a7e:	2b02      	cmp	r3, #2
	{
		/* Go back to the start. */
		ulCallCount = 0;
  404a80:	bf88      	it	hi
  404a82:	2300      	movhi	r3, #0
  404a84:	6023      	str	r3, [r4, #0]
	}
}
  404a86:	b004      	add	sp, #16
  404a88:	bd70      	pop	{r4, r5, r6, pc}
			xQueueOverwriteFromISR( xISRQueue, &ulTx1, NULL );
  404a8a:	2302      	movs	r3, #2
  404a8c:	2200      	movs	r2, #0
  404a8e:	a901      	add	r1, sp, #4
  404a90:	4e12      	ldr	r6, [pc, #72]	; (404adc <vQueueOverwritePeriodicISRDemo+0x98>)
  404a92:	47b0      	blx	r6
			xQueuePeekFromISR( xISRQueue, &ulRx );
  404a94:	4b12      	ldr	r3, [pc, #72]	; (404ae0 <vQueueOverwritePeriodicISRDemo+0x9c>)
  404a96:	6828      	ldr	r0, [r5, #0]
  404a98:	a903      	add	r1, sp, #12
  404a9a:	4798      	blx	r3
			if( ulRx != ulTx1 )
  404a9c:	9b03      	ldr	r3, [sp, #12]
  404a9e:	2b0a      	cmp	r3, #10
  404aa0:	d1e8      	bne.n	404a74 <vQueueOverwritePeriodicISRDemo+0x30>
  404aa2:	6823      	ldr	r3, [r4, #0]
			break;
  404aa4:	e7ea      	b.n	404a7c <vQueueOverwritePeriodicISRDemo+0x38>
			xQueueOverwriteFromISR( xISRQueue, &ulTx2, NULL );
  404aa6:	2302      	movs	r3, #2
  404aa8:	2200      	movs	r2, #0
  404aaa:	a902      	add	r1, sp, #8
  404aac:	4d0b      	ldr	r5, [pc, #44]	; (404adc <vQueueOverwritePeriodicISRDemo+0x98>)
  404aae:	47a8      	blx	r5
  404ab0:	6823      	ldr	r3, [r4, #0]
  404ab2:	e7e3      	b.n	404a7c <vQueueOverwritePeriodicISRDemo+0x38>
  404ab4:	f04f 0380 	mov.w	r3, #128	; 0x80
  404ab8:	b672      	cpsid	i
  404aba:	f383 8811 	msr	BASEPRI, r3
  404abe:	f3bf 8f6f 	isb	sy
  404ac2:	f3bf 8f4f 	dsb	sy
  404ac6:	b662      	cpsie	i
  404ac8:	e7fe      	b.n	404ac8 <vQueueOverwritePeriodicISRDemo+0x84>
  404aca:	bf00      	nop
  404acc:	204296a4 	.word	0x204296a4
  404ad0:	204296a0 	.word	0x204296a0
  404ad4:	00403e45 	.word	0x00403e45
  404ad8:	20400034 	.word	0x20400034
  404adc:	00403c65 	.word	0x00403c65
  404ae0:	00403e85 	.word	0x00403e85

00404ae4 <xNotifyTaskFromISR>:

	/* The task performs some tests before starting the timer that gives the
	notification from this interrupt.  If the timer has not been created yet
	then the initial tests have not yet completed and the notification should
	not be sent. */
	if( xTimer != NULL )
  404ae4:	4b24      	ldr	r3, [pc, #144]	; (404b78 <xNotifyTaskFromISR+0x94>)
  404ae6:	681b      	ldr	r3, [r3, #0]
  404ae8:	b1eb      	cbz	r3, 404b26 <xNotifyTaskFromISR+0x42>
	{
		xCallCount++;
  404aea:	4924      	ldr	r1, [pc, #144]	; (404b7c <xNotifyTaskFromISR+0x98>)
  404aec:	680b      	ldr	r3, [r1, #0]
  404aee:	3301      	adds	r3, #1

		if( xCallCount >= xCallInterval )
  404af0:	2b31      	cmp	r3, #49	; 0x31
  404af2:	dd19      	ble.n	404b28 <xNotifyTaskFromISR+0x44>
{
  404af4:	b570      	push	{r4, r5, r6, lr}
			/* It is time to 'give' the notification again. */
			xCallCount = 0;

			/* Test using both vTaskNotifyGiveFromISR(), xTaskNotifyFromISR()
			and xTaskNotifyAndQueryFromISR(). */
			switch( xAPIToUse )
  404af6:	4c22      	ldr	r4, [pc, #136]	; (404b80 <xNotifyTaskFromISR+0x9c>)
			xCallCount = 0;
  404af8:	2500      	movs	r5, #0
{
  404afa:	b084      	sub	sp, #16
			switch( xAPIToUse )
  404afc:	6822      	ldr	r2, [r4, #0]
			xCallCount = 0;
  404afe:	600d      	str	r5, [r1, #0]
			switch( xAPIToUse )
  404b00:	2a01      	cmp	r2, #1
  404b02:	d013      	beq.n	404b2c <xNotifyTaskFromISR+0x48>
  404b04:	2a02      	cmp	r2, #2
  404b06:	d01d      	beq.n	404b44 <xNotifyTaskFromISR+0x60>
  404b08:	b93a      	cbnz	r2, 404b1a <xNotifyTaskFromISR+0x36>
			{
				case 0:	vTaskNotifyGiveFromISR( xTaskToNotify, NULL );
  404b0a:	481e      	ldr	r0, [pc, #120]	; (404b84 <xNotifyTaskFromISR+0xa0>)
  404b0c:	4611      	mov	r1, r2
  404b0e:	4b1e      	ldr	r3, [pc, #120]	; (404b88 <xNotifyTaskFromISR+0xa4>)
  404b10:	6800      	ldr	r0, [r0, #0]
  404b12:	4798      	blx	r3
						xAPIToUse++;
  404b14:	6823      	ldr	r3, [r4, #0]
  404b16:	3301      	adds	r3, #1
  404b18:	6023      	str	r3, [r4, #0]

				default:/* Should never get here!. */
						break;
			}

			ulTimerNotificationsSent++;
  404b1a:	4a1c      	ldr	r2, [pc, #112]	; (404b8c <xNotifyTaskFromISR+0xa8>)
  404b1c:	6813      	ldr	r3, [r2, #0]
  404b1e:	3301      	adds	r3, #1
  404b20:	6013      	str	r3, [r2, #0]
		}
	}
}
  404b22:	b004      	add	sp, #16
  404b24:	bd70      	pop	{r4, r5, r6, pc}
  404b26:	4770      	bx	lr
		xCallCount++;
  404b28:	600b      	str	r3, [r1, #0]
  404b2a:	4770      	bx	lr
				case 1:	xTaskNotifyFromISR( xTaskToNotify, 0, eIncrement, NULL );
  404b2c:	4a15      	ldr	r2, [pc, #84]	; (404b84 <xNotifyTaskFromISR+0xa0>)
  404b2e:	462b      	mov	r3, r5
  404b30:	9500      	str	r5, [sp, #0]
  404b32:	4629      	mov	r1, r5
  404b34:	6810      	ldr	r0, [r2, #0]
  404b36:	2202      	movs	r2, #2
  404b38:	4d15      	ldr	r5, [pc, #84]	; (404b90 <xNotifyTaskFromISR+0xac>)
  404b3a:	47a8      	blx	r5
						xAPIToUse++;
  404b3c:	6823      	ldr	r3, [r4, #0]
  404b3e:	3301      	adds	r3, #1
  404b40:	6023      	str	r3, [r4, #0]
						break;
  404b42:	e7ea      	b.n	404b1a <xNotifyTaskFromISR+0x36>
				case 2: ulPreviousValue = ulUnexpectedValue;
  404b44:	ab04      	add	r3, sp, #16
  404b46:	21ff      	movs	r1, #255	; 0xff
						xTaskNotifyAndQueryFromISR( xTaskToNotify, 0, eIncrement, &ulPreviousValue, NULL );
  404b48:	480e      	ldr	r0, [pc, #56]	; (404b84 <xNotifyTaskFromISR+0xa0>)
  404b4a:	9500      	str	r5, [sp, #0]
  404b4c:	4e10      	ldr	r6, [pc, #64]	; (404b90 <xNotifyTaskFromISR+0xac>)
				case 2: ulPreviousValue = ulUnexpectedValue;
  404b4e:	f843 1d04 	str.w	r1, [r3, #-4]!
						xTaskNotifyAndQueryFromISR( xTaskToNotify, 0, eIncrement, &ulPreviousValue, NULL );
  404b52:	4629      	mov	r1, r5
  404b54:	6800      	ldr	r0, [r0, #0]
  404b56:	47b0      	blx	r6
						configASSERT( ulPreviousValue != ulUnexpectedValue );
  404b58:	9b03      	ldr	r3, [sp, #12]
  404b5a:	2bff      	cmp	r3, #255	; 0xff
  404b5c:	d001      	beq.n	404b62 <xNotifyTaskFromISR+0x7e>
						xAPIToUse = 0;
  404b5e:	6025      	str	r5, [r4, #0]
						break;
  404b60:	e7db      	b.n	404b1a <xNotifyTaskFromISR+0x36>
  404b62:	f04f 0380 	mov.w	r3, #128	; 0x80
  404b66:	b672      	cpsid	i
  404b68:	f383 8811 	msr	BASEPRI, r3
  404b6c:	f3bf 8f6f 	isb	sy
  404b70:	f3bf 8f4f 	dsb	sy
  404b74:	b662      	cpsie	i
  404b76:	e7fe      	b.n	404b76 <xNotifyTaskFromISR+0x92>
  404b78:	204296b8 	.word	0x204296b8
  404b7c:	204296b0 	.word	0x204296b0
  404b80:	204296ac 	.word	0x204296ac
  404b84:	204296b4 	.word	0x204296b4
  404b88:	00404775 	.word	0x00404775
  404b8c:	204296a8 	.word	0x204296a8
  404b90:	00404639 	.word	0x00404639

00404b94 <vTimerPeriodicISRTests>:
	}
}
/*-----------------------------------------------------------*/

void vTimerPeriodicISRTests( void )
{
  404b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		const TickType_t xMargin = 4;
	#endif /* _WINDOWS_ */
#endif


	uxTick++;
  404b98:	4dab      	ldr	r5, [pc, #684]	; (404e48 <vTimerPeriodicISRTests+0x2b4>)
{
  404b9a:	b082      	sub	sp, #8
	uxTick++;
  404b9c:	682c      	ldr	r4, [r5, #0]
  404b9e:	3401      	adds	r4, #1
  404ba0:	602c      	str	r4, [r5, #0]

	if( uxTick == 0 )
  404ba2:	2c00      	cmp	r4, #0
  404ba4:	d063      	beq.n	404c6e <vTimerPeriodicISRTests+0xda>
				again. */
				xTimerStopFromISR( xISRAutoReloadTimer, NULL );
			}
		}
	}
	else if( uxTick == ( xBasePeriod - xMargin ) )
  404ba6:	4ba9      	ldr	r3, [pc, #676]	; (404e4c <vTimerPeriodicISRTests+0x2b8>)
  404ba8:	681b      	ldr	r3, [r3, #0]
  404baa:	1f1a      	subs	r2, r3, #4
  404bac:	4294      	cmp	r4, r2
  404bae:	d079      	beq.n	404ca4 <vTimerPeriodicISRTests+0x110>
		{
			xTestStatus = pdFAIL;
			configASSERT( xTestStatus );
		}
	}
	else if( uxTick == ( xBasePeriod + xMargin ) )
  404bb0:	1d1a      	adds	r2, r3, #4
  404bb2:	4294      	cmp	r4, r2
  404bb4:	f000 808f 	beq.w	404cd6 <vTimerPeriodicISRTests+0x142>
		{
			xTestStatus = pdFAIL;
			configASSERT( xTestStatus );
		}
	}
	else if( uxTick == ( ( 2 * xBasePeriod ) - xMargin ) )
  404bb8:	4aa5      	ldr	r2, [pc, #660]	; (404e50 <vTimerPeriodicISRTests+0x2bc>)
  404bba:	441a      	add	r2, r3
  404bbc:	0052      	lsls	r2, r2, #1
  404bbe:	4294      	cmp	r4, r2
  404bc0:	f000 80eb 	beq.w	404d9a <vTimerPeriodicISRTests+0x206>
		{
			xTestStatus = pdFAIL;
			configASSERT( xTestStatus );
		}
	}
	else if( uxTick == ( ( 2 * xBasePeriod ) + xMargin ) )
  404bc4:	f102 0108 	add.w	r1, r2, #8
  404bc8:	428c      	cmp	r4, r1
  404bca:	f000 80bd 	beq.w	404d48 <vTimerPeriodicISRTests+0x1b4>
		{
			xTestStatus = pdFAIL;
			configASSERT( xTestStatus );
		}
	}
	else if( uxTick == ( ( 2 * xBasePeriod ) + ( xBasePeriod >> ( TickType_t ) 2U ) ) )
  404bce:	3204      	adds	r2, #4
  404bd0:	eb02 0293 	add.w	r2, r2, r3, lsr #2
  404bd4:	4294      	cmp	r4, r2
  404bd6:	f000 8094 	beq.w	404d02 <vTimerPeriodicISRTests+0x16e>
		{
			xTestStatus = pdFAIL;
			configASSERT( xTestStatus );
		}
	}
	else if( uxTick == ( 3 * xBasePeriod ) )
  404bda:	005a      	lsls	r2, r3, #1
  404bdc:	18d1      	adds	r1, r2, r3
  404bde:	428c      	cmp	r4, r1
  404be0:	f000 8250 	beq.w	405084 <vTimerPeriodicISRTests+0x4f0>
	{
		/* Start the one shot timer again. */
		xTimerStartFromISR( xISROneShotTimer, NULL );
	}
	else if( uxTick == ( ( 3 * xBasePeriod ) + xMargin ) )
  404be4:	3104      	adds	r1, #4
  404be6:	428c      	cmp	r4, r1
  404be8:	f000 828f 	beq.w	40510a <vTimerPeriodicISRTests+0x576>

		/* Now stop the auto reload timer.  The one shot timer was started
		a few ticks ago. */
		xTimerStopFromISR( xISRAutoReloadTimer, NULL );
	}
	else if( uxTick == ( 4 * ( xBasePeriod - xMargin ) ) )
  404bec:	4999      	ldr	r1, [pc, #612]	; (404e54 <vTimerPeriodicISRTests+0x2c0>)
  404bee:	4419      	add	r1, r3
  404bf0:	0089      	lsls	r1, r1, #2
  404bf2:	428c      	cmp	r4, r1
  404bf4:	f000 8252 	beq.w	40509c <vTimerPeriodicISRTests+0x508>
		{
			xTestStatus = pdFAIL;
			configASSERT( xTestStatus );
		}
	}
	else if( uxTick == ( ( 4 * xBasePeriod ) + xMargin ) )
  404bf8:	3114      	adds	r1, #20
  404bfa:	428c      	cmp	r4, r1
  404bfc:	f000 818c 	beq.w	404f18 <vTimerPeriodicISRTests+0x384>
		{
			xTestStatus = pdFAIL;
			configASSERT( xTestStatus );
		}
	}
	else if( uxTick == ( 8 * xBasePeriod ) )
  404c00:	00d9      	lsls	r1, r3, #3
  404c02:	428c      	cmp	r4, r1
  404c04:	f000 815f 	beq.w	404ec6 <vTimerPeriodicISRTests+0x332>
		}

		/* Now reset the one shot timer. */
		xTimerResetFromISR( xISROneShotTimer, NULL );
	}
	else if( uxTick == ( ( 9 * xBasePeriod ) - xMargin ) )
  404c08:	4419      	add	r1, r3
  404c0a:	3904      	subs	r1, #4
  404c0c:	428c      	cmp	r4, r1
  404c0e:	f000 8131 	beq.w	404e74 <vTimerPeriodicISRTests+0x2e0>
			configASSERT( xTestStatus );
		}

		xTimerResetFromISR( xISROneShotTimer, NULL );
	}
	else if( uxTick == ( ( 10 * xBasePeriod ) - ( 2 * xMargin ) ) )
  404c12:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  404c16:	0049      	lsls	r1, r1, #1
  404c18:	f1a1 0008 	sub.w	r0, r1, #8
  404c1c:	4284      	cmp	r4, r0
  404c1e:	f000 80de 	beq.w	404dde <vTimerPeriodicISRTests+0x24a>
			configASSERT( xTestStatus );
		}

		xTimerResetFromISR( xISROneShotTimer, NULL );
	}
	else if( uxTick == ( ( 11 * xBasePeriod ) - ( 3 * xMargin ) ) )
  404c22:	4419      	add	r1, r3
  404c24:	390c      	subs	r1, #12
  404c26:	428c      	cmp	r4, r1
  404c28:	f000 81cc 	beq.w	404fc4 <vTimerPeriodicISRTests+0x430>
			configASSERT( xTestStatus );
		}

		xTimerResetFromISR( xISROneShotTimer, NULL );
	}
	else if( uxTick == ( ( 12 * xBasePeriod ) - ( 2 * xMargin ) ) )
  404c2c:	441a      	add	r2, r3
  404c2e:	0092      	lsls	r2, r2, #2
  404c30:	3a08      	subs	r2, #8
  404c32:	4294      	cmp	r4, r2
  404c34:	f000 819b 	beq.w	404f6e <vTimerPeriodicISRTests+0x3da>
		{
			xTestStatus = pdFAIL;
			configASSERT( xTestStatus );
		}
	}
	else if( uxTick == ( 15 * xBasePeriod ) )
  404c38:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  404c3c:	429c      	cmp	r4, r3
  404c3e:	d12e      	bne.n	404c9e <vTimerPeriodicISRTests+0x10a>
	{
		/* Neither timer should be running now.  Check neither callback count
		has incremented, then go back to the start to run these tests all
		over again. */
		if( ucISRAutoReloadTimerCounter != 3 )
  404c40:	4b85      	ldr	r3, [pc, #532]	; (404e58 <vTimerPeriodicISRTests+0x2c4>)
  404c42:	781b      	ldrb	r3, [r3, #0]
  404c44:	2b03      	cmp	r3, #3
  404c46:	f000 8205 	beq.w	405054 <vTimerPeriodicISRTests+0x4c0>
		{
			xTestStatus = pdFAIL;
  404c4a:	4b84      	ldr	r3, [pc, #528]	; (404e5c <vTimerPeriodicISRTests+0x2c8>)
  404c4c:	2200      	movs	r2, #0
  404c4e:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404c50:	681b      	ldr	r3, [r3, #0]
  404c52:	2b00      	cmp	r3, #0
  404c54:	f040 81fe 	bne.w	405054 <vTimerPeriodicISRTests+0x4c0>
  404c58:	f04f 0380 	mov.w	r3, #128	; 0x80
  404c5c:	b672      	cpsid	i
  404c5e:	f383 8811 	msr	BASEPRI, r3
  404c62:	f3bf 8f6f 	isb	sy
  404c66:	f3bf 8f4f 	dsb	sy
  404c6a:	b662      	cpsie	i
  404c6c:	e7fe      	b.n	404c6c <vTimerPeriodicISRTests+0xd8>
		ucISRAutoReloadTimerCounter = 0;
  404c6e:	f8df e1e8 	ldr.w	lr, [pc, #488]	; 404e58 <vTimerPeriodicISRTests+0x2c4>
		uxTick = ( TickType_t ) -1;
  404c72:	f04f 36ff 	mov.w	r6, #4294967295
		if( xTimerChangePeriodFromISR( xISRAutoReloadTimer, xBasePeriod, NULL ) == pdPASS )
  404c76:	4f7a      	ldr	r7, [pc, #488]	; (404e60 <vTimerPeriodicISRTests+0x2cc>)
  404c78:	4623      	mov	r3, r4
  404c7a:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 404e4c <vTimerPeriodicISRTests+0x2b8>
  404c7e:	2109      	movs	r1, #9
  404c80:	6838      	ldr	r0, [r7, #0]
  404c82:	9400      	str	r4, [sp, #0]
		ucISRAutoReloadTimerCounter = 0;
  404c84:	f88e 4000 	strb.w	r4, [lr]
		ucISROneShotTimerCounter = 0;
  404c88:	f8df e1dc 	ldr.w	lr, [pc, #476]	; 404e68 <vTimerPeriodicISRTests+0x2d4>
		uxTick = ( TickType_t ) -1;
  404c8c:	602e      	str	r6, [r5, #0]
		if( xTimerChangePeriodFromISR( xISRAutoReloadTimer, xBasePeriod, NULL ) == pdPASS )
  404c8e:	f8d8 2000 	ldr.w	r2, [r8]
  404c92:	4e74      	ldr	r6, [pc, #464]	; (404e64 <vTimerPeriodicISRTests+0x2d0>)
		ucISROneShotTimerCounter = 0;
  404c94:	f88e 4000 	strb.w	r4, [lr]
		if( xTimerChangePeriodFromISR( xISRAutoReloadTimer, xBasePeriod, NULL ) == pdPASS )
  404c98:	47b0      	blx	r6
  404c9a:	2801      	cmp	r0, #1
  404c9c:	d048      	beq.n	404d30 <vTimerPeriodicISRTests+0x19c>
			configASSERT( xTestStatus );
		}

		uxTick = ( TickType_t ) -1;
	}
}
  404c9e:	b002      	add	sp, #8
  404ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if( ( ucISRAutoReloadTimerCounter != 0 ) || ( ucISROneShotTimerCounter != 0 ) )
  404ca4:	4b6c      	ldr	r3, [pc, #432]	; (404e58 <vTimerPeriodicISRTests+0x2c4>)
  404ca6:	781b      	ldrb	r3, [r3, #0]
  404ca8:	b183      	cbz	r3, 404ccc <vTimerPeriodicISRTests+0x138>
			xTestStatus = pdFAIL;
  404caa:	4b6c      	ldr	r3, [pc, #432]	; (404e5c <vTimerPeriodicISRTests+0x2c8>)
  404cac:	2200      	movs	r2, #0
  404cae:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404cb0:	681b      	ldr	r3, [r3, #0]
  404cb2:	2b00      	cmp	r3, #0
  404cb4:	d1f3      	bne.n	404c9e <vTimerPeriodicISRTests+0x10a>
  404cb6:	f04f 0380 	mov.w	r3, #128	; 0x80
  404cba:	b672      	cpsid	i
  404cbc:	f383 8811 	msr	BASEPRI, r3
  404cc0:	f3bf 8f6f 	isb	sy
  404cc4:	f3bf 8f4f 	dsb	sy
  404cc8:	b662      	cpsie	i
  404cca:	e7fe      	b.n	404cca <vTimerPeriodicISRTests+0x136>
		if( ( ucISRAutoReloadTimerCounter != 0 ) || ( ucISROneShotTimerCounter != 0 ) )
  404ccc:	4b66      	ldr	r3, [pc, #408]	; (404e68 <vTimerPeriodicISRTests+0x2d4>)
  404cce:	781b      	ldrb	r3, [r3, #0]
  404cd0:	2b00      	cmp	r3, #0
  404cd2:	d1ea      	bne.n	404caa <vTimerPeriodicISRTests+0x116>
  404cd4:	e7e3      	b.n	404c9e <vTimerPeriodicISRTests+0x10a>
		if( ( ucISRAutoReloadTimerCounter != 1 ) || ( ucISROneShotTimerCounter != 1 ) )
  404cd6:	4b60      	ldr	r3, [pc, #384]	; (404e58 <vTimerPeriodicISRTests+0x2c4>)
  404cd8:	781b      	ldrb	r3, [r3, #0]
  404cda:	2b01      	cmp	r3, #1
  404cdc:	f000 81b4 	beq.w	405048 <vTimerPeriodicISRTests+0x4b4>
			xTestStatus = pdFAIL;
  404ce0:	4b5e      	ldr	r3, [pc, #376]	; (404e5c <vTimerPeriodicISRTests+0x2c8>)
  404ce2:	2200      	movs	r2, #0
  404ce4:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404ce6:	681b      	ldr	r3, [r3, #0]
  404ce8:	2b00      	cmp	r3, #0
  404cea:	d1d8      	bne.n	404c9e <vTimerPeriodicISRTests+0x10a>
  404cec:	f04f 0380 	mov.w	r3, #128	; 0x80
  404cf0:	b672      	cpsid	i
  404cf2:	f383 8811 	msr	BASEPRI, r3
  404cf6:	f3bf 8f6f 	isb	sy
  404cfa:	f3bf 8f4f 	dsb	sy
  404cfe:	b662      	cpsie	i
  404d00:	e7fe      	b.n	404d00 <vTimerPeriodicISRTests+0x16c>
		if( ucISRAutoReloadTimerCounter != 2 )
  404d02:	4b55      	ldr	r3, [pc, #340]	; (404e58 <vTimerPeriodicISRTests+0x2c4>)
  404d04:	781b      	ldrb	r3, [r3, #0]
  404d06:	2b02      	cmp	r3, #2
  404d08:	f000 8187 	beq.w	40501a <vTimerPeriodicISRTests+0x486>
			xTestStatus = pdFAIL;
  404d0c:	4b53      	ldr	r3, [pc, #332]	; (404e5c <vTimerPeriodicISRTests+0x2c8>)
  404d0e:	2200      	movs	r2, #0
  404d10:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404d12:	681b      	ldr	r3, [r3, #0]
  404d14:	2b00      	cmp	r3, #0
  404d16:	f040 8180 	bne.w	40501a <vTimerPeriodicISRTests+0x486>
  404d1a:	f04f 0380 	mov.w	r3, #128	; 0x80
  404d1e:	b672      	cpsid	i
  404d20:	f383 8811 	msr	BASEPRI, r3
  404d24:	f3bf 8f6f 	isb	sy
  404d28:	f3bf 8f4f 	dsb	sy
  404d2c:	b662      	cpsie	i
  404d2e:	e7fe      	b.n	404d2e <vTimerPeriodicISRTests+0x19a>
			if( xTimerChangePeriodFromISR( xISROneShotTimer, xBasePeriod, NULL ) == pdPASS )
  404d30:	484e      	ldr	r0, [pc, #312]	; (404e6c <vTimerPeriodicISRTests+0x2d8>)
  404d32:	4623      	mov	r3, r4
  404d34:	f8d8 2000 	ldr.w	r2, [r8]
  404d38:	2109      	movs	r1, #9
  404d3a:	6800      	ldr	r0, [r0, #0]
  404d3c:	9400      	str	r4, [sp, #0]
  404d3e:	47b0      	blx	r6
  404d40:	2801      	cmp	r0, #1
  404d42:	d145      	bne.n	404dd0 <vTimerPeriodicISRTests+0x23c>
				uxTick = 0;
  404d44:	602c      	str	r4, [r5, #0]
  404d46:	e7aa      	b.n	404c9e <vTimerPeriodicISRTests+0x10a>
		if( ucISRAutoReloadTimerCounter != 2 )
  404d48:	4b43      	ldr	r3, [pc, #268]	; (404e58 <vTimerPeriodicISRTests+0x2c4>)
  404d4a:	781b      	ldrb	r3, [r3, #0]
  404d4c:	2b02      	cmp	r3, #2
  404d4e:	d00f      	beq.n	404d70 <vTimerPeriodicISRTests+0x1dc>
			xTestStatus = pdFAIL;
  404d50:	4b42      	ldr	r3, [pc, #264]	; (404e5c <vTimerPeriodicISRTests+0x2c8>)
  404d52:	2200      	movs	r2, #0
  404d54:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404d56:	681b      	ldr	r3, [r3, #0]
  404d58:	b953      	cbnz	r3, 404d70 <vTimerPeriodicISRTests+0x1dc>
  404d5a:	f04f 0380 	mov.w	r3, #128	; 0x80
  404d5e:	b672      	cpsid	i
  404d60:	f383 8811 	msr	BASEPRI, r3
  404d64:	f3bf 8f6f 	isb	sy
  404d68:	f3bf 8f4f 	dsb	sy
  404d6c:	b662      	cpsie	i
  404d6e:	e7fe      	b.n	404d6e <vTimerPeriodicISRTests+0x1da>
		if( ucISROneShotTimerCounter != 1 )
  404d70:	4b3d      	ldr	r3, [pc, #244]	; (404e68 <vTimerPeriodicISRTests+0x2d4>)
  404d72:	781b      	ldrb	r3, [r3, #0]
  404d74:	2b01      	cmp	r3, #1
  404d76:	d092      	beq.n	404c9e <vTimerPeriodicISRTests+0x10a>
			xTestStatus = pdFAIL;
  404d78:	4b38      	ldr	r3, [pc, #224]	; (404e5c <vTimerPeriodicISRTests+0x2c8>)
  404d7a:	2200      	movs	r2, #0
  404d7c:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404d7e:	681b      	ldr	r3, [r3, #0]
  404d80:	2b00      	cmp	r3, #0
  404d82:	d18c      	bne.n	404c9e <vTimerPeriodicISRTests+0x10a>
  404d84:	f04f 0380 	mov.w	r3, #128	; 0x80
  404d88:	b672      	cpsid	i
  404d8a:	f383 8811 	msr	BASEPRI, r3
  404d8e:	f3bf 8f6f 	isb	sy
  404d92:	f3bf 8f4f 	dsb	sy
  404d96:	b662      	cpsie	i
  404d98:	e7fe      	b.n	404d98 <vTimerPeriodicISRTests+0x204>
		if( ( ucISRAutoReloadTimerCounter != 1 ) || ( ucISROneShotTimerCounter != 1 ) )
  404d9a:	4b2f      	ldr	r3, [pc, #188]	; (404e58 <vTimerPeriodicISRTests+0x2c4>)
  404d9c:	781b      	ldrb	r3, [r3, #0]
  404d9e:	2b01      	cmp	r3, #1
  404da0:	d011      	beq.n	404dc6 <vTimerPeriodicISRTests+0x232>
			xTestStatus = pdFAIL;
  404da2:	4b2e      	ldr	r3, [pc, #184]	; (404e5c <vTimerPeriodicISRTests+0x2c8>)
  404da4:	2200      	movs	r2, #0
  404da6:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404da8:	681b      	ldr	r3, [r3, #0]
  404daa:	2b00      	cmp	r3, #0
  404dac:	f47f af77 	bne.w	404c9e <vTimerPeriodicISRTests+0x10a>
  404db0:	f04f 0380 	mov.w	r3, #128	; 0x80
  404db4:	b672      	cpsid	i
  404db6:	f383 8811 	msr	BASEPRI, r3
  404dba:	f3bf 8f6f 	isb	sy
  404dbe:	f3bf 8f4f 	dsb	sy
  404dc2:	b662      	cpsie	i
  404dc4:	e7fe      	b.n	404dc4 <vTimerPeriodicISRTests+0x230>
		if( ( ucISRAutoReloadTimerCounter != 1 ) || ( ucISROneShotTimerCounter != 1 ) )
  404dc6:	4b28      	ldr	r3, [pc, #160]	; (404e68 <vTimerPeriodicISRTests+0x2d4>)
  404dc8:	781b      	ldrb	r3, [r3, #0]
  404dca:	2b01      	cmp	r3, #1
  404dcc:	d1e9      	bne.n	404da2 <vTimerPeriodicISRTests+0x20e>
  404dce:	e766      	b.n	404c9e <vTimerPeriodicISRTests+0x10a>
				xTimerStopFromISR( xISRAutoReloadTimer, NULL );
  404dd0:	6838      	ldr	r0, [r7, #0]
  404dd2:	4623      	mov	r3, r4
  404dd4:	9400      	str	r4, [sp, #0]
  404dd6:	4622      	mov	r2, r4
  404dd8:	2108      	movs	r1, #8
  404dda:	47b0      	blx	r6
  404ddc:	e75f      	b.n	404c9e <vTimerPeriodicISRTests+0x10a>
		if( ucISRAutoReloadTimerCounter != 3 )
  404dde:	4b1e      	ldr	r3, [pc, #120]	; (404e58 <vTimerPeriodicISRTests+0x2c4>)
  404de0:	781b      	ldrb	r3, [r3, #0]
  404de2:	2b03      	cmp	r3, #3
  404de4:	d00f      	beq.n	404e06 <vTimerPeriodicISRTests+0x272>
			xTestStatus = pdFAIL;
  404de6:	4b1d      	ldr	r3, [pc, #116]	; (404e5c <vTimerPeriodicISRTests+0x2c8>)
  404de8:	2200      	movs	r2, #0
  404dea:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404dec:	681b      	ldr	r3, [r3, #0]
  404dee:	b953      	cbnz	r3, 404e06 <vTimerPeriodicISRTests+0x272>
  404df0:	f04f 0380 	mov.w	r3, #128	; 0x80
  404df4:	b672      	cpsid	i
  404df6:	f383 8811 	msr	BASEPRI, r3
  404dfa:	f3bf 8f6f 	isb	sy
  404dfe:	f3bf 8f4f 	dsb	sy
  404e02:	b662      	cpsie	i
  404e04:	e7fe      	b.n	404e04 <vTimerPeriodicISRTests+0x270>
		if( ucISROneShotTimerCounter != 2 )
  404e06:	4b18      	ldr	r3, [pc, #96]	; (404e68 <vTimerPeriodicISRTests+0x2d4>)
  404e08:	781b      	ldrb	r3, [r3, #0]
  404e0a:	2b02      	cmp	r3, #2
  404e0c:	d00f      	beq.n	404e2e <vTimerPeriodicISRTests+0x29a>
			xTestStatus = pdFAIL;
  404e0e:	4b13      	ldr	r3, [pc, #76]	; (404e5c <vTimerPeriodicISRTests+0x2c8>)
  404e10:	2200      	movs	r2, #0
  404e12:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404e14:	681b      	ldr	r3, [r3, #0]
  404e16:	b953      	cbnz	r3, 404e2e <vTimerPeriodicISRTests+0x29a>
  404e18:	f04f 0380 	mov.w	r3, #128	; 0x80
  404e1c:	b672      	cpsid	i
  404e1e:	f383 8811 	msr	BASEPRI, r3
  404e22:	f3bf 8f6f 	isb	sy
  404e26:	f3bf 8f4f 	dsb	sy
  404e2a:	b662      	cpsie	i
  404e2c:	e7fe      	b.n	404e2c <vTimerPeriodicISRTests+0x298>
		xTimerResetFromISR( xISROneShotTimer, NULL );
  404e2e:	4a0f      	ldr	r2, [pc, #60]	; (404e6c <vTimerPeriodicISRTests+0x2d8>)
  404e30:	4b0f      	ldr	r3, [pc, #60]	; (404e70 <vTimerPeriodicISRTests+0x2dc>)
  404e32:	6814      	ldr	r4, [r2, #0]
  404e34:	4798      	blx	r3
  404e36:	2300      	movs	r3, #0
  404e38:	4602      	mov	r2, r0
  404e3a:	2107      	movs	r1, #7
  404e3c:	4620      	mov	r0, r4
  404e3e:	9300      	str	r3, [sp, #0]
  404e40:	4c08      	ldr	r4, [pc, #32]	; (404e64 <vTimerPeriodicISRTests+0x2d0>)
  404e42:	47a0      	blx	r4
  404e44:	e72b      	b.n	404c9e <vTimerPeriodicISRTests+0x10a>
  404e46:	bf00      	nop
  404e48:	20400038 	.word	0x20400038
  404e4c:	204296c0 	.word	0x204296c0
  404e50:	7ffffffe 	.word	0x7ffffffe
  404e54:	3ffffffc 	.word	0x3ffffffc
  404e58:	204296bc 	.word	0x204296bc
  404e5c:	2040003c 	.word	0x2040003c
  404e60:	204296c4 	.word	0x204296c4
  404e64:	00404875 	.word	0x00404875
  404e68:	204296bd 	.word	0x204296bd
  404e6c:	204296c8 	.word	0x204296c8
  404e70:	00403f29 	.word	0x00403f29
		if( ucISRAutoReloadTimerCounter != 3 )
  404e74:	4b93      	ldr	r3, [pc, #588]	; (4050c4 <vTimerPeriodicISRTests+0x530>)
  404e76:	781b      	ldrb	r3, [r3, #0]
  404e78:	2b03      	cmp	r3, #3
  404e7a:	d00f      	beq.n	404e9c <vTimerPeriodicISRTests+0x308>
			xTestStatus = pdFAIL;
  404e7c:	4b92      	ldr	r3, [pc, #584]	; (4050c8 <vTimerPeriodicISRTests+0x534>)
  404e7e:	2200      	movs	r2, #0
  404e80:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404e82:	681b      	ldr	r3, [r3, #0]
  404e84:	b953      	cbnz	r3, 404e9c <vTimerPeriodicISRTests+0x308>
  404e86:	f04f 0380 	mov.w	r3, #128	; 0x80
  404e8a:	b672      	cpsid	i
  404e8c:	f383 8811 	msr	BASEPRI, r3
  404e90:	f3bf 8f6f 	isb	sy
  404e94:	f3bf 8f4f 	dsb	sy
  404e98:	b662      	cpsie	i
  404e9a:	e7fe      	b.n	404e9a <vTimerPeriodicISRTests+0x306>
		if( ucISROneShotTimerCounter != 2 )
  404e9c:	4b8b      	ldr	r3, [pc, #556]	; (4050cc <vTimerPeriodicISRTests+0x538>)
  404e9e:	781b      	ldrb	r3, [r3, #0]
  404ea0:	2b02      	cmp	r3, #2
  404ea2:	d0c4      	beq.n	404e2e <vTimerPeriodicISRTests+0x29a>
			xTestStatus = pdFAIL;
  404ea4:	4b88      	ldr	r3, [pc, #544]	; (4050c8 <vTimerPeriodicISRTests+0x534>)
  404ea6:	2200      	movs	r2, #0
  404ea8:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404eaa:	681b      	ldr	r3, [r3, #0]
  404eac:	2b00      	cmp	r3, #0
  404eae:	d1be      	bne.n	404e2e <vTimerPeriodicISRTests+0x29a>
  404eb0:	f04f 0380 	mov.w	r3, #128	; 0x80
  404eb4:	b672      	cpsid	i
  404eb6:	f383 8811 	msr	BASEPRI, r3
  404eba:	f3bf 8f6f 	isb	sy
  404ebe:	f3bf 8f4f 	dsb	sy
  404ec2:	b662      	cpsie	i
  404ec4:	e7fe      	b.n	404ec4 <vTimerPeriodicISRTests+0x330>
		if( ucISRAutoReloadTimerCounter != 3 )
  404ec6:	4b7f      	ldr	r3, [pc, #508]	; (4050c4 <vTimerPeriodicISRTests+0x530>)
  404ec8:	781b      	ldrb	r3, [r3, #0]
  404eca:	2b03      	cmp	r3, #3
  404ecc:	d00f      	beq.n	404eee <vTimerPeriodicISRTests+0x35a>
			xTestStatus = pdFAIL;
  404ece:	4b7e      	ldr	r3, [pc, #504]	; (4050c8 <vTimerPeriodicISRTests+0x534>)
  404ed0:	2200      	movs	r2, #0
  404ed2:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404ed4:	681b      	ldr	r3, [r3, #0]
  404ed6:	b953      	cbnz	r3, 404eee <vTimerPeriodicISRTests+0x35a>
  404ed8:	f04f 0380 	mov.w	r3, #128	; 0x80
  404edc:	b672      	cpsid	i
  404ede:	f383 8811 	msr	BASEPRI, r3
  404ee2:	f3bf 8f6f 	isb	sy
  404ee6:	f3bf 8f4f 	dsb	sy
  404eea:	b662      	cpsie	i
  404eec:	e7fe      	b.n	404eec <vTimerPeriodicISRTests+0x358>
		if( ucISROneShotTimerCounter != 2 )
  404eee:	4b77      	ldr	r3, [pc, #476]	; (4050cc <vTimerPeriodicISRTests+0x538>)
  404ef0:	781b      	ldrb	r3, [r3, #0]
  404ef2:	2b02      	cmp	r3, #2
  404ef4:	d09b      	beq.n	404e2e <vTimerPeriodicISRTests+0x29a>
			xTestStatus = pdFAIL;
  404ef6:	4b74      	ldr	r3, [pc, #464]	; (4050c8 <vTimerPeriodicISRTests+0x534>)
  404ef8:	2200      	movs	r2, #0
  404efa:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404efc:	681b      	ldr	r3, [r3, #0]
  404efe:	2b00      	cmp	r3, #0
  404f00:	d195      	bne.n	404e2e <vTimerPeriodicISRTests+0x29a>
  404f02:	f04f 0380 	mov.w	r3, #128	; 0x80
  404f06:	b672      	cpsid	i
  404f08:	f383 8811 	msr	BASEPRI, r3
  404f0c:	f3bf 8f6f 	isb	sy
  404f10:	f3bf 8f4f 	dsb	sy
  404f14:	b662      	cpsie	i
  404f16:	e7fe      	b.n	404f16 <vTimerPeriodicISRTests+0x382>
		if( ucISRAutoReloadTimerCounter != 3 )
  404f18:	4b6a      	ldr	r3, [pc, #424]	; (4050c4 <vTimerPeriodicISRTests+0x530>)
  404f1a:	781b      	ldrb	r3, [r3, #0]
  404f1c:	2b03      	cmp	r3, #3
  404f1e:	d00f      	beq.n	404f40 <vTimerPeriodicISRTests+0x3ac>
			xTestStatus = pdFAIL;
  404f20:	4b69      	ldr	r3, [pc, #420]	; (4050c8 <vTimerPeriodicISRTests+0x534>)
  404f22:	2200      	movs	r2, #0
  404f24:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404f26:	681b      	ldr	r3, [r3, #0]
  404f28:	b953      	cbnz	r3, 404f40 <vTimerPeriodicISRTests+0x3ac>
  404f2a:	f04f 0380 	mov.w	r3, #128	; 0x80
  404f2e:	b672      	cpsid	i
  404f30:	f383 8811 	msr	BASEPRI, r3
  404f34:	f3bf 8f6f 	isb	sy
  404f38:	f3bf 8f4f 	dsb	sy
  404f3c:	b662      	cpsie	i
  404f3e:	e7fe      	b.n	404f3e <vTimerPeriodicISRTests+0x3aa>
		if( ucISROneShotTimerCounter != 2 )
  404f40:	4b62      	ldr	r3, [pc, #392]	; (4050cc <vTimerPeriodicISRTests+0x538>)
  404f42:	781b      	ldrb	r3, [r3, #0]
  404f44:	2b02      	cmp	r3, #2
  404f46:	f43f aeaa 	beq.w	404c9e <vTimerPeriodicISRTests+0x10a>
			xTestStatus = pdFAIL;
  404f4a:	4b5f      	ldr	r3, [pc, #380]	; (4050c8 <vTimerPeriodicISRTests+0x534>)
  404f4c:	2200      	movs	r2, #0
  404f4e:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404f50:	681b      	ldr	r3, [r3, #0]
  404f52:	2b00      	cmp	r3, #0
  404f54:	f47f aea3 	bne.w	404c9e <vTimerPeriodicISRTests+0x10a>
  404f58:	f04f 0380 	mov.w	r3, #128	; 0x80
  404f5c:	b672      	cpsid	i
  404f5e:	f383 8811 	msr	BASEPRI, r3
  404f62:	f3bf 8f6f 	isb	sy
  404f66:	f3bf 8f4f 	dsb	sy
  404f6a:	b662      	cpsie	i
  404f6c:	e7fe      	b.n	404f6c <vTimerPeriodicISRTests+0x3d8>
		if( ucISRAutoReloadTimerCounter != 3 )
  404f6e:	4b55      	ldr	r3, [pc, #340]	; (4050c4 <vTimerPeriodicISRTests+0x530>)
  404f70:	781b      	ldrb	r3, [r3, #0]
  404f72:	2b03      	cmp	r3, #3
  404f74:	d00f      	beq.n	404f96 <vTimerPeriodicISRTests+0x402>
			xTestStatus = pdFAIL;
  404f76:	4b54      	ldr	r3, [pc, #336]	; (4050c8 <vTimerPeriodicISRTests+0x534>)
  404f78:	2200      	movs	r2, #0
  404f7a:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404f7c:	681b      	ldr	r3, [r3, #0]
  404f7e:	b953      	cbnz	r3, 404f96 <vTimerPeriodicISRTests+0x402>
  404f80:	f04f 0380 	mov.w	r3, #128	; 0x80
  404f84:	b672      	cpsid	i
  404f86:	f383 8811 	msr	BASEPRI, r3
  404f8a:	f3bf 8f6f 	isb	sy
  404f8e:	f3bf 8f4f 	dsb	sy
  404f92:	b662      	cpsie	i
  404f94:	e7fe      	b.n	404f94 <vTimerPeriodicISRTests+0x400>
		if( ucISROneShotTimerCounter != 3 )
  404f96:	4b4d      	ldr	r3, [pc, #308]	; (4050cc <vTimerPeriodicISRTests+0x538>)
  404f98:	781b      	ldrb	r3, [r3, #0]
  404f9a:	2b03      	cmp	r3, #3
  404f9c:	f43f ae7f 	beq.w	404c9e <vTimerPeriodicISRTests+0x10a>
			xTestStatus = pdFAIL;
  404fa0:	4b49      	ldr	r3, [pc, #292]	; (4050c8 <vTimerPeriodicISRTests+0x534>)
  404fa2:	2200      	movs	r2, #0
  404fa4:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404fa6:	681b      	ldr	r3, [r3, #0]
  404fa8:	2b00      	cmp	r3, #0
  404faa:	f47f ae78 	bne.w	404c9e <vTimerPeriodicISRTests+0x10a>
  404fae:	f04f 0380 	mov.w	r3, #128	; 0x80
  404fb2:	b672      	cpsid	i
  404fb4:	f383 8811 	msr	BASEPRI, r3
  404fb8:	f3bf 8f6f 	isb	sy
  404fbc:	f3bf 8f4f 	dsb	sy
  404fc0:	b662      	cpsie	i
  404fc2:	e7fe      	b.n	404fc2 <vTimerPeriodicISRTests+0x42e>
		if( ucISRAutoReloadTimerCounter != 3 )
  404fc4:	4b3f      	ldr	r3, [pc, #252]	; (4050c4 <vTimerPeriodicISRTests+0x530>)
  404fc6:	781b      	ldrb	r3, [r3, #0]
  404fc8:	2b03      	cmp	r3, #3
  404fca:	d00f      	beq.n	404fec <vTimerPeriodicISRTests+0x458>
			xTestStatus = pdFAIL;
  404fcc:	4b3e      	ldr	r3, [pc, #248]	; (4050c8 <vTimerPeriodicISRTests+0x534>)
  404fce:	2200      	movs	r2, #0
  404fd0:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404fd2:	681b      	ldr	r3, [r3, #0]
  404fd4:	b953      	cbnz	r3, 404fec <vTimerPeriodicISRTests+0x458>
  404fd6:	f04f 0380 	mov.w	r3, #128	; 0x80
  404fda:	b672      	cpsid	i
  404fdc:	f383 8811 	msr	BASEPRI, r3
  404fe0:	f3bf 8f6f 	isb	sy
  404fe4:	f3bf 8f4f 	dsb	sy
  404fe8:	b662      	cpsie	i
  404fea:	e7fe      	b.n	404fea <vTimerPeriodicISRTests+0x456>
		if( ucISROneShotTimerCounter != 2 )
  404fec:	4b37      	ldr	r3, [pc, #220]	; (4050cc <vTimerPeriodicISRTests+0x538>)
  404fee:	781b      	ldrb	r3, [r3, #0]
  404ff0:	2b02      	cmp	r3, #2
  404ff2:	f43f af1c 	beq.w	404e2e <vTimerPeriodicISRTests+0x29a>
			xTestStatus = pdFAIL;
  404ff6:	4b34      	ldr	r3, [pc, #208]	; (4050c8 <vTimerPeriodicISRTests+0x534>)
  404ff8:	2200      	movs	r2, #0
  404ffa:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  404ffc:	681b      	ldr	r3, [r3, #0]
  404ffe:	2b00      	cmp	r3, #0
  405000:	f47f af15 	bne.w	404e2e <vTimerPeriodicISRTests+0x29a>
  405004:	f04f 0380 	mov.w	r3, #128	; 0x80
  405008:	b672      	cpsid	i
  40500a:	f383 8811 	msr	BASEPRI, r3
  40500e:	f3bf 8f6f 	isb	sy
  405012:	f3bf 8f4f 	dsb	sy
  405016:	b662      	cpsie	i
  405018:	e7fe      	b.n	405018 <vTimerPeriodicISRTests+0x484>
		if( ucISROneShotTimerCounter != 1 )
  40501a:	4b2c      	ldr	r3, [pc, #176]	; (4050cc <vTimerPeriodicISRTests+0x538>)
  40501c:	781b      	ldrb	r3, [r3, #0]
  40501e:	2b01      	cmp	r3, #1
  405020:	f43f ae3d 	beq.w	404c9e <vTimerPeriodicISRTests+0x10a>
			xTestStatus = pdFAIL;
  405024:	4b28      	ldr	r3, [pc, #160]	; (4050c8 <vTimerPeriodicISRTests+0x534>)
  405026:	2200      	movs	r2, #0
  405028:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  40502a:	681b      	ldr	r3, [r3, #0]
  40502c:	2b00      	cmp	r3, #0
  40502e:	f47f ae36 	bne.w	404c9e <vTimerPeriodicISRTests+0x10a>
  405032:	f04f 0380 	mov.w	r3, #128	; 0x80
  405036:	b672      	cpsid	i
  405038:	f383 8811 	msr	BASEPRI, r3
  40503c:	f3bf 8f6f 	isb	sy
  405040:	f3bf 8f4f 	dsb	sy
  405044:	b662      	cpsie	i
  405046:	e7fe      	b.n	405046 <vTimerPeriodicISRTests+0x4b2>
		if( ( ucISRAutoReloadTimerCounter != 1 ) || ( ucISROneShotTimerCounter != 1 ) )
  405048:	4b20      	ldr	r3, [pc, #128]	; (4050cc <vTimerPeriodicISRTests+0x538>)
  40504a:	781b      	ldrb	r3, [r3, #0]
  40504c:	2b01      	cmp	r3, #1
  40504e:	f47f ae47 	bne.w	404ce0 <vTimerPeriodicISRTests+0x14c>
  405052:	e624      	b.n	404c9e <vTimerPeriodicISRTests+0x10a>
		if( ucISROneShotTimerCounter != 3 )
  405054:	4b1d      	ldr	r3, [pc, #116]	; (4050cc <vTimerPeriodicISRTests+0x538>)
  405056:	781b      	ldrb	r3, [r3, #0]
  405058:	2b03      	cmp	r3, #3
  40505a:	d00f      	beq.n	40507c <vTimerPeriodicISRTests+0x4e8>
			xTestStatus = pdFAIL;
  40505c:	4b1a      	ldr	r3, [pc, #104]	; (4050c8 <vTimerPeriodicISRTests+0x534>)
  40505e:	2200      	movs	r2, #0
  405060:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  405062:	681b      	ldr	r3, [r3, #0]
  405064:	b953      	cbnz	r3, 40507c <vTimerPeriodicISRTests+0x4e8>
  405066:	f04f 0380 	mov.w	r3, #128	; 0x80
  40506a:	b672      	cpsid	i
  40506c:	f383 8811 	msr	BASEPRI, r3
  405070:	f3bf 8f6f 	isb	sy
  405074:	f3bf 8f4f 	dsb	sy
  405078:	b662      	cpsie	i
  40507a:	e7fe      	b.n	40507a <vTimerPeriodicISRTests+0x4e6>
		uxTick = ( TickType_t ) -1;
  40507c:	f04f 33ff 	mov.w	r3, #4294967295
  405080:	602b      	str	r3, [r5, #0]
}
  405082:	e60c      	b.n	404c9e <vTimerPeriodicISRTests+0x10a>
		xTimerStartFromISR( xISROneShotTimer, NULL );
  405084:	4a12      	ldr	r2, [pc, #72]	; (4050d0 <vTimerPeriodicISRTests+0x53c>)
  405086:	4b13      	ldr	r3, [pc, #76]	; (4050d4 <vTimerPeriodicISRTests+0x540>)
  405088:	6814      	ldr	r4, [r2, #0]
  40508a:	4798      	blx	r3
  40508c:	2300      	movs	r3, #0
  40508e:	4602      	mov	r2, r0
  405090:	2106      	movs	r1, #6
  405092:	4620      	mov	r0, r4
  405094:	9300      	str	r3, [sp, #0]
  405096:	4c10      	ldr	r4, [pc, #64]	; (4050d8 <vTimerPeriodicISRTests+0x544>)
  405098:	47a0      	blx	r4
  40509a:	e600      	b.n	404c9e <vTimerPeriodicISRTests+0x10a>
		if( ucISRAutoReloadTimerCounter != 3 )
  40509c:	4b09      	ldr	r3, [pc, #36]	; (4050c4 <vTimerPeriodicISRTests+0x530>)
  40509e:	781b      	ldrb	r3, [r3, #0]
  4050a0:	2b03      	cmp	r3, #3
  4050a2:	d01b      	beq.n	4050dc <vTimerPeriodicISRTests+0x548>
			xTestStatus = pdFAIL;
  4050a4:	4b08      	ldr	r3, [pc, #32]	; (4050c8 <vTimerPeriodicISRTests+0x534>)
  4050a6:	2200      	movs	r2, #0
  4050a8:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  4050aa:	681b      	ldr	r3, [r3, #0]
  4050ac:	b9b3      	cbnz	r3, 4050dc <vTimerPeriodicISRTests+0x548>
  4050ae:	f04f 0380 	mov.w	r3, #128	; 0x80
  4050b2:	b672      	cpsid	i
  4050b4:	f383 8811 	msr	BASEPRI, r3
  4050b8:	f3bf 8f6f 	isb	sy
  4050bc:	f3bf 8f4f 	dsb	sy
  4050c0:	b662      	cpsie	i
  4050c2:	e7fe      	b.n	4050c2 <vTimerPeriodicISRTests+0x52e>
  4050c4:	204296bc 	.word	0x204296bc
  4050c8:	2040003c 	.word	0x2040003c
  4050cc:	204296bd 	.word	0x204296bd
  4050d0:	204296c8 	.word	0x204296c8
  4050d4:	00403f29 	.word	0x00403f29
  4050d8:	00404875 	.word	0x00404875
		if( ucISROneShotTimerCounter != 1 )
  4050dc:	4b23      	ldr	r3, [pc, #140]	; (40516c <vTimerPeriodicISRTests+0x5d8>)
  4050de:	781b      	ldrb	r3, [r3, #0]
  4050e0:	2b01      	cmp	r3, #1
  4050e2:	f43f addc 	beq.w	404c9e <vTimerPeriodicISRTests+0x10a>
			xTestStatus = pdFAIL;
  4050e6:	4b22      	ldr	r3, [pc, #136]	; (405170 <vTimerPeriodicISRTests+0x5dc>)
  4050e8:	2200      	movs	r2, #0
  4050ea:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  4050ec:	681b      	ldr	r3, [r3, #0]
  4050ee:	2b00      	cmp	r3, #0
  4050f0:	f47f add5 	bne.w	404c9e <vTimerPeriodicISRTests+0x10a>
  4050f4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4050f8:	b672      	cpsid	i
  4050fa:	f383 8811 	msr	BASEPRI, r3
  4050fe:	f3bf 8f6f 	isb	sy
  405102:	f3bf 8f4f 	dsb	sy
  405106:	b662      	cpsie	i
  405108:	e7fe      	b.n	405108 <vTimerPeriodicISRTests+0x574>
		if( ucISRAutoReloadTimerCounter != 3 )
  40510a:	4b1a      	ldr	r3, [pc, #104]	; (405174 <vTimerPeriodicISRTests+0x5e0>)
  40510c:	781b      	ldrb	r3, [r3, #0]
  40510e:	2b03      	cmp	r3, #3
  405110:	d00f      	beq.n	405132 <vTimerPeriodicISRTests+0x59e>
			xTestStatus = pdFAIL;
  405112:	4b17      	ldr	r3, [pc, #92]	; (405170 <vTimerPeriodicISRTests+0x5dc>)
  405114:	2200      	movs	r2, #0
  405116:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  405118:	681b      	ldr	r3, [r3, #0]
  40511a:	b953      	cbnz	r3, 405132 <vTimerPeriodicISRTests+0x59e>
  40511c:	f04f 0380 	mov.w	r3, #128	; 0x80
  405120:	b672      	cpsid	i
  405122:	f383 8811 	msr	BASEPRI, r3
  405126:	f3bf 8f6f 	isb	sy
  40512a:	f3bf 8f4f 	dsb	sy
  40512e:	b662      	cpsie	i
  405130:	e7fe      	b.n	405130 <vTimerPeriodicISRTests+0x59c>
		if( ucISROneShotTimerCounter != 1 )
  405132:	4b0e      	ldr	r3, [pc, #56]	; (40516c <vTimerPeriodicISRTests+0x5d8>)
  405134:	781b      	ldrb	r3, [r3, #0]
  405136:	2b01      	cmp	r3, #1
  405138:	d00f      	beq.n	40515a <vTimerPeriodicISRTests+0x5c6>
			xTestStatus = pdFAIL;
  40513a:	4b0d      	ldr	r3, [pc, #52]	; (405170 <vTimerPeriodicISRTests+0x5dc>)
  40513c:	2200      	movs	r2, #0
  40513e:	601a      	str	r2, [r3, #0]
			configASSERT( xTestStatus );
  405140:	681b      	ldr	r3, [r3, #0]
  405142:	b953      	cbnz	r3, 40515a <vTimerPeriodicISRTests+0x5c6>
  405144:	f04f 0380 	mov.w	r3, #128	; 0x80
  405148:	b672      	cpsid	i
  40514a:	f383 8811 	msr	BASEPRI, r3
  40514e:	f3bf 8f6f 	isb	sy
  405152:	f3bf 8f4f 	dsb	sy
  405156:	b662      	cpsie	i
  405158:	e7fe      	b.n	405158 <vTimerPeriodicISRTests+0x5c4>
		xTimerStopFromISR( xISRAutoReloadTimer, NULL );
  40515a:	2300      	movs	r3, #0
  40515c:	4a06      	ldr	r2, [pc, #24]	; (405178 <vTimerPeriodicISRTests+0x5e4>)
  40515e:	2108      	movs	r1, #8
  405160:	4c06      	ldr	r4, [pc, #24]	; (40517c <vTimerPeriodicISRTests+0x5e8>)
  405162:	6810      	ldr	r0, [r2, #0]
  405164:	461a      	mov	r2, r3
  405166:	9300      	str	r3, [sp, #0]
  405168:	47a0      	blx	r4
  40516a:	e598      	b.n	404c9e <vTimerPeriodicISRTests+0x10a>
  40516c:	204296bd 	.word	0x204296bd
  405170:	2040003c 	.word	0x2040003c
  405174:	204296bc 	.word	0x204296bc
  405178:	204296c4 	.word	0x204296c4
  40517c:	00404875 	.word	0x00404875

00405180 <USART1_Handler>:
volatile float harm_volume = 1.0f; 
volatile float master_volume = 1.0f;
volatile uint32_t pitch_bend = NO_PITCH_BEND;
volatile bool autotune = true; 
void USART_SERIAL_ISR_HANDLER(void)
{
  405180:	b570      	push	{r4, r5, r6, lr}
	uint32_t dw_status = usart_get_status(USART_SERIAL);
  405182:	4b3f      	ldr	r3, [pc, #252]	; (405280 <USART1_Handler+0x100>)
{
  405184:	b082      	sub	sp, #8
	uint32_t dw_status = usart_get_status(USART_SERIAL);
  405186:	483f      	ldr	r0, [pc, #252]	; (405284 <USART1_Handler+0x104>)
  405188:	4798      	blx	r3
	if (dw_status & US_CSR_RXRDY) {
  40518a:	07c3      	lsls	r3, r0, #31
  40518c:	d401      	bmi.n	405192 <USART1_Handler+0x12>
			harmony_list_read = harmony_list_fill;		
			harmony_list_fill = temp; 
			harmony_idx = 0; 
		}
	}
}
  40518e:	b002      	add	sp, #8
  405190:	bd70      	pop	{r4, r5, r6, pc}
		usart_read(USART_SERIAL, &received_byte);
  405192:	4b3d      	ldr	r3, [pc, #244]	; (405288 <USART1_Handler+0x108>)
  405194:	a901      	add	r1, sp, #4
  405196:	483b      	ldr	r0, [pc, #236]	; (405284 <USART1_Handler+0x104>)
  405198:	4798      	blx	r3
		if (waiting_for_harm_volume)
  40519a:	4a3c      	ldr	r2, [pc, #240]	; (40528c <USART1_Handler+0x10c>)
  40519c:	7813      	ldrb	r3, [r2, #0]
  40519e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  4051a2:	b98b      	cbnz	r3, 4051c8 <USART1_Handler+0x48>
		else if (waiting_for_master_volume)
  4051a4:	493a      	ldr	r1, [pc, #232]	; (405290 <USART1_Handler+0x110>)
  4051a6:	780b      	ldrb	r3, [r1, #0]
  4051a8:	f003 04ff 	and.w	r4, r3, #255	; 0xff
  4051ac:	b1db      	cbz	r3, 4051e6 <USART1_Handler+0x66>
			master_volume = (float)received_byte / 127.0f;
  4051ae:	eddd 7a01 	vldr	s15, [sp, #4]
  4051b2:	ed9f 7a38 	vldr	s14, [pc, #224]	; 405294 <USART1_Handler+0x114>
  4051b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
  4051ba:	4b37      	ldr	r3, [pc, #220]	; (405298 <USART1_Handler+0x118>)
  4051bc:	ee67 7a87 	vmul.f32	s15, s15, s14
  4051c0:	edc3 7a00 	vstr	s15, [r3]
			waiting_for_master_volume = false;
  4051c4:	7008      	strb	r0, [r1, #0]
  4051c6:	e7e2      	b.n	40518e <USART1_Handler+0xe>
			harm_volume = (float)received_byte / 127.0f; 
  4051c8:	eddd 7a01 	vldr	s15, [sp, #4]
			waiting_for_harm_volume = false; 
  4051cc:	2300      	movs	r3, #0
			harm_volume = (float)received_byte / 127.0f; 
  4051ce:	ed9f 7a31 	vldr	s14, [pc, #196]	; 405294 <USART1_Handler+0x114>
  4051d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
  4051d6:	4931      	ldr	r1, [pc, #196]	; (40529c <USART1_Handler+0x11c>)
  4051d8:	ee67 7a87 	vmul.f32	s15, s15, s14
  4051dc:	edc1 7a00 	vstr	s15, [r1]
			waiting_for_harm_volume = false; 
  4051e0:	7013      	strb	r3, [r2, #0]
}
  4051e2:	b002      	add	sp, #8
  4051e4:	bd70      	pop	{r4, r5, r6, pc}
		else if (waiting_for_pitch_bend)
  4051e6:	4b2e      	ldr	r3, [pc, #184]	; (4052a0 <USART1_Handler+0x120>)
  4051e8:	7818      	ldrb	r0, [r3, #0]
  4051ea:	bb08      	cbnz	r0, 405230 <USART1_Handler+0xb0>
		else if (received_byte == 255) 
  4051ec:	9801      	ldr	r0, [sp, #4]
  4051ee:	28ff      	cmp	r0, #255	; 0xff
  4051f0:	d023      	beq.n	40523a <USART1_Handler+0xba>
		else if (received_byte == 254)
  4051f2:	28fe      	cmp	r0, #254	; 0xfe
  4051f4:	d037      	beq.n	405266 <USART1_Handler+0xe6>
		else if (received_byte == 253)
  4051f6:	28fd      	cmp	r0, #253	; 0xfd
  4051f8:	d038      	beq.n	40526c <USART1_Handler+0xec>
		else if (received_byte == 252)
  4051fa:	28fc      	cmp	r0, #252	; 0xfc
  4051fc:	d039      	beq.n	405272 <USART1_Handler+0xf2>
		else if (received_byte != 0 && harmony_idx < MAX_NUM_SHIFTS)
  4051fe:	4b29      	ldr	r3, [pc, #164]	; (4052a4 <USART1_Handler+0x124>)
  405200:	b1f0      	cbz	r0, 405240 <USART1_Handler+0xc0>
  405202:	681a      	ldr	r2, [r3, #0]
  405204:	2a0a      	cmp	r2, #10
  405206:	d81b      	bhi.n	405240 <USART1_Handler+0xc0>
			harmony_list_fill[harmony_idx].freq = midi_note_frequencies[received_byte]; 
  405208:	4c27      	ldr	r4, [pc, #156]	; (4052a8 <USART1_Handler+0x128>)
  40520a:	4928      	ldr	r1, [pc, #160]	; (4052ac <USART1_Handler+0x12c>)
  40520c:	681d      	ldr	r5, [r3, #0]
  40520e:	6822      	ldr	r2, [r4, #0]
  405210:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  405214:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
  405218:	6801      	ldr	r1, [r0, #0]
  40521a:	6011      	str	r1, [r2, #0]
			harmony_list_fill[harmony_idx].idx = received_byte; 
  40521c:	6818      	ldr	r0, [r3, #0]
  40521e:	6822      	ldr	r2, [r4, #0]
  405220:	9901      	ldr	r1, [sp, #4]
  405222:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
  405226:	6051      	str	r1, [r2, #4]
			harmony_idx++;
  405228:	681a      	ldr	r2, [r3, #0]
  40522a:	3201      	adds	r2, #1
  40522c:	601a      	str	r2, [r3, #0]
  40522e:	e7ae      	b.n	40518e <USART1_Handler+0xe>
			pitch_bend = received_byte;
  405230:	9901      	ldr	r1, [sp, #4]
  405232:	4a1f      	ldr	r2, [pc, #124]	; (4052b0 <USART1_Handler+0x130>)
  405234:	6011      	str	r1, [r2, #0]
			waiting_for_pitch_bend = false;
  405236:	701c      	strb	r4, [r3, #0]
  405238:	e7a9      	b.n	40518e <USART1_Handler+0xe>
			waiting_for_harm_volume = true; 
  40523a:	2301      	movs	r3, #1
  40523c:	7013      	strb	r3, [r2, #0]
  40523e:	e7a6      	b.n	40518e <USART1_Handler+0xe>
			harmony_list_fill[harmony_idx].freq = END_OF_SHIFTS; 
  405240:	4919      	ldr	r1, [pc, #100]	; (4052a8 <USART1_Handler+0x128>)
			harmony_list_fill[harmony_idx].idx = 0; // dont care 
  405242:	2000      	movs	r0, #0
			harmony_list_fill[harmony_idx].freq = END_OF_SHIFTS; 
  405244:	681e      	ldr	r6, [r3, #0]
  405246:	680a      	ldr	r2, [r1, #0]
  405248:	4d1a      	ldr	r5, [pc, #104]	; (4052b4 <USART1_Handler+0x134>)
  40524a:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
			harmony_t *temp = (harmony_t *)harmony_list_read; 
  40524e:	4c1a      	ldr	r4, [pc, #104]	; (4052b8 <USART1_Handler+0x138>)
			harmony_list_fill[harmony_idx].freq = END_OF_SHIFTS; 
  405250:	6015      	str	r5, [r2, #0]
			harmony_list_fill[harmony_idx].idx = 0; // dont care 
  405252:	680d      	ldr	r5, [r1, #0]
  405254:	681a      	ldr	r2, [r3, #0]
			harmony_t *temp = (harmony_t *)harmony_list_read; 
  405256:	6826      	ldr	r6, [r4, #0]
			harmony_list_fill[harmony_idx].idx = 0; // dont care 
  405258:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
			harmony_list_read = harmony_list_fill;		
  40525c:	6025      	str	r5, [r4, #0]
			harmony_list_fill = temp; 
  40525e:	600e      	str	r6, [r1, #0]
			harmony_list_fill[harmony_idx].idx = 0; // dont care 
  405260:	6050      	str	r0, [r2, #4]
			harmony_idx = 0; 
  405262:	6018      	str	r0, [r3, #0]
}
  405264:	e793      	b.n	40518e <USART1_Handler+0xe>
			waiting_for_master_volume = true;
  405266:	2301      	movs	r3, #1
  405268:	700b      	strb	r3, [r1, #0]
  40526a:	e790      	b.n	40518e <USART1_Handler+0xe>
			waiting_for_pitch_bend = true;
  40526c:	2201      	movs	r2, #1
  40526e:	701a      	strb	r2, [r3, #0]
  405270:	e78d      	b.n	40518e <USART1_Handler+0xe>
			autotune = !autotune; 
  405272:	4a12      	ldr	r2, [pc, #72]	; (4052bc <USART1_Handler+0x13c>)
  405274:	7813      	ldrb	r3, [r2, #0]
  405276:	f083 0301 	eor.w	r3, r3, #1
  40527a:	7013      	strb	r3, [r2, #0]
  40527c:	e787      	b.n	40518e <USART1_Handler+0xe>
  40527e:	bf00      	nop
  405280:	00402555 	.word	0x00402555
  405284:	40028000 	.word	0x40028000
  405288:	00402559 	.word	0x00402559
  40528c:	2043c800 	.word	0x2043c800
  405290:	2043c801 	.word	0x2043c801
  405294:	3c010204 	.word	0x3c010204
  405298:	20400050 	.word	0x20400050
  40529c:	20400044 	.word	0x20400044
  4052a0:	2043c802 	.word	0x2043c802
  4052a4:	204296cc 	.word	0x204296cc
  4052a8:	20400048 	.word	0x20400048
  4052ac:	0040947c 	.word	0x0040947c
  4052b0:	20400054 	.word	0x20400054
  4052b4:	bf800000 	.word	0xbf800000
  4052b8:	2040004c 	.word	0x2040004c
  4052bc:	20400040 	.word	0x20400040

004052c0 <main>:
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
	}
}

int main(void)
{
  4052c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sysclk_init();
  4052c4:	4ba1      	ldr	r3, [pc, #644]	; (40554c <main+0x28c>)
{
  4052c6:	ed2d 8b06 	vpush	{d8-d10}
  4052ca:	b093      	sub	sp, #76	; 0x4c
	sysclk_init();
  4052cc:	4798      	blx	r3
	board_init();
  4052ce:	4ba0      	ldr	r3, [pc, #640]	; (405550 <main+0x290>)
  4052d0:	4798      	blx	r3
  __ASM volatile ("dsb");
  4052d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4052d6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_DisableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->CCR &= ~SCB_CCR_IC_Msk;            // disable I-Cache
  4052da:	4d9e      	ldr	r5, [pc, #632]	; (405554 <main+0x294>)
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4052dc:	2400      	movs	r4, #0
    SCB->CCR &= ~SCB_CCR_IC_Msk;            // disable I-Cache
  4052de:	696b      	ldr	r3, [r5, #20]
  4052e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  4052e4:	616b      	str	r3, [r5, #20]
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4052e6:	f8c5 4250 	str.w	r4, [r5, #592]	; 0x250
  __ASM volatile ("dsb");
  4052ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4052ee:	f3bf 8f6f 	isb	sy
	SCB_DisableICache(); 
	lcd_init(); 
  4052f2:	4b99      	ldr	r3, [pc, #612]	; (405558 <main+0x298>)
  4052f4:	4798      	blx	r3
  __ASM volatile ("dsb");
  4052f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4052fa:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4052fe:	f8c5 4250 	str.w	r4, [r5, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  405302:	696b      	ldr	r3, [r5, #20]
  405304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  405308:	616b      	str	r3, [r5, #20]
  __ASM volatile ("dsb");
  40530a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40530e:	f3bf 8f6f 	isb	sy
	SCB_EnableICache();
	audio_init();
  405312:	4b92      	ldr	r3, [pc, #584]	; (40555c <main+0x29c>)
  405314:	4798      	blx	r3
	//configure_console();
	PSOLA_init(); 
  405316:	4b92      	ldr	r3, [pc, #584]	; (405560 <main+0x2a0>)
  405318:	4798      	blx	r3
  __ASM volatile ("dsb");
  40531a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40531e:	f3bf 8f6f 	isb	sy
    SCB->CCR &= ~SCB_CCR_IC_Msk;            // disable I-Cache
  405322:	696b      	ldr	r3, [r5, #20]
  405324:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  405328:	616b      	str	r3, [r5, #20]
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  40532a:	f8c5 4250 	str.w	r4, [r5, #592]	; 0x250
  __ASM volatile ("dsb");
  40532e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  405332:	f3bf 8f6f 	isb	sy
	 
	SCB_DisableICache(); 
	gfx_draw_filled_rect(100, 100, 20, 20, GFX_COLOR_YELLOW);
  405336:	f64f 77e0 	movw	r7, #65504	; 0xffe0
  40533a:	2314      	movs	r3, #20
  40533c:	2164      	movs	r1, #100	; 0x64
  40533e:	4e89      	ldr	r6, [pc, #548]	; (405564 <main+0x2a4>)
  405340:	461a      	mov	r2, r3
  405342:	9700      	str	r7, [sp, #0]
  405344:	4608      	mov	r0, r1
  405346:	47b0      	blx	r6
	gfx_draw_filled_rect(200, 100, 20, 20, GFX_COLOR_YELLOW);
  405348:	2314      	movs	r3, #20
  40534a:	9700      	str	r7, [sp, #0]
  40534c:	2164      	movs	r1, #100	; 0x64
  40534e:	461a      	mov	r2, r3
  405350:	20c8      	movs	r0, #200	; 0xc8
  405352:	47b0      	blx	r6
	gfx_draw_filled_rect(80, 180, 20, 20, GFX_COLOR_YELLOW);
  405354:	2314      	movs	r3, #20
  405356:	9700      	str	r7, [sp, #0]
  405358:	21b4      	movs	r1, #180	; 0xb4
  40535a:	461a      	mov	r2, r3
  40535c:	2050      	movs	r0, #80	; 0x50
  40535e:	47b0      	blx	r6
	gfx_draw_filled_rect(100, 200, 20, 20, GFX_COLOR_YELLOW);
  405360:	2314      	movs	r3, #20
  405362:	9700      	str	r7, [sp, #0]
  405364:	21c8      	movs	r1, #200	; 0xc8
  405366:	461a      	mov	r2, r3
  405368:	2064      	movs	r0, #100	; 0x64
  40536a:	47b0      	blx	r6
	gfx_draw_filled_rect(120, 220, 20, 20, GFX_COLOR_YELLOW);
  40536c:	2314      	movs	r3, #20
  40536e:	9700      	str	r7, [sp, #0]
  405370:	21dc      	movs	r1, #220	; 0xdc
  405372:	461a      	mov	r2, r3
  405374:	2078      	movs	r0, #120	; 0x78
  405376:	47b0      	blx	r6
	gfx_draw_filled_rect(140, 220, 20, 20, GFX_COLOR_YELLOW);
  405378:	2314      	movs	r3, #20
  40537a:	9700      	str	r7, [sp, #0]
  40537c:	21dc      	movs	r1, #220	; 0xdc
  40537e:	461a      	mov	r2, r3
  405380:	208c      	movs	r0, #140	; 0x8c
  405382:	47b0      	blx	r6
	gfx_draw_filled_rect(160, 220, 20, 20, GFX_COLOR_YELLOW);
  405384:	2314      	movs	r3, #20
  405386:	9700      	str	r7, [sp, #0]
  405388:	21dc      	movs	r1, #220	; 0xdc
  40538a:	461a      	mov	r2, r3
  40538c:	20a0      	movs	r0, #160	; 0xa0
  40538e:	47b0      	blx	r6
	gfx_draw_filled_rect(180, 220, 20, 20, GFX_COLOR_YELLOW);
  405390:	2314      	movs	r3, #20
  405392:	9700      	str	r7, [sp, #0]
  405394:	21dc      	movs	r1, #220	; 0xdc
  405396:	461a      	mov	r2, r3
  405398:	20b4      	movs	r0, #180	; 0xb4
  40539a:	47b0      	blx	r6
	gfx_draw_filled_rect(200, 200, 20, 20, GFX_COLOR_YELLOW);
  40539c:	2314      	movs	r3, #20
  40539e:	21c8      	movs	r1, #200	; 0xc8
  4053a0:	9700      	str	r7, [sp, #0]
  4053a2:	461a      	mov	r2, r3
  4053a4:	4608      	mov	r0, r1
  4053a6:	47b0      	blx	r6
	gfx_draw_filled_rect(220, 180, 20, 20, GFX_COLOR_YELLOW);
  4053a8:	2314      	movs	r3, #20
  4053aa:	9700      	str	r7, [sp, #0]
  4053ac:	21b4      	movs	r1, #180	; 0xb4
  4053ae:	461a      	mov	r2, r3
  4053b0:	20dc      	movs	r0, #220	; 0xdc
  4053b2:	47b0      	blx	r6
  __ASM volatile ("dsb");
  4053b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4053b8:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4053bc:	f8c5 4250 	str.w	r4, [r5, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4053c0:	696b      	ldr	r3, [r5, #20]
  4053c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  4053c6:	616b      	str	r3, [r5, #20]
  __ASM volatile ("dsb");
  4053c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4053cc:	f3bf 8f6f 	isb	sy
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
	usart_settings.char_length = opt->charlength;
  4053d0:	21c0      	movs	r1, #192	; 0xc0
	usart_settings.parity_type = opt->paritytype;
  4053d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
	usart_settings.baudrate = opt->baudrate;
  4053d6:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
  4053da:	4b63      	ldr	r3, [pc, #396]	; (405568 <main+0x2a8>)
  4053dc:	200e      	movs	r0, #14
	usart_settings.char_length = opt->charlength;
  4053de:	9107      	str	r1, [sp, #28]
	usart_settings.baudrate = opt->baudrate;
  4053e0:	9506      	str	r5, [sp, #24]
	}
	
	float oneOverInputPitch = 1.0f;
	float pitch_shift, power;
	float harmony_shifts[MAX_NUM_SHIFTS+1];
	harmony_shifts[0] = NO_SHIFT;
  4053e2:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
	usart_settings.parity_type = opt->paritytype;
  4053e6:	9208      	str	r2, [sp, #32]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4053e8:	f44f 4780 	mov.w	r7, #16384	; 0x4000
	usart_settings.stop_bits= opt->stopbits;
  4053ec:	9409      	str	r4, [sp, #36]	; 0x24
  4053ee:	f06f 0901 	mvn.w	r9, #1
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4053f2:	940a      	str	r4, [sp, #40]	; 0x28
	float oneOverInputPitch = 1.0f;
  4053f4:	eeb0 8a69 	vmov.f32	s16, s19
	harmony_shifts[1] = END_OF_SHIFTS; 
	harmony_shifts[MAX_NUM_SHIFTS] = END_OF_SHIFTS; // should never change 
	arm_fill_f32(0.0f, prev_input, WIN_SIZE); 
  4053f8:	9403      	str	r4, [sp, #12]
  4053fa:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4053fc:	4a5b      	ldr	r2, [pc, #364]	; (40556c <main+0x2ac>)
  4053fe:	a906      	add	r1, sp, #24
  405400:	4b5b      	ldr	r3, [pc, #364]	; (405570 <main+0x2b0>)
  405402:	485c      	ldr	r0, [pc, #368]	; (405574 <main+0x2b4>)
  405404:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  405406:	4e5c      	ldr	r6, [pc, #368]	; (405578 <main+0x2b8>)
  405408:	485a      	ldr	r0, [pc, #360]	; (405574 <main+0x2b4>)
  40540a:	47b0      	blx	r6
		usart_enable_rx(p_usart);
  40540c:	4d5b      	ldr	r5, [pc, #364]	; (40557c <main+0x2bc>)
  40540e:	4859      	ldr	r0, [pc, #356]	; (405574 <main+0x2b4>)
  405410:	47a8      	blx	r5
	usart_enable_tx(USART_SERIAL);
  405412:	4858      	ldr	r0, [pc, #352]	; (405574 <main+0x2b4>)
  405414:	47b0      	blx	r6
  405416:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 4055b8 <main+0x2f8>
	usart_enable_rx(USART_SERIAL);
  40541a:	4856      	ldr	r0, [pc, #344]	; (405574 <main+0x2b4>)
  40541c:	47a8      	blx	r5
	usart_enable_interrupt(USART_SERIAL, US_IER_RXRDY); 
  40541e:	2101      	movs	r1, #1
  405420:	4854      	ldr	r0, [pc, #336]	; (405574 <main+0x2b4>)
				harmony_shifts[1] = END_OF_SHIFTS; 	
				num_of_shifts = 1; 
			}
			
			// return pitch shifted data from previous samples block  
			create_harmonies((float  *)processBuffer, mixed_buffer, inputPitch, harmony_shifts, (float)harm_volume); 
  405422:	f5aa 6800 	sub.w	r8, sl, #2048	; 0x800
	usart_enable_interrupt(USART_SERIAL, US_IER_RXRDY); 
  405426:	4b56      	ldr	r3, [pc, #344]	; (405580 <main+0x2c0>)
  405428:	4798      	blx	r3
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  40542a:	4d56      	ldr	r5, [pc, #344]	; (405584 <main+0x2c4>)
  40542c:	2300      	movs	r3, #0
  40542e:	f8df e18c 	ldr.w	lr, [pc, #396]	; 4055bc <main+0x2fc>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  405432:	4e55      	ldr	r6, [pc, #340]	; (405588 <main+0x2c8>)
  405434:	f04f 0c40 	mov.w	ip, #64	; 0x40
	harmony_shifts[1] = END_OF_SHIFTS; 
  405438:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  40543c:	eba9 0908 	sub.w	r9, r9, r8
  405440:	f886 c30e 	strb.w	ip, [r6, #782]	; 0x30e
	arm_fill_f32(0.0f, prev_input, WIN_SIZE); 
  405444:	4618      	mov	r0, r3
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  405446:	f8c6 7180 	str.w	r7, [r6, #384]	; 0x180
  40544a:	f44f 7200 	mov.w	r2, #512	; 0x200
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40544e:	6037      	str	r7, [r6, #0]
  405450:	f8df b16c 	ldr.w	fp, [pc, #364]	; 4055c0 <main+0x300>
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  405454:	f8ce 3000 	str.w	r3, [lr]
  405458:	4f4c      	ldr	r7, [pc, #304]	; (40558c <main+0x2cc>)
  40545a:	602b      	str	r3, [r5, #0]
			inputPitch = computeWaveletPitch((float  *)processBuffer);
  40545c:	eddf 8a4c 	vldr	s17, [pc, #304]	; 405590 <main+0x2d0>
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  405460:	f8ce 4004 	str.w	r4, [lr, #4]
						if (pitch_shift > 0.1f && pitch_shift < 6.0f) // range check 
  405464:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 405594 <main+0x2d4>
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  405468:	606c      	str	r4, [r5, #4]
  40546a:	4e4b      	ldr	r6, [pc, #300]	; (405598 <main+0x2d8>)
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  40546c:	f8ce 3008 	str.w	r3, [lr, #8]
  405470:	60ab      	str	r3, [r5, #8]
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  405472:	f8ce 400c 	str.w	r4, [lr, #12]
  405476:	60ec      	str	r4, [r5, #12]
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  405478:	f8ce 3010 	str.w	r3, [lr, #16]
  40547c:	612b      	str	r3, [r5, #16]
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  40547e:	f8ce 4014 	str.w	r4, [lr, #20]
  405482:	616c      	str	r4, [r5, #20]
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  405484:	f8ce 3018 	str.w	r3, [lr, #24]
  405488:	61ab      	str	r3, [r5, #24]
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  40548a:	f8ce 401c 	str.w	r4, [lr, #28]
  40548e:	61ec      	str	r4, [r5, #28]
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  405490:	f8ce 3020 	str.w	r3, [lr, #32]
  405494:	622b      	str	r3, [r5, #32]
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  405496:	f8ce 4024 	str.w	r4, [lr, #36]	; 0x24
  40549a:	626c      	str	r4, [r5, #36]	; 0x24
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  40549c:	f8ce 3028 	str.w	r3, [lr, #40]	; 0x28
  4054a0:	62ab      	str	r3, [r5, #40]	; 0x28
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  4054a2:	f8ce 402c 	str.w	r4, [lr, #44]	; 0x2c
  4054a6:	62ec      	str	r4, [r5, #44]	; 0x2c
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  4054a8:	f8ce 3030 	str.w	r3, [lr, #48]	; 0x30
  4054ac:	632b      	str	r3, [r5, #48]	; 0x30
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  4054ae:	f8ce 4034 	str.w	r4, [lr, #52]	; 0x34
  4054b2:	636c      	str	r4, [r5, #52]	; 0x34
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  4054b4:	f8ce 3038 	str.w	r3, [lr, #56]	; 0x38
  4054b8:	63ab      	str	r3, [r5, #56]	; 0x38
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  4054ba:	f8ce 403c 	str.w	r4, [lr, #60]	; 0x3c
  4054be:	63ec      	str	r4, [r5, #60]	; 0x3c
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  4054c0:	f8ce 3040 	str.w	r3, [lr, #64]	; 0x40
  4054c4:	642b      	str	r3, [r5, #64]	; 0x40
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  4054c6:	f8ce 4044 	str.w	r4, [lr, #68]	; 0x44
  4054ca:	646c      	str	r4, [r5, #68]	; 0x44
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  4054cc:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
  4054d0:	64ab      	str	r3, [r5, #72]	; 0x48
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  4054d2:	f8ce 404c 	str.w	r4, [lr, #76]	; 0x4c
  4054d6:	64ec      	str	r4, [r5, #76]	; 0x4c
		harmony_list_a[i].freq = 0.0f; harmony_list_b[i].freq = 0.0f; 
  4054d8:	f8ce 3050 	str.w	r3, [lr, #80]	; 0x50
  4054dc:	652b      	str	r3, [r5, #80]	; 0x50
		harmony_list_a[i].idx = 0.0f; harmony_list_b[i].idx = 0.0f; 
  4054de:	f8ce 4054 	str.w	r4, [lr, #84]	; 0x54
  4054e2:	656c      	str	r4, [r5, #84]	; 0x54
  4054e4:	4d2d      	ldr	r5, [pc, #180]	; (40559c <main+0x2dc>)
	arm_fill_f32(0.0f, prev_input, WIN_SIZE); 
  4054e6:	492e      	ldr	r1, [pc, #184]	; (4055a0 <main+0x2e0>)
  4054e8:	4b2e      	ldr	r3, [pc, #184]	; (4055a4 <main+0x2e4>)
	harmony_shifts[0] = NO_SHIFT;
  4054ea:	edcd 9a06 	vstr	s19, [sp, #24]
	harmony_shifts[1] = END_OF_SHIFTS; 
  4054ee:	edcd 7a07 	vstr	s15, [sp, #28]
	harmony_shifts[MAX_NUM_SHIFTS] = END_OF_SHIFTS; // should never change 
  4054f2:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
	arm_fill_f32(0.0f, prev_input, WIN_SIZE); 
  4054f6:	4798      	blx	r3
		if (dataReceived)
  4054f8:	4b2b      	ldr	r3, [pc, #172]	; (4055a8 <main+0x2e8>)
  4054fa:	781b      	ldrb	r3, [r3, #0]
  4054fc:	2b00      	cmp	r3, #0
  4054fe:	d0fb      	beq.n	4054f8 <main+0x238>
			inputPitch = computeWaveletPitch((float  *)processBuffer);
  405500:	4a2a      	ldr	r2, [pc, #168]	; (4055ac <main+0x2ec>)
			dataReceived = false; 
  405502:	2300      	movs	r3, #0
			inputPitch = computeWaveletPitch((float  *)processBuffer);
  405504:	eef0 9a68 	vmov.f32	s19, s17
  405508:	6810      	ldr	r0, [r2, #0]
			dataReceived = false; 
  40550a:	4a27      	ldr	r2, [pc, #156]	; (4055a8 <main+0x2e8>)
  40550c:	7013      	strb	r3, [r2, #0]
			inputPitch = computeWaveletPitch((float  *)processBuffer);
  40550e:	4b28      	ldr	r3, [pc, #160]	; (4055b0 <main+0x2f0>)
  405510:	4798      	blx	r3
  405512:	eddf 7a28 	vldr	s15, [pc, #160]	; 4055b4 <main+0x2f4>
  405516:	ee0a 0a10 	vmov	s20, r0
	uint32_t hi = 127;
  40551a:	217f      	movs	r1, #127	; 0x7f
	uint32_t lo = 12; // lowest at C0
  40551c:	200c      	movs	r0, #12
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  40551e:	ee77 7aca 	vsub.f32	s15, s15, s20
		mid = (hi + lo) >> 1;
  405522:	1843      	adds	r3, r0, r1
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  405524:	ee39 7aca 	vsub.f32	s14, s19, s20
		mid = (hi + lo) >> 1;
  405528:	085b      	lsrs	r3, r3, #1
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  40552a:	eef0 7ae7 	vabs.f32	s15, s15
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  40552e:	eeb0 7ac7 	vabs.f32	s14, s14
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  405532:	1c5a      	adds	r2, r3, #1
  405534:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  405538:	eebc 7ac7 	vcvt.u32.f32	s14, s14
		if (d2 <= d1)
  40553c:	ee17 ea90 	vmov	lr, s15
  405540:	ee17 4a10 	vmov	r4, s14
  405544:	4574      	cmp	r4, lr
  405546:	d25a      	bcs.n	4055fe <main+0x33e>
  405548:	e14f      	b.n	4057ea <main+0x52a>
  40554a:	bf00      	nop
  40554c:	004025ad 	.word	0x004025ad
  405550:	0040261d 	.word	0x0040261d
  405554:	e000ed00 	.word	0xe000ed00
  405558:	00400f59 	.word	0x00400f59
  40555c:	00400379 	.word	0x00400379
  405560:	00401119 	.word	0x00401119
  405564:	00400d81 	.word	0x00400d81
  405568:	00403101 	.word	0x00403101
  40556c:	08f0d180 	.word	0x08f0d180
  405570:	004024a1 	.word	0x004024a1
  405574:	40028000 	.word	0x40028000
  405578:	00402541 	.word	0x00402541
  40557c:	00402549 	.word	0x00402549
  405580:	00402551 	.word	0x00402551
  405584:	2043fc1c 	.word	0x2043fc1c
  405588:	e000e100 	.word	0xe000e100
  40558c:	2042a000 	.word	0x2042a000
  405590:	43dc0000 	.word	0x43dc0000
  405594:	bf666666 	.word	0xbf666666
  405598:	20434000 	.word	0x20434000
  40559c:	20400014 	.word	0x20400014
  4055a0:	2043c000 	.word	0x2043c000
  4055a4:	00405a11 	.word	0x00405a11
  4055a8:	2040201c 	.word	0x2040201c
  4055ac:	2040001c 	.word	0x2040001c
  4055b0:	004005e5 	.word	0x004005e5
  4055b4:	43e914fe 	.word	0x43e914fe
  4055b8:	20432800 	.word	0x20432800
  4055bc:	2043fc7c 	.word	0x2043fc7c
  4055c0:	0040947c 	.word	0x0040947c
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  4055c4:	1c5c      	adds	r4, r3, #1
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  4055c6:	eb0b 0083 	add.w	r0, fp, r3, lsl #2
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  4055ca:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  4055ce:	edd0 9a00 	vldr	s19, [r0]
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  4055d2:	edde 7a00 	vldr	s15, [lr]
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  4055d6:	ee39 7aca 	vsub.f32	s14, s19, s20
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  4055da:	ee77 7aca 	vsub.f32	s15, s15, s20
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  4055de:	eeb0 7ac7 	vabs.f32	s14, s14
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  4055e2:	eef0 7ae7 	vabs.f32	s15, s15
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  4055e6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  4055ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		if (d2 <= d1)
  4055ee:	ee17 0a10 	vmov	r0, s14
  4055f2:	ee17 ea90 	vmov	lr, s15
  4055f6:	4570      	cmp	r0, lr
  4055f8:	f0c0 80f8 	bcc.w	4057ec <main+0x52c>
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  4055fc:	4622      	mov	r2, r4
		mid = (hi + lo) >> 1;
  4055fe:	1853      	adds	r3, r2, r1
	while (lo < hi)
  405600:	428a      	cmp	r2, r1
		mid = (hi + lo) >> 1;
  405602:	ea4f 0353 	mov.w	r3, r3, lsr #1
	while (lo < hi)
  405606:	d3dd      	bcc.n	4055c4 <main+0x304>
  405608:	eb0b 0381 	add.w	r3, fp, r1, lsl #2
  40560c:	edd3 9a00 	vldr	s19, [r3]
			if (pitch_bend != 64)
  405610:	4bc5      	ldr	r3, [pc, #788]	; (405928 <main+0x668>)
  405612:	681b      	ldr	r3, [r3, #0]
  405614:	2b40      	cmp	r3, #64	; 0x40
  405616:	f000 8180 	beq.w	40591a <main+0x65a>
				bend_pitch(&desired_pitch, in_pitch_idx, (uint32_t)pitch_bend);
  40561a:	4bc3      	ldr	r3, [pc, #780]	; (405928 <main+0x668>)
  40561c:	681b      	ldr	r3, [r3, #0]
	temp_pitch_idx = pitch_idx; 
  40561e:	4bc3      	ldr	r3, [pc, #780]	; (40592c <main+0x66c>)
  405620:	6019      	str	r1, [r3, #0]
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  405622:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
	temp_pitch = *pitch; 
  405626:	4bc2      	ldr	r3, [pc, #776]	; (405930 <main+0x670>)
  405628:	edc3 9a00 	vstr	s19, [r3]
	if (pitch_bend > 64)
  40562c:	4bbe      	ldr	r3, [pc, #760]	; (405928 <main+0x668>)
  40562e:	681b      	ldr	r3, [r3, #0]
  405630:	2b40      	cmp	r3, #64	; 0x40
  405632:	f200 81af 	bhi.w	405994 <main+0x6d4>
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  405636:	ed51 7a02 	vldr	s15, [r1, #-8]
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  40563a:	ed9f 7abe 	vldr	s14, [pc, #760]	; 405934 <main+0x674>
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  40563e:	ee79 7ae7 	vsub.f32	s15, s19, s15
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  405642:	eddf 6abd 	vldr	s13, [pc, #756]	; 405938 <main+0x678>
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  405646:	4bbd      	ldr	r3, [pc, #756]	; (40593c <main+0x67c>)
  405648:	edc3 7a00 	vstr	s15, [r3]
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  40564c:	4bb6      	ldr	r3, [pc, #728]	; (405928 <main+0x668>)
  40564e:	edd3 7a00 	vldr	s15, [r3]
  405652:	4bba      	ldr	r3, [pc, #744]	; (40593c <main+0x67c>)
  405654:	eef8 7a67 	vcvt.f32.u32	s15, s15
  405658:	ed93 6a00 	vldr	s12, [r3]
  40565c:	ee77 7ac7 	vsub.f32	s15, s15, s14
  405660:	ee66 6a26 	vmul.f32	s13, s12, s13
  405664:	eeb0 7a69 	vmov.f32	s14, s19
  405668:	eea6 7aa7 	vfma.f32	s14, s13, s15
  40566c:	eef0 7a47 	vmov.f32	s15, s14
			if (autotune)
  405670:	4bb3      	ldr	r3, [pc, #716]	; (405940 <main+0x680>)
  405672:	781b      	ldrb	r3, [r3, #0]
  405674:	2b00      	cmp	r3, #0
  405676:	f000 814d 	beq.w	405914 <main+0x654>
				pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  40567a:	ee37 7aca 	vsub.f32	s14, s15, s20
  40567e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  405682:	eee7 7a08 	vfma.f32	s15, s14, s16
			arm_power_f32((float  *)processBuffer, WIN_SIZE>>2, &power);
  405686:	4baf      	ldr	r3, [pc, #700]	; (405944 <main+0x684>)
  405688:	aa05      	add	r2, sp, #20
  40568a:	2180      	movs	r1, #128	; 0x80
  40568c:	edcd 7a06 	vstr	s15, [sp, #24]
  405690:	6818      	ldr	r0, [r3, #0]
  405692:	4bad      	ldr	r3, [pc, #692]	; (405948 <main+0x688>)
  405694:	4798      	blx	r3
			if (inputPitch > MINIMUM_PITCH && power > POWER_THRESHOLD)
  405696:	eddf 7aad 	vldr	s15, [pc, #692]	; 40594c <main+0x68c>
  40569a:	eeb4 aae7 	vcmpe.f32	s20, s15
  40569e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4056a2:	f340 80b1 	ble.w	405808 <main+0x548>
  4056a6:	eddf 7aaa 	vldr	s15, [pc, #680]	; 405950 <main+0x690>
  4056aa:	ed9d 7a05 	vldr	s14, [sp, #20]
  4056ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
  4056b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4056b6:	f340 80a7 	ble.w	405808 <main+0x548>
				while(harmony_list_read[i].freq > 1.0f && i < MAX_NUM_SHIFTS-1)
  4056ba:	4ba6      	ldr	r3, [pc, #664]	; (405954 <main+0x694>)
				oneOverInputPitch = 1.0f / inputPitch;
  4056bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
				while(harmony_list_read[i].freq > 1.0f && i < MAX_NUM_SHIFTS-1)
  4056c0:	681b      	ldr	r3, [r3, #0]
				oneOverInputPitch = 1.0f / inputPitch;
  4056c2:	ee87 8a0a 	vdiv.f32	s16, s14, s20
				while(harmony_list_read[i].freq > 1.0f && i < MAX_NUM_SHIFTS-1)
  4056c6:	edd3 7a00 	vldr	s15, [r3]
  4056ca:	eef4 7ac7 	vcmpe.f32	s15, s14
  4056ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4056d2:	f340 8173 	ble.w	4059bc <main+0x6fc>
  4056d6:	2201      	movs	r2, #1
						if (pitch_shift > 0.1f && pitch_shift < 6.0f) // range check 
  4056d8:	eef1 5a04 	vmov.f32	s11, #20	; 0x40a00000  5.0
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  4056dc:	ed9f 5a96 	vldr	s10, [pc, #600]	; 405938 <main+0x678>
				while(harmony_list_read[i].freq > 1.0f && i < MAX_NUM_SHIFTS-1)
  4056e0:	4614      	mov	r4, r2
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  4056e2:	eddf 4a94 	vldr	s9, [pc, #592]	; 405934 <main+0x674>
				while(harmony_list_read[i].freq > 1.0f && i < MAX_NUM_SHIFTS-1)
  4056e6:	2200      	movs	r2, #0
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  4056e8:	ed9f 4aa8 	vldr	s8, [pc, #672]	; 40598c <main+0x6cc>
  4056ec:	e039      	b.n	405762 <main+0x4a2>
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  4056ee:	ed90 6a00 	vldr	s12, [r0]
  4056f2:	ed50 6a02 	vldr	s13, [r0, #-8]
  4056f6:	4991      	ldr	r1, [pc, #580]	; (40593c <main+0x67c>)
  4056f8:	ee76 6a66 	vsub.f32	s13, s12, s13
  4056fc:	edc1 6a00 	vstr	s13, [r1]
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  405700:	4989      	ldr	r1, [pc, #548]	; (405928 <main+0x668>)
  405702:	edd1 6a00 	vldr	s13, [r1]
  405706:	498d      	ldr	r1, [pc, #564]	; (40593c <main+0x67c>)
  405708:	eef8 6a66 	vcvt.f32.u32	s13, s13
  40570c:	ed91 6a00 	vldr	s12, [r1]
  405710:	ee76 6ae4 	vsub.f32	s13, s13, s9
  405714:	ee26 6a05 	vmul.f32	s12, s12, s10
  405718:	eee6 7a26 	vfma.f32	s15, s12, s13
						pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  40571c:	ee77 7aca 	vsub.f32	s15, s15, s20
  405720:	ee67 7a88 	vmul.f32	s15, s15, s16
						if (pitch_shift > 0.1f && pitch_shift < 6.0f) // range check 
  405724:	eef4 7a49 	vcmp.f32	s15, s18
  405728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40572c:	dd0c      	ble.n	405748 <main+0x488>
  40572e:	eef4 7a65 	vcmp.f32	s15, s11
  405732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405736:	d507      	bpl.n	405748 <main+0x488>
							harmony_shifts[num_of_shifts++] = pitch_shift;
  405738:	a912      	add	r1, sp, #72	; 0x48
						pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  40573a:	ee77 7a87 	vadd.f32	s15, s15, s14
							harmony_shifts[num_of_shifts++] = pitch_shift;
  40573e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
  405742:	3401      	adds	r4, #1
  405744:	ed41 7a0c 	vstr	s15, [r1, #-48]	; 0xffffffd0
					i++; 
  405748:	3201      	adds	r2, #1
				while(harmony_list_read[i].freq > 1.0f && i < MAX_NUM_SHIFTS-1)
  40574a:	3308      	adds	r3, #8
  40574c:	edd3 7a00 	vldr	s15, [r3]
  405750:	2a0a      	cmp	r2, #10
  405752:	f000 8128 	beq.w	4059a6 <main+0x6e6>
  405756:	eef4 7ac7 	vcmpe.f32	s15, s14
  40575a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40575e:	f340 8122 	ble.w	4059a6 <main+0x6e6>
					if (Abs(harmony_list_read[i].freq - closest_note) > 1.0f) // don't harmonies input pitch twice 
  405762:	edd3 7a00 	vldr	s15, [r3]
  405766:	ee77 7ae9 	vsub.f32	s15, s15, s19
  40576a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  40576e:	edd3 7a00 	vldr	s15, [r3]
  405772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405776:	bf4c      	ite	mi
  405778:	ee79 7ae7 	vsubmi.f32	s15, s19, s15
  40577c:	ee77 7ae9 	vsubpl.f32	s15, s15, s19
  405780:	eef4 7ac7 	vcmpe.f32	s15, s14
  405784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405788:	bfcc      	ite	gt
  40578a:	2101      	movgt	r1, #1
  40578c:	2100      	movle	r1, #0
  40578e:	2900      	cmp	r1, #0
  405790:	d0da      	beq.n	405748 <main+0x488>
						if (pitch_bend != 64)
  405792:	4965      	ldr	r1, [pc, #404]	; (405928 <main+0x668>)
						desired_pitch = harmony_list_read[i].freq; 
  405794:	edd3 7a00 	vldr	s15, [r3]
						if (pitch_bend != 64)
  405798:	6809      	ldr	r1, [r1, #0]
  40579a:	2940      	cmp	r1, #64	; 0x40
  40579c:	d0be      	beq.n	40571c <main+0x45c>
							bend_pitch(&desired_pitch, harmony_list_read[i].idx, pitch_bend);
  40579e:	4862      	ldr	r0, [pc, #392]	; (405928 <main+0x668>)
  4057a0:	6859      	ldr	r1, [r3, #4]
  4057a2:	6800      	ldr	r0, [r0, #0]
	temp_pitch_idx = pitch_idx; 
  4057a4:	4861      	ldr	r0, [pc, #388]	; (40592c <main+0x66c>)
  4057a6:	6001      	str	r1, [r0, #0]
	temp_pitch = *pitch; 
  4057a8:	4861      	ldr	r0, [pc, #388]	; (405930 <main+0x670>)
  4057aa:	edc0 7a00 	vstr	s15, [r0]
	if (pitch_bend > 64)
  4057ae:	485e      	ldr	r0, [pc, #376]	; (405928 <main+0x668>)
  4057b0:	6800      	ldr	r0, [r0, #0]
  4057b2:	2840      	cmp	r0, #64	; 0x40
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  4057b4:	eb0b 0081 	add.w	r0, fp, r1, lsl #2
	if (pitch_bend > 64)
  4057b8:	d999      	bls.n	4056ee <main+0x42e>
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  4057ba:	ed90 6a02 	vldr	s12, [r0, #8]
  4057be:	edd0 6a00 	vldr	s13, [r0]
  4057c2:	495e      	ldr	r1, [pc, #376]	; (40593c <main+0x67c>)
  4057c4:	ee76 6a66 	vsub.f32	s13, s12, s13
  4057c8:	edc1 6a00 	vstr	s13, [r1]
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  4057cc:	4956      	ldr	r1, [pc, #344]	; (405928 <main+0x668>)
  4057ce:	edd1 6a00 	vldr	s13, [r1]
  4057d2:	495a      	ldr	r1, [pc, #360]	; (40593c <main+0x67c>)
  4057d4:	eef8 6a66 	vcvt.f32.u32	s13, s13
  4057d8:	ed91 6a00 	vldr	s12, [r1]
  4057dc:	ee76 6ac4 	vsub.f32	s13, s13, s8
  4057e0:	ee26 6a05 	vmul.f32	s12, s12, s10
  4057e4:	eee6 7a26 	vfma.f32	s15, s12, s13
  4057e8:	e798      	b.n	40571c <main+0x45c>
		if (d2 <= d1)
  4057ea:	4602      	mov	r2, r0
	while (lo < hi)
  4057ec:	429a      	cmp	r2, r3
  4057ee:	f080 80e3 	bcs.w	4059b8 <main+0x6f8>
  4057f2:	18d4      	adds	r4, r2, r3
  4057f4:	4619      	mov	r1, r3
  4057f6:	4610      	mov	r0, r2
  4057f8:	0863      	lsrs	r3, r4, #1
  4057fa:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
  4057fe:	edd2 7a01 	vldr	s15, [r2, #4]
  405802:	edd2 9a00 	vldr	s19, [r2]
  405806:	e68a      	b.n	40551e <main+0x25e>
				harmony_shifts[1] = END_OF_SHIFTS; 	
  405808:	4b53      	ldr	r3, [pc, #332]	; (405958 <main+0x698>)
				num_of_shifts = 1; 
  40580a:	2201      	movs	r2, #1
				inputPitch = MINIMUM_PITCH; 
  40580c:	ed9f aa4f 	vldr	s20, [pc, #316]	; 40594c <main+0x68c>
				num_of_shifts = 1; 
  405810:	9202      	str	r2, [sp, #8]
				harmony_shifts[1] = END_OF_SHIFTS; 	
  405812:	9307      	str	r3, [sp, #28]
			create_harmonies((float  *)processBuffer, mixed_buffer, inputPitch, harmony_shifts, (float)harm_volume); 
  405814:	4b51      	ldr	r3, [pc, #324]	; (40595c <main+0x69c>)
  405816:	4a4b      	ldr	r2, [pc, #300]	; (405944 <main+0x684>)
  405818:	6819      	ldr	r1, [r3, #0]
  40581a:	ab06      	add	r3, sp, #24
  40581c:	6810      	ldr	r0, [r2, #0]
  40581e:	ee1a 2a10 	vmov	r2, s20
  405822:	9100      	str	r1, [sp, #0]
  405824:	4641      	mov	r1, r8
  405826:	4c4e      	ldr	r4, [pc, #312]	; (405960 <main+0x6a0>)
  405828:	47a0      	blx	r4
  40582a:	4a4e      	ldr	r2, [pc, #312]	; (405964 <main+0x6a4>)
  40582c:	9903      	ldr	r1, [sp, #12]
  40582e:	9c02      	ldr	r4, [sp, #8]
			// arm_copy_f32((float *)processBuffer, prev_input, WIN_SIZE);
			
			// put data into circ.  buffer 
			for (i = 0; i < WIN_SIZE; i++)
			{
				input_circ_buffer[circ_buf_idx++ & CIRC_MASK] = mixed_buffer[i];
  405830:	f3c1 030c 	ubfx	r3, r1, #0, #13
  405834:	f852 0b04 	ldr.w	r0, [r2], #4
  405838:	3101      	adds	r1, #1
  40583a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
			for (i = 0; i < WIN_SIZE; i++)
  40583e:	4552      	cmp	r2, sl
				input_circ_buffer[circ_buf_idx++ & CIRC_MASK] = mixed_buffer[i];
  405840:	6018      	str	r0, [r3, #0]
			for (i = 0; i < WIN_SIZE; i++)
  405842:	d1f5      	bne.n	405830 <main+0x570>
			}
			
			// only add reverb when we have harmonies 
			uint32_t curr_idx; 
			if (num_of_shifts > 0) // ought to be 1 but whateves... sounds nice with some verb 
  405844:	b1dc      	cbz	r4, 40587e <main+0x5be>
  405846:	9b03      	ldr	r3, [sp, #12]
  405848:	4946      	ldr	r1, [pc, #280]	; (405964 <main+0x6a4>)
  40584a:	f5a3 7061 	sub.w	r0, r3, #900	; 0x384
				uint32_t delay = 900; 
				float g = 0.55f; 
				curr_idx = circ_buf_idx - (uint32_t)WIN_SIZE;
				for (i = 0; i < WIN_SIZE; i++)
				{
					mixed_buffer[i] = -g * mixed_buffer[i] + input_circ_buffer[(curr_idx - delay)  & CIRC_MASK] + g * output_circ_buffer[(curr_idx-delay)  & CIRC_MASK];
  40584e:	eddf 5a46 	vldr	s11, [pc, #280]	; 405968 <main+0x6a8>
  405852:	ed9f 6a46 	vldr	s12, [pc, #280]	; 40596c <main+0x6ac>
  405856:	f3c0 030c 	ubfx	r3, r0, #0, #13
  40585a:	edd1 6a00 	vldr	s13, [r1]
  40585e:	3001      	adds	r0, #1
  405860:	009b      	lsls	r3, r3, #2
  405862:	18fc      	adds	r4, r7, r3
  405864:	4433      	add	r3, r6
  405866:	edd4 7a00 	vldr	s15, [r4]
  40586a:	ed93 7a00 	vldr	s14, [r3]
  40586e:	eee6 7aa5 	vfma.f32	s15, s13, s11
  405872:	eee7 7a06 	vfma.f32	s15, s14, s12
  405876:	ece1 7a01 	vstmia	r1!, {s15}
				for (i = 0; i < WIN_SIZE; i++)
  40587a:	4291      	cmp	r1, r2
  40587c:	d1eb      	bne.n	405856 <main+0x596>
  40587e:	4b39      	ldr	r3, [pc, #228]	; (405964 <main+0x6a4>)
  405880:	9903      	ldr	r1, [sp, #12]
  405882:	461c      	mov	r4, r3
			}
			
			curr_idx = circ_buf_idx - (uint32_t)WIN_SIZE; 
			for (i = 0; i < WIN_SIZE; i++)
			{
				output_circ_buffer[curr_idx++ & CIRC_MASK] = mixed_buffer[i]; 
  405884:	f3c1 030c 	ubfx	r3, r1, #0, #13
  405888:	f854 0b04 	ldr.w	r0, [r4], #4
  40588c:	3101      	adds	r1, #1
  40588e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
			for (i = 0; i < WIN_SIZE; i++)
  405892:	4294      	cmp	r4, r2
				output_circ_buffer[curr_idx++ & CIRC_MASK] = mixed_buffer[i]; 
  405894:	6018      	str	r0, [r3, #0]
			for (i = 0; i < WIN_SIZE; i++)
  405896:	d1f5      	bne.n	405884 <main+0x5c4>
// 				arm_add_f32(prev_input, mixed_buffer, mixed_buffer, WIN_SIZE);
// 				arm_scale_f32(mixed_buffer, (float)INT16_MAX * 0.75f, mixed_buffer, WIN_SIZE);
// 			}
			
			// scale output 
			arm_scale_f32(mixed_buffer, (float)INT16_MAX * master_volume * 0.4, mixed_buffer, WIN_SIZE);
  405898:	4b35      	ldr	r3, [pc, #212]	; (405970 <main+0x6b0>)
  40589a:	eddf 7a36 	vldr	s15, [pc, #216]	; 405974 <main+0x6b4>
  40589e:	ed93 7a00 	vldr	s14, [r3]
  4058a2:	9402      	str	r4, [sp, #8]
  4058a4:	ee67 7a27 	vmul.f32	s15, s14, s15
  4058a8:	4b33      	ldr	r3, [pc, #204]	; (405978 <main+0x6b8>)
  4058aa:	4c34      	ldr	r4, [pc, #208]	; (40597c <main+0x6bc>)
  4058ac:	ee17 0a90 	vmov	r0, s15
  4058b0:	4798      	blx	r3
  4058b2:	a31b      	add	r3, pc, #108	; (adr r3, 405920 <main+0x660>)
  4058b4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4058b8:	47a0      	blx	r4
  4058ba:	4b31      	ldr	r3, [pc, #196]	; (405980 <main+0x6c0>)
  4058bc:	4798      	blx	r3
  4058be:	4c31      	ldr	r4, [pc, #196]	; (405984 <main+0x6c4>)
  4058c0:	f44f 7300 	mov.w	r3, #512	; 0x200
  4058c4:	4601      	mov	r1, r0
  4058c6:	4642      	mov	r2, r8
  4058c8:	4826      	ldr	r0, [pc, #152]	; (405964 <main+0x6a4>)
  4058ca:	47a0      	blx	r4
  4058cc:	4b25      	ldr	r3, [pc, #148]	; (405964 <main+0x6a4>)
  4058ce:	9c02      	ldr	r4, [sp, #8]
  4058d0:	eba3 0c08 	sub.w	ip, r3, r8
			
			// audio out 
			uint32_t idx = 0; 
			for(i = 0; i < IO_BUF_SIZE; i+=2)
			{
				outBuffer[i] = (uint16_t)(int16_t)(mixed_buffer[idx++]);  
  4058d4:	ecf3 7a01 	vldmia	r3!, {s15}
  4058d8:	682a      	ldr	r2, [r5, #0]
  4058da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
				outBuffer[i+1] = outBuffer[i]; 
  4058de:	eb09 0003 	add.w	r0, r9, r3
  4058e2:	4611      	mov	r1, r2
			for(i = 0; i < IO_BUF_SIZE; i+=2)
  4058e4:	429c      	cmp	r4, r3
				outBuffer[i] = (uint16_t)(int16_t)(mixed_buffer[idx++]);  
  4058e6:	edcd 7a02 	vstr	s15, [sp, #8]
  4058ea:	f8bd e008 	ldrh.w	lr, [sp, #8]
  4058ee:	f822 e00c 	strh.w	lr, [r2, ip]
				outBuffer[i+1] = outBuffer[i]; 
  4058f2:	f832 200c 	ldrh.w	r2, [r2, ip]
  4058f6:	b292      	uxth	r2, r2
  4058f8:	520a      	strh	r2, [r1, r0]
			for(i = 0; i < IO_BUF_SIZE; i+=2)
  4058fa:	d1e9      	bne.n	4058d0 <main+0x610>
			}
			
			// check if we're too slow 
			if (dataReceived)
  4058fc:	4b22      	ldr	r3, [pc, #136]	; (405988 <main+0x6c8>)
  4058fe:	781b      	ldrb	r3, [r3, #0]
  405900:	f003 02ff 	and.w	r2, r3, #255	; 0xff
  405904:	b90b      	cbnz	r3, 40590a <main+0x64a>
// 				{
// 					// taking too long ... never 
// 				}
			}
			else 
				dataReceived = false; 
  405906:	4b20      	ldr	r3, [pc, #128]	; (405988 <main+0x6c8>)
  405908:	701a      	strb	r2, [r3, #0]
  40590a:	9b03      	ldr	r3, [sp, #12]
  40590c:	f503 7300 	add.w	r3, r3, #512	; 0x200
  405910:	9303      	str	r3, [sp, #12]
  405912:	e5f1      	b.n	4054f8 <main+0x238>
				harmony_shifts[0] = 1.0f; 
  405914:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  405918:	e6b5      	b.n	405686 <main+0x3c6>
			desired_pitch = closest_note; 
  40591a:	eef0 7a69 	vmov.f32	s15, s19
  40591e:	e6a7      	b.n	405670 <main+0x3b0>
  405920:	9999999a 	.word	0x9999999a
  405924:	3fd99999 	.word	0x3fd99999
  405928:	20400054 	.word	0x20400054
  40592c:	2043fc18 	.word	0x2043fc18
  405930:	2043fc74 	.word	0x2043fc74
  405934:	42800000 	.word	0x42800000
  405938:	3c800000 	.word	0x3c800000
  40593c:	2043fc78 	.word	0x2043fc78
  405940:	20400040 	.word	0x20400040
  405944:	2040001c 	.word	0x2040001c
  405948:	00405a95 	.word	0x00405a95
  40594c:	42a00000 	.word	0x42a00000
  405950:	358637bd 	.word	0x358637bd
  405954:	2040004c 	.word	0x2040004c
  405958:	bf800000 	.word	0xbf800000
  40595c:	20400044 	.word	0x20400044
  405960:	004011b9 	.word	0x004011b9
  405964:	20432000 	.word	0x20432000
  405968:	bf0ccccd 	.word	0xbf0ccccd
  40596c:	3f0ccccd 	.word	0x3f0ccccd
  405970:	20400050 	.word	0x20400050
  405974:	46fffe00 	.word	0x46fffe00
  405978:	00406075 	.word	0x00406075
  40597c:	0040611d 	.word	0x0040611d
  405980:	00406541 	.word	0x00406541
  405984:	00405d41 	.word	0x00405d41
  405988:	2040201c 	.word	0x2040201c
  40598c:	427c0000 	.word	0x427c0000
  405990:	3c800000 	.word	0x3c800000
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  405994:	edd1 7a02 	vldr	s15, [r1, #8]
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  405998:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 40598c <main+0x6cc>
  40599c:	ed5f 6a04 	vldr	s13, [pc, #-16]	; 405990 <main+0x6d0>
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  4059a0:	ee77 7ae9 	vsub.f32	s15, s15, s19
  4059a4:	e64f      	b.n	405646 <main+0x386>
  4059a6:	4621      	mov	r1, r4
  4059a8:	9402      	str	r4, [sp, #8]
				harmony_shifts[num_of_shifts] = END_OF_SHIFTS; 
  4059aa:	ab12      	add	r3, sp, #72	; 0x48
  4059ac:	4a05      	ldr	r2, [pc, #20]	; (4059c4 <main+0x704>)
  4059ae:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  4059b2:	f843 2c30 	str.w	r2, [r3, #-48]
  4059b6:	e72d      	b.n	405814 <main+0x554>
	while (lo < hi)
  4059b8:	4619      	mov	r1, r3
  4059ba:	e629      	b.n	405610 <main+0x350>
			num_of_shifts = 1;  
  4059bc:	2301      	movs	r3, #1
  4059be:	9302      	str	r3, [sp, #8]
  4059c0:	4619      	mov	r1, r3
  4059c2:	e7f2      	b.n	4059aa <main+0x6ea>
  4059c4:	bf800000 	.word	0xbf800000

004059c8 <vApplicationStackOverflowHook>:
  4059c8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4059cc:	b672      	cpsid	i
  4059ce:	f383 8811 	msr	BASEPRI, r3
  4059d2:	f3bf 8f6f 	isb	sy
  4059d6:	f3bf 8f4f 	dsb	sy
  4059da:	b662      	cpsie	i
  4059dc:	e7fe      	b.n	4059dc <vApplicationStackOverflowHook+0x14>
  4059de:	bf00      	nop

004059e0 <vApplicationTickHook>:
	( void ) xFreeHeapSpace;
}
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
  4059e0:	b510      	push	{r4, lr}
	#if mainCREATE_SIMPLE_BLINKY_DEMO_ONLY == 0
	{
		/* The full demo includes a software timer demo/test that requires
		prodding periodically from the tick interrupt. */
		vTimerPeriodicISRTests();
  4059e2:	4b06      	ldr	r3, [pc, #24]	; (4059fc <vApplicationTickHook+0x1c>)
  4059e4:	4798      	blx	r3

		/* Call the periodic queue overwrite from ISR demo. */
		vQueueOverwritePeriodicISRDemo();
  4059e6:	4b06      	ldr	r3, [pc, #24]	; (405a00 <vApplicationTickHook+0x20>)
  4059e8:	4798      	blx	r3

		/* Call the periodic event group from ISR demo. */
		vPeriodicEventGroupsProcessing();
  4059ea:	4b06      	ldr	r3, [pc, #24]	; (405a04 <vApplicationTickHook+0x24>)
  4059ec:	4798      	blx	r3

		/* Call the code that uses a mutex from an ISR. */
		vInterruptSemaphorePeriodicTest();
  4059ee:	4b06      	ldr	r3, [pc, #24]	; (405a08 <vApplicationTickHook+0x28>)
  4059f0:	4798      	blx	r3

		/* Call the code that 'gives' a task notification from an ISR. */
		xNotifyTaskFromISR();
  4059f2:	4b06      	ldr	r3, [pc, #24]	; (405a0c <vApplicationTickHook+0x2c>)
	}
	#endif
}
  4059f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		xNotifyTaskFromISR();
  4059f8:	4718      	bx	r3
  4059fa:	bf00      	nop
  4059fc:	00404b95 	.word	0x00404b95
  405a00:	00404a45 	.word	0x00404a45
  405a04:	00404919 	.word	0x00404919
  405a08:	004049b1 	.word	0x004049b1
  405a0c:	00404ae5 	.word	0x00404ae5

00405a10 <arm_fill_f32>:
  405a10:	b430      	push	{r4, r5}
  405a12:	0895      	lsrs	r5, r2, #2
  405a14:	d00b      	beq.n	405a2e <arm_fill_f32+0x1e>
  405a16:	460b      	mov	r3, r1
  405a18:	462c      	mov	r4, r5
  405a1a:	3c01      	subs	r4, #1
  405a1c:	6018      	str	r0, [r3, #0]
  405a1e:	6058      	str	r0, [r3, #4]
  405a20:	6098      	str	r0, [r3, #8]
  405a22:	60d8      	str	r0, [r3, #12]
  405a24:	f103 0310 	add.w	r3, r3, #16
  405a28:	d1f7      	bne.n	405a1a <arm_fill_f32+0xa>
  405a2a:	eb01 1105 	add.w	r1, r1, r5, lsl #4
  405a2e:	f012 0203 	ands.w	r2, r2, #3
  405a32:	d003      	beq.n	405a3c <arm_fill_f32+0x2c>
  405a34:	3a01      	subs	r2, #1
  405a36:	f841 0b04 	str.w	r0, [r1], #4
  405a3a:	d1fb      	bne.n	405a34 <arm_fill_f32+0x24>
  405a3c:	bc30      	pop	{r4, r5}
  405a3e:	4770      	bx	lr

00405a40 <arm_copy_f32>:
  405a40:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  405a44:	ea5f 0992 	movs.w	r9, r2, lsr #2
  405a48:	d018      	beq.n	405a7c <arm_copy_f32+0x3c>
  405a4a:	4604      	mov	r4, r0
  405a4c:	460b      	mov	r3, r1
  405a4e:	464d      	mov	r5, r9
  405a50:	f8d4 8000 	ldr.w	r8, [r4]
  405a54:	f8d4 c004 	ldr.w	ip, [r4, #4]
  405a58:	68a7      	ldr	r7, [r4, #8]
  405a5a:	68e6      	ldr	r6, [r4, #12]
  405a5c:	3d01      	subs	r5, #1
  405a5e:	f8c3 8000 	str.w	r8, [r3]
  405a62:	f8c3 c004 	str.w	ip, [r3, #4]
  405a66:	609f      	str	r7, [r3, #8]
  405a68:	60de      	str	r6, [r3, #12]
  405a6a:	f104 0410 	add.w	r4, r4, #16
  405a6e:	f103 0310 	add.w	r3, r3, #16
  405a72:	d1ed      	bne.n	405a50 <arm_copy_f32+0x10>
  405a74:	ea4f 1909 	mov.w	r9, r9, lsl #4
  405a78:	4448      	add	r0, r9
  405a7a:	4449      	add	r1, r9
  405a7c:	f012 0203 	ands.w	r2, r2, #3
  405a80:	d005      	beq.n	405a8e <arm_copy_f32+0x4e>
  405a82:	f850 3b04 	ldr.w	r3, [r0], #4
  405a86:	3a01      	subs	r2, #1
  405a88:	f841 3b04 	str.w	r3, [r1], #4
  405a8c:	d1f9      	bne.n	405a82 <arm_copy_f32+0x42>
  405a8e:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
  405a92:	4770      	bx	lr

00405a94 <arm_power_f32>:
  405a94:	b430      	push	{r4, r5}
  405a96:	088d      	lsrs	r5, r1, #2
  405a98:	eddf 7a18 	vldr	s15, [pc, #96]	; 405afc <arm_power_f32+0x68>
  405a9c:	d01f      	beq.n	405ade <arm_power_f32+0x4a>
  405a9e:	4603      	mov	r3, r0
  405aa0:	462c      	mov	r4, r5
  405aa2:	edd3 6a00 	vldr	s13, [r3]
  405aa6:	ed93 7a01 	vldr	s14, [r3, #4]
  405aaa:	ee66 6aa6 	vmul.f32	s13, s13, s13
  405aae:	ee27 6a07 	vmul.f32	s12, s14, s14
  405ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
  405ab6:	ed93 7a02 	vldr	s14, [r3, #8]
  405aba:	ee76 7a27 	vadd.f32	s15, s12, s15
  405abe:	ee67 6a07 	vmul.f32	s13, s14, s14
  405ac2:	ed93 7a03 	vldr	s14, [r3, #12]
  405ac6:	ee76 6aa7 	vadd.f32	s13, s13, s15
  405aca:	ee27 7a07 	vmul.f32	s14, s14, s14
  405ace:	3c01      	subs	r4, #1
  405ad0:	f103 0310 	add.w	r3, r3, #16
  405ad4:	ee77 7a26 	vadd.f32	s15, s14, s13
  405ad8:	d1e3      	bne.n	405aa2 <arm_power_f32+0xe>
  405ada:	eb00 1005 	add.w	r0, r0, r5, lsl #4
  405ade:	f011 0103 	ands.w	r1, r1, #3
  405ae2:	d007      	beq.n	405af4 <arm_power_f32+0x60>
  405ae4:	ecb0 7a01 	vldmia	r0!, {s14}
  405ae8:	ee27 7a07 	vmul.f32	s14, s14, s14
  405aec:	3901      	subs	r1, #1
  405aee:	ee77 7a87 	vadd.f32	s15, s15, s14
  405af2:	d1f7      	bne.n	405ae4 <arm_power_f32+0x50>
  405af4:	edc2 7a00 	vstr	s15, [r2]
  405af8:	bc30      	pop	{r4, r5}
  405afa:	4770      	bx	lr
  405afc:	00000000 	.word	0x00000000

00405b00 <arm_min_f32>:
  405b00:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  405b04:	f101 3cff 	add.w	ip, r1, #4294967295
  405b08:	ea5f 099c 	movs.w	r9, ip, lsr #2
  405b0c:	f100 0704 	add.w	r7, r0, #4
  405b10:	edd0 7a00 	vldr	s15, [r0]
  405b14:	d05c      	beq.n	405bd0 <arm_min_f32+0xd0>
  405b16:	463c      	mov	r4, r7
  405b18:	464e      	mov	r6, r9
  405b1a:	2004      	movs	r0, #4
  405b1c:	2500      	movs	r5, #0
  405b1e:	edd4 6a00 	vldr	s13, [r4]
  405b22:	eef4 6ae7 	vcmpe.f32	s13, s15
  405b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405b2a:	ed94 7a01 	vldr	s14, [r4, #4]
  405b2e:	bf48      	it	mi
  405b30:	eef0 7a66 	vmovmi.f32	s15, s13
  405b34:	eef4 7ac7 	vcmpe.f32	s15, s14
  405b38:	f1a0 0803 	sub.w	r8, r0, #3
  405b3c:	bf48      	it	mi
  405b3e:	4645      	movmi	r5, r8
  405b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405b44:	edd4 6a02 	vldr	s13, [r4, #8]
  405b48:	bfc8      	it	gt
  405b4a:	eef0 7a47 	vmovgt.f32	s15, s14
  405b4e:	eef4 7ae6 	vcmpe.f32	s15, s13
  405b52:	f1a0 0802 	sub.w	r8, r0, #2
  405b56:	bfc8      	it	gt
  405b58:	4645      	movgt	r5, r8
  405b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405b5e:	ed94 7a03 	vldr	s14, [r4, #12]
  405b62:	bfc8      	it	gt
  405b64:	eef0 7a66 	vmovgt.f32	s15, s13
  405b68:	eef4 7ac7 	vcmpe.f32	s15, s14
  405b6c:	f100 38ff 	add.w	r8, r0, #4294967295
  405b70:	bfc8      	it	gt
  405b72:	4645      	movgt	r5, r8
  405b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405b78:	bfc8      	it	gt
  405b7a:	4605      	movgt	r5, r0
  405b7c:	bfc8      	it	gt
  405b7e:	eef0 7a47 	vmovgt.f32	s15, s14
  405b82:	3e01      	subs	r6, #1
  405b84:	f104 0410 	add.w	r4, r4, #16
  405b88:	f100 0004 	add.w	r0, r0, #4
  405b8c:	d1c7      	bne.n	405b1e <arm_min_f32+0x1e>
  405b8e:	eb07 1709 	add.w	r7, r7, r9, lsl #4
  405b92:	f01c 0c03 	ands.w	ip, ip, #3
  405b96:	d01d      	beq.n	405bd4 <arm_min_f32+0xd4>
  405b98:	ebcc 0101 	rsb	r1, ip, r1
  405b9c:	2000      	movs	r0, #0
  405b9e:	ecb7 7a01 	vldmia	r7!, {s14}
  405ba2:	eeb4 7ae7 	vcmpe.f32	s14, s15
  405ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405baa:	bf48      	it	mi
  405bac:	eef0 7a47 	vmovmi.f32	s15, s14
  405bb0:	eb01 0400 	add.w	r4, r1, r0
  405bb4:	f100 0001 	add.w	r0, r0, #1
  405bb8:	bf48      	it	mi
  405bba:	4625      	movmi	r5, r4
  405bbc:	4560      	cmp	r0, ip
  405bbe:	eeb0 7a67 	vmov.f32	s14, s15
  405bc2:	d1ec      	bne.n	405b9e <arm_min_f32+0x9e>
  405bc4:	ed82 7a00 	vstr	s14, [r2]
  405bc8:	601d      	str	r5, [r3, #0]
  405bca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
  405bce:	4770      	bx	lr
  405bd0:	464d      	mov	r5, r9
  405bd2:	e7de      	b.n	405b92 <arm_min_f32+0x92>
  405bd4:	eeb0 7a67 	vmov.f32	s14, s15
  405bd8:	e7f4      	b.n	405bc4 <arm_min_f32+0xc4>
  405bda:	bf00      	nop

00405bdc <arm_max_f32>:
  405bdc:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  405be0:	f101 3cff 	add.w	ip, r1, #4294967295
  405be4:	ea5f 099c 	movs.w	r9, ip, lsr #2
  405be8:	f100 0704 	add.w	r7, r0, #4
  405bec:	edd0 7a00 	vldr	s15, [r0]
  405bf0:	d05c      	beq.n	405cac <arm_max_f32+0xd0>
  405bf2:	463c      	mov	r4, r7
  405bf4:	464e      	mov	r6, r9
  405bf6:	2004      	movs	r0, #4
  405bf8:	2500      	movs	r5, #0
  405bfa:	edd4 6a00 	vldr	s13, [r4]
  405bfe:	eef4 6ae7 	vcmpe.f32	s13, s15
  405c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405c06:	ed94 7a01 	vldr	s14, [r4, #4]
  405c0a:	bfc8      	it	gt
  405c0c:	eef0 7a66 	vmovgt.f32	s15, s13
  405c10:	eef4 7ac7 	vcmpe.f32	s15, s14
  405c14:	f1a0 0803 	sub.w	r8, r0, #3
  405c18:	bfc8      	it	gt
  405c1a:	4645      	movgt	r5, r8
  405c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405c20:	edd4 6a02 	vldr	s13, [r4, #8]
  405c24:	bf48      	it	mi
  405c26:	eef0 7a47 	vmovmi.f32	s15, s14
  405c2a:	eef4 7ae6 	vcmpe.f32	s15, s13
  405c2e:	f1a0 0802 	sub.w	r8, r0, #2
  405c32:	bf48      	it	mi
  405c34:	4645      	movmi	r5, r8
  405c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405c3a:	ed94 7a03 	vldr	s14, [r4, #12]
  405c3e:	bf48      	it	mi
  405c40:	eef0 7a66 	vmovmi.f32	s15, s13
  405c44:	eef4 7ac7 	vcmpe.f32	s15, s14
  405c48:	f100 38ff 	add.w	r8, r0, #4294967295
  405c4c:	bf48      	it	mi
  405c4e:	4645      	movmi	r5, r8
  405c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405c54:	bf48      	it	mi
  405c56:	4605      	movmi	r5, r0
  405c58:	bf48      	it	mi
  405c5a:	eef0 7a47 	vmovmi.f32	s15, s14
  405c5e:	3e01      	subs	r6, #1
  405c60:	f104 0410 	add.w	r4, r4, #16
  405c64:	f100 0004 	add.w	r0, r0, #4
  405c68:	d1c7      	bne.n	405bfa <arm_max_f32+0x1e>
  405c6a:	eb07 1709 	add.w	r7, r7, r9, lsl #4
  405c6e:	f01c 0c03 	ands.w	ip, ip, #3
  405c72:	d01d      	beq.n	405cb0 <arm_max_f32+0xd4>
  405c74:	ebcc 0101 	rsb	r1, ip, r1
  405c78:	2000      	movs	r0, #0
  405c7a:	ecb7 7a01 	vldmia	r7!, {s14}
  405c7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
  405c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405c86:	bfc8      	it	gt
  405c88:	eef0 7a47 	vmovgt.f32	s15, s14
  405c8c:	eb01 0400 	add.w	r4, r1, r0
  405c90:	f100 0001 	add.w	r0, r0, #1
  405c94:	bfc8      	it	gt
  405c96:	4625      	movgt	r5, r4
  405c98:	4560      	cmp	r0, ip
  405c9a:	eeb0 7a67 	vmov.f32	s14, s15
  405c9e:	d1ec      	bne.n	405c7a <arm_max_f32+0x9e>
  405ca0:	ed82 7a00 	vstr	s14, [r2]
  405ca4:	601d      	str	r5, [r3, #0]
  405ca6:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
  405caa:	4770      	bx	lr
  405cac:	464d      	mov	r5, r9
  405cae:	e7de      	b.n	405c6e <arm_max_f32+0x92>
  405cb0:	eeb0 7a67 	vmov.f32	s14, s15
  405cb4:	e7f4      	b.n	405ca0 <arm_max_f32+0xc4>
  405cb6:	bf00      	nop

00405cb8 <arm_cos_f32>:
  405cb8:	eddf 7a1e 	vldr	s15, [pc, #120]	; 405d34 <arm_cos_f32+0x7c>
  405cbc:	ee06 0a90 	vmov	s13, r0
  405cc0:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
  405cc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
  405cc8:	ee77 7a87 	vadd.f32	s15, s15, s14
  405ccc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  405cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405cd4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
  405cd8:	d504      	bpl.n	405ce4 <arm_cos_f32+0x2c>
  405cda:	ee17 3a10 	vmov	r3, s14
  405cde:	3b01      	subs	r3, #1
  405ce0:	ee07 3a10 	vmov	s14, r3
  405ce4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  405ce8:	eddf 6a13 	vldr	s13, [pc, #76]	; 405d38 <arm_cos_f32+0x80>
  405cec:	ee77 7ac7 	vsub.f32	s15, s15, s14
  405cf0:	ee67 7aa6 	vmul.f32	s15, s15, s13
  405cf4:	eefc 6ae7 	vcvt.u32.f32	s13, s15
  405cf8:	ee16 3a90 	vmov	r3, s13
  405cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
  405d00:	ee07 3a10 	vmov	s14, r3
  405d04:	eef8 6a47 	vcvt.f32.u32	s13, s14
  405d08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  405d0c:	ee77 7ae6 	vsub.f32	s15, s15, s13
  405d10:	4a0a      	ldr	r2, [pc, #40]	; (405d3c <arm_cos_f32+0x84>)
  405d12:	ee37 7a67 	vsub.f32	s14, s14, s15
  405d16:	eb02 0183 	add.w	r1, r2, r3, lsl #2
  405d1a:	ed91 6a00 	vldr	s12, [r1]
  405d1e:	edd1 6a01 	vldr	s13, [r1, #4]
  405d22:	ee27 7a06 	vmul.f32	s14, s14, s12
  405d26:	ee67 7aa6 	vmul.f32	s15, s15, s13
  405d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
  405d2e:	ee17 0a90 	vmov	r0, s15
  405d32:	4770      	bx	lr
  405d34:	3e22f983 	.word	0x3e22f983
  405d38:	44000000 	.word	0x44000000
  405d3c:	0040967c 	.word	0x0040967c

00405d40 <arm_scale_f32>:
  405d40:	b470      	push	{r4, r5, r6}
  405d42:	089e      	lsrs	r6, r3, #2
  405d44:	ee07 1a90 	vmov	s15, r1
  405d48:	d023      	beq.n	405d92 <arm_scale_f32+0x52>
  405d4a:	4635      	mov	r5, r6
  405d4c:	4614      	mov	r4, r2
  405d4e:	4601      	mov	r1, r0
  405d50:	edd1 5a00 	vldr	s11, [r1]
  405d54:	ed91 6a01 	vldr	s12, [r1, #4]
  405d58:	edd1 6a02 	vldr	s13, [r1, #8]
  405d5c:	ed91 7a03 	vldr	s14, [r1, #12]
  405d60:	ee65 5aa7 	vmul.f32	s11, s11, s15
  405d64:	ee26 6a27 	vmul.f32	s12, s12, s15
  405d68:	ee66 6aa7 	vmul.f32	s13, s13, s15
  405d6c:	ee27 7a27 	vmul.f32	s14, s14, s15
  405d70:	3d01      	subs	r5, #1
  405d72:	edc4 5a00 	vstr	s11, [r4]
  405d76:	ed84 6a01 	vstr	s12, [r4, #4]
  405d7a:	edc4 6a02 	vstr	s13, [r4, #8]
  405d7e:	ed84 7a03 	vstr	s14, [r4, #12]
  405d82:	f101 0110 	add.w	r1, r1, #16
  405d86:	f104 0410 	add.w	r4, r4, #16
  405d8a:	d1e1      	bne.n	405d50 <arm_scale_f32+0x10>
  405d8c:	0136      	lsls	r6, r6, #4
  405d8e:	4430      	add	r0, r6
  405d90:	4432      	add	r2, r6
  405d92:	f013 0303 	ands.w	r3, r3, #3
  405d96:	d007      	beq.n	405da8 <arm_scale_f32+0x68>
  405d98:	ecb0 7a01 	vldmia	r0!, {s14}
  405d9c:	ee27 7a27 	vmul.f32	s14, s14, s15
  405da0:	3b01      	subs	r3, #1
  405da2:	eca2 7a01 	vstmia	r2!, {s14}
  405da6:	d1f7      	bne.n	405d98 <arm_scale_f32+0x58>
  405da8:	bc70      	pop	{r4, r5, r6}
  405daa:	4770      	bx	lr

00405dac <__aeabi_drsub>:
  405dac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  405db0:	e002      	b.n	405db8 <__adddf3>
  405db2:	bf00      	nop

00405db4 <__aeabi_dsub>:
  405db4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00405db8 <__adddf3>:
  405db8:	b530      	push	{r4, r5, lr}
  405dba:	ea4f 0441 	mov.w	r4, r1, lsl #1
  405dbe:	ea4f 0543 	mov.w	r5, r3, lsl #1
  405dc2:	ea94 0f05 	teq	r4, r5
  405dc6:	bf08      	it	eq
  405dc8:	ea90 0f02 	teqeq	r0, r2
  405dcc:	bf1f      	itttt	ne
  405dce:	ea54 0c00 	orrsne.w	ip, r4, r0
  405dd2:	ea55 0c02 	orrsne.w	ip, r5, r2
  405dd6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  405dda:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405dde:	f000 80e2 	beq.w	405fa6 <__adddf3+0x1ee>
  405de2:	ea4f 5454 	mov.w	r4, r4, lsr #21
  405de6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  405dea:	bfb8      	it	lt
  405dec:	426d      	neglt	r5, r5
  405dee:	dd0c      	ble.n	405e0a <__adddf3+0x52>
  405df0:	442c      	add	r4, r5
  405df2:	ea80 0202 	eor.w	r2, r0, r2
  405df6:	ea81 0303 	eor.w	r3, r1, r3
  405dfa:	ea82 0000 	eor.w	r0, r2, r0
  405dfe:	ea83 0101 	eor.w	r1, r3, r1
  405e02:	ea80 0202 	eor.w	r2, r0, r2
  405e06:	ea81 0303 	eor.w	r3, r1, r3
  405e0a:	2d36      	cmp	r5, #54	; 0x36
  405e0c:	bf88      	it	hi
  405e0e:	bd30      	pophi	{r4, r5, pc}
  405e10:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405e14:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405e18:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  405e1c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  405e20:	d002      	beq.n	405e28 <__adddf3+0x70>
  405e22:	4240      	negs	r0, r0
  405e24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405e28:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  405e2c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405e30:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  405e34:	d002      	beq.n	405e3c <__adddf3+0x84>
  405e36:	4252      	negs	r2, r2
  405e38:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  405e3c:	ea94 0f05 	teq	r4, r5
  405e40:	f000 80a7 	beq.w	405f92 <__adddf3+0x1da>
  405e44:	f1a4 0401 	sub.w	r4, r4, #1
  405e48:	f1d5 0e20 	rsbs	lr, r5, #32
  405e4c:	db0d      	blt.n	405e6a <__adddf3+0xb2>
  405e4e:	fa02 fc0e 	lsl.w	ip, r2, lr
  405e52:	fa22 f205 	lsr.w	r2, r2, r5
  405e56:	1880      	adds	r0, r0, r2
  405e58:	f141 0100 	adc.w	r1, r1, #0
  405e5c:	fa03 f20e 	lsl.w	r2, r3, lr
  405e60:	1880      	adds	r0, r0, r2
  405e62:	fa43 f305 	asr.w	r3, r3, r5
  405e66:	4159      	adcs	r1, r3
  405e68:	e00e      	b.n	405e88 <__adddf3+0xd0>
  405e6a:	f1a5 0520 	sub.w	r5, r5, #32
  405e6e:	f10e 0e20 	add.w	lr, lr, #32
  405e72:	2a01      	cmp	r2, #1
  405e74:	fa03 fc0e 	lsl.w	ip, r3, lr
  405e78:	bf28      	it	cs
  405e7a:	f04c 0c02 	orrcs.w	ip, ip, #2
  405e7e:	fa43 f305 	asr.w	r3, r3, r5
  405e82:	18c0      	adds	r0, r0, r3
  405e84:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  405e88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405e8c:	d507      	bpl.n	405e9e <__adddf3+0xe6>
  405e8e:	f04f 0e00 	mov.w	lr, #0
  405e92:	f1dc 0c00 	rsbs	ip, ip, #0
  405e96:	eb7e 0000 	sbcs.w	r0, lr, r0
  405e9a:	eb6e 0101 	sbc.w	r1, lr, r1
  405e9e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  405ea2:	d31b      	bcc.n	405edc <__adddf3+0x124>
  405ea4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  405ea8:	d30c      	bcc.n	405ec4 <__adddf3+0x10c>
  405eaa:	0849      	lsrs	r1, r1, #1
  405eac:	ea5f 0030 	movs.w	r0, r0, rrx
  405eb0:	ea4f 0c3c 	mov.w	ip, ip, rrx
  405eb4:	f104 0401 	add.w	r4, r4, #1
  405eb8:	ea4f 5244 	mov.w	r2, r4, lsl #21
  405ebc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  405ec0:	f080 809a 	bcs.w	405ff8 <__adddf3+0x240>
  405ec4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  405ec8:	bf08      	it	eq
  405eca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  405ece:	f150 0000 	adcs.w	r0, r0, #0
  405ed2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405ed6:	ea41 0105 	orr.w	r1, r1, r5
  405eda:	bd30      	pop	{r4, r5, pc}
  405edc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  405ee0:	4140      	adcs	r0, r0
  405ee2:	eb41 0101 	adc.w	r1, r1, r1
  405ee6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405eea:	f1a4 0401 	sub.w	r4, r4, #1
  405eee:	d1e9      	bne.n	405ec4 <__adddf3+0x10c>
  405ef0:	f091 0f00 	teq	r1, #0
  405ef4:	bf04      	itt	eq
  405ef6:	4601      	moveq	r1, r0
  405ef8:	2000      	moveq	r0, #0
  405efa:	fab1 f381 	clz	r3, r1
  405efe:	bf08      	it	eq
  405f00:	3320      	addeq	r3, #32
  405f02:	f1a3 030b 	sub.w	r3, r3, #11
  405f06:	f1b3 0220 	subs.w	r2, r3, #32
  405f0a:	da0c      	bge.n	405f26 <__adddf3+0x16e>
  405f0c:	320c      	adds	r2, #12
  405f0e:	dd08      	ble.n	405f22 <__adddf3+0x16a>
  405f10:	f102 0c14 	add.w	ip, r2, #20
  405f14:	f1c2 020c 	rsb	r2, r2, #12
  405f18:	fa01 f00c 	lsl.w	r0, r1, ip
  405f1c:	fa21 f102 	lsr.w	r1, r1, r2
  405f20:	e00c      	b.n	405f3c <__adddf3+0x184>
  405f22:	f102 0214 	add.w	r2, r2, #20
  405f26:	bfd8      	it	le
  405f28:	f1c2 0c20 	rsble	ip, r2, #32
  405f2c:	fa01 f102 	lsl.w	r1, r1, r2
  405f30:	fa20 fc0c 	lsr.w	ip, r0, ip
  405f34:	bfdc      	itt	le
  405f36:	ea41 010c 	orrle.w	r1, r1, ip
  405f3a:	4090      	lslle	r0, r2
  405f3c:	1ae4      	subs	r4, r4, r3
  405f3e:	bfa2      	ittt	ge
  405f40:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  405f44:	4329      	orrge	r1, r5
  405f46:	bd30      	popge	{r4, r5, pc}
  405f48:	ea6f 0404 	mvn.w	r4, r4
  405f4c:	3c1f      	subs	r4, #31
  405f4e:	da1c      	bge.n	405f8a <__adddf3+0x1d2>
  405f50:	340c      	adds	r4, #12
  405f52:	dc0e      	bgt.n	405f72 <__adddf3+0x1ba>
  405f54:	f104 0414 	add.w	r4, r4, #20
  405f58:	f1c4 0220 	rsb	r2, r4, #32
  405f5c:	fa20 f004 	lsr.w	r0, r0, r4
  405f60:	fa01 f302 	lsl.w	r3, r1, r2
  405f64:	ea40 0003 	orr.w	r0, r0, r3
  405f68:	fa21 f304 	lsr.w	r3, r1, r4
  405f6c:	ea45 0103 	orr.w	r1, r5, r3
  405f70:	bd30      	pop	{r4, r5, pc}
  405f72:	f1c4 040c 	rsb	r4, r4, #12
  405f76:	f1c4 0220 	rsb	r2, r4, #32
  405f7a:	fa20 f002 	lsr.w	r0, r0, r2
  405f7e:	fa01 f304 	lsl.w	r3, r1, r4
  405f82:	ea40 0003 	orr.w	r0, r0, r3
  405f86:	4629      	mov	r1, r5
  405f88:	bd30      	pop	{r4, r5, pc}
  405f8a:	fa21 f004 	lsr.w	r0, r1, r4
  405f8e:	4629      	mov	r1, r5
  405f90:	bd30      	pop	{r4, r5, pc}
  405f92:	f094 0f00 	teq	r4, #0
  405f96:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  405f9a:	bf06      	itte	eq
  405f9c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  405fa0:	3401      	addeq	r4, #1
  405fa2:	3d01      	subne	r5, #1
  405fa4:	e74e      	b.n	405e44 <__adddf3+0x8c>
  405fa6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405faa:	bf18      	it	ne
  405fac:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405fb0:	d029      	beq.n	406006 <__adddf3+0x24e>
  405fb2:	ea94 0f05 	teq	r4, r5
  405fb6:	bf08      	it	eq
  405fb8:	ea90 0f02 	teqeq	r0, r2
  405fbc:	d005      	beq.n	405fca <__adddf3+0x212>
  405fbe:	ea54 0c00 	orrs.w	ip, r4, r0
  405fc2:	bf04      	itt	eq
  405fc4:	4619      	moveq	r1, r3
  405fc6:	4610      	moveq	r0, r2
  405fc8:	bd30      	pop	{r4, r5, pc}
  405fca:	ea91 0f03 	teq	r1, r3
  405fce:	bf1e      	ittt	ne
  405fd0:	2100      	movne	r1, #0
  405fd2:	2000      	movne	r0, #0
  405fd4:	bd30      	popne	{r4, r5, pc}
  405fd6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  405fda:	d105      	bne.n	405fe8 <__adddf3+0x230>
  405fdc:	0040      	lsls	r0, r0, #1
  405fde:	4149      	adcs	r1, r1
  405fe0:	bf28      	it	cs
  405fe2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  405fe6:	bd30      	pop	{r4, r5, pc}
  405fe8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  405fec:	bf3c      	itt	cc
  405fee:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  405ff2:	bd30      	popcc	{r4, r5, pc}
  405ff4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405ff8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  405ffc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  406000:	f04f 0000 	mov.w	r0, #0
  406004:	bd30      	pop	{r4, r5, pc}
  406006:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40600a:	bf1a      	itte	ne
  40600c:	4619      	movne	r1, r3
  40600e:	4610      	movne	r0, r2
  406010:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  406014:	bf1c      	itt	ne
  406016:	460b      	movne	r3, r1
  406018:	4602      	movne	r2, r0
  40601a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40601e:	bf06      	itte	eq
  406020:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  406024:	ea91 0f03 	teqeq	r1, r3
  406028:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40602c:	bd30      	pop	{r4, r5, pc}
  40602e:	bf00      	nop

00406030 <__aeabi_ui2d>:
  406030:	f090 0f00 	teq	r0, #0
  406034:	bf04      	itt	eq
  406036:	2100      	moveq	r1, #0
  406038:	4770      	bxeq	lr
  40603a:	b530      	push	{r4, r5, lr}
  40603c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406040:	f104 0432 	add.w	r4, r4, #50	; 0x32
  406044:	f04f 0500 	mov.w	r5, #0
  406048:	f04f 0100 	mov.w	r1, #0
  40604c:	e750      	b.n	405ef0 <__adddf3+0x138>
  40604e:	bf00      	nop

00406050 <__aeabi_i2d>:
  406050:	f090 0f00 	teq	r0, #0
  406054:	bf04      	itt	eq
  406056:	2100      	moveq	r1, #0
  406058:	4770      	bxeq	lr
  40605a:	b530      	push	{r4, r5, lr}
  40605c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406060:	f104 0432 	add.w	r4, r4, #50	; 0x32
  406064:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  406068:	bf48      	it	mi
  40606a:	4240      	negmi	r0, r0
  40606c:	f04f 0100 	mov.w	r1, #0
  406070:	e73e      	b.n	405ef0 <__adddf3+0x138>
  406072:	bf00      	nop

00406074 <__aeabi_f2d>:
  406074:	0042      	lsls	r2, r0, #1
  406076:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40607a:	ea4f 0131 	mov.w	r1, r1, rrx
  40607e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  406082:	bf1f      	itttt	ne
  406084:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  406088:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40608c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  406090:	4770      	bxne	lr
  406092:	f092 0f00 	teq	r2, #0
  406096:	bf14      	ite	ne
  406098:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40609c:	4770      	bxeq	lr
  40609e:	b530      	push	{r4, r5, lr}
  4060a0:	f44f 7460 	mov.w	r4, #896	; 0x380
  4060a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4060a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4060ac:	e720      	b.n	405ef0 <__adddf3+0x138>
  4060ae:	bf00      	nop

004060b0 <__aeabi_ul2d>:
  4060b0:	ea50 0201 	orrs.w	r2, r0, r1
  4060b4:	bf08      	it	eq
  4060b6:	4770      	bxeq	lr
  4060b8:	b530      	push	{r4, r5, lr}
  4060ba:	f04f 0500 	mov.w	r5, #0
  4060be:	e00a      	b.n	4060d6 <__aeabi_l2d+0x16>

004060c0 <__aeabi_l2d>:
  4060c0:	ea50 0201 	orrs.w	r2, r0, r1
  4060c4:	bf08      	it	eq
  4060c6:	4770      	bxeq	lr
  4060c8:	b530      	push	{r4, r5, lr}
  4060ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4060ce:	d502      	bpl.n	4060d6 <__aeabi_l2d+0x16>
  4060d0:	4240      	negs	r0, r0
  4060d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4060d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4060da:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4060de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4060e2:	f43f aedc 	beq.w	405e9e <__adddf3+0xe6>
  4060e6:	f04f 0203 	mov.w	r2, #3
  4060ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4060ee:	bf18      	it	ne
  4060f0:	3203      	addne	r2, #3
  4060f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4060f6:	bf18      	it	ne
  4060f8:	3203      	addne	r2, #3
  4060fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4060fe:	f1c2 0320 	rsb	r3, r2, #32
  406102:	fa00 fc03 	lsl.w	ip, r0, r3
  406106:	fa20 f002 	lsr.w	r0, r0, r2
  40610a:	fa01 fe03 	lsl.w	lr, r1, r3
  40610e:	ea40 000e 	orr.w	r0, r0, lr
  406112:	fa21 f102 	lsr.w	r1, r1, r2
  406116:	4414      	add	r4, r2
  406118:	e6c1      	b.n	405e9e <__adddf3+0xe6>
  40611a:	bf00      	nop

0040611c <__aeabi_dmul>:
  40611c:	b570      	push	{r4, r5, r6, lr}
  40611e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  406122:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  406126:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40612a:	bf1d      	ittte	ne
  40612c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  406130:	ea94 0f0c 	teqne	r4, ip
  406134:	ea95 0f0c 	teqne	r5, ip
  406138:	f000 f8de 	bleq	4062f8 <__aeabi_dmul+0x1dc>
  40613c:	442c      	add	r4, r5
  40613e:	ea81 0603 	eor.w	r6, r1, r3
  406142:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  406146:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40614a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40614e:	bf18      	it	ne
  406150:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  406154:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406158:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40615c:	d038      	beq.n	4061d0 <__aeabi_dmul+0xb4>
  40615e:	fba0 ce02 	umull	ip, lr, r0, r2
  406162:	f04f 0500 	mov.w	r5, #0
  406166:	fbe1 e502 	umlal	lr, r5, r1, r2
  40616a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40616e:	fbe0 e503 	umlal	lr, r5, r0, r3
  406172:	f04f 0600 	mov.w	r6, #0
  406176:	fbe1 5603 	umlal	r5, r6, r1, r3
  40617a:	f09c 0f00 	teq	ip, #0
  40617e:	bf18      	it	ne
  406180:	f04e 0e01 	orrne.w	lr, lr, #1
  406184:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  406188:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40618c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  406190:	d204      	bcs.n	40619c <__aeabi_dmul+0x80>
  406192:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  406196:	416d      	adcs	r5, r5
  406198:	eb46 0606 	adc.w	r6, r6, r6
  40619c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4061a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4061a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4061a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4061ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4061b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4061b4:	bf88      	it	hi
  4061b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4061ba:	d81e      	bhi.n	4061fa <__aeabi_dmul+0xde>
  4061bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4061c0:	bf08      	it	eq
  4061c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4061c6:	f150 0000 	adcs.w	r0, r0, #0
  4061ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4061ce:	bd70      	pop	{r4, r5, r6, pc}
  4061d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4061d4:	ea46 0101 	orr.w	r1, r6, r1
  4061d8:	ea40 0002 	orr.w	r0, r0, r2
  4061dc:	ea81 0103 	eor.w	r1, r1, r3
  4061e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4061e4:	bfc2      	ittt	gt
  4061e6:	ebd4 050c 	rsbsgt	r5, r4, ip
  4061ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4061ee:	bd70      	popgt	{r4, r5, r6, pc}
  4061f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4061f4:	f04f 0e00 	mov.w	lr, #0
  4061f8:	3c01      	subs	r4, #1
  4061fa:	f300 80ab 	bgt.w	406354 <__aeabi_dmul+0x238>
  4061fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
  406202:	bfde      	ittt	le
  406204:	2000      	movle	r0, #0
  406206:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40620a:	bd70      	pople	{r4, r5, r6, pc}
  40620c:	f1c4 0400 	rsb	r4, r4, #0
  406210:	3c20      	subs	r4, #32
  406212:	da35      	bge.n	406280 <__aeabi_dmul+0x164>
  406214:	340c      	adds	r4, #12
  406216:	dc1b      	bgt.n	406250 <__aeabi_dmul+0x134>
  406218:	f104 0414 	add.w	r4, r4, #20
  40621c:	f1c4 0520 	rsb	r5, r4, #32
  406220:	fa00 f305 	lsl.w	r3, r0, r5
  406224:	fa20 f004 	lsr.w	r0, r0, r4
  406228:	fa01 f205 	lsl.w	r2, r1, r5
  40622c:	ea40 0002 	orr.w	r0, r0, r2
  406230:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  406234:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  406238:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40623c:	fa21 f604 	lsr.w	r6, r1, r4
  406240:	eb42 0106 	adc.w	r1, r2, r6
  406244:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406248:	bf08      	it	eq
  40624a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40624e:	bd70      	pop	{r4, r5, r6, pc}
  406250:	f1c4 040c 	rsb	r4, r4, #12
  406254:	f1c4 0520 	rsb	r5, r4, #32
  406258:	fa00 f304 	lsl.w	r3, r0, r4
  40625c:	fa20 f005 	lsr.w	r0, r0, r5
  406260:	fa01 f204 	lsl.w	r2, r1, r4
  406264:	ea40 0002 	orr.w	r0, r0, r2
  406268:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40626c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  406270:	f141 0100 	adc.w	r1, r1, #0
  406274:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406278:	bf08      	it	eq
  40627a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40627e:	bd70      	pop	{r4, r5, r6, pc}
  406280:	f1c4 0520 	rsb	r5, r4, #32
  406284:	fa00 f205 	lsl.w	r2, r0, r5
  406288:	ea4e 0e02 	orr.w	lr, lr, r2
  40628c:	fa20 f304 	lsr.w	r3, r0, r4
  406290:	fa01 f205 	lsl.w	r2, r1, r5
  406294:	ea43 0302 	orr.w	r3, r3, r2
  406298:	fa21 f004 	lsr.w	r0, r1, r4
  40629c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4062a0:	fa21 f204 	lsr.w	r2, r1, r4
  4062a4:	ea20 0002 	bic.w	r0, r0, r2
  4062a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4062ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4062b0:	bf08      	it	eq
  4062b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4062b6:	bd70      	pop	{r4, r5, r6, pc}
  4062b8:	f094 0f00 	teq	r4, #0
  4062bc:	d10f      	bne.n	4062de <__aeabi_dmul+0x1c2>
  4062be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4062c2:	0040      	lsls	r0, r0, #1
  4062c4:	eb41 0101 	adc.w	r1, r1, r1
  4062c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4062cc:	bf08      	it	eq
  4062ce:	3c01      	subeq	r4, #1
  4062d0:	d0f7      	beq.n	4062c2 <__aeabi_dmul+0x1a6>
  4062d2:	ea41 0106 	orr.w	r1, r1, r6
  4062d6:	f095 0f00 	teq	r5, #0
  4062da:	bf18      	it	ne
  4062dc:	4770      	bxne	lr
  4062de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4062e2:	0052      	lsls	r2, r2, #1
  4062e4:	eb43 0303 	adc.w	r3, r3, r3
  4062e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4062ec:	bf08      	it	eq
  4062ee:	3d01      	subeq	r5, #1
  4062f0:	d0f7      	beq.n	4062e2 <__aeabi_dmul+0x1c6>
  4062f2:	ea43 0306 	orr.w	r3, r3, r6
  4062f6:	4770      	bx	lr
  4062f8:	ea94 0f0c 	teq	r4, ip
  4062fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  406300:	bf18      	it	ne
  406302:	ea95 0f0c 	teqne	r5, ip
  406306:	d00c      	beq.n	406322 <__aeabi_dmul+0x206>
  406308:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40630c:	bf18      	it	ne
  40630e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  406312:	d1d1      	bne.n	4062b8 <__aeabi_dmul+0x19c>
  406314:	ea81 0103 	eor.w	r1, r1, r3
  406318:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40631c:	f04f 0000 	mov.w	r0, #0
  406320:	bd70      	pop	{r4, r5, r6, pc}
  406322:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  406326:	bf06      	itte	eq
  406328:	4610      	moveq	r0, r2
  40632a:	4619      	moveq	r1, r3
  40632c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  406330:	d019      	beq.n	406366 <__aeabi_dmul+0x24a>
  406332:	ea94 0f0c 	teq	r4, ip
  406336:	d102      	bne.n	40633e <__aeabi_dmul+0x222>
  406338:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40633c:	d113      	bne.n	406366 <__aeabi_dmul+0x24a>
  40633e:	ea95 0f0c 	teq	r5, ip
  406342:	d105      	bne.n	406350 <__aeabi_dmul+0x234>
  406344:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  406348:	bf1c      	itt	ne
  40634a:	4610      	movne	r0, r2
  40634c:	4619      	movne	r1, r3
  40634e:	d10a      	bne.n	406366 <__aeabi_dmul+0x24a>
  406350:	ea81 0103 	eor.w	r1, r1, r3
  406354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406358:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40635c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  406360:	f04f 0000 	mov.w	r0, #0
  406364:	bd70      	pop	{r4, r5, r6, pc}
  406366:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40636a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40636e:	bd70      	pop	{r4, r5, r6, pc}

00406370 <__aeabi_ddiv>:
  406370:	b570      	push	{r4, r5, r6, lr}
  406372:	f04f 0cff 	mov.w	ip, #255	; 0xff
  406376:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40637a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40637e:	bf1d      	ittte	ne
  406380:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  406384:	ea94 0f0c 	teqne	r4, ip
  406388:	ea95 0f0c 	teqne	r5, ip
  40638c:	f000 f8a7 	bleq	4064de <__aeabi_ddiv+0x16e>
  406390:	eba4 0405 	sub.w	r4, r4, r5
  406394:	ea81 0e03 	eor.w	lr, r1, r3
  406398:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40639c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4063a0:	f000 8088 	beq.w	4064b4 <__aeabi_ddiv+0x144>
  4063a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4063a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4063ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4063b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4063b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4063b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4063bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4063c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4063c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4063c8:	429d      	cmp	r5, r3
  4063ca:	bf08      	it	eq
  4063cc:	4296      	cmpeq	r6, r2
  4063ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4063d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4063d6:	d202      	bcs.n	4063de <__aeabi_ddiv+0x6e>
  4063d8:	085b      	lsrs	r3, r3, #1
  4063da:	ea4f 0232 	mov.w	r2, r2, rrx
  4063de:	1ab6      	subs	r6, r6, r2
  4063e0:	eb65 0503 	sbc.w	r5, r5, r3
  4063e4:	085b      	lsrs	r3, r3, #1
  4063e6:	ea4f 0232 	mov.w	r2, r2, rrx
  4063ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4063ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4063f2:	ebb6 0e02 	subs.w	lr, r6, r2
  4063f6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4063fa:	bf22      	ittt	cs
  4063fc:	1ab6      	subcs	r6, r6, r2
  4063fe:	4675      	movcs	r5, lr
  406400:	ea40 000c 	orrcs.w	r0, r0, ip
  406404:	085b      	lsrs	r3, r3, #1
  406406:	ea4f 0232 	mov.w	r2, r2, rrx
  40640a:	ebb6 0e02 	subs.w	lr, r6, r2
  40640e:	eb75 0e03 	sbcs.w	lr, r5, r3
  406412:	bf22      	ittt	cs
  406414:	1ab6      	subcs	r6, r6, r2
  406416:	4675      	movcs	r5, lr
  406418:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40641c:	085b      	lsrs	r3, r3, #1
  40641e:	ea4f 0232 	mov.w	r2, r2, rrx
  406422:	ebb6 0e02 	subs.w	lr, r6, r2
  406426:	eb75 0e03 	sbcs.w	lr, r5, r3
  40642a:	bf22      	ittt	cs
  40642c:	1ab6      	subcs	r6, r6, r2
  40642e:	4675      	movcs	r5, lr
  406430:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  406434:	085b      	lsrs	r3, r3, #1
  406436:	ea4f 0232 	mov.w	r2, r2, rrx
  40643a:	ebb6 0e02 	subs.w	lr, r6, r2
  40643e:	eb75 0e03 	sbcs.w	lr, r5, r3
  406442:	bf22      	ittt	cs
  406444:	1ab6      	subcs	r6, r6, r2
  406446:	4675      	movcs	r5, lr
  406448:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40644c:	ea55 0e06 	orrs.w	lr, r5, r6
  406450:	d018      	beq.n	406484 <__aeabi_ddiv+0x114>
  406452:	ea4f 1505 	mov.w	r5, r5, lsl #4
  406456:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40645a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40645e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  406462:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  406466:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40646a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40646e:	d1c0      	bne.n	4063f2 <__aeabi_ddiv+0x82>
  406470:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406474:	d10b      	bne.n	40648e <__aeabi_ddiv+0x11e>
  406476:	ea41 0100 	orr.w	r1, r1, r0
  40647a:	f04f 0000 	mov.w	r0, #0
  40647e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  406482:	e7b6      	b.n	4063f2 <__aeabi_ddiv+0x82>
  406484:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406488:	bf04      	itt	eq
  40648a:	4301      	orreq	r1, r0
  40648c:	2000      	moveq	r0, #0
  40648e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  406492:	bf88      	it	hi
  406494:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  406498:	f63f aeaf 	bhi.w	4061fa <__aeabi_dmul+0xde>
  40649c:	ebb5 0c03 	subs.w	ip, r5, r3
  4064a0:	bf04      	itt	eq
  4064a2:	ebb6 0c02 	subseq.w	ip, r6, r2
  4064a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4064aa:	f150 0000 	adcs.w	r0, r0, #0
  4064ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4064b2:	bd70      	pop	{r4, r5, r6, pc}
  4064b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4064b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4064bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4064c0:	bfc2      	ittt	gt
  4064c2:	ebd4 050c 	rsbsgt	r5, r4, ip
  4064c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4064ca:	bd70      	popgt	{r4, r5, r6, pc}
  4064cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4064d0:	f04f 0e00 	mov.w	lr, #0
  4064d4:	3c01      	subs	r4, #1
  4064d6:	e690      	b.n	4061fa <__aeabi_dmul+0xde>
  4064d8:	ea45 0e06 	orr.w	lr, r5, r6
  4064dc:	e68d      	b.n	4061fa <__aeabi_dmul+0xde>
  4064de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4064e2:	ea94 0f0c 	teq	r4, ip
  4064e6:	bf08      	it	eq
  4064e8:	ea95 0f0c 	teqeq	r5, ip
  4064ec:	f43f af3b 	beq.w	406366 <__aeabi_dmul+0x24a>
  4064f0:	ea94 0f0c 	teq	r4, ip
  4064f4:	d10a      	bne.n	40650c <__aeabi_ddiv+0x19c>
  4064f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4064fa:	f47f af34 	bne.w	406366 <__aeabi_dmul+0x24a>
  4064fe:	ea95 0f0c 	teq	r5, ip
  406502:	f47f af25 	bne.w	406350 <__aeabi_dmul+0x234>
  406506:	4610      	mov	r0, r2
  406508:	4619      	mov	r1, r3
  40650a:	e72c      	b.n	406366 <__aeabi_dmul+0x24a>
  40650c:	ea95 0f0c 	teq	r5, ip
  406510:	d106      	bne.n	406520 <__aeabi_ddiv+0x1b0>
  406512:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  406516:	f43f aefd 	beq.w	406314 <__aeabi_dmul+0x1f8>
  40651a:	4610      	mov	r0, r2
  40651c:	4619      	mov	r1, r3
  40651e:	e722      	b.n	406366 <__aeabi_dmul+0x24a>
  406520:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  406524:	bf18      	it	ne
  406526:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40652a:	f47f aec5 	bne.w	4062b8 <__aeabi_dmul+0x19c>
  40652e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  406532:	f47f af0d 	bne.w	406350 <__aeabi_dmul+0x234>
  406536:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40653a:	f47f aeeb 	bne.w	406314 <__aeabi_dmul+0x1f8>
  40653e:	e712      	b.n	406366 <__aeabi_dmul+0x24a>

00406540 <__aeabi_d2f>:
  406540:	ea4f 0241 	mov.w	r2, r1, lsl #1
  406544:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  406548:	bf24      	itt	cs
  40654a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40654e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  406552:	d90d      	bls.n	406570 <__aeabi_d2f+0x30>
  406554:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  406558:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  40655c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  406560:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  406564:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  406568:	bf08      	it	eq
  40656a:	f020 0001 	biceq.w	r0, r0, #1
  40656e:	4770      	bx	lr
  406570:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  406574:	d121      	bne.n	4065ba <__aeabi_d2f+0x7a>
  406576:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  40657a:	bfbc      	itt	lt
  40657c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  406580:	4770      	bxlt	lr
  406582:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406586:	ea4f 5252 	mov.w	r2, r2, lsr #21
  40658a:	f1c2 0218 	rsb	r2, r2, #24
  40658e:	f1c2 0c20 	rsb	ip, r2, #32
  406592:	fa10 f30c 	lsls.w	r3, r0, ip
  406596:	fa20 f002 	lsr.w	r0, r0, r2
  40659a:	bf18      	it	ne
  40659c:	f040 0001 	orrne.w	r0, r0, #1
  4065a0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4065a4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  4065a8:	fa03 fc0c 	lsl.w	ip, r3, ip
  4065ac:	ea40 000c 	orr.w	r0, r0, ip
  4065b0:	fa23 f302 	lsr.w	r3, r3, r2
  4065b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
  4065b8:	e7cc      	b.n	406554 <__aeabi_d2f+0x14>
  4065ba:	ea7f 5362 	mvns.w	r3, r2, asr #21
  4065be:	d107      	bne.n	4065d0 <__aeabi_d2f+0x90>
  4065c0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  4065c4:	bf1e      	ittt	ne
  4065c6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  4065ca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  4065ce:	4770      	bxne	lr
  4065d0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  4065d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4065d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4065dc:	4770      	bx	lr
  4065de:	bf00      	nop

004065e0 <__libc_init_array>:
  4065e0:	b570      	push	{r4, r5, r6, lr}
  4065e2:	4e0f      	ldr	r6, [pc, #60]	; (406620 <__libc_init_array+0x40>)
  4065e4:	4d0f      	ldr	r5, [pc, #60]	; (406624 <__libc_init_array+0x44>)
  4065e6:	1b76      	subs	r6, r6, r5
  4065e8:	10b6      	asrs	r6, r6, #2
  4065ea:	bf18      	it	ne
  4065ec:	2400      	movne	r4, #0
  4065ee:	d005      	beq.n	4065fc <__libc_init_array+0x1c>
  4065f0:	3401      	adds	r4, #1
  4065f2:	f855 3b04 	ldr.w	r3, [r5], #4
  4065f6:	4798      	blx	r3
  4065f8:	42a6      	cmp	r6, r4
  4065fa:	d1f9      	bne.n	4065f0 <__libc_init_array+0x10>
  4065fc:	4e0a      	ldr	r6, [pc, #40]	; (406628 <__libc_init_array+0x48>)
  4065fe:	4d0b      	ldr	r5, [pc, #44]	; (40662c <__libc_init_array+0x4c>)
  406600:	1b76      	subs	r6, r6, r5
  406602:	f003 fcf1 	bl	409fe8 <_init>
  406606:	10b6      	asrs	r6, r6, #2
  406608:	bf18      	it	ne
  40660a:	2400      	movne	r4, #0
  40660c:	d006      	beq.n	40661c <__libc_init_array+0x3c>
  40660e:	3401      	adds	r4, #1
  406610:	f855 3b04 	ldr.w	r3, [r5], #4
  406614:	4798      	blx	r3
  406616:	42a6      	cmp	r6, r4
  406618:	d1f9      	bne.n	40660e <__libc_init_array+0x2e>
  40661a:	bd70      	pop	{r4, r5, r6, pc}
  40661c:	bd70      	pop	{r4, r5, r6, pc}
  40661e:	bf00      	nop
  406620:	00409ff4 	.word	0x00409ff4
  406624:	00409ff4 	.word	0x00409ff4
  406628:	00409ffc 	.word	0x00409ffc
  40662c:	00409ff4 	.word	0x00409ff4

00406630 <iprintf>:
  406630:	b40f      	push	{r0, r1, r2, r3}
  406632:	b500      	push	{lr}
  406634:	4907      	ldr	r1, [pc, #28]	; (406654 <iprintf+0x24>)
  406636:	b083      	sub	sp, #12
  406638:	ab04      	add	r3, sp, #16
  40663a:	6808      	ldr	r0, [r1, #0]
  40663c:	f853 2b04 	ldr.w	r2, [r3], #4
  406640:	6881      	ldr	r1, [r0, #8]
  406642:	9301      	str	r3, [sp, #4]
  406644:	f000 fc8a 	bl	406f5c <_vfiprintf_r>
  406648:	b003      	add	sp, #12
  40664a:	f85d eb04 	ldr.w	lr, [sp], #4
  40664e:	b004      	add	sp, #16
  406650:	4770      	bx	lr
  406652:	bf00      	nop
  406654:	20400058 	.word	0x20400058

00406658 <malloc>:
  406658:	4b02      	ldr	r3, [pc, #8]	; (406664 <malloc+0xc>)
  40665a:	4601      	mov	r1, r0
  40665c:	6818      	ldr	r0, [r3, #0]
  40665e:	f000 b803 	b.w	406668 <_malloc_r>
  406662:	bf00      	nop
  406664:	20400058 	.word	0x20400058

00406668 <_malloc_r>:
  406668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40666c:	f101 060b 	add.w	r6, r1, #11
  406670:	2e16      	cmp	r6, #22
  406672:	b083      	sub	sp, #12
  406674:	4605      	mov	r5, r0
  406676:	f240 809e 	bls.w	4067b6 <_malloc_r+0x14e>
  40667a:	f036 0607 	bics.w	r6, r6, #7
  40667e:	f100 80bd 	bmi.w	4067fc <_malloc_r+0x194>
  406682:	42b1      	cmp	r1, r6
  406684:	f200 80ba 	bhi.w	4067fc <_malloc_r+0x194>
  406688:	f000 fb86 	bl	406d98 <__malloc_lock>
  40668c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  406690:	f0c0 8293 	bcc.w	406bba <_malloc_r+0x552>
  406694:	0a73      	lsrs	r3, r6, #9
  406696:	f000 80b8 	beq.w	40680a <_malloc_r+0x1a2>
  40669a:	2b04      	cmp	r3, #4
  40669c:	f200 8179 	bhi.w	406992 <_malloc_r+0x32a>
  4066a0:	09b3      	lsrs	r3, r6, #6
  4066a2:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4066a6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4066aa:	00c3      	lsls	r3, r0, #3
  4066ac:	4fbf      	ldr	r7, [pc, #764]	; (4069ac <_malloc_r+0x344>)
  4066ae:	443b      	add	r3, r7
  4066b0:	f1a3 0108 	sub.w	r1, r3, #8
  4066b4:	685c      	ldr	r4, [r3, #4]
  4066b6:	42a1      	cmp	r1, r4
  4066b8:	d106      	bne.n	4066c8 <_malloc_r+0x60>
  4066ba:	e00c      	b.n	4066d6 <_malloc_r+0x6e>
  4066bc:	2a00      	cmp	r2, #0
  4066be:	f280 80aa 	bge.w	406816 <_malloc_r+0x1ae>
  4066c2:	68e4      	ldr	r4, [r4, #12]
  4066c4:	42a1      	cmp	r1, r4
  4066c6:	d006      	beq.n	4066d6 <_malloc_r+0x6e>
  4066c8:	6863      	ldr	r3, [r4, #4]
  4066ca:	f023 0303 	bic.w	r3, r3, #3
  4066ce:	1b9a      	subs	r2, r3, r6
  4066d0:	2a0f      	cmp	r2, #15
  4066d2:	ddf3      	ble.n	4066bc <_malloc_r+0x54>
  4066d4:	4670      	mov	r0, lr
  4066d6:	693c      	ldr	r4, [r7, #16]
  4066d8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4069c0 <_malloc_r+0x358>
  4066dc:	4574      	cmp	r4, lr
  4066de:	f000 81ab 	beq.w	406a38 <_malloc_r+0x3d0>
  4066e2:	6863      	ldr	r3, [r4, #4]
  4066e4:	f023 0303 	bic.w	r3, r3, #3
  4066e8:	1b9a      	subs	r2, r3, r6
  4066ea:	2a0f      	cmp	r2, #15
  4066ec:	f300 8190 	bgt.w	406a10 <_malloc_r+0x3a8>
  4066f0:	2a00      	cmp	r2, #0
  4066f2:	f8c7 e014 	str.w	lr, [r7, #20]
  4066f6:	f8c7 e010 	str.w	lr, [r7, #16]
  4066fa:	f280 809d 	bge.w	406838 <_malloc_r+0x1d0>
  4066fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406702:	f080 8161 	bcs.w	4069c8 <_malloc_r+0x360>
  406706:	08db      	lsrs	r3, r3, #3
  406708:	f103 0c01 	add.w	ip, r3, #1
  40670c:	1099      	asrs	r1, r3, #2
  40670e:	687a      	ldr	r2, [r7, #4]
  406710:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  406714:	f8c4 8008 	str.w	r8, [r4, #8]
  406718:	2301      	movs	r3, #1
  40671a:	408b      	lsls	r3, r1
  40671c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  406720:	4313      	orrs	r3, r2
  406722:	3908      	subs	r1, #8
  406724:	60e1      	str	r1, [r4, #12]
  406726:	607b      	str	r3, [r7, #4]
  406728:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40672c:	f8c8 400c 	str.w	r4, [r8, #12]
  406730:	1082      	asrs	r2, r0, #2
  406732:	2401      	movs	r4, #1
  406734:	4094      	lsls	r4, r2
  406736:	429c      	cmp	r4, r3
  406738:	f200 808b 	bhi.w	406852 <_malloc_r+0x1ea>
  40673c:	421c      	tst	r4, r3
  40673e:	d106      	bne.n	40674e <_malloc_r+0xe6>
  406740:	f020 0003 	bic.w	r0, r0, #3
  406744:	0064      	lsls	r4, r4, #1
  406746:	421c      	tst	r4, r3
  406748:	f100 0004 	add.w	r0, r0, #4
  40674c:	d0fa      	beq.n	406744 <_malloc_r+0xdc>
  40674e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  406752:	46cc      	mov	ip, r9
  406754:	4680      	mov	r8, r0
  406756:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40675a:	459c      	cmp	ip, r3
  40675c:	d107      	bne.n	40676e <_malloc_r+0x106>
  40675e:	e16d      	b.n	406a3c <_malloc_r+0x3d4>
  406760:	2a00      	cmp	r2, #0
  406762:	f280 817b 	bge.w	406a5c <_malloc_r+0x3f4>
  406766:	68db      	ldr	r3, [r3, #12]
  406768:	459c      	cmp	ip, r3
  40676a:	f000 8167 	beq.w	406a3c <_malloc_r+0x3d4>
  40676e:	6859      	ldr	r1, [r3, #4]
  406770:	f021 0103 	bic.w	r1, r1, #3
  406774:	1b8a      	subs	r2, r1, r6
  406776:	2a0f      	cmp	r2, #15
  406778:	ddf2      	ble.n	406760 <_malloc_r+0xf8>
  40677a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40677e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  406782:	9300      	str	r3, [sp, #0]
  406784:	199c      	adds	r4, r3, r6
  406786:	4628      	mov	r0, r5
  406788:	f046 0601 	orr.w	r6, r6, #1
  40678c:	f042 0501 	orr.w	r5, r2, #1
  406790:	605e      	str	r6, [r3, #4]
  406792:	f8c8 c00c 	str.w	ip, [r8, #12]
  406796:	f8cc 8008 	str.w	r8, [ip, #8]
  40679a:	617c      	str	r4, [r7, #20]
  40679c:	613c      	str	r4, [r7, #16]
  40679e:	f8c4 e00c 	str.w	lr, [r4, #12]
  4067a2:	f8c4 e008 	str.w	lr, [r4, #8]
  4067a6:	6065      	str	r5, [r4, #4]
  4067a8:	505a      	str	r2, [r3, r1]
  4067aa:	f000 fafb 	bl	406da4 <__malloc_unlock>
  4067ae:	9b00      	ldr	r3, [sp, #0]
  4067b0:	f103 0408 	add.w	r4, r3, #8
  4067b4:	e01e      	b.n	4067f4 <_malloc_r+0x18c>
  4067b6:	2910      	cmp	r1, #16
  4067b8:	d820      	bhi.n	4067fc <_malloc_r+0x194>
  4067ba:	f000 faed 	bl	406d98 <__malloc_lock>
  4067be:	2610      	movs	r6, #16
  4067c0:	2318      	movs	r3, #24
  4067c2:	2002      	movs	r0, #2
  4067c4:	4f79      	ldr	r7, [pc, #484]	; (4069ac <_malloc_r+0x344>)
  4067c6:	443b      	add	r3, r7
  4067c8:	f1a3 0208 	sub.w	r2, r3, #8
  4067cc:	685c      	ldr	r4, [r3, #4]
  4067ce:	4294      	cmp	r4, r2
  4067d0:	f000 813d 	beq.w	406a4e <_malloc_r+0x3e6>
  4067d4:	6863      	ldr	r3, [r4, #4]
  4067d6:	68e1      	ldr	r1, [r4, #12]
  4067d8:	68a6      	ldr	r6, [r4, #8]
  4067da:	f023 0303 	bic.w	r3, r3, #3
  4067de:	4423      	add	r3, r4
  4067e0:	4628      	mov	r0, r5
  4067e2:	685a      	ldr	r2, [r3, #4]
  4067e4:	60f1      	str	r1, [r6, #12]
  4067e6:	f042 0201 	orr.w	r2, r2, #1
  4067ea:	608e      	str	r6, [r1, #8]
  4067ec:	605a      	str	r2, [r3, #4]
  4067ee:	f000 fad9 	bl	406da4 <__malloc_unlock>
  4067f2:	3408      	adds	r4, #8
  4067f4:	4620      	mov	r0, r4
  4067f6:	b003      	add	sp, #12
  4067f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4067fc:	2400      	movs	r4, #0
  4067fe:	230c      	movs	r3, #12
  406800:	4620      	mov	r0, r4
  406802:	602b      	str	r3, [r5, #0]
  406804:	b003      	add	sp, #12
  406806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40680a:	2040      	movs	r0, #64	; 0x40
  40680c:	f44f 7300 	mov.w	r3, #512	; 0x200
  406810:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  406814:	e74a      	b.n	4066ac <_malloc_r+0x44>
  406816:	4423      	add	r3, r4
  406818:	68e1      	ldr	r1, [r4, #12]
  40681a:	685a      	ldr	r2, [r3, #4]
  40681c:	68a6      	ldr	r6, [r4, #8]
  40681e:	f042 0201 	orr.w	r2, r2, #1
  406822:	60f1      	str	r1, [r6, #12]
  406824:	4628      	mov	r0, r5
  406826:	608e      	str	r6, [r1, #8]
  406828:	605a      	str	r2, [r3, #4]
  40682a:	f000 fabb 	bl	406da4 <__malloc_unlock>
  40682e:	3408      	adds	r4, #8
  406830:	4620      	mov	r0, r4
  406832:	b003      	add	sp, #12
  406834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406838:	4423      	add	r3, r4
  40683a:	4628      	mov	r0, r5
  40683c:	685a      	ldr	r2, [r3, #4]
  40683e:	f042 0201 	orr.w	r2, r2, #1
  406842:	605a      	str	r2, [r3, #4]
  406844:	f000 faae 	bl	406da4 <__malloc_unlock>
  406848:	3408      	adds	r4, #8
  40684a:	4620      	mov	r0, r4
  40684c:	b003      	add	sp, #12
  40684e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406852:	68bc      	ldr	r4, [r7, #8]
  406854:	6863      	ldr	r3, [r4, #4]
  406856:	f023 0803 	bic.w	r8, r3, #3
  40685a:	45b0      	cmp	r8, r6
  40685c:	d304      	bcc.n	406868 <_malloc_r+0x200>
  40685e:	eba8 0306 	sub.w	r3, r8, r6
  406862:	2b0f      	cmp	r3, #15
  406864:	f300 8085 	bgt.w	406972 <_malloc_r+0x30a>
  406868:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4069c4 <_malloc_r+0x35c>
  40686c:	4b50      	ldr	r3, [pc, #320]	; (4069b0 <_malloc_r+0x348>)
  40686e:	f8d9 2000 	ldr.w	r2, [r9]
  406872:	681b      	ldr	r3, [r3, #0]
  406874:	3201      	adds	r2, #1
  406876:	4433      	add	r3, r6
  406878:	eb04 0a08 	add.w	sl, r4, r8
  40687c:	f000 8155 	beq.w	406b2a <_malloc_r+0x4c2>
  406880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  406884:	330f      	adds	r3, #15
  406886:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40688a:	f02b 0b0f 	bic.w	fp, fp, #15
  40688e:	4659      	mov	r1, fp
  406890:	4628      	mov	r0, r5
  406892:	f000 fa8d 	bl	406db0 <_sbrk_r>
  406896:	1c41      	adds	r1, r0, #1
  406898:	4602      	mov	r2, r0
  40689a:	f000 80fc 	beq.w	406a96 <_malloc_r+0x42e>
  40689e:	4582      	cmp	sl, r0
  4068a0:	f200 80f7 	bhi.w	406a92 <_malloc_r+0x42a>
  4068a4:	4b43      	ldr	r3, [pc, #268]	; (4069b4 <_malloc_r+0x34c>)
  4068a6:	6819      	ldr	r1, [r3, #0]
  4068a8:	4459      	add	r1, fp
  4068aa:	6019      	str	r1, [r3, #0]
  4068ac:	f000 814d 	beq.w	406b4a <_malloc_r+0x4e2>
  4068b0:	f8d9 0000 	ldr.w	r0, [r9]
  4068b4:	3001      	adds	r0, #1
  4068b6:	bf1b      	ittet	ne
  4068b8:	eba2 0a0a 	subne.w	sl, r2, sl
  4068bc:	4451      	addne	r1, sl
  4068be:	f8c9 2000 	streq.w	r2, [r9]
  4068c2:	6019      	strne	r1, [r3, #0]
  4068c4:	f012 0107 	ands.w	r1, r2, #7
  4068c8:	f000 8115 	beq.w	406af6 <_malloc_r+0x48e>
  4068cc:	f1c1 0008 	rsb	r0, r1, #8
  4068d0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4068d4:	4402      	add	r2, r0
  4068d6:	3108      	adds	r1, #8
  4068d8:	eb02 090b 	add.w	r9, r2, fp
  4068dc:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4068e0:	eba1 0909 	sub.w	r9, r1, r9
  4068e4:	4649      	mov	r1, r9
  4068e6:	4628      	mov	r0, r5
  4068e8:	9301      	str	r3, [sp, #4]
  4068ea:	9200      	str	r2, [sp, #0]
  4068ec:	f000 fa60 	bl	406db0 <_sbrk_r>
  4068f0:	1c43      	adds	r3, r0, #1
  4068f2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4068f6:	f000 8143 	beq.w	406b80 <_malloc_r+0x518>
  4068fa:	1a80      	subs	r0, r0, r2
  4068fc:	4448      	add	r0, r9
  4068fe:	f040 0001 	orr.w	r0, r0, #1
  406902:	6819      	ldr	r1, [r3, #0]
  406904:	60ba      	str	r2, [r7, #8]
  406906:	4449      	add	r1, r9
  406908:	42bc      	cmp	r4, r7
  40690a:	6050      	str	r0, [r2, #4]
  40690c:	6019      	str	r1, [r3, #0]
  40690e:	d017      	beq.n	406940 <_malloc_r+0x2d8>
  406910:	f1b8 0f0f 	cmp.w	r8, #15
  406914:	f240 80fb 	bls.w	406b0e <_malloc_r+0x4a6>
  406918:	6860      	ldr	r0, [r4, #4]
  40691a:	f1a8 020c 	sub.w	r2, r8, #12
  40691e:	f022 0207 	bic.w	r2, r2, #7
  406922:	eb04 0e02 	add.w	lr, r4, r2
  406926:	f000 0001 	and.w	r0, r0, #1
  40692a:	f04f 0c05 	mov.w	ip, #5
  40692e:	4310      	orrs	r0, r2
  406930:	2a0f      	cmp	r2, #15
  406932:	6060      	str	r0, [r4, #4]
  406934:	f8ce c004 	str.w	ip, [lr, #4]
  406938:	f8ce c008 	str.w	ip, [lr, #8]
  40693c:	f200 8117 	bhi.w	406b6e <_malloc_r+0x506>
  406940:	4b1d      	ldr	r3, [pc, #116]	; (4069b8 <_malloc_r+0x350>)
  406942:	68bc      	ldr	r4, [r7, #8]
  406944:	681a      	ldr	r2, [r3, #0]
  406946:	4291      	cmp	r1, r2
  406948:	bf88      	it	hi
  40694a:	6019      	strhi	r1, [r3, #0]
  40694c:	4b1b      	ldr	r3, [pc, #108]	; (4069bc <_malloc_r+0x354>)
  40694e:	681a      	ldr	r2, [r3, #0]
  406950:	4291      	cmp	r1, r2
  406952:	6862      	ldr	r2, [r4, #4]
  406954:	bf88      	it	hi
  406956:	6019      	strhi	r1, [r3, #0]
  406958:	f022 0203 	bic.w	r2, r2, #3
  40695c:	4296      	cmp	r6, r2
  40695e:	eba2 0306 	sub.w	r3, r2, r6
  406962:	d801      	bhi.n	406968 <_malloc_r+0x300>
  406964:	2b0f      	cmp	r3, #15
  406966:	dc04      	bgt.n	406972 <_malloc_r+0x30a>
  406968:	4628      	mov	r0, r5
  40696a:	f000 fa1b 	bl	406da4 <__malloc_unlock>
  40696e:	2400      	movs	r4, #0
  406970:	e740      	b.n	4067f4 <_malloc_r+0x18c>
  406972:	19a2      	adds	r2, r4, r6
  406974:	f043 0301 	orr.w	r3, r3, #1
  406978:	f046 0601 	orr.w	r6, r6, #1
  40697c:	6066      	str	r6, [r4, #4]
  40697e:	4628      	mov	r0, r5
  406980:	60ba      	str	r2, [r7, #8]
  406982:	6053      	str	r3, [r2, #4]
  406984:	f000 fa0e 	bl	406da4 <__malloc_unlock>
  406988:	3408      	adds	r4, #8
  40698a:	4620      	mov	r0, r4
  40698c:	b003      	add	sp, #12
  40698e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406992:	2b14      	cmp	r3, #20
  406994:	d971      	bls.n	406a7a <_malloc_r+0x412>
  406996:	2b54      	cmp	r3, #84	; 0x54
  406998:	f200 80a3 	bhi.w	406ae2 <_malloc_r+0x47a>
  40699c:	0b33      	lsrs	r3, r6, #12
  40699e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4069a2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4069a6:	00c3      	lsls	r3, r0, #3
  4069a8:	e680      	b.n	4066ac <_malloc_r+0x44>
  4069aa:	bf00      	nop
  4069ac:	20400488 	.word	0x20400488
  4069b0:	2043c834 	.word	0x2043c834
  4069b4:	2043c804 	.word	0x2043c804
  4069b8:	2043c82c 	.word	0x2043c82c
  4069bc:	2043c830 	.word	0x2043c830
  4069c0:	20400490 	.word	0x20400490
  4069c4:	20400890 	.word	0x20400890
  4069c8:	0a5a      	lsrs	r2, r3, #9
  4069ca:	2a04      	cmp	r2, #4
  4069cc:	d95b      	bls.n	406a86 <_malloc_r+0x41e>
  4069ce:	2a14      	cmp	r2, #20
  4069d0:	f200 80ae 	bhi.w	406b30 <_malloc_r+0x4c8>
  4069d4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4069d8:	00c9      	lsls	r1, r1, #3
  4069da:	325b      	adds	r2, #91	; 0x5b
  4069dc:	eb07 0c01 	add.w	ip, r7, r1
  4069e0:	5879      	ldr	r1, [r7, r1]
  4069e2:	f1ac 0c08 	sub.w	ip, ip, #8
  4069e6:	458c      	cmp	ip, r1
  4069e8:	f000 8088 	beq.w	406afc <_malloc_r+0x494>
  4069ec:	684a      	ldr	r2, [r1, #4]
  4069ee:	f022 0203 	bic.w	r2, r2, #3
  4069f2:	4293      	cmp	r3, r2
  4069f4:	d273      	bcs.n	406ade <_malloc_r+0x476>
  4069f6:	6889      	ldr	r1, [r1, #8]
  4069f8:	458c      	cmp	ip, r1
  4069fa:	d1f7      	bne.n	4069ec <_malloc_r+0x384>
  4069fc:	f8dc 200c 	ldr.w	r2, [ip, #12]
  406a00:	687b      	ldr	r3, [r7, #4]
  406a02:	60e2      	str	r2, [r4, #12]
  406a04:	f8c4 c008 	str.w	ip, [r4, #8]
  406a08:	6094      	str	r4, [r2, #8]
  406a0a:	f8cc 400c 	str.w	r4, [ip, #12]
  406a0e:	e68f      	b.n	406730 <_malloc_r+0xc8>
  406a10:	19a1      	adds	r1, r4, r6
  406a12:	f046 0c01 	orr.w	ip, r6, #1
  406a16:	f042 0601 	orr.w	r6, r2, #1
  406a1a:	f8c4 c004 	str.w	ip, [r4, #4]
  406a1e:	4628      	mov	r0, r5
  406a20:	6179      	str	r1, [r7, #20]
  406a22:	6139      	str	r1, [r7, #16]
  406a24:	f8c1 e00c 	str.w	lr, [r1, #12]
  406a28:	f8c1 e008 	str.w	lr, [r1, #8]
  406a2c:	604e      	str	r6, [r1, #4]
  406a2e:	50e2      	str	r2, [r4, r3]
  406a30:	f000 f9b8 	bl	406da4 <__malloc_unlock>
  406a34:	3408      	adds	r4, #8
  406a36:	e6dd      	b.n	4067f4 <_malloc_r+0x18c>
  406a38:	687b      	ldr	r3, [r7, #4]
  406a3a:	e679      	b.n	406730 <_malloc_r+0xc8>
  406a3c:	f108 0801 	add.w	r8, r8, #1
  406a40:	f018 0f03 	tst.w	r8, #3
  406a44:	f10c 0c08 	add.w	ip, ip, #8
  406a48:	f47f ae85 	bne.w	406756 <_malloc_r+0xee>
  406a4c:	e02d      	b.n	406aaa <_malloc_r+0x442>
  406a4e:	68dc      	ldr	r4, [r3, #12]
  406a50:	42a3      	cmp	r3, r4
  406a52:	bf08      	it	eq
  406a54:	3002      	addeq	r0, #2
  406a56:	f43f ae3e 	beq.w	4066d6 <_malloc_r+0x6e>
  406a5a:	e6bb      	b.n	4067d4 <_malloc_r+0x16c>
  406a5c:	4419      	add	r1, r3
  406a5e:	461c      	mov	r4, r3
  406a60:	684a      	ldr	r2, [r1, #4]
  406a62:	68db      	ldr	r3, [r3, #12]
  406a64:	f854 6f08 	ldr.w	r6, [r4, #8]!
  406a68:	f042 0201 	orr.w	r2, r2, #1
  406a6c:	604a      	str	r2, [r1, #4]
  406a6e:	4628      	mov	r0, r5
  406a70:	60f3      	str	r3, [r6, #12]
  406a72:	609e      	str	r6, [r3, #8]
  406a74:	f000 f996 	bl	406da4 <__malloc_unlock>
  406a78:	e6bc      	b.n	4067f4 <_malloc_r+0x18c>
  406a7a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  406a7e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  406a82:	00c3      	lsls	r3, r0, #3
  406a84:	e612      	b.n	4066ac <_malloc_r+0x44>
  406a86:	099a      	lsrs	r2, r3, #6
  406a88:	f102 0139 	add.w	r1, r2, #57	; 0x39
  406a8c:	00c9      	lsls	r1, r1, #3
  406a8e:	3238      	adds	r2, #56	; 0x38
  406a90:	e7a4      	b.n	4069dc <_malloc_r+0x374>
  406a92:	42bc      	cmp	r4, r7
  406a94:	d054      	beq.n	406b40 <_malloc_r+0x4d8>
  406a96:	68bc      	ldr	r4, [r7, #8]
  406a98:	6862      	ldr	r2, [r4, #4]
  406a9a:	f022 0203 	bic.w	r2, r2, #3
  406a9e:	e75d      	b.n	40695c <_malloc_r+0x2f4>
  406aa0:	f859 3908 	ldr.w	r3, [r9], #-8
  406aa4:	4599      	cmp	r9, r3
  406aa6:	f040 8086 	bne.w	406bb6 <_malloc_r+0x54e>
  406aaa:	f010 0f03 	tst.w	r0, #3
  406aae:	f100 30ff 	add.w	r0, r0, #4294967295
  406ab2:	d1f5      	bne.n	406aa0 <_malloc_r+0x438>
  406ab4:	687b      	ldr	r3, [r7, #4]
  406ab6:	ea23 0304 	bic.w	r3, r3, r4
  406aba:	607b      	str	r3, [r7, #4]
  406abc:	0064      	lsls	r4, r4, #1
  406abe:	429c      	cmp	r4, r3
  406ac0:	f63f aec7 	bhi.w	406852 <_malloc_r+0x1ea>
  406ac4:	2c00      	cmp	r4, #0
  406ac6:	f43f aec4 	beq.w	406852 <_malloc_r+0x1ea>
  406aca:	421c      	tst	r4, r3
  406acc:	4640      	mov	r0, r8
  406ace:	f47f ae3e 	bne.w	40674e <_malloc_r+0xe6>
  406ad2:	0064      	lsls	r4, r4, #1
  406ad4:	421c      	tst	r4, r3
  406ad6:	f100 0004 	add.w	r0, r0, #4
  406ada:	d0fa      	beq.n	406ad2 <_malloc_r+0x46a>
  406adc:	e637      	b.n	40674e <_malloc_r+0xe6>
  406ade:	468c      	mov	ip, r1
  406ae0:	e78c      	b.n	4069fc <_malloc_r+0x394>
  406ae2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  406ae6:	d815      	bhi.n	406b14 <_malloc_r+0x4ac>
  406ae8:	0bf3      	lsrs	r3, r6, #15
  406aea:	f103 0078 	add.w	r0, r3, #120	; 0x78
  406aee:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  406af2:	00c3      	lsls	r3, r0, #3
  406af4:	e5da      	b.n	4066ac <_malloc_r+0x44>
  406af6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  406afa:	e6ed      	b.n	4068d8 <_malloc_r+0x270>
  406afc:	687b      	ldr	r3, [r7, #4]
  406afe:	1092      	asrs	r2, r2, #2
  406b00:	2101      	movs	r1, #1
  406b02:	fa01 f202 	lsl.w	r2, r1, r2
  406b06:	4313      	orrs	r3, r2
  406b08:	607b      	str	r3, [r7, #4]
  406b0a:	4662      	mov	r2, ip
  406b0c:	e779      	b.n	406a02 <_malloc_r+0x39a>
  406b0e:	2301      	movs	r3, #1
  406b10:	6053      	str	r3, [r2, #4]
  406b12:	e729      	b.n	406968 <_malloc_r+0x300>
  406b14:	f240 5254 	movw	r2, #1364	; 0x554
  406b18:	4293      	cmp	r3, r2
  406b1a:	d822      	bhi.n	406b62 <_malloc_r+0x4fa>
  406b1c:	0cb3      	lsrs	r3, r6, #18
  406b1e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  406b22:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  406b26:	00c3      	lsls	r3, r0, #3
  406b28:	e5c0      	b.n	4066ac <_malloc_r+0x44>
  406b2a:	f103 0b10 	add.w	fp, r3, #16
  406b2e:	e6ae      	b.n	40688e <_malloc_r+0x226>
  406b30:	2a54      	cmp	r2, #84	; 0x54
  406b32:	d829      	bhi.n	406b88 <_malloc_r+0x520>
  406b34:	0b1a      	lsrs	r2, r3, #12
  406b36:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  406b3a:	00c9      	lsls	r1, r1, #3
  406b3c:	326e      	adds	r2, #110	; 0x6e
  406b3e:	e74d      	b.n	4069dc <_malloc_r+0x374>
  406b40:	4b20      	ldr	r3, [pc, #128]	; (406bc4 <_malloc_r+0x55c>)
  406b42:	6819      	ldr	r1, [r3, #0]
  406b44:	4459      	add	r1, fp
  406b46:	6019      	str	r1, [r3, #0]
  406b48:	e6b2      	b.n	4068b0 <_malloc_r+0x248>
  406b4a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  406b4e:	2800      	cmp	r0, #0
  406b50:	f47f aeae 	bne.w	4068b0 <_malloc_r+0x248>
  406b54:	eb08 030b 	add.w	r3, r8, fp
  406b58:	68ba      	ldr	r2, [r7, #8]
  406b5a:	f043 0301 	orr.w	r3, r3, #1
  406b5e:	6053      	str	r3, [r2, #4]
  406b60:	e6ee      	b.n	406940 <_malloc_r+0x2d8>
  406b62:	207f      	movs	r0, #127	; 0x7f
  406b64:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  406b68:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  406b6c:	e59e      	b.n	4066ac <_malloc_r+0x44>
  406b6e:	f104 0108 	add.w	r1, r4, #8
  406b72:	4628      	mov	r0, r5
  406b74:	9300      	str	r3, [sp, #0]
  406b76:	f001 fb0d 	bl	408194 <_free_r>
  406b7a:	9b00      	ldr	r3, [sp, #0]
  406b7c:	6819      	ldr	r1, [r3, #0]
  406b7e:	e6df      	b.n	406940 <_malloc_r+0x2d8>
  406b80:	2001      	movs	r0, #1
  406b82:	f04f 0900 	mov.w	r9, #0
  406b86:	e6bc      	b.n	406902 <_malloc_r+0x29a>
  406b88:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406b8c:	d805      	bhi.n	406b9a <_malloc_r+0x532>
  406b8e:	0bda      	lsrs	r2, r3, #15
  406b90:	f102 0178 	add.w	r1, r2, #120	; 0x78
  406b94:	00c9      	lsls	r1, r1, #3
  406b96:	3277      	adds	r2, #119	; 0x77
  406b98:	e720      	b.n	4069dc <_malloc_r+0x374>
  406b9a:	f240 5154 	movw	r1, #1364	; 0x554
  406b9e:	428a      	cmp	r2, r1
  406ba0:	d805      	bhi.n	406bae <_malloc_r+0x546>
  406ba2:	0c9a      	lsrs	r2, r3, #18
  406ba4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  406ba8:	00c9      	lsls	r1, r1, #3
  406baa:	327c      	adds	r2, #124	; 0x7c
  406bac:	e716      	b.n	4069dc <_malloc_r+0x374>
  406bae:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  406bb2:	227e      	movs	r2, #126	; 0x7e
  406bb4:	e712      	b.n	4069dc <_malloc_r+0x374>
  406bb6:	687b      	ldr	r3, [r7, #4]
  406bb8:	e780      	b.n	406abc <_malloc_r+0x454>
  406bba:	08f0      	lsrs	r0, r6, #3
  406bbc:	f106 0308 	add.w	r3, r6, #8
  406bc0:	e600      	b.n	4067c4 <_malloc_r+0x15c>
  406bc2:	bf00      	nop
  406bc4:	2043c804 	.word	0x2043c804

00406bc8 <memcpy>:
  406bc8:	4684      	mov	ip, r0
  406bca:	ea41 0300 	orr.w	r3, r1, r0
  406bce:	f013 0303 	ands.w	r3, r3, #3
  406bd2:	d16d      	bne.n	406cb0 <memcpy+0xe8>
  406bd4:	3a40      	subs	r2, #64	; 0x40
  406bd6:	d341      	bcc.n	406c5c <memcpy+0x94>
  406bd8:	f851 3b04 	ldr.w	r3, [r1], #4
  406bdc:	f840 3b04 	str.w	r3, [r0], #4
  406be0:	f851 3b04 	ldr.w	r3, [r1], #4
  406be4:	f840 3b04 	str.w	r3, [r0], #4
  406be8:	f851 3b04 	ldr.w	r3, [r1], #4
  406bec:	f840 3b04 	str.w	r3, [r0], #4
  406bf0:	f851 3b04 	ldr.w	r3, [r1], #4
  406bf4:	f840 3b04 	str.w	r3, [r0], #4
  406bf8:	f851 3b04 	ldr.w	r3, [r1], #4
  406bfc:	f840 3b04 	str.w	r3, [r0], #4
  406c00:	f851 3b04 	ldr.w	r3, [r1], #4
  406c04:	f840 3b04 	str.w	r3, [r0], #4
  406c08:	f851 3b04 	ldr.w	r3, [r1], #4
  406c0c:	f840 3b04 	str.w	r3, [r0], #4
  406c10:	f851 3b04 	ldr.w	r3, [r1], #4
  406c14:	f840 3b04 	str.w	r3, [r0], #4
  406c18:	f851 3b04 	ldr.w	r3, [r1], #4
  406c1c:	f840 3b04 	str.w	r3, [r0], #4
  406c20:	f851 3b04 	ldr.w	r3, [r1], #4
  406c24:	f840 3b04 	str.w	r3, [r0], #4
  406c28:	f851 3b04 	ldr.w	r3, [r1], #4
  406c2c:	f840 3b04 	str.w	r3, [r0], #4
  406c30:	f851 3b04 	ldr.w	r3, [r1], #4
  406c34:	f840 3b04 	str.w	r3, [r0], #4
  406c38:	f851 3b04 	ldr.w	r3, [r1], #4
  406c3c:	f840 3b04 	str.w	r3, [r0], #4
  406c40:	f851 3b04 	ldr.w	r3, [r1], #4
  406c44:	f840 3b04 	str.w	r3, [r0], #4
  406c48:	f851 3b04 	ldr.w	r3, [r1], #4
  406c4c:	f840 3b04 	str.w	r3, [r0], #4
  406c50:	f851 3b04 	ldr.w	r3, [r1], #4
  406c54:	f840 3b04 	str.w	r3, [r0], #4
  406c58:	3a40      	subs	r2, #64	; 0x40
  406c5a:	d2bd      	bcs.n	406bd8 <memcpy+0x10>
  406c5c:	3230      	adds	r2, #48	; 0x30
  406c5e:	d311      	bcc.n	406c84 <memcpy+0xbc>
  406c60:	f851 3b04 	ldr.w	r3, [r1], #4
  406c64:	f840 3b04 	str.w	r3, [r0], #4
  406c68:	f851 3b04 	ldr.w	r3, [r1], #4
  406c6c:	f840 3b04 	str.w	r3, [r0], #4
  406c70:	f851 3b04 	ldr.w	r3, [r1], #4
  406c74:	f840 3b04 	str.w	r3, [r0], #4
  406c78:	f851 3b04 	ldr.w	r3, [r1], #4
  406c7c:	f840 3b04 	str.w	r3, [r0], #4
  406c80:	3a10      	subs	r2, #16
  406c82:	d2ed      	bcs.n	406c60 <memcpy+0x98>
  406c84:	320c      	adds	r2, #12
  406c86:	d305      	bcc.n	406c94 <memcpy+0xcc>
  406c88:	f851 3b04 	ldr.w	r3, [r1], #4
  406c8c:	f840 3b04 	str.w	r3, [r0], #4
  406c90:	3a04      	subs	r2, #4
  406c92:	d2f9      	bcs.n	406c88 <memcpy+0xc0>
  406c94:	3204      	adds	r2, #4
  406c96:	d008      	beq.n	406caa <memcpy+0xe2>
  406c98:	07d2      	lsls	r2, r2, #31
  406c9a:	bf1c      	itt	ne
  406c9c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406ca0:	f800 3b01 	strbne.w	r3, [r0], #1
  406ca4:	d301      	bcc.n	406caa <memcpy+0xe2>
  406ca6:	880b      	ldrh	r3, [r1, #0]
  406ca8:	8003      	strh	r3, [r0, #0]
  406caa:	4660      	mov	r0, ip
  406cac:	4770      	bx	lr
  406cae:	bf00      	nop
  406cb0:	2a08      	cmp	r2, #8
  406cb2:	d313      	bcc.n	406cdc <memcpy+0x114>
  406cb4:	078b      	lsls	r3, r1, #30
  406cb6:	d08d      	beq.n	406bd4 <memcpy+0xc>
  406cb8:	f010 0303 	ands.w	r3, r0, #3
  406cbc:	d08a      	beq.n	406bd4 <memcpy+0xc>
  406cbe:	f1c3 0304 	rsb	r3, r3, #4
  406cc2:	1ad2      	subs	r2, r2, r3
  406cc4:	07db      	lsls	r3, r3, #31
  406cc6:	bf1c      	itt	ne
  406cc8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406ccc:	f800 3b01 	strbne.w	r3, [r0], #1
  406cd0:	d380      	bcc.n	406bd4 <memcpy+0xc>
  406cd2:	f831 3b02 	ldrh.w	r3, [r1], #2
  406cd6:	f820 3b02 	strh.w	r3, [r0], #2
  406cda:	e77b      	b.n	406bd4 <memcpy+0xc>
  406cdc:	3a04      	subs	r2, #4
  406cde:	d3d9      	bcc.n	406c94 <memcpy+0xcc>
  406ce0:	3a01      	subs	r2, #1
  406ce2:	f811 3b01 	ldrb.w	r3, [r1], #1
  406ce6:	f800 3b01 	strb.w	r3, [r0], #1
  406cea:	d2f9      	bcs.n	406ce0 <memcpy+0x118>
  406cec:	780b      	ldrb	r3, [r1, #0]
  406cee:	7003      	strb	r3, [r0, #0]
  406cf0:	784b      	ldrb	r3, [r1, #1]
  406cf2:	7043      	strb	r3, [r0, #1]
  406cf4:	788b      	ldrb	r3, [r1, #2]
  406cf6:	7083      	strb	r3, [r0, #2]
  406cf8:	4660      	mov	r0, ip
  406cfa:	4770      	bx	lr

00406cfc <memset>:
  406cfc:	b470      	push	{r4, r5, r6}
  406cfe:	0786      	lsls	r6, r0, #30
  406d00:	d046      	beq.n	406d90 <memset+0x94>
  406d02:	1e54      	subs	r4, r2, #1
  406d04:	2a00      	cmp	r2, #0
  406d06:	d041      	beq.n	406d8c <memset+0x90>
  406d08:	b2ca      	uxtb	r2, r1
  406d0a:	4603      	mov	r3, r0
  406d0c:	e002      	b.n	406d14 <memset+0x18>
  406d0e:	f114 34ff 	adds.w	r4, r4, #4294967295
  406d12:	d33b      	bcc.n	406d8c <memset+0x90>
  406d14:	f803 2b01 	strb.w	r2, [r3], #1
  406d18:	079d      	lsls	r5, r3, #30
  406d1a:	d1f8      	bne.n	406d0e <memset+0x12>
  406d1c:	2c03      	cmp	r4, #3
  406d1e:	d92e      	bls.n	406d7e <memset+0x82>
  406d20:	b2cd      	uxtb	r5, r1
  406d22:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  406d26:	2c0f      	cmp	r4, #15
  406d28:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  406d2c:	d919      	bls.n	406d62 <memset+0x66>
  406d2e:	f103 0210 	add.w	r2, r3, #16
  406d32:	4626      	mov	r6, r4
  406d34:	3e10      	subs	r6, #16
  406d36:	2e0f      	cmp	r6, #15
  406d38:	f842 5c10 	str.w	r5, [r2, #-16]
  406d3c:	f842 5c0c 	str.w	r5, [r2, #-12]
  406d40:	f842 5c08 	str.w	r5, [r2, #-8]
  406d44:	f842 5c04 	str.w	r5, [r2, #-4]
  406d48:	f102 0210 	add.w	r2, r2, #16
  406d4c:	d8f2      	bhi.n	406d34 <memset+0x38>
  406d4e:	f1a4 0210 	sub.w	r2, r4, #16
  406d52:	f022 020f 	bic.w	r2, r2, #15
  406d56:	f004 040f 	and.w	r4, r4, #15
  406d5a:	3210      	adds	r2, #16
  406d5c:	2c03      	cmp	r4, #3
  406d5e:	4413      	add	r3, r2
  406d60:	d90d      	bls.n	406d7e <memset+0x82>
  406d62:	461e      	mov	r6, r3
  406d64:	4622      	mov	r2, r4
  406d66:	3a04      	subs	r2, #4
  406d68:	2a03      	cmp	r2, #3
  406d6a:	f846 5b04 	str.w	r5, [r6], #4
  406d6e:	d8fa      	bhi.n	406d66 <memset+0x6a>
  406d70:	1f22      	subs	r2, r4, #4
  406d72:	f022 0203 	bic.w	r2, r2, #3
  406d76:	3204      	adds	r2, #4
  406d78:	4413      	add	r3, r2
  406d7a:	f004 0403 	and.w	r4, r4, #3
  406d7e:	b12c      	cbz	r4, 406d8c <memset+0x90>
  406d80:	b2c9      	uxtb	r1, r1
  406d82:	441c      	add	r4, r3
  406d84:	f803 1b01 	strb.w	r1, [r3], #1
  406d88:	429c      	cmp	r4, r3
  406d8a:	d1fb      	bne.n	406d84 <memset+0x88>
  406d8c:	bc70      	pop	{r4, r5, r6}
  406d8e:	4770      	bx	lr
  406d90:	4614      	mov	r4, r2
  406d92:	4603      	mov	r3, r0
  406d94:	e7c2      	b.n	406d1c <memset+0x20>
  406d96:	bf00      	nop

00406d98 <__malloc_lock>:
  406d98:	4801      	ldr	r0, [pc, #4]	; (406da0 <__malloc_lock+0x8>)
  406d9a:	f001 bc95 	b.w	4086c8 <__retarget_lock_acquire_recursive>
  406d9e:	bf00      	nop
  406da0:	2043fce4 	.word	0x2043fce4

00406da4 <__malloc_unlock>:
  406da4:	4801      	ldr	r0, [pc, #4]	; (406dac <__malloc_unlock+0x8>)
  406da6:	f001 bc91 	b.w	4086cc <__retarget_lock_release_recursive>
  406daa:	bf00      	nop
  406dac:	2043fce4 	.word	0x2043fce4

00406db0 <_sbrk_r>:
  406db0:	b538      	push	{r3, r4, r5, lr}
  406db2:	4c07      	ldr	r4, [pc, #28]	; (406dd0 <_sbrk_r+0x20>)
  406db4:	2300      	movs	r3, #0
  406db6:	4605      	mov	r5, r0
  406db8:	4608      	mov	r0, r1
  406dba:	6023      	str	r3, [r4, #0]
  406dbc:	f7fc fb1c 	bl	4033f8 <_sbrk>
  406dc0:	1c43      	adds	r3, r0, #1
  406dc2:	d000      	beq.n	406dc6 <_sbrk_r+0x16>
  406dc4:	bd38      	pop	{r3, r4, r5, pc}
  406dc6:	6823      	ldr	r3, [r4, #0]
  406dc8:	2b00      	cmp	r3, #0
  406dca:	d0fb      	beq.n	406dc4 <_sbrk_r+0x14>
  406dcc:	602b      	str	r3, [r5, #0]
  406dce:	bd38      	pop	{r3, r4, r5, pc}
  406dd0:	2043fcf8 	.word	0x2043fcf8
	...

00406e00 <strlen>:
  406e00:	f890 f000 	pld	[r0]
  406e04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406e08:	f020 0107 	bic.w	r1, r0, #7
  406e0c:	f06f 0c00 	mvn.w	ip, #0
  406e10:	f010 0407 	ands.w	r4, r0, #7
  406e14:	f891 f020 	pld	[r1, #32]
  406e18:	f040 8049 	bne.w	406eae <strlen+0xae>
  406e1c:	f04f 0400 	mov.w	r4, #0
  406e20:	f06f 0007 	mvn.w	r0, #7
  406e24:	e9d1 2300 	ldrd	r2, r3, [r1]
  406e28:	f891 f040 	pld	[r1, #64]	; 0x40
  406e2c:	f100 0008 	add.w	r0, r0, #8
  406e30:	fa82 f24c 	uadd8	r2, r2, ip
  406e34:	faa4 f28c 	sel	r2, r4, ip
  406e38:	fa83 f34c 	uadd8	r3, r3, ip
  406e3c:	faa2 f38c 	sel	r3, r2, ip
  406e40:	bb4b      	cbnz	r3, 406e96 <strlen+0x96>
  406e42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406e46:	fa82 f24c 	uadd8	r2, r2, ip
  406e4a:	f100 0008 	add.w	r0, r0, #8
  406e4e:	faa4 f28c 	sel	r2, r4, ip
  406e52:	fa83 f34c 	uadd8	r3, r3, ip
  406e56:	faa2 f38c 	sel	r3, r2, ip
  406e5a:	b9e3      	cbnz	r3, 406e96 <strlen+0x96>
  406e5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  406e60:	fa82 f24c 	uadd8	r2, r2, ip
  406e64:	f100 0008 	add.w	r0, r0, #8
  406e68:	faa4 f28c 	sel	r2, r4, ip
  406e6c:	fa83 f34c 	uadd8	r3, r3, ip
  406e70:	faa2 f38c 	sel	r3, r2, ip
  406e74:	b97b      	cbnz	r3, 406e96 <strlen+0x96>
  406e76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  406e7a:	f101 0120 	add.w	r1, r1, #32
  406e7e:	fa82 f24c 	uadd8	r2, r2, ip
  406e82:	f100 0008 	add.w	r0, r0, #8
  406e86:	faa4 f28c 	sel	r2, r4, ip
  406e8a:	fa83 f34c 	uadd8	r3, r3, ip
  406e8e:	faa2 f38c 	sel	r3, r2, ip
  406e92:	2b00      	cmp	r3, #0
  406e94:	d0c6      	beq.n	406e24 <strlen+0x24>
  406e96:	2a00      	cmp	r2, #0
  406e98:	bf04      	itt	eq
  406e9a:	3004      	addeq	r0, #4
  406e9c:	461a      	moveq	r2, r3
  406e9e:	ba12      	rev	r2, r2
  406ea0:	fab2 f282 	clz	r2, r2
  406ea4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406ea8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  406eac:	4770      	bx	lr
  406eae:	e9d1 2300 	ldrd	r2, r3, [r1]
  406eb2:	f004 0503 	and.w	r5, r4, #3
  406eb6:	f1c4 0000 	rsb	r0, r4, #0
  406eba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  406ebe:	f014 0f04 	tst.w	r4, #4
  406ec2:	f891 f040 	pld	[r1, #64]	; 0x40
  406ec6:	fa0c f505 	lsl.w	r5, ip, r5
  406eca:	ea62 0205 	orn	r2, r2, r5
  406ece:	bf1c      	itt	ne
  406ed0:	ea63 0305 	ornne	r3, r3, r5
  406ed4:	4662      	movne	r2, ip
  406ed6:	f04f 0400 	mov.w	r4, #0
  406eda:	e7a9      	b.n	406e30 <strlen+0x30>

00406edc <__sprint_r.part.0>:
  406edc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406ee0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  406ee2:	049c      	lsls	r4, r3, #18
  406ee4:	4693      	mov	fp, r2
  406ee6:	d52f      	bpl.n	406f48 <__sprint_r.part.0+0x6c>
  406ee8:	6893      	ldr	r3, [r2, #8]
  406eea:	6812      	ldr	r2, [r2, #0]
  406eec:	b353      	cbz	r3, 406f44 <__sprint_r.part.0+0x68>
  406eee:	460e      	mov	r6, r1
  406ef0:	4607      	mov	r7, r0
  406ef2:	f102 0908 	add.w	r9, r2, #8
  406ef6:	e919 0420 	ldmdb	r9, {r5, sl}
  406efa:	ea5f 089a 	movs.w	r8, sl, lsr #2
  406efe:	d017      	beq.n	406f30 <__sprint_r.part.0+0x54>
  406f00:	3d04      	subs	r5, #4
  406f02:	2400      	movs	r4, #0
  406f04:	e001      	b.n	406f0a <__sprint_r.part.0+0x2e>
  406f06:	45a0      	cmp	r8, r4
  406f08:	d010      	beq.n	406f2c <__sprint_r.part.0+0x50>
  406f0a:	4632      	mov	r2, r6
  406f0c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  406f10:	4638      	mov	r0, r7
  406f12:	f001 f8bb 	bl	40808c <_fputwc_r>
  406f16:	1c43      	adds	r3, r0, #1
  406f18:	f104 0401 	add.w	r4, r4, #1
  406f1c:	d1f3      	bne.n	406f06 <__sprint_r.part.0+0x2a>
  406f1e:	2300      	movs	r3, #0
  406f20:	f8cb 3008 	str.w	r3, [fp, #8]
  406f24:	f8cb 3004 	str.w	r3, [fp, #4]
  406f28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406f2c:	f8db 3008 	ldr.w	r3, [fp, #8]
  406f30:	f02a 0a03 	bic.w	sl, sl, #3
  406f34:	eba3 030a 	sub.w	r3, r3, sl
  406f38:	f8cb 3008 	str.w	r3, [fp, #8]
  406f3c:	f109 0908 	add.w	r9, r9, #8
  406f40:	2b00      	cmp	r3, #0
  406f42:	d1d8      	bne.n	406ef6 <__sprint_r.part.0+0x1a>
  406f44:	2000      	movs	r0, #0
  406f46:	e7ea      	b.n	406f1e <__sprint_r.part.0+0x42>
  406f48:	f001 fa0a 	bl	408360 <__sfvwrite_r>
  406f4c:	2300      	movs	r3, #0
  406f4e:	f8cb 3008 	str.w	r3, [fp, #8]
  406f52:	f8cb 3004 	str.w	r3, [fp, #4]
  406f56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406f5a:	bf00      	nop

00406f5c <_vfiprintf_r>:
  406f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406f60:	b0ad      	sub	sp, #180	; 0xb4
  406f62:	461d      	mov	r5, r3
  406f64:	468b      	mov	fp, r1
  406f66:	4690      	mov	r8, r2
  406f68:	9307      	str	r3, [sp, #28]
  406f6a:	9006      	str	r0, [sp, #24]
  406f6c:	b118      	cbz	r0, 406f76 <_vfiprintf_r+0x1a>
  406f6e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406f70:	2b00      	cmp	r3, #0
  406f72:	f000 80f3 	beq.w	40715c <_vfiprintf_r+0x200>
  406f76:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406f7a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  406f7e:	07df      	lsls	r7, r3, #31
  406f80:	b281      	uxth	r1, r0
  406f82:	d402      	bmi.n	406f8a <_vfiprintf_r+0x2e>
  406f84:	058e      	lsls	r6, r1, #22
  406f86:	f140 80fc 	bpl.w	407182 <_vfiprintf_r+0x226>
  406f8a:	048c      	lsls	r4, r1, #18
  406f8c:	d40a      	bmi.n	406fa4 <_vfiprintf_r+0x48>
  406f8e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406f92:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  406f96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  406f9a:	f8ab 100c 	strh.w	r1, [fp, #12]
  406f9e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  406fa2:	b289      	uxth	r1, r1
  406fa4:	0708      	lsls	r0, r1, #28
  406fa6:	f140 80b3 	bpl.w	407110 <_vfiprintf_r+0x1b4>
  406faa:	f8db 3010 	ldr.w	r3, [fp, #16]
  406fae:	2b00      	cmp	r3, #0
  406fb0:	f000 80ae 	beq.w	407110 <_vfiprintf_r+0x1b4>
  406fb4:	f001 031a 	and.w	r3, r1, #26
  406fb8:	2b0a      	cmp	r3, #10
  406fba:	f000 80b5 	beq.w	407128 <_vfiprintf_r+0x1cc>
  406fbe:	2300      	movs	r3, #0
  406fc0:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  406fc4:	930b      	str	r3, [sp, #44]	; 0x2c
  406fc6:	9311      	str	r3, [sp, #68]	; 0x44
  406fc8:	9310      	str	r3, [sp, #64]	; 0x40
  406fca:	9303      	str	r3, [sp, #12]
  406fcc:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  406fd0:	46ca      	mov	sl, r9
  406fd2:	f8cd b010 	str.w	fp, [sp, #16]
  406fd6:	f898 3000 	ldrb.w	r3, [r8]
  406fda:	4644      	mov	r4, r8
  406fdc:	b1fb      	cbz	r3, 40701e <_vfiprintf_r+0xc2>
  406fde:	2b25      	cmp	r3, #37	; 0x25
  406fe0:	d102      	bne.n	406fe8 <_vfiprintf_r+0x8c>
  406fe2:	e01c      	b.n	40701e <_vfiprintf_r+0xc2>
  406fe4:	2b25      	cmp	r3, #37	; 0x25
  406fe6:	d003      	beq.n	406ff0 <_vfiprintf_r+0x94>
  406fe8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  406fec:	2b00      	cmp	r3, #0
  406fee:	d1f9      	bne.n	406fe4 <_vfiprintf_r+0x88>
  406ff0:	eba4 0508 	sub.w	r5, r4, r8
  406ff4:	b19d      	cbz	r5, 40701e <_vfiprintf_r+0xc2>
  406ff6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406ff8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406ffa:	f8ca 8000 	str.w	r8, [sl]
  406ffe:	3301      	adds	r3, #1
  407000:	442a      	add	r2, r5
  407002:	2b07      	cmp	r3, #7
  407004:	f8ca 5004 	str.w	r5, [sl, #4]
  407008:	9211      	str	r2, [sp, #68]	; 0x44
  40700a:	9310      	str	r3, [sp, #64]	; 0x40
  40700c:	dd7a      	ble.n	407104 <_vfiprintf_r+0x1a8>
  40700e:	2a00      	cmp	r2, #0
  407010:	f040 84b0 	bne.w	407974 <_vfiprintf_r+0xa18>
  407014:	9b03      	ldr	r3, [sp, #12]
  407016:	9210      	str	r2, [sp, #64]	; 0x40
  407018:	442b      	add	r3, r5
  40701a:	46ca      	mov	sl, r9
  40701c:	9303      	str	r3, [sp, #12]
  40701e:	7823      	ldrb	r3, [r4, #0]
  407020:	2b00      	cmp	r3, #0
  407022:	f000 83e0 	beq.w	4077e6 <_vfiprintf_r+0x88a>
  407026:	2000      	movs	r0, #0
  407028:	f04f 0300 	mov.w	r3, #0
  40702c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  407030:	f104 0801 	add.w	r8, r4, #1
  407034:	7862      	ldrb	r2, [r4, #1]
  407036:	4605      	mov	r5, r0
  407038:	4606      	mov	r6, r0
  40703a:	4603      	mov	r3, r0
  40703c:	f04f 34ff 	mov.w	r4, #4294967295
  407040:	f108 0801 	add.w	r8, r8, #1
  407044:	f1a2 0120 	sub.w	r1, r2, #32
  407048:	2958      	cmp	r1, #88	; 0x58
  40704a:	f200 82de 	bhi.w	40760a <_vfiprintf_r+0x6ae>
  40704e:	e8df f011 	tbh	[pc, r1, lsl #1]
  407052:	0221      	.short	0x0221
  407054:	02dc02dc 	.word	0x02dc02dc
  407058:	02dc0229 	.word	0x02dc0229
  40705c:	02dc02dc 	.word	0x02dc02dc
  407060:	02dc02dc 	.word	0x02dc02dc
  407064:	028902dc 	.word	0x028902dc
  407068:	02dc0295 	.word	0x02dc0295
  40706c:	02bd00a2 	.word	0x02bd00a2
  407070:	019f02dc 	.word	0x019f02dc
  407074:	01a401a4 	.word	0x01a401a4
  407078:	01a401a4 	.word	0x01a401a4
  40707c:	01a401a4 	.word	0x01a401a4
  407080:	01a401a4 	.word	0x01a401a4
  407084:	02dc01a4 	.word	0x02dc01a4
  407088:	02dc02dc 	.word	0x02dc02dc
  40708c:	02dc02dc 	.word	0x02dc02dc
  407090:	02dc02dc 	.word	0x02dc02dc
  407094:	02dc02dc 	.word	0x02dc02dc
  407098:	01b202dc 	.word	0x01b202dc
  40709c:	02dc02dc 	.word	0x02dc02dc
  4070a0:	02dc02dc 	.word	0x02dc02dc
  4070a4:	02dc02dc 	.word	0x02dc02dc
  4070a8:	02dc02dc 	.word	0x02dc02dc
  4070ac:	02dc02dc 	.word	0x02dc02dc
  4070b0:	02dc0197 	.word	0x02dc0197
  4070b4:	02dc02dc 	.word	0x02dc02dc
  4070b8:	02dc02dc 	.word	0x02dc02dc
  4070bc:	02dc019b 	.word	0x02dc019b
  4070c0:	025302dc 	.word	0x025302dc
  4070c4:	02dc02dc 	.word	0x02dc02dc
  4070c8:	02dc02dc 	.word	0x02dc02dc
  4070cc:	02dc02dc 	.word	0x02dc02dc
  4070d0:	02dc02dc 	.word	0x02dc02dc
  4070d4:	02dc02dc 	.word	0x02dc02dc
  4070d8:	021b025a 	.word	0x021b025a
  4070dc:	02dc02dc 	.word	0x02dc02dc
  4070e0:	026e02dc 	.word	0x026e02dc
  4070e4:	02dc021b 	.word	0x02dc021b
  4070e8:	027302dc 	.word	0x027302dc
  4070ec:	01f502dc 	.word	0x01f502dc
  4070f0:	02090182 	.word	0x02090182
  4070f4:	02dc02d7 	.word	0x02dc02d7
  4070f8:	02dc029a 	.word	0x02dc029a
  4070fc:	02dc00a7 	.word	0x02dc00a7
  407100:	022e02dc 	.word	0x022e02dc
  407104:	f10a 0a08 	add.w	sl, sl, #8
  407108:	9b03      	ldr	r3, [sp, #12]
  40710a:	442b      	add	r3, r5
  40710c:	9303      	str	r3, [sp, #12]
  40710e:	e786      	b.n	40701e <_vfiprintf_r+0xc2>
  407110:	4659      	mov	r1, fp
  407112:	9806      	ldr	r0, [sp, #24]
  407114:	f000 fdac 	bl	407c70 <__swsetup_r>
  407118:	bb18      	cbnz	r0, 407162 <_vfiprintf_r+0x206>
  40711a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40711e:	f001 031a 	and.w	r3, r1, #26
  407122:	2b0a      	cmp	r3, #10
  407124:	f47f af4b 	bne.w	406fbe <_vfiprintf_r+0x62>
  407128:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40712c:	2b00      	cmp	r3, #0
  40712e:	f6ff af46 	blt.w	406fbe <_vfiprintf_r+0x62>
  407132:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  407136:	07db      	lsls	r3, r3, #31
  407138:	d405      	bmi.n	407146 <_vfiprintf_r+0x1ea>
  40713a:	058f      	lsls	r7, r1, #22
  40713c:	d403      	bmi.n	407146 <_vfiprintf_r+0x1ea>
  40713e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  407142:	f001 fac3 	bl	4086cc <__retarget_lock_release_recursive>
  407146:	462b      	mov	r3, r5
  407148:	4642      	mov	r2, r8
  40714a:	4659      	mov	r1, fp
  40714c:	9806      	ldr	r0, [sp, #24]
  40714e:	f000 fd4d 	bl	407bec <__sbprintf>
  407152:	9003      	str	r0, [sp, #12]
  407154:	9803      	ldr	r0, [sp, #12]
  407156:	b02d      	add	sp, #180	; 0xb4
  407158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40715c:	f000 fef4 	bl	407f48 <__sinit>
  407160:	e709      	b.n	406f76 <_vfiprintf_r+0x1a>
  407162:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  407166:	07d9      	lsls	r1, r3, #31
  407168:	d404      	bmi.n	407174 <_vfiprintf_r+0x218>
  40716a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40716e:	059a      	lsls	r2, r3, #22
  407170:	f140 84aa 	bpl.w	407ac8 <_vfiprintf_r+0xb6c>
  407174:	f04f 33ff 	mov.w	r3, #4294967295
  407178:	9303      	str	r3, [sp, #12]
  40717a:	9803      	ldr	r0, [sp, #12]
  40717c:	b02d      	add	sp, #180	; 0xb4
  40717e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407182:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  407186:	f001 fa9f 	bl	4086c8 <__retarget_lock_acquire_recursive>
  40718a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40718e:	b281      	uxth	r1, r0
  407190:	e6fb      	b.n	406f8a <_vfiprintf_r+0x2e>
  407192:	4276      	negs	r6, r6
  407194:	9207      	str	r2, [sp, #28]
  407196:	f043 0304 	orr.w	r3, r3, #4
  40719a:	f898 2000 	ldrb.w	r2, [r8]
  40719e:	e74f      	b.n	407040 <_vfiprintf_r+0xe4>
  4071a0:	9608      	str	r6, [sp, #32]
  4071a2:	069e      	lsls	r6, r3, #26
  4071a4:	f100 8450 	bmi.w	407a48 <_vfiprintf_r+0xaec>
  4071a8:	9907      	ldr	r1, [sp, #28]
  4071aa:	06dd      	lsls	r5, r3, #27
  4071ac:	460a      	mov	r2, r1
  4071ae:	f100 83ef 	bmi.w	407990 <_vfiprintf_r+0xa34>
  4071b2:	0658      	lsls	r0, r3, #25
  4071b4:	f140 83ec 	bpl.w	407990 <_vfiprintf_r+0xa34>
  4071b8:	880e      	ldrh	r6, [r1, #0]
  4071ba:	3104      	adds	r1, #4
  4071bc:	2700      	movs	r7, #0
  4071be:	2201      	movs	r2, #1
  4071c0:	9107      	str	r1, [sp, #28]
  4071c2:	f04f 0100 	mov.w	r1, #0
  4071c6:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  4071ca:	2500      	movs	r5, #0
  4071cc:	1c61      	adds	r1, r4, #1
  4071ce:	f000 8116 	beq.w	4073fe <_vfiprintf_r+0x4a2>
  4071d2:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  4071d6:	9102      	str	r1, [sp, #8]
  4071d8:	ea56 0107 	orrs.w	r1, r6, r7
  4071dc:	f040 8114 	bne.w	407408 <_vfiprintf_r+0x4ac>
  4071e0:	2c00      	cmp	r4, #0
  4071e2:	f040 835c 	bne.w	40789e <_vfiprintf_r+0x942>
  4071e6:	2a00      	cmp	r2, #0
  4071e8:	f040 83b7 	bne.w	40795a <_vfiprintf_r+0x9fe>
  4071ec:	f013 0301 	ands.w	r3, r3, #1
  4071f0:	9305      	str	r3, [sp, #20]
  4071f2:	f000 8457 	beq.w	407aa4 <_vfiprintf_r+0xb48>
  4071f6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4071fa:	2330      	movs	r3, #48	; 0x30
  4071fc:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  407200:	9b05      	ldr	r3, [sp, #20]
  407202:	42a3      	cmp	r3, r4
  407204:	bfb8      	it	lt
  407206:	4623      	movlt	r3, r4
  407208:	9301      	str	r3, [sp, #4]
  40720a:	b10d      	cbz	r5, 407210 <_vfiprintf_r+0x2b4>
  40720c:	3301      	adds	r3, #1
  40720e:	9301      	str	r3, [sp, #4]
  407210:	9b02      	ldr	r3, [sp, #8]
  407212:	f013 0302 	ands.w	r3, r3, #2
  407216:	9309      	str	r3, [sp, #36]	; 0x24
  407218:	d002      	beq.n	407220 <_vfiprintf_r+0x2c4>
  40721a:	9b01      	ldr	r3, [sp, #4]
  40721c:	3302      	adds	r3, #2
  40721e:	9301      	str	r3, [sp, #4]
  407220:	9b02      	ldr	r3, [sp, #8]
  407222:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  407226:	930a      	str	r3, [sp, #40]	; 0x28
  407228:	f040 8217 	bne.w	40765a <_vfiprintf_r+0x6fe>
  40722c:	9b08      	ldr	r3, [sp, #32]
  40722e:	9a01      	ldr	r2, [sp, #4]
  407230:	1a9d      	subs	r5, r3, r2
  407232:	2d00      	cmp	r5, #0
  407234:	f340 8211 	ble.w	40765a <_vfiprintf_r+0x6fe>
  407238:	2d10      	cmp	r5, #16
  40723a:	f340 8490 	ble.w	407b5e <_vfiprintf_r+0xc02>
  40723e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407240:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407242:	4ec4      	ldr	r6, [pc, #784]	; (407554 <_vfiprintf_r+0x5f8>)
  407244:	46d6      	mov	lr, sl
  407246:	2710      	movs	r7, #16
  407248:	46a2      	mov	sl, r4
  40724a:	4619      	mov	r1, r3
  40724c:	9c06      	ldr	r4, [sp, #24]
  40724e:	e007      	b.n	407260 <_vfiprintf_r+0x304>
  407250:	f101 0c02 	add.w	ip, r1, #2
  407254:	f10e 0e08 	add.w	lr, lr, #8
  407258:	4601      	mov	r1, r0
  40725a:	3d10      	subs	r5, #16
  40725c:	2d10      	cmp	r5, #16
  40725e:	dd11      	ble.n	407284 <_vfiprintf_r+0x328>
  407260:	1c48      	adds	r0, r1, #1
  407262:	3210      	adds	r2, #16
  407264:	2807      	cmp	r0, #7
  407266:	9211      	str	r2, [sp, #68]	; 0x44
  407268:	e88e 00c0 	stmia.w	lr, {r6, r7}
  40726c:	9010      	str	r0, [sp, #64]	; 0x40
  40726e:	ddef      	ble.n	407250 <_vfiprintf_r+0x2f4>
  407270:	2a00      	cmp	r2, #0
  407272:	f040 81e4 	bne.w	40763e <_vfiprintf_r+0x6e2>
  407276:	3d10      	subs	r5, #16
  407278:	2d10      	cmp	r5, #16
  40727a:	4611      	mov	r1, r2
  40727c:	f04f 0c01 	mov.w	ip, #1
  407280:	46ce      	mov	lr, r9
  407282:	dced      	bgt.n	407260 <_vfiprintf_r+0x304>
  407284:	4654      	mov	r4, sl
  407286:	4661      	mov	r1, ip
  407288:	46f2      	mov	sl, lr
  40728a:	442a      	add	r2, r5
  40728c:	2907      	cmp	r1, #7
  40728e:	9211      	str	r2, [sp, #68]	; 0x44
  407290:	f8ca 6000 	str.w	r6, [sl]
  407294:	f8ca 5004 	str.w	r5, [sl, #4]
  407298:	9110      	str	r1, [sp, #64]	; 0x40
  40729a:	f300 82ec 	bgt.w	407876 <_vfiprintf_r+0x91a>
  40729e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4072a2:	f10a 0a08 	add.w	sl, sl, #8
  4072a6:	1c48      	adds	r0, r1, #1
  4072a8:	2d00      	cmp	r5, #0
  4072aa:	f040 81de 	bne.w	40766a <_vfiprintf_r+0x70e>
  4072ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4072b0:	2b00      	cmp	r3, #0
  4072b2:	f000 81f8 	beq.w	4076a6 <_vfiprintf_r+0x74a>
  4072b6:	3202      	adds	r2, #2
  4072b8:	a90e      	add	r1, sp, #56	; 0x38
  4072ba:	2302      	movs	r3, #2
  4072bc:	2807      	cmp	r0, #7
  4072be:	9211      	str	r2, [sp, #68]	; 0x44
  4072c0:	9010      	str	r0, [sp, #64]	; 0x40
  4072c2:	e88a 000a 	stmia.w	sl, {r1, r3}
  4072c6:	f340 81ea 	ble.w	40769e <_vfiprintf_r+0x742>
  4072ca:	2a00      	cmp	r2, #0
  4072cc:	f040 838c 	bne.w	4079e8 <_vfiprintf_r+0xa8c>
  4072d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4072d2:	2b80      	cmp	r3, #128	; 0x80
  4072d4:	f04f 0001 	mov.w	r0, #1
  4072d8:	4611      	mov	r1, r2
  4072da:	46ca      	mov	sl, r9
  4072dc:	f040 81e7 	bne.w	4076ae <_vfiprintf_r+0x752>
  4072e0:	9b08      	ldr	r3, [sp, #32]
  4072e2:	9d01      	ldr	r5, [sp, #4]
  4072e4:	1b5e      	subs	r6, r3, r5
  4072e6:	2e00      	cmp	r6, #0
  4072e8:	f340 81e1 	ble.w	4076ae <_vfiprintf_r+0x752>
  4072ec:	2e10      	cmp	r6, #16
  4072ee:	4d9a      	ldr	r5, [pc, #616]	; (407558 <_vfiprintf_r+0x5fc>)
  4072f0:	f340 8450 	ble.w	407b94 <_vfiprintf_r+0xc38>
  4072f4:	46d4      	mov	ip, sl
  4072f6:	2710      	movs	r7, #16
  4072f8:	46a2      	mov	sl, r4
  4072fa:	9c06      	ldr	r4, [sp, #24]
  4072fc:	e007      	b.n	40730e <_vfiprintf_r+0x3b2>
  4072fe:	f101 0e02 	add.w	lr, r1, #2
  407302:	f10c 0c08 	add.w	ip, ip, #8
  407306:	4601      	mov	r1, r0
  407308:	3e10      	subs	r6, #16
  40730a:	2e10      	cmp	r6, #16
  40730c:	dd11      	ble.n	407332 <_vfiprintf_r+0x3d6>
  40730e:	1c48      	adds	r0, r1, #1
  407310:	3210      	adds	r2, #16
  407312:	2807      	cmp	r0, #7
  407314:	9211      	str	r2, [sp, #68]	; 0x44
  407316:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40731a:	9010      	str	r0, [sp, #64]	; 0x40
  40731c:	ddef      	ble.n	4072fe <_vfiprintf_r+0x3a2>
  40731e:	2a00      	cmp	r2, #0
  407320:	f040 829d 	bne.w	40785e <_vfiprintf_r+0x902>
  407324:	3e10      	subs	r6, #16
  407326:	2e10      	cmp	r6, #16
  407328:	f04f 0e01 	mov.w	lr, #1
  40732c:	4611      	mov	r1, r2
  40732e:	46cc      	mov	ip, r9
  407330:	dced      	bgt.n	40730e <_vfiprintf_r+0x3b2>
  407332:	4654      	mov	r4, sl
  407334:	46e2      	mov	sl, ip
  407336:	4432      	add	r2, r6
  407338:	f1be 0f07 	cmp.w	lr, #7
  40733c:	9211      	str	r2, [sp, #68]	; 0x44
  40733e:	e88a 0060 	stmia.w	sl, {r5, r6}
  407342:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  407346:	f300 8369 	bgt.w	407a1c <_vfiprintf_r+0xac0>
  40734a:	f10a 0a08 	add.w	sl, sl, #8
  40734e:	f10e 0001 	add.w	r0, lr, #1
  407352:	4671      	mov	r1, lr
  407354:	e1ab      	b.n	4076ae <_vfiprintf_r+0x752>
  407356:	9608      	str	r6, [sp, #32]
  407358:	f013 0220 	ands.w	r2, r3, #32
  40735c:	f040 838c 	bne.w	407a78 <_vfiprintf_r+0xb1c>
  407360:	f013 0110 	ands.w	r1, r3, #16
  407364:	f040 831a 	bne.w	40799c <_vfiprintf_r+0xa40>
  407368:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  40736c:	f000 8316 	beq.w	40799c <_vfiprintf_r+0xa40>
  407370:	9807      	ldr	r0, [sp, #28]
  407372:	460a      	mov	r2, r1
  407374:	4601      	mov	r1, r0
  407376:	3104      	adds	r1, #4
  407378:	8806      	ldrh	r6, [r0, #0]
  40737a:	9107      	str	r1, [sp, #28]
  40737c:	2700      	movs	r7, #0
  40737e:	e720      	b.n	4071c2 <_vfiprintf_r+0x266>
  407380:	9608      	str	r6, [sp, #32]
  407382:	f043 0310 	orr.w	r3, r3, #16
  407386:	e7e7      	b.n	407358 <_vfiprintf_r+0x3fc>
  407388:	9608      	str	r6, [sp, #32]
  40738a:	f043 0310 	orr.w	r3, r3, #16
  40738e:	e708      	b.n	4071a2 <_vfiprintf_r+0x246>
  407390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407394:	f898 2000 	ldrb.w	r2, [r8]
  407398:	e652      	b.n	407040 <_vfiprintf_r+0xe4>
  40739a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40739e:	2600      	movs	r6, #0
  4073a0:	f818 2b01 	ldrb.w	r2, [r8], #1
  4073a4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4073a8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4073ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4073b0:	2909      	cmp	r1, #9
  4073b2:	d9f5      	bls.n	4073a0 <_vfiprintf_r+0x444>
  4073b4:	e646      	b.n	407044 <_vfiprintf_r+0xe8>
  4073b6:	9608      	str	r6, [sp, #32]
  4073b8:	2800      	cmp	r0, #0
  4073ba:	f040 8408 	bne.w	407bce <_vfiprintf_r+0xc72>
  4073be:	f043 0310 	orr.w	r3, r3, #16
  4073c2:	069e      	lsls	r6, r3, #26
  4073c4:	f100 834c 	bmi.w	407a60 <_vfiprintf_r+0xb04>
  4073c8:	06dd      	lsls	r5, r3, #27
  4073ca:	f100 82f3 	bmi.w	4079b4 <_vfiprintf_r+0xa58>
  4073ce:	0658      	lsls	r0, r3, #25
  4073d0:	f140 82f0 	bpl.w	4079b4 <_vfiprintf_r+0xa58>
  4073d4:	9d07      	ldr	r5, [sp, #28]
  4073d6:	f9b5 6000 	ldrsh.w	r6, [r5]
  4073da:	462a      	mov	r2, r5
  4073dc:	17f7      	asrs	r7, r6, #31
  4073de:	3204      	adds	r2, #4
  4073e0:	4630      	mov	r0, r6
  4073e2:	4639      	mov	r1, r7
  4073e4:	9207      	str	r2, [sp, #28]
  4073e6:	2800      	cmp	r0, #0
  4073e8:	f171 0200 	sbcs.w	r2, r1, #0
  4073ec:	f2c0 835d 	blt.w	407aaa <_vfiprintf_r+0xb4e>
  4073f0:	1c61      	adds	r1, r4, #1
  4073f2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4073f6:	f04f 0201 	mov.w	r2, #1
  4073fa:	f47f aeea 	bne.w	4071d2 <_vfiprintf_r+0x276>
  4073fe:	ea56 0107 	orrs.w	r1, r6, r7
  407402:	f000 824d 	beq.w	4078a0 <_vfiprintf_r+0x944>
  407406:	9302      	str	r3, [sp, #8]
  407408:	2a01      	cmp	r2, #1
  40740a:	f000 828c 	beq.w	407926 <_vfiprintf_r+0x9ca>
  40740e:	2a02      	cmp	r2, #2
  407410:	f040 825c 	bne.w	4078cc <_vfiprintf_r+0x970>
  407414:	980b      	ldr	r0, [sp, #44]	; 0x2c
  407416:	46cb      	mov	fp, r9
  407418:	0933      	lsrs	r3, r6, #4
  40741a:	f006 010f 	and.w	r1, r6, #15
  40741e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  407422:	093a      	lsrs	r2, r7, #4
  407424:	461e      	mov	r6, r3
  407426:	4617      	mov	r7, r2
  407428:	5c43      	ldrb	r3, [r0, r1]
  40742a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40742e:	ea56 0307 	orrs.w	r3, r6, r7
  407432:	d1f1      	bne.n	407418 <_vfiprintf_r+0x4bc>
  407434:	eba9 030b 	sub.w	r3, r9, fp
  407438:	9305      	str	r3, [sp, #20]
  40743a:	e6e1      	b.n	407200 <_vfiprintf_r+0x2a4>
  40743c:	2800      	cmp	r0, #0
  40743e:	f040 83c0 	bne.w	407bc2 <_vfiprintf_r+0xc66>
  407442:	0699      	lsls	r1, r3, #26
  407444:	f100 8367 	bmi.w	407b16 <_vfiprintf_r+0xbba>
  407448:	06da      	lsls	r2, r3, #27
  40744a:	f100 80f1 	bmi.w	407630 <_vfiprintf_r+0x6d4>
  40744e:	065b      	lsls	r3, r3, #25
  407450:	f140 80ee 	bpl.w	407630 <_vfiprintf_r+0x6d4>
  407454:	9a07      	ldr	r2, [sp, #28]
  407456:	6813      	ldr	r3, [r2, #0]
  407458:	3204      	adds	r2, #4
  40745a:	9207      	str	r2, [sp, #28]
  40745c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  407460:	801a      	strh	r2, [r3, #0]
  407462:	e5b8      	b.n	406fd6 <_vfiprintf_r+0x7a>
  407464:	9807      	ldr	r0, [sp, #28]
  407466:	4a3d      	ldr	r2, [pc, #244]	; (40755c <_vfiprintf_r+0x600>)
  407468:	9608      	str	r6, [sp, #32]
  40746a:	920b      	str	r2, [sp, #44]	; 0x2c
  40746c:	6806      	ldr	r6, [r0, #0]
  40746e:	2278      	movs	r2, #120	; 0x78
  407470:	2130      	movs	r1, #48	; 0x30
  407472:	3004      	adds	r0, #4
  407474:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  407478:	f043 0302 	orr.w	r3, r3, #2
  40747c:	9007      	str	r0, [sp, #28]
  40747e:	2700      	movs	r7, #0
  407480:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  407484:	2202      	movs	r2, #2
  407486:	e69c      	b.n	4071c2 <_vfiprintf_r+0x266>
  407488:	9608      	str	r6, [sp, #32]
  40748a:	2800      	cmp	r0, #0
  40748c:	d099      	beq.n	4073c2 <_vfiprintf_r+0x466>
  40748e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  407492:	e796      	b.n	4073c2 <_vfiprintf_r+0x466>
  407494:	f898 2000 	ldrb.w	r2, [r8]
  407498:	2d00      	cmp	r5, #0
  40749a:	f47f add1 	bne.w	407040 <_vfiprintf_r+0xe4>
  40749e:	2001      	movs	r0, #1
  4074a0:	2520      	movs	r5, #32
  4074a2:	e5cd      	b.n	407040 <_vfiprintf_r+0xe4>
  4074a4:	f043 0301 	orr.w	r3, r3, #1
  4074a8:	f898 2000 	ldrb.w	r2, [r8]
  4074ac:	e5c8      	b.n	407040 <_vfiprintf_r+0xe4>
  4074ae:	9608      	str	r6, [sp, #32]
  4074b0:	2800      	cmp	r0, #0
  4074b2:	f040 8393 	bne.w	407bdc <_vfiprintf_r+0xc80>
  4074b6:	4929      	ldr	r1, [pc, #164]	; (40755c <_vfiprintf_r+0x600>)
  4074b8:	910b      	str	r1, [sp, #44]	; 0x2c
  4074ba:	069f      	lsls	r7, r3, #26
  4074bc:	f100 82e8 	bmi.w	407a90 <_vfiprintf_r+0xb34>
  4074c0:	9807      	ldr	r0, [sp, #28]
  4074c2:	06de      	lsls	r6, r3, #27
  4074c4:	4601      	mov	r1, r0
  4074c6:	f100 8270 	bmi.w	4079aa <_vfiprintf_r+0xa4e>
  4074ca:	065d      	lsls	r5, r3, #25
  4074cc:	f140 826d 	bpl.w	4079aa <_vfiprintf_r+0xa4e>
  4074d0:	3104      	adds	r1, #4
  4074d2:	8806      	ldrh	r6, [r0, #0]
  4074d4:	9107      	str	r1, [sp, #28]
  4074d6:	2700      	movs	r7, #0
  4074d8:	07d8      	lsls	r0, r3, #31
  4074da:	f140 8222 	bpl.w	407922 <_vfiprintf_r+0x9c6>
  4074de:	ea56 0107 	orrs.w	r1, r6, r7
  4074e2:	f000 821e 	beq.w	407922 <_vfiprintf_r+0x9c6>
  4074e6:	2130      	movs	r1, #48	; 0x30
  4074e8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4074ec:	f043 0302 	orr.w	r3, r3, #2
  4074f0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4074f4:	2202      	movs	r2, #2
  4074f6:	e664      	b.n	4071c2 <_vfiprintf_r+0x266>
  4074f8:	9608      	str	r6, [sp, #32]
  4074fa:	2800      	cmp	r0, #0
  4074fc:	f040 836b 	bne.w	407bd6 <_vfiprintf_r+0xc7a>
  407500:	4917      	ldr	r1, [pc, #92]	; (407560 <_vfiprintf_r+0x604>)
  407502:	910b      	str	r1, [sp, #44]	; 0x2c
  407504:	e7d9      	b.n	4074ba <_vfiprintf_r+0x55e>
  407506:	9907      	ldr	r1, [sp, #28]
  407508:	9608      	str	r6, [sp, #32]
  40750a:	680a      	ldr	r2, [r1, #0]
  40750c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  407510:	f04f 0000 	mov.w	r0, #0
  407514:	460a      	mov	r2, r1
  407516:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40751a:	3204      	adds	r2, #4
  40751c:	2001      	movs	r0, #1
  40751e:	9001      	str	r0, [sp, #4]
  407520:	9207      	str	r2, [sp, #28]
  407522:	9005      	str	r0, [sp, #20]
  407524:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  407528:	9302      	str	r3, [sp, #8]
  40752a:	2400      	movs	r4, #0
  40752c:	e670      	b.n	407210 <_vfiprintf_r+0x2b4>
  40752e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407532:	f898 2000 	ldrb.w	r2, [r8]
  407536:	e583      	b.n	407040 <_vfiprintf_r+0xe4>
  407538:	f898 2000 	ldrb.w	r2, [r8]
  40753c:	2a6c      	cmp	r2, #108	; 0x6c
  40753e:	bf03      	ittte	eq
  407540:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  407544:	f043 0320 	orreq.w	r3, r3, #32
  407548:	f108 0801 	addeq.w	r8, r8, #1
  40754c:	f043 0310 	orrne.w	r3, r3, #16
  407550:	e576      	b.n	407040 <_vfiprintf_r+0xe4>
  407552:	bf00      	nop
  407554:	00409eb4 	.word	0x00409eb4
  407558:	00409ec4 	.word	0x00409ec4
  40755c:	00409e98 	.word	0x00409e98
  407560:	00409e84 	.word	0x00409e84
  407564:	9907      	ldr	r1, [sp, #28]
  407566:	680e      	ldr	r6, [r1, #0]
  407568:	460a      	mov	r2, r1
  40756a:	2e00      	cmp	r6, #0
  40756c:	f102 0204 	add.w	r2, r2, #4
  407570:	f6ff ae0f 	blt.w	407192 <_vfiprintf_r+0x236>
  407574:	9207      	str	r2, [sp, #28]
  407576:	f898 2000 	ldrb.w	r2, [r8]
  40757a:	e561      	b.n	407040 <_vfiprintf_r+0xe4>
  40757c:	f898 2000 	ldrb.w	r2, [r8]
  407580:	2001      	movs	r0, #1
  407582:	252b      	movs	r5, #43	; 0x2b
  407584:	e55c      	b.n	407040 <_vfiprintf_r+0xe4>
  407586:	9907      	ldr	r1, [sp, #28]
  407588:	9608      	str	r6, [sp, #32]
  40758a:	f8d1 b000 	ldr.w	fp, [r1]
  40758e:	f04f 0200 	mov.w	r2, #0
  407592:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  407596:	1d0e      	adds	r6, r1, #4
  407598:	f1bb 0f00 	cmp.w	fp, #0
  40759c:	f000 82e5 	beq.w	407b6a <_vfiprintf_r+0xc0e>
  4075a0:	1c67      	adds	r7, r4, #1
  4075a2:	f000 82c4 	beq.w	407b2e <_vfiprintf_r+0xbd2>
  4075a6:	4622      	mov	r2, r4
  4075a8:	2100      	movs	r1, #0
  4075aa:	4658      	mov	r0, fp
  4075ac:	9301      	str	r3, [sp, #4]
  4075ae:	f001 f91f 	bl	4087f0 <memchr>
  4075b2:	9b01      	ldr	r3, [sp, #4]
  4075b4:	2800      	cmp	r0, #0
  4075b6:	f000 82e5 	beq.w	407b84 <_vfiprintf_r+0xc28>
  4075ba:	eba0 020b 	sub.w	r2, r0, fp
  4075be:	9205      	str	r2, [sp, #20]
  4075c0:	9607      	str	r6, [sp, #28]
  4075c2:	9302      	str	r3, [sp, #8]
  4075c4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4075c8:	2400      	movs	r4, #0
  4075ca:	e619      	b.n	407200 <_vfiprintf_r+0x2a4>
  4075cc:	f898 2000 	ldrb.w	r2, [r8]
  4075d0:	2a2a      	cmp	r2, #42	; 0x2a
  4075d2:	f108 0701 	add.w	r7, r8, #1
  4075d6:	f000 82e9 	beq.w	407bac <_vfiprintf_r+0xc50>
  4075da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4075de:	2909      	cmp	r1, #9
  4075e0:	46b8      	mov	r8, r7
  4075e2:	f04f 0400 	mov.w	r4, #0
  4075e6:	f63f ad2d 	bhi.w	407044 <_vfiprintf_r+0xe8>
  4075ea:	f818 2b01 	ldrb.w	r2, [r8], #1
  4075ee:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4075f2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4075f6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4075fa:	2909      	cmp	r1, #9
  4075fc:	d9f5      	bls.n	4075ea <_vfiprintf_r+0x68e>
  4075fe:	e521      	b.n	407044 <_vfiprintf_r+0xe8>
  407600:	f043 0320 	orr.w	r3, r3, #32
  407604:	f898 2000 	ldrb.w	r2, [r8]
  407608:	e51a      	b.n	407040 <_vfiprintf_r+0xe4>
  40760a:	9608      	str	r6, [sp, #32]
  40760c:	2800      	cmp	r0, #0
  40760e:	f040 82db 	bne.w	407bc8 <_vfiprintf_r+0xc6c>
  407612:	2a00      	cmp	r2, #0
  407614:	f000 80e7 	beq.w	4077e6 <_vfiprintf_r+0x88a>
  407618:	2101      	movs	r1, #1
  40761a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40761e:	f04f 0200 	mov.w	r2, #0
  407622:	9101      	str	r1, [sp, #4]
  407624:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  407628:	9105      	str	r1, [sp, #20]
  40762a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40762e:	e77b      	b.n	407528 <_vfiprintf_r+0x5cc>
  407630:	9a07      	ldr	r2, [sp, #28]
  407632:	6813      	ldr	r3, [r2, #0]
  407634:	3204      	adds	r2, #4
  407636:	9207      	str	r2, [sp, #28]
  407638:	9a03      	ldr	r2, [sp, #12]
  40763a:	601a      	str	r2, [r3, #0]
  40763c:	e4cb      	b.n	406fd6 <_vfiprintf_r+0x7a>
  40763e:	aa0f      	add	r2, sp, #60	; 0x3c
  407640:	9904      	ldr	r1, [sp, #16]
  407642:	4620      	mov	r0, r4
  407644:	f7ff fc4a 	bl	406edc <__sprint_r.part.0>
  407648:	2800      	cmp	r0, #0
  40764a:	f040 8139 	bne.w	4078c0 <_vfiprintf_r+0x964>
  40764e:	9910      	ldr	r1, [sp, #64]	; 0x40
  407650:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407652:	f101 0c01 	add.w	ip, r1, #1
  407656:	46ce      	mov	lr, r9
  407658:	e5ff      	b.n	40725a <_vfiprintf_r+0x2fe>
  40765a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40765c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40765e:	1c48      	adds	r0, r1, #1
  407660:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  407664:	2d00      	cmp	r5, #0
  407666:	f43f ae22 	beq.w	4072ae <_vfiprintf_r+0x352>
  40766a:	3201      	adds	r2, #1
  40766c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  407670:	2101      	movs	r1, #1
  407672:	2807      	cmp	r0, #7
  407674:	9211      	str	r2, [sp, #68]	; 0x44
  407676:	9010      	str	r0, [sp, #64]	; 0x40
  407678:	f8ca 5000 	str.w	r5, [sl]
  40767c:	f8ca 1004 	str.w	r1, [sl, #4]
  407680:	f340 8108 	ble.w	407894 <_vfiprintf_r+0x938>
  407684:	2a00      	cmp	r2, #0
  407686:	f040 81bc 	bne.w	407a02 <_vfiprintf_r+0xaa6>
  40768a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40768c:	2b00      	cmp	r3, #0
  40768e:	f43f ae1f 	beq.w	4072d0 <_vfiprintf_r+0x374>
  407692:	ab0e      	add	r3, sp, #56	; 0x38
  407694:	2202      	movs	r2, #2
  407696:	4608      	mov	r0, r1
  407698:	931c      	str	r3, [sp, #112]	; 0x70
  40769a:	921d      	str	r2, [sp, #116]	; 0x74
  40769c:	46ca      	mov	sl, r9
  40769e:	4601      	mov	r1, r0
  4076a0:	f10a 0a08 	add.w	sl, sl, #8
  4076a4:	3001      	adds	r0, #1
  4076a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4076a8:	2b80      	cmp	r3, #128	; 0x80
  4076aa:	f43f ae19 	beq.w	4072e0 <_vfiprintf_r+0x384>
  4076ae:	9b05      	ldr	r3, [sp, #20]
  4076b0:	1ae4      	subs	r4, r4, r3
  4076b2:	2c00      	cmp	r4, #0
  4076b4:	dd2e      	ble.n	407714 <_vfiprintf_r+0x7b8>
  4076b6:	2c10      	cmp	r4, #16
  4076b8:	4db3      	ldr	r5, [pc, #716]	; (407988 <_vfiprintf_r+0xa2c>)
  4076ba:	dd1e      	ble.n	4076fa <_vfiprintf_r+0x79e>
  4076bc:	46d6      	mov	lr, sl
  4076be:	2610      	movs	r6, #16
  4076c0:	9f06      	ldr	r7, [sp, #24]
  4076c2:	f8dd a010 	ldr.w	sl, [sp, #16]
  4076c6:	e006      	b.n	4076d6 <_vfiprintf_r+0x77a>
  4076c8:	1c88      	adds	r0, r1, #2
  4076ca:	f10e 0e08 	add.w	lr, lr, #8
  4076ce:	4619      	mov	r1, r3
  4076d0:	3c10      	subs	r4, #16
  4076d2:	2c10      	cmp	r4, #16
  4076d4:	dd10      	ble.n	4076f8 <_vfiprintf_r+0x79c>
  4076d6:	1c4b      	adds	r3, r1, #1
  4076d8:	3210      	adds	r2, #16
  4076da:	2b07      	cmp	r3, #7
  4076dc:	9211      	str	r2, [sp, #68]	; 0x44
  4076de:	e88e 0060 	stmia.w	lr, {r5, r6}
  4076e2:	9310      	str	r3, [sp, #64]	; 0x40
  4076e4:	ddf0      	ble.n	4076c8 <_vfiprintf_r+0x76c>
  4076e6:	2a00      	cmp	r2, #0
  4076e8:	d165      	bne.n	4077b6 <_vfiprintf_r+0x85a>
  4076ea:	3c10      	subs	r4, #16
  4076ec:	2c10      	cmp	r4, #16
  4076ee:	f04f 0001 	mov.w	r0, #1
  4076f2:	4611      	mov	r1, r2
  4076f4:	46ce      	mov	lr, r9
  4076f6:	dcee      	bgt.n	4076d6 <_vfiprintf_r+0x77a>
  4076f8:	46f2      	mov	sl, lr
  4076fa:	4422      	add	r2, r4
  4076fc:	2807      	cmp	r0, #7
  4076fe:	9211      	str	r2, [sp, #68]	; 0x44
  407700:	f8ca 5000 	str.w	r5, [sl]
  407704:	f8ca 4004 	str.w	r4, [sl, #4]
  407708:	9010      	str	r0, [sp, #64]	; 0x40
  40770a:	f300 8085 	bgt.w	407818 <_vfiprintf_r+0x8bc>
  40770e:	f10a 0a08 	add.w	sl, sl, #8
  407712:	3001      	adds	r0, #1
  407714:	9905      	ldr	r1, [sp, #20]
  407716:	f8ca b000 	str.w	fp, [sl]
  40771a:	440a      	add	r2, r1
  40771c:	2807      	cmp	r0, #7
  40771e:	9211      	str	r2, [sp, #68]	; 0x44
  407720:	f8ca 1004 	str.w	r1, [sl, #4]
  407724:	9010      	str	r0, [sp, #64]	; 0x40
  407726:	f340 8082 	ble.w	40782e <_vfiprintf_r+0x8d2>
  40772a:	2a00      	cmp	r2, #0
  40772c:	f040 8118 	bne.w	407960 <_vfiprintf_r+0xa04>
  407730:	9b02      	ldr	r3, [sp, #8]
  407732:	9210      	str	r2, [sp, #64]	; 0x40
  407734:	0758      	lsls	r0, r3, #29
  407736:	d535      	bpl.n	4077a4 <_vfiprintf_r+0x848>
  407738:	9b08      	ldr	r3, [sp, #32]
  40773a:	9901      	ldr	r1, [sp, #4]
  40773c:	1a5c      	subs	r4, r3, r1
  40773e:	2c00      	cmp	r4, #0
  407740:	f340 80e7 	ble.w	407912 <_vfiprintf_r+0x9b6>
  407744:	46ca      	mov	sl, r9
  407746:	2c10      	cmp	r4, #16
  407748:	f340 8218 	ble.w	407b7c <_vfiprintf_r+0xc20>
  40774c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40774e:	4e8f      	ldr	r6, [pc, #572]	; (40798c <_vfiprintf_r+0xa30>)
  407750:	9f06      	ldr	r7, [sp, #24]
  407752:	f8dd b010 	ldr.w	fp, [sp, #16]
  407756:	2510      	movs	r5, #16
  407758:	e006      	b.n	407768 <_vfiprintf_r+0x80c>
  40775a:	1c88      	adds	r0, r1, #2
  40775c:	f10a 0a08 	add.w	sl, sl, #8
  407760:	4619      	mov	r1, r3
  407762:	3c10      	subs	r4, #16
  407764:	2c10      	cmp	r4, #16
  407766:	dd11      	ble.n	40778c <_vfiprintf_r+0x830>
  407768:	1c4b      	adds	r3, r1, #1
  40776a:	3210      	adds	r2, #16
  40776c:	2b07      	cmp	r3, #7
  40776e:	9211      	str	r2, [sp, #68]	; 0x44
  407770:	f8ca 6000 	str.w	r6, [sl]
  407774:	f8ca 5004 	str.w	r5, [sl, #4]
  407778:	9310      	str	r3, [sp, #64]	; 0x40
  40777a:	ddee      	ble.n	40775a <_vfiprintf_r+0x7fe>
  40777c:	bb42      	cbnz	r2, 4077d0 <_vfiprintf_r+0x874>
  40777e:	3c10      	subs	r4, #16
  407780:	2c10      	cmp	r4, #16
  407782:	f04f 0001 	mov.w	r0, #1
  407786:	4611      	mov	r1, r2
  407788:	46ca      	mov	sl, r9
  40778a:	dced      	bgt.n	407768 <_vfiprintf_r+0x80c>
  40778c:	4422      	add	r2, r4
  40778e:	2807      	cmp	r0, #7
  407790:	9211      	str	r2, [sp, #68]	; 0x44
  407792:	f8ca 6000 	str.w	r6, [sl]
  407796:	f8ca 4004 	str.w	r4, [sl, #4]
  40779a:	9010      	str	r0, [sp, #64]	; 0x40
  40779c:	dd51      	ble.n	407842 <_vfiprintf_r+0x8e6>
  40779e:	2a00      	cmp	r2, #0
  4077a0:	f040 819b 	bne.w	407ada <_vfiprintf_r+0xb7e>
  4077a4:	9b03      	ldr	r3, [sp, #12]
  4077a6:	9a08      	ldr	r2, [sp, #32]
  4077a8:	9901      	ldr	r1, [sp, #4]
  4077aa:	428a      	cmp	r2, r1
  4077ac:	bfac      	ite	ge
  4077ae:	189b      	addge	r3, r3, r2
  4077b0:	185b      	addlt	r3, r3, r1
  4077b2:	9303      	str	r3, [sp, #12]
  4077b4:	e04e      	b.n	407854 <_vfiprintf_r+0x8f8>
  4077b6:	aa0f      	add	r2, sp, #60	; 0x3c
  4077b8:	4651      	mov	r1, sl
  4077ba:	4638      	mov	r0, r7
  4077bc:	f7ff fb8e 	bl	406edc <__sprint_r.part.0>
  4077c0:	2800      	cmp	r0, #0
  4077c2:	f040 813f 	bne.w	407a44 <_vfiprintf_r+0xae8>
  4077c6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4077c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4077ca:	1c48      	adds	r0, r1, #1
  4077cc:	46ce      	mov	lr, r9
  4077ce:	e77f      	b.n	4076d0 <_vfiprintf_r+0x774>
  4077d0:	aa0f      	add	r2, sp, #60	; 0x3c
  4077d2:	4659      	mov	r1, fp
  4077d4:	4638      	mov	r0, r7
  4077d6:	f7ff fb81 	bl	406edc <__sprint_r.part.0>
  4077da:	b960      	cbnz	r0, 4077f6 <_vfiprintf_r+0x89a>
  4077dc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4077de:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4077e0:	1c48      	adds	r0, r1, #1
  4077e2:	46ca      	mov	sl, r9
  4077e4:	e7bd      	b.n	407762 <_vfiprintf_r+0x806>
  4077e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4077e8:	f8dd b010 	ldr.w	fp, [sp, #16]
  4077ec:	2b00      	cmp	r3, #0
  4077ee:	f040 81d4 	bne.w	407b9a <_vfiprintf_r+0xc3e>
  4077f2:	2300      	movs	r3, #0
  4077f4:	9310      	str	r3, [sp, #64]	; 0x40
  4077f6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4077fa:	f013 0f01 	tst.w	r3, #1
  4077fe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  407802:	d102      	bne.n	40780a <_vfiprintf_r+0x8ae>
  407804:	059a      	lsls	r2, r3, #22
  407806:	f140 80de 	bpl.w	4079c6 <_vfiprintf_r+0xa6a>
  40780a:	065b      	lsls	r3, r3, #25
  40780c:	f53f acb2 	bmi.w	407174 <_vfiprintf_r+0x218>
  407810:	9803      	ldr	r0, [sp, #12]
  407812:	b02d      	add	sp, #180	; 0xb4
  407814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407818:	2a00      	cmp	r2, #0
  40781a:	f040 8106 	bne.w	407a2a <_vfiprintf_r+0xace>
  40781e:	9a05      	ldr	r2, [sp, #20]
  407820:	921d      	str	r2, [sp, #116]	; 0x74
  407822:	2301      	movs	r3, #1
  407824:	9211      	str	r2, [sp, #68]	; 0x44
  407826:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40782a:	9310      	str	r3, [sp, #64]	; 0x40
  40782c:	46ca      	mov	sl, r9
  40782e:	f10a 0a08 	add.w	sl, sl, #8
  407832:	9b02      	ldr	r3, [sp, #8]
  407834:	0759      	lsls	r1, r3, #29
  407836:	d504      	bpl.n	407842 <_vfiprintf_r+0x8e6>
  407838:	9b08      	ldr	r3, [sp, #32]
  40783a:	9901      	ldr	r1, [sp, #4]
  40783c:	1a5c      	subs	r4, r3, r1
  40783e:	2c00      	cmp	r4, #0
  407840:	dc81      	bgt.n	407746 <_vfiprintf_r+0x7ea>
  407842:	9b03      	ldr	r3, [sp, #12]
  407844:	9908      	ldr	r1, [sp, #32]
  407846:	9801      	ldr	r0, [sp, #4]
  407848:	4281      	cmp	r1, r0
  40784a:	bfac      	ite	ge
  40784c:	185b      	addge	r3, r3, r1
  40784e:	181b      	addlt	r3, r3, r0
  407850:	9303      	str	r3, [sp, #12]
  407852:	bb72      	cbnz	r2, 4078b2 <_vfiprintf_r+0x956>
  407854:	2300      	movs	r3, #0
  407856:	9310      	str	r3, [sp, #64]	; 0x40
  407858:	46ca      	mov	sl, r9
  40785a:	f7ff bbbc 	b.w	406fd6 <_vfiprintf_r+0x7a>
  40785e:	aa0f      	add	r2, sp, #60	; 0x3c
  407860:	9904      	ldr	r1, [sp, #16]
  407862:	4620      	mov	r0, r4
  407864:	f7ff fb3a 	bl	406edc <__sprint_r.part.0>
  407868:	bb50      	cbnz	r0, 4078c0 <_vfiprintf_r+0x964>
  40786a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40786c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40786e:	f101 0e01 	add.w	lr, r1, #1
  407872:	46cc      	mov	ip, r9
  407874:	e548      	b.n	407308 <_vfiprintf_r+0x3ac>
  407876:	2a00      	cmp	r2, #0
  407878:	f040 8140 	bne.w	407afc <_vfiprintf_r+0xba0>
  40787c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  407880:	2900      	cmp	r1, #0
  407882:	f000 811b 	beq.w	407abc <_vfiprintf_r+0xb60>
  407886:	2201      	movs	r2, #1
  407888:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40788c:	4610      	mov	r0, r2
  40788e:	921d      	str	r2, [sp, #116]	; 0x74
  407890:	911c      	str	r1, [sp, #112]	; 0x70
  407892:	46ca      	mov	sl, r9
  407894:	4601      	mov	r1, r0
  407896:	f10a 0a08 	add.w	sl, sl, #8
  40789a:	3001      	adds	r0, #1
  40789c:	e507      	b.n	4072ae <_vfiprintf_r+0x352>
  40789e:	9b02      	ldr	r3, [sp, #8]
  4078a0:	2a01      	cmp	r2, #1
  4078a2:	f000 8098 	beq.w	4079d6 <_vfiprintf_r+0xa7a>
  4078a6:	2a02      	cmp	r2, #2
  4078a8:	d10d      	bne.n	4078c6 <_vfiprintf_r+0x96a>
  4078aa:	9302      	str	r3, [sp, #8]
  4078ac:	2600      	movs	r6, #0
  4078ae:	2700      	movs	r7, #0
  4078b0:	e5b0      	b.n	407414 <_vfiprintf_r+0x4b8>
  4078b2:	aa0f      	add	r2, sp, #60	; 0x3c
  4078b4:	9904      	ldr	r1, [sp, #16]
  4078b6:	9806      	ldr	r0, [sp, #24]
  4078b8:	f7ff fb10 	bl	406edc <__sprint_r.part.0>
  4078bc:	2800      	cmp	r0, #0
  4078be:	d0c9      	beq.n	407854 <_vfiprintf_r+0x8f8>
  4078c0:	f8dd b010 	ldr.w	fp, [sp, #16]
  4078c4:	e797      	b.n	4077f6 <_vfiprintf_r+0x89a>
  4078c6:	9302      	str	r3, [sp, #8]
  4078c8:	2600      	movs	r6, #0
  4078ca:	2700      	movs	r7, #0
  4078cc:	4649      	mov	r1, r9
  4078ce:	e000      	b.n	4078d2 <_vfiprintf_r+0x976>
  4078d0:	4659      	mov	r1, fp
  4078d2:	08f2      	lsrs	r2, r6, #3
  4078d4:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  4078d8:	08f8      	lsrs	r0, r7, #3
  4078da:	f006 0307 	and.w	r3, r6, #7
  4078de:	4607      	mov	r7, r0
  4078e0:	4616      	mov	r6, r2
  4078e2:	3330      	adds	r3, #48	; 0x30
  4078e4:	ea56 0207 	orrs.w	r2, r6, r7
  4078e8:	f801 3c01 	strb.w	r3, [r1, #-1]
  4078ec:	f101 3bff 	add.w	fp, r1, #4294967295
  4078f0:	d1ee      	bne.n	4078d0 <_vfiprintf_r+0x974>
  4078f2:	9a02      	ldr	r2, [sp, #8]
  4078f4:	07d6      	lsls	r6, r2, #31
  4078f6:	f57f ad9d 	bpl.w	407434 <_vfiprintf_r+0x4d8>
  4078fa:	2b30      	cmp	r3, #48	; 0x30
  4078fc:	f43f ad9a 	beq.w	407434 <_vfiprintf_r+0x4d8>
  407900:	3902      	subs	r1, #2
  407902:	2330      	movs	r3, #48	; 0x30
  407904:	f80b 3c01 	strb.w	r3, [fp, #-1]
  407908:	eba9 0301 	sub.w	r3, r9, r1
  40790c:	9305      	str	r3, [sp, #20]
  40790e:	468b      	mov	fp, r1
  407910:	e476      	b.n	407200 <_vfiprintf_r+0x2a4>
  407912:	9b03      	ldr	r3, [sp, #12]
  407914:	9a08      	ldr	r2, [sp, #32]
  407916:	428a      	cmp	r2, r1
  407918:	bfac      	ite	ge
  40791a:	189b      	addge	r3, r3, r2
  40791c:	185b      	addlt	r3, r3, r1
  40791e:	9303      	str	r3, [sp, #12]
  407920:	e798      	b.n	407854 <_vfiprintf_r+0x8f8>
  407922:	2202      	movs	r2, #2
  407924:	e44d      	b.n	4071c2 <_vfiprintf_r+0x266>
  407926:	2f00      	cmp	r7, #0
  407928:	bf08      	it	eq
  40792a:	2e0a      	cmpeq	r6, #10
  40792c:	d352      	bcc.n	4079d4 <_vfiprintf_r+0xa78>
  40792e:	46cb      	mov	fp, r9
  407930:	4630      	mov	r0, r6
  407932:	4639      	mov	r1, r7
  407934:	220a      	movs	r2, #10
  407936:	2300      	movs	r3, #0
  407938:	f001 fbc6 	bl	4090c8 <__aeabi_uldivmod>
  40793c:	3230      	adds	r2, #48	; 0x30
  40793e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  407942:	4630      	mov	r0, r6
  407944:	4639      	mov	r1, r7
  407946:	2300      	movs	r3, #0
  407948:	220a      	movs	r2, #10
  40794a:	f001 fbbd 	bl	4090c8 <__aeabi_uldivmod>
  40794e:	4606      	mov	r6, r0
  407950:	460f      	mov	r7, r1
  407952:	ea56 0307 	orrs.w	r3, r6, r7
  407956:	d1eb      	bne.n	407930 <_vfiprintf_r+0x9d4>
  407958:	e56c      	b.n	407434 <_vfiprintf_r+0x4d8>
  40795a:	9405      	str	r4, [sp, #20]
  40795c:	46cb      	mov	fp, r9
  40795e:	e44f      	b.n	407200 <_vfiprintf_r+0x2a4>
  407960:	aa0f      	add	r2, sp, #60	; 0x3c
  407962:	9904      	ldr	r1, [sp, #16]
  407964:	9806      	ldr	r0, [sp, #24]
  407966:	f7ff fab9 	bl	406edc <__sprint_r.part.0>
  40796a:	2800      	cmp	r0, #0
  40796c:	d1a8      	bne.n	4078c0 <_vfiprintf_r+0x964>
  40796e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407970:	46ca      	mov	sl, r9
  407972:	e75e      	b.n	407832 <_vfiprintf_r+0x8d6>
  407974:	aa0f      	add	r2, sp, #60	; 0x3c
  407976:	9904      	ldr	r1, [sp, #16]
  407978:	9806      	ldr	r0, [sp, #24]
  40797a:	f7ff faaf 	bl	406edc <__sprint_r.part.0>
  40797e:	2800      	cmp	r0, #0
  407980:	d19e      	bne.n	4078c0 <_vfiprintf_r+0x964>
  407982:	46ca      	mov	sl, r9
  407984:	f7ff bbc0 	b.w	407108 <_vfiprintf_r+0x1ac>
  407988:	00409ec4 	.word	0x00409ec4
  40798c:	00409eb4 	.word	0x00409eb4
  407990:	3104      	adds	r1, #4
  407992:	6816      	ldr	r6, [r2, #0]
  407994:	9107      	str	r1, [sp, #28]
  407996:	2201      	movs	r2, #1
  407998:	2700      	movs	r7, #0
  40799a:	e412      	b.n	4071c2 <_vfiprintf_r+0x266>
  40799c:	9807      	ldr	r0, [sp, #28]
  40799e:	4601      	mov	r1, r0
  4079a0:	3104      	adds	r1, #4
  4079a2:	6806      	ldr	r6, [r0, #0]
  4079a4:	9107      	str	r1, [sp, #28]
  4079a6:	2700      	movs	r7, #0
  4079a8:	e40b      	b.n	4071c2 <_vfiprintf_r+0x266>
  4079aa:	680e      	ldr	r6, [r1, #0]
  4079ac:	3104      	adds	r1, #4
  4079ae:	9107      	str	r1, [sp, #28]
  4079b0:	2700      	movs	r7, #0
  4079b2:	e591      	b.n	4074d8 <_vfiprintf_r+0x57c>
  4079b4:	9907      	ldr	r1, [sp, #28]
  4079b6:	680e      	ldr	r6, [r1, #0]
  4079b8:	460a      	mov	r2, r1
  4079ba:	17f7      	asrs	r7, r6, #31
  4079bc:	3204      	adds	r2, #4
  4079be:	9207      	str	r2, [sp, #28]
  4079c0:	4630      	mov	r0, r6
  4079c2:	4639      	mov	r1, r7
  4079c4:	e50f      	b.n	4073e6 <_vfiprintf_r+0x48a>
  4079c6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4079ca:	f000 fe7f 	bl	4086cc <__retarget_lock_release_recursive>
  4079ce:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4079d2:	e71a      	b.n	40780a <_vfiprintf_r+0x8ae>
  4079d4:	9b02      	ldr	r3, [sp, #8]
  4079d6:	9302      	str	r3, [sp, #8]
  4079d8:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4079dc:	3630      	adds	r6, #48	; 0x30
  4079de:	2301      	movs	r3, #1
  4079e0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  4079e4:	9305      	str	r3, [sp, #20]
  4079e6:	e40b      	b.n	407200 <_vfiprintf_r+0x2a4>
  4079e8:	aa0f      	add	r2, sp, #60	; 0x3c
  4079ea:	9904      	ldr	r1, [sp, #16]
  4079ec:	9806      	ldr	r0, [sp, #24]
  4079ee:	f7ff fa75 	bl	406edc <__sprint_r.part.0>
  4079f2:	2800      	cmp	r0, #0
  4079f4:	f47f af64 	bne.w	4078c0 <_vfiprintf_r+0x964>
  4079f8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4079fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4079fc:	1c48      	adds	r0, r1, #1
  4079fe:	46ca      	mov	sl, r9
  407a00:	e651      	b.n	4076a6 <_vfiprintf_r+0x74a>
  407a02:	aa0f      	add	r2, sp, #60	; 0x3c
  407a04:	9904      	ldr	r1, [sp, #16]
  407a06:	9806      	ldr	r0, [sp, #24]
  407a08:	f7ff fa68 	bl	406edc <__sprint_r.part.0>
  407a0c:	2800      	cmp	r0, #0
  407a0e:	f47f af57 	bne.w	4078c0 <_vfiprintf_r+0x964>
  407a12:	9910      	ldr	r1, [sp, #64]	; 0x40
  407a14:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407a16:	1c48      	adds	r0, r1, #1
  407a18:	46ca      	mov	sl, r9
  407a1a:	e448      	b.n	4072ae <_vfiprintf_r+0x352>
  407a1c:	2a00      	cmp	r2, #0
  407a1e:	f040 8091 	bne.w	407b44 <_vfiprintf_r+0xbe8>
  407a22:	2001      	movs	r0, #1
  407a24:	4611      	mov	r1, r2
  407a26:	46ca      	mov	sl, r9
  407a28:	e641      	b.n	4076ae <_vfiprintf_r+0x752>
  407a2a:	aa0f      	add	r2, sp, #60	; 0x3c
  407a2c:	9904      	ldr	r1, [sp, #16]
  407a2e:	9806      	ldr	r0, [sp, #24]
  407a30:	f7ff fa54 	bl	406edc <__sprint_r.part.0>
  407a34:	2800      	cmp	r0, #0
  407a36:	f47f af43 	bne.w	4078c0 <_vfiprintf_r+0x964>
  407a3a:	9810      	ldr	r0, [sp, #64]	; 0x40
  407a3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407a3e:	3001      	adds	r0, #1
  407a40:	46ca      	mov	sl, r9
  407a42:	e667      	b.n	407714 <_vfiprintf_r+0x7b8>
  407a44:	46d3      	mov	fp, sl
  407a46:	e6d6      	b.n	4077f6 <_vfiprintf_r+0x89a>
  407a48:	9e07      	ldr	r6, [sp, #28]
  407a4a:	3607      	adds	r6, #7
  407a4c:	f026 0207 	bic.w	r2, r6, #7
  407a50:	f102 0108 	add.w	r1, r2, #8
  407a54:	e9d2 6700 	ldrd	r6, r7, [r2]
  407a58:	9107      	str	r1, [sp, #28]
  407a5a:	2201      	movs	r2, #1
  407a5c:	f7ff bbb1 	b.w	4071c2 <_vfiprintf_r+0x266>
  407a60:	9e07      	ldr	r6, [sp, #28]
  407a62:	3607      	adds	r6, #7
  407a64:	f026 0607 	bic.w	r6, r6, #7
  407a68:	e9d6 0100 	ldrd	r0, r1, [r6]
  407a6c:	f106 0208 	add.w	r2, r6, #8
  407a70:	9207      	str	r2, [sp, #28]
  407a72:	4606      	mov	r6, r0
  407a74:	460f      	mov	r7, r1
  407a76:	e4b6      	b.n	4073e6 <_vfiprintf_r+0x48a>
  407a78:	9e07      	ldr	r6, [sp, #28]
  407a7a:	3607      	adds	r6, #7
  407a7c:	f026 0207 	bic.w	r2, r6, #7
  407a80:	f102 0108 	add.w	r1, r2, #8
  407a84:	e9d2 6700 	ldrd	r6, r7, [r2]
  407a88:	9107      	str	r1, [sp, #28]
  407a8a:	2200      	movs	r2, #0
  407a8c:	f7ff bb99 	b.w	4071c2 <_vfiprintf_r+0x266>
  407a90:	9e07      	ldr	r6, [sp, #28]
  407a92:	3607      	adds	r6, #7
  407a94:	f026 0107 	bic.w	r1, r6, #7
  407a98:	f101 0008 	add.w	r0, r1, #8
  407a9c:	9007      	str	r0, [sp, #28]
  407a9e:	e9d1 6700 	ldrd	r6, r7, [r1]
  407aa2:	e519      	b.n	4074d8 <_vfiprintf_r+0x57c>
  407aa4:	46cb      	mov	fp, r9
  407aa6:	f7ff bbab 	b.w	407200 <_vfiprintf_r+0x2a4>
  407aaa:	252d      	movs	r5, #45	; 0x2d
  407aac:	4276      	negs	r6, r6
  407aae:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  407ab2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  407ab6:	2201      	movs	r2, #1
  407ab8:	f7ff bb88 	b.w	4071cc <_vfiprintf_r+0x270>
  407abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407abe:	b9b3      	cbnz	r3, 407aee <_vfiprintf_r+0xb92>
  407ac0:	4611      	mov	r1, r2
  407ac2:	2001      	movs	r0, #1
  407ac4:	46ca      	mov	sl, r9
  407ac6:	e5f2      	b.n	4076ae <_vfiprintf_r+0x752>
  407ac8:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  407acc:	f000 fdfe 	bl	4086cc <__retarget_lock_release_recursive>
  407ad0:	f04f 33ff 	mov.w	r3, #4294967295
  407ad4:	9303      	str	r3, [sp, #12]
  407ad6:	f7ff bb50 	b.w	40717a <_vfiprintf_r+0x21e>
  407ada:	aa0f      	add	r2, sp, #60	; 0x3c
  407adc:	9904      	ldr	r1, [sp, #16]
  407ade:	9806      	ldr	r0, [sp, #24]
  407ae0:	f7ff f9fc 	bl	406edc <__sprint_r.part.0>
  407ae4:	2800      	cmp	r0, #0
  407ae6:	f47f aeeb 	bne.w	4078c0 <_vfiprintf_r+0x964>
  407aea:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407aec:	e6a9      	b.n	407842 <_vfiprintf_r+0x8e6>
  407aee:	ab0e      	add	r3, sp, #56	; 0x38
  407af0:	2202      	movs	r2, #2
  407af2:	931c      	str	r3, [sp, #112]	; 0x70
  407af4:	921d      	str	r2, [sp, #116]	; 0x74
  407af6:	2001      	movs	r0, #1
  407af8:	46ca      	mov	sl, r9
  407afa:	e5d0      	b.n	40769e <_vfiprintf_r+0x742>
  407afc:	aa0f      	add	r2, sp, #60	; 0x3c
  407afe:	9904      	ldr	r1, [sp, #16]
  407b00:	9806      	ldr	r0, [sp, #24]
  407b02:	f7ff f9eb 	bl	406edc <__sprint_r.part.0>
  407b06:	2800      	cmp	r0, #0
  407b08:	f47f aeda 	bne.w	4078c0 <_vfiprintf_r+0x964>
  407b0c:	9910      	ldr	r1, [sp, #64]	; 0x40
  407b0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407b10:	1c48      	adds	r0, r1, #1
  407b12:	46ca      	mov	sl, r9
  407b14:	e5a4      	b.n	407660 <_vfiprintf_r+0x704>
  407b16:	9a07      	ldr	r2, [sp, #28]
  407b18:	9903      	ldr	r1, [sp, #12]
  407b1a:	6813      	ldr	r3, [r2, #0]
  407b1c:	17cd      	asrs	r5, r1, #31
  407b1e:	4608      	mov	r0, r1
  407b20:	3204      	adds	r2, #4
  407b22:	4629      	mov	r1, r5
  407b24:	9207      	str	r2, [sp, #28]
  407b26:	e9c3 0100 	strd	r0, r1, [r3]
  407b2a:	f7ff ba54 	b.w	406fd6 <_vfiprintf_r+0x7a>
  407b2e:	4658      	mov	r0, fp
  407b30:	9607      	str	r6, [sp, #28]
  407b32:	9302      	str	r3, [sp, #8]
  407b34:	f7ff f964 	bl	406e00 <strlen>
  407b38:	2400      	movs	r4, #0
  407b3a:	9005      	str	r0, [sp, #20]
  407b3c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  407b40:	f7ff bb5e 	b.w	407200 <_vfiprintf_r+0x2a4>
  407b44:	aa0f      	add	r2, sp, #60	; 0x3c
  407b46:	9904      	ldr	r1, [sp, #16]
  407b48:	9806      	ldr	r0, [sp, #24]
  407b4a:	f7ff f9c7 	bl	406edc <__sprint_r.part.0>
  407b4e:	2800      	cmp	r0, #0
  407b50:	f47f aeb6 	bne.w	4078c0 <_vfiprintf_r+0x964>
  407b54:	9910      	ldr	r1, [sp, #64]	; 0x40
  407b56:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407b58:	1c48      	adds	r0, r1, #1
  407b5a:	46ca      	mov	sl, r9
  407b5c:	e5a7      	b.n	4076ae <_vfiprintf_r+0x752>
  407b5e:	9910      	ldr	r1, [sp, #64]	; 0x40
  407b60:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407b62:	4e20      	ldr	r6, [pc, #128]	; (407be4 <_vfiprintf_r+0xc88>)
  407b64:	3101      	adds	r1, #1
  407b66:	f7ff bb90 	b.w	40728a <_vfiprintf_r+0x32e>
  407b6a:	2c06      	cmp	r4, #6
  407b6c:	bf28      	it	cs
  407b6e:	2406      	movcs	r4, #6
  407b70:	9405      	str	r4, [sp, #20]
  407b72:	9607      	str	r6, [sp, #28]
  407b74:	9401      	str	r4, [sp, #4]
  407b76:	f8df b070 	ldr.w	fp, [pc, #112]	; 407be8 <_vfiprintf_r+0xc8c>
  407b7a:	e4d5      	b.n	407528 <_vfiprintf_r+0x5cc>
  407b7c:	9810      	ldr	r0, [sp, #64]	; 0x40
  407b7e:	4e19      	ldr	r6, [pc, #100]	; (407be4 <_vfiprintf_r+0xc88>)
  407b80:	3001      	adds	r0, #1
  407b82:	e603      	b.n	40778c <_vfiprintf_r+0x830>
  407b84:	9405      	str	r4, [sp, #20]
  407b86:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  407b8a:	9607      	str	r6, [sp, #28]
  407b8c:	9302      	str	r3, [sp, #8]
  407b8e:	4604      	mov	r4, r0
  407b90:	f7ff bb36 	b.w	407200 <_vfiprintf_r+0x2a4>
  407b94:	4686      	mov	lr, r0
  407b96:	f7ff bbce 	b.w	407336 <_vfiprintf_r+0x3da>
  407b9a:	9806      	ldr	r0, [sp, #24]
  407b9c:	aa0f      	add	r2, sp, #60	; 0x3c
  407b9e:	4659      	mov	r1, fp
  407ba0:	f7ff f99c 	bl	406edc <__sprint_r.part.0>
  407ba4:	2800      	cmp	r0, #0
  407ba6:	f43f ae24 	beq.w	4077f2 <_vfiprintf_r+0x896>
  407baa:	e624      	b.n	4077f6 <_vfiprintf_r+0x89a>
  407bac:	9907      	ldr	r1, [sp, #28]
  407bae:	f898 2001 	ldrb.w	r2, [r8, #1]
  407bb2:	680c      	ldr	r4, [r1, #0]
  407bb4:	3104      	adds	r1, #4
  407bb6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  407bba:	46b8      	mov	r8, r7
  407bbc:	9107      	str	r1, [sp, #28]
  407bbe:	f7ff ba3f 	b.w	407040 <_vfiprintf_r+0xe4>
  407bc2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  407bc6:	e43c      	b.n	407442 <_vfiprintf_r+0x4e6>
  407bc8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  407bcc:	e521      	b.n	407612 <_vfiprintf_r+0x6b6>
  407bce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  407bd2:	f7ff bbf4 	b.w	4073be <_vfiprintf_r+0x462>
  407bd6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  407bda:	e491      	b.n	407500 <_vfiprintf_r+0x5a4>
  407bdc:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  407be0:	e469      	b.n	4074b6 <_vfiprintf_r+0x55a>
  407be2:	bf00      	nop
  407be4:	00409eb4 	.word	0x00409eb4
  407be8:	00409eac 	.word	0x00409eac

00407bec <__sbprintf>:
  407bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407bf0:	460c      	mov	r4, r1
  407bf2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  407bf6:	8989      	ldrh	r1, [r1, #12]
  407bf8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  407bfa:	89e5      	ldrh	r5, [r4, #14]
  407bfc:	9619      	str	r6, [sp, #100]	; 0x64
  407bfe:	f021 0102 	bic.w	r1, r1, #2
  407c02:	4606      	mov	r6, r0
  407c04:	69e0      	ldr	r0, [r4, #28]
  407c06:	f8ad 100c 	strh.w	r1, [sp, #12]
  407c0a:	4617      	mov	r7, r2
  407c0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  407c10:	6a62      	ldr	r2, [r4, #36]	; 0x24
  407c12:	f8ad 500e 	strh.w	r5, [sp, #14]
  407c16:	4698      	mov	r8, r3
  407c18:	ad1a      	add	r5, sp, #104	; 0x68
  407c1a:	2300      	movs	r3, #0
  407c1c:	9007      	str	r0, [sp, #28]
  407c1e:	a816      	add	r0, sp, #88	; 0x58
  407c20:	9209      	str	r2, [sp, #36]	; 0x24
  407c22:	9306      	str	r3, [sp, #24]
  407c24:	9500      	str	r5, [sp, #0]
  407c26:	9504      	str	r5, [sp, #16]
  407c28:	9102      	str	r1, [sp, #8]
  407c2a:	9105      	str	r1, [sp, #20]
  407c2c:	f000 fd48 	bl	4086c0 <__retarget_lock_init_recursive>
  407c30:	4643      	mov	r3, r8
  407c32:	463a      	mov	r2, r7
  407c34:	4669      	mov	r1, sp
  407c36:	4630      	mov	r0, r6
  407c38:	f7ff f990 	bl	406f5c <_vfiprintf_r>
  407c3c:	1e05      	subs	r5, r0, #0
  407c3e:	db07      	blt.n	407c50 <__sbprintf+0x64>
  407c40:	4630      	mov	r0, r6
  407c42:	4669      	mov	r1, sp
  407c44:	f000 f928 	bl	407e98 <_fflush_r>
  407c48:	2800      	cmp	r0, #0
  407c4a:	bf18      	it	ne
  407c4c:	f04f 35ff 	movne.w	r5, #4294967295
  407c50:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  407c54:	065b      	lsls	r3, r3, #25
  407c56:	d503      	bpl.n	407c60 <__sbprintf+0x74>
  407c58:	89a3      	ldrh	r3, [r4, #12]
  407c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407c5e:	81a3      	strh	r3, [r4, #12]
  407c60:	9816      	ldr	r0, [sp, #88]	; 0x58
  407c62:	f000 fd2f 	bl	4086c4 <__retarget_lock_close_recursive>
  407c66:	4628      	mov	r0, r5
  407c68:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  407c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00407c70 <__swsetup_r>:
  407c70:	b538      	push	{r3, r4, r5, lr}
  407c72:	4b30      	ldr	r3, [pc, #192]	; (407d34 <__swsetup_r+0xc4>)
  407c74:	681b      	ldr	r3, [r3, #0]
  407c76:	4605      	mov	r5, r0
  407c78:	460c      	mov	r4, r1
  407c7a:	b113      	cbz	r3, 407c82 <__swsetup_r+0x12>
  407c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  407c7e:	2a00      	cmp	r2, #0
  407c80:	d038      	beq.n	407cf4 <__swsetup_r+0x84>
  407c82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407c86:	b293      	uxth	r3, r2
  407c88:	0718      	lsls	r0, r3, #28
  407c8a:	d50c      	bpl.n	407ca6 <__swsetup_r+0x36>
  407c8c:	6920      	ldr	r0, [r4, #16]
  407c8e:	b1a8      	cbz	r0, 407cbc <__swsetup_r+0x4c>
  407c90:	f013 0201 	ands.w	r2, r3, #1
  407c94:	d01e      	beq.n	407cd4 <__swsetup_r+0x64>
  407c96:	6963      	ldr	r3, [r4, #20]
  407c98:	2200      	movs	r2, #0
  407c9a:	425b      	negs	r3, r3
  407c9c:	61a3      	str	r3, [r4, #24]
  407c9e:	60a2      	str	r2, [r4, #8]
  407ca0:	b1f0      	cbz	r0, 407ce0 <__swsetup_r+0x70>
  407ca2:	2000      	movs	r0, #0
  407ca4:	bd38      	pop	{r3, r4, r5, pc}
  407ca6:	06d9      	lsls	r1, r3, #27
  407ca8:	d53c      	bpl.n	407d24 <__swsetup_r+0xb4>
  407caa:	0758      	lsls	r0, r3, #29
  407cac:	d426      	bmi.n	407cfc <__swsetup_r+0x8c>
  407cae:	6920      	ldr	r0, [r4, #16]
  407cb0:	f042 0308 	orr.w	r3, r2, #8
  407cb4:	81a3      	strh	r3, [r4, #12]
  407cb6:	b29b      	uxth	r3, r3
  407cb8:	2800      	cmp	r0, #0
  407cba:	d1e9      	bne.n	407c90 <__swsetup_r+0x20>
  407cbc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  407cc0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  407cc4:	d0e4      	beq.n	407c90 <__swsetup_r+0x20>
  407cc6:	4628      	mov	r0, r5
  407cc8:	4621      	mov	r1, r4
  407cca:	f000 fd2f 	bl	40872c <__smakebuf_r>
  407cce:	89a3      	ldrh	r3, [r4, #12]
  407cd0:	6920      	ldr	r0, [r4, #16]
  407cd2:	e7dd      	b.n	407c90 <__swsetup_r+0x20>
  407cd4:	0799      	lsls	r1, r3, #30
  407cd6:	bf58      	it	pl
  407cd8:	6962      	ldrpl	r2, [r4, #20]
  407cda:	60a2      	str	r2, [r4, #8]
  407cdc:	2800      	cmp	r0, #0
  407cde:	d1e0      	bne.n	407ca2 <__swsetup_r+0x32>
  407ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407ce4:	061a      	lsls	r2, r3, #24
  407ce6:	d5dd      	bpl.n	407ca4 <__swsetup_r+0x34>
  407ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407cec:	81a3      	strh	r3, [r4, #12]
  407cee:	f04f 30ff 	mov.w	r0, #4294967295
  407cf2:	bd38      	pop	{r3, r4, r5, pc}
  407cf4:	4618      	mov	r0, r3
  407cf6:	f000 f927 	bl	407f48 <__sinit>
  407cfa:	e7c2      	b.n	407c82 <__swsetup_r+0x12>
  407cfc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  407cfe:	b151      	cbz	r1, 407d16 <__swsetup_r+0xa6>
  407d00:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407d04:	4299      	cmp	r1, r3
  407d06:	d004      	beq.n	407d12 <__swsetup_r+0xa2>
  407d08:	4628      	mov	r0, r5
  407d0a:	f000 fa43 	bl	408194 <_free_r>
  407d0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407d12:	2300      	movs	r3, #0
  407d14:	6323      	str	r3, [r4, #48]	; 0x30
  407d16:	2300      	movs	r3, #0
  407d18:	6920      	ldr	r0, [r4, #16]
  407d1a:	6063      	str	r3, [r4, #4]
  407d1c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  407d20:	6020      	str	r0, [r4, #0]
  407d22:	e7c5      	b.n	407cb0 <__swsetup_r+0x40>
  407d24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  407d28:	2309      	movs	r3, #9
  407d2a:	602b      	str	r3, [r5, #0]
  407d2c:	f04f 30ff 	mov.w	r0, #4294967295
  407d30:	81a2      	strh	r2, [r4, #12]
  407d32:	bd38      	pop	{r3, r4, r5, pc}
  407d34:	20400058 	.word	0x20400058

00407d38 <register_fini>:
  407d38:	4b02      	ldr	r3, [pc, #8]	; (407d44 <register_fini+0xc>)
  407d3a:	b113      	cbz	r3, 407d42 <register_fini+0xa>
  407d3c:	4802      	ldr	r0, [pc, #8]	; (407d48 <register_fini+0x10>)
  407d3e:	f000 b805 	b.w	407d4c <atexit>
  407d42:	4770      	bx	lr
  407d44:	00000000 	.word	0x00000000
  407d48:	00407fb9 	.word	0x00407fb9

00407d4c <atexit>:
  407d4c:	2300      	movs	r3, #0
  407d4e:	4601      	mov	r1, r0
  407d50:	461a      	mov	r2, r3
  407d52:	4618      	mov	r0, r3
  407d54:	f001 b890 	b.w	408e78 <__register_exitproc>

00407d58 <__sflush_r>:
  407d58:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  407d5c:	b29a      	uxth	r2, r3
  407d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407d62:	460d      	mov	r5, r1
  407d64:	0711      	lsls	r1, r2, #28
  407d66:	4680      	mov	r8, r0
  407d68:	d43a      	bmi.n	407de0 <__sflush_r+0x88>
  407d6a:	686a      	ldr	r2, [r5, #4]
  407d6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  407d70:	2a00      	cmp	r2, #0
  407d72:	81ab      	strh	r3, [r5, #12]
  407d74:	dd6f      	ble.n	407e56 <__sflush_r+0xfe>
  407d76:	6aac      	ldr	r4, [r5, #40]	; 0x28
  407d78:	2c00      	cmp	r4, #0
  407d7a:	d049      	beq.n	407e10 <__sflush_r+0xb8>
  407d7c:	2200      	movs	r2, #0
  407d7e:	b29b      	uxth	r3, r3
  407d80:	f8d8 6000 	ldr.w	r6, [r8]
  407d84:	f8c8 2000 	str.w	r2, [r8]
  407d88:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  407d8c:	d067      	beq.n	407e5e <__sflush_r+0x106>
  407d8e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  407d90:	075f      	lsls	r7, r3, #29
  407d92:	d505      	bpl.n	407da0 <__sflush_r+0x48>
  407d94:	6869      	ldr	r1, [r5, #4]
  407d96:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  407d98:	1a52      	subs	r2, r2, r1
  407d9a:	b10b      	cbz	r3, 407da0 <__sflush_r+0x48>
  407d9c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  407d9e:	1ad2      	subs	r2, r2, r3
  407da0:	2300      	movs	r3, #0
  407da2:	69e9      	ldr	r1, [r5, #28]
  407da4:	4640      	mov	r0, r8
  407da6:	47a0      	blx	r4
  407da8:	1c44      	adds	r4, r0, #1
  407daa:	d03c      	beq.n	407e26 <__sflush_r+0xce>
  407dac:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  407db0:	692a      	ldr	r2, [r5, #16]
  407db2:	602a      	str	r2, [r5, #0]
  407db4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  407db8:	2200      	movs	r2, #0
  407dba:	81ab      	strh	r3, [r5, #12]
  407dbc:	04db      	lsls	r3, r3, #19
  407dbe:	606a      	str	r2, [r5, #4]
  407dc0:	d447      	bmi.n	407e52 <__sflush_r+0xfa>
  407dc2:	6b29      	ldr	r1, [r5, #48]	; 0x30
  407dc4:	f8c8 6000 	str.w	r6, [r8]
  407dc8:	b311      	cbz	r1, 407e10 <__sflush_r+0xb8>
  407dca:	f105 0340 	add.w	r3, r5, #64	; 0x40
  407dce:	4299      	cmp	r1, r3
  407dd0:	d002      	beq.n	407dd8 <__sflush_r+0x80>
  407dd2:	4640      	mov	r0, r8
  407dd4:	f000 f9de 	bl	408194 <_free_r>
  407dd8:	2000      	movs	r0, #0
  407dda:	6328      	str	r0, [r5, #48]	; 0x30
  407ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407de0:	692e      	ldr	r6, [r5, #16]
  407de2:	b1ae      	cbz	r6, 407e10 <__sflush_r+0xb8>
  407de4:	682c      	ldr	r4, [r5, #0]
  407de6:	602e      	str	r6, [r5, #0]
  407de8:	0791      	lsls	r1, r2, #30
  407dea:	bf0c      	ite	eq
  407dec:	696b      	ldreq	r3, [r5, #20]
  407dee:	2300      	movne	r3, #0
  407df0:	1ba4      	subs	r4, r4, r6
  407df2:	60ab      	str	r3, [r5, #8]
  407df4:	e00a      	b.n	407e0c <__sflush_r+0xb4>
  407df6:	4623      	mov	r3, r4
  407df8:	4632      	mov	r2, r6
  407dfa:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  407dfc:	69e9      	ldr	r1, [r5, #28]
  407dfe:	4640      	mov	r0, r8
  407e00:	47b8      	blx	r7
  407e02:	2800      	cmp	r0, #0
  407e04:	eba4 0400 	sub.w	r4, r4, r0
  407e08:	4406      	add	r6, r0
  407e0a:	dd04      	ble.n	407e16 <__sflush_r+0xbe>
  407e0c:	2c00      	cmp	r4, #0
  407e0e:	dcf2      	bgt.n	407df6 <__sflush_r+0x9e>
  407e10:	2000      	movs	r0, #0
  407e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407e16:	89ab      	ldrh	r3, [r5, #12]
  407e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407e1c:	81ab      	strh	r3, [r5, #12]
  407e1e:	f04f 30ff 	mov.w	r0, #4294967295
  407e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407e26:	f8d8 4000 	ldr.w	r4, [r8]
  407e2a:	2c1d      	cmp	r4, #29
  407e2c:	d8f3      	bhi.n	407e16 <__sflush_r+0xbe>
  407e2e:	4b19      	ldr	r3, [pc, #100]	; (407e94 <__sflush_r+0x13c>)
  407e30:	40e3      	lsrs	r3, r4
  407e32:	43db      	mvns	r3, r3
  407e34:	f013 0301 	ands.w	r3, r3, #1
  407e38:	d1ed      	bne.n	407e16 <__sflush_r+0xbe>
  407e3a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  407e3e:	606b      	str	r3, [r5, #4]
  407e40:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  407e44:	6929      	ldr	r1, [r5, #16]
  407e46:	81ab      	strh	r3, [r5, #12]
  407e48:	04da      	lsls	r2, r3, #19
  407e4a:	6029      	str	r1, [r5, #0]
  407e4c:	d5b9      	bpl.n	407dc2 <__sflush_r+0x6a>
  407e4e:	2c00      	cmp	r4, #0
  407e50:	d1b7      	bne.n	407dc2 <__sflush_r+0x6a>
  407e52:	6528      	str	r0, [r5, #80]	; 0x50
  407e54:	e7b5      	b.n	407dc2 <__sflush_r+0x6a>
  407e56:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  407e58:	2a00      	cmp	r2, #0
  407e5a:	dc8c      	bgt.n	407d76 <__sflush_r+0x1e>
  407e5c:	e7d8      	b.n	407e10 <__sflush_r+0xb8>
  407e5e:	2301      	movs	r3, #1
  407e60:	69e9      	ldr	r1, [r5, #28]
  407e62:	4640      	mov	r0, r8
  407e64:	47a0      	blx	r4
  407e66:	1c43      	adds	r3, r0, #1
  407e68:	4602      	mov	r2, r0
  407e6a:	d002      	beq.n	407e72 <__sflush_r+0x11a>
  407e6c:	89ab      	ldrh	r3, [r5, #12]
  407e6e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  407e70:	e78e      	b.n	407d90 <__sflush_r+0x38>
  407e72:	f8d8 3000 	ldr.w	r3, [r8]
  407e76:	2b00      	cmp	r3, #0
  407e78:	d0f8      	beq.n	407e6c <__sflush_r+0x114>
  407e7a:	2b1d      	cmp	r3, #29
  407e7c:	d001      	beq.n	407e82 <__sflush_r+0x12a>
  407e7e:	2b16      	cmp	r3, #22
  407e80:	d102      	bne.n	407e88 <__sflush_r+0x130>
  407e82:	f8c8 6000 	str.w	r6, [r8]
  407e86:	e7c3      	b.n	407e10 <__sflush_r+0xb8>
  407e88:	89ab      	ldrh	r3, [r5, #12]
  407e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407e8e:	81ab      	strh	r3, [r5, #12]
  407e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407e94:	20400001 	.word	0x20400001

00407e98 <_fflush_r>:
  407e98:	b538      	push	{r3, r4, r5, lr}
  407e9a:	460d      	mov	r5, r1
  407e9c:	4604      	mov	r4, r0
  407e9e:	b108      	cbz	r0, 407ea4 <_fflush_r+0xc>
  407ea0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407ea2:	b1bb      	cbz	r3, 407ed4 <_fflush_r+0x3c>
  407ea4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  407ea8:	b188      	cbz	r0, 407ece <_fflush_r+0x36>
  407eaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  407eac:	07db      	lsls	r3, r3, #31
  407eae:	d401      	bmi.n	407eb4 <_fflush_r+0x1c>
  407eb0:	0581      	lsls	r1, r0, #22
  407eb2:	d517      	bpl.n	407ee4 <_fflush_r+0x4c>
  407eb4:	4620      	mov	r0, r4
  407eb6:	4629      	mov	r1, r5
  407eb8:	f7ff ff4e 	bl	407d58 <__sflush_r>
  407ebc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  407ebe:	07da      	lsls	r2, r3, #31
  407ec0:	4604      	mov	r4, r0
  407ec2:	d402      	bmi.n	407eca <_fflush_r+0x32>
  407ec4:	89ab      	ldrh	r3, [r5, #12]
  407ec6:	059b      	lsls	r3, r3, #22
  407ec8:	d507      	bpl.n	407eda <_fflush_r+0x42>
  407eca:	4620      	mov	r0, r4
  407ecc:	bd38      	pop	{r3, r4, r5, pc}
  407ece:	4604      	mov	r4, r0
  407ed0:	4620      	mov	r0, r4
  407ed2:	bd38      	pop	{r3, r4, r5, pc}
  407ed4:	f000 f838 	bl	407f48 <__sinit>
  407ed8:	e7e4      	b.n	407ea4 <_fflush_r+0xc>
  407eda:	6da8      	ldr	r0, [r5, #88]	; 0x58
  407edc:	f000 fbf6 	bl	4086cc <__retarget_lock_release_recursive>
  407ee0:	4620      	mov	r0, r4
  407ee2:	bd38      	pop	{r3, r4, r5, pc}
  407ee4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  407ee6:	f000 fbef 	bl	4086c8 <__retarget_lock_acquire_recursive>
  407eea:	e7e3      	b.n	407eb4 <_fflush_r+0x1c>

00407eec <_cleanup_r>:
  407eec:	4901      	ldr	r1, [pc, #4]	; (407ef4 <_cleanup_r+0x8>)
  407eee:	f000 bbaf 	b.w	408650 <_fwalk_reent>
  407ef2:	bf00      	nop
  407ef4:	00408f61 	.word	0x00408f61

00407ef8 <std.isra.0>:
  407ef8:	b510      	push	{r4, lr}
  407efa:	2300      	movs	r3, #0
  407efc:	4604      	mov	r4, r0
  407efe:	8181      	strh	r1, [r0, #12]
  407f00:	81c2      	strh	r2, [r0, #14]
  407f02:	6003      	str	r3, [r0, #0]
  407f04:	6043      	str	r3, [r0, #4]
  407f06:	6083      	str	r3, [r0, #8]
  407f08:	6643      	str	r3, [r0, #100]	; 0x64
  407f0a:	6103      	str	r3, [r0, #16]
  407f0c:	6143      	str	r3, [r0, #20]
  407f0e:	6183      	str	r3, [r0, #24]
  407f10:	4619      	mov	r1, r3
  407f12:	2208      	movs	r2, #8
  407f14:	305c      	adds	r0, #92	; 0x5c
  407f16:	f7fe fef1 	bl	406cfc <memset>
  407f1a:	4807      	ldr	r0, [pc, #28]	; (407f38 <std.isra.0+0x40>)
  407f1c:	4907      	ldr	r1, [pc, #28]	; (407f3c <std.isra.0+0x44>)
  407f1e:	4a08      	ldr	r2, [pc, #32]	; (407f40 <std.isra.0+0x48>)
  407f20:	4b08      	ldr	r3, [pc, #32]	; (407f44 <std.isra.0+0x4c>)
  407f22:	6220      	str	r0, [r4, #32]
  407f24:	61e4      	str	r4, [r4, #28]
  407f26:	6261      	str	r1, [r4, #36]	; 0x24
  407f28:	62a2      	str	r2, [r4, #40]	; 0x28
  407f2a:	62e3      	str	r3, [r4, #44]	; 0x2c
  407f2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  407f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407f34:	f000 bbc4 	b.w	4086c0 <__retarget_lock_init_recursive>
  407f38:	00408ca5 	.word	0x00408ca5
  407f3c:	00408cc9 	.word	0x00408cc9
  407f40:	00408d05 	.word	0x00408d05
  407f44:	00408d25 	.word	0x00408d25

00407f48 <__sinit>:
  407f48:	b510      	push	{r4, lr}
  407f4a:	4604      	mov	r4, r0
  407f4c:	4812      	ldr	r0, [pc, #72]	; (407f98 <__sinit+0x50>)
  407f4e:	f000 fbbb 	bl	4086c8 <__retarget_lock_acquire_recursive>
  407f52:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  407f54:	b9d2      	cbnz	r2, 407f8c <__sinit+0x44>
  407f56:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  407f5a:	4810      	ldr	r0, [pc, #64]	; (407f9c <__sinit+0x54>)
  407f5c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  407f60:	2103      	movs	r1, #3
  407f62:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  407f66:	63e0      	str	r0, [r4, #60]	; 0x3c
  407f68:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  407f6c:	6860      	ldr	r0, [r4, #4]
  407f6e:	2104      	movs	r1, #4
  407f70:	f7ff ffc2 	bl	407ef8 <std.isra.0>
  407f74:	2201      	movs	r2, #1
  407f76:	2109      	movs	r1, #9
  407f78:	68a0      	ldr	r0, [r4, #8]
  407f7a:	f7ff ffbd 	bl	407ef8 <std.isra.0>
  407f7e:	2202      	movs	r2, #2
  407f80:	2112      	movs	r1, #18
  407f82:	68e0      	ldr	r0, [r4, #12]
  407f84:	f7ff ffb8 	bl	407ef8 <std.isra.0>
  407f88:	2301      	movs	r3, #1
  407f8a:	63a3      	str	r3, [r4, #56]	; 0x38
  407f8c:	4802      	ldr	r0, [pc, #8]	; (407f98 <__sinit+0x50>)
  407f8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407f92:	f000 bb9b 	b.w	4086cc <__retarget_lock_release_recursive>
  407f96:	bf00      	nop
  407f98:	2043fce0 	.word	0x2043fce0
  407f9c:	00407eed 	.word	0x00407eed

00407fa0 <__sfp_lock_acquire>:
  407fa0:	4801      	ldr	r0, [pc, #4]	; (407fa8 <__sfp_lock_acquire+0x8>)
  407fa2:	f000 bb91 	b.w	4086c8 <__retarget_lock_acquire_recursive>
  407fa6:	bf00      	nop
  407fa8:	2043fcf4 	.word	0x2043fcf4

00407fac <__sfp_lock_release>:
  407fac:	4801      	ldr	r0, [pc, #4]	; (407fb4 <__sfp_lock_release+0x8>)
  407fae:	f000 bb8d 	b.w	4086cc <__retarget_lock_release_recursive>
  407fb2:	bf00      	nop
  407fb4:	2043fcf4 	.word	0x2043fcf4

00407fb8 <__libc_fini_array>:
  407fb8:	b538      	push	{r3, r4, r5, lr}
  407fba:	4c0a      	ldr	r4, [pc, #40]	; (407fe4 <__libc_fini_array+0x2c>)
  407fbc:	4d0a      	ldr	r5, [pc, #40]	; (407fe8 <__libc_fini_array+0x30>)
  407fbe:	1b64      	subs	r4, r4, r5
  407fc0:	10a4      	asrs	r4, r4, #2
  407fc2:	d00a      	beq.n	407fda <__libc_fini_array+0x22>
  407fc4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  407fc8:	3b01      	subs	r3, #1
  407fca:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  407fce:	3c01      	subs	r4, #1
  407fd0:	f855 3904 	ldr.w	r3, [r5], #-4
  407fd4:	4798      	blx	r3
  407fd6:	2c00      	cmp	r4, #0
  407fd8:	d1f9      	bne.n	407fce <__libc_fini_array+0x16>
  407fda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  407fde:	f002 b80d 	b.w	409ffc <_fini>
  407fe2:	bf00      	nop
  407fe4:	0040a00c 	.word	0x0040a00c
  407fe8:	0040a008 	.word	0x0040a008

00407fec <__fputwc>:
  407fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407ff0:	b082      	sub	sp, #8
  407ff2:	4680      	mov	r8, r0
  407ff4:	4689      	mov	r9, r1
  407ff6:	4614      	mov	r4, r2
  407ff8:	f000 fb54 	bl	4086a4 <__locale_mb_cur_max>
  407ffc:	2801      	cmp	r0, #1
  407ffe:	d036      	beq.n	40806e <__fputwc+0x82>
  408000:	464a      	mov	r2, r9
  408002:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  408006:	a901      	add	r1, sp, #4
  408008:	4640      	mov	r0, r8
  40800a:	f000 fee7 	bl	408ddc <_wcrtomb_r>
  40800e:	1c42      	adds	r2, r0, #1
  408010:	4606      	mov	r6, r0
  408012:	d025      	beq.n	408060 <__fputwc+0x74>
  408014:	b3a8      	cbz	r0, 408082 <__fputwc+0x96>
  408016:	f89d e004 	ldrb.w	lr, [sp, #4]
  40801a:	2500      	movs	r5, #0
  40801c:	f10d 0a04 	add.w	sl, sp, #4
  408020:	e009      	b.n	408036 <__fputwc+0x4a>
  408022:	6823      	ldr	r3, [r4, #0]
  408024:	1c5a      	adds	r2, r3, #1
  408026:	6022      	str	r2, [r4, #0]
  408028:	f883 e000 	strb.w	lr, [r3]
  40802c:	3501      	adds	r5, #1
  40802e:	42b5      	cmp	r5, r6
  408030:	d227      	bcs.n	408082 <__fputwc+0x96>
  408032:	f815 e00a 	ldrb.w	lr, [r5, sl]
  408036:	68a3      	ldr	r3, [r4, #8]
  408038:	3b01      	subs	r3, #1
  40803a:	2b00      	cmp	r3, #0
  40803c:	60a3      	str	r3, [r4, #8]
  40803e:	daf0      	bge.n	408022 <__fputwc+0x36>
  408040:	69a7      	ldr	r7, [r4, #24]
  408042:	42bb      	cmp	r3, r7
  408044:	4671      	mov	r1, lr
  408046:	4622      	mov	r2, r4
  408048:	4640      	mov	r0, r8
  40804a:	db02      	blt.n	408052 <__fputwc+0x66>
  40804c:	f1be 0f0a 	cmp.w	lr, #10
  408050:	d1e7      	bne.n	408022 <__fputwc+0x36>
  408052:	f000 fe6b 	bl	408d2c <__swbuf_r>
  408056:	1c43      	adds	r3, r0, #1
  408058:	d1e8      	bne.n	40802c <__fputwc+0x40>
  40805a:	b002      	add	sp, #8
  40805c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408060:	89a3      	ldrh	r3, [r4, #12]
  408062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408066:	81a3      	strh	r3, [r4, #12]
  408068:	b002      	add	sp, #8
  40806a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40806e:	f109 33ff 	add.w	r3, r9, #4294967295
  408072:	2bfe      	cmp	r3, #254	; 0xfe
  408074:	d8c4      	bhi.n	408000 <__fputwc+0x14>
  408076:	fa5f fe89 	uxtb.w	lr, r9
  40807a:	4606      	mov	r6, r0
  40807c:	f88d e004 	strb.w	lr, [sp, #4]
  408080:	e7cb      	b.n	40801a <__fputwc+0x2e>
  408082:	4648      	mov	r0, r9
  408084:	b002      	add	sp, #8
  408086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40808a:	bf00      	nop

0040808c <_fputwc_r>:
  40808c:	b530      	push	{r4, r5, lr}
  40808e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  408090:	f013 0f01 	tst.w	r3, #1
  408094:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  408098:	4614      	mov	r4, r2
  40809a:	b083      	sub	sp, #12
  40809c:	4605      	mov	r5, r0
  40809e:	b29a      	uxth	r2, r3
  4080a0:	d101      	bne.n	4080a6 <_fputwc_r+0x1a>
  4080a2:	0590      	lsls	r0, r2, #22
  4080a4:	d51c      	bpl.n	4080e0 <_fputwc_r+0x54>
  4080a6:	0490      	lsls	r0, r2, #18
  4080a8:	d406      	bmi.n	4080b8 <_fputwc_r+0x2c>
  4080aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4080ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4080b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4080b4:	81a3      	strh	r3, [r4, #12]
  4080b6:	6662      	str	r2, [r4, #100]	; 0x64
  4080b8:	4628      	mov	r0, r5
  4080ba:	4622      	mov	r2, r4
  4080bc:	f7ff ff96 	bl	407fec <__fputwc>
  4080c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4080c2:	07da      	lsls	r2, r3, #31
  4080c4:	4605      	mov	r5, r0
  4080c6:	d402      	bmi.n	4080ce <_fputwc_r+0x42>
  4080c8:	89a3      	ldrh	r3, [r4, #12]
  4080ca:	059b      	lsls	r3, r3, #22
  4080cc:	d502      	bpl.n	4080d4 <_fputwc_r+0x48>
  4080ce:	4628      	mov	r0, r5
  4080d0:	b003      	add	sp, #12
  4080d2:	bd30      	pop	{r4, r5, pc}
  4080d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4080d6:	f000 faf9 	bl	4086cc <__retarget_lock_release_recursive>
  4080da:	4628      	mov	r0, r5
  4080dc:	b003      	add	sp, #12
  4080de:	bd30      	pop	{r4, r5, pc}
  4080e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4080e2:	9101      	str	r1, [sp, #4]
  4080e4:	f000 faf0 	bl	4086c8 <__retarget_lock_acquire_recursive>
  4080e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4080ec:	9901      	ldr	r1, [sp, #4]
  4080ee:	b29a      	uxth	r2, r3
  4080f0:	e7d9      	b.n	4080a6 <_fputwc_r+0x1a>
  4080f2:	bf00      	nop

004080f4 <_malloc_trim_r>:
  4080f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4080f6:	4f24      	ldr	r7, [pc, #144]	; (408188 <_malloc_trim_r+0x94>)
  4080f8:	460c      	mov	r4, r1
  4080fa:	4606      	mov	r6, r0
  4080fc:	f7fe fe4c 	bl	406d98 <__malloc_lock>
  408100:	68bb      	ldr	r3, [r7, #8]
  408102:	685d      	ldr	r5, [r3, #4]
  408104:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  408108:	310f      	adds	r1, #15
  40810a:	f025 0503 	bic.w	r5, r5, #3
  40810e:	4429      	add	r1, r5
  408110:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  408114:	f021 010f 	bic.w	r1, r1, #15
  408118:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40811c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  408120:	db07      	blt.n	408132 <_malloc_trim_r+0x3e>
  408122:	2100      	movs	r1, #0
  408124:	4630      	mov	r0, r6
  408126:	f7fe fe43 	bl	406db0 <_sbrk_r>
  40812a:	68bb      	ldr	r3, [r7, #8]
  40812c:	442b      	add	r3, r5
  40812e:	4298      	cmp	r0, r3
  408130:	d004      	beq.n	40813c <_malloc_trim_r+0x48>
  408132:	4630      	mov	r0, r6
  408134:	f7fe fe36 	bl	406da4 <__malloc_unlock>
  408138:	2000      	movs	r0, #0
  40813a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40813c:	4261      	negs	r1, r4
  40813e:	4630      	mov	r0, r6
  408140:	f7fe fe36 	bl	406db0 <_sbrk_r>
  408144:	3001      	adds	r0, #1
  408146:	d00d      	beq.n	408164 <_malloc_trim_r+0x70>
  408148:	4b10      	ldr	r3, [pc, #64]	; (40818c <_malloc_trim_r+0x98>)
  40814a:	68ba      	ldr	r2, [r7, #8]
  40814c:	6819      	ldr	r1, [r3, #0]
  40814e:	1b2d      	subs	r5, r5, r4
  408150:	f045 0501 	orr.w	r5, r5, #1
  408154:	4630      	mov	r0, r6
  408156:	1b09      	subs	r1, r1, r4
  408158:	6055      	str	r5, [r2, #4]
  40815a:	6019      	str	r1, [r3, #0]
  40815c:	f7fe fe22 	bl	406da4 <__malloc_unlock>
  408160:	2001      	movs	r0, #1
  408162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408164:	2100      	movs	r1, #0
  408166:	4630      	mov	r0, r6
  408168:	f7fe fe22 	bl	406db0 <_sbrk_r>
  40816c:	68ba      	ldr	r2, [r7, #8]
  40816e:	1a83      	subs	r3, r0, r2
  408170:	2b0f      	cmp	r3, #15
  408172:	ddde      	ble.n	408132 <_malloc_trim_r+0x3e>
  408174:	4c06      	ldr	r4, [pc, #24]	; (408190 <_malloc_trim_r+0x9c>)
  408176:	4905      	ldr	r1, [pc, #20]	; (40818c <_malloc_trim_r+0x98>)
  408178:	6824      	ldr	r4, [r4, #0]
  40817a:	f043 0301 	orr.w	r3, r3, #1
  40817e:	1b00      	subs	r0, r0, r4
  408180:	6053      	str	r3, [r2, #4]
  408182:	6008      	str	r0, [r1, #0]
  408184:	e7d5      	b.n	408132 <_malloc_trim_r+0x3e>
  408186:	bf00      	nop
  408188:	20400488 	.word	0x20400488
  40818c:	2043c804 	.word	0x2043c804
  408190:	20400890 	.word	0x20400890

00408194 <_free_r>:
  408194:	2900      	cmp	r1, #0
  408196:	d044      	beq.n	408222 <_free_r+0x8e>
  408198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40819c:	460d      	mov	r5, r1
  40819e:	4680      	mov	r8, r0
  4081a0:	f7fe fdfa 	bl	406d98 <__malloc_lock>
  4081a4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4081a8:	4969      	ldr	r1, [pc, #420]	; (408350 <_free_r+0x1bc>)
  4081aa:	f027 0301 	bic.w	r3, r7, #1
  4081ae:	f1a5 0408 	sub.w	r4, r5, #8
  4081b2:	18e2      	adds	r2, r4, r3
  4081b4:	688e      	ldr	r6, [r1, #8]
  4081b6:	6850      	ldr	r0, [r2, #4]
  4081b8:	42b2      	cmp	r2, r6
  4081ba:	f020 0003 	bic.w	r0, r0, #3
  4081be:	d05e      	beq.n	40827e <_free_r+0xea>
  4081c0:	07fe      	lsls	r6, r7, #31
  4081c2:	6050      	str	r0, [r2, #4]
  4081c4:	d40b      	bmi.n	4081de <_free_r+0x4a>
  4081c6:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4081ca:	1be4      	subs	r4, r4, r7
  4081cc:	f101 0e08 	add.w	lr, r1, #8
  4081d0:	68a5      	ldr	r5, [r4, #8]
  4081d2:	4575      	cmp	r5, lr
  4081d4:	443b      	add	r3, r7
  4081d6:	d06d      	beq.n	4082b4 <_free_r+0x120>
  4081d8:	68e7      	ldr	r7, [r4, #12]
  4081da:	60ef      	str	r7, [r5, #12]
  4081dc:	60bd      	str	r5, [r7, #8]
  4081de:	1815      	adds	r5, r2, r0
  4081e0:	686d      	ldr	r5, [r5, #4]
  4081e2:	07ed      	lsls	r5, r5, #31
  4081e4:	d53e      	bpl.n	408264 <_free_r+0xd0>
  4081e6:	f043 0201 	orr.w	r2, r3, #1
  4081ea:	6062      	str	r2, [r4, #4]
  4081ec:	50e3      	str	r3, [r4, r3]
  4081ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4081f2:	d217      	bcs.n	408224 <_free_r+0x90>
  4081f4:	08db      	lsrs	r3, r3, #3
  4081f6:	1c58      	adds	r0, r3, #1
  4081f8:	109a      	asrs	r2, r3, #2
  4081fa:	684d      	ldr	r5, [r1, #4]
  4081fc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  408200:	60a7      	str	r7, [r4, #8]
  408202:	2301      	movs	r3, #1
  408204:	4093      	lsls	r3, r2
  408206:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40820a:	432b      	orrs	r3, r5
  40820c:	3a08      	subs	r2, #8
  40820e:	60e2      	str	r2, [r4, #12]
  408210:	604b      	str	r3, [r1, #4]
  408212:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  408216:	60fc      	str	r4, [r7, #12]
  408218:	4640      	mov	r0, r8
  40821a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40821e:	f7fe bdc1 	b.w	406da4 <__malloc_unlock>
  408222:	4770      	bx	lr
  408224:	0a5a      	lsrs	r2, r3, #9
  408226:	2a04      	cmp	r2, #4
  408228:	d852      	bhi.n	4082d0 <_free_r+0x13c>
  40822a:	099a      	lsrs	r2, r3, #6
  40822c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  408230:	00ff      	lsls	r7, r7, #3
  408232:	f102 0538 	add.w	r5, r2, #56	; 0x38
  408236:	19c8      	adds	r0, r1, r7
  408238:	59ca      	ldr	r2, [r1, r7]
  40823a:	3808      	subs	r0, #8
  40823c:	4290      	cmp	r0, r2
  40823e:	d04f      	beq.n	4082e0 <_free_r+0x14c>
  408240:	6851      	ldr	r1, [r2, #4]
  408242:	f021 0103 	bic.w	r1, r1, #3
  408246:	428b      	cmp	r3, r1
  408248:	d232      	bcs.n	4082b0 <_free_r+0x11c>
  40824a:	6892      	ldr	r2, [r2, #8]
  40824c:	4290      	cmp	r0, r2
  40824e:	d1f7      	bne.n	408240 <_free_r+0xac>
  408250:	68c3      	ldr	r3, [r0, #12]
  408252:	60a0      	str	r0, [r4, #8]
  408254:	60e3      	str	r3, [r4, #12]
  408256:	609c      	str	r4, [r3, #8]
  408258:	60c4      	str	r4, [r0, #12]
  40825a:	4640      	mov	r0, r8
  40825c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408260:	f7fe bda0 	b.w	406da4 <__malloc_unlock>
  408264:	6895      	ldr	r5, [r2, #8]
  408266:	4f3b      	ldr	r7, [pc, #236]	; (408354 <_free_r+0x1c0>)
  408268:	42bd      	cmp	r5, r7
  40826a:	4403      	add	r3, r0
  40826c:	d040      	beq.n	4082f0 <_free_r+0x15c>
  40826e:	68d0      	ldr	r0, [r2, #12]
  408270:	60e8      	str	r0, [r5, #12]
  408272:	f043 0201 	orr.w	r2, r3, #1
  408276:	6085      	str	r5, [r0, #8]
  408278:	6062      	str	r2, [r4, #4]
  40827a:	50e3      	str	r3, [r4, r3]
  40827c:	e7b7      	b.n	4081ee <_free_r+0x5a>
  40827e:	07ff      	lsls	r7, r7, #31
  408280:	4403      	add	r3, r0
  408282:	d407      	bmi.n	408294 <_free_r+0x100>
  408284:	f855 2c08 	ldr.w	r2, [r5, #-8]
  408288:	1aa4      	subs	r4, r4, r2
  40828a:	4413      	add	r3, r2
  40828c:	68a0      	ldr	r0, [r4, #8]
  40828e:	68e2      	ldr	r2, [r4, #12]
  408290:	60c2      	str	r2, [r0, #12]
  408292:	6090      	str	r0, [r2, #8]
  408294:	4a30      	ldr	r2, [pc, #192]	; (408358 <_free_r+0x1c4>)
  408296:	6812      	ldr	r2, [r2, #0]
  408298:	f043 0001 	orr.w	r0, r3, #1
  40829c:	4293      	cmp	r3, r2
  40829e:	6060      	str	r0, [r4, #4]
  4082a0:	608c      	str	r4, [r1, #8]
  4082a2:	d3b9      	bcc.n	408218 <_free_r+0x84>
  4082a4:	4b2d      	ldr	r3, [pc, #180]	; (40835c <_free_r+0x1c8>)
  4082a6:	4640      	mov	r0, r8
  4082a8:	6819      	ldr	r1, [r3, #0]
  4082aa:	f7ff ff23 	bl	4080f4 <_malloc_trim_r>
  4082ae:	e7b3      	b.n	408218 <_free_r+0x84>
  4082b0:	4610      	mov	r0, r2
  4082b2:	e7cd      	b.n	408250 <_free_r+0xbc>
  4082b4:	1811      	adds	r1, r2, r0
  4082b6:	6849      	ldr	r1, [r1, #4]
  4082b8:	07c9      	lsls	r1, r1, #31
  4082ba:	d444      	bmi.n	408346 <_free_r+0x1b2>
  4082bc:	6891      	ldr	r1, [r2, #8]
  4082be:	68d2      	ldr	r2, [r2, #12]
  4082c0:	60ca      	str	r2, [r1, #12]
  4082c2:	4403      	add	r3, r0
  4082c4:	f043 0001 	orr.w	r0, r3, #1
  4082c8:	6091      	str	r1, [r2, #8]
  4082ca:	6060      	str	r0, [r4, #4]
  4082cc:	50e3      	str	r3, [r4, r3]
  4082ce:	e7a3      	b.n	408218 <_free_r+0x84>
  4082d0:	2a14      	cmp	r2, #20
  4082d2:	d816      	bhi.n	408302 <_free_r+0x16e>
  4082d4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4082d8:	00ff      	lsls	r7, r7, #3
  4082da:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4082de:	e7aa      	b.n	408236 <_free_r+0xa2>
  4082e0:	10aa      	asrs	r2, r5, #2
  4082e2:	2301      	movs	r3, #1
  4082e4:	684d      	ldr	r5, [r1, #4]
  4082e6:	4093      	lsls	r3, r2
  4082e8:	432b      	orrs	r3, r5
  4082ea:	604b      	str	r3, [r1, #4]
  4082ec:	4603      	mov	r3, r0
  4082ee:	e7b0      	b.n	408252 <_free_r+0xbe>
  4082f0:	f043 0201 	orr.w	r2, r3, #1
  4082f4:	614c      	str	r4, [r1, #20]
  4082f6:	610c      	str	r4, [r1, #16]
  4082f8:	60e5      	str	r5, [r4, #12]
  4082fa:	60a5      	str	r5, [r4, #8]
  4082fc:	6062      	str	r2, [r4, #4]
  4082fe:	50e3      	str	r3, [r4, r3]
  408300:	e78a      	b.n	408218 <_free_r+0x84>
  408302:	2a54      	cmp	r2, #84	; 0x54
  408304:	d806      	bhi.n	408314 <_free_r+0x180>
  408306:	0b1a      	lsrs	r2, r3, #12
  408308:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40830c:	00ff      	lsls	r7, r7, #3
  40830e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  408312:	e790      	b.n	408236 <_free_r+0xa2>
  408314:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  408318:	d806      	bhi.n	408328 <_free_r+0x194>
  40831a:	0bda      	lsrs	r2, r3, #15
  40831c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  408320:	00ff      	lsls	r7, r7, #3
  408322:	f102 0577 	add.w	r5, r2, #119	; 0x77
  408326:	e786      	b.n	408236 <_free_r+0xa2>
  408328:	f240 5054 	movw	r0, #1364	; 0x554
  40832c:	4282      	cmp	r2, r0
  40832e:	d806      	bhi.n	40833e <_free_r+0x1aa>
  408330:	0c9a      	lsrs	r2, r3, #18
  408332:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  408336:	00ff      	lsls	r7, r7, #3
  408338:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40833c:	e77b      	b.n	408236 <_free_r+0xa2>
  40833e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  408342:	257e      	movs	r5, #126	; 0x7e
  408344:	e777      	b.n	408236 <_free_r+0xa2>
  408346:	f043 0101 	orr.w	r1, r3, #1
  40834a:	6061      	str	r1, [r4, #4]
  40834c:	6013      	str	r3, [r2, #0]
  40834e:	e763      	b.n	408218 <_free_r+0x84>
  408350:	20400488 	.word	0x20400488
  408354:	20400490 	.word	0x20400490
  408358:	20400894 	.word	0x20400894
  40835c:	2043c834 	.word	0x2043c834

00408360 <__sfvwrite_r>:
  408360:	6893      	ldr	r3, [r2, #8]
  408362:	2b00      	cmp	r3, #0
  408364:	d073      	beq.n	40844e <__sfvwrite_r+0xee>
  408366:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40836a:	898b      	ldrh	r3, [r1, #12]
  40836c:	b083      	sub	sp, #12
  40836e:	460c      	mov	r4, r1
  408370:	0719      	lsls	r1, r3, #28
  408372:	9000      	str	r0, [sp, #0]
  408374:	4616      	mov	r6, r2
  408376:	d526      	bpl.n	4083c6 <__sfvwrite_r+0x66>
  408378:	6922      	ldr	r2, [r4, #16]
  40837a:	b322      	cbz	r2, 4083c6 <__sfvwrite_r+0x66>
  40837c:	f013 0002 	ands.w	r0, r3, #2
  408380:	6835      	ldr	r5, [r6, #0]
  408382:	d02c      	beq.n	4083de <__sfvwrite_r+0x7e>
  408384:	f04f 0900 	mov.w	r9, #0
  408388:	4fb0      	ldr	r7, [pc, #704]	; (40864c <__sfvwrite_r+0x2ec>)
  40838a:	46c8      	mov	r8, r9
  40838c:	46b2      	mov	sl, r6
  40838e:	45b8      	cmp	r8, r7
  408390:	4643      	mov	r3, r8
  408392:	464a      	mov	r2, r9
  408394:	bf28      	it	cs
  408396:	463b      	movcs	r3, r7
  408398:	9800      	ldr	r0, [sp, #0]
  40839a:	f1b8 0f00 	cmp.w	r8, #0
  40839e:	d050      	beq.n	408442 <__sfvwrite_r+0xe2>
  4083a0:	69e1      	ldr	r1, [r4, #28]
  4083a2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4083a4:	47b0      	blx	r6
  4083a6:	2800      	cmp	r0, #0
  4083a8:	dd58      	ble.n	40845c <__sfvwrite_r+0xfc>
  4083aa:	f8da 3008 	ldr.w	r3, [sl, #8]
  4083ae:	1a1b      	subs	r3, r3, r0
  4083b0:	4481      	add	r9, r0
  4083b2:	eba8 0800 	sub.w	r8, r8, r0
  4083b6:	f8ca 3008 	str.w	r3, [sl, #8]
  4083ba:	2b00      	cmp	r3, #0
  4083bc:	d1e7      	bne.n	40838e <__sfvwrite_r+0x2e>
  4083be:	2000      	movs	r0, #0
  4083c0:	b003      	add	sp, #12
  4083c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4083c6:	4621      	mov	r1, r4
  4083c8:	9800      	ldr	r0, [sp, #0]
  4083ca:	f7ff fc51 	bl	407c70 <__swsetup_r>
  4083ce:	2800      	cmp	r0, #0
  4083d0:	f040 8133 	bne.w	40863a <__sfvwrite_r+0x2da>
  4083d4:	89a3      	ldrh	r3, [r4, #12]
  4083d6:	6835      	ldr	r5, [r6, #0]
  4083d8:	f013 0002 	ands.w	r0, r3, #2
  4083dc:	d1d2      	bne.n	408384 <__sfvwrite_r+0x24>
  4083de:	f013 0901 	ands.w	r9, r3, #1
  4083e2:	d145      	bne.n	408470 <__sfvwrite_r+0x110>
  4083e4:	464f      	mov	r7, r9
  4083e6:	9601      	str	r6, [sp, #4]
  4083e8:	b337      	cbz	r7, 408438 <__sfvwrite_r+0xd8>
  4083ea:	059a      	lsls	r2, r3, #22
  4083ec:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4083f0:	f140 8083 	bpl.w	4084fa <__sfvwrite_r+0x19a>
  4083f4:	4547      	cmp	r7, r8
  4083f6:	46c3      	mov	fp, r8
  4083f8:	f0c0 80ab 	bcc.w	408552 <__sfvwrite_r+0x1f2>
  4083fc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  408400:	f040 80ac 	bne.w	40855c <__sfvwrite_r+0x1fc>
  408404:	6820      	ldr	r0, [r4, #0]
  408406:	46ba      	mov	sl, r7
  408408:	465a      	mov	r2, fp
  40840a:	4649      	mov	r1, r9
  40840c:	f000 fa40 	bl	408890 <memmove>
  408410:	68a2      	ldr	r2, [r4, #8]
  408412:	6823      	ldr	r3, [r4, #0]
  408414:	eba2 0208 	sub.w	r2, r2, r8
  408418:	445b      	add	r3, fp
  40841a:	60a2      	str	r2, [r4, #8]
  40841c:	6023      	str	r3, [r4, #0]
  40841e:	9a01      	ldr	r2, [sp, #4]
  408420:	6893      	ldr	r3, [r2, #8]
  408422:	eba3 030a 	sub.w	r3, r3, sl
  408426:	44d1      	add	r9, sl
  408428:	eba7 070a 	sub.w	r7, r7, sl
  40842c:	6093      	str	r3, [r2, #8]
  40842e:	2b00      	cmp	r3, #0
  408430:	d0c5      	beq.n	4083be <__sfvwrite_r+0x5e>
  408432:	89a3      	ldrh	r3, [r4, #12]
  408434:	2f00      	cmp	r7, #0
  408436:	d1d8      	bne.n	4083ea <__sfvwrite_r+0x8a>
  408438:	f8d5 9000 	ldr.w	r9, [r5]
  40843c:	686f      	ldr	r7, [r5, #4]
  40843e:	3508      	adds	r5, #8
  408440:	e7d2      	b.n	4083e8 <__sfvwrite_r+0x88>
  408442:	f8d5 9000 	ldr.w	r9, [r5]
  408446:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40844a:	3508      	adds	r5, #8
  40844c:	e79f      	b.n	40838e <__sfvwrite_r+0x2e>
  40844e:	2000      	movs	r0, #0
  408450:	4770      	bx	lr
  408452:	4621      	mov	r1, r4
  408454:	9800      	ldr	r0, [sp, #0]
  408456:	f7ff fd1f 	bl	407e98 <_fflush_r>
  40845a:	b370      	cbz	r0, 4084ba <__sfvwrite_r+0x15a>
  40845c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408464:	f04f 30ff 	mov.w	r0, #4294967295
  408468:	81a3      	strh	r3, [r4, #12]
  40846a:	b003      	add	sp, #12
  40846c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408470:	4681      	mov	r9, r0
  408472:	4633      	mov	r3, r6
  408474:	464e      	mov	r6, r9
  408476:	46a8      	mov	r8, r5
  408478:	469a      	mov	sl, r3
  40847a:	464d      	mov	r5, r9
  40847c:	b34e      	cbz	r6, 4084d2 <__sfvwrite_r+0x172>
  40847e:	b380      	cbz	r0, 4084e2 <__sfvwrite_r+0x182>
  408480:	6820      	ldr	r0, [r4, #0]
  408482:	6923      	ldr	r3, [r4, #16]
  408484:	6962      	ldr	r2, [r4, #20]
  408486:	45b1      	cmp	r9, r6
  408488:	46cb      	mov	fp, r9
  40848a:	bf28      	it	cs
  40848c:	46b3      	movcs	fp, r6
  40848e:	4298      	cmp	r0, r3
  408490:	465f      	mov	r7, fp
  408492:	d904      	bls.n	40849e <__sfvwrite_r+0x13e>
  408494:	68a3      	ldr	r3, [r4, #8]
  408496:	4413      	add	r3, r2
  408498:	459b      	cmp	fp, r3
  40849a:	f300 80a6 	bgt.w	4085ea <__sfvwrite_r+0x28a>
  40849e:	4593      	cmp	fp, r2
  4084a0:	db4b      	blt.n	40853a <__sfvwrite_r+0x1da>
  4084a2:	4613      	mov	r3, r2
  4084a4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4084a6:	69e1      	ldr	r1, [r4, #28]
  4084a8:	9800      	ldr	r0, [sp, #0]
  4084aa:	462a      	mov	r2, r5
  4084ac:	47b8      	blx	r7
  4084ae:	1e07      	subs	r7, r0, #0
  4084b0:	ddd4      	ble.n	40845c <__sfvwrite_r+0xfc>
  4084b2:	ebb9 0907 	subs.w	r9, r9, r7
  4084b6:	d0cc      	beq.n	408452 <__sfvwrite_r+0xf2>
  4084b8:	2001      	movs	r0, #1
  4084ba:	f8da 3008 	ldr.w	r3, [sl, #8]
  4084be:	1bdb      	subs	r3, r3, r7
  4084c0:	443d      	add	r5, r7
  4084c2:	1bf6      	subs	r6, r6, r7
  4084c4:	f8ca 3008 	str.w	r3, [sl, #8]
  4084c8:	2b00      	cmp	r3, #0
  4084ca:	f43f af78 	beq.w	4083be <__sfvwrite_r+0x5e>
  4084ce:	2e00      	cmp	r6, #0
  4084d0:	d1d5      	bne.n	40847e <__sfvwrite_r+0x11e>
  4084d2:	f108 0308 	add.w	r3, r8, #8
  4084d6:	e913 0060 	ldmdb	r3, {r5, r6}
  4084da:	4698      	mov	r8, r3
  4084dc:	3308      	adds	r3, #8
  4084de:	2e00      	cmp	r6, #0
  4084e0:	d0f9      	beq.n	4084d6 <__sfvwrite_r+0x176>
  4084e2:	4632      	mov	r2, r6
  4084e4:	210a      	movs	r1, #10
  4084e6:	4628      	mov	r0, r5
  4084e8:	f000 f982 	bl	4087f0 <memchr>
  4084ec:	2800      	cmp	r0, #0
  4084ee:	f000 80a1 	beq.w	408634 <__sfvwrite_r+0x2d4>
  4084f2:	3001      	adds	r0, #1
  4084f4:	eba0 0905 	sub.w	r9, r0, r5
  4084f8:	e7c2      	b.n	408480 <__sfvwrite_r+0x120>
  4084fa:	6820      	ldr	r0, [r4, #0]
  4084fc:	6923      	ldr	r3, [r4, #16]
  4084fe:	4298      	cmp	r0, r3
  408500:	d802      	bhi.n	408508 <__sfvwrite_r+0x1a8>
  408502:	6963      	ldr	r3, [r4, #20]
  408504:	429f      	cmp	r7, r3
  408506:	d25d      	bcs.n	4085c4 <__sfvwrite_r+0x264>
  408508:	45b8      	cmp	r8, r7
  40850a:	bf28      	it	cs
  40850c:	46b8      	movcs	r8, r7
  40850e:	4642      	mov	r2, r8
  408510:	4649      	mov	r1, r9
  408512:	f000 f9bd 	bl	408890 <memmove>
  408516:	68a3      	ldr	r3, [r4, #8]
  408518:	6822      	ldr	r2, [r4, #0]
  40851a:	eba3 0308 	sub.w	r3, r3, r8
  40851e:	4442      	add	r2, r8
  408520:	60a3      	str	r3, [r4, #8]
  408522:	6022      	str	r2, [r4, #0]
  408524:	b10b      	cbz	r3, 40852a <__sfvwrite_r+0x1ca>
  408526:	46c2      	mov	sl, r8
  408528:	e779      	b.n	40841e <__sfvwrite_r+0xbe>
  40852a:	4621      	mov	r1, r4
  40852c:	9800      	ldr	r0, [sp, #0]
  40852e:	f7ff fcb3 	bl	407e98 <_fflush_r>
  408532:	2800      	cmp	r0, #0
  408534:	d192      	bne.n	40845c <__sfvwrite_r+0xfc>
  408536:	46c2      	mov	sl, r8
  408538:	e771      	b.n	40841e <__sfvwrite_r+0xbe>
  40853a:	465a      	mov	r2, fp
  40853c:	4629      	mov	r1, r5
  40853e:	f000 f9a7 	bl	408890 <memmove>
  408542:	68a2      	ldr	r2, [r4, #8]
  408544:	6823      	ldr	r3, [r4, #0]
  408546:	eba2 020b 	sub.w	r2, r2, fp
  40854a:	445b      	add	r3, fp
  40854c:	60a2      	str	r2, [r4, #8]
  40854e:	6023      	str	r3, [r4, #0]
  408550:	e7af      	b.n	4084b2 <__sfvwrite_r+0x152>
  408552:	6820      	ldr	r0, [r4, #0]
  408554:	46b8      	mov	r8, r7
  408556:	46ba      	mov	sl, r7
  408558:	46bb      	mov	fp, r7
  40855a:	e755      	b.n	408408 <__sfvwrite_r+0xa8>
  40855c:	6962      	ldr	r2, [r4, #20]
  40855e:	6820      	ldr	r0, [r4, #0]
  408560:	6921      	ldr	r1, [r4, #16]
  408562:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  408566:	eba0 0a01 	sub.w	sl, r0, r1
  40856a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40856e:	f10a 0001 	add.w	r0, sl, #1
  408572:	ea4f 0868 	mov.w	r8, r8, asr #1
  408576:	4438      	add	r0, r7
  408578:	4540      	cmp	r0, r8
  40857a:	4642      	mov	r2, r8
  40857c:	bf84      	itt	hi
  40857e:	4680      	movhi	r8, r0
  408580:	4642      	movhi	r2, r8
  408582:	055b      	lsls	r3, r3, #21
  408584:	d544      	bpl.n	408610 <__sfvwrite_r+0x2b0>
  408586:	4611      	mov	r1, r2
  408588:	9800      	ldr	r0, [sp, #0]
  40858a:	f7fe f86d 	bl	406668 <_malloc_r>
  40858e:	4683      	mov	fp, r0
  408590:	2800      	cmp	r0, #0
  408592:	d055      	beq.n	408640 <__sfvwrite_r+0x2e0>
  408594:	4652      	mov	r2, sl
  408596:	6921      	ldr	r1, [r4, #16]
  408598:	f7fe fb16 	bl	406bc8 <memcpy>
  40859c:	89a3      	ldrh	r3, [r4, #12]
  40859e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4085a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4085a6:	81a3      	strh	r3, [r4, #12]
  4085a8:	eb0b 000a 	add.w	r0, fp, sl
  4085ac:	eba8 030a 	sub.w	r3, r8, sl
  4085b0:	f8c4 b010 	str.w	fp, [r4, #16]
  4085b4:	f8c4 8014 	str.w	r8, [r4, #20]
  4085b8:	6020      	str	r0, [r4, #0]
  4085ba:	60a3      	str	r3, [r4, #8]
  4085bc:	46b8      	mov	r8, r7
  4085be:	46ba      	mov	sl, r7
  4085c0:	46bb      	mov	fp, r7
  4085c2:	e721      	b.n	408408 <__sfvwrite_r+0xa8>
  4085c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  4085c8:	42b9      	cmp	r1, r7
  4085ca:	bf28      	it	cs
  4085cc:	4639      	movcs	r1, r7
  4085ce:	464a      	mov	r2, r9
  4085d0:	fb91 f1f3 	sdiv	r1, r1, r3
  4085d4:	9800      	ldr	r0, [sp, #0]
  4085d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4085d8:	fb03 f301 	mul.w	r3, r3, r1
  4085dc:	69e1      	ldr	r1, [r4, #28]
  4085de:	47b0      	blx	r6
  4085e0:	f1b0 0a00 	subs.w	sl, r0, #0
  4085e4:	f73f af1b 	bgt.w	40841e <__sfvwrite_r+0xbe>
  4085e8:	e738      	b.n	40845c <__sfvwrite_r+0xfc>
  4085ea:	461a      	mov	r2, r3
  4085ec:	4629      	mov	r1, r5
  4085ee:	9301      	str	r3, [sp, #4]
  4085f0:	f000 f94e 	bl	408890 <memmove>
  4085f4:	6822      	ldr	r2, [r4, #0]
  4085f6:	9b01      	ldr	r3, [sp, #4]
  4085f8:	9800      	ldr	r0, [sp, #0]
  4085fa:	441a      	add	r2, r3
  4085fc:	6022      	str	r2, [r4, #0]
  4085fe:	4621      	mov	r1, r4
  408600:	f7ff fc4a 	bl	407e98 <_fflush_r>
  408604:	9b01      	ldr	r3, [sp, #4]
  408606:	2800      	cmp	r0, #0
  408608:	f47f af28 	bne.w	40845c <__sfvwrite_r+0xfc>
  40860c:	461f      	mov	r7, r3
  40860e:	e750      	b.n	4084b2 <__sfvwrite_r+0x152>
  408610:	9800      	ldr	r0, [sp, #0]
  408612:	f000 f9a1 	bl	408958 <_realloc_r>
  408616:	4683      	mov	fp, r0
  408618:	2800      	cmp	r0, #0
  40861a:	d1c5      	bne.n	4085a8 <__sfvwrite_r+0x248>
  40861c:	9d00      	ldr	r5, [sp, #0]
  40861e:	6921      	ldr	r1, [r4, #16]
  408620:	4628      	mov	r0, r5
  408622:	f7ff fdb7 	bl	408194 <_free_r>
  408626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40862a:	220c      	movs	r2, #12
  40862c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  408630:	602a      	str	r2, [r5, #0]
  408632:	e715      	b.n	408460 <__sfvwrite_r+0x100>
  408634:	f106 0901 	add.w	r9, r6, #1
  408638:	e722      	b.n	408480 <__sfvwrite_r+0x120>
  40863a:	f04f 30ff 	mov.w	r0, #4294967295
  40863e:	e6bf      	b.n	4083c0 <__sfvwrite_r+0x60>
  408640:	9a00      	ldr	r2, [sp, #0]
  408642:	230c      	movs	r3, #12
  408644:	6013      	str	r3, [r2, #0]
  408646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40864a:	e709      	b.n	408460 <__sfvwrite_r+0x100>
  40864c:	7ffffc00 	.word	0x7ffffc00

00408650 <_fwalk_reent>:
  408650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408654:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  408658:	d01f      	beq.n	40869a <_fwalk_reent+0x4a>
  40865a:	4688      	mov	r8, r1
  40865c:	4606      	mov	r6, r0
  40865e:	f04f 0900 	mov.w	r9, #0
  408662:	687d      	ldr	r5, [r7, #4]
  408664:	68bc      	ldr	r4, [r7, #8]
  408666:	3d01      	subs	r5, #1
  408668:	d411      	bmi.n	40868e <_fwalk_reent+0x3e>
  40866a:	89a3      	ldrh	r3, [r4, #12]
  40866c:	2b01      	cmp	r3, #1
  40866e:	f105 35ff 	add.w	r5, r5, #4294967295
  408672:	d908      	bls.n	408686 <_fwalk_reent+0x36>
  408674:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  408678:	3301      	adds	r3, #1
  40867a:	4621      	mov	r1, r4
  40867c:	4630      	mov	r0, r6
  40867e:	d002      	beq.n	408686 <_fwalk_reent+0x36>
  408680:	47c0      	blx	r8
  408682:	ea49 0900 	orr.w	r9, r9, r0
  408686:	1c6b      	adds	r3, r5, #1
  408688:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40868c:	d1ed      	bne.n	40866a <_fwalk_reent+0x1a>
  40868e:	683f      	ldr	r7, [r7, #0]
  408690:	2f00      	cmp	r7, #0
  408692:	d1e6      	bne.n	408662 <_fwalk_reent+0x12>
  408694:	4648      	mov	r0, r9
  408696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40869a:	46b9      	mov	r9, r7
  40869c:	4648      	mov	r0, r9
  40869e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4086a2:	bf00      	nop

004086a4 <__locale_mb_cur_max>:
  4086a4:	4b04      	ldr	r3, [pc, #16]	; (4086b8 <__locale_mb_cur_max+0x14>)
  4086a6:	4a05      	ldr	r2, [pc, #20]	; (4086bc <__locale_mb_cur_max+0x18>)
  4086a8:	681b      	ldr	r3, [r3, #0]
  4086aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4086ac:	2b00      	cmp	r3, #0
  4086ae:	bf08      	it	eq
  4086b0:	4613      	moveq	r3, r2
  4086b2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4086b6:	4770      	bx	lr
  4086b8:	20400058 	.word	0x20400058
  4086bc:	2040089c 	.word	0x2040089c

004086c0 <__retarget_lock_init_recursive>:
  4086c0:	4770      	bx	lr
  4086c2:	bf00      	nop

004086c4 <__retarget_lock_close_recursive>:
  4086c4:	4770      	bx	lr
  4086c6:	bf00      	nop

004086c8 <__retarget_lock_acquire_recursive>:
  4086c8:	4770      	bx	lr
  4086ca:	bf00      	nop

004086cc <__retarget_lock_release_recursive>:
  4086cc:	4770      	bx	lr
  4086ce:	bf00      	nop

004086d0 <__swhatbuf_r>:
  4086d0:	b570      	push	{r4, r5, r6, lr}
  4086d2:	460c      	mov	r4, r1
  4086d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4086d8:	2900      	cmp	r1, #0
  4086da:	b090      	sub	sp, #64	; 0x40
  4086dc:	4615      	mov	r5, r2
  4086de:	461e      	mov	r6, r3
  4086e0:	db14      	blt.n	40870c <__swhatbuf_r+0x3c>
  4086e2:	aa01      	add	r2, sp, #4
  4086e4:	f000 fc9e 	bl	409024 <_fstat_r>
  4086e8:	2800      	cmp	r0, #0
  4086ea:	db0f      	blt.n	40870c <__swhatbuf_r+0x3c>
  4086ec:	9a02      	ldr	r2, [sp, #8]
  4086ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4086f2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4086f6:	fab2 f282 	clz	r2, r2
  4086fa:	0952      	lsrs	r2, r2, #5
  4086fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  408700:	f44f 6000 	mov.w	r0, #2048	; 0x800
  408704:	6032      	str	r2, [r6, #0]
  408706:	602b      	str	r3, [r5, #0]
  408708:	b010      	add	sp, #64	; 0x40
  40870a:	bd70      	pop	{r4, r5, r6, pc}
  40870c:	89a2      	ldrh	r2, [r4, #12]
  40870e:	2300      	movs	r3, #0
  408710:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  408714:	6033      	str	r3, [r6, #0]
  408716:	d004      	beq.n	408722 <__swhatbuf_r+0x52>
  408718:	2240      	movs	r2, #64	; 0x40
  40871a:	4618      	mov	r0, r3
  40871c:	602a      	str	r2, [r5, #0]
  40871e:	b010      	add	sp, #64	; 0x40
  408720:	bd70      	pop	{r4, r5, r6, pc}
  408722:	f44f 6380 	mov.w	r3, #1024	; 0x400
  408726:	602b      	str	r3, [r5, #0]
  408728:	b010      	add	sp, #64	; 0x40
  40872a:	bd70      	pop	{r4, r5, r6, pc}

0040872c <__smakebuf_r>:
  40872c:	898a      	ldrh	r2, [r1, #12]
  40872e:	0792      	lsls	r2, r2, #30
  408730:	460b      	mov	r3, r1
  408732:	d506      	bpl.n	408742 <__smakebuf_r+0x16>
  408734:	f101 0243 	add.w	r2, r1, #67	; 0x43
  408738:	2101      	movs	r1, #1
  40873a:	601a      	str	r2, [r3, #0]
  40873c:	611a      	str	r2, [r3, #16]
  40873e:	6159      	str	r1, [r3, #20]
  408740:	4770      	bx	lr
  408742:	b5f0      	push	{r4, r5, r6, r7, lr}
  408744:	b083      	sub	sp, #12
  408746:	ab01      	add	r3, sp, #4
  408748:	466a      	mov	r2, sp
  40874a:	460c      	mov	r4, r1
  40874c:	4606      	mov	r6, r0
  40874e:	f7ff ffbf 	bl	4086d0 <__swhatbuf_r>
  408752:	9900      	ldr	r1, [sp, #0]
  408754:	4605      	mov	r5, r0
  408756:	4630      	mov	r0, r6
  408758:	f7fd ff86 	bl	406668 <_malloc_r>
  40875c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408760:	b1d8      	cbz	r0, 40879a <__smakebuf_r+0x6e>
  408762:	9a01      	ldr	r2, [sp, #4]
  408764:	4f15      	ldr	r7, [pc, #84]	; (4087bc <__smakebuf_r+0x90>)
  408766:	9900      	ldr	r1, [sp, #0]
  408768:	63f7      	str	r7, [r6, #60]	; 0x3c
  40876a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40876e:	81a3      	strh	r3, [r4, #12]
  408770:	6020      	str	r0, [r4, #0]
  408772:	6120      	str	r0, [r4, #16]
  408774:	6161      	str	r1, [r4, #20]
  408776:	b91a      	cbnz	r2, 408780 <__smakebuf_r+0x54>
  408778:	432b      	orrs	r3, r5
  40877a:	81a3      	strh	r3, [r4, #12]
  40877c:	b003      	add	sp, #12
  40877e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408780:	4630      	mov	r0, r6
  408782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  408786:	f000 fc61 	bl	40904c <_isatty_r>
  40878a:	b1a0      	cbz	r0, 4087b6 <__smakebuf_r+0x8a>
  40878c:	89a3      	ldrh	r3, [r4, #12]
  40878e:	f023 0303 	bic.w	r3, r3, #3
  408792:	f043 0301 	orr.w	r3, r3, #1
  408796:	b21b      	sxth	r3, r3
  408798:	e7ee      	b.n	408778 <__smakebuf_r+0x4c>
  40879a:	059a      	lsls	r2, r3, #22
  40879c:	d4ee      	bmi.n	40877c <__smakebuf_r+0x50>
  40879e:	f023 0303 	bic.w	r3, r3, #3
  4087a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4087a6:	f043 0302 	orr.w	r3, r3, #2
  4087aa:	2101      	movs	r1, #1
  4087ac:	81a3      	strh	r3, [r4, #12]
  4087ae:	6022      	str	r2, [r4, #0]
  4087b0:	6122      	str	r2, [r4, #16]
  4087b2:	6161      	str	r1, [r4, #20]
  4087b4:	e7e2      	b.n	40877c <__smakebuf_r+0x50>
  4087b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4087ba:	e7dd      	b.n	408778 <__smakebuf_r+0x4c>
  4087bc:	00407eed 	.word	0x00407eed

004087c0 <__ascii_mbtowc>:
  4087c0:	b082      	sub	sp, #8
  4087c2:	b149      	cbz	r1, 4087d8 <__ascii_mbtowc+0x18>
  4087c4:	b15a      	cbz	r2, 4087de <__ascii_mbtowc+0x1e>
  4087c6:	b16b      	cbz	r3, 4087e4 <__ascii_mbtowc+0x24>
  4087c8:	7813      	ldrb	r3, [r2, #0]
  4087ca:	600b      	str	r3, [r1, #0]
  4087cc:	7812      	ldrb	r2, [r2, #0]
  4087ce:	1c10      	adds	r0, r2, #0
  4087d0:	bf18      	it	ne
  4087d2:	2001      	movne	r0, #1
  4087d4:	b002      	add	sp, #8
  4087d6:	4770      	bx	lr
  4087d8:	a901      	add	r1, sp, #4
  4087da:	2a00      	cmp	r2, #0
  4087dc:	d1f3      	bne.n	4087c6 <__ascii_mbtowc+0x6>
  4087de:	4610      	mov	r0, r2
  4087e0:	b002      	add	sp, #8
  4087e2:	4770      	bx	lr
  4087e4:	f06f 0001 	mvn.w	r0, #1
  4087e8:	e7f4      	b.n	4087d4 <__ascii_mbtowc+0x14>
  4087ea:	bf00      	nop
  4087ec:	0000      	movs	r0, r0
	...

004087f0 <memchr>:
  4087f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4087f4:	2a10      	cmp	r2, #16
  4087f6:	db2b      	blt.n	408850 <memchr+0x60>
  4087f8:	f010 0f07 	tst.w	r0, #7
  4087fc:	d008      	beq.n	408810 <memchr+0x20>
  4087fe:	f810 3b01 	ldrb.w	r3, [r0], #1
  408802:	3a01      	subs	r2, #1
  408804:	428b      	cmp	r3, r1
  408806:	d02d      	beq.n	408864 <memchr+0x74>
  408808:	f010 0f07 	tst.w	r0, #7
  40880c:	b342      	cbz	r2, 408860 <memchr+0x70>
  40880e:	d1f6      	bne.n	4087fe <memchr+0xe>
  408810:	b4f0      	push	{r4, r5, r6, r7}
  408812:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  408816:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40881a:	f022 0407 	bic.w	r4, r2, #7
  40881e:	f07f 0700 	mvns.w	r7, #0
  408822:	2300      	movs	r3, #0
  408824:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  408828:	3c08      	subs	r4, #8
  40882a:	ea85 0501 	eor.w	r5, r5, r1
  40882e:	ea86 0601 	eor.w	r6, r6, r1
  408832:	fa85 f547 	uadd8	r5, r5, r7
  408836:	faa3 f587 	sel	r5, r3, r7
  40883a:	fa86 f647 	uadd8	r6, r6, r7
  40883e:	faa5 f687 	sel	r6, r5, r7
  408842:	b98e      	cbnz	r6, 408868 <memchr+0x78>
  408844:	d1ee      	bne.n	408824 <memchr+0x34>
  408846:	bcf0      	pop	{r4, r5, r6, r7}
  408848:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40884c:	f002 0207 	and.w	r2, r2, #7
  408850:	b132      	cbz	r2, 408860 <memchr+0x70>
  408852:	f810 3b01 	ldrb.w	r3, [r0], #1
  408856:	3a01      	subs	r2, #1
  408858:	ea83 0301 	eor.w	r3, r3, r1
  40885c:	b113      	cbz	r3, 408864 <memchr+0x74>
  40885e:	d1f8      	bne.n	408852 <memchr+0x62>
  408860:	2000      	movs	r0, #0
  408862:	4770      	bx	lr
  408864:	3801      	subs	r0, #1
  408866:	4770      	bx	lr
  408868:	2d00      	cmp	r5, #0
  40886a:	bf06      	itte	eq
  40886c:	4635      	moveq	r5, r6
  40886e:	3803      	subeq	r0, #3
  408870:	3807      	subne	r0, #7
  408872:	f015 0f01 	tst.w	r5, #1
  408876:	d107      	bne.n	408888 <memchr+0x98>
  408878:	3001      	adds	r0, #1
  40887a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40887e:	bf02      	ittt	eq
  408880:	3001      	addeq	r0, #1
  408882:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  408886:	3001      	addeq	r0, #1
  408888:	bcf0      	pop	{r4, r5, r6, r7}
  40888a:	3801      	subs	r0, #1
  40888c:	4770      	bx	lr
  40888e:	bf00      	nop

00408890 <memmove>:
  408890:	4288      	cmp	r0, r1
  408892:	b5f0      	push	{r4, r5, r6, r7, lr}
  408894:	d90d      	bls.n	4088b2 <memmove+0x22>
  408896:	188b      	adds	r3, r1, r2
  408898:	4298      	cmp	r0, r3
  40889a:	d20a      	bcs.n	4088b2 <memmove+0x22>
  40889c:	1884      	adds	r4, r0, r2
  40889e:	2a00      	cmp	r2, #0
  4088a0:	d051      	beq.n	408946 <memmove+0xb6>
  4088a2:	4622      	mov	r2, r4
  4088a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4088a8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4088ac:	4299      	cmp	r1, r3
  4088ae:	d1f9      	bne.n	4088a4 <memmove+0x14>
  4088b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4088b2:	2a0f      	cmp	r2, #15
  4088b4:	d948      	bls.n	408948 <memmove+0xb8>
  4088b6:	ea41 0300 	orr.w	r3, r1, r0
  4088ba:	079b      	lsls	r3, r3, #30
  4088bc:	d146      	bne.n	40894c <memmove+0xbc>
  4088be:	f100 0410 	add.w	r4, r0, #16
  4088c2:	f101 0310 	add.w	r3, r1, #16
  4088c6:	4615      	mov	r5, r2
  4088c8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4088cc:	f844 6c10 	str.w	r6, [r4, #-16]
  4088d0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4088d4:	f844 6c0c 	str.w	r6, [r4, #-12]
  4088d8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4088dc:	f844 6c08 	str.w	r6, [r4, #-8]
  4088e0:	3d10      	subs	r5, #16
  4088e2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4088e6:	f844 6c04 	str.w	r6, [r4, #-4]
  4088ea:	2d0f      	cmp	r5, #15
  4088ec:	f103 0310 	add.w	r3, r3, #16
  4088f0:	f104 0410 	add.w	r4, r4, #16
  4088f4:	d8e8      	bhi.n	4088c8 <memmove+0x38>
  4088f6:	f1a2 0310 	sub.w	r3, r2, #16
  4088fa:	f023 030f 	bic.w	r3, r3, #15
  4088fe:	f002 0e0f 	and.w	lr, r2, #15
  408902:	3310      	adds	r3, #16
  408904:	f1be 0f03 	cmp.w	lr, #3
  408908:	4419      	add	r1, r3
  40890a:	4403      	add	r3, r0
  40890c:	d921      	bls.n	408952 <memmove+0xc2>
  40890e:	1f1e      	subs	r6, r3, #4
  408910:	460d      	mov	r5, r1
  408912:	4674      	mov	r4, lr
  408914:	3c04      	subs	r4, #4
  408916:	f855 7b04 	ldr.w	r7, [r5], #4
  40891a:	f846 7f04 	str.w	r7, [r6, #4]!
  40891e:	2c03      	cmp	r4, #3
  408920:	d8f8      	bhi.n	408914 <memmove+0x84>
  408922:	f1ae 0404 	sub.w	r4, lr, #4
  408926:	f024 0403 	bic.w	r4, r4, #3
  40892a:	3404      	adds	r4, #4
  40892c:	4421      	add	r1, r4
  40892e:	4423      	add	r3, r4
  408930:	f002 0203 	and.w	r2, r2, #3
  408934:	b162      	cbz	r2, 408950 <memmove+0xc0>
  408936:	3b01      	subs	r3, #1
  408938:	440a      	add	r2, r1
  40893a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40893e:	f803 4f01 	strb.w	r4, [r3, #1]!
  408942:	428a      	cmp	r2, r1
  408944:	d1f9      	bne.n	40893a <memmove+0xaa>
  408946:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408948:	4603      	mov	r3, r0
  40894a:	e7f3      	b.n	408934 <memmove+0xa4>
  40894c:	4603      	mov	r3, r0
  40894e:	e7f2      	b.n	408936 <memmove+0xa6>
  408950:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408952:	4672      	mov	r2, lr
  408954:	e7ee      	b.n	408934 <memmove+0xa4>
  408956:	bf00      	nop

00408958 <_realloc_r>:
  408958:	2900      	cmp	r1, #0
  40895a:	f000 8095 	beq.w	408a88 <_realloc_r+0x130>
  40895e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408962:	460d      	mov	r5, r1
  408964:	4616      	mov	r6, r2
  408966:	b083      	sub	sp, #12
  408968:	4680      	mov	r8, r0
  40896a:	f106 070b 	add.w	r7, r6, #11
  40896e:	f7fe fa13 	bl	406d98 <__malloc_lock>
  408972:	f855 ec04 	ldr.w	lr, [r5, #-4]
  408976:	2f16      	cmp	r7, #22
  408978:	f02e 0403 	bic.w	r4, lr, #3
  40897c:	f1a5 0908 	sub.w	r9, r5, #8
  408980:	d83c      	bhi.n	4089fc <_realloc_r+0xa4>
  408982:	2210      	movs	r2, #16
  408984:	4617      	mov	r7, r2
  408986:	42be      	cmp	r6, r7
  408988:	d83d      	bhi.n	408a06 <_realloc_r+0xae>
  40898a:	4294      	cmp	r4, r2
  40898c:	da43      	bge.n	408a16 <_realloc_r+0xbe>
  40898e:	4bc4      	ldr	r3, [pc, #784]	; (408ca0 <_realloc_r+0x348>)
  408990:	6899      	ldr	r1, [r3, #8]
  408992:	eb09 0004 	add.w	r0, r9, r4
  408996:	4288      	cmp	r0, r1
  408998:	f000 80b4 	beq.w	408b04 <_realloc_r+0x1ac>
  40899c:	6843      	ldr	r3, [r0, #4]
  40899e:	f023 0101 	bic.w	r1, r3, #1
  4089a2:	4401      	add	r1, r0
  4089a4:	6849      	ldr	r1, [r1, #4]
  4089a6:	07c9      	lsls	r1, r1, #31
  4089a8:	d54c      	bpl.n	408a44 <_realloc_r+0xec>
  4089aa:	f01e 0f01 	tst.w	lr, #1
  4089ae:	f000 809b 	beq.w	408ae8 <_realloc_r+0x190>
  4089b2:	4631      	mov	r1, r6
  4089b4:	4640      	mov	r0, r8
  4089b6:	f7fd fe57 	bl	406668 <_malloc_r>
  4089ba:	4606      	mov	r6, r0
  4089bc:	2800      	cmp	r0, #0
  4089be:	d03a      	beq.n	408a36 <_realloc_r+0xde>
  4089c0:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4089c4:	f023 0301 	bic.w	r3, r3, #1
  4089c8:	444b      	add	r3, r9
  4089ca:	f1a0 0208 	sub.w	r2, r0, #8
  4089ce:	429a      	cmp	r2, r3
  4089d0:	f000 8121 	beq.w	408c16 <_realloc_r+0x2be>
  4089d4:	1f22      	subs	r2, r4, #4
  4089d6:	2a24      	cmp	r2, #36	; 0x24
  4089d8:	f200 8107 	bhi.w	408bea <_realloc_r+0x292>
  4089dc:	2a13      	cmp	r2, #19
  4089de:	f200 80db 	bhi.w	408b98 <_realloc_r+0x240>
  4089e2:	4603      	mov	r3, r0
  4089e4:	462a      	mov	r2, r5
  4089e6:	6811      	ldr	r1, [r2, #0]
  4089e8:	6019      	str	r1, [r3, #0]
  4089ea:	6851      	ldr	r1, [r2, #4]
  4089ec:	6059      	str	r1, [r3, #4]
  4089ee:	6892      	ldr	r2, [r2, #8]
  4089f0:	609a      	str	r2, [r3, #8]
  4089f2:	4629      	mov	r1, r5
  4089f4:	4640      	mov	r0, r8
  4089f6:	f7ff fbcd 	bl	408194 <_free_r>
  4089fa:	e01c      	b.n	408a36 <_realloc_r+0xde>
  4089fc:	f027 0707 	bic.w	r7, r7, #7
  408a00:	2f00      	cmp	r7, #0
  408a02:	463a      	mov	r2, r7
  408a04:	dabf      	bge.n	408986 <_realloc_r+0x2e>
  408a06:	2600      	movs	r6, #0
  408a08:	230c      	movs	r3, #12
  408a0a:	4630      	mov	r0, r6
  408a0c:	f8c8 3000 	str.w	r3, [r8]
  408a10:	b003      	add	sp, #12
  408a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408a16:	462e      	mov	r6, r5
  408a18:	1be3      	subs	r3, r4, r7
  408a1a:	2b0f      	cmp	r3, #15
  408a1c:	d81e      	bhi.n	408a5c <_realloc_r+0x104>
  408a1e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  408a22:	f003 0301 	and.w	r3, r3, #1
  408a26:	4323      	orrs	r3, r4
  408a28:	444c      	add	r4, r9
  408a2a:	f8c9 3004 	str.w	r3, [r9, #4]
  408a2e:	6863      	ldr	r3, [r4, #4]
  408a30:	f043 0301 	orr.w	r3, r3, #1
  408a34:	6063      	str	r3, [r4, #4]
  408a36:	4640      	mov	r0, r8
  408a38:	f7fe f9b4 	bl	406da4 <__malloc_unlock>
  408a3c:	4630      	mov	r0, r6
  408a3e:	b003      	add	sp, #12
  408a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408a44:	f023 0303 	bic.w	r3, r3, #3
  408a48:	18e1      	adds	r1, r4, r3
  408a4a:	4291      	cmp	r1, r2
  408a4c:	db1f      	blt.n	408a8e <_realloc_r+0x136>
  408a4e:	68c3      	ldr	r3, [r0, #12]
  408a50:	6882      	ldr	r2, [r0, #8]
  408a52:	462e      	mov	r6, r5
  408a54:	60d3      	str	r3, [r2, #12]
  408a56:	460c      	mov	r4, r1
  408a58:	609a      	str	r2, [r3, #8]
  408a5a:	e7dd      	b.n	408a18 <_realloc_r+0xc0>
  408a5c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  408a60:	eb09 0107 	add.w	r1, r9, r7
  408a64:	f002 0201 	and.w	r2, r2, #1
  408a68:	444c      	add	r4, r9
  408a6a:	f043 0301 	orr.w	r3, r3, #1
  408a6e:	4317      	orrs	r7, r2
  408a70:	f8c9 7004 	str.w	r7, [r9, #4]
  408a74:	604b      	str	r3, [r1, #4]
  408a76:	6863      	ldr	r3, [r4, #4]
  408a78:	f043 0301 	orr.w	r3, r3, #1
  408a7c:	3108      	adds	r1, #8
  408a7e:	6063      	str	r3, [r4, #4]
  408a80:	4640      	mov	r0, r8
  408a82:	f7ff fb87 	bl	408194 <_free_r>
  408a86:	e7d6      	b.n	408a36 <_realloc_r+0xde>
  408a88:	4611      	mov	r1, r2
  408a8a:	f7fd bded 	b.w	406668 <_malloc_r>
  408a8e:	f01e 0f01 	tst.w	lr, #1
  408a92:	d18e      	bne.n	4089b2 <_realloc_r+0x5a>
  408a94:	f855 1c08 	ldr.w	r1, [r5, #-8]
  408a98:	eba9 0a01 	sub.w	sl, r9, r1
  408a9c:	f8da 1004 	ldr.w	r1, [sl, #4]
  408aa0:	f021 0103 	bic.w	r1, r1, #3
  408aa4:	440b      	add	r3, r1
  408aa6:	4423      	add	r3, r4
  408aa8:	4293      	cmp	r3, r2
  408aaa:	db25      	blt.n	408af8 <_realloc_r+0x1a0>
  408aac:	68c2      	ldr	r2, [r0, #12]
  408aae:	6881      	ldr	r1, [r0, #8]
  408ab0:	4656      	mov	r6, sl
  408ab2:	60ca      	str	r2, [r1, #12]
  408ab4:	6091      	str	r1, [r2, #8]
  408ab6:	f8da 100c 	ldr.w	r1, [sl, #12]
  408aba:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408abe:	1f22      	subs	r2, r4, #4
  408ac0:	2a24      	cmp	r2, #36	; 0x24
  408ac2:	60c1      	str	r1, [r0, #12]
  408ac4:	6088      	str	r0, [r1, #8]
  408ac6:	f200 8094 	bhi.w	408bf2 <_realloc_r+0x29a>
  408aca:	2a13      	cmp	r2, #19
  408acc:	d96f      	bls.n	408bae <_realloc_r+0x256>
  408ace:	6829      	ldr	r1, [r5, #0]
  408ad0:	f8ca 1008 	str.w	r1, [sl, #8]
  408ad4:	6869      	ldr	r1, [r5, #4]
  408ad6:	f8ca 100c 	str.w	r1, [sl, #12]
  408ada:	2a1b      	cmp	r2, #27
  408adc:	f200 80a2 	bhi.w	408c24 <_realloc_r+0x2cc>
  408ae0:	3508      	adds	r5, #8
  408ae2:	f10a 0210 	add.w	r2, sl, #16
  408ae6:	e063      	b.n	408bb0 <_realloc_r+0x258>
  408ae8:	f855 3c08 	ldr.w	r3, [r5, #-8]
  408aec:	eba9 0a03 	sub.w	sl, r9, r3
  408af0:	f8da 1004 	ldr.w	r1, [sl, #4]
  408af4:	f021 0103 	bic.w	r1, r1, #3
  408af8:	1863      	adds	r3, r4, r1
  408afa:	4293      	cmp	r3, r2
  408afc:	f6ff af59 	blt.w	4089b2 <_realloc_r+0x5a>
  408b00:	4656      	mov	r6, sl
  408b02:	e7d8      	b.n	408ab6 <_realloc_r+0x15e>
  408b04:	6841      	ldr	r1, [r0, #4]
  408b06:	f021 0b03 	bic.w	fp, r1, #3
  408b0a:	44a3      	add	fp, r4
  408b0c:	f107 0010 	add.w	r0, r7, #16
  408b10:	4583      	cmp	fp, r0
  408b12:	da56      	bge.n	408bc2 <_realloc_r+0x26a>
  408b14:	f01e 0f01 	tst.w	lr, #1
  408b18:	f47f af4b 	bne.w	4089b2 <_realloc_r+0x5a>
  408b1c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  408b20:	eba9 0a01 	sub.w	sl, r9, r1
  408b24:	f8da 1004 	ldr.w	r1, [sl, #4]
  408b28:	f021 0103 	bic.w	r1, r1, #3
  408b2c:	448b      	add	fp, r1
  408b2e:	4558      	cmp	r0, fp
  408b30:	dce2      	bgt.n	408af8 <_realloc_r+0x1a0>
  408b32:	4656      	mov	r6, sl
  408b34:	f8da 100c 	ldr.w	r1, [sl, #12]
  408b38:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408b3c:	1f22      	subs	r2, r4, #4
  408b3e:	2a24      	cmp	r2, #36	; 0x24
  408b40:	60c1      	str	r1, [r0, #12]
  408b42:	6088      	str	r0, [r1, #8]
  408b44:	f200 808f 	bhi.w	408c66 <_realloc_r+0x30e>
  408b48:	2a13      	cmp	r2, #19
  408b4a:	f240 808a 	bls.w	408c62 <_realloc_r+0x30a>
  408b4e:	6829      	ldr	r1, [r5, #0]
  408b50:	f8ca 1008 	str.w	r1, [sl, #8]
  408b54:	6869      	ldr	r1, [r5, #4]
  408b56:	f8ca 100c 	str.w	r1, [sl, #12]
  408b5a:	2a1b      	cmp	r2, #27
  408b5c:	f200 808a 	bhi.w	408c74 <_realloc_r+0x31c>
  408b60:	3508      	adds	r5, #8
  408b62:	f10a 0210 	add.w	r2, sl, #16
  408b66:	6829      	ldr	r1, [r5, #0]
  408b68:	6011      	str	r1, [r2, #0]
  408b6a:	6869      	ldr	r1, [r5, #4]
  408b6c:	6051      	str	r1, [r2, #4]
  408b6e:	68a9      	ldr	r1, [r5, #8]
  408b70:	6091      	str	r1, [r2, #8]
  408b72:	eb0a 0107 	add.w	r1, sl, r7
  408b76:	ebab 0207 	sub.w	r2, fp, r7
  408b7a:	f042 0201 	orr.w	r2, r2, #1
  408b7e:	6099      	str	r1, [r3, #8]
  408b80:	604a      	str	r2, [r1, #4]
  408b82:	f8da 3004 	ldr.w	r3, [sl, #4]
  408b86:	f003 0301 	and.w	r3, r3, #1
  408b8a:	431f      	orrs	r7, r3
  408b8c:	4640      	mov	r0, r8
  408b8e:	f8ca 7004 	str.w	r7, [sl, #4]
  408b92:	f7fe f907 	bl	406da4 <__malloc_unlock>
  408b96:	e751      	b.n	408a3c <_realloc_r+0xe4>
  408b98:	682b      	ldr	r3, [r5, #0]
  408b9a:	6003      	str	r3, [r0, #0]
  408b9c:	686b      	ldr	r3, [r5, #4]
  408b9e:	6043      	str	r3, [r0, #4]
  408ba0:	2a1b      	cmp	r2, #27
  408ba2:	d82d      	bhi.n	408c00 <_realloc_r+0x2a8>
  408ba4:	f100 0308 	add.w	r3, r0, #8
  408ba8:	f105 0208 	add.w	r2, r5, #8
  408bac:	e71b      	b.n	4089e6 <_realloc_r+0x8e>
  408bae:	4632      	mov	r2, r6
  408bb0:	6829      	ldr	r1, [r5, #0]
  408bb2:	6011      	str	r1, [r2, #0]
  408bb4:	6869      	ldr	r1, [r5, #4]
  408bb6:	6051      	str	r1, [r2, #4]
  408bb8:	68a9      	ldr	r1, [r5, #8]
  408bba:	6091      	str	r1, [r2, #8]
  408bbc:	461c      	mov	r4, r3
  408bbe:	46d1      	mov	r9, sl
  408bc0:	e72a      	b.n	408a18 <_realloc_r+0xc0>
  408bc2:	eb09 0107 	add.w	r1, r9, r7
  408bc6:	ebab 0b07 	sub.w	fp, fp, r7
  408bca:	f04b 0201 	orr.w	r2, fp, #1
  408bce:	6099      	str	r1, [r3, #8]
  408bd0:	604a      	str	r2, [r1, #4]
  408bd2:	f855 3c04 	ldr.w	r3, [r5, #-4]
  408bd6:	f003 0301 	and.w	r3, r3, #1
  408bda:	431f      	orrs	r7, r3
  408bdc:	4640      	mov	r0, r8
  408bde:	f845 7c04 	str.w	r7, [r5, #-4]
  408be2:	f7fe f8df 	bl	406da4 <__malloc_unlock>
  408be6:	462e      	mov	r6, r5
  408be8:	e728      	b.n	408a3c <_realloc_r+0xe4>
  408bea:	4629      	mov	r1, r5
  408bec:	f7ff fe50 	bl	408890 <memmove>
  408bf0:	e6ff      	b.n	4089f2 <_realloc_r+0x9a>
  408bf2:	4629      	mov	r1, r5
  408bf4:	4630      	mov	r0, r6
  408bf6:	461c      	mov	r4, r3
  408bf8:	46d1      	mov	r9, sl
  408bfa:	f7ff fe49 	bl	408890 <memmove>
  408bfe:	e70b      	b.n	408a18 <_realloc_r+0xc0>
  408c00:	68ab      	ldr	r3, [r5, #8]
  408c02:	6083      	str	r3, [r0, #8]
  408c04:	68eb      	ldr	r3, [r5, #12]
  408c06:	60c3      	str	r3, [r0, #12]
  408c08:	2a24      	cmp	r2, #36	; 0x24
  408c0a:	d017      	beq.n	408c3c <_realloc_r+0x2e4>
  408c0c:	f100 0310 	add.w	r3, r0, #16
  408c10:	f105 0210 	add.w	r2, r5, #16
  408c14:	e6e7      	b.n	4089e6 <_realloc_r+0x8e>
  408c16:	f850 3c04 	ldr.w	r3, [r0, #-4]
  408c1a:	f023 0303 	bic.w	r3, r3, #3
  408c1e:	441c      	add	r4, r3
  408c20:	462e      	mov	r6, r5
  408c22:	e6f9      	b.n	408a18 <_realloc_r+0xc0>
  408c24:	68a9      	ldr	r1, [r5, #8]
  408c26:	f8ca 1010 	str.w	r1, [sl, #16]
  408c2a:	68e9      	ldr	r1, [r5, #12]
  408c2c:	f8ca 1014 	str.w	r1, [sl, #20]
  408c30:	2a24      	cmp	r2, #36	; 0x24
  408c32:	d00c      	beq.n	408c4e <_realloc_r+0x2f6>
  408c34:	3510      	adds	r5, #16
  408c36:	f10a 0218 	add.w	r2, sl, #24
  408c3a:	e7b9      	b.n	408bb0 <_realloc_r+0x258>
  408c3c:	692b      	ldr	r3, [r5, #16]
  408c3e:	6103      	str	r3, [r0, #16]
  408c40:	696b      	ldr	r3, [r5, #20]
  408c42:	6143      	str	r3, [r0, #20]
  408c44:	f105 0218 	add.w	r2, r5, #24
  408c48:	f100 0318 	add.w	r3, r0, #24
  408c4c:	e6cb      	b.n	4089e6 <_realloc_r+0x8e>
  408c4e:	692a      	ldr	r2, [r5, #16]
  408c50:	f8ca 2018 	str.w	r2, [sl, #24]
  408c54:	696a      	ldr	r2, [r5, #20]
  408c56:	f8ca 201c 	str.w	r2, [sl, #28]
  408c5a:	3518      	adds	r5, #24
  408c5c:	f10a 0220 	add.w	r2, sl, #32
  408c60:	e7a6      	b.n	408bb0 <_realloc_r+0x258>
  408c62:	4632      	mov	r2, r6
  408c64:	e77f      	b.n	408b66 <_realloc_r+0x20e>
  408c66:	4629      	mov	r1, r5
  408c68:	4630      	mov	r0, r6
  408c6a:	9301      	str	r3, [sp, #4]
  408c6c:	f7ff fe10 	bl	408890 <memmove>
  408c70:	9b01      	ldr	r3, [sp, #4]
  408c72:	e77e      	b.n	408b72 <_realloc_r+0x21a>
  408c74:	68a9      	ldr	r1, [r5, #8]
  408c76:	f8ca 1010 	str.w	r1, [sl, #16]
  408c7a:	68e9      	ldr	r1, [r5, #12]
  408c7c:	f8ca 1014 	str.w	r1, [sl, #20]
  408c80:	2a24      	cmp	r2, #36	; 0x24
  408c82:	d003      	beq.n	408c8c <_realloc_r+0x334>
  408c84:	3510      	adds	r5, #16
  408c86:	f10a 0218 	add.w	r2, sl, #24
  408c8a:	e76c      	b.n	408b66 <_realloc_r+0x20e>
  408c8c:	692a      	ldr	r2, [r5, #16]
  408c8e:	f8ca 2018 	str.w	r2, [sl, #24]
  408c92:	696a      	ldr	r2, [r5, #20]
  408c94:	f8ca 201c 	str.w	r2, [sl, #28]
  408c98:	3518      	adds	r5, #24
  408c9a:	f10a 0220 	add.w	r2, sl, #32
  408c9e:	e762      	b.n	408b66 <_realloc_r+0x20e>
  408ca0:	20400488 	.word	0x20400488

00408ca4 <__sread>:
  408ca4:	b510      	push	{r4, lr}
  408ca6:	460c      	mov	r4, r1
  408ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408cac:	f000 f9f6 	bl	40909c <_read_r>
  408cb0:	2800      	cmp	r0, #0
  408cb2:	db03      	blt.n	408cbc <__sread+0x18>
  408cb4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  408cb6:	4403      	add	r3, r0
  408cb8:	6523      	str	r3, [r4, #80]	; 0x50
  408cba:	bd10      	pop	{r4, pc}
  408cbc:	89a3      	ldrh	r3, [r4, #12]
  408cbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  408cc2:	81a3      	strh	r3, [r4, #12]
  408cc4:	bd10      	pop	{r4, pc}
  408cc6:	bf00      	nop

00408cc8 <__swrite>:
  408cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408ccc:	4616      	mov	r6, r2
  408cce:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  408cd2:	461f      	mov	r7, r3
  408cd4:	05d3      	lsls	r3, r2, #23
  408cd6:	460c      	mov	r4, r1
  408cd8:	4605      	mov	r5, r0
  408cda:	d507      	bpl.n	408cec <__swrite+0x24>
  408cdc:	2200      	movs	r2, #0
  408cde:	2302      	movs	r3, #2
  408ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408ce4:	f000 f9c4 	bl	409070 <_lseek_r>
  408ce8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408cec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  408cf0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  408cf4:	81a2      	strh	r2, [r4, #12]
  408cf6:	463b      	mov	r3, r7
  408cf8:	4632      	mov	r2, r6
  408cfa:	4628      	mov	r0, r5
  408cfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408d00:	f000 b8a4 	b.w	408e4c <_write_r>

00408d04 <__sseek>:
  408d04:	b510      	push	{r4, lr}
  408d06:	460c      	mov	r4, r1
  408d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408d0c:	f000 f9b0 	bl	409070 <_lseek_r>
  408d10:	89a3      	ldrh	r3, [r4, #12]
  408d12:	1c42      	adds	r2, r0, #1
  408d14:	bf0e      	itee	eq
  408d16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  408d1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  408d1e:	6520      	strne	r0, [r4, #80]	; 0x50
  408d20:	81a3      	strh	r3, [r4, #12]
  408d22:	bd10      	pop	{r4, pc}

00408d24 <__sclose>:
  408d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408d28:	f000 b908 	b.w	408f3c <_close_r>

00408d2c <__swbuf_r>:
  408d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408d2e:	460d      	mov	r5, r1
  408d30:	4614      	mov	r4, r2
  408d32:	4606      	mov	r6, r0
  408d34:	b110      	cbz	r0, 408d3c <__swbuf_r+0x10>
  408d36:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408d38:	2b00      	cmp	r3, #0
  408d3a:	d04b      	beq.n	408dd4 <__swbuf_r+0xa8>
  408d3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408d40:	69a3      	ldr	r3, [r4, #24]
  408d42:	60a3      	str	r3, [r4, #8]
  408d44:	b291      	uxth	r1, r2
  408d46:	0708      	lsls	r0, r1, #28
  408d48:	d539      	bpl.n	408dbe <__swbuf_r+0x92>
  408d4a:	6923      	ldr	r3, [r4, #16]
  408d4c:	2b00      	cmp	r3, #0
  408d4e:	d036      	beq.n	408dbe <__swbuf_r+0x92>
  408d50:	b2ed      	uxtb	r5, r5
  408d52:	0489      	lsls	r1, r1, #18
  408d54:	462f      	mov	r7, r5
  408d56:	d515      	bpl.n	408d84 <__swbuf_r+0x58>
  408d58:	6822      	ldr	r2, [r4, #0]
  408d5a:	6961      	ldr	r1, [r4, #20]
  408d5c:	1ad3      	subs	r3, r2, r3
  408d5e:	428b      	cmp	r3, r1
  408d60:	da1c      	bge.n	408d9c <__swbuf_r+0x70>
  408d62:	3301      	adds	r3, #1
  408d64:	68a1      	ldr	r1, [r4, #8]
  408d66:	1c50      	adds	r0, r2, #1
  408d68:	3901      	subs	r1, #1
  408d6a:	60a1      	str	r1, [r4, #8]
  408d6c:	6020      	str	r0, [r4, #0]
  408d6e:	7015      	strb	r5, [r2, #0]
  408d70:	6962      	ldr	r2, [r4, #20]
  408d72:	429a      	cmp	r2, r3
  408d74:	d01a      	beq.n	408dac <__swbuf_r+0x80>
  408d76:	89a3      	ldrh	r3, [r4, #12]
  408d78:	07db      	lsls	r3, r3, #31
  408d7a:	d501      	bpl.n	408d80 <__swbuf_r+0x54>
  408d7c:	2d0a      	cmp	r5, #10
  408d7e:	d015      	beq.n	408dac <__swbuf_r+0x80>
  408d80:	4638      	mov	r0, r7
  408d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408d84:	6e61      	ldr	r1, [r4, #100]	; 0x64
  408d86:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  408d8a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  408d8e:	81a2      	strh	r2, [r4, #12]
  408d90:	6822      	ldr	r2, [r4, #0]
  408d92:	6661      	str	r1, [r4, #100]	; 0x64
  408d94:	6961      	ldr	r1, [r4, #20]
  408d96:	1ad3      	subs	r3, r2, r3
  408d98:	428b      	cmp	r3, r1
  408d9a:	dbe2      	blt.n	408d62 <__swbuf_r+0x36>
  408d9c:	4621      	mov	r1, r4
  408d9e:	4630      	mov	r0, r6
  408da0:	f7ff f87a 	bl	407e98 <_fflush_r>
  408da4:	b940      	cbnz	r0, 408db8 <__swbuf_r+0x8c>
  408da6:	6822      	ldr	r2, [r4, #0]
  408da8:	2301      	movs	r3, #1
  408daa:	e7db      	b.n	408d64 <__swbuf_r+0x38>
  408dac:	4621      	mov	r1, r4
  408dae:	4630      	mov	r0, r6
  408db0:	f7ff f872 	bl	407e98 <_fflush_r>
  408db4:	2800      	cmp	r0, #0
  408db6:	d0e3      	beq.n	408d80 <__swbuf_r+0x54>
  408db8:	f04f 37ff 	mov.w	r7, #4294967295
  408dbc:	e7e0      	b.n	408d80 <__swbuf_r+0x54>
  408dbe:	4621      	mov	r1, r4
  408dc0:	4630      	mov	r0, r6
  408dc2:	f7fe ff55 	bl	407c70 <__swsetup_r>
  408dc6:	2800      	cmp	r0, #0
  408dc8:	d1f6      	bne.n	408db8 <__swbuf_r+0x8c>
  408dca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408dce:	6923      	ldr	r3, [r4, #16]
  408dd0:	b291      	uxth	r1, r2
  408dd2:	e7bd      	b.n	408d50 <__swbuf_r+0x24>
  408dd4:	f7ff f8b8 	bl	407f48 <__sinit>
  408dd8:	e7b0      	b.n	408d3c <__swbuf_r+0x10>
  408dda:	bf00      	nop

00408ddc <_wcrtomb_r>:
  408ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
  408dde:	4606      	mov	r6, r0
  408de0:	b085      	sub	sp, #20
  408de2:	461f      	mov	r7, r3
  408de4:	b189      	cbz	r1, 408e0a <_wcrtomb_r+0x2e>
  408de6:	4c10      	ldr	r4, [pc, #64]	; (408e28 <_wcrtomb_r+0x4c>)
  408de8:	4d10      	ldr	r5, [pc, #64]	; (408e2c <_wcrtomb_r+0x50>)
  408dea:	6824      	ldr	r4, [r4, #0]
  408dec:	6b64      	ldr	r4, [r4, #52]	; 0x34
  408dee:	2c00      	cmp	r4, #0
  408df0:	bf08      	it	eq
  408df2:	462c      	moveq	r4, r5
  408df4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  408df8:	47a0      	blx	r4
  408dfa:	1c43      	adds	r3, r0, #1
  408dfc:	d103      	bne.n	408e06 <_wcrtomb_r+0x2a>
  408dfe:	2200      	movs	r2, #0
  408e00:	238a      	movs	r3, #138	; 0x8a
  408e02:	603a      	str	r2, [r7, #0]
  408e04:	6033      	str	r3, [r6, #0]
  408e06:	b005      	add	sp, #20
  408e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408e0a:	460c      	mov	r4, r1
  408e0c:	4906      	ldr	r1, [pc, #24]	; (408e28 <_wcrtomb_r+0x4c>)
  408e0e:	4a07      	ldr	r2, [pc, #28]	; (408e2c <_wcrtomb_r+0x50>)
  408e10:	6809      	ldr	r1, [r1, #0]
  408e12:	6b49      	ldr	r1, [r1, #52]	; 0x34
  408e14:	2900      	cmp	r1, #0
  408e16:	bf08      	it	eq
  408e18:	4611      	moveq	r1, r2
  408e1a:	4622      	mov	r2, r4
  408e1c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  408e20:	a901      	add	r1, sp, #4
  408e22:	47a0      	blx	r4
  408e24:	e7e9      	b.n	408dfa <_wcrtomb_r+0x1e>
  408e26:	bf00      	nop
  408e28:	20400058 	.word	0x20400058
  408e2c:	2040089c 	.word	0x2040089c

00408e30 <__ascii_wctomb>:
  408e30:	b121      	cbz	r1, 408e3c <__ascii_wctomb+0xc>
  408e32:	2aff      	cmp	r2, #255	; 0xff
  408e34:	d804      	bhi.n	408e40 <__ascii_wctomb+0x10>
  408e36:	700a      	strb	r2, [r1, #0]
  408e38:	2001      	movs	r0, #1
  408e3a:	4770      	bx	lr
  408e3c:	4608      	mov	r0, r1
  408e3e:	4770      	bx	lr
  408e40:	238a      	movs	r3, #138	; 0x8a
  408e42:	6003      	str	r3, [r0, #0]
  408e44:	f04f 30ff 	mov.w	r0, #4294967295
  408e48:	4770      	bx	lr
  408e4a:	bf00      	nop

00408e4c <_write_r>:
  408e4c:	b570      	push	{r4, r5, r6, lr}
  408e4e:	460d      	mov	r5, r1
  408e50:	4c08      	ldr	r4, [pc, #32]	; (408e74 <_write_r+0x28>)
  408e52:	4611      	mov	r1, r2
  408e54:	4606      	mov	r6, r0
  408e56:	461a      	mov	r2, r3
  408e58:	4628      	mov	r0, r5
  408e5a:	2300      	movs	r3, #0
  408e5c:	6023      	str	r3, [r4, #0]
  408e5e:	f7f8 fedf 	bl	401c20 <_write>
  408e62:	1c43      	adds	r3, r0, #1
  408e64:	d000      	beq.n	408e68 <_write_r+0x1c>
  408e66:	bd70      	pop	{r4, r5, r6, pc}
  408e68:	6823      	ldr	r3, [r4, #0]
  408e6a:	2b00      	cmp	r3, #0
  408e6c:	d0fb      	beq.n	408e66 <_write_r+0x1a>
  408e6e:	6033      	str	r3, [r6, #0]
  408e70:	bd70      	pop	{r4, r5, r6, pc}
  408e72:	bf00      	nop
  408e74:	2043fcf8 	.word	0x2043fcf8

00408e78 <__register_exitproc>:
  408e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408e7c:	4d2c      	ldr	r5, [pc, #176]	; (408f30 <__register_exitproc+0xb8>)
  408e7e:	4606      	mov	r6, r0
  408e80:	6828      	ldr	r0, [r5, #0]
  408e82:	4698      	mov	r8, r3
  408e84:	460f      	mov	r7, r1
  408e86:	4691      	mov	r9, r2
  408e88:	f7ff fc1e 	bl	4086c8 <__retarget_lock_acquire_recursive>
  408e8c:	4b29      	ldr	r3, [pc, #164]	; (408f34 <__register_exitproc+0xbc>)
  408e8e:	681c      	ldr	r4, [r3, #0]
  408e90:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  408e94:	2b00      	cmp	r3, #0
  408e96:	d03e      	beq.n	408f16 <__register_exitproc+0x9e>
  408e98:	685a      	ldr	r2, [r3, #4]
  408e9a:	2a1f      	cmp	r2, #31
  408e9c:	dc1c      	bgt.n	408ed8 <__register_exitproc+0x60>
  408e9e:	f102 0e01 	add.w	lr, r2, #1
  408ea2:	b176      	cbz	r6, 408ec2 <__register_exitproc+0x4a>
  408ea4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  408ea8:	2401      	movs	r4, #1
  408eaa:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  408eae:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  408eb2:	4094      	lsls	r4, r2
  408eb4:	4320      	orrs	r0, r4
  408eb6:	2e02      	cmp	r6, #2
  408eb8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  408ebc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  408ec0:	d023      	beq.n	408f0a <__register_exitproc+0x92>
  408ec2:	3202      	adds	r2, #2
  408ec4:	f8c3 e004 	str.w	lr, [r3, #4]
  408ec8:	6828      	ldr	r0, [r5, #0]
  408eca:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  408ece:	f7ff fbfd 	bl	4086cc <__retarget_lock_release_recursive>
  408ed2:	2000      	movs	r0, #0
  408ed4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408ed8:	4b17      	ldr	r3, [pc, #92]	; (408f38 <__register_exitproc+0xc0>)
  408eda:	b30b      	cbz	r3, 408f20 <__register_exitproc+0xa8>
  408edc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  408ee0:	f7fd fbba 	bl	406658 <malloc>
  408ee4:	4603      	mov	r3, r0
  408ee6:	b1d8      	cbz	r0, 408f20 <__register_exitproc+0xa8>
  408ee8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  408eec:	6002      	str	r2, [r0, #0]
  408eee:	2100      	movs	r1, #0
  408ef0:	6041      	str	r1, [r0, #4]
  408ef2:	460a      	mov	r2, r1
  408ef4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  408ef8:	f04f 0e01 	mov.w	lr, #1
  408efc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  408f00:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  408f04:	2e00      	cmp	r6, #0
  408f06:	d0dc      	beq.n	408ec2 <__register_exitproc+0x4a>
  408f08:	e7cc      	b.n	408ea4 <__register_exitproc+0x2c>
  408f0a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  408f0e:	430c      	orrs	r4, r1
  408f10:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  408f14:	e7d5      	b.n	408ec2 <__register_exitproc+0x4a>
  408f16:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  408f1a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  408f1e:	e7bb      	b.n	408e98 <__register_exitproc+0x20>
  408f20:	6828      	ldr	r0, [r5, #0]
  408f22:	f7ff fbd3 	bl	4086cc <__retarget_lock_release_recursive>
  408f26:	f04f 30ff 	mov.w	r0, #4294967295
  408f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408f2e:	bf00      	nop
  408f30:	20400898 	.word	0x20400898
  408f34:	00409e80 	.word	0x00409e80
  408f38:	00406659 	.word	0x00406659

00408f3c <_close_r>:
  408f3c:	b538      	push	{r3, r4, r5, lr}
  408f3e:	4c07      	ldr	r4, [pc, #28]	; (408f5c <_close_r+0x20>)
  408f40:	2300      	movs	r3, #0
  408f42:	4605      	mov	r5, r0
  408f44:	4608      	mov	r0, r1
  408f46:	6023      	str	r3, [r4, #0]
  408f48:	f7fa fa78 	bl	40343c <_close>
  408f4c:	1c43      	adds	r3, r0, #1
  408f4e:	d000      	beq.n	408f52 <_close_r+0x16>
  408f50:	bd38      	pop	{r3, r4, r5, pc}
  408f52:	6823      	ldr	r3, [r4, #0]
  408f54:	2b00      	cmp	r3, #0
  408f56:	d0fb      	beq.n	408f50 <_close_r+0x14>
  408f58:	602b      	str	r3, [r5, #0]
  408f5a:	bd38      	pop	{r3, r4, r5, pc}
  408f5c:	2043fcf8 	.word	0x2043fcf8

00408f60 <_fclose_r>:
  408f60:	b570      	push	{r4, r5, r6, lr}
  408f62:	b159      	cbz	r1, 408f7c <_fclose_r+0x1c>
  408f64:	4605      	mov	r5, r0
  408f66:	460c      	mov	r4, r1
  408f68:	b110      	cbz	r0, 408f70 <_fclose_r+0x10>
  408f6a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408f6c:	2b00      	cmp	r3, #0
  408f6e:	d03c      	beq.n	408fea <_fclose_r+0x8a>
  408f70:	6e63      	ldr	r3, [r4, #100]	; 0x64
  408f72:	07d8      	lsls	r0, r3, #31
  408f74:	d505      	bpl.n	408f82 <_fclose_r+0x22>
  408f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408f7a:	b92b      	cbnz	r3, 408f88 <_fclose_r+0x28>
  408f7c:	2600      	movs	r6, #0
  408f7e:	4630      	mov	r0, r6
  408f80:	bd70      	pop	{r4, r5, r6, pc}
  408f82:	89a3      	ldrh	r3, [r4, #12]
  408f84:	0599      	lsls	r1, r3, #22
  408f86:	d53c      	bpl.n	409002 <_fclose_r+0xa2>
  408f88:	4621      	mov	r1, r4
  408f8a:	4628      	mov	r0, r5
  408f8c:	f7fe fee4 	bl	407d58 <__sflush_r>
  408f90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  408f92:	4606      	mov	r6, r0
  408f94:	b133      	cbz	r3, 408fa4 <_fclose_r+0x44>
  408f96:	69e1      	ldr	r1, [r4, #28]
  408f98:	4628      	mov	r0, r5
  408f9a:	4798      	blx	r3
  408f9c:	2800      	cmp	r0, #0
  408f9e:	bfb8      	it	lt
  408fa0:	f04f 36ff 	movlt.w	r6, #4294967295
  408fa4:	89a3      	ldrh	r3, [r4, #12]
  408fa6:	061a      	lsls	r2, r3, #24
  408fa8:	d422      	bmi.n	408ff0 <_fclose_r+0x90>
  408faa:	6b21      	ldr	r1, [r4, #48]	; 0x30
  408fac:	b141      	cbz	r1, 408fc0 <_fclose_r+0x60>
  408fae:	f104 0340 	add.w	r3, r4, #64	; 0x40
  408fb2:	4299      	cmp	r1, r3
  408fb4:	d002      	beq.n	408fbc <_fclose_r+0x5c>
  408fb6:	4628      	mov	r0, r5
  408fb8:	f7ff f8ec 	bl	408194 <_free_r>
  408fbc:	2300      	movs	r3, #0
  408fbe:	6323      	str	r3, [r4, #48]	; 0x30
  408fc0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  408fc2:	b121      	cbz	r1, 408fce <_fclose_r+0x6e>
  408fc4:	4628      	mov	r0, r5
  408fc6:	f7ff f8e5 	bl	408194 <_free_r>
  408fca:	2300      	movs	r3, #0
  408fcc:	6463      	str	r3, [r4, #68]	; 0x44
  408fce:	f7fe ffe7 	bl	407fa0 <__sfp_lock_acquire>
  408fd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  408fd4:	2200      	movs	r2, #0
  408fd6:	07db      	lsls	r3, r3, #31
  408fd8:	81a2      	strh	r2, [r4, #12]
  408fda:	d50e      	bpl.n	408ffa <_fclose_r+0x9a>
  408fdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408fde:	f7ff fb71 	bl	4086c4 <__retarget_lock_close_recursive>
  408fe2:	f7fe ffe3 	bl	407fac <__sfp_lock_release>
  408fe6:	4630      	mov	r0, r6
  408fe8:	bd70      	pop	{r4, r5, r6, pc}
  408fea:	f7fe ffad 	bl	407f48 <__sinit>
  408fee:	e7bf      	b.n	408f70 <_fclose_r+0x10>
  408ff0:	6921      	ldr	r1, [r4, #16]
  408ff2:	4628      	mov	r0, r5
  408ff4:	f7ff f8ce 	bl	408194 <_free_r>
  408ff8:	e7d7      	b.n	408faa <_fclose_r+0x4a>
  408ffa:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408ffc:	f7ff fb66 	bl	4086cc <__retarget_lock_release_recursive>
  409000:	e7ec      	b.n	408fdc <_fclose_r+0x7c>
  409002:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409004:	f7ff fb60 	bl	4086c8 <__retarget_lock_acquire_recursive>
  409008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40900c:	2b00      	cmp	r3, #0
  40900e:	d1bb      	bne.n	408f88 <_fclose_r+0x28>
  409010:	6e66      	ldr	r6, [r4, #100]	; 0x64
  409012:	f016 0601 	ands.w	r6, r6, #1
  409016:	d1b1      	bne.n	408f7c <_fclose_r+0x1c>
  409018:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40901a:	f7ff fb57 	bl	4086cc <__retarget_lock_release_recursive>
  40901e:	4630      	mov	r0, r6
  409020:	bd70      	pop	{r4, r5, r6, pc}
  409022:	bf00      	nop

00409024 <_fstat_r>:
  409024:	b538      	push	{r3, r4, r5, lr}
  409026:	460b      	mov	r3, r1
  409028:	4c07      	ldr	r4, [pc, #28]	; (409048 <_fstat_r+0x24>)
  40902a:	4605      	mov	r5, r0
  40902c:	4611      	mov	r1, r2
  40902e:	4618      	mov	r0, r3
  409030:	2300      	movs	r3, #0
  409032:	6023      	str	r3, [r4, #0]
  409034:	f7fa fa06 	bl	403444 <_fstat>
  409038:	1c43      	adds	r3, r0, #1
  40903a:	d000      	beq.n	40903e <_fstat_r+0x1a>
  40903c:	bd38      	pop	{r3, r4, r5, pc}
  40903e:	6823      	ldr	r3, [r4, #0]
  409040:	2b00      	cmp	r3, #0
  409042:	d0fb      	beq.n	40903c <_fstat_r+0x18>
  409044:	602b      	str	r3, [r5, #0]
  409046:	bd38      	pop	{r3, r4, r5, pc}
  409048:	2043fcf8 	.word	0x2043fcf8

0040904c <_isatty_r>:
  40904c:	b538      	push	{r3, r4, r5, lr}
  40904e:	4c07      	ldr	r4, [pc, #28]	; (40906c <_isatty_r+0x20>)
  409050:	2300      	movs	r3, #0
  409052:	4605      	mov	r5, r0
  409054:	4608      	mov	r0, r1
  409056:	6023      	str	r3, [r4, #0]
  409058:	f7fa f9fa 	bl	403450 <_isatty>
  40905c:	1c43      	adds	r3, r0, #1
  40905e:	d000      	beq.n	409062 <_isatty_r+0x16>
  409060:	bd38      	pop	{r3, r4, r5, pc}
  409062:	6823      	ldr	r3, [r4, #0]
  409064:	2b00      	cmp	r3, #0
  409066:	d0fb      	beq.n	409060 <_isatty_r+0x14>
  409068:	602b      	str	r3, [r5, #0]
  40906a:	bd38      	pop	{r3, r4, r5, pc}
  40906c:	2043fcf8 	.word	0x2043fcf8

00409070 <_lseek_r>:
  409070:	b570      	push	{r4, r5, r6, lr}
  409072:	460d      	mov	r5, r1
  409074:	4c08      	ldr	r4, [pc, #32]	; (409098 <_lseek_r+0x28>)
  409076:	4611      	mov	r1, r2
  409078:	4606      	mov	r6, r0
  40907a:	461a      	mov	r2, r3
  40907c:	4628      	mov	r0, r5
  40907e:	2300      	movs	r3, #0
  409080:	6023      	str	r3, [r4, #0]
  409082:	f7fa f9e7 	bl	403454 <_lseek>
  409086:	1c43      	adds	r3, r0, #1
  409088:	d000      	beq.n	40908c <_lseek_r+0x1c>
  40908a:	bd70      	pop	{r4, r5, r6, pc}
  40908c:	6823      	ldr	r3, [r4, #0]
  40908e:	2b00      	cmp	r3, #0
  409090:	d0fb      	beq.n	40908a <_lseek_r+0x1a>
  409092:	6033      	str	r3, [r6, #0]
  409094:	bd70      	pop	{r4, r5, r6, pc}
  409096:	bf00      	nop
  409098:	2043fcf8 	.word	0x2043fcf8

0040909c <_read_r>:
  40909c:	b570      	push	{r4, r5, r6, lr}
  40909e:	460d      	mov	r5, r1
  4090a0:	4c08      	ldr	r4, [pc, #32]	; (4090c4 <_read_r+0x28>)
  4090a2:	4611      	mov	r1, r2
  4090a4:	4606      	mov	r6, r0
  4090a6:	461a      	mov	r2, r3
  4090a8:	4628      	mov	r0, r5
  4090aa:	2300      	movs	r3, #0
  4090ac:	6023      	str	r3, [r4, #0]
  4090ae:	f7f8 fd99 	bl	401be4 <_read>
  4090b2:	1c43      	adds	r3, r0, #1
  4090b4:	d000      	beq.n	4090b8 <_read_r+0x1c>
  4090b6:	bd70      	pop	{r4, r5, r6, pc}
  4090b8:	6823      	ldr	r3, [r4, #0]
  4090ba:	2b00      	cmp	r3, #0
  4090bc:	d0fb      	beq.n	4090b6 <_read_r+0x1a>
  4090be:	6033      	str	r3, [r6, #0]
  4090c0:	bd70      	pop	{r4, r5, r6, pc}
  4090c2:	bf00      	nop
  4090c4:	2043fcf8 	.word	0x2043fcf8

004090c8 <__aeabi_uldivmod>:
  4090c8:	b953      	cbnz	r3, 4090e0 <__aeabi_uldivmod+0x18>
  4090ca:	b94a      	cbnz	r2, 4090e0 <__aeabi_uldivmod+0x18>
  4090cc:	2900      	cmp	r1, #0
  4090ce:	bf08      	it	eq
  4090d0:	2800      	cmpeq	r0, #0
  4090d2:	bf1c      	itt	ne
  4090d4:	f04f 31ff 	movne.w	r1, #4294967295
  4090d8:	f04f 30ff 	movne.w	r0, #4294967295
  4090dc:	f000 b97a 	b.w	4093d4 <__aeabi_idiv0>
  4090e0:	f1ad 0c08 	sub.w	ip, sp, #8
  4090e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4090e8:	f000 f806 	bl	4090f8 <__udivmoddi4>
  4090ec:	f8dd e004 	ldr.w	lr, [sp, #4]
  4090f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4090f4:	b004      	add	sp, #16
  4090f6:	4770      	bx	lr

004090f8 <__udivmoddi4>:
  4090f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4090fc:	468c      	mov	ip, r1
  4090fe:	460d      	mov	r5, r1
  409100:	4604      	mov	r4, r0
  409102:	9e08      	ldr	r6, [sp, #32]
  409104:	2b00      	cmp	r3, #0
  409106:	d151      	bne.n	4091ac <__udivmoddi4+0xb4>
  409108:	428a      	cmp	r2, r1
  40910a:	4617      	mov	r7, r2
  40910c:	d96d      	bls.n	4091ea <__udivmoddi4+0xf2>
  40910e:	fab2 fe82 	clz	lr, r2
  409112:	f1be 0f00 	cmp.w	lr, #0
  409116:	d00b      	beq.n	409130 <__udivmoddi4+0x38>
  409118:	f1ce 0c20 	rsb	ip, lr, #32
  40911c:	fa01 f50e 	lsl.w	r5, r1, lr
  409120:	fa20 fc0c 	lsr.w	ip, r0, ip
  409124:	fa02 f70e 	lsl.w	r7, r2, lr
  409128:	ea4c 0c05 	orr.w	ip, ip, r5
  40912c:	fa00 f40e 	lsl.w	r4, r0, lr
  409130:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  409134:	0c25      	lsrs	r5, r4, #16
  409136:	fbbc f8fa 	udiv	r8, ip, sl
  40913a:	fa1f f987 	uxth.w	r9, r7
  40913e:	fb0a cc18 	mls	ip, sl, r8, ip
  409142:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  409146:	fb08 f309 	mul.w	r3, r8, r9
  40914a:	42ab      	cmp	r3, r5
  40914c:	d90a      	bls.n	409164 <__udivmoddi4+0x6c>
  40914e:	19ed      	adds	r5, r5, r7
  409150:	f108 32ff 	add.w	r2, r8, #4294967295
  409154:	f080 8123 	bcs.w	40939e <__udivmoddi4+0x2a6>
  409158:	42ab      	cmp	r3, r5
  40915a:	f240 8120 	bls.w	40939e <__udivmoddi4+0x2a6>
  40915e:	f1a8 0802 	sub.w	r8, r8, #2
  409162:	443d      	add	r5, r7
  409164:	1aed      	subs	r5, r5, r3
  409166:	b2a4      	uxth	r4, r4
  409168:	fbb5 f0fa 	udiv	r0, r5, sl
  40916c:	fb0a 5510 	mls	r5, sl, r0, r5
  409170:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  409174:	fb00 f909 	mul.w	r9, r0, r9
  409178:	45a1      	cmp	r9, r4
  40917a:	d909      	bls.n	409190 <__udivmoddi4+0x98>
  40917c:	19e4      	adds	r4, r4, r7
  40917e:	f100 33ff 	add.w	r3, r0, #4294967295
  409182:	f080 810a 	bcs.w	40939a <__udivmoddi4+0x2a2>
  409186:	45a1      	cmp	r9, r4
  409188:	f240 8107 	bls.w	40939a <__udivmoddi4+0x2a2>
  40918c:	3802      	subs	r0, #2
  40918e:	443c      	add	r4, r7
  409190:	eba4 0409 	sub.w	r4, r4, r9
  409194:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  409198:	2100      	movs	r1, #0
  40919a:	2e00      	cmp	r6, #0
  40919c:	d061      	beq.n	409262 <__udivmoddi4+0x16a>
  40919e:	fa24 f40e 	lsr.w	r4, r4, lr
  4091a2:	2300      	movs	r3, #0
  4091a4:	6034      	str	r4, [r6, #0]
  4091a6:	6073      	str	r3, [r6, #4]
  4091a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4091ac:	428b      	cmp	r3, r1
  4091ae:	d907      	bls.n	4091c0 <__udivmoddi4+0xc8>
  4091b0:	2e00      	cmp	r6, #0
  4091b2:	d054      	beq.n	40925e <__udivmoddi4+0x166>
  4091b4:	2100      	movs	r1, #0
  4091b6:	e886 0021 	stmia.w	r6, {r0, r5}
  4091ba:	4608      	mov	r0, r1
  4091bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4091c0:	fab3 f183 	clz	r1, r3
  4091c4:	2900      	cmp	r1, #0
  4091c6:	f040 808e 	bne.w	4092e6 <__udivmoddi4+0x1ee>
  4091ca:	42ab      	cmp	r3, r5
  4091cc:	d302      	bcc.n	4091d4 <__udivmoddi4+0xdc>
  4091ce:	4282      	cmp	r2, r0
  4091d0:	f200 80fa 	bhi.w	4093c8 <__udivmoddi4+0x2d0>
  4091d4:	1a84      	subs	r4, r0, r2
  4091d6:	eb65 0503 	sbc.w	r5, r5, r3
  4091da:	2001      	movs	r0, #1
  4091dc:	46ac      	mov	ip, r5
  4091de:	2e00      	cmp	r6, #0
  4091e0:	d03f      	beq.n	409262 <__udivmoddi4+0x16a>
  4091e2:	e886 1010 	stmia.w	r6, {r4, ip}
  4091e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4091ea:	b912      	cbnz	r2, 4091f2 <__udivmoddi4+0xfa>
  4091ec:	2701      	movs	r7, #1
  4091ee:	fbb7 f7f2 	udiv	r7, r7, r2
  4091f2:	fab7 fe87 	clz	lr, r7
  4091f6:	f1be 0f00 	cmp.w	lr, #0
  4091fa:	d134      	bne.n	409266 <__udivmoddi4+0x16e>
  4091fc:	1beb      	subs	r3, r5, r7
  4091fe:	0c3a      	lsrs	r2, r7, #16
  409200:	fa1f fc87 	uxth.w	ip, r7
  409204:	2101      	movs	r1, #1
  409206:	fbb3 f8f2 	udiv	r8, r3, r2
  40920a:	0c25      	lsrs	r5, r4, #16
  40920c:	fb02 3318 	mls	r3, r2, r8, r3
  409210:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  409214:	fb0c f308 	mul.w	r3, ip, r8
  409218:	42ab      	cmp	r3, r5
  40921a:	d907      	bls.n	40922c <__udivmoddi4+0x134>
  40921c:	19ed      	adds	r5, r5, r7
  40921e:	f108 30ff 	add.w	r0, r8, #4294967295
  409222:	d202      	bcs.n	40922a <__udivmoddi4+0x132>
  409224:	42ab      	cmp	r3, r5
  409226:	f200 80d1 	bhi.w	4093cc <__udivmoddi4+0x2d4>
  40922a:	4680      	mov	r8, r0
  40922c:	1aed      	subs	r5, r5, r3
  40922e:	b2a3      	uxth	r3, r4
  409230:	fbb5 f0f2 	udiv	r0, r5, r2
  409234:	fb02 5510 	mls	r5, r2, r0, r5
  409238:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40923c:	fb0c fc00 	mul.w	ip, ip, r0
  409240:	45a4      	cmp	ip, r4
  409242:	d907      	bls.n	409254 <__udivmoddi4+0x15c>
  409244:	19e4      	adds	r4, r4, r7
  409246:	f100 33ff 	add.w	r3, r0, #4294967295
  40924a:	d202      	bcs.n	409252 <__udivmoddi4+0x15a>
  40924c:	45a4      	cmp	ip, r4
  40924e:	f200 80b8 	bhi.w	4093c2 <__udivmoddi4+0x2ca>
  409252:	4618      	mov	r0, r3
  409254:	eba4 040c 	sub.w	r4, r4, ip
  409258:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40925c:	e79d      	b.n	40919a <__udivmoddi4+0xa2>
  40925e:	4631      	mov	r1, r6
  409260:	4630      	mov	r0, r6
  409262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409266:	f1ce 0420 	rsb	r4, lr, #32
  40926a:	fa05 f30e 	lsl.w	r3, r5, lr
  40926e:	fa07 f70e 	lsl.w	r7, r7, lr
  409272:	fa20 f804 	lsr.w	r8, r0, r4
  409276:	0c3a      	lsrs	r2, r7, #16
  409278:	fa25 f404 	lsr.w	r4, r5, r4
  40927c:	ea48 0803 	orr.w	r8, r8, r3
  409280:	fbb4 f1f2 	udiv	r1, r4, r2
  409284:	ea4f 4518 	mov.w	r5, r8, lsr #16
  409288:	fb02 4411 	mls	r4, r2, r1, r4
  40928c:	fa1f fc87 	uxth.w	ip, r7
  409290:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  409294:	fb01 f30c 	mul.w	r3, r1, ip
  409298:	42ab      	cmp	r3, r5
  40929a:	fa00 f40e 	lsl.w	r4, r0, lr
  40929e:	d909      	bls.n	4092b4 <__udivmoddi4+0x1bc>
  4092a0:	19ed      	adds	r5, r5, r7
  4092a2:	f101 30ff 	add.w	r0, r1, #4294967295
  4092a6:	f080 808a 	bcs.w	4093be <__udivmoddi4+0x2c6>
  4092aa:	42ab      	cmp	r3, r5
  4092ac:	f240 8087 	bls.w	4093be <__udivmoddi4+0x2c6>
  4092b0:	3902      	subs	r1, #2
  4092b2:	443d      	add	r5, r7
  4092b4:	1aeb      	subs	r3, r5, r3
  4092b6:	fa1f f588 	uxth.w	r5, r8
  4092ba:	fbb3 f0f2 	udiv	r0, r3, r2
  4092be:	fb02 3310 	mls	r3, r2, r0, r3
  4092c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4092c6:	fb00 f30c 	mul.w	r3, r0, ip
  4092ca:	42ab      	cmp	r3, r5
  4092cc:	d907      	bls.n	4092de <__udivmoddi4+0x1e6>
  4092ce:	19ed      	adds	r5, r5, r7
  4092d0:	f100 38ff 	add.w	r8, r0, #4294967295
  4092d4:	d26f      	bcs.n	4093b6 <__udivmoddi4+0x2be>
  4092d6:	42ab      	cmp	r3, r5
  4092d8:	d96d      	bls.n	4093b6 <__udivmoddi4+0x2be>
  4092da:	3802      	subs	r0, #2
  4092dc:	443d      	add	r5, r7
  4092de:	1aeb      	subs	r3, r5, r3
  4092e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4092e4:	e78f      	b.n	409206 <__udivmoddi4+0x10e>
  4092e6:	f1c1 0720 	rsb	r7, r1, #32
  4092ea:	fa22 f807 	lsr.w	r8, r2, r7
  4092ee:	408b      	lsls	r3, r1
  4092f0:	fa05 f401 	lsl.w	r4, r5, r1
  4092f4:	ea48 0303 	orr.w	r3, r8, r3
  4092f8:	fa20 fe07 	lsr.w	lr, r0, r7
  4092fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  409300:	40fd      	lsrs	r5, r7
  409302:	ea4e 0e04 	orr.w	lr, lr, r4
  409306:	fbb5 f9fc 	udiv	r9, r5, ip
  40930a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40930e:	fb0c 5519 	mls	r5, ip, r9, r5
  409312:	fa1f f883 	uxth.w	r8, r3
  409316:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40931a:	fb09 f408 	mul.w	r4, r9, r8
  40931e:	42ac      	cmp	r4, r5
  409320:	fa02 f201 	lsl.w	r2, r2, r1
  409324:	fa00 fa01 	lsl.w	sl, r0, r1
  409328:	d908      	bls.n	40933c <__udivmoddi4+0x244>
  40932a:	18ed      	adds	r5, r5, r3
  40932c:	f109 30ff 	add.w	r0, r9, #4294967295
  409330:	d243      	bcs.n	4093ba <__udivmoddi4+0x2c2>
  409332:	42ac      	cmp	r4, r5
  409334:	d941      	bls.n	4093ba <__udivmoddi4+0x2c2>
  409336:	f1a9 0902 	sub.w	r9, r9, #2
  40933a:	441d      	add	r5, r3
  40933c:	1b2d      	subs	r5, r5, r4
  40933e:	fa1f fe8e 	uxth.w	lr, lr
  409342:	fbb5 f0fc 	udiv	r0, r5, ip
  409346:	fb0c 5510 	mls	r5, ip, r0, r5
  40934a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40934e:	fb00 f808 	mul.w	r8, r0, r8
  409352:	45a0      	cmp	r8, r4
  409354:	d907      	bls.n	409366 <__udivmoddi4+0x26e>
  409356:	18e4      	adds	r4, r4, r3
  409358:	f100 35ff 	add.w	r5, r0, #4294967295
  40935c:	d229      	bcs.n	4093b2 <__udivmoddi4+0x2ba>
  40935e:	45a0      	cmp	r8, r4
  409360:	d927      	bls.n	4093b2 <__udivmoddi4+0x2ba>
  409362:	3802      	subs	r0, #2
  409364:	441c      	add	r4, r3
  409366:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40936a:	eba4 0408 	sub.w	r4, r4, r8
  40936e:	fba0 8902 	umull	r8, r9, r0, r2
  409372:	454c      	cmp	r4, r9
  409374:	46c6      	mov	lr, r8
  409376:	464d      	mov	r5, r9
  409378:	d315      	bcc.n	4093a6 <__udivmoddi4+0x2ae>
  40937a:	d012      	beq.n	4093a2 <__udivmoddi4+0x2aa>
  40937c:	b156      	cbz	r6, 409394 <__udivmoddi4+0x29c>
  40937e:	ebba 030e 	subs.w	r3, sl, lr
  409382:	eb64 0405 	sbc.w	r4, r4, r5
  409386:	fa04 f707 	lsl.w	r7, r4, r7
  40938a:	40cb      	lsrs	r3, r1
  40938c:	431f      	orrs	r7, r3
  40938e:	40cc      	lsrs	r4, r1
  409390:	6037      	str	r7, [r6, #0]
  409392:	6074      	str	r4, [r6, #4]
  409394:	2100      	movs	r1, #0
  409396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40939a:	4618      	mov	r0, r3
  40939c:	e6f8      	b.n	409190 <__udivmoddi4+0x98>
  40939e:	4690      	mov	r8, r2
  4093a0:	e6e0      	b.n	409164 <__udivmoddi4+0x6c>
  4093a2:	45c2      	cmp	sl, r8
  4093a4:	d2ea      	bcs.n	40937c <__udivmoddi4+0x284>
  4093a6:	ebb8 0e02 	subs.w	lr, r8, r2
  4093aa:	eb69 0503 	sbc.w	r5, r9, r3
  4093ae:	3801      	subs	r0, #1
  4093b0:	e7e4      	b.n	40937c <__udivmoddi4+0x284>
  4093b2:	4628      	mov	r0, r5
  4093b4:	e7d7      	b.n	409366 <__udivmoddi4+0x26e>
  4093b6:	4640      	mov	r0, r8
  4093b8:	e791      	b.n	4092de <__udivmoddi4+0x1e6>
  4093ba:	4681      	mov	r9, r0
  4093bc:	e7be      	b.n	40933c <__udivmoddi4+0x244>
  4093be:	4601      	mov	r1, r0
  4093c0:	e778      	b.n	4092b4 <__udivmoddi4+0x1bc>
  4093c2:	3802      	subs	r0, #2
  4093c4:	443c      	add	r4, r7
  4093c6:	e745      	b.n	409254 <__udivmoddi4+0x15c>
  4093c8:	4608      	mov	r0, r1
  4093ca:	e708      	b.n	4091de <__udivmoddi4+0xe6>
  4093cc:	f1a8 0802 	sub.w	r8, r8, #2
  4093d0:	443d      	add	r5, r7
  4093d2:	e72b      	b.n	40922c <__udivmoddi4+0x134>

004093d4 <__aeabi_idiv0>:
  4093d4:	4770      	bx	lr
  4093d6:	bf00      	nop
  4093d8:	092d452d 	.word	0x092d452d
  4093dc:	39384d57 	.word	0x39384d57
  4093e0:	69203430 	.word	0x69203430
  4093e4:	6974696e 	.word	0x6974696e
  4093e8:	7a696c61 	.word	0x7a696c61
  4093ec:	6f697461 	.word	0x6f697461
  4093f0:	6166206e 	.word	0x6166206e
  4093f4:	64656c69 	.word	0x64656c69
  4093f8:	00000d2e 	.word	0x00000d2e
  4093fc:	39384d57 	.word	0x39384d57
  409400:	6e203430 	.word	0x6e203430
  409404:	6620746f 	.word	0x6620746f
  409408:	646e756f 	.word	0x646e756f
  40940c:	000d0a21 	.word	0x000d0a21
  409410:	0a05000d 	.word	0x0a05000d
  409414:	0000004b 	.word	0x0000004b
  409418:	00001932 	.word	0x00001932
  40941c:	0e00008b 	.word	0x0e00008b
  409420:	32800008 	.word	0x32800008
  409424:	030a0205 	.word	0x030a0205
  409428:	0f022003 	.word	0x0f022003
  40942c:	00000a0f 	.word	0x00000a0f
  409430:	18180000 	.word	0x18180000
  409434:	00002020 	.word	0x00002020
  409438:	0a000000 	.word	0x0a000000
  40943c:	02020000 	.word	0x02020000
  409440:	18180000 	.word	0x18180000
  409444:	00030000 	.word	0x00030000
  409448:	00000000 	.word	0x00000000
  40944c:	18010002 	.word	0x18010002
  409450:	1e1e1e1e 	.word	0x1e1e1e1e
  409454:	1e1e1e1e 	.word	0x1e1e1e1e
  409458:	1e1e1e1e 	.word	0x1e1e1e1e
  40945c:	00001e1e 	.word	0x00001e1e
	...

00409470 <CSWTCH.7>:
  409470:	00000100 00000300 00000200              ............

0040947c <midi_note_frequencies>:
  40947c:	4102d0e5 410a978d 4112d4fe 411b9168     ...A...A...Ah..A
  40948c:	4124d0e5 412e9ba6 4138fdf4 41440000     ..$A...A..8A..DA
  40949c:	414fa5e3 415c0000 41691687 4176f1aa     ..OA..\A..iA..vA
  4094ac:	4182d0e5 418a978d 4192d4fe 419b8f5c     ...A...A...A\..A
  4094bc:	41a4d0e5 41ae9db2 41b90000 41c40000     ...A...A...A...A
  4094cc:	41cfa7f0 41dc0000 41e9147b 41f6f1aa     ...A...A{..A...A
  4094dc:	4202cfdf 420a978d 4212d4fe 421b9062     ...B...B...Bb..B
  4094ec:	4224cfdf 422e9db2 4238fefa 4243fefa     ..$B...B..8B..CB
  4094fc:	424fa6e9 425c0000 4269147b 4276f0a4     ..OB..\B{.iB..vB
  40950c:	4282cfdf 428a978d 4292d4fe 429b9062     ...B...B...Bb..B
  40951c:	42a4d062 42ae9d2f 42b8ff7d 42c3ff7d     b..B/..B}..B}..B
  40952c:	42cfa6e9 42dc0000 42e914fe 42f6f127     ...B...B...B'..B
  40953c:	4302d021 430a974c 4312d4fe 431b9021     !..CL..C...C!..C
  40954c:	4324d062 432e9d2f 4338ff3b 4343ff7d     b.$C/..C;.8C}.CC
  40955c:	434fa6e9 435c0000 436914fe 4376f127     ..OC..\C..iC'.vC
  40956c:	4382d021 438a976d 4392d51f 439b9042     !..Cm..C...CB..C
  40957c:	43a4d062 43ae9d2f 43b8ff3b 43c3ff5c     b..C/..C;..C\..C
  40958c:	43cfa70a 43dc0000 43e914fe 43f6f106     ...C...C...C...C
  40959c:	4402d010 440a975c 4412d51f 441b9042     ...D\..D...DB..D
  4095ac:	4424d052 442e9d2f 4438ff4c 4443ff6d     R.$D/..DL.8Dm.CD
  4095bc:	444fa6fa 445c0000 446914fe 4476f117     ..OD..\D..iD..vD
  4095cc:	4482d010 448a9764 4492d517 449b9042     ...Dd..D...DB..D
  4095dc:	44a4d052 44ae9d37 44b8ff4c 44c3ff6d     R..D7..DL..Dm..D
  4095ec:	44cfa702 44dc0000 44e914f6 44f6f10e     ...D...D...D...D
  4095fc:	4502d014 450a9760 4512d517 451b9042     ...E`..E...EB..E
  40960c:	4524d052 452e9d37 4538ff48 4543ff68     R.$E7..EH.8Eh.CE
  40961c:	454fa702 455c0000 456914f6 4576f10e     ..OE..\E..iE..vE
  40962c:	4582d012 458a9760 4592d517 459b9042     ...E`..E...EB..E
  40963c:	45a4d054 45ae9d37 45b8ff4a 45c3ff6a     T..E7..EJ..Ej..E
  40964c:	45cfa700 45dc0000 45e914f6 45f6f110     ...E...E...E...E
  40965c:	4602d012 460a9760 4612d518 461b9041     ...F`..F...FA..F
  40966c:	4624d052 462e9d33 4638ff48 4643ff66     R.$F3..FH.8Ff.CF

0040967c <sinTable_f32>:
  40967c:	00000000 3c490e92 3cc90ab1 3d16c32b     ......I<...<+..=
  40968c:	3d48fb2e 3d7b2b75 3d96a904 3dafb680     ..H=u+{=...=...=
  40969c:	3dc8bd36 3de1bc2f 3dfab273 3e09cf87     6..=/..=s..=...>
  4096ac:	3e164083 3e22abb5 3e2f10a2 3e3b6ecf     .@.>..">../>.n;>
  4096bc:	3e47c5c2 3e541501 3e605c13 3e6c9a7f     ..G>..T>.\`>..l>
  4096cc:	3e78cfcc 3e827dc0 3e888e93 3e8e9a22     ..x>.}.>...>"..>
  4096dc:	3e94a032 3e9aa086 3ea09ae5 3ea68f12     2..>...>...>...>
  4096ec:	3eac7cd4 3eb263ef 3eb8442a 3ebe1d49     .|.>.c.>*D.>I..>
  4096fc:	3ec3ef15 3ec9b953 3ecf7bca 3ed53641     ...>S..>.{.>A6.>
  40970c:	3edae880 3ee0924f 3ee63375 3eebcbbb     ...>O..>u3.>...>
  40971c:	3ef15aea 3ef6e0cb 3efc5d27 3f00e7e4     .Z.>...>'].>...?
  40972c:	3f039c3d 3f064b82 3f08f59b 3f0b9a6b     =..?.K.?...?k..?
  40973c:	3f0e39da 3f10d3cd 3f13682a 3f15f6d9     .9.?...?*h.?...?
  40974c:	3f187fc0 3f1b02c6 3f1d7fd1 3f1ff6cb     ...?...?...?...?
  40975c:	3f226799 3f24d225 3f273656 3f299415     .g"?%.$?V6'?..)?
  40976c:	3f2beb4a 3f2e3bde 3f3085bb 3f32c8c9     J.+?.;.?..0?..2?
  40977c:	3f3504f3 3f373a23 3f396842 3f3b8f3b     ..5?#:7?Bh9?;.;?
  40978c:	3f3daef9 3f3fc767 3f41d870 3f43e201     ..=?g.??p.A?..C?
  40979c:	3f45e403 3f47de65 3f49d112 3f4bbbf8     ..E?e.G?..I?..K?
  4097ac:	3f4d9f02 3f4f7a20 3f514d3d 3f531849     ..M? zO?=MQ?I.S?
  4097bc:	3f54db31 3f5695e5 3f584853 3f59f26a     1.T?..V?SHX?j.Y?
  4097cc:	3f5b941a 3f5d2d53 3f5ebe05 3f604621     ..[?S-]?..^?!F`?
  4097dc:	3f61c597 3f633c5a 3f64aa59 3f660f88     ..a?Z<c?Y.d?..f?
  4097ec:	3f676bd8 3f68bf3c 3f6a09a7 3f6b4b0c     .kg?<.h?..j?.Kk?
  4097fc:	3f6c835e 3f6db293 3f6ed89e 3f6ff573     ^.l?..m?..n?s.o?
  40980c:	3f710908 3f721352 3f731447 3f740bdd     ..q?R.r?G.s?..t?
  40981c:	3f74fa0b 3f75dec6 3f76ba07 3f778bc5     ..t?..u?..v?..w?
  40982c:	3f7853f8 3f791298 3f79c79d 3f7a7302     .Sx?..y?..y?.sz?
  40983c:	3f7b14be 3f7baccd 3f7c3b28 3f7cbfc9     ..{?..{?(;|?..|?
  40984c:	3f7d3aac 3f7dabcc 3f7e1323 3f7e70b0     .:}?..}?#.~?.p~?
  40985c:	3f7ec46d 3f7f0e58 3f7f4e6d 3f7f84ab     m.~?X..?mN.?...?
  40986c:	3f7fb10f 3f7fd397 3f7fec43 3f7ffb11     ...?...?C..?...?
  40987c:	3f800000 3f7ffb11 3f7fec43 3f7fd397     ...?...?C..?...?
  40988c:	3f7fb10f 3f7f84ab 3f7f4e6d 3f7f0e58     ...?...?mN.?X..?
  40989c:	3f7ec46d 3f7e70b0 3f7e1323 3f7dabcc     m.~?.p~?#.~?..}?
  4098ac:	3f7d3aac 3f7cbfc9 3f7c3b28 3f7baccd     .:}?..|?(;|?..{?
  4098bc:	3f7b14be 3f7a7302 3f79c79d 3f791298     ..{?.sz?..y?..y?
  4098cc:	3f7853f8 3f778bc5 3f76ba07 3f75dec6     .Sx?..w?..v?..u?
  4098dc:	3f74fa0b 3f740bdd 3f731447 3f721352     ..t?..t?G.s?R.r?
  4098ec:	3f710908 3f6ff573 3f6ed89e 3f6db293     ..q?s.o?..n?..m?
  4098fc:	3f6c835e 3f6b4b0c 3f6a09a7 3f68bf3c     ^.l?.Kk?..j?<.h?
  40990c:	3f676bd8 3f660f88 3f64aa59 3f633c5a     .kg?..f?Y.d?Z<c?
  40991c:	3f61c597 3f604621 3f5ebe05 3f5d2d53     ..a?!F`?..^?S-]?
  40992c:	3f5b941a 3f59f26a 3f584853 3f5695e5     ..[?j.Y?SHX?..V?
  40993c:	3f54db31 3f531849 3f514d3d 3f4f7a20     1.T?I.S?=MQ? zO?
  40994c:	3f4d9f02 3f4bbbf8 3f49d112 3f47de65     ..M?..K?..I?e.G?
  40995c:	3f45e403 3f43e201 3f41d870 3f3fc767     ..E?..C?p.A?g.??
  40996c:	3f3daef9 3f3b8f3b 3f396842 3f373a23     ..=?;.;?Bh9?#:7?
  40997c:	3f3504f3 3f32c8c9 3f3085bb 3f2e3bde     ..5?..2?..0?.;.?
  40998c:	3f2beb4a 3f299415 3f273656 3f24d225     J.+?..)?V6'?%.$?
  40999c:	3f226799 3f1ff6cb 3f1d7fd1 3f1b02c6     .g"?...?...?...?
  4099ac:	3f187fc0 3f15f6d9 3f13682a 3f10d3cd     ...?...?*h.?...?
  4099bc:	3f0e39da 3f0b9a6b 3f08f59b 3f064b82     .9.?k..?...?.K.?
  4099cc:	3f039c3d 3f00e7e4 3efc5d27 3ef6e0cb     =..?...?'].>...>
  4099dc:	3ef15aea 3eebcbbb 3ee63375 3ee0924f     .Z.>...>u3.>O..>
  4099ec:	3edae880 3ed53641 3ecf7bca 3ec9b953     ...>A6.>.{.>S..>
  4099fc:	3ec3ef15 3ebe1d49 3eb8442a 3eb263ef     ...>I..>*D.>.c.>
  409a0c:	3eac7cd4 3ea68f12 3ea09ae5 3e9aa086     .|.>...>...>...>
  409a1c:	3e94a032 3e8e9a22 3e888e93 3e827dc0     2..>"..>...>.}.>
  409a2c:	3e78cfcc 3e6c9a7f 3e605c13 3e541501     ..x>..l>.\`>..T>
  409a3c:	3e47c5c2 3e3b6ecf 3e2f10a2 3e22abb5     ..G>.n;>../>..">
  409a4c:	3e164083 3e09cf87 3dfab273 3de1bc2f     .@.>...>s..=/..=
  409a5c:	3dc8bd36 3dafb680 3d96a904 3d7b2b75     6..=...=...=u+{=
  409a6c:	3d48fb2e 3d16c32b 3cc90ab1 3c490e92     ..H=+..=...<..I<
  409a7c:	00000000 bc490e92 bcc90ab1 bd16c32b     ......I.....+...
  409a8c:	bd48fb2e bd7b2b75 bd96a904 bdafb680     ..H.u+{.........
  409a9c:	bdc8bd36 bde1bc2f bdfab273 be09cf87     6.../...s.......
  409aac:	be164083 be22abb5 be2f10a2 be3b6ecf     .@....".../..n;.
  409abc:	be47c5c2 be541501 be605c13 be6c9a7f     ..G...T..\`...l.
  409acc:	be78cfcc be827dc0 be888e93 be8e9a22     ..x..}......"...
  409adc:	be94a032 be9aa086 bea09ae5 bea68f12     2...............
  409aec:	beac7cd4 beb263ef beb8442a bebe1d49     .|...c..*D..I...
  409afc:	bec3ef15 bec9b953 becf7bca bed53641     ....S....{..A6..
  409b0c:	bedae880 bee0924f bee63375 beebcbbb     ....O...u3......
  409b1c:	bef15aea bef6e0cb befc5d27 bf00e7e4     .Z......']......
  409b2c:	bf039c3d bf064b82 bf08f59b bf0b9a6b     =....K......k...
  409b3c:	bf0e39da bf10d3cd bf13682a bf15f6d9     .9......*h......
  409b4c:	bf187fc0 bf1b02c6 bf1d7fd1 bf1ff6cb     ................
  409b5c:	bf226799 bf24d225 bf273656 bf299415     .g".%.$.V6'...).
  409b6c:	bf2beb4a bf2e3bde bf3085bb bf32c8c9     J.+..;....0...2.
  409b7c:	bf3504f3 bf373a23 bf396842 bf3b8f3b     ..5.#:7.Bh9.;.;.
  409b8c:	bf3daef9 bf3fc767 bf41d870 bf43e201     ..=.g.?.p.A...C.
  409b9c:	bf45e403 bf47de65 bf49d112 bf4bbbf8     ..E.e.G...I...K.
  409bac:	bf4d9f02 bf4f7a20 bf514d3d bf531849     ..M. zO.=MQ.I.S.
  409bbc:	bf54db31 bf5695e5 bf584853 bf59f26a     1.T...V.SHX.j.Y.
  409bcc:	bf5b941a bf5d2d53 bf5ebe05 bf604621     ..[.S-]...^.!F`.
  409bdc:	bf61c597 bf633c5a bf64aa59 bf660f88     ..a.Z<c.Y.d...f.
  409bec:	bf676bd8 bf68bf3c bf6a09a7 bf6b4b0c     .kg.<.h...j..Kk.
  409bfc:	bf6c835e bf6db293 bf6ed89e bf6ff573     ^.l...m...n.s.o.
  409c0c:	bf710908 bf721352 bf731447 bf740bdd     ..q.R.r.G.s...t.
  409c1c:	bf74fa0b bf75dec6 bf76ba07 bf778bc5     ..t...u...v...w.
  409c2c:	bf7853f8 bf791298 bf79c79d bf7a7302     .Sx...y...y..sz.
  409c3c:	bf7b14be bf7baccd bf7c3b28 bf7cbfc9     ..{...{.(;|...|.
  409c4c:	bf7d3aac bf7dabcc bf7e1323 bf7e70b0     .:}...}.#.~..p~.
  409c5c:	bf7ec46d bf7f0e58 bf7f4e6d bf7f84ab     m.~.X...mN......
  409c6c:	bf7fb10f bf7fd397 bf7fec43 bf7ffb11     ........C.......
  409c7c:	bf800000 bf7ffb11 bf7fec43 bf7fd397     ........C.......
  409c8c:	bf7fb10f bf7f84ab bf7f4e6d bf7f0e58     ........mN..X...
  409c9c:	bf7ec46d bf7e70b0 bf7e1323 bf7dabcc     m.~..p~.#.~...}.
  409cac:	bf7d3aac bf7cbfc9 bf7c3b28 bf7baccd     .:}...|.(;|...{.
  409cbc:	bf7b14be bf7a7302 bf79c79d bf791298     ..{..sz...y...y.
  409ccc:	bf7853f8 bf778bc5 bf76ba07 bf75dec6     .Sx...w...v...u.
  409cdc:	bf74fa0b bf740bdd bf731447 bf721352     ..t...t.G.s.R.r.
  409cec:	bf710908 bf6ff573 bf6ed89e bf6db293     ..q.s.o...n...m.
  409cfc:	bf6c835e bf6b4b0c bf6a09a7 bf68bf3c     ^.l..Kk...j.<.h.
  409d0c:	bf676bd8 bf660f88 bf64aa59 bf633c5a     .kg...f.Y.d.Z<c.
  409d1c:	bf61c597 bf604621 bf5ebe05 bf5d2d53     ..a.!F`...^.S-].
  409d2c:	bf5b941a bf59f26a bf584853 bf5695e5     ..[.j.Y.SHX...V.
  409d3c:	bf54db31 bf531849 bf514d3d bf4f7a20     1.T.I.S.=MQ. zO.
  409d4c:	bf4d9f02 bf4bbbf8 bf49d112 bf47de65     ..M...K...I.e.G.
  409d5c:	bf45e403 bf43e201 bf41d870 bf3fc767     ..E...C.p.A.g.?.
  409d6c:	bf3daef9 bf3b8f3b bf396842 bf373a23     ..=.;.;.Bh9.#:7.
  409d7c:	bf3504f3 bf32c8c9 bf3085bb bf2e3bde     ..5...2...0..;..
  409d8c:	bf2beb4a bf299415 bf273656 bf24d225     J.+...).V6'.%.$.
  409d9c:	bf226799 bf1ff6cb bf1d7fd1 bf1b02c6     .g".............
  409dac:	bf187fc0 bf15f6d9 bf13682a bf10d3cd     ........*h......
  409dbc:	bf0e39da bf0b9a6b bf08f59b bf064b82     .9..k........K..
  409dcc:	bf039c3d bf00e7e4 befc5d27 bef6e0cb     =.......']......
  409ddc:	bef15aea beebcbbb bee63375 bee0924f     .Z......u3..O...
  409dec:	bedae880 bed53641 becf7bca bec9b953     ....A6...{..S...
  409dfc:	bec3ef15 bebe1d49 beb8442a beb263ef     ....I...*D...c..
  409e0c:	beac7cd4 bea68f12 bea09ae5 be9aa086     .|..............
  409e1c:	be94a032 be8e9a22 be888e93 be827dc0     2..."........}..
  409e2c:	be78cfcc be6c9a7f be605c13 be541501     ..x...l..\`...T.
  409e3c:	be47c5c2 be3b6ecf be2f10a2 be22abb5     ..G..n;.../...".
  409e4c:	be164083 be09cf87 bdfab273 bde1bc2f     .@......s.../...
  409e5c:	bdc8bd36 bdafb680 bd96a904 bd7b2b75     6...........u+{.
  409e6c:	bd48fb2e bd16c32b bcc90ab1 bc490e92     ..H.+.........I.
  409e7c:	80000000                                ....

00409e80 <_global_impure_ptr>:
  409e80:	20400060 33323130 37363534 42413938     `.@ 0123456789AB
  409e90:	46454443 00000000 33323130 37363534     CDEF....01234567
  409ea0:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  409eb0:	0000296c                                l)..

00409eb4 <blanks.8340>:
  409eb4:	20202020 20202020 20202020 20202020                     

00409ec4 <zeroes.8341>:
  409ec4:	30303030 30303030 30303030 30303030     0000000000000000
  409ed4:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00409ee4 <_ctype_>:
  409ee4:	20202000 20202020 28282020 20282828     .         ((((( 
  409ef4:	20202020 20202020 20202020 20202020                     
  409f04:	10108820 10101010 10101010 10101010      ...............
  409f14:	04040410 04040404 10040404 10101010     ................
  409f24:	41411010 41414141 01010101 01010101     ..AAAAAA........
  409f34:	01010101 01010101 01010101 10101010     ................
  409f44:	42421010 42424242 02020202 02020202     ..BBBBBB........
  409f54:	02020202 02020202 02020202 10101010     ................
  409f64:	00000020 00000000 00000000 00000000      ...............
	...

00409fe8 <_init>:
  409fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409fea:	bf00      	nop
  409fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409fee:	bc08      	pop	{r3}
  409ff0:	469e      	mov	lr, r3
  409ff2:	4770      	bx	lr

00409ff4 <__init_array_start>:
  409ff4:	00407d39 	.word	0x00407d39

00409ff8 <__frame_dummy_init_array_entry>:
  409ff8:	00400165                                e.@.

00409ffc <_fini>:
  409ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409ffe:	bf00      	nop
  40a000:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40a002:	bc08      	pop	{r3}
  40a004:	469e      	mov	lr, r3
  40a006:	4770      	bx	lr

0040a008 <__fini_array_start>:
  40a008:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <inBuffer>:
2040000c:	f400 2043                                   ..C 

20400010 <inPingMode>:
20400010:	0001 0000                                   ....

20400014 <outBuffer>:
20400014:	dc00 2043                                   ..C 

20400018 <outPingMode>:
20400018:	0001 0000                                   ....

2040001c <processBuffer>:
2040001c:	cc00 2043                                   ..C 

20400020 <pitchtracker>:
20400020:	0000 bf80 ffff ffff                         ........

20400028 <g_interrupt_enabled>:
20400028:	0001 0000                                   ....

2040002c <SystemCoreClock>:
2040002c:	0900 003d                                   ..=.

20400030 <uxCriticalNesting>:
20400030:	aaaa aaaa                                   ....

20400034 <xISRTestStatus>:
20400034:	0001 0000                                   ....

20400038 <uxTick.9777>:
20400038:	ffff ffff                                   ....

2040003c <xTestStatus>:
2040003c:	0001 0000                                   ....

20400040 <autotune>:
20400040:	0001 0000                                   ....

20400044 <harm_volume>:
20400044:	0000 3f80                                   ...?

20400048 <harmony_list_fill>:
20400048:	fc1c 2043                                   ..C 

2040004c <harmony_list_read>:
2040004c:	fc7c 2043                                   |.C 

20400050 <master_volume>:
20400050:	0000 3f80                                   ...?

20400054 <pitch_bend>:
20400054:	0040 0000                                   @...

20400058 <_impure_ptr>:
20400058:	0060 2040 0000 0000                         `.@ ....

20400060 <impure_data>:
20400060:	0000 0000 034c 2040 03b4 2040 041c 2040     ....L.@ ..@ ..@ 
	...
20400108:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400118:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400488 <__malloc_av_>:
	...
20400490:	0488 2040 0488 2040 0490 2040 0490 2040     ..@ ..@ ..@ ..@ 
204004a0:	0498 2040 0498 2040 04a0 2040 04a0 2040     ..@ ..@ ..@ ..@ 
204004b0:	04a8 2040 04a8 2040 04b0 2040 04b0 2040     ..@ ..@ ..@ ..@ 
204004c0:	04b8 2040 04b8 2040 04c0 2040 04c0 2040     ..@ ..@ ..@ ..@ 
204004d0:	04c8 2040 04c8 2040 04d0 2040 04d0 2040     ..@ ..@ ..@ ..@ 
204004e0:	04d8 2040 04d8 2040 04e0 2040 04e0 2040     ..@ ..@ ..@ ..@ 
204004f0:	04e8 2040 04e8 2040 04f0 2040 04f0 2040     ..@ ..@ ..@ ..@ 
20400500:	04f8 2040 04f8 2040 0500 2040 0500 2040     ..@ ..@ ..@ ..@ 
20400510:	0508 2040 0508 2040 0510 2040 0510 2040     ..@ ..@ ..@ ..@ 
20400520:	0518 2040 0518 2040 0520 2040 0520 2040     ..@ ..@  .@  .@ 
20400530:	0528 2040 0528 2040 0530 2040 0530 2040     (.@ (.@ 0.@ 0.@ 
20400540:	0538 2040 0538 2040 0540 2040 0540 2040     8.@ 8.@ @.@ @.@ 
20400550:	0548 2040 0548 2040 0550 2040 0550 2040     H.@ H.@ P.@ P.@ 
20400560:	0558 2040 0558 2040 0560 2040 0560 2040     X.@ X.@ `.@ `.@ 
20400570:	0568 2040 0568 2040 0570 2040 0570 2040     h.@ h.@ p.@ p.@ 
20400580:	0578 2040 0578 2040 0580 2040 0580 2040     x.@ x.@ ..@ ..@ 
20400590:	0588 2040 0588 2040 0590 2040 0590 2040     ..@ ..@ ..@ ..@ 
204005a0:	0598 2040 0598 2040 05a0 2040 05a0 2040     ..@ ..@ ..@ ..@ 
204005b0:	05a8 2040 05a8 2040 05b0 2040 05b0 2040     ..@ ..@ ..@ ..@ 
204005c0:	05b8 2040 05b8 2040 05c0 2040 05c0 2040     ..@ ..@ ..@ ..@ 
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 
20400870:	0868 2040 0868 2040 0870 2040 0870 2040     h.@ h.@ p.@ p.@ 
20400880:	0878 2040 0878 2040 0880 2040 0880 2040     x.@ x.@ ..@ ..@ 

20400890 <__malloc_sbrk_base>:
20400890:	ffff ffff                                   ....

20400894 <__malloc_trim_threshold>:
20400894:	0000 0002                                   ....

20400898 <__atexit_recursive_mutex>:
20400898:	fcd4 2043                                   ..C 

2040089c <__global_locale>:
2040089c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008bc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040091c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040093c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040095c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040097c:	8e31 0040 87c1 0040 0000 0000 9ee4 0040     1.@...@.......@.
2040098c:	9ee0 0040 9e94 0040 9e94 0040 9e94 0040     ..@...@...@...@.
2040099c:	9e94 0040 9e94 0040 9e94 0040 9e94 0040     ..@...@...@...@.
204009ac:	9e94 0040 9e94 0040 ffff ffff ffff ffff     ..@...@.........
204009bc:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009e4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
