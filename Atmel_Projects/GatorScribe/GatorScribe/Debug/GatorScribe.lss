
GatorScribe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000082f8  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004082f8  004082f8  000182f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009f8  20400000  00408300  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0003b4b8  20404000  00410000  00024000  2**14
                  ALLOC
  4 .stack        00002000  2043f4b8  0044b4b8  00024000  2**0
                  ALLOC
  5 .heap         00000200  204414b8  0044d4b8  00024000  2**0
                  ALLOC
  6 .ARM.attributes 0000002c  00000000  00000000  000209f8  2**0
                  CONTENTS, READONLY
  7 .comment      000000b4  00000000  00000000  00020a24  2**0
                  CONTENTS, READONLY
  8 .debug_info   00020e13  00000000  00000000  00020ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004c1e  00000000  00000000  000418eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000ac51  00000000  00000000  00046509  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d10  00000000  00000000  0005115a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000021e8  00000000  00000000  00051e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00025d7e  00000000  00000000  00054052  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001506e  00000000  00000000  00079dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009d592  00000000  00000000  0008ee3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002cc0  00000000  00000000  0012c3d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	b8 14 44 20 19 23 40 00 11 23 40 00 15 23 40 00     ..D .#@..#@..#@.
  400010:	11 23 40 00 11 23 40 00 11 23 40 00 00 00 00 00     .#@..#@..#@.....
	...
  40002c:	11 23 40 00 11 23 40 00 00 00 00 00 11 23 40 00     .#@..#@......#@.
  40003c:	11 23 40 00 11 23 40 00 11 23 40 00 11 23 40 00     .#@..#@..#@..#@.
  40004c:	11 23 40 00 11 23 40 00 11 23 40 00 11 23 40 00     .#@..#@..#@..#@.
  40005c:	11 23 40 00 11 23 40 00 00 00 00 00 51 1d 40 00     .#@..#@.....Q.@.
  40006c:	1d 1e 40 00 e9 1e 40 00 11 23 40 00 a5 25 40 00     ..@...@..#@..%@.
  40007c:	11 23 40 00 b5 1f 40 00 81 20 40 00 11 23 40 00     .#@...@.. @..#@.
  40008c:	11 23 40 00 11 23 40 00 11 23 40 00 11 23 40 00     .#@..#@..#@..#@.
  40009c:	11 23 40 00 11 23 40 00 11 23 40 00 11 23 40 00     .#@..#@..#@..#@.
  4000ac:	11 23 40 00 11 23 40 00 11 23 40 00 11 23 40 00     .#@..#@..#@..#@.
  4000bc:	11 23 40 00 11 23 40 00 11 23 40 00 11 23 40 00     .#@..#@..#@..#@.
  4000cc:	11 23 40 00 00 00 00 00 11 23 40 00 00 00 00 00     .#@......#@.....
  4000dc:	11 23 40 00 11 23 40 00 11 23 40 00 11 23 40 00     .#@..#@..#@..#@.
  4000ec:	11 23 40 00 11 23 40 00 11 23 40 00 11 23 40 00     .#@..#@..#@..#@.
  4000fc:	11 23 40 00 11 23 40 00 11 23 40 00 11 23 40 00     .#@..#@..#@..#@.
  40010c:	11 23 40 00 11 23 40 00 11 23 40 00 00 00 00 00     .#@..#@..#@.....
  40011c:	00 00 00 00 11 23 40 00 11 23 40 00 ad 01 40 00     .....#@..#@...@.
  40012c:	11 23 40 00 11 23 40 00 00 00 00 00 11 23 40 00     .#@..#@......#@.
  40013c:	11 23 40 00                                         .#@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20404000 	.word	0x20404000
  40015c:	00000000 	.word	0x00000000
  400160:	00408300 	.word	0x00408300

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00408300 	.word	0x00408300
  4001a0:	20404004 	.word	0x20404004
  4001a4:	00408300 	.word	0x00408300
  4001a8:	00000000 	.word	0x00000000

004001ac <XDMAC_Handler>:
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4001ac:	4b1d      	ldr	r3, [pc, #116]	; (400224 <XDMAC_Handler+0x78>)
/********************************** Public Variables End **********************************/

#define One_over_max_int16 0.0000305185f 
/******************************* XDMAC Interrupt Handler Start *******************************/ 
void XDMAC_Handler(void)
{
  4001ae:	b470      	push	{r4, r5, r6}
  4001b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    uint32_t dma_status;
    
    dma_status = xdmac_channel_get_interrupt_status(XDMAC, XDMA_CH_SSC_RX);
    if (dma_status & XDMAC_CIS_BIS)
  4001b2:	07da      	lsls	r2, r3, #31
  4001b4:	d522      	bpl.n	4001fc <XDMAC_Handler+0x50>
    {
		// update input buffer to be used 
		if(inPingMode)
  4001b6:	4c1c      	ldr	r4, [pc, #112]	; (400228 <XDMAC_Handler+0x7c>)
		{
			inBuffer = inPingBuffer; 
		}
		else 
		{
			inBuffer = inPongBuffer; 
  4001b8:	4a1c      	ldr	r2, [pc, #112]	; (40022c <XDMAC_Handler+0x80>)
		if(inPingMode)
  4001ba:	7821      	ldrb	r1, [r4, #0]
			inBuffer = inPongBuffer; 
  4001bc:	4b1c      	ldr	r3, [pc, #112]	; (400230 <XDMAC_Handler+0x84>)
		}
		inPingMode = !inPingMode; 
  4001be:	7825      	ldrb	r5, [r4, #0]
			inBuffer = inPongBuffer; 
  4001c0:	2900      	cmp	r1, #0
  4001c2:	bf08      	it	eq
  4001c4:	4613      	moveq	r3, r2
  4001c6:	4a1b      	ldr	r2, [pc, #108]	; (400234 <XDMAC_Handler+0x88>)
		inPingMode = !inPingMode; 
  4001c8:	f085 0501 	eor.w	r5, r5, #1
  4001cc:	4e1a      	ldr	r6, [pc, #104]	; (400238 <XDMAC_Handler+0x8c>)
  4001ce:	4619      	mov	r1, r3
  4001d0:	f502 6000 	add.w	r0, r2, #2048	; 0x800
		
		// fill process buffer - only left channel 
		uint32_t processIdx = 0; 
		for(uint32_t i = 0; i < IO_BUF_SIZE; i+=2, processIdx++)
		{
			processBuffer[processIdx] = ((float )(int16_t)inBuffer[i]) * One_over_max_int16; 
  4001d4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 40023c <XDMAC_Handler+0x90>
		inPingMode = !inPingMode; 
  4001d8:	7025      	strb	r5, [r4, #0]
  4001da:	6033      	str	r3, [r6, #0]
			processBuffer[processIdx] = ((float )(int16_t)inBuffer[i]) * One_over_max_int16; 
  4001dc:	f831 3b04 	ldrh.w	r3, [r1], #4
  4001e0:	b21b      	sxth	r3, r3
  4001e2:	ee07 3a90 	vmov	s15, r3
  4001e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4001ea:	ee67 7a87 	vmul.f32	s15, s15, s14
  4001ee:	ece2 7a01 	vstmia	r2!, {s15}
		for(uint32_t i = 0; i < IO_BUF_SIZE; i+=2, processIdx++)
  4001f2:	4282      	cmp	r2, r0
  4001f4:	d1f2      	bne.n	4001dc <XDMAC_Handler+0x30>
		}
		
		// data is ready to be processed in the main 
		dataReceived = true; 
  4001f6:	4b12      	ldr	r3, [pc, #72]	; (400240 <XDMAC_Handler+0x94>)
  4001f8:	2201      	movs	r2, #1
  4001fa:	701a      	strb	r2, [r3, #0]
  4001fc:	4b09      	ldr	r3, [pc, #36]	; (400224 <XDMAC_Handler+0x78>)
  4001fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    }
	
	dma_status = xdmac_channel_get_interrupt_status(XDMAC, XDMA_CH_SSC_TX);
	if (dma_status & XDMAC_CIS_BIS)
  400202:	07db      	lsls	r3, r3, #31
  400204:	d50c      	bpl.n	400220 <XDMAC_Handler+0x74>
	{
		// update output buffer to be used 
		if(outPingMode)
  400206:	4b0f      	ldr	r3, [pc, #60]	; (400244 <XDMAC_Handler+0x98>)
		{   
			sound_out = outPingBuffer; 
		}
		else
		{
			sound_out = outPongBuffer; 
  400208:	480f      	ldr	r0, [pc, #60]	; (400248 <XDMAC_Handler+0x9c>)
		if(outPingMode)
  40020a:	781c      	ldrb	r4, [r3, #0]
			sound_out = outPongBuffer; 
  40020c:	490f      	ldr	r1, [pc, #60]	; (40024c <XDMAC_Handler+0xa0>)
		}
		outPingMode = !outPingMode; 
  40020e:	781a      	ldrb	r2, [r3, #0]
			sound_out = outPongBuffer; 
  400210:	2c00      	cmp	r4, #0
  400212:	bf08      	it	eq
  400214:	4601      	moveq	r1, r0
  400216:	480e      	ldr	r0, [pc, #56]	; (400250 <XDMAC_Handler+0xa4>)
		outPingMode = !outPingMode; 
  400218:	f082 0201 	eor.w	r2, r2, #1
  40021c:	6001      	str	r1, [r0, #0]
  40021e:	701a      	strb	r2, [r3, #0]
	}
}
  400220:	bc70      	pop	{r4, r5, r6}
  400222:	4770      	bx	lr
  400224:	40078000 	.word	0x40078000
  400228:	20400010 	.word	0x20400010
  40022c:	2043cc00 	.word	0x2043cc00
  400230:	2043ec00 	.word	0x2043ec00
  400234:	2043d400 	.word	0x2043d400
  400238:	2040000c 	.word	0x2040000c
  40023c:	380000fd 	.word	0x380000fd
  400240:	2040401c 	.word	0x2040401c
  400244:	20400011 	.word	0x20400011
  400248:	2043e400 	.word	0x2043e400
  40024c:	2043dc00 	.word	0x2043dc00
  400250:	20400014 	.word	0x20400014

00400254 <configure_xdma>:
/******************************* XDMAC Interrupt Handler End *******************************/

/********************************** Public Functions Start **********************************/
void configure_xdma(void)
{
  400254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint16_t *src;
    
    xdmac_channel_config_t xdmac_channel_cfg = {0};
  400258:	2620      	movs	r6, #32
{
  40025a:	b088      	sub	sp, #32
    xdmac_channel_config_t xdmac_channel_cfg = {0};
  40025c:	2100      	movs	r1, #0
  40025e:	4b30      	ldr	r3, [pc, #192]	; (400320 <configure_xdma+0xcc>)
  400260:	4632      	mov	r2, r6
  400262:	4668      	mov	r0, sp
  400264:	4798      	blx	r3
    
    /* Initialize and enable DMA controller */
    pmc_enable_periph_clk(ID_XDMAC);
  400266:	4b2f      	ldr	r3, [pc, #188]	; (400324 <configure_xdma+0xd0>)
  400268:	203a      	movs	r0, #58	; 0x3a
    | XDMAC_CC_DIF_AHB_IF0
    | XDMAC_CC_SAM_FIXED_AM
    | XDMAC_CC_DAM_INCREMENTED_AM
    | XDMAC_CC_PERID(33);
	
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  40026a:	4c2f      	ldr	r4, [pc, #188]	; (400328 <configure_xdma+0xd4>)
    pmc_enable_periph_clk(ID_XDMAC);
  40026c:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40026e:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
  400272:	4b2e      	ldr	r3, [pc, #184]	; (40032c <configure_xdma+0xd8>)
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  400274:	466a      	mov	r2, sp
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  400276:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 400340 <configure_xdma+0xec>
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  40027a:	4620      	mov	r0, r4
  40027c:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
  400280:	2100      	movs	r1, #0
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400282:	f883 633a 	strb.w	r6, [r3, #826]	; 0x33a
 */
static inline void xdmac_channel_set_descriptor_control(Xdmac *xdmac, uint32_t channel_num, uint32_t config)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  400286:	270f      	movs	r7, #15
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400288:	605d      	str	r5, [r3, #4]
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  40028a:	2501      	movs	r5, #1
  40028c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 400344 <configure_xdma+0xf0>
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  400290:	f8cd e00c 	str.w	lr, [sp, #12]
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  400294:	47c0      	blx	r8
    
    /* Initialize linked list descriptor */
    src = (uint16_t *)&inPingBuffer[0];
    linklist_read[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  400296:	4b26      	ldr	r3, [pc, #152]	; (400330 <configure_xdma+0xdc>)
    | XDMAC_CC_DIF_AHB_IF1
    | XDMAC_CC_SAM_INCREMENTED_AM
    | XDMAC_CC_DAM_FIXED_AM
    | XDMAC_CC_PERID(32);
	
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  400298:	466a      	mov	r2, sp
    linklist_read[0].mbr_da = (uint32_t)(src);
  40029a:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 400348 <configure_xdma+0xf4>
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  40029e:	4629      	mov	r1, r5
    linklist_read[0].mbr_nda = (uint32_t)&linklist_read[1];
  4002a0:	f103 0010 	add.w	r0, r3, #16
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  4002a4:	f023 0603 	bic.w	r6, r3, #3
	linklist_read[1].mbr_da = (uint32_t)(src);
  4002a8:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 40034c <configure_xdma+0xf8>
    linklist_read[0].mbr_nda = (uint32_t)&linklist_read[1];
  4002ac:	6018      	str	r0, [r3, #0]
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  4002ae:	4620      	mov	r0, r4
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  4002b0:	66e7      	str	r7, [r4, #108]	; 0x6c
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  4002b2:	66a6      	str	r6, [r4, #104]	; 0x68
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  4002b4:	60e5      	str	r5, [r4, #12]
    linklist_read[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002b6:	4e1f      	ldr	r6, [pc, #124]	; (400334 <configure_xdma+0xe0>)
	xdmac->XDMAC_CHID[channel_num].XDMAC_CIE = mask;
  4002b8:	6525      	str	r5, [r4, #80]	; 0x50
    linklist_read[0].mbr_da = (uint32_t)(src);
  4002ba:	f8c3 e00c 	str.w	lr, [r3, #12]
    linklist_read[0].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  4002be:	f8df e090 	ldr.w	lr, [pc, #144]	; 400350 <configure_xdma+0xfc>
	linklist_read[1].mbr_da = (uint32_t)(src);
  4002c2:	f8c3 c01c 	str.w	ip, [r3, #28]
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4002c6:	f8df c08c 	ldr.w	ip, [pc, #140]	; 400354 <configure_xdma+0x100>
    linklist_read[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002ca:	605e      	str	r6, [r3, #4]
	linklist_read[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002cc:	615e      	str	r6, [r3, #20]
    linklist_read[0].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  4002ce:	f8c3 e008 	str.w	lr, [r3, #8]
	linklist_read[1].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  4002d2:	f8c3 e018 	str.w	lr, [r3, #24]
	linklist_read[1].mbr_nda = (uint32_t)&linklist_read[0];
  4002d6:	611b      	str	r3, [r3, #16]
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4002d8:	f8cd c00c 	str.w	ip, [sp, #12]
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  4002dc:	47c0      	blx	r8
    
    src = (uint16_t *)&outPingBuffer[0];
    linklist_write[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002de:	4b16      	ldr	r3, [pc, #88]	; (400338 <configure_xdma+0xe4>)
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  4002e0:	2102      	movs	r1, #2
		 | XDMAC_UBC_NDE_FETCH_EN
		 | XDMAC_UBC_NSEN_UPDATED
			| XDMAC_CUBC_UBLEN(IO_BUF_SIZE);
    linklist_write[0].mbr_sa = (uint32_t)(src);
    linklist_write[0].mbr_da = (uint32_t)&(SSC->SSC_THR);
  4002e2:	4a16      	ldr	r2, [pc, #88]	; (40033c <configure_xdma+0xe8>)
    linklist_write[0].mbr_sa = (uint32_t)(src);
  4002e4:	f8df c070 	ldr.w	ip, [pc, #112]	; 400358 <configure_xdma+0x104>
    linklist_write[0].mbr_nda = (uint32_t)&linklist_write[1];
  4002e8:	f103 0810 	add.w	r8, r3, #16
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  4002ec:	f023 0003 	bic.w	r0, r3, #3
	src = (uint16_t *)&outPongBuffer[0];
	linklist_write[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
	    | XDMAC_UBC_NDE_FETCH_EN
	    | XDMAC_UBC_NSEN_UPDATED
	    | XDMAC_CUBC_UBLEN(IO_BUF_SIZE);
	linklist_write[1].mbr_sa = (uint32_t)(src);
  4002f0:	f8df e068 	ldr.w	lr, [pc, #104]	; 40035c <configure_xdma+0x108>
    linklist_write[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002f4:	605e      	str	r6, [r3, #4]
	linklist_write[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002f6:	615e      	str	r6, [r3, #20]
	linklist_write[1].mbr_da = (uint32_t)&(SSC->SSC_THR);
	linklist_write[1].mbr_nda = (uint32_t)&linklist_write[0];
  4002f8:	611b      	str	r3, [r3, #16]
    linklist_write[0].mbr_nda = (uint32_t)&linklist_write[1];
  4002fa:	f8c3 8000 	str.w	r8, [r3]
    linklist_write[0].mbr_sa = (uint32_t)(src);
  4002fe:	f8c3 c008 	str.w	ip, [r3, #8]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  400302:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
	linklist_write[1].mbr_sa = (uint32_t)(src);
  400306:	f8c3 e018 	str.w	lr, [r3, #24]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  40030a:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
    linklist_write[0].mbr_da = (uint32_t)&(SSC->SSC_THR);
  40030e:	60da      	str	r2, [r3, #12]
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  400310:	60e1      	str	r1, [r4, #12]
	linklist_write[1].mbr_da = (uint32_t)&(SSC->SSC_THR);
  400312:	61da      	str	r2, [r3, #28]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CIE = mask;
  400314:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
    xdmac_channel_set_descriptor_addr(XDMAC, XDMA_CH_SSC_TX, (uint32_t)(&linklist_write[0]), 0);
    
    xdmac_enable_interrupt(XDMAC, XDMA_CH_SSC_TX);
    xdmac_channel_enable_interrupt(XDMAC, XDMA_CH_SSC_TX, XDMAC_CIE_BIE);
    
}
  400318:	b008      	add	sp, #32
  40031a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40031e:	bf00      	nop
  400320:	0040503d 	.word	0x0040503d
  400324:	0040224d 	.word	0x0040224d
  400328:	40078000 	.word	0x40078000
  40032c:	e000e100 	.word	0xe000e100
  400330:	20404020 	.word	0x20404020
  400334:	0b000400 	.word	0x0b000400
  400338:	20404040 	.word	0x20404040
  40033c:	40004024 	.word	0x40004024
  400340:	21042801 	.word	0x21042801
  400344:	004016c9 	.word	0x004016c9
  400348:	2043ec00 	.word	0x2043ec00
  40034c:	2043cc00 	.word	0x2043cc00
  400350:	40004020 	.word	0x40004020
  400354:	20014811 	.word	0x20014811
  400358:	2043dc00 	.word	0x2043dc00
  40035c:	2043e400 	.word	0x2043e400

00400360 <audio_init>:
#include "DMA_Audio.h"
#include "WM8904_Driver.h"
#include "ASF/sam/utils/cmsis/samv71/include/component/supc.h"

void audio_init(void)
{
  400360:	b510      	push	{r4, lr}
	/* Initialize WM8904 TWI interface*/
	if (wm8904_twi_init() != TWIHS_SUCCESS) {
  400362:	4b13      	ldr	r3, [pc, #76]	; (4003b0 <audio_init+0x50>)
  400364:	4798      	blx	r3
  400366:	b118      	cbz	r0, 400370 <audio_init+0x10>
		printf("-E-\tWM8904 initialization failed.\r");
  400368:	4812      	ldr	r0, [pc, #72]	; (4003b4 <audio_init+0x54>)
  40036a:	4b13      	ldr	r3, [pc, #76]	; (4003b8 <audio_init+0x58>)
  40036c:	4798      	blx	r3
  40036e:	e7fe      	b.n	40036e <audio_init+0xe>
			/* Capture error */
		}
	}
		
	/* Configure CODEC */
	configure_codec();
  400370:	4b12      	ldr	r3, [pc, #72]	; (4003bc <audio_init+0x5c>)
  400372:	4604      	mov	r4, r0
  400374:	4798      	blx	r3
		
	/* Configure SSC */
	configure_ssc();
  400376:	4b12      	ldr	r3, [pc, #72]	; (4003c0 <audio_init+0x60>)
  400378:	4798      	blx	r3
		
	/* Configure XDMA */
	configure_xdma();
  40037a:	4b12      	ldr	r3, [pc, #72]	; (4003c4 <audio_init+0x64>)
  40037c:	4798      	blx	r3
		
	/* Enable the DAC master clock (MCLK) */
	pmc_pck_set_prescaler(PMC_PCK_2, PMC_MCKR_PRES_CLK_1);
  40037e:	4621      	mov	r1, r4
  400380:	2002      	movs	r0, #2
  400382:	4b11      	ldr	r3, [pc, #68]	; (4003c8 <audio_init+0x68>)
  400384:	4798      	blx	r3
	pmc_pck_set_source(PMC_PCK_2, PMC_MCKR_CSS_SLOW_CLK);
  400386:	4621      	mov	r1, r4
  400388:	2002      	movs	r0, #2
  40038a:	4b10      	ldr	r3, [pc, #64]	; (4003cc <audio_init+0x6c>)
  40038c:	4798      	blx	r3
	pmc_enable_pck(PMC_PCK_2);
  40038e:	2002      	movs	r0, #2
  400390:	4b0f      	ldr	r3, [pc, #60]	; (4003d0 <audio_init+0x70>)
  400392:	4798      	blx	r3
		
	/* Start playing */
	ssc_enable_rx(SSC);
  400394:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400398:	4b0e      	ldr	r3, [pc, #56]	; (4003d4 <audio_init+0x74>)
  40039a:	4798      	blx	r3
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  40039c:	4c0e      	ldr	r4, [pc, #56]	; (4003d8 <audio_init+0x78>)
  40039e:	2201      	movs	r2, #1
	xdmac_channel_enable(XDMAC, XDMA_CH_SSC_RX);
	// might want to enable in the first xdma interrupt (if you care)
	ssc_enable_tx(SSC);
  4003a0:	4b0e      	ldr	r3, [pc, #56]	; (4003dc <audio_init+0x7c>)
  4003a2:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4003a6:	61e2      	str	r2, [r4, #28]
  4003a8:	4798      	blx	r3
  4003aa:	2302      	movs	r3, #2
  4003ac:	61e3      	str	r3, [r4, #28]
  4003ae:	bd10      	pop	{r4, pc}
  4003b0:	00401231 	.word	0x00401231
  4003b4:	00407708 	.word	0x00407708
  4003b8:	00404971 	.word	0x00404971
  4003bc:	004004a5 	.word	0x004004a5
  4003c0:	004003e1 	.word	0x004003e1
  4003c4:	00400255 	.word	0x00400255
  4003c8:	00402295 	.word	0x00402295
  4003cc:	004022c9 	.word	0x004022c9
  4003d0:	004022fd 	.word	0x004022fd
  4003d4:	004012bd 	.word	0x004012bd
  4003d8:	40078000 	.word	0x40078000
  4003dc:	004012cd 	.word	0x004012cd

004003e0 <configure_ssc>:
  4003e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4003e4:	4b28      	ldr	r3, [pc, #160]	; (400488 <configure_ssc+0xa8>)
  4003e6:	b09c      	sub	sp, #112	; 0x70
  4003e8:	2016      	movs	r0, #22
  4003ea:	2400      	movs	r4, #0
  4003ec:	4798      	blx	r3
  4003ee:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4003f2:	4b26      	ldr	r3, [pc, #152]	; (40048c <configure_ssc+0xac>)
  4003f4:	250f      	movs	r5, #15
  4003f6:	4798      	blx	r3
  4003f8:	2601      	movs	r6, #1
  4003fa:	f44f 68e0 	mov.w	r8, #1792	; 0x700
  4003fe:	f04f 0e02 	mov.w	lr, #2
  400402:	2780      	movs	r7, #128	; 0x80
  400404:	aa0e      	add	r2, sp, #56	; 0x38
  400406:	4669      	mov	r1, sp
  400408:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40040c:	4b20      	ldr	r3, [pc, #128]	; (400490 <configure_ssc+0xb0>)
  40040e:	f8cd e000 	str.w	lr, [sp]
  400412:	9401      	str	r4, [sp, #4]
  400414:	9402      	str	r4, [sp, #8]
  400416:	9403      	str	r4, [sp, #12]
  400418:	9410      	str	r4, [sp, #64]	; 0x40
  40041a:	9412      	str	r4, [sp, #72]	; 0x48
  40041c:	9413      	str	r4, [sp, #76]	; 0x4c
  40041e:	9414      	str	r4, [sp, #80]	; 0x50
  400420:	f8cd 8018 	str.w	r8, [sp, #24]
  400424:	9605      	str	r6, [sp, #20]
  400426:	9504      	str	r5, [sp, #16]
  400428:	950e      	str	r5, [sp, #56]	; 0x38
  40042a:	9511      	str	r5, [sp, #68]	; 0x44
  40042c:	970f      	str	r7, [sp, #60]	; 0x3c
  40042e:	4798      	blx	r3
  400430:	f04f 0c20 	mov.w	ip, #32
  400434:	f04f 0e10 	mov.w	lr, #16
  400438:	aa15      	add	r2, sp, #84	; 0x54
  40043a:	a907      	add	r1, sp, #28
  40043c:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400440:	4b14      	ldr	r3, [pc, #80]	; (400494 <configure_ssc+0xb4>)
  400442:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  400446:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
  40044a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  40044e:	9607      	str	r6, [sp, #28]
  400450:	9408      	str	r4, [sp, #32]
  400452:	940a      	str	r4, [sp, #40]	; 0x28
  400454:	960c      	str	r6, [sp, #48]	; 0x30
  400456:	9515      	str	r5, [sp, #84]	; 0x54
  400458:	9716      	str	r7, [sp, #88]	; 0x58
  40045a:	9417      	str	r4, [sp, #92]	; 0x5c
  40045c:	9518      	str	r5, [sp, #96]	; 0x60
  40045e:	9419      	str	r4, [sp, #100]	; 0x64
  400460:	941a      	str	r4, [sp, #104]	; 0x68
  400462:	941b      	str	r4, [sp, #108]	; 0x6c
  400464:	4798      	blx	r3
  400466:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40046a:	4b0b      	ldr	r3, [pc, #44]	; (400498 <configure_ssc+0xb8>)
  40046c:	4798      	blx	r3
  40046e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400472:	4b0a      	ldr	r3, [pc, #40]	; (40049c <configure_ssc+0xbc>)
  400474:	4798      	blx	r3
  400476:	f04f 31ff 	mov.w	r1, #4294967295
  40047a:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40047e:	4b08      	ldr	r3, [pc, #32]	; (4004a0 <configure_ssc+0xc0>)
  400480:	4798      	blx	r3
  400482:	b01c      	add	sp, #112	; 0x70
  400484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400488:	0040224d 	.word	0x0040224d
  40048c:	004012a9 	.word	0x004012a9
  400490:	00401351 	.word	0x00401351
  400494:	004012dd 	.word	0x004012dd
  400498:	004012d5 	.word	0x004012d5
  40049c:	004012c5 	.word	0x004012c5
  4004a0:	004013c5 	.word	0x004013c5

004004a4 <configure_codec>:
  4004a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4004a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
  4004ac:	4c3f      	ldr	r4, [pc, #252]	; (4005ac <configure_codec+0x108>)
  4004ae:	2000      	movs	r0, #0
  4004b0:	4e3f      	ldr	r6, [pc, #252]	; (4005b0 <configure_codec+0x10c>)
  4004b2:	47a0      	blx	r4
  4004b4:	4b3f      	ldr	r3, [pc, #252]	; (4005b4 <configure_codec+0x110>)
  4004b6:	2000      	movs	r0, #0
  4004b8:	4d3f      	ldr	r5, [pc, #252]	; (4005b8 <configure_codec+0x114>)
  4004ba:	4798      	blx	r3
  4004bc:	2108      	movs	r1, #8
  4004be:	2004      	movs	r0, #4
  4004c0:	4f3e      	ldr	r7, [pc, #248]	; (4005bc <configure_codec+0x118>)
  4004c2:	47a0      	blx	r4
  4004c4:	2147      	movs	r1, #71	; 0x47
  4004c6:	2005      	movs	r0, #5
  4004c8:	47a0      	blx	r4
  4004ca:	4630      	mov	r0, r6
  4004cc:	47a8      	blx	r5
  4004ce:	2143      	movs	r1, #67	; 0x43
  4004d0:	2005      	movs	r0, #5
  4004d2:	47a0      	blx	r4
  4004d4:	2109      	movs	r1, #9
  4004d6:	2004      	movs	r0, #4
  4004d8:	47a0      	blx	r4
  4004da:	2103      	movs	r1, #3
  4004dc:	200c      	movs	r0, #12
  4004de:	47a0      	blx	r4
  4004e0:	2103      	movs	r1, #3
  4004e2:	200e      	movs	r0, #14
  4004e4:	47a0      	blx	r4
  4004e6:	2100      	movs	r1, #0
  4004e8:	2021      	movs	r0, #33	; 0x21
  4004ea:	47a0      	blx	r4
  4004ec:	2100      	movs	r1, #0
  4004ee:	203d      	movs	r0, #61	; 0x3d
  4004f0:	47a0      	blx	r4
  4004f2:	2101      	movs	r1, #1
  4004f4:	2062      	movs	r0, #98	; 0x62
  4004f6:	47a0      	blx	r4
  4004f8:	2101      	movs	r1, #1
  4004fa:	2068      	movs	r0, #104	; 0x68
  4004fc:	47a0      	blx	r4
  4004fe:	2100      	movs	r1, #0
  400500:	2074      	movs	r0, #116	; 0x74
  400502:	47a0      	blx	r4
  400504:	f240 7104 	movw	r1, #1796	; 0x704
  400508:	2075      	movs	r0, #117	; 0x75
  40050a:	47a0      	blx	r4
  40050c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  400510:	2076      	movs	r0, #118	; 0x76
  400512:	47a0      	blx	r4
  400514:	f44f 51bb 	mov.w	r1, #5984	; 0x1760
  400518:	2077      	movs	r0, #119	; 0x77
  40051a:	47a0      	blx	r4
  40051c:	2105      	movs	r1, #5
  40051e:	2074      	movs	r0, #116	; 0x74
  400520:	47a0      	blx	r4
  400522:	4630      	mov	r0, r6
  400524:	47a8      	blx	r5
  400526:	f640 4105 	movw	r1, #3077	; 0xc05
  40052a:	2015      	movs	r0, #21
  40052c:	47a0      	blx	r4
  40052e:	2100      	movs	r1, #0
  400530:	2014      	movs	r0, #20
  400532:	47a0      	blx	r4
  400534:	f244 0106 	movw	r1, #16390	; 0x4006
  400538:	2016      	movs	r0, #22
  40053a:	47a0      	blx	r4
  40053c:	f44f 7100 	mov.w	r1, #512	; 0x200
  400540:	2018      	movs	r0, #24
  400542:	47a0      	blx	r4
  400544:	2142      	movs	r1, #66	; 0x42
  400546:	2019      	movs	r0, #25
  400548:	47a0      	blx	r4
  40054a:	2108      	movs	r1, #8
  40054c:	201a      	movs	r0, #26
  40054e:	47a0      	blx	r4
  400550:	f44f 6102 	mov.w	r1, #2080	; 0x820
  400554:	201b      	movs	r0, #27
  400556:	47a0      	blx	r4
  400558:	210f      	movs	r1, #15
  40055a:	2012      	movs	r0, #18
  40055c:	47a0      	blx	r4
  40055e:	4630      	mov	r0, r6
  400560:	47a8      	blx	r5
  400562:	2110      	movs	r1, #16
  400564:	202c      	movs	r0, #44	; 0x2c
  400566:	47a0      	blx	r4
  400568:	2110      	movs	r1, #16
  40056a:	202d      	movs	r0, #45	; 0x2d
  40056c:	47a0      	blx	r4
  40056e:	2111      	movs	r1, #17
  400570:	205a      	movs	r0, #90	; 0x5a
  400572:	47a0      	blx	r4
  400574:	2133      	movs	r1, #51	; 0x33
  400576:	205a      	movs	r0, #90	; 0x5a
  400578:	47a0      	blx	r4
  40057a:	210f      	movs	r1, #15
  40057c:	2043      	movs	r0, #67	; 0x43
  40057e:	47a0      	blx	r4
  400580:	21f0      	movs	r1, #240	; 0xf0
  400582:	2044      	movs	r0, #68	; 0x44
  400584:	47a0      	blx	r4
  400586:	4638      	mov	r0, r7
  400588:	47a8      	blx	r5
  40058a:	2177      	movs	r1, #119	; 0x77
  40058c:	205a      	movs	r0, #90	; 0x5a
  40058e:	47a0      	blx	r4
  400590:	21ff      	movs	r1, #255	; 0xff
  400592:	205a      	movs	r0, #90	; 0x5a
  400594:	47a0      	blx	r4
  400596:	21bc      	movs	r1, #188	; 0xbc
  400598:	2039      	movs	r0, #57	; 0x39
  40059a:	47a0      	blx	r4
  40059c:	203a      	movs	r0, #58	; 0x3a
  40059e:	21bc      	movs	r1, #188	; 0xbc
  4005a0:	47a0      	blx	r4
  4005a2:	4638      	mov	r0, r7
  4005a4:	462b      	mov	r3, r5
  4005a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4005aa:	4718      	bx	r3
  4005ac:	004011b9 	.word	0x004011b9
  4005b0:	0003dbc2 	.word	0x0003dbc2
  4005b4:	004011f5 	.word	0x004011f5
  4005b8:	20400001 	.word	0x20400001
  4005bc:	004d2b25 	.word	0x004d2b25

004005c0 <computeWaveletPitch>:
{
	float pitchF = 0.0f;
	int32_t i, j;
	float si, si1;
	
	arm_copy_f32(samples, sam, WIN_SIZE); 
  4005c0:	f44f 7200 	mov.w	r2, #512	; 0x200
  4005c4:	499e      	ldr	r1, [pc, #632]	; (400840 <computeWaveletPitch+0x280>)
  4005c6:	4b9f      	ldr	r3, [pc, #636]	; (400844 <computeWaveletPitch+0x284>)
	
	return pitchF;
}

float computeWaveletPitch(float * samples)
{
  4005c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int32_t curSamNb = WIN_SIZE;
  4005cc:	4692      	mov	sl, r2
	int32_t curLevel = 0;
  4005ce:	2400      	movs	r4, #0
		memset(distances, 0, WIN_SIZE*sizeof(int32_t));
  4005d0:	f8df b290 	ldr.w	fp, [pc, #656]	; 400864 <computeWaveletPitch+0x2a4>
{
  4005d4:	ed2d 8b04 	vpush	{d8-d9}
  4005d8:	b087      	sub	sp, #28
	float curModeDistance = -1.0f;
  4005da:	eeff 9a00 	vmov.f32	s19, #240	; 0xbf800000 -1.0
	arm_copy_f32(samples, sam, WIN_SIZE); 
  4005de:	4798      	blx	r3
		arm_max_f32(sam, WIN_SIZE, &maxValue, &temp_idx); 
  4005e0:	4651      	mov	r1, sl
  4005e2:	ab02      	add	r3, sp, #8
  4005e4:	aa03      	add	r2, sp, #12
  4005e6:	4896      	ldr	r0, [pc, #600]	; (400840 <computeWaveletPitch+0x280>)
	int32_t curLevel = 0;
  4005e8:	9400      	str	r4, [sp, #0]
		arm_max_f32(sam, WIN_SIZE, &maxValue, &temp_idx); 
  4005ea:	4c97      	ldr	r4, [pc, #604]	; (400848 <computeWaveletPitch+0x288>)
  4005ec:	47a0      	blx	r4
		arm_min_f32(sam, WIN_SIZE, &minValue, &temp_idx); 
  4005ee:	ab02      	add	r3, sp, #8
  4005f0:	aa04      	add	r2, sp, #16
  4005f2:	4651      	mov	r1, sl
  4005f4:	4892      	ldr	r0, [pc, #584]	; (400840 <computeWaveletPitch+0x280>)
  4005f6:	4c95      	ldr	r4, [pc, #596]	; (40084c <computeWaveletPitch+0x28c>)
  4005f8:	47a0      	blx	r4
		float theDC = 0.0;
  4005fa:	2300      	movs	r3, #0
  4005fc:	aa06      	add	r2, sp, #24
		arm_mean_f32(sam, WIN_SIZE, &theDC); 
  4005fe:	4651      	mov	r1, sl
  400600:	488f      	ldr	r0, [pc, #572]	; (400840 <computeWaveletPitch+0x280>)
		float theDC = 0.0;
  400602:	f842 3d04 	str.w	r3, [r2, #-4]!
		arm_mean_f32(sam, WIN_SIZE, &theDC); 
  400606:	4b92      	ldr	r3, [pc, #584]	; (400850 <computeWaveletPitch+0x290>)
  400608:	4798      	blx	r3
		maxValue = maxValue - theDC;
  40060a:	eddd 6a05 	vldr	s13, [sp, #20]
		minValue = minValue - theDC;
  40060e:	ed9d 7a04 	vldr	s14, [sp, #16]
		ampltitudeThreshold = amplitudeMax*maximaThresholdRatio;		
  400612:	eeb6 6a08 	vmov.f32	s12, #104	; 0x3f400000  0.750
		maxValue = maxValue - theDC;
  400616:	eddd 7a03 	vldr	s15, [sp, #12]
	int32_t res = 1, j;
  40061a:	2301      	movs	r3, #1
		minValue = minValue - theDC;
  40061c:	ee37 7a66 	vsub.f32	s14, s14, s13
		delta = SAMPLE_RATE/(_2power(curLevel)*maxF);
  400620:	eddf 8a8c 	vldr	s17, [pc, #560]	; 400854 <computeWaveletPitch+0x294>
		maxValue = maxValue - theDC;
  400624:	ee77 7ae6 	vsub.f32	s15, s15, s13
		if (curSamNb < 2) return pitchF;
  400628:	ed9f 8a8b 	vldr	s16, [pc, #556]	; 400858 <computeWaveletPitch+0x298>
		float amplitudeMax = (maxValue > -minValue ? maxValue : -minValue);
  40062c:	eeb1 9a47 	vneg.f32	s18, s14
		minValue = minValue - theDC;
  400630:	ed8d 7a04 	vstr	s14, [sp, #16]
		maxValue = maxValue - theDC;
  400634:	edcd 7a03 	vstr	s15, [sp, #12]
		float amplitudeMax = (maxValue > -minValue ? maxValue : -minValue);
  400638:	fec9 7a27 	vmaxnm.f32	s15, s18, s15
		ampltitudeThreshold = amplitudeMax*maximaThresholdRatio;		
  40063c:	ee27 9a86 	vmul.f32	s18, s15, s12
		delta = SAMPLE_RATE/(_2power(curLevel)*maxF);
  400640:	ee07 3a90 	vmov	s15, r3
		if (curSamNb < 2) return pitchF;
  400644:	f1ba 0f01 	cmp.w	sl, #1
		delta = SAMPLE_RATE/(_2power(curLevel)*maxF);
  400648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40064c:	ee88 7aa7 	vdiv.f32	s14, s17, s15
  400650:	eefd 7ac7 	vcvt.s32.f32	s15, s14
  400654:	ee17 4a90 	vmov	r4, s15
		if (curSamNb < 2) return pitchF;
  400658:	f340 827f 	ble.w	400b5a <computeWaveletPitch+0x59a>
  40065c:	f1ba 0f03 	cmp.w	sl, #3
  400660:	f340 826d 	ble.w	400b3e <computeWaveletPitch+0x57e>
  400664:	f1aa 0e04 	sub.w	lr, sl, #4
  400668:	4b75      	ldr	r3, [pc, #468]	; (400840 <computeWaveletPitch+0x280>)
  40066a:	2000      	movs	r0, #0
  40066c:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 400868 <computeWaveletPitch+0x2a8>
  400670:	f02e 0e01 	bic.w	lr, lr, #1
  400674:	4619      	mov	r1, r3
  400676:	9301      	str	r3, [sp, #4]
  400678:	4602      	mov	r2, r0
  40067a:	edd3 7a00 	vldr	s15, [r3]
  40067e:	f10e 0e03 	add.w	lr, lr, #3
  400682:	4606      	mov	r6, r0
  400684:	4605      	mov	r5, r0
  400686:	46c4      	mov	ip, r8
  400688:	eeb0 7a48 	vmov.f32	s14, s16
  40068c:	2301      	movs	r3, #1
  40068e:	e050      	b.n	400732 <computeWaveletPitch+0x172>
						if (i -1 > lastmaxIndex + delta) 
  400690:	2201      	movs	r2, #1
			si = sam[i]; // - theDC;
  400692:	edd1 7a02 	vldr	s15, [r1, #8]
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
  400696:	eef5 7a40 	vcmp.f32	s15, #0.0
  40069a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40069e:	dd06      	ble.n	4006ae <computeWaveletPitch+0xee>
  4006a0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  4006a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006a8:	d801      	bhi.n	4006ae <computeWaveletPitch+0xee>
  4006aa:	2000      	movs	r0, #0
  4006ac:	2201      	movs	r2, #1
			if (si1 >= 0 && si < 0) {findMin = 1; findMax = 0; }
  4006ae:	eef5 7a40 	vcmp.f32	s15, #0.0
  4006b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006b6:	d506      	bpl.n	4006c6 <computeWaveletPitch+0x106>
  4006b8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  4006bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006c0:	db01      	blt.n	4006c6 <computeWaveletPitch+0x106>
  4006c2:	2001      	movs	r0, #1
  4006c4:	2200      	movs	r2, #0
			if (previousDV > -1000.0f) 
  4006c6:	eeb4 6ac8 	vcmpe.f32	s12, s16
			dv = si - si1;
  4006ca:	ee37 7ae6 	vsub.f32	s14, s15, s13
			if (previousDV > -1000.0f) 
  4006ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006d2:	dd2a      	ble.n	40072a <computeWaveletPitch+0x16a>
				if (findMin && previousDV < 0.0f && dv >= 0.0f) 
  4006d4:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
  4006d8:	f000 0701 	and.w	r7, r0, #1
  4006dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006e0:	bf58      	it	pl
  4006e2:	2700      	movpl	r7, #0
  4006e4:	b1af      	cbz	r7, 400712 <computeWaveletPitch+0x152>
  4006e6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  4006ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006ee:	db10      	blt.n	400712 <computeWaveletPitch+0x152>
					if (Abs(si1) >= ampltitudeThreshold) 
  4006f0:	eef0 5ae6 	vabs.f32	s11, s13
  4006f4:	eeb4 9ae5 	vcmpe.f32	s18, s11
  4006f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006fc:	d809      	bhi.n	400712 <computeWaveletPitch+0x152>
						if (i - 1 > lastMinIndex + delta)
  4006fe:	eb04 070c 	add.w	r7, r4, ip
  400702:	429f      	cmp	r7, r3
  400704:	da05      	bge.n	400712 <computeWaveletPitch+0x152>
							mins[nbMins++] = i - 1;
  400706:	4855      	ldr	r0, [pc, #340]	; (40085c <computeWaveletPitch+0x29c>)
  400708:	469c      	mov	ip, r3
  40070a:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
  40070e:	3501      	adds	r5, #1
							findMin = 0;
  400710:	2000      	movs	r0, #0
				if (findMax && previousDV > 0.0f && dv <= 0.0f) 
  400712:	eeb5 6a40 	vcmp.f32	s12, #0.0
  400716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40071a:	dd06      	ble.n	40072a <computeWaveletPitch+0x16a>
  40071c:	b12a      	cbz	r2, 40072a <computeWaveletPitch+0x16a>
  40071e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  400722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400726:	d96b      	bls.n	400800 <computeWaveletPitch+0x240>
						if (i -1 > lastmaxIndex + delta) 
  400728:	2201      	movs	r2, #1
  40072a:	3302      	adds	r3, #2
  40072c:	3108      	adds	r1, #8
  40072e:	4573      	cmp	r3, lr
  400730:	d07b      	beq.n	40082a <computeWaveletPitch+0x26a>
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
  400732:	eef5 7a40 	vcmp.f32	s15, #0.0
			si = sam[i]; // - theDC;
  400736:	edd1 6a01 	vldr	s13, [r1, #4]
  40073a:	1e5f      	subs	r7, r3, #1
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
  40073c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400740:	d806      	bhi.n	400750 <computeWaveletPitch+0x190>
  400742:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40074a:	dd01      	ble.n	400750 <computeWaveletPitch+0x190>
  40074c:	2000      	movs	r0, #0
  40074e:	2201      	movs	r2, #1
			if (si1 >= 0 && si < 0) {findMin = 1; findMax = 0; }
  400750:	eef5 7a40 	vcmp.f32	s15, #0.0
  400754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400758:	db06      	blt.n	400768 <computeWaveletPitch+0x1a8>
  40075a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  40075e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400762:	d501      	bpl.n	400768 <computeWaveletPitch+0x1a8>
  400764:	2001      	movs	r0, #1
  400766:	2200      	movs	r2, #0
			if (previousDV > -1000.0f) 
  400768:	eeb4 7ac8 	vcmpe.f32	s14, s16
			dv = si - si1;
  40076c:	ee36 6ae7 	vsub.f32	s12, s13, s15
			if (previousDV > -1000.0f) 
  400770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400774:	dd8d      	ble.n	400692 <computeWaveletPitch+0xd2>
				if (findMin && previousDV < 0.0f && dv >= 0.0f) 
  400776:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  40077a:	f000 0901 	and.w	r9, r0, #1
  40077e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400782:	bf58      	it	pl
  400784:	f04f 0900 	movpl.w	r9, #0
  400788:	f1b9 0f00 	cmp.w	r9, #0
  40078c:	d015      	beq.n	4007ba <computeWaveletPitch+0x1fa>
  40078e:	eeb5 6a40 	vcmp.f32	s12, #0.0
  400792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400796:	db10      	blt.n	4007ba <computeWaveletPitch+0x1fa>
					if (Abs(si1) >= ampltitudeThreshold) 
  400798:	eef0 5ae7 	vabs.f32	s11, s15
  40079c:	eeb4 9ae5 	vcmpe.f32	s18, s11
  4007a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4007a4:	d809      	bhi.n	4007ba <computeWaveletPitch+0x1fa>
						if (i - 1 > lastMinIndex + delta)
  4007a6:	eb04 090c 	add.w	r9, r4, ip
  4007aa:	45b9      	cmp	r9, r7
  4007ac:	da05      	bge.n	4007ba <computeWaveletPitch+0x1fa>
							mins[nbMins++] = i - 1;
  4007ae:	482b      	ldr	r0, [pc, #172]	; (40085c <computeWaveletPitch+0x29c>)
  4007b0:	46bc      	mov	ip, r7
  4007b2:	f840 7025 	str.w	r7, [r0, r5, lsl #2]
  4007b6:	3501      	adds	r5, #1
							findMin = 0;
  4007b8:	2000      	movs	r0, #0
				if (findMax && previousDV > 0.0f && dv <= 0.0f) 
  4007ba:	eeb5 7a40 	vcmp.f32	s14, #0.0
  4007be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4007c2:	f77f af66 	ble.w	400692 <computeWaveletPitch+0xd2>
  4007c6:	2a00      	cmp	r2, #0
  4007c8:	f43f af63 	beq.w	400692 <computeWaveletPitch+0xd2>
  4007cc:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
  4007d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4007d4:	f63f af5c 	bhi.w	400690 <computeWaveletPitch+0xd0>
					if (Abs(si1) >= ampltitudeThreshold) 
  4007d8:	eef0 7ae7 	vabs.f32	s15, s15
  4007dc:	eeb4 9ae7 	vcmpe.f32	s18, s15
  4007e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4007e4:	f63f af54 	bhi.w	400690 <computeWaveletPitch+0xd0>
						if (i -1 > lastmaxIndex + delta) 
  4007e8:	eb04 0208 	add.w	r2, r4, r8
  4007ec:	42ba      	cmp	r2, r7
  4007ee:	f6bf af4f 	bge.w	400690 <computeWaveletPitch+0xd0>
							maxs[nbMaxs++] = i - 1;
  4007f2:	4a1b      	ldr	r2, [pc, #108]	; (400860 <computeWaveletPitch+0x2a0>)
  4007f4:	46b8      	mov	r8, r7
  4007f6:	f842 7026 	str.w	r7, [r2, r6, lsl #2]
  4007fa:	3601      	adds	r6, #1
							findMax = 0;
  4007fc:	2200      	movs	r2, #0
  4007fe:	e748      	b.n	400692 <computeWaveletPitch+0xd2>
					if (Abs(si1) >= ampltitudeThreshold) 
  400800:	eef0 6ae6 	vabs.f32	s13, s13
  400804:	eeb4 9ae6 	vcmpe.f32	s18, s13
  400808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40080c:	d88c      	bhi.n	400728 <computeWaveletPitch+0x168>
						if (i -1 > lastmaxIndex + delta) 
  40080e:	eb04 0208 	add.w	r2, r4, r8
  400812:	429a      	cmp	r2, r3
  400814:	da88      	bge.n	400728 <computeWaveletPitch+0x168>
							maxs[nbMaxs++] = i - 1;
  400816:	4a12      	ldr	r2, [pc, #72]	; (400860 <computeWaveletPitch+0x2a0>)
  400818:	4698      	mov	r8, r3
  40081a:	3108      	adds	r1, #8
  40081c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  400820:	3302      	adds	r3, #2
  400822:	3601      	adds	r6, #1
							findMax = 0;
  400824:	2200      	movs	r2, #0
  400826:	4573      	cmp	r3, lr
  400828:	d183      	bne.n	400732 <computeWaveletPitch+0x172>
  40082a:	9f01      	ldr	r7, [sp, #4]
  40082c:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
							mins[nbMins++] = i - 1;
  400830:	f8df 9028 	ldr.w	r9, [pc, #40]	; 40085c <computeWaveletPitch+0x29c>
  400834:	46a6      	mov	lr, r4
  400836:	4419      	add	r1, r3
  400838:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  40083c:	e01c      	b.n	400878 <computeWaveletPitch+0x2b8>
  40083e:	bf00      	nop
  400840:	20405a00 	.word	0x20405a00
  400844:	004039a1 	.word	0x004039a1
  400848:	00403b35 	.word	0x00403b35
  40084c:	004039f5 	.word	0x004039f5
  400850:	00403ad1 	.word	0x00403ad1
  400854:	417c0000 	.word	0x417c0000
  400858:	c47a0000 	.word	0xc47a0000
  40085c:	20405200 	.word	0x20405200
  400860:	20404a00 	.word	0x20404a00
  400864:	20404200 	.word	0x20404200
  400868:	fff0bdc0 	.word	0xfff0bdc0
						if (i -1 > lastmaxIndex + delta) 
  40086c:	2201      	movs	r2, #1
		for (i = 1; i < curSamNb; i++) 
  40086e:	3301      	adds	r3, #1
			dv = si - si1;
  400870:	eeb0 7a67 	vmov.f32	s14, s15
		for (i = 1; i < curSamNb; i++) 
  400874:	459a      	cmp	sl, r3
  400876:	dd65      	ble.n	400944 <computeWaveletPitch+0x384>
			si = sam[i]; // - theDC;
  400878:	edd1 7a01 	vldr	s15, [r1, #4]
  40087c:	1e5f      	subs	r7, r3, #1
			si1 = sam[i-1]; // - theDC;
  40087e:	ecf1 6a01 	vldmia	r1!, {s13}
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
  400882:	eef5 7a40 	vcmp.f32	s15, #0.0
  400886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40088a:	dd06      	ble.n	40089a <computeWaveletPitch+0x2da>
  40088c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400894:	d801      	bhi.n	40089a <computeWaveletPitch+0x2da>
  400896:	2000      	movs	r0, #0
  400898:	2201      	movs	r2, #1
			if (si1 >= 0 && si < 0) {findMin = 1; findMax = 0; }
  40089a:	eef5 7a40 	vcmp.f32	s15, #0.0
  40089e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008a2:	d506      	bpl.n	4008b2 <computeWaveletPitch+0x2f2>
  4008a4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  4008a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008ac:	db01      	blt.n	4008b2 <computeWaveletPitch+0x2f2>
  4008ae:	2001      	movs	r0, #1
  4008b0:	2200      	movs	r2, #0
			if (previousDV > -1000.0f) 
  4008b2:	eeb4 7ac8 	vcmpe.f32	s14, s16
			dv = si - si1;
  4008b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
			if (previousDV > -1000.0f) 
  4008ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008be:	ddd6      	ble.n	40086e <computeWaveletPitch+0x2ae>
				if (findMin && previousDV < 0.0f && dv >= 0.0f) 
  4008c0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  4008c4:	f000 0401 	and.w	r4, r0, #1
  4008c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008cc:	bf58      	it	pl
  4008ce:	2400      	movpl	r4, #0
  4008d0:	b1a4      	cbz	r4, 4008fc <computeWaveletPitch+0x33c>
  4008d2:	eef5 7a40 	vcmp.f32	s15, #0.0
  4008d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008da:	db0f      	blt.n	4008fc <computeWaveletPitch+0x33c>
					if (Abs(si1) >= ampltitudeThreshold) 
  4008dc:	eeb0 6ae6 	vabs.f32	s12, s13
  4008e0:	eeb4 9ac6 	vcmpe.f32	s18, s12
  4008e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008e8:	d808      	bhi.n	4008fc <computeWaveletPitch+0x33c>
						if (i - 1 > lastMinIndex + delta)
  4008ea:	eb0e 040c 	add.w	r4, lr, ip
  4008ee:	42bc      	cmp	r4, r7
  4008f0:	da04      	bge.n	4008fc <computeWaveletPitch+0x33c>
							mins[nbMins++] = i - 1;
  4008f2:	f849 7025 	str.w	r7, [r9, r5, lsl #2]
  4008f6:	46bc      	mov	ip, r7
  4008f8:	3501      	adds	r5, #1
							findMin = 0;
  4008fa:	2000      	movs	r0, #0
				if (findMax && previousDV > 0.0f && dv <= 0.0f) 
  4008fc:	eeb5 7a40 	vcmp.f32	s14, #0.0
  400900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400904:	ddb3      	ble.n	40086e <computeWaveletPitch+0x2ae>
  400906:	2a00      	cmp	r2, #0
  400908:	d0b1      	beq.n	40086e <computeWaveletPitch+0x2ae>
  40090a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  40090e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400912:	d8ab      	bhi.n	40086c <computeWaveletPitch+0x2ac>
					if (Abs(si1) >= ampltitudeThreshold) 
  400914:	eef0 6ae6 	vabs.f32	s13, s13
  400918:	eeb4 9ae6 	vcmpe.f32	s18, s13
  40091c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400920:	d8a4      	bhi.n	40086c <computeWaveletPitch+0x2ac>
						if (i -1 > lastmaxIndex + delta) 
  400922:	eb0e 0208 	add.w	r2, lr, r8
  400926:	42ba      	cmp	r2, r7
  400928:	daa0      	bge.n	40086c <computeWaveletPitch+0x2ac>
		for (i = 1; i < curSamNb; i++) 
  40092a:	3301      	adds	r3, #1
							maxs[nbMaxs++] = i - 1;
  40092c:	4aac      	ldr	r2, [pc, #688]	; (400be0 <computeWaveletPitch+0x620>)
  40092e:	46b8      	mov	r8, r7
			dv = si - si1;
  400930:	eeb0 7a67 	vmov.f32	s14, s15
		for (i = 1; i < curSamNb; i++) 
  400934:	459a      	cmp	sl, r3
							maxs[nbMaxs++] = i - 1;
  400936:	f842 7026 	str.w	r7, [r2, r6, lsl #2]
  40093a:	f106 0601 	add.w	r6, r6, #1
							findMax = 0;
  40093e:	f04f 0200 	mov.w	r2, #0
		for (i = 1; i < curSamNb; i++) 
  400942:	dc99      	bgt.n	400878 <computeWaveletPitch+0x2b8>
  400944:	4674      	mov	r4, lr
		if (nbMins == 0 && nbMaxs == 0) 
  400946:	b915      	cbnz	r5, 40094e <computeWaveletPitch+0x38e>
  400948:	2e00      	cmp	r6, #0
  40094a:	f000 8106 	beq.w	400b5a <computeWaveletPitch+0x59a>
		memset(distances, 0, WIN_SIZE*sizeof(int32_t));
  40094e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400952:	2100      	movs	r1, #0
  400954:	4658      	mov	r0, fp
  400956:	4ba3      	ldr	r3, [pc, #652]	; (400be4 <computeWaveletPitch+0x624>)
  400958:	4798      	blx	r3
		for (i = 0 ; i < nbMins ; i++) 
  40095a:	b34d      	cbz	r5, 4009b0 <computeWaveletPitch+0x3f0>
  40095c:	f8df e298 	ldr.w	lr, [pc, #664]	; 400bf8 <computeWaveletPitch+0x638>
  400960:	2202      	movs	r2, #2
  400962:	2700      	movs	r7, #0
  400964:	4671      	mov	r1, lr
  400966:	e012      	b.n	40098e <computeWaveletPitch+0x3ce>
					d = Abs(mins[i] - mins[i+j]);
  400968:	f8d1 c000 	ldr.w	ip, [r1]
  40096c:	684b      	ldr	r3, [r1, #4]
  40096e:	ebac 0303 	sub.w	r3, ip, r3
  400972:	2b00      	cmp	r3, #0
  400974:	bfb8      	it	lt
  400976:	425b      	neglt	r3, r3
				if (i+j < nbMins) 
  400978:	42aa      	cmp	r2, r5
					distances[d]++; 
  40097a:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
  40097e:	f100 0001 	add.w	r0, r0, #1
  400982:	f84b 0023 	str.w	r0, [fp, r3, lsl #2]
				if (i+j < nbMins) 
  400986:	f2c0 80cc 	blt.w	400b22 <computeWaveletPitch+0x562>
  40098a:	3104      	adds	r1, #4
  40098c:	3201      	adds	r2, #1
  40098e:	3701      	adds	r7, #1
  400990:	42af      	cmp	r7, r5
  400992:	dbe9      	blt.n	400968 <computeWaveletPitch+0x3a8>
  400994:	42aa      	cmp	r2, r5
  400996:	da0b      	bge.n	4009b0 <computeWaveletPitch+0x3f0>
					d = Abs(mins[i] - mins[i+j]);
  400998:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
  40099c:	680b      	ldr	r3, [r1, #0]
  40099e:	1a9b      	subs	r3, r3, r2
  4009a0:	2b00      	cmp	r3, #0
  4009a2:	bfb8      	it	lt
  4009a4:	425b      	neglt	r3, r3
					distances[d]++; 
  4009a6:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
  4009aa:	3201      	adds	r2, #1
  4009ac:	f84b 2023 	str.w	r2, [fp, r3, lsl #2]
		for (i = 0 ; i < nbMaxs ; i++) 
  4009b0:	b346      	cbz	r6, 400a04 <computeWaveletPitch+0x444>
  4009b2:	4d8b      	ldr	r5, [pc, #556]	; (400be0 <computeWaveletPitch+0x620>)
  4009b4:	2202      	movs	r2, #2
  4009b6:	2700      	movs	r7, #0
  4009b8:	4629      	mov	r1, r5
  4009ba:	e012      	b.n	4009e2 <computeWaveletPitch+0x422>
					d = Abs(maxs[i] - maxs[i+j]);
  4009bc:	f8d1 e000 	ldr.w	lr, [r1]
  4009c0:	684b      	ldr	r3, [r1, #4]
  4009c2:	ebae 0303 	sub.w	r3, lr, r3
  4009c6:	2b00      	cmp	r3, #0
  4009c8:	bfb8      	it	lt
  4009ca:	425b      	neglt	r3, r3
				if (i+j < nbMaxs) 
  4009cc:	42b2      	cmp	r2, r6
					distances[d]++; 
  4009ce:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
  4009d2:	f100 0001 	add.w	r0, r0, #1
  4009d6:	f84b 0023 	str.w	r0, [fp, r3, lsl #2]
				if (i+j < nbMaxs) 
  4009da:	f2c0 8193 	blt.w	400d04 <computeWaveletPitch+0x744>
  4009de:	3104      	adds	r1, #4
  4009e0:	3201      	adds	r2, #1
  4009e2:	3701      	adds	r7, #1
  4009e4:	42b7      	cmp	r7, r6
  4009e6:	dbe9      	blt.n	4009bc <computeWaveletPitch+0x3fc>
  4009e8:	42b2      	cmp	r2, r6
  4009ea:	da0b      	bge.n	400a04 <computeWaveletPitch+0x444>
					d = Abs(maxs[i] - maxs[i+j]);
  4009ec:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4009f0:	680b      	ldr	r3, [r1, #0]
  4009f2:	1a9b      	subs	r3, r3, r2
  4009f4:	2b00      	cmp	r3, #0
  4009f6:	bfb8      	it	lt
  4009f8:	425b      	neglt	r3, r3
					distances[d]++; 
  4009fa:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
  4009fe:	3201      	adds	r2, #1
  400a00:	f84b 2023 	str.w	r2, [fp, r3, lsl #2]
		for (i = 0 ; i < nbMaxs ; i++) 
  400a04:	f04f 36ff 	mov.w	r6, #4294967295
  400a08:	f1c4 0e00 	rsb	lr, r4, #0
  400a0c:	2500      	movs	r5, #0
  400a0e:	f104 0c01 	add.w	ip, r4, #1
  400a12:	4637      	mov	r7, r6
			for (j = -delta ; j <= delta ; j++) 
  400a14:	4574      	cmp	r4, lr
  400a16:	f2c0 8082 	blt.w	400b1e <computeWaveletPitch+0x55e>
  400a1a:	1b2b      	subs	r3, r5, r4
  400a1c:	eb0c 0205 	add.w	r2, ip, r5
  400a20:	2100      	movs	r1, #0
				if (i+j >=0 && i+j < curSamNb)
  400a22:	4553      	cmp	r3, sl
  400a24:	da04      	bge.n	400a30 <computeWaveletPitch+0x470>
  400a26:	2b00      	cmp	r3, #0
  400a28:	db02      	blt.n	400a30 <computeWaveletPitch+0x470>
					summed += distances[i+j];
  400a2a:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
  400a2e:	4401      	add	r1, r0
  400a30:	3301      	adds	r3, #1
			for (j = -delta ; j <= delta ; j++) 
  400a32:	4293      	cmp	r3, r2
  400a34:	d1f5      	bne.n	400a22 <computeWaveletPitch+0x462>
			if (summed == bestValue) 
  400a36:	42b9      	cmp	r1, r7
  400a38:	d06c      	beq.n	400b14 <computeWaveletPitch+0x554>
			else if (summed > bestValue) 
  400a3a:	dd01      	ble.n	400a40 <computeWaveletPitch+0x480>
  400a3c:	460f      	mov	r7, r1
  400a3e:	462e      	mov	r6, r5
		for (i = 0; i< curSamNb; i++) 
  400a40:	3501      	adds	r5, #1
  400a42:	4555      	cmp	r5, sl
  400a44:	d1e6      	bne.n	400a14 <computeWaveletPitch+0x454>
		for (j = -delta ; j <= delta ; j++) 
  400a46:	4574      	cmp	r4, lr
  400a48:	f2c0 80aa 	blt.w	400ba0 <computeWaveletPitch+0x5e0>
  400a4c:	ed9f 7a66 	vldr	s14, [pc, #408]	; 400be8 <computeWaveletPitch+0x628>
  400a50:	1c62      	adds	r2, r4, #1
  400a52:	1b33      	subs	r3, r6, r4
  400a54:	eef0 6a47 	vmov.f32	s13, s14
  400a58:	4416      	add	r6, r2
			if (bestDistance+j >=0 && bestDistance+j < WIN_SIZE) 
  400a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  400a5e:	d211      	bcs.n	400a84 <computeWaveletPitch+0x4c4>
				int32_t nbDist = distances[bestDistance+j];
  400a60:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
					distAvg += (bestDistance+j)*nbDist;
  400a64:	fb02 f103 	mul.w	r1, r2, r3
					nbDists += nbDist;
  400a68:	ee06 2a10 	vmov	s12, r2
				if (nbDist > 0) {
  400a6c:	2a00      	cmp	r2, #0
					distAvg += (bestDistance+j)*nbDist;
  400a6e:	ee07 1a90 	vmov	s15, r1
					nbDists += nbDist;
  400a72:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
					distAvg += (bestDistance+j)*nbDist;
  400a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (nbDist > 0) {
  400a7a:	dd03      	ble.n	400a84 <computeWaveletPitch+0x4c4>
					nbDists += nbDist;
  400a7c:	ee76 6a86 	vadd.f32	s13, s13, s12
					distAvg += (bestDistance+j)*nbDist;
  400a80:	ee37 7a27 	vadd.f32	s14, s14, s15
  400a84:	3301      	adds	r3, #1
		for (j = -delta ; j <= delta ; j++) 
  400a86:	42b3      	cmp	r3, r6
  400a88:	d1e7      	bne.n	400a5a <computeWaveletPitch+0x49a>
  400a8a:	ee87 6a26 	vdiv.f32	s12, s14, s13
				pitchF = SAMPLE_RATE/(_2power(curLevel-1)*curModeDistance);
  400a8e:	9b00      	ldr	r3, [sp, #0]
		if (curModeDistance > -1.0f) 
  400a90:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  400a94:	eef4 9ae7 	vcmpe.f32	s19, s15
  400a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400a9c:	dd12      	ble.n	400ac4 <computeWaveletPitch+0x504>
			float similarity = Abs(distAvg*2 - curModeDistance);
  400a9e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
			if (similarity <= 2*delta) 
  400aa2:	0064      	lsls	r4, r4, #1
			float similarity = Abs(distAvg*2 - curModeDistance);
  400aa4:	eef0 6a69 	vmov.f32	s13, s19
			if (similarity <= 2*delta) 
  400aa8:	ee07 4a90 	vmov	s15, r4
			float similarity = Abs(distAvg*2 - curModeDistance);
  400aac:	eed6 6a07 	vfnms.f32	s13, s12, s14
			if (similarity <= 2*delta) 
  400ab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			float similarity = Abs(distAvg*2 - curModeDistance);
  400ab4:	eeb0 7ae6 	vabs.f32	s14, s13
			if (similarity <= 2*delta) 
  400ab8:	eeb4 7ae7 	vcmpe.f32	s14, s15
  400abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400ac0:	f240 80a0 	bls.w	400c04 <computeWaveletPitch+0x644>
		curLevel = curLevel + 1;
  400ac4:	3301      	adds	r3, #1
		if (curLevel >= maxFLWTlevels) 
  400ac6:	2b06      	cmp	r3, #6
		curLevel = curLevel + 1;
  400ac8:	9300      	str	r3, [sp, #0]
		if (curLevel >= maxFLWTlevels) 
  400aca:	d046      	beq.n	400b5a <computeWaveletPitch+0x59a>
  400acc:	9b01      	ldr	r3, [sp, #4]
		for (i = 0; i < curSamNb/2; i++)
  400ace:	ea4f 0a6a 	mov.w	sl, sl, asr #1
  400ad2:	4a46      	ldr	r2, [pc, #280]	; (400bec <computeWaveletPitch+0x62c>)
			sam[i] = (sam[2*i] + sam[2*i + 1]) * 0.5f;
  400ad4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
  400ad8:	eb03 01ca 	add.w	r1, r3, sl, lsl #3
		for (i = 0; i < curSamNb/2; i++)
  400adc:	4613      	mov	r3, r2
			sam[i] = (sam[2*i] + sam[2*i + 1]) * 0.5f;
  400ade:	ed93 7a00 	vldr	s14, [r3]
  400ae2:	3308      	adds	r3, #8
  400ae4:	ed53 7a01 	vldr	s15, [r3, #-4]
		for (i = 0; i < curSamNb/2; i++)
  400ae8:	428b      	cmp	r3, r1
			sam[i] = (sam[2*i] + sam[2*i + 1]) * 0.5f;
  400aea:	ee77 7a27 	vadd.f32	s15, s14, s15
  400aee:	ee67 7aa6 	vmul.f32	s15, s15, s13
  400af2:	ece2 7a01 	vstmia	r2!, {s15}
		for (i = 0; i < curSamNb/2; i++)
  400af6:	d1f2      	bne.n	400ade <computeWaveletPitch+0x51e>
	for (j = 0; j < i; j++) res <<= 1;
  400af8:	9b00      	ldr	r3, [sp, #0]
  400afa:	2b01      	cmp	r3, #1
  400afc:	d057      	beq.n	400bae <computeWaveletPitch+0x5ee>
  400afe:	2b02      	cmp	r3, #2
  400b00:	d053      	beq.n	400baa <computeWaveletPitch+0x5ea>
  400b02:	2b03      	cmp	r3, #3
  400b04:	d04f      	beq.n	400ba6 <computeWaveletPitch+0x5e6>
  400b06:	2b05      	cmp	r3, #5
  400b08:	bf0c      	ite	eq
  400b0a:	2320      	moveq	r3, #32
  400b0c:	2310      	movne	r3, #16
		curModeDistance = distAvg;
  400b0e:	eef0 9a46 	vmov.f32	s19, s12
  400b12:	e595      	b.n	400640 <computeWaveletPitch+0x80>
				if (i == 2*bestDistance)
  400b14:	ebb5 0f46 	cmp.w	r5, r6, lsl #1
  400b18:	bf08      	it	eq
  400b1a:	462e      	moveq	r6, r5
  400b1c:	e790      	b.n	400a40 <computeWaveletPitch+0x480>
			int32_t summed = 0;
  400b1e:	2100      	movs	r1, #0
  400b20:	e789      	b.n	400a36 <computeWaveletPitch+0x476>
					d = Abs(mins[i] - mins[i+j]);
  400b22:	f85e 3022 	ldr.w	r3, [lr, r2, lsl #2]
  400b26:	ebac 0303 	sub.w	r3, ip, r3
  400b2a:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
  400b2e:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
					distances[d]++; 
  400b32:	f85b 3020 	ldr.w	r3, [fp, r0, lsl #2]
  400b36:	3301      	adds	r3, #1
  400b38:	f84b 3020 	str.w	r3, [fp, r0, lsl #2]
  400b3c:	e725      	b.n	40098a <computeWaveletPitch+0x3ca>
		if (curSamNb < 2) return pitchF;
  400b3e:	2000      	movs	r0, #0
  400b40:	492a      	ldr	r1, [pc, #168]	; (400bec <computeWaveletPitch+0x62c>)
  400b42:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 400bfc <computeWaveletPitch+0x63c>
  400b46:	eeb0 7a48 	vmov.f32	s14, s16
  400b4a:	2301      	movs	r3, #1
  400b4c:	4602      	mov	r2, r0
  400b4e:	4606      	mov	r6, r0
  400b50:	4605      	mov	r5, r0
  400b52:	46c4      	mov	ip, r8
  400b54:	9101      	str	r1, [sp, #4]
  400b56:	460f      	mov	r7, r1
  400b58:	e668      	b.n	40082c <computeWaveletPitch+0x26c>
		if (pitchtracker._prevPitch > -1.0f) 
  400b5a:	4a25      	ldr	r2, [pc, #148]	; (400bf0 <computeWaveletPitch+0x630>)
  400b5c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  400b60:	edd2 7a00 	vldr	s15, [r2]
  400b64:	eef4 7ac7 	vcmpe.f32	s15, s14
  400b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400b6c:	dd21      	ble.n	400bb2 <computeWaveletPitch+0x5f2>
			if (pitchtracker._pitchConfidence >= 1) 
  400b6e:	6853      	ldr	r3, [r2, #4]
  400b70:	2b00      	cmp	r3, #0
  400b72:	dd27      	ble.n	400bc4 <computeWaveletPitch+0x604>
				pitchtracker._pitchConfidence = Max(0, pitchtracker._pitchConfidence - 1);
  400b74:	3b01      	subs	r3, #1
  400b76:	6053      	str	r3, [r2, #4]
	if (pitchtracker._pitchConfidence >= 1) 
  400b78:	2b00      	cmp	r3, #0
  400b7a:	dd1a      	ble.n	400bb2 <computeWaveletPitch+0x5f2>
	if (pitch < -1.0f) pitch = 0.0f;
  400b7c:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
  400b80:	ed9f 7a19 	vldr	s14, [pc, #100]	; 400be8 <computeWaveletPitch+0x628>
  400b84:	eef4 7a66 	vcmp.f32	s15, s13
  400b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400b8c:	bf48      	it	mi
  400b8e:	eef0 7a47 	vmovmi.f32	s15, s14
	return _dywapitch_dynamicprocess(get_raw_pitch(samples)); 
  400b92:	ee17 0a90 	vmov	r0, s15
  400b96:	b007      	add	sp, #28
  400b98:	ecbd 8b04 	vpop	{d8-d9}
  400b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (j = -delta ; j <= delta ; j++) 
  400ba0:	ed9f 6a14 	vldr	s12, [pc, #80]	; 400bf4 <computeWaveletPitch+0x634>
  400ba4:	e773      	b.n	400a8e <computeWaveletPitch+0x4ce>
	for (j = 0; j < i; j++) res <<= 1;
  400ba6:	2308      	movs	r3, #8
  400ba8:	e7b1      	b.n	400b0e <computeWaveletPitch+0x54e>
  400baa:	2304      	movs	r3, #4
  400bac:	e7af      	b.n	400b0e <computeWaveletPitch+0x54e>
  400bae:	2302      	movs	r3, #2
  400bb0:	e7ad      	b.n	400b0e <computeWaveletPitch+0x54e>
	float estimatedPitch = -1.0f;
  400bb2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  400bb6:	ee17 0a90 	vmov	r0, s15
  400bba:	b007      	add	sp, #28
  400bbc:	ecbd 8b04 	vpop	{d8-d9}
  400bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pitch = -1.0f;
  400bc4:	eef0 7a47 	vmov.f32	s15, s14
				pitchtracker._pitchConfidence = 0;
  400bc8:	2300      	movs	r3, #0
				pitchtracker._prevPitch = -1.0f;
  400bca:	ed82 7a00 	vstr	s14, [r2]
				pitchtracker._pitchConfidence = 0;
  400bce:	6053      	str	r3, [r2, #4]
  400bd0:	ee17 0a90 	vmov	r0, s15
  400bd4:	b007      	add	sp, #28
  400bd6:	ecbd 8b04 	vpop	{d8-d9}
  400bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400bde:	bf00      	nop
  400be0:	20404a00 	.word	0x20404a00
  400be4:	0040503d 	.word	0x0040503d
  400be8:	00000000 	.word	0x00000000
  400bec:	20405a00 	.word	0x20405a00
  400bf0:	20400018 	.word	0x20400018
  400bf4:	7fc00000 	.word	0x7fc00000
  400bf8:	20405200 	.word	0x20405200
  400bfc:	fff0bdc0 	.word	0xfff0bdc0
  400c00:	47389200 	.word	0x47389200
				pitchF = SAMPLE_RATE/(_2power(curLevel-1)*curModeDistance);
  400c04:	3b01      	subs	r3, #1
	for (j = 0; j < i; j++) res <<= 1;
  400c06:	2b00      	cmp	r3, #0
  400c08:	dd79      	ble.n	400cfe <computeWaveletPitch+0x73e>
  400c0a:	2b01      	cmp	r3, #1
  400c0c:	f000 808a 	beq.w	400d24 <computeWaveletPitch+0x764>
  400c10:	2b02      	cmp	r3, #2
  400c12:	f000 8085 	beq.w	400d20 <computeWaveletPitch+0x760>
  400c16:	2b04      	cmp	r3, #4
  400c18:	bf0c      	ite	eq
  400c1a:	2310      	moveq	r3, #16
  400c1c:	2308      	movne	r3, #8
  400c1e:	ee07 3a90 	vmov	s15, r3
  400c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				pitchF = SAMPLE_RATE/(_2power(curLevel-1)*curModeDistance);
  400c26:	ee69 9aa7 	vmul.f32	s19, s19, s15
  400c2a:	ed5f 6a0b 	vldr	s13, [pc, #-44]	; 400c00 <computeWaveletPitch+0x640>
	if (pitch < 1.0f) pitch = -1.0f;
  400c2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
				pitchF = SAMPLE_RATE/(_2power(curLevel-1)*curModeDistance);
  400c32:	eec6 7aa9 	vdiv.f32	s15, s13, s19
	if (pitch < 1.0f) pitch = -1.0f;
  400c36:	eef4 7ac7 	vcmpe.f32	s15, s14
  400c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400c3e:	d48c      	bmi.n	400b5a <computeWaveletPitch+0x59a>
	if (pitch > -1.0) {
  400c40:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  400c44:	eef4 7ac7 	vcmpe.f32	s15, s14
  400c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400c4c:	dd85      	ble.n	400b5a <computeWaveletPitch+0x59a>
		if (pitchtracker._prevPitch < 0.0f) 
  400c4e:	4a36      	ldr	r2, [pc, #216]	; (400d28 <computeWaveletPitch+0x768>)
  400c50:	edd2 6a00 	vldr	s13, [r2]
  400c54:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  400c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400c5c:	d426      	bmi.n	400cac <computeWaveletPitch+0x6ec>
		else if (abs(pitchtracker._prevPitch - pitch)/pitch < acceptedError) 
  400c5e:	ee36 7ae7 	vsub.f32	s14, s13, s15
  400c62:	ed9f 6a32 	vldr	s12, [pc, #200]	; 400d2c <computeWaveletPitch+0x76c>
  400c66:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  400c6a:	ee17 3a10 	vmov	r3, s14
  400c6e:	2b00      	cmp	r3, #0
  400c70:	bfb8      	it	lt
  400c72:	425b      	neglt	r3, r3
  400c74:	ee07 3a10 	vmov	s14, r3
			pitchtracker._pitchConfidence = Min(maxConfidence, pitchtracker._pitchConfidence + 1); // maximum 3
  400c78:	6853      	ldr	r3, [r2, #4]
		else if (abs(pitchtracker._prevPitch - pitch)/pitch < acceptedError) 
  400c7a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  400c7e:	eec7 5a27 	vdiv.f32	s11, s14, s15
  400c82:	eef4 5ac6 	vcmpe.f32	s11, s12
  400c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400c8a:	d507      	bpl.n	400c9c <computeWaveletPitch+0x6dc>
			pitchtracker._pitchConfidence = Min(maxConfidence, pitchtracker._pitchConfidence + 1); // maximum 3
  400c8c:	2b04      	cmp	r3, #4
			pitchtracker._prevPitch = pitch;
  400c8e:	edc2 7a00 	vstr	s15, [r2]
			pitchtracker._pitchConfidence = Min(maxConfidence, pitchtracker._pitchConfidence + 1); // maximum 3
  400c92:	bfd4      	ite	le
  400c94:	3301      	addle	r3, #1
  400c96:	2305      	movgt	r3, #5
				pitchtracker._pitchConfidence = max(0, pitchtracker._pitchConfidence - 1);
  400c98:	6053      	str	r3, [r2, #4]
  400c9a:	e76d      	b.n	400b78 <computeWaveletPitch+0x5b8>
		else if ((pitchtracker._pitchConfidence >= maxConfidence-2) && Abs(pitchtracker._prevPitch - 2.0f*pitch)/(2.0f*pitch) < acceptedError) 
  400c9c:	2b02      	cmp	r3, #2
  400c9e:	dc0a      	bgt.n	400cb6 <computeWaveletPitch+0x6f6>
			if (pitchtracker._pitchConfidence >= 1) 
  400ca0:	2b00      	cmp	r3, #0
  400ca2:	dd03      	ble.n	400cac <computeWaveletPitch+0x6ec>
				pitchtracker._pitchConfidence = max(0, pitchtracker._pitchConfidence - 1);
  400ca4:	3b01      	subs	r3, #1
				estimatedPitch = pitchtracker._prevPitch;
  400ca6:	eef0 7a66 	vmov.f32	s15, s13
  400caa:	e7f5      	b.n	400c98 <computeWaveletPitch+0x6d8>
				pitchtracker._pitchConfidence = 1;
  400cac:	2301      	movs	r3, #1
				pitchtracker._prevPitch = pitch;
  400cae:	edc2 7a00 	vstr	s15, [r2]
				pitchtracker._pitchConfidence = 1;
  400cb2:	6053      	str	r3, [r2, #4]
  400cb4:	e762      	b.n	400b7c <computeWaveletPitch+0x5bc>
		else if ((pitchtracker._pitchConfidence >= maxConfidence-2) && Abs(pitchtracker._prevPitch - 2.0f*pitch)/(2.0f*pitch) < acceptedError) 
  400cb6:	ee37 7aa7 	vadd.f32	s14, s15, s15
  400cba:	ee76 5ac7 	vsub.f32	s11, s13, s14
  400cbe:	eef0 5ae5 	vabs.f32	s11, s11
  400cc2:	ee85 5a87 	vdiv.f32	s10, s11, s14
  400cc6:	eeb4 5ac6 	vcmpe.f32	s10, s12
  400cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400cce:	d504      	bpl.n	400cda <computeWaveletPitch+0x71a>
			pitchtracker._prevPitch = estimatedPitch;
  400cd0:	ed82 7a00 	vstr	s14, [r2]
			estimatedPitch = 2.0f*pitch;
  400cd4:	eef0 7a47 	vmov.f32	s15, s14
  400cd8:	e750      	b.n	400b7c <computeWaveletPitch+0x5bc>
		else if ((pitchtracker._pitchConfidence >= maxConfidence-2) && Abs(pitchtracker._prevPitch - 0.5f*pitch)/(0.5f*pitch) < acceptedError) 
  400cda:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
  400cde:	ee67 7a87 	vmul.f32	s15, s15, s14
  400ce2:	ee36 7ae7 	vsub.f32	s14, s13, s15
  400ce6:	eeb0 7ac7 	vabs.f32	s14, s14
  400cea:	eec7 5a27 	vdiv.f32	s11, s14, s15
  400cee:	eef4 5ac6 	vcmpe.f32	s11, s12
  400cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400cf6:	d5d5      	bpl.n	400ca4 <computeWaveletPitch+0x6e4>
			pitchtracker._prevPitch = estimatedPitch;
  400cf8:	edc2 7a00 	vstr	s15, [r2]
  400cfc:	e73e      	b.n	400b7c <computeWaveletPitch+0x5bc>
	for (j = 0; j < i; j++) res <<= 1;
  400cfe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  400d02:	e790      	b.n	400c26 <computeWaveletPitch+0x666>
					d = Abs(maxs[i] - maxs[i+j]);
  400d04:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
  400d08:	ebae 0303 	sub.w	r3, lr, r3
  400d0c:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
  400d10:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
					distances[d]++; 
  400d14:	f85b 3020 	ldr.w	r3, [fp, r0, lsl #2]
  400d18:	3301      	adds	r3, #1
  400d1a:	f84b 3020 	str.w	r3, [fp, r0, lsl #2]
  400d1e:	e65e      	b.n	4009de <computeWaveletPitch+0x41e>
	for (j = 0; j < i; j++) res <<= 1;
  400d20:	2304      	movs	r3, #4
  400d22:	e77c      	b.n	400c1e <computeWaveletPitch+0x65e>
  400d24:	2302      	movs	r3, #2
  400d26:	e77a      	b.n	400c1e <computeWaveletPitch+0x65e>
  400d28:	20400018 	.word	0x20400018
  400d2c:	3e4ccccd 	.word	0x3e4ccccd

00400d30 <PSOLA_init>:
static float prev_pitch_shifts[MAX_NUM_SHIFTS]; 
static float window[10*WIN_SIZE]; // sufficiently large window array  
/************************ Static variables *********************/

void PSOLA_init(void)
{
  400d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	arm_fill_f32(0.0f, input_ring_buffer, RING_BUFFER_SIZE); 
  400d32:	2600      	movs	r6, #0
  400d34:	4c19      	ldr	r4, [pc, #100]	; (400d9c <PSOLA_init+0x6c>)
  400d36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400d3a:	4919      	ldr	r1, [pc, #100]	; (400da0 <PSOLA_init+0x70>)
  400d3c:	4630      	mov	r0, r6
	arm_fill_f32(0.0f, output_ring_buffer, RING_BUFFER_SIZE);
	arm_fill_f32(0.0f, window, 10*WIN_SIZE); 
	arm_fill_f32(1.0f, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  400d3e:	4d19      	ldr	r5, [pc, #100]	; (400da4 <PSOLA_init+0x74>)
	arm_fill_f32(0.0f, input_ring_buffer, RING_BUFFER_SIZE); 
  400d40:	47a0      	blx	r4
	arm_fill_f32(0.0f, output_ring_buffer, RING_BUFFER_SIZE);
  400d42:	4630      	mov	r0, r6
  400d44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400d48:	4917      	ldr	r1, [pc, #92]	; (400da8 <PSOLA_init+0x78>)
  400d4a:	47a0      	blx	r4
	arm_fill_f32(0.0f, window, 10*WIN_SIZE); 
  400d4c:	4630      	mov	r0, r6
  400d4e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  400d52:	4916      	ldr	r1, [pc, #88]	; (400dac <PSOLA_init+0x7c>)
  400d54:	47a0      	blx	r4
  400d56:	274c      	movs	r7, #76	; 0x4c
	arm_fill_f32(1.0f, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  400d58:	4629      	mov	r1, r5
  400d5a:	2213      	movs	r2, #19
  400d5c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
	prev_pitch_shifts[0] = 1.0f; 
  400d60:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
	arm_fill_f32(1.0f, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  400d64:	47a0      	blx	r4
	prev_pitch_shifts[1] = -1.0f; 
  400d66:	4b12      	ldr	r3, [pc, #72]	; (400db0 <PSOLA_init+0x80>)
  400d68:	463a      	mov	r2, r7
  400d6a:	4c12      	ldr	r4, [pc, #72]	; (400db4 <PSOLA_init+0x84>)
  400d6c:	2100      	movs	r1, #0
  400d6e:	4812      	ldr	r0, [pc, #72]	; (400db8 <PSOLA_init+0x88>)
  400d70:	606b      	str	r3, [r5, #4]
	prev_pitch_shifts[0] = 1.0f; 
  400d72:	602e      	str	r6, [r5, #0]
  400d74:	47a0      	blx	r4
  400d76:	463a      	mov	r2, r7
  400d78:	2100      	movs	r1, #0
  400d7a:	4810      	ldr	r0, [pc, #64]	; (400dbc <PSOLA_init+0x8c>)
	{
		outPtrList[i] = 0; 
		saved_samplesLeftInPeriod[i] = 0; 
	}
		
	current_num_shifts = 1; // always doing root 
  400d7c:	2701      	movs	r7, #1
  400d7e:	47a0      	blx	r4
  400d80:	4e0f      	ldr	r6, [pc, #60]	; (400dc0 <PSOLA_init+0x90>)
	
	readPos = RING_BUFFER_SIZE - WIN_SIZE; // + WEIRD_OFFSET; 
  400d82:	4c10      	ldr	r4, [pc, #64]	; (400dc4 <PSOLA_init+0x94>)
  400d84:	f44f 6560 	mov.w	r5, #3584	; 0xe00
	inPtr = 0; 
  400d88:	490f      	ldr	r1, [pc, #60]	; (400dc8 <PSOLA_init+0x98>)
  400d8a:	2000      	movs	r0, #0
	inputPeriodLength = PSOLA_SAMPLE_RATE / MINIMUM_PITCH; 
  400d8c:	4b0f      	ldr	r3, [pc, #60]	; (400dcc <PSOLA_init+0x9c>)
  400d8e:	f240 22a3 	movw	r2, #675	; 0x2a3
	current_num_shifts = 1; // always doing root 
  400d92:	6037      	str	r7, [r6, #0]
	readPos = RING_BUFFER_SIZE - WIN_SIZE; // + WEIRD_OFFSET; 
  400d94:	6025      	str	r5, [r4, #0]
	inPtr = 0; 
  400d96:	6008      	str	r0, [r1, #0]
	inputPeriodLength = PSOLA_SAMPLE_RATE / MINIMUM_PITCH; 
  400d98:	601a      	str	r2, [r3, #0]
  400d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400d9c:	00403971 	.word	0x00403971
  400da0:	20407000 	.word	0x20407000
  400da4:	20410000 	.word	0x20410000
  400da8:	2040c000 	.word	0x2040c000
  400dac:	2041009c 	.word	0x2041009c
  400db0:	bf800000 	.word	0xbf800000
  400db4:	0040503d 	.word	0x0040503d
  400db8:	2040b000 	.word	0x2040b000
  400dbc:	20410050 	.word	0x20410050
  400dc0:	20406200 	.word	0x20406200
  400dc4:	2041004c 	.word	0x2041004c
  400dc8:	20406204 	.word	0x20406204
  400dcc:	20406208 	.word	0x20406208

00400dd0 <create_harmonies>:
	currentPitch = MINIMUM_PITCH; 
}

// assumes valid pitch shifts 
void create_harmonies(float* input, float *output, float inputPitch, float *pitch_shifts_in, float harmony_vol,  float autotune_flag, float autotune_vol)
{
  400dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400dd4:	ed2d 8b08 	vpush	{d8-d11}
  400dd8:	b08b      	sub	sp, #44	; 0x2c
  400dda:	ee09 2a10 	vmov	s18, r2
  400dde:	4ebe      	ldr	r6, [pc, #760]	; (4010d8 <create_harmonies+0x308>)
  400de0:	9305      	str	r3, [sp, #20]
	uint32_t i, w; 
	int32_t olaIdx; 
	
	uint32_t saved_inPtr = inPtr; 
  400de2:	4bbe      	ldr	r3, [pc, #760]	; (4010dc <create_harmonies+0x30c>)
{
  400de4:	9109      	str	r1, [sp, #36]	; 0x24
	uint32_t saved_inPtr = inPtr; 
  400de6:	681b      	ldr	r3, [r3, #0]
{
  400de8:	ed9d 8a1c 	vldr	s16, [sp, #112]	; 0x70
	uint32_t outPtr; 
	uint32_t pitch_idx = 0; 
	
	uint32_t starting_input_ptr = inPtr + WIN_SIZE; 
  400dec:	461a      	mov	r2, r3
	uint32_t saved_inPtr = inPtr; 
  400dee:	9306      	str	r3, [sp, #24]
{
  400df0:	eddd 9a1d 	vldr	s19, [sp, #116]	; 0x74
	uint32_t starting_input_ptr = inPtr + WIN_SIZE; 
  400df4:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400df8:	f502 6180 	add.w	r1, r2, #1024	; 0x400
{
  400dfc:	eddd 8a1e 	vldr	s17, [sp, #120]	; 0x78
	for (i = 0; i < WIN_SIZE; i++)
	{
		input_ring_buffer[(starting_input_ptr++) & RING_BUFFER_MASK] = input[i]; 
  400e00:	f3c3 020b 	ubfx	r2, r3, #0, #12
  400e04:	3301      	adds	r3, #1
  400e06:	f850 4b04 	ldr.w	r4, [r0], #4
  400e0a:	eb06 0282 	add.w	r2, r6, r2, lsl #2
	for (i = 0; i < WIN_SIZE; i++)
  400e0e:	4299      	cmp	r1, r3
		input_ring_buffer[(starting_input_ptr++) & RING_BUFFER_MASK] = input[i]; 
  400e10:	6014      	str	r4, [r2, #0]
	for (i = 0; i < WIN_SIZE; i++)
  400e12:	d1f5      	bne.n	400e00 <create_harmonies+0x30>
	uint32_t inHalfAway;
	float periodRatio;
	float inputPeriodLengthRecip = 1.0f / inputPeriodLength;
	uint32_t samplesLeftInPeriod = 0; 
	
	float scale = 1.0f / log2f((float)(current_num_shifts+1));
  400e14:	4ab2      	ldr	r2, [pc, #712]	; (4010e0 <create_harmonies+0x310>)
  400e16:	4bb3      	ldr	r3, [pc, #716]	; (4010e4 <create_harmonies+0x314>)
  400e18:	6814      	ldr	r4, [r2, #0]
  400e1a:	1c60      	adds	r0, r4, #1
  400e1c:	ee07 0a90 	vmov	s15, r0
  400e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
  400e24:	ee17 0a90 	vmov	r0, s15
  400e28:	4798      	blx	r3
	float inputPeriodLengthRecip = 1.0f / inputPeriodLength;
  400e2a:	4baf      	ldr	r3, [pc, #700]	; (4010e8 <create_harmonies+0x318>)
	float scale = 1.0f / log2f((float)(current_num_shifts+1));
  400e2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  400e30:	ee06 0a90 	vmov	s13, r0
	float inputPeriodLengthRecip = 1.0f / inputPeriodLength;
  400e34:	f8d3 c000 	ldr.w	ip, [r3]
	if (current_num_shifts > 1) 
  400e38:	2c01      	cmp	r4, #1
	float scale = 1.0f / log2f((float)(current_num_shifts+1));
  400e3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
	float inputPeriodLengthRecip = 1.0f / inputPeriodLength;
  400e3e:	ee07 ca10 	vmov	s14, ip
  400e42:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	if (current_num_shifts > 1) 
  400e46:	d903      	bls.n	400e50 <create_harmonies+0x80>
		scale *= 1.2f; 
  400e48:	eddf 6aa8 	vldr	s13, [pc, #672]	; 4010ec <create_harmonies+0x31c>
  400e4c:	ee67 7aa6 	vmul.f32	s15, s15, s13
	
	// pre-compute window function	
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e50:	f1bc 0f00 	cmp.w	ip, #0
  400e54:	dd24      	ble.n	400ea0 <create_harmonies+0xd0>
  400e56:	eddf 6aa6 	vldr	s13, [pc, #664]	; 4010f0 <create_harmonies+0x320>
  400e5a:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
	{
		window[w] = scale * (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  400e5e:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
  400e62:	4da4      	ldr	r5, [pc, #656]	; (4010f4 <create_harmonies+0x324>)
  400e64:	eec6 aa87 	vdiv.f32	s21, s13, s14
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e68:	2400      	movs	r4, #0
  400e6a:	4fa3      	ldr	r7, [pc, #652]	; (4010f8 <create_harmonies+0x328>)
  400e6c:	ee27 aa8a 	vmul.f32	s20, s15, s20
		window[w] = scale * (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  400e70:	ee07 4a90 	vmov	s15, r4
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e74:	3401      	adds	r4, #1
		window[w] = scale * (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  400e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400e7a:	ee67 7aaa 	vmul.f32	s15, s15, s21
  400e7e:	ee17 0a90 	vmov	r0, s15
  400e82:	47b8      	blx	r7
  400e84:	ee07 0a90 	vmov	s15, r0
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e88:	4b97      	ldr	r3, [pc, #604]	; (4010e8 <create_harmonies+0x318>)
		window[w] = scale * (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  400e8a:	ee7b 7a67 	vsub.f32	s15, s22, s15
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e8e:	681b      	ldr	r3, [r3, #0]
		window[w] = scale * (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  400e90:	ee67 7a8a 	vmul.f32	s15, s15, s20
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e94:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
		window[w] = scale * (1.0f - arm_cos_f32(PI_F * (float)olaIdx * inputPeriodLengthRecip)) * 0.5f;
  400e98:	ece5 7a01 	vstmia	r5!, {s15}
	for (olaIdx = 0, w = 0; olaIdx < 2*inputPeriodLength; olaIdx++, w++)
  400e9c:	dbe8      	blt.n	400e70 <create_harmonies+0xa0>
  400e9e:	469c      	mov	ip, r3
		samplesLeftInPeriod = saved_samplesLeftInPeriod[0];
		if (pitch_idx > 0)
		{
			float tmp; 
			float min = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[0]); 
			for (i = 1; i < current_num_shifts; i++)
  400ea0:	498f      	ldr	r1, [pc, #572]	; (4010e0 <create_harmonies+0x310>)
  400ea2:	ee07 ca90 	vmov	s15, ip
			float min = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[0]); 
  400ea6:	4a95      	ldr	r2, [pc, #596]	; (4010fc <create_harmonies+0x32c>)
  400ea8:	f1cc 0a00 	rsb	sl, ip, #0
			for (i = 1; i < current_num_shifts; i++)
  400eac:	6809      	ldr	r1, [r1, #0]
		periodRatio = 1.0f / pitch_shifts_in[pitch_idx]; 
  400eae:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
			float min = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[0]); 
  400eb2:	ed92 5a00 	vldr	s10, [r2]
  400eb6:	eef8 4ae7 	vcvt.f32.s32	s9, s15
  400eba:	eb02 0281 	add.w	r2, r2, r1, lsl #2
			for (i = 1; i < current_num_shifts; i++)
  400ebe:	2300      	movs	r3, #0
  400ec0:	488f      	ldr	r0, [pc, #572]	; (401100 <create_harmonies+0x330>)
		outPtr = outPtrList[0];
  400ec2:	46d1      	mov	r9, sl
  400ec4:	9207      	str	r2, [sp, #28]
  400ec6:	4a85      	ldr	r2, [pc, #532]	; (4010dc <create_harmonies+0x30c>)
  400ec8:	4d8e      	ldr	r5, [pc, #568]	; (401104 <create_harmonies+0x334>)
  400eca:	f8d2 b000 	ldr.w	fp, [r2]
  400ece:	9a05      	ldr	r2, [sp, #20]
			for (i = 1; i < current_num_shifts; i++)
  400ed0:	9108      	str	r1, [sp, #32]
  400ed2:	9003      	str	r0, [sp, #12]
  400ed4:	9302      	str	r3, [sp, #8]
  400ed6:	9204      	str	r2, [sp, #16]
	while(pitch_idx < MAX_NUM_SHIFTS && pitch_shifts_in[pitch_idx] > 0.0f)
  400ed8:	9a04      	ldr	r2, [sp, #16]
  400eda:	ecb2 7a01 	vldmia	r2!, {s14}
  400ede:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  400ee2:	9204      	str	r2, [sp, #16]
  400ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400ee8:	f340 80f2 	ble.w	4010d0 <create_harmonies+0x300>
		outPtr = outPtrList[0];
  400eec:	4b86      	ldr	r3, [pc, #536]	; (401108 <create_harmonies+0x338>)
		periodRatio = 1.0f / pitch_shifts_in[pitch_idx]; 
  400eee:	ee85 6a87 	vdiv.f32	s12, s11, s14
		if (pitch_idx > 0)
  400ef2:	9a02      	ldr	r2, [sp, #8]
		outPtr = outPtrList[0];
  400ef4:	f8d3 e000 	ldr.w	lr, [r3]
		samplesLeftInPeriod = saved_samplesLeftInPeriod[0];
  400ef8:	4b84      	ldr	r3, [pc, #528]	; (40110c <create_harmonies+0x33c>)
  400efa:	681b      	ldr	r3, [r3, #0]
		if (pitch_idx > 0)
  400efc:	b1fa      	cbz	r2, 400f3e <create_harmonies+0x16e>
			for (i = 1; i < current_num_shifts; i++)
  400efe:	9a08      	ldr	r2, [sp, #32]
			float min = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[0]); 
  400f00:	ee77 6a45 	vsub.f32	s13, s14, s10
			for (i = 1; i < current_num_shifts; i++)
  400f04:	2a01      	cmp	r2, #1
			float min = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[0]); 
  400f06:	eef0 6ae6 	vabs.f32	s13, s13
			for (i = 1; i < current_num_shifts; i++)
  400f0a:	d918      	bls.n	400f3e <create_harmonies+0x16e>
  400f0c:	4880      	ldr	r0, [pc, #512]	; (401110 <create_harmonies+0x340>)
  400f0e:	4674      	mov	r4, lr
  400f10:	4980      	ldr	r1, [pc, #512]	; (401114 <create_harmonies+0x344>)
  400f12:	4a81      	ldr	r2, [pc, #516]	; (401118 <create_harmonies+0x348>)
			{
				tmp = Abs(pitch_shifts_in[pitch_idx] - prev_pitch_shifts[i]);
  400f14:	ecf0 7a01 	vldmia	r0!, {s15}
  400f18:	ee77 7a67 	vsub.f32	s15, s14, s15
  400f1c:	eef0 7ae7 	vabs.f32	s15, s15
				if (tmp < min)
  400f20:	eef4 6ae7 	vcmpe.f32	s13, s15
  400f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400f28:	dd03      	ble.n	400f32 <create_harmonies+0x162>
				{
					outPtr = outPtrList[i]; 
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
					min = tmp; 
  400f2a:	eef0 6a67 	vmov.f32	s13, s15
					outPtr = outPtrList[i]; 
  400f2e:	680c      	ldr	r4, [r1, #0]
					samplesLeftInPeriod = saved_samplesLeftInPeriod[i]; 
  400f30:	6813      	ldr	r3, [r2, #0]
			for (i = 1; i < current_num_shifts; i++)
  400f32:	9f07      	ldr	r7, [sp, #28]
  400f34:	3104      	adds	r1, #4
  400f36:	3204      	adds	r2, #4
  400f38:	4287      	cmp	r7, r0
  400f3a:	d1eb      	bne.n	400f14 <create_harmonies+0x144>
  400f3c:	46a6      	mov	lr, r4
  400f3e:	eef4 9a65 	vcmp.f32	s19, s11
					min = tmp; 
  400f42:	f44f 7200 	mov.w	r2, #512	; 0x200
  400f46:	ee64 7a86 	vmul.f32	s15, s9, s12
  400f4a:	9902      	ldr	r1, [sp, #8]
  400f4c:	9201      	str	r2, [sp, #4]
  400f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400f52:	f8dd b018 	ldr.w	fp, [sp, #24]
  400f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  400f5a:	bf0c      	ite	eq
  400f5c:	2201      	moveq	r2, #1
  400f5e:	2200      	movne	r2, #0
  400f60:	ee17 aa90 	vmov	sl, s15
  400f64:	2900      	cmp	r1, #0
  400f66:	bf14      	ite	ne
  400f68:	2200      	movne	r2, #0
  400f6a:	f002 0201 	andeq.w	r2, r2, #1
  400f6e:	9200      	str	r2, [sp, #0]
			}
		}

		for (i = 0; i < WIN_SIZE; i++)
		{		
			if (samplesLeftInPeriod == 0)
  400f70:	bbc3      	cbnz	r3, 400fe4 <create_harmonies+0x214>
			{
				outLag = 1; 
			
				inHalfAway = (inPtr + RING_BUFFER_SIZE_D2) & RING_BUFFER_MASK;
  400f72:	f50b 6800 	add.w	r8, fp, #2048	; 0x800
  400f76:	f3c8 080b 	ubfx	r8, r8, #0, #12
                
				if (inHalfAway < RING_BUFFER_SIZE_D2) 
  400f7a:	f5b8 6f00 	cmp.w	r8, #2048	; 0x800
  400f7e:	f080 80a1 	bcs.w	4010c4 <create_harmonies+0x2f4>
				{
					/* The zero element of the input buffer lies
						in (inptr, inHalfAway] */
					if (outPtr < inHalfAway || outPtr > inPtr) {
  400f82:	45f0      	cmp	r8, lr
  400f84:	d82d      	bhi.n	400fe2 <create_harmonies+0x212>
  400f86:	45f3      	cmp	fp, lr
  400f88:	d32b      	bcc.n	400fe2 <create_harmonies+0x212>
				}

				while(outLag == 1)
				{
					// set outPtr about the sample at which we OLA 
					outPtr = (outPtr + (uint32_t)((float)inputPeriodLength * periodRatio)) & RING_BUFFER_MASK; 
  400f8a:	44d6      	add	lr, sl
				
					// OLA 
					if (pitch_idx == 0 && autotune_flag == 1)
  400f8c:	9b00      	ldr	r3, [sp, #0]
					outPtr = (outPtr + (uint32_t)((float)inputPeriodLength * periodRatio)) & RING_BUFFER_MASK; 
  400f8e:	f3ce 0e0b 	ubfx	lr, lr, #0, #12
					if (pitch_idx == 0 && autotune_flag == 1)
  400f92:	2b00      	cmp	r3, #0
  400f94:	d074      	beq.n	401080 <create_harmonies+0x2b0>
					{
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  400f96:	45cc      	cmp	ip, r9
  400f98:	dd1e      	ble.n	400fd8 <create_harmonies+0x208>
  400f9a:	ebae 020c 	sub.w	r2, lr, ip
  400f9e:	4c55      	ldr	r4, [pc, #340]	; (4010f4 <create_harmonies+0x324>)
  400fa0:	eb0e 070c 	add.w	r7, lr, ip
  400fa4:	ebab 000e 	sub.w	r0, fp, lr
						{
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
								autotune_vol * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + LAG_OFFSET) & RING_BUFFER_MASK];
  400fa8:	1883      	adds	r3, r0, r2
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  400faa:	f3c2 010b 	ubfx	r1, r2, #0, #12
								autotune_vol * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + LAG_OFFSET) & RING_BUFFER_MASK];
  400fae:	ecb4 7a01 	vldmia	r4!, {s14}
  400fb2:	3201      	adds	r2, #1
  400fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  400fb8:	eb05 0181 	add.w	r1, r5, r1, lsl #2
								autotune_vol * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + LAG_OFFSET) & RING_BUFFER_MASK];
  400fbc:	ee27 7a28 	vmul.f32	s14, s14, s17
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  400fc0:	4297      	cmp	r7, r2
								autotune_vol * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + LAG_OFFSET) & RING_BUFFER_MASK];
  400fc2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  400fc6:	edd1 7a00 	vldr	s15, [r1]
  400fca:	edd3 6a00 	vldr	s13, [r3]
  400fce:	eee7 7a26 	vfma.f32	s15, s14, s13
  400fd2:	edc1 7a00 	vstr	s15, [r1]
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  400fd6:	d1e7      	bne.n	400fa8 <create_harmonies+0x1d8>
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
								harmony_vol * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + LAG_OFFSET) & RING_BUFFER_MASK];
						}
					}
					
					if (inHalfAway < RING_BUFFER_SIZE_D2) 
  400fd8:	f5b8 6f00 	cmp.w	r8, #2048	; 0x800
  400fdc:	d246      	bcs.n	40106c <create_harmonies+0x29c>
					{
						/* The zero element of the input buffer lies
							in (inptr, inHalfAway] */
						if (outPtr < inHalfAway || outPtr > inPtr) {
  400fde:	45f0      	cmp	r8, lr
  400fe0:	d946      	bls.n	401070 <create_harmonies+0x2a0>
						}
					}		
				}
			
				// assume uniform frequency within window 
				samplesLeftInPeriod = inputPeriodLength;
  400fe2:	4663      	mov	r3, ip
		for (i = 0; i < WIN_SIZE; i++)
  400fe4:	9a01      	ldr	r2, [sp, #4]
			}
		
			--samplesLeftInPeriod; 
		
			// inc/wrap input ring buffer index 
			inPtr = (inPtr+1) & RING_BUFFER_MASK; 		
  400fe6:	f10b 0b01 	add.w	fp, fp, #1
			--samplesLeftInPeriod; 
  400fea:	3b01      	subs	r3, #1
		for (i = 0; i < WIN_SIZE; i++)
  400fec:	3a01      	subs	r2, #1
			inPtr = (inPtr+1) & RING_BUFFER_MASK; 		
  400fee:	f3cb 0b0b 	ubfx	fp, fp, #0, #12
		for (i = 0; i < WIN_SIZE; i++)
  400ff2:	9201      	str	r2, [sp, #4]
  400ff4:	d1bc      	bne.n	400f70 <create_harmonies+0x1a0>
		}

		saved_samplesLeftInPeriod[pitch_idx] = samplesLeftInPeriod; 
		outPtrList[pitch_idx] = outPtr; 
  400ff6:	9902      	ldr	r1, [sp, #8]
  400ff8:	4843      	ldr	r0, [pc, #268]	; (401108 <create_harmonies+0x338>)
  400ffa:	460a      	mov	r2, r1
  400ffc:	f840 e021 	str.w	lr, [r0, r1, lsl #2]
		pitch_idx++;  
  401000:	3201      	adds	r2, #1
		saved_samplesLeftInPeriod[pitch_idx] = samplesLeftInPeriod; 
  401002:	9903      	ldr	r1, [sp, #12]
	while(pitch_idx < MAX_NUM_SHIFTS && pitch_shifts_in[pitch_idx] > 0.0f)
  401004:	2a13      	cmp	r2, #19
		saved_samplesLeftInPeriod[pitch_idx] = samplesLeftInPeriod; 
  401006:	f841 3f04 	str.w	r3, [r1, #4]!
		pitch_idx++;  
  40100a:	9202      	str	r2, [sp, #8]
  40100c:	f04f 0301 	mov.w	r3, #1
		saved_samplesLeftInPeriod[pitch_idx] = samplesLeftInPeriod; 
  401010:	9103      	str	r1, [sp, #12]
	while(pitch_idx < MAX_NUM_SHIFTS && pitch_shifts_in[pitch_idx] > 0.0f)
  401012:	f47f af61 	bne.w	400ed8 <create_harmonies+0x108>
  401016:	4b31      	ldr	r3, [pc, #196]	; (4010dc <create_harmonies+0x30c>)
  401018:	f8c3 b000 	str.w	fp, [r3]
  40101c:	9a09      	ldr	r2, [sp, #36]	; 0x24
	}
	
	for(i = 0; i < WIN_SIZE; i++)
	{
		output[i] = output_ring_buffer[readPos]; 	
		output_ring_buffer[readPos] = 0.0f;
  40101e:	2600      	movs	r6, #0
  401020:	493e      	ldr	r1, [pc, #248]	; (40111c <create_harmonies+0x34c>)
  401022:	f502 6400 	add.w	r4, r2, #2048	; 0x800
  401026:	680b      	ldr	r3, [r1, #0]
		output[i] = output_ring_buffer[readPos]; 	
  401028:	eb05 0083 	add.w	r0, r5, r3, lsl #2
		readPos = (readPos+1) & RING_BUFFER_MASK;
  40102c:	3301      	adds	r3, #1
		output[i] = output_ring_buffer[readPos]; 	
  40102e:	6807      	ldr	r7, [r0, #0]
		readPos = (readPos+1) & RING_BUFFER_MASK;
  401030:	f3c3 030b 	ubfx	r3, r3, #0, #12
		output[i] = output_ring_buffer[readPos]; 	
  401034:	f842 7b04 	str.w	r7, [r2], #4
	for(i = 0; i < WIN_SIZE; i++)
  401038:	4294      	cmp	r4, r2
		output_ring_buffer[readPos] = 0.0f;
  40103a:	6006      	str	r6, [r0, #0]
	for(i = 0; i < WIN_SIZE; i++)
  40103c:	d1f4      	bne.n	401028 <create_harmonies+0x258>
	// averaging -- not used currently 
	//if (pitch_idx > 1) //  scale = 2.0f / (float)current_num_shifts ; // just in case 
	//arm_scale_f32(output, 2.0f, output, WIN_SIZE); 
	
	currentPitch = inputPitch; 
	inputPeriodLength = (uint32_t)(PSOLA_SAMPLE_RATE / currentPitch);
  40103e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 401120 <create_harmonies+0x350>
	current_num_shifts = pitch_idx; 
	arm_copy_f32(pitch_shifts_in, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  401042:	2213      	movs	r2, #19
	current_num_shifts = pitch_idx; 
  401044:	4c26      	ldr	r4, [pc, #152]	; (4010e0 <create_harmonies+0x310>)
	inputPeriodLength = (uint32_t)(PSOLA_SAMPLE_RATE / currentPitch);
  401046:	eec7 7a09 	vdiv.f32	s15, s14, s18
	current_num_shifts = pitch_idx; 
  40104a:	9d02      	ldr	r5, [sp, #8]
  40104c:	600b      	str	r3, [r1, #0]
  40104e:	6025      	str	r5, [r4, #0]
	arm_copy_f32(pitch_shifts_in, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  401050:	9805      	ldr	r0, [sp, #20]
	inputPeriodLength = (uint32_t)(PSOLA_SAMPLE_RATE / currentPitch);
  401052:	4c25      	ldr	r4, [pc, #148]	; (4010e8 <create_harmonies+0x318>)
	arm_copy_f32(pitch_shifts_in, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  401054:	4929      	ldr	r1, [pc, #164]	; (4010fc <create_harmonies+0x32c>)
  401056:	4b33      	ldr	r3, [pc, #204]	; (401124 <create_harmonies+0x354>)
	inputPeriodLength = (uint32_t)(PSOLA_SAMPLE_RATE / currentPitch);
  401058:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  40105c:	edc4 7a00 	vstr	s15, [r4]
}
  401060:	b00b      	add	sp, #44	; 0x2c
  401062:	ecbd 8b08 	vpop	{d8-d11}
  401066:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	arm_copy_f32(pitch_shifts_in, prev_pitch_shifts, MAX_NUM_SHIFTS); 
  40106a:	4718      	bx	r3
						if (outPtr > inPtr && outPtr < inHalfAway) {
  40106c:	45f0      	cmp	r8, lr
  40106e:	d98c      	bls.n	400f8a <create_harmonies+0x1ba>
  401070:	45de      	cmp	lr, fp
  401072:	d8b6      	bhi.n	400fe2 <create_harmonies+0x212>
					outPtr = (outPtr + (uint32_t)((float)inputPeriodLength * periodRatio)) & RING_BUFFER_MASK; 
  401074:	44d6      	add	lr, sl
					if (pitch_idx == 0 && autotune_flag == 1)
  401076:	9b00      	ldr	r3, [sp, #0]
					outPtr = (outPtr + (uint32_t)((float)inputPeriodLength * periodRatio)) & RING_BUFFER_MASK; 
  401078:	f3ce 0e0b 	ubfx	lr, lr, #0, #12
					if (pitch_idx == 0 && autotune_flag == 1)
  40107c:	2b00      	cmp	r3, #0
  40107e:	d18a      	bne.n	400f96 <create_harmonies+0x1c6>
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  401080:	45cc      	cmp	ip, r9
  401082:	dda9      	ble.n	400fd8 <create_harmonies+0x208>
  401084:	ebae 020c 	sub.w	r2, lr, ip
  401088:	4c1a      	ldr	r4, [pc, #104]	; (4010f4 <create_harmonies+0x324>)
  40108a:	eb0e 070c 	add.w	r7, lr, ip
  40108e:	ebab 000e 	sub.w	r0, fp, lr
								harmony_vol * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + LAG_OFFSET) & RING_BUFFER_MASK];
  401092:	1883      	adds	r3, r0, r2
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  401094:	f3c2 010b 	ubfx	r1, r2, #0, #12
								harmony_vol * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + LAG_OFFSET) & RING_BUFFER_MASK];
  401098:	ecb4 7a01 	vldmia	r4!, {s14}
  40109c:	3201      	adds	r2, #1
  40109e:	f3c3 030b 	ubfx	r3, r3, #0, #12
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  4010a2:	eb05 0181 	add.w	r1, r5, r1, lsl #2
								harmony_vol * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + LAG_OFFSET) & RING_BUFFER_MASK];
  4010a6:	ee27 7a08 	vmul.f32	s14, s14, s16
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  4010aa:	4297      	cmp	r7, r2
								harmony_vol * window[w] * input_ring_buffer[(uint32_t)(olaIdx + (int64_t)inPtr + LAG_OFFSET) & RING_BUFFER_MASK];
  4010ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
							output_ring_buffer[(uint32_t)(olaIdx + (int64_t)outPtr) & RING_BUFFER_MASK] +=
  4010b0:	edd1 7a00 	vldr	s15, [r1]
  4010b4:	edd3 6a00 	vldr	s13, [r3]
  4010b8:	eee7 7a26 	vfma.f32	s15, s14, s13
  4010bc:	edc1 7a00 	vstr	s15, [r1]
						for (olaIdx = -inputPeriodLength, w = 0; olaIdx < inputPeriodLength; olaIdx++, w++)
  4010c0:	d1e7      	bne.n	401092 <create_harmonies+0x2c2>
  4010c2:	e789      	b.n	400fd8 <create_harmonies+0x208>
					if (outPtr > inPtr && outPtr < inHalfAway) {
  4010c4:	45f3      	cmp	fp, lr
  4010c6:	f4bf af60 	bcs.w	400f8a <create_harmonies+0x1ba>
  4010ca:	45f0      	cmp	r8, lr
  4010cc:	d889      	bhi.n	400fe2 <create_harmonies+0x212>
  4010ce:	e75c      	b.n	400f8a <create_harmonies+0x1ba>
  4010d0:	2b00      	cmp	r3, #0
  4010d2:	d0a3      	beq.n	40101c <create_harmonies+0x24c>
  4010d4:	e79f      	b.n	401016 <create_harmonies+0x246>
  4010d6:	bf00      	nop
  4010d8:	20407000 	.word	0x20407000
  4010dc:	20406204 	.word	0x20406204
  4010e0:	20406200 	.word	0x20406200
  4010e4:	00403d95 	.word	0x00403d95
  4010e8:	20406208 	.word	0x20406208
  4010ec:	3f99999a 	.word	0x3f99999a
  4010f0:	40490fdb 	.word	0x40490fdb
  4010f4:	2041009c 	.word	0x2041009c
  4010f8:	00403c11 	.word	0x00403c11
  4010fc:	20410000 	.word	0x20410000
  401100:	2041004c 	.word	0x2041004c
  401104:	2040c000 	.word	0x2040c000
  401108:	2040b000 	.word	0x2040b000
  40110c:	20410050 	.word	0x20410050
  401110:	20410004 	.word	0x20410004
  401114:	2040b004 	.word	0x2040b004
  401118:	20410054 	.word	0x20410054
  40111c:	2041004c 	.word	0x2041004c
  401120:	47389200 	.word	0x47389200
  401124:	004039a1 	.word	0x004039a1

00401128 <_read>:
  401128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40112c:	b990      	cbnz	r0, 401154 <_read+0x2c>
  40112e:	2a00      	cmp	r2, #0
  401130:	4690      	mov	r8, r2
  401132:	dd0d      	ble.n	401150 <_read+0x28>
  401134:	460c      	mov	r4, r1
  401136:	188f      	adds	r7, r1, r2
  401138:	4e08      	ldr	r6, [pc, #32]	; (40115c <_read+0x34>)
  40113a:	4d09      	ldr	r5, [pc, #36]	; (401160 <_read+0x38>)
  40113c:	4621      	mov	r1, r4
  40113e:	3401      	adds	r4, #1
  401140:	6830      	ldr	r0, [r6, #0]
  401142:	682b      	ldr	r3, [r5, #0]
  401144:	4798      	blx	r3
  401146:	42bc      	cmp	r4, r7
  401148:	d1f8      	bne.n	40113c <_read+0x14>
  40114a:	4640      	mov	r0, r8
  40114c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401150:	4680      	mov	r8, r0
  401152:	e7fa      	b.n	40114a <_read+0x22>
  401154:	f04f 38ff 	mov.w	r8, #4294967295
  401158:	e7f7      	b.n	40114a <_read+0x22>
  40115a:	bf00      	nop
  40115c:	2043f408 	.word	0x2043f408
  401160:	2043f400 	.word	0x2043f400

00401164 <_write>:
  401164:	3801      	subs	r0, #1
  401166:	2802      	cmp	r0, #2
  401168:	d81e      	bhi.n	4011a8 <_write+0x44>
  40116a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40116e:	4615      	mov	r5, r2
  401170:	b1ba      	cbz	r2, 4011a2 <_write+0x3e>
  401172:	460e      	mov	r6, r1
  401174:	460c      	mov	r4, r1
  401176:	f8df 803c 	ldr.w	r8, [pc, #60]	; 4011b4 <_write+0x50>
  40117a:	4f0d      	ldr	r7, [pc, #52]	; (4011b0 <_write+0x4c>)
  40117c:	e001      	b.n	401182 <_write+0x1e>
  40117e:	3d01      	subs	r5, #1
  401180:	d00d      	beq.n	40119e <_write+0x3a>
  401182:	f814 1b01 	ldrb.w	r1, [r4], #1
  401186:	f8d8 0000 	ldr.w	r0, [r8]
  40118a:	683b      	ldr	r3, [r7, #0]
  40118c:	4798      	blx	r3
  40118e:	2800      	cmp	r0, #0
  401190:	eba4 0006 	sub.w	r0, r4, r6
  401194:	daf3      	bge.n	40117e <_write+0x1a>
  401196:	f04f 30ff 	mov.w	r0, #4294967295
  40119a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40119e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4011a2:	4610      	mov	r0, r2
  4011a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4011a8:	f04f 30ff 	mov.w	r0, #4294967295
  4011ac:	4770      	bx	lr
  4011ae:	bf00      	nop
  4011b0:	2043f404 	.word	0x2043f404
  4011b4:	2043f408 	.word	0x2043f408

004011b8 <wm8904_write_register>:
 *
 * \param uc_register_address Register address to write
 * \param us_data Data to write.
 */
void wm8904_write_register(uint8_t uc_register_address, uint16_t us_data)
{
  4011b8:	b570      	push	{r4, r5, r6, lr}
  4011ba:	460b      	mov	r3, r1
  4011bc:	b086      	sub	sp, #24
	uint8_t uc_temp_data[2];
	twihs_packet_t packet;

	uc_temp_data[0] = (us_data & 0xff00) >> 8;
  4011be:	0a0e      	lsrs	r6, r1, #8

	packet.addr[0]     = uc_register_address;
	packet.addr_length = 0x1;
	packet.buffer      = uc_temp_data;
	packet.length      = 0x2;
	packet.chip        = WM8904_SLAVE_ADDRESS;
  4011c0:	221a      	movs	r2, #26
	uc_temp_data[1] = us_data & 0xff;
  4011c2:	f88d 3001 	strb.w	r3, [sp, #1]
	packet.addr_length = 0x1;
  4011c6:	2501      	movs	r5, #1
	packet.length      = 0x2;
  4011c8:	2402      	movs	r4, #2

	twihs_master_write(WM8904_TWIHS, &packet);
  4011ca:	a901      	add	r1, sp, #4
  4011cc:	4b07      	ldr	r3, [pc, #28]	; (4011ec <wm8904_write_register+0x34>)
	packet.addr[0]     = uc_register_address;
  4011ce:	f88d 0004 	strb.w	r0, [sp, #4]
	twihs_master_write(WM8904_TWIHS, &packet);
  4011d2:	4807      	ldr	r0, [pc, #28]	; (4011f0 <wm8904_write_register+0x38>)
	uc_temp_data[0] = (us_data & 0xff00) >> 8;
  4011d4:	f88d 6000 	strb.w	r6, [sp]
	packet.addr_length = 0x1;
  4011d8:	9502      	str	r5, [sp, #8]
	packet.buffer      = uc_temp_data;
  4011da:	f8cd d00c 	str.w	sp, [sp, #12]
	packet.length      = 0x2;
  4011de:	9404      	str	r4, [sp, #16]
	packet.chip        = WM8904_SLAVE_ADDRESS;
  4011e0:	f88d 2014 	strb.w	r2, [sp, #20]
	twihs_master_write(WM8904_TWIHS, &packet);
  4011e4:	4798      	blx	r3
}
  4011e6:	b006      	add	sp, #24
  4011e8:	bd70      	pop	{r4, r5, r6, pc}
  4011ea:	bf00      	nop
  4011ec:	0040155d 	.word	0x0040155d
  4011f0:	40018000 	.word	0x40018000

004011f4 <wm8904_read_register>:
 *
 * \param uc_register_address Register address to write
 * \retun Register value.
 */
uint16_t wm8904_read_register(uint8_t uc_register_address)
{
  4011f4:	b530      	push	{r4, r5, lr}
  4011f6:	b087      	sub	sp, #28

	packet.addr[0]     = uc_register_address;
	packet.addr_length = 0x1;
	packet.buffer      = uc_temp_data;
	packet.length      = 0x2;
	packet.chip        = WM8904_SLAVE_ADDRESS;
  4011f8:	221a      	movs	r2, #26
	packet.addr_length = 0x1;
  4011fa:	2501      	movs	r5, #1
	packet.length      = 0x2;
  4011fc:	2402      	movs	r4, #2
	packet.addr[0]     = uc_register_address;
  4011fe:	f88d 0004 	strb.w	r0, [sp, #4]

	twihs_master_read(WM8904_TWIHS, &packet);
  401202:	a901      	add	r1, sp, #4
  401204:	4b08      	ldr	r3, [pc, #32]	; (401228 <wm8904_read_register+0x34>)
  401206:	4809      	ldr	r0, [pc, #36]	; (40122c <wm8904_read_register+0x38>)
	packet.addr_length = 0x1;
  401208:	9502      	str	r5, [sp, #8]
	packet.buffer      = uc_temp_data;
  40120a:	f8cd d00c 	str.w	sp, [sp, #12]
	packet.length      = 0x2;
  40120e:	9404      	str	r4, [sp, #16]
	packet.chip        = WM8904_SLAVE_ADDRESS;
  401210:	f88d 2014 	strb.w	r2, [sp, #20]
	twihs_master_read(WM8904_TWIHS, &packet);
  401214:	4798      	blx	r3
	us_data = (((uint16_t)uc_temp_data[0] << 8) & 0xff00) | uc_temp_data[1];
  401216:	f89d 0000 	ldrb.w	r0, [sp]
  40121a:	f89d 3001 	ldrb.w	r3, [sp, #1]

	return us_data;
}
  40121e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  401222:	b007      	add	sp, #28
  401224:	bd30      	pop	{r4, r5, pc}
  401226:	bf00      	nop
  401228:	004014a9 	.word	0x004014a9
  40122c:	40018000 	.word	0x40018000

00401230 <wm8904_twi_init>:
 * \brief Initialize TWIHS connect to WM8904.
 *
 * \retun TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t wm8904_twi_init(void)
{
  401230:	b510      	push	{r4, lr}
	pio_configure_pin(WM8904_TK_PIO, WM8904_TK_FLAGS);
  401232:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
{
  401236:	b084      	sub	sp, #16
	pio_configure_pin(WM8904_TK_PIO, WM8904_TK_FLAGS);
  401238:	4c15      	ldr	r4, [pc, #84]	; (401290 <wm8904_twi_init+0x60>)
  40123a:	2021      	movs	r0, #33	; 0x21
  40123c:	47a0      	blx	r4
	pio_configure_pin(WM8904_TF_PIO, WM8904_TF_FLAGS);
  40123e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401242:	2020      	movs	r0, #32
  401244:	47a0      	blx	r4
	pio_configure_pin(WM8904_TD_PIO, WM8904_TD_FLAGS);
  401246:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40124a:	207a      	movs	r0, #122	; 0x7a
  40124c:	47a0      	blx	r4
	pio_configure_pin(WM8904_RK_PIO, WM8904_RK_FLAGS);
  40124e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401252:	2016      	movs	r0, #22
  401254:	47a0      	blx	r4
	pio_configure_pin(WM8904_RF_PIO, WM8904_RF_FLAGS);
  401256:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40125a:	2078      	movs	r0, #120	; 0x78
  40125c:	47a0      	blx	r4
	pio_configure_pin(WM8904_RD_PIO, WM8904_RD_FLAGS);
  40125e:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401262:	200a      	movs	r0, #10
  401264:	47a0      	blx	r4
	pio_configure_pin(WM8904_PCK2_PIO, WM8904_PCK2_FLAGS);
  401266:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40126a:	2012      	movs	r0, #18
  40126c:	47a0      	blx	r4

static inline uint32_t twihs_master_setup(twihs_master_t p_twihs,
		twihs_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
	p_opt->smbus      = 0;
  40126e:	2200      	movs	r2, #0
	p_opt->master_clk = sysclk_get_peripheral_hz();
  401270:	4908      	ldr	r1, [pc, #32]	; (401294 <wm8904_twi_init+0x64>)
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  401272:	2013      	movs	r0, #19

	twihs_options_t opt;
	opt.master_clk = sysclk_get_cpu_hz();
	opt.speed = WM8904_TWIHS_CLK;
  401274:	4c08      	ldr	r4, [pc, #32]	; (401298 <wm8904_twi_init+0x68>)
  401276:	4b09      	ldr	r3, [pc, #36]	; (40129c <wm8904_twi_init+0x6c>)
  401278:	9101      	str	r1, [sp, #4]
	p_opt->smbus      = 0;
  40127a:	f88d 200d 	strb.w	r2, [sp, #13]
  40127e:	9402      	str	r4, [sp, #8]
  401280:	4798      	blx	r3
#endif		
	} else {
		// Do Nothing
	}
#endif
	return (twihs_master_init(p_twihs, p_opt));
  401282:	a901      	add	r1, sp, #4
  401284:	4b06      	ldr	r3, [pc, #24]	; (4012a0 <wm8904_twi_init+0x70>)
  401286:	4807      	ldr	r0, [pc, #28]	; (4012a4 <wm8904_twi_init+0x74>)
  401288:	4798      	blx	r3
	return twihs_master_setup(WM8904_TWIHS, &opt);
}
  40128a:	b004      	add	sp, #16
  40128c:	bd10      	pop	{r4, pc}
  40128e:	bf00      	nop
  401290:	00401bfd 	.word	0x00401bfd
  401294:	08f0d180 	.word	0x08f0d180
  401298:	00061a80 	.word	0x00061a80
  40129c:	0040224d 	.word	0x0040224d
  4012a0:	004013c9 	.word	0x004013c9
  4012a4:	40018000 	.word	0x40018000

004012a8 <ssc_reset>:
  4012a8:	2300      	movs	r3, #0
  4012aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4012ae:	6002      	str	r2, [r0, #0]
  4012b0:	6043      	str	r3, [r0, #4]
  4012b2:	6103      	str	r3, [r0, #16]
  4012b4:	6143      	str	r3, [r0, #20]
  4012b6:	6183      	str	r3, [r0, #24]
  4012b8:	61c3      	str	r3, [r0, #28]
  4012ba:	4770      	bx	lr

004012bc <ssc_enable_rx>:
  4012bc:	2301      	movs	r3, #1
  4012be:	6003      	str	r3, [r0, #0]
  4012c0:	4770      	bx	lr
  4012c2:	bf00      	nop

004012c4 <ssc_disable_rx>:
  4012c4:	2302      	movs	r3, #2
  4012c6:	6003      	str	r3, [r0, #0]
  4012c8:	4770      	bx	lr
  4012ca:	bf00      	nop

004012cc <ssc_enable_tx>:
  4012cc:	f44f 7380 	mov.w	r3, #256	; 0x100
  4012d0:	6003      	str	r3, [r0, #0]
  4012d2:	4770      	bx	lr

004012d4 <ssc_disable_tx>:
  4012d4:	f44f 7300 	mov.w	r3, #512	; 0x200
  4012d8:	6003      	str	r3, [r0, #0]
  4012da:	4770      	bx	lr

004012dc <ssc_set_receiver>:
  4012dc:	b4f0      	push	{r4, r5, r6, r7}
  4012de:	2900      	cmp	r1, #0
  4012e0:	d02f      	beq.n	401342 <ssc_set_receiver+0x66>
  4012e2:	6904      	ldr	r4, [r0, #16]
  4012e4:	68cf      	ldr	r7, [r1, #12]
  4012e6:	698e      	ldr	r6, [r1, #24]
  4012e8:	e891 0028 	ldmia.w	r1, {r3, r5}
  4012ec:	432b      	orrs	r3, r5
  4012ee:	688d      	ldr	r5, [r1, #8]
  4012f0:	4323      	orrs	r3, r4
  4012f2:	694c      	ldr	r4, [r1, #20]
  4012f4:	432b      	orrs	r3, r5
  4012f6:	690d      	ldr	r5, [r1, #16]
  4012f8:	0421      	lsls	r1, r4, #16
  4012fa:	433b      	orrs	r3, r7
  4012fc:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
  401300:	4333      	orrs	r3, r6
  401302:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  401306:	430b      	orrs	r3, r1
  401308:	6103      	str	r3, [r0, #16]
  40130a:	b1ea      	cbz	r2, 401348 <ssc_set_receiver+0x6c>
  40130c:	6954      	ldr	r4, [r2, #20]
  40130e:	6853      	ldr	r3, [r2, #4]
  401310:	6991      	ldr	r1, [r2, #24]
  401312:	4323      	orrs	r3, r4
  401314:	6946      	ldr	r6, [r0, #20]
  401316:	6814      	ldr	r4, [r2, #0]
  401318:	430b      	orrs	r3, r1
  40131a:	6891      	ldr	r1, [r2, #8]
  40131c:	f004 041f 	and.w	r4, r4, #31
  401320:	6915      	ldr	r5, [r2, #16]
  401322:	4333      	orrs	r3, r6
  401324:	68d2      	ldr	r2, [r2, #12]
  401326:	0209      	lsls	r1, r1, #8
  401328:	4323      	orrs	r3, r4
  40132a:	0412      	lsls	r2, r2, #16
  40132c:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
  401330:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  401334:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  401338:	430b      	orrs	r3, r1
  40133a:	4313      	orrs	r3, r2
  40133c:	bcf0      	pop	{r4, r5, r6, r7}
  40133e:	6143      	str	r3, [r0, #20]
  401340:	4770      	bx	lr
  401342:	6101      	str	r1, [r0, #16]
  401344:	2a00      	cmp	r2, #0
  401346:	d1e1      	bne.n	40130c <ssc_set_receiver+0x30>
  401348:	6142      	str	r2, [r0, #20]
  40134a:	bcf0      	pop	{r4, r5, r6, r7}
  40134c:	4770      	bx	lr
  40134e:	bf00      	nop

00401350 <ssc_set_transmitter>:
  401350:	b4f0      	push	{r4, r5, r6, r7}
  401352:	2900      	cmp	r1, #0
  401354:	d02f      	beq.n	4013b6 <ssc_set_transmitter+0x66>
  401356:	6984      	ldr	r4, [r0, #24]
  401358:	68cf      	ldr	r7, [r1, #12]
  40135a:	698e      	ldr	r6, [r1, #24]
  40135c:	e891 0028 	ldmia.w	r1, {r3, r5}
  401360:	432b      	orrs	r3, r5
  401362:	688d      	ldr	r5, [r1, #8]
  401364:	4323      	orrs	r3, r4
  401366:	694c      	ldr	r4, [r1, #20]
  401368:	432b      	orrs	r3, r5
  40136a:	690d      	ldr	r5, [r1, #16]
  40136c:	0421      	lsls	r1, r4, #16
  40136e:	433b      	orrs	r3, r7
  401370:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
  401374:	4333      	orrs	r3, r6
  401376:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  40137a:	430b      	orrs	r3, r1
  40137c:	6183      	str	r3, [r0, #24]
  40137e:	b1ea      	cbz	r2, 4013bc <ssc_set_transmitter+0x6c>
  401380:	6954      	ldr	r4, [r2, #20]
  401382:	6853      	ldr	r3, [r2, #4]
  401384:	6991      	ldr	r1, [r2, #24]
  401386:	4323      	orrs	r3, r4
  401388:	69c6      	ldr	r6, [r0, #28]
  40138a:	6814      	ldr	r4, [r2, #0]
  40138c:	430b      	orrs	r3, r1
  40138e:	6891      	ldr	r1, [r2, #8]
  401390:	f004 041f 	and.w	r4, r4, #31
  401394:	6915      	ldr	r5, [r2, #16]
  401396:	4333      	orrs	r3, r6
  401398:	68d2      	ldr	r2, [r2, #12]
  40139a:	0209      	lsls	r1, r1, #8
  40139c:	4323      	orrs	r3, r4
  40139e:	0412      	lsls	r2, r2, #16
  4013a0:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
  4013a4:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  4013a8:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4013ac:	430b      	orrs	r3, r1
  4013ae:	4313      	orrs	r3, r2
  4013b0:	bcf0      	pop	{r4, r5, r6, r7}
  4013b2:	61c3      	str	r3, [r0, #28]
  4013b4:	4770      	bx	lr
  4013b6:	6181      	str	r1, [r0, #24]
  4013b8:	2a00      	cmp	r2, #0
  4013ba:	d1e1      	bne.n	401380 <ssc_set_transmitter+0x30>
  4013bc:	61c2      	str	r2, [r0, #28]
  4013be:	bcf0      	pop	{r4, r5, r6, r7}
  4013c0:	4770      	bx	lr
  4013c2:	bf00      	nop

004013c4 <ssc_disable_interrupt>:
  4013c4:	6481      	str	r1, [r0, #72]	; 0x48
  4013c6:	4770      	bx	lr

004013c8 <twihs_master_init>:
  4013c8:	b4f0      	push	{r4, r5, r6, r7}
  4013ca:	f04f 33ff 	mov.w	r3, #4294967295
  4013ce:	2680      	movs	r6, #128	; 0x80
  4013d0:	2204      	movs	r2, #4
  4013d2:	2508      	movs	r5, #8
  4013d4:	2420      	movs	r4, #32
  4013d6:	6283      	str	r3, [r0, #40]	; 0x28
  4013d8:	4b2f      	ldr	r3, [pc, #188]	; (401498 <twihs_master_init+0xd0>)
  4013da:	6a07      	ldr	r7, [r0, #32]
  4013dc:	6006      	str	r6, [r0, #0]
  4013de:	6b06      	ldr	r6, [r0, #48]	; 0x30
  4013e0:	6005      	str	r5, [r0, #0]
  4013e2:	6004      	str	r4, [r0, #0]
  4013e4:	6002      	str	r2, [r0, #0]
  4013e6:	684a      	ldr	r2, [r1, #4]
  4013e8:	429a      	cmp	r2, r3
  4013ea:	d84d      	bhi.n	401488 <twihs_master_init+0xc0>
  4013ec:	4c2b      	ldr	r4, [pc, #172]	; (40149c <twihs_master_init+0xd4>)
  4013ee:	680b      	ldr	r3, [r1, #0]
  4013f0:	42a2      	cmp	r2, r4
  4013f2:	d92e      	bls.n	401452 <twihs_master_init+0x8a>
  4013f4:	4c2a      	ldr	r4, [pc, #168]	; (4014a0 <twihs_master_init+0xd8>)
  4013f6:	492b      	ldr	r1, [pc, #172]	; (4014a4 <twihs_master_init+0xdc>)
  4013f8:	4414      	add	r4, r2
  4013fa:	fba1 2103 	umull	r2, r1, r1, r3
  4013fe:	00a4      	lsls	r4, r4, #2
  401400:	0b89      	lsrs	r1, r1, #14
  401402:	fbb3 f3f4 	udiv	r3, r3, r4
  401406:	3903      	subs	r1, #3
  401408:	3b03      	subs	r3, #3
  40140a:	29ff      	cmp	r1, #255	; 0xff
  40140c:	d940      	bls.n	401490 <twihs_master_init+0xc8>
  40140e:	2200      	movs	r2, #0
  401410:	e000      	b.n	401414 <twihs_master_init+0x4c>
  401412:	b13c      	cbz	r4, 401424 <twihs_master_init+0x5c>
  401414:	3201      	adds	r2, #1
  401416:	0849      	lsrs	r1, r1, #1
  401418:	2a06      	cmp	r2, #6
  40141a:	bf8c      	ite	hi
  40141c:	2400      	movhi	r4, #0
  40141e:	2401      	movls	r4, #1
  401420:	29ff      	cmp	r1, #255	; 0xff
  401422:	d8f6      	bhi.n	401412 <twihs_master_init+0x4a>
  401424:	2bff      	cmp	r3, #255	; 0xff
  401426:	d907      	bls.n	401438 <twihs_master_init+0x70>
  401428:	b914      	cbnz	r4, 401430 <twihs_master_init+0x68>
  40142a:	e005      	b.n	401438 <twihs_master_init+0x70>
  40142c:	2a06      	cmp	r2, #6
  40142e:	d803      	bhi.n	401438 <twihs_master_init+0x70>
  401430:	085b      	lsrs	r3, r3, #1
  401432:	3201      	adds	r2, #1
  401434:	2bff      	cmp	r3, #255	; 0xff
  401436:	d8f9      	bhi.n	40142c <twihs_master_init+0x64>
  401438:	021b      	lsls	r3, r3, #8
  40143a:	2400      	movs	r4, #0
  40143c:	0412      	lsls	r2, r2, #16
  40143e:	b29b      	uxth	r3, r3
  401440:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  401444:	b2c9      	uxtb	r1, r1
  401446:	4313      	orrs	r3, r2
  401448:	430b      	orrs	r3, r1
  40144a:	6103      	str	r3, [r0, #16]
  40144c:	4620      	mov	r0, r4
  40144e:	bcf0      	pop	{r4, r5, r6, r7}
  401450:	4770      	bx	lr
  401452:	0052      	lsls	r2, r2, #1
  401454:	fbb3 f3f2 	udiv	r3, r3, r2
  401458:	3b03      	subs	r3, #3
  40145a:	2200      	movs	r2, #0
  40145c:	2bff      	cmp	r3, #255	; 0xff
  40145e:	d802      	bhi.n	401466 <twihs_master_init+0x9e>
  401460:	e008      	b.n	401474 <twihs_master_init+0xac>
  401462:	2a06      	cmp	r2, #6
  401464:	d803      	bhi.n	40146e <twihs_master_init+0xa6>
  401466:	085b      	lsrs	r3, r3, #1
  401468:	3201      	adds	r2, #1
  40146a:	2bff      	cmp	r3, #255	; 0xff
  40146c:	d8f9      	bhi.n	401462 <twihs_master_init+0x9a>
  40146e:	0412      	lsls	r2, r2, #16
  401470:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  401474:	0219      	lsls	r1, r3, #8
  401476:	2400      	movs	r4, #0
  401478:	b2db      	uxtb	r3, r3
  40147a:	b289      	uxth	r1, r1
  40147c:	4313      	orrs	r3, r2
  40147e:	430b      	orrs	r3, r1
  401480:	6103      	str	r3, [r0, #16]
  401482:	4620      	mov	r0, r4
  401484:	bcf0      	pop	{r4, r5, r6, r7}
  401486:	4770      	bx	lr
  401488:	2401      	movs	r4, #1
  40148a:	4620      	mov	r0, r4
  40148c:	bcf0      	pop	{r4, r5, r6, r7}
  40148e:	4770      	bx	lr
  401490:	2401      	movs	r4, #1
  401492:	2200      	movs	r2, #0
  401494:	e7c6      	b.n	401424 <twihs_master_init+0x5c>
  401496:	bf00      	nop
  401498:	00061a80 	.word	0x00061a80
  40149c:	0005dc00 	.word	0x0005dc00
  4014a0:	3ffd1200 	.word	0x3ffd1200
  4014a4:	057619f1 	.word	0x057619f1

004014a8 <twihs_master_read>:
  4014a8:	68ca      	ldr	r2, [r1, #12]
  4014aa:	2a00      	cmp	r2, #0
  4014ac:	d053      	beq.n	401556 <twihs_master_read+0xae>
  4014ae:	b470      	push	{r4, r5, r6}
  4014b0:	2600      	movs	r6, #0
  4014b2:	688c      	ldr	r4, [r1, #8]
  4014b4:	6046      	str	r6, [r0, #4]
  4014b6:	684b      	ldr	r3, [r1, #4]
  4014b8:	7c0d      	ldrb	r5, [r1, #16]
  4014ba:	021b      	lsls	r3, r3, #8
  4014bc:	042d      	lsls	r5, r5, #16
  4014be:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4014c2:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  4014c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4014ca:	432b      	orrs	r3, r5
  4014cc:	6043      	str	r3, [r0, #4]
  4014ce:	60c6      	str	r6, [r0, #12]
  4014d0:	684b      	ldr	r3, [r1, #4]
  4014d2:	b99b      	cbnz	r3, 4014fc <twihs_master_read+0x54>
  4014d4:	461d      	mov	r5, r3
  4014d6:	2301      	movs	r3, #1
  4014d8:	60c5      	str	r5, [r0, #12]
  4014da:	6003      	str	r3, [r0, #0]
  4014dc:	6a03      	ldr	r3, [r0, #32]
  4014de:	05d9      	lsls	r1, r3, #23
  4014e0:	d41f      	bmi.n	401522 <twihs_master_read+0x7a>
  4014e2:	2a01      	cmp	r2, #1
  4014e4:	d020      	beq.n	401528 <twihs_master_read+0x80>
  4014e6:	f247 5130 	movw	r1, #30000	; 0x7530
  4014ea:	079e      	lsls	r6, r3, #30
  4014ec:	d412      	bmi.n	401514 <twihs_master_read+0x6c>
  4014ee:	6a03      	ldr	r3, [r0, #32]
  4014f0:	05dd      	lsls	r5, r3, #23
  4014f2:	d416      	bmi.n	401522 <twihs_master_read+0x7a>
  4014f4:	3901      	subs	r1, #1
  4014f6:	d1f8      	bne.n	4014ea <twihs_master_read+0x42>
  4014f8:	2009      	movs	r0, #9
  4014fa:	e02a      	b.n	401552 <twihs_master_read+0xaa>
  4014fc:	2b01      	cmp	r3, #1
  4014fe:	780d      	ldrb	r5, [r1, #0]
  401500:	dde9      	ble.n	4014d6 <twihs_master_read+0x2e>
  401502:	784e      	ldrb	r6, [r1, #1]
  401504:	2b02      	cmp	r3, #2
  401506:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
  40150a:	d0e4      	beq.n	4014d6 <twihs_master_read+0x2e>
  40150c:	788b      	ldrb	r3, [r1, #2]
  40150e:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
  401512:	e7e0      	b.n	4014d6 <twihs_master_read+0x2e>
  401514:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401516:	3a01      	subs	r2, #1
  401518:	f804 3b01 	strb.w	r3, [r4], #1
  40151c:	6a03      	ldr	r3, [r0, #32]
  40151e:	05d9      	lsls	r1, r3, #23
  401520:	d5df      	bpl.n	4014e2 <twihs_master_read+0x3a>
  401522:	2005      	movs	r0, #5
  401524:	bc70      	pop	{r4, r5, r6}
  401526:	4770      	bx	lr
  401528:	2102      	movs	r1, #2
  40152a:	079d      	lsls	r5, r3, #30
  40152c:	f247 5230 	movw	r2, #30000	; 0x7530
  401530:	6001      	str	r1, [r0, #0]
  401532:	d407      	bmi.n	401544 <twihs_master_read+0x9c>
  401534:	6a03      	ldr	r3, [r0, #32]
  401536:	05de      	lsls	r6, r3, #23
  401538:	d4f3      	bmi.n	401522 <twihs_master_read+0x7a>
  40153a:	3a01      	subs	r2, #1
  40153c:	d0dc      	beq.n	4014f8 <twihs_master_read+0x50>
  40153e:	079d      	lsls	r5, r3, #30
  401540:	6001      	str	r1, [r0, #0]
  401542:	d5f7      	bpl.n	401534 <twihs_master_read+0x8c>
  401544:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401546:	7023      	strb	r3, [r4, #0]
  401548:	6a03      	ldr	r3, [r0, #32]
  40154a:	07db      	lsls	r3, r3, #31
  40154c:	d5fc      	bpl.n	401548 <twihs_master_read+0xa0>
  40154e:	6a03      	ldr	r3, [r0, #32]
  401550:	2000      	movs	r0, #0
  401552:	bc70      	pop	{r4, r5, r6}
  401554:	4770      	bx	lr
  401556:	2001      	movs	r0, #1
  401558:	4770      	bx	lr
  40155a:	bf00      	nop

0040155c <twihs_master_write>:
  40155c:	4603      	mov	r3, r0
  40155e:	68c8      	ldr	r0, [r1, #12]
  401560:	2800      	cmp	r0, #0
  401562:	d034      	beq.n	4015ce <twihs_master_write+0x72>
  401564:	b470      	push	{r4, r5, r6}
  401566:	2600      	movs	r6, #0
  401568:	688c      	ldr	r4, [r1, #8]
  40156a:	605e      	str	r6, [r3, #4]
  40156c:	7c0a      	ldrb	r2, [r1, #16]
  40156e:	684d      	ldr	r5, [r1, #4]
  401570:	0412      	lsls	r2, r2, #16
  401572:	022d      	lsls	r5, r5, #8
  401574:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
  401578:	f405 7540 	and.w	r5, r5, #768	; 0x300
  40157c:	432a      	orrs	r2, r5
  40157e:	605a      	str	r2, [r3, #4]
  401580:	60de      	str	r6, [r3, #12]
  401582:	684a      	ldr	r2, [r1, #4]
  401584:	b98a      	cbnz	r2, 4015aa <twihs_master_write+0x4e>
  401586:	4615      	mov	r5, r2
  401588:	60dd      	str	r5, [r3, #12]
  40158a:	6a1a      	ldr	r2, [r3, #32]
  40158c:	05d6      	lsls	r6, r2, #23
  40158e:	d409      	bmi.n	4015a4 <twihs_master_write+0x48>
  401590:	0755      	lsls	r5, r2, #29
  401592:	d5fa      	bpl.n	40158a <twihs_master_write+0x2e>
  401594:	f814 2b01 	ldrb.w	r2, [r4], #1
  401598:	3801      	subs	r0, #1
  40159a:	635a      	str	r2, [r3, #52]	; 0x34
  40159c:	d013      	beq.n	4015c6 <twihs_master_write+0x6a>
  40159e:	6a1a      	ldr	r2, [r3, #32]
  4015a0:	05d6      	lsls	r6, r2, #23
  4015a2:	d5f5      	bpl.n	401590 <twihs_master_write+0x34>
  4015a4:	2005      	movs	r0, #5
  4015a6:	bc70      	pop	{r4, r5, r6}
  4015a8:	4770      	bx	lr
  4015aa:	2a01      	cmp	r2, #1
  4015ac:	780d      	ldrb	r5, [r1, #0]
  4015ae:	ddeb      	ble.n	401588 <twihs_master_write+0x2c>
  4015b0:	784e      	ldrb	r6, [r1, #1]
  4015b2:	2a02      	cmp	r2, #2
  4015b4:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
  4015b8:	d0e6      	beq.n	401588 <twihs_master_write+0x2c>
  4015ba:	788a      	ldrb	r2, [r1, #2]
  4015bc:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
  4015c0:	e7e2      	b.n	401588 <twihs_master_write+0x2c>
  4015c2:	0751      	lsls	r1, r2, #29
  4015c4:	d405      	bmi.n	4015d2 <twihs_master_write+0x76>
  4015c6:	6a1a      	ldr	r2, [r3, #32]
  4015c8:	05d4      	lsls	r4, r2, #23
  4015ca:	d4eb      	bmi.n	4015a4 <twihs_master_write+0x48>
  4015cc:	e7f9      	b.n	4015c2 <twihs_master_write+0x66>
  4015ce:	2001      	movs	r0, #1
  4015d0:	4770      	bx	lr
  4015d2:	2202      	movs	r2, #2
  4015d4:	601a      	str	r2, [r3, #0]
  4015d6:	6a1a      	ldr	r2, [r3, #32]
  4015d8:	07d2      	lsls	r2, r2, #31
  4015da:	d5fc      	bpl.n	4015d6 <twihs_master_write+0x7a>
  4015dc:	bc70      	pop	{r4, r5, r6}
  4015de:	4770      	bx	lr

004015e0 <usart_init_rs232>:
  4015e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4015e2:	4603      	mov	r3, r0
  4015e4:	4c24      	ldr	r4, [pc, #144]	; (401678 <usart_init_rs232+0x98>)
  4015e6:	2000      	movs	r0, #0
  4015e8:	f04f 0e88 	mov.w	lr, #136	; 0x88
  4015ec:	f8c3 40e4 	str.w	r4, [r3, #228]	; 0xe4
  4015f0:	2724      	movs	r7, #36	; 0x24
  4015f2:	f44f 7680 	mov.w	r6, #256	; 0x100
  4015f6:	f44f 2500 	mov.w	r5, #524288	; 0x80000
  4015fa:	4c20      	ldr	r4, [pc, #128]	; (40167c <usart_init_rs232+0x9c>)
  4015fc:	6058      	str	r0, [r3, #4]
  4015fe:	6020      	str	r0, [r4, #0]
  401600:	6258      	str	r0, [r3, #36]	; 0x24
  401602:	6298      	str	r0, [r3, #40]	; 0x28
  401604:	f8c3 e000 	str.w	lr, [r3]
  401608:	601f      	str	r7, [r3, #0]
  40160a:	601e      	str	r6, [r3, #0]
  40160c:	601d      	str	r5, [r3, #0]
  40160e:	b361      	cbz	r1, 40166a <usart_init_rs232+0x8a>
  401610:	6808      	ldr	r0, [r1, #0]
  401612:	0105      	lsls	r5, r0, #4
  401614:	42aa      	cmp	r2, r5
  401616:	d31c      	bcc.n	401652 <usart_init_rs232+0x72>
  401618:	0868      	lsrs	r0, r5, #1
  40161a:	f64f 76fe 	movw	r6, #65534	; 0xfffe
  40161e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
  401622:	fbb2 f2f5 	udiv	r2, r2, r5
  401626:	08d5      	lsrs	r5, r2, #3
  401628:	1e68      	subs	r0, r5, #1
  40162a:	42b0      	cmp	r0, r6
  40162c:	d81d      	bhi.n	40166a <usart_init_rs232+0x8a>
  40162e:	0412      	lsls	r2, r2, #16
  401630:	2000      	movs	r0, #0
  401632:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  401636:	432a      	orrs	r2, r5
  401638:	621a      	str	r2, [r3, #32]
  40163a:	684d      	ldr	r5, [r1, #4]
  40163c:	688a      	ldr	r2, [r1, #8]
  40163e:	690f      	ldr	r7, [r1, #16]
  401640:	432a      	orrs	r2, r5
  401642:	68ce      	ldr	r6, [r1, #12]
  401644:	6859      	ldr	r1, [r3, #4]
  401646:	433a      	orrs	r2, r7
  401648:	4332      	orrs	r2, r6
  40164a:	4311      	orrs	r1, r2
  40164c:	6022      	str	r2, [r4, #0]
  40164e:	6059      	str	r1, [r3, #4]
  401650:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401652:	00c0      	lsls	r0, r0, #3
  401654:	f64f 76fe 	movw	r6, #65534	; 0xfffe
  401658:	00d2      	lsls	r2, r2, #3
  40165a:	eb02 0250 	add.w	r2, r2, r0, lsr #1
  40165e:	fbb2 f2f0 	udiv	r2, r2, r0
  401662:	08d5      	lsrs	r5, r2, #3
  401664:	1e68      	subs	r0, r5, #1
  401666:	42b0      	cmp	r0, r6
  401668:	d901      	bls.n	40166e <usart_init_rs232+0x8e>
  40166a:	2001      	movs	r0, #1
  40166c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40166e:	6858      	ldr	r0, [r3, #4]
  401670:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
  401674:	6058      	str	r0, [r3, #4]
  401676:	e7da      	b.n	40162e <usart_init_rs232+0x4e>
  401678:	55534100 	.word	0x55534100
  40167c:	2041509c 	.word	0x2041509c

00401680 <usart_enable_tx>:
  401680:	2340      	movs	r3, #64	; 0x40
  401682:	6003      	str	r3, [r0, #0]
  401684:	4770      	bx	lr
  401686:	bf00      	nop

00401688 <usart_enable_rx>:
  401688:	2310      	movs	r3, #16
  40168a:	6003      	str	r3, [r0, #0]
  40168c:	4770      	bx	lr
  40168e:	bf00      	nop

00401690 <usart_enable_interrupt>:
  401690:	6081      	str	r1, [r0, #8]
  401692:	4770      	bx	lr

00401694 <usart_get_status>:
  401694:	6940      	ldr	r0, [r0, #20]
  401696:	4770      	bx	lr

00401698 <usart_write>:
  401698:	6942      	ldr	r2, [r0, #20]
  40169a:	4603      	mov	r3, r0
  40169c:	0792      	lsls	r2, r2, #30
  40169e:	d504      	bpl.n	4016aa <usart_write+0x12>
  4016a0:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4016a4:	2000      	movs	r0, #0
  4016a6:	61d9      	str	r1, [r3, #28]
  4016a8:	4770      	bx	lr
  4016aa:	2001      	movs	r0, #1
  4016ac:	4770      	bx	lr
  4016ae:	bf00      	nop

004016b0 <usart_read>:
  4016b0:	6943      	ldr	r3, [r0, #20]
  4016b2:	07db      	lsls	r3, r3, #31
  4016b4:	d505      	bpl.n	4016c2 <usart_read+0x12>
  4016b6:	6983      	ldr	r3, [r0, #24]
  4016b8:	2000      	movs	r0, #0
  4016ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4016be:	600b      	str	r3, [r1, #0]
  4016c0:	4770      	bx	lr
  4016c2:	2001      	movs	r0, #1
  4016c4:	4770      	bx	lr
  4016c6:	bf00      	nop

004016c8 <xdmac_configure_transfer>:
  4016c8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4016cc:	6853      	ldr	r3, [r2, #4]
  4016ce:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
  4016d0:	660b      	str	r3, [r1, #96]	; 0x60
  4016d2:	6893      	ldr	r3, [r2, #8]
  4016d4:	664b      	str	r3, [r1, #100]	; 0x64
  4016d6:	6813      	ldr	r3, [r2, #0]
  4016d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4016dc:	670b      	str	r3, [r1, #112]	; 0x70
  4016de:	6913      	ldr	r3, [r2, #16]
  4016e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4016e4:	674b      	str	r3, [r1, #116]	; 0x74
  4016e6:	6953      	ldr	r3, [r2, #20]
  4016e8:	67cb      	str	r3, [r1, #124]	; 0x7c
  4016ea:	6993      	ldr	r3, [r2, #24]
  4016ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4016f0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
  4016f4:	69d3      	ldr	r3, [r2, #28]
  4016f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4016fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  4016fe:	68d3      	ldr	r3, [r2, #12]
  401700:	678b      	str	r3, [r1, #120]	; 0x78
  401702:	4770      	bx	lr

00401704 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401704:	b570      	push	{r4, r5, r6, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401706:	4810      	ldr	r0, [pc, #64]	; (401748 <sysclk_init+0x44>)
  401708:	4d10      	ldr	r5, [pc, #64]	; (40174c <sysclk_init+0x48>)
  40170a:	47a8      	blx	r5
	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
		break;

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  40170c:	2020      	movs	r0, #32
  40170e:	4b10      	ldr	r3, [pc, #64]	; (401750 <sysclk_init+0x4c>)
  401710:	4c10      	ldr	r4, [pc, #64]	; (401754 <sysclk_init+0x50>)
  401712:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  401714:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  401716:	2800      	cmp	r0, #0
  401718:	d0fc      	beq.n	401714 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40171a:	4b0f      	ldr	r3, [pc, #60]	; (401758 <sysclk_init+0x54>)
  40171c:	4798      	blx	r3
  40171e:	4c0f      	ldr	r4, [pc, #60]	; (40175c <sysclk_init+0x58>)
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401720:	4b0f      	ldr	r3, [pc, #60]	; (401760 <sysclk_init+0x5c>)
  401722:	4a10      	ldr	r2, [pc, #64]	; (401764 <sysclk_init+0x60>)
  401724:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  401726:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401728:	2800      	cmp	r0, #0
  40172a:	d0fc      	beq.n	401726 <sysclk_init+0x22>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  40172c:	2002      	movs	r0, #2
  40172e:	4b0e      	ldr	r3, [pc, #56]	; (401768 <sysclk_init+0x64>)
  401730:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401732:	4b0e      	ldr	r3, [pc, #56]	; (40176c <sysclk_init+0x68>)
  401734:	2000      	movs	r0, #0
  401736:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401738:	4b0d      	ldr	r3, [pc, #52]	; (401770 <sysclk_init+0x6c>)
  40173a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40173c:	462b      	mov	r3, r5
  40173e:	4802      	ldr	r0, [pc, #8]	; (401748 <sysclk_init+0x44>)

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  401740:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	system_init_flash(sysclk_get_cpu_hz());
  401744:	4718      	bx	r3
  401746:	bf00      	nop
  401748:	11e1a300 	.word	0x11e1a300
  40174c:	004024b9 	.word	0x004024b9
  401750:	004021d1 	.word	0x004021d1
  401754:	0040221d 	.word	0x0040221d
  401758:	0040222d 	.word	0x0040222d
  40175c:	0040223d 	.word	0x0040223d
  401760:	400e0600 	.word	0x400e0600
  401764:	20183f01 	.word	0x20183f01
  401768:	0040214d 	.word	0x0040214d
  40176c:	0040217d 	.word	0x0040217d
  401770:	004023d1 	.word	0x004023d1

00401774 <board_init>:

void board_init(void)
{
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401774:	4ba4      	ldr	r3, [pc, #656]	; (401a08 <board_init+0x294>)
  401776:	f44f 4200 	mov.w	r2, #32768	; 0x8000
{
  40177a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	WDT->WDT_MR = WDT_MR_WDDIS;
  40177e:	605a      	str	r2, [r3, #4]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401780:	f3bf 8f5f 	dmb	sy
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  401784:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 401a7c <board_init+0x308>
	dw_region_attr =
  401788:	4fa0      	ldr	r7, [pc, #640]	; (401a0c <board_init+0x298>)
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  40178a:	4ea1      	ldr	r6, [pc, #644]	; (401a10 <board_init+0x29c>)
  40178c:	4640      	mov	r0, r8
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40178e:	4da1      	ldr	r5, [pc, #644]	; (401a14 <board_init+0x2a0>)
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  401790:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401792:	ea40 0107 	orr.w	r1, r0, r7
  401796:	2011      	movs	r0, #17
  401798:	47a8      	blx	r5
		mpu_cal_mpu_region_size(IFLASH_END_ADDRESS - IFLASH_START_ADDRESS) |
  40179a:	489f      	ldr	r0, [pc, #636]	; (401a18 <board_init+0x2a4>)
  40179c:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40179e:	499f      	ldr	r1, [pc, #636]	; (401a1c <board_init+0x2a8>)
	dw_region_attr =
  4017a0:	4c9f      	ldr	r4, [pc, #636]	; (401a20 <board_init+0x2ac>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4017a2:	4301      	orrs	r1, r0
  4017a4:	489f      	ldr	r0, [pc, #636]	; (401a24 <board_init+0x2b0>)
  4017a6:	47a8      	blx	r5
		mpu_cal_mpu_region_size(DTCM_END_ADDRESS - DTCM_START_ADDRESS) |
  4017a8:	4640      	mov	r0, r8
  4017aa:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4017ac:	ea40 0107 	orr.w	r1, r0, r7
  4017b0:	489d      	ldr	r0, [pc, #628]	; (401a28 <board_init+0x2b4>)
  4017b2:	47a8      	blx	r5
		mpu_cal_mpu_region_size(SRAM_FIRST_END_ADDRESS - SRAM_FIRST_START_ADDRESS)
  4017b4:	489d      	ldr	r0, [pc, #628]	; (401a2c <board_init+0x2b8>)
  4017b6:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4017b8:	ea40 0104 	orr.w	r1, r0, r4
  4017bc:	489c      	ldr	r0, [pc, #624]	; (401a30 <board_init+0x2bc>)
  4017be:	47a8      	blx	r5
		mpu_cal_mpu_region_size(SRAM_SECOND_END_ADDRESS - SRAM_SECOND_START_ADDRESS) |
  4017c0:	489c      	ldr	r0, [pc, #624]	; (401a34 <board_init+0x2c0>)
  4017c2:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4017c4:	ea40 0104 	orr.w	r1, r0, r4
  4017c8:	489b      	ldr	r0, [pc, #620]	; (401a38 <board_init+0x2c4>)
  4017ca:	47a8      	blx	r5
		mpu_cal_mpu_region_size(PERIPHERALS_END_ADDRESS - PERIPHERALS_START_ADDRESS)
  4017cc:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  4017d0:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4017d2:	499a      	ldr	r1, [pc, #616]	; (401a3c <board_init+0x2c8>)
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  4017d4:	4c9a      	ldr	r4, [pc, #616]	; (401a40 <board_init+0x2cc>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4017d6:	4301      	orrs	r1, r0
  4017d8:	489a      	ldr	r0, [pc, #616]	; (401a44 <board_init+0x2d0>)
  4017da:	47a8      	blx	r5
		mpu_cal_mpu_region_size(EXT_EBI_END_ADDRESS - EXT_EBI_START_ADDRESS) |
  4017dc:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  4017e0:	47b0      	blx	r6
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4017e2:	4999      	ldr	r1, [pc, #612]	; (401a48 <board_init+0x2d4>)
  4017e4:	4301      	orrs	r1, r0
  4017e6:	4899      	ldr	r0, [pc, #612]	; (401a4c <board_init+0x2d8>)
  4017e8:	47a8      	blx	r5
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  4017ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  4017ec:	2005      	movs	r0, #5
  4017ee:	4a98      	ldr	r2, [pc, #608]	; (401a50 <board_init+0x2dc>)
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  4017f0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
  4017f4:	6263      	str	r3, [r4, #36]	; 0x24
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  4017f6:	4790      	blx	r2
  __ASM volatile ("dsb");
  4017f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4017fc:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb");
  401800:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401804:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  401808:	f04f 0900 	mov.w	r9, #0
  40180c:	f8c4 9250 	str.w	r9, [r4, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  401810:	6963      	ldr	r3, [r4, #20]
  401812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  401816:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb");
  401818:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40181c:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401820:	4b8c      	ldr	r3, [pc, #560]	; (401a54 <board_init+0x2e0>)
  401822:	498d      	ldr	r1, [pc, #564]	; (401a58 <board_init+0x2e4>)
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401824:	4a8d      	ldr	r2, [pc, #564]	; (401a5c <board_init+0x2e8>)
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401826:	6059      	str	r1, [r3, #4]
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401828:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  40182a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40182e:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  401832:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  401836:	f023 0301 	bic.w	r3, r3, #1
  40183a:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  40183e:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
  401842:	f023 0301 	bic.w	r3, r3, #1
  401846:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  __ASM volatile ("dsb");
  40184a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40184e:	f3bf 8f6f 	isb	sy
  401852:	4c83      	ldr	r4, [pc, #524]	; (401a60 <board_init+0x2ec>)
  401854:	200a      	movs	r0, #10
  401856:	47a0      	blx	r4
  401858:	200b      	movs	r0, #11
  40185a:	47a0      	blx	r4
  40185c:	200c      	movs	r0, #12
  40185e:	47a0      	blx	r4
  401860:	2010      	movs	r0, #16
  401862:	47a0      	blx	r4
  401864:	2011      	movs	r0, #17
  401866:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401868:	f44f 7500 	mov.w	r5, #512	; 0x200
  40186c:	4c7d      	ldr	r4, [pc, #500]	; (401a64 <board_init+0x2f0>)
  40186e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  401872:	4f7d      	ldr	r7, [pc, #500]	; (401a68 <board_init+0x2f4>)
		base->PIO_PUDR = mask;
  401874:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401878:	6123      	str	r3, [r4, #16]
		base->PIO_PUDR = mask;
  40187a:	2610      	movs	r6, #16
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40187c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_PUDR = mask;
  401880:	f04f 0e08 	mov.w	lr, #8
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401884:	6323      	str	r3, [r4, #48]	; 0x30
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  401886:	4638      	mov	r0, r7
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401888:	613d      	str	r5, [r7, #16]
  40188a:	464b      	mov	r3, r9
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40188c:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
  401890:	f44f 5200 	mov.w	r2, #8192	; 0x2000
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401894:	633d      	str	r5, [r7, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401896:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401898:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  40189c:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40189e:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4018a2:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  4018a4:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  4018a6:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4018aa:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4018ae:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 401a80 <board_init+0x30c>
  4018b2:	f42c 7c00 	bic.w	ip, ip, #512	; 0x200
  4018b6:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4018ba:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  4018be:	f42c 7c00 	bic.w	ip, ip, #512	; 0x200
  4018c2:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4018c6:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4018ca:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4018ce:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4018d2:	6621      	str	r1, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4018d4:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4018d8:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4018da:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4018dc:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4018e0:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  4018e4:	f42c 1c00 	bic.w	ip, ip, #2097152	; 0x200000
  4018e8:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4018ec:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  4018f0:	f42c 1c00 	bic.w	ip, ip, #2097152	; 0x200000
  4018f4:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4018f8:	6061      	str	r1, [r4, #4]
  4018fa:	f8d8 1114 	ldr.w	r1, [r8, #276]	; 0x114
  4018fe:	ea41 0c06 	orr.w	ip, r1, r6
		base->PIO_PUDR = mask;
  401902:	495a      	ldr	r1, [pc, #360]	; (401a6c <board_init+0x2f8>)
  401904:	f8c8 c114 	str.w	ip, [r8, #276]	; 0x114
  401908:	660e      	str	r6, [r1, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40190a:	f8c1 6090 	str.w	r6, [r1, #144]	; 0x90
		base->PIO_MDDR = mask;
  40190e:	654e      	str	r6, [r1, #84]	; 0x54
		base->PIO_IFDR = mask;
  401910:	624e      	str	r6, [r1, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401912:	f8c1 6080 	str.w	r6, [r1, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401916:	f8d1 c070 	ldr.w	ip, [r1, #112]	; 0x70
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  40191a:	f8df 8168 	ldr.w	r8, [pc, #360]	; 401a84 <board_init+0x310>
  40191e:	ea4c 0c06 	orr.w	ip, ip, r6
  401922:	f8c1 c070 	str.w	ip, [r1, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401926:	f8d1 c074 	ldr.w	ip, [r1, #116]	; 0x74
  40192a:	ea4c 0c06 	orr.w	ip, ip, r6
  40192e:	f8c1 c074 	str.w	ip, [r1, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401932:	604e      	str	r6, [r1, #4]
  401934:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
		base->PIO_PUDR = mask;
  401938:	f8c4 e060 	str.w	lr, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40193c:	f8c4 e090 	str.w	lr, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401940:	f8c4 e054 	str.w	lr, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401944:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401948:	f8c4 e080 	str.w	lr, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40194c:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  401950:	f02c 0c08 	bic.w	ip, ip, #8
  401954:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401958:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40195c:	f02c 0c08 	bic.w	ip, ip, #8
  401960:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401964:	f8c4 e004 	str.w	lr, [r4, #4]
		base->PIO_PUDR = mask;
  401968:	6626      	str	r6, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40196a:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40196e:	6566      	str	r6, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401970:	6266      	str	r6, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401972:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401976:	f8d4 e070 	ldr.w	lr, [r4, #112]	; 0x70
  40197a:	f02e 0e10 	bic.w	lr, lr, #16
  40197e:	f8c4 e070 	str.w	lr, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401982:	f8d4 e074 	ldr.w	lr, [r4, #116]	; 0x74
  401986:	f02e 0e10 	bic.w	lr, lr, #16
  40198a:	f8c4 e074 	str.w	lr, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40198e:	6066      	str	r6, [r4, #4]
  401990:	47c0      	blx	r8
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  401992:	464b      	mov	r3, r9
  401994:	4638      	mov	r0, r7
  401996:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40199a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40199e:	47c0      	blx	r8
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  4019a0:	4638      	mov	r0, r7
  4019a2:	2301      	movs	r3, #1
  4019a4:	22ff      	movs	r2, #255	; 0xff
  4019a6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4019aa:	47c0      	blx	r8
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  4019ac:	2301      	movs	r3, #1
  4019ae:	223f      	movs	r2, #63	; 0x3f
  4019b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4019b4:	482e      	ldr	r0, [pc, #184]	; (401a70 <board_init+0x2fc>)
  4019b6:	47c0      	blx	r8
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  4019b8:	4620      	mov	r0, r4
  4019ba:	2301      	movs	r3, #1
  4019bc:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  4019c0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4019c4:	47c0      	blx	r8
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  4019c6:	4638      	mov	r0, r7
  4019c8:	2301      	movs	r3, #1
  4019ca:	f44f 7280 	mov.w	r2, #256	; 0x100
  4019ce:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4019d2:	47c0      	blx	r8
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  4019d4:	4638      	mov	r0, r7
  4019d6:	2301      	movs	r3, #1
  4019d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4019dc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4019e0:	47c0      	blx	r8
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  4019e2:	2301      	movs	r3, #1
  4019e4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4019e8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4019ec:	4821      	ldr	r0, [pc, #132]	; (401a74 <board_init+0x300>)
  4019ee:	47c0      	blx	r8
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  4019f0:	464b      	mov	r3, r9
  4019f2:	462a      	mov	r2, r5
  4019f4:	4638      	mov	r0, r7
  4019f6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4019fa:	47c0      	blx	r8
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  4019fc:	4629      	mov	r1, r5
  4019fe:	4638      	mov	r0, r7
  401a00:	4b1d      	ldr	r3, [pc, #116]	; (401a78 <board_init+0x304>)
	pio_configure_pin(ISI_PCK_PIO, ISI_PCK_FLAGS);
	pio_configure_pin(ISI_PCK0_PIO, ISI_PCK0_FLAGS);
	pio_configure_pin(OV_PWD_GPIO, OV_PWD_FLAGS);
	pio_configure_pin(OV_RST_GPIO, OV_RST_FLAGS);
#endif
}
  401a02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  401a06:	4718      	bx	r3
  401a08:	400e1850 	.word	0x400e1850
  401a0c:	01000001 	.word	0x01000001
  401a10:	00401aa1 	.word	0x00401aa1
  401a14:	00401a95 	.word	0x00401a95
  401a18:	001fffff 	.word	0x001fffff
  401a1c:	06230001 	.word	0x06230001
  401a20:	03230001 	.word	0x03230001
  401a24:	00400012 	.word	0x00400012
  401a28:	20000013 	.word	0x20000013
  401a2c:	0003ffff 	.word	0x0003ffff
  401a30:	20400014 	.word	0x20400014
  401a34:	0001ffff 	.word	0x0001ffff
  401a38:	20440015 	.word	0x20440015
  401a3c:	13010001 	.word	0x13010001
  401a40:	e000ed00 	.word	0xe000ed00
  401a44:	40000016 	.word	0x40000016
  401a48:	03000001 	.word	0x03000001
  401a4c:	60000017 	.word	0x60000017
  401a50:	00401a89 	.word	0x00401a89
  401a54:	400e0c00 	.word	0x400e0c00
  401a58:	5a00080c 	.word	0x5a00080c
  401a5c:	5a00070c 	.word	0x5a00070c
  401a60:	0040224d 	.word	0x0040224d
  401a64:	400e0e00 	.word	0x400e0e00
  401a68:	400e1200 	.word	0x400e1200
  401a6c:	400e1000 	.word	0x400e1000
  401a70:	400e1600 	.word	0x400e1600
  401a74:	400e1400 	.word	0x400e1400
  401a78:	00401ac5 	.word	0x00401ac5
  401a7c:	003fffff 	.word	0x003fffff
  401a80:	40088000 	.word	0x40088000
  401a84:	00401ac9 	.word	0x00401ac9

00401a88 <mpu_enable>:
  401a88:	4b01      	ldr	r3, [pc, #4]	; (401a90 <mpu_enable+0x8>)
  401a8a:	6058      	str	r0, [r3, #4]
  401a8c:	4770      	bx	lr
  401a8e:	bf00      	nop
  401a90:	e000ed90 	.word	0xe000ed90

00401a94 <mpu_set_region>:
  401a94:	4b01      	ldr	r3, [pc, #4]	; (401a9c <mpu_set_region+0x8>)
  401a96:	60d8      	str	r0, [r3, #12]
  401a98:	6119      	str	r1, [r3, #16]
  401a9a:	4770      	bx	lr
  401a9c:	e000ed90 	.word	0xe000ed90

00401aa0 <mpu_cal_mpu_region_size>:
  401aa0:	2820      	cmp	r0, #32
  401aa2:	d90d      	bls.n	401ac0 <mpu_cal_mpu_region_size+0x20>
  401aa4:	2240      	movs	r2, #64	; 0x40
  401aa6:	2305      	movs	r3, #5
  401aa8:	e002      	b.n	401ab0 <mpu_cal_mpu_region_size+0x10>
  401aaa:	3301      	adds	r3, #1
  401aac:	2b1f      	cmp	r3, #31
  401aae:	d005      	beq.n	401abc <mpu_cal_mpu_region_size+0x1c>
  401ab0:	4290      	cmp	r0, r2
  401ab2:	ea4f 0242 	mov.w	r2, r2, lsl #1
  401ab6:	d8f8      	bhi.n	401aaa <mpu_cal_mpu_region_size+0xa>
  401ab8:	0058      	lsls	r0, r3, #1
  401aba:	4770      	bx	lr
  401abc:	203e      	movs	r0, #62	; 0x3e
  401abe:	4770      	bx	lr
  401ac0:	2008      	movs	r0, #8
  401ac2:	4770      	bx	lr

00401ac4 <pio_set>:
  401ac4:	6301      	str	r1, [r0, #48]	; 0x30
  401ac6:	4770      	bx	lr

00401ac8 <pio_configure>:
  401ac8:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401acc:	b430      	push	{r4, r5}
  401ace:	d03b      	beq.n	401b48 <pio_configure+0x80>
  401ad0:	d931      	bls.n	401b36 <pio_configure+0x6e>
  401ad2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401ad6:	d01b      	beq.n	401b10 <pio_configure+0x48>
  401ad8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401adc:	d018      	beq.n	401b10 <pio_configure+0x48>
  401ade:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401ae2:	d003      	beq.n	401aec <pio_configure+0x24>
  401ae4:	2300      	movs	r3, #0
  401ae6:	bc30      	pop	{r4, r5}
  401ae8:	4618      	mov	r0, r3
  401aea:	4770      	bx	lr
  401aec:	07dd      	lsls	r5, r3, #31
  401aee:	6442      	str	r2, [r0, #68]	; 0x44
  401af0:	d448      	bmi.n	401b84 <pio_configure+0xbc>
  401af2:	f013 0f0a 	tst.w	r3, #10
  401af6:	6602      	str	r2, [r0, #96]	; 0x60
  401af8:	d048      	beq.n	401b8c <pio_configure+0xc4>
  401afa:	079c      	lsls	r4, r3, #30
  401afc:	6202      	str	r2, [r0, #32]
  401afe:	d548      	bpl.n	401b92 <pio_configure+0xca>
  401b00:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  401b04:	2301      	movs	r3, #1
  401b06:	6142      	str	r2, [r0, #20]
  401b08:	6002      	str	r2, [r0, #0]
  401b0a:	4618      	mov	r0, r3
  401b0c:	bc30      	pop	{r4, r5}
  401b0e:	4770      	bx	lr
  401b10:	f003 0404 	and.w	r4, r3, #4
  401b14:	07db      	lsls	r3, r3, #31
  401b16:	6442      	str	r2, [r0, #68]	; 0x44
  401b18:	d52f      	bpl.n	401b7a <pio_configure+0xb2>
  401b1a:	6642      	str	r2, [r0, #100]	; 0x64
  401b1c:	2c00      	cmp	r4, #0
  401b1e:	d02f      	beq.n	401b80 <pio_configure+0xb8>
  401b20:	6502      	str	r2, [r0, #80]	; 0x50
  401b22:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401b26:	d04e      	beq.n	401bc6 <pio_configure+0xfe>
  401b28:	6342      	str	r2, [r0, #52]	; 0x34
  401b2a:	2301      	movs	r3, #1
  401b2c:	6102      	str	r2, [r0, #16]
  401b2e:	6002      	str	r2, [r0, #0]
  401b30:	4618      	mov	r0, r3
  401b32:	bc30      	pop	{r4, r5}
  401b34:	4770      	bx	lr
  401b36:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401b3a:	d005      	beq.n	401b48 <pio_configure+0x80>
  401b3c:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401b40:	d002      	beq.n	401b48 <pio_configure+0x80>
  401b42:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401b46:	d1cd      	bne.n	401ae4 <pio_configure+0x1c>
  401b48:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401b4c:	6442      	str	r2, [r0, #68]	; 0x44
  401b4e:	d03c      	beq.n	401bca <pio_configure+0x102>
  401b50:	d924      	bls.n	401b9c <pio_configure+0xd4>
  401b52:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401b56:	d042      	beq.n	401bde <pio_configure+0x116>
  401b58:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401b5c:	d105      	bne.n	401b6a <pio_configure+0xa2>
  401b5e:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401b60:	4311      	orrs	r1, r2
  401b62:	6701      	str	r1, [r0, #112]	; 0x70
  401b64:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401b66:	4311      	orrs	r1, r2
  401b68:	6741      	str	r1, [r0, #116]	; 0x74
  401b6a:	07db      	lsls	r3, r3, #31
  401b6c:	6042      	str	r2, [r0, #4]
  401b6e:	d525      	bpl.n	401bbc <pio_configure+0xf4>
  401b70:	2301      	movs	r3, #1
  401b72:	6642      	str	r2, [r0, #100]	; 0x64
  401b74:	4618      	mov	r0, r3
  401b76:	bc30      	pop	{r4, r5}
  401b78:	4770      	bx	lr
  401b7a:	6602      	str	r2, [r0, #96]	; 0x60
  401b7c:	2c00      	cmp	r4, #0
  401b7e:	d1cf      	bne.n	401b20 <pio_configure+0x58>
  401b80:	6542      	str	r2, [r0, #84]	; 0x54
  401b82:	e7ce      	b.n	401b22 <pio_configure+0x5a>
  401b84:	f013 0f0a 	tst.w	r3, #10
  401b88:	6642      	str	r2, [r0, #100]	; 0x64
  401b8a:	d1b6      	bne.n	401afa <pio_configure+0x32>
  401b8c:	079c      	lsls	r4, r3, #30
  401b8e:	6242      	str	r2, [r0, #36]	; 0x24
  401b90:	d4b6      	bmi.n	401b00 <pio_configure+0x38>
  401b92:	0719      	lsls	r1, r3, #28
  401b94:	d5b6      	bpl.n	401b04 <pio_configure+0x3c>
  401b96:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  401b9a:	e7b3      	b.n	401b04 <pio_configure+0x3c>
  401b9c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401ba0:	d1e3      	bne.n	401b6a <pio_configure+0xa2>
  401ba2:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401ba4:	43d1      	mvns	r1, r2
  401ba6:	6f05      	ldr	r5, [r0, #112]	; 0x70
  401ba8:	402c      	ands	r4, r5
  401baa:	460d      	mov	r5, r1
  401bac:	400c      	ands	r4, r1
  401bae:	6704      	str	r4, [r0, #112]	; 0x70
  401bb0:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401bb2:	6f44      	ldr	r4, [r0, #116]	; 0x74
  401bb4:	4021      	ands	r1, r4
  401bb6:	4029      	ands	r1, r5
  401bb8:	6741      	str	r1, [r0, #116]	; 0x74
  401bba:	e7d6      	b.n	401b6a <pio_configure+0xa2>
  401bbc:	2301      	movs	r3, #1
  401bbe:	6602      	str	r2, [r0, #96]	; 0x60
  401bc0:	4618      	mov	r0, r3
  401bc2:	bc30      	pop	{r4, r5}
  401bc4:	4770      	bx	lr
  401bc6:	6302      	str	r2, [r0, #48]	; 0x30
  401bc8:	e7af      	b.n	401b2a <pio_configure+0x62>
  401bca:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401bcc:	4311      	orrs	r1, r2
  401bce:	6701      	str	r1, [r0, #112]	; 0x70
  401bd0:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401bd2:	6f44      	ldr	r4, [r0, #116]	; 0x74
  401bd4:	4021      	ands	r1, r4
  401bd6:	ea21 0102 	bic.w	r1, r1, r2
  401bda:	6741      	str	r1, [r0, #116]	; 0x74
  401bdc:	e7c5      	b.n	401b6a <pio_configure+0xa2>
  401bde:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401be0:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401be2:	4021      	ands	r1, r4
  401be4:	ea21 0102 	bic.w	r1, r1, r2
  401be8:	6701      	str	r1, [r0, #112]	; 0x70
  401bea:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401bec:	4311      	orrs	r1, r2
  401bee:	6741      	str	r1, [r0, #116]	; 0x74
  401bf0:	e7bb      	b.n	401b6a <pio_configure+0xa2>
  401bf2:	bf00      	nop

00401bf4 <pio_get_interrupt_status>:
  401bf4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  401bf6:	4770      	bx	lr

00401bf8 <pio_get_interrupt_mask>:
  401bf8:	6c80      	ldr	r0, [r0, #72]	; 0x48
  401bfa:	4770      	bx	lr

00401bfc <pio_configure_pin>:
  401bfc:	4b53      	ldr	r3, [pc, #332]	; (401d4c <pio_configure_pin+0x150>)
  401bfe:	f001 42f0 	and.w	r2, r1, #2013265920	; 0x78000000
  401c02:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  401c06:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
  401c0a:	b470      	push	{r4, r5, r6}
  401c0c:	ea4f 2343 	mov.w	r3, r3, lsl #9
  401c10:	d06d      	beq.n	401cee <pio_configure_pin+0xf2>
  401c12:	d80b      	bhi.n	401c2c <pio_configure_pin+0x30>
  401c14:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
  401c18:	d027      	beq.n	401c6a <pio_configure_pin+0x6e>
  401c1a:	f1b2 5fc0 	cmp.w	r2, #402653184	; 0x18000000
  401c1e:	d052      	beq.n	401cc6 <pio_configure_pin+0xca>
  401c20:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
  401c24:	d038      	beq.n	401c98 <pio_configure_pin+0x9c>
  401c26:	2000      	movs	r0, #0
  401c28:	bc70      	pop	{r4, r5, r6}
  401c2a:	4770      	bx	lr
  401c2c:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
  401c30:	d066      	beq.n	401d00 <pio_configure_pin+0x104>
  401c32:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401c36:	d063      	beq.n	401d00 <pio_configure_pin+0x104>
  401c38:	f1b2 5f20 	cmp.w	r2, #671088640	; 0x28000000
  401c3c:	d1f3      	bne.n	401c26 <pio_configure_pin+0x2a>
  401c3e:	f000 001f 	and.w	r0, r0, #31
  401c42:	2201      	movs	r2, #1
  401c44:	07cd      	lsls	r5, r1, #31
  401c46:	fa02 f200 	lsl.w	r2, r2, r0
  401c4a:	645a      	str	r2, [r3, #68]	; 0x44
  401c4c:	d573      	bpl.n	401d36 <pio_configure_pin+0x13a>
  401c4e:	665a      	str	r2, [r3, #100]	; 0x64
  401c50:	f011 0f0a 	tst.w	r1, #10
  401c54:	d06d      	beq.n	401d32 <pio_configure_pin+0x136>
  401c56:	621a      	str	r2, [r3, #32]
  401c58:	078c      	lsls	r4, r1, #30
  401c5a:	d56e      	bpl.n	401d3a <pio_configure_pin+0x13e>
  401c5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  401c60:	615a      	str	r2, [r3, #20]
  401c62:	2001      	movs	r0, #1
  401c64:	601a      	str	r2, [r3, #0]
  401c66:	bc70      	pop	{r4, r5, r6}
  401c68:	4770      	bx	lr
  401c6a:	f000 021f 	and.w	r2, r0, #31
  401c6e:	2001      	movs	r0, #1
  401c70:	07c9      	lsls	r1, r1, #31
  401c72:	fa00 f202 	lsl.w	r2, r0, r2
  401c76:	645a      	str	r2, [r3, #68]	; 0x44
  401c78:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  401c7a:	ea44 0402 	orr.w	r4, r4, r2
  401c7e:	671c      	str	r4, [r3, #112]	; 0x70
  401c80:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  401c82:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  401c84:	ea04 0405 	and.w	r4, r4, r5
  401c88:	ea24 0402 	bic.w	r4, r4, r2
  401c8c:	675c      	str	r4, [r3, #116]	; 0x74
  401c8e:	605a      	str	r2, [r3, #4]
  401c90:	d516      	bpl.n	401cc0 <pio_configure_pin+0xc4>
  401c92:	665a      	str	r2, [r3, #100]	; 0x64
  401c94:	bc70      	pop	{r4, r5, r6}
  401c96:	4770      	bx	lr
  401c98:	f000 021f 	and.w	r2, r0, #31
  401c9c:	2001      	movs	r0, #1
  401c9e:	fa00 f202 	lsl.w	r2, r0, r2
  401ca2:	645a      	str	r2, [r3, #68]	; 0x44
  401ca4:	43d6      	mvns	r6, r2
  401ca6:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  401ca8:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  401caa:	4025      	ands	r5, r4
  401cac:	4035      	ands	r5, r6
  401cae:	671d      	str	r5, [r3, #112]	; 0x70
  401cb0:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  401cb2:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  401cb4:	402c      	ands	r4, r5
  401cb6:	4034      	ands	r4, r6
  401cb8:	675c      	str	r4, [r3, #116]	; 0x74
  401cba:	07cc      	lsls	r4, r1, #31
  401cbc:	605a      	str	r2, [r3, #4]
  401cbe:	d4e8      	bmi.n	401c92 <pio_configure_pin+0x96>
  401cc0:	661a      	str	r2, [r3, #96]	; 0x60
  401cc2:	bc70      	pop	{r4, r5, r6}
  401cc4:	4770      	bx	lr
  401cc6:	f000 021f 	and.w	r2, r0, #31
  401cca:	2001      	movs	r0, #1
  401ccc:	fa00 f202 	lsl.w	r2, r0, r2
  401cd0:	645a      	str	r2, [r3, #68]	; 0x44
  401cd2:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  401cd4:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  401cd6:	402c      	ands	r4, r5
  401cd8:	ea24 0402 	bic.w	r4, r4, r2
  401cdc:	671c      	str	r4, [r3, #112]	; 0x70
  401cde:	07ce      	lsls	r6, r1, #31
  401ce0:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  401ce2:	ea44 0402 	orr.w	r4, r4, r2
  401ce6:	675c      	str	r4, [r3, #116]	; 0x74
  401ce8:	605a      	str	r2, [r3, #4]
  401cea:	d5e9      	bpl.n	401cc0 <pio_configure_pin+0xc4>
  401cec:	e7d1      	b.n	401c92 <pio_configure_pin+0x96>
  401cee:	f000 021f 	and.w	r2, r0, #31
  401cf2:	2001      	movs	r0, #1
  401cf4:	fa00 f202 	lsl.w	r2, r0, r2
  401cf8:	645a      	str	r2, [r3, #68]	; 0x44
  401cfa:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  401cfc:	4314      	orrs	r4, r2
  401cfe:	e7ed      	b.n	401cdc <pio_configure_pin+0xe0>
  401d00:	f000 001f 	and.w	r0, r0, #31
  401d04:	2201      	movs	r2, #1
  401d06:	f001 5460 	and.w	r4, r1, #939524096	; 0x38000000
  401d0a:	f001 0504 	and.w	r5, r1, #4
  401d0e:	4082      	lsls	r2, r0
  401d10:	07c9      	lsls	r1, r1, #31
  401d12:	645a      	str	r2, [r3, #68]	; 0x44
  401d14:	d50b      	bpl.n	401d2e <pio_configure_pin+0x132>
  401d16:	665a      	str	r2, [r3, #100]	; 0x64
  401d18:	b1a5      	cbz	r5, 401d44 <pio_configure_pin+0x148>
  401d1a:	651a      	str	r2, [r3, #80]	; 0x50
  401d1c:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
  401d20:	d012      	beq.n	401d48 <pio_configure_pin+0x14c>
  401d22:	635a      	str	r2, [r3, #52]	; 0x34
  401d24:	611a      	str	r2, [r3, #16]
  401d26:	2001      	movs	r0, #1
  401d28:	601a      	str	r2, [r3, #0]
  401d2a:	bc70      	pop	{r4, r5, r6}
  401d2c:	4770      	bx	lr
  401d2e:	661a      	str	r2, [r3, #96]	; 0x60
  401d30:	e7f2      	b.n	401d18 <pio_configure_pin+0x11c>
  401d32:	625a      	str	r2, [r3, #36]	; 0x24
  401d34:	e790      	b.n	401c58 <pio_configure_pin+0x5c>
  401d36:	661a      	str	r2, [r3, #96]	; 0x60
  401d38:	e78a      	b.n	401c50 <pio_configure_pin+0x54>
  401d3a:	0708      	lsls	r0, r1, #28
  401d3c:	d590      	bpl.n	401c60 <pio_configure_pin+0x64>
  401d3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  401d42:	e78d      	b.n	401c60 <pio_configure_pin+0x64>
  401d44:	655a      	str	r2, [r3, #84]	; 0x54
  401d46:	e7e9      	b.n	401d1c <pio_configure_pin+0x120>
  401d48:	631a      	str	r2, [r3, #48]	; 0x30
  401d4a:	e7eb      	b.n	401d24 <pio_configure_pin+0x128>
  401d4c:	00200707 	.word	0x00200707

00401d50 <PIOA_Handler>:
  401d50:	b570      	push	{r4, r5, r6, lr}
  401d52:	4b2e      	ldr	r3, [pc, #184]	; (401e0c <PIOA_Handler+0xbc>)
  401d54:	482e      	ldr	r0, [pc, #184]	; (401e10 <PIOA_Handler+0xc0>)
  401d56:	4798      	blx	r3
  401d58:	4605      	mov	r5, r0
  401d5a:	4b2e      	ldr	r3, [pc, #184]	; (401e14 <PIOA_Handler+0xc4>)
  401d5c:	482c      	ldr	r0, [pc, #176]	; (401e10 <PIOA_Handler+0xc0>)
  401d5e:	4798      	blx	r3
  401d60:	4005      	ands	r5, r0
  401d62:	d015      	beq.n	401d90 <PIOA_Handler+0x40>
  401d64:	4c2c      	ldr	r4, [pc, #176]	; (401e18 <PIOA_Handler+0xc8>)
  401d66:	6820      	ldr	r0, [r4, #0]
  401d68:	280a      	cmp	r0, #10
  401d6a:	d019      	beq.n	401da0 <PIOA_Handler+0x50>
  401d6c:	6920      	ldr	r0, [r4, #16]
  401d6e:	280a      	cmp	r0, #10
  401d70:	d01f      	beq.n	401db2 <PIOA_Handler+0x62>
  401d72:	6a20      	ldr	r0, [r4, #32]
  401d74:	280a      	cmp	r0, #10
  401d76:	d025      	beq.n	401dc4 <PIOA_Handler+0x74>
  401d78:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401d7a:	280a      	cmp	r0, #10
  401d7c:	d02b      	beq.n	401dd6 <PIOA_Handler+0x86>
  401d7e:	6c20      	ldr	r0, [r4, #64]	; 0x40
  401d80:	280a      	cmp	r0, #10
  401d82:	d031      	beq.n	401de8 <PIOA_Handler+0x98>
  401d84:	6d20      	ldr	r0, [r4, #80]	; 0x50
  401d86:	280a      	cmp	r0, #10
  401d88:	d037      	beq.n	401dfa <PIOA_Handler+0xaa>
  401d8a:	6e20      	ldr	r0, [r4, #96]	; 0x60
  401d8c:	280a      	cmp	r0, #10
  401d8e:	d000      	beq.n	401d92 <PIOA_Handler+0x42>
  401d90:	bd70      	pop	{r4, r5, r6, pc}
  401d92:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401d94:	4229      	tst	r1, r5
  401d96:	d0fb      	beq.n	401d90 <PIOA_Handler+0x40>
  401d98:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  401d9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  401d9e:	4718      	bx	r3
  401da0:	6861      	ldr	r1, [r4, #4]
  401da2:	420d      	tst	r5, r1
  401da4:	d0e2      	beq.n	401d6c <PIOA_Handler+0x1c>
  401da6:	68e3      	ldr	r3, [r4, #12]
  401da8:	4798      	blx	r3
  401daa:	6863      	ldr	r3, [r4, #4]
  401dac:	439d      	bics	r5, r3
  401dae:	d0ef      	beq.n	401d90 <PIOA_Handler+0x40>
  401db0:	e7dc      	b.n	401d6c <PIOA_Handler+0x1c>
  401db2:	6961      	ldr	r1, [r4, #20]
  401db4:	4229      	tst	r1, r5
  401db6:	d0dc      	beq.n	401d72 <PIOA_Handler+0x22>
  401db8:	69e3      	ldr	r3, [r4, #28]
  401dba:	4798      	blx	r3
  401dbc:	6963      	ldr	r3, [r4, #20]
  401dbe:	439d      	bics	r5, r3
  401dc0:	d0e6      	beq.n	401d90 <PIOA_Handler+0x40>
  401dc2:	e7d6      	b.n	401d72 <PIOA_Handler+0x22>
  401dc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
  401dc6:	4229      	tst	r1, r5
  401dc8:	d0d6      	beq.n	401d78 <PIOA_Handler+0x28>
  401dca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401dcc:	4798      	blx	r3
  401dce:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401dd0:	439d      	bics	r5, r3
  401dd2:	d0dd      	beq.n	401d90 <PIOA_Handler+0x40>
  401dd4:	e7d0      	b.n	401d78 <PIOA_Handler+0x28>
  401dd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
  401dd8:	4229      	tst	r1, r5
  401dda:	d0d0      	beq.n	401d7e <PIOA_Handler+0x2e>
  401ddc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401dde:	4798      	blx	r3
  401de0:	6b63      	ldr	r3, [r4, #52]	; 0x34
  401de2:	439d      	bics	r5, r3
  401de4:	d0d4      	beq.n	401d90 <PIOA_Handler+0x40>
  401de6:	e7ca      	b.n	401d7e <PIOA_Handler+0x2e>
  401de8:	6c61      	ldr	r1, [r4, #68]	; 0x44
  401dea:	4229      	tst	r1, r5
  401dec:	d0ca      	beq.n	401d84 <PIOA_Handler+0x34>
  401dee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401df0:	4798      	blx	r3
  401df2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401df4:	439d      	bics	r5, r3
  401df6:	d0cb      	beq.n	401d90 <PIOA_Handler+0x40>
  401df8:	e7c4      	b.n	401d84 <PIOA_Handler+0x34>
  401dfa:	6d61      	ldr	r1, [r4, #84]	; 0x54
  401dfc:	4229      	tst	r1, r5
  401dfe:	d0c4      	beq.n	401d8a <PIOA_Handler+0x3a>
  401e00:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  401e02:	4798      	blx	r3
  401e04:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401e06:	439d      	bics	r5, r3
  401e08:	d0c2      	beq.n	401d90 <PIOA_Handler+0x40>
  401e0a:	e7be      	b.n	401d8a <PIOA_Handler+0x3a>
  401e0c:	00401bf5 	.word	0x00401bf5
  401e10:	400e0e00 	.word	0x400e0e00
  401e14:	00401bf9 	.word	0x00401bf9
  401e18:	204150a0 	.word	0x204150a0

00401e1c <PIOB_Handler>:
  401e1c:	b570      	push	{r4, r5, r6, lr}
  401e1e:	4b2e      	ldr	r3, [pc, #184]	; (401ed8 <PIOB_Handler+0xbc>)
  401e20:	482e      	ldr	r0, [pc, #184]	; (401edc <PIOB_Handler+0xc0>)
  401e22:	4798      	blx	r3
  401e24:	4605      	mov	r5, r0
  401e26:	4b2e      	ldr	r3, [pc, #184]	; (401ee0 <PIOB_Handler+0xc4>)
  401e28:	482c      	ldr	r0, [pc, #176]	; (401edc <PIOB_Handler+0xc0>)
  401e2a:	4798      	blx	r3
  401e2c:	4005      	ands	r5, r0
  401e2e:	d015      	beq.n	401e5c <PIOB_Handler+0x40>
  401e30:	4c2c      	ldr	r4, [pc, #176]	; (401ee4 <PIOB_Handler+0xc8>)
  401e32:	6820      	ldr	r0, [r4, #0]
  401e34:	280b      	cmp	r0, #11
  401e36:	d019      	beq.n	401e6c <PIOB_Handler+0x50>
  401e38:	6920      	ldr	r0, [r4, #16]
  401e3a:	280b      	cmp	r0, #11
  401e3c:	d01f      	beq.n	401e7e <PIOB_Handler+0x62>
  401e3e:	6a20      	ldr	r0, [r4, #32]
  401e40:	280b      	cmp	r0, #11
  401e42:	d025      	beq.n	401e90 <PIOB_Handler+0x74>
  401e44:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401e46:	280b      	cmp	r0, #11
  401e48:	d02b      	beq.n	401ea2 <PIOB_Handler+0x86>
  401e4a:	6c20      	ldr	r0, [r4, #64]	; 0x40
  401e4c:	280b      	cmp	r0, #11
  401e4e:	d031      	beq.n	401eb4 <PIOB_Handler+0x98>
  401e50:	6d20      	ldr	r0, [r4, #80]	; 0x50
  401e52:	280b      	cmp	r0, #11
  401e54:	d037      	beq.n	401ec6 <PIOB_Handler+0xaa>
  401e56:	6e20      	ldr	r0, [r4, #96]	; 0x60
  401e58:	280b      	cmp	r0, #11
  401e5a:	d000      	beq.n	401e5e <PIOB_Handler+0x42>
  401e5c:	bd70      	pop	{r4, r5, r6, pc}
  401e5e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401e60:	4229      	tst	r1, r5
  401e62:	d0fb      	beq.n	401e5c <PIOB_Handler+0x40>
  401e64:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  401e66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  401e6a:	4718      	bx	r3
  401e6c:	6861      	ldr	r1, [r4, #4]
  401e6e:	420d      	tst	r5, r1
  401e70:	d0e2      	beq.n	401e38 <PIOB_Handler+0x1c>
  401e72:	68e3      	ldr	r3, [r4, #12]
  401e74:	4798      	blx	r3
  401e76:	6863      	ldr	r3, [r4, #4]
  401e78:	439d      	bics	r5, r3
  401e7a:	d0ef      	beq.n	401e5c <PIOB_Handler+0x40>
  401e7c:	e7dc      	b.n	401e38 <PIOB_Handler+0x1c>
  401e7e:	6961      	ldr	r1, [r4, #20]
  401e80:	4229      	tst	r1, r5
  401e82:	d0dc      	beq.n	401e3e <PIOB_Handler+0x22>
  401e84:	69e3      	ldr	r3, [r4, #28]
  401e86:	4798      	blx	r3
  401e88:	6963      	ldr	r3, [r4, #20]
  401e8a:	439d      	bics	r5, r3
  401e8c:	d0e6      	beq.n	401e5c <PIOB_Handler+0x40>
  401e8e:	e7d6      	b.n	401e3e <PIOB_Handler+0x22>
  401e90:	6a61      	ldr	r1, [r4, #36]	; 0x24
  401e92:	4229      	tst	r1, r5
  401e94:	d0d6      	beq.n	401e44 <PIOB_Handler+0x28>
  401e96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401e98:	4798      	blx	r3
  401e9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401e9c:	439d      	bics	r5, r3
  401e9e:	d0dd      	beq.n	401e5c <PIOB_Handler+0x40>
  401ea0:	e7d0      	b.n	401e44 <PIOB_Handler+0x28>
  401ea2:	6b61      	ldr	r1, [r4, #52]	; 0x34
  401ea4:	4229      	tst	r1, r5
  401ea6:	d0d0      	beq.n	401e4a <PIOB_Handler+0x2e>
  401ea8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401eaa:	4798      	blx	r3
  401eac:	6b63      	ldr	r3, [r4, #52]	; 0x34
  401eae:	439d      	bics	r5, r3
  401eb0:	d0d4      	beq.n	401e5c <PIOB_Handler+0x40>
  401eb2:	e7ca      	b.n	401e4a <PIOB_Handler+0x2e>
  401eb4:	6c61      	ldr	r1, [r4, #68]	; 0x44
  401eb6:	4229      	tst	r1, r5
  401eb8:	d0ca      	beq.n	401e50 <PIOB_Handler+0x34>
  401eba:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401ebc:	4798      	blx	r3
  401ebe:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401ec0:	439d      	bics	r5, r3
  401ec2:	d0cb      	beq.n	401e5c <PIOB_Handler+0x40>
  401ec4:	e7c4      	b.n	401e50 <PIOB_Handler+0x34>
  401ec6:	6d61      	ldr	r1, [r4, #84]	; 0x54
  401ec8:	4229      	tst	r1, r5
  401eca:	d0c4      	beq.n	401e56 <PIOB_Handler+0x3a>
  401ecc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  401ece:	4798      	blx	r3
  401ed0:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401ed2:	439d      	bics	r5, r3
  401ed4:	d0c2      	beq.n	401e5c <PIOB_Handler+0x40>
  401ed6:	e7be      	b.n	401e56 <PIOB_Handler+0x3a>
  401ed8:	00401bf5 	.word	0x00401bf5
  401edc:	400e1000 	.word	0x400e1000
  401ee0:	00401bf9 	.word	0x00401bf9
  401ee4:	204150a0 	.word	0x204150a0

00401ee8 <PIOC_Handler>:
  401ee8:	b570      	push	{r4, r5, r6, lr}
  401eea:	4b2e      	ldr	r3, [pc, #184]	; (401fa4 <PIOC_Handler+0xbc>)
  401eec:	482e      	ldr	r0, [pc, #184]	; (401fa8 <PIOC_Handler+0xc0>)
  401eee:	4798      	blx	r3
  401ef0:	4605      	mov	r5, r0
  401ef2:	4b2e      	ldr	r3, [pc, #184]	; (401fac <PIOC_Handler+0xc4>)
  401ef4:	482c      	ldr	r0, [pc, #176]	; (401fa8 <PIOC_Handler+0xc0>)
  401ef6:	4798      	blx	r3
  401ef8:	4005      	ands	r5, r0
  401efa:	d015      	beq.n	401f28 <PIOC_Handler+0x40>
  401efc:	4c2c      	ldr	r4, [pc, #176]	; (401fb0 <PIOC_Handler+0xc8>)
  401efe:	6820      	ldr	r0, [r4, #0]
  401f00:	280c      	cmp	r0, #12
  401f02:	d019      	beq.n	401f38 <PIOC_Handler+0x50>
  401f04:	6920      	ldr	r0, [r4, #16]
  401f06:	280c      	cmp	r0, #12
  401f08:	d01f      	beq.n	401f4a <PIOC_Handler+0x62>
  401f0a:	6a20      	ldr	r0, [r4, #32]
  401f0c:	280c      	cmp	r0, #12
  401f0e:	d025      	beq.n	401f5c <PIOC_Handler+0x74>
  401f10:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401f12:	280c      	cmp	r0, #12
  401f14:	d02b      	beq.n	401f6e <PIOC_Handler+0x86>
  401f16:	6c20      	ldr	r0, [r4, #64]	; 0x40
  401f18:	280c      	cmp	r0, #12
  401f1a:	d031      	beq.n	401f80 <PIOC_Handler+0x98>
  401f1c:	6d20      	ldr	r0, [r4, #80]	; 0x50
  401f1e:	280c      	cmp	r0, #12
  401f20:	d037      	beq.n	401f92 <PIOC_Handler+0xaa>
  401f22:	6e20      	ldr	r0, [r4, #96]	; 0x60
  401f24:	280c      	cmp	r0, #12
  401f26:	d000      	beq.n	401f2a <PIOC_Handler+0x42>
  401f28:	bd70      	pop	{r4, r5, r6, pc}
  401f2a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401f2c:	4229      	tst	r1, r5
  401f2e:	d0fb      	beq.n	401f28 <PIOC_Handler+0x40>
  401f30:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  401f32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  401f36:	4718      	bx	r3
  401f38:	6861      	ldr	r1, [r4, #4]
  401f3a:	420d      	tst	r5, r1
  401f3c:	d0e2      	beq.n	401f04 <PIOC_Handler+0x1c>
  401f3e:	68e3      	ldr	r3, [r4, #12]
  401f40:	4798      	blx	r3
  401f42:	6863      	ldr	r3, [r4, #4]
  401f44:	439d      	bics	r5, r3
  401f46:	d0ef      	beq.n	401f28 <PIOC_Handler+0x40>
  401f48:	e7dc      	b.n	401f04 <PIOC_Handler+0x1c>
  401f4a:	6961      	ldr	r1, [r4, #20]
  401f4c:	4229      	tst	r1, r5
  401f4e:	d0dc      	beq.n	401f0a <PIOC_Handler+0x22>
  401f50:	69e3      	ldr	r3, [r4, #28]
  401f52:	4798      	blx	r3
  401f54:	6963      	ldr	r3, [r4, #20]
  401f56:	439d      	bics	r5, r3
  401f58:	d0e6      	beq.n	401f28 <PIOC_Handler+0x40>
  401f5a:	e7d6      	b.n	401f0a <PIOC_Handler+0x22>
  401f5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  401f5e:	4229      	tst	r1, r5
  401f60:	d0d6      	beq.n	401f10 <PIOC_Handler+0x28>
  401f62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401f64:	4798      	blx	r3
  401f66:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401f68:	439d      	bics	r5, r3
  401f6a:	d0dd      	beq.n	401f28 <PIOC_Handler+0x40>
  401f6c:	e7d0      	b.n	401f10 <PIOC_Handler+0x28>
  401f6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
  401f70:	4229      	tst	r1, r5
  401f72:	d0d0      	beq.n	401f16 <PIOC_Handler+0x2e>
  401f74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401f76:	4798      	blx	r3
  401f78:	6b63      	ldr	r3, [r4, #52]	; 0x34
  401f7a:	439d      	bics	r5, r3
  401f7c:	d0d4      	beq.n	401f28 <PIOC_Handler+0x40>
  401f7e:	e7ca      	b.n	401f16 <PIOC_Handler+0x2e>
  401f80:	6c61      	ldr	r1, [r4, #68]	; 0x44
  401f82:	4229      	tst	r1, r5
  401f84:	d0ca      	beq.n	401f1c <PIOC_Handler+0x34>
  401f86:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401f88:	4798      	blx	r3
  401f8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401f8c:	439d      	bics	r5, r3
  401f8e:	d0cb      	beq.n	401f28 <PIOC_Handler+0x40>
  401f90:	e7c4      	b.n	401f1c <PIOC_Handler+0x34>
  401f92:	6d61      	ldr	r1, [r4, #84]	; 0x54
  401f94:	4229      	tst	r1, r5
  401f96:	d0c4      	beq.n	401f22 <PIOC_Handler+0x3a>
  401f98:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  401f9a:	4798      	blx	r3
  401f9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401f9e:	439d      	bics	r5, r3
  401fa0:	d0c2      	beq.n	401f28 <PIOC_Handler+0x40>
  401fa2:	e7be      	b.n	401f22 <PIOC_Handler+0x3a>
  401fa4:	00401bf5 	.word	0x00401bf5
  401fa8:	400e1200 	.word	0x400e1200
  401fac:	00401bf9 	.word	0x00401bf9
  401fb0:	204150a0 	.word	0x204150a0

00401fb4 <PIOD_Handler>:
  401fb4:	b570      	push	{r4, r5, r6, lr}
  401fb6:	4b2e      	ldr	r3, [pc, #184]	; (402070 <PIOD_Handler+0xbc>)
  401fb8:	482e      	ldr	r0, [pc, #184]	; (402074 <PIOD_Handler+0xc0>)
  401fba:	4798      	blx	r3
  401fbc:	4605      	mov	r5, r0
  401fbe:	4b2e      	ldr	r3, [pc, #184]	; (402078 <PIOD_Handler+0xc4>)
  401fc0:	482c      	ldr	r0, [pc, #176]	; (402074 <PIOD_Handler+0xc0>)
  401fc2:	4798      	blx	r3
  401fc4:	4005      	ands	r5, r0
  401fc6:	d015      	beq.n	401ff4 <PIOD_Handler+0x40>
  401fc8:	4c2c      	ldr	r4, [pc, #176]	; (40207c <PIOD_Handler+0xc8>)
  401fca:	6820      	ldr	r0, [r4, #0]
  401fcc:	2810      	cmp	r0, #16
  401fce:	d019      	beq.n	402004 <PIOD_Handler+0x50>
  401fd0:	6920      	ldr	r0, [r4, #16]
  401fd2:	2810      	cmp	r0, #16
  401fd4:	d01f      	beq.n	402016 <PIOD_Handler+0x62>
  401fd6:	6a20      	ldr	r0, [r4, #32]
  401fd8:	2810      	cmp	r0, #16
  401fda:	d025      	beq.n	402028 <PIOD_Handler+0x74>
  401fdc:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401fde:	2810      	cmp	r0, #16
  401fe0:	d02b      	beq.n	40203a <PIOD_Handler+0x86>
  401fe2:	6c20      	ldr	r0, [r4, #64]	; 0x40
  401fe4:	2810      	cmp	r0, #16
  401fe6:	d031      	beq.n	40204c <PIOD_Handler+0x98>
  401fe8:	6d20      	ldr	r0, [r4, #80]	; 0x50
  401fea:	2810      	cmp	r0, #16
  401fec:	d037      	beq.n	40205e <PIOD_Handler+0xaa>
  401fee:	6e20      	ldr	r0, [r4, #96]	; 0x60
  401ff0:	2810      	cmp	r0, #16
  401ff2:	d000      	beq.n	401ff6 <PIOD_Handler+0x42>
  401ff4:	bd70      	pop	{r4, r5, r6, pc}
  401ff6:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401ff8:	4229      	tst	r1, r5
  401ffa:	d0fb      	beq.n	401ff4 <PIOD_Handler+0x40>
  401ffc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  401ffe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  402002:	4718      	bx	r3
  402004:	6861      	ldr	r1, [r4, #4]
  402006:	420d      	tst	r5, r1
  402008:	d0e2      	beq.n	401fd0 <PIOD_Handler+0x1c>
  40200a:	68e3      	ldr	r3, [r4, #12]
  40200c:	4798      	blx	r3
  40200e:	6863      	ldr	r3, [r4, #4]
  402010:	439d      	bics	r5, r3
  402012:	d0ef      	beq.n	401ff4 <PIOD_Handler+0x40>
  402014:	e7dc      	b.n	401fd0 <PIOD_Handler+0x1c>
  402016:	6961      	ldr	r1, [r4, #20]
  402018:	4229      	tst	r1, r5
  40201a:	d0dc      	beq.n	401fd6 <PIOD_Handler+0x22>
  40201c:	69e3      	ldr	r3, [r4, #28]
  40201e:	4798      	blx	r3
  402020:	6963      	ldr	r3, [r4, #20]
  402022:	439d      	bics	r5, r3
  402024:	d0e6      	beq.n	401ff4 <PIOD_Handler+0x40>
  402026:	e7d6      	b.n	401fd6 <PIOD_Handler+0x22>
  402028:	6a61      	ldr	r1, [r4, #36]	; 0x24
  40202a:	4229      	tst	r1, r5
  40202c:	d0d6      	beq.n	401fdc <PIOD_Handler+0x28>
  40202e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402030:	4798      	blx	r3
  402032:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402034:	439d      	bics	r5, r3
  402036:	d0dd      	beq.n	401ff4 <PIOD_Handler+0x40>
  402038:	e7d0      	b.n	401fdc <PIOD_Handler+0x28>
  40203a:	6b61      	ldr	r1, [r4, #52]	; 0x34
  40203c:	4229      	tst	r1, r5
  40203e:	d0d0      	beq.n	401fe2 <PIOD_Handler+0x2e>
  402040:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402042:	4798      	blx	r3
  402044:	6b63      	ldr	r3, [r4, #52]	; 0x34
  402046:	439d      	bics	r5, r3
  402048:	d0d4      	beq.n	401ff4 <PIOD_Handler+0x40>
  40204a:	e7ca      	b.n	401fe2 <PIOD_Handler+0x2e>
  40204c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40204e:	4229      	tst	r1, r5
  402050:	d0ca      	beq.n	401fe8 <PIOD_Handler+0x34>
  402052:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  402054:	4798      	blx	r3
  402056:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402058:	439d      	bics	r5, r3
  40205a:	d0cb      	beq.n	401ff4 <PIOD_Handler+0x40>
  40205c:	e7c4      	b.n	401fe8 <PIOD_Handler+0x34>
  40205e:	6d61      	ldr	r1, [r4, #84]	; 0x54
  402060:	4229      	tst	r1, r5
  402062:	d0c4      	beq.n	401fee <PIOD_Handler+0x3a>
  402064:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  402066:	4798      	blx	r3
  402068:	6d63      	ldr	r3, [r4, #84]	; 0x54
  40206a:	439d      	bics	r5, r3
  40206c:	d0c2      	beq.n	401ff4 <PIOD_Handler+0x40>
  40206e:	e7be      	b.n	401fee <PIOD_Handler+0x3a>
  402070:	00401bf5 	.word	0x00401bf5
  402074:	400e1400 	.word	0x400e1400
  402078:	00401bf9 	.word	0x00401bf9
  40207c:	204150a0 	.word	0x204150a0

00402080 <PIOE_Handler>:
  402080:	b570      	push	{r4, r5, r6, lr}
  402082:	4b2e      	ldr	r3, [pc, #184]	; (40213c <PIOE_Handler+0xbc>)
  402084:	482e      	ldr	r0, [pc, #184]	; (402140 <PIOE_Handler+0xc0>)
  402086:	4798      	blx	r3
  402088:	4605      	mov	r5, r0
  40208a:	4b2e      	ldr	r3, [pc, #184]	; (402144 <PIOE_Handler+0xc4>)
  40208c:	482c      	ldr	r0, [pc, #176]	; (402140 <PIOE_Handler+0xc0>)
  40208e:	4798      	blx	r3
  402090:	4005      	ands	r5, r0
  402092:	d015      	beq.n	4020c0 <PIOE_Handler+0x40>
  402094:	4c2c      	ldr	r4, [pc, #176]	; (402148 <PIOE_Handler+0xc8>)
  402096:	6820      	ldr	r0, [r4, #0]
  402098:	2811      	cmp	r0, #17
  40209a:	d019      	beq.n	4020d0 <PIOE_Handler+0x50>
  40209c:	6920      	ldr	r0, [r4, #16]
  40209e:	2811      	cmp	r0, #17
  4020a0:	d01f      	beq.n	4020e2 <PIOE_Handler+0x62>
  4020a2:	6a20      	ldr	r0, [r4, #32]
  4020a4:	2811      	cmp	r0, #17
  4020a6:	d025      	beq.n	4020f4 <PIOE_Handler+0x74>
  4020a8:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4020aa:	2811      	cmp	r0, #17
  4020ac:	d02b      	beq.n	402106 <PIOE_Handler+0x86>
  4020ae:	6c20      	ldr	r0, [r4, #64]	; 0x40
  4020b0:	2811      	cmp	r0, #17
  4020b2:	d031      	beq.n	402118 <PIOE_Handler+0x98>
  4020b4:	6d20      	ldr	r0, [r4, #80]	; 0x50
  4020b6:	2811      	cmp	r0, #17
  4020b8:	d037      	beq.n	40212a <PIOE_Handler+0xaa>
  4020ba:	6e20      	ldr	r0, [r4, #96]	; 0x60
  4020bc:	2811      	cmp	r0, #17
  4020be:	d000      	beq.n	4020c2 <PIOE_Handler+0x42>
  4020c0:	bd70      	pop	{r4, r5, r6, pc}
  4020c2:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4020c4:	4229      	tst	r1, r5
  4020c6:	d0fb      	beq.n	4020c0 <PIOE_Handler+0x40>
  4020c8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4020ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  4020ce:	4718      	bx	r3
  4020d0:	6861      	ldr	r1, [r4, #4]
  4020d2:	420d      	tst	r5, r1
  4020d4:	d0e2      	beq.n	40209c <PIOE_Handler+0x1c>
  4020d6:	68e3      	ldr	r3, [r4, #12]
  4020d8:	4798      	blx	r3
  4020da:	6863      	ldr	r3, [r4, #4]
  4020dc:	439d      	bics	r5, r3
  4020de:	d0ef      	beq.n	4020c0 <PIOE_Handler+0x40>
  4020e0:	e7dc      	b.n	40209c <PIOE_Handler+0x1c>
  4020e2:	6961      	ldr	r1, [r4, #20]
  4020e4:	4229      	tst	r1, r5
  4020e6:	d0dc      	beq.n	4020a2 <PIOE_Handler+0x22>
  4020e8:	69e3      	ldr	r3, [r4, #28]
  4020ea:	4798      	blx	r3
  4020ec:	6963      	ldr	r3, [r4, #20]
  4020ee:	439d      	bics	r5, r3
  4020f0:	d0e6      	beq.n	4020c0 <PIOE_Handler+0x40>
  4020f2:	e7d6      	b.n	4020a2 <PIOE_Handler+0x22>
  4020f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
  4020f6:	4229      	tst	r1, r5
  4020f8:	d0d6      	beq.n	4020a8 <PIOE_Handler+0x28>
  4020fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4020fc:	4798      	blx	r3
  4020fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402100:	439d      	bics	r5, r3
  402102:	d0dd      	beq.n	4020c0 <PIOE_Handler+0x40>
  402104:	e7d0      	b.n	4020a8 <PIOE_Handler+0x28>
  402106:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402108:	4229      	tst	r1, r5
  40210a:	d0d0      	beq.n	4020ae <PIOE_Handler+0x2e>
  40210c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40210e:	4798      	blx	r3
  402110:	6b63      	ldr	r3, [r4, #52]	; 0x34
  402112:	439d      	bics	r5, r3
  402114:	d0d4      	beq.n	4020c0 <PIOE_Handler+0x40>
  402116:	e7ca      	b.n	4020ae <PIOE_Handler+0x2e>
  402118:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40211a:	4229      	tst	r1, r5
  40211c:	d0ca      	beq.n	4020b4 <PIOE_Handler+0x34>
  40211e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  402120:	4798      	blx	r3
  402122:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402124:	439d      	bics	r5, r3
  402126:	d0cb      	beq.n	4020c0 <PIOE_Handler+0x40>
  402128:	e7c4      	b.n	4020b4 <PIOE_Handler+0x34>
  40212a:	6d61      	ldr	r1, [r4, #84]	; 0x54
  40212c:	4229      	tst	r1, r5
  40212e:	d0c4      	beq.n	4020ba <PIOE_Handler+0x3a>
  402130:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  402132:	4798      	blx	r3
  402134:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402136:	439d      	bics	r5, r3
  402138:	d0c2      	beq.n	4020c0 <PIOE_Handler+0x40>
  40213a:	e7be      	b.n	4020ba <PIOE_Handler+0x3a>
  40213c:	00401bf5 	.word	0x00401bf5
  402140:	400e1600 	.word	0x400e1600
  402144:	00401bf9 	.word	0x00401bf9
  402148:	204150a0 	.word	0x204150a0

0040214c <pmc_mck_set_division>:
  40214c:	3802      	subs	r0, #2
  40214e:	2802      	cmp	r0, #2
  402150:	d80d      	bhi.n	40216e <pmc_mck_set_division+0x22>
  402152:	4b08      	ldr	r3, [pc, #32]	; (402174 <pmc_mck_set_division+0x28>)
  402154:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  402158:	4907      	ldr	r1, [pc, #28]	; (402178 <pmc_mck_set_division+0x2c>)
  40215a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40215c:	460a      	mov	r2, r1
  40215e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  402162:	4303      	orrs	r3, r0
  402164:	630b      	str	r3, [r1, #48]	; 0x30
  402166:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402168:	071b      	lsls	r3, r3, #28
  40216a:	d5fc      	bpl.n	402166 <pmc_mck_set_division+0x1a>
  40216c:	4770      	bx	lr
  40216e:	2000      	movs	r0, #0
  402170:	e7f2      	b.n	402158 <pmc_mck_set_division+0xc>
  402172:	bf00      	nop
  402174:	0040772c 	.word	0x0040772c
  402178:	400e0600 	.word	0x400e0600

0040217c <pmc_switch_mck_to_pllack>:
  40217c:	4913      	ldr	r1, [pc, #76]	; (4021cc <pmc_switch_mck_to_pllack+0x50>)
  40217e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402184:	4318      	orrs	r0, r3
  402186:	6308      	str	r0, [r1, #48]	; 0x30
  402188:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  40218a:	0718      	lsls	r0, r3, #28
  40218c:	d407      	bmi.n	40219e <pmc_switch_mck_to_pllack+0x22>
  40218e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402192:	e001      	b.n	402198 <pmc_switch_mck_to_pllack+0x1c>
  402194:	3b01      	subs	r3, #1
  402196:	d016      	beq.n	4021c6 <pmc_switch_mck_to_pllack+0x4a>
  402198:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40219a:	0712      	lsls	r2, r2, #28
  40219c:	d5fa      	bpl.n	402194 <pmc_switch_mck_to_pllack+0x18>
  40219e:	490b      	ldr	r1, [pc, #44]	; (4021cc <pmc_switch_mck_to_pllack+0x50>)
  4021a0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4021a2:	f023 0303 	bic.w	r3, r3, #3
  4021a6:	f043 0302 	orr.w	r3, r3, #2
  4021aa:	630b      	str	r3, [r1, #48]	; 0x30
  4021ac:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  4021ae:	0718      	lsls	r0, r3, #28
  4021b0:	d407      	bmi.n	4021c2 <pmc_switch_mck_to_pllack+0x46>
  4021b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4021b6:	e001      	b.n	4021bc <pmc_switch_mck_to_pllack+0x40>
  4021b8:	3b01      	subs	r3, #1
  4021ba:	d004      	beq.n	4021c6 <pmc_switch_mck_to_pllack+0x4a>
  4021bc:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4021be:	0712      	lsls	r2, r2, #28
  4021c0:	d5fa      	bpl.n	4021b8 <pmc_switch_mck_to_pllack+0x3c>
  4021c2:	2000      	movs	r0, #0
  4021c4:	4770      	bx	lr
  4021c6:	2001      	movs	r0, #1
  4021c8:	4770      	bx	lr
  4021ca:	bf00      	nop
  4021cc:	400e0600 	.word	0x400e0600

004021d0 <pmc_switch_mainck_to_fastrc>:
  4021d0:	4a0e      	ldr	r2, [pc, #56]	; (40220c <pmc_switch_mainck_to_fastrc+0x3c>)
  4021d2:	b410      	push	{r4}
  4021d4:	4c0e      	ldr	r4, [pc, #56]	; (402210 <pmc_switch_mainck_to_fastrc+0x40>)
  4021d6:	4611      	mov	r1, r2
  4021d8:	6a13      	ldr	r3, [r2, #32]
  4021da:	431c      	orrs	r4, r3
  4021dc:	6214      	str	r4, [r2, #32]
  4021de:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  4021e0:	039a      	lsls	r2, r3, #14
  4021e2:	d5fc      	bpl.n	4021de <pmc_switch_mainck_to_fastrc+0xe>
  4021e4:	6a0c      	ldr	r4, [r1, #32]
  4021e6:	4b0b      	ldr	r3, [pc, #44]	; (402214 <pmc_switch_mainck_to_fastrc+0x44>)
  4021e8:	4a08      	ldr	r2, [pc, #32]	; (40220c <pmc_switch_mainck_to_fastrc+0x3c>)
  4021ea:	4023      	ands	r3, r4
  4021ec:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4021f0:	4318      	orrs	r0, r3
  4021f2:	6208      	str	r0, [r1, #32]
  4021f4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4021f6:	039b      	lsls	r3, r3, #14
  4021f8:	d5fc      	bpl.n	4021f4 <pmc_switch_mainck_to_fastrc+0x24>
  4021fa:	6a11      	ldr	r1, [r2, #32]
  4021fc:	4b06      	ldr	r3, [pc, #24]	; (402218 <pmc_switch_mainck_to_fastrc+0x48>)
  4021fe:	400b      	ands	r3, r1
  402200:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402204:	6213      	str	r3, [r2, #32]
  402206:	f85d 4b04 	ldr.w	r4, [sp], #4
  40220a:	4770      	bx	lr
  40220c:	400e0600 	.word	0x400e0600
  402210:	00370008 	.word	0x00370008
  402214:	ffc8ff8f 	.word	0xffc8ff8f
  402218:	fec8ffff 	.word	0xfec8ffff

0040221c <pmc_osc_is_ready_mainck>:
  40221c:	4b02      	ldr	r3, [pc, #8]	; (402228 <pmc_osc_is_ready_mainck+0xc>)
  40221e:	6e98      	ldr	r0, [r3, #104]	; 0x68
  402220:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402224:	4770      	bx	lr
  402226:	bf00      	nop
  402228:	400e0600 	.word	0x400e0600

0040222c <pmc_disable_pllack>:
  40222c:	4b02      	ldr	r3, [pc, #8]	; (402238 <pmc_disable_pllack+0xc>)
  40222e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402232:	629a      	str	r2, [r3, #40]	; 0x28
  402234:	4770      	bx	lr
  402236:	bf00      	nop
  402238:	400e0600 	.word	0x400e0600

0040223c <pmc_is_locked_pllack>:
  40223c:	4b02      	ldr	r3, [pc, #8]	; (402248 <pmc_is_locked_pllack+0xc>)
  40223e:	6e98      	ldr	r0, [r3, #104]	; 0x68
  402240:	f000 0002 	and.w	r0, r0, #2
  402244:	4770      	bx	lr
  402246:	bf00      	nop
  402248:	400e0600 	.word	0x400e0600

0040224c <pmc_enable_periph_clk>:
  40224c:	283f      	cmp	r0, #63	; 0x3f
  40224e:	d81a      	bhi.n	402286 <pmc_enable_periph_clk+0x3a>
  402250:	281f      	cmp	r0, #31
  402252:	d80a      	bhi.n	40226a <pmc_enable_periph_clk+0x1e>
  402254:	2301      	movs	r3, #1
  402256:	4a0e      	ldr	r2, [pc, #56]	; (402290 <pmc_enable_periph_clk+0x44>)
  402258:	fa03 f000 	lsl.w	r0, r3, r0
  40225c:	6991      	ldr	r1, [r2, #24]
  40225e:	ea30 0301 	bics.w	r3, r0, r1
  402262:	d012      	beq.n	40228a <pmc_enable_periph_clk+0x3e>
  402264:	6110      	str	r0, [r2, #16]
  402266:	2000      	movs	r0, #0
  402268:	4770      	bx	lr
  40226a:	2301      	movs	r3, #1
  40226c:	3820      	subs	r0, #32
  40226e:	4a08      	ldr	r2, [pc, #32]	; (402290 <pmc_enable_periph_clk+0x44>)
  402270:	fa03 f000 	lsl.w	r0, r3, r0
  402274:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
  402278:	ea30 0303 	bics.w	r3, r0, r3
  40227c:	d005      	beq.n	40228a <pmc_enable_periph_clk+0x3e>
  40227e:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
  402282:	2000      	movs	r0, #0
  402284:	4770      	bx	lr
  402286:	2001      	movs	r0, #1
  402288:	4770      	bx	lr
  40228a:	2000      	movs	r0, #0
  40228c:	4770      	bx	lr
  40228e:	bf00      	nop
  402290:	400e0600 	.word	0x400e0600

00402294 <pmc_pck_set_prescaler>:
  402294:	4b0b      	ldr	r3, [pc, #44]	; (4022c4 <pmc_pck_set_prescaler+0x30>)
  402296:	f44f 7280 	mov.w	r2, #256	; 0x100
  40229a:	b410      	push	{r4}
  40229c:	eb03 0480 	add.w	r4, r3, r0, lsl #2
  4022a0:	fa02 f000 	lsl.w	r0, r2, r0
  4022a4:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4022a6:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  4022aa:	4311      	orrs	r1, r2
  4022ac:	6421      	str	r1, [r4, #64]	; 0x40
  4022ae:	e002      	b.n	4022b6 <pmc_pck_set_prescaler+0x22>
  4022b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  4022b2:	4202      	tst	r2, r0
  4022b4:	d102      	bne.n	4022bc <pmc_pck_set_prescaler+0x28>
  4022b6:	681a      	ldr	r2, [r3, #0]
  4022b8:	4202      	tst	r2, r0
  4022ba:	d1f9      	bne.n	4022b0 <pmc_pck_set_prescaler+0x1c>
  4022bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4022c0:	4770      	bx	lr
  4022c2:	bf00      	nop
  4022c4:	400e0600 	.word	0x400e0600

004022c8 <pmc_pck_set_source>:
  4022c8:	4b0b      	ldr	r3, [pc, #44]	; (4022f8 <pmc_pck_set_source+0x30>)
  4022ca:	f44f 7280 	mov.w	r2, #256	; 0x100
  4022ce:	b410      	push	{r4}
  4022d0:	eb03 0480 	add.w	r4, r3, r0, lsl #2
  4022d4:	fa02 f000 	lsl.w	r0, r2, r0
  4022d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4022da:	f022 0207 	bic.w	r2, r2, #7
  4022de:	4311      	orrs	r1, r2
  4022e0:	6421      	str	r1, [r4, #64]	; 0x40
  4022e2:	e002      	b.n	4022ea <pmc_pck_set_source+0x22>
  4022e4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  4022e6:	4202      	tst	r2, r0
  4022e8:	d102      	bne.n	4022f0 <pmc_pck_set_source+0x28>
  4022ea:	681a      	ldr	r2, [r3, #0]
  4022ec:	4202      	tst	r2, r0
  4022ee:	d1f9      	bne.n	4022e4 <pmc_pck_set_source+0x1c>
  4022f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4022f4:	4770      	bx	lr
  4022f6:	bf00      	nop
  4022f8:	400e0600 	.word	0x400e0600

004022fc <pmc_enable_pck>:
  4022fc:	f44f 7380 	mov.w	r3, #256	; 0x100
  402300:	4a02      	ldr	r2, [pc, #8]	; (40230c <pmc_enable_pck+0x10>)
  402302:	fa03 f000 	lsl.w	r0, r3, r0
  402306:	6010      	str	r0, [r2, #0]
  402308:	4770      	bx	lr
  40230a:	bf00      	nop
  40230c:	400e0600 	.word	0x400e0600

00402310 <Dummy_Handler>:
  402310:	e7fe      	b.n	402310 <Dummy_Handler>
  402312:	bf00      	nop

00402314 <Dummy_Handler2>:
  402314:	e7fe      	b.n	402314 <Dummy_Handler2>
  402316:	bf00      	nop

00402318 <Reset_Handler>:
  402318:	4920      	ldr	r1, [pc, #128]	; (40239c <Reset_Handler+0x84>)
  40231a:	4821      	ldr	r0, [pc, #132]	; (4023a0 <Reset_Handler+0x88>)
  40231c:	4281      	cmp	r1, r0
  40231e:	b510      	push	{r4, lr}
  402320:	b082      	sub	sp, #8
  402322:	d009      	beq.n	402338 <Reset_Handler+0x20>
  402324:	4b1f      	ldr	r3, [pc, #124]	; (4023a4 <Reset_Handler+0x8c>)
  402326:	4298      	cmp	r0, r3
  402328:	d206      	bcs.n	402338 <Reset_Handler+0x20>
  40232a:	43c2      	mvns	r2, r0
  40232c:	4c1e      	ldr	r4, [pc, #120]	; (4023a8 <Reset_Handler+0x90>)
  40232e:	441a      	add	r2, r3
  402330:	f022 0203 	bic.w	r2, r2, #3
  402334:	3204      	adds	r2, #4
  402336:	47a0      	blx	r4
  402338:	481c      	ldr	r0, [pc, #112]	; (4023ac <Reset_Handler+0x94>)
  40233a:	4b1d      	ldr	r3, [pc, #116]	; (4023b0 <Reset_Handler+0x98>)
  40233c:	4298      	cmp	r0, r3
  40233e:	d207      	bcs.n	402350 <Reset_Handler+0x38>
  402340:	43c2      	mvns	r2, r0
  402342:	2100      	movs	r1, #0
  402344:	4c1b      	ldr	r4, [pc, #108]	; (4023b4 <Reset_Handler+0x9c>)
  402346:	441a      	add	r2, r3
  402348:	f022 0203 	bic.w	r2, r2, #3
  40234c:	3204      	adds	r2, #4
  40234e:	47a0      	blx	r4
  402350:	4b19      	ldr	r3, [pc, #100]	; (4023b8 <Reset_Handler+0xa0>)
  402352:	4a1a      	ldr	r2, [pc, #104]	; (4023bc <Reset_Handler+0xa4>)
  402354:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402358:	6093      	str	r3, [r2, #8]
  40235a:	f3ef 8310 	mrs	r3, PRIMASK
  40235e:	fab3 f383 	clz	r3, r3
  402362:	095b      	lsrs	r3, r3, #5
  402364:	9301      	str	r3, [sp, #4]
  402366:	b672      	cpsid	i
  402368:	f3bf 8f5f 	dmb	sy
  40236c:	4a14      	ldr	r2, [pc, #80]	; (4023c0 <Reset_Handler+0xa8>)
  40236e:	2300      	movs	r3, #0
  402370:	4914      	ldr	r1, [pc, #80]	; (4023c4 <Reset_Handler+0xac>)
  402372:	7013      	strb	r3, [r2, #0]
  402374:	9801      	ldr	r0, [sp, #4]
  402376:	680b      	ldr	r3, [r1, #0]
  402378:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40237c:	600b      	str	r3, [r1, #0]
  40237e:	f3bf 8f4f 	dsb	sy
  402382:	f3bf 8f6f 	isb	sy
  402386:	b120      	cbz	r0, 402392 <Reset_Handler+0x7a>
  402388:	2301      	movs	r3, #1
  40238a:	7013      	strb	r3, [r2, #0]
  40238c:	f3bf 8f5f 	dmb	sy
  402390:	b662      	cpsie	i
  402392:	4b0d      	ldr	r3, [pc, #52]	; (4023c8 <Reset_Handler+0xb0>)
  402394:	4798      	blx	r3
  402396:	4b0d      	ldr	r3, [pc, #52]	; (4023cc <Reset_Handler+0xb4>)
  402398:	4798      	blx	r3
  40239a:	e7fe      	b.n	40239a <Reset_Handler+0x82>
  40239c:	00408300 	.word	0x00408300
  4023a0:	20400000 	.word	0x20400000
  4023a4:	204009f8 	.word	0x204009f8
  4023a8:	00404f09 	.word	0x00404f09
  4023ac:	20404000 	.word	0x20404000
  4023b0:	2043f4b8 	.word	0x2043f4b8
  4023b4:	0040503d 	.word	0x0040503d
  4023b8:	00400000 	.word	0x00400000
  4023bc:	e000ed00 	.word	0xe000ed00
  4023c0:	20400020 	.word	0x20400020
  4023c4:	e000ed88 	.word	0xe000ed88
  4023c8:	00404921 	.word	0x00404921
  4023cc:	00402a79 	.word	0x00402a79

004023d0 <SystemCoreClockUpdate>:
  4023d0:	4a32      	ldr	r2, [pc, #200]	; (40249c <SystemCoreClockUpdate+0xcc>)
  4023d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4023d4:	f003 0303 	and.w	r3, r3, #3
  4023d8:	2b01      	cmp	r3, #1
  4023da:	d03c      	beq.n	402456 <SystemCoreClockUpdate+0x86>
  4023dc:	d325      	bcc.n	40242a <SystemCoreClockUpdate+0x5a>
  4023de:	2b02      	cmp	r3, #2
  4023e0:	d00d      	beq.n	4023fe <SystemCoreClockUpdate+0x2e>
  4023e2:	482f      	ldr	r0, [pc, #188]	; (4024a0 <SystemCoreClockUpdate+0xd0>)
  4023e4:	6803      	ldr	r3, [r0, #0]
  4023e6:	492d      	ldr	r1, [pc, #180]	; (40249c <SystemCoreClockUpdate+0xcc>)
  4023e8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4023ea:	f002 0270 	and.w	r2, r2, #112	; 0x70
  4023ee:	2a70      	cmp	r2, #112	; 0x70
  4023f0:	d02b      	beq.n	40244a <SystemCoreClockUpdate+0x7a>
  4023f2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4023f4:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4023f8:	40d3      	lsrs	r3, r2
  4023fa:	6003      	str	r3, [r0, #0]
  4023fc:	4770      	bx	lr
  4023fe:	6a13      	ldr	r3, [r2, #32]
  402400:	4827      	ldr	r0, [pc, #156]	; (4024a0 <SystemCoreClockUpdate+0xd0>)
  402402:	01db      	lsls	r3, r3, #7
  402404:	d53a      	bpl.n	40247c <SystemCoreClockUpdate+0xac>
  402406:	4b27      	ldr	r3, [pc, #156]	; (4024a4 <SystemCoreClockUpdate+0xd4>)
  402408:	6003      	str	r3, [r0, #0]
  40240a:	4924      	ldr	r1, [pc, #144]	; (40249c <SystemCoreClockUpdate+0xcc>)
  40240c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  40240e:	f002 0203 	and.w	r2, r2, #3
  402412:	2a02      	cmp	r2, #2
  402414:	d1e7      	bne.n	4023e6 <SystemCoreClockUpdate+0x16>
  402416:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  402418:	6a89      	ldr	r1, [r1, #40]	; 0x28
  40241a:	f3c2 420a 	ubfx	r2, r2, #16, #11
  40241e:	b2c9      	uxtb	r1, r1
  402420:	fb02 3303 	mla	r3, r2, r3, r3
  402424:	fbb3 f3f1 	udiv	r3, r3, r1
  402428:	e7dd      	b.n	4023e6 <SystemCoreClockUpdate+0x16>
  40242a:	4b1f      	ldr	r3, [pc, #124]	; (4024a8 <SystemCoreClockUpdate+0xd8>)
  40242c:	491b      	ldr	r1, [pc, #108]	; (40249c <SystemCoreClockUpdate+0xcc>)
  40242e:	695b      	ldr	r3, [r3, #20]
  402430:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  402432:	f013 0f80 	tst.w	r3, #128	; 0x80
  402436:	481a      	ldr	r0, [pc, #104]	; (4024a0 <SystemCoreClockUpdate+0xd0>)
  402438:	f002 0270 	and.w	r2, r2, #112	; 0x70
  40243c:	bf14      	ite	ne
  40243e:	f44f 4300 	movne.w	r3, #32768	; 0x8000
  402442:	f44f 43fa 	moveq.w	r3, #32000	; 0x7d00
  402446:	2a70      	cmp	r2, #112	; 0x70
  402448:	d1d3      	bne.n	4023f2 <SystemCoreClockUpdate+0x22>
  40244a:	4a18      	ldr	r2, [pc, #96]	; (4024ac <SystemCoreClockUpdate+0xdc>)
  40244c:	fba2 2303 	umull	r2, r3, r2, r3
  402450:	085b      	lsrs	r3, r3, #1
  402452:	6003      	str	r3, [r0, #0]
  402454:	4770      	bx	lr
  402456:	6a13      	ldr	r3, [r2, #32]
  402458:	01d9      	lsls	r1, r3, #7
  40245a:	d40c      	bmi.n	402476 <SystemCoreClockUpdate+0xa6>
  40245c:	4810      	ldr	r0, [pc, #64]	; (4024a0 <SystemCoreClockUpdate+0xd0>)
  40245e:	4914      	ldr	r1, [pc, #80]	; (4024b0 <SystemCoreClockUpdate+0xe0>)
  402460:	6001      	str	r1, [r0, #0]
  402462:	6a12      	ldr	r2, [r2, #32]
  402464:	f002 0270 	and.w	r2, r2, #112	; 0x70
  402468:	2a10      	cmp	r2, #16
  40246a:	d011      	beq.n	402490 <SystemCoreClockUpdate+0xc0>
  40246c:	4b0d      	ldr	r3, [pc, #52]	; (4024a4 <SystemCoreClockUpdate+0xd4>)
  40246e:	2a20      	cmp	r2, #32
  402470:	bf18      	it	ne
  402472:	460b      	movne	r3, r1
  402474:	e7b7      	b.n	4023e6 <SystemCoreClockUpdate+0x16>
  402476:	4b0b      	ldr	r3, [pc, #44]	; (4024a4 <SystemCoreClockUpdate+0xd4>)
  402478:	4809      	ldr	r0, [pc, #36]	; (4024a0 <SystemCoreClockUpdate+0xd0>)
  40247a:	e7b4      	b.n	4023e6 <SystemCoreClockUpdate+0x16>
  40247c:	4b0c      	ldr	r3, [pc, #48]	; (4024b0 <SystemCoreClockUpdate+0xe0>)
  40247e:	6003      	str	r3, [r0, #0]
  402480:	6a12      	ldr	r2, [r2, #32]
  402482:	f002 0270 	and.w	r2, r2, #112	; 0x70
  402486:	2a10      	cmp	r2, #16
  402488:	d004      	beq.n	402494 <SystemCoreClockUpdate+0xc4>
  40248a:	2a20      	cmp	r2, #32
  40248c:	d0bb      	beq.n	402406 <SystemCoreClockUpdate+0x36>
  40248e:	e7bc      	b.n	40240a <SystemCoreClockUpdate+0x3a>
  402490:	4b08      	ldr	r3, [pc, #32]	; (4024b4 <SystemCoreClockUpdate+0xe4>)
  402492:	e7a8      	b.n	4023e6 <SystemCoreClockUpdate+0x16>
  402494:	4b07      	ldr	r3, [pc, #28]	; (4024b4 <SystemCoreClockUpdate+0xe4>)
  402496:	6003      	str	r3, [r0, #0]
  402498:	e7b7      	b.n	40240a <SystemCoreClockUpdate+0x3a>
  40249a:	bf00      	nop
  40249c:	400e0600 	.word	0x400e0600
  4024a0:	20400024 	.word	0x20400024
  4024a4:	00b71b00 	.word	0x00b71b00
  4024a8:	400e1810 	.word	0x400e1810
  4024ac:	aaaaaaab 	.word	0xaaaaaaab
  4024b0:	003d0900 	.word	0x003d0900
  4024b4:	007a1200 	.word	0x007a1200

004024b8 <system_init_flash>:
  4024b8:	4b16      	ldr	r3, [pc, #88]	; (402514 <system_init_flash+0x5c>)
  4024ba:	4298      	cmp	r0, r3
  4024bc:	d917      	bls.n	4024ee <system_init_flash+0x36>
  4024be:	4b16      	ldr	r3, [pc, #88]	; (402518 <system_init_flash+0x60>)
  4024c0:	4298      	cmp	r0, r3
  4024c2:	d910      	bls.n	4024e6 <system_init_flash+0x2e>
  4024c4:	4b15      	ldr	r3, [pc, #84]	; (40251c <system_init_flash+0x64>)
  4024c6:	4298      	cmp	r0, r3
  4024c8:	d91a      	bls.n	402500 <system_init_flash+0x48>
  4024ca:	4b15      	ldr	r3, [pc, #84]	; (402520 <system_init_flash+0x68>)
  4024cc:	4298      	cmp	r0, r3
  4024ce:	d913      	bls.n	4024f8 <system_init_flash+0x40>
  4024d0:	4b14      	ldr	r3, [pc, #80]	; (402524 <system_init_flash+0x6c>)
  4024d2:	4298      	cmp	r0, r3
  4024d4:	d918      	bls.n	402508 <system_init_flash+0x50>
  4024d6:	4b14      	ldr	r3, [pc, #80]	; (402528 <system_init_flash+0x70>)
  4024d8:	4298      	cmp	r0, r3
  4024da:	4b14      	ldr	r3, [pc, #80]	; (40252c <system_init_flash+0x74>)
  4024dc:	bf94      	ite	ls
  4024de:	4a14      	ldrls	r2, [pc, #80]	; (402530 <system_init_flash+0x78>)
  4024e0:	4a14      	ldrhi	r2, [pc, #80]	; (402534 <system_init_flash+0x7c>)
  4024e2:	601a      	str	r2, [r3, #0]
  4024e4:	4770      	bx	lr
  4024e6:	4b11      	ldr	r3, [pc, #68]	; (40252c <system_init_flash+0x74>)
  4024e8:	4a13      	ldr	r2, [pc, #76]	; (402538 <system_init_flash+0x80>)
  4024ea:	601a      	str	r2, [r3, #0]
  4024ec:	4770      	bx	lr
  4024ee:	4b0f      	ldr	r3, [pc, #60]	; (40252c <system_init_flash+0x74>)
  4024f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4024f4:	601a      	str	r2, [r3, #0]
  4024f6:	4770      	bx	lr
  4024f8:	4b0c      	ldr	r3, [pc, #48]	; (40252c <system_init_flash+0x74>)
  4024fa:	4a10      	ldr	r2, [pc, #64]	; (40253c <system_init_flash+0x84>)
  4024fc:	601a      	str	r2, [r3, #0]
  4024fe:	4770      	bx	lr
  402500:	4b0a      	ldr	r3, [pc, #40]	; (40252c <system_init_flash+0x74>)
  402502:	4a0f      	ldr	r2, [pc, #60]	; (402540 <system_init_flash+0x88>)
  402504:	601a      	str	r2, [r3, #0]
  402506:	4770      	bx	lr
  402508:	4b08      	ldr	r3, [pc, #32]	; (40252c <system_init_flash+0x74>)
  40250a:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40250e:	601a      	str	r2, [r3, #0]
  402510:	4770      	bx	lr
  402512:	bf00      	nop
  402514:	015ef3bf 	.word	0x015ef3bf
  402518:	02bde77f 	.word	0x02bde77f
  40251c:	041cdb3f 	.word	0x041cdb3f
  402520:	057bceff 	.word	0x057bceff
  402524:	06dac2bf 	.word	0x06dac2bf
  402528:	0839b67f 	.word	0x0839b67f
  40252c:	400e0c00 	.word	0x400e0c00
  402530:	04000500 	.word	0x04000500
  402534:	04000600 	.word	0x04000600
  402538:	04000100 	.word	0x04000100
  40253c:	04000300 	.word	0x04000300
  402540:	04000200 	.word	0x04000200

00402544 <_sbrk>:
  402544:	4a0d      	ldr	r2, [pc, #52]	; (40257c <_sbrk+0x38>)
  402546:	490e      	ldr	r1, [pc, #56]	; (402580 <_sbrk+0x3c>)
  402548:	6813      	ldr	r3, [r2, #0]
  40254a:	b143      	cbz	r3, 40255e <_sbrk+0x1a>
  40254c:	4418      	add	r0, r3
  40254e:	4281      	cmp	r1, r0
  402550:	db02      	blt.n	402558 <_sbrk+0x14>
  402552:	6010      	str	r0, [r2, #0]
  402554:	4618      	mov	r0, r3
  402556:	4770      	bx	lr
  402558:	f04f 30ff 	mov.w	r0, #4294967295
  40255c:	4770      	bx	lr
  40255e:	b410      	push	{r4}
  402560:	4c08      	ldr	r4, [pc, #32]	; (402584 <_sbrk+0x40>)
  402562:	4420      	add	r0, r4
  402564:	6014      	str	r4, [r2, #0]
  402566:	4281      	cmp	r1, r0
  402568:	db04      	blt.n	402574 <_sbrk+0x30>
  40256a:	6010      	str	r0, [r2, #0]
  40256c:	4620      	mov	r0, r4
  40256e:	f85d 4b04 	ldr.w	r4, [sp], #4
  402572:	4770      	bx	lr
  402574:	f04f 30ff 	mov.w	r0, #4294967295
  402578:	e7f9      	b.n	40256e <_sbrk+0x2a>
  40257a:	bf00      	nop
  40257c:	20415110 	.word	0x20415110
  402580:	2045fffc 	.word	0x2045fffc
  402584:	204416b8 	.word	0x204416b8

00402588 <_close>:
  402588:	f04f 30ff 	mov.w	r0, #4294967295
  40258c:	4770      	bx	lr
  40258e:	bf00      	nop

00402590 <_fstat>:
  402590:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  402594:	2000      	movs	r0, #0
  402596:	604b      	str	r3, [r1, #4]
  402598:	4770      	bx	lr
  40259a:	bf00      	nop

0040259c <_isatty>:
  40259c:	2001      	movs	r0, #1
  40259e:	4770      	bx	lr

004025a0 <_lseek>:
  4025a0:	2000      	movs	r0, #0
  4025a2:	4770      	bx	lr

004025a4 <USART1_Handler>:
volatile uint32_t uart_cnt = 0;
volatile uint32_t waiting_for_button_press = 0;
volatile bool chord_harmonies[9] = {false, false, false, false, false, false, false, false, false}; // last one is autotune  
volatile uint32_t prev_midi_status = 0; 
void USART_SERIAL_ISR_HANDLER(void)
{
  4025a4:	b538      	push	{r3, r4, r5, lr}
	
	uint32_t dw_status = usart_get_status(USART_SERIAL);
  4025a6:	48ce      	ldr	r0, [pc, #824]	; (4028e0 <USART1_Handler+0x33c>)
  4025a8:	4bce      	ldr	r3, [pc, #824]	; (4028e4 <USART1_Handler+0x340>)
  4025aa:	4798      	blx	r3
	if (dw_status & US_CSR_RXRDY) {
  4025ac:	07c3      	lsls	r3, r0, #31
  4025ae:	d400      	bmi.n	4025b2 <USART1_Handler+0xe>
  4025b0:	bd38      	pop	{r3, r4, r5, pc}
		usart_read(USART_SERIAL, (uint32_t *)&received_bytes[uart_cnt++]);
  4025b2:	4ccd      	ldr	r4, [pc, #820]	; (4028e8 <USART1_Handler+0x344>)
  4025b4:	4dcd      	ldr	r5, [pc, #820]	; (4028ec <USART1_Handler+0x348>)
  4025b6:	6821      	ldr	r1, [r4, #0]
  4025b8:	4bcd      	ldr	r3, [pc, #820]	; (4028f0 <USART1_Handler+0x34c>)
  4025ba:	1c4a      	adds	r2, r1, #1
  4025bc:	48c8      	ldr	r0, [pc, #800]	; (4028e0 <USART1_Handler+0x33c>)
  4025be:	eb05 0181 	add.w	r1, r5, r1, lsl #2
  4025c2:	6022      	str	r2, [r4, #0]
  4025c4:	4798      	blx	r3
			68 Ab
			69 A  
			70 Bb
			71 B
		*/ 
		if (received_bytes[0] == CH_BUTTON && uart_cnt == 2 && prev_midi_status == 176)
  4025c6:	682b      	ldr	r3, [r5, #0]
  4025c8:	2bc0      	cmp	r3, #192	; 0xc0
  4025ca:	f000 80cd 	beq.w	402768 <USART1_Handler+0x1c4>
		{
			uart_cnt = 0; 
			uint32_t *data1 = (uint32_t *)&received_bytes[1];
			chord_harmonies[*data1] = !chord_harmonies[*data1];
		}
		else if (uart_cnt == 3)
  4025ce:	6823      	ldr	r3, [r4, #0]
  4025d0:	2b03      	cmp	r3, #3
  4025d2:	d1ed      	bne.n	4025b0 <USART1_Handler+0xc>
		{
			uart_cnt = 0; 
			uint32_t *message = (uint32_t *)&received_bytes[0]; 
			uint32_t *data1 = (uint32_t *)&received_bytes[1]; 
			uint32_t *data2 = (uint32_t *)&received_bytes[2];
			prev_midi_status = *message;  
  4025d4:	682a      	ldr	r2, [r5, #0]
			uart_cnt = 0; 
  4025d6:	2100      	movs	r1, #0
			prev_midi_status = *message;  
  4025d8:	48c6      	ldr	r0, [pc, #792]	; (4028f4 <USART1_Handler+0x350>)
			if (*message == 255 && *data1 == 255 && *data2 == 255)
  4025da:	2aff      	cmp	r2, #255	; 0xff
			uart_cnt = 0; 
  4025dc:	6021      	str	r1, [r4, #0]
			prev_midi_status = *message;  
  4025de:	6002      	str	r2, [r0, #0]
			if (*message == 255 && *data1 == 255 && *data2 == 255)
  4025e0:	f000 81c2 	beq.w	402968 <USART1_Handler+0x3c4>
			}
			else if (*message == 255 && *data1 == 255)
			{
				key_root = *data2; 
			}
			else if (*message == NOTE_ON)
  4025e4:	2a90      	cmp	r2, #144	; 0x90
  4025e6:	f000 81c9 	beq.w	40297c <USART1_Handler+0x3d8>
						harmony_list[i].idx = *data1; 
						break; 
					}
				}
			}
			else if (*message == NOTE_OFF)
  4025ea:	2a80      	cmp	r2, #128	; 0x80
  4025ec:	f000 80ce 	beq.w	40278c <USART1_Handler+0x1e8>
						harmony_list[i].active = false; 
						break; 
					}
				}
			}
			else if (*message == SLIDER) 
  4025f0:	2ab0      	cmp	r2, #176	; 0xb0
  4025f2:	f040 81fb 	bne.w	4029ec <USART1_Handler+0x448>
			{
				switch(*data1)
  4025f6:	686b      	ldr	r3, [r5, #4]
  4025f8:	3b05      	subs	r3, #5
  4025fa:	2b58      	cmp	r3, #88	; 0x58
  4025fc:	d8d8      	bhi.n	4025b0 <USART1_Handler+0xc>
  4025fe:	a201      	add	r2, pc, #4	; (adr r2, 402604 <USART1_Handler+0x60>)
  402600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402604:	00402951 	.word	0x00402951
  402608:	004025b1 	.word	0x004025b1
  40260c:	00402939 	.word	0x00402939
  402610:	004025b1 	.word	0x004025b1
  402614:	004025b1 	.word	0x004025b1
  402618:	004025b1 	.word	0x004025b1
  40261c:	004025b1 	.word	0x004025b1
  402620:	004025b1 	.word	0x004025b1
  402624:	004025b1 	.word	0x004025b1
  402628:	004025b1 	.word	0x004025b1
  40262c:	004025b1 	.word	0x004025b1
  402630:	004025b1 	.word	0x004025b1
  402634:	004025b1 	.word	0x004025b1
  402638:	004025b1 	.word	0x004025b1
  40263c:	004025b1 	.word	0x004025b1
  402640:	004025b1 	.word	0x004025b1
  402644:	004025b1 	.word	0x004025b1
  402648:	004025b1 	.word	0x004025b1
  40264c:	004025b1 	.word	0x004025b1
  402650:	004025b1 	.word	0x004025b1
  402654:	004025b1 	.word	0x004025b1
  402658:	004025b1 	.word	0x004025b1
  40265c:	004025b1 	.word	0x004025b1
  402660:	004025b1 	.word	0x004025b1
  402664:	004025b1 	.word	0x004025b1
  402668:	004025b1 	.word	0x004025b1
  40266c:	004025b1 	.word	0x004025b1
  402670:	004025b1 	.word	0x004025b1
  402674:	004025b1 	.word	0x004025b1
  402678:	004025b1 	.word	0x004025b1
  40267c:	004025b1 	.word	0x004025b1
  402680:	004025b1 	.word	0x004025b1
  402684:	004025b1 	.word	0x004025b1
  402688:	004025b1 	.word	0x004025b1
  40268c:	004025b1 	.word	0x004025b1
  402690:	004025b1 	.word	0x004025b1
  402694:	004025b1 	.word	0x004025b1
  402698:	004025b1 	.word	0x004025b1
  40269c:	004025b1 	.word	0x004025b1
  4026a0:	004025b1 	.word	0x004025b1
  4026a4:	004025b1 	.word	0x004025b1
  4026a8:	004025b1 	.word	0x004025b1
  4026ac:	004025b1 	.word	0x004025b1
  4026b0:	004025b1 	.word	0x004025b1
  4026b4:	004025b1 	.word	0x004025b1
  4026b8:	004025b1 	.word	0x004025b1
  4026bc:	004025b1 	.word	0x004025b1
  4026c0:	004025b1 	.word	0x004025b1
  4026c4:	004025b1 	.word	0x004025b1
  4026c8:	004025b1 	.word	0x004025b1
  4026cc:	004025b1 	.word	0x004025b1
  4026d0:	004025b1 	.word	0x004025b1
  4026d4:	004025b1 	.word	0x004025b1
  4026d8:	004025b1 	.word	0x004025b1
  4026dc:	004025b1 	.word	0x004025b1
  4026e0:	004025b1 	.word	0x004025b1
  4026e4:	004025b1 	.word	0x004025b1
  4026e8:	004025b1 	.word	0x004025b1
  4026ec:	004025b1 	.word	0x004025b1
  4026f0:	004025b1 	.word	0x004025b1
  4026f4:	004025b1 	.word	0x004025b1
  4026f8:	004025b1 	.word	0x004025b1
  4026fc:	004025b1 	.word	0x004025b1
  402700:	004025b1 	.word	0x004025b1
  402704:	004025b1 	.word	0x004025b1
  402708:	004025b1 	.word	0x004025b1
  40270c:	004028bf 	.word	0x004028bf
  402710:	00402873 	.word	0x00402873
  402714:	0040285b 	.word	0x0040285b
  402718:	00402843 	.word	0x00402843
  40271c:	004025b1 	.word	0x004025b1
  402720:	004025b1 	.word	0x004025b1
  402724:	004025b1 	.word	0x004025b1
  402728:	004025b1 	.word	0x004025b1
  40272c:	004025b1 	.word	0x004025b1
  402730:	004025b1 	.word	0x004025b1
  402734:	004025b1 	.word	0x004025b1
  402738:	004025b1 	.word	0x004025b1
  40273c:	004025b1 	.word	0x004025b1
  402740:	0040282b 	.word	0x0040282b
  402744:	004025b1 	.word	0x004025b1
  402748:	004025b1 	.word	0x004025b1
  40274c:	004025b1 	.word	0x004025b1
  402750:	004025b1 	.word	0x004025b1
  402754:	004025b1 	.word	0x004025b1
  402758:	004025b1 	.word	0x004025b1
  40275c:	004028a7 	.word	0x004028a7
  402760:	004025b1 	.word	0x004025b1
  402764:	0040288b 	.word	0x0040288b
		if (received_bytes[0] == CH_BUTTON && uart_cnt == 2 && prev_midi_status == 176)
  402768:	6823      	ldr	r3, [r4, #0]
  40276a:	2b02      	cmp	r3, #2
  40276c:	f47f af2f 	bne.w	4025ce <USART1_Handler+0x2a>
  402770:	4b60      	ldr	r3, [pc, #384]	; (4028f4 <USART1_Handler+0x350>)
  402772:	681b      	ldr	r3, [r3, #0]
  402774:	2bb0      	cmp	r3, #176	; 0xb0
  402776:	f47f af2a 	bne.w	4025ce <USART1_Handler+0x2a>
			chord_harmonies[*data1] = !chord_harmonies[*data1];
  40277a:	686a      	ldr	r2, [r5, #4]
			uart_cnt = 0; 
  40277c:	2300      	movs	r3, #0
			chord_harmonies[*data1] = !chord_harmonies[*data1];
  40277e:	495e      	ldr	r1, [pc, #376]	; (4028f8 <USART1_Handler+0x354>)
			uart_cnt = 0; 
  402780:	6023      	str	r3, [r4, #0]
			chord_harmonies[*data1] = !chord_harmonies[*data1];
  402782:	5c8b      	ldrb	r3, [r1, r2]
  402784:	f083 0301 	eor.w	r3, r3, #1
  402788:	548b      	strb	r3, [r1, r2]
		{
  40278a:	bd38      	pop	{r3, r4, r5, pc}
					if (harmony_list[i].active == true && harmony_list[i].idx == *data1)
  40278c:	4a5b      	ldr	r2, [pc, #364]	; (4028fc <USART1_Handler+0x358>)
  40278e:	686b      	ldr	r3, [r5, #4]
  402790:	7a10      	ldrb	r0, [r2, #8]
  402792:	b110      	cbz	r0, 40279a <USART1_Handler+0x1f6>
  402794:	6850      	ldr	r0, [r2, #4]
  402796:	4283      	cmp	r3, r0
  402798:	d040      	beq.n	40281c <USART1_Handler+0x278>
  40279a:	7d11      	ldrb	r1, [r2, #20]
  40279c:	b119      	cbz	r1, 4027a6 <USART1_Handler+0x202>
  40279e:	6911      	ldr	r1, [r2, #16]
  4027a0:	428b      	cmp	r3, r1
  4027a2:	f000 8148 	beq.w	402a36 <USART1_Handler+0x492>
  4027a6:	f892 1020 	ldrb.w	r1, [r2, #32]
  4027aa:	b119      	cbz	r1, 4027b4 <USART1_Handler+0x210>
  4027ac:	69d1      	ldr	r1, [r2, #28]
  4027ae:	428b      	cmp	r3, r1
  4027b0:	f000 8143 	beq.w	402a3a <USART1_Handler+0x496>
  4027b4:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
  4027b8:	b119      	cbz	r1, 4027c2 <USART1_Handler+0x21e>
  4027ba:	6a91      	ldr	r1, [r2, #40]	; 0x28
  4027bc:	428b      	cmp	r3, r1
  4027be:	f000 813e 	beq.w	402a3e <USART1_Handler+0x49a>
  4027c2:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
  4027c6:	b119      	cbz	r1, 4027d0 <USART1_Handler+0x22c>
  4027c8:	6b51      	ldr	r1, [r2, #52]	; 0x34
  4027ca:	428b      	cmp	r3, r1
  4027cc:	f000 813b 	beq.w	402a46 <USART1_Handler+0x4a2>
  4027d0:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
  4027d4:	b119      	cbz	r1, 4027de <USART1_Handler+0x23a>
  4027d6:	6c11      	ldr	r1, [r2, #64]	; 0x40
  4027d8:	428b      	cmp	r3, r1
  4027da:	f000 8136 	beq.w	402a4a <USART1_Handler+0x4a6>
  4027de:	f892 1050 	ldrb.w	r1, [r2, #80]	; 0x50
  4027e2:	b119      	cbz	r1, 4027ec <USART1_Handler+0x248>
  4027e4:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
  4027e6:	428b      	cmp	r3, r1
  4027e8:	f000 8131 	beq.w	402a4e <USART1_Handler+0x4aa>
  4027ec:	f892 105c 	ldrb.w	r1, [r2, #92]	; 0x5c
  4027f0:	b119      	cbz	r1, 4027fa <USART1_Handler+0x256>
  4027f2:	6d91      	ldr	r1, [r2, #88]	; 0x58
  4027f4:	428b      	cmp	r3, r1
  4027f6:	f000 812c 	beq.w	402a52 <USART1_Handler+0x4ae>
  4027fa:	f892 1068 	ldrb.w	r1, [r2, #104]	; 0x68
  4027fe:	b119      	cbz	r1, 402808 <USART1_Handler+0x264>
  402800:	6e51      	ldr	r1, [r2, #100]	; 0x64
  402802:	428b      	cmp	r3, r1
  402804:	f000 811d 	beq.w	402a42 <USART1_Handler+0x49e>
  402808:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
  40280c:	2900      	cmp	r1, #0
  40280e:	f43f aecf 	beq.w	4025b0 <USART1_Handler+0xc>
  402812:	6f11      	ldr	r1, [r2, #112]	; 0x70
  402814:	4299      	cmp	r1, r3
  402816:	f47f aecb 	bne.w	4025b0 <USART1_Handler+0xc>
				for (int i = 0; i < MAX_NUM_KEYS_HARMONIES; i++)
  40281a:	2109      	movs	r1, #9
						harmony_list[i].active = false; 
  40281c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  402820:	2000      	movs	r0, #0
  402822:	eb02 0381 	add.w	r3, r2, r1, lsl #2
  402826:	7218      	strb	r0, [r3, #8]
						break; 
  402828:	bd38      	pop	{r3, r4, r5, pc}
				{
					case DRY_VOLUME_CH: 
						dry_volume = (float)*data2 / 127.0f; break; 
					case HARM_VOLUME_CH: 
						harm_volume = (float)*data2 / 127.0f; break; 
  40282a:	edd5 7a02 	vldr	s15, [r5, #8]
  40282e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 402934 <USART1_Handler+0x390>
  402832:	eef8 7a67 	vcvt.f32.u32	s15, s15
  402836:	4b32      	ldr	r3, [pc, #200]	; (402900 <USART1_Handler+0x35c>)
  402838:	ee67 7a87 	vmul.f32	s15, s15, s14
  40283c:	edc3 7a00 	vstr	s15, [r3]
  402840:	bd38      	pop	{r3, r4, r5, pc}
					case DELAY_FEEDBACK_CH: 
						delay_feedback = 0.8f * (float)*data2 / 127.0f; break;
					case DELAY_SPEED_CH: 
						delay_speed = 16200 - 14000 * (float)*data2 / 127.0f; break; 
					case DELAY_VOLUME_CH: 
						delay_volume = 0.7f * (float)*data2 / 127.0f; break; 
  402842:	edd5 7a02 	vldr	s15, [r5, #8]
  402846:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 402904 <USART1_Handler+0x360>
  40284a:	eef8 7a67 	vcvt.f32.u32	s15, s15
  40284e:	4b2e      	ldr	r3, [pc, #184]	; (402908 <USART1_Handler+0x364>)
  402850:	ee67 7a87 	vmul.f32	s15, s15, s14
  402854:	edc3 7a00 	vstr	s15, [r3]
  402858:	bd38      	pop	{r3, r4, r5, pc}
						chorus_volume = (float)*data2 / 127.0f; break;
  40285a:	edd5 7a02 	vldr	s15, [r5, #8]
  40285e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 402934 <USART1_Handler+0x390>
  402862:	eef8 7a67 	vcvt.f32.u32	s15, s15
  402866:	4b29      	ldr	r3, [pc, #164]	; (40290c <USART1_Handler+0x368>)
  402868:	ee67 7a87 	vmul.f32	s15, s15, s14
  40286c:	edc3 7a00 	vstr	s15, [r3]
  402870:	bd38      	pop	{r3, r4, r5, pc}
						reverb_volume = (float)*data2 / 127.0f; break; 
  402872:	edd5 7a02 	vldr	s15, [r5, #8]
  402876:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 402934 <USART1_Handler+0x390>
  40287a:	eef8 7a67 	vcvt.f32.u32	s15, s15
  40287e:	4b24      	ldr	r3, [pc, #144]	; (402910 <USART1_Handler+0x36c>)
  402880:	ee67 7a87 	vmul.f32	s15, s15, s14
  402884:	edc3 7a00 	vstr	s15, [r3]
  402888:	bd38      	pop	{r3, r4, r5, pc}
						chorus_speed = 0.05f + 2.0f*(float)*data2 / 127.0f; break;
  40288a:	ed95 7a02 	vldr	s14, [r5, #8]
  40288e:	eddf 6a21 	vldr	s13, [pc, #132]	; 402914 <USART1_Handler+0x370>
  402892:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  402896:	eddf 7a20 	vldr	s15, [pc, #128]	; 402918 <USART1_Handler+0x374>
  40289a:	4b20      	ldr	r3, [pc, #128]	; (40291c <USART1_Handler+0x378>)
  40289c:	eee7 7a26 	vfma.f32	s15, s14, s13
  4028a0:	edc3 7a00 	vstr	s15, [r3]
  4028a4:	bd38      	pop	{r3, r4, r5, pc}
						delay_feedback = 0.8f * (float)*data2 / 127.0f; break;
  4028a6:	edd5 7a02 	vldr	s15, [r5, #8]
  4028aa:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 402920 <USART1_Handler+0x37c>
  4028ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
  4028b2:	4b1c      	ldr	r3, [pc, #112]	; (402924 <USART1_Handler+0x380>)
  4028b4:	ee67 7a87 	vmul.f32	s15, s15, s14
  4028b8:	edc3 7a00 	vstr	s15, [r3]
  4028bc:	bd38      	pop	{r3, r4, r5, pc}
						delay_speed = 16200 - 14000 * (float)*data2 / 127.0f; break; 
  4028be:	ed95 7a02 	vldr	s14, [r5, #8]
  4028c2:	eddf 6a19 	vldr	s13, [pc, #100]	; 402928 <USART1_Handler+0x384>
  4028c6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  4028ca:	eddf 7a18 	vldr	s15, [pc, #96]	; 40292c <USART1_Handler+0x388>
  4028ce:	4b18      	ldr	r3, [pc, #96]	; (402930 <USART1_Handler+0x38c>)
  4028d0:	eee7 7a66 	vfms.f32	s15, s14, s13
  4028d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  4028d8:	edc3 7a00 	vstr	s15, [r3]
  4028dc:	bd38      	pop	{r3, r4, r5, pc}
  4028de:	bf00      	nop
  4028e0:	40028000 	.word	0x40028000
  4028e4:	00401695 	.word	0x00401695
  4028e8:	2043c808 	.word	0x2043c808
  4028ec:	2043f40c 	.word	0x2043f40c
  4028f0:	004016b1 	.word	0x004016b1
  4028f4:	2043c800 	.word	0x2043c800
  4028f8:	20415114 	.word	0x20415114
  4028fc:	2043f418 	.word	0x2043f418
  402900:	20400038 	.word	0x20400038
  402904:	3bb49c6c 	.word	0x3bb49c6c
  402908:	20428000 	.word	0x20428000
  40290c:	20415120 	.word	0x20415120
  402910:	2043c804 	.word	0x2043c804
  402914:	3c810204 	.word	0x3c810204
  402918:	3d4ccccd 	.word	0x3d4ccccd
  40291c:	20400028 	.word	0x20400028
  402920:	3bce69a0 	.word	0x3bce69a0
  402924:	2040002c 	.word	0x2040002c
  402928:	42dc78f2 	.word	0x42dc78f2
  40292c:	467d2000 	.word	0x467d2000
  402930:	20400030 	.word	0x20400030
  402934:	3c010204 	.word	0x3c010204
						dry_volume = (float)*data2 / 127.0f; break; 
  402938:	edd5 7a02 	vldr	s15, [r5, #8]
  40293c:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 402934 <USART1_Handler+0x390>
  402940:	eef8 7a67 	vcvt.f32.u32	s15, s15
  402944:	4b44      	ldr	r3, [pc, #272]	; (402a58 <USART1_Handler+0x4b4>)
  402946:	ee67 7a87 	vmul.f32	s15, s15, s14
  40294a:	edc3 7a00 	vstr	s15, [r3]
  40294e:	bd38      	pop	{r3, r4, r5, pc}
						master_volume = MASTER_VOL_BASE*(float)*data2 / 127.0f; break; 
  402950:	edd5 7a02 	vldr	s15, [r5, #8]
  402954:	ed9f 7a41 	vldr	s14, [pc, #260]	; 402a5c <USART1_Handler+0x4b8>
  402958:	eef8 7a67 	vcvt.f32.u32	s15, s15
  40295c:	4b40      	ldr	r3, [pc, #256]	; (402a60 <USART1_Handler+0x4bc>)
  40295e:	ee67 7a87 	vmul.f32	s15, s15, s14
  402962:	edc3 7a00 	vstr	s15, [r3]
  402966:	bd38      	pop	{r3, r4, r5, pc}
			if (*message == 255 && *data1 == 255 && *data2 == 255)
  402968:	686b      	ldr	r3, [r5, #4]
  40296a:	2bff      	cmp	r3, #255	; 0xff
  40296c:	f47f ae20 	bne.w	4025b0 <USART1_Handler+0xc>
  402970:	68ab      	ldr	r3, [r5, #8]
  402972:	2bff      	cmp	r3, #255	; 0xff
  402974:	d041      	beq.n	4029fa <USART1_Handler+0x456>
				key_root = *data2; 
  402976:	4a3b      	ldr	r2, [pc, #236]	; (402a64 <USART1_Handler+0x4c0>)
  402978:	6013      	str	r3, [r2, #0]
  40297a:	e619      	b.n	4025b0 <USART1_Handler+0xc>
					if (harmony_list[i].active == false)
  40297c:	4a3a      	ldr	r2, [pc, #232]	; (402a68 <USART1_Handler+0x4c4>)
  40297e:	7a11      	ldrb	r1, [r2, #8]
  402980:	f001 00ff 	and.w	r0, r1, #255	; 0xff
  402984:	2900      	cmp	r1, #0
  402986:	d046      	beq.n	402a16 <USART1_Handler+0x472>
  402988:	7d11      	ldrb	r1, [r2, #20]
  40298a:	2900      	cmp	r1, #0
  40298c:	d045      	beq.n	402a1a <USART1_Handler+0x476>
  40298e:	f892 1020 	ldrb.w	r1, [r2, #32]
  402992:	2900      	cmp	r1, #0
  402994:	d043      	beq.n	402a1e <USART1_Handler+0x47a>
  402996:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
  40299a:	b1c9      	cbz	r1, 4029d0 <USART1_Handler+0x42c>
  40299c:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
  4029a0:	2b00      	cmp	r3, #0
  4029a2:	d03e      	beq.n	402a22 <USART1_Handler+0x47e>
  4029a4:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
  4029a8:	2b00      	cmp	r3, #0
  4029aa:	d03c      	beq.n	402a26 <USART1_Handler+0x482>
  4029ac:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
  4029b0:	2b00      	cmp	r3, #0
  4029b2:	d03a      	beq.n	402a2a <USART1_Handler+0x486>
  4029b4:	f892 305c 	ldrb.w	r3, [r2, #92]	; 0x5c
  4029b8:	2b00      	cmp	r3, #0
  4029ba:	d03a      	beq.n	402a32 <USART1_Handler+0x48e>
  4029bc:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
  4029c0:	2b00      	cmp	r3, #0
  4029c2:	d034      	beq.n	402a2e <USART1_Handler+0x48a>
  4029c4:	f892 3074 	ldrb.w	r3, [r2, #116]	; 0x74
  4029c8:	2b00      	cmp	r3, #0
  4029ca:	f47f adf1 	bne.w	4025b0 <USART1_Handler+0xc>
				for(int i = 0; i < MAX_NUM_KEYS_HARMONIES; i++)
  4029ce:	2309      	movs	r3, #9
						harmony_list[i].freq = midi_note_frequencies[*data1]; 
  4029d0:	6868      	ldr	r0, [r5, #4]
						harmony_list[i].active = true; 
  4029d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
						harmony_list[i].freq = midi_note_frequencies[*data1]; 
  4029d6:	4925      	ldr	r1, [pc, #148]	; (402a6c <USART1_Handler+0x4c8>)
						harmony_list[i].active = true; 
  4029d8:	2401      	movs	r4, #1
  4029da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
						harmony_list[i].freq = midi_note_frequencies[*data1]; 
  4029de:	eb01 0280 	add.w	r2, r1, r0, lsl #2
						harmony_list[i].active = true; 
  4029e2:	721c      	strb	r4, [r3, #8]
						harmony_list[i].freq = midi_note_frequencies[*data1]; 
  4029e4:	6812      	ldr	r2, [r2, #0]
  4029e6:	601a      	str	r2, [r3, #0]
						harmony_list[i].idx = *data1; 
  4029e8:	6058      	str	r0, [r3, #4]
						break; 
  4029ea:	bd38      	pop	{r3, r4, r5, pc}
					default: break; 
				}
			}
			else if (*message == PITCH_WHEEL)
  4029ec:	2ae0      	cmp	r2, #224	; 0xe0
  4029ee:	f47f addf 	bne.w	4025b0 <USART1_Handler+0xc>
			{
				pitch_bend = *data2; 
  4029f2:	68aa      	ldr	r2, [r5, #8]
  4029f4:	4b1e      	ldr	r3, [pc, #120]	; (402a70 <USART1_Handler+0x4cc>)
  4029f6:	601a      	str	r2, [r3, #0]
			}
		} 
	}
}
  4029f8:	bd38      	pop	{r3, r4, r5, pc}
					chord_harmonies[i] = false; 
  4029fa:	4b1e      	ldr	r3, [pc, #120]	; (402a74 <USART1_Handler+0x4d0>)
				key_root = KEY_OF_E; 
  4029fc:	2040      	movs	r0, #64	; 0x40
  4029fe:	4a19      	ldr	r2, [pc, #100]	; (402a64 <USART1_Handler+0x4c0>)
					chord_harmonies[i] = false; 
  402a00:	7019      	strb	r1, [r3, #0]
  402a02:	7059      	strb	r1, [r3, #1]
  402a04:	7099      	strb	r1, [r3, #2]
  402a06:	70d9      	strb	r1, [r3, #3]
  402a08:	7119      	strb	r1, [r3, #4]
  402a0a:	7159      	strb	r1, [r3, #5]
  402a0c:	7199      	strb	r1, [r3, #6]
  402a0e:	71d9      	strb	r1, [r3, #7]
  402a10:	7219      	strb	r1, [r3, #8]
				key_root = KEY_OF_E; 
  402a12:	6010      	str	r0, [r2, #0]
  402a14:	bd38      	pop	{r3, r4, r5, pc}
					if (harmony_list[i].active == false)
  402a16:	4603      	mov	r3, r0
  402a18:	e7da      	b.n	4029d0 <USART1_Handler+0x42c>
				for(int i = 0; i < MAX_NUM_KEYS_HARMONIES; i++)
  402a1a:	2301      	movs	r3, #1
  402a1c:	e7d8      	b.n	4029d0 <USART1_Handler+0x42c>
  402a1e:	2302      	movs	r3, #2
  402a20:	e7d6      	b.n	4029d0 <USART1_Handler+0x42c>
  402a22:	2304      	movs	r3, #4
  402a24:	e7d4      	b.n	4029d0 <USART1_Handler+0x42c>
  402a26:	2305      	movs	r3, #5
  402a28:	e7d2      	b.n	4029d0 <USART1_Handler+0x42c>
  402a2a:	2306      	movs	r3, #6
  402a2c:	e7d0      	b.n	4029d0 <USART1_Handler+0x42c>
  402a2e:	2308      	movs	r3, #8
  402a30:	e7ce      	b.n	4029d0 <USART1_Handler+0x42c>
  402a32:	2307      	movs	r3, #7
  402a34:	e7cc      	b.n	4029d0 <USART1_Handler+0x42c>
				for (int i = 0; i < MAX_NUM_KEYS_HARMONIES; i++)
  402a36:	2101      	movs	r1, #1
  402a38:	e6f0      	b.n	40281c <USART1_Handler+0x278>
  402a3a:	2102      	movs	r1, #2
  402a3c:	e6ee      	b.n	40281c <USART1_Handler+0x278>
  402a3e:	2103      	movs	r1, #3
  402a40:	e6ec      	b.n	40281c <USART1_Handler+0x278>
  402a42:	2108      	movs	r1, #8
  402a44:	e6ea      	b.n	40281c <USART1_Handler+0x278>
  402a46:	2104      	movs	r1, #4
  402a48:	e6e8      	b.n	40281c <USART1_Handler+0x278>
  402a4a:	2105      	movs	r1, #5
  402a4c:	e6e6      	b.n	40281c <USART1_Handler+0x278>
  402a4e:	2106      	movs	r1, #6
  402a50:	e6e4      	b.n	40281c <USART1_Handler+0x278>
  402a52:	2107      	movs	r1, #7
  402a54:	e6e2      	b.n	40281c <USART1_Handler+0x278>
  402a56:	bf00      	nop
  402a58:	20400034 	.word	0x20400034
  402a5c:	3b9acf38 	.word	0x3b9acf38
  402a60:	20400040 	.word	0x20400040
  402a64:	2040003c 	.word	0x2040003c
  402a68:	2043f418 	.word	0x2043f418
  402a6c:	00407760 	.word	0x00407760
  402a70:	20400044 	.word	0x20400044
  402a74:	20415114 	.word	0x20415114

00402a78 <main>:

// uncomment to communicate to pc console over uart for debug 
//#define USING_CONSOLE

int main(void)
{
  402a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sysclk_init();
  402a7c:	4b71      	ldr	r3, [pc, #452]	; (402c44 <main+0x1cc>)

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
	usart_settings.char_length = opt->charlength;
	usart_settings.parity_type = opt->paritytype;
	usart_settings.stop_bits= opt->stopbits;
  402a7e:	2700      	movs	r7, #0
	usart_settings.baudrate = opt->baudrate;
  402a80:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  402a84:	4d70      	ldr	r5, [pc, #448]	; (402c48 <main+0x1d0>)
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  402a86:	f44f 4680 	mov.w	r6, #16384	; 0x4000
	} 
	uint32_t circ_buf_idx = 0; 
	float closest_note_freq = 0; 
	uint32_t closest_note_number = 0; 
	float desired_pitch; 
	uint32_t sin_cnt = 0; 
  402a8a:	46ba      	mov	sl, r7
  402a8c:	f8df b228 	ldr.w	fp, [pc, #552]	; 402cb8 <main+0x240>
{
  402a90:	ed2d 8b08 	vpush	{d8-d11}
  402a94:	b0c5      	sub	sp, #276	; 0x114
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402a96:	ed9f ba6d 	vldr	s22, [pc, #436]	; 402c4c <main+0x1d4>
	sysclk_init();
  402a9a:	4798      	blx	r3
	board_init();
  402a9c:	4b6c      	ldr	r3, [pc, #432]	; (402c50 <main+0x1d8>)
  402a9e:	4798      	blx	r3
	audio_init();
  402aa0:	4b6c      	ldr	r3, [pc, #432]	; (402c54 <main+0x1dc>)
  402aa2:	4798      	blx	r3
	PSOLA_init(); 
  402aa4:	4b6c      	ldr	r3, [pc, #432]	; (402c58 <main+0x1e0>)
  402aa6:	4798      	blx	r3
	usart_settings.char_length = opt->charlength;
  402aa8:	21c0      	movs	r1, #192	; 0xc0
	usart_settings.parity_type = opt->paritytype;
  402aaa:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402aae:	4b6b      	ldr	r3, [pc, #428]	; (402c5c <main+0x1e4>)
  402ab0:	200e      	movs	r0, #14
	usart_settings.baudrate = opt->baudrate;
  402ab2:	9430      	str	r4, [sp, #192]	; 0xc0
	uint32_t sin_cnt = 0; 
  402ab4:	9709      	str	r7, [sp, #36]	; 0x24
	usart_settings.char_length = opt->charlength;
  402ab6:	9131      	str	r1, [sp, #196]	; 0xc4
	usart_settings.parity_type = opt->paritytype;
  402ab8:	9232      	str	r2, [sp, #200]	; 0xc8
	usart_settings.stop_bits= opt->stopbits;
  402aba:	9733      	str	r7, [sp, #204]	; 0xcc
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  402abc:	9734      	str	r7, [sp, #208]	; 0xd0
  402abe:	4798      	blx	r3
	uint32_t chorus_delay; 
	arm_fill_f32(0.0f, dry_circ_buffer, CIRC_BUF_SIZE);
	arm_fill_f32(0.0f, delay_circ_buffer, CIRC_BUF_SIZE);
	scale_t major[] = {W,W,H,W,W,W,H}; 
	uint32_t harmony_steps[] = {2, 2, 1}; // third, fifth, sixth
	float scale_correct_history[SCALE_CORRECT_HISTORY_SIZE]; arm_fill_f32(SCALE_NONE, scale_correct_history, SCALE_CORRECT_HISTORY_SIZE); 
  402ac0:	2301      	movs	r3, #1
		usart_init_rs232(p_usart, &usart_settings,
  402ac2:	4a67      	ldr	r2, [pc, #412]	; (402c60 <main+0x1e8>)
  402ac4:	a930      	add	r1, sp, #192	; 0xc0
  402ac6:	4867      	ldr	r0, [pc, #412]	; (402c64 <main+0x1ec>)
  402ac8:	9308      	str	r3, [sp, #32]
  402aca:	4b67      	ldr	r3, [pc, #412]	; (402c68 <main+0x1f0>)
  402acc:	4798      	blx	r3
		usart_enable_tx(p_usart);
  402ace:	4865      	ldr	r0, [pc, #404]	; (402c64 <main+0x1ec>)
  402ad0:	47a8      	blx	r5
		usart_enable_rx(p_usart);
  402ad2:	4c66      	ldr	r4, [pc, #408]	; (402c6c <main+0x1f4>)
  402ad4:	4863      	ldr	r0, [pc, #396]	; (402c64 <main+0x1ec>)
  402ad6:	47a0      	blx	r4
	usart_enable_tx(USART_SERIAL);
  402ad8:	4862      	ldr	r0, [pc, #392]	; (402c64 <main+0x1ec>)
  402ada:	47a8      	blx	r5
	usart_enable_rx(USART_SERIAL);
  402adc:	4861      	ldr	r0, [pc, #388]	; (402c64 <main+0x1ec>)
  402ade:	47a0      	blx	r4
	usart_enable_interrupt(USART_SERIAL, US_IER_RXRDY);
  402ae0:	2101      	movs	r1, #1
  402ae2:	4860      	ldr	r0, [pc, #384]	; (402c64 <main+0x1ec>)
		harmony_list[i].freq = 0.0f; 
  402ae4:	2400      	movs	r4, #0
	usart_enable_interrupt(USART_SERIAL, US_IER_RXRDY);
  402ae6:	4b62      	ldr	r3, [pc, #392]	; (402c70 <main+0x1f8>)
  402ae8:	4798      	blx	r3
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402aea:	4b62      	ldr	r3, [pc, #392]	; (402c74 <main+0x1fc>)
  402aec:	2240      	movs	r2, #64	; 0x40
	usart_write(USART_SERIAL, 0x30);
  402aee:	2130      	movs	r1, #48	; 0x30
  402af0:	485c      	ldr	r0, [pc, #368]	; (402c64 <main+0x1ec>)
  402af2:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  402af6:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
  402afa:	4a5f      	ldr	r2, [pc, #380]	; (402c78 <main+0x200>)
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402afc:	601e      	str	r6, [r3, #0]
  402afe:	4790      	blx	r2
		harmony_list[i].freq = 0.0f; 
  402b00:	4b5e      	ldr	r3, [pc, #376]	; (402c7c <main+0x204>)
	float harmony_shifts[MAX_NUM_SHIFTS+1]; arm_fill_f32(1.0f, harmony_shifts, MAX_NUM_SHIFTS); 
  402b02:	4d5f      	ldr	r5, [pc, #380]	; (402c80 <main+0x208>)
  402b04:	a930      	add	r1, sp, #192	; 0xc0
		harmony_list[i].freq = 0.0f; 
  402b06:	601c      	str	r4, [r3, #0]
	float harmony_shifts[MAX_NUM_SHIFTS+1]; arm_fill_f32(1.0f, harmony_shifts, MAX_NUM_SHIFTS); 
  402b08:	2213      	movs	r2, #19
		harmony_list[i].idx = 0; 
  402b0a:	605f      	str	r7, [r3, #4]
	float harmony_shifts[MAX_NUM_SHIFTS+1]; arm_fill_f32(1.0f, harmony_shifts, MAX_NUM_SHIFTS); 
  402b0c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
		harmony_list[i].active = false; 
  402b10:	721f      	strb	r7, [r3, #8]
		harmony_list[i].freq = 0.0f; 
  402b12:	60dc      	str	r4, [r3, #12]
		harmony_list[i].idx = 0; 
  402b14:	611f      	str	r7, [r3, #16]
		harmony_list[i].active = false; 
  402b16:	751f      	strb	r7, [r3, #20]
		harmony_list[i].freq = 0.0f; 
  402b18:	619c      	str	r4, [r3, #24]
		harmony_list[i].idx = 0; 
  402b1a:	61df      	str	r7, [r3, #28]
		harmony_list[i].active = false; 
  402b1c:	f883 7020 	strb.w	r7, [r3, #32]
		harmony_list[i].freq = 0.0f; 
  402b20:	625c      	str	r4, [r3, #36]	; 0x24
		harmony_list[i].idx = 0; 
  402b22:	629f      	str	r7, [r3, #40]	; 0x28
		harmony_list[i].active = false; 
  402b24:	f883 702c 	strb.w	r7, [r3, #44]	; 0x2c
		harmony_list[i].freq = 0.0f; 
  402b28:	631c      	str	r4, [r3, #48]	; 0x30
		harmony_list[i].idx = 0; 
  402b2a:	635f      	str	r7, [r3, #52]	; 0x34
		harmony_list[i].active = false; 
  402b2c:	f883 7038 	strb.w	r7, [r3, #56]	; 0x38
		harmony_list[i].freq = 0.0f; 
  402b30:	63dc      	str	r4, [r3, #60]	; 0x3c
		harmony_list[i].idx = 0; 
  402b32:	641f      	str	r7, [r3, #64]	; 0x40
		harmony_list[i].active = false; 
  402b34:	f883 7044 	strb.w	r7, [r3, #68]	; 0x44
		harmony_list[i].freq = 0.0f; 
  402b38:	649c      	str	r4, [r3, #72]	; 0x48
		harmony_list[i].idx = 0; 
  402b3a:	64df      	str	r7, [r3, #76]	; 0x4c
		harmony_list[i].active = false; 
  402b3c:	f883 7050 	strb.w	r7, [r3, #80]	; 0x50
		harmony_list[i].freq = 0.0f; 
  402b40:	655c      	str	r4, [r3, #84]	; 0x54
		harmony_list[i].idx = 0; 
  402b42:	659f      	str	r7, [r3, #88]	; 0x58
		harmony_list[i].active = false; 
  402b44:	f883 705c 	strb.w	r7, [r3, #92]	; 0x5c
		harmony_list[i].freq = 0.0f; 
  402b48:	661c      	str	r4, [r3, #96]	; 0x60
		harmony_list[i].idx = 0; 
  402b4a:	665f      	str	r7, [r3, #100]	; 0x64
		harmony_list[i].active = false; 
  402b4c:	f883 7068 	strb.w	r7, [r3, #104]	; 0x68
		harmony_list[i].freq = 0.0f; 
  402b50:	66dc      	str	r4, [r3, #108]	; 0x6c
		harmony_list[i].idx = 0; 
  402b52:	671f      	str	r7, [r3, #112]	; 0x70
		harmony_list[i].active = false; 
  402b54:	f883 7074 	strb.w	r7, [r3, #116]	; 0x74
	float harmony_shifts[MAX_NUM_SHIFTS+1]; arm_fill_f32(1.0f, harmony_shifts, MAX_NUM_SHIFTS); 
  402b58:	47a8      	blx	r5
	harmony_shifts[1] = END_OF_SHIFTS; 
  402b5a:	4b4a      	ldr	r3, [pc, #296]	; (402c84 <main+0x20c>)
	harmony_shifts[0] = NO_SHIFT;
  402b5c:	f04f 5e7e 	mov.w	lr, #1065353216	; 0x3f800000
	arm_fill_f32(0.0f, dry_circ_buffer, CIRC_BUF_SIZE);
  402b60:	4632      	mov	r2, r6
  402b62:	4620      	mov	r0, r4
  402b64:	4948      	ldr	r1, [pc, #288]	; (402c88 <main+0x210>)
		chord_freqs[i].freq = 0.0f; chord_freqs[i].active = false; 
  402b66:	f88d 7084 	strb.w	r7, [sp, #132]	; 0x84
  402b6a:	f88d 708c 	strb.w	r7, [sp, #140]	; 0x8c
  402b6e:	f88d 7094 	strb.w	r7, [sp, #148]	; 0x94
  402b72:	f88d 709c 	strb.w	r7, [sp, #156]	; 0x9c
  402b76:	f88d 70a4 	strb.w	r7, [sp, #164]	; 0xa4
  402b7a:	f88d 70ac 	strb.w	r7, [sp, #172]	; 0xac
  402b7e:	f88d 70b4 	strb.w	r7, [sp, #180]	; 0xb4
  402b82:	f88d 70bc 	strb.w	r7, [sp, #188]	; 0xbc
  402b86:	9420      	str	r4, [sp, #128]	; 0x80
  402b88:	9422      	str	r4, [sp, #136]	; 0x88
  402b8a:	9424      	str	r4, [sp, #144]	; 0x90
  402b8c:	9426      	str	r4, [sp, #152]	; 0x98
  402b8e:	9428      	str	r4, [sp, #160]	; 0xa0
  402b90:	942a      	str	r4, [sp, #168]	; 0xa8
  402b92:	942c      	str	r4, [sp, #176]	; 0xb0
  402b94:	942e      	str	r4, [sp, #184]	; 0xb8
	harmony_shifts[0] = NO_SHIFT;
  402b96:	f8cd e0c0 	str.w	lr, [sp, #192]	; 0xc0
	harmony_shifts[1] = END_OF_SHIFTS; 
  402b9a:	9331      	str	r3, [sp, #196]	; 0xc4
	harmony_shifts[MAX_NUM_SHIFTS] = END_OF_SHIFTS; // should never change 
  402b9c:	9343      	str	r3, [sp, #268]	; 0x10c
	arm_fill_f32(0.0f, dry_circ_buffer, CIRC_BUF_SIZE);
  402b9e:	47a8      	blx	r5
	arm_fill_f32(0.0f, delay_circ_buffer, CIRC_BUF_SIZE);
  402ba0:	4632      	mov	r2, r6
	scale_t major[] = {W,W,H,W,W,W,H}; 
  402ba2:	4e3a      	ldr	r6, [pc, #232]	; (402c8c <main+0x214>)
	arm_fill_f32(0.0f, delay_circ_buffer, CIRC_BUF_SIZE);
  402ba4:	4620      	mov	r0, r4
  402ba6:	493a      	ldr	r1, [pc, #232]	; (402c90 <main+0x218>)
  402ba8:	47a8      	blx	r5
	scale_t major[] = {W,W,H,W,W,W,H}; 
  402baa:	f10d 0e44 	add.w	lr, sp, #68	; 0x44
  402bae:	4f36      	ldr	r7, [pc, #216]	; (402c88 <main+0x210>)
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402bb0:	eddf aa38 	vldr	s21, [pc, #224]	; 402c94 <main+0x21c>
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  402bb4:	eddf ba38 	vldr	s23, [pc, #224]	; 402c98 <main+0x220>
	scale_t major[] = {W,W,H,W,W,W,H}; 
  402bb8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  402bba:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  402bbe:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
	uint32_t harmony_steps[] = {2, 2, 1}; // third, fifth, sixth
  402bc2:	360c      	adds	r6, #12
  402bc4:	ab0e      	add	r3, sp, #56	; 0x38
	scale_t major[] = {W,W,H,W,W,W,H}; 
  402bc6:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
	uint32_t harmony_steps[] = {2, 2, 1}; // third, fifth, sixth
  402bca:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  402bce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float scale_correct_history[SCALE_CORRECT_HISTORY_SIZE]; arm_fill_f32(SCALE_NONE, scale_correct_history, SCALE_CORRECT_HISTORY_SIZE); 
  402bd2:	4620      	mov	r0, r4
  402bd4:	a918      	add	r1, sp, #96	; 0x60
  402bd6:	2208      	movs	r2, #8
  402bd8:	47a8      	blx	r5
  402bda:	9b08      	ldr	r3, [sp, #32]
  402bdc:	1e5d      	subs	r5, r3, #1
	float dry_freq = 0; 
	/*************** Application code variables end ***************/
	
	while(1)
	{
		if (dataReceived)
  402bde:	4b2f      	ldr	r3, [pc, #188]	; (402c9c <main+0x224>)
  402be0:	781b      	ldrb	r3, [r3, #0]
  402be2:	2b00      	cmp	r3, #0
  402be4:	d0fb      	beq.n	402bde <main+0x166>
		{	
			dataReceived = false; 
  402be6:	4a2d      	ldr	r2, [pc, #180]	; (402c9c <main+0x224>)
  402be8:	2300      	movs	r3, #0
			
			// get pitch 
			inputPitch = computeWaveletPitch(processBuffer);
  402bea:	482d      	ldr	r0, [pc, #180]	; (402ca0 <main+0x228>)
	uint32_t hi = 127;
  402bec:	247f      	movs	r4, #127	; 0x7f
			dataReceived = false; 
  402bee:	7013      	strb	r3, [r2, #0]
			inputPitch = computeWaveletPitch(processBuffer);
  402bf0:	4b2c      	ldr	r3, [pc, #176]	; (402ca4 <main+0x22c>)
  402bf2:	4798      	blx	r3
			if (inputPitch < MINIMUM_PITCH) 
				inputPitch = MINIMUM_PITCH; 
			oneOverInputPitch = 1.0f / inputPitch;
  402bf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  402bf8:	ee07 0a90 	vmov	s15, r0
  402bfc:	ed9f 8a2a 	vldr	s16, [pc, #168]	; 402ca8 <main+0x230>
  402c00:	eddf 9a2a 	vldr	s19, [pc, #168]	; 402cac <main+0x234>
	uint32_t lo = 12; // lowest at C0
  402c04:	220c      	movs	r2, #12
  402c06:	fe87 8a88 	vmaxnm.f32	s16, s15, s16
			oneOverInputPitch = 1.0f / inputPitch;
  402c0a:	eec7 8a08 	vdiv.f32	s17, s14, s16
  402c0e:	eddf 6a28 	vldr	s13, [pc, #160]	; 402cb0 <main+0x238>
  402c12:	eddf 7a28 	vldr	s15, [pc, #160]	; 402cb4 <main+0x23c>
		mid = (hi + lo) >> 1;
  402c16:	1913      	adds	r3, r2, r4
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402c18:	ee77 7ac8 	vsub.f32	s15, s15, s16
		mid = (hi + lo) >> 1;
  402c1c:	085b      	lsrs	r3, r3, #1
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402c1e:	ee36 7ac8 	vsub.f32	s14, s13, s16
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402c22:	1c59      	adds	r1, r3, #1
  402c24:	eef0 7ae7 	vabs.f32	s15, s15
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402c28:	eeb0 7ac7 	vabs.f32	s14, s14
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402c30:	eebc 7ac7 	vcvt.u32.f32	s14, s14
		if (d2 <= d1)
  402c34:	ee17 6a90 	vmov	r6, s15
  402c38:	ee17 0a10 	vmov	r0, s14
  402c3c:	42b0      	cmp	r0, r6
  402c3e:	d25c      	bcs.n	402cfa <main+0x282>
  402c40:	f000 bce5 	b.w	40360e <main+0xb96>
  402c44:	00401705 	.word	0x00401705
  402c48:	00401681 	.word	0x00401681
  402c4c:	42800000 	.word	0x42800000
  402c50:	00401775 	.word	0x00401775
  402c54:	00400361 	.word	0x00400361
  402c58:	00400d31 	.word	0x00400d31
  402c5c:	0040224d 	.word	0x0040224d
  402c60:	08f0d180 	.word	0x08f0d180
  402c64:	40028000 	.word	0x40028000
  402c68:	004015e1 	.word	0x004015e1
  402c6c:	00401689 	.word	0x00401689
  402c70:	00401691 	.word	0x00401691
  402c74:	e000e100 	.word	0xe000e100
  402c78:	00401699 	.word	0x00401699
  402c7c:	2043f418 	.word	0x2043f418
  402c80:	00403971 	.word	0x00403971
  402c84:	bf800000 	.word	0xbf800000
  402c88:	2042c000 	.word	0x2042c000
  402c8c:	00407738 	.word	0x00407738
  402c90:	20418000 	.word	0x20418000
  402c94:	3c800000 	.word	0x3c800000
  402c98:	427c0000 	.word	0x427c0000
  402c9c:	2040401c 	.word	0x2040401c
  402ca0:	2043d400 	.word	0x2043d400
  402ca4:	004005c1 	.word	0x004005c1
  402ca8:	428c0000 	.word	0x428c0000
  402cac:	4643ff66 	.word	0x4643ff66
  402cb0:	43dc0000 	.word	0x43dc0000
  402cb4:	43e914fe 	.word	0x43e914fe
  402cb8:	20400014 	.word	0x20400014
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402cbc:	1c58      	adds	r0, r3, #1
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402cbe:	4acc      	ldr	r2, [pc, #816]	; (402ff0 <main+0x578>)
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402cc0:	4ecb      	ldr	r6, [pc, #812]	; (402ff0 <main+0x578>)
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402cc2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402cc6:	eb06 0680 	add.w	r6, r6, r0, lsl #2
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402cca:	edd2 6a00 	vldr	s13, [r2]
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402cce:	edd6 7a00 	vldr	s15, [r6]
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402cd2:	ee36 7ac8 	vsub.f32	s14, s13, s16
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402cd6:	ee77 7ac8 	vsub.f32	s15, s15, s16
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402cda:	eeb0 7ac7 	vabs.f32	s14, s14
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402cde:	eef0 7ae7 	vabs.f32	s15, s15
		d1 = Abs(midi_note_frequencies[mid] - frequency);
  402ce2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402ce6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		if (d2 <= d1)
  402cea:	ee17 2a10 	vmov	r2, s14
  402cee:	ee17 6a90 	vmov	r6, s15
  402cf2:	42b2      	cmp	r2, r6
  402cf4:	f0c0 848c 	bcc.w	403610 <main+0xb98>
		d2 = Abs(midi_note_frequencies[mid+1] - frequency);
  402cf8:	4601      	mov	r1, r0
		mid = (hi + lo) >> 1;
  402cfa:	190b      	adds	r3, r1, r4
	while (lo < hi)
  402cfc:	42a1      	cmp	r1, r4
		mid = (hi + lo) >> 1;
  402cfe:	ea4f 0353 	mov.w	r3, r3, lsr #1
	while (lo < hi)
  402d02:	d3db      	bcc.n	402cbc <main+0x244>
			get_frequency_from_all(inputPitch, &closest_note_freq, &closest_note_number);
				
			// find number of semitones from root 
			float scale_pitch = closest_note_freq;
			uint32_t shifted_note_number = closest_note_number; 
			while (shifted_note_number < key_root)
  402d04:	4bbb      	ldr	r3, [pc, #748]	; (402ff4 <main+0x57c>)
  402d06:	4621      	mov	r1, r4
  402d08:	681b      	ldr	r3, [r3, #0]
  402d0a:	429c      	cmp	r4, r3
  402d0c:	d204      	bcs.n	402d18 <main+0x2a0>
  402d0e:	4bb9      	ldr	r3, [pc, #740]	; (402ff4 <main+0x57c>)
				shifted_note_number += 12; 
  402d10:	310c      	adds	r1, #12
			while (shifted_note_number < key_root)
  402d12:	681b      	ldr	r3, [r3, #0]
  402d14:	428b      	cmp	r3, r1
  402d16:	d8fa      	bhi.n	402d0e <main+0x296>
			uint32_t number_of_semitones_from_root = shifted_note_number - key_root;
  402d18:	4bb6      	ldr	r3, [pc, #728]	; (402ff4 <main+0x57c>)
  402d1a:	681e      	ldr	r6, [r3, #0]
  402d1c:	1b8e      	subs	r6, r1, r6
			while(number_of_semitones_from_root > 12)
  402d1e:	2e0c      	cmp	r6, #12
  402d20:	d902      	bls.n	402d28 <main+0x2b0>
				number_of_semitones_from_root -= 12;
  402d22:	3e0c      	subs	r6, #12
			while(number_of_semitones_from_root > 12)
  402d24:	2e0c      	cmp	r6, #12
  402d26:	d8fc      	bhi.n	402d22 <main+0x2aa>
						
			// adjust for pitch in between notes in major scale 	
			if (number_of_semitones_from_root == 1 || number_of_semitones_from_root == 3 ||
  402d28:	f106 38ff 	add.w	r8, r6, #4294967295
  402d2c:	f1b8 0f09 	cmp.w	r8, #9
  402d30:	f200 84e2 	bhi.w	4036f8 <main+0xc80>
  402d34:	f240 23a5 	movw	r3, #677	; 0x2a5
  402d38:	fa23 f308 	lsr.w	r3, r3, r8
  402d3c:	07db      	lsls	r3, r3, #31
  402d3e:	f140 84db 	bpl.w	4036f8 <main+0xc80>
			number_of_semitones_from_root == 6 || number_of_semitones_from_root == 8 || number_of_semitones_from_root == 10 )
			{
				float low_avg = 0.5f * (midi_note_frequencies[closest_note_number] + midi_note_frequencies[closest_note_number-1]); 
  402d42:	4bab      	ldr	r3, [pc, #684]	; (402ff0 <main+0x578>)
				low_avg = 0.5f * (low_avg + midi_note_frequencies[closest_note_number]); 
  402d44:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
  402d48:	eef0 6a69 	vmov.f32	s13, s19
				float low_avg = 0.5f * (midi_note_frequencies[closest_note_number] + midi_note_frequencies[closest_note_number-1]); 
  402d4c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
  402d50:	ed13 9a01 	vldr	s18, [r3, #-4]
  402d54:	ee39 7a29 	vadd.f32	s14, s18, s19
				low_avg = 0.5f * (low_avg + midi_note_frequencies[closest_note_number]); 
  402d58:	eee7 6a27 	vfma.f32	s13, s14, s15
  402d5c:	ee26 7aa7 	vmul.f32	s14, s13, s15
				float hi_avg = 0.5f * (midi_note_frequencies[closest_note_number] + midi_note_frequencies[closest_note_number+1]);
				hi_avg = 0.5f * (hi_avg + midi_note_frequencies[closest_note_number]); 
				if (inputPitch < low_avg)
  402d60:	eeb4 7ac8 	vcmpe.f32	s14, s16
  402d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402d68:	f340 84e5 	ble.w	403736 <main+0xcbe>
				{
					number_of_semitones_from_root -=1;
					scale_pitch = midi_note_frequencies[closest_note_number - 1];
					scale_correct_history[scale_correct_idx++ & SCALE_CORRECT_HISTORY_MASK] = SCALE_DOWN; 
  402d6c:	f005 0307 	and.w	r3, r5, #7
					arm_mean_f32(scale_correct_history, SCALE_CORRECT_HISTORY_SIZE, &avg_direction); 
					if(avg_direction < 0.0f)
					{
						number_of_semitones_from_root -=1;
						scale_pitch = midi_note_frequencies[closest_note_number - 1];
						scale_correct_history[scale_correct_idx++ & SCALE_CORRECT_HISTORY_MASK] = SCALE_DOWN;
  402d70:	a944      	add	r1, sp, #272	; 0x110
  402d72:	4aa1      	ldr	r2, [pc, #644]	; (402ff8 <main+0x580>)
  402d74:	4646      	mov	r6, r8
  402d76:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  402d7a:	f843 2cb0 	str.w	r2, [r3, #-176]
			// find index in scale where the pitch lies 
			uint32_t interval_idx = 0;
			uint32_t scale_step = 0;
			for (i = 0; i < 7; i++)
			{
				scale_step += major[i];
  402d7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
				if (number_of_semitones_from_root == scale_step)
  402d80:	429e      	cmp	r6, r3
  402d82:	f000 84c7 	beq.w	403714 <main+0xc9c>
				scale_step += major[i];
  402d86:	9a12      	ldr	r2, [sp, #72]	; 0x48
  402d88:	4413      	add	r3, r2
				if (number_of_semitones_from_root == scale_step)
  402d8a:	429e      	cmp	r6, r3
  402d8c:	f000 85d1 	beq.w	403932 <main+0xeba>
				scale_step += major[i];
  402d90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  402d92:	4413      	add	r3, r2
				if (number_of_semitones_from_root == scale_step)
  402d94:	429e      	cmp	r6, r3
  402d96:	f000 85c9 	beq.w	40392c <main+0xeb4>
				scale_step += major[i];
  402d9a:	9a14      	ldr	r2, [sp, #80]	; 0x50
  402d9c:	4413      	add	r3, r2
				if (number_of_semitones_from_root == scale_step)
  402d9e:	429e      	cmp	r6, r3
  402da0:	f000 85cd 	beq.w	40393e <main+0xec6>
				scale_step += major[i];
  402da4:	9a15      	ldr	r2, [sp, #84]	; 0x54
  402da6:	4413      	add	r3, r2
				if (number_of_semitones_from_root == scale_step)
  402da8:	429e      	cmp	r6, r3
  402daa:	f000 85c5 	beq.w	403938 <main+0xec0>
				scale_step += major[i];
  402dae:	9916      	ldr	r1, [sp, #88]	; 0x58
  402db0:	440b      	add	r3, r1
			uint32_t interval_idx = 0;
  402db2:	429e      	cmp	r6, r3
  402db4:	bf0c      	ite	eq
  402db6:	2106      	moveq	r1, #6
  402db8:	2100      	movne	r1, #0
			// chord harmonies 
			uint32_t chord_idx = 0;	
			uint32_t saved_interval_idx = interval_idx; 	
				
			// autotune 
			if (*autotune)
  402dba:	4b90      	ldr	r3, [pc, #576]	; (402ffc <main+0x584>)
  402dbc:	7a1b      	ldrb	r3, [r3, #8]
  402dbe:	2b00      	cmp	r3, #0
  402dc0:	f000 84ae 	beq.w	403720 <main+0xca8>
			{
				desired_pitch = scale_pitch; 
					
				if (pitch_bend < 56 || pitch_bend > 72)
  402dc4:	4b8e      	ldr	r3, [pc, #568]	; (403000 <main+0x588>)
  402dc6:	681b      	ldr	r3, [r3, #0]
  402dc8:	2b37      	cmp	r3, #55	; 0x37
  402dca:	d904      	bls.n	402dd6 <main+0x35e>
  402dcc:	4b8c      	ldr	r3, [pc, #560]	; (403000 <main+0x588>)
  402dce:	681b      	ldr	r3, [r3, #0]
  402dd0:	2b48      	cmp	r3, #72	; 0x48
  402dd2:	f240 84d6 	bls.w	403782 <main+0xd0a>
					bend_pitch(&desired_pitch, closest_note_number, (uint32_t)pitch_bend);
  402dd6:	4b8a      	ldr	r3, [pc, #552]	; (403000 <main+0x588>)
  402dd8:	681b      	ldr	r3, [r3, #0]
	if (pitch_idx < 0 || pitch_idx > 127 || bend < 0 || bend > 127)
  402dda:	2b7f      	cmp	r3, #127	; 0x7f
  402ddc:	f200 84d1 	bhi.w	403782 <main+0xd0a>
	if (pitch_bend > 64)
  402de0:	4b87      	ldr	r3, [pc, #540]	; (403000 <main+0x588>)
  402de2:	681b      	ldr	r3, [r3, #0]
  402de4:	2b40      	cmp	r3, #64	; 0x40
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  402de6:	4b86      	ldr	r3, [pc, #536]	; (403000 <main+0x588>)
  402de8:	edd3 7a00 	vldr	s15, [r3]
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  402dec:	4b80      	ldr	r3, [pc, #512]	; (402ff0 <main+0x578>)
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  402dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  402df2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
	if (pitch_bend > 64)
  402df6:	f200 856e 	bhi.w	4038d6 <main+0xe5e>
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402dfa:	ee77 7acb 	vsub.f32	s15, s15, s22
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402dfe:	ed13 7a02 	vldr	s14, [r3, #-8]
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402e02:	eef0 6a49 	vmov.f32	s13, s18
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402e06:	ee39 7ac7 	vsub.f32	s14, s19, s14
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402e0a:	ee67 7aaa 	vmul.f32	s15, s15, s21
  402e0e:	eee7 6a87 	vfma.f32	s13, s15, s14
					
				harmony_shifts[0] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402e12:	ee36 7ac8 	vsub.f32	s14, s13, s16
				num_of_shifts++; 
				dry_freq = desired_pitch;
			}
				
			// octave down
			if(chord_harmonies[chord_idx] == true)
  402e16:	4b79      	ldr	r3, [pc, #484]	; (402ffc <main+0x584>)
				harmony_shifts[0] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402e18:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			if(chord_harmonies[chord_idx] == true)
  402e1c:	781b      	ldrb	r3, [r3, #0]
				harmony_shifts[0] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402e1e:	eee8 7a87 	vfma.f32	s15, s17, s14
  402e22:	edcd 7a30 	vstr	s15, [sp, #192]	; 0xc0
			if(chord_harmonies[chord_idx] == true)
  402e26:	2b00      	cmp	r3, #0
  402e28:	f040 84af 	bne.w	40378a <main+0xd12>
				num_of_shifts++; 
  402e2c:	2301      	movs	r3, #1
  402e2e:	9305      	str	r3, [sp, #20]
				if (pitch_bend < 56 || pitch_bend > 72)
					bend_pitch(&desired_pitch, closest_note_number, (uint32_t)pitch_bend);
				harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
				chord_freqs[chord_idx].active = true;
				chord_freqs[chord_idx].freq = desired_pitch;
			} else chord_freqs[chord_idx].active = false;
  402e30:	2300      	movs	r3, #0
  402e32:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  402e36:	aa0e      	add	r2, sp, #56	; 0x38
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402e38:	1ea3      	subs	r3, r4, #2
  402e3a:	f10d 0980 	add.w	r9, sp, #128	; 0x80
				if(chord_harmonies[chord_idx] == true)
				{
					desired_pitch = scale_pitch*powerf(1.059463094359f, steps_to_harmony);
					if (pitch_bend < 56 || pitch_bend > 72)
						bend_pitch(&desired_pitch, closest_note_number, (uint32_t)pitch_bend);
					harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402e3e:	4608      	mov	r0, r1
  402e40:	9206      	str	r2, [sp, #24]
  402e42:	f06f 050b 	mvn.w	r5, #11
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402e46:	4a6a      	ldr	r2, [pc, #424]	; (402ff0 <main+0x578>)
					harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402e48:	46c8      	mov	r8, r9
  402e4a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  402e4e:	f04f 0c01 	mov.w	ip, #1
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402e52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402e56:	9107      	str	r1, [sp, #28]
					steps_to_harmony += major[interval_idx % 7];
  402e58:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 403008 <main+0x590>
					harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402e5c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402e60:	930b      	str	r3, [sp, #44]	; 0x2c
					harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402e62:	ab0e      	add	r3, sp, #56	; 0x38
		result *= base;
  402e64:	ed9f 7a67 	vldr	s14, [pc, #412]	; 403004 <main+0x58c>
  402e68:	4699      	mov	r9, r3
  402e6a:	9905      	ldr	r1, [sp, #20]
				for (uint32_t j = 0; j < harmony_steps[i]; j++, interval_idx++)
  402e6c:	f859 6b04 	ldr.w	r6, [r9], #4
  402e70:	2e00      	cmp	r6, #0
  402e72:	d06e      	beq.n	402f52 <main+0x4da>
  402e74:	4406      	add	r6, r0
					steps_to_harmony += major[interval_idx % 7];
  402e76:	fbae 2300 	umull	r2, r3, lr, r0
  402e7a:	1ac2      	subs	r2, r0, r3
  402e7c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
  402e80:	aa44      	add	r2, sp, #272	; 0x110
  402e82:	089b      	lsrs	r3, r3, #2
  402e84:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  402e88:	1ac3      	subs	r3, r0, r3
				for (uint32_t j = 0; j < harmony_steps[i]; j++, interval_idx++)
  402e8a:	3001      	adds	r0, #1
					steps_to_harmony += major[interval_idx % 7];
  402e8c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
				for (uint32_t j = 0; j < harmony_steps[i]; j++, interval_idx++)
  402e90:	42b0      	cmp	r0, r6
					steps_to_harmony += major[interval_idx % 7];
  402e92:	f853 3ccc 	ldr.w	r3, [r3, #-204]
  402e96:	441d      	add	r5, r3
				for (uint32_t j = 0; j < harmony_steps[i]; j++, interval_idx++)
  402e98:	d1ed      	bne.n	402e76 <main+0x3fe>
				if(chord_harmonies[chord_idx] == true)
  402e9a:	4b58      	ldr	r3, [pc, #352]	; (402ffc <main+0x584>)
  402e9c:	f813 300c 	ldrb.w	r3, [r3, ip]
  402ea0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
  402ea4:	2b00      	cmp	r3, #0
  402ea6:	d05c      	beq.n	402f62 <main+0x4ea>
	uint32_t exp_abs = Abs(exponent);
  402ea8:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
	while (exp_abs)
  402eac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	uint32_t exp_abs = Abs(exponent);
  402eb0:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
	while (exp_abs)
  402eb4:	b13d      	cbz	r5, 402ec6 <main+0x44e>
  402eb6:	3b01      	subs	r3, #1
		result *= base;
  402eb8:	ee67 7a87 	vmul.f32	s15, s15, s14
	while (exp_abs)
  402ebc:	d1fb      	bne.n	402eb6 <main+0x43e>
	if (exponent < 0)
  402ebe:	2d00      	cmp	r5, #0
	return 1.0/result;
  402ec0:	bfb8      	it	lt
  402ec2:	eec5 7aa7 	vdivlt.f32	s15, s11, s15
					if (pitch_bend < 56 || pitch_bend > 72)
  402ec6:	4b4e      	ldr	r3, [pc, #312]	; (403000 <main+0x588>)
  402ec8:	681b      	ldr	r3, [r3, #0]
  402eca:	2b37      	cmp	r3, #55	; 0x37
					desired_pitch = scale_pitch*powerf(1.059463094359f, steps_to_harmony);
  402ecc:	ee69 7a27 	vmul.f32	s15, s18, s15
					if (pitch_bend < 56 || pitch_bend > 72)
  402ed0:	d903      	bls.n	402eda <main+0x462>
  402ed2:	4b4b      	ldr	r3, [pc, #300]	; (403000 <main+0x588>)
  402ed4:	681b      	ldr	r3, [r3, #0]
  402ed6:	2b48      	cmp	r3, #72	; 0x48
  402ed8:	d91d      	bls.n	402f16 <main+0x49e>
						bend_pitch(&desired_pitch, closest_note_number, (uint32_t)pitch_bend);
  402eda:	4b49      	ldr	r3, [pc, #292]	; (403000 <main+0x588>)
  402edc:	681b      	ldr	r3, [r3, #0]
	if (pitch_idx < 0 || pitch_idx > 127 || bend < 0 || bend > 127)
  402ede:	2b7f      	cmp	r3, #127	; 0x7f
  402ee0:	d819      	bhi.n	402f16 <main+0x49e>
	if (pitch_bend > 64)
  402ee2:	4b47      	ldr	r3, [pc, #284]	; (403000 <main+0x588>)
  402ee4:	681b      	ldr	r3, [r3, #0]
  402ee6:	2b40      	cmp	r3, #64	; 0x40
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  402ee8:	4b45      	ldr	r3, [pc, #276]	; (403000 <main+0x588>)
  402eea:	ed93 6a00 	vldr	s12, [r3]
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  402eee:	4b40      	ldr	r3, [pc, #256]	; (402ff0 <main+0x578>)
	if (pitch_bend > 64)
  402ef0:	f200 84a7 	bhi.w	403842 <main+0xdca>
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402ef4:	eeb8 6a46 	vcvt.f32.u32	s12, s12
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402ef8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
  402efc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  402efe:	edd3 4a00 	vldr	s9, [r3]
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402f02:	ee36 6a4b 	vsub.f32	s12, s12, s22
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402f06:	ed92 5a00 	vldr	s10, [r2]
  402f0a:	ee34 5ac5 	vsub.f32	s10, s9, s10
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  402f0e:	ee26 6a2a 	vmul.f32	s12, s12, s21
  402f12:	eee5 7a06 	vfma.f32	s15, s10, s12
					harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402f16:	ee37 6ac8 	vsub.f32	s12, s15, s16
					chord_freqs[chord_idx].active = true;
					chord_freqs[chord_idx].freq = desired_pitch;
  402f1a:	edc8 7a02 	vstr	s15, [r8, #8]
					harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402f1e:	eef0 7a65 	vmov.f32	s15, s11
  402f22:	ab44      	add	r3, sp, #272	; 0x110
			for (i = 0; i < 3; i++, chord_idx++)
  402f24:	f10c 0c01 	add.w	ip, ip, #1
					chord_freqs[chord_idx].active = true;
  402f28:	2201      	movs	r2, #1
					harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402f2a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  402f2e:	f108 0808 	add.w	r8, r8, #8
  402f32:	eee8 7a86 	vfma.f32	s15, s17, s12
			for (i = 0; i < 3; i++, chord_idx++)
  402f36:	f1bc 0f04 	cmp.w	ip, #4
					chord_freqs[chord_idx].active = true;
  402f3a:	f888 2004 	strb.w	r2, [r8, #4]
					harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  402f3e:	f101 0101 	add.w	r1, r1, #1
  402f42:	ed43 7a14 	vstr	s15, [r3, #-80]	; 0xffffffb0
			for (i = 0; i < 3; i++, chord_idx++)
  402f46:	d015      	beq.n	402f74 <main+0x4fc>
  402f48:	4630      	mov	r0, r6
				for (uint32_t j = 0; j < harmony_steps[i]; j++, interval_idx++)
  402f4a:	f859 6b04 	ldr.w	r6, [r9], #4
  402f4e:	2e00      	cmp	r6, #0
  402f50:	d190      	bne.n	402e74 <main+0x3fc>
				if(chord_harmonies[chord_idx] == true)
  402f52:	4b2a      	ldr	r3, [pc, #168]	; (402ffc <main+0x584>)
				for (uint32_t j = 0; j < harmony_steps[i]; j++, interval_idx++)
  402f54:	4606      	mov	r6, r0
				if(chord_harmonies[chord_idx] == true)
  402f56:	f813 300c 	ldrb.w	r3, [r3, ip]
  402f5a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
  402f5e:	2b00      	cmp	r3, #0
  402f60:	d1a2      	bne.n	402ea8 <main+0x430>
			for (i = 0; i < 3; i++, chord_idx++)
  402f62:	f10c 0c01 	add.w	ip, ip, #1
				} else chord_freqs[chord_idx].active = false;
  402f66:	f888 200c 	strb.w	r2, [r8, #12]
  402f6a:	f108 0808 	add.w	r8, r8, #8
			for (i = 0; i < 3; i++, chord_idx++)
  402f6e:	f1bc 0f04 	cmp.w	ip, #4
  402f72:	d1e9      	bne.n	402f48 <main+0x4d0>
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402f74:	4d1e      	ldr	r5, [pc, #120]	; (402ff0 <main+0x578>)
  402f76:	1ea2      	subs	r2, r4, #2
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  402f78:	1ca3      	adds	r3, r4, #2
  402f7a:	9105      	str	r1, [sp, #20]
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  402f7c:	eb05 0e82 	add.w	lr, r5, r2, lsl #2
  402f80:	9907      	ldr	r1, [sp, #28]
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  402f82:	eb05 0883 	add.w	r8, r5, r3, lsl #2
  402f86:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  402f8a:	f8cd e01c 	str.w	lr, [sp, #28]
  402f8e:	2000      	movs	r0, #0
  402f90:	f8dd e014 	ldr.w	lr, [sp, #20]
  402f94:	f8cd 8014 	str.w	r8, [sp, #20]
  402f98:	f8dd 8018 	ldr.w	r8, [sp, #24]
			steps_to_harmony = 0;
			interval_idx = saved_interval_idx;  	
			for (i = 0; i < 3; i++, chord_idx++)
			{
				for (uint32_t j = 0; j < harmony_steps[i]; j++, interval_idx++)
					steps_to_harmony += major[interval_idx % 7];
  402f9c:	4e1a      	ldr	r6, [pc, #104]	; (403008 <main+0x590>)
				for (uint32_t j = 0; j < harmony_steps[i]; j++, interval_idx++)
  402f9e:	f858 5b04 	ldr.w	r5, [r8], #4
  402fa2:	2d00      	cmp	r5, #0
  402fa4:	f000 8082 	beq.w	4030ac <main+0x634>
  402fa8:	440d      	add	r5, r1
					steps_to_harmony += major[interval_idx % 7];
  402faa:	fba6 2301 	umull	r2, r3, r6, r1
  402fae:	1aca      	subs	r2, r1, r3
  402fb0:	eb03 0352 	add.w	r3, r3, r2, lsr #1
  402fb4:	aa44      	add	r2, sp, #272	; 0x110
  402fb6:	089b      	lsrs	r3, r3, #2
  402fb8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  402fbc:	1acb      	subs	r3, r1, r3
				for (uint32_t j = 0; j < harmony_steps[i]; j++, interval_idx++)
  402fbe:	3101      	adds	r1, #1
					steps_to_harmony += major[interval_idx % 7];
  402fc0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
				for (uint32_t j = 0; j < harmony_steps[i]; j++, interval_idx++)
  402fc4:	42a9      	cmp	r1, r5
					steps_to_harmony += major[interval_idx % 7];
  402fc6:	f853 3ccc 	ldr.w	r3, [r3, #-204]
  402fca:	4418      	add	r0, r3
				for (uint32_t j = 0; j < harmony_steps[i]; j++, interval_idx++)
  402fcc:	d1ed      	bne.n	402faa <main+0x532>
				if(chord_harmonies[chord_idx] == true)
  402fce:	4b0b      	ldr	r3, [pc, #44]	; (402ffc <main+0x584>)
  402fd0:	f813 300c 	ldrb.w	r3, [r3, ip]
  402fd4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
  402fd8:	2b00      	cmp	r3, #0
  402fda:	d06f      	beq.n	4030bc <main+0x644>
	uint32_t exp_abs = Abs(exponent);
  402fdc:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
	while (exp_abs)
  402fe0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	uint32_t exp_abs = Abs(exponent);
  402fe4:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
	while (exp_abs)
  402fe8:	b1b8      	cbz	r0, 40301a <main+0x5a2>
		result *= base;
  402fea:	ed9f 7a06 	vldr	s14, [pc, #24]	; 403004 <main+0x58c>
  402fee:	e00d      	b.n	40300c <main+0x594>
  402ff0:	00407760 	.word	0x00407760
  402ff4:	2040003c 	.word	0x2040003c
  402ff8:	bf800000 	.word	0xbf800000
  402ffc:	20415114 	.word	0x20415114
  403000:	20400044 	.word	0x20400044
  403004:	3f879c7d 	.word	0x3f879c7d
  403008:	24924925 	.word	0x24924925
	while (exp_abs)
  40300c:	3b01      	subs	r3, #1
		result *= base;
  40300e:	ee67 7a87 	vmul.f32	s15, s15, s14
	while (exp_abs)
  403012:	d1fb      	bne.n	40300c <main+0x594>
	if (exponent < 0)
  403014:	2800      	cmp	r0, #0
  403016:	f2c0 83af 	blt.w	403778 <main+0xd00>
				{
					desired_pitch = scale_pitch*powerf(1.059463094359f, steps_to_harmony);
					if (pitch_bend < 56 || pitch_bend > 72)
  40301a:	4bcd      	ldr	r3, [pc, #820]	; (403350 <main+0x8d8>)
					desired_pitch = scale_pitch*powerf(1.059463094359f, steps_to_harmony);
  40301c:	ee69 7a27 	vmul.f32	s15, s18, s15
					if (pitch_bend < 56 || pitch_bend > 72)
  403020:	681b      	ldr	r3, [r3, #0]
  403022:	2b37      	cmp	r3, #55	; 0x37
  403024:	d903      	bls.n	40302e <main+0x5b6>
  403026:	4bca      	ldr	r3, [pc, #808]	; (403350 <main+0x8d8>)
  403028:	681b      	ldr	r3, [r3, #0]
  40302a:	2b48      	cmp	r3, #72	; 0x48
  40302c:	d91d      	bls.n	40306a <main+0x5f2>
						bend_pitch(&desired_pitch, closest_note_number, (uint32_t)pitch_bend);
  40302e:	4bc8      	ldr	r3, [pc, #800]	; (403350 <main+0x8d8>)
  403030:	681b      	ldr	r3, [r3, #0]
	if (pitch_idx < 0 || pitch_idx > 127 || bend < 0 || bend > 127)
  403032:	2b7f      	cmp	r3, #127	; 0x7f
  403034:	d819      	bhi.n	40306a <main+0x5f2>
	if (pitch_bend > 64)
  403036:	4bc6      	ldr	r3, [pc, #792]	; (403350 <main+0x8d8>)
  403038:	681b      	ldr	r3, [r3, #0]
  40303a:	2b40      	cmp	r3, #64	; 0x40
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  40303c:	4bc4      	ldr	r3, [pc, #784]	; (403350 <main+0x8d8>)
  40303e:	ed93 7a00 	vldr	s14, [r3]
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  403042:	4bc4      	ldr	r3, [pc, #784]	; (403354 <main+0x8dc>)
  403044:	eb03 0384 	add.w	r3, r3, r4, lsl #2
	if (pitch_bend > 64)
  403048:	f200 83eb 	bhi.w	403822 <main+0xdaa>
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  40304c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  403050:	9a07      	ldr	r2, [sp, #28]
  403052:	edd3 5a00 	vldr	s11, [r3]
  403056:	ed92 6a00 	vldr	s12, [r2]
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  40305a:	ee37 7a4b 	vsub.f32	s14, s14, s22
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  40305e:	ee35 6ac6 	vsub.f32	s12, s11, s12
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  403062:	ee27 7a2a 	vmul.f32	s14, s14, s21
  403066:	eee6 7a07 	vfma.f32	s15, s12, s14
					harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  40306a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
					chord_freqs[chord_idx].active = true;
					chord_freqs[chord_idx].freq = desired_pitch;
  40306e:	edc9 7a08 	vstr	s15, [r9, #32]
					harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  403072:	ee37 6ac8 	vsub.f32	s12, s15, s16
  403076:	ab44      	add	r3, sp, #272	; 0x110
			for (i = 0; i < 3; i++, chord_idx++)
  403078:	f10c 0c01 	add.w	ip, ip, #1
					chord_freqs[chord_idx].active = true;
  40307c:	2201      	movs	r2, #1
					harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  40307e:	eef0 7a47 	vmov.f32	s15, s14
  403082:	eb03 038e 	add.w	r3, r3, lr, lsl #2
			for (i = 0; i < 3; i++, chord_idx++)
  403086:	f1bc 0f07 	cmp.w	ip, #7
					chord_freqs[chord_idx].active = true;
  40308a:	f889 2024 	strb.w	r2, [r9, #36]	; 0x24
					harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  40308e:	f10e 0e01 	add.w	lr, lr, #1
  403092:	f109 0908 	add.w	r9, r9, #8
  403096:	eee8 7a86 	vfma.f32	s15, s17, s12
  40309a:	ed43 7a14 	vstr	s15, [r3, #-80]	; 0xffffffb0
			for (i = 0; i < 3; i++, chord_idx++)
  40309e:	d016      	beq.n	4030ce <main+0x656>
  4030a0:	4629      	mov	r1, r5
				for (uint32_t j = 0; j < harmony_steps[i]; j++, interval_idx++)
  4030a2:	f858 5b04 	ldr.w	r5, [r8], #4
  4030a6:	2d00      	cmp	r5, #0
  4030a8:	f47f af7e 	bne.w	402fa8 <main+0x530>
				if(chord_harmonies[chord_idx] == true)
  4030ac:	4baa      	ldr	r3, [pc, #680]	; (403358 <main+0x8e0>)
				for (uint32_t j = 0; j < harmony_steps[i]; j++, interval_idx++)
  4030ae:	460d      	mov	r5, r1
				if(chord_harmonies[chord_idx] == true)
  4030b0:	f813 300c 	ldrb.w	r3, [r3, ip]
  4030b4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
  4030b8:	2b00      	cmp	r3, #0
  4030ba:	d18f      	bne.n	402fdc <main+0x564>
			for (i = 0; i < 3; i++, chord_idx++)
  4030bc:	f10c 0c01 	add.w	ip, ip, #1
				} else chord_freqs[chord_idx].active = false; 
  4030c0:	f889 2024 	strb.w	r2, [r9, #36]	; 0x24
  4030c4:	f109 0908 	add.w	r9, r9, #8
			for (i = 0; i < 3; i++, chord_idx++)
  4030c8:	f1bc 0f07 	cmp.w	ip, #7
  4030cc:	d1e8      	bne.n	4030a0 <main+0x628>
			}
				
			// octave up
			if(chord_harmonies[chord_idx] == true)
  4030ce:	4ba2      	ldr	r3, [pc, #648]	; (403358 <main+0x8e0>)
  4030d0:	f8cd e014 	str.w	lr, [sp, #20]
  4030d4:	79db      	ldrb	r3, [r3, #7]
  4030d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
  4030da:	2b00      	cmp	r3, #0
  4030dc:	f000 82c5 	beq.w	40366a <main+0xbf2>
			{
				if (*autotune)
  4030e0:	4b9d      	ldr	r3, [pc, #628]	; (403358 <main+0x8e0>)
  4030e2:	7a1b      	ldrb	r3, [r3, #8]
  4030e4:	ee0a 3a10 	vmov	s20, r3
  4030e8:	2b00      	cmp	r3, #0
  4030ea:	f040 838c 	bne.w	403806 <main+0xd8e>
					desired_pitch = scale_pitch*powerf(1.059463094359f, 12);
				else
					desired_pitch = closest_note_freq*powerf(1.059463094359f, 12);
  4030ee:	ed9f 9a9b 	vldr	s18, [pc, #620]	; 40335c <main+0x8e4>
  4030f2:	ee29 9a89 	vmul.f32	s18, s19, s18
				if (pitch_bend < 56 || pitch_bend > 72)
  4030f6:	4b96      	ldr	r3, [pc, #600]	; (403350 <main+0x8d8>)
  4030f8:	681b      	ldr	r3, [r3, #0]
  4030fa:	2b37      	cmp	r3, #55	; 0x37
  4030fc:	d903      	bls.n	403106 <main+0x68e>
  4030fe:	4b94      	ldr	r3, [pc, #592]	; (403350 <main+0x8d8>)
  403100:	681b      	ldr	r3, [r3, #0]
  403102:	2b48      	cmp	r3, #72	; 0x48
  403104:	d91c      	bls.n	403140 <main+0x6c8>
					bend_pitch(&desired_pitch, closest_note_number, (uint32_t)pitch_bend);
  403106:	4b92      	ldr	r3, [pc, #584]	; (403350 <main+0x8d8>)
  403108:	681b      	ldr	r3, [r3, #0]
	if (pitch_idx < 0 || pitch_idx > 127 || bend < 0 || bend > 127)
  40310a:	2b7f      	cmp	r3, #127	; 0x7f
  40310c:	d818      	bhi.n	403140 <main+0x6c8>
	if (pitch_bend > 64)
  40310e:	4b90      	ldr	r3, [pc, #576]	; (403350 <main+0x8d8>)
  403110:	681b      	ldr	r3, [r3, #0]
  403112:	2b40      	cmp	r3, #64	; 0x40
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  403114:	4b8e      	ldr	r3, [pc, #568]	; (403350 <main+0x8d8>)
  403116:	edd3 7a00 	vldr	s15, [r3]
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  40311a:	4b8e      	ldr	r3, [pc, #568]	; (403354 <main+0x8dc>)
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  40311c:	eef8 7a67 	vcvt.f32.u32	s15, s15
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  403120:	eb03 0384 	add.w	r3, r3, r4, lsl #2
	if (pitch_bend > 64)
  403124:	f200 83f0 	bhi.w	403908 <main+0xe90>
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  403128:	ee77 7acb 	vsub.f32	s15, s15, s22
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  40312c:	ed93 6a00 	vldr	s12, [r3]
  403130:	ed13 7a02 	vldr	s14, [r3, #-8]
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  403134:	ee67 7aaa 	vmul.f32	s15, s15, s21
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  403138:	ee36 7a47 	vsub.f32	s14, s12, s14
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  40313c:	eea7 9a27 	vfma.f32	s18, s14, s15
				harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  403140:	ee39 7a48 	vsub.f32	s14, s18, s16
  403144:	9a05      	ldr	r2, [sp, #20]
  403146:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  40314a:	a944      	add	r1, sp, #272	; 0x110
  40314c:	eeb0 1a49 	vmov.f32	s2, s18
  403150:	1c54      	adds	r4, r2, #1
  403152:	eb01 0382 	add.w	r3, r1, r2, lsl #2
				chord_freqs[chord_idx].active = true;
  403156:	2201      	movs	r2, #1
				harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  403158:	eee8 7a87 	vfma.f32	s15, s17, s14
				chord_freqs[chord_idx].freq = desired_pitch;
  40315c:	ed8d 9a2e 	vstr	s18, [sp, #184]	; 0xb8
				chord_freqs[chord_idx].active = true;
  403160:	f88d 20bc 	strb.w	r2, [sp, #188]	; 0xbc
				harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  403164:	ed43 7a14 	vstr	s15, [r3, #-80]	; 0xffffffb0
						// check if chord harmonies are already doing this harmony 
						desired_pitch = harmony_list[i].freq;
						bool already_harmonized = false; 
						for (int k = 0; k < 8; k++)
						{
							if (chord_freqs[k].active && Abs(desired_pitch - chord_freqs[k].freq) < 1.0f)
  403168:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
							if (pitch_bend != 64)
								bend_pitch(&desired_pitch, harmony_list[i].idx, (uint32_t)pitch_bend);
							
							pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
							
							if (pitch_shift > 0.1f && pitch_shift < 6.0f) // range check
  40316c:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
							pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  403170:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
							if (chord_freqs[k].active && Abs(desired_pitch - chord_freqs[k].freq) < 1.0f)
  403174:	f89d 5084 	ldrb.w	r5, [sp, #132]	; 0x84
					if (Abs(harmony_list[i].freq - dry_freq) > 8.0f) // don't harmonize input pitch twice
  403178:	eeb2 6a00 	vmov.f32	s12, #32	; 0x41000000  8.0
							if (chord_freqs[k].active && Abs(desired_pitch - chord_freqs[k].freq) < 1.0f)
  40317c:	9205      	str	r2, [sp, #20]
  40317e:	eddd 3a20 	vldr	s7, [sp, #128]	; 0x80
  403182:	2300      	movs	r3, #0
  403184:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
  403188:	f89d e08c 	ldrb.w	lr, [sp, #140]	; 0x8c
  40318c:	ed9d 4a22 	vldr	s8, [sp, #136]	; 0x88
  403190:	f89d 6094 	ldrb.w	r6, [sp, #148]	; 0x94
  403194:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
  403198:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
  40319c:	eddd 1a26 	vldr	s3, [sp, #152]	; 0x98
  4031a0:	f89d c0a4 	ldrb.w	ip, [sp, #164]	; 0xa4
  4031a4:	ed9d 2a28 	vldr	s4, [sp, #160]	; 0xa0
  4031a8:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
  4031ac:	eddd 2a2a 	vldr	s5, [sp, #168]	; 0xa8
  4031b0:	ed9d 3a2c 	vldr	s6, [sp, #176]	; 0xb0
							if (pitch_shift > 0.1f && pitch_shift < 6.0f) // range check
  4031b4:	ed9f 5a6a 	vldr	s10, [pc, #424]	; 403360 <main+0x8e8>
							if (chord_freqs[k].active && Abs(desired_pitch - chord_freqs[k].freq) < 1.0f)
  4031b8:	9206      	str	r2, [sp, #24]
				if (harmony_list[i].active)
  4031ba:	0059      	lsls	r1, r3, #1
  4031bc:	4869      	ldr	r0, [pc, #420]	; (403364 <main+0x8ec>)
  4031be:	18ca      	adds	r2, r1, r3
  4031c0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  4031c4:	7a10      	ldrb	r0, [r2, #8]
  4031c6:	2800      	cmp	r0, #0
  4031c8:	f000 80b9 	beq.w	40333e <main+0x8c6>
					if (Abs(harmony_list[i].freq - dry_freq) > 8.0f) // don't harmonize input pitch twice
  4031cc:	edd2 7a00 	vldr	s15, [r2]
  4031d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
  4031d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  4031d8:	edd2 7a00 	vldr	s15, [r2]
  4031dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4031e0:	bf4c      	ite	mi
  4031e2:	ee76 7ae7 	vsubmi.f32	s15, s13, s15
  4031e6:	ee77 7ae6 	vsubpl.f32	s15, s15, s13
  4031ea:	eef4 7ac6 	vcmpe.f32	s15, s12
  4031ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4031f2:	bfcc      	ite	gt
  4031f4:	2201      	movgt	r2, #1
  4031f6:	2200      	movle	r2, #0
  4031f8:	2a00      	cmp	r2, #0
  4031fa:	f000 80a0 	beq.w	40333e <main+0x8c6>
						desired_pitch = harmony_list[i].freq;
  4031fe:	18ca      	adds	r2, r1, r3
  403200:	4858      	ldr	r0, [pc, #352]	; (403364 <main+0x8ec>)
  403202:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  403206:	edd2 7a00 	vldr	s15, [r2]
							if (chord_freqs[k].active && Abs(desired_pitch - chord_freqs[k].freq) < 1.0f)
  40320a:	b14d      	cbz	r5, 403220 <main+0x7a8>
  40320c:	ee77 5ae3 	vsub.f32	s11, s15, s7
  403210:	eef0 5ae5 	vabs.f32	s11, s11
  403214:	eef4 5ac7 	vcmpe.f32	s11, s14
  403218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40321c:	f100 808f 	bmi.w	40333e <main+0x8c6>
  403220:	f1be 0f00 	cmp.w	lr, #0
  403224:	d009      	beq.n	40323a <main+0x7c2>
  403226:	ee77 5ac4 	vsub.f32	s11, s15, s8
  40322a:	eef0 5ae5 	vabs.f32	s11, s11
  40322e:	eef4 5ac7 	vcmpe.f32	s11, s14
  403232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403236:	f100 8082 	bmi.w	40333e <main+0x8c6>
  40323a:	b146      	cbz	r6, 40324e <main+0x7d6>
  40323c:	ee77 5ae4 	vsub.f32	s11, s15, s9
  403240:	eef0 5ae5 	vabs.f32	s11, s11
  403244:	eef4 5ac7 	vcmpe.f32	s11, s14
  403248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40324c:	d477      	bmi.n	40333e <main+0x8c6>
  40324e:	f1b8 0f00 	cmp.w	r8, #0
  403252:	d008      	beq.n	403266 <main+0x7ee>
  403254:	ee77 5ae1 	vsub.f32	s11, s15, s3
  403258:	eef0 5ae5 	vabs.f32	s11, s11
  40325c:	eef4 5ac7 	vcmpe.f32	s11, s14
  403260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403264:	d46b      	bmi.n	40333e <main+0x8c6>
  403266:	f1bc 0f00 	cmp.w	ip, #0
  40326a:	d008      	beq.n	40327e <main+0x806>
  40326c:	ee77 5ac2 	vsub.f32	s11, s15, s4
  403270:	eef0 5ae5 	vabs.f32	s11, s11
  403274:	eef4 5ac7 	vcmpe.f32	s11, s14
  403278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40327c:	d45f      	bmi.n	40333e <main+0x8c6>
  40327e:	f1b9 0f00 	cmp.w	r9, #0
  403282:	d008      	beq.n	403296 <main+0x81e>
  403284:	ee77 5ae2 	vsub.f32	s11, s15, s5
  403288:	eef0 5ae5 	vabs.f32	s11, s11
  40328c:	eef4 5ac7 	vcmpe.f32	s11, s14
  403290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403294:	d453      	bmi.n	40333e <main+0x8c6>
  403296:	9a05      	ldr	r2, [sp, #20]
  403298:	b142      	cbz	r2, 4032ac <main+0x834>
  40329a:	ee77 5ac3 	vsub.f32	s11, s15, s6
  40329e:	eef0 5ae5 	vabs.f32	s11, s11
  4032a2:	eef4 5ac7 	vcmpe.f32	s11, s14
  4032a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4032aa:	d448      	bmi.n	40333e <main+0x8c6>
  4032ac:	9a06      	ldr	r2, [sp, #24]
  4032ae:	b142      	cbz	r2, 4032c2 <main+0x84a>
  4032b0:	ee77 5ac1 	vsub.f32	s11, s15, s2
  4032b4:	eef0 5ae5 	vabs.f32	s11, s11
  4032b8:	eef4 5ac7 	vcmpe.f32	s11, s14
  4032bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4032c0:	d43d      	bmi.n	40333e <main+0x8c6>
							if (pitch_bend != 64)
  4032c2:	4a23      	ldr	r2, [pc, #140]	; (403350 <main+0x8d8>)
  4032c4:	6812      	ldr	r2, [r2, #0]
  4032c6:	2a40      	cmp	r2, #64	; 0x40
  4032c8:	d023      	beq.n	403312 <main+0x89a>
								bend_pitch(&desired_pitch, harmony_list[i].idx, (uint32_t)pitch_bend);
  4032ca:	18ca      	adds	r2, r1, r3
  4032cc:	4925      	ldr	r1, [pc, #148]	; (403364 <main+0x8ec>)
  4032ce:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4032d2:	491f      	ldr	r1, [pc, #124]	; (403350 <main+0x8d8>)
  4032d4:	6852      	ldr	r2, [r2, #4]
  4032d6:	6809      	ldr	r1, [r1, #0]
	if (pitch_idx < 0 || pitch_idx > 127 || bend < 0 || bend > 127)
  4032d8:	2a7f      	cmp	r2, #127	; 0x7f
  4032da:	d81a      	bhi.n	403312 <main+0x89a>
  4032dc:	297f      	cmp	r1, #127	; 0x7f
  4032de:	d818      	bhi.n	403312 <main+0x89a>
	if (pitch_bend > 64)
  4032e0:	491b      	ldr	r1, [pc, #108]	; (403350 <main+0x8d8>)
  4032e2:	6809      	ldr	r1, [r1, #0]
  4032e4:	2940      	cmp	r1, #64	; 0x40
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  4032e6:	491a      	ldr	r1, [pc, #104]	; (403350 <main+0x8d8>)
  4032e8:	edd1 5a00 	vldr	s11, [r1]
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  4032ec:	4919      	ldr	r1, [pc, #100]	; (403354 <main+0x8dc>)
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  4032ee:	eef8 5a65 	vcvt.f32.u32	s11, s11
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  4032f2:	eb01 0182 	add.w	r1, r1, r2, lsl #2
	if (pitch_bend > 64)
  4032f6:	f200 82b6 	bhi.w	403866 <main+0xdee>
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  4032fa:	ee75 5acb 	vsub.f32	s11, s11, s22
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  4032fe:	ed91 9a00 	vldr	s18, [r1]
  403302:	ed11 0a02 	vldr	s0, [r1, #-8]
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  403306:	ee65 5aaa 	vmul.f32	s11, s11, s21
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  40330a:	ee39 0a40 	vsub.f32	s0, s18, s0
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  40330e:	eee5 7a80 	vfma.f32	s15, s11, s0
							pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  403312:	ee77 7ac8 	vsub.f32	s15, s15, s16
  403316:	ee67 7aa8 	vmul.f32	s15, s15, s17
							if (pitch_shift > 0.1f && pitch_shift < 6.0f) // range check
  40331a:	eef4 7a45 	vcmp.f32	s15, s10
  40331e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403322:	dd0c      	ble.n	40333e <main+0x8c6>
  403324:	eef4 7a60 	vcmp.f32	s15, s1
  403328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40332c:	d507      	bpl.n	40333e <main+0x8c6>
								harmony_shifts[num_of_shifts++] = pitch_shift;
  40332e:	aa44      	add	r2, sp, #272	; 0x110
							pitch_shift = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  403330:	ee77 7a87 	vadd.f32	s15, s15, s14
								harmony_shifts[num_of_shifts++] = pitch_shift;
  403334:	eb02 0284 	add.w	r2, r2, r4, lsl #2
  403338:	3401      	adds	r4, #1
  40333a:	ed42 7a14 	vstr	s15, [r2, #-80]	; 0xffffffb0
			for (i = 0; i < MAX_NUM_KEYS_HARMONIES; i++)
  40333e:	3301      	adds	r3, #1
  403340:	2b0a      	cmp	r3, #10
  403342:	f47f af3a 	bne.w	4031ba <main+0x742>
				}
			}			
			if (num_of_shifts > 0)
			{
				harmony_shifts[num_of_shifts] = END_OF_SHIFTS; 
				create_harmonies(processBuffer, out_buffer, inputPitch, harmony_shifts, (float)harm_volume,  *autotune, (float)dry_volume);
  403346:	4b08      	ldr	r3, [pc, #32]	; (403368 <main+0x8f0>)
  403348:	eef8 7a4a 	vcvt.f32.u32	s15, s20
  40334c:	681b      	ldr	r3, [r3, #0]
  40334e:	e00d      	b.n	40336c <main+0x8f4>
  403350:	20400044 	.word	0x20400044
  403354:	00407760 	.word	0x00407760
  403358:	20415114 	.word	0x20415114
  40335c:	40000005 	.word	0x40000005
  403360:	bf666666 	.word	0xbf666666
  403364:	2043f418 	.word	0x2043f418
  403368:	20400038 	.word	0x20400038
			if (num_of_shifts > 0)
  40336c:	2c00      	cmp	r4, #0
  40336e:	f000 8161 	beq.w	403634 <main+0xbbc>
				harmony_shifts[num_of_shifts] = END_OF_SHIFTS; 
  403372:	a944      	add	r1, sp, #272	; 0x110
				create_harmonies(processBuffer, out_buffer, inputPitch, harmony_shifts, (float)harm_volume,  *autotune, (float)dry_volume);
  403374:	4ac2      	ldr	r2, [pc, #776]	; (403680 <main+0xc08>)
				harmony_shifts[num_of_shifts] = END_OF_SHIFTS; 
  403376:	48c3      	ldr	r0, [pc, #780]	; (403684 <main+0xc0c>)
				create_harmonies(processBuffer, out_buffer, inputPitch, harmony_shifts, (float)harm_volume,  *autotune, (float)dry_volume);
  403378:	6812      	ldr	r2, [r2, #0]
				harmony_shifts[num_of_shifts] = END_OF_SHIFTS; 
  40337a:	eb01 0484 	add.w	r4, r1, r4, lsl #2
				create_harmonies(processBuffer, out_buffer, inputPitch, harmony_shifts, (float)harm_volume,  *autotune, (float)dry_volume);
  40337e:	9300      	str	r3, [sp, #0]
  403380:	ab30      	add	r3, sp, #192	; 0xc0
  403382:	9202      	str	r2, [sp, #8]
  403384:	ee18 2a10 	vmov	r2, s16
  403388:	edcd 7a01 	vstr	s15, [sp, #4]
  40338c:	49be      	ldr	r1, [pc, #760]	; (403688 <main+0xc10>)
				harmony_shifts[num_of_shifts] = END_OF_SHIFTS; 
  40338e:	f844 0c50 	str.w	r0, [r4, #-80]
				create_harmonies(processBuffer, out_buffer, inputPitch, harmony_shifts, (float)harm_volume,  *autotune, (float)dry_volume);
  403392:	48be      	ldr	r0, [pc, #760]	; (40368c <main+0xc14>)
  403394:	4cbe      	ldr	r4, [pc, #760]	; (403690 <main+0xc18>)
  403396:	47a0      	blx	r4
				if (*autotune == 0)
  403398:	4bbe      	ldr	r3, [pc, #760]	; (403694 <main+0xc1c>)
  40339a:	7a1b      	ldrb	r3, [r3, #8]
  40339c:	2b00      	cmp	r3, #0
  40339e:	f000 826f 	beq.w	403880 <main+0xe08>
								harmony_shifts[num_of_shifts++] = pitch_shift;
  4033a2:	4652      	mov	r2, sl
  4033a4:	4db8      	ldr	r5, [pc, #736]	; (403688 <main+0xc10>)
			}
			
			// save dry audio 
			for (i = 0; i < WIN_SIZE; i++)
			{
				dry_circ_buffer[circ_buf_idx++ & CIRC_MASK] = out_buffer[i];
  4033a6:	f3c2 030d 	ubfx	r3, r2, #0, #14
  4033aa:	f855 1b04 	ldr.w	r1, [r5], #4
  4033ae:	3201      	adds	r2, #1
  4033b0:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  4033b4:	6019      	str	r1, [r3, #0]
			for (i = 0; i < WIN_SIZE; i++)
  4033b6:	4bb8      	ldr	r3, [pc, #736]	; (403698 <main+0xc20>)
  4033b8:	42ab      	cmp	r3, r5
  4033ba:	d1f4      	bne.n	4033a6 <main+0x92e>
			}
			
			// Add audio effects 
			uint32_t curr_idx = circ_buf_idx - (uint32_t)WIN_SIZE;
			// chorus params 
			float n_freq = chorus_speed / SAMPLE_RATE; 
  4033bc:	4bb7      	ldr	r3, [pc, #732]	; (40369c <main+0xc24>)
			uint32_t num_samples_in_period = 1 / n_freq; 
  4033be:	eddf 8ab8 	vldr	s17, [pc, #736]	; 4036a0 <main+0xc28>
			float n_freq = chorus_speed / SAMPLE_RATE; 
  4033c2:	edd3 7a00 	vldr	s15, [r3]
  4033c6:	f50a 7300 	add.w	r3, sl, #512	; 0x200
  4033ca:	ed9f 8ab6 	vldr	s16, [pc, #728]	; 4036a4 <main+0xc2c>
			uint32_t num_samples_in_period = 1 / n_freq; 
  4033ce:	ee88 7aa7 	vdiv.f32	s14, s17, s15
  4033d2:	950a      	str	r5, [sp, #40]	; 0x28
  4033d4:	4cac      	ldr	r4, [pc, #688]	; (403688 <main+0xc10>)
			for (i = 0; i < WIN_SIZE; i++, curr_idx++)
			{				
				out_buffer[i] = (1.0f - 0.5*(delay_volume + 0.5f*(chorus_volume + reverb_volume))) * out_buffer[i]; 
						
				// chorus
				chorus_delay = (0.008f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * SAMPLE_RATE;
  4033d6:	ed9f aab4 	vldr	s20, [pc, #720]	; 4036a8 <main+0xc30>
  4033da:	eddf 9ab4 	vldr	s19, [pc, #720]	; 4036ac <main+0xc34>
				if (sin_cnt == num_samples_in_period)
					sin_cnt = 0;
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  4033de:	ed9f 9ab4 	vldr	s18, [pc, #720]	; 4036b0 <main+0xc38>
  4033e2:	ee27 8a88 	vmul.f32	s16, s15, s16
			uint32_t num_samples_in_period = 1 / n_freq; 
  4033e6:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4033e8:	9307      	str	r3, [sp, #28]
  4033ea:	eefc 7ac7 	vcvt.u32.f32	s15, s14
  4033ee:	edcd 7a06 	vstr	s15, [sp, #24]
				out_buffer[i] = (1.0f - 0.5*(delay_volume + 0.5f*(chorus_volume + reverb_volume))) * out_buffer[i]; 
  4033f2:	4bb0      	ldr	r3, [pc, #704]	; (4036b4 <main+0xc3c>)
  4033f4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
				chorus_delay = (0.008f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * SAMPLE_RATE;
  4033f8:	1c6a      	adds	r2, r5, #1
				out_buffer[i] = (1.0f - 0.5*(delay_volume + 0.5f*(chorus_volume + reverb_volume))) * out_buffer[i]; 
  4033fa:	4eaf      	ldr	r6, [pc, #700]	; (4036b8 <main+0xc40>)
  4033fc:	ed93 7a00 	vldr	s14, [r3]
  403400:	4bae      	ldr	r3, [pc, #696]	; (4036bc <main+0xc44>)
				chorus_delay = (0.008f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * SAMPLE_RATE;
  403402:	9205      	str	r2, [sp, #20]
				out_buffer[i] = (1.0f - 0.5*(delay_volume + 0.5f*(chorus_volume + reverb_volume))) * out_buffer[i]; 
  403404:	edd3 7a00 	vldr	s15, [r3]
  403408:	4bad      	ldr	r3, [pc, #692]	; (4036c0 <main+0xc48>)
  40340a:	ee77 7a27 	vadd.f32	s15, s14, s15
  40340e:	edd3 6a00 	vldr	s13, [r3]
  403412:	4bac      	ldr	r3, [pc, #688]	; (4036c4 <main+0xc4c>)
  403414:	eee7 6a86 	vfma.f32	s13, s15, s12
  403418:	ee16 0a90 	vmov	r0, s13
  40341c:	4798      	blx	r3
  40341e:	2200      	movs	r2, #0
  403420:	4ba9      	ldr	r3, [pc, #676]	; (4036c8 <main+0xc50>)
  403422:	47b0      	blx	r6
  403424:	4ea9      	ldr	r6, [pc, #676]	; (4036cc <main+0xc54>)
  403426:	4602      	mov	r2, r0
  403428:	460b      	mov	r3, r1
  40342a:	2000      	movs	r0, #0
  40342c:	49a8      	ldr	r1, [pc, #672]	; (4036d0 <main+0xc58>)
  40342e:	47b0      	blx	r6
  403430:	4680      	mov	r8, r0
  403432:	4689      	mov	r9, r1
  403434:	6820      	ldr	r0, [r4, #0]
  403436:	4ba3      	ldr	r3, [pc, #652]	; (4036c4 <main+0xc4c>)
  403438:	4798      	blx	r3
  40343a:	4e9f      	ldr	r6, [pc, #636]	; (4036b8 <main+0xc40>)
  40343c:	4602      	mov	r2, r0
  40343e:	460b      	mov	r3, r1
  403440:	4640      	mov	r0, r8
  403442:	4649      	mov	r1, r9
  403444:	47b0      	blx	r6
  403446:	4ba3      	ldr	r3, [pc, #652]	; (4036d4 <main+0xc5c>)
  403448:	4798      	blx	r3
				chorus_delay = (0.008f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * SAMPLE_RATE;
  40344a:	ee07 5a90 	vmov	s15, r5
				if (sin_cnt == num_samples_in_period)
  40344e:	9905      	ldr	r1, [sp, #20]
														dry_circ_buffer[(curr_idx - 199 - chorus_delay)  & CIRC_MASK] +
														dry_circ_buffer[(curr_idx - 401 - chorus_delay)  & CIRC_MASK] +
  403450:	f46f 76c8 	mvn.w	r6, #400	; 0x190
				chorus_delay = (0.008f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * SAMPLE_RATE;
  403454:	eef8 7a67 	vcvt.f32.u32	s15, s15
				if (sin_cnt == num_samples_in_period)
  403458:	9b06      	ldr	r3, [sp, #24]
  40345a:	460a      	mov	r2, r1
				out_buffer[i] = (1.0f - 0.5*(delay_volume + 0.5f*(chorus_volume + reverb_volume))) * out_buffer[i]; 
  40345c:	6020      	str	r0, [r4, #0]
				chorus_delay = (0.008f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * SAMPLE_RATE;
  40345e:	ee67 7a88 	vmul.f32	s15, s15, s16
				if (sin_cnt == num_samples_in_period)
  403462:	428b      	cmp	r3, r1
  403464:	bf08      	it	eq
  403466:	2200      	moveq	r2, #0
				chorus_delay = (0.008f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * SAMPLE_RATE;
  403468:	4b9b      	ldr	r3, [pc, #620]	; (4036d8 <main+0xc60>)
				if (sin_cnt == num_samples_in_period)
  40346a:	4615      	mov	r5, r2
				chorus_delay = (0.008f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * SAMPLE_RATE;
  40346c:	ee17 0a90 	vmov	r0, s15
  403470:	4798      	blx	r3
  403472:	eeb0 7a69 	vmov.f32	s14, s19
  403476:	ee07 0a90 	vmov	s15, r0
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
				out_buffer[i] += delay_volume * delay_circ_buffer[curr_idx & CIRC_MASK];
				
				// reverb
				out_buffer[i] += reverb_volume * 0.25f * 
 						(dry_circ_buffer[(curr_idx - 2001)  & CIRC_MASK] +
  40347a:	f46f 63fa 	mvn.w	r3, #2000	; 0x7d0
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  40347e:	4a8d      	ldr	r2, [pc, #564]	; (4036b4 <main+0xc3c>)
														dry_circ_buffer[(curr_idx - 809 - chorus_delay)  & CIRC_MASK]));			
  403480:	f46f 7c4a 	mvn.w	ip, #808	; 0x328
				chorus_delay = (0.008f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * SAMPLE_RATE;
  403484:	eea7 7a8a 	vfma.f32	s14, s15, s20
 						(dry_circ_buffer[(curr_idx - 2001)  & CIRC_MASK] +
  403488:	eb0a 0103 	add.w	r1, sl, r3
 						dry_circ_buffer[(curr_idx - 3501)  & CIRC_MASK] + 
  40348c:	f6aa 53ad 	subw	r3, sl, #3501	; 0xdad
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  403490:	edd2 4a00 	vldr	s9, [r2]
 						(dry_circ_buffer[(curr_idx - 2001)  & CIRC_MASK] +
  403494:	f3c1 010d 	ubfx	r1, r1, #0, #14
						dry_circ_buffer[(curr_idx - 3001)  & CIRC_MASK] +
  403498:	f6aa 32b9 	subw	r2, sl, #3001	; 0xbb9
 						dry_circ_buffer[(curr_idx - 3501)  & CIRC_MASK] + 
  40349c:	f3c3 030d 	ubfx	r3, r3, #0, #14
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  4034a0:	488e      	ldr	r0, [pc, #568]	; (4036dc <main+0xc64>)
 						(dry_circ_buffer[(curr_idx - 2001)  & CIRC_MASK] +
  4034a2:	eb07 0181 	add.w	r1, r7, r1, lsl #2
						dry_circ_buffer[(curr_idx - 3001)  & CIRC_MASK] +
  4034a6:	f3c2 020d 	ubfx	r2, r2, #0, #14
 						dry_circ_buffer[(curr_idx - 3501)  & CIRC_MASK] + 
  4034aa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  4034ae:	ee64 4a89 	vmul.f32	s9, s9, s18
				chorus_delay = (0.008f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * SAMPLE_RATE;
  4034b2:	ee27 7a28 	vmul.f32	s14, s14, s17
 						(dry_circ_buffer[(curr_idx - 2001)  & CIRC_MASK] +
  4034b6:	ed91 6a00 	vldr	s12, [r1]
  4034ba:	edd3 7a00 	vldr	s15, [r3]
						dry_circ_buffer[(curr_idx - 3705)  & CIRC_MASK] ); 
  4034be:	f6aa 6179 	subw	r1, sl, #3705	; 0xe79
						dry_circ_buffer[(curr_idx - 3001)  & CIRC_MASK] +
  4034c2:	eb07 0282 	add.w	r2, r7, r2, lsl #2
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  4034c6:	edd4 5a00 	vldr	s11, [r4]
				chorus_delay = (0.008f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * SAMPLE_RATE;
  4034ca:	eebc 7ac7 	vcvt.u32.f32	s14, s14
						dry_circ_buffer[(curr_idx - 3705)  & CIRC_MASK] ); 
  4034ce:	f3c1 010d 	ubfx	r1, r1, #0, #14
 						(dry_circ_buffer[(curr_idx - 2001)  & CIRC_MASK] +
  4034d2:	ee36 6a27 	vadd.f32	s12, s12, s15
 						dry_circ_buffer[(curr_idx - 3501)  & CIRC_MASK] + 
  4034d6:	edd2 7a00 	vldr	s15, [r2]
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  4034da:	f3ca 020d 	ubfx	r2, sl, #0, #14
						dry_circ_buffer[(curr_idx - 3705)  & CIRC_MASK] ); 
  4034de:	eb07 0181 	add.w	r1, r7, r1, lsl #2
				chorus_delay = (0.008f + 0.003f *  arm_cos_f32(2.0f*(float)M_PI * (float)sin_cnt++ * n_freq)) * SAMPLE_RATE;
  4034e2:	ee17 3a10 	vmov	r3, s14
				out_buffer[i] += reverb_volume * 0.25f * 
  4034e6:	eeb5 5a00 	vmov.f32	s10, #80	; 0x3e800000  0.250
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  4034ea:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 						dry_circ_buffer[(curr_idx - 3501)  & CIRC_MASK] + 
  4034ee:	ee36 6a27 	vadd.f32	s12, s12, s15
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  4034f2:	ebaa 0303 	sub.w	r3, sl, r3
						dry_circ_buffer[(curr_idx - 3001)  & CIRC_MASK] +
  4034f6:	edd1 7a00 	vldr	s15, [r1]
														dry_circ_buffer[(curr_idx - 401 - chorus_delay)  & CIRC_MASK] +
  4034fa:	eb03 0e06 	add.w	lr, r3, r6
														dry_circ_buffer[(curr_idx - 199 - chorus_delay)  & CIRC_MASK] +
  4034fe:	f1a3 00c7 	sub.w	r0, r3, #199	; 0xc7
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  403502:	f3c3 060d 	ubfx	r6, r3, #0, #14
						dry_circ_buffer[(curr_idx - 3001)  & CIRC_MASK] +
  403506:	ee36 6a27 	vadd.f32	s12, s12, s15
														dry_circ_buffer[(curr_idx - 401 - chorus_delay)  & CIRC_MASK] +
  40350a:	f3ce 010d 	ubfx	r1, lr, #0, #14
														dry_circ_buffer[(curr_idx - 199 - chorus_delay)  & CIRC_MASK] +
  40350e:	f3c0 000d 	ubfx	r0, r0, #0, #14
														dry_circ_buffer[(curr_idx - 601 - chorus_delay)  & CIRC_MASK] +
  403512:	f46f 7e16 	mvn.w	lr, #600	; 0x258
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  403516:	eb07 0686 	add.w	r6, r7, r6, lsl #2
														dry_circ_buffer[(curr_idx - 199 - chorus_delay)  & CIRC_MASK] +
  40351a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
														dry_circ_buffer[(curr_idx - 401 - chorus_delay)  & CIRC_MASK] +
  40351e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
														dry_circ_buffer[(curr_idx - 199 - chorus_delay)  & CIRC_MASK] +
  403522:	ed96 7a00 	vldr	s14, [r6]
  403526:	edd0 6a00 	vldr	s13, [r0]
														dry_circ_buffer[(curr_idx - 601 - chorus_delay)  & CIRC_MASK] +
  40352a:	eb03 000e 	add.w	r0, r3, lr
														dry_circ_buffer[(curr_idx - 199 - chorus_delay)  & CIRC_MASK] +
  40352e:	edd1 7a00 	vldr	s15, [r1]
														dry_circ_buffer[(curr_idx - 809 - chorus_delay)  & CIRC_MASK]));			
  403532:	4463      	add	r3, ip
														dry_circ_buffer[(curr_idx - 601 - chorus_delay)  & CIRC_MASK] +
  403534:	f3c0 000d 	ubfx	r0, r0, #0, #14
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  403538:	4969      	ldr	r1, [pc, #420]	; (4036e0 <main+0xc68>)
														dry_circ_buffer[(curr_idx - 199 - chorus_delay)  & CIRC_MASK] +
  40353a:	ee76 7aa7 	vadd.f32	s15, s13, s15
														dry_circ_buffer[(curr_idx - 809 - chorus_delay)  & CIRC_MASK]));			
  40353e:	f3c3 030d 	ubfx	r3, r3, #0, #14
														dry_circ_buffer[(curr_idx - 601 - chorus_delay)  & CIRC_MASK] +
  403542:	eb07 0080 	add.w	r0, r7, r0, lsl #2
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  403546:	6809      	ldr	r1, [r1, #0]
														dry_circ_buffer[(curr_idx - 809 - chorus_delay)  & CIRC_MASK]));			
  403548:	eb07 0383 	add.w	r3, r7, r3, lsl #2
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  40354c:	4e65      	ldr	r6, [pc, #404]	; (4036e4 <main+0xc6c>)
														dry_circ_buffer[(curr_idx - 199 - chorus_delay)  & CIRC_MASK] +
  40354e:	ee77 7a87 	vadd.f32	s15, s15, s14
														dry_circ_buffer[(curr_idx - 401 - chorus_delay)  & CIRC_MASK] +
  403552:	edd0 6a00 	vldr	s13, [r0]
														dry_circ_buffer[(curr_idx - 601 - chorus_delay)  & CIRC_MASK] +
  403556:	ed93 7a00 	vldr	s14, [r3]
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  40355a:	ebaa 0101 	sub.w	r1, sl, r1
  40355e:	edd6 3a00 	vldr	s7, [r6]
			for (i = 0; i < WIN_SIZE; i++, curr_idx++)
  403562:	f10a 0a01 	add.w	sl, sl, #1
														dry_circ_buffer[(curr_idx - 401 - chorus_delay)  & CIRC_MASK] +
  403566:	ee77 7aa6 	vadd.f32	s15, s15, s13
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  40356a:	f3c1 030d 	ubfx	r3, r1, #0, #14
				out_buffer[i] += delay_volume * delay_circ_buffer[curr_idx & CIRC_MASK];
  40356e:	4954      	ldr	r1, [pc, #336]	; (4036c0 <main+0xc48>)
														dry_circ_buffer[(curr_idx - 601 - chorus_delay)  & CIRC_MASK] +
  403570:	ee77 7a87 	vadd.f32	s15, s15, s14
				out_buffer[i] += delay_volume * delay_circ_buffer[curr_idx & CIRC_MASK];
  403574:	ed91 4a00 	vldr	s8, [r1]
				out_buffer[i] += reverb_volume * 0.25f * 
  403578:	4950      	ldr	r1, [pc, #320]	; (4036bc <main+0xc44>)
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  40357a:	eee4 5aa7 	vfma.f32	s11, s9, s15
				out_buffer[i] += reverb_volume * 0.25f * 
  40357e:	edd1 6a00 	vldr	s13, [r1]
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  403582:	4956      	ldr	r1, [pc, #344]	; (4036dc <main+0xc64>)
				out_buffer[i] += reverb_volume * 0.25f * 
  403584:	ee66 6a85 	vmul.f32	s13, s13, s10
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  403588:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  40358c:	ed93 7a00 	vldr	s14, [r3]
				out_buffer[i] += chorus_volume * (0.2f* (dry_circ_buffer[(curr_idx - chorus_delay)  & CIRC_MASK] +
  403590:	eef0 7a65 	vmov.f32	s15, s11
			for (i = 0; i < WIN_SIZE; i++, curr_idx++)
  403594:	9b07      	ldr	r3, [sp, #28]
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  403596:	eee7 5a23 	vfma.f32	s11, s14, s7
			for (i = 0; i < WIN_SIZE; i++, curr_idx++)
  40359a:	459a      	cmp	sl, r3
				out_buffer[i] += reverb_volume * 0.25f * 
  40359c:	eee6 7a86 	vfma.f32	s15, s13, s12
				delay_circ_buffer[curr_idx & CIRC_MASK] = out_buffer[i] + delay_feedback * delay_circ_buffer[(curr_idx - delay_speed)  & CIRC_MASK];	
  4035a0:	edc2 5a00 	vstr	s11, [r2]
				out_buffer[i] += reverb_volume * 0.25f * 
  4035a4:	eee5 7a84 	vfma.f32	s15, s11, s8
  4035a8:	ece4 7a01 	vstmia	r4!, {s15}
			for (i = 0; i < WIN_SIZE; i++, curr_idx++)
  4035ac:	f47f af21 	bne.w	4033f2 <main+0x97a>
			}
	
			// scale output 
			arm_scale_f32(out_buffer, (float)INT16_MAX * master_volume, out_buffer, WIN_SIZE);
  4035b0:	4b4d      	ldr	r3, [pc, #308]	; (4036e8 <main+0xc70>)
  4035b2:	eddf 7a4e 	vldr	s15, [pc, #312]	; 4036ec <main+0xc74>
  4035b6:	ed93 7a00 	vldr	s14, [r3]
  4035ba:	f44f 7300 	mov.w	r3, #512	; 0x200
  4035be:	4a32      	ldr	r2, [pc, #200]	; (403688 <main+0xc10>)
  4035c0:	ee67 7a27 	vmul.f32	s15, s14, s15
  4035c4:	4c4a      	ldr	r4, [pc, #296]	; (4036f0 <main+0xc78>)
  4035c6:	4610      	mov	r0, r2
  4035c8:	9509      	str	r5, [sp, #36]	; 0x24
  4035ca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4035cc:	ee17 1a90 	vmov	r1, s15
  4035d0:	47a0      	blx	r4
  4035d2:	f06f 0401 	mvn.w	r4, #1
  4035d6:	4b2c      	ldr	r3, [pc, #176]	; (403688 <main+0xc10>)
  4035d8:	1ae4      	subs	r4, r4, r3
  4035da:	46a6      	mov	lr, r4
  4035dc:	4a2a      	ldr	r2, [pc, #168]	; (403688 <main+0xc10>)
			// Sound out 
			uint32_t idx = 0; 
			for(i = 0; i < IO_BUF_SIZE; i+=2)
			{
				sound_out[i] = (uint16_t)(int16_t)(out_buffer[idx++]);  
				sound_out[i+1] = sound_out[i]; 
  4035de:	f8db 1000 	ldr.w	r1, [fp]
  4035e2:	1a98      	subs	r0, r3, r2
				sound_out[i] = (uint16_t)(int16_t)(out_buffer[idx++]);  
  4035e4:	ecf3 7a01 	vldmia	r3!, {s15}
  4035e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
				sound_out[i+1] = sound_out[i]; 
  4035ec:	eb0e 0603 	add.w	r6, lr, r3
			for(i = 0; i < IO_BUF_SIZE; i+=2)
  4035f0:	42ab      	cmp	r3, r5
				sound_out[i] = (uint16_t)(int16_t)(out_buffer[idx++]);  
  4035f2:	edcd 7a05 	vstr	s15, [sp, #20]
  4035f6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  4035fa:	520a      	strh	r2, [r1, r0]
				sound_out[i+1] = sound_out[i]; 
  4035fc:	5a0a      	ldrh	r2, [r1, r0]
  4035fe:	b292      	uxth	r2, r2
  403600:	538a      	strh	r2, [r1, r6]
			for(i = 0; i < IO_BUF_SIZE; i+=2)
  403602:	d1eb      	bne.n	4035dc <main+0xb64>
  403604:	9b08      	ldr	r3, [sp, #32]
  403606:	3301      	adds	r3, #1
  403608:	9308      	str	r3, [sp, #32]
  40360a:	f7ff bae7 	b.w	402bdc <main+0x164>
		if (d2 <= d1)
  40360e:	4611      	mov	r1, r2
	while (lo < hi)
  403610:	4299      	cmp	r1, r3
  403612:	f080 8186 	bcs.w	403922 <main+0xeaa>
  403616:	18c8      	adds	r0, r1, r3
  403618:	461c      	mov	r4, r3
  40361a:	460a      	mov	r2, r1
  40361c:	4935      	ldr	r1, [pc, #212]	; (4036f4 <main+0xc7c>)
  40361e:	0843      	lsrs	r3, r0, #1
  403620:	eef0 9a66 	vmov.f32	s19, s13
  403624:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  403628:	edd1 7a01 	vldr	s15, [r1, #4]
  40362c:	edd1 6a00 	vldr	s13, [r1]
  403630:	f7ff baf1 	b.w	402c16 <main+0x19e>
				create_harmonies(processBuffer, out_buffer, inputPitch, harmony_shifts, (float)harm_volume, *autotune, (float)dry_volume);
  403634:	4a12      	ldr	r2, [pc, #72]	; (403680 <main+0xc08>)
				harmony_shifts[0] = 1.0f; 
  403636:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
				harmony_shifts[1] = END_OF_SHIFTS; 
  40363a:	4c12      	ldr	r4, [pc, #72]	; (403684 <main+0xc0c>)
				create_harmonies(processBuffer, out_buffer, inputPitch, harmony_shifts, (float)harm_volume, *autotune, (float)dry_volume);
  40363c:	6812      	ldr	r2, [r2, #0]
				harmony_shifts[0] = 1.0f; 
  40363e:	9030      	str	r0, [sp, #192]	; 0xc0
				create_harmonies(processBuffer, out_buffer, inputPitch, harmony_shifts, (float)harm_volume, *autotune, (float)dry_volume);
  403640:	9300      	str	r3, [sp, #0]
  403642:	ab30      	add	r3, sp, #192	; 0xc0
  403644:	9202      	str	r2, [sp, #8]
  403646:	ee18 2a10 	vmov	r2, s16
				harmony_shifts[1] = END_OF_SHIFTS; 
  40364a:	9431      	str	r4, [sp, #196]	; 0xc4
				create_harmonies(processBuffer, out_buffer, inputPitch, harmony_shifts, (float)harm_volume, *autotune, (float)dry_volume);
  40364c:	edcd 7a01 	vstr	s15, [sp, #4]
  403650:	490d      	ldr	r1, [pc, #52]	; (403688 <main+0xc10>)
  403652:	480e      	ldr	r0, [pc, #56]	; (40368c <main+0xc14>)
  403654:	4c0e      	ldr	r4, [pc, #56]	; (403690 <main+0xc18>)
  403656:	47a0      	blx	r4
				arm_scale_f32(processBuffer, (float)dry_volume, out_buffer, WIN_SIZE); 
  403658:	4b09      	ldr	r3, [pc, #36]	; (403680 <main+0xc08>)
  40365a:	4a0b      	ldr	r2, [pc, #44]	; (403688 <main+0xc10>)
  40365c:	6819      	ldr	r1, [r3, #0]
  40365e:	f44f 7300 	mov.w	r3, #512	; 0x200
  403662:	480a      	ldr	r0, [pc, #40]	; (40368c <main+0xc14>)
  403664:	4c22      	ldr	r4, [pc, #136]	; (4036f0 <main+0xc78>)
  403666:	47a0      	blx	r4
  403668:	e69b      	b.n	4033a2 <main+0x92a>
  40366a:	4b0a      	ldr	r3, [pc, #40]	; (403694 <main+0xc1c>)
  40366c:	4674      	mov	r4, lr
			} else chord_freqs[chord_idx].active = false;
  40366e:	f88d 20bc 	strb.w	r2, [sp, #188]	; 0xbc
  403672:	7a1b      	ldrb	r3, [r3, #8]
  403674:	ed9d 1a2e 	vldr	s2, [sp, #184]	; 0xb8
  403678:	b2db      	uxtb	r3, r3
  40367a:	ee0a 3a10 	vmov	s20, r3
  40367e:	e573      	b.n	403168 <main+0x6f0>
  403680:	20400034 	.word	0x20400034
  403684:	bf800000 	.word	0xbf800000
  403688:	2043c000 	.word	0x2043c000
  40368c:	2043d400 	.word	0x2043d400
  403690:	00400dd1 	.word	0x00400dd1
  403694:	20415114 	.word	0x20415114
  403698:	2043c800 	.word	0x2043c800
  40369c:	20400028 	.word	0x20400028
  4036a0:	47389200 	.word	0x47389200
  4036a4:	390b6fde 	.word	0x390b6fde
  4036a8:	3b449ba6 	.word	0x3b449ba6
  4036ac:	3c03126f 	.word	0x3c03126f
  4036b0:	3e4ccccd 	.word	0x3e4ccccd
  4036b4:	20415120 	.word	0x20415120
  4036b8:	00404451 	.word	0x00404451
  4036bc:	2043c804 	.word	0x2043c804
  4036c0:	20428000 	.word	0x20428000
  4036c4:	004043a9 	.word	0x004043a9
  4036c8:	3fe00000 	.word	0x3fe00000
  4036cc:	004040e9 	.word	0x004040e9
  4036d0:	3ff00000 	.word	0x3ff00000
  4036d4:	00404875 	.word	0x00404875
  4036d8:	00403c11 	.word	0x00403c11
  4036dc:	20418000 	.word	0x20418000
  4036e0:	20400030 	.word	0x20400030
  4036e4:	2040002c 	.word	0x2040002c
  4036e8:	20400040 	.word	0x20400040
  4036ec:	46fffe00 	.word	0x46fffe00
  4036f0:	00403c99 	.word	0x00403c99
  4036f4:	00407760 	.word	0x00407760
				scale_correct_history[scale_correct_idx++ & SCALE_CORRECT_HISTORY_MASK] = SCALE_NONE;
  4036f8:	f005 0307 	and.w	r3, r5, #7
  4036fc:	a944      	add	r1, sp, #272	; 0x110
  4036fe:	2200      	movs	r2, #0
			float scale_pitch = closest_note_freq;
  403700:	eeb0 9a69 	vmov.f32	s18, s19
				scale_correct_history[scale_correct_idx++ & SCALE_CORRECT_HISTORY_MASK] = SCALE_NONE;
  403704:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  403708:	f843 2cb0 	str.w	r2, [r3, #-176]
				scale_step += major[i];
  40370c:	9b11      	ldr	r3, [sp, #68]	; 0x44
				if (number_of_semitones_from_root == scale_step)
  40370e:	429e      	cmp	r6, r3
  403710:	f47f ab39 	bne.w	402d86 <main+0x30e>
			if (*autotune)
  403714:	4b8b      	ldr	r3, [pc, #556]	; (403944 <main+0xecc>)
				if (number_of_semitones_from_root == scale_step)
  403716:	2101      	movs	r1, #1
			if (*autotune)
  403718:	7a1b      	ldrb	r3, [r3, #8]
  40371a:	2b00      	cmp	r3, #0
  40371c:	f47f ab52 	bne.w	402dc4 <main+0x34c>
			if(chord_harmonies[chord_idx] == true)
  403720:	4a88      	ldr	r2, [pc, #544]	; (403944 <main+0xecc>)
  403722:	7812      	ldrb	r2, [r2, #0]
  403724:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  403728:	2a00      	cmp	r2, #0
  40372a:	d171      	bne.n	403810 <main+0xd98>
			num_of_shifts = 0; 
  40372c:	9005      	str	r0, [sp, #20]
			dry_freq = inputPitch; 
  40372e:	eef0 6a48 	vmov.f32	s13, s16
  403732:	f7ff bb7d 	b.w	402e30 <main+0x3b8>
				float hi_avg = 0.5f * (midi_note_frequencies[closest_note_number] + midi_note_frequencies[closest_note_number+1]);
  403736:	4b84      	ldr	r3, [pc, #528]	; (403948 <main+0xed0>)
				hi_avg = 0.5f * (hi_avg + midi_note_frequencies[closest_note_number]); 
  403738:	eef0 6a69 	vmov.f32	s13, s19
				float hi_avg = 0.5f * (midi_note_frequencies[closest_note_number] + midi_note_frequencies[closest_note_number+1]);
  40373c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
  403740:	ed93 aa01 	vldr	s20, [r3, #4]
  403744:	ee3a 7a29 	vadd.f32	s14, s20, s19
				hi_avg = 0.5f * (hi_avg + midi_note_frequencies[closest_note_number]); 
  403748:	eee7 6a27 	vfma.f32	s13, s14, s15
  40374c:	ee66 7aa7 	vmul.f32	s15, s13, s15
				else if (inputPitch > hi_avg)
  403750:	eef4 7ac8 	vcmpe.f32	s15, s16
  403754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403758:	f140 80aa 	bpl.w	4038b0 <main+0xe38>
					scale_correct_history[scale_correct_idx++ & SCALE_CORRECT_HISTORY_MASK] = SCALE_UP;
  40375c:	f005 0307 	and.w	r3, r5, #7
						scale_correct_history[scale_correct_idx++ & SCALE_CORRECT_HISTORY_MASK] = SCALE_UP;
  403760:	a944      	add	r1, sp, #272	; 0x110
  403762:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
						number_of_semitones_from_root +=1;
  403766:	3601      	adds	r6, #1
						scale_pitch = midi_note_frequencies[closest_note_number + 1];
  403768:	eeb0 9a4a 	vmov.f32	s18, s20
						scale_correct_history[scale_correct_idx++ & SCALE_CORRECT_HISTORY_MASK] = SCALE_UP;
  40376c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  403770:	f843 2cb0 	str.w	r2, [r3, #-176]
  403774:	f7ff bb03 	b.w	402d7e <main+0x306>
	return 1.0/result;
  403778:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  40377c:	eec7 7a27 	vdiv.f32	s15, s14, s15
  403780:	e44b      	b.n	40301a <main+0x5a2>
				desired_pitch = scale_pitch; 
  403782:	eef0 6a49 	vmov.f32	s13, s18
  403786:	f7ff bb44 	b.w	402e12 <main+0x39a>
					desired_pitch = scale_pitch*powerf(1.059463094359f, -12);
  40378a:	eddf 7a70 	vldr	s15, [pc, #448]	; 40394c <main+0xed4>
  40378e:	2302      	movs	r3, #2
  403790:	ee69 7a27 	vmul.f32	s15, s18, s15
  403794:	9305      	str	r3, [sp, #20]
				num_of_shifts++; 
  403796:	2301      	movs	r3, #1
				if (pitch_bend < 56 || pitch_bend > 72)
  403798:	4a6d      	ldr	r2, [pc, #436]	; (403950 <main+0xed8>)
  40379a:	6812      	ldr	r2, [r2, #0]
  40379c:	2a37      	cmp	r2, #55	; 0x37
  40379e:	d903      	bls.n	4037a8 <main+0xd30>
  4037a0:	4a6b      	ldr	r2, [pc, #428]	; (403950 <main+0xed8>)
  4037a2:	6812      	ldr	r2, [r2, #0]
  4037a4:	2a48      	cmp	r2, #72	; 0x48
  4037a6:	d91a      	bls.n	4037de <main+0xd66>
					bend_pitch(&desired_pitch, closest_note_number, (uint32_t)pitch_bend);
  4037a8:	4a69      	ldr	r2, [pc, #420]	; (403950 <main+0xed8>)
  4037aa:	6812      	ldr	r2, [r2, #0]
	if (pitch_idx < 0 || pitch_idx > 127 || bend < 0 || bend > 127)
  4037ac:	2a7f      	cmp	r2, #127	; 0x7f
  4037ae:	d816      	bhi.n	4037de <main+0xd66>
	if (pitch_bend > 64)
  4037b0:	4a67      	ldr	r2, [pc, #412]	; (403950 <main+0xed8>)
  4037b2:	6812      	ldr	r2, [r2, #0]
  4037b4:	2a40      	cmp	r2, #64	; 0x40
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  4037b6:	4a66      	ldr	r2, [pc, #408]	; (403950 <main+0xed8>)
  4037b8:	ed92 7a00 	vldr	s14, [r2]
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  4037bc:	4a62      	ldr	r2, [pc, #392]	; (403948 <main+0xed0>)
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  4037be:	eeb8 7a47 	vcvt.f32.u32	s14, s14
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  4037c2:	eb02 0284 	add.w	r2, r2, r4, lsl #2
	if (pitch_bend > 64)
  4037c6:	f200 8094 	bhi.w	4038f2 <main+0xe7a>
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  4037ca:	ee37 7a4b 	vsub.f32	s14, s14, s22
		bend_difference = midi_note_frequencies[pitch_idx] - midi_note_frequencies[pitch_idx-2];
  4037ce:	ed12 6a02 	vldr	s12, [r2, #-8]
  4037d2:	ee39 6ac6 	vsub.f32	s12, s19, s12
		*pitch += (((float)pitch_bend - 64.0f) * ONE_OVER_64) * bend_difference;
  4037d6:	ee27 7a2a 	vmul.f32	s14, s14, s21
  4037da:	eee7 7a06 	vfma.f32	s15, s14, s12
				harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  4037de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
				chord_freqs[chord_idx].freq = desired_pitch;
  4037e2:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
				harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  4037e6:	ee37 6ac8 	vsub.f32	s12, s15, s16
  4037ea:	aa44      	add	r2, sp, #272	; 0x110
  4037ec:	eef0 7a47 	vmov.f32	s15, s14
  4037f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
				chord_freqs[chord_idx].active = true;
  4037f4:	2201      	movs	r2, #1
				harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  4037f6:	eee8 7a86 	vfma.f32	s15, s17, s12
				chord_freqs[chord_idx].active = true;
  4037fa:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
				harmony_shifts[num_of_shifts++] = 1.0f - (inputPitch-desired_pitch)*oneOverInputPitch;
  4037fe:	ed43 7a14 	vstr	s15, [r3, #-80]	; 0xffffffb0
  403802:	f7ff bb18 	b.w	402e36 <main+0x3be>
					desired_pitch = scale_pitch*powerf(1.059463094359f, 12);
  403806:	eddf 9a53 	vldr	s19, [pc, #332]	; 403954 <main+0xedc>
  40380a:	ee29 9a29 	vmul.f32	s18, s18, s19
  40380e:	e472      	b.n	4030f6 <main+0x67e>
					desired_pitch = closest_note_freq*powerf(1.059463094359f, -12);
  403810:	eddf 7a4e 	vldr	s15, [pc, #312]	; 40394c <main+0xed4>
  403814:	2201      	movs	r2, #1
			dry_freq = inputPitch; 
  403816:	eef0 6a48 	vmov.f32	s13, s16
					desired_pitch = closest_note_freq*powerf(1.059463094359f, -12);
  40381a:	9205      	str	r2, [sp, #20]
  40381c:	ee69 7aa7 	vmul.f32	s15, s19, s15
  403820:	e7ba      	b.n	403798 <main+0xd20>
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  403822:	eeb8 7a47 	vcvt.f32.u32	s14, s14
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  403826:	9a05      	ldr	r2, [sp, #20]
  403828:	ed93 6a00 	vldr	s12, [r3]
  40382c:	edd2 5a00 	vldr	s11, [r2]
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  403830:	ee37 7a6b 	vsub.f32	s14, s14, s23
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  403834:	ee35 6ac6 	vsub.f32	s12, s11, s12
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  403838:	ee27 7a2a 	vmul.f32	s14, s14, s21
  40383c:	eee6 7a07 	vfma.f32	s15, s12, s14
  403840:	e413      	b.n	40306a <main+0x5f2>
  403842:	eeb8 6a46 	vcvt.f32.u32	s12, s12
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  403846:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  40384a:	edd2 4a02 	vldr	s9, [r2, #8]
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  40384e:	ee36 6a6b 	vsub.f32	s12, s12, s23
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  403852:	ed92 5a00 	vldr	s10, [r2]
  403856:	ee34 5ac5 	vsub.f32	s10, s9, s10
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  40385a:	ee26 6a2a 	vmul.f32	s12, s12, s21
  40385e:	eee6 7a05 	vfma.f32	s15, s12, s10
  403862:	f7ff bb58 	b.w	402f16 <main+0x49e>
  403866:	ee75 5aeb 	vsub.f32	s11, s11, s23
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  40386a:	ed91 9a02 	vldr	s18, [r1, #8]
  40386e:	ed91 0a00 	vldr	s0, [r1]
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  403872:	ee65 5aaa 	vmul.f32	s11, s11, s21
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  403876:	ee39 0a40 	vsub.f32	s0, s18, s0
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  40387a:	eee5 7a80 	vfma.f32	s15, s11, s0
  40387e:	e548      	b.n	403312 <main+0x89a>
					arm_scale_f32(processBuffer, (float)dry_volume, processBuffer, WIN_SIZE);
  403880:	4a35      	ldr	r2, [pc, #212]	; (403958 <main+0xee0>)
  403882:	4b36      	ldr	r3, [pc, #216]	; (40395c <main+0xee4>)
  403884:	4610      	mov	r0, r2
  403886:	4c36      	ldr	r4, [pc, #216]	; (403960 <main+0xee8>)
  403888:	6819      	ldr	r1, [r3, #0]
  40388a:	f44f 7300 	mov.w	r3, #512	; 0x200
  40388e:	47a0      	blx	r4
					arm_add_f32(out_buffer, processBuffer, out_buffer, WIN_SIZE);
  403890:	4a34      	ldr	r2, [pc, #208]	; (403964 <main+0xeec>)
  403892:	f44f 7300 	mov.w	r3, #512	; 0x200
  403896:	4930      	ldr	r1, [pc, #192]	; (403958 <main+0xee0>)
  403898:	4610      	mov	r0, r2
  40389a:	4c33      	ldr	r4, [pc, #204]	; (403968 <main+0xef0>)
  40389c:	47a0      	blx	r4
					arm_scale_f32(out_buffer, 0.5f, out_buffer, WIN_SIZE);
  40389e:	4a31      	ldr	r2, [pc, #196]	; (403964 <main+0xeec>)
  4038a0:	f44f 7300 	mov.w	r3, #512	; 0x200
  4038a4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  4038a8:	4610      	mov	r0, r2
  4038aa:	4c2d      	ldr	r4, [pc, #180]	; (403960 <main+0xee8>)
  4038ac:	47a0      	blx	r4
  4038ae:	e578      	b.n	4033a2 <main+0x92a>
					float avg_direction = 0.0f; 
  4038b0:	2300      	movs	r3, #0
					arm_mean_f32(scale_correct_history, SCALE_CORRECT_HISTORY_SIZE, &avg_direction); 
  4038b2:	aa0d      	add	r2, sp, #52	; 0x34
  4038b4:	2108      	movs	r1, #8
  4038b6:	a818      	add	r0, sp, #96	; 0x60
					float avg_direction = 0.0f; 
  4038b8:	930d      	str	r3, [sp, #52]	; 0x34
					arm_mean_f32(scale_correct_history, SCALE_CORRECT_HISTORY_SIZE, &avg_direction); 
  4038ba:	4b2c      	ldr	r3, [pc, #176]	; (40396c <main+0xef4>)
  4038bc:	4798      	blx	r3
					if(avg_direction < 0.0f)
  4038be:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
						scale_correct_history[scale_correct_idx++ & SCALE_CORRECT_HISTORY_MASK] = SCALE_DOWN;
  4038c2:	f005 0307 	and.w	r3, r5, #7
					if(avg_direction < 0.0f)
  4038c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  4038ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4038ce:	f57f af47 	bpl.w	403760 <main+0xce8>
  4038d2:	f7ff ba4d 	b.w	402d70 <main+0x2f8>
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  4038d6:	ee77 7aeb 	vsub.f32	s15, s15, s23
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  4038da:	ed93 7a02 	vldr	s14, [r3, #8]
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  4038de:	eef0 6a49 	vmov.f32	s13, s18
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  4038e2:	ee37 7a69 	vsub.f32	s14, s14, s19
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  4038e6:	ee67 7aaa 	vmul.f32	s15, s15, s21
  4038ea:	eee7 6a87 	vfma.f32	s13, s15, s14
  4038ee:	f7ff ba90 	b.w	402e12 <main+0x39a>
  4038f2:	ee37 7a6b 	vsub.f32	s14, s14, s23
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  4038f6:	ed92 6a02 	vldr	s12, [r2, #8]
  4038fa:	ee36 6a69 	vsub.f32	s12, s12, s19
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  4038fe:	ee27 7a2a 	vmul.f32	s14, s14, s21
  403902:	eee6 7a07 	vfma.f32	s15, s12, s14
  403906:	e76a      	b.n	4037de <main+0xd66>
  403908:	ee77 7aeb 	vsub.f32	s15, s15, s23
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  40390c:	ed93 6a02 	vldr	s12, [r3, #8]
  403910:	ed93 7a00 	vldr	s14, [r3]
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  403914:	ee67 7aaa 	vmul.f32	s15, s15, s21
		bend_difference = midi_note_frequencies[pitch_idx+2] - midi_note_frequencies[pitch_idx];
  403918:	ee36 7a47 	vsub.f32	s14, s12, s14
		*pitch += (((float)pitch_bend - 63.0f) * ONE_OVER_64) * bend_difference;
  40391c:	eea7 9a27 	vfma.f32	s18, s14, s15
  403920:	e40e      	b.n	403140 <main+0x6c8>
	while (lo < hi)
  403922:	eef0 9a66 	vmov.f32	s19, s13
  403926:	461c      	mov	r4, r3
  403928:	f7ff b9ec 	b.w	402d04 <main+0x28c>
				if (number_of_semitones_from_root == scale_step)
  40392c:	2103      	movs	r1, #3
  40392e:	f7ff ba44 	b.w	402dba <main+0x342>
  403932:	2102      	movs	r1, #2
  403934:	f7ff ba41 	b.w	402dba <main+0x342>
  403938:	2105      	movs	r1, #5
  40393a:	f7ff ba3e 	b.w	402dba <main+0x342>
  40393e:	2104      	movs	r1, #4
  403940:	f7ff ba3b 	b.w	402dba <main+0x342>
  403944:	20415114 	.word	0x20415114
  403948:	00407760 	.word	0x00407760
  40394c:	3efffff5 	.word	0x3efffff5
  403950:	20400044 	.word	0x20400044
  403954:	40000005 	.word	0x40000005
  403958:	2043d400 	.word	0x2043d400
  40395c:	20400034 	.word	0x20400034
  403960:	00403c99 	.word	0x00403c99
  403964:	2043c000 	.word	0x2043c000
  403968:	00403d05 	.word	0x00403d05
  40396c:	00403ad1 	.word	0x00403ad1

00403970 <arm_fill_f32>:
  403970:	b430      	push	{r4, r5}
  403972:	0895      	lsrs	r5, r2, #2
  403974:	d00b      	beq.n	40398e <arm_fill_f32+0x1e>
  403976:	460b      	mov	r3, r1
  403978:	462c      	mov	r4, r5
  40397a:	3c01      	subs	r4, #1
  40397c:	6018      	str	r0, [r3, #0]
  40397e:	6058      	str	r0, [r3, #4]
  403980:	6098      	str	r0, [r3, #8]
  403982:	60d8      	str	r0, [r3, #12]
  403984:	f103 0310 	add.w	r3, r3, #16
  403988:	d1f7      	bne.n	40397a <arm_fill_f32+0xa>
  40398a:	eb01 1105 	add.w	r1, r1, r5, lsl #4
  40398e:	f012 0203 	ands.w	r2, r2, #3
  403992:	d003      	beq.n	40399c <arm_fill_f32+0x2c>
  403994:	3a01      	subs	r2, #1
  403996:	f841 0b04 	str.w	r0, [r1], #4
  40399a:	d1fb      	bne.n	403994 <arm_fill_f32+0x24>
  40399c:	bc30      	pop	{r4, r5}
  40399e:	4770      	bx	lr

004039a0 <arm_copy_f32>:
  4039a0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  4039a4:	ea5f 0992 	movs.w	r9, r2, lsr #2
  4039a8:	d018      	beq.n	4039dc <arm_copy_f32+0x3c>
  4039aa:	4604      	mov	r4, r0
  4039ac:	460b      	mov	r3, r1
  4039ae:	464d      	mov	r5, r9
  4039b0:	f8d4 8000 	ldr.w	r8, [r4]
  4039b4:	f8d4 c004 	ldr.w	ip, [r4, #4]
  4039b8:	68a7      	ldr	r7, [r4, #8]
  4039ba:	68e6      	ldr	r6, [r4, #12]
  4039bc:	3d01      	subs	r5, #1
  4039be:	f8c3 8000 	str.w	r8, [r3]
  4039c2:	f8c3 c004 	str.w	ip, [r3, #4]
  4039c6:	609f      	str	r7, [r3, #8]
  4039c8:	60de      	str	r6, [r3, #12]
  4039ca:	f104 0410 	add.w	r4, r4, #16
  4039ce:	f103 0310 	add.w	r3, r3, #16
  4039d2:	d1ed      	bne.n	4039b0 <arm_copy_f32+0x10>
  4039d4:	ea4f 1909 	mov.w	r9, r9, lsl #4
  4039d8:	4448      	add	r0, r9
  4039da:	4449      	add	r1, r9
  4039dc:	f012 0203 	ands.w	r2, r2, #3
  4039e0:	d005      	beq.n	4039ee <arm_copy_f32+0x4e>
  4039e2:	f850 3b04 	ldr.w	r3, [r0], #4
  4039e6:	3a01      	subs	r2, #1
  4039e8:	f841 3b04 	str.w	r3, [r1], #4
  4039ec:	d1f9      	bne.n	4039e2 <arm_copy_f32+0x42>
  4039ee:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
  4039f2:	4770      	bx	lr

004039f4 <arm_min_f32>:
  4039f4:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  4039f8:	f101 3cff 	add.w	ip, r1, #4294967295
  4039fc:	ea5f 099c 	movs.w	r9, ip, lsr #2
  403a00:	f100 0704 	add.w	r7, r0, #4
  403a04:	edd0 7a00 	vldr	s15, [r0]
  403a08:	d05c      	beq.n	403ac4 <arm_min_f32+0xd0>
  403a0a:	463c      	mov	r4, r7
  403a0c:	464e      	mov	r6, r9
  403a0e:	2004      	movs	r0, #4
  403a10:	2500      	movs	r5, #0
  403a12:	edd4 6a00 	vldr	s13, [r4]
  403a16:	eef4 6ae7 	vcmpe.f32	s13, s15
  403a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403a1e:	ed94 7a01 	vldr	s14, [r4, #4]
  403a22:	bf48      	it	mi
  403a24:	eef0 7a66 	vmovmi.f32	s15, s13
  403a28:	eef4 7ac7 	vcmpe.f32	s15, s14
  403a2c:	f1a0 0803 	sub.w	r8, r0, #3
  403a30:	bf48      	it	mi
  403a32:	4645      	movmi	r5, r8
  403a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403a38:	edd4 6a02 	vldr	s13, [r4, #8]
  403a3c:	bfc8      	it	gt
  403a3e:	eef0 7a47 	vmovgt.f32	s15, s14
  403a42:	eef4 7ae6 	vcmpe.f32	s15, s13
  403a46:	f1a0 0802 	sub.w	r8, r0, #2
  403a4a:	bfc8      	it	gt
  403a4c:	4645      	movgt	r5, r8
  403a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403a52:	ed94 7a03 	vldr	s14, [r4, #12]
  403a56:	bfc8      	it	gt
  403a58:	eef0 7a66 	vmovgt.f32	s15, s13
  403a5c:	eef4 7ac7 	vcmpe.f32	s15, s14
  403a60:	f100 38ff 	add.w	r8, r0, #4294967295
  403a64:	bfc8      	it	gt
  403a66:	4645      	movgt	r5, r8
  403a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403a6c:	bfc8      	it	gt
  403a6e:	4605      	movgt	r5, r0
  403a70:	bfc8      	it	gt
  403a72:	eef0 7a47 	vmovgt.f32	s15, s14
  403a76:	3e01      	subs	r6, #1
  403a78:	f104 0410 	add.w	r4, r4, #16
  403a7c:	f100 0004 	add.w	r0, r0, #4
  403a80:	d1c7      	bne.n	403a12 <arm_min_f32+0x1e>
  403a82:	eb07 1709 	add.w	r7, r7, r9, lsl #4
  403a86:	f01c 0c03 	ands.w	ip, ip, #3
  403a8a:	d01d      	beq.n	403ac8 <arm_min_f32+0xd4>
  403a8c:	ebcc 0101 	rsb	r1, ip, r1
  403a90:	2000      	movs	r0, #0
  403a92:	ecb7 7a01 	vldmia	r7!, {s14}
  403a96:	eeb4 7ae7 	vcmpe.f32	s14, s15
  403a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403a9e:	bf48      	it	mi
  403aa0:	eef0 7a47 	vmovmi.f32	s15, s14
  403aa4:	eb01 0400 	add.w	r4, r1, r0
  403aa8:	f100 0001 	add.w	r0, r0, #1
  403aac:	bf48      	it	mi
  403aae:	4625      	movmi	r5, r4
  403ab0:	4560      	cmp	r0, ip
  403ab2:	eeb0 7a67 	vmov.f32	s14, s15
  403ab6:	d1ec      	bne.n	403a92 <arm_min_f32+0x9e>
  403ab8:	ed82 7a00 	vstr	s14, [r2]
  403abc:	601d      	str	r5, [r3, #0]
  403abe:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
  403ac2:	4770      	bx	lr
  403ac4:	464d      	mov	r5, r9
  403ac6:	e7de      	b.n	403a86 <arm_min_f32+0x92>
  403ac8:	eeb0 7a67 	vmov.f32	s14, s15
  403acc:	e7f4      	b.n	403ab8 <arm_min_f32+0xc4>
  403ace:	bf00      	nop

00403ad0 <arm_mean_f32>:
  403ad0:	b430      	push	{r4, r5}
  403ad2:	088d      	lsrs	r5, r1, #2
  403ad4:	eddf 7a16 	vldr	s15, [pc, #88]	; 403b30 <arm_mean_f32+0x60>
  403ad8:	d017      	beq.n	403b0a <arm_mean_f32+0x3a>
  403ada:	4603      	mov	r3, r0
  403adc:	462c      	mov	r4, r5
  403ade:	edd3 6a00 	vldr	s13, [r3]
  403ae2:	ed93 7a01 	vldr	s14, [r3, #4]
  403ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
  403aea:	edd3 6a02 	vldr	s13, [r3, #8]
  403aee:	ee77 7a87 	vadd.f32	s15, s15, s14
  403af2:	ed93 7a03 	vldr	s14, [r3, #12]
  403af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
  403afa:	3c01      	subs	r4, #1
  403afc:	f103 0310 	add.w	r3, r3, #16
  403b00:	ee77 7a87 	vadd.f32	s15, s15, s14
  403b04:	d1eb      	bne.n	403ade <arm_mean_f32+0xe>
  403b06:	eb00 1005 	add.w	r0, r0, r5, lsl #4
  403b0a:	f011 0303 	ands.w	r3, r1, #3
  403b0e:	d005      	beq.n	403b1c <arm_mean_f32+0x4c>
  403b10:	ecb0 7a01 	vldmia	r0!, {s14}
  403b14:	3b01      	subs	r3, #1
  403b16:	ee77 7a87 	vadd.f32	s15, s15, s14
  403b1a:	d1f9      	bne.n	403b10 <arm_mean_f32+0x40>
  403b1c:	ee06 1a90 	vmov	s13, r1
  403b20:	bc30      	pop	{r4, r5}
  403b22:	eeb8 7a66 	vcvt.f32.u32	s14, s13
  403b26:	eec7 7a87 	vdiv.f32	s15, s15, s14
  403b2a:	edc2 7a00 	vstr	s15, [r2]
  403b2e:	4770      	bx	lr
  403b30:	00000000 	.word	0x00000000

00403b34 <arm_max_f32>:
  403b34:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  403b38:	f101 3cff 	add.w	ip, r1, #4294967295
  403b3c:	ea5f 099c 	movs.w	r9, ip, lsr #2
  403b40:	f100 0704 	add.w	r7, r0, #4
  403b44:	edd0 7a00 	vldr	s15, [r0]
  403b48:	d05c      	beq.n	403c04 <arm_max_f32+0xd0>
  403b4a:	463c      	mov	r4, r7
  403b4c:	464e      	mov	r6, r9
  403b4e:	2004      	movs	r0, #4
  403b50:	2500      	movs	r5, #0
  403b52:	edd4 6a00 	vldr	s13, [r4]
  403b56:	eef4 6ae7 	vcmpe.f32	s13, s15
  403b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403b5e:	ed94 7a01 	vldr	s14, [r4, #4]
  403b62:	bfc8      	it	gt
  403b64:	eef0 7a66 	vmovgt.f32	s15, s13
  403b68:	eef4 7ac7 	vcmpe.f32	s15, s14
  403b6c:	f1a0 0803 	sub.w	r8, r0, #3
  403b70:	bfc8      	it	gt
  403b72:	4645      	movgt	r5, r8
  403b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403b78:	edd4 6a02 	vldr	s13, [r4, #8]
  403b7c:	bf48      	it	mi
  403b7e:	eef0 7a47 	vmovmi.f32	s15, s14
  403b82:	eef4 7ae6 	vcmpe.f32	s15, s13
  403b86:	f1a0 0802 	sub.w	r8, r0, #2
  403b8a:	bf48      	it	mi
  403b8c:	4645      	movmi	r5, r8
  403b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403b92:	ed94 7a03 	vldr	s14, [r4, #12]
  403b96:	bf48      	it	mi
  403b98:	eef0 7a66 	vmovmi.f32	s15, s13
  403b9c:	eef4 7ac7 	vcmpe.f32	s15, s14
  403ba0:	f100 38ff 	add.w	r8, r0, #4294967295
  403ba4:	bf48      	it	mi
  403ba6:	4645      	movmi	r5, r8
  403ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403bac:	bf48      	it	mi
  403bae:	4605      	movmi	r5, r0
  403bb0:	bf48      	it	mi
  403bb2:	eef0 7a47 	vmovmi.f32	s15, s14
  403bb6:	3e01      	subs	r6, #1
  403bb8:	f104 0410 	add.w	r4, r4, #16
  403bbc:	f100 0004 	add.w	r0, r0, #4
  403bc0:	d1c7      	bne.n	403b52 <arm_max_f32+0x1e>
  403bc2:	eb07 1709 	add.w	r7, r7, r9, lsl #4
  403bc6:	f01c 0c03 	ands.w	ip, ip, #3
  403bca:	d01d      	beq.n	403c08 <arm_max_f32+0xd4>
  403bcc:	ebcc 0101 	rsb	r1, ip, r1
  403bd0:	2000      	movs	r0, #0
  403bd2:	ecb7 7a01 	vldmia	r7!, {s14}
  403bd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
  403bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403bde:	bfc8      	it	gt
  403be0:	eef0 7a47 	vmovgt.f32	s15, s14
  403be4:	eb01 0400 	add.w	r4, r1, r0
  403be8:	f100 0001 	add.w	r0, r0, #1
  403bec:	bfc8      	it	gt
  403bee:	4625      	movgt	r5, r4
  403bf0:	4560      	cmp	r0, ip
  403bf2:	eeb0 7a67 	vmov.f32	s14, s15
  403bf6:	d1ec      	bne.n	403bd2 <arm_max_f32+0x9e>
  403bf8:	ed82 7a00 	vstr	s14, [r2]
  403bfc:	601d      	str	r5, [r3, #0]
  403bfe:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
  403c02:	4770      	bx	lr
  403c04:	464d      	mov	r5, r9
  403c06:	e7de      	b.n	403bc6 <arm_max_f32+0x92>
  403c08:	eeb0 7a67 	vmov.f32	s14, s15
  403c0c:	e7f4      	b.n	403bf8 <arm_max_f32+0xc4>
  403c0e:	bf00      	nop

00403c10 <arm_cos_f32>:
  403c10:	eddf 7a1e 	vldr	s15, [pc, #120]	; 403c8c <arm_cos_f32+0x7c>
  403c14:	ee06 0a90 	vmov	s13, r0
  403c18:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
  403c1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
  403c20:	ee77 7a87 	vadd.f32	s15, s15, s14
  403c24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  403c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403c2c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
  403c30:	d504      	bpl.n	403c3c <arm_cos_f32+0x2c>
  403c32:	ee17 3a10 	vmov	r3, s14
  403c36:	3b01      	subs	r3, #1
  403c38:	ee07 3a10 	vmov	s14, r3
  403c3c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  403c40:	eddf 6a13 	vldr	s13, [pc, #76]	; 403c90 <arm_cos_f32+0x80>
  403c44:	ee77 7ac7 	vsub.f32	s15, s15, s14
  403c48:	ee67 7aa6 	vmul.f32	s15, s15, s13
  403c4c:	eefc 6ae7 	vcvt.u32.f32	s13, s15
  403c50:	ee16 3a90 	vmov	r3, s13
  403c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
  403c58:	ee07 3a10 	vmov	s14, r3
  403c5c:	eef8 6a47 	vcvt.f32.u32	s13, s14
  403c60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  403c64:	ee77 7ae6 	vsub.f32	s15, s15, s13
  403c68:	4a0a      	ldr	r2, [pc, #40]	; (403c94 <arm_cos_f32+0x84>)
  403c6a:	ee37 7a67 	vsub.f32	s14, s14, s15
  403c6e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
  403c72:	ed91 6a00 	vldr	s12, [r1]
  403c76:	edd1 6a01 	vldr	s13, [r1, #4]
  403c7a:	ee27 7a06 	vmul.f32	s14, s14, s12
  403c7e:	ee67 7aa6 	vmul.f32	s15, s15, s13
  403c82:	ee77 7a27 	vadd.f32	s15, s14, s15
  403c86:	ee17 0a90 	vmov	r0, s15
  403c8a:	4770      	bx	lr
  403c8c:	3e22f983 	.word	0x3e22f983
  403c90:	44000000 	.word	0x44000000
  403c94:	00407960 	.word	0x00407960

00403c98 <arm_scale_f32>:
  403c98:	b470      	push	{r4, r5, r6}
  403c9a:	089e      	lsrs	r6, r3, #2
  403c9c:	ee07 1a90 	vmov	s15, r1
  403ca0:	d023      	beq.n	403cea <arm_scale_f32+0x52>
  403ca2:	4635      	mov	r5, r6
  403ca4:	4614      	mov	r4, r2
  403ca6:	4601      	mov	r1, r0
  403ca8:	edd1 5a00 	vldr	s11, [r1]
  403cac:	ed91 6a01 	vldr	s12, [r1, #4]
  403cb0:	edd1 6a02 	vldr	s13, [r1, #8]
  403cb4:	ed91 7a03 	vldr	s14, [r1, #12]
  403cb8:	ee65 5aa7 	vmul.f32	s11, s11, s15
  403cbc:	ee26 6a27 	vmul.f32	s12, s12, s15
  403cc0:	ee66 6aa7 	vmul.f32	s13, s13, s15
  403cc4:	ee27 7a27 	vmul.f32	s14, s14, s15
  403cc8:	3d01      	subs	r5, #1
  403cca:	edc4 5a00 	vstr	s11, [r4]
  403cce:	ed84 6a01 	vstr	s12, [r4, #4]
  403cd2:	edc4 6a02 	vstr	s13, [r4, #8]
  403cd6:	ed84 7a03 	vstr	s14, [r4, #12]
  403cda:	f101 0110 	add.w	r1, r1, #16
  403cde:	f104 0410 	add.w	r4, r4, #16
  403ce2:	d1e1      	bne.n	403ca8 <arm_scale_f32+0x10>
  403ce4:	0136      	lsls	r6, r6, #4
  403ce6:	4430      	add	r0, r6
  403ce8:	4432      	add	r2, r6
  403cea:	f013 0303 	ands.w	r3, r3, #3
  403cee:	d007      	beq.n	403d00 <arm_scale_f32+0x68>
  403cf0:	ecb0 7a01 	vldmia	r0!, {s14}
  403cf4:	ee27 7a27 	vmul.f32	s14, s14, s15
  403cf8:	3b01      	subs	r3, #1
  403cfa:	eca2 7a01 	vstmia	r2!, {s14}
  403cfe:	d1f7      	bne.n	403cf0 <arm_scale_f32+0x58>
  403d00:	bc70      	pop	{r4, r5, r6}
  403d02:	4770      	bx	lr

00403d04 <arm_add_f32>:
  403d04:	ea5f 0c93 	movs.w	ip, r3, lsr #2
  403d08:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
  403d0c:	d032      	beq.n	403d74 <arm_add_f32+0x70>
  403d0e:	4667      	mov	r7, ip
  403d10:	4614      	mov	r4, r2
  403d12:	460e      	mov	r6, r1
  403d14:	4605      	mov	r5, r0
  403d16:	46a8      	mov	r8, r5
  403d18:	edd8 5a00 	vldr	s11, [r8]
  403d1c:	46b0      	mov	r8, r6
  403d1e:	ed95 4a01 	vldr	s8, [r5, #4]
  403d22:	ed96 6a01 	vldr	s12, [r6, #4]
  403d26:	edd5 4a02 	vldr	s9, [r5, #8]
  403d2a:	edd6 6a02 	vldr	s13, [r6, #8]
  403d2e:	ed95 5a03 	vldr	s10, [r5, #12]
  403d32:	ed96 7a03 	vldr	s14, [r6, #12]
  403d36:	edd8 7a00 	vldr	s15, [r8]
  403d3a:	ee34 6a06 	vadd.f32	s12, s8, s12
  403d3e:	ee74 6aa6 	vadd.f32	s13, s9, s13
  403d42:	ee35 7a07 	vadd.f32	s14, s10, s14
  403d46:	ee75 7aa7 	vadd.f32	s15, s11, s15
  403d4a:	3f01      	subs	r7, #1
  403d4c:	ed84 6a01 	vstr	s12, [r4, #4]
  403d50:	edc4 6a02 	vstr	s13, [r4, #8]
  403d54:	ed84 7a03 	vstr	s14, [r4, #12]
  403d58:	edc4 7a00 	vstr	s15, [r4]
  403d5c:	f105 0510 	add.w	r5, r5, #16
  403d60:	f106 0610 	add.w	r6, r6, #16
  403d64:	f104 0410 	add.w	r4, r4, #16
  403d68:	d1d5      	bne.n	403d16 <arm_add_f32+0x12>
  403d6a:	ea4f 140c 	mov.w	r4, ip, lsl #4
  403d6e:	4420      	add	r0, r4
  403d70:	4421      	add	r1, r4
  403d72:	4422      	add	r2, r4
  403d74:	f013 0303 	ands.w	r3, r3, #3
  403d78:	d009      	beq.n	403d8e <arm_add_f32+0x8a>
  403d7a:	ecb0 7a01 	vldmia	r0!, {s14}
  403d7e:	ecf1 7a01 	vldmia	r1!, {s15}
  403d82:	ee77 7a27 	vadd.f32	s15, s14, s15
  403d86:	3b01      	subs	r3, #1
  403d88:	ece2 7a01 	vstmia	r2!, {s15}
  403d8c:	d1f5      	bne.n	403d7a <arm_add_f32+0x76>
  403d8e:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
  403d92:	4770      	bx	lr

00403d94 <log2f>:
  403d94:	b508      	push	{r3, lr}
  403d96:	f000 f80b 	bl	403db0 <logf>
  403d9a:	eddf 7a04 	vldr	s15, [pc, #16]	; 403dac <log2f+0x18>
  403d9e:	ee06 0a90 	vmov	s13, r0
  403da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  403da6:	ee17 0a10 	vmov	r0, s14
  403daa:	bd08      	pop	{r3, pc}
  403dac:	3f317218 	.word	0x3f317218

00403db0 <logf>:
  403db0:	b510      	push	{r4, lr}
  403db2:	ed2d 8b02 	vpush	{d8}
  403db6:	b08a      	sub	sp, #40	; 0x28
  403db8:	ee08 0a10 	vmov	s16, r0
  403dbc:	f000 f872 	bl	403ea4 <__ieee754_logf>
  403dc0:	4b33      	ldr	r3, [pc, #204]	; (403e90 <logf+0xe0>)
  403dc2:	f993 4000 	ldrsb.w	r4, [r3]
  403dc6:	1c63      	adds	r3, r4, #1
  403dc8:	d009      	beq.n	403dde <logf+0x2e>
  403dca:	eeb4 8a48 	vcmp.f32	s16, s16
  403dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403dd2:	d604      	bvs.n	403dde <logf+0x2e>
  403dd4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
  403dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403ddc:	dd03      	ble.n	403de6 <logf+0x36>
  403dde:	b00a      	add	sp, #40	; 0x28
  403de0:	ecbd 8b02 	vpop	{d8}
  403de4:	bd10      	pop	{r4, pc}
  403de6:	4b2b      	ldr	r3, [pc, #172]	; (403e94 <logf+0xe4>)
  403de8:	9301      	str	r3, [sp, #4]
  403dea:	ee18 0a10 	vmov	r0, s16
  403dee:	2300      	movs	r3, #0
  403df0:	9308      	str	r3, [sp, #32]
  403df2:	f000 fad9 	bl	4043a8 <__aeabi_f2d>
  403df6:	e9cd 0104 	strd	r0, r1, [sp, #16]
  403dfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403dfe:	b9cc      	cbnz	r4, 403e34 <logf+0x84>
  403e00:	4b25      	ldr	r3, [pc, #148]	; (403e98 <logf+0xe8>)
  403e02:	eeb5 8a40 	vcmp.f32	s16, #0.0
  403e06:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
  403e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403e0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  403e12:	d134      	bne.n	403e7e <logf+0xce>
  403e14:	2302      	movs	r3, #2
  403e16:	9300      	str	r3, [sp, #0]
  403e18:	4668      	mov	r0, sp
  403e1a:	f000 f959 	bl	4040d0 <matherr>
  403e1e:	b1b0      	cbz	r0, 403e4e <logf+0x9e>
  403e20:	9b08      	ldr	r3, [sp, #32]
  403e22:	b9cb      	cbnz	r3, 403e58 <logf+0xa8>
  403e24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  403e28:	f000 fd24 	bl	404874 <__aeabi_d2f>
  403e2c:	b00a      	add	sp, #40	; 0x28
  403e2e:	ecbd 8b02 	vpop	{d8}
  403e32:	bd10      	pop	{r4, pc}
  403e34:	4b19      	ldr	r3, [pc, #100]	; (403e9c <logf+0xec>)
  403e36:	eeb5 8a40 	vcmp.f32	s16, #0.0
  403e3a:	2200      	movs	r2, #0
  403e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403e40:	e9cd 2306 	strd	r2, r3, [sp, #24]
  403e44:	d10d      	bne.n	403e62 <logf+0xb2>
  403e46:	2302      	movs	r3, #2
  403e48:	429c      	cmp	r4, r3
  403e4a:	9300      	str	r3, [sp, #0]
  403e4c:	d1e4      	bne.n	403e18 <logf+0x68>
  403e4e:	f000 fd61 	bl	404914 <__errno>
  403e52:	2322      	movs	r3, #34	; 0x22
  403e54:	6003      	str	r3, [r0, #0]
  403e56:	e7e3      	b.n	403e20 <logf+0x70>
  403e58:	f000 fd5c 	bl	404914 <__errno>
  403e5c:	9b08      	ldr	r3, [sp, #32]
  403e5e:	6003      	str	r3, [r0, #0]
  403e60:	e7e0      	b.n	403e24 <logf+0x74>
  403e62:	2301      	movs	r3, #1
  403e64:	2c02      	cmp	r4, #2
  403e66:	9300      	str	r3, [sp, #0]
  403e68:	d10b      	bne.n	403e82 <logf+0xd2>
  403e6a:	f000 fd53 	bl	404914 <__errno>
  403e6e:	2321      	movs	r3, #33	; 0x21
  403e70:	6003      	str	r3, [r0, #0]
  403e72:	480b      	ldr	r0, [pc, #44]	; (403ea0 <logf+0xf0>)
  403e74:	f000 f92e 	bl	4040d4 <nan>
  403e78:	e9cd 0106 	strd	r0, r1, [sp, #24]
  403e7c:	e7d0      	b.n	403e20 <logf+0x70>
  403e7e:	2301      	movs	r3, #1
  403e80:	9300      	str	r3, [sp, #0]
  403e82:	4668      	mov	r0, sp
  403e84:	f000 f924 	bl	4040d0 <matherr>
  403e88:	2800      	cmp	r0, #0
  403e8a:	d1f2      	bne.n	403e72 <logf+0xc2>
  403e8c:	e7ed      	b.n	403e6a <logf+0xba>
  403e8e:	bf00      	nop
  403e90:	20400048 	.word	0x20400048
  403e94:	00408164 	.word	0x00408164
  403e98:	c7efffff 	.word	0xc7efffff
  403e9c:	fff00000 	.word	0xfff00000
  403ea0:	00408180 	.word	0x00408180

00403ea4 <__ieee754_logf>:
  403ea4:	b430      	push	{r4, r5}
  403ea6:	b082      	sub	sp, #8
  403ea8:	9001      	str	r0, [sp, #4]
  403eaa:	9b01      	ldr	r3, [sp, #4]
  403eac:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
  403eb0:	d02d      	beq.n	403f0e <__ieee754_logf+0x6a>
  403eb2:	2b00      	cmp	r3, #0
  403eb4:	db41      	blt.n	403f3a <__ieee754_logf+0x96>
  403eb6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
  403eba:	da4b      	bge.n	403f54 <__ieee754_logf+0xb0>
  403ebc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
  403ec0:	db30      	blt.n	403f24 <__ieee754_logf+0x80>
  403ec2:	2500      	movs	r5, #0
  403ec4:	4a73      	ldr	r2, [pc, #460]	; (404094 <__ieee754_logf+0x1f0>)
  403ec6:	f3c3 0416 	ubfx	r4, r3, #0, #23
  403eca:	4422      	add	r2, r4
  403ecc:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
  403ed0:	f082 507e 	eor.w	r0, r2, #1065353216	; 0x3f800000
  403ed4:	15db      	asrs	r3, r3, #23
  403ed6:	f104 010f 	add.w	r1, r4, #15
  403eda:	4320      	orrs	r0, r4
  403edc:	3b7f      	subs	r3, #127	; 0x7f
  403ede:	ee07 0a90 	vmov	s15, r0
  403ee2:	f3c1 0116 	ubfx	r1, r1, #0, #23
  403ee6:	442b      	add	r3, r5
  403ee8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  403eec:	290f      	cmp	r1, #15
  403eee:	eb03 53d2 	add.w	r3, r3, r2, lsr #23
  403ef2:	ee37 7ac7 	vsub.f32	s14, s15, s14
  403ef6:	dc36      	bgt.n	403f66 <__ieee754_logf+0xc2>
  403ef8:	eeb5 7a40 	vcmp.f32	s14, #0.0
  403efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403f00:	d172      	bne.n	403fe8 <__ieee754_logf+0x144>
  403f02:	2b00      	cmp	r3, #0
  403f04:	f040 80a0 	bne.w	404048 <__ieee754_logf+0x1a4>
  403f08:	eddf 7a63 	vldr	s15, [pc, #396]	; 404098 <__ieee754_logf+0x1f4>
  403f0c:	e005      	b.n	403f1a <__ieee754_logf+0x76>
  403f0e:	eddf 6a63 	vldr	s13, [pc, #396]	; 40409c <__ieee754_logf+0x1f8>
  403f12:	ed9f 7a61 	vldr	s14, [pc, #388]	; 404098 <__ieee754_logf+0x1f4>
  403f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
  403f1a:	ee17 0a90 	vmov	r0, s15
  403f1e:	b002      	add	sp, #8
  403f20:	bc30      	pop	{r4, r5}
  403f22:	4770      	bx	lr
  403f24:	eddf 7a5e 	vldr	s15, [pc, #376]	; 4040a0 <__ieee754_logf+0x1fc>
  403f28:	ed9d 7a01 	vldr	s14, [sp, #4]
  403f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
  403f30:	f06f 0518 	mvn.w	r5, #24
  403f34:	ee17 3a90 	vmov	r3, s15
  403f38:	e7c4      	b.n	403ec4 <__ieee754_logf+0x20>
  403f3a:	eddd 7a01 	vldr	s15, [sp, #4]
  403f3e:	ed9f 7a56 	vldr	s14, [pc, #344]	; 404098 <__ieee754_logf+0x1f4>
  403f42:	ee77 6ae7 	vsub.f32	s13, s15, s15
  403f46:	eec6 7a87 	vdiv.f32	s15, s13, s14
  403f4a:	ee17 0a90 	vmov	r0, s15
  403f4e:	b002      	add	sp, #8
  403f50:	bc30      	pop	{r4, r5}
  403f52:	4770      	bx	lr
  403f54:	eddd 7a01 	vldr	s15, [sp, #4]
  403f58:	ee77 7aa7 	vadd.f32	s15, s15, s15
  403f5c:	ee17 0a90 	vmov	r0, s15
  403f60:	b002      	add	sp, #8
  403f62:	bc30      	pop	{r4, r5}
  403f64:	4770      	bx	lr
  403f66:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
  403f6a:	ee77 6a26 	vadd.f32	s13, s14, s13
  403f6e:	ed9f 2a4d 	vldr	s4, [pc, #308]	; 4040a4 <__ieee754_logf+0x200>
  403f72:	ed9f 4a4d 	vldr	s8, [pc, #308]	; 4040a8 <__ieee754_logf+0x204>
  403f76:	ed9f 5a4d 	vldr	s10, [pc, #308]	; 4040ac <__ieee754_logf+0x208>
  403f7a:	eddf 2a4d 	vldr	s5, [pc, #308]	; 4040b0 <__ieee754_logf+0x20c>
  403f7e:	eddf 4a4d 	vldr	s9, [pc, #308]	; 4040b4 <__ieee754_logf+0x210>
  403f82:	eddf 7a4d 	vldr	s15, [pc, #308]	; 4040b8 <__ieee754_logf+0x214>
  403f86:	ed9f 6a4d 	vldr	s12, [pc, #308]	; 4040bc <__ieee754_logf+0x218>
  403f8a:	494d      	ldr	r1, [pc, #308]	; (4040c0 <__ieee754_logf+0x21c>)
  403f8c:	eec7 3a26 	vdiv.f32	s7, s14, s13
  403f90:	f5c4 1257 	rsb	r2, r4, #3522560	; 0x35c000
  403f94:	4421      	add	r1, r4
  403f96:	f502 7222 	add.w	r2, r2, #648	; 0x288
  403f9a:	430a      	orrs	r2, r1
  403f9c:	2a00      	cmp	r2, #0
  403f9e:	ee06 3a90 	vmov	s13, r3
  403fa2:	ee63 5aa3 	vmul.f32	s11, s7, s7
  403fa6:	eeb8 3ae6 	vcvt.f32.s32	s6, s13
  403faa:	ee65 6aa5 	vmul.f32	s13, s11, s11
  403fae:	eea6 4a82 	vfma.f32	s8, s13, s4
  403fb2:	eee6 4aa2 	vfma.f32	s9, s13, s5
  403fb6:	eea6 5a84 	vfma.f32	s10, s13, s8
  403fba:	eea6 6aa4 	vfma.f32	s12, s13, s9
  403fbe:	eee6 7a85 	vfma.f32	s15, s13, s10
  403fc2:	ee67 7aa5 	vmul.f32	s15, s15, s11
  403fc6:	eee6 7a86 	vfma.f32	s15, s13, s12
  403fca:	dd4c      	ble.n	404066 <__ieee754_logf+0x1c2>
  403fcc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
  403fd0:	ee27 6a06 	vmul.f32	s12, s14, s12
  403fd4:	ee26 6a07 	vmul.f32	s12, s12, s14
  403fd8:	b9a3      	cbnz	r3, 404004 <__ieee754_logf+0x160>
  403fda:	ee77 6a86 	vadd.f32	s13, s15, s12
  403fde:	eea3 6ae6 	vfms.f32	s12, s7, s13
  403fe2:	ee77 7a46 	vsub.f32	s15, s14, s12
  403fe6:	e798      	b.n	403f1a <__ieee754_logf+0x76>
  403fe8:	eddf 6a36 	vldr	s13, [pc, #216]	; 4040c4 <__ieee754_logf+0x220>
  403fec:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
  403ff0:	eee7 7a66 	vfms.f32	s15, s14, s13
  403ff4:	ee67 6a07 	vmul.f32	s13, s14, s14
  403ff8:	ee67 6aa6 	vmul.f32	s13, s15, s13
  403ffc:	b99b      	cbnz	r3, 404026 <__ieee754_logf+0x182>
  403ffe:	ee77 7a66 	vsub.f32	s15, s14, s13
  404002:	e78a      	b.n	403f1a <__ieee754_logf+0x76>
  404004:	eddf 5a30 	vldr	s11, [pc, #192]	; 4040c8 <__ieee754_logf+0x224>
  404008:	ed9f 5a30 	vldr	s10, [pc, #192]	; 4040cc <__ieee754_logf+0x228>
  40400c:	ee77 6a86 	vadd.f32	s13, s15, s12
  404010:	ee63 7a25 	vmul.f32	s15, s6, s11
  404014:	eee3 7aa6 	vfma.f32	s15, s7, s13
  404018:	ee76 7a67 	vsub.f32	s15, s12, s15
  40401c:	ee77 7ac7 	vsub.f32	s15, s15, s14
  404020:	eed3 7a05 	vfnms.f32	s15, s6, s10
  404024:	e779      	b.n	403f1a <__ieee754_logf+0x76>
  404026:	ee07 3a90 	vmov	s15, r3
  40402a:	eddf 5a27 	vldr	s11, [pc, #156]	; 4040c8 <__ieee754_logf+0x224>
  40402e:	ed9f 6a27 	vldr	s12, [pc, #156]	; 4040cc <__ieee754_logf+0x228>
  404032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404036:	eee7 6ae5 	vfms.f32	s13, s15, s11
  40403a:	ee36 7ac7 	vsub.f32	s14, s13, s14
  40403e:	ee97 7a86 	vfnms.f32	s14, s15, s12
  404042:	eef0 7a47 	vmov.f32	s15, s14
  404046:	e768      	b.n	403f1a <__ieee754_logf+0x76>
  404048:	ee07 3a90 	vmov	s15, r3
  40404c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 4040c8 <__ieee754_logf+0x224>
  404050:	eddf 6a1e 	vldr	s13, [pc, #120]	; 4040cc <__ieee754_logf+0x228>
  404054:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404058:	ee27 7a87 	vmul.f32	s14, s15, s14
  40405c:	eea7 7aa6 	vfma.f32	s14, s15, s13
  404060:	eef0 7a47 	vmov.f32	s15, s14
  404064:	e759      	b.n	403f1a <__ieee754_logf+0x76>
  404066:	b173      	cbz	r3, 404086 <__ieee754_logf+0x1e2>
  404068:	ed9f 6a17 	vldr	s12, [pc, #92]	; 4040c8 <__ieee754_logf+0x224>
  40406c:	eddf 5a17 	vldr	s11, [pc, #92]	; 4040cc <__ieee754_logf+0x228>
  404070:	ee77 6a67 	vsub.f32	s13, s14, s15
  404074:	ee66 7a43 	vnmul.f32	s15, s12, s6
  404078:	eee3 7aa6 	vfma.f32	s15, s7, s13
  40407c:	ee77 7ac7 	vsub.f32	s15, s15, s14
  404080:	eed3 7a25 	vfnms.f32	s15, s6, s11
  404084:	e749      	b.n	403f1a <__ieee754_logf+0x76>
  404086:	ee77 7a67 	vsub.f32	s15, s14, s15
  40408a:	eea3 7ae7 	vfms.f32	s14, s7, s15
  40408e:	eef0 7a47 	vmov.f32	s15, s14
  404092:	e742      	b.n	403f1a <__ieee754_logf+0x76>
  404094:	004afb20 	.word	0x004afb20
  404098:	00000000 	.word	0x00000000
  40409c:	cc000000 	.word	0xcc000000
  4040a0:	4c000000 	.word	0x4c000000
  4040a4:	3e178897 	.word	0x3e178897
  4040a8:	3e3a3325 	.word	0x3e3a3325
  4040ac:	3e924925 	.word	0x3e924925
  4040b0:	3e1cd04f 	.word	0x3e1cd04f
  4040b4:	3e638e29 	.word	0x3e638e29
  4040b8:	3f2aaaab 	.word	0x3f2aaaab
  4040bc:	3ecccccd 	.word	0x3ecccccd
  4040c0:	ffcf5c30 	.word	0xffcf5c30
  4040c4:	3eaaaaab 	.word	0x3eaaaaab
  4040c8:	3717f7d1 	.word	0x3717f7d1
  4040cc:	3f317180 	.word	0x3f317180

004040d0 <matherr>:
  4040d0:	2000      	movs	r0, #0
  4040d2:	4770      	bx	lr

004040d4 <nan>:
  4040d4:	2000      	movs	r0, #0
  4040d6:	4901      	ldr	r1, [pc, #4]	; (4040dc <nan+0x8>)
  4040d8:	4770      	bx	lr
  4040da:	bf00      	nop
  4040dc:	7ff80000 	.word	0x7ff80000

004040e0 <__aeabi_drsub>:
  4040e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4040e4:	e002      	b.n	4040ec <__adddf3>
  4040e6:	bf00      	nop

004040e8 <__aeabi_dsub>:
  4040e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004040ec <__adddf3>:
  4040ec:	b530      	push	{r4, r5, lr}
  4040ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4040f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4040f6:	ea94 0f05 	teq	r4, r5
  4040fa:	bf08      	it	eq
  4040fc:	ea90 0f02 	teqeq	r0, r2
  404100:	bf1f      	itttt	ne
  404102:	ea54 0c00 	orrsne.w	ip, r4, r0
  404106:	ea55 0c02 	orrsne.w	ip, r5, r2
  40410a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40410e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  404112:	f000 80e2 	beq.w	4042da <__adddf3+0x1ee>
  404116:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40411a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40411e:	bfb8      	it	lt
  404120:	426d      	neglt	r5, r5
  404122:	dd0c      	ble.n	40413e <__adddf3+0x52>
  404124:	442c      	add	r4, r5
  404126:	ea80 0202 	eor.w	r2, r0, r2
  40412a:	ea81 0303 	eor.w	r3, r1, r3
  40412e:	ea82 0000 	eor.w	r0, r2, r0
  404132:	ea83 0101 	eor.w	r1, r3, r1
  404136:	ea80 0202 	eor.w	r2, r0, r2
  40413a:	ea81 0303 	eor.w	r3, r1, r3
  40413e:	2d36      	cmp	r5, #54	; 0x36
  404140:	bf88      	it	hi
  404142:	bd30      	pophi	{r4, r5, pc}
  404144:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  404148:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40414c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  404150:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  404154:	d002      	beq.n	40415c <__adddf3+0x70>
  404156:	4240      	negs	r0, r0
  404158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40415c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  404160:	ea4f 3303 	mov.w	r3, r3, lsl #12
  404164:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  404168:	d002      	beq.n	404170 <__adddf3+0x84>
  40416a:	4252      	negs	r2, r2
  40416c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  404170:	ea94 0f05 	teq	r4, r5
  404174:	f000 80a7 	beq.w	4042c6 <__adddf3+0x1da>
  404178:	f1a4 0401 	sub.w	r4, r4, #1
  40417c:	f1d5 0e20 	rsbs	lr, r5, #32
  404180:	db0d      	blt.n	40419e <__adddf3+0xb2>
  404182:	fa02 fc0e 	lsl.w	ip, r2, lr
  404186:	fa22 f205 	lsr.w	r2, r2, r5
  40418a:	1880      	adds	r0, r0, r2
  40418c:	f141 0100 	adc.w	r1, r1, #0
  404190:	fa03 f20e 	lsl.w	r2, r3, lr
  404194:	1880      	adds	r0, r0, r2
  404196:	fa43 f305 	asr.w	r3, r3, r5
  40419a:	4159      	adcs	r1, r3
  40419c:	e00e      	b.n	4041bc <__adddf3+0xd0>
  40419e:	f1a5 0520 	sub.w	r5, r5, #32
  4041a2:	f10e 0e20 	add.w	lr, lr, #32
  4041a6:	2a01      	cmp	r2, #1
  4041a8:	fa03 fc0e 	lsl.w	ip, r3, lr
  4041ac:	bf28      	it	cs
  4041ae:	f04c 0c02 	orrcs.w	ip, ip, #2
  4041b2:	fa43 f305 	asr.w	r3, r3, r5
  4041b6:	18c0      	adds	r0, r0, r3
  4041b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4041bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4041c0:	d507      	bpl.n	4041d2 <__adddf3+0xe6>
  4041c2:	f04f 0e00 	mov.w	lr, #0
  4041c6:	f1dc 0c00 	rsbs	ip, ip, #0
  4041ca:	eb7e 0000 	sbcs.w	r0, lr, r0
  4041ce:	eb6e 0101 	sbc.w	r1, lr, r1
  4041d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4041d6:	d31b      	bcc.n	404210 <__adddf3+0x124>
  4041d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4041dc:	d30c      	bcc.n	4041f8 <__adddf3+0x10c>
  4041de:	0849      	lsrs	r1, r1, #1
  4041e0:	ea5f 0030 	movs.w	r0, r0, rrx
  4041e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4041e8:	f104 0401 	add.w	r4, r4, #1
  4041ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4041f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4041f4:	f080 809a 	bcs.w	40432c <__adddf3+0x240>
  4041f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4041fc:	bf08      	it	eq
  4041fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  404202:	f150 0000 	adcs.w	r0, r0, #0
  404206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40420a:	ea41 0105 	orr.w	r1, r1, r5
  40420e:	bd30      	pop	{r4, r5, pc}
  404210:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  404214:	4140      	adcs	r0, r0
  404216:	eb41 0101 	adc.w	r1, r1, r1
  40421a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40421e:	f1a4 0401 	sub.w	r4, r4, #1
  404222:	d1e9      	bne.n	4041f8 <__adddf3+0x10c>
  404224:	f091 0f00 	teq	r1, #0
  404228:	bf04      	itt	eq
  40422a:	4601      	moveq	r1, r0
  40422c:	2000      	moveq	r0, #0
  40422e:	fab1 f381 	clz	r3, r1
  404232:	bf08      	it	eq
  404234:	3320      	addeq	r3, #32
  404236:	f1a3 030b 	sub.w	r3, r3, #11
  40423a:	f1b3 0220 	subs.w	r2, r3, #32
  40423e:	da0c      	bge.n	40425a <__adddf3+0x16e>
  404240:	320c      	adds	r2, #12
  404242:	dd08      	ble.n	404256 <__adddf3+0x16a>
  404244:	f102 0c14 	add.w	ip, r2, #20
  404248:	f1c2 020c 	rsb	r2, r2, #12
  40424c:	fa01 f00c 	lsl.w	r0, r1, ip
  404250:	fa21 f102 	lsr.w	r1, r1, r2
  404254:	e00c      	b.n	404270 <__adddf3+0x184>
  404256:	f102 0214 	add.w	r2, r2, #20
  40425a:	bfd8      	it	le
  40425c:	f1c2 0c20 	rsble	ip, r2, #32
  404260:	fa01 f102 	lsl.w	r1, r1, r2
  404264:	fa20 fc0c 	lsr.w	ip, r0, ip
  404268:	bfdc      	itt	le
  40426a:	ea41 010c 	orrle.w	r1, r1, ip
  40426e:	4090      	lslle	r0, r2
  404270:	1ae4      	subs	r4, r4, r3
  404272:	bfa2      	ittt	ge
  404274:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  404278:	4329      	orrge	r1, r5
  40427a:	bd30      	popge	{r4, r5, pc}
  40427c:	ea6f 0404 	mvn.w	r4, r4
  404280:	3c1f      	subs	r4, #31
  404282:	da1c      	bge.n	4042be <__adddf3+0x1d2>
  404284:	340c      	adds	r4, #12
  404286:	dc0e      	bgt.n	4042a6 <__adddf3+0x1ba>
  404288:	f104 0414 	add.w	r4, r4, #20
  40428c:	f1c4 0220 	rsb	r2, r4, #32
  404290:	fa20 f004 	lsr.w	r0, r0, r4
  404294:	fa01 f302 	lsl.w	r3, r1, r2
  404298:	ea40 0003 	orr.w	r0, r0, r3
  40429c:	fa21 f304 	lsr.w	r3, r1, r4
  4042a0:	ea45 0103 	orr.w	r1, r5, r3
  4042a4:	bd30      	pop	{r4, r5, pc}
  4042a6:	f1c4 040c 	rsb	r4, r4, #12
  4042aa:	f1c4 0220 	rsb	r2, r4, #32
  4042ae:	fa20 f002 	lsr.w	r0, r0, r2
  4042b2:	fa01 f304 	lsl.w	r3, r1, r4
  4042b6:	ea40 0003 	orr.w	r0, r0, r3
  4042ba:	4629      	mov	r1, r5
  4042bc:	bd30      	pop	{r4, r5, pc}
  4042be:	fa21 f004 	lsr.w	r0, r1, r4
  4042c2:	4629      	mov	r1, r5
  4042c4:	bd30      	pop	{r4, r5, pc}
  4042c6:	f094 0f00 	teq	r4, #0
  4042ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4042ce:	bf06      	itte	eq
  4042d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4042d4:	3401      	addeq	r4, #1
  4042d6:	3d01      	subne	r5, #1
  4042d8:	e74e      	b.n	404178 <__adddf3+0x8c>
  4042da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4042de:	bf18      	it	ne
  4042e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4042e4:	d029      	beq.n	40433a <__adddf3+0x24e>
  4042e6:	ea94 0f05 	teq	r4, r5
  4042ea:	bf08      	it	eq
  4042ec:	ea90 0f02 	teqeq	r0, r2
  4042f0:	d005      	beq.n	4042fe <__adddf3+0x212>
  4042f2:	ea54 0c00 	orrs.w	ip, r4, r0
  4042f6:	bf04      	itt	eq
  4042f8:	4619      	moveq	r1, r3
  4042fa:	4610      	moveq	r0, r2
  4042fc:	bd30      	pop	{r4, r5, pc}
  4042fe:	ea91 0f03 	teq	r1, r3
  404302:	bf1e      	ittt	ne
  404304:	2100      	movne	r1, #0
  404306:	2000      	movne	r0, #0
  404308:	bd30      	popne	{r4, r5, pc}
  40430a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40430e:	d105      	bne.n	40431c <__adddf3+0x230>
  404310:	0040      	lsls	r0, r0, #1
  404312:	4149      	adcs	r1, r1
  404314:	bf28      	it	cs
  404316:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40431a:	bd30      	pop	{r4, r5, pc}
  40431c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  404320:	bf3c      	itt	cc
  404322:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  404326:	bd30      	popcc	{r4, r5, pc}
  404328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40432c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  404330:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  404334:	f04f 0000 	mov.w	r0, #0
  404338:	bd30      	pop	{r4, r5, pc}
  40433a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40433e:	bf1a      	itte	ne
  404340:	4619      	movne	r1, r3
  404342:	4610      	movne	r0, r2
  404344:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  404348:	bf1c      	itt	ne
  40434a:	460b      	movne	r3, r1
  40434c:	4602      	movne	r2, r0
  40434e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  404352:	bf06      	itte	eq
  404354:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  404358:	ea91 0f03 	teqeq	r1, r3
  40435c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  404360:	bd30      	pop	{r4, r5, pc}
  404362:	bf00      	nop

00404364 <__aeabi_ui2d>:
  404364:	f090 0f00 	teq	r0, #0
  404368:	bf04      	itt	eq
  40436a:	2100      	moveq	r1, #0
  40436c:	4770      	bxeq	lr
  40436e:	b530      	push	{r4, r5, lr}
  404370:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404374:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404378:	f04f 0500 	mov.w	r5, #0
  40437c:	f04f 0100 	mov.w	r1, #0
  404380:	e750      	b.n	404224 <__adddf3+0x138>
  404382:	bf00      	nop

00404384 <__aeabi_i2d>:
  404384:	f090 0f00 	teq	r0, #0
  404388:	bf04      	itt	eq
  40438a:	2100      	moveq	r1, #0
  40438c:	4770      	bxeq	lr
  40438e:	b530      	push	{r4, r5, lr}
  404390:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404394:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404398:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40439c:	bf48      	it	mi
  40439e:	4240      	negmi	r0, r0
  4043a0:	f04f 0100 	mov.w	r1, #0
  4043a4:	e73e      	b.n	404224 <__adddf3+0x138>
  4043a6:	bf00      	nop

004043a8 <__aeabi_f2d>:
  4043a8:	0042      	lsls	r2, r0, #1
  4043aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4043ae:	ea4f 0131 	mov.w	r1, r1, rrx
  4043b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4043b6:	bf1f      	itttt	ne
  4043b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4043bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4043c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4043c4:	4770      	bxne	lr
  4043c6:	f092 0f00 	teq	r2, #0
  4043ca:	bf14      	ite	ne
  4043cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4043d0:	4770      	bxeq	lr
  4043d2:	b530      	push	{r4, r5, lr}
  4043d4:	f44f 7460 	mov.w	r4, #896	; 0x380
  4043d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4043dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4043e0:	e720      	b.n	404224 <__adddf3+0x138>
  4043e2:	bf00      	nop

004043e4 <__aeabi_ul2d>:
  4043e4:	ea50 0201 	orrs.w	r2, r0, r1
  4043e8:	bf08      	it	eq
  4043ea:	4770      	bxeq	lr
  4043ec:	b530      	push	{r4, r5, lr}
  4043ee:	f04f 0500 	mov.w	r5, #0
  4043f2:	e00a      	b.n	40440a <__aeabi_l2d+0x16>

004043f4 <__aeabi_l2d>:
  4043f4:	ea50 0201 	orrs.w	r2, r0, r1
  4043f8:	bf08      	it	eq
  4043fa:	4770      	bxeq	lr
  4043fc:	b530      	push	{r4, r5, lr}
  4043fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  404402:	d502      	bpl.n	40440a <__aeabi_l2d+0x16>
  404404:	4240      	negs	r0, r0
  404406:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40440a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40440e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404412:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  404416:	f43f aedc 	beq.w	4041d2 <__adddf3+0xe6>
  40441a:	f04f 0203 	mov.w	r2, #3
  40441e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  404422:	bf18      	it	ne
  404424:	3203      	addne	r2, #3
  404426:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40442a:	bf18      	it	ne
  40442c:	3203      	addne	r2, #3
  40442e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  404432:	f1c2 0320 	rsb	r3, r2, #32
  404436:	fa00 fc03 	lsl.w	ip, r0, r3
  40443a:	fa20 f002 	lsr.w	r0, r0, r2
  40443e:	fa01 fe03 	lsl.w	lr, r1, r3
  404442:	ea40 000e 	orr.w	r0, r0, lr
  404446:	fa21 f102 	lsr.w	r1, r1, r2
  40444a:	4414      	add	r4, r2
  40444c:	e6c1      	b.n	4041d2 <__adddf3+0xe6>
  40444e:	bf00      	nop

00404450 <__aeabi_dmul>:
  404450:	b570      	push	{r4, r5, r6, lr}
  404452:	f04f 0cff 	mov.w	ip, #255	; 0xff
  404456:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40445a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40445e:	bf1d      	ittte	ne
  404460:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  404464:	ea94 0f0c 	teqne	r4, ip
  404468:	ea95 0f0c 	teqne	r5, ip
  40446c:	f000 f8de 	bleq	40462c <__aeabi_dmul+0x1dc>
  404470:	442c      	add	r4, r5
  404472:	ea81 0603 	eor.w	r6, r1, r3
  404476:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40447a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40447e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  404482:	bf18      	it	ne
  404484:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  404488:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40448c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  404490:	d038      	beq.n	404504 <__aeabi_dmul+0xb4>
  404492:	fba0 ce02 	umull	ip, lr, r0, r2
  404496:	f04f 0500 	mov.w	r5, #0
  40449a:	fbe1 e502 	umlal	lr, r5, r1, r2
  40449e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4044a2:	fbe0 e503 	umlal	lr, r5, r0, r3
  4044a6:	f04f 0600 	mov.w	r6, #0
  4044aa:	fbe1 5603 	umlal	r5, r6, r1, r3
  4044ae:	f09c 0f00 	teq	ip, #0
  4044b2:	bf18      	it	ne
  4044b4:	f04e 0e01 	orrne.w	lr, lr, #1
  4044b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4044bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4044c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4044c4:	d204      	bcs.n	4044d0 <__aeabi_dmul+0x80>
  4044c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4044ca:	416d      	adcs	r5, r5
  4044cc:	eb46 0606 	adc.w	r6, r6, r6
  4044d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4044d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4044d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4044dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4044e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4044e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4044e8:	bf88      	it	hi
  4044ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4044ee:	d81e      	bhi.n	40452e <__aeabi_dmul+0xde>
  4044f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4044f4:	bf08      	it	eq
  4044f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4044fa:	f150 0000 	adcs.w	r0, r0, #0
  4044fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  404502:	bd70      	pop	{r4, r5, r6, pc}
  404504:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  404508:	ea46 0101 	orr.w	r1, r6, r1
  40450c:	ea40 0002 	orr.w	r0, r0, r2
  404510:	ea81 0103 	eor.w	r1, r1, r3
  404514:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  404518:	bfc2      	ittt	gt
  40451a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40451e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  404522:	bd70      	popgt	{r4, r5, r6, pc}
  404524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404528:	f04f 0e00 	mov.w	lr, #0
  40452c:	3c01      	subs	r4, #1
  40452e:	f300 80ab 	bgt.w	404688 <__aeabi_dmul+0x238>
  404532:	f114 0f36 	cmn.w	r4, #54	; 0x36
  404536:	bfde      	ittt	le
  404538:	2000      	movle	r0, #0
  40453a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40453e:	bd70      	pople	{r4, r5, r6, pc}
  404540:	f1c4 0400 	rsb	r4, r4, #0
  404544:	3c20      	subs	r4, #32
  404546:	da35      	bge.n	4045b4 <__aeabi_dmul+0x164>
  404548:	340c      	adds	r4, #12
  40454a:	dc1b      	bgt.n	404584 <__aeabi_dmul+0x134>
  40454c:	f104 0414 	add.w	r4, r4, #20
  404550:	f1c4 0520 	rsb	r5, r4, #32
  404554:	fa00 f305 	lsl.w	r3, r0, r5
  404558:	fa20 f004 	lsr.w	r0, r0, r4
  40455c:	fa01 f205 	lsl.w	r2, r1, r5
  404560:	ea40 0002 	orr.w	r0, r0, r2
  404564:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  404568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40456c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  404570:	fa21 f604 	lsr.w	r6, r1, r4
  404574:	eb42 0106 	adc.w	r1, r2, r6
  404578:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40457c:	bf08      	it	eq
  40457e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  404582:	bd70      	pop	{r4, r5, r6, pc}
  404584:	f1c4 040c 	rsb	r4, r4, #12
  404588:	f1c4 0520 	rsb	r5, r4, #32
  40458c:	fa00 f304 	lsl.w	r3, r0, r4
  404590:	fa20 f005 	lsr.w	r0, r0, r5
  404594:	fa01 f204 	lsl.w	r2, r1, r4
  404598:	ea40 0002 	orr.w	r0, r0, r2
  40459c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4045a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4045a4:	f141 0100 	adc.w	r1, r1, #0
  4045a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4045ac:	bf08      	it	eq
  4045ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4045b2:	bd70      	pop	{r4, r5, r6, pc}
  4045b4:	f1c4 0520 	rsb	r5, r4, #32
  4045b8:	fa00 f205 	lsl.w	r2, r0, r5
  4045bc:	ea4e 0e02 	orr.w	lr, lr, r2
  4045c0:	fa20 f304 	lsr.w	r3, r0, r4
  4045c4:	fa01 f205 	lsl.w	r2, r1, r5
  4045c8:	ea43 0302 	orr.w	r3, r3, r2
  4045cc:	fa21 f004 	lsr.w	r0, r1, r4
  4045d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4045d4:	fa21 f204 	lsr.w	r2, r1, r4
  4045d8:	ea20 0002 	bic.w	r0, r0, r2
  4045dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4045e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4045e4:	bf08      	it	eq
  4045e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4045ea:	bd70      	pop	{r4, r5, r6, pc}
  4045ec:	f094 0f00 	teq	r4, #0
  4045f0:	d10f      	bne.n	404612 <__aeabi_dmul+0x1c2>
  4045f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4045f6:	0040      	lsls	r0, r0, #1
  4045f8:	eb41 0101 	adc.w	r1, r1, r1
  4045fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404600:	bf08      	it	eq
  404602:	3c01      	subeq	r4, #1
  404604:	d0f7      	beq.n	4045f6 <__aeabi_dmul+0x1a6>
  404606:	ea41 0106 	orr.w	r1, r1, r6
  40460a:	f095 0f00 	teq	r5, #0
  40460e:	bf18      	it	ne
  404610:	4770      	bxne	lr
  404612:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  404616:	0052      	lsls	r2, r2, #1
  404618:	eb43 0303 	adc.w	r3, r3, r3
  40461c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  404620:	bf08      	it	eq
  404622:	3d01      	subeq	r5, #1
  404624:	d0f7      	beq.n	404616 <__aeabi_dmul+0x1c6>
  404626:	ea43 0306 	orr.w	r3, r3, r6
  40462a:	4770      	bx	lr
  40462c:	ea94 0f0c 	teq	r4, ip
  404630:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  404634:	bf18      	it	ne
  404636:	ea95 0f0c 	teqne	r5, ip
  40463a:	d00c      	beq.n	404656 <__aeabi_dmul+0x206>
  40463c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404640:	bf18      	it	ne
  404642:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404646:	d1d1      	bne.n	4045ec <__aeabi_dmul+0x19c>
  404648:	ea81 0103 	eor.w	r1, r1, r3
  40464c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404650:	f04f 0000 	mov.w	r0, #0
  404654:	bd70      	pop	{r4, r5, r6, pc}
  404656:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40465a:	bf06      	itte	eq
  40465c:	4610      	moveq	r0, r2
  40465e:	4619      	moveq	r1, r3
  404660:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404664:	d019      	beq.n	40469a <__aeabi_dmul+0x24a>
  404666:	ea94 0f0c 	teq	r4, ip
  40466a:	d102      	bne.n	404672 <__aeabi_dmul+0x222>
  40466c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  404670:	d113      	bne.n	40469a <__aeabi_dmul+0x24a>
  404672:	ea95 0f0c 	teq	r5, ip
  404676:	d105      	bne.n	404684 <__aeabi_dmul+0x234>
  404678:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40467c:	bf1c      	itt	ne
  40467e:	4610      	movne	r0, r2
  404680:	4619      	movne	r1, r3
  404682:	d10a      	bne.n	40469a <__aeabi_dmul+0x24a>
  404684:	ea81 0103 	eor.w	r1, r1, r3
  404688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40468c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  404690:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  404694:	f04f 0000 	mov.w	r0, #0
  404698:	bd70      	pop	{r4, r5, r6, pc}
  40469a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40469e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4046a2:	bd70      	pop	{r4, r5, r6, pc}

004046a4 <__aeabi_ddiv>:
  4046a4:	b570      	push	{r4, r5, r6, lr}
  4046a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4046aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4046ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4046b2:	bf1d      	ittte	ne
  4046b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4046b8:	ea94 0f0c 	teqne	r4, ip
  4046bc:	ea95 0f0c 	teqne	r5, ip
  4046c0:	f000 f8a7 	bleq	404812 <__aeabi_ddiv+0x16e>
  4046c4:	eba4 0405 	sub.w	r4, r4, r5
  4046c8:	ea81 0e03 	eor.w	lr, r1, r3
  4046cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4046d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4046d4:	f000 8088 	beq.w	4047e8 <__aeabi_ddiv+0x144>
  4046d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4046dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4046e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4046e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4046e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4046ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4046f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4046f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4046f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4046fc:	429d      	cmp	r5, r3
  4046fe:	bf08      	it	eq
  404700:	4296      	cmpeq	r6, r2
  404702:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  404706:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40470a:	d202      	bcs.n	404712 <__aeabi_ddiv+0x6e>
  40470c:	085b      	lsrs	r3, r3, #1
  40470e:	ea4f 0232 	mov.w	r2, r2, rrx
  404712:	1ab6      	subs	r6, r6, r2
  404714:	eb65 0503 	sbc.w	r5, r5, r3
  404718:	085b      	lsrs	r3, r3, #1
  40471a:	ea4f 0232 	mov.w	r2, r2, rrx
  40471e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  404722:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  404726:	ebb6 0e02 	subs.w	lr, r6, r2
  40472a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40472e:	bf22      	ittt	cs
  404730:	1ab6      	subcs	r6, r6, r2
  404732:	4675      	movcs	r5, lr
  404734:	ea40 000c 	orrcs.w	r0, r0, ip
  404738:	085b      	lsrs	r3, r3, #1
  40473a:	ea4f 0232 	mov.w	r2, r2, rrx
  40473e:	ebb6 0e02 	subs.w	lr, r6, r2
  404742:	eb75 0e03 	sbcs.w	lr, r5, r3
  404746:	bf22      	ittt	cs
  404748:	1ab6      	subcs	r6, r6, r2
  40474a:	4675      	movcs	r5, lr
  40474c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  404750:	085b      	lsrs	r3, r3, #1
  404752:	ea4f 0232 	mov.w	r2, r2, rrx
  404756:	ebb6 0e02 	subs.w	lr, r6, r2
  40475a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40475e:	bf22      	ittt	cs
  404760:	1ab6      	subcs	r6, r6, r2
  404762:	4675      	movcs	r5, lr
  404764:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  404768:	085b      	lsrs	r3, r3, #1
  40476a:	ea4f 0232 	mov.w	r2, r2, rrx
  40476e:	ebb6 0e02 	subs.w	lr, r6, r2
  404772:	eb75 0e03 	sbcs.w	lr, r5, r3
  404776:	bf22      	ittt	cs
  404778:	1ab6      	subcs	r6, r6, r2
  40477a:	4675      	movcs	r5, lr
  40477c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  404780:	ea55 0e06 	orrs.w	lr, r5, r6
  404784:	d018      	beq.n	4047b8 <__aeabi_ddiv+0x114>
  404786:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40478a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40478e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  404792:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  404796:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40479a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40479e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4047a2:	d1c0      	bne.n	404726 <__aeabi_ddiv+0x82>
  4047a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4047a8:	d10b      	bne.n	4047c2 <__aeabi_ddiv+0x11e>
  4047aa:	ea41 0100 	orr.w	r1, r1, r0
  4047ae:	f04f 0000 	mov.w	r0, #0
  4047b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4047b6:	e7b6      	b.n	404726 <__aeabi_ddiv+0x82>
  4047b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4047bc:	bf04      	itt	eq
  4047be:	4301      	orreq	r1, r0
  4047c0:	2000      	moveq	r0, #0
  4047c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4047c6:	bf88      	it	hi
  4047c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4047cc:	f63f aeaf 	bhi.w	40452e <__aeabi_dmul+0xde>
  4047d0:	ebb5 0c03 	subs.w	ip, r5, r3
  4047d4:	bf04      	itt	eq
  4047d6:	ebb6 0c02 	subseq.w	ip, r6, r2
  4047da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4047de:	f150 0000 	adcs.w	r0, r0, #0
  4047e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4047e6:	bd70      	pop	{r4, r5, r6, pc}
  4047e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4047ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4047f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4047f4:	bfc2      	ittt	gt
  4047f6:	ebd4 050c 	rsbsgt	r5, r4, ip
  4047fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4047fe:	bd70      	popgt	{r4, r5, r6, pc}
  404800:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404804:	f04f 0e00 	mov.w	lr, #0
  404808:	3c01      	subs	r4, #1
  40480a:	e690      	b.n	40452e <__aeabi_dmul+0xde>
  40480c:	ea45 0e06 	orr.w	lr, r5, r6
  404810:	e68d      	b.n	40452e <__aeabi_dmul+0xde>
  404812:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  404816:	ea94 0f0c 	teq	r4, ip
  40481a:	bf08      	it	eq
  40481c:	ea95 0f0c 	teqeq	r5, ip
  404820:	f43f af3b 	beq.w	40469a <__aeabi_dmul+0x24a>
  404824:	ea94 0f0c 	teq	r4, ip
  404828:	d10a      	bne.n	404840 <__aeabi_ddiv+0x19c>
  40482a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40482e:	f47f af34 	bne.w	40469a <__aeabi_dmul+0x24a>
  404832:	ea95 0f0c 	teq	r5, ip
  404836:	f47f af25 	bne.w	404684 <__aeabi_dmul+0x234>
  40483a:	4610      	mov	r0, r2
  40483c:	4619      	mov	r1, r3
  40483e:	e72c      	b.n	40469a <__aeabi_dmul+0x24a>
  404840:	ea95 0f0c 	teq	r5, ip
  404844:	d106      	bne.n	404854 <__aeabi_ddiv+0x1b0>
  404846:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40484a:	f43f aefd 	beq.w	404648 <__aeabi_dmul+0x1f8>
  40484e:	4610      	mov	r0, r2
  404850:	4619      	mov	r1, r3
  404852:	e722      	b.n	40469a <__aeabi_dmul+0x24a>
  404854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404858:	bf18      	it	ne
  40485a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40485e:	f47f aec5 	bne.w	4045ec <__aeabi_dmul+0x19c>
  404862:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  404866:	f47f af0d 	bne.w	404684 <__aeabi_dmul+0x234>
  40486a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40486e:	f47f aeeb 	bne.w	404648 <__aeabi_dmul+0x1f8>
  404872:	e712      	b.n	40469a <__aeabi_dmul+0x24a>

00404874 <__aeabi_d2f>:
  404874:	ea4f 0241 	mov.w	r2, r1, lsl #1
  404878:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  40487c:	bf24      	itt	cs
  40487e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  404882:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  404886:	d90d      	bls.n	4048a4 <__aeabi_d2f+0x30>
  404888:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40488c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  404890:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  404894:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  404898:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  40489c:	bf08      	it	eq
  40489e:	f020 0001 	biceq.w	r0, r0, #1
  4048a2:	4770      	bx	lr
  4048a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  4048a8:	d121      	bne.n	4048ee <__aeabi_d2f+0x7a>
  4048aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  4048ae:	bfbc      	itt	lt
  4048b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  4048b4:	4770      	bxlt	lr
  4048b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4048ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
  4048be:	f1c2 0218 	rsb	r2, r2, #24
  4048c2:	f1c2 0c20 	rsb	ip, r2, #32
  4048c6:	fa10 f30c 	lsls.w	r3, r0, ip
  4048ca:	fa20 f002 	lsr.w	r0, r0, r2
  4048ce:	bf18      	it	ne
  4048d0:	f040 0001 	orrne.w	r0, r0, #1
  4048d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4048d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  4048dc:	fa03 fc0c 	lsl.w	ip, r3, ip
  4048e0:	ea40 000c 	orr.w	r0, r0, ip
  4048e4:	fa23 f302 	lsr.w	r3, r3, r2
  4048e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
  4048ec:	e7cc      	b.n	404888 <__aeabi_d2f+0x14>
  4048ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
  4048f2:	d107      	bne.n	404904 <__aeabi_d2f+0x90>
  4048f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  4048f8:	bf1e      	ittt	ne
  4048fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  4048fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  404902:	4770      	bxne	lr
  404904:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  404908:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40490c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  404910:	4770      	bx	lr
  404912:	bf00      	nop

00404914 <__errno>:
  404914:	4b01      	ldr	r3, [pc, #4]	; (40491c <__errno+0x8>)
  404916:	6818      	ldr	r0, [r3, #0]
  404918:	4770      	bx	lr
  40491a:	bf00      	nop
  40491c:	2040004c 	.word	0x2040004c

00404920 <__libc_init_array>:
  404920:	b570      	push	{r4, r5, r6, lr}
  404922:	4e0f      	ldr	r6, [pc, #60]	; (404960 <__libc_init_array+0x40>)
  404924:	4d0f      	ldr	r5, [pc, #60]	; (404964 <__libc_init_array+0x44>)
  404926:	1b76      	subs	r6, r6, r5
  404928:	10b6      	asrs	r6, r6, #2
  40492a:	bf18      	it	ne
  40492c:	2400      	movne	r4, #0
  40492e:	d005      	beq.n	40493c <__libc_init_array+0x1c>
  404930:	3401      	adds	r4, #1
  404932:	f855 3b04 	ldr.w	r3, [r5], #4
  404936:	4798      	blx	r3
  404938:	42a6      	cmp	r6, r4
  40493a:	d1f9      	bne.n	404930 <__libc_init_array+0x10>
  40493c:	4e0a      	ldr	r6, [pc, #40]	; (404968 <__libc_init_array+0x48>)
  40493e:	4d0b      	ldr	r5, [pc, #44]	; (40496c <__libc_init_array+0x4c>)
  404940:	1b76      	subs	r6, r6, r5
  404942:	f003 fcc7 	bl	4082d4 <_init>
  404946:	10b6      	asrs	r6, r6, #2
  404948:	bf18      	it	ne
  40494a:	2400      	movne	r4, #0
  40494c:	d006      	beq.n	40495c <__libc_init_array+0x3c>
  40494e:	3401      	adds	r4, #1
  404950:	f855 3b04 	ldr.w	r3, [r5], #4
  404954:	4798      	blx	r3
  404956:	42a6      	cmp	r6, r4
  404958:	d1f9      	bne.n	40494e <__libc_init_array+0x2e>
  40495a:	bd70      	pop	{r4, r5, r6, pc}
  40495c:	bd70      	pop	{r4, r5, r6, pc}
  40495e:	bf00      	nop
  404960:	004082e0 	.word	0x004082e0
  404964:	004082e0 	.word	0x004082e0
  404968:	004082e8 	.word	0x004082e8
  40496c:	004082e0 	.word	0x004082e0

00404970 <iprintf>:
  404970:	b40f      	push	{r0, r1, r2, r3}
  404972:	b500      	push	{lr}
  404974:	4907      	ldr	r1, [pc, #28]	; (404994 <iprintf+0x24>)
  404976:	b083      	sub	sp, #12
  404978:	ab04      	add	r3, sp, #16
  40497a:	6808      	ldr	r0, [r1, #0]
  40497c:	f853 2b04 	ldr.w	r2, [r3], #4
  404980:	6881      	ldr	r1, [r0, #8]
  404982:	9301      	str	r3, [sp, #4]
  404984:	f000 fc06 	bl	405194 <_vfiprintf_r>
  404988:	b003      	add	sp, #12
  40498a:	f85d eb04 	ldr.w	lr, [sp], #4
  40498e:	b004      	add	sp, #16
  404990:	4770      	bx	lr
  404992:	bf00      	nop
  404994:	2040004c 	.word	0x2040004c

00404998 <malloc>:
  404998:	4b02      	ldr	r3, [pc, #8]	; (4049a4 <malloc+0xc>)
  40499a:	4601      	mov	r1, r0
  40499c:	6818      	ldr	r0, [r3, #0]
  40499e:	f000 b803 	b.w	4049a8 <_malloc_r>
  4049a2:	bf00      	nop
  4049a4:	2040004c 	.word	0x2040004c

004049a8 <_malloc_r>:
  4049a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4049ac:	f101 060b 	add.w	r6, r1, #11
  4049b0:	2e16      	cmp	r6, #22
  4049b2:	b083      	sub	sp, #12
  4049b4:	4605      	mov	r5, r0
  4049b6:	f240 809e 	bls.w	404af6 <_malloc_r+0x14e>
  4049ba:	f036 0607 	bics.w	r6, r6, #7
  4049be:	f100 80bd 	bmi.w	404b3c <_malloc_r+0x194>
  4049c2:	42b1      	cmp	r1, r6
  4049c4:	f200 80ba 	bhi.w	404b3c <_malloc_r+0x194>
  4049c8:	f000 fb86 	bl	4050d8 <__malloc_lock>
  4049cc:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4049d0:	f0c0 8293 	bcc.w	404efa <_malloc_r+0x552>
  4049d4:	0a73      	lsrs	r3, r6, #9
  4049d6:	f000 80b8 	beq.w	404b4a <_malloc_r+0x1a2>
  4049da:	2b04      	cmp	r3, #4
  4049dc:	f200 8179 	bhi.w	404cd2 <_malloc_r+0x32a>
  4049e0:	09b3      	lsrs	r3, r6, #6
  4049e2:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4049e6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4049ea:	00c3      	lsls	r3, r0, #3
  4049ec:	4fbf      	ldr	r7, [pc, #764]	; (404cec <_malloc_r+0x344>)
  4049ee:	443b      	add	r3, r7
  4049f0:	f1a3 0108 	sub.w	r1, r3, #8
  4049f4:	685c      	ldr	r4, [r3, #4]
  4049f6:	42a1      	cmp	r1, r4
  4049f8:	d106      	bne.n	404a08 <_malloc_r+0x60>
  4049fa:	e00c      	b.n	404a16 <_malloc_r+0x6e>
  4049fc:	2a00      	cmp	r2, #0
  4049fe:	f280 80aa 	bge.w	404b56 <_malloc_r+0x1ae>
  404a02:	68e4      	ldr	r4, [r4, #12]
  404a04:	42a1      	cmp	r1, r4
  404a06:	d006      	beq.n	404a16 <_malloc_r+0x6e>
  404a08:	6863      	ldr	r3, [r4, #4]
  404a0a:	f023 0303 	bic.w	r3, r3, #3
  404a0e:	1b9a      	subs	r2, r3, r6
  404a10:	2a0f      	cmp	r2, #15
  404a12:	ddf3      	ble.n	4049fc <_malloc_r+0x54>
  404a14:	4670      	mov	r0, lr
  404a16:	693c      	ldr	r4, [r7, #16]
  404a18:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 404d00 <_malloc_r+0x358>
  404a1c:	4574      	cmp	r4, lr
  404a1e:	f000 81ab 	beq.w	404d78 <_malloc_r+0x3d0>
  404a22:	6863      	ldr	r3, [r4, #4]
  404a24:	f023 0303 	bic.w	r3, r3, #3
  404a28:	1b9a      	subs	r2, r3, r6
  404a2a:	2a0f      	cmp	r2, #15
  404a2c:	f300 8190 	bgt.w	404d50 <_malloc_r+0x3a8>
  404a30:	2a00      	cmp	r2, #0
  404a32:	f8c7 e014 	str.w	lr, [r7, #20]
  404a36:	f8c7 e010 	str.w	lr, [r7, #16]
  404a3a:	f280 809d 	bge.w	404b78 <_malloc_r+0x1d0>
  404a3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404a42:	f080 8161 	bcs.w	404d08 <_malloc_r+0x360>
  404a46:	08db      	lsrs	r3, r3, #3
  404a48:	f103 0c01 	add.w	ip, r3, #1
  404a4c:	1099      	asrs	r1, r3, #2
  404a4e:	687a      	ldr	r2, [r7, #4]
  404a50:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  404a54:	f8c4 8008 	str.w	r8, [r4, #8]
  404a58:	2301      	movs	r3, #1
  404a5a:	408b      	lsls	r3, r1
  404a5c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  404a60:	4313      	orrs	r3, r2
  404a62:	3908      	subs	r1, #8
  404a64:	60e1      	str	r1, [r4, #12]
  404a66:	607b      	str	r3, [r7, #4]
  404a68:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  404a6c:	f8c8 400c 	str.w	r4, [r8, #12]
  404a70:	1082      	asrs	r2, r0, #2
  404a72:	2401      	movs	r4, #1
  404a74:	4094      	lsls	r4, r2
  404a76:	429c      	cmp	r4, r3
  404a78:	f200 808b 	bhi.w	404b92 <_malloc_r+0x1ea>
  404a7c:	421c      	tst	r4, r3
  404a7e:	d106      	bne.n	404a8e <_malloc_r+0xe6>
  404a80:	f020 0003 	bic.w	r0, r0, #3
  404a84:	0064      	lsls	r4, r4, #1
  404a86:	421c      	tst	r4, r3
  404a88:	f100 0004 	add.w	r0, r0, #4
  404a8c:	d0fa      	beq.n	404a84 <_malloc_r+0xdc>
  404a8e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  404a92:	46cc      	mov	ip, r9
  404a94:	4680      	mov	r8, r0
  404a96:	f8dc 300c 	ldr.w	r3, [ip, #12]
  404a9a:	459c      	cmp	ip, r3
  404a9c:	d107      	bne.n	404aae <_malloc_r+0x106>
  404a9e:	e16d      	b.n	404d7c <_malloc_r+0x3d4>
  404aa0:	2a00      	cmp	r2, #0
  404aa2:	f280 817b 	bge.w	404d9c <_malloc_r+0x3f4>
  404aa6:	68db      	ldr	r3, [r3, #12]
  404aa8:	459c      	cmp	ip, r3
  404aaa:	f000 8167 	beq.w	404d7c <_malloc_r+0x3d4>
  404aae:	6859      	ldr	r1, [r3, #4]
  404ab0:	f021 0103 	bic.w	r1, r1, #3
  404ab4:	1b8a      	subs	r2, r1, r6
  404ab6:	2a0f      	cmp	r2, #15
  404ab8:	ddf2      	ble.n	404aa0 <_malloc_r+0xf8>
  404aba:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  404abe:	f8d3 8008 	ldr.w	r8, [r3, #8]
  404ac2:	9300      	str	r3, [sp, #0]
  404ac4:	199c      	adds	r4, r3, r6
  404ac6:	4628      	mov	r0, r5
  404ac8:	f046 0601 	orr.w	r6, r6, #1
  404acc:	f042 0501 	orr.w	r5, r2, #1
  404ad0:	605e      	str	r6, [r3, #4]
  404ad2:	f8c8 c00c 	str.w	ip, [r8, #12]
  404ad6:	f8cc 8008 	str.w	r8, [ip, #8]
  404ada:	617c      	str	r4, [r7, #20]
  404adc:	613c      	str	r4, [r7, #16]
  404ade:	f8c4 e00c 	str.w	lr, [r4, #12]
  404ae2:	f8c4 e008 	str.w	lr, [r4, #8]
  404ae6:	6065      	str	r5, [r4, #4]
  404ae8:	505a      	str	r2, [r3, r1]
  404aea:	f000 fafb 	bl	4050e4 <__malloc_unlock>
  404aee:	9b00      	ldr	r3, [sp, #0]
  404af0:	f103 0408 	add.w	r4, r3, #8
  404af4:	e01e      	b.n	404b34 <_malloc_r+0x18c>
  404af6:	2910      	cmp	r1, #16
  404af8:	d820      	bhi.n	404b3c <_malloc_r+0x194>
  404afa:	f000 faed 	bl	4050d8 <__malloc_lock>
  404afe:	2610      	movs	r6, #16
  404b00:	2318      	movs	r3, #24
  404b02:	2002      	movs	r0, #2
  404b04:	4f79      	ldr	r7, [pc, #484]	; (404cec <_malloc_r+0x344>)
  404b06:	443b      	add	r3, r7
  404b08:	f1a3 0208 	sub.w	r2, r3, #8
  404b0c:	685c      	ldr	r4, [r3, #4]
  404b0e:	4294      	cmp	r4, r2
  404b10:	f000 813d 	beq.w	404d8e <_malloc_r+0x3e6>
  404b14:	6863      	ldr	r3, [r4, #4]
  404b16:	68e1      	ldr	r1, [r4, #12]
  404b18:	68a6      	ldr	r6, [r4, #8]
  404b1a:	f023 0303 	bic.w	r3, r3, #3
  404b1e:	4423      	add	r3, r4
  404b20:	4628      	mov	r0, r5
  404b22:	685a      	ldr	r2, [r3, #4]
  404b24:	60f1      	str	r1, [r6, #12]
  404b26:	f042 0201 	orr.w	r2, r2, #1
  404b2a:	608e      	str	r6, [r1, #8]
  404b2c:	605a      	str	r2, [r3, #4]
  404b2e:	f000 fad9 	bl	4050e4 <__malloc_unlock>
  404b32:	3408      	adds	r4, #8
  404b34:	4620      	mov	r0, r4
  404b36:	b003      	add	sp, #12
  404b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b3c:	2400      	movs	r4, #0
  404b3e:	230c      	movs	r3, #12
  404b40:	4620      	mov	r0, r4
  404b42:	602b      	str	r3, [r5, #0]
  404b44:	b003      	add	sp, #12
  404b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b4a:	2040      	movs	r0, #64	; 0x40
  404b4c:	f44f 7300 	mov.w	r3, #512	; 0x200
  404b50:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  404b54:	e74a      	b.n	4049ec <_malloc_r+0x44>
  404b56:	4423      	add	r3, r4
  404b58:	68e1      	ldr	r1, [r4, #12]
  404b5a:	685a      	ldr	r2, [r3, #4]
  404b5c:	68a6      	ldr	r6, [r4, #8]
  404b5e:	f042 0201 	orr.w	r2, r2, #1
  404b62:	60f1      	str	r1, [r6, #12]
  404b64:	4628      	mov	r0, r5
  404b66:	608e      	str	r6, [r1, #8]
  404b68:	605a      	str	r2, [r3, #4]
  404b6a:	f000 fabb 	bl	4050e4 <__malloc_unlock>
  404b6e:	3408      	adds	r4, #8
  404b70:	4620      	mov	r0, r4
  404b72:	b003      	add	sp, #12
  404b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b78:	4423      	add	r3, r4
  404b7a:	4628      	mov	r0, r5
  404b7c:	685a      	ldr	r2, [r3, #4]
  404b7e:	f042 0201 	orr.w	r2, r2, #1
  404b82:	605a      	str	r2, [r3, #4]
  404b84:	f000 faae 	bl	4050e4 <__malloc_unlock>
  404b88:	3408      	adds	r4, #8
  404b8a:	4620      	mov	r0, r4
  404b8c:	b003      	add	sp, #12
  404b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b92:	68bc      	ldr	r4, [r7, #8]
  404b94:	6863      	ldr	r3, [r4, #4]
  404b96:	f023 0803 	bic.w	r8, r3, #3
  404b9a:	45b0      	cmp	r8, r6
  404b9c:	d304      	bcc.n	404ba8 <_malloc_r+0x200>
  404b9e:	eba8 0306 	sub.w	r3, r8, r6
  404ba2:	2b0f      	cmp	r3, #15
  404ba4:	f300 8085 	bgt.w	404cb2 <_malloc_r+0x30a>
  404ba8:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404d04 <_malloc_r+0x35c>
  404bac:	4b50      	ldr	r3, [pc, #320]	; (404cf0 <_malloc_r+0x348>)
  404bae:	f8d9 2000 	ldr.w	r2, [r9]
  404bb2:	681b      	ldr	r3, [r3, #0]
  404bb4:	3201      	adds	r2, #1
  404bb6:	4433      	add	r3, r6
  404bb8:	eb04 0a08 	add.w	sl, r4, r8
  404bbc:	f000 8155 	beq.w	404e6a <_malloc_r+0x4c2>
  404bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  404bc4:	330f      	adds	r3, #15
  404bc6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  404bca:	f02b 0b0f 	bic.w	fp, fp, #15
  404bce:	4659      	mov	r1, fp
  404bd0:	4628      	mov	r0, r5
  404bd2:	f000 fa8d 	bl	4050f0 <_sbrk_r>
  404bd6:	1c41      	adds	r1, r0, #1
  404bd8:	4602      	mov	r2, r0
  404bda:	f000 80fc 	beq.w	404dd6 <_malloc_r+0x42e>
  404bde:	4582      	cmp	sl, r0
  404be0:	f200 80f7 	bhi.w	404dd2 <_malloc_r+0x42a>
  404be4:	4b43      	ldr	r3, [pc, #268]	; (404cf4 <_malloc_r+0x34c>)
  404be6:	6819      	ldr	r1, [r3, #0]
  404be8:	4459      	add	r1, fp
  404bea:	6019      	str	r1, [r3, #0]
  404bec:	f000 814d 	beq.w	404e8a <_malloc_r+0x4e2>
  404bf0:	f8d9 0000 	ldr.w	r0, [r9]
  404bf4:	3001      	adds	r0, #1
  404bf6:	bf1b      	ittet	ne
  404bf8:	eba2 0a0a 	subne.w	sl, r2, sl
  404bfc:	4451      	addne	r1, sl
  404bfe:	f8c9 2000 	streq.w	r2, [r9]
  404c02:	6019      	strne	r1, [r3, #0]
  404c04:	f012 0107 	ands.w	r1, r2, #7
  404c08:	f000 8115 	beq.w	404e36 <_malloc_r+0x48e>
  404c0c:	f1c1 0008 	rsb	r0, r1, #8
  404c10:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404c14:	4402      	add	r2, r0
  404c16:	3108      	adds	r1, #8
  404c18:	eb02 090b 	add.w	r9, r2, fp
  404c1c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  404c20:	eba1 0909 	sub.w	r9, r1, r9
  404c24:	4649      	mov	r1, r9
  404c26:	4628      	mov	r0, r5
  404c28:	9301      	str	r3, [sp, #4]
  404c2a:	9200      	str	r2, [sp, #0]
  404c2c:	f000 fa60 	bl	4050f0 <_sbrk_r>
  404c30:	1c43      	adds	r3, r0, #1
  404c32:	e89d 000c 	ldmia.w	sp, {r2, r3}
  404c36:	f000 8143 	beq.w	404ec0 <_malloc_r+0x518>
  404c3a:	1a80      	subs	r0, r0, r2
  404c3c:	4448      	add	r0, r9
  404c3e:	f040 0001 	orr.w	r0, r0, #1
  404c42:	6819      	ldr	r1, [r3, #0]
  404c44:	60ba      	str	r2, [r7, #8]
  404c46:	4449      	add	r1, r9
  404c48:	42bc      	cmp	r4, r7
  404c4a:	6050      	str	r0, [r2, #4]
  404c4c:	6019      	str	r1, [r3, #0]
  404c4e:	d017      	beq.n	404c80 <_malloc_r+0x2d8>
  404c50:	f1b8 0f0f 	cmp.w	r8, #15
  404c54:	f240 80fb 	bls.w	404e4e <_malloc_r+0x4a6>
  404c58:	6860      	ldr	r0, [r4, #4]
  404c5a:	f1a8 020c 	sub.w	r2, r8, #12
  404c5e:	f022 0207 	bic.w	r2, r2, #7
  404c62:	eb04 0e02 	add.w	lr, r4, r2
  404c66:	f000 0001 	and.w	r0, r0, #1
  404c6a:	f04f 0c05 	mov.w	ip, #5
  404c6e:	4310      	orrs	r0, r2
  404c70:	2a0f      	cmp	r2, #15
  404c72:	6060      	str	r0, [r4, #4]
  404c74:	f8ce c004 	str.w	ip, [lr, #4]
  404c78:	f8ce c008 	str.w	ip, [lr, #8]
  404c7c:	f200 8117 	bhi.w	404eae <_malloc_r+0x506>
  404c80:	4b1d      	ldr	r3, [pc, #116]	; (404cf8 <_malloc_r+0x350>)
  404c82:	68bc      	ldr	r4, [r7, #8]
  404c84:	681a      	ldr	r2, [r3, #0]
  404c86:	4291      	cmp	r1, r2
  404c88:	bf88      	it	hi
  404c8a:	6019      	strhi	r1, [r3, #0]
  404c8c:	4b1b      	ldr	r3, [pc, #108]	; (404cfc <_malloc_r+0x354>)
  404c8e:	681a      	ldr	r2, [r3, #0]
  404c90:	4291      	cmp	r1, r2
  404c92:	6862      	ldr	r2, [r4, #4]
  404c94:	bf88      	it	hi
  404c96:	6019      	strhi	r1, [r3, #0]
  404c98:	f022 0203 	bic.w	r2, r2, #3
  404c9c:	4296      	cmp	r6, r2
  404c9e:	eba2 0306 	sub.w	r3, r2, r6
  404ca2:	d801      	bhi.n	404ca8 <_malloc_r+0x300>
  404ca4:	2b0f      	cmp	r3, #15
  404ca6:	dc04      	bgt.n	404cb2 <_malloc_r+0x30a>
  404ca8:	4628      	mov	r0, r5
  404caa:	f000 fa1b 	bl	4050e4 <__malloc_unlock>
  404cae:	2400      	movs	r4, #0
  404cb0:	e740      	b.n	404b34 <_malloc_r+0x18c>
  404cb2:	19a2      	adds	r2, r4, r6
  404cb4:	f043 0301 	orr.w	r3, r3, #1
  404cb8:	f046 0601 	orr.w	r6, r6, #1
  404cbc:	6066      	str	r6, [r4, #4]
  404cbe:	4628      	mov	r0, r5
  404cc0:	60ba      	str	r2, [r7, #8]
  404cc2:	6053      	str	r3, [r2, #4]
  404cc4:	f000 fa0e 	bl	4050e4 <__malloc_unlock>
  404cc8:	3408      	adds	r4, #8
  404cca:	4620      	mov	r0, r4
  404ccc:	b003      	add	sp, #12
  404cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404cd2:	2b14      	cmp	r3, #20
  404cd4:	d971      	bls.n	404dba <_malloc_r+0x412>
  404cd6:	2b54      	cmp	r3, #84	; 0x54
  404cd8:	f200 80a3 	bhi.w	404e22 <_malloc_r+0x47a>
  404cdc:	0b33      	lsrs	r3, r6, #12
  404cde:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  404ce2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  404ce6:	00c3      	lsls	r3, r0, #3
  404ce8:	e680      	b.n	4049ec <_malloc_r+0x44>
  404cea:	bf00      	nop
  404cec:	20400478 	.word	0x20400478
  404cf0:	2043c83c 	.word	0x2043c83c
  404cf4:	2043c80c 	.word	0x2043c80c
  404cf8:	2043c834 	.word	0x2043c834
  404cfc:	2043c838 	.word	0x2043c838
  404d00:	20400480 	.word	0x20400480
  404d04:	20400880 	.word	0x20400880
  404d08:	0a5a      	lsrs	r2, r3, #9
  404d0a:	2a04      	cmp	r2, #4
  404d0c:	d95b      	bls.n	404dc6 <_malloc_r+0x41e>
  404d0e:	2a14      	cmp	r2, #20
  404d10:	f200 80ae 	bhi.w	404e70 <_malloc_r+0x4c8>
  404d14:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404d18:	00c9      	lsls	r1, r1, #3
  404d1a:	325b      	adds	r2, #91	; 0x5b
  404d1c:	eb07 0c01 	add.w	ip, r7, r1
  404d20:	5879      	ldr	r1, [r7, r1]
  404d22:	f1ac 0c08 	sub.w	ip, ip, #8
  404d26:	458c      	cmp	ip, r1
  404d28:	f000 8088 	beq.w	404e3c <_malloc_r+0x494>
  404d2c:	684a      	ldr	r2, [r1, #4]
  404d2e:	f022 0203 	bic.w	r2, r2, #3
  404d32:	4293      	cmp	r3, r2
  404d34:	d273      	bcs.n	404e1e <_malloc_r+0x476>
  404d36:	6889      	ldr	r1, [r1, #8]
  404d38:	458c      	cmp	ip, r1
  404d3a:	d1f7      	bne.n	404d2c <_malloc_r+0x384>
  404d3c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  404d40:	687b      	ldr	r3, [r7, #4]
  404d42:	60e2      	str	r2, [r4, #12]
  404d44:	f8c4 c008 	str.w	ip, [r4, #8]
  404d48:	6094      	str	r4, [r2, #8]
  404d4a:	f8cc 400c 	str.w	r4, [ip, #12]
  404d4e:	e68f      	b.n	404a70 <_malloc_r+0xc8>
  404d50:	19a1      	adds	r1, r4, r6
  404d52:	f046 0c01 	orr.w	ip, r6, #1
  404d56:	f042 0601 	orr.w	r6, r2, #1
  404d5a:	f8c4 c004 	str.w	ip, [r4, #4]
  404d5e:	4628      	mov	r0, r5
  404d60:	6179      	str	r1, [r7, #20]
  404d62:	6139      	str	r1, [r7, #16]
  404d64:	f8c1 e00c 	str.w	lr, [r1, #12]
  404d68:	f8c1 e008 	str.w	lr, [r1, #8]
  404d6c:	604e      	str	r6, [r1, #4]
  404d6e:	50e2      	str	r2, [r4, r3]
  404d70:	f000 f9b8 	bl	4050e4 <__malloc_unlock>
  404d74:	3408      	adds	r4, #8
  404d76:	e6dd      	b.n	404b34 <_malloc_r+0x18c>
  404d78:	687b      	ldr	r3, [r7, #4]
  404d7a:	e679      	b.n	404a70 <_malloc_r+0xc8>
  404d7c:	f108 0801 	add.w	r8, r8, #1
  404d80:	f018 0f03 	tst.w	r8, #3
  404d84:	f10c 0c08 	add.w	ip, ip, #8
  404d88:	f47f ae85 	bne.w	404a96 <_malloc_r+0xee>
  404d8c:	e02d      	b.n	404dea <_malloc_r+0x442>
  404d8e:	68dc      	ldr	r4, [r3, #12]
  404d90:	42a3      	cmp	r3, r4
  404d92:	bf08      	it	eq
  404d94:	3002      	addeq	r0, #2
  404d96:	f43f ae3e 	beq.w	404a16 <_malloc_r+0x6e>
  404d9a:	e6bb      	b.n	404b14 <_malloc_r+0x16c>
  404d9c:	4419      	add	r1, r3
  404d9e:	461c      	mov	r4, r3
  404da0:	684a      	ldr	r2, [r1, #4]
  404da2:	68db      	ldr	r3, [r3, #12]
  404da4:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404da8:	f042 0201 	orr.w	r2, r2, #1
  404dac:	604a      	str	r2, [r1, #4]
  404dae:	4628      	mov	r0, r5
  404db0:	60f3      	str	r3, [r6, #12]
  404db2:	609e      	str	r6, [r3, #8]
  404db4:	f000 f996 	bl	4050e4 <__malloc_unlock>
  404db8:	e6bc      	b.n	404b34 <_malloc_r+0x18c>
  404dba:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  404dbe:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  404dc2:	00c3      	lsls	r3, r0, #3
  404dc4:	e612      	b.n	4049ec <_malloc_r+0x44>
  404dc6:	099a      	lsrs	r2, r3, #6
  404dc8:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404dcc:	00c9      	lsls	r1, r1, #3
  404dce:	3238      	adds	r2, #56	; 0x38
  404dd0:	e7a4      	b.n	404d1c <_malloc_r+0x374>
  404dd2:	42bc      	cmp	r4, r7
  404dd4:	d054      	beq.n	404e80 <_malloc_r+0x4d8>
  404dd6:	68bc      	ldr	r4, [r7, #8]
  404dd8:	6862      	ldr	r2, [r4, #4]
  404dda:	f022 0203 	bic.w	r2, r2, #3
  404dde:	e75d      	b.n	404c9c <_malloc_r+0x2f4>
  404de0:	f859 3908 	ldr.w	r3, [r9], #-8
  404de4:	4599      	cmp	r9, r3
  404de6:	f040 8086 	bne.w	404ef6 <_malloc_r+0x54e>
  404dea:	f010 0f03 	tst.w	r0, #3
  404dee:	f100 30ff 	add.w	r0, r0, #4294967295
  404df2:	d1f5      	bne.n	404de0 <_malloc_r+0x438>
  404df4:	687b      	ldr	r3, [r7, #4]
  404df6:	ea23 0304 	bic.w	r3, r3, r4
  404dfa:	607b      	str	r3, [r7, #4]
  404dfc:	0064      	lsls	r4, r4, #1
  404dfe:	429c      	cmp	r4, r3
  404e00:	f63f aec7 	bhi.w	404b92 <_malloc_r+0x1ea>
  404e04:	2c00      	cmp	r4, #0
  404e06:	f43f aec4 	beq.w	404b92 <_malloc_r+0x1ea>
  404e0a:	421c      	tst	r4, r3
  404e0c:	4640      	mov	r0, r8
  404e0e:	f47f ae3e 	bne.w	404a8e <_malloc_r+0xe6>
  404e12:	0064      	lsls	r4, r4, #1
  404e14:	421c      	tst	r4, r3
  404e16:	f100 0004 	add.w	r0, r0, #4
  404e1a:	d0fa      	beq.n	404e12 <_malloc_r+0x46a>
  404e1c:	e637      	b.n	404a8e <_malloc_r+0xe6>
  404e1e:	468c      	mov	ip, r1
  404e20:	e78c      	b.n	404d3c <_malloc_r+0x394>
  404e22:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404e26:	d815      	bhi.n	404e54 <_malloc_r+0x4ac>
  404e28:	0bf3      	lsrs	r3, r6, #15
  404e2a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  404e2e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  404e32:	00c3      	lsls	r3, r0, #3
  404e34:	e5da      	b.n	4049ec <_malloc_r+0x44>
  404e36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404e3a:	e6ed      	b.n	404c18 <_malloc_r+0x270>
  404e3c:	687b      	ldr	r3, [r7, #4]
  404e3e:	1092      	asrs	r2, r2, #2
  404e40:	2101      	movs	r1, #1
  404e42:	fa01 f202 	lsl.w	r2, r1, r2
  404e46:	4313      	orrs	r3, r2
  404e48:	607b      	str	r3, [r7, #4]
  404e4a:	4662      	mov	r2, ip
  404e4c:	e779      	b.n	404d42 <_malloc_r+0x39a>
  404e4e:	2301      	movs	r3, #1
  404e50:	6053      	str	r3, [r2, #4]
  404e52:	e729      	b.n	404ca8 <_malloc_r+0x300>
  404e54:	f240 5254 	movw	r2, #1364	; 0x554
  404e58:	4293      	cmp	r3, r2
  404e5a:	d822      	bhi.n	404ea2 <_malloc_r+0x4fa>
  404e5c:	0cb3      	lsrs	r3, r6, #18
  404e5e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  404e62:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  404e66:	00c3      	lsls	r3, r0, #3
  404e68:	e5c0      	b.n	4049ec <_malloc_r+0x44>
  404e6a:	f103 0b10 	add.w	fp, r3, #16
  404e6e:	e6ae      	b.n	404bce <_malloc_r+0x226>
  404e70:	2a54      	cmp	r2, #84	; 0x54
  404e72:	d829      	bhi.n	404ec8 <_malloc_r+0x520>
  404e74:	0b1a      	lsrs	r2, r3, #12
  404e76:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  404e7a:	00c9      	lsls	r1, r1, #3
  404e7c:	326e      	adds	r2, #110	; 0x6e
  404e7e:	e74d      	b.n	404d1c <_malloc_r+0x374>
  404e80:	4b20      	ldr	r3, [pc, #128]	; (404f04 <_malloc_r+0x55c>)
  404e82:	6819      	ldr	r1, [r3, #0]
  404e84:	4459      	add	r1, fp
  404e86:	6019      	str	r1, [r3, #0]
  404e88:	e6b2      	b.n	404bf0 <_malloc_r+0x248>
  404e8a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  404e8e:	2800      	cmp	r0, #0
  404e90:	f47f aeae 	bne.w	404bf0 <_malloc_r+0x248>
  404e94:	eb08 030b 	add.w	r3, r8, fp
  404e98:	68ba      	ldr	r2, [r7, #8]
  404e9a:	f043 0301 	orr.w	r3, r3, #1
  404e9e:	6053      	str	r3, [r2, #4]
  404ea0:	e6ee      	b.n	404c80 <_malloc_r+0x2d8>
  404ea2:	207f      	movs	r0, #127	; 0x7f
  404ea4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404ea8:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  404eac:	e59e      	b.n	4049ec <_malloc_r+0x44>
  404eae:	f104 0108 	add.w	r1, r4, #8
  404eb2:	4628      	mov	r0, r5
  404eb4:	9300      	str	r3, [sp, #0]
  404eb6:	f001 fa89 	bl	4063cc <_free_r>
  404eba:	9b00      	ldr	r3, [sp, #0]
  404ebc:	6819      	ldr	r1, [r3, #0]
  404ebe:	e6df      	b.n	404c80 <_malloc_r+0x2d8>
  404ec0:	2001      	movs	r0, #1
  404ec2:	f04f 0900 	mov.w	r9, #0
  404ec6:	e6bc      	b.n	404c42 <_malloc_r+0x29a>
  404ec8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404ecc:	d805      	bhi.n	404eda <_malloc_r+0x532>
  404ece:	0bda      	lsrs	r2, r3, #15
  404ed0:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404ed4:	00c9      	lsls	r1, r1, #3
  404ed6:	3277      	adds	r2, #119	; 0x77
  404ed8:	e720      	b.n	404d1c <_malloc_r+0x374>
  404eda:	f240 5154 	movw	r1, #1364	; 0x554
  404ede:	428a      	cmp	r2, r1
  404ee0:	d805      	bhi.n	404eee <_malloc_r+0x546>
  404ee2:	0c9a      	lsrs	r2, r3, #18
  404ee4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404ee8:	00c9      	lsls	r1, r1, #3
  404eea:	327c      	adds	r2, #124	; 0x7c
  404eec:	e716      	b.n	404d1c <_malloc_r+0x374>
  404eee:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  404ef2:	227e      	movs	r2, #126	; 0x7e
  404ef4:	e712      	b.n	404d1c <_malloc_r+0x374>
  404ef6:	687b      	ldr	r3, [r7, #4]
  404ef8:	e780      	b.n	404dfc <_malloc_r+0x454>
  404efa:	08f0      	lsrs	r0, r6, #3
  404efc:	f106 0308 	add.w	r3, r6, #8
  404f00:	e600      	b.n	404b04 <_malloc_r+0x15c>
  404f02:	bf00      	nop
  404f04:	2043c80c 	.word	0x2043c80c

00404f08 <memcpy>:
  404f08:	4684      	mov	ip, r0
  404f0a:	ea41 0300 	orr.w	r3, r1, r0
  404f0e:	f013 0303 	ands.w	r3, r3, #3
  404f12:	d16d      	bne.n	404ff0 <memcpy+0xe8>
  404f14:	3a40      	subs	r2, #64	; 0x40
  404f16:	d341      	bcc.n	404f9c <memcpy+0x94>
  404f18:	f851 3b04 	ldr.w	r3, [r1], #4
  404f1c:	f840 3b04 	str.w	r3, [r0], #4
  404f20:	f851 3b04 	ldr.w	r3, [r1], #4
  404f24:	f840 3b04 	str.w	r3, [r0], #4
  404f28:	f851 3b04 	ldr.w	r3, [r1], #4
  404f2c:	f840 3b04 	str.w	r3, [r0], #4
  404f30:	f851 3b04 	ldr.w	r3, [r1], #4
  404f34:	f840 3b04 	str.w	r3, [r0], #4
  404f38:	f851 3b04 	ldr.w	r3, [r1], #4
  404f3c:	f840 3b04 	str.w	r3, [r0], #4
  404f40:	f851 3b04 	ldr.w	r3, [r1], #4
  404f44:	f840 3b04 	str.w	r3, [r0], #4
  404f48:	f851 3b04 	ldr.w	r3, [r1], #4
  404f4c:	f840 3b04 	str.w	r3, [r0], #4
  404f50:	f851 3b04 	ldr.w	r3, [r1], #4
  404f54:	f840 3b04 	str.w	r3, [r0], #4
  404f58:	f851 3b04 	ldr.w	r3, [r1], #4
  404f5c:	f840 3b04 	str.w	r3, [r0], #4
  404f60:	f851 3b04 	ldr.w	r3, [r1], #4
  404f64:	f840 3b04 	str.w	r3, [r0], #4
  404f68:	f851 3b04 	ldr.w	r3, [r1], #4
  404f6c:	f840 3b04 	str.w	r3, [r0], #4
  404f70:	f851 3b04 	ldr.w	r3, [r1], #4
  404f74:	f840 3b04 	str.w	r3, [r0], #4
  404f78:	f851 3b04 	ldr.w	r3, [r1], #4
  404f7c:	f840 3b04 	str.w	r3, [r0], #4
  404f80:	f851 3b04 	ldr.w	r3, [r1], #4
  404f84:	f840 3b04 	str.w	r3, [r0], #4
  404f88:	f851 3b04 	ldr.w	r3, [r1], #4
  404f8c:	f840 3b04 	str.w	r3, [r0], #4
  404f90:	f851 3b04 	ldr.w	r3, [r1], #4
  404f94:	f840 3b04 	str.w	r3, [r0], #4
  404f98:	3a40      	subs	r2, #64	; 0x40
  404f9a:	d2bd      	bcs.n	404f18 <memcpy+0x10>
  404f9c:	3230      	adds	r2, #48	; 0x30
  404f9e:	d311      	bcc.n	404fc4 <memcpy+0xbc>
  404fa0:	f851 3b04 	ldr.w	r3, [r1], #4
  404fa4:	f840 3b04 	str.w	r3, [r0], #4
  404fa8:	f851 3b04 	ldr.w	r3, [r1], #4
  404fac:	f840 3b04 	str.w	r3, [r0], #4
  404fb0:	f851 3b04 	ldr.w	r3, [r1], #4
  404fb4:	f840 3b04 	str.w	r3, [r0], #4
  404fb8:	f851 3b04 	ldr.w	r3, [r1], #4
  404fbc:	f840 3b04 	str.w	r3, [r0], #4
  404fc0:	3a10      	subs	r2, #16
  404fc2:	d2ed      	bcs.n	404fa0 <memcpy+0x98>
  404fc4:	320c      	adds	r2, #12
  404fc6:	d305      	bcc.n	404fd4 <memcpy+0xcc>
  404fc8:	f851 3b04 	ldr.w	r3, [r1], #4
  404fcc:	f840 3b04 	str.w	r3, [r0], #4
  404fd0:	3a04      	subs	r2, #4
  404fd2:	d2f9      	bcs.n	404fc8 <memcpy+0xc0>
  404fd4:	3204      	adds	r2, #4
  404fd6:	d008      	beq.n	404fea <memcpy+0xe2>
  404fd8:	07d2      	lsls	r2, r2, #31
  404fda:	bf1c      	itt	ne
  404fdc:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404fe0:	f800 3b01 	strbne.w	r3, [r0], #1
  404fe4:	d301      	bcc.n	404fea <memcpy+0xe2>
  404fe6:	880b      	ldrh	r3, [r1, #0]
  404fe8:	8003      	strh	r3, [r0, #0]
  404fea:	4660      	mov	r0, ip
  404fec:	4770      	bx	lr
  404fee:	bf00      	nop
  404ff0:	2a08      	cmp	r2, #8
  404ff2:	d313      	bcc.n	40501c <memcpy+0x114>
  404ff4:	078b      	lsls	r3, r1, #30
  404ff6:	d08d      	beq.n	404f14 <memcpy+0xc>
  404ff8:	f010 0303 	ands.w	r3, r0, #3
  404ffc:	d08a      	beq.n	404f14 <memcpy+0xc>
  404ffe:	f1c3 0304 	rsb	r3, r3, #4
  405002:	1ad2      	subs	r2, r2, r3
  405004:	07db      	lsls	r3, r3, #31
  405006:	bf1c      	itt	ne
  405008:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40500c:	f800 3b01 	strbne.w	r3, [r0], #1
  405010:	d380      	bcc.n	404f14 <memcpy+0xc>
  405012:	f831 3b02 	ldrh.w	r3, [r1], #2
  405016:	f820 3b02 	strh.w	r3, [r0], #2
  40501a:	e77b      	b.n	404f14 <memcpy+0xc>
  40501c:	3a04      	subs	r2, #4
  40501e:	d3d9      	bcc.n	404fd4 <memcpy+0xcc>
  405020:	3a01      	subs	r2, #1
  405022:	f811 3b01 	ldrb.w	r3, [r1], #1
  405026:	f800 3b01 	strb.w	r3, [r0], #1
  40502a:	d2f9      	bcs.n	405020 <memcpy+0x118>
  40502c:	780b      	ldrb	r3, [r1, #0]
  40502e:	7003      	strb	r3, [r0, #0]
  405030:	784b      	ldrb	r3, [r1, #1]
  405032:	7043      	strb	r3, [r0, #1]
  405034:	788b      	ldrb	r3, [r1, #2]
  405036:	7083      	strb	r3, [r0, #2]
  405038:	4660      	mov	r0, ip
  40503a:	4770      	bx	lr

0040503c <memset>:
  40503c:	b470      	push	{r4, r5, r6}
  40503e:	0786      	lsls	r6, r0, #30
  405040:	d046      	beq.n	4050d0 <memset+0x94>
  405042:	1e54      	subs	r4, r2, #1
  405044:	2a00      	cmp	r2, #0
  405046:	d041      	beq.n	4050cc <memset+0x90>
  405048:	b2ca      	uxtb	r2, r1
  40504a:	4603      	mov	r3, r0
  40504c:	e002      	b.n	405054 <memset+0x18>
  40504e:	f114 34ff 	adds.w	r4, r4, #4294967295
  405052:	d33b      	bcc.n	4050cc <memset+0x90>
  405054:	f803 2b01 	strb.w	r2, [r3], #1
  405058:	079d      	lsls	r5, r3, #30
  40505a:	d1f8      	bne.n	40504e <memset+0x12>
  40505c:	2c03      	cmp	r4, #3
  40505e:	d92e      	bls.n	4050be <memset+0x82>
  405060:	b2cd      	uxtb	r5, r1
  405062:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  405066:	2c0f      	cmp	r4, #15
  405068:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40506c:	d919      	bls.n	4050a2 <memset+0x66>
  40506e:	f103 0210 	add.w	r2, r3, #16
  405072:	4626      	mov	r6, r4
  405074:	3e10      	subs	r6, #16
  405076:	2e0f      	cmp	r6, #15
  405078:	f842 5c10 	str.w	r5, [r2, #-16]
  40507c:	f842 5c0c 	str.w	r5, [r2, #-12]
  405080:	f842 5c08 	str.w	r5, [r2, #-8]
  405084:	f842 5c04 	str.w	r5, [r2, #-4]
  405088:	f102 0210 	add.w	r2, r2, #16
  40508c:	d8f2      	bhi.n	405074 <memset+0x38>
  40508e:	f1a4 0210 	sub.w	r2, r4, #16
  405092:	f022 020f 	bic.w	r2, r2, #15
  405096:	f004 040f 	and.w	r4, r4, #15
  40509a:	3210      	adds	r2, #16
  40509c:	2c03      	cmp	r4, #3
  40509e:	4413      	add	r3, r2
  4050a0:	d90d      	bls.n	4050be <memset+0x82>
  4050a2:	461e      	mov	r6, r3
  4050a4:	4622      	mov	r2, r4
  4050a6:	3a04      	subs	r2, #4
  4050a8:	2a03      	cmp	r2, #3
  4050aa:	f846 5b04 	str.w	r5, [r6], #4
  4050ae:	d8fa      	bhi.n	4050a6 <memset+0x6a>
  4050b0:	1f22      	subs	r2, r4, #4
  4050b2:	f022 0203 	bic.w	r2, r2, #3
  4050b6:	3204      	adds	r2, #4
  4050b8:	4413      	add	r3, r2
  4050ba:	f004 0403 	and.w	r4, r4, #3
  4050be:	b12c      	cbz	r4, 4050cc <memset+0x90>
  4050c0:	b2c9      	uxtb	r1, r1
  4050c2:	441c      	add	r4, r3
  4050c4:	f803 1b01 	strb.w	r1, [r3], #1
  4050c8:	429c      	cmp	r4, r3
  4050ca:	d1fb      	bne.n	4050c4 <memset+0x88>
  4050cc:	bc70      	pop	{r4, r5, r6}
  4050ce:	4770      	bx	lr
  4050d0:	4614      	mov	r4, r2
  4050d2:	4603      	mov	r3, r0
  4050d4:	e7c2      	b.n	40505c <memset+0x20>
  4050d6:	bf00      	nop

004050d8 <__malloc_lock>:
  4050d8:	4801      	ldr	r0, [pc, #4]	; (4050e0 <__malloc_lock+0x8>)
  4050da:	f001 bc11 	b.w	406900 <__retarget_lock_acquire_recursive>
  4050de:	bf00      	nop
  4050e0:	2043f4a0 	.word	0x2043f4a0

004050e4 <__malloc_unlock>:
  4050e4:	4801      	ldr	r0, [pc, #4]	; (4050ec <__malloc_unlock+0x8>)
  4050e6:	f001 bc0d 	b.w	406904 <__retarget_lock_release_recursive>
  4050ea:	bf00      	nop
  4050ec:	2043f4a0 	.word	0x2043f4a0

004050f0 <_sbrk_r>:
  4050f0:	b538      	push	{r3, r4, r5, lr}
  4050f2:	4c07      	ldr	r4, [pc, #28]	; (405110 <_sbrk_r+0x20>)
  4050f4:	2300      	movs	r3, #0
  4050f6:	4605      	mov	r5, r0
  4050f8:	4608      	mov	r0, r1
  4050fa:	6023      	str	r3, [r4, #0]
  4050fc:	f7fd fa22 	bl	402544 <_sbrk>
  405100:	1c43      	adds	r3, r0, #1
  405102:	d000      	beq.n	405106 <_sbrk_r+0x16>
  405104:	bd38      	pop	{r3, r4, r5, pc}
  405106:	6823      	ldr	r3, [r4, #0]
  405108:	2b00      	cmp	r3, #0
  40510a:	d0fb      	beq.n	405104 <_sbrk_r+0x14>
  40510c:	602b      	str	r3, [r5, #0]
  40510e:	bd38      	pop	{r3, r4, r5, pc}
  405110:	2043f4b4 	.word	0x2043f4b4

00405114 <__sprint_r.part.0>:
  405114:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405118:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40511a:	049c      	lsls	r4, r3, #18
  40511c:	4693      	mov	fp, r2
  40511e:	d52f      	bpl.n	405180 <__sprint_r.part.0+0x6c>
  405120:	6893      	ldr	r3, [r2, #8]
  405122:	6812      	ldr	r2, [r2, #0]
  405124:	b353      	cbz	r3, 40517c <__sprint_r.part.0+0x68>
  405126:	460e      	mov	r6, r1
  405128:	4607      	mov	r7, r0
  40512a:	f102 0908 	add.w	r9, r2, #8
  40512e:	e919 0420 	ldmdb	r9, {r5, sl}
  405132:	ea5f 089a 	movs.w	r8, sl, lsr #2
  405136:	d017      	beq.n	405168 <__sprint_r.part.0+0x54>
  405138:	3d04      	subs	r5, #4
  40513a:	2400      	movs	r4, #0
  40513c:	e001      	b.n	405142 <__sprint_r.part.0+0x2e>
  40513e:	45a0      	cmp	r8, r4
  405140:	d010      	beq.n	405164 <__sprint_r.part.0+0x50>
  405142:	4632      	mov	r2, r6
  405144:	f855 1f04 	ldr.w	r1, [r5, #4]!
  405148:	4638      	mov	r0, r7
  40514a:	f001 f8bb 	bl	4062c4 <_fputwc_r>
  40514e:	1c43      	adds	r3, r0, #1
  405150:	f104 0401 	add.w	r4, r4, #1
  405154:	d1f3      	bne.n	40513e <__sprint_r.part.0+0x2a>
  405156:	2300      	movs	r3, #0
  405158:	f8cb 3008 	str.w	r3, [fp, #8]
  40515c:	f8cb 3004 	str.w	r3, [fp, #4]
  405160:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405164:	f8db 3008 	ldr.w	r3, [fp, #8]
  405168:	f02a 0a03 	bic.w	sl, sl, #3
  40516c:	eba3 030a 	sub.w	r3, r3, sl
  405170:	f8cb 3008 	str.w	r3, [fp, #8]
  405174:	f109 0908 	add.w	r9, r9, #8
  405178:	2b00      	cmp	r3, #0
  40517a:	d1d8      	bne.n	40512e <__sprint_r.part.0+0x1a>
  40517c:	2000      	movs	r0, #0
  40517e:	e7ea      	b.n	405156 <__sprint_r.part.0+0x42>
  405180:	f001 fa0a 	bl	406598 <__sfvwrite_r>
  405184:	2300      	movs	r3, #0
  405186:	f8cb 3008 	str.w	r3, [fp, #8]
  40518a:	f8cb 3004 	str.w	r3, [fp, #4]
  40518e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405192:	bf00      	nop

00405194 <_vfiprintf_r>:
  405194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405198:	b0ad      	sub	sp, #180	; 0xb4
  40519a:	461d      	mov	r5, r3
  40519c:	468b      	mov	fp, r1
  40519e:	4690      	mov	r8, r2
  4051a0:	9307      	str	r3, [sp, #28]
  4051a2:	9006      	str	r0, [sp, #24]
  4051a4:	b118      	cbz	r0, 4051ae <_vfiprintf_r+0x1a>
  4051a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4051a8:	2b00      	cmp	r3, #0
  4051aa:	f000 80f3 	beq.w	405394 <_vfiprintf_r+0x200>
  4051ae:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4051b2:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4051b6:	07df      	lsls	r7, r3, #31
  4051b8:	b281      	uxth	r1, r0
  4051ba:	d402      	bmi.n	4051c2 <_vfiprintf_r+0x2e>
  4051bc:	058e      	lsls	r6, r1, #22
  4051be:	f140 80fc 	bpl.w	4053ba <_vfiprintf_r+0x226>
  4051c2:	048c      	lsls	r4, r1, #18
  4051c4:	d40a      	bmi.n	4051dc <_vfiprintf_r+0x48>
  4051c6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4051ca:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4051ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4051d2:	f8ab 100c 	strh.w	r1, [fp, #12]
  4051d6:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4051da:	b289      	uxth	r1, r1
  4051dc:	0708      	lsls	r0, r1, #28
  4051de:	f140 80b3 	bpl.w	405348 <_vfiprintf_r+0x1b4>
  4051e2:	f8db 3010 	ldr.w	r3, [fp, #16]
  4051e6:	2b00      	cmp	r3, #0
  4051e8:	f000 80ae 	beq.w	405348 <_vfiprintf_r+0x1b4>
  4051ec:	f001 031a 	and.w	r3, r1, #26
  4051f0:	2b0a      	cmp	r3, #10
  4051f2:	f000 80b5 	beq.w	405360 <_vfiprintf_r+0x1cc>
  4051f6:	2300      	movs	r3, #0
  4051f8:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  4051fc:	930b      	str	r3, [sp, #44]	; 0x2c
  4051fe:	9311      	str	r3, [sp, #68]	; 0x44
  405200:	9310      	str	r3, [sp, #64]	; 0x40
  405202:	9303      	str	r3, [sp, #12]
  405204:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  405208:	46ca      	mov	sl, r9
  40520a:	f8cd b010 	str.w	fp, [sp, #16]
  40520e:	f898 3000 	ldrb.w	r3, [r8]
  405212:	4644      	mov	r4, r8
  405214:	b1fb      	cbz	r3, 405256 <_vfiprintf_r+0xc2>
  405216:	2b25      	cmp	r3, #37	; 0x25
  405218:	d102      	bne.n	405220 <_vfiprintf_r+0x8c>
  40521a:	e01c      	b.n	405256 <_vfiprintf_r+0xc2>
  40521c:	2b25      	cmp	r3, #37	; 0x25
  40521e:	d003      	beq.n	405228 <_vfiprintf_r+0x94>
  405220:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  405224:	2b00      	cmp	r3, #0
  405226:	d1f9      	bne.n	40521c <_vfiprintf_r+0x88>
  405228:	eba4 0508 	sub.w	r5, r4, r8
  40522c:	b19d      	cbz	r5, 405256 <_vfiprintf_r+0xc2>
  40522e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405230:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405232:	f8ca 8000 	str.w	r8, [sl]
  405236:	3301      	adds	r3, #1
  405238:	442a      	add	r2, r5
  40523a:	2b07      	cmp	r3, #7
  40523c:	f8ca 5004 	str.w	r5, [sl, #4]
  405240:	9211      	str	r2, [sp, #68]	; 0x44
  405242:	9310      	str	r3, [sp, #64]	; 0x40
  405244:	dd7a      	ble.n	40533c <_vfiprintf_r+0x1a8>
  405246:	2a00      	cmp	r2, #0
  405248:	f040 84b0 	bne.w	405bac <_vfiprintf_r+0xa18>
  40524c:	9b03      	ldr	r3, [sp, #12]
  40524e:	9210      	str	r2, [sp, #64]	; 0x40
  405250:	442b      	add	r3, r5
  405252:	46ca      	mov	sl, r9
  405254:	9303      	str	r3, [sp, #12]
  405256:	7823      	ldrb	r3, [r4, #0]
  405258:	2b00      	cmp	r3, #0
  40525a:	f000 83e0 	beq.w	405a1e <_vfiprintf_r+0x88a>
  40525e:	2000      	movs	r0, #0
  405260:	f04f 0300 	mov.w	r3, #0
  405264:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  405268:	f104 0801 	add.w	r8, r4, #1
  40526c:	7862      	ldrb	r2, [r4, #1]
  40526e:	4605      	mov	r5, r0
  405270:	4606      	mov	r6, r0
  405272:	4603      	mov	r3, r0
  405274:	f04f 34ff 	mov.w	r4, #4294967295
  405278:	f108 0801 	add.w	r8, r8, #1
  40527c:	f1a2 0120 	sub.w	r1, r2, #32
  405280:	2958      	cmp	r1, #88	; 0x58
  405282:	f200 82de 	bhi.w	405842 <_vfiprintf_r+0x6ae>
  405286:	e8df f011 	tbh	[pc, r1, lsl #1]
  40528a:	0221      	.short	0x0221
  40528c:	02dc02dc 	.word	0x02dc02dc
  405290:	02dc0229 	.word	0x02dc0229
  405294:	02dc02dc 	.word	0x02dc02dc
  405298:	02dc02dc 	.word	0x02dc02dc
  40529c:	028902dc 	.word	0x028902dc
  4052a0:	02dc0295 	.word	0x02dc0295
  4052a4:	02bd00a2 	.word	0x02bd00a2
  4052a8:	019f02dc 	.word	0x019f02dc
  4052ac:	01a401a4 	.word	0x01a401a4
  4052b0:	01a401a4 	.word	0x01a401a4
  4052b4:	01a401a4 	.word	0x01a401a4
  4052b8:	01a401a4 	.word	0x01a401a4
  4052bc:	02dc01a4 	.word	0x02dc01a4
  4052c0:	02dc02dc 	.word	0x02dc02dc
  4052c4:	02dc02dc 	.word	0x02dc02dc
  4052c8:	02dc02dc 	.word	0x02dc02dc
  4052cc:	02dc02dc 	.word	0x02dc02dc
  4052d0:	01b202dc 	.word	0x01b202dc
  4052d4:	02dc02dc 	.word	0x02dc02dc
  4052d8:	02dc02dc 	.word	0x02dc02dc
  4052dc:	02dc02dc 	.word	0x02dc02dc
  4052e0:	02dc02dc 	.word	0x02dc02dc
  4052e4:	02dc02dc 	.word	0x02dc02dc
  4052e8:	02dc0197 	.word	0x02dc0197
  4052ec:	02dc02dc 	.word	0x02dc02dc
  4052f0:	02dc02dc 	.word	0x02dc02dc
  4052f4:	02dc019b 	.word	0x02dc019b
  4052f8:	025302dc 	.word	0x025302dc
  4052fc:	02dc02dc 	.word	0x02dc02dc
  405300:	02dc02dc 	.word	0x02dc02dc
  405304:	02dc02dc 	.word	0x02dc02dc
  405308:	02dc02dc 	.word	0x02dc02dc
  40530c:	02dc02dc 	.word	0x02dc02dc
  405310:	021b025a 	.word	0x021b025a
  405314:	02dc02dc 	.word	0x02dc02dc
  405318:	026e02dc 	.word	0x026e02dc
  40531c:	02dc021b 	.word	0x02dc021b
  405320:	027302dc 	.word	0x027302dc
  405324:	01f502dc 	.word	0x01f502dc
  405328:	02090182 	.word	0x02090182
  40532c:	02dc02d7 	.word	0x02dc02d7
  405330:	02dc029a 	.word	0x02dc029a
  405334:	02dc00a7 	.word	0x02dc00a7
  405338:	022e02dc 	.word	0x022e02dc
  40533c:	f10a 0a08 	add.w	sl, sl, #8
  405340:	9b03      	ldr	r3, [sp, #12]
  405342:	442b      	add	r3, r5
  405344:	9303      	str	r3, [sp, #12]
  405346:	e786      	b.n	405256 <_vfiprintf_r+0xc2>
  405348:	4659      	mov	r1, fp
  40534a:	9806      	ldr	r0, [sp, #24]
  40534c:	f000 fdac 	bl	405ea8 <__swsetup_r>
  405350:	bb18      	cbnz	r0, 40539a <_vfiprintf_r+0x206>
  405352:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  405356:	f001 031a 	and.w	r3, r1, #26
  40535a:	2b0a      	cmp	r3, #10
  40535c:	f47f af4b 	bne.w	4051f6 <_vfiprintf_r+0x62>
  405360:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  405364:	2b00      	cmp	r3, #0
  405366:	f6ff af46 	blt.w	4051f6 <_vfiprintf_r+0x62>
  40536a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40536e:	07db      	lsls	r3, r3, #31
  405370:	d405      	bmi.n	40537e <_vfiprintf_r+0x1ea>
  405372:	058f      	lsls	r7, r1, #22
  405374:	d403      	bmi.n	40537e <_vfiprintf_r+0x1ea>
  405376:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40537a:	f001 fac3 	bl	406904 <__retarget_lock_release_recursive>
  40537e:	462b      	mov	r3, r5
  405380:	4642      	mov	r2, r8
  405382:	4659      	mov	r1, fp
  405384:	9806      	ldr	r0, [sp, #24]
  405386:	f000 fd4d 	bl	405e24 <__sbprintf>
  40538a:	9003      	str	r0, [sp, #12]
  40538c:	9803      	ldr	r0, [sp, #12]
  40538e:	b02d      	add	sp, #180	; 0xb4
  405390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405394:	f000 fef4 	bl	406180 <__sinit>
  405398:	e709      	b.n	4051ae <_vfiprintf_r+0x1a>
  40539a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40539e:	07d9      	lsls	r1, r3, #31
  4053a0:	d404      	bmi.n	4053ac <_vfiprintf_r+0x218>
  4053a2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4053a6:	059a      	lsls	r2, r3, #22
  4053a8:	f140 84aa 	bpl.w	405d00 <_vfiprintf_r+0xb6c>
  4053ac:	f04f 33ff 	mov.w	r3, #4294967295
  4053b0:	9303      	str	r3, [sp, #12]
  4053b2:	9803      	ldr	r0, [sp, #12]
  4053b4:	b02d      	add	sp, #180	; 0xb4
  4053b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4053ba:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4053be:	f001 fa9f 	bl	406900 <__retarget_lock_acquire_recursive>
  4053c2:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4053c6:	b281      	uxth	r1, r0
  4053c8:	e6fb      	b.n	4051c2 <_vfiprintf_r+0x2e>
  4053ca:	4276      	negs	r6, r6
  4053cc:	9207      	str	r2, [sp, #28]
  4053ce:	f043 0304 	orr.w	r3, r3, #4
  4053d2:	f898 2000 	ldrb.w	r2, [r8]
  4053d6:	e74f      	b.n	405278 <_vfiprintf_r+0xe4>
  4053d8:	9608      	str	r6, [sp, #32]
  4053da:	069e      	lsls	r6, r3, #26
  4053dc:	f100 8450 	bmi.w	405c80 <_vfiprintf_r+0xaec>
  4053e0:	9907      	ldr	r1, [sp, #28]
  4053e2:	06dd      	lsls	r5, r3, #27
  4053e4:	460a      	mov	r2, r1
  4053e6:	f100 83ef 	bmi.w	405bc8 <_vfiprintf_r+0xa34>
  4053ea:	0658      	lsls	r0, r3, #25
  4053ec:	f140 83ec 	bpl.w	405bc8 <_vfiprintf_r+0xa34>
  4053f0:	880e      	ldrh	r6, [r1, #0]
  4053f2:	3104      	adds	r1, #4
  4053f4:	2700      	movs	r7, #0
  4053f6:	2201      	movs	r2, #1
  4053f8:	9107      	str	r1, [sp, #28]
  4053fa:	f04f 0100 	mov.w	r1, #0
  4053fe:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  405402:	2500      	movs	r5, #0
  405404:	1c61      	adds	r1, r4, #1
  405406:	f000 8116 	beq.w	405636 <_vfiprintf_r+0x4a2>
  40540a:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  40540e:	9102      	str	r1, [sp, #8]
  405410:	ea56 0107 	orrs.w	r1, r6, r7
  405414:	f040 8114 	bne.w	405640 <_vfiprintf_r+0x4ac>
  405418:	2c00      	cmp	r4, #0
  40541a:	f040 835c 	bne.w	405ad6 <_vfiprintf_r+0x942>
  40541e:	2a00      	cmp	r2, #0
  405420:	f040 83b7 	bne.w	405b92 <_vfiprintf_r+0x9fe>
  405424:	f013 0301 	ands.w	r3, r3, #1
  405428:	9305      	str	r3, [sp, #20]
  40542a:	f000 8457 	beq.w	405cdc <_vfiprintf_r+0xb48>
  40542e:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  405432:	2330      	movs	r3, #48	; 0x30
  405434:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  405438:	9b05      	ldr	r3, [sp, #20]
  40543a:	42a3      	cmp	r3, r4
  40543c:	bfb8      	it	lt
  40543e:	4623      	movlt	r3, r4
  405440:	9301      	str	r3, [sp, #4]
  405442:	b10d      	cbz	r5, 405448 <_vfiprintf_r+0x2b4>
  405444:	3301      	adds	r3, #1
  405446:	9301      	str	r3, [sp, #4]
  405448:	9b02      	ldr	r3, [sp, #8]
  40544a:	f013 0302 	ands.w	r3, r3, #2
  40544e:	9309      	str	r3, [sp, #36]	; 0x24
  405450:	d002      	beq.n	405458 <_vfiprintf_r+0x2c4>
  405452:	9b01      	ldr	r3, [sp, #4]
  405454:	3302      	adds	r3, #2
  405456:	9301      	str	r3, [sp, #4]
  405458:	9b02      	ldr	r3, [sp, #8]
  40545a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40545e:	930a      	str	r3, [sp, #40]	; 0x28
  405460:	f040 8217 	bne.w	405892 <_vfiprintf_r+0x6fe>
  405464:	9b08      	ldr	r3, [sp, #32]
  405466:	9a01      	ldr	r2, [sp, #4]
  405468:	1a9d      	subs	r5, r3, r2
  40546a:	2d00      	cmp	r5, #0
  40546c:	f340 8211 	ble.w	405892 <_vfiprintf_r+0x6fe>
  405470:	2d10      	cmp	r5, #16
  405472:	f340 8490 	ble.w	405d96 <_vfiprintf_r+0xc02>
  405476:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405478:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40547a:	4ec4      	ldr	r6, [pc, #784]	; (40578c <_vfiprintf_r+0x5f8>)
  40547c:	46d6      	mov	lr, sl
  40547e:	2710      	movs	r7, #16
  405480:	46a2      	mov	sl, r4
  405482:	4619      	mov	r1, r3
  405484:	9c06      	ldr	r4, [sp, #24]
  405486:	e007      	b.n	405498 <_vfiprintf_r+0x304>
  405488:	f101 0c02 	add.w	ip, r1, #2
  40548c:	f10e 0e08 	add.w	lr, lr, #8
  405490:	4601      	mov	r1, r0
  405492:	3d10      	subs	r5, #16
  405494:	2d10      	cmp	r5, #16
  405496:	dd11      	ble.n	4054bc <_vfiprintf_r+0x328>
  405498:	1c48      	adds	r0, r1, #1
  40549a:	3210      	adds	r2, #16
  40549c:	2807      	cmp	r0, #7
  40549e:	9211      	str	r2, [sp, #68]	; 0x44
  4054a0:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4054a4:	9010      	str	r0, [sp, #64]	; 0x40
  4054a6:	ddef      	ble.n	405488 <_vfiprintf_r+0x2f4>
  4054a8:	2a00      	cmp	r2, #0
  4054aa:	f040 81e4 	bne.w	405876 <_vfiprintf_r+0x6e2>
  4054ae:	3d10      	subs	r5, #16
  4054b0:	2d10      	cmp	r5, #16
  4054b2:	4611      	mov	r1, r2
  4054b4:	f04f 0c01 	mov.w	ip, #1
  4054b8:	46ce      	mov	lr, r9
  4054ba:	dced      	bgt.n	405498 <_vfiprintf_r+0x304>
  4054bc:	4654      	mov	r4, sl
  4054be:	4661      	mov	r1, ip
  4054c0:	46f2      	mov	sl, lr
  4054c2:	442a      	add	r2, r5
  4054c4:	2907      	cmp	r1, #7
  4054c6:	9211      	str	r2, [sp, #68]	; 0x44
  4054c8:	f8ca 6000 	str.w	r6, [sl]
  4054cc:	f8ca 5004 	str.w	r5, [sl, #4]
  4054d0:	9110      	str	r1, [sp, #64]	; 0x40
  4054d2:	f300 82ec 	bgt.w	405aae <_vfiprintf_r+0x91a>
  4054d6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4054da:	f10a 0a08 	add.w	sl, sl, #8
  4054de:	1c48      	adds	r0, r1, #1
  4054e0:	2d00      	cmp	r5, #0
  4054e2:	f040 81de 	bne.w	4058a2 <_vfiprintf_r+0x70e>
  4054e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4054e8:	2b00      	cmp	r3, #0
  4054ea:	f000 81f8 	beq.w	4058de <_vfiprintf_r+0x74a>
  4054ee:	3202      	adds	r2, #2
  4054f0:	a90e      	add	r1, sp, #56	; 0x38
  4054f2:	2302      	movs	r3, #2
  4054f4:	2807      	cmp	r0, #7
  4054f6:	9211      	str	r2, [sp, #68]	; 0x44
  4054f8:	9010      	str	r0, [sp, #64]	; 0x40
  4054fa:	e88a 000a 	stmia.w	sl, {r1, r3}
  4054fe:	f340 81ea 	ble.w	4058d6 <_vfiprintf_r+0x742>
  405502:	2a00      	cmp	r2, #0
  405504:	f040 838c 	bne.w	405c20 <_vfiprintf_r+0xa8c>
  405508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40550a:	2b80      	cmp	r3, #128	; 0x80
  40550c:	f04f 0001 	mov.w	r0, #1
  405510:	4611      	mov	r1, r2
  405512:	46ca      	mov	sl, r9
  405514:	f040 81e7 	bne.w	4058e6 <_vfiprintf_r+0x752>
  405518:	9b08      	ldr	r3, [sp, #32]
  40551a:	9d01      	ldr	r5, [sp, #4]
  40551c:	1b5e      	subs	r6, r3, r5
  40551e:	2e00      	cmp	r6, #0
  405520:	f340 81e1 	ble.w	4058e6 <_vfiprintf_r+0x752>
  405524:	2e10      	cmp	r6, #16
  405526:	4d9a      	ldr	r5, [pc, #616]	; (405790 <_vfiprintf_r+0x5fc>)
  405528:	f340 8450 	ble.w	405dcc <_vfiprintf_r+0xc38>
  40552c:	46d4      	mov	ip, sl
  40552e:	2710      	movs	r7, #16
  405530:	46a2      	mov	sl, r4
  405532:	9c06      	ldr	r4, [sp, #24]
  405534:	e007      	b.n	405546 <_vfiprintf_r+0x3b2>
  405536:	f101 0e02 	add.w	lr, r1, #2
  40553a:	f10c 0c08 	add.w	ip, ip, #8
  40553e:	4601      	mov	r1, r0
  405540:	3e10      	subs	r6, #16
  405542:	2e10      	cmp	r6, #16
  405544:	dd11      	ble.n	40556a <_vfiprintf_r+0x3d6>
  405546:	1c48      	adds	r0, r1, #1
  405548:	3210      	adds	r2, #16
  40554a:	2807      	cmp	r0, #7
  40554c:	9211      	str	r2, [sp, #68]	; 0x44
  40554e:	e88c 00a0 	stmia.w	ip, {r5, r7}
  405552:	9010      	str	r0, [sp, #64]	; 0x40
  405554:	ddef      	ble.n	405536 <_vfiprintf_r+0x3a2>
  405556:	2a00      	cmp	r2, #0
  405558:	f040 829d 	bne.w	405a96 <_vfiprintf_r+0x902>
  40555c:	3e10      	subs	r6, #16
  40555e:	2e10      	cmp	r6, #16
  405560:	f04f 0e01 	mov.w	lr, #1
  405564:	4611      	mov	r1, r2
  405566:	46cc      	mov	ip, r9
  405568:	dced      	bgt.n	405546 <_vfiprintf_r+0x3b2>
  40556a:	4654      	mov	r4, sl
  40556c:	46e2      	mov	sl, ip
  40556e:	4432      	add	r2, r6
  405570:	f1be 0f07 	cmp.w	lr, #7
  405574:	9211      	str	r2, [sp, #68]	; 0x44
  405576:	e88a 0060 	stmia.w	sl, {r5, r6}
  40557a:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40557e:	f300 8369 	bgt.w	405c54 <_vfiprintf_r+0xac0>
  405582:	f10a 0a08 	add.w	sl, sl, #8
  405586:	f10e 0001 	add.w	r0, lr, #1
  40558a:	4671      	mov	r1, lr
  40558c:	e1ab      	b.n	4058e6 <_vfiprintf_r+0x752>
  40558e:	9608      	str	r6, [sp, #32]
  405590:	f013 0220 	ands.w	r2, r3, #32
  405594:	f040 838c 	bne.w	405cb0 <_vfiprintf_r+0xb1c>
  405598:	f013 0110 	ands.w	r1, r3, #16
  40559c:	f040 831a 	bne.w	405bd4 <_vfiprintf_r+0xa40>
  4055a0:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4055a4:	f000 8316 	beq.w	405bd4 <_vfiprintf_r+0xa40>
  4055a8:	9807      	ldr	r0, [sp, #28]
  4055aa:	460a      	mov	r2, r1
  4055ac:	4601      	mov	r1, r0
  4055ae:	3104      	adds	r1, #4
  4055b0:	8806      	ldrh	r6, [r0, #0]
  4055b2:	9107      	str	r1, [sp, #28]
  4055b4:	2700      	movs	r7, #0
  4055b6:	e720      	b.n	4053fa <_vfiprintf_r+0x266>
  4055b8:	9608      	str	r6, [sp, #32]
  4055ba:	f043 0310 	orr.w	r3, r3, #16
  4055be:	e7e7      	b.n	405590 <_vfiprintf_r+0x3fc>
  4055c0:	9608      	str	r6, [sp, #32]
  4055c2:	f043 0310 	orr.w	r3, r3, #16
  4055c6:	e708      	b.n	4053da <_vfiprintf_r+0x246>
  4055c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4055cc:	f898 2000 	ldrb.w	r2, [r8]
  4055d0:	e652      	b.n	405278 <_vfiprintf_r+0xe4>
  4055d2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4055d6:	2600      	movs	r6, #0
  4055d8:	f818 2b01 	ldrb.w	r2, [r8], #1
  4055dc:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4055e0:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4055e4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4055e8:	2909      	cmp	r1, #9
  4055ea:	d9f5      	bls.n	4055d8 <_vfiprintf_r+0x444>
  4055ec:	e646      	b.n	40527c <_vfiprintf_r+0xe8>
  4055ee:	9608      	str	r6, [sp, #32]
  4055f0:	2800      	cmp	r0, #0
  4055f2:	f040 8408 	bne.w	405e06 <_vfiprintf_r+0xc72>
  4055f6:	f043 0310 	orr.w	r3, r3, #16
  4055fa:	069e      	lsls	r6, r3, #26
  4055fc:	f100 834c 	bmi.w	405c98 <_vfiprintf_r+0xb04>
  405600:	06dd      	lsls	r5, r3, #27
  405602:	f100 82f3 	bmi.w	405bec <_vfiprintf_r+0xa58>
  405606:	0658      	lsls	r0, r3, #25
  405608:	f140 82f0 	bpl.w	405bec <_vfiprintf_r+0xa58>
  40560c:	9d07      	ldr	r5, [sp, #28]
  40560e:	f9b5 6000 	ldrsh.w	r6, [r5]
  405612:	462a      	mov	r2, r5
  405614:	17f7      	asrs	r7, r6, #31
  405616:	3204      	adds	r2, #4
  405618:	4630      	mov	r0, r6
  40561a:	4639      	mov	r1, r7
  40561c:	9207      	str	r2, [sp, #28]
  40561e:	2800      	cmp	r0, #0
  405620:	f171 0200 	sbcs.w	r2, r1, #0
  405624:	f2c0 835d 	blt.w	405ce2 <_vfiprintf_r+0xb4e>
  405628:	1c61      	adds	r1, r4, #1
  40562a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40562e:	f04f 0201 	mov.w	r2, #1
  405632:	f47f aeea 	bne.w	40540a <_vfiprintf_r+0x276>
  405636:	ea56 0107 	orrs.w	r1, r6, r7
  40563a:	f000 824d 	beq.w	405ad8 <_vfiprintf_r+0x944>
  40563e:	9302      	str	r3, [sp, #8]
  405640:	2a01      	cmp	r2, #1
  405642:	f000 828c 	beq.w	405b5e <_vfiprintf_r+0x9ca>
  405646:	2a02      	cmp	r2, #2
  405648:	f040 825c 	bne.w	405b04 <_vfiprintf_r+0x970>
  40564c:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40564e:	46cb      	mov	fp, r9
  405650:	0933      	lsrs	r3, r6, #4
  405652:	f006 010f 	and.w	r1, r6, #15
  405656:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40565a:	093a      	lsrs	r2, r7, #4
  40565c:	461e      	mov	r6, r3
  40565e:	4617      	mov	r7, r2
  405660:	5c43      	ldrb	r3, [r0, r1]
  405662:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  405666:	ea56 0307 	orrs.w	r3, r6, r7
  40566a:	d1f1      	bne.n	405650 <_vfiprintf_r+0x4bc>
  40566c:	eba9 030b 	sub.w	r3, r9, fp
  405670:	9305      	str	r3, [sp, #20]
  405672:	e6e1      	b.n	405438 <_vfiprintf_r+0x2a4>
  405674:	2800      	cmp	r0, #0
  405676:	f040 83c0 	bne.w	405dfa <_vfiprintf_r+0xc66>
  40567a:	0699      	lsls	r1, r3, #26
  40567c:	f100 8367 	bmi.w	405d4e <_vfiprintf_r+0xbba>
  405680:	06da      	lsls	r2, r3, #27
  405682:	f100 80f1 	bmi.w	405868 <_vfiprintf_r+0x6d4>
  405686:	065b      	lsls	r3, r3, #25
  405688:	f140 80ee 	bpl.w	405868 <_vfiprintf_r+0x6d4>
  40568c:	9a07      	ldr	r2, [sp, #28]
  40568e:	6813      	ldr	r3, [r2, #0]
  405690:	3204      	adds	r2, #4
  405692:	9207      	str	r2, [sp, #28]
  405694:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  405698:	801a      	strh	r2, [r3, #0]
  40569a:	e5b8      	b.n	40520e <_vfiprintf_r+0x7a>
  40569c:	9807      	ldr	r0, [sp, #28]
  40569e:	4a3d      	ldr	r2, [pc, #244]	; (405794 <_vfiprintf_r+0x600>)
  4056a0:	9608      	str	r6, [sp, #32]
  4056a2:	920b      	str	r2, [sp, #44]	; 0x2c
  4056a4:	6806      	ldr	r6, [r0, #0]
  4056a6:	2278      	movs	r2, #120	; 0x78
  4056a8:	2130      	movs	r1, #48	; 0x30
  4056aa:	3004      	adds	r0, #4
  4056ac:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4056b0:	f043 0302 	orr.w	r3, r3, #2
  4056b4:	9007      	str	r0, [sp, #28]
  4056b6:	2700      	movs	r7, #0
  4056b8:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4056bc:	2202      	movs	r2, #2
  4056be:	e69c      	b.n	4053fa <_vfiprintf_r+0x266>
  4056c0:	9608      	str	r6, [sp, #32]
  4056c2:	2800      	cmp	r0, #0
  4056c4:	d099      	beq.n	4055fa <_vfiprintf_r+0x466>
  4056c6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4056ca:	e796      	b.n	4055fa <_vfiprintf_r+0x466>
  4056cc:	f898 2000 	ldrb.w	r2, [r8]
  4056d0:	2d00      	cmp	r5, #0
  4056d2:	f47f add1 	bne.w	405278 <_vfiprintf_r+0xe4>
  4056d6:	2001      	movs	r0, #1
  4056d8:	2520      	movs	r5, #32
  4056da:	e5cd      	b.n	405278 <_vfiprintf_r+0xe4>
  4056dc:	f043 0301 	orr.w	r3, r3, #1
  4056e0:	f898 2000 	ldrb.w	r2, [r8]
  4056e4:	e5c8      	b.n	405278 <_vfiprintf_r+0xe4>
  4056e6:	9608      	str	r6, [sp, #32]
  4056e8:	2800      	cmp	r0, #0
  4056ea:	f040 8393 	bne.w	405e14 <_vfiprintf_r+0xc80>
  4056ee:	4929      	ldr	r1, [pc, #164]	; (405794 <_vfiprintf_r+0x600>)
  4056f0:	910b      	str	r1, [sp, #44]	; 0x2c
  4056f2:	069f      	lsls	r7, r3, #26
  4056f4:	f100 82e8 	bmi.w	405cc8 <_vfiprintf_r+0xb34>
  4056f8:	9807      	ldr	r0, [sp, #28]
  4056fa:	06de      	lsls	r6, r3, #27
  4056fc:	4601      	mov	r1, r0
  4056fe:	f100 8270 	bmi.w	405be2 <_vfiprintf_r+0xa4e>
  405702:	065d      	lsls	r5, r3, #25
  405704:	f140 826d 	bpl.w	405be2 <_vfiprintf_r+0xa4e>
  405708:	3104      	adds	r1, #4
  40570a:	8806      	ldrh	r6, [r0, #0]
  40570c:	9107      	str	r1, [sp, #28]
  40570e:	2700      	movs	r7, #0
  405710:	07d8      	lsls	r0, r3, #31
  405712:	f140 8222 	bpl.w	405b5a <_vfiprintf_r+0x9c6>
  405716:	ea56 0107 	orrs.w	r1, r6, r7
  40571a:	f000 821e 	beq.w	405b5a <_vfiprintf_r+0x9c6>
  40571e:	2130      	movs	r1, #48	; 0x30
  405720:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  405724:	f043 0302 	orr.w	r3, r3, #2
  405728:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  40572c:	2202      	movs	r2, #2
  40572e:	e664      	b.n	4053fa <_vfiprintf_r+0x266>
  405730:	9608      	str	r6, [sp, #32]
  405732:	2800      	cmp	r0, #0
  405734:	f040 836b 	bne.w	405e0e <_vfiprintf_r+0xc7a>
  405738:	4917      	ldr	r1, [pc, #92]	; (405798 <_vfiprintf_r+0x604>)
  40573a:	910b      	str	r1, [sp, #44]	; 0x2c
  40573c:	e7d9      	b.n	4056f2 <_vfiprintf_r+0x55e>
  40573e:	9907      	ldr	r1, [sp, #28]
  405740:	9608      	str	r6, [sp, #32]
  405742:	680a      	ldr	r2, [r1, #0]
  405744:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  405748:	f04f 0000 	mov.w	r0, #0
  40574c:	460a      	mov	r2, r1
  40574e:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  405752:	3204      	adds	r2, #4
  405754:	2001      	movs	r0, #1
  405756:	9001      	str	r0, [sp, #4]
  405758:	9207      	str	r2, [sp, #28]
  40575a:	9005      	str	r0, [sp, #20]
  40575c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  405760:	9302      	str	r3, [sp, #8]
  405762:	2400      	movs	r4, #0
  405764:	e670      	b.n	405448 <_vfiprintf_r+0x2b4>
  405766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40576a:	f898 2000 	ldrb.w	r2, [r8]
  40576e:	e583      	b.n	405278 <_vfiprintf_r+0xe4>
  405770:	f898 2000 	ldrb.w	r2, [r8]
  405774:	2a6c      	cmp	r2, #108	; 0x6c
  405776:	bf03      	ittte	eq
  405778:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  40577c:	f043 0320 	orreq.w	r3, r3, #32
  405780:	f108 0801 	addeq.w	r8, r8, #1
  405784:	f043 0310 	orrne.w	r3, r3, #16
  405788:	e576      	b.n	405278 <_vfiprintf_r+0xe4>
  40578a:	bf00      	nop
  40578c:	004081a0 	.word	0x004081a0
  405790:	004081b0 	.word	0x004081b0
  405794:	00408184 	.word	0x00408184
  405798:	00408170 	.word	0x00408170
  40579c:	9907      	ldr	r1, [sp, #28]
  40579e:	680e      	ldr	r6, [r1, #0]
  4057a0:	460a      	mov	r2, r1
  4057a2:	2e00      	cmp	r6, #0
  4057a4:	f102 0204 	add.w	r2, r2, #4
  4057a8:	f6ff ae0f 	blt.w	4053ca <_vfiprintf_r+0x236>
  4057ac:	9207      	str	r2, [sp, #28]
  4057ae:	f898 2000 	ldrb.w	r2, [r8]
  4057b2:	e561      	b.n	405278 <_vfiprintf_r+0xe4>
  4057b4:	f898 2000 	ldrb.w	r2, [r8]
  4057b8:	2001      	movs	r0, #1
  4057ba:	252b      	movs	r5, #43	; 0x2b
  4057bc:	e55c      	b.n	405278 <_vfiprintf_r+0xe4>
  4057be:	9907      	ldr	r1, [sp, #28]
  4057c0:	9608      	str	r6, [sp, #32]
  4057c2:	f8d1 b000 	ldr.w	fp, [r1]
  4057c6:	f04f 0200 	mov.w	r2, #0
  4057ca:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4057ce:	1d0e      	adds	r6, r1, #4
  4057d0:	f1bb 0f00 	cmp.w	fp, #0
  4057d4:	f000 82e5 	beq.w	405da2 <_vfiprintf_r+0xc0e>
  4057d8:	1c67      	adds	r7, r4, #1
  4057da:	f000 82c4 	beq.w	405d66 <_vfiprintf_r+0xbd2>
  4057de:	4622      	mov	r2, r4
  4057e0:	2100      	movs	r1, #0
  4057e2:	4658      	mov	r0, fp
  4057e4:	9301      	str	r3, [sp, #4]
  4057e6:	f001 f923 	bl	406a30 <memchr>
  4057ea:	9b01      	ldr	r3, [sp, #4]
  4057ec:	2800      	cmp	r0, #0
  4057ee:	f000 82e5 	beq.w	405dbc <_vfiprintf_r+0xc28>
  4057f2:	eba0 020b 	sub.w	r2, r0, fp
  4057f6:	9205      	str	r2, [sp, #20]
  4057f8:	9607      	str	r6, [sp, #28]
  4057fa:	9302      	str	r3, [sp, #8]
  4057fc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405800:	2400      	movs	r4, #0
  405802:	e619      	b.n	405438 <_vfiprintf_r+0x2a4>
  405804:	f898 2000 	ldrb.w	r2, [r8]
  405808:	2a2a      	cmp	r2, #42	; 0x2a
  40580a:	f108 0701 	add.w	r7, r8, #1
  40580e:	f000 82e9 	beq.w	405de4 <_vfiprintf_r+0xc50>
  405812:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405816:	2909      	cmp	r1, #9
  405818:	46b8      	mov	r8, r7
  40581a:	f04f 0400 	mov.w	r4, #0
  40581e:	f63f ad2d 	bhi.w	40527c <_vfiprintf_r+0xe8>
  405822:	f818 2b01 	ldrb.w	r2, [r8], #1
  405826:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40582a:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  40582e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405832:	2909      	cmp	r1, #9
  405834:	d9f5      	bls.n	405822 <_vfiprintf_r+0x68e>
  405836:	e521      	b.n	40527c <_vfiprintf_r+0xe8>
  405838:	f043 0320 	orr.w	r3, r3, #32
  40583c:	f898 2000 	ldrb.w	r2, [r8]
  405840:	e51a      	b.n	405278 <_vfiprintf_r+0xe4>
  405842:	9608      	str	r6, [sp, #32]
  405844:	2800      	cmp	r0, #0
  405846:	f040 82db 	bne.w	405e00 <_vfiprintf_r+0xc6c>
  40584a:	2a00      	cmp	r2, #0
  40584c:	f000 80e7 	beq.w	405a1e <_vfiprintf_r+0x88a>
  405850:	2101      	movs	r1, #1
  405852:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  405856:	f04f 0200 	mov.w	r2, #0
  40585a:	9101      	str	r1, [sp, #4]
  40585c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405860:	9105      	str	r1, [sp, #20]
  405862:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  405866:	e77b      	b.n	405760 <_vfiprintf_r+0x5cc>
  405868:	9a07      	ldr	r2, [sp, #28]
  40586a:	6813      	ldr	r3, [r2, #0]
  40586c:	3204      	adds	r2, #4
  40586e:	9207      	str	r2, [sp, #28]
  405870:	9a03      	ldr	r2, [sp, #12]
  405872:	601a      	str	r2, [r3, #0]
  405874:	e4cb      	b.n	40520e <_vfiprintf_r+0x7a>
  405876:	aa0f      	add	r2, sp, #60	; 0x3c
  405878:	9904      	ldr	r1, [sp, #16]
  40587a:	4620      	mov	r0, r4
  40587c:	f7ff fc4a 	bl	405114 <__sprint_r.part.0>
  405880:	2800      	cmp	r0, #0
  405882:	f040 8139 	bne.w	405af8 <_vfiprintf_r+0x964>
  405886:	9910      	ldr	r1, [sp, #64]	; 0x40
  405888:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40588a:	f101 0c01 	add.w	ip, r1, #1
  40588e:	46ce      	mov	lr, r9
  405890:	e5ff      	b.n	405492 <_vfiprintf_r+0x2fe>
  405892:	9910      	ldr	r1, [sp, #64]	; 0x40
  405894:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405896:	1c48      	adds	r0, r1, #1
  405898:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40589c:	2d00      	cmp	r5, #0
  40589e:	f43f ae22 	beq.w	4054e6 <_vfiprintf_r+0x352>
  4058a2:	3201      	adds	r2, #1
  4058a4:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4058a8:	2101      	movs	r1, #1
  4058aa:	2807      	cmp	r0, #7
  4058ac:	9211      	str	r2, [sp, #68]	; 0x44
  4058ae:	9010      	str	r0, [sp, #64]	; 0x40
  4058b0:	f8ca 5000 	str.w	r5, [sl]
  4058b4:	f8ca 1004 	str.w	r1, [sl, #4]
  4058b8:	f340 8108 	ble.w	405acc <_vfiprintf_r+0x938>
  4058bc:	2a00      	cmp	r2, #0
  4058be:	f040 81bc 	bne.w	405c3a <_vfiprintf_r+0xaa6>
  4058c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4058c4:	2b00      	cmp	r3, #0
  4058c6:	f43f ae1f 	beq.w	405508 <_vfiprintf_r+0x374>
  4058ca:	ab0e      	add	r3, sp, #56	; 0x38
  4058cc:	2202      	movs	r2, #2
  4058ce:	4608      	mov	r0, r1
  4058d0:	931c      	str	r3, [sp, #112]	; 0x70
  4058d2:	921d      	str	r2, [sp, #116]	; 0x74
  4058d4:	46ca      	mov	sl, r9
  4058d6:	4601      	mov	r1, r0
  4058d8:	f10a 0a08 	add.w	sl, sl, #8
  4058dc:	3001      	adds	r0, #1
  4058de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4058e0:	2b80      	cmp	r3, #128	; 0x80
  4058e2:	f43f ae19 	beq.w	405518 <_vfiprintf_r+0x384>
  4058e6:	9b05      	ldr	r3, [sp, #20]
  4058e8:	1ae4      	subs	r4, r4, r3
  4058ea:	2c00      	cmp	r4, #0
  4058ec:	dd2e      	ble.n	40594c <_vfiprintf_r+0x7b8>
  4058ee:	2c10      	cmp	r4, #16
  4058f0:	4db3      	ldr	r5, [pc, #716]	; (405bc0 <_vfiprintf_r+0xa2c>)
  4058f2:	dd1e      	ble.n	405932 <_vfiprintf_r+0x79e>
  4058f4:	46d6      	mov	lr, sl
  4058f6:	2610      	movs	r6, #16
  4058f8:	9f06      	ldr	r7, [sp, #24]
  4058fa:	f8dd a010 	ldr.w	sl, [sp, #16]
  4058fe:	e006      	b.n	40590e <_vfiprintf_r+0x77a>
  405900:	1c88      	adds	r0, r1, #2
  405902:	f10e 0e08 	add.w	lr, lr, #8
  405906:	4619      	mov	r1, r3
  405908:	3c10      	subs	r4, #16
  40590a:	2c10      	cmp	r4, #16
  40590c:	dd10      	ble.n	405930 <_vfiprintf_r+0x79c>
  40590e:	1c4b      	adds	r3, r1, #1
  405910:	3210      	adds	r2, #16
  405912:	2b07      	cmp	r3, #7
  405914:	9211      	str	r2, [sp, #68]	; 0x44
  405916:	e88e 0060 	stmia.w	lr, {r5, r6}
  40591a:	9310      	str	r3, [sp, #64]	; 0x40
  40591c:	ddf0      	ble.n	405900 <_vfiprintf_r+0x76c>
  40591e:	2a00      	cmp	r2, #0
  405920:	d165      	bne.n	4059ee <_vfiprintf_r+0x85a>
  405922:	3c10      	subs	r4, #16
  405924:	2c10      	cmp	r4, #16
  405926:	f04f 0001 	mov.w	r0, #1
  40592a:	4611      	mov	r1, r2
  40592c:	46ce      	mov	lr, r9
  40592e:	dcee      	bgt.n	40590e <_vfiprintf_r+0x77a>
  405930:	46f2      	mov	sl, lr
  405932:	4422      	add	r2, r4
  405934:	2807      	cmp	r0, #7
  405936:	9211      	str	r2, [sp, #68]	; 0x44
  405938:	f8ca 5000 	str.w	r5, [sl]
  40593c:	f8ca 4004 	str.w	r4, [sl, #4]
  405940:	9010      	str	r0, [sp, #64]	; 0x40
  405942:	f300 8085 	bgt.w	405a50 <_vfiprintf_r+0x8bc>
  405946:	f10a 0a08 	add.w	sl, sl, #8
  40594a:	3001      	adds	r0, #1
  40594c:	9905      	ldr	r1, [sp, #20]
  40594e:	f8ca b000 	str.w	fp, [sl]
  405952:	440a      	add	r2, r1
  405954:	2807      	cmp	r0, #7
  405956:	9211      	str	r2, [sp, #68]	; 0x44
  405958:	f8ca 1004 	str.w	r1, [sl, #4]
  40595c:	9010      	str	r0, [sp, #64]	; 0x40
  40595e:	f340 8082 	ble.w	405a66 <_vfiprintf_r+0x8d2>
  405962:	2a00      	cmp	r2, #0
  405964:	f040 8118 	bne.w	405b98 <_vfiprintf_r+0xa04>
  405968:	9b02      	ldr	r3, [sp, #8]
  40596a:	9210      	str	r2, [sp, #64]	; 0x40
  40596c:	0758      	lsls	r0, r3, #29
  40596e:	d535      	bpl.n	4059dc <_vfiprintf_r+0x848>
  405970:	9b08      	ldr	r3, [sp, #32]
  405972:	9901      	ldr	r1, [sp, #4]
  405974:	1a5c      	subs	r4, r3, r1
  405976:	2c00      	cmp	r4, #0
  405978:	f340 80e7 	ble.w	405b4a <_vfiprintf_r+0x9b6>
  40597c:	46ca      	mov	sl, r9
  40597e:	2c10      	cmp	r4, #16
  405980:	f340 8218 	ble.w	405db4 <_vfiprintf_r+0xc20>
  405984:	9910      	ldr	r1, [sp, #64]	; 0x40
  405986:	4e8f      	ldr	r6, [pc, #572]	; (405bc4 <_vfiprintf_r+0xa30>)
  405988:	9f06      	ldr	r7, [sp, #24]
  40598a:	f8dd b010 	ldr.w	fp, [sp, #16]
  40598e:	2510      	movs	r5, #16
  405990:	e006      	b.n	4059a0 <_vfiprintf_r+0x80c>
  405992:	1c88      	adds	r0, r1, #2
  405994:	f10a 0a08 	add.w	sl, sl, #8
  405998:	4619      	mov	r1, r3
  40599a:	3c10      	subs	r4, #16
  40599c:	2c10      	cmp	r4, #16
  40599e:	dd11      	ble.n	4059c4 <_vfiprintf_r+0x830>
  4059a0:	1c4b      	adds	r3, r1, #1
  4059a2:	3210      	adds	r2, #16
  4059a4:	2b07      	cmp	r3, #7
  4059a6:	9211      	str	r2, [sp, #68]	; 0x44
  4059a8:	f8ca 6000 	str.w	r6, [sl]
  4059ac:	f8ca 5004 	str.w	r5, [sl, #4]
  4059b0:	9310      	str	r3, [sp, #64]	; 0x40
  4059b2:	ddee      	ble.n	405992 <_vfiprintf_r+0x7fe>
  4059b4:	bb42      	cbnz	r2, 405a08 <_vfiprintf_r+0x874>
  4059b6:	3c10      	subs	r4, #16
  4059b8:	2c10      	cmp	r4, #16
  4059ba:	f04f 0001 	mov.w	r0, #1
  4059be:	4611      	mov	r1, r2
  4059c0:	46ca      	mov	sl, r9
  4059c2:	dced      	bgt.n	4059a0 <_vfiprintf_r+0x80c>
  4059c4:	4422      	add	r2, r4
  4059c6:	2807      	cmp	r0, #7
  4059c8:	9211      	str	r2, [sp, #68]	; 0x44
  4059ca:	f8ca 6000 	str.w	r6, [sl]
  4059ce:	f8ca 4004 	str.w	r4, [sl, #4]
  4059d2:	9010      	str	r0, [sp, #64]	; 0x40
  4059d4:	dd51      	ble.n	405a7a <_vfiprintf_r+0x8e6>
  4059d6:	2a00      	cmp	r2, #0
  4059d8:	f040 819b 	bne.w	405d12 <_vfiprintf_r+0xb7e>
  4059dc:	9b03      	ldr	r3, [sp, #12]
  4059de:	9a08      	ldr	r2, [sp, #32]
  4059e0:	9901      	ldr	r1, [sp, #4]
  4059e2:	428a      	cmp	r2, r1
  4059e4:	bfac      	ite	ge
  4059e6:	189b      	addge	r3, r3, r2
  4059e8:	185b      	addlt	r3, r3, r1
  4059ea:	9303      	str	r3, [sp, #12]
  4059ec:	e04e      	b.n	405a8c <_vfiprintf_r+0x8f8>
  4059ee:	aa0f      	add	r2, sp, #60	; 0x3c
  4059f0:	4651      	mov	r1, sl
  4059f2:	4638      	mov	r0, r7
  4059f4:	f7ff fb8e 	bl	405114 <__sprint_r.part.0>
  4059f8:	2800      	cmp	r0, #0
  4059fa:	f040 813f 	bne.w	405c7c <_vfiprintf_r+0xae8>
  4059fe:	9910      	ldr	r1, [sp, #64]	; 0x40
  405a00:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405a02:	1c48      	adds	r0, r1, #1
  405a04:	46ce      	mov	lr, r9
  405a06:	e77f      	b.n	405908 <_vfiprintf_r+0x774>
  405a08:	aa0f      	add	r2, sp, #60	; 0x3c
  405a0a:	4659      	mov	r1, fp
  405a0c:	4638      	mov	r0, r7
  405a0e:	f7ff fb81 	bl	405114 <__sprint_r.part.0>
  405a12:	b960      	cbnz	r0, 405a2e <_vfiprintf_r+0x89a>
  405a14:	9910      	ldr	r1, [sp, #64]	; 0x40
  405a16:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405a18:	1c48      	adds	r0, r1, #1
  405a1a:	46ca      	mov	sl, r9
  405a1c:	e7bd      	b.n	40599a <_vfiprintf_r+0x806>
  405a1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405a20:	f8dd b010 	ldr.w	fp, [sp, #16]
  405a24:	2b00      	cmp	r3, #0
  405a26:	f040 81d4 	bne.w	405dd2 <_vfiprintf_r+0xc3e>
  405a2a:	2300      	movs	r3, #0
  405a2c:	9310      	str	r3, [sp, #64]	; 0x40
  405a2e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405a32:	f013 0f01 	tst.w	r3, #1
  405a36:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405a3a:	d102      	bne.n	405a42 <_vfiprintf_r+0x8ae>
  405a3c:	059a      	lsls	r2, r3, #22
  405a3e:	f140 80de 	bpl.w	405bfe <_vfiprintf_r+0xa6a>
  405a42:	065b      	lsls	r3, r3, #25
  405a44:	f53f acb2 	bmi.w	4053ac <_vfiprintf_r+0x218>
  405a48:	9803      	ldr	r0, [sp, #12]
  405a4a:	b02d      	add	sp, #180	; 0xb4
  405a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405a50:	2a00      	cmp	r2, #0
  405a52:	f040 8106 	bne.w	405c62 <_vfiprintf_r+0xace>
  405a56:	9a05      	ldr	r2, [sp, #20]
  405a58:	921d      	str	r2, [sp, #116]	; 0x74
  405a5a:	2301      	movs	r3, #1
  405a5c:	9211      	str	r2, [sp, #68]	; 0x44
  405a5e:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  405a62:	9310      	str	r3, [sp, #64]	; 0x40
  405a64:	46ca      	mov	sl, r9
  405a66:	f10a 0a08 	add.w	sl, sl, #8
  405a6a:	9b02      	ldr	r3, [sp, #8]
  405a6c:	0759      	lsls	r1, r3, #29
  405a6e:	d504      	bpl.n	405a7a <_vfiprintf_r+0x8e6>
  405a70:	9b08      	ldr	r3, [sp, #32]
  405a72:	9901      	ldr	r1, [sp, #4]
  405a74:	1a5c      	subs	r4, r3, r1
  405a76:	2c00      	cmp	r4, #0
  405a78:	dc81      	bgt.n	40597e <_vfiprintf_r+0x7ea>
  405a7a:	9b03      	ldr	r3, [sp, #12]
  405a7c:	9908      	ldr	r1, [sp, #32]
  405a7e:	9801      	ldr	r0, [sp, #4]
  405a80:	4281      	cmp	r1, r0
  405a82:	bfac      	ite	ge
  405a84:	185b      	addge	r3, r3, r1
  405a86:	181b      	addlt	r3, r3, r0
  405a88:	9303      	str	r3, [sp, #12]
  405a8a:	bb72      	cbnz	r2, 405aea <_vfiprintf_r+0x956>
  405a8c:	2300      	movs	r3, #0
  405a8e:	9310      	str	r3, [sp, #64]	; 0x40
  405a90:	46ca      	mov	sl, r9
  405a92:	f7ff bbbc 	b.w	40520e <_vfiprintf_r+0x7a>
  405a96:	aa0f      	add	r2, sp, #60	; 0x3c
  405a98:	9904      	ldr	r1, [sp, #16]
  405a9a:	4620      	mov	r0, r4
  405a9c:	f7ff fb3a 	bl	405114 <__sprint_r.part.0>
  405aa0:	bb50      	cbnz	r0, 405af8 <_vfiprintf_r+0x964>
  405aa2:	9910      	ldr	r1, [sp, #64]	; 0x40
  405aa4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405aa6:	f101 0e01 	add.w	lr, r1, #1
  405aaa:	46cc      	mov	ip, r9
  405aac:	e548      	b.n	405540 <_vfiprintf_r+0x3ac>
  405aae:	2a00      	cmp	r2, #0
  405ab0:	f040 8140 	bne.w	405d34 <_vfiprintf_r+0xba0>
  405ab4:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  405ab8:	2900      	cmp	r1, #0
  405aba:	f000 811b 	beq.w	405cf4 <_vfiprintf_r+0xb60>
  405abe:	2201      	movs	r2, #1
  405ac0:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  405ac4:	4610      	mov	r0, r2
  405ac6:	921d      	str	r2, [sp, #116]	; 0x74
  405ac8:	911c      	str	r1, [sp, #112]	; 0x70
  405aca:	46ca      	mov	sl, r9
  405acc:	4601      	mov	r1, r0
  405ace:	f10a 0a08 	add.w	sl, sl, #8
  405ad2:	3001      	adds	r0, #1
  405ad4:	e507      	b.n	4054e6 <_vfiprintf_r+0x352>
  405ad6:	9b02      	ldr	r3, [sp, #8]
  405ad8:	2a01      	cmp	r2, #1
  405ada:	f000 8098 	beq.w	405c0e <_vfiprintf_r+0xa7a>
  405ade:	2a02      	cmp	r2, #2
  405ae0:	d10d      	bne.n	405afe <_vfiprintf_r+0x96a>
  405ae2:	9302      	str	r3, [sp, #8]
  405ae4:	2600      	movs	r6, #0
  405ae6:	2700      	movs	r7, #0
  405ae8:	e5b0      	b.n	40564c <_vfiprintf_r+0x4b8>
  405aea:	aa0f      	add	r2, sp, #60	; 0x3c
  405aec:	9904      	ldr	r1, [sp, #16]
  405aee:	9806      	ldr	r0, [sp, #24]
  405af0:	f7ff fb10 	bl	405114 <__sprint_r.part.0>
  405af4:	2800      	cmp	r0, #0
  405af6:	d0c9      	beq.n	405a8c <_vfiprintf_r+0x8f8>
  405af8:	f8dd b010 	ldr.w	fp, [sp, #16]
  405afc:	e797      	b.n	405a2e <_vfiprintf_r+0x89a>
  405afe:	9302      	str	r3, [sp, #8]
  405b00:	2600      	movs	r6, #0
  405b02:	2700      	movs	r7, #0
  405b04:	4649      	mov	r1, r9
  405b06:	e000      	b.n	405b0a <_vfiprintf_r+0x976>
  405b08:	4659      	mov	r1, fp
  405b0a:	08f2      	lsrs	r2, r6, #3
  405b0c:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  405b10:	08f8      	lsrs	r0, r7, #3
  405b12:	f006 0307 	and.w	r3, r6, #7
  405b16:	4607      	mov	r7, r0
  405b18:	4616      	mov	r6, r2
  405b1a:	3330      	adds	r3, #48	; 0x30
  405b1c:	ea56 0207 	orrs.w	r2, r6, r7
  405b20:	f801 3c01 	strb.w	r3, [r1, #-1]
  405b24:	f101 3bff 	add.w	fp, r1, #4294967295
  405b28:	d1ee      	bne.n	405b08 <_vfiprintf_r+0x974>
  405b2a:	9a02      	ldr	r2, [sp, #8]
  405b2c:	07d6      	lsls	r6, r2, #31
  405b2e:	f57f ad9d 	bpl.w	40566c <_vfiprintf_r+0x4d8>
  405b32:	2b30      	cmp	r3, #48	; 0x30
  405b34:	f43f ad9a 	beq.w	40566c <_vfiprintf_r+0x4d8>
  405b38:	3902      	subs	r1, #2
  405b3a:	2330      	movs	r3, #48	; 0x30
  405b3c:	f80b 3c01 	strb.w	r3, [fp, #-1]
  405b40:	eba9 0301 	sub.w	r3, r9, r1
  405b44:	9305      	str	r3, [sp, #20]
  405b46:	468b      	mov	fp, r1
  405b48:	e476      	b.n	405438 <_vfiprintf_r+0x2a4>
  405b4a:	9b03      	ldr	r3, [sp, #12]
  405b4c:	9a08      	ldr	r2, [sp, #32]
  405b4e:	428a      	cmp	r2, r1
  405b50:	bfac      	ite	ge
  405b52:	189b      	addge	r3, r3, r2
  405b54:	185b      	addlt	r3, r3, r1
  405b56:	9303      	str	r3, [sp, #12]
  405b58:	e798      	b.n	405a8c <_vfiprintf_r+0x8f8>
  405b5a:	2202      	movs	r2, #2
  405b5c:	e44d      	b.n	4053fa <_vfiprintf_r+0x266>
  405b5e:	2f00      	cmp	r7, #0
  405b60:	bf08      	it	eq
  405b62:	2e0a      	cmpeq	r6, #10
  405b64:	d352      	bcc.n	405c0c <_vfiprintf_r+0xa78>
  405b66:	46cb      	mov	fp, r9
  405b68:	4630      	mov	r0, r6
  405b6a:	4639      	mov	r1, r7
  405b6c:	220a      	movs	r2, #10
  405b6e:	2300      	movs	r3, #0
  405b70:	f001 fc42 	bl	4073f8 <__aeabi_uldivmod>
  405b74:	3230      	adds	r2, #48	; 0x30
  405b76:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  405b7a:	4630      	mov	r0, r6
  405b7c:	4639      	mov	r1, r7
  405b7e:	2300      	movs	r3, #0
  405b80:	220a      	movs	r2, #10
  405b82:	f001 fc39 	bl	4073f8 <__aeabi_uldivmod>
  405b86:	4606      	mov	r6, r0
  405b88:	460f      	mov	r7, r1
  405b8a:	ea56 0307 	orrs.w	r3, r6, r7
  405b8e:	d1eb      	bne.n	405b68 <_vfiprintf_r+0x9d4>
  405b90:	e56c      	b.n	40566c <_vfiprintf_r+0x4d8>
  405b92:	9405      	str	r4, [sp, #20]
  405b94:	46cb      	mov	fp, r9
  405b96:	e44f      	b.n	405438 <_vfiprintf_r+0x2a4>
  405b98:	aa0f      	add	r2, sp, #60	; 0x3c
  405b9a:	9904      	ldr	r1, [sp, #16]
  405b9c:	9806      	ldr	r0, [sp, #24]
  405b9e:	f7ff fab9 	bl	405114 <__sprint_r.part.0>
  405ba2:	2800      	cmp	r0, #0
  405ba4:	d1a8      	bne.n	405af8 <_vfiprintf_r+0x964>
  405ba6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405ba8:	46ca      	mov	sl, r9
  405baa:	e75e      	b.n	405a6a <_vfiprintf_r+0x8d6>
  405bac:	aa0f      	add	r2, sp, #60	; 0x3c
  405bae:	9904      	ldr	r1, [sp, #16]
  405bb0:	9806      	ldr	r0, [sp, #24]
  405bb2:	f7ff faaf 	bl	405114 <__sprint_r.part.0>
  405bb6:	2800      	cmp	r0, #0
  405bb8:	d19e      	bne.n	405af8 <_vfiprintf_r+0x964>
  405bba:	46ca      	mov	sl, r9
  405bbc:	f7ff bbc0 	b.w	405340 <_vfiprintf_r+0x1ac>
  405bc0:	004081b0 	.word	0x004081b0
  405bc4:	004081a0 	.word	0x004081a0
  405bc8:	3104      	adds	r1, #4
  405bca:	6816      	ldr	r6, [r2, #0]
  405bcc:	9107      	str	r1, [sp, #28]
  405bce:	2201      	movs	r2, #1
  405bd0:	2700      	movs	r7, #0
  405bd2:	e412      	b.n	4053fa <_vfiprintf_r+0x266>
  405bd4:	9807      	ldr	r0, [sp, #28]
  405bd6:	4601      	mov	r1, r0
  405bd8:	3104      	adds	r1, #4
  405bda:	6806      	ldr	r6, [r0, #0]
  405bdc:	9107      	str	r1, [sp, #28]
  405bde:	2700      	movs	r7, #0
  405be0:	e40b      	b.n	4053fa <_vfiprintf_r+0x266>
  405be2:	680e      	ldr	r6, [r1, #0]
  405be4:	3104      	adds	r1, #4
  405be6:	9107      	str	r1, [sp, #28]
  405be8:	2700      	movs	r7, #0
  405bea:	e591      	b.n	405710 <_vfiprintf_r+0x57c>
  405bec:	9907      	ldr	r1, [sp, #28]
  405bee:	680e      	ldr	r6, [r1, #0]
  405bf0:	460a      	mov	r2, r1
  405bf2:	17f7      	asrs	r7, r6, #31
  405bf4:	3204      	adds	r2, #4
  405bf6:	9207      	str	r2, [sp, #28]
  405bf8:	4630      	mov	r0, r6
  405bfa:	4639      	mov	r1, r7
  405bfc:	e50f      	b.n	40561e <_vfiprintf_r+0x48a>
  405bfe:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405c02:	f000 fe7f 	bl	406904 <__retarget_lock_release_recursive>
  405c06:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405c0a:	e71a      	b.n	405a42 <_vfiprintf_r+0x8ae>
  405c0c:	9b02      	ldr	r3, [sp, #8]
  405c0e:	9302      	str	r3, [sp, #8]
  405c10:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  405c14:	3630      	adds	r6, #48	; 0x30
  405c16:	2301      	movs	r3, #1
  405c18:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  405c1c:	9305      	str	r3, [sp, #20]
  405c1e:	e40b      	b.n	405438 <_vfiprintf_r+0x2a4>
  405c20:	aa0f      	add	r2, sp, #60	; 0x3c
  405c22:	9904      	ldr	r1, [sp, #16]
  405c24:	9806      	ldr	r0, [sp, #24]
  405c26:	f7ff fa75 	bl	405114 <__sprint_r.part.0>
  405c2a:	2800      	cmp	r0, #0
  405c2c:	f47f af64 	bne.w	405af8 <_vfiprintf_r+0x964>
  405c30:	9910      	ldr	r1, [sp, #64]	; 0x40
  405c32:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405c34:	1c48      	adds	r0, r1, #1
  405c36:	46ca      	mov	sl, r9
  405c38:	e651      	b.n	4058de <_vfiprintf_r+0x74a>
  405c3a:	aa0f      	add	r2, sp, #60	; 0x3c
  405c3c:	9904      	ldr	r1, [sp, #16]
  405c3e:	9806      	ldr	r0, [sp, #24]
  405c40:	f7ff fa68 	bl	405114 <__sprint_r.part.0>
  405c44:	2800      	cmp	r0, #0
  405c46:	f47f af57 	bne.w	405af8 <_vfiprintf_r+0x964>
  405c4a:	9910      	ldr	r1, [sp, #64]	; 0x40
  405c4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405c4e:	1c48      	adds	r0, r1, #1
  405c50:	46ca      	mov	sl, r9
  405c52:	e448      	b.n	4054e6 <_vfiprintf_r+0x352>
  405c54:	2a00      	cmp	r2, #0
  405c56:	f040 8091 	bne.w	405d7c <_vfiprintf_r+0xbe8>
  405c5a:	2001      	movs	r0, #1
  405c5c:	4611      	mov	r1, r2
  405c5e:	46ca      	mov	sl, r9
  405c60:	e641      	b.n	4058e6 <_vfiprintf_r+0x752>
  405c62:	aa0f      	add	r2, sp, #60	; 0x3c
  405c64:	9904      	ldr	r1, [sp, #16]
  405c66:	9806      	ldr	r0, [sp, #24]
  405c68:	f7ff fa54 	bl	405114 <__sprint_r.part.0>
  405c6c:	2800      	cmp	r0, #0
  405c6e:	f47f af43 	bne.w	405af8 <_vfiprintf_r+0x964>
  405c72:	9810      	ldr	r0, [sp, #64]	; 0x40
  405c74:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405c76:	3001      	adds	r0, #1
  405c78:	46ca      	mov	sl, r9
  405c7a:	e667      	b.n	40594c <_vfiprintf_r+0x7b8>
  405c7c:	46d3      	mov	fp, sl
  405c7e:	e6d6      	b.n	405a2e <_vfiprintf_r+0x89a>
  405c80:	9e07      	ldr	r6, [sp, #28]
  405c82:	3607      	adds	r6, #7
  405c84:	f026 0207 	bic.w	r2, r6, #7
  405c88:	f102 0108 	add.w	r1, r2, #8
  405c8c:	e9d2 6700 	ldrd	r6, r7, [r2]
  405c90:	9107      	str	r1, [sp, #28]
  405c92:	2201      	movs	r2, #1
  405c94:	f7ff bbb1 	b.w	4053fa <_vfiprintf_r+0x266>
  405c98:	9e07      	ldr	r6, [sp, #28]
  405c9a:	3607      	adds	r6, #7
  405c9c:	f026 0607 	bic.w	r6, r6, #7
  405ca0:	e9d6 0100 	ldrd	r0, r1, [r6]
  405ca4:	f106 0208 	add.w	r2, r6, #8
  405ca8:	9207      	str	r2, [sp, #28]
  405caa:	4606      	mov	r6, r0
  405cac:	460f      	mov	r7, r1
  405cae:	e4b6      	b.n	40561e <_vfiprintf_r+0x48a>
  405cb0:	9e07      	ldr	r6, [sp, #28]
  405cb2:	3607      	adds	r6, #7
  405cb4:	f026 0207 	bic.w	r2, r6, #7
  405cb8:	f102 0108 	add.w	r1, r2, #8
  405cbc:	e9d2 6700 	ldrd	r6, r7, [r2]
  405cc0:	9107      	str	r1, [sp, #28]
  405cc2:	2200      	movs	r2, #0
  405cc4:	f7ff bb99 	b.w	4053fa <_vfiprintf_r+0x266>
  405cc8:	9e07      	ldr	r6, [sp, #28]
  405cca:	3607      	adds	r6, #7
  405ccc:	f026 0107 	bic.w	r1, r6, #7
  405cd0:	f101 0008 	add.w	r0, r1, #8
  405cd4:	9007      	str	r0, [sp, #28]
  405cd6:	e9d1 6700 	ldrd	r6, r7, [r1]
  405cda:	e519      	b.n	405710 <_vfiprintf_r+0x57c>
  405cdc:	46cb      	mov	fp, r9
  405cde:	f7ff bbab 	b.w	405438 <_vfiprintf_r+0x2a4>
  405ce2:	252d      	movs	r5, #45	; 0x2d
  405ce4:	4276      	negs	r6, r6
  405ce6:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  405cea:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405cee:	2201      	movs	r2, #1
  405cf0:	f7ff bb88 	b.w	405404 <_vfiprintf_r+0x270>
  405cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405cf6:	b9b3      	cbnz	r3, 405d26 <_vfiprintf_r+0xb92>
  405cf8:	4611      	mov	r1, r2
  405cfa:	2001      	movs	r0, #1
  405cfc:	46ca      	mov	sl, r9
  405cfe:	e5f2      	b.n	4058e6 <_vfiprintf_r+0x752>
  405d00:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405d04:	f000 fdfe 	bl	406904 <__retarget_lock_release_recursive>
  405d08:	f04f 33ff 	mov.w	r3, #4294967295
  405d0c:	9303      	str	r3, [sp, #12]
  405d0e:	f7ff bb50 	b.w	4053b2 <_vfiprintf_r+0x21e>
  405d12:	aa0f      	add	r2, sp, #60	; 0x3c
  405d14:	9904      	ldr	r1, [sp, #16]
  405d16:	9806      	ldr	r0, [sp, #24]
  405d18:	f7ff f9fc 	bl	405114 <__sprint_r.part.0>
  405d1c:	2800      	cmp	r0, #0
  405d1e:	f47f aeeb 	bne.w	405af8 <_vfiprintf_r+0x964>
  405d22:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405d24:	e6a9      	b.n	405a7a <_vfiprintf_r+0x8e6>
  405d26:	ab0e      	add	r3, sp, #56	; 0x38
  405d28:	2202      	movs	r2, #2
  405d2a:	931c      	str	r3, [sp, #112]	; 0x70
  405d2c:	921d      	str	r2, [sp, #116]	; 0x74
  405d2e:	2001      	movs	r0, #1
  405d30:	46ca      	mov	sl, r9
  405d32:	e5d0      	b.n	4058d6 <_vfiprintf_r+0x742>
  405d34:	aa0f      	add	r2, sp, #60	; 0x3c
  405d36:	9904      	ldr	r1, [sp, #16]
  405d38:	9806      	ldr	r0, [sp, #24]
  405d3a:	f7ff f9eb 	bl	405114 <__sprint_r.part.0>
  405d3e:	2800      	cmp	r0, #0
  405d40:	f47f aeda 	bne.w	405af8 <_vfiprintf_r+0x964>
  405d44:	9910      	ldr	r1, [sp, #64]	; 0x40
  405d46:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405d48:	1c48      	adds	r0, r1, #1
  405d4a:	46ca      	mov	sl, r9
  405d4c:	e5a4      	b.n	405898 <_vfiprintf_r+0x704>
  405d4e:	9a07      	ldr	r2, [sp, #28]
  405d50:	9903      	ldr	r1, [sp, #12]
  405d52:	6813      	ldr	r3, [r2, #0]
  405d54:	17cd      	asrs	r5, r1, #31
  405d56:	4608      	mov	r0, r1
  405d58:	3204      	adds	r2, #4
  405d5a:	4629      	mov	r1, r5
  405d5c:	9207      	str	r2, [sp, #28]
  405d5e:	e9c3 0100 	strd	r0, r1, [r3]
  405d62:	f7ff ba54 	b.w	40520e <_vfiprintf_r+0x7a>
  405d66:	4658      	mov	r0, fp
  405d68:	9607      	str	r6, [sp, #28]
  405d6a:	9302      	str	r3, [sp, #8]
  405d6c:	f001 f908 	bl	406f80 <strlen>
  405d70:	2400      	movs	r4, #0
  405d72:	9005      	str	r0, [sp, #20]
  405d74:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405d78:	f7ff bb5e 	b.w	405438 <_vfiprintf_r+0x2a4>
  405d7c:	aa0f      	add	r2, sp, #60	; 0x3c
  405d7e:	9904      	ldr	r1, [sp, #16]
  405d80:	9806      	ldr	r0, [sp, #24]
  405d82:	f7ff f9c7 	bl	405114 <__sprint_r.part.0>
  405d86:	2800      	cmp	r0, #0
  405d88:	f47f aeb6 	bne.w	405af8 <_vfiprintf_r+0x964>
  405d8c:	9910      	ldr	r1, [sp, #64]	; 0x40
  405d8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405d90:	1c48      	adds	r0, r1, #1
  405d92:	46ca      	mov	sl, r9
  405d94:	e5a7      	b.n	4058e6 <_vfiprintf_r+0x752>
  405d96:	9910      	ldr	r1, [sp, #64]	; 0x40
  405d98:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405d9a:	4e20      	ldr	r6, [pc, #128]	; (405e1c <_vfiprintf_r+0xc88>)
  405d9c:	3101      	adds	r1, #1
  405d9e:	f7ff bb90 	b.w	4054c2 <_vfiprintf_r+0x32e>
  405da2:	2c06      	cmp	r4, #6
  405da4:	bf28      	it	cs
  405da6:	2406      	movcs	r4, #6
  405da8:	9405      	str	r4, [sp, #20]
  405daa:	9607      	str	r6, [sp, #28]
  405dac:	9401      	str	r4, [sp, #4]
  405dae:	f8df b070 	ldr.w	fp, [pc, #112]	; 405e20 <_vfiprintf_r+0xc8c>
  405db2:	e4d5      	b.n	405760 <_vfiprintf_r+0x5cc>
  405db4:	9810      	ldr	r0, [sp, #64]	; 0x40
  405db6:	4e19      	ldr	r6, [pc, #100]	; (405e1c <_vfiprintf_r+0xc88>)
  405db8:	3001      	adds	r0, #1
  405dba:	e603      	b.n	4059c4 <_vfiprintf_r+0x830>
  405dbc:	9405      	str	r4, [sp, #20]
  405dbe:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405dc2:	9607      	str	r6, [sp, #28]
  405dc4:	9302      	str	r3, [sp, #8]
  405dc6:	4604      	mov	r4, r0
  405dc8:	f7ff bb36 	b.w	405438 <_vfiprintf_r+0x2a4>
  405dcc:	4686      	mov	lr, r0
  405dce:	f7ff bbce 	b.w	40556e <_vfiprintf_r+0x3da>
  405dd2:	9806      	ldr	r0, [sp, #24]
  405dd4:	aa0f      	add	r2, sp, #60	; 0x3c
  405dd6:	4659      	mov	r1, fp
  405dd8:	f7ff f99c 	bl	405114 <__sprint_r.part.0>
  405ddc:	2800      	cmp	r0, #0
  405dde:	f43f ae24 	beq.w	405a2a <_vfiprintf_r+0x896>
  405de2:	e624      	b.n	405a2e <_vfiprintf_r+0x89a>
  405de4:	9907      	ldr	r1, [sp, #28]
  405de6:	f898 2001 	ldrb.w	r2, [r8, #1]
  405dea:	680c      	ldr	r4, [r1, #0]
  405dec:	3104      	adds	r1, #4
  405dee:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  405df2:	46b8      	mov	r8, r7
  405df4:	9107      	str	r1, [sp, #28]
  405df6:	f7ff ba3f 	b.w	405278 <_vfiprintf_r+0xe4>
  405dfa:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405dfe:	e43c      	b.n	40567a <_vfiprintf_r+0x4e6>
  405e00:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405e04:	e521      	b.n	40584a <_vfiprintf_r+0x6b6>
  405e06:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405e0a:	f7ff bbf4 	b.w	4055f6 <_vfiprintf_r+0x462>
  405e0e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405e12:	e491      	b.n	405738 <_vfiprintf_r+0x5a4>
  405e14:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405e18:	e469      	b.n	4056ee <_vfiprintf_r+0x55a>
  405e1a:	bf00      	nop
  405e1c:	004081a0 	.word	0x004081a0
  405e20:	00408198 	.word	0x00408198

00405e24 <__sbprintf>:
  405e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405e28:	460c      	mov	r4, r1
  405e2a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  405e2e:	8989      	ldrh	r1, [r1, #12]
  405e30:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405e32:	89e5      	ldrh	r5, [r4, #14]
  405e34:	9619      	str	r6, [sp, #100]	; 0x64
  405e36:	f021 0102 	bic.w	r1, r1, #2
  405e3a:	4606      	mov	r6, r0
  405e3c:	69e0      	ldr	r0, [r4, #28]
  405e3e:	f8ad 100c 	strh.w	r1, [sp, #12]
  405e42:	4617      	mov	r7, r2
  405e44:	f44f 6180 	mov.w	r1, #1024	; 0x400
  405e48:	6a62      	ldr	r2, [r4, #36]	; 0x24
  405e4a:	f8ad 500e 	strh.w	r5, [sp, #14]
  405e4e:	4698      	mov	r8, r3
  405e50:	ad1a      	add	r5, sp, #104	; 0x68
  405e52:	2300      	movs	r3, #0
  405e54:	9007      	str	r0, [sp, #28]
  405e56:	a816      	add	r0, sp, #88	; 0x58
  405e58:	9209      	str	r2, [sp, #36]	; 0x24
  405e5a:	9306      	str	r3, [sp, #24]
  405e5c:	9500      	str	r5, [sp, #0]
  405e5e:	9504      	str	r5, [sp, #16]
  405e60:	9102      	str	r1, [sp, #8]
  405e62:	9105      	str	r1, [sp, #20]
  405e64:	f000 fd48 	bl	4068f8 <__retarget_lock_init_recursive>
  405e68:	4643      	mov	r3, r8
  405e6a:	463a      	mov	r2, r7
  405e6c:	4669      	mov	r1, sp
  405e6e:	4630      	mov	r0, r6
  405e70:	f7ff f990 	bl	405194 <_vfiprintf_r>
  405e74:	1e05      	subs	r5, r0, #0
  405e76:	db07      	blt.n	405e88 <__sbprintf+0x64>
  405e78:	4630      	mov	r0, r6
  405e7a:	4669      	mov	r1, sp
  405e7c:	f000 f928 	bl	4060d0 <_fflush_r>
  405e80:	2800      	cmp	r0, #0
  405e82:	bf18      	it	ne
  405e84:	f04f 35ff 	movne.w	r5, #4294967295
  405e88:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405e8c:	065b      	lsls	r3, r3, #25
  405e8e:	d503      	bpl.n	405e98 <__sbprintf+0x74>
  405e90:	89a3      	ldrh	r3, [r4, #12]
  405e92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405e96:	81a3      	strh	r3, [r4, #12]
  405e98:	9816      	ldr	r0, [sp, #88]	; 0x58
  405e9a:	f000 fd2f 	bl	4068fc <__retarget_lock_close_recursive>
  405e9e:	4628      	mov	r0, r5
  405ea0:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  405ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00405ea8 <__swsetup_r>:
  405ea8:	b538      	push	{r3, r4, r5, lr}
  405eaa:	4b30      	ldr	r3, [pc, #192]	; (405f6c <__swsetup_r+0xc4>)
  405eac:	681b      	ldr	r3, [r3, #0]
  405eae:	4605      	mov	r5, r0
  405eb0:	460c      	mov	r4, r1
  405eb2:	b113      	cbz	r3, 405eba <__swsetup_r+0x12>
  405eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  405eb6:	2a00      	cmp	r2, #0
  405eb8:	d038      	beq.n	405f2c <__swsetup_r+0x84>
  405eba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405ebe:	b293      	uxth	r3, r2
  405ec0:	0718      	lsls	r0, r3, #28
  405ec2:	d50c      	bpl.n	405ede <__swsetup_r+0x36>
  405ec4:	6920      	ldr	r0, [r4, #16]
  405ec6:	b1a8      	cbz	r0, 405ef4 <__swsetup_r+0x4c>
  405ec8:	f013 0201 	ands.w	r2, r3, #1
  405ecc:	d01e      	beq.n	405f0c <__swsetup_r+0x64>
  405ece:	6963      	ldr	r3, [r4, #20]
  405ed0:	2200      	movs	r2, #0
  405ed2:	425b      	negs	r3, r3
  405ed4:	61a3      	str	r3, [r4, #24]
  405ed6:	60a2      	str	r2, [r4, #8]
  405ed8:	b1f0      	cbz	r0, 405f18 <__swsetup_r+0x70>
  405eda:	2000      	movs	r0, #0
  405edc:	bd38      	pop	{r3, r4, r5, pc}
  405ede:	06d9      	lsls	r1, r3, #27
  405ee0:	d53c      	bpl.n	405f5c <__swsetup_r+0xb4>
  405ee2:	0758      	lsls	r0, r3, #29
  405ee4:	d426      	bmi.n	405f34 <__swsetup_r+0x8c>
  405ee6:	6920      	ldr	r0, [r4, #16]
  405ee8:	f042 0308 	orr.w	r3, r2, #8
  405eec:	81a3      	strh	r3, [r4, #12]
  405eee:	b29b      	uxth	r3, r3
  405ef0:	2800      	cmp	r0, #0
  405ef2:	d1e9      	bne.n	405ec8 <__swsetup_r+0x20>
  405ef4:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405ef8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405efc:	d0e4      	beq.n	405ec8 <__swsetup_r+0x20>
  405efe:	4628      	mov	r0, r5
  405f00:	4621      	mov	r1, r4
  405f02:	f000 fd2f 	bl	406964 <__smakebuf_r>
  405f06:	89a3      	ldrh	r3, [r4, #12]
  405f08:	6920      	ldr	r0, [r4, #16]
  405f0a:	e7dd      	b.n	405ec8 <__swsetup_r+0x20>
  405f0c:	0799      	lsls	r1, r3, #30
  405f0e:	bf58      	it	pl
  405f10:	6962      	ldrpl	r2, [r4, #20]
  405f12:	60a2      	str	r2, [r4, #8]
  405f14:	2800      	cmp	r0, #0
  405f16:	d1e0      	bne.n	405eda <__swsetup_r+0x32>
  405f18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405f1c:	061a      	lsls	r2, r3, #24
  405f1e:	d5dd      	bpl.n	405edc <__swsetup_r+0x34>
  405f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405f24:	81a3      	strh	r3, [r4, #12]
  405f26:	f04f 30ff 	mov.w	r0, #4294967295
  405f2a:	bd38      	pop	{r3, r4, r5, pc}
  405f2c:	4618      	mov	r0, r3
  405f2e:	f000 f927 	bl	406180 <__sinit>
  405f32:	e7c2      	b.n	405eba <__swsetup_r+0x12>
  405f34:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405f36:	b151      	cbz	r1, 405f4e <__swsetup_r+0xa6>
  405f38:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405f3c:	4299      	cmp	r1, r3
  405f3e:	d004      	beq.n	405f4a <__swsetup_r+0xa2>
  405f40:	4628      	mov	r0, r5
  405f42:	f000 fa43 	bl	4063cc <_free_r>
  405f46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405f4a:	2300      	movs	r3, #0
  405f4c:	6323      	str	r3, [r4, #48]	; 0x30
  405f4e:	2300      	movs	r3, #0
  405f50:	6920      	ldr	r0, [r4, #16]
  405f52:	6063      	str	r3, [r4, #4]
  405f54:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  405f58:	6020      	str	r0, [r4, #0]
  405f5a:	e7c5      	b.n	405ee8 <__swsetup_r+0x40>
  405f5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  405f60:	2309      	movs	r3, #9
  405f62:	602b      	str	r3, [r5, #0]
  405f64:	f04f 30ff 	mov.w	r0, #4294967295
  405f68:	81a2      	strh	r2, [r4, #12]
  405f6a:	bd38      	pop	{r3, r4, r5, pc}
  405f6c:	2040004c 	.word	0x2040004c

00405f70 <register_fini>:
  405f70:	4b02      	ldr	r3, [pc, #8]	; (405f7c <register_fini+0xc>)
  405f72:	b113      	cbz	r3, 405f7a <register_fini+0xa>
  405f74:	4802      	ldr	r0, [pc, #8]	; (405f80 <register_fini+0x10>)
  405f76:	f000 b805 	b.w	405f84 <atexit>
  405f7a:	4770      	bx	lr
  405f7c:	00000000 	.word	0x00000000
  405f80:	004061f1 	.word	0x004061f1

00405f84 <atexit>:
  405f84:	2300      	movs	r3, #0
  405f86:	4601      	mov	r1, r0
  405f88:	461a      	mov	r2, r3
  405f8a:	4618      	mov	r0, r3
  405f8c:	f001 b90c 	b.w	4071a8 <__register_exitproc>

00405f90 <__sflush_r>:
  405f90:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  405f94:	b29a      	uxth	r2, r3
  405f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405f9a:	460d      	mov	r5, r1
  405f9c:	0711      	lsls	r1, r2, #28
  405f9e:	4680      	mov	r8, r0
  405fa0:	d43a      	bmi.n	406018 <__sflush_r+0x88>
  405fa2:	686a      	ldr	r2, [r5, #4]
  405fa4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  405fa8:	2a00      	cmp	r2, #0
  405faa:	81ab      	strh	r3, [r5, #12]
  405fac:	dd6f      	ble.n	40608e <__sflush_r+0xfe>
  405fae:	6aac      	ldr	r4, [r5, #40]	; 0x28
  405fb0:	2c00      	cmp	r4, #0
  405fb2:	d049      	beq.n	406048 <__sflush_r+0xb8>
  405fb4:	2200      	movs	r2, #0
  405fb6:	b29b      	uxth	r3, r3
  405fb8:	f8d8 6000 	ldr.w	r6, [r8]
  405fbc:	f8c8 2000 	str.w	r2, [r8]
  405fc0:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  405fc4:	d067      	beq.n	406096 <__sflush_r+0x106>
  405fc6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  405fc8:	075f      	lsls	r7, r3, #29
  405fca:	d505      	bpl.n	405fd8 <__sflush_r+0x48>
  405fcc:	6869      	ldr	r1, [r5, #4]
  405fce:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  405fd0:	1a52      	subs	r2, r2, r1
  405fd2:	b10b      	cbz	r3, 405fd8 <__sflush_r+0x48>
  405fd4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  405fd6:	1ad2      	subs	r2, r2, r3
  405fd8:	2300      	movs	r3, #0
  405fda:	69e9      	ldr	r1, [r5, #28]
  405fdc:	4640      	mov	r0, r8
  405fde:	47a0      	blx	r4
  405fe0:	1c44      	adds	r4, r0, #1
  405fe2:	d03c      	beq.n	40605e <__sflush_r+0xce>
  405fe4:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  405fe8:	692a      	ldr	r2, [r5, #16]
  405fea:	602a      	str	r2, [r5, #0]
  405fec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  405ff0:	2200      	movs	r2, #0
  405ff2:	81ab      	strh	r3, [r5, #12]
  405ff4:	04db      	lsls	r3, r3, #19
  405ff6:	606a      	str	r2, [r5, #4]
  405ff8:	d447      	bmi.n	40608a <__sflush_r+0xfa>
  405ffa:	6b29      	ldr	r1, [r5, #48]	; 0x30
  405ffc:	f8c8 6000 	str.w	r6, [r8]
  406000:	b311      	cbz	r1, 406048 <__sflush_r+0xb8>
  406002:	f105 0340 	add.w	r3, r5, #64	; 0x40
  406006:	4299      	cmp	r1, r3
  406008:	d002      	beq.n	406010 <__sflush_r+0x80>
  40600a:	4640      	mov	r0, r8
  40600c:	f000 f9de 	bl	4063cc <_free_r>
  406010:	2000      	movs	r0, #0
  406012:	6328      	str	r0, [r5, #48]	; 0x30
  406014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406018:	692e      	ldr	r6, [r5, #16]
  40601a:	b1ae      	cbz	r6, 406048 <__sflush_r+0xb8>
  40601c:	682c      	ldr	r4, [r5, #0]
  40601e:	602e      	str	r6, [r5, #0]
  406020:	0791      	lsls	r1, r2, #30
  406022:	bf0c      	ite	eq
  406024:	696b      	ldreq	r3, [r5, #20]
  406026:	2300      	movne	r3, #0
  406028:	1ba4      	subs	r4, r4, r6
  40602a:	60ab      	str	r3, [r5, #8]
  40602c:	e00a      	b.n	406044 <__sflush_r+0xb4>
  40602e:	4623      	mov	r3, r4
  406030:	4632      	mov	r2, r6
  406032:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  406034:	69e9      	ldr	r1, [r5, #28]
  406036:	4640      	mov	r0, r8
  406038:	47b8      	blx	r7
  40603a:	2800      	cmp	r0, #0
  40603c:	eba4 0400 	sub.w	r4, r4, r0
  406040:	4406      	add	r6, r0
  406042:	dd04      	ble.n	40604e <__sflush_r+0xbe>
  406044:	2c00      	cmp	r4, #0
  406046:	dcf2      	bgt.n	40602e <__sflush_r+0x9e>
  406048:	2000      	movs	r0, #0
  40604a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40604e:	89ab      	ldrh	r3, [r5, #12]
  406050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406054:	81ab      	strh	r3, [r5, #12]
  406056:	f04f 30ff 	mov.w	r0, #4294967295
  40605a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40605e:	f8d8 4000 	ldr.w	r4, [r8]
  406062:	2c1d      	cmp	r4, #29
  406064:	d8f3      	bhi.n	40604e <__sflush_r+0xbe>
  406066:	4b19      	ldr	r3, [pc, #100]	; (4060cc <__sflush_r+0x13c>)
  406068:	40e3      	lsrs	r3, r4
  40606a:	43db      	mvns	r3, r3
  40606c:	f013 0301 	ands.w	r3, r3, #1
  406070:	d1ed      	bne.n	40604e <__sflush_r+0xbe>
  406072:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  406076:	606b      	str	r3, [r5, #4]
  406078:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  40607c:	6929      	ldr	r1, [r5, #16]
  40607e:	81ab      	strh	r3, [r5, #12]
  406080:	04da      	lsls	r2, r3, #19
  406082:	6029      	str	r1, [r5, #0]
  406084:	d5b9      	bpl.n	405ffa <__sflush_r+0x6a>
  406086:	2c00      	cmp	r4, #0
  406088:	d1b7      	bne.n	405ffa <__sflush_r+0x6a>
  40608a:	6528      	str	r0, [r5, #80]	; 0x50
  40608c:	e7b5      	b.n	405ffa <__sflush_r+0x6a>
  40608e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  406090:	2a00      	cmp	r2, #0
  406092:	dc8c      	bgt.n	405fae <__sflush_r+0x1e>
  406094:	e7d8      	b.n	406048 <__sflush_r+0xb8>
  406096:	2301      	movs	r3, #1
  406098:	69e9      	ldr	r1, [r5, #28]
  40609a:	4640      	mov	r0, r8
  40609c:	47a0      	blx	r4
  40609e:	1c43      	adds	r3, r0, #1
  4060a0:	4602      	mov	r2, r0
  4060a2:	d002      	beq.n	4060aa <__sflush_r+0x11a>
  4060a4:	89ab      	ldrh	r3, [r5, #12]
  4060a6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4060a8:	e78e      	b.n	405fc8 <__sflush_r+0x38>
  4060aa:	f8d8 3000 	ldr.w	r3, [r8]
  4060ae:	2b00      	cmp	r3, #0
  4060b0:	d0f8      	beq.n	4060a4 <__sflush_r+0x114>
  4060b2:	2b1d      	cmp	r3, #29
  4060b4:	d001      	beq.n	4060ba <__sflush_r+0x12a>
  4060b6:	2b16      	cmp	r3, #22
  4060b8:	d102      	bne.n	4060c0 <__sflush_r+0x130>
  4060ba:	f8c8 6000 	str.w	r6, [r8]
  4060be:	e7c3      	b.n	406048 <__sflush_r+0xb8>
  4060c0:	89ab      	ldrh	r3, [r5, #12]
  4060c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4060c6:	81ab      	strh	r3, [r5, #12]
  4060c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4060cc:	20400001 	.word	0x20400001

004060d0 <_fflush_r>:
  4060d0:	b538      	push	{r3, r4, r5, lr}
  4060d2:	460d      	mov	r5, r1
  4060d4:	4604      	mov	r4, r0
  4060d6:	b108      	cbz	r0, 4060dc <_fflush_r+0xc>
  4060d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4060da:	b1bb      	cbz	r3, 40610c <_fflush_r+0x3c>
  4060dc:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4060e0:	b188      	cbz	r0, 406106 <_fflush_r+0x36>
  4060e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4060e4:	07db      	lsls	r3, r3, #31
  4060e6:	d401      	bmi.n	4060ec <_fflush_r+0x1c>
  4060e8:	0581      	lsls	r1, r0, #22
  4060ea:	d517      	bpl.n	40611c <_fflush_r+0x4c>
  4060ec:	4620      	mov	r0, r4
  4060ee:	4629      	mov	r1, r5
  4060f0:	f7ff ff4e 	bl	405f90 <__sflush_r>
  4060f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4060f6:	07da      	lsls	r2, r3, #31
  4060f8:	4604      	mov	r4, r0
  4060fa:	d402      	bmi.n	406102 <_fflush_r+0x32>
  4060fc:	89ab      	ldrh	r3, [r5, #12]
  4060fe:	059b      	lsls	r3, r3, #22
  406100:	d507      	bpl.n	406112 <_fflush_r+0x42>
  406102:	4620      	mov	r0, r4
  406104:	bd38      	pop	{r3, r4, r5, pc}
  406106:	4604      	mov	r4, r0
  406108:	4620      	mov	r0, r4
  40610a:	bd38      	pop	{r3, r4, r5, pc}
  40610c:	f000 f838 	bl	406180 <__sinit>
  406110:	e7e4      	b.n	4060dc <_fflush_r+0xc>
  406112:	6da8      	ldr	r0, [r5, #88]	; 0x58
  406114:	f000 fbf6 	bl	406904 <__retarget_lock_release_recursive>
  406118:	4620      	mov	r0, r4
  40611a:	bd38      	pop	{r3, r4, r5, pc}
  40611c:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40611e:	f000 fbef 	bl	406900 <__retarget_lock_acquire_recursive>
  406122:	e7e3      	b.n	4060ec <_fflush_r+0x1c>

00406124 <_cleanup_r>:
  406124:	4901      	ldr	r1, [pc, #4]	; (40612c <_cleanup_r+0x8>)
  406126:	f000 bbaf 	b.w	406888 <_fwalk_reent>
  40612a:	bf00      	nop
  40612c:	00407291 	.word	0x00407291

00406130 <std.isra.0>:
  406130:	b510      	push	{r4, lr}
  406132:	2300      	movs	r3, #0
  406134:	4604      	mov	r4, r0
  406136:	8181      	strh	r1, [r0, #12]
  406138:	81c2      	strh	r2, [r0, #14]
  40613a:	6003      	str	r3, [r0, #0]
  40613c:	6043      	str	r3, [r0, #4]
  40613e:	6083      	str	r3, [r0, #8]
  406140:	6643      	str	r3, [r0, #100]	; 0x64
  406142:	6103      	str	r3, [r0, #16]
  406144:	6143      	str	r3, [r0, #20]
  406146:	6183      	str	r3, [r0, #24]
  406148:	4619      	mov	r1, r3
  40614a:	2208      	movs	r2, #8
  40614c:	305c      	adds	r0, #92	; 0x5c
  40614e:	f7fe ff75 	bl	40503c <memset>
  406152:	4807      	ldr	r0, [pc, #28]	; (406170 <std.isra.0+0x40>)
  406154:	4907      	ldr	r1, [pc, #28]	; (406174 <std.isra.0+0x44>)
  406156:	4a08      	ldr	r2, [pc, #32]	; (406178 <std.isra.0+0x48>)
  406158:	4b08      	ldr	r3, [pc, #32]	; (40617c <std.isra.0+0x4c>)
  40615a:	6220      	str	r0, [r4, #32]
  40615c:	61e4      	str	r4, [r4, #28]
  40615e:	6261      	str	r1, [r4, #36]	; 0x24
  406160:	62a2      	str	r2, [r4, #40]	; 0x28
  406162:	62e3      	str	r3, [r4, #44]	; 0x2c
  406164:	f104 0058 	add.w	r0, r4, #88	; 0x58
  406168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40616c:	f000 bbc4 	b.w	4068f8 <__retarget_lock_init_recursive>
  406170:	00406ee5 	.word	0x00406ee5
  406174:	00406f09 	.word	0x00406f09
  406178:	00406f45 	.word	0x00406f45
  40617c:	00406f65 	.word	0x00406f65

00406180 <__sinit>:
  406180:	b510      	push	{r4, lr}
  406182:	4604      	mov	r4, r0
  406184:	4812      	ldr	r0, [pc, #72]	; (4061d0 <__sinit+0x50>)
  406186:	f000 fbbb 	bl	406900 <__retarget_lock_acquire_recursive>
  40618a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40618c:	b9d2      	cbnz	r2, 4061c4 <__sinit+0x44>
  40618e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  406192:	4810      	ldr	r0, [pc, #64]	; (4061d4 <__sinit+0x54>)
  406194:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  406198:	2103      	movs	r1, #3
  40619a:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40619e:	63e0      	str	r0, [r4, #60]	; 0x3c
  4061a0:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4061a4:	6860      	ldr	r0, [r4, #4]
  4061a6:	2104      	movs	r1, #4
  4061a8:	f7ff ffc2 	bl	406130 <std.isra.0>
  4061ac:	2201      	movs	r2, #1
  4061ae:	2109      	movs	r1, #9
  4061b0:	68a0      	ldr	r0, [r4, #8]
  4061b2:	f7ff ffbd 	bl	406130 <std.isra.0>
  4061b6:	2202      	movs	r2, #2
  4061b8:	2112      	movs	r1, #18
  4061ba:	68e0      	ldr	r0, [r4, #12]
  4061bc:	f7ff ffb8 	bl	406130 <std.isra.0>
  4061c0:	2301      	movs	r3, #1
  4061c2:	63a3      	str	r3, [r4, #56]	; 0x38
  4061c4:	4802      	ldr	r0, [pc, #8]	; (4061d0 <__sinit+0x50>)
  4061c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4061ca:	f000 bb9b 	b.w	406904 <__retarget_lock_release_recursive>
  4061ce:	bf00      	nop
  4061d0:	2043f49c 	.word	0x2043f49c
  4061d4:	00406125 	.word	0x00406125

004061d8 <__sfp_lock_acquire>:
  4061d8:	4801      	ldr	r0, [pc, #4]	; (4061e0 <__sfp_lock_acquire+0x8>)
  4061da:	f000 bb91 	b.w	406900 <__retarget_lock_acquire_recursive>
  4061de:	bf00      	nop
  4061e0:	2043f4b0 	.word	0x2043f4b0

004061e4 <__sfp_lock_release>:
  4061e4:	4801      	ldr	r0, [pc, #4]	; (4061ec <__sfp_lock_release+0x8>)
  4061e6:	f000 bb8d 	b.w	406904 <__retarget_lock_release_recursive>
  4061ea:	bf00      	nop
  4061ec:	2043f4b0 	.word	0x2043f4b0

004061f0 <__libc_fini_array>:
  4061f0:	b538      	push	{r3, r4, r5, lr}
  4061f2:	4c0a      	ldr	r4, [pc, #40]	; (40621c <__libc_fini_array+0x2c>)
  4061f4:	4d0a      	ldr	r5, [pc, #40]	; (406220 <__libc_fini_array+0x30>)
  4061f6:	1b64      	subs	r4, r4, r5
  4061f8:	10a4      	asrs	r4, r4, #2
  4061fa:	d00a      	beq.n	406212 <__libc_fini_array+0x22>
  4061fc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  406200:	3b01      	subs	r3, #1
  406202:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  406206:	3c01      	subs	r4, #1
  406208:	f855 3904 	ldr.w	r3, [r5], #-4
  40620c:	4798      	blx	r3
  40620e:	2c00      	cmp	r4, #0
  406210:	d1f9      	bne.n	406206 <__libc_fini_array+0x16>
  406212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406216:	f002 b867 	b.w	4082e8 <_fini>
  40621a:	bf00      	nop
  40621c:	004082f8 	.word	0x004082f8
  406220:	004082f4 	.word	0x004082f4

00406224 <__fputwc>:
  406224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406228:	b082      	sub	sp, #8
  40622a:	4680      	mov	r8, r0
  40622c:	4689      	mov	r9, r1
  40622e:	4614      	mov	r4, r2
  406230:	f000 fb54 	bl	4068dc <__locale_mb_cur_max>
  406234:	2801      	cmp	r0, #1
  406236:	d036      	beq.n	4062a6 <__fputwc+0x82>
  406238:	464a      	mov	r2, r9
  40623a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40623e:	a901      	add	r1, sp, #4
  406240:	4640      	mov	r0, r8
  406242:	f000 ff63 	bl	40710c <_wcrtomb_r>
  406246:	1c42      	adds	r2, r0, #1
  406248:	4606      	mov	r6, r0
  40624a:	d025      	beq.n	406298 <__fputwc+0x74>
  40624c:	b3a8      	cbz	r0, 4062ba <__fputwc+0x96>
  40624e:	f89d e004 	ldrb.w	lr, [sp, #4]
  406252:	2500      	movs	r5, #0
  406254:	f10d 0a04 	add.w	sl, sp, #4
  406258:	e009      	b.n	40626e <__fputwc+0x4a>
  40625a:	6823      	ldr	r3, [r4, #0]
  40625c:	1c5a      	adds	r2, r3, #1
  40625e:	6022      	str	r2, [r4, #0]
  406260:	f883 e000 	strb.w	lr, [r3]
  406264:	3501      	adds	r5, #1
  406266:	42b5      	cmp	r5, r6
  406268:	d227      	bcs.n	4062ba <__fputwc+0x96>
  40626a:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40626e:	68a3      	ldr	r3, [r4, #8]
  406270:	3b01      	subs	r3, #1
  406272:	2b00      	cmp	r3, #0
  406274:	60a3      	str	r3, [r4, #8]
  406276:	daf0      	bge.n	40625a <__fputwc+0x36>
  406278:	69a7      	ldr	r7, [r4, #24]
  40627a:	42bb      	cmp	r3, r7
  40627c:	4671      	mov	r1, lr
  40627e:	4622      	mov	r2, r4
  406280:	4640      	mov	r0, r8
  406282:	db02      	blt.n	40628a <__fputwc+0x66>
  406284:	f1be 0f0a 	cmp.w	lr, #10
  406288:	d1e7      	bne.n	40625a <__fputwc+0x36>
  40628a:	f000 fee7 	bl	40705c <__swbuf_r>
  40628e:	1c43      	adds	r3, r0, #1
  406290:	d1e8      	bne.n	406264 <__fputwc+0x40>
  406292:	b002      	add	sp, #8
  406294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406298:	89a3      	ldrh	r3, [r4, #12]
  40629a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40629e:	81a3      	strh	r3, [r4, #12]
  4062a0:	b002      	add	sp, #8
  4062a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4062a6:	f109 33ff 	add.w	r3, r9, #4294967295
  4062aa:	2bfe      	cmp	r3, #254	; 0xfe
  4062ac:	d8c4      	bhi.n	406238 <__fputwc+0x14>
  4062ae:	fa5f fe89 	uxtb.w	lr, r9
  4062b2:	4606      	mov	r6, r0
  4062b4:	f88d e004 	strb.w	lr, [sp, #4]
  4062b8:	e7cb      	b.n	406252 <__fputwc+0x2e>
  4062ba:	4648      	mov	r0, r9
  4062bc:	b002      	add	sp, #8
  4062be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4062c2:	bf00      	nop

004062c4 <_fputwc_r>:
  4062c4:	b530      	push	{r4, r5, lr}
  4062c6:	6e53      	ldr	r3, [r2, #100]	; 0x64
  4062c8:	f013 0f01 	tst.w	r3, #1
  4062cc:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4062d0:	4614      	mov	r4, r2
  4062d2:	b083      	sub	sp, #12
  4062d4:	4605      	mov	r5, r0
  4062d6:	b29a      	uxth	r2, r3
  4062d8:	d101      	bne.n	4062de <_fputwc_r+0x1a>
  4062da:	0590      	lsls	r0, r2, #22
  4062dc:	d51c      	bpl.n	406318 <_fputwc_r+0x54>
  4062de:	0490      	lsls	r0, r2, #18
  4062e0:	d406      	bmi.n	4062f0 <_fputwc_r+0x2c>
  4062e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4062e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4062e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4062ec:	81a3      	strh	r3, [r4, #12]
  4062ee:	6662      	str	r2, [r4, #100]	; 0x64
  4062f0:	4628      	mov	r0, r5
  4062f2:	4622      	mov	r2, r4
  4062f4:	f7ff ff96 	bl	406224 <__fputwc>
  4062f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4062fa:	07da      	lsls	r2, r3, #31
  4062fc:	4605      	mov	r5, r0
  4062fe:	d402      	bmi.n	406306 <_fputwc_r+0x42>
  406300:	89a3      	ldrh	r3, [r4, #12]
  406302:	059b      	lsls	r3, r3, #22
  406304:	d502      	bpl.n	40630c <_fputwc_r+0x48>
  406306:	4628      	mov	r0, r5
  406308:	b003      	add	sp, #12
  40630a:	bd30      	pop	{r4, r5, pc}
  40630c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40630e:	f000 faf9 	bl	406904 <__retarget_lock_release_recursive>
  406312:	4628      	mov	r0, r5
  406314:	b003      	add	sp, #12
  406316:	bd30      	pop	{r4, r5, pc}
  406318:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40631a:	9101      	str	r1, [sp, #4]
  40631c:	f000 faf0 	bl	406900 <__retarget_lock_acquire_recursive>
  406320:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406324:	9901      	ldr	r1, [sp, #4]
  406326:	b29a      	uxth	r2, r3
  406328:	e7d9      	b.n	4062de <_fputwc_r+0x1a>
  40632a:	bf00      	nop

0040632c <_malloc_trim_r>:
  40632c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40632e:	4f24      	ldr	r7, [pc, #144]	; (4063c0 <_malloc_trim_r+0x94>)
  406330:	460c      	mov	r4, r1
  406332:	4606      	mov	r6, r0
  406334:	f7fe fed0 	bl	4050d8 <__malloc_lock>
  406338:	68bb      	ldr	r3, [r7, #8]
  40633a:	685d      	ldr	r5, [r3, #4]
  40633c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  406340:	310f      	adds	r1, #15
  406342:	f025 0503 	bic.w	r5, r5, #3
  406346:	4429      	add	r1, r5
  406348:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40634c:	f021 010f 	bic.w	r1, r1, #15
  406350:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  406354:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  406358:	db07      	blt.n	40636a <_malloc_trim_r+0x3e>
  40635a:	2100      	movs	r1, #0
  40635c:	4630      	mov	r0, r6
  40635e:	f7fe fec7 	bl	4050f0 <_sbrk_r>
  406362:	68bb      	ldr	r3, [r7, #8]
  406364:	442b      	add	r3, r5
  406366:	4298      	cmp	r0, r3
  406368:	d004      	beq.n	406374 <_malloc_trim_r+0x48>
  40636a:	4630      	mov	r0, r6
  40636c:	f7fe feba 	bl	4050e4 <__malloc_unlock>
  406370:	2000      	movs	r0, #0
  406372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406374:	4261      	negs	r1, r4
  406376:	4630      	mov	r0, r6
  406378:	f7fe feba 	bl	4050f0 <_sbrk_r>
  40637c:	3001      	adds	r0, #1
  40637e:	d00d      	beq.n	40639c <_malloc_trim_r+0x70>
  406380:	4b10      	ldr	r3, [pc, #64]	; (4063c4 <_malloc_trim_r+0x98>)
  406382:	68ba      	ldr	r2, [r7, #8]
  406384:	6819      	ldr	r1, [r3, #0]
  406386:	1b2d      	subs	r5, r5, r4
  406388:	f045 0501 	orr.w	r5, r5, #1
  40638c:	4630      	mov	r0, r6
  40638e:	1b09      	subs	r1, r1, r4
  406390:	6055      	str	r5, [r2, #4]
  406392:	6019      	str	r1, [r3, #0]
  406394:	f7fe fea6 	bl	4050e4 <__malloc_unlock>
  406398:	2001      	movs	r0, #1
  40639a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40639c:	2100      	movs	r1, #0
  40639e:	4630      	mov	r0, r6
  4063a0:	f7fe fea6 	bl	4050f0 <_sbrk_r>
  4063a4:	68ba      	ldr	r2, [r7, #8]
  4063a6:	1a83      	subs	r3, r0, r2
  4063a8:	2b0f      	cmp	r3, #15
  4063aa:	ddde      	ble.n	40636a <_malloc_trim_r+0x3e>
  4063ac:	4c06      	ldr	r4, [pc, #24]	; (4063c8 <_malloc_trim_r+0x9c>)
  4063ae:	4905      	ldr	r1, [pc, #20]	; (4063c4 <_malloc_trim_r+0x98>)
  4063b0:	6824      	ldr	r4, [r4, #0]
  4063b2:	f043 0301 	orr.w	r3, r3, #1
  4063b6:	1b00      	subs	r0, r0, r4
  4063b8:	6053      	str	r3, [r2, #4]
  4063ba:	6008      	str	r0, [r1, #0]
  4063bc:	e7d5      	b.n	40636a <_malloc_trim_r+0x3e>
  4063be:	bf00      	nop
  4063c0:	20400478 	.word	0x20400478
  4063c4:	2043c80c 	.word	0x2043c80c
  4063c8:	20400880 	.word	0x20400880

004063cc <_free_r>:
  4063cc:	2900      	cmp	r1, #0
  4063ce:	d044      	beq.n	40645a <_free_r+0x8e>
  4063d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4063d4:	460d      	mov	r5, r1
  4063d6:	4680      	mov	r8, r0
  4063d8:	f7fe fe7e 	bl	4050d8 <__malloc_lock>
  4063dc:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4063e0:	4969      	ldr	r1, [pc, #420]	; (406588 <_free_r+0x1bc>)
  4063e2:	f027 0301 	bic.w	r3, r7, #1
  4063e6:	f1a5 0408 	sub.w	r4, r5, #8
  4063ea:	18e2      	adds	r2, r4, r3
  4063ec:	688e      	ldr	r6, [r1, #8]
  4063ee:	6850      	ldr	r0, [r2, #4]
  4063f0:	42b2      	cmp	r2, r6
  4063f2:	f020 0003 	bic.w	r0, r0, #3
  4063f6:	d05e      	beq.n	4064b6 <_free_r+0xea>
  4063f8:	07fe      	lsls	r6, r7, #31
  4063fa:	6050      	str	r0, [r2, #4]
  4063fc:	d40b      	bmi.n	406416 <_free_r+0x4a>
  4063fe:	f855 7c08 	ldr.w	r7, [r5, #-8]
  406402:	1be4      	subs	r4, r4, r7
  406404:	f101 0e08 	add.w	lr, r1, #8
  406408:	68a5      	ldr	r5, [r4, #8]
  40640a:	4575      	cmp	r5, lr
  40640c:	443b      	add	r3, r7
  40640e:	d06d      	beq.n	4064ec <_free_r+0x120>
  406410:	68e7      	ldr	r7, [r4, #12]
  406412:	60ef      	str	r7, [r5, #12]
  406414:	60bd      	str	r5, [r7, #8]
  406416:	1815      	adds	r5, r2, r0
  406418:	686d      	ldr	r5, [r5, #4]
  40641a:	07ed      	lsls	r5, r5, #31
  40641c:	d53e      	bpl.n	40649c <_free_r+0xd0>
  40641e:	f043 0201 	orr.w	r2, r3, #1
  406422:	6062      	str	r2, [r4, #4]
  406424:	50e3      	str	r3, [r4, r3]
  406426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40642a:	d217      	bcs.n	40645c <_free_r+0x90>
  40642c:	08db      	lsrs	r3, r3, #3
  40642e:	1c58      	adds	r0, r3, #1
  406430:	109a      	asrs	r2, r3, #2
  406432:	684d      	ldr	r5, [r1, #4]
  406434:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  406438:	60a7      	str	r7, [r4, #8]
  40643a:	2301      	movs	r3, #1
  40643c:	4093      	lsls	r3, r2
  40643e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  406442:	432b      	orrs	r3, r5
  406444:	3a08      	subs	r2, #8
  406446:	60e2      	str	r2, [r4, #12]
  406448:	604b      	str	r3, [r1, #4]
  40644a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40644e:	60fc      	str	r4, [r7, #12]
  406450:	4640      	mov	r0, r8
  406452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406456:	f7fe be45 	b.w	4050e4 <__malloc_unlock>
  40645a:	4770      	bx	lr
  40645c:	0a5a      	lsrs	r2, r3, #9
  40645e:	2a04      	cmp	r2, #4
  406460:	d852      	bhi.n	406508 <_free_r+0x13c>
  406462:	099a      	lsrs	r2, r3, #6
  406464:	f102 0739 	add.w	r7, r2, #57	; 0x39
  406468:	00ff      	lsls	r7, r7, #3
  40646a:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40646e:	19c8      	adds	r0, r1, r7
  406470:	59ca      	ldr	r2, [r1, r7]
  406472:	3808      	subs	r0, #8
  406474:	4290      	cmp	r0, r2
  406476:	d04f      	beq.n	406518 <_free_r+0x14c>
  406478:	6851      	ldr	r1, [r2, #4]
  40647a:	f021 0103 	bic.w	r1, r1, #3
  40647e:	428b      	cmp	r3, r1
  406480:	d232      	bcs.n	4064e8 <_free_r+0x11c>
  406482:	6892      	ldr	r2, [r2, #8]
  406484:	4290      	cmp	r0, r2
  406486:	d1f7      	bne.n	406478 <_free_r+0xac>
  406488:	68c3      	ldr	r3, [r0, #12]
  40648a:	60a0      	str	r0, [r4, #8]
  40648c:	60e3      	str	r3, [r4, #12]
  40648e:	609c      	str	r4, [r3, #8]
  406490:	60c4      	str	r4, [r0, #12]
  406492:	4640      	mov	r0, r8
  406494:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406498:	f7fe be24 	b.w	4050e4 <__malloc_unlock>
  40649c:	6895      	ldr	r5, [r2, #8]
  40649e:	4f3b      	ldr	r7, [pc, #236]	; (40658c <_free_r+0x1c0>)
  4064a0:	42bd      	cmp	r5, r7
  4064a2:	4403      	add	r3, r0
  4064a4:	d040      	beq.n	406528 <_free_r+0x15c>
  4064a6:	68d0      	ldr	r0, [r2, #12]
  4064a8:	60e8      	str	r0, [r5, #12]
  4064aa:	f043 0201 	orr.w	r2, r3, #1
  4064ae:	6085      	str	r5, [r0, #8]
  4064b0:	6062      	str	r2, [r4, #4]
  4064b2:	50e3      	str	r3, [r4, r3]
  4064b4:	e7b7      	b.n	406426 <_free_r+0x5a>
  4064b6:	07ff      	lsls	r7, r7, #31
  4064b8:	4403      	add	r3, r0
  4064ba:	d407      	bmi.n	4064cc <_free_r+0x100>
  4064bc:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4064c0:	1aa4      	subs	r4, r4, r2
  4064c2:	4413      	add	r3, r2
  4064c4:	68a0      	ldr	r0, [r4, #8]
  4064c6:	68e2      	ldr	r2, [r4, #12]
  4064c8:	60c2      	str	r2, [r0, #12]
  4064ca:	6090      	str	r0, [r2, #8]
  4064cc:	4a30      	ldr	r2, [pc, #192]	; (406590 <_free_r+0x1c4>)
  4064ce:	6812      	ldr	r2, [r2, #0]
  4064d0:	f043 0001 	orr.w	r0, r3, #1
  4064d4:	4293      	cmp	r3, r2
  4064d6:	6060      	str	r0, [r4, #4]
  4064d8:	608c      	str	r4, [r1, #8]
  4064da:	d3b9      	bcc.n	406450 <_free_r+0x84>
  4064dc:	4b2d      	ldr	r3, [pc, #180]	; (406594 <_free_r+0x1c8>)
  4064de:	4640      	mov	r0, r8
  4064e0:	6819      	ldr	r1, [r3, #0]
  4064e2:	f7ff ff23 	bl	40632c <_malloc_trim_r>
  4064e6:	e7b3      	b.n	406450 <_free_r+0x84>
  4064e8:	4610      	mov	r0, r2
  4064ea:	e7cd      	b.n	406488 <_free_r+0xbc>
  4064ec:	1811      	adds	r1, r2, r0
  4064ee:	6849      	ldr	r1, [r1, #4]
  4064f0:	07c9      	lsls	r1, r1, #31
  4064f2:	d444      	bmi.n	40657e <_free_r+0x1b2>
  4064f4:	6891      	ldr	r1, [r2, #8]
  4064f6:	68d2      	ldr	r2, [r2, #12]
  4064f8:	60ca      	str	r2, [r1, #12]
  4064fa:	4403      	add	r3, r0
  4064fc:	f043 0001 	orr.w	r0, r3, #1
  406500:	6091      	str	r1, [r2, #8]
  406502:	6060      	str	r0, [r4, #4]
  406504:	50e3      	str	r3, [r4, r3]
  406506:	e7a3      	b.n	406450 <_free_r+0x84>
  406508:	2a14      	cmp	r2, #20
  40650a:	d816      	bhi.n	40653a <_free_r+0x16e>
  40650c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  406510:	00ff      	lsls	r7, r7, #3
  406512:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  406516:	e7aa      	b.n	40646e <_free_r+0xa2>
  406518:	10aa      	asrs	r2, r5, #2
  40651a:	2301      	movs	r3, #1
  40651c:	684d      	ldr	r5, [r1, #4]
  40651e:	4093      	lsls	r3, r2
  406520:	432b      	orrs	r3, r5
  406522:	604b      	str	r3, [r1, #4]
  406524:	4603      	mov	r3, r0
  406526:	e7b0      	b.n	40648a <_free_r+0xbe>
  406528:	f043 0201 	orr.w	r2, r3, #1
  40652c:	614c      	str	r4, [r1, #20]
  40652e:	610c      	str	r4, [r1, #16]
  406530:	60e5      	str	r5, [r4, #12]
  406532:	60a5      	str	r5, [r4, #8]
  406534:	6062      	str	r2, [r4, #4]
  406536:	50e3      	str	r3, [r4, r3]
  406538:	e78a      	b.n	406450 <_free_r+0x84>
  40653a:	2a54      	cmp	r2, #84	; 0x54
  40653c:	d806      	bhi.n	40654c <_free_r+0x180>
  40653e:	0b1a      	lsrs	r2, r3, #12
  406540:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  406544:	00ff      	lsls	r7, r7, #3
  406546:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40654a:	e790      	b.n	40646e <_free_r+0xa2>
  40654c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406550:	d806      	bhi.n	406560 <_free_r+0x194>
  406552:	0bda      	lsrs	r2, r3, #15
  406554:	f102 0778 	add.w	r7, r2, #120	; 0x78
  406558:	00ff      	lsls	r7, r7, #3
  40655a:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40655e:	e786      	b.n	40646e <_free_r+0xa2>
  406560:	f240 5054 	movw	r0, #1364	; 0x554
  406564:	4282      	cmp	r2, r0
  406566:	d806      	bhi.n	406576 <_free_r+0x1aa>
  406568:	0c9a      	lsrs	r2, r3, #18
  40656a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40656e:	00ff      	lsls	r7, r7, #3
  406570:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  406574:	e77b      	b.n	40646e <_free_r+0xa2>
  406576:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40657a:	257e      	movs	r5, #126	; 0x7e
  40657c:	e777      	b.n	40646e <_free_r+0xa2>
  40657e:	f043 0101 	orr.w	r1, r3, #1
  406582:	6061      	str	r1, [r4, #4]
  406584:	6013      	str	r3, [r2, #0]
  406586:	e763      	b.n	406450 <_free_r+0x84>
  406588:	20400478 	.word	0x20400478
  40658c:	20400480 	.word	0x20400480
  406590:	20400884 	.word	0x20400884
  406594:	2043c83c 	.word	0x2043c83c

00406598 <__sfvwrite_r>:
  406598:	6893      	ldr	r3, [r2, #8]
  40659a:	2b00      	cmp	r3, #0
  40659c:	d073      	beq.n	406686 <__sfvwrite_r+0xee>
  40659e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4065a2:	898b      	ldrh	r3, [r1, #12]
  4065a4:	b083      	sub	sp, #12
  4065a6:	460c      	mov	r4, r1
  4065a8:	0719      	lsls	r1, r3, #28
  4065aa:	9000      	str	r0, [sp, #0]
  4065ac:	4616      	mov	r6, r2
  4065ae:	d526      	bpl.n	4065fe <__sfvwrite_r+0x66>
  4065b0:	6922      	ldr	r2, [r4, #16]
  4065b2:	b322      	cbz	r2, 4065fe <__sfvwrite_r+0x66>
  4065b4:	f013 0002 	ands.w	r0, r3, #2
  4065b8:	6835      	ldr	r5, [r6, #0]
  4065ba:	d02c      	beq.n	406616 <__sfvwrite_r+0x7e>
  4065bc:	f04f 0900 	mov.w	r9, #0
  4065c0:	4fb0      	ldr	r7, [pc, #704]	; (406884 <__sfvwrite_r+0x2ec>)
  4065c2:	46c8      	mov	r8, r9
  4065c4:	46b2      	mov	sl, r6
  4065c6:	45b8      	cmp	r8, r7
  4065c8:	4643      	mov	r3, r8
  4065ca:	464a      	mov	r2, r9
  4065cc:	bf28      	it	cs
  4065ce:	463b      	movcs	r3, r7
  4065d0:	9800      	ldr	r0, [sp, #0]
  4065d2:	f1b8 0f00 	cmp.w	r8, #0
  4065d6:	d050      	beq.n	40667a <__sfvwrite_r+0xe2>
  4065d8:	69e1      	ldr	r1, [r4, #28]
  4065da:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4065dc:	47b0      	blx	r6
  4065de:	2800      	cmp	r0, #0
  4065e0:	dd58      	ble.n	406694 <__sfvwrite_r+0xfc>
  4065e2:	f8da 3008 	ldr.w	r3, [sl, #8]
  4065e6:	1a1b      	subs	r3, r3, r0
  4065e8:	4481      	add	r9, r0
  4065ea:	eba8 0800 	sub.w	r8, r8, r0
  4065ee:	f8ca 3008 	str.w	r3, [sl, #8]
  4065f2:	2b00      	cmp	r3, #0
  4065f4:	d1e7      	bne.n	4065c6 <__sfvwrite_r+0x2e>
  4065f6:	2000      	movs	r0, #0
  4065f8:	b003      	add	sp, #12
  4065fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4065fe:	4621      	mov	r1, r4
  406600:	9800      	ldr	r0, [sp, #0]
  406602:	f7ff fc51 	bl	405ea8 <__swsetup_r>
  406606:	2800      	cmp	r0, #0
  406608:	f040 8133 	bne.w	406872 <__sfvwrite_r+0x2da>
  40660c:	89a3      	ldrh	r3, [r4, #12]
  40660e:	6835      	ldr	r5, [r6, #0]
  406610:	f013 0002 	ands.w	r0, r3, #2
  406614:	d1d2      	bne.n	4065bc <__sfvwrite_r+0x24>
  406616:	f013 0901 	ands.w	r9, r3, #1
  40661a:	d145      	bne.n	4066a8 <__sfvwrite_r+0x110>
  40661c:	464f      	mov	r7, r9
  40661e:	9601      	str	r6, [sp, #4]
  406620:	b337      	cbz	r7, 406670 <__sfvwrite_r+0xd8>
  406622:	059a      	lsls	r2, r3, #22
  406624:	f8d4 8008 	ldr.w	r8, [r4, #8]
  406628:	f140 8083 	bpl.w	406732 <__sfvwrite_r+0x19a>
  40662c:	4547      	cmp	r7, r8
  40662e:	46c3      	mov	fp, r8
  406630:	f0c0 80ab 	bcc.w	40678a <__sfvwrite_r+0x1f2>
  406634:	f413 6f90 	tst.w	r3, #1152	; 0x480
  406638:	f040 80ac 	bne.w	406794 <__sfvwrite_r+0x1fc>
  40663c:	6820      	ldr	r0, [r4, #0]
  40663e:	46ba      	mov	sl, r7
  406640:	465a      	mov	r2, fp
  406642:	4649      	mov	r1, r9
  406644:	f000 fa44 	bl	406ad0 <memmove>
  406648:	68a2      	ldr	r2, [r4, #8]
  40664a:	6823      	ldr	r3, [r4, #0]
  40664c:	eba2 0208 	sub.w	r2, r2, r8
  406650:	445b      	add	r3, fp
  406652:	60a2      	str	r2, [r4, #8]
  406654:	6023      	str	r3, [r4, #0]
  406656:	9a01      	ldr	r2, [sp, #4]
  406658:	6893      	ldr	r3, [r2, #8]
  40665a:	eba3 030a 	sub.w	r3, r3, sl
  40665e:	44d1      	add	r9, sl
  406660:	eba7 070a 	sub.w	r7, r7, sl
  406664:	6093      	str	r3, [r2, #8]
  406666:	2b00      	cmp	r3, #0
  406668:	d0c5      	beq.n	4065f6 <__sfvwrite_r+0x5e>
  40666a:	89a3      	ldrh	r3, [r4, #12]
  40666c:	2f00      	cmp	r7, #0
  40666e:	d1d8      	bne.n	406622 <__sfvwrite_r+0x8a>
  406670:	f8d5 9000 	ldr.w	r9, [r5]
  406674:	686f      	ldr	r7, [r5, #4]
  406676:	3508      	adds	r5, #8
  406678:	e7d2      	b.n	406620 <__sfvwrite_r+0x88>
  40667a:	f8d5 9000 	ldr.w	r9, [r5]
  40667e:	f8d5 8004 	ldr.w	r8, [r5, #4]
  406682:	3508      	adds	r5, #8
  406684:	e79f      	b.n	4065c6 <__sfvwrite_r+0x2e>
  406686:	2000      	movs	r0, #0
  406688:	4770      	bx	lr
  40668a:	4621      	mov	r1, r4
  40668c:	9800      	ldr	r0, [sp, #0]
  40668e:	f7ff fd1f 	bl	4060d0 <_fflush_r>
  406692:	b370      	cbz	r0, 4066f2 <__sfvwrite_r+0x15a>
  406694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40669c:	f04f 30ff 	mov.w	r0, #4294967295
  4066a0:	81a3      	strh	r3, [r4, #12]
  4066a2:	b003      	add	sp, #12
  4066a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4066a8:	4681      	mov	r9, r0
  4066aa:	4633      	mov	r3, r6
  4066ac:	464e      	mov	r6, r9
  4066ae:	46a8      	mov	r8, r5
  4066b0:	469a      	mov	sl, r3
  4066b2:	464d      	mov	r5, r9
  4066b4:	b34e      	cbz	r6, 40670a <__sfvwrite_r+0x172>
  4066b6:	b380      	cbz	r0, 40671a <__sfvwrite_r+0x182>
  4066b8:	6820      	ldr	r0, [r4, #0]
  4066ba:	6923      	ldr	r3, [r4, #16]
  4066bc:	6962      	ldr	r2, [r4, #20]
  4066be:	45b1      	cmp	r9, r6
  4066c0:	46cb      	mov	fp, r9
  4066c2:	bf28      	it	cs
  4066c4:	46b3      	movcs	fp, r6
  4066c6:	4298      	cmp	r0, r3
  4066c8:	465f      	mov	r7, fp
  4066ca:	d904      	bls.n	4066d6 <__sfvwrite_r+0x13e>
  4066cc:	68a3      	ldr	r3, [r4, #8]
  4066ce:	4413      	add	r3, r2
  4066d0:	459b      	cmp	fp, r3
  4066d2:	f300 80a6 	bgt.w	406822 <__sfvwrite_r+0x28a>
  4066d6:	4593      	cmp	fp, r2
  4066d8:	db4b      	blt.n	406772 <__sfvwrite_r+0x1da>
  4066da:	4613      	mov	r3, r2
  4066dc:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4066de:	69e1      	ldr	r1, [r4, #28]
  4066e0:	9800      	ldr	r0, [sp, #0]
  4066e2:	462a      	mov	r2, r5
  4066e4:	47b8      	blx	r7
  4066e6:	1e07      	subs	r7, r0, #0
  4066e8:	ddd4      	ble.n	406694 <__sfvwrite_r+0xfc>
  4066ea:	ebb9 0907 	subs.w	r9, r9, r7
  4066ee:	d0cc      	beq.n	40668a <__sfvwrite_r+0xf2>
  4066f0:	2001      	movs	r0, #1
  4066f2:	f8da 3008 	ldr.w	r3, [sl, #8]
  4066f6:	1bdb      	subs	r3, r3, r7
  4066f8:	443d      	add	r5, r7
  4066fa:	1bf6      	subs	r6, r6, r7
  4066fc:	f8ca 3008 	str.w	r3, [sl, #8]
  406700:	2b00      	cmp	r3, #0
  406702:	f43f af78 	beq.w	4065f6 <__sfvwrite_r+0x5e>
  406706:	2e00      	cmp	r6, #0
  406708:	d1d5      	bne.n	4066b6 <__sfvwrite_r+0x11e>
  40670a:	f108 0308 	add.w	r3, r8, #8
  40670e:	e913 0060 	ldmdb	r3, {r5, r6}
  406712:	4698      	mov	r8, r3
  406714:	3308      	adds	r3, #8
  406716:	2e00      	cmp	r6, #0
  406718:	d0f9      	beq.n	40670e <__sfvwrite_r+0x176>
  40671a:	4632      	mov	r2, r6
  40671c:	210a      	movs	r1, #10
  40671e:	4628      	mov	r0, r5
  406720:	f000 f986 	bl	406a30 <memchr>
  406724:	2800      	cmp	r0, #0
  406726:	f000 80a1 	beq.w	40686c <__sfvwrite_r+0x2d4>
  40672a:	3001      	adds	r0, #1
  40672c:	eba0 0905 	sub.w	r9, r0, r5
  406730:	e7c2      	b.n	4066b8 <__sfvwrite_r+0x120>
  406732:	6820      	ldr	r0, [r4, #0]
  406734:	6923      	ldr	r3, [r4, #16]
  406736:	4298      	cmp	r0, r3
  406738:	d802      	bhi.n	406740 <__sfvwrite_r+0x1a8>
  40673a:	6963      	ldr	r3, [r4, #20]
  40673c:	429f      	cmp	r7, r3
  40673e:	d25d      	bcs.n	4067fc <__sfvwrite_r+0x264>
  406740:	45b8      	cmp	r8, r7
  406742:	bf28      	it	cs
  406744:	46b8      	movcs	r8, r7
  406746:	4642      	mov	r2, r8
  406748:	4649      	mov	r1, r9
  40674a:	f000 f9c1 	bl	406ad0 <memmove>
  40674e:	68a3      	ldr	r3, [r4, #8]
  406750:	6822      	ldr	r2, [r4, #0]
  406752:	eba3 0308 	sub.w	r3, r3, r8
  406756:	4442      	add	r2, r8
  406758:	60a3      	str	r3, [r4, #8]
  40675a:	6022      	str	r2, [r4, #0]
  40675c:	b10b      	cbz	r3, 406762 <__sfvwrite_r+0x1ca>
  40675e:	46c2      	mov	sl, r8
  406760:	e779      	b.n	406656 <__sfvwrite_r+0xbe>
  406762:	4621      	mov	r1, r4
  406764:	9800      	ldr	r0, [sp, #0]
  406766:	f7ff fcb3 	bl	4060d0 <_fflush_r>
  40676a:	2800      	cmp	r0, #0
  40676c:	d192      	bne.n	406694 <__sfvwrite_r+0xfc>
  40676e:	46c2      	mov	sl, r8
  406770:	e771      	b.n	406656 <__sfvwrite_r+0xbe>
  406772:	465a      	mov	r2, fp
  406774:	4629      	mov	r1, r5
  406776:	f000 f9ab 	bl	406ad0 <memmove>
  40677a:	68a2      	ldr	r2, [r4, #8]
  40677c:	6823      	ldr	r3, [r4, #0]
  40677e:	eba2 020b 	sub.w	r2, r2, fp
  406782:	445b      	add	r3, fp
  406784:	60a2      	str	r2, [r4, #8]
  406786:	6023      	str	r3, [r4, #0]
  406788:	e7af      	b.n	4066ea <__sfvwrite_r+0x152>
  40678a:	6820      	ldr	r0, [r4, #0]
  40678c:	46b8      	mov	r8, r7
  40678e:	46ba      	mov	sl, r7
  406790:	46bb      	mov	fp, r7
  406792:	e755      	b.n	406640 <__sfvwrite_r+0xa8>
  406794:	6962      	ldr	r2, [r4, #20]
  406796:	6820      	ldr	r0, [r4, #0]
  406798:	6921      	ldr	r1, [r4, #16]
  40679a:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40679e:	eba0 0a01 	sub.w	sl, r0, r1
  4067a2:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4067a6:	f10a 0001 	add.w	r0, sl, #1
  4067aa:	ea4f 0868 	mov.w	r8, r8, asr #1
  4067ae:	4438      	add	r0, r7
  4067b0:	4540      	cmp	r0, r8
  4067b2:	4642      	mov	r2, r8
  4067b4:	bf84      	itt	hi
  4067b6:	4680      	movhi	r8, r0
  4067b8:	4642      	movhi	r2, r8
  4067ba:	055b      	lsls	r3, r3, #21
  4067bc:	d544      	bpl.n	406848 <__sfvwrite_r+0x2b0>
  4067be:	4611      	mov	r1, r2
  4067c0:	9800      	ldr	r0, [sp, #0]
  4067c2:	f7fe f8f1 	bl	4049a8 <_malloc_r>
  4067c6:	4683      	mov	fp, r0
  4067c8:	2800      	cmp	r0, #0
  4067ca:	d055      	beq.n	406878 <__sfvwrite_r+0x2e0>
  4067cc:	4652      	mov	r2, sl
  4067ce:	6921      	ldr	r1, [r4, #16]
  4067d0:	f7fe fb9a 	bl	404f08 <memcpy>
  4067d4:	89a3      	ldrh	r3, [r4, #12]
  4067d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4067da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4067de:	81a3      	strh	r3, [r4, #12]
  4067e0:	eb0b 000a 	add.w	r0, fp, sl
  4067e4:	eba8 030a 	sub.w	r3, r8, sl
  4067e8:	f8c4 b010 	str.w	fp, [r4, #16]
  4067ec:	f8c4 8014 	str.w	r8, [r4, #20]
  4067f0:	6020      	str	r0, [r4, #0]
  4067f2:	60a3      	str	r3, [r4, #8]
  4067f4:	46b8      	mov	r8, r7
  4067f6:	46ba      	mov	sl, r7
  4067f8:	46bb      	mov	fp, r7
  4067fa:	e721      	b.n	406640 <__sfvwrite_r+0xa8>
  4067fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  406800:	42b9      	cmp	r1, r7
  406802:	bf28      	it	cs
  406804:	4639      	movcs	r1, r7
  406806:	464a      	mov	r2, r9
  406808:	fb91 f1f3 	sdiv	r1, r1, r3
  40680c:	9800      	ldr	r0, [sp, #0]
  40680e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406810:	fb03 f301 	mul.w	r3, r3, r1
  406814:	69e1      	ldr	r1, [r4, #28]
  406816:	47b0      	blx	r6
  406818:	f1b0 0a00 	subs.w	sl, r0, #0
  40681c:	f73f af1b 	bgt.w	406656 <__sfvwrite_r+0xbe>
  406820:	e738      	b.n	406694 <__sfvwrite_r+0xfc>
  406822:	461a      	mov	r2, r3
  406824:	4629      	mov	r1, r5
  406826:	9301      	str	r3, [sp, #4]
  406828:	f000 f952 	bl	406ad0 <memmove>
  40682c:	6822      	ldr	r2, [r4, #0]
  40682e:	9b01      	ldr	r3, [sp, #4]
  406830:	9800      	ldr	r0, [sp, #0]
  406832:	441a      	add	r2, r3
  406834:	6022      	str	r2, [r4, #0]
  406836:	4621      	mov	r1, r4
  406838:	f7ff fc4a 	bl	4060d0 <_fflush_r>
  40683c:	9b01      	ldr	r3, [sp, #4]
  40683e:	2800      	cmp	r0, #0
  406840:	f47f af28 	bne.w	406694 <__sfvwrite_r+0xfc>
  406844:	461f      	mov	r7, r3
  406846:	e750      	b.n	4066ea <__sfvwrite_r+0x152>
  406848:	9800      	ldr	r0, [sp, #0]
  40684a:	f000 f9a5 	bl	406b98 <_realloc_r>
  40684e:	4683      	mov	fp, r0
  406850:	2800      	cmp	r0, #0
  406852:	d1c5      	bne.n	4067e0 <__sfvwrite_r+0x248>
  406854:	9d00      	ldr	r5, [sp, #0]
  406856:	6921      	ldr	r1, [r4, #16]
  406858:	4628      	mov	r0, r5
  40685a:	f7ff fdb7 	bl	4063cc <_free_r>
  40685e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406862:	220c      	movs	r2, #12
  406864:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  406868:	602a      	str	r2, [r5, #0]
  40686a:	e715      	b.n	406698 <__sfvwrite_r+0x100>
  40686c:	f106 0901 	add.w	r9, r6, #1
  406870:	e722      	b.n	4066b8 <__sfvwrite_r+0x120>
  406872:	f04f 30ff 	mov.w	r0, #4294967295
  406876:	e6bf      	b.n	4065f8 <__sfvwrite_r+0x60>
  406878:	9a00      	ldr	r2, [sp, #0]
  40687a:	230c      	movs	r3, #12
  40687c:	6013      	str	r3, [r2, #0]
  40687e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406882:	e709      	b.n	406698 <__sfvwrite_r+0x100>
  406884:	7ffffc00 	.word	0x7ffffc00

00406888 <_fwalk_reent>:
  406888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40688c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  406890:	d01f      	beq.n	4068d2 <_fwalk_reent+0x4a>
  406892:	4688      	mov	r8, r1
  406894:	4606      	mov	r6, r0
  406896:	f04f 0900 	mov.w	r9, #0
  40689a:	687d      	ldr	r5, [r7, #4]
  40689c:	68bc      	ldr	r4, [r7, #8]
  40689e:	3d01      	subs	r5, #1
  4068a0:	d411      	bmi.n	4068c6 <_fwalk_reent+0x3e>
  4068a2:	89a3      	ldrh	r3, [r4, #12]
  4068a4:	2b01      	cmp	r3, #1
  4068a6:	f105 35ff 	add.w	r5, r5, #4294967295
  4068aa:	d908      	bls.n	4068be <_fwalk_reent+0x36>
  4068ac:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4068b0:	3301      	adds	r3, #1
  4068b2:	4621      	mov	r1, r4
  4068b4:	4630      	mov	r0, r6
  4068b6:	d002      	beq.n	4068be <_fwalk_reent+0x36>
  4068b8:	47c0      	blx	r8
  4068ba:	ea49 0900 	orr.w	r9, r9, r0
  4068be:	1c6b      	adds	r3, r5, #1
  4068c0:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4068c4:	d1ed      	bne.n	4068a2 <_fwalk_reent+0x1a>
  4068c6:	683f      	ldr	r7, [r7, #0]
  4068c8:	2f00      	cmp	r7, #0
  4068ca:	d1e6      	bne.n	40689a <_fwalk_reent+0x12>
  4068cc:	4648      	mov	r0, r9
  4068ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4068d2:	46b9      	mov	r9, r7
  4068d4:	4648      	mov	r0, r9
  4068d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4068da:	bf00      	nop

004068dc <__locale_mb_cur_max>:
  4068dc:	4b04      	ldr	r3, [pc, #16]	; (4068f0 <__locale_mb_cur_max+0x14>)
  4068de:	4a05      	ldr	r2, [pc, #20]	; (4068f4 <__locale_mb_cur_max+0x18>)
  4068e0:	681b      	ldr	r3, [r3, #0]
  4068e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4068e4:	2b00      	cmp	r3, #0
  4068e6:	bf08      	it	eq
  4068e8:	4613      	moveq	r3, r2
  4068ea:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4068ee:	4770      	bx	lr
  4068f0:	2040004c 	.word	0x2040004c
  4068f4:	2040088c 	.word	0x2040088c

004068f8 <__retarget_lock_init_recursive>:
  4068f8:	4770      	bx	lr
  4068fa:	bf00      	nop

004068fc <__retarget_lock_close_recursive>:
  4068fc:	4770      	bx	lr
  4068fe:	bf00      	nop

00406900 <__retarget_lock_acquire_recursive>:
  406900:	4770      	bx	lr
  406902:	bf00      	nop

00406904 <__retarget_lock_release_recursive>:
  406904:	4770      	bx	lr
  406906:	bf00      	nop

00406908 <__swhatbuf_r>:
  406908:	b570      	push	{r4, r5, r6, lr}
  40690a:	460c      	mov	r4, r1
  40690c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406910:	2900      	cmp	r1, #0
  406912:	b090      	sub	sp, #64	; 0x40
  406914:	4615      	mov	r5, r2
  406916:	461e      	mov	r6, r3
  406918:	db14      	blt.n	406944 <__swhatbuf_r+0x3c>
  40691a:	aa01      	add	r2, sp, #4
  40691c:	f000 fd1a 	bl	407354 <_fstat_r>
  406920:	2800      	cmp	r0, #0
  406922:	db0f      	blt.n	406944 <__swhatbuf_r+0x3c>
  406924:	9a02      	ldr	r2, [sp, #8]
  406926:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40692a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40692e:	fab2 f282 	clz	r2, r2
  406932:	0952      	lsrs	r2, r2, #5
  406934:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406938:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40693c:	6032      	str	r2, [r6, #0]
  40693e:	602b      	str	r3, [r5, #0]
  406940:	b010      	add	sp, #64	; 0x40
  406942:	bd70      	pop	{r4, r5, r6, pc}
  406944:	89a2      	ldrh	r2, [r4, #12]
  406946:	2300      	movs	r3, #0
  406948:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40694c:	6033      	str	r3, [r6, #0]
  40694e:	d004      	beq.n	40695a <__swhatbuf_r+0x52>
  406950:	2240      	movs	r2, #64	; 0x40
  406952:	4618      	mov	r0, r3
  406954:	602a      	str	r2, [r5, #0]
  406956:	b010      	add	sp, #64	; 0x40
  406958:	bd70      	pop	{r4, r5, r6, pc}
  40695a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40695e:	602b      	str	r3, [r5, #0]
  406960:	b010      	add	sp, #64	; 0x40
  406962:	bd70      	pop	{r4, r5, r6, pc}

00406964 <__smakebuf_r>:
  406964:	898a      	ldrh	r2, [r1, #12]
  406966:	0792      	lsls	r2, r2, #30
  406968:	460b      	mov	r3, r1
  40696a:	d506      	bpl.n	40697a <__smakebuf_r+0x16>
  40696c:	f101 0243 	add.w	r2, r1, #67	; 0x43
  406970:	2101      	movs	r1, #1
  406972:	601a      	str	r2, [r3, #0]
  406974:	611a      	str	r2, [r3, #16]
  406976:	6159      	str	r1, [r3, #20]
  406978:	4770      	bx	lr
  40697a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40697c:	b083      	sub	sp, #12
  40697e:	ab01      	add	r3, sp, #4
  406980:	466a      	mov	r2, sp
  406982:	460c      	mov	r4, r1
  406984:	4606      	mov	r6, r0
  406986:	f7ff ffbf 	bl	406908 <__swhatbuf_r>
  40698a:	9900      	ldr	r1, [sp, #0]
  40698c:	4605      	mov	r5, r0
  40698e:	4630      	mov	r0, r6
  406990:	f7fe f80a 	bl	4049a8 <_malloc_r>
  406994:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406998:	b1d8      	cbz	r0, 4069d2 <__smakebuf_r+0x6e>
  40699a:	9a01      	ldr	r2, [sp, #4]
  40699c:	4f15      	ldr	r7, [pc, #84]	; (4069f4 <__smakebuf_r+0x90>)
  40699e:	9900      	ldr	r1, [sp, #0]
  4069a0:	63f7      	str	r7, [r6, #60]	; 0x3c
  4069a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4069a6:	81a3      	strh	r3, [r4, #12]
  4069a8:	6020      	str	r0, [r4, #0]
  4069aa:	6120      	str	r0, [r4, #16]
  4069ac:	6161      	str	r1, [r4, #20]
  4069ae:	b91a      	cbnz	r2, 4069b8 <__smakebuf_r+0x54>
  4069b0:	432b      	orrs	r3, r5
  4069b2:	81a3      	strh	r3, [r4, #12]
  4069b4:	b003      	add	sp, #12
  4069b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4069b8:	4630      	mov	r0, r6
  4069ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4069be:	f000 fcdd 	bl	40737c <_isatty_r>
  4069c2:	b1a0      	cbz	r0, 4069ee <__smakebuf_r+0x8a>
  4069c4:	89a3      	ldrh	r3, [r4, #12]
  4069c6:	f023 0303 	bic.w	r3, r3, #3
  4069ca:	f043 0301 	orr.w	r3, r3, #1
  4069ce:	b21b      	sxth	r3, r3
  4069d0:	e7ee      	b.n	4069b0 <__smakebuf_r+0x4c>
  4069d2:	059a      	lsls	r2, r3, #22
  4069d4:	d4ee      	bmi.n	4069b4 <__smakebuf_r+0x50>
  4069d6:	f023 0303 	bic.w	r3, r3, #3
  4069da:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4069de:	f043 0302 	orr.w	r3, r3, #2
  4069e2:	2101      	movs	r1, #1
  4069e4:	81a3      	strh	r3, [r4, #12]
  4069e6:	6022      	str	r2, [r4, #0]
  4069e8:	6122      	str	r2, [r4, #16]
  4069ea:	6161      	str	r1, [r4, #20]
  4069ec:	e7e2      	b.n	4069b4 <__smakebuf_r+0x50>
  4069ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4069f2:	e7dd      	b.n	4069b0 <__smakebuf_r+0x4c>
  4069f4:	00406125 	.word	0x00406125

004069f8 <__ascii_mbtowc>:
  4069f8:	b082      	sub	sp, #8
  4069fa:	b149      	cbz	r1, 406a10 <__ascii_mbtowc+0x18>
  4069fc:	b15a      	cbz	r2, 406a16 <__ascii_mbtowc+0x1e>
  4069fe:	b16b      	cbz	r3, 406a1c <__ascii_mbtowc+0x24>
  406a00:	7813      	ldrb	r3, [r2, #0]
  406a02:	600b      	str	r3, [r1, #0]
  406a04:	7812      	ldrb	r2, [r2, #0]
  406a06:	1c10      	adds	r0, r2, #0
  406a08:	bf18      	it	ne
  406a0a:	2001      	movne	r0, #1
  406a0c:	b002      	add	sp, #8
  406a0e:	4770      	bx	lr
  406a10:	a901      	add	r1, sp, #4
  406a12:	2a00      	cmp	r2, #0
  406a14:	d1f3      	bne.n	4069fe <__ascii_mbtowc+0x6>
  406a16:	4610      	mov	r0, r2
  406a18:	b002      	add	sp, #8
  406a1a:	4770      	bx	lr
  406a1c:	f06f 0001 	mvn.w	r0, #1
  406a20:	e7f4      	b.n	406a0c <__ascii_mbtowc+0x14>
  406a22:	bf00      	nop
	...

00406a30 <memchr>:
  406a30:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406a34:	2a10      	cmp	r2, #16
  406a36:	db2b      	blt.n	406a90 <memchr+0x60>
  406a38:	f010 0f07 	tst.w	r0, #7
  406a3c:	d008      	beq.n	406a50 <memchr+0x20>
  406a3e:	f810 3b01 	ldrb.w	r3, [r0], #1
  406a42:	3a01      	subs	r2, #1
  406a44:	428b      	cmp	r3, r1
  406a46:	d02d      	beq.n	406aa4 <memchr+0x74>
  406a48:	f010 0f07 	tst.w	r0, #7
  406a4c:	b342      	cbz	r2, 406aa0 <memchr+0x70>
  406a4e:	d1f6      	bne.n	406a3e <memchr+0xe>
  406a50:	b4f0      	push	{r4, r5, r6, r7}
  406a52:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406a56:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  406a5a:	f022 0407 	bic.w	r4, r2, #7
  406a5e:	f07f 0700 	mvns.w	r7, #0
  406a62:	2300      	movs	r3, #0
  406a64:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406a68:	3c08      	subs	r4, #8
  406a6a:	ea85 0501 	eor.w	r5, r5, r1
  406a6e:	ea86 0601 	eor.w	r6, r6, r1
  406a72:	fa85 f547 	uadd8	r5, r5, r7
  406a76:	faa3 f587 	sel	r5, r3, r7
  406a7a:	fa86 f647 	uadd8	r6, r6, r7
  406a7e:	faa5 f687 	sel	r6, r5, r7
  406a82:	b98e      	cbnz	r6, 406aa8 <memchr+0x78>
  406a84:	d1ee      	bne.n	406a64 <memchr+0x34>
  406a86:	bcf0      	pop	{r4, r5, r6, r7}
  406a88:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406a8c:	f002 0207 	and.w	r2, r2, #7
  406a90:	b132      	cbz	r2, 406aa0 <memchr+0x70>
  406a92:	f810 3b01 	ldrb.w	r3, [r0], #1
  406a96:	3a01      	subs	r2, #1
  406a98:	ea83 0301 	eor.w	r3, r3, r1
  406a9c:	b113      	cbz	r3, 406aa4 <memchr+0x74>
  406a9e:	d1f8      	bne.n	406a92 <memchr+0x62>
  406aa0:	2000      	movs	r0, #0
  406aa2:	4770      	bx	lr
  406aa4:	3801      	subs	r0, #1
  406aa6:	4770      	bx	lr
  406aa8:	2d00      	cmp	r5, #0
  406aaa:	bf06      	itte	eq
  406aac:	4635      	moveq	r5, r6
  406aae:	3803      	subeq	r0, #3
  406ab0:	3807      	subne	r0, #7
  406ab2:	f015 0f01 	tst.w	r5, #1
  406ab6:	d107      	bne.n	406ac8 <memchr+0x98>
  406ab8:	3001      	adds	r0, #1
  406aba:	f415 7f80 	tst.w	r5, #256	; 0x100
  406abe:	bf02      	ittt	eq
  406ac0:	3001      	addeq	r0, #1
  406ac2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406ac6:	3001      	addeq	r0, #1
  406ac8:	bcf0      	pop	{r4, r5, r6, r7}
  406aca:	3801      	subs	r0, #1
  406acc:	4770      	bx	lr
  406ace:	bf00      	nop

00406ad0 <memmove>:
  406ad0:	4288      	cmp	r0, r1
  406ad2:	b5f0      	push	{r4, r5, r6, r7, lr}
  406ad4:	d90d      	bls.n	406af2 <memmove+0x22>
  406ad6:	188b      	adds	r3, r1, r2
  406ad8:	4298      	cmp	r0, r3
  406ada:	d20a      	bcs.n	406af2 <memmove+0x22>
  406adc:	1884      	adds	r4, r0, r2
  406ade:	2a00      	cmp	r2, #0
  406ae0:	d051      	beq.n	406b86 <memmove+0xb6>
  406ae2:	4622      	mov	r2, r4
  406ae4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  406ae8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  406aec:	4299      	cmp	r1, r3
  406aee:	d1f9      	bne.n	406ae4 <memmove+0x14>
  406af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406af2:	2a0f      	cmp	r2, #15
  406af4:	d948      	bls.n	406b88 <memmove+0xb8>
  406af6:	ea41 0300 	orr.w	r3, r1, r0
  406afa:	079b      	lsls	r3, r3, #30
  406afc:	d146      	bne.n	406b8c <memmove+0xbc>
  406afe:	f100 0410 	add.w	r4, r0, #16
  406b02:	f101 0310 	add.w	r3, r1, #16
  406b06:	4615      	mov	r5, r2
  406b08:	f853 6c10 	ldr.w	r6, [r3, #-16]
  406b0c:	f844 6c10 	str.w	r6, [r4, #-16]
  406b10:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406b14:	f844 6c0c 	str.w	r6, [r4, #-12]
  406b18:	f853 6c08 	ldr.w	r6, [r3, #-8]
  406b1c:	f844 6c08 	str.w	r6, [r4, #-8]
  406b20:	3d10      	subs	r5, #16
  406b22:	f853 6c04 	ldr.w	r6, [r3, #-4]
  406b26:	f844 6c04 	str.w	r6, [r4, #-4]
  406b2a:	2d0f      	cmp	r5, #15
  406b2c:	f103 0310 	add.w	r3, r3, #16
  406b30:	f104 0410 	add.w	r4, r4, #16
  406b34:	d8e8      	bhi.n	406b08 <memmove+0x38>
  406b36:	f1a2 0310 	sub.w	r3, r2, #16
  406b3a:	f023 030f 	bic.w	r3, r3, #15
  406b3e:	f002 0e0f 	and.w	lr, r2, #15
  406b42:	3310      	adds	r3, #16
  406b44:	f1be 0f03 	cmp.w	lr, #3
  406b48:	4419      	add	r1, r3
  406b4a:	4403      	add	r3, r0
  406b4c:	d921      	bls.n	406b92 <memmove+0xc2>
  406b4e:	1f1e      	subs	r6, r3, #4
  406b50:	460d      	mov	r5, r1
  406b52:	4674      	mov	r4, lr
  406b54:	3c04      	subs	r4, #4
  406b56:	f855 7b04 	ldr.w	r7, [r5], #4
  406b5a:	f846 7f04 	str.w	r7, [r6, #4]!
  406b5e:	2c03      	cmp	r4, #3
  406b60:	d8f8      	bhi.n	406b54 <memmove+0x84>
  406b62:	f1ae 0404 	sub.w	r4, lr, #4
  406b66:	f024 0403 	bic.w	r4, r4, #3
  406b6a:	3404      	adds	r4, #4
  406b6c:	4421      	add	r1, r4
  406b6e:	4423      	add	r3, r4
  406b70:	f002 0203 	and.w	r2, r2, #3
  406b74:	b162      	cbz	r2, 406b90 <memmove+0xc0>
  406b76:	3b01      	subs	r3, #1
  406b78:	440a      	add	r2, r1
  406b7a:	f811 4b01 	ldrb.w	r4, [r1], #1
  406b7e:	f803 4f01 	strb.w	r4, [r3, #1]!
  406b82:	428a      	cmp	r2, r1
  406b84:	d1f9      	bne.n	406b7a <memmove+0xaa>
  406b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406b88:	4603      	mov	r3, r0
  406b8a:	e7f3      	b.n	406b74 <memmove+0xa4>
  406b8c:	4603      	mov	r3, r0
  406b8e:	e7f2      	b.n	406b76 <memmove+0xa6>
  406b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406b92:	4672      	mov	r2, lr
  406b94:	e7ee      	b.n	406b74 <memmove+0xa4>
  406b96:	bf00      	nop

00406b98 <_realloc_r>:
  406b98:	2900      	cmp	r1, #0
  406b9a:	f000 8095 	beq.w	406cc8 <_realloc_r+0x130>
  406b9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406ba2:	460d      	mov	r5, r1
  406ba4:	4616      	mov	r6, r2
  406ba6:	b083      	sub	sp, #12
  406ba8:	4680      	mov	r8, r0
  406baa:	f106 070b 	add.w	r7, r6, #11
  406bae:	f7fe fa93 	bl	4050d8 <__malloc_lock>
  406bb2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  406bb6:	2f16      	cmp	r7, #22
  406bb8:	f02e 0403 	bic.w	r4, lr, #3
  406bbc:	f1a5 0908 	sub.w	r9, r5, #8
  406bc0:	d83c      	bhi.n	406c3c <_realloc_r+0xa4>
  406bc2:	2210      	movs	r2, #16
  406bc4:	4617      	mov	r7, r2
  406bc6:	42be      	cmp	r6, r7
  406bc8:	d83d      	bhi.n	406c46 <_realloc_r+0xae>
  406bca:	4294      	cmp	r4, r2
  406bcc:	da43      	bge.n	406c56 <_realloc_r+0xbe>
  406bce:	4bc4      	ldr	r3, [pc, #784]	; (406ee0 <_realloc_r+0x348>)
  406bd0:	6899      	ldr	r1, [r3, #8]
  406bd2:	eb09 0004 	add.w	r0, r9, r4
  406bd6:	4288      	cmp	r0, r1
  406bd8:	f000 80b4 	beq.w	406d44 <_realloc_r+0x1ac>
  406bdc:	6843      	ldr	r3, [r0, #4]
  406bde:	f023 0101 	bic.w	r1, r3, #1
  406be2:	4401      	add	r1, r0
  406be4:	6849      	ldr	r1, [r1, #4]
  406be6:	07c9      	lsls	r1, r1, #31
  406be8:	d54c      	bpl.n	406c84 <_realloc_r+0xec>
  406bea:	f01e 0f01 	tst.w	lr, #1
  406bee:	f000 809b 	beq.w	406d28 <_realloc_r+0x190>
  406bf2:	4631      	mov	r1, r6
  406bf4:	4640      	mov	r0, r8
  406bf6:	f7fd fed7 	bl	4049a8 <_malloc_r>
  406bfa:	4606      	mov	r6, r0
  406bfc:	2800      	cmp	r0, #0
  406bfe:	d03a      	beq.n	406c76 <_realloc_r+0xde>
  406c00:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406c04:	f023 0301 	bic.w	r3, r3, #1
  406c08:	444b      	add	r3, r9
  406c0a:	f1a0 0208 	sub.w	r2, r0, #8
  406c0e:	429a      	cmp	r2, r3
  406c10:	f000 8121 	beq.w	406e56 <_realloc_r+0x2be>
  406c14:	1f22      	subs	r2, r4, #4
  406c16:	2a24      	cmp	r2, #36	; 0x24
  406c18:	f200 8107 	bhi.w	406e2a <_realloc_r+0x292>
  406c1c:	2a13      	cmp	r2, #19
  406c1e:	f200 80db 	bhi.w	406dd8 <_realloc_r+0x240>
  406c22:	4603      	mov	r3, r0
  406c24:	462a      	mov	r2, r5
  406c26:	6811      	ldr	r1, [r2, #0]
  406c28:	6019      	str	r1, [r3, #0]
  406c2a:	6851      	ldr	r1, [r2, #4]
  406c2c:	6059      	str	r1, [r3, #4]
  406c2e:	6892      	ldr	r2, [r2, #8]
  406c30:	609a      	str	r2, [r3, #8]
  406c32:	4629      	mov	r1, r5
  406c34:	4640      	mov	r0, r8
  406c36:	f7ff fbc9 	bl	4063cc <_free_r>
  406c3a:	e01c      	b.n	406c76 <_realloc_r+0xde>
  406c3c:	f027 0707 	bic.w	r7, r7, #7
  406c40:	2f00      	cmp	r7, #0
  406c42:	463a      	mov	r2, r7
  406c44:	dabf      	bge.n	406bc6 <_realloc_r+0x2e>
  406c46:	2600      	movs	r6, #0
  406c48:	230c      	movs	r3, #12
  406c4a:	4630      	mov	r0, r6
  406c4c:	f8c8 3000 	str.w	r3, [r8]
  406c50:	b003      	add	sp, #12
  406c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406c56:	462e      	mov	r6, r5
  406c58:	1be3      	subs	r3, r4, r7
  406c5a:	2b0f      	cmp	r3, #15
  406c5c:	d81e      	bhi.n	406c9c <_realloc_r+0x104>
  406c5e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  406c62:	f003 0301 	and.w	r3, r3, #1
  406c66:	4323      	orrs	r3, r4
  406c68:	444c      	add	r4, r9
  406c6a:	f8c9 3004 	str.w	r3, [r9, #4]
  406c6e:	6863      	ldr	r3, [r4, #4]
  406c70:	f043 0301 	orr.w	r3, r3, #1
  406c74:	6063      	str	r3, [r4, #4]
  406c76:	4640      	mov	r0, r8
  406c78:	f7fe fa34 	bl	4050e4 <__malloc_unlock>
  406c7c:	4630      	mov	r0, r6
  406c7e:	b003      	add	sp, #12
  406c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406c84:	f023 0303 	bic.w	r3, r3, #3
  406c88:	18e1      	adds	r1, r4, r3
  406c8a:	4291      	cmp	r1, r2
  406c8c:	db1f      	blt.n	406cce <_realloc_r+0x136>
  406c8e:	68c3      	ldr	r3, [r0, #12]
  406c90:	6882      	ldr	r2, [r0, #8]
  406c92:	462e      	mov	r6, r5
  406c94:	60d3      	str	r3, [r2, #12]
  406c96:	460c      	mov	r4, r1
  406c98:	609a      	str	r2, [r3, #8]
  406c9a:	e7dd      	b.n	406c58 <_realloc_r+0xc0>
  406c9c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  406ca0:	eb09 0107 	add.w	r1, r9, r7
  406ca4:	f002 0201 	and.w	r2, r2, #1
  406ca8:	444c      	add	r4, r9
  406caa:	f043 0301 	orr.w	r3, r3, #1
  406cae:	4317      	orrs	r7, r2
  406cb0:	f8c9 7004 	str.w	r7, [r9, #4]
  406cb4:	604b      	str	r3, [r1, #4]
  406cb6:	6863      	ldr	r3, [r4, #4]
  406cb8:	f043 0301 	orr.w	r3, r3, #1
  406cbc:	3108      	adds	r1, #8
  406cbe:	6063      	str	r3, [r4, #4]
  406cc0:	4640      	mov	r0, r8
  406cc2:	f7ff fb83 	bl	4063cc <_free_r>
  406cc6:	e7d6      	b.n	406c76 <_realloc_r+0xde>
  406cc8:	4611      	mov	r1, r2
  406cca:	f7fd be6d 	b.w	4049a8 <_malloc_r>
  406cce:	f01e 0f01 	tst.w	lr, #1
  406cd2:	d18e      	bne.n	406bf2 <_realloc_r+0x5a>
  406cd4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406cd8:	eba9 0a01 	sub.w	sl, r9, r1
  406cdc:	f8da 1004 	ldr.w	r1, [sl, #4]
  406ce0:	f021 0103 	bic.w	r1, r1, #3
  406ce4:	440b      	add	r3, r1
  406ce6:	4423      	add	r3, r4
  406ce8:	4293      	cmp	r3, r2
  406cea:	db25      	blt.n	406d38 <_realloc_r+0x1a0>
  406cec:	68c2      	ldr	r2, [r0, #12]
  406cee:	6881      	ldr	r1, [r0, #8]
  406cf0:	4656      	mov	r6, sl
  406cf2:	60ca      	str	r2, [r1, #12]
  406cf4:	6091      	str	r1, [r2, #8]
  406cf6:	f8da 100c 	ldr.w	r1, [sl, #12]
  406cfa:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406cfe:	1f22      	subs	r2, r4, #4
  406d00:	2a24      	cmp	r2, #36	; 0x24
  406d02:	60c1      	str	r1, [r0, #12]
  406d04:	6088      	str	r0, [r1, #8]
  406d06:	f200 8094 	bhi.w	406e32 <_realloc_r+0x29a>
  406d0a:	2a13      	cmp	r2, #19
  406d0c:	d96f      	bls.n	406dee <_realloc_r+0x256>
  406d0e:	6829      	ldr	r1, [r5, #0]
  406d10:	f8ca 1008 	str.w	r1, [sl, #8]
  406d14:	6869      	ldr	r1, [r5, #4]
  406d16:	f8ca 100c 	str.w	r1, [sl, #12]
  406d1a:	2a1b      	cmp	r2, #27
  406d1c:	f200 80a2 	bhi.w	406e64 <_realloc_r+0x2cc>
  406d20:	3508      	adds	r5, #8
  406d22:	f10a 0210 	add.w	r2, sl, #16
  406d26:	e063      	b.n	406df0 <_realloc_r+0x258>
  406d28:	f855 3c08 	ldr.w	r3, [r5, #-8]
  406d2c:	eba9 0a03 	sub.w	sl, r9, r3
  406d30:	f8da 1004 	ldr.w	r1, [sl, #4]
  406d34:	f021 0103 	bic.w	r1, r1, #3
  406d38:	1863      	adds	r3, r4, r1
  406d3a:	4293      	cmp	r3, r2
  406d3c:	f6ff af59 	blt.w	406bf2 <_realloc_r+0x5a>
  406d40:	4656      	mov	r6, sl
  406d42:	e7d8      	b.n	406cf6 <_realloc_r+0x15e>
  406d44:	6841      	ldr	r1, [r0, #4]
  406d46:	f021 0b03 	bic.w	fp, r1, #3
  406d4a:	44a3      	add	fp, r4
  406d4c:	f107 0010 	add.w	r0, r7, #16
  406d50:	4583      	cmp	fp, r0
  406d52:	da56      	bge.n	406e02 <_realloc_r+0x26a>
  406d54:	f01e 0f01 	tst.w	lr, #1
  406d58:	f47f af4b 	bne.w	406bf2 <_realloc_r+0x5a>
  406d5c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406d60:	eba9 0a01 	sub.w	sl, r9, r1
  406d64:	f8da 1004 	ldr.w	r1, [sl, #4]
  406d68:	f021 0103 	bic.w	r1, r1, #3
  406d6c:	448b      	add	fp, r1
  406d6e:	4558      	cmp	r0, fp
  406d70:	dce2      	bgt.n	406d38 <_realloc_r+0x1a0>
  406d72:	4656      	mov	r6, sl
  406d74:	f8da 100c 	ldr.w	r1, [sl, #12]
  406d78:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406d7c:	1f22      	subs	r2, r4, #4
  406d7e:	2a24      	cmp	r2, #36	; 0x24
  406d80:	60c1      	str	r1, [r0, #12]
  406d82:	6088      	str	r0, [r1, #8]
  406d84:	f200 808f 	bhi.w	406ea6 <_realloc_r+0x30e>
  406d88:	2a13      	cmp	r2, #19
  406d8a:	f240 808a 	bls.w	406ea2 <_realloc_r+0x30a>
  406d8e:	6829      	ldr	r1, [r5, #0]
  406d90:	f8ca 1008 	str.w	r1, [sl, #8]
  406d94:	6869      	ldr	r1, [r5, #4]
  406d96:	f8ca 100c 	str.w	r1, [sl, #12]
  406d9a:	2a1b      	cmp	r2, #27
  406d9c:	f200 808a 	bhi.w	406eb4 <_realloc_r+0x31c>
  406da0:	3508      	adds	r5, #8
  406da2:	f10a 0210 	add.w	r2, sl, #16
  406da6:	6829      	ldr	r1, [r5, #0]
  406da8:	6011      	str	r1, [r2, #0]
  406daa:	6869      	ldr	r1, [r5, #4]
  406dac:	6051      	str	r1, [r2, #4]
  406dae:	68a9      	ldr	r1, [r5, #8]
  406db0:	6091      	str	r1, [r2, #8]
  406db2:	eb0a 0107 	add.w	r1, sl, r7
  406db6:	ebab 0207 	sub.w	r2, fp, r7
  406dba:	f042 0201 	orr.w	r2, r2, #1
  406dbe:	6099      	str	r1, [r3, #8]
  406dc0:	604a      	str	r2, [r1, #4]
  406dc2:	f8da 3004 	ldr.w	r3, [sl, #4]
  406dc6:	f003 0301 	and.w	r3, r3, #1
  406dca:	431f      	orrs	r7, r3
  406dcc:	4640      	mov	r0, r8
  406dce:	f8ca 7004 	str.w	r7, [sl, #4]
  406dd2:	f7fe f987 	bl	4050e4 <__malloc_unlock>
  406dd6:	e751      	b.n	406c7c <_realloc_r+0xe4>
  406dd8:	682b      	ldr	r3, [r5, #0]
  406dda:	6003      	str	r3, [r0, #0]
  406ddc:	686b      	ldr	r3, [r5, #4]
  406dde:	6043      	str	r3, [r0, #4]
  406de0:	2a1b      	cmp	r2, #27
  406de2:	d82d      	bhi.n	406e40 <_realloc_r+0x2a8>
  406de4:	f100 0308 	add.w	r3, r0, #8
  406de8:	f105 0208 	add.w	r2, r5, #8
  406dec:	e71b      	b.n	406c26 <_realloc_r+0x8e>
  406dee:	4632      	mov	r2, r6
  406df0:	6829      	ldr	r1, [r5, #0]
  406df2:	6011      	str	r1, [r2, #0]
  406df4:	6869      	ldr	r1, [r5, #4]
  406df6:	6051      	str	r1, [r2, #4]
  406df8:	68a9      	ldr	r1, [r5, #8]
  406dfa:	6091      	str	r1, [r2, #8]
  406dfc:	461c      	mov	r4, r3
  406dfe:	46d1      	mov	r9, sl
  406e00:	e72a      	b.n	406c58 <_realloc_r+0xc0>
  406e02:	eb09 0107 	add.w	r1, r9, r7
  406e06:	ebab 0b07 	sub.w	fp, fp, r7
  406e0a:	f04b 0201 	orr.w	r2, fp, #1
  406e0e:	6099      	str	r1, [r3, #8]
  406e10:	604a      	str	r2, [r1, #4]
  406e12:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406e16:	f003 0301 	and.w	r3, r3, #1
  406e1a:	431f      	orrs	r7, r3
  406e1c:	4640      	mov	r0, r8
  406e1e:	f845 7c04 	str.w	r7, [r5, #-4]
  406e22:	f7fe f95f 	bl	4050e4 <__malloc_unlock>
  406e26:	462e      	mov	r6, r5
  406e28:	e728      	b.n	406c7c <_realloc_r+0xe4>
  406e2a:	4629      	mov	r1, r5
  406e2c:	f7ff fe50 	bl	406ad0 <memmove>
  406e30:	e6ff      	b.n	406c32 <_realloc_r+0x9a>
  406e32:	4629      	mov	r1, r5
  406e34:	4630      	mov	r0, r6
  406e36:	461c      	mov	r4, r3
  406e38:	46d1      	mov	r9, sl
  406e3a:	f7ff fe49 	bl	406ad0 <memmove>
  406e3e:	e70b      	b.n	406c58 <_realloc_r+0xc0>
  406e40:	68ab      	ldr	r3, [r5, #8]
  406e42:	6083      	str	r3, [r0, #8]
  406e44:	68eb      	ldr	r3, [r5, #12]
  406e46:	60c3      	str	r3, [r0, #12]
  406e48:	2a24      	cmp	r2, #36	; 0x24
  406e4a:	d017      	beq.n	406e7c <_realloc_r+0x2e4>
  406e4c:	f100 0310 	add.w	r3, r0, #16
  406e50:	f105 0210 	add.w	r2, r5, #16
  406e54:	e6e7      	b.n	406c26 <_realloc_r+0x8e>
  406e56:	f850 3c04 	ldr.w	r3, [r0, #-4]
  406e5a:	f023 0303 	bic.w	r3, r3, #3
  406e5e:	441c      	add	r4, r3
  406e60:	462e      	mov	r6, r5
  406e62:	e6f9      	b.n	406c58 <_realloc_r+0xc0>
  406e64:	68a9      	ldr	r1, [r5, #8]
  406e66:	f8ca 1010 	str.w	r1, [sl, #16]
  406e6a:	68e9      	ldr	r1, [r5, #12]
  406e6c:	f8ca 1014 	str.w	r1, [sl, #20]
  406e70:	2a24      	cmp	r2, #36	; 0x24
  406e72:	d00c      	beq.n	406e8e <_realloc_r+0x2f6>
  406e74:	3510      	adds	r5, #16
  406e76:	f10a 0218 	add.w	r2, sl, #24
  406e7a:	e7b9      	b.n	406df0 <_realloc_r+0x258>
  406e7c:	692b      	ldr	r3, [r5, #16]
  406e7e:	6103      	str	r3, [r0, #16]
  406e80:	696b      	ldr	r3, [r5, #20]
  406e82:	6143      	str	r3, [r0, #20]
  406e84:	f105 0218 	add.w	r2, r5, #24
  406e88:	f100 0318 	add.w	r3, r0, #24
  406e8c:	e6cb      	b.n	406c26 <_realloc_r+0x8e>
  406e8e:	692a      	ldr	r2, [r5, #16]
  406e90:	f8ca 2018 	str.w	r2, [sl, #24]
  406e94:	696a      	ldr	r2, [r5, #20]
  406e96:	f8ca 201c 	str.w	r2, [sl, #28]
  406e9a:	3518      	adds	r5, #24
  406e9c:	f10a 0220 	add.w	r2, sl, #32
  406ea0:	e7a6      	b.n	406df0 <_realloc_r+0x258>
  406ea2:	4632      	mov	r2, r6
  406ea4:	e77f      	b.n	406da6 <_realloc_r+0x20e>
  406ea6:	4629      	mov	r1, r5
  406ea8:	4630      	mov	r0, r6
  406eaa:	9301      	str	r3, [sp, #4]
  406eac:	f7ff fe10 	bl	406ad0 <memmove>
  406eb0:	9b01      	ldr	r3, [sp, #4]
  406eb2:	e77e      	b.n	406db2 <_realloc_r+0x21a>
  406eb4:	68a9      	ldr	r1, [r5, #8]
  406eb6:	f8ca 1010 	str.w	r1, [sl, #16]
  406eba:	68e9      	ldr	r1, [r5, #12]
  406ebc:	f8ca 1014 	str.w	r1, [sl, #20]
  406ec0:	2a24      	cmp	r2, #36	; 0x24
  406ec2:	d003      	beq.n	406ecc <_realloc_r+0x334>
  406ec4:	3510      	adds	r5, #16
  406ec6:	f10a 0218 	add.w	r2, sl, #24
  406eca:	e76c      	b.n	406da6 <_realloc_r+0x20e>
  406ecc:	692a      	ldr	r2, [r5, #16]
  406ece:	f8ca 2018 	str.w	r2, [sl, #24]
  406ed2:	696a      	ldr	r2, [r5, #20]
  406ed4:	f8ca 201c 	str.w	r2, [sl, #28]
  406ed8:	3518      	adds	r5, #24
  406eda:	f10a 0220 	add.w	r2, sl, #32
  406ede:	e762      	b.n	406da6 <_realloc_r+0x20e>
  406ee0:	20400478 	.word	0x20400478

00406ee4 <__sread>:
  406ee4:	b510      	push	{r4, lr}
  406ee6:	460c      	mov	r4, r1
  406ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406eec:	f000 fa6e 	bl	4073cc <_read_r>
  406ef0:	2800      	cmp	r0, #0
  406ef2:	db03      	blt.n	406efc <__sread+0x18>
  406ef4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  406ef6:	4403      	add	r3, r0
  406ef8:	6523      	str	r3, [r4, #80]	; 0x50
  406efa:	bd10      	pop	{r4, pc}
  406efc:	89a3      	ldrh	r3, [r4, #12]
  406efe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406f02:	81a3      	strh	r3, [r4, #12]
  406f04:	bd10      	pop	{r4, pc}
  406f06:	bf00      	nop

00406f08 <__swrite>:
  406f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406f0c:	4616      	mov	r6, r2
  406f0e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  406f12:	461f      	mov	r7, r3
  406f14:	05d3      	lsls	r3, r2, #23
  406f16:	460c      	mov	r4, r1
  406f18:	4605      	mov	r5, r0
  406f1a:	d507      	bpl.n	406f2c <__swrite+0x24>
  406f1c:	2200      	movs	r2, #0
  406f1e:	2302      	movs	r3, #2
  406f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406f24:	f000 fa3c 	bl	4073a0 <_lseek_r>
  406f28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406f2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406f30:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406f34:	81a2      	strh	r2, [r4, #12]
  406f36:	463b      	mov	r3, r7
  406f38:	4632      	mov	r2, r6
  406f3a:	4628      	mov	r0, r5
  406f3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406f40:	f000 b91c 	b.w	40717c <_write_r>

00406f44 <__sseek>:
  406f44:	b510      	push	{r4, lr}
  406f46:	460c      	mov	r4, r1
  406f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406f4c:	f000 fa28 	bl	4073a0 <_lseek_r>
  406f50:	89a3      	ldrh	r3, [r4, #12]
  406f52:	1c42      	adds	r2, r0, #1
  406f54:	bf0e      	itee	eq
  406f56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  406f5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  406f5e:	6520      	strne	r0, [r4, #80]	; 0x50
  406f60:	81a3      	strh	r3, [r4, #12]
  406f62:	bd10      	pop	{r4, pc}

00406f64 <__sclose>:
  406f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406f68:	f000 b980 	b.w	40726c <_close_r>
	...

00406f80 <strlen>:
  406f80:	f890 f000 	pld	[r0]
  406f84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406f88:	f020 0107 	bic.w	r1, r0, #7
  406f8c:	f06f 0c00 	mvn.w	ip, #0
  406f90:	f010 0407 	ands.w	r4, r0, #7
  406f94:	f891 f020 	pld	[r1, #32]
  406f98:	f040 8049 	bne.w	40702e <strlen+0xae>
  406f9c:	f04f 0400 	mov.w	r4, #0
  406fa0:	f06f 0007 	mvn.w	r0, #7
  406fa4:	e9d1 2300 	ldrd	r2, r3, [r1]
  406fa8:	f891 f040 	pld	[r1, #64]	; 0x40
  406fac:	f100 0008 	add.w	r0, r0, #8
  406fb0:	fa82 f24c 	uadd8	r2, r2, ip
  406fb4:	faa4 f28c 	sel	r2, r4, ip
  406fb8:	fa83 f34c 	uadd8	r3, r3, ip
  406fbc:	faa2 f38c 	sel	r3, r2, ip
  406fc0:	bb4b      	cbnz	r3, 407016 <strlen+0x96>
  406fc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406fc6:	fa82 f24c 	uadd8	r2, r2, ip
  406fca:	f100 0008 	add.w	r0, r0, #8
  406fce:	faa4 f28c 	sel	r2, r4, ip
  406fd2:	fa83 f34c 	uadd8	r3, r3, ip
  406fd6:	faa2 f38c 	sel	r3, r2, ip
  406fda:	b9e3      	cbnz	r3, 407016 <strlen+0x96>
  406fdc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  406fe0:	fa82 f24c 	uadd8	r2, r2, ip
  406fe4:	f100 0008 	add.w	r0, r0, #8
  406fe8:	faa4 f28c 	sel	r2, r4, ip
  406fec:	fa83 f34c 	uadd8	r3, r3, ip
  406ff0:	faa2 f38c 	sel	r3, r2, ip
  406ff4:	b97b      	cbnz	r3, 407016 <strlen+0x96>
  406ff6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  406ffa:	f101 0120 	add.w	r1, r1, #32
  406ffe:	fa82 f24c 	uadd8	r2, r2, ip
  407002:	f100 0008 	add.w	r0, r0, #8
  407006:	faa4 f28c 	sel	r2, r4, ip
  40700a:	fa83 f34c 	uadd8	r3, r3, ip
  40700e:	faa2 f38c 	sel	r3, r2, ip
  407012:	2b00      	cmp	r3, #0
  407014:	d0c6      	beq.n	406fa4 <strlen+0x24>
  407016:	2a00      	cmp	r2, #0
  407018:	bf04      	itt	eq
  40701a:	3004      	addeq	r0, #4
  40701c:	461a      	moveq	r2, r3
  40701e:	ba12      	rev	r2, r2
  407020:	fab2 f282 	clz	r2, r2
  407024:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  407028:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40702c:	4770      	bx	lr
  40702e:	e9d1 2300 	ldrd	r2, r3, [r1]
  407032:	f004 0503 	and.w	r5, r4, #3
  407036:	f1c4 0000 	rsb	r0, r4, #0
  40703a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40703e:	f014 0f04 	tst.w	r4, #4
  407042:	f891 f040 	pld	[r1, #64]	; 0x40
  407046:	fa0c f505 	lsl.w	r5, ip, r5
  40704a:	ea62 0205 	orn	r2, r2, r5
  40704e:	bf1c      	itt	ne
  407050:	ea63 0305 	ornne	r3, r3, r5
  407054:	4662      	movne	r2, ip
  407056:	f04f 0400 	mov.w	r4, #0
  40705a:	e7a9      	b.n	406fb0 <strlen+0x30>

0040705c <__swbuf_r>:
  40705c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40705e:	460d      	mov	r5, r1
  407060:	4614      	mov	r4, r2
  407062:	4606      	mov	r6, r0
  407064:	b110      	cbz	r0, 40706c <__swbuf_r+0x10>
  407066:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407068:	2b00      	cmp	r3, #0
  40706a:	d04b      	beq.n	407104 <__swbuf_r+0xa8>
  40706c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407070:	69a3      	ldr	r3, [r4, #24]
  407072:	60a3      	str	r3, [r4, #8]
  407074:	b291      	uxth	r1, r2
  407076:	0708      	lsls	r0, r1, #28
  407078:	d539      	bpl.n	4070ee <__swbuf_r+0x92>
  40707a:	6923      	ldr	r3, [r4, #16]
  40707c:	2b00      	cmp	r3, #0
  40707e:	d036      	beq.n	4070ee <__swbuf_r+0x92>
  407080:	b2ed      	uxtb	r5, r5
  407082:	0489      	lsls	r1, r1, #18
  407084:	462f      	mov	r7, r5
  407086:	d515      	bpl.n	4070b4 <__swbuf_r+0x58>
  407088:	6822      	ldr	r2, [r4, #0]
  40708a:	6961      	ldr	r1, [r4, #20]
  40708c:	1ad3      	subs	r3, r2, r3
  40708e:	428b      	cmp	r3, r1
  407090:	da1c      	bge.n	4070cc <__swbuf_r+0x70>
  407092:	3301      	adds	r3, #1
  407094:	68a1      	ldr	r1, [r4, #8]
  407096:	1c50      	adds	r0, r2, #1
  407098:	3901      	subs	r1, #1
  40709a:	60a1      	str	r1, [r4, #8]
  40709c:	6020      	str	r0, [r4, #0]
  40709e:	7015      	strb	r5, [r2, #0]
  4070a0:	6962      	ldr	r2, [r4, #20]
  4070a2:	429a      	cmp	r2, r3
  4070a4:	d01a      	beq.n	4070dc <__swbuf_r+0x80>
  4070a6:	89a3      	ldrh	r3, [r4, #12]
  4070a8:	07db      	lsls	r3, r3, #31
  4070aa:	d501      	bpl.n	4070b0 <__swbuf_r+0x54>
  4070ac:	2d0a      	cmp	r5, #10
  4070ae:	d015      	beq.n	4070dc <__swbuf_r+0x80>
  4070b0:	4638      	mov	r0, r7
  4070b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4070b4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4070b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4070ba:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4070be:	81a2      	strh	r2, [r4, #12]
  4070c0:	6822      	ldr	r2, [r4, #0]
  4070c2:	6661      	str	r1, [r4, #100]	; 0x64
  4070c4:	6961      	ldr	r1, [r4, #20]
  4070c6:	1ad3      	subs	r3, r2, r3
  4070c8:	428b      	cmp	r3, r1
  4070ca:	dbe2      	blt.n	407092 <__swbuf_r+0x36>
  4070cc:	4621      	mov	r1, r4
  4070ce:	4630      	mov	r0, r6
  4070d0:	f7fe fffe 	bl	4060d0 <_fflush_r>
  4070d4:	b940      	cbnz	r0, 4070e8 <__swbuf_r+0x8c>
  4070d6:	6822      	ldr	r2, [r4, #0]
  4070d8:	2301      	movs	r3, #1
  4070da:	e7db      	b.n	407094 <__swbuf_r+0x38>
  4070dc:	4621      	mov	r1, r4
  4070de:	4630      	mov	r0, r6
  4070e0:	f7fe fff6 	bl	4060d0 <_fflush_r>
  4070e4:	2800      	cmp	r0, #0
  4070e6:	d0e3      	beq.n	4070b0 <__swbuf_r+0x54>
  4070e8:	f04f 37ff 	mov.w	r7, #4294967295
  4070ec:	e7e0      	b.n	4070b0 <__swbuf_r+0x54>
  4070ee:	4621      	mov	r1, r4
  4070f0:	4630      	mov	r0, r6
  4070f2:	f7fe fed9 	bl	405ea8 <__swsetup_r>
  4070f6:	2800      	cmp	r0, #0
  4070f8:	d1f6      	bne.n	4070e8 <__swbuf_r+0x8c>
  4070fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4070fe:	6923      	ldr	r3, [r4, #16]
  407100:	b291      	uxth	r1, r2
  407102:	e7bd      	b.n	407080 <__swbuf_r+0x24>
  407104:	f7ff f83c 	bl	406180 <__sinit>
  407108:	e7b0      	b.n	40706c <__swbuf_r+0x10>
  40710a:	bf00      	nop

0040710c <_wcrtomb_r>:
  40710c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40710e:	4606      	mov	r6, r0
  407110:	b085      	sub	sp, #20
  407112:	461f      	mov	r7, r3
  407114:	b189      	cbz	r1, 40713a <_wcrtomb_r+0x2e>
  407116:	4c10      	ldr	r4, [pc, #64]	; (407158 <_wcrtomb_r+0x4c>)
  407118:	4d10      	ldr	r5, [pc, #64]	; (40715c <_wcrtomb_r+0x50>)
  40711a:	6824      	ldr	r4, [r4, #0]
  40711c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40711e:	2c00      	cmp	r4, #0
  407120:	bf08      	it	eq
  407122:	462c      	moveq	r4, r5
  407124:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  407128:	47a0      	blx	r4
  40712a:	1c43      	adds	r3, r0, #1
  40712c:	d103      	bne.n	407136 <_wcrtomb_r+0x2a>
  40712e:	2200      	movs	r2, #0
  407130:	238a      	movs	r3, #138	; 0x8a
  407132:	603a      	str	r2, [r7, #0]
  407134:	6033      	str	r3, [r6, #0]
  407136:	b005      	add	sp, #20
  407138:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40713a:	460c      	mov	r4, r1
  40713c:	4906      	ldr	r1, [pc, #24]	; (407158 <_wcrtomb_r+0x4c>)
  40713e:	4a07      	ldr	r2, [pc, #28]	; (40715c <_wcrtomb_r+0x50>)
  407140:	6809      	ldr	r1, [r1, #0]
  407142:	6b49      	ldr	r1, [r1, #52]	; 0x34
  407144:	2900      	cmp	r1, #0
  407146:	bf08      	it	eq
  407148:	4611      	moveq	r1, r2
  40714a:	4622      	mov	r2, r4
  40714c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  407150:	a901      	add	r1, sp, #4
  407152:	47a0      	blx	r4
  407154:	e7e9      	b.n	40712a <_wcrtomb_r+0x1e>
  407156:	bf00      	nop
  407158:	2040004c 	.word	0x2040004c
  40715c:	2040088c 	.word	0x2040088c

00407160 <__ascii_wctomb>:
  407160:	b121      	cbz	r1, 40716c <__ascii_wctomb+0xc>
  407162:	2aff      	cmp	r2, #255	; 0xff
  407164:	d804      	bhi.n	407170 <__ascii_wctomb+0x10>
  407166:	700a      	strb	r2, [r1, #0]
  407168:	2001      	movs	r0, #1
  40716a:	4770      	bx	lr
  40716c:	4608      	mov	r0, r1
  40716e:	4770      	bx	lr
  407170:	238a      	movs	r3, #138	; 0x8a
  407172:	6003      	str	r3, [r0, #0]
  407174:	f04f 30ff 	mov.w	r0, #4294967295
  407178:	4770      	bx	lr
  40717a:	bf00      	nop

0040717c <_write_r>:
  40717c:	b570      	push	{r4, r5, r6, lr}
  40717e:	460d      	mov	r5, r1
  407180:	4c08      	ldr	r4, [pc, #32]	; (4071a4 <_write_r+0x28>)
  407182:	4611      	mov	r1, r2
  407184:	4606      	mov	r6, r0
  407186:	461a      	mov	r2, r3
  407188:	4628      	mov	r0, r5
  40718a:	2300      	movs	r3, #0
  40718c:	6023      	str	r3, [r4, #0]
  40718e:	f7f9 ffe9 	bl	401164 <_write>
  407192:	1c43      	adds	r3, r0, #1
  407194:	d000      	beq.n	407198 <_write_r+0x1c>
  407196:	bd70      	pop	{r4, r5, r6, pc}
  407198:	6823      	ldr	r3, [r4, #0]
  40719a:	2b00      	cmp	r3, #0
  40719c:	d0fb      	beq.n	407196 <_write_r+0x1a>
  40719e:	6033      	str	r3, [r6, #0]
  4071a0:	bd70      	pop	{r4, r5, r6, pc}
  4071a2:	bf00      	nop
  4071a4:	2043f4b4 	.word	0x2043f4b4

004071a8 <__register_exitproc>:
  4071a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4071ac:	4d2c      	ldr	r5, [pc, #176]	; (407260 <__register_exitproc+0xb8>)
  4071ae:	4606      	mov	r6, r0
  4071b0:	6828      	ldr	r0, [r5, #0]
  4071b2:	4698      	mov	r8, r3
  4071b4:	460f      	mov	r7, r1
  4071b6:	4691      	mov	r9, r2
  4071b8:	f7ff fba2 	bl	406900 <__retarget_lock_acquire_recursive>
  4071bc:	4b29      	ldr	r3, [pc, #164]	; (407264 <__register_exitproc+0xbc>)
  4071be:	681c      	ldr	r4, [r3, #0]
  4071c0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4071c4:	2b00      	cmp	r3, #0
  4071c6:	d03e      	beq.n	407246 <__register_exitproc+0x9e>
  4071c8:	685a      	ldr	r2, [r3, #4]
  4071ca:	2a1f      	cmp	r2, #31
  4071cc:	dc1c      	bgt.n	407208 <__register_exitproc+0x60>
  4071ce:	f102 0e01 	add.w	lr, r2, #1
  4071d2:	b176      	cbz	r6, 4071f2 <__register_exitproc+0x4a>
  4071d4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4071d8:	2401      	movs	r4, #1
  4071da:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4071de:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4071e2:	4094      	lsls	r4, r2
  4071e4:	4320      	orrs	r0, r4
  4071e6:	2e02      	cmp	r6, #2
  4071e8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4071ec:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4071f0:	d023      	beq.n	40723a <__register_exitproc+0x92>
  4071f2:	3202      	adds	r2, #2
  4071f4:	f8c3 e004 	str.w	lr, [r3, #4]
  4071f8:	6828      	ldr	r0, [r5, #0]
  4071fa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4071fe:	f7ff fb81 	bl	406904 <__retarget_lock_release_recursive>
  407202:	2000      	movs	r0, #0
  407204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407208:	4b17      	ldr	r3, [pc, #92]	; (407268 <__register_exitproc+0xc0>)
  40720a:	b30b      	cbz	r3, 407250 <__register_exitproc+0xa8>
  40720c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  407210:	f7fd fbc2 	bl	404998 <malloc>
  407214:	4603      	mov	r3, r0
  407216:	b1d8      	cbz	r0, 407250 <__register_exitproc+0xa8>
  407218:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40721c:	6002      	str	r2, [r0, #0]
  40721e:	2100      	movs	r1, #0
  407220:	6041      	str	r1, [r0, #4]
  407222:	460a      	mov	r2, r1
  407224:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  407228:	f04f 0e01 	mov.w	lr, #1
  40722c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  407230:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  407234:	2e00      	cmp	r6, #0
  407236:	d0dc      	beq.n	4071f2 <__register_exitproc+0x4a>
  407238:	e7cc      	b.n	4071d4 <__register_exitproc+0x2c>
  40723a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40723e:	430c      	orrs	r4, r1
  407240:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  407244:	e7d5      	b.n	4071f2 <__register_exitproc+0x4a>
  407246:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40724a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40724e:	e7bb      	b.n	4071c8 <__register_exitproc+0x20>
  407250:	6828      	ldr	r0, [r5, #0]
  407252:	f7ff fb57 	bl	406904 <__retarget_lock_release_recursive>
  407256:	f04f 30ff 	mov.w	r0, #4294967295
  40725a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40725e:	bf00      	nop
  407260:	20400888 	.word	0x20400888
  407264:	0040816c 	.word	0x0040816c
  407268:	00404999 	.word	0x00404999

0040726c <_close_r>:
  40726c:	b538      	push	{r3, r4, r5, lr}
  40726e:	4c07      	ldr	r4, [pc, #28]	; (40728c <_close_r+0x20>)
  407270:	2300      	movs	r3, #0
  407272:	4605      	mov	r5, r0
  407274:	4608      	mov	r0, r1
  407276:	6023      	str	r3, [r4, #0]
  407278:	f7fb f986 	bl	402588 <_close>
  40727c:	1c43      	adds	r3, r0, #1
  40727e:	d000      	beq.n	407282 <_close_r+0x16>
  407280:	bd38      	pop	{r3, r4, r5, pc}
  407282:	6823      	ldr	r3, [r4, #0]
  407284:	2b00      	cmp	r3, #0
  407286:	d0fb      	beq.n	407280 <_close_r+0x14>
  407288:	602b      	str	r3, [r5, #0]
  40728a:	bd38      	pop	{r3, r4, r5, pc}
  40728c:	2043f4b4 	.word	0x2043f4b4

00407290 <_fclose_r>:
  407290:	b570      	push	{r4, r5, r6, lr}
  407292:	b159      	cbz	r1, 4072ac <_fclose_r+0x1c>
  407294:	4605      	mov	r5, r0
  407296:	460c      	mov	r4, r1
  407298:	b110      	cbz	r0, 4072a0 <_fclose_r+0x10>
  40729a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40729c:	2b00      	cmp	r3, #0
  40729e:	d03c      	beq.n	40731a <_fclose_r+0x8a>
  4072a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4072a2:	07d8      	lsls	r0, r3, #31
  4072a4:	d505      	bpl.n	4072b2 <_fclose_r+0x22>
  4072a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4072aa:	b92b      	cbnz	r3, 4072b8 <_fclose_r+0x28>
  4072ac:	2600      	movs	r6, #0
  4072ae:	4630      	mov	r0, r6
  4072b0:	bd70      	pop	{r4, r5, r6, pc}
  4072b2:	89a3      	ldrh	r3, [r4, #12]
  4072b4:	0599      	lsls	r1, r3, #22
  4072b6:	d53c      	bpl.n	407332 <_fclose_r+0xa2>
  4072b8:	4621      	mov	r1, r4
  4072ba:	4628      	mov	r0, r5
  4072bc:	f7fe fe68 	bl	405f90 <__sflush_r>
  4072c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4072c2:	4606      	mov	r6, r0
  4072c4:	b133      	cbz	r3, 4072d4 <_fclose_r+0x44>
  4072c6:	69e1      	ldr	r1, [r4, #28]
  4072c8:	4628      	mov	r0, r5
  4072ca:	4798      	blx	r3
  4072cc:	2800      	cmp	r0, #0
  4072ce:	bfb8      	it	lt
  4072d0:	f04f 36ff 	movlt.w	r6, #4294967295
  4072d4:	89a3      	ldrh	r3, [r4, #12]
  4072d6:	061a      	lsls	r2, r3, #24
  4072d8:	d422      	bmi.n	407320 <_fclose_r+0x90>
  4072da:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4072dc:	b141      	cbz	r1, 4072f0 <_fclose_r+0x60>
  4072de:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4072e2:	4299      	cmp	r1, r3
  4072e4:	d002      	beq.n	4072ec <_fclose_r+0x5c>
  4072e6:	4628      	mov	r0, r5
  4072e8:	f7ff f870 	bl	4063cc <_free_r>
  4072ec:	2300      	movs	r3, #0
  4072ee:	6323      	str	r3, [r4, #48]	; 0x30
  4072f0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4072f2:	b121      	cbz	r1, 4072fe <_fclose_r+0x6e>
  4072f4:	4628      	mov	r0, r5
  4072f6:	f7ff f869 	bl	4063cc <_free_r>
  4072fa:	2300      	movs	r3, #0
  4072fc:	6463      	str	r3, [r4, #68]	; 0x44
  4072fe:	f7fe ff6b 	bl	4061d8 <__sfp_lock_acquire>
  407302:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407304:	2200      	movs	r2, #0
  407306:	07db      	lsls	r3, r3, #31
  407308:	81a2      	strh	r2, [r4, #12]
  40730a:	d50e      	bpl.n	40732a <_fclose_r+0x9a>
  40730c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40730e:	f7ff faf5 	bl	4068fc <__retarget_lock_close_recursive>
  407312:	f7fe ff67 	bl	4061e4 <__sfp_lock_release>
  407316:	4630      	mov	r0, r6
  407318:	bd70      	pop	{r4, r5, r6, pc}
  40731a:	f7fe ff31 	bl	406180 <__sinit>
  40731e:	e7bf      	b.n	4072a0 <_fclose_r+0x10>
  407320:	6921      	ldr	r1, [r4, #16]
  407322:	4628      	mov	r0, r5
  407324:	f7ff f852 	bl	4063cc <_free_r>
  407328:	e7d7      	b.n	4072da <_fclose_r+0x4a>
  40732a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40732c:	f7ff faea 	bl	406904 <__retarget_lock_release_recursive>
  407330:	e7ec      	b.n	40730c <_fclose_r+0x7c>
  407332:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407334:	f7ff fae4 	bl	406900 <__retarget_lock_acquire_recursive>
  407338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40733c:	2b00      	cmp	r3, #0
  40733e:	d1bb      	bne.n	4072b8 <_fclose_r+0x28>
  407340:	6e66      	ldr	r6, [r4, #100]	; 0x64
  407342:	f016 0601 	ands.w	r6, r6, #1
  407346:	d1b1      	bne.n	4072ac <_fclose_r+0x1c>
  407348:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40734a:	f7ff fadb 	bl	406904 <__retarget_lock_release_recursive>
  40734e:	4630      	mov	r0, r6
  407350:	bd70      	pop	{r4, r5, r6, pc}
  407352:	bf00      	nop

00407354 <_fstat_r>:
  407354:	b538      	push	{r3, r4, r5, lr}
  407356:	460b      	mov	r3, r1
  407358:	4c07      	ldr	r4, [pc, #28]	; (407378 <_fstat_r+0x24>)
  40735a:	4605      	mov	r5, r0
  40735c:	4611      	mov	r1, r2
  40735e:	4618      	mov	r0, r3
  407360:	2300      	movs	r3, #0
  407362:	6023      	str	r3, [r4, #0]
  407364:	f7fb f914 	bl	402590 <_fstat>
  407368:	1c43      	adds	r3, r0, #1
  40736a:	d000      	beq.n	40736e <_fstat_r+0x1a>
  40736c:	bd38      	pop	{r3, r4, r5, pc}
  40736e:	6823      	ldr	r3, [r4, #0]
  407370:	2b00      	cmp	r3, #0
  407372:	d0fb      	beq.n	40736c <_fstat_r+0x18>
  407374:	602b      	str	r3, [r5, #0]
  407376:	bd38      	pop	{r3, r4, r5, pc}
  407378:	2043f4b4 	.word	0x2043f4b4

0040737c <_isatty_r>:
  40737c:	b538      	push	{r3, r4, r5, lr}
  40737e:	4c07      	ldr	r4, [pc, #28]	; (40739c <_isatty_r+0x20>)
  407380:	2300      	movs	r3, #0
  407382:	4605      	mov	r5, r0
  407384:	4608      	mov	r0, r1
  407386:	6023      	str	r3, [r4, #0]
  407388:	f7fb f908 	bl	40259c <_isatty>
  40738c:	1c43      	adds	r3, r0, #1
  40738e:	d000      	beq.n	407392 <_isatty_r+0x16>
  407390:	bd38      	pop	{r3, r4, r5, pc}
  407392:	6823      	ldr	r3, [r4, #0]
  407394:	2b00      	cmp	r3, #0
  407396:	d0fb      	beq.n	407390 <_isatty_r+0x14>
  407398:	602b      	str	r3, [r5, #0]
  40739a:	bd38      	pop	{r3, r4, r5, pc}
  40739c:	2043f4b4 	.word	0x2043f4b4

004073a0 <_lseek_r>:
  4073a0:	b570      	push	{r4, r5, r6, lr}
  4073a2:	460d      	mov	r5, r1
  4073a4:	4c08      	ldr	r4, [pc, #32]	; (4073c8 <_lseek_r+0x28>)
  4073a6:	4611      	mov	r1, r2
  4073a8:	4606      	mov	r6, r0
  4073aa:	461a      	mov	r2, r3
  4073ac:	4628      	mov	r0, r5
  4073ae:	2300      	movs	r3, #0
  4073b0:	6023      	str	r3, [r4, #0]
  4073b2:	f7fb f8f5 	bl	4025a0 <_lseek>
  4073b6:	1c43      	adds	r3, r0, #1
  4073b8:	d000      	beq.n	4073bc <_lseek_r+0x1c>
  4073ba:	bd70      	pop	{r4, r5, r6, pc}
  4073bc:	6823      	ldr	r3, [r4, #0]
  4073be:	2b00      	cmp	r3, #0
  4073c0:	d0fb      	beq.n	4073ba <_lseek_r+0x1a>
  4073c2:	6033      	str	r3, [r6, #0]
  4073c4:	bd70      	pop	{r4, r5, r6, pc}
  4073c6:	bf00      	nop
  4073c8:	2043f4b4 	.word	0x2043f4b4

004073cc <_read_r>:
  4073cc:	b570      	push	{r4, r5, r6, lr}
  4073ce:	460d      	mov	r5, r1
  4073d0:	4c08      	ldr	r4, [pc, #32]	; (4073f4 <_read_r+0x28>)
  4073d2:	4611      	mov	r1, r2
  4073d4:	4606      	mov	r6, r0
  4073d6:	461a      	mov	r2, r3
  4073d8:	4628      	mov	r0, r5
  4073da:	2300      	movs	r3, #0
  4073dc:	6023      	str	r3, [r4, #0]
  4073de:	f7f9 fea3 	bl	401128 <_read>
  4073e2:	1c43      	adds	r3, r0, #1
  4073e4:	d000      	beq.n	4073e8 <_read_r+0x1c>
  4073e6:	bd70      	pop	{r4, r5, r6, pc}
  4073e8:	6823      	ldr	r3, [r4, #0]
  4073ea:	2b00      	cmp	r3, #0
  4073ec:	d0fb      	beq.n	4073e6 <_read_r+0x1a>
  4073ee:	6033      	str	r3, [r6, #0]
  4073f0:	bd70      	pop	{r4, r5, r6, pc}
  4073f2:	bf00      	nop
  4073f4:	2043f4b4 	.word	0x2043f4b4

004073f8 <__aeabi_uldivmod>:
  4073f8:	b953      	cbnz	r3, 407410 <__aeabi_uldivmod+0x18>
  4073fa:	b94a      	cbnz	r2, 407410 <__aeabi_uldivmod+0x18>
  4073fc:	2900      	cmp	r1, #0
  4073fe:	bf08      	it	eq
  407400:	2800      	cmpeq	r0, #0
  407402:	bf1c      	itt	ne
  407404:	f04f 31ff 	movne.w	r1, #4294967295
  407408:	f04f 30ff 	movne.w	r0, #4294967295
  40740c:	f000 b97a 	b.w	407704 <__aeabi_idiv0>
  407410:	f1ad 0c08 	sub.w	ip, sp, #8
  407414:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  407418:	f000 f806 	bl	407428 <__udivmoddi4>
  40741c:	f8dd e004 	ldr.w	lr, [sp, #4]
  407420:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  407424:	b004      	add	sp, #16
  407426:	4770      	bx	lr

00407428 <__udivmoddi4>:
  407428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40742c:	468c      	mov	ip, r1
  40742e:	460d      	mov	r5, r1
  407430:	4604      	mov	r4, r0
  407432:	9e08      	ldr	r6, [sp, #32]
  407434:	2b00      	cmp	r3, #0
  407436:	d151      	bne.n	4074dc <__udivmoddi4+0xb4>
  407438:	428a      	cmp	r2, r1
  40743a:	4617      	mov	r7, r2
  40743c:	d96d      	bls.n	40751a <__udivmoddi4+0xf2>
  40743e:	fab2 fe82 	clz	lr, r2
  407442:	f1be 0f00 	cmp.w	lr, #0
  407446:	d00b      	beq.n	407460 <__udivmoddi4+0x38>
  407448:	f1ce 0c20 	rsb	ip, lr, #32
  40744c:	fa01 f50e 	lsl.w	r5, r1, lr
  407450:	fa20 fc0c 	lsr.w	ip, r0, ip
  407454:	fa02 f70e 	lsl.w	r7, r2, lr
  407458:	ea4c 0c05 	orr.w	ip, ip, r5
  40745c:	fa00 f40e 	lsl.w	r4, r0, lr
  407460:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  407464:	0c25      	lsrs	r5, r4, #16
  407466:	fbbc f8fa 	udiv	r8, ip, sl
  40746a:	fa1f f987 	uxth.w	r9, r7
  40746e:	fb0a cc18 	mls	ip, sl, r8, ip
  407472:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  407476:	fb08 f309 	mul.w	r3, r8, r9
  40747a:	42ab      	cmp	r3, r5
  40747c:	d90a      	bls.n	407494 <__udivmoddi4+0x6c>
  40747e:	19ed      	adds	r5, r5, r7
  407480:	f108 32ff 	add.w	r2, r8, #4294967295
  407484:	f080 8123 	bcs.w	4076ce <__udivmoddi4+0x2a6>
  407488:	42ab      	cmp	r3, r5
  40748a:	f240 8120 	bls.w	4076ce <__udivmoddi4+0x2a6>
  40748e:	f1a8 0802 	sub.w	r8, r8, #2
  407492:	443d      	add	r5, r7
  407494:	1aed      	subs	r5, r5, r3
  407496:	b2a4      	uxth	r4, r4
  407498:	fbb5 f0fa 	udiv	r0, r5, sl
  40749c:	fb0a 5510 	mls	r5, sl, r0, r5
  4074a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4074a4:	fb00 f909 	mul.w	r9, r0, r9
  4074a8:	45a1      	cmp	r9, r4
  4074aa:	d909      	bls.n	4074c0 <__udivmoddi4+0x98>
  4074ac:	19e4      	adds	r4, r4, r7
  4074ae:	f100 33ff 	add.w	r3, r0, #4294967295
  4074b2:	f080 810a 	bcs.w	4076ca <__udivmoddi4+0x2a2>
  4074b6:	45a1      	cmp	r9, r4
  4074b8:	f240 8107 	bls.w	4076ca <__udivmoddi4+0x2a2>
  4074bc:	3802      	subs	r0, #2
  4074be:	443c      	add	r4, r7
  4074c0:	eba4 0409 	sub.w	r4, r4, r9
  4074c4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4074c8:	2100      	movs	r1, #0
  4074ca:	2e00      	cmp	r6, #0
  4074cc:	d061      	beq.n	407592 <__udivmoddi4+0x16a>
  4074ce:	fa24 f40e 	lsr.w	r4, r4, lr
  4074d2:	2300      	movs	r3, #0
  4074d4:	6034      	str	r4, [r6, #0]
  4074d6:	6073      	str	r3, [r6, #4]
  4074d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4074dc:	428b      	cmp	r3, r1
  4074de:	d907      	bls.n	4074f0 <__udivmoddi4+0xc8>
  4074e0:	2e00      	cmp	r6, #0
  4074e2:	d054      	beq.n	40758e <__udivmoddi4+0x166>
  4074e4:	2100      	movs	r1, #0
  4074e6:	e886 0021 	stmia.w	r6, {r0, r5}
  4074ea:	4608      	mov	r0, r1
  4074ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4074f0:	fab3 f183 	clz	r1, r3
  4074f4:	2900      	cmp	r1, #0
  4074f6:	f040 808e 	bne.w	407616 <__udivmoddi4+0x1ee>
  4074fa:	42ab      	cmp	r3, r5
  4074fc:	d302      	bcc.n	407504 <__udivmoddi4+0xdc>
  4074fe:	4282      	cmp	r2, r0
  407500:	f200 80fa 	bhi.w	4076f8 <__udivmoddi4+0x2d0>
  407504:	1a84      	subs	r4, r0, r2
  407506:	eb65 0503 	sbc.w	r5, r5, r3
  40750a:	2001      	movs	r0, #1
  40750c:	46ac      	mov	ip, r5
  40750e:	2e00      	cmp	r6, #0
  407510:	d03f      	beq.n	407592 <__udivmoddi4+0x16a>
  407512:	e886 1010 	stmia.w	r6, {r4, ip}
  407516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40751a:	b912      	cbnz	r2, 407522 <__udivmoddi4+0xfa>
  40751c:	2701      	movs	r7, #1
  40751e:	fbb7 f7f2 	udiv	r7, r7, r2
  407522:	fab7 fe87 	clz	lr, r7
  407526:	f1be 0f00 	cmp.w	lr, #0
  40752a:	d134      	bne.n	407596 <__udivmoddi4+0x16e>
  40752c:	1beb      	subs	r3, r5, r7
  40752e:	0c3a      	lsrs	r2, r7, #16
  407530:	fa1f fc87 	uxth.w	ip, r7
  407534:	2101      	movs	r1, #1
  407536:	fbb3 f8f2 	udiv	r8, r3, r2
  40753a:	0c25      	lsrs	r5, r4, #16
  40753c:	fb02 3318 	mls	r3, r2, r8, r3
  407540:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  407544:	fb0c f308 	mul.w	r3, ip, r8
  407548:	42ab      	cmp	r3, r5
  40754a:	d907      	bls.n	40755c <__udivmoddi4+0x134>
  40754c:	19ed      	adds	r5, r5, r7
  40754e:	f108 30ff 	add.w	r0, r8, #4294967295
  407552:	d202      	bcs.n	40755a <__udivmoddi4+0x132>
  407554:	42ab      	cmp	r3, r5
  407556:	f200 80d1 	bhi.w	4076fc <__udivmoddi4+0x2d4>
  40755a:	4680      	mov	r8, r0
  40755c:	1aed      	subs	r5, r5, r3
  40755e:	b2a3      	uxth	r3, r4
  407560:	fbb5 f0f2 	udiv	r0, r5, r2
  407564:	fb02 5510 	mls	r5, r2, r0, r5
  407568:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40756c:	fb0c fc00 	mul.w	ip, ip, r0
  407570:	45a4      	cmp	ip, r4
  407572:	d907      	bls.n	407584 <__udivmoddi4+0x15c>
  407574:	19e4      	adds	r4, r4, r7
  407576:	f100 33ff 	add.w	r3, r0, #4294967295
  40757a:	d202      	bcs.n	407582 <__udivmoddi4+0x15a>
  40757c:	45a4      	cmp	ip, r4
  40757e:	f200 80b8 	bhi.w	4076f2 <__udivmoddi4+0x2ca>
  407582:	4618      	mov	r0, r3
  407584:	eba4 040c 	sub.w	r4, r4, ip
  407588:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40758c:	e79d      	b.n	4074ca <__udivmoddi4+0xa2>
  40758e:	4631      	mov	r1, r6
  407590:	4630      	mov	r0, r6
  407592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407596:	f1ce 0420 	rsb	r4, lr, #32
  40759a:	fa05 f30e 	lsl.w	r3, r5, lr
  40759e:	fa07 f70e 	lsl.w	r7, r7, lr
  4075a2:	fa20 f804 	lsr.w	r8, r0, r4
  4075a6:	0c3a      	lsrs	r2, r7, #16
  4075a8:	fa25 f404 	lsr.w	r4, r5, r4
  4075ac:	ea48 0803 	orr.w	r8, r8, r3
  4075b0:	fbb4 f1f2 	udiv	r1, r4, r2
  4075b4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4075b8:	fb02 4411 	mls	r4, r2, r1, r4
  4075bc:	fa1f fc87 	uxth.w	ip, r7
  4075c0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4075c4:	fb01 f30c 	mul.w	r3, r1, ip
  4075c8:	42ab      	cmp	r3, r5
  4075ca:	fa00 f40e 	lsl.w	r4, r0, lr
  4075ce:	d909      	bls.n	4075e4 <__udivmoddi4+0x1bc>
  4075d0:	19ed      	adds	r5, r5, r7
  4075d2:	f101 30ff 	add.w	r0, r1, #4294967295
  4075d6:	f080 808a 	bcs.w	4076ee <__udivmoddi4+0x2c6>
  4075da:	42ab      	cmp	r3, r5
  4075dc:	f240 8087 	bls.w	4076ee <__udivmoddi4+0x2c6>
  4075e0:	3902      	subs	r1, #2
  4075e2:	443d      	add	r5, r7
  4075e4:	1aeb      	subs	r3, r5, r3
  4075e6:	fa1f f588 	uxth.w	r5, r8
  4075ea:	fbb3 f0f2 	udiv	r0, r3, r2
  4075ee:	fb02 3310 	mls	r3, r2, r0, r3
  4075f2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4075f6:	fb00 f30c 	mul.w	r3, r0, ip
  4075fa:	42ab      	cmp	r3, r5
  4075fc:	d907      	bls.n	40760e <__udivmoddi4+0x1e6>
  4075fe:	19ed      	adds	r5, r5, r7
  407600:	f100 38ff 	add.w	r8, r0, #4294967295
  407604:	d26f      	bcs.n	4076e6 <__udivmoddi4+0x2be>
  407606:	42ab      	cmp	r3, r5
  407608:	d96d      	bls.n	4076e6 <__udivmoddi4+0x2be>
  40760a:	3802      	subs	r0, #2
  40760c:	443d      	add	r5, r7
  40760e:	1aeb      	subs	r3, r5, r3
  407610:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  407614:	e78f      	b.n	407536 <__udivmoddi4+0x10e>
  407616:	f1c1 0720 	rsb	r7, r1, #32
  40761a:	fa22 f807 	lsr.w	r8, r2, r7
  40761e:	408b      	lsls	r3, r1
  407620:	fa05 f401 	lsl.w	r4, r5, r1
  407624:	ea48 0303 	orr.w	r3, r8, r3
  407628:	fa20 fe07 	lsr.w	lr, r0, r7
  40762c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  407630:	40fd      	lsrs	r5, r7
  407632:	ea4e 0e04 	orr.w	lr, lr, r4
  407636:	fbb5 f9fc 	udiv	r9, r5, ip
  40763a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40763e:	fb0c 5519 	mls	r5, ip, r9, r5
  407642:	fa1f f883 	uxth.w	r8, r3
  407646:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40764a:	fb09 f408 	mul.w	r4, r9, r8
  40764e:	42ac      	cmp	r4, r5
  407650:	fa02 f201 	lsl.w	r2, r2, r1
  407654:	fa00 fa01 	lsl.w	sl, r0, r1
  407658:	d908      	bls.n	40766c <__udivmoddi4+0x244>
  40765a:	18ed      	adds	r5, r5, r3
  40765c:	f109 30ff 	add.w	r0, r9, #4294967295
  407660:	d243      	bcs.n	4076ea <__udivmoddi4+0x2c2>
  407662:	42ac      	cmp	r4, r5
  407664:	d941      	bls.n	4076ea <__udivmoddi4+0x2c2>
  407666:	f1a9 0902 	sub.w	r9, r9, #2
  40766a:	441d      	add	r5, r3
  40766c:	1b2d      	subs	r5, r5, r4
  40766e:	fa1f fe8e 	uxth.w	lr, lr
  407672:	fbb5 f0fc 	udiv	r0, r5, ip
  407676:	fb0c 5510 	mls	r5, ip, r0, r5
  40767a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40767e:	fb00 f808 	mul.w	r8, r0, r8
  407682:	45a0      	cmp	r8, r4
  407684:	d907      	bls.n	407696 <__udivmoddi4+0x26e>
  407686:	18e4      	adds	r4, r4, r3
  407688:	f100 35ff 	add.w	r5, r0, #4294967295
  40768c:	d229      	bcs.n	4076e2 <__udivmoddi4+0x2ba>
  40768e:	45a0      	cmp	r8, r4
  407690:	d927      	bls.n	4076e2 <__udivmoddi4+0x2ba>
  407692:	3802      	subs	r0, #2
  407694:	441c      	add	r4, r3
  407696:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40769a:	eba4 0408 	sub.w	r4, r4, r8
  40769e:	fba0 8902 	umull	r8, r9, r0, r2
  4076a2:	454c      	cmp	r4, r9
  4076a4:	46c6      	mov	lr, r8
  4076a6:	464d      	mov	r5, r9
  4076a8:	d315      	bcc.n	4076d6 <__udivmoddi4+0x2ae>
  4076aa:	d012      	beq.n	4076d2 <__udivmoddi4+0x2aa>
  4076ac:	b156      	cbz	r6, 4076c4 <__udivmoddi4+0x29c>
  4076ae:	ebba 030e 	subs.w	r3, sl, lr
  4076b2:	eb64 0405 	sbc.w	r4, r4, r5
  4076b6:	fa04 f707 	lsl.w	r7, r4, r7
  4076ba:	40cb      	lsrs	r3, r1
  4076bc:	431f      	orrs	r7, r3
  4076be:	40cc      	lsrs	r4, r1
  4076c0:	6037      	str	r7, [r6, #0]
  4076c2:	6074      	str	r4, [r6, #4]
  4076c4:	2100      	movs	r1, #0
  4076c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4076ca:	4618      	mov	r0, r3
  4076cc:	e6f8      	b.n	4074c0 <__udivmoddi4+0x98>
  4076ce:	4690      	mov	r8, r2
  4076d0:	e6e0      	b.n	407494 <__udivmoddi4+0x6c>
  4076d2:	45c2      	cmp	sl, r8
  4076d4:	d2ea      	bcs.n	4076ac <__udivmoddi4+0x284>
  4076d6:	ebb8 0e02 	subs.w	lr, r8, r2
  4076da:	eb69 0503 	sbc.w	r5, r9, r3
  4076de:	3801      	subs	r0, #1
  4076e0:	e7e4      	b.n	4076ac <__udivmoddi4+0x284>
  4076e2:	4628      	mov	r0, r5
  4076e4:	e7d7      	b.n	407696 <__udivmoddi4+0x26e>
  4076e6:	4640      	mov	r0, r8
  4076e8:	e791      	b.n	40760e <__udivmoddi4+0x1e6>
  4076ea:	4681      	mov	r9, r0
  4076ec:	e7be      	b.n	40766c <__udivmoddi4+0x244>
  4076ee:	4601      	mov	r1, r0
  4076f0:	e778      	b.n	4075e4 <__udivmoddi4+0x1bc>
  4076f2:	3802      	subs	r0, #2
  4076f4:	443c      	add	r4, r7
  4076f6:	e745      	b.n	407584 <__udivmoddi4+0x15c>
  4076f8:	4608      	mov	r0, r1
  4076fa:	e708      	b.n	40750e <__udivmoddi4+0xe6>
  4076fc:	f1a8 0802 	sub.w	r8, r8, #2
  407700:	443d      	add	r5, r7
  407702:	e72b      	b.n	40755c <__udivmoddi4+0x134>

00407704 <__aeabi_idiv0>:
  407704:	4770      	bx	lr
  407706:	bf00      	nop
  407708:	092d452d 	.word	0x092d452d
  40770c:	39384d57 	.word	0x39384d57
  407710:	69203430 	.word	0x69203430
  407714:	6974696e 	.word	0x6974696e
  407718:	7a696c61 	.word	0x7a696c61
  40771c:	6f697461 	.word	0x6f697461
  407720:	6166206e 	.word	0x6166206e
  407724:	64656c69 	.word	0x64656c69
  407728:	00000d2e 	.word	0x00000d2e

0040772c <CSWTCH.7>:
  40772c:	00000100 00000300 00000200 00000002     ................
  40773c:	00000002 00000001 00000002 00000002     ................
  40774c:	00000002 00000001 00000002 00000002     ................
  40775c:	00000001                                ....

00407760 <midi_note_frequencies>:
  407760:	4102d0e5 410a978d 4112d4fe 411b9168     ...A...A...Ah..A
  407770:	4124d0e5 412e9ba6 4138fdf4 41440000     ..$A...A..8A..DA
  407780:	414fa5e3 415c0000 41691687 4176f1aa     ..OA..\A..iA..vA
  407790:	4182d0e5 418a978d 4192d4fe 419b8f5c     ...A...A...A\..A
  4077a0:	41a4d0e5 41ae9db2 41b90000 41c40000     ...A...A...A...A
  4077b0:	41cfa7f0 41dc0000 41e9147b 41f6f1aa     ...A...A{..A...A
  4077c0:	4202cfdf 420a978d 4212d4fe 421b9062     ...B...B...Bb..B
  4077d0:	4224cfdf 422e9db2 4238fefa 4243fefa     ..$B...B..8B..CB
  4077e0:	424fa6e9 425c0000 4269147b 4276f0a4     ..OB..\B{.iB..vB
  4077f0:	4282cfdf 428a978d 4292d4fe 429b9062     ...B...B...Bb..B
  407800:	42a4d062 42ae9d2f 42b8ff7d 42c3ff7d     b..B/..B}..B}..B
  407810:	42cfa6e9 42dc0000 42e914fe 42f6f127     ...B...B...B'..B
  407820:	4302d021 430a974c 4312d4fe 431b9021     !..CL..C...C!..C
  407830:	4324d062 432e9d2f 4338ff3b 4343ff7d     b.$C/..C;.8C}.CC
  407840:	434fa6e9 435c0000 436914fe 4376f127     ..OC..\C..iC'.vC
  407850:	4382d021 438a976d 4392d51f 439b9042     !..Cm..C...CB..C
  407860:	43a4d062 43ae9d2f 43b8ff3b 43c3ff5c     b..C/..C;..C\..C
  407870:	43cfa70a 43dc0000 43e914fe 43f6f106     ...C...C...C...C
  407880:	4402d010 440a975c 4412d51f 441b9042     ...D\..D...DB..D
  407890:	4424d052 442e9d2f 4438ff4c 4443ff6d     R.$D/..DL.8Dm.CD
  4078a0:	444fa6fa 445c0000 446914fe 4476f117     ..OD..\D..iD..vD
  4078b0:	4482d010 448a9764 4492d517 449b9042     ...Dd..D...DB..D
  4078c0:	44a4d052 44ae9d37 44b8ff4c 44c3ff6d     R..D7..DL..Dm..D
  4078d0:	44cfa702 44dc0000 44e914f6 44f6f10e     ...D...D...D...D
  4078e0:	4502d014 450a9760 4512d517 451b9042     ...E`..E...EB..E
  4078f0:	4524d052 452e9d37 4538ff48 4543ff68     R.$E7..EH.8Eh.CE
  407900:	454fa702 455c0000 456914f6 4576f10e     ..OE..\E..iE..vE
  407910:	4582d012 458a9760 4592d517 459b9042     ...E`..E...EB..E
  407920:	45a4d054 45ae9d37 45b8ff4a 45c3ff6a     T..E7..EJ..Ej..E
  407930:	45cfa700 45dc0000 45e914f6 45f6f110     ...E...E...E...E
  407940:	4602d012 460a9760 4612d518 461b9041     ...F`..F...FA..F
  407950:	4624d052 462e9d33 4638ff48 4643ff66     R.$F3..FH.8Ff.CF

00407960 <sinTable_f32>:
  407960:	00000000 3c490e92 3cc90ab1 3d16c32b     ......I<...<+..=
  407970:	3d48fb2e 3d7b2b75 3d96a904 3dafb680     ..H=u+{=...=...=
  407980:	3dc8bd36 3de1bc2f 3dfab273 3e09cf87     6..=/..=s..=...>
  407990:	3e164083 3e22abb5 3e2f10a2 3e3b6ecf     .@.>..">../>.n;>
  4079a0:	3e47c5c2 3e541501 3e605c13 3e6c9a7f     ..G>..T>.\`>..l>
  4079b0:	3e78cfcc 3e827dc0 3e888e93 3e8e9a22     ..x>.}.>...>"..>
  4079c0:	3e94a032 3e9aa086 3ea09ae5 3ea68f12     2..>...>...>...>
  4079d0:	3eac7cd4 3eb263ef 3eb8442a 3ebe1d49     .|.>.c.>*D.>I..>
  4079e0:	3ec3ef15 3ec9b953 3ecf7bca 3ed53641     ...>S..>.{.>A6.>
  4079f0:	3edae880 3ee0924f 3ee63375 3eebcbbb     ...>O..>u3.>...>
  407a00:	3ef15aea 3ef6e0cb 3efc5d27 3f00e7e4     .Z.>...>'].>...?
  407a10:	3f039c3d 3f064b82 3f08f59b 3f0b9a6b     =..?.K.?...?k..?
  407a20:	3f0e39da 3f10d3cd 3f13682a 3f15f6d9     .9.?...?*h.?...?
  407a30:	3f187fc0 3f1b02c6 3f1d7fd1 3f1ff6cb     ...?...?...?...?
  407a40:	3f226799 3f24d225 3f273656 3f299415     .g"?%.$?V6'?..)?
  407a50:	3f2beb4a 3f2e3bde 3f3085bb 3f32c8c9     J.+?.;.?..0?..2?
  407a60:	3f3504f3 3f373a23 3f396842 3f3b8f3b     ..5?#:7?Bh9?;.;?
  407a70:	3f3daef9 3f3fc767 3f41d870 3f43e201     ..=?g.??p.A?..C?
  407a80:	3f45e403 3f47de65 3f49d112 3f4bbbf8     ..E?e.G?..I?..K?
  407a90:	3f4d9f02 3f4f7a20 3f514d3d 3f531849     ..M? zO?=MQ?I.S?
  407aa0:	3f54db31 3f5695e5 3f584853 3f59f26a     1.T?..V?SHX?j.Y?
  407ab0:	3f5b941a 3f5d2d53 3f5ebe05 3f604621     ..[?S-]?..^?!F`?
  407ac0:	3f61c597 3f633c5a 3f64aa59 3f660f88     ..a?Z<c?Y.d?..f?
  407ad0:	3f676bd8 3f68bf3c 3f6a09a7 3f6b4b0c     .kg?<.h?..j?.Kk?
  407ae0:	3f6c835e 3f6db293 3f6ed89e 3f6ff573     ^.l?..m?..n?s.o?
  407af0:	3f710908 3f721352 3f731447 3f740bdd     ..q?R.r?G.s?..t?
  407b00:	3f74fa0b 3f75dec6 3f76ba07 3f778bc5     ..t?..u?..v?..w?
  407b10:	3f7853f8 3f791298 3f79c79d 3f7a7302     .Sx?..y?..y?.sz?
  407b20:	3f7b14be 3f7baccd 3f7c3b28 3f7cbfc9     ..{?..{?(;|?..|?
  407b30:	3f7d3aac 3f7dabcc 3f7e1323 3f7e70b0     .:}?..}?#.~?.p~?
  407b40:	3f7ec46d 3f7f0e58 3f7f4e6d 3f7f84ab     m.~?X..?mN.?...?
  407b50:	3f7fb10f 3f7fd397 3f7fec43 3f7ffb11     ...?...?C..?...?
  407b60:	3f800000 3f7ffb11 3f7fec43 3f7fd397     ...?...?C..?...?
  407b70:	3f7fb10f 3f7f84ab 3f7f4e6d 3f7f0e58     ...?...?mN.?X..?
  407b80:	3f7ec46d 3f7e70b0 3f7e1323 3f7dabcc     m.~?.p~?#.~?..}?
  407b90:	3f7d3aac 3f7cbfc9 3f7c3b28 3f7baccd     .:}?..|?(;|?..{?
  407ba0:	3f7b14be 3f7a7302 3f79c79d 3f791298     ..{?.sz?..y?..y?
  407bb0:	3f7853f8 3f778bc5 3f76ba07 3f75dec6     .Sx?..w?..v?..u?
  407bc0:	3f74fa0b 3f740bdd 3f731447 3f721352     ..t?..t?G.s?R.r?
  407bd0:	3f710908 3f6ff573 3f6ed89e 3f6db293     ..q?s.o?..n?..m?
  407be0:	3f6c835e 3f6b4b0c 3f6a09a7 3f68bf3c     ^.l?.Kk?..j?<.h?
  407bf0:	3f676bd8 3f660f88 3f64aa59 3f633c5a     .kg?..f?Y.d?Z<c?
  407c00:	3f61c597 3f604621 3f5ebe05 3f5d2d53     ..a?!F`?..^?S-]?
  407c10:	3f5b941a 3f59f26a 3f584853 3f5695e5     ..[?j.Y?SHX?..V?
  407c20:	3f54db31 3f531849 3f514d3d 3f4f7a20     1.T?I.S?=MQ? zO?
  407c30:	3f4d9f02 3f4bbbf8 3f49d112 3f47de65     ..M?..K?..I?e.G?
  407c40:	3f45e403 3f43e201 3f41d870 3f3fc767     ..E?..C?p.A?g.??
  407c50:	3f3daef9 3f3b8f3b 3f396842 3f373a23     ..=?;.;?Bh9?#:7?
  407c60:	3f3504f3 3f32c8c9 3f3085bb 3f2e3bde     ..5?..2?..0?.;.?
  407c70:	3f2beb4a 3f299415 3f273656 3f24d225     J.+?..)?V6'?%.$?
  407c80:	3f226799 3f1ff6cb 3f1d7fd1 3f1b02c6     .g"?...?...?...?
  407c90:	3f187fc0 3f15f6d9 3f13682a 3f10d3cd     ...?...?*h.?...?
  407ca0:	3f0e39da 3f0b9a6b 3f08f59b 3f064b82     .9.?k..?...?.K.?
  407cb0:	3f039c3d 3f00e7e4 3efc5d27 3ef6e0cb     =..?...?'].>...>
  407cc0:	3ef15aea 3eebcbbb 3ee63375 3ee0924f     .Z.>...>u3.>O..>
  407cd0:	3edae880 3ed53641 3ecf7bca 3ec9b953     ...>A6.>.{.>S..>
  407ce0:	3ec3ef15 3ebe1d49 3eb8442a 3eb263ef     ...>I..>*D.>.c.>
  407cf0:	3eac7cd4 3ea68f12 3ea09ae5 3e9aa086     .|.>...>...>...>
  407d00:	3e94a032 3e8e9a22 3e888e93 3e827dc0     2..>"..>...>.}.>
  407d10:	3e78cfcc 3e6c9a7f 3e605c13 3e541501     ..x>..l>.\`>..T>
  407d20:	3e47c5c2 3e3b6ecf 3e2f10a2 3e22abb5     ..G>.n;>../>..">
  407d30:	3e164083 3e09cf87 3dfab273 3de1bc2f     .@.>...>s..=/..=
  407d40:	3dc8bd36 3dafb680 3d96a904 3d7b2b75     6..=...=...=u+{=
  407d50:	3d48fb2e 3d16c32b 3cc90ab1 3c490e92     ..H=+..=...<..I<
  407d60:	00000000 bc490e92 bcc90ab1 bd16c32b     ......I.....+...
  407d70:	bd48fb2e bd7b2b75 bd96a904 bdafb680     ..H.u+{.........
  407d80:	bdc8bd36 bde1bc2f bdfab273 be09cf87     6.../...s.......
  407d90:	be164083 be22abb5 be2f10a2 be3b6ecf     .@....".../..n;.
  407da0:	be47c5c2 be541501 be605c13 be6c9a7f     ..G...T..\`...l.
  407db0:	be78cfcc be827dc0 be888e93 be8e9a22     ..x..}......"...
  407dc0:	be94a032 be9aa086 bea09ae5 bea68f12     2...............
  407dd0:	beac7cd4 beb263ef beb8442a bebe1d49     .|...c..*D..I...
  407de0:	bec3ef15 bec9b953 becf7bca bed53641     ....S....{..A6..
  407df0:	bedae880 bee0924f bee63375 beebcbbb     ....O...u3......
  407e00:	bef15aea bef6e0cb befc5d27 bf00e7e4     .Z......']......
  407e10:	bf039c3d bf064b82 bf08f59b bf0b9a6b     =....K......k...
  407e20:	bf0e39da bf10d3cd bf13682a bf15f6d9     .9......*h......
  407e30:	bf187fc0 bf1b02c6 bf1d7fd1 bf1ff6cb     ................
  407e40:	bf226799 bf24d225 bf273656 bf299415     .g".%.$.V6'...).
  407e50:	bf2beb4a bf2e3bde bf3085bb bf32c8c9     J.+..;....0...2.
  407e60:	bf3504f3 bf373a23 bf396842 bf3b8f3b     ..5.#:7.Bh9.;.;.
  407e70:	bf3daef9 bf3fc767 bf41d870 bf43e201     ..=.g.?.p.A...C.
  407e80:	bf45e403 bf47de65 bf49d112 bf4bbbf8     ..E.e.G...I...K.
  407e90:	bf4d9f02 bf4f7a20 bf514d3d bf531849     ..M. zO.=MQ.I.S.
  407ea0:	bf54db31 bf5695e5 bf584853 bf59f26a     1.T...V.SHX.j.Y.
  407eb0:	bf5b941a bf5d2d53 bf5ebe05 bf604621     ..[.S-]...^.!F`.
  407ec0:	bf61c597 bf633c5a bf64aa59 bf660f88     ..a.Z<c.Y.d...f.
  407ed0:	bf676bd8 bf68bf3c bf6a09a7 bf6b4b0c     .kg.<.h...j..Kk.
  407ee0:	bf6c835e bf6db293 bf6ed89e bf6ff573     ^.l...m...n.s.o.
  407ef0:	bf710908 bf721352 bf731447 bf740bdd     ..q.R.r.G.s...t.
  407f00:	bf74fa0b bf75dec6 bf76ba07 bf778bc5     ..t...u...v...w.
  407f10:	bf7853f8 bf791298 bf79c79d bf7a7302     .Sx...y...y..sz.
  407f20:	bf7b14be bf7baccd bf7c3b28 bf7cbfc9     ..{...{.(;|...|.
  407f30:	bf7d3aac bf7dabcc bf7e1323 bf7e70b0     .:}...}.#.~..p~.
  407f40:	bf7ec46d bf7f0e58 bf7f4e6d bf7f84ab     m.~.X...mN......
  407f50:	bf7fb10f bf7fd397 bf7fec43 bf7ffb11     ........C.......
  407f60:	bf800000 bf7ffb11 bf7fec43 bf7fd397     ........C.......
  407f70:	bf7fb10f bf7f84ab bf7f4e6d bf7f0e58     ........mN..X...
  407f80:	bf7ec46d bf7e70b0 bf7e1323 bf7dabcc     m.~..p~.#.~...}.
  407f90:	bf7d3aac bf7cbfc9 bf7c3b28 bf7baccd     .:}...|.(;|...{.
  407fa0:	bf7b14be bf7a7302 bf79c79d bf791298     ..{..sz...y...y.
  407fb0:	bf7853f8 bf778bc5 bf76ba07 bf75dec6     .Sx...w...v...u.
  407fc0:	bf74fa0b bf740bdd bf731447 bf721352     ..t...t.G.s.R.r.
  407fd0:	bf710908 bf6ff573 bf6ed89e bf6db293     ..q.s.o...n...m.
  407fe0:	bf6c835e bf6b4b0c bf6a09a7 bf68bf3c     ^.l..Kk...j.<.h.
  407ff0:	bf676bd8 bf660f88 bf64aa59 bf633c5a     .kg...f.Y.d.Z<c.
  408000:	bf61c597 bf604621 bf5ebe05 bf5d2d53     ..a.!F`...^.S-].
  408010:	bf5b941a bf59f26a bf584853 bf5695e5     ..[.j.Y.SHX...V.
  408020:	bf54db31 bf531849 bf514d3d bf4f7a20     1.T.I.S.=MQ. zO.
  408030:	bf4d9f02 bf4bbbf8 bf49d112 bf47de65     ..M...K...I.e.G.
  408040:	bf45e403 bf43e201 bf41d870 bf3fc767     ..E...C.p.A.g.?.
  408050:	bf3daef9 bf3b8f3b bf396842 bf373a23     ..=.;.;.Bh9.#:7.
  408060:	bf3504f3 bf32c8c9 bf3085bb bf2e3bde     ..5...2...0..;..
  408070:	bf2beb4a bf299415 bf273656 bf24d225     J.+...).V6'.%.$.
  408080:	bf226799 bf1ff6cb bf1d7fd1 bf1b02c6     .g".............
  408090:	bf187fc0 bf15f6d9 bf13682a bf10d3cd     ........*h......
  4080a0:	bf0e39da bf0b9a6b bf08f59b bf064b82     .9..k........K..
  4080b0:	bf039c3d bf00e7e4 befc5d27 bef6e0cb     =.......']......
  4080c0:	bef15aea beebcbbb bee63375 bee0924f     .Z......u3..O...
  4080d0:	bedae880 bed53641 becf7bca bec9b953     ....A6...{..S...
  4080e0:	bec3ef15 bebe1d49 beb8442a beb263ef     ....I...*D...c..
  4080f0:	beac7cd4 bea68f12 bea09ae5 be9aa086     .|..............
  408100:	be94a032 be8e9a22 be888e93 be827dc0     2..."........}..
  408110:	be78cfcc be6c9a7f be605c13 be541501     ..x...l..\`...T.
  408120:	be47c5c2 be3b6ecf be2f10a2 be22abb5     ..G..n;.../...".
  408130:	be164083 be09cf87 bdfab273 bde1bc2f     .@......s.../...
  408140:	bdc8bd36 bdafb680 bd96a904 bd7b2b75     6...........u+{.
  408150:	bd48fb2e bd16c32b bcc90ab1 bc490e92     ..H.+.........I.
  408160:	80000000 66676f6c 00000000              ....logf....

0040816c <_global_impure_ptr>:
  40816c:	20400050 33323130 37363534 42413938     P.@ 0123456789AB
  40817c:	46454443 00000000 33323130 37363534     CDEF....01234567
  40818c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40819c:	0000296c                                l)..

004081a0 <blanks.8340>:
  4081a0:	20202020 20202020 20202020 20202020                     

004081b0 <zeroes.8341>:
  4081b0:	30303030 30303030 30303030 30303030     0000000000000000
  4081c0:	00000043 49534f50 00000058 0000002e     C...POSIX.......

004081d0 <_ctype_>:
  4081d0:	20202000 20202020 28282020 20282828     .         ((((( 
  4081e0:	20202020 20202020 20202020 20202020                     
  4081f0:	10108820 10101010 10101010 10101010      ...............
  408200:	04040410 04040404 10040404 10101010     ................
  408210:	41411010 41414141 01010101 01010101     ..AAAAAA........
  408220:	01010101 01010101 01010101 10101010     ................
  408230:	42421010 42424242 02020202 02020202     ..BBBBBB........
  408240:	02020202 02020202 02020202 10101010     ................
  408250:	00000020 00000000 00000000 00000000      ...............
	...

004082d4 <_init>:
  4082d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4082d6:	bf00      	nop
  4082d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4082da:	bc08      	pop	{r3}
  4082dc:	469e      	mov	lr, r3
  4082de:	4770      	bx	lr

004082e0 <__init_array_start>:
  4082e0:	00405f71 	.word	0x00405f71

004082e4 <__frame_dummy_init_array_entry>:
  4082e4:	00400165                                e.@.

004082e8 <_fini>:
  4082e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4082ea:	bf00      	nop
  4082ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4082ee:	bc08      	pop	{r3}
  4082f0:	469e      	mov	lr, r3
  4082f2:	4770      	bx	lr

004082f4 <__fini_array_start>:
  4082f4:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <inBuffer>:
2040000c:	ec00 2043                                   ..C 

20400010 <inPingMode>:
20400010:	0101                                             .

20400011 <outPingMode>:
20400011:	0001 0000                                        ...

20400014 <sound_out>:
20400014:	dc00 2043                                   ..C 

20400018 <pitchtracker>:
20400018:	0000 bf80 ffff ffff                         ........

20400020 <g_interrupt_enabled>:
20400020:	0001 0000                                   ....

20400024 <SystemCoreClock>:
20400024:	0900 003d                                   ..=.

20400028 <chorus_speed>:
20400028:	d70a 3ca3                                   ...<

2040002c <delay_feedback>:
2040002c:	cccd 3e4c                                   ..L>

20400030 <delay_speed>:
20400030:	3e80 0000                                   .>..

20400034 <dry_volume>:
20400034:	0000 3f80                                   ...?

20400038 <harm_volume>:
20400038:	0000 3f80                                   ...?

2040003c <key_root>:
2040003c:	0040 0000                                   @...

20400040 <master_volume>:
20400040:	999a 3f19                                   ...?

20400044 <pitch_bend>:
20400044:	0040 0000                                   @...

20400048 <__fdlib_version>:
20400048:	0001 0000                                   ....

2040004c <_impure_ptr>:
2040004c:	0050 2040                                   P.@ 

20400050 <impure_data>:
20400050:	0000 0000 033c 2040 03a4 2040 040c 2040     ....<.@ ..@ ..@ 
	...
204000f8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400108:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400478 <__malloc_av_>:
	...
20400480:	0478 2040 0478 2040 0480 2040 0480 2040     x.@ x.@ ..@ ..@ 
20400490:	0488 2040 0488 2040 0490 2040 0490 2040     ..@ ..@ ..@ ..@ 
204004a0:	0498 2040 0498 2040 04a0 2040 04a0 2040     ..@ ..@ ..@ ..@ 
204004b0:	04a8 2040 04a8 2040 04b0 2040 04b0 2040     ..@ ..@ ..@ ..@ 
204004c0:	04b8 2040 04b8 2040 04c0 2040 04c0 2040     ..@ ..@ ..@ ..@ 
204004d0:	04c8 2040 04c8 2040 04d0 2040 04d0 2040     ..@ ..@ ..@ ..@ 
204004e0:	04d8 2040 04d8 2040 04e0 2040 04e0 2040     ..@ ..@ ..@ ..@ 
204004f0:	04e8 2040 04e8 2040 04f0 2040 04f0 2040     ..@ ..@ ..@ ..@ 
20400500:	04f8 2040 04f8 2040 0500 2040 0500 2040     ..@ ..@ ..@ ..@ 
20400510:	0508 2040 0508 2040 0510 2040 0510 2040     ..@ ..@ ..@ ..@ 
20400520:	0518 2040 0518 2040 0520 2040 0520 2040     ..@ ..@  .@  .@ 
20400530:	0528 2040 0528 2040 0530 2040 0530 2040     (.@ (.@ 0.@ 0.@ 
20400540:	0538 2040 0538 2040 0540 2040 0540 2040     8.@ 8.@ @.@ @.@ 
20400550:	0548 2040 0548 2040 0550 2040 0550 2040     H.@ H.@ P.@ P.@ 
20400560:	0558 2040 0558 2040 0560 2040 0560 2040     X.@ X.@ `.@ `.@ 
20400570:	0568 2040 0568 2040 0570 2040 0570 2040     h.@ h.@ p.@ p.@ 
20400580:	0578 2040 0578 2040 0580 2040 0580 2040     x.@ x.@ ..@ ..@ 
20400590:	0588 2040 0588 2040 0590 2040 0590 2040     ..@ ..@ ..@ ..@ 
204005a0:	0598 2040 0598 2040 05a0 2040 05a0 2040     ..@ ..@ ..@ ..@ 
204005b0:	05a8 2040 05a8 2040 05b0 2040 05b0 2040     ..@ ..@ ..@ ..@ 
204005c0:	05b8 2040 05b8 2040 05c0 2040 05c0 2040     ..@ ..@ ..@ ..@ 
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 
20400870:	0868 2040 0868 2040 0870 2040 0870 2040     h.@ h.@ p.@ p.@ 

20400880 <__malloc_sbrk_base>:
20400880:	ffff ffff                                   ....

20400884 <__malloc_trim_threshold>:
20400884:	0000 0002                                   ....

20400888 <__atexit_recursive_mutex>:
20400888:	f490 2043                                   ..C 

2040088c <__global_locale>:
2040088c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008ac:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008cc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008ec:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040090c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040092c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040094c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040096c:	7161 0040 69f9 0040 0000 0000 81d0 0040     aq@..i@.......@.
2040097c:	81cc 0040 8180 0040 8180 0040 8180 0040     ..@...@...@...@.
2040098c:	8180 0040 8180 0040 8180 0040 8180 0040     ..@...@...@...@.
2040099c:	8180 0040 8180 0040 ffff ffff ffff ffff     ..@...@.........
204009ac:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009d4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
