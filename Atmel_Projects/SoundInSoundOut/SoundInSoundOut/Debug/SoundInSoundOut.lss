
SoundInSoundOut.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000440c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040440c  0040440c  0001440c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20400000  00404414  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000113c  204009d0  00404de4  000209d0  2**2
                  ALLOC
  4 .stack        00002004  20401b0c  00405f20  000209d0  2**0
                  ALLOC
  5 .heap         00000200  20403b10  00407f24  000209d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001720d  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003379  00000000  00000000  00037c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000439d  00000000  00000000  0003afdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000008c8  00000000  00000000  0003f37a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008b8  00000000  00000000  0003fc42  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00022a51  00000000  00000000  000404fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000dfac  00000000  00000000  00062f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00093562  00000000  00000000  00070ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001e78  00000000  00000000  0010445c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	10 3b 40 20 91 10 40 00 8d 10 40 00 8d 10 40 00     .;@ ..@...@...@.
  400010:	8d 10 40 00 8d 10 40 00 8d 10 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	8d 10 40 00 8d 10 40 00 00 00 00 00 8d 10 40 00     ..@...@.......@.
  40003c:	8d 10 40 00 8d 10 40 00 8d 10 40 00 8d 10 40 00     ..@...@...@...@.
  40004c:	8d 10 40 00 8d 10 40 00 8d 10 40 00 8d 10 40 00     ..@...@...@...@.
  40005c:	8d 10 40 00 8d 10 40 00 00 00 00 00 c1 0a 40 00     ..@...@.......@.
  40006c:	d5 0a 40 00 e9 0a 40 00 8d 10 40 00 8d 10 40 00     ..@...@...@...@.
  40007c:	8d 10 40 00 fd 0a 40 00 11 0b 40 00 8d 10 40 00     ..@...@...@...@.
  40008c:	8d 10 40 00 8d 10 40 00 8d 10 40 00 8d 10 40 00     ..@...@...@...@.
  40009c:	8d 10 40 00 8d 10 40 00 8d 10 40 00 8d 10 40 00     ..@...@...@...@.
  4000ac:	8d 10 40 00 8d 10 40 00 8d 10 40 00 8d 10 40 00     ..@...@...@...@.
  4000bc:	8d 10 40 00 8d 10 40 00 8d 10 40 00 8d 10 40 00     ..@...@...@...@.
  4000cc:	8d 10 40 00 00 00 00 00 8d 10 40 00 00 00 00 00     ..@.......@.....
  4000dc:	8d 10 40 00 8d 10 40 00 8d 10 40 00 8d 10 40 00     ..@...@...@...@.
  4000ec:	8d 10 40 00 8d 10 40 00 8d 10 40 00 8d 10 40 00     ..@...@...@...@.
  4000fc:	8d 10 40 00 8d 10 40 00 8d 10 40 00 8d 10 40 00     ..@...@...@...@.
  40010c:	8d 10 40 00 8d 10 40 00 8d 10 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 8d 10 40 00 8d 10 40 00 ad 01 40 00     ......@...@...@.
  40012c:	8d 10 40 00 8d 10 40 00 00 00 00 00 8d 10 40 00     ..@...@.......@.
  40013c:	8d 10 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d0 	.word	0x204009d0
  40015c:	00000000 	.word	0x00000000
  400160:	00404414 	.word	0x00404414

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00404414 	.word	0x00404414
  4001a0:	204009d4 	.word	0x204009d4
  4001a4:	00404414 	.word	0x00404414
  4001a8:	00000000 	.word	0x00000000

004001ac <XDMAC_Handler>:
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4001ac:	4b17      	ldr	r3, [pc, #92]	; (40020c <XDMAC_Handler+0x60>)
  4001ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
void XDMAC_Handler(void)
{
    uint32_t dma_status;
    
    dma_status = xdmac_channel_get_interrupt_status(XDMAC, XDMA_CH_SSC_RX);
    if (dma_status & XDMAC_CIS_BIS)
  4001b0:	f013 0f01 	tst.w	r3, #1
  4001b4:	d00e      	beq.n	4001d4 <XDMAC_Handler+0x28>
    {
		if(inPingMode)
  4001b6:	4b16      	ldr	r3, [pc, #88]	; (400210 <XDMAC_Handler+0x64>)
  4001b8:	681b      	ldr	r3, [r3, #0]
  4001ba:	b1f3      	cbz	r3, 4001fa <XDMAC_Handler+0x4e>
		{
			inBuffer = inPingBuffer; 
  4001bc:	4a15      	ldr	r2, [pc, #84]	; (400214 <XDMAC_Handler+0x68>)
  4001be:	4b16      	ldr	r3, [pc, #88]	; (400218 <XDMAC_Handler+0x6c>)
  4001c0:	601a      	str	r2, [r3, #0]
		}
		else 
		{
			inBuffer = inPongBuffer; 
		}
		inPingMode = !inPingMode; 
  4001c2:	4a13      	ldr	r2, [pc, #76]	; (400210 <XDMAC_Handler+0x64>)
  4001c4:	6813      	ldr	r3, [r2, #0]
  4001c6:	fab3 f383 	clz	r3, r3
  4001ca:	095b      	lsrs	r3, r3, #5
  4001cc:	6013      	str	r3, [r2, #0]
		dataReceived = 1; 
  4001ce:	2201      	movs	r2, #1
  4001d0:	4b12      	ldr	r3, [pc, #72]	; (40021c <XDMAC_Handler+0x70>)
  4001d2:	601a      	str	r2, [r3, #0]
  4001d4:	4b0d      	ldr	r3, [pc, #52]	; (40020c <XDMAC_Handler+0x60>)
  4001d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    }
	
	dma_status = xdmac_channel_get_interrupt_status(XDMAC, XDMA_CH_SSC_TX);
	if (dma_status & XDMAC_CIS_BIS)
  4001da:	f013 0f01 	tst.w	r3, #1
  4001de:	d00b      	beq.n	4001f8 <XDMAC_Handler+0x4c>
	{
		if(outPingMode)
  4001e0:	4b0f      	ldr	r3, [pc, #60]	; (400220 <XDMAC_Handler+0x74>)
  4001e2:	681b      	ldr	r3, [r3, #0]
  4001e4:	b16b      	cbz	r3, 400202 <XDMAC_Handler+0x56>
		{
			outBuffer = outPingBuffer; 
  4001e6:	4a0f      	ldr	r2, [pc, #60]	; (400224 <XDMAC_Handler+0x78>)
  4001e8:	4b0f      	ldr	r3, [pc, #60]	; (400228 <XDMAC_Handler+0x7c>)
  4001ea:	601a      	str	r2, [r3, #0]
		}
		else
		{
			outBuffer = outPongBuffer; 
		}
		outPingMode = !outPingMode; 
  4001ec:	4a0c      	ldr	r2, [pc, #48]	; (400220 <XDMAC_Handler+0x74>)
  4001ee:	6813      	ldr	r3, [r2, #0]
  4001f0:	fab3 f383 	clz	r3, r3
  4001f4:	095b      	lsrs	r3, r3, #5
  4001f6:	6013      	str	r3, [r2, #0]
  4001f8:	4770      	bx	lr
			inBuffer = inPongBuffer; 
  4001fa:	4a0c      	ldr	r2, [pc, #48]	; (40022c <XDMAC_Handler+0x80>)
  4001fc:	4b06      	ldr	r3, [pc, #24]	; (400218 <XDMAC_Handler+0x6c>)
  4001fe:	601a      	str	r2, [r3, #0]
  400200:	e7df      	b.n	4001c2 <XDMAC_Handler+0x16>
			outBuffer = outPongBuffer; 
  400202:	4a0b      	ldr	r2, [pc, #44]	; (400230 <XDMAC_Handler+0x84>)
  400204:	4b08      	ldr	r3, [pc, #32]	; (400228 <XDMAC_Handler+0x7c>)
  400206:	601a      	str	r2, [r3, #0]
  400208:	e7f0      	b.n	4001ec <XDMAC_Handler+0x40>
  40020a:	bf00      	nop
  40020c:	40078000 	.word	0x40078000
  400210:	20400010 	.word	0x20400010
  400214:	204009f0 	.word	0x204009f0
  400218:	2040000c 	.word	0x2040000c
  40021c:	204009ec 	.word	0x204009ec
  400220:	20400018 	.word	0x20400018
  400224:	20401230 	.word	0x20401230
  400228:	20400014 	.word	0x20400014
  40022c:	20400df0 	.word	0x20400df0
  400230:	20401630 	.word	0x20401630

00400234 <configure_xdma>:
}


/********************************** Public Functions **********************************/
void configure_xdma(void)
{
  400234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400238:	b088      	sub	sp, #32
    uint16_t *src;
    
    xdmac_channel_config_t xdmac_channel_cfg = {0};
  40023a:	2420      	movs	r4, #32
  40023c:	4622      	mov	r2, r4
  40023e:	2100      	movs	r1, #0
  400240:	4668      	mov	r0, sp
  400242:	4b27      	ldr	r3, [pc, #156]	; (4002e0 <configure_xdma+0xac>)
  400244:	4798      	blx	r3
    
    /* Initialize and enable DMA controller */
    pmc_enable_periph_clk(ID_XDMAC);
  400246:	203a      	movs	r0, #58	; 0x3a
  400248:	4b26      	ldr	r3, [pc, #152]	; (4002e4 <configure_xdma+0xb0>)
  40024a:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40024c:	4b26      	ldr	r3, [pc, #152]	; (4002e8 <configure_xdma+0xb4>)
  40024e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400252:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400256:	f883 433a 	strb.w	r4, [r3, #826]	; 0x33a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40025a:	605a      	str	r2, [r3, #4]
    NVIC_SetPriority(XDMAC_IRQn ,1);
    NVIC_EnableIRQ(XDMAC_IRQn);
    
    /********** Read Buffer ********/
    /* Initialize channel config */
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  40025c:	4b23      	ldr	r3, [pc, #140]	; (4002ec <configure_xdma+0xb8>)
  40025e:	9303      	str	r3, [sp, #12]
    | XDMAC_CC_DIF_AHB_IF0
    | XDMAC_CC_SAM_FIXED_AM
    | XDMAC_CC_DAM_INCREMENTED_AM
    | XDMAC_CC_PERID(33);
	
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  400260:	4c23      	ldr	r4, [pc, #140]	; (4002f0 <configure_xdma+0xbc>)
  400262:	466a      	mov	r2, sp
  400264:	2100      	movs	r1, #0
  400266:	4620      	mov	r0, r4
  400268:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 40031c <configure_xdma+0xe8>
  40026c:	47c0      	blx	r8
    
    /* Initialize linked list descriptor */
    src = (uint16_t *)&inPingBuffer[0];
    linklist_read[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  40026e:	4b21      	ldr	r3, [pc, #132]	; (4002f4 <configure_xdma+0xc0>)
  400270:	4e21      	ldr	r6, [pc, #132]	; (4002f8 <configure_xdma+0xc4>)
  400272:	605e      	str	r6, [r3, #4]
		| XDMAC_UBC_NDE_FETCH_EN
		| XDMAC_UBC_NSEN_UPDATED
		| XDMAC_CUBC_UBLEN(BUF_SIZE);
    linklist_read[0].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  400274:	4a21      	ldr	r2, [pc, #132]	; (4002fc <configure_xdma+0xc8>)
  400276:	609a      	str	r2, [r3, #8]
    linklist_read[0].mbr_da = (uint32_t)(src);
  400278:	4921      	ldr	r1, [pc, #132]	; (400300 <configure_xdma+0xcc>)
  40027a:	60d9      	str	r1, [r3, #12]
    linklist_read[0].mbr_nda = (uint32_t)&linklist_read[1];
  40027c:	f103 0110 	add.w	r1, r3, #16
  400280:	6019      	str	r1, [r3, #0]
	src = (uint16_t *)&inPongBuffer[0];; 
	linklist_read[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  400282:	615e      	str	r6, [r3, #20]
	    | XDMAC_UBC_NDE_FETCH_EN
	    | XDMAC_UBC_NSEN_UPDATED
	    | XDMAC_CUBC_UBLEN(BUF_SIZE);
	linklist_read[1].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  400284:	619a      	str	r2, [r3, #24]
	linklist_read[1].mbr_da = (uint32_t)(src);
  400286:	4a1f      	ldr	r2, [pc, #124]	; (400304 <configure_xdma+0xd0>)
  400288:	61da      	str	r2, [r3, #28]
	linklist_read[1].mbr_nda = (uint32_t)&linklist_read[0];
  40028a:	611b      	str	r3, [r3, #16]
 */
static inline void xdmac_channel_set_descriptor_control(Xdmac *xdmac, uint32_t channel_num, uint32_t config)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  40028c:	270f      	movs	r7, #15
  40028e:	66e7      	str	r7, [r4, #108]	; 0x6c
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  400290:	f023 0303 	bic.w	r3, r3, #3
  400294:	66a3      	str	r3, [r4, #104]	; 0x68
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  400296:	2501      	movs	r5, #1
  400298:	60e5      	str	r5, [r4, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CIE = mask;
  40029a:	6525      	str	r5, [r4, #80]	; 0x50
    xdmac_enable_interrupt(XDMAC, XDMA_CH_SSC_RX);
    xdmac_channel_enable_interrupt(XDMAC, XDMA_CH_SSC_RX, XDMAC_CIE_BIE);
    
    
    /******* Write buffer *******/
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  40029c:	4b1a      	ldr	r3, [pc, #104]	; (400308 <configure_xdma+0xd4>)
  40029e:	9303      	str	r3, [sp, #12]
    | XDMAC_CC_DIF_AHB_IF1
    | XDMAC_CC_SAM_INCREMENTED_AM
    | XDMAC_CC_DAM_FIXED_AM
    | XDMAC_CC_PERID(32);
	
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  4002a0:	466a      	mov	r2, sp
  4002a2:	4629      	mov	r1, r5
  4002a4:	4620      	mov	r0, r4
  4002a6:	47c0      	blx	r8
    
    src = (uint16_t *)&outPingBuffer[0];
    linklist_write[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002a8:	4b18      	ldr	r3, [pc, #96]	; (40030c <configure_xdma+0xd8>)
  4002aa:	605e      	str	r6, [r3, #4]
		 | XDMAC_UBC_NDE_FETCH_EN
		 | XDMAC_UBC_NSEN_UPDATED
			| XDMAC_CUBC_UBLEN(BUF_SIZE);
    linklist_write[0].mbr_sa = (uint32_t)(src);
  4002ac:	4a18      	ldr	r2, [pc, #96]	; (400310 <configure_xdma+0xdc>)
  4002ae:	609a      	str	r2, [r3, #8]
    linklist_write[0].mbr_da = (uint32_t)&(SSC->SSC_THR);
  4002b0:	4a18      	ldr	r2, [pc, #96]	; (400314 <configure_xdma+0xe0>)
  4002b2:	60da      	str	r2, [r3, #12]
    linklist_write[0].mbr_nda = (uint32_t)&linklist_write[1];
  4002b4:	f103 0110 	add.w	r1, r3, #16
  4002b8:	6019      	str	r1, [r3, #0]
	
	src = (uint16_t *)&outPongBuffer[0];
	linklist_write[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4002ba:	615e      	str	r6, [r3, #20]
	    | XDMAC_UBC_NDE_FETCH_EN
	    | XDMAC_UBC_NSEN_UPDATED
	    | XDMAC_CUBC_UBLEN(BUF_SIZE);
	linklist_write[1].mbr_sa = (uint32_t)(src);
  4002bc:	4916      	ldr	r1, [pc, #88]	; (400318 <configure_xdma+0xe4>)
  4002be:	6199      	str	r1, [r3, #24]
	linklist_write[1].mbr_da = (uint32_t)&(SSC->SSC_THR);
  4002c0:	61da      	str	r2, [r3, #28]
	linklist_write[1].mbr_nda = (uint32_t)&linklist_write[0];
  4002c2:	611b      	str	r3, [r3, #16]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  4002c4:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  4002c8:	f023 0303 	bic.w	r3, r3, #3
  4002cc:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  4002d0:	2302      	movs	r3, #2
  4002d2:	60e3      	str	r3, [r4, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CIE = mask;
  4002d4:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
    xdmac_channel_set_descriptor_addr(XDMAC, XDMA_CH_SSC_TX, (uint32_t)(&linklist_write[0]), 0);
    
    xdmac_enable_interrupt(XDMAC, XDMA_CH_SSC_TX);
    xdmac_channel_enable_interrupt(XDMAC, XDMA_CH_SSC_TX, XDMAC_CIE_BIE);
    
}
  4002d8:	b008      	add	sp, #32
  4002da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002de:	bf00      	nop
  4002e0:	004014f9 	.word	0x004014f9
  4002e4:	00400c45 	.word	0x00400c45
  4002e8:	e000e100 	.word	0xe000e100
  4002ec:	21042801 	.word	0x21042801
  4002f0:	40078000 	.word	0x40078000
  4002f4:	204011f0 	.word	0x204011f0
  4002f8:	0b000200 	.word	0x0b000200
  4002fc:	40004020 	.word	0x40004020
  400300:	204009f0 	.word	0x204009f0
  400304:	20400df0 	.word	0x20400df0
  400308:	20014811 	.word	0x20014811
  40030c:	20401210 	.word	0x20401210
  400310:	20401230 	.word	0x20401230
  400314:	40004024 	.word	0x40004024
  400318:	20401630 	.word	0x20401630
  40031c:	00401051 	.word	0x00401051

00400320 <configure_ssc>:

#include <asf.h>
#include "WM8904_Driver.h"

void configure_ssc(void)
{
  400320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400324:	b09c      	sub	sp, #112	; 0x70
	clock_opt_t tx_clk_option, rx_clk_option;
	data_frame_opt_t tx_data_frame_option, rx_data_frame_option;

	/* Initialize clock */
	pmc_enable_periph_clk(ID_SSC);
  400326:	2016      	movs	r0, #22
  400328:	4b24      	ldr	r3, [pc, #144]	; (4003bc <configure_ssc+0x9c>)
  40032a:	4798      	blx	r3

	/* Reset SSC */
	ssc_reset(SSC);
  40032c:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400330:	4b23      	ldr	r3, [pc, #140]	; (4003c0 <configure_ssc+0xa0>)
  400332:	4798      	blx	r3

	/* Transmitter clock mode configuration. */
	tx_clk_option.ul_cks = SSC_TCMR_CKS_TK;
  400334:	2302      	movs	r3, #2
  400336:	9315      	str	r3, [sp, #84]	; 0x54
	tx_clk_option.ul_cko = SSC_TCMR_CKO_NONE;
  400338:	2400      	movs	r4, #0
  40033a:	9416      	str	r4, [sp, #88]	; 0x58
	tx_clk_option.ul_cki = 0;
  40033c:	9417      	str	r4, [sp, #92]	; 0x5c
	tx_clk_option.ul_ckg = SSC_TCMR_CKG_CONTINUOUS;
  40033e:	9418      	str	r4, [sp, #96]	; 0x60
	tx_clk_option.ul_start_sel = SSC_TCMR_START_TF_EDGE;
  400340:	f44f 68e0 	mov.w	r8, #1792	; 0x700
  400344:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
	tx_clk_option.ul_sttdly = 1;
  400348:	2601      	movs	r6, #1
  40034a:	961a      	str	r6, [sp, #104]	; 0x68
	tx_clk_option.ul_period = BITS_BY_SLOT - 1;
  40034c:	250f      	movs	r5, #15
  40034e:	9519      	str	r5, [sp, #100]	; 0x64
	/* Transmitter frame mode configuration. */
	tx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
  400350:	9507      	str	r5, [sp, #28]
	tx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  400352:	2780      	movs	r7, #128	; 0x80
  400354:	9708      	str	r7, [sp, #32]
	tx_data_frame_option.ul_datnb = 0;
  400356:	9409      	str	r4, [sp, #36]	; 0x24
	tx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;
  400358:	950a      	str	r5, [sp, #40]	; 0x28
	tx_data_frame_option.ul_fslen_ext = 0;
  40035a:	940b      	str	r4, [sp, #44]	; 0x2c
	tx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  40035c:	940c      	str	r4, [sp, #48]	; 0x30
	tx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  40035e:	940d      	str	r4, [sp, #52]	; 0x34
	/* Configure the SSC transmitter to I2S mode. */
	ssc_set_transmitter(SSC, &tx_clk_option, &tx_data_frame_option);
  400360:	aa07      	add	r2, sp, #28
  400362:	a915      	add	r1, sp, #84	; 0x54
  400364:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400368:	4b16      	ldr	r3, [pc, #88]	; (4003c4 <configure_ssc+0xa4>)
  40036a:	4798      	blx	r3

	/* Receiver clock mode configuration. */
	rx_clk_option.ul_cks = SSC_RCMR_CKS_TK;
  40036c:	960e      	str	r6, [sp, #56]	; 0x38
	rx_clk_option.ul_cko = SSC_RCMR_CKO_NONE;
  40036e:	940f      	str	r4, [sp, #60]	; 0x3c
	rx_clk_option.ul_cki = SSC_RCMR_CKI;
  400370:	2320      	movs	r3, #32
  400372:	9310      	str	r3, [sp, #64]	; 0x40
	rx_clk_option.ul_ckg = SSC_RCMR_CKG_CONTINUOUS;
  400374:	9411      	str	r4, [sp, #68]	; 0x44
	rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_EDGE;
  400376:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
	rx_clk_option.ul_sttdly = 1;	
  40037a:	9613      	str	r6, [sp, #76]	; 0x4c
	rx_clk_option.ul_period = BITS_BY_SLOT;	
  40037c:	2310      	movs	r3, #16
  40037e:	9312      	str	r3, [sp, #72]	; 0x48
	/* Receiver frame mode configuration. */
	rx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
  400380:	9500      	str	r5, [sp, #0]
	rx_data_frame_option.ul_msbf = SSC_RFMR_MSBF;
  400382:	9701      	str	r7, [sp, #4]
	rx_data_frame_option.ul_datnb = 0;
  400384:	9402      	str	r4, [sp, #8]
	rx_data_frame_option.ul_fslen = BITS_BY_SLOT - 1;	
  400386:	9503      	str	r5, [sp, #12]
	rx_data_frame_option.ul_fslen_ext = 0;
  400388:	9404      	str	r4, [sp, #16]
	rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  40038a:	9405      	str	r4, [sp, #20]
	rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  40038c:	9406      	str	r4, [sp, #24]
	/* Configure the SSC transmitter to I2S mode. */
	ssc_set_receiver(SSC, &rx_clk_option, &rx_data_frame_option);
  40038e:	466a      	mov	r2, sp
  400390:	a90e      	add	r1, sp, #56	; 0x38
  400392:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400396:	4b0c      	ldr	r3, [pc, #48]	; (4003c8 <configure_ssc+0xa8>)
  400398:	4798      	blx	r3

	/* Disable transmitter first */
	ssc_disable_tx(SSC);
  40039a:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40039e:	4b0b      	ldr	r3, [pc, #44]	; (4003cc <configure_ssc+0xac>)
  4003a0:	4798      	blx	r3
	ssc_disable_rx(SSC);
  4003a2:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4003a6:	4b0a      	ldr	r3, [pc, #40]	; (4003d0 <configure_ssc+0xb0>)
  4003a8:	4798      	blx	r3

	/* Disable All Interrupt */
	ssc_disable_interrupt(SSC, 0xFFFFFFFF);
  4003aa:	f04f 31ff 	mov.w	r1, #4294967295
  4003ae:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4003b2:	4b08      	ldr	r3, [pc, #32]	; (4003d4 <configure_ssc+0xb4>)
  4003b4:	4798      	blx	r3
}
  4003b6:	b01c      	add	sp, #112	; 0x70
  4003b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4003bc:	00400c45 	.word	0x00400c45
  4003c0:	00400d05 	.word	0x00400d05
  4003c4:	00400da9 	.word	0x00400da9
  4003c8:	00400d35 	.word	0x00400d35
  4003cc:	00400d2d 	.word	0x00400d2d
  4003d0:	00400d1f 	.word	0x00400d1f
  4003d4:	00400e1d 	.word	0x00400e1d

004003d8 <configure_codec>:


void configure_codec(void)
{
  4003d8:	b570      	push	{r4, r5, r6, lr}
	uint16_t data = 0;
	/* check that WM8904 is present */
	wm8904_write_register(WM8904_SW_RESET_AND_ID, 0xFFFF);
  4003da:	f64f 71ff 	movw	r1, #65535	; 0xffff
  4003de:	2000      	movs	r0, #0
  4003e0:	4b40      	ldr	r3, [pc, #256]	; (4004e4 <configure_codec+0x10c>)
  4003e2:	4798      	blx	r3
	data = wm8904_read_register(WM8904_SW_RESET_AND_ID);
  4003e4:	2000      	movs	r0, #0
  4003e6:	4b40      	ldr	r3, [pc, #256]	; (4004e8 <configure_codec+0x110>)
  4003e8:	4798      	blx	r3
	if(data != 0x8904) {
  4003ea:	f648 1304 	movw	r3, #35076	; 0x8904
  4003ee:	4298      	cmp	r0, r3
  4003f0:	d003      	beq.n	4003fa <configure_codec+0x22>
		printf("WM8904 not found!\n\r");
  4003f2:	483e      	ldr	r0, [pc, #248]	; (4004ec <configure_codec+0x114>)
  4003f4:	4b3e      	ldr	r3, [pc, #248]	; (4004f0 <configure_codec+0x118>)
  4003f6:	4798      	blx	r3
  4003f8:	e7fe      	b.n	4003f8 <configure_codec+0x20>
		while(1);
	}

	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS);	
  4003fa:	2108      	movs	r1, #8
  4003fc:	2004      	movs	r0, #4
  4003fe:	4c39      	ldr	r4, [pc, #228]	; (4004e4 <configure_codec+0x10c>)
  400400:	47a0      	blx	r4
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |	
  400402:	2147      	movs	r1, #71	; 0x47
  400404:	2005      	movs	r0, #5
  400406:	47a0      	blx	r4
	WM8904_VMID_RES_FAST | WM8904_VMID_ENA);
	delay_ms(5);
  400408:	4e3a      	ldr	r6, [pc, #232]	; (4004f4 <configure_codec+0x11c>)
  40040a:	4630      	mov	r0, r6
  40040c:	4d3a      	ldr	r5, [pc, #232]	; (4004f8 <configure_codec+0x120>)
  40040e:	47a8      	blx	r5
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |
  400410:	2143      	movs	r1, #67	; 0x43
  400412:	2005      	movs	r0, #5
  400414:	47a0      	blx	r4
	WM8904_VMID_RES_NORMAL | WM8904_VMID_ENA);
	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS | WM8904_BIAS_ENA);
  400416:	2109      	movs	r1, #9
  400418:	2004      	movs	r0, #4
  40041a:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_0, WM8904_INL_ENA | WM8904_INR_ENA);
  40041c:	2103      	movs	r1, #3
  40041e:	200c      	movs	r0, #12
  400420:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_2, WM8904_HPL_PGA_ENA | WM8904_HPR_PGA_ENA);
  400422:	2103      	movs	r1, #3
  400424:	200e      	movs	r0, #14
  400426:	47a0      	blx	r4
	wm8904_write_register(WM8904_DAC_DIGITAL_1, WM8904_DEEMPH(0));
  400428:	2100      	movs	r1, #0
  40042a:	2021      	movs	r0, #33	; 0x21
  40042c:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_OUT12_ZC, 0x0000);
  40042e:	2100      	movs	r1, #0
  400430:	203d      	movs	r0, #61	; 0x3d
  400432:	47a0      	blx	r4
	wm8904_write_register(WM8904_CHARGE_PUMP_0, WM8904_CP_ENA);
  400434:	2101      	movs	r1, #1
  400436:	2062      	movs	r0, #98	; 0x62
  400438:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLASS_W_0, WM8904_CP_DYN_PWR);
  40043a:	2101      	movs	r1, #1
  40043c:	2068      	movs	r0, #104	; 0x68
  40043e:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_1, 0x0000);
  400440:	2100      	movs	r1, #0
  400442:	2074      	movs	r0, #116	; 0x74
  400444:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_2, WM8904_FLL_OUTDIV(7)| WM8904_FLL_FRATIO(4));
  400446:	f240 7104 	movw	r1, #1796	; 0x704
  40044a:	2075      	movs	r0, #117	; 0x75
  40044c:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_3, WM8904_FLL_K(0x8000));
  40044e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  400452:	2076      	movs	r0, #118	; 0x76
  400454:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_4, WM8904_FLL_N(0xBB));
  400456:	f44f 51bb 	mov.w	r1, #5984	; 0x1760
  40045a:	2077      	movs	r0, #119	; 0x77
  40045c:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_1, WM8904_FLL_FRACN_ENA | WM8904_FLL_ENA);
  40045e:	2105      	movs	r1, #5
  400460:	2074      	movs	r0, #116	; 0x74
  400462:	47a0      	blx	r4
	delay_ms(5);
  400464:	4630      	mov	r0, r6
  400466:	47a8      	blx	r5
	wm8904_write_register(WM8904_CLOCK_RATES_1, WM8904_CLK_SYS_RATE(3) | WM8904_SAMPLE_RATE(5));
  400468:	f640 4105 	movw	r1, #3077	; 0xc05
  40046c:	2015      	movs	r0, #21
  40046e:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLOCK_RATES_0, 0x0000);
  400470:	2100      	movs	r1, #0
  400472:	2014      	movs	r0, #20
  400474:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLOCK_RATES_2,
  400476:	f244 0106 	movw	r1, #16390	; 0x4006
  40047a:	2016      	movs	r0, #22
  40047c:	47a0      	blx	r4
	WM8904_SYSCLK_SRC | WM8904_CLK_SYS_ENA | WM8904_CLK_DSP_ENA);
	wm8904_write_register(WM8904_AUDIO_INTERFACE_1, WM8904_BCLK_DIR | WM8904_AIF_FMT_I2S); 
  40047e:	2142      	movs	r1, #66	; 0x42
  400480:	2019      	movs	r0, #25
  400482:	47a0      	blx	r4
	wm8904_write_register(WM8904_AUDIO_INTERFACE_2, WM8904_BCLK_DIV(8));
  400484:	2108      	movs	r1, #8
  400486:	201a      	movs	r0, #26
  400488:	47a0      	blx	r4
	wm8904_write_register(WM8904_AUDIO_INTERFACE_3, WM8904_LRCLK_DIR | WM8904_LRCLK_RATE(0x20));
  40048a:	f44f 6102 	mov.w	r1, #2080	; 0x820
  40048e:	201b      	movs	r0, #27
  400490:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_6,
  400492:	210f      	movs	r1, #15
  400494:	2012      	movs	r0, #18
  400496:	47a0      	blx	r4
	WM8904_DACL_ENA | WM8904_DACR_ENA |
	WM8904_ADCL_ENA | WM8904_ADCR_ENA);
	delay_ms(5);
  400498:	4630      	mov	r0, r6
  40049a:	47a8      	blx	r5
	wm8904_write_register(WM8904_ANALOGUE_LEFT_INPUT_0, WM8904_LIN_VOL(0x10));
  40049c:	2110      	movs	r1, #16
  40049e:	202c      	movs	r0, #44	; 0x2c
  4004a0:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_RIGHT_INPUT_0, WM8904_RIN_VOL(0x10));
  4004a2:	2110      	movs	r1, #16
  4004a4:	202d      	movs	r0, #45	; 0x2d
  4004a6:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  4004a8:	2111      	movs	r1, #17
  4004aa:	205a      	movs	r0, #90	; 0x5a
  4004ac:	47a0      	blx	r4
	WM8904_HPL_ENA | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  4004ae:	2133      	movs	r1, #51	; 0x33
  4004b0:	205a      	movs	r0, #90	; 0x5a
  4004b2:	47a0      	blx	r4
	WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_DC_SERVO_0,
  4004b4:	210f      	movs	r1, #15
  4004b6:	2043      	movs	r0, #67	; 0x43
  4004b8:	47a0      	blx	r4
	WM8904_DCS_ENA_CHAN_3 | WM8904_DCS_ENA_CHAN_2 |
	WM8904_DCS_ENA_CHAN_1 | WM8904_DCS_ENA_CHAN_0);
	wm8904_write_register(WM8904_DC_SERVO_1,
  4004ba:	21f0      	movs	r1, #240	; 0xf0
  4004bc:	2044      	movs	r0, #68	; 0x44
  4004be:	47a0      	blx	r4
	WM8904_DCS_TRIG_STARTUP_3 | WM8904_DCS_TRIG_STARTUP_2 |
	WM8904_DCS_TRIG_STARTUP_1 | WM8904_DCS_TRIG_STARTUP_0);
	delay_ms(100);
  4004c0:	4e0e      	ldr	r6, [pc, #56]	; (4004fc <configure_codec+0x124>)
  4004c2:	4630      	mov	r0, r6
  4004c4:	47a8      	blx	r5
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  4004c6:	2177      	movs	r1, #119	; 0x77
  4004c8:	205a      	movs	r0, #90	; 0x5a
  4004ca:	47a0      	blx	r4
	WM8904_HPL_ENA_OUTP | WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_ENA_OUTP | WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  4004cc:	21ff      	movs	r1, #255	; 0xff
  4004ce:	205a      	movs	r0, #90	; 0x5a
  4004d0:	47a0      	blx	r4
	WM8904_HPL_RMV_SHORT | WM8904_HPL_ENA_OUTP | WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_RMV_SHORT | WM8904_HPR_ENA_OUTP | WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_OUT1_LEFT, WM8904_HPOUT_VU | WM8904_HPOUTL_VOL(0x39));
  4004d2:	21b9      	movs	r1, #185	; 0xb9
  4004d4:	2039      	movs	r0, #57	; 0x39
  4004d6:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_OUT1_RIGHT, WM8904_HPOUT_VU | WM8904_HPOUTR_VOL(0x39));
  4004d8:	21b9      	movs	r1, #185	; 0xb9
  4004da:	203a      	movs	r0, #58	; 0x3a
  4004dc:	47a0      	blx	r4
	delay_ms(100);
  4004de:	4630      	mov	r0, r6
  4004e0:	47a8      	blx	r5
  4004e2:	bd70      	pop	{r4, r5, r6, pc}
  4004e4:	00400759 	.word	0x00400759
  4004e8:	00400795 	.word	0x00400795
  4004ec:	00404248 	.word	0x00404248
  4004f0:	004014d1 	.word	0x004014d1
  4004f4:	0001ede1 	.word	0x0001ede1
  4004f8:	20400001 	.word	0x20400001
  4004fc:	00269593 	.word	0x00269593

00400500 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400500:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400502:	4810      	ldr	r0, [pc, #64]	; (400544 <sysclk_init+0x44>)
  400504:	4b10      	ldr	r3, [pc, #64]	; (400548 <sysclk_init+0x48>)
  400506:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400508:	213e      	movs	r1, #62	; 0x3e
  40050a:	2000      	movs	r0, #0
  40050c:	4b0f      	ldr	r3, [pc, #60]	; (40054c <sysclk_init+0x4c>)
  40050e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400510:	4c0f      	ldr	r4, [pc, #60]	; (400550 <sysclk_init+0x50>)
  400512:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400514:	2800      	cmp	r0, #0
  400516:	d0fc      	beq.n	400512 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400518:	4b0e      	ldr	r3, [pc, #56]	; (400554 <sysclk_init+0x54>)
  40051a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40051c:	4a0e      	ldr	r2, [pc, #56]	; (400558 <sysclk_init+0x58>)
  40051e:	4b0f      	ldr	r3, [pc, #60]	; (40055c <sysclk_init+0x5c>)
  400520:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400522:	4c0f      	ldr	r4, [pc, #60]	; (400560 <sysclk_init+0x60>)
  400524:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400526:	2800      	cmp	r0, #0
  400528:	d0fc      	beq.n	400524 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  40052a:	2002      	movs	r0, #2
  40052c:	4b0d      	ldr	r3, [pc, #52]	; (400564 <sysclk_init+0x64>)
  40052e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400530:	2010      	movs	r0, #16
  400532:	4b0d      	ldr	r3, [pc, #52]	; (400568 <sysclk_init+0x68>)
  400534:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400536:	4b0d      	ldr	r3, [pc, #52]	; (40056c <sysclk_init+0x6c>)
  400538:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40053a:	480d      	ldr	r0, [pc, #52]	; (400570 <sysclk_init+0x70>)
  40053c:	4b02      	ldr	r3, [pc, #8]	; (400548 <sysclk_init+0x48>)
  40053e:	4798      	blx	r3
  400540:	bd10      	pop	{r4, pc}
  400542:	bf00      	nop
  400544:	11e1a300 	.word	0x11e1a300
  400548:	00401265 	.word	0x00401265
  40054c:	00400bc1 	.word	0x00400bc1
  400550:	00400c15 	.word	0x00400c15
  400554:	00400c25 	.word	0x00400c25
  400558:	20183f01 	.word	0x20183f01
  40055c:	400e0600 	.word	0x400e0600
  400560:	00400c35 	.word	0x00400c35
  400564:	00400b25 	.word	0x00400b25
  400568:	00400b5d 	.word	0x00400b5d
  40056c:	00401159 	.word	0x00401159
  400570:	08f0d180 	.word	0x08f0d180

00400574 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400578:	b980      	cbnz	r0, 40059c <_read+0x28>
  40057a:	460c      	mov	r4, r1
  40057c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40057e:	2a00      	cmp	r2, #0
  400580:	dd0f      	ble.n	4005a2 <_read+0x2e>
  400582:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400584:	4e08      	ldr	r6, [pc, #32]	; (4005a8 <_read+0x34>)
  400586:	4d09      	ldr	r5, [pc, #36]	; (4005ac <_read+0x38>)
  400588:	6830      	ldr	r0, [r6, #0]
  40058a:	4621      	mov	r1, r4
  40058c:	682b      	ldr	r3, [r5, #0]
  40058e:	4798      	blx	r3
		ptr++;
  400590:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400592:	42bc      	cmp	r4, r7
  400594:	d1f8      	bne.n	400588 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400596:	4640      	mov	r0, r8
  400598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40059c:	f04f 38ff 	mov.w	r8, #4294967295
  4005a0:	e7f9      	b.n	400596 <_read+0x22>
	for (; len > 0; --len) {
  4005a2:	4680      	mov	r8, r0
  4005a4:	e7f7      	b.n	400596 <_read+0x22>
  4005a6:	bf00      	nop
  4005a8:	20401ae0 	.word	0x20401ae0
  4005ac:	20401ad8 	.word	0x20401ad8

004005b0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4005b0:	3801      	subs	r0, #1
  4005b2:	2802      	cmp	r0, #2
  4005b4:	d815      	bhi.n	4005e2 <_write+0x32>
{
  4005b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4005ba:	460e      	mov	r6, r1
  4005bc:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4005be:	b19a      	cbz	r2, 4005e8 <_write+0x38>
  4005c0:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4005c2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4005fc <_write+0x4c>
  4005c6:	4f0c      	ldr	r7, [pc, #48]	; (4005f8 <_write+0x48>)
  4005c8:	f8d8 0000 	ldr.w	r0, [r8]
  4005cc:	f815 1b01 	ldrb.w	r1, [r5], #1
  4005d0:	683b      	ldr	r3, [r7, #0]
  4005d2:	4798      	blx	r3
  4005d4:	2800      	cmp	r0, #0
  4005d6:	db0a      	blt.n	4005ee <_write+0x3e>
  4005d8:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4005da:	3c01      	subs	r4, #1
  4005dc:	d1f4      	bne.n	4005c8 <_write+0x18>
  4005de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4005e2:	f04f 30ff 	mov.w	r0, #4294967295
  4005e6:	4770      	bx	lr
	for (; len != 0; --len) {
  4005e8:	4610      	mov	r0, r2
  4005ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4005ee:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4005f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4005f6:	bf00      	nop
  4005f8:	20401adc 	.word	0x20401adc
  4005fc:	20401ae0 	.word	0x20401ae0

00400600 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400600:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400602:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400606:	4b4d      	ldr	r3, [pc, #308]	; (40073c <board_init+0x13c>)
  400608:	605a      	str	r2, [r3, #4]
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40060a:	f5a3 6345 	sub.w	r3, r3, #3152	; 0xc50
  40060e:	4a4c      	ldr	r2, [pc, #304]	; (400740 <board_init+0x140>)
  400610:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400612:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
  400616:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400618:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40061c:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400620:	4b48      	ldr	r3, [pc, #288]	; (400744 <board_init+0x144>)
  400622:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400626:	f022 0201 	bic.w	r2, r2, #1
  40062a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  40062e:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400632:	f022 0201 	bic.w	r2, r2, #1
  400636:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  40063a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40063e:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400642:	200a      	movs	r0, #10
  400644:	4c40      	ldr	r4, [pc, #256]	; (400748 <board_init+0x148>)
  400646:	47a0      	blx	r4
  400648:	200b      	movs	r0, #11
  40064a:	47a0      	blx	r4
  40064c:	200c      	movs	r0, #12
  40064e:	47a0      	blx	r4
  400650:	2010      	movs	r0, #16
  400652:	47a0      	blx	r4
  400654:	2011      	movs	r0, #17
  400656:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400658:	4b3c      	ldr	r3, [pc, #240]	; (40074c <board_init+0x14c>)
  40065a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40065e:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400660:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400664:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400666:	493a      	ldr	r1, [pc, #232]	; (400750 <board_init+0x150>)
  400668:	f44f 7200 	mov.w	r2, #512	; 0x200
  40066c:	610a      	str	r2, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40066e:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400672:	630a      	str	r2, [r1, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400674:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400676:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40067a:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40067c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400680:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400682:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400684:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400688:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40068a:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  40068e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400690:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400692:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  400696:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400698:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40069c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4006a0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4006a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4006a8:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4006aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4006ae:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4006b0:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4006b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4006b6:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4006b8:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4006bc:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4006be:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4006c0:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4006c4:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4006c6:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4006c8:	4922      	ldr	r1, [pc, #136]	; (400754 <board_init+0x154>)
  4006ca:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
  4006ce:	f042 0210 	orr.w	r2, r2, #16
  4006d2:	f8c1 2114 	str.w	r2, [r1, #276]	; 0x114
		base->PIO_PUDR = mask;
  4006d6:	f501 21b2 	add.w	r1, r1, #364544	; 0x59000
  4006da:	2210      	movs	r2, #16
  4006dc:	660a      	str	r2, [r1, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4006de:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
		base->PIO_MDDR = mask;
  4006e2:	654a      	str	r2, [r1, #84]	; 0x54
		base->PIO_IFDR = mask;
  4006e4:	624a      	str	r2, [r1, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4006e6:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4006ea:	6f08      	ldr	r0, [r1, #112]	; 0x70
  4006ec:	4310      	orrs	r0, r2
  4006ee:	6708      	str	r0, [r1, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4006f0:	6f48      	ldr	r0, [r1, #116]	; 0x74
  4006f2:	4310      	orrs	r0, r2
  4006f4:	6748      	str	r0, [r1, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4006f6:	604a      	str	r2, [r1, #4]
		base->PIO_PUDR = mask;
  4006f8:	2108      	movs	r1, #8
  4006fa:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4006fc:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400700:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400702:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400704:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400708:	6f18      	ldr	r0, [r3, #112]	; 0x70
  40070a:	f020 0008 	bic.w	r0, r0, #8
  40070e:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400710:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400712:	f020 0008 	bic.w	r0, r0, #8
  400716:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400718:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  40071a:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40071c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400720:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400722:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400724:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400728:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40072a:	f021 0110 	bic.w	r1, r1, #16
  40072e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400730:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400732:	f021 0110 	bic.w	r1, r1, #16
  400736:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400738:	605a      	str	r2, [r3, #4]
  40073a:	bd10      	pop	{r4, pc}
  40073c:	400e1850 	.word	0x400e1850
  400740:	5a00080c 	.word	0x5a00080c
  400744:	e000ed00 	.word	0xe000ed00
  400748:	00400c45 	.word	0x00400c45
  40074c:	400e0e00 	.word	0x400e0e00
  400750:	400e1200 	.word	0x400e1200
  400754:	40088000 	.word	0x40088000

00400758 <wm8904_write_register>:
 *
 * \param uc_register_address Register address to write
 * \param us_data Data to write.
 */
void wm8904_write_register(uint8_t uc_register_address, uint16_t us_data)
{
  400758:	b500      	push	{lr}
  40075a:	b087      	sub	sp, #28
	uint8_t uc_temp_data[2];
	twihs_packet_t packet;

	uc_temp_data[0] = (us_data & 0xff00) >> 8;
  40075c:	0a0b      	lsrs	r3, r1, #8
  40075e:	f88d 3014 	strb.w	r3, [sp, #20]
	uc_temp_data[1] = us_data & 0xff;
  400762:	f88d 1015 	strb.w	r1, [sp, #21]

	packet.addr[0]     = uc_register_address;
  400766:	f88d 0000 	strb.w	r0, [sp]
	packet.addr_length = 0x1;
  40076a:	2301      	movs	r3, #1
  40076c:	9301      	str	r3, [sp, #4]
	packet.buffer      = uc_temp_data;
  40076e:	ab05      	add	r3, sp, #20
  400770:	9302      	str	r3, [sp, #8]
	packet.length      = 0x2;
  400772:	2302      	movs	r3, #2
  400774:	9303      	str	r3, [sp, #12]
	packet.chip        = WM8904_SLAVE_ADDRESS;
  400776:	231a      	movs	r3, #26
  400778:	f88d 3010 	strb.w	r3, [sp, #16]

	twihs_master_write(WM8904_TWIHS, &packet);
  40077c:	4669      	mov	r1, sp
  40077e:	4803      	ldr	r0, [pc, #12]	; (40078c <wm8904_write_register+0x34>)
  400780:	4b03      	ldr	r3, [pc, #12]	; (400790 <wm8904_write_register+0x38>)
  400782:	4798      	blx	r3
}
  400784:	b007      	add	sp, #28
  400786:	f85d fb04 	ldr.w	pc, [sp], #4
  40078a:	bf00      	nop
  40078c:	40018000 	.word	0x40018000
  400790:	00400fb1 	.word	0x00400fb1

00400794 <wm8904_read_register>:
 *
 * \param uc_register_address Register address to write
 * \retun Register value.
 */
uint16_t wm8904_read_register(uint8_t uc_register_address)
{
  400794:	b500      	push	{lr}
  400796:	b087      	sub	sp, #28
	uint8_t uc_temp_data[2];
	twihs_packet_t packet;
	uint16_t us_data;

	packet.addr[0]     = uc_register_address;
  400798:	f88d 0000 	strb.w	r0, [sp]
	packet.addr_length = 0x1;
  40079c:	2301      	movs	r3, #1
  40079e:	9301      	str	r3, [sp, #4]
	packet.buffer      = uc_temp_data;
  4007a0:	ab05      	add	r3, sp, #20
  4007a2:	9302      	str	r3, [sp, #8]
	packet.length      = 0x2;
  4007a4:	2302      	movs	r3, #2
  4007a6:	9303      	str	r3, [sp, #12]
	packet.chip        = WM8904_SLAVE_ADDRESS;
  4007a8:	231a      	movs	r3, #26
  4007aa:	f88d 3010 	strb.w	r3, [sp, #16]

	twihs_master_read(WM8904_TWIHS, &packet);
  4007ae:	4669      	mov	r1, sp
  4007b0:	4805      	ldr	r0, [pc, #20]	; (4007c8 <wm8904_read_register+0x34>)
  4007b2:	4b06      	ldr	r3, [pc, #24]	; (4007cc <wm8904_read_register+0x38>)
  4007b4:	4798      	blx	r3
	us_data = (((uint16_t)uc_temp_data[0] << 8) & 0xff00) | uc_temp_data[1];
  4007b6:	f89d 0014 	ldrb.w	r0, [sp, #20]
  4007ba:	f89d 3015 	ldrb.w	r3, [sp, #21]

	return us_data;
}
  4007be:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  4007c2:	b007      	add	sp, #28
  4007c4:	f85d fb04 	ldr.w	pc, [sp], #4
  4007c8:	40018000 	.word	0x40018000
  4007cc:	00400f05 	.word	0x00400f05

004007d0 <wm8904_twi_init>:
 * \brief Initialize TWIHS connect to WM8904.
 *
 * \retun TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t wm8904_twi_init(void)
{
  4007d0:	b510      	push	{r4, lr}
  4007d2:	b084      	sub	sp, #16
	pio_configure_pin(WM8904_TK_PIO, WM8904_TK_FLAGS);
  4007d4:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4007d8:	2021      	movs	r0, #33	; 0x21
  4007da:	4c15      	ldr	r4, [pc, #84]	; (400830 <wm8904_twi_init+0x60>)
  4007dc:	47a0      	blx	r4
	pio_configure_pin(WM8904_TF_PIO, WM8904_TF_FLAGS);
  4007de:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4007e2:	2020      	movs	r0, #32
  4007e4:	47a0      	blx	r4
	pio_configure_pin(WM8904_TD_PIO, WM8904_TD_FLAGS);
  4007e6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4007ea:	207a      	movs	r0, #122	; 0x7a
  4007ec:	47a0      	blx	r4
	pio_configure_pin(WM8904_RK_PIO, WM8904_RK_FLAGS);
  4007ee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4007f2:	2016      	movs	r0, #22
  4007f4:	47a0      	blx	r4
	pio_configure_pin(WM8904_RF_PIO, WM8904_RF_FLAGS);
  4007f6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4007fa:	2078      	movs	r0, #120	; 0x78
  4007fc:	47a0      	blx	r4
	pio_configure_pin(WM8904_RD_PIO, WM8904_RD_FLAGS);
  4007fe:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400802:	200a      	movs	r0, #10
  400804:	47a0      	blx	r4
	pio_configure_pin(WM8904_PCK2_PIO, WM8904_PCK2_FLAGS);
  400806:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40080a:	2012      	movs	r0, #18
  40080c:	47a0      	blx	r4

	twihs_options_t opt;
	opt.master_clk = sysclk_get_cpu_hz();
	opt.speed = WM8904_TWIHS_CLK;
  40080e:	4b09      	ldr	r3, [pc, #36]	; (400834 <wm8904_twi_init+0x64>)
  400810:	9302      	str	r3, [sp, #8]
typedef twihs_packet_t twihs_package_t;

static inline uint32_t twihs_master_setup(twihs_master_t p_twihs,
		twihs_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
  400812:	4b09      	ldr	r3, [pc, #36]	; (400838 <wm8904_twi_init+0x68>)
  400814:	9301      	str	r3, [sp, #4]
	p_opt->smbus      = 0;
  400816:	2300      	movs	r3, #0
  400818:	f88d 300d 	strb.w	r3, [sp, #13]
  40081c:	2013      	movs	r0, #19
  40081e:	4b07      	ldr	r3, [pc, #28]	; (40083c <wm8904_twi_init+0x6c>)
  400820:	4798      	blx	r3
#endif		
	} else {
		// Do Nothing
	}
#endif
	return (twihs_master_init(p_twihs, p_opt));
  400822:	a901      	add	r1, sp, #4
  400824:	4806      	ldr	r0, [pc, #24]	; (400840 <wm8904_twi_init+0x70>)
  400826:	4b07      	ldr	r3, [pc, #28]	; (400844 <wm8904_twi_init+0x74>)
  400828:	4798      	blx	r3
	return twihs_master_setup(WM8904_TWIHS, &opt);
}
  40082a:	b004      	add	sp, #16
  40082c:	bd10      	pop	{r4, pc}
  40082e:	bf00      	nop
  400830:	00400941 	.word	0x00400941
  400834:	00061a80 	.word	0x00061a80
  400838:	047868c0 	.word	0x047868c0
  40083c:	00400c45 	.word	0x00400c45
  400840:	40018000 	.word	0x40018000
  400844:	00400ed1 	.word	0x00400ed1

00400848 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400848:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40084a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40084e:	d03a      	beq.n	4008c6 <pio_set_peripheral+0x7e>
  400850:	d813      	bhi.n	40087a <pio_set_peripheral+0x32>
  400852:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400856:	d025      	beq.n	4008a4 <pio_set_peripheral+0x5c>
  400858:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40085c:	d10a      	bne.n	400874 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40085e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400860:	4313      	orrs	r3, r2
  400862:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400864:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400866:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400868:	400b      	ands	r3, r1
  40086a:	ea23 0302 	bic.w	r3, r3, r2
  40086e:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400870:	6042      	str	r2, [r0, #4]
  400872:	4770      	bx	lr
	switch (ul_type) {
  400874:	2900      	cmp	r1, #0
  400876:	d1fb      	bne.n	400870 <pio_set_peripheral+0x28>
  400878:	4770      	bx	lr
  40087a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40087e:	d021      	beq.n	4008c4 <pio_set_peripheral+0x7c>
  400880:	d809      	bhi.n	400896 <pio_set_peripheral+0x4e>
  400882:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400886:	d1f3      	bne.n	400870 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400888:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40088a:	4313      	orrs	r3, r2
  40088c:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40088e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400890:	4313      	orrs	r3, r2
  400892:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400894:	e7ec      	b.n	400870 <pio_set_peripheral+0x28>
	switch (ul_type) {
  400896:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40089a:	d013      	beq.n	4008c4 <pio_set_peripheral+0x7c>
  40089c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4008a0:	d010      	beq.n	4008c4 <pio_set_peripheral+0x7c>
  4008a2:	e7e5      	b.n	400870 <pio_set_peripheral+0x28>
{
  4008a4:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4008a6:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4008a8:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4008aa:	43d3      	mvns	r3, r2
  4008ac:	4021      	ands	r1, r4
  4008ae:	461c      	mov	r4, r3
  4008b0:	4019      	ands	r1, r3
  4008b2:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4008b4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4008b6:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4008b8:	400b      	ands	r3, r1
  4008ba:	4023      	ands	r3, r4
  4008bc:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4008be:	6042      	str	r2, [r0, #4]
}
  4008c0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008c4:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4008c6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4008c8:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4008ca:	400b      	ands	r3, r1
  4008cc:	ea23 0302 	bic.w	r3, r3, r2
  4008d0:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4008d2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4008d4:	4313      	orrs	r3, r2
  4008d6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4008d8:	e7ca      	b.n	400870 <pio_set_peripheral+0x28>

004008da <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4008da:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4008dc:	f012 0f01 	tst.w	r2, #1
  4008e0:	d10d      	bne.n	4008fe <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4008e2:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4008e4:	f012 0f0a 	tst.w	r2, #10
  4008e8:	d00b      	beq.n	400902 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4008ea:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4008ec:	f012 0f02 	tst.w	r2, #2
  4008f0:	d109      	bne.n	400906 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4008f2:	f012 0f08 	tst.w	r2, #8
  4008f6:	d008      	beq.n	40090a <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4008f8:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4008fc:	e005      	b.n	40090a <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4008fe:	6641      	str	r1, [r0, #100]	; 0x64
  400900:	e7f0      	b.n	4008e4 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400902:	6241      	str	r1, [r0, #36]	; 0x24
  400904:	e7f2      	b.n	4008ec <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400906:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  40090a:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40090c:	6001      	str	r1, [r0, #0]
  40090e:	4770      	bx	lr

00400910 <pio_set_output>:
{
  400910:	b410      	push	{r4}
  400912:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400914:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400916:	b94c      	cbnz	r4, 40092c <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400918:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  40091a:	b14b      	cbz	r3, 400930 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  40091c:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40091e:	b94a      	cbnz	r2, 400934 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400920:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400922:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400924:	6001      	str	r1, [r0, #0]
}
  400926:	f85d 4b04 	ldr.w	r4, [sp], #4
  40092a:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  40092c:	6641      	str	r1, [r0, #100]	; 0x64
  40092e:	e7f4      	b.n	40091a <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400930:	6541      	str	r1, [r0, #84]	; 0x54
  400932:	e7f4      	b.n	40091e <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400934:	6301      	str	r1, [r0, #48]	; 0x30
  400936:	e7f4      	b.n	400922 <pio_set_output+0x12>

00400938 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400938:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40093a:	4770      	bx	lr

0040093c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  40093c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40093e:	4770      	bx	lr

00400940 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400940:	b570      	push	{r4, r5, r6, lr}
  400942:	b082      	sub	sp, #8
  400944:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400946:	4c46      	ldr	r4, [pc, #280]	; (400a60 <pio_configure_pin+0x120>)
  400948:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  40094c:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  40094e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  400952:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400956:	d059      	beq.n	400a0c <pio_configure_pin+0xcc>
  400958:	d80a      	bhi.n	400970 <pio_configure_pin+0x30>
  40095a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40095e:	d02f      	beq.n	4009c0 <pio_configure_pin+0x80>
  400960:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400964:	d03f      	beq.n	4009e6 <pio_configure_pin+0xa6>
  400966:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40096a:	d016      	beq.n	40099a <pio_configure_pin+0x5a>
		return 0;
  40096c:	2000      	movs	r0, #0
  40096e:	e012      	b.n	400996 <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  400970:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400974:	d05d      	beq.n	400a32 <pio_configure_pin+0xf2>
  400976:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40097a:	d05a      	beq.n	400a32 <pio_configure_pin+0xf2>
  40097c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400980:	d1f4      	bne.n	40096c <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400982:	f000 011f 	and.w	r1, r0, #31
  400986:	2601      	movs	r6, #1
  400988:	462a      	mov	r2, r5
  40098a:	fa06 f101 	lsl.w	r1, r6, r1
  40098e:	4620      	mov	r0, r4
  400990:	4b34      	ldr	r3, [pc, #208]	; (400a64 <pio_configure_pin+0x124>)
  400992:	4798      	blx	r3
	return 1;
  400994:	4630      	mov	r0, r6
}
  400996:	b002      	add	sp, #8
  400998:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40099a:	f000 001f 	and.w	r0, r0, #31
  40099e:	2601      	movs	r6, #1
  4009a0:	4086      	lsls	r6, r0
  4009a2:	4632      	mov	r2, r6
  4009a4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4009a8:	4620      	mov	r0, r4
  4009aa:	4b2f      	ldr	r3, [pc, #188]	; (400a68 <pio_configure_pin+0x128>)
  4009ac:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4009ae:	f015 0f01 	tst.w	r5, #1
  4009b2:	d102      	bne.n	4009ba <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  4009b4:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4009b6:	2001      	movs	r0, #1
  4009b8:	e7ed      	b.n	400996 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4009ba:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4009bc:	2001      	movs	r0, #1
  4009be:	e7ea      	b.n	400996 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4009c0:	f000 001f 	and.w	r0, r0, #31
  4009c4:	2601      	movs	r6, #1
  4009c6:	4086      	lsls	r6, r0
  4009c8:	4632      	mov	r2, r6
  4009ca:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4009ce:	4620      	mov	r0, r4
  4009d0:	4b25      	ldr	r3, [pc, #148]	; (400a68 <pio_configure_pin+0x128>)
  4009d2:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4009d4:	f015 0f01 	tst.w	r5, #1
  4009d8:	d102      	bne.n	4009e0 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  4009da:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4009dc:	2001      	movs	r0, #1
  4009de:	e7da      	b.n	400996 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4009e0:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4009e2:	2001      	movs	r0, #1
  4009e4:	e7d7      	b.n	400996 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4009e6:	f000 001f 	and.w	r0, r0, #31
  4009ea:	2601      	movs	r6, #1
  4009ec:	4086      	lsls	r6, r0
  4009ee:	4632      	mov	r2, r6
  4009f0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4009f4:	4620      	mov	r0, r4
  4009f6:	4b1c      	ldr	r3, [pc, #112]	; (400a68 <pio_configure_pin+0x128>)
  4009f8:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4009fa:	f015 0f01 	tst.w	r5, #1
  4009fe:	d102      	bne.n	400a06 <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  400a00:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  400a02:	2001      	movs	r0, #1
  400a04:	e7c7      	b.n	400996 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  400a06:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  400a08:	2001      	movs	r0, #1
  400a0a:	e7c4      	b.n	400996 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400a0c:	f000 001f 	and.w	r0, r0, #31
  400a10:	2601      	movs	r6, #1
  400a12:	4086      	lsls	r6, r0
  400a14:	4632      	mov	r2, r6
  400a16:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400a1a:	4620      	mov	r0, r4
  400a1c:	4b12      	ldr	r3, [pc, #72]	; (400a68 <pio_configure_pin+0x128>)
  400a1e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400a20:	f015 0f01 	tst.w	r5, #1
  400a24:	d102      	bne.n	400a2c <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  400a26:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  400a28:	2001      	movs	r0, #1
  400a2a:	e7b4      	b.n	400996 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  400a2c:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  400a2e:	2001      	movs	r0, #1
  400a30:	e7b1      	b.n	400996 <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400a32:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400a36:	f000 011f 	and.w	r1, r0, #31
  400a3a:	2601      	movs	r6, #1
  400a3c:	ea05 0306 	and.w	r3, r5, r6
  400a40:	9300      	str	r3, [sp, #0]
  400a42:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400a46:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400a4a:	bf14      	ite	ne
  400a4c:	2200      	movne	r2, #0
  400a4e:	2201      	moveq	r2, #1
  400a50:	fa06 f101 	lsl.w	r1, r6, r1
  400a54:	4620      	mov	r0, r4
  400a56:	4c05      	ldr	r4, [pc, #20]	; (400a6c <pio_configure_pin+0x12c>)
  400a58:	47a0      	blx	r4
	return 1;
  400a5a:	4630      	mov	r0, r6
		break;
  400a5c:	e79b      	b.n	400996 <pio_configure_pin+0x56>
  400a5e:	bf00      	nop
  400a60:	00200707 	.word	0x00200707
  400a64:	004008db 	.word	0x004008db
  400a68:	00400849 	.word	0x00400849
  400a6c:	00400911 	.word	0x00400911

00400a70 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400a74:	4604      	mov	r4, r0
  400a76:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400a78:	4b0e      	ldr	r3, [pc, #56]	; (400ab4 <pio_handler_process+0x44>)
  400a7a:	4798      	blx	r3
  400a7c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400a7e:	4620      	mov	r0, r4
  400a80:	4b0d      	ldr	r3, [pc, #52]	; (400ab8 <pio_handler_process+0x48>)
  400a82:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400a84:	4005      	ands	r5, r0
  400a86:	d013      	beq.n	400ab0 <pio_handler_process+0x40>
  400a88:	4c0c      	ldr	r4, [pc, #48]	; (400abc <pio_handler_process+0x4c>)
  400a8a:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400a8e:	e003      	b.n	400a98 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400a90:	42b4      	cmp	r4, r6
  400a92:	d00d      	beq.n	400ab0 <pio_handler_process+0x40>
  400a94:	3410      	adds	r4, #16
		while (status != 0) {
  400a96:	b15d      	cbz	r5, 400ab0 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400a98:	6820      	ldr	r0, [r4, #0]
  400a9a:	4540      	cmp	r0, r8
  400a9c:	d1f8      	bne.n	400a90 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400a9e:	6861      	ldr	r1, [r4, #4]
  400aa0:	4229      	tst	r1, r5
  400aa2:	d0f5      	beq.n	400a90 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400aa4:	68e3      	ldr	r3, [r4, #12]
  400aa6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400aa8:	6863      	ldr	r3, [r4, #4]
  400aaa:	ea25 0503 	bic.w	r5, r5, r3
  400aae:	e7ef      	b.n	400a90 <pio_handler_process+0x20>
  400ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400ab4:	00400939 	.word	0x00400939
  400ab8:	0040093d 	.word	0x0040093d
  400abc:	20401a30 	.word	0x20401a30

00400ac0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400ac0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400ac2:	210a      	movs	r1, #10
  400ac4:	4801      	ldr	r0, [pc, #4]	; (400acc <PIOA_Handler+0xc>)
  400ac6:	4b02      	ldr	r3, [pc, #8]	; (400ad0 <PIOA_Handler+0x10>)
  400ac8:	4798      	blx	r3
  400aca:	bd08      	pop	{r3, pc}
  400acc:	400e0e00 	.word	0x400e0e00
  400ad0:	00400a71 	.word	0x00400a71

00400ad4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400ad4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400ad6:	210b      	movs	r1, #11
  400ad8:	4801      	ldr	r0, [pc, #4]	; (400ae0 <PIOB_Handler+0xc>)
  400ada:	4b02      	ldr	r3, [pc, #8]	; (400ae4 <PIOB_Handler+0x10>)
  400adc:	4798      	blx	r3
  400ade:	bd08      	pop	{r3, pc}
  400ae0:	400e1000 	.word	0x400e1000
  400ae4:	00400a71 	.word	0x00400a71

00400ae8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400ae8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400aea:	210c      	movs	r1, #12
  400aec:	4801      	ldr	r0, [pc, #4]	; (400af4 <PIOC_Handler+0xc>)
  400aee:	4b02      	ldr	r3, [pc, #8]	; (400af8 <PIOC_Handler+0x10>)
  400af0:	4798      	blx	r3
  400af2:	bd08      	pop	{r3, pc}
  400af4:	400e1200 	.word	0x400e1200
  400af8:	00400a71 	.word	0x00400a71

00400afc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400afc:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400afe:	2110      	movs	r1, #16
  400b00:	4801      	ldr	r0, [pc, #4]	; (400b08 <PIOD_Handler+0xc>)
  400b02:	4b02      	ldr	r3, [pc, #8]	; (400b0c <PIOD_Handler+0x10>)
  400b04:	4798      	blx	r3
  400b06:	bd08      	pop	{r3, pc}
  400b08:	400e1400 	.word	0x400e1400
  400b0c:	00400a71 	.word	0x00400a71

00400b10 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400b10:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400b12:	2111      	movs	r1, #17
  400b14:	4801      	ldr	r0, [pc, #4]	; (400b1c <PIOE_Handler+0xc>)
  400b16:	4b02      	ldr	r3, [pc, #8]	; (400b20 <PIOE_Handler+0x10>)
  400b18:	4798      	blx	r3
  400b1a:	bd08      	pop	{r3, pc}
  400b1c:	400e1600 	.word	0x400e1600
  400b20:	00400a71 	.word	0x00400a71

00400b24 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400b24:	2803      	cmp	r0, #3
  400b26:	d011      	beq.n	400b4c <pmc_mck_set_division+0x28>
  400b28:	2804      	cmp	r0, #4
  400b2a:	d012      	beq.n	400b52 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400b2c:	2802      	cmp	r0, #2
  400b2e:	bf0c      	ite	eq
  400b30:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400b34:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400b36:	4a08      	ldr	r2, [pc, #32]	; (400b58 <pmc_mck_set_division+0x34>)
  400b38:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400b3e:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400b40:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400b42:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b44:	f013 0f08 	tst.w	r3, #8
  400b48:	d0fb      	beq.n	400b42 <pmc_mck_set_division+0x1e>
}
  400b4a:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400b4c:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400b50:	e7f1      	b.n	400b36 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400b52:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400b56:	e7ee      	b.n	400b36 <pmc_mck_set_division+0x12>
  400b58:	400e0600 	.word	0x400e0600

00400b5c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400b5c:	4a17      	ldr	r2, [pc, #92]	; (400bbc <pmc_switch_mck_to_pllack+0x60>)
  400b5e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400b64:	4318      	orrs	r0, r3
  400b66:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400b68:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b6a:	f013 0f08 	tst.w	r3, #8
  400b6e:	d10a      	bne.n	400b86 <pmc_switch_mck_to_pllack+0x2a>
  400b70:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400b74:	4911      	ldr	r1, [pc, #68]	; (400bbc <pmc_switch_mck_to_pllack+0x60>)
  400b76:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400b78:	f012 0f08 	tst.w	r2, #8
  400b7c:	d103      	bne.n	400b86 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400b7e:	3b01      	subs	r3, #1
  400b80:	d1f9      	bne.n	400b76 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400b82:	2001      	movs	r0, #1
  400b84:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400b86:	4a0d      	ldr	r2, [pc, #52]	; (400bbc <pmc_switch_mck_to_pllack+0x60>)
  400b88:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b8a:	f023 0303 	bic.w	r3, r3, #3
  400b8e:	f043 0302 	orr.w	r3, r3, #2
  400b92:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400b94:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b96:	f013 0f08 	tst.w	r3, #8
  400b9a:	d10a      	bne.n	400bb2 <pmc_switch_mck_to_pllack+0x56>
  400b9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400ba0:	4906      	ldr	r1, [pc, #24]	; (400bbc <pmc_switch_mck_to_pllack+0x60>)
  400ba2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400ba4:	f012 0f08 	tst.w	r2, #8
  400ba8:	d105      	bne.n	400bb6 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400baa:	3b01      	subs	r3, #1
  400bac:	d1f9      	bne.n	400ba2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400bae:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400bb0:	4770      	bx	lr
	return 0;
  400bb2:	2000      	movs	r0, #0
  400bb4:	4770      	bx	lr
  400bb6:	2000      	movs	r0, #0
  400bb8:	4770      	bx	lr
  400bba:	bf00      	nop
  400bbc:	400e0600 	.word	0x400e0600

00400bc0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400bc0:	b9a0      	cbnz	r0, 400bec <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400bc2:	480e      	ldr	r0, [pc, #56]	; (400bfc <pmc_switch_mainck_to_xtal+0x3c>)
  400bc4:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400bc6:	0209      	lsls	r1, r1, #8
  400bc8:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400bca:	4a0d      	ldr	r2, [pc, #52]	; (400c00 <pmc_switch_mainck_to_xtal+0x40>)
  400bcc:	401a      	ands	r2, r3
  400bce:	4b0d      	ldr	r3, [pc, #52]	; (400c04 <pmc_switch_mainck_to_xtal+0x44>)
  400bd0:	4313      	orrs	r3, r2
  400bd2:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400bd4:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400bd6:	4602      	mov	r2, r0
  400bd8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400bda:	f013 0f01 	tst.w	r3, #1
  400bde:	d0fb      	beq.n	400bd8 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400be0:	4a06      	ldr	r2, [pc, #24]	; (400bfc <pmc_switch_mainck_to_xtal+0x3c>)
  400be2:	6a11      	ldr	r1, [r2, #32]
  400be4:	4b08      	ldr	r3, [pc, #32]	; (400c08 <pmc_switch_mainck_to_xtal+0x48>)
  400be6:	430b      	orrs	r3, r1
  400be8:	6213      	str	r3, [r2, #32]
  400bea:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400bec:	4903      	ldr	r1, [pc, #12]	; (400bfc <pmc_switch_mainck_to_xtal+0x3c>)
  400bee:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400bf0:	4a06      	ldr	r2, [pc, #24]	; (400c0c <pmc_switch_mainck_to_xtal+0x4c>)
  400bf2:	401a      	ands	r2, r3
  400bf4:	4b06      	ldr	r3, [pc, #24]	; (400c10 <pmc_switch_mainck_to_xtal+0x50>)
  400bf6:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400bf8:	620b      	str	r3, [r1, #32]
  400bfa:	4770      	bx	lr
  400bfc:	400e0600 	.word	0x400e0600
  400c00:	ffc8fffc 	.word	0xffc8fffc
  400c04:	00370001 	.word	0x00370001
  400c08:	01370000 	.word	0x01370000
  400c0c:	fec8fffc 	.word	0xfec8fffc
  400c10:	01370002 	.word	0x01370002

00400c14 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400c14:	4b02      	ldr	r3, [pc, #8]	; (400c20 <pmc_osc_is_ready_mainck+0xc>)
  400c16:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400c18:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400c1c:	4770      	bx	lr
  400c1e:	bf00      	nop
  400c20:	400e0600 	.word	0x400e0600

00400c24 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400c24:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400c28:	4b01      	ldr	r3, [pc, #4]	; (400c30 <pmc_disable_pllack+0xc>)
  400c2a:	629a      	str	r2, [r3, #40]	; 0x28
  400c2c:	4770      	bx	lr
  400c2e:	bf00      	nop
  400c30:	400e0600 	.word	0x400e0600

00400c34 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400c34:	4b02      	ldr	r3, [pc, #8]	; (400c40 <pmc_is_locked_pllack+0xc>)
  400c36:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400c38:	f000 0002 	and.w	r0, r0, #2
  400c3c:	4770      	bx	lr
  400c3e:	bf00      	nop
  400c40:	400e0600 	.word	0x400e0600

00400c44 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400c44:	283f      	cmp	r0, #63	; 0x3f
  400c46:	d81e      	bhi.n	400c86 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400c48:	281f      	cmp	r0, #31
  400c4a:	d80c      	bhi.n	400c66 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400c4c:	4b11      	ldr	r3, [pc, #68]	; (400c94 <pmc_enable_periph_clk+0x50>)
  400c4e:	699a      	ldr	r2, [r3, #24]
  400c50:	2301      	movs	r3, #1
  400c52:	4083      	lsls	r3, r0
  400c54:	4393      	bics	r3, r2
  400c56:	d018      	beq.n	400c8a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400c58:	2301      	movs	r3, #1
  400c5a:	fa03 f000 	lsl.w	r0, r3, r0
  400c5e:	4b0d      	ldr	r3, [pc, #52]	; (400c94 <pmc_enable_periph_clk+0x50>)
  400c60:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400c62:	2000      	movs	r0, #0
  400c64:	4770      	bx	lr
		ul_id -= 32;
  400c66:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400c68:	4b0a      	ldr	r3, [pc, #40]	; (400c94 <pmc_enable_periph_clk+0x50>)
  400c6a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400c6e:	2301      	movs	r3, #1
  400c70:	4083      	lsls	r3, r0
  400c72:	4393      	bics	r3, r2
  400c74:	d00b      	beq.n	400c8e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400c76:	2301      	movs	r3, #1
  400c78:	fa03 f000 	lsl.w	r0, r3, r0
  400c7c:	4b05      	ldr	r3, [pc, #20]	; (400c94 <pmc_enable_periph_clk+0x50>)
  400c7e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400c82:	2000      	movs	r0, #0
  400c84:	4770      	bx	lr
		return 1;
  400c86:	2001      	movs	r0, #1
  400c88:	4770      	bx	lr
	return 0;
  400c8a:	2000      	movs	r0, #0
  400c8c:	4770      	bx	lr
  400c8e:	2000      	movs	r0, #0
}
  400c90:	4770      	bx	lr
  400c92:	bf00      	nop
  400c94:	400e0600 	.word	0x400e0600

00400c98 <pmc_pck_set_prescaler>:
 *
 * \param ul_id Peripheral ID.
 * \param ul_pres Prescaler value.
 */
void pmc_pck_set_prescaler(uint32_t ul_id, uint32_t ul_pres)
{
  400c98:	4a09      	ldr	r2, [pc, #36]	; (400cc0 <pmc_pck_set_prescaler+0x28>)
  400c9a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
	PMC->PMC_PCK[ul_id] =
			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_PRES_Msk) | ul_pres;
  400c9e:	6c13      	ldr	r3, [r2, #64]	; 0x40
  400ca0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
  400ca4:	4319      	orrs	r1, r3
	PMC->PMC_PCK[ul_id] =
  400ca6:	6411      	str	r1, [r2, #64]	; 0x40
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  400ca8:	f44f 7380 	mov.w	r3, #256	; 0x100
  400cac:	fa03 f000 	lsl.w	r0, r3, r0
  400cb0:	4b03      	ldr	r3, [pc, #12]	; (400cc0 <pmc_pck_set_prescaler+0x28>)
  400cb2:	681a      	ldr	r2, [r3, #0]
  400cb4:	4202      	tst	r2, r0
  400cb6:	d002      	beq.n	400cbe <pmc_pck_set_prescaler+0x26>
			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
  400cb8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  400cba:	4210      	tst	r0, r2
  400cbc:	d0f9      	beq.n	400cb2 <pmc_pck_set_prescaler+0x1a>
  400cbe:	4770      	bx	lr
  400cc0:	400e0600 	.word	0x400e0600

00400cc4 <pmc_pck_set_source>:
 *
 * \param ul_id Peripheral ID.
 * \param ul_source Source selection value.
 */
void pmc_pck_set_source(uint32_t ul_id, uint32_t ul_source)
{
  400cc4:	4a09      	ldr	r2, [pc, #36]	; (400cec <pmc_pck_set_source+0x28>)
  400cc6:	eb02 0280 	add.w	r2, r2, r0, lsl #2
	PMC->PMC_PCK[ul_id] =
			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_CSS_Msk) | ul_source;
  400cca:	6c13      	ldr	r3, [r2, #64]	; 0x40
  400ccc:	f023 0307 	bic.w	r3, r3, #7
  400cd0:	4319      	orrs	r1, r3
	PMC->PMC_PCK[ul_id] =
  400cd2:	6411      	str	r1, [r2, #64]	; 0x40
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  400cd4:	f44f 7380 	mov.w	r3, #256	; 0x100
  400cd8:	fa03 f000 	lsl.w	r0, r3, r0
  400cdc:	4b03      	ldr	r3, [pc, #12]	; (400cec <pmc_pck_set_source+0x28>)
  400cde:	681a      	ldr	r2, [r3, #0]
  400ce0:	4202      	tst	r2, r0
  400ce2:	d002      	beq.n	400cea <pmc_pck_set_source+0x26>
			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
  400ce4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  400ce6:	4210      	tst	r0, r2
  400ce8:	d0f9      	beq.n	400cde <pmc_pck_set_source+0x1a>
  400cea:	4770      	bx	lr
  400cec:	400e0600 	.word	0x400e0600

00400cf0 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  400cf0:	f44f 7380 	mov.w	r3, #256	; 0x100
  400cf4:	fa03 f000 	lsl.w	r0, r3, r0
  400cf8:	4b01      	ldr	r3, [pc, #4]	; (400d00 <pmc_enable_pck+0x10>)
  400cfa:	6018      	str	r0, [r3, #0]
  400cfc:	4770      	bx	lr
  400cfe:	bf00      	nop
  400d00:	400e0600 	.word	0x400e0600

00400d04 <ssc_reset>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_reset(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_SWRST;
  400d04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400d08:	6003      	str	r3, [r0, #0]
	p_ssc->SSC_CMR = 0;
  400d0a:	2300      	movs	r3, #0
  400d0c:	6043      	str	r3, [r0, #4]
	p_ssc->SSC_RCMR = 0;
  400d0e:	6103      	str	r3, [r0, #16]
	p_ssc->SSC_RFMR = 0;
  400d10:	6143      	str	r3, [r0, #20]
	p_ssc->SSC_TCMR = 0;
  400d12:	6183      	str	r3, [r0, #24]
	p_ssc->SSC_TFMR = 0;
  400d14:	61c3      	str	r3, [r0, #28]
  400d16:	4770      	bx	lr

00400d18 <ssc_enable_rx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_rx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_RXEN;
  400d18:	2301      	movs	r3, #1
  400d1a:	6003      	str	r3, [r0, #0]
  400d1c:	4770      	bx	lr

00400d1e <ssc_disable_rx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_disable_rx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_RXDIS;
  400d1e:	2302      	movs	r3, #2
  400d20:	6003      	str	r3, [r0, #0]
  400d22:	4770      	bx	lr

00400d24 <ssc_enable_tx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_tx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_TXEN;
  400d24:	f44f 7380 	mov.w	r3, #256	; 0x100
  400d28:	6003      	str	r3, [r0, #0]
  400d2a:	4770      	bx	lr

00400d2c <ssc_disable_tx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_disable_tx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_TXDIS;
  400d2c:	f44f 7300 	mov.w	r3, #512	; 0x200
  400d30:	6003      	str	r3, [r0, #0]
  400d32:	4770      	bx	lr

00400d34 <ssc_set_receiver>:
 * \param p_rx_clk_opt Pointer to the receiver clock configuration structure.
 * \param p_rx_data_frame Pointer to the receiver data frame configuration structure.
 */
void ssc_set_receiver(Ssc *p_ssc, clock_opt_t *p_rx_clk_opt,
		data_frame_opt_t *p_rx_data_frame)
{
  400d34:	b430      	push	{r4, r5}
	if (p_rx_clk_opt == NULL) {
  400d36:	2900      	cmp	r1, #0
  400d38:	d030      	beq.n	400d9c <ssc_set_receiver+0x68>
  400d3a:	460c      	mov	r4, r1
		p_ssc->SSC_RCMR = 0;
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  400d3c:	6901      	ldr	r1, [r0, #16]
  400d3e:	6823      	ldr	r3, [r4, #0]
  400d40:	6865      	ldr	r5, [r4, #4]
  400d42:	432b      	orrs	r3, r5
  400d44:	430b      	orrs	r3, r1
  400d46:	68a1      	ldr	r1, [r4, #8]
  400d48:	430b      	orrs	r3, r1
  400d4a:	68e1      	ldr	r1, [r4, #12]
  400d4c:	430b      	orrs	r3, r1
  400d4e:	69a1      	ldr	r1, [r4, #24]
  400d50:	430b      	orrs	r3, r1
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
				p_rx_clk_opt->ul_ckg |
				p_rx_clk_opt->ul_start_sel |
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
  400d52:	6921      	ldr	r1, [r4, #16]
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  400d54:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  400d58:	6961      	ldr	r1, [r4, #20]
  400d5a:	0409      	lsls	r1, r1, #16
  400d5c:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  400d60:	430b      	orrs	r3, r1
  400d62:	6103      	str	r3, [r0, #16]
	}

	if (p_rx_data_frame == NULL) {
  400d64:	b1ea      	cbz	r2, 400da2 <ssc_set_receiver+0x6e>
		p_ssc->SSC_RFMR = 0;
	} else {
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400d66:	6941      	ldr	r1, [r0, #20]
  400d68:	6853      	ldr	r3, [r2, #4]
  400d6a:	6954      	ldr	r4, [r2, #20]
  400d6c:	4323      	orrs	r3, r4
  400d6e:	6994      	ldr	r4, [r2, #24]
  400d70:	4323      	orrs	r3, r4
  400d72:	430b      	orrs	r3, r1
  400d74:	6811      	ldr	r1, [r2, #0]
  400d76:	f001 011f 	and.w	r1, r1, #31
  400d7a:	430b      	orrs	r3, r1
				p_rx_data_frame->ul_msbf |
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
  400d7c:	6911      	ldr	r1, [r2, #16]
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400d7e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  400d82:	6891      	ldr	r1, [r2, #8]
  400d84:	0209      	lsls	r1, r1, #8
  400d86:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400d8a:	430b      	orrs	r3, r1
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  400d8c:	68d2      	ldr	r2, [r2, #12]
  400d8e:	0412      	lsls	r2, r2, #16
  400d90:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400d94:	4313      	orrs	r3, r2
  400d96:	6143      	str	r3, [r0, #20]
				p_rx_data_frame->ul_fsos |
				p_rx_data_frame->ul_fsedge;
	}
}
  400d98:	bc30      	pop	{r4, r5}
  400d9a:	4770      	bx	lr
		p_ssc->SSC_RCMR = 0;
  400d9c:	2300      	movs	r3, #0
  400d9e:	6103      	str	r3, [r0, #16]
  400da0:	e7e0      	b.n	400d64 <ssc_set_receiver+0x30>
		p_ssc->SSC_RFMR = 0;
  400da2:	2300      	movs	r3, #0
  400da4:	6143      	str	r3, [r0, #20]
  400da6:	e7f7      	b.n	400d98 <ssc_set_receiver+0x64>

00400da8 <ssc_set_transmitter>:
 * \param p_tx_clk_opt Pointer to the transmitter clock configuration structure.
 * \param p_tx_data_frame Pointer to the transmitter data frame configuration structure.
 */
void ssc_set_transmitter(Ssc *p_ssc, clock_opt_t *p_tx_clk_opt,
		data_frame_opt_t *p_tx_data_frame)
{
  400da8:	b430      	push	{r4, r5}
	if (p_tx_clk_opt == NULL) {
  400daa:	2900      	cmp	r1, #0
  400dac:	d030      	beq.n	400e10 <ssc_set_transmitter+0x68>
  400dae:	460c      	mov	r4, r1
		p_ssc->SSC_TCMR = 0;
	} else {
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  400db0:	6981      	ldr	r1, [r0, #24]
  400db2:	6823      	ldr	r3, [r4, #0]
  400db4:	6865      	ldr	r5, [r4, #4]
  400db6:	432b      	orrs	r3, r5
  400db8:	430b      	orrs	r3, r1
  400dba:	68a1      	ldr	r1, [r4, #8]
  400dbc:	430b      	orrs	r3, r1
  400dbe:	68e1      	ldr	r1, [r4, #12]
  400dc0:	430b      	orrs	r3, r1
  400dc2:	69a1      	ldr	r1, [r4, #24]
  400dc4:	430b      	orrs	r3, r1
				p_tx_clk_opt->ul_cko | p_tx_clk_opt->ul_cki |
				p_tx_clk_opt->ul_ckg |
				p_tx_clk_opt->ul_start_sel |
				SSC_TCMR_PERIOD(p_tx_clk_opt->ul_period) |
  400dc6:	6921      	ldr	r1, [r4, #16]
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  400dc8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
				SSC_TCMR_STTDLY(p_tx_clk_opt->ul_sttdly);
  400dcc:	6961      	ldr	r1, [r4, #20]
  400dce:	0409      	lsls	r1, r1, #16
  400dd0:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  400dd4:	430b      	orrs	r3, r1
  400dd6:	6183      	str	r3, [r0, #24]
	}

	if (p_tx_data_frame == NULL) {
  400dd8:	b1ea      	cbz	r2, 400e16 <ssc_set_transmitter+0x6e>
		p_ssc->SSC_TFMR = 0;
	} else {
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  400dda:	69c1      	ldr	r1, [r0, #28]
  400ddc:	6853      	ldr	r3, [r2, #4]
  400dde:	6954      	ldr	r4, [r2, #20]
  400de0:	4323      	orrs	r3, r4
  400de2:	6994      	ldr	r4, [r2, #24]
  400de4:	4323      	orrs	r3, r4
  400de6:	430b      	orrs	r3, r1
  400de8:	6811      	ldr	r1, [r2, #0]
  400dea:	f001 011f 	and.w	r1, r1, #31
  400dee:	430b      	orrs	r3, r1
				p_tx_data_frame->ul_msbf |
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
				SSC_TFMR_FSLEN_EXT(p_tx_data_frame->ul_fslen_ext) |
  400df0:	6911      	ldr	r1, [r2, #16]
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  400df2:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
  400df6:	6891      	ldr	r1, [r2, #8]
  400df8:	0209      	lsls	r1, r1, #8
  400dfa:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  400dfe:	430b      	orrs	r3, r1
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
  400e00:	68d2      	ldr	r2, [r2, #12]
  400e02:	0412      	lsls	r2, r2, #16
  400e04:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  400e08:	4313      	orrs	r3, r2
  400e0a:	61c3      	str	r3, [r0, #28]
				p_tx_data_frame->ul_fsos |
				p_tx_data_frame->ul_fsedge;
	}
}
  400e0c:	bc30      	pop	{r4, r5}
  400e0e:	4770      	bx	lr
		p_ssc->SSC_TCMR = 0;
  400e10:	2300      	movs	r3, #0
  400e12:	6183      	str	r3, [r0, #24]
  400e14:	e7e0      	b.n	400dd8 <ssc_set_transmitter+0x30>
		p_ssc->SSC_TFMR = 0;
  400e16:	2300      	movs	r3, #0
  400e18:	61c3      	str	r3, [r0, #28]
  400e1a:	e7f7      	b.n	400e0c <ssc_set_transmitter+0x64>

00400e1c <ssc_disable_interrupt>:
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void ssc_disable_interrupt(Ssc *p_ssc, uint32_t ul_sources)
{
	p_ssc->SSC_IDR = ul_sources;
  400e1c:	6481      	str	r1, [r0, #72]	; 0x48
  400e1e:	4770      	bx	lr

00400e20 <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  400e20:	4b28      	ldr	r3, [pc, #160]	; (400ec4 <twihs_set_speed+0xa4>)
  400e22:	4299      	cmp	r1, r3
  400e24:	d84b      	bhi.n	400ebe <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  400e26:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  400e2a:	4299      	cmp	r1, r3
  400e2c:	d92d      	bls.n	400e8a <twihs_set_speed+0x6a>
{
  400e2e:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  400e30:	4c25      	ldr	r4, [pc, #148]	; (400ec8 <twihs_set_speed+0xa8>)
  400e32:	fba4 3402 	umull	r3, r4, r4, r2
  400e36:	0ba4      	lsrs	r4, r4, #14
  400e38:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  400e3a:	4b24      	ldr	r3, [pc, #144]	; (400ecc <twihs_set_speed+0xac>)
  400e3c:	440b      	add	r3, r1
  400e3e:	009b      	lsls	r3, r3, #2
  400e40:	fbb2 f2f3 	udiv	r2, r2, r3
  400e44:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400e46:	2cff      	cmp	r4, #255	; 0xff
  400e48:	d91d      	bls.n	400e86 <twihs_set_speed+0x66>
  400e4a:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  400e4c:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  400e4e:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400e50:	2cff      	cmp	r4, #255	; 0xff
  400e52:	d901      	bls.n	400e58 <twihs_set_speed+0x38>
  400e54:	2906      	cmp	r1, #6
  400e56:	d9f9      	bls.n	400e4c <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400e58:	2aff      	cmp	r2, #255	; 0xff
  400e5a:	d907      	bls.n	400e6c <twihs_set_speed+0x4c>
  400e5c:	2906      	cmp	r1, #6
  400e5e:	d805      	bhi.n	400e6c <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  400e60:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  400e62:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400e64:	2aff      	cmp	r2, #255	; 0xff
  400e66:	d901      	bls.n	400e6c <twihs_set_speed+0x4c>
  400e68:	2906      	cmp	r1, #6
  400e6a:	d9f9      	bls.n	400e60 <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  400e6c:	0213      	lsls	r3, r2, #8
  400e6e:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  400e70:	0409      	lsls	r1, r1, #16
  400e72:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  400e76:	430b      	orrs	r3, r1
  400e78:	b2e4      	uxtb	r4, r4
  400e7a:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  400e7c:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  400e7e:	2000      	movs	r0, #0
}
  400e80:	f85d 4b04 	ldr.w	r4, [sp], #4
  400e84:	4770      	bx	lr
	uint32_t ckdiv = 0;
  400e86:	2100      	movs	r1, #0
  400e88:	e7e6      	b.n	400e58 <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  400e8a:	0049      	lsls	r1, r1, #1
  400e8c:	fbb2 f2f1 	udiv	r2, r2, r1
  400e90:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400e92:	2aff      	cmp	r2, #255	; 0xff
  400e94:	d911      	bls.n	400eba <twihs_set_speed+0x9a>
  400e96:	2300      	movs	r3, #0
			ckdiv++;
  400e98:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  400e9a:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400e9c:	2aff      	cmp	r2, #255	; 0xff
  400e9e:	d901      	bls.n	400ea4 <twihs_set_speed+0x84>
  400ea0:	2b06      	cmp	r3, #6
  400ea2:	d9f9      	bls.n	400e98 <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  400ea4:	0211      	lsls	r1, r2, #8
  400ea6:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  400ea8:	041b      	lsls	r3, r3, #16
  400eaa:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  400eae:	430b      	orrs	r3, r1
  400eb0:	b2d2      	uxtb	r2, r2
  400eb2:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  400eb4:	6102      	str	r2, [r0, #16]
	return PASS;
  400eb6:	2000      	movs	r0, #0
  400eb8:	4770      	bx	lr
	uint32_t ckdiv = 0;
  400eba:	2300      	movs	r3, #0
  400ebc:	e7f2      	b.n	400ea4 <twihs_set_speed+0x84>
		return FAIL;
  400ebe:	2001      	movs	r0, #1
  400ec0:	4770      	bx	lr
  400ec2:	bf00      	nop
  400ec4:	00061a80 	.word	0x00061a80
  400ec8:	057619f1 	.word	0x057619f1
  400ecc:	3ffd1200 	.word	0x3ffd1200

00400ed0 <twihs_master_init>:
{
  400ed0:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  400ed2:	f04f 32ff 	mov.w	r2, #4294967295
  400ed6:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  400ed8:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  400eda:	2280      	movs	r2, #128	; 0x80
  400edc:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  400ede:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  400ee0:	2208      	movs	r2, #8
  400ee2:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  400ee4:	2220      	movs	r2, #32
  400ee6:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  400ee8:	2204      	movs	r2, #4
  400eea:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  400eec:	680a      	ldr	r2, [r1, #0]
  400eee:	6849      	ldr	r1, [r1, #4]
  400ef0:	4b03      	ldr	r3, [pc, #12]	; (400f00 <twihs_master_init+0x30>)
  400ef2:	4798      	blx	r3
}
  400ef4:	2801      	cmp	r0, #1
  400ef6:	bf14      	ite	ne
  400ef8:	2000      	movne	r0, #0
  400efa:	2001      	moveq	r0, #1
  400efc:	bd08      	pop	{r3, pc}
  400efe:	bf00      	nop
  400f00:	00400e21 	.word	0x00400e21

00400f04 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  400f04:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  400f06:	2a00      	cmp	r2, #0
  400f08:	d04c      	beq.n	400fa4 <twihs_master_read+0xa0>
{
  400f0a:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  400f0c:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  400f0e:	2600      	movs	r6, #0
  400f10:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  400f12:	684b      	ldr	r3, [r1, #4]
  400f14:	021b      	lsls	r3, r3, #8
  400f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  400f1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  400f1e:	7c0d      	ldrb	r5, [r1, #16]
  400f20:	042d      	lsls	r5, r5, #16
  400f22:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  400f26:	432b      	orrs	r3, r5
  400f28:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  400f2a:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  400f2c:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  400f2e:	b15d      	cbz	r5, 400f48 <twihs_master_read+0x44>
	val = addr[0];
  400f30:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  400f32:	2d01      	cmp	r5, #1
  400f34:	dd02      	ble.n	400f3c <twihs_master_read+0x38>
		val |= addr[1];
  400f36:	784e      	ldrb	r6, [r1, #1]
  400f38:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	if (len > 2) {
  400f3c:	2d02      	cmp	r5, #2
  400f3e:	dd04      	ble.n	400f4a <twihs_master_read+0x46>
		val |= addr[2];
  400f40:	7889      	ldrb	r1, [r1, #2]
  400f42:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  400f46:	e000      	b.n	400f4a <twihs_master_read+0x46>
		return 0;
  400f48:	2300      	movs	r3, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  400f4a:	60c3      	str	r3, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  400f4c:	2301      	movs	r3, #1
  400f4e:	6003      	str	r3, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  400f50:	2502      	movs	r5, #2
  400f52:	e012      	b.n	400f7a <twihs_master_read+0x76>
  400f54:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  400f56:	f013 0f02 	tst.w	r3, #2
  400f5a:	d01b      	beq.n	400f94 <twihs_master_read+0x90>
		*buffer++ = p_twihs->TWIHS_RHR;
  400f5c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400f5e:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  400f60:	6a03      	ldr	r3, [r0, #32]
  400f62:	f013 0f01 	tst.w	r3, #1
  400f66:	d0fb      	beq.n	400f60 <twihs_master_read+0x5c>
	p_twihs->TWIHS_SR;
  400f68:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  400f6a:	2000      	movs	r0, #0
}
  400f6c:	bc70      	pop	{r4, r5, r6}
  400f6e:	4770      	bx	lr
		*buffer++ = p_twihs->TWIHS_RHR;
  400f70:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400f72:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt > 0) {
  400f76:	3a01      	subs	r2, #1
  400f78:	d0f2      	beq.n	400f60 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  400f7a:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  400f7c:	f413 7f80 	tst.w	r3, #256	; 0x100
  400f80:	d114      	bne.n	400fac <twihs_master_read+0xa8>
  400f82:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  400f86:	2a01      	cmp	r2, #1
  400f88:	d0e4      	beq.n	400f54 <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  400f8a:	f013 0f02 	tst.w	r3, #2
  400f8e:	d1ef      	bne.n	400f70 <twihs_master_read+0x6c>
	while (cnt > 0) {
  400f90:	2a00      	cmp	r2, #0
  400f92:	d0e5      	beq.n	400f60 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  400f94:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  400f96:	f413 7f80 	tst.w	r3, #256	; 0x100
  400f9a:	d105      	bne.n	400fa8 <twihs_master_read+0xa4>
		if (!timeout--) {
  400f9c:	3901      	subs	r1, #1
  400f9e:	d1f2      	bne.n	400f86 <twihs_master_read+0x82>
			return TWIHS_ERROR_TIMEOUT;
  400fa0:	2009      	movs	r0, #9
  400fa2:	e7e3      	b.n	400f6c <twihs_master_read+0x68>
		return TWIHS_INVALID_ARGUMENT;
  400fa4:	2001      	movs	r0, #1
  400fa6:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  400fa8:	2005      	movs	r0, #5
  400faa:	e7df      	b.n	400f6c <twihs_master_read+0x68>
  400fac:	2005      	movs	r0, #5
  400fae:	e7dd      	b.n	400f6c <twihs_master_read+0x68>

00400fb0 <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  400fb0:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  400fb2:	2b00      	cmp	r3, #0
  400fb4:	d043      	beq.n	40103e <twihs_master_write+0x8e>
{
  400fb6:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  400fb8:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  400fba:	2600      	movs	r6, #0
  400fbc:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  400fbe:	7c0a      	ldrb	r2, [r1, #16]
  400fc0:	0412      	lsls	r2, r2, #16
  400fc2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  400fc6:	684d      	ldr	r5, [r1, #4]
  400fc8:	022d      	lsls	r5, r5, #8
  400fca:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  400fce:	432a      	orrs	r2, r5
  400fd0:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  400fd2:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  400fd4:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  400fd6:	b15d      	cbz	r5, 400ff0 <twihs_master_write+0x40>
	val = addr[0];
  400fd8:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  400fda:	2d01      	cmp	r5, #1
  400fdc:	dd02      	ble.n	400fe4 <twihs_master_write+0x34>
		val |= addr[1];
  400fde:	784e      	ldrb	r6, [r1, #1]
  400fe0:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  400fe4:	2d02      	cmp	r5, #2
  400fe6:	dd04      	ble.n	400ff2 <twihs_master_write+0x42>
		val |= addr[2];
  400fe8:	7889      	ldrb	r1, [r1, #2]
  400fea:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  400fee:	e000      	b.n	400ff2 <twihs_master_write+0x42>
		return 0;
  400ff0:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  400ff2:	60c2      	str	r2, [r0, #12]
  400ff4:	e004      	b.n	401000 <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  400ff6:	f814 2b01 	ldrb.w	r2, [r4], #1
  400ffa:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  400ffc:	3b01      	subs	r3, #1
  400ffe:	d00f      	beq.n	401020 <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  401000:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401002:	f412 7f80 	tst.w	r2, #256	; 0x100
  401006:	d11e      	bne.n	401046 <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  401008:	f012 0f04 	tst.w	r2, #4
  40100c:	d1f3      	bne.n	400ff6 <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  40100e:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401010:	f412 7f80 	tst.w	r2, #256	; 0x100
  401014:	d115      	bne.n	401042 <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  401016:	f012 0f04 	tst.w	r2, #4
  40101a:	d1ec      	bne.n	400ff6 <twihs_master_write+0x46>
	while (cnt > 0) {
  40101c:	2b00      	cmp	r3, #0
  40101e:	d1f6      	bne.n	40100e <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  401020:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401022:	f413 7f80 	tst.w	r3, #256	; 0x100
  401026:	d111      	bne.n	40104c <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  401028:	f013 0f04 	tst.w	r3, #4
  40102c:	d0f8      	beq.n	401020 <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  40102e:	2302      	movs	r3, #2
  401030:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401032:	6a03      	ldr	r3, [r0, #32]
  401034:	f013 0f01 	tst.w	r3, #1
  401038:	d0fb      	beq.n	401032 <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  40103a:	2000      	movs	r0, #0
  40103c:	e004      	b.n	401048 <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  40103e:	2001      	movs	r0, #1
  401040:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401042:	2005      	movs	r0, #5
  401044:	e000      	b.n	401048 <twihs_master_write+0x98>
  401046:	2005      	movs	r0, #5
}
  401048:	bc70      	pop	{r4, r5, r6}
  40104a:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  40104c:	2005      	movs	r0, #5
  40104e:	e7fb      	b.n	401048 <twihs_master_write+0x98>

00401050 <xdmac_configure_transfer>:
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  401050:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  401054:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  401056:	6853      	ldr	r3, [r2, #4]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  401058:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  40105a:	6893      	ldr	r3, [r2, #8]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  40105c:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  40105e:	6813      	ldr	r3, [r2, #0]
  401060:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401064:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  401066:	6913      	ldr	r3, [r2, #16]
  401068:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40106c:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  40106e:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  401070:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  401072:	6993      	ldr	r3, [r2, #24]
  401074:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401078:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  40107c:	69d3      	ldr	r3, [r2, #28]
  40107e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401082:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  401086:	68d3      	ldr	r3, [r2, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  401088:	678b      	str	r3, [r1, #120]	; 0x78
  40108a:	4770      	bx	lr

0040108c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40108c:	e7fe      	b.n	40108c <Dummy_Handler>
	...

00401090 <Reset_Handler>:
{
  401090:	b500      	push	{lr}
  401092:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401094:	4b25      	ldr	r3, [pc, #148]	; (40112c <Reset_Handler+0x9c>)
  401096:	4a26      	ldr	r2, [pc, #152]	; (401130 <Reset_Handler+0xa0>)
  401098:	429a      	cmp	r2, r3
  40109a:	d010      	beq.n	4010be <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  40109c:	4b25      	ldr	r3, [pc, #148]	; (401134 <Reset_Handler+0xa4>)
  40109e:	4a23      	ldr	r2, [pc, #140]	; (40112c <Reset_Handler+0x9c>)
  4010a0:	429a      	cmp	r2, r3
  4010a2:	d20c      	bcs.n	4010be <Reset_Handler+0x2e>
  4010a4:	3b01      	subs	r3, #1
  4010a6:	1a9b      	subs	r3, r3, r2
  4010a8:	f023 0303 	bic.w	r3, r3, #3
  4010ac:	3304      	adds	r3, #4
  4010ae:	4413      	add	r3, r2
  4010b0:	491f      	ldr	r1, [pc, #124]	; (401130 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4010b2:	f851 0b04 	ldr.w	r0, [r1], #4
  4010b6:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4010ba:	429a      	cmp	r2, r3
  4010bc:	d1f9      	bne.n	4010b2 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4010be:	4b1e      	ldr	r3, [pc, #120]	; (401138 <Reset_Handler+0xa8>)
  4010c0:	4a1e      	ldr	r2, [pc, #120]	; (40113c <Reset_Handler+0xac>)
  4010c2:	429a      	cmp	r2, r3
  4010c4:	d20a      	bcs.n	4010dc <Reset_Handler+0x4c>
  4010c6:	3b01      	subs	r3, #1
  4010c8:	1a9b      	subs	r3, r3, r2
  4010ca:	f023 0303 	bic.w	r3, r3, #3
  4010ce:	3304      	adds	r3, #4
  4010d0:	4413      	add	r3, r2
                *pDest++ = 0;
  4010d2:	2100      	movs	r1, #0
  4010d4:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4010d8:	4293      	cmp	r3, r2
  4010da:	d1fb      	bne.n	4010d4 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4010dc:	4a18      	ldr	r2, [pc, #96]	; (401140 <Reset_Handler+0xb0>)
  4010de:	4b19      	ldr	r3, [pc, #100]	; (401144 <Reset_Handler+0xb4>)
  4010e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4010e4:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4010e6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4010ea:	fab3 f383 	clz	r3, r3
  4010ee:	095b      	lsrs	r3, r3, #5
  4010f0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4010f2:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4010f4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4010f8:	2200      	movs	r2, #0
  4010fa:	4b13      	ldr	r3, [pc, #76]	; (401148 <Reset_Handler+0xb8>)
  4010fc:	701a      	strb	r2, [r3, #0]
	return flags;
  4010fe:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401100:	4a12      	ldr	r2, [pc, #72]	; (40114c <Reset_Handler+0xbc>)
  401102:	6813      	ldr	r3, [r2, #0]
  401104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401108:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40110a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40110e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401112:	b129      	cbz	r1, 401120 <Reset_Handler+0x90>
		cpu_irq_enable();
  401114:	2201      	movs	r2, #1
  401116:	4b0c      	ldr	r3, [pc, #48]	; (401148 <Reset_Handler+0xb8>)
  401118:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40111a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40111e:	b662      	cpsie	i
        __libc_init_array();
  401120:	4b0b      	ldr	r3, [pc, #44]	; (401150 <Reset_Handler+0xc0>)
  401122:	4798      	blx	r3
        main();
  401124:	4b0b      	ldr	r3, [pc, #44]	; (401154 <Reset_Handler+0xc4>)
  401126:	4798      	blx	r3
  401128:	e7fe      	b.n	401128 <Reset_Handler+0x98>
  40112a:	bf00      	nop
  40112c:	20400000 	.word	0x20400000
  401130:	00404414 	.word	0x00404414
  401134:	204009d0 	.word	0x204009d0
  401138:	20401b0c 	.word	0x20401b0c
  40113c:	204009d0 	.word	0x204009d0
  401140:	e000ed00 	.word	0xe000ed00
  401144:	00400000 	.word	0x00400000
  401148:	2040001c 	.word	0x2040001c
  40114c:	e000ed88 	.word	0xe000ed88
  401150:	00401481 	.word	0x00401481
  401154:	004013a9 	.word	0x004013a9

00401158 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401158:	4b3b      	ldr	r3, [pc, #236]	; (401248 <SystemCoreClockUpdate+0xf0>)
  40115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40115c:	f003 0303 	and.w	r3, r3, #3
  401160:	2b01      	cmp	r3, #1
  401162:	d01d      	beq.n	4011a0 <SystemCoreClockUpdate+0x48>
  401164:	b183      	cbz	r3, 401188 <SystemCoreClockUpdate+0x30>
  401166:	2b02      	cmp	r3, #2
  401168:	d036      	beq.n	4011d8 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40116a:	4b37      	ldr	r3, [pc, #220]	; (401248 <SystemCoreClockUpdate+0xf0>)
  40116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40116e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401172:	2b70      	cmp	r3, #112	; 0x70
  401174:	d05f      	beq.n	401236 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401176:	4b34      	ldr	r3, [pc, #208]	; (401248 <SystemCoreClockUpdate+0xf0>)
  401178:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40117a:	4934      	ldr	r1, [pc, #208]	; (40124c <SystemCoreClockUpdate+0xf4>)
  40117c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401180:	680b      	ldr	r3, [r1, #0]
  401182:	40d3      	lsrs	r3, r2
  401184:	600b      	str	r3, [r1, #0]
  401186:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401188:	4b31      	ldr	r3, [pc, #196]	; (401250 <SystemCoreClockUpdate+0xf8>)
  40118a:	695b      	ldr	r3, [r3, #20]
  40118c:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401190:	bf14      	ite	ne
  401192:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401196:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40119a:	4b2c      	ldr	r3, [pc, #176]	; (40124c <SystemCoreClockUpdate+0xf4>)
  40119c:	601a      	str	r2, [r3, #0]
  40119e:	e7e4      	b.n	40116a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4011a0:	4b29      	ldr	r3, [pc, #164]	; (401248 <SystemCoreClockUpdate+0xf0>)
  4011a2:	6a1b      	ldr	r3, [r3, #32]
  4011a4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4011a8:	d003      	beq.n	4011b2 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4011aa:	4a2a      	ldr	r2, [pc, #168]	; (401254 <SystemCoreClockUpdate+0xfc>)
  4011ac:	4b27      	ldr	r3, [pc, #156]	; (40124c <SystemCoreClockUpdate+0xf4>)
  4011ae:	601a      	str	r2, [r3, #0]
  4011b0:	e7db      	b.n	40116a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4011b2:	4a29      	ldr	r2, [pc, #164]	; (401258 <SystemCoreClockUpdate+0x100>)
  4011b4:	4b25      	ldr	r3, [pc, #148]	; (40124c <SystemCoreClockUpdate+0xf4>)
  4011b6:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4011b8:	4b23      	ldr	r3, [pc, #140]	; (401248 <SystemCoreClockUpdate+0xf0>)
  4011ba:	6a1b      	ldr	r3, [r3, #32]
  4011bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4011c0:	2b10      	cmp	r3, #16
  4011c2:	d005      	beq.n	4011d0 <SystemCoreClockUpdate+0x78>
  4011c4:	2b20      	cmp	r3, #32
  4011c6:	d1d0      	bne.n	40116a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4011c8:	4a22      	ldr	r2, [pc, #136]	; (401254 <SystemCoreClockUpdate+0xfc>)
  4011ca:	4b20      	ldr	r3, [pc, #128]	; (40124c <SystemCoreClockUpdate+0xf4>)
  4011cc:	601a      	str	r2, [r3, #0]
          break;
  4011ce:	e7cc      	b.n	40116a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4011d0:	4a22      	ldr	r2, [pc, #136]	; (40125c <SystemCoreClockUpdate+0x104>)
  4011d2:	4b1e      	ldr	r3, [pc, #120]	; (40124c <SystemCoreClockUpdate+0xf4>)
  4011d4:	601a      	str	r2, [r3, #0]
          break;
  4011d6:	e7c8      	b.n	40116a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4011d8:	4b1b      	ldr	r3, [pc, #108]	; (401248 <SystemCoreClockUpdate+0xf0>)
  4011da:	6a1b      	ldr	r3, [r3, #32]
  4011dc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4011e0:	d016      	beq.n	401210 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4011e2:	4a1c      	ldr	r2, [pc, #112]	; (401254 <SystemCoreClockUpdate+0xfc>)
  4011e4:	4b19      	ldr	r3, [pc, #100]	; (40124c <SystemCoreClockUpdate+0xf4>)
  4011e6:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4011e8:	4b17      	ldr	r3, [pc, #92]	; (401248 <SystemCoreClockUpdate+0xf0>)
  4011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4011ec:	f003 0303 	and.w	r3, r3, #3
  4011f0:	2b02      	cmp	r3, #2
  4011f2:	d1ba      	bne.n	40116a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4011f4:	4a14      	ldr	r2, [pc, #80]	; (401248 <SystemCoreClockUpdate+0xf0>)
  4011f6:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4011f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4011fa:	4814      	ldr	r0, [pc, #80]	; (40124c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4011fc:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401200:	6803      	ldr	r3, [r0, #0]
  401202:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401206:	b2d2      	uxtb	r2, r2
  401208:	fbb3 f3f2 	udiv	r3, r3, r2
  40120c:	6003      	str	r3, [r0, #0]
  40120e:	e7ac      	b.n	40116a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401210:	4a11      	ldr	r2, [pc, #68]	; (401258 <SystemCoreClockUpdate+0x100>)
  401212:	4b0e      	ldr	r3, [pc, #56]	; (40124c <SystemCoreClockUpdate+0xf4>)
  401214:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401216:	4b0c      	ldr	r3, [pc, #48]	; (401248 <SystemCoreClockUpdate+0xf0>)
  401218:	6a1b      	ldr	r3, [r3, #32]
  40121a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40121e:	2b10      	cmp	r3, #16
  401220:	d005      	beq.n	40122e <SystemCoreClockUpdate+0xd6>
  401222:	2b20      	cmp	r3, #32
  401224:	d1e0      	bne.n	4011e8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401226:	4a0b      	ldr	r2, [pc, #44]	; (401254 <SystemCoreClockUpdate+0xfc>)
  401228:	4b08      	ldr	r3, [pc, #32]	; (40124c <SystemCoreClockUpdate+0xf4>)
  40122a:	601a      	str	r2, [r3, #0]
          break;
  40122c:	e7dc      	b.n	4011e8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40122e:	4a0b      	ldr	r2, [pc, #44]	; (40125c <SystemCoreClockUpdate+0x104>)
  401230:	4b06      	ldr	r3, [pc, #24]	; (40124c <SystemCoreClockUpdate+0xf4>)
  401232:	601a      	str	r2, [r3, #0]
          break;
  401234:	e7d8      	b.n	4011e8 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401236:	4a05      	ldr	r2, [pc, #20]	; (40124c <SystemCoreClockUpdate+0xf4>)
  401238:	6813      	ldr	r3, [r2, #0]
  40123a:	4909      	ldr	r1, [pc, #36]	; (401260 <SystemCoreClockUpdate+0x108>)
  40123c:	fba1 1303 	umull	r1, r3, r1, r3
  401240:	085b      	lsrs	r3, r3, #1
  401242:	6013      	str	r3, [r2, #0]
  401244:	4770      	bx	lr
  401246:	bf00      	nop
  401248:	400e0600 	.word	0x400e0600
  40124c:	20400020 	.word	0x20400020
  401250:	400e1810 	.word	0x400e1810
  401254:	00b71b00 	.word	0x00b71b00
  401258:	003d0900 	.word	0x003d0900
  40125c:	007a1200 	.word	0x007a1200
  401260:	aaaaaaab 	.word	0xaaaaaaab

00401264 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401264:	4b16      	ldr	r3, [pc, #88]	; (4012c0 <system_init_flash+0x5c>)
  401266:	4298      	cmp	r0, r3
  401268:	d913      	bls.n	401292 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40126a:	4b16      	ldr	r3, [pc, #88]	; (4012c4 <system_init_flash+0x60>)
  40126c:	4298      	cmp	r0, r3
  40126e:	d915      	bls.n	40129c <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401270:	4b15      	ldr	r3, [pc, #84]	; (4012c8 <system_init_flash+0x64>)
  401272:	4298      	cmp	r0, r3
  401274:	d916      	bls.n	4012a4 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401276:	4b15      	ldr	r3, [pc, #84]	; (4012cc <system_init_flash+0x68>)
  401278:	4298      	cmp	r0, r3
  40127a:	d917      	bls.n	4012ac <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  40127c:	4b14      	ldr	r3, [pc, #80]	; (4012d0 <system_init_flash+0x6c>)
  40127e:	4298      	cmp	r0, r3
  401280:	d918      	bls.n	4012b4 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401282:	4b14      	ldr	r3, [pc, #80]	; (4012d4 <system_init_flash+0x70>)
  401284:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401286:	bf94      	ite	ls
  401288:	4a13      	ldrls	r2, [pc, #76]	; (4012d8 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  40128a:	4a14      	ldrhi	r2, [pc, #80]	; (4012dc <system_init_flash+0x78>)
  40128c:	4b14      	ldr	r3, [pc, #80]	; (4012e0 <system_init_flash+0x7c>)
  40128e:	601a      	str	r2, [r3, #0]
  401290:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401292:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401296:	4b12      	ldr	r3, [pc, #72]	; (4012e0 <system_init_flash+0x7c>)
  401298:	601a      	str	r2, [r3, #0]
  40129a:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40129c:	4a11      	ldr	r2, [pc, #68]	; (4012e4 <system_init_flash+0x80>)
  40129e:	4b10      	ldr	r3, [pc, #64]	; (4012e0 <system_init_flash+0x7c>)
  4012a0:	601a      	str	r2, [r3, #0]
  4012a2:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4012a4:	4a10      	ldr	r2, [pc, #64]	; (4012e8 <system_init_flash+0x84>)
  4012a6:	4b0e      	ldr	r3, [pc, #56]	; (4012e0 <system_init_flash+0x7c>)
  4012a8:	601a      	str	r2, [r3, #0]
  4012aa:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4012ac:	4a0f      	ldr	r2, [pc, #60]	; (4012ec <system_init_flash+0x88>)
  4012ae:	4b0c      	ldr	r3, [pc, #48]	; (4012e0 <system_init_flash+0x7c>)
  4012b0:	601a      	str	r2, [r3, #0]
  4012b2:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4012b4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4012b8:	4b09      	ldr	r3, [pc, #36]	; (4012e0 <system_init_flash+0x7c>)
  4012ba:	601a      	str	r2, [r3, #0]
  4012bc:	4770      	bx	lr
  4012be:	bf00      	nop
  4012c0:	015ef3bf 	.word	0x015ef3bf
  4012c4:	02bde77f 	.word	0x02bde77f
  4012c8:	041cdb3f 	.word	0x041cdb3f
  4012cc:	057bceff 	.word	0x057bceff
  4012d0:	06dac2bf 	.word	0x06dac2bf
  4012d4:	0839b67f 	.word	0x0839b67f
  4012d8:	04000500 	.word	0x04000500
  4012dc:	04000600 	.word	0x04000600
  4012e0:	400e0c00 	.word	0x400e0c00
  4012e4:	04000100 	.word	0x04000100
  4012e8:	04000200 	.word	0x04000200
  4012ec:	04000300 	.word	0x04000300

004012f0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4012f0:	4b0a      	ldr	r3, [pc, #40]	; (40131c <_sbrk+0x2c>)
  4012f2:	681b      	ldr	r3, [r3, #0]
  4012f4:	b153      	cbz	r3, 40130c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4012f6:	4b09      	ldr	r3, [pc, #36]	; (40131c <_sbrk+0x2c>)
  4012f8:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4012fa:	181a      	adds	r2, r3, r0
  4012fc:	4908      	ldr	r1, [pc, #32]	; (401320 <_sbrk+0x30>)
  4012fe:	4291      	cmp	r1, r2
  401300:	db08      	blt.n	401314 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401302:	4610      	mov	r0, r2
  401304:	4a05      	ldr	r2, [pc, #20]	; (40131c <_sbrk+0x2c>)
  401306:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401308:	4618      	mov	r0, r3
  40130a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  40130c:	4a05      	ldr	r2, [pc, #20]	; (401324 <_sbrk+0x34>)
  40130e:	4b03      	ldr	r3, [pc, #12]	; (40131c <_sbrk+0x2c>)
  401310:	601a      	str	r2, [r3, #0]
  401312:	e7f0      	b.n	4012f6 <_sbrk+0x6>
		return (caddr_t) -1;	
  401314:	f04f 30ff 	mov.w	r0, #4294967295
}
  401318:	4770      	bx	lr
  40131a:	bf00      	nop
  40131c:	20401aa0 	.word	0x20401aa0
  401320:	2045fffc 	.word	0x2045fffc
  401324:	20403d10 	.word	0x20403d10

00401328 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401328:	f04f 30ff 	mov.w	r0, #4294967295
  40132c:	4770      	bx	lr

0040132e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40132e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401332:	604b      	str	r3, [r1, #4]

	return 0;
}
  401334:	2000      	movs	r0, #0
  401336:	4770      	bx	lr

00401338 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401338:	2001      	movs	r0, #1
  40133a:	4770      	bx	lr

0040133c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  40133c:	2000      	movs	r0, #0
  40133e:	4770      	bx	lr

00401340 <SCB_CleanInvalidateDCache>:
/** \brief Clean & Invalidate D-Cache

    The function cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache(void)
{
  401340:	b5f0      	push	{r4, r5, r6, r7, lr}
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  401342:	4b18      	ldr	r3, [pc, #96]	; (4013a4 <SCB_CleanInvalidateDCache+0x64>)
  401344:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  401348:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40134c:	f007 0007 	and.w	r0, r7, #7
  401350:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  401352:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  401356:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  40135a:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  40135e:	f3bf 8f4f 	dsb	sy
  401362:	f04f 34ff 	mov.w	r4, #4294967295
  401366:	fa04 fc00 	lsl.w	ip, r4, r0
  40136a:	fa06 f000 	lsl.w	r0, r6, r0
  40136e:	fa04 f40e 	lsl.w	r4, r4, lr
  401372:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // clean & invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCCISW = sw;
  401376:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  401378:	463a      	mov	r2, r7
  40137a:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  40137c:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  401380:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  401384:	3a01      	subs	r2, #1
  401386:	4423      	add	r3, r4
  401388:	f1b2 3fff 	cmp.w	r2, #4294967295
  40138c:	d1f6      	bne.n	40137c <SCB_CleanInvalidateDCache+0x3c>
        } while(sets--);
  40138e:	3e01      	subs	r6, #1
  401390:	4460      	add	r0, ip
  401392:	f1b6 3fff 	cmp.w	r6, #4294967295
  401396:	d1ef      	bne.n	401378 <SCB_CleanInvalidateDCache+0x38>
  401398:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40139c:	f3bf 8f6f 	isb	sy
  4013a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4013a2:	bf00      	nop
  4013a4:	e000ed00 	.word	0xe000ed00

004013a8 <main>:
	-3426, 		 -3426,
	-1715, 		 -1715
};

int main(void)
{
  4013a8:	b570      	push	{r4, r5, r6, lr}
    /* Initialize the SAM system. */
    sysclk_init();
  4013aa:	4b21      	ldr	r3, [pc, #132]	; (401430 <main+0x88>)
  4013ac:	4798      	blx	r3
    board_init();
  4013ae:	4b21      	ldr	r3, [pc, #132]	; (401434 <main+0x8c>)
  4013b0:	4798      	blx	r3
    
    /* Initialize WM8904 TWI interface*/
    if (wm8904_twi_init() != TWIHS_SUCCESS) {
  4013b2:	4b21      	ldr	r3, [pc, #132]	; (401438 <main+0x90>)
  4013b4:	4798      	blx	r3
  4013b6:	b118      	cbz	r0, 4013c0 <main+0x18>
        printf("-E-\tWM8904 initialization failed.\r");
  4013b8:	4820      	ldr	r0, [pc, #128]	; (40143c <main+0x94>)
  4013ba:	4b21      	ldr	r3, [pc, #132]	; (401440 <main+0x98>)
  4013bc:	4798      	blx	r3
  4013be:	e7fe      	b.n	4013be <main+0x16>
            /* Capture error */
        }
    }
	
    /* Configure CODEC */
    configure_codec();
  4013c0:	4b20      	ldr	r3, [pc, #128]	; (401444 <main+0x9c>)
  4013c2:	4798      	blx	r3
    
    /* Configure SSC */
    configure_ssc();
  4013c4:	4b20      	ldr	r3, [pc, #128]	; (401448 <main+0xa0>)
  4013c6:	4798      	blx	r3
    
    /* Configure XDMA */
    configure_xdma();
  4013c8:	4b20      	ldr	r3, [pc, #128]	; (40144c <main+0xa4>)
  4013ca:	4798      	blx	r3
    
    /* Enable the DAC master clock */
    pmc_pck_set_prescaler(PMC_PCK_2, PMC_MCKR_PRES_CLK_1);
  4013cc:	2100      	movs	r1, #0
  4013ce:	2002      	movs	r0, #2
  4013d0:	4b1f      	ldr	r3, [pc, #124]	; (401450 <main+0xa8>)
  4013d2:	4798      	blx	r3
    pmc_pck_set_source(PMC_PCK_2, PMC_MCKR_CSS_SLOW_CLK);
  4013d4:	2100      	movs	r1, #0
  4013d6:	2002      	movs	r0, #2
  4013d8:	4b1e      	ldr	r3, [pc, #120]	; (401454 <main+0xac>)
  4013da:	4798      	blx	r3
    pmc_enable_pck(PMC_PCK_2);
  4013dc:	2002      	movs	r0, #2
  4013de:	4b1e      	ldr	r3, [pc, #120]	; (401458 <main+0xb0>)
  4013e0:	4798      	blx	r3
    
    /* Start playing */
    ssc_enable_rx(SSC);
  4013e2:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4013e6:	4b1d      	ldr	r3, [pc, #116]	; (40145c <main+0xb4>)
  4013e8:	4798      	blx	r3
	SCB_CleanInvalidateDCache();
  4013ea:	4d1d      	ldr	r5, [pc, #116]	; (401460 <main+0xb8>)
  4013ec:	47a8      	blx	r5
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  4013ee:	4c1d      	ldr	r4, [pc, #116]	; (401464 <main+0xbc>)
  4013f0:	2301      	movs	r3, #1
  4013f2:	61e3      	str	r3, [r4, #28]
    xdmac_channel_enable(XDMAC, XDMA_CH_SSC_RX);
	delay_ms(300);
  4013f4:	481c      	ldr	r0, [pc, #112]	; (401468 <main+0xc0>)
  4013f6:	4b1d      	ldr	r3, [pc, #116]	; (40146c <main+0xc4>)
  4013f8:	4798      	blx	r3
    ssc_enable_tx(SSC);
  4013fa:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4013fe:	4b1c      	ldr	r3, [pc, #112]	; (401470 <main+0xc8>)
  401400:	4798      	blx	r3
	SCB_CleanInvalidateDCache();
  401402:	47a8      	blx	r5
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  401404:	2302      	movs	r3, #2
  401406:	61e3      	str	r3, [r4, #28]
	int i; 
	int sinIdx = 0; 
    while(1)
    {
		
		if (dataReceived)
  401408:	4d1a      	ldr	r5, [pc, #104]	; (401474 <main+0xcc>)
		{
			for(i = 0; i < BUF_SIZE; i++)
			{
				
				outBuffer[i] = inBuffer[i]; 
  40140a:	4c1b      	ldr	r4, [pc, #108]	; (401478 <main+0xd0>)
  40140c:	481b      	ldr	r0, [pc, #108]	; (40147c <main+0xd4>)
				//outBuffer[i] = (uint16_t) ( ( (int32_t)((int16_t)inBuffer[i]) + (int32_t)(sin_wave[sinIdx++]/16) ) / 2 ); 
				//if(sinIdx == 240) sinIdx = 0; 
			}
			dataReceived = 0; 
  40140e:	2600      	movs	r6, #0
  401410:	e000      	b.n	401414 <main+0x6c>
  401412:	602e      	str	r6, [r5, #0]
		if (dataReceived)
  401414:	682b      	ldr	r3, [r5, #0]
  401416:	2b00      	cmp	r3, #0
  401418:	d0fc      	beq.n	401414 <main+0x6c>
  40141a:	2300      	movs	r3, #0
				outBuffer[i] = inBuffer[i]; 
  40141c:	6802      	ldr	r2, [r0, #0]
  40141e:	5ad2      	ldrh	r2, [r2, r3]
  401420:	b292      	uxth	r2, r2
  401422:	6821      	ldr	r1, [r4, #0]
  401424:	52ca      	strh	r2, [r1, r3]
  401426:	3302      	adds	r3, #2
			for(i = 0; i < BUF_SIZE; i++)
  401428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  40142c:	d1f6      	bne.n	40141c <main+0x74>
  40142e:	e7f0      	b.n	401412 <main+0x6a>
  401430:	00400501 	.word	0x00400501
  401434:	00400601 	.word	0x00400601
  401438:	004007d1 	.word	0x004007d1
  40143c:	0040425c 	.word	0x0040425c
  401440:	004014d1 	.word	0x004014d1
  401444:	004003d9 	.word	0x004003d9
  401448:	00400321 	.word	0x00400321
  40144c:	00400235 	.word	0x00400235
  401450:	00400c99 	.word	0x00400c99
  401454:	00400cc5 	.word	0x00400cc5
  401458:	00400cf1 	.word	0x00400cf1
  40145c:	00400d19 	.word	0x00400d19
  401460:	00401341 	.word	0x00401341
  401464:	40078000 	.word	0x40078000
  401468:	0073c0b7 	.word	0x0073c0b7
  40146c:	20400001 	.word	0x20400001
  401470:	00400d25 	.word	0x00400d25
  401474:	204009ec 	.word	0x204009ec
  401478:	20400014 	.word	0x20400014
  40147c:	2040000c 	.word	0x2040000c

00401480 <__libc_init_array>:
  401480:	b570      	push	{r4, r5, r6, lr}
  401482:	4e0f      	ldr	r6, [pc, #60]	; (4014c0 <__libc_init_array+0x40>)
  401484:	4d0f      	ldr	r5, [pc, #60]	; (4014c4 <__libc_init_array+0x44>)
  401486:	1b76      	subs	r6, r6, r5
  401488:	10b6      	asrs	r6, r6, #2
  40148a:	bf18      	it	ne
  40148c:	2400      	movne	r4, #0
  40148e:	d005      	beq.n	40149c <__libc_init_array+0x1c>
  401490:	3401      	adds	r4, #1
  401492:	f855 3b04 	ldr.w	r3, [r5], #4
  401496:	4798      	blx	r3
  401498:	42a6      	cmp	r6, r4
  40149a:	d1f9      	bne.n	401490 <__libc_init_array+0x10>
  40149c:	4e0a      	ldr	r6, [pc, #40]	; (4014c8 <__libc_init_array+0x48>)
  40149e:	4d0b      	ldr	r5, [pc, #44]	; (4014cc <__libc_init_array+0x4c>)
  4014a0:	1b76      	subs	r6, r6, r5
  4014a2:	f002 ffa1 	bl	4043e8 <_init>
  4014a6:	10b6      	asrs	r6, r6, #2
  4014a8:	bf18      	it	ne
  4014aa:	2400      	movne	r4, #0
  4014ac:	d006      	beq.n	4014bc <__libc_init_array+0x3c>
  4014ae:	3401      	adds	r4, #1
  4014b0:	f855 3b04 	ldr.w	r3, [r5], #4
  4014b4:	4798      	blx	r3
  4014b6:	42a6      	cmp	r6, r4
  4014b8:	d1f9      	bne.n	4014ae <__libc_init_array+0x2e>
  4014ba:	bd70      	pop	{r4, r5, r6, pc}
  4014bc:	bd70      	pop	{r4, r5, r6, pc}
  4014be:	bf00      	nop
  4014c0:	004043f4 	.word	0x004043f4
  4014c4:	004043f4 	.word	0x004043f4
  4014c8:	004043fc 	.word	0x004043fc
  4014cc:	004043f4 	.word	0x004043f4

004014d0 <iprintf>:
  4014d0:	b40f      	push	{r0, r1, r2, r3}
  4014d2:	b500      	push	{lr}
  4014d4:	4907      	ldr	r1, [pc, #28]	; (4014f4 <iprintf+0x24>)
  4014d6:	b083      	sub	sp, #12
  4014d8:	ab04      	add	r3, sp, #16
  4014da:	6808      	ldr	r0, [r1, #0]
  4014dc:	f853 2b04 	ldr.w	r2, [r3], #4
  4014e0:	6881      	ldr	r1, [r0, #8]
  4014e2:	9301      	str	r3, [sp, #4]
  4014e4:	f000 f896 	bl	401614 <_vfiprintf_r>
  4014e8:	b003      	add	sp, #12
  4014ea:	f85d eb04 	ldr.w	lr, [sp], #4
  4014ee:	b004      	add	sp, #16
  4014f0:	4770      	bx	lr
  4014f2:	bf00      	nop
  4014f4:	20400024 	.word	0x20400024

004014f8 <memset>:
  4014f8:	b470      	push	{r4, r5, r6}
  4014fa:	0786      	lsls	r6, r0, #30
  4014fc:	d046      	beq.n	40158c <memset+0x94>
  4014fe:	1e54      	subs	r4, r2, #1
  401500:	2a00      	cmp	r2, #0
  401502:	d041      	beq.n	401588 <memset+0x90>
  401504:	b2ca      	uxtb	r2, r1
  401506:	4603      	mov	r3, r0
  401508:	e002      	b.n	401510 <memset+0x18>
  40150a:	f114 34ff 	adds.w	r4, r4, #4294967295
  40150e:	d33b      	bcc.n	401588 <memset+0x90>
  401510:	f803 2b01 	strb.w	r2, [r3], #1
  401514:	079d      	lsls	r5, r3, #30
  401516:	d1f8      	bne.n	40150a <memset+0x12>
  401518:	2c03      	cmp	r4, #3
  40151a:	d92e      	bls.n	40157a <memset+0x82>
  40151c:	b2cd      	uxtb	r5, r1
  40151e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401522:	2c0f      	cmp	r4, #15
  401524:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401528:	d919      	bls.n	40155e <memset+0x66>
  40152a:	f103 0210 	add.w	r2, r3, #16
  40152e:	4626      	mov	r6, r4
  401530:	3e10      	subs	r6, #16
  401532:	2e0f      	cmp	r6, #15
  401534:	f842 5c10 	str.w	r5, [r2, #-16]
  401538:	f842 5c0c 	str.w	r5, [r2, #-12]
  40153c:	f842 5c08 	str.w	r5, [r2, #-8]
  401540:	f842 5c04 	str.w	r5, [r2, #-4]
  401544:	f102 0210 	add.w	r2, r2, #16
  401548:	d8f2      	bhi.n	401530 <memset+0x38>
  40154a:	f1a4 0210 	sub.w	r2, r4, #16
  40154e:	f022 020f 	bic.w	r2, r2, #15
  401552:	f004 040f 	and.w	r4, r4, #15
  401556:	3210      	adds	r2, #16
  401558:	2c03      	cmp	r4, #3
  40155a:	4413      	add	r3, r2
  40155c:	d90d      	bls.n	40157a <memset+0x82>
  40155e:	461e      	mov	r6, r3
  401560:	4622      	mov	r2, r4
  401562:	3a04      	subs	r2, #4
  401564:	2a03      	cmp	r2, #3
  401566:	f846 5b04 	str.w	r5, [r6], #4
  40156a:	d8fa      	bhi.n	401562 <memset+0x6a>
  40156c:	1f22      	subs	r2, r4, #4
  40156e:	f022 0203 	bic.w	r2, r2, #3
  401572:	3204      	adds	r2, #4
  401574:	4413      	add	r3, r2
  401576:	f004 0403 	and.w	r4, r4, #3
  40157a:	b12c      	cbz	r4, 401588 <memset+0x90>
  40157c:	b2c9      	uxtb	r1, r1
  40157e:	441c      	add	r4, r3
  401580:	f803 1b01 	strb.w	r1, [r3], #1
  401584:	429c      	cmp	r4, r3
  401586:	d1fb      	bne.n	401580 <memset+0x88>
  401588:	bc70      	pop	{r4, r5, r6}
  40158a:	4770      	bx	lr
  40158c:	4614      	mov	r4, r2
  40158e:	4603      	mov	r3, r0
  401590:	e7c2      	b.n	401518 <memset+0x20>
  401592:	bf00      	nop

00401594 <__sprint_r.part.0>:
  401594:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401598:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40159a:	049c      	lsls	r4, r3, #18
  40159c:	4693      	mov	fp, r2
  40159e:	d52f      	bpl.n	401600 <__sprint_r.part.0+0x6c>
  4015a0:	6893      	ldr	r3, [r2, #8]
  4015a2:	6812      	ldr	r2, [r2, #0]
  4015a4:	b353      	cbz	r3, 4015fc <__sprint_r.part.0+0x68>
  4015a6:	460e      	mov	r6, r1
  4015a8:	4607      	mov	r7, r0
  4015aa:	f102 0908 	add.w	r9, r2, #8
  4015ae:	e919 0420 	ldmdb	r9, {r5, sl}
  4015b2:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4015b6:	d017      	beq.n	4015e8 <__sprint_r.part.0+0x54>
  4015b8:	3d04      	subs	r5, #4
  4015ba:	2400      	movs	r4, #0
  4015bc:	e001      	b.n	4015c2 <__sprint_r.part.0+0x2e>
  4015be:	45a0      	cmp	r8, r4
  4015c0:	d010      	beq.n	4015e4 <__sprint_r.part.0+0x50>
  4015c2:	4632      	mov	r2, r6
  4015c4:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4015c8:	4638      	mov	r0, r7
  4015ca:	f001 f8bb 	bl	402744 <_fputwc_r>
  4015ce:	1c43      	adds	r3, r0, #1
  4015d0:	f104 0401 	add.w	r4, r4, #1
  4015d4:	d1f3      	bne.n	4015be <__sprint_r.part.0+0x2a>
  4015d6:	2300      	movs	r3, #0
  4015d8:	f8cb 3008 	str.w	r3, [fp, #8]
  4015dc:	f8cb 3004 	str.w	r3, [fp, #4]
  4015e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4015e4:	f8db 3008 	ldr.w	r3, [fp, #8]
  4015e8:	f02a 0a03 	bic.w	sl, sl, #3
  4015ec:	eba3 030a 	sub.w	r3, r3, sl
  4015f0:	f8cb 3008 	str.w	r3, [fp, #8]
  4015f4:	f109 0908 	add.w	r9, r9, #8
  4015f8:	2b00      	cmp	r3, #0
  4015fa:	d1d8      	bne.n	4015ae <__sprint_r.part.0+0x1a>
  4015fc:	2000      	movs	r0, #0
  4015fe:	e7ea      	b.n	4015d6 <__sprint_r.part.0+0x42>
  401600:	f001 fa0a 	bl	402a18 <__sfvwrite_r>
  401604:	2300      	movs	r3, #0
  401606:	f8cb 3008 	str.w	r3, [fp, #8]
  40160a:	f8cb 3004 	str.w	r3, [fp, #4]
  40160e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401612:	bf00      	nop

00401614 <_vfiprintf_r>:
  401614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401618:	b0ad      	sub	sp, #180	; 0xb4
  40161a:	461d      	mov	r5, r3
  40161c:	468b      	mov	fp, r1
  40161e:	4690      	mov	r8, r2
  401620:	9307      	str	r3, [sp, #28]
  401622:	9006      	str	r0, [sp, #24]
  401624:	b118      	cbz	r0, 40162e <_vfiprintf_r+0x1a>
  401626:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401628:	2b00      	cmp	r3, #0
  40162a:	f000 80f3 	beq.w	401814 <_vfiprintf_r+0x200>
  40162e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401632:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  401636:	07df      	lsls	r7, r3, #31
  401638:	b281      	uxth	r1, r0
  40163a:	d402      	bmi.n	401642 <_vfiprintf_r+0x2e>
  40163c:	058e      	lsls	r6, r1, #22
  40163e:	f140 80fc 	bpl.w	40183a <_vfiprintf_r+0x226>
  401642:	048c      	lsls	r4, r1, #18
  401644:	d40a      	bmi.n	40165c <_vfiprintf_r+0x48>
  401646:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40164a:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  40164e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  401652:	f8ab 100c 	strh.w	r1, [fp, #12]
  401656:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  40165a:	b289      	uxth	r1, r1
  40165c:	0708      	lsls	r0, r1, #28
  40165e:	f140 80b3 	bpl.w	4017c8 <_vfiprintf_r+0x1b4>
  401662:	f8db 3010 	ldr.w	r3, [fp, #16]
  401666:	2b00      	cmp	r3, #0
  401668:	f000 80ae 	beq.w	4017c8 <_vfiprintf_r+0x1b4>
  40166c:	f001 031a 	and.w	r3, r1, #26
  401670:	2b0a      	cmp	r3, #10
  401672:	f000 80b5 	beq.w	4017e0 <_vfiprintf_r+0x1cc>
  401676:	2300      	movs	r3, #0
  401678:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  40167c:	930b      	str	r3, [sp, #44]	; 0x2c
  40167e:	9311      	str	r3, [sp, #68]	; 0x44
  401680:	9310      	str	r3, [sp, #64]	; 0x40
  401682:	9303      	str	r3, [sp, #12]
  401684:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  401688:	46ca      	mov	sl, r9
  40168a:	f8cd b010 	str.w	fp, [sp, #16]
  40168e:	f898 3000 	ldrb.w	r3, [r8]
  401692:	4644      	mov	r4, r8
  401694:	b1fb      	cbz	r3, 4016d6 <_vfiprintf_r+0xc2>
  401696:	2b25      	cmp	r3, #37	; 0x25
  401698:	d102      	bne.n	4016a0 <_vfiprintf_r+0x8c>
  40169a:	e01c      	b.n	4016d6 <_vfiprintf_r+0xc2>
  40169c:	2b25      	cmp	r3, #37	; 0x25
  40169e:	d003      	beq.n	4016a8 <_vfiprintf_r+0x94>
  4016a0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4016a4:	2b00      	cmp	r3, #0
  4016a6:	d1f9      	bne.n	40169c <_vfiprintf_r+0x88>
  4016a8:	eba4 0508 	sub.w	r5, r4, r8
  4016ac:	b19d      	cbz	r5, 4016d6 <_vfiprintf_r+0xc2>
  4016ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4016b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4016b2:	f8ca 8000 	str.w	r8, [sl]
  4016b6:	3301      	adds	r3, #1
  4016b8:	442a      	add	r2, r5
  4016ba:	2b07      	cmp	r3, #7
  4016bc:	f8ca 5004 	str.w	r5, [sl, #4]
  4016c0:	9211      	str	r2, [sp, #68]	; 0x44
  4016c2:	9310      	str	r3, [sp, #64]	; 0x40
  4016c4:	dd7a      	ble.n	4017bc <_vfiprintf_r+0x1a8>
  4016c6:	2a00      	cmp	r2, #0
  4016c8:	f040 84b0 	bne.w	40202c <_vfiprintf_r+0xa18>
  4016cc:	9b03      	ldr	r3, [sp, #12]
  4016ce:	9210      	str	r2, [sp, #64]	; 0x40
  4016d0:	442b      	add	r3, r5
  4016d2:	46ca      	mov	sl, r9
  4016d4:	9303      	str	r3, [sp, #12]
  4016d6:	7823      	ldrb	r3, [r4, #0]
  4016d8:	2b00      	cmp	r3, #0
  4016da:	f000 83e0 	beq.w	401e9e <_vfiprintf_r+0x88a>
  4016de:	2000      	movs	r0, #0
  4016e0:	f04f 0300 	mov.w	r3, #0
  4016e4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4016e8:	f104 0801 	add.w	r8, r4, #1
  4016ec:	7862      	ldrb	r2, [r4, #1]
  4016ee:	4605      	mov	r5, r0
  4016f0:	4606      	mov	r6, r0
  4016f2:	4603      	mov	r3, r0
  4016f4:	f04f 34ff 	mov.w	r4, #4294967295
  4016f8:	f108 0801 	add.w	r8, r8, #1
  4016fc:	f1a2 0120 	sub.w	r1, r2, #32
  401700:	2958      	cmp	r1, #88	; 0x58
  401702:	f200 82de 	bhi.w	401cc2 <_vfiprintf_r+0x6ae>
  401706:	e8df f011 	tbh	[pc, r1, lsl #1]
  40170a:	0221      	.short	0x0221
  40170c:	02dc02dc 	.word	0x02dc02dc
  401710:	02dc0229 	.word	0x02dc0229
  401714:	02dc02dc 	.word	0x02dc02dc
  401718:	02dc02dc 	.word	0x02dc02dc
  40171c:	028902dc 	.word	0x028902dc
  401720:	02dc0295 	.word	0x02dc0295
  401724:	02bd00a2 	.word	0x02bd00a2
  401728:	019f02dc 	.word	0x019f02dc
  40172c:	01a401a4 	.word	0x01a401a4
  401730:	01a401a4 	.word	0x01a401a4
  401734:	01a401a4 	.word	0x01a401a4
  401738:	01a401a4 	.word	0x01a401a4
  40173c:	02dc01a4 	.word	0x02dc01a4
  401740:	02dc02dc 	.word	0x02dc02dc
  401744:	02dc02dc 	.word	0x02dc02dc
  401748:	02dc02dc 	.word	0x02dc02dc
  40174c:	02dc02dc 	.word	0x02dc02dc
  401750:	01b202dc 	.word	0x01b202dc
  401754:	02dc02dc 	.word	0x02dc02dc
  401758:	02dc02dc 	.word	0x02dc02dc
  40175c:	02dc02dc 	.word	0x02dc02dc
  401760:	02dc02dc 	.word	0x02dc02dc
  401764:	02dc02dc 	.word	0x02dc02dc
  401768:	02dc0197 	.word	0x02dc0197
  40176c:	02dc02dc 	.word	0x02dc02dc
  401770:	02dc02dc 	.word	0x02dc02dc
  401774:	02dc019b 	.word	0x02dc019b
  401778:	025302dc 	.word	0x025302dc
  40177c:	02dc02dc 	.word	0x02dc02dc
  401780:	02dc02dc 	.word	0x02dc02dc
  401784:	02dc02dc 	.word	0x02dc02dc
  401788:	02dc02dc 	.word	0x02dc02dc
  40178c:	02dc02dc 	.word	0x02dc02dc
  401790:	021b025a 	.word	0x021b025a
  401794:	02dc02dc 	.word	0x02dc02dc
  401798:	026e02dc 	.word	0x026e02dc
  40179c:	02dc021b 	.word	0x02dc021b
  4017a0:	027302dc 	.word	0x027302dc
  4017a4:	01f502dc 	.word	0x01f502dc
  4017a8:	02090182 	.word	0x02090182
  4017ac:	02dc02d7 	.word	0x02dc02d7
  4017b0:	02dc029a 	.word	0x02dc029a
  4017b4:	02dc00a7 	.word	0x02dc00a7
  4017b8:	022e02dc 	.word	0x022e02dc
  4017bc:	f10a 0a08 	add.w	sl, sl, #8
  4017c0:	9b03      	ldr	r3, [sp, #12]
  4017c2:	442b      	add	r3, r5
  4017c4:	9303      	str	r3, [sp, #12]
  4017c6:	e786      	b.n	4016d6 <_vfiprintf_r+0xc2>
  4017c8:	4659      	mov	r1, fp
  4017ca:	9806      	ldr	r0, [sp, #24]
  4017cc:	f000 fdac 	bl	402328 <__swsetup_r>
  4017d0:	bb18      	cbnz	r0, 40181a <_vfiprintf_r+0x206>
  4017d2:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  4017d6:	f001 031a 	and.w	r3, r1, #26
  4017da:	2b0a      	cmp	r3, #10
  4017dc:	f47f af4b 	bne.w	401676 <_vfiprintf_r+0x62>
  4017e0:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4017e4:	2b00      	cmp	r3, #0
  4017e6:	f6ff af46 	blt.w	401676 <_vfiprintf_r+0x62>
  4017ea:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4017ee:	07db      	lsls	r3, r3, #31
  4017f0:	d405      	bmi.n	4017fe <_vfiprintf_r+0x1ea>
  4017f2:	058f      	lsls	r7, r1, #22
  4017f4:	d403      	bmi.n	4017fe <_vfiprintf_r+0x1ea>
  4017f6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4017fa:	f001 fac3 	bl	402d84 <__retarget_lock_release_recursive>
  4017fe:	462b      	mov	r3, r5
  401800:	4642      	mov	r2, r8
  401802:	4659      	mov	r1, fp
  401804:	9806      	ldr	r0, [sp, #24]
  401806:	f000 fd4d 	bl	4022a4 <__sbprintf>
  40180a:	9003      	str	r0, [sp, #12]
  40180c:	9803      	ldr	r0, [sp, #12]
  40180e:	b02d      	add	sp, #180	; 0xb4
  401810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401814:	f000 fef4 	bl	402600 <__sinit>
  401818:	e709      	b.n	40162e <_vfiprintf_r+0x1a>
  40181a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40181e:	07d9      	lsls	r1, r3, #31
  401820:	d404      	bmi.n	40182c <_vfiprintf_r+0x218>
  401822:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401826:	059a      	lsls	r2, r3, #22
  401828:	f140 84aa 	bpl.w	402180 <_vfiprintf_r+0xb6c>
  40182c:	f04f 33ff 	mov.w	r3, #4294967295
  401830:	9303      	str	r3, [sp, #12]
  401832:	9803      	ldr	r0, [sp, #12]
  401834:	b02d      	add	sp, #180	; 0xb4
  401836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40183a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40183e:	f001 fa9f 	bl	402d80 <__retarget_lock_acquire_recursive>
  401842:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  401846:	b281      	uxth	r1, r0
  401848:	e6fb      	b.n	401642 <_vfiprintf_r+0x2e>
  40184a:	4276      	negs	r6, r6
  40184c:	9207      	str	r2, [sp, #28]
  40184e:	f043 0304 	orr.w	r3, r3, #4
  401852:	f898 2000 	ldrb.w	r2, [r8]
  401856:	e74f      	b.n	4016f8 <_vfiprintf_r+0xe4>
  401858:	9608      	str	r6, [sp, #32]
  40185a:	069e      	lsls	r6, r3, #26
  40185c:	f100 8450 	bmi.w	402100 <_vfiprintf_r+0xaec>
  401860:	9907      	ldr	r1, [sp, #28]
  401862:	06dd      	lsls	r5, r3, #27
  401864:	460a      	mov	r2, r1
  401866:	f100 83ef 	bmi.w	402048 <_vfiprintf_r+0xa34>
  40186a:	0658      	lsls	r0, r3, #25
  40186c:	f140 83ec 	bpl.w	402048 <_vfiprintf_r+0xa34>
  401870:	880e      	ldrh	r6, [r1, #0]
  401872:	3104      	adds	r1, #4
  401874:	2700      	movs	r7, #0
  401876:	2201      	movs	r2, #1
  401878:	9107      	str	r1, [sp, #28]
  40187a:	f04f 0100 	mov.w	r1, #0
  40187e:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  401882:	2500      	movs	r5, #0
  401884:	1c61      	adds	r1, r4, #1
  401886:	f000 8116 	beq.w	401ab6 <_vfiprintf_r+0x4a2>
  40188a:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  40188e:	9102      	str	r1, [sp, #8]
  401890:	ea56 0107 	orrs.w	r1, r6, r7
  401894:	f040 8114 	bne.w	401ac0 <_vfiprintf_r+0x4ac>
  401898:	2c00      	cmp	r4, #0
  40189a:	f040 835c 	bne.w	401f56 <_vfiprintf_r+0x942>
  40189e:	2a00      	cmp	r2, #0
  4018a0:	f040 83b7 	bne.w	402012 <_vfiprintf_r+0x9fe>
  4018a4:	f013 0301 	ands.w	r3, r3, #1
  4018a8:	9305      	str	r3, [sp, #20]
  4018aa:	f000 8457 	beq.w	40215c <_vfiprintf_r+0xb48>
  4018ae:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4018b2:	2330      	movs	r3, #48	; 0x30
  4018b4:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  4018b8:	9b05      	ldr	r3, [sp, #20]
  4018ba:	42a3      	cmp	r3, r4
  4018bc:	bfb8      	it	lt
  4018be:	4623      	movlt	r3, r4
  4018c0:	9301      	str	r3, [sp, #4]
  4018c2:	b10d      	cbz	r5, 4018c8 <_vfiprintf_r+0x2b4>
  4018c4:	3301      	adds	r3, #1
  4018c6:	9301      	str	r3, [sp, #4]
  4018c8:	9b02      	ldr	r3, [sp, #8]
  4018ca:	f013 0302 	ands.w	r3, r3, #2
  4018ce:	9309      	str	r3, [sp, #36]	; 0x24
  4018d0:	d002      	beq.n	4018d8 <_vfiprintf_r+0x2c4>
  4018d2:	9b01      	ldr	r3, [sp, #4]
  4018d4:	3302      	adds	r3, #2
  4018d6:	9301      	str	r3, [sp, #4]
  4018d8:	9b02      	ldr	r3, [sp, #8]
  4018da:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4018de:	930a      	str	r3, [sp, #40]	; 0x28
  4018e0:	f040 8217 	bne.w	401d12 <_vfiprintf_r+0x6fe>
  4018e4:	9b08      	ldr	r3, [sp, #32]
  4018e6:	9a01      	ldr	r2, [sp, #4]
  4018e8:	1a9d      	subs	r5, r3, r2
  4018ea:	2d00      	cmp	r5, #0
  4018ec:	f340 8211 	ble.w	401d12 <_vfiprintf_r+0x6fe>
  4018f0:	2d10      	cmp	r5, #16
  4018f2:	f340 8490 	ble.w	402216 <_vfiprintf_r+0xc02>
  4018f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4018f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4018fa:	4ec4      	ldr	r6, [pc, #784]	; (401c0c <_vfiprintf_r+0x5f8>)
  4018fc:	46d6      	mov	lr, sl
  4018fe:	2710      	movs	r7, #16
  401900:	46a2      	mov	sl, r4
  401902:	4619      	mov	r1, r3
  401904:	9c06      	ldr	r4, [sp, #24]
  401906:	e007      	b.n	401918 <_vfiprintf_r+0x304>
  401908:	f101 0c02 	add.w	ip, r1, #2
  40190c:	f10e 0e08 	add.w	lr, lr, #8
  401910:	4601      	mov	r1, r0
  401912:	3d10      	subs	r5, #16
  401914:	2d10      	cmp	r5, #16
  401916:	dd11      	ble.n	40193c <_vfiprintf_r+0x328>
  401918:	1c48      	adds	r0, r1, #1
  40191a:	3210      	adds	r2, #16
  40191c:	2807      	cmp	r0, #7
  40191e:	9211      	str	r2, [sp, #68]	; 0x44
  401920:	e88e 00c0 	stmia.w	lr, {r6, r7}
  401924:	9010      	str	r0, [sp, #64]	; 0x40
  401926:	ddef      	ble.n	401908 <_vfiprintf_r+0x2f4>
  401928:	2a00      	cmp	r2, #0
  40192a:	f040 81e4 	bne.w	401cf6 <_vfiprintf_r+0x6e2>
  40192e:	3d10      	subs	r5, #16
  401930:	2d10      	cmp	r5, #16
  401932:	4611      	mov	r1, r2
  401934:	f04f 0c01 	mov.w	ip, #1
  401938:	46ce      	mov	lr, r9
  40193a:	dced      	bgt.n	401918 <_vfiprintf_r+0x304>
  40193c:	4654      	mov	r4, sl
  40193e:	4661      	mov	r1, ip
  401940:	46f2      	mov	sl, lr
  401942:	442a      	add	r2, r5
  401944:	2907      	cmp	r1, #7
  401946:	9211      	str	r2, [sp, #68]	; 0x44
  401948:	f8ca 6000 	str.w	r6, [sl]
  40194c:	f8ca 5004 	str.w	r5, [sl, #4]
  401950:	9110      	str	r1, [sp, #64]	; 0x40
  401952:	f300 82ec 	bgt.w	401f2e <_vfiprintf_r+0x91a>
  401956:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40195a:	f10a 0a08 	add.w	sl, sl, #8
  40195e:	1c48      	adds	r0, r1, #1
  401960:	2d00      	cmp	r5, #0
  401962:	f040 81de 	bne.w	401d22 <_vfiprintf_r+0x70e>
  401966:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401968:	2b00      	cmp	r3, #0
  40196a:	f000 81f8 	beq.w	401d5e <_vfiprintf_r+0x74a>
  40196e:	3202      	adds	r2, #2
  401970:	a90e      	add	r1, sp, #56	; 0x38
  401972:	2302      	movs	r3, #2
  401974:	2807      	cmp	r0, #7
  401976:	9211      	str	r2, [sp, #68]	; 0x44
  401978:	9010      	str	r0, [sp, #64]	; 0x40
  40197a:	e88a 000a 	stmia.w	sl, {r1, r3}
  40197e:	f340 81ea 	ble.w	401d56 <_vfiprintf_r+0x742>
  401982:	2a00      	cmp	r2, #0
  401984:	f040 838c 	bne.w	4020a0 <_vfiprintf_r+0xa8c>
  401988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40198a:	2b80      	cmp	r3, #128	; 0x80
  40198c:	f04f 0001 	mov.w	r0, #1
  401990:	4611      	mov	r1, r2
  401992:	46ca      	mov	sl, r9
  401994:	f040 81e7 	bne.w	401d66 <_vfiprintf_r+0x752>
  401998:	9b08      	ldr	r3, [sp, #32]
  40199a:	9d01      	ldr	r5, [sp, #4]
  40199c:	1b5e      	subs	r6, r3, r5
  40199e:	2e00      	cmp	r6, #0
  4019a0:	f340 81e1 	ble.w	401d66 <_vfiprintf_r+0x752>
  4019a4:	2e10      	cmp	r6, #16
  4019a6:	4d9a      	ldr	r5, [pc, #616]	; (401c10 <_vfiprintf_r+0x5fc>)
  4019a8:	f340 8450 	ble.w	40224c <_vfiprintf_r+0xc38>
  4019ac:	46d4      	mov	ip, sl
  4019ae:	2710      	movs	r7, #16
  4019b0:	46a2      	mov	sl, r4
  4019b2:	9c06      	ldr	r4, [sp, #24]
  4019b4:	e007      	b.n	4019c6 <_vfiprintf_r+0x3b2>
  4019b6:	f101 0e02 	add.w	lr, r1, #2
  4019ba:	f10c 0c08 	add.w	ip, ip, #8
  4019be:	4601      	mov	r1, r0
  4019c0:	3e10      	subs	r6, #16
  4019c2:	2e10      	cmp	r6, #16
  4019c4:	dd11      	ble.n	4019ea <_vfiprintf_r+0x3d6>
  4019c6:	1c48      	adds	r0, r1, #1
  4019c8:	3210      	adds	r2, #16
  4019ca:	2807      	cmp	r0, #7
  4019cc:	9211      	str	r2, [sp, #68]	; 0x44
  4019ce:	e88c 00a0 	stmia.w	ip, {r5, r7}
  4019d2:	9010      	str	r0, [sp, #64]	; 0x40
  4019d4:	ddef      	ble.n	4019b6 <_vfiprintf_r+0x3a2>
  4019d6:	2a00      	cmp	r2, #0
  4019d8:	f040 829d 	bne.w	401f16 <_vfiprintf_r+0x902>
  4019dc:	3e10      	subs	r6, #16
  4019de:	2e10      	cmp	r6, #16
  4019e0:	f04f 0e01 	mov.w	lr, #1
  4019e4:	4611      	mov	r1, r2
  4019e6:	46cc      	mov	ip, r9
  4019e8:	dced      	bgt.n	4019c6 <_vfiprintf_r+0x3b2>
  4019ea:	4654      	mov	r4, sl
  4019ec:	46e2      	mov	sl, ip
  4019ee:	4432      	add	r2, r6
  4019f0:	f1be 0f07 	cmp.w	lr, #7
  4019f4:	9211      	str	r2, [sp, #68]	; 0x44
  4019f6:	e88a 0060 	stmia.w	sl, {r5, r6}
  4019fa:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4019fe:	f300 8369 	bgt.w	4020d4 <_vfiprintf_r+0xac0>
  401a02:	f10a 0a08 	add.w	sl, sl, #8
  401a06:	f10e 0001 	add.w	r0, lr, #1
  401a0a:	4671      	mov	r1, lr
  401a0c:	e1ab      	b.n	401d66 <_vfiprintf_r+0x752>
  401a0e:	9608      	str	r6, [sp, #32]
  401a10:	f013 0220 	ands.w	r2, r3, #32
  401a14:	f040 838c 	bne.w	402130 <_vfiprintf_r+0xb1c>
  401a18:	f013 0110 	ands.w	r1, r3, #16
  401a1c:	f040 831a 	bne.w	402054 <_vfiprintf_r+0xa40>
  401a20:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  401a24:	f000 8316 	beq.w	402054 <_vfiprintf_r+0xa40>
  401a28:	9807      	ldr	r0, [sp, #28]
  401a2a:	460a      	mov	r2, r1
  401a2c:	4601      	mov	r1, r0
  401a2e:	3104      	adds	r1, #4
  401a30:	8806      	ldrh	r6, [r0, #0]
  401a32:	9107      	str	r1, [sp, #28]
  401a34:	2700      	movs	r7, #0
  401a36:	e720      	b.n	40187a <_vfiprintf_r+0x266>
  401a38:	9608      	str	r6, [sp, #32]
  401a3a:	f043 0310 	orr.w	r3, r3, #16
  401a3e:	e7e7      	b.n	401a10 <_vfiprintf_r+0x3fc>
  401a40:	9608      	str	r6, [sp, #32]
  401a42:	f043 0310 	orr.w	r3, r3, #16
  401a46:	e708      	b.n	40185a <_vfiprintf_r+0x246>
  401a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401a4c:	f898 2000 	ldrb.w	r2, [r8]
  401a50:	e652      	b.n	4016f8 <_vfiprintf_r+0xe4>
  401a52:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401a56:	2600      	movs	r6, #0
  401a58:	f818 2b01 	ldrb.w	r2, [r8], #1
  401a5c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  401a60:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  401a64:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401a68:	2909      	cmp	r1, #9
  401a6a:	d9f5      	bls.n	401a58 <_vfiprintf_r+0x444>
  401a6c:	e646      	b.n	4016fc <_vfiprintf_r+0xe8>
  401a6e:	9608      	str	r6, [sp, #32]
  401a70:	2800      	cmp	r0, #0
  401a72:	f040 8408 	bne.w	402286 <_vfiprintf_r+0xc72>
  401a76:	f043 0310 	orr.w	r3, r3, #16
  401a7a:	069e      	lsls	r6, r3, #26
  401a7c:	f100 834c 	bmi.w	402118 <_vfiprintf_r+0xb04>
  401a80:	06dd      	lsls	r5, r3, #27
  401a82:	f100 82f3 	bmi.w	40206c <_vfiprintf_r+0xa58>
  401a86:	0658      	lsls	r0, r3, #25
  401a88:	f140 82f0 	bpl.w	40206c <_vfiprintf_r+0xa58>
  401a8c:	9d07      	ldr	r5, [sp, #28]
  401a8e:	f9b5 6000 	ldrsh.w	r6, [r5]
  401a92:	462a      	mov	r2, r5
  401a94:	17f7      	asrs	r7, r6, #31
  401a96:	3204      	adds	r2, #4
  401a98:	4630      	mov	r0, r6
  401a9a:	4639      	mov	r1, r7
  401a9c:	9207      	str	r2, [sp, #28]
  401a9e:	2800      	cmp	r0, #0
  401aa0:	f171 0200 	sbcs.w	r2, r1, #0
  401aa4:	f2c0 835d 	blt.w	402162 <_vfiprintf_r+0xb4e>
  401aa8:	1c61      	adds	r1, r4, #1
  401aaa:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401aae:	f04f 0201 	mov.w	r2, #1
  401ab2:	f47f aeea 	bne.w	40188a <_vfiprintf_r+0x276>
  401ab6:	ea56 0107 	orrs.w	r1, r6, r7
  401aba:	f000 824d 	beq.w	401f58 <_vfiprintf_r+0x944>
  401abe:	9302      	str	r3, [sp, #8]
  401ac0:	2a01      	cmp	r2, #1
  401ac2:	f000 828c 	beq.w	401fde <_vfiprintf_r+0x9ca>
  401ac6:	2a02      	cmp	r2, #2
  401ac8:	f040 825c 	bne.w	401f84 <_vfiprintf_r+0x970>
  401acc:	980b      	ldr	r0, [sp, #44]	; 0x2c
  401ace:	46cb      	mov	fp, r9
  401ad0:	0933      	lsrs	r3, r6, #4
  401ad2:	f006 010f 	and.w	r1, r6, #15
  401ad6:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  401ada:	093a      	lsrs	r2, r7, #4
  401adc:	461e      	mov	r6, r3
  401ade:	4617      	mov	r7, r2
  401ae0:	5c43      	ldrb	r3, [r0, r1]
  401ae2:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  401ae6:	ea56 0307 	orrs.w	r3, r6, r7
  401aea:	d1f1      	bne.n	401ad0 <_vfiprintf_r+0x4bc>
  401aec:	eba9 030b 	sub.w	r3, r9, fp
  401af0:	9305      	str	r3, [sp, #20]
  401af2:	e6e1      	b.n	4018b8 <_vfiprintf_r+0x2a4>
  401af4:	2800      	cmp	r0, #0
  401af6:	f040 83c0 	bne.w	40227a <_vfiprintf_r+0xc66>
  401afa:	0699      	lsls	r1, r3, #26
  401afc:	f100 8367 	bmi.w	4021ce <_vfiprintf_r+0xbba>
  401b00:	06da      	lsls	r2, r3, #27
  401b02:	f100 80f1 	bmi.w	401ce8 <_vfiprintf_r+0x6d4>
  401b06:	065b      	lsls	r3, r3, #25
  401b08:	f140 80ee 	bpl.w	401ce8 <_vfiprintf_r+0x6d4>
  401b0c:	9a07      	ldr	r2, [sp, #28]
  401b0e:	6813      	ldr	r3, [r2, #0]
  401b10:	3204      	adds	r2, #4
  401b12:	9207      	str	r2, [sp, #28]
  401b14:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  401b18:	801a      	strh	r2, [r3, #0]
  401b1a:	e5b8      	b.n	40168e <_vfiprintf_r+0x7a>
  401b1c:	9807      	ldr	r0, [sp, #28]
  401b1e:	4a3d      	ldr	r2, [pc, #244]	; (401c14 <_vfiprintf_r+0x600>)
  401b20:	9608      	str	r6, [sp, #32]
  401b22:	920b      	str	r2, [sp, #44]	; 0x2c
  401b24:	6806      	ldr	r6, [r0, #0]
  401b26:	2278      	movs	r2, #120	; 0x78
  401b28:	2130      	movs	r1, #48	; 0x30
  401b2a:	3004      	adds	r0, #4
  401b2c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  401b30:	f043 0302 	orr.w	r3, r3, #2
  401b34:	9007      	str	r0, [sp, #28]
  401b36:	2700      	movs	r7, #0
  401b38:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  401b3c:	2202      	movs	r2, #2
  401b3e:	e69c      	b.n	40187a <_vfiprintf_r+0x266>
  401b40:	9608      	str	r6, [sp, #32]
  401b42:	2800      	cmp	r0, #0
  401b44:	d099      	beq.n	401a7a <_vfiprintf_r+0x466>
  401b46:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401b4a:	e796      	b.n	401a7a <_vfiprintf_r+0x466>
  401b4c:	f898 2000 	ldrb.w	r2, [r8]
  401b50:	2d00      	cmp	r5, #0
  401b52:	f47f add1 	bne.w	4016f8 <_vfiprintf_r+0xe4>
  401b56:	2001      	movs	r0, #1
  401b58:	2520      	movs	r5, #32
  401b5a:	e5cd      	b.n	4016f8 <_vfiprintf_r+0xe4>
  401b5c:	f043 0301 	orr.w	r3, r3, #1
  401b60:	f898 2000 	ldrb.w	r2, [r8]
  401b64:	e5c8      	b.n	4016f8 <_vfiprintf_r+0xe4>
  401b66:	9608      	str	r6, [sp, #32]
  401b68:	2800      	cmp	r0, #0
  401b6a:	f040 8393 	bne.w	402294 <_vfiprintf_r+0xc80>
  401b6e:	4929      	ldr	r1, [pc, #164]	; (401c14 <_vfiprintf_r+0x600>)
  401b70:	910b      	str	r1, [sp, #44]	; 0x2c
  401b72:	069f      	lsls	r7, r3, #26
  401b74:	f100 82e8 	bmi.w	402148 <_vfiprintf_r+0xb34>
  401b78:	9807      	ldr	r0, [sp, #28]
  401b7a:	06de      	lsls	r6, r3, #27
  401b7c:	4601      	mov	r1, r0
  401b7e:	f100 8270 	bmi.w	402062 <_vfiprintf_r+0xa4e>
  401b82:	065d      	lsls	r5, r3, #25
  401b84:	f140 826d 	bpl.w	402062 <_vfiprintf_r+0xa4e>
  401b88:	3104      	adds	r1, #4
  401b8a:	8806      	ldrh	r6, [r0, #0]
  401b8c:	9107      	str	r1, [sp, #28]
  401b8e:	2700      	movs	r7, #0
  401b90:	07d8      	lsls	r0, r3, #31
  401b92:	f140 8222 	bpl.w	401fda <_vfiprintf_r+0x9c6>
  401b96:	ea56 0107 	orrs.w	r1, r6, r7
  401b9a:	f000 821e 	beq.w	401fda <_vfiprintf_r+0x9c6>
  401b9e:	2130      	movs	r1, #48	; 0x30
  401ba0:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  401ba4:	f043 0302 	orr.w	r3, r3, #2
  401ba8:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  401bac:	2202      	movs	r2, #2
  401bae:	e664      	b.n	40187a <_vfiprintf_r+0x266>
  401bb0:	9608      	str	r6, [sp, #32]
  401bb2:	2800      	cmp	r0, #0
  401bb4:	f040 836b 	bne.w	40228e <_vfiprintf_r+0xc7a>
  401bb8:	4917      	ldr	r1, [pc, #92]	; (401c18 <_vfiprintf_r+0x604>)
  401bba:	910b      	str	r1, [sp, #44]	; 0x2c
  401bbc:	e7d9      	b.n	401b72 <_vfiprintf_r+0x55e>
  401bbe:	9907      	ldr	r1, [sp, #28]
  401bc0:	9608      	str	r6, [sp, #32]
  401bc2:	680a      	ldr	r2, [r1, #0]
  401bc4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  401bc8:	f04f 0000 	mov.w	r0, #0
  401bcc:	460a      	mov	r2, r1
  401bce:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  401bd2:	3204      	adds	r2, #4
  401bd4:	2001      	movs	r0, #1
  401bd6:	9001      	str	r0, [sp, #4]
  401bd8:	9207      	str	r2, [sp, #28]
  401bda:	9005      	str	r0, [sp, #20]
  401bdc:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  401be0:	9302      	str	r3, [sp, #8]
  401be2:	2400      	movs	r4, #0
  401be4:	e670      	b.n	4018c8 <_vfiprintf_r+0x2b4>
  401be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401bea:	f898 2000 	ldrb.w	r2, [r8]
  401bee:	e583      	b.n	4016f8 <_vfiprintf_r+0xe4>
  401bf0:	f898 2000 	ldrb.w	r2, [r8]
  401bf4:	2a6c      	cmp	r2, #108	; 0x6c
  401bf6:	bf03      	ittte	eq
  401bf8:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  401bfc:	f043 0320 	orreq.w	r3, r3, #32
  401c00:	f108 0801 	addeq.w	r8, r8, #1
  401c04:	f043 0310 	orrne.w	r3, r3, #16
  401c08:	e576      	b.n	4016f8 <_vfiprintf_r+0xe4>
  401c0a:	bf00      	nop
  401c0c:	004042b4 	.word	0x004042b4
  401c10:	004042c4 	.word	0x004042c4
  401c14:	00404298 	.word	0x00404298
  401c18:	00404284 	.word	0x00404284
  401c1c:	9907      	ldr	r1, [sp, #28]
  401c1e:	680e      	ldr	r6, [r1, #0]
  401c20:	460a      	mov	r2, r1
  401c22:	2e00      	cmp	r6, #0
  401c24:	f102 0204 	add.w	r2, r2, #4
  401c28:	f6ff ae0f 	blt.w	40184a <_vfiprintf_r+0x236>
  401c2c:	9207      	str	r2, [sp, #28]
  401c2e:	f898 2000 	ldrb.w	r2, [r8]
  401c32:	e561      	b.n	4016f8 <_vfiprintf_r+0xe4>
  401c34:	f898 2000 	ldrb.w	r2, [r8]
  401c38:	2001      	movs	r0, #1
  401c3a:	252b      	movs	r5, #43	; 0x2b
  401c3c:	e55c      	b.n	4016f8 <_vfiprintf_r+0xe4>
  401c3e:	9907      	ldr	r1, [sp, #28]
  401c40:	9608      	str	r6, [sp, #32]
  401c42:	f8d1 b000 	ldr.w	fp, [r1]
  401c46:	f04f 0200 	mov.w	r2, #0
  401c4a:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  401c4e:	1d0e      	adds	r6, r1, #4
  401c50:	f1bb 0f00 	cmp.w	fp, #0
  401c54:	f000 82e5 	beq.w	402222 <_vfiprintf_r+0xc0e>
  401c58:	1c67      	adds	r7, r4, #1
  401c5a:	f000 82c4 	beq.w	4021e6 <_vfiprintf_r+0xbd2>
  401c5e:	4622      	mov	r2, r4
  401c60:	2100      	movs	r1, #0
  401c62:	4658      	mov	r0, fp
  401c64:	9301      	str	r3, [sp, #4]
  401c66:	f001 fbd3 	bl	403410 <memchr>
  401c6a:	9b01      	ldr	r3, [sp, #4]
  401c6c:	2800      	cmp	r0, #0
  401c6e:	f000 82e5 	beq.w	40223c <_vfiprintf_r+0xc28>
  401c72:	eba0 020b 	sub.w	r2, r0, fp
  401c76:	9205      	str	r2, [sp, #20]
  401c78:	9607      	str	r6, [sp, #28]
  401c7a:	9302      	str	r3, [sp, #8]
  401c7c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401c80:	2400      	movs	r4, #0
  401c82:	e619      	b.n	4018b8 <_vfiprintf_r+0x2a4>
  401c84:	f898 2000 	ldrb.w	r2, [r8]
  401c88:	2a2a      	cmp	r2, #42	; 0x2a
  401c8a:	f108 0701 	add.w	r7, r8, #1
  401c8e:	f000 82e9 	beq.w	402264 <_vfiprintf_r+0xc50>
  401c92:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401c96:	2909      	cmp	r1, #9
  401c98:	46b8      	mov	r8, r7
  401c9a:	f04f 0400 	mov.w	r4, #0
  401c9e:	f63f ad2d 	bhi.w	4016fc <_vfiprintf_r+0xe8>
  401ca2:	f818 2b01 	ldrb.w	r2, [r8], #1
  401ca6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  401caa:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  401cae:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401cb2:	2909      	cmp	r1, #9
  401cb4:	d9f5      	bls.n	401ca2 <_vfiprintf_r+0x68e>
  401cb6:	e521      	b.n	4016fc <_vfiprintf_r+0xe8>
  401cb8:	f043 0320 	orr.w	r3, r3, #32
  401cbc:	f898 2000 	ldrb.w	r2, [r8]
  401cc0:	e51a      	b.n	4016f8 <_vfiprintf_r+0xe4>
  401cc2:	9608      	str	r6, [sp, #32]
  401cc4:	2800      	cmp	r0, #0
  401cc6:	f040 82db 	bne.w	402280 <_vfiprintf_r+0xc6c>
  401cca:	2a00      	cmp	r2, #0
  401ccc:	f000 80e7 	beq.w	401e9e <_vfiprintf_r+0x88a>
  401cd0:	2101      	movs	r1, #1
  401cd2:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  401cd6:	f04f 0200 	mov.w	r2, #0
  401cda:	9101      	str	r1, [sp, #4]
  401cdc:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  401ce0:	9105      	str	r1, [sp, #20]
  401ce2:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  401ce6:	e77b      	b.n	401be0 <_vfiprintf_r+0x5cc>
  401ce8:	9a07      	ldr	r2, [sp, #28]
  401cea:	6813      	ldr	r3, [r2, #0]
  401cec:	3204      	adds	r2, #4
  401cee:	9207      	str	r2, [sp, #28]
  401cf0:	9a03      	ldr	r2, [sp, #12]
  401cf2:	601a      	str	r2, [r3, #0]
  401cf4:	e4cb      	b.n	40168e <_vfiprintf_r+0x7a>
  401cf6:	aa0f      	add	r2, sp, #60	; 0x3c
  401cf8:	9904      	ldr	r1, [sp, #16]
  401cfa:	4620      	mov	r0, r4
  401cfc:	f7ff fc4a 	bl	401594 <__sprint_r.part.0>
  401d00:	2800      	cmp	r0, #0
  401d02:	f040 8139 	bne.w	401f78 <_vfiprintf_r+0x964>
  401d06:	9910      	ldr	r1, [sp, #64]	; 0x40
  401d08:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401d0a:	f101 0c01 	add.w	ip, r1, #1
  401d0e:	46ce      	mov	lr, r9
  401d10:	e5ff      	b.n	401912 <_vfiprintf_r+0x2fe>
  401d12:	9910      	ldr	r1, [sp, #64]	; 0x40
  401d14:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401d16:	1c48      	adds	r0, r1, #1
  401d18:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401d1c:	2d00      	cmp	r5, #0
  401d1e:	f43f ae22 	beq.w	401966 <_vfiprintf_r+0x352>
  401d22:	3201      	adds	r2, #1
  401d24:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  401d28:	2101      	movs	r1, #1
  401d2a:	2807      	cmp	r0, #7
  401d2c:	9211      	str	r2, [sp, #68]	; 0x44
  401d2e:	9010      	str	r0, [sp, #64]	; 0x40
  401d30:	f8ca 5000 	str.w	r5, [sl]
  401d34:	f8ca 1004 	str.w	r1, [sl, #4]
  401d38:	f340 8108 	ble.w	401f4c <_vfiprintf_r+0x938>
  401d3c:	2a00      	cmp	r2, #0
  401d3e:	f040 81bc 	bne.w	4020ba <_vfiprintf_r+0xaa6>
  401d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401d44:	2b00      	cmp	r3, #0
  401d46:	f43f ae1f 	beq.w	401988 <_vfiprintf_r+0x374>
  401d4a:	ab0e      	add	r3, sp, #56	; 0x38
  401d4c:	2202      	movs	r2, #2
  401d4e:	4608      	mov	r0, r1
  401d50:	931c      	str	r3, [sp, #112]	; 0x70
  401d52:	921d      	str	r2, [sp, #116]	; 0x74
  401d54:	46ca      	mov	sl, r9
  401d56:	4601      	mov	r1, r0
  401d58:	f10a 0a08 	add.w	sl, sl, #8
  401d5c:	3001      	adds	r0, #1
  401d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401d60:	2b80      	cmp	r3, #128	; 0x80
  401d62:	f43f ae19 	beq.w	401998 <_vfiprintf_r+0x384>
  401d66:	9b05      	ldr	r3, [sp, #20]
  401d68:	1ae4      	subs	r4, r4, r3
  401d6a:	2c00      	cmp	r4, #0
  401d6c:	dd2e      	ble.n	401dcc <_vfiprintf_r+0x7b8>
  401d6e:	2c10      	cmp	r4, #16
  401d70:	4db3      	ldr	r5, [pc, #716]	; (402040 <_vfiprintf_r+0xa2c>)
  401d72:	dd1e      	ble.n	401db2 <_vfiprintf_r+0x79e>
  401d74:	46d6      	mov	lr, sl
  401d76:	2610      	movs	r6, #16
  401d78:	9f06      	ldr	r7, [sp, #24]
  401d7a:	f8dd a010 	ldr.w	sl, [sp, #16]
  401d7e:	e006      	b.n	401d8e <_vfiprintf_r+0x77a>
  401d80:	1c88      	adds	r0, r1, #2
  401d82:	f10e 0e08 	add.w	lr, lr, #8
  401d86:	4619      	mov	r1, r3
  401d88:	3c10      	subs	r4, #16
  401d8a:	2c10      	cmp	r4, #16
  401d8c:	dd10      	ble.n	401db0 <_vfiprintf_r+0x79c>
  401d8e:	1c4b      	adds	r3, r1, #1
  401d90:	3210      	adds	r2, #16
  401d92:	2b07      	cmp	r3, #7
  401d94:	9211      	str	r2, [sp, #68]	; 0x44
  401d96:	e88e 0060 	stmia.w	lr, {r5, r6}
  401d9a:	9310      	str	r3, [sp, #64]	; 0x40
  401d9c:	ddf0      	ble.n	401d80 <_vfiprintf_r+0x76c>
  401d9e:	2a00      	cmp	r2, #0
  401da0:	d165      	bne.n	401e6e <_vfiprintf_r+0x85a>
  401da2:	3c10      	subs	r4, #16
  401da4:	2c10      	cmp	r4, #16
  401da6:	f04f 0001 	mov.w	r0, #1
  401daa:	4611      	mov	r1, r2
  401dac:	46ce      	mov	lr, r9
  401dae:	dcee      	bgt.n	401d8e <_vfiprintf_r+0x77a>
  401db0:	46f2      	mov	sl, lr
  401db2:	4422      	add	r2, r4
  401db4:	2807      	cmp	r0, #7
  401db6:	9211      	str	r2, [sp, #68]	; 0x44
  401db8:	f8ca 5000 	str.w	r5, [sl]
  401dbc:	f8ca 4004 	str.w	r4, [sl, #4]
  401dc0:	9010      	str	r0, [sp, #64]	; 0x40
  401dc2:	f300 8085 	bgt.w	401ed0 <_vfiprintf_r+0x8bc>
  401dc6:	f10a 0a08 	add.w	sl, sl, #8
  401dca:	3001      	adds	r0, #1
  401dcc:	9905      	ldr	r1, [sp, #20]
  401dce:	f8ca b000 	str.w	fp, [sl]
  401dd2:	440a      	add	r2, r1
  401dd4:	2807      	cmp	r0, #7
  401dd6:	9211      	str	r2, [sp, #68]	; 0x44
  401dd8:	f8ca 1004 	str.w	r1, [sl, #4]
  401ddc:	9010      	str	r0, [sp, #64]	; 0x40
  401dde:	f340 8082 	ble.w	401ee6 <_vfiprintf_r+0x8d2>
  401de2:	2a00      	cmp	r2, #0
  401de4:	f040 8118 	bne.w	402018 <_vfiprintf_r+0xa04>
  401de8:	9b02      	ldr	r3, [sp, #8]
  401dea:	9210      	str	r2, [sp, #64]	; 0x40
  401dec:	0758      	lsls	r0, r3, #29
  401dee:	d535      	bpl.n	401e5c <_vfiprintf_r+0x848>
  401df0:	9b08      	ldr	r3, [sp, #32]
  401df2:	9901      	ldr	r1, [sp, #4]
  401df4:	1a5c      	subs	r4, r3, r1
  401df6:	2c00      	cmp	r4, #0
  401df8:	f340 80e7 	ble.w	401fca <_vfiprintf_r+0x9b6>
  401dfc:	46ca      	mov	sl, r9
  401dfe:	2c10      	cmp	r4, #16
  401e00:	f340 8218 	ble.w	402234 <_vfiprintf_r+0xc20>
  401e04:	9910      	ldr	r1, [sp, #64]	; 0x40
  401e06:	4e8f      	ldr	r6, [pc, #572]	; (402044 <_vfiprintf_r+0xa30>)
  401e08:	9f06      	ldr	r7, [sp, #24]
  401e0a:	f8dd b010 	ldr.w	fp, [sp, #16]
  401e0e:	2510      	movs	r5, #16
  401e10:	e006      	b.n	401e20 <_vfiprintf_r+0x80c>
  401e12:	1c88      	adds	r0, r1, #2
  401e14:	f10a 0a08 	add.w	sl, sl, #8
  401e18:	4619      	mov	r1, r3
  401e1a:	3c10      	subs	r4, #16
  401e1c:	2c10      	cmp	r4, #16
  401e1e:	dd11      	ble.n	401e44 <_vfiprintf_r+0x830>
  401e20:	1c4b      	adds	r3, r1, #1
  401e22:	3210      	adds	r2, #16
  401e24:	2b07      	cmp	r3, #7
  401e26:	9211      	str	r2, [sp, #68]	; 0x44
  401e28:	f8ca 6000 	str.w	r6, [sl]
  401e2c:	f8ca 5004 	str.w	r5, [sl, #4]
  401e30:	9310      	str	r3, [sp, #64]	; 0x40
  401e32:	ddee      	ble.n	401e12 <_vfiprintf_r+0x7fe>
  401e34:	bb42      	cbnz	r2, 401e88 <_vfiprintf_r+0x874>
  401e36:	3c10      	subs	r4, #16
  401e38:	2c10      	cmp	r4, #16
  401e3a:	f04f 0001 	mov.w	r0, #1
  401e3e:	4611      	mov	r1, r2
  401e40:	46ca      	mov	sl, r9
  401e42:	dced      	bgt.n	401e20 <_vfiprintf_r+0x80c>
  401e44:	4422      	add	r2, r4
  401e46:	2807      	cmp	r0, #7
  401e48:	9211      	str	r2, [sp, #68]	; 0x44
  401e4a:	f8ca 6000 	str.w	r6, [sl]
  401e4e:	f8ca 4004 	str.w	r4, [sl, #4]
  401e52:	9010      	str	r0, [sp, #64]	; 0x40
  401e54:	dd51      	ble.n	401efa <_vfiprintf_r+0x8e6>
  401e56:	2a00      	cmp	r2, #0
  401e58:	f040 819b 	bne.w	402192 <_vfiprintf_r+0xb7e>
  401e5c:	9b03      	ldr	r3, [sp, #12]
  401e5e:	9a08      	ldr	r2, [sp, #32]
  401e60:	9901      	ldr	r1, [sp, #4]
  401e62:	428a      	cmp	r2, r1
  401e64:	bfac      	ite	ge
  401e66:	189b      	addge	r3, r3, r2
  401e68:	185b      	addlt	r3, r3, r1
  401e6a:	9303      	str	r3, [sp, #12]
  401e6c:	e04e      	b.n	401f0c <_vfiprintf_r+0x8f8>
  401e6e:	aa0f      	add	r2, sp, #60	; 0x3c
  401e70:	4651      	mov	r1, sl
  401e72:	4638      	mov	r0, r7
  401e74:	f7ff fb8e 	bl	401594 <__sprint_r.part.0>
  401e78:	2800      	cmp	r0, #0
  401e7a:	f040 813f 	bne.w	4020fc <_vfiprintf_r+0xae8>
  401e7e:	9910      	ldr	r1, [sp, #64]	; 0x40
  401e80:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401e82:	1c48      	adds	r0, r1, #1
  401e84:	46ce      	mov	lr, r9
  401e86:	e77f      	b.n	401d88 <_vfiprintf_r+0x774>
  401e88:	aa0f      	add	r2, sp, #60	; 0x3c
  401e8a:	4659      	mov	r1, fp
  401e8c:	4638      	mov	r0, r7
  401e8e:	f7ff fb81 	bl	401594 <__sprint_r.part.0>
  401e92:	b960      	cbnz	r0, 401eae <_vfiprintf_r+0x89a>
  401e94:	9910      	ldr	r1, [sp, #64]	; 0x40
  401e96:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401e98:	1c48      	adds	r0, r1, #1
  401e9a:	46ca      	mov	sl, r9
  401e9c:	e7bd      	b.n	401e1a <_vfiprintf_r+0x806>
  401e9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401ea0:	f8dd b010 	ldr.w	fp, [sp, #16]
  401ea4:	2b00      	cmp	r3, #0
  401ea6:	f040 81d4 	bne.w	402252 <_vfiprintf_r+0xc3e>
  401eaa:	2300      	movs	r3, #0
  401eac:	9310      	str	r3, [sp, #64]	; 0x40
  401eae:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401eb2:	f013 0f01 	tst.w	r3, #1
  401eb6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401eba:	d102      	bne.n	401ec2 <_vfiprintf_r+0x8ae>
  401ebc:	059a      	lsls	r2, r3, #22
  401ebe:	f140 80de 	bpl.w	40207e <_vfiprintf_r+0xa6a>
  401ec2:	065b      	lsls	r3, r3, #25
  401ec4:	f53f acb2 	bmi.w	40182c <_vfiprintf_r+0x218>
  401ec8:	9803      	ldr	r0, [sp, #12]
  401eca:	b02d      	add	sp, #180	; 0xb4
  401ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401ed0:	2a00      	cmp	r2, #0
  401ed2:	f040 8106 	bne.w	4020e2 <_vfiprintf_r+0xace>
  401ed6:	9a05      	ldr	r2, [sp, #20]
  401ed8:	921d      	str	r2, [sp, #116]	; 0x74
  401eda:	2301      	movs	r3, #1
  401edc:	9211      	str	r2, [sp, #68]	; 0x44
  401ede:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  401ee2:	9310      	str	r3, [sp, #64]	; 0x40
  401ee4:	46ca      	mov	sl, r9
  401ee6:	f10a 0a08 	add.w	sl, sl, #8
  401eea:	9b02      	ldr	r3, [sp, #8]
  401eec:	0759      	lsls	r1, r3, #29
  401eee:	d504      	bpl.n	401efa <_vfiprintf_r+0x8e6>
  401ef0:	9b08      	ldr	r3, [sp, #32]
  401ef2:	9901      	ldr	r1, [sp, #4]
  401ef4:	1a5c      	subs	r4, r3, r1
  401ef6:	2c00      	cmp	r4, #0
  401ef8:	dc81      	bgt.n	401dfe <_vfiprintf_r+0x7ea>
  401efa:	9b03      	ldr	r3, [sp, #12]
  401efc:	9908      	ldr	r1, [sp, #32]
  401efe:	9801      	ldr	r0, [sp, #4]
  401f00:	4281      	cmp	r1, r0
  401f02:	bfac      	ite	ge
  401f04:	185b      	addge	r3, r3, r1
  401f06:	181b      	addlt	r3, r3, r0
  401f08:	9303      	str	r3, [sp, #12]
  401f0a:	bb72      	cbnz	r2, 401f6a <_vfiprintf_r+0x956>
  401f0c:	2300      	movs	r3, #0
  401f0e:	9310      	str	r3, [sp, #64]	; 0x40
  401f10:	46ca      	mov	sl, r9
  401f12:	f7ff bbbc 	b.w	40168e <_vfiprintf_r+0x7a>
  401f16:	aa0f      	add	r2, sp, #60	; 0x3c
  401f18:	9904      	ldr	r1, [sp, #16]
  401f1a:	4620      	mov	r0, r4
  401f1c:	f7ff fb3a 	bl	401594 <__sprint_r.part.0>
  401f20:	bb50      	cbnz	r0, 401f78 <_vfiprintf_r+0x964>
  401f22:	9910      	ldr	r1, [sp, #64]	; 0x40
  401f24:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401f26:	f101 0e01 	add.w	lr, r1, #1
  401f2a:	46cc      	mov	ip, r9
  401f2c:	e548      	b.n	4019c0 <_vfiprintf_r+0x3ac>
  401f2e:	2a00      	cmp	r2, #0
  401f30:	f040 8140 	bne.w	4021b4 <_vfiprintf_r+0xba0>
  401f34:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  401f38:	2900      	cmp	r1, #0
  401f3a:	f000 811b 	beq.w	402174 <_vfiprintf_r+0xb60>
  401f3e:	2201      	movs	r2, #1
  401f40:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  401f44:	4610      	mov	r0, r2
  401f46:	921d      	str	r2, [sp, #116]	; 0x74
  401f48:	911c      	str	r1, [sp, #112]	; 0x70
  401f4a:	46ca      	mov	sl, r9
  401f4c:	4601      	mov	r1, r0
  401f4e:	f10a 0a08 	add.w	sl, sl, #8
  401f52:	3001      	adds	r0, #1
  401f54:	e507      	b.n	401966 <_vfiprintf_r+0x352>
  401f56:	9b02      	ldr	r3, [sp, #8]
  401f58:	2a01      	cmp	r2, #1
  401f5a:	f000 8098 	beq.w	40208e <_vfiprintf_r+0xa7a>
  401f5e:	2a02      	cmp	r2, #2
  401f60:	d10d      	bne.n	401f7e <_vfiprintf_r+0x96a>
  401f62:	9302      	str	r3, [sp, #8]
  401f64:	2600      	movs	r6, #0
  401f66:	2700      	movs	r7, #0
  401f68:	e5b0      	b.n	401acc <_vfiprintf_r+0x4b8>
  401f6a:	aa0f      	add	r2, sp, #60	; 0x3c
  401f6c:	9904      	ldr	r1, [sp, #16]
  401f6e:	9806      	ldr	r0, [sp, #24]
  401f70:	f7ff fb10 	bl	401594 <__sprint_r.part.0>
  401f74:	2800      	cmp	r0, #0
  401f76:	d0c9      	beq.n	401f0c <_vfiprintf_r+0x8f8>
  401f78:	f8dd b010 	ldr.w	fp, [sp, #16]
  401f7c:	e797      	b.n	401eae <_vfiprintf_r+0x89a>
  401f7e:	9302      	str	r3, [sp, #8]
  401f80:	2600      	movs	r6, #0
  401f82:	2700      	movs	r7, #0
  401f84:	4649      	mov	r1, r9
  401f86:	e000      	b.n	401f8a <_vfiprintf_r+0x976>
  401f88:	4659      	mov	r1, fp
  401f8a:	08f2      	lsrs	r2, r6, #3
  401f8c:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  401f90:	08f8      	lsrs	r0, r7, #3
  401f92:	f006 0307 	and.w	r3, r6, #7
  401f96:	4607      	mov	r7, r0
  401f98:	4616      	mov	r6, r2
  401f9a:	3330      	adds	r3, #48	; 0x30
  401f9c:	ea56 0207 	orrs.w	r2, r6, r7
  401fa0:	f801 3c01 	strb.w	r3, [r1, #-1]
  401fa4:	f101 3bff 	add.w	fp, r1, #4294967295
  401fa8:	d1ee      	bne.n	401f88 <_vfiprintf_r+0x974>
  401faa:	9a02      	ldr	r2, [sp, #8]
  401fac:	07d6      	lsls	r6, r2, #31
  401fae:	f57f ad9d 	bpl.w	401aec <_vfiprintf_r+0x4d8>
  401fb2:	2b30      	cmp	r3, #48	; 0x30
  401fb4:	f43f ad9a 	beq.w	401aec <_vfiprintf_r+0x4d8>
  401fb8:	3902      	subs	r1, #2
  401fba:	2330      	movs	r3, #48	; 0x30
  401fbc:	f80b 3c01 	strb.w	r3, [fp, #-1]
  401fc0:	eba9 0301 	sub.w	r3, r9, r1
  401fc4:	9305      	str	r3, [sp, #20]
  401fc6:	468b      	mov	fp, r1
  401fc8:	e476      	b.n	4018b8 <_vfiprintf_r+0x2a4>
  401fca:	9b03      	ldr	r3, [sp, #12]
  401fcc:	9a08      	ldr	r2, [sp, #32]
  401fce:	428a      	cmp	r2, r1
  401fd0:	bfac      	ite	ge
  401fd2:	189b      	addge	r3, r3, r2
  401fd4:	185b      	addlt	r3, r3, r1
  401fd6:	9303      	str	r3, [sp, #12]
  401fd8:	e798      	b.n	401f0c <_vfiprintf_r+0x8f8>
  401fda:	2202      	movs	r2, #2
  401fdc:	e44d      	b.n	40187a <_vfiprintf_r+0x266>
  401fde:	2f00      	cmp	r7, #0
  401fe0:	bf08      	it	eq
  401fe2:	2e0a      	cmpeq	r6, #10
  401fe4:	d352      	bcc.n	40208c <_vfiprintf_r+0xa78>
  401fe6:	46cb      	mov	fp, r9
  401fe8:	4630      	mov	r0, r6
  401fea:	4639      	mov	r1, r7
  401fec:	220a      	movs	r2, #10
  401fee:	2300      	movs	r3, #0
  401ff0:	f001 ffa2 	bl	403f38 <__aeabi_uldivmod>
  401ff4:	3230      	adds	r2, #48	; 0x30
  401ff6:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  401ffa:	4630      	mov	r0, r6
  401ffc:	4639      	mov	r1, r7
  401ffe:	2300      	movs	r3, #0
  402000:	220a      	movs	r2, #10
  402002:	f001 ff99 	bl	403f38 <__aeabi_uldivmod>
  402006:	4606      	mov	r6, r0
  402008:	460f      	mov	r7, r1
  40200a:	ea56 0307 	orrs.w	r3, r6, r7
  40200e:	d1eb      	bne.n	401fe8 <_vfiprintf_r+0x9d4>
  402010:	e56c      	b.n	401aec <_vfiprintf_r+0x4d8>
  402012:	9405      	str	r4, [sp, #20]
  402014:	46cb      	mov	fp, r9
  402016:	e44f      	b.n	4018b8 <_vfiprintf_r+0x2a4>
  402018:	aa0f      	add	r2, sp, #60	; 0x3c
  40201a:	9904      	ldr	r1, [sp, #16]
  40201c:	9806      	ldr	r0, [sp, #24]
  40201e:	f7ff fab9 	bl	401594 <__sprint_r.part.0>
  402022:	2800      	cmp	r0, #0
  402024:	d1a8      	bne.n	401f78 <_vfiprintf_r+0x964>
  402026:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402028:	46ca      	mov	sl, r9
  40202a:	e75e      	b.n	401eea <_vfiprintf_r+0x8d6>
  40202c:	aa0f      	add	r2, sp, #60	; 0x3c
  40202e:	9904      	ldr	r1, [sp, #16]
  402030:	9806      	ldr	r0, [sp, #24]
  402032:	f7ff faaf 	bl	401594 <__sprint_r.part.0>
  402036:	2800      	cmp	r0, #0
  402038:	d19e      	bne.n	401f78 <_vfiprintf_r+0x964>
  40203a:	46ca      	mov	sl, r9
  40203c:	f7ff bbc0 	b.w	4017c0 <_vfiprintf_r+0x1ac>
  402040:	004042c4 	.word	0x004042c4
  402044:	004042b4 	.word	0x004042b4
  402048:	3104      	adds	r1, #4
  40204a:	6816      	ldr	r6, [r2, #0]
  40204c:	9107      	str	r1, [sp, #28]
  40204e:	2201      	movs	r2, #1
  402050:	2700      	movs	r7, #0
  402052:	e412      	b.n	40187a <_vfiprintf_r+0x266>
  402054:	9807      	ldr	r0, [sp, #28]
  402056:	4601      	mov	r1, r0
  402058:	3104      	adds	r1, #4
  40205a:	6806      	ldr	r6, [r0, #0]
  40205c:	9107      	str	r1, [sp, #28]
  40205e:	2700      	movs	r7, #0
  402060:	e40b      	b.n	40187a <_vfiprintf_r+0x266>
  402062:	680e      	ldr	r6, [r1, #0]
  402064:	3104      	adds	r1, #4
  402066:	9107      	str	r1, [sp, #28]
  402068:	2700      	movs	r7, #0
  40206a:	e591      	b.n	401b90 <_vfiprintf_r+0x57c>
  40206c:	9907      	ldr	r1, [sp, #28]
  40206e:	680e      	ldr	r6, [r1, #0]
  402070:	460a      	mov	r2, r1
  402072:	17f7      	asrs	r7, r6, #31
  402074:	3204      	adds	r2, #4
  402076:	9207      	str	r2, [sp, #28]
  402078:	4630      	mov	r0, r6
  40207a:	4639      	mov	r1, r7
  40207c:	e50f      	b.n	401a9e <_vfiprintf_r+0x48a>
  40207e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402082:	f000 fe7f 	bl	402d84 <__retarget_lock_release_recursive>
  402086:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40208a:	e71a      	b.n	401ec2 <_vfiprintf_r+0x8ae>
  40208c:	9b02      	ldr	r3, [sp, #8]
  40208e:	9302      	str	r3, [sp, #8]
  402090:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  402094:	3630      	adds	r6, #48	; 0x30
  402096:	2301      	movs	r3, #1
  402098:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  40209c:	9305      	str	r3, [sp, #20]
  40209e:	e40b      	b.n	4018b8 <_vfiprintf_r+0x2a4>
  4020a0:	aa0f      	add	r2, sp, #60	; 0x3c
  4020a2:	9904      	ldr	r1, [sp, #16]
  4020a4:	9806      	ldr	r0, [sp, #24]
  4020a6:	f7ff fa75 	bl	401594 <__sprint_r.part.0>
  4020aa:	2800      	cmp	r0, #0
  4020ac:	f47f af64 	bne.w	401f78 <_vfiprintf_r+0x964>
  4020b0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4020b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4020b4:	1c48      	adds	r0, r1, #1
  4020b6:	46ca      	mov	sl, r9
  4020b8:	e651      	b.n	401d5e <_vfiprintf_r+0x74a>
  4020ba:	aa0f      	add	r2, sp, #60	; 0x3c
  4020bc:	9904      	ldr	r1, [sp, #16]
  4020be:	9806      	ldr	r0, [sp, #24]
  4020c0:	f7ff fa68 	bl	401594 <__sprint_r.part.0>
  4020c4:	2800      	cmp	r0, #0
  4020c6:	f47f af57 	bne.w	401f78 <_vfiprintf_r+0x964>
  4020ca:	9910      	ldr	r1, [sp, #64]	; 0x40
  4020cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4020ce:	1c48      	adds	r0, r1, #1
  4020d0:	46ca      	mov	sl, r9
  4020d2:	e448      	b.n	401966 <_vfiprintf_r+0x352>
  4020d4:	2a00      	cmp	r2, #0
  4020d6:	f040 8091 	bne.w	4021fc <_vfiprintf_r+0xbe8>
  4020da:	2001      	movs	r0, #1
  4020dc:	4611      	mov	r1, r2
  4020de:	46ca      	mov	sl, r9
  4020e0:	e641      	b.n	401d66 <_vfiprintf_r+0x752>
  4020e2:	aa0f      	add	r2, sp, #60	; 0x3c
  4020e4:	9904      	ldr	r1, [sp, #16]
  4020e6:	9806      	ldr	r0, [sp, #24]
  4020e8:	f7ff fa54 	bl	401594 <__sprint_r.part.0>
  4020ec:	2800      	cmp	r0, #0
  4020ee:	f47f af43 	bne.w	401f78 <_vfiprintf_r+0x964>
  4020f2:	9810      	ldr	r0, [sp, #64]	; 0x40
  4020f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4020f6:	3001      	adds	r0, #1
  4020f8:	46ca      	mov	sl, r9
  4020fa:	e667      	b.n	401dcc <_vfiprintf_r+0x7b8>
  4020fc:	46d3      	mov	fp, sl
  4020fe:	e6d6      	b.n	401eae <_vfiprintf_r+0x89a>
  402100:	9e07      	ldr	r6, [sp, #28]
  402102:	3607      	adds	r6, #7
  402104:	f026 0207 	bic.w	r2, r6, #7
  402108:	f102 0108 	add.w	r1, r2, #8
  40210c:	e9d2 6700 	ldrd	r6, r7, [r2]
  402110:	9107      	str	r1, [sp, #28]
  402112:	2201      	movs	r2, #1
  402114:	f7ff bbb1 	b.w	40187a <_vfiprintf_r+0x266>
  402118:	9e07      	ldr	r6, [sp, #28]
  40211a:	3607      	adds	r6, #7
  40211c:	f026 0607 	bic.w	r6, r6, #7
  402120:	e9d6 0100 	ldrd	r0, r1, [r6]
  402124:	f106 0208 	add.w	r2, r6, #8
  402128:	9207      	str	r2, [sp, #28]
  40212a:	4606      	mov	r6, r0
  40212c:	460f      	mov	r7, r1
  40212e:	e4b6      	b.n	401a9e <_vfiprintf_r+0x48a>
  402130:	9e07      	ldr	r6, [sp, #28]
  402132:	3607      	adds	r6, #7
  402134:	f026 0207 	bic.w	r2, r6, #7
  402138:	f102 0108 	add.w	r1, r2, #8
  40213c:	e9d2 6700 	ldrd	r6, r7, [r2]
  402140:	9107      	str	r1, [sp, #28]
  402142:	2200      	movs	r2, #0
  402144:	f7ff bb99 	b.w	40187a <_vfiprintf_r+0x266>
  402148:	9e07      	ldr	r6, [sp, #28]
  40214a:	3607      	adds	r6, #7
  40214c:	f026 0107 	bic.w	r1, r6, #7
  402150:	f101 0008 	add.w	r0, r1, #8
  402154:	9007      	str	r0, [sp, #28]
  402156:	e9d1 6700 	ldrd	r6, r7, [r1]
  40215a:	e519      	b.n	401b90 <_vfiprintf_r+0x57c>
  40215c:	46cb      	mov	fp, r9
  40215e:	f7ff bbab 	b.w	4018b8 <_vfiprintf_r+0x2a4>
  402162:	252d      	movs	r5, #45	; 0x2d
  402164:	4276      	negs	r6, r6
  402166:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40216a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40216e:	2201      	movs	r2, #1
  402170:	f7ff bb88 	b.w	401884 <_vfiprintf_r+0x270>
  402174:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402176:	b9b3      	cbnz	r3, 4021a6 <_vfiprintf_r+0xb92>
  402178:	4611      	mov	r1, r2
  40217a:	2001      	movs	r0, #1
  40217c:	46ca      	mov	sl, r9
  40217e:	e5f2      	b.n	401d66 <_vfiprintf_r+0x752>
  402180:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402184:	f000 fdfe 	bl	402d84 <__retarget_lock_release_recursive>
  402188:	f04f 33ff 	mov.w	r3, #4294967295
  40218c:	9303      	str	r3, [sp, #12]
  40218e:	f7ff bb50 	b.w	401832 <_vfiprintf_r+0x21e>
  402192:	aa0f      	add	r2, sp, #60	; 0x3c
  402194:	9904      	ldr	r1, [sp, #16]
  402196:	9806      	ldr	r0, [sp, #24]
  402198:	f7ff f9fc 	bl	401594 <__sprint_r.part.0>
  40219c:	2800      	cmp	r0, #0
  40219e:	f47f aeeb 	bne.w	401f78 <_vfiprintf_r+0x964>
  4021a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4021a4:	e6a9      	b.n	401efa <_vfiprintf_r+0x8e6>
  4021a6:	ab0e      	add	r3, sp, #56	; 0x38
  4021a8:	2202      	movs	r2, #2
  4021aa:	931c      	str	r3, [sp, #112]	; 0x70
  4021ac:	921d      	str	r2, [sp, #116]	; 0x74
  4021ae:	2001      	movs	r0, #1
  4021b0:	46ca      	mov	sl, r9
  4021b2:	e5d0      	b.n	401d56 <_vfiprintf_r+0x742>
  4021b4:	aa0f      	add	r2, sp, #60	; 0x3c
  4021b6:	9904      	ldr	r1, [sp, #16]
  4021b8:	9806      	ldr	r0, [sp, #24]
  4021ba:	f7ff f9eb 	bl	401594 <__sprint_r.part.0>
  4021be:	2800      	cmp	r0, #0
  4021c0:	f47f aeda 	bne.w	401f78 <_vfiprintf_r+0x964>
  4021c4:	9910      	ldr	r1, [sp, #64]	; 0x40
  4021c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4021c8:	1c48      	adds	r0, r1, #1
  4021ca:	46ca      	mov	sl, r9
  4021cc:	e5a4      	b.n	401d18 <_vfiprintf_r+0x704>
  4021ce:	9a07      	ldr	r2, [sp, #28]
  4021d0:	9903      	ldr	r1, [sp, #12]
  4021d2:	6813      	ldr	r3, [r2, #0]
  4021d4:	17cd      	asrs	r5, r1, #31
  4021d6:	4608      	mov	r0, r1
  4021d8:	3204      	adds	r2, #4
  4021da:	4629      	mov	r1, r5
  4021dc:	9207      	str	r2, [sp, #28]
  4021de:	e9c3 0100 	strd	r0, r1, [r3]
  4021e2:	f7ff ba54 	b.w	40168e <_vfiprintf_r+0x7a>
  4021e6:	4658      	mov	r0, fp
  4021e8:	9607      	str	r6, [sp, #28]
  4021ea:	9302      	str	r3, [sp, #8]
  4021ec:	f001 fc68 	bl	403ac0 <strlen>
  4021f0:	2400      	movs	r4, #0
  4021f2:	9005      	str	r0, [sp, #20]
  4021f4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4021f8:	f7ff bb5e 	b.w	4018b8 <_vfiprintf_r+0x2a4>
  4021fc:	aa0f      	add	r2, sp, #60	; 0x3c
  4021fe:	9904      	ldr	r1, [sp, #16]
  402200:	9806      	ldr	r0, [sp, #24]
  402202:	f7ff f9c7 	bl	401594 <__sprint_r.part.0>
  402206:	2800      	cmp	r0, #0
  402208:	f47f aeb6 	bne.w	401f78 <_vfiprintf_r+0x964>
  40220c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40220e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402210:	1c48      	adds	r0, r1, #1
  402212:	46ca      	mov	sl, r9
  402214:	e5a7      	b.n	401d66 <_vfiprintf_r+0x752>
  402216:	9910      	ldr	r1, [sp, #64]	; 0x40
  402218:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40221a:	4e20      	ldr	r6, [pc, #128]	; (40229c <_vfiprintf_r+0xc88>)
  40221c:	3101      	adds	r1, #1
  40221e:	f7ff bb90 	b.w	401942 <_vfiprintf_r+0x32e>
  402222:	2c06      	cmp	r4, #6
  402224:	bf28      	it	cs
  402226:	2406      	movcs	r4, #6
  402228:	9405      	str	r4, [sp, #20]
  40222a:	9607      	str	r6, [sp, #28]
  40222c:	9401      	str	r4, [sp, #4]
  40222e:	f8df b070 	ldr.w	fp, [pc, #112]	; 4022a0 <_vfiprintf_r+0xc8c>
  402232:	e4d5      	b.n	401be0 <_vfiprintf_r+0x5cc>
  402234:	9810      	ldr	r0, [sp, #64]	; 0x40
  402236:	4e19      	ldr	r6, [pc, #100]	; (40229c <_vfiprintf_r+0xc88>)
  402238:	3001      	adds	r0, #1
  40223a:	e603      	b.n	401e44 <_vfiprintf_r+0x830>
  40223c:	9405      	str	r4, [sp, #20]
  40223e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402242:	9607      	str	r6, [sp, #28]
  402244:	9302      	str	r3, [sp, #8]
  402246:	4604      	mov	r4, r0
  402248:	f7ff bb36 	b.w	4018b8 <_vfiprintf_r+0x2a4>
  40224c:	4686      	mov	lr, r0
  40224e:	f7ff bbce 	b.w	4019ee <_vfiprintf_r+0x3da>
  402252:	9806      	ldr	r0, [sp, #24]
  402254:	aa0f      	add	r2, sp, #60	; 0x3c
  402256:	4659      	mov	r1, fp
  402258:	f7ff f99c 	bl	401594 <__sprint_r.part.0>
  40225c:	2800      	cmp	r0, #0
  40225e:	f43f ae24 	beq.w	401eaa <_vfiprintf_r+0x896>
  402262:	e624      	b.n	401eae <_vfiprintf_r+0x89a>
  402264:	9907      	ldr	r1, [sp, #28]
  402266:	f898 2001 	ldrb.w	r2, [r8, #1]
  40226a:	680c      	ldr	r4, [r1, #0]
  40226c:	3104      	adds	r1, #4
  40226e:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  402272:	46b8      	mov	r8, r7
  402274:	9107      	str	r1, [sp, #28]
  402276:	f7ff ba3f 	b.w	4016f8 <_vfiprintf_r+0xe4>
  40227a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40227e:	e43c      	b.n	401afa <_vfiprintf_r+0x4e6>
  402280:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402284:	e521      	b.n	401cca <_vfiprintf_r+0x6b6>
  402286:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40228a:	f7ff bbf4 	b.w	401a76 <_vfiprintf_r+0x462>
  40228e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402292:	e491      	b.n	401bb8 <_vfiprintf_r+0x5a4>
  402294:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402298:	e469      	b.n	401b6e <_vfiprintf_r+0x55a>
  40229a:	bf00      	nop
  40229c:	004042b4 	.word	0x004042b4
  4022a0:	004042ac 	.word	0x004042ac

004022a4 <__sbprintf>:
  4022a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4022a8:	460c      	mov	r4, r1
  4022aa:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  4022ae:	8989      	ldrh	r1, [r1, #12]
  4022b0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4022b2:	89e5      	ldrh	r5, [r4, #14]
  4022b4:	9619      	str	r6, [sp, #100]	; 0x64
  4022b6:	f021 0102 	bic.w	r1, r1, #2
  4022ba:	4606      	mov	r6, r0
  4022bc:	69e0      	ldr	r0, [r4, #28]
  4022be:	f8ad 100c 	strh.w	r1, [sp, #12]
  4022c2:	4617      	mov	r7, r2
  4022c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4022c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4022ca:	f8ad 500e 	strh.w	r5, [sp, #14]
  4022ce:	4698      	mov	r8, r3
  4022d0:	ad1a      	add	r5, sp, #104	; 0x68
  4022d2:	2300      	movs	r3, #0
  4022d4:	9007      	str	r0, [sp, #28]
  4022d6:	a816      	add	r0, sp, #88	; 0x58
  4022d8:	9209      	str	r2, [sp, #36]	; 0x24
  4022da:	9306      	str	r3, [sp, #24]
  4022dc:	9500      	str	r5, [sp, #0]
  4022de:	9504      	str	r5, [sp, #16]
  4022e0:	9102      	str	r1, [sp, #8]
  4022e2:	9105      	str	r1, [sp, #20]
  4022e4:	f000 fd48 	bl	402d78 <__retarget_lock_init_recursive>
  4022e8:	4643      	mov	r3, r8
  4022ea:	463a      	mov	r2, r7
  4022ec:	4669      	mov	r1, sp
  4022ee:	4630      	mov	r0, r6
  4022f0:	f7ff f990 	bl	401614 <_vfiprintf_r>
  4022f4:	1e05      	subs	r5, r0, #0
  4022f6:	db07      	blt.n	402308 <__sbprintf+0x64>
  4022f8:	4630      	mov	r0, r6
  4022fa:	4669      	mov	r1, sp
  4022fc:	f000 f928 	bl	402550 <_fflush_r>
  402300:	2800      	cmp	r0, #0
  402302:	bf18      	it	ne
  402304:	f04f 35ff 	movne.w	r5, #4294967295
  402308:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40230c:	065b      	lsls	r3, r3, #25
  40230e:	d503      	bpl.n	402318 <__sbprintf+0x74>
  402310:	89a3      	ldrh	r3, [r4, #12]
  402312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402316:	81a3      	strh	r3, [r4, #12]
  402318:	9816      	ldr	r0, [sp, #88]	; 0x58
  40231a:	f000 fd2f 	bl	402d7c <__retarget_lock_close_recursive>
  40231e:	4628      	mov	r0, r5
  402320:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  402324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00402328 <__swsetup_r>:
  402328:	b538      	push	{r3, r4, r5, lr}
  40232a:	4b30      	ldr	r3, [pc, #192]	; (4023ec <__swsetup_r+0xc4>)
  40232c:	681b      	ldr	r3, [r3, #0]
  40232e:	4605      	mov	r5, r0
  402330:	460c      	mov	r4, r1
  402332:	b113      	cbz	r3, 40233a <__swsetup_r+0x12>
  402334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  402336:	2a00      	cmp	r2, #0
  402338:	d038      	beq.n	4023ac <__swsetup_r+0x84>
  40233a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40233e:	b293      	uxth	r3, r2
  402340:	0718      	lsls	r0, r3, #28
  402342:	d50c      	bpl.n	40235e <__swsetup_r+0x36>
  402344:	6920      	ldr	r0, [r4, #16]
  402346:	b1a8      	cbz	r0, 402374 <__swsetup_r+0x4c>
  402348:	f013 0201 	ands.w	r2, r3, #1
  40234c:	d01e      	beq.n	40238c <__swsetup_r+0x64>
  40234e:	6963      	ldr	r3, [r4, #20]
  402350:	2200      	movs	r2, #0
  402352:	425b      	negs	r3, r3
  402354:	61a3      	str	r3, [r4, #24]
  402356:	60a2      	str	r2, [r4, #8]
  402358:	b1f0      	cbz	r0, 402398 <__swsetup_r+0x70>
  40235a:	2000      	movs	r0, #0
  40235c:	bd38      	pop	{r3, r4, r5, pc}
  40235e:	06d9      	lsls	r1, r3, #27
  402360:	d53c      	bpl.n	4023dc <__swsetup_r+0xb4>
  402362:	0758      	lsls	r0, r3, #29
  402364:	d426      	bmi.n	4023b4 <__swsetup_r+0x8c>
  402366:	6920      	ldr	r0, [r4, #16]
  402368:	f042 0308 	orr.w	r3, r2, #8
  40236c:	81a3      	strh	r3, [r4, #12]
  40236e:	b29b      	uxth	r3, r3
  402370:	2800      	cmp	r0, #0
  402372:	d1e9      	bne.n	402348 <__swsetup_r+0x20>
  402374:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402378:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40237c:	d0e4      	beq.n	402348 <__swsetup_r+0x20>
  40237e:	4628      	mov	r0, r5
  402380:	4621      	mov	r1, r4
  402382:	f000 fd2f 	bl	402de4 <__smakebuf_r>
  402386:	89a3      	ldrh	r3, [r4, #12]
  402388:	6920      	ldr	r0, [r4, #16]
  40238a:	e7dd      	b.n	402348 <__swsetup_r+0x20>
  40238c:	0799      	lsls	r1, r3, #30
  40238e:	bf58      	it	pl
  402390:	6962      	ldrpl	r2, [r4, #20]
  402392:	60a2      	str	r2, [r4, #8]
  402394:	2800      	cmp	r0, #0
  402396:	d1e0      	bne.n	40235a <__swsetup_r+0x32>
  402398:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40239c:	061a      	lsls	r2, r3, #24
  40239e:	d5dd      	bpl.n	40235c <__swsetup_r+0x34>
  4023a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4023a4:	81a3      	strh	r3, [r4, #12]
  4023a6:	f04f 30ff 	mov.w	r0, #4294967295
  4023aa:	bd38      	pop	{r3, r4, r5, pc}
  4023ac:	4618      	mov	r0, r3
  4023ae:	f000 f927 	bl	402600 <__sinit>
  4023b2:	e7c2      	b.n	40233a <__swsetup_r+0x12>
  4023b4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4023b6:	b151      	cbz	r1, 4023ce <__swsetup_r+0xa6>
  4023b8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4023bc:	4299      	cmp	r1, r3
  4023be:	d004      	beq.n	4023ca <__swsetup_r+0xa2>
  4023c0:	4628      	mov	r0, r5
  4023c2:	f000 fa43 	bl	40284c <_free_r>
  4023c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4023ca:	2300      	movs	r3, #0
  4023cc:	6323      	str	r3, [r4, #48]	; 0x30
  4023ce:	2300      	movs	r3, #0
  4023d0:	6920      	ldr	r0, [r4, #16]
  4023d2:	6063      	str	r3, [r4, #4]
  4023d4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4023d8:	6020      	str	r0, [r4, #0]
  4023da:	e7c5      	b.n	402368 <__swsetup_r+0x40>
  4023dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4023e0:	2309      	movs	r3, #9
  4023e2:	602b      	str	r3, [r5, #0]
  4023e4:	f04f 30ff 	mov.w	r0, #4294967295
  4023e8:	81a2      	strh	r2, [r4, #12]
  4023ea:	bd38      	pop	{r3, r4, r5, pc}
  4023ec:	20400024 	.word	0x20400024

004023f0 <register_fini>:
  4023f0:	4b02      	ldr	r3, [pc, #8]	; (4023fc <register_fini+0xc>)
  4023f2:	b113      	cbz	r3, 4023fa <register_fini+0xa>
  4023f4:	4802      	ldr	r0, [pc, #8]	; (402400 <register_fini+0x10>)
  4023f6:	f000 b805 	b.w	402404 <atexit>
  4023fa:	4770      	bx	lr
  4023fc:	00000000 	.word	0x00000000
  402400:	00402671 	.word	0x00402671

00402404 <atexit>:
  402404:	2300      	movs	r3, #0
  402406:	4601      	mov	r1, r0
  402408:	461a      	mov	r2, r3
  40240a:	4618      	mov	r0, r3
  40240c:	f001 bc6c 	b.w	403ce8 <__register_exitproc>

00402410 <__sflush_r>:
  402410:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  402414:	b29a      	uxth	r2, r3
  402416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40241a:	460d      	mov	r5, r1
  40241c:	0711      	lsls	r1, r2, #28
  40241e:	4680      	mov	r8, r0
  402420:	d43a      	bmi.n	402498 <__sflush_r+0x88>
  402422:	686a      	ldr	r2, [r5, #4]
  402424:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402428:	2a00      	cmp	r2, #0
  40242a:	81ab      	strh	r3, [r5, #12]
  40242c:	dd6f      	ble.n	40250e <__sflush_r+0xfe>
  40242e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402430:	2c00      	cmp	r4, #0
  402432:	d049      	beq.n	4024c8 <__sflush_r+0xb8>
  402434:	2200      	movs	r2, #0
  402436:	b29b      	uxth	r3, r3
  402438:	f8d8 6000 	ldr.w	r6, [r8]
  40243c:	f8c8 2000 	str.w	r2, [r8]
  402440:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  402444:	d067      	beq.n	402516 <__sflush_r+0x106>
  402446:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402448:	075f      	lsls	r7, r3, #29
  40244a:	d505      	bpl.n	402458 <__sflush_r+0x48>
  40244c:	6869      	ldr	r1, [r5, #4]
  40244e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402450:	1a52      	subs	r2, r2, r1
  402452:	b10b      	cbz	r3, 402458 <__sflush_r+0x48>
  402454:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  402456:	1ad2      	subs	r2, r2, r3
  402458:	2300      	movs	r3, #0
  40245a:	69e9      	ldr	r1, [r5, #28]
  40245c:	4640      	mov	r0, r8
  40245e:	47a0      	blx	r4
  402460:	1c44      	adds	r4, r0, #1
  402462:	d03c      	beq.n	4024de <__sflush_r+0xce>
  402464:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402468:	692a      	ldr	r2, [r5, #16]
  40246a:	602a      	str	r2, [r5, #0]
  40246c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402470:	2200      	movs	r2, #0
  402472:	81ab      	strh	r3, [r5, #12]
  402474:	04db      	lsls	r3, r3, #19
  402476:	606a      	str	r2, [r5, #4]
  402478:	d447      	bmi.n	40250a <__sflush_r+0xfa>
  40247a:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40247c:	f8c8 6000 	str.w	r6, [r8]
  402480:	b311      	cbz	r1, 4024c8 <__sflush_r+0xb8>
  402482:	f105 0340 	add.w	r3, r5, #64	; 0x40
  402486:	4299      	cmp	r1, r3
  402488:	d002      	beq.n	402490 <__sflush_r+0x80>
  40248a:	4640      	mov	r0, r8
  40248c:	f000 f9de 	bl	40284c <_free_r>
  402490:	2000      	movs	r0, #0
  402492:	6328      	str	r0, [r5, #48]	; 0x30
  402494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402498:	692e      	ldr	r6, [r5, #16]
  40249a:	b1ae      	cbz	r6, 4024c8 <__sflush_r+0xb8>
  40249c:	682c      	ldr	r4, [r5, #0]
  40249e:	602e      	str	r6, [r5, #0]
  4024a0:	0791      	lsls	r1, r2, #30
  4024a2:	bf0c      	ite	eq
  4024a4:	696b      	ldreq	r3, [r5, #20]
  4024a6:	2300      	movne	r3, #0
  4024a8:	1ba4      	subs	r4, r4, r6
  4024aa:	60ab      	str	r3, [r5, #8]
  4024ac:	e00a      	b.n	4024c4 <__sflush_r+0xb4>
  4024ae:	4623      	mov	r3, r4
  4024b0:	4632      	mov	r2, r6
  4024b2:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4024b4:	69e9      	ldr	r1, [r5, #28]
  4024b6:	4640      	mov	r0, r8
  4024b8:	47b8      	blx	r7
  4024ba:	2800      	cmp	r0, #0
  4024bc:	eba4 0400 	sub.w	r4, r4, r0
  4024c0:	4406      	add	r6, r0
  4024c2:	dd04      	ble.n	4024ce <__sflush_r+0xbe>
  4024c4:	2c00      	cmp	r4, #0
  4024c6:	dcf2      	bgt.n	4024ae <__sflush_r+0x9e>
  4024c8:	2000      	movs	r0, #0
  4024ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4024ce:	89ab      	ldrh	r3, [r5, #12]
  4024d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4024d4:	81ab      	strh	r3, [r5, #12]
  4024d6:	f04f 30ff 	mov.w	r0, #4294967295
  4024da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4024de:	f8d8 4000 	ldr.w	r4, [r8]
  4024e2:	2c1d      	cmp	r4, #29
  4024e4:	d8f3      	bhi.n	4024ce <__sflush_r+0xbe>
  4024e6:	4b19      	ldr	r3, [pc, #100]	; (40254c <__sflush_r+0x13c>)
  4024e8:	40e3      	lsrs	r3, r4
  4024ea:	43db      	mvns	r3, r3
  4024ec:	f013 0301 	ands.w	r3, r3, #1
  4024f0:	d1ed      	bne.n	4024ce <__sflush_r+0xbe>
  4024f2:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4024f6:	606b      	str	r3, [r5, #4]
  4024f8:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4024fc:	6929      	ldr	r1, [r5, #16]
  4024fe:	81ab      	strh	r3, [r5, #12]
  402500:	04da      	lsls	r2, r3, #19
  402502:	6029      	str	r1, [r5, #0]
  402504:	d5b9      	bpl.n	40247a <__sflush_r+0x6a>
  402506:	2c00      	cmp	r4, #0
  402508:	d1b7      	bne.n	40247a <__sflush_r+0x6a>
  40250a:	6528      	str	r0, [r5, #80]	; 0x50
  40250c:	e7b5      	b.n	40247a <__sflush_r+0x6a>
  40250e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  402510:	2a00      	cmp	r2, #0
  402512:	dc8c      	bgt.n	40242e <__sflush_r+0x1e>
  402514:	e7d8      	b.n	4024c8 <__sflush_r+0xb8>
  402516:	2301      	movs	r3, #1
  402518:	69e9      	ldr	r1, [r5, #28]
  40251a:	4640      	mov	r0, r8
  40251c:	47a0      	blx	r4
  40251e:	1c43      	adds	r3, r0, #1
  402520:	4602      	mov	r2, r0
  402522:	d002      	beq.n	40252a <__sflush_r+0x11a>
  402524:	89ab      	ldrh	r3, [r5, #12]
  402526:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402528:	e78e      	b.n	402448 <__sflush_r+0x38>
  40252a:	f8d8 3000 	ldr.w	r3, [r8]
  40252e:	2b00      	cmp	r3, #0
  402530:	d0f8      	beq.n	402524 <__sflush_r+0x114>
  402532:	2b1d      	cmp	r3, #29
  402534:	d001      	beq.n	40253a <__sflush_r+0x12a>
  402536:	2b16      	cmp	r3, #22
  402538:	d102      	bne.n	402540 <__sflush_r+0x130>
  40253a:	f8c8 6000 	str.w	r6, [r8]
  40253e:	e7c3      	b.n	4024c8 <__sflush_r+0xb8>
  402540:	89ab      	ldrh	r3, [r5, #12]
  402542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402546:	81ab      	strh	r3, [r5, #12]
  402548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40254c:	20400001 	.word	0x20400001

00402550 <_fflush_r>:
  402550:	b538      	push	{r3, r4, r5, lr}
  402552:	460d      	mov	r5, r1
  402554:	4604      	mov	r4, r0
  402556:	b108      	cbz	r0, 40255c <_fflush_r+0xc>
  402558:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40255a:	b1bb      	cbz	r3, 40258c <_fflush_r+0x3c>
  40255c:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  402560:	b188      	cbz	r0, 402586 <_fflush_r+0x36>
  402562:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402564:	07db      	lsls	r3, r3, #31
  402566:	d401      	bmi.n	40256c <_fflush_r+0x1c>
  402568:	0581      	lsls	r1, r0, #22
  40256a:	d517      	bpl.n	40259c <_fflush_r+0x4c>
  40256c:	4620      	mov	r0, r4
  40256e:	4629      	mov	r1, r5
  402570:	f7ff ff4e 	bl	402410 <__sflush_r>
  402574:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402576:	07da      	lsls	r2, r3, #31
  402578:	4604      	mov	r4, r0
  40257a:	d402      	bmi.n	402582 <_fflush_r+0x32>
  40257c:	89ab      	ldrh	r3, [r5, #12]
  40257e:	059b      	lsls	r3, r3, #22
  402580:	d507      	bpl.n	402592 <_fflush_r+0x42>
  402582:	4620      	mov	r0, r4
  402584:	bd38      	pop	{r3, r4, r5, pc}
  402586:	4604      	mov	r4, r0
  402588:	4620      	mov	r0, r4
  40258a:	bd38      	pop	{r3, r4, r5, pc}
  40258c:	f000 f838 	bl	402600 <__sinit>
  402590:	e7e4      	b.n	40255c <_fflush_r+0xc>
  402592:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402594:	f000 fbf6 	bl	402d84 <__retarget_lock_release_recursive>
  402598:	4620      	mov	r0, r4
  40259a:	bd38      	pop	{r3, r4, r5, pc}
  40259c:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40259e:	f000 fbef 	bl	402d80 <__retarget_lock_acquire_recursive>
  4025a2:	e7e3      	b.n	40256c <_fflush_r+0x1c>

004025a4 <_cleanup_r>:
  4025a4:	4901      	ldr	r1, [pc, #4]	; (4025ac <_cleanup_r+0x8>)
  4025a6:	f000 bbaf 	b.w	402d08 <_fwalk_reent>
  4025aa:	bf00      	nop
  4025ac:	00403dd1 	.word	0x00403dd1

004025b0 <std.isra.0>:
  4025b0:	b510      	push	{r4, lr}
  4025b2:	2300      	movs	r3, #0
  4025b4:	4604      	mov	r4, r0
  4025b6:	8181      	strh	r1, [r0, #12]
  4025b8:	81c2      	strh	r2, [r0, #14]
  4025ba:	6003      	str	r3, [r0, #0]
  4025bc:	6043      	str	r3, [r0, #4]
  4025be:	6083      	str	r3, [r0, #8]
  4025c0:	6643      	str	r3, [r0, #100]	; 0x64
  4025c2:	6103      	str	r3, [r0, #16]
  4025c4:	6143      	str	r3, [r0, #20]
  4025c6:	6183      	str	r3, [r0, #24]
  4025c8:	4619      	mov	r1, r3
  4025ca:	2208      	movs	r2, #8
  4025cc:	305c      	adds	r0, #92	; 0x5c
  4025ce:	f7fe ff93 	bl	4014f8 <memset>
  4025d2:	4807      	ldr	r0, [pc, #28]	; (4025f0 <std.isra.0+0x40>)
  4025d4:	4907      	ldr	r1, [pc, #28]	; (4025f4 <std.isra.0+0x44>)
  4025d6:	4a08      	ldr	r2, [pc, #32]	; (4025f8 <std.isra.0+0x48>)
  4025d8:	4b08      	ldr	r3, [pc, #32]	; (4025fc <std.isra.0+0x4c>)
  4025da:	6220      	str	r0, [r4, #32]
  4025dc:	61e4      	str	r4, [r4, #28]
  4025de:	6261      	str	r1, [r4, #36]	; 0x24
  4025e0:	62a2      	str	r2, [r4, #40]	; 0x28
  4025e2:	62e3      	str	r3, [r4, #44]	; 0x2c
  4025e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4025e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4025ec:	f000 bbc4 	b.w	402d78 <__retarget_lock_init_recursive>
  4025f0:	00403a35 	.word	0x00403a35
  4025f4:	00403a59 	.word	0x00403a59
  4025f8:	00403a95 	.word	0x00403a95
  4025fc:	00403ab5 	.word	0x00403ab5

00402600 <__sinit>:
  402600:	b510      	push	{r4, lr}
  402602:	4604      	mov	r4, r0
  402604:	4812      	ldr	r0, [pc, #72]	; (402650 <__sinit+0x50>)
  402606:	f000 fbbb 	bl	402d80 <__retarget_lock_acquire_recursive>
  40260a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40260c:	b9d2      	cbnz	r2, 402644 <__sinit+0x44>
  40260e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  402612:	4810      	ldr	r0, [pc, #64]	; (402654 <__sinit+0x54>)
  402614:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  402618:	2103      	movs	r1, #3
  40261a:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40261e:	63e0      	str	r0, [r4, #60]	; 0x3c
  402620:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  402624:	6860      	ldr	r0, [r4, #4]
  402626:	2104      	movs	r1, #4
  402628:	f7ff ffc2 	bl	4025b0 <std.isra.0>
  40262c:	2201      	movs	r2, #1
  40262e:	2109      	movs	r1, #9
  402630:	68a0      	ldr	r0, [r4, #8]
  402632:	f7ff ffbd 	bl	4025b0 <std.isra.0>
  402636:	2202      	movs	r2, #2
  402638:	2112      	movs	r1, #18
  40263a:	68e0      	ldr	r0, [r4, #12]
  40263c:	f7ff ffb8 	bl	4025b0 <std.isra.0>
  402640:	2301      	movs	r3, #1
  402642:	63a3      	str	r3, [r4, #56]	; 0x38
  402644:	4802      	ldr	r0, [pc, #8]	; (402650 <__sinit+0x50>)
  402646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40264a:	f000 bb9b 	b.w	402d84 <__retarget_lock_release_recursive>
  40264e:	bf00      	nop
  402650:	20401af0 	.word	0x20401af0
  402654:	004025a5 	.word	0x004025a5

00402658 <__sfp_lock_acquire>:
  402658:	4801      	ldr	r0, [pc, #4]	; (402660 <__sfp_lock_acquire+0x8>)
  40265a:	f000 bb91 	b.w	402d80 <__retarget_lock_acquire_recursive>
  40265e:	bf00      	nop
  402660:	20401b04 	.word	0x20401b04

00402664 <__sfp_lock_release>:
  402664:	4801      	ldr	r0, [pc, #4]	; (40266c <__sfp_lock_release+0x8>)
  402666:	f000 bb8d 	b.w	402d84 <__retarget_lock_release_recursive>
  40266a:	bf00      	nop
  40266c:	20401b04 	.word	0x20401b04

00402670 <__libc_fini_array>:
  402670:	b538      	push	{r3, r4, r5, lr}
  402672:	4c0a      	ldr	r4, [pc, #40]	; (40269c <__libc_fini_array+0x2c>)
  402674:	4d0a      	ldr	r5, [pc, #40]	; (4026a0 <__libc_fini_array+0x30>)
  402676:	1b64      	subs	r4, r4, r5
  402678:	10a4      	asrs	r4, r4, #2
  40267a:	d00a      	beq.n	402692 <__libc_fini_array+0x22>
  40267c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402680:	3b01      	subs	r3, #1
  402682:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402686:	3c01      	subs	r4, #1
  402688:	f855 3904 	ldr.w	r3, [r5], #-4
  40268c:	4798      	blx	r3
  40268e:	2c00      	cmp	r4, #0
  402690:	d1f9      	bne.n	402686 <__libc_fini_array+0x16>
  402692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402696:	f001 beb1 	b.w	4043fc <_fini>
  40269a:	bf00      	nop
  40269c:	0040440c 	.word	0x0040440c
  4026a0:	00404408 	.word	0x00404408

004026a4 <__fputwc>:
  4026a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4026a8:	b082      	sub	sp, #8
  4026aa:	4680      	mov	r8, r0
  4026ac:	4689      	mov	r9, r1
  4026ae:	4614      	mov	r4, r2
  4026b0:	f000 fb54 	bl	402d5c <__locale_mb_cur_max>
  4026b4:	2801      	cmp	r0, #1
  4026b6:	d036      	beq.n	402726 <__fputwc+0x82>
  4026b8:	464a      	mov	r2, r9
  4026ba:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4026be:	a901      	add	r1, sp, #4
  4026c0:	4640      	mov	r0, r8
  4026c2:	f001 fac3 	bl	403c4c <_wcrtomb_r>
  4026c6:	1c42      	adds	r2, r0, #1
  4026c8:	4606      	mov	r6, r0
  4026ca:	d025      	beq.n	402718 <__fputwc+0x74>
  4026cc:	b3a8      	cbz	r0, 40273a <__fputwc+0x96>
  4026ce:	f89d e004 	ldrb.w	lr, [sp, #4]
  4026d2:	2500      	movs	r5, #0
  4026d4:	f10d 0a04 	add.w	sl, sp, #4
  4026d8:	e009      	b.n	4026ee <__fputwc+0x4a>
  4026da:	6823      	ldr	r3, [r4, #0]
  4026dc:	1c5a      	adds	r2, r3, #1
  4026de:	6022      	str	r2, [r4, #0]
  4026e0:	f883 e000 	strb.w	lr, [r3]
  4026e4:	3501      	adds	r5, #1
  4026e6:	42b5      	cmp	r5, r6
  4026e8:	d227      	bcs.n	40273a <__fputwc+0x96>
  4026ea:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4026ee:	68a3      	ldr	r3, [r4, #8]
  4026f0:	3b01      	subs	r3, #1
  4026f2:	2b00      	cmp	r3, #0
  4026f4:	60a3      	str	r3, [r4, #8]
  4026f6:	daf0      	bge.n	4026da <__fputwc+0x36>
  4026f8:	69a7      	ldr	r7, [r4, #24]
  4026fa:	42bb      	cmp	r3, r7
  4026fc:	4671      	mov	r1, lr
  4026fe:	4622      	mov	r2, r4
  402700:	4640      	mov	r0, r8
  402702:	db02      	blt.n	40270a <__fputwc+0x66>
  402704:	f1be 0f0a 	cmp.w	lr, #10
  402708:	d1e7      	bne.n	4026da <__fputwc+0x36>
  40270a:	f001 fa47 	bl	403b9c <__swbuf_r>
  40270e:	1c43      	adds	r3, r0, #1
  402710:	d1e8      	bne.n	4026e4 <__fputwc+0x40>
  402712:	b002      	add	sp, #8
  402714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402718:	89a3      	ldrh	r3, [r4, #12]
  40271a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40271e:	81a3      	strh	r3, [r4, #12]
  402720:	b002      	add	sp, #8
  402722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402726:	f109 33ff 	add.w	r3, r9, #4294967295
  40272a:	2bfe      	cmp	r3, #254	; 0xfe
  40272c:	d8c4      	bhi.n	4026b8 <__fputwc+0x14>
  40272e:	fa5f fe89 	uxtb.w	lr, r9
  402732:	4606      	mov	r6, r0
  402734:	f88d e004 	strb.w	lr, [sp, #4]
  402738:	e7cb      	b.n	4026d2 <__fputwc+0x2e>
  40273a:	4648      	mov	r0, r9
  40273c:	b002      	add	sp, #8
  40273e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402742:	bf00      	nop

00402744 <_fputwc_r>:
  402744:	b530      	push	{r4, r5, lr}
  402746:	6e53      	ldr	r3, [r2, #100]	; 0x64
  402748:	f013 0f01 	tst.w	r3, #1
  40274c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  402750:	4614      	mov	r4, r2
  402752:	b083      	sub	sp, #12
  402754:	4605      	mov	r5, r0
  402756:	b29a      	uxth	r2, r3
  402758:	d101      	bne.n	40275e <_fputwc_r+0x1a>
  40275a:	0590      	lsls	r0, r2, #22
  40275c:	d51c      	bpl.n	402798 <_fputwc_r+0x54>
  40275e:	0490      	lsls	r0, r2, #18
  402760:	d406      	bmi.n	402770 <_fputwc_r+0x2c>
  402762:	6e62      	ldr	r2, [r4, #100]	; 0x64
  402764:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402768:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40276c:	81a3      	strh	r3, [r4, #12]
  40276e:	6662      	str	r2, [r4, #100]	; 0x64
  402770:	4628      	mov	r0, r5
  402772:	4622      	mov	r2, r4
  402774:	f7ff ff96 	bl	4026a4 <__fputwc>
  402778:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40277a:	07da      	lsls	r2, r3, #31
  40277c:	4605      	mov	r5, r0
  40277e:	d402      	bmi.n	402786 <_fputwc_r+0x42>
  402780:	89a3      	ldrh	r3, [r4, #12]
  402782:	059b      	lsls	r3, r3, #22
  402784:	d502      	bpl.n	40278c <_fputwc_r+0x48>
  402786:	4628      	mov	r0, r5
  402788:	b003      	add	sp, #12
  40278a:	bd30      	pop	{r4, r5, pc}
  40278c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40278e:	f000 faf9 	bl	402d84 <__retarget_lock_release_recursive>
  402792:	4628      	mov	r0, r5
  402794:	b003      	add	sp, #12
  402796:	bd30      	pop	{r4, r5, pc}
  402798:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40279a:	9101      	str	r1, [sp, #4]
  40279c:	f000 faf0 	bl	402d80 <__retarget_lock_acquire_recursive>
  4027a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4027a4:	9901      	ldr	r1, [sp, #4]
  4027a6:	b29a      	uxth	r2, r3
  4027a8:	e7d9      	b.n	40275e <_fputwc_r+0x1a>
  4027aa:	bf00      	nop

004027ac <_malloc_trim_r>:
  4027ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4027ae:	4f24      	ldr	r7, [pc, #144]	; (402840 <_malloc_trim_r+0x94>)
  4027b0:	460c      	mov	r4, r1
  4027b2:	4606      	mov	r6, r0
  4027b4:	f000 ff7a 	bl	4036ac <__malloc_lock>
  4027b8:	68bb      	ldr	r3, [r7, #8]
  4027ba:	685d      	ldr	r5, [r3, #4]
  4027bc:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4027c0:	310f      	adds	r1, #15
  4027c2:	f025 0503 	bic.w	r5, r5, #3
  4027c6:	4429      	add	r1, r5
  4027c8:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4027cc:	f021 010f 	bic.w	r1, r1, #15
  4027d0:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4027d4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4027d8:	db07      	blt.n	4027ea <_malloc_trim_r+0x3e>
  4027da:	2100      	movs	r1, #0
  4027dc:	4630      	mov	r0, r6
  4027de:	f001 f917 	bl	403a10 <_sbrk_r>
  4027e2:	68bb      	ldr	r3, [r7, #8]
  4027e4:	442b      	add	r3, r5
  4027e6:	4298      	cmp	r0, r3
  4027e8:	d004      	beq.n	4027f4 <_malloc_trim_r+0x48>
  4027ea:	4630      	mov	r0, r6
  4027ec:	f000 ff64 	bl	4036b8 <__malloc_unlock>
  4027f0:	2000      	movs	r0, #0
  4027f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4027f4:	4261      	negs	r1, r4
  4027f6:	4630      	mov	r0, r6
  4027f8:	f001 f90a 	bl	403a10 <_sbrk_r>
  4027fc:	3001      	adds	r0, #1
  4027fe:	d00d      	beq.n	40281c <_malloc_trim_r+0x70>
  402800:	4b10      	ldr	r3, [pc, #64]	; (402844 <_malloc_trim_r+0x98>)
  402802:	68ba      	ldr	r2, [r7, #8]
  402804:	6819      	ldr	r1, [r3, #0]
  402806:	1b2d      	subs	r5, r5, r4
  402808:	f045 0501 	orr.w	r5, r5, #1
  40280c:	4630      	mov	r0, r6
  40280e:	1b09      	subs	r1, r1, r4
  402810:	6055      	str	r5, [r2, #4]
  402812:	6019      	str	r1, [r3, #0]
  402814:	f000 ff50 	bl	4036b8 <__malloc_unlock>
  402818:	2001      	movs	r0, #1
  40281a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40281c:	2100      	movs	r1, #0
  40281e:	4630      	mov	r0, r6
  402820:	f001 f8f6 	bl	403a10 <_sbrk_r>
  402824:	68ba      	ldr	r2, [r7, #8]
  402826:	1a83      	subs	r3, r0, r2
  402828:	2b0f      	cmp	r3, #15
  40282a:	ddde      	ble.n	4027ea <_malloc_trim_r+0x3e>
  40282c:	4c06      	ldr	r4, [pc, #24]	; (402848 <_malloc_trim_r+0x9c>)
  40282e:	4905      	ldr	r1, [pc, #20]	; (402844 <_malloc_trim_r+0x98>)
  402830:	6824      	ldr	r4, [r4, #0]
  402832:	f043 0301 	orr.w	r3, r3, #1
  402836:	1b00      	subs	r0, r0, r4
  402838:	6053      	str	r3, [r2, #4]
  40283a:	6008      	str	r0, [r1, #0]
  40283c:	e7d5      	b.n	4027ea <_malloc_trim_r+0x3e>
  40283e:	bf00      	nop
  402840:	204005c0 	.word	0x204005c0
  402844:	20401aa4 	.word	0x20401aa4
  402848:	204009c8 	.word	0x204009c8

0040284c <_free_r>:
  40284c:	2900      	cmp	r1, #0
  40284e:	d044      	beq.n	4028da <_free_r+0x8e>
  402850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402854:	460d      	mov	r5, r1
  402856:	4680      	mov	r8, r0
  402858:	f000 ff28 	bl	4036ac <__malloc_lock>
  40285c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  402860:	4969      	ldr	r1, [pc, #420]	; (402a08 <_free_r+0x1bc>)
  402862:	f027 0301 	bic.w	r3, r7, #1
  402866:	f1a5 0408 	sub.w	r4, r5, #8
  40286a:	18e2      	adds	r2, r4, r3
  40286c:	688e      	ldr	r6, [r1, #8]
  40286e:	6850      	ldr	r0, [r2, #4]
  402870:	42b2      	cmp	r2, r6
  402872:	f020 0003 	bic.w	r0, r0, #3
  402876:	d05e      	beq.n	402936 <_free_r+0xea>
  402878:	07fe      	lsls	r6, r7, #31
  40287a:	6050      	str	r0, [r2, #4]
  40287c:	d40b      	bmi.n	402896 <_free_r+0x4a>
  40287e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  402882:	1be4      	subs	r4, r4, r7
  402884:	f101 0e08 	add.w	lr, r1, #8
  402888:	68a5      	ldr	r5, [r4, #8]
  40288a:	4575      	cmp	r5, lr
  40288c:	443b      	add	r3, r7
  40288e:	d06d      	beq.n	40296c <_free_r+0x120>
  402890:	68e7      	ldr	r7, [r4, #12]
  402892:	60ef      	str	r7, [r5, #12]
  402894:	60bd      	str	r5, [r7, #8]
  402896:	1815      	adds	r5, r2, r0
  402898:	686d      	ldr	r5, [r5, #4]
  40289a:	07ed      	lsls	r5, r5, #31
  40289c:	d53e      	bpl.n	40291c <_free_r+0xd0>
  40289e:	f043 0201 	orr.w	r2, r3, #1
  4028a2:	6062      	str	r2, [r4, #4]
  4028a4:	50e3      	str	r3, [r4, r3]
  4028a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4028aa:	d217      	bcs.n	4028dc <_free_r+0x90>
  4028ac:	08db      	lsrs	r3, r3, #3
  4028ae:	1c58      	adds	r0, r3, #1
  4028b0:	109a      	asrs	r2, r3, #2
  4028b2:	684d      	ldr	r5, [r1, #4]
  4028b4:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4028b8:	60a7      	str	r7, [r4, #8]
  4028ba:	2301      	movs	r3, #1
  4028bc:	4093      	lsls	r3, r2
  4028be:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4028c2:	432b      	orrs	r3, r5
  4028c4:	3a08      	subs	r2, #8
  4028c6:	60e2      	str	r2, [r4, #12]
  4028c8:	604b      	str	r3, [r1, #4]
  4028ca:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4028ce:	60fc      	str	r4, [r7, #12]
  4028d0:	4640      	mov	r0, r8
  4028d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4028d6:	f000 beef 	b.w	4036b8 <__malloc_unlock>
  4028da:	4770      	bx	lr
  4028dc:	0a5a      	lsrs	r2, r3, #9
  4028de:	2a04      	cmp	r2, #4
  4028e0:	d852      	bhi.n	402988 <_free_r+0x13c>
  4028e2:	099a      	lsrs	r2, r3, #6
  4028e4:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4028e8:	00ff      	lsls	r7, r7, #3
  4028ea:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4028ee:	19c8      	adds	r0, r1, r7
  4028f0:	59ca      	ldr	r2, [r1, r7]
  4028f2:	3808      	subs	r0, #8
  4028f4:	4290      	cmp	r0, r2
  4028f6:	d04f      	beq.n	402998 <_free_r+0x14c>
  4028f8:	6851      	ldr	r1, [r2, #4]
  4028fa:	f021 0103 	bic.w	r1, r1, #3
  4028fe:	428b      	cmp	r3, r1
  402900:	d232      	bcs.n	402968 <_free_r+0x11c>
  402902:	6892      	ldr	r2, [r2, #8]
  402904:	4290      	cmp	r0, r2
  402906:	d1f7      	bne.n	4028f8 <_free_r+0xac>
  402908:	68c3      	ldr	r3, [r0, #12]
  40290a:	60a0      	str	r0, [r4, #8]
  40290c:	60e3      	str	r3, [r4, #12]
  40290e:	609c      	str	r4, [r3, #8]
  402910:	60c4      	str	r4, [r0, #12]
  402912:	4640      	mov	r0, r8
  402914:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402918:	f000 bece 	b.w	4036b8 <__malloc_unlock>
  40291c:	6895      	ldr	r5, [r2, #8]
  40291e:	4f3b      	ldr	r7, [pc, #236]	; (402a0c <_free_r+0x1c0>)
  402920:	42bd      	cmp	r5, r7
  402922:	4403      	add	r3, r0
  402924:	d040      	beq.n	4029a8 <_free_r+0x15c>
  402926:	68d0      	ldr	r0, [r2, #12]
  402928:	60e8      	str	r0, [r5, #12]
  40292a:	f043 0201 	orr.w	r2, r3, #1
  40292e:	6085      	str	r5, [r0, #8]
  402930:	6062      	str	r2, [r4, #4]
  402932:	50e3      	str	r3, [r4, r3]
  402934:	e7b7      	b.n	4028a6 <_free_r+0x5a>
  402936:	07ff      	lsls	r7, r7, #31
  402938:	4403      	add	r3, r0
  40293a:	d407      	bmi.n	40294c <_free_r+0x100>
  40293c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  402940:	1aa4      	subs	r4, r4, r2
  402942:	4413      	add	r3, r2
  402944:	68a0      	ldr	r0, [r4, #8]
  402946:	68e2      	ldr	r2, [r4, #12]
  402948:	60c2      	str	r2, [r0, #12]
  40294a:	6090      	str	r0, [r2, #8]
  40294c:	4a30      	ldr	r2, [pc, #192]	; (402a10 <_free_r+0x1c4>)
  40294e:	6812      	ldr	r2, [r2, #0]
  402950:	f043 0001 	orr.w	r0, r3, #1
  402954:	4293      	cmp	r3, r2
  402956:	6060      	str	r0, [r4, #4]
  402958:	608c      	str	r4, [r1, #8]
  40295a:	d3b9      	bcc.n	4028d0 <_free_r+0x84>
  40295c:	4b2d      	ldr	r3, [pc, #180]	; (402a14 <_free_r+0x1c8>)
  40295e:	4640      	mov	r0, r8
  402960:	6819      	ldr	r1, [r3, #0]
  402962:	f7ff ff23 	bl	4027ac <_malloc_trim_r>
  402966:	e7b3      	b.n	4028d0 <_free_r+0x84>
  402968:	4610      	mov	r0, r2
  40296a:	e7cd      	b.n	402908 <_free_r+0xbc>
  40296c:	1811      	adds	r1, r2, r0
  40296e:	6849      	ldr	r1, [r1, #4]
  402970:	07c9      	lsls	r1, r1, #31
  402972:	d444      	bmi.n	4029fe <_free_r+0x1b2>
  402974:	6891      	ldr	r1, [r2, #8]
  402976:	68d2      	ldr	r2, [r2, #12]
  402978:	60ca      	str	r2, [r1, #12]
  40297a:	4403      	add	r3, r0
  40297c:	f043 0001 	orr.w	r0, r3, #1
  402980:	6091      	str	r1, [r2, #8]
  402982:	6060      	str	r0, [r4, #4]
  402984:	50e3      	str	r3, [r4, r3]
  402986:	e7a3      	b.n	4028d0 <_free_r+0x84>
  402988:	2a14      	cmp	r2, #20
  40298a:	d816      	bhi.n	4029ba <_free_r+0x16e>
  40298c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  402990:	00ff      	lsls	r7, r7, #3
  402992:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  402996:	e7aa      	b.n	4028ee <_free_r+0xa2>
  402998:	10aa      	asrs	r2, r5, #2
  40299a:	2301      	movs	r3, #1
  40299c:	684d      	ldr	r5, [r1, #4]
  40299e:	4093      	lsls	r3, r2
  4029a0:	432b      	orrs	r3, r5
  4029a2:	604b      	str	r3, [r1, #4]
  4029a4:	4603      	mov	r3, r0
  4029a6:	e7b0      	b.n	40290a <_free_r+0xbe>
  4029a8:	f043 0201 	orr.w	r2, r3, #1
  4029ac:	614c      	str	r4, [r1, #20]
  4029ae:	610c      	str	r4, [r1, #16]
  4029b0:	60e5      	str	r5, [r4, #12]
  4029b2:	60a5      	str	r5, [r4, #8]
  4029b4:	6062      	str	r2, [r4, #4]
  4029b6:	50e3      	str	r3, [r4, r3]
  4029b8:	e78a      	b.n	4028d0 <_free_r+0x84>
  4029ba:	2a54      	cmp	r2, #84	; 0x54
  4029bc:	d806      	bhi.n	4029cc <_free_r+0x180>
  4029be:	0b1a      	lsrs	r2, r3, #12
  4029c0:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4029c4:	00ff      	lsls	r7, r7, #3
  4029c6:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4029ca:	e790      	b.n	4028ee <_free_r+0xa2>
  4029cc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4029d0:	d806      	bhi.n	4029e0 <_free_r+0x194>
  4029d2:	0bda      	lsrs	r2, r3, #15
  4029d4:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4029d8:	00ff      	lsls	r7, r7, #3
  4029da:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4029de:	e786      	b.n	4028ee <_free_r+0xa2>
  4029e0:	f240 5054 	movw	r0, #1364	; 0x554
  4029e4:	4282      	cmp	r2, r0
  4029e6:	d806      	bhi.n	4029f6 <_free_r+0x1aa>
  4029e8:	0c9a      	lsrs	r2, r3, #18
  4029ea:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4029ee:	00ff      	lsls	r7, r7, #3
  4029f0:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4029f4:	e77b      	b.n	4028ee <_free_r+0xa2>
  4029f6:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4029fa:	257e      	movs	r5, #126	; 0x7e
  4029fc:	e777      	b.n	4028ee <_free_r+0xa2>
  4029fe:	f043 0101 	orr.w	r1, r3, #1
  402a02:	6061      	str	r1, [r4, #4]
  402a04:	6013      	str	r3, [r2, #0]
  402a06:	e763      	b.n	4028d0 <_free_r+0x84>
  402a08:	204005c0 	.word	0x204005c0
  402a0c:	204005c8 	.word	0x204005c8
  402a10:	204009cc 	.word	0x204009cc
  402a14:	20401ad4 	.word	0x20401ad4

00402a18 <__sfvwrite_r>:
  402a18:	6893      	ldr	r3, [r2, #8]
  402a1a:	2b00      	cmp	r3, #0
  402a1c:	d073      	beq.n	402b06 <__sfvwrite_r+0xee>
  402a1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402a22:	898b      	ldrh	r3, [r1, #12]
  402a24:	b083      	sub	sp, #12
  402a26:	460c      	mov	r4, r1
  402a28:	0719      	lsls	r1, r3, #28
  402a2a:	9000      	str	r0, [sp, #0]
  402a2c:	4616      	mov	r6, r2
  402a2e:	d526      	bpl.n	402a7e <__sfvwrite_r+0x66>
  402a30:	6922      	ldr	r2, [r4, #16]
  402a32:	b322      	cbz	r2, 402a7e <__sfvwrite_r+0x66>
  402a34:	f013 0002 	ands.w	r0, r3, #2
  402a38:	6835      	ldr	r5, [r6, #0]
  402a3a:	d02c      	beq.n	402a96 <__sfvwrite_r+0x7e>
  402a3c:	f04f 0900 	mov.w	r9, #0
  402a40:	4fb0      	ldr	r7, [pc, #704]	; (402d04 <__sfvwrite_r+0x2ec>)
  402a42:	46c8      	mov	r8, r9
  402a44:	46b2      	mov	sl, r6
  402a46:	45b8      	cmp	r8, r7
  402a48:	4643      	mov	r3, r8
  402a4a:	464a      	mov	r2, r9
  402a4c:	bf28      	it	cs
  402a4e:	463b      	movcs	r3, r7
  402a50:	9800      	ldr	r0, [sp, #0]
  402a52:	f1b8 0f00 	cmp.w	r8, #0
  402a56:	d050      	beq.n	402afa <__sfvwrite_r+0xe2>
  402a58:	69e1      	ldr	r1, [r4, #28]
  402a5a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402a5c:	47b0      	blx	r6
  402a5e:	2800      	cmp	r0, #0
  402a60:	dd58      	ble.n	402b14 <__sfvwrite_r+0xfc>
  402a62:	f8da 3008 	ldr.w	r3, [sl, #8]
  402a66:	1a1b      	subs	r3, r3, r0
  402a68:	4481      	add	r9, r0
  402a6a:	eba8 0800 	sub.w	r8, r8, r0
  402a6e:	f8ca 3008 	str.w	r3, [sl, #8]
  402a72:	2b00      	cmp	r3, #0
  402a74:	d1e7      	bne.n	402a46 <__sfvwrite_r+0x2e>
  402a76:	2000      	movs	r0, #0
  402a78:	b003      	add	sp, #12
  402a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402a7e:	4621      	mov	r1, r4
  402a80:	9800      	ldr	r0, [sp, #0]
  402a82:	f7ff fc51 	bl	402328 <__swsetup_r>
  402a86:	2800      	cmp	r0, #0
  402a88:	f040 8133 	bne.w	402cf2 <__sfvwrite_r+0x2da>
  402a8c:	89a3      	ldrh	r3, [r4, #12]
  402a8e:	6835      	ldr	r5, [r6, #0]
  402a90:	f013 0002 	ands.w	r0, r3, #2
  402a94:	d1d2      	bne.n	402a3c <__sfvwrite_r+0x24>
  402a96:	f013 0901 	ands.w	r9, r3, #1
  402a9a:	d145      	bne.n	402b28 <__sfvwrite_r+0x110>
  402a9c:	464f      	mov	r7, r9
  402a9e:	9601      	str	r6, [sp, #4]
  402aa0:	b337      	cbz	r7, 402af0 <__sfvwrite_r+0xd8>
  402aa2:	059a      	lsls	r2, r3, #22
  402aa4:	f8d4 8008 	ldr.w	r8, [r4, #8]
  402aa8:	f140 8083 	bpl.w	402bb2 <__sfvwrite_r+0x19a>
  402aac:	4547      	cmp	r7, r8
  402aae:	46c3      	mov	fp, r8
  402ab0:	f0c0 80ab 	bcc.w	402c0a <__sfvwrite_r+0x1f2>
  402ab4:	f413 6f90 	tst.w	r3, #1152	; 0x480
  402ab8:	f040 80ac 	bne.w	402c14 <__sfvwrite_r+0x1fc>
  402abc:	6820      	ldr	r0, [r4, #0]
  402abe:	46ba      	mov	sl, r7
  402ac0:	465a      	mov	r2, fp
  402ac2:	4649      	mov	r1, r9
  402ac4:	f000 fd8e 	bl	4035e4 <memmove>
  402ac8:	68a2      	ldr	r2, [r4, #8]
  402aca:	6823      	ldr	r3, [r4, #0]
  402acc:	eba2 0208 	sub.w	r2, r2, r8
  402ad0:	445b      	add	r3, fp
  402ad2:	60a2      	str	r2, [r4, #8]
  402ad4:	6023      	str	r3, [r4, #0]
  402ad6:	9a01      	ldr	r2, [sp, #4]
  402ad8:	6893      	ldr	r3, [r2, #8]
  402ada:	eba3 030a 	sub.w	r3, r3, sl
  402ade:	44d1      	add	r9, sl
  402ae0:	eba7 070a 	sub.w	r7, r7, sl
  402ae4:	6093      	str	r3, [r2, #8]
  402ae6:	2b00      	cmp	r3, #0
  402ae8:	d0c5      	beq.n	402a76 <__sfvwrite_r+0x5e>
  402aea:	89a3      	ldrh	r3, [r4, #12]
  402aec:	2f00      	cmp	r7, #0
  402aee:	d1d8      	bne.n	402aa2 <__sfvwrite_r+0x8a>
  402af0:	f8d5 9000 	ldr.w	r9, [r5]
  402af4:	686f      	ldr	r7, [r5, #4]
  402af6:	3508      	adds	r5, #8
  402af8:	e7d2      	b.n	402aa0 <__sfvwrite_r+0x88>
  402afa:	f8d5 9000 	ldr.w	r9, [r5]
  402afe:	f8d5 8004 	ldr.w	r8, [r5, #4]
  402b02:	3508      	adds	r5, #8
  402b04:	e79f      	b.n	402a46 <__sfvwrite_r+0x2e>
  402b06:	2000      	movs	r0, #0
  402b08:	4770      	bx	lr
  402b0a:	4621      	mov	r1, r4
  402b0c:	9800      	ldr	r0, [sp, #0]
  402b0e:	f7ff fd1f 	bl	402550 <_fflush_r>
  402b12:	b370      	cbz	r0, 402b72 <__sfvwrite_r+0x15a>
  402b14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402b1c:	f04f 30ff 	mov.w	r0, #4294967295
  402b20:	81a3      	strh	r3, [r4, #12]
  402b22:	b003      	add	sp, #12
  402b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402b28:	4681      	mov	r9, r0
  402b2a:	4633      	mov	r3, r6
  402b2c:	464e      	mov	r6, r9
  402b2e:	46a8      	mov	r8, r5
  402b30:	469a      	mov	sl, r3
  402b32:	464d      	mov	r5, r9
  402b34:	b34e      	cbz	r6, 402b8a <__sfvwrite_r+0x172>
  402b36:	b380      	cbz	r0, 402b9a <__sfvwrite_r+0x182>
  402b38:	6820      	ldr	r0, [r4, #0]
  402b3a:	6923      	ldr	r3, [r4, #16]
  402b3c:	6962      	ldr	r2, [r4, #20]
  402b3e:	45b1      	cmp	r9, r6
  402b40:	46cb      	mov	fp, r9
  402b42:	bf28      	it	cs
  402b44:	46b3      	movcs	fp, r6
  402b46:	4298      	cmp	r0, r3
  402b48:	465f      	mov	r7, fp
  402b4a:	d904      	bls.n	402b56 <__sfvwrite_r+0x13e>
  402b4c:	68a3      	ldr	r3, [r4, #8]
  402b4e:	4413      	add	r3, r2
  402b50:	459b      	cmp	fp, r3
  402b52:	f300 80a6 	bgt.w	402ca2 <__sfvwrite_r+0x28a>
  402b56:	4593      	cmp	fp, r2
  402b58:	db4b      	blt.n	402bf2 <__sfvwrite_r+0x1da>
  402b5a:	4613      	mov	r3, r2
  402b5c:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402b5e:	69e1      	ldr	r1, [r4, #28]
  402b60:	9800      	ldr	r0, [sp, #0]
  402b62:	462a      	mov	r2, r5
  402b64:	47b8      	blx	r7
  402b66:	1e07      	subs	r7, r0, #0
  402b68:	ddd4      	ble.n	402b14 <__sfvwrite_r+0xfc>
  402b6a:	ebb9 0907 	subs.w	r9, r9, r7
  402b6e:	d0cc      	beq.n	402b0a <__sfvwrite_r+0xf2>
  402b70:	2001      	movs	r0, #1
  402b72:	f8da 3008 	ldr.w	r3, [sl, #8]
  402b76:	1bdb      	subs	r3, r3, r7
  402b78:	443d      	add	r5, r7
  402b7a:	1bf6      	subs	r6, r6, r7
  402b7c:	f8ca 3008 	str.w	r3, [sl, #8]
  402b80:	2b00      	cmp	r3, #0
  402b82:	f43f af78 	beq.w	402a76 <__sfvwrite_r+0x5e>
  402b86:	2e00      	cmp	r6, #0
  402b88:	d1d5      	bne.n	402b36 <__sfvwrite_r+0x11e>
  402b8a:	f108 0308 	add.w	r3, r8, #8
  402b8e:	e913 0060 	ldmdb	r3, {r5, r6}
  402b92:	4698      	mov	r8, r3
  402b94:	3308      	adds	r3, #8
  402b96:	2e00      	cmp	r6, #0
  402b98:	d0f9      	beq.n	402b8e <__sfvwrite_r+0x176>
  402b9a:	4632      	mov	r2, r6
  402b9c:	210a      	movs	r1, #10
  402b9e:	4628      	mov	r0, r5
  402ba0:	f000 fc36 	bl	403410 <memchr>
  402ba4:	2800      	cmp	r0, #0
  402ba6:	f000 80a1 	beq.w	402cec <__sfvwrite_r+0x2d4>
  402baa:	3001      	adds	r0, #1
  402bac:	eba0 0905 	sub.w	r9, r0, r5
  402bb0:	e7c2      	b.n	402b38 <__sfvwrite_r+0x120>
  402bb2:	6820      	ldr	r0, [r4, #0]
  402bb4:	6923      	ldr	r3, [r4, #16]
  402bb6:	4298      	cmp	r0, r3
  402bb8:	d802      	bhi.n	402bc0 <__sfvwrite_r+0x1a8>
  402bba:	6963      	ldr	r3, [r4, #20]
  402bbc:	429f      	cmp	r7, r3
  402bbe:	d25d      	bcs.n	402c7c <__sfvwrite_r+0x264>
  402bc0:	45b8      	cmp	r8, r7
  402bc2:	bf28      	it	cs
  402bc4:	46b8      	movcs	r8, r7
  402bc6:	4642      	mov	r2, r8
  402bc8:	4649      	mov	r1, r9
  402bca:	f000 fd0b 	bl	4035e4 <memmove>
  402bce:	68a3      	ldr	r3, [r4, #8]
  402bd0:	6822      	ldr	r2, [r4, #0]
  402bd2:	eba3 0308 	sub.w	r3, r3, r8
  402bd6:	4442      	add	r2, r8
  402bd8:	60a3      	str	r3, [r4, #8]
  402bda:	6022      	str	r2, [r4, #0]
  402bdc:	b10b      	cbz	r3, 402be2 <__sfvwrite_r+0x1ca>
  402bde:	46c2      	mov	sl, r8
  402be0:	e779      	b.n	402ad6 <__sfvwrite_r+0xbe>
  402be2:	4621      	mov	r1, r4
  402be4:	9800      	ldr	r0, [sp, #0]
  402be6:	f7ff fcb3 	bl	402550 <_fflush_r>
  402bea:	2800      	cmp	r0, #0
  402bec:	d192      	bne.n	402b14 <__sfvwrite_r+0xfc>
  402bee:	46c2      	mov	sl, r8
  402bf0:	e771      	b.n	402ad6 <__sfvwrite_r+0xbe>
  402bf2:	465a      	mov	r2, fp
  402bf4:	4629      	mov	r1, r5
  402bf6:	f000 fcf5 	bl	4035e4 <memmove>
  402bfa:	68a2      	ldr	r2, [r4, #8]
  402bfc:	6823      	ldr	r3, [r4, #0]
  402bfe:	eba2 020b 	sub.w	r2, r2, fp
  402c02:	445b      	add	r3, fp
  402c04:	60a2      	str	r2, [r4, #8]
  402c06:	6023      	str	r3, [r4, #0]
  402c08:	e7af      	b.n	402b6a <__sfvwrite_r+0x152>
  402c0a:	6820      	ldr	r0, [r4, #0]
  402c0c:	46b8      	mov	r8, r7
  402c0e:	46ba      	mov	sl, r7
  402c10:	46bb      	mov	fp, r7
  402c12:	e755      	b.n	402ac0 <__sfvwrite_r+0xa8>
  402c14:	6962      	ldr	r2, [r4, #20]
  402c16:	6820      	ldr	r0, [r4, #0]
  402c18:	6921      	ldr	r1, [r4, #16]
  402c1a:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  402c1e:	eba0 0a01 	sub.w	sl, r0, r1
  402c22:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  402c26:	f10a 0001 	add.w	r0, sl, #1
  402c2a:	ea4f 0868 	mov.w	r8, r8, asr #1
  402c2e:	4438      	add	r0, r7
  402c30:	4540      	cmp	r0, r8
  402c32:	4642      	mov	r2, r8
  402c34:	bf84      	itt	hi
  402c36:	4680      	movhi	r8, r0
  402c38:	4642      	movhi	r2, r8
  402c3a:	055b      	lsls	r3, r3, #21
  402c3c:	d544      	bpl.n	402cc8 <__sfvwrite_r+0x2b0>
  402c3e:	4611      	mov	r1, r2
  402c40:	9800      	ldr	r0, [sp, #0]
  402c42:	f000 f919 	bl	402e78 <_malloc_r>
  402c46:	4683      	mov	fp, r0
  402c48:	2800      	cmp	r0, #0
  402c4a:	d055      	beq.n	402cf8 <__sfvwrite_r+0x2e0>
  402c4c:	4652      	mov	r2, sl
  402c4e:	6921      	ldr	r1, [r4, #16]
  402c50:	f000 fc2e 	bl	4034b0 <memcpy>
  402c54:	89a3      	ldrh	r3, [r4, #12]
  402c56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  402c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402c5e:	81a3      	strh	r3, [r4, #12]
  402c60:	eb0b 000a 	add.w	r0, fp, sl
  402c64:	eba8 030a 	sub.w	r3, r8, sl
  402c68:	f8c4 b010 	str.w	fp, [r4, #16]
  402c6c:	f8c4 8014 	str.w	r8, [r4, #20]
  402c70:	6020      	str	r0, [r4, #0]
  402c72:	60a3      	str	r3, [r4, #8]
  402c74:	46b8      	mov	r8, r7
  402c76:	46ba      	mov	sl, r7
  402c78:	46bb      	mov	fp, r7
  402c7a:	e721      	b.n	402ac0 <__sfvwrite_r+0xa8>
  402c7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  402c80:	42b9      	cmp	r1, r7
  402c82:	bf28      	it	cs
  402c84:	4639      	movcs	r1, r7
  402c86:	464a      	mov	r2, r9
  402c88:	fb91 f1f3 	sdiv	r1, r1, r3
  402c8c:	9800      	ldr	r0, [sp, #0]
  402c8e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402c90:	fb03 f301 	mul.w	r3, r3, r1
  402c94:	69e1      	ldr	r1, [r4, #28]
  402c96:	47b0      	blx	r6
  402c98:	f1b0 0a00 	subs.w	sl, r0, #0
  402c9c:	f73f af1b 	bgt.w	402ad6 <__sfvwrite_r+0xbe>
  402ca0:	e738      	b.n	402b14 <__sfvwrite_r+0xfc>
  402ca2:	461a      	mov	r2, r3
  402ca4:	4629      	mov	r1, r5
  402ca6:	9301      	str	r3, [sp, #4]
  402ca8:	f000 fc9c 	bl	4035e4 <memmove>
  402cac:	6822      	ldr	r2, [r4, #0]
  402cae:	9b01      	ldr	r3, [sp, #4]
  402cb0:	9800      	ldr	r0, [sp, #0]
  402cb2:	441a      	add	r2, r3
  402cb4:	6022      	str	r2, [r4, #0]
  402cb6:	4621      	mov	r1, r4
  402cb8:	f7ff fc4a 	bl	402550 <_fflush_r>
  402cbc:	9b01      	ldr	r3, [sp, #4]
  402cbe:	2800      	cmp	r0, #0
  402cc0:	f47f af28 	bne.w	402b14 <__sfvwrite_r+0xfc>
  402cc4:	461f      	mov	r7, r3
  402cc6:	e750      	b.n	402b6a <__sfvwrite_r+0x152>
  402cc8:	9800      	ldr	r0, [sp, #0]
  402cca:	f000 fcfb 	bl	4036c4 <_realloc_r>
  402cce:	4683      	mov	fp, r0
  402cd0:	2800      	cmp	r0, #0
  402cd2:	d1c5      	bne.n	402c60 <__sfvwrite_r+0x248>
  402cd4:	9d00      	ldr	r5, [sp, #0]
  402cd6:	6921      	ldr	r1, [r4, #16]
  402cd8:	4628      	mov	r0, r5
  402cda:	f7ff fdb7 	bl	40284c <_free_r>
  402cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402ce2:	220c      	movs	r2, #12
  402ce4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402ce8:	602a      	str	r2, [r5, #0]
  402cea:	e715      	b.n	402b18 <__sfvwrite_r+0x100>
  402cec:	f106 0901 	add.w	r9, r6, #1
  402cf0:	e722      	b.n	402b38 <__sfvwrite_r+0x120>
  402cf2:	f04f 30ff 	mov.w	r0, #4294967295
  402cf6:	e6bf      	b.n	402a78 <__sfvwrite_r+0x60>
  402cf8:	9a00      	ldr	r2, [sp, #0]
  402cfa:	230c      	movs	r3, #12
  402cfc:	6013      	str	r3, [r2, #0]
  402cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402d02:	e709      	b.n	402b18 <__sfvwrite_r+0x100>
  402d04:	7ffffc00 	.word	0x7ffffc00

00402d08 <_fwalk_reent>:
  402d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402d0c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  402d10:	d01f      	beq.n	402d52 <_fwalk_reent+0x4a>
  402d12:	4688      	mov	r8, r1
  402d14:	4606      	mov	r6, r0
  402d16:	f04f 0900 	mov.w	r9, #0
  402d1a:	687d      	ldr	r5, [r7, #4]
  402d1c:	68bc      	ldr	r4, [r7, #8]
  402d1e:	3d01      	subs	r5, #1
  402d20:	d411      	bmi.n	402d46 <_fwalk_reent+0x3e>
  402d22:	89a3      	ldrh	r3, [r4, #12]
  402d24:	2b01      	cmp	r3, #1
  402d26:	f105 35ff 	add.w	r5, r5, #4294967295
  402d2a:	d908      	bls.n	402d3e <_fwalk_reent+0x36>
  402d2c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  402d30:	3301      	adds	r3, #1
  402d32:	4621      	mov	r1, r4
  402d34:	4630      	mov	r0, r6
  402d36:	d002      	beq.n	402d3e <_fwalk_reent+0x36>
  402d38:	47c0      	blx	r8
  402d3a:	ea49 0900 	orr.w	r9, r9, r0
  402d3e:	1c6b      	adds	r3, r5, #1
  402d40:	f104 0468 	add.w	r4, r4, #104	; 0x68
  402d44:	d1ed      	bne.n	402d22 <_fwalk_reent+0x1a>
  402d46:	683f      	ldr	r7, [r7, #0]
  402d48:	2f00      	cmp	r7, #0
  402d4a:	d1e6      	bne.n	402d1a <_fwalk_reent+0x12>
  402d4c:	4648      	mov	r0, r9
  402d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402d52:	46b9      	mov	r9, r7
  402d54:	4648      	mov	r0, r9
  402d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402d5a:	bf00      	nop

00402d5c <__locale_mb_cur_max>:
  402d5c:	4b04      	ldr	r3, [pc, #16]	; (402d70 <__locale_mb_cur_max+0x14>)
  402d5e:	4a05      	ldr	r2, [pc, #20]	; (402d74 <__locale_mb_cur_max+0x18>)
  402d60:	681b      	ldr	r3, [r3, #0]
  402d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  402d64:	2b00      	cmp	r3, #0
  402d66:	bf08      	it	eq
  402d68:	4613      	moveq	r3, r2
  402d6a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  402d6e:	4770      	bx	lr
  402d70:	20400024 	.word	0x20400024
  402d74:	20400454 	.word	0x20400454

00402d78 <__retarget_lock_init_recursive>:
  402d78:	4770      	bx	lr
  402d7a:	bf00      	nop

00402d7c <__retarget_lock_close_recursive>:
  402d7c:	4770      	bx	lr
  402d7e:	bf00      	nop

00402d80 <__retarget_lock_acquire_recursive>:
  402d80:	4770      	bx	lr
  402d82:	bf00      	nop

00402d84 <__retarget_lock_release_recursive>:
  402d84:	4770      	bx	lr
  402d86:	bf00      	nop

00402d88 <__swhatbuf_r>:
  402d88:	b570      	push	{r4, r5, r6, lr}
  402d8a:	460c      	mov	r4, r1
  402d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402d90:	2900      	cmp	r1, #0
  402d92:	b090      	sub	sp, #64	; 0x40
  402d94:	4615      	mov	r5, r2
  402d96:	461e      	mov	r6, r3
  402d98:	db14      	blt.n	402dc4 <__swhatbuf_r+0x3c>
  402d9a:	aa01      	add	r2, sp, #4
  402d9c:	f001 f87a 	bl	403e94 <_fstat_r>
  402da0:	2800      	cmp	r0, #0
  402da2:	db0f      	blt.n	402dc4 <__swhatbuf_r+0x3c>
  402da4:	9a02      	ldr	r2, [sp, #8]
  402da6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  402daa:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  402dae:	fab2 f282 	clz	r2, r2
  402db2:	0952      	lsrs	r2, r2, #5
  402db4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402db8:	f44f 6000 	mov.w	r0, #2048	; 0x800
  402dbc:	6032      	str	r2, [r6, #0]
  402dbe:	602b      	str	r3, [r5, #0]
  402dc0:	b010      	add	sp, #64	; 0x40
  402dc2:	bd70      	pop	{r4, r5, r6, pc}
  402dc4:	89a2      	ldrh	r2, [r4, #12]
  402dc6:	2300      	movs	r3, #0
  402dc8:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  402dcc:	6033      	str	r3, [r6, #0]
  402dce:	d004      	beq.n	402dda <__swhatbuf_r+0x52>
  402dd0:	2240      	movs	r2, #64	; 0x40
  402dd2:	4618      	mov	r0, r3
  402dd4:	602a      	str	r2, [r5, #0]
  402dd6:	b010      	add	sp, #64	; 0x40
  402dd8:	bd70      	pop	{r4, r5, r6, pc}
  402dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402dde:	602b      	str	r3, [r5, #0]
  402de0:	b010      	add	sp, #64	; 0x40
  402de2:	bd70      	pop	{r4, r5, r6, pc}

00402de4 <__smakebuf_r>:
  402de4:	898a      	ldrh	r2, [r1, #12]
  402de6:	0792      	lsls	r2, r2, #30
  402de8:	460b      	mov	r3, r1
  402dea:	d506      	bpl.n	402dfa <__smakebuf_r+0x16>
  402dec:	f101 0243 	add.w	r2, r1, #67	; 0x43
  402df0:	2101      	movs	r1, #1
  402df2:	601a      	str	r2, [r3, #0]
  402df4:	611a      	str	r2, [r3, #16]
  402df6:	6159      	str	r1, [r3, #20]
  402df8:	4770      	bx	lr
  402dfa:	b5f0      	push	{r4, r5, r6, r7, lr}
  402dfc:	b083      	sub	sp, #12
  402dfe:	ab01      	add	r3, sp, #4
  402e00:	466a      	mov	r2, sp
  402e02:	460c      	mov	r4, r1
  402e04:	4606      	mov	r6, r0
  402e06:	f7ff ffbf 	bl	402d88 <__swhatbuf_r>
  402e0a:	9900      	ldr	r1, [sp, #0]
  402e0c:	4605      	mov	r5, r0
  402e0e:	4630      	mov	r0, r6
  402e10:	f000 f832 	bl	402e78 <_malloc_r>
  402e14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402e18:	b1d8      	cbz	r0, 402e52 <__smakebuf_r+0x6e>
  402e1a:	9a01      	ldr	r2, [sp, #4]
  402e1c:	4f15      	ldr	r7, [pc, #84]	; (402e74 <__smakebuf_r+0x90>)
  402e1e:	9900      	ldr	r1, [sp, #0]
  402e20:	63f7      	str	r7, [r6, #60]	; 0x3c
  402e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402e26:	81a3      	strh	r3, [r4, #12]
  402e28:	6020      	str	r0, [r4, #0]
  402e2a:	6120      	str	r0, [r4, #16]
  402e2c:	6161      	str	r1, [r4, #20]
  402e2e:	b91a      	cbnz	r2, 402e38 <__smakebuf_r+0x54>
  402e30:	432b      	orrs	r3, r5
  402e32:	81a3      	strh	r3, [r4, #12]
  402e34:	b003      	add	sp, #12
  402e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402e38:	4630      	mov	r0, r6
  402e3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402e3e:	f001 f83d 	bl	403ebc <_isatty_r>
  402e42:	b1a0      	cbz	r0, 402e6e <__smakebuf_r+0x8a>
  402e44:	89a3      	ldrh	r3, [r4, #12]
  402e46:	f023 0303 	bic.w	r3, r3, #3
  402e4a:	f043 0301 	orr.w	r3, r3, #1
  402e4e:	b21b      	sxth	r3, r3
  402e50:	e7ee      	b.n	402e30 <__smakebuf_r+0x4c>
  402e52:	059a      	lsls	r2, r3, #22
  402e54:	d4ee      	bmi.n	402e34 <__smakebuf_r+0x50>
  402e56:	f023 0303 	bic.w	r3, r3, #3
  402e5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402e5e:	f043 0302 	orr.w	r3, r3, #2
  402e62:	2101      	movs	r1, #1
  402e64:	81a3      	strh	r3, [r4, #12]
  402e66:	6022      	str	r2, [r4, #0]
  402e68:	6122      	str	r2, [r4, #16]
  402e6a:	6161      	str	r1, [r4, #20]
  402e6c:	e7e2      	b.n	402e34 <__smakebuf_r+0x50>
  402e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402e72:	e7dd      	b.n	402e30 <__smakebuf_r+0x4c>
  402e74:	004025a5 	.word	0x004025a5

00402e78 <_malloc_r>:
  402e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402e7c:	f101 060b 	add.w	r6, r1, #11
  402e80:	2e16      	cmp	r6, #22
  402e82:	b083      	sub	sp, #12
  402e84:	4605      	mov	r5, r0
  402e86:	f240 809e 	bls.w	402fc6 <_malloc_r+0x14e>
  402e8a:	f036 0607 	bics.w	r6, r6, #7
  402e8e:	f100 80bd 	bmi.w	40300c <_malloc_r+0x194>
  402e92:	42b1      	cmp	r1, r6
  402e94:	f200 80ba 	bhi.w	40300c <_malloc_r+0x194>
  402e98:	f000 fc08 	bl	4036ac <__malloc_lock>
  402e9c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  402ea0:	f0c0 8293 	bcc.w	4033ca <_malloc_r+0x552>
  402ea4:	0a73      	lsrs	r3, r6, #9
  402ea6:	f000 80b8 	beq.w	40301a <_malloc_r+0x1a2>
  402eaa:	2b04      	cmp	r3, #4
  402eac:	f200 8179 	bhi.w	4031a2 <_malloc_r+0x32a>
  402eb0:	09b3      	lsrs	r3, r6, #6
  402eb2:	f103 0039 	add.w	r0, r3, #57	; 0x39
  402eb6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  402eba:	00c3      	lsls	r3, r0, #3
  402ebc:	4fbf      	ldr	r7, [pc, #764]	; (4031bc <_malloc_r+0x344>)
  402ebe:	443b      	add	r3, r7
  402ec0:	f1a3 0108 	sub.w	r1, r3, #8
  402ec4:	685c      	ldr	r4, [r3, #4]
  402ec6:	42a1      	cmp	r1, r4
  402ec8:	d106      	bne.n	402ed8 <_malloc_r+0x60>
  402eca:	e00c      	b.n	402ee6 <_malloc_r+0x6e>
  402ecc:	2a00      	cmp	r2, #0
  402ece:	f280 80aa 	bge.w	403026 <_malloc_r+0x1ae>
  402ed2:	68e4      	ldr	r4, [r4, #12]
  402ed4:	42a1      	cmp	r1, r4
  402ed6:	d006      	beq.n	402ee6 <_malloc_r+0x6e>
  402ed8:	6863      	ldr	r3, [r4, #4]
  402eda:	f023 0303 	bic.w	r3, r3, #3
  402ede:	1b9a      	subs	r2, r3, r6
  402ee0:	2a0f      	cmp	r2, #15
  402ee2:	ddf3      	ble.n	402ecc <_malloc_r+0x54>
  402ee4:	4670      	mov	r0, lr
  402ee6:	693c      	ldr	r4, [r7, #16]
  402ee8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4031d0 <_malloc_r+0x358>
  402eec:	4574      	cmp	r4, lr
  402eee:	f000 81ab 	beq.w	403248 <_malloc_r+0x3d0>
  402ef2:	6863      	ldr	r3, [r4, #4]
  402ef4:	f023 0303 	bic.w	r3, r3, #3
  402ef8:	1b9a      	subs	r2, r3, r6
  402efa:	2a0f      	cmp	r2, #15
  402efc:	f300 8190 	bgt.w	403220 <_malloc_r+0x3a8>
  402f00:	2a00      	cmp	r2, #0
  402f02:	f8c7 e014 	str.w	lr, [r7, #20]
  402f06:	f8c7 e010 	str.w	lr, [r7, #16]
  402f0a:	f280 809d 	bge.w	403048 <_malloc_r+0x1d0>
  402f0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402f12:	f080 8161 	bcs.w	4031d8 <_malloc_r+0x360>
  402f16:	08db      	lsrs	r3, r3, #3
  402f18:	f103 0c01 	add.w	ip, r3, #1
  402f1c:	1099      	asrs	r1, r3, #2
  402f1e:	687a      	ldr	r2, [r7, #4]
  402f20:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  402f24:	f8c4 8008 	str.w	r8, [r4, #8]
  402f28:	2301      	movs	r3, #1
  402f2a:	408b      	lsls	r3, r1
  402f2c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  402f30:	4313      	orrs	r3, r2
  402f32:	3908      	subs	r1, #8
  402f34:	60e1      	str	r1, [r4, #12]
  402f36:	607b      	str	r3, [r7, #4]
  402f38:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  402f3c:	f8c8 400c 	str.w	r4, [r8, #12]
  402f40:	1082      	asrs	r2, r0, #2
  402f42:	2401      	movs	r4, #1
  402f44:	4094      	lsls	r4, r2
  402f46:	429c      	cmp	r4, r3
  402f48:	f200 808b 	bhi.w	403062 <_malloc_r+0x1ea>
  402f4c:	421c      	tst	r4, r3
  402f4e:	d106      	bne.n	402f5e <_malloc_r+0xe6>
  402f50:	f020 0003 	bic.w	r0, r0, #3
  402f54:	0064      	lsls	r4, r4, #1
  402f56:	421c      	tst	r4, r3
  402f58:	f100 0004 	add.w	r0, r0, #4
  402f5c:	d0fa      	beq.n	402f54 <_malloc_r+0xdc>
  402f5e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  402f62:	46cc      	mov	ip, r9
  402f64:	4680      	mov	r8, r0
  402f66:	f8dc 300c 	ldr.w	r3, [ip, #12]
  402f6a:	459c      	cmp	ip, r3
  402f6c:	d107      	bne.n	402f7e <_malloc_r+0x106>
  402f6e:	e16d      	b.n	40324c <_malloc_r+0x3d4>
  402f70:	2a00      	cmp	r2, #0
  402f72:	f280 817b 	bge.w	40326c <_malloc_r+0x3f4>
  402f76:	68db      	ldr	r3, [r3, #12]
  402f78:	459c      	cmp	ip, r3
  402f7a:	f000 8167 	beq.w	40324c <_malloc_r+0x3d4>
  402f7e:	6859      	ldr	r1, [r3, #4]
  402f80:	f021 0103 	bic.w	r1, r1, #3
  402f84:	1b8a      	subs	r2, r1, r6
  402f86:	2a0f      	cmp	r2, #15
  402f88:	ddf2      	ble.n	402f70 <_malloc_r+0xf8>
  402f8a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  402f8e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  402f92:	9300      	str	r3, [sp, #0]
  402f94:	199c      	adds	r4, r3, r6
  402f96:	4628      	mov	r0, r5
  402f98:	f046 0601 	orr.w	r6, r6, #1
  402f9c:	f042 0501 	orr.w	r5, r2, #1
  402fa0:	605e      	str	r6, [r3, #4]
  402fa2:	f8c8 c00c 	str.w	ip, [r8, #12]
  402fa6:	f8cc 8008 	str.w	r8, [ip, #8]
  402faa:	617c      	str	r4, [r7, #20]
  402fac:	613c      	str	r4, [r7, #16]
  402fae:	f8c4 e00c 	str.w	lr, [r4, #12]
  402fb2:	f8c4 e008 	str.w	lr, [r4, #8]
  402fb6:	6065      	str	r5, [r4, #4]
  402fb8:	505a      	str	r2, [r3, r1]
  402fba:	f000 fb7d 	bl	4036b8 <__malloc_unlock>
  402fbe:	9b00      	ldr	r3, [sp, #0]
  402fc0:	f103 0408 	add.w	r4, r3, #8
  402fc4:	e01e      	b.n	403004 <_malloc_r+0x18c>
  402fc6:	2910      	cmp	r1, #16
  402fc8:	d820      	bhi.n	40300c <_malloc_r+0x194>
  402fca:	f000 fb6f 	bl	4036ac <__malloc_lock>
  402fce:	2610      	movs	r6, #16
  402fd0:	2318      	movs	r3, #24
  402fd2:	2002      	movs	r0, #2
  402fd4:	4f79      	ldr	r7, [pc, #484]	; (4031bc <_malloc_r+0x344>)
  402fd6:	443b      	add	r3, r7
  402fd8:	f1a3 0208 	sub.w	r2, r3, #8
  402fdc:	685c      	ldr	r4, [r3, #4]
  402fde:	4294      	cmp	r4, r2
  402fe0:	f000 813d 	beq.w	40325e <_malloc_r+0x3e6>
  402fe4:	6863      	ldr	r3, [r4, #4]
  402fe6:	68e1      	ldr	r1, [r4, #12]
  402fe8:	68a6      	ldr	r6, [r4, #8]
  402fea:	f023 0303 	bic.w	r3, r3, #3
  402fee:	4423      	add	r3, r4
  402ff0:	4628      	mov	r0, r5
  402ff2:	685a      	ldr	r2, [r3, #4]
  402ff4:	60f1      	str	r1, [r6, #12]
  402ff6:	f042 0201 	orr.w	r2, r2, #1
  402ffa:	608e      	str	r6, [r1, #8]
  402ffc:	605a      	str	r2, [r3, #4]
  402ffe:	f000 fb5b 	bl	4036b8 <__malloc_unlock>
  403002:	3408      	adds	r4, #8
  403004:	4620      	mov	r0, r4
  403006:	b003      	add	sp, #12
  403008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40300c:	2400      	movs	r4, #0
  40300e:	230c      	movs	r3, #12
  403010:	4620      	mov	r0, r4
  403012:	602b      	str	r3, [r5, #0]
  403014:	b003      	add	sp, #12
  403016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40301a:	2040      	movs	r0, #64	; 0x40
  40301c:	f44f 7300 	mov.w	r3, #512	; 0x200
  403020:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403024:	e74a      	b.n	402ebc <_malloc_r+0x44>
  403026:	4423      	add	r3, r4
  403028:	68e1      	ldr	r1, [r4, #12]
  40302a:	685a      	ldr	r2, [r3, #4]
  40302c:	68a6      	ldr	r6, [r4, #8]
  40302e:	f042 0201 	orr.w	r2, r2, #1
  403032:	60f1      	str	r1, [r6, #12]
  403034:	4628      	mov	r0, r5
  403036:	608e      	str	r6, [r1, #8]
  403038:	605a      	str	r2, [r3, #4]
  40303a:	f000 fb3d 	bl	4036b8 <__malloc_unlock>
  40303e:	3408      	adds	r4, #8
  403040:	4620      	mov	r0, r4
  403042:	b003      	add	sp, #12
  403044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403048:	4423      	add	r3, r4
  40304a:	4628      	mov	r0, r5
  40304c:	685a      	ldr	r2, [r3, #4]
  40304e:	f042 0201 	orr.w	r2, r2, #1
  403052:	605a      	str	r2, [r3, #4]
  403054:	f000 fb30 	bl	4036b8 <__malloc_unlock>
  403058:	3408      	adds	r4, #8
  40305a:	4620      	mov	r0, r4
  40305c:	b003      	add	sp, #12
  40305e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403062:	68bc      	ldr	r4, [r7, #8]
  403064:	6863      	ldr	r3, [r4, #4]
  403066:	f023 0803 	bic.w	r8, r3, #3
  40306a:	45b0      	cmp	r8, r6
  40306c:	d304      	bcc.n	403078 <_malloc_r+0x200>
  40306e:	eba8 0306 	sub.w	r3, r8, r6
  403072:	2b0f      	cmp	r3, #15
  403074:	f300 8085 	bgt.w	403182 <_malloc_r+0x30a>
  403078:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4031d4 <_malloc_r+0x35c>
  40307c:	4b50      	ldr	r3, [pc, #320]	; (4031c0 <_malloc_r+0x348>)
  40307e:	f8d9 2000 	ldr.w	r2, [r9]
  403082:	681b      	ldr	r3, [r3, #0]
  403084:	3201      	adds	r2, #1
  403086:	4433      	add	r3, r6
  403088:	eb04 0a08 	add.w	sl, r4, r8
  40308c:	f000 8155 	beq.w	40333a <_malloc_r+0x4c2>
  403090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403094:	330f      	adds	r3, #15
  403096:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40309a:	f02b 0b0f 	bic.w	fp, fp, #15
  40309e:	4659      	mov	r1, fp
  4030a0:	4628      	mov	r0, r5
  4030a2:	f000 fcb5 	bl	403a10 <_sbrk_r>
  4030a6:	1c41      	adds	r1, r0, #1
  4030a8:	4602      	mov	r2, r0
  4030aa:	f000 80fc 	beq.w	4032a6 <_malloc_r+0x42e>
  4030ae:	4582      	cmp	sl, r0
  4030b0:	f200 80f7 	bhi.w	4032a2 <_malloc_r+0x42a>
  4030b4:	4b43      	ldr	r3, [pc, #268]	; (4031c4 <_malloc_r+0x34c>)
  4030b6:	6819      	ldr	r1, [r3, #0]
  4030b8:	4459      	add	r1, fp
  4030ba:	6019      	str	r1, [r3, #0]
  4030bc:	f000 814d 	beq.w	40335a <_malloc_r+0x4e2>
  4030c0:	f8d9 0000 	ldr.w	r0, [r9]
  4030c4:	3001      	adds	r0, #1
  4030c6:	bf1b      	ittet	ne
  4030c8:	eba2 0a0a 	subne.w	sl, r2, sl
  4030cc:	4451      	addne	r1, sl
  4030ce:	f8c9 2000 	streq.w	r2, [r9]
  4030d2:	6019      	strne	r1, [r3, #0]
  4030d4:	f012 0107 	ands.w	r1, r2, #7
  4030d8:	f000 8115 	beq.w	403306 <_malloc_r+0x48e>
  4030dc:	f1c1 0008 	rsb	r0, r1, #8
  4030e0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4030e4:	4402      	add	r2, r0
  4030e6:	3108      	adds	r1, #8
  4030e8:	eb02 090b 	add.w	r9, r2, fp
  4030ec:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4030f0:	eba1 0909 	sub.w	r9, r1, r9
  4030f4:	4649      	mov	r1, r9
  4030f6:	4628      	mov	r0, r5
  4030f8:	9301      	str	r3, [sp, #4]
  4030fa:	9200      	str	r2, [sp, #0]
  4030fc:	f000 fc88 	bl	403a10 <_sbrk_r>
  403100:	1c43      	adds	r3, r0, #1
  403102:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403106:	f000 8143 	beq.w	403390 <_malloc_r+0x518>
  40310a:	1a80      	subs	r0, r0, r2
  40310c:	4448      	add	r0, r9
  40310e:	f040 0001 	orr.w	r0, r0, #1
  403112:	6819      	ldr	r1, [r3, #0]
  403114:	60ba      	str	r2, [r7, #8]
  403116:	4449      	add	r1, r9
  403118:	42bc      	cmp	r4, r7
  40311a:	6050      	str	r0, [r2, #4]
  40311c:	6019      	str	r1, [r3, #0]
  40311e:	d017      	beq.n	403150 <_malloc_r+0x2d8>
  403120:	f1b8 0f0f 	cmp.w	r8, #15
  403124:	f240 80fb 	bls.w	40331e <_malloc_r+0x4a6>
  403128:	6860      	ldr	r0, [r4, #4]
  40312a:	f1a8 020c 	sub.w	r2, r8, #12
  40312e:	f022 0207 	bic.w	r2, r2, #7
  403132:	eb04 0e02 	add.w	lr, r4, r2
  403136:	f000 0001 	and.w	r0, r0, #1
  40313a:	f04f 0c05 	mov.w	ip, #5
  40313e:	4310      	orrs	r0, r2
  403140:	2a0f      	cmp	r2, #15
  403142:	6060      	str	r0, [r4, #4]
  403144:	f8ce c004 	str.w	ip, [lr, #4]
  403148:	f8ce c008 	str.w	ip, [lr, #8]
  40314c:	f200 8117 	bhi.w	40337e <_malloc_r+0x506>
  403150:	4b1d      	ldr	r3, [pc, #116]	; (4031c8 <_malloc_r+0x350>)
  403152:	68bc      	ldr	r4, [r7, #8]
  403154:	681a      	ldr	r2, [r3, #0]
  403156:	4291      	cmp	r1, r2
  403158:	bf88      	it	hi
  40315a:	6019      	strhi	r1, [r3, #0]
  40315c:	4b1b      	ldr	r3, [pc, #108]	; (4031cc <_malloc_r+0x354>)
  40315e:	681a      	ldr	r2, [r3, #0]
  403160:	4291      	cmp	r1, r2
  403162:	6862      	ldr	r2, [r4, #4]
  403164:	bf88      	it	hi
  403166:	6019      	strhi	r1, [r3, #0]
  403168:	f022 0203 	bic.w	r2, r2, #3
  40316c:	4296      	cmp	r6, r2
  40316e:	eba2 0306 	sub.w	r3, r2, r6
  403172:	d801      	bhi.n	403178 <_malloc_r+0x300>
  403174:	2b0f      	cmp	r3, #15
  403176:	dc04      	bgt.n	403182 <_malloc_r+0x30a>
  403178:	4628      	mov	r0, r5
  40317a:	f000 fa9d 	bl	4036b8 <__malloc_unlock>
  40317e:	2400      	movs	r4, #0
  403180:	e740      	b.n	403004 <_malloc_r+0x18c>
  403182:	19a2      	adds	r2, r4, r6
  403184:	f043 0301 	orr.w	r3, r3, #1
  403188:	f046 0601 	orr.w	r6, r6, #1
  40318c:	6066      	str	r6, [r4, #4]
  40318e:	4628      	mov	r0, r5
  403190:	60ba      	str	r2, [r7, #8]
  403192:	6053      	str	r3, [r2, #4]
  403194:	f000 fa90 	bl	4036b8 <__malloc_unlock>
  403198:	3408      	adds	r4, #8
  40319a:	4620      	mov	r0, r4
  40319c:	b003      	add	sp, #12
  40319e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4031a2:	2b14      	cmp	r3, #20
  4031a4:	d971      	bls.n	40328a <_malloc_r+0x412>
  4031a6:	2b54      	cmp	r3, #84	; 0x54
  4031a8:	f200 80a3 	bhi.w	4032f2 <_malloc_r+0x47a>
  4031ac:	0b33      	lsrs	r3, r6, #12
  4031ae:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4031b2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4031b6:	00c3      	lsls	r3, r0, #3
  4031b8:	e680      	b.n	402ebc <_malloc_r+0x44>
  4031ba:	bf00      	nop
  4031bc:	204005c0 	.word	0x204005c0
  4031c0:	20401ad4 	.word	0x20401ad4
  4031c4:	20401aa4 	.word	0x20401aa4
  4031c8:	20401acc 	.word	0x20401acc
  4031cc:	20401ad0 	.word	0x20401ad0
  4031d0:	204005c8 	.word	0x204005c8
  4031d4:	204009c8 	.word	0x204009c8
  4031d8:	0a5a      	lsrs	r2, r3, #9
  4031da:	2a04      	cmp	r2, #4
  4031dc:	d95b      	bls.n	403296 <_malloc_r+0x41e>
  4031de:	2a14      	cmp	r2, #20
  4031e0:	f200 80ae 	bhi.w	403340 <_malloc_r+0x4c8>
  4031e4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4031e8:	00c9      	lsls	r1, r1, #3
  4031ea:	325b      	adds	r2, #91	; 0x5b
  4031ec:	eb07 0c01 	add.w	ip, r7, r1
  4031f0:	5879      	ldr	r1, [r7, r1]
  4031f2:	f1ac 0c08 	sub.w	ip, ip, #8
  4031f6:	458c      	cmp	ip, r1
  4031f8:	f000 8088 	beq.w	40330c <_malloc_r+0x494>
  4031fc:	684a      	ldr	r2, [r1, #4]
  4031fe:	f022 0203 	bic.w	r2, r2, #3
  403202:	4293      	cmp	r3, r2
  403204:	d273      	bcs.n	4032ee <_malloc_r+0x476>
  403206:	6889      	ldr	r1, [r1, #8]
  403208:	458c      	cmp	ip, r1
  40320a:	d1f7      	bne.n	4031fc <_malloc_r+0x384>
  40320c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403210:	687b      	ldr	r3, [r7, #4]
  403212:	60e2      	str	r2, [r4, #12]
  403214:	f8c4 c008 	str.w	ip, [r4, #8]
  403218:	6094      	str	r4, [r2, #8]
  40321a:	f8cc 400c 	str.w	r4, [ip, #12]
  40321e:	e68f      	b.n	402f40 <_malloc_r+0xc8>
  403220:	19a1      	adds	r1, r4, r6
  403222:	f046 0c01 	orr.w	ip, r6, #1
  403226:	f042 0601 	orr.w	r6, r2, #1
  40322a:	f8c4 c004 	str.w	ip, [r4, #4]
  40322e:	4628      	mov	r0, r5
  403230:	6179      	str	r1, [r7, #20]
  403232:	6139      	str	r1, [r7, #16]
  403234:	f8c1 e00c 	str.w	lr, [r1, #12]
  403238:	f8c1 e008 	str.w	lr, [r1, #8]
  40323c:	604e      	str	r6, [r1, #4]
  40323e:	50e2      	str	r2, [r4, r3]
  403240:	f000 fa3a 	bl	4036b8 <__malloc_unlock>
  403244:	3408      	adds	r4, #8
  403246:	e6dd      	b.n	403004 <_malloc_r+0x18c>
  403248:	687b      	ldr	r3, [r7, #4]
  40324a:	e679      	b.n	402f40 <_malloc_r+0xc8>
  40324c:	f108 0801 	add.w	r8, r8, #1
  403250:	f018 0f03 	tst.w	r8, #3
  403254:	f10c 0c08 	add.w	ip, ip, #8
  403258:	f47f ae85 	bne.w	402f66 <_malloc_r+0xee>
  40325c:	e02d      	b.n	4032ba <_malloc_r+0x442>
  40325e:	68dc      	ldr	r4, [r3, #12]
  403260:	42a3      	cmp	r3, r4
  403262:	bf08      	it	eq
  403264:	3002      	addeq	r0, #2
  403266:	f43f ae3e 	beq.w	402ee6 <_malloc_r+0x6e>
  40326a:	e6bb      	b.n	402fe4 <_malloc_r+0x16c>
  40326c:	4419      	add	r1, r3
  40326e:	461c      	mov	r4, r3
  403270:	684a      	ldr	r2, [r1, #4]
  403272:	68db      	ldr	r3, [r3, #12]
  403274:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403278:	f042 0201 	orr.w	r2, r2, #1
  40327c:	604a      	str	r2, [r1, #4]
  40327e:	4628      	mov	r0, r5
  403280:	60f3      	str	r3, [r6, #12]
  403282:	609e      	str	r6, [r3, #8]
  403284:	f000 fa18 	bl	4036b8 <__malloc_unlock>
  403288:	e6bc      	b.n	403004 <_malloc_r+0x18c>
  40328a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40328e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403292:	00c3      	lsls	r3, r0, #3
  403294:	e612      	b.n	402ebc <_malloc_r+0x44>
  403296:	099a      	lsrs	r2, r3, #6
  403298:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40329c:	00c9      	lsls	r1, r1, #3
  40329e:	3238      	adds	r2, #56	; 0x38
  4032a0:	e7a4      	b.n	4031ec <_malloc_r+0x374>
  4032a2:	42bc      	cmp	r4, r7
  4032a4:	d054      	beq.n	403350 <_malloc_r+0x4d8>
  4032a6:	68bc      	ldr	r4, [r7, #8]
  4032a8:	6862      	ldr	r2, [r4, #4]
  4032aa:	f022 0203 	bic.w	r2, r2, #3
  4032ae:	e75d      	b.n	40316c <_malloc_r+0x2f4>
  4032b0:	f859 3908 	ldr.w	r3, [r9], #-8
  4032b4:	4599      	cmp	r9, r3
  4032b6:	f040 8086 	bne.w	4033c6 <_malloc_r+0x54e>
  4032ba:	f010 0f03 	tst.w	r0, #3
  4032be:	f100 30ff 	add.w	r0, r0, #4294967295
  4032c2:	d1f5      	bne.n	4032b0 <_malloc_r+0x438>
  4032c4:	687b      	ldr	r3, [r7, #4]
  4032c6:	ea23 0304 	bic.w	r3, r3, r4
  4032ca:	607b      	str	r3, [r7, #4]
  4032cc:	0064      	lsls	r4, r4, #1
  4032ce:	429c      	cmp	r4, r3
  4032d0:	f63f aec7 	bhi.w	403062 <_malloc_r+0x1ea>
  4032d4:	2c00      	cmp	r4, #0
  4032d6:	f43f aec4 	beq.w	403062 <_malloc_r+0x1ea>
  4032da:	421c      	tst	r4, r3
  4032dc:	4640      	mov	r0, r8
  4032de:	f47f ae3e 	bne.w	402f5e <_malloc_r+0xe6>
  4032e2:	0064      	lsls	r4, r4, #1
  4032e4:	421c      	tst	r4, r3
  4032e6:	f100 0004 	add.w	r0, r0, #4
  4032ea:	d0fa      	beq.n	4032e2 <_malloc_r+0x46a>
  4032ec:	e637      	b.n	402f5e <_malloc_r+0xe6>
  4032ee:	468c      	mov	ip, r1
  4032f0:	e78c      	b.n	40320c <_malloc_r+0x394>
  4032f2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4032f6:	d815      	bhi.n	403324 <_malloc_r+0x4ac>
  4032f8:	0bf3      	lsrs	r3, r6, #15
  4032fa:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4032fe:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403302:	00c3      	lsls	r3, r0, #3
  403304:	e5da      	b.n	402ebc <_malloc_r+0x44>
  403306:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40330a:	e6ed      	b.n	4030e8 <_malloc_r+0x270>
  40330c:	687b      	ldr	r3, [r7, #4]
  40330e:	1092      	asrs	r2, r2, #2
  403310:	2101      	movs	r1, #1
  403312:	fa01 f202 	lsl.w	r2, r1, r2
  403316:	4313      	orrs	r3, r2
  403318:	607b      	str	r3, [r7, #4]
  40331a:	4662      	mov	r2, ip
  40331c:	e779      	b.n	403212 <_malloc_r+0x39a>
  40331e:	2301      	movs	r3, #1
  403320:	6053      	str	r3, [r2, #4]
  403322:	e729      	b.n	403178 <_malloc_r+0x300>
  403324:	f240 5254 	movw	r2, #1364	; 0x554
  403328:	4293      	cmp	r3, r2
  40332a:	d822      	bhi.n	403372 <_malloc_r+0x4fa>
  40332c:	0cb3      	lsrs	r3, r6, #18
  40332e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403332:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403336:	00c3      	lsls	r3, r0, #3
  403338:	e5c0      	b.n	402ebc <_malloc_r+0x44>
  40333a:	f103 0b10 	add.w	fp, r3, #16
  40333e:	e6ae      	b.n	40309e <_malloc_r+0x226>
  403340:	2a54      	cmp	r2, #84	; 0x54
  403342:	d829      	bhi.n	403398 <_malloc_r+0x520>
  403344:	0b1a      	lsrs	r2, r3, #12
  403346:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40334a:	00c9      	lsls	r1, r1, #3
  40334c:	326e      	adds	r2, #110	; 0x6e
  40334e:	e74d      	b.n	4031ec <_malloc_r+0x374>
  403350:	4b20      	ldr	r3, [pc, #128]	; (4033d4 <_malloc_r+0x55c>)
  403352:	6819      	ldr	r1, [r3, #0]
  403354:	4459      	add	r1, fp
  403356:	6019      	str	r1, [r3, #0]
  403358:	e6b2      	b.n	4030c0 <_malloc_r+0x248>
  40335a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40335e:	2800      	cmp	r0, #0
  403360:	f47f aeae 	bne.w	4030c0 <_malloc_r+0x248>
  403364:	eb08 030b 	add.w	r3, r8, fp
  403368:	68ba      	ldr	r2, [r7, #8]
  40336a:	f043 0301 	orr.w	r3, r3, #1
  40336e:	6053      	str	r3, [r2, #4]
  403370:	e6ee      	b.n	403150 <_malloc_r+0x2d8>
  403372:	207f      	movs	r0, #127	; 0x7f
  403374:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403378:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40337c:	e59e      	b.n	402ebc <_malloc_r+0x44>
  40337e:	f104 0108 	add.w	r1, r4, #8
  403382:	4628      	mov	r0, r5
  403384:	9300      	str	r3, [sp, #0]
  403386:	f7ff fa61 	bl	40284c <_free_r>
  40338a:	9b00      	ldr	r3, [sp, #0]
  40338c:	6819      	ldr	r1, [r3, #0]
  40338e:	e6df      	b.n	403150 <_malloc_r+0x2d8>
  403390:	2001      	movs	r0, #1
  403392:	f04f 0900 	mov.w	r9, #0
  403396:	e6bc      	b.n	403112 <_malloc_r+0x29a>
  403398:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40339c:	d805      	bhi.n	4033aa <_malloc_r+0x532>
  40339e:	0bda      	lsrs	r2, r3, #15
  4033a0:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4033a4:	00c9      	lsls	r1, r1, #3
  4033a6:	3277      	adds	r2, #119	; 0x77
  4033a8:	e720      	b.n	4031ec <_malloc_r+0x374>
  4033aa:	f240 5154 	movw	r1, #1364	; 0x554
  4033ae:	428a      	cmp	r2, r1
  4033b0:	d805      	bhi.n	4033be <_malloc_r+0x546>
  4033b2:	0c9a      	lsrs	r2, r3, #18
  4033b4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4033b8:	00c9      	lsls	r1, r1, #3
  4033ba:	327c      	adds	r2, #124	; 0x7c
  4033bc:	e716      	b.n	4031ec <_malloc_r+0x374>
  4033be:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4033c2:	227e      	movs	r2, #126	; 0x7e
  4033c4:	e712      	b.n	4031ec <_malloc_r+0x374>
  4033c6:	687b      	ldr	r3, [r7, #4]
  4033c8:	e780      	b.n	4032cc <_malloc_r+0x454>
  4033ca:	08f0      	lsrs	r0, r6, #3
  4033cc:	f106 0308 	add.w	r3, r6, #8
  4033d0:	e600      	b.n	402fd4 <_malloc_r+0x15c>
  4033d2:	bf00      	nop
  4033d4:	20401aa4 	.word	0x20401aa4

004033d8 <__ascii_mbtowc>:
  4033d8:	b082      	sub	sp, #8
  4033da:	b149      	cbz	r1, 4033f0 <__ascii_mbtowc+0x18>
  4033dc:	b15a      	cbz	r2, 4033f6 <__ascii_mbtowc+0x1e>
  4033de:	b16b      	cbz	r3, 4033fc <__ascii_mbtowc+0x24>
  4033e0:	7813      	ldrb	r3, [r2, #0]
  4033e2:	600b      	str	r3, [r1, #0]
  4033e4:	7812      	ldrb	r2, [r2, #0]
  4033e6:	1c10      	adds	r0, r2, #0
  4033e8:	bf18      	it	ne
  4033ea:	2001      	movne	r0, #1
  4033ec:	b002      	add	sp, #8
  4033ee:	4770      	bx	lr
  4033f0:	a901      	add	r1, sp, #4
  4033f2:	2a00      	cmp	r2, #0
  4033f4:	d1f3      	bne.n	4033de <__ascii_mbtowc+0x6>
  4033f6:	4610      	mov	r0, r2
  4033f8:	b002      	add	sp, #8
  4033fa:	4770      	bx	lr
  4033fc:	f06f 0001 	mvn.w	r0, #1
  403400:	e7f4      	b.n	4033ec <__ascii_mbtowc+0x14>
  403402:	bf00      	nop
	...

00403410 <memchr>:
  403410:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403414:	2a10      	cmp	r2, #16
  403416:	db2b      	blt.n	403470 <memchr+0x60>
  403418:	f010 0f07 	tst.w	r0, #7
  40341c:	d008      	beq.n	403430 <memchr+0x20>
  40341e:	f810 3b01 	ldrb.w	r3, [r0], #1
  403422:	3a01      	subs	r2, #1
  403424:	428b      	cmp	r3, r1
  403426:	d02d      	beq.n	403484 <memchr+0x74>
  403428:	f010 0f07 	tst.w	r0, #7
  40342c:	b342      	cbz	r2, 403480 <memchr+0x70>
  40342e:	d1f6      	bne.n	40341e <memchr+0xe>
  403430:	b4f0      	push	{r4, r5, r6, r7}
  403432:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403436:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40343a:	f022 0407 	bic.w	r4, r2, #7
  40343e:	f07f 0700 	mvns.w	r7, #0
  403442:	2300      	movs	r3, #0
  403444:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403448:	3c08      	subs	r4, #8
  40344a:	ea85 0501 	eor.w	r5, r5, r1
  40344e:	ea86 0601 	eor.w	r6, r6, r1
  403452:	fa85 f547 	uadd8	r5, r5, r7
  403456:	faa3 f587 	sel	r5, r3, r7
  40345a:	fa86 f647 	uadd8	r6, r6, r7
  40345e:	faa5 f687 	sel	r6, r5, r7
  403462:	b98e      	cbnz	r6, 403488 <memchr+0x78>
  403464:	d1ee      	bne.n	403444 <memchr+0x34>
  403466:	bcf0      	pop	{r4, r5, r6, r7}
  403468:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40346c:	f002 0207 	and.w	r2, r2, #7
  403470:	b132      	cbz	r2, 403480 <memchr+0x70>
  403472:	f810 3b01 	ldrb.w	r3, [r0], #1
  403476:	3a01      	subs	r2, #1
  403478:	ea83 0301 	eor.w	r3, r3, r1
  40347c:	b113      	cbz	r3, 403484 <memchr+0x74>
  40347e:	d1f8      	bne.n	403472 <memchr+0x62>
  403480:	2000      	movs	r0, #0
  403482:	4770      	bx	lr
  403484:	3801      	subs	r0, #1
  403486:	4770      	bx	lr
  403488:	2d00      	cmp	r5, #0
  40348a:	bf06      	itte	eq
  40348c:	4635      	moveq	r5, r6
  40348e:	3803      	subeq	r0, #3
  403490:	3807      	subne	r0, #7
  403492:	f015 0f01 	tst.w	r5, #1
  403496:	d107      	bne.n	4034a8 <memchr+0x98>
  403498:	3001      	adds	r0, #1
  40349a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40349e:	bf02      	ittt	eq
  4034a0:	3001      	addeq	r0, #1
  4034a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4034a6:	3001      	addeq	r0, #1
  4034a8:	bcf0      	pop	{r4, r5, r6, r7}
  4034aa:	3801      	subs	r0, #1
  4034ac:	4770      	bx	lr
  4034ae:	bf00      	nop

004034b0 <memcpy>:
  4034b0:	4684      	mov	ip, r0
  4034b2:	ea41 0300 	orr.w	r3, r1, r0
  4034b6:	f013 0303 	ands.w	r3, r3, #3
  4034ba:	d16d      	bne.n	403598 <memcpy+0xe8>
  4034bc:	3a40      	subs	r2, #64	; 0x40
  4034be:	d341      	bcc.n	403544 <memcpy+0x94>
  4034c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4034c4:	f840 3b04 	str.w	r3, [r0], #4
  4034c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4034cc:	f840 3b04 	str.w	r3, [r0], #4
  4034d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4034d4:	f840 3b04 	str.w	r3, [r0], #4
  4034d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4034dc:	f840 3b04 	str.w	r3, [r0], #4
  4034e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4034e4:	f840 3b04 	str.w	r3, [r0], #4
  4034e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4034ec:	f840 3b04 	str.w	r3, [r0], #4
  4034f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4034f4:	f840 3b04 	str.w	r3, [r0], #4
  4034f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4034fc:	f840 3b04 	str.w	r3, [r0], #4
  403500:	f851 3b04 	ldr.w	r3, [r1], #4
  403504:	f840 3b04 	str.w	r3, [r0], #4
  403508:	f851 3b04 	ldr.w	r3, [r1], #4
  40350c:	f840 3b04 	str.w	r3, [r0], #4
  403510:	f851 3b04 	ldr.w	r3, [r1], #4
  403514:	f840 3b04 	str.w	r3, [r0], #4
  403518:	f851 3b04 	ldr.w	r3, [r1], #4
  40351c:	f840 3b04 	str.w	r3, [r0], #4
  403520:	f851 3b04 	ldr.w	r3, [r1], #4
  403524:	f840 3b04 	str.w	r3, [r0], #4
  403528:	f851 3b04 	ldr.w	r3, [r1], #4
  40352c:	f840 3b04 	str.w	r3, [r0], #4
  403530:	f851 3b04 	ldr.w	r3, [r1], #4
  403534:	f840 3b04 	str.w	r3, [r0], #4
  403538:	f851 3b04 	ldr.w	r3, [r1], #4
  40353c:	f840 3b04 	str.w	r3, [r0], #4
  403540:	3a40      	subs	r2, #64	; 0x40
  403542:	d2bd      	bcs.n	4034c0 <memcpy+0x10>
  403544:	3230      	adds	r2, #48	; 0x30
  403546:	d311      	bcc.n	40356c <memcpy+0xbc>
  403548:	f851 3b04 	ldr.w	r3, [r1], #4
  40354c:	f840 3b04 	str.w	r3, [r0], #4
  403550:	f851 3b04 	ldr.w	r3, [r1], #4
  403554:	f840 3b04 	str.w	r3, [r0], #4
  403558:	f851 3b04 	ldr.w	r3, [r1], #4
  40355c:	f840 3b04 	str.w	r3, [r0], #4
  403560:	f851 3b04 	ldr.w	r3, [r1], #4
  403564:	f840 3b04 	str.w	r3, [r0], #4
  403568:	3a10      	subs	r2, #16
  40356a:	d2ed      	bcs.n	403548 <memcpy+0x98>
  40356c:	320c      	adds	r2, #12
  40356e:	d305      	bcc.n	40357c <memcpy+0xcc>
  403570:	f851 3b04 	ldr.w	r3, [r1], #4
  403574:	f840 3b04 	str.w	r3, [r0], #4
  403578:	3a04      	subs	r2, #4
  40357a:	d2f9      	bcs.n	403570 <memcpy+0xc0>
  40357c:	3204      	adds	r2, #4
  40357e:	d008      	beq.n	403592 <memcpy+0xe2>
  403580:	07d2      	lsls	r2, r2, #31
  403582:	bf1c      	itt	ne
  403584:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403588:	f800 3b01 	strbne.w	r3, [r0], #1
  40358c:	d301      	bcc.n	403592 <memcpy+0xe2>
  40358e:	880b      	ldrh	r3, [r1, #0]
  403590:	8003      	strh	r3, [r0, #0]
  403592:	4660      	mov	r0, ip
  403594:	4770      	bx	lr
  403596:	bf00      	nop
  403598:	2a08      	cmp	r2, #8
  40359a:	d313      	bcc.n	4035c4 <memcpy+0x114>
  40359c:	078b      	lsls	r3, r1, #30
  40359e:	d08d      	beq.n	4034bc <memcpy+0xc>
  4035a0:	f010 0303 	ands.w	r3, r0, #3
  4035a4:	d08a      	beq.n	4034bc <memcpy+0xc>
  4035a6:	f1c3 0304 	rsb	r3, r3, #4
  4035aa:	1ad2      	subs	r2, r2, r3
  4035ac:	07db      	lsls	r3, r3, #31
  4035ae:	bf1c      	itt	ne
  4035b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4035b4:	f800 3b01 	strbne.w	r3, [r0], #1
  4035b8:	d380      	bcc.n	4034bc <memcpy+0xc>
  4035ba:	f831 3b02 	ldrh.w	r3, [r1], #2
  4035be:	f820 3b02 	strh.w	r3, [r0], #2
  4035c2:	e77b      	b.n	4034bc <memcpy+0xc>
  4035c4:	3a04      	subs	r2, #4
  4035c6:	d3d9      	bcc.n	40357c <memcpy+0xcc>
  4035c8:	3a01      	subs	r2, #1
  4035ca:	f811 3b01 	ldrb.w	r3, [r1], #1
  4035ce:	f800 3b01 	strb.w	r3, [r0], #1
  4035d2:	d2f9      	bcs.n	4035c8 <memcpy+0x118>
  4035d4:	780b      	ldrb	r3, [r1, #0]
  4035d6:	7003      	strb	r3, [r0, #0]
  4035d8:	784b      	ldrb	r3, [r1, #1]
  4035da:	7043      	strb	r3, [r0, #1]
  4035dc:	788b      	ldrb	r3, [r1, #2]
  4035de:	7083      	strb	r3, [r0, #2]
  4035e0:	4660      	mov	r0, ip
  4035e2:	4770      	bx	lr

004035e4 <memmove>:
  4035e4:	4288      	cmp	r0, r1
  4035e6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4035e8:	d90d      	bls.n	403606 <memmove+0x22>
  4035ea:	188b      	adds	r3, r1, r2
  4035ec:	4298      	cmp	r0, r3
  4035ee:	d20a      	bcs.n	403606 <memmove+0x22>
  4035f0:	1884      	adds	r4, r0, r2
  4035f2:	2a00      	cmp	r2, #0
  4035f4:	d051      	beq.n	40369a <memmove+0xb6>
  4035f6:	4622      	mov	r2, r4
  4035f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4035fc:	f802 4d01 	strb.w	r4, [r2, #-1]!
  403600:	4299      	cmp	r1, r3
  403602:	d1f9      	bne.n	4035f8 <memmove+0x14>
  403604:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403606:	2a0f      	cmp	r2, #15
  403608:	d948      	bls.n	40369c <memmove+0xb8>
  40360a:	ea41 0300 	orr.w	r3, r1, r0
  40360e:	079b      	lsls	r3, r3, #30
  403610:	d146      	bne.n	4036a0 <memmove+0xbc>
  403612:	f100 0410 	add.w	r4, r0, #16
  403616:	f101 0310 	add.w	r3, r1, #16
  40361a:	4615      	mov	r5, r2
  40361c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  403620:	f844 6c10 	str.w	r6, [r4, #-16]
  403624:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  403628:	f844 6c0c 	str.w	r6, [r4, #-12]
  40362c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  403630:	f844 6c08 	str.w	r6, [r4, #-8]
  403634:	3d10      	subs	r5, #16
  403636:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40363a:	f844 6c04 	str.w	r6, [r4, #-4]
  40363e:	2d0f      	cmp	r5, #15
  403640:	f103 0310 	add.w	r3, r3, #16
  403644:	f104 0410 	add.w	r4, r4, #16
  403648:	d8e8      	bhi.n	40361c <memmove+0x38>
  40364a:	f1a2 0310 	sub.w	r3, r2, #16
  40364e:	f023 030f 	bic.w	r3, r3, #15
  403652:	f002 0e0f 	and.w	lr, r2, #15
  403656:	3310      	adds	r3, #16
  403658:	f1be 0f03 	cmp.w	lr, #3
  40365c:	4419      	add	r1, r3
  40365e:	4403      	add	r3, r0
  403660:	d921      	bls.n	4036a6 <memmove+0xc2>
  403662:	1f1e      	subs	r6, r3, #4
  403664:	460d      	mov	r5, r1
  403666:	4674      	mov	r4, lr
  403668:	3c04      	subs	r4, #4
  40366a:	f855 7b04 	ldr.w	r7, [r5], #4
  40366e:	f846 7f04 	str.w	r7, [r6, #4]!
  403672:	2c03      	cmp	r4, #3
  403674:	d8f8      	bhi.n	403668 <memmove+0x84>
  403676:	f1ae 0404 	sub.w	r4, lr, #4
  40367a:	f024 0403 	bic.w	r4, r4, #3
  40367e:	3404      	adds	r4, #4
  403680:	4421      	add	r1, r4
  403682:	4423      	add	r3, r4
  403684:	f002 0203 	and.w	r2, r2, #3
  403688:	b162      	cbz	r2, 4036a4 <memmove+0xc0>
  40368a:	3b01      	subs	r3, #1
  40368c:	440a      	add	r2, r1
  40368e:	f811 4b01 	ldrb.w	r4, [r1], #1
  403692:	f803 4f01 	strb.w	r4, [r3, #1]!
  403696:	428a      	cmp	r2, r1
  403698:	d1f9      	bne.n	40368e <memmove+0xaa>
  40369a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40369c:	4603      	mov	r3, r0
  40369e:	e7f3      	b.n	403688 <memmove+0xa4>
  4036a0:	4603      	mov	r3, r0
  4036a2:	e7f2      	b.n	40368a <memmove+0xa6>
  4036a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4036a6:	4672      	mov	r2, lr
  4036a8:	e7ee      	b.n	403688 <memmove+0xa4>
  4036aa:	bf00      	nop

004036ac <__malloc_lock>:
  4036ac:	4801      	ldr	r0, [pc, #4]	; (4036b4 <__malloc_lock+0x8>)
  4036ae:	f7ff bb67 	b.w	402d80 <__retarget_lock_acquire_recursive>
  4036b2:	bf00      	nop
  4036b4:	20401af4 	.word	0x20401af4

004036b8 <__malloc_unlock>:
  4036b8:	4801      	ldr	r0, [pc, #4]	; (4036c0 <__malloc_unlock+0x8>)
  4036ba:	f7ff bb63 	b.w	402d84 <__retarget_lock_release_recursive>
  4036be:	bf00      	nop
  4036c0:	20401af4 	.word	0x20401af4

004036c4 <_realloc_r>:
  4036c4:	2900      	cmp	r1, #0
  4036c6:	f000 8095 	beq.w	4037f4 <_realloc_r+0x130>
  4036ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4036ce:	460d      	mov	r5, r1
  4036d0:	4616      	mov	r6, r2
  4036d2:	b083      	sub	sp, #12
  4036d4:	4680      	mov	r8, r0
  4036d6:	f106 070b 	add.w	r7, r6, #11
  4036da:	f7ff ffe7 	bl	4036ac <__malloc_lock>
  4036de:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4036e2:	2f16      	cmp	r7, #22
  4036e4:	f02e 0403 	bic.w	r4, lr, #3
  4036e8:	f1a5 0908 	sub.w	r9, r5, #8
  4036ec:	d83c      	bhi.n	403768 <_realloc_r+0xa4>
  4036ee:	2210      	movs	r2, #16
  4036f0:	4617      	mov	r7, r2
  4036f2:	42be      	cmp	r6, r7
  4036f4:	d83d      	bhi.n	403772 <_realloc_r+0xae>
  4036f6:	4294      	cmp	r4, r2
  4036f8:	da43      	bge.n	403782 <_realloc_r+0xbe>
  4036fa:	4bc4      	ldr	r3, [pc, #784]	; (403a0c <_realloc_r+0x348>)
  4036fc:	6899      	ldr	r1, [r3, #8]
  4036fe:	eb09 0004 	add.w	r0, r9, r4
  403702:	4288      	cmp	r0, r1
  403704:	f000 80b4 	beq.w	403870 <_realloc_r+0x1ac>
  403708:	6843      	ldr	r3, [r0, #4]
  40370a:	f023 0101 	bic.w	r1, r3, #1
  40370e:	4401      	add	r1, r0
  403710:	6849      	ldr	r1, [r1, #4]
  403712:	07c9      	lsls	r1, r1, #31
  403714:	d54c      	bpl.n	4037b0 <_realloc_r+0xec>
  403716:	f01e 0f01 	tst.w	lr, #1
  40371a:	f000 809b 	beq.w	403854 <_realloc_r+0x190>
  40371e:	4631      	mov	r1, r6
  403720:	4640      	mov	r0, r8
  403722:	f7ff fba9 	bl	402e78 <_malloc_r>
  403726:	4606      	mov	r6, r0
  403728:	2800      	cmp	r0, #0
  40372a:	d03a      	beq.n	4037a2 <_realloc_r+0xde>
  40372c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403730:	f023 0301 	bic.w	r3, r3, #1
  403734:	444b      	add	r3, r9
  403736:	f1a0 0208 	sub.w	r2, r0, #8
  40373a:	429a      	cmp	r2, r3
  40373c:	f000 8121 	beq.w	403982 <_realloc_r+0x2be>
  403740:	1f22      	subs	r2, r4, #4
  403742:	2a24      	cmp	r2, #36	; 0x24
  403744:	f200 8107 	bhi.w	403956 <_realloc_r+0x292>
  403748:	2a13      	cmp	r2, #19
  40374a:	f200 80db 	bhi.w	403904 <_realloc_r+0x240>
  40374e:	4603      	mov	r3, r0
  403750:	462a      	mov	r2, r5
  403752:	6811      	ldr	r1, [r2, #0]
  403754:	6019      	str	r1, [r3, #0]
  403756:	6851      	ldr	r1, [r2, #4]
  403758:	6059      	str	r1, [r3, #4]
  40375a:	6892      	ldr	r2, [r2, #8]
  40375c:	609a      	str	r2, [r3, #8]
  40375e:	4629      	mov	r1, r5
  403760:	4640      	mov	r0, r8
  403762:	f7ff f873 	bl	40284c <_free_r>
  403766:	e01c      	b.n	4037a2 <_realloc_r+0xde>
  403768:	f027 0707 	bic.w	r7, r7, #7
  40376c:	2f00      	cmp	r7, #0
  40376e:	463a      	mov	r2, r7
  403770:	dabf      	bge.n	4036f2 <_realloc_r+0x2e>
  403772:	2600      	movs	r6, #0
  403774:	230c      	movs	r3, #12
  403776:	4630      	mov	r0, r6
  403778:	f8c8 3000 	str.w	r3, [r8]
  40377c:	b003      	add	sp, #12
  40377e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403782:	462e      	mov	r6, r5
  403784:	1be3      	subs	r3, r4, r7
  403786:	2b0f      	cmp	r3, #15
  403788:	d81e      	bhi.n	4037c8 <_realloc_r+0x104>
  40378a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40378e:	f003 0301 	and.w	r3, r3, #1
  403792:	4323      	orrs	r3, r4
  403794:	444c      	add	r4, r9
  403796:	f8c9 3004 	str.w	r3, [r9, #4]
  40379a:	6863      	ldr	r3, [r4, #4]
  40379c:	f043 0301 	orr.w	r3, r3, #1
  4037a0:	6063      	str	r3, [r4, #4]
  4037a2:	4640      	mov	r0, r8
  4037a4:	f7ff ff88 	bl	4036b8 <__malloc_unlock>
  4037a8:	4630      	mov	r0, r6
  4037aa:	b003      	add	sp, #12
  4037ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4037b0:	f023 0303 	bic.w	r3, r3, #3
  4037b4:	18e1      	adds	r1, r4, r3
  4037b6:	4291      	cmp	r1, r2
  4037b8:	db1f      	blt.n	4037fa <_realloc_r+0x136>
  4037ba:	68c3      	ldr	r3, [r0, #12]
  4037bc:	6882      	ldr	r2, [r0, #8]
  4037be:	462e      	mov	r6, r5
  4037c0:	60d3      	str	r3, [r2, #12]
  4037c2:	460c      	mov	r4, r1
  4037c4:	609a      	str	r2, [r3, #8]
  4037c6:	e7dd      	b.n	403784 <_realloc_r+0xc0>
  4037c8:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4037cc:	eb09 0107 	add.w	r1, r9, r7
  4037d0:	f002 0201 	and.w	r2, r2, #1
  4037d4:	444c      	add	r4, r9
  4037d6:	f043 0301 	orr.w	r3, r3, #1
  4037da:	4317      	orrs	r7, r2
  4037dc:	f8c9 7004 	str.w	r7, [r9, #4]
  4037e0:	604b      	str	r3, [r1, #4]
  4037e2:	6863      	ldr	r3, [r4, #4]
  4037e4:	f043 0301 	orr.w	r3, r3, #1
  4037e8:	3108      	adds	r1, #8
  4037ea:	6063      	str	r3, [r4, #4]
  4037ec:	4640      	mov	r0, r8
  4037ee:	f7ff f82d 	bl	40284c <_free_r>
  4037f2:	e7d6      	b.n	4037a2 <_realloc_r+0xde>
  4037f4:	4611      	mov	r1, r2
  4037f6:	f7ff bb3f 	b.w	402e78 <_malloc_r>
  4037fa:	f01e 0f01 	tst.w	lr, #1
  4037fe:	d18e      	bne.n	40371e <_realloc_r+0x5a>
  403800:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403804:	eba9 0a01 	sub.w	sl, r9, r1
  403808:	f8da 1004 	ldr.w	r1, [sl, #4]
  40380c:	f021 0103 	bic.w	r1, r1, #3
  403810:	440b      	add	r3, r1
  403812:	4423      	add	r3, r4
  403814:	4293      	cmp	r3, r2
  403816:	db25      	blt.n	403864 <_realloc_r+0x1a0>
  403818:	68c2      	ldr	r2, [r0, #12]
  40381a:	6881      	ldr	r1, [r0, #8]
  40381c:	4656      	mov	r6, sl
  40381e:	60ca      	str	r2, [r1, #12]
  403820:	6091      	str	r1, [r2, #8]
  403822:	f8da 100c 	ldr.w	r1, [sl, #12]
  403826:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40382a:	1f22      	subs	r2, r4, #4
  40382c:	2a24      	cmp	r2, #36	; 0x24
  40382e:	60c1      	str	r1, [r0, #12]
  403830:	6088      	str	r0, [r1, #8]
  403832:	f200 8094 	bhi.w	40395e <_realloc_r+0x29a>
  403836:	2a13      	cmp	r2, #19
  403838:	d96f      	bls.n	40391a <_realloc_r+0x256>
  40383a:	6829      	ldr	r1, [r5, #0]
  40383c:	f8ca 1008 	str.w	r1, [sl, #8]
  403840:	6869      	ldr	r1, [r5, #4]
  403842:	f8ca 100c 	str.w	r1, [sl, #12]
  403846:	2a1b      	cmp	r2, #27
  403848:	f200 80a2 	bhi.w	403990 <_realloc_r+0x2cc>
  40384c:	3508      	adds	r5, #8
  40384e:	f10a 0210 	add.w	r2, sl, #16
  403852:	e063      	b.n	40391c <_realloc_r+0x258>
  403854:	f855 3c08 	ldr.w	r3, [r5, #-8]
  403858:	eba9 0a03 	sub.w	sl, r9, r3
  40385c:	f8da 1004 	ldr.w	r1, [sl, #4]
  403860:	f021 0103 	bic.w	r1, r1, #3
  403864:	1863      	adds	r3, r4, r1
  403866:	4293      	cmp	r3, r2
  403868:	f6ff af59 	blt.w	40371e <_realloc_r+0x5a>
  40386c:	4656      	mov	r6, sl
  40386e:	e7d8      	b.n	403822 <_realloc_r+0x15e>
  403870:	6841      	ldr	r1, [r0, #4]
  403872:	f021 0b03 	bic.w	fp, r1, #3
  403876:	44a3      	add	fp, r4
  403878:	f107 0010 	add.w	r0, r7, #16
  40387c:	4583      	cmp	fp, r0
  40387e:	da56      	bge.n	40392e <_realloc_r+0x26a>
  403880:	f01e 0f01 	tst.w	lr, #1
  403884:	f47f af4b 	bne.w	40371e <_realloc_r+0x5a>
  403888:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40388c:	eba9 0a01 	sub.w	sl, r9, r1
  403890:	f8da 1004 	ldr.w	r1, [sl, #4]
  403894:	f021 0103 	bic.w	r1, r1, #3
  403898:	448b      	add	fp, r1
  40389a:	4558      	cmp	r0, fp
  40389c:	dce2      	bgt.n	403864 <_realloc_r+0x1a0>
  40389e:	4656      	mov	r6, sl
  4038a0:	f8da 100c 	ldr.w	r1, [sl, #12]
  4038a4:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4038a8:	1f22      	subs	r2, r4, #4
  4038aa:	2a24      	cmp	r2, #36	; 0x24
  4038ac:	60c1      	str	r1, [r0, #12]
  4038ae:	6088      	str	r0, [r1, #8]
  4038b0:	f200 808f 	bhi.w	4039d2 <_realloc_r+0x30e>
  4038b4:	2a13      	cmp	r2, #19
  4038b6:	f240 808a 	bls.w	4039ce <_realloc_r+0x30a>
  4038ba:	6829      	ldr	r1, [r5, #0]
  4038bc:	f8ca 1008 	str.w	r1, [sl, #8]
  4038c0:	6869      	ldr	r1, [r5, #4]
  4038c2:	f8ca 100c 	str.w	r1, [sl, #12]
  4038c6:	2a1b      	cmp	r2, #27
  4038c8:	f200 808a 	bhi.w	4039e0 <_realloc_r+0x31c>
  4038cc:	3508      	adds	r5, #8
  4038ce:	f10a 0210 	add.w	r2, sl, #16
  4038d2:	6829      	ldr	r1, [r5, #0]
  4038d4:	6011      	str	r1, [r2, #0]
  4038d6:	6869      	ldr	r1, [r5, #4]
  4038d8:	6051      	str	r1, [r2, #4]
  4038da:	68a9      	ldr	r1, [r5, #8]
  4038dc:	6091      	str	r1, [r2, #8]
  4038de:	eb0a 0107 	add.w	r1, sl, r7
  4038e2:	ebab 0207 	sub.w	r2, fp, r7
  4038e6:	f042 0201 	orr.w	r2, r2, #1
  4038ea:	6099      	str	r1, [r3, #8]
  4038ec:	604a      	str	r2, [r1, #4]
  4038ee:	f8da 3004 	ldr.w	r3, [sl, #4]
  4038f2:	f003 0301 	and.w	r3, r3, #1
  4038f6:	431f      	orrs	r7, r3
  4038f8:	4640      	mov	r0, r8
  4038fa:	f8ca 7004 	str.w	r7, [sl, #4]
  4038fe:	f7ff fedb 	bl	4036b8 <__malloc_unlock>
  403902:	e751      	b.n	4037a8 <_realloc_r+0xe4>
  403904:	682b      	ldr	r3, [r5, #0]
  403906:	6003      	str	r3, [r0, #0]
  403908:	686b      	ldr	r3, [r5, #4]
  40390a:	6043      	str	r3, [r0, #4]
  40390c:	2a1b      	cmp	r2, #27
  40390e:	d82d      	bhi.n	40396c <_realloc_r+0x2a8>
  403910:	f100 0308 	add.w	r3, r0, #8
  403914:	f105 0208 	add.w	r2, r5, #8
  403918:	e71b      	b.n	403752 <_realloc_r+0x8e>
  40391a:	4632      	mov	r2, r6
  40391c:	6829      	ldr	r1, [r5, #0]
  40391e:	6011      	str	r1, [r2, #0]
  403920:	6869      	ldr	r1, [r5, #4]
  403922:	6051      	str	r1, [r2, #4]
  403924:	68a9      	ldr	r1, [r5, #8]
  403926:	6091      	str	r1, [r2, #8]
  403928:	461c      	mov	r4, r3
  40392a:	46d1      	mov	r9, sl
  40392c:	e72a      	b.n	403784 <_realloc_r+0xc0>
  40392e:	eb09 0107 	add.w	r1, r9, r7
  403932:	ebab 0b07 	sub.w	fp, fp, r7
  403936:	f04b 0201 	orr.w	r2, fp, #1
  40393a:	6099      	str	r1, [r3, #8]
  40393c:	604a      	str	r2, [r1, #4]
  40393e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403942:	f003 0301 	and.w	r3, r3, #1
  403946:	431f      	orrs	r7, r3
  403948:	4640      	mov	r0, r8
  40394a:	f845 7c04 	str.w	r7, [r5, #-4]
  40394e:	f7ff feb3 	bl	4036b8 <__malloc_unlock>
  403952:	462e      	mov	r6, r5
  403954:	e728      	b.n	4037a8 <_realloc_r+0xe4>
  403956:	4629      	mov	r1, r5
  403958:	f7ff fe44 	bl	4035e4 <memmove>
  40395c:	e6ff      	b.n	40375e <_realloc_r+0x9a>
  40395e:	4629      	mov	r1, r5
  403960:	4630      	mov	r0, r6
  403962:	461c      	mov	r4, r3
  403964:	46d1      	mov	r9, sl
  403966:	f7ff fe3d 	bl	4035e4 <memmove>
  40396a:	e70b      	b.n	403784 <_realloc_r+0xc0>
  40396c:	68ab      	ldr	r3, [r5, #8]
  40396e:	6083      	str	r3, [r0, #8]
  403970:	68eb      	ldr	r3, [r5, #12]
  403972:	60c3      	str	r3, [r0, #12]
  403974:	2a24      	cmp	r2, #36	; 0x24
  403976:	d017      	beq.n	4039a8 <_realloc_r+0x2e4>
  403978:	f100 0310 	add.w	r3, r0, #16
  40397c:	f105 0210 	add.w	r2, r5, #16
  403980:	e6e7      	b.n	403752 <_realloc_r+0x8e>
  403982:	f850 3c04 	ldr.w	r3, [r0, #-4]
  403986:	f023 0303 	bic.w	r3, r3, #3
  40398a:	441c      	add	r4, r3
  40398c:	462e      	mov	r6, r5
  40398e:	e6f9      	b.n	403784 <_realloc_r+0xc0>
  403990:	68a9      	ldr	r1, [r5, #8]
  403992:	f8ca 1010 	str.w	r1, [sl, #16]
  403996:	68e9      	ldr	r1, [r5, #12]
  403998:	f8ca 1014 	str.w	r1, [sl, #20]
  40399c:	2a24      	cmp	r2, #36	; 0x24
  40399e:	d00c      	beq.n	4039ba <_realloc_r+0x2f6>
  4039a0:	3510      	adds	r5, #16
  4039a2:	f10a 0218 	add.w	r2, sl, #24
  4039a6:	e7b9      	b.n	40391c <_realloc_r+0x258>
  4039a8:	692b      	ldr	r3, [r5, #16]
  4039aa:	6103      	str	r3, [r0, #16]
  4039ac:	696b      	ldr	r3, [r5, #20]
  4039ae:	6143      	str	r3, [r0, #20]
  4039b0:	f105 0218 	add.w	r2, r5, #24
  4039b4:	f100 0318 	add.w	r3, r0, #24
  4039b8:	e6cb      	b.n	403752 <_realloc_r+0x8e>
  4039ba:	692a      	ldr	r2, [r5, #16]
  4039bc:	f8ca 2018 	str.w	r2, [sl, #24]
  4039c0:	696a      	ldr	r2, [r5, #20]
  4039c2:	f8ca 201c 	str.w	r2, [sl, #28]
  4039c6:	3518      	adds	r5, #24
  4039c8:	f10a 0220 	add.w	r2, sl, #32
  4039cc:	e7a6      	b.n	40391c <_realloc_r+0x258>
  4039ce:	4632      	mov	r2, r6
  4039d0:	e77f      	b.n	4038d2 <_realloc_r+0x20e>
  4039d2:	4629      	mov	r1, r5
  4039d4:	4630      	mov	r0, r6
  4039d6:	9301      	str	r3, [sp, #4]
  4039d8:	f7ff fe04 	bl	4035e4 <memmove>
  4039dc:	9b01      	ldr	r3, [sp, #4]
  4039de:	e77e      	b.n	4038de <_realloc_r+0x21a>
  4039e0:	68a9      	ldr	r1, [r5, #8]
  4039e2:	f8ca 1010 	str.w	r1, [sl, #16]
  4039e6:	68e9      	ldr	r1, [r5, #12]
  4039e8:	f8ca 1014 	str.w	r1, [sl, #20]
  4039ec:	2a24      	cmp	r2, #36	; 0x24
  4039ee:	d003      	beq.n	4039f8 <_realloc_r+0x334>
  4039f0:	3510      	adds	r5, #16
  4039f2:	f10a 0218 	add.w	r2, sl, #24
  4039f6:	e76c      	b.n	4038d2 <_realloc_r+0x20e>
  4039f8:	692a      	ldr	r2, [r5, #16]
  4039fa:	f8ca 2018 	str.w	r2, [sl, #24]
  4039fe:	696a      	ldr	r2, [r5, #20]
  403a00:	f8ca 201c 	str.w	r2, [sl, #28]
  403a04:	3518      	adds	r5, #24
  403a06:	f10a 0220 	add.w	r2, sl, #32
  403a0a:	e762      	b.n	4038d2 <_realloc_r+0x20e>
  403a0c:	204005c0 	.word	0x204005c0

00403a10 <_sbrk_r>:
  403a10:	b538      	push	{r3, r4, r5, lr}
  403a12:	4c07      	ldr	r4, [pc, #28]	; (403a30 <_sbrk_r+0x20>)
  403a14:	2300      	movs	r3, #0
  403a16:	4605      	mov	r5, r0
  403a18:	4608      	mov	r0, r1
  403a1a:	6023      	str	r3, [r4, #0]
  403a1c:	f7fd fc68 	bl	4012f0 <_sbrk>
  403a20:	1c43      	adds	r3, r0, #1
  403a22:	d000      	beq.n	403a26 <_sbrk_r+0x16>
  403a24:	bd38      	pop	{r3, r4, r5, pc}
  403a26:	6823      	ldr	r3, [r4, #0]
  403a28:	2b00      	cmp	r3, #0
  403a2a:	d0fb      	beq.n	403a24 <_sbrk_r+0x14>
  403a2c:	602b      	str	r3, [r5, #0]
  403a2e:	bd38      	pop	{r3, r4, r5, pc}
  403a30:	20401b08 	.word	0x20401b08

00403a34 <__sread>:
  403a34:	b510      	push	{r4, lr}
  403a36:	460c      	mov	r4, r1
  403a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403a3c:	f000 fa66 	bl	403f0c <_read_r>
  403a40:	2800      	cmp	r0, #0
  403a42:	db03      	blt.n	403a4c <__sread+0x18>
  403a44:	6d23      	ldr	r3, [r4, #80]	; 0x50
  403a46:	4403      	add	r3, r0
  403a48:	6523      	str	r3, [r4, #80]	; 0x50
  403a4a:	bd10      	pop	{r4, pc}
  403a4c:	89a3      	ldrh	r3, [r4, #12]
  403a4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403a52:	81a3      	strh	r3, [r4, #12]
  403a54:	bd10      	pop	{r4, pc}
  403a56:	bf00      	nop

00403a58 <__swrite>:
  403a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403a5c:	4616      	mov	r6, r2
  403a5e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  403a62:	461f      	mov	r7, r3
  403a64:	05d3      	lsls	r3, r2, #23
  403a66:	460c      	mov	r4, r1
  403a68:	4605      	mov	r5, r0
  403a6a:	d507      	bpl.n	403a7c <__swrite+0x24>
  403a6c:	2200      	movs	r2, #0
  403a6e:	2302      	movs	r3, #2
  403a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403a74:	f000 fa34 	bl	403ee0 <_lseek_r>
  403a78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403a7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403a80:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403a84:	81a2      	strh	r2, [r4, #12]
  403a86:	463b      	mov	r3, r7
  403a88:	4632      	mov	r2, r6
  403a8a:	4628      	mov	r0, r5
  403a8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403a90:	f000 b914 	b.w	403cbc <_write_r>

00403a94 <__sseek>:
  403a94:	b510      	push	{r4, lr}
  403a96:	460c      	mov	r4, r1
  403a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403a9c:	f000 fa20 	bl	403ee0 <_lseek_r>
  403aa0:	89a3      	ldrh	r3, [r4, #12]
  403aa2:	1c42      	adds	r2, r0, #1
  403aa4:	bf0e      	itee	eq
  403aa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  403aaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  403aae:	6520      	strne	r0, [r4, #80]	; 0x50
  403ab0:	81a3      	strh	r3, [r4, #12]
  403ab2:	bd10      	pop	{r4, pc}

00403ab4 <__sclose>:
  403ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403ab8:	f000 b978 	b.w	403dac <_close_r>
  403abc:	0000      	movs	r0, r0
	...

00403ac0 <strlen>:
  403ac0:	f890 f000 	pld	[r0]
  403ac4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403ac8:	f020 0107 	bic.w	r1, r0, #7
  403acc:	f06f 0c00 	mvn.w	ip, #0
  403ad0:	f010 0407 	ands.w	r4, r0, #7
  403ad4:	f891 f020 	pld	[r1, #32]
  403ad8:	f040 8049 	bne.w	403b6e <strlen+0xae>
  403adc:	f04f 0400 	mov.w	r4, #0
  403ae0:	f06f 0007 	mvn.w	r0, #7
  403ae4:	e9d1 2300 	ldrd	r2, r3, [r1]
  403ae8:	f891 f040 	pld	[r1, #64]	; 0x40
  403aec:	f100 0008 	add.w	r0, r0, #8
  403af0:	fa82 f24c 	uadd8	r2, r2, ip
  403af4:	faa4 f28c 	sel	r2, r4, ip
  403af8:	fa83 f34c 	uadd8	r3, r3, ip
  403afc:	faa2 f38c 	sel	r3, r2, ip
  403b00:	bb4b      	cbnz	r3, 403b56 <strlen+0x96>
  403b02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403b06:	fa82 f24c 	uadd8	r2, r2, ip
  403b0a:	f100 0008 	add.w	r0, r0, #8
  403b0e:	faa4 f28c 	sel	r2, r4, ip
  403b12:	fa83 f34c 	uadd8	r3, r3, ip
  403b16:	faa2 f38c 	sel	r3, r2, ip
  403b1a:	b9e3      	cbnz	r3, 403b56 <strlen+0x96>
  403b1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  403b20:	fa82 f24c 	uadd8	r2, r2, ip
  403b24:	f100 0008 	add.w	r0, r0, #8
  403b28:	faa4 f28c 	sel	r2, r4, ip
  403b2c:	fa83 f34c 	uadd8	r3, r3, ip
  403b30:	faa2 f38c 	sel	r3, r2, ip
  403b34:	b97b      	cbnz	r3, 403b56 <strlen+0x96>
  403b36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  403b3a:	f101 0120 	add.w	r1, r1, #32
  403b3e:	fa82 f24c 	uadd8	r2, r2, ip
  403b42:	f100 0008 	add.w	r0, r0, #8
  403b46:	faa4 f28c 	sel	r2, r4, ip
  403b4a:	fa83 f34c 	uadd8	r3, r3, ip
  403b4e:	faa2 f38c 	sel	r3, r2, ip
  403b52:	2b00      	cmp	r3, #0
  403b54:	d0c6      	beq.n	403ae4 <strlen+0x24>
  403b56:	2a00      	cmp	r2, #0
  403b58:	bf04      	itt	eq
  403b5a:	3004      	addeq	r0, #4
  403b5c:	461a      	moveq	r2, r3
  403b5e:	ba12      	rev	r2, r2
  403b60:	fab2 f282 	clz	r2, r2
  403b64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403b68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  403b6c:	4770      	bx	lr
  403b6e:	e9d1 2300 	ldrd	r2, r3, [r1]
  403b72:	f004 0503 	and.w	r5, r4, #3
  403b76:	f1c4 0000 	rsb	r0, r4, #0
  403b7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  403b7e:	f014 0f04 	tst.w	r4, #4
  403b82:	f891 f040 	pld	[r1, #64]	; 0x40
  403b86:	fa0c f505 	lsl.w	r5, ip, r5
  403b8a:	ea62 0205 	orn	r2, r2, r5
  403b8e:	bf1c      	itt	ne
  403b90:	ea63 0305 	ornne	r3, r3, r5
  403b94:	4662      	movne	r2, ip
  403b96:	f04f 0400 	mov.w	r4, #0
  403b9a:	e7a9      	b.n	403af0 <strlen+0x30>

00403b9c <__swbuf_r>:
  403b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403b9e:	460d      	mov	r5, r1
  403ba0:	4614      	mov	r4, r2
  403ba2:	4606      	mov	r6, r0
  403ba4:	b110      	cbz	r0, 403bac <__swbuf_r+0x10>
  403ba6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403ba8:	2b00      	cmp	r3, #0
  403baa:	d04b      	beq.n	403c44 <__swbuf_r+0xa8>
  403bac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403bb0:	69a3      	ldr	r3, [r4, #24]
  403bb2:	60a3      	str	r3, [r4, #8]
  403bb4:	b291      	uxth	r1, r2
  403bb6:	0708      	lsls	r0, r1, #28
  403bb8:	d539      	bpl.n	403c2e <__swbuf_r+0x92>
  403bba:	6923      	ldr	r3, [r4, #16]
  403bbc:	2b00      	cmp	r3, #0
  403bbe:	d036      	beq.n	403c2e <__swbuf_r+0x92>
  403bc0:	b2ed      	uxtb	r5, r5
  403bc2:	0489      	lsls	r1, r1, #18
  403bc4:	462f      	mov	r7, r5
  403bc6:	d515      	bpl.n	403bf4 <__swbuf_r+0x58>
  403bc8:	6822      	ldr	r2, [r4, #0]
  403bca:	6961      	ldr	r1, [r4, #20]
  403bcc:	1ad3      	subs	r3, r2, r3
  403bce:	428b      	cmp	r3, r1
  403bd0:	da1c      	bge.n	403c0c <__swbuf_r+0x70>
  403bd2:	3301      	adds	r3, #1
  403bd4:	68a1      	ldr	r1, [r4, #8]
  403bd6:	1c50      	adds	r0, r2, #1
  403bd8:	3901      	subs	r1, #1
  403bda:	60a1      	str	r1, [r4, #8]
  403bdc:	6020      	str	r0, [r4, #0]
  403bde:	7015      	strb	r5, [r2, #0]
  403be0:	6962      	ldr	r2, [r4, #20]
  403be2:	429a      	cmp	r2, r3
  403be4:	d01a      	beq.n	403c1c <__swbuf_r+0x80>
  403be6:	89a3      	ldrh	r3, [r4, #12]
  403be8:	07db      	lsls	r3, r3, #31
  403bea:	d501      	bpl.n	403bf0 <__swbuf_r+0x54>
  403bec:	2d0a      	cmp	r5, #10
  403bee:	d015      	beq.n	403c1c <__swbuf_r+0x80>
  403bf0:	4638      	mov	r0, r7
  403bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403bf4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403bf6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403bfa:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  403bfe:	81a2      	strh	r2, [r4, #12]
  403c00:	6822      	ldr	r2, [r4, #0]
  403c02:	6661      	str	r1, [r4, #100]	; 0x64
  403c04:	6961      	ldr	r1, [r4, #20]
  403c06:	1ad3      	subs	r3, r2, r3
  403c08:	428b      	cmp	r3, r1
  403c0a:	dbe2      	blt.n	403bd2 <__swbuf_r+0x36>
  403c0c:	4621      	mov	r1, r4
  403c0e:	4630      	mov	r0, r6
  403c10:	f7fe fc9e 	bl	402550 <_fflush_r>
  403c14:	b940      	cbnz	r0, 403c28 <__swbuf_r+0x8c>
  403c16:	6822      	ldr	r2, [r4, #0]
  403c18:	2301      	movs	r3, #1
  403c1a:	e7db      	b.n	403bd4 <__swbuf_r+0x38>
  403c1c:	4621      	mov	r1, r4
  403c1e:	4630      	mov	r0, r6
  403c20:	f7fe fc96 	bl	402550 <_fflush_r>
  403c24:	2800      	cmp	r0, #0
  403c26:	d0e3      	beq.n	403bf0 <__swbuf_r+0x54>
  403c28:	f04f 37ff 	mov.w	r7, #4294967295
  403c2c:	e7e0      	b.n	403bf0 <__swbuf_r+0x54>
  403c2e:	4621      	mov	r1, r4
  403c30:	4630      	mov	r0, r6
  403c32:	f7fe fb79 	bl	402328 <__swsetup_r>
  403c36:	2800      	cmp	r0, #0
  403c38:	d1f6      	bne.n	403c28 <__swbuf_r+0x8c>
  403c3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403c3e:	6923      	ldr	r3, [r4, #16]
  403c40:	b291      	uxth	r1, r2
  403c42:	e7bd      	b.n	403bc0 <__swbuf_r+0x24>
  403c44:	f7fe fcdc 	bl	402600 <__sinit>
  403c48:	e7b0      	b.n	403bac <__swbuf_r+0x10>
  403c4a:	bf00      	nop

00403c4c <_wcrtomb_r>:
  403c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  403c4e:	4606      	mov	r6, r0
  403c50:	b085      	sub	sp, #20
  403c52:	461f      	mov	r7, r3
  403c54:	b189      	cbz	r1, 403c7a <_wcrtomb_r+0x2e>
  403c56:	4c10      	ldr	r4, [pc, #64]	; (403c98 <_wcrtomb_r+0x4c>)
  403c58:	4d10      	ldr	r5, [pc, #64]	; (403c9c <_wcrtomb_r+0x50>)
  403c5a:	6824      	ldr	r4, [r4, #0]
  403c5c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  403c5e:	2c00      	cmp	r4, #0
  403c60:	bf08      	it	eq
  403c62:	462c      	moveq	r4, r5
  403c64:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  403c68:	47a0      	blx	r4
  403c6a:	1c43      	adds	r3, r0, #1
  403c6c:	d103      	bne.n	403c76 <_wcrtomb_r+0x2a>
  403c6e:	2200      	movs	r2, #0
  403c70:	238a      	movs	r3, #138	; 0x8a
  403c72:	603a      	str	r2, [r7, #0]
  403c74:	6033      	str	r3, [r6, #0]
  403c76:	b005      	add	sp, #20
  403c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403c7a:	460c      	mov	r4, r1
  403c7c:	4906      	ldr	r1, [pc, #24]	; (403c98 <_wcrtomb_r+0x4c>)
  403c7e:	4a07      	ldr	r2, [pc, #28]	; (403c9c <_wcrtomb_r+0x50>)
  403c80:	6809      	ldr	r1, [r1, #0]
  403c82:	6b49      	ldr	r1, [r1, #52]	; 0x34
  403c84:	2900      	cmp	r1, #0
  403c86:	bf08      	it	eq
  403c88:	4611      	moveq	r1, r2
  403c8a:	4622      	mov	r2, r4
  403c8c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  403c90:	a901      	add	r1, sp, #4
  403c92:	47a0      	blx	r4
  403c94:	e7e9      	b.n	403c6a <_wcrtomb_r+0x1e>
  403c96:	bf00      	nop
  403c98:	20400024 	.word	0x20400024
  403c9c:	20400454 	.word	0x20400454

00403ca0 <__ascii_wctomb>:
  403ca0:	b121      	cbz	r1, 403cac <__ascii_wctomb+0xc>
  403ca2:	2aff      	cmp	r2, #255	; 0xff
  403ca4:	d804      	bhi.n	403cb0 <__ascii_wctomb+0x10>
  403ca6:	700a      	strb	r2, [r1, #0]
  403ca8:	2001      	movs	r0, #1
  403caa:	4770      	bx	lr
  403cac:	4608      	mov	r0, r1
  403cae:	4770      	bx	lr
  403cb0:	238a      	movs	r3, #138	; 0x8a
  403cb2:	6003      	str	r3, [r0, #0]
  403cb4:	f04f 30ff 	mov.w	r0, #4294967295
  403cb8:	4770      	bx	lr
  403cba:	bf00      	nop

00403cbc <_write_r>:
  403cbc:	b570      	push	{r4, r5, r6, lr}
  403cbe:	460d      	mov	r5, r1
  403cc0:	4c08      	ldr	r4, [pc, #32]	; (403ce4 <_write_r+0x28>)
  403cc2:	4611      	mov	r1, r2
  403cc4:	4606      	mov	r6, r0
  403cc6:	461a      	mov	r2, r3
  403cc8:	4628      	mov	r0, r5
  403cca:	2300      	movs	r3, #0
  403ccc:	6023      	str	r3, [r4, #0]
  403cce:	f7fc fc6f 	bl	4005b0 <_write>
  403cd2:	1c43      	adds	r3, r0, #1
  403cd4:	d000      	beq.n	403cd8 <_write_r+0x1c>
  403cd6:	bd70      	pop	{r4, r5, r6, pc}
  403cd8:	6823      	ldr	r3, [r4, #0]
  403cda:	2b00      	cmp	r3, #0
  403cdc:	d0fb      	beq.n	403cd6 <_write_r+0x1a>
  403cde:	6033      	str	r3, [r6, #0]
  403ce0:	bd70      	pop	{r4, r5, r6, pc}
  403ce2:	bf00      	nop
  403ce4:	20401b08 	.word	0x20401b08

00403ce8 <__register_exitproc>:
  403ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403cec:	4d2c      	ldr	r5, [pc, #176]	; (403da0 <__register_exitproc+0xb8>)
  403cee:	4606      	mov	r6, r0
  403cf0:	6828      	ldr	r0, [r5, #0]
  403cf2:	4698      	mov	r8, r3
  403cf4:	460f      	mov	r7, r1
  403cf6:	4691      	mov	r9, r2
  403cf8:	f7ff f842 	bl	402d80 <__retarget_lock_acquire_recursive>
  403cfc:	4b29      	ldr	r3, [pc, #164]	; (403da4 <__register_exitproc+0xbc>)
  403cfe:	681c      	ldr	r4, [r3, #0]
  403d00:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  403d04:	2b00      	cmp	r3, #0
  403d06:	d03e      	beq.n	403d86 <__register_exitproc+0x9e>
  403d08:	685a      	ldr	r2, [r3, #4]
  403d0a:	2a1f      	cmp	r2, #31
  403d0c:	dc1c      	bgt.n	403d48 <__register_exitproc+0x60>
  403d0e:	f102 0e01 	add.w	lr, r2, #1
  403d12:	b176      	cbz	r6, 403d32 <__register_exitproc+0x4a>
  403d14:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  403d18:	2401      	movs	r4, #1
  403d1a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  403d1e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  403d22:	4094      	lsls	r4, r2
  403d24:	4320      	orrs	r0, r4
  403d26:	2e02      	cmp	r6, #2
  403d28:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  403d2c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  403d30:	d023      	beq.n	403d7a <__register_exitproc+0x92>
  403d32:	3202      	adds	r2, #2
  403d34:	f8c3 e004 	str.w	lr, [r3, #4]
  403d38:	6828      	ldr	r0, [r5, #0]
  403d3a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  403d3e:	f7ff f821 	bl	402d84 <__retarget_lock_release_recursive>
  403d42:	2000      	movs	r0, #0
  403d44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403d48:	4b17      	ldr	r3, [pc, #92]	; (403da8 <__register_exitproc+0xc0>)
  403d4a:	b30b      	cbz	r3, 403d90 <__register_exitproc+0xa8>
  403d4c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403d50:	f3af 8000 	nop.w
  403d54:	4603      	mov	r3, r0
  403d56:	b1d8      	cbz	r0, 403d90 <__register_exitproc+0xa8>
  403d58:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  403d5c:	6002      	str	r2, [r0, #0]
  403d5e:	2100      	movs	r1, #0
  403d60:	6041      	str	r1, [r0, #4]
  403d62:	460a      	mov	r2, r1
  403d64:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  403d68:	f04f 0e01 	mov.w	lr, #1
  403d6c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  403d70:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  403d74:	2e00      	cmp	r6, #0
  403d76:	d0dc      	beq.n	403d32 <__register_exitproc+0x4a>
  403d78:	e7cc      	b.n	403d14 <__register_exitproc+0x2c>
  403d7a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  403d7e:	430c      	orrs	r4, r1
  403d80:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  403d84:	e7d5      	b.n	403d32 <__register_exitproc+0x4a>
  403d86:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  403d8a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  403d8e:	e7bb      	b.n	403d08 <__register_exitproc+0x20>
  403d90:	6828      	ldr	r0, [r5, #0]
  403d92:	f7fe fff7 	bl	402d84 <__retarget_lock_release_recursive>
  403d96:	f04f 30ff 	mov.w	r0, #4294967295
  403d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403d9e:	bf00      	nop
  403da0:	20400450 	.word	0x20400450
  403da4:	00404280 	.word	0x00404280
  403da8:	00000000 	.word	0x00000000

00403dac <_close_r>:
  403dac:	b538      	push	{r3, r4, r5, lr}
  403dae:	4c07      	ldr	r4, [pc, #28]	; (403dcc <_close_r+0x20>)
  403db0:	2300      	movs	r3, #0
  403db2:	4605      	mov	r5, r0
  403db4:	4608      	mov	r0, r1
  403db6:	6023      	str	r3, [r4, #0]
  403db8:	f7fd fab6 	bl	401328 <_close>
  403dbc:	1c43      	adds	r3, r0, #1
  403dbe:	d000      	beq.n	403dc2 <_close_r+0x16>
  403dc0:	bd38      	pop	{r3, r4, r5, pc}
  403dc2:	6823      	ldr	r3, [r4, #0]
  403dc4:	2b00      	cmp	r3, #0
  403dc6:	d0fb      	beq.n	403dc0 <_close_r+0x14>
  403dc8:	602b      	str	r3, [r5, #0]
  403dca:	bd38      	pop	{r3, r4, r5, pc}
  403dcc:	20401b08 	.word	0x20401b08

00403dd0 <_fclose_r>:
  403dd0:	b570      	push	{r4, r5, r6, lr}
  403dd2:	b159      	cbz	r1, 403dec <_fclose_r+0x1c>
  403dd4:	4605      	mov	r5, r0
  403dd6:	460c      	mov	r4, r1
  403dd8:	b110      	cbz	r0, 403de0 <_fclose_r+0x10>
  403dda:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403ddc:	2b00      	cmp	r3, #0
  403dde:	d03c      	beq.n	403e5a <_fclose_r+0x8a>
  403de0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403de2:	07d8      	lsls	r0, r3, #31
  403de4:	d505      	bpl.n	403df2 <_fclose_r+0x22>
  403de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403dea:	b92b      	cbnz	r3, 403df8 <_fclose_r+0x28>
  403dec:	2600      	movs	r6, #0
  403dee:	4630      	mov	r0, r6
  403df0:	bd70      	pop	{r4, r5, r6, pc}
  403df2:	89a3      	ldrh	r3, [r4, #12]
  403df4:	0599      	lsls	r1, r3, #22
  403df6:	d53c      	bpl.n	403e72 <_fclose_r+0xa2>
  403df8:	4621      	mov	r1, r4
  403dfa:	4628      	mov	r0, r5
  403dfc:	f7fe fb08 	bl	402410 <__sflush_r>
  403e00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403e02:	4606      	mov	r6, r0
  403e04:	b133      	cbz	r3, 403e14 <_fclose_r+0x44>
  403e06:	69e1      	ldr	r1, [r4, #28]
  403e08:	4628      	mov	r0, r5
  403e0a:	4798      	blx	r3
  403e0c:	2800      	cmp	r0, #0
  403e0e:	bfb8      	it	lt
  403e10:	f04f 36ff 	movlt.w	r6, #4294967295
  403e14:	89a3      	ldrh	r3, [r4, #12]
  403e16:	061a      	lsls	r2, r3, #24
  403e18:	d422      	bmi.n	403e60 <_fclose_r+0x90>
  403e1a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403e1c:	b141      	cbz	r1, 403e30 <_fclose_r+0x60>
  403e1e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403e22:	4299      	cmp	r1, r3
  403e24:	d002      	beq.n	403e2c <_fclose_r+0x5c>
  403e26:	4628      	mov	r0, r5
  403e28:	f7fe fd10 	bl	40284c <_free_r>
  403e2c:	2300      	movs	r3, #0
  403e2e:	6323      	str	r3, [r4, #48]	; 0x30
  403e30:	6c61      	ldr	r1, [r4, #68]	; 0x44
  403e32:	b121      	cbz	r1, 403e3e <_fclose_r+0x6e>
  403e34:	4628      	mov	r0, r5
  403e36:	f7fe fd09 	bl	40284c <_free_r>
  403e3a:	2300      	movs	r3, #0
  403e3c:	6463      	str	r3, [r4, #68]	; 0x44
  403e3e:	f7fe fc0b 	bl	402658 <__sfp_lock_acquire>
  403e42:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403e44:	2200      	movs	r2, #0
  403e46:	07db      	lsls	r3, r3, #31
  403e48:	81a2      	strh	r2, [r4, #12]
  403e4a:	d50e      	bpl.n	403e6a <_fclose_r+0x9a>
  403e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403e4e:	f7fe ff95 	bl	402d7c <__retarget_lock_close_recursive>
  403e52:	f7fe fc07 	bl	402664 <__sfp_lock_release>
  403e56:	4630      	mov	r0, r6
  403e58:	bd70      	pop	{r4, r5, r6, pc}
  403e5a:	f7fe fbd1 	bl	402600 <__sinit>
  403e5e:	e7bf      	b.n	403de0 <_fclose_r+0x10>
  403e60:	6921      	ldr	r1, [r4, #16]
  403e62:	4628      	mov	r0, r5
  403e64:	f7fe fcf2 	bl	40284c <_free_r>
  403e68:	e7d7      	b.n	403e1a <_fclose_r+0x4a>
  403e6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403e6c:	f7fe ff8a 	bl	402d84 <__retarget_lock_release_recursive>
  403e70:	e7ec      	b.n	403e4c <_fclose_r+0x7c>
  403e72:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403e74:	f7fe ff84 	bl	402d80 <__retarget_lock_acquire_recursive>
  403e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403e7c:	2b00      	cmp	r3, #0
  403e7e:	d1bb      	bne.n	403df8 <_fclose_r+0x28>
  403e80:	6e66      	ldr	r6, [r4, #100]	; 0x64
  403e82:	f016 0601 	ands.w	r6, r6, #1
  403e86:	d1b1      	bne.n	403dec <_fclose_r+0x1c>
  403e88:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403e8a:	f7fe ff7b 	bl	402d84 <__retarget_lock_release_recursive>
  403e8e:	4630      	mov	r0, r6
  403e90:	bd70      	pop	{r4, r5, r6, pc}
  403e92:	bf00      	nop

00403e94 <_fstat_r>:
  403e94:	b538      	push	{r3, r4, r5, lr}
  403e96:	460b      	mov	r3, r1
  403e98:	4c07      	ldr	r4, [pc, #28]	; (403eb8 <_fstat_r+0x24>)
  403e9a:	4605      	mov	r5, r0
  403e9c:	4611      	mov	r1, r2
  403e9e:	4618      	mov	r0, r3
  403ea0:	2300      	movs	r3, #0
  403ea2:	6023      	str	r3, [r4, #0]
  403ea4:	f7fd fa43 	bl	40132e <_fstat>
  403ea8:	1c43      	adds	r3, r0, #1
  403eaa:	d000      	beq.n	403eae <_fstat_r+0x1a>
  403eac:	bd38      	pop	{r3, r4, r5, pc}
  403eae:	6823      	ldr	r3, [r4, #0]
  403eb0:	2b00      	cmp	r3, #0
  403eb2:	d0fb      	beq.n	403eac <_fstat_r+0x18>
  403eb4:	602b      	str	r3, [r5, #0]
  403eb6:	bd38      	pop	{r3, r4, r5, pc}
  403eb8:	20401b08 	.word	0x20401b08

00403ebc <_isatty_r>:
  403ebc:	b538      	push	{r3, r4, r5, lr}
  403ebe:	4c07      	ldr	r4, [pc, #28]	; (403edc <_isatty_r+0x20>)
  403ec0:	2300      	movs	r3, #0
  403ec2:	4605      	mov	r5, r0
  403ec4:	4608      	mov	r0, r1
  403ec6:	6023      	str	r3, [r4, #0]
  403ec8:	f7fd fa36 	bl	401338 <_isatty>
  403ecc:	1c43      	adds	r3, r0, #1
  403ece:	d000      	beq.n	403ed2 <_isatty_r+0x16>
  403ed0:	bd38      	pop	{r3, r4, r5, pc}
  403ed2:	6823      	ldr	r3, [r4, #0]
  403ed4:	2b00      	cmp	r3, #0
  403ed6:	d0fb      	beq.n	403ed0 <_isatty_r+0x14>
  403ed8:	602b      	str	r3, [r5, #0]
  403eda:	bd38      	pop	{r3, r4, r5, pc}
  403edc:	20401b08 	.word	0x20401b08

00403ee0 <_lseek_r>:
  403ee0:	b570      	push	{r4, r5, r6, lr}
  403ee2:	460d      	mov	r5, r1
  403ee4:	4c08      	ldr	r4, [pc, #32]	; (403f08 <_lseek_r+0x28>)
  403ee6:	4611      	mov	r1, r2
  403ee8:	4606      	mov	r6, r0
  403eea:	461a      	mov	r2, r3
  403eec:	4628      	mov	r0, r5
  403eee:	2300      	movs	r3, #0
  403ef0:	6023      	str	r3, [r4, #0]
  403ef2:	f7fd fa23 	bl	40133c <_lseek>
  403ef6:	1c43      	adds	r3, r0, #1
  403ef8:	d000      	beq.n	403efc <_lseek_r+0x1c>
  403efa:	bd70      	pop	{r4, r5, r6, pc}
  403efc:	6823      	ldr	r3, [r4, #0]
  403efe:	2b00      	cmp	r3, #0
  403f00:	d0fb      	beq.n	403efa <_lseek_r+0x1a>
  403f02:	6033      	str	r3, [r6, #0]
  403f04:	bd70      	pop	{r4, r5, r6, pc}
  403f06:	bf00      	nop
  403f08:	20401b08 	.word	0x20401b08

00403f0c <_read_r>:
  403f0c:	b570      	push	{r4, r5, r6, lr}
  403f0e:	460d      	mov	r5, r1
  403f10:	4c08      	ldr	r4, [pc, #32]	; (403f34 <_read_r+0x28>)
  403f12:	4611      	mov	r1, r2
  403f14:	4606      	mov	r6, r0
  403f16:	461a      	mov	r2, r3
  403f18:	4628      	mov	r0, r5
  403f1a:	2300      	movs	r3, #0
  403f1c:	6023      	str	r3, [r4, #0]
  403f1e:	f7fc fb29 	bl	400574 <_read>
  403f22:	1c43      	adds	r3, r0, #1
  403f24:	d000      	beq.n	403f28 <_read_r+0x1c>
  403f26:	bd70      	pop	{r4, r5, r6, pc}
  403f28:	6823      	ldr	r3, [r4, #0]
  403f2a:	2b00      	cmp	r3, #0
  403f2c:	d0fb      	beq.n	403f26 <_read_r+0x1a>
  403f2e:	6033      	str	r3, [r6, #0]
  403f30:	bd70      	pop	{r4, r5, r6, pc}
  403f32:	bf00      	nop
  403f34:	20401b08 	.word	0x20401b08

00403f38 <__aeabi_uldivmod>:
  403f38:	b953      	cbnz	r3, 403f50 <__aeabi_uldivmod+0x18>
  403f3a:	b94a      	cbnz	r2, 403f50 <__aeabi_uldivmod+0x18>
  403f3c:	2900      	cmp	r1, #0
  403f3e:	bf08      	it	eq
  403f40:	2800      	cmpeq	r0, #0
  403f42:	bf1c      	itt	ne
  403f44:	f04f 31ff 	movne.w	r1, #4294967295
  403f48:	f04f 30ff 	movne.w	r0, #4294967295
  403f4c:	f000 b97a 	b.w	404244 <__aeabi_idiv0>
  403f50:	f1ad 0c08 	sub.w	ip, sp, #8
  403f54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403f58:	f000 f806 	bl	403f68 <__udivmoddi4>
  403f5c:	f8dd e004 	ldr.w	lr, [sp, #4]
  403f60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403f64:	b004      	add	sp, #16
  403f66:	4770      	bx	lr

00403f68 <__udivmoddi4>:
  403f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403f6c:	468c      	mov	ip, r1
  403f6e:	460d      	mov	r5, r1
  403f70:	4604      	mov	r4, r0
  403f72:	9e08      	ldr	r6, [sp, #32]
  403f74:	2b00      	cmp	r3, #0
  403f76:	d151      	bne.n	40401c <__udivmoddi4+0xb4>
  403f78:	428a      	cmp	r2, r1
  403f7a:	4617      	mov	r7, r2
  403f7c:	d96d      	bls.n	40405a <__udivmoddi4+0xf2>
  403f7e:	fab2 fe82 	clz	lr, r2
  403f82:	f1be 0f00 	cmp.w	lr, #0
  403f86:	d00b      	beq.n	403fa0 <__udivmoddi4+0x38>
  403f88:	f1ce 0c20 	rsb	ip, lr, #32
  403f8c:	fa01 f50e 	lsl.w	r5, r1, lr
  403f90:	fa20 fc0c 	lsr.w	ip, r0, ip
  403f94:	fa02 f70e 	lsl.w	r7, r2, lr
  403f98:	ea4c 0c05 	orr.w	ip, ip, r5
  403f9c:	fa00 f40e 	lsl.w	r4, r0, lr
  403fa0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  403fa4:	0c25      	lsrs	r5, r4, #16
  403fa6:	fbbc f8fa 	udiv	r8, ip, sl
  403faa:	fa1f f987 	uxth.w	r9, r7
  403fae:	fb0a cc18 	mls	ip, sl, r8, ip
  403fb2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  403fb6:	fb08 f309 	mul.w	r3, r8, r9
  403fba:	42ab      	cmp	r3, r5
  403fbc:	d90a      	bls.n	403fd4 <__udivmoddi4+0x6c>
  403fbe:	19ed      	adds	r5, r5, r7
  403fc0:	f108 32ff 	add.w	r2, r8, #4294967295
  403fc4:	f080 8123 	bcs.w	40420e <__udivmoddi4+0x2a6>
  403fc8:	42ab      	cmp	r3, r5
  403fca:	f240 8120 	bls.w	40420e <__udivmoddi4+0x2a6>
  403fce:	f1a8 0802 	sub.w	r8, r8, #2
  403fd2:	443d      	add	r5, r7
  403fd4:	1aed      	subs	r5, r5, r3
  403fd6:	b2a4      	uxth	r4, r4
  403fd8:	fbb5 f0fa 	udiv	r0, r5, sl
  403fdc:	fb0a 5510 	mls	r5, sl, r0, r5
  403fe0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  403fe4:	fb00 f909 	mul.w	r9, r0, r9
  403fe8:	45a1      	cmp	r9, r4
  403fea:	d909      	bls.n	404000 <__udivmoddi4+0x98>
  403fec:	19e4      	adds	r4, r4, r7
  403fee:	f100 33ff 	add.w	r3, r0, #4294967295
  403ff2:	f080 810a 	bcs.w	40420a <__udivmoddi4+0x2a2>
  403ff6:	45a1      	cmp	r9, r4
  403ff8:	f240 8107 	bls.w	40420a <__udivmoddi4+0x2a2>
  403ffc:	3802      	subs	r0, #2
  403ffe:	443c      	add	r4, r7
  404000:	eba4 0409 	sub.w	r4, r4, r9
  404004:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  404008:	2100      	movs	r1, #0
  40400a:	2e00      	cmp	r6, #0
  40400c:	d061      	beq.n	4040d2 <__udivmoddi4+0x16a>
  40400e:	fa24 f40e 	lsr.w	r4, r4, lr
  404012:	2300      	movs	r3, #0
  404014:	6034      	str	r4, [r6, #0]
  404016:	6073      	str	r3, [r6, #4]
  404018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40401c:	428b      	cmp	r3, r1
  40401e:	d907      	bls.n	404030 <__udivmoddi4+0xc8>
  404020:	2e00      	cmp	r6, #0
  404022:	d054      	beq.n	4040ce <__udivmoddi4+0x166>
  404024:	2100      	movs	r1, #0
  404026:	e886 0021 	stmia.w	r6, {r0, r5}
  40402a:	4608      	mov	r0, r1
  40402c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404030:	fab3 f183 	clz	r1, r3
  404034:	2900      	cmp	r1, #0
  404036:	f040 808e 	bne.w	404156 <__udivmoddi4+0x1ee>
  40403a:	42ab      	cmp	r3, r5
  40403c:	d302      	bcc.n	404044 <__udivmoddi4+0xdc>
  40403e:	4282      	cmp	r2, r0
  404040:	f200 80fa 	bhi.w	404238 <__udivmoddi4+0x2d0>
  404044:	1a84      	subs	r4, r0, r2
  404046:	eb65 0503 	sbc.w	r5, r5, r3
  40404a:	2001      	movs	r0, #1
  40404c:	46ac      	mov	ip, r5
  40404e:	2e00      	cmp	r6, #0
  404050:	d03f      	beq.n	4040d2 <__udivmoddi4+0x16a>
  404052:	e886 1010 	stmia.w	r6, {r4, ip}
  404056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40405a:	b912      	cbnz	r2, 404062 <__udivmoddi4+0xfa>
  40405c:	2701      	movs	r7, #1
  40405e:	fbb7 f7f2 	udiv	r7, r7, r2
  404062:	fab7 fe87 	clz	lr, r7
  404066:	f1be 0f00 	cmp.w	lr, #0
  40406a:	d134      	bne.n	4040d6 <__udivmoddi4+0x16e>
  40406c:	1beb      	subs	r3, r5, r7
  40406e:	0c3a      	lsrs	r2, r7, #16
  404070:	fa1f fc87 	uxth.w	ip, r7
  404074:	2101      	movs	r1, #1
  404076:	fbb3 f8f2 	udiv	r8, r3, r2
  40407a:	0c25      	lsrs	r5, r4, #16
  40407c:	fb02 3318 	mls	r3, r2, r8, r3
  404080:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  404084:	fb0c f308 	mul.w	r3, ip, r8
  404088:	42ab      	cmp	r3, r5
  40408a:	d907      	bls.n	40409c <__udivmoddi4+0x134>
  40408c:	19ed      	adds	r5, r5, r7
  40408e:	f108 30ff 	add.w	r0, r8, #4294967295
  404092:	d202      	bcs.n	40409a <__udivmoddi4+0x132>
  404094:	42ab      	cmp	r3, r5
  404096:	f200 80d1 	bhi.w	40423c <__udivmoddi4+0x2d4>
  40409a:	4680      	mov	r8, r0
  40409c:	1aed      	subs	r5, r5, r3
  40409e:	b2a3      	uxth	r3, r4
  4040a0:	fbb5 f0f2 	udiv	r0, r5, r2
  4040a4:	fb02 5510 	mls	r5, r2, r0, r5
  4040a8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4040ac:	fb0c fc00 	mul.w	ip, ip, r0
  4040b0:	45a4      	cmp	ip, r4
  4040b2:	d907      	bls.n	4040c4 <__udivmoddi4+0x15c>
  4040b4:	19e4      	adds	r4, r4, r7
  4040b6:	f100 33ff 	add.w	r3, r0, #4294967295
  4040ba:	d202      	bcs.n	4040c2 <__udivmoddi4+0x15a>
  4040bc:	45a4      	cmp	ip, r4
  4040be:	f200 80b8 	bhi.w	404232 <__udivmoddi4+0x2ca>
  4040c2:	4618      	mov	r0, r3
  4040c4:	eba4 040c 	sub.w	r4, r4, ip
  4040c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4040cc:	e79d      	b.n	40400a <__udivmoddi4+0xa2>
  4040ce:	4631      	mov	r1, r6
  4040d0:	4630      	mov	r0, r6
  4040d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4040d6:	f1ce 0420 	rsb	r4, lr, #32
  4040da:	fa05 f30e 	lsl.w	r3, r5, lr
  4040de:	fa07 f70e 	lsl.w	r7, r7, lr
  4040e2:	fa20 f804 	lsr.w	r8, r0, r4
  4040e6:	0c3a      	lsrs	r2, r7, #16
  4040e8:	fa25 f404 	lsr.w	r4, r5, r4
  4040ec:	ea48 0803 	orr.w	r8, r8, r3
  4040f0:	fbb4 f1f2 	udiv	r1, r4, r2
  4040f4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4040f8:	fb02 4411 	mls	r4, r2, r1, r4
  4040fc:	fa1f fc87 	uxth.w	ip, r7
  404100:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  404104:	fb01 f30c 	mul.w	r3, r1, ip
  404108:	42ab      	cmp	r3, r5
  40410a:	fa00 f40e 	lsl.w	r4, r0, lr
  40410e:	d909      	bls.n	404124 <__udivmoddi4+0x1bc>
  404110:	19ed      	adds	r5, r5, r7
  404112:	f101 30ff 	add.w	r0, r1, #4294967295
  404116:	f080 808a 	bcs.w	40422e <__udivmoddi4+0x2c6>
  40411a:	42ab      	cmp	r3, r5
  40411c:	f240 8087 	bls.w	40422e <__udivmoddi4+0x2c6>
  404120:	3902      	subs	r1, #2
  404122:	443d      	add	r5, r7
  404124:	1aeb      	subs	r3, r5, r3
  404126:	fa1f f588 	uxth.w	r5, r8
  40412a:	fbb3 f0f2 	udiv	r0, r3, r2
  40412e:	fb02 3310 	mls	r3, r2, r0, r3
  404132:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  404136:	fb00 f30c 	mul.w	r3, r0, ip
  40413a:	42ab      	cmp	r3, r5
  40413c:	d907      	bls.n	40414e <__udivmoddi4+0x1e6>
  40413e:	19ed      	adds	r5, r5, r7
  404140:	f100 38ff 	add.w	r8, r0, #4294967295
  404144:	d26f      	bcs.n	404226 <__udivmoddi4+0x2be>
  404146:	42ab      	cmp	r3, r5
  404148:	d96d      	bls.n	404226 <__udivmoddi4+0x2be>
  40414a:	3802      	subs	r0, #2
  40414c:	443d      	add	r5, r7
  40414e:	1aeb      	subs	r3, r5, r3
  404150:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  404154:	e78f      	b.n	404076 <__udivmoddi4+0x10e>
  404156:	f1c1 0720 	rsb	r7, r1, #32
  40415a:	fa22 f807 	lsr.w	r8, r2, r7
  40415e:	408b      	lsls	r3, r1
  404160:	fa05 f401 	lsl.w	r4, r5, r1
  404164:	ea48 0303 	orr.w	r3, r8, r3
  404168:	fa20 fe07 	lsr.w	lr, r0, r7
  40416c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  404170:	40fd      	lsrs	r5, r7
  404172:	ea4e 0e04 	orr.w	lr, lr, r4
  404176:	fbb5 f9fc 	udiv	r9, r5, ip
  40417a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40417e:	fb0c 5519 	mls	r5, ip, r9, r5
  404182:	fa1f f883 	uxth.w	r8, r3
  404186:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40418a:	fb09 f408 	mul.w	r4, r9, r8
  40418e:	42ac      	cmp	r4, r5
  404190:	fa02 f201 	lsl.w	r2, r2, r1
  404194:	fa00 fa01 	lsl.w	sl, r0, r1
  404198:	d908      	bls.n	4041ac <__udivmoddi4+0x244>
  40419a:	18ed      	adds	r5, r5, r3
  40419c:	f109 30ff 	add.w	r0, r9, #4294967295
  4041a0:	d243      	bcs.n	40422a <__udivmoddi4+0x2c2>
  4041a2:	42ac      	cmp	r4, r5
  4041a4:	d941      	bls.n	40422a <__udivmoddi4+0x2c2>
  4041a6:	f1a9 0902 	sub.w	r9, r9, #2
  4041aa:	441d      	add	r5, r3
  4041ac:	1b2d      	subs	r5, r5, r4
  4041ae:	fa1f fe8e 	uxth.w	lr, lr
  4041b2:	fbb5 f0fc 	udiv	r0, r5, ip
  4041b6:	fb0c 5510 	mls	r5, ip, r0, r5
  4041ba:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4041be:	fb00 f808 	mul.w	r8, r0, r8
  4041c2:	45a0      	cmp	r8, r4
  4041c4:	d907      	bls.n	4041d6 <__udivmoddi4+0x26e>
  4041c6:	18e4      	adds	r4, r4, r3
  4041c8:	f100 35ff 	add.w	r5, r0, #4294967295
  4041cc:	d229      	bcs.n	404222 <__udivmoddi4+0x2ba>
  4041ce:	45a0      	cmp	r8, r4
  4041d0:	d927      	bls.n	404222 <__udivmoddi4+0x2ba>
  4041d2:	3802      	subs	r0, #2
  4041d4:	441c      	add	r4, r3
  4041d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4041da:	eba4 0408 	sub.w	r4, r4, r8
  4041de:	fba0 8902 	umull	r8, r9, r0, r2
  4041e2:	454c      	cmp	r4, r9
  4041e4:	46c6      	mov	lr, r8
  4041e6:	464d      	mov	r5, r9
  4041e8:	d315      	bcc.n	404216 <__udivmoddi4+0x2ae>
  4041ea:	d012      	beq.n	404212 <__udivmoddi4+0x2aa>
  4041ec:	b156      	cbz	r6, 404204 <__udivmoddi4+0x29c>
  4041ee:	ebba 030e 	subs.w	r3, sl, lr
  4041f2:	eb64 0405 	sbc.w	r4, r4, r5
  4041f6:	fa04 f707 	lsl.w	r7, r4, r7
  4041fa:	40cb      	lsrs	r3, r1
  4041fc:	431f      	orrs	r7, r3
  4041fe:	40cc      	lsrs	r4, r1
  404200:	6037      	str	r7, [r6, #0]
  404202:	6074      	str	r4, [r6, #4]
  404204:	2100      	movs	r1, #0
  404206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40420a:	4618      	mov	r0, r3
  40420c:	e6f8      	b.n	404000 <__udivmoddi4+0x98>
  40420e:	4690      	mov	r8, r2
  404210:	e6e0      	b.n	403fd4 <__udivmoddi4+0x6c>
  404212:	45c2      	cmp	sl, r8
  404214:	d2ea      	bcs.n	4041ec <__udivmoddi4+0x284>
  404216:	ebb8 0e02 	subs.w	lr, r8, r2
  40421a:	eb69 0503 	sbc.w	r5, r9, r3
  40421e:	3801      	subs	r0, #1
  404220:	e7e4      	b.n	4041ec <__udivmoddi4+0x284>
  404222:	4628      	mov	r0, r5
  404224:	e7d7      	b.n	4041d6 <__udivmoddi4+0x26e>
  404226:	4640      	mov	r0, r8
  404228:	e791      	b.n	40414e <__udivmoddi4+0x1e6>
  40422a:	4681      	mov	r9, r0
  40422c:	e7be      	b.n	4041ac <__udivmoddi4+0x244>
  40422e:	4601      	mov	r1, r0
  404230:	e778      	b.n	404124 <__udivmoddi4+0x1bc>
  404232:	3802      	subs	r0, #2
  404234:	443c      	add	r4, r7
  404236:	e745      	b.n	4040c4 <__udivmoddi4+0x15c>
  404238:	4608      	mov	r0, r1
  40423a:	e708      	b.n	40404e <__udivmoddi4+0xe6>
  40423c:	f1a8 0802 	sub.w	r8, r8, #2
  404240:	443d      	add	r5, r7
  404242:	e72b      	b.n	40409c <__udivmoddi4+0x134>

00404244 <__aeabi_idiv0>:
  404244:	4770      	bx	lr
  404246:	bf00      	nop
  404248:	39384d57 	.word	0x39384d57
  40424c:	6e203430 	.word	0x6e203430
  404250:	6620746f 	.word	0x6620746f
  404254:	646e756f 	.word	0x646e756f
  404258:	000d0a21 	.word	0x000d0a21
  40425c:	092d452d 	.word	0x092d452d
  404260:	39384d57 	.word	0x39384d57
  404264:	69203430 	.word	0x69203430
  404268:	6974696e 	.word	0x6974696e
  40426c:	7a696c61 	.word	0x7a696c61
  404270:	6f697461 	.word	0x6f697461
  404274:	6166206e 	.word	0x6166206e
  404278:	64656c69 	.word	0x64656c69
  40427c:	00000d2e 	.word	0x00000d2e

00404280 <_global_impure_ptr>:
  404280:	20400028 33323130 37363534 42413938     (.@ 0123456789AB
  404290:	46454443 00000000 33323130 37363534     CDEF....01234567
  4042a0:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  4042b0:	0000296c                                l)..

004042b4 <blanks.7217>:
  4042b4:	20202020 20202020 20202020 20202020                     

004042c4 <zeroes.7218>:
  4042c4:	30303030 30303030 30303030 30303030     0000000000000000
  4042d4:	00000043 49534f50 00000058 0000002e     C...POSIX.......

004042e4 <_ctype_>:
  4042e4:	20202000 20202020 28282020 20282828     .         ((((( 
  4042f4:	20202020 20202020 20202020 20202020                     
  404304:	10108820 10101010 10101010 10101010      ...............
  404314:	04040410 04040404 10040404 10101010     ................
  404324:	41411010 41414141 01010101 01010101     ..AAAAAA........
  404334:	01010101 01010101 01010101 10101010     ................
  404344:	42421010 42424242 02020202 02020202     ..BBBBBB........
  404354:	02020202 02020202 02020202 10101010     ................
  404364:	00000020 00000000 00000000 00000000      ...............
	...

004043e8 <_init>:
  4043e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4043ea:	bf00      	nop
  4043ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4043ee:	bc08      	pop	{r3}
  4043f0:	469e      	mov	lr, r3
  4043f2:	4770      	bx	lr

004043f4 <__init_array_start>:
  4043f4:	004023f1 	.word	0x004023f1

004043f8 <__frame_dummy_init_array_entry>:
  4043f8:	00400165                                e.@.

004043fc <_fini>:
  4043fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4043fe:	bf00      	nop
  404400:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404402:	bc08      	pop	{r3}
  404404:	469e      	mov	lr, r3
  404406:	4770      	bx	lr

00404408 <__fini_array_start>:
  404408:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <inBuffer>:
2040000c:	09f0 2040                                   ..@ 

20400010 <inPingMode>:
20400010:	0001 0000                                   ....

20400014 <outBuffer>:
20400014:	1230 2040                                   0.@ 

20400018 <outPingMode>:
20400018:	0001 0000                                   ....

2040001c <g_interrupt_enabled>:
2040001c:	0001 0000                                   ....

20400020 <SystemCoreClock>:
20400020:	0900 003d                                   ..=.

20400024 <_impure_ptr>:
20400024:	0028 2040                                   (.@ 

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__atexit_recursive_mutex>:
20400450:	1ae4 2040                                   ..@ 

20400454 <__global_locale>:
20400454:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400474:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400494:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400514:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400534:	3ca1 0040 33d9 0040 0000 0000 42e4 0040     .<@..3@......B@.
20400544:	42e0 0040 4294 0040 4294 0040 4294 0040     .B@..B@..B@..B@.
20400554:	4294 0040 4294 0040 4294 0040 4294 0040     .B@..B@..B@..B@.
20400564:	4294 0040 4294 0040 ffff ffff ffff ffff     .B@..B@.........
20400574:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040059c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005c0 <__malloc_av_>:
	...
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 
204008d8:	08d0 2040 08d0 2040 08d8 2040 08d8 2040     ..@ ..@ ..@ ..@ 
204008e8:	08e0 2040 08e0 2040 08e8 2040 08e8 2040     ..@ ..@ ..@ ..@ 
204008f8:	08f0 2040 08f0 2040 08f8 2040 08f8 2040     ..@ ..@ ..@ ..@ 
20400908:	0900 2040 0900 2040 0908 2040 0908 2040     ..@ ..@ ..@ ..@ 
20400918:	0910 2040 0910 2040 0918 2040 0918 2040     ..@ ..@ ..@ ..@ 
20400928:	0920 2040 0920 2040 0928 2040 0928 2040      .@  .@ (.@ (.@ 
20400938:	0930 2040 0930 2040 0938 2040 0938 2040     0.@ 0.@ 8.@ 8.@ 
20400948:	0940 2040 0940 2040 0948 2040 0948 2040     @.@ @.@ H.@ H.@ 
20400958:	0950 2040 0950 2040 0958 2040 0958 2040     P.@ P.@ X.@ X.@ 
20400968:	0960 2040 0960 2040 0968 2040 0968 2040     `.@ `.@ h.@ h.@ 
20400978:	0970 2040 0970 2040 0978 2040 0978 2040     p.@ p.@ x.@ x.@ 
20400988:	0980 2040 0980 2040 0988 2040 0988 2040     ..@ ..@ ..@ ..@ 
20400998:	0990 2040 0990 2040 0998 2040 0998 2040     ..@ ..@ ..@ ..@ 
204009a8:	09a0 2040 09a0 2040 09a8 2040 09a8 2040     ..@ ..@ ..@ ..@ 
204009b8:	09b0 2040 09b0 2040 09b8 2040 09b8 2040     ..@ ..@ ..@ ..@ 

204009c8 <__malloc_sbrk_base>:
204009c8:	ffff ffff                                   ....

204009cc <__malloc_trim_threshold>:
204009cc:	0000 0002                                   ....
