
SoundInSoundOut.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000460c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040460c  0040460c  0001460c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  00404614  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001550  204009c0  00404fd4  000209c0  2**2
                  ALLOC
  4 .stack        00002000  20401f10  00406524  000209c0  2**0
                  ALLOC
  5 .heap         00000200  20403f10  00408524  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   000179dd  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000033c1  00000000  00000000  00038424  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000045cb  00000000  00000000  0003b7e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000008c8  00000000  00000000  0003fdb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008d0  00000000  00000000  00040678  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00022a5d  00000000  00000000  00040f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000e07a  00000000  00000000  000639a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000935c9  00000000  00000000  00071a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001e94  00000000  00000000  00104fe8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	10 3f 40 20 9d 10 40 00 99 10 40 00 99 10 40 00     .?@ ..@...@...@.
  400010:	99 10 40 00 99 10 40 00 99 10 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	99 10 40 00 99 10 40 00 00 00 00 00 99 10 40 00     ..@...@.......@.
  40003c:	99 10 40 00 99 10 40 00 99 10 40 00 99 10 40 00     ..@...@...@...@.
  40004c:	99 10 40 00 99 10 40 00 99 10 40 00 99 10 40 00     ..@...@...@...@.
  40005c:	99 10 40 00 99 10 40 00 00 00 00 00 cd 0a 40 00     ..@...@.......@.
  40006c:	e1 0a 40 00 f5 0a 40 00 99 10 40 00 99 10 40 00     ..@...@...@...@.
  40007c:	99 10 40 00 09 0b 40 00 1d 0b 40 00 99 10 40 00     ..@...@...@...@.
  40008c:	99 10 40 00 99 10 40 00 99 10 40 00 99 10 40 00     ..@...@...@...@.
  40009c:	99 10 40 00 99 10 40 00 99 10 40 00 99 10 40 00     ..@...@...@...@.
  4000ac:	99 10 40 00 99 10 40 00 99 10 40 00 99 10 40 00     ..@...@...@...@.
  4000bc:	99 10 40 00 99 10 40 00 99 10 40 00 99 10 40 00     ..@...@...@...@.
  4000cc:	99 10 40 00 00 00 00 00 99 10 40 00 00 00 00 00     ..@.......@.....
  4000dc:	99 10 40 00 99 10 40 00 99 10 40 00 99 10 40 00     ..@...@...@...@.
  4000ec:	99 10 40 00 99 10 40 00 99 10 40 00 99 10 40 00     ..@...@...@...@.
  4000fc:	99 10 40 00 99 10 40 00 99 10 40 00 99 10 40 00     ..@...@...@...@.
  40010c:	99 10 40 00 99 10 40 00 99 10 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 99 10 40 00 99 10 40 00 b5 13 40 00     ......@...@...@.
  40012c:	99 10 40 00 99 10 40 00 00 00 00 00 99 10 40 00     ..@...@.......@.
  40013c:	99 10 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009c0 	.word	0x204009c0
  40015c:	00000000 	.word	0x00000000
  400160:	00404614 	.word	0x00404614

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00404614 	.word	0x00404614
  4001a0:	204009c4 	.word	0x204009c4
  4001a4:	00404614 	.word	0x00404614
  4001a8:	00000000 	.word	0x00000000

004001ac <configure_xdma>:
}
*/ 

/********************************** Public Functions **********************************/
void configure_xdma(void)
{
  4001ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001b0:	b088      	sub	sp, #32
    uint16_t *src;
    
    xdmac_channel_config_t xdmac_channel_cfg = {0};
  4001b2:	2420      	movs	r4, #32
  4001b4:	4622      	mov	r2, r4
  4001b6:	2100      	movs	r1, #0
  4001b8:	4668      	mov	r0, sp
  4001ba:	4b28      	ldr	r3, [pc, #160]	; (40025c <configure_xdma+0xb0>)
  4001bc:	4798      	blx	r3
    
    /* Initialize and enable DMA controller */
    pmc_enable_periph_clk(ID_XDMAC);
  4001be:	203a      	movs	r0, #58	; 0x3a
  4001c0:	4b27      	ldr	r3, [pc, #156]	; (400260 <configure_xdma+0xb4>)
  4001c2:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4001c4:	4b27      	ldr	r3, [pc, #156]	; (400264 <configure_xdma+0xb8>)
  4001c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4001ca:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4001ce:	f883 433a 	strb.w	r4, [r3, #826]	; 0x33a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4001d2:	605a      	str	r2, [r3, #4]
    NVIC_SetPriority(XDMAC_IRQn ,1);
    NVIC_EnableIRQ(XDMAC_IRQn);
    
    /********** Read Buffer ********/
    /* Initialize channel config */
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4001d4:	4b24      	ldr	r3, [pc, #144]	; (400268 <configure_xdma+0xbc>)
  4001d6:	9303      	str	r3, [sp, #12]
    | XDMAC_CC_SIF_AHB_IF1
    | XDMAC_CC_DIF_AHB_IF1
    | XDMAC_CC_SAM_FIXED_AM
    | XDMAC_CC_DAM_INCREMENTED_AM
    | XDMAC_CC_PERID(33);
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  4001d8:	4c24      	ldr	r4, [pc, #144]	; (40026c <configure_xdma+0xc0>)
  4001da:	466a      	mov	r2, sp
  4001dc:	2100      	movs	r1, #0
  4001de:	4620      	mov	r0, r4
  4001e0:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 400290 <configure_xdma+0xe4>
  4001e4:	47c0      	blx	r8
    
    /* Initialize linked list descriptor */
    src = (uint16_t *)&ReadBuffer[0];
    linklist_read[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4001e6:	4b22      	ldr	r3, [pc, #136]	; (400270 <configure_xdma+0xc4>)
  4001e8:	4f22      	ldr	r7, [pc, #136]	; (400274 <configure_xdma+0xc8>)
  4001ea:	605f      	str	r7, [r3, #4]
		| XDMAC_UBC_NDE_FETCH_EN
		| XDMAC_UBC_NSEN_UPDATED
		| XDMAC_CUBC_UBLEN(MICROBLOCK_LEN);
    linklist_read[0].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  4001ec:	4922      	ldr	r1, [pc, #136]	; (400278 <configure_xdma+0xcc>)
  4001ee:	6099      	str	r1, [r3, #8]
    linklist_read[0].mbr_da = (uint32_t)(src);
  4001f0:	4a22      	ldr	r2, [pc, #136]	; (40027c <configure_xdma+0xd0>)
  4001f2:	60da      	str	r2, [r3, #12]
    linklist_read[0].mbr_nda = (uint32_t)&linklist_read[1];
  4001f4:	f103 0010 	add.w	r0, r3, #16
  4001f8:	6018      	str	r0, [r3, #0]
	src += MICROBLOCK_LEN; 
	linklist_read[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  4001fa:	615f      	str	r7, [r3, #20]
	    | XDMAC_UBC_NDE_FETCH_EN
	    | XDMAC_UBC_NSEN_UPDATED
	    | XDMAC_CUBC_UBLEN(MICROBLOCK_LEN);
	linklist_read[1].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  4001fc:	6199      	str	r1, [r3, #24]
	linklist_read[1].mbr_da = (uint32_t)(src);
  4001fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  400202:	61da      	str	r2, [r3, #28]
	linklist_read[1].mbr_nda = (uint32_t)&linklist_read[0];
  400204:	611b      	str	r3, [r3, #16]
 */
static inline void xdmac_channel_set_descriptor_control(Xdmac *xdmac, uint32_t channel_num, uint32_t config)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  400206:	260f      	movs	r6, #15
  400208:	66e6      	str	r6, [r4, #108]	; 0x6c
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  40020a:	f023 0303 	bic.w	r3, r3, #3
  40020e:	66a3      	str	r3, [r4, #104]	; 0x68
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  400210:	2501      	movs	r5, #1
  400212:	60e5      	str	r5, [r4, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CIE = mask;
  400214:	6525      	str	r5, [r4, #80]	; 0x50
    xdmac_enable_interrupt(XDMAC, XDMA_CH_SSC_RX);
    xdmac_channel_enable_interrupt(XDMAC, XDMA_CH_SSC_RX, XDMAC_CIE_BIE);
    
    
    /******* Write buffer *******/
    xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  400216:	4b1a      	ldr	r3, [pc, #104]	; (400280 <configure_xdma+0xd4>)
  400218:	9303      	str	r3, [sp, #12]
    | XDMAC_CC_SIF_AHB_IF1
    | XDMAC_CC_DIF_AHB_IF1
    | XDMAC_CC_SAM_INCREMENTED_AM
    | XDMAC_CC_DAM_FIXED_AM
    | XDMAC_CC_PERID(32);
    xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  40021a:	466a      	mov	r2, sp
  40021c:	4629      	mov	r1, r5
  40021e:	4620      	mov	r0, r4
  400220:	47c0      	blx	r8
    
    src = (uint16_t *)&WriteBuffer[0];
    linklist_write[0].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  400222:	4b18      	ldr	r3, [pc, #96]	; (400284 <configure_xdma+0xd8>)
  400224:	605f      	str	r7, [r3, #4]
		 | XDMAC_UBC_NDE_FETCH_EN
		 | XDMAC_UBC_NSEN_UPDATED
			| XDMAC_CUBC_UBLEN(MICROBLOCK_LEN);
    linklist_write[0].mbr_sa = (uint32_t)(src);
  400226:	4a18      	ldr	r2, [pc, #96]	; (400288 <configure_xdma+0xdc>)
  400228:	609a      	str	r2, [r3, #8]
    linklist_write[0].mbr_da = (uint32_t)&(SSC->SSC_THR);
  40022a:	4918      	ldr	r1, [pc, #96]	; (40028c <configure_xdma+0xe0>)
  40022c:	60d9      	str	r1, [r3, #12]
    linklist_write[0].mbr_nda = (uint32_t)&linklist_write[1];
  40022e:	f103 0010 	add.w	r0, r3, #16
  400232:	6018      	str	r0, [r3, #0]
	
	src += MICROBLOCK_LEN;
	linklist_write[1].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  400234:	615f      	str	r7, [r3, #20]
	    | XDMAC_UBC_NDE_FETCH_EN
	    | XDMAC_UBC_NSEN_UPDATED
	    | XDMAC_CUBC_UBLEN(MICROBLOCK_LEN);
	linklist_write[1].mbr_sa = (uint32_t)(src);
  400236:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  40023a:	619a      	str	r2, [r3, #24]
	linklist_write[1].mbr_da = (uint32_t)&(SSC->SSC_THR);
  40023c:	61d9      	str	r1, [r3, #28]
	linklist_write[1].mbr_nda = (uint32_t)&linklist_write[0];
  40023e:	611b      	str	r3, [r3, #16]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  400240:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  400244:	f023 0303 	bic.w	r3, r3, #3
  400248:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  40024c:	2302      	movs	r3, #2
  40024e:	60e3      	str	r3, [r4, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CIE = mask;
  400250:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
    xdmac_channel_set_descriptor_addr(XDMAC, XDMA_CH_SSC_TX, (uint32_t)(&linklist_write[0]), 0);
    
    xdmac_enable_interrupt(XDMAC, XDMA_CH_SSC_TX);
    xdmac_channel_enable_interrupt(XDMAC, XDMA_CH_SSC_TX, XDMAC_CIE_BIE);
    
}
  400254:	b008      	add	sp, #32
  400256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40025a:	bf00      	nop
  40025c:	004016fd 	.word	0x004016fd
  400260:	00400c51 	.word	0x00400c51
  400264:	e000e100 	.word	0xe000e100
  400268:	21046801 	.word	0x21046801
  40026c:	40078000 	.word	0x40078000
  400270:	204009dc 	.word	0x204009dc
  400274:	0b000200 	.word	0x0b000200
  400278:	40004020 	.word	0x40004020
  40027c:	204012d0 	.word	0x204012d0
  400280:	20016811 	.word	0x20016811
  400284:	204009fc 	.word	0x204009fc
  400288:	20400ad0 	.word	0x20400ad0
  40028c:	40004024 	.word	0x40004024
  400290:	0040105d 	.word	0x0040105d

00400294 <configure_ssc>:

#include <asf.h>
#include "WM8904_Driver.h"

void configure_ssc(void)
{
  400294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400298:	b09c      	sub	sp, #112	; 0x70
	clock_opt_t tx_clk_option, rx_clk_option;
	data_frame_opt_t tx_data_frame_option, rx_data_frame_option;

	/* Initialize clock */
	pmc_enable_periph_clk(ID_SSC);
  40029a:	2016      	movs	r0, #22
  40029c:	4b25      	ldr	r3, [pc, #148]	; (400334 <configure_ssc+0xa0>)
  40029e:	4798      	blx	r3

	/* Reset SSC */
	ssc_reset(SSC);
  4002a0:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4002a4:	4b24      	ldr	r3, [pc, #144]	; (400338 <configure_ssc+0xa4>)
  4002a6:	4798      	blx	r3

	/* Transmitter clock mode configuration. */
	tx_clk_option.ul_cks = SSC_TCMR_CKS_TK;
  4002a8:	2302      	movs	r3, #2
  4002aa:	9315      	str	r3, [sp, #84]	; 0x54
	tx_clk_option.ul_cko = SSC_TCMR_CKO_NONE;
  4002ac:	2400      	movs	r4, #0
  4002ae:	9416      	str	r4, [sp, #88]	; 0x58
	tx_clk_option.ul_cki = 0;
  4002b0:	9417      	str	r4, [sp, #92]	; 0x5c
	tx_clk_option.ul_ckg = SSC_TCMR_CKG_CONTINUOUS;
  4002b2:	9418      	str	r4, [sp, #96]	; 0x60
	tx_clk_option.ul_start_sel = SSC_TCMR_START_TF_EDGE;
  4002b4:	f44f 68e0 	mov.w	r8, #1792	; 0x700
  4002b8:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
	tx_clk_option.ul_sttdly = SSC_TCMR_STTDLY(1);
  4002bc:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  4002c0:	971a      	str	r7, [sp, #104]	; 0x68
	tx_clk_option.ul_period = SSC_TCMR_PERIOD(0);
  4002c2:	9419      	str	r4, [sp, #100]	; 0x64
	/* Transmitter frame mode configuration. */
	tx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
  4002c4:	260f      	movs	r6, #15
  4002c6:	9607      	str	r6, [sp, #28]
	tx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  4002c8:	2580      	movs	r5, #128	; 0x80
  4002ca:	9508      	str	r5, [sp, #32]
	tx_data_frame_option.ul_datnb = 0;
  4002cc:	9409      	str	r4, [sp, #36]	; 0x24
	tx_data_frame_option.ul_fslen = SLOT_BY_FRAME - 1;
  4002ce:	940a      	str	r4, [sp, #40]	; 0x28
	tx_data_frame_option.ul_fslen_ext = 0;
  4002d0:	940b      	str	r4, [sp, #44]	; 0x2c
	tx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  4002d2:	940c      	str	r4, [sp, #48]	; 0x30
	tx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  4002d4:	940d      	str	r4, [sp, #52]	; 0x34
	/* Configure the SSC transmitter to I2S mode. */
	ssc_set_transmitter(SSC, &tx_clk_option, &tx_data_frame_option);
  4002d6:	aa07      	add	r2, sp, #28
  4002d8:	a915      	add	r1, sp, #84	; 0x54
  4002da:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4002de:	4b17      	ldr	r3, [pc, #92]	; (40033c <configure_ssc+0xa8>)
  4002e0:	4798      	blx	r3

	/* Receiver clock mode configuration. */
	rx_clk_option.ul_cks = SSC_RCMR_CKS_TK;
  4002e2:	2301      	movs	r3, #1
  4002e4:	930e      	str	r3, [sp, #56]	; 0x38
	rx_clk_option.ul_cko = SSC_RCMR_CKO_NONE;
  4002e6:	940f      	str	r4, [sp, #60]	; 0x3c
	rx_clk_option.ul_cki = SSC_RCMR_CKI;
  4002e8:	2320      	movs	r3, #32
  4002ea:	9310      	str	r3, [sp, #64]	; 0x40
	rx_clk_option.ul_ckg = SSC_RCMR_CKG_CONTINUOUS;
  4002ec:	9411      	str	r4, [sp, #68]	; 0x44
	rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_EDGE;
  4002ee:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
	rx_clk_option.ul_sttdly = SSC_RCMR_STTDLY(1);
  4002f2:	9713      	str	r7, [sp, #76]	; 0x4c
	rx_clk_option.ul_period = SSC_RCMR_PERIOD(0);
  4002f4:	9412      	str	r4, [sp, #72]	; 0x48
	/* Receiver frame mode configuration. */
	rx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
  4002f6:	9600      	str	r6, [sp, #0]
	rx_data_frame_option.ul_msbf = SSC_RFMR_MSBF;
  4002f8:	9501      	str	r5, [sp, #4]
	rx_data_frame_option.ul_datnb = 0;
  4002fa:	9402      	str	r4, [sp, #8]
	rx_data_frame_option.ul_fslen = SLOT_BY_FRAME - 1;
  4002fc:	9403      	str	r4, [sp, #12]
	rx_data_frame_option.ul_fslen_ext = 0;
  4002fe:	9404      	str	r4, [sp, #16]
	rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  400300:	9405      	str	r4, [sp, #20]
	rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  400302:	9406      	str	r4, [sp, #24]
	/* Configure the SSC transmitter to I2S mode. */
	ssc_set_receiver(SSC, &rx_clk_option, &rx_data_frame_option);
  400304:	466a      	mov	r2, sp
  400306:	a90e      	add	r1, sp, #56	; 0x38
  400308:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40030c:	4b0c      	ldr	r3, [pc, #48]	; (400340 <configure_ssc+0xac>)
  40030e:	4798      	blx	r3

	/* Disable transmitter first */
	ssc_disable_tx(SSC);
  400310:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400314:	4b0b      	ldr	r3, [pc, #44]	; (400344 <configure_ssc+0xb0>)
  400316:	4798      	blx	r3
	ssc_disable_rx(SSC);
  400318:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40031c:	4b0a      	ldr	r3, [pc, #40]	; (400348 <configure_ssc+0xb4>)
  40031e:	4798      	blx	r3

	/* Disable All Interrupt */
	ssc_disable_interrupt(SSC, 0xFFFFFFFF);
  400320:	f04f 31ff 	mov.w	r1, #4294967295
  400324:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400328:	4b08      	ldr	r3, [pc, #32]	; (40034c <configure_ssc+0xb8>)
  40032a:	4798      	blx	r3
}
  40032c:	b01c      	add	sp, #112	; 0x70
  40032e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400332:	bf00      	nop
  400334:	00400c51 	.word	0x00400c51
  400338:	00400d11 	.word	0x00400d11
  40033c:	00400db5 	.word	0x00400db5
  400340:	00400d41 	.word	0x00400d41
  400344:	00400d39 	.word	0x00400d39
  400348:	00400d2b 	.word	0x00400d2b
  40034c:	00400e29 	.word	0x00400e29

00400350 <configure_codec>:


void configure_codec(void)
{
  400350:	b570      	push	{r4, r5, r6, lr}
	uint16_t data = 0;
	/* check that WM8904 is present */
	wm8904_write_register(WM8904_SW_RESET_AND_ID, 0xFFFF);
  400352:	f64f 71ff 	movw	r1, #65535	; 0xffff
  400356:	2000      	movs	r0, #0
  400358:	4b40      	ldr	r3, [pc, #256]	; (40045c <configure_codec+0x10c>)
  40035a:	4798      	blx	r3
	data = wm8904_read_register(WM8904_SW_RESET_AND_ID);
  40035c:	2000      	movs	r0, #0
  40035e:	4b40      	ldr	r3, [pc, #256]	; (400460 <configure_codec+0x110>)
  400360:	4798      	blx	r3
	if(data != 0x8904) {
  400362:	f648 1304 	movw	r3, #35076	; 0x8904
  400366:	4298      	cmp	r0, r3
  400368:	d003      	beq.n	400372 <configure_codec+0x22>
		printf("WM8904 not found!\n\r");
  40036a:	483e      	ldr	r0, [pc, #248]	; (400464 <configure_codec+0x114>)
  40036c:	4b3e      	ldr	r3, [pc, #248]	; (400468 <configure_codec+0x118>)
  40036e:	4798      	blx	r3
  400370:	e7fe      	b.n	400370 <configure_codec+0x20>
		while(1);
	}

	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS);
  400372:	2108      	movs	r1, #8
  400374:	2004      	movs	r0, #4
  400376:	4c39      	ldr	r4, [pc, #228]	; (40045c <configure_codec+0x10c>)
  400378:	47a0      	blx	r4
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |
  40037a:	2147      	movs	r1, #71	; 0x47
  40037c:	2005      	movs	r0, #5
  40037e:	47a0      	blx	r4
	WM8904_VMID_RES_FAST | WM8904_VMID_ENA);
	delay_ms(5);
  400380:	4e3a      	ldr	r6, [pc, #232]	; (40046c <configure_codec+0x11c>)
  400382:	4630      	mov	r0, r6
  400384:	4d3a      	ldr	r5, [pc, #232]	; (400470 <configure_codec+0x120>)
  400386:	47a8      	blx	r5
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |
  400388:	2143      	movs	r1, #67	; 0x43
  40038a:	2005      	movs	r0, #5
  40038c:	47a0      	blx	r4
	WM8904_VMID_RES_NORMAL | WM8904_VMID_ENA);
	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS | WM8904_BIAS_ENA);
  40038e:	2109      	movs	r1, #9
  400390:	2004      	movs	r0, #4
  400392:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_0, WM8904_INL_ENA | WM8904_INR_ENA);
  400394:	2103      	movs	r1, #3
  400396:	200c      	movs	r0, #12
  400398:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_2, WM8904_HPL_PGA_ENA | WM8904_HPR_PGA_ENA);
  40039a:	2103      	movs	r1, #3
  40039c:	200e      	movs	r0, #14
  40039e:	47a0      	blx	r4
	wm8904_write_register(WM8904_DAC_DIGITAL_1, WM8904_DEEMPH(0));
  4003a0:	2100      	movs	r1, #0
  4003a2:	2021      	movs	r0, #33	; 0x21
  4003a4:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_OUT12_ZC, 0x0000);
  4003a6:	2100      	movs	r1, #0
  4003a8:	203d      	movs	r0, #61	; 0x3d
  4003aa:	47a0      	blx	r4
	wm8904_write_register(WM8904_CHARGE_PUMP_0, WM8904_CP_ENA);
  4003ac:	2101      	movs	r1, #1
  4003ae:	2062      	movs	r0, #98	; 0x62
  4003b0:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLASS_W_0, WM8904_CP_DYN_PWR);
  4003b2:	2101      	movs	r1, #1
  4003b4:	2068      	movs	r0, #104	; 0x68
  4003b6:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_1, 0x0000);
  4003b8:	2100      	movs	r1, #0
  4003ba:	2074      	movs	r0, #116	; 0x74
  4003bc:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_2, WM8904_FLL_OUTDIV(7)| WM8904_FLL_FRATIO(4));
  4003be:	f240 7104 	movw	r1, #1796	; 0x704
  4003c2:	2075      	movs	r0, #117	; 0x75
  4003c4:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_3, WM8904_FLL_K(0x8000));
  4003c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  4003ca:	2076      	movs	r0, #118	; 0x76
  4003cc:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_4, WM8904_FLL_N(0xBB));
  4003ce:	f44f 51bb 	mov.w	r1, #5984	; 0x1760
  4003d2:	2077      	movs	r0, #119	; 0x77
  4003d4:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_1, WM8904_FLL_FRACN_ENA | WM8904_FLL_ENA);
  4003d6:	2105      	movs	r1, #5
  4003d8:	2074      	movs	r0, #116	; 0x74
  4003da:	47a0      	blx	r4
	delay_ms(5);
  4003dc:	4630      	mov	r0, r6
  4003de:	47a8      	blx	r5
	wm8904_write_register(WM8904_CLOCK_RATES_1, WM8904_CLK_SYS_RATE(3) | WM8904_SAMPLE_RATE(5));
  4003e0:	f640 4105 	movw	r1, #3077	; 0xc05
  4003e4:	2015      	movs	r0, #21
  4003e6:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLOCK_RATES_0, 0x0000);
  4003e8:	2100      	movs	r1, #0
  4003ea:	2014      	movs	r0, #20
  4003ec:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLOCK_RATES_2,
  4003ee:	f244 0106 	movw	r1, #16390	; 0x4006
  4003f2:	2016      	movs	r0, #22
  4003f4:	47a0      	blx	r4
	WM8904_SYSCLK_SRC | WM8904_CLK_SYS_ENA | WM8904_CLK_DSP_ENA);
	wm8904_write_register(WM8904_AUDIO_INTERFACE_1, WM8904_BCLK_DIR | WM8904_AIF_FMT_I2S);
  4003f6:	2142      	movs	r1, #66	; 0x42
  4003f8:	2019      	movs	r0, #25
  4003fa:	47a0      	blx	r4
	wm8904_write_register(WM8904_AUDIO_INTERFACE_2, WM8904_BCLK_DIV(8));
  4003fc:	2108      	movs	r1, #8
  4003fe:	201a      	movs	r0, #26
  400400:	47a0      	blx	r4
	wm8904_write_register(WM8904_AUDIO_INTERFACE_3, WM8904_LRCLK_DIR | WM8904_LRCLK_RATE(0x20));
  400402:	f44f 6102 	mov.w	r1, #2080	; 0x820
  400406:	201b      	movs	r0, #27
  400408:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_6,
  40040a:	210f      	movs	r1, #15
  40040c:	2012      	movs	r0, #18
  40040e:	47a0      	blx	r4
	WM8904_DACL_ENA | WM8904_DACR_ENA |
	WM8904_ADCL_ENA | WM8904_ADCR_ENA);
	delay_ms(5);
  400410:	4630      	mov	r0, r6
  400412:	47a8      	blx	r5
	wm8904_write_register(WM8904_ANALOGUE_LEFT_INPUT_0, WM8904_LIN_VOL(0x10));
  400414:	2110      	movs	r1, #16
  400416:	202c      	movs	r0, #44	; 0x2c
  400418:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_RIGHT_INPUT_0, WM8904_RIN_VOL(0x10));
  40041a:	2110      	movs	r1, #16
  40041c:	202d      	movs	r0, #45	; 0x2d
  40041e:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  400420:	2111      	movs	r1, #17
  400422:	205a      	movs	r0, #90	; 0x5a
  400424:	47a0      	blx	r4
	WM8904_HPL_ENA | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  400426:	2133      	movs	r1, #51	; 0x33
  400428:	205a      	movs	r0, #90	; 0x5a
  40042a:	47a0      	blx	r4
	WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_DC_SERVO_0,
  40042c:	210f      	movs	r1, #15
  40042e:	2043      	movs	r0, #67	; 0x43
  400430:	47a0      	blx	r4
	WM8904_DCS_ENA_CHAN_3 | WM8904_DCS_ENA_CHAN_2 |
	WM8904_DCS_ENA_CHAN_1 | WM8904_DCS_ENA_CHAN_0);
	wm8904_write_register(WM8904_DC_SERVO_1,
  400432:	21f0      	movs	r1, #240	; 0xf0
  400434:	2044      	movs	r0, #68	; 0x44
  400436:	47a0      	blx	r4
	WM8904_DCS_TRIG_STARTUP_3 | WM8904_DCS_TRIG_STARTUP_2 |
	WM8904_DCS_TRIG_STARTUP_1 | WM8904_DCS_TRIG_STARTUP_0);
	delay_ms(100);
  400438:	4e0e      	ldr	r6, [pc, #56]	; (400474 <configure_codec+0x124>)
  40043a:	4630      	mov	r0, r6
  40043c:	47a8      	blx	r5
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  40043e:	2177      	movs	r1, #119	; 0x77
  400440:	205a      	movs	r0, #90	; 0x5a
  400442:	47a0      	blx	r4
	WM8904_HPL_ENA_OUTP | WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_ENA_OUTP | WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  400444:	21ff      	movs	r1, #255	; 0xff
  400446:	205a      	movs	r0, #90	; 0x5a
  400448:	47a0      	blx	r4
	WM8904_HPL_RMV_SHORT | WM8904_HPL_ENA_OUTP | WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_RMV_SHORT | WM8904_HPR_ENA_OUTP | WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_OUT1_LEFT, WM8904_HPOUT_VU | WM8904_HPOUTL_VOL(0x39));
  40044a:	21b9      	movs	r1, #185	; 0xb9
  40044c:	2039      	movs	r0, #57	; 0x39
  40044e:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_OUT1_RIGHT, WM8904_HPOUT_VU | WM8904_HPOUTR_VOL(0x39));
  400450:	21b9      	movs	r1, #185	; 0xb9
  400452:	203a      	movs	r0, #58	; 0x3a
  400454:	47a0      	blx	r4
	delay_ms(100);
  400456:	4630      	mov	r0, r6
  400458:	47a8      	blx	r5
  40045a:	bd70      	pop	{r4, r5, r6, pc}
  40045c:	0040075d 	.word	0x0040075d
  400460:	00400799 	.word	0x00400799
  400464:	00404448 	.word	0x00404448
  400468:	004016d5 	.word	0x004016d5
  40046c:	0001ede1 	.word	0x0001ede1
  400470:	20400001 	.word	0x20400001
  400474:	00269593 	.word	0x00269593

00400478 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400478:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40047a:	4810      	ldr	r0, [pc, #64]	; (4004bc <sysclk_init+0x44>)
  40047c:	4b10      	ldr	r3, [pc, #64]	; (4004c0 <sysclk_init+0x48>)
  40047e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400480:	213e      	movs	r1, #62	; 0x3e
  400482:	2000      	movs	r0, #0
  400484:	4b0f      	ldr	r3, [pc, #60]	; (4004c4 <sysclk_init+0x4c>)
  400486:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400488:	4c0f      	ldr	r4, [pc, #60]	; (4004c8 <sysclk_init+0x50>)
  40048a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40048c:	2800      	cmp	r0, #0
  40048e:	d0fc      	beq.n	40048a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400490:	4b0e      	ldr	r3, [pc, #56]	; (4004cc <sysclk_init+0x54>)
  400492:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400494:	4a0e      	ldr	r2, [pc, #56]	; (4004d0 <sysclk_init+0x58>)
  400496:	4b0f      	ldr	r3, [pc, #60]	; (4004d4 <sysclk_init+0x5c>)
  400498:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40049a:	4c0f      	ldr	r4, [pc, #60]	; (4004d8 <sysclk_init+0x60>)
  40049c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40049e:	2800      	cmp	r0, #0
  4004a0:	d0fc      	beq.n	40049c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4004a2:	2002      	movs	r0, #2
  4004a4:	4b0d      	ldr	r3, [pc, #52]	; (4004dc <sysclk_init+0x64>)
  4004a6:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004a8:	2010      	movs	r0, #16
  4004aa:	4b0d      	ldr	r3, [pc, #52]	; (4004e0 <sysclk_init+0x68>)
  4004ac:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004ae:	4b0d      	ldr	r3, [pc, #52]	; (4004e4 <sysclk_init+0x6c>)
  4004b0:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004b2:	480d      	ldr	r0, [pc, #52]	; (4004e8 <sysclk_init+0x70>)
  4004b4:	4b02      	ldr	r3, [pc, #8]	; (4004c0 <sysclk_init+0x48>)
  4004b6:	4798      	blx	r3
  4004b8:	bd10      	pop	{r4, pc}
  4004ba:	bf00      	nop
  4004bc:	11e1a300 	.word	0x11e1a300
  4004c0:	00401271 	.word	0x00401271
  4004c4:	00400bcd 	.word	0x00400bcd
  4004c8:	00400c21 	.word	0x00400c21
  4004cc:	00400c31 	.word	0x00400c31
  4004d0:	20183f01 	.word	0x20183f01
  4004d4:	400e0600 	.word	0x400e0600
  4004d8:	00400c41 	.word	0x00400c41
  4004dc:	00400b31 	.word	0x00400b31
  4004e0:	00400b69 	.word	0x00400b69
  4004e4:	00401165 	.word	0x00401165
  4004e8:	08f0d180 	.word	0x08f0d180

004004ec <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4004ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4004f0:	b980      	cbnz	r0, 400514 <_read+0x28>
  4004f2:	460c      	mov	r4, r1
  4004f4:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4004f6:	2a00      	cmp	r2, #0
  4004f8:	dd0f      	ble.n	40051a <_read+0x2e>
  4004fa:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4004fc:	4e08      	ldr	r6, [pc, #32]	; (400520 <_read+0x34>)
  4004fe:	4d09      	ldr	r5, [pc, #36]	; (400524 <_read+0x38>)
  400500:	6830      	ldr	r0, [r6, #0]
  400502:	4621      	mov	r1, r4
  400504:	682b      	ldr	r3, [r5, #0]
  400506:	4798      	blx	r3
		ptr++;
  400508:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  40050a:	42bc      	cmp	r4, r7
  40050c:	d1f8      	bne.n	400500 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40050e:	4640      	mov	r0, r8
  400510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400514:	f04f 38ff 	mov.w	r8, #4294967295
  400518:	e7f9      	b.n	40050e <_read+0x22>
	for (; len > 0; --len) {
  40051a:	4680      	mov	r8, r0
  40051c:	e7f7      	b.n	40050e <_read+0x22>
  40051e:	bf00      	nop
  400520:	20401ed8 	.word	0x20401ed8
  400524:	20401ed0 	.word	0x20401ed0

00400528 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400528:	3801      	subs	r0, #1
  40052a:	2802      	cmp	r0, #2
  40052c:	d815      	bhi.n	40055a <_write+0x32>
{
  40052e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400532:	460e      	mov	r6, r1
  400534:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400536:	b19a      	cbz	r2, 400560 <_write+0x38>
  400538:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40053a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400574 <_write+0x4c>
  40053e:	4f0c      	ldr	r7, [pc, #48]	; (400570 <_write+0x48>)
  400540:	f8d8 0000 	ldr.w	r0, [r8]
  400544:	f815 1b01 	ldrb.w	r1, [r5], #1
  400548:	683b      	ldr	r3, [r7, #0]
  40054a:	4798      	blx	r3
  40054c:	2800      	cmp	r0, #0
  40054e:	db0a      	blt.n	400566 <_write+0x3e>
  400550:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400552:	3c01      	subs	r4, #1
  400554:	d1f4      	bne.n	400540 <_write+0x18>
  400556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40055a:	f04f 30ff 	mov.w	r0, #4294967295
  40055e:	4770      	bx	lr
	for (; len != 0; --len) {
  400560:	4610      	mov	r0, r2
  400562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400566:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40056a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40056e:	bf00      	nop
  400570:	20401ed4 	.word	0x20401ed4
  400574:	20401ed8 	.word	0x20401ed8

00400578 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40057a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40057e:	4b6f      	ldr	r3, [pc, #444]	; (40073c <board_init+0x1c4>)
  400580:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400582:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400586:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  40058a:	4b6d      	ldr	r3, [pc, #436]	; (400740 <board_init+0x1c8>)
  40058c:	2200      	movs	r2, #0
  40058e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400592:	695a      	ldr	r2, [r3, #20]
  400594:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400598:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  40059a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40059e:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4005a2:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4005a6:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4005aa:	f007 0007 	and.w	r0, r7, #7
  4005ae:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4005b0:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4005b4:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4005b8:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4005bc:	f3bf 8f4f 	dsb	sy
  4005c0:	f04f 34ff 	mov.w	r4, #4294967295
  4005c4:	fa04 fc00 	lsl.w	ip, r4, r0
  4005c8:	fa06 f000 	lsl.w	r0, r6, r0
  4005cc:	fa04 f40e 	lsl.w	r4, r4, lr
  4005d0:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  4005d4:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  4005d6:	463a      	mov	r2, r7
  4005d8:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  4005da:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  4005de:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  4005e2:	3a01      	subs	r2, #1
  4005e4:	4423      	add	r3, r4
  4005e6:	f1b2 3fff 	cmp.w	r2, #4294967295
  4005ea:	d1f6      	bne.n	4005da <board_init+0x62>
        } while(sets--);
  4005ec:	3e01      	subs	r6, #1
  4005ee:	4460      	add	r0, ip
  4005f0:	f1b6 3fff 	cmp.w	r6, #4294967295
  4005f4:	d1ef      	bne.n	4005d6 <board_init+0x5e>
  4005f6:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  4005fa:	4b51      	ldr	r3, [pc, #324]	; (400740 <board_init+0x1c8>)
  4005fc:	695a      	ldr	r2, [r3, #20]
  4005fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400602:	615a      	str	r2, [r3, #20]
  400604:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400608:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40060c:	4a4d      	ldr	r2, [pc, #308]	; (400744 <board_init+0x1cc>)
  40060e:	494e      	ldr	r1, [pc, #312]	; (400748 <board_init+0x1d0>)
  400610:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400612:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400616:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400618:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40061c:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400620:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400624:	f022 0201 	bic.w	r2, r2, #1
  400628:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  40062c:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400630:	f022 0201 	bic.w	r2, r2, #1
  400634:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400638:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40063c:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400640:	200a      	movs	r0, #10
  400642:	4c42      	ldr	r4, [pc, #264]	; (40074c <board_init+0x1d4>)
  400644:	47a0      	blx	r4
  400646:	200b      	movs	r0, #11
  400648:	47a0      	blx	r4
  40064a:	200c      	movs	r0, #12
  40064c:	47a0      	blx	r4
  40064e:	2010      	movs	r0, #16
  400650:	47a0      	blx	r4
  400652:	2011      	movs	r0, #17
  400654:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400656:	4b3e      	ldr	r3, [pc, #248]	; (400750 <board_init+0x1d8>)
  400658:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40065c:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40065e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400662:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400664:	493b      	ldr	r1, [pc, #236]	; (400754 <board_init+0x1dc>)
  400666:	f44f 7200 	mov.w	r2, #512	; 0x200
  40066a:	610a      	str	r2, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40066c:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400670:	630a      	str	r2, [r1, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400672:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400674:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400678:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40067a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40067e:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400680:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400682:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400686:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400688:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  40068c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40068e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400690:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  400694:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400696:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40069a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  40069e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4006a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4006a6:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4006a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4006ac:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4006ae:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4006b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4006b4:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4006b6:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4006ba:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4006bc:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4006be:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4006c2:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4006c4:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4006c6:	4924      	ldr	r1, [pc, #144]	; (400758 <board_init+0x1e0>)
  4006c8:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
  4006cc:	f042 0210 	orr.w	r2, r2, #16
  4006d0:	f8c1 2114 	str.w	r2, [r1, #276]	; 0x114
		base->PIO_PUDR = mask;
  4006d4:	f501 21b2 	add.w	r1, r1, #364544	; 0x59000
  4006d8:	2210      	movs	r2, #16
  4006da:	660a      	str	r2, [r1, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4006dc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
		base->PIO_MDDR = mask;
  4006e0:	654a      	str	r2, [r1, #84]	; 0x54
		base->PIO_IFDR = mask;
  4006e2:	624a      	str	r2, [r1, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4006e4:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4006e8:	6f08      	ldr	r0, [r1, #112]	; 0x70
  4006ea:	4310      	orrs	r0, r2
  4006ec:	6708      	str	r0, [r1, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4006ee:	6f48      	ldr	r0, [r1, #116]	; 0x74
  4006f0:	4310      	orrs	r0, r2
  4006f2:	6748      	str	r0, [r1, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4006f4:	604a      	str	r2, [r1, #4]
		base->PIO_PUDR = mask;
  4006f6:	2108      	movs	r1, #8
  4006f8:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4006fa:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4006fe:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400700:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400702:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400706:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400708:	f020 0008 	bic.w	r0, r0, #8
  40070c:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40070e:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400710:	f020 0008 	bic.w	r0, r0, #8
  400714:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400716:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  400718:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40071a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40071e:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400720:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400722:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400726:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400728:	f021 0110 	bic.w	r1, r1, #16
  40072c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40072e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400730:	f021 0110 	bic.w	r1, r1, #16
  400734:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400736:	605a      	str	r2, [r3, #4]
  400738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40073a:	bf00      	nop
  40073c:	400e1850 	.word	0x400e1850
  400740:	e000ed00 	.word	0xe000ed00
  400744:	400e0c00 	.word	0x400e0c00
  400748:	5a00080c 	.word	0x5a00080c
  40074c:	00400c51 	.word	0x00400c51
  400750:	400e0e00 	.word	0x400e0e00
  400754:	400e1200 	.word	0x400e1200
  400758:	40088000 	.word	0x40088000

0040075c <wm8904_write_register>:
 *
 * \param uc_register_address Register address to write
 * \param us_data Data to write.
 */
void wm8904_write_register(uint8_t uc_register_address, uint16_t us_data)
{
  40075c:	b500      	push	{lr}
  40075e:	b087      	sub	sp, #28
	uint8_t uc_temp_data[2];
	twihs_packet_t packet;

	uc_temp_data[0] = (us_data & 0xff00) >> 8;
  400760:	0a0b      	lsrs	r3, r1, #8
  400762:	f88d 3014 	strb.w	r3, [sp, #20]
	uc_temp_data[1] = us_data & 0xff;
  400766:	f88d 1015 	strb.w	r1, [sp, #21]

	packet.addr[0]     = uc_register_address;
  40076a:	f88d 0000 	strb.w	r0, [sp]
	packet.addr_length = 0x1;
  40076e:	2301      	movs	r3, #1
  400770:	9301      	str	r3, [sp, #4]
	packet.buffer      = uc_temp_data;
  400772:	ab05      	add	r3, sp, #20
  400774:	9302      	str	r3, [sp, #8]
	packet.length      = 0x2;
  400776:	2302      	movs	r3, #2
  400778:	9303      	str	r3, [sp, #12]
	packet.chip        = WM8904_SLAVE_ADDRESS;
  40077a:	231a      	movs	r3, #26
  40077c:	f88d 3010 	strb.w	r3, [sp, #16]

	twihs_master_write(WM8904_TWIHS, &packet);
  400780:	4669      	mov	r1, sp
  400782:	4803      	ldr	r0, [pc, #12]	; (400790 <wm8904_write_register+0x34>)
  400784:	4b03      	ldr	r3, [pc, #12]	; (400794 <wm8904_write_register+0x38>)
  400786:	4798      	blx	r3
}
  400788:	b007      	add	sp, #28
  40078a:	f85d fb04 	ldr.w	pc, [sp], #4
  40078e:	bf00      	nop
  400790:	40018000 	.word	0x40018000
  400794:	00400fbd 	.word	0x00400fbd

00400798 <wm8904_read_register>:
 *
 * \param uc_register_address Register address to write
 * \retun Register value.
 */
uint16_t wm8904_read_register(uint8_t uc_register_address)
{
  400798:	b500      	push	{lr}
  40079a:	b087      	sub	sp, #28
	uint8_t uc_temp_data[2];
	twihs_packet_t packet;
	uint16_t us_data;

	packet.addr[0]     = uc_register_address;
  40079c:	f88d 0000 	strb.w	r0, [sp]
	packet.addr_length = 0x1;
  4007a0:	2301      	movs	r3, #1
  4007a2:	9301      	str	r3, [sp, #4]
	packet.buffer      = uc_temp_data;
  4007a4:	ab05      	add	r3, sp, #20
  4007a6:	9302      	str	r3, [sp, #8]
	packet.length      = 0x2;
  4007a8:	2302      	movs	r3, #2
  4007aa:	9303      	str	r3, [sp, #12]
	packet.chip        = WM8904_SLAVE_ADDRESS;
  4007ac:	231a      	movs	r3, #26
  4007ae:	f88d 3010 	strb.w	r3, [sp, #16]

	twihs_master_read(WM8904_TWIHS, &packet);
  4007b2:	4669      	mov	r1, sp
  4007b4:	4805      	ldr	r0, [pc, #20]	; (4007cc <wm8904_read_register+0x34>)
  4007b6:	4b06      	ldr	r3, [pc, #24]	; (4007d0 <wm8904_read_register+0x38>)
  4007b8:	4798      	blx	r3
	us_data = (((uint16_t)uc_temp_data[0] << 8) & 0xff00) | uc_temp_data[1];
  4007ba:	f89d 0014 	ldrb.w	r0, [sp, #20]
  4007be:	f89d 3015 	ldrb.w	r3, [sp, #21]

	return us_data;
}
  4007c2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  4007c6:	b007      	add	sp, #28
  4007c8:	f85d fb04 	ldr.w	pc, [sp], #4
  4007cc:	40018000 	.word	0x40018000
  4007d0:	00400f11 	.word	0x00400f11

004007d4 <wm8904_twi_init>:
 * \brief Initialize TWIHS connect to WM8904.
 *
 * \retun TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t wm8904_twi_init(void)
{
  4007d4:	b510      	push	{r4, lr}
  4007d6:	b084      	sub	sp, #16
	pio_configure_pin(WM8904_TK_PIO, WM8904_TK_FLAGS);
  4007d8:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4007dc:	2021      	movs	r0, #33	; 0x21
  4007de:	4c15      	ldr	r4, [pc, #84]	; (400834 <wm8904_twi_init+0x60>)
  4007e0:	47a0      	blx	r4
	pio_configure_pin(WM8904_TF_PIO, WM8904_TF_FLAGS);
  4007e2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4007e6:	2020      	movs	r0, #32
  4007e8:	47a0      	blx	r4
	pio_configure_pin(WM8904_TD_PIO, WM8904_TD_FLAGS);
  4007ea:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4007ee:	207a      	movs	r0, #122	; 0x7a
  4007f0:	47a0      	blx	r4
	pio_configure_pin(WM8904_RK_PIO, WM8904_RK_FLAGS);
  4007f2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4007f6:	2016      	movs	r0, #22
  4007f8:	47a0      	blx	r4
	pio_configure_pin(WM8904_RF_PIO, WM8904_RF_FLAGS);
  4007fa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4007fe:	2078      	movs	r0, #120	; 0x78
  400800:	47a0      	blx	r4
	pio_configure_pin(WM8904_RD_PIO, WM8904_RD_FLAGS);
  400802:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400806:	200a      	movs	r0, #10
  400808:	47a0      	blx	r4
	pio_configure_pin(WM8904_PCK2_PIO, WM8904_PCK2_FLAGS);
  40080a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40080e:	2012      	movs	r0, #18
  400810:	47a0      	blx	r4

	twihs_options_t opt;
	opt.master_clk = sysclk_get_cpu_hz();
	opt.speed = WM8904_TWIHS_CLK;
  400812:	4b09      	ldr	r3, [pc, #36]	; (400838 <wm8904_twi_init+0x64>)
  400814:	9302      	str	r3, [sp, #8]
typedef twihs_packet_t twihs_package_t;

static inline uint32_t twihs_master_setup(twihs_master_t p_twihs,
		twihs_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
  400816:	4b09      	ldr	r3, [pc, #36]	; (40083c <wm8904_twi_init+0x68>)
  400818:	9301      	str	r3, [sp, #4]
	p_opt->smbus      = 0;
  40081a:	2300      	movs	r3, #0
  40081c:	f88d 300d 	strb.w	r3, [sp, #13]
  400820:	2013      	movs	r0, #19
  400822:	4b07      	ldr	r3, [pc, #28]	; (400840 <wm8904_twi_init+0x6c>)
  400824:	4798      	blx	r3
#endif		
	} else {
		// Do Nothing
	}
#endif
	return (twihs_master_init(p_twihs, p_opt));
  400826:	a901      	add	r1, sp, #4
  400828:	4806      	ldr	r0, [pc, #24]	; (400844 <wm8904_twi_init+0x70>)
  40082a:	4b07      	ldr	r3, [pc, #28]	; (400848 <wm8904_twi_init+0x74>)
  40082c:	4798      	blx	r3
	return twihs_master_setup(WM8904_TWIHS, &opt);
}
  40082e:	b004      	add	sp, #16
  400830:	bd10      	pop	{r4, pc}
  400832:	bf00      	nop
  400834:	0040094d 	.word	0x0040094d
  400838:	00061a80 	.word	0x00061a80
  40083c:	047868c0 	.word	0x047868c0
  400840:	00400c51 	.word	0x00400c51
  400844:	40018000 	.word	0x40018000
  400848:	00400edd 	.word	0x00400edd

0040084c <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  40084c:	6301      	str	r1, [r0, #48]	; 0x30
  40084e:	4770      	bx	lr

00400850 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400850:	6341      	str	r1, [r0, #52]	; 0x34
  400852:	4770      	bx	lr

00400854 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400854:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400856:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40085a:	d03a      	beq.n	4008d2 <pio_set_peripheral+0x7e>
  40085c:	d813      	bhi.n	400886 <pio_set_peripheral+0x32>
  40085e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400862:	d025      	beq.n	4008b0 <pio_set_peripheral+0x5c>
  400864:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400868:	d10a      	bne.n	400880 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40086a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40086c:	4313      	orrs	r3, r2
  40086e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400870:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400872:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400874:	400b      	ands	r3, r1
  400876:	ea23 0302 	bic.w	r3, r3, r2
  40087a:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40087c:	6042      	str	r2, [r0, #4]
  40087e:	4770      	bx	lr
	switch (ul_type) {
  400880:	2900      	cmp	r1, #0
  400882:	d1fb      	bne.n	40087c <pio_set_peripheral+0x28>
  400884:	4770      	bx	lr
  400886:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40088a:	d021      	beq.n	4008d0 <pio_set_peripheral+0x7c>
  40088c:	d809      	bhi.n	4008a2 <pio_set_peripheral+0x4e>
  40088e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400892:	d1f3      	bne.n	40087c <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400894:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400896:	4313      	orrs	r3, r2
  400898:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40089a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40089c:	4313      	orrs	r3, r2
  40089e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4008a0:	e7ec      	b.n	40087c <pio_set_peripheral+0x28>
	switch (ul_type) {
  4008a2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4008a6:	d013      	beq.n	4008d0 <pio_set_peripheral+0x7c>
  4008a8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4008ac:	d010      	beq.n	4008d0 <pio_set_peripheral+0x7c>
  4008ae:	e7e5      	b.n	40087c <pio_set_peripheral+0x28>
{
  4008b0:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4008b2:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4008b4:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4008b6:	43d3      	mvns	r3, r2
  4008b8:	4021      	ands	r1, r4
  4008ba:	461c      	mov	r4, r3
  4008bc:	4019      	ands	r1, r3
  4008be:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4008c0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4008c2:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4008c4:	400b      	ands	r3, r1
  4008c6:	4023      	ands	r3, r4
  4008c8:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4008ca:	6042      	str	r2, [r0, #4]
}
  4008cc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008d0:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4008d2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4008d4:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4008d6:	400b      	ands	r3, r1
  4008d8:	ea23 0302 	bic.w	r3, r3, r2
  4008dc:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4008de:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4008e0:	4313      	orrs	r3, r2
  4008e2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4008e4:	e7ca      	b.n	40087c <pio_set_peripheral+0x28>

004008e6 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4008e6:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4008e8:	f012 0f01 	tst.w	r2, #1
  4008ec:	d10d      	bne.n	40090a <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4008ee:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4008f0:	f012 0f0a 	tst.w	r2, #10
  4008f4:	d00b      	beq.n	40090e <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4008f6:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4008f8:	f012 0f02 	tst.w	r2, #2
  4008fc:	d109      	bne.n	400912 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4008fe:	f012 0f08 	tst.w	r2, #8
  400902:	d008      	beq.n	400916 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400904:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400908:	e005      	b.n	400916 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  40090a:	6641      	str	r1, [r0, #100]	; 0x64
  40090c:	e7f0      	b.n	4008f0 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  40090e:	6241      	str	r1, [r0, #36]	; 0x24
  400910:	e7f2      	b.n	4008f8 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400912:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400916:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400918:	6001      	str	r1, [r0, #0]
  40091a:	4770      	bx	lr

0040091c <pio_set_output>:
{
  40091c:	b410      	push	{r4}
  40091e:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400920:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400922:	b94c      	cbnz	r4, 400938 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400924:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400926:	b14b      	cbz	r3, 40093c <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400928:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40092a:	b94a      	cbnz	r2, 400940 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  40092c:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  40092e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400930:	6001      	str	r1, [r0, #0]
}
  400932:	f85d 4b04 	ldr.w	r4, [sp], #4
  400936:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400938:	6641      	str	r1, [r0, #100]	; 0x64
  40093a:	e7f4      	b.n	400926 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  40093c:	6541      	str	r1, [r0, #84]	; 0x54
  40093e:	e7f4      	b.n	40092a <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400940:	6301      	str	r1, [r0, #48]	; 0x30
  400942:	e7f4      	b.n	40092e <pio_set_output+0x12>

00400944 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400944:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400946:	4770      	bx	lr

00400948 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400948:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40094a:	4770      	bx	lr

0040094c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  40094c:	b570      	push	{r4, r5, r6, lr}
  40094e:	b082      	sub	sp, #8
  400950:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400952:	4c46      	ldr	r4, [pc, #280]	; (400a6c <pio_configure_pin+0x120>)
  400954:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  400958:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  40095a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  40095e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400962:	d059      	beq.n	400a18 <pio_configure_pin+0xcc>
  400964:	d80a      	bhi.n	40097c <pio_configure_pin+0x30>
  400966:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40096a:	d02f      	beq.n	4009cc <pio_configure_pin+0x80>
  40096c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400970:	d03f      	beq.n	4009f2 <pio_configure_pin+0xa6>
  400972:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400976:	d016      	beq.n	4009a6 <pio_configure_pin+0x5a>
		return 0;
  400978:	2000      	movs	r0, #0
  40097a:	e012      	b.n	4009a2 <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  40097c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400980:	d05d      	beq.n	400a3e <pio_configure_pin+0xf2>
  400982:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400986:	d05a      	beq.n	400a3e <pio_configure_pin+0xf2>
  400988:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40098c:	d1f4      	bne.n	400978 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40098e:	f000 011f 	and.w	r1, r0, #31
  400992:	2601      	movs	r6, #1
  400994:	462a      	mov	r2, r5
  400996:	fa06 f101 	lsl.w	r1, r6, r1
  40099a:	4620      	mov	r0, r4
  40099c:	4b34      	ldr	r3, [pc, #208]	; (400a70 <pio_configure_pin+0x124>)
  40099e:	4798      	blx	r3
	return 1;
  4009a0:	4630      	mov	r0, r6
}
  4009a2:	b002      	add	sp, #8
  4009a4:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4009a6:	f000 001f 	and.w	r0, r0, #31
  4009aa:	2601      	movs	r6, #1
  4009ac:	4086      	lsls	r6, r0
  4009ae:	4632      	mov	r2, r6
  4009b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4009b4:	4620      	mov	r0, r4
  4009b6:	4b2f      	ldr	r3, [pc, #188]	; (400a74 <pio_configure_pin+0x128>)
  4009b8:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4009ba:	f015 0f01 	tst.w	r5, #1
  4009be:	d102      	bne.n	4009c6 <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  4009c0:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4009c2:	2001      	movs	r0, #1
  4009c4:	e7ed      	b.n	4009a2 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4009c6:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4009c8:	2001      	movs	r0, #1
  4009ca:	e7ea      	b.n	4009a2 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4009cc:	f000 001f 	and.w	r0, r0, #31
  4009d0:	2601      	movs	r6, #1
  4009d2:	4086      	lsls	r6, r0
  4009d4:	4632      	mov	r2, r6
  4009d6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4009da:	4620      	mov	r0, r4
  4009dc:	4b25      	ldr	r3, [pc, #148]	; (400a74 <pio_configure_pin+0x128>)
  4009de:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4009e0:	f015 0f01 	tst.w	r5, #1
  4009e4:	d102      	bne.n	4009ec <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  4009e6:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4009e8:	2001      	movs	r0, #1
  4009ea:	e7da      	b.n	4009a2 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4009ec:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4009ee:	2001      	movs	r0, #1
  4009f0:	e7d7      	b.n	4009a2 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4009f2:	f000 001f 	and.w	r0, r0, #31
  4009f6:	2601      	movs	r6, #1
  4009f8:	4086      	lsls	r6, r0
  4009fa:	4632      	mov	r2, r6
  4009fc:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400a00:	4620      	mov	r0, r4
  400a02:	4b1c      	ldr	r3, [pc, #112]	; (400a74 <pio_configure_pin+0x128>)
  400a04:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400a06:	f015 0f01 	tst.w	r5, #1
  400a0a:	d102      	bne.n	400a12 <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  400a0c:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  400a0e:	2001      	movs	r0, #1
  400a10:	e7c7      	b.n	4009a2 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  400a12:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  400a14:	2001      	movs	r0, #1
  400a16:	e7c4      	b.n	4009a2 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400a18:	f000 001f 	and.w	r0, r0, #31
  400a1c:	2601      	movs	r6, #1
  400a1e:	4086      	lsls	r6, r0
  400a20:	4632      	mov	r2, r6
  400a22:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400a26:	4620      	mov	r0, r4
  400a28:	4b12      	ldr	r3, [pc, #72]	; (400a74 <pio_configure_pin+0x128>)
  400a2a:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400a2c:	f015 0f01 	tst.w	r5, #1
  400a30:	d102      	bne.n	400a38 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  400a32:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  400a34:	2001      	movs	r0, #1
  400a36:	e7b4      	b.n	4009a2 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  400a38:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  400a3a:	2001      	movs	r0, #1
  400a3c:	e7b1      	b.n	4009a2 <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400a3e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400a42:	f000 011f 	and.w	r1, r0, #31
  400a46:	2601      	movs	r6, #1
  400a48:	ea05 0306 	and.w	r3, r5, r6
  400a4c:	9300      	str	r3, [sp, #0]
  400a4e:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400a52:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400a56:	bf14      	ite	ne
  400a58:	2200      	movne	r2, #0
  400a5a:	2201      	moveq	r2, #1
  400a5c:	fa06 f101 	lsl.w	r1, r6, r1
  400a60:	4620      	mov	r0, r4
  400a62:	4c05      	ldr	r4, [pc, #20]	; (400a78 <pio_configure_pin+0x12c>)
  400a64:	47a0      	blx	r4
	return 1;
  400a66:	4630      	mov	r0, r6
		break;
  400a68:	e79b      	b.n	4009a2 <pio_configure_pin+0x56>
  400a6a:	bf00      	nop
  400a6c:	00200707 	.word	0x00200707
  400a70:	004008e7 	.word	0x004008e7
  400a74:	00400855 	.word	0x00400855
  400a78:	0040091d 	.word	0x0040091d

00400a7c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400a80:	4604      	mov	r4, r0
  400a82:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400a84:	4b0e      	ldr	r3, [pc, #56]	; (400ac0 <pio_handler_process+0x44>)
  400a86:	4798      	blx	r3
  400a88:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400a8a:	4620      	mov	r0, r4
  400a8c:	4b0d      	ldr	r3, [pc, #52]	; (400ac4 <pio_handler_process+0x48>)
  400a8e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400a90:	4005      	ands	r5, r0
  400a92:	d013      	beq.n	400abc <pio_handler_process+0x40>
  400a94:	4c0c      	ldr	r4, [pc, #48]	; (400ac8 <pio_handler_process+0x4c>)
  400a96:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400a9a:	e003      	b.n	400aa4 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400a9c:	42b4      	cmp	r4, r6
  400a9e:	d00d      	beq.n	400abc <pio_handler_process+0x40>
  400aa0:	3410      	adds	r4, #16
		while (status != 0) {
  400aa2:	b15d      	cbz	r5, 400abc <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400aa4:	6820      	ldr	r0, [r4, #0]
  400aa6:	4540      	cmp	r0, r8
  400aa8:	d1f8      	bne.n	400a9c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400aaa:	6861      	ldr	r1, [r4, #4]
  400aac:	4229      	tst	r1, r5
  400aae:	d0f5      	beq.n	400a9c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400ab0:	68e3      	ldr	r3, [r4, #12]
  400ab2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400ab4:	6863      	ldr	r3, [r4, #4]
  400ab6:	ea25 0503 	bic.w	r5, r5, r3
  400aba:	e7ef      	b.n	400a9c <pio_handler_process+0x20>
  400abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400ac0:	00400945 	.word	0x00400945
  400ac4:	00400949 	.word	0x00400949
  400ac8:	20400a1c 	.word	0x20400a1c

00400acc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400acc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400ace:	210a      	movs	r1, #10
  400ad0:	4801      	ldr	r0, [pc, #4]	; (400ad8 <PIOA_Handler+0xc>)
  400ad2:	4b02      	ldr	r3, [pc, #8]	; (400adc <PIOA_Handler+0x10>)
  400ad4:	4798      	blx	r3
  400ad6:	bd08      	pop	{r3, pc}
  400ad8:	400e0e00 	.word	0x400e0e00
  400adc:	00400a7d 	.word	0x00400a7d

00400ae0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400ae0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400ae2:	210b      	movs	r1, #11
  400ae4:	4801      	ldr	r0, [pc, #4]	; (400aec <PIOB_Handler+0xc>)
  400ae6:	4b02      	ldr	r3, [pc, #8]	; (400af0 <PIOB_Handler+0x10>)
  400ae8:	4798      	blx	r3
  400aea:	bd08      	pop	{r3, pc}
  400aec:	400e1000 	.word	0x400e1000
  400af0:	00400a7d 	.word	0x00400a7d

00400af4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400af4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400af6:	210c      	movs	r1, #12
  400af8:	4801      	ldr	r0, [pc, #4]	; (400b00 <PIOC_Handler+0xc>)
  400afa:	4b02      	ldr	r3, [pc, #8]	; (400b04 <PIOC_Handler+0x10>)
  400afc:	4798      	blx	r3
  400afe:	bd08      	pop	{r3, pc}
  400b00:	400e1200 	.word	0x400e1200
  400b04:	00400a7d 	.word	0x00400a7d

00400b08 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400b08:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400b0a:	2110      	movs	r1, #16
  400b0c:	4801      	ldr	r0, [pc, #4]	; (400b14 <PIOD_Handler+0xc>)
  400b0e:	4b02      	ldr	r3, [pc, #8]	; (400b18 <PIOD_Handler+0x10>)
  400b10:	4798      	blx	r3
  400b12:	bd08      	pop	{r3, pc}
  400b14:	400e1400 	.word	0x400e1400
  400b18:	00400a7d 	.word	0x00400a7d

00400b1c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400b1c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400b1e:	2111      	movs	r1, #17
  400b20:	4801      	ldr	r0, [pc, #4]	; (400b28 <PIOE_Handler+0xc>)
  400b22:	4b02      	ldr	r3, [pc, #8]	; (400b2c <PIOE_Handler+0x10>)
  400b24:	4798      	blx	r3
  400b26:	bd08      	pop	{r3, pc}
  400b28:	400e1600 	.word	0x400e1600
  400b2c:	00400a7d 	.word	0x00400a7d

00400b30 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400b30:	2803      	cmp	r0, #3
  400b32:	d011      	beq.n	400b58 <pmc_mck_set_division+0x28>
  400b34:	2804      	cmp	r0, #4
  400b36:	d012      	beq.n	400b5e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400b38:	2802      	cmp	r0, #2
  400b3a:	bf0c      	ite	eq
  400b3c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400b40:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400b42:	4a08      	ldr	r2, [pc, #32]	; (400b64 <pmc_mck_set_division+0x34>)
  400b44:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400b4a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400b4c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400b4e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b50:	f013 0f08 	tst.w	r3, #8
  400b54:	d0fb      	beq.n	400b4e <pmc_mck_set_division+0x1e>
}
  400b56:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400b58:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400b5c:	e7f1      	b.n	400b42 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400b5e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400b62:	e7ee      	b.n	400b42 <pmc_mck_set_division+0x12>
  400b64:	400e0600 	.word	0x400e0600

00400b68 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400b68:	4a17      	ldr	r2, [pc, #92]	; (400bc8 <pmc_switch_mck_to_pllack+0x60>)
  400b6a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400b70:	4318      	orrs	r0, r3
  400b72:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400b74:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b76:	f013 0f08 	tst.w	r3, #8
  400b7a:	d10a      	bne.n	400b92 <pmc_switch_mck_to_pllack+0x2a>
  400b7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400b80:	4911      	ldr	r1, [pc, #68]	; (400bc8 <pmc_switch_mck_to_pllack+0x60>)
  400b82:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400b84:	f012 0f08 	tst.w	r2, #8
  400b88:	d103      	bne.n	400b92 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400b8a:	3b01      	subs	r3, #1
  400b8c:	d1f9      	bne.n	400b82 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400b8e:	2001      	movs	r0, #1
  400b90:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400b92:	4a0d      	ldr	r2, [pc, #52]	; (400bc8 <pmc_switch_mck_to_pllack+0x60>)
  400b94:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b96:	f023 0303 	bic.w	r3, r3, #3
  400b9a:	f043 0302 	orr.w	r3, r3, #2
  400b9e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400ba0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400ba2:	f013 0f08 	tst.w	r3, #8
  400ba6:	d10a      	bne.n	400bbe <pmc_switch_mck_to_pllack+0x56>
  400ba8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400bac:	4906      	ldr	r1, [pc, #24]	; (400bc8 <pmc_switch_mck_to_pllack+0x60>)
  400bae:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400bb0:	f012 0f08 	tst.w	r2, #8
  400bb4:	d105      	bne.n	400bc2 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400bb6:	3b01      	subs	r3, #1
  400bb8:	d1f9      	bne.n	400bae <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400bba:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400bbc:	4770      	bx	lr
	return 0;
  400bbe:	2000      	movs	r0, #0
  400bc0:	4770      	bx	lr
  400bc2:	2000      	movs	r0, #0
  400bc4:	4770      	bx	lr
  400bc6:	bf00      	nop
  400bc8:	400e0600 	.word	0x400e0600

00400bcc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400bcc:	b9a0      	cbnz	r0, 400bf8 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400bce:	480e      	ldr	r0, [pc, #56]	; (400c08 <pmc_switch_mainck_to_xtal+0x3c>)
  400bd0:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400bd2:	0209      	lsls	r1, r1, #8
  400bd4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400bd6:	4a0d      	ldr	r2, [pc, #52]	; (400c0c <pmc_switch_mainck_to_xtal+0x40>)
  400bd8:	401a      	ands	r2, r3
  400bda:	4b0d      	ldr	r3, [pc, #52]	; (400c10 <pmc_switch_mainck_to_xtal+0x44>)
  400bdc:	4313      	orrs	r3, r2
  400bde:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400be0:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400be2:	4602      	mov	r2, r0
  400be4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400be6:	f013 0f01 	tst.w	r3, #1
  400bea:	d0fb      	beq.n	400be4 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400bec:	4a06      	ldr	r2, [pc, #24]	; (400c08 <pmc_switch_mainck_to_xtal+0x3c>)
  400bee:	6a11      	ldr	r1, [r2, #32]
  400bf0:	4b08      	ldr	r3, [pc, #32]	; (400c14 <pmc_switch_mainck_to_xtal+0x48>)
  400bf2:	430b      	orrs	r3, r1
  400bf4:	6213      	str	r3, [r2, #32]
  400bf6:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400bf8:	4903      	ldr	r1, [pc, #12]	; (400c08 <pmc_switch_mainck_to_xtal+0x3c>)
  400bfa:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400bfc:	4a06      	ldr	r2, [pc, #24]	; (400c18 <pmc_switch_mainck_to_xtal+0x4c>)
  400bfe:	401a      	ands	r2, r3
  400c00:	4b06      	ldr	r3, [pc, #24]	; (400c1c <pmc_switch_mainck_to_xtal+0x50>)
  400c02:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400c04:	620b      	str	r3, [r1, #32]
  400c06:	4770      	bx	lr
  400c08:	400e0600 	.word	0x400e0600
  400c0c:	ffc8fffc 	.word	0xffc8fffc
  400c10:	00370001 	.word	0x00370001
  400c14:	01370000 	.word	0x01370000
  400c18:	fec8fffc 	.word	0xfec8fffc
  400c1c:	01370002 	.word	0x01370002

00400c20 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400c20:	4b02      	ldr	r3, [pc, #8]	; (400c2c <pmc_osc_is_ready_mainck+0xc>)
  400c22:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400c24:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400c28:	4770      	bx	lr
  400c2a:	bf00      	nop
  400c2c:	400e0600 	.word	0x400e0600

00400c30 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400c30:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400c34:	4b01      	ldr	r3, [pc, #4]	; (400c3c <pmc_disable_pllack+0xc>)
  400c36:	629a      	str	r2, [r3, #40]	; 0x28
  400c38:	4770      	bx	lr
  400c3a:	bf00      	nop
  400c3c:	400e0600 	.word	0x400e0600

00400c40 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400c40:	4b02      	ldr	r3, [pc, #8]	; (400c4c <pmc_is_locked_pllack+0xc>)
  400c42:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400c44:	f000 0002 	and.w	r0, r0, #2
  400c48:	4770      	bx	lr
  400c4a:	bf00      	nop
  400c4c:	400e0600 	.word	0x400e0600

00400c50 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400c50:	283f      	cmp	r0, #63	; 0x3f
  400c52:	d81e      	bhi.n	400c92 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400c54:	281f      	cmp	r0, #31
  400c56:	d80c      	bhi.n	400c72 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400c58:	4b11      	ldr	r3, [pc, #68]	; (400ca0 <pmc_enable_periph_clk+0x50>)
  400c5a:	699a      	ldr	r2, [r3, #24]
  400c5c:	2301      	movs	r3, #1
  400c5e:	4083      	lsls	r3, r0
  400c60:	4393      	bics	r3, r2
  400c62:	d018      	beq.n	400c96 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400c64:	2301      	movs	r3, #1
  400c66:	fa03 f000 	lsl.w	r0, r3, r0
  400c6a:	4b0d      	ldr	r3, [pc, #52]	; (400ca0 <pmc_enable_periph_clk+0x50>)
  400c6c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400c6e:	2000      	movs	r0, #0
  400c70:	4770      	bx	lr
		ul_id -= 32;
  400c72:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400c74:	4b0a      	ldr	r3, [pc, #40]	; (400ca0 <pmc_enable_periph_clk+0x50>)
  400c76:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400c7a:	2301      	movs	r3, #1
  400c7c:	4083      	lsls	r3, r0
  400c7e:	4393      	bics	r3, r2
  400c80:	d00b      	beq.n	400c9a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400c82:	2301      	movs	r3, #1
  400c84:	fa03 f000 	lsl.w	r0, r3, r0
  400c88:	4b05      	ldr	r3, [pc, #20]	; (400ca0 <pmc_enable_periph_clk+0x50>)
  400c8a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400c8e:	2000      	movs	r0, #0
  400c90:	4770      	bx	lr
		return 1;
  400c92:	2001      	movs	r0, #1
  400c94:	4770      	bx	lr
	return 0;
  400c96:	2000      	movs	r0, #0
  400c98:	4770      	bx	lr
  400c9a:	2000      	movs	r0, #0
}
  400c9c:	4770      	bx	lr
  400c9e:	bf00      	nop
  400ca0:	400e0600 	.word	0x400e0600

00400ca4 <pmc_pck_set_prescaler>:
 *
 * \param ul_id Peripheral ID.
 * \param ul_pres Prescaler value.
 */
void pmc_pck_set_prescaler(uint32_t ul_id, uint32_t ul_pres)
{
  400ca4:	4a09      	ldr	r2, [pc, #36]	; (400ccc <pmc_pck_set_prescaler+0x28>)
  400ca6:	eb02 0280 	add.w	r2, r2, r0, lsl #2
	PMC->PMC_PCK[ul_id] =
			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_PRES_Msk) | ul_pres;
  400caa:	6c13      	ldr	r3, [r2, #64]	; 0x40
  400cac:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
  400cb0:	4319      	orrs	r1, r3
	PMC->PMC_PCK[ul_id] =
  400cb2:	6411      	str	r1, [r2, #64]	; 0x40
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  400cb4:	f44f 7380 	mov.w	r3, #256	; 0x100
  400cb8:	fa03 f000 	lsl.w	r0, r3, r0
  400cbc:	4b03      	ldr	r3, [pc, #12]	; (400ccc <pmc_pck_set_prescaler+0x28>)
  400cbe:	681a      	ldr	r2, [r3, #0]
  400cc0:	4202      	tst	r2, r0
  400cc2:	d002      	beq.n	400cca <pmc_pck_set_prescaler+0x26>
			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
  400cc4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  400cc6:	4210      	tst	r0, r2
  400cc8:	d0f9      	beq.n	400cbe <pmc_pck_set_prescaler+0x1a>
  400cca:	4770      	bx	lr
  400ccc:	400e0600 	.word	0x400e0600

00400cd0 <pmc_pck_set_source>:
 *
 * \param ul_id Peripheral ID.
 * \param ul_source Source selection value.
 */
void pmc_pck_set_source(uint32_t ul_id, uint32_t ul_source)
{
  400cd0:	4a09      	ldr	r2, [pc, #36]	; (400cf8 <pmc_pck_set_source+0x28>)
  400cd2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
	PMC->PMC_PCK[ul_id] =
			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_CSS_Msk) | ul_source;
  400cd6:	6c13      	ldr	r3, [r2, #64]	; 0x40
  400cd8:	f023 0307 	bic.w	r3, r3, #7
  400cdc:	4319      	orrs	r1, r3
	PMC->PMC_PCK[ul_id] =
  400cde:	6411      	str	r1, [r2, #64]	; 0x40
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  400ce0:	f44f 7380 	mov.w	r3, #256	; 0x100
  400ce4:	fa03 f000 	lsl.w	r0, r3, r0
  400ce8:	4b03      	ldr	r3, [pc, #12]	; (400cf8 <pmc_pck_set_source+0x28>)
  400cea:	681a      	ldr	r2, [r3, #0]
  400cec:	4202      	tst	r2, r0
  400cee:	d002      	beq.n	400cf6 <pmc_pck_set_source+0x26>
			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
  400cf0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  400cf2:	4210      	tst	r0, r2
  400cf4:	d0f9      	beq.n	400cea <pmc_pck_set_source+0x1a>
  400cf6:	4770      	bx	lr
  400cf8:	400e0600 	.word	0x400e0600

00400cfc <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  400cfc:	f44f 7380 	mov.w	r3, #256	; 0x100
  400d00:	fa03 f000 	lsl.w	r0, r3, r0
  400d04:	4b01      	ldr	r3, [pc, #4]	; (400d0c <pmc_enable_pck+0x10>)
  400d06:	6018      	str	r0, [r3, #0]
  400d08:	4770      	bx	lr
  400d0a:	bf00      	nop
  400d0c:	400e0600 	.word	0x400e0600

00400d10 <ssc_reset>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_reset(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_SWRST;
  400d10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400d14:	6003      	str	r3, [r0, #0]
	p_ssc->SSC_CMR = 0;
  400d16:	2300      	movs	r3, #0
  400d18:	6043      	str	r3, [r0, #4]
	p_ssc->SSC_RCMR = 0;
  400d1a:	6103      	str	r3, [r0, #16]
	p_ssc->SSC_RFMR = 0;
  400d1c:	6143      	str	r3, [r0, #20]
	p_ssc->SSC_TCMR = 0;
  400d1e:	6183      	str	r3, [r0, #24]
	p_ssc->SSC_TFMR = 0;
  400d20:	61c3      	str	r3, [r0, #28]
  400d22:	4770      	bx	lr

00400d24 <ssc_enable_rx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_rx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_RXEN;
  400d24:	2301      	movs	r3, #1
  400d26:	6003      	str	r3, [r0, #0]
  400d28:	4770      	bx	lr

00400d2a <ssc_disable_rx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_disable_rx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_RXDIS;
  400d2a:	2302      	movs	r3, #2
  400d2c:	6003      	str	r3, [r0, #0]
  400d2e:	4770      	bx	lr

00400d30 <ssc_enable_tx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_tx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_TXEN;
  400d30:	f44f 7380 	mov.w	r3, #256	; 0x100
  400d34:	6003      	str	r3, [r0, #0]
  400d36:	4770      	bx	lr

00400d38 <ssc_disable_tx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_disable_tx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_TXDIS;
  400d38:	f44f 7300 	mov.w	r3, #512	; 0x200
  400d3c:	6003      	str	r3, [r0, #0]
  400d3e:	4770      	bx	lr

00400d40 <ssc_set_receiver>:
 * \param p_rx_clk_opt Pointer to the receiver clock configuration structure.
 * \param p_rx_data_frame Pointer to the receiver data frame configuration structure.
 */
void ssc_set_receiver(Ssc *p_ssc, clock_opt_t *p_rx_clk_opt,
		data_frame_opt_t *p_rx_data_frame)
{
  400d40:	b430      	push	{r4, r5}
	if (p_rx_clk_opt == NULL) {
  400d42:	2900      	cmp	r1, #0
  400d44:	d030      	beq.n	400da8 <ssc_set_receiver+0x68>
  400d46:	460c      	mov	r4, r1
		p_ssc->SSC_RCMR = 0;
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  400d48:	6901      	ldr	r1, [r0, #16]
  400d4a:	6823      	ldr	r3, [r4, #0]
  400d4c:	6865      	ldr	r5, [r4, #4]
  400d4e:	432b      	orrs	r3, r5
  400d50:	430b      	orrs	r3, r1
  400d52:	68a1      	ldr	r1, [r4, #8]
  400d54:	430b      	orrs	r3, r1
  400d56:	68e1      	ldr	r1, [r4, #12]
  400d58:	430b      	orrs	r3, r1
  400d5a:	69a1      	ldr	r1, [r4, #24]
  400d5c:	430b      	orrs	r3, r1
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
				p_rx_clk_opt->ul_ckg |
				p_rx_clk_opt->ul_start_sel |
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
  400d5e:	6921      	ldr	r1, [r4, #16]
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  400d60:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  400d64:	6961      	ldr	r1, [r4, #20]
  400d66:	0409      	lsls	r1, r1, #16
  400d68:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  400d6c:	430b      	orrs	r3, r1
  400d6e:	6103      	str	r3, [r0, #16]
	}

	if (p_rx_data_frame == NULL) {
  400d70:	b1ea      	cbz	r2, 400dae <ssc_set_receiver+0x6e>
		p_ssc->SSC_RFMR = 0;
	} else {
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400d72:	6941      	ldr	r1, [r0, #20]
  400d74:	6853      	ldr	r3, [r2, #4]
  400d76:	6954      	ldr	r4, [r2, #20]
  400d78:	4323      	orrs	r3, r4
  400d7a:	6994      	ldr	r4, [r2, #24]
  400d7c:	4323      	orrs	r3, r4
  400d7e:	430b      	orrs	r3, r1
  400d80:	6811      	ldr	r1, [r2, #0]
  400d82:	f001 011f 	and.w	r1, r1, #31
  400d86:	430b      	orrs	r3, r1
				p_rx_data_frame->ul_msbf |
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
  400d88:	6911      	ldr	r1, [r2, #16]
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400d8a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  400d8e:	6891      	ldr	r1, [r2, #8]
  400d90:	0209      	lsls	r1, r1, #8
  400d92:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400d96:	430b      	orrs	r3, r1
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  400d98:	68d2      	ldr	r2, [r2, #12]
  400d9a:	0412      	lsls	r2, r2, #16
  400d9c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400da0:	4313      	orrs	r3, r2
  400da2:	6143      	str	r3, [r0, #20]
				p_rx_data_frame->ul_fsos |
				p_rx_data_frame->ul_fsedge;
	}
}
  400da4:	bc30      	pop	{r4, r5}
  400da6:	4770      	bx	lr
		p_ssc->SSC_RCMR = 0;
  400da8:	2300      	movs	r3, #0
  400daa:	6103      	str	r3, [r0, #16]
  400dac:	e7e0      	b.n	400d70 <ssc_set_receiver+0x30>
		p_ssc->SSC_RFMR = 0;
  400dae:	2300      	movs	r3, #0
  400db0:	6143      	str	r3, [r0, #20]
  400db2:	e7f7      	b.n	400da4 <ssc_set_receiver+0x64>

00400db4 <ssc_set_transmitter>:
 * \param p_tx_clk_opt Pointer to the transmitter clock configuration structure.
 * \param p_tx_data_frame Pointer to the transmitter data frame configuration structure.
 */
void ssc_set_transmitter(Ssc *p_ssc, clock_opt_t *p_tx_clk_opt,
		data_frame_opt_t *p_tx_data_frame)
{
  400db4:	b430      	push	{r4, r5}
	if (p_tx_clk_opt == NULL) {
  400db6:	2900      	cmp	r1, #0
  400db8:	d030      	beq.n	400e1c <ssc_set_transmitter+0x68>
  400dba:	460c      	mov	r4, r1
		p_ssc->SSC_TCMR = 0;
	} else {
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  400dbc:	6981      	ldr	r1, [r0, #24]
  400dbe:	6823      	ldr	r3, [r4, #0]
  400dc0:	6865      	ldr	r5, [r4, #4]
  400dc2:	432b      	orrs	r3, r5
  400dc4:	430b      	orrs	r3, r1
  400dc6:	68a1      	ldr	r1, [r4, #8]
  400dc8:	430b      	orrs	r3, r1
  400dca:	68e1      	ldr	r1, [r4, #12]
  400dcc:	430b      	orrs	r3, r1
  400dce:	69a1      	ldr	r1, [r4, #24]
  400dd0:	430b      	orrs	r3, r1
				p_tx_clk_opt->ul_cko | p_tx_clk_opt->ul_cki |
				p_tx_clk_opt->ul_ckg |
				p_tx_clk_opt->ul_start_sel |
				SSC_TCMR_PERIOD(p_tx_clk_opt->ul_period) |
  400dd2:	6921      	ldr	r1, [r4, #16]
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  400dd4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
				SSC_TCMR_STTDLY(p_tx_clk_opt->ul_sttdly);
  400dd8:	6961      	ldr	r1, [r4, #20]
  400dda:	0409      	lsls	r1, r1, #16
  400ddc:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  400de0:	430b      	orrs	r3, r1
  400de2:	6183      	str	r3, [r0, #24]
	}

	if (p_tx_data_frame == NULL) {
  400de4:	b1ea      	cbz	r2, 400e22 <ssc_set_transmitter+0x6e>
		p_ssc->SSC_TFMR = 0;
	} else {
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  400de6:	69c1      	ldr	r1, [r0, #28]
  400de8:	6853      	ldr	r3, [r2, #4]
  400dea:	6954      	ldr	r4, [r2, #20]
  400dec:	4323      	orrs	r3, r4
  400dee:	6994      	ldr	r4, [r2, #24]
  400df0:	4323      	orrs	r3, r4
  400df2:	430b      	orrs	r3, r1
  400df4:	6811      	ldr	r1, [r2, #0]
  400df6:	f001 011f 	and.w	r1, r1, #31
  400dfa:	430b      	orrs	r3, r1
				p_tx_data_frame->ul_msbf |
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
				SSC_TFMR_FSLEN_EXT(p_tx_data_frame->ul_fslen_ext) |
  400dfc:	6911      	ldr	r1, [r2, #16]
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  400dfe:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
  400e02:	6891      	ldr	r1, [r2, #8]
  400e04:	0209      	lsls	r1, r1, #8
  400e06:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  400e0a:	430b      	orrs	r3, r1
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
  400e0c:	68d2      	ldr	r2, [r2, #12]
  400e0e:	0412      	lsls	r2, r2, #16
  400e10:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  400e14:	4313      	orrs	r3, r2
  400e16:	61c3      	str	r3, [r0, #28]
				p_tx_data_frame->ul_fsos |
				p_tx_data_frame->ul_fsedge;
	}
}
  400e18:	bc30      	pop	{r4, r5}
  400e1a:	4770      	bx	lr
		p_ssc->SSC_TCMR = 0;
  400e1c:	2300      	movs	r3, #0
  400e1e:	6183      	str	r3, [r0, #24]
  400e20:	e7e0      	b.n	400de4 <ssc_set_transmitter+0x30>
		p_ssc->SSC_TFMR = 0;
  400e22:	2300      	movs	r3, #0
  400e24:	61c3      	str	r3, [r0, #28]
  400e26:	e7f7      	b.n	400e18 <ssc_set_transmitter+0x64>

00400e28 <ssc_disable_interrupt>:
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void ssc_disable_interrupt(Ssc *p_ssc, uint32_t ul_sources)
{
	p_ssc->SSC_IDR = ul_sources;
  400e28:	6481      	str	r1, [r0, #72]	; 0x48
  400e2a:	4770      	bx	lr

00400e2c <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  400e2c:	4b28      	ldr	r3, [pc, #160]	; (400ed0 <twihs_set_speed+0xa4>)
  400e2e:	4299      	cmp	r1, r3
  400e30:	d84b      	bhi.n	400eca <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  400e32:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  400e36:	4299      	cmp	r1, r3
  400e38:	d92d      	bls.n	400e96 <twihs_set_speed+0x6a>
{
  400e3a:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  400e3c:	4c25      	ldr	r4, [pc, #148]	; (400ed4 <twihs_set_speed+0xa8>)
  400e3e:	fba4 3402 	umull	r3, r4, r4, r2
  400e42:	0ba4      	lsrs	r4, r4, #14
  400e44:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  400e46:	4b24      	ldr	r3, [pc, #144]	; (400ed8 <twihs_set_speed+0xac>)
  400e48:	440b      	add	r3, r1
  400e4a:	009b      	lsls	r3, r3, #2
  400e4c:	fbb2 f2f3 	udiv	r2, r2, r3
  400e50:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400e52:	2cff      	cmp	r4, #255	; 0xff
  400e54:	d91d      	bls.n	400e92 <twihs_set_speed+0x66>
  400e56:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  400e58:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  400e5a:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400e5c:	2cff      	cmp	r4, #255	; 0xff
  400e5e:	d901      	bls.n	400e64 <twihs_set_speed+0x38>
  400e60:	2906      	cmp	r1, #6
  400e62:	d9f9      	bls.n	400e58 <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400e64:	2aff      	cmp	r2, #255	; 0xff
  400e66:	d907      	bls.n	400e78 <twihs_set_speed+0x4c>
  400e68:	2906      	cmp	r1, #6
  400e6a:	d805      	bhi.n	400e78 <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  400e6c:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  400e6e:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400e70:	2aff      	cmp	r2, #255	; 0xff
  400e72:	d901      	bls.n	400e78 <twihs_set_speed+0x4c>
  400e74:	2906      	cmp	r1, #6
  400e76:	d9f9      	bls.n	400e6c <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  400e78:	0213      	lsls	r3, r2, #8
  400e7a:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  400e7c:	0409      	lsls	r1, r1, #16
  400e7e:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  400e82:	430b      	orrs	r3, r1
  400e84:	b2e4      	uxtb	r4, r4
  400e86:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  400e88:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  400e8a:	2000      	movs	r0, #0
}
  400e8c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400e90:	4770      	bx	lr
	uint32_t ckdiv = 0;
  400e92:	2100      	movs	r1, #0
  400e94:	e7e6      	b.n	400e64 <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  400e96:	0049      	lsls	r1, r1, #1
  400e98:	fbb2 f2f1 	udiv	r2, r2, r1
  400e9c:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400e9e:	2aff      	cmp	r2, #255	; 0xff
  400ea0:	d911      	bls.n	400ec6 <twihs_set_speed+0x9a>
  400ea2:	2300      	movs	r3, #0
			ckdiv++;
  400ea4:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  400ea6:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400ea8:	2aff      	cmp	r2, #255	; 0xff
  400eaa:	d901      	bls.n	400eb0 <twihs_set_speed+0x84>
  400eac:	2b06      	cmp	r3, #6
  400eae:	d9f9      	bls.n	400ea4 <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  400eb0:	0211      	lsls	r1, r2, #8
  400eb2:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  400eb4:	041b      	lsls	r3, r3, #16
  400eb6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  400eba:	430b      	orrs	r3, r1
  400ebc:	b2d2      	uxtb	r2, r2
  400ebe:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  400ec0:	6102      	str	r2, [r0, #16]
	return PASS;
  400ec2:	2000      	movs	r0, #0
  400ec4:	4770      	bx	lr
	uint32_t ckdiv = 0;
  400ec6:	2300      	movs	r3, #0
  400ec8:	e7f2      	b.n	400eb0 <twihs_set_speed+0x84>
		return FAIL;
  400eca:	2001      	movs	r0, #1
  400ecc:	4770      	bx	lr
  400ece:	bf00      	nop
  400ed0:	00061a80 	.word	0x00061a80
  400ed4:	057619f1 	.word	0x057619f1
  400ed8:	3ffd1200 	.word	0x3ffd1200

00400edc <twihs_master_init>:
{
  400edc:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  400ede:	f04f 32ff 	mov.w	r2, #4294967295
  400ee2:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  400ee4:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  400ee6:	2280      	movs	r2, #128	; 0x80
  400ee8:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  400eea:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  400eec:	2208      	movs	r2, #8
  400eee:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  400ef0:	2220      	movs	r2, #32
  400ef2:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  400ef4:	2204      	movs	r2, #4
  400ef6:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  400ef8:	680a      	ldr	r2, [r1, #0]
  400efa:	6849      	ldr	r1, [r1, #4]
  400efc:	4b03      	ldr	r3, [pc, #12]	; (400f0c <twihs_master_init+0x30>)
  400efe:	4798      	blx	r3
}
  400f00:	2801      	cmp	r0, #1
  400f02:	bf14      	ite	ne
  400f04:	2000      	movne	r0, #0
  400f06:	2001      	moveq	r0, #1
  400f08:	bd08      	pop	{r3, pc}
  400f0a:	bf00      	nop
  400f0c:	00400e2d 	.word	0x00400e2d

00400f10 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  400f10:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  400f12:	2a00      	cmp	r2, #0
  400f14:	d04c      	beq.n	400fb0 <twihs_master_read+0xa0>
{
  400f16:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  400f18:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  400f1a:	2600      	movs	r6, #0
  400f1c:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  400f1e:	684b      	ldr	r3, [r1, #4]
  400f20:	021b      	lsls	r3, r3, #8
  400f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  400f26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  400f2a:	7c0d      	ldrb	r5, [r1, #16]
  400f2c:	042d      	lsls	r5, r5, #16
  400f2e:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  400f32:	432b      	orrs	r3, r5
  400f34:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  400f36:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  400f38:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  400f3a:	b15d      	cbz	r5, 400f54 <twihs_master_read+0x44>
	val = addr[0];
  400f3c:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  400f3e:	2d01      	cmp	r5, #1
  400f40:	dd02      	ble.n	400f48 <twihs_master_read+0x38>
		val |= addr[1];
  400f42:	784e      	ldrb	r6, [r1, #1]
  400f44:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	if (len > 2) {
  400f48:	2d02      	cmp	r5, #2
  400f4a:	dd04      	ble.n	400f56 <twihs_master_read+0x46>
		val |= addr[2];
  400f4c:	7889      	ldrb	r1, [r1, #2]
  400f4e:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  400f52:	e000      	b.n	400f56 <twihs_master_read+0x46>
		return 0;
  400f54:	2300      	movs	r3, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  400f56:	60c3      	str	r3, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  400f58:	2301      	movs	r3, #1
  400f5a:	6003      	str	r3, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  400f5c:	2502      	movs	r5, #2
  400f5e:	e012      	b.n	400f86 <twihs_master_read+0x76>
  400f60:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  400f62:	f013 0f02 	tst.w	r3, #2
  400f66:	d01b      	beq.n	400fa0 <twihs_master_read+0x90>
		*buffer++ = p_twihs->TWIHS_RHR;
  400f68:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400f6a:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  400f6c:	6a03      	ldr	r3, [r0, #32]
  400f6e:	f013 0f01 	tst.w	r3, #1
  400f72:	d0fb      	beq.n	400f6c <twihs_master_read+0x5c>
	p_twihs->TWIHS_SR;
  400f74:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  400f76:	2000      	movs	r0, #0
}
  400f78:	bc70      	pop	{r4, r5, r6}
  400f7a:	4770      	bx	lr
		*buffer++ = p_twihs->TWIHS_RHR;
  400f7c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400f7e:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt > 0) {
  400f82:	3a01      	subs	r2, #1
  400f84:	d0f2      	beq.n	400f6c <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  400f86:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  400f88:	f413 7f80 	tst.w	r3, #256	; 0x100
  400f8c:	d114      	bne.n	400fb8 <twihs_master_read+0xa8>
  400f8e:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  400f92:	2a01      	cmp	r2, #1
  400f94:	d0e4      	beq.n	400f60 <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  400f96:	f013 0f02 	tst.w	r3, #2
  400f9a:	d1ef      	bne.n	400f7c <twihs_master_read+0x6c>
	while (cnt > 0) {
  400f9c:	2a00      	cmp	r2, #0
  400f9e:	d0e5      	beq.n	400f6c <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  400fa0:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  400fa2:	f413 7f80 	tst.w	r3, #256	; 0x100
  400fa6:	d105      	bne.n	400fb4 <twihs_master_read+0xa4>
		if (!timeout--) {
  400fa8:	3901      	subs	r1, #1
  400faa:	d1f2      	bne.n	400f92 <twihs_master_read+0x82>
			return TWIHS_ERROR_TIMEOUT;
  400fac:	2009      	movs	r0, #9
  400fae:	e7e3      	b.n	400f78 <twihs_master_read+0x68>
		return TWIHS_INVALID_ARGUMENT;
  400fb0:	2001      	movs	r0, #1
  400fb2:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  400fb4:	2005      	movs	r0, #5
  400fb6:	e7df      	b.n	400f78 <twihs_master_read+0x68>
  400fb8:	2005      	movs	r0, #5
  400fba:	e7dd      	b.n	400f78 <twihs_master_read+0x68>

00400fbc <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  400fbc:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  400fbe:	2b00      	cmp	r3, #0
  400fc0:	d043      	beq.n	40104a <twihs_master_write+0x8e>
{
  400fc2:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  400fc4:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  400fc6:	2600      	movs	r6, #0
  400fc8:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  400fca:	7c0a      	ldrb	r2, [r1, #16]
  400fcc:	0412      	lsls	r2, r2, #16
  400fce:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  400fd2:	684d      	ldr	r5, [r1, #4]
  400fd4:	022d      	lsls	r5, r5, #8
  400fd6:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  400fda:	432a      	orrs	r2, r5
  400fdc:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  400fde:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  400fe0:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  400fe2:	b15d      	cbz	r5, 400ffc <twihs_master_write+0x40>
	val = addr[0];
  400fe4:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  400fe6:	2d01      	cmp	r5, #1
  400fe8:	dd02      	ble.n	400ff0 <twihs_master_write+0x34>
		val |= addr[1];
  400fea:	784e      	ldrb	r6, [r1, #1]
  400fec:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  400ff0:	2d02      	cmp	r5, #2
  400ff2:	dd04      	ble.n	400ffe <twihs_master_write+0x42>
		val |= addr[2];
  400ff4:	7889      	ldrb	r1, [r1, #2]
  400ff6:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  400ffa:	e000      	b.n	400ffe <twihs_master_write+0x42>
		return 0;
  400ffc:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  400ffe:	60c2      	str	r2, [r0, #12]
  401000:	e004      	b.n	40100c <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  401002:	f814 2b01 	ldrb.w	r2, [r4], #1
  401006:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  401008:	3b01      	subs	r3, #1
  40100a:	d00f      	beq.n	40102c <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  40100c:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40100e:	f412 7f80 	tst.w	r2, #256	; 0x100
  401012:	d11e      	bne.n	401052 <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  401014:	f012 0f04 	tst.w	r2, #4
  401018:	d1f3      	bne.n	401002 <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  40101a:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40101c:	f412 7f80 	tst.w	r2, #256	; 0x100
  401020:	d115      	bne.n	40104e <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  401022:	f012 0f04 	tst.w	r2, #4
  401026:	d1ec      	bne.n	401002 <twihs_master_write+0x46>
	while (cnt > 0) {
  401028:	2b00      	cmp	r3, #0
  40102a:	d1f6      	bne.n	40101a <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  40102c:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40102e:	f413 7f80 	tst.w	r3, #256	; 0x100
  401032:	d111      	bne.n	401058 <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  401034:	f013 0f04 	tst.w	r3, #4
  401038:	d0f8      	beq.n	40102c <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  40103a:	2302      	movs	r3, #2
  40103c:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  40103e:	6a03      	ldr	r3, [r0, #32]
  401040:	f013 0f01 	tst.w	r3, #1
  401044:	d0fb      	beq.n	40103e <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  401046:	2000      	movs	r0, #0
  401048:	e004      	b.n	401054 <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  40104a:	2001      	movs	r0, #1
  40104c:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  40104e:	2005      	movs	r0, #5
  401050:	e000      	b.n	401054 <twihs_master_write+0x98>
  401052:	2005      	movs	r0, #5
}
  401054:	bc70      	pop	{r4, r5, r6}
  401056:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401058:	2005      	movs	r0, #5
  40105a:	e7fb      	b.n	401054 <twihs_master_write+0x98>

0040105c <xdmac_configure_transfer>:
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  40105c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  401060:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  401062:	6853      	ldr	r3, [r2, #4]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  401064:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  401066:	6893      	ldr	r3, [r2, #8]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  401068:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  40106a:	6813      	ldr	r3, [r2, #0]
  40106c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401070:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  401072:	6913      	ldr	r3, [r2, #16]
  401074:	f3c3 030b 	ubfx	r3, r3, #0, #12
  401078:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  40107a:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  40107c:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  40107e:	6993      	ldr	r3, [r2, #24]
  401080:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401084:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  401088:	69d3      	ldr	r3, [r2, #28]
  40108a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40108e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  401092:	68d3      	ldr	r3, [r2, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  401094:	678b      	str	r3, [r1, #120]	; 0x78
  401096:	4770      	bx	lr

00401098 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401098:	e7fe      	b.n	401098 <Dummy_Handler>
	...

0040109c <Reset_Handler>:
{
  40109c:	b500      	push	{lr}
  40109e:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4010a0:	4b25      	ldr	r3, [pc, #148]	; (401138 <Reset_Handler+0x9c>)
  4010a2:	4a26      	ldr	r2, [pc, #152]	; (40113c <Reset_Handler+0xa0>)
  4010a4:	429a      	cmp	r2, r3
  4010a6:	d010      	beq.n	4010ca <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4010a8:	4b25      	ldr	r3, [pc, #148]	; (401140 <Reset_Handler+0xa4>)
  4010aa:	4a23      	ldr	r2, [pc, #140]	; (401138 <Reset_Handler+0x9c>)
  4010ac:	429a      	cmp	r2, r3
  4010ae:	d20c      	bcs.n	4010ca <Reset_Handler+0x2e>
  4010b0:	3b01      	subs	r3, #1
  4010b2:	1a9b      	subs	r3, r3, r2
  4010b4:	f023 0303 	bic.w	r3, r3, #3
  4010b8:	3304      	adds	r3, #4
  4010ba:	4413      	add	r3, r2
  4010bc:	491f      	ldr	r1, [pc, #124]	; (40113c <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4010be:	f851 0b04 	ldr.w	r0, [r1], #4
  4010c2:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4010c6:	429a      	cmp	r2, r3
  4010c8:	d1f9      	bne.n	4010be <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4010ca:	4b1e      	ldr	r3, [pc, #120]	; (401144 <Reset_Handler+0xa8>)
  4010cc:	4a1e      	ldr	r2, [pc, #120]	; (401148 <Reset_Handler+0xac>)
  4010ce:	429a      	cmp	r2, r3
  4010d0:	d20a      	bcs.n	4010e8 <Reset_Handler+0x4c>
  4010d2:	3b01      	subs	r3, #1
  4010d4:	1a9b      	subs	r3, r3, r2
  4010d6:	f023 0303 	bic.w	r3, r3, #3
  4010da:	3304      	adds	r3, #4
  4010dc:	4413      	add	r3, r2
                *pDest++ = 0;
  4010de:	2100      	movs	r1, #0
  4010e0:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4010e4:	4293      	cmp	r3, r2
  4010e6:	d1fb      	bne.n	4010e0 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4010e8:	4a18      	ldr	r2, [pc, #96]	; (40114c <Reset_Handler+0xb0>)
  4010ea:	4b19      	ldr	r3, [pc, #100]	; (401150 <Reset_Handler+0xb4>)
  4010ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4010f0:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4010f2:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4010f6:	fab3 f383 	clz	r3, r3
  4010fa:	095b      	lsrs	r3, r3, #5
  4010fc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4010fe:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401100:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401104:	2200      	movs	r2, #0
  401106:	4b13      	ldr	r3, [pc, #76]	; (401154 <Reset_Handler+0xb8>)
  401108:	701a      	strb	r2, [r3, #0]
	return flags;
  40110a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  40110c:	4a12      	ldr	r2, [pc, #72]	; (401158 <Reset_Handler+0xbc>)
  40110e:	6813      	ldr	r3, [r2, #0]
  401110:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401114:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401116:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40111a:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40111e:	b129      	cbz	r1, 40112c <Reset_Handler+0x90>
		cpu_irq_enable();
  401120:	2201      	movs	r2, #1
  401122:	4b0c      	ldr	r3, [pc, #48]	; (401154 <Reset_Handler+0xb8>)
  401124:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401126:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40112a:	b662      	cpsie	i
        __libc_init_array();
  40112c:	4b0b      	ldr	r3, [pc, #44]	; (40115c <Reset_Handler+0xc0>)
  40112e:	4798      	blx	r3
        main();
  401130:	4b0b      	ldr	r3, [pc, #44]	; (401160 <Reset_Handler+0xc4>)
  401132:	4798      	blx	r3
  401134:	e7fe      	b.n	401134 <Reset_Handler+0x98>
  401136:	bf00      	nop
  401138:	20400000 	.word	0x20400000
  40113c:	00404614 	.word	0x00404614
  401140:	204009c0 	.word	0x204009c0
  401144:	20401f10 	.word	0x20401f10
  401148:	204009c0 	.word	0x204009c0
  40114c:	e000ed00 	.word	0xe000ed00
  401150:	00400000 	.word	0x00400000
  401154:	2040000a 	.word	0x2040000a
  401158:	e000ed88 	.word	0xe000ed88
  40115c:	00401685 	.word	0x00401685
  401160:	00401585 	.word	0x00401585

00401164 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401164:	4b3b      	ldr	r3, [pc, #236]	; (401254 <SystemCoreClockUpdate+0xf0>)
  401166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401168:	f003 0303 	and.w	r3, r3, #3
  40116c:	2b01      	cmp	r3, #1
  40116e:	d01d      	beq.n	4011ac <SystemCoreClockUpdate+0x48>
  401170:	b183      	cbz	r3, 401194 <SystemCoreClockUpdate+0x30>
  401172:	2b02      	cmp	r3, #2
  401174:	d036      	beq.n	4011e4 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401176:	4b37      	ldr	r3, [pc, #220]	; (401254 <SystemCoreClockUpdate+0xf0>)
  401178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40117a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40117e:	2b70      	cmp	r3, #112	; 0x70
  401180:	d05f      	beq.n	401242 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401182:	4b34      	ldr	r3, [pc, #208]	; (401254 <SystemCoreClockUpdate+0xf0>)
  401184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401186:	4934      	ldr	r1, [pc, #208]	; (401258 <SystemCoreClockUpdate+0xf4>)
  401188:	f3c2 1202 	ubfx	r2, r2, #4, #3
  40118c:	680b      	ldr	r3, [r1, #0]
  40118e:	40d3      	lsrs	r3, r2
  401190:	600b      	str	r3, [r1, #0]
  401192:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401194:	4b31      	ldr	r3, [pc, #196]	; (40125c <SystemCoreClockUpdate+0xf8>)
  401196:	695b      	ldr	r3, [r3, #20]
  401198:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40119c:	bf14      	ite	ne
  40119e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4011a2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4011a6:	4b2c      	ldr	r3, [pc, #176]	; (401258 <SystemCoreClockUpdate+0xf4>)
  4011a8:	601a      	str	r2, [r3, #0]
  4011aa:	e7e4      	b.n	401176 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4011ac:	4b29      	ldr	r3, [pc, #164]	; (401254 <SystemCoreClockUpdate+0xf0>)
  4011ae:	6a1b      	ldr	r3, [r3, #32]
  4011b0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4011b4:	d003      	beq.n	4011be <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4011b6:	4a2a      	ldr	r2, [pc, #168]	; (401260 <SystemCoreClockUpdate+0xfc>)
  4011b8:	4b27      	ldr	r3, [pc, #156]	; (401258 <SystemCoreClockUpdate+0xf4>)
  4011ba:	601a      	str	r2, [r3, #0]
  4011bc:	e7db      	b.n	401176 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4011be:	4a29      	ldr	r2, [pc, #164]	; (401264 <SystemCoreClockUpdate+0x100>)
  4011c0:	4b25      	ldr	r3, [pc, #148]	; (401258 <SystemCoreClockUpdate+0xf4>)
  4011c2:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4011c4:	4b23      	ldr	r3, [pc, #140]	; (401254 <SystemCoreClockUpdate+0xf0>)
  4011c6:	6a1b      	ldr	r3, [r3, #32]
  4011c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4011cc:	2b10      	cmp	r3, #16
  4011ce:	d005      	beq.n	4011dc <SystemCoreClockUpdate+0x78>
  4011d0:	2b20      	cmp	r3, #32
  4011d2:	d1d0      	bne.n	401176 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4011d4:	4a22      	ldr	r2, [pc, #136]	; (401260 <SystemCoreClockUpdate+0xfc>)
  4011d6:	4b20      	ldr	r3, [pc, #128]	; (401258 <SystemCoreClockUpdate+0xf4>)
  4011d8:	601a      	str	r2, [r3, #0]
          break;
  4011da:	e7cc      	b.n	401176 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4011dc:	4a22      	ldr	r2, [pc, #136]	; (401268 <SystemCoreClockUpdate+0x104>)
  4011de:	4b1e      	ldr	r3, [pc, #120]	; (401258 <SystemCoreClockUpdate+0xf4>)
  4011e0:	601a      	str	r2, [r3, #0]
          break;
  4011e2:	e7c8      	b.n	401176 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4011e4:	4b1b      	ldr	r3, [pc, #108]	; (401254 <SystemCoreClockUpdate+0xf0>)
  4011e6:	6a1b      	ldr	r3, [r3, #32]
  4011e8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4011ec:	d016      	beq.n	40121c <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4011ee:	4a1c      	ldr	r2, [pc, #112]	; (401260 <SystemCoreClockUpdate+0xfc>)
  4011f0:	4b19      	ldr	r3, [pc, #100]	; (401258 <SystemCoreClockUpdate+0xf4>)
  4011f2:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4011f4:	4b17      	ldr	r3, [pc, #92]	; (401254 <SystemCoreClockUpdate+0xf0>)
  4011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4011f8:	f003 0303 	and.w	r3, r3, #3
  4011fc:	2b02      	cmp	r3, #2
  4011fe:	d1ba      	bne.n	401176 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401200:	4a14      	ldr	r2, [pc, #80]	; (401254 <SystemCoreClockUpdate+0xf0>)
  401202:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401204:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401206:	4814      	ldr	r0, [pc, #80]	; (401258 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401208:	f3c1 410a 	ubfx	r1, r1, #16, #11
  40120c:	6803      	ldr	r3, [r0, #0]
  40120e:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401212:	b2d2      	uxtb	r2, r2
  401214:	fbb3 f3f2 	udiv	r3, r3, r2
  401218:	6003      	str	r3, [r0, #0]
  40121a:	e7ac      	b.n	401176 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40121c:	4a11      	ldr	r2, [pc, #68]	; (401264 <SystemCoreClockUpdate+0x100>)
  40121e:	4b0e      	ldr	r3, [pc, #56]	; (401258 <SystemCoreClockUpdate+0xf4>)
  401220:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401222:	4b0c      	ldr	r3, [pc, #48]	; (401254 <SystemCoreClockUpdate+0xf0>)
  401224:	6a1b      	ldr	r3, [r3, #32]
  401226:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40122a:	2b10      	cmp	r3, #16
  40122c:	d005      	beq.n	40123a <SystemCoreClockUpdate+0xd6>
  40122e:	2b20      	cmp	r3, #32
  401230:	d1e0      	bne.n	4011f4 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401232:	4a0b      	ldr	r2, [pc, #44]	; (401260 <SystemCoreClockUpdate+0xfc>)
  401234:	4b08      	ldr	r3, [pc, #32]	; (401258 <SystemCoreClockUpdate+0xf4>)
  401236:	601a      	str	r2, [r3, #0]
          break;
  401238:	e7dc      	b.n	4011f4 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40123a:	4a0b      	ldr	r2, [pc, #44]	; (401268 <SystemCoreClockUpdate+0x104>)
  40123c:	4b06      	ldr	r3, [pc, #24]	; (401258 <SystemCoreClockUpdate+0xf4>)
  40123e:	601a      	str	r2, [r3, #0]
          break;
  401240:	e7d8      	b.n	4011f4 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401242:	4a05      	ldr	r2, [pc, #20]	; (401258 <SystemCoreClockUpdate+0xf4>)
  401244:	6813      	ldr	r3, [r2, #0]
  401246:	4909      	ldr	r1, [pc, #36]	; (40126c <SystemCoreClockUpdate+0x108>)
  401248:	fba1 1303 	umull	r1, r3, r1, r3
  40124c:	085b      	lsrs	r3, r3, #1
  40124e:	6013      	str	r3, [r2, #0]
  401250:	4770      	bx	lr
  401252:	bf00      	nop
  401254:	400e0600 	.word	0x400e0600
  401258:	2040000c 	.word	0x2040000c
  40125c:	400e1810 	.word	0x400e1810
  401260:	00b71b00 	.word	0x00b71b00
  401264:	003d0900 	.word	0x003d0900
  401268:	007a1200 	.word	0x007a1200
  40126c:	aaaaaaab 	.word	0xaaaaaaab

00401270 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401270:	4b16      	ldr	r3, [pc, #88]	; (4012cc <system_init_flash+0x5c>)
  401272:	4298      	cmp	r0, r3
  401274:	d913      	bls.n	40129e <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401276:	4b16      	ldr	r3, [pc, #88]	; (4012d0 <system_init_flash+0x60>)
  401278:	4298      	cmp	r0, r3
  40127a:	d915      	bls.n	4012a8 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  40127c:	4b15      	ldr	r3, [pc, #84]	; (4012d4 <system_init_flash+0x64>)
  40127e:	4298      	cmp	r0, r3
  401280:	d916      	bls.n	4012b0 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401282:	4b15      	ldr	r3, [pc, #84]	; (4012d8 <system_init_flash+0x68>)
  401284:	4298      	cmp	r0, r3
  401286:	d917      	bls.n	4012b8 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401288:	4b14      	ldr	r3, [pc, #80]	; (4012dc <system_init_flash+0x6c>)
  40128a:	4298      	cmp	r0, r3
  40128c:	d918      	bls.n	4012c0 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  40128e:	4b14      	ldr	r3, [pc, #80]	; (4012e0 <system_init_flash+0x70>)
  401290:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401292:	bf94      	ite	ls
  401294:	4a13      	ldrls	r2, [pc, #76]	; (4012e4 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401296:	4a14      	ldrhi	r2, [pc, #80]	; (4012e8 <system_init_flash+0x78>)
  401298:	4b14      	ldr	r3, [pc, #80]	; (4012ec <system_init_flash+0x7c>)
  40129a:	601a      	str	r2, [r3, #0]
  40129c:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40129e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4012a2:	4b12      	ldr	r3, [pc, #72]	; (4012ec <system_init_flash+0x7c>)
  4012a4:	601a      	str	r2, [r3, #0]
  4012a6:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4012a8:	4a11      	ldr	r2, [pc, #68]	; (4012f0 <system_init_flash+0x80>)
  4012aa:	4b10      	ldr	r3, [pc, #64]	; (4012ec <system_init_flash+0x7c>)
  4012ac:	601a      	str	r2, [r3, #0]
  4012ae:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4012b0:	4a10      	ldr	r2, [pc, #64]	; (4012f4 <system_init_flash+0x84>)
  4012b2:	4b0e      	ldr	r3, [pc, #56]	; (4012ec <system_init_flash+0x7c>)
  4012b4:	601a      	str	r2, [r3, #0]
  4012b6:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4012b8:	4a0f      	ldr	r2, [pc, #60]	; (4012f8 <system_init_flash+0x88>)
  4012ba:	4b0c      	ldr	r3, [pc, #48]	; (4012ec <system_init_flash+0x7c>)
  4012bc:	601a      	str	r2, [r3, #0]
  4012be:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4012c0:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4012c4:	4b09      	ldr	r3, [pc, #36]	; (4012ec <system_init_flash+0x7c>)
  4012c6:	601a      	str	r2, [r3, #0]
  4012c8:	4770      	bx	lr
  4012ca:	bf00      	nop
  4012cc:	015ef3bf 	.word	0x015ef3bf
  4012d0:	02bde77f 	.word	0x02bde77f
  4012d4:	041cdb3f 	.word	0x041cdb3f
  4012d8:	057bceff 	.word	0x057bceff
  4012dc:	06dac2bf 	.word	0x06dac2bf
  4012e0:	0839b67f 	.word	0x0839b67f
  4012e4:	04000500 	.word	0x04000500
  4012e8:	04000600 	.word	0x04000600
  4012ec:	400e0c00 	.word	0x400e0c00
  4012f0:	04000100 	.word	0x04000100
  4012f4:	04000200 	.word	0x04000200
  4012f8:	04000300 	.word	0x04000300

004012fc <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4012fc:	4b0a      	ldr	r3, [pc, #40]	; (401328 <_sbrk+0x2c>)
  4012fe:	681b      	ldr	r3, [r3, #0]
  401300:	b153      	cbz	r3, 401318 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401302:	4b09      	ldr	r3, [pc, #36]	; (401328 <_sbrk+0x2c>)
  401304:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401306:	181a      	adds	r2, r3, r0
  401308:	4908      	ldr	r1, [pc, #32]	; (40132c <_sbrk+0x30>)
  40130a:	4291      	cmp	r1, r2
  40130c:	db08      	blt.n	401320 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  40130e:	4610      	mov	r0, r2
  401310:	4a05      	ldr	r2, [pc, #20]	; (401328 <_sbrk+0x2c>)
  401312:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401314:	4618      	mov	r0, r3
  401316:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401318:	4a05      	ldr	r2, [pc, #20]	; (401330 <_sbrk+0x34>)
  40131a:	4b03      	ldr	r3, [pc, #12]	; (401328 <_sbrk+0x2c>)
  40131c:	601a      	str	r2, [r3, #0]
  40131e:	e7f0      	b.n	401302 <_sbrk+0x6>
		return (caddr_t) -1;	
  401320:	f04f 30ff 	mov.w	r0, #4294967295
}
  401324:	4770      	bx	lr
  401326:	bf00      	nop
  401328:	20400a8c 	.word	0x20400a8c
  40132c:	2045fffc 	.word	0x2045fffc
  401330:	20404110 	.word	0x20404110

00401334 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401334:	f04f 30ff 	mov.w	r0, #4294967295
  401338:	4770      	bx	lr

0040133a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40133a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40133e:	604b      	str	r3, [r1, #4]

	return 0;
}
  401340:	2000      	movs	r0, #0
  401342:	4770      	bx	lr

00401344 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401344:	2001      	movs	r0, #1
  401346:	4770      	bx	lr

00401348 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401348:	2000      	movs	r0, #0
  40134a:	4770      	bx	lr

0040134c <SCB_CleanInvalidateDCache>:
/** \brief Clean & Invalidate D-Cache

    The function cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache(void)
{
  40134c:	b5f0      	push	{r4, r5, r6, r7, lr}
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  40134e:	4b18      	ldr	r3, [pc, #96]	; (4013b0 <SCB_CleanInvalidateDCache+0x64>)
  401350:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  401354:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  401358:	f007 0007 	and.w	r0, r7, #7
  40135c:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40135e:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  401362:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  401366:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  40136a:	f3bf 8f4f 	dsb	sy
  40136e:	f04f 34ff 	mov.w	r4, #4294967295
  401372:	fa04 fc00 	lsl.w	ip, r4, r0
  401376:	fa06 f000 	lsl.w	r0, r6, r0
  40137a:	fa04 f40e 	lsl.w	r4, r4, lr
  40137e:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // clean & invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCCISW = sw;
  401382:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  401384:	463a      	mov	r2, r7
  401386:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  401388:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  40138c:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  401390:	3a01      	subs	r2, #1
  401392:	4423      	add	r3, r4
  401394:	f1b2 3fff 	cmp.w	r2, #4294967295
  401398:	d1f6      	bne.n	401388 <SCB_CleanInvalidateDCache+0x3c>
        } while(sets--);
  40139a:	3e01      	subs	r6, #1
  40139c:	4460      	add	r0, ip
  40139e:	f1b6 3fff 	cmp.w	r6, #4294967295
  4013a2:	d1ef      	bne.n	401384 <SCB_CleanInvalidateDCache+0x38>
  4013a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4013a8:	f3bf 8f6f 	isb	sy
  4013ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4013ae:	bf00      	nop
  4013b0:	e000ed00 	.word	0xe000ed00

004013b4 <XDMAC_Handler>:
volatile uint16_t *readPtr;
volatile uint16_t *writePtr;

/* XDMAC interrupt handler */
void XDMAC_Handler(void)
{
  4013b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4013b8:	b082      	sub	sp, #8
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4013ba:	4b65      	ldr	r3, [pc, #404]	; (401550 <XDMAC_Handler+0x19c>)
  4013bc:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
    ccsidr  = SCB->CCSIDR;
  4013be:	4b65      	ldr	r3, [pc, #404]	; (401554 <XDMAC_Handler+0x1a0>)
  4013c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4013c4:	f3c3 374e 	ubfx	r7, r3, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4013c8:	f003 0007 	and.w	r0, r3, #7
  4013cc:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4013ce:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4013d2:	fabe fc8e 	clz	ip, lr
    wshift  = __CLZ(ways) & 0x1f;
  4013d6:	f00c 0c1f 	and.w	ip, ip, #31
  __ASM volatile ("dsb");
  4013da:	f3bf 8f4f 	dsb	sy
  4013de:	f04f 34ff 	mov.w	r4, #4294967295
  4013e2:	fa04 f800 	lsl.w	r8, r4, r0
  4013e6:	fa07 f000 	lsl.w	r0, r7, r0
  4013ea:	fa04 f40c 	lsl.w	r4, r4, ip
  4013ee:	fa0e fc0c 	lsl.w	ip, lr, ip
              SCB->DCCSW = sw;
  4013f2:	4e58      	ldr	r6, [pc, #352]	; (401554 <XDMAC_Handler+0x1a0>)
         int32_t tmpways = ways;
  4013f4:	4672      	mov	r2, lr
  4013f6:	4663      	mov	r3, ip
              sw = ((tmpways << wshift) | (sets << sshift));
  4013f8:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCSW = sw;
  4013fc:	f8c6 126c 	str.w	r1, [r6, #620]	; 0x26c
            } while(tmpways--);
  401400:	3a01      	subs	r2, #1
  401402:	4423      	add	r3, r4
  401404:	f1b2 3fff 	cmp.w	r2, #4294967295
  401408:	d1f6      	bne.n	4013f8 <XDMAC_Handler+0x44>
        } while(sets--);
  40140a:	3f01      	subs	r7, #1
  40140c:	4440      	add	r0, r8
  40140e:	f1b7 3fff 	cmp.w	r7, #4294967295
  401412:	d1ef      	bne.n	4013f4 <XDMAC_Handler+0x40>
  401414:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401418:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  40141c:	4b4d      	ldr	r3, [pc, #308]	; (401554 <XDMAC_Handler+0x1a0>)
  40141e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  401422:	f3c3 374e 	ubfx	r7, r3, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  401426:	f003 0007 	and.w	r0, r3, #7
  40142a:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40142c:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  401430:	fabe fc8e 	clz	ip, lr
    wshift  = __CLZ(ways) & 0x1f;
  401434:	f00c 0c1f 	and.w	ip, ip, #31
  __ASM volatile ("dsb");
  401438:	f3bf 8f4f 	dsb	sy
  40143c:	f04f 34ff 	mov.w	r4, #4294967295
  401440:	fa04 f800 	lsl.w	r8, r4, r0
  401444:	fa07 f000 	lsl.w	r0, r7, r0
  401448:	fa04 f40c 	lsl.w	r4, r4, ip
  40144c:	fa0e fc0c 	lsl.w	ip, lr, ip
              SCB->DCISW = sw;
  401450:	4e40      	ldr	r6, [pc, #256]	; (401554 <XDMAC_Handler+0x1a0>)
         int32_t tmpways = ways;
  401452:	4672      	mov	r2, lr
  401454:	4663      	mov	r3, ip
              sw = ((tmpways << wshift) | (sets << sshift));
  401456:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCISW = sw;
  40145a:	f8c6 1260 	str.w	r1, [r6, #608]	; 0x260
            } while(tmpways--);
  40145e:	3a01      	subs	r2, #1
  401460:	4423      	add	r3, r4
  401462:	f1b2 3fff 	cmp.w	r2, #4294967295
  401466:	d1f6      	bne.n	401456 <XDMAC_Handler+0xa2>
        } while(sets--);
  401468:	3f01      	subs	r7, #1
  40146a:	4440      	add	r0, r8
  40146c:	f1b7 3fff 	cmp.w	r7, #4294967295
  401470:	d1ef      	bne.n	401452 <XDMAC_Handler+0x9e>
  401472:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401476:	f3bf 8f6f 	isb	sy
	uint32_t dma_status;
	
	dma_status = xdmac_channel_get_interrupt_status(XDMAC, XDMA_CH_SSC_RX);
	SCB_CleanDCache(); 	
	SCB_InvalidateDCache();
	if (dma_status & XDMAC_CIS_BIS)
  40147a:	f015 0f01 	tst.w	r5, #1
  40147e:	d00b      	beq.n	401498 <XDMAC_Handler+0xe4>
	{
		flag = 1;
  401480:	2201      	movs	r2, #1
  401482:	4b35      	ldr	r3, [pc, #212]	; (401558 <XDMAC_Handler+0x1a4>)
  401484:	601a      	str	r2, [r3, #0]
		
		if (readPtrFlag == 0)
  401486:	4b35      	ldr	r3, [pc, #212]	; (40155c <XDMAC_Handler+0x1a8>)
  401488:	681b      	ldr	r3, [r3, #0]
  40148a:	bb2b      	cbnz	r3, 4014d8 <XDMAC_Handler+0x124>
		{
			readPtr = &ReadBuffer[0];
  40148c:	4a34      	ldr	r2, [pc, #208]	; (401560 <XDMAC_Handler+0x1ac>)
  40148e:	4b35      	ldr	r3, [pc, #212]	; (401564 <XDMAC_Handler+0x1b0>)
  401490:	601a      	str	r2, [r3, #0]
			readPtrFlag = 1;
  401492:	2201      	movs	r2, #1
  401494:	4b31      	ldr	r3, [pc, #196]	; (40155c <XDMAC_Handler+0x1a8>)
  401496:	601a      	str	r2, [r3, #0]
  401498:	4b2d      	ldr	r3, [pc, #180]	; (401550 <XDMAC_Handler+0x19c>)
  40149a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
			readPtrFlag = 0; 
		}
	}
	
	dma_status = xdmac_channel_get_interrupt_status(XDMAC, XDMA_CH_SSC_TX);
	if (dma_status & XDMAC_CIS_BIS)
  40149e:	f013 0f01 	tst.w	r3, #1
  4014a2:	d051      	beq.n	401548 <XDMAC_Handler+0x194>
	{
		if (writePtrFlag == 0)
  4014a4:	4b30      	ldr	r3, [pc, #192]	; (401568 <XDMAC_Handler+0x1b4>)
  4014a6:	681b      	ldr	r3, [r3, #0]
  4014a8:	b9eb      	cbnz	r3, 4014e6 <XDMAC_Handler+0x132>
		{
			writePtr = &WriteBuffer[0];
  4014aa:	4a30      	ldr	r2, [pc, #192]	; (40156c <XDMAC_Handler+0x1b8>)
  4014ac:	4b30      	ldr	r3, [pc, #192]	; (401570 <XDMAC_Handler+0x1bc>)
  4014ae:	601a      	str	r2, [r3, #0]
			writePtrFlag = 1; 
  4014b0:	2201      	movs	r2, #1
  4014b2:	4b2d      	ldr	r3, [pc, #180]	; (401568 <XDMAC_Handler+0x1b4>)
  4014b4:	601a      	str	r2, [r3, #0]
			writePtr = &WriteBuffer[MICROBLOCK_LEN];
			writePtrFlag = 0; 
		}
		
		volatile int i;
		volatile int16_t readValue = 0;
  4014b6:	2300      	movs	r3, #0
  4014b8:	f8ad 3002 	strh.w	r3, [sp, #2]
		//volatile uint16_t a = 0; volatile uint16_t b = 0;
		for (i = 0; i < MICROBLOCK_LEN; i++)
  4014bc:	9301      	str	r3, [sp, #4]
  4014be:	9b01      	ldr	r3, [sp, #4]
  4014c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4014c4:	da40      	bge.n	401548 <XDMAC_Handler+0x194>
		{
			readValue = readPtr[i] - 0x7FFF;
  4014c6:	4d27      	ldr	r5, [pc, #156]	; (401564 <XDMAC_Handler+0x1b0>)
  4014c8:	4c2a      	ldr	r4, [pc, #168]	; (401574 <XDMAC_Handler+0x1c0>)
			//readValue = readPtr[i+1];
			//writePtr[i] = (uint16_t)( ((uint32_t)readValue + (uint32_t)SIN_WAVE[sinIdx]) /2);
					
			//writePtr[i] = SIN_WAVE[sinIdx];
			readValue = readValue ;
			writePtr[i] = readValue + 0x7FFF;
  4014ca:	4829      	ldr	r0, [pc, #164]	; (401570 <XDMAC_Handler+0x1bc>)
  4014cc:	f647 71ff 	movw	r1, #32767	; 0x7fff
			//ProcessBuffer[i] = readPtr[i];
			if ((i&1))
				sinIdx++;
  4014d0:	4a29      	ldr	r2, [pc, #164]	; (401578 <XDMAC_Handler+0x1c4>)
					
			if (sinIdx == 44)
			sinIdx = 0;
  4014d2:	f04f 0e00 	mov.w	lr, #0
  4014d6:	e017      	b.n	401508 <XDMAC_Handler+0x154>
			readPtr = &ReadBuffer[MICROBLOCK_LEN];
  4014d8:	4a28      	ldr	r2, [pc, #160]	; (40157c <XDMAC_Handler+0x1c8>)
  4014da:	4b22      	ldr	r3, [pc, #136]	; (401564 <XDMAC_Handler+0x1b0>)
  4014dc:	601a      	str	r2, [r3, #0]
			readPtrFlag = 0; 
  4014de:	2200      	movs	r2, #0
  4014e0:	4b1e      	ldr	r3, [pc, #120]	; (40155c <XDMAC_Handler+0x1a8>)
  4014e2:	601a      	str	r2, [r3, #0]
  4014e4:	e7d8      	b.n	401498 <XDMAC_Handler+0xe4>
			writePtr = &WriteBuffer[MICROBLOCK_LEN];
  4014e6:	4a26      	ldr	r2, [pc, #152]	; (401580 <XDMAC_Handler+0x1cc>)
  4014e8:	4b21      	ldr	r3, [pc, #132]	; (401570 <XDMAC_Handler+0x1bc>)
  4014ea:	601a      	str	r2, [r3, #0]
			writePtrFlag = 0; 
  4014ec:	2200      	movs	r2, #0
  4014ee:	4b1e      	ldr	r3, [pc, #120]	; (401568 <XDMAC_Handler+0x1b4>)
  4014f0:	601a      	str	r2, [r3, #0]
  4014f2:	e7e0      	b.n	4014b6 <XDMAC_Handler+0x102>
			if (sinIdx == 44)
  4014f4:	6813      	ldr	r3, [r2, #0]
  4014f6:	2b2c      	cmp	r3, #44	; 0x2c
  4014f8:	d023      	beq.n	401542 <XDMAC_Handler+0x18e>
		for (i = 0; i < MICROBLOCK_LEN; i++)
  4014fa:	9b01      	ldr	r3, [sp, #4]
  4014fc:	3301      	adds	r3, #1
  4014fe:	9301      	str	r3, [sp, #4]
  401500:	9b01      	ldr	r3, [sp, #4]
  401502:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401506:	da1f      	bge.n	401548 <XDMAC_Handler+0x194>
			readValue = readPtr[i] - 0x7FFF;
  401508:	9f01      	ldr	r7, [sp, #4]
  40150a:	682b      	ldr	r3, [r5, #0]
  40150c:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
  401510:	fa14 f383 	uxtah	r3, r4, r3
  401514:	b21b      	sxth	r3, r3
  401516:	f8ad 3002 	strh.w	r3, [sp, #2]
			readValue = readValue ;
  40151a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
  40151e:	f8ad 3002 	strh.w	r3, [sp, #2]
			writePtr[i] = readValue + 0x7FFF;
  401522:	9f01      	ldr	r7, [sp, #4]
  401524:	f8bd 3002 	ldrh.w	r3, [sp, #2]
  401528:	440b      	add	r3, r1
  40152a:	b29b      	uxth	r3, r3
  40152c:	6806      	ldr	r6, [r0, #0]
  40152e:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
			if ((i&1))
  401532:	9b01      	ldr	r3, [sp, #4]
  401534:	f013 0f01 	tst.w	r3, #1
  401538:	d0dc      	beq.n	4014f4 <XDMAC_Handler+0x140>
				sinIdx++;
  40153a:	6813      	ldr	r3, [r2, #0]
  40153c:	3301      	adds	r3, #1
  40153e:	6013      	str	r3, [r2, #0]
  401540:	e7d8      	b.n	4014f4 <XDMAC_Handler+0x140>
			sinIdx = 0;
  401542:	f8c2 e000 	str.w	lr, [r2]
  401546:	e7d8      	b.n	4014fa <XDMAC_Handler+0x146>
		}
		
	}

}
  401548:	b002      	add	sp, #8
  40154a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40154e:	bf00      	nop
  401550:	40078000 	.word	0x40078000
  401554:	e000ed00 	.word	0xe000ed00
  401558:	20401edc 	.word	0x20401edc
  40155c:	20400a90 	.word	0x20400a90
  401560:	204012d0 	.word	0x204012d0
  401564:	20401ee0 	.word	0x20401ee0
  401568:	20400a98 	.word	0x20400a98
  40156c:	20400ad0 	.word	0x20400ad0
  401570:	20401ee4 	.word	0x20401ee4
  401574:	ffff8001 	.word	0xffff8001
  401578:	20400a94 	.word	0x20400a94
  40157c:	204016d0 	.word	0x204016d0
  401580:	20400ed0 	.word	0x20400ed0

00401584 <main>:

int main(void)
{
  401584:	b500      	push	{lr}
  401586:	b083      	sub	sp, #12
    /* Initialize the SAM system. */
    sysclk_init();
  401588:	4b27      	ldr	r3, [pc, #156]	; (401628 <main+0xa4>)
  40158a:	4798      	blx	r3
    board_init();
  40158c:	4b27      	ldr	r3, [pc, #156]	; (40162c <main+0xa8>)
  40158e:	4798      	blx	r3
    
    /* Initialize WM8904 TWI interface*/
    if (wm8904_twi_init() != TWIHS_SUCCESS) {
  401590:	4b27      	ldr	r3, [pc, #156]	; (401630 <main+0xac>)
  401592:	4798      	blx	r3
  401594:	b118      	cbz	r0, 40159e <main+0x1a>
        printf("-E-\tWM8904 initialization failed.\r");
  401596:	4827      	ldr	r0, [pc, #156]	; (401634 <main+0xb0>)
  401598:	4b27      	ldr	r3, [pc, #156]	; (401638 <main+0xb4>)
  40159a:	4798      	blx	r3
  40159c:	e7fe      	b.n	40159c <main+0x18>
            /* Capture error */
        }
    }
    
    /* Configure test LED0 */
    pmc_enable_periph_clk(ID_PIOA);
  40159e:	200a      	movs	r0, #10
  4015a0:	4b26      	ldr	r3, [pc, #152]	; (40163c <main+0xb8>)
  4015a2:	4798      	blx	r3
    pio_set_output(PIOA, PIO_PA23, LOW, DISABLE, ENABLE);
  4015a4:	4c26      	ldr	r4, [pc, #152]	; (401640 <main+0xbc>)
  4015a6:	2601      	movs	r6, #1
  4015a8:	9600      	str	r6, [sp, #0]
  4015aa:	2300      	movs	r3, #0
  4015ac:	461a      	mov	r2, r3
  4015ae:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  4015b2:	4620      	mov	r0, r4
  4015b4:	4d23      	ldr	r5, [pc, #140]	; (401644 <main+0xc0>)
  4015b6:	47a8      	blx	r5
    pio_clear(PIOA, PIO_PA23);
  4015b8:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  4015bc:	4620      	mov	r0, r4
  4015be:	4b22      	ldr	r3, [pc, #136]	; (401648 <main+0xc4>)
  4015c0:	4798      	blx	r3
    
    /* Configure CODEC */
    configure_codec();
  4015c2:	4b22      	ldr	r3, [pc, #136]	; (40164c <main+0xc8>)
  4015c4:	4798      	blx	r3
    
    /* Configure SSC */
    configure_ssc();
  4015c6:	4b22      	ldr	r3, [pc, #136]	; (401650 <main+0xcc>)
  4015c8:	4798      	blx	r3
    
    /* Configure XDMA */
    configure_xdma();
  4015ca:	4b22      	ldr	r3, [pc, #136]	; (401654 <main+0xd0>)
  4015cc:	4798      	blx	r3
    
    /* Enable the DAC master clock */
    pmc_pck_set_prescaler(PMC_PCK_2, PMC_MCKR_PRES_CLK_1);
  4015ce:	2100      	movs	r1, #0
  4015d0:	2002      	movs	r0, #2
  4015d2:	4b21      	ldr	r3, [pc, #132]	; (401658 <main+0xd4>)
  4015d4:	4798      	blx	r3
    pmc_pck_set_source(PMC_PCK_2, PMC_MCKR_CSS_SLOW_CLK);
  4015d6:	2100      	movs	r1, #0
  4015d8:	2002      	movs	r0, #2
  4015da:	4b20      	ldr	r3, [pc, #128]	; (40165c <main+0xd8>)
  4015dc:	4798      	blx	r3
    pmc_enable_pck(PMC_PCK_2);
  4015de:	2002      	movs	r0, #2
  4015e0:	4b1f      	ldr	r3, [pc, #124]	; (401660 <main+0xdc>)
  4015e2:	4798      	blx	r3
    
    /* Start playing */
    ssc_enable_rx(SSC);
  4015e4:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4015e8:	4b1e      	ldr	r3, [pc, #120]	; (401664 <main+0xe0>)
  4015ea:	4798      	blx	r3
	SCB_CleanInvalidateDCache();
  4015ec:	4d1e      	ldr	r5, [pc, #120]	; (401668 <main+0xe4>)
  4015ee:	47a8      	blx	r5
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  4015f0:	4c1e      	ldr	r4, [pc, #120]	; (40166c <main+0xe8>)
  4015f2:	61e6      	str	r6, [r4, #28]
    xdmac_channel_enable(XDMAC, XDMA_CH_SSC_RX);
    delay_ms(300);
  4015f4:	481e      	ldr	r0, [pc, #120]	; (401670 <main+0xec>)
  4015f6:	4b1f      	ldr	r3, [pc, #124]	; (401674 <main+0xf0>)
  4015f8:	4798      	blx	r3
    ssc_enable_tx(SSC);
  4015fa:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4015fe:	4b1e      	ldr	r3, [pc, #120]	; (401678 <main+0xf4>)
  401600:	4798      	blx	r3
	SCB_CleanInvalidateDCache();
  401602:	47a8      	blx	r5
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  401604:	2302      	movs	r3, #2
  401606:	61e3      	str	r3, [r4, #28]
    xdmac_channel_enable(XDMAC, XDMA_CH_SSC_TX);
    
    flag = 0;
  401608:	2200      	movs	r2, #0
  40160a:	4b1c      	ldr	r3, [pc, #112]	; (40167c <main+0xf8>)
  40160c:	601a      	str	r2, [r3, #0]
    while(1)
    {
        
        if(flag)
  40160e:	461c      	mov	r4, r3
        {
            pio_set(PIOA, PIO_PA23);
  401610:	4e0b      	ldr	r6, [pc, #44]	; (401640 <main+0xbc>)
  401612:	4d1b      	ldr	r5, [pc, #108]	; (401680 <main+0xfc>)
        if(flag)
  401614:	6823      	ldr	r3, [r4, #0]
  401616:	2b00      	cmp	r3, #0
  401618:	d0fc      	beq.n	401614 <main+0x90>
            pio_set(PIOA, PIO_PA23);
  40161a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  40161e:	4630      	mov	r0, r6
  401620:	47a8      	blx	r5
			flag = 0;		
  401622:	2300      	movs	r3, #0
  401624:	6023      	str	r3, [r4, #0]
  401626:	e7f5      	b.n	401614 <main+0x90>
  401628:	00400479 	.word	0x00400479
  40162c:	00400579 	.word	0x00400579
  401630:	004007d5 	.word	0x004007d5
  401634:	0040445c 	.word	0x0040445c
  401638:	004016d5 	.word	0x004016d5
  40163c:	00400c51 	.word	0x00400c51
  401640:	400e0e00 	.word	0x400e0e00
  401644:	0040091d 	.word	0x0040091d
  401648:	00400851 	.word	0x00400851
  40164c:	00400351 	.word	0x00400351
  401650:	00400295 	.word	0x00400295
  401654:	004001ad 	.word	0x004001ad
  401658:	00400ca5 	.word	0x00400ca5
  40165c:	00400cd1 	.word	0x00400cd1
  401660:	00400cfd 	.word	0x00400cfd
  401664:	00400d25 	.word	0x00400d25
  401668:	0040134d 	.word	0x0040134d
  40166c:	40078000 	.word	0x40078000
  401670:	0073c0b7 	.word	0x0073c0b7
  401674:	20400001 	.word	0x20400001
  401678:	00400d31 	.word	0x00400d31
  40167c:	20401edc 	.word	0x20401edc
  401680:	0040084d 	.word	0x0040084d

00401684 <__libc_init_array>:
  401684:	b570      	push	{r4, r5, r6, lr}
  401686:	4e0f      	ldr	r6, [pc, #60]	; (4016c4 <__libc_init_array+0x40>)
  401688:	4d0f      	ldr	r5, [pc, #60]	; (4016c8 <__libc_init_array+0x44>)
  40168a:	1b76      	subs	r6, r6, r5
  40168c:	10b6      	asrs	r6, r6, #2
  40168e:	bf18      	it	ne
  401690:	2400      	movne	r4, #0
  401692:	d005      	beq.n	4016a0 <__libc_init_array+0x1c>
  401694:	3401      	adds	r4, #1
  401696:	f855 3b04 	ldr.w	r3, [r5], #4
  40169a:	4798      	blx	r3
  40169c:	42a6      	cmp	r6, r4
  40169e:	d1f9      	bne.n	401694 <__libc_init_array+0x10>
  4016a0:	4e0a      	ldr	r6, [pc, #40]	; (4016cc <__libc_init_array+0x48>)
  4016a2:	4d0b      	ldr	r5, [pc, #44]	; (4016d0 <__libc_init_array+0x4c>)
  4016a4:	1b76      	subs	r6, r6, r5
  4016a6:	f002 ff9f 	bl	4045e8 <_init>
  4016aa:	10b6      	asrs	r6, r6, #2
  4016ac:	bf18      	it	ne
  4016ae:	2400      	movne	r4, #0
  4016b0:	d006      	beq.n	4016c0 <__libc_init_array+0x3c>
  4016b2:	3401      	adds	r4, #1
  4016b4:	f855 3b04 	ldr.w	r3, [r5], #4
  4016b8:	4798      	blx	r3
  4016ba:	42a6      	cmp	r6, r4
  4016bc:	d1f9      	bne.n	4016b2 <__libc_init_array+0x2e>
  4016be:	bd70      	pop	{r4, r5, r6, pc}
  4016c0:	bd70      	pop	{r4, r5, r6, pc}
  4016c2:	bf00      	nop
  4016c4:	004045f4 	.word	0x004045f4
  4016c8:	004045f4 	.word	0x004045f4
  4016cc:	004045fc 	.word	0x004045fc
  4016d0:	004045f4 	.word	0x004045f4

004016d4 <iprintf>:
  4016d4:	b40f      	push	{r0, r1, r2, r3}
  4016d6:	b500      	push	{lr}
  4016d8:	4907      	ldr	r1, [pc, #28]	; (4016f8 <iprintf+0x24>)
  4016da:	b083      	sub	sp, #12
  4016dc:	ab04      	add	r3, sp, #16
  4016de:	6808      	ldr	r0, [r1, #0]
  4016e0:	f853 2b04 	ldr.w	r2, [r3], #4
  4016e4:	6881      	ldr	r1, [r0, #8]
  4016e6:	9301      	str	r3, [sp, #4]
  4016e8:	f000 f896 	bl	401818 <_vfiprintf_r>
  4016ec:	b003      	add	sp, #12
  4016ee:	f85d eb04 	ldr.w	lr, [sp], #4
  4016f2:	b004      	add	sp, #16
  4016f4:	4770      	bx	lr
  4016f6:	bf00      	nop
  4016f8:	20400010 	.word	0x20400010

004016fc <memset>:
  4016fc:	b470      	push	{r4, r5, r6}
  4016fe:	0786      	lsls	r6, r0, #30
  401700:	d046      	beq.n	401790 <memset+0x94>
  401702:	1e54      	subs	r4, r2, #1
  401704:	2a00      	cmp	r2, #0
  401706:	d041      	beq.n	40178c <memset+0x90>
  401708:	b2ca      	uxtb	r2, r1
  40170a:	4603      	mov	r3, r0
  40170c:	e002      	b.n	401714 <memset+0x18>
  40170e:	f114 34ff 	adds.w	r4, r4, #4294967295
  401712:	d33b      	bcc.n	40178c <memset+0x90>
  401714:	f803 2b01 	strb.w	r2, [r3], #1
  401718:	079d      	lsls	r5, r3, #30
  40171a:	d1f8      	bne.n	40170e <memset+0x12>
  40171c:	2c03      	cmp	r4, #3
  40171e:	d92e      	bls.n	40177e <memset+0x82>
  401720:	b2cd      	uxtb	r5, r1
  401722:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401726:	2c0f      	cmp	r4, #15
  401728:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40172c:	d919      	bls.n	401762 <memset+0x66>
  40172e:	f103 0210 	add.w	r2, r3, #16
  401732:	4626      	mov	r6, r4
  401734:	3e10      	subs	r6, #16
  401736:	2e0f      	cmp	r6, #15
  401738:	f842 5c10 	str.w	r5, [r2, #-16]
  40173c:	f842 5c0c 	str.w	r5, [r2, #-12]
  401740:	f842 5c08 	str.w	r5, [r2, #-8]
  401744:	f842 5c04 	str.w	r5, [r2, #-4]
  401748:	f102 0210 	add.w	r2, r2, #16
  40174c:	d8f2      	bhi.n	401734 <memset+0x38>
  40174e:	f1a4 0210 	sub.w	r2, r4, #16
  401752:	f022 020f 	bic.w	r2, r2, #15
  401756:	f004 040f 	and.w	r4, r4, #15
  40175a:	3210      	adds	r2, #16
  40175c:	2c03      	cmp	r4, #3
  40175e:	4413      	add	r3, r2
  401760:	d90d      	bls.n	40177e <memset+0x82>
  401762:	461e      	mov	r6, r3
  401764:	4622      	mov	r2, r4
  401766:	3a04      	subs	r2, #4
  401768:	2a03      	cmp	r2, #3
  40176a:	f846 5b04 	str.w	r5, [r6], #4
  40176e:	d8fa      	bhi.n	401766 <memset+0x6a>
  401770:	1f22      	subs	r2, r4, #4
  401772:	f022 0203 	bic.w	r2, r2, #3
  401776:	3204      	adds	r2, #4
  401778:	4413      	add	r3, r2
  40177a:	f004 0403 	and.w	r4, r4, #3
  40177e:	b12c      	cbz	r4, 40178c <memset+0x90>
  401780:	b2c9      	uxtb	r1, r1
  401782:	441c      	add	r4, r3
  401784:	f803 1b01 	strb.w	r1, [r3], #1
  401788:	429c      	cmp	r4, r3
  40178a:	d1fb      	bne.n	401784 <memset+0x88>
  40178c:	bc70      	pop	{r4, r5, r6}
  40178e:	4770      	bx	lr
  401790:	4614      	mov	r4, r2
  401792:	4603      	mov	r3, r0
  401794:	e7c2      	b.n	40171c <memset+0x20>
  401796:	bf00      	nop

00401798 <__sprint_r.part.0>:
  401798:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40179c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40179e:	049c      	lsls	r4, r3, #18
  4017a0:	4693      	mov	fp, r2
  4017a2:	d52f      	bpl.n	401804 <__sprint_r.part.0+0x6c>
  4017a4:	6893      	ldr	r3, [r2, #8]
  4017a6:	6812      	ldr	r2, [r2, #0]
  4017a8:	b353      	cbz	r3, 401800 <__sprint_r.part.0+0x68>
  4017aa:	460e      	mov	r6, r1
  4017ac:	4607      	mov	r7, r0
  4017ae:	f102 0908 	add.w	r9, r2, #8
  4017b2:	e919 0420 	ldmdb	r9, {r5, sl}
  4017b6:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4017ba:	d017      	beq.n	4017ec <__sprint_r.part.0+0x54>
  4017bc:	3d04      	subs	r5, #4
  4017be:	2400      	movs	r4, #0
  4017c0:	e001      	b.n	4017c6 <__sprint_r.part.0+0x2e>
  4017c2:	45a0      	cmp	r8, r4
  4017c4:	d010      	beq.n	4017e8 <__sprint_r.part.0+0x50>
  4017c6:	4632      	mov	r2, r6
  4017c8:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4017cc:	4638      	mov	r0, r7
  4017ce:	f001 f8bb 	bl	402948 <_fputwc_r>
  4017d2:	1c43      	adds	r3, r0, #1
  4017d4:	f104 0401 	add.w	r4, r4, #1
  4017d8:	d1f3      	bne.n	4017c2 <__sprint_r.part.0+0x2a>
  4017da:	2300      	movs	r3, #0
  4017dc:	f8cb 3008 	str.w	r3, [fp, #8]
  4017e0:	f8cb 3004 	str.w	r3, [fp, #4]
  4017e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4017e8:	f8db 3008 	ldr.w	r3, [fp, #8]
  4017ec:	f02a 0a03 	bic.w	sl, sl, #3
  4017f0:	eba3 030a 	sub.w	r3, r3, sl
  4017f4:	f8cb 3008 	str.w	r3, [fp, #8]
  4017f8:	f109 0908 	add.w	r9, r9, #8
  4017fc:	2b00      	cmp	r3, #0
  4017fe:	d1d8      	bne.n	4017b2 <__sprint_r.part.0+0x1a>
  401800:	2000      	movs	r0, #0
  401802:	e7ea      	b.n	4017da <__sprint_r.part.0+0x42>
  401804:	f001 fa0a 	bl	402c1c <__sfvwrite_r>
  401808:	2300      	movs	r3, #0
  40180a:	f8cb 3008 	str.w	r3, [fp, #8]
  40180e:	f8cb 3004 	str.w	r3, [fp, #4]
  401812:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401816:	bf00      	nop

00401818 <_vfiprintf_r>:
  401818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40181c:	b0ad      	sub	sp, #180	; 0xb4
  40181e:	461d      	mov	r5, r3
  401820:	468b      	mov	fp, r1
  401822:	4690      	mov	r8, r2
  401824:	9307      	str	r3, [sp, #28]
  401826:	9006      	str	r0, [sp, #24]
  401828:	b118      	cbz	r0, 401832 <_vfiprintf_r+0x1a>
  40182a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40182c:	2b00      	cmp	r3, #0
  40182e:	f000 80f3 	beq.w	401a18 <_vfiprintf_r+0x200>
  401832:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401836:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40183a:	07df      	lsls	r7, r3, #31
  40183c:	b281      	uxth	r1, r0
  40183e:	d402      	bmi.n	401846 <_vfiprintf_r+0x2e>
  401840:	058e      	lsls	r6, r1, #22
  401842:	f140 80fc 	bpl.w	401a3e <_vfiprintf_r+0x226>
  401846:	048c      	lsls	r4, r1, #18
  401848:	d40a      	bmi.n	401860 <_vfiprintf_r+0x48>
  40184a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40184e:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  401852:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  401856:	f8ab 100c 	strh.w	r1, [fp, #12]
  40185a:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  40185e:	b289      	uxth	r1, r1
  401860:	0708      	lsls	r0, r1, #28
  401862:	f140 80b3 	bpl.w	4019cc <_vfiprintf_r+0x1b4>
  401866:	f8db 3010 	ldr.w	r3, [fp, #16]
  40186a:	2b00      	cmp	r3, #0
  40186c:	f000 80ae 	beq.w	4019cc <_vfiprintf_r+0x1b4>
  401870:	f001 031a 	and.w	r3, r1, #26
  401874:	2b0a      	cmp	r3, #10
  401876:	f000 80b5 	beq.w	4019e4 <_vfiprintf_r+0x1cc>
  40187a:	2300      	movs	r3, #0
  40187c:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  401880:	930b      	str	r3, [sp, #44]	; 0x2c
  401882:	9311      	str	r3, [sp, #68]	; 0x44
  401884:	9310      	str	r3, [sp, #64]	; 0x40
  401886:	9303      	str	r3, [sp, #12]
  401888:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  40188c:	46ca      	mov	sl, r9
  40188e:	f8cd b010 	str.w	fp, [sp, #16]
  401892:	f898 3000 	ldrb.w	r3, [r8]
  401896:	4644      	mov	r4, r8
  401898:	b1fb      	cbz	r3, 4018da <_vfiprintf_r+0xc2>
  40189a:	2b25      	cmp	r3, #37	; 0x25
  40189c:	d102      	bne.n	4018a4 <_vfiprintf_r+0x8c>
  40189e:	e01c      	b.n	4018da <_vfiprintf_r+0xc2>
  4018a0:	2b25      	cmp	r3, #37	; 0x25
  4018a2:	d003      	beq.n	4018ac <_vfiprintf_r+0x94>
  4018a4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4018a8:	2b00      	cmp	r3, #0
  4018aa:	d1f9      	bne.n	4018a0 <_vfiprintf_r+0x88>
  4018ac:	eba4 0508 	sub.w	r5, r4, r8
  4018b0:	b19d      	cbz	r5, 4018da <_vfiprintf_r+0xc2>
  4018b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4018b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4018b6:	f8ca 8000 	str.w	r8, [sl]
  4018ba:	3301      	adds	r3, #1
  4018bc:	442a      	add	r2, r5
  4018be:	2b07      	cmp	r3, #7
  4018c0:	f8ca 5004 	str.w	r5, [sl, #4]
  4018c4:	9211      	str	r2, [sp, #68]	; 0x44
  4018c6:	9310      	str	r3, [sp, #64]	; 0x40
  4018c8:	dd7a      	ble.n	4019c0 <_vfiprintf_r+0x1a8>
  4018ca:	2a00      	cmp	r2, #0
  4018cc:	f040 84b0 	bne.w	402230 <_vfiprintf_r+0xa18>
  4018d0:	9b03      	ldr	r3, [sp, #12]
  4018d2:	9210      	str	r2, [sp, #64]	; 0x40
  4018d4:	442b      	add	r3, r5
  4018d6:	46ca      	mov	sl, r9
  4018d8:	9303      	str	r3, [sp, #12]
  4018da:	7823      	ldrb	r3, [r4, #0]
  4018dc:	2b00      	cmp	r3, #0
  4018de:	f000 83e0 	beq.w	4020a2 <_vfiprintf_r+0x88a>
  4018e2:	2000      	movs	r0, #0
  4018e4:	f04f 0300 	mov.w	r3, #0
  4018e8:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4018ec:	f104 0801 	add.w	r8, r4, #1
  4018f0:	7862      	ldrb	r2, [r4, #1]
  4018f2:	4605      	mov	r5, r0
  4018f4:	4606      	mov	r6, r0
  4018f6:	4603      	mov	r3, r0
  4018f8:	f04f 34ff 	mov.w	r4, #4294967295
  4018fc:	f108 0801 	add.w	r8, r8, #1
  401900:	f1a2 0120 	sub.w	r1, r2, #32
  401904:	2958      	cmp	r1, #88	; 0x58
  401906:	f200 82de 	bhi.w	401ec6 <_vfiprintf_r+0x6ae>
  40190a:	e8df f011 	tbh	[pc, r1, lsl #1]
  40190e:	0221      	.short	0x0221
  401910:	02dc02dc 	.word	0x02dc02dc
  401914:	02dc0229 	.word	0x02dc0229
  401918:	02dc02dc 	.word	0x02dc02dc
  40191c:	02dc02dc 	.word	0x02dc02dc
  401920:	028902dc 	.word	0x028902dc
  401924:	02dc0295 	.word	0x02dc0295
  401928:	02bd00a2 	.word	0x02bd00a2
  40192c:	019f02dc 	.word	0x019f02dc
  401930:	01a401a4 	.word	0x01a401a4
  401934:	01a401a4 	.word	0x01a401a4
  401938:	01a401a4 	.word	0x01a401a4
  40193c:	01a401a4 	.word	0x01a401a4
  401940:	02dc01a4 	.word	0x02dc01a4
  401944:	02dc02dc 	.word	0x02dc02dc
  401948:	02dc02dc 	.word	0x02dc02dc
  40194c:	02dc02dc 	.word	0x02dc02dc
  401950:	02dc02dc 	.word	0x02dc02dc
  401954:	01b202dc 	.word	0x01b202dc
  401958:	02dc02dc 	.word	0x02dc02dc
  40195c:	02dc02dc 	.word	0x02dc02dc
  401960:	02dc02dc 	.word	0x02dc02dc
  401964:	02dc02dc 	.word	0x02dc02dc
  401968:	02dc02dc 	.word	0x02dc02dc
  40196c:	02dc0197 	.word	0x02dc0197
  401970:	02dc02dc 	.word	0x02dc02dc
  401974:	02dc02dc 	.word	0x02dc02dc
  401978:	02dc019b 	.word	0x02dc019b
  40197c:	025302dc 	.word	0x025302dc
  401980:	02dc02dc 	.word	0x02dc02dc
  401984:	02dc02dc 	.word	0x02dc02dc
  401988:	02dc02dc 	.word	0x02dc02dc
  40198c:	02dc02dc 	.word	0x02dc02dc
  401990:	02dc02dc 	.word	0x02dc02dc
  401994:	021b025a 	.word	0x021b025a
  401998:	02dc02dc 	.word	0x02dc02dc
  40199c:	026e02dc 	.word	0x026e02dc
  4019a0:	02dc021b 	.word	0x02dc021b
  4019a4:	027302dc 	.word	0x027302dc
  4019a8:	01f502dc 	.word	0x01f502dc
  4019ac:	02090182 	.word	0x02090182
  4019b0:	02dc02d7 	.word	0x02dc02d7
  4019b4:	02dc029a 	.word	0x02dc029a
  4019b8:	02dc00a7 	.word	0x02dc00a7
  4019bc:	022e02dc 	.word	0x022e02dc
  4019c0:	f10a 0a08 	add.w	sl, sl, #8
  4019c4:	9b03      	ldr	r3, [sp, #12]
  4019c6:	442b      	add	r3, r5
  4019c8:	9303      	str	r3, [sp, #12]
  4019ca:	e786      	b.n	4018da <_vfiprintf_r+0xc2>
  4019cc:	4659      	mov	r1, fp
  4019ce:	9806      	ldr	r0, [sp, #24]
  4019d0:	f000 fdac 	bl	40252c <__swsetup_r>
  4019d4:	bb18      	cbnz	r0, 401a1e <_vfiprintf_r+0x206>
  4019d6:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  4019da:	f001 031a 	and.w	r3, r1, #26
  4019de:	2b0a      	cmp	r3, #10
  4019e0:	f47f af4b 	bne.w	40187a <_vfiprintf_r+0x62>
  4019e4:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4019e8:	2b00      	cmp	r3, #0
  4019ea:	f6ff af46 	blt.w	40187a <_vfiprintf_r+0x62>
  4019ee:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4019f2:	07db      	lsls	r3, r3, #31
  4019f4:	d405      	bmi.n	401a02 <_vfiprintf_r+0x1ea>
  4019f6:	058f      	lsls	r7, r1, #22
  4019f8:	d403      	bmi.n	401a02 <_vfiprintf_r+0x1ea>
  4019fa:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4019fe:	f001 fac3 	bl	402f88 <__retarget_lock_release_recursive>
  401a02:	462b      	mov	r3, r5
  401a04:	4642      	mov	r2, r8
  401a06:	4659      	mov	r1, fp
  401a08:	9806      	ldr	r0, [sp, #24]
  401a0a:	f000 fd4d 	bl	4024a8 <__sbprintf>
  401a0e:	9003      	str	r0, [sp, #12]
  401a10:	9803      	ldr	r0, [sp, #12]
  401a12:	b02d      	add	sp, #180	; 0xb4
  401a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401a18:	f000 fef4 	bl	402804 <__sinit>
  401a1c:	e709      	b.n	401832 <_vfiprintf_r+0x1a>
  401a1e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401a22:	07d9      	lsls	r1, r3, #31
  401a24:	d404      	bmi.n	401a30 <_vfiprintf_r+0x218>
  401a26:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401a2a:	059a      	lsls	r2, r3, #22
  401a2c:	f140 84aa 	bpl.w	402384 <_vfiprintf_r+0xb6c>
  401a30:	f04f 33ff 	mov.w	r3, #4294967295
  401a34:	9303      	str	r3, [sp, #12]
  401a36:	9803      	ldr	r0, [sp, #12]
  401a38:	b02d      	add	sp, #180	; 0xb4
  401a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401a3e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401a42:	f001 fa9f 	bl	402f84 <__retarget_lock_acquire_recursive>
  401a46:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  401a4a:	b281      	uxth	r1, r0
  401a4c:	e6fb      	b.n	401846 <_vfiprintf_r+0x2e>
  401a4e:	4276      	negs	r6, r6
  401a50:	9207      	str	r2, [sp, #28]
  401a52:	f043 0304 	orr.w	r3, r3, #4
  401a56:	f898 2000 	ldrb.w	r2, [r8]
  401a5a:	e74f      	b.n	4018fc <_vfiprintf_r+0xe4>
  401a5c:	9608      	str	r6, [sp, #32]
  401a5e:	069e      	lsls	r6, r3, #26
  401a60:	f100 8450 	bmi.w	402304 <_vfiprintf_r+0xaec>
  401a64:	9907      	ldr	r1, [sp, #28]
  401a66:	06dd      	lsls	r5, r3, #27
  401a68:	460a      	mov	r2, r1
  401a6a:	f100 83ef 	bmi.w	40224c <_vfiprintf_r+0xa34>
  401a6e:	0658      	lsls	r0, r3, #25
  401a70:	f140 83ec 	bpl.w	40224c <_vfiprintf_r+0xa34>
  401a74:	880e      	ldrh	r6, [r1, #0]
  401a76:	3104      	adds	r1, #4
  401a78:	2700      	movs	r7, #0
  401a7a:	2201      	movs	r2, #1
  401a7c:	9107      	str	r1, [sp, #28]
  401a7e:	f04f 0100 	mov.w	r1, #0
  401a82:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  401a86:	2500      	movs	r5, #0
  401a88:	1c61      	adds	r1, r4, #1
  401a8a:	f000 8116 	beq.w	401cba <_vfiprintf_r+0x4a2>
  401a8e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  401a92:	9102      	str	r1, [sp, #8]
  401a94:	ea56 0107 	orrs.w	r1, r6, r7
  401a98:	f040 8114 	bne.w	401cc4 <_vfiprintf_r+0x4ac>
  401a9c:	2c00      	cmp	r4, #0
  401a9e:	f040 835c 	bne.w	40215a <_vfiprintf_r+0x942>
  401aa2:	2a00      	cmp	r2, #0
  401aa4:	f040 83b7 	bne.w	402216 <_vfiprintf_r+0x9fe>
  401aa8:	f013 0301 	ands.w	r3, r3, #1
  401aac:	9305      	str	r3, [sp, #20]
  401aae:	f000 8457 	beq.w	402360 <_vfiprintf_r+0xb48>
  401ab2:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  401ab6:	2330      	movs	r3, #48	; 0x30
  401ab8:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  401abc:	9b05      	ldr	r3, [sp, #20]
  401abe:	42a3      	cmp	r3, r4
  401ac0:	bfb8      	it	lt
  401ac2:	4623      	movlt	r3, r4
  401ac4:	9301      	str	r3, [sp, #4]
  401ac6:	b10d      	cbz	r5, 401acc <_vfiprintf_r+0x2b4>
  401ac8:	3301      	adds	r3, #1
  401aca:	9301      	str	r3, [sp, #4]
  401acc:	9b02      	ldr	r3, [sp, #8]
  401ace:	f013 0302 	ands.w	r3, r3, #2
  401ad2:	9309      	str	r3, [sp, #36]	; 0x24
  401ad4:	d002      	beq.n	401adc <_vfiprintf_r+0x2c4>
  401ad6:	9b01      	ldr	r3, [sp, #4]
  401ad8:	3302      	adds	r3, #2
  401ada:	9301      	str	r3, [sp, #4]
  401adc:	9b02      	ldr	r3, [sp, #8]
  401ade:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  401ae2:	930a      	str	r3, [sp, #40]	; 0x28
  401ae4:	f040 8217 	bne.w	401f16 <_vfiprintf_r+0x6fe>
  401ae8:	9b08      	ldr	r3, [sp, #32]
  401aea:	9a01      	ldr	r2, [sp, #4]
  401aec:	1a9d      	subs	r5, r3, r2
  401aee:	2d00      	cmp	r5, #0
  401af0:	f340 8211 	ble.w	401f16 <_vfiprintf_r+0x6fe>
  401af4:	2d10      	cmp	r5, #16
  401af6:	f340 8490 	ble.w	40241a <_vfiprintf_r+0xc02>
  401afa:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401afc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401afe:	4ec4      	ldr	r6, [pc, #784]	; (401e10 <_vfiprintf_r+0x5f8>)
  401b00:	46d6      	mov	lr, sl
  401b02:	2710      	movs	r7, #16
  401b04:	46a2      	mov	sl, r4
  401b06:	4619      	mov	r1, r3
  401b08:	9c06      	ldr	r4, [sp, #24]
  401b0a:	e007      	b.n	401b1c <_vfiprintf_r+0x304>
  401b0c:	f101 0c02 	add.w	ip, r1, #2
  401b10:	f10e 0e08 	add.w	lr, lr, #8
  401b14:	4601      	mov	r1, r0
  401b16:	3d10      	subs	r5, #16
  401b18:	2d10      	cmp	r5, #16
  401b1a:	dd11      	ble.n	401b40 <_vfiprintf_r+0x328>
  401b1c:	1c48      	adds	r0, r1, #1
  401b1e:	3210      	adds	r2, #16
  401b20:	2807      	cmp	r0, #7
  401b22:	9211      	str	r2, [sp, #68]	; 0x44
  401b24:	e88e 00c0 	stmia.w	lr, {r6, r7}
  401b28:	9010      	str	r0, [sp, #64]	; 0x40
  401b2a:	ddef      	ble.n	401b0c <_vfiprintf_r+0x2f4>
  401b2c:	2a00      	cmp	r2, #0
  401b2e:	f040 81e4 	bne.w	401efa <_vfiprintf_r+0x6e2>
  401b32:	3d10      	subs	r5, #16
  401b34:	2d10      	cmp	r5, #16
  401b36:	4611      	mov	r1, r2
  401b38:	f04f 0c01 	mov.w	ip, #1
  401b3c:	46ce      	mov	lr, r9
  401b3e:	dced      	bgt.n	401b1c <_vfiprintf_r+0x304>
  401b40:	4654      	mov	r4, sl
  401b42:	4661      	mov	r1, ip
  401b44:	46f2      	mov	sl, lr
  401b46:	442a      	add	r2, r5
  401b48:	2907      	cmp	r1, #7
  401b4a:	9211      	str	r2, [sp, #68]	; 0x44
  401b4c:	f8ca 6000 	str.w	r6, [sl]
  401b50:	f8ca 5004 	str.w	r5, [sl, #4]
  401b54:	9110      	str	r1, [sp, #64]	; 0x40
  401b56:	f300 82ec 	bgt.w	402132 <_vfiprintf_r+0x91a>
  401b5a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401b5e:	f10a 0a08 	add.w	sl, sl, #8
  401b62:	1c48      	adds	r0, r1, #1
  401b64:	2d00      	cmp	r5, #0
  401b66:	f040 81de 	bne.w	401f26 <_vfiprintf_r+0x70e>
  401b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401b6c:	2b00      	cmp	r3, #0
  401b6e:	f000 81f8 	beq.w	401f62 <_vfiprintf_r+0x74a>
  401b72:	3202      	adds	r2, #2
  401b74:	a90e      	add	r1, sp, #56	; 0x38
  401b76:	2302      	movs	r3, #2
  401b78:	2807      	cmp	r0, #7
  401b7a:	9211      	str	r2, [sp, #68]	; 0x44
  401b7c:	9010      	str	r0, [sp, #64]	; 0x40
  401b7e:	e88a 000a 	stmia.w	sl, {r1, r3}
  401b82:	f340 81ea 	ble.w	401f5a <_vfiprintf_r+0x742>
  401b86:	2a00      	cmp	r2, #0
  401b88:	f040 838c 	bne.w	4022a4 <_vfiprintf_r+0xa8c>
  401b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401b8e:	2b80      	cmp	r3, #128	; 0x80
  401b90:	f04f 0001 	mov.w	r0, #1
  401b94:	4611      	mov	r1, r2
  401b96:	46ca      	mov	sl, r9
  401b98:	f040 81e7 	bne.w	401f6a <_vfiprintf_r+0x752>
  401b9c:	9b08      	ldr	r3, [sp, #32]
  401b9e:	9d01      	ldr	r5, [sp, #4]
  401ba0:	1b5e      	subs	r6, r3, r5
  401ba2:	2e00      	cmp	r6, #0
  401ba4:	f340 81e1 	ble.w	401f6a <_vfiprintf_r+0x752>
  401ba8:	2e10      	cmp	r6, #16
  401baa:	4d9a      	ldr	r5, [pc, #616]	; (401e14 <_vfiprintf_r+0x5fc>)
  401bac:	f340 8450 	ble.w	402450 <_vfiprintf_r+0xc38>
  401bb0:	46d4      	mov	ip, sl
  401bb2:	2710      	movs	r7, #16
  401bb4:	46a2      	mov	sl, r4
  401bb6:	9c06      	ldr	r4, [sp, #24]
  401bb8:	e007      	b.n	401bca <_vfiprintf_r+0x3b2>
  401bba:	f101 0e02 	add.w	lr, r1, #2
  401bbe:	f10c 0c08 	add.w	ip, ip, #8
  401bc2:	4601      	mov	r1, r0
  401bc4:	3e10      	subs	r6, #16
  401bc6:	2e10      	cmp	r6, #16
  401bc8:	dd11      	ble.n	401bee <_vfiprintf_r+0x3d6>
  401bca:	1c48      	adds	r0, r1, #1
  401bcc:	3210      	adds	r2, #16
  401bce:	2807      	cmp	r0, #7
  401bd0:	9211      	str	r2, [sp, #68]	; 0x44
  401bd2:	e88c 00a0 	stmia.w	ip, {r5, r7}
  401bd6:	9010      	str	r0, [sp, #64]	; 0x40
  401bd8:	ddef      	ble.n	401bba <_vfiprintf_r+0x3a2>
  401bda:	2a00      	cmp	r2, #0
  401bdc:	f040 829d 	bne.w	40211a <_vfiprintf_r+0x902>
  401be0:	3e10      	subs	r6, #16
  401be2:	2e10      	cmp	r6, #16
  401be4:	f04f 0e01 	mov.w	lr, #1
  401be8:	4611      	mov	r1, r2
  401bea:	46cc      	mov	ip, r9
  401bec:	dced      	bgt.n	401bca <_vfiprintf_r+0x3b2>
  401bee:	4654      	mov	r4, sl
  401bf0:	46e2      	mov	sl, ip
  401bf2:	4432      	add	r2, r6
  401bf4:	f1be 0f07 	cmp.w	lr, #7
  401bf8:	9211      	str	r2, [sp, #68]	; 0x44
  401bfa:	e88a 0060 	stmia.w	sl, {r5, r6}
  401bfe:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  401c02:	f300 8369 	bgt.w	4022d8 <_vfiprintf_r+0xac0>
  401c06:	f10a 0a08 	add.w	sl, sl, #8
  401c0a:	f10e 0001 	add.w	r0, lr, #1
  401c0e:	4671      	mov	r1, lr
  401c10:	e1ab      	b.n	401f6a <_vfiprintf_r+0x752>
  401c12:	9608      	str	r6, [sp, #32]
  401c14:	f013 0220 	ands.w	r2, r3, #32
  401c18:	f040 838c 	bne.w	402334 <_vfiprintf_r+0xb1c>
  401c1c:	f013 0110 	ands.w	r1, r3, #16
  401c20:	f040 831a 	bne.w	402258 <_vfiprintf_r+0xa40>
  401c24:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  401c28:	f000 8316 	beq.w	402258 <_vfiprintf_r+0xa40>
  401c2c:	9807      	ldr	r0, [sp, #28]
  401c2e:	460a      	mov	r2, r1
  401c30:	4601      	mov	r1, r0
  401c32:	3104      	adds	r1, #4
  401c34:	8806      	ldrh	r6, [r0, #0]
  401c36:	9107      	str	r1, [sp, #28]
  401c38:	2700      	movs	r7, #0
  401c3a:	e720      	b.n	401a7e <_vfiprintf_r+0x266>
  401c3c:	9608      	str	r6, [sp, #32]
  401c3e:	f043 0310 	orr.w	r3, r3, #16
  401c42:	e7e7      	b.n	401c14 <_vfiprintf_r+0x3fc>
  401c44:	9608      	str	r6, [sp, #32]
  401c46:	f043 0310 	orr.w	r3, r3, #16
  401c4a:	e708      	b.n	401a5e <_vfiprintf_r+0x246>
  401c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401c50:	f898 2000 	ldrb.w	r2, [r8]
  401c54:	e652      	b.n	4018fc <_vfiprintf_r+0xe4>
  401c56:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401c5a:	2600      	movs	r6, #0
  401c5c:	f818 2b01 	ldrb.w	r2, [r8], #1
  401c60:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  401c64:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  401c68:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401c6c:	2909      	cmp	r1, #9
  401c6e:	d9f5      	bls.n	401c5c <_vfiprintf_r+0x444>
  401c70:	e646      	b.n	401900 <_vfiprintf_r+0xe8>
  401c72:	9608      	str	r6, [sp, #32]
  401c74:	2800      	cmp	r0, #0
  401c76:	f040 8408 	bne.w	40248a <_vfiprintf_r+0xc72>
  401c7a:	f043 0310 	orr.w	r3, r3, #16
  401c7e:	069e      	lsls	r6, r3, #26
  401c80:	f100 834c 	bmi.w	40231c <_vfiprintf_r+0xb04>
  401c84:	06dd      	lsls	r5, r3, #27
  401c86:	f100 82f3 	bmi.w	402270 <_vfiprintf_r+0xa58>
  401c8a:	0658      	lsls	r0, r3, #25
  401c8c:	f140 82f0 	bpl.w	402270 <_vfiprintf_r+0xa58>
  401c90:	9d07      	ldr	r5, [sp, #28]
  401c92:	f9b5 6000 	ldrsh.w	r6, [r5]
  401c96:	462a      	mov	r2, r5
  401c98:	17f7      	asrs	r7, r6, #31
  401c9a:	3204      	adds	r2, #4
  401c9c:	4630      	mov	r0, r6
  401c9e:	4639      	mov	r1, r7
  401ca0:	9207      	str	r2, [sp, #28]
  401ca2:	2800      	cmp	r0, #0
  401ca4:	f171 0200 	sbcs.w	r2, r1, #0
  401ca8:	f2c0 835d 	blt.w	402366 <_vfiprintf_r+0xb4e>
  401cac:	1c61      	adds	r1, r4, #1
  401cae:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401cb2:	f04f 0201 	mov.w	r2, #1
  401cb6:	f47f aeea 	bne.w	401a8e <_vfiprintf_r+0x276>
  401cba:	ea56 0107 	orrs.w	r1, r6, r7
  401cbe:	f000 824d 	beq.w	40215c <_vfiprintf_r+0x944>
  401cc2:	9302      	str	r3, [sp, #8]
  401cc4:	2a01      	cmp	r2, #1
  401cc6:	f000 828c 	beq.w	4021e2 <_vfiprintf_r+0x9ca>
  401cca:	2a02      	cmp	r2, #2
  401ccc:	f040 825c 	bne.w	402188 <_vfiprintf_r+0x970>
  401cd0:	980b      	ldr	r0, [sp, #44]	; 0x2c
  401cd2:	46cb      	mov	fp, r9
  401cd4:	0933      	lsrs	r3, r6, #4
  401cd6:	f006 010f 	and.w	r1, r6, #15
  401cda:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  401cde:	093a      	lsrs	r2, r7, #4
  401ce0:	461e      	mov	r6, r3
  401ce2:	4617      	mov	r7, r2
  401ce4:	5c43      	ldrb	r3, [r0, r1]
  401ce6:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  401cea:	ea56 0307 	orrs.w	r3, r6, r7
  401cee:	d1f1      	bne.n	401cd4 <_vfiprintf_r+0x4bc>
  401cf0:	eba9 030b 	sub.w	r3, r9, fp
  401cf4:	9305      	str	r3, [sp, #20]
  401cf6:	e6e1      	b.n	401abc <_vfiprintf_r+0x2a4>
  401cf8:	2800      	cmp	r0, #0
  401cfa:	f040 83c0 	bne.w	40247e <_vfiprintf_r+0xc66>
  401cfe:	0699      	lsls	r1, r3, #26
  401d00:	f100 8367 	bmi.w	4023d2 <_vfiprintf_r+0xbba>
  401d04:	06da      	lsls	r2, r3, #27
  401d06:	f100 80f1 	bmi.w	401eec <_vfiprintf_r+0x6d4>
  401d0a:	065b      	lsls	r3, r3, #25
  401d0c:	f140 80ee 	bpl.w	401eec <_vfiprintf_r+0x6d4>
  401d10:	9a07      	ldr	r2, [sp, #28]
  401d12:	6813      	ldr	r3, [r2, #0]
  401d14:	3204      	adds	r2, #4
  401d16:	9207      	str	r2, [sp, #28]
  401d18:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  401d1c:	801a      	strh	r2, [r3, #0]
  401d1e:	e5b8      	b.n	401892 <_vfiprintf_r+0x7a>
  401d20:	9807      	ldr	r0, [sp, #28]
  401d22:	4a3d      	ldr	r2, [pc, #244]	; (401e18 <_vfiprintf_r+0x600>)
  401d24:	9608      	str	r6, [sp, #32]
  401d26:	920b      	str	r2, [sp, #44]	; 0x2c
  401d28:	6806      	ldr	r6, [r0, #0]
  401d2a:	2278      	movs	r2, #120	; 0x78
  401d2c:	2130      	movs	r1, #48	; 0x30
  401d2e:	3004      	adds	r0, #4
  401d30:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  401d34:	f043 0302 	orr.w	r3, r3, #2
  401d38:	9007      	str	r0, [sp, #28]
  401d3a:	2700      	movs	r7, #0
  401d3c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  401d40:	2202      	movs	r2, #2
  401d42:	e69c      	b.n	401a7e <_vfiprintf_r+0x266>
  401d44:	9608      	str	r6, [sp, #32]
  401d46:	2800      	cmp	r0, #0
  401d48:	d099      	beq.n	401c7e <_vfiprintf_r+0x466>
  401d4a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401d4e:	e796      	b.n	401c7e <_vfiprintf_r+0x466>
  401d50:	f898 2000 	ldrb.w	r2, [r8]
  401d54:	2d00      	cmp	r5, #0
  401d56:	f47f add1 	bne.w	4018fc <_vfiprintf_r+0xe4>
  401d5a:	2001      	movs	r0, #1
  401d5c:	2520      	movs	r5, #32
  401d5e:	e5cd      	b.n	4018fc <_vfiprintf_r+0xe4>
  401d60:	f043 0301 	orr.w	r3, r3, #1
  401d64:	f898 2000 	ldrb.w	r2, [r8]
  401d68:	e5c8      	b.n	4018fc <_vfiprintf_r+0xe4>
  401d6a:	9608      	str	r6, [sp, #32]
  401d6c:	2800      	cmp	r0, #0
  401d6e:	f040 8393 	bne.w	402498 <_vfiprintf_r+0xc80>
  401d72:	4929      	ldr	r1, [pc, #164]	; (401e18 <_vfiprintf_r+0x600>)
  401d74:	910b      	str	r1, [sp, #44]	; 0x2c
  401d76:	069f      	lsls	r7, r3, #26
  401d78:	f100 82e8 	bmi.w	40234c <_vfiprintf_r+0xb34>
  401d7c:	9807      	ldr	r0, [sp, #28]
  401d7e:	06de      	lsls	r6, r3, #27
  401d80:	4601      	mov	r1, r0
  401d82:	f100 8270 	bmi.w	402266 <_vfiprintf_r+0xa4e>
  401d86:	065d      	lsls	r5, r3, #25
  401d88:	f140 826d 	bpl.w	402266 <_vfiprintf_r+0xa4e>
  401d8c:	3104      	adds	r1, #4
  401d8e:	8806      	ldrh	r6, [r0, #0]
  401d90:	9107      	str	r1, [sp, #28]
  401d92:	2700      	movs	r7, #0
  401d94:	07d8      	lsls	r0, r3, #31
  401d96:	f140 8222 	bpl.w	4021de <_vfiprintf_r+0x9c6>
  401d9a:	ea56 0107 	orrs.w	r1, r6, r7
  401d9e:	f000 821e 	beq.w	4021de <_vfiprintf_r+0x9c6>
  401da2:	2130      	movs	r1, #48	; 0x30
  401da4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  401da8:	f043 0302 	orr.w	r3, r3, #2
  401dac:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  401db0:	2202      	movs	r2, #2
  401db2:	e664      	b.n	401a7e <_vfiprintf_r+0x266>
  401db4:	9608      	str	r6, [sp, #32]
  401db6:	2800      	cmp	r0, #0
  401db8:	f040 836b 	bne.w	402492 <_vfiprintf_r+0xc7a>
  401dbc:	4917      	ldr	r1, [pc, #92]	; (401e1c <_vfiprintf_r+0x604>)
  401dbe:	910b      	str	r1, [sp, #44]	; 0x2c
  401dc0:	e7d9      	b.n	401d76 <_vfiprintf_r+0x55e>
  401dc2:	9907      	ldr	r1, [sp, #28]
  401dc4:	9608      	str	r6, [sp, #32]
  401dc6:	680a      	ldr	r2, [r1, #0]
  401dc8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  401dcc:	f04f 0000 	mov.w	r0, #0
  401dd0:	460a      	mov	r2, r1
  401dd2:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  401dd6:	3204      	adds	r2, #4
  401dd8:	2001      	movs	r0, #1
  401dda:	9001      	str	r0, [sp, #4]
  401ddc:	9207      	str	r2, [sp, #28]
  401dde:	9005      	str	r0, [sp, #20]
  401de0:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  401de4:	9302      	str	r3, [sp, #8]
  401de6:	2400      	movs	r4, #0
  401de8:	e670      	b.n	401acc <_vfiprintf_r+0x2b4>
  401dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401dee:	f898 2000 	ldrb.w	r2, [r8]
  401df2:	e583      	b.n	4018fc <_vfiprintf_r+0xe4>
  401df4:	f898 2000 	ldrb.w	r2, [r8]
  401df8:	2a6c      	cmp	r2, #108	; 0x6c
  401dfa:	bf03      	ittte	eq
  401dfc:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  401e00:	f043 0320 	orreq.w	r3, r3, #32
  401e04:	f108 0801 	addeq.w	r8, r8, #1
  401e08:	f043 0310 	orrne.w	r3, r3, #16
  401e0c:	e576      	b.n	4018fc <_vfiprintf_r+0xe4>
  401e0e:	bf00      	nop
  401e10:	004044b4 	.word	0x004044b4
  401e14:	004044c4 	.word	0x004044c4
  401e18:	00404498 	.word	0x00404498
  401e1c:	00404484 	.word	0x00404484
  401e20:	9907      	ldr	r1, [sp, #28]
  401e22:	680e      	ldr	r6, [r1, #0]
  401e24:	460a      	mov	r2, r1
  401e26:	2e00      	cmp	r6, #0
  401e28:	f102 0204 	add.w	r2, r2, #4
  401e2c:	f6ff ae0f 	blt.w	401a4e <_vfiprintf_r+0x236>
  401e30:	9207      	str	r2, [sp, #28]
  401e32:	f898 2000 	ldrb.w	r2, [r8]
  401e36:	e561      	b.n	4018fc <_vfiprintf_r+0xe4>
  401e38:	f898 2000 	ldrb.w	r2, [r8]
  401e3c:	2001      	movs	r0, #1
  401e3e:	252b      	movs	r5, #43	; 0x2b
  401e40:	e55c      	b.n	4018fc <_vfiprintf_r+0xe4>
  401e42:	9907      	ldr	r1, [sp, #28]
  401e44:	9608      	str	r6, [sp, #32]
  401e46:	f8d1 b000 	ldr.w	fp, [r1]
  401e4a:	f04f 0200 	mov.w	r2, #0
  401e4e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  401e52:	1d0e      	adds	r6, r1, #4
  401e54:	f1bb 0f00 	cmp.w	fp, #0
  401e58:	f000 82e5 	beq.w	402426 <_vfiprintf_r+0xc0e>
  401e5c:	1c67      	adds	r7, r4, #1
  401e5e:	f000 82c4 	beq.w	4023ea <_vfiprintf_r+0xbd2>
  401e62:	4622      	mov	r2, r4
  401e64:	2100      	movs	r1, #0
  401e66:	4658      	mov	r0, fp
  401e68:	9301      	str	r3, [sp, #4]
  401e6a:	f001 fbd1 	bl	403610 <memchr>
  401e6e:	9b01      	ldr	r3, [sp, #4]
  401e70:	2800      	cmp	r0, #0
  401e72:	f000 82e5 	beq.w	402440 <_vfiprintf_r+0xc28>
  401e76:	eba0 020b 	sub.w	r2, r0, fp
  401e7a:	9205      	str	r2, [sp, #20]
  401e7c:	9607      	str	r6, [sp, #28]
  401e7e:	9302      	str	r3, [sp, #8]
  401e80:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401e84:	2400      	movs	r4, #0
  401e86:	e619      	b.n	401abc <_vfiprintf_r+0x2a4>
  401e88:	f898 2000 	ldrb.w	r2, [r8]
  401e8c:	2a2a      	cmp	r2, #42	; 0x2a
  401e8e:	f108 0701 	add.w	r7, r8, #1
  401e92:	f000 82e9 	beq.w	402468 <_vfiprintf_r+0xc50>
  401e96:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401e9a:	2909      	cmp	r1, #9
  401e9c:	46b8      	mov	r8, r7
  401e9e:	f04f 0400 	mov.w	r4, #0
  401ea2:	f63f ad2d 	bhi.w	401900 <_vfiprintf_r+0xe8>
  401ea6:	f818 2b01 	ldrb.w	r2, [r8], #1
  401eaa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  401eae:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  401eb2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401eb6:	2909      	cmp	r1, #9
  401eb8:	d9f5      	bls.n	401ea6 <_vfiprintf_r+0x68e>
  401eba:	e521      	b.n	401900 <_vfiprintf_r+0xe8>
  401ebc:	f043 0320 	orr.w	r3, r3, #32
  401ec0:	f898 2000 	ldrb.w	r2, [r8]
  401ec4:	e51a      	b.n	4018fc <_vfiprintf_r+0xe4>
  401ec6:	9608      	str	r6, [sp, #32]
  401ec8:	2800      	cmp	r0, #0
  401eca:	f040 82db 	bne.w	402484 <_vfiprintf_r+0xc6c>
  401ece:	2a00      	cmp	r2, #0
  401ed0:	f000 80e7 	beq.w	4020a2 <_vfiprintf_r+0x88a>
  401ed4:	2101      	movs	r1, #1
  401ed6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  401eda:	f04f 0200 	mov.w	r2, #0
  401ede:	9101      	str	r1, [sp, #4]
  401ee0:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  401ee4:	9105      	str	r1, [sp, #20]
  401ee6:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  401eea:	e77b      	b.n	401de4 <_vfiprintf_r+0x5cc>
  401eec:	9a07      	ldr	r2, [sp, #28]
  401eee:	6813      	ldr	r3, [r2, #0]
  401ef0:	3204      	adds	r2, #4
  401ef2:	9207      	str	r2, [sp, #28]
  401ef4:	9a03      	ldr	r2, [sp, #12]
  401ef6:	601a      	str	r2, [r3, #0]
  401ef8:	e4cb      	b.n	401892 <_vfiprintf_r+0x7a>
  401efa:	aa0f      	add	r2, sp, #60	; 0x3c
  401efc:	9904      	ldr	r1, [sp, #16]
  401efe:	4620      	mov	r0, r4
  401f00:	f7ff fc4a 	bl	401798 <__sprint_r.part.0>
  401f04:	2800      	cmp	r0, #0
  401f06:	f040 8139 	bne.w	40217c <_vfiprintf_r+0x964>
  401f0a:	9910      	ldr	r1, [sp, #64]	; 0x40
  401f0c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401f0e:	f101 0c01 	add.w	ip, r1, #1
  401f12:	46ce      	mov	lr, r9
  401f14:	e5ff      	b.n	401b16 <_vfiprintf_r+0x2fe>
  401f16:	9910      	ldr	r1, [sp, #64]	; 0x40
  401f18:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401f1a:	1c48      	adds	r0, r1, #1
  401f1c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401f20:	2d00      	cmp	r5, #0
  401f22:	f43f ae22 	beq.w	401b6a <_vfiprintf_r+0x352>
  401f26:	3201      	adds	r2, #1
  401f28:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  401f2c:	2101      	movs	r1, #1
  401f2e:	2807      	cmp	r0, #7
  401f30:	9211      	str	r2, [sp, #68]	; 0x44
  401f32:	9010      	str	r0, [sp, #64]	; 0x40
  401f34:	f8ca 5000 	str.w	r5, [sl]
  401f38:	f8ca 1004 	str.w	r1, [sl, #4]
  401f3c:	f340 8108 	ble.w	402150 <_vfiprintf_r+0x938>
  401f40:	2a00      	cmp	r2, #0
  401f42:	f040 81bc 	bne.w	4022be <_vfiprintf_r+0xaa6>
  401f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401f48:	2b00      	cmp	r3, #0
  401f4a:	f43f ae1f 	beq.w	401b8c <_vfiprintf_r+0x374>
  401f4e:	ab0e      	add	r3, sp, #56	; 0x38
  401f50:	2202      	movs	r2, #2
  401f52:	4608      	mov	r0, r1
  401f54:	931c      	str	r3, [sp, #112]	; 0x70
  401f56:	921d      	str	r2, [sp, #116]	; 0x74
  401f58:	46ca      	mov	sl, r9
  401f5a:	4601      	mov	r1, r0
  401f5c:	f10a 0a08 	add.w	sl, sl, #8
  401f60:	3001      	adds	r0, #1
  401f62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401f64:	2b80      	cmp	r3, #128	; 0x80
  401f66:	f43f ae19 	beq.w	401b9c <_vfiprintf_r+0x384>
  401f6a:	9b05      	ldr	r3, [sp, #20]
  401f6c:	1ae4      	subs	r4, r4, r3
  401f6e:	2c00      	cmp	r4, #0
  401f70:	dd2e      	ble.n	401fd0 <_vfiprintf_r+0x7b8>
  401f72:	2c10      	cmp	r4, #16
  401f74:	4db3      	ldr	r5, [pc, #716]	; (402244 <_vfiprintf_r+0xa2c>)
  401f76:	dd1e      	ble.n	401fb6 <_vfiprintf_r+0x79e>
  401f78:	46d6      	mov	lr, sl
  401f7a:	2610      	movs	r6, #16
  401f7c:	9f06      	ldr	r7, [sp, #24]
  401f7e:	f8dd a010 	ldr.w	sl, [sp, #16]
  401f82:	e006      	b.n	401f92 <_vfiprintf_r+0x77a>
  401f84:	1c88      	adds	r0, r1, #2
  401f86:	f10e 0e08 	add.w	lr, lr, #8
  401f8a:	4619      	mov	r1, r3
  401f8c:	3c10      	subs	r4, #16
  401f8e:	2c10      	cmp	r4, #16
  401f90:	dd10      	ble.n	401fb4 <_vfiprintf_r+0x79c>
  401f92:	1c4b      	adds	r3, r1, #1
  401f94:	3210      	adds	r2, #16
  401f96:	2b07      	cmp	r3, #7
  401f98:	9211      	str	r2, [sp, #68]	; 0x44
  401f9a:	e88e 0060 	stmia.w	lr, {r5, r6}
  401f9e:	9310      	str	r3, [sp, #64]	; 0x40
  401fa0:	ddf0      	ble.n	401f84 <_vfiprintf_r+0x76c>
  401fa2:	2a00      	cmp	r2, #0
  401fa4:	d165      	bne.n	402072 <_vfiprintf_r+0x85a>
  401fa6:	3c10      	subs	r4, #16
  401fa8:	2c10      	cmp	r4, #16
  401faa:	f04f 0001 	mov.w	r0, #1
  401fae:	4611      	mov	r1, r2
  401fb0:	46ce      	mov	lr, r9
  401fb2:	dcee      	bgt.n	401f92 <_vfiprintf_r+0x77a>
  401fb4:	46f2      	mov	sl, lr
  401fb6:	4422      	add	r2, r4
  401fb8:	2807      	cmp	r0, #7
  401fba:	9211      	str	r2, [sp, #68]	; 0x44
  401fbc:	f8ca 5000 	str.w	r5, [sl]
  401fc0:	f8ca 4004 	str.w	r4, [sl, #4]
  401fc4:	9010      	str	r0, [sp, #64]	; 0x40
  401fc6:	f300 8085 	bgt.w	4020d4 <_vfiprintf_r+0x8bc>
  401fca:	f10a 0a08 	add.w	sl, sl, #8
  401fce:	3001      	adds	r0, #1
  401fd0:	9905      	ldr	r1, [sp, #20]
  401fd2:	f8ca b000 	str.w	fp, [sl]
  401fd6:	440a      	add	r2, r1
  401fd8:	2807      	cmp	r0, #7
  401fda:	9211      	str	r2, [sp, #68]	; 0x44
  401fdc:	f8ca 1004 	str.w	r1, [sl, #4]
  401fe0:	9010      	str	r0, [sp, #64]	; 0x40
  401fe2:	f340 8082 	ble.w	4020ea <_vfiprintf_r+0x8d2>
  401fe6:	2a00      	cmp	r2, #0
  401fe8:	f040 8118 	bne.w	40221c <_vfiprintf_r+0xa04>
  401fec:	9b02      	ldr	r3, [sp, #8]
  401fee:	9210      	str	r2, [sp, #64]	; 0x40
  401ff0:	0758      	lsls	r0, r3, #29
  401ff2:	d535      	bpl.n	402060 <_vfiprintf_r+0x848>
  401ff4:	9b08      	ldr	r3, [sp, #32]
  401ff6:	9901      	ldr	r1, [sp, #4]
  401ff8:	1a5c      	subs	r4, r3, r1
  401ffa:	2c00      	cmp	r4, #0
  401ffc:	f340 80e7 	ble.w	4021ce <_vfiprintf_r+0x9b6>
  402000:	46ca      	mov	sl, r9
  402002:	2c10      	cmp	r4, #16
  402004:	f340 8218 	ble.w	402438 <_vfiprintf_r+0xc20>
  402008:	9910      	ldr	r1, [sp, #64]	; 0x40
  40200a:	4e8f      	ldr	r6, [pc, #572]	; (402248 <_vfiprintf_r+0xa30>)
  40200c:	9f06      	ldr	r7, [sp, #24]
  40200e:	f8dd b010 	ldr.w	fp, [sp, #16]
  402012:	2510      	movs	r5, #16
  402014:	e006      	b.n	402024 <_vfiprintf_r+0x80c>
  402016:	1c88      	adds	r0, r1, #2
  402018:	f10a 0a08 	add.w	sl, sl, #8
  40201c:	4619      	mov	r1, r3
  40201e:	3c10      	subs	r4, #16
  402020:	2c10      	cmp	r4, #16
  402022:	dd11      	ble.n	402048 <_vfiprintf_r+0x830>
  402024:	1c4b      	adds	r3, r1, #1
  402026:	3210      	adds	r2, #16
  402028:	2b07      	cmp	r3, #7
  40202a:	9211      	str	r2, [sp, #68]	; 0x44
  40202c:	f8ca 6000 	str.w	r6, [sl]
  402030:	f8ca 5004 	str.w	r5, [sl, #4]
  402034:	9310      	str	r3, [sp, #64]	; 0x40
  402036:	ddee      	ble.n	402016 <_vfiprintf_r+0x7fe>
  402038:	bb42      	cbnz	r2, 40208c <_vfiprintf_r+0x874>
  40203a:	3c10      	subs	r4, #16
  40203c:	2c10      	cmp	r4, #16
  40203e:	f04f 0001 	mov.w	r0, #1
  402042:	4611      	mov	r1, r2
  402044:	46ca      	mov	sl, r9
  402046:	dced      	bgt.n	402024 <_vfiprintf_r+0x80c>
  402048:	4422      	add	r2, r4
  40204a:	2807      	cmp	r0, #7
  40204c:	9211      	str	r2, [sp, #68]	; 0x44
  40204e:	f8ca 6000 	str.w	r6, [sl]
  402052:	f8ca 4004 	str.w	r4, [sl, #4]
  402056:	9010      	str	r0, [sp, #64]	; 0x40
  402058:	dd51      	ble.n	4020fe <_vfiprintf_r+0x8e6>
  40205a:	2a00      	cmp	r2, #0
  40205c:	f040 819b 	bne.w	402396 <_vfiprintf_r+0xb7e>
  402060:	9b03      	ldr	r3, [sp, #12]
  402062:	9a08      	ldr	r2, [sp, #32]
  402064:	9901      	ldr	r1, [sp, #4]
  402066:	428a      	cmp	r2, r1
  402068:	bfac      	ite	ge
  40206a:	189b      	addge	r3, r3, r2
  40206c:	185b      	addlt	r3, r3, r1
  40206e:	9303      	str	r3, [sp, #12]
  402070:	e04e      	b.n	402110 <_vfiprintf_r+0x8f8>
  402072:	aa0f      	add	r2, sp, #60	; 0x3c
  402074:	4651      	mov	r1, sl
  402076:	4638      	mov	r0, r7
  402078:	f7ff fb8e 	bl	401798 <__sprint_r.part.0>
  40207c:	2800      	cmp	r0, #0
  40207e:	f040 813f 	bne.w	402300 <_vfiprintf_r+0xae8>
  402082:	9910      	ldr	r1, [sp, #64]	; 0x40
  402084:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402086:	1c48      	adds	r0, r1, #1
  402088:	46ce      	mov	lr, r9
  40208a:	e77f      	b.n	401f8c <_vfiprintf_r+0x774>
  40208c:	aa0f      	add	r2, sp, #60	; 0x3c
  40208e:	4659      	mov	r1, fp
  402090:	4638      	mov	r0, r7
  402092:	f7ff fb81 	bl	401798 <__sprint_r.part.0>
  402096:	b960      	cbnz	r0, 4020b2 <_vfiprintf_r+0x89a>
  402098:	9910      	ldr	r1, [sp, #64]	; 0x40
  40209a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40209c:	1c48      	adds	r0, r1, #1
  40209e:	46ca      	mov	sl, r9
  4020a0:	e7bd      	b.n	40201e <_vfiprintf_r+0x806>
  4020a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4020a4:	f8dd b010 	ldr.w	fp, [sp, #16]
  4020a8:	2b00      	cmp	r3, #0
  4020aa:	f040 81d4 	bne.w	402456 <_vfiprintf_r+0xc3e>
  4020ae:	2300      	movs	r3, #0
  4020b0:	9310      	str	r3, [sp, #64]	; 0x40
  4020b2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4020b6:	f013 0f01 	tst.w	r3, #1
  4020ba:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4020be:	d102      	bne.n	4020c6 <_vfiprintf_r+0x8ae>
  4020c0:	059a      	lsls	r2, r3, #22
  4020c2:	f140 80de 	bpl.w	402282 <_vfiprintf_r+0xa6a>
  4020c6:	065b      	lsls	r3, r3, #25
  4020c8:	f53f acb2 	bmi.w	401a30 <_vfiprintf_r+0x218>
  4020cc:	9803      	ldr	r0, [sp, #12]
  4020ce:	b02d      	add	sp, #180	; 0xb4
  4020d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4020d4:	2a00      	cmp	r2, #0
  4020d6:	f040 8106 	bne.w	4022e6 <_vfiprintf_r+0xace>
  4020da:	9a05      	ldr	r2, [sp, #20]
  4020dc:	921d      	str	r2, [sp, #116]	; 0x74
  4020de:	2301      	movs	r3, #1
  4020e0:	9211      	str	r2, [sp, #68]	; 0x44
  4020e2:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4020e6:	9310      	str	r3, [sp, #64]	; 0x40
  4020e8:	46ca      	mov	sl, r9
  4020ea:	f10a 0a08 	add.w	sl, sl, #8
  4020ee:	9b02      	ldr	r3, [sp, #8]
  4020f0:	0759      	lsls	r1, r3, #29
  4020f2:	d504      	bpl.n	4020fe <_vfiprintf_r+0x8e6>
  4020f4:	9b08      	ldr	r3, [sp, #32]
  4020f6:	9901      	ldr	r1, [sp, #4]
  4020f8:	1a5c      	subs	r4, r3, r1
  4020fa:	2c00      	cmp	r4, #0
  4020fc:	dc81      	bgt.n	402002 <_vfiprintf_r+0x7ea>
  4020fe:	9b03      	ldr	r3, [sp, #12]
  402100:	9908      	ldr	r1, [sp, #32]
  402102:	9801      	ldr	r0, [sp, #4]
  402104:	4281      	cmp	r1, r0
  402106:	bfac      	ite	ge
  402108:	185b      	addge	r3, r3, r1
  40210a:	181b      	addlt	r3, r3, r0
  40210c:	9303      	str	r3, [sp, #12]
  40210e:	bb72      	cbnz	r2, 40216e <_vfiprintf_r+0x956>
  402110:	2300      	movs	r3, #0
  402112:	9310      	str	r3, [sp, #64]	; 0x40
  402114:	46ca      	mov	sl, r9
  402116:	f7ff bbbc 	b.w	401892 <_vfiprintf_r+0x7a>
  40211a:	aa0f      	add	r2, sp, #60	; 0x3c
  40211c:	9904      	ldr	r1, [sp, #16]
  40211e:	4620      	mov	r0, r4
  402120:	f7ff fb3a 	bl	401798 <__sprint_r.part.0>
  402124:	bb50      	cbnz	r0, 40217c <_vfiprintf_r+0x964>
  402126:	9910      	ldr	r1, [sp, #64]	; 0x40
  402128:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40212a:	f101 0e01 	add.w	lr, r1, #1
  40212e:	46cc      	mov	ip, r9
  402130:	e548      	b.n	401bc4 <_vfiprintf_r+0x3ac>
  402132:	2a00      	cmp	r2, #0
  402134:	f040 8140 	bne.w	4023b8 <_vfiprintf_r+0xba0>
  402138:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  40213c:	2900      	cmp	r1, #0
  40213e:	f000 811b 	beq.w	402378 <_vfiprintf_r+0xb60>
  402142:	2201      	movs	r2, #1
  402144:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  402148:	4610      	mov	r0, r2
  40214a:	921d      	str	r2, [sp, #116]	; 0x74
  40214c:	911c      	str	r1, [sp, #112]	; 0x70
  40214e:	46ca      	mov	sl, r9
  402150:	4601      	mov	r1, r0
  402152:	f10a 0a08 	add.w	sl, sl, #8
  402156:	3001      	adds	r0, #1
  402158:	e507      	b.n	401b6a <_vfiprintf_r+0x352>
  40215a:	9b02      	ldr	r3, [sp, #8]
  40215c:	2a01      	cmp	r2, #1
  40215e:	f000 8098 	beq.w	402292 <_vfiprintf_r+0xa7a>
  402162:	2a02      	cmp	r2, #2
  402164:	d10d      	bne.n	402182 <_vfiprintf_r+0x96a>
  402166:	9302      	str	r3, [sp, #8]
  402168:	2600      	movs	r6, #0
  40216a:	2700      	movs	r7, #0
  40216c:	e5b0      	b.n	401cd0 <_vfiprintf_r+0x4b8>
  40216e:	aa0f      	add	r2, sp, #60	; 0x3c
  402170:	9904      	ldr	r1, [sp, #16]
  402172:	9806      	ldr	r0, [sp, #24]
  402174:	f7ff fb10 	bl	401798 <__sprint_r.part.0>
  402178:	2800      	cmp	r0, #0
  40217a:	d0c9      	beq.n	402110 <_vfiprintf_r+0x8f8>
  40217c:	f8dd b010 	ldr.w	fp, [sp, #16]
  402180:	e797      	b.n	4020b2 <_vfiprintf_r+0x89a>
  402182:	9302      	str	r3, [sp, #8]
  402184:	2600      	movs	r6, #0
  402186:	2700      	movs	r7, #0
  402188:	4649      	mov	r1, r9
  40218a:	e000      	b.n	40218e <_vfiprintf_r+0x976>
  40218c:	4659      	mov	r1, fp
  40218e:	08f2      	lsrs	r2, r6, #3
  402190:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  402194:	08f8      	lsrs	r0, r7, #3
  402196:	f006 0307 	and.w	r3, r6, #7
  40219a:	4607      	mov	r7, r0
  40219c:	4616      	mov	r6, r2
  40219e:	3330      	adds	r3, #48	; 0x30
  4021a0:	ea56 0207 	orrs.w	r2, r6, r7
  4021a4:	f801 3c01 	strb.w	r3, [r1, #-1]
  4021a8:	f101 3bff 	add.w	fp, r1, #4294967295
  4021ac:	d1ee      	bne.n	40218c <_vfiprintf_r+0x974>
  4021ae:	9a02      	ldr	r2, [sp, #8]
  4021b0:	07d6      	lsls	r6, r2, #31
  4021b2:	f57f ad9d 	bpl.w	401cf0 <_vfiprintf_r+0x4d8>
  4021b6:	2b30      	cmp	r3, #48	; 0x30
  4021b8:	f43f ad9a 	beq.w	401cf0 <_vfiprintf_r+0x4d8>
  4021bc:	3902      	subs	r1, #2
  4021be:	2330      	movs	r3, #48	; 0x30
  4021c0:	f80b 3c01 	strb.w	r3, [fp, #-1]
  4021c4:	eba9 0301 	sub.w	r3, r9, r1
  4021c8:	9305      	str	r3, [sp, #20]
  4021ca:	468b      	mov	fp, r1
  4021cc:	e476      	b.n	401abc <_vfiprintf_r+0x2a4>
  4021ce:	9b03      	ldr	r3, [sp, #12]
  4021d0:	9a08      	ldr	r2, [sp, #32]
  4021d2:	428a      	cmp	r2, r1
  4021d4:	bfac      	ite	ge
  4021d6:	189b      	addge	r3, r3, r2
  4021d8:	185b      	addlt	r3, r3, r1
  4021da:	9303      	str	r3, [sp, #12]
  4021dc:	e798      	b.n	402110 <_vfiprintf_r+0x8f8>
  4021de:	2202      	movs	r2, #2
  4021e0:	e44d      	b.n	401a7e <_vfiprintf_r+0x266>
  4021e2:	2f00      	cmp	r7, #0
  4021e4:	bf08      	it	eq
  4021e6:	2e0a      	cmpeq	r6, #10
  4021e8:	d352      	bcc.n	402290 <_vfiprintf_r+0xa78>
  4021ea:	46cb      	mov	fp, r9
  4021ec:	4630      	mov	r0, r6
  4021ee:	4639      	mov	r1, r7
  4021f0:	220a      	movs	r2, #10
  4021f2:	2300      	movs	r3, #0
  4021f4:	f001 ffa0 	bl	404138 <__aeabi_uldivmod>
  4021f8:	3230      	adds	r2, #48	; 0x30
  4021fa:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4021fe:	4630      	mov	r0, r6
  402200:	4639      	mov	r1, r7
  402202:	2300      	movs	r3, #0
  402204:	220a      	movs	r2, #10
  402206:	f001 ff97 	bl	404138 <__aeabi_uldivmod>
  40220a:	4606      	mov	r6, r0
  40220c:	460f      	mov	r7, r1
  40220e:	ea56 0307 	orrs.w	r3, r6, r7
  402212:	d1eb      	bne.n	4021ec <_vfiprintf_r+0x9d4>
  402214:	e56c      	b.n	401cf0 <_vfiprintf_r+0x4d8>
  402216:	9405      	str	r4, [sp, #20]
  402218:	46cb      	mov	fp, r9
  40221a:	e44f      	b.n	401abc <_vfiprintf_r+0x2a4>
  40221c:	aa0f      	add	r2, sp, #60	; 0x3c
  40221e:	9904      	ldr	r1, [sp, #16]
  402220:	9806      	ldr	r0, [sp, #24]
  402222:	f7ff fab9 	bl	401798 <__sprint_r.part.0>
  402226:	2800      	cmp	r0, #0
  402228:	d1a8      	bne.n	40217c <_vfiprintf_r+0x964>
  40222a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40222c:	46ca      	mov	sl, r9
  40222e:	e75e      	b.n	4020ee <_vfiprintf_r+0x8d6>
  402230:	aa0f      	add	r2, sp, #60	; 0x3c
  402232:	9904      	ldr	r1, [sp, #16]
  402234:	9806      	ldr	r0, [sp, #24]
  402236:	f7ff faaf 	bl	401798 <__sprint_r.part.0>
  40223a:	2800      	cmp	r0, #0
  40223c:	d19e      	bne.n	40217c <_vfiprintf_r+0x964>
  40223e:	46ca      	mov	sl, r9
  402240:	f7ff bbc0 	b.w	4019c4 <_vfiprintf_r+0x1ac>
  402244:	004044c4 	.word	0x004044c4
  402248:	004044b4 	.word	0x004044b4
  40224c:	3104      	adds	r1, #4
  40224e:	6816      	ldr	r6, [r2, #0]
  402250:	9107      	str	r1, [sp, #28]
  402252:	2201      	movs	r2, #1
  402254:	2700      	movs	r7, #0
  402256:	e412      	b.n	401a7e <_vfiprintf_r+0x266>
  402258:	9807      	ldr	r0, [sp, #28]
  40225a:	4601      	mov	r1, r0
  40225c:	3104      	adds	r1, #4
  40225e:	6806      	ldr	r6, [r0, #0]
  402260:	9107      	str	r1, [sp, #28]
  402262:	2700      	movs	r7, #0
  402264:	e40b      	b.n	401a7e <_vfiprintf_r+0x266>
  402266:	680e      	ldr	r6, [r1, #0]
  402268:	3104      	adds	r1, #4
  40226a:	9107      	str	r1, [sp, #28]
  40226c:	2700      	movs	r7, #0
  40226e:	e591      	b.n	401d94 <_vfiprintf_r+0x57c>
  402270:	9907      	ldr	r1, [sp, #28]
  402272:	680e      	ldr	r6, [r1, #0]
  402274:	460a      	mov	r2, r1
  402276:	17f7      	asrs	r7, r6, #31
  402278:	3204      	adds	r2, #4
  40227a:	9207      	str	r2, [sp, #28]
  40227c:	4630      	mov	r0, r6
  40227e:	4639      	mov	r1, r7
  402280:	e50f      	b.n	401ca2 <_vfiprintf_r+0x48a>
  402282:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402286:	f000 fe7f 	bl	402f88 <__retarget_lock_release_recursive>
  40228a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40228e:	e71a      	b.n	4020c6 <_vfiprintf_r+0x8ae>
  402290:	9b02      	ldr	r3, [sp, #8]
  402292:	9302      	str	r3, [sp, #8]
  402294:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  402298:	3630      	adds	r6, #48	; 0x30
  40229a:	2301      	movs	r3, #1
  40229c:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  4022a0:	9305      	str	r3, [sp, #20]
  4022a2:	e40b      	b.n	401abc <_vfiprintf_r+0x2a4>
  4022a4:	aa0f      	add	r2, sp, #60	; 0x3c
  4022a6:	9904      	ldr	r1, [sp, #16]
  4022a8:	9806      	ldr	r0, [sp, #24]
  4022aa:	f7ff fa75 	bl	401798 <__sprint_r.part.0>
  4022ae:	2800      	cmp	r0, #0
  4022b0:	f47f af64 	bne.w	40217c <_vfiprintf_r+0x964>
  4022b4:	9910      	ldr	r1, [sp, #64]	; 0x40
  4022b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4022b8:	1c48      	adds	r0, r1, #1
  4022ba:	46ca      	mov	sl, r9
  4022bc:	e651      	b.n	401f62 <_vfiprintf_r+0x74a>
  4022be:	aa0f      	add	r2, sp, #60	; 0x3c
  4022c0:	9904      	ldr	r1, [sp, #16]
  4022c2:	9806      	ldr	r0, [sp, #24]
  4022c4:	f7ff fa68 	bl	401798 <__sprint_r.part.0>
  4022c8:	2800      	cmp	r0, #0
  4022ca:	f47f af57 	bne.w	40217c <_vfiprintf_r+0x964>
  4022ce:	9910      	ldr	r1, [sp, #64]	; 0x40
  4022d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4022d2:	1c48      	adds	r0, r1, #1
  4022d4:	46ca      	mov	sl, r9
  4022d6:	e448      	b.n	401b6a <_vfiprintf_r+0x352>
  4022d8:	2a00      	cmp	r2, #0
  4022da:	f040 8091 	bne.w	402400 <_vfiprintf_r+0xbe8>
  4022de:	2001      	movs	r0, #1
  4022e0:	4611      	mov	r1, r2
  4022e2:	46ca      	mov	sl, r9
  4022e4:	e641      	b.n	401f6a <_vfiprintf_r+0x752>
  4022e6:	aa0f      	add	r2, sp, #60	; 0x3c
  4022e8:	9904      	ldr	r1, [sp, #16]
  4022ea:	9806      	ldr	r0, [sp, #24]
  4022ec:	f7ff fa54 	bl	401798 <__sprint_r.part.0>
  4022f0:	2800      	cmp	r0, #0
  4022f2:	f47f af43 	bne.w	40217c <_vfiprintf_r+0x964>
  4022f6:	9810      	ldr	r0, [sp, #64]	; 0x40
  4022f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4022fa:	3001      	adds	r0, #1
  4022fc:	46ca      	mov	sl, r9
  4022fe:	e667      	b.n	401fd0 <_vfiprintf_r+0x7b8>
  402300:	46d3      	mov	fp, sl
  402302:	e6d6      	b.n	4020b2 <_vfiprintf_r+0x89a>
  402304:	9e07      	ldr	r6, [sp, #28]
  402306:	3607      	adds	r6, #7
  402308:	f026 0207 	bic.w	r2, r6, #7
  40230c:	f102 0108 	add.w	r1, r2, #8
  402310:	e9d2 6700 	ldrd	r6, r7, [r2]
  402314:	9107      	str	r1, [sp, #28]
  402316:	2201      	movs	r2, #1
  402318:	f7ff bbb1 	b.w	401a7e <_vfiprintf_r+0x266>
  40231c:	9e07      	ldr	r6, [sp, #28]
  40231e:	3607      	adds	r6, #7
  402320:	f026 0607 	bic.w	r6, r6, #7
  402324:	e9d6 0100 	ldrd	r0, r1, [r6]
  402328:	f106 0208 	add.w	r2, r6, #8
  40232c:	9207      	str	r2, [sp, #28]
  40232e:	4606      	mov	r6, r0
  402330:	460f      	mov	r7, r1
  402332:	e4b6      	b.n	401ca2 <_vfiprintf_r+0x48a>
  402334:	9e07      	ldr	r6, [sp, #28]
  402336:	3607      	adds	r6, #7
  402338:	f026 0207 	bic.w	r2, r6, #7
  40233c:	f102 0108 	add.w	r1, r2, #8
  402340:	e9d2 6700 	ldrd	r6, r7, [r2]
  402344:	9107      	str	r1, [sp, #28]
  402346:	2200      	movs	r2, #0
  402348:	f7ff bb99 	b.w	401a7e <_vfiprintf_r+0x266>
  40234c:	9e07      	ldr	r6, [sp, #28]
  40234e:	3607      	adds	r6, #7
  402350:	f026 0107 	bic.w	r1, r6, #7
  402354:	f101 0008 	add.w	r0, r1, #8
  402358:	9007      	str	r0, [sp, #28]
  40235a:	e9d1 6700 	ldrd	r6, r7, [r1]
  40235e:	e519      	b.n	401d94 <_vfiprintf_r+0x57c>
  402360:	46cb      	mov	fp, r9
  402362:	f7ff bbab 	b.w	401abc <_vfiprintf_r+0x2a4>
  402366:	252d      	movs	r5, #45	; 0x2d
  402368:	4276      	negs	r6, r6
  40236a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40236e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402372:	2201      	movs	r2, #1
  402374:	f7ff bb88 	b.w	401a88 <_vfiprintf_r+0x270>
  402378:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40237a:	b9b3      	cbnz	r3, 4023aa <_vfiprintf_r+0xb92>
  40237c:	4611      	mov	r1, r2
  40237e:	2001      	movs	r0, #1
  402380:	46ca      	mov	sl, r9
  402382:	e5f2      	b.n	401f6a <_vfiprintf_r+0x752>
  402384:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402388:	f000 fdfe 	bl	402f88 <__retarget_lock_release_recursive>
  40238c:	f04f 33ff 	mov.w	r3, #4294967295
  402390:	9303      	str	r3, [sp, #12]
  402392:	f7ff bb50 	b.w	401a36 <_vfiprintf_r+0x21e>
  402396:	aa0f      	add	r2, sp, #60	; 0x3c
  402398:	9904      	ldr	r1, [sp, #16]
  40239a:	9806      	ldr	r0, [sp, #24]
  40239c:	f7ff f9fc 	bl	401798 <__sprint_r.part.0>
  4023a0:	2800      	cmp	r0, #0
  4023a2:	f47f aeeb 	bne.w	40217c <_vfiprintf_r+0x964>
  4023a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4023a8:	e6a9      	b.n	4020fe <_vfiprintf_r+0x8e6>
  4023aa:	ab0e      	add	r3, sp, #56	; 0x38
  4023ac:	2202      	movs	r2, #2
  4023ae:	931c      	str	r3, [sp, #112]	; 0x70
  4023b0:	921d      	str	r2, [sp, #116]	; 0x74
  4023b2:	2001      	movs	r0, #1
  4023b4:	46ca      	mov	sl, r9
  4023b6:	e5d0      	b.n	401f5a <_vfiprintf_r+0x742>
  4023b8:	aa0f      	add	r2, sp, #60	; 0x3c
  4023ba:	9904      	ldr	r1, [sp, #16]
  4023bc:	9806      	ldr	r0, [sp, #24]
  4023be:	f7ff f9eb 	bl	401798 <__sprint_r.part.0>
  4023c2:	2800      	cmp	r0, #0
  4023c4:	f47f aeda 	bne.w	40217c <_vfiprintf_r+0x964>
  4023c8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4023ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4023cc:	1c48      	adds	r0, r1, #1
  4023ce:	46ca      	mov	sl, r9
  4023d0:	e5a4      	b.n	401f1c <_vfiprintf_r+0x704>
  4023d2:	9a07      	ldr	r2, [sp, #28]
  4023d4:	9903      	ldr	r1, [sp, #12]
  4023d6:	6813      	ldr	r3, [r2, #0]
  4023d8:	17cd      	asrs	r5, r1, #31
  4023da:	4608      	mov	r0, r1
  4023dc:	3204      	adds	r2, #4
  4023de:	4629      	mov	r1, r5
  4023e0:	9207      	str	r2, [sp, #28]
  4023e2:	e9c3 0100 	strd	r0, r1, [r3]
  4023e6:	f7ff ba54 	b.w	401892 <_vfiprintf_r+0x7a>
  4023ea:	4658      	mov	r0, fp
  4023ec:	9607      	str	r6, [sp, #28]
  4023ee:	9302      	str	r3, [sp, #8]
  4023f0:	f001 fc66 	bl	403cc0 <strlen>
  4023f4:	2400      	movs	r4, #0
  4023f6:	9005      	str	r0, [sp, #20]
  4023f8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4023fc:	f7ff bb5e 	b.w	401abc <_vfiprintf_r+0x2a4>
  402400:	aa0f      	add	r2, sp, #60	; 0x3c
  402402:	9904      	ldr	r1, [sp, #16]
  402404:	9806      	ldr	r0, [sp, #24]
  402406:	f7ff f9c7 	bl	401798 <__sprint_r.part.0>
  40240a:	2800      	cmp	r0, #0
  40240c:	f47f aeb6 	bne.w	40217c <_vfiprintf_r+0x964>
  402410:	9910      	ldr	r1, [sp, #64]	; 0x40
  402412:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402414:	1c48      	adds	r0, r1, #1
  402416:	46ca      	mov	sl, r9
  402418:	e5a7      	b.n	401f6a <_vfiprintf_r+0x752>
  40241a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40241c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40241e:	4e20      	ldr	r6, [pc, #128]	; (4024a0 <_vfiprintf_r+0xc88>)
  402420:	3101      	adds	r1, #1
  402422:	f7ff bb90 	b.w	401b46 <_vfiprintf_r+0x32e>
  402426:	2c06      	cmp	r4, #6
  402428:	bf28      	it	cs
  40242a:	2406      	movcs	r4, #6
  40242c:	9405      	str	r4, [sp, #20]
  40242e:	9607      	str	r6, [sp, #28]
  402430:	9401      	str	r4, [sp, #4]
  402432:	f8df b070 	ldr.w	fp, [pc, #112]	; 4024a4 <_vfiprintf_r+0xc8c>
  402436:	e4d5      	b.n	401de4 <_vfiprintf_r+0x5cc>
  402438:	9810      	ldr	r0, [sp, #64]	; 0x40
  40243a:	4e19      	ldr	r6, [pc, #100]	; (4024a0 <_vfiprintf_r+0xc88>)
  40243c:	3001      	adds	r0, #1
  40243e:	e603      	b.n	402048 <_vfiprintf_r+0x830>
  402440:	9405      	str	r4, [sp, #20]
  402442:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402446:	9607      	str	r6, [sp, #28]
  402448:	9302      	str	r3, [sp, #8]
  40244a:	4604      	mov	r4, r0
  40244c:	f7ff bb36 	b.w	401abc <_vfiprintf_r+0x2a4>
  402450:	4686      	mov	lr, r0
  402452:	f7ff bbce 	b.w	401bf2 <_vfiprintf_r+0x3da>
  402456:	9806      	ldr	r0, [sp, #24]
  402458:	aa0f      	add	r2, sp, #60	; 0x3c
  40245a:	4659      	mov	r1, fp
  40245c:	f7ff f99c 	bl	401798 <__sprint_r.part.0>
  402460:	2800      	cmp	r0, #0
  402462:	f43f ae24 	beq.w	4020ae <_vfiprintf_r+0x896>
  402466:	e624      	b.n	4020b2 <_vfiprintf_r+0x89a>
  402468:	9907      	ldr	r1, [sp, #28]
  40246a:	f898 2001 	ldrb.w	r2, [r8, #1]
  40246e:	680c      	ldr	r4, [r1, #0]
  402470:	3104      	adds	r1, #4
  402472:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  402476:	46b8      	mov	r8, r7
  402478:	9107      	str	r1, [sp, #28]
  40247a:	f7ff ba3f 	b.w	4018fc <_vfiprintf_r+0xe4>
  40247e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402482:	e43c      	b.n	401cfe <_vfiprintf_r+0x4e6>
  402484:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402488:	e521      	b.n	401ece <_vfiprintf_r+0x6b6>
  40248a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40248e:	f7ff bbf4 	b.w	401c7a <_vfiprintf_r+0x462>
  402492:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402496:	e491      	b.n	401dbc <_vfiprintf_r+0x5a4>
  402498:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40249c:	e469      	b.n	401d72 <_vfiprintf_r+0x55a>
  40249e:	bf00      	nop
  4024a0:	004044b4 	.word	0x004044b4
  4024a4:	004044ac 	.word	0x004044ac

004024a8 <__sbprintf>:
  4024a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4024ac:	460c      	mov	r4, r1
  4024ae:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  4024b2:	8989      	ldrh	r1, [r1, #12]
  4024b4:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4024b6:	89e5      	ldrh	r5, [r4, #14]
  4024b8:	9619      	str	r6, [sp, #100]	; 0x64
  4024ba:	f021 0102 	bic.w	r1, r1, #2
  4024be:	4606      	mov	r6, r0
  4024c0:	69e0      	ldr	r0, [r4, #28]
  4024c2:	f8ad 100c 	strh.w	r1, [sp, #12]
  4024c6:	4617      	mov	r7, r2
  4024c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4024cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4024ce:	f8ad 500e 	strh.w	r5, [sp, #14]
  4024d2:	4698      	mov	r8, r3
  4024d4:	ad1a      	add	r5, sp, #104	; 0x68
  4024d6:	2300      	movs	r3, #0
  4024d8:	9007      	str	r0, [sp, #28]
  4024da:	a816      	add	r0, sp, #88	; 0x58
  4024dc:	9209      	str	r2, [sp, #36]	; 0x24
  4024de:	9306      	str	r3, [sp, #24]
  4024e0:	9500      	str	r5, [sp, #0]
  4024e2:	9504      	str	r5, [sp, #16]
  4024e4:	9102      	str	r1, [sp, #8]
  4024e6:	9105      	str	r1, [sp, #20]
  4024e8:	f000 fd48 	bl	402f7c <__retarget_lock_init_recursive>
  4024ec:	4643      	mov	r3, r8
  4024ee:	463a      	mov	r2, r7
  4024f0:	4669      	mov	r1, sp
  4024f2:	4630      	mov	r0, r6
  4024f4:	f7ff f990 	bl	401818 <_vfiprintf_r>
  4024f8:	1e05      	subs	r5, r0, #0
  4024fa:	db07      	blt.n	40250c <__sbprintf+0x64>
  4024fc:	4630      	mov	r0, r6
  4024fe:	4669      	mov	r1, sp
  402500:	f000 f928 	bl	402754 <_fflush_r>
  402504:	2800      	cmp	r0, #0
  402506:	bf18      	it	ne
  402508:	f04f 35ff 	movne.w	r5, #4294967295
  40250c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  402510:	065b      	lsls	r3, r3, #25
  402512:	d503      	bpl.n	40251c <__sbprintf+0x74>
  402514:	89a3      	ldrh	r3, [r4, #12]
  402516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40251a:	81a3      	strh	r3, [r4, #12]
  40251c:	9816      	ldr	r0, [sp, #88]	; 0x58
  40251e:	f000 fd2f 	bl	402f80 <__retarget_lock_close_recursive>
  402522:	4628      	mov	r0, r5
  402524:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  402528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040252c <__swsetup_r>:
  40252c:	b538      	push	{r3, r4, r5, lr}
  40252e:	4b30      	ldr	r3, [pc, #192]	; (4025f0 <__swsetup_r+0xc4>)
  402530:	681b      	ldr	r3, [r3, #0]
  402532:	4605      	mov	r5, r0
  402534:	460c      	mov	r4, r1
  402536:	b113      	cbz	r3, 40253e <__swsetup_r+0x12>
  402538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40253a:	2a00      	cmp	r2, #0
  40253c:	d038      	beq.n	4025b0 <__swsetup_r+0x84>
  40253e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402542:	b293      	uxth	r3, r2
  402544:	0718      	lsls	r0, r3, #28
  402546:	d50c      	bpl.n	402562 <__swsetup_r+0x36>
  402548:	6920      	ldr	r0, [r4, #16]
  40254a:	b1a8      	cbz	r0, 402578 <__swsetup_r+0x4c>
  40254c:	f013 0201 	ands.w	r2, r3, #1
  402550:	d01e      	beq.n	402590 <__swsetup_r+0x64>
  402552:	6963      	ldr	r3, [r4, #20]
  402554:	2200      	movs	r2, #0
  402556:	425b      	negs	r3, r3
  402558:	61a3      	str	r3, [r4, #24]
  40255a:	60a2      	str	r2, [r4, #8]
  40255c:	b1f0      	cbz	r0, 40259c <__swsetup_r+0x70>
  40255e:	2000      	movs	r0, #0
  402560:	bd38      	pop	{r3, r4, r5, pc}
  402562:	06d9      	lsls	r1, r3, #27
  402564:	d53c      	bpl.n	4025e0 <__swsetup_r+0xb4>
  402566:	0758      	lsls	r0, r3, #29
  402568:	d426      	bmi.n	4025b8 <__swsetup_r+0x8c>
  40256a:	6920      	ldr	r0, [r4, #16]
  40256c:	f042 0308 	orr.w	r3, r2, #8
  402570:	81a3      	strh	r3, [r4, #12]
  402572:	b29b      	uxth	r3, r3
  402574:	2800      	cmp	r0, #0
  402576:	d1e9      	bne.n	40254c <__swsetup_r+0x20>
  402578:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40257c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402580:	d0e4      	beq.n	40254c <__swsetup_r+0x20>
  402582:	4628      	mov	r0, r5
  402584:	4621      	mov	r1, r4
  402586:	f000 fd2f 	bl	402fe8 <__smakebuf_r>
  40258a:	89a3      	ldrh	r3, [r4, #12]
  40258c:	6920      	ldr	r0, [r4, #16]
  40258e:	e7dd      	b.n	40254c <__swsetup_r+0x20>
  402590:	0799      	lsls	r1, r3, #30
  402592:	bf58      	it	pl
  402594:	6962      	ldrpl	r2, [r4, #20]
  402596:	60a2      	str	r2, [r4, #8]
  402598:	2800      	cmp	r0, #0
  40259a:	d1e0      	bne.n	40255e <__swsetup_r+0x32>
  40259c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4025a0:	061a      	lsls	r2, r3, #24
  4025a2:	d5dd      	bpl.n	402560 <__swsetup_r+0x34>
  4025a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4025a8:	81a3      	strh	r3, [r4, #12]
  4025aa:	f04f 30ff 	mov.w	r0, #4294967295
  4025ae:	bd38      	pop	{r3, r4, r5, pc}
  4025b0:	4618      	mov	r0, r3
  4025b2:	f000 f927 	bl	402804 <__sinit>
  4025b6:	e7c2      	b.n	40253e <__swsetup_r+0x12>
  4025b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4025ba:	b151      	cbz	r1, 4025d2 <__swsetup_r+0xa6>
  4025bc:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4025c0:	4299      	cmp	r1, r3
  4025c2:	d004      	beq.n	4025ce <__swsetup_r+0xa2>
  4025c4:	4628      	mov	r0, r5
  4025c6:	f000 fa43 	bl	402a50 <_free_r>
  4025ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4025ce:	2300      	movs	r3, #0
  4025d0:	6323      	str	r3, [r4, #48]	; 0x30
  4025d2:	2300      	movs	r3, #0
  4025d4:	6920      	ldr	r0, [r4, #16]
  4025d6:	6063      	str	r3, [r4, #4]
  4025d8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4025dc:	6020      	str	r0, [r4, #0]
  4025de:	e7c5      	b.n	40256c <__swsetup_r+0x40>
  4025e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4025e4:	2309      	movs	r3, #9
  4025e6:	602b      	str	r3, [r5, #0]
  4025e8:	f04f 30ff 	mov.w	r0, #4294967295
  4025ec:	81a2      	strh	r2, [r4, #12]
  4025ee:	bd38      	pop	{r3, r4, r5, pc}
  4025f0:	20400010 	.word	0x20400010

004025f4 <register_fini>:
  4025f4:	4b02      	ldr	r3, [pc, #8]	; (402600 <register_fini+0xc>)
  4025f6:	b113      	cbz	r3, 4025fe <register_fini+0xa>
  4025f8:	4802      	ldr	r0, [pc, #8]	; (402604 <register_fini+0x10>)
  4025fa:	f000 b805 	b.w	402608 <atexit>
  4025fe:	4770      	bx	lr
  402600:	00000000 	.word	0x00000000
  402604:	00402875 	.word	0x00402875

00402608 <atexit>:
  402608:	2300      	movs	r3, #0
  40260a:	4601      	mov	r1, r0
  40260c:	461a      	mov	r2, r3
  40260e:	4618      	mov	r0, r3
  402610:	f001 bc6a 	b.w	403ee8 <__register_exitproc>

00402614 <__sflush_r>:
  402614:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  402618:	b29a      	uxth	r2, r3
  40261a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40261e:	460d      	mov	r5, r1
  402620:	0711      	lsls	r1, r2, #28
  402622:	4680      	mov	r8, r0
  402624:	d43a      	bmi.n	40269c <__sflush_r+0x88>
  402626:	686a      	ldr	r2, [r5, #4]
  402628:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40262c:	2a00      	cmp	r2, #0
  40262e:	81ab      	strh	r3, [r5, #12]
  402630:	dd6f      	ble.n	402712 <__sflush_r+0xfe>
  402632:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402634:	2c00      	cmp	r4, #0
  402636:	d049      	beq.n	4026cc <__sflush_r+0xb8>
  402638:	2200      	movs	r2, #0
  40263a:	b29b      	uxth	r3, r3
  40263c:	f8d8 6000 	ldr.w	r6, [r8]
  402640:	f8c8 2000 	str.w	r2, [r8]
  402644:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  402648:	d067      	beq.n	40271a <__sflush_r+0x106>
  40264a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40264c:	075f      	lsls	r7, r3, #29
  40264e:	d505      	bpl.n	40265c <__sflush_r+0x48>
  402650:	6869      	ldr	r1, [r5, #4]
  402652:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402654:	1a52      	subs	r2, r2, r1
  402656:	b10b      	cbz	r3, 40265c <__sflush_r+0x48>
  402658:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40265a:	1ad2      	subs	r2, r2, r3
  40265c:	2300      	movs	r3, #0
  40265e:	69e9      	ldr	r1, [r5, #28]
  402660:	4640      	mov	r0, r8
  402662:	47a0      	blx	r4
  402664:	1c44      	adds	r4, r0, #1
  402666:	d03c      	beq.n	4026e2 <__sflush_r+0xce>
  402668:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40266c:	692a      	ldr	r2, [r5, #16]
  40266e:	602a      	str	r2, [r5, #0]
  402670:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402674:	2200      	movs	r2, #0
  402676:	81ab      	strh	r3, [r5, #12]
  402678:	04db      	lsls	r3, r3, #19
  40267a:	606a      	str	r2, [r5, #4]
  40267c:	d447      	bmi.n	40270e <__sflush_r+0xfa>
  40267e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402680:	f8c8 6000 	str.w	r6, [r8]
  402684:	b311      	cbz	r1, 4026cc <__sflush_r+0xb8>
  402686:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40268a:	4299      	cmp	r1, r3
  40268c:	d002      	beq.n	402694 <__sflush_r+0x80>
  40268e:	4640      	mov	r0, r8
  402690:	f000 f9de 	bl	402a50 <_free_r>
  402694:	2000      	movs	r0, #0
  402696:	6328      	str	r0, [r5, #48]	; 0x30
  402698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40269c:	692e      	ldr	r6, [r5, #16]
  40269e:	b1ae      	cbz	r6, 4026cc <__sflush_r+0xb8>
  4026a0:	682c      	ldr	r4, [r5, #0]
  4026a2:	602e      	str	r6, [r5, #0]
  4026a4:	0791      	lsls	r1, r2, #30
  4026a6:	bf0c      	ite	eq
  4026a8:	696b      	ldreq	r3, [r5, #20]
  4026aa:	2300      	movne	r3, #0
  4026ac:	1ba4      	subs	r4, r4, r6
  4026ae:	60ab      	str	r3, [r5, #8]
  4026b0:	e00a      	b.n	4026c8 <__sflush_r+0xb4>
  4026b2:	4623      	mov	r3, r4
  4026b4:	4632      	mov	r2, r6
  4026b6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4026b8:	69e9      	ldr	r1, [r5, #28]
  4026ba:	4640      	mov	r0, r8
  4026bc:	47b8      	blx	r7
  4026be:	2800      	cmp	r0, #0
  4026c0:	eba4 0400 	sub.w	r4, r4, r0
  4026c4:	4406      	add	r6, r0
  4026c6:	dd04      	ble.n	4026d2 <__sflush_r+0xbe>
  4026c8:	2c00      	cmp	r4, #0
  4026ca:	dcf2      	bgt.n	4026b2 <__sflush_r+0x9e>
  4026cc:	2000      	movs	r0, #0
  4026ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4026d2:	89ab      	ldrh	r3, [r5, #12]
  4026d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4026d8:	81ab      	strh	r3, [r5, #12]
  4026da:	f04f 30ff 	mov.w	r0, #4294967295
  4026de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4026e2:	f8d8 4000 	ldr.w	r4, [r8]
  4026e6:	2c1d      	cmp	r4, #29
  4026e8:	d8f3      	bhi.n	4026d2 <__sflush_r+0xbe>
  4026ea:	4b19      	ldr	r3, [pc, #100]	; (402750 <__sflush_r+0x13c>)
  4026ec:	40e3      	lsrs	r3, r4
  4026ee:	43db      	mvns	r3, r3
  4026f0:	f013 0301 	ands.w	r3, r3, #1
  4026f4:	d1ed      	bne.n	4026d2 <__sflush_r+0xbe>
  4026f6:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4026fa:	606b      	str	r3, [r5, #4]
  4026fc:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  402700:	6929      	ldr	r1, [r5, #16]
  402702:	81ab      	strh	r3, [r5, #12]
  402704:	04da      	lsls	r2, r3, #19
  402706:	6029      	str	r1, [r5, #0]
  402708:	d5b9      	bpl.n	40267e <__sflush_r+0x6a>
  40270a:	2c00      	cmp	r4, #0
  40270c:	d1b7      	bne.n	40267e <__sflush_r+0x6a>
  40270e:	6528      	str	r0, [r5, #80]	; 0x50
  402710:	e7b5      	b.n	40267e <__sflush_r+0x6a>
  402712:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  402714:	2a00      	cmp	r2, #0
  402716:	dc8c      	bgt.n	402632 <__sflush_r+0x1e>
  402718:	e7d8      	b.n	4026cc <__sflush_r+0xb8>
  40271a:	2301      	movs	r3, #1
  40271c:	69e9      	ldr	r1, [r5, #28]
  40271e:	4640      	mov	r0, r8
  402720:	47a0      	blx	r4
  402722:	1c43      	adds	r3, r0, #1
  402724:	4602      	mov	r2, r0
  402726:	d002      	beq.n	40272e <__sflush_r+0x11a>
  402728:	89ab      	ldrh	r3, [r5, #12]
  40272a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40272c:	e78e      	b.n	40264c <__sflush_r+0x38>
  40272e:	f8d8 3000 	ldr.w	r3, [r8]
  402732:	2b00      	cmp	r3, #0
  402734:	d0f8      	beq.n	402728 <__sflush_r+0x114>
  402736:	2b1d      	cmp	r3, #29
  402738:	d001      	beq.n	40273e <__sflush_r+0x12a>
  40273a:	2b16      	cmp	r3, #22
  40273c:	d102      	bne.n	402744 <__sflush_r+0x130>
  40273e:	f8c8 6000 	str.w	r6, [r8]
  402742:	e7c3      	b.n	4026cc <__sflush_r+0xb8>
  402744:	89ab      	ldrh	r3, [r5, #12]
  402746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40274a:	81ab      	strh	r3, [r5, #12]
  40274c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402750:	20400001 	.word	0x20400001

00402754 <_fflush_r>:
  402754:	b538      	push	{r3, r4, r5, lr}
  402756:	460d      	mov	r5, r1
  402758:	4604      	mov	r4, r0
  40275a:	b108      	cbz	r0, 402760 <_fflush_r+0xc>
  40275c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40275e:	b1bb      	cbz	r3, 402790 <_fflush_r+0x3c>
  402760:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  402764:	b188      	cbz	r0, 40278a <_fflush_r+0x36>
  402766:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402768:	07db      	lsls	r3, r3, #31
  40276a:	d401      	bmi.n	402770 <_fflush_r+0x1c>
  40276c:	0581      	lsls	r1, r0, #22
  40276e:	d517      	bpl.n	4027a0 <_fflush_r+0x4c>
  402770:	4620      	mov	r0, r4
  402772:	4629      	mov	r1, r5
  402774:	f7ff ff4e 	bl	402614 <__sflush_r>
  402778:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40277a:	07da      	lsls	r2, r3, #31
  40277c:	4604      	mov	r4, r0
  40277e:	d402      	bmi.n	402786 <_fflush_r+0x32>
  402780:	89ab      	ldrh	r3, [r5, #12]
  402782:	059b      	lsls	r3, r3, #22
  402784:	d507      	bpl.n	402796 <_fflush_r+0x42>
  402786:	4620      	mov	r0, r4
  402788:	bd38      	pop	{r3, r4, r5, pc}
  40278a:	4604      	mov	r4, r0
  40278c:	4620      	mov	r0, r4
  40278e:	bd38      	pop	{r3, r4, r5, pc}
  402790:	f000 f838 	bl	402804 <__sinit>
  402794:	e7e4      	b.n	402760 <_fflush_r+0xc>
  402796:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402798:	f000 fbf6 	bl	402f88 <__retarget_lock_release_recursive>
  40279c:	4620      	mov	r0, r4
  40279e:	bd38      	pop	{r3, r4, r5, pc}
  4027a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4027a2:	f000 fbef 	bl	402f84 <__retarget_lock_acquire_recursive>
  4027a6:	e7e3      	b.n	402770 <_fflush_r+0x1c>

004027a8 <_cleanup_r>:
  4027a8:	4901      	ldr	r1, [pc, #4]	; (4027b0 <_cleanup_r+0x8>)
  4027aa:	f000 bbaf 	b.w	402f0c <_fwalk_reent>
  4027ae:	bf00      	nop
  4027b0:	00403fd1 	.word	0x00403fd1

004027b4 <std.isra.0>:
  4027b4:	b510      	push	{r4, lr}
  4027b6:	2300      	movs	r3, #0
  4027b8:	4604      	mov	r4, r0
  4027ba:	8181      	strh	r1, [r0, #12]
  4027bc:	81c2      	strh	r2, [r0, #14]
  4027be:	6003      	str	r3, [r0, #0]
  4027c0:	6043      	str	r3, [r0, #4]
  4027c2:	6083      	str	r3, [r0, #8]
  4027c4:	6643      	str	r3, [r0, #100]	; 0x64
  4027c6:	6103      	str	r3, [r0, #16]
  4027c8:	6143      	str	r3, [r0, #20]
  4027ca:	6183      	str	r3, [r0, #24]
  4027cc:	4619      	mov	r1, r3
  4027ce:	2208      	movs	r2, #8
  4027d0:	305c      	adds	r0, #92	; 0x5c
  4027d2:	f7fe ff93 	bl	4016fc <memset>
  4027d6:	4807      	ldr	r0, [pc, #28]	; (4027f4 <std.isra.0+0x40>)
  4027d8:	4907      	ldr	r1, [pc, #28]	; (4027f8 <std.isra.0+0x44>)
  4027da:	4a08      	ldr	r2, [pc, #32]	; (4027fc <std.isra.0+0x48>)
  4027dc:	4b08      	ldr	r3, [pc, #32]	; (402800 <std.isra.0+0x4c>)
  4027de:	6220      	str	r0, [r4, #32]
  4027e0:	61e4      	str	r4, [r4, #28]
  4027e2:	6261      	str	r1, [r4, #36]	; 0x24
  4027e4:	62a2      	str	r2, [r4, #40]	; 0x28
  4027e6:	62e3      	str	r3, [r4, #44]	; 0x2c
  4027e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4027ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4027f0:	f000 bbc4 	b.w	402f7c <__retarget_lock_init_recursive>
  4027f4:	00403c35 	.word	0x00403c35
  4027f8:	00403c59 	.word	0x00403c59
  4027fc:	00403c95 	.word	0x00403c95
  402800:	00403cb5 	.word	0x00403cb5

00402804 <__sinit>:
  402804:	b510      	push	{r4, lr}
  402806:	4604      	mov	r4, r0
  402808:	4812      	ldr	r0, [pc, #72]	; (402854 <__sinit+0x50>)
  40280a:	f000 fbbb 	bl	402f84 <__retarget_lock_acquire_recursive>
  40280e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402810:	b9d2      	cbnz	r2, 402848 <__sinit+0x44>
  402812:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  402816:	4810      	ldr	r0, [pc, #64]	; (402858 <__sinit+0x54>)
  402818:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  40281c:	2103      	movs	r1, #3
  40281e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  402822:	63e0      	str	r0, [r4, #60]	; 0x3c
  402824:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  402828:	6860      	ldr	r0, [r4, #4]
  40282a:	2104      	movs	r1, #4
  40282c:	f7ff ffc2 	bl	4027b4 <std.isra.0>
  402830:	2201      	movs	r2, #1
  402832:	2109      	movs	r1, #9
  402834:	68a0      	ldr	r0, [r4, #8]
  402836:	f7ff ffbd 	bl	4027b4 <std.isra.0>
  40283a:	2202      	movs	r2, #2
  40283c:	2112      	movs	r1, #18
  40283e:	68e0      	ldr	r0, [r4, #12]
  402840:	f7ff ffb8 	bl	4027b4 <std.isra.0>
  402844:	2301      	movs	r3, #1
  402846:	63a3      	str	r3, [r4, #56]	; 0x38
  402848:	4802      	ldr	r0, [pc, #8]	; (402854 <__sinit+0x50>)
  40284a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40284e:	f000 bb9b 	b.w	402f88 <__retarget_lock_release_recursive>
  402852:	bf00      	nop
  402854:	20401ef4 	.word	0x20401ef4
  402858:	004027a9 	.word	0x004027a9

0040285c <__sfp_lock_acquire>:
  40285c:	4801      	ldr	r0, [pc, #4]	; (402864 <__sfp_lock_acquire+0x8>)
  40285e:	f000 bb91 	b.w	402f84 <__retarget_lock_acquire_recursive>
  402862:	bf00      	nop
  402864:	20401f08 	.word	0x20401f08

00402868 <__sfp_lock_release>:
  402868:	4801      	ldr	r0, [pc, #4]	; (402870 <__sfp_lock_release+0x8>)
  40286a:	f000 bb8d 	b.w	402f88 <__retarget_lock_release_recursive>
  40286e:	bf00      	nop
  402870:	20401f08 	.word	0x20401f08

00402874 <__libc_fini_array>:
  402874:	b538      	push	{r3, r4, r5, lr}
  402876:	4c0a      	ldr	r4, [pc, #40]	; (4028a0 <__libc_fini_array+0x2c>)
  402878:	4d0a      	ldr	r5, [pc, #40]	; (4028a4 <__libc_fini_array+0x30>)
  40287a:	1b64      	subs	r4, r4, r5
  40287c:	10a4      	asrs	r4, r4, #2
  40287e:	d00a      	beq.n	402896 <__libc_fini_array+0x22>
  402880:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402884:	3b01      	subs	r3, #1
  402886:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40288a:	3c01      	subs	r4, #1
  40288c:	f855 3904 	ldr.w	r3, [r5], #-4
  402890:	4798      	blx	r3
  402892:	2c00      	cmp	r4, #0
  402894:	d1f9      	bne.n	40288a <__libc_fini_array+0x16>
  402896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40289a:	f001 beaf 	b.w	4045fc <_fini>
  40289e:	bf00      	nop
  4028a0:	0040460c 	.word	0x0040460c
  4028a4:	00404608 	.word	0x00404608

004028a8 <__fputwc>:
  4028a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4028ac:	b082      	sub	sp, #8
  4028ae:	4680      	mov	r8, r0
  4028b0:	4689      	mov	r9, r1
  4028b2:	4614      	mov	r4, r2
  4028b4:	f000 fb54 	bl	402f60 <__locale_mb_cur_max>
  4028b8:	2801      	cmp	r0, #1
  4028ba:	d036      	beq.n	40292a <__fputwc+0x82>
  4028bc:	464a      	mov	r2, r9
  4028be:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4028c2:	a901      	add	r1, sp, #4
  4028c4:	4640      	mov	r0, r8
  4028c6:	f001 fac1 	bl	403e4c <_wcrtomb_r>
  4028ca:	1c42      	adds	r2, r0, #1
  4028cc:	4606      	mov	r6, r0
  4028ce:	d025      	beq.n	40291c <__fputwc+0x74>
  4028d0:	b3a8      	cbz	r0, 40293e <__fputwc+0x96>
  4028d2:	f89d e004 	ldrb.w	lr, [sp, #4]
  4028d6:	2500      	movs	r5, #0
  4028d8:	f10d 0a04 	add.w	sl, sp, #4
  4028dc:	e009      	b.n	4028f2 <__fputwc+0x4a>
  4028de:	6823      	ldr	r3, [r4, #0]
  4028e0:	1c5a      	adds	r2, r3, #1
  4028e2:	6022      	str	r2, [r4, #0]
  4028e4:	f883 e000 	strb.w	lr, [r3]
  4028e8:	3501      	adds	r5, #1
  4028ea:	42b5      	cmp	r5, r6
  4028ec:	d227      	bcs.n	40293e <__fputwc+0x96>
  4028ee:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4028f2:	68a3      	ldr	r3, [r4, #8]
  4028f4:	3b01      	subs	r3, #1
  4028f6:	2b00      	cmp	r3, #0
  4028f8:	60a3      	str	r3, [r4, #8]
  4028fa:	daf0      	bge.n	4028de <__fputwc+0x36>
  4028fc:	69a7      	ldr	r7, [r4, #24]
  4028fe:	42bb      	cmp	r3, r7
  402900:	4671      	mov	r1, lr
  402902:	4622      	mov	r2, r4
  402904:	4640      	mov	r0, r8
  402906:	db02      	blt.n	40290e <__fputwc+0x66>
  402908:	f1be 0f0a 	cmp.w	lr, #10
  40290c:	d1e7      	bne.n	4028de <__fputwc+0x36>
  40290e:	f001 fa45 	bl	403d9c <__swbuf_r>
  402912:	1c43      	adds	r3, r0, #1
  402914:	d1e8      	bne.n	4028e8 <__fputwc+0x40>
  402916:	b002      	add	sp, #8
  402918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40291c:	89a3      	ldrh	r3, [r4, #12]
  40291e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402922:	81a3      	strh	r3, [r4, #12]
  402924:	b002      	add	sp, #8
  402926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40292a:	f109 33ff 	add.w	r3, r9, #4294967295
  40292e:	2bfe      	cmp	r3, #254	; 0xfe
  402930:	d8c4      	bhi.n	4028bc <__fputwc+0x14>
  402932:	fa5f fe89 	uxtb.w	lr, r9
  402936:	4606      	mov	r6, r0
  402938:	f88d e004 	strb.w	lr, [sp, #4]
  40293c:	e7cb      	b.n	4028d6 <__fputwc+0x2e>
  40293e:	4648      	mov	r0, r9
  402940:	b002      	add	sp, #8
  402942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402946:	bf00      	nop

00402948 <_fputwc_r>:
  402948:	b530      	push	{r4, r5, lr}
  40294a:	6e53      	ldr	r3, [r2, #100]	; 0x64
  40294c:	f013 0f01 	tst.w	r3, #1
  402950:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  402954:	4614      	mov	r4, r2
  402956:	b083      	sub	sp, #12
  402958:	4605      	mov	r5, r0
  40295a:	b29a      	uxth	r2, r3
  40295c:	d101      	bne.n	402962 <_fputwc_r+0x1a>
  40295e:	0590      	lsls	r0, r2, #22
  402960:	d51c      	bpl.n	40299c <_fputwc_r+0x54>
  402962:	0490      	lsls	r0, r2, #18
  402964:	d406      	bmi.n	402974 <_fputwc_r+0x2c>
  402966:	6e62      	ldr	r2, [r4, #100]	; 0x64
  402968:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40296c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  402970:	81a3      	strh	r3, [r4, #12]
  402972:	6662      	str	r2, [r4, #100]	; 0x64
  402974:	4628      	mov	r0, r5
  402976:	4622      	mov	r2, r4
  402978:	f7ff ff96 	bl	4028a8 <__fputwc>
  40297c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40297e:	07da      	lsls	r2, r3, #31
  402980:	4605      	mov	r5, r0
  402982:	d402      	bmi.n	40298a <_fputwc_r+0x42>
  402984:	89a3      	ldrh	r3, [r4, #12]
  402986:	059b      	lsls	r3, r3, #22
  402988:	d502      	bpl.n	402990 <_fputwc_r+0x48>
  40298a:	4628      	mov	r0, r5
  40298c:	b003      	add	sp, #12
  40298e:	bd30      	pop	{r4, r5, pc}
  402990:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402992:	f000 faf9 	bl	402f88 <__retarget_lock_release_recursive>
  402996:	4628      	mov	r0, r5
  402998:	b003      	add	sp, #12
  40299a:	bd30      	pop	{r4, r5, pc}
  40299c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40299e:	9101      	str	r1, [sp, #4]
  4029a0:	f000 faf0 	bl	402f84 <__retarget_lock_acquire_recursive>
  4029a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4029a8:	9901      	ldr	r1, [sp, #4]
  4029aa:	b29a      	uxth	r2, r3
  4029ac:	e7d9      	b.n	402962 <_fputwc_r+0x1a>
  4029ae:	bf00      	nop

004029b0 <_malloc_trim_r>:
  4029b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4029b2:	4f24      	ldr	r7, [pc, #144]	; (402a44 <_malloc_trim_r+0x94>)
  4029b4:	460c      	mov	r4, r1
  4029b6:	4606      	mov	r6, r0
  4029b8:	f000 ff78 	bl	4038ac <__malloc_lock>
  4029bc:	68bb      	ldr	r3, [r7, #8]
  4029be:	685d      	ldr	r5, [r3, #4]
  4029c0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4029c4:	310f      	adds	r1, #15
  4029c6:	f025 0503 	bic.w	r5, r5, #3
  4029ca:	4429      	add	r1, r5
  4029cc:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4029d0:	f021 010f 	bic.w	r1, r1, #15
  4029d4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4029d8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4029dc:	db07      	blt.n	4029ee <_malloc_trim_r+0x3e>
  4029de:	2100      	movs	r1, #0
  4029e0:	4630      	mov	r0, r6
  4029e2:	f001 f915 	bl	403c10 <_sbrk_r>
  4029e6:	68bb      	ldr	r3, [r7, #8]
  4029e8:	442b      	add	r3, r5
  4029ea:	4298      	cmp	r0, r3
  4029ec:	d004      	beq.n	4029f8 <_malloc_trim_r+0x48>
  4029ee:	4630      	mov	r0, r6
  4029f0:	f000 ff62 	bl	4038b8 <__malloc_unlock>
  4029f4:	2000      	movs	r0, #0
  4029f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4029f8:	4261      	negs	r1, r4
  4029fa:	4630      	mov	r0, r6
  4029fc:	f001 f908 	bl	403c10 <_sbrk_r>
  402a00:	3001      	adds	r0, #1
  402a02:	d00d      	beq.n	402a20 <_malloc_trim_r+0x70>
  402a04:	4b10      	ldr	r3, [pc, #64]	; (402a48 <_malloc_trim_r+0x98>)
  402a06:	68ba      	ldr	r2, [r7, #8]
  402a08:	6819      	ldr	r1, [r3, #0]
  402a0a:	1b2d      	subs	r5, r5, r4
  402a0c:	f045 0501 	orr.w	r5, r5, #1
  402a10:	4630      	mov	r0, r6
  402a12:	1b09      	subs	r1, r1, r4
  402a14:	6055      	str	r5, [r2, #4]
  402a16:	6019      	str	r1, [r3, #0]
  402a18:	f000 ff4e 	bl	4038b8 <__malloc_unlock>
  402a1c:	2001      	movs	r0, #1
  402a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402a20:	2100      	movs	r1, #0
  402a22:	4630      	mov	r0, r6
  402a24:	f001 f8f4 	bl	403c10 <_sbrk_r>
  402a28:	68ba      	ldr	r2, [r7, #8]
  402a2a:	1a83      	subs	r3, r0, r2
  402a2c:	2b0f      	cmp	r3, #15
  402a2e:	ddde      	ble.n	4029ee <_malloc_trim_r+0x3e>
  402a30:	4c06      	ldr	r4, [pc, #24]	; (402a4c <_malloc_trim_r+0x9c>)
  402a32:	4905      	ldr	r1, [pc, #20]	; (402a48 <_malloc_trim_r+0x98>)
  402a34:	6824      	ldr	r4, [r4, #0]
  402a36:	f043 0301 	orr.w	r3, r3, #1
  402a3a:	1b00      	subs	r0, r0, r4
  402a3c:	6053      	str	r3, [r2, #4]
  402a3e:	6008      	str	r0, [r1, #0]
  402a40:	e7d5      	b.n	4029ee <_malloc_trim_r+0x3e>
  402a42:	bf00      	nop
  402a44:	204005b0 	.word	0x204005b0
  402a48:	20400a9c 	.word	0x20400a9c
  402a4c:	204009b8 	.word	0x204009b8

00402a50 <_free_r>:
  402a50:	2900      	cmp	r1, #0
  402a52:	d044      	beq.n	402ade <_free_r+0x8e>
  402a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402a58:	460d      	mov	r5, r1
  402a5a:	4680      	mov	r8, r0
  402a5c:	f000 ff26 	bl	4038ac <__malloc_lock>
  402a60:	f855 7c04 	ldr.w	r7, [r5, #-4]
  402a64:	4969      	ldr	r1, [pc, #420]	; (402c0c <_free_r+0x1bc>)
  402a66:	f027 0301 	bic.w	r3, r7, #1
  402a6a:	f1a5 0408 	sub.w	r4, r5, #8
  402a6e:	18e2      	adds	r2, r4, r3
  402a70:	688e      	ldr	r6, [r1, #8]
  402a72:	6850      	ldr	r0, [r2, #4]
  402a74:	42b2      	cmp	r2, r6
  402a76:	f020 0003 	bic.w	r0, r0, #3
  402a7a:	d05e      	beq.n	402b3a <_free_r+0xea>
  402a7c:	07fe      	lsls	r6, r7, #31
  402a7e:	6050      	str	r0, [r2, #4]
  402a80:	d40b      	bmi.n	402a9a <_free_r+0x4a>
  402a82:	f855 7c08 	ldr.w	r7, [r5, #-8]
  402a86:	1be4      	subs	r4, r4, r7
  402a88:	f101 0e08 	add.w	lr, r1, #8
  402a8c:	68a5      	ldr	r5, [r4, #8]
  402a8e:	4575      	cmp	r5, lr
  402a90:	443b      	add	r3, r7
  402a92:	d06d      	beq.n	402b70 <_free_r+0x120>
  402a94:	68e7      	ldr	r7, [r4, #12]
  402a96:	60ef      	str	r7, [r5, #12]
  402a98:	60bd      	str	r5, [r7, #8]
  402a9a:	1815      	adds	r5, r2, r0
  402a9c:	686d      	ldr	r5, [r5, #4]
  402a9e:	07ed      	lsls	r5, r5, #31
  402aa0:	d53e      	bpl.n	402b20 <_free_r+0xd0>
  402aa2:	f043 0201 	orr.w	r2, r3, #1
  402aa6:	6062      	str	r2, [r4, #4]
  402aa8:	50e3      	str	r3, [r4, r3]
  402aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402aae:	d217      	bcs.n	402ae0 <_free_r+0x90>
  402ab0:	08db      	lsrs	r3, r3, #3
  402ab2:	1c58      	adds	r0, r3, #1
  402ab4:	109a      	asrs	r2, r3, #2
  402ab6:	684d      	ldr	r5, [r1, #4]
  402ab8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  402abc:	60a7      	str	r7, [r4, #8]
  402abe:	2301      	movs	r3, #1
  402ac0:	4093      	lsls	r3, r2
  402ac2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  402ac6:	432b      	orrs	r3, r5
  402ac8:	3a08      	subs	r2, #8
  402aca:	60e2      	str	r2, [r4, #12]
  402acc:	604b      	str	r3, [r1, #4]
  402ace:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  402ad2:	60fc      	str	r4, [r7, #12]
  402ad4:	4640      	mov	r0, r8
  402ad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402ada:	f000 beed 	b.w	4038b8 <__malloc_unlock>
  402ade:	4770      	bx	lr
  402ae0:	0a5a      	lsrs	r2, r3, #9
  402ae2:	2a04      	cmp	r2, #4
  402ae4:	d852      	bhi.n	402b8c <_free_r+0x13c>
  402ae6:	099a      	lsrs	r2, r3, #6
  402ae8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  402aec:	00ff      	lsls	r7, r7, #3
  402aee:	f102 0538 	add.w	r5, r2, #56	; 0x38
  402af2:	19c8      	adds	r0, r1, r7
  402af4:	59ca      	ldr	r2, [r1, r7]
  402af6:	3808      	subs	r0, #8
  402af8:	4290      	cmp	r0, r2
  402afa:	d04f      	beq.n	402b9c <_free_r+0x14c>
  402afc:	6851      	ldr	r1, [r2, #4]
  402afe:	f021 0103 	bic.w	r1, r1, #3
  402b02:	428b      	cmp	r3, r1
  402b04:	d232      	bcs.n	402b6c <_free_r+0x11c>
  402b06:	6892      	ldr	r2, [r2, #8]
  402b08:	4290      	cmp	r0, r2
  402b0a:	d1f7      	bne.n	402afc <_free_r+0xac>
  402b0c:	68c3      	ldr	r3, [r0, #12]
  402b0e:	60a0      	str	r0, [r4, #8]
  402b10:	60e3      	str	r3, [r4, #12]
  402b12:	609c      	str	r4, [r3, #8]
  402b14:	60c4      	str	r4, [r0, #12]
  402b16:	4640      	mov	r0, r8
  402b18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402b1c:	f000 becc 	b.w	4038b8 <__malloc_unlock>
  402b20:	6895      	ldr	r5, [r2, #8]
  402b22:	4f3b      	ldr	r7, [pc, #236]	; (402c10 <_free_r+0x1c0>)
  402b24:	42bd      	cmp	r5, r7
  402b26:	4403      	add	r3, r0
  402b28:	d040      	beq.n	402bac <_free_r+0x15c>
  402b2a:	68d0      	ldr	r0, [r2, #12]
  402b2c:	60e8      	str	r0, [r5, #12]
  402b2e:	f043 0201 	orr.w	r2, r3, #1
  402b32:	6085      	str	r5, [r0, #8]
  402b34:	6062      	str	r2, [r4, #4]
  402b36:	50e3      	str	r3, [r4, r3]
  402b38:	e7b7      	b.n	402aaa <_free_r+0x5a>
  402b3a:	07ff      	lsls	r7, r7, #31
  402b3c:	4403      	add	r3, r0
  402b3e:	d407      	bmi.n	402b50 <_free_r+0x100>
  402b40:	f855 2c08 	ldr.w	r2, [r5, #-8]
  402b44:	1aa4      	subs	r4, r4, r2
  402b46:	4413      	add	r3, r2
  402b48:	68a0      	ldr	r0, [r4, #8]
  402b4a:	68e2      	ldr	r2, [r4, #12]
  402b4c:	60c2      	str	r2, [r0, #12]
  402b4e:	6090      	str	r0, [r2, #8]
  402b50:	4a30      	ldr	r2, [pc, #192]	; (402c14 <_free_r+0x1c4>)
  402b52:	6812      	ldr	r2, [r2, #0]
  402b54:	f043 0001 	orr.w	r0, r3, #1
  402b58:	4293      	cmp	r3, r2
  402b5a:	6060      	str	r0, [r4, #4]
  402b5c:	608c      	str	r4, [r1, #8]
  402b5e:	d3b9      	bcc.n	402ad4 <_free_r+0x84>
  402b60:	4b2d      	ldr	r3, [pc, #180]	; (402c18 <_free_r+0x1c8>)
  402b62:	4640      	mov	r0, r8
  402b64:	6819      	ldr	r1, [r3, #0]
  402b66:	f7ff ff23 	bl	4029b0 <_malloc_trim_r>
  402b6a:	e7b3      	b.n	402ad4 <_free_r+0x84>
  402b6c:	4610      	mov	r0, r2
  402b6e:	e7cd      	b.n	402b0c <_free_r+0xbc>
  402b70:	1811      	adds	r1, r2, r0
  402b72:	6849      	ldr	r1, [r1, #4]
  402b74:	07c9      	lsls	r1, r1, #31
  402b76:	d444      	bmi.n	402c02 <_free_r+0x1b2>
  402b78:	6891      	ldr	r1, [r2, #8]
  402b7a:	68d2      	ldr	r2, [r2, #12]
  402b7c:	60ca      	str	r2, [r1, #12]
  402b7e:	4403      	add	r3, r0
  402b80:	f043 0001 	orr.w	r0, r3, #1
  402b84:	6091      	str	r1, [r2, #8]
  402b86:	6060      	str	r0, [r4, #4]
  402b88:	50e3      	str	r3, [r4, r3]
  402b8a:	e7a3      	b.n	402ad4 <_free_r+0x84>
  402b8c:	2a14      	cmp	r2, #20
  402b8e:	d816      	bhi.n	402bbe <_free_r+0x16e>
  402b90:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  402b94:	00ff      	lsls	r7, r7, #3
  402b96:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  402b9a:	e7aa      	b.n	402af2 <_free_r+0xa2>
  402b9c:	10aa      	asrs	r2, r5, #2
  402b9e:	2301      	movs	r3, #1
  402ba0:	684d      	ldr	r5, [r1, #4]
  402ba2:	4093      	lsls	r3, r2
  402ba4:	432b      	orrs	r3, r5
  402ba6:	604b      	str	r3, [r1, #4]
  402ba8:	4603      	mov	r3, r0
  402baa:	e7b0      	b.n	402b0e <_free_r+0xbe>
  402bac:	f043 0201 	orr.w	r2, r3, #1
  402bb0:	614c      	str	r4, [r1, #20]
  402bb2:	610c      	str	r4, [r1, #16]
  402bb4:	60e5      	str	r5, [r4, #12]
  402bb6:	60a5      	str	r5, [r4, #8]
  402bb8:	6062      	str	r2, [r4, #4]
  402bba:	50e3      	str	r3, [r4, r3]
  402bbc:	e78a      	b.n	402ad4 <_free_r+0x84>
  402bbe:	2a54      	cmp	r2, #84	; 0x54
  402bc0:	d806      	bhi.n	402bd0 <_free_r+0x180>
  402bc2:	0b1a      	lsrs	r2, r3, #12
  402bc4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  402bc8:	00ff      	lsls	r7, r7, #3
  402bca:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  402bce:	e790      	b.n	402af2 <_free_r+0xa2>
  402bd0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402bd4:	d806      	bhi.n	402be4 <_free_r+0x194>
  402bd6:	0bda      	lsrs	r2, r3, #15
  402bd8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  402bdc:	00ff      	lsls	r7, r7, #3
  402bde:	f102 0577 	add.w	r5, r2, #119	; 0x77
  402be2:	e786      	b.n	402af2 <_free_r+0xa2>
  402be4:	f240 5054 	movw	r0, #1364	; 0x554
  402be8:	4282      	cmp	r2, r0
  402bea:	d806      	bhi.n	402bfa <_free_r+0x1aa>
  402bec:	0c9a      	lsrs	r2, r3, #18
  402bee:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  402bf2:	00ff      	lsls	r7, r7, #3
  402bf4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  402bf8:	e77b      	b.n	402af2 <_free_r+0xa2>
  402bfa:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  402bfe:	257e      	movs	r5, #126	; 0x7e
  402c00:	e777      	b.n	402af2 <_free_r+0xa2>
  402c02:	f043 0101 	orr.w	r1, r3, #1
  402c06:	6061      	str	r1, [r4, #4]
  402c08:	6013      	str	r3, [r2, #0]
  402c0a:	e763      	b.n	402ad4 <_free_r+0x84>
  402c0c:	204005b0 	.word	0x204005b0
  402c10:	204005b8 	.word	0x204005b8
  402c14:	204009bc 	.word	0x204009bc
  402c18:	20400acc 	.word	0x20400acc

00402c1c <__sfvwrite_r>:
  402c1c:	6893      	ldr	r3, [r2, #8]
  402c1e:	2b00      	cmp	r3, #0
  402c20:	d073      	beq.n	402d0a <__sfvwrite_r+0xee>
  402c22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402c26:	898b      	ldrh	r3, [r1, #12]
  402c28:	b083      	sub	sp, #12
  402c2a:	460c      	mov	r4, r1
  402c2c:	0719      	lsls	r1, r3, #28
  402c2e:	9000      	str	r0, [sp, #0]
  402c30:	4616      	mov	r6, r2
  402c32:	d526      	bpl.n	402c82 <__sfvwrite_r+0x66>
  402c34:	6922      	ldr	r2, [r4, #16]
  402c36:	b322      	cbz	r2, 402c82 <__sfvwrite_r+0x66>
  402c38:	f013 0002 	ands.w	r0, r3, #2
  402c3c:	6835      	ldr	r5, [r6, #0]
  402c3e:	d02c      	beq.n	402c9a <__sfvwrite_r+0x7e>
  402c40:	f04f 0900 	mov.w	r9, #0
  402c44:	4fb0      	ldr	r7, [pc, #704]	; (402f08 <__sfvwrite_r+0x2ec>)
  402c46:	46c8      	mov	r8, r9
  402c48:	46b2      	mov	sl, r6
  402c4a:	45b8      	cmp	r8, r7
  402c4c:	4643      	mov	r3, r8
  402c4e:	464a      	mov	r2, r9
  402c50:	bf28      	it	cs
  402c52:	463b      	movcs	r3, r7
  402c54:	9800      	ldr	r0, [sp, #0]
  402c56:	f1b8 0f00 	cmp.w	r8, #0
  402c5a:	d050      	beq.n	402cfe <__sfvwrite_r+0xe2>
  402c5c:	69e1      	ldr	r1, [r4, #28]
  402c5e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402c60:	47b0      	blx	r6
  402c62:	2800      	cmp	r0, #0
  402c64:	dd58      	ble.n	402d18 <__sfvwrite_r+0xfc>
  402c66:	f8da 3008 	ldr.w	r3, [sl, #8]
  402c6a:	1a1b      	subs	r3, r3, r0
  402c6c:	4481      	add	r9, r0
  402c6e:	eba8 0800 	sub.w	r8, r8, r0
  402c72:	f8ca 3008 	str.w	r3, [sl, #8]
  402c76:	2b00      	cmp	r3, #0
  402c78:	d1e7      	bne.n	402c4a <__sfvwrite_r+0x2e>
  402c7a:	2000      	movs	r0, #0
  402c7c:	b003      	add	sp, #12
  402c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402c82:	4621      	mov	r1, r4
  402c84:	9800      	ldr	r0, [sp, #0]
  402c86:	f7ff fc51 	bl	40252c <__swsetup_r>
  402c8a:	2800      	cmp	r0, #0
  402c8c:	f040 8133 	bne.w	402ef6 <__sfvwrite_r+0x2da>
  402c90:	89a3      	ldrh	r3, [r4, #12]
  402c92:	6835      	ldr	r5, [r6, #0]
  402c94:	f013 0002 	ands.w	r0, r3, #2
  402c98:	d1d2      	bne.n	402c40 <__sfvwrite_r+0x24>
  402c9a:	f013 0901 	ands.w	r9, r3, #1
  402c9e:	d145      	bne.n	402d2c <__sfvwrite_r+0x110>
  402ca0:	464f      	mov	r7, r9
  402ca2:	9601      	str	r6, [sp, #4]
  402ca4:	b337      	cbz	r7, 402cf4 <__sfvwrite_r+0xd8>
  402ca6:	059a      	lsls	r2, r3, #22
  402ca8:	f8d4 8008 	ldr.w	r8, [r4, #8]
  402cac:	f140 8083 	bpl.w	402db6 <__sfvwrite_r+0x19a>
  402cb0:	4547      	cmp	r7, r8
  402cb2:	46c3      	mov	fp, r8
  402cb4:	f0c0 80ab 	bcc.w	402e0e <__sfvwrite_r+0x1f2>
  402cb8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  402cbc:	f040 80ac 	bne.w	402e18 <__sfvwrite_r+0x1fc>
  402cc0:	6820      	ldr	r0, [r4, #0]
  402cc2:	46ba      	mov	sl, r7
  402cc4:	465a      	mov	r2, fp
  402cc6:	4649      	mov	r1, r9
  402cc8:	f000 fd8c 	bl	4037e4 <memmove>
  402ccc:	68a2      	ldr	r2, [r4, #8]
  402cce:	6823      	ldr	r3, [r4, #0]
  402cd0:	eba2 0208 	sub.w	r2, r2, r8
  402cd4:	445b      	add	r3, fp
  402cd6:	60a2      	str	r2, [r4, #8]
  402cd8:	6023      	str	r3, [r4, #0]
  402cda:	9a01      	ldr	r2, [sp, #4]
  402cdc:	6893      	ldr	r3, [r2, #8]
  402cde:	eba3 030a 	sub.w	r3, r3, sl
  402ce2:	44d1      	add	r9, sl
  402ce4:	eba7 070a 	sub.w	r7, r7, sl
  402ce8:	6093      	str	r3, [r2, #8]
  402cea:	2b00      	cmp	r3, #0
  402cec:	d0c5      	beq.n	402c7a <__sfvwrite_r+0x5e>
  402cee:	89a3      	ldrh	r3, [r4, #12]
  402cf0:	2f00      	cmp	r7, #0
  402cf2:	d1d8      	bne.n	402ca6 <__sfvwrite_r+0x8a>
  402cf4:	f8d5 9000 	ldr.w	r9, [r5]
  402cf8:	686f      	ldr	r7, [r5, #4]
  402cfa:	3508      	adds	r5, #8
  402cfc:	e7d2      	b.n	402ca4 <__sfvwrite_r+0x88>
  402cfe:	f8d5 9000 	ldr.w	r9, [r5]
  402d02:	f8d5 8004 	ldr.w	r8, [r5, #4]
  402d06:	3508      	adds	r5, #8
  402d08:	e79f      	b.n	402c4a <__sfvwrite_r+0x2e>
  402d0a:	2000      	movs	r0, #0
  402d0c:	4770      	bx	lr
  402d0e:	4621      	mov	r1, r4
  402d10:	9800      	ldr	r0, [sp, #0]
  402d12:	f7ff fd1f 	bl	402754 <_fflush_r>
  402d16:	b370      	cbz	r0, 402d76 <__sfvwrite_r+0x15a>
  402d18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402d20:	f04f 30ff 	mov.w	r0, #4294967295
  402d24:	81a3      	strh	r3, [r4, #12]
  402d26:	b003      	add	sp, #12
  402d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d2c:	4681      	mov	r9, r0
  402d2e:	4633      	mov	r3, r6
  402d30:	464e      	mov	r6, r9
  402d32:	46a8      	mov	r8, r5
  402d34:	469a      	mov	sl, r3
  402d36:	464d      	mov	r5, r9
  402d38:	b34e      	cbz	r6, 402d8e <__sfvwrite_r+0x172>
  402d3a:	b380      	cbz	r0, 402d9e <__sfvwrite_r+0x182>
  402d3c:	6820      	ldr	r0, [r4, #0]
  402d3e:	6923      	ldr	r3, [r4, #16]
  402d40:	6962      	ldr	r2, [r4, #20]
  402d42:	45b1      	cmp	r9, r6
  402d44:	46cb      	mov	fp, r9
  402d46:	bf28      	it	cs
  402d48:	46b3      	movcs	fp, r6
  402d4a:	4298      	cmp	r0, r3
  402d4c:	465f      	mov	r7, fp
  402d4e:	d904      	bls.n	402d5a <__sfvwrite_r+0x13e>
  402d50:	68a3      	ldr	r3, [r4, #8]
  402d52:	4413      	add	r3, r2
  402d54:	459b      	cmp	fp, r3
  402d56:	f300 80a6 	bgt.w	402ea6 <__sfvwrite_r+0x28a>
  402d5a:	4593      	cmp	fp, r2
  402d5c:	db4b      	blt.n	402df6 <__sfvwrite_r+0x1da>
  402d5e:	4613      	mov	r3, r2
  402d60:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402d62:	69e1      	ldr	r1, [r4, #28]
  402d64:	9800      	ldr	r0, [sp, #0]
  402d66:	462a      	mov	r2, r5
  402d68:	47b8      	blx	r7
  402d6a:	1e07      	subs	r7, r0, #0
  402d6c:	ddd4      	ble.n	402d18 <__sfvwrite_r+0xfc>
  402d6e:	ebb9 0907 	subs.w	r9, r9, r7
  402d72:	d0cc      	beq.n	402d0e <__sfvwrite_r+0xf2>
  402d74:	2001      	movs	r0, #1
  402d76:	f8da 3008 	ldr.w	r3, [sl, #8]
  402d7a:	1bdb      	subs	r3, r3, r7
  402d7c:	443d      	add	r5, r7
  402d7e:	1bf6      	subs	r6, r6, r7
  402d80:	f8ca 3008 	str.w	r3, [sl, #8]
  402d84:	2b00      	cmp	r3, #0
  402d86:	f43f af78 	beq.w	402c7a <__sfvwrite_r+0x5e>
  402d8a:	2e00      	cmp	r6, #0
  402d8c:	d1d5      	bne.n	402d3a <__sfvwrite_r+0x11e>
  402d8e:	f108 0308 	add.w	r3, r8, #8
  402d92:	e913 0060 	ldmdb	r3, {r5, r6}
  402d96:	4698      	mov	r8, r3
  402d98:	3308      	adds	r3, #8
  402d9a:	2e00      	cmp	r6, #0
  402d9c:	d0f9      	beq.n	402d92 <__sfvwrite_r+0x176>
  402d9e:	4632      	mov	r2, r6
  402da0:	210a      	movs	r1, #10
  402da2:	4628      	mov	r0, r5
  402da4:	f000 fc34 	bl	403610 <memchr>
  402da8:	2800      	cmp	r0, #0
  402daa:	f000 80a1 	beq.w	402ef0 <__sfvwrite_r+0x2d4>
  402dae:	3001      	adds	r0, #1
  402db0:	eba0 0905 	sub.w	r9, r0, r5
  402db4:	e7c2      	b.n	402d3c <__sfvwrite_r+0x120>
  402db6:	6820      	ldr	r0, [r4, #0]
  402db8:	6923      	ldr	r3, [r4, #16]
  402dba:	4298      	cmp	r0, r3
  402dbc:	d802      	bhi.n	402dc4 <__sfvwrite_r+0x1a8>
  402dbe:	6963      	ldr	r3, [r4, #20]
  402dc0:	429f      	cmp	r7, r3
  402dc2:	d25d      	bcs.n	402e80 <__sfvwrite_r+0x264>
  402dc4:	45b8      	cmp	r8, r7
  402dc6:	bf28      	it	cs
  402dc8:	46b8      	movcs	r8, r7
  402dca:	4642      	mov	r2, r8
  402dcc:	4649      	mov	r1, r9
  402dce:	f000 fd09 	bl	4037e4 <memmove>
  402dd2:	68a3      	ldr	r3, [r4, #8]
  402dd4:	6822      	ldr	r2, [r4, #0]
  402dd6:	eba3 0308 	sub.w	r3, r3, r8
  402dda:	4442      	add	r2, r8
  402ddc:	60a3      	str	r3, [r4, #8]
  402dde:	6022      	str	r2, [r4, #0]
  402de0:	b10b      	cbz	r3, 402de6 <__sfvwrite_r+0x1ca>
  402de2:	46c2      	mov	sl, r8
  402de4:	e779      	b.n	402cda <__sfvwrite_r+0xbe>
  402de6:	4621      	mov	r1, r4
  402de8:	9800      	ldr	r0, [sp, #0]
  402dea:	f7ff fcb3 	bl	402754 <_fflush_r>
  402dee:	2800      	cmp	r0, #0
  402df0:	d192      	bne.n	402d18 <__sfvwrite_r+0xfc>
  402df2:	46c2      	mov	sl, r8
  402df4:	e771      	b.n	402cda <__sfvwrite_r+0xbe>
  402df6:	465a      	mov	r2, fp
  402df8:	4629      	mov	r1, r5
  402dfa:	f000 fcf3 	bl	4037e4 <memmove>
  402dfe:	68a2      	ldr	r2, [r4, #8]
  402e00:	6823      	ldr	r3, [r4, #0]
  402e02:	eba2 020b 	sub.w	r2, r2, fp
  402e06:	445b      	add	r3, fp
  402e08:	60a2      	str	r2, [r4, #8]
  402e0a:	6023      	str	r3, [r4, #0]
  402e0c:	e7af      	b.n	402d6e <__sfvwrite_r+0x152>
  402e0e:	6820      	ldr	r0, [r4, #0]
  402e10:	46b8      	mov	r8, r7
  402e12:	46ba      	mov	sl, r7
  402e14:	46bb      	mov	fp, r7
  402e16:	e755      	b.n	402cc4 <__sfvwrite_r+0xa8>
  402e18:	6962      	ldr	r2, [r4, #20]
  402e1a:	6820      	ldr	r0, [r4, #0]
  402e1c:	6921      	ldr	r1, [r4, #16]
  402e1e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  402e22:	eba0 0a01 	sub.w	sl, r0, r1
  402e26:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  402e2a:	f10a 0001 	add.w	r0, sl, #1
  402e2e:	ea4f 0868 	mov.w	r8, r8, asr #1
  402e32:	4438      	add	r0, r7
  402e34:	4540      	cmp	r0, r8
  402e36:	4642      	mov	r2, r8
  402e38:	bf84      	itt	hi
  402e3a:	4680      	movhi	r8, r0
  402e3c:	4642      	movhi	r2, r8
  402e3e:	055b      	lsls	r3, r3, #21
  402e40:	d544      	bpl.n	402ecc <__sfvwrite_r+0x2b0>
  402e42:	4611      	mov	r1, r2
  402e44:	9800      	ldr	r0, [sp, #0]
  402e46:	f000 f919 	bl	40307c <_malloc_r>
  402e4a:	4683      	mov	fp, r0
  402e4c:	2800      	cmp	r0, #0
  402e4e:	d055      	beq.n	402efc <__sfvwrite_r+0x2e0>
  402e50:	4652      	mov	r2, sl
  402e52:	6921      	ldr	r1, [r4, #16]
  402e54:	f000 fc2c 	bl	4036b0 <memcpy>
  402e58:	89a3      	ldrh	r3, [r4, #12]
  402e5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  402e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402e62:	81a3      	strh	r3, [r4, #12]
  402e64:	eb0b 000a 	add.w	r0, fp, sl
  402e68:	eba8 030a 	sub.w	r3, r8, sl
  402e6c:	f8c4 b010 	str.w	fp, [r4, #16]
  402e70:	f8c4 8014 	str.w	r8, [r4, #20]
  402e74:	6020      	str	r0, [r4, #0]
  402e76:	60a3      	str	r3, [r4, #8]
  402e78:	46b8      	mov	r8, r7
  402e7a:	46ba      	mov	sl, r7
  402e7c:	46bb      	mov	fp, r7
  402e7e:	e721      	b.n	402cc4 <__sfvwrite_r+0xa8>
  402e80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  402e84:	42b9      	cmp	r1, r7
  402e86:	bf28      	it	cs
  402e88:	4639      	movcs	r1, r7
  402e8a:	464a      	mov	r2, r9
  402e8c:	fb91 f1f3 	sdiv	r1, r1, r3
  402e90:	9800      	ldr	r0, [sp, #0]
  402e92:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402e94:	fb03 f301 	mul.w	r3, r3, r1
  402e98:	69e1      	ldr	r1, [r4, #28]
  402e9a:	47b0      	blx	r6
  402e9c:	f1b0 0a00 	subs.w	sl, r0, #0
  402ea0:	f73f af1b 	bgt.w	402cda <__sfvwrite_r+0xbe>
  402ea4:	e738      	b.n	402d18 <__sfvwrite_r+0xfc>
  402ea6:	461a      	mov	r2, r3
  402ea8:	4629      	mov	r1, r5
  402eaa:	9301      	str	r3, [sp, #4]
  402eac:	f000 fc9a 	bl	4037e4 <memmove>
  402eb0:	6822      	ldr	r2, [r4, #0]
  402eb2:	9b01      	ldr	r3, [sp, #4]
  402eb4:	9800      	ldr	r0, [sp, #0]
  402eb6:	441a      	add	r2, r3
  402eb8:	6022      	str	r2, [r4, #0]
  402eba:	4621      	mov	r1, r4
  402ebc:	f7ff fc4a 	bl	402754 <_fflush_r>
  402ec0:	9b01      	ldr	r3, [sp, #4]
  402ec2:	2800      	cmp	r0, #0
  402ec4:	f47f af28 	bne.w	402d18 <__sfvwrite_r+0xfc>
  402ec8:	461f      	mov	r7, r3
  402eca:	e750      	b.n	402d6e <__sfvwrite_r+0x152>
  402ecc:	9800      	ldr	r0, [sp, #0]
  402ece:	f000 fcf9 	bl	4038c4 <_realloc_r>
  402ed2:	4683      	mov	fp, r0
  402ed4:	2800      	cmp	r0, #0
  402ed6:	d1c5      	bne.n	402e64 <__sfvwrite_r+0x248>
  402ed8:	9d00      	ldr	r5, [sp, #0]
  402eda:	6921      	ldr	r1, [r4, #16]
  402edc:	4628      	mov	r0, r5
  402ede:	f7ff fdb7 	bl	402a50 <_free_r>
  402ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402ee6:	220c      	movs	r2, #12
  402ee8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402eec:	602a      	str	r2, [r5, #0]
  402eee:	e715      	b.n	402d1c <__sfvwrite_r+0x100>
  402ef0:	f106 0901 	add.w	r9, r6, #1
  402ef4:	e722      	b.n	402d3c <__sfvwrite_r+0x120>
  402ef6:	f04f 30ff 	mov.w	r0, #4294967295
  402efa:	e6bf      	b.n	402c7c <__sfvwrite_r+0x60>
  402efc:	9a00      	ldr	r2, [sp, #0]
  402efe:	230c      	movs	r3, #12
  402f00:	6013      	str	r3, [r2, #0]
  402f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402f06:	e709      	b.n	402d1c <__sfvwrite_r+0x100>
  402f08:	7ffffc00 	.word	0x7ffffc00

00402f0c <_fwalk_reent>:
  402f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402f10:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  402f14:	d01f      	beq.n	402f56 <_fwalk_reent+0x4a>
  402f16:	4688      	mov	r8, r1
  402f18:	4606      	mov	r6, r0
  402f1a:	f04f 0900 	mov.w	r9, #0
  402f1e:	687d      	ldr	r5, [r7, #4]
  402f20:	68bc      	ldr	r4, [r7, #8]
  402f22:	3d01      	subs	r5, #1
  402f24:	d411      	bmi.n	402f4a <_fwalk_reent+0x3e>
  402f26:	89a3      	ldrh	r3, [r4, #12]
  402f28:	2b01      	cmp	r3, #1
  402f2a:	f105 35ff 	add.w	r5, r5, #4294967295
  402f2e:	d908      	bls.n	402f42 <_fwalk_reent+0x36>
  402f30:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  402f34:	3301      	adds	r3, #1
  402f36:	4621      	mov	r1, r4
  402f38:	4630      	mov	r0, r6
  402f3a:	d002      	beq.n	402f42 <_fwalk_reent+0x36>
  402f3c:	47c0      	blx	r8
  402f3e:	ea49 0900 	orr.w	r9, r9, r0
  402f42:	1c6b      	adds	r3, r5, #1
  402f44:	f104 0468 	add.w	r4, r4, #104	; 0x68
  402f48:	d1ed      	bne.n	402f26 <_fwalk_reent+0x1a>
  402f4a:	683f      	ldr	r7, [r7, #0]
  402f4c:	2f00      	cmp	r7, #0
  402f4e:	d1e6      	bne.n	402f1e <_fwalk_reent+0x12>
  402f50:	4648      	mov	r0, r9
  402f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402f56:	46b9      	mov	r9, r7
  402f58:	4648      	mov	r0, r9
  402f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402f5e:	bf00      	nop

00402f60 <__locale_mb_cur_max>:
  402f60:	4b04      	ldr	r3, [pc, #16]	; (402f74 <__locale_mb_cur_max+0x14>)
  402f62:	4a05      	ldr	r2, [pc, #20]	; (402f78 <__locale_mb_cur_max+0x18>)
  402f64:	681b      	ldr	r3, [r3, #0]
  402f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  402f68:	2b00      	cmp	r3, #0
  402f6a:	bf08      	it	eq
  402f6c:	4613      	moveq	r3, r2
  402f6e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  402f72:	4770      	bx	lr
  402f74:	20400010 	.word	0x20400010
  402f78:	20400444 	.word	0x20400444

00402f7c <__retarget_lock_init_recursive>:
  402f7c:	4770      	bx	lr
  402f7e:	bf00      	nop

00402f80 <__retarget_lock_close_recursive>:
  402f80:	4770      	bx	lr
  402f82:	bf00      	nop

00402f84 <__retarget_lock_acquire_recursive>:
  402f84:	4770      	bx	lr
  402f86:	bf00      	nop

00402f88 <__retarget_lock_release_recursive>:
  402f88:	4770      	bx	lr
  402f8a:	bf00      	nop

00402f8c <__swhatbuf_r>:
  402f8c:	b570      	push	{r4, r5, r6, lr}
  402f8e:	460c      	mov	r4, r1
  402f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402f94:	2900      	cmp	r1, #0
  402f96:	b090      	sub	sp, #64	; 0x40
  402f98:	4615      	mov	r5, r2
  402f9a:	461e      	mov	r6, r3
  402f9c:	db14      	blt.n	402fc8 <__swhatbuf_r+0x3c>
  402f9e:	aa01      	add	r2, sp, #4
  402fa0:	f001 f878 	bl	404094 <_fstat_r>
  402fa4:	2800      	cmp	r0, #0
  402fa6:	db0f      	blt.n	402fc8 <__swhatbuf_r+0x3c>
  402fa8:	9a02      	ldr	r2, [sp, #8]
  402faa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  402fae:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  402fb2:	fab2 f282 	clz	r2, r2
  402fb6:	0952      	lsrs	r2, r2, #5
  402fb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402fbc:	f44f 6000 	mov.w	r0, #2048	; 0x800
  402fc0:	6032      	str	r2, [r6, #0]
  402fc2:	602b      	str	r3, [r5, #0]
  402fc4:	b010      	add	sp, #64	; 0x40
  402fc6:	bd70      	pop	{r4, r5, r6, pc}
  402fc8:	89a2      	ldrh	r2, [r4, #12]
  402fca:	2300      	movs	r3, #0
  402fcc:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  402fd0:	6033      	str	r3, [r6, #0]
  402fd2:	d004      	beq.n	402fde <__swhatbuf_r+0x52>
  402fd4:	2240      	movs	r2, #64	; 0x40
  402fd6:	4618      	mov	r0, r3
  402fd8:	602a      	str	r2, [r5, #0]
  402fda:	b010      	add	sp, #64	; 0x40
  402fdc:	bd70      	pop	{r4, r5, r6, pc}
  402fde:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402fe2:	602b      	str	r3, [r5, #0]
  402fe4:	b010      	add	sp, #64	; 0x40
  402fe6:	bd70      	pop	{r4, r5, r6, pc}

00402fe8 <__smakebuf_r>:
  402fe8:	898a      	ldrh	r2, [r1, #12]
  402fea:	0792      	lsls	r2, r2, #30
  402fec:	460b      	mov	r3, r1
  402fee:	d506      	bpl.n	402ffe <__smakebuf_r+0x16>
  402ff0:	f101 0243 	add.w	r2, r1, #67	; 0x43
  402ff4:	2101      	movs	r1, #1
  402ff6:	601a      	str	r2, [r3, #0]
  402ff8:	611a      	str	r2, [r3, #16]
  402ffa:	6159      	str	r1, [r3, #20]
  402ffc:	4770      	bx	lr
  402ffe:	b5f0      	push	{r4, r5, r6, r7, lr}
  403000:	b083      	sub	sp, #12
  403002:	ab01      	add	r3, sp, #4
  403004:	466a      	mov	r2, sp
  403006:	460c      	mov	r4, r1
  403008:	4606      	mov	r6, r0
  40300a:	f7ff ffbf 	bl	402f8c <__swhatbuf_r>
  40300e:	9900      	ldr	r1, [sp, #0]
  403010:	4605      	mov	r5, r0
  403012:	4630      	mov	r0, r6
  403014:	f000 f832 	bl	40307c <_malloc_r>
  403018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40301c:	b1d8      	cbz	r0, 403056 <__smakebuf_r+0x6e>
  40301e:	9a01      	ldr	r2, [sp, #4]
  403020:	4f15      	ldr	r7, [pc, #84]	; (403078 <__smakebuf_r+0x90>)
  403022:	9900      	ldr	r1, [sp, #0]
  403024:	63f7      	str	r7, [r6, #60]	; 0x3c
  403026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40302a:	81a3      	strh	r3, [r4, #12]
  40302c:	6020      	str	r0, [r4, #0]
  40302e:	6120      	str	r0, [r4, #16]
  403030:	6161      	str	r1, [r4, #20]
  403032:	b91a      	cbnz	r2, 40303c <__smakebuf_r+0x54>
  403034:	432b      	orrs	r3, r5
  403036:	81a3      	strh	r3, [r4, #12]
  403038:	b003      	add	sp, #12
  40303a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40303c:	4630      	mov	r0, r6
  40303e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403042:	f001 f83b 	bl	4040bc <_isatty_r>
  403046:	b1a0      	cbz	r0, 403072 <__smakebuf_r+0x8a>
  403048:	89a3      	ldrh	r3, [r4, #12]
  40304a:	f023 0303 	bic.w	r3, r3, #3
  40304e:	f043 0301 	orr.w	r3, r3, #1
  403052:	b21b      	sxth	r3, r3
  403054:	e7ee      	b.n	403034 <__smakebuf_r+0x4c>
  403056:	059a      	lsls	r2, r3, #22
  403058:	d4ee      	bmi.n	403038 <__smakebuf_r+0x50>
  40305a:	f023 0303 	bic.w	r3, r3, #3
  40305e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403062:	f043 0302 	orr.w	r3, r3, #2
  403066:	2101      	movs	r1, #1
  403068:	81a3      	strh	r3, [r4, #12]
  40306a:	6022      	str	r2, [r4, #0]
  40306c:	6122      	str	r2, [r4, #16]
  40306e:	6161      	str	r1, [r4, #20]
  403070:	e7e2      	b.n	403038 <__smakebuf_r+0x50>
  403072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403076:	e7dd      	b.n	403034 <__smakebuf_r+0x4c>
  403078:	004027a9 	.word	0x004027a9

0040307c <_malloc_r>:
  40307c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403080:	f101 060b 	add.w	r6, r1, #11
  403084:	2e16      	cmp	r6, #22
  403086:	b083      	sub	sp, #12
  403088:	4605      	mov	r5, r0
  40308a:	f240 809e 	bls.w	4031ca <_malloc_r+0x14e>
  40308e:	f036 0607 	bics.w	r6, r6, #7
  403092:	f100 80bd 	bmi.w	403210 <_malloc_r+0x194>
  403096:	42b1      	cmp	r1, r6
  403098:	f200 80ba 	bhi.w	403210 <_malloc_r+0x194>
  40309c:	f000 fc06 	bl	4038ac <__malloc_lock>
  4030a0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4030a4:	f0c0 8293 	bcc.w	4035ce <_malloc_r+0x552>
  4030a8:	0a73      	lsrs	r3, r6, #9
  4030aa:	f000 80b8 	beq.w	40321e <_malloc_r+0x1a2>
  4030ae:	2b04      	cmp	r3, #4
  4030b0:	f200 8179 	bhi.w	4033a6 <_malloc_r+0x32a>
  4030b4:	09b3      	lsrs	r3, r6, #6
  4030b6:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4030ba:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4030be:	00c3      	lsls	r3, r0, #3
  4030c0:	4fbf      	ldr	r7, [pc, #764]	; (4033c0 <_malloc_r+0x344>)
  4030c2:	443b      	add	r3, r7
  4030c4:	f1a3 0108 	sub.w	r1, r3, #8
  4030c8:	685c      	ldr	r4, [r3, #4]
  4030ca:	42a1      	cmp	r1, r4
  4030cc:	d106      	bne.n	4030dc <_malloc_r+0x60>
  4030ce:	e00c      	b.n	4030ea <_malloc_r+0x6e>
  4030d0:	2a00      	cmp	r2, #0
  4030d2:	f280 80aa 	bge.w	40322a <_malloc_r+0x1ae>
  4030d6:	68e4      	ldr	r4, [r4, #12]
  4030d8:	42a1      	cmp	r1, r4
  4030da:	d006      	beq.n	4030ea <_malloc_r+0x6e>
  4030dc:	6863      	ldr	r3, [r4, #4]
  4030de:	f023 0303 	bic.w	r3, r3, #3
  4030e2:	1b9a      	subs	r2, r3, r6
  4030e4:	2a0f      	cmp	r2, #15
  4030e6:	ddf3      	ble.n	4030d0 <_malloc_r+0x54>
  4030e8:	4670      	mov	r0, lr
  4030ea:	693c      	ldr	r4, [r7, #16]
  4030ec:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4033d4 <_malloc_r+0x358>
  4030f0:	4574      	cmp	r4, lr
  4030f2:	f000 81ab 	beq.w	40344c <_malloc_r+0x3d0>
  4030f6:	6863      	ldr	r3, [r4, #4]
  4030f8:	f023 0303 	bic.w	r3, r3, #3
  4030fc:	1b9a      	subs	r2, r3, r6
  4030fe:	2a0f      	cmp	r2, #15
  403100:	f300 8190 	bgt.w	403424 <_malloc_r+0x3a8>
  403104:	2a00      	cmp	r2, #0
  403106:	f8c7 e014 	str.w	lr, [r7, #20]
  40310a:	f8c7 e010 	str.w	lr, [r7, #16]
  40310e:	f280 809d 	bge.w	40324c <_malloc_r+0x1d0>
  403112:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403116:	f080 8161 	bcs.w	4033dc <_malloc_r+0x360>
  40311a:	08db      	lsrs	r3, r3, #3
  40311c:	f103 0c01 	add.w	ip, r3, #1
  403120:	1099      	asrs	r1, r3, #2
  403122:	687a      	ldr	r2, [r7, #4]
  403124:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403128:	f8c4 8008 	str.w	r8, [r4, #8]
  40312c:	2301      	movs	r3, #1
  40312e:	408b      	lsls	r3, r1
  403130:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403134:	4313      	orrs	r3, r2
  403136:	3908      	subs	r1, #8
  403138:	60e1      	str	r1, [r4, #12]
  40313a:	607b      	str	r3, [r7, #4]
  40313c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403140:	f8c8 400c 	str.w	r4, [r8, #12]
  403144:	1082      	asrs	r2, r0, #2
  403146:	2401      	movs	r4, #1
  403148:	4094      	lsls	r4, r2
  40314a:	429c      	cmp	r4, r3
  40314c:	f200 808b 	bhi.w	403266 <_malloc_r+0x1ea>
  403150:	421c      	tst	r4, r3
  403152:	d106      	bne.n	403162 <_malloc_r+0xe6>
  403154:	f020 0003 	bic.w	r0, r0, #3
  403158:	0064      	lsls	r4, r4, #1
  40315a:	421c      	tst	r4, r3
  40315c:	f100 0004 	add.w	r0, r0, #4
  403160:	d0fa      	beq.n	403158 <_malloc_r+0xdc>
  403162:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403166:	46cc      	mov	ip, r9
  403168:	4680      	mov	r8, r0
  40316a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40316e:	459c      	cmp	ip, r3
  403170:	d107      	bne.n	403182 <_malloc_r+0x106>
  403172:	e16d      	b.n	403450 <_malloc_r+0x3d4>
  403174:	2a00      	cmp	r2, #0
  403176:	f280 817b 	bge.w	403470 <_malloc_r+0x3f4>
  40317a:	68db      	ldr	r3, [r3, #12]
  40317c:	459c      	cmp	ip, r3
  40317e:	f000 8167 	beq.w	403450 <_malloc_r+0x3d4>
  403182:	6859      	ldr	r1, [r3, #4]
  403184:	f021 0103 	bic.w	r1, r1, #3
  403188:	1b8a      	subs	r2, r1, r6
  40318a:	2a0f      	cmp	r2, #15
  40318c:	ddf2      	ble.n	403174 <_malloc_r+0xf8>
  40318e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403192:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403196:	9300      	str	r3, [sp, #0]
  403198:	199c      	adds	r4, r3, r6
  40319a:	4628      	mov	r0, r5
  40319c:	f046 0601 	orr.w	r6, r6, #1
  4031a0:	f042 0501 	orr.w	r5, r2, #1
  4031a4:	605e      	str	r6, [r3, #4]
  4031a6:	f8c8 c00c 	str.w	ip, [r8, #12]
  4031aa:	f8cc 8008 	str.w	r8, [ip, #8]
  4031ae:	617c      	str	r4, [r7, #20]
  4031b0:	613c      	str	r4, [r7, #16]
  4031b2:	f8c4 e00c 	str.w	lr, [r4, #12]
  4031b6:	f8c4 e008 	str.w	lr, [r4, #8]
  4031ba:	6065      	str	r5, [r4, #4]
  4031bc:	505a      	str	r2, [r3, r1]
  4031be:	f000 fb7b 	bl	4038b8 <__malloc_unlock>
  4031c2:	9b00      	ldr	r3, [sp, #0]
  4031c4:	f103 0408 	add.w	r4, r3, #8
  4031c8:	e01e      	b.n	403208 <_malloc_r+0x18c>
  4031ca:	2910      	cmp	r1, #16
  4031cc:	d820      	bhi.n	403210 <_malloc_r+0x194>
  4031ce:	f000 fb6d 	bl	4038ac <__malloc_lock>
  4031d2:	2610      	movs	r6, #16
  4031d4:	2318      	movs	r3, #24
  4031d6:	2002      	movs	r0, #2
  4031d8:	4f79      	ldr	r7, [pc, #484]	; (4033c0 <_malloc_r+0x344>)
  4031da:	443b      	add	r3, r7
  4031dc:	f1a3 0208 	sub.w	r2, r3, #8
  4031e0:	685c      	ldr	r4, [r3, #4]
  4031e2:	4294      	cmp	r4, r2
  4031e4:	f000 813d 	beq.w	403462 <_malloc_r+0x3e6>
  4031e8:	6863      	ldr	r3, [r4, #4]
  4031ea:	68e1      	ldr	r1, [r4, #12]
  4031ec:	68a6      	ldr	r6, [r4, #8]
  4031ee:	f023 0303 	bic.w	r3, r3, #3
  4031f2:	4423      	add	r3, r4
  4031f4:	4628      	mov	r0, r5
  4031f6:	685a      	ldr	r2, [r3, #4]
  4031f8:	60f1      	str	r1, [r6, #12]
  4031fa:	f042 0201 	orr.w	r2, r2, #1
  4031fe:	608e      	str	r6, [r1, #8]
  403200:	605a      	str	r2, [r3, #4]
  403202:	f000 fb59 	bl	4038b8 <__malloc_unlock>
  403206:	3408      	adds	r4, #8
  403208:	4620      	mov	r0, r4
  40320a:	b003      	add	sp, #12
  40320c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403210:	2400      	movs	r4, #0
  403212:	230c      	movs	r3, #12
  403214:	4620      	mov	r0, r4
  403216:	602b      	str	r3, [r5, #0]
  403218:	b003      	add	sp, #12
  40321a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40321e:	2040      	movs	r0, #64	; 0x40
  403220:	f44f 7300 	mov.w	r3, #512	; 0x200
  403224:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403228:	e74a      	b.n	4030c0 <_malloc_r+0x44>
  40322a:	4423      	add	r3, r4
  40322c:	68e1      	ldr	r1, [r4, #12]
  40322e:	685a      	ldr	r2, [r3, #4]
  403230:	68a6      	ldr	r6, [r4, #8]
  403232:	f042 0201 	orr.w	r2, r2, #1
  403236:	60f1      	str	r1, [r6, #12]
  403238:	4628      	mov	r0, r5
  40323a:	608e      	str	r6, [r1, #8]
  40323c:	605a      	str	r2, [r3, #4]
  40323e:	f000 fb3b 	bl	4038b8 <__malloc_unlock>
  403242:	3408      	adds	r4, #8
  403244:	4620      	mov	r0, r4
  403246:	b003      	add	sp, #12
  403248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40324c:	4423      	add	r3, r4
  40324e:	4628      	mov	r0, r5
  403250:	685a      	ldr	r2, [r3, #4]
  403252:	f042 0201 	orr.w	r2, r2, #1
  403256:	605a      	str	r2, [r3, #4]
  403258:	f000 fb2e 	bl	4038b8 <__malloc_unlock>
  40325c:	3408      	adds	r4, #8
  40325e:	4620      	mov	r0, r4
  403260:	b003      	add	sp, #12
  403262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403266:	68bc      	ldr	r4, [r7, #8]
  403268:	6863      	ldr	r3, [r4, #4]
  40326a:	f023 0803 	bic.w	r8, r3, #3
  40326e:	45b0      	cmp	r8, r6
  403270:	d304      	bcc.n	40327c <_malloc_r+0x200>
  403272:	eba8 0306 	sub.w	r3, r8, r6
  403276:	2b0f      	cmp	r3, #15
  403278:	f300 8085 	bgt.w	403386 <_malloc_r+0x30a>
  40327c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4033d8 <_malloc_r+0x35c>
  403280:	4b50      	ldr	r3, [pc, #320]	; (4033c4 <_malloc_r+0x348>)
  403282:	f8d9 2000 	ldr.w	r2, [r9]
  403286:	681b      	ldr	r3, [r3, #0]
  403288:	3201      	adds	r2, #1
  40328a:	4433      	add	r3, r6
  40328c:	eb04 0a08 	add.w	sl, r4, r8
  403290:	f000 8155 	beq.w	40353e <_malloc_r+0x4c2>
  403294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403298:	330f      	adds	r3, #15
  40329a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40329e:	f02b 0b0f 	bic.w	fp, fp, #15
  4032a2:	4659      	mov	r1, fp
  4032a4:	4628      	mov	r0, r5
  4032a6:	f000 fcb3 	bl	403c10 <_sbrk_r>
  4032aa:	1c41      	adds	r1, r0, #1
  4032ac:	4602      	mov	r2, r0
  4032ae:	f000 80fc 	beq.w	4034aa <_malloc_r+0x42e>
  4032b2:	4582      	cmp	sl, r0
  4032b4:	f200 80f7 	bhi.w	4034a6 <_malloc_r+0x42a>
  4032b8:	4b43      	ldr	r3, [pc, #268]	; (4033c8 <_malloc_r+0x34c>)
  4032ba:	6819      	ldr	r1, [r3, #0]
  4032bc:	4459      	add	r1, fp
  4032be:	6019      	str	r1, [r3, #0]
  4032c0:	f000 814d 	beq.w	40355e <_malloc_r+0x4e2>
  4032c4:	f8d9 0000 	ldr.w	r0, [r9]
  4032c8:	3001      	adds	r0, #1
  4032ca:	bf1b      	ittet	ne
  4032cc:	eba2 0a0a 	subne.w	sl, r2, sl
  4032d0:	4451      	addne	r1, sl
  4032d2:	f8c9 2000 	streq.w	r2, [r9]
  4032d6:	6019      	strne	r1, [r3, #0]
  4032d8:	f012 0107 	ands.w	r1, r2, #7
  4032dc:	f000 8115 	beq.w	40350a <_malloc_r+0x48e>
  4032e0:	f1c1 0008 	rsb	r0, r1, #8
  4032e4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4032e8:	4402      	add	r2, r0
  4032ea:	3108      	adds	r1, #8
  4032ec:	eb02 090b 	add.w	r9, r2, fp
  4032f0:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4032f4:	eba1 0909 	sub.w	r9, r1, r9
  4032f8:	4649      	mov	r1, r9
  4032fa:	4628      	mov	r0, r5
  4032fc:	9301      	str	r3, [sp, #4]
  4032fe:	9200      	str	r2, [sp, #0]
  403300:	f000 fc86 	bl	403c10 <_sbrk_r>
  403304:	1c43      	adds	r3, r0, #1
  403306:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40330a:	f000 8143 	beq.w	403594 <_malloc_r+0x518>
  40330e:	1a80      	subs	r0, r0, r2
  403310:	4448      	add	r0, r9
  403312:	f040 0001 	orr.w	r0, r0, #1
  403316:	6819      	ldr	r1, [r3, #0]
  403318:	60ba      	str	r2, [r7, #8]
  40331a:	4449      	add	r1, r9
  40331c:	42bc      	cmp	r4, r7
  40331e:	6050      	str	r0, [r2, #4]
  403320:	6019      	str	r1, [r3, #0]
  403322:	d017      	beq.n	403354 <_malloc_r+0x2d8>
  403324:	f1b8 0f0f 	cmp.w	r8, #15
  403328:	f240 80fb 	bls.w	403522 <_malloc_r+0x4a6>
  40332c:	6860      	ldr	r0, [r4, #4]
  40332e:	f1a8 020c 	sub.w	r2, r8, #12
  403332:	f022 0207 	bic.w	r2, r2, #7
  403336:	eb04 0e02 	add.w	lr, r4, r2
  40333a:	f000 0001 	and.w	r0, r0, #1
  40333e:	f04f 0c05 	mov.w	ip, #5
  403342:	4310      	orrs	r0, r2
  403344:	2a0f      	cmp	r2, #15
  403346:	6060      	str	r0, [r4, #4]
  403348:	f8ce c004 	str.w	ip, [lr, #4]
  40334c:	f8ce c008 	str.w	ip, [lr, #8]
  403350:	f200 8117 	bhi.w	403582 <_malloc_r+0x506>
  403354:	4b1d      	ldr	r3, [pc, #116]	; (4033cc <_malloc_r+0x350>)
  403356:	68bc      	ldr	r4, [r7, #8]
  403358:	681a      	ldr	r2, [r3, #0]
  40335a:	4291      	cmp	r1, r2
  40335c:	bf88      	it	hi
  40335e:	6019      	strhi	r1, [r3, #0]
  403360:	4b1b      	ldr	r3, [pc, #108]	; (4033d0 <_malloc_r+0x354>)
  403362:	681a      	ldr	r2, [r3, #0]
  403364:	4291      	cmp	r1, r2
  403366:	6862      	ldr	r2, [r4, #4]
  403368:	bf88      	it	hi
  40336a:	6019      	strhi	r1, [r3, #0]
  40336c:	f022 0203 	bic.w	r2, r2, #3
  403370:	4296      	cmp	r6, r2
  403372:	eba2 0306 	sub.w	r3, r2, r6
  403376:	d801      	bhi.n	40337c <_malloc_r+0x300>
  403378:	2b0f      	cmp	r3, #15
  40337a:	dc04      	bgt.n	403386 <_malloc_r+0x30a>
  40337c:	4628      	mov	r0, r5
  40337e:	f000 fa9b 	bl	4038b8 <__malloc_unlock>
  403382:	2400      	movs	r4, #0
  403384:	e740      	b.n	403208 <_malloc_r+0x18c>
  403386:	19a2      	adds	r2, r4, r6
  403388:	f043 0301 	orr.w	r3, r3, #1
  40338c:	f046 0601 	orr.w	r6, r6, #1
  403390:	6066      	str	r6, [r4, #4]
  403392:	4628      	mov	r0, r5
  403394:	60ba      	str	r2, [r7, #8]
  403396:	6053      	str	r3, [r2, #4]
  403398:	f000 fa8e 	bl	4038b8 <__malloc_unlock>
  40339c:	3408      	adds	r4, #8
  40339e:	4620      	mov	r0, r4
  4033a0:	b003      	add	sp, #12
  4033a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4033a6:	2b14      	cmp	r3, #20
  4033a8:	d971      	bls.n	40348e <_malloc_r+0x412>
  4033aa:	2b54      	cmp	r3, #84	; 0x54
  4033ac:	f200 80a3 	bhi.w	4034f6 <_malloc_r+0x47a>
  4033b0:	0b33      	lsrs	r3, r6, #12
  4033b2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4033b6:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4033ba:	00c3      	lsls	r3, r0, #3
  4033bc:	e680      	b.n	4030c0 <_malloc_r+0x44>
  4033be:	bf00      	nop
  4033c0:	204005b0 	.word	0x204005b0
  4033c4:	20400acc 	.word	0x20400acc
  4033c8:	20400a9c 	.word	0x20400a9c
  4033cc:	20400ac4 	.word	0x20400ac4
  4033d0:	20400ac8 	.word	0x20400ac8
  4033d4:	204005b8 	.word	0x204005b8
  4033d8:	204009b8 	.word	0x204009b8
  4033dc:	0a5a      	lsrs	r2, r3, #9
  4033de:	2a04      	cmp	r2, #4
  4033e0:	d95b      	bls.n	40349a <_malloc_r+0x41e>
  4033e2:	2a14      	cmp	r2, #20
  4033e4:	f200 80ae 	bhi.w	403544 <_malloc_r+0x4c8>
  4033e8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4033ec:	00c9      	lsls	r1, r1, #3
  4033ee:	325b      	adds	r2, #91	; 0x5b
  4033f0:	eb07 0c01 	add.w	ip, r7, r1
  4033f4:	5879      	ldr	r1, [r7, r1]
  4033f6:	f1ac 0c08 	sub.w	ip, ip, #8
  4033fa:	458c      	cmp	ip, r1
  4033fc:	f000 8088 	beq.w	403510 <_malloc_r+0x494>
  403400:	684a      	ldr	r2, [r1, #4]
  403402:	f022 0203 	bic.w	r2, r2, #3
  403406:	4293      	cmp	r3, r2
  403408:	d273      	bcs.n	4034f2 <_malloc_r+0x476>
  40340a:	6889      	ldr	r1, [r1, #8]
  40340c:	458c      	cmp	ip, r1
  40340e:	d1f7      	bne.n	403400 <_malloc_r+0x384>
  403410:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403414:	687b      	ldr	r3, [r7, #4]
  403416:	60e2      	str	r2, [r4, #12]
  403418:	f8c4 c008 	str.w	ip, [r4, #8]
  40341c:	6094      	str	r4, [r2, #8]
  40341e:	f8cc 400c 	str.w	r4, [ip, #12]
  403422:	e68f      	b.n	403144 <_malloc_r+0xc8>
  403424:	19a1      	adds	r1, r4, r6
  403426:	f046 0c01 	orr.w	ip, r6, #1
  40342a:	f042 0601 	orr.w	r6, r2, #1
  40342e:	f8c4 c004 	str.w	ip, [r4, #4]
  403432:	4628      	mov	r0, r5
  403434:	6179      	str	r1, [r7, #20]
  403436:	6139      	str	r1, [r7, #16]
  403438:	f8c1 e00c 	str.w	lr, [r1, #12]
  40343c:	f8c1 e008 	str.w	lr, [r1, #8]
  403440:	604e      	str	r6, [r1, #4]
  403442:	50e2      	str	r2, [r4, r3]
  403444:	f000 fa38 	bl	4038b8 <__malloc_unlock>
  403448:	3408      	adds	r4, #8
  40344a:	e6dd      	b.n	403208 <_malloc_r+0x18c>
  40344c:	687b      	ldr	r3, [r7, #4]
  40344e:	e679      	b.n	403144 <_malloc_r+0xc8>
  403450:	f108 0801 	add.w	r8, r8, #1
  403454:	f018 0f03 	tst.w	r8, #3
  403458:	f10c 0c08 	add.w	ip, ip, #8
  40345c:	f47f ae85 	bne.w	40316a <_malloc_r+0xee>
  403460:	e02d      	b.n	4034be <_malloc_r+0x442>
  403462:	68dc      	ldr	r4, [r3, #12]
  403464:	42a3      	cmp	r3, r4
  403466:	bf08      	it	eq
  403468:	3002      	addeq	r0, #2
  40346a:	f43f ae3e 	beq.w	4030ea <_malloc_r+0x6e>
  40346e:	e6bb      	b.n	4031e8 <_malloc_r+0x16c>
  403470:	4419      	add	r1, r3
  403472:	461c      	mov	r4, r3
  403474:	684a      	ldr	r2, [r1, #4]
  403476:	68db      	ldr	r3, [r3, #12]
  403478:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40347c:	f042 0201 	orr.w	r2, r2, #1
  403480:	604a      	str	r2, [r1, #4]
  403482:	4628      	mov	r0, r5
  403484:	60f3      	str	r3, [r6, #12]
  403486:	609e      	str	r6, [r3, #8]
  403488:	f000 fa16 	bl	4038b8 <__malloc_unlock>
  40348c:	e6bc      	b.n	403208 <_malloc_r+0x18c>
  40348e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403492:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403496:	00c3      	lsls	r3, r0, #3
  403498:	e612      	b.n	4030c0 <_malloc_r+0x44>
  40349a:	099a      	lsrs	r2, r3, #6
  40349c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4034a0:	00c9      	lsls	r1, r1, #3
  4034a2:	3238      	adds	r2, #56	; 0x38
  4034a4:	e7a4      	b.n	4033f0 <_malloc_r+0x374>
  4034a6:	42bc      	cmp	r4, r7
  4034a8:	d054      	beq.n	403554 <_malloc_r+0x4d8>
  4034aa:	68bc      	ldr	r4, [r7, #8]
  4034ac:	6862      	ldr	r2, [r4, #4]
  4034ae:	f022 0203 	bic.w	r2, r2, #3
  4034b2:	e75d      	b.n	403370 <_malloc_r+0x2f4>
  4034b4:	f859 3908 	ldr.w	r3, [r9], #-8
  4034b8:	4599      	cmp	r9, r3
  4034ba:	f040 8086 	bne.w	4035ca <_malloc_r+0x54e>
  4034be:	f010 0f03 	tst.w	r0, #3
  4034c2:	f100 30ff 	add.w	r0, r0, #4294967295
  4034c6:	d1f5      	bne.n	4034b4 <_malloc_r+0x438>
  4034c8:	687b      	ldr	r3, [r7, #4]
  4034ca:	ea23 0304 	bic.w	r3, r3, r4
  4034ce:	607b      	str	r3, [r7, #4]
  4034d0:	0064      	lsls	r4, r4, #1
  4034d2:	429c      	cmp	r4, r3
  4034d4:	f63f aec7 	bhi.w	403266 <_malloc_r+0x1ea>
  4034d8:	2c00      	cmp	r4, #0
  4034da:	f43f aec4 	beq.w	403266 <_malloc_r+0x1ea>
  4034de:	421c      	tst	r4, r3
  4034e0:	4640      	mov	r0, r8
  4034e2:	f47f ae3e 	bne.w	403162 <_malloc_r+0xe6>
  4034e6:	0064      	lsls	r4, r4, #1
  4034e8:	421c      	tst	r4, r3
  4034ea:	f100 0004 	add.w	r0, r0, #4
  4034ee:	d0fa      	beq.n	4034e6 <_malloc_r+0x46a>
  4034f0:	e637      	b.n	403162 <_malloc_r+0xe6>
  4034f2:	468c      	mov	ip, r1
  4034f4:	e78c      	b.n	403410 <_malloc_r+0x394>
  4034f6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4034fa:	d815      	bhi.n	403528 <_malloc_r+0x4ac>
  4034fc:	0bf3      	lsrs	r3, r6, #15
  4034fe:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403502:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403506:	00c3      	lsls	r3, r0, #3
  403508:	e5da      	b.n	4030c0 <_malloc_r+0x44>
  40350a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40350e:	e6ed      	b.n	4032ec <_malloc_r+0x270>
  403510:	687b      	ldr	r3, [r7, #4]
  403512:	1092      	asrs	r2, r2, #2
  403514:	2101      	movs	r1, #1
  403516:	fa01 f202 	lsl.w	r2, r1, r2
  40351a:	4313      	orrs	r3, r2
  40351c:	607b      	str	r3, [r7, #4]
  40351e:	4662      	mov	r2, ip
  403520:	e779      	b.n	403416 <_malloc_r+0x39a>
  403522:	2301      	movs	r3, #1
  403524:	6053      	str	r3, [r2, #4]
  403526:	e729      	b.n	40337c <_malloc_r+0x300>
  403528:	f240 5254 	movw	r2, #1364	; 0x554
  40352c:	4293      	cmp	r3, r2
  40352e:	d822      	bhi.n	403576 <_malloc_r+0x4fa>
  403530:	0cb3      	lsrs	r3, r6, #18
  403532:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403536:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40353a:	00c3      	lsls	r3, r0, #3
  40353c:	e5c0      	b.n	4030c0 <_malloc_r+0x44>
  40353e:	f103 0b10 	add.w	fp, r3, #16
  403542:	e6ae      	b.n	4032a2 <_malloc_r+0x226>
  403544:	2a54      	cmp	r2, #84	; 0x54
  403546:	d829      	bhi.n	40359c <_malloc_r+0x520>
  403548:	0b1a      	lsrs	r2, r3, #12
  40354a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40354e:	00c9      	lsls	r1, r1, #3
  403550:	326e      	adds	r2, #110	; 0x6e
  403552:	e74d      	b.n	4033f0 <_malloc_r+0x374>
  403554:	4b20      	ldr	r3, [pc, #128]	; (4035d8 <_malloc_r+0x55c>)
  403556:	6819      	ldr	r1, [r3, #0]
  403558:	4459      	add	r1, fp
  40355a:	6019      	str	r1, [r3, #0]
  40355c:	e6b2      	b.n	4032c4 <_malloc_r+0x248>
  40355e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403562:	2800      	cmp	r0, #0
  403564:	f47f aeae 	bne.w	4032c4 <_malloc_r+0x248>
  403568:	eb08 030b 	add.w	r3, r8, fp
  40356c:	68ba      	ldr	r2, [r7, #8]
  40356e:	f043 0301 	orr.w	r3, r3, #1
  403572:	6053      	str	r3, [r2, #4]
  403574:	e6ee      	b.n	403354 <_malloc_r+0x2d8>
  403576:	207f      	movs	r0, #127	; 0x7f
  403578:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40357c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403580:	e59e      	b.n	4030c0 <_malloc_r+0x44>
  403582:	f104 0108 	add.w	r1, r4, #8
  403586:	4628      	mov	r0, r5
  403588:	9300      	str	r3, [sp, #0]
  40358a:	f7ff fa61 	bl	402a50 <_free_r>
  40358e:	9b00      	ldr	r3, [sp, #0]
  403590:	6819      	ldr	r1, [r3, #0]
  403592:	e6df      	b.n	403354 <_malloc_r+0x2d8>
  403594:	2001      	movs	r0, #1
  403596:	f04f 0900 	mov.w	r9, #0
  40359a:	e6bc      	b.n	403316 <_malloc_r+0x29a>
  40359c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4035a0:	d805      	bhi.n	4035ae <_malloc_r+0x532>
  4035a2:	0bda      	lsrs	r2, r3, #15
  4035a4:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4035a8:	00c9      	lsls	r1, r1, #3
  4035aa:	3277      	adds	r2, #119	; 0x77
  4035ac:	e720      	b.n	4033f0 <_malloc_r+0x374>
  4035ae:	f240 5154 	movw	r1, #1364	; 0x554
  4035b2:	428a      	cmp	r2, r1
  4035b4:	d805      	bhi.n	4035c2 <_malloc_r+0x546>
  4035b6:	0c9a      	lsrs	r2, r3, #18
  4035b8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4035bc:	00c9      	lsls	r1, r1, #3
  4035be:	327c      	adds	r2, #124	; 0x7c
  4035c0:	e716      	b.n	4033f0 <_malloc_r+0x374>
  4035c2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4035c6:	227e      	movs	r2, #126	; 0x7e
  4035c8:	e712      	b.n	4033f0 <_malloc_r+0x374>
  4035ca:	687b      	ldr	r3, [r7, #4]
  4035cc:	e780      	b.n	4034d0 <_malloc_r+0x454>
  4035ce:	08f0      	lsrs	r0, r6, #3
  4035d0:	f106 0308 	add.w	r3, r6, #8
  4035d4:	e600      	b.n	4031d8 <_malloc_r+0x15c>
  4035d6:	bf00      	nop
  4035d8:	20400a9c 	.word	0x20400a9c

004035dc <__ascii_mbtowc>:
  4035dc:	b082      	sub	sp, #8
  4035de:	b149      	cbz	r1, 4035f4 <__ascii_mbtowc+0x18>
  4035e0:	b15a      	cbz	r2, 4035fa <__ascii_mbtowc+0x1e>
  4035e2:	b16b      	cbz	r3, 403600 <__ascii_mbtowc+0x24>
  4035e4:	7813      	ldrb	r3, [r2, #0]
  4035e6:	600b      	str	r3, [r1, #0]
  4035e8:	7812      	ldrb	r2, [r2, #0]
  4035ea:	1c10      	adds	r0, r2, #0
  4035ec:	bf18      	it	ne
  4035ee:	2001      	movne	r0, #1
  4035f0:	b002      	add	sp, #8
  4035f2:	4770      	bx	lr
  4035f4:	a901      	add	r1, sp, #4
  4035f6:	2a00      	cmp	r2, #0
  4035f8:	d1f3      	bne.n	4035e2 <__ascii_mbtowc+0x6>
  4035fa:	4610      	mov	r0, r2
  4035fc:	b002      	add	sp, #8
  4035fe:	4770      	bx	lr
  403600:	f06f 0001 	mvn.w	r0, #1
  403604:	e7f4      	b.n	4035f0 <__ascii_mbtowc+0x14>
  403606:	bf00      	nop
	...

00403610 <memchr>:
  403610:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403614:	2a10      	cmp	r2, #16
  403616:	db2b      	blt.n	403670 <memchr+0x60>
  403618:	f010 0f07 	tst.w	r0, #7
  40361c:	d008      	beq.n	403630 <memchr+0x20>
  40361e:	f810 3b01 	ldrb.w	r3, [r0], #1
  403622:	3a01      	subs	r2, #1
  403624:	428b      	cmp	r3, r1
  403626:	d02d      	beq.n	403684 <memchr+0x74>
  403628:	f010 0f07 	tst.w	r0, #7
  40362c:	b342      	cbz	r2, 403680 <memchr+0x70>
  40362e:	d1f6      	bne.n	40361e <memchr+0xe>
  403630:	b4f0      	push	{r4, r5, r6, r7}
  403632:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403636:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40363a:	f022 0407 	bic.w	r4, r2, #7
  40363e:	f07f 0700 	mvns.w	r7, #0
  403642:	2300      	movs	r3, #0
  403644:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403648:	3c08      	subs	r4, #8
  40364a:	ea85 0501 	eor.w	r5, r5, r1
  40364e:	ea86 0601 	eor.w	r6, r6, r1
  403652:	fa85 f547 	uadd8	r5, r5, r7
  403656:	faa3 f587 	sel	r5, r3, r7
  40365a:	fa86 f647 	uadd8	r6, r6, r7
  40365e:	faa5 f687 	sel	r6, r5, r7
  403662:	b98e      	cbnz	r6, 403688 <memchr+0x78>
  403664:	d1ee      	bne.n	403644 <memchr+0x34>
  403666:	bcf0      	pop	{r4, r5, r6, r7}
  403668:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40366c:	f002 0207 	and.w	r2, r2, #7
  403670:	b132      	cbz	r2, 403680 <memchr+0x70>
  403672:	f810 3b01 	ldrb.w	r3, [r0], #1
  403676:	3a01      	subs	r2, #1
  403678:	ea83 0301 	eor.w	r3, r3, r1
  40367c:	b113      	cbz	r3, 403684 <memchr+0x74>
  40367e:	d1f8      	bne.n	403672 <memchr+0x62>
  403680:	2000      	movs	r0, #0
  403682:	4770      	bx	lr
  403684:	3801      	subs	r0, #1
  403686:	4770      	bx	lr
  403688:	2d00      	cmp	r5, #0
  40368a:	bf06      	itte	eq
  40368c:	4635      	moveq	r5, r6
  40368e:	3803      	subeq	r0, #3
  403690:	3807      	subne	r0, #7
  403692:	f015 0f01 	tst.w	r5, #1
  403696:	d107      	bne.n	4036a8 <memchr+0x98>
  403698:	3001      	adds	r0, #1
  40369a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40369e:	bf02      	ittt	eq
  4036a0:	3001      	addeq	r0, #1
  4036a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4036a6:	3001      	addeq	r0, #1
  4036a8:	bcf0      	pop	{r4, r5, r6, r7}
  4036aa:	3801      	subs	r0, #1
  4036ac:	4770      	bx	lr
  4036ae:	bf00      	nop

004036b0 <memcpy>:
  4036b0:	4684      	mov	ip, r0
  4036b2:	ea41 0300 	orr.w	r3, r1, r0
  4036b6:	f013 0303 	ands.w	r3, r3, #3
  4036ba:	d16d      	bne.n	403798 <memcpy+0xe8>
  4036bc:	3a40      	subs	r2, #64	; 0x40
  4036be:	d341      	bcc.n	403744 <memcpy+0x94>
  4036c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4036c4:	f840 3b04 	str.w	r3, [r0], #4
  4036c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4036cc:	f840 3b04 	str.w	r3, [r0], #4
  4036d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4036d4:	f840 3b04 	str.w	r3, [r0], #4
  4036d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4036dc:	f840 3b04 	str.w	r3, [r0], #4
  4036e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4036e4:	f840 3b04 	str.w	r3, [r0], #4
  4036e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4036ec:	f840 3b04 	str.w	r3, [r0], #4
  4036f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4036f4:	f840 3b04 	str.w	r3, [r0], #4
  4036f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4036fc:	f840 3b04 	str.w	r3, [r0], #4
  403700:	f851 3b04 	ldr.w	r3, [r1], #4
  403704:	f840 3b04 	str.w	r3, [r0], #4
  403708:	f851 3b04 	ldr.w	r3, [r1], #4
  40370c:	f840 3b04 	str.w	r3, [r0], #4
  403710:	f851 3b04 	ldr.w	r3, [r1], #4
  403714:	f840 3b04 	str.w	r3, [r0], #4
  403718:	f851 3b04 	ldr.w	r3, [r1], #4
  40371c:	f840 3b04 	str.w	r3, [r0], #4
  403720:	f851 3b04 	ldr.w	r3, [r1], #4
  403724:	f840 3b04 	str.w	r3, [r0], #4
  403728:	f851 3b04 	ldr.w	r3, [r1], #4
  40372c:	f840 3b04 	str.w	r3, [r0], #4
  403730:	f851 3b04 	ldr.w	r3, [r1], #4
  403734:	f840 3b04 	str.w	r3, [r0], #4
  403738:	f851 3b04 	ldr.w	r3, [r1], #4
  40373c:	f840 3b04 	str.w	r3, [r0], #4
  403740:	3a40      	subs	r2, #64	; 0x40
  403742:	d2bd      	bcs.n	4036c0 <memcpy+0x10>
  403744:	3230      	adds	r2, #48	; 0x30
  403746:	d311      	bcc.n	40376c <memcpy+0xbc>
  403748:	f851 3b04 	ldr.w	r3, [r1], #4
  40374c:	f840 3b04 	str.w	r3, [r0], #4
  403750:	f851 3b04 	ldr.w	r3, [r1], #4
  403754:	f840 3b04 	str.w	r3, [r0], #4
  403758:	f851 3b04 	ldr.w	r3, [r1], #4
  40375c:	f840 3b04 	str.w	r3, [r0], #4
  403760:	f851 3b04 	ldr.w	r3, [r1], #4
  403764:	f840 3b04 	str.w	r3, [r0], #4
  403768:	3a10      	subs	r2, #16
  40376a:	d2ed      	bcs.n	403748 <memcpy+0x98>
  40376c:	320c      	adds	r2, #12
  40376e:	d305      	bcc.n	40377c <memcpy+0xcc>
  403770:	f851 3b04 	ldr.w	r3, [r1], #4
  403774:	f840 3b04 	str.w	r3, [r0], #4
  403778:	3a04      	subs	r2, #4
  40377a:	d2f9      	bcs.n	403770 <memcpy+0xc0>
  40377c:	3204      	adds	r2, #4
  40377e:	d008      	beq.n	403792 <memcpy+0xe2>
  403780:	07d2      	lsls	r2, r2, #31
  403782:	bf1c      	itt	ne
  403784:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403788:	f800 3b01 	strbne.w	r3, [r0], #1
  40378c:	d301      	bcc.n	403792 <memcpy+0xe2>
  40378e:	880b      	ldrh	r3, [r1, #0]
  403790:	8003      	strh	r3, [r0, #0]
  403792:	4660      	mov	r0, ip
  403794:	4770      	bx	lr
  403796:	bf00      	nop
  403798:	2a08      	cmp	r2, #8
  40379a:	d313      	bcc.n	4037c4 <memcpy+0x114>
  40379c:	078b      	lsls	r3, r1, #30
  40379e:	d08d      	beq.n	4036bc <memcpy+0xc>
  4037a0:	f010 0303 	ands.w	r3, r0, #3
  4037a4:	d08a      	beq.n	4036bc <memcpy+0xc>
  4037a6:	f1c3 0304 	rsb	r3, r3, #4
  4037aa:	1ad2      	subs	r2, r2, r3
  4037ac:	07db      	lsls	r3, r3, #31
  4037ae:	bf1c      	itt	ne
  4037b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4037b4:	f800 3b01 	strbne.w	r3, [r0], #1
  4037b8:	d380      	bcc.n	4036bc <memcpy+0xc>
  4037ba:	f831 3b02 	ldrh.w	r3, [r1], #2
  4037be:	f820 3b02 	strh.w	r3, [r0], #2
  4037c2:	e77b      	b.n	4036bc <memcpy+0xc>
  4037c4:	3a04      	subs	r2, #4
  4037c6:	d3d9      	bcc.n	40377c <memcpy+0xcc>
  4037c8:	3a01      	subs	r2, #1
  4037ca:	f811 3b01 	ldrb.w	r3, [r1], #1
  4037ce:	f800 3b01 	strb.w	r3, [r0], #1
  4037d2:	d2f9      	bcs.n	4037c8 <memcpy+0x118>
  4037d4:	780b      	ldrb	r3, [r1, #0]
  4037d6:	7003      	strb	r3, [r0, #0]
  4037d8:	784b      	ldrb	r3, [r1, #1]
  4037da:	7043      	strb	r3, [r0, #1]
  4037dc:	788b      	ldrb	r3, [r1, #2]
  4037de:	7083      	strb	r3, [r0, #2]
  4037e0:	4660      	mov	r0, ip
  4037e2:	4770      	bx	lr

004037e4 <memmove>:
  4037e4:	4288      	cmp	r0, r1
  4037e6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4037e8:	d90d      	bls.n	403806 <memmove+0x22>
  4037ea:	188b      	adds	r3, r1, r2
  4037ec:	4298      	cmp	r0, r3
  4037ee:	d20a      	bcs.n	403806 <memmove+0x22>
  4037f0:	1884      	adds	r4, r0, r2
  4037f2:	2a00      	cmp	r2, #0
  4037f4:	d051      	beq.n	40389a <memmove+0xb6>
  4037f6:	4622      	mov	r2, r4
  4037f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4037fc:	f802 4d01 	strb.w	r4, [r2, #-1]!
  403800:	4299      	cmp	r1, r3
  403802:	d1f9      	bne.n	4037f8 <memmove+0x14>
  403804:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403806:	2a0f      	cmp	r2, #15
  403808:	d948      	bls.n	40389c <memmove+0xb8>
  40380a:	ea41 0300 	orr.w	r3, r1, r0
  40380e:	079b      	lsls	r3, r3, #30
  403810:	d146      	bne.n	4038a0 <memmove+0xbc>
  403812:	f100 0410 	add.w	r4, r0, #16
  403816:	f101 0310 	add.w	r3, r1, #16
  40381a:	4615      	mov	r5, r2
  40381c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  403820:	f844 6c10 	str.w	r6, [r4, #-16]
  403824:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  403828:	f844 6c0c 	str.w	r6, [r4, #-12]
  40382c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  403830:	f844 6c08 	str.w	r6, [r4, #-8]
  403834:	3d10      	subs	r5, #16
  403836:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40383a:	f844 6c04 	str.w	r6, [r4, #-4]
  40383e:	2d0f      	cmp	r5, #15
  403840:	f103 0310 	add.w	r3, r3, #16
  403844:	f104 0410 	add.w	r4, r4, #16
  403848:	d8e8      	bhi.n	40381c <memmove+0x38>
  40384a:	f1a2 0310 	sub.w	r3, r2, #16
  40384e:	f023 030f 	bic.w	r3, r3, #15
  403852:	f002 0e0f 	and.w	lr, r2, #15
  403856:	3310      	adds	r3, #16
  403858:	f1be 0f03 	cmp.w	lr, #3
  40385c:	4419      	add	r1, r3
  40385e:	4403      	add	r3, r0
  403860:	d921      	bls.n	4038a6 <memmove+0xc2>
  403862:	1f1e      	subs	r6, r3, #4
  403864:	460d      	mov	r5, r1
  403866:	4674      	mov	r4, lr
  403868:	3c04      	subs	r4, #4
  40386a:	f855 7b04 	ldr.w	r7, [r5], #4
  40386e:	f846 7f04 	str.w	r7, [r6, #4]!
  403872:	2c03      	cmp	r4, #3
  403874:	d8f8      	bhi.n	403868 <memmove+0x84>
  403876:	f1ae 0404 	sub.w	r4, lr, #4
  40387a:	f024 0403 	bic.w	r4, r4, #3
  40387e:	3404      	adds	r4, #4
  403880:	4421      	add	r1, r4
  403882:	4423      	add	r3, r4
  403884:	f002 0203 	and.w	r2, r2, #3
  403888:	b162      	cbz	r2, 4038a4 <memmove+0xc0>
  40388a:	3b01      	subs	r3, #1
  40388c:	440a      	add	r2, r1
  40388e:	f811 4b01 	ldrb.w	r4, [r1], #1
  403892:	f803 4f01 	strb.w	r4, [r3, #1]!
  403896:	428a      	cmp	r2, r1
  403898:	d1f9      	bne.n	40388e <memmove+0xaa>
  40389a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40389c:	4603      	mov	r3, r0
  40389e:	e7f3      	b.n	403888 <memmove+0xa4>
  4038a0:	4603      	mov	r3, r0
  4038a2:	e7f2      	b.n	40388a <memmove+0xa6>
  4038a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4038a6:	4672      	mov	r2, lr
  4038a8:	e7ee      	b.n	403888 <memmove+0xa4>
  4038aa:	bf00      	nop

004038ac <__malloc_lock>:
  4038ac:	4801      	ldr	r0, [pc, #4]	; (4038b4 <__malloc_lock+0x8>)
  4038ae:	f7ff bb69 	b.w	402f84 <__retarget_lock_acquire_recursive>
  4038b2:	bf00      	nop
  4038b4:	20401ef8 	.word	0x20401ef8

004038b8 <__malloc_unlock>:
  4038b8:	4801      	ldr	r0, [pc, #4]	; (4038c0 <__malloc_unlock+0x8>)
  4038ba:	f7ff bb65 	b.w	402f88 <__retarget_lock_release_recursive>
  4038be:	bf00      	nop
  4038c0:	20401ef8 	.word	0x20401ef8

004038c4 <_realloc_r>:
  4038c4:	2900      	cmp	r1, #0
  4038c6:	f000 8095 	beq.w	4039f4 <_realloc_r+0x130>
  4038ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4038ce:	460d      	mov	r5, r1
  4038d0:	4616      	mov	r6, r2
  4038d2:	b083      	sub	sp, #12
  4038d4:	4680      	mov	r8, r0
  4038d6:	f106 070b 	add.w	r7, r6, #11
  4038da:	f7ff ffe7 	bl	4038ac <__malloc_lock>
  4038de:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4038e2:	2f16      	cmp	r7, #22
  4038e4:	f02e 0403 	bic.w	r4, lr, #3
  4038e8:	f1a5 0908 	sub.w	r9, r5, #8
  4038ec:	d83c      	bhi.n	403968 <_realloc_r+0xa4>
  4038ee:	2210      	movs	r2, #16
  4038f0:	4617      	mov	r7, r2
  4038f2:	42be      	cmp	r6, r7
  4038f4:	d83d      	bhi.n	403972 <_realloc_r+0xae>
  4038f6:	4294      	cmp	r4, r2
  4038f8:	da43      	bge.n	403982 <_realloc_r+0xbe>
  4038fa:	4bc4      	ldr	r3, [pc, #784]	; (403c0c <_realloc_r+0x348>)
  4038fc:	6899      	ldr	r1, [r3, #8]
  4038fe:	eb09 0004 	add.w	r0, r9, r4
  403902:	4288      	cmp	r0, r1
  403904:	f000 80b4 	beq.w	403a70 <_realloc_r+0x1ac>
  403908:	6843      	ldr	r3, [r0, #4]
  40390a:	f023 0101 	bic.w	r1, r3, #1
  40390e:	4401      	add	r1, r0
  403910:	6849      	ldr	r1, [r1, #4]
  403912:	07c9      	lsls	r1, r1, #31
  403914:	d54c      	bpl.n	4039b0 <_realloc_r+0xec>
  403916:	f01e 0f01 	tst.w	lr, #1
  40391a:	f000 809b 	beq.w	403a54 <_realloc_r+0x190>
  40391e:	4631      	mov	r1, r6
  403920:	4640      	mov	r0, r8
  403922:	f7ff fbab 	bl	40307c <_malloc_r>
  403926:	4606      	mov	r6, r0
  403928:	2800      	cmp	r0, #0
  40392a:	d03a      	beq.n	4039a2 <_realloc_r+0xde>
  40392c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403930:	f023 0301 	bic.w	r3, r3, #1
  403934:	444b      	add	r3, r9
  403936:	f1a0 0208 	sub.w	r2, r0, #8
  40393a:	429a      	cmp	r2, r3
  40393c:	f000 8121 	beq.w	403b82 <_realloc_r+0x2be>
  403940:	1f22      	subs	r2, r4, #4
  403942:	2a24      	cmp	r2, #36	; 0x24
  403944:	f200 8107 	bhi.w	403b56 <_realloc_r+0x292>
  403948:	2a13      	cmp	r2, #19
  40394a:	f200 80db 	bhi.w	403b04 <_realloc_r+0x240>
  40394e:	4603      	mov	r3, r0
  403950:	462a      	mov	r2, r5
  403952:	6811      	ldr	r1, [r2, #0]
  403954:	6019      	str	r1, [r3, #0]
  403956:	6851      	ldr	r1, [r2, #4]
  403958:	6059      	str	r1, [r3, #4]
  40395a:	6892      	ldr	r2, [r2, #8]
  40395c:	609a      	str	r2, [r3, #8]
  40395e:	4629      	mov	r1, r5
  403960:	4640      	mov	r0, r8
  403962:	f7ff f875 	bl	402a50 <_free_r>
  403966:	e01c      	b.n	4039a2 <_realloc_r+0xde>
  403968:	f027 0707 	bic.w	r7, r7, #7
  40396c:	2f00      	cmp	r7, #0
  40396e:	463a      	mov	r2, r7
  403970:	dabf      	bge.n	4038f2 <_realloc_r+0x2e>
  403972:	2600      	movs	r6, #0
  403974:	230c      	movs	r3, #12
  403976:	4630      	mov	r0, r6
  403978:	f8c8 3000 	str.w	r3, [r8]
  40397c:	b003      	add	sp, #12
  40397e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403982:	462e      	mov	r6, r5
  403984:	1be3      	subs	r3, r4, r7
  403986:	2b0f      	cmp	r3, #15
  403988:	d81e      	bhi.n	4039c8 <_realloc_r+0x104>
  40398a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40398e:	f003 0301 	and.w	r3, r3, #1
  403992:	4323      	orrs	r3, r4
  403994:	444c      	add	r4, r9
  403996:	f8c9 3004 	str.w	r3, [r9, #4]
  40399a:	6863      	ldr	r3, [r4, #4]
  40399c:	f043 0301 	orr.w	r3, r3, #1
  4039a0:	6063      	str	r3, [r4, #4]
  4039a2:	4640      	mov	r0, r8
  4039a4:	f7ff ff88 	bl	4038b8 <__malloc_unlock>
  4039a8:	4630      	mov	r0, r6
  4039aa:	b003      	add	sp, #12
  4039ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4039b0:	f023 0303 	bic.w	r3, r3, #3
  4039b4:	18e1      	adds	r1, r4, r3
  4039b6:	4291      	cmp	r1, r2
  4039b8:	db1f      	blt.n	4039fa <_realloc_r+0x136>
  4039ba:	68c3      	ldr	r3, [r0, #12]
  4039bc:	6882      	ldr	r2, [r0, #8]
  4039be:	462e      	mov	r6, r5
  4039c0:	60d3      	str	r3, [r2, #12]
  4039c2:	460c      	mov	r4, r1
  4039c4:	609a      	str	r2, [r3, #8]
  4039c6:	e7dd      	b.n	403984 <_realloc_r+0xc0>
  4039c8:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4039cc:	eb09 0107 	add.w	r1, r9, r7
  4039d0:	f002 0201 	and.w	r2, r2, #1
  4039d4:	444c      	add	r4, r9
  4039d6:	f043 0301 	orr.w	r3, r3, #1
  4039da:	4317      	orrs	r7, r2
  4039dc:	f8c9 7004 	str.w	r7, [r9, #4]
  4039e0:	604b      	str	r3, [r1, #4]
  4039e2:	6863      	ldr	r3, [r4, #4]
  4039e4:	f043 0301 	orr.w	r3, r3, #1
  4039e8:	3108      	adds	r1, #8
  4039ea:	6063      	str	r3, [r4, #4]
  4039ec:	4640      	mov	r0, r8
  4039ee:	f7ff f82f 	bl	402a50 <_free_r>
  4039f2:	e7d6      	b.n	4039a2 <_realloc_r+0xde>
  4039f4:	4611      	mov	r1, r2
  4039f6:	f7ff bb41 	b.w	40307c <_malloc_r>
  4039fa:	f01e 0f01 	tst.w	lr, #1
  4039fe:	d18e      	bne.n	40391e <_realloc_r+0x5a>
  403a00:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403a04:	eba9 0a01 	sub.w	sl, r9, r1
  403a08:	f8da 1004 	ldr.w	r1, [sl, #4]
  403a0c:	f021 0103 	bic.w	r1, r1, #3
  403a10:	440b      	add	r3, r1
  403a12:	4423      	add	r3, r4
  403a14:	4293      	cmp	r3, r2
  403a16:	db25      	blt.n	403a64 <_realloc_r+0x1a0>
  403a18:	68c2      	ldr	r2, [r0, #12]
  403a1a:	6881      	ldr	r1, [r0, #8]
  403a1c:	4656      	mov	r6, sl
  403a1e:	60ca      	str	r2, [r1, #12]
  403a20:	6091      	str	r1, [r2, #8]
  403a22:	f8da 100c 	ldr.w	r1, [sl, #12]
  403a26:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403a2a:	1f22      	subs	r2, r4, #4
  403a2c:	2a24      	cmp	r2, #36	; 0x24
  403a2e:	60c1      	str	r1, [r0, #12]
  403a30:	6088      	str	r0, [r1, #8]
  403a32:	f200 8094 	bhi.w	403b5e <_realloc_r+0x29a>
  403a36:	2a13      	cmp	r2, #19
  403a38:	d96f      	bls.n	403b1a <_realloc_r+0x256>
  403a3a:	6829      	ldr	r1, [r5, #0]
  403a3c:	f8ca 1008 	str.w	r1, [sl, #8]
  403a40:	6869      	ldr	r1, [r5, #4]
  403a42:	f8ca 100c 	str.w	r1, [sl, #12]
  403a46:	2a1b      	cmp	r2, #27
  403a48:	f200 80a2 	bhi.w	403b90 <_realloc_r+0x2cc>
  403a4c:	3508      	adds	r5, #8
  403a4e:	f10a 0210 	add.w	r2, sl, #16
  403a52:	e063      	b.n	403b1c <_realloc_r+0x258>
  403a54:	f855 3c08 	ldr.w	r3, [r5, #-8]
  403a58:	eba9 0a03 	sub.w	sl, r9, r3
  403a5c:	f8da 1004 	ldr.w	r1, [sl, #4]
  403a60:	f021 0103 	bic.w	r1, r1, #3
  403a64:	1863      	adds	r3, r4, r1
  403a66:	4293      	cmp	r3, r2
  403a68:	f6ff af59 	blt.w	40391e <_realloc_r+0x5a>
  403a6c:	4656      	mov	r6, sl
  403a6e:	e7d8      	b.n	403a22 <_realloc_r+0x15e>
  403a70:	6841      	ldr	r1, [r0, #4]
  403a72:	f021 0b03 	bic.w	fp, r1, #3
  403a76:	44a3      	add	fp, r4
  403a78:	f107 0010 	add.w	r0, r7, #16
  403a7c:	4583      	cmp	fp, r0
  403a7e:	da56      	bge.n	403b2e <_realloc_r+0x26a>
  403a80:	f01e 0f01 	tst.w	lr, #1
  403a84:	f47f af4b 	bne.w	40391e <_realloc_r+0x5a>
  403a88:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403a8c:	eba9 0a01 	sub.w	sl, r9, r1
  403a90:	f8da 1004 	ldr.w	r1, [sl, #4]
  403a94:	f021 0103 	bic.w	r1, r1, #3
  403a98:	448b      	add	fp, r1
  403a9a:	4558      	cmp	r0, fp
  403a9c:	dce2      	bgt.n	403a64 <_realloc_r+0x1a0>
  403a9e:	4656      	mov	r6, sl
  403aa0:	f8da 100c 	ldr.w	r1, [sl, #12]
  403aa4:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403aa8:	1f22      	subs	r2, r4, #4
  403aaa:	2a24      	cmp	r2, #36	; 0x24
  403aac:	60c1      	str	r1, [r0, #12]
  403aae:	6088      	str	r0, [r1, #8]
  403ab0:	f200 808f 	bhi.w	403bd2 <_realloc_r+0x30e>
  403ab4:	2a13      	cmp	r2, #19
  403ab6:	f240 808a 	bls.w	403bce <_realloc_r+0x30a>
  403aba:	6829      	ldr	r1, [r5, #0]
  403abc:	f8ca 1008 	str.w	r1, [sl, #8]
  403ac0:	6869      	ldr	r1, [r5, #4]
  403ac2:	f8ca 100c 	str.w	r1, [sl, #12]
  403ac6:	2a1b      	cmp	r2, #27
  403ac8:	f200 808a 	bhi.w	403be0 <_realloc_r+0x31c>
  403acc:	3508      	adds	r5, #8
  403ace:	f10a 0210 	add.w	r2, sl, #16
  403ad2:	6829      	ldr	r1, [r5, #0]
  403ad4:	6011      	str	r1, [r2, #0]
  403ad6:	6869      	ldr	r1, [r5, #4]
  403ad8:	6051      	str	r1, [r2, #4]
  403ada:	68a9      	ldr	r1, [r5, #8]
  403adc:	6091      	str	r1, [r2, #8]
  403ade:	eb0a 0107 	add.w	r1, sl, r7
  403ae2:	ebab 0207 	sub.w	r2, fp, r7
  403ae6:	f042 0201 	orr.w	r2, r2, #1
  403aea:	6099      	str	r1, [r3, #8]
  403aec:	604a      	str	r2, [r1, #4]
  403aee:	f8da 3004 	ldr.w	r3, [sl, #4]
  403af2:	f003 0301 	and.w	r3, r3, #1
  403af6:	431f      	orrs	r7, r3
  403af8:	4640      	mov	r0, r8
  403afa:	f8ca 7004 	str.w	r7, [sl, #4]
  403afe:	f7ff fedb 	bl	4038b8 <__malloc_unlock>
  403b02:	e751      	b.n	4039a8 <_realloc_r+0xe4>
  403b04:	682b      	ldr	r3, [r5, #0]
  403b06:	6003      	str	r3, [r0, #0]
  403b08:	686b      	ldr	r3, [r5, #4]
  403b0a:	6043      	str	r3, [r0, #4]
  403b0c:	2a1b      	cmp	r2, #27
  403b0e:	d82d      	bhi.n	403b6c <_realloc_r+0x2a8>
  403b10:	f100 0308 	add.w	r3, r0, #8
  403b14:	f105 0208 	add.w	r2, r5, #8
  403b18:	e71b      	b.n	403952 <_realloc_r+0x8e>
  403b1a:	4632      	mov	r2, r6
  403b1c:	6829      	ldr	r1, [r5, #0]
  403b1e:	6011      	str	r1, [r2, #0]
  403b20:	6869      	ldr	r1, [r5, #4]
  403b22:	6051      	str	r1, [r2, #4]
  403b24:	68a9      	ldr	r1, [r5, #8]
  403b26:	6091      	str	r1, [r2, #8]
  403b28:	461c      	mov	r4, r3
  403b2a:	46d1      	mov	r9, sl
  403b2c:	e72a      	b.n	403984 <_realloc_r+0xc0>
  403b2e:	eb09 0107 	add.w	r1, r9, r7
  403b32:	ebab 0b07 	sub.w	fp, fp, r7
  403b36:	f04b 0201 	orr.w	r2, fp, #1
  403b3a:	6099      	str	r1, [r3, #8]
  403b3c:	604a      	str	r2, [r1, #4]
  403b3e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403b42:	f003 0301 	and.w	r3, r3, #1
  403b46:	431f      	orrs	r7, r3
  403b48:	4640      	mov	r0, r8
  403b4a:	f845 7c04 	str.w	r7, [r5, #-4]
  403b4e:	f7ff feb3 	bl	4038b8 <__malloc_unlock>
  403b52:	462e      	mov	r6, r5
  403b54:	e728      	b.n	4039a8 <_realloc_r+0xe4>
  403b56:	4629      	mov	r1, r5
  403b58:	f7ff fe44 	bl	4037e4 <memmove>
  403b5c:	e6ff      	b.n	40395e <_realloc_r+0x9a>
  403b5e:	4629      	mov	r1, r5
  403b60:	4630      	mov	r0, r6
  403b62:	461c      	mov	r4, r3
  403b64:	46d1      	mov	r9, sl
  403b66:	f7ff fe3d 	bl	4037e4 <memmove>
  403b6a:	e70b      	b.n	403984 <_realloc_r+0xc0>
  403b6c:	68ab      	ldr	r3, [r5, #8]
  403b6e:	6083      	str	r3, [r0, #8]
  403b70:	68eb      	ldr	r3, [r5, #12]
  403b72:	60c3      	str	r3, [r0, #12]
  403b74:	2a24      	cmp	r2, #36	; 0x24
  403b76:	d017      	beq.n	403ba8 <_realloc_r+0x2e4>
  403b78:	f100 0310 	add.w	r3, r0, #16
  403b7c:	f105 0210 	add.w	r2, r5, #16
  403b80:	e6e7      	b.n	403952 <_realloc_r+0x8e>
  403b82:	f850 3c04 	ldr.w	r3, [r0, #-4]
  403b86:	f023 0303 	bic.w	r3, r3, #3
  403b8a:	441c      	add	r4, r3
  403b8c:	462e      	mov	r6, r5
  403b8e:	e6f9      	b.n	403984 <_realloc_r+0xc0>
  403b90:	68a9      	ldr	r1, [r5, #8]
  403b92:	f8ca 1010 	str.w	r1, [sl, #16]
  403b96:	68e9      	ldr	r1, [r5, #12]
  403b98:	f8ca 1014 	str.w	r1, [sl, #20]
  403b9c:	2a24      	cmp	r2, #36	; 0x24
  403b9e:	d00c      	beq.n	403bba <_realloc_r+0x2f6>
  403ba0:	3510      	adds	r5, #16
  403ba2:	f10a 0218 	add.w	r2, sl, #24
  403ba6:	e7b9      	b.n	403b1c <_realloc_r+0x258>
  403ba8:	692b      	ldr	r3, [r5, #16]
  403baa:	6103      	str	r3, [r0, #16]
  403bac:	696b      	ldr	r3, [r5, #20]
  403bae:	6143      	str	r3, [r0, #20]
  403bb0:	f105 0218 	add.w	r2, r5, #24
  403bb4:	f100 0318 	add.w	r3, r0, #24
  403bb8:	e6cb      	b.n	403952 <_realloc_r+0x8e>
  403bba:	692a      	ldr	r2, [r5, #16]
  403bbc:	f8ca 2018 	str.w	r2, [sl, #24]
  403bc0:	696a      	ldr	r2, [r5, #20]
  403bc2:	f8ca 201c 	str.w	r2, [sl, #28]
  403bc6:	3518      	adds	r5, #24
  403bc8:	f10a 0220 	add.w	r2, sl, #32
  403bcc:	e7a6      	b.n	403b1c <_realloc_r+0x258>
  403bce:	4632      	mov	r2, r6
  403bd0:	e77f      	b.n	403ad2 <_realloc_r+0x20e>
  403bd2:	4629      	mov	r1, r5
  403bd4:	4630      	mov	r0, r6
  403bd6:	9301      	str	r3, [sp, #4]
  403bd8:	f7ff fe04 	bl	4037e4 <memmove>
  403bdc:	9b01      	ldr	r3, [sp, #4]
  403bde:	e77e      	b.n	403ade <_realloc_r+0x21a>
  403be0:	68a9      	ldr	r1, [r5, #8]
  403be2:	f8ca 1010 	str.w	r1, [sl, #16]
  403be6:	68e9      	ldr	r1, [r5, #12]
  403be8:	f8ca 1014 	str.w	r1, [sl, #20]
  403bec:	2a24      	cmp	r2, #36	; 0x24
  403bee:	d003      	beq.n	403bf8 <_realloc_r+0x334>
  403bf0:	3510      	adds	r5, #16
  403bf2:	f10a 0218 	add.w	r2, sl, #24
  403bf6:	e76c      	b.n	403ad2 <_realloc_r+0x20e>
  403bf8:	692a      	ldr	r2, [r5, #16]
  403bfa:	f8ca 2018 	str.w	r2, [sl, #24]
  403bfe:	696a      	ldr	r2, [r5, #20]
  403c00:	f8ca 201c 	str.w	r2, [sl, #28]
  403c04:	3518      	adds	r5, #24
  403c06:	f10a 0220 	add.w	r2, sl, #32
  403c0a:	e762      	b.n	403ad2 <_realloc_r+0x20e>
  403c0c:	204005b0 	.word	0x204005b0

00403c10 <_sbrk_r>:
  403c10:	b538      	push	{r3, r4, r5, lr}
  403c12:	4c07      	ldr	r4, [pc, #28]	; (403c30 <_sbrk_r+0x20>)
  403c14:	2300      	movs	r3, #0
  403c16:	4605      	mov	r5, r0
  403c18:	4608      	mov	r0, r1
  403c1a:	6023      	str	r3, [r4, #0]
  403c1c:	f7fd fb6e 	bl	4012fc <_sbrk>
  403c20:	1c43      	adds	r3, r0, #1
  403c22:	d000      	beq.n	403c26 <_sbrk_r+0x16>
  403c24:	bd38      	pop	{r3, r4, r5, pc}
  403c26:	6823      	ldr	r3, [r4, #0]
  403c28:	2b00      	cmp	r3, #0
  403c2a:	d0fb      	beq.n	403c24 <_sbrk_r+0x14>
  403c2c:	602b      	str	r3, [r5, #0]
  403c2e:	bd38      	pop	{r3, r4, r5, pc}
  403c30:	20401f0c 	.word	0x20401f0c

00403c34 <__sread>:
  403c34:	b510      	push	{r4, lr}
  403c36:	460c      	mov	r4, r1
  403c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403c3c:	f000 fa66 	bl	40410c <_read_r>
  403c40:	2800      	cmp	r0, #0
  403c42:	db03      	blt.n	403c4c <__sread+0x18>
  403c44:	6d23      	ldr	r3, [r4, #80]	; 0x50
  403c46:	4403      	add	r3, r0
  403c48:	6523      	str	r3, [r4, #80]	; 0x50
  403c4a:	bd10      	pop	{r4, pc}
  403c4c:	89a3      	ldrh	r3, [r4, #12]
  403c4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403c52:	81a3      	strh	r3, [r4, #12]
  403c54:	bd10      	pop	{r4, pc}
  403c56:	bf00      	nop

00403c58 <__swrite>:
  403c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403c5c:	4616      	mov	r6, r2
  403c5e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  403c62:	461f      	mov	r7, r3
  403c64:	05d3      	lsls	r3, r2, #23
  403c66:	460c      	mov	r4, r1
  403c68:	4605      	mov	r5, r0
  403c6a:	d507      	bpl.n	403c7c <__swrite+0x24>
  403c6c:	2200      	movs	r2, #0
  403c6e:	2302      	movs	r3, #2
  403c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403c74:	f000 fa34 	bl	4040e0 <_lseek_r>
  403c78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403c7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403c80:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403c84:	81a2      	strh	r2, [r4, #12]
  403c86:	463b      	mov	r3, r7
  403c88:	4632      	mov	r2, r6
  403c8a:	4628      	mov	r0, r5
  403c8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403c90:	f000 b914 	b.w	403ebc <_write_r>

00403c94 <__sseek>:
  403c94:	b510      	push	{r4, lr}
  403c96:	460c      	mov	r4, r1
  403c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403c9c:	f000 fa20 	bl	4040e0 <_lseek_r>
  403ca0:	89a3      	ldrh	r3, [r4, #12]
  403ca2:	1c42      	adds	r2, r0, #1
  403ca4:	bf0e      	itee	eq
  403ca6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  403caa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  403cae:	6520      	strne	r0, [r4, #80]	; 0x50
  403cb0:	81a3      	strh	r3, [r4, #12]
  403cb2:	bd10      	pop	{r4, pc}

00403cb4 <__sclose>:
  403cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403cb8:	f000 b978 	b.w	403fac <_close_r>
  403cbc:	0000      	movs	r0, r0
	...

00403cc0 <strlen>:
  403cc0:	f890 f000 	pld	[r0]
  403cc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403cc8:	f020 0107 	bic.w	r1, r0, #7
  403ccc:	f06f 0c00 	mvn.w	ip, #0
  403cd0:	f010 0407 	ands.w	r4, r0, #7
  403cd4:	f891 f020 	pld	[r1, #32]
  403cd8:	f040 8049 	bne.w	403d6e <strlen+0xae>
  403cdc:	f04f 0400 	mov.w	r4, #0
  403ce0:	f06f 0007 	mvn.w	r0, #7
  403ce4:	e9d1 2300 	ldrd	r2, r3, [r1]
  403ce8:	f891 f040 	pld	[r1, #64]	; 0x40
  403cec:	f100 0008 	add.w	r0, r0, #8
  403cf0:	fa82 f24c 	uadd8	r2, r2, ip
  403cf4:	faa4 f28c 	sel	r2, r4, ip
  403cf8:	fa83 f34c 	uadd8	r3, r3, ip
  403cfc:	faa2 f38c 	sel	r3, r2, ip
  403d00:	bb4b      	cbnz	r3, 403d56 <strlen+0x96>
  403d02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403d06:	fa82 f24c 	uadd8	r2, r2, ip
  403d0a:	f100 0008 	add.w	r0, r0, #8
  403d0e:	faa4 f28c 	sel	r2, r4, ip
  403d12:	fa83 f34c 	uadd8	r3, r3, ip
  403d16:	faa2 f38c 	sel	r3, r2, ip
  403d1a:	b9e3      	cbnz	r3, 403d56 <strlen+0x96>
  403d1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  403d20:	fa82 f24c 	uadd8	r2, r2, ip
  403d24:	f100 0008 	add.w	r0, r0, #8
  403d28:	faa4 f28c 	sel	r2, r4, ip
  403d2c:	fa83 f34c 	uadd8	r3, r3, ip
  403d30:	faa2 f38c 	sel	r3, r2, ip
  403d34:	b97b      	cbnz	r3, 403d56 <strlen+0x96>
  403d36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  403d3a:	f101 0120 	add.w	r1, r1, #32
  403d3e:	fa82 f24c 	uadd8	r2, r2, ip
  403d42:	f100 0008 	add.w	r0, r0, #8
  403d46:	faa4 f28c 	sel	r2, r4, ip
  403d4a:	fa83 f34c 	uadd8	r3, r3, ip
  403d4e:	faa2 f38c 	sel	r3, r2, ip
  403d52:	2b00      	cmp	r3, #0
  403d54:	d0c6      	beq.n	403ce4 <strlen+0x24>
  403d56:	2a00      	cmp	r2, #0
  403d58:	bf04      	itt	eq
  403d5a:	3004      	addeq	r0, #4
  403d5c:	461a      	moveq	r2, r3
  403d5e:	ba12      	rev	r2, r2
  403d60:	fab2 f282 	clz	r2, r2
  403d64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403d68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  403d6c:	4770      	bx	lr
  403d6e:	e9d1 2300 	ldrd	r2, r3, [r1]
  403d72:	f004 0503 	and.w	r5, r4, #3
  403d76:	f1c4 0000 	rsb	r0, r4, #0
  403d7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  403d7e:	f014 0f04 	tst.w	r4, #4
  403d82:	f891 f040 	pld	[r1, #64]	; 0x40
  403d86:	fa0c f505 	lsl.w	r5, ip, r5
  403d8a:	ea62 0205 	orn	r2, r2, r5
  403d8e:	bf1c      	itt	ne
  403d90:	ea63 0305 	ornne	r3, r3, r5
  403d94:	4662      	movne	r2, ip
  403d96:	f04f 0400 	mov.w	r4, #0
  403d9a:	e7a9      	b.n	403cf0 <strlen+0x30>

00403d9c <__swbuf_r>:
  403d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403d9e:	460d      	mov	r5, r1
  403da0:	4614      	mov	r4, r2
  403da2:	4606      	mov	r6, r0
  403da4:	b110      	cbz	r0, 403dac <__swbuf_r+0x10>
  403da6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403da8:	2b00      	cmp	r3, #0
  403daa:	d04b      	beq.n	403e44 <__swbuf_r+0xa8>
  403dac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403db0:	69a3      	ldr	r3, [r4, #24]
  403db2:	60a3      	str	r3, [r4, #8]
  403db4:	b291      	uxth	r1, r2
  403db6:	0708      	lsls	r0, r1, #28
  403db8:	d539      	bpl.n	403e2e <__swbuf_r+0x92>
  403dba:	6923      	ldr	r3, [r4, #16]
  403dbc:	2b00      	cmp	r3, #0
  403dbe:	d036      	beq.n	403e2e <__swbuf_r+0x92>
  403dc0:	b2ed      	uxtb	r5, r5
  403dc2:	0489      	lsls	r1, r1, #18
  403dc4:	462f      	mov	r7, r5
  403dc6:	d515      	bpl.n	403df4 <__swbuf_r+0x58>
  403dc8:	6822      	ldr	r2, [r4, #0]
  403dca:	6961      	ldr	r1, [r4, #20]
  403dcc:	1ad3      	subs	r3, r2, r3
  403dce:	428b      	cmp	r3, r1
  403dd0:	da1c      	bge.n	403e0c <__swbuf_r+0x70>
  403dd2:	3301      	adds	r3, #1
  403dd4:	68a1      	ldr	r1, [r4, #8]
  403dd6:	1c50      	adds	r0, r2, #1
  403dd8:	3901      	subs	r1, #1
  403dda:	60a1      	str	r1, [r4, #8]
  403ddc:	6020      	str	r0, [r4, #0]
  403dde:	7015      	strb	r5, [r2, #0]
  403de0:	6962      	ldr	r2, [r4, #20]
  403de2:	429a      	cmp	r2, r3
  403de4:	d01a      	beq.n	403e1c <__swbuf_r+0x80>
  403de6:	89a3      	ldrh	r3, [r4, #12]
  403de8:	07db      	lsls	r3, r3, #31
  403dea:	d501      	bpl.n	403df0 <__swbuf_r+0x54>
  403dec:	2d0a      	cmp	r5, #10
  403dee:	d015      	beq.n	403e1c <__swbuf_r+0x80>
  403df0:	4638      	mov	r0, r7
  403df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403df4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403df6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403dfa:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  403dfe:	81a2      	strh	r2, [r4, #12]
  403e00:	6822      	ldr	r2, [r4, #0]
  403e02:	6661      	str	r1, [r4, #100]	; 0x64
  403e04:	6961      	ldr	r1, [r4, #20]
  403e06:	1ad3      	subs	r3, r2, r3
  403e08:	428b      	cmp	r3, r1
  403e0a:	dbe2      	blt.n	403dd2 <__swbuf_r+0x36>
  403e0c:	4621      	mov	r1, r4
  403e0e:	4630      	mov	r0, r6
  403e10:	f7fe fca0 	bl	402754 <_fflush_r>
  403e14:	b940      	cbnz	r0, 403e28 <__swbuf_r+0x8c>
  403e16:	6822      	ldr	r2, [r4, #0]
  403e18:	2301      	movs	r3, #1
  403e1a:	e7db      	b.n	403dd4 <__swbuf_r+0x38>
  403e1c:	4621      	mov	r1, r4
  403e1e:	4630      	mov	r0, r6
  403e20:	f7fe fc98 	bl	402754 <_fflush_r>
  403e24:	2800      	cmp	r0, #0
  403e26:	d0e3      	beq.n	403df0 <__swbuf_r+0x54>
  403e28:	f04f 37ff 	mov.w	r7, #4294967295
  403e2c:	e7e0      	b.n	403df0 <__swbuf_r+0x54>
  403e2e:	4621      	mov	r1, r4
  403e30:	4630      	mov	r0, r6
  403e32:	f7fe fb7b 	bl	40252c <__swsetup_r>
  403e36:	2800      	cmp	r0, #0
  403e38:	d1f6      	bne.n	403e28 <__swbuf_r+0x8c>
  403e3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403e3e:	6923      	ldr	r3, [r4, #16]
  403e40:	b291      	uxth	r1, r2
  403e42:	e7bd      	b.n	403dc0 <__swbuf_r+0x24>
  403e44:	f7fe fcde 	bl	402804 <__sinit>
  403e48:	e7b0      	b.n	403dac <__swbuf_r+0x10>
  403e4a:	bf00      	nop

00403e4c <_wcrtomb_r>:
  403e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  403e4e:	4606      	mov	r6, r0
  403e50:	b085      	sub	sp, #20
  403e52:	461f      	mov	r7, r3
  403e54:	b189      	cbz	r1, 403e7a <_wcrtomb_r+0x2e>
  403e56:	4c10      	ldr	r4, [pc, #64]	; (403e98 <_wcrtomb_r+0x4c>)
  403e58:	4d10      	ldr	r5, [pc, #64]	; (403e9c <_wcrtomb_r+0x50>)
  403e5a:	6824      	ldr	r4, [r4, #0]
  403e5c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  403e5e:	2c00      	cmp	r4, #0
  403e60:	bf08      	it	eq
  403e62:	462c      	moveq	r4, r5
  403e64:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  403e68:	47a0      	blx	r4
  403e6a:	1c43      	adds	r3, r0, #1
  403e6c:	d103      	bne.n	403e76 <_wcrtomb_r+0x2a>
  403e6e:	2200      	movs	r2, #0
  403e70:	238a      	movs	r3, #138	; 0x8a
  403e72:	603a      	str	r2, [r7, #0]
  403e74:	6033      	str	r3, [r6, #0]
  403e76:	b005      	add	sp, #20
  403e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403e7a:	460c      	mov	r4, r1
  403e7c:	4906      	ldr	r1, [pc, #24]	; (403e98 <_wcrtomb_r+0x4c>)
  403e7e:	4a07      	ldr	r2, [pc, #28]	; (403e9c <_wcrtomb_r+0x50>)
  403e80:	6809      	ldr	r1, [r1, #0]
  403e82:	6b49      	ldr	r1, [r1, #52]	; 0x34
  403e84:	2900      	cmp	r1, #0
  403e86:	bf08      	it	eq
  403e88:	4611      	moveq	r1, r2
  403e8a:	4622      	mov	r2, r4
  403e8c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  403e90:	a901      	add	r1, sp, #4
  403e92:	47a0      	blx	r4
  403e94:	e7e9      	b.n	403e6a <_wcrtomb_r+0x1e>
  403e96:	bf00      	nop
  403e98:	20400010 	.word	0x20400010
  403e9c:	20400444 	.word	0x20400444

00403ea0 <__ascii_wctomb>:
  403ea0:	b121      	cbz	r1, 403eac <__ascii_wctomb+0xc>
  403ea2:	2aff      	cmp	r2, #255	; 0xff
  403ea4:	d804      	bhi.n	403eb0 <__ascii_wctomb+0x10>
  403ea6:	700a      	strb	r2, [r1, #0]
  403ea8:	2001      	movs	r0, #1
  403eaa:	4770      	bx	lr
  403eac:	4608      	mov	r0, r1
  403eae:	4770      	bx	lr
  403eb0:	238a      	movs	r3, #138	; 0x8a
  403eb2:	6003      	str	r3, [r0, #0]
  403eb4:	f04f 30ff 	mov.w	r0, #4294967295
  403eb8:	4770      	bx	lr
  403eba:	bf00      	nop

00403ebc <_write_r>:
  403ebc:	b570      	push	{r4, r5, r6, lr}
  403ebe:	460d      	mov	r5, r1
  403ec0:	4c08      	ldr	r4, [pc, #32]	; (403ee4 <_write_r+0x28>)
  403ec2:	4611      	mov	r1, r2
  403ec4:	4606      	mov	r6, r0
  403ec6:	461a      	mov	r2, r3
  403ec8:	4628      	mov	r0, r5
  403eca:	2300      	movs	r3, #0
  403ecc:	6023      	str	r3, [r4, #0]
  403ece:	f7fc fb2b 	bl	400528 <_write>
  403ed2:	1c43      	adds	r3, r0, #1
  403ed4:	d000      	beq.n	403ed8 <_write_r+0x1c>
  403ed6:	bd70      	pop	{r4, r5, r6, pc}
  403ed8:	6823      	ldr	r3, [r4, #0]
  403eda:	2b00      	cmp	r3, #0
  403edc:	d0fb      	beq.n	403ed6 <_write_r+0x1a>
  403ede:	6033      	str	r3, [r6, #0]
  403ee0:	bd70      	pop	{r4, r5, r6, pc}
  403ee2:	bf00      	nop
  403ee4:	20401f0c 	.word	0x20401f0c

00403ee8 <__register_exitproc>:
  403ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403eec:	4d2c      	ldr	r5, [pc, #176]	; (403fa0 <__register_exitproc+0xb8>)
  403eee:	4606      	mov	r6, r0
  403ef0:	6828      	ldr	r0, [r5, #0]
  403ef2:	4698      	mov	r8, r3
  403ef4:	460f      	mov	r7, r1
  403ef6:	4691      	mov	r9, r2
  403ef8:	f7ff f844 	bl	402f84 <__retarget_lock_acquire_recursive>
  403efc:	4b29      	ldr	r3, [pc, #164]	; (403fa4 <__register_exitproc+0xbc>)
  403efe:	681c      	ldr	r4, [r3, #0]
  403f00:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  403f04:	2b00      	cmp	r3, #0
  403f06:	d03e      	beq.n	403f86 <__register_exitproc+0x9e>
  403f08:	685a      	ldr	r2, [r3, #4]
  403f0a:	2a1f      	cmp	r2, #31
  403f0c:	dc1c      	bgt.n	403f48 <__register_exitproc+0x60>
  403f0e:	f102 0e01 	add.w	lr, r2, #1
  403f12:	b176      	cbz	r6, 403f32 <__register_exitproc+0x4a>
  403f14:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  403f18:	2401      	movs	r4, #1
  403f1a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  403f1e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  403f22:	4094      	lsls	r4, r2
  403f24:	4320      	orrs	r0, r4
  403f26:	2e02      	cmp	r6, #2
  403f28:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  403f2c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  403f30:	d023      	beq.n	403f7a <__register_exitproc+0x92>
  403f32:	3202      	adds	r2, #2
  403f34:	f8c3 e004 	str.w	lr, [r3, #4]
  403f38:	6828      	ldr	r0, [r5, #0]
  403f3a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  403f3e:	f7ff f823 	bl	402f88 <__retarget_lock_release_recursive>
  403f42:	2000      	movs	r0, #0
  403f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403f48:	4b17      	ldr	r3, [pc, #92]	; (403fa8 <__register_exitproc+0xc0>)
  403f4a:	b30b      	cbz	r3, 403f90 <__register_exitproc+0xa8>
  403f4c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403f50:	f3af 8000 	nop.w
  403f54:	4603      	mov	r3, r0
  403f56:	b1d8      	cbz	r0, 403f90 <__register_exitproc+0xa8>
  403f58:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  403f5c:	6002      	str	r2, [r0, #0]
  403f5e:	2100      	movs	r1, #0
  403f60:	6041      	str	r1, [r0, #4]
  403f62:	460a      	mov	r2, r1
  403f64:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  403f68:	f04f 0e01 	mov.w	lr, #1
  403f6c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  403f70:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  403f74:	2e00      	cmp	r6, #0
  403f76:	d0dc      	beq.n	403f32 <__register_exitproc+0x4a>
  403f78:	e7cc      	b.n	403f14 <__register_exitproc+0x2c>
  403f7a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  403f7e:	430c      	orrs	r4, r1
  403f80:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  403f84:	e7d5      	b.n	403f32 <__register_exitproc+0x4a>
  403f86:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  403f8a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  403f8e:	e7bb      	b.n	403f08 <__register_exitproc+0x20>
  403f90:	6828      	ldr	r0, [r5, #0]
  403f92:	f7fe fff9 	bl	402f88 <__retarget_lock_release_recursive>
  403f96:	f04f 30ff 	mov.w	r0, #4294967295
  403f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403f9e:	bf00      	nop
  403fa0:	20400440 	.word	0x20400440
  403fa4:	00404480 	.word	0x00404480
  403fa8:	00000000 	.word	0x00000000

00403fac <_close_r>:
  403fac:	b538      	push	{r3, r4, r5, lr}
  403fae:	4c07      	ldr	r4, [pc, #28]	; (403fcc <_close_r+0x20>)
  403fb0:	2300      	movs	r3, #0
  403fb2:	4605      	mov	r5, r0
  403fb4:	4608      	mov	r0, r1
  403fb6:	6023      	str	r3, [r4, #0]
  403fb8:	f7fd f9bc 	bl	401334 <_close>
  403fbc:	1c43      	adds	r3, r0, #1
  403fbe:	d000      	beq.n	403fc2 <_close_r+0x16>
  403fc0:	bd38      	pop	{r3, r4, r5, pc}
  403fc2:	6823      	ldr	r3, [r4, #0]
  403fc4:	2b00      	cmp	r3, #0
  403fc6:	d0fb      	beq.n	403fc0 <_close_r+0x14>
  403fc8:	602b      	str	r3, [r5, #0]
  403fca:	bd38      	pop	{r3, r4, r5, pc}
  403fcc:	20401f0c 	.word	0x20401f0c

00403fd0 <_fclose_r>:
  403fd0:	b570      	push	{r4, r5, r6, lr}
  403fd2:	b159      	cbz	r1, 403fec <_fclose_r+0x1c>
  403fd4:	4605      	mov	r5, r0
  403fd6:	460c      	mov	r4, r1
  403fd8:	b110      	cbz	r0, 403fe0 <_fclose_r+0x10>
  403fda:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403fdc:	2b00      	cmp	r3, #0
  403fde:	d03c      	beq.n	40405a <_fclose_r+0x8a>
  403fe0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403fe2:	07d8      	lsls	r0, r3, #31
  403fe4:	d505      	bpl.n	403ff2 <_fclose_r+0x22>
  403fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403fea:	b92b      	cbnz	r3, 403ff8 <_fclose_r+0x28>
  403fec:	2600      	movs	r6, #0
  403fee:	4630      	mov	r0, r6
  403ff0:	bd70      	pop	{r4, r5, r6, pc}
  403ff2:	89a3      	ldrh	r3, [r4, #12]
  403ff4:	0599      	lsls	r1, r3, #22
  403ff6:	d53c      	bpl.n	404072 <_fclose_r+0xa2>
  403ff8:	4621      	mov	r1, r4
  403ffa:	4628      	mov	r0, r5
  403ffc:	f7fe fb0a 	bl	402614 <__sflush_r>
  404000:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  404002:	4606      	mov	r6, r0
  404004:	b133      	cbz	r3, 404014 <_fclose_r+0x44>
  404006:	69e1      	ldr	r1, [r4, #28]
  404008:	4628      	mov	r0, r5
  40400a:	4798      	blx	r3
  40400c:	2800      	cmp	r0, #0
  40400e:	bfb8      	it	lt
  404010:	f04f 36ff 	movlt.w	r6, #4294967295
  404014:	89a3      	ldrh	r3, [r4, #12]
  404016:	061a      	lsls	r2, r3, #24
  404018:	d422      	bmi.n	404060 <_fclose_r+0x90>
  40401a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40401c:	b141      	cbz	r1, 404030 <_fclose_r+0x60>
  40401e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404022:	4299      	cmp	r1, r3
  404024:	d002      	beq.n	40402c <_fclose_r+0x5c>
  404026:	4628      	mov	r0, r5
  404028:	f7fe fd12 	bl	402a50 <_free_r>
  40402c:	2300      	movs	r3, #0
  40402e:	6323      	str	r3, [r4, #48]	; 0x30
  404030:	6c61      	ldr	r1, [r4, #68]	; 0x44
  404032:	b121      	cbz	r1, 40403e <_fclose_r+0x6e>
  404034:	4628      	mov	r0, r5
  404036:	f7fe fd0b 	bl	402a50 <_free_r>
  40403a:	2300      	movs	r3, #0
  40403c:	6463      	str	r3, [r4, #68]	; 0x44
  40403e:	f7fe fc0d 	bl	40285c <__sfp_lock_acquire>
  404042:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404044:	2200      	movs	r2, #0
  404046:	07db      	lsls	r3, r3, #31
  404048:	81a2      	strh	r2, [r4, #12]
  40404a:	d50e      	bpl.n	40406a <_fclose_r+0x9a>
  40404c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40404e:	f7fe ff97 	bl	402f80 <__retarget_lock_close_recursive>
  404052:	f7fe fc09 	bl	402868 <__sfp_lock_release>
  404056:	4630      	mov	r0, r6
  404058:	bd70      	pop	{r4, r5, r6, pc}
  40405a:	f7fe fbd3 	bl	402804 <__sinit>
  40405e:	e7bf      	b.n	403fe0 <_fclose_r+0x10>
  404060:	6921      	ldr	r1, [r4, #16]
  404062:	4628      	mov	r0, r5
  404064:	f7fe fcf4 	bl	402a50 <_free_r>
  404068:	e7d7      	b.n	40401a <_fclose_r+0x4a>
  40406a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40406c:	f7fe ff8c 	bl	402f88 <__retarget_lock_release_recursive>
  404070:	e7ec      	b.n	40404c <_fclose_r+0x7c>
  404072:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404074:	f7fe ff86 	bl	402f84 <__retarget_lock_acquire_recursive>
  404078:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40407c:	2b00      	cmp	r3, #0
  40407e:	d1bb      	bne.n	403ff8 <_fclose_r+0x28>
  404080:	6e66      	ldr	r6, [r4, #100]	; 0x64
  404082:	f016 0601 	ands.w	r6, r6, #1
  404086:	d1b1      	bne.n	403fec <_fclose_r+0x1c>
  404088:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40408a:	f7fe ff7d 	bl	402f88 <__retarget_lock_release_recursive>
  40408e:	4630      	mov	r0, r6
  404090:	bd70      	pop	{r4, r5, r6, pc}
  404092:	bf00      	nop

00404094 <_fstat_r>:
  404094:	b538      	push	{r3, r4, r5, lr}
  404096:	460b      	mov	r3, r1
  404098:	4c07      	ldr	r4, [pc, #28]	; (4040b8 <_fstat_r+0x24>)
  40409a:	4605      	mov	r5, r0
  40409c:	4611      	mov	r1, r2
  40409e:	4618      	mov	r0, r3
  4040a0:	2300      	movs	r3, #0
  4040a2:	6023      	str	r3, [r4, #0]
  4040a4:	f7fd f949 	bl	40133a <_fstat>
  4040a8:	1c43      	adds	r3, r0, #1
  4040aa:	d000      	beq.n	4040ae <_fstat_r+0x1a>
  4040ac:	bd38      	pop	{r3, r4, r5, pc}
  4040ae:	6823      	ldr	r3, [r4, #0]
  4040b0:	2b00      	cmp	r3, #0
  4040b2:	d0fb      	beq.n	4040ac <_fstat_r+0x18>
  4040b4:	602b      	str	r3, [r5, #0]
  4040b6:	bd38      	pop	{r3, r4, r5, pc}
  4040b8:	20401f0c 	.word	0x20401f0c

004040bc <_isatty_r>:
  4040bc:	b538      	push	{r3, r4, r5, lr}
  4040be:	4c07      	ldr	r4, [pc, #28]	; (4040dc <_isatty_r+0x20>)
  4040c0:	2300      	movs	r3, #0
  4040c2:	4605      	mov	r5, r0
  4040c4:	4608      	mov	r0, r1
  4040c6:	6023      	str	r3, [r4, #0]
  4040c8:	f7fd f93c 	bl	401344 <_isatty>
  4040cc:	1c43      	adds	r3, r0, #1
  4040ce:	d000      	beq.n	4040d2 <_isatty_r+0x16>
  4040d0:	bd38      	pop	{r3, r4, r5, pc}
  4040d2:	6823      	ldr	r3, [r4, #0]
  4040d4:	2b00      	cmp	r3, #0
  4040d6:	d0fb      	beq.n	4040d0 <_isatty_r+0x14>
  4040d8:	602b      	str	r3, [r5, #0]
  4040da:	bd38      	pop	{r3, r4, r5, pc}
  4040dc:	20401f0c 	.word	0x20401f0c

004040e0 <_lseek_r>:
  4040e0:	b570      	push	{r4, r5, r6, lr}
  4040e2:	460d      	mov	r5, r1
  4040e4:	4c08      	ldr	r4, [pc, #32]	; (404108 <_lseek_r+0x28>)
  4040e6:	4611      	mov	r1, r2
  4040e8:	4606      	mov	r6, r0
  4040ea:	461a      	mov	r2, r3
  4040ec:	4628      	mov	r0, r5
  4040ee:	2300      	movs	r3, #0
  4040f0:	6023      	str	r3, [r4, #0]
  4040f2:	f7fd f929 	bl	401348 <_lseek>
  4040f6:	1c43      	adds	r3, r0, #1
  4040f8:	d000      	beq.n	4040fc <_lseek_r+0x1c>
  4040fa:	bd70      	pop	{r4, r5, r6, pc}
  4040fc:	6823      	ldr	r3, [r4, #0]
  4040fe:	2b00      	cmp	r3, #0
  404100:	d0fb      	beq.n	4040fa <_lseek_r+0x1a>
  404102:	6033      	str	r3, [r6, #0]
  404104:	bd70      	pop	{r4, r5, r6, pc}
  404106:	bf00      	nop
  404108:	20401f0c 	.word	0x20401f0c

0040410c <_read_r>:
  40410c:	b570      	push	{r4, r5, r6, lr}
  40410e:	460d      	mov	r5, r1
  404110:	4c08      	ldr	r4, [pc, #32]	; (404134 <_read_r+0x28>)
  404112:	4611      	mov	r1, r2
  404114:	4606      	mov	r6, r0
  404116:	461a      	mov	r2, r3
  404118:	4628      	mov	r0, r5
  40411a:	2300      	movs	r3, #0
  40411c:	6023      	str	r3, [r4, #0]
  40411e:	f7fc f9e5 	bl	4004ec <_read>
  404122:	1c43      	adds	r3, r0, #1
  404124:	d000      	beq.n	404128 <_read_r+0x1c>
  404126:	bd70      	pop	{r4, r5, r6, pc}
  404128:	6823      	ldr	r3, [r4, #0]
  40412a:	2b00      	cmp	r3, #0
  40412c:	d0fb      	beq.n	404126 <_read_r+0x1a>
  40412e:	6033      	str	r3, [r6, #0]
  404130:	bd70      	pop	{r4, r5, r6, pc}
  404132:	bf00      	nop
  404134:	20401f0c 	.word	0x20401f0c

00404138 <__aeabi_uldivmod>:
  404138:	b953      	cbnz	r3, 404150 <__aeabi_uldivmod+0x18>
  40413a:	b94a      	cbnz	r2, 404150 <__aeabi_uldivmod+0x18>
  40413c:	2900      	cmp	r1, #0
  40413e:	bf08      	it	eq
  404140:	2800      	cmpeq	r0, #0
  404142:	bf1c      	itt	ne
  404144:	f04f 31ff 	movne.w	r1, #4294967295
  404148:	f04f 30ff 	movne.w	r0, #4294967295
  40414c:	f000 b97a 	b.w	404444 <__aeabi_idiv0>
  404150:	f1ad 0c08 	sub.w	ip, sp, #8
  404154:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  404158:	f000 f806 	bl	404168 <__udivmoddi4>
  40415c:	f8dd e004 	ldr.w	lr, [sp, #4]
  404160:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404164:	b004      	add	sp, #16
  404166:	4770      	bx	lr

00404168 <__udivmoddi4>:
  404168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40416c:	468c      	mov	ip, r1
  40416e:	460d      	mov	r5, r1
  404170:	4604      	mov	r4, r0
  404172:	9e08      	ldr	r6, [sp, #32]
  404174:	2b00      	cmp	r3, #0
  404176:	d151      	bne.n	40421c <__udivmoddi4+0xb4>
  404178:	428a      	cmp	r2, r1
  40417a:	4617      	mov	r7, r2
  40417c:	d96d      	bls.n	40425a <__udivmoddi4+0xf2>
  40417e:	fab2 fe82 	clz	lr, r2
  404182:	f1be 0f00 	cmp.w	lr, #0
  404186:	d00b      	beq.n	4041a0 <__udivmoddi4+0x38>
  404188:	f1ce 0c20 	rsb	ip, lr, #32
  40418c:	fa01 f50e 	lsl.w	r5, r1, lr
  404190:	fa20 fc0c 	lsr.w	ip, r0, ip
  404194:	fa02 f70e 	lsl.w	r7, r2, lr
  404198:	ea4c 0c05 	orr.w	ip, ip, r5
  40419c:	fa00 f40e 	lsl.w	r4, r0, lr
  4041a0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4041a4:	0c25      	lsrs	r5, r4, #16
  4041a6:	fbbc f8fa 	udiv	r8, ip, sl
  4041aa:	fa1f f987 	uxth.w	r9, r7
  4041ae:	fb0a cc18 	mls	ip, sl, r8, ip
  4041b2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4041b6:	fb08 f309 	mul.w	r3, r8, r9
  4041ba:	42ab      	cmp	r3, r5
  4041bc:	d90a      	bls.n	4041d4 <__udivmoddi4+0x6c>
  4041be:	19ed      	adds	r5, r5, r7
  4041c0:	f108 32ff 	add.w	r2, r8, #4294967295
  4041c4:	f080 8123 	bcs.w	40440e <__udivmoddi4+0x2a6>
  4041c8:	42ab      	cmp	r3, r5
  4041ca:	f240 8120 	bls.w	40440e <__udivmoddi4+0x2a6>
  4041ce:	f1a8 0802 	sub.w	r8, r8, #2
  4041d2:	443d      	add	r5, r7
  4041d4:	1aed      	subs	r5, r5, r3
  4041d6:	b2a4      	uxth	r4, r4
  4041d8:	fbb5 f0fa 	udiv	r0, r5, sl
  4041dc:	fb0a 5510 	mls	r5, sl, r0, r5
  4041e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4041e4:	fb00 f909 	mul.w	r9, r0, r9
  4041e8:	45a1      	cmp	r9, r4
  4041ea:	d909      	bls.n	404200 <__udivmoddi4+0x98>
  4041ec:	19e4      	adds	r4, r4, r7
  4041ee:	f100 33ff 	add.w	r3, r0, #4294967295
  4041f2:	f080 810a 	bcs.w	40440a <__udivmoddi4+0x2a2>
  4041f6:	45a1      	cmp	r9, r4
  4041f8:	f240 8107 	bls.w	40440a <__udivmoddi4+0x2a2>
  4041fc:	3802      	subs	r0, #2
  4041fe:	443c      	add	r4, r7
  404200:	eba4 0409 	sub.w	r4, r4, r9
  404204:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  404208:	2100      	movs	r1, #0
  40420a:	2e00      	cmp	r6, #0
  40420c:	d061      	beq.n	4042d2 <__udivmoddi4+0x16a>
  40420e:	fa24 f40e 	lsr.w	r4, r4, lr
  404212:	2300      	movs	r3, #0
  404214:	6034      	str	r4, [r6, #0]
  404216:	6073      	str	r3, [r6, #4]
  404218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40421c:	428b      	cmp	r3, r1
  40421e:	d907      	bls.n	404230 <__udivmoddi4+0xc8>
  404220:	2e00      	cmp	r6, #0
  404222:	d054      	beq.n	4042ce <__udivmoddi4+0x166>
  404224:	2100      	movs	r1, #0
  404226:	e886 0021 	stmia.w	r6, {r0, r5}
  40422a:	4608      	mov	r0, r1
  40422c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404230:	fab3 f183 	clz	r1, r3
  404234:	2900      	cmp	r1, #0
  404236:	f040 808e 	bne.w	404356 <__udivmoddi4+0x1ee>
  40423a:	42ab      	cmp	r3, r5
  40423c:	d302      	bcc.n	404244 <__udivmoddi4+0xdc>
  40423e:	4282      	cmp	r2, r0
  404240:	f200 80fa 	bhi.w	404438 <__udivmoddi4+0x2d0>
  404244:	1a84      	subs	r4, r0, r2
  404246:	eb65 0503 	sbc.w	r5, r5, r3
  40424a:	2001      	movs	r0, #1
  40424c:	46ac      	mov	ip, r5
  40424e:	2e00      	cmp	r6, #0
  404250:	d03f      	beq.n	4042d2 <__udivmoddi4+0x16a>
  404252:	e886 1010 	stmia.w	r6, {r4, ip}
  404256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40425a:	b912      	cbnz	r2, 404262 <__udivmoddi4+0xfa>
  40425c:	2701      	movs	r7, #1
  40425e:	fbb7 f7f2 	udiv	r7, r7, r2
  404262:	fab7 fe87 	clz	lr, r7
  404266:	f1be 0f00 	cmp.w	lr, #0
  40426a:	d134      	bne.n	4042d6 <__udivmoddi4+0x16e>
  40426c:	1beb      	subs	r3, r5, r7
  40426e:	0c3a      	lsrs	r2, r7, #16
  404270:	fa1f fc87 	uxth.w	ip, r7
  404274:	2101      	movs	r1, #1
  404276:	fbb3 f8f2 	udiv	r8, r3, r2
  40427a:	0c25      	lsrs	r5, r4, #16
  40427c:	fb02 3318 	mls	r3, r2, r8, r3
  404280:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  404284:	fb0c f308 	mul.w	r3, ip, r8
  404288:	42ab      	cmp	r3, r5
  40428a:	d907      	bls.n	40429c <__udivmoddi4+0x134>
  40428c:	19ed      	adds	r5, r5, r7
  40428e:	f108 30ff 	add.w	r0, r8, #4294967295
  404292:	d202      	bcs.n	40429a <__udivmoddi4+0x132>
  404294:	42ab      	cmp	r3, r5
  404296:	f200 80d1 	bhi.w	40443c <__udivmoddi4+0x2d4>
  40429a:	4680      	mov	r8, r0
  40429c:	1aed      	subs	r5, r5, r3
  40429e:	b2a3      	uxth	r3, r4
  4042a0:	fbb5 f0f2 	udiv	r0, r5, r2
  4042a4:	fb02 5510 	mls	r5, r2, r0, r5
  4042a8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4042ac:	fb0c fc00 	mul.w	ip, ip, r0
  4042b0:	45a4      	cmp	ip, r4
  4042b2:	d907      	bls.n	4042c4 <__udivmoddi4+0x15c>
  4042b4:	19e4      	adds	r4, r4, r7
  4042b6:	f100 33ff 	add.w	r3, r0, #4294967295
  4042ba:	d202      	bcs.n	4042c2 <__udivmoddi4+0x15a>
  4042bc:	45a4      	cmp	ip, r4
  4042be:	f200 80b8 	bhi.w	404432 <__udivmoddi4+0x2ca>
  4042c2:	4618      	mov	r0, r3
  4042c4:	eba4 040c 	sub.w	r4, r4, ip
  4042c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4042cc:	e79d      	b.n	40420a <__udivmoddi4+0xa2>
  4042ce:	4631      	mov	r1, r6
  4042d0:	4630      	mov	r0, r6
  4042d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4042d6:	f1ce 0420 	rsb	r4, lr, #32
  4042da:	fa05 f30e 	lsl.w	r3, r5, lr
  4042de:	fa07 f70e 	lsl.w	r7, r7, lr
  4042e2:	fa20 f804 	lsr.w	r8, r0, r4
  4042e6:	0c3a      	lsrs	r2, r7, #16
  4042e8:	fa25 f404 	lsr.w	r4, r5, r4
  4042ec:	ea48 0803 	orr.w	r8, r8, r3
  4042f0:	fbb4 f1f2 	udiv	r1, r4, r2
  4042f4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4042f8:	fb02 4411 	mls	r4, r2, r1, r4
  4042fc:	fa1f fc87 	uxth.w	ip, r7
  404300:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  404304:	fb01 f30c 	mul.w	r3, r1, ip
  404308:	42ab      	cmp	r3, r5
  40430a:	fa00 f40e 	lsl.w	r4, r0, lr
  40430e:	d909      	bls.n	404324 <__udivmoddi4+0x1bc>
  404310:	19ed      	adds	r5, r5, r7
  404312:	f101 30ff 	add.w	r0, r1, #4294967295
  404316:	f080 808a 	bcs.w	40442e <__udivmoddi4+0x2c6>
  40431a:	42ab      	cmp	r3, r5
  40431c:	f240 8087 	bls.w	40442e <__udivmoddi4+0x2c6>
  404320:	3902      	subs	r1, #2
  404322:	443d      	add	r5, r7
  404324:	1aeb      	subs	r3, r5, r3
  404326:	fa1f f588 	uxth.w	r5, r8
  40432a:	fbb3 f0f2 	udiv	r0, r3, r2
  40432e:	fb02 3310 	mls	r3, r2, r0, r3
  404332:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  404336:	fb00 f30c 	mul.w	r3, r0, ip
  40433a:	42ab      	cmp	r3, r5
  40433c:	d907      	bls.n	40434e <__udivmoddi4+0x1e6>
  40433e:	19ed      	adds	r5, r5, r7
  404340:	f100 38ff 	add.w	r8, r0, #4294967295
  404344:	d26f      	bcs.n	404426 <__udivmoddi4+0x2be>
  404346:	42ab      	cmp	r3, r5
  404348:	d96d      	bls.n	404426 <__udivmoddi4+0x2be>
  40434a:	3802      	subs	r0, #2
  40434c:	443d      	add	r5, r7
  40434e:	1aeb      	subs	r3, r5, r3
  404350:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  404354:	e78f      	b.n	404276 <__udivmoddi4+0x10e>
  404356:	f1c1 0720 	rsb	r7, r1, #32
  40435a:	fa22 f807 	lsr.w	r8, r2, r7
  40435e:	408b      	lsls	r3, r1
  404360:	fa05 f401 	lsl.w	r4, r5, r1
  404364:	ea48 0303 	orr.w	r3, r8, r3
  404368:	fa20 fe07 	lsr.w	lr, r0, r7
  40436c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  404370:	40fd      	lsrs	r5, r7
  404372:	ea4e 0e04 	orr.w	lr, lr, r4
  404376:	fbb5 f9fc 	udiv	r9, r5, ip
  40437a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40437e:	fb0c 5519 	mls	r5, ip, r9, r5
  404382:	fa1f f883 	uxth.w	r8, r3
  404386:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40438a:	fb09 f408 	mul.w	r4, r9, r8
  40438e:	42ac      	cmp	r4, r5
  404390:	fa02 f201 	lsl.w	r2, r2, r1
  404394:	fa00 fa01 	lsl.w	sl, r0, r1
  404398:	d908      	bls.n	4043ac <__udivmoddi4+0x244>
  40439a:	18ed      	adds	r5, r5, r3
  40439c:	f109 30ff 	add.w	r0, r9, #4294967295
  4043a0:	d243      	bcs.n	40442a <__udivmoddi4+0x2c2>
  4043a2:	42ac      	cmp	r4, r5
  4043a4:	d941      	bls.n	40442a <__udivmoddi4+0x2c2>
  4043a6:	f1a9 0902 	sub.w	r9, r9, #2
  4043aa:	441d      	add	r5, r3
  4043ac:	1b2d      	subs	r5, r5, r4
  4043ae:	fa1f fe8e 	uxth.w	lr, lr
  4043b2:	fbb5 f0fc 	udiv	r0, r5, ip
  4043b6:	fb0c 5510 	mls	r5, ip, r0, r5
  4043ba:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4043be:	fb00 f808 	mul.w	r8, r0, r8
  4043c2:	45a0      	cmp	r8, r4
  4043c4:	d907      	bls.n	4043d6 <__udivmoddi4+0x26e>
  4043c6:	18e4      	adds	r4, r4, r3
  4043c8:	f100 35ff 	add.w	r5, r0, #4294967295
  4043cc:	d229      	bcs.n	404422 <__udivmoddi4+0x2ba>
  4043ce:	45a0      	cmp	r8, r4
  4043d0:	d927      	bls.n	404422 <__udivmoddi4+0x2ba>
  4043d2:	3802      	subs	r0, #2
  4043d4:	441c      	add	r4, r3
  4043d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4043da:	eba4 0408 	sub.w	r4, r4, r8
  4043de:	fba0 8902 	umull	r8, r9, r0, r2
  4043e2:	454c      	cmp	r4, r9
  4043e4:	46c6      	mov	lr, r8
  4043e6:	464d      	mov	r5, r9
  4043e8:	d315      	bcc.n	404416 <__udivmoddi4+0x2ae>
  4043ea:	d012      	beq.n	404412 <__udivmoddi4+0x2aa>
  4043ec:	b156      	cbz	r6, 404404 <__udivmoddi4+0x29c>
  4043ee:	ebba 030e 	subs.w	r3, sl, lr
  4043f2:	eb64 0405 	sbc.w	r4, r4, r5
  4043f6:	fa04 f707 	lsl.w	r7, r4, r7
  4043fa:	40cb      	lsrs	r3, r1
  4043fc:	431f      	orrs	r7, r3
  4043fe:	40cc      	lsrs	r4, r1
  404400:	6037      	str	r7, [r6, #0]
  404402:	6074      	str	r4, [r6, #4]
  404404:	2100      	movs	r1, #0
  404406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40440a:	4618      	mov	r0, r3
  40440c:	e6f8      	b.n	404200 <__udivmoddi4+0x98>
  40440e:	4690      	mov	r8, r2
  404410:	e6e0      	b.n	4041d4 <__udivmoddi4+0x6c>
  404412:	45c2      	cmp	sl, r8
  404414:	d2ea      	bcs.n	4043ec <__udivmoddi4+0x284>
  404416:	ebb8 0e02 	subs.w	lr, r8, r2
  40441a:	eb69 0503 	sbc.w	r5, r9, r3
  40441e:	3801      	subs	r0, #1
  404420:	e7e4      	b.n	4043ec <__udivmoddi4+0x284>
  404422:	4628      	mov	r0, r5
  404424:	e7d7      	b.n	4043d6 <__udivmoddi4+0x26e>
  404426:	4640      	mov	r0, r8
  404428:	e791      	b.n	40434e <__udivmoddi4+0x1e6>
  40442a:	4681      	mov	r9, r0
  40442c:	e7be      	b.n	4043ac <__udivmoddi4+0x244>
  40442e:	4601      	mov	r1, r0
  404430:	e778      	b.n	404324 <__udivmoddi4+0x1bc>
  404432:	3802      	subs	r0, #2
  404434:	443c      	add	r4, r7
  404436:	e745      	b.n	4042c4 <__udivmoddi4+0x15c>
  404438:	4608      	mov	r0, r1
  40443a:	e708      	b.n	40424e <__udivmoddi4+0xe6>
  40443c:	f1a8 0802 	sub.w	r8, r8, #2
  404440:	443d      	add	r5, r7
  404442:	e72b      	b.n	40429c <__udivmoddi4+0x134>

00404444 <__aeabi_idiv0>:
  404444:	4770      	bx	lr
  404446:	bf00      	nop
  404448:	39384d57 	.word	0x39384d57
  40444c:	6e203430 	.word	0x6e203430
  404450:	6620746f 	.word	0x6620746f
  404454:	646e756f 	.word	0x646e756f
  404458:	000d0a21 	.word	0x000d0a21
  40445c:	092d452d 	.word	0x092d452d
  404460:	39384d57 	.word	0x39384d57
  404464:	69203430 	.word	0x69203430
  404468:	6974696e 	.word	0x6974696e
  40446c:	7a696c61 	.word	0x7a696c61
  404470:	6f697461 	.word	0x6f697461
  404474:	6166206e 	.word	0x6166206e
  404478:	64656c69 	.word	0x64656c69
  40447c:	00000d2e 	.word	0x00000d2e

00404480 <_global_impure_ptr>:
  404480:	20400018 33323130 37363534 42413938     ..@ 0123456789AB
  404490:	46454443 00000000 33323130 37363534     CDEF....01234567
  4044a0:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  4044b0:	0000296c                                l)..

004044b4 <blanks.7217>:
  4044b4:	20202020 20202020 20202020 20202020                     

004044c4 <zeroes.7218>:
  4044c4:	30303030 30303030 30303030 30303030     0000000000000000
  4044d4:	00000043 49534f50 00000058 0000002e     C...POSIX.......

004044e4 <_ctype_>:
  4044e4:	20202000 20202020 28282020 20282828     .         ((((( 
  4044f4:	20202020 20202020 20202020 20202020                     
  404504:	10108820 10101010 10101010 10101010      ...............
  404514:	04040410 04040404 10040404 10101010     ................
  404524:	41411010 41414141 01010101 01010101     ..AAAAAA........
  404534:	01010101 01010101 01010101 10101010     ................
  404544:	42421010 42424242 02020202 02020202     ..BBBBBB........
  404554:	02020202 02020202 02020202 10101010     ................
  404564:	00000020 00000000 00000000 00000000      ...............
	...

004045e8 <_init>:
  4045e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4045ea:	bf00      	nop
  4045ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4045ee:	bc08      	pop	{r3}
  4045f0:	469e      	mov	lr, r3
  4045f2:	4770      	bx	lr

004045f4 <__init_array_start>:
  4045f4:	004025f5 	.word	0x004025f5

004045f8 <__frame_dummy_init_array_entry>:
  4045f8:	00400165                                e.@.

004045fc <_fini>:
  4045fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4045fe:	bf00      	nop
  404600:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404602:	bc08      	pop	{r3}
  404604:	469e      	mov	lr, r3
  404606:	4770      	bx	lr

00404608 <__fini_array_start>:
  404608:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <_impure_ptr>:
20400010:	0018 2040 0000 0000                         ..@ ....

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400440 <__atexit_recursive_mutex>:
20400440:	1ee8 2040                                   ..@ 

20400444 <__global_locale>:
20400444:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400464:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400484:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400504:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400524:	3ea1 0040 35dd 0040 0000 0000 44e4 0040     .>@..5@......D@.
20400534:	44e0 0040 4494 0040 4494 0040 4494 0040     .D@..D@..D@..D@.
20400544:	4494 0040 4494 0040 4494 0040 4494 0040     .D@..D@..D@..D@.
20400554:	4494 0040 4494 0040 ffff ffff ffff ffff     .D@..D@.........
20400564:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040058c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005b0 <__malloc_av_>:
	...
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 
204008d8:	08d0 2040 08d0 2040 08d8 2040 08d8 2040     ..@ ..@ ..@ ..@ 
204008e8:	08e0 2040 08e0 2040 08e8 2040 08e8 2040     ..@ ..@ ..@ ..@ 
204008f8:	08f0 2040 08f0 2040 08f8 2040 08f8 2040     ..@ ..@ ..@ ..@ 
20400908:	0900 2040 0900 2040 0908 2040 0908 2040     ..@ ..@ ..@ ..@ 
20400918:	0910 2040 0910 2040 0918 2040 0918 2040     ..@ ..@ ..@ ..@ 
20400928:	0920 2040 0920 2040 0928 2040 0928 2040      .@  .@ (.@ (.@ 
20400938:	0930 2040 0930 2040 0938 2040 0938 2040     0.@ 0.@ 8.@ 8.@ 
20400948:	0940 2040 0940 2040 0948 2040 0948 2040     @.@ @.@ H.@ H.@ 
20400958:	0950 2040 0950 2040 0958 2040 0958 2040     P.@ P.@ X.@ X.@ 
20400968:	0960 2040 0960 2040 0968 2040 0968 2040     `.@ `.@ h.@ h.@ 
20400978:	0970 2040 0970 2040 0978 2040 0978 2040     p.@ p.@ x.@ x.@ 
20400988:	0980 2040 0980 2040 0988 2040 0988 2040     ..@ ..@ ..@ ..@ 
20400998:	0990 2040 0990 2040 0998 2040 0998 2040     ..@ ..@ ..@ ..@ 
204009a8:	09a0 2040 09a0 2040 09a8 2040 09a8 2040     ..@ ..@ ..@ ..@ 

204009b8 <__malloc_sbrk_base>:
204009b8:	ffff ffff                                   ....

204009bc <__malloc_trim_threshold>:
204009bc:	0000 0002                                   ....
