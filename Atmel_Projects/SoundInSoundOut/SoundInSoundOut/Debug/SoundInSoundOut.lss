
SoundInSoundOut.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004524  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404524  00404524  00014524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  0040452c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000940  204009c0  00404eec  000209c0  2**2
                  ALLOC
  4 .stack        00002000  20401300  0040582c  000209c0  2**0
                  ALLOC
  5 .heap         00000200  20403300  0040782c  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001769c  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000033b9  00000000  00000000  000380e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000444e  00000000  00000000  0003b49c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000008c8  00000000  00000000  0003f8ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008d0  00000000  00000000  000401b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00022a65  00000000  00000000  00040a82  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000e012  00000000  00000000  000634e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00093590  00000000  00000000  000714f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001e84  00000000  00000000  00104a8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	00 33 40 20 b5 10 40 00 b1 10 40 00 b1 10 40 00     .3@ ..@...@...@.
  400010:	b1 10 40 00 b1 10 40 00 b1 10 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	b1 10 40 00 b1 10 40 00 00 00 00 00 b1 10 40 00     ..@...@.......@.
  40003c:	b1 10 40 00 b1 10 40 00 b1 10 40 00 b1 10 40 00     ..@...@...@...@.
  40004c:	b1 10 40 00 b1 10 40 00 b1 10 40 00 b1 10 40 00     ..@...@...@...@.
  40005c:	b1 10 40 00 b1 10 40 00 00 00 00 00 e5 0a 40 00     ..@...@.......@.
  40006c:	f9 0a 40 00 0d 0b 40 00 b1 10 40 00 b1 10 40 00     ..@...@...@...@.
  40007c:	b1 10 40 00 21 0b 40 00 35 0b 40 00 b1 10 40 00     ..@.!.@.5.@...@.
  40008c:	b1 10 40 00 b1 10 40 00 b1 10 40 00 b1 10 40 00     ..@...@...@...@.
  40009c:	b1 10 40 00 b1 10 40 00 b1 10 40 00 b1 10 40 00     ..@...@...@...@.
  4000ac:	b1 10 40 00 b1 10 40 00 b1 10 40 00 b1 10 40 00     ..@...@...@...@.
  4000bc:	b1 10 40 00 b1 10 40 00 b1 10 40 00 b1 10 40 00     ..@...@...@...@.
  4000cc:	b1 10 40 00 00 00 00 00 b1 10 40 00 00 00 00 00     ..@.......@.....
  4000dc:	b1 10 40 00 b1 10 40 00 b1 10 40 00 b1 10 40 00     ..@...@...@...@.
  4000ec:	b1 10 40 00 b1 10 40 00 b1 10 40 00 b1 10 40 00     ..@...@...@...@.
  4000fc:	b1 10 40 00 b1 10 40 00 b1 10 40 00 b1 10 40 00     ..@...@...@...@.
  40010c:	b1 10 40 00 b1 10 40 00 b1 10 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 b1 10 40 00 b1 10 40 00 ad 01 40 00     ......@...@...@.
  40012c:	b1 10 40 00 b1 10 40 00 00 00 00 00 b1 10 40 00     ..@...@.......@.
  40013c:	b1 10 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009c0 	.word	0x204009c0
  40015c:	00000000 	.word	0x00000000
  400160:	0040452c 	.word	0x0040452c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040452c 	.word	0x0040452c
  4001a0:	204009c4 	.word	0x204009c4
  4001a4:	0040452c 	.word	0x0040452c
  4001a8:	00000000 	.word	0x00000000

004001ac <XDMAC_Handler>:
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4001ac:	4b04      	ldr	r3, [pc, #16]	; (4001c0 <XDMAC_Handler+0x14>)
  4001ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
void XDMAC_Handler(void)
{
	uint32_t dma_status;

	dma_status = xdmac_channel_get_interrupt_status(XDMAC, XDMA_CH_SSC_RX);
	if (dma_status & XDMAC_CIS_BIS)
  4001b0:	f013 0f01 	tst.w	r3, #1
  4001b4:	d002      	beq.n	4001bc <XDMAC_Handler+0x10>
	{
		flag = 0;
  4001b6:	2200      	movs	r2, #0
  4001b8:	4b02      	ldr	r3, [pc, #8]	; (4001c4 <XDMAC_Handler+0x18>)
  4001ba:	601a      	str	r2, [r3, #0]
  4001bc:	4770      	bx	lr
  4001be:	bf00      	nop
  4001c0:	40078000 	.word	0x40078000
  4001c4:	204012d4 	.word	0x204012d4

004001c8 <configure_xdma>:
	}
}

/********************************** Public Functions **********************************/
void configure_xdma(void)
{
  4001c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4001cc:	b088      	sub	sp, #32
	uint16_t *src;
	uint8_t i;

	xdmac_channel_config_t xdmac_channel_cfg = {0};
  4001ce:	2420      	movs	r4, #32
  4001d0:	4622      	mov	r2, r4
  4001d2:	2100      	movs	r1, #0
  4001d4:	4668      	mov	r0, sp
  4001d6:	4b28      	ldr	r3, [pc, #160]	; (400278 <configure_xdma+0xb0>)
  4001d8:	4798      	blx	r3

	/* Initialize and enable DMA controller */
	pmc_enable_periph_clk(ID_XDMAC);
  4001da:	203a      	movs	r0, #58	; 0x3a
  4001dc:	4b27      	ldr	r3, [pc, #156]	; (40027c <configure_xdma+0xb4>)
  4001de:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4001e0:	4b27      	ldr	r3, [pc, #156]	; (400280 <configure_xdma+0xb8>)
  4001e2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4001e6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4001ea:	f883 433a 	strb.w	r4, [r3, #826]	; 0x33a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4001ee:	605a      	str	r2, [r3, #4]
	NVIC_ClearPendingIRQ(XDMAC_IRQn);
	NVIC_SetPriority(XDMAC_IRQn ,1);
	NVIC_EnableIRQ(XDMAC_IRQn);

	/* Initialize channel config */
	xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4001f0:	4b24      	ldr	r3, [pc, #144]	; (400284 <configure_xdma+0xbc>)
  4001f2:	9303      	str	r3, [sp, #12]
	| XDMAC_CC_SIF_AHB_IF1
	| XDMAC_CC_DIF_AHB_IF0
	| XDMAC_CC_SAM_FIXED_AM
	| XDMAC_CC_DAM_INCREMENTED_AM
	| XDMAC_CC_PERID(33);
	xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_RX, &xdmac_channel_cfg);
  4001f4:	4c24      	ldr	r4, [pc, #144]	; (400288 <configure_xdma+0xc0>)
  4001f6:	466a      	mov	r2, sp
  4001f8:	2100      	movs	r1, #0
  4001fa:	4620      	mov	r0, r4
  4001fc:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 4002a8 <configure_xdma+0xe0>
  400200:	47d0      	blx	sl

	/* Initialize linked list descriptor */
	src = (uint16_t *)&AudioBuffer[0];
	for(i = 0; i < TOTAL_BUFFERS; i++) {
		linklist_read[i].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  400202:	4b22      	ldr	r3, [pc, #136]	; (40028c <configure_xdma+0xc4>)
  400204:	4e22      	ldr	r6, [pc, #136]	; (400290 <configure_xdma+0xc8>)
  400206:	605e      	str	r6, [r3, #4]
		| XDMAC_UBC_NDE_FETCH_EN
		| XDMAC_UBC_NSEN_UPDATED
		| XDMAC_CUBC_UBLEN(MICROBLOCK_LEN);
		linklist_read[i].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  400208:	4a22      	ldr	r2, [pc, #136]	; (400294 <configure_xdma+0xcc>)
  40020a:	609a      	str	r2, [r3, #8]
		linklist_read[i].mbr_da = (uint32_t)(src);
  40020c:	4f22      	ldr	r7, [pc, #136]	; (400298 <configure_xdma+0xd0>)
  40020e:	60df      	str	r7, [r3, #12]
		if ( i == (TOTAL_BUFFERS - 1)) {
			linklist_read[i].mbr_nda = (uint32_t)&linklist_read[0];
			} else {
			linklist_read[i].mbr_nda = (uint32_t)&linklist_read[i + 1];
  400210:	f103 0110 	add.w	r1, r3, #16
  400214:	6019      	str	r1, [r3, #0]
		linklist_read[i].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  400216:	615e      	str	r6, [r3, #20]
		linklist_read[i].mbr_sa  = (uint32_t)&(SSC->SSC_RHR);
  400218:	619a      	str	r2, [r3, #24]
		linklist_read[i].mbr_da = (uint32_t)(src);
  40021a:	f507 7900 	add.w	r9, r7, #512	; 0x200
  40021e:	f8c3 901c 	str.w	r9, [r3, #28]
			linklist_read[i].mbr_nda = (uint32_t)&linklist_read[0];
  400222:	611b      	str	r3, [r3, #16]
 */
static inline void xdmac_channel_set_descriptor_control(Xdmac *xdmac, uint32_t channel_num, uint32_t config)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  400224:	f04f 080f 	mov.w	r8, #15
  400228:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  40022c:	f023 0303 	bic.w	r3, r3, #3
  400230:	66a3      	str	r3, [r4, #104]	; 0x68
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  400232:	2501      	movs	r5, #1
  400234:	60e5      	str	r5, [r4, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CIE = mask;
  400236:	6525      	str	r5, [r4, #80]	; 0x50
	xdmac_channel_set_descriptor_addr(XDMAC, XDMA_CH_SSC_RX, (uint32_t)(&linklist_read[0]), 0);

	xdmac_enable_interrupt(XDMAC, XDMA_CH_SSC_RX);
	xdmac_channel_enable_interrupt(XDMAC, XDMA_CH_SSC_RX, XDMAC_CIE_BIE);

	xdmac_channel_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  400238:	4b18      	ldr	r3, [pc, #96]	; (40029c <configure_xdma+0xd4>)
  40023a:	9303      	str	r3, [sp, #12]
	| XDMAC_CC_SIF_AHB_IF0
	| XDMAC_CC_DIF_AHB_IF1
	| XDMAC_CC_SAM_INCREMENTED_AM
	| XDMAC_CC_DAM_FIXED_AM
	| XDMAC_CC_PERID(32);
	xdmac_configure_transfer(XDMAC, XDMA_CH_SSC_TX, &xdmac_channel_cfg);
  40023c:	466a      	mov	r2, sp
  40023e:	4629      	mov	r1, r5
  400240:	4620      	mov	r0, r4
  400242:	47d0      	blx	sl

	src = (uint16_t *)&AudioBuffer[0];
	for(i = 0; i < TOTAL_BUFFERS; i++) {
		linklist_write[i].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  400244:	4b16      	ldr	r3, [pc, #88]	; (4002a0 <configure_xdma+0xd8>)
  400246:	605e      	str	r6, [r3, #4]
		| XDMAC_UBC_NDE_FETCH_EN
		| XDMAC_UBC_NSEN_UPDATED
		| XDMAC_CUBC_UBLEN(MICROBLOCK_LEN);
		linklist_write[i].mbr_sa = (uint32_t)(src);
  400248:	609f      	str	r7, [r3, #8]
		linklist_write[i].mbr_da = (uint32_t)&(SSC->SSC_THR);
  40024a:	4a16      	ldr	r2, [pc, #88]	; (4002a4 <configure_xdma+0xdc>)
  40024c:	60da      	str	r2, [r3, #12]
		if ( i == (TOTAL_BUFFERS - 1 )) {
			linklist_write[i].mbr_nda = (uint32_t)&linklist_write[0];
			} else {
			linklist_write[i].mbr_nda = (uint32_t)&linklist_write[i+1];
  40024e:	f103 0110 	add.w	r1, r3, #16
  400252:	6019      	str	r1, [r3, #0]
		linklist_write[i].mbr_ubc = XDMAC_UBC_NVIEW_NDV1
  400254:	615e      	str	r6, [r3, #20]
		linklist_write[i].mbr_sa = (uint32_t)(src);
  400256:	f8c3 9018 	str.w	r9, [r3, #24]
		linklist_write[i].mbr_da = (uint32_t)&(SSC->SSC_THR);
  40025a:	61da      	str	r2, [r3, #28]
			linklist_write[i].mbr_nda = (uint32_t)&linklist_write[0];
  40025c:	611b      	str	r3, [r3, #16]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  40025e:	f8c4 80ac 	str.w	r8, [r4, #172]	; 0xac
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDA = (desc_addr & 0xFFFFFFFC) | ndaif;
  400262:	f023 0303 	bic.w	r3, r3, #3
  400266:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  40026a:	2302      	movs	r3, #2
  40026c:	60e3      	str	r3, [r4, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CIE = mask;
  40026e:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
	xdmac_channel_set_descriptor_addr(XDMAC, XDMA_CH_SSC_TX, (uint32_t)(&linklist_write[0]), 0);

	xdmac_enable_interrupt(XDMAC, XDMA_CH_SSC_TX);
	xdmac_channel_enable_interrupt(XDMAC, XDMA_CH_SSC_TX, XDMAC_CIE_BIE);

  400272:	b008      	add	sp, #32
  400274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400278:	00401599 	.word	0x00401599
  40027c:	00400c69 	.word	0x00400c69
  400280:	e000e100 	.word	0xe000e100
  400284:	21042801 	.word	0x21042801
  400288:	40078000 	.word	0x40078000
  40028c:	204009dc 	.word	0x204009dc
  400290:	0b000100 	.word	0x0b000100
  400294:	40004020 	.word	0x40004020
  400298:	20400ac8 	.word	0x20400ac8
  40029c:	20014811 	.word	0x20014811
  4002a0:	204009fc 	.word	0x204009fc
  4002a4:	40004024 	.word	0x40004024
  4002a8:	00401075 	.word	0x00401075

004002ac <configure_ssc>:

#include <asf.h>
#include "WM8904_Driver.h"

void configure_ssc(void)
{
  4002ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4002b0:	b09c      	sub	sp, #112	; 0x70
	clock_opt_t tx_clk_option, rx_clk_option;
	data_frame_opt_t tx_data_frame_option, rx_data_frame_option;

	/* Initialize clock */
	pmc_enable_periph_clk(ID_SSC);
  4002b2:	2016      	movs	r0, #22
  4002b4:	4b25      	ldr	r3, [pc, #148]	; (40034c <configure_ssc+0xa0>)
  4002b6:	4798      	blx	r3

	/* Reset SSC */
	ssc_reset(SSC);
  4002b8:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4002bc:	4b24      	ldr	r3, [pc, #144]	; (400350 <configure_ssc+0xa4>)
  4002be:	4798      	blx	r3

	/* Transmitter clock mode configuration. */
	tx_clk_option.ul_cks = SSC_TCMR_CKS_TK;
  4002c0:	2302      	movs	r3, #2
  4002c2:	9315      	str	r3, [sp, #84]	; 0x54
	tx_clk_option.ul_cko = SSC_TCMR_CKO_NONE;
  4002c4:	2400      	movs	r4, #0
  4002c6:	9416      	str	r4, [sp, #88]	; 0x58
	tx_clk_option.ul_cki = 0;
  4002c8:	9417      	str	r4, [sp, #92]	; 0x5c
	tx_clk_option.ul_ckg = SSC_TCMR_CKG_CONTINUOUS;
  4002ca:	9418      	str	r4, [sp, #96]	; 0x60
	tx_clk_option.ul_start_sel = SSC_TCMR_START_TF_EDGE;
  4002cc:	f44f 68e0 	mov.w	r8, #1792	; 0x700
  4002d0:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
	tx_clk_option.ul_sttdly = SSC_TCMR_STTDLY(1);
  4002d4:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  4002d8:	971a      	str	r7, [sp, #104]	; 0x68
	tx_clk_option.ul_period = SSC_TCMR_PERIOD(0);
  4002da:	9419      	str	r4, [sp, #100]	; 0x64
	/* Transmitter frame mode configuration. */
	tx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
  4002dc:	260f      	movs	r6, #15
  4002de:	9607      	str	r6, [sp, #28]
	tx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  4002e0:	2580      	movs	r5, #128	; 0x80
  4002e2:	9508      	str	r5, [sp, #32]
	tx_data_frame_option.ul_datnb = 0;
  4002e4:	9409      	str	r4, [sp, #36]	; 0x24
	tx_data_frame_option.ul_fslen = SLOT_BY_FRAME - 1;
  4002e6:	940a      	str	r4, [sp, #40]	; 0x28
	tx_data_frame_option.ul_fslen_ext = 0;
  4002e8:	940b      	str	r4, [sp, #44]	; 0x2c
	tx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  4002ea:	940c      	str	r4, [sp, #48]	; 0x30
	tx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  4002ec:	940d      	str	r4, [sp, #52]	; 0x34
	/* Configure the SSC transmitter to I2S mode. */
	ssc_set_transmitter(SSC, &tx_clk_option, &tx_data_frame_option);
  4002ee:	aa07      	add	r2, sp, #28
  4002f0:	a915      	add	r1, sp, #84	; 0x54
  4002f2:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4002f6:	4b17      	ldr	r3, [pc, #92]	; (400354 <configure_ssc+0xa8>)
  4002f8:	4798      	blx	r3

	/* Receiver clock mode configuration. */
	rx_clk_option.ul_cks = SSC_RCMR_CKS_TK;
  4002fa:	2301      	movs	r3, #1
  4002fc:	930e      	str	r3, [sp, #56]	; 0x38
	rx_clk_option.ul_cko = SSC_RCMR_CKO_NONE;
  4002fe:	940f      	str	r4, [sp, #60]	; 0x3c
	rx_clk_option.ul_cki = SSC_RCMR_CKI;
  400300:	2320      	movs	r3, #32
  400302:	9310      	str	r3, [sp, #64]	; 0x40
	rx_clk_option.ul_ckg = SSC_RCMR_CKG_CONTINUOUS;
  400304:	9411      	str	r4, [sp, #68]	; 0x44
	rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_EDGE;
  400306:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
	rx_clk_option.ul_sttdly = SSC_RCMR_STTDLY(1);
  40030a:	9713      	str	r7, [sp, #76]	; 0x4c
	rx_clk_option.ul_period = SSC_RCMR_PERIOD(0);
  40030c:	9412      	str	r4, [sp, #72]	; 0x48
	/* Receiver frame mode configuration. */
	rx_data_frame_option.ul_datlen = BITS_BY_SLOT - 1;
  40030e:	9600      	str	r6, [sp, #0]
	rx_data_frame_option.ul_msbf = SSC_RFMR_MSBF;
  400310:	9501      	str	r5, [sp, #4]
	rx_data_frame_option.ul_datnb = 0;
  400312:	9402      	str	r4, [sp, #8]
	rx_data_frame_option.ul_fslen = SLOT_BY_FRAME - 1;
  400314:	9403      	str	r4, [sp, #12]
	rx_data_frame_option.ul_fslen_ext = 0;
  400316:	9404      	str	r4, [sp, #16]
	rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  400318:	9405      	str	r4, [sp, #20]
	rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  40031a:	9406      	str	r4, [sp, #24]
	/* Configure the SSC transmitter to I2S mode. */
	ssc_set_receiver(SSC, &rx_clk_option, &rx_data_frame_option);
  40031c:	466a      	mov	r2, sp
  40031e:	a90e      	add	r1, sp, #56	; 0x38
  400320:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400324:	4b0c      	ldr	r3, [pc, #48]	; (400358 <configure_ssc+0xac>)
  400326:	4798      	blx	r3

	/* Disable transmitter first */
	ssc_disable_tx(SSC);
  400328:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40032c:	4b0b      	ldr	r3, [pc, #44]	; (40035c <configure_ssc+0xb0>)
  40032e:	4798      	blx	r3
	ssc_disable_rx(SSC);
  400330:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400334:	4b0a      	ldr	r3, [pc, #40]	; (400360 <configure_ssc+0xb4>)
  400336:	4798      	blx	r3

	/* Disable All Interrupt */
	ssc_disable_interrupt(SSC, 0xFFFFFFFF);
  400338:	f04f 31ff 	mov.w	r1, #4294967295
  40033c:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400340:	4b08      	ldr	r3, [pc, #32]	; (400364 <configure_ssc+0xb8>)
  400342:	4798      	blx	r3
}
  400344:	b01c      	add	sp, #112	; 0x70
  400346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40034a:	bf00      	nop
  40034c:	00400c69 	.word	0x00400c69
  400350:	00400d29 	.word	0x00400d29
  400354:	00400dcd 	.word	0x00400dcd
  400358:	00400d59 	.word	0x00400d59
  40035c:	00400d51 	.word	0x00400d51
  400360:	00400d43 	.word	0x00400d43
  400364:	00400e41 	.word	0x00400e41

00400368 <configure_codec>:


void configure_codec(void)
{
  400368:	b570      	push	{r4, r5, r6, lr}
	uint16_t data = 0;
	/* check that WM8904 is present */
	wm8904_write_register(WM8904_SW_RESET_AND_ID, 0xFFFF);
  40036a:	f64f 71ff 	movw	r1, #65535	; 0xffff
  40036e:	2000      	movs	r0, #0
  400370:	4b40      	ldr	r3, [pc, #256]	; (400474 <configure_codec+0x10c>)
  400372:	4798      	blx	r3
	data = wm8904_read_register(WM8904_SW_RESET_AND_ID);
  400374:	2000      	movs	r0, #0
  400376:	4b40      	ldr	r3, [pc, #256]	; (400478 <configure_codec+0x110>)
  400378:	4798      	blx	r3
	if(data != 0x8904) {
  40037a:	f648 1304 	movw	r3, #35076	; 0x8904
  40037e:	4298      	cmp	r0, r3
  400380:	d003      	beq.n	40038a <configure_codec+0x22>
		printf("WM8904 not found!\n\r");
  400382:	483e      	ldr	r0, [pc, #248]	; (40047c <configure_codec+0x114>)
  400384:	4b3e      	ldr	r3, [pc, #248]	; (400480 <configure_codec+0x118>)
  400386:	4798      	blx	r3
  400388:	e7fe      	b.n	400388 <configure_codec+0x20>
		while(1);
	}

	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS);
  40038a:	2108      	movs	r1, #8
  40038c:	2004      	movs	r0, #4
  40038e:	4c39      	ldr	r4, [pc, #228]	; (400474 <configure_codec+0x10c>)
  400390:	47a0      	blx	r4
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |
  400392:	2147      	movs	r1, #71	; 0x47
  400394:	2005      	movs	r0, #5
  400396:	47a0      	blx	r4
	WM8904_VMID_RES_FAST | WM8904_VMID_ENA);
	delay_ms(5);
  400398:	4e3a      	ldr	r6, [pc, #232]	; (400484 <configure_codec+0x11c>)
  40039a:	4630      	mov	r0, r6
  40039c:	4d3a      	ldr	r5, [pc, #232]	; (400488 <configure_codec+0x120>)
  40039e:	47a8      	blx	r5
	wm8904_write_register(WM8904_VMID_CONTROL_0, WM8904_VMID_BUF_ENA |
  4003a0:	2143      	movs	r1, #67	; 0x43
  4003a2:	2005      	movs	r0, #5
  4003a4:	47a0      	blx	r4
	WM8904_VMID_RES_NORMAL | WM8904_VMID_ENA);
	wm8904_write_register(WM8904_BIAS_CONTROL_0, WM8904_ISEL_HP_BIAS | WM8904_BIAS_ENA);
  4003a6:	2109      	movs	r1, #9
  4003a8:	2004      	movs	r0, #4
  4003aa:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_0, WM8904_INL_ENA | WM8904_INR_ENA);
  4003ac:	2103      	movs	r1, #3
  4003ae:	200c      	movs	r0, #12
  4003b0:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_2, WM8904_HPL_PGA_ENA | WM8904_HPR_PGA_ENA);
  4003b2:	2103      	movs	r1, #3
  4003b4:	200e      	movs	r0, #14
  4003b6:	47a0      	blx	r4
	wm8904_write_register(WM8904_DAC_DIGITAL_1, WM8904_DEEMPH(0));
  4003b8:	2100      	movs	r1, #0
  4003ba:	2021      	movs	r0, #33	; 0x21
  4003bc:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_OUT12_ZC, 0x0000);
  4003be:	2100      	movs	r1, #0
  4003c0:	203d      	movs	r0, #61	; 0x3d
  4003c2:	47a0      	blx	r4
	wm8904_write_register(WM8904_CHARGE_PUMP_0, WM8904_CP_ENA);
  4003c4:	2101      	movs	r1, #1
  4003c6:	2062      	movs	r0, #98	; 0x62
  4003c8:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLASS_W_0, WM8904_CP_DYN_PWR);
  4003ca:	2101      	movs	r1, #1
  4003cc:	2068      	movs	r0, #104	; 0x68
  4003ce:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_1, 0x0000);
  4003d0:	2100      	movs	r1, #0
  4003d2:	2074      	movs	r0, #116	; 0x74
  4003d4:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_2, WM8904_FLL_OUTDIV(7)| WM8904_FLL_FRATIO(4));
  4003d6:	f240 7104 	movw	r1, #1796	; 0x704
  4003da:	2075      	movs	r0, #117	; 0x75
  4003dc:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_3, WM8904_FLL_K(0x8000));
  4003de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  4003e2:	2076      	movs	r0, #118	; 0x76
  4003e4:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_4, WM8904_FLL_N(0xBB));
  4003e6:	f44f 51bb 	mov.w	r1, #5984	; 0x1760
  4003ea:	2077      	movs	r0, #119	; 0x77
  4003ec:	47a0      	blx	r4
	wm8904_write_register(WM8904_FLL_CONTROL_1, WM8904_FLL_FRACN_ENA | WM8904_FLL_ENA);
  4003ee:	2105      	movs	r1, #5
  4003f0:	2074      	movs	r0, #116	; 0x74
  4003f2:	47a0      	blx	r4
	delay_ms(5);
  4003f4:	4630      	mov	r0, r6
  4003f6:	47a8      	blx	r5
	wm8904_write_register(WM8904_CLOCK_RATES_1, WM8904_CLK_SYS_RATE(3) | WM8904_SAMPLE_RATE(5));
  4003f8:	f640 4105 	movw	r1, #3077	; 0xc05
  4003fc:	2015      	movs	r0, #21
  4003fe:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLOCK_RATES_0, 0x0000);
  400400:	2100      	movs	r1, #0
  400402:	2014      	movs	r0, #20
  400404:	47a0      	blx	r4
	wm8904_write_register(WM8904_CLOCK_RATES_2,
  400406:	f244 0106 	movw	r1, #16390	; 0x4006
  40040a:	2016      	movs	r0, #22
  40040c:	47a0      	blx	r4
	WM8904_SYSCLK_SRC | WM8904_CLK_SYS_ENA | WM8904_CLK_DSP_ENA);
	wm8904_write_register(WM8904_AUDIO_INTERFACE_1, WM8904_BCLK_DIR | WM8904_AIF_FMT_I2S);
  40040e:	2142      	movs	r1, #66	; 0x42
  400410:	2019      	movs	r0, #25
  400412:	47a0      	blx	r4
	wm8904_write_register(WM8904_AUDIO_INTERFACE_2, WM8904_BCLK_DIV(8));
  400414:	2108      	movs	r1, #8
  400416:	201a      	movs	r0, #26
  400418:	47a0      	blx	r4
	wm8904_write_register(WM8904_AUDIO_INTERFACE_3, WM8904_LRCLK_DIR | WM8904_LRCLK_RATE(0x20));
  40041a:	f44f 6102 	mov.w	r1, #2080	; 0x820
  40041e:	201b      	movs	r0, #27
  400420:	47a0      	blx	r4
	wm8904_write_register(WM8904_POWER_MANAGEMENT_6,
  400422:	210f      	movs	r1, #15
  400424:	2012      	movs	r0, #18
  400426:	47a0      	blx	r4
	WM8904_DACL_ENA | WM8904_DACR_ENA |
	WM8904_ADCL_ENA | WM8904_ADCR_ENA);
	delay_ms(5);
  400428:	4630      	mov	r0, r6
  40042a:	47a8      	blx	r5
	wm8904_write_register(WM8904_ANALOGUE_LEFT_INPUT_0, WM8904_LIN_VOL(0x10));
  40042c:	2110      	movs	r1, #16
  40042e:	202c      	movs	r0, #44	; 0x2c
  400430:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_RIGHT_INPUT_0, WM8904_RIN_VOL(0x10));
  400432:	2110      	movs	r1, #16
  400434:	202d      	movs	r0, #45	; 0x2d
  400436:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  400438:	2111      	movs	r1, #17
  40043a:	205a      	movs	r0, #90	; 0x5a
  40043c:	47a0      	blx	r4
	WM8904_HPL_ENA | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  40043e:	2133      	movs	r1, #51	; 0x33
  400440:	205a      	movs	r0, #90	; 0x5a
  400442:	47a0      	blx	r4
	WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_DC_SERVO_0,
  400444:	210f      	movs	r1, #15
  400446:	2043      	movs	r0, #67	; 0x43
  400448:	47a0      	blx	r4
	WM8904_DCS_ENA_CHAN_3 | WM8904_DCS_ENA_CHAN_2 |
	WM8904_DCS_ENA_CHAN_1 | WM8904_DCS_ENA_CHAN_0);
	wm8904_write_register(WM8904_DC_SERVO_1,
  40044a:	21f0      	movs	r1, #240	; 0xf0
  40044c:	2044      	movs	r0, #68	; 0x44
  40044e:	47a0      	blx	r4
	WM8904_DCS_TRIG_STARTUP_3 | WM8904_DCS_TRIG_STARTUP_2 |
	WM8904_DCS_TRIG_STARTUP_1 | WM8904_DCS_TRIG_STARTUP_0);
	delay_ms(100);
  400450:	4e0e      	ldr	r6, [pc, #56]	; (40048c <configure_codec+0x124>)
  400452:	4630      	mov	r0, r6
  400454:	47a8      	blx	r5
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  400456:	2177      	movs	r1, #119	; 0x77
  400458:	205a      	movs	r0, #90	; 0x5a
  40045a:	47a0      	blx	r4
	WM8904_HPL_ENA_OUTP | WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_ENA_OUTP | WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_HP_0,
  40045c:	21ff      	movs	r1, #255	; 0xff
  40045e:	205a      	movs	r0, #90	; 0x5a
  400460:	47a0      	blx	r4
	WM8904_HPL_RMV_SHORT | WM8904_HPL_ENA_OUTP | WM8904_HPL_ENA_DLY | WM8904_HPL_ENA |
	WM8904_HPR_RMV_SHORT | WM8904_HPR_ENA_OUTP | WM8904_HPR_ENA_DLY | WM8904_HPR_ENA);
	wm8904_write_register(WM8904_ANALOGUE_OUT1_LEFT, WM8904_HPOUT_VU | WM8904_HPOUTL_VOL(0x39));
  400462:	21b9      	movs	r1, #185	; 0xb9
  400464:	2039      	movs	r0, #57	; 0x39
  400466:	47a0      	blx	r4
	wm8904_write_register(WM8904_ANALOGUE_OUT1_RIGHT, WM8904_HPOUT_VU | WM8904_HPOUTR_VOL(0x39));
  400468:	21b9      	movs	r1, #185	; 0xb9
  40046a:	203a      	movs	r0, #58	; 0x3a
  40046c:	47a0      	blx	r4
	delay_ms(100);
  40046e:	4630      	mov	r0, r6
  400470:	47a8      	blx	r5
  400472:	bd70      	pop	{r4, r5, r6, pc}
  400474:	00400775 	.word	0x00400775
  400478:	004007b1 	.word	0x004007b1
  40047c:	00404308 	.word	0x00404308
  400480:	00401571 	.word	0x00401571
  400484:	0001ede1 	.word	0x0001ede1
  400488:	20400001 	.word	0x20400001
  40048c:	00269593 	.word	0x00269593

00400490 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400490:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400492:	4810      	ldr	r0, [pc, #64]	; (4004d4 <sysclk_init+0x44>)
  400494:	4b10      	ldr	r3, [pc, #64]	; (4004d8 <sysclk_init+0x48>)
  400496:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400498:	213e      	movs	r1, #62	; 0x3e
  40049a:	2000      	movs	r0, #0
  40049c:	4b0f      	ldr	r3, [pc, #60]	; (4004dc <sysclk_init+0x4c>)
  40049e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4004a0:	4c0f      	ldr	r4, [pc, #60]	; (4004e0 <sysclk_init+0x50>)
  4004a2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4004a4:	2800      	cmp	r0, #0
  4004a6:	d0fc      	beq.n	4004a2 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4004a8:	4b0e      	ldr	r3, [pc, #56]	; (4004e4 <sysclk_init+0x54>)
  4004aa:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4004ac:	4a0e      	ldr	r2, [pc, #56]	; (4004e8 <sysclk_init+0x58>)
  4004ae:	4b0f      	ldr	r3, [pc, #60]	; (4004ec <sysclk_init+0x5c>)
  4004b0:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4004b2:	4c0f      	ldr	r4, [pc, #60]	; (4004f0 <sysclk_init+0x60>)
  4004b4:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4004b6:	2800      	cmp	r0, #0
  4004b8:	d0fc      	beq.n	4004b4 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4004ba:	2002      	movs	r0, #2
  4004bc:	4b0d      	ldr	r3, [pc, #52]	; (4004f4 <sysclk_init+0x64>)
  4004be:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004c0:	2010      	movs	r0, #16
  4004c2:	4b0d      	ldr	r3, [pc, #52]	; (4004f8 <sysclk_init+0x68>)
  4004c4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004c6:	4b0d      	ldr	r3, [pc, #52]	; (4004fc <sysclk_init+0x6c>)
  4004c8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004ca:	480d      	ldr	r0, [pc, #52]	; (400500 <sysclk_init+0x70>)
  4004cc:	4b02      	ldr	r3, [pc, #8]	; (4004d8 <sysclk_init+0x48>)
  4004ce:	4798      	blx	r3
  4004d0:	bd10      	pop	{r4, pc}
  4004d2:	bf00      	nop
  4004d4:	11e1a300 	.word	0x11e1a300
  4004d8:	00401289 	.word	0x00401289
  4004dc:	00400be5 	.word	0x00400be5
  4004e0:	00400c39 	.word	0x00400c39
  4004e4:	00400c49 	.word	0x00400c49
  4004e8:	20183f01 	.word	0x20183f01
  4004ec:	400e0600 	.word	0x400e0600
  4004f0:	00400c59 	.word	0x00400c59
  4004f4:	00400b49 	.word	0x00400b49
  4004f8:	00400b81 	.word	0x00400b81
  4004fc:	0040117d 	.word	0x0040117d
  400500:	08f0d180 	.word	0x08f0d180

00400504 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400508:	b980      	cbnz	r0, 40052c <_read+0x28>
  40050a:	460c      	mov	r4, r1
  40050c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40050e:	2a00      	cmp	r2, #0
  400510:	dd0f      	ble.n	400532 <_read+0x2e>
  400512:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400514:	4e08      	ldr	r6, [pc, #32]	; (400538 <_read+0x34>)
  400516:	4d09      	ldr	r5, [pc, #36]	; (40053c <_read+0x38>)
  400518:	6830      	ldr	r0, [r6, #0]
  40051a:	4621      	mov	r1, r4
  40051c:	682b      	ldr	r3, [r5, #0]
  40051e:	4798      	blx	r3
		ptr++;
  400520:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400522:	42bc      	cmp	r4, r7
  400524:	d1f8      	bne.n	400518 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400526:	4640      	mov	r0, r8
  400528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40052c:	f04f 38ff 	mov.w	r8, #4294967295
  400530:	e7f9      	b.n	400526 <_read+0x22>
	for (; len > 0; --len) {
  400532:	4680      	mov	r8, r0
  400534:	e7f7      	b.n	400526 <_read+0x22>
  400536:	bf00      	nop
  400538:	204012d0 	.word	0x204012d0
  40053c:	204012c8 	.word	0x204012c8

00400540 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400540:	3801      	subs	r0, #1
  400542:	2802      	cmp	r0, #2
  400544:	d815      	bhi.n	400572 <_write+0x32>
{
  400546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40054a:	460e      	mov	r6, r1
  40054c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  40054e:	b19a      	cbz	r2, 400578 <_write+0x38>
  400550:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400552:	f8df 8038 	ldr.w	r8, [pc, #56]	; 40058c <_write+0x4c>
  400556:	4f0c      	ldr	r7, [pc, #48]	; (400588 <_write+0x48>)
  400558:	f8d8 0000 	ldr.w	r0, [r8]
  40055c:	f815 1b01 	ldrb.w	r1, [r5], #1
  400560:	683b      	ldr	r3, [r7, #0]
  400562:	4798      	blx	r3
  400564:	2800      	cmp	r0, #0
  400566:	db0a      	blt.n	40057e <_write+0x3e>
  400568:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40056a:	3c01      	subs	r4, #1
  40056c:	d1f4      	bne.n	400558 <_write+0x18>
  40056e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400572:	f04f 30ff 	mov.w	r0, #4294967295
  400576:	4770      	bx	lr
	for (; len != 0; --len) {
  400578:	4610      	mov	r0, r2
  40057a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  40057e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400586:	bf00      	nop
  400588:	204012cc 	.word	0x204012cc
  40058c:	204012d0 	.word	0x204012d0

00400590 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400592:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400596:	4b6f      	ldr	r3, [pc, #444]	; (400754 <board_init+0x1c4>)
  400598:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40059a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40059e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4005a2:	4b6d      	ldr	r3, [pc, #436]	; (400758 <board_init+0x1c8>)
  4005a4:	2200      	movs	r2, #0
  4005a6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4005aa:	695a      	ldr	r2, [r3, #20]
  4005ac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4005b0:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  4005b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4005b6:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4005ba:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4005be:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4005c2:	f007 0007 	and.w	r0, r7, #7
  4005c6:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4005c8:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4005cc:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4005d0:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4005d4:	f3bf 8f4f 	dsb	sy
  4005d8:	f04f 34ff 	mov.w	r4, #4294967295
  4005dc:	fa04 fc00 	lsl.w	ip, r4, r0
  4005e0:	fa06 f000 	lsl.w	r0, r6, r0
  4005e4:	fa04 f40e 	lsl.w	r4, r4, lr
  4005e8:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  4005ec:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  4005ee:	463a      	mov	r2, r7
  4005f0:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  4005f2:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  4005f6:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  4005fa:	3a01      	subs	r2, #1
  4005fc:	4423      	add	r3, r4
  4005fe:	f1b2 3fff 	cmp.w	r2, #4294967295
  400602:	d1f6      	bne.n	4005f2 <board_init+0x62>
        } while(sets--);
  400604:	3e01      	subs	r6, #1
  400606:	4460      	add	r0, ip
  400608:	f1b6 3fff 	cmp.w	r6, #4294967295
  40060c:	d1ef      	bne.n	4005ee <board_init+0x5e>
  40060e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400612:	4b51      	ldr	r3, [pc, #324]	; (400758 <board_init+0x1c8>)
  400614:	695a      	ldr	r2, [r3, #20]
  400616:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  40061a:	615a      	str	r2, [r3, #20]
  40061c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400620:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400624:	4a4d      	ldr	r2, [pc, #308]	; (40075c <board_init+0x1cc>)
  400626:	494e      	ldr	r1, [pc, #312]	; (400760 <board_init+0x1d0>)
  400628:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40062a:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  40062e:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400630:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400634:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400638:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  40063c:	f022 0201 	bic.w	r2, r2, #1
  400640:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400644:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400648:	f022 0201 	bic.w	r2, r2, #1
  40064c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400650:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400654:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400658:	200a      	movs	r0, #10
  40065a:	4c42      	ldr	r4, [pc, #264]	; (400764 <board_init+0x1d4>)
  40065c:	47a0      	blx	r4
  40065e:	200b      	movs	r0, #11
  400660:	47a0      	blx	r4
  400662:	200c      	movs	r0, #12
  400664:	47a0      	blx	r4
  400666:	2010      	movs	r0, #16
  400668:	47a0      	blx	r4
  40066a:	2011      	movs	r0, #17
  40066c:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40066e:	4b3e      	ldr	r3, [pc, #248]	; (400768 <board_init+0x1d8>)
  400670:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400674:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400676:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40067a:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40067c:	493b      	ldr	r1, [pc, #236]	; (40076c <board_init+0x1dc>)
  40067e:	f44f 7200 	mov.w	r2, #512	; 0x200
  400682:	610a      	str	r2, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400684:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400688:	630a      	str	r2, [r1, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40068a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40068c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400690:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400692:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400696:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400698:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  40069a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40069e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4006a0:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  4006a4:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4006a6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4006a8:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  4006ac:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4006ae:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4006b2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4006b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4006ba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4006be:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4006c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4006c4:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4006c6:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4006c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4006cc:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4006ce:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4006d2:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4006d4:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4006d6:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4006da:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4006dc:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4006de:	4924      	ldr	r1, [pc, #144]	; (400770 <board_init+0x1e0>)
  4006e0:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
  4006e4:	f042 0210 	orr.w	r2, r2, #16
  4006e8:	f8c1 2114 	str.w	r2, [r1, #276]	; 0x114
		base->PIO_PUDR = mask;
  4006ec:	f501 21b2 	add.w	r1, r1, #364544	; 0x59000
  4006f0:	2210      	movs	r2, #16
  4006f2:	660a      	str	r2, [r1, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4006f4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
		base->PIO_MDDR = mask;
  4006f8:	654a      	str	r2, [r1, #84]	; 0x54
		base->PIO_IFDR = mask;
  4006fa:	624a      	str	r2, [r1, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4006fc:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400700:	6f08      	ldr	r0, [r1, #112]	; 0x70
  400702:	4310      	orrs	r0, r2
  400704:	6708      	str	r0, [r1, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400706:	6f48      	ldr	r0, [r1, #116]	; 0x74
  400708:	4310      	orrs	r0, r2
  40070a:	6748      	str	r0, [r1, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40070c:	604a      	str	r2, [r1, #4]
		base->PIO_PUDR = mask;
  40070e:	2108      	movs	r1, #8
  400710:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400712:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400716:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400718:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40071a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40071e:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400720:	f020 0008 	bic.w	r0, r0, #8
  400724:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400726:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400728:	f020 0008 	bic.w	r0, r0, #8
  40072c:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40072e:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  400730:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400732:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400736:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400738:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40073a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40073e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400740:	f021 0110 	bic.w	r1, r1, #16
  400744:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400746:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400748:	f021 0110 	bic.w	r1, r1, #16
  40074c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40074e:	605a      	str	r2, [r3, #4]
  400750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400752:	bf00      	nop
  400754:	400e1850 	.word	0x400e1850
  400758:	e000ed00 	.word	0xe000ed00
  40075c:	400e0c00 	.word	0x400e0c00
  400760:	5a00080c 	.word	0x5a00080c
  400764:	00400c69 	.word	0x00400c69
  400768:	400e0e00 	.word	0x400e0e00
  40076c:	400e1200 	.word	0x400e1200
  400770:	40088000 	.word	0x40088000

00400774 <wm8904_write_register>:
 *
 * \param uc_register_address Register address to write
 * \param us_data Data to write.
 */
void wm8904_write_register(uint8_t uc_register_address, uint16_t us_data)
{
  400774:	b500      	push	{lr}
  400776:	b087      	sub	sp, #28
	uint8_t uc_temp_data[2];
	twihs_packet_t packet;

	uc_temp_data[0] = (us_data & 0xff00) >> 8;
  400778:	0a0b      	lsrs	r3, r1, #8
  40077a:	f88d 3014 	strb.w	r3, [sp, #20]
	uc_temp_data[1] = us_data & 0xff;
  40077e:	f88d 1015 	strb.w	r1, [sp, #21]

	packet.addr[0]     = uc_register_address;
  400782:	f88d 0000 	strb.w	r0, [sp]
	packet.addr_length = 0x1;
  400786:	2301      	movs	r3, #1
  400788:	9301      	str	r3, [sp, #4]
	packet.buffer      = uc_temp_data;
  40078a:	ab05      	add	r3, sp, #20
  40078c:	9302      	str	r3, [sp, #8]
	packet.length      = 0x2;
  40078e:	2302      	movs	r3, #2
  400790:	9303      	str	r3, [sp, #12]
	packet.chip        = WM8904_SLAVE_ADDRESS;
  400792:	231a      	movs	r3, #26
  400794:	f88d 3010 	strb.w	r3, [sp, #16]

	twihs_master_write(WM8904_TWIHS, &packet);
  400798:	4669      	mov	r1, sp
  40079a:	4803      	ldr	r0, [pc, #12]	; (4007a8 <wm8904_write_register+0x34>)
  40079c:	4b03      	ldr	r3, [pc, #12]	; (4007ac <wm8904_write_register+0x38>)
  40079e:	4798      	blx	r3
}
  4007a0:	b007      	add	sp, #28
  4007a2:	f85d fb04 	ldr.w	pc, [sp], #4
  4007a6:	bf00      	nop
  4007a8:	40018000 	.word	0x40018000
  4007ac:	00400fd5 	.word	0x00400fd5

004007b0 <wm8904_read_register>:
 *
 * \param uc_register_address Register address to write
 * \retun Register value.
 */
uint16_t wm8904_read_register(uint8_t uc_register_address)
{
  4007b0:	b500      	push	{lr}
  4007b2:	b087      	sub	sp, #28
	uint8_t uc_temp_data[2];
	twihs_packet_t packet;
	uint16_t us_data;

	packet.addr[0]     = uc_register_address;
  4007b4:	f88d 0000 	strb.w	r0, [sp]
	packet.addr_length = 0x1;
  4007b8:	2301      	movs	r3, #1
  4007ba:	9301      	str	r3, [sp, #4]
	packet.buffer      = uc_temp_data;
  4007bc:	ab05      	add	r3, sp, #20
  4007be:	9302      	str	r3, [sp, #8]
	packet.length      = 0x2;
  4007c0:	2302      	movs	r3, #2
  4007c2:	9303      	str	r3, [sp, #12]
	packet.chip        = WM8904_SLAVE_ADDRESS;
  4007c4:	231a      	movs	r3, #26
  4007c6:	f88d 3010 	strb.w	r3, [sp, #16]

	twihs_master_read(WM8904_TWIHS, &packet);
  4007ca:	4669      	mov	r1, sp
  4007cc:	4805      	ldr	r0, [pc, #20]	; (4007e4 <wm8904_read_register+0x34>)
  4007ce:	4b06      	ldr	r3, [pc, #24]	; (4007e8 <wm8904_read_register+0x38>)
  4007d0:	4798      	blx	r3
	us_data = (((uint16_t)uc_temp_data[0] << 8) & 0xff00) | uc_temp_data[1];
  4007d2:	f89d 0014 	ldrb.w	r0, [sp, #20]
  4007d6:	f89d 3015 	ldrb.w	r3, [sp, #21]

	return us_data;
}
  4007da:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  4007de:	b007      	add	sp, #28
  4007e0:	f85d fb04 	ldr.w	pc, [sp], #4
  4007e4:	40018000 	.word	0x40018000
  4007e8:	00400f29 	.word	0x00400f29

004007ec <wm8904_twi_init>:
 * \brief Initialize TWIHS connect to WM8904.
 *
 * \retun TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t wm8904_twi_init(void)
{
  4007ec:	b510      	push	{r4, lr}
  4007ee:	b084      	sub	sp, #16
	pio_configure_pin(WM8904_TK_PIO, WM8904_TK_FLAGS);
  4007f0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4007f4:	2021      	movs	r0, #33	; 0x21
  4007f6:	4c15      	ldr	r4, [pc, #84]	; (40084c <wm8904_twi_init+0x60>)
  4007f8:	47a0      	blx	r4
	pio_configure_pin(WM8904_TF_PIO, WM8904_TF_FLAGS);
  4007fa:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4007fe:	2020      	movs	r0, #32
  400800:	47a0      	blx	r4
	pio_configure_pin(WM8904_TD_PIO, WM8904_TD_FLAGS);
  400802:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400806:	207a      	movs	r0, #122	; 0x7a
  400808:	47a0      	blx	r4
	pio_configure_pin(WM8904_RK_PIO, WM8904_RK_FLAGS);
  40080a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40080e:	2016      	movs	r0, #22
  400810:	47a0      	blx	r4
	pio_configure_pin(WM8904_RF_PIO, WM8904_RF_FLAGS);
  400812:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400816:	2078      	movs	r0, #120	; 0x78
  400818:	47a0      	blx	r4
	pio_configure_pin(WM8904_RD_PIO, WM8904_RD_FLAGS);
  40081a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40081e:	200a      	movs	r0, #10
  400820:	47a0      	blx	r4
	pio_configure_pin(WM8904_PCK2_PIO, WM8904_PCK2_FLAGS);
  400822:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400826:	2012      	movs	r0, #18
  400828:	47a0      	blx	r4

	twihs_options_t opt;
	opt.master_clk = sysclk_get_cpu_hz();
	opt.speed = WM8904_TWIHS_CLK;
  40082a:	4b09      	ldr	r3, [pc, #36]	; (400850 <wm8904_twi_init+0x64>)
  40082c:	9302      	str	r3, [sp, #8]
typedef twihs_packet_t twihs_package_t;

static inline uint32_t twihs_master_setup(twihs_master_t p_twihs,
		twihs_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
  40082e:	4b09      	ldr	r3, [pc, #36]	; (400854 <wm8904_twi_init+0x68>)
  400830:	9301      	str	r3, [sp, #4]
	p_opt->smbus      = 0;
  400832:	2300      	movs	r3, #0
  400834:	f88d 300d 	strb.w	r3, [sp, #13]
  400838:	2013      	movs	r0, #19
  40083a:	4b07      	ldr	r3, [pc, #28]	; (400858 <wm8904_twi_init+0x6c>)
  40083c:	4798      	blx	r3
#endif		
	} else {
		// Do Nothing
	}
#endif
	return (twihs_master_init(p_twihs, p_opt));
  40083e:	a901      	add	r1, sp, #4
  400840:	4806      	ldr	r0, [pc, #24]	; (40085c <wm8904_twi_init+0x70>)
  400842:	4b07      	ldr	r3, [pc, #28]	; (400860 <wm8904_twi_init+0x74>)
  400844:	4798      	blx	r3
	return twihs_master_setup(WM8904_TWIHS, &opt);
}
  400846:	b004      	add	sp, #16
  400848:	bd10      	pop	{r4, pc}
  40084a:	bf00      	nop
  40084c:	00400965 	.word	0x00400965
  400850:	00061a80 	.word	0x00061a80
  400854:	047868c0 	.word	0x047868c0
  400858:	00400c69 	.word	0x00400c69
  40085c:	40018000 	.word	0x40018000
  400860:	00400ef5 	.word	0x00400ef5

00400864 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400864:	6301      	str	r1, [r0, #48]	; 0x30
  400866:	4770      	bx	lr

00400868 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400868:	6341      	str	r1, [r0, #52]	; 0x34
  40086a:	4770      	bx	lr

0040086c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40086c:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40086e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400872:	d03a      	beq.n	4008ea <pio_set_peripheral+0x7e>
  400874:	d813      	bhi.n	40089e <pio_set_peripheral+0x32>
  400876:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40087a:	d025      	beq.n	4008c8 <pio_set_peripheral+0x5c>
  40087c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400880:	d10a      	bne.n	400898 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400882:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400884:	4313      	orrs	r3, r2
  400886:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400888:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40088a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40088c:	400b      	ands	r3, r1
  40088e:	ea23 0302 	bic.w	r3, r3, r2
  400892:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400894:	6042      	str	r2, [r0, #4]
  400896:	4770      	bx	lr
	switch (ul_type) {
  400898:	2900      	cmp	r1, #0
  40089a:	d1fb      	bne.n	400894 <pio_set_peripheral+0x28>
  40089c:	4770      	bx	lr
  40089e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4008a2:	d021      	beq.n	4008e8 <pio_set_peripheral+0x7c>
  4008a4:	d809      	bhi.n	4008ba <pio_set_peripheral+0x4e>
  4008a6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4008aa:	d1f3      	bne.n	400894 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4008ac:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4008ae:	4313      	orrs	r3, r2
  4008b0:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4008b2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4008b4:	4313      	orrs	r3, r2
  4008b6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4008b8:	e7ec      	b.n	400894 <pio_set_peripheral+0x28>
	switch (ul_type) {
  4008ba:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4008be:	d013      	beq.n	4008e8 <pio_set_peripheral+0x7c>
  4008c0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4008c4:	d010      	beq.n	4008e8 <pio_set_peripheral+0x7c>
  4008c6:	e7e5      	b.n	400894 <pio_set_peripheral+0x28>
{
  4008c8:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4008ca:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4008cc:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4008ce:	43d3      	mvns	r3, r2
  4008d0:	4021      	ands	r1, r4
  4008d2:	461c      	mov	r4, r3
  4008d4:	4019      	ands	r1, r3
  4008d6:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4008d8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4008da:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4008dc:	400b      	ands	r3, r1
  4008de:	4023      	ands	r3, r4
  4008e0:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4008e2:	6042      	str	r2, [r0, #4]
}
  4008e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008e8:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4008ea:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4008ec:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4008ee:	400b      	ands	r3, r1
  4008f0:	ea23 0302 	bic.w	r3, r3, r2
  4008f4:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4008f6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4008f8:	4313      	orrs	r3, r2
  4008fa:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4008fc:	e7ca      	b.n	400894 <pio_set_peripheral+0x28>

004008fe <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4008fe:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400900:	f012 0f01 	tst.w	r2, #1
  400904:	d10d      	bne.n	400922 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400906:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400908:	f012 0f0a 	tst.w	r2, #10
  40090c:	d00b      	beq.n	400926 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  40090e:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400910:	f012 0f02 	tst.w	r2, #2
  400914:	d109      	bne.n	40092a <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400916:	f012 0f08 	tst.w	r2, #8
  40091a:	d008      	beq.n	40092e <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  40091c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400920:	e005      	b.n	40092e <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400922:	6641      	str	r1, [r0, #100]	; 0x64
  400924:	e7f0      	b.n	400908 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400926:	6241      	str	r1, [r0, #36]	; 0x24
  400928:	e7f2      	b.n	400910 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  40092a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  40092e:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400930:	6001      	str	r1, [r0, #0]
  400932:	4770      	bx	lr

00400934 <pio_set_output>:
{
  400934:	b410      	push	{r4}
  400936:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400938:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40093a:	b94c      	cbnz	r4, 400950 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  40093c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  40093e:	b14b      	cbz	r3, 400954 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400940:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400942:	b94a      	cbnz	r2, 400958 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400944:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400946:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400948:	6001      	str	r1, [r0, #0]
}
  40094a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40094e:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400950:	6641      	str	r1, [r0, #100]	; 0x64
  400952:	e7f4      	b.n	40093e <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400954:	6541      	str	r1, [r0, #84]	; 0x54
  400956:	e7f4      	b.n	400942 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400958:	6301      	str	r1, [r0, #48]	; 0x30
  40095a:	e7f4      	b.n	400946 <pio_set_output+0x12>

0040095c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40095c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40095e:	4770      	bx	lr

00400960 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400960:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400962:	4770      	bx	lr

00400964 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400964:	b570      	push	{r4, r5, r6, lr}
  400966:	b082      	sub	sp, #8
  400968:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40096a:	4c46      	ldr	r4, [pc, #280]	; (400a84 <pio_configure_pin+0x120>)
  40096c:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  400970:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  400972:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  400976:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40097a:	d059      	beq.n	400a30 <pio_configure_pin+0xcc>
  40097c:	d80a      	bhi.n	400994 <pio_configure_pin+0x30>
  40097e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400982:	d02f      	beq.n	4009e4 <pio_configure_pin+0x80>
  400984:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400988:	d03f      	beq.n	400a0a <pio_configure_pin+0xa6>
  40098a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40098e:	d016      	beq.n	4009be <pio_configure_pin+0x5a>
		return 0;
  400990:	2000      	movs	r0, #0
  400992:	e012      	b.n	4009ba <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  400994:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400998:	d05d      	beq.n	400a56 <pio_configure_pin+0xf2>
  40099a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40099e:	d05a      	beq.n	400a56 <pio_configure_pin+0xf2>
  4009a0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4009a4:	d1f4      	bne.n	400990 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4009a6:	f000 011f 	and.w	r1, r0, #31
  4009aa:	2601      	movs	r6, #1
  4009ac:	462a      	mov	r2, r5
  4009ae:	fa06 f101 	lsl.w	r1, r6, r1
  4009b2:	4620      	mov	r0, r4
  4009b4:	4b34      	ldr	r3, [pc, #208]	; (400a88 <pio_configure_pin+0x124>)
  4009b6:	4798      	blx	r3
	return 1;
  4009b8:	4630      	mov	r0, r6
}
  4009ba:	b002      	add	sp, #8
  4009bc:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4009be:	f000 001f 	and.w	r0, r0, #31
  4009c2:	2601      	movs	r6, #1
  4009c4:	4086      	lsls	r6, r0
  4009c6:	4632      	mov	r2, r6
  4009c8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4009cc:	4620      	mov	r0, r4
  4009ce:	4b2f      	ldr	r3, [pc, #188]	; (400a8c <pio_configure_pin+0x128>)
  4009d0:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4009d2:	f015 0f01 	tst.w	r5, #1
  4009d6:	d102      	bne.n	4009de <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  4009d8:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4009da:	2001      	movs	r0, #1
  4009dc:	e7ed      	b.n	4009ba <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4009de:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4009e0:	2001      	movs	r0, #1
  4009e2:	e7ea      	b.n	4009ba <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4009e4:	f000 001f 	and.w	r0, r0, #31
  4009e8:	2601      	movs	r6, #1
  4009ea:	4086      	lsls	r6, r0
  4009ec:	4632      	mov	r2, r6
  4009ee:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4009f2:	4620      	mov	r0, r4
  4009f4:	4b25      	ldr	r3, [pc, #148]	; (400a8c <pio_configure_pin+0x128>)
  4009f6:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4009f8:	f015 0f01 	tst.w	r5, #1
  4009fc:	d102      	bne.n	400a04 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  4009fe:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  400a00:	2001      	movs	r0, #1
  400a02:	e7da      	b.n	4009ba <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  400a04:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  400a06:	2001      	movs	r0, #1
  400a08:	e7d7      	b.n	4009ba <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400a0a:	f000 001f 	and.w	r0, r0, #31
  400a0e:	2601      	movs	r6, #1
  400a10:	4086      	lsls	r6, r0
  400a12:	4632      	mov	r2, r6
  400a14:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400a18:	4620      	mov	r0, r4
  400a1a:	4b1c      	ldr	r3, [pc, #112]	; (400a8c <pio_configure_pin+0x128>)
  400a1c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400a1e:	f015 0f01 	tst.w	r5, #1
  400a22:	d102      	bne.n	400a2a <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  400a24:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  400a26:	2001      	movs	r0, #1
  400a28:	e7c7      	b.n	4009ba <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  400a2a:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  400a2c:	2001      	movs	r0, #1
  400a2e:	e7c4      	b.n	4009ba <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400a30:	f000 001f 	and.w	r0, r0, #31
  400a34:	2601      	movs	r6, #1
  400a36:	4086      	lsls	r6, r0
  400a38:	4632      	mov	r2, r6
  400a3a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400a3e:	4620      	mov	r0, r4
  400a40:	4b12      	ldr	r3, [pc, #72]	; (400a8c <pio_configure_pin+0x128>)
  400a42:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400a44:	f015 0f01 	tst.w	r5, #1
  400a48:	d102      	bne.n	400a50 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  400a4a:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  400a4c:	2001      	movs	r0, #1
  400a4e:	e7b4      	b.n	4009ba <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  400a50:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  400a52:	2001      	movs	r0, #1
  400a54:	e7b1      	b.n	4009ba <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400a56:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400a5a:	f000 011f 	and.w	r1, r0, #31
  400a5e:	2601      	movs	r6, #1
  400a60:	ea05 0306 	and.w	r3, r5, r6
  400a64:	9300      	str	r3, [sp, #0]
  400a66:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400a6a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400a6e:	bf14      	ite	ne
  400a70:	2200      	movne	r2, #0
  400a72:	2201      	moveq	r2, #1
  400a74:	fa06 f101 	lsl.w	r1, r6, r1
  400a78:	4620      	mov	r0, r4
  400a7a:	4c05      	ldr	r4, [pc, #20]	; (400a90 <pio_configure_pin+0x12c>)
  400a7c:	47a0      	blx	r4
	return 1;
  400a7e:	4630      	mov	r0, r6
		break;
  400a80:	e79b      	b.n	4009ba <pio_configure_pin+0x56>
  400a82:	bf00      	nop
  400a84:	00200707 	.word	0x00200707
  400a88:	004008ff 	.word	0x004008ff
  400a8c:	0040086d 	.word	0x0040086d
  400a90:	00400935 	.word	0x00400935

00400a94 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400a98:	4604      	mov	r4, r0
  400a9a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400a9c:	4b0e      	ldr	r3, [pc, #56]	; (400ad8 <pio_handler_process+0x44>)
  400a9e:	4798      	blx	r3
  400aa0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400aa2:	4620      	mov	r0, r4
  400aa4:	4b0d      	ldr	r3, [pc, #52]	; (400adc <pio_handler_process+0x48>)
  400aa6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400aa8:	4005      	ands	r5, r0
  400aaa:	d013      	beq.n	400ad4 <pio_handler_process+0x40>
  400aac:	4c0c      	ldr	r4, [pc, #48]	; (400ae0 <pio_handler_process+0x4c>)
  400aae:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400ab2:	e003      	b.n	400abc <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400ab4:	42b4      	cmp	r4, r6
  400ab6:	d00d      	beq.n	400ad4 <pio_handler_process+0x40>
  400ab8:	3410      	adds	r4, #16
		while (status != 0) {
  400aba:	b15d      	cbz	r5, 400ad4 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400abc:	6820      	ldr	r0, [r4, #0]
  400abe:	4540      	cmp	r0, r8
  400ac0:	d1f8      	bne.n	400ab4 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400ac2:	6861      	ldr	r1, [r4, #4]
  400ac4:	4229      	tst	r1, r5
  400ac6:	d0f5      	beq.n	400ab4 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400ac8:	68e3      	ldr	r3, [r4, #12]
  400aca:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400acc:	6863      	ldr	r3, [r4, #4]
  400ace:	ea25 0503 	bic.w	r5, r5, r3
  400ad2:	e7ef      	b.n	400ab4 <pio_handler_process+0x20>
  400ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400ad8:	0040095d 	.word	0x0040095d
  400adc:	00400961 	.word	0x00400961
  400ae0:	20400a1c 	.word	0x20400a1c

00400ae4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400ae4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400ae6:	210a      	movs	r1, #10
  400ae8:	4801      	ldr	r0, [pc, #4]	; (400af0 <PIOA_Handler+0xc>)
  400aea:	4b02      	ldr	r3, [pc, #8]	; (400af4 <PIOA_Handler+0x10>)
  400aec:	4798      	blx	r3
  400aee:	bd08      	pop	{r3, pc}
  400af0:	400e0e00 	.word	0x400e0e00
  400af4:	00400a95 	.word	0x00400a95

00400af8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400af8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400afa:	210b      	movs	r1, #11
  400afc:	4801      	ldr	r0, [pc, #4]	; (400b04 <PIOB_Handler+0xc>)
  400afe:	4b02      	ldr	r3, [pc, #8]	; (400b08 <PIOB_Handler+0x10>)
  400b00:	4798      	blx	r3
  400b02:	bd08      	pop	{r3, pc}
  400b04:	400e1000 	.word	0x400e1000
  400b08:	00400a95 	.word	0x00400a95

00400b0c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400b0c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400b0e:	210c      	movs	r1, #12
  400b10:	4801      	ldr	r0, [pc, #4]	; (400b18 <PIOC_Handler+0xc>)
  400b12:	4b02      	ldr	r3, [pc, #8]	; (400b1c <PIOC_Handler+0x10>)
  400b14:	4798      	blx	r3
  400b16:	bd08      	pop	{r3, pc}
  400b18:	400e1200 	.word	0x400e1200
  400b1c:	00400a95 	.word	0x00400a95

00400b20 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400b20:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400b22:	2110      	movs	r1, #16
  400b24:	4801      	ldr	r0, [pc, #4]	; (400b2c <PIOD_Handler+0xc>)
  400b26:	4b02      	ldr	r3, [pc, #8]	; (400b30 <PIOD_Handler+0x10>)
  400b28:	4798      	blx	r3
  400b2a:	bd08      	pop	{r3, pc}
  400b2c:	400e1400 	.word	0x400e1400
  400b30:	00400a95 	.word	0x00400a95

00400b34 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400b34:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400b36:	2111      	movs	r1, #17
  400b38:	4801      	ldr	r0, [pc, #4]	; (400b40 <PIOE_Handler+0xc>)
  400b3a:	4b02      	ldr	r3, [pc, #8]	; (400b44 <PIOE_Handler+0x10>)
  400b3c:	4798      	blx	r3
  400b3e:	bd08      	pop	{r3, pc}
  400b40:	400e1600 	.word	0x400e1600
  400b44:	00400a95 	.word	0x00400a95

00400b48 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400b48:	2803      	cmp	r0, #3
  400b4a:	d011      	beq.n	400b70 <pmc_mck_set_division+0x28>
  400b4c:	2804      	cmp	r0, #4
  400b4e:	d012      	beq.n	400b76 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400b50:	2802      	cmp	r0, #2
  400b52:	bf0c      	ite	eq
  400b54:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400b58:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400b5a:	4a08      	ldr	r2, [pc, #32]	; (400b7c <pmc_mck_set_division+0x34>)
  400b5c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400b62:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400b64:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400b66:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b68:	f013 0f08 	tst.w	r3, #8
  400b6c:	d0fb      	beq.n	400b66 <pmc_mck_set_division+0x1e>
}
  400b6e:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400b70:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400b74:	e7f1      	b.n	400b5a <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400b76:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400b7a:	e7ee      	b.n	400b5a <pmc_mck_set_division+0x12>
  400b7c:	400e0600 	.word	0x400e0600

00400b80 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400b80:	4a17      	ldr	r2, [pc, #92]	; (400be0 <pmc_switch_mck_to_pllack+0x60>)
  400b82:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400b88:	4318      	orrs	r0, r3
  400b8a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400b8c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b8e:	f013 0f08 	tst.w	r3, #8
  400b92:	d10a      	bne.n	400baa <pmc_switch_mck_to_pllack+0x2a>
  400b94:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400b98:	4911      	ldr	r1, [pc, #68]	; (400be0 <pmc_switch_mck_to_pllack+0x60>)
  400b9a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400b9c:	f012 0f08 	tst.w	r2, #8
  400ba0:	d103      	bne.n	400baa <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400ba2:	3b01      	subs	r3, #1
  400ba4:	d1f9      	bne.n	400b9a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400ba6:	2001      	movs	r0, #1
  400ba8:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400baa:	4a0d      	ldr	r2, [pc, #52]	; (400be0 <pmc_switch_mck_to_pllack+0x60>)
  400bac:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400bae:	f023 0303 	bic.w	r3, r3, #3
  400bb2:	f043 0302 	orr.w	r3, r3, #2
  400bb6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400bb8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400bba:	f013 0f08 	tst.w	r3, #8
  400bbe:	d10a      	bne.n	400bd6 <pmc_switch_mck_to_pllack+0x56>
  400bc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400bc4:	4906      	ldr	r1, [pc, #24]	; (400be0 <pmc_switch_mck_to_pllack+0x60>)
  400bc6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400bc8:	f012 0f08 	tst.w	r2, #8
  400bcc:	d105      	bne.n	400bda <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400bce:	3b01      	subs	r3, #1
  400bd0:	d1f9      	bne.n	400bc6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400bd2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400bd4:	4770      	bx	lr
	return 0;
  400bd6:	2000      	movs	r0, #0
  400bd8:	4770      	bx	lr
  400bda:	2000      	movs	r0, #0
  400bdc:	4770      	bx	lr
  400bde:	bf00      	nop
  400be0:	400e0600 	.word	0x400e0600

00400be4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400be4:	b9a0      	cbnz	r0, 400c10 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400be6:	480e      	ldr	r0, [pc, #56]	; (400c20 <pmc_switch_mainck_to_xtal+0x3c>)
  400be8:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400bea:	0209      	lsls	r1, r1, #8
  400bec:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400bee:	4a0d      	ldr	r2, [pc, #52]	; (400c24 <pmc_switch_mainck_to_xtal+0x40>)
  400bf0:	401a      	ands	r2, r3
  400bf2:	4b0d      	ldr	r3, [pc, #52]	; (400c28 <pmc_switch_mainck_to_xtal+0x44>)
  400bf4:	4313      	orrs	r3, r2
  400bf6:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400bf8:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400bfa:	4602      	mov	r2, r0
  400bfc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400bfe:	f013 0f01 	tst.w	r3, #1
  400c02:	d0fb      	beq.n	400bfc <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400c04:	4a06      	ldr	r2, [pc, #24]	; (400c20 <pmc_switch_mainck_to_xtal+0x3c>)
  400c06:	6a11      	ldr	r1, [r2, #32]
  400c08:	4b08      	ldr	r3, [pc, #32]	; (400c2c <pmc_switch_mainck_to_xtal+0x48>)
  400c0a:	430b      	orrs	r3, r1
  400c0c:	6213      	str	r3, [r2, #32]
  400c0e:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400c10:	4903      	ldr	r1, [pc, #12]	; (400c20 <pmc_switch_mainck_to_xtal+0x3c>)
  400c12:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400c14:	4a06      	ldr	r2, [pc, #24]	; (400c30 <pmc_switch_mainck_to_xtal+0x4c>)
  400c16:	401a      	ands	r2, r3
  400c18:	4b06      	ldr	r3, [pc, #24]	; (400c34 <pmc_switch_mainck_to_xtal+0x50>)
  400c1a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400c1c:	620b      	str	r3, [r1, #32]
  400c1e:	4770      	bx	lr
  400c20:	400e0600 	.word	0x400e0600
  400c24:	ffc8fffc 	.word	0xffc8fffc
  400c28:	00370001 	.word	0x00370001
  400c2c:	01370000 	.word	0x01370000
  400c30:	fec8fffc 	.word	0xfec8fffc
  400c34:	01370002 	.word	0x01370002

00400c38 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400c38:	4b02      	ldr	r3, [pc, #8]	; (400c44 <pmc_osc_is_ready_mainck+0xc>)
  400c3a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400c3c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400c40:	4770      	bx	lr
  400c42:	bf00      	nop
  400c44:	400e0600 	.word	0x400e0600

00400c48 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400c48:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400c4c:	4b01      	ldr	r3, [pc, #4]	; (400c54 <pmc_disable_pllack+0xc>)
  400c4e:	629a      	str	r2, [r3, #40]	; 0x28
  400c50:	4770      	bx	lr
  400c52:	bf00      	nop
  400c54:	400e0600 	.word	0x400e0600

00400c58 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400c58:	4b02      	ldr	r3, [pc, #8]	; (400c64 <pmc_is_locked_pllack+0xc>)
  400c5a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400c5c:	f000 0002 	and.w	r0, r0, #2
  400c60:	4770      	bx	lr
  400c62:	bf00      	nop
  400c64:	400e0600 	.word	0x400e0600

00400c68 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400c68:	283f      	cmp	r0, #63	; 0x3f
  400c6a:	d81e      	bhi.n	400caa <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400c6c:	281f      	cmp	r0, #31
  400c6e:	d80c      	bhi.n	400c8a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400c70:	4b11      	ldr	r3, [pc, #68]	; (400cb8 <pmc_enable_periph_clk+0x50>)
  400c72:	699a      	ldr	r2, [r3, #24]
  400c74:	2301      	movs	r3, #1
  400c76:	4083      	lsls	r3, r0
  400c78:	4393      	bics	r3, r2
  400c7a:	d018      	beq.n	400cae <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400c7c:	2301      	movs	r3, #1
  400c7e:	fa03 f000 	lsl.w	r0, r3, r0
  400c82:	4b0d      	ldr	r3, [pc, #52]	; (400cb8 <pmc_enable_periph_clk+0x50>)
  400c84:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400c86:	2000      	movs	r0, #0
  400c88:	4770      	bx	lr
		ul_id -= 32;
  400c8a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400c8c:	4b0a      	ldr	r3, [pc, #40]	; (400cb8 <pmc_enable_periph_clk+0x50>)
  400c8e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400c92:	2301      	movs	r3, #1
  400c94:	4083      	lsls	r3, r0
  400c96:	4393      	bics	r3, r2
  400c98:	d00b      	beq.n	400cb2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400c9a:	2301      	movs	r3, #1
  400c9c:	fa03 f000 	lsl.w	r0, r3, r0
  400ca0:	4b05      	ldr	r3, [pc, #20]	; (400cb8 <pmc_enable_periph_clk+0x50>)
  400ca2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400ca6:	2000      	movs	r0, #0
  400ca8:	4770      	bx	lr
		return 1;
  400caa:	2001      	movs	r0, #1
  400cac:	4770      	bx	lr
	return 0;
  400cae:	2000      	movs	r0, #0
  400cb0:	4770      	bx	lr
  400cb2:	2000      	movs	r0, #0
}
  400cb4:	4770      	bx	lr
  400cb6:	bf00      	nop
  400cb8:	400e0600 	.word	0x400e0600

00400cbc <pmc_pck_set_prescaler>:
 *
 * \param ul_id Peripheral ID.
 * \param ul_pres Prescaler value.
 */
void pmc_pck_set_prescaler(uint32_t ul_id, uint32_t ul_pres)
{
  400cbc:	4a09      	ldr	r2, [pc, #36]	; (400ce4 <pmc_pck_set_prescaler+0x28>)
  400cbe:	eb02 0280 	add.w	r2, r2, r0, lsl #2
	PMC->PMC_PCK[ul_id] =
			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_PRES_Msk) | ul_pres;
  400cc2:	6c13      	ldr	r3, [r2, #64]	; 0x40
  400cc4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
  400cc8:	4319      	orrs	r1, r3
	PMC->PMC_PCK[ul_id] =
  400cca:	6411      	str	r1, [r2, #64]	; 0x40
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  400ccc:	f44f 7380 	mov.w	r3, #256	; 0x100
  400cd0:	fa03 f000 	lsl.w	r0, r3, r0
  400cd4:	4b03      	ldr	r3, [pc, #12]	; (400ce4 <pmc_pck_set_prescaler+0x28>)
  400cd6:	681a      	ldr	r2, [r3, #0]
  400cd8:	4202      	tst	r2, r0
  400cda:	d002      	beq.n	400ce2 <pmc_pck_set_prescaler+0x26>
			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
  400cdc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  400cde:	4210      	tst	r0, r2
  400ce0:	d0f9      	beq.n	400cd6 <pmc_pck_set_prescaler+0x1a>
  400ce2:	4770      	bx	lr
  400ce4:	400e0600 	.word	0x400e0600

00400ce8 <pmc_pck_set_source>:
 *
 * \param ul_id Peripheral ID.
 * \param ul_source Source selection value.
 */
void pmc_pck_set_source(uint32_t ul_id, uint32_t ul_source)
{
  400ce8:	4a09      	ldr	r2, [pc, #36]	; (400d10 <pmc_pck_set_source+0x28>)
  400cea:	eb02 0280 	add.w	r2, r2, r0, lsl #2
	PMC->PMC_PCK[ul_id] =
			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_CSS_Msk) | ul_source;
  400cee:	6c13      	ldr	r3, [r2, #64]	; 0x40
  400cf0:	f023 0307 	bic.w	r3, r3, #7
  400cf4:	4319      	orrs	r1, r3
	PMC->PMC_PCK[ul_id] =
  400cf6:	6411      	str	r1, [r2, #64]	; 0x40
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  400cf8:	f44f 7380 	mov.w	r3, #256	; 0x100
  400cfc:	fa03 f000 	lsl.w	r0, r3, r0
  400d00:	4b03      	ldr	r3, [pc, #12]	; (400d10 <pmc_pck_set_source+0x28>)
  400d02:	681a      	ldr	r2, [r3, #0]
  400d04:	4202      	tst	r2, r0
  400d06:	d002      	beq.n	400d0e <pmc_pck_set_source+0x26>
			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
  400d08:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  400d0a:	4210      	tst	r0, r2
  400d0c:	d0f9      	beq.n	400d02 <pmc_pck_set_source+0x1a>
  400d0e:	4770      	bx	lr
  400d10:	400e0600 	.word	0x400e0600

00400d14 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  400d14:	f44f 7380 	mov.w	r3, #256	; 0x100
  400d18:	fa03 f000 	lsl.w	r0, r3, r0
  400d1c:	4b01      	ldr	r3, [pc, #4]	; (400d24 <pmc_enable_pck+0x10>)
  400d1e:	6018      	str	r0, [r3, #0]
  400d20:	4770      	bx	lr
  400d22:	bf00      	nop
  400d24:	400e0600 	.word	0x400e0600

00400d28 <ssc_reset>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_reset(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_SWRST;
  400d28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400d2c:	6003      	str	r3, [r0, #0]
	p_ssc->SSC_CMR = 0;
  400d2e:	2300      	movs	r3, #0
  400d30:	6043      	str	r3, [r0, #4]
	p_ssc->SSC_RCMR = 0;
  400d32:	6103      	str	r3, [r0, #16]
	p_ssc->SSC_RFMR = 0;
  400d34:	6143      	str	r3, [r0, #20]
	p_ssc->SSC_TCMR = 0;
  400d36:	6183      	str	r3, [r0, #24]
	p_ssc->SSC_TFMR = 0;
  400d38:	61c3      	str	r3, [r0, #28]
  400d3a:	4770      	bx	lr

00400d3c <ssc_enable_rx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_rx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_RXEN;
  400d3c:	2301      	movs	r3, #1
  400d3e:	6003      	str	r3, [r0, #0]
  400d40:	4770      	bx	lr

00400d42 <ssc_disable_rx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_disable_rx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_RXDIS;
  400d42:	2302      	movs	r3, #2
  400d44:	6003      	str	r3, [r0, #0]
  400d46:	4770      	bx	lr

00400d48 <ssc_enable_tx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_tx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_TXEN;
  400d48:	f44f 7380 	mov.w	r3, #256	; 0x100
  400d4c:	6003      	str	r3, [r0, #0]
  400d4e:	4770      	bx	lr

00400d50 <ssc_disable_tx>:
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_disable_tx(Ssc *p_ssc)
{
	p_ssc->SSC_CR = SSC_CR_TXDIS;
  400d50:	f44f 7300 	mov.w	r3, #512	; 0x200
  400d54:	6003      	str	r3, [r0, #0]
  400d56:	4770      	bx	lr

00400d58 <ssc_set_receiver>:
 * \param p_rx_clk_opt Pointer to the receiver clock configuration structure.
 * \param p_rx_data_frame Pointer to the receiver data frame configuration structure.
 */
void ssc_set_receiver(Ssc *p_ssc, clock_opt_t *p_rx_clk_opt,
		data_frame_opt_t *p_rx_data_frame)
{
  400d58:	b430      	push	{r4, r5}
	if (p_rx_clk_opt == NULL) {
  400d5a:	2900      	cmp	r1, #0
  400d5c:	d030      	beq.n	400dc0 <ssc_set_receiver+0x68>
  400d5e:	460c      	mov	r4, r1
		p_ssc->SSC_RCMR = 0;
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  400d60:	6901      	ldr	r1, [r0, #16]
  400d62:	6823      	ldr	r3, [r4, #0]
  400d64:	6865      	ldr	r5, [r4, #4]
  400d66:	432b      	orrs	r3, r5
  400d68:	430b      	orrs	r3, r1
  400d6a:	68a1      	ldr	r1, [r4, #8]
  400d6c:	430b      	orrs	r3, r1
  400d6e:	68e1      	ldr	r1, [r4, #12]
  400d70:	430b      	orrs	r3, r1
  400d72:	69a1      	ldr	r1, [r4, #24]
  400d74:	430b      	orrs	r3, r1
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
				p_rx_clk_opt->ul_ckg |
				p_rx_clk_opt->ul_start_sel |
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
  400d76:	6921      	ldr	r1, [r4, #16]
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  400d78:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  400d7c:	6961      	ldr	r1, [r4, #20]
  400d7e:	0409      	lsls	r1, r1, #16
  400d80:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  400d84:	430b      	orrs	r3, r1
  400d86:	6103      	str	r3, [r0, #16]
	}

	if (p_rx_data_frame == NULL) {
  400d88:	b1ea      	cbz	r2, 400dc6 <ssc_set_receiver+0x6e>
		p_ssc->SSC_RFMR = 0;
	} else {
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400d8a:	6941      	ldr	r1, [r0, #20]
  400d8c:	6853      	ldr	r3, [r2, #4]
  400d8e:	6954      	ldr	r4, [r2, #20]
  400d90:	4323      	orrs	r3, r4
  400d92:	6994      	ldr	r4, [r2, #24]
  400d94:	4323      	orrs	r3, r4
  400d96:	430b      	orrs	r3, r1
  400d98:	6811      	ldr	r1, [r2, #0]
  400d9a:	f001 011f 	and.w	r1, r1, #31
  400d9e:	430b      	orrs	r3, r1
				p_rx_data_frame->ul_msbf |
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
  400da0:	6911      	ldr	r1, [r2, #16]
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400da2:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  400da6:	6891      	ldr	r1, [r2, #8]
  400da8:	0209      	lsls	r1, r1, #8
  400daa:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400dae:	430b      	orrs	r3, r1
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  400db0:	68d2      	ldr	r2, [r2, #12]
  400db2:	0412      	lsls	r2, r2, #16
  400db4:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400db8:	4313      	orrs	r3, r2
  400dba:	6143      	str	r3, [r0, #20]
				p_rx_data_frame->ul_fsos |
				p_rx_data_frame->ul_fsedge;
	}
}
  400dbc:	bc30      	pop	{r4, r5}
  400dbe:	4770      	bx	lr
		p_ssc->SSC_RCMR = 0;
  400dc0:	2300      	movs	r3, #0
  400dc2:	6103      	str	r3, [r0, #16]
  400dc4:	e7e0      	b.n	400d88 <ssc_set_receiver+0x30>
		p_ssc->SSC_RFMR = 0;
  400dc6:	2300      	movs	r3, #0
  400dc8:	6143      	str	r3, [r0, #20]
  400dca:	e7f7      	b.n	400dbc <ssc_set_receiver+0x64>

00400dcc <ssc_set_transmitter>:
 * \param p_tx_clk_opt Pointer to the transmitter clock configuration structure.
 * \param p_tx_data_frame Pointer to the transmitter data frame configuration structure.
 */
void ssc_set_transmitter(Ssc *p_ssc, clock_opt_t *p_tx_clk_opt,
		data_frame_opt_t *p_tx_data_frame)
{
  400dcc:	b430      	push	{r4, r5}
	if (p_tx_clk_opt == NULL) {
  400dce:	2900      	cmp	r1, #0
  400dd0:	d030      	beq.n	400e34 <ssc_set_transmitter+0x68>
  400dd2:	460c      	mov	r4, r1
		p_ssc->SSC_TCMR = 0;
	} else {
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  400dd4:	6981      	ldr	r1, [r0, #24]
  400dd6:	6823      	ldr	r3, [r4, #0]
  400dd8:	6865      	ldr	r5, [r4, #4]
  400dda:	432b      	orrs	r3, r5
  400ddc:	430b      	orrs	r3, r1
  400dde:	68a1      	ldr	r1, [r4, #8]
  400de0:	430b      	orrs	r3, r1
  400de2:	68e1      	ldr	r1, [r4, #12]
  400de4:	430b      	orrs	r3, r1
  400de6:	69a1      	ldr	r1, [r4, #24]
  400de8:	430b      	orrs	r3, r1
				p_tx_clk_opt->ul_cko | p_tx_clk_opt->ul_cki |
				p_tx_clk_opt->ul_ckg |
				p_tx_clk_opt->ul_start_sel |
				SSC_TCMR_PERIOD(p_tx_clk_opt->ul_period) |
  400dea:	6921      	ldr	r1, [r4, #16]
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  400dec:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
				SSC_TCMR_STTDLY(p_tx_clk_opt->ul_sttdly);
  400df0:	6961      	ldr	r1, [r4, #20]
  400df2:	0409      	lsls	r1, r1, #16
  400df4:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
		p_ssc->SSC_TCMR |= p_tx_clk_opt->ul_cks |
  400df8:	430b      	orrs	r3, r1
  400dfa:	6183      	str	r3, [r0, #24]
	}

	if (p_tx_data_frame == NULL) {
  400dfc:	b1ea      	cbz	r2, 400e3a <ssc_set_transmitter+0x6e>
		p_ssc->SSC_TFMR = 0;
	} else {
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  400dfe:	69c1      	ldr	r1, [r0, #28]
  400e00:	6853      	ldr	r3, [r2, #4]
  400e02:	6954      	ldr	r4, [r2, #20]
  400e04:	4323      	orrs	r3, r4
  400e06:	6994      	ldr	r4, [r2, #24]
  400e08:	4323      	orrs	r3, r4
  400e0a:	430b      	orrs	r3, r1
  400e0c:	6811      	ldr	r1, [r2, #0]
  400e0e:	f001 011f 	and.w	r1, r1, #31
  400e12:	430b      	orrs	r3, r1
				p_tx_data_frame->ul_msbf |
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
				SSC_TFMR_FSLEN_EXT(p_tx_data_frame->ul_fslen_ext) |
  400e14:	6911      	ldr	r1, [r2, #16]
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  400e16:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
				SSC_TFMR_DATNB(p_tx_data_frame->ul_datnb) |
  400e1a:	6891      	ldr	r1, [r2, #8]
  400e1c:	0209      	lsls	r1, r1, #8
  400e1e:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  400e22:	430b      	orrs	r3, r1
				SSC_TFMR_FSLEN(p_tx_data_frame->ul_fslen) |
  400e24:	68d2      	ldr	r2, [r2, #12]
  400e26:	0412      	lsls	r2, r2, #16
  400e28:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
		p_ssc->SSC_TFMR |= SSC_RFMR_DATLEN(p_tx_data_frame->ul_datlen) |
  400e2c:	4313      	orrs	r3, r2
  400e2e:	61c3      	str	r3, [r0, #28]
				p_tx_data_frame->ul_fsos |
				p_tx_data_frame->ul_fsedge;
	}
}
  400e30:	bc30      	pop	{r4, r5}
  400e32:	4770      	bx	lr
		p_ssc->SSC_TCMR = 0;
  400e34:	2300      	movs	r3, #0
  400e36:	6183      	str	r3, [r0, #24]
  400e38:	e7e0      	b.n	400dfc <ssc_set_transmitter+0x30>
		p_ssc->SSC_TFMR = 0;
  400e3a:	2300      	movs	r3, #0
  400e3c:	61c3      	str	r3, [r0, #28]
  400e3e:	e7f7      	b.n	400e30 <ssc_set_transmitter+0x64>

00400e40 <ssc_disable_interrupt>:
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void ssc_disable_interrupt(Ssc *p_ssc, uint32_t ul_sources)
{
	p_ssc->SSC_IDR = ul_sources;
  400e40:	6481      	str	r1, [r0, #72]	; 0x48
  400e42:	4770      	bx	lr

00400e44 <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  400e44:	4b28      	ldr	r3, [pc, #160]	; (400ee8 <twihs_set_speed+0xa4>)
  400e46:	4299      	cmp	r1, r3
  400e48:	d84b      	bhi.n	400ee2 <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  400e4a:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  400e4e:	4299      	cmp	r1, r3
  400e50:	d92d      	bls.n	400eae <twihs_set_speed+0x6a>
{
  400e52:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  400e54:	4c25      	ldr	r4, [pc, #148]	; (400eec <twihs_set_speed+0xa8>)
  400e56:	fba4 3402 	umull	r3, r4, r4, r2
  400e5a:	0ba4      	lsrs	r4, r4, #14
  400e5c:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  400e5e:	4b24      	ldr	r3, [pc, #144]	; (400ef0 <twihs_set_speed+0xac>)
  400e60:	440b      	add	r3, r1
  400e62:	009b      	lsls	r3, r3, #2
  400e64:	fbb2 f2f3 	udiv	r2, r2, r3
  400e68:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400e6a:	2cff      	cmp	r4, #255	; 0xff
  400e6c:	d91d      	bls.n	400eaa <twihs_set_speed+0x66>
  400e6e:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  400e70:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  400e72:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400e74:	2cff      	cmp	r4, #255	; 0xff
  400e76:	d901      	bls.n	400e7c <twihs_set_speed+0x38>
  400e78:	2906      	cmp	r1, #6
  400e7a:	d9f9      	bls.n	400e70 <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400e7c:	2aff      	cmp	r2, #255	; 0xff
  400e7e:	d907      	bls.n	400e90 <twihs_set_speed+0x4c>
  400e80:	2906      	cmp	r1, #6
  400e82:	d805      	bhi.n	400e90 <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  400e84:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  400e86:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400e88:	2aff      	cmp	r2, #255	; 0xff
  400e8a:	d901      	bls.n	400e90 <twihs_set_speed+0x4c>
  400e8c:	2906      	cmp	r1, #6
  400e8e:	d9f9      	bls.n	400e84 <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  400e90:	0213      	lsls	r3, r2, #8
  400e92:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  400e94:	0409      	lsls	r1, r1, #16
  400e96:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  400e9a:	430b      	orrs	r3, r1
  400e9c:	b2e4      	uxtb	r4, r4
  400e9e:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  400ea0:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  400ea2:	2000      	movs	r0, #0
}
  400ea4:	f85d 4b04 	ldr.w	r4, [sp], #4
  400ea8:	4770      	bx	lr
	uint32_t ckdiv = 0;
  400eaa:	2100      	movs	r1, #0
  400eac:	e7e6      	b.n	400e7c <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  400eae:	0049      	lsls	r1, r1, #1
  400eb0:	fbb2 f2f1 	udiv	r2, r2, r1
  400eb4:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400eb6:	2aff      	cmp	r2, #255	; 0xff
  400eb8:	d911      	bls.n	400ede <twihs_set_speed+0x9a>
  400eba:	2300      	movs	r3, #0
			ckdiv++;
  400ebc:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  400ebe:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400ec0:	2aff      	cmp	r2, #255	; 0xff
  400ec2:	d901      	bls.n	400ec8 <twihs_set_speed+0x84>
  400ec4:	2b06      	cmp	r3, #6
  400ec6:	d9f9      	bls.n	400ebc <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  400ec8:	0211      	lsls	r1, r2, #8
  400eca:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  400ecc:	041b      	lsls	r3, r3, #16
  400ece:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  400ed2:	430b      	orrs	r3, r1
  400ed4:	b2d2      	uxtb	r2, r2
  400ed6:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  400ed8:	6102      	str	r2, [r0, #16]
	return PASS;
  400eda:	2000      	movs	r0, #0
  400edc:	4770      	bx	lr
	uint32_t ckdiv = 0;
  400ede:	2300      	movs	r3, #0
  400ee0:	e7f2      	b.n	400ec8 <twihs_set_speed+0x84>
		return FAIL;
  400ee2:	2001      	movs	r0, #1
  400ee4:	4770      	bx	lr
  400ee6:	bf00      	nop
  400ee8:	00061a80 	.word	0x00061a80
  400eec:	057619f1 	.word	0x057619f1
  400ef0:	3ffd1200 	.word	0x3ffd1200

00400ef4 <twihs_master_init>:
{
  400ef4:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  400ef6:	f04f 32ff 	mov.w	r2, #4294967295
  400efa:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  400efc:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  400efe:	2280      	movs	r2, #128	; 0x80
  400f00:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  400f02:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  400f04:	2208      	movs	r2, #8
  400f06:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  400f08:	2220      	movs	r2, #32
  400f0a:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  400f0c:	2204      	movs	r2, #4
  400f0e:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  400f10:	680a      	ldr	r2, [r1, #0]
  400f12:	6849      	ldr	r1, [r1, #4]
  400f14:	4b03      	ldr	r3, [pc, #12]	; (400f24 <twihs_master_init+0x30>)
  400f16:	4798      	blx	r3
}
  400f18:	2801      	cmp	r0, #1
  400f1a:	bf14      	ite	ne
  400f1c:	2000      	movne	r0, #0
  400f1e:	2001      	moveq	r0, #1
  400f20:	bd08      	pop	{r3, pc}
  400f22:	bf00      	nop
  400f24:	00400e45 	.word	0x00400e45

00400f28 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  400f28:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  400f2a:	2a00      	cmp	r2, #0
  400f2c:	d04c      	beq.n	400fc8 <twihs_master_read+0xa0>
{
  400f2e:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  400f30:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  400f32:	2600      	movs	r6, #0
  400f34:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  400f36:	684b      	ldr	r3, [r1, #4]
  400f38:	021b      	lsls	r3, r3, #8
  400f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  400f3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  400f42:	7c0d      	ldrb	r5, [r1, #16]
  400f44:	042d      	lsls	r5, r5, #16
  400f46:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  400f4a:	432b      	orrs	r3, r5
  400f4c:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  400f4e:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  400f50:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  400f52:	b15d      	cbz	r5, 400f6c <twihs_master_read+0x44>
	val = addr[0];
  400f54:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  400f56:	2d01      	cmp	r5, #1
  400f58:	dd02      	ble.n	400f60 <twihs_master_read+0x38>
		val |= addr[1];
  400f5a:	784e      	ldrb	r6, [r1, #1]
  400f5c:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	if (len > 2) {
  400f60:	2d02      	cmp	r5, #2
  400f62:	dd04      	ble.n	400f6e <twihs_master_read+0x46>
		val |= addr[2];
  400f64:	7889      	ldrb	r1, [r1, #2]
  400f66:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  400f6a:	e000      	b.n	400f6e <twihs_master_read+0x46>
		return 0;
  400f6c:	2300      	movs	r3, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  400f6e:	60c3      	str	r3, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  400f70:	2301      	movs	r3, #1
  400f72:	6003      	str	r3, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  400f74:	2502      	movs	r5, #2
  400f76:	e012      	b.n	400f9e <twihs_master_read+0x76>
  400f78:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  400f7a:	f013 0f02 	tst.w	r3, #2
  400f7e:	d01b      	beq.n	400fb8 <twihs_master_read+0x90>
		*buffer++ = p_twihs->TWIHS_RHR;
  400f80:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400f82:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  400f84:	6a03      	ldr	r3, [r0, #32]
  400f86:	f013 0f01 	tst.w	r3, #1
  400f8a:	d0fb      	beq.n	400f84 <twihs_master_read+0x5c>
	p_twihs->TWIHS_SR;
  400f8c:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  400f8e:	2000      	movs	r0, #0
}
  400f90:	bc70      	pop	{r4, r5, r6}
  400f92:	4770      	bx	lr
		*buffer++ = p_twihs->TWIHS_RHR;
  400f94:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400f96:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt > 0) {
  400f9a:	3a01      	subs	r2, #1
  400f9c:	d0f2      	beq.n	400f84 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  400f9e:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  400fa0:	f413 7f80 	tst.w	r3, #256	; 0x100
  400fa4:	d114      	bne.n	400fd0 <twihs_master_read+0xa8>
  400fa6:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  400faa:	2a01      	cmp	r2, #1
  400fac:	d0e4      	beq.n	400f78 <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  400fae:	f013 0f02 	tst.w	r3, #2
  400fb2:	d1ef      	bne.n	400f94 <twihs_master_read+0x6c>
	while (cnt > 0) {
  400fb4:	2a00      	cmp	r2, #0
  400fb6:	d0e5      	beq.n	400f84 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  400fb8:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  400fba:	f413 7f80 	tst.w	r3, #256	; 0x100
  400fbe:	d105      	bne.n	400fcc <twihs_master_read+0xa4>
		if (!timeout--) {
  400fc0:	3901      	subs	r1, #1
  400fc2:	d1f2      	bne.n	400faa <twihs_master_read+0x82>
			return TWIHS_ERROR_TIMEOUT;
  400fc4:	2009      	movs	r0, #9
  400fc6:	e7e3      	b.n	400f90 <twihs_master_read+0x68>
		return TWIHS_INVALID_ARGUMENT;
  400fc8:	2001      	movs	r0, #1
  400fca:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  400fcc:	2005      	movs	r0, #5
  400fce:	e7df      	b.n	400f90 <twihs_master_read+0x68>
  400fd0:	2005      	movs	r0, #5
  400fd2:	e7dd      	b.n	400f90 <twihs_master_read+0x68>

00400fd4 <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  400fd4:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  400fd6:	2b00      	cmp	r3, #0
  400fd8:	d043      	beq.n	401062 <twihs_master_write+0x8e>
{
  400fda:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  400fdc:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  400fde:	2600      	movs	r6, #0
  400fe0:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  400fe2:	7c0a      	ldrb	r2, [r1, #16]
  400fe4:	0412      	lsls	r2, r2, #16
  400fe6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  400fea:	684d      	ldr	r5, [r1, #4]
  400fec:	022d      	lsls	r5, r5, #8
  400fee:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  400ff2:	432a      	orrs	r2, r5
  400ff4:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  400ff6:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  400ff8:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  400ffa:	b15d      	cbz	r5, 401014 <twihs_master_write+0x40>
	val = addr[0];
  400ffc:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  400ffe:	2d01      	cmp	r5, #1
  401000:	dd02      	ble.n	401008 <twihs_master_write+0x34>
		val |= addr[1];
  401002:	784e      	ldrb	r6, [r1, #1]
  401004:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  401008:	2d02      	cmp	r5, #2
  40100a:	dd04      	ble.n	401016 <twihs_master_write+0x42>
		val |= addr[2];
  40100c:	7889      	ldrb	r1, [r1, #2]
  40100e:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  401012:	e000      	b.n	401016 <twihs_master_write+0x42>
		return 0;
  401014:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401016:	60c2      	str	r2, [r0, #12]
  401018:	e004      	b.n	401024 <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  40101a:	f814 2b01 	ldrb.w	r2, [r4], #1
  40101e:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  401020:	3b01      	subs	r3, #1
  401022:	d00f      	beq.n	401044 <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  401024:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401026:	f412 7f80 	tst.w	r2, #256	; 0x100
  40102a:	d11e      	bne.n	40106a <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  40102c:	f012 0f04 	tst.w	r2, #4
  401030:	d1f3      	bne.n	40101a <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  401032:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401034:	f412 7f80 	tst.w	r2, #256	; 0x100
  401038:	d115      	bne.n	401066 <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  40103a:	f012 0f04 	tst.w	r2, #4
  40103e:	d1ec      	bne.n	40101a <twihs_master_write+0x46>
	while (cnt > 0) {
  401040:	2b00      	cmp	r3, #0
  401042:	d1f6      	bne.n	401032 <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  401044:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401046:	f413 7f80 	tst.w	r3, #256	; 0x100
  40104a:	d111      	bne.n	401070 <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  40104c:	f013 0f04 	tst.w	r3, #4
  401050:	d0f8      	beq.n	401044 <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401052:	2302      	movs	r3, #2
  401054:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401056:	6a03      	ldr	r3, [r0, #32]
  401058:	f013 0f01 	tst.w	r3, #1
  40105c:	d0fb      	beq.n	401056 <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  40105e:	2000      	movs	r0, #0
  401060:	e004      	b.n	40106c <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  401062:	2001      	movs	r0, #1
  401064:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401066:	2005      	movs	r0, #5
  401068:	e000      	b.n	40106c <twihs_master_write+0x98>
  40106a:	2005      	movs	r0, #5
}
  40106c:	bc70      	pop	{r4, r5, r6}
  40106e:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401070:	2005      	movs	r0, #5
  401072:	e7fb      	b.n	40106c <twihs_master_write+0x98>

00401074 <xdmac_configure_transfer>:
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  401074:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  401078:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  40107a:	6853      	ldr	r3, [r2, #4]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  40107c:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  40107e:	6893      	ldr	r3, [r2, #8]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  401080:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  401082:	6813      	ldr	r3, [r2, #0]
  401084:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401088:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  40108a:	6913      	ldr	r3, [r2, #16]
  40108c:	f3c3 030b 	ubfx	r3, r3, #0, #12
  401090:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  401092:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  401094:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  401096:	6993      	ldr	r3, [r2, #24]
  401098:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40109c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  4010a0:	69d3      	ldr	r3, [r2, #28]
  4010a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4010a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  4010aa:	68d3      	ldr	r3, [r2, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  4010ac:	678b      	str	r3, [r1, #120]	; 0x78
  4010ae:	4770      	bx	lr

004010b0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4010b0:	e7fe      	b.n	4010b0 <Dummy_Handler>
	...

004010b4 <Reset_Handler>:
{
  4010b4:	b500      	push	{lr}
  4010b6:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4010b8:	4b25      	ldr	r3, [pc, #148]	; (401150 <Reset_Handler+0x9c>)
  4010ba:	4a26      	ldr	r2, [pc, #152]	; (401154 <Reset_Handler+0xa0>)
  4010bc:	429a      	cmp	r2, r3
  4010be:	d010      	beq.n	4010e2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4010c0:	4b25      	ldr	r3, [pc, #148]	; (401158 <Reset_Handler+0xa4>)
  4010c2:	4a23      	ldr	r2, [pc, #140]	; (401150 <Reset_Handler+0x9c>)
  4010c4:	429a      	cmp	r2, r3
  4010c6:	d20c      	bcs.n	4010e2 <Reset_Handler+0x2e>
  4010c8:	3b01      	subs	r3, #1
  4010ca:	1a9b      	subs	r3, r3, r2
  4010cc:	f023 0303 	bic.w	r3, r3, #3
  4010d0:	3304      	adds	r3, #4
  4010d2:	4413      	add	r3, r2
  4010d4:	491f      	ldr	r1, [pc, #124]	; (401154 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4010d6:	f851 0b04 	ldr.w	r0, [r1], #4
  4010da:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4010de:	429a      	cmp	r2, r3
  4010e0:	d1f9      	bne.n	4010d6 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4010e2:	4b1e      	ldr	r3, [pc, #120]	; (40115c <Reset_Handler+0xa8>)
  4010e4:	4a1e      	ldr	r2, [pc, #120]	; (401160 <Reset_Handler+0xac>)
  4010e6:	429a      	cmp	r2, r3
  4010e8:	d20a      	bcs.n	401100 <Reset_Handler+0x4c>
  4010ea:	3b01      	subs	r3, #1
  4010ec:	1a9b      	subs	r3, r3, r2
  4010ee:	f023 0303 	bic.w	r3, r3, #3
  4010f2:	3304      	adds	r3, #4
  4010f4:	4413      	add	r3, r2
                *pDest++ = 0;
  4010f6:	2100      	movs	r1, #0
  4010f8:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4010fc:	4293      	cmp	r3, r2
  4010fe:	d1fb      	bne.n	4010f8 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401100:	4a18      	ldr	r2, [pc, #96]	; (401164 <Reset_Handler+0xb0>)
  401102:	4b19      	ldr	r3, [pc, #100]	; (401168 <Reset_Handler+0xb4>)
  401104:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401108:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40110a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40110e:	fab3 f383 	clz	r3, r3
  401112:	095b      	lsrs	r3, r3, #5
  401114:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401116:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401118:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40111c:	2200      	movs	r2, #0
  40111e:	4b13      	ldr	r3, [pc, #76]	; (40116c <Reset_Handler+0xb8>)
  401120:	701a      	strb	r2, [r3, #0]
	return flags;
  401122:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401124:	4a12      	ldr	r2, [pc, #72]	; (401170 <Reset_Handler+0xbc>)
  401126:	6813      	ldr	r3, [r2, #0]
  401128:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40112c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40112e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401132:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401136:	b129      	cbz	r1, 401144 <Reset_Handler+0x90>
		cpu_irq_enable();
  401138:	2201      	movs	r2, #1
  40113a:	4b0c      	ldr	r3, [pc, #48]	; (40116c <Reset_Handler+0xb8>)
  40113c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40113e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401142:	b662      	cpsie	i
        __libc_init_array();
  401144:	4b0b      	ldr	r3, [pc, #44]	; (401174 <Reset_Handler+0xc0>)
  401146:	4798      	blx	r3
        main();
  401148:	4b0b      	ldr	r3, [pc, #44]	; (401178 <Reset_Handler+0xc4>)
  40114a:	4798      	blx	r3
  40114c:	e7fe      	b.n	40114c <Reset_Handler+0x98>
  40114e:	bf00      	nop
  401150:	20400000 	.word	0x20400000
  401154:	0040452c 	.word	0x0040452c
  401158:	204009c0 	.word	0x204009c0
  40115c:	20401300 	.word	0x20401300
  401160:	204009c0 	.word	0x204009c0
  401164:	e000ed00 	.word	0xe000ed00
  401168:	00400000 	.word	0x00400000
  40116c:	2040000a 	.word	0x2040000a
  401170:	e000ed88 	.word	0xe000ed88
  401174:	00401521 	.word	0x00401521
  401178:	004013cd 	.word	0x004013cd

0040117c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  40117c:	4b3b      	ldr	r3, [pc, #236]	; (40126c <SystemCoreClockUpdate+0xf0>)
  40117e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401180:	f003 0303 	and.w	r3, r3, #3
  401184:	2b01      	cmp	r3, #1
  401186:	d01d      	beq.n	4011c4 <SystemCoreClockUpdate+0x48>
  401188:	b183      	cbz	r3, 4011ac <SystemCoreClockUpdate+0x30>
  40118a:	2b02      	cmp	r3, #2
  40118c:	d036      	beq.n	4011fc <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40118e:	4b37      	ldr	r3, [pc, #220]	; (40126c <SystemCoreClockUpdate+0xf0>)
  401190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401192:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401196:	2b70      	cmp	r3, #112	; 0x70
  401198:	d05f      	beq.n	40125a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40119a:	4b34      	ldr	r3, [pc, #208]	; (40126c <SystemCoreClockUpdate+0xf0>)
  40119c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40119e:	4934      	ldr	r1, [pc, #208]	; (401270 <SystemCoreClockUpdate+0xf4>)
  4011a0:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4011a4:	680b      	ldr	r3, [r1, #0]
  4011a6:	40d3      	lsrs	r3, r2
  4011a8:	600b      	str	r3, [r1, #0]
  4011aa:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4011ac:	4b31      	ldr	r3, [pc, #196]	; (401274 <SystemCoreClockUpdate+0xf8>)
  4011ae:	695b      	ldr	r3, [r3, #20]
  4011b0:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4011b4:	bf14      	ite	ne
  4011b6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4011ba:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4011be:	4b2c      	ldr	r3, [pc, #176]	; (401270 <SystemCoreClockUpdate+0xf4>)
  4011c0:	601a      	str	r2, [r3, #0]
  4011c2:	e7e4      	b.n	40118e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4011c4:	4b29      	ldr	r3, [pc, #164]	; (40126c <SystemCoreClockUpdate+0xf0>)
  4011c6:	6a1b      	ldr	r3, [r3, #32]
  4011c8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4011cc:	d003      	beq.n	4011d6 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4011ce:	4a2a      	ldr	r2, [pc, #168]	; (401278 <SystemCoreClockUpdate+0xfc>)
  4011d0:	4b27      	ldr	r3, [pc, #156]	; (401270 <SystemCoreClockUpdate+0xf4>)
  4011d2:	601a      	str	r2, [r3, #0]
  4011d4:	e7db      	b.n	40118e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4011d6:	4a29      	ldr	r2, [pc, #164]	; (40127c <SystemCoreClockUpdate+0x100>)
  4011d8:	4b25      	ldr	r3, [pc, #148]	; (401270 <SystemCoreClockUpdate+0xf4>)
  4011da:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4011dc:	4b23      	ldr	r3, [pc, #140]	; (40126c <SystemCoreClockUpdate+0xf0>)
  4011de:	6a1b      	ldr	r3, [r3, #32]
  4011e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4011e4:	2b10      	cmp	r3, #16
  4011e6:	d005      	beq.n	4011f4 <SystemCoreClockUpdate+0x78>
  4011e8:	2b20      	cmp	r3, #32
  4011ea:	d1d0      	bne.n	40118e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4011ec:	4a22      	ldr	r2, [pc, #136]	; (401278 <SystemCoreClockUpdate+0xfc>)
  4011ee:	4b20      	ldr	r3, [pc, #128]	; (401270 <SystemCoreClockUpdate+0xf4>)
  4011f0:	601a      	str	r2, [r3, #0]
          break;
  4011f2:	e7cc      	b.n	40118e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4011f4:	4a22      	ldr	r2, [pc, #136]	; (401280 <SystemCoreClockUpdate+0x104>)
  4011f6:	4b1e      	ldr	r3, [pc, #120]	; (401270 <SystemCoreClockUpdate+0xf4>)
  4011f8:	601a      	str	r2, [r3, #0]
          break;
  4011fa:	e7c8      	b.n	40118e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4011fc:	4b1b      	ldr	r3, [pc, #108]	; (40126c <SystemCoreClockUpdate+0xf0>)
  4011fe:	6a1b      	ldr	r3, [r3, #32]
  401200:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401204:	d016      	beq.n	401234 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401206:	4a1c      	ldr	r2, [pc, #112]	; (401278 <SystemCoreClockUpdate+0xfc>)
  401208:	4b19      	ldr	r3, [pc, #100]	; (401270 <SystemCoreClockUpdate+0xf4>)
  40120a:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  40120c:	4b17      	ldr	r3, [pc, #92]	; (40126c <SystemCoreClockUpdate+0xf0>)
  40120e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401210:	f003 0303 	and.w	r3, r3, #3
  401214:	2b02      	cmp	r3, #2
  401216:	d1ba      	bne.n	40118e <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401218:	4a14      	ldr	r2, [pc, #80]	; (40126c <SystemCoreClockUpdate+0xf0>)
  40121a:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40121c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40121e:	4814      	ldr	r0, [pc, #80]	; (401270 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401220:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401224:	6803      	ldr	r3, [r0, #0]
  401226:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40122a:	b2d2      	uxtb	r2, r2
  40122c:	fbb3 f3f2 	udiv	r3, r3, r2
  401230:	6003      	str	r3, [r0, #0]
  401232:	e7ac      	b.n	40118e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401234:	4a11      	ldr	r2, [pc, #68]	; (40127c <SystemCoreClockUpdate+0x100>)
  401236:	4b0e      	ldr	r3, [pc, #56]	; (401270 <SystemCoreClockUpdate+0xf4>)
  401238:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40123a:	4b0c      	ldr	r3, [pc, #48]	; (40126c <SystemCoreClockUpdate+0xf0>)
  40123c:	6a1b      	ldr	r3, [r3, #32]
  40123e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401242:	2b10      	cmp	r3, #16
  401244:	d005      	beq.n	401252 <SystemCoreClockUpdate+0xd6>
  401246:	2b20      	cmp	r3, #32
  401248:	d1e0      	bne.n	40120c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40124a:	4a0b      	ldr	r2, [pc, #44]	; (401278 <SystemCoreClockUpdate+0xfc>)
  40124c:	4b08      	ldr	r3, [pc, #32]	; (401270 <SystemCoreClockUpdate+0xf4>)
  40124e:	601a      	str	r2, [r3, #0]
          break;
  401250:	e7dc      	b.n	40120c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401252:	4a0b      	ldr	r2, [pc, #44]	; (401280 <SystemCoreClockUpdate+0x104>)
  401254:	4b06      	ldr	r3, [pc, #24]	; (401270 <SystemCoreClockUpdate+0xf4>)
  401256:	601a      	str	r2, [r3, #0]
          break;
  401258:	e7d8      	b.n	40120c <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40125a:	4a05      	ldr	r2, [pc, #20]	; (401270 <SystemCoreClockUpdate+0xf4>)
  40125c:	6813      	ldr	r3, [r2, #0]
  40125e:	4909      	ldr	r1, [pc, #36]	; (401284 <SystemCoreClockUpdate+0x108>)
  401260:	fba1 1303 	umull	r1, r3, r1, r3
  401264:	085b      	lsrs	r3, r3, #1
  401266:	6013      	str	r3, [r2, #0]
  401268:	4770      	bx	lr
  40126a:	bf00      	nop
  40126c:	400e0600 	.word	0x400e0600
  401270:	2040000c 	.word	0x2040000c
  401274:	400e1810 	.word	0x400e1810
  401278:	00b71b00 	.word	0x00b71b00
  40127c:	003d0900 	.word	0x003d0900
  401280:	007a1200 	.word	0x007a1200
  401284:	aaaaaaab 	.word	0xaaaaaaab

00401288 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401288:	4b16      	ldr	r3, [pc, #88]	; (4012e4 <system_init_flash+0x5c>)
  40128a:	4298      	cmp	r0, r3
  40128c:	d913      	bls.n	4012b6 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40128e:	4b16      	ldr	r3, [pc, #88]	; (4012e8 <system_init_flash+0x60>)
  401290:	4298      	cmp	r0, r3
  401292:	d915      	bls.n	4012c0 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401294:	4b15      	ldr	r3, [pc, #84]	; (4012ec <system_init_flash+0x64>)
  401296:	4298      	cmp	r0, r3
  401298:	d916      	bls.n	4012c8 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40129a:	4b15      	ldr	r3, [pc, #84]	; (4012f0 <system_init_flash+0x68>)
  40129c:	4298      	cmp	r0, r3
  40129e:	d917      	bls.n	4012d0 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4012a0:	4b14      	ldr	r3, [pc, #80]	; (4012f4 <system_init_flash+0x6c>)
  4012a2:	4298      	cmp	r0, r3
  4012a4:	d918      	bls.n	4012d8 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4012a6:	4b14      	ldr	r3, [pc, #80]	; (4012f8 <system_init_flash+0x70>)
  4012a8:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4012aa:	bf94      	ite	ls
  4012ac:	4a13      	ldrls	r2, [pc, #76]	; (4012fc <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4012ae:	4a14      	ldrhi	r2, [pc, #80]	; (401300 <system_init_flash+0x78>)
  4012b0:	4b14      	ldr	r3, [pc, #80]	; (401304 <system_init_flash+0x7c>)
  4012b2:	601a      	str	r2, [r3, #0]
  4012b4:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4012b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4012ba:	4b12      	ldr	r3, [pc, #72]	; (401304 <system_init_flash+0x7c>)
  4012bc:	601a      	str	r2, [r3, #0]
  4012be:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4012c0:	4a11      	ldr	r2, [pc, #68]	; (401308 <system_init_flash+0x80>)
  4012c2:	4b10      	ldr	r3, [pc, #64]	; (401304 <system_init_flash+0x7c>)
  4012c4:	601a      	str	r2, [r3, #0]
  4012c6:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4012c8:	4a10      	ldr	r2, [pc, #64]	; (40130c <system_init_flash+0x84>)
  4012ca:	4b0e      	ldr	r3, [pc, #56]	; (401304 <system_init_flash+0x7c>)
  4012cc:	601a      	str	r2, [r3, #0]
  4012ce:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4012d0:	4a0f      	ldr	r2, [pc, #60]	; (401310 <system_init_flash+0x88>)
  4012d2:	4b0c      	ldr	r3, [pc, #48]	; (401304 <system_init_flash+0x7c>)
  4012d4:	601a      	str	r2, [r3, #0]
  4012d6:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4012d8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4012dc:	4b09      	ldr	r3, [pc, #36]	; (401304 <system_init_flash+0x7c>)
  4012de:	601a      	str	r2, [r3, #0]
  4012e0:	4770      	bx	lr
  4012e2:	bf00      	nop
  4012e4:	015ef3bf 	.word	0x015ef3bf
  4012e8:	02bde77f 	.word	0x02bde77f
  4012ec:	041cdb3f 	.word	0x041cdb3f
  4012f0:	057bceff 	.word	0x057bceff
  4012f4:	06dac2bf 	.word	0x06dac2bf
  4012f8:	0839b67f 	.word	0x0839b67f
  4012fc:	04000500 	.word	0x04000500
  401300:	04000600 	.word	0x04000600
  401304:	400e0c00 	.word	0x400e0c00
  401308:	04000100 	.word	0x04000100
  40130c:	04000200 	.word	0x04000200
  401310:	04000300 	.word	0x04000300

00401314 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401314:	4b0a      	ldr	r3, [pc, #40]	; (401340 <_sbrk+0x2c>)
  401316:	681b      	ldr	r3, [r3, #0]
  401318:	b153      	cbz	r3, 401330 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40131a:	4b09      	ldr	r3, [pc, #36]	; (401340 <_sbrk+0x2c>)
  40131c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40131e:	181a      	adds	r2, r3, r0
  401320:	4908      	ldr	r1, [pc, #32]	; (401344 <_sbrk+0x30>)
  401322:	4291      	cmp	r1, r2
  401324:	db08      	blt.n	401338 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401326:	4610      	mov	r0, r2
  401328:	4a05      	ldr	r2, [pc, #20]	; (401340 <_sbrk+0x2c>)
  40132a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40132c:	4618      	mov	r0, r3
  40132e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401330:	4a05      	ldr	r2, [pc, #20]	; (401348 <_sbrk+0x34>)
  401332:	4b03      	ldr	r3, [pc, #12]	; (401340 <_sbrk+0x2c>)
  401334:	601a      	str	r2, [r3, #0]
  401336:	e7f0      	b.n	40131a <_sbrk+0x6>
		return (caddr_t) -1;	
  401338:	f04f 30ff 	mov.w	r0, #4294967295
}
  40133c:	4770      	bx	lr
  40133e:	bf00      	nop
  401340:	20400a8c 	.word	0x20400a8c
  401344:	2045fffc 	.word	0x2045fffc
  401348:	20403500 	.word	0x20403500

0040134c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  40134c:	f04f 30ff 	mov.w	r0, #4294967295
  401350:	4770      	bx	lr

00401352 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401352:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401356:	604b      	str	r3, [r1, #4]

	return 0;
}
  401358:	2000      	movs	r0, #0
  40135a:	4770      	bx	lr

0040135c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  40135c:	2001      	movs	r0, #1
  40135e:	4770      	bx	lr

00401360 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401360:	2000      	movs	r0, #0
  401362:	4770      	bx	lr

00401364 <SCB_CleanInvalidateDCache>:
/** \brief Clean & Invalidate D-Cache

    The function cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache(void)
{
  401364:	b5f0      	push	{r4, r5, r6, r7, lr}
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  401366:	4b18      	ldr	r3, [pc, #96]	; (4013c8 <SCB_CleanInvalidateDCache+0x64>)
  401368:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40136c:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  401370:	f007 0007 	and.w	r0, r7, #7
  401374:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  401376:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40137a:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  40137e:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  401382:	f3bf 8f4f 	dsb	sy
  401386:	f04f 34ff 	mov.w	r4, #4294967295
  40138a:	fa04 fc00 	lsl.w	ip, r4, r0
  40138e:	fa06 f000 	lsl.w	r0, r6, r0
  401392:	fa04 f40e 	lsl.w	r4, r4, lr
  401396:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // clean & invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCCISW = sw;
  40139a:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40139c:	463a      	mov	r2, r7
  40139e:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  4013a0:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  4013a4:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  4013a8:	3a01      	subs	r2, #1
  4013aa:	4423      	add	r3, r4
  4013ac:	f1b2 3fff 	cmp.w	r2, #4294967295
  4013b0:	d1f6      	bne.n	4013a0 <SCB_CleanInvalidateDCache+0x3c>
        } while(sets--);
  4013b2:	3e01      	subs	r6, #1
  4013b4:	4460      	add	r0, ip
  4013b6:	f1b6 3fff 	cmp.w	r6, #4294967295
  4013ba:	d1ef      	bne.n	40139c <SCB_CleanInvalidateDCache+0x38>
  4013bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4013c0:	f3bf 8f6f 	isb	sy
  4013c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4013c6:	bf00      	nop
  4013c8:	e000ed00 	.word	0xe000ed00

004013cc <main>:
	65218,	64245,	62634,	60418,	57641,	54361,	50643,	46562,	42202,	37651,	33000,	28345,	23780,	19397,	15285,
11527,	8199,	5369,	3095,	1422,	384,	2,	284,	1225,	2804,	4991,	7741,	10998,	14696,	18761,	23109,	27653};


int main(void)
{
  4013cc:	b580      	push	{r7, lr}
  4013ce:	b084      	sub	sp, #16
	/* Initialize the SAM system. */
	sysclk_init();
  4013d0:	4b39      	ldr	r3, [pc, #228]	; (4014b8 <main+0xec>)
  4013d2:	4798      	blx	r3
	board_init();
  4013d4:	4b39      	ldr	r3, [pc, #228]	; (4014bc <main+0xf0>)
  4013d6:	4798      	blx	r3

	/* Initialize WM8904 TWI interface*/
	if (wm8904_twi_init() != TWIHS_SUCCESS) {
  4013d8:	4b39      	ldr	r3, [pc, #228]	; (4014c0 <main+0xf4>)
  4013da:	4798      	blx	r3
  4013dc:	b118      	cbz	r0, 4013e6 <main+0x1a>
		printf("-E-\tWM8904 initialization failed.\r");
  4013de:	4839      	ldr	r0, [pc, #228]	; (4014c4 <main+0xf8>)
  4013e0:	4b39      	ldr	r3, [pc, #228]	; (4014c8 <main+0xfc>)
  4013e2:	4798      	blx	r3
  4013e4:	e7fe      	b.n	4013e4 <main+0x18>
			/* Capture error */
		}
	}

	/* Configure test LED0 */ 
	pmc_enable_periph_clk(ID_PIOA);
  4013e6:	200a      	movs	r0, #10
  4013e8:	4b38      	ldr	r3, [pc, #224]	; (4014cc <main+0x100>)
  4013ea:	4798      	blx	r3
	pio_set_output(PIOA, PIO_PA23, LOW, DISABLE, ENABLE);
  4013ec:	4d38      	ldr	r5, [pc, #224]	; (4014d0 <main+0x104>)
  4013ee:	2401      	movs	r4, #1
  4013f0:	9400      	str	r4, [sp, #0]
  4013f2:	2300      	movs	r3, #0
  4013f4:	461a      	mov	r2, r3
  4013f6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  4013fa:	4628      	mov	r0, r5
  4013fc:	4e35      	ldr	r6, [pc, #212]	; (4014d4 <main+0x108>)
  4013fe:	47b0      	blx	r6
	pio_clear(PIOA, PIO_PA23);
  401400:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  401404:	4628      	mov	r0, r5
  401406:	4b34      	ldr	r3, [pc, #208]	; (4014d8 <main+0x10c>)
  401408:	4798      	blx	r3

	/* Configure CODEC */
	configure_codec();
  40140a:	4b34      	ldr	r3, [pc, #208]	; (4014dc <main+0x110>)
  40140c:	4798      	blx	r3

	/* Configure SSC */
	configure_ssc();
  40140e:	4b34      	ldr	r3, [pc, #208]	; (4014e0 <main+0x114>)
  401410:	4798      	blx	r3

	/* Configure XDMA */
	configure_xdma();
  401412:	4b34      	ldr	r3, [pc, #208]	; (4014e4 <main+0x118>)
  401414:	4798      	blx	r3

	/* Enable the DAC master clock */
	pmc_pck_set_prescaler(PMC_PCK_2, PMC_MCKR_PRES_CLK_1);
  401416:	2100      	movs	r1, #0
  401418:	2002      	movs	r0, #2
  40141a:	4b33      	ldr	r3, [pc, #204]	; (4014e8 <main+0x11c>)
  40141c:	4798      	blx	r3
	pmc_pck_set_source(PMC_PCK_2, PMC_MCKR_CSS_SLOW_CLK);
  40141e:	2100      	movs	r1, #0
  401420:	2002      	movs	r0, #2
  401422:	4b32      	ldr	r3, [pc, #200]	; (4014ec <main+0x120>)
  401424:	4798      	blx	r3
	pmc_enable_pck(PMC_PCK_2);
  401426:	2002      	movs	r0, #2
  401428:	4b31      	ldr	r3, [pc, #196]	; (4014f0 <main+0x124>)
  40142a:	4798      	blx	r3
	
	/* Start playing */
	ssc_enable_rx(SSC);
  40142c:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  401430:	4b30      	ldr	r3, [pc, #192]	; (4014f4 <main+0x128>)
  401432:	4798      	blx	r3
	SCB_CleanInvalidateDCache();
  401434:	4e30      	ldr	r6, [pc, #192]	; (4014f8 <main+0x12c>)
  401436:	47b0      	blx	r6
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  401438:	4d30      	ldr	r5, [pc, #192]	; (4014fc <main+0x130>)
  40143a:	61ec      	str	r4, [r5, #28]
	xdmac_channel_enable(XDMAC, XDMA_CH_SSC_RX);
	delay_ms(300);
  40143c:	4830      	ldr	r0, [pc, #192]	; (401500 <main+0x134>)
  40143e:	4b31      	ldr	r3, [pc, #196]	; (401504 <main+0x138>)
  401440:	4798      	blx	r3
	ssc_enable_tx(SSC);
  401442:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  401446:	4b30      	ldr	r3, [pc, #192]	; (401508 <main+0x13c>)
  401448:	4798      	blx	r3
	SCB_CleanInvalidateDCache();
  40144a:	47b0      	blx	r6
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  40144c:	2302      	movs	r3, #2
  40144e:	61eb      	str	r3, [r5, #28]
	xdmac_channel_enable(XDMAC, XDMA_CH_SSC_TX);
	
	flag = 1;
  401450:	4b2e      	ldr	r3, [pc, #184]	; (40150c <main+0x140>)
  401452:	601c      	str	r4, [r3, #0]
	while(1)
	{
		
		if(!flag)
		{
			pio_set(PIOA, PIO_PA23);
  401454:	f505 25d1 	add.w	r5, r5, #428032	; 0x68800
  401458:	f505 65c0 	add.w	r5, r5, #1536	; 0x600
		
		
			for (volatile int i = 0; i < BUF_SIZE; i++)
			{
				AudioBuffer[i] +=  SIN_WAVE[sin_idx++];
  40145c:	4c2c      	ldr	r4, [pc, #176]	; (401510 <main+0x144>)
		if(!flag)
  40145e:	4a2b      	ldr	r2, [pc, #172]	; (40150c <main+0x140>)
  401460:	6813      	ldr	r3, [r2, #0]
  401462:	2b00      	cmp	r3, #0
  401464:	d1fc      	bne.n	401460 <main+0x94>
			pio_set(PIOA, PIO_PA23);
  401466:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  40146a:	4628      	mov	r0, r5
  40146c:	4b29      	ldr	r3, [pc, #164]	; (401514 <main+0x148>)
  40146e:	4798      	blx	r3
			for (volatile int i = 0; i < BUF_SIZE; i++)
  401470:	2300      	movs	r3, #0
  401472:	9303      	str	r3, [sp, #12]
  401474:	9b03      	ldr	r3, [sp, #12]
  401476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  40147a:	daf0      	bge.n	40145e <main+0x92>
				AudioBuffer[i] +=  SIN_WAVE[sin_idx++];
  40147c:	4826      	ldr	r0, [pc, #152]	; (401518 <main+0x14c>)
  40147e:	4e27      	ldr	r6, [pc, #156]	; (40151c <main+0x150>)
				if (sin_idx == 44)
				{
					sin_idx = 0;
  401480:	2700      	movs	r7, #0
  401482:	e006      	b.n	401492 <main+0xc6>
			for (volatile int i = 0; i < BUF_SIZE; i++)
  401484:	9b03      	ldr	r3, [sp, #12]
  401486:	3301      	adds	r3, #1
  401488:	9303      	str	r3, [sp, #12]
  40148a:	9b03      	ldr	r3, [sp, #12]
  40148c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  401490:	dae5      	bge.n	40145e <main+0x92>
				AudioBuffer[i] +=  SIN_WAVE[sin_idx++];
  401492:	6821      	ldr	r1, [r4, #0]
  401494:	1c4b      	adds	r3, r1, #1
  401496:	6023      	str	r3, [r4, #0]
  401498:	9a03      	ldr	r2, [sp, #12]
  40149a:	f830 3012 	ldrh.w	r3, [r0, r2, lsl #1]
  40149e:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
  4014a2:	fa11 f383 	uxtah	r3, r1, r3
  4014a6:	b29b      	uxth	r3, r3
  4014a8:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
				if (sin_idx == 44)
  4014ac:	6823      	ldr	r3, [r4, #0]
  4014ae:	2b2c      	cmp	r3, #44	; 0x2c
  4014b0:	d1e8      	bne.n	401484 <main+0xb8>
					sin_idx = 0;
  4014b2:	6027      	str	r7, [r4, #0]
  4014b4:	e7e6      	b.n	401484 <main+0xb8>
  4014b6:	bf00      	nop
  4014b8:	00400491 	.word	0x00400491
  4014bc:	00400591 	.word	0x00400591
  4014c0:	004007ed 	.word	0x004007ed
  4014c4:	00404374 	.word	0x00404374
  4014c8:	00401571 	.word	0x00401571
  4014cc:	00400c69 	.word	0x00400c69
  4014d0:	400e0e00 	.word	0x400e0e00
  4014d4:	00400935 	.word	0x00400935
  4014d8:	00400869 	.word	0x00400869
  4014dc:	00400369 	.word	0x00400369
  4014e0:	004002ad 	.word	0x004002ad
  4014e4:	004001c9 	.word	0x004001c9
  4014e8:	00400cbd 	.word	0x00400cbd
  4014ec:	00400ce9 	.word	0x00400ce9
  4014f0:	00400d15 	.word	0x00400d15
  4014f4:	00400d3d 	.word	0x00400d3d
  4014f8:	00401365 	.word	0x00401365
  4014fc:	40078000 	.word	0x40078000
  401500:	0073c0b7 	.word	0x0073c0b7
  401504:	20400001 	.word	0x20400001
  401508:	00400d49 	.word	0x00400d49
  40150c:	204012d4 	.word	0x204012d4
  401510:	20400a90 	.word	0x20400a90
  401514:	00400865 	.word	0x00400865
  401518:	20400ac8 	.word	0x20400ac8
  40151c:	0040431c 	.word	0x0040431c

00401520 <__libc_init_array>:
  401520:	b570      	push	{r4, r5, r6, lr}
  401522:	4e0f      	ldr	r6, [pc, #60]	; (401560 <__libc_init_array+0x40>)
  401524:	4d0f      	ldr	r5, [pc, #60]	; (401564 <__libc_init_array+0x44>)
  401526:	1b76      	subs	r6, r6, r5
  401528:	10b6      	asrs	r6, r6, #2
  40152a:	bf18      	it	ne
  40152c:	2400      	movne	r4, #0
  40152e:	d005      	beq.n	40153c <__libc_init_array+0x1c>
  401530:	3401      	adds	r4, #1
  401532:	f855 3b04 	ldr.w	r3, [r5], #4
  401536:	4798      	blx	r3
  401538:	42a6      	cmp	r6, r4
  40153a:	d1f9      	bne.n	401530 <__libc_init_array+0x10>
  40153c:	4e0a      	ldr	r6, [pc, #40]	; (401568 <__libc_init_array+0x48>)
  40153e:	4d0b      	ldr	r5, [pc, #44]	; (40156c <__libc_init_array+0x4c>)
  401540:	1b76      	subs	r6, r6, r5
  401542:	f002 ffdd 	bl	404500 <_init>
  401546:	10b6      	asrs	r6, r6, #2
  401548:	bf18      	it	ne
  40154a:	2400      	movne	r4, #0
  40154c:	d006      	beq.n	40155c <__libc_init_array+0x3c>
  40154e:	3401      	adds	r4, #1
  401550:	f855 3b04 	ldr.w	r3, [r5], #4
  401554:	4798      	blx	r3
  401556:	42a6      	cmp	r6, r4
  401558:	d1f9      	bne.n	40154e <__libc_init_array+0x2e>
  40155a:	bd70      	pop	{r4, r5, r6, pc}
  40155c:	bd70      	pop	{r4, r5, r6, pc}
  40155e:	bf00      	nop
  401560:	0040450c 	.word	0x0040450c
  401564:	0040450c 	.word	0x0040450c
  401568:	00404514 	.word	0x00404514
  40156c:	0040450c 	.word	0x0040450c

00401570 <iprintf>:
  401570:	b40f      	push	{r0, r1, r2, r3}
  401572:	b500      	push	{lr}
  401574:	4907      	ldr	r1, [pc, #28]	; (401594 <iprintf+0x24>)
  401576:	b083      	sub	sp, #12
  401578:	ab04      	add	r3, sp, #16
  40157a:	6808      	ldr	r0, [r1, #0]
  40157c:	f853 2b04 	ldr.w	r2, [r3], #4
  401580:	6881      	ldr	r1, [r0, #8]
  401582:	9301      	str	r3, [sp, #4]
  401584:	f000 f896 	bl	4016b4 <_vfiprintf_r>
  401588:	b003      	add	sp, #12
  40158a:	f85d eb04 	ldr.w	lr, [sp], #4
  40158e:	b004      	add	sp, #16
  401590:	4770      	bx	lr
  401592:	bf00      	nop
  401594:	20400010 	.word	0x20400010

00401598 <memset>:
  401598:	b470      	push	{r4, r5, r6}
  40159a:	0786      	lsls	r6, r0, #30
  40159c:	d046      	beq.n	40162c <memset+0x94>
  40159e:	1e54      	subs	r4, r2, #1
  4015a0:	2a00      	cmp	r2, #0
  4015a2:	d041      	beq.n	401628 <memset+0x90>
  4015a4:	b2ca      	uxtb	r2, r1
  4015a6:	4603      	mov	r3, r0
  4015a8:	e002      	b.n	4015b0 <memset+0x18>
  4015aa:	f114 34ff 	adds.w	r4, r4, #4294967295
  4015ae:	d33b      	bcc.n	401628 <memset+0x90>
  4015b0:	f803 2b01 	strb.w	r2, [r3], #1
  4015b4:	079d      	lsls	r5, r3, #30
  4015b6:	d1f8      	bne.n	4015aa <memset+0x12>
  4015b8:	2c03      	cmp	r4, #3
  4015ba:	d92e      	bls.n	40161a <memset+0x82>
  4015bc:	b2cd      	uxtb	r5, r1
  4015be:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4015c2:	2c0f      	cmp	r4, #15
  4015c4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4015c8:	d919      	bls.n	4015fe <memset+0x66>
  4015ca:	f103 0210 	add.w	r2, r3, #16
  4015ce:	4626      	mov	r6, r4
  4015d0:	3e10      	subs	r6, #16
  4015d2:	2e0f      	cmp	r6, #15
  4015d4:	f842 5c10 	str.w	r5, [r2, #-16]
  4015d8:	f842 5c0c 	str.w	r5, [r2, #-12]
  4015dc:	f842 5c08 	str.w	r5, [r2, #-8]
  4015e0:	f842 5c04 	str.w	r5, [r2, #-4]
  4015e4:	f102 0210 	add.w	r2, r2, #16
  4015e8:	d8f2      	bhi.n	4015d0 <memset+0x38>
  4015ea:	f1a4 0210 	sub.w	r2, r4, #16
  4015ee:	f022 020f 	bic.w	r2, r2, #15
  4015f2:	f004 040f 	and.w	r4, r4, #15
  4015f6:	3210      	adds	r2, #16
  4015f8:	2c03      	cmp	r4, #3
  4015fa:	4413      	add	r3, r2
  4015fc:	d90d      	bls.n	40161a <memset+0x82>
  4015fe:	461e      	mov	r6, r3
  401600:	4622      	mov	r2, r4
  401602:	3a04      	subs	r2, #4
  401604:	2a03      	cmp	r2, #3
  401606:	f846 5b04 	str.w	r5, [r6], #4
  40160a:	d8fa      	bhi.n	401602 <memset+0x6a>
  40160c:	1f22      	subs	r2, r4, #4
  40160e:	f022 0203 	bic.w	r2, r2, #3
  401612:	3204      	adds	r2, #4
  401614:	4413      	add	r3, r2
  401616:	f004 0403 	and.w	r4, r4, #3
  40161a:	b12c      	cbz	r4, 401628 <memset+0x90>
  40161c:	b2c9      	uxtb	r1, r1
  40161e:	441c      	add	r4, r3
  401620:	f803 1b01 	strb.w	r1, [r3], #1
  401624:	429c      	cmp	r4, r3
  401626:	d1fb      	bne.n	401620 <memset+0x88>
  401628:	bc70      	pop	{r4, r5, r6}
  40162a:	4770      	bx	lr
  40162c:	4614      	mov	r4, r2
  40162e:	4603      	mov	r3, r0
  401630:	e7c2      	b.n	4015b8 <memset+0x20>
  401632:	bf00      	nop

00401634 <__sprint_r.part.0>:
  401634:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401638:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40163a:	049c      	lsls	r4, r3, #18
  40163c:	4693      	mov	fp, r2
  40163e:	d52f      	bpl.n	4016a0 <__sprint_r.part.0+0x6c>
  401640:	6893      	ldr	r3, [r2, #8]
  401642:	6812      	ldr	r2, [r2, #0]
  401644:	b353      	cbz	r3, 40169c <__sprint_r.part.0+0x68>
  401646:	460e      	mov	r6, r1
  401648:	4607      	mov	r7, r0
  40164a:	f102 0908 	add.w	r9, r2, #8
  40164e:	e919 0420 	ldmdb	r9, {r5, sl}
  401652:	ea5f 089a 	movs.w	r8, sl, lsr #2
  401656:	d017      	beq.n	401688 <__sprint_r.part.0+0x54>
  401658:	3d04      	subs	r5, #4
  40165a:	2400      	movs	r4, #0
  40165c:	e001      	b.n	401662 <__sprint_r.part.0+0x2e>
  40165e:	45a0      	cmp	r8, r4
  401660:	d010      	beq.n	401684 <__sprint_r.part.0+0x50>
  401662:	4632      	mov	r2, r6
  401664:	f855 1f04 	ldr.w	r1, [r5, #4]!
  401668:	4638      	mov	r0, r7
  40166a:	f001 f8bb 	bl	4027e4 <_fputwc_r>
  40166e:	1c43      	adds	r3, r0, #1
  401670:	f104 0401 	add.w	r4, r4, #1
  401674:	d1f3      	bne.n	40165e <__sprint_r.part.0+0x2a>
  401676:	2300      	movs	r3, #0
  401678:	f8cb 3008 	str.w	r3, [fp, #8]
  40167c:	f8cb 3004 	str.w	r3, [fp, #4]
  401680:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401684:	f8db 3008 	ldr.w	r3, [fp, #8]
  401688:	f02a 0a03 	bic.w	sl, sl, #3
  40168c:	eba3 030a 	sub.w	r3, r3, sl
  401690:	f8cb 3008 	str.w	r3, [fp, #8]
  401694:	f109 0908 	add.w	r9, r9, #8
  401698:	2b00      	cmp	r3, #0
  40169a:	d1d8      	bne.n	40164e <__sprint_r.part.0+0x1a>
  40169c:	2000      	movs	r0, #0
  40169e:	e7ea      	b.n	401676 <__sprint_r.part.0+0x42>
  4016a0:	f001 fa0a 	bl	402ab8 <__sfvwrite_r>
  4016a4:	2300      	movs	r3, #0
  4016a6:	f8cb 3008 	str.w	r3, [fp, #8]
  4016aa:	f8cb 3004 	str.w	r3, [fp, #4]
  4016ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4016b2:	bf00      	nop

004016b4 <_vfiprintf_r>:
  4016b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4016b8:	b0ad      	sub	sp, #180	; 0xb4
  4016ba:	461d      	mov	r5, r3
  4016bc:	468b      	mov	fp, r1
  4016be:	4690      	mov	r8, r2
  4016c0:	9307      	str	r3, [sp, #28]
  4016c2:	9006      	str	r0, [sp, #24]
  4016c4:	b118      	cbz	r0, 4016ce <_vfiprintf_r+0x1a>
  4016c6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4016c8:	2b00      	cmp	r3, #0
  4016ca:	f000 80f3 	beq.w	4018b4 <_vfiprintf_r+0x200>
  4016ce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4016d2:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4016d6:	07df      	lsls	r7, r3, #31
  4016d8:	b281      	uxth	r1, r0
  4016da:	d402      	bmi.n	4016e2 <_vfiprintf_r+0x2e>
  4016dc:	058e      	lsls	r6, r1, #22
  4016de:	f140 80fc 	bpl.w	4018da <_vfiprintf_r+0x226>
  4016e2:	048c      	lsls	r4, r1, #18
  4016e4:	d40a      	bmi.n	4016fc <_vfiprintf_r+0x48>
  4016e6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4016ea:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4016ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4016f2:	f8ab 100c 	strh.w	r1, [fp, #12]
  4016f6:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4016fa:	b289      	uxth	r1, r1
  4016fc:	0708      	lsls	r0, r1, #28
  4016fe:	f140 80b3 	bpl.w	401868 <_vfiprintf_r+0x1b4>
  401702:	f8db 3010 	ldr.w	r3, [fp, #16]
  401706:	2b00      	cmp	r3, #0
  401708:	f000 80ae 	beq.w	401868 <_vfiprintf_r+0x1b4>
  40170c:	f001 031a 	and.w	r3, r1, #26
  401710:	2b0a      	cmp	r3, #10
  401712:	f000 80b5 	beq.w	401880 <_vfiprintf_r+0x1cc>
  401716:	2300      	movs	r3, #0
  401718:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  40171c:	930b      	str	r3, [sp, #44]	; 0x2c
  40171e:	9311      	str	r3, [sp, #68]	; 0x44
  401720:	9310      	str	r3, [sp, #64]	; 0x40
  401722:	9303      	str	r3, [sp, #12]
  401724:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  401728:	46ca      	mov	sl, r9
  40172a:	f8cd b010 	str.w	fp, [sp, #16]
  40172e:	f898 3000 	ldrb.w	r3, [r8]
  401732:	4644      	mov	r4, r8
  401734:	b1fb      	cbz	r3, 401776 <_vfiprintf_r+0xc2>
  401736:	2b25      	cmp	r3, #37	; 0x25
  401738:	d102      	bne.n	401740 <_vfiprintf_r+0x8c>
  40173a:	e01c      	b.n	401776 <_vfiprintf_r+0xc2>
  40173c:	2b25      	cmp	r3, #37	; 0x25
  40173e:	d003      	beq.n	401748 <_vfiprintf_r+0x94>
  401740:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  401744:	2b00      	cmp	r3, #0
  401746:	d1f9      	bne.n	40173c <_vfiprintf_r+0x88>
  401748:	eba4 0508 	sub.w	r5, r4, r8
  40174c:	b19d      	cbz	r5, 401776 <_vfiprintf_r+0xc2>
  40174e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401750:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401752:	f8ca 8000 	str.w	r8, [sl]
  401756:	3301      	adds	r3, #1
  401758:	442a      	add	r2, r5
  40175a:	2b07      	cmp	r3, #7
  40175c:	f8ca 5004 	str.w	r5, [sl, #4]
  401760:	9211      	str	r2, [sp, #68]	; 0x44
  401762:	9310      	str	r3, [sp, #64]	; 0x40
  401764:	dd7a      	ble.n	40185c <_vfiprintf_r+0x1a8>
  401766:	2a00      	cmp	r2, #0
  401768:	f040 84b0 	bne.w	4020cc <_vfiprintf_r+0xa18>
  40176c:	9b03      	ldr	r3, [sp, #12]
  40176e:	9210      	str	r2, [sp, #64]	; 0x40
  401770:	442b      	add	r3, r5
  401772:	46ca      	mov	sl, r9
  401774:	9303      	str	r3, [sp, #12]
  401776:	7823      	ldrb	r3, [r4, #0]
  401778:	2b00      	cmp	r3, #0
  40177a:	f000 83e0 	beq.w	401f3e <_vfiprintf_r+0x88a>
  40177e:	2000      	movs	r0, #0
  401780:	f04f 0300 	mov.w	r3, #0
  401784:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  401788:	f104 0801 	add.w	r8, r4, #1
  40178c:	7862      	ldrb	r2, [r4, #1]
  40178e:	4605      	mov	r5, r0
  401790:	4606      	mov	r6, r0
  401792:	4603      	mov	r3, r0
  401794:	f04f 34ff 	mov.w	r4, #4294967295
  401798:	f108 0801 	add.w	r8, r8, #1
  40179c:	f1a2 0120 	sub.w	r1, r2, #32
  4017a0:	2958      	cmp	r1, #88	; 0x58
  4017a2:	f200 82de 	bhi.w	401d62 <_vfiprintf_r+0x6ae>
  4017a6:	e8df f011 	tbh	[pc, r1, lsl #1]
  4017aa:	0221      	.short	0x0221
  4017ac:	02dc02dc 	.word	0x02dc02dc
  4017b0:	02dc0229 	.word	0x02dc0229
  4017b4:	02dc02dc 	.word	0x02dc02dc
  4017b8:	02dc02dc 	.word	0x02dc02dc
  4017bc:	028902dc 	.word	0x028902dc
  4017c0:	02dc0295 	.word	0x02dc0295
  4017c4:	02bd00a2 	.word	0x02bd00a2
  4017c8:	019f02dc 	.word	0x019f02dc
  4017cc:	01a401a4 	.word	0x01a401a4
  4017d0:	01a401a4 	.word	0x01a401a4
  4017d4:	01a401a4 	.word	0x01a401a4
  4017d8:	01a401a4 	.word	0x01a401a4
  4017dc:	02dc01a4 	.word	0x02dc01a4
  4017e0:	02dc02dc 	.word	0x02dc02dc
  4017e4:	02dc02dc 	.word	0x02dc02dc
  4017e8:	02dc02dc 	.word	0x02dc02dc
  4017ec:	02dc02dc 	.word	0x02dc02dc
  4017f0:	01b202dc 	.word	0x01b202dc
  4017f4:	02dc02dc 	.word	0x02dc02dc
  4017f8:	02dc02dc 	.word	0x02dc02dc
  4017fc:	02dc02dc 	.word	0x02dc02dc
  401800:	02dc02dc 	.word	0x02dc02dc
  401804:	02dc02dc 	.word	0x02dc02dc
  401808:	02dc0197 	.word	0x02dc0197
  40180c:	02dc02dc 	.word	0x02dc02dc
  401810:	02dc02dc 	.word	0x02dc02dc
  401814:	02dc019b 	.word	0x02dc019b
  401818:	025302dc 	.word	0x025302dc
  40181c:	02dc02dc 	.word	0x02dc02dc
  401820:	02dc02dc 	.word	0x02dc02dc
  401824:	02dc02dc 	.word	0x02dc02dc
  401828:	02dc02dc 	.word	0x02dc02dc
  40182c:	02dc02dc 	.word	0x02dc02dc
  401830:	021b025a 	.word	0x021b025a
  401834:	02dc02dc 	.word	0x02dc02dc
  401838:	026e02dc 	.word	0x026e02dc
  40183c:	02dc021b 	.word	0x02dc021b
  401840:	027302dc 	.word	0x027302dc
  401844:	01f502dc 	.word	0x01f502dc
  401848:	02090182 	.word	0x02090182
  40184c:	02dc02d7 	.word	0x02dc02d7
  401850:	02dc029a 	.word	0x02dc029a
  401854:	02dc00a7 	.word	0x02dc00a7
  401858:	022e02dc 	.word	0x022e02dc
  40185c:	f10a 0a08 	add.w	sl, sl, #8
  401860:	9b03      	ldr	r3, [sp, #12]
  401862:	442b      	add	r3, r5
  401864:	9303      	str	r3, [sp, #12]
  401866:	e786      	b.n	401776 <_vfiprintf_r+0xc2>
  401868:	4659      	mov	r1, fp
  40186a:	9806      	ldr	r0, [sp, #24]
  40186c:	f000 fdac 	bl	4023c8 <__swsetup_r>
  401870:	bb18      	cbnz	r0, 4018ba <_vfiprintf_r+0x206>
  401872:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  401876:	f001 031a 	and.w	r3, r1, #26
  40187a:	2b0a      	cmp	r3, #10
  40187c:	f47f af4b 	bne.w	401716 <_vfiprintf_r+0x62>
  401880:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  401884:	2b00      	cmp	r3, #0
  401886:	f6ff af46 	blt.w	401716 <_vfiprintf_r+0x62>
  40188a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40188e:	07db      	lsls	r3, r3, #31
  401890:	d405      	bmi.n	40189e <_vfiprintf_r+0x1ea>
  401892:	058f      	lsls	r7, r1, #22
  401894:	d403      	bmi.n	40189e <_vfiprintf_r+0x1ea>
  401896:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40189a:	f001 fac3 	bl	402e24 <__retarget_lock_release_recursive>
  40189e:	462b      	mov	r3, r5
  4018a0:	4642      	mov	r2, r8
  4018a2:	4659      	mov	r1, fp
  4018a4:	9806      	ldr	r0, [sp, #24]
  4018a6:	f000 fd4d 	bl	402344 <__sbprintf>
  4018aa:	9003      	str	r0, [sp, #12]
  4018ac:	9803      	ldr	r0, [sp, #12]
  4018ae:	b02d      	add	sp, #180	; 0xb4
  4018b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4018b4:	f000 fef4 	bl	4026a0 <__sinit>
  4018b8:	e709      	b.n	4016ce <_vfiprintf_r+0x1a>
  4018ba:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4018be:	07d9      	lsls	r1, r3, #31
  4018c0:	d404      	bmi.n	4018cc <_vfiprintf_r+0x218>
  4018c2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4018c6:	059a      	lsls	r2, r3, #22
  4018c8:	f140 84aa 	bpl.w	402220 <_vfiprintf_r+0xb6c>
  4018cc:	f04f 33ff 	mov.w	r3, #4294967295
  4018d0:	9303      	str	r3, [sp, #12]
  4018d2:	9803      	ldr	r0, [sp, #12]
  4018d4:	b02d      	add	sp, #180	; 0xb4
  4018d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4018da:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4018de:	f001 fa9f 	bl	402e20 <__retarget_lock_acquire_recursive>
  4018e2:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4018e6:	b281      	uxth	r1, r0
  4018e8:	e6fb      	b.n	4016e2 <_vfiprintf_r+0x2e>
  4018ea:	4276      	negs	r6, r6
  4018ec:	9207      	str	r2, [sp, #28]
  4018ee:	f043 0304 	orr.w	r3, r3, #4
  4018f2:	f898 2000 	ldrb.w	r2, [r8]
  4018f6:	e74f      	b.n	401798 <_vfiprintf_r+0xe4>
  4018f8:	9608      	str	r6, [sp, #32]
  4018fa:	069e      	lsls	r6, r3, #26
  4018fc:	f100 8450 	bmi.w	4021a0 <_vfiprintf_r+0xaec>
  401900:	9907      	ldr	r1, [sp, #28]
  401902:	06dd      	lsls	r5, r3, #27
  401904:	460a      	mov	r2, r1
  401906:	f100 83ef 	bmi.w	4020e8 <_vfiprintf_r+0xa34>
  40190a:	0658      	lsls	r0, r3, #25
  40190c:	f140 83ec 	bpl.w	4020e8 <_vfiprintf_r+0xa34>
  401910:	880e      	ldrh	r6, [r1, #0]
  401912:	3104      	adds	r1, #4
  401914:	2700      	movs	r7, #0
  401916:	2201      	movs	r2, #1
  401918:	9107      	str	r1, [sp, #28]
  40191a:	f04f 0100 	mov.w	r1, #0
  40191e:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  401922:	2500      	movs	r5, #0
  401924:	1c61      	adds	r1, r4, #1
  401926:	f000 8116 	beq.w	401b56 <_vfiprintf_r+0x4a2>
  40192a:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  40192e:	9102      	str	r1, [sp, #8]
  401930:	ea56 0107 	orrs.w	r1, r6, r7
  401934:	f040 8114 	bne.w	401b60 <_vfiprintf_r+0x4ac>
  401938:	2c00      	cmp	r4, #0
  40193a:	f040 835c 	bne.w	401ff6 <_vfiprintf_r+0x942>
  40193e:	2a00      	cmp	r2, #0
  401940:	f040 83b7 	bne.w	4020b2 <_vfiprintf_r+0x9fe>
  401944:	f013 0301 	ands.w	r3, r3, #1
  401948:	9305      	str	r3, [sp, #20]
  40194a:	f000 8457 	beq.w	4021fc <_vfiprintf_r+0xb48>
  40194e:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  401952:	2330      	movs	r3, #48	; 0x30
  401954:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  401958:	9b05      	ldr	r3, [sp, #20]
  40195a:	42a3      	cmp	r3, r4
  40195c:	bfb8      	it	lt
  40195e:	4623      	movlt	r3, r4
  401960:	9301      	str	r3, [sp, #4]
  401962:	b10d      	cbz	r5, 401968 <_vfiprintf_r+0x2b4>
  401964:	3301      	adds	r3, #1
  401966:	9301      	str	r3, [sp, #4]
  401968:	9b02      	ldr	r3, [sp, #8]
  40196a:	f013 0302 	ands.w	r3, r3, #2
  40196e:	9309      	str	r3, [sp, #36]	; 0x24
  401970:	d002      	beq.n	401978 <_vfiprintf_r+0x2c4>
  401972:	9b01      	ldr	r3, [sp, #4]
  401974:	3302      	adds	r3, #2
  401976:	9301      	str	r3, [sp, #4]
  401978:	9b02      	ldr	r3, [sp, #8]
  40197a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40197e:	930a      	str	r3, [sp, #40]	; 0x28
  401980:	f040 8217 	bne.w	401db2 <_vfiprintf_r+0x6fe>
  401984:	9b08      	ldr	r3, [sp, #32]
  401986:	9a01      	ldr	r2, [sp, #4]
  401988:	1a9d      	subs	r5, r3, r2
  40198a:	2d00      	cmp	r5, #0
  40198c:	f340 8211 	ble.w	401db2 <_vfiprintf_r+0x6fe>
  401990:	2d10      	cmp	r5, #16
  401992:	f340 8490 	ble.w	4022b6 <_vfiprintf_r+0xc02>
  401996:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401998:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40199a:	4ec4      	ldr	r6, [pc, #784]	; (401cac <_vfiprintf_r+0x5f8>)
  40199c:	46d6      	mov	lr, sl
  40199e:	2710      	movs	r7, #16
  4019a0:	46a2      	mov	sl, r4
  4019a2:	4619      	mov	r1, r3
  4019a4:	9c06      	ldr	r4, [sp, #24]
  4019a6:	e007      	b.n	4019b8 <_vfiprintf_r+0x304>
  4019a8:	f101 0c02 	add.w	ip, r1, #2
  4019ac:	f10e 0e08 	add.w	lr, lr, #8
  4019b0:	4601      	mov	r1, r0
  4019b2:	3d10      	subs	r5, #16
  4019b4:	2d10      	cmp	r5, #16
  4019b6:	dd11      	ble.n	4019dc <_vfiprintf_r+0x328>
  4019b8:	1c48      	adds	r0, r1, #1
  4019ba:	3210      	adds	r2, #16
  4019bc:	2807      	cmp	r0, #7
  4019be:	9211      	str	r2, [sp, #68]	; 0x44
  4019c0:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4019c4:	9010      	str	r0, [sp, #64]	; 0x40
  4019c6:	ddef      	ble.n	4019a8 <_vfiprintf_r+0x2f4>
  4019c8:	2a00      	cmp	r2, #0
  4019ca:	f040 81e4 	bne.w	401d96 <_vfiprintf_r+0x6e2>
  4019ce:	3d10      	subs	r5, #16
  4019d0:	2d10      	cmp	r5, #16
  4019d2:	4611      	mov	r1, r2
  4019d4:	f04f 0c01 	mov.w	ip, #1
  4019d8:	46ce      	mov	lr, r9
  4019da:	dced      	bgt.n	4019b8 <_vfiprintf_r+0x304>
  4019dc:	4654      	mov	r4, sl
  4019de:	4661      	mov	r1, ip
  4019e0:	46f2      	mov	sl, lr
  4019e2:	442a      	add	r2, r5
  4019e4:	2907      	cmp	r1, #7
  4019e6:	9211      	str	r2, [sp, #68]	; 0x44
  4019e8:	f8ca 6000 	str.w	r6, [sl]
  4019ec:	f8ca 5004 	str.w	r5, [sl, #4]
  4019f0:	9110      	str	r1, [sp, #64]	; 0x40
  4019f2:	f300 82ec 	bgt.w	401fce <_vfiprintf_r+0x91a>
  4019f6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4019fa:	f10a 0a08 	add.w	sl, sl, #8
  4019fe:	1c48      	adds	r0, r1, #1
  401a00:	2d00      	cmp	r5, #0
  401a02:	f040 81de 	bne.w	401dc2 <_vfiprintf_r+0x70e>
  401a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401a08:	2b00      	cmp	r3, #0
  401a0a:	f000 81f8 	beq.w	401dfe <_vfiprintf_r+0x74a>
  401a0e:	3202      	adds	r2, #2
  401a10:	a90e      	add	r1, sp, #56	; 0x38
  401a12:	2302      	movs	r3, #2
  401a14:	2807      	cmp	r0, #7
  401a16:	9211      	str	r2, [sp, #68]	; 0x44
  401a18:	9010      	str	r0, [sp, #64]	; 0x40
  401a1a:	e88a 000a 	stmia.w	sl, {r1, r3}
  401a1e:	f340 81ea 	ble.w	401df6 <_vfiprintf_r+0x742>
  401a22:	2a00      	cmp	r2, #0
  401a24:	f040 838c 	bne.w	402140 <_vfiprintf_r+0xa8c>
  401a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401a2a:	2b80      	cmp	r3, #128	; 0x80
  401a2c:	f04f 0001 	mov.w	r0, #1
  401a30:	4611      	mov	r1, r2
  401a32:	46ca      	mov	sl, r9
  401a34:	f040 81e7 	bne.w	401e06 <_vfiprintf_r+0x752>
  401a38:	9b08      	ldr	r3, [sp, #32]
  401a3a:	9d01      	ldr	r5, [sp, #4]
  401a3c:	1b5e      	subs	r6, r3, r5
  401a3e:	2e00      	cmp	r6, #0
  401a40:	f340 81e1 	ble.w	401e06 <_vfiprintf_r+0x752>
  401a44:	2e10      	cmp	r6, #16
  401a46:	4d9a      	ldr	r5, [pc, #616]	; (401cb0 <_vfiprintf_r+0x5fc>)
  401a48:	f340 8450 	ble.w	4022ec <_vfiprintf_r+0xc38>
  401a4c:	46d4      	mov	ip, sl
  401a4e:	2710      	movs	r7, #16
  401a50:	46a2      	mov	sl, r4
  401a52:	9c06      	ldr	r4, [sp, #24]
  401a54:	e007      	b.n	401a66 <_vfiprintf_r+0x3b2>
  401a56:	f101 0e02 	add.w	lr, r1, #2
  401a5a:	f10c 0c08 	add.w	ip, ip, #8
  401a5e:	4601      	mov	r1, r0
  401a60:	3e10      	subs	r6, #16
  401a62:	2e10      	cmp	r6, #16
  401a64:	dd11      	ble.n	401a8a <_vfiprintf_r+0x3d6>
  401a66:	1c48      	adds	r0, r1, #1
  401a68:	3210      	adds	r2, #16
  401a6a:	2807      	cmp	r0, #7
  401a6c:	9211      	str	r2, [sp, #68]	; 0x44
  401a6e:	e88c 00a0 	stmia.w	ip, {r5, r7}
  401a72:	9010      	str	r0, [sp, #64]	; 0x40
  401a74:	ddef      	ble.n	401a56 <_vfiprintf_r+0x3a2>
  401a76:	2a00      	cmp	r2, #0
  401a78:	f040 829d 	bne.w	401fb6 <_vfiprintf_r+0x902>
  401a7c:	3e10      	subs	r6, #16
  401a7e:	2e10      	cmp	r6, #16
  401a80:	f04f 0e01 	mov.w	lr, #1
  401a84:	4611      	mov	r1, r2
  401a86:	46cc      	mov	ip, r9
  401a88:	dced      	bgt.n	401a66 <_vfiprintf_r+0x3b2>
  401a8a:	4654      	mov	r4, sl
  401a8c:	46e2      	mov	sl, ip
  401a8e:	4432      	add	r2, r6
  401a90:	f1be 0f07 	cmp.w	lr, #7
  401a94:	9211      	str	r2, [sp, #68]	; 0x44
  401a96:	e88a 0060 	stmia.w	sl, {r5, r6}
  401a9a:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  401a9e:	f300 8369 	bgt.w	402174 <_vfiprintf_r+0xac0>
  401aa2:	f10a 0a08 	add.w	sl, sl, #8
  401aa6:	f10e 0001 	add.w	r0, lr, #1
  401aaa:	4671      	mov	r1, lr
  401aac:	e1ab      	b.n	401e06 <_vfiprintf_r+0x752>
  401aae:	9608      	str	r6, [sp, #32]
  401ab0:	f013 0220 	ands.w	r2, r3, #32
  401ab4:	f040 838c 	bne.w	4021d0 <_vfiprintf_r+0xb1c>
  401ab8:	f013 0110 	ands.w	r1, r3, #16
  401abc:	f040 831a 	bne.w	4020f4 <_vfiprintf_r+0xa40>
  401ac0:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  401ac4:	f000 8316 	beq.w	4020f4 <_vfiprintf_r+0xa40>
  401ac8:	9807      	ldr	r0, [sp, #28]
  401aca:	460a      	mov	r2, r1
  401acc:	4601      	mov	r1, r0
  401ace:	3104      	adds	r1, #4
  401ad0:	8806      	ldrh	r6, [r0, #0]
  401ad2:	9107      	str	r1, [sp, #28]
  401ad4:	2700      	movs	r7, #0
  401ad6:	e720      	b.n	40191a <_vfiprintf_r+0x266>
  401ad8:	9608      	str	r6, [sp, #32]
  401ada:	f043 0310 	orr.w	r3, r3, #16
  401ade:	e7e7      	b.n	401ab0 <_vfiprintf_r+0x3fc>
  401ae0:	9608      	str	r6, [sp, #32]
  401ae2:	f043 0310 	orr.w	r3, r3, #16
  401ae6:	e708      	b.n	4018fa <_vfiprintf_r+0x246>
  401ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401aec:	f898 2000 	ldrb.w	r2, [r8]
  401af0:	e652      	b.n	401798 <_vfiprintf_r+0xe4>
  401af2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401af6:	2600      	movs	r6, #0
  401af8:	f818 2b01 	ldrb.w	r2, [r8], #1
  401afc:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  401b00:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  401b04:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401b08:	2909      	cmp	r1, #9
  401b0a:	d9f5      	bls.n	401af8 <_vfiprintf_r+0x444>
  401b0c:	e646      	b.n	40179c <_vfiprintf_r+0xe8>
  401b0e:	9608      	str	r6, [sp, #32]
  401b10:	2800      	cmp	r0, #0
  401b12:	f040 8408 	bne.w	402326 <_vfiprintf_r+0xc72>
  401b16:	f043 0310 	orr.w	r3, r3, #16
  401b1a:	069e      	lsls	r6, r3, #26
  401b1c:	f100 834c 	bmi.w	4021b8 <_vfiprintf_r+0xb04>
  401b20:	06dd      	lsls	r5, r3, #27
  401b22:	f100 82f3 	bmi.w	40210c <_vfiprintf_r+0xa58>
  401b26:	0658      	lsls	r0, r3, #25
  401b28:	f140 82f0 	bpl.w	40210c <_vfiprintf_r+0xa58>
  401b2c:	9d07      	ldr	r5, [sp, #28]
  401b2e:	f9b5 6000 	ldrsh.w	r6, [r5]
  401b32:	462a      	mov	r2, r5
  401b34:	17f7      	asrs	r7, r6, #31
  401b36:	3204      	adds	r2, #4
  401b38:	4630      	mov	r0, r6
  401b3a:	4639      	mov	r1, r7
  401b3c:	9207      	str	r2, [sp, #28]
  401b3e:	2800      	cmp	r0, #0
  401b40:	f171 0200 	sbcs.w	r2, r1, #0
  401b44:	f2c0 835d 	blt.w	402202 <_vfiprintf_r+0xb4e>
  401b48:	1c61      	adds	r1, r4, #1
  401b4a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401b4e:	f04f 0201 	mov.w	r2, #1
  401b52:	f47f aeea 	bne.w	40192a <_vfiprintf_r+0x276>
  401b56:	ea56 0107 	orrs.w	r1, r6, r7
  401b5a:	f000 824d 	beq.w	401ff8 <_vfiprintf_r+0x944>
  401b5e:	9302      	str	r3, [sp, #8]
  401b60:	2a01      	cmp	r2, #1
  401b62:	f000 828c 	beq.w	40207e <_vfiprintf_r+0x9ca>
  401b66:	2a02      	cmp	r2, #2
  401b68:	f040 825c 	bne.w	402024 <_vfiprintf_r+0x970>
  401b6c:	980b      	ldr	r0, [sp, #44]	; 0x2c
  401b6e:	46cb      	mov	fp, r9
  401b70:	0933      	lsrs	r3, r6, #4
  401b72:	f006 010f 	and.w	r1, r6, #15
  401b76:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  401b7a:	093a      	lsrs	r2, r7, #4
  401b7c:	461e      	mov	r6, r3
  401b7e:	4617      	mov	r7, r2
  401b80:	5c43      	ldrb	r3, [r0, r1]
  401b82:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  401b86:	ea56 0307 	orrs.w	r3, r6, r7
  401b8a:	d1f1      	bne.n	401b70 <_vfiprintf_r+0x4bc>
  401b8c:	eba9 030b 	sub.w	r3, r9, fp
  401b90:	9305      	str	r3, [sp, #20]
  401b92:	e6e1      	b.n	401958 <_vfiprintf_r+0x2a4>
  401b94:	2800      	cmp	r0, #0
  401b96:	f040 83c0 	bne.w	40231a <_vfiprintf_r+0xc66>
  401b9a:	0699      	lsls	r1, r3, #26
  401b9c:	f100 8367 	bmi.w	40226e <_vfiprintf_r+0xbba>
  401ba0:	06da      	lsls	r2, r3, #27
  401ba2:	f100 80f1 	bmi.w	401d88 <_vfiprintf_r+0x6d4>
  401ba6:	065b      	lsls	r3, r3, #25
  401ba8:	f140 80ee 	bpl.w	401d88 <_vfiprintf_r+0x6d4>
  401bac:	9a07      	ldr	r2, [sp, #28]
  401bae:	6813      	ldr	r3, [r2, #0]
  401bb0:	3204      	adds	r2, #4
  401bb2:	9207      	str	r2, [sp, #28]
  401bb4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  401bb8:	801a      	strh	r2, [r3, #0]
  401bba:	e5b8      	b.n	40172e <_vfiprintf_r+0x7a>
  401bbc:	9807      	ldr	r0, [sp, #28]
  401bbe:	4a3d      	ldr	r2, [pc, #244]	; (401cb4 <_vfiprintf_r+0x600>)
  401bc0:	9608      	str	r6, [sp, #32]
  401bc2:	920b      	str	r2, [sp, #44]	; 0x2c
  401bc4:	6806      	ldr	r6, [r0, #0]
  401bc6:	2278      	movs	r2, #120	; 0x78
  401bc8:	2130      	movs	r1, #48	; 0x30
  401bca:	3004      	adds	r0, #4
  401bcc:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  401bd0:	f043 0302 	orr.w	r3, r3, #2
  401bd4:	9007      	str	r0, [sp, #28]
  401bd6:	2700      	movs	r7, #0
  401bd8:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  401bdc:	2202      	movs	r2, #2
  401bde:	e69c      	b.n	40191a <_vfiprintf_r+0x266>
  401be0:	9608      	str	r6, [sp, #32]
  401be2:	2800      	cmp	r0, #0
  401be4:	d099      	beq.n	401b1a <_vfiprintf_r+0x466>
  401be6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401bea:	e796      	b.n	401b1a <_vfiprintf_r+0x466>
  401bec:	f898 2000 	ldrb.w	r2, [r8]
  401bf0:	2d00      	cmp	r5, #0
  401bf2:	f47f add1 	bne.w	401798 <_vfiprintf_r+0xe4>
  401bf6:	2001      	movs	r0, #1
  401bf8:	2520      	movs	r5, #32
  401bfa:	e5cd      	b.n	401798 <_vfiprintf_r+0xe4>
  401bfc:	f043 0301 	orr.w	r3, r3, #1
  401c00:	f898 2000 	ldrb.w	r2, [r8]
  401c04:	e5c8      	b.n	401798 <_vfiprintf_r+0xe4>
  401c06:	9608      	str	r6, [sp, #32]
  401c08:	2800      	cmp	r0, #0
  401c0a:	f040 8393 	bne.w	402334 <_vfiprintf_r+0xc80>
  401c0e:	4929      	ldr	r1, [pc, #164]	; (401cb4 <_vfiprintf_r+0x600>)
  401c10:	910b      	str	r1, [sp, #44]	; 0x2c
  401c12:	069f      	lsls	r7, r3, #26
  401c14:	f100 82e8 	bmi.w	4021e8 <_vfiprintf_r+0xb34>
  401c18:	9807      	ldr	r0, [sp, #28]
  401c1a:	06de      	lsls	r6, r3, #27
  401c1c:	4601      	mov	r1, r0
  401c1e:	f100 8270 	bmi.w	402102 <_vfiprintf_r+0xa4e>
  401c22:	065d      	lsls	r5, r3, #25
  401c24:	f140 826d 	bpl.w	402102 <_vfiprintf_r+0xa4e>
  401c28:	3104      	adds	r1, #4
  401c2a:	8806      	ldrh	r6, [r0, #0]
  401c2c:	9107      	str	r1, [sp, #28]
  401c2e:	2700      	movs	r7, #0
  401c30:	07d8      	lsls	r0, r3, #31
  401c32:	f140 8222 	bpl.w	40207a <_vfiprintf_r+0x9c6>
  401c36:	ea56 0107 	orrs.w	r1, r6, r7
  401c3a:	f000 821e 	beq.w	40207a <_vfiprintf_r+0x9c6>
  401c3e:	2130      	movs	r1, #48	; 0x30
  401c40:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  401c44:	f043 0302 	orr.w	r3, r3, #2
  401c48:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  401c4c:	2202      	movs	r2, #2
  401c4e:	e664      	b.n	40191a <_vfiprintf_r+0x266>
  401c50:	9608      	str	r6, [sp, #32]
  401c52:	2800      	cmp	r0, #0
  401c54:	f040 836b 	bne.w	40232e <_vfiprintf_r+0xc7a>
  401c58:	4917      	ldr	r1, [pc, #92]	; (401cb8 <_vfiprintf_r+0x604>)
  401c5a:	910b      	str	r1, [sp, #44]	; 0x2c
  401c5c:	e7d9      	b.n	401c12 <_vfiprintf_r+0x55e>
  401c5e:	9907      	ldr	r1, [sp, #28]
  401c60:	9608      	str	r6, [sp, #32]
  401c62:	680a      	ldr	r2, [r1, #0]
  401c64:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  401c68:	f04f 0000 	mov.w	r0, #0
  401c6c:	460a      	mov	r2, r1
  401c6e:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  401c72:	3204      	adds	r2, #4
  401c74:	2001      	movs	r0, #1
  401c76:	9001      	str	r0, [sp, #4]
  401c78:	9207      	str	r2, [sp, #28]
  401c7a:	9005      	str	r0, [sp, #20]
  401c7c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  401c80:	9302      	str	r3, [sp, #8]
  401c82:	2400      	movs	r4, #0
  401c84:	e670      	b.n	401968 <_vfiprintf_r+0x2b4>
  401c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401c8a:	f898 2000 	ldrb.w	r2, [r8]
  401c8e:	e583      	b.n	401798 <_vfiprintf_r+0xe4>
  401c90:	f898 2000 	ldrb.w	r2, [r8]
  401c94:	2a6c      	cmp	r2, #108	; 0x6c
  401c96:	bf03      	ittte	eq
  401c98:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  401c9c:	f043 0320 	orreq.w	r3, r3, #32
  401ca0:	f108 0801 	addeq.w	r8, r8, #1
  401ca4:	f043 0310 	orrne.w	r3, r3, #16
  401ca8:	e576      	b.n	401798 <_vfiprintf_r+0xe4>
  401caa:	bf00      	nop
  401cac:	004043cc 	.word	0x004043cc
  401cb0:	004043dc 	.word	0x004043dc
  401cb4:	004043b0 	.word	0x004043b0
  401cb8:	0040439c 	.word	0x0040439c
  401cbc:	9907      	ldr	r1, [sp, #28]
  401cbe:	680e      	ldr	r6, [r1, #0]
  401cc0:	460a      	mov	r2, r1
  401cc2:	2e00      	cmp	r6, #0
  401cc4:	f102 0204 	add.w	r2, r2, #4
  401cc8:	f6ff ae0f 	blt.w	4018ea <_vfiprintf_r+0x236>
  401ccc:	9207      	str	r2, [sp, #28]
  401cce:	f898 2000 	ldrb.w	r2, [r8]
  401cd2:	e561      	b.n	401798 <_vfiprintf_r+0xe4>
  401cd4:	f898 2000 	ldrb.w	r2, [r8]
  401cd8:	2001      	movs	r0, #1
  401cda:	252b      	movs	r5, #43	; 0x2b
  401cdc:	e55c      	b.n	401798 <_vfiprintf_r+0xe4>
  401cde:	9907      	ldr	r1, [sp, #28]
  401ce0:	9608      	str	r6, [sp, #32]
  401ce2:	f8d1 b000 	ldr.w	fp, [r1]
  401ce6:	f04f 0200 	mov.w	r2, #0
  401cea:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  401cee:	1d0e      	adds	r6, r1, #4
  401cf0:	f1bb 0f00 	cmp.w	fp, #0
  401cf4:	f000 82e5 	beq.w	4022c2 <_vfiprintf_r+0xc0e>
  401cf8:	1c67      	adds	r7, r4, #1
  401cfa:	f000 82c4 	beq.w	402286 <_vfiprintf_r+0xbd2>
  401cfe:	4622      	mov	r2, r4
  401d00:	2100      	movs	r1, #0
  401d02:	4658      	mov	r0, fp
  401d04:	9301      	str	r3, [sp, #4]
  401d06:	f001 fbd3 	bl	4034b0 <memchr>
  401d0a:	9b01      	ldr	r3, [sp, #4]
  401d0c:	2800      	cmp	r0, #0
  401d0e:	f000 82e5 	beq.w	4022dc <_vfiprintf_r+0xc28>
  401d12:	eba0 020b 	sub.w	r2, r0, fp
  401d16:	9205      	str	r2, [sp, #20]
  401d18:	9607      	str	r6, [sp, #28]
  401d1a:	9302      	str	r3, [sp, #8]
  401d1c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401d20:	2400      	movs	r4, #0
  401d22:	e619      	b.n	401958 <_vfiprintf_r+0x2a4>
  401d24:	f898 2000 	ldrb.w	r2, [r8]
  401d28:	2a2a      	cmp	r2, #42	; 0x2a
  401d2a:	f108 0701 	add.w	r7, r8, #1
  401d2e:	f000 82e9 	beq.w	402304 <_vfiprintf_r+0xc50>
  401d32:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401d36:	2909      	cmp	r1, #9
  401d38:	46b8      	mov	r8, r7
  401d3a:	f04f 0400 	mov.w	r4, #0
  401d3e:	f63f ad2d 	bhi.w	40179c <_vfiprintf_r+0xe8>
  401d42:	f818 2b01 	ldrb.w	r2, [r8], #1
  401d46:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  401d4a:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  401d4e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401d52:	2909      	cmp	r1, #9
  401d54:	d9f5      	bls.n	401d42 <_vfiprintf_r+0x68e>
  401d56:	e521      	b.n	40179c <_vfiprintf_r+0xe8>
  401d58:	f043 0320 	orr.w	r3, r3, #32
  401d5c:	f898 2000 	ldrb.w	r2, [r8]
  401d60:	e51a      	b.n	401798 <_vfiprintf_r+0xe4>
  401d62:	9608      	str	r6, [sp, #32]
  401d64:	2800      	cmp	r0, #0
  401d66:	f040 82db 	bne.w	402320 <_vfiprintf_r+0xc6c>
  401d6a:	2a00      	cmp	r2, #0
  401d6c:	f000 80e7 	beq.w	401f3e <_vfiprintf_r+0x88a>
  401d70:	2101      	movs	r1, #1
  401d72:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  401d76:	f04f 0200 	mov.w	r2, #0
  401d7a:	9101      	str	r1, [sp, #4]
  401d7c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  401d80:	9105      	str	r1, [sp, #20]
  401d82:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  401d86:	e77b      	b.n	401c80 <_vfiprintf_r+0x5cc>
  401d88:	9a07      	ldr	r2, [sp, #28]
  401d8a:	6813      	ldr	r3, [r2, #0]
  401d8c:	3204      	adds	r2, #4
  401d8e:	9207      	str	r2, [sp, #28]
  401d90:	9a03      	ldr	r2, [sp, #12]
  401d92:	601a      	str	r2, [r3, #0]
  401d94:	e4cb      	b.n	40172e <_vfiprintf_r+0x7a>
  401d96:	aa0f      	add	r2, sp, #60	; 0x3c
  401d98:	9904      	ldr	r1, [sp, #16]
  401d9a:	4620      	mov	r0, r4
  401d9c:	f7ff fc4a 	bl	401634 <__sprint_r.part.0>
  401da0:	2800      	cmp	r0, #0
  401da2:	f040 8139 	bne.w	402018 <_vfiprintf_r+0x964>
  401da6:	9910      	ldr	r1, [sp, #64]	; 0x40
  401da8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401daa:	f101 0c01 	add.w	ip, r1, #1
  401dae:	46ce      	mov	lr, r9
  401db0:	e5ff      	b.n	4019b2 <_vfiprintf_r+0x2fe>
  401db2:	9910      	ldr	r1, [sp, #64]	; 0x40
  401db4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401db6:	1c48      	adds	r0, r1, #1
  401db8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401dbc:	2d00      	cmp	r5, #0
  401dbe:	f43f ae22 	beq.w	401a06 <_vfiprintf_r+0x352>
  401dc2:	3201      	adds	r2, #1
  401dc4:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  401dc8:	2101      	movs	r1, #1
  401dca:	2807      	cmp	r0, #7
  401dcc:	9211      	str	r2, [sp, #68]	; 0x44
  401dce:	9010      	str	r0, [sp, #64]	; 0x40
  401dd0:	f8ca 5000 	str.w	r5, [sl]
  401dd4:	f8ca 1004 	str.w	r1, [sl, #4]
  401dd8:	f340 8108 	ble.w	401fec <_vfiprintf_r+0x938>
  401ddc:	2a00      	cmp	r2, #0
  401dde:	f040 81bc 	bne.w	40215a <_vfiprintf_r+0xaa6>
  401de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401de4:	2b00      	cmp	r3, #0
  401de6:	f43f ae1f 	beq.w	401a28 <_vfiprintf_r+0x374>
  401dea:	ab0e      	add	r3, sp, #56	; 0x38
  401dec:	2202      	movs	r2, #2
  401dee:	4608      	mov	r0, r1
  401df0:	931c      	str	r3, [sp, #112]	; 0x70
  401df2:	921d      	str	r2, [sp, #116]	; 0x74
  401df4:	46ca      	mov	sl, r9
  401df6:	4601      	mov	r1, r0
  401df8:	f10a 0a08 	add.w	sl, sl, #8
  401dfc:	3001      	adds	r0, #1
  401dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401e00:	2b80      	cmp	r3, #128	; 0x80
  401e02:	f43f ae19 	beq.w	401a38 <_vfiprintf_r+0x384>
  401e06:	9b05      	ldr	r3, [sp, #20]
  401e08:	1ae4      	subs	r4, r4, r3
  401e0a:	2c00      	cmp	r4, #0
  401e0c:	dd2e      	ble.n	401e6c <_vfiprintf_r+0x7b8>
  401e0e:	2c10      	cmp	r4, #16
  401e10:	4db3      	ldr	r5, [pc, #716]	; (4020e0 <_vfiprintf_r+0xa2c>)
  401e12:	dd1e      	ble.n	401e52 <_vfiprintf_r+0x79e>
  401e14:	46d6      	mov	lr, sl
  401e16:	2610      	movs	r6, #16
  401e18:	9f06      	ldr	r7, [sp, #24]
  401e1a:	f8dd a010 	ldr.w	sl, [sp, #16]
  401e1e:	e006      	b.n	401e2e <_vfiprintf_r+0x77a>
  401e20:	1c88      	adds	r0, r1, #2
  401e22:	f10e 0e08 	add.w	lr, lr, #8
  401e26:	4619      	mov	r1, r3
  401e28:	3c10      	subs	r4, #16
  401e2a:	2c10      	cmp	r4, #16
  401e2c:	dd10      	ble.n	401e50 <_vfiprintf_r+0x79c>
  401e2e:	1c4b      	adds	r3, r1, #1
  401e30:	3210      	adds	r2, #16
  401e32:	2b07      	cmp	r3, #7
  401e34:	9211      	str	r2, [sp, #68]	; 0x44
  401e36:	e88e 0060 	stmia.w	lr, {r5, r6}
  401e3a:	9310      	str	r3, [sp, #64]	; 0x40
  401e3c:	ddf0      	ble.n	401e20 <_vfiprintf_r+0x76c>
  401e3e:	2a00      	cmp	r2, #0
  401e40:	d165      	bne.n	401f0e <_vfiprintf_r+0x85a>
  401e42:	3c10      	subs	r4, #16
  401e44:	2c10      	cmp	r4, #16
  401e46:	f04f 0001 	mov.w	r0, #1
  401e4a:	4611      	mov	r1, r2
  401e4c:	46ce      	mov	lr, r9
  401e4e:	dcee      	bgt.n	401e2e <_vfiprintf_r+0x77a>
  401e50:	46f2      	mov	sl, lr
  401e52:	4422      	add	r2, r4
  401e54:	2807      	cmp	r0, #7
  401e56:	9211      	str	r2, [sp, #68]	; 0x44
  401e58:	f8ca 5000 	str.w	r5, [sl]
  401e5c:	f8ca 4004 	str.w	r4, [sl, #4]
  401e60:	9010      	str	r0, [sp, #64]	; 0x40
  401e62:	f300 8085 	bgt.w	401f70 <_vfiprintf_r+0x8bc>
  401e66:	f10a 0a08 	add.w	sl, sl, #8
  401e6a:	3001      	adds	r0, #1
  401e6c:	9905      	ldr	r1, [sp, #20]
  401e6e:	f8ca b000 	str.w	fp, [sl]
  401e72:	440a      	add	r2, r1
  401e74:	2807      	cmp	r0, #7
  401e76:	9211      	str	r2, [sp, #68]	; 0x44
  401e78:	f8ca 1004 	str.w	r1, [sl, #4]
  401e7c:	9010      	str	r0, [sp, #64]	; 0x40
  401e7e:	f340 8082 	ble.w	401f86 <_vfiprintf_r+0x8d2>
  401e82:	2a00      	cmp	r2, #0
  401e84:	f040 8118 	bne.w	4020b8 <_vfiprintf_r+0xa04>
  401e88:	9b02      	ldr	r3, [sp, #8]
  401e8a:	9210      	str	r2, [sp, #64]	; 0x40
  401e8c:	0758      	lsls	r0, r3, #29
  401e8e:	d535      	bpl.n	401efc <_vfiprintf_r+0x848>
  401e90:	9b08      	ldr	r3, [sp, #32]
  401e92:	9901      	ldr	r1, [sp, #4]
  401e94:	1a5c      	subs	r4, r3, r1
  401e96:	2c00      	cmp	r4, #0
  401e98:	f340 80e7 	ble.w	40206a <_vfiprintf_r+0x9b6>
  401e9c:	46ca      	mov	sl, r9
  401e9e:	2c10      	cmp	r4, #16
  401ea0:	f340 8218 	ble.w	4022d4 <_vfiprintf_r+0xc20>
  401ea4:	9910      	ldr	r1, [sp, #64]	; 0x40
  401ea6:	4e8f      	ldr	r6, [pc, #572]	; (4020e4 <_vfiprintf_r+0xa30>)
  401ea8:	9f06      	ldr	r7, [sp, #24]
  401eaa:	f8dd b010 	ldr.w	fp, [sp, #16]
  401eae:	2510      	movs	r5, #16
  401eb0:	e006      	b.n	401ec0 <_vfiprintf_r+0x80c>
  401eb2:	1c88      	adds	r0, r1, #2
  401eb4:	f10a 0a08 	add.w	sl, sl, #8
  401eb8:	4619      	mov	r1, r3
  401eba:	3c10      	subs	r4, #16
  401ebc:	2c10      	cmp	r4, #16
  401ebe:	dd11      	ble.n	401ee4 <_vfiprintf_r+0x830>
  401ec0:	1c4b      	adds	r3, r1, #1
  401ec2:	3210      	adds	r2, #16
  401ec4:	2b07      	cmp	r3, #7
  401ec6:	9211      	str	r2, [sp, #68]	; 0x44
  401ec8:	f8ca 6000 	str.w	r6, [sl]
  401ecc:	f8ca 5004 	str.w	r5, [sl, #4]
  401ed0:	9310      	str	r3, [sp, #64]	; 0x40
  401ed2:	ddee      	ble.n	401eb2 <_vfiprintf_r+0x7fe>
  401ed4:	bb42      	cbnz	r2, 401f28 <_vfiprintf_r+0x874>
  401ed6:	3c10      	subs	r4, #16
  401ed8:	2c10      	cmp	r4, #16
  401eda:	f04f 0001 	mov.w	r0, #1
  401ede:	4611      	mov	r1, r2
  401ee0:	46ca      	mov	sl, r9
  401ee2:	dced      	bgt.n	401ec0 <_vfiprintf_r+0x80c>
  401ee4:	4422      	add	r2, r4
  401ee6:	2807      	cmp	r0, #7
  401ee8:	9211      	str	r2, [sp, #68]	; 0x44
  401eea:	f8ca 6000 	str.w	r6, [sl]
  401eee:	f8ca 4004 	str.w	r4, [sl, #4]
  401ef2:	9010      	str	r0, [sp, #64]	; 0x40
  401ef4:	dd51      	ble.n	401f9a <_vfiprintf_r+0x8e6>
  401ef6:	2a00      	cmp	r2, #0
  401ef8:	f040 819b 	bne.w	402232 <_vfiprintf_r+0xb7e>
  401efc:	9b03      	ldr	r3, [sp, #12]
  401efe:	9a08      	ldr	r2, [sp, #32]
  401f00:	9901      	ldr	r1, [sp, #4]
  401f02:	428a      	cmp	r2, r1
  401f04:	bfac      	ite	ge
  401f06:	189b      	addge	r3, r3, r2
  401f08:	185b      	addlt	r3, r3, r1
  401f0a:	9303      	str	r3, [sp, #12]
  401f0c:	e04e      	b.n	401fac <_vfiprintf_r+0x8f8>
  401f0e:	aa0f      	add	r2, sp, #60	; 0x3c
  401f10:	4651      	mov	r1, sl
  401f12:	4638      	mov	r0, r7
  401f14:	f7ff fb8e 	bl	401634 <__sprint_r.part.0>
  401f18:	2800      	cmp	r0, #0
  401f1a:	f040 813f 	bne.w	40219c <_vfiprintf_r+0xae8>
  401f1e:	9910      	ldr	r1, [sp, #64]	; 0x40
  401f20:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401f22:	1c48      	adds	r0, r1, #1
  401f24:	46ce      	mov	lr, r9
  401f26:	e77f      	b.n	401e28 <_vfiprintf_r+0x774>
  401f28:	aa0f      	add	r2, sp, #60	; 0x3c
  401f2a:	4659      	mov	r1, fp
  401f2c:	4638      	mov	r0, r7
  401f2e:	f7ff fb81 	bl	401634 <__sprint_r.part.0>
  401f32:	b960      	cbnz	r0, 401f4e <_vfiprintf_r+0x89a>
  401f34:	9910      	ldr	r1, [sp, #64]	; 0x40
  401f36:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401f38:	1c48      	adds	r0, r1, #1
  401f3a:	46ca      	mov	sl, r9
  401f3c:	e7bd      	b.n	401eba <_vfiprintf_r+0x806>
  401f3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401f40:	f8dd b010 	ldr.w	fp, [sp, #16]
  401f44:	2b00      	cmp	r3, #0
  401f46:	f040 81d4 	bne.w	4022f2 <_vfiprintf_r+0xc3e>
  401f4a:	2300      	movs	r3, #0
  401f4c:	9310      	str	r3, [sp, #64]	; 0x40
  401f4e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401f52:	f013 0f01 	tst.w	r3, #1
  401f56:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401f5a:	d102      	bne.n	401f62 <_vfiprintf_r+0x8ae>
  401f5c:	059a      	lsls	r2, r3, #22
  401f5e:	f140 80de 	bpl.w	40211e <_vfiprintf_r+0xa6a>
  401f62:	065b      	lsls	r3, r3, #25
  401f64:	f53f acb2 	bmi.w	4018cc <_vfiprintf_r+0x218>
  401f68:	9803      	ldr	r0, [sp, #12]
  401f6a:	b02d      	add	sp, #180	; 0xb4
  401f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401f70:	2a00      	cmp	r2, #0
  401f72:	f040 8106 	bne.w	402182 <_vfiprintf_r+0xace>
  401f76:	9a05      	ldr	r2, [sp, #20]
  401f78:	921d      	str	r2, [sp, #116]	; 0x74
  401f7a:	2301      	movs	r3, #1
  401f7c:	9211      	str	r2, [sp, #68]	; 0x44
  401f7e:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  401f82:	9310      	str	r3, [sp, #64]	; 0x40
  401f84:	46ca      	mov	sl, r9
  401f86:	f10a 0a08 	add.w	sl, sl, #8
  401f8a:	9b02      	ldr	r3, [sp, #8]
  401f8c:	0759      	lsls	r1, r3, #29
  401f8e:	d504      	bpl.n	401f9a <_vfiprintf_r+0x8e6>
  401f90:	9b08      	ldr	r3, [sp, #32]
  401f92:	9901      	ldr	r1, [sp, #4]
  401f94:	1a5c      	subs	r4, r3, r1
  401f96:	2c00      	cmp	r4, #0
  401f98:	dc81      	bgt.n	401e9e <_vfiprintf_r+0x7ea>
  401f9a:	9b03      	ldr	r3, [sp, #12]
  401f9c:	9908      	ldr	r1, [sp, #32]
  401f9e:	9801      	ldr	r0, [sp, #4]
  401fa0:	4281      	cmp	r1, r0
  401fa2:	bfac      	ite	ge
  401fa4:	185b      	addge	r3, r3, r1
  401fa6:	181b      	addlt	r3, r3, r0
  401fa8:	9303      	str	r3, [sp, #12]
  401faa:	bb72      	cbnz	r2, 40200a <_vfiprintf_r+0x956>
  401fac:	2300      	movs	r3, #0
  401fae:	9310      	str	r3, [sp, #64]	; 0x40
  401fb0:	46ca      	mov	sl, r9
  401fb2:	f7ff bbbc 	b.w	40172e <_vfiprintf_r+0x7a>
  401fb6:	aa0f      	add	r2, sp, #60	; 0x3c
  401fb8:	9904      	ldr	r1, [sp, #16]
  401fba:	4620      	mov	r0, r4
  401fbc:	f7ff fb3a 	bl	401634 <__sprint_r.part.0>
  401fc0:	bb50      	cbnz	r0, 402018 <_vfiprintf_r+0x964>
  401fc2:	9910      	ldr	r1, [sp, #64]	; 0x40
  401fc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401fc6:	f101 0e01 	add.w	lr, r1, #1
  401fca:	46cc      	mov	ip, r9
  401fcc:	e548      	b.n	401a60 <_vfiprintf_r+0x3ac>
  401fce:	2a00      	cmp	r2, #0
  401fd0:	f040 8140 	bne.w	402254 <_vfiprintf_r+0xba0>
  401fd4:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  401fd8:	2900      	cmp	r1, #0
  401fda:	f000 811b 	beq.w	402214 <_vfiprintf_r+0xb60>
  401fde:	2201      	movs	r2, #1
  401fe0:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  401fe4:	4610      	mov	r0, r2
  401fe6:	921d      	str	r2, [sp, #116]	; 0x74
  401fe8:	911c      	str	r1, [sp, #112]	; 0x70
  401fea:	46ca      	mov	sl, r9
  401fec:	4601      	mov	r1, r0
  401fee:	f10a 0a08 	add.w	sl, sl, #8
  401ff2:	3001      	adds	r0, #1
  401ff4:	e507      	b.n	401a06 <_vfiprintf_r+0x352>
  401ff6:	9b02      	ldr	r3, [sp, #8]
  401ff8:	2a01      	cmp	r2, #1
  401ffa:	f000 8098 	beq.w	40212e <_vfiprintf_r+0xa7a>
  401ffe:	2a02      	cmp	r2, #2
  402000:	d10d      	bne.n	40201e <_vfiprintf_r+0x96a>
  402002:	9302      	str	r3, [sp, #8]
  402004:	2600      	movs	r6, #0
  402006:	2700      	movs	r7, #0
  402008:	e5b0      	b.n	401b6c <_vfiprintf_r+0x4b8>
  40200a:	aa0f      	add	r2, sp, #60	; 0x3c
  40200c:	9904      	ldr	r1, [sp, #16]
  40200e:	9806      	ldr	r0, [sp, #24]
  402010:	f7ff fb10 	bl	401634 <__sprint_r.part.0>
  402014:	2800      	cmp	r0, #0
  402016:	d0c9      	beq.n	401fac <_vfiprintf_r+0x8f8>
  402018:	f8dd b010 	ldr.w	fp, [sp, #16]
  40201c:	e797      	b.n	401f4e <_vfiprintf_r+0x89a>
  40201e:	9302      	str	r3, [sp, #8]
  402020:	2600      	movs	r6, #0
  402022:	2700      	movs	r7, #0
  402024:	4649      	mov	r1, r9
  402026:	e000      	b.n	40202a <_vfiprintf_r+0x976>
  402028:	4659      	mov	r1, fp
  40202a:	08f2      	lsrs	r2, r6, #3
  40202c:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  402030:	08f8      	lsrs	r0, r7, #3
  402032:	f006 0307 	and.w	r3, r6, #7
  402036:	4607      	mov	r7, r0
  402038:	4616      	mov	r6, r2
  40203a:	3330      	adds	r3, #48	; 0x30
  40203c:	ea56 0207 	orrs.w	r2, r6, r7
  402040:	f801 3c01 	strb.w	r3, [r1, #-1]
  402044:	f101 3bff 	add.w	fp, r1, #4294967295
  402048:	d1ee      	bne.n	402028 <_vfiprintf_r+0x974>
  40204a:	9a02      	ldr	r2, [sp, #8]
  40204c:	07d6      	lsls	r6, r2, #31
  40204e:	f57f ad9d 	bpl.w	401b8c <_vfiprintf_r+0x4d8>
  402052:	2b30      	cmp	r3, #48	; 0x30
  402054:	f43f ad9a 	beq.w	401b8c <_vfiprintf_r+0x4d8>
  402058:	3902      	subs	r1, #2
  40205a:	2330      	movs	r3, #48	; 0x30
  40205c:	f80b 3c01 	strb.w	r3, [fp, #-1]
  402060:	eba9 0301 	sub.w	r3, r9, r1
  402064:	9305      	str	r3, [sp, #20]
  402066:	468b      	mov	fp, r1
  402068:	e476      	b.n	401958 <_vfiprintf_r+0x2a4>
  40206a:	9b03      	ldr	r3, [sp, #12]
  40206c:	9a08      	ldr	r2, [sp, #32]
  40206e:	428a      	cmp	r2, r1
  402070:	bfac      	ite	ge
  402072:	189b      	addge	r3, r3, r2
  402074:	185b      	addlt	r3, r3, r1
  402076:	9303      	str	r3, [sp, #12]
  402078:	e798      	b.n	401fac <_vfiprintf_r+0x8f8>
  40207a:	2202      	movs	r2, #2
  40207c:	e44d      	b.n	40191a <_vfiprintf_r+0x266>
  40207e:	2f00      	cmp	r7, #0
  402080:	bf08      	it	eq
  402082:	2e0a      	cmpeq	r6, #10
  402084:	d352      	bcc.n	40212c <_vfiprintf_r+0xa78>
  402086:	46cb      	mov	fp, r9
  402088:	4630      	mov	r0, r6
  40208a:	4639      	mov	r1, r7
  40208c:	220a      	movs	r2, #10
  40208e:	2300      	movs	r3, #0
  402090:	f001 ffb2 	bl	403ff8 <__aeabi_uldivmod>
  402094:	3230      	adds	r2, #48	; 0x30
  402096:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  40209a:	4630      	mov	r0, r6
  40209c:	4639      	mov	r1, r7
  40209e:	2300      	movs	r3, #0
  4020a0:	220a      	movs	r2, #10
  4020a2:	f001 ffa9 	bl	403ff8 <__aeabi_uldivmod>
  4020a6:	4606      	mov	r6, r0
  4020a8:	460f      	mov	r7, r1
  4020aa:	ea56 0307 	orrs.w	r3, r6, r7
  4020ae:	d1eb      	bne.n	402088 <_vfiprintf_r+0x9d4>
  4020b0:	e56c      	b.n	401b8c <_vfiprintf_r+0x4d8>
  4020b2:	9405      	str	r4, [sp, #20]
  4020b4:	46cb      	mov	fp, r9
  4020b6:	e44f      	b.n	401958 <_vfiprintf_r+0x2a4>
  4020b8:	aa0f      	add	r2, sp, #60	; 0x3c
  4020ba:	9904      	ldr	r1, [sp, #16]
  4020bc:	9806      	ldr	r0, [sp, #24]
  4020be:	f7ff fab9 	bl	401634 <__sprint_r.part.0>
  4020c2:	2800      	cmp	r0, #0
  4020c4:	d1a8      	bne.n	402018 <_vfiprintf_r+0x964>
  4020c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4020c8:	46ca      	mov	sl, r9
  4020ca:	e75e      	b.n	401f8a <_vfiprintf_r+0x8d6>
  4020cc:	aa0f      	add	r2, sp, #60	; 0x3c
  4020ce:	9904      	ldr	r1, [sp, #16]
  4020d0:	9806      	ldr	r0, [sp, #24]
  4020d2:	f7ff faaf 	bl	401634 <__sprint_r.part.0>
  4020d6:	2800      	cmp	r0, #0
  4020d8:	d19e      	bne.n	402018 <_vfiprintf_r+0x964>
  4020da:	46ca      	mov	sl, r9
  4020dc:	f7ff bbc0 	b.w	401860 <_vfiprintf_r+0x1ac>
  4020e0:	004043dc 	.word	0x004043dc
  4020e4:	004043cc 	.word	0x004043cc
  4020e8:	3104      	adds	r1, #4
  4020ea:	6816      	ldr	r6, [r2, #0]
  4020ec:	9107      	str	r1, [sp, #28]
  4020ee:	2201      	movs	r2, #1
  4020f0:	2700      	movs	r7, #0
  4020f2:	e412      	b.n	40191a <_vfiprintf_r+0x266>
  4020f4:	9807      	ldr	r0, [sp, #28]
  4020f6:	4601      	mov	r1, r0
  4020f8:	3104      	adds	r1, #4
  4020fa:	6806      	ldr	r6, [r0, #0]
  4020fc:	9107      	str	r1, [sp, #28]
  4020fe:	2700      	movs	r7, #0
  402100:	e40b      	b.n	40191a <_vfiprintf_r+0x266>
  402102:	680e      	ldr	r6, [r1, #0]
  402104:	3104      	adds	r1, #4
  402106:	9107      	str	r1, [sp, #28]
  402108:	2700      	movs	r7, #0
  40210a:	e591      	b.n	401c30 <_vfiprintf_r+0x57c>
  40210c:	9907      	ldr	r1, [sp, #28]
  40210e:	680e      	ldr	r6, [r1, #0]
  402110:	460a      	mov	r2, r1
  402112:	17f7      	asrs	r7, r6, #31
  402114:	3204      	adds	r2, #4
  402116:	9207      	str	r2, [sp, #28]
  402118:	4630      	mov	r0, r6
  40211a:	4639      	mov	r1, r7
  40211c:	e50f      	b.n	401b3e <_vfiprintf_r+0x48a>
  40211e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402122:	f000 fe7f 	bl	402e24 <__retarget_lock_release_recursive>
  402126:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40212a:	e71a      	b.n	401f62 <_vfiprintf_r+0x8ae>
  40212c:	9b02      	ldr	r3, [sp, #8]
  40212e:	9302      	str	r3, [sp, #8]
  402130:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  402134:	3630      	adds	r6, #48	; 0x30
  402136:	2301      	movs	r3, #1
  402138:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  40213c:	9305      	str	r3, [sp, #20]
  40213e:	e40b      	b.n	401958 <_vfiprintf_r+0x2a4>
  402140:	aa0f      	add	r2, sp, #60	; 0x3c
  402142:	9904      	ldr	r1, [sp, #16]
  402144:	9806      	ldr	r0, [sp, #24]
  402146:	f7ff fa75 	bl	401634 <__sprint_r.part.0>
  40214a:	2800      	cmp	r0, #0
  40214c:	f47f af64 	bne.w	402018 <_vfiprintf_r+0x964>
  402150:	9910      	ldr	r1, [sp, #64]	; 0x40
  402152:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402154:	1c48      	adds	r0, r1, #1
  402156:	46ca      	mov	sl, r9
  402158:	e651      	b.n	401dfe <_vfiprintf_r+0x74a>
  40215a:	aa0f      	add	r2, sp, #60	; 0x3c
  40215c:	9904      	ldr	r1, [sp, #16]
  40215e:	9806      	ldr	r0, [sp, #24]
  402160:	f7ff fa68 	bl	401634 <__sprint_r.part.0>
  402164:	2800      	cmp	r0, #0
  402166:	f47f af57 	bne.w	402018 <_vfiprintf_r+0x964>
  40216a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40216c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40216e:	1c48      	adds	r0, r1, #1
  402170:	46ca      	mov	sl, r9
  402172:	e448      	b.n	401a06 <_vfiprintf_r+0x352>
  402174:	2a00      	cmp	r2, #0
  402176:	f040 8091 	bne.w	40229c <_vfiprintf_r+0xbe8>
  40217a:	2001      	movs	r0, #1
  40217c:	4611      	mov	r1, r2
  40217e:	46ca      	mov	sl, r9
  402180:	e641      	b.n	401e06 <_vfiprintf_r+0x752>
  402182:	aa0f      	add	r2, sp, #60	; 0x3c
  402184:	9904      	ldr	r1, [sp, #16]
  402186:	9806      	ldr	r0, [sp, #24]
  402188:	f7ff fa54 	bl	401634 <__sprint_r.part.0>
  40218c:	2800      	cmp	r0, #0
  40218e:	f47f af43 	bne.w	402018 <_vfiprintf_r+0x964>
  402192:	9810      	ldr	r0, [sp, #64]	; 0x40
  402194:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402196:	3001      	adds	r0, #1
  402198:	46ca      	mov	sl, r9
  40219a:	e667      	b.n	401e6c <_vfiprintf_r+0x7b8>
  40219c:	46d3      	mov	fp, sl
  40219e:	e6d6      	b.n	401f4e <_vfiprintf_r+0x89a>
  4021a0:	9e07      	ldr	r6, [sp, #28]
  4021a2:	3607      	adds	r6, #7
  4021a4:	f026 0207 	bic.w	r2, r6, #7
  4021a8:	f102 0108 	add.w	r1, r2, #8
  4021ac:	e9d2 6700 	ldrd	r6, r7, [r2]
  4021b0:	9107      	str	r1, [sp, #28]
  4021b2:	2201      	movs	r2, #1
  4021b4:	f7ff bbb1 	b.w	40191a <_vfiprintf_r+0x266>
  4021b8:	9e07      	ldr	r6, [sp, #28]
  4021ba:	3607      	adds	r6, #7
  4021bc:	f026 0607 	bic.w	r6, r6, #7
  4021c0:	e9d6 0100 	ldrd	r0, r1, [r6]
  4021c4:	f106 0208 	add.w	r2, r6, #8
  4021c8:	9207      	str	r2, [sp, #28]
  4021ca:	4606      	mov	r6, r0
  4021cc:	460f      	mov	r7, r1
  4021ce:	e4b6      	b.n	401b3e <_vfiprintf_r+0x48a>
  4021d0:	9e07      	ldr	r6, [sp, #28]
  4021d2:	3607      	adds	r6, #7
  4021d4:	f026 0207 	bic.w	r2, r6, #7
  4021d8:	f102 0108 	add.w	r1, r2, #8
  4021dc:	e9d2 6700 	ldrd	r6, r7, [r2]
  4021e0:	9107      	str	r1, [sp, #28]
  4021e2:	2200      	movs	r2, #0
  4021e4:	f7ff bb99 	b.w	40191a <_vfiprintf_r+0x266>
  4021e8:	9e07      	ldr	r6, [sp, #28]
  4021ea:	3607      	adds	r6, #7
  4021ec:	f026 0107 	bic.w	r1, r6, #7
  4021f0:	f101 0008 	add.w	r0, r1, #8
  4021f4:	9007      	str	r0, [sp, #28]
  4021f6:	e9d1 6700 	ldrd	r6, r7, [r1]
  4021fa:	e519      	b.n	401c30 <_vfiprintf_r+0x57c>
  4021fc:	46cb      	mov	fp, r9
  4021fe:	f7ff bbab 	b.w	401958 <_vfiprintf_r+0x2a4>
  402202:	252d      	movs	r5, #45	; 0x2d
  402204:	4276      	negs	r6, r6
  402206:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40220a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40220e:	2201      	movs	r2, #1
  402210:	f7ff bb88 	b.w	401924 <_vfiprintf_r+0x270>
  402214:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402216:	b9b3      	cbnz	r3, 402246 <_vfiprintf_r+0xb92>
  402218:	4611      	mov	r1, r2
  40221a:	2001      	movs	r0, #1
  40221c:	46ca      	mov	sl, r9
  40221e:	e5f2      	b.n	401e06 <_vfiprintf_r+0x752>
  402220:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402224:	f000 fdfe 	bl	402e24 <__retarget_lock_release_recursive>
  402228:	f04f 33ff 	mov.w	r3, #4294967295
  40222c:	9303      	str	r3, [sp, #12]
  40222e:	f7ff bb50 	b.w	4018d2 <_vfiprintf_r+0x21e>
  402232:	aa0f      	add	r2, sp, #60	; 0x3c
  402234:	9904      	ldr	r1, [sp, #16]
  402236:	9806      	ldr	r0, [sp, #24]
  402238:	f7ff f9fc 	bl	401634 <__sprint_r.part.0>
  40223c:	2800      	cmp	r0, #0
  40223e:	f47f aeeb 	bne.w	402018 <_vfiprintf_r+0x964>
  402242:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402244:	e6a9      	b.n	401f9a <_vfiprintf_r+0x8e6>
  402246:	ab0e      	add	r3, sp, #56	; 0x38
  402248:	2202      	movs	r2, #2
  40224a:	931c      	str	r3, [sp, #112]	; 0x70
  40224c:	921d      	str	r2, [sp, #116]	; 0x74
  40224e:	2001      	movs	r0, #1
  402250:	46ca      	mov	sl, r9
  402252:	e5d0      	b.n	401df6 <_vfiprintf_r+0x742>
  402254:	aa0f      	add	r2, sp, #60	; 0x3c
  402256:	9904      	ldr	r1, [sp, #16]
  402258:	9806      	ldr	r0, [sp, #24]
  40225a:	f7ff f9eb 	bl	401634 <__sprint_r.part.0>
  40225e:	2800      	cmp	r0, #0
  402260:	f47f aeda 	bne.w	402018 <_vfiprintf_r+0x964>
  402264:	9910      	ldr	r1, [sp, #64]	; 0x40
  402266:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402268:	1c48      	adds	r0, r1, #1
  40226a:	46ca      	mov	sl, r9
  40226c:	e5a4      	b.n	401db8 <_vfiprintf_r+0x704>
  40226e:	9a07      	ldr	r2, [sp, #28]
  402270:	9903      	ldr	r1, [sp, #12]
  402272:	6813      	ldr	r3, [r2, #0]
  402274:	17cd      	asrs	r5, r1, #31
  402276:	4608      	mov	r0, r1
  402278:	3204      	adds	r2, #4
  40227a:	4629      	mov	r1, r5
  40227c:	9207      	str	r2, [sp, #28]
  40227e:	e9c3 0100 	strd	r0, r1, [r3]
  402282:	f7ff ba54 	b.w	40172e <_vfiprintf_r+0x7a>
  402286:	4658      	mov	r0, fp
  402288:	9607      	str	r6, [sp, #28]
  40228a:	9302      	str	r3, [sp, #8]
  40228c:	f001 fc78 	bl	403b80 <strlen>
  402290:	2400      	movs	r4, #0
  402292:	9005      	str	r0, [sp, #20]
  402294:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402298:	f7ff bb5e 	b.w	401958 <_vfiprintf_r+0x2a4>
  40229c:	aa0f      	add	r2, sp, #60	; 0x3c
  40229e:	9904      	ldr	r1, [sp, #16]
  4022a0:	9806      	ldr	r0, [sp, #24]
  4022a2:	f7ff f9c7 	bl	401634 <__sprint_r.part.0>
  4022a6:	2800      	cmp	r0, #0
  4022a8:	f47f aeb6 	bne.w	402018 <_vfiprintf_r+0x964>
  4022ac:	9910      	ldr	r1, [sp, #64]	; 0x40
  4022ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4022b0:	1c48      	adds	r0, r1, #1
  4022b2:	46ca      	mov	sl, r9
  4022b4:	e5a7      	b.n	401e06 <_vfiprintf_r+0x752>
  4022b6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4022b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4022ba:	4e20      	ldr	r6, [pc, #128]	; (40233c <_vfiprintf_r+0xc88>)
  4022bc:	3101      	adds	r1, #1
  4022be:	f7ff bb90 	b.w	4019e2 <_vfiprintf_r+0x32e>
  4022c2:	2c06      	cmp	r4, #6
  4022c4:	bf28      	it	cs
  4022c6:	2406      	movcs	r4, #6
  4022c8:	9405      	str	r4, [sp, #20]
  4022ca:	9607      	str	r6, [sp, #28]
  4022cc:	9401      	str	r4, [sp, #4]
  4022ce:	f8df b070 	ldr.w	fp, [pc, #112]	; 402340 <_vfiprintf_r+0xc8c>
  4022d2:	e4d5      	b.n	401c80 <_vfiprintf_r+0x5cc>
  4022d4:	9810      	ldr	r0, [sp, #64]	; 0x40
  4022d6:	4e19      	ldr	r6, [pc, #100]	; (40233c <_vfiprintf_r+0xc88>)
  4022d8:	3001      	adds	r0, #1
  4022da:	e603      	b.n	401ee4 <_vfiprintf_r+0x830>
  4022dc:	9405      	str	r4, [sp, #20]
  4022de:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4022e2:	9607      	str	r6, [sp, #28]
  4022e4:	9302      	str	r3, [sp, #8]
  4022e6:	4604      	mov	r4, r0
  4022e8:	f7ff bb36 	b.w	401958 <_vfiprintf_r+0x2a4>
  4022ec:	4686      	mov	lr, r0
  4022ee:	f7ff bbce 	b.w	401a8e <_vfiprintf_r+0x3da>
  4022f2:	9806      	ldr	r0, [sp, #24]
  4022f4:	aa0f      	add	r2, sp, #60	; 0x3c
  4022f6:	4659      	mov	r1, fp
  4022f8:	f7ff f99c 	bl	401634 <__sprint_r.part.0>
  4022fc:	2800      	cmp	r0, #0
  4022fe:	f43f ae24 	beq.w	401f4a <_vfiprintf_r+0x896>
  402302:	e624      	b.n	401f4e <_vfiprintf_r+0x89a>
  402304:	9907      	ldr	r1, [sp, #28]
  402306:	f898 2001 	ldrb.w	r2, [r8, #1]
  40230a:	680c      	ldr	r4, [r1, #0]
  40230c:	3104      	adds	r1, #4
  40230e:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  402312:	46b8      	mov	r8, r7
  402314:	9107      	str	r1, [sp, #28]
  402316:	f7ff ba3f 	b.w	401798 <_vfiprintf_r+0xe4>
  40231a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40231e:	e43c      	b.n	401b9a <_vfiprintf_r+0x4e6>
  402320:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402324:	e521      	b.n	401d6a <_vfiprintf_r+0x6b6>
  402326:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40232a:	f7ff bbf4 	b.w	401b16 <_vfiprintf_r+0x462>
  40232e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402332:	e491      	b.n	401c58 <_vfiprintf_r+0x5a4>
  402334:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402338:	e469      	b.n	401c0e <_vfiprintf_r+0x55a>
  40233a:	bf00      	nop
  40233c:	004043cc 	.word	0x004043cc
  402340:	004043c4 	.word	0x004043c4

00402344 <__sbprintf>:
  402344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402348:	460c      	mov	r4, r1
  40234a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40234e:	8989      	ldrh	r1, [r1, #12]
  402350:	6e66      	ldr	r6, [r4, #100]	; 0x64
  402352:	89e5      	ldrh	r5, [r4, #14]
  402354:	9619      	str	r6, [sp, #100]	; 0x64
  402356:	f021 0102 	bic.w	r1, r1, #2
  40235a:	4606      	mov	r6, r0
  40235c:	69e0      	ldr	r0, [r4, #28]
  40235e:	f8ad 100c 	strh.w	r1, [sp, #12]
  402362:	4617      	mov	r7, r2
  402364:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402368:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40236a:	f8ad 500e 	strh.w	r5, [sp, #14]
  40236e:	4698      	mov	r8, r3
  402370:	ad1a      	add	r5, sp, #104	; 0x68
  402372:	2300      	movs	r3, #0
  402374:	9007      	str	r0, [sp, #28]
  402376:	a816      	add	r0, sp, #88	; 0x58
  402378:	9209      	str	r2, [sp, #36]	; 0x24
  40237a:	9306      	str	r3, [sp, #24]
  40237c:	9500      	str	r5, [sp, #0]
  40237e:	9504      	str	r5, [sp, #16]
  402380:	9102      	str	r1, [sp, #8]
  402382:	9105      	str	r1, [sp, #20]
  402384:	f000 fd48 	bl	402e18 <__retarget_lock_init_recursive>
  402388:	4643      	mov	r3, r8
  40238a:	463a      	mov	r2, r7
  40238c:	4669      	mov	r1, sp
  40238e:	4630      	mov	r0, r6
  402390:	f7ff f990 	bl	4016b4 <_vfiprintf_r>
  402394:	1e05      	subs	r5, r0, #0
  402396:	db07      	blt.n	4023a8 <__sbprintf+0x64>
  402398:	4630      	mov	r0, r6
  40239a:	4669      	mov	r1, sp
  40239c:	f000 f928 	bl	4025f0 <_fflush_r>
  4023a0:	2800      	cmp	r0, #0
  4023a2:	bf18      	it	ne
  4023a4:	f04f 35ff 	movne.w	r5, #4294967295
  4023a8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4023ac:	065b      	lsls	r3, r3, #25
  4023ae:	d503      	bpl.n	4023b8 <__sbprintf+0x74>
  4023b0:	89a3      	ldrh	r3, [r4, #12]
  4023b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4023b6:	81a3      	strh	r3, [r4, #12]
  4023b8:	9816      	ldr	r0, [sp, #88]	; 0x58
  4023ba:	f000 fd2f 	bl	402e1c <__retarget_lock_close_recursive>
  4023be:	4628      	mov	r0, r5
  4023c0:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4023c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004023c8 <__swsetup_r>:
  4023c8:	b538      	push	{r3, r4, r5, lr}
  4023ca:	4b30      	ldr	r3, [pc, #192]	; (40248c <__swsetup_r+0xc4>)
  4023cc:	681b      	ldr	r3, [r3, #0]
  4023ce:	4605      	mov	r5, r0
  4023d0:	460c      	mov	r4, r1
  4023d2:	b113      	cbz	r3, 4023da <__swsetup_r+0x12>
  4023d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4023d6:	2a00      	cmp	r2, #0
  4023d8:	d038      	beq.n	40244c <__swsetup_r+0x84>
  4023da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4023de:	b293      	uxth	r3, r2
  4023e0:	0718      	lsls	r0, r3, #28
  4023e2:	d50c      	bpl.n	4023fe <__swsetup_r+0x36>
  4023e4:	6920      	ldr	r0, [r4, #16]
  4023e6:	b1a8      	cbz	r0, 402414 <__swsetup_r+0x4c>
  4023e8:	f013 0201 	ands.w	r2, r3, #1
  4023ec:	d01e      	beq.n	40242c <__swsetup_r+0x64>
  4023ee:	6963      	ldr	r3, [r4, #20]
  4023f0:	2200      	movs	r2, #0
  4023f2:	425b      	negs	r3, r3
  4023f4:	61a3      	str	r3, [r4, #24]
  4023f6:	60a2      	str	r2, [r4, #8]
  4023f8:	b1f0      	cbz	r0, 402438 <__swsetup_r+0x70>
  4023fa:	2000      	movs	r0, #0
  4023fc:	bd38      	pop	{r3, r4, r5, pc}
  4023fe:	06d9      	lsls	r1, r3, #27
  402400:	d53c      	bpl.n	40247c <__swsetup_r+0xb4>
  402402:	0758      	lsls	r0, r3, #29
  402404:	d426      	bmi.n	402454 <__swsetup_r+0x8c>
  402406:	6920      	ldr	r0, [r4, #16]
  402408:	f042 0308 	orr.w	r3, r2, #8
  40240c:	81a3      	strh	r3, [r4, #12]
  40240e:	b29b      	uxth	r3, r3
  402410:	2800      	cmp	r0, #0
  402412:	d1e9      	bne.n	4023e8 <__swsetup_r+0x20>
  402414:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402418:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40241c:	d0e4      	beq.n	4023e8 <__swsetup_r+0x20>
  40241e:	4628      	mov	r0, r5
  402420:	4621      	mov	r1, r4
  402422:	f000 fd2f 	bl	402e84 <__smakebuf_r>
  402426:	89a3      	ldrh	r3, [r4, #12]
  402428:	6920      	ldr	r0, [r4, #16]
  40242a:	e7dd      	b.n	4023e8 <__swsetup_r+0x20>
  40242c:	0799      	lsls	r1, r3, #30
  40242e:	bf58      	it	pl
  402430:	6962      	ldrpl	r2, [r4, #20]
  402432:	60a2      	str	r2, [r4, #8]
  402434:	2800      	cmp	r0, #0
  402436:	d1e0      	bne.n	4023fa <__swsetup_r+0x32>
  402438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40243c:	061a      	lsls	r2, r3, #24
  40243e:	d5dd      	bpl.n	4023fc <__swsetup_r+0x34>
  402440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402444:	81a3      	strh	r3, [r4, #12]
  402446:	f04f 30ff 	mov.w	r0, #4294967295
  40244a:	bd38      	pop	{r3, r4, r5, pc}
  40244c:	4618      	mov	r0, r3
  40244e:	f000 f927 	bl	4026a0 <__sinit>
  402452:	e7c2      	b.n	4023da <__swsetup_r+0x12>
  402454:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402456:	b151      	cbz	r1, 40246e <__swsetup_r+0xa6>
  402458:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40245c:	4299      	cmp	r1, r3
  40245e:	d004      	beq.n	40246a <__swsetup_r+0xa2>
  402460:	4628      	mov	r0, r5
  402462:	f000 fa43 	bl	4028ec <_free_r>
  402466:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40246a:	2300      	movs	r3, #0
  40246c:	6323      	str	r3, [r4, #48]	; 0x30
  40246e:	2300      	movs	r3, #0
  402470:	6920      	ldr	r0, [r4, #16]
  402472:	6063      	str	r3, [r4, #4]
  402474:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  402478:	6020      	str	r0, [r4, #0]
  40247a:	e7c5      	b.n	402408 <__swsetup_r+0x40>
  40247c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402480:	2309      	movs	r3, #9
  402482:	602b      	str	r3, [r5, #0]
  402484:	f04f 30ff 	mov.w	r0, #4294967295
  402488:	81a2      	strh	r2, [r4, #12]
  40248a:	bd38      	pop	{r3, r4, r5, pc}
  40248c:	20400010 	.word	0x20400010

00402490 <register_fini>:
  402490:	4b02      	ldr	r3, [pc, #8]	; (40249c <register_fini+0xc>)
  402492:	b113      	cbz	r3, 40249a <register_fini+0xa>
  402494:	4802      	ldr	r0, [pc, #8]	; (4024a0 <register_fini+0x10>)
  402496:	f000 b805 	b.w	4024a4 <atexit>
  40249a:	4770      	bx	lr
  40249c:	00000000 	.word	0x00000000
  4024a0:	00402711 	.word	0x00402711

004024a4 <atexit>:
  4024a4:	2300      	movs	r3, #0
  4024a6:	4601      	mov	r1, r0
  4024a8:	461a      	mov	r2, r3
  4024aa:	4618      	mov	r0, r3
  4024ac:	f001 bc7c 	b.w	403da8 <__register_exitproc>

004024b0 <__sflush_r>:
  4024b0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4024b4:	b29a      	uxth	r2, r3
  4024b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4024ba:	460d      	mov	r5, r1
  4024bc:	0711      	lsls	r1, r2, #28
  4024be:	4680      	mov	r8, r0
  4024c0:	d43a      	bmi.n	402538 <__sflush_r+0x88>
  4024c2:	686a      	ldr	r2, [r5, #4]
  4024c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4024c8:	2a00      	cmp	r2, #0
  4024ca:	81ab      	strh	r3, [r5, #12]
  4024cc:	dd6f      	ble.n	4025ae <__sflush_r+0xfe>
  4024ce:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4024d0:	2c00      	cmp	r4, #0
  4024d2:	d049      	beq.n	402568 <__sflush_r+0xb8>
  4024d4:	2200      	movs	r2, #0
  4024d6:	b29b      	uxth	r3, r3
  4024d8:	f8d8 6000 	ldr.w	r6, [r8]
  4024dc:	f8c8 2000 	str.w	r2, [r8]
  4024e0:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4024e4:	d067      	beq.n	4025b6 <__sflush_r+0x106>
  4024e6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4024e8:	075f      	lsls	r7, r3, #29
  4024ea:	d505      	bpl.n	4024f8 <__sflush_r+0x48>
  4024ec:	6869      	ldr	r1, [r5, #4]
  4024ee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4024f0:	1a52      	subs	r2, r2, r1
  4024f2:	b10b      	cbz	r3, 4024f8 <__sflush_r+0x48>
  4024f4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4024f6:	1ad2      	subs	r2, r2, r3
  4024f8:	2300      	movs	r3, #0
  4024fa:	69e9      	ldr	r1, [r5, #28]
  4024fc:	4640      	mov	r0, r8
  4024fe:	47a0      	blx	r4
  402500:	1c44      	adds	r4, r0, #1
  402502:	d03c      	beq.n	40257e <__sflush_r+0xce>
  402504:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402508:	692a      	ldr	r2, [r5, #16]
  40250a:	602a      	str	r2, [r5, #0]
  40250c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402510:	2200      	movs	r2, #0
  402512:	81ab      	strh	r3, [r5, #12]
  402514:	04db      	lsls	r3, r3, #19
  402516:	606a      	str	r2, [r5, #4]
  402518:	d447      	bmi.n	4025aa <__sflush_r+0xfa>
  40251a:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40251c:	f8c8 6000 	str.w	r6, [r8]
  402520:	b311      	cbz	r1, 402568 <__sflush_r+0xb8>
  402522:	f105 0340 	add.w	r3, r5, #64	; 0x40
  402526:	4299      	cmp	r1, r3
  402528:	d002      	beq.n	402530 <__sflush_r+0x80>
  40252a:	4640      	mov	r0, r8
  40252c:	f000 f9de 	bl	4028ec <_free_r>
  402530:	2000      	movs	r0, #0
  402532:	6328      	str	r0, [r5, #48]	; 0x30
  402534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402538:	692e      	ldr	r6, [r5, #16]
  40253a:	b1ae      	cbz	r6, 402568 <__sflush_r+0xb8>
  40253c:	682c      	ldr	r4, [r5, #0]
  40253e:	602e      	str	r6, [r5, #0]
  402540:	0791      	lsls	r1, r2, #30
  402542:	bf0c      	ite	eq
  402544:	696b      	ldreq	r3, [r5, #20]
  402546:	2300      	movne	r3, #0
  402548:	1ba4      	subs	r4, r4, r6
  40254a:	60ab      	str	r3, [r5, #8]
  40254c:	e00a      	b.n	402564 <__sflush_r+0xb4>
  40254e:	4623      	mov	r3, r4
  402550:	4632      	mov	r2, r6
  402552:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  402554:	69e9      	ldr	r1, [r5, #28]
  402556:	4640      	mov	r0, r8
  402558:	47b8      	blx	r7
  40255a:	2800      	cmp	r0, #0
  40255c:	eba4 0400 	sub.w	r4, r4, r0
  402560:	4406      	add	r6, r0
  402562:	dd04      	ble.n	40256e <__sflush_r+0xbe>
  402564:	2c00      	cmp	r4, #0
  402566:	dcf2      	bgt.n	40254e <__sflush_r+0x9e>
  402568:	2000      	movs	r0, #0
  40256a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40256e:	89ab      	ldrh	r3, [r5, #12]
  402570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402574:	81ab      	strh	r3, [r5, #12]
  402576:	f04f 30ff 	mov.w	r0, #4294967295
  40257a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40257e:	f8d8 4000 	ldr.w	r4, [r8]
  402582:	2c1d      	cmp	r4, #29
  402584:	d8f3      	bhi.n	40256e <__sflush_r+0xbe>
  402586:	4b19      	ldr	r3, [pc, #100]	; (4025ec <__sflush_r+0x13c>)
  402588:	40e3      	lsrs	r3, r4
  40258a:	43db      	mvns	r3, r3
  40258c:	f013 0301 	ands.w	r3, r3, #1
  402590:	d1ed      	bne.n	40256e <__sflush_r+0xbe>
  402592:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  402596:	606b      	str	r3, [r5, #4]
  402598:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  40259c:	6929      	ldr	r1, [r5, #16]
  40259e:	81ab      	strh	r3, [r5, #12]
  4025a0:	04da      	lsls	r2, r3, #19
  4025a2:	6029      	str	r1, [r5, #0]
  4025a4:	d5b9      	bpl.n	40251a <__sflush_r+0x6a>
  4025a6:	2c00      	cmp	r4, #0
  4025a8:	d1b7      	bne.n	40251a <__sflush_r+0x6a>
  4025aa:	6528      	str	r0, [r5, #80]	; 0x50
  4025ac:	e7b5      	b.n	40251a <__sflush_r+0x6a>
  4025ae:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4025b0:	2a00      	cmp	r2, #0
  4025b2:	dc8c      	bgt.n	4024ce <__sflush_r+0x1e>
  4025b4:	e7d8      	b.n	402568 <__sflush_r+0xb8>
  4025b6:	2301      	movs	r3, #1
  4025b8:	69e9      	ldr	r1, [r5, #28]
  4025ba:	4640      	mov	r0, r8
  4025bc:	47a0      	blx	r4
  4025be:	1c43      	adds	r3, r0, #1
  4025c0:	4602      	mov	r2, r0
  4025c2:	d002      	beq.n	4025ca <__sflush_r+0x11a>
  4025c4:	89ab      	ldrh	r3, [r5, #12]
  4025c6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4025c8:	e78e      	b.n	4024e8 <__sflush_r+0x38>
  4025ca:	f8d8 3000 	ldr.w	r3, [r8]
  4025ce:	2b00      	cmp	r3, #0
  4025d0:	d0f8      	beq.n	4025c4 <__sflush_r+0x114>
  4025d2:	2b1d      	cmp	r3, #29
  4025d4:	d001      	beq.n	4025da <__sflush_r+0x12a>
  4025d6:	2b16      	cmp	r3, #22
  4025d8:	d102      	bne.n	4025e0 <__sflush_r+0x130>
  4025da:	f8c8 6000 	str.w	r6, [r8]
  4025de:	e7c3      	b.n	402568 <__sflush_r+0xb8>
  4025e0:	89ab      	ldrh	r3, [r5, #12]
  4025e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4025e6:	81ab      	strh	r3, [r5, #12]
  4025e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4025ec:	20400001 	.word	0x20400001

004025f0 <_fflush_r>:
  4025f0:	b538      	push	{r3, r4, r5, lr}
  4025f2:	460d      	mov	r5, r1
  4025f4:	4604      	mov	r4, r0
  4025f6:	b108      	cbz	r0, 4025fc <_fflush_r+0xc>
  4025f8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4025fa:	b1bb      	cbz	r3, 40262c <_fflush_r+0x3c>
  4025fc:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  402600:	b188      	cbz	r0, 402626 <_fflush_r+0x36>
  402602:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402604:	07db      	lsls	r3, r3, #31
  402606:	d401      	bmi.n	40260c <_fflush_r+0x1c>
  402608:	0581      	lsls	r1, r0, #22
  40260a:	d517      	bpl.n	40263c <_fflush_r+0x4c>
  40260c:	4620      	mov	r0, r4
  40260e:	4629      	mov	r1, r5
  402610:	f7ff ff4e 	bl	4024b0 <__sflush_r>
  402614:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402616:	07da      	lsls	r2, r3, #31
  402618:	4604      	mov	r4, r0
  40261a:	d402      	bmi.n	402622 <_fflush_r+0x32>
  40261c:	89ab      	ldrh	r3, [r5, #12]
  40261e:	059b      	lsls	r3, r3, #22
  402620:	d507      	bpl.n	402632 <_fflush_r+0x42>
  402622:	4620      	mov	r0, r4
  402624:	bd38      	pop	{r3, r4, r5, pc}
  402626:	4604      	mov	r4, r0
  402628:	4620      	mov	r0, r4
  40262a:	bd38      	pop	{r3, r4, r5, pc}
  40262c:	f000 f838 	bl	4026a0 <__sinit>
  402630:	e7e4      	b.n	4025fc <_fflush_r+0xc>
  402632:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402634:	f000 fbf6 	bl	402e24 <__retarget_lock_release_recursive>
  402638:	4620      	mov	r0, r4
  40263a:	bd38      	pop	{r3, r4, r5, pc}
  40263c:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40263e:	f000 fbef 	bl	402e20 <__retarget_lock_acquire_recursive>
  402642:	e7e3      	b.n	40260c <_fflush_r+0x1c>

00402644 <_cleanup_r>:
  402644:	4901      	ldr	r1, [pc, #4]	; (40264c <_cleanup_r+0x8>)
  402646:	f000 bbaf 	b.w	402da8 <_fwalk_reent>
  40264a:	bf00      	nop
  40264c:	00403e91 	.word	0x00403e91

00402650 <std.isra.0>:
  402650:	b510      	push	{r4, lr}
  402652:	2300      	movs	r3, #0
  402654:	4604      	mov	r4, r0
  402656:	8181      	strh	r1, [r0, #12]
  402658:	81c2      	strh	r2, [r0, #14]
  40265a:	6003      	str	r3, [r0, #0]
  40265c:	6043      	str	r3, [r0, #4]
  40265e:	6083      	str	r3, [r0, #8]
  402660:	6643      	str	r3, [r0, #100]	; 0x64
  402662:	6103      	str	r3, [r0, #16]
  402664:	6143      	str	r3, [r0, #20]
  402666:	6183      	str	r3, [r0, #24]
  402668:	4619      	mov	r1, r3
  40266a:	2208      	movs	r2, #8
  40266c:	305c      	adds	r0, #92	; 0x5c
  40266e:	f7fe ff93 	bl	401598 <memset>
  402672:	4807      	ldr	r0, [pc, #28]	; (402690 <std.isra.0+0x40>)
  402674:	4907      	ldr	r1, [pc, #28]	; (402694 <std.isra.0+0x44>)
  402676:	4a08      	ldr	r2, [pc, #32]	; (402698 <std.isra.0+0x48>)
  402678:	4b08      	ldr	r3, [pc, #32]	; (40269c <std.isra.0+0x4c>)
  40267a:	6220      	str	r0, [r4, #32]
  40267c:	61e4      	str	r4, [r4, #28]
  40267e:	6261      	str	r1, [r4, #36]	; 0x24
  402680:	62a2      	str	r2, [r4, #40]	; 0x28
  402682:	62e3      	str	r3, [r4, #44]	; 0x2c
  402684:	f104 0058 	add.w	r0, r4, #88	; 0x58
  402688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40268c:	f000 bbc4 	b.w	402e18 <__retarget_lock_init_recursive>
  402690:	00403ad5 	.word	0x00403ad5
  402694:	00403af9 	.word	0x00403af9
  402698:	00403b35 	.word	0x00403b35
  40269c:	00403b55 	.word	0x00403b55

004026a0 <__sinit>:
  4026a0:	b510      	push	{r4, lr}
  4026a2:	4604      	mov	r4, r0
  4026a4:	4812      	ldr	r0, [pc, #72]	; (4026f0 <__sinit+0x50>)
  4026a6:	f000 fbbb 	bl	402e20 <__retarget_lock_acquire_recursive>
  4026aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4026ac:	b9d2      	cbnz	r2, 4026e4 <__sinit+0x44>
  4026ae:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4026b2:	4810      	ldr	r0, [pc, #64]	; (4026f4 <__sinit+0x54>)
  4026b4:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4026b8:	2103      	movs	r1, #3
  4026ba:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4026be:	63e0      	str	r0, [r4, #60]	; 0x3c
  4026c0:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4026c4:	6860      	ldr	r0, [r4, #4]
  4026c6:	2104      	movs	r1, #4
  4026c8:	f7ff ffc2 	bl	402650 <std.isra.0>
  4026cc:	2201      	movs	r2, #1
  4026ce:	2109      	movs	r1, #9
  4026d0:	68a0      	ldr	r0, [r4, #8]
  4026d2:	f7ff ffbd 	bl	402650 <std.isra.0>
  4026d6:	2202      	movs	r2, #2
  4026d8:	2112      	movs	r1, #18
  4026da:	68e0      	ldr	r0, [r4, #12]
  4026dc:	f7ff ffb8 	bl	402650 <std.isra.0>
  4026e0:	2301      	movs	r3, #1
  4026e2:	63a3      	str	r3, [r4, #56]	; 0x38
  4026e4:	4802      	ldr	r0, [pc, #8]	; (4026f0 <__sinit+0x50>)
  4026e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4026ea:	f000 bb9b 	b.w	402e24 <__retarget_lock_release_recursive>
  4026ee:	bf00      	nop
  4026f0:	204012e4 	.word	0x204012e4
  4026f4:	00402645 	.word	0x00402645

004026f8 <__sfp_lock_acquire>:
  4026f8:	4801      	ldr	r0, [pc, #4]	; (402700 <__sfp_lock_acquire+0x8>)
  4026fa:	f000 bb91 	b.w	402e20 <__retarget_lock_acquire_recursive>
  4026fe:	bf00      	nop
  402700:	204012f8 	.word	0x204012f8

00402704 <__sfp_lock_release>:
  402704:	4801      	ldr	r0, [pc, #4]	; (40270c <__sfp_lock_release+0x8>)
  402706:	f000 bb8d 	b.w	402e24 <__retarget_lock_release_recursive>
  40270a:	bf00      	nop
  40270c:	204012f8 	.word	0x204012f8

00402710 <__libc_fini_array>:
  402710:	b538      	push	{r3, r4, r5, lr}
  402712:	4c0a      	ldr	r4, [pc, #40]	; (40273c <__libc_fini_array+0x2c>)
  402714:	4d0a      	ldr	r5, [pc, #40]	; (402740 <__libc_fini_array+0x30>)
  402716:	1b64      	subs	r4, r4, r5
  402718:	10a4      	asrs	r4, r4, #2
  40271a:	d00a      	beq.n	402732 <__libc_fini_array+0x22>
  40271c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402720:	3b01      	subs	r3, #1
  402722:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402726:	3c01      	subs	r4, #1
  402728:	f855 3904 	ldr.w	r3, [r5], #-4
  40272c:	4798      	blx	r3
  40272e:	2c00      	cmp	r4, #0
  402730:	d1f9      	bne.n	402726 <__libc_fini_array+0x16>
  402732:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402736:	f001 beed 	b.w	404514 <_fini>
  40273a:	bf00      	nop
  40273c:	00404524 	.word	0x00404524
  402740:	00404520 	.word	0x00404520

00402744 <__fputwc>:
  402744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402748:	b082      	sub	sp, #8
  40274a:	4680      	mov	r8, r0
  40274c:	4689      	mov	r9, r1
  40274e:	4614      	mov	r4, r2
  402750:	f000 fb54 	bl	402dfc <__locale_mb_cur_max>
  402754:	2801      	cmp	r0, #1
  402756:	d036      	beq.n	4027c6 <__fputwc+0x82>
  402758:	464a      	mov	r2, r9
  40275a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40275e:	a901      	add	r1, sp, #4
  402760:	4640      	mov	r0, r8
  402762:	f001 fad3 	bl	403d0c <_wcrtomb_r>
  402766:	1c42      	adds	r2, r0, #1
  402768:	4606      	mov	r6, r0
  40276a:	d025      	beq.n	4027b8 <__fputwc+0x74>
  40276c:	b3a8      	cbz	r0, 4027da <__fputwc+0x96>
  40276e:	f89d e004 	ldrb.w	lr, [sp, #4]
  402772:	2500      	movs	r5, #0
  402774:	f10d 0a04 	add.w	sl, sp, #4
  402778:	e009      	b.n	40278e <__fputwc+0x4a>
  40277a:	6823      	ldr	r3, [r4, #0]
  40277c:	1c5a      	adds	r2, r3, #1
  40277e:	6022      	str	r2, [r4, #0]
  402780:	f883 e000 	strb.w	lr, [r3]
  402784:	3501      	adds	r5, #1
  402786:	42b5      	cmp	r5, r6
  402788:	d227      	bcs.n	4027da <__fputwc+0x96>
  40278a:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40278e:	68a3      	ldr	r3, [r4, #8]
  402790:	3b01      	subs	r3, #1
  402792:	2b00      	cmp	r3, #0
  402794:	60a3      	str	r3, [r4, #8]
  402796:	daf0      	bge.n	40277a <__fputwc+0x36>
  402798:	69a7      	ldr	r7, [r4, #24]
  40279a:	42bb      	cmp	r3, r7
  40279c:	4671      	mov	r1, lr
  40279e:	4622      	mov	r2, r4
  4027a0:	4640      	mov	r0, r8
  4027a2:	db02      	blt.n	4027aa <__fputwc+0x66>
  4027a4:	f1be 0f0a 	cmp.w	lr, #10
  4027a8:	d1e7      	bne.n	40277a <__fputwc+0x36>
  4027aa:	f001 fa57 	bl	403c5c <__swbuf_r>
  4027ae:	1c43      	adds	r3, r0, #1
  4027b0:	d1e8      	bne.n	402784 <__fputwc+0x40>
  4027b2:	b002      	add	sp, #8
  4027b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4027b8:	89a3      	ldrh	r3, [r4, #12]
  4027ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4027be:	81a3      	strh	r3, [r4, #12]
  4027c0:	b002      	add	sp, #8
  4027c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4027c6:	f109 33ff 	add.w	r3, r9, #4294967295
  4027ca:	2bfe      	cmp	r3, #254	; 0xfe
  4027cc:	d8c4      	bhi.n	402758 <__fputwc+0x14>
  4027ce:	fa5f fe89 	uxtb.w	lr, r9
  4027d2:	4606      	mov	r6, r0
  4027d4:	f88d e004 	strb.w	lr, [sp, #4]
  4027d8:	e7cb      	b.n	402772 <__fputwc+0x2e>
  4027da:	4648      	mov	r0, r9
  4027dc:	b002      	add	sp, #8
  4027de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4027e2:	bf00      	nop

004027e4 <_fputwc_r>:
  4027e4:	b530      	push	{r4, r5, lr}
  4027e6:	6e53      	ldr	r3, [r2, #100]	; 0x64
  4027e8:	f013 0f01 	tst.w	r3, #1
  4027ec:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4027f0:	4614      	mov	r4, r2
  4027f2:	b083      	sub	sp, #12
  4027f4:	4605      	mov	r5, r0
  4027f6:	b29a      	uxth	r2, r3
  4027f8:	d101      	bne.n	4027fe <_fputwc_r+0x1a>
  4027fa:	0590      	lsls	r0, r2, #22
  4027fc:	d51c      	bpl.n	402838 <_fputwc_r+0x54>
  4027fe:	0490      	lsls	r0, r2, #18
  402800:	d406      	bmi.n	402810 <_fputwc_r+0x2c>
  402802:	6e62      	ldr	r2, [r4, #100]	; 0x64
  402804:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402808:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40280c:	81a3      	strh	r3, [r4, #12]
  40280e:	6662      	str	r2, [r4, #100]	; 0x64
  402810:	4628      	mov	r0, r5
  402812:	4622      	mov	r2, r4
  402814:	f7ff ff96 	bl	402744 <__fputwc>
  402818:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40281a:	07da      	lsls	r2, r3, #31
  40281c:	4605      	mov	r5, r0
  40281e:	d402      	bmi.n	402826 <_fputwc_r+0x42>
  402820:	89a3      	ldrh	r3, [r4, #12]
  402822:	059b      	lsls	r3, r3, #22
  402824:	d502      	bpl.n	40282c <_fputwc_r+0x48>
  402826:	4628      	mov	r0, r5
  402828:	b003      	add	sp, #12
  40282a:	bd30      	pop	{r4, r5, pc}
  40282c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40282e:	f000 faf9 	bl	402e24 <__retarget_lock_release_recursive>
  402832:	4628      	mov	r0, r5
  402834:	b003      	add	sp, #12
  402836:	bd30      	pop	{r4, r5, pc}
  402838:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40283a:	9101      	str	r1, [sp, #4]
  40283c:	f000 faf0 	bl	402e20 <__retarget_lock_acquire_recursive>
  402840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402844:	9901      	ldr	r1, [sp, #4]
  402846:	b29a      	uxth	r2, r3
  402848:	e7d9      	b.n	4027fe <_fputwc_r+0x1a>
  40284a:	bf00      	nop

0040284c <_malloc_trim_r>:
  40284c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40284e:	4f24      	ldr	r7, [pc, #144]	; (4028e0 <_malloc_trim_r+0x94>)
  402850:	460c      	mov	r4, r1
  402852:	4606      	mov	r6, r0
  402854:	f000 ff7a 	bl	40374c <__malloc_lock>
  402858:	68bb      	ldr	r3, [r7, #8]
  40285a:	685d      	ldr	r5, [r3, #4]
  40285c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  402860:	310f      	adds	r1, #15
  402862:	f025 0503 	bic.w	r5, r5, #3
  402866:	4429      	add	r1, r5
  402868:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40286c:	f021 010f 	bic.w	r1, r1, #15
  402870:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  402874:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402878:	db07      	blt.n	40288a <_malloc_trim_r+0x3e>
  40287a:	2100      	movs	r1, #0
  40287c:	4630      	mov	r0, r6
  40287e:	f001 f917 	bl	403ab0 <_sbrk_r>
  402882:	68bb      	ldr	r3, [r7, #8]
  402884:	442b      	add	r3, r5
  402886:	4298      	cmp	r0, r3
  402888:	d004      	beq.n	402894 <_malloc_trim_r+0x48>
  40288a:	4630      	mov	r0, r6
  40288c:	f000 ff64 	bl	403758 <__malloc_unlock>
  402890:	2000      	movs	r0, #0
  402892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402894:	4261      	negs	r1, r4
  402896:	4630      	mov	r0, r6
  402898:	f001 f90a 	bl	403ab0 <_sbrk_r>
  40289c:	3001      	adds	r0, #1
  40289e:	d00d      	beq.n	4028bc <_malloc_trim_r+0x70>
  4028a0:	4b10      	ldr	r3, [pc, #64]	; (4028e4 <_malloc_trim_r+0x98>)
  4028a2:	68ba      	ldr	r2, [r7, #8]
  4028a4:	6819      	ldr	r1, [r3, #0]
  4028a6:	1b2d      	subs	r5, r5, r4
  4028a8:	f045 0501 	orr.w	r5, r5, #1
  4028ac:	4630      	mov	r0, r6
  4028ae:	1b09      	subs	r1, r1, r4
  4028b0:	6055      	str	r5, [r2, #4]
  4028b2:	6019      	str	r1, [r3, #0]
  4028b4:	f000 ff50 	bl	403758 <__malloc_unlock>
  4028b8:	2001      	movs	r0, #1
  4028ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4028bc:	2100      	movs	r1, #0
  4028be:	4630      	mov	r0, r6
  4028c0:	f001 f8f6 	bl	403ab0 <_sbrk_r>
  4028c4:	68ba      	ldr	r2, [r7, #8]
  4028c6:	1a83      	subs	r3, r0, r2
  4028c8:	2b0f      	cmp	r3, #15
  4028ca:	ddde      	ble.n	40288a <_malloc_trim_r+0x3e>
  4028cc:	4c06      	ldr	r4, [pc, #24]	; (4028e8 <_malloc_trim_r+0x9c>)
  4028ce:	4905      	ldr	r1, [pc, #20]	; (4028e4 <_malloc_trim_r+0x98>)
  4028d0:	6824      	ldr	r4, [r4, #0]
  4028d2:	f043 0301 	orr.w	r3, r3, #1
  4028d6:	1b00      	subs	r0, r0, r4
  4028d8:	6053      	str	r3, [r2, #4]
  4028da:	6008      	str	r0, [r1, #0]
  4028dc:	e7d5      	b.n	40288a <_malloc_trim_r+0x3e>
  4028de:	bf00      	nop
  4028e0:	204005b0 	.word	0x204005b0
  4028e4:	20400a94 	.word	0x20400a94
  4028e8:	204009b8 	.word	0x204009b8

004028ec <_free_r>:
  4028ec:	2900      	cmp	r1, #0
  4028ee:	d044      	beq.n	40297a <_free_r+0x8e>
  4028f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4028f4:	460d      	mov	r5, r1
  4028f6:	4680      	mov	r8, r0
  4028f8:	f000 ff28 	bl	40374c <__malloc_lock>
  4028fc:	f855 7c04 	ldr.w	r7, [r5, #-4]
  402900:	4969      	ldr	r1, [pc, #420]	; (402aa8 <_free_r+0x1bc>)
  402902:	f027 0301 	bic.w	r3, r7, #1
  402906:	f1a5 0408 	sub.w	r4, r5, #8
  40290a:	18e2      	adds	r2, r4, r3
  40290c:	688e      	ldr	r6, [r1, #8]
  40290e:	6850      	ldr	r0, [r2, #4]
  402910:	42b2      	cmp	r2, r6
  402912:	f020 0003 	bic.w	r0, r0, #3
  402916:	d05e      	beq.n	4029d6 <_free_r+0xea>
  402918:	07fe      	lsls	r6, r7, #31
  40291a:	6050      	str	r0, [r2, #4]
  40291c:	d40b      	bmi.n	402936 <_free_r+0x4a>
  40291e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  402922:	1be4      	subs	r4, r4, r7
  402924:	f101 0e08 	add.w	lr, r1, #8
  402928:	68a5      	ldr	r5, [r4, #8]
  40292a:	4575      	cmp	r5, lr
  40292c:	443b      	add	r3, r7
  40292e:	d06d      	beq.n	402a0c <_free_r+0x120>
  402930:	68e7      	ldr	r7, [r4, #12]
  402932:	60ef      	str	r7, [r5, #12]
  402934:	60bd      	str	r5, [r7, #8]
  402936:	1815      	adds	r5, r2, r0
  402938:	686d      	ldr	r5, [r5, #4]
  40293a:	07ed      	lsls	r5, r5, #31
  40293c:	d53e      	bpl.n	4029bc <_free_r+0xd0>
  40293e:	f043 0201 	orr.w	r2, r3, #1
  402942:	6062      	str	r2, [r4, #4]
  402944:	50e3      	str	r3, [r4, r3]
  402946:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40294a:	d217      	bcs.n	40297c <_free_r+0x90>
  40294c:	08db      	lsrs	r3, r3, #3
  40294e:	1c58      	adds	r0, r3, #1
  402950:	109a      	asrs	r2, r3, #2
  402952:	684d      	ldr	r5, [r1, #4]
  402954:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  402958:	60a7      	str	r7, [r4, #8]
  40295a:	2301      	movs	r3, #1
  40295c:	4093      	lsls	r3, r2
  40295e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  402962:	432b      	orrs	r3, r5
  402964:	3a08      	subs	r2, #8
  402966:	60e2      	str	r2, [r4, #12]
  402968:	604b      	str	r3, [r1, #4]
  40296a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40296e:	60fc      	str	r4, [r7, #12]
  402970:	4640      	mov	r0, r8
  402972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402976:	f000 beef 	b.w	403758 <__malloc_unlock>
  40297a:	4770      	bx	lr
  40297c:	0a5a      	lsrs	r2, r3, #9
  40297e:	2a04      	cmp	r2, #4
  402980:	d852      	bhi.n	402a28 <_free_r+0x13c>
  402982:	099a      	lsrs	r2, r3, #6
  402984:	f102 0739 	add.w	r7, r2, #57	; 0x39
  402988:	00ff      	lsls	r7, r7, #3
  40298a:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40298e:	19c8      	adds	r0, r1, r7
  402990:	59ca      	ldr	r2, [r1, r7]
  402992:	3808      	subs	r0, #8
  402994:	4290      	cmp	r0, r2
  402996:	d04f      	beq.n	402a38 <_free_r+0x14c>
  402998:	6851      	ldr	r1, [r2, #4]
  40299a:	f021 0103 	bic.w	r1, r1, #3
  40299e:	428b      	cmp	r3, r1
  4029a0:	d232      	bcs.n	402a08 <_free_r+0x11c>
  4029a2:	6892      	ldr	r2, [r2, #8]
  4029a4:	4290      	cmp	r0, r2
  4029a6:	d1f7      	bne.n	402998 <_free_r+0xac>
  4029a8:	68c3      	ldr	r3, [r0, #12]
  4029aa:	60a0      	str	r0, [r4, #8]
  4029ac:	60e3      	str	r3, [r4, #12]
  4029ae:	609c      	str	r4, [r3, #8]
  4029b0:	60c4      	str	r4, [r0, #12]
  4029b2:	4640      	mov	r0, r8
  4029b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4029b8:	f000 bece 	b.w	403758 <__malloc_unlock>
  4029bc:	6895      	ldr	r5, [r2, #8]
  4029be:	4f3b      	ldr	r7, [pc, #236]	; (402aac <_free_r+0x1c0>)
  4029c0:	42bd      	cmp	r5, r7
  4029c2:	4403      	add	r3, r0
  4029c4:	d040      	beq.n	402a48 <_free_r+0x15c>
  4029c6:	68d0      	ldr	r0, [r2, #12]
  4029c8:	60e8      	str	r0, [r5, #12]
  4029ca:	f043 0201 	orr.w	r2, r3, #1
  4029ce:	6085      	str	r5, [r0, #8]
  4029d0:	6062      	str	r2, [r4, #4]
  4029d2:	50e3      	str	r3, [r4, r3]
  4029d4:	e7b7      	b.n	402946 <_free_r+0x5a>
  4029d6:	07ff      	lsls	r7, r7, #31
  4029d8:	4403      	add	r3, r0
  4029da:	d407      	bmi.n	4029ec <_free_r+0x100>
  4029dc:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4029e0:	1aa4      	subs	r4, r4, r2
  4029e2:	4413      	add	r3, r2
  4029e4:	68a0      	ldr	r0, [r4, #8]
  4029e6:	68e2      	ldr	r2, [r4, #12]
  4029e8:	60c2      	str	r2, [r0, #12]
  4029ea:	6090      	str	r0, [r2, #8]
  4029ec:	4a30      	ldr	r2, [pc, #192]	; (402ab0 <_free_r+0x1c4>)
  4029ee:	6812      	ldr	r2, [r2, #0]
  4029f0:	f043 0001 	orr.w	r0, r3, #1
  4029f4:	4293      	cmp	r3, r2
  4029f6:	6060      	str	r0, [r4, #4]
  4029f8:	608c      	str	r4, [r1, #8]
  4029fa:	d3b9      	bcc.n	402970 <_free_r+0x84>
  4029fc:	4b2d      	ldr	r3, [pc, #180]	; (402ab4 <_free_r+0x1c8>)
  4029fe:	4640      	mov	r0, r8
  402a00:	6819      	ldr	r1, [r3, #0]
  402a02:	f7ff ff23 	bl	40284c <_malloc_trim_r>
  402a06:	e7b3      	b.n	402970 <_free_r+0x84>
  402a08:	4610      	mov	r0, r2
  402a0a:	e7cd      	b.n	4029a8 <_free_r+0xbc>
  402a0c:	1811      	adds	r1, r2, r0
  402a0e:	6849      	ldr	r1, [r1, #4]
  402a10:	07c9      	lsls	r1, r1, #31
  402a12:	d444      	bmi.n	402a9e <_free_r+0x1b2>
  402a14:	6891      	ldr	r1, [r2, #8]
  402a16:	68d2      	ldr	r2, [r2, #12]
  402a18:	60ca      	str	r2, [r1, #12]
  402a1a:	4403      	add	r3, r0
  402a1c:	f043 0001 	orr.w	r0, r3, #1
  402a20:	6091      	str	r1, [r2, #8]
  402a22:	6060      	str	r0, [r4, #4]
  402a24:	50e3      	str	r3, [r4, r3]
  402a26:	e7a3      	b.n	402970 <_free_r+0x84>
  402a28:	2a14      	cmp	r2, #20
  402a2a:	d816      	bhi.n	402a5a <_free_r+0x16e>
  402a2c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  402a30:	00ff      	lsls	r7, r7, #3
  402a32:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  402a36:	e7aa      	b.n	40298e <_free_r+0xa2>
  402a38:	10aa      	asrs	r2, r5, #2
  402a3a:	2301      	movs	r3, #1
  402a3c:	684d      	ldr	r5, [r1, #4]
  402a3e:	4093      	lsls	r3, r2
  402a40:	432b      	orrs	r3, r5
  402a42:	604b      	str	r3, [r1, #4]
  402a44:	4603      	mov	r3, r0
  402a46:	e7b0      	b.n	4029aa <_free_r+0xbe>
  402a48:	f043 0201 	orr.w	r2, r3, #1
  402a4c:	614c      	str	r4, [r1, #20]
  402a4e:	610c      	str	r4, [r1, #16]
  402a50:	60e5      	str	r5, [r4, #12]
  402a52:	60a5      	str	r5, [r4, #8]
  402a54:	6062      	str	r2, [r4, #4]
  402a56:	50e3      	str	r3, [r4, r3]
  402a58:	e78a      	b.n	402970 <_free_r+0x84>
  402a5a:	2a54      	cmp	r2, #84	; 0x54
  402a5c:	d806      	bhi.n	402a6c <_free_r+0x180>
  402a5e:	0b1a      	lsrs	r2, r3, #12
  402a60:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  402a64:	00ff      	lsls	r7, r7, #3
  402a66:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  402a6a:	e790      	b.n	40298e <_free_r+0xa2>
  402a6c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402a70:	d806      	bhi.n	402a80 <_free_r+0x194>
  402a72:	0bda      	lsrs	r2, r3, #15
  402a74:	f102 0778 	add.w	r7, r2, #120	; 0x78
  402a78:	00ff      	lsls	r7, r7, #3
  402a7a:	f102 0577 	add.w	r5, r2, #119	; 0x77
  402a7e:	e786      	b.n	40298e <_free_r+0xa2>
  402a80:	f240 5054 	movw	r0, #1364	; 0x554
  402a84:	4282      	cmp	r2, r0
  402a86:	d806      	bhi.n	402a96 <_free_r+0x1aa>
  402a88:	0c9a      	lsrs	r2, r3, #18
  402a8a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  402a8e:	00ff      	lsls	r7, r7, #3
  402a90:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  402a94:	e77b      	b.n	40298e <_free_r+0xa2>
  402a96:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  402a9a:	257e      	movs	r5, #126	; 0x7e
  402a9c:	e777      	b.n	40298e <_free_r+0xa2>
  402a9e:	f043 0101 	orr.w	r1, r3, #1
  402aa2:	6061      	str	r1, [r4, #4]
  402aa4:	6013      	str	r3, [r2, #0]
  402aa6:	e763      	b.n	402970 <_free_r+0x84>
  402aa8:	204005b0 	.word	0x204005b0
  402aac:	204005b8 	.word	0x204005b8
  402ab0:	204009bc 	.word	0x204009bc
  402ab4:	20400ac4 	.word	0x20400ac4

00402ab8 <__sfvwrite_r>:
  402ab8:	6893      	ldr	r3, [r2, #8]
  402aba:	2b00      	cmp	r3, #0
  402abc:	d073      	beq.n	402ba6 <__sfvwrite_r+0xee>
  402abe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402ac2:	898b      	ldrh	r3, [r1, #12]
  402ac4:	b083      	sub	sp, #12
  402ac6:	460c      	mov	r4, r1
  402ac8:	0719      	lsls	r1, r3, #28
  402aca:	9000      	str	r0, [sp, #0]
  402acc:	4616      	mov	r6, r2
  402ace:	d526      	bpl.n	402b1e <__sfvwrite_r+0x66>
  402ad0:	6922      	ldr	r2, [r4, #16]
  402ad2:	b322      	cbz	r2, 402b1e <__sfvwrite_r+0x66>
  402ad4:	f013 0002 	ands.w	r0, r3, #2
  402ad8:	6835      	ldr	r5, [r6, #0]
  402ada:	d02c      	beq.n	402b36 <__sfvwrite_r+0x7e>
  402adc:	f04f 0900 	mov.w	r9, #0
  402ae0:	4fb0      	ldr	r7, [pc, #704]	; (402da4 <__sfvwrite_r+0x2ec>)
  402ae2:	46c8      	mov	r8, r9
  402ae4:	46b2      	mov	sl, r6
  402ae6:	45b8      	cmp	r8, r7
  402ae8:	4643      	mov	r3, r8
  402aea:	464a      	mov	r2, r9
  402aec:	bf28      	it	cs
  402aee:	463b      	movcs	r3, r7
  402af0:	9800      	ldr	r0, [sp, #0]
  402af2:	f1b8 0f00 	cmp.w	r8, #0
  402af6:	d050      	beq.n	402b9a <__sfvwrite_r+0xe2>
  402af8:	69e1      	ldr	r1, [r4, #28]
  402afa:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402afc:	47b0      	blx	r6
  402afe:	2800      	cmp	r0, #0
  402b00:	dd58      	ble.n	402bb4 <__sfvwrite_r+0xfc>
  402b02:	f8da 3008 	ldr.w	r3, [sl, #8]
  402b06:	1a1b      	subs	r3, r3, r0
  402b08:	4481      	add	r9, r0
  402b0a:	eba8 0800 	sub.w	r8, r8, r0
  402b0e:	f8ca 3008 	str.w	r3, [sl, #8]
  402b12:	2b00      	cmp	r3, #0
  402b14:	d1e7      	bne.n	402ae6 <__sfvwrite_r+0x2e>
  402b16:	2000      	movs	r0, #0
  402b18:	b003      	add	sp, #12
  402b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402b1e:	4621      	mov	r1, r4
  402b20:	9800      	ldr	r0, [sp, #0]
  402b22:	f7ff fc51 	bl	4023c8 <__swsetup_r>
  402b26:	2800      	cmp	r0, #0
  402b28:	f040 8133 	bne.w	402d92 <__sfvwrite_r+0x2da>
  402b2c:	89a3      	ldrh	r3, [r4, #12]
  402b2e:	6835      	ldr	r5, [r6, #0]
  402b30:	f013 0002 	ands.w	r0, r3, #2
  402b34:	d1d2      	bne.n	402adc <__sfvwrite_r+0x24>
  402b36:	f013 0901 	ands.w	r9, r3, #1
  402b3a:	d145      	bne.n	402bc8 <__sfvwrite_r+0x110>
  402b3c:	464f      	mov	r7, r9
  402b3e:	9601      	str	r6, [sp, #4]
  402b40:	b337      	cbz	r7, 402b90 <__sfvwrite_r+0xd8>
  402b42:	059a      	lsls	r2, r3, #22
  402b44:	f8d4 8008 	ldr.w	r8, [r4, #8]
  402b48:	f140 8083 	bpl.w	402c52 <__sfvwrite_r+0x19a>
  402b4c:	4547      	cmp	r7, r8
  402b4e:	46c3      	mov	fp, r8
  402b50:	f0c0 80ab 	bcc.w	402caa <__sfvwrite_r+0x1f2>
  402b54:	f413 6f90 	tst.w	r3, #1152	; 0x480
  402b58:	f040 80ac 	bne.w	402cb4 <__sfvwrite_r+0x1fc>
  402b5c:	6820      	ldr	r0, [r4, #0]
  402b5e:	46ba      	mov	sl, r7
  402b60:	465a      	mov	r2, fp
  402b62:	4649      	mov	r1, r9
  402b64:	f000 fd8e 	bl	403684 <memmove>
  402b68:	68a2      	ldr	r2, [r4, #8]
  402b6a:	6823      	ldr	r3, [r4, #0]
  402b6c:	eba2 0208 	sub.w	r2, r2, r8
  402b70:	445b      	add	r3, fp
  402b72:	60a2      	str	r2, [r4, #8]
  402b74:	6023      	str	r3, [r4, #0]
  402b76:	9a01      	ldr	r2, [sp, #4]
  402b78:	6893      	ldr	r3, [r2, #8]
  402b7a:	eba3 030a 	sub.w	r3, r3, sl
  402b7e:	44d1      	add	r9, sl
  402b80:	eba7 070a 	sub.w	r7, r7, sl
  402b84:	6093      	str	r3, [r2, #8]
  402b86:	2b00      	cmp	r3, #0
  402b88:	d0c5      	beq.n	402b16 <__sfvwrite_r+0x5e>
  402b8a:	89a3      	ldrh	r3, [r4, #12]
  402b8c:	2f00      	cmp	r7, #0
  402b8e:	d1d8      	bne.n	402b42 <__sfvwrite_r+0x8a>
  402b90:	f8d5 9000 	ldr.w	r9, [r5]
  402b94:	686f      	ldr	r7, [r5, #4]
  402b96:	3508      	adds	r5, #8
  402b98:	e7d2      	b.n	402b40 <__sfvwrite_r+0x88>
  402b9a:	f8d5 9000 	ldr.w	r9, [r5]
  402b9e:	f8d5 8004 	ldr.w	r8, [r5, #4]
  402ba2:	3508      	adds	r5, #8
  402ba4:	e79f      	b.n	402ae6 <__sfvwrite_r+0x2e>
  402ba6:	2000      	movs	r0, #0
  402ba8:	4770      	bx	lr
  402baa:	4621      	mov	r1, r4
  402bac:	9800      	ldr	r0, [sp, #0]
  402bae:	f7ff fd1f 	bl	4025f0 <_fflush_r>
  402bb2:	b370      	cbz	r0, 402c12 <__sfvwrite_r+0x15a>
  402bb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402bbc:	f04f 30ff 	mov.w	r0, #4294967295
  402bc0:	81a3      	strh	r3, [r4, #12]
  402bc2:	b003      	add	sp, #12
  402bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402bc8:	4681      	mov	r9, r0
  402bca:	4633      	mov	r3, r6
  402bcc:	464e      	mov	r6, r9
  402bce:	46a8      	mov	r8, r5
  402bd0:	469a      	mov	sl, r3
  402bd2:	464d      	mov	r5, r9
  402bd4:	b34e      	cbz	r6, 402c2a <__sfvwrite_r+0x172>
  402bd6:	b380      	cbz	r0, 402c3a <__sfvwrite_r+0x182>
  402bd8:	6820      	ldr	r0, [r4, #0]
  402bda:	6923      	ldr	r3, [r4, #16]
  402bdc:	6962      	ldr	r2, [r4, #20]
  402bde:	45b1      	cmp	r9, r6
  402be0:	46cb      	mov	fp, r9
  402be2:	bf28      	it	cs
  402be4:	46b3      	movcs	fp, r6
  402be6:	4298      	cmp	r0, r3
  402be8:	465f      	mov	r7, fp
  402bea:	d904      	bls.n	402bf6 <__sfvwrite_r+0x13e>
  402bec:	68a3      	ldr	r3, [r4, #8]
  402bee:	4413      	add	r3, r2
  402bf0:	459b      	cmp	fp, r3
  402bf2:	f300 80a6 	bgt.w	402d42 <__sfvwrite_r+0x28a>
  402bf6:	4593      	cmp	fp, r2
  402bf8:	db4b      	blt.n	402c92 <__sfvwrite_r+0x1da>
  402bfa:	4613      	mov	r3, r2
  402bfc:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402bfe:	69e1      	ldr	r1, [r4, #28]
  402c00:	9800      	ldr	r0, [sp, #0]
  402c02:	462a      	mov	r2, r5
  402c04:	47b8      	blx	r7
  402c06:	1e07      	subs	r7, r0, #0
  402c08:	ddd4      	ble.n	402bb4 <__sfvwrite_r+0xfc>
  402c0a:	ebb9 0907 	subs.w	r9, r9, r7
  402c0e:	d0cc      	beq.n	402baa <__sfvwrite_r+0xf2>
  402c10:	2001      	movs	r0, #1
  402c12:	f8da 3008 	ldr.w	r3, [sl, #8]
  402c16:	1bdb      	subs	r3, r3, r7
  402c18:	443d      	add	r5, r7
  402c1a:	1bf6      	subs	r6, r6, r7
  402c1c:	f8ca 3008 	str.w	r3, [sl, #8]
  402c20:	2b00      	cmp	r3, #0
  402c22:	f43f af78 	beq.w	402b16 <__sfvwrite_r+0x5e>
  402c26:	2e00      	cmp	r6, #0
  402c28:	d1d5      	bne.n	402bd6 <__sfvwrite_r+0x11e>
  402c2a:	f108 0308 	add.w	r3, r8, #8
  402c2e:	e913 0060 	ldmdb	r3, {r5, r6}
  402c32:	4698      	mov	r8, r3
  402c34:	3308      	adds	r3, #8
  402c36:	2e00      	cmp	r6, #0
  402c38:	d0f9      	beq.n	402c2e <__sfvwrite_r+0x176>
  402c3a:	4632      	mov	r2, r6
  402c3c:	210a      	movs	r1, #10
  402c3e:	4628      	mov	r0, r5
  402c40:	f000 fc36 	bl	4034b0 <memchr>
  402c44:	2800      	cmp	r0, #0
  402c46:	f000 80a1 	beq.w	402d8c <__sfvwrite_r+0x2d4>
  402c4a:	3001      	adds	r0, #1
  402c4c:	eba0 0905 	sub.w	r9, r0, r5
  402c50:	e7c2      	b.n	402bd8 <__sfvwrite_r+0x120>
  402c52:	6820      	ldr	r0, [r4, #0]
  402c54:	6923      	ldr	r3, [r4, #16]
  402c56:	4298      	cmp	r0, r3
  402c58:	d802      	bhi.n	402c60 <__sfvwrite_r+0x1a8>
  402c5a:	6963      	ldr	r3, [r4, #20]
  402c5c:	429f      	cmp	r7, r3
  402c5e:	d25d      	bcs.n	402d1c <__sfvwrite_r+0x264>
  402c60:	45b8      	cmp	r8, r7
  402c62:	bf28      	it	cs
  402c64:	46b8      	movcs	r8, r7
  402c66:	4642      	mov	r2, r8
  402c68:	4649      	mov	r1, r9
  402c6a:	f000 fd0b 	bl	403684 <memmove>
  402c6e:	68a3      	ldr	r3, [r4, #8]
  402c70:	6822      	ldr	r2, [r4, #0]
  402c72:	eba3 0308 	sub.w	r3, r3, r8
  402c76:	4442      	add	r2, r8
  402c78:	60a3      	str	r3, [r4, #8]
  402c7a:	6022      	str	r2, [r4, #0]
  402c7c:	b10b      	cbz	r3, 402c82 <__sfvwrite_r+0x1ca>
  402c7e:	46c2      	mov	sl, r8
  402c80:	e779      	b.n	402b76 <__sfvwrite_r+0xbe>
  402c82:	4621      	mov	r1, r4
  402c84:	9800      	ldr	r0, [sp, #0]
  402c86:	f7ff fcb3 	bl	4025f0 <_fflush_r>
  402c8a:	2800      	cmp	r0, #0
  402c8c:	d192      	bne.n	402bb4 <__sfvwrite_r+0xfc>
  402c8e:	46c2      	mov	sl, r8
  402c90:	e771      	b.n	402b76 <__sfvwrite_r+0xbe>
  402c92:	465a      	mov	r2, fp
  402c94:	4629      	mov	r1, r5
  402c96:	f000 fcf5 	bl	403684 <memmove>
  402c9a:	68a2      	ldr	r2, [r4, #8]
  402c9c:	6823      	ldr	r3, [r4, #0]
  402c9e:	eba2 020b 	sub.w	r2, r2, fp
  402ca2:	445b      	add	r3, fp
  402ca4:	60a2      	str	r2, [r4, #8]
  402ca6:	6023      	str	r3, [r4, #0]
  402ca8:	e7af      	b.n	402c0a <__sfvwrite_r+0x152>
  402caa:	6820      	ldr	r0, [r4, #0]
  402cac:	46b8      	mov	r8, r7
  402cae:	46ba      	mov	sl, r7
  402cb0:	46bb      	mov	fp, r7
  402cb2:	e755      	b.n	402b60 <__sfvwrite_r+0xa8>
  402cb4:	6962      	ldr	r2, [r4, #20]
  402cb6:	6820      	ldr	r0, [r4, #0]
  402cb8:	6921      	ldr	r1, [r4, #16]
  402cba:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  402cbe:	eba0 0a01 	sub.w	sl, r0, r1
  402cc2:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  402cc6:	f10a 0001 	add.w	r0, sl, #1
  402cca:	ea4f 0868 	mov.w	r8, r8, asr #1
  402cce:	4438      	add	r0, r7
  402cd0:	4540      	cmp	r0, r8
  402cd2:	4642      	mov	r2, r8
  402cd4:	bf84      	itt	hi
  402cd6:	4680      	movhi	r8, r0
  402cd8:	4642      	movhi	r2, r8
  402cda:	055b      	lsls	r3, r3, #21
  402cdc:	d544      	bpl.n	402d68 <__sfvwrite_r+0x2b0>
  402cde:	4611      	mov	r1, r2
  402ce0:	9800      	ldr	r0, [sp, #0]
  402ce2:	f000 f919 	bl	402f18 <_malloc_r>
  402ce6:	4683      	mov	fp, r0
  402ce8:	2800      	cmp	r0, #0
  402cea:	d055      	beq.n	402d98 <__sfvwrite_r+0x2e0>
  402cec:	4652      	mov	r2, sl
  402cee:	6921      	ldr	r1, [r4, #16]
  402cf0:	f000 fc2e 	bl	403550 <memcpy>
  402cf4:	89a3      	ldrh	r3, [r4, #12]
  402cf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  402cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402cfe:	81a3      	strh	r3, [r4, #12]
  402d00:	eb0b 000a 	add.w	r0, fp, sl
  402d04:	eba8 030a 	sub.w	r3, r8, sl
  402d08:	f8c4 b010 	str.w	fp, [r4, #16]
  402d0c:	f8c4 8014 	str.w	r8, [r4, #20]
  402d10:	6020      	str	r0, [r4, #0]
  402d12:	60a3      	str	r3, [r4, #8]
  402d14:	46b8      	mov	r8, r7
  402d16:	46ba      	mov	sl, r7
  402d18:	46bb      	mov	fp, r7
  402d1a:	e721      	b.n	402b60 <__sfvwrite_r+0xa8>
  402d1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  402d20:	42b9      	cmp	r1, r7
  402d22:	bf28      	it	cs
  402d24:	4639      	movcs	r1, r7
  402d26:	464a      	mov	r2, r9
  402d28:	fb91 f1f3 	sdiv	r1, r1, r3
  402d2c:	9800      	ldr	r0, [sp, #0]
  402d2e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402d30:	fb03 f301 	mul.w	r3, r3, r1
  402d34:	69e1      	ldr	r1, [r4, #28]
  402d36:	47b0      	blx	r6
  402d38:	f1b0 0a00 	subs.w	sl, r0, #0
  402d3c:	f73f af1b 	bgt.w	402b76 <__sfvwrite_r+0xbe>
  402d40:	e738      	b.n	402bb4 <__sfvwrite_r+0xfc>
  402d42:	461a      	mov	r2, r3
  402d44:	4629      	mov	r1, r5
  402d46:	9301      	str	r3, [sp, #4]
  402d48:	f000 fc9c 	bl	403684 <memmove>
  402d4c:	6822      	ldr	r2, [r4, #0]
  402d4e:	9b01      	ldr	r3, [sp, #4]
  402d50:	9800      	ldr	r0, [sp, #0]
  402d52:	441a      	add	r2, r3
  402d54:	6022      	str	r2, [r4, #0]
  402d56:	4621      	mov	r1, r4
  402d58:	f7ff fc4a 	bl	4025f0 <_fflush_r>
  402d5c:	9b01      	ldr	r3, [sp, #4]
  402d5e:	2800      	cmp	r0, #0
  402d60:	f47f af28 	bne.w	402bb4 <__sfvwrite_r+0xfc>
  402d64:	461f      	mov	r7, r3
  402d66:	e750      	b.n	402c0a <__sfvwrite_r+0x152>
  402d68:	9800      	ldr	r0, [sp, #0]
  402d6a:	f000 fcfb 	bl	403764 <_realloc_r>
  402d6e:	4683      	mov	fp, r0
  402d70:	2800      	cmp	r0, #0
  402d72:	d1c5      	bne.n	402d00 <__sfvwrite_r+0x248>
  402d74:	9d00      	ldr	r5, [sp, #0]
  402d76:	6921      	ldr	r1, [r4, #16]
  402d78:	4628      	mov	r0, r5
  402d7a:	f7ff fdb7 	bl	4028ec <_free_r>
  402d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402d82:	220c      	movs	r2, #12
  402d84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402d88:	602a      	str	r2, [r5, #0]
  402d8a:	e715      	b.n	402bb8 <__sfvwrite_r+0x100>
  402d8c:	f106 0901 	add.w	r9, r6, #1
  402d90:	e722      	b.n	402bd8 <__sfvwrite_r+0x120>
  402d92:	f04f 30ff 	mov.w	r0, #4294967295
  402d96:	e6bf      	b.n	402b18 <__sfvwrite_r+0x60>
  402d98:	9a00      	ldr	r2, [sp, #0]
  402d9a:	230c      	movs	r3, #12
  402d9c:	6013      	str	r3, [r2, #0]
  402d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402da2:	e709      	b.n	402bb8 <__sfvwrite_r+0x100>
  402da4:	7ffffc00 	.word	0x7ffffc00

00402da8 <_fwalk_reent>:
  402da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402dac:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  402db0:	d01f      	beq.n	402df2 <_fwalk_reent+0x4a>
  402db2:	4688      	mov	r8, r1
  402db4:	4606      	mov	r6, r0
  402db6:	f04f 0900 	mov.w	r9, #0
  402dba:	687d      	ldr	r5, [r7, #4]
  402dbc:	68bc      	ldr	r4, [r7, #8]
  402dbe:	3d01      	subs	r5, #1
  402dc0:	d411      	bmi.n	402de6 <_fwalk_reent+0x3e>
  402dc2:	89a3      	ldrh	r3, [r4, #12]
  402dc4:	2b01      	cmp	r3, #1
  402dc6:	f105 35ff 	add.w	r5, r5, #4294967295
  402dca:	d908      	bls.n	402dde <_fwalk_reent+0x36>
  402dcc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  402dd0:	3301      	adds	r3, #1
  402dd2:	4621      	mov	r1, r4
  402dd4:	4630      	mov	r0, r6
  402dd6:	d002      	beq.n	402dde <_fwalk_reent+0x36>
  402dd8:	47c0      	blx	r8
  402dda:	ea49 0900 	orr.w	r9, r9, r0
  402dde:	1c6b      	adds	r3, r5, #1
  402de0:	f104 0468 	add.w	r4, r4, #104	; 0x68
  402de4:	d1ed      	bne.n	402dc2 <_fwalk_reent+0x1a>
  402de6:	683f      	ldr	r7, [r7, #0]
  402de8:	2f00      	cmp	r7, #0
  402dea:	d1e6      	bne.n	402dba <_fwalk_reent+0x12>
  402dec:	4648      	mov	r0, r9
  402dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402df2:	46b9      	mov	r9, r7
  402df4:	4648      	mov	r0, r9
  402df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402dfa:	bf00      	nop

00402dfc <__locale_mb_cur_max>:
  402dfc:	4b04      	ldr	r3, [pc, #16]	; (402e10 <__locale_mb_cur_max+0x14>)
  402dfe:	4a05      	ldr	r2, [pc, #20]	; (402e14 <__locale_mb_cur_max+0x18>)
  402e00:	681b      	ldr	r3, [r3, #0]
  402e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  402e04:	2b00      	cmp	r3, #0
  402e06:	bf08      	it	eq
  402e08:	4613      	moveq	r3, r2
  402e0a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  402e0e:	4770      	bx	lr
  402e10:	20400010 	.word	0x20400010
  402e14:	20400444 	.word	0x20400444

00402e18 <__retarget_lock_init_recursive>:
  402e18:	4770      	bx	lr
  402e1a:	bf00      	nop

00402e1c <__retarget_lock_close_recursive>:
  402e1c:	4770      	bx	lr
  402e1e:	bf00      	nop

00402e20 <__retarget_lock_acquire_recursive>:
  402e20:	4770      	bx	lr
  402e22:	bf00      	nop

00402e24 <__retarget_lock_release_recursive>:
  402e24:	4770      	bx	lr
  402e26:	bf00      	nop

00402e28 <__swhatbuf_r>:
  402e28:	b570      	push	{r4, r5, r6, lr}
  402e2a:	460c      	mov	r4, r1
  402e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402e30:	2900      	cmp	r1, #0
  402e32:	b090      	sub	sp, #64	; 0x40
  402e34:	4615      	mov	r5, r2
  402e36:	461e      	mov	r6, r3
  402e38:	db14      	blt.n	402e64 <__swhatbuf_r+0x3c>
  402e3a:	aa01      	add	r2, sp, #4
  402e3c:	f001 f88a 	bl	403f54 <_fstat_r>
  402e40:	2800      	cmp	r0, #0
  402e42:	db0f      	blt.n	402e64 <__swhatbuf_r+0x3c>
  402e44:	9a02      	ldr	r2, [sp, #8]
  402e46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  402e4a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  402e4e:	fab2 f282 	clz	r2, r2
  402e52:	0952      	lsrs	r2, r2, #5
  402e54:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402e58:	f44f 6000 	mov.w	r0, #2048	; 0x800
  402e5c:	6032      	str	r2, [r6, #0]
  402e5e:	602b      	str	r3, [r5, #0]
  402e60:	b010      	add	sp, #64	; 0x40
  402e62:	bd70      	pop	{r4, r5, r6, pc}
  402e64:	89a2      	ldrh	r2, [r4, #12]
  402e66:	2300      	movs	r3, #0
  402e68:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  402e6c:	6033      	str	r3, [r6, #0]
  402e6e:	d004      	beq.n	402e7a <__swhatbuf_r+0x52>
  402e70:	2240      	movs	r2, #64	; 0x40
  402e72:	4618      	mov	r0, r3
  402e74:	602a      	str	r2, [r5, #0]
  402e76:	b010      	add	sp, #64	; 0x40
  402e78:	bd70      	pop	{r4, r5, r6, pc}
  402e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402e7e:	602b      	str	r3, [r5, #0]
  402e80:	b010      	add	sp, #64	; 0x40
  402e82:	bd70      	pop	{r4, r5, r6, pc}

00402e84 <__smakebuf_r>:
  402e84:	898a      	ldrh	r2, [r1, #12]
  402e86:	0792      	lsls	r2, r2, #30
  402e88:	460b      	mov	r3, r1
  402e8a:	d506      	bpl.n	402e9a <__smakebuf_r+0x16>
  402e8c:	f101 0243 	add.w	r2, r1, #67	; 0x43
  402e90:	2101      	movs	r1, #1
  402e92:	601a      	str	r2, [r3, #0]
  402e94:	611a      	str	r2, [r3, #16]
  402e96:	6159      	str	r1, [r3, #20]
  402e98:	4770      	bx	lr
  402e9a:	b5f0      	push	{r4, r5, r6, r7, lr}
  402e9c:	b083      	sub	sp, #12
  402e9e:	ab01      	add	r3, sp, #4
  402ea0:	466a      	mov	r2, sp
  402ea2:	460c      	mov	r4, r1
  402ea4:	4606      	mov	r6, r0
  402ea6:	f7ff ffbf 	bl	402e28 <__swhatbuf_r>
  402eaa:	9900      	ldr	r1, [sp, #0]
  402eac:	4605      	mov	r5, r0
  402eae:	4630      	mov	r0, r6
  402eb0:	f000 f832 	bl	402f18 <_malloc_r>
  402eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402eb8:	b1d8      	cbz	r0, 402ef2 <__smakebuf_r+0x6e>
  402eba:	9a01      	ldr	r2, [sp, #4]
  402ebc:	4f15      	ldr	r7, [pc, #84]	; (402f14 <__smakebuf_r+0x90>)
  402ebe:	9900      	ldr	r1, [sp, #0]
  402ec0:	63f7      	str	r7, [r6, #60]	; 0x3c
  402ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402ec6:	81a3      	strh	r3, [r4, #12]
  402ec8:	6020      	str	r0, [r4, #0]
  402eca:	6120      	str	r0, [r4, #16]
  402ecc:	6161      	str	r1, [r4, #20]
  402ece:	b91a      	cbnz	r2, 402ed8 <__smakebuf_r+0x54>
  402ed0:	432b      	orrs	r3, r5
  402ed2:	81a3      	strh	r3, [r4, #12]
  402ed4:	b003      	add	sp, #12
  402ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402ed8:	4630      	mov	r0, r6
  402eda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402ede:	f001 f84d 	bl	403f7c <_isatty_r>
  402ee2:	b1a0      	cbz	r0, 402f0e <__smakebuf_r+0x8a>
  402ee4:	89a3      	ldrh	r3, [r4, #12]
  402ee6:	f023 0303 	bic.w	r3, r3, #3
  402eea:	f043 0301 	orr.w	r3, r3, #1
  402eee:	b21b      	sxth	r3, r3
  402ef0:	e7ee      	b.n	402ed0 <__smakebuf_r+0x4c>
  402ef2:	059a      	lsls	r2, r3, #22
  402ef4:	d4ee      	bmi.n	402ed4 <__smakebuf_r+0x50>
  402ef6:	f023 0303 	bic.w	r3, r3, #3
  402efa:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402efe:	f043 0302 	orr.w	r3, r3, #2
  402f02:	2101      	movs	r1, #1
  402f04:	81a3      	strh	r3, [r4, #12]
  402f06:	6022      	str	r2, [r4, #0]
  402f08:	6122      	str	r2, [r4, #16]
  402f0a:	6161      	str	r1, [r4, #20]
  402f0c:	e7e2      	b.n	402ed4 <__smakebuf_r+0x50>
  402f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402f12:	e7dd      	b.n	402ed0 <__smakebuf_r+0x4c>
  402f14:	00402645 	.word	0x00402645

00402f18 <_malloc_r>:
  402f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402f1c:	f101 060b 	add.w	r6, r1, #11
  402f20:	2e16      	cmp	r6, #22
  402f22:	b083      	sub	sp, #12
  402f24:	4605      	mov	r5, r0
  402f26:	f240 809e 	bls.w	403066 <_malloc_r+0x14e>
  402f2a:	f036 0607 	bics.w	r6, r6, #7
  402f2e:	f100 80bd 	bmi.w	4030ac <_malloc_r+0x194>
  402f32:	42b1      	cmp	r1, r6
  402f34:	f200 80ba 	bhi.w	4030ac <_malloc_r+0x194>
  402f38:	f000 fc08 	bl	40374c <__malloc_lock>
  402f3c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  402f40:	f0c0 8293 	bcc.w	40346a <_malloc_r+0x552>
  402f44:	0a73      	lsrs	r3, r6, #9
  402f46:	f000 80b8 	beq.w	4030ba <_malloc_r+0x1a2>
  402f4a:	2b04      	cmp	r3, #4
  402f4c:	f200 8179 	bhi.w	403242 <_malloc_r+0x32a>
  402f50:	09b3      	lsrs	r3, r6, #6
  402f52:	f103 0039 	add.w	r0, r3, #57	; 0x39
  402f56:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  402f5a:	00c3      	lsls	r3, r0, #3
  402f5c:	4fbf      	ldr	r7, [pc, #764]	; (40325c <_malloc_r+0x344>)
  402f5e:	443b      	add	r3, r7
  402f60:	f1a3 0108 	sub.w	r1, r3, #8
  402f64:	685c      	ldr	r4, [r3, #4]
  402f66:	42a1      	cmp	r1, r4
  402f68:	d106      	bne.n	402f78 <_malloc_r+0x60>
  402f6a:	e00c      	b.n	402f86 <_malloc_r+0x6e>
  402f6c:	2a00      	cmp	r2, #0
  402f6e:	f280 80aa 	bge.w	4030c6 <_malloc_r+0x1ae>
  402f72:	68e4      	ldr	r4, [r4, #12]
  402f74:	42a1      	cmp	r1, r4
  402f76:	d006      	beq.n	402f86 <_malloc_r+0x6e>
  402f78:	6863      	ldr	r3, [r4, #4]
  402f7a:	f023 0303 	bic.w	r3, r3, #3
  402f7e:	1b9a      	subs	r2, r3, r6
  402f80:	2a0f      	cmp	r2, #15
  402f82:	ddf3      	ble.n	402f6c <_malloc_r+0x54>
  402f84:	4670      	mov	r0, lr
  402f86:	693c      	ldr	r4, [r7, #16]
  402f88:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403270 <_malloc_r+0x358>
  402f8c:	4574      	cmp	r4, lr
  402f8e:	f000 81ab 	beq.w	4032e8 <_malloc_r+0x3d0>
  402f92:	6863      	ldr	r3, [r4, #4]
  402f94:	f023 0303 	bic.w	r3, r3, #3
  402f98:	1b9a      	subs	r2, r3, r6
  402f9a:	2a0f      	cmp	r2, #15
  402f9c:	f300 8190 	bgt.w	4032c0 <_malloc_r+0x3a8>
  402fa0:	2a00      	cmp	r2, #0
  402fa2:	f8c7 e014 	str.w	lr, [r7, #20]
  402fa6:	f8c7 e010 	str.w	lr, [r7, #16]
  402faa:	f280 809d 	bge.w	4030e8 <_malloc_r+0x1d0>
  402fae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402fb2:	f080 8161 	bcs.w	403278 <_malloc_r+0x360>
  402fb6:	08db      	lsrs	r3, r3, #3
  402fb8:	f103 0c01 	add.w	ip, r3, #1
  402fbc:	1099      	asrs	r1, r3, #2
  402fbe:	687a      	ldr	r2, [r7, #4]
  402fc0:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  402fc4:	f8c4 8008 	str.w	r8, [r4, #8]
  402fc8:	2301      	movs	r3, #1
  402fca:	408b      	lsls	r3, r1
  402fcc:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  402fd0:	4313      	orrs	r3, r2
  402fd2:	3908      	subs	r1, #8
  402fd4:	60e1      	str	r1, [r4, #12]
  402fd6:	607b      	str	r3, [r7, #4]
  402fd8:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  402fdc:	f8c8 400c 	str.w	r4, [r8, #12]
  402fe0:	1082      	asrs	r2, r0, #2
  402fe2:	2401      	movs	r4, #1
  402fe4:	4094      	lsls	r4, r2
  402fe6:	429c      	cmp	r4, r3
  402fe8:	f200 808b 	bhi.w	403102 <_malloc_r+0x1ea>
  402fec:	421c      	tst	r4, r3
  402fee:	d106      	bne.n	402ffe <_malloc_r+0xe6>
  402ff0:	f020 0003 	bic.w	r0, r0, #3
  402ff4:	0064      	lsls	r4, r4, #1
  402ff6:	421c      	tst	r4, r3
  402ff8:	f100 0004 	add.w	r0, r0, #4
  402ffc:	d0fa      	beq.n	402ff4 <_malloc_r+0xdc>
  402ffe:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403002:	46cc      	mov	ip, r9
  403004:	4680      	mov	r8, r0
  403006:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40300a:	459c      	cmp	ip, r3
  40300c:	d107      	bne.n	40301e <_malloc_r+0x106>
  40300e:	e16d      	b.n	4032ec <_malloc_r+0x3d4>
  403010:	2a00      	cmp	r2, #0
  403012:	f280 817b 	bge.w	40330c <_malloc_r+0x3f4>
  403016:	68db      	ldr	r3, [r3, #12]
  403018:	459c      	cmp	ip, r3
  40301a:	f000 8167 	beq.w	4032ec <_malloc_r+0x3d4>
  40301e:	6859      	ldr	r1, [r3, #4]
  403020:	f021 0103 	bic.w	r1, r1, #3
  403024:	1b8a      	subs	r2, r1, r6
  403026:	2a0f      	cmp	r2, #15
  403028:	ddf2      	ble.n	403010 <_malloc_r+0xf8>
  40302a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40302e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403032:	9300      	str	r3, [sp, #0]
  403034:	199c      	adds	r4, r3, r6
  403036:	4628      	mov	r0, r5
  403038:	f046 0601 	orr.w	r6, r6, #1
  40303c:	f042 0501 	orr.w	r5, r2, #1
  403040:	605e      	str	r6, [r3, #4]
  403042:	f8c8 c00c 	str.w	ip, [r8, #12]
  403046:	f8cc 8008 	str.w	r8, [ip, #8]
  40304a:	617c      	str	r4, [r7, #20]
  40304c:	613c      	str	r4, [r7, #16]
  40304e:	f8c4 e00c 	str.w	lr, [r4, #12]
  403052:	f8c4 e008 	str.w	lr, [r4, #8]
  403056:	6065      	str	r5, [r4, #4]
  403058:	505a      	str	r2, [r3, r1]
  40305a:	f000 fb7d 	bl	403758 <__malloc_unlock>
  40305e:	9b00      	ldr	r3, [sp, #0]
  403060:	f103 0408 	add.w	r4, r3, #8
  403064:	e01e      	b.n	4030a4 <_malloc_r+0x18c>
  403066:	2910      	cmp	r1, #16
  403068:	d820      	bhi.n	4030ac <_malloc_r+0x194>
  40306a:	f000 fb6f 	bl	40374c <__malloc_lock>
  40306e:	2610      	movs	r6, #16
  403070:	2318      	movs	r3, #24
  403072:	2002      	movs	r0, #2
  403074:	4f79      	ldr	r7, [pc, #484]	; (40325c <_malloc_r+0x344>)
  403076:	443b      	add	r3, r7
  403078:	f1a3 0208 	sub.w	r2, r3, #8
  40307c:	685c      	ldr	r4, [r3, #4]
  40307e:	4294      	cmp	r4, r2
  403080:	f000 813d 	beq.w	4032fe <_malloc_r+0x3e6>
  403084:	6863      	ldr	r3, [r4, #4]
  403086:	68e1      	ldr	r1, [r4, #12]
  403088:	68a6      	ldr	r6, [r4, #8]
  40308a:	f023 0303 	bic.w	r3, r3, #3
  40308e:	4423      	add	r3, r4
  403090:	4628      	mov	r0, r5
  403092:	685a      	ldr	r2, [r3, #4]
  403094:	60f1      	str	r1, [r6, #12]
  403096:	f042 0201 	orr.w	r2, r2, #1
  40309a:	608e      	str	r6, [r1, #8]
  40309c:	605a      	str	r2, [r3, #4]
  40309e:	f000 fb5b 	bl	403758 <__malloc_unlock>
  4030a2:	3408      	adds	r4, #8
  4030a4:	4620      	mov	r0, r4
  4030a6:	b003      	add	sp, #12
  4030a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4030ac:	2400      	movs	r4, #0
  4030ae:	230c      	movs	r3, #12
  4030b0:	4620      	mov	r0, r4
  4030b2:	602b      	str	r3, [r5, #0]
  4030b4:	b003      	add	sp, #12
  4030b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4030ba:	2040      	movs	r0, #64	; 0x40
  4030bc:	f44f 7300 	mov.w	r3, #512	; 0x200
  4030c0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4030c4:	e74a      	b.n	402f5c <_malloc_r+0x44>
  4030c6:	4423      	add	r3, r4
  4030c8:	68e1      	ldr	r1, [r4, #12]
  4030ca:	685a      	ldr	r2, [r3, #4]
  4030cc:	68a6      	ldr	r6, [r4, #8]
  4030ce:	f042 0201 	orr.w	r2, r2, #1
  4030d2:	60f1      	str	r1, [r6, #12]
  4030d4:	4628      	mov	r0, r5
  4030d6:	608e      	str	r6, [r1, #8]
  4030d8:	605a      	str	r2, [r3, #4]
  4030da:	f000 fb3d 	bl	403758 <__malloc_unlock>
  4030de:	3408      	adds	r4, #8
  4030e0:	4620      	mov	r0, r4
  4030e2:	b003      	add	sp, #12
  4030e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4030e8:	4423      	add	r3, r4
  4030ea:	4628      	mov	r0, r5
  4030ec:	685a      	ldr	r2, [r3, #4]
  4030ee:	f042 0201 	orr.w	r2, r2, #1
  4030f2:	605a      	str	r2, [r3, #4]
  4030f4:	f000 fb30 	bl	403758 <__malloc_unlock>
  4030f8:	3408      	adds	r4, #8
  4030fa:	4620      	mov	r0, r4
  4030fc:	b003      	add	sp, #12
  4030fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403102:	68bc      	ldr	r4, [r7, #8]
  403104:	6863      	ldr	r3, [r4, #4]
  403106:	f023 0803 	bic.w	r8, r3, #3
  40310a:	45b0      	cmp	r8, r6
  40310c:	d304      	bcc.n	403118 <_malloc_r+0x200>
  40310e:	eba8 0306 	sub.w	r3, r8, r6
  403112:	2b0f      	cmp	r3, #15
  403114:	f300 8085 	bgt.w	403222 <_malloc_r+0x30a>
  403118:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403274 <_malloc_r+0x35c>
  40311c:	4b50      	ldr	r3, [pc, #320]	; (403260 <_malloc_r+0x348>)
  40311e:	f8d9 2000 	ldr.w	r2, [r9]
  403122:	681b      	ldr	r3, [r3, #0]
  403124:	3201      	adds	r2, #1
  403126:	4433      	add	r3, r6
  403128:	eb04 0a08 	add.w	sl, r4, r8
  40312c:	f000 8155 	beq.w	4033da <_malloc_r+0x4c2>
  403130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403134:	330f      	adds	r3, #15
  403136:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40313a:	f02b 0b0f 	bic.w	fp, fp, #15
  40313e:	4659      	mov	r1, fp
  403140:	4628      	mov	r0, r5
  403142:	f000 fcb5 	bl	403ab0 <_sbrk_r>
  403146:	1c41      	adds	r1, r0, #1
  403148:	4602      	mov	r2, r0
  40314a:	f000 80fc 	beq.w	403346 <_malloc_r+0x42e>
  40314e:	4582      	cmp	sl, r0
  403150:	f200 80f7 	bhi.w	403342 <_malloc_r+0x42a>
  403154:	4b43      	ldr	r3, [pc, #268]	; (403264 <_malloc_r+0x34c>)
  403156:	6819      	ldr	r1, [r3, #0]
  403158:	4459      	add	r1, fp
  40315a:	6019      	str	r1, [r3, #0]
  40315c:	f000 814d 	beq.w	4033fa <_malloc_r+0x4e2>
  403160:	f8d9 0000 	ldr.w	r0, [r9]
  403164:	3001      	adds	r0, #1
  403166:	bf1b      	ittet	ne
  403168:	eba2 0a0a 	subne.w	sl, r2, sl
  40316c:	4451      	addne	r1, sl
  40316e:	f8c9 2000 	streq.w	r2, [r9]
  403172:	6019      	strne	r1, [r3, #0]
  403174:	f012 0107 	ands.w	r1, r2, #7
  403178:	f000 8115 	beq.w	4033a6 <_malloc_r+0x48e>
  40317c:	f1c1 0008 	rsb	r0, r1, #8
  403180:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403184:	4402      	add	r2, r0
  403186:	3108      	adds	r1, #8
  403188:	eb02 090b 	add.w	r9, r2, fp
  40318c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403190:	eba1 0909 	sub.w	r9, r1, r9
  403194:	4649      	mov	r1, r9
  403196:	4628      	mov	r0, r5
  403198:	9301      	str	r3, [sp, #4]
  40319a:	9200      	str	r2, [sp, #0]
  40319c:	f000 fc88 	bl	403ab0 <_sbrk_r>
  4031a0:	1c43      	adds	r3, r0, #1
  4031a2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4031a6:	f000 8143 	beq.w	403430 <_malloc_r+0x518>
  4031aa:	1a80      	subs	r0, r0, r2
  4031ac:	4448      	add	r0, r9
  4031ae:	f040 0001 	orr.w	r0, r0, #1
  4031b2:	6819      	ldr	r1, [r3, #0]
  4031b4:	60ba      	str	r2, [r7, #8]
  4031b6:	4449      	add	r1, r9
  4031b8:	42bc      	cmp	r4, r7
  4031ba:	6050      	str	r0, [r2, #4]
  4031bc:	6019      	str	r1, [r3, #0]
  4031be:	d017      	beq.n	4031f0 <_malloc_r+0x2d8>
  4031c0:	f1b8 0f0f 	cmp.w	r8, #15
  4031c4:	f240 80fb 	bls.w	4033be <_malloc_r+0x4a6>
  4031c8:	6860      	ldr	r0, [r4, #4]
  4031ca:	f1a8 020c 	sub.w	r2, r8, #12
  4031ce:	f022 0207 	bic.w	r2, r2, #7
  4031d2:	eb04 0e02 	add.w	lr, r4, r2
  4031d6:	f000 0001 	and.w	r0, r0, #1
  4031da:	f04f 0c05 	mov.w	ip, #5
  4031de:	4310      	orrs	r0, r2
  4031e0:	2a0f      	cmp	r2, #15
  4031e2:	6060      	str	r0, [r4, #4]
  4031e4:	f8ce c004 	str.w	ip, [lr, #4]
  4031e8:	f8ce c008 	str.w	ip, [lr, #8]
  4031ec:	f200 8117 	bhi.w	40341e <_malloc_r+0x506>
  4031f0:	4b1d      	ldr	r3, [pc, #116]	; (403268 <_malloc_r+0x350>)
  4031f2:	68bc      	ldr	r4, [r7, #8]
  4031f4:	681a      	ldr	r2, [r3, #0]
  4031f6:	4291      	cmp	r1, r2
  4031f8:	bf88      	it	hi
  4031fa:	6019      	strhi	r1, [r3, #0]
  4031fc:	4b1b      	ldr	r3, [pc, #108]	; (40326c <_malloc_r+0x354>)
  4031fe:	681a      	ldr	r2, [r3, #0]
  403200:	4291      	cmp	r1, r2
  403202:	6862      	ldr	r2, [r4, #4]
  403204:	bf88      	it	hi
  403206:	6019      	strhi	r1, [r3, #0]
  403208:	f022 0203 	bic.w	r2, r2, #3
  40320c:	4296      	cmp	r6, r2
  40320e:	eba2 0306 	sub.w	r3, r2, r6
  403212:	d801      	bhi.n	403218 <_malloc_r+0x300>
  403214:	2b0f      	cmp	r3, #15
  403216:	dc04      	bgt.n	403222 <_malloc_r+0x30a>
  403218:	4628      	mov	r0, r5
  40321a:	f000 fa9d 	bl	403758 <__malloc_unlock>
  40321e:	2400      	movs	r4, #0
  403220:	e740      	b.n	4030a4 <_malloc_r+0x18c>
  403222:	19a2      	adds	r2, r4, r6
  403224:	f043 0301 	orr.w	r3, r3, #1
  403228:	f046 0601 	orr.w	r6, r6, #1
  40322c:	6066      	str	r6, [r4, #4]
  40322e:	4628      	mov	r0, r5
  403230:	60ba      	str	r2, [r7, #8]
  403232:	6053      	str	r3, [r2, #4]
  403234:	f000 fa90 	bl	403758 <__malloc_unlock>
  403238:	3408      	adds	r4, #8
  40323a:	4620      	mov	r0, r4
  40323c:	b003      	add	sp, #12
  40323e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403242:	2b14      	cmp	r3, #20
  403244:	d971      	bls.n	40332a <_malloc_r+0x412>
  403246:	2b54      	cmp	r3, #84	; 0x54
  403248:	f200 80a3 	bhi.w	403392 <_malloc_r+0x47a>
  40324c:	0b33      	lsrs	r3, r6, #12
  40324e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403252:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403256:	00c3      	lsls	r3, r0, #3
  403258:	e680      	b.n	402f5c <_malloc_r+0x44>
  40325a:	bf00      	nop
  40325c:	204005b0 	.word	0x204005b0
  403260:	20400ac4 	.word	0x20400ac4
  403264:	20400a94 	.word	0x20400a94
  403268:	20400abc 	.word	0x20400abc
  40326c:	20400ac0 	.word	0x20400ac0
  403270:	204005b8 	.word	0x204005b8
  403274:	204009b8 	.word	0x204009b8
  403278:	0a5a      	lsrs	r2, r3, #9
  40327a:	2a04      	cmp	r2, #4
  40327c:	d95b      	bls.n	403336 <_malloc_r+0x41e>
  40327e:	2a14      	cmp	r2, #20
  403280:	f200 80ae 	bhi.w	4033e0 <_malloc_r+0x4c8>
  403284:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403288:	00c9      	lsls	r1, r1, #3
  40328a:	325b      	adds	r2, #91	; 0x5b
  40328c:	eb07 0c01 	add.w	ip, r7, r1
  403290:	5879      	ldr	r1, [r7, r1]
  403292:	f1ac 0c08 	sub.w	ip, ip, #8
  403296:	458c      	cmp	ip, r1
  403298:	f000 8088 	beq.w	4033ac <_malloc_r+0x494>
  40329c:	684a      	ldr	r2, [r1, #4]
  40329e:	f022 0203 	bic.w	r2, r2, #3
  4032a2:	4293      	cmp	r3, r2
  4032a4:	d273      	bcs.n	40338e <_malloc_r+0x476>
  4032a6:	6889      	ldr	r1, [r1, #8]
  4032a8:	458c      	cmp	ip, r1
  4032aa:	d1f7      	bne.n	40329c <_malloc_r+0x384>
  4032ac:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4032b0:	687b      	ldr	r3, [r7, #4]
  4032b2:	60e2      	str	r2, [r4, #12]
  4032b4:	f8c4 c008 	str.w	ip, [r4, #8]
  4032b8:	6094      	str	r4, [r2, #8]
  4032ba:	f8cc 400c 	str.w	r4, [ip, #12]
  4032be:	e68f      	b.n	402fe0 <_malloc_r+0xc8>
  4032c0:	19a1      	adds	r1, r4, r6
  4032c2:	f046 0c01 	orr.w	ip, r6, #1
  4032c6:	f042 0601 	orr.w	r6, r2, #1
  4032ca:	f8c4 c004 	str.w	ip, [r4, #4]
  4032ce:	4628      	mov	r0, r5
  4032d0:	6179      	str	r1, [r7, #20]
  4032d2:	6139      	str	r1, [r7, #16]
  4032d4:	f8c1 e00c 	str.w	lr, [r1, #12]
  4032d8:	f8c1 e008 	str.w	lr, [r1, #8]
  4032dc:	604e      	str	r6, [r1, #4]
  4032de:	50e2      	str	r2, [r4, r3]
  4032e0:	f000 fa3a 	bl	403758 <__malloc_unlock>
  4032e4:	3408      	adds	r4, #8
  4032e6:	e6dd      	b.n	4030a4 <_malloc_r+0x18c>
  4032e8:	687b      	ldr	r3, [r7, #4]
  4032ea:	e679      	b.n	402fe0 <_malloc_r+0xc8>
  4032ec:	f108 0801 	add.w	r8, r8, #1
  4032f0:	f018 0f03 	tst.w	r8, #3
  4032f4:	f10c 0c08 	add.w	ip, ip, #8
  4032f8:	f47f ae85 	bne.w	403006 <_malloc_r+0xee>
  4032fc:	e02d      	b.n	40335a <_malloc_r+0x442>
  4032fe:	68dc      	ldr	r4, [r3, #12]
  403300:	42a3      	cmp	r3, r4
  403302:	bf08      	it	eq
  403304:	3002      	addeq	r0, #2
  403306:	f43f ae3e 	beq.w	402f86 <_malloc_r+0x6e>
  40330a:	e6bb      	b.n	403084 <_malloc_r+0x16c>
  40330c:	4419      	add	r1, r3
  40330e:	461c      	mov	r4, r3
  403310:	684a      	ldr	r2, [r1, #4]
  403312:	68db      	ldr	r3, [r3, #12]
  403314:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403318:	f042 0201 	orr.w	r2, r2, #1
  40331c:	604a      	str	r2, [r1, #4]
  40331e:	4628      	mov	r0, r5
  403320:	60f3      	str	r3, [r6, #12]
  403322:	609e      	str	r6, [r3, #8]
  403324:	f000 fa18 	bl	403758 <__malloc_unlock>
  403328:	e6bc      	b.n	4030a4 <_malloc_r+0x18c>
  40332a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40332e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403332:	00c3      	lsls	r3, r0, #3
  403334:	e612      	b.n	402f5c <_malloc_r+0x44>
  403336:	099a      	lsrs	r2, r3, #6
  403338:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40333c:	00c9      	lsls	r1, r1, #3
  40333e:	3238      	adds	r2, #56	; 0x38
  403340:	e7a4      	b.n	40328c <_malloc_r+0x374>
  403342:	42bc      	cmp	r4, r7
  403344:	d054      	beq.n	4033f0 <_malloc_r+0x4d8>
  403346:	68bc      	ldr	r4, [r7, #8]
  403348:	6862      	ldr	r2, [r4, #4]
  40334a:	f022 0203 	bic.w	r2, r2, #3
  40334e:	e75d      	b.n	40320c <_malloc_r+0x2f4>
  403350:	f859 3908 	ldr.w	r3, [r9], #-8
  403354:	4599      	cmp	r9, r3
  403356:	f040 8086 	bne.w	403466 <_malloc_r+0x54e>
  40335a:	f010 0f03 	tst.w	r0, #3
  40335e:	f100 30ff 	add.w	r0, r0, #4294967295
  403362:	d1f5      	bne.n	403350 <_malloc_r+0x438>
  403364:	687b      	ldr	r3, [r7, #4]
  403366:	ea23 0304 	bic.w	r3, r3, r4
  40336a:	607b      	str	r3, [r7, #4]
  40336c:	0064      	lsls	r4, r4, #1
  40336e:	429c      	cmp	r4, r3
  403370:	f63f aec7 	bhi.w	403102 <_malloc_r+0x1ea>
  403374:	2c00      	cmp	r4, #0
  403376:	f43f aec4 	beq.w	403102 <_malloc_r+0x1ea>
  40337a:	421c      	tst	r4, r3
  40337c:	4640      	mov	r0, r8
  40337e:	f47f ae3e 	bne.w	402ffe <_malloc_r+0xe6>
  403382:	0064      	lsls	r4, r4, #1
  403384:	421c      	tst	r4, r3
  403386:	f100 0004 	add.w	r0, r0, #4
  40338a:	d0fa      	beq.n	403382 <_malloc_r+0x46a>
  40338c:	e637      	b.n	402ffe <_malloc_r+0xe6>
  40338e:	468c      	mov	ip, r1
  403390:	e78c      	b.n	4032ac <_malloc_r+0x394>
  403392:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403396:	d815      	bhi.n	4033c4 <_malloc_r+0x4ac>
  403398:	0bf3      	lsrs	r3, r6, #15
  40339a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40339e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4033a2:	00c3      	lsls	r3, r0, #3
  4033a4:	e5da      	b.n	402f5c <_malloc_r+0x44>
  4033a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4033aa:	e6ed      	b.n	403188 <_malloc_r+0x270>
  4033ac:	687b      	ldr	r3, [r7, #4]
  4033ae:	1092      	asrs	r2, r2, #2
  4033b0:	2101      	movs	r1, #1
  4033b2:	fa01 f202 	lsl.w	r2, r1, r2
  4033b6:	4313      	orrs	r3, r2
  4033b8:	607b      	str	r3, [r7, #4]
  4033ba:	4662      	mov	r2, ip
  4033bc:	e779      	b.n	4032b2 <_malloc_r+0x39a>
  4033be:	2301      	movs	r3, #1
  4033c0:	6053      	str	r3, [r2, #4]
  4033c2:	e729      	b.n	403218 <_malloc_r+0x300>
  4033c4:	f240 5254 	movw	r2, #1364	; 0x554
  4033c8:	4293      	cmp	r3, r2
  4033ca:	d822      	bhi.n	403412 <_malloc_r+0x4fa>
  4033cc:	0cb3      	lsrs	r3, r6, #18
  4033ce:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4033d2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4033d6:	00c3      	lsls	r3, r0, #3
  4033d8:	e5c0      	b.n	402f5c <_malloc_r+0x44>
  4033da:	f103 0b10 	add.w	fp, r3, #16
  4033de:	e6ae      	b.n	40313e <_malloc_r+0x226>
  4033e0:	2a54      	cmp	r2, #84	; 0x54
  4033e2:	d829      	bhi.n	403438 <_malloc_r+0x520>
  4033e4:	0b1a      	lsrs	r2, r3, #12
  4033e6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4033ea:	00c9      	lsls	r1, r1, #3
  4033ec:	326e      	adds	r2, #110	; 0x6e
  4033ee:	e74d      	b.n	40328c <_malloc_r+0x374>
  4033f0:	4b20      	ldr	r3, [pc, #128]	; (403474 <_malloc_r+0x55c>)
  4033f2:	6819      	ldr	r1, [r3, #0]
  4033f4:	4459      	add	r1, fp
  4033f6:	6019      	str	r1, [r3, #0]
  4033f8:	e6b2      	b.n	403160 <_malloc_r+0x248>
  4033fa:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4033fe:	2800      	cmp	r0, #0
  403400:	f47f aeae 	bne.w	403160 <_malloc_r+0x248>
  403404:	eb08 030b 	add.w	r3, r8, fp
  403408:	68ba      	ldr	r2, [r7, #8]
  40340a:	f043 0301 	orr.w	r3, r3, #1
  40340e:	6053      	str	r3, [r2, #4]
  403410:	e6ee      	b.n	4031f0 <_malloc_r+0x2d8>
  403412:	207f      	movs	r0, #127	; 0x7f
  403414:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403418:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40341c:	e59e      	b.n	402f5c <_malloc_r+0x44>
  40341e:	f104 0108 	add.w	r1, r4, #8
  403422:	4628      	mov	r0, r5
  403424:	9300      	str	r3, [sp, #0]
  403426:	f7ff fa61 	bl	4028ec <_free_r>
  40342a:	9b00      	ldr	r3, [sp, #0]
  40342c:	6819      	ldr	r1, [r3, #0]
  40342e:	e6df      	b.n	4031f0 <_malloc_r+0x2d8>
  403430:	2001      	movs	r0, #1
  403432:	f04f 0900 	mov.w	r9, #0
  403436:	e6bc      	b.n	4031b2 <_malloc_r+0x29a>
  403438:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40343c:	d805      	bhi.n	40344a <_malloc_r+0x532>
  40343e:	0bda      	lsrs	r2, r3, #15
  403440:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403444:	00c9      	lsls	r1, r1, #3
  403446:	3277      	adds	r2, #119	; 0x77
  403448:	e720      	b.n	40328c <_malloc_r+0x374>
  40344a:	f240 5154 	movw	r1, #1364	; 0x554
  40344e:	428a      	cmp	r2, r1
  403450:	d805      	bhi.n	40345e <_malloc_r+0x546>
  403452:	0c9a      	lsrs	r2, r3, #18
  403454:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403458:	00c9      	lsls	r1, r1, #3
  40345a:	327c      	adds	r2, #124	; 0x7c
  40345c:	e716      	b.n	40328c <_malloc_r+0x374>
  40345e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403462:	227e      	movs	r2, #126	; 0x7e
  403464:	e712      	b.n	40328c <_malloc_r+0x374>
  403466:	687b      	ldr	r3, [r7, #4]
  403468:	e780      	b.n	40336c <_malloc_r+0x454>
  40346a:	08f0      	lsrs	r0, r6, #3
  40346c:	f106 0308 	add.w	r3, r6, #8
  403470:	e600      	b.n	403074 <_malloc_r+0x15c>
  403472:	bf00      	nop
  403474:	20400a94 	.word	0x20400a94

00403478 <__ascii_mbtowc>:
  403478:	b082      	sub	sp, #8
  40347a:	b149      	cbz	r1, 403490 <__ascii_mbtowc+0x18>
  40347c:	b15a      	cbz	r2, 403496 <__ascii_mbtowc+0x1e>
  40347e:	b16b      	cbz	r3, 40349c <__ascii_mbtowc+0x24>
  403480:	7813      	ldrb	r3, [r2, #0]
  403482:	600b      	str	r3, [r1, #0]
  403484:	7812      	ldrb	r2, [r2, #0]
  403486:	1c10      	adds	r0, r2, #0
  403488:	bf18      	it	ne
  40348a:	2001      	movne	r0, #1
  40348c:	b002      	add	sp, #8
  40348e:	4770      	bx	lr
  403490:	a901      	add	r1, sp, #4
  403492:	2a00      	cmp	r2, #0
  403494:	d1f3      	bne.n	40347e <__ascii_mbtowc+0x6>
  403496:	4610      	mov	r0, r2
  403498:	b002      	add	sp, #8
  40349a:	4770      	bx	lr
  40349c:	f06f 0001 	mvn.w	r0, #1
  4034a0:	e7f4      	b.n	40348c <__ascii_mbtowc+0x14>
  4034a2:	bf00      	nop
	...

004034b0 <memchr>:
  4034b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4034b4:	2a10      	cmp	r2, #16
  4034b6:	db2b      	blt.n	403510 <memchr+0x60>
  4034b8:	f010 0f07 	tst.w	r0, #7
  4034bc:	d008      	beq.n	4034d0 <memchr+0x20>
  4034be:	f810 3b01 	ldrb.w	r3, [r0], #1
  4034c2:	3a01      	subs	r2, #1
  4034c4:	428b      	cmp	r3, r1
  4034c6:	d02d      	beq.n	403524 <memchr+0x74>
  4034c8:	f010 0f07 	tst.w	r0, #7
  4034cc:	b342      	cbz	r2, 403520 <memchr+0x70>
  4034ce:	d1f6      	bne.n	4034be <memchr+0xe>
  4034d0:	b4f0      	push	{r4, r5, r6, r7}
  4034d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4034d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4034da:	f022 0407 	bic.w	r4, r2, #7
  4034de:	f07f 0700 	mvns.w	r7, #0
  4034e2:	2300      	movs	r3, #0
  4034e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4034e8:	3c08      	subs	r4, #8
  4034ea:	ea85 0501 	eor.w	r5, r5, r1
  4034ee:	ea86 0601 	eor.w	r6, r6, r1
  4034f2:	fa85 f547 	uadd8	r5, r5, r7
  4034f6:	faa3 f587 	sel	r5, r3, r7
  4034fa:	fa86 f647 	uadd8	r6, r6, r7
  4034fe:	faa5 f687 	sel	r6, r5, r7
  403502:	b98e      	cbnz	r6, 403528 <memchr+0x78>
  403504:	d1ee      	bne.n	4034e4 <memchr+0x34>
  403506:	bcf0      	pop	{r4, r5, r6, r7}
  403508:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40350c:	f002 0207 	and.w	r2, r2, #7
  403510:	b132      	cbz	r2, 403520 <memchr+0x70>
  403512:	f810 3b01 	ldrb.w	r3, [r0], #1
  403516:	3a01      	subs	r2, #1
  403518:	ea83 0301 	eor.w	r3, r3, r1
  40351c:	b113      	cbz	r3, 403524 <memchr+0x74>
  40351e:	d1f8      	bne.n	403512 <memchr+0x62>
  403520:	2000      	movs	r0, #0
  403522:	4770      	bx	lr
  403524:	3801      	subs	r0, #1
  403526:	4770      	bx	lr
  403528:	2d00      	cmp	r5, #0
  40352a:	bf06      	itte	eq
  40352c:	4635      	moveq	r5, r6
  40352e:	3803      	subeq	r0, #3
  403530:	3807      	subne	r0, #7
  403532:	f015 0f01 	tst.w	r5, #1
  403536:	d107      	bne.n	403548 <memchr+0x98>
  403538:	3001      	adds	r0, #1
  40353a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40353e:	bf02      	ittt	eq
  403540:	3001      	addeq	r0, #1
  403542:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403546:	3001      	addeq	r0, #1
  403548:	bcf0      	pop	{r4, r5, r6, r7}
  40354a:	3801      	subs	r0, #1
  40354c:	4770      	bx	lr
  40354e:	bf00      	nop

00403550 <memcpy>:
  403550:	4684      	mov	ip, r0
  403552:	ea41 0300 	orr.w	r3, r1, r0
  403556:	f013 0303 	ands.w	r3, r3, #3
  40355a:	d16d      	bne.n	403638 <memcpy+0xe8>
  40355c:	3a40      	subs	r2, #64	; 0x40
  40355e:	d341      	bcc.n	4035e4 <memcpy+0x94>
  403560:	f851 3b04 	ldr.w	r3, [r1], #4
  403564:	f840 3b04 	str.w	r3, [r0], #4
  403568:	f851 3b04 	ldr.w	r3, [r1], #4
  40356c:	f840 3b04 	str.w	r3, [r0], #4
  403570:	f851 3b04 	ldr.w	r3, [r1], #4
  403574:	f840 3b04 	str.w	r3, [r0], #4
  403578:	f851 3b04 	ldr.w	r3, [r1], #4
  40357c:	f840 3b04 	str.w	r3, [r0], #4
  403580:	f851 3b04 	ldr.w	r3, [r1], #4
  403584:	f840 3b04 	str.w	r3, [r0], #4
  403588:	f851 3b04 	ldr.w	r3, [r1], #4
  40358c:	f840 3b04 	str.w	r3, [r0], #4
  403590:	f851 3b04 	ldr.w	r3, [r1], #4
  403594:	f840 3b04 	str.w	r3, [r0], #4
  403598:	f851 3b04 	ldr.w	r3, [r1], #4
  40359c:	f840 3b04 	str.w	r3, [r0], #4
  4035a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4035a4:	f840 3b04 	str.w	r3, [r0], #4
  4035a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4035ac:	f840 3b04 	str.w	r3, [r0], #4
  4035b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4035b4:	f840 3b04 	str.w	r3, [r0], #4
  4035b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4035bc:	f840 3b04 	str.w	r3, [r0], #4
  4035c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4035c4:	f840 3b04 	str.w	r3, [r0], #4
  4035c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4035cc:	f840 3b04 	str.w	r3, [r0], #4
  4035d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4035d4:	f840 3b04 	str.w	r3, [r0], #4
  4035d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4035dc:	f840 3b04 	str.w	r3, [r0], #4
  4035e0:	3a40      	subs	r2, #64	; 0x40
  4035e2:	d2bd      	bcs.n	403560 <memcpy+0x10>
  4035e4:	3230      	adds	r2, #48	; 0x30
  4035e6:	d311      	bcc.n	40360c <memcpy+0xbc>
  4035e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4035ec:	f840 3b04 	str.w	r3, [r0], #4
  4035f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4035f4:	f840 3b04 	str.w	r3, [r0], #4
  4035f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4035fc:	f840 3b04 	str.w	r3, [r0], #4
  403600:	f851 3b04 	ldr.w	r3, [r1], #4
  403604:	f840 3b04 	str.w	r3, [r0], #4
  403608:	3a10      	subs	r2, #16
  40360a:	d2ed      	bcs.n	4035e8 <memcpy+0x98>
  40360c:	320c      	adds	r2, #12
  40360e:	d305      	bcc.n	40361c <memcpy+0xcc>
  403610:	f851 3b04 	ldr.w	r3, [r1], #4
  403614:	f840 3b04 	str.w	r3, [r0], #4
  403618:	3a04      	subs	r2, #4
  40361a:	d2f9      	bcs.n	403610 <memcpy+0xc0>
  40361c:	3204      	adds	r2, #4
  40361e:	d008      	beq.n	403632 <memcpy+0xe2>
  403620:	07d2      	lsls	r2, r2, #31
  403622:	bf1c      	itt	ne
  403624:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403628:	f800 3b01 	strbne.w	r3, [r0], #1
  40362c:	d301      	bcc.n	403632 <memcpy+0xe2>
  40362e:	880b      	ldrh	r3, [r1, #0]
  403630:	8003      	strh	r3, [r0, #0]
  403632:	4660      	mov	r0, ip
  403634:	4770      	bx	lr
  403636:	bf00      	nop
  403638:	2a08      	cmp	r2, #8
  40363a:	d313      	bcc.n	403664 <memcpy+0x114>
  40363c:	078b      	lsls	r3, r1, #30
  40363e:	d08d      	beq.n	40355c <memcpy+0xc>
  403640:	f010 0303 	ands.w	r3, r0, #3
  403644:	d08a      	beq.n	40355c <memcpy+0xc>
  403646:	f1c3 0304 	rsb	r3, r3, #4
  40364a:	1ad2      	subs	r2, r2, r3
  40364c:	07db      	lsls	r3, r3, #31
  40364e:	bf1c      	itt	ne
  403650:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403654:	f800 3b01 	strbne.w	r3, [r0], #1
  403658:	d380      	bcc.n	40355c <memcpy+0xc>
  40365a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40365e:	f820 3b02 	strh.w	r3, [r0], #2
  403662:	e77b      	b.n	40355c <memcpy+0xc>
  403664:	3a04      	subs	r2, #4
  403666:	d3d9      	bcc.n	40361c <memcpy+0xcc>
  403668:	3a01      	subs	r2, #1
  40366a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40366e:	f800 3b01 	strb.w	r3, [r0], #1
  403672:	d2f9      	bcs.n	403668 <memcpy+0x118>
  403674:	780b      	ldrb	r3, [r1, #0]
  403676:	7003      	strb	r3, [r0, #0]
  403678:	784b      	ldrb	r3, [r1, #1]
  40367a:	7043      	strb	r3, [r0, #1]
  40367c:	788b      	ldrb	r3, [r1, #2]
  40367e:	7083      	strb	r3, [r0, #2]
  403680:	4660      	mov	r0, ip
  403682:	4770      	bx	lr

00403684 <memmove>:
  403684:	4288      	cmp	r0, r1
  403686:	b5f0      	push	{r4, r5, r6, r7, lr}
  403688:	d90d      	bls.n	4036a6 <memmove+0x22>
  40368a:	188b      	adds	r3, r1, r2
  40368c:	4298      	cmp	r0, r3
  40368e:	d20a      	bcs.n	4036a6 <memmove+0x22>
  403690:	1884      	adds	r4, r0, r2
  403692:	2a00      	cmp	r2, #0
  403694:	d051      	beq.n	40373a <memmove+0xb6>
  403696:	4622      	mov	r2, r4
  403698:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40369c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4036a0:	4299      	cmp	r1, r3
  4036a2:	d1f9      	bne.n	403698 <memmove+0x14>
  4036a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4036a6:	2a0f      	cmp	r2, #15
  4036a8:	d948      	bls.n	40373c <memmove+0xb8>
  4036aa:	ea41 0300 	orr.w	r3, r1, r0
  4036ae:	079b      	lsls	r3, r3, #30
  4036b0:	d146      	bne.n	403740 <memmove+0xbc>
  4036b2:	f100 0410 	add.w	r4, r0, #16
  4036b6:	f101 0310 	add.w	r3, r1, #16
  4036ba:	4615      	mov	r5, r2
  4036bc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4036c0:	f844 6c10 	str.w	r6, [r4, #-16]
  4036c4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4036c8:	f844 6c0c 	str.w	r6, [r4, #-12]
  4036cc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4036d0:	f844 6c08 	str.w	r6, [r4, #-8]
  4036d4:	3d10      	subs	r5, #16
  4036d6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4036da:	f844 6c04 	str.w	r6, [r4, #-4]
  4036de:	2d0f      	cmp	r5, #15
  4036e0:	f103 0310 	add.w	r3, r3, #16
  4036e4:	f104 0410 	add.w	r4, r4, #16
  4036e8:	d8e8      	bhi.n	4036bc <memmove+0x38>
  4036ea:	f1a2 0310 	sub.w	r3, r2, #16
  4036ee:	f023 030f 	bic.w	r3, r3, #15
  4036f2:	f002 0e0f 	and.w	lr, r2, #15
  4036f6:	3310      	adds	r3, #16
  4036f8:	f1be 0f03 	cmp.w	lr, #3
  4036fc:	4419      	add	r1, r3
  4036fe:	4403      	add	r3, r0
  403700:	d921      	bls.n	403746 <memmove+0xc2>
  403702:	1f1e      	subs	r6, r3, #4
  403704:	460d      	mov	r5, r1
  403706:	4674      	mov	r4, lr
  403708:	3c04      	subs	r4, #4
  40370a:	f855 7b04 	ldr.w	r7, [r5], #4
  40370e:	f846 7f04 	str.w	r7, [r6, #4]!
  403712:	2c03      	cmp	r4, #3
  403714:	d8f8      	bhi.n	403708 <memmove+0x84>
  403716:	f1ae 0404 	sub.w	r4, lr, #4
  40371a:	f024 0403 	bic.w	r4, r4, #3
  40371e:	3404      	adds	r4, #4
  403720:	4421      	add	r1, r4
  403722:	4423      	add	r3, r4
  403724:	f002 0203 	and.w	r2, r2, #3
  403728:	b162      	cbz	r2, 403744 <memmove+0xc0>
  40372a:	3b01      	subs	r3, #1
  40372c:	440a      	add	r2, r1
  40372e:	f811 4b01 	ldrb.w	r4, [r1], #1
  403732:	f803 4f01 	strb.w	r4, [r3, #1]!
  403736:	428a      	cmp	r2, r1
  403738:	d1f9      	bne.n	40372e <memmove+0xaa>
  40373a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40373c:	4603      	mov	r3, r0
  40373e:	e7f3      	b.n	403728 <memmove+0xa4>
  403740:	4603      	mov	r3, r0
  403742:	e7f2      	b.n	40372a <memmove+0xa6>
  403744:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403746:	4672      	mov	r2, lr
  403748:	e7ee      	b.n	403728 <memmove+0xa4>
  40374a:	bf00      	nop

0040374c <__malloc_lock>:
  40374c:	4801      	ldr	r0, [pc, #4]	; (403754 <__malloc_lock+0x8>)
  40374e:	f7ff bb67 	b.w	402e20 <__retarget_lock_acquire_recursive>
  403752:	bf00      	nop
  403754:	204012e8 	.word	0x204012e8

00403758 <__malloc_unlock>:
  403758:	4801      	ldr	r0, [pc, #4]	; (403760 <__malloc_unlock+0x8>)
  40375a:	f7ff bb63 	b.w	402e24 <__retarget_lock_release_recursive>
  40375e:	bf00      	nop
  403760:	204012e8 	.word	0x204012e8

00403764 <_realloc_r>:
  403764:	2900      	cmp	r1, #0
  403766:	f000 8095 	beq.w	403894 <_realloc_r+0x130>
  40376a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40376e:	460d      	mov	r5, r1
  403770:	4616      	mov	r6, r2
  403772:	b083      	sub	sp, #12
  403774:	4680      	mov	r8, r0
  403776:	f106 070b 	add.w	r7, r6, #11
  40377a:	f7ff ffe7 	bl	40374c <__malloc_lock>
  40377e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  403782:	2f16      	cmp	r7, #22
  403784:	f02e 0403 	bic.w	r4, lr, #3
  403788:	f1a5 0908 	sub.w	r9, r5, #8
  40378c:	d83c      	bhi.n	403808 <_realloc_r+0xa4>
  40378e:	2210      	movs	r2, #16
  403790:	4617      	mov	r7, r2
  403792:	42be      	cmp	r6, r7
  403794:	d83d      	bhi.n	403812 <_realloc_r+0xae>
  403796:	4294      	cmp	r4, r2
  403798:	da43      	bge.n	403822 <_realloc_r+0xbe>
  40379a:	4bc4      	ldr	r3, [pc, #784]	; (403aac <_realloc_r+0x348>)
  40379c:	6899      	ldr	r1, [r3, #8]
  40379e:	eb09 0004 	add.w	r0, r9, r4
  4037a2:	4288      	cmp	r0, r1
  4037a4:	f000 80b4 	beq.w	403910 <_realloc_r+0x1ac>
  4037a8:	6843      	ldr	r3, [r0, #4]
  4037aa:	f023 0101 	bic.w	r1, r3, #1
  4037ae:	4401      	add	r1, r0
  4037b0:	6849      	ldr	r1, [r1, #4]
  4037b2:	07c9      	lsls	r1, r1, #31
  4037b4:	d54c      	bpl.n	403850 <_realloc_r+0xec>
  4037b6:	f01e 0f01 	tst.w	lr, #1
  4037ba:	f000 809b 	beq.w	4038f4 <_realloc_r+0x190>
  4037be:	4631      	mov	r1, r6
  4037c0:	4640      	mov	r0, r8
  4037c2:	f7ff fba9 	bl	402f18 <_malloc_r>
  4037c6:	4606      	mov	r6, r0
  4037c8:	2800      	cmp	r0, #0
  4037ca:	d03a      	beq.n	403842 <_realloc_r+0xde>
  4037cc:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4037d0:	f023 0301 	bic.w	r3, r3, #1
  4037d4:	444b      	add	r3, r9
  4037d6:	f1a0 0208 	sub.w	r2, r0, #8
  4037da:	429a      	cmp	r2, r3
  4037dc:	f000 8121 	beq.w	403a22 <_realloc_r+0x2be>
  4037e0:	1f22      	subs	r2, r4, #4
  4037e2:	2a24      	cmp	r2, #36	; 0x24
  4037e4:	f200 8107 	bhi.w	4039f6 <_realloc_r+0x292>
  4037e8:	2a13      	cmp	r2, #19
  4037ea:	f200 80db 	bhi.w	4039a4 <_realloc_r+0x240>
  4037ee:	4603      	mov	r3, r0
  4037f0:	462a      	mov	r2, r5
  4037f2:	6811      	ldr	r1, [r2, #0]
  4037f4:	6019      	str	r1, [r3, #0]
  4037f6:	6851      	ldr	r1, [r2, #4]
  4037f8:	6059      	str	r1, [r3, #4]
  4037fa:	6892      	ldr	r2, [r2, #8]
  4037fc:	609a      	str	r2, [r3, #8]
  4037fe:	4629      	mov	r1, r5
  403800:	4640      	mov	r0, r8
  403802:	f7ff f873 	bl	4028ec <_free_r>
  403806:	e01c      	b.n	403842 <_realloc_r+0xde>
  403808:	f027 0707 	bic.w	r7, r7, #7
  40380c:	2f00      	cmp	r7, #0
  40380e:	463a      	mov	r2, r7
  403810:	dabf      	bge.n	403792 <_realloc_r+0x2e>
  403812:	2600      	movs	r6, #0
  403814:	230c      	movs	r3, #12
  403816:	4630      	mov	r0, r6
  403818:	f8c8 3000 	str.w	r3, [r8]
  40381c:	b003      	add	sp, #12
  40381e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403822:	462e      	mov	r6, r5
  403824:	1be3      	subs	r3, r4, r7
  403826:	2b0f      	cmp	r3, #15
  403828:	d81e      	bhi.n	403868 <_realloc_r+0x104>
  40382a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40382e:	f003 0301 	and.w	r3, r3, #1
  403832:	4323      	orrs	r3, r4
  403834:	444c      	add	r4, r9
  403836:	f8c9 3004 	str.w	r3, [r9, #4]
  40383a:	6863      	ldr	r3, [r4, #4]
  40383c:	f043 0301 	orr.w	r3, r3, #1
  403840:	6063      	str	r3, [r4, #4]
  403842:	4640      	mov	r0, r8
  403844:	f7ff ff88 	bl	403758 <__malloc_unlock>
  403848:	4630      	mov	r0, r6
  40384a:	b003      	add	sp, #12
  40384c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403850:	f023 0303 	bic.w	r3, r3, #3
  403854:	18e1      	adds	r1, r4, r3
  403856:	4291      	cmp	r1, r2
  403858:	db1f      	blt.n	40389a <_realloc_r+0x136>
  40385a:	68c3      	ldr	r3, [r0, #12]
  40385c:	6882      	ldr	r2, [r0, #8]
  40385e:	462e      	mov	r6, r5
  403860:	60d3      	str	r3, [r2, #12]
  403862:	460c      	mov	r4, r1
  403864:	609a      	str	r2, [r3, #8]
  403866:	e7dd      	b.n	403824 <_realloc_r+0xc0>
  403868:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40386c:	eb09 0107 	add.w	r1, r9, r7
  403870:	f002 0201 	and.w	r2, r2, #1
  403874:	444c      	add	r4, r9
  403876:	f043 0301 	orr.w	r3, r3, #1
  40387a:	4317      	orrs	r7, r2
  40387c:	f8c9 7004 	str.w	r7, [r9, #4]
  403880:	604b      	str	r3, [r1, #4]
  403882:	6863      	ldr	r3, [r4, #4]
  403884:	f043 0301 	orr.w	r3, r3, #1
  403888:	3108      	adds	r1, #8
  40388a:	6063      	str	r3, [r4, #4]
  40388c:	4640      	mov	r0, r8
  40388e:	f7ff f82d 	bl	4028ec <_free_r>
  403892:	e7d6      	b.n	403842 <_realloc_r+0xde>
  403894:	4611      	mov	r1, r2
  403896:	f7ff bb3f 	b.w	402f18 <_malloc_r>
  40389a:	f01e 0f01 	tst.w	lr, #1
  40389e:	d18e      	bne.n	4037be <_realloc_r+0x5a>
  4038a0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4038a4:	eba9 0a01 	sub.w	sl, r9, r1
  4038a8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4038ac:	f021 0103 	bic.w	r1, r1, #3
  4038b0:	440b      	add	r3, r1
  4038b2:	4423      	add	r3, r4
  4038b4:	4293      	cmp	r3, r2
  4038b6:	db25      	blt.n	403904 <_realloc_r+0x1a0>
  4038b8:	68c2      	ldr	r2, [r0, #12]
  4038ba:	6881      	ldr	r1, [r0, #8]
  4038bc:	4656      	mov	r6, sl
  4038be:	60ca      	str	r2, [r1, #12]
  4038c0:	6091      	str	r1, [r2, #8]
  4038c2:	f8da 100c 	ldr.w	r1, [sl, #12]
  4038c6:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4038ca:	1f22      	subs	r2, r4, #4
  4038cc:	2a24      	cmp	r2, #36	; 0x24
  4038ce:	60c1      	str	r1, [r0, #12]
  4038d0:	6088      	str	r0, [r1, #8]
  4038d2:	f200 8094 	bhi.w	4039fe <_realloc_r+0x29a>
  4038d6:	2a13      	cmp	r2, #19
  4038d8:	d96f      	bls.n	4039ba <_realloc_r+0x256>
  4038da:	6829      	ldr	r1, [r5, #0]
  4038dc:	f8ca 1008 	str.w	r1, [sl, #8]
  4038e0:	6869      	ldr	r1, [r5, #4]
  4038e2:	f8ca 100c 	str.w	r1, [sl, #12]
  4038e6:	2a1b      	cmp	r2, #27
  4038e8:	f200 80a2 	bhi.w	403a30 <_realloc_r+0x2cc>
  4038ec:	3508      	adds	r5, #8
  4038ee:	f10a 0210 	add.w	r2, sl, #16
  4038f2:	e063      	b.n	4039bc <_realloc_r+0x258>
  4038f4:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4038f8:	eba9 0a03 	sub.w	sl, r9, r3
  4038fc:	f8da 1004 	ldr.w	r1, [sl, #4]
  403900:	f021 0103 	bic.w	r1, r1, #3
  403904:	1863      	adds	r3, r4, r1
  403906:	4293      	cmp	r3, r2
  403908:	f6ff af59 	blt.w	4037be <_realloc_r+0x5a>
  40390c:	4656      	mov	r6, sl
  40390e:	e7d8      	b.n	4038c2 <_realloc_r+0x15e>
  403910:	6841      	ldr	r1, [r0, #4]
  403912:	f021 0b03 	bic.w	fp, r1, #3
  403916:	44a3      	add	fp, r4
  403918:	f107 0010 	add.w	r0, r7, #16
  40391c:	4583      	cmp	fp, r0
  40391e:	da56      	bge.n	4039ce <_realloc_r+0x26a>
  403920:	f01e 0f01 	tst.w	lr, #1
  403924:	f47f af4b 	bne.w	4037be <_realloc_r+0x5a>
  403928:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40392c:	eba9 0a01 	sub.w	sl, r9, r1
  403930:	f8da 1004 	ldr.w	r1, [sl, #4]
  403934:	f021 0103 	bic.w	r1, r1, #3
  403938:	448b      	add	fp, r1
  40393a:	4558      	cmp	r0, fp
  40393c:	dce2      	bgt.n	403904 <_realloc_r+0x1a0>
  40393e:	4656      	mov	r6, sl
  403940:	f8da 100c 	ldr.w	r1, [sl, #12]
  403944:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403948:	1f22      	subs	r2, r4, #4
  40394a:	2a24      	cmp	r2, #36	; 0x24
  40394c:	60c1      	str	r1, [r0, #12]
  40394e:	6088      	str	r0, [r1, #8]
  403950:	f200 808f 	bhi.w	403a72 <_realloc_r+0x30e>
  403954:	2a13      	cmp	r2, #19
  403956:	f240 808a 	bls.w	403a6e <_realloc_r+0x30a>
  40395a:	6829      	ldr	r1, [r5, #0]
  40395c:	f8ca 1008 	str.w	r1, [sl, #8]
  403960:	6869      	ldr	r1, [r5, #4]
  403962:	f8ca 100c 	str.w	r1, [sl, #12]
  403966:	2a1b      	cmp	r2, #27
  403968:	f200 808a 	bhi.w	403a80 <_realloc_r+0x31c>
  40396c:	3508      	adds	r5, #8
  40396e:	f10a 0210 	add.w	r2, sl, #16
  403972:	6829      	ldr	r1, [r5, #0]
  403974:	6011      	str	r1, [r2, #0]
  403976:	6869      	ldr	r1, [r5, #4]
  403978:	6051      	str	r1, [r2, #4]
  40397a:	68a9      	ldr	r1, [r5, #8]
  40397c:	6091      	str	r1, [r2, #8]
  40397e:	eb0a 0107 	add.w	r1, sl, r7
  403982:	ebab 0207 	sub.w	r2, fp, r7
  403986:	f042 0201 	orr.w	r2, r2, #1
  40398a:	6099      	str	r1, [r3, #8]
  40398c:	604a      	str	r2, [r1, #4]
  40398e:	f8da 3004 	ldr.w	r3, [sl, #4]
  403992:	f003 0301 	and.w	r3, r3, #1
  403996:	431f      	orrs	r7, r3
  403998:	4640      	mov	r0, r8
  40399a:	f8ca 7004 	str.w	r7, [sl, #4]
  40399e:	f7ff fedb 	bl	403758 <__malloc_unlock>
  4039a2:	e751      	b.n	403848 <_realloc_r+0xe4>
  4039a4:	682b      	ldr	r3, [r5, #0]
  4039a6:	6003      	str	r3, [r0, #0]
  4039a8:	686b      	ldr	r3, [r5, #4]
  4039aa:	6043      	str	r3, [r0, #4]
  4039ac:	2a1b      	cmp	r2, #27
  4039ae:	d82d      	bhi.n	403a0c <_realloc_r+0x2a8>
  4039b0:	f100 0308 	add.w	r3, r0, #8
  4039b4:	f105 0208 	add.w	r2, r5, #8
  4039b8:	e71b      	b.n	4037f2 <_realloc_r+0x8e>
  4039ba:	4632      	mov	r2, r6
  4039bc:	6829      	ldr	r1, [r5, #0]
  4039be:	6011      	str	r1, [r2, #0]
  4039c0:	6869      	ldr	r1, [r5, #4]
  4039c2:	6051      	str	r1, [r2, #4]
  4039c4:	68a9      	ldr	r1, [r5, #8]
  4039c6:	6091      	str	r1, [r2, #8]
  4039c8:	461c      	mov	r4, r3
  4039ca:	46d1      	mov	r9, sl
  4039cc:	e72a      	b.n	403824 <_realloc_r+0xc0>
  4039ce:	eb09 0107 	add.w	r1, r9, r7
  4039d2:	ebab 0b07 	sub.w	fp, fp, r7
  4039d6:	f04b 0201 	orr.w	r2, fp, #1
  4039da:	6099      	str	r1, [r3, #8]
  4039dc:	604a      	str	r2, [r1, #4]
  4039de:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4039e2:	f003 0301 	and.w	r3, r3, #1
  4039e6:	431f      	orrs	r7, r3
  4039e8:	4640      	mov	r0, r8
  4039ea:	f845 7c04 	str.w	r7, [r5, #-4]
  4039ee:	f7ff feb3 	bl	403758 <__malloc_unlock>
  4039f2:	462e      	mov	r6, r5
  4039f4:	e728      	b.n	403848 <_realloc_r+0xe4>
  4039f6:	4629      	mov	r1, r5
  4039f8:	f7ff fe44 	bl	403684 <memmove>
  4039fc:	e6ff      	b.n	4037fe <_realloc_r+0x9a>
  4039fe:	4629      	mov	r1, r5
  403a00:	4630      	mov	r0, r6
  403a02:	461c      	mov	r4, r3
  403a04:	46d1      	mov	r9, sl
  403a06:	f7ff fe3d 	bl	403684 <memmove>
  403a0a:	e70b      	b.n	403824 <_realloc_r+0xc0>
  403a0c:	68ab      	ldr	r3, [r5, #8]
  403a0e:	6083      	str	r3, [r0, #8]
  403a10:	68eb      	ldr	r3, [r5, #12]
  403a12:	60c3      	str	r3, [r0, #12]
  403a14:	2a24      	cmp	r2, #36	; 0x24
  403a16:	d017      	beq.n	403a48 <_realloc_r+0x2e4>
  403a18:	f100 0310 	add.w	r3, r0, #16
  403a1c:	f105 0210 	add.w	r2, r5, #16
  403a20:	e6e7      	b.n	4037f2 <_realloc_r+0x8e>
  403a22:	f850 3c04 	ldr.w	r3, [r0, #-4]
  403a26:	f023 0303 	bic.w	r3, r3, #3
  403a2a:	441c      	add	r4, r3
  403a2c:	462e      	mov	r6, r5
  403a2e:	e6f9      	b.n	403824 <_realloc_r+0xc0>
  403a30:	68a9      	ldr	r1, [r5, #8]
  403a32:	f8ca 1010 	str.w	r1, [sl, #16]
  403a36:	68e9      	ldr	r1, [r5, #12]
  403a38:	f8ca 1014 	str.w	r1, [sl, #20]
  403a3c:	2a24      	cmp	r2, #36	; 0x24
  403a3e:	d00c      	beq.n	403a5a <_realloc_r+0x2f6>
  403a40:	3510      	adds	r5, #16
  403a42:	f10a 0218 	add.w	r2, sl, #24
  403a46:	e7b9      	b.n	4039bc <_realloc_r+0x258>
  403a48:	692b      	ldr	r3, [r5, #16]
  403a4a:	6103      	str	r3, [r0, #16]
  403a4c:	696b      	ldr	r3, [r5, #20]
  403a4e:	6143      	str	r3, [r0, #20]
  403a50:	f105 0218 	add.w	r2, r5, #24
  403a54:	f100 0318 	add.w	r3, r0, #24
  403a58:	e6cb      	b.n	4037f2 <_realloc_r+0x8e>
  403a5a:	692a      	ldr	r2, [r5, #16]
  403a5c:	f8ca 2018 	str.w	r2, [sl, #24]
  403a60:	696a      	ldr	r2, [r5, #20]
  403a62:	f8ca 201c 	str.w	r2, [sl, #28]
  403a66:	3518      	adds	r5, #24
  403a68:	f10a 0220 	add.w	r2, sl, #32
  403a6c:	e7a6      	b.n	4039bc <_realloc_r+0x258>
  403a6e:	4632      	mov	r2, r6
  403a70:	e77f      	b.n	403972 <_realloc_r+0x20e>
  403a72:	4629      	mov	r1, r5
  403a74:	4630      	mov	r0, r6
  403a76:	9301      	str	r3, [sp, #4]
  403a78:	f7ff fe04 	bl	403684 <memmove>
  403a7c:	9b01      	ldr	r3, [sp, #4]
  403a7e:	e77e      	b.n	40397e <_realloc_r+0x21a>
  403a80:	68a9      	ldr	r1, [r5, #8]
  403a82:	f8ca 1010 	str.w	r1, [sl, #16]
  403a86:	68e9      	ldr	r1, [r5, #12]
  403a88:	f8ca 1014 	str.w	r1, [sl, #20]
  403a8c:	2a24      	cmp	r2, #36	; 0x24
  403a8e:	d003      	beq.n	403a98 <_realloc_r+0x334>
  403a90:	3510      	adds	r5, #16
  403a92:	f10a 0218 	add.w	r2, sl, #24
  403a96:	e76c      	b.n	403972 <_realloc_r+0x20e>
  403a98:	692a      	ldr	r2, [r5, #16]
  403a9a:	f8ca 2018 	str.w	r2, [sl, #24]
  403a9e:	696a      	ldr	r2, [r5, #20]
  403aa0:	f8ca 201c 	str.w	r2, [sl, #28]
  403aa4:	3518      	adds	r5, #24
  403aa6:	f10a 0220 	add.w	r2, sl, #32
  403aaa:	e762      	b.n	403972 <_realloc_r+0x20e>
  403aac:	204005b0 	.word	0x204005b0

00403ab0 <_sbrk_r>:
  403ab0:	b538      	push	{r3, r4, r5, lr}
  403ab2:	4c07      	ldr	r4, [pc, #28]	; (403ad0 <_sbrk_r+0x20>)
  403ab4:	2300      	movs	r3, #0
  403ab6:	4605      	mov	r5, r0
  403ab8:	4608      	mov	r0, r1
  403aba:	6023      	str	r3, [r4, #0]
  403abc:	f7fd fc2a 	bl	401314 <_sbrk>
  403ac0:	1c43      	adds	r3, r0, #1
  403ac2:	d000      	beq.n	403ac6 <_sbrk_r+0x16>
  403ac4:	bd38      	pop	{r3, r4, r5, pc}
  403ac6:	6823      	ldr	r3, [r4, #0]
  403ac8:	2b00      	cmp	r3, #0
  403aca:	d0fb      	beq.n	403ac4 <_sbrk_r+0x14>
  403acc:	602b      	str	r3, [r5, #0]
  403ace:	bd38      	pop	{r3, r4, r5, pc}
  403ad0:	204012fc 	.word	0x204012fc

00403ad4 <__sread>:
  403ad4:	b510      	push	{r4, lr}
  403ad6:	460c      	mov	r4, r1
  403ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403adc:	f000 fa76 	bl	403fcc <_read_r>
  403ae0:	2800      	cmp	r0, #0
  403ae2:	db03      	blt.n	403aec <__sread+0x18>
  403ae4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  403ae6:	4403      	add	r3, r0
  403ae8:	6523      	str	r3, [r4, #80]	; 0x50
  403aea:	bd10      	pop	{r4, pc}
  403aec:	89a3      	ldrh	r3, [r4, #12]
  403aee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403af2:	81a3      	strh	r3, [r4, #12]
  403af4:	bd10      	pop	{r4, pc}
  403af6:	bf00      	nop

00403af8 <__swrite>:
  403af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403afc:	4616      	mov	r6, r2
  403afe:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  403b02:	461f      	mov	r7, r3
  403b04:	05d3      	lsls	r3, r2, #23
  403b06:	460c      	mov	r4, r1
  403b08:	4605      	mov	r5, r0
  403b0a:	d507      	bpl.n	403b1c <__swrite+0x24>
  403b0c:	2200      	movs	r2, #0
  403b0e:	2302      	movs	r3, #2
  403b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403b14:	f000 fa44 	bl	403fa0 <_lseek_r>
  403b18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403b1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403b20:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403b24:	81a2      	strh	r2, [r4, #12]
  403b26:	463b      	mov	r3, r7
  403b28:	4632      	mov	r2, r6
  403b2a:	4628      	mov	r0, r5
  403b2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403b30:	f000 b924 	b.w	403d7c <_write_r>

00403b34 <__sseek>:
  403b34:	b510      	push	{r4, lr}
  403b36:	460c      	mov	r4, r1
  403b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403b3c:	f000 fa30 	bl	403fa0 <_lseek_r>
  403b40:	89a3      	ldrh	r3, [r4, #12]
  403b42:	1c42      	adds	r2, r0, #1
  403b44:	bf0e      	itee	eq
  403b46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  403b4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  403b4e:	6520      	strne	r0, [r4, #80]	; 0x50
  403b50:	81a3      	strh	r3, [r4, #12]
  403b52:	bd10      	pop	{r4, pc}

00403b54 <__sclose>:
  403b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403b58:	f000 b988 	b.w	403e6c <_close_r>
	...

00403b80 <strlen>:
  403b80:	f890 f000 	pld	[r0]
  403b84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403b88:	f020 0107 	bic.w	r1, r0, #7
  403b8c:	f06f 0c00 	mvn.w	ip, #0
  403b90:	f010 0407 	ands.w	r4, r0, #7
  403b94:	f891 f020 	pld	[r1, #32]
  403b98:	f040 8049 	bne.w	403c2e <strlen+0xae>
  403b9c:	f04f 0400 	mov.w	r4, #0
  403ba0:	f06f 0007 	mvn.w	r0, #7
  403ba4:	e9d1 2300 	ldrd	r2, r3, [r1]
  403ba8:	f891 f040 	pld	[r1, #64]	; 0x40
  403bac:	f100 0008 	add.w	r0, r0, #8
  403bb0:	fa82 f24c 	uadd8	r2, r2, ip
  403bb4:	faa4 f28c 	sel	r2, r4, ip
  403bb8:	fa83 f34c 	uadd8	r3, r3, ip
  403bbc:	faa2 f38c 	sel	r3, r2, ip
  403bc0:	bb4b      	cbnz	r3, 403c16 <strlen+0x96>
  403bc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403bc6:	fa82 f24c 	uadd8	r2, r2, ip
  403bca:	f100 0008 	add.w	r0, r0, #8
  403bce:	faa4 f28c 	sel	r2, r4, ip
  403bd2:	fa83 f34c 	uadd8	r3, r3, ip
  403bd6:	faa2 f38c 	sel	r3, r2, ip
  403bda:	b9e3      	cbnz	r3, 403c16 <strlen+0x96>
  403bdc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  403be0:	fa82 f24c 	uadd8	r2, r2, ip
  403be4:	f100 0008 	add.w	r0, r0, #8
  403be8:	faa4 f28c 	sel	r2, r4, ip
  403bec:	fa83 f34c 	uadd8	r3, r3, ip
  403bf0:	faa2 f38c 	sel	r3, r2, ip
  403bf4:	b97b      	cbnz	r3, 403c16 <strlen+0x96>
  403bf6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  403bfa:	f101 0120 	add.w	r1, r1, #32
  403bfe:	fa82 f24c 	uadd8	r2, r2, ip
  403c02:	f100 0008 	add.w	r0, r0, #8
  403c06:	faa4 f28c 	sel	r2, r4, ip
  403c0a:	fa83 f34c 	uadd8	r3, r3, ip
  403c0e:	faa2 f38c 	sel	r3, r2, ip
  403c12:	2b00      	cmp	r3, #0
  403c14:	d0c6      	beq.n	403ba4 <strlen+0x24>
  403c16:	2a00      	cmp	r2, #0
  403c18:	bf04      	itt	eq
  403c1a:	3004      	addeq	r0, #4
  403c1c:	461a      	moveq	r2, r3
  403c1e:	ba12      	rev	r2, r2
  403c20:	fab2 f282 	clz	r2, r2
  403c24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403c28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  403c2c:	4770      	bx	lr
  403c2e:	e9d1 2300 	ldrd	r2, r3, [r1]
  403c32:	f004 0503 	and.w	r5, r4, #3
  403c36:	f1c4 0000 	rsb	r0, r4, #0
  403c3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  403c3e:	f014 0f04 	tst.w	r4, #4
  403c42:	f891 f040 	pld	[r1, #64]	; 0x40
  403c46:	fa0c f505 	lsl.w	r5, ip, r5
  403c4a:	ea62 0205 	orn	r2, r2, r5
  403c4e:	bf1c      	itt	ne
  403c50:	ea63 0305 	ornne	r3, r3, r5
  403c54:	4662      	movne	r2, ip
  403c56:	f04f 0400 	mov.w	r4, #0
  403c5a:	e7a9      	b.n	403bb0 <strlen+0x30>

00403c5c <__swbuf_r>:
  403c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403c5e:	460d      	mov	r5, r1
  403c60:	4614      	mov	r4, r2
  403c62:	4606      	mov	r6, r0
  403c64:	b110      	cbz	r0, 403c6c <__swbuf_r+0x10>
  403c66:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403c68:	2b00      	cmp	r3, #0
  403c6a:	d04b      	beq.n	403d04 <__swbuf_r+0xa8>
  403c6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403c70:	69a3      	ldr	r3, [r4, #24]
  403c72:	60a3      	str	r3, [r4, #8]
  403c74:	b291      	uxth	r1, r2
  403c76:	0708      	lsls	r0, r1, #28
  403c78:	d539      	bpl.n	403cee <__swbuf_r+0x92>
  403c7a:	6923      	ldr	r3, [r4, #16]
  403c7c:	2b00      	cmp	r3, #0
  403c7e:	d036      	beq.n	403cee <__swbuf_r+0x92>
  403c80:	b2ed      	uxtb	r5, r5
  403c82:	0489      	lsls	r1, r1, #18
  403c84:	462f      	mov	r7, r5
  403c86:	d515      	bpl.n	403cb4 <__swbuf_r+0x58>
  403c88:	6822      	ldr	r2, [r4, #0]
  403c8a:	6961      	ldr	r1, [r4, #20]
  403c8c:	1ad3      	subs	r3, r2, r3
  403c8e:	428b      	cmp	r3, r1
  403c90:	da1c      	bge.n	403ccc <__swbuf_r+0x70>
  403c92:	3301      	adds	r3, #1
  403c94:	68a1      	ldr	r1, [r4, #8]
  403c96:	1c50      	adds	r0, r2, #1
  403c98:	3901      	subs	r1, #1
  403c9a:	60a1      	str	r1, [r4, #8]
  403c9c:	6020      	str	r0, [r4, #0]
  403c9e:	7015      	strb	r5, [r2, #0]
  403ca0:	6962      	ldr	r2, [r4, #20]
  403ca2:	429a      	cmp	r2, r3
  403ca4:	d01a      	beq.n	403cdc <__swbuf_r+0x80>
  403ca6:	89a3      	ldrh	r3, [r4, #12]
  403ca8:	07db      	lsls	r3, r3, #31
  403caa:	d501      	bpl.n	403cb0 <__swbuf_r+0x54>
  403cac:	2d0a      	cmp	r5, #10
  403cae:	d015      	beq.n	403cdc <__swbuf_r+0x80>
  403cb0:	4638      	mov	r0, r7
  403cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403cb4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403cb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403cba:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  403cbe:	81a2      	strh	r2, [r4, #12]
  403cc0:	6822      	ldr	r2, [r4, #0]
  403cc2:	6661      	str	r1, [r4, #100]	; 0x64
  403cc4:	6961      	ldr	r1, [r4, #20]
  403cc6:	1ad3      	subs	r3, r2, r3
  403cc8:	428b      	cmp	r3, r1
  403cca:	dbe2      	blt.n	403c92 <__swbuf_r+0x36>
  403ccc:	4621      	mov	r1, r4
  403cce:	4630      	mov	r0, r6
  403cd0:	f7fe fc8e 	bl	4025f0 <_fflush_r>
  403cd4:	b940      	cbnz	r0, 403ce8 <__swbuf_r+0x8c>
  403cd6:	6822      	ldr	r2, [r4, #0]
  403cd8:	2301      	movs	r3, #1
  403cda:	e7db      	b.n	403c94 <__swbuf_r+0x38>
  403cdc:	4621      	mov	r1, r4
  403cde:	4630      	mov	r0, r6
  403ce0:	f7fe fc86 	bl	4025f0 <_fflush_r>
  403ce4:	2800      	cmp	r0, #0
  403ce6:	d0e3      	beq.n	403cb0 <__swbuf_r+0x54>
  403ce8:	f04f 37ff 	mov.w	r7, #4294967295
  403cec:	e7e0      	b.n	403cb0 <__swbuf_r+0x54>
  403cee:	4621      	mov	r1, r4
  403cf0:	4630      	mov	r0, r6
  403cf2:	f7fe fb69 	bl	4023c8 <__swsetup_r>
  403cf6:	2800      	cmp	r0, #0
  403cf8:	d1f6      	bne.n	403ce8 <__swbuf_r+0x8c>
  403cfa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403cfe:	6923      	ldr	r3, [r4, #16]
  403d00:	b291      	uxth	r1, r2
  403d02:	e7bd      	b.n	403c80 <__swbuf_r+0x24>
  403d04:	f7fe fccc 	bl	4026a0 <__sinit>
  403d08:	e7b0      	b.n	403c6c <__swbuf_r+0x10>
  403d0a:	bf00      	nop

00403d0c <_wcrtomb_r>:
  403d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  403d0e:	4606      	mov	r6, r0
  403d10:	b085      	sub	sp, #20
  403d12:	461f      	mov	r7, r3
  403d14:	b189      	cbz	r1, 403d3a <_wcrtomb_r+0x2e>
  403d16:	4c10      	ldr	r4, [pc, #64]	; (403d58 <_wcrtomb_r+0x4c>)
  403d18:	4d10      	ldr	r5, [pc, #64]	; (403d5c <_wcrtomb_r+0x50>)
  403d1a:	6824      	ldr	r4, [r4, #0]
  403d1c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  403d1e:	2c00      	cmp	r4, #0
  403d20:	bf08      	it	eq
  403d22:	462c      	moveq	r4, r5
  403d24:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  403d28:	47a0      	blx	r4
  403d2a:	1c43      	adds	r3, r0, #1
  403d2c:	d103      	bne.n	403d36 <_wcrtomb_r+0x2a>
  403d2e:	2200      	movs	r2, #0
  403d30:	238a      	movs	r3, #138	; 0x8a
  403d32:	603a      	str	r2, [r7, #0]
  403d34:	6033      	str	r3, [r6, #0]
  403d36:	b005      	add	sp, #20
  403d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403d3a:	460c      	mov	r4, r1
  403d3c:	4906      	ldr	r1, [pc, #24]	; (403d58 <_wcrtomb_r+0x4c>)
  403d3e:	4a07      	ldr	r2, [pc, #28]	; (403d5c <_wcrtomb_r+0x50>)
  403d40:	6809      	ldr	r1, [r1, #0]
  403d42:	6b49      	ldr	r1, [r1, #52]	; 0x34
  403d44:	2900      	cmp	r1, #0
  403d46:	bf08      	it	eq
  403d48:	4611      	moveq	r1, r2
  403d4a:	4622      	mov	r2, r4
  403d4c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  403d50:	a901      	add	r1, sp, #4
  403d52:	47a0      	blx	r4
  403d54:	e7e9      	b.n	403d2a <_wcrtomb_r+0x1e>
  403d56:	bf00      	nop
  403d58:	20400010 	.word	0x20400010
  403d5c:	20400444 	.word	0x20400444

00403d60 <__ascii_wctomb>:
  403d60:	b121      	cbz	r1, 403d6c <__ascii_wctomb+0xc>
  403d62:	2aff      	cmp	r2, #255	; 0xff
  403d64:	d804      	bhi.n	403d70 <__ascii_wctomb+0x10>
  403d66:	700a      	strb	r2, [r1, #0]
  403d68:	2001      	movs	r0, #1
  403d6a:	4770      	bx	lr
  403d6c:	4608      	mov	r0, r1
  403d6e:	4770      	bx	lr
  403d70:	238a      	movs	r3, #138	; 0x8a
  403d72:	6003      	str	r3, [r0, #0]
  403d74:	f04f 30ff 	mov.w	r0, #4294967295
  403d78:	4770      	bx	lr
  403d7a:	bf00      	nop

00403d7c <_write_r>:
  403d7c:	b570      	push	{r4, r5, r6, lr}
  403d7e:	460d      	mov	r5, r1
  403d80:	4c08      	ldr	r4, [pc, #32]	; (403da4 <_write_r+0x28>)
  403d82:	4611      	mov	r1, r2
  403d84:	4606      	mov	r6, r0
  403d86:	461a      	mov	r2, r3
  403d88:	4628      	mov	r0, r5
  403d8a:	2300      	movs	r3, #0
  403d8c:	6023      	str	r3, [r4, #0]
  403d8e:	f7fc fbd7 	bl	400540 <_write>
  403d92:	1c43      	adds	r3, r0, #1
  403d94:	d000      	beq.n	403d98 <_write_r+0x1c>
  403d96:	bd70      	pop	{r4, r5, r6, pc}
  403d98:	6823      	ldr	r3, [r4, #0]
  403d9a:	2b00      	cmp	r3, #0
  403d9c:	d0fb      	beq.n	403d96 <_write_r+0x1a>
  403d9e:	6033      	str	r3, [r6, #0]
  403da0:	bd70      	pop	{r4, r5, r6, pc}
  403da2:	bf00      	nop
  403da4:	204012fc 	.word	0x204012fc

00403da8 <__register_exitproc>:
  403da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403dac:	4d2c      	ldr	r5, [pc, #176]	; (403e60 <__register_exitproc+0xb8>)
  403dae:	4606      	mov	r6, r0
  403db0:	6828      	ldr	r0, [r5, #0]
  403db2:	4698      	mov	r8, r3
  403db4:	460f      	mov	r7, r1
  403db6:	4691      	mov	r9, r2
  403db8:	f7ff f832 	bl	402e20 <__retarget_lock_acquire_recursive>
  403dbc:	4b29      	ldr	r3, [pc, #164]	; (403e64 <__register_exitproc+0xbc>)
  403dbe:	681c      	ldr	r4, [r3, #0]
  403dc0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  403dc4:	2b00      	cmp	r3, #0
  403dc6:	d03e      	beq.n	403e46 <__register_exitproc+0x9e>
  403dc8:	685a      	ldr	r2, [r3, #4]
  403dca:	2a1f      	cmp	r2, #31
  403dcc:	dc1c      	bgt.n	403e08 <__register_exitproc+0x60>
  403dce:	f102 0e01 	add.w	lr, r2, #1
  403dd2:	b176      	cbz	r6, 403df2 <__register_exitproc+0x4a>
  403dd4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  403dd8:	2401      	movs	r4, #1
  403dda:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  403dde:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  403de2:	4094      	lsls	r4, r2
  403de4:	4320      	orrs	r0, r4
  403de6:	2e02      	cmp	r6, #2
  403de8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  403dec:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  403df0:	d023      	beq.n	403e3a <__register_exitproc+0x92>
  403df2:	3202      	adds	r2, #2
  403df4:	f8c3 e004 	str.w	lr, [r3, #4]
  403df8:	6828      	ldr	r0, [r5, #0]
  403dfa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  403dfe:	f7ff f811 	bl	402e24 <__retarget_lock_release_recursive>
  403e02:	2000      	movs	r0, #0
  403e04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403e08:	4b17      	ldr	r3, [pc, #92]	; (403e68 <__register_exitproc+0xc0>)
  403e0a:	b30b      	cbz	r3, 403e50 <__register_exitproc+0xa8>
  403e0c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403e10:	f3af 8000 	nop.w
  403e14:	4603      	mov	r3, r0
  403e16:	b1d8      	cbz	r0, 403e50 <__register_exitproc+0xa8>
  403e18:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  403e1c:	6002      	str	r2, [r0, #0]
  403e1e:	2100      	movs	r1, #0
  403e20:	6041      	str	r1, [r0, #4]
  403e22:	460a      	mov	r2, r1
  403e24:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  403e28:	f04f 0e01 	mov.w	lr, #1
  403e2c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  403e30:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  403e34:	2e00      	cmp	r6, #0
  403e36:	d0dc      	beq.n	403df2 <__register_exitproc+0x4a>
  403e38:	e7cc      	b.n	403dd4 <__register_exitproc+0x2c>
  403e3a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  403e3e:	430c      	orrs	r4, r1
  403e40:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  403e44:	e7d5      	b.n	403df2 <__register_exitproc+0x4a>
  403e46:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  403e4a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  403e4e:	e7bb      	b.n	403dc8 <__register_exitproc+0x20>
  403e50:	6828      	ldr	r0, [r5, #0]
  403e52:	f7fe ffe7 	bl	402e24 <__retarget_lock_release_recursive>
  403e56:	f04f 30ff 	mov.w	r0, #4294967295
  403e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403e5e:	bf00      	nop
  403e60:	20400440 	.word	0x20400440
  403e64:	00404398 	.word	0x00404398
  403e68:	00000000 	.word	0x00000000

00403e6c <_close_r>:
  403e6c:	b538      	push	{r3, r4, r5, lr}
  403e6e:	4c07      	ldr	r4, [pc, #28]	; (403e8c <_close_r+0x20>)
  403e70:	2300      	movs	r3, #0
  403e72:	4605      	mov	r5, r0
  403e74:	4608      	mov	r0, r1
  403e76:	6023      	str	r3, [r4, #0]
  403e78:	f7fd fa68 	bl	40134c <_close>
  403e7c:	1c43      	adds	r3, r0, #1
  403e7e:	d000      	beq.n	403e82 <_close_r+0x16>
  403e80:	bd38      	pop	{r3, r4, r5, pc}
  403e82:	6823      	ldr	r3, [r4, #0]
  403e84:	2b00      	cmp	r3, #0
  403e86:	d0fb      	beq.n	403e80 <_close_r+0x14>
  403e88:	602b      	str	r3, [r5, #0]
  403e8a:	bd38      	pop	{r3, r4, r5, pc}
  403e8c:	204012fc 	.word	0x204012fc

00403e90 <_fclose_r>:
  403e90:	b570      	push	{r4, r5, r6, lr}
  403e92:	b159      	cbz	r1, 403eac <_fclose_r+0x1c>
  403e94:	4605      	mov	r5, r0
  403e96:	460c      	mov	r4, r1
  403e98:	b110      	cbz	r0, 403ea0 <_fclose_r+0x10>
  403e9a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403e9c:	2b00      	cmp	r3, #0
  403e9e:	d03c      	beq.n	403f1a <_fclose_r+0x8a>
  403ea0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403ea2:	07d8      	lsls	r0, r3, #31
  403ea4:	d505      	bpl.n	403eb2 <_fclose_r+0x22>
  403ea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403eaa:	b92b      	cbnz	r3, 403eb8 <_fclose_r+0x28>
  403eac:	2600      	movs	r6, #0
  403eae:	4630      	mov	r0, r6
  403eb0:	bd70      	pop	{r4, r5, r6, pc}
  403eb2:	89a3      	ldrh	r3, [r4, #12]
  403eb4:	0599      	lsls	r1, r3, #22
  403eb6:	d53c      	bpl.n	403f32 <_fclose_r+0xa2>
  403eb8:	4621      	mov	r1, r4
  403eba:	4628      	mov	r0, r5
  403ebc:	f7fe faf8 	bl	4024b0 <__sflush_r>
  403ec0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403ec2:	4606      	mov	r6, r0
  403ec4:	b133      	cbz	r3, 403ed4 <_fclose_r+0x44>
  403ec6:	69e1      	ldr	r1, [r4, #28]
  403ec8:	4628      	mov	r0, r5
  403eca:	4798      	blx	r3
  403ecc:	2800      	cmp	r0, #0
  403ece:	bfb8      	it	lt
  403ed0:	f04f 36ff 	movlt.w	r6, #4294967295
  403ed4:	89a3      	ldrh	r3, [r4, #12]
  403ed6:	061a      	lsls	r2, r3, #24
  403ed8:	d422      	bmi.n	403f20 <_fclose_r+0x90>
  403eda:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403edc:	b141      	cbz	r1, 403ef0 <_fclose_r+0x60>
  403ede:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403ee2:	4299      	cmp	r1, r3
  403ee4:	d002      	beq.n	403eec <_fclose_r+0x5c>
  403ee6:	4628      	mov	r0, r5
  403ee8:	f7fe fd00 	bl	4028ec <_free_r>
  403eec:	2300      	movs	r3, #0
  403eee:	6323      	str	r3, [r4, #48]	; 0x30
  403ef0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  403ef2:	b121      	cbz	r1, 403efe <_fclose_r+0x6e>
  403ef4:	4628      	mov	r0, r5
  403ef6:	f7fe fcf9 	bl	4028ec <_free_r>
  403efa:	2300      	movs	r3, #0
  403efc:	6463      	str	r3, [r4, #68]	; 0x44
  403efe:	f7fe fbfb 	bl	4026f8 <__sfp_lock_acquire>
  403f02:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403f04:	2200      	movs	r2, #0
  403f06:	07db      	lsls	r3, r3, #31
  403f08:	81a2      	strh	r2, [r4, #12]
  403f0a:	d50e      	bpl.n	403f2a <_fclose_r+0x9a>
  403f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403f0e:	f7fe ff85 	bl	402e1c <__retarget_lock_close_recursive>
  403f12:	f7fe fbf7 	bl	402704 <__sfp_lock_release>
  403f16:	4630      	mov	r0, r6
  403f18:	bd70      	pop	{r4, r5, r6, pc}
  403f1a:	f7fe fbc1 	bl	4026a0 <__sinit>
  403f1e:	e7bf      	b.n	403ea0 <_fclose_r+0x10>
  403f20:	6921      	ldr	r1, [r4, #16]
  403f22:	4628      	mov	r0, r5
  403f24:	f7fe fce2 	bl	4028ec <_free_r>
  403f28:	e7d7      	b.n	403eda <_fclose_r+0x4a>
  403f2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403f2c:	f7fe ff7a 	bl	402e24 <__retarget_lock_release_recursive>
  403f30:	e7ec      	b.n	403f0c <_fclose_r+0x7c>
  403f32:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403f34:	f7fe ff74 	bl	402e20 <__retarget_lock_acquire_recursive>
  403f38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403f3c:	2b00      	cmp	r3, #0
  403f3e:	d1bb      	bne.n	403eb8 <_fclose_r+0x28>
  403f40:	6e66      	ldr	r6, [r4, #100]	; 0x64
  403f42:	f016 0601 	ands.w	r6, r6, #1
  403f46:	d1b1      	bne.n	403eac <_fclose_r+0x1c>
  403f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403f4a:	f7fe ff6b 	bl	402e24 <__retarget_lock_release_recursive>
  403f4e:	4630      	mov	r0, r6
  403f50:	bd70      	pop	{r4, r5, r6, pc}
  403f52:	bf00      	nop

00403f54 <_fstat_r>:
  403f54:	b538      	push	{r3, r4, r5, lr}
  403f56:	460b      	mov	r3, r1
  403f58:	4c07      	ldr	r4, [pc, #28]	; (403f78 <_fstat_r+0x24>)
  403f5a:	4605      	mov	r5, r0
  403f5c:	4611      	mov	r1, r2
  403f5e:	4618      	mov	r0, r3
  403f60:	2300      	movs	r3, #0
  403f62:	6023      	str	r3, [r4, #0]
  403f64:	f7fd f9f5 	bl	401352 <_fstat>
  403f68:	1c43      	adds	r3, r0, #1
  403f6a:	d000      	beq.n	403f6e <_fstat_r+0x1a>
  403f6c:	bd38      	pop	{r3, r4, r5, pc}
  403f6e:	6823      	ldr	r3, [r4, #0]
  403f70:	2b00      	cmp	r3, #0
  403f72:	d0fb      	beq.n	403f6c <_fstat_r+0x18>
  403f74:	602b      	str	r3, [r5, #0]
  403f76:	bd38      	pop	{r3, r4, r5, pc}
  403f78:	204012fc 	.word	0x204012fc

00403f7c <_isatty_r>:
  403f7c:	b538      	push	{r3, r4, r5, lr}
  403f7e:	4c07      	ldr	r4, [pc, #28]	; (403f9c <_isatty_r+0x20>)
  403f80:	2300      	movs	r3, #0
  403f82:	4605      	mov	r5, r0
  403f84:	4608      	mov	r0, r1
  403f86:	6023      	str	r3, [r4, #0]
  403f88:	f7fd f9e8 	bl	40135c <_isatty>
  403f8c:	1c43      	adds	r3, r0, #1
  403f8e:	d000      	beq.n	403f92 <_isatty_r+0x16>
  403f90:	bd38      	pop	{r3, r4, r5, pc}
  403f92:	6823      	ldr	r3, [r4, #0]
  403f94:	2b00      	cmp	r3, #0
  403f96:	d0fb      	beq.n	403f90 <_isatty_r+0x14>
  403f98:	602b      	str	r3, [r5, #0]
  403f9a:	bd38      	pop	{r3, r4, r5, pc}
  403f9c:	204012fc 	.word	0x204012fc

00403fa0 <_lseek_r>:
  403fa0:	b570      	push	{r4, r5, r6, lr}
  403fa2:	460d      	mov	r5, r1
  403fa4:	4c08      	ldr	r4, [pc, #32]	; (403fc8 <_lseek_r+0x28>)
  403fa6:	4611      	mov	r1, r2
  403fa8:	4606      	mov	r6, r0
  403faa:	461a      	mov	r2, r3
  403fac:	4628      	mov	r0, r5
  403fae:	2300      	movs	r3, #0
  403fb0:	6023      	str	r3, [r4, #0]
  403fb2:	f7fd f9d5 	bl	401360 <_lseek>
  403fb6:	1c43      	adds	r3, r0, #1
  403fb8:	d000      	beq.n	403fbc <_lseek_r+0x1c>
  403fba:	bd70      	pop	{r4, r5, r6, pc}
  403fbc:	6823      	ldr	r3, [r4, #0]
  403fbe:	2b00      	cmp	r3, #0
  403fc0:	d0fb      	beq.n	403fba <_lseek_r+0x1a>
  403fc2:	6033      	str	r3, [r6, #0]
  403fc4:	bd70      	pop	{r4, r5, r6, pc}
  403fc6:	bf00      	nop
  403fc8:	204012fc 	.word	0x204012fc

00403fcc <_read_r>:
  403fcc:	b570      	push	{r4, r5, r6, lr}
  403fce:	460d      	mov	r5, r1
  403fd0:	4c08      	ldr	r4, [pc, #32]	; (403ff4 <_read_r+0x28>)
  403fd2:	4611      	mov	r1, r2
  403fd4:	4606      	mov	r6, r0
  403fd6:	461a      	mov	r2, r3
  403fd8:	4628      	mov	r0, r5
  403fda:	2300      	movs	r3, #0
  403fdc:	6023      	str	r3, [r4, #0]
  403fde:	f7fc fa91 	bl	400504 <_read>
  403fe2:	1c43      	adds	r3, r0, #1
  403fe4:	d000      	beq.n	403fe8 <_read_r+0x1c>
  403fe6:	bd70      	pop	{r4, r5, r6, pc}
  403fe8:	6823      	ldr	r3, [r4, #0]
  403fea:	2b00      	cmp	r3, #0
  403fec:	d0fb      	beq.n	403fe6 <_read_r+0x1a>
  403fee:	6033      	str	r3, [r6, #0]
  403ff0:	bd70      	pop	{r4, r5, r6, pc}
  403ff2:	bf00      	nop
  403ff4:	204012fc 	.word	0x204012fc

00403ff8 <__aeabi_uldivmod>:
  403ff8:	b953      	cbnz	r3, 404010 <__aeabi_uldivmod+0x18>
  403ffa:	b94a      	cbnz	r2, 404010 <__aeabi_uldivmod+0x18>
  403ffc:	2900      	cmp	r1, #0
  403ffe:	bf08      	it	eq
  404000:	2800      	cmpeq	r0, #0
  404002:	bf1c      	itt	ne
  404004:	f04f 31ff 	movne.w	r1, #4294967295
  404008:	f04f 30ff 	movne.w	r0, #4294967295
  40400c:	f000 b97a 	b.w	404304 <__aeabi_idiv0>
  404010:	f1ad 0c08 	sub.w	ip, sp, #8
  404014:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  404018:	f000 f806 	bl	404028 <__udivmoddi4>
  40401c:	f8dd e004 	ldr.w	lr, [sp, #4]
  404020:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404024:	b004      	add	sp, #16
  404026:	4770      	bx	lr

00404028 <__udivmoddi4>:
  404028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40402c:	468c      	mov	ip, r1
  40402e:	460d      	mov	r5, r1
  404030:	4604      	mov	r4, r0
  404032:	9e08      	ldr	r6, [sp, #32]
  404034:	2b00      	cmp	r3, #0
  404036:	d151      	bne.n	4040dc <__udivmoddi4+0xb4>
  404038:	428a      	cmp	r2, r1
  40403a:	4617      	mov	r7, r2
  40403c:	d96d      	bls.n	40411a <__udivmoddi4+0xf2>
  40403e:	fab2 fe82 	clz	lr, r2
  404042:	f1be 0f00 	cmp.w	lr, #0
  404046:	d00b      	beq.n	404060 <__udivmoddi4+0x38>
  404048:	f1ce 0c20 	rsb	ip, lr, #32
  40404c:	fa01 f50e 	lsl.w	r5, r1, lr
  404050:	fa20 fc0c 	lsr.w	ip, r0, ip
  404054:	fa02 f70e 	lsl.w	r7, r2, lr
  404058:	ea4c 0c05 	orr.w	ip, ip, r5
  40405c:	fa00 f40e 	lsl.w	r4, r0, lr
  404060:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  404064:	0c25      	lsrs	r5, r4, #16
  404066:	fbbc f8fa 	udiv	r8, ip, sl
  40406a:	fa1f f987 	uxth.w	r9, r7
  40406e:	fb0a cc18 	mls	ip, sl, r8, ip
  404072:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  404076:	fb08 f309 	mul.w	r3, r8, r9
  40407a:	42ab      	cmp	r3, r5
  40407c:	d90a      	bls.n	404094 <__udivmoddi4+0x6c>
  40407e:	19ed      	adds	r5, r5, r7
  404080:	f108 32ff 	add.w	r2, r8, #4294967295
  404084:	f080 8123 	bcs.w	4042ce <__udivmoddi4+0x2a6>
  404088:	42ab      	cmp	r3, r5
  40408a:	f240 8120 	bls.w	4042ce <__udivmoddi4+0x2a6>
  40408e:	f1a8 0802 	sub.w	r8, r8, #2
  404092:	443d      	add	r5, r7
  404094:	1aed      	subs	r5, r5, r3
  404096:	b2a4      	uxth	r4, r4
  404098:	fbb5 f0fa 	udiv	r0, r5, sl
  40409c:	fb0a 5510 	mls	r5, sl, r0, r5
  4040a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4040a4:	fb00 f909 	mul.w	r9, r0, r9
  4040a8:	45a1      	cmp	r9, r4
  4040aa:	d909      	bls.n	4040c0 <__udivmoddi4+0x98>
  4040ac:	19e4      	adds	r4, r4, r7
  4040ae:	f100 33ff 	add.w	r3, r0, #4294967295
  4040b2:	f080 810a 	bcs.w	4042ca <__udivmoddi4+0x2a2>
  4040b6:	45a1      	cmp	r9, r4
  4040b8:	f240 8107 	bls.w	4042ca <__udivmoddi4+0x2a2>
  4040bc:	3802      	subs	r0, #2
  4040be:	443c      	add	r4, r7
  4040c0:	eba4 0409 	sub.w	r4, r4, r9
  4040c4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4040c8:	2100      	movs	r1, #0
  4040ca:	2e00      	cmp	r6, #0
  4040cc:	d061      	beq.n	404192 <__udivmoddi4+0x16a>
  4040ce:	fa24 f40e 	lsr.w	r4, r4, lr
  4040d2:	2300      	movs	r3, #0
  4040d4:	6034      	str	r4, [r6, #0]
  4040d6:	6073      	str	r3, [r6, #4]
  4040d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4040dc:	428b      	cmp	r3, r1
  4040de:	d907      	bls.n	4040f0 <__udivmoddi4+0xc8>
  4040e0:	2e00      	cmp	r6, #0
  4040e2:	d054      	beq.n	40418e <__udivmoddi4+0x166>
  4040e4:	2100      	movs	r1, #0
  4040e6:	e886 0021 	stmia.w	r6, {r0, r5}
  4040ea:	4608      	mov	r0, r1
  4040ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4040f0:	fab3 f183 	clz	r1, r3
  4040f4:	2900      	cmp	r1, #0
  4040f6:	f040 808e 	bne.w	404216 <__udivmoddi4+0x1ee>
  4040fa:	42ab      	cmp	r3, r5
  4040fc:	d302      	bcc.n	404104 <__udivmoddi4+0xdc>
  4040fe:	4282      	cmp	r2, r0
  404100:	f200 80fa 	bhi.w	4042f8 <__udivmoddi4+0x2d0>
  404104:	1a84      	subs	r4, r0, r2
  404106:	eb65 0503 	sbc.w	r5, r5, r3
  40410a:	2001      	movs	r0, #1
  40410c:	46ac      	mov	ip, r5
  40410e:	2e00      	cmp	r6, #0
  404110:	d03f      	beq.n	404192 <__udivmoddi4+0x16a>
  404112:	e886 1010 	stmia.w	r6, {r4, ip}
  404116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40411a:	b912      	cbnz	r2, 404122 <__udivmoddi4+0xfa>
  40411c:	2701      	movs	r7, #1
  40411e:	fbb7 f7f2 	udiv	r7, r7, r2
  404122:	fab7 fe87 	clz	lr, r7
  404126:	f1be 0f00 	cmp.w	lr, #0
  40412a:	d134      	bne.n	404196 <__udivmoddi4+0x16e>
  40412c:	1beb      	subs	r3, r5, r7
  40412e:	0c3a      	lsrs	r2, r7, #16
  404130:	fa1f fc87 	uxth.w	ip, r7
  404134:	2101      	movs	r1, #1
  404136:	fbb3 f8f2 	udiv	r8, r3, r2
  40413a:	0c25      	lsrs	r5, r4, #16
  40413c:	fb02 3318 	mls	r3, r2, r8, r3
  404140:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  404144:	fb0c f308 	mul.w	r3, ip, r8
  404148:	42ab      	cmp	r3, r5
  40414a:	d907      	bls.n	40415c <__udivmoddi4+0x134>
  40414c:	19ed      	adds	r5, r5, r7
  40414e:	f108 30ff 	add.w	r0, r8, #4294967295
  404152:	d202      	bcs.n	40415a <__udivmoddi4+0x132>
  404154:	42ab      	cmp	r3, r5
  404156:	f200 80d1 	bhi.w	4042fc <__udivmoddi4+0x2d4>
  40415a:	4680      	mov	r8, r0
  40415c:	1aed      	subs	r5, r5, r3
  40415e:	b2a3      	uxth	r3, r4
  404160:	fbb5 f0f2 	udiv	r0, r5, r2
  404164:	fb02 5510 	mls	r5, r2, r0, r5
  404168:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40416c:	fb0c fc00 	mul.w	ip, ip, r0
  404170:	45a4      	cmp	ip, r4
  404172:	d907      	bls.n	404184 <__udivmoddi4+0x15c>
  404174:	19e4      	adds	r4, r4, r7
  404176:	f100 33ff 	add.w	r3, r0, #4294967295
  40417a:	d202      	bcs.n	404182 <__udivmoddi4+0x15a>
  40417c:	45a4      	cmp	ip, r4
  40417e:	f200 80b8 	bhi.w	4042f2 <__udivmoddi4+0x2ca>
  404182:	4618      	mov	r0, r3
  404184:	eba4 040c 	sub.w	r4, r4, ip
  404188:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40418c:	e79d      	b.n	4040ca <__udivmoddi4+0xa2>
  40418e:	4631      	mov	r1, r6
  404190:	4630      	mov	r0, r6
  404192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404196:	f1ce 0420 	rsb	r4, lr, #32
  40419a:	fa05 f30e 	lsl.w	r3, r5, lr
  40419e:	fa07 f70e 	lsl.w	r7, r7, lr
  4041a2:	fa20 f804 	lsr.w	r8, r0, r4
  4041a6:	0c3a      	lsrs	r2, r7, #16
  4041a8:	fa25 f404 	lsr.w	r4, r5, r4
  4041ac:	ea48 0803 	orr.w	r8, r8, r3
  4041b0:	fbb4 f1f2 	udiv	r1, r4, r2
  4041b4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4041b8:	fb02 4411 	mls	r4, r2, r1, r4
  4041bc:	fa1f fc87 	uxth.w	ip, r7
  4041c0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4041c4:	fb01 f30c 	mul.w	r3, r1, ip
  4041c8:	42ab      	cmp	r3, r5
  4041ca:	fa00 f40e 	lsl.w	r4, r0, lr
  4041ce:	d909      	bls.n	4041e4 <__udivmoddi4+0x1bc>
  4041d0:	19ed      	adds	r5, r5, r7
  4041d2:	f101 30ff 	add.w	r0, r1, #4294967295
  4041d6:	f080 808a 	bcs.w	4042ee <__udivmoddi4+0x2c6>
  4041da:	42ab      	cmp	r3, r5
  4041dc:	f240 8087 	bls.w	4042ee <__udivmoddi4+0x2c6>
  4041e0:	3902      	subs	r1, #2
  4041e2:	443d      	add	r5, r7
  4041e4:	1aeb      	subs	r3, r5, r3
  4041e6:	fa1f f588 	uxth.w	r5, r8
  4041ea:	fbb3 f0f2 	udiv	r0, r3, r2
  4041ee:	fb02 3310 	mls	r3, r2, r0, r3
  4041f2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4041f6:	fb00 f30c 	mul.w	r3, r0, ip
  4041fa:	42ab      	cmp	r3, r5
  4041fc:	d907      	bls.n	40420e <__udivmoddi4+0x1e6>
  4041fe:	19ed      	adds	r5, r5, r7
  404200:	f100 38ff 	add.w	r8, r0, #4294967295
  404204:	d26f      	bcs.n	4042e6 <__udivmoddi4+0x2be>
  404206:	42ab      	cmp	r3, r5
  404208:	d96d      	bls.n	4042e6 <__udivmoddi4+0x2be>
  40420a:	3802      	subs	r0, #2
  40420c:	443d      	add	r5, r7
  40420e:	1aeb      	subs	r3, r5, r3
  404210:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  404214:	e78f      	b.n	404136 <__udivmoddi4+0x10e>
  404216:	f1c1 0720 	rsb	r7, r1, #32
  40421a:	fa22 f807 	lsr.w	r8, r2, r7
  40421e:	408b      	lsls	r3, r1
  404220:	fa05 f401 	lsl.w	r4, r5, r1
  404224:	ea48 0303 	orr.w	r3, r8, r3
  404228:	fa20 fe07 	lsr.w	lr, r0, r7
  40422c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  404230:	40fd      	lsrs	r5, r7
  404232:	ea4e 0e04 	orr.w	lr, lr, r4
  404236:	fbb5 f9fc 	udiv	r9, r5, ip
  40423a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40423e:	fb0c 5519 	mls	r5, ip, r9, r5
  404242:	fa1f f883 	uxth.w	r8, r3
  404246:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40424a:	fb09 f408 	mul.w	r4, r9, r8
  40424e:	42ac      	cmp	r4, r5
  404250:	fa02 f201 	lsl.w	r2, r2, r1
  404254:	fa00 fa01 	lsl.w	sl, r0, r1
  404258:	d908      	bls.n	40426c <__udivmoddi4+0x244>
  40425a:	18ed      	adds	r5, r5, r3
  40425c:	f109 30ff 	add.w	r0, r9, #4294967295
  404260:	d243      	bcs.n	4042ea <__udivmoddi4+0x2c2>
  404262:	42ac      	cmp	r4, r5
  404264:	d941      	bls.n	4042ea <__udivmoddi4+0x2c2>
  404266:	f1a9 0902 	sub.w	r9, r9, #2
  40426a:	441d      	add	r5, r3
  40426c:	1b2d      	subs	r5, r5, r4
  40426e:	fa1f fe8e 	uxth.w	lr, lr
  404272:	fbb5 f0fc 	udiv	r0, r5, ip
  404276:	fb0c 5510 	mls	r5, ip, r0, r5
  40427a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40427e:	fb00 f808 	mul.w	r8, r0, r8
  404282:	45a0      	cmp	r8, r4
  404284:	d907      	bls.n	404296 <__udivmoddi4+0x26e>
  404286:	18e4      	adds	r4, r4, r3
  404288:	f100 35ff 	add.w	r5, r0, #4294967295
  40428c:	d229      	bcs.n	4042e2 <__udivmoddi4+0x2ba>
  40428e:	45a0      	cmp	r8, r4
  404290:	d927      	bls.n	4042e2 <__udivmoddi4+0x2ba>
  404292:	3802      	subs	r0, #2
  404294:	441c      	add	r4, r3
  404296:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40429a:	eba4 0408 	sub.w	r4, r4, r8
  40429e:	fba0 8902 	umull	r8, r9, r0, r2
  4042a2:	454c      	cmp	r4, r9
  4042a4:	46c6      	mov	lr, r8
  4042a6:	464d      	mov	r5, r9
  4042a8:	d315      	bcc.n	4042d6 <__udivmoddi4+0x2ae>
  4042aa:	d012      	beq.n	4042d2 <__udivmoddi4+0x2aa>
  4042ac:	b156      	cbz	r6, 4042c4 <__udivmoddi4+0x29c>
  4042ae:	ebba 030e 	subs.w	r3, sl, lr
  4042b2:	eb64 0405 	sbc.w	r4, r4, r5
  4042b6:	fa04 f707 	lsl.w	r7, r4, r7
  4042ba:	40cb      	lsrs	r3, r1
  4042bc:	431f      	orrs	r7, r3
  4042be:	40cc      	lsrs	r4, r1
  4042c0:	6037      	str	r7, [r6, #0]
  4042c2:	6074      	str	r4, [r6, #4]
  4042c4:	2100      	movs	r1, #0
  4042c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4042ca:	4618      	mov	r0, r3
  4042cc:	e6f8      	b.n	4040c0 <__udivmoddi4+0x98>
  4042ce:	4690      	mov	r8, r2
  4042d0:	e6e0      	b.n	404094 <__udivmoddi4+0x6c>
  4042d2:	45c2      	cmp	sl, r8
  4042d4:	d2ea      	bcs.n	4042ac <__udivmoddi4+0x284>
  4042d6:	ebb8 0e02 	subs.w	lr, r8, r2
  4042da:	eb69 0503 	sbc.w	r5, r9, r3
  4042de:	3801      	subs	r0, #1
  4042e0:	e7e4      	b.n	4042ac <__udivmoddi4+0x284>
  4042e2:	4628      	mov	r0, r5
  4042e4:	e7d7      	b.n	404296 <__udivmoddi4+0x26e>
  4042e6:	4640      	mov	r0, r8
  4042e8:	e791      	b.n	40420e <__udivmoddi4+0x1e6>
  4042ea:	4681      	mov	r9, r0
  4042ec:	e7be      	b.n	40426c <__udivmoddi4+0x244>
  4042ee:	4601      	mov	r1, r0
  4042f0:	e778      	b.n	4041e4 <__udivmoddi4+0x1bc>
  4042f2:	3802      	subs	r0, #2
  4042f4:	443c      	add	r4, r7
  4042f6:	e745      	b.n	404184 <__udivmoddi4+0x15c>
  4042f8:	4608      	mov	r0, r1
  4042fa:	e708      	b.n	40410e <__udivmoddi4+0xe6>
  4042fc:	f1a8 0802 	sub.w	r8, r8, #2
  404300:	443d      	add	r5, r7
  404302:	e72b      	b.n	40415c <__udivmoddi4+0x134>

00404304 <__aeabi_idiv0>:
  404304:	4770      	bx	lr
  404306:	bf00      	nop
  404308:	39384d57 	.word	0x39384d57
  40430c:	6e203430 	.word	0x6e203430
  404310:	6620746f 	.word	0x6620746f
  404314:	646e756f 	.word	0x646e756f
  404318:	000d0a21 	.word	0x000d0a21

0040431c <SIN_WAVE>:
  40431c:	922c7fff b50ea3fa d3a9c50e eb84e091     ..,.............
  40432c:	fab4f44a fffefea1 faf5fec2 ec02f4aa     J...............
  40433c:	d459e129 b5e2c5d3 9313a4da 6eb980e8     ).Y............n
  40434c:	4bc55ce4 2d073bb5 14f92007 058e0c17     .\.K.;.-. ......
  40435c:	00020180 04c9011c 137f0af4 2af61e3d     ............=..*
  40436c:	49493968 6c055a45 092d452d 39384d57     h9IIEZ.l-E-.WM89
  40437c:	69203430 6974696e 7a696c61 6f697461     04 initializatio
  40438c:	6166206e 64656c69 00000d2e              n failed....

00404398 <_global_impure_ptr>:
  404398:	20400018 33323130 37363534 42413938     ..@ 0123456789AB
  4043a8:	46454443 00000000 33323130 37363534     CDEF....01234567
  4043b8:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  4043c8:	0000296c                                l)..

004043cc <blanks.7217>:
  4043cc:	20202020 20202020 20202020 20202020                     

004043dc <zeroes.7218>:
  4043dc:	30303030 30303030 30303030 30303030     0000000000000000
  4043ec:	00000043 49534f50 00000058 0000002e     C...POSIX.......

004043fc <_ctype_>:
  4043fc:	20202000 20202020 28282020 20282828     .         ((((( 
  40440c:	20202020 20202020 20202020 20202020                     
  40441c:	10108820 10101010 10101010 10101010      ...............
  40442c:	04040410 04040404 10040404 10101010     ................
  40443c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40444c:	01010101 01010101 01010101 10101010     ................
  40445c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40446c:	02020202 02020202 02020202 10101010     ................
  40447c:	00000020 00000000 00000000 00000000      ...............
	...

00404500 <_init>:
  404500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404502:	bf00      	nop
  404504:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404506:	bc08      	pop	{r3}
  404508:	469e      	mov	lr, r3
  40450a:	4770      	bx	lr

0040450c <__init_array_start>:
  40450c:	00402491 	.word	0x00402491

00404510 <__frame_dummy_init_array_entry>:
  404510:	00400165                                e.@.

00404514 <_fini>:
  404514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404516:	bf00      	nop
  404518:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40451a:	bc08      	pop	{r3}
  40451c:	469e      	mov	lr, r3
  40451e:	4770      	bx	lr

00404520 <__fini_array_start>:
  404520:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <_impure_ptr>:
20400010:	0018 2040 0000 0000                         ..@ ....

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400440 <__atexit_recursive_mutex>:
20400440:	12d8 2040                                   ..@ 

20400444 <__global_locale>:
20400444:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400464:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400484:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400504:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400524:	3d61 0040 3479 0040 0000 0000 43fc 0040     a=@.y4@......C@.
20400534:	43f8 0040 43ac 0040 43ac 0040 43ac 0040     .C@..C@..C@..C@.
20400544:	43ac 0040 43ac 0040 43ac 0040 43ac 0040     .C@..C@..C@..C@.
20400554:	43ac 0040 43ac 0040 ffff ffff ffff ffff     .C@..C@.........
20400564:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040058c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005b0 <__malloc_av_>:
	...
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 
204008d8:	08d0 2040 08d0 2040 08d8 2040 08d8 2040     ..@ ..@ ..@ ..@ 
204008e8:	08e0 2040 08e0 2040 08e8 2040 08e8 2040     ..@ ..@ ..@ ..@ 
204008f8:	08f0 2040 08f0 2040 08f8 2040 08f8 2040     ..@ ..@ ..@ ..@ 
20400908:	0900 2040 0900 2040 0908 2040 0908 2040     ..@ ..@ ..@ ..@ 
20400918:	0910 2040 0910 2040 0918 2040 0918 2040     ..@ ..@ ..@ ..@ 
20400928:	0920 2040 0920 2040 0928 2040 0928 2040      .@  .@ (.@ (.@ 
20400938:	0930 2040 0930 2040 0938 2040 0938 2040     0.@ 0.@ 8.@ 8.@ 
20400948:	0940 2040 0940 2040 0948 2040 0948 2040     @.@ @.@ H.@ H.@ 
20400958:	0950 2040 0950 2040 0958 2040 0958 2040     P.@ P.@ X.@ X.@ 
20400968:	0960 2040 0960 2040 0968 2040 0968 2040     `.@ `.@ h.@ h.@ 
20400978:	0970 2040 0970 2040 0978 2040 0978 2040     p.@ p.@ x.@ x.@ 
20400988:	0980 2040 0980 2040 0988 2040 0988 2040     ..@ ..@ ..@ ..@ 
20400998:	0990 2040 0990 2040 0998 2040 0998 2040     ..@ ..@ ..@ ..@ 
204009a8:	09a0 2040 09a0 2040 09a8 2040 09a8 2040     ..@ ..@ ..@ ..@ 

204009b8 <__malloc_sbrk_base>:
204009b8:	ffff ffff                                   ....

204009bc <__malloc_trim_threshold>:
204009bc:	0000 0002                                   ....
