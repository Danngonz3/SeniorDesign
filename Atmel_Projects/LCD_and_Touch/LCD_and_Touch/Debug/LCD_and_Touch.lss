
LCD_and_Touch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003394  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000864  20400000  00403394  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000003a0  20400864  00403bf8  00020864  2**2
                  ALLOC
  3 .stack        00002004  20400c04  00403f98  00020864  2**0
                  ALLOC
  4 .heap         00000200  20402c08  00405f9c  00020864  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020864  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020892  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001c9af  00000000  00000000  000208eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003e34  00000000  00000000  0003d29a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000878a  00000000  00000000  000410ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a98  00000000  00000000  00049858  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000bf0  00000000  00000000  0004a2f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00022f41  00000000  00000000  0004aee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000109b2  00000000  00000000  0006de21  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00093638  00000000  00000000  0007e7d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001c80  00000000  00000000  00111e0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	08 2c 40 20 bd 1a 40 00 b9 1a 40 00 b9 1a 40 00     .,@ ..@...@...@.
  400010:	b9 1a 40 00 b9 1a 40 00 b9 1a 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	b9 1a 40 00 b9 1a 40 00 00 00 00 00 b9 1a 40 00     ..@...@.......@.
  40003c:	b9 1a 40 00 b9 1a 40 00 b9 1a 40 00 b9 1a 40 00     ..@...@...@...@.
  40004c:	b9 1a 40 00 b9 1a 40 00 b9 1a 40 00 b9 1a 40 00     ..@...@...@...@.
  40005c:	b9 1a 40 00 b9 1a 40 00 00 00 00 00 e1 18 40 00     ..@...@.......@.
  40006c:	f5 18 40 00 09 19 40 00 b9 1a 40 00 b9 1a 40 00     ..@...@...@...@.
  40007c:	b9 1a 40 00 1d 19 40 00 31 19 40 00 b9 1a 40 00     ..@...@.1.@...@.
  40008c:	b9 1a 40 00 b9 1a 40 00 b9 1a 40 00 b9 1a 40 00     ..@...@...@...@.
  40009c:	b9 1a 40 00 b9 1a 40 00 b9 1a 40 00 b9 1a 40 00     ..@...@...@...@.
  4000ac:	b9 1a 40 00 b9 1a 40 00 b9 1a 40 00 b9 1a 40 00     ..@...@...@...@.
  4000bc:	b9 1a 40 00 b9 1a 40 00 b9 1a 40 00 b9 1a 40 00     ..@...@...@...@.
  4000cc:	b9 1a 40 00 00 00 00 00 b9 1a 40 00 00 00 00 00     ..@.......@.....
  4000dc:	b9 1a 40 00 b9 1a 40 00 b9 1a 40 00 b9 1a 40 00     ..@...@...@...@.
  4000ec:	b9 1a 40 00 b9 1a 40 00 b9 1a 40 00 b9 1a 40 00     ..@...@...@...@.
  4000fc:	b9 1a 40 00 b9 1a 40 00 b9 1a 40 00 b9 1a 40 00     ..@...@...@...@.
  40010c:	b9 1a 40 00 b9 1a 40 00 b9 1a 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 b9 1a 40 00 b9 1a 40 00 b9 1a 40 00     ......@...@...@.
  40012c:	b9 1a 40 00 b9 1a 40 00 00 00 00 00 b9 1a 40 00     ..@...@.......@.
  40013c:	b9 1a 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400864 	.word	0x20400864
  40015c:	00000000 	.word	0x00000000
  400160:	00403394 	.word	0x00403394

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00403394 	.word	0x00403394
  4001a0:	20400868 	.word	0x20400868
  4001a4:	00403394 	.word	0x00403394
  4001a8:	00000000 	.word	0x00000000

004001ac <gfx_set_clipping>:
static gfx_ext_draw_handler_t gfx_ext_draw_func;

/* This function is documented in gfx.h */
void gfx_set_clipping(gfx_coord_t min_x, gfx_coord_t min_y,
		gfx_coord_t max_x, gfx_coord_t max_y)
{
  4001ac:	b410      	push	{r4}
  4001ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  4001b2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31

	if (min_y < 0) {
		min_y = 0;
	}

	if (max_x >= gfx_width) {
  4001b6:	4c0c      	ldr	r4, [pc, #48]	; (4001e8 <gfx_set_clipping+0x3c>)
  4001b8:	f9b4 4000 	ldrsh.w	r4, [r4]
  4001bc:	4294      	cmp	r4, r2
  4001be:	dc01      	bgt.n	4001c4 <gfx_set_clipping+0x18>
		max_x = gfx_width - 1;
  4001c0:	1e62      	subs	r2, r4, #1
  4001c2:	b212      	sxth	r2, r2
	}

	if (max_y >= gfx_height) {
  4001c4:	4c09      	ldr	r4, [pc, #36]	; (4001ec <gfx_set_clipping+0x40>)
  4001c6:	f9b4 4000 	ldrsh.w	r4, [r4]
  4001ca:	429c      	cmp	r4, r3
  4001cc:	dc01      	bgt.n	4001d2 <gfx_set_clipping+0x26>
		max_y = gfx_height - 1;
  4001ce:	3c01      	subs	r4, #1
  4001d0:	b223      	sxth	r3, r4
	}

	gfx_min_x = min_x;
  4001d2:	4c07      	ldr	r4, [pc, #28]	; (4001f0 <gfx_set_clipping+0x44>)
  4001d4:	8020      	strh	r0, [r4, #0]
	gfx_min_y = min_y;
  4001d6:	4807      	ldr	r0, [pc, #28]	; (4001f4 <gfx_set_clipping+0x48>)
  4001d8:	8001      	strh	r1, [r0, #0]
	gfx_max_x = max_x;
  4001da:	4907      	ldr	r1, [pc, #28]	; (4001f8 <gfx_set_clipping+0x4c>)
  4001dc:	800a      	strh	r2, [r1, #0]
	gfx_max_y = max_y;
  4001de:	4a07      	ldr	r2, [pc, #28]	; (4001fc <gfx_set_clipping+0x50>)
  4001e0:	8013      	strh	r3, [r2, #0]
#endif
}
  4001e2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4001e6:	4770      	bx	lr
  4001e8:	20400bb0 	.word	0x20400bb0
  4001ec:	20400bba 	.word	0x20400bba
  4001f0:	20400bb4 	.word	0x20400bb4
  4001f4:	20400bb8 	.word	0x20400bb8
  4001f8:	20400bb2 	.word	0x20400bb2
  4001fc:	20400bb6 	.word	0x20400bb6

00400200 <gfx_get_width>:

gfx_coord_t gfx_get_width(void)
{
	return gfx_width;
}
  400200:	4b01      	ldr	r3, [pc, #4]	; (400208 <gfx_get_width+0x8>)
  400202:	f9b3 0000 	ldrsh.w	r0, [r3]
  400206:	4770      	bx	lr
  400208:	20400bb0 	.word	0x20400bb0

0040020c <gfx_get_height>:

gfx_coord_t gfx_get_height(void)
{
	return gfx_height;
}
  40020c:	4b01      	ldr	r3, [pc, #4]	; (400214 <gfx_get_height+0x8>)
  40020e:	f9b3 0000 	ldrsh.w	r0, [r3]
  400212:	4770      	bx	lr
  400214:	20400bba 	.word	0x20400bba

00400218 <gfx_generic_draw_filled_rect>:
		gfx_color_t color)
{
	gfx_coord_t x2;
	gfx_coord_t y2;

	if ((width == 0) || (height == 0)) {
  400218:	2a00      	cmp	r2, #0
  40021a:	d05c      	beq.n	4002d6 <gfx_generic_draw_filled_rect+0xbe>
{
  40021c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40021e:	461c      	mov	r4, r3
  400220:	4615      	mov	r5, r2
	if ((width == 0) || (height == 0)) {
  400222:	2b00      	cmp	r3, #0
  400224:	d048      	beq.n	4002b8 <gfx_generic_draw_filled_rect+0xa0>
		return;
	}

	/* Invert if width or height is negative. */
	if (width < 0) {
  400226:	2a00      	cmp	r2, #0
  400228:	db47      	blt.n	4002ba <gfx_generic_draw_filled_rect+0xa2>
		width = -width;
		x -= width - 1;
	}

	if (height < 0) {
  40022a:	2c00      	cmp	r4, #0
  40022c:	db4c      	blt.n	4002c8 <gfx_generic_draw_filled_rect+0xb0>
		y -= height - 1;
	}

#ifdef CONF_GFX_USE_CLIPPING
	/* Nothing to do if entire rectangle is outside clipping region. */
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
  40022e:	4b2a      	ldr	r3, [pc, #168]	; (4002d8 <gfx_generic_draw_filled_rect+0xc0>)
  400230:	f9b3 6000 	ldrsh.w	r6, [r3]
  400234:	42b0      	cmp	r0, r6
  400236:	dc3f      	bgt.n	4002b8 <gfx_generic_draw_filled_rect+0xa0>
  400238:	4b28      	ldr	r3, [pc, #160]	; (4002dc <gfx_generic_draw_filled_rect+0xc4>)
  40023a:	f9b3 7000 	ldrsh.w	r7, [r3]
  40023e:	42b9      	cmp	r1, r7
  400240:	dc3a      	bgt.n	4002b8 <gfx_generic_draw_filled_rect+0xa0>
			((x + width) <= gfx_min_x) ||
  400242:	4b27      	ldr	r3, [pc, #156]	; (4002e0 <gfx_generic_draw_filled_rect+0xc8>)
  400244:	f9b3 3000 	ldrsh.w	r3, [r3]
  400248:	1942      	adds	r2, r0, r5
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
  40024a:	429a      	cmp	r2, r3
  40024c:	dd34      	ble.n	4002b8 <gfx_generic_draw_filled_rect+0xa0>
			((y + height) <= gfx_min_y)) {
  40024e:	4a25      	ldr	r2, [pc, #148]	; (4002e4 <gfx_generic_draw_filled_rect+0xcc>)
  400250:	f9b2 2000 	ldrsh.w	r2, [r2]
  400254:	eb01 0e04 	add.w	lr, r1, r4
			((x + width) <= gfx_min_x) ||
  400258:	4596      	cmp	lr, r2
  40025a:	dd2d      	ble.n	4002b8 <gfx_generic_draw_filled_rect+0xa0>
		return;
	}

	/* Clip if outside left X limit. */
	if (x < gfx_min_x) {
  40025c:	4298      	cmp	r0, r3
  40025e:	da03      	bge.n	400268 <gfx_generic_draw_filled_rect+0x50>
		width -= gfx_min_x - x;
  400260:	4405      	add	r5, r0
  400262:	1aed      	subs	r5, r5, r3
  400264:	b22d      	sxth	r5, r5
		x = gfx_min_x;
  400266:	4618      	mov	r0, r3
	}

	/* Clip if outside top Y limit. */
	if (y < gfx_min_y) {
  400268:	4291      	cmp	r1, r2
  40026a:	da03      	bge.n	400274 <gfx_generic_draw_filled_rect+0x5c>
		height -= gfx_min_y - y;
  40026c:	440c      	add	r4, r1
  40026e:	1aa4      	subs	r4, r4, r2
  400270:	b224      	sxth	r4, r4
		y = gfx_min_y;
  400272:	4611      	mov	r1, r2
	}
#endif

	/*  Compute bottom right point. */
	x2 = x + width - 1;
  400274:	fa1f fc80 	uxth.w	ip, r0
  400278:	eb0c 0205 	add.w	r2, ip, r5
  40027c:	3a01      	subs	r2, #1
  40027e:	b212      	sxth	r2, r2
	y2 = y + height - 1;
  400280:	fa1f fe81 	uxth.w	lr, r1
  400284:	eb0e 0304 	add.w	r3, lr, r4
  400288:	3b01      	subs	r3, #1
  40028a:	b21b      	sxth	r3, r3

#ifdef CONF_GFX_USE_CLIPPING
	/* Clip if outside right X limit. */
	if (x2 > gfx_max_x) {
  40028c:	4296      	cmp	r6, r2
  40028e:	da04      	bge.n	40029a <gfx_generic_draw_filled_rect+0x82>
		x2 = gfx_max_x;
		width = x2 - x + 1;
  400290:	1c75      	adds	r5, r6, #1
  400292:	eba5 050c 	sub.w	r5, r5, ip
  400296:	b22d      	sxth	r5, r5
		x2 = gfx_max_x;
  400298:	4632      	mov	r2, r6
	}

	/* Clip if outside bottom Y limit. */
	if (y2 > gfx_max_y) {
  40029a:	429f      	cmp	r7, r3
  40029c:	da04      	bge.n	4002a8 <gfx_generic_draw_filled_rect+0x90>
		y2 = gfx_max_y;
		height = y2 - y + 1;
  40029e:	1c7c      	adds	r4, r7, #1
  4002a0:	eba4 040e 	sub.w	r4, r4, lr
  4002a4:	b224      	sxth	r4, r4
		y2 = gfx_max_y;
  4002a6:	463b      	mov	r3, r7
	}
#endif

	/* Set up draw area and duplicate pixel color until area is full. */
	gfx_set_limits(x, y, x2, y2);
  4002a8:	4e0f      	ldr	r6, [pc, #60]	; (4002e8 <gfx_generic_draw_filled_rect+0xd0>)
  4002aa:	47b0      	blx	r6
	gfx_duplicate_pixel(color, (uint32_t)width * height);
  4002ac:	fb04 f105 	mul.w	r1, r4, r5
  4002b0:	f8bd 0018 	ldrh.w	r0, [sp, #24]
  4002b4:	4b0d      	ldr	r3, [pc, #52]	; (4002ec <gfx_generic_draw_filled_rect+0xd4>)
  4002b6:	4798      	blx	r3
  4002b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		width = -width;
  4002ba:	b293      	uxth	r3, r2
  4002bc:	425d      	negs	r5, r3
  4002be:	b22d      	sxth	r5, r5
		x -= width - 1;
  4002c0:	3001      	adds	r0, #1
  4002c2:	4418      	add	r0, r3
  4002c4:	b200      	sxth	r0, r0
  4002c6:	e7b0      	b.n	40022a <gfx_generic_draw_filled_rect+0x12>
		height = -height;
  4002c8:	b2a3      	uxth	r3, r4
  4002ca:	425c      	negs	r4, r3
  4002cc:	b224      	sxth	r4, r4
		y -= height - 1;
  4002ce:	3101      	adds	r1, #1
  4002d0:	4419      	add	r1, r3
  4002d2:	b209      	sxth	r1, r1
  4002d4:	e7ab      	b.n	40022e <gfx_generic_draw_filled_rect+0x16>
  4002d6:	4770      	bx	lr
  4002d8:	20400bb2 	.word	0x20400bb2
  4002dc:	20400bb6 	.word	0x20400bb6
  4002e0:	20400bb4 	.word	0x20400bb4
  4002e4:	20400bb8 	.word	0x20400bb8
  4002e8:	00401049 	.word	0x00401049
  4002ec:	004010fd 	.word	0x004010fd

004002f0 <gfx_ili9488_set_orientation>:
gfx_coord_t gfx_height, gfx_width;
gfx_coord_t gfx_min_x, gfx_min_y;
gfx_coord_t gfx_max_x, gfx_max_y;

void gfx_ili9488_set_orientation(uint8_t flags)
{
  4002f0:	b510      	push	{r4, lr}
  4002f2:	4604      	mov	r4, r0
	ili9488_set_orientation(flags);
  4002f4:	4b11      	ldr	r3, [pc, #68]	; (40033c <gfx_ili9488_set_orientation+0x4c>)
  4002f6:	4798      	blx	r3

	/* Switch width and height if XY is switched. */
	if ((flags & GFX_SWITCH_XY) != 0x00) {
  4002f8:	f014 0f04 	tst.w	r4, #4
  4002fc:	d114      	bne.n	400328 <gfx_ili9488_set_orientation+0x38>
		gfx_width = ILI9488_SWITCH_XY_WIDTH;
		gfx_height = ILI9488_SWITCH_XY_HEIGHT;
	} else {
		gfx_width = ILI9488_SWITCH_XY_HEIGHT;
  4002fe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  400302:	4b0f      	ldr	r3, [pc, #60]	; (400340 <gfx_ili9488_set_orientation+0x50>)
  400304:	801a      	strh	r2, [r3, #0]
		gfx_height = ILI9488_SWITCH_XY_WIDTH;
  400306:	f44f 72a0 	mov.w	r2, #320	; 0x140
  40030a:	4b0e      	ldr	r3, [pc, #56]	; (400344 <gfx_ili9488_set_orientation+0x54>)
  40030c:	801a      	strh	r2, [r3, #0]
		//gfx_height = ILI9488_SWITCH_XY_HEIGHT;
	}

#ifdef CONF_GFX_USE_CLIPPING
	/* Reset clipping region. */
	gfx_set_clipping(0, 0, gfx_width - 1, gfx_height - 1);
  40030e:	4b0d      	ldr	r3, [pc, #52]	; (400344 <gfx_ili9488_set_orientation+0x54>)
  400310:	881b      	ldrh	r3, [r3, #0]
  400312:	3b01      	subs	r3, #1
  400314:	4a0a      	ldr	r2, [pc, #40]	; (400340 <gfx_ili9488_set_orientation+0x50>)
  400316:	8812      	ldrh	r2, [r2, #0]
  400318:	3a01      	subs	r2, #1
  40031a:	b21b      	sxth	r3, r3
  40031c:	b212      	sxth	r2, r2
  40031e:	2100      	movs	r1, #0
  400320:	4608      	mov	r0, r1
  400322:	4c09      	ldr	r4, [pc, #36]	; (400348 <gfx_ili9488_set_orientation+0x58>)
  400324:	47a0      	blx	r4
  400326:	bd10      	pop	{r4, pc}
		gfx_width = ILI9488_SWITCH_XY_WIDTH;
  400328:	f44f 72a0 	mov.w	r2, #320	; 0x140
  40032c:	4b04      	ldr	r3, [pc, #16]	; (400340 <gfx_ili9488_set_orientation+0x50>)
  40032e:	801a      	strh	r2, [r3, #0]
		gfx_height = ILI9488_SWITCH_XY_HEIGHT;
  400330:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  400334:	4b03      	ldr	r3, [pc, #12]	; (400344 <gfx_ili9488_set_orientation+0x54>)
  400336:	801a      	strh	r2, [r3, #0]
  400338:	e7e9      	b.n	40030e <gfx_ili9488_set_orientation+0x1e>
  40033a:	bf00      	nop
  40033c:	00401071 	.word	0x00401071
  400340:	20400bb0 	.word	0x20400bb0
  400344:	20400bba 	.word	0x20400bba
  400348:	004001ad 	.word	0x004001ad

0040034c <gfx_ili9488_draw_pixel>:

	return color;
}

void gfx_ili9488_draw_pixel(gfx_coord_t x, gfx_coord_t y, gfx_color_t color)
{
  40034c:	b538      	push	{r3, r4, r5, lr}
#ifdef CONF_GFX_USE_CLIPPING
	if ((x < gfx_min_x) || (x > gfx_max_x) ||
  40034e:	4c0f      	ldr	r4, [pc, #60]	; (40038c <gfx_ili9488_draw_pixel+0x40>)
  400350:	f9b4 4000 	ldrsh.w	r4, [r4]
  400354:	4284      	cmp	r4, r0
  400356:	dc0e      	bgt.n	400376 <gfx_ili9488_draw_pixel+0x2a>
  400358:	4b0d      	ldr	r3, [pc, #52]	; (400390 <gfx_ili9488_draw_pixel+0x44>)
  40035a:	f9b3 3000 	ldrsh.w	r3, [r3]
  40035e:	4283      	cmp	r3, r0
  400360:	db09      	blt.n	400376 <gfx_ili9488_draw_pixel+0x2a>
			(y < gfx_min_y) || (y > gfx_max_y)) {
  400362:	4b0c      	ldr	r3, [pc, #48]	; (400394 <gfx_ili9488_draw_pixel+0x48>)
	if ((x < gfx_min_x) || (x > gfx_max_x) ||
  400364:	f9b3 3000 	ldrsh.w	r3, [r3]
  400368:	428b      	cmp	r3, r1
  40036a:	dc04      	bgt.n	400376 <gfx_ili9488_draw_pixel+0x2a>
			(y < gfx_min_y) || (y > gfx_max_y)) {
  40036c:	4b0a      	ldr	r3, [pc, #40]	; (400398 <gfx_ili9488_draw_pixel+0x4c>)
  40036e:	f9b3 3000 	ldrsh.w	r3, [r3]
  400372:	428b      	cmp	r3, r1
  400374:	da00      	bge.n	400378 <gfx_ili9488_draw_pixel+0x2c>
  400376:	bd38      	pop	{r3, r4, r5, pc}
  400378:	4614      	mov	r4, r2
		return;
	}
#endif

	/* Set up draw area and write the two bytes of pixel data. */
	gfx_set_limits(x, y, x, y);
  40037a:	460b      	mov	r3, r1
  40037c:	4602      	mov	r2, r0
  40037e:	4d07      	ldr	r5, [pc, #28]	; (40039c <gfx_ili9488_draw_pixel+0x50>)
  400380:	47a8      	blx	r5
	ili9488_write_gram(color);
  400382:	4620      	mov	r0, r4
  400384:	4b06      	ldr	r3, [pc, #24]	; (4003a0 <gfx_ili9488_draw_pixel+0x54>)
  400386:	4798      	blx	r3
  400388:	e7f5      	b.n	400376 <gfx_ili9488_draw_pixel+0x2a>
  40038a:	bf00      	nop
  40038c:	20400bb4 	.word	0x20400bb4
  400390:	20400bb2 	.word	0x20400bb2
  400394:	20400bb8 	.word	0x20400bb8
  400398:	20400bb6 	.word	0x20400bb6
  40039c:	00401049 	.word	0x00401049
  4003a0:	004010bd 	.word	0x004010bd

004003a4 <gfx_ili9488_init>:
	gfx_set_top_left_limit(x, y);
	ili9488_write_gram(color);
}

void gfx_ili9488_init(void)
{
  4003a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4003a6:	b087      	sub	sp, #28
	struct ili9488_opt_t g_ili9488_display_opt;

	/* initialize globals */
	gfx_width = ILI9488_LCD_WIDTH;
  4003a8:	4d14      	ldr	r5, [pc, #80]	; (4003fc <gfx_ili9488_init+0x58>)
  4003aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
  4003ae:	802a      	strh	r2, [r5, #0]
	gfx_height = ILI9488_LCD_HEIGHT;
  4003b0:	4e13      	ldr	r6, [pc, #76]	; (400400 <gfx_ili9488_init+0x5c>)
  4003b2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  4003b6:	8033      	strh	r3, [r6, #0]

	/* Initialize display parameter */
	g_ili9488_display_opt.ul_width= ILI9488_LCD_WIDTH;
  4003b8:	9202      	str	r2, [sp, #8]
	g_ili9488_display_opt.ul_height = ILI9488_LCD_HEIGHT;
  4003ba:	9303      	str	r3, [sp, #12]
	g_ili9488_display_opt.foreground_color= COLOR_BLACK;
  4003bc:	2400      	movs	r4, #0
  4003be:	9404      	str	r4, [sp, #16]
	g_ili9488_display_opt.background_color = COLOR_WHITE;
  4003c0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  4003c4:	9305      	str	r3, [sp, #20]

	ili9488_init(&g_ili9488_display_opt);
  4003c6:	a802      	add	r0, sp, #8
  4003c8:	4b0e      	ldr	r3, [pc, #56]	; (400404 <gfx_ili9488_init+0x60>)
  4003ca:	4798      	blx	r3
	ili9488_display_on();
  4003cc:	4b0e      	ldr	r3, [pc, #56]	; (400408 <gfx_ili9488_init+0x64>)
  4003ce:	4798      	blx	r3

	/* Set clipping area to whole screen initially */
	gfx_set_clipping(0, 0, gfx_width, gfx_height);
  4003d0:	f9b6 3000 	ldrsh.w	r3, [r6]
  4003d4:	f9b5 2000 	ldrsh.w	r2, [r5]
  4003d8:	4621      	mov	r1, r4
  4003da:	4620      	mov	r0, r4
  4003dc:	4f0b      	ldr	r7, [pc, #44]	; (40040c <gfx_ili9488_init+0x68>)
  4003de:	47b8      	blx	r7

	gfx_set_orientation(GFX_FLIP_Y);
  4003e0:	2002      	movs	r0, #2
  4003e2:	4b0b      	ldr	r3, [pc, #44]	; (400410 <gfx_ili9488_init+0x6c>)
  4003e4:	4798      	blx	r3
	gfx_draw_filled_rect(0, 0, gfx_width, gfx_height,
  4003e6:	f9b6 3000 	ldrsh.w	r3, [r6]
  4003ea:	f9b5 2000 	ldrsh.w	r2, [r5]
  4003ee:	9400      	str	r4, [sp, #0]
  4003f0:	4621      	mov	r1, r4
  4003f2:	4620      	mov	r0, r4
  4003f4:	4c07      	ldr	r4, [pc, #28]	; (400414 <gfx_ili9488_init+0x70>)
  4003f6:	47a0      	blx	r4
			GFX_COLOR_BLACK);			
}
  4003f8:	b007      	add	sp, #28
  4003fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4003fc:	20400bb0 	.word	0x20400bb0
  400400:	20400bba 	.word	0x20400bba
  400404:	00400ed9 	.word	0x00400ed9
  400408:	00400e49 	.word	0x00400e49
  40040c:	004001ad 	.word	0x004001ad
  400410:	004002f1 	.word	0x004002f1
  400414:	00400219 	.word	0x00400219

00400418 <gfx_draw_char>:
 * \param text_color  Foreground color to draw the text string in
 */
void gfx_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font, const gfx_color_t bg_color,
		const gfx_color_t text_color)
{
  400418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40041c:	b085      	sub	sp, #20
  40041e:	4604      	mov	r4, r0
  400420:	4688      	mov	r8, r1
  400422:	4691      	mov	r9, r2
  400424:	469a      	mov	sl, r3
  400426:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
  40042a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  40042e:	9302      	str	r3, [sp, #8]
	if (bg_color != GFX_COLOR_TRANSPARENT) {
  400430:	f24f 031e 	movw	r3, #61470	; 0xf01e
  400434:	4299      	cmp	r1, r3
  400436:	d008      	beq.n	40044a <gfx_draw_char+0x32>
		gfx_draw_filled_rect(x, y, font->width, font->height, bg_color);
  400438:	f89a 3009 	ldrb.w	r3, [sl, #9]
  40043c:	f89a 2008 	ldrb.w	r2, [sl, #8]
  400440:	9100      	str	r1, [sp, #0]
  400442:	4649      	mov	r1, r9
  400444:	4640      	mov	r0, r8
  400446:	4d25      	ldr	r5, [pc, #148]	; (4004dc <gfx_draw_char+0xc4>)
  400448:	47a8      	blx	r5
	}

	switch (font->type) {
  40044a:	f89a 3000 	ldrb.w	r3, [sl]
  40044e:	b113      	cbz	r3, 400456 <gfx_draw_char+0x3e>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  400450:	b005      	add	sp, #20
  400452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  400456:	f89a 3008 	ldrb.w	r3, [sl, #8]
  40045a:	08da      	lsrs	r2, r3, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  40045c:	f013 0f07 	tst.w	r3, #7
		char_row_size++;
  400460:	bf18      	it	ne
  400462:	3201      	addne	r2, #1
	glyph_data_offset = char_row_size * font->height *
  400464:	f89a 3009 	ldrb.w	r3, [sl, #9]
			((uint8_t)ch - font->first_char);
  400468:	f89a 700a 	ldrb.w	r7, [sl, #10]
  40046c:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  40046e:	fb17 f703 	smulbb	r7, r7, r3
  400472:	fb17 f702 	smulbb	r7, r7, r2
	glyph_data = font->data.progmem + glyph_data_offset;
  400476:	f8da 2004 	ldr.w	r2, [sl, #4]
  40047a:	fa12 f787 	uxtah	r7, r2, r7
  40047e:	3b01      	subs	r3, #1
  400480:	f109 0201 	add.w	r2, r9, #1
  400484:	fa52 f383 	uxtab	r3, r2, r3
  400488:	b29b      	uxth	r3, r3
  40048a:	9303      	str	r3, [sp, #12]
				gfx_draw_pixel(inc_x, inc_y, color);
  40048c:	f8df b050 	ldr.w	fp, [pc, #80]	; 4004e0 <gfx_draw_char+0xc8>
  400490:	e01d      	b.n	4004ce <gfx_draw_char+0xb6>
			glyph_byte <<= 1;
  400492:	0064      	lsls	r4, r4, #1
  400494:	b2e4      	uxtb	r4, r4
  400496:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  400498:	b2eb      	uxtb	r3, r5
  40049a:	429e      	cmp	r6, r3
  40049c:	d90e      	bls.n	4004bc <gfx_draw_char+0xa4>
  40049e:	eb05 0008 	add.w	r0, r5, r8
  4004a2:	b200      	sxth	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  4004a4:	f015 0f07 	tst.w	r5, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  4004a8:	bf08      	it	eq
  4004aa:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  4004ae:	f014 0f80 	tst.w	r4, #128	; 0x80
  4004b2:	d0ee      	beq.n	400492 <gfx_draw_char+0x7a>
				gfx_draw_pixel(inc_x, inc_y, color);
  4004b4:	9a02      	ldr	r2, [sp, #8]
  4004b6:	4649      	mov	r1, r9
  4004b8:	47d8      	blx	fp
  4004ba:	e7ea      	b.n	400492 <gfx_draw_char+0x7a>
  4004bc:	f109 0901 	add.w	r9, r9, #1
  4004c0:	fa1f f389 	uxth.w	r3, r9
		inc_y += 1;
  4004c4:	fa0f f983 	sxth.w	r9, r3
	} while (rows_left > 0);
  4004c8:	9a03      	ldr	r2, [sp, #12]
  4004ca:	429a      	cmp	r2, r3
  4004cc:	d0c0      	beq.n	400450 <gfx_draw_char+0x38>
		uint8_t pixelsToDraw = font->width;
  4004ce:	f89a 6008 	ldrb.w	r6, [sl, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  4004d2:	2e00      	cmp	r6, #0
  4004d4:	d0f2      	beq.n	4004bc <gfx_draw_char+0xa4>
  4004d6:	2500      	movs	r5, #0
  4004d8:	462c      	mov	r4, r5
  4004da:	e7e0      	b.n	40049e <gfx_draw_char+0x86>
  4004dc:	00400219 	.word	0x00400219
  4004e0:	0040034d 	.word	0x0040034d

004004e4 <gfx_get_string_bounding_box>:
 * \param width    Pointer to width result
 * \param height   Pointer to height result
 */
void gfx_get_string_bounding_box(const char *str, const struct font *font,
		gfx_coord_t *width, gfx_coord_t *height)
{
  4004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	gfx_coord_t font_width = font->width;
  4004e6:	7a0f      	ldrb	r7, [r1, #8]
	gfx_coord_t font_height = font->height;
  4004e8:	f891 e009 	ldrb.w	lr, [r1, #9]
  4004ec:	fa0f f58e 	sxth.w	r5, lr

	gfx_coord_t max_width = 1;
	gfx_coord_t max_height = font_height;
	gfx_coord_t x = 0;
  4004f0:	2100      	movs	r1, #0
	gfx_coord_t max_width = 1;
  4004f2:	2601      	movs	r6, #1

	/* Handle each character until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = 0;
  4004f4:	468c      	mov	ip, r1
  4004f6:	e005      	b.n	400504 <gfx_get_string_bounding_box+0x20>
			max_height += font_height;
  4004f8:	4475      	add	r5, lr
  4004fa:	b22d      	sxth	r5, r5
			x = 0;
  4004fc:	4661      	mov	r1, ip
			x += font_width;
			if (x > max_width) {
				max_width = x;
			}
		}
	} while (*(++str));
  4004fe:	f810 4f01 	ldrb.w	r4, [r0, #1]!
  400502:	b154      	cbz	r4, 40051a <gfx_get_string_bounding_box+0x36>
		if (*str == '\n') {
  400504:	7804      	ldrb	r4, [r0, #0]
  400506:	2c0a      	cmp	r4, #10
  400508:	d0f6      	beq.n	4004f8 <gfx_get_string_bounding_box+0x14>
		} else if (*str == '\r') {
  40050a:	2c0d      	cmp	r4, #13
  40050c:	d0f7      	beq.n	4004fe <gfx_get_string_bounding_box+0x1a>
			x += font_width;
  40050e:	4439      	add	r1, r7
  400510:	b209      	sxth	r1, r1
  400512:	428e      	cmp	r6, r1
  400514:	bfb8      	it	lt
  400516:	460e      	movlt	r6, r1
  400518:	e7f1      	b.n	4004fe <gfx_get_string_bounding_box+0x1a>

	/* Return values through references */
	*width = max_width;
  40051a:	8016      	strh	r6, [r2, #0]
	*height = max_height;
  40051c:	801d      	strh	r5, [r3, #0]
  40051e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00400520 <gfx_draw_string_aligned>:
{
  400520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400524:	b087      	sub	sp, #28
  400526:	4606      	mov	r6, r0
  400528:	9103      	str	r1, [sp, #12]
  40052a:	4690      	mov	r8, r2
  40052c:	461f      	mov	r7, r3
  40052e:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
  400532:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
  400536:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
  40053a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
  40053e:	9302      	str	r3, [sp, #8]
	gfx_get_string_bounding_box(str, font, &bounding_x, &bounding_y);
  400540:	ab05      	add	r3, sp, #20
  400542:	f10d 0216 	add.w	r2, sp, #22
  400546:	4639      	mov	r1, r7
  400548:	4d47      	ldr	r5, [pc, #284]	; (400668 <gfx_draw_string_aligned+0x148>)
  40054a:	47a8      	blx	r5
	if (text_pos & TEXT_POS_CENTER_Y) {
  40054c:	f014 0f02 	tst.w	r4, #2
  400550:	d01b      	beq.n	40058a <gfx_draw_string_aligned+0x6a>
		y -= bounding_y / 2;
  400552:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  400556:	2b00      	cmp	r3, #0
  400558:	bfb8      	it	lt
  40055a:	3301      	addlt	r3, #1
  40055c:	eba8 0863 	sub.w	r8, r8, r3, asr #1
  400560:	fa0f f888 	sxth.w	r8, r8
	if (text_pos & TEXT_POS_CENTER_X) {
  400564:	f014 0f10 	tst.w	r4, #16
  400568:	d019      	beq.n	40059e <gfx_draw_string_aligned+0x7e>
		x -= bounding_x / 2;
  40056a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
  40056e:	2b00      	cmp	r3, #0
  400570:	bfb8      	it	lt
  400572:	3301      	addlt	r3, #1
  400574:	9a03      	ldr	r2, [sp, #12]
  400576:	eba2 0363 	sub.w	r3, r2, r3, asr #1
  40057a:	b21b      	sxth	r3, r3
  40057c:	9303      	str	r3, [sp, #12]
	while (*str != '\0') {
  40057e:	7833      	ldrb	r3, [r6, #0]
  400580:	2b00      	cmp	r3, #0
  400582:	d06d      	beq.n	400660 <gfx_draw_string_aligned+0x140>
				gfx_draw_char(*curr_line_text, curr_line_x, y,
  400584:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 40066c <gfx_draw_string_aligned+0x14c>
  400588:	e067      	b.n	40065a <gfx_draw_string_aligned+0x13a>
	} else if (text_pos & TEXT_POS_BOTTOM) {
  40058a:	f014 0f04 	tst.w	r4, #4
  40058e:	d0e9      	beq.n	400564 <gfx_draw_string_aligned+0x44>
		y -= bounding_y;
  400590:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  400594:	eba8 0803 	sub.w	r8, r8, r3
  400598:	fa0f f888 	sxth.w	r8, r8
  40059c:	e7e2      	b.n	400564 <gfx_draw_string_aligned+0x44>
	} else if (text_pos & TEXT_POS_RIGHT) {
  40059e:	f014 0f20 	tst.w	r4, #32
  4005a2:	d0ec      	beq.n	40057e <gfx_draw_string_aligned+0x5e>
		x -= bounding_x;
  4005a4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4005a8:	9a03      	ldr	r2, [sp, #12]
  4005aa:	1ad3      	subs	r3, r2, r3
  4005ac:	b21b      	sxth	r3, r3
  4005ae:	9303      	str	r3, [sp, #12]
  4005b0:	e7e5      	b.n	40057e <gfx_draw_string_aligned+0x5e>
				str++;
  4005b2:	3501      	adds	r5, #1
		if (text_align == TEXT_ALIGN_CENTER) {
  4005b4:	9a02      	ldr	r2, [sp, #8]
  4005b6:	2a02      	cmp	r2, #2
  4005b8:	d014      	beq.n	4005e4 <gfx_draw_string_aligned+0xc4>
		} else if (text_align == TEXT_ALIGN_RIGHT) {
  4005ba:	9a02      	ldr	r2, [sp, #8]
  4005bc:	2a01      	cmp	r2, #1
  4005be:	d024      	beq.n	40060a <gfx_draw_string_aligned+0xea>
		gfx_coord_t curr_line_x = x;
  4005c0:	9c03      	ldr	r4, [sp, #12]
  4005c2:	464b      	mov	r3, r9
  4005c4:	46a9      	mov	r9, r5
  4005c6:	461d      	mov	r5, r3
  4005c8:	e02c      	b.n	400624 <gfx_draw_string_aligned+0x104>
		} while (*(++str) != '\0');
  4005ca:	f815 2f01 	ldrb.w	r2, [r5, #1]!
  4005ce:	2a00      	cmp	r2, #0
  4005d0:	d0f0      	beq.n	4005b4 <gfx_draw_string_aligned+0x94>
			if (*str == '\n') {
  4005d2:	782a      	ldrb	r2, [r5, #0]
  4005d4:	2a0a      	cmp	r2, #10
  4005d6:	d0ec      	beq.n	4005b2 <gfx_draw_string_aligned+0x92>
			} else if (*str != '\r') {
  4005d8:	2a0d      	cmp	r2, #13
  4005da:	d0f6      	beq.n	4005ca <gfx_draw_string_aligned+0xaa>
				curr_line_width += font->width;
  4005dc:	7a3a      	ldrb	r2, [r7, #8]
  4005de:	4413      	add	r3, r2
  4005e0:	b21b      	sxth	r3, r3
  4005e2:	e7f2      	b.n	4005ca <gfx_draw_string_aligned+0xaa>
			curr_line_x += (bounding_x / 2) - (curr_line_width / 2);
  4005e4:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
  4005e8:	2a00      	cmp	r2, #0
  4005ea:	bfb8      	it	lt
  4005ec:	3201      	addlt	r2, #1
  4005ee:	9903      	ldr	r1, [sp, #12]
  4005f0:	eb01 0462 	add.w	r4, r1, r2, asr #1
  4005f4:	461a      	mov	r2, r3
  4005f6:	2b00      	cmp	r3, #0
  4005f8:	bfb8      	it	lt
  4005fa:	1c5a      	addlt	r2, r3, #1
  4005fc:	eba4 0462 	sub.w	r4, r4, r2, asr #1
  400600:	b224      	sxth	r4, r4
  400602:	464b      	mov	r3, r9
  400604:	46a9      	mov	r9, r5
  400606:	461d      	mov	r5, r3
  400608:	e00c      	b.n	400624 <gfx_draw_string_aligned+0x104>
			curr_line_x += bounding_x - curr_line_width;
  40060a:	f8bd 4016 	ldrh.w	r4, [sp, #22]
  40060e:	9a03      	ldr	r2, [sp, #12]
  400610:	4414      	add	r4, r2
  400612:	1ae4      	subs	r4, r4, r3
  400614:	b224      	sxth	r4, r4
  400616:	464b      	mov	r3, r9
  400618:	46a9      	mov	r9, r5
  40061a:	461d      	mov	r5, r3
  40061c:	e002      	b.n	400624 <gfx_draw_string_aligned+0x104>
		} while (*(++curr_line_text) != '\0');
  40061e:	f816 3f01 	ldrb.w	r3, [r6, #1]!
  400622:	b17b      	cbz	r3, 400644 <gfx_draw_string_aligned+0x124>
			if (*curr_line_text == '\n') {
  400624:	7830      	ldrb	r0, [r6, #0]
  400626:	280a      	cmp	r0, #10
  400628:	d00c      	beq.n	400644 <gfx_draw_string_aligned+0x124>
			} else if (*curr_line_text != '\r') {
  40062a:	280d      	cmp	r0, #13
  40062c:	d0f7      	beq.n	40061e <gfx_draw_string_aligned+0xfe>
				gfx_draw_char(*curr_line_text, curr_line_x, y,
  40062e:	f8cd a004 	str.w	sl, [sp, #4]
  400632:	9500      	str	r5, [sp, #0]
  400634:	463b      	mov	r3, r7
  400636:	4642      	mov	r2, r8
  400638:	4621      	mov	r1, r4
  40063a:	47d8      	blx	fp
				curr_line_x += font->width;
  40063c:	7a3b      	ldrb	r3, [r7, #8]
  40063e:	441c      	add	r4, r3
  400640:	b224      	sxth	r4, r4
  400642:	e7ec      	b.n	40061e <gfx_draw_string_aligned+0xfe>
  400644:	462b      	mov	r3, r5
  400646:	464d      	mov	r5, r9
  400648:	4699      	mov	r9, r3
		y += font->height + 1;
  40064a:	7a7b      	ldrb	r3, [r7, #9]
  40064c:	3301      	adds	r3, #1
  40064e:	4498      	add	r8, r3
  400650:	fa0f f888 	sxth.w	r8, r8
	while (*str != '\0') {
  400654:	782b      	ldrb	r3, [r5, #0]
  400656:	b11b      	cbz	r3, 400660 <gfx_draw_string_aligned+0x140>
  400658:	462e      	mov	r6, r5
  40065a:	4635      	mov	r5, r6
  40065c:	2300      	movs	r3, #0
  40065e:	e7b8      	b.n	4005d2 <gfx_draw_string_aligned+0xb2>
}
  400660:	b007      	add	sp, #28
  400662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400666:	bf00      	nop
  400668:	004004e5 	.word	0x004004e5
  40066c:	00400419 	.word	0x00400419

00400670 <lcd_init>:
#include "LCDLib.h"
#include "asf.h"

/*********************************** Public Functions Start ***********************************/
void lcd_init(void)
{
  400670:	b508      	push	{r3, lr}
	gfx_init();
  400672:	4b02      	ldr	r3, [pc, #8]	; (40067c <lcd_init+0xc>)
  400674:	4798      	blx	r3
	mxt_init();
  400676:	4b02      	ldr	r3, [pc, #8]	; (400680 <lcd_init+0x10>)
  400678:	4798      	blx	r3
  40067a:	bd08      	pop	{r3, pc}
  40067c:	004003a5 	.word	0x004003a5
  400680:	00400701 	.word	0x00400701

00400684 <touch_handler>:
/*********************************** Static Functions End ***********************************/

/*********************************** Public Functions Start ***********************************/
#define MAX_ENTRIES        2
void touch_handler(touch_t *touched_point)
{
  400684:	b570      	push	{r4, r5, r6, lr}
  400686:	b086      	sub	sp, #24
  400688:	4605      	mov	r5, r0
	uint8_t i = 0;

	struct mxt_touch_event touch_event;	
	mxt_read_touch_event(&device, &touch_event);
  40068a:	a903      	add	r1, sp, #12
  40068c:	4812      	ldr	r0, [pc, #72]	; (4006d8 <touch_handler+0x54>)
  40068e:	4b13      	ldr	r3, [pc, #76]	; (4006dc <touch_handler+0x58>)
  400690:	4798      	blx	r3
	touch_data->x = ((uint32_t)(4096 - touch_event->x) * gfx_get_width()) / 4096;
  400692:	f8bd 400e 	ldrh.w	r4, [sp, #14]
  400696:	f5c4 5480 	rsb	r4, r4, #4096	; 0x1000
  40069a:	4b11      	ldr	r3, [pc, #68]	; (4006e0 <touch_handler+0x5c>)
  40069c:	4798      	blx	r3
  40069e:	fb04 f300 	mul.w	r3, r4, r0
  4006a2:	0b1b      	lsrs	r3, r3, #12
  4006a4:	802b      	strh	r3, [r5, #0]
	touch_data->y = ((uint32_t)(4096 - touch_event->y) * gfx_get_height()) / 4096;
  4006a6:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  4006aa:	f5c4 5480 	rsb	r4, r4, #4096	; 0x1000
  4006ae:	4b0d      	ldr	r3, [pc, #52]	; (4006e4 <touch_handler+0x60>)
  4006b0:	4798      	blx	r3
  4006b2:	fb04 f300 	mul.w	r3, r4, r0
  4006b6:	0b1b      	lsrs	r3, r3, #12
  4006b8:	806b      	strh	r3, [r5, #2]
	touch_data->size = (touch_event->size * 4);
  4006ba:	f89d 3012 	ldrb.w	r3, [sp, #18]
  4006be:	009b      	lsls	r3, r3, #2
  4006c0:	712b      	strb	r3, [r5, #4]
  4006c2:	24fa      	movs	r4, #250	; 0xfa
		mxt_read_message(data, &message);
  4006c4:	4e04      	ldr	r6, [pc, #16]	; (4006d8 <touch_handler+0x54>)
  4006c6:	4d08      	ldr	r5, [pc, #32]	; (4006e8 <touch_handler+0x64>)
  4006c8:	4669      	mov	r1, sp
  4006ca:	4630      	mov	r0, r6
  4006cc:	47a8      	blx	r5
	} while (--count);
  4006ce:	3c01      	subs	r4, #1
  4006d0:	d1fa      	bne.n	4006c8 <touch_handler+0x44>
	
	get_finger_display_coordinates(&touch_event, touched_point); 
	
	mxt_make_highchg(&device);
}
  4006d2:	b006      	add	sp, #24
  4006d4:	bd70      	pop	{r4, r5, r6, pc}
  4006d6:	bf00      	nop
  4006d8:	20400bbc 	.word	0x20400bbc
  4006dc:	00400ca5 	.word	0x00400ca5
  4006e0:	00400201 	.word	0x00400201
  4006e4:	0040020d 	.word	0x0040020d
  4006e8:	00400c59 	.word	0x00400c59

004006ec <lcd_touched>:

bool lcd_touched(void)
{
  4006ec:	b508      	push	{r3, lr}
	return mxt_is_message_pending(&device); 
  4006ee:	4802      	ldr	r0, [pc, #8]	; (4006f8 <lcd_touched+0xc>)
  4006f0:	4b02      	ldr	r3, [pc, #8]	; (4006fc <lcd_touched+0x10>)
  4006f2:	4798      	blx	r3
}
  4006f4:	bd08      	pop	{r3, pc}
  4006f6:	bf00      	nop
  4006f8:	20400bbc 	.word	0x20400bbc
  4006fc:	00400c35 	.word	0x00400c35

00400700 <mxt_init>:

void mxt_init(void)
{
  400700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400704:	b09f      	sub	sp, #124	; 0x7c
	enum status_code status;

	/* T8 configuration object data */
	uint8_t t8_object[] = {
  400706:	4c54      	ldr	r4, [pc, #336]	; (400858 <mxt_init+0x158>)
  400708:	ab1b      	add	r3, sp, #108	; 0x6c
  40070a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  40070e:	c303      	stmia	r3!, {r0, r1}
  400710:	801a      	strh	r2, [r3, #0]
		0x0d, 0x00, 0x05, 0x0a, 0x4b, 0x00, 0x00,
		0x00, 0x32, 0x19
	};

	/* T9 configuration object data */
	uint8_t t9_object[] = {
  400712:	ad12      	add	r5, sp, #72	; 0x48
  400714:	f104 060c 	add.w	r6, r4, #12
  400718:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  40071a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  40071c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  40071e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  400720:	6833      	ldr	r3, [r6, #0]
  400722:	602b      	str	r3, [r5, #0]
		0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x02,
		0x02
	};

	/* T46 configuration object data */
	uint8_t t46_object[] = {
  400724:	ab0f      	add	r3, sp, #60	; 0x3c
  400726:	f104 0230 	add.w	r2, r4, #48	; 0x30
  40072a:	ca07      	ldmia	r2, {r0, r1, r2}
  40072c:	c303      	stmia	r3!, {r0, r1}
  40072e:	701a      	strb	r2, [r3, #0]
		0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x03,
		0x00, 0x00
	};
	
	/* T56 configuration object data */
	uint8_t t56_object[] = {
  400730:	ad06      	add	r5, sp, #24
  400732:	343c      	adds	r4, #60	; 0x3c
  400734:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  400736:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  400738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  40073a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  40073c:	6823      	ldr	r3, [r4, #0]
  40073e:	702b      	strb	r3, [r5, #0]
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00
	};

	/* TWI configuration */
	twihs_master_options_t twi_opt = {
  400740:	2500      	movs	r5, #0
  400742:	9503      	str	r5, [sp, #12]
  400744:	9505      	str	r5, [sp, #20]
  400746:	4b45      	ldr	r3, [pc, #276]	; (40085c <mxt_init+0x15c>)
  400748:	9304      	str	r3, [sp, #16]
  40074a:	274a      	movs	r7, #74	; 0x4a
  40074c:	f88d 7014 	strb.w	r7, [sp, #20]
		.speed = MXT_TWI_SPEED,
		.chip  = MAXTOUCH_TWI_ADDRESS,
	};
	
	/* Configure IRQ pin for MaxTouch */
	pio_configure(PIOD, PIO_INPUT, PIO_PD28, PIO_PULLUP);
  400750:	2301      	movs	r3, #1
  400752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400756:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40075a:	4841      	ldr	r0, [pc, #260]	; (400860 <mxt_init+0x160>)
  40075c:	4c41      	ldr	r4, [pc, #260]	; (400864 <mxt_init+0x164>)
  40075e:	47a0      	blx	r4
typedef twihs_packet_t twihs_package_t;

static inline uint32_t twihs_master_setup(twihs_master_t p_twihs,
		twihs_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
  400760:	4b41      	ldr	r3, [pc, #260]	; (400868 <mxt_init+0x168>)
  400762:	9303      	str	r3, [sp, #12]
	p_opt->smbus      = 0;
  400764:	f88d 5015 	strb.w	r5, [sp, #21]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400768:	2013      	movs	r0, #19
  40076a:	4b40      	ldr	r3, [pc, #256]	; (40086c <mxt_init+0x16c>)
  40076c:	4798      	blx	r3
#endif		
	} else {
		// Do Nothing
	}
#endif
	return (twihs_master_init(p_twihs, p_opt));
  40076e:	4e40      	ldr	r6, [pc, #256]	; (400870 <mxt_init+0x170>)
  400770:	a903      	add	r1, sp, #12
  400772:	4630      	mov	r0, r6
  400774:	4b3f      	ldr	r3, [pc, #252]	; (400874 <mxt_init+0x174>)
  400776:	4798      	blx	r3

	status = (enum status_code)twihs_master_setup(MAXTOUCH_TWI_INTERFACE, &twi_opt);
	Assert(status == STATUS_OK);

	/* Initialize the maXTouch device */
	status = mxt_init_device(&device, MAXTOUCH_TWI_INTERFACE,
  400778:	4c3f      	ldr	r4, [pc, #252]	; (400878 <mxt_init+0x178>)
  40077a:	237c      	movs	r3, #124	; 0x7c
  40077c:	463a      	mov	r2, r7
  40077e:	4631      	mov	r1, r6
  400780:	4620      	mov	r0, r4
  400782:	4e3e      	ldr	r6, [pc, #248]	; (40087c <mxt_init+0x17c>)
  400784:	47b0      	blx	r6
			MAXTOUCH_TWI_ADDRESS, MAXTOUCH_XPRO_CHG_PIO);
	Assert(status == STATUS_OK);

	/* Issue soft reset of maXTouch device by writing a non-zero value to
	 * the reset register */
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  400786:	462a      	mov	r2, r5
  400788:	2106      	movs	r1, #6
  40078a:	4620      	mov	r0, r4
  40078c:	4e3c      	ldr	r6, [pc, #240]	; (400880 <mxt_init+0x180>)
  40078e:	47b0      	blx	r6
  400790:	2201      	movs	r2, #1
  400792:	4601      	mov	r1, r0
  400794:	4620      	mov	r0, r4
  400796:	4f3b      	ldr	r7, [pc, #236]	; (400884 <mxt_init+0x184>)
  400798:	47b8      	blx	r7
			MXT_GEN_COMMANDPROCESSOR_T6, 0)
			+ MXT_GEN_COMMANDPROCESSOR_RESET, 0x01);

	/* Wait for the reset of the device to complete */
	delay_ms(MXT_RESET_TIME);
  40079a:	483b      	ldr	r0, [pc, #236]	; (400888 <mxt_init+0x188>)
  40079c:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 400894 <mxt_init+0x194>
  4007a0:	47c8      	blx	r9

	// Write data to configuration registers in T7 configuration object 
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  4007a2:	462a      	mov	r2, r5
  4007a4:	2107      	movs	r1, #7
  4007a6:	4620      	mov	r0, r4
  4007a8:	47b0      	blx	r6
  4007aa:	2220      	movs	r2, #32
  4007ac:	4601      	mov	r1, r0
  4007ae:	4620      	mov	r0, r4
  4007b0:	47b8      	blx	r7
			MXT_GEN_POWERCONFIG_T7, 0) + 0, 0x20);
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  4007b2:	462a      	mov	r2, r5
  4007b4:	2107      	movs	r1, #7
  4007b6:	4620      	mov	r0, r4
  4007b8:	47b0      	blx	r6
  4007ba:	1c41      	adds	r1, r0, #1
  4007bc:	2210      	movs	r2, #16
  4007be:	b289      	uxth	r1, r1
  4007c0:	4620      	mov	r0, r4
  4007c2:	47b8      	blx	r7
			MXT_GEN_POWERCONFIG_T7, 0) + 1, 0x10);
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  4007c4:	462a      	mov	r2, r5
  4007c6:	2107      	movs	r1, #7
  4007c8:	4620      	mov	r0, r4
  4007ca:	47b0      	blx	r6
  4007cc:	1c81      	adds	r1, r0, #2
  4007ce:	224b      	movs	r2, #75	; 0x4b
  4007d0:	b289      	uxth	r1, r1
  4007d2:	4620      	mov	r0, r4
  4007d4:	47b8      	blx	r7
			MXT_GEN_POWERCONFIG_T7, 0) + 2, 0x4b);
	mxt_write_config_reg(&device, mxt_get_object_address(&device,
  4007d6:	462a      	mov	r2, r5
  4007d8:	2107      	movs	r1, #7
  4007da:	4620      	mov	r0, r4
  4007dc:	47b0      	blx	r6
  4007de:	1cc1      	adds	r1, r0, #3
  4007e0:	2284      	movs	r2, #132	; 0x84
  4007e2:	b289      	uxth	r1, r1
  4007e4:	4620      	mov	r0, r4
  4007e6:	47b8      	blx	r7
			MXT_GEN_POWERCONFIG_T7, 0) + 3, 0x84);

	// Write predefined configuration data to configuration objects 
	mxt_write_config_object(&device, mxt_get_object_address(&device,
  4007e8:	462a      	mov	r2, r5
  4007ea:	2108      	movs	r1, #8
  4007ec:	4620      	mov	r0, r4
  4007ee:	47b0      	blx	r6
  4007f0:	aa1b      	add	r2, sp, #108	; 0x6c
  4007f2:	4601      	mov	r1, r0
  4007f4:	4620      	mov	r0, r4
  4007f6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 400898 <mxt_init+0x198>
  4007fa:	47c0      	blx	r8
			MXT_GEN_ACQUISITIONCONFIG_T8, 0), &t8_object);
	mxt_write_config_object(&device, mxt_get_object_address(&device,
  4007fc:	462a      	mov	r2, r5
  4007fe:	2109      	movs	r1, #9
  400800:	4620      	mov	r0, r4
  400802:	47b0      	blx	r6
  400804:	aa12      	add	r2, sp, #72	; 0x48
  400806:	4601      	mov	r1, r0
  400808:	4620      	mov	r0, r4
  40080a:	47c0      	blx	r8
			MXT_TOUCH_MULTITOUCHSCREEN_T9, 0), &t9_object);
	mxt_write_config_object(&device, mxt_get_object_address(&device,
  40080c:	462a      	mov	r2, r5
  40080e:	212e      	movs	r1, #46	; 0x2e
  400810:	4620      	mov	r0, r4
  400812:	47b0      	blx	r6
  400814:	aa0f      	add	r2, sp, #60	; 0x3c
  400816:	4601      	mov	r1, r0
  400818:	4620      	mov	r0, r4
  40081a:	47c0      	blx	r8
			MXT_SPT_CTE_CONFIGURATION_T46, 0), &t46_object);
	mxt_write_config_object(&device, mxt_get_object_address(&device,
  40081c:	462a      	mov	r2, r5
  40081e:	2138      	movs	r1, #56	; 0x38
  400820:	4620      	mov	r0, r4
  400822:	47b0      	blx	r6
  400824:	aa06      	add	r2, sp, #24
  400826:	4601      	mov	r1, r0
  400828:	4620      	mov	r0, r4
  40082a:	47c0      	blx	r8
			MXT_PROCI_SHIELDLESS_T56, 0), &t56_object);

	// Issue recalibration command to maXTouch device by writing a non-zero
	 // value to the calibrate register 
	mxt_write_config_reg(&device, mxt_get_object_address(&device, MXT_GEN_COMMANDPROCESSOR_T6, 0) + MXT_GEN_COMMANDPROCESSOR_CALIBRATE, 0x01); 
  40082c:	462a      	mov	r2, r5
  40082e:	2106      	movs	r1, #6
  400830:	4620      	mov	r0, r4
  400832:	47b0      	blx	r6
  400834:	1c81      	adds	r1, r0, #2
  400836:	2201      	movs	r2, #1
  400838:	b289      	uxth	r1, r1
  40083a:	4620      	mov	r0, r4
  40083c:	47b8      	blx	r7
	
	delay_ms(100); 
  40083e:	4813      	ldr	r0, [pc, #76]	; (40088c <mxt_init+0x18c>)
  400840:	47c8      	blx	r9
  400842:	24fa      	movs	r4, #250	; 0xfa
		mxt_read_message(data, &message);
  400844:	4e0c      	ldr	r6, [pc, #48]	; (400878 <mxt_init+0x178>)
  400846:	4d12      	ldr	r5, [pc, #72]	; (400890 <mxt_init+0x190>)
  400848:	4669      	mov	r1, sp
  40084a:	4630      	mov	r0, r6
  40084c:	47a8      	blx	r5
	} while (--count);
  40084e:	3c01      	subs	r4, #1
  400850:	d1fa      	bne.n	400848 <mxt_init+0x148>
	
	// Make chg pin high 
	mxt_make_highchg(&device);
}
  400852:	b01f      	add	sp, #124	; 0x7c
  400854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400858:	00403304 	.word	0x00403304
  40085c:	00061a80 	.word	0x00061a80
  400860:	400e1400 	.word	0x400e1400
  400864:	004017f9 	.word	0x004017f9
  400868:	08f0d180 	.word	0x08f0d180
  40086c:	00401a65 	.word	0x00401a65
  400870:	40018000 	.word	0x40018000
  400874:	00401241 	.word	0x00401241
  400878:	20400bbc 	.word	0x20400bbc
  40087c:	0040089d 	.word	0x0040089d
  400880:	00400b35 	.word	0x00400b35
  400884:	00400bed 	.word	0x00400bed
  400888:	003228d8 	.word	0x003228d8
  40088c:	004d2b25 	.word	0x004d2b25
  400890:	00400c59 	.word	0x00400c59
  400894:	20400001 	.word	0x20400001
  400898:	00400b75 	.word	0x00400b75

0040089c <mxt_init_device>:
 * \param chgpin IOPORT pin instance attached to the maXTouch device's /CHG pin
 * \return Operation result status code
 */
status_code_t mxt_init_device(struct mxt_device *device,
		twihs_master_t interface, uint8_t chip_adr, uint32_t chgpin)
{
  40089c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40089e:	b087      	sub	sp, #28
  4008a0:	4604      	mov	r4, r0
  4008a2:	460e      	mov	r6, r1
  4008a4:	4617      	mov	r7, r2
	int8_t status;

	/* Set TWI interface, TWI address and CHG-pin of the maXTouch device. */
	device->interface = interface;
  4008a6:	6081      	str	r1, [r0, #8]
	device->mxt_chip_adr = chip_adr;
  4008a8:	7302      	strb	r2, [r0, #12]
	device->chgpin = chgpin;
  4008aa:	6183      	str	r3, [r0, #24]
	device->handler = NULL;
  4008ac:	2500      	movs	r5, #0
  4008ae:	6105      	str	r5, [r0, #16]
			malloc(sizeof(struct mxt_info_object));
  4008b0:	2007      	movs	r0, #7
  4008b2:	4b9d      	ldr	r3, [pc, #628]	; (400b28 <mxt_init_device+0x28c>)
  4008b4:	4798      	blx	r3
	device->info_object = (struct mxt_info_object *)
  4008b6:	6020      	str	r0, [r4, #0]
	twihs_package_t packet = {
  4008b8:	9501      	str	r5, [sp, #4]
  4008ba:	9505      	str	r5, [sp, #20]
  4008bc:	2302      	movs	r3, #2
  4008be:	9302      	str	r3, [sp, #8]
  4008c0:	9003      	str	r0, [sp, #12]
  4008c2:	2307      	movs	r3, #7
  4008c4:	9304      	str	r3, [sp, #16]
  4008c6:	f88d 7014 	strb.w	r7, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4008ca:	a901      	add	r1, sp, #4
  4008cc:	4630      	mov	r0, r6
  4008ce:	4b97      	ldr	r3, [pc, #604]	; (400b2c <mxt_init_device+0x290>)
  4008d0:	4798      	blx	r3
  4008d2:	1b40      	subs	r0, r0, r5
  4008d4:	bf18      	it	ne
  4008d6:	2001      	movne	r0, #1
  4008d8:	4240      	negs	r0, r0
	if ((status = mxt_read_id_block(device)) != STATUS_OK) {
  4008da:	b108      	cbz	r0, 4008e0 <mxt_init_device+0x44>
	}

	device->multitouch_report_offset = status;

	return STATUS_OK;
}
  4008dc:	b007      	add	sp, #28
  4008de:	bdf0      	pop	{r4, r5, r6, r7, pc}
			malloc(device->info_object->obj_count *
  4008e0:	6825      	ldr	r5, [r4, #0]
  4008e2:	79a8      	ldrb	r0, [r5, #6]
  4008e4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4008e8:	0040      	lsls	r0, r0, #1
  4008ea:	4b8f      	ldr	r3, [pc, #572]	; (400b28 <mxt_init_device+0x28c>)
  4008ec:	4798      	blx	r3
	device->object_list = (struct mxt_object *)
  4008ee:	6060      	str	r0, [r4, #4]
	twihs_package_t packet = {
  4008f0:	2300      	movs	r3, #0
  4008f2:	9301      	str	r3, [sp, #4]
  4008f4:	9304      	str	r3, [sp, #16]
  4008f6:	9305      	str	r3, [sp, #20]
  4008f8:	2307      	movs	r3, #7
  4008fa:	f88d 3004 	strb.w	r3, [sp, #4]
  4008fe:	2302      	movs	r3, #2
  400900:	9302      	str	r3, [sp, #8]
  400902:	9003      	str	r0, [sp, #12]
		.length       = device->info_object->obj_count *
  400904:	79ab      	ldrb	r3, [r5, #6]
  400906:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40090a:	005b      	lsls	r3, r3, #1
	twihs_package_t packet = {
  40090c:	9304      	str	r3, [sp, #16]
  40090e:	7b23      	ldrb	r3, [r4, #12]
  400910:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  400914:	a901      	add	r1, sp, #4
  400916:	68a0      	ldr	r0, [r4, #8]
  400918:	4b84      	ldr	r3, [pc, #528]	; (400b2c <mxt_init_device+0x290>)
  40091a:	4798      	blx	r3
  40091c:	3000      	adds	r0, #0
  40091e:	bf18      	it	ne
  400920:	2001      	movne	r0, #1
  400922:	4240      	negs	r0, r0
	if (status != STATUS_OK) {
  400924:	2800      	cmp	r0, #0
  400926:	d1d9      	bne.n	4008dc <mxt_init_device+0x40>
	uint8_t *id_pointer = (uint8_t *)device->info_object;
  400928:	6827      	ldr	r7, [r4, #0]
	uint8_t *objects_pointer = (uint8_t *)device->object_list;
  40092a:	6860      	ldr	r0, [r4, #4]
			(device->info_object->obj_count *
  40092c:	79bb      	ldrb	r3, [r7, #6]
  40092e:	eb03 0643 	add.w	r6, r3, r3, lsl #1
  400932:	0076      	lsls	r6, r6, #1
	crc_area_size = MXT_ID_BLOCK_SIZE +
  400934:	3607      	adds	r6, #7
  400936:	b2b6      	uxth	r6, r6
  400938:	463a      	mov	r2, r7
  40093a:	3706      	adds	r7, #6
	uint32_t crc_tmp = 0;
  40093c:	2100      	movs	r1, #0
		result ^= crcpoly;
  40093e:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 400b30 <mxt_init_device+0x294>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  400942:	f892 e001 	ldrb.w	lr, [r2, #1]
  400946:	7815      	ldrb	r5, [r2, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  400948:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
  40094c:	ea85 0141 	eor.w	r1, r5, r1, lsl #1
	if (result & 0x1000000) {
  400950:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
		result ^= crcpoly;
  400954:	bf18      	it	ne
  400956:	ea81 010c 	eorne.w	r1, r1, ip
  40095a:	3202      	adds	r2, #2
	for (i = 0; i < MXT_ID_BLOCK_SIZE - 1; i += 2) {
  40095c:	42ba      	cmp	r2, r7
  40095e:	d1f0      	bne.n	400942 <mxt_init_device+0xa6>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  400960:	7802      	ldrb	r2, [r0, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  400962:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400966:	ea83 0241 	eor.w	r2, r3, r1, lsl #1
	if (result & 0x1000000) {
  40096a:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  40096e:	d003      	beq.n	400978 <mxt_init_device+0xdc>
		result ^= crcpoly;
  400970:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  400974:	f082 021b 	eor.w	r2, r2, #27
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  400978:	f1a6 0708 	sub.w	r7, r6, #8
  40097c:	2f01      	cmp	r7, #1
  40097e:	dd12      	ble.n	4009a6 <mxt_init_device+0x10a>
  400980:	2301      	movs	r3, #1
		result ^= crcpoly;
  400982:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 400b30 <mxt_init_device+0x294>
		crc_tmp = mxt_crc_24(crc_tmp, objects_pointer[i],
  400986:	18c1      	adds	r1, r0, r3
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  400988:	784d      	ldrb	r5, [r1, #1]
  40098a:	5cc1      	ldrb	r1, [r0, r3]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  40098c:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  400990:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
	if (result & 0x1000000) {
  400994:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		result ^= crcpoly;
  400998:	bf18      	it	ne
  40099a:	ea82 020e 	eorne.w	r2, r2, lr
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  40099e:	3302      	adds	r3, #2
  4009a0:	b29b      	uxth	r3, r3
  4009a2:	42bb      	cmp	r3, r7
  4009a4:	dbef      	blt.n	400986 <mxt_init_device+0xea>
	crc_tmp = mxt_crc_24(crc_tmp,
  4009a6:	4430      	add	r0, r6
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4009a8:	f810 3c08 	ldrb.w	r3, [r0, #-8]
  4009ac:	ea83 0242 	eor.w	r2, r3, r2, lsl #1
	if (result & 0x1000000) {
  4009b0:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  4009b4:	d003      	beq.n	4009be <mxt_init_device+0x122>
		result ^= crcpoly;
  4009b6:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  4009ba:	f082 021b 	eor.w	r2, r2, #27
	*crc = (crc_tmp & 0x00FFFFFF);
  4009be:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	twihs_package_t packet = {
  4009c2:	2300      	movs	r3, #0
  4009c4:	9301      	str	r3, [sp, #4]
  4009c6:	9305      	str	r3, [sp, #20]
  4009c8:	f88d 6004 	strb.w	r6, [sp, #4]
  4009cc:	0a36      	lsrs	r6, r6, #8
  4009ce:	f88d 6005 	strb.w	r6, [sp, #5]
  4009d2:	2302      	movs	r3, #2
  4009d4:	9302      	str	r3, [sp, #8]
  4009d6:	f8cd d00c 	str.w	sp, [sp, #12]
  4009da:	2303      	movs	r3, #3
  4009dc:	9304      	str	r3, [sp, #16]
  4009de:	7b23      	ldrb	r3, [r4, #12]
  4009e0:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4009e4:	a901      	add	r1, sp, #4
  4009e6:	68a0      	ldr	r0, [r4, #8]
  4009e8:	4b50      	ldr	r3, [pc, #320]	; (400b2c <mxt_init_device+0x290>)
  4009ea:	4798      	blx	r3
  4009ec:	b328      	cbz	r0, 400a3a <mxt_init_device+0x19e>
		return ERR_IO_ERROR;
  4009ee:	f04f 33ff 	mov.w	r3, #4294967295
	if (crc_calculated != crc_read) {
  4009f2:	42ab      	cmp	r3, r5
  4009f4:	f040 808b 	bne.w	400b0e <mxt_init_device+0x272>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4009f8:	6825      	ldr	r5, [r4, #0]
  4009fa:	79a8      	ldrb	r0, [r5, #6]
  4009fc:	b198      	cbz	r0, 400a26 <mxt_init_device+0x18a>
  4009fe:	2300      	movs	r3, #0
  400a00:	3301      	adds	r3, #1
  400a02:	b2da      	uxtb	r2, r3
  400a04:	4290      	cmp	r0, r2
  400a06:	d8fb      	bhi.n	400a00 <mxt_init_device+0x164>
		tot_report_ids += (device->object_list[i].num_report_ids);
  400a08:	6862      	ldr	r2, [r4, #4]
  400a0a:	1e43      	subs	r3, r0, #1
  400a0c:	b2db      	uxtb	r3, r3
  400a0e:	3301      	adds	r3, #1
  400a10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  400a14:	eb02 0143 	add.w	r1, r2, r3, lsl #1
  400a18:	2000      	movs	r0, #0
  400a1a:	7953      	ldrb	r3, [r2, #5]
  400a1c:	4418      	add	r0, r3
  400a1e:	b2c0      	uxtb	r0, r0
  400a20:	3206      	adds	r2, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400a22:	4291      	cmp	r1, r2
  400a24:	d1f9      	bne.n	400a1a <mxt_init_device+0x17e>
			malloc(sizeof(struct mxt_report_id_map) *
  400a26:	0040      	lsls	r0, r0, #1
  400a28:	4b3f      	ldr	r3, [pc, #252]	; (400b28 <mxt_init_device+0x28c>)
  400a2a:	4798      	blx	r3
	device->report_id_map = (struct mxt_report_id_map *)
  400a2c:	6160      	str	r0, [r4, #20]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400a2e:	79ab      	ldrb	r3, [r5, #6]
  400a30:	b173      	cbz	r3, 400a50 <mxt_init_device+0x1b4>
  400a32:	2700      	movs	r7, #0
  400a34:	2601      	movs	r6, #1
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  400a36:	46be      	mov	lr, r7
  400a38:	e037      	b.n	400aaa <mxt_init_device+0x20e>
		return ((uint32_t)crc[2] << 16) | ((uint16_t)crc[1] << 8) | crc[0];
  400a3a:	f89d 2002 	ldrb.w	r2, [sp, #2]
  400a3e:	f89d 3000 	ldrb.w	r3, [sp]
  400a42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400a46:	f89d 2001 	ldrb.w	r2, [sp, #1]
  400a4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400a4e:	e7d0      	b.n	4009f2 <mxt_init_device+0x156>
		return ERR_BAD_DATA;
  400a50:	f06f 0003 	mvn.w	r0, #3
  400a54:	e742      	b.n	4008dc <mxt_init_device+0x40>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  400a56:	3001      	adds	r0, #1
  400a58:	b2c0      	uxtb	r0, r0
  400a5a:	6862      	ldr	r2, [r4, #4]
  400a5c:	1953      	adds	r3, r2, r5
  400a5e:	7919      	ldrb	r1, [r3, #4]
  400a60:	4281      	cmp	r1, r0
  400a62:	d31c      	bcc.n	400a9e <mxt_init_device+0x202>
			if (device->object_list[i].num_report_ids != 0) {
  400a64:	795b      	ldrb	r3, [r3, #5]
  400a66:	2b00      	cmp	r3, #0
  400a68:	d0f5      	beq.n	400a56 <mxt_init_device+0x1ba>
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  400a6a:	6862      	ldr	r2, [r4, #4]
  400a6c:	442a      	add	r2, r5
  400a6e:	7953      	ldrb	r3, [r2, #5]
  400a70:	2b00      	cmp	r3, #0
  400a72:	d0f0      	beq.n	400a56 <mxt_init_device+0x1ba>
  400a74:	4633      	mov	r3, r6
							device->object_list[i].type;
  400a76:	7811      	ldrb	r1, [r2, #0]
					device->report_id_map[id_index].object_type =
  400a78:	6962      	ldr	r2, [r4, #20]
  400a7a:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
					device->report_id_map[id_index].instance = j;
  400a7e:	6962      	ldr	r2, [r4, #20]
  400a80:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  400a84:	7050      	strb	r0, [r2, #1]
					id_index++;
  400a86:	3301      	adds	r3, #1
  400a88:	b2db      	uxtb	r3, r3
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  400a8a:	6862      	ldr	r2, [r4, #4]
  400a8c:	442a      	add	r2, r5
  400a8e:	1b99      	subs	r1, r3, r6
  400a90:	f892 c005 	ldrb.w	ip, [r2, #5]
  400a94:	b2c9      	uxtb	r1, r1
  400a96:	458c      	cmp	ip, r1
  400a98:	d8ed      	bhi.n	400a76 <mxt_init_device+0x1da>
					id_index++;
  400a9a:	461e      	mov	r6, r3
  400a9c:	e7db      	b.n	400a56 <mxt_init_device+0x1ba>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400a9e:	3701      	adds	r7, #1
  400aa0:	b2ff      	uxtb	r7, r7
  400aa2:	6823      	ldr	r3, [r4, #0]
  400aa4:	799b      	ldrb	r3, [r3, #6]
  400aa6:	429f      	cmp	r7, r3
  400aa8:	d207      	bcs.n	400aba <mxt_init_device+0x21e>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  400aaa:	eb07 0347 	add.w	r3, r7, r7, lsl #1
  400aae:	005a      	lsls	r2, r3, #1
  400ab0:	4615      	mov	r5, r2
  400ab2:	6863      	ldr	r3, [r4, #4]
  400ab4:	4413      	add	r3, r2
  400ab6:	4670      	mov	r0, lr
  400ab8:	e7d4      	b.n	400a64 <mxt_init_device+0x1c8>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400aba:	b35b      	cbz	r3, 400b14 <mxt_init_device+0x278>
  400abc:	4610      	mov	r0, r2
  400abe:	3b01      	subs	r3, #1
  400ac0:	b2db      	uxtb	r3, r3
  400ac2:	3301      	adds	r3, #1
  400ac4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  400ac8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  400acc:	2100      	movs	r1, #0
		tot_report_ids += (device->object_list[i].num_report_ids);
  400ace:	7943      	ldrb	r3, [r0, #5]
  400ad0:	4419      	add	r1, r3
  400ad2:	b2c9      	uxtb	r1, r1
  400ad4:	3006      	adds	r0, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400ad6:	4282      	cmp	r2, r0
  400ad8:	d1f9      	bne.n	400ace <mxt_init_device+0x232>
	for (i = 0; i < tot_rpt_id; ++i) {
  400ada:	b1f1      	cbz	r1, 400b1a <mxt_init_device+0x27e>
		if (device->report_id_map[i].object_type == object_type) {
  400adc:	6962      	ldr	r2, [r4, #20]
  400ade:	7813      	ldrb	r3, [r2, #0]
  400ae0:	2b09      	cmp	r3, #9
  400ae2:	d00f      	beq.n	400b04 <mxt_init_device+0x268>
  400ae4:	2300      	movs	r3, #0
	for (i = 0; i < tot_rpt_id; ++i) {
  400ae6:	3301      	adds	r3, #1
  400ae8:	b2db      	uxtb	r3, r3
  400aea:	428b      	cmp	r3, r1
  400aec:	d00c      	beq.n	400b08 <mxt_init_device+0x26c>
		if (device->report_id_map[i].object_type == object_type) {
  400aee:	f812 0f02 	ldrb.w	r0, [r2, #2]!
  400af2:	2809      	cmp	r0, #9
  400af4:	d1f7      	bne.n	400ae6 <mxt_init_device+0x24a>
			return i;
  400af6:	b25b      	sxtb	r3, r3
	if (status == -1) {
  400af8:	f1b3 3fff 	cmp.w	r3, #4294967295
  400afc:	d010      	beq.n	400b20 <mxt_init_device+0x284>
	device->multitouch_report_offset = status;
  400afe:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
  400b00:	2000      	movs	r0, #0
  400b02:	e6eb      	b.n	4008dc <mxt_init_device+0x40>
		if (device->report_id_map[i].object_type == object_type) {
  400b04:	2300      	movs	r3, #0
  400b06:	e7f6      	b.n	400af6 <mxt_init_device+0x25a>
		return ERR_BAD_DATA;
  400b08:	f06f 0003 	mvn.w	r0, #3
  400b0c:	e6e6      	b.n	4008dc <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  400b0e:	f06f 0003 	mvn.w	r0, #3
  400b12:	e6e3      	b.n	4008dc <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  400b14:	f06f 0003 	mvn.w	r0, #3
  400b18:	e6e0      	b.n	4008dc <mxt_init_device+0x40>
  400b1a:	f06f 0003 	mvn.w	r0, #3
  400b1e:	e6dd      	b.n	4008dc <mxt_init_device+0x40>
  400b20:	f06f 0003 	mvn.w	r0, #3
  400b24:	e6da      	b.n	4008dc <mxt_init_device+0x40>
  400b26:	bf00      	nop
  400b28:	00401e0d 	.word	0x00401e0d
  400b2c:	00401275 	.word	0x00401275
  400b30:	0080001b 	.word	0x0080001b

00400b34 <mxt_get_object_address>:
uint16_t mxt_get_object_address(struct mxt_device *device, uint8_t object_id,
		uint8_t instance)
{
	uint8_t i;

	for (i = 0; i < device->info_object->obj_count; i++) {
  400b34:	6803      	ldr	r3, [r0, #0]
  400b36:	799a      	ldrb	r2, [r3, #6]
  400b38:	b1d2      	cbz	r2, 400b70 <mxt_get_object_address+0x3c>
{
  400b3a:	b410      	push	{r4}
		if (object_id == device->object_list[i].type) {
  400b3c:	6844      	ldr	r4, [r0, #4]
  400b3e:	7823      	ldrb	r3, [r4, #0]
  400b40:	428b      	cmp	r3, r1
  400b42:	d00e      	beq.n	400b62 <mxt_get_object_address+0x2e>
  400b44:	1da3      	adds	r3, r4, #6
  400b46:	3a01      	subs	r2, #1
  400b48:	b2d2      	uxtb	r2, r2
  400b4a:	3201      	adds	r2, #1
  400b4c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  400b50:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; i++) {
  400b54:	4293      	cmp	r3, r2
  400b56:	d009      	beq.n	400b6c <mxt_get_object_address+0x38>
		if (object_id == device->object_list[i].type) {
  400b58:	461c      	mov	r4, r3
  400b5a:	f813 0b06 	ldrb.w	r0, [r3], #6
  400b5e:	4288      	cmp	r0, r1
  400b60:	d1f8      	bne.n	400b54 <mxt_get_object_address+0x20>
			return device->object_list[i].start_address;
  400b62:	f8b4 0001 	ldrh.w	r0, [r4, #1]
		}
	}

	return 0;
}
  400b66:	f85d 4b04 	ldr.w	r4, [sp], #4
  400b6a:	4770      	bx	lr
	return 0;
  400b6c:	2000      	movs	r0, #0
  400b6e:	e7fa      	b.n	400b66 <mxt_get_object_address+0x32>
  400b70:	2000      	movs	r0, #0
  400b72:	4770      	bx	lr

00400b74 <mxt_write_config_object>:
 * \param *obj_data Pointer to memory buffer containing object data
 * \result Operation result status code
 */
status_code_t mxt_write_config_object(struct mxt_device *device,
		mxt_memory_adr memory_adr, void *obj_data)
{
  400b74:	b530      	push	{r4, r5, lr}
  400b76:	b087      	sub	sp, #28
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  400b78:	2300      	movs	r3, #0
  400b7a:	9301      	str	r3, [sp, #4]
  400b7c:	9304      	str	r3, [sp, #16]
  400b7e:	9305      	str	r3, [sp, #20]
  400b80:	f88d 1004 	strb.w	r1, [sp, #4]
  400b84:	0a0b      	lsrs	r3, r1, #8
  400b86:	f88d 3005 	strb.w	r3, [sp, #5]
  400b8a:	2302      	movs	r3, #2
  400b8c:	9302      	str	r3, [sp, #8]
  400b8e:	9203      	str	r2, [sp, #12]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400b90:	6803      	ldr	r3, [r0, #0]
  400b92:	799a      	ldrb	r2, [r3, #6]
  400b94:	b1ba      	cbz	r2, 400bc6 <mxt_write_config_object+0x52>
		if (device->object_list[i].start_address == mem_adr) {
  400b96:	6844      	ldr	r4, [r0, #4]
  400b98:	f8b4 3001 	ldrh.w	r3, [r4, #1]
  400b9c:	428b      	cmp	r3, r1
  400b9e:	d00f      	beq.n	400bc0 <mxt_write_config_object+0x4c>
  400ba0:	1da3      	adds	r3, r4, #6
  400ba2:	3a01      	subs	r2, #1
  400ba4:	b2d2      	uxtb	r2, r2
  400ba6:	3201      	adds	r2, #1
  400ba8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  400bac:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400bb0:	4293      	cmp	r3, r2
  400bb2:	d016      	beq.n	400be2 <mxt_write_config_object+0x6e>
		if (device->object_list[i].start_address == mem_adr) {
  400bb4:	461c      	mov	r4, r3
  400bb6:	3306      	adds	r3, #6
  400bb8:	f8b4 5001 	ldrh.w	r5, [r4, #1]
  400bbc:	428d      	cmp	r5, r1
  400bbe:	d1f7      	bne.n	400bb0 <mxt_write_config_object+0x3c>
			return (device->object_list[i].size + 1);
  400bc0:	78e2      	ldrb	r2, [r4, #3]
  400bc2:	3201      	adds	r2, #1
  400bc4:	b2d2      	uxtb	r2, r2
		.addr[0]      = memory_adr,
		.addr[1]      = memory_adr >> 8,
		.addr_length  = sizeof(mxt_memory_adr),
		.chip         = device->mxt_chip_adr,
		.buffer       = obj_data,
		.length       = mxt_get_object_size(device, memory_adr)
  400bc6:	9204      	str	r2, [sp, #16]
	twihs_package_t packet = {
  400bc8:	7b03      	ldrb	r3, [r0, #12]
  400bca:	f88d 3014 	strb.w	r3, [sp, #20]
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  400bce:	a901      	add	r1, sp, #4
  400bd0:	6880      	ldr	r0, [r0, #8]
  400bd2:	4b05      	ldr	r3, [pc, #20]	; (400be8 <mxt_write_config_object+0x74>)
  400bd4:	4798      	blx	r3
  400bd6:	3000      	adds	r0, #0
  400bd8:	bf18      	it	ne
  400bda:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}

}
  400bdc:	4240      	negs	r0, r0
  400bde:	b007      	add	sp, #28
  400be0:	bd30      	pop	{r4, r5, pc}
	return 0;
  400be2:	2200      	movs	r2, #0
  400be4:	e7ef      	b.n	400bc6 <mxt_write_config_object+0x52>
  400be6:	bf00      	nop
  400be8:	00401321 	.word	0x00401321

00400bec <mxt_write_config_reg>:
 * \param value Value to be written to register
 * \result Operation result status code
 */
status_code_t mxt_write_config_reg(struct mxt_device *device,
		mxt_memory_adr memory_adr, uint8_t value)
{
  400bec:	b500      	push	{lr}
  400bee:	b089      	sub	sp, #36	; 0x24
  400bf0:	f88d 2007 	strb.w	r2, [sp, #7]
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  400bf4:	2300      	movs	r3, #0
  400bf6:	9303      	str	r3, [sp, #12]
  400bf8:	9307      	str	r3, [sp, #28]
  400bfa:	f88d 100c 	strb.w	r1, [sp, #12]
  400bfe:	0a09      	lsrs	r1, r1, #8
  400c00:	f88d 100d 	strb.w	r1, [sp, #13]
  400c04:	2302      	movs	r3, #2
  400c06:	9304      	str	r3, [sp, #16]
  400c08:	f10d 0307 	add.w	r3, sp, #7
  400c0c:	9305      	str	r3, [sp, #20]
  400c0e:	2301      	movs	r3, #1
  400c10:	9306      	str	r3, [sp, #24]
  400c12:	7b03      	ldrb	r3, [r0, #12]
  400c14:	f88d 301c 	strb.w	r3, [sp, #28]
		.chip         = device->mxt_chip_adr,
		.buffer       = &value,
		.length       = sizeof(value)
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  400c18:	a903      	add	r1, sp, #12
  400c1a:	6880      	ldr	r0, [r0, #8]
  400c1c:	4b04      	ldr	r3, [pc, #16]	; (400c30 <mxt_write_config_reg+0x44>)
  400c1e:	4798      	blx	r3
  400c20:	3000      	adds	r0, #0
  400c22:	bf18      	it	ne
  400c24:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}
}
  400c26:	4240      	negs	r0, r0
  400c28:	b009      	add	sp, #36	; 0x24
  400c2a:	f85d fb04 	ldr.w	pc, [sp], #4
  400c2e:	bf00      	nop
  400c30:	00401321 	.word	0x00401321

00400c34 <mxt_is_message_pending>:
 * \param *device Pointer to mxt_device instance
 * \return Return /CHG pin status
 */
bool mxt_is_message_pending(struct mxt_device *device)
{
	if (ioport_get_pin_level(device->chgpin) == false) {
  400c34:	6982      	ldr	r2, [r0, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400c36:	4b07      	ldr	r3, [pc, #28]	; (400c54 <mxt_is_message_pending+0x20>)
  400c38:	eb03 1352 	add.w	r3, r3, r2, lsr #5
  400c3c:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400c3e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  400c40:	f002 021f 	and.w	r2, r2, #31
  400c44:	2301      	movs	r3, #1
  400c46:	fa03 f202 	lsl.w	r2, r3, r2
  400c4a:	420a      	tst	r2, r1
		return true;
	} else {
		return false;
	}
}
  400c4c:	bf0c      	ite	eq
  400c4e:	4618      	moveq	r0, r3
  400c50:	2000      	movne	r0, #0
  400c52:	4770      	bx	lr
  400c54:	00200707 	.word	0x00200707

00400c58 <mxt_read_message>:
 * \param *message Pointer to mxt_message instance
 * \return Operation result status code
 */
status_code_t mxt_read_message(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
  400c58:	b530      	push	{r4, r5, lr}
  400c5a:	b087      	sub	sp, #28
  400c5c:	4604      	mov	r4, r0
  400c5e:	460d      	mov	r5, r1
	uint16_t obj_adr = mxt_get_object_address(device,
  400c60:	2200      	movs	r2, #0
  400c62:	2105      	movs	r1, #5
  400c64:	4b0d      	ldr	r3, [pc, #52]	; (400c9c <mxt_read_message+0x44>)
  400c66:	4798      	blx	r3
			MXT_GEN_MESSAGEPROCESSOR_T5, 0);

	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  400c68:	2300      	movs	r3, #0
  400c6a:	9301      	str	r3, [sp, #4]
  400c6c:	9305      	str	r3, [sp, #20]
  400c6e:	f88d 0004 	strb.w	r0, [sp, #4]
  400c72:	0a00      	lsrs	r0, r0, #8
  400c74:	f88d 0005 	strb.w	r0, [sp, #5]
  400c78:	2302      	movs	r3, #2
  400c7a:	9302      	str	r3, [sp, #8]
  400c7c:	9503      	str	r5, [sp, #12]
  400c7e:	2309      	movs	r3, #9
  400c80:	9304      	str	r3, [sp, #16]
  400c82:	7b23      	ldrb	r3, [r4, #12]
  400c84:	f88d 3014 	strb.w	r3, [sp, #20]
		.buffer       = message,
		.length       = MXT_TWI_MSG_SIZE_T5
	};

	/* Read information from the slave */
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  400c88:	a901      	add	r1, sp, #4
  400c8a:	68a0      	ldr	r0, [r4, #8]
  400c8c:	4b04      	ldr	r3, [pc, #16]	; (400ca0 <mxt_read_message+0x48>)
  400c8e:	4798      	blx	r3
  400c90:	3000      	adds	r0, #0
  400c92:	bf18      	it	ne
  400c94:	2001      	movne	r0, #1
		return mxt_validate_message(&packet);
#else
		return STATUS_OK;
#endif
	}
}
  400c96:	4240      	negs	r0, r0
  400c98:	b007      	add	sp, #28
  400c9a:	bd30      	pop	{r4, r5, pc}
  400c9c:	00400b35 	.word	0x00400b35
  400ca0:	00401275 	.word	0x00401275

00400ca4 <mxt_read_touch_event>:
 * \param *touch_event Pointer to mxt_touch_event instance
 * \return Operation result status code
 */
status_code_t mxt_read_touch_event(struct mxt_device *device,
		struct mxt_touch_event *touch_event)
{
  400ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
  400ca6:	b085      	sub	sp, #20
  400ca8:	4604      	mov	r4, r0
  400caa:	460e      	mov	r6, r1
	uint8_t obj_type, status;
	struct mxt_conf_messageprocessor_t5 message;

	while (mxt_is_message_pending(device)) {
  400cac:	4d17      	ldr	r5, [pc, #92]	; (400d0c <mxt_read_touch_event+0x68>)
		if((status = mxt_read_message(device, &message)) != STATUS_OK) {
  400cae:	4f18      	ldr	r7, [pc, #96]	; (400d10 <mxt_read_touch_event+0x6c>)
	while (mxt_is_message_pending(device)) {
  400cb0:	4620      	mov	r0, r4
  400cb2:	47a8      	blx	r5
  400cb4:	b328      	cbz	r0, 400d02 <mxt_read_touch_event+0x5e>
		if((status = mxt_read_message(device, &message)) != STATUS_OK) {
  400cb6:	a901      	add	r1, sp, #4
  400cb8:	4620      	mov	r0, r4
  400cba:	47b8      	blx	r7
  400cbc:	4603      	mov	r3, r0
  400cbe:	bb10      	cbnz	r0, 400d06 <mxt_read_touch_event+0x62>
 * \return Operation
 */
enum mxt_object_type mxt_get_object_type(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
	return (enum mxt_object_type)(device->report_id_map[message->reportid].object_type);
  400cc0:	f89d 3004 	ldrb.w	r3, [sp, #4]
  400cc4:	6962      	ldr	r2, [r4, #20]
		if (obj_type == MXT_TOUCH_MULTITOUCHSCREEN_T9) {
  400cc6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
  400cca:	2a09      	cmp	r2, #9
  400ccc:	d1f0      	bne.n	400cb0 <mxt_read_touch_event+0xc>
			touch_event->id = (message.reportid -
  400cce:	7f22      	ldrb	r2, [r4, #28]
  400cd0:	1a9b      	subs	r3, r3, r2
  400cd2:	7033      	strb	r3, [r6, #0]
			touch_event->status = message.message[0];
  400cd4:	f89d 3005 	ldrb.w	r3, [sp, #5]
  400cd8:	7073      	strb	r3, [r6, #1]
					((message.message[3] & 0xf0) >> 4);
  400cda:	f89d 3008 	ldrb.w	r3, [sp, #8]
			touch_event->x = (message.message[1] << 4) |
  400cde:	f89d 1006 	ldrb.w	r1, [sp, #6]
					((message.message[3] & 0xf0) >> 4);
  400ce2:	091a      	lsrs	r2, r3, #4
			touch_event->x = (message.message[1] << 4) |
  400ce4:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
  400ce8:	8072      	strh	r2, [r6, #2]
			touch_event->y = (message.message[2] << 4) |
  400cea:	f89d 2007 	ldrb.w	r2, [sp, #7]
					(message.message[3] & 0x0f);
  400cee:	f003 030f 	and.w	r3, r3, #15
			touch_event->y = (message.message[2] << 4) |
  400cf2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  400cf6:	80b3      	strh	r3, [r6, #4]
			touch_event->size = message.message[4];
  400cf8:	f89d 3009 	ldrb.w	r3, [sp, #9]
  400cfc:	71b3      	strb	r3, [r6, #6]
			return STATUS_OK;
  400cfe:	2300      	movs	r3, #0
  400d00:	e001      	b.n	400d06 <mxt_read_touch_event+0x62>
	return ERR_BAD_DATA;
  400d02:	f06f 0303 	mvn.w	r3, #3
}
  400d06:	4618      	mov	r0, r3
  400d08:	b005      	add	sp, #20
  400d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400d0c:	00400c35 	.word	0x00400c35
  400d10:	00400c59 	.word	0x00400c59

00400d14 <ili9488_write_ram_prepare>:

/**
 * \brief Prepare to write GRAM data.
 */
static void ili9488_write_ram_prepare(void)
{
  400d14:	b508      	push	{r3, lr}
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  400d16:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400d1a:	4804      	ldr	r0, [pc, #16]	; (400d2c <ili9488_write_ram_prepare+0x18>)
  400d1c:	4b04      	ldr	r3, [pc, #16]	; (400d30 <ili9488_write_ram_prepare+0x1c>)
  400d1e:	4798      	blx	r3

/* Define EBI access for ILI9488 16-bit System Interface.*/
#ifdef ILI9488_EBIMODE
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  400d20:	222c      	movs	r2, #44	; 0x2c
  400d22:	f04f 43c6 	mov.w	r3, #1660944384	; 0x63000000
  400d26:	801a      	strh	r2, [r3, #0]
  400d28:	bd08      	pop	{r3, pc}
  400d2a:	bf00      	nop
  400d2c:	400e1200 	.word	0x400e1200
  400d30:	00401705 	.word	0x00401705

00400d34 <ili9488_write_register>:
 * \param uc_reg register address.
 * \param us_data data to be written.
 * \param size the number of parameters.
 */
static void ili9488_write_register(uint8_t uc_reg, const ili9488_color_t *us_data, uint32_t size)
{
  400d34:	b570      	push	{r4, r5, r6, lr}
  400d36:	4606      	mov	r6, r0
  400d38:	460d      	mov	r5, r1
  400d3a:	4614      	mov	r4, r2
	/* CDS pin is set low level when writing command*/
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  400d3c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400d40:	480c      	ldr	r0, [pc, #48]	; (400d74 <ili9488_write_register+0x40>)
  400d42:	4b0d      	ldr	r3, [pc, #52]	; (400d78 <ili9488_write_register+0x44>)
  400d44:	4798      	blx	r3
  400d46:	b2b6      	uxth	r6, r6
  400d48:	f04f 43c6 	mov.w	r3, #1660944384	; 0x63000000
  400d4c:	801e      	strh	r6, [r3, #0]
	LCD_IR(uc_reg);

	if(size == 0) {
  400d4e:	b904      	cbnz	r4, 400d52 <ili9488_write_register+0x1e>
  400d50:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	/* CDS pin is set high level when writing parameters or image data*/
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  400d52:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400d56:	4807      	ldr	r0, [pc, #28]	; (400d74 <ili9488_write_register+0x40>)
  400d58:	4b08      	ldr	r3, [pc, #32]	; (400d7c <ili9488_write_register+0x48>)
  400d5a:	4798      	blx	r3
	{
		*(volatile uint16_t *)(BOARD_ILI9488_ADDR) = lcd_data;
	}
	static inline void LCD_MULTI_WD(const uint16_t *lcd_data, uint32_t size)
	{
		while(size--) {
  400d5c:	1e62      	subs	r2, r4, #1
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  400d5e:	f04f 41c6 	mov.w	r1, #1660944384	; 0x63000000
  400d62:	f835 3b02 	ldrh.w	r3, [r5], #2
  400d66:	800b      	strh	r3, [r1, #0]
		while(size--) {
  400d68:	3a01      	subs	r2, #1
  400d6a:	f1b2 3fff 	cmp.w	r2, #4294967295
  400d6e:	d1f8      	bne.n	400d62 <ili9488_write_register+0x2e>
  400d70:	e7ee      	b.n	400d50 <ili9488_write_register+0x1c>
  400d72:	bf00      	nop
  400d74:	400e1200 	.word	0x400e1200
  400d78:	00401705 	.word	0x00401705
  400d7c:	00401701 	.word	0x00401701

00400d80 <ili9488_delay>:
 */
void ili9488_delay(uint32_t ul_ms)
{
	uint32_t i;

	for(i = 0; i < ul_ms; i++) {
  400d80:	4601      	mov	r1, r0
  400d82:	b130      	cbz	r0, 400d92 <ili9488_delay+0x12>
  400d84:	4a03      	ldr	r2, [pc, #12]	; (400d94 <ili9488_delay+0x14>)
{
  400d86:	4b04      	ldr	r3, [pc, #16]	; (400d98 <ili9488_delay+0x18>)
		for(i = 0; i < 100000; i++) {
  400d88:	3b01      	subs	r3, #1
  400d8a:	d1fd      	bne.n	400d88 <ili9488_delay+0x8>
	for(i = 0; i < ul_ms; i++) {
  400d8c:	4291      	cmp	r1, r2
  400d8e:	d8fa      	bhi.n	400d86 <ili9488_delay+0x6>
  400d90:	4770      	bx	lr
  400d92:	4770      	bx	lr
  400d94:	000186a1 	.word	0x000186a1
  400d98:	000186a0 	.word	0x000186a0

00400d9c <ili9488_set_display_direction>:
 * \brief ILI9488 configure landscape.
 *
 * \Param LandscaprMode Landscape Mode.
 */
void ili9488_set_display_direction(enum ili9488_display_direction direction )
{
  400d9c:	b500      	push	{lr}
  400d9e:	b083      	sub	sp, #12
	ili9488_color_t value;
	if(direction) {
  400da0:	b958      	cbnz	r0, 400dba <ili9488_set_display_direction+0x1e>
		value = 0xE8;
	} else {
		value = 0x48;
  400da2:	2348      	movs	r3, #72	; 0x48
  400da4:	f8ad 3006 	strh.w	r3, [sp, #6]
	}
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &value, 1);
  400da8:	2201      	movs	r2, #1
  400daa:	f10d 0106 	add.w	r1, sp, #6
  400dae:	2036      	movs	r0, #54	; 0x36
  400db0:	4b04      	ldr	r3, [pc, #16]	; (400dc4 <ili9488_set_display_direction+0x28>)
  400db2:	4798      	blx	r3
}
  400db4:	b003      	add	sp, #12
  400db6:	f85d fb04 	ldr.w	pc, [sp], #4
		value = 0xE8;
  400dba:	23e8      	movs	r3, #232	; 0xe8
  400dbc:	f8ad 3006 	strh.w	r3, [sp, #6]
  400dc0:	e7f2      	b.n	400da8 <ili9488_set_display_direction+0xc>
  400dc2:	bf00      	nop
  400dc4:	00400d35 	.word	0x00400d35

00400dc8 <ili9488_set_window>:
 * \Param y start position.
 * \Param width  Width of window.
 * \Param height Height of window.
 */
void ili9488_set_window(uint16_t x, uint16_t y, uint16_t width, uint16_t height )
{
  400dc8:	b510      	push	{r4, lr}
  400dca:	b084      	sub	sp, #16
	uint32_t cnt = 0;
	ili9488_color_t buf[4];

	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	col_start  =  x ;
  400dcc:	f8ad 000e 	strh.w	r0, [sp, #14]
	col_end    =  width + x - 1;
  400dd0:	3a01      	subs	r2, #1
  400dd2:	4402      	add	r2, r0
  400dd4:	f8ad 200c 	strh.w	r2, [sp, #12]

	row_start = y ;
  400dd8:	f8ad 100a 	strh.w	r1, [sp, #10]
	row_end   = height + y - 1;
  400ddc:	3b01      	subs	r3, #1
  400dde:	4419      	add	r1, r3
  400de0:	f8ad 1008 	strh.w	r1, [sp, #8]

	buf[0] = get_8b_to_16b(col_start);
  400de4:	0a03      	lsrs	r3, r0, #8
  400de6:	f8ad 3000 	strh.w	r3, [sp]
	buf[1] = get_0b_to_8b(col_start);
  400dea:	b2c0      	uxtb	r0, r0
  400dec:	f8ad 0002 	strh.w	r0, [sp, #2]
	buf[2] = get_8b_to_16b(col_end);
  400df0:	f3c2 2307 	ubfx	r3, r2, #8, #8
  400df4:	f8ad 3004 	strh.w	r3, [sp, #4]
	buf[3] = get_0b_to_8b(col_end);
  400df8:	b2d2      	uxtb	r2, r2
  400dfa:	f8ad 2006 	strh.w	r2, [sp, #6]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  400dfe:	2204      	movs	r2, #4
  400e00:	4669      	mov	r1, sp
  400e02:	202a      	movs	r0, #42	; 0x2a
  400e04:	4c0f      	ldr	r4, [pc, #60]	; (400e44 <ili9488_set_window+0x7c>)
  400e06:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400e08:	2200      	movs	r2, #0
  400e0a:	4611      	mov	r1, r2
  400e0c:	4610      	mov	r0, r2
  400e0e:	47a0      	blx	r4

	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(row_start);
  400e10:	f89d 300b 	ldrb.w	r3, [sp, #11]
  400e14:	f8ad 3000 	strh.w	r3, [sp]
	buf[1] = get_0b_to_8b(row_start);
  400e18:	f89d 300a 	ldrb.w	r3, [sp, #10]
  400e1c:	f8ad 3002 	strh.w	r3, [sp, #2]
	buf[2] = get_8b_to_16b(row_end);
  400e20:	f89d 3009 	ldrb.w	r3, [sp, #9]
  400e24:	f8ad 3004 	strh.w	r3, [sp, #4]
	buf[3] = get_0b_to_8b(row_end);
  400e28:	f89d 3008 	ldrb.w	r3, [sp, #8]
  400e2c:	f8ad 3006 	strh.w	r3, [sp, #6]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  400e30:	2204      	movs	r2, #4
  400e32:	4669      	mov	r1, sp
  400e34:	202b      	movs	r0, #43	; 0x2b
  400e36:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400e38:	2200      	movs	r2, #0
  400e3a:	4611      	mov	r1, r2
  400e3c:	4610      	mov	r0, r2
  400e3e:	47a0      	blx	r4
}
  400e40:	b004      	add	sp, #16
  400e42:	bd10      	pop	{r4, pc}
  400e44:	00400d35 	.word	0x00400d35

00400e48 <ili9488_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9488_display_on(void)
{
  400e48:	b508      	push	{r3, lr}
	ili9488_write_register(ILI9488_CMD_DISPLAY_ON, 0, 0);
  400e4a:	2200      	movs	r2, #0
  400e4c:	4611      	mov	r1, r2
  400e4e:	2029      	movs	r0, #41	; 0x29
  400e50:	4b01      	ldr	r3, [pc, #4]	; (400e58 <ili9488_display_on+0x10>)
  400e52:	4798      	blx	r3
  400e54:	bd08      	pop	{r3, pc}
  400e56:	bf00      	nop
  400e58:	00400d35 	.word	0x00400d35

00400e5c <ili9488_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili9488_set_foreground_color(uint32_t ul_color)
{
  400e5c:	4a04      	ldr	r2, [pc, #16]	; (400e70 <ili9488_set_foreground_color+0x14>)
  400e5e:	1e93      	subs	r3, r2, #2
  400e60:	f202 227e 	addw	r2, r2, #638	; 0x27e
	uint32_t i;
#ifdef ILI9488_EBIMODE
	/* Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
		g_ul_pixel_cache[i] = ul_color;
  400e64:	f823 0f02 	strh.w	r0, [r3, #2]!
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
  400e68:	4293      	cmp	r3, r2
  400e6a:	d1fb      	bne.n	400e64 <ili9488_set_foreground_color+0x8>
		g_ul_pixel_cache[i++] = ul_color>>16;
		g_ul_pixel_cache[i++] = ul_color>>8;
		g_ul_pixel_cache[i++] = ul_color&0xFF;
	}
#endif
}
  400e6c:	4770      	bx	lr
  400e6e:	bf00      	nop
  400e70:	20400880 	.word	0x20400880

00400e74 <ili9488_set_cursor_position>:
 *
 * \param x X coordinate of upper-left corner on LCD.
 * \param y Y coordinate of upper-left corner on LCD.
 */
void ili9488_set_cursor_position(uint16_t x, uint16_t y)
{
  400e74:	b510      	push	{r4, lr}
  400e76:	b084      	sub	sp, #16
  400e78:	f8ad 0006 	strh.w	r0, [sp, #6]
  400e7c:	f8ad 1004 	strh.w	r1, [sp, #4]
	uint32_t cnt = 0;

	ili9488_color_t buf[4];
	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	buf[0] = get_8b_to_16b(x);
  400e80:	0a03      	lsrs	r3, r0, #8
  400e82:	f8ad 3008 	strh.w	r3, [sp, #8]
	buf[1] = get_0b_to_8b(x);
  400e86:	b2c0      	uxtb	r0, r0
  400e88:	f8ad 000a 	strh.w	r0, [sp, #10]
	buf[2] = get_8b_to_16b(x);
  400e8c:	f8ad 300c 	strh.w	r3, [sp, #12]
	buf[3] = get_0b_to_8b(x);
  400e90:	f8ad 000e 	strh.w	r0, [sp, #14]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  400e94:	2204      	movs	r2, #4
  400e96:	a902      	add	r1, sp, #8
  400e98:	202a      	movs	r0, #42	; 0x2a
  400e9a:	4c0e      	ldr	r4, [pc, #56]	; (400ed4 <ili9488_set_cursor_position+0x60>)
  400e9c:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400e9e:	2200      	movs	r2, #0
  400ea0:	4611      	mov	r1, r2
  400ea2:	4610      	mov	r0, r2
  400ea4:	47a0      	blx	r4


	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(y);
  400ea6:	f89d 2005 	ldrb.w	r2, [sp, #5]
  400eaa:	f8ad 2008 	strh.w	r2, [sp, #8]
	buf[1] = get_0b_to_8b(y);
  400eae:	f89d 3004 	ldrb.w	r3, [sp, #4]
  400eb2:	f8ad 300a 	strh.w	r3, [sp, #10]
	buf[2] = get_8b_to_16b(y);
  400eb6:	f8ad 200c 	strh.w	r2, [sp, #12]
	buf[3] = get_0b_to_8b(y);
  400eba:	f8ad 300e 	strh.w	r3, [sp, #14]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  400ebe:	2204      	movs	r2, #4
  400ec0:	a902      	add	r1, sp, #8
  400ec2:	202b      	movs	r0, #43	; 0x2b
  400ec4:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400ec6:	2200      	movs	r2, #0
  400ec8:	4611      	mov	r1, r2
  400eca:	4610      	mov	r0, r2
  400ecc:	47a0      	blx	r4
}
  400ece:	b004      	add	sp, #16
  400ed0:	bd10      	pop	{r4, pc}
  400ed2:	bf00      	nop
  400ed4:	00400d35 	.word	0x00400d35

00400ed8 <ili9488_init>:
{
  400ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
  400eda:	b085      	sub	sp, #20
  400edc:	4604      	mov	r4, r0
	pmc_enable_periph_clk(ID_SMC);
  400ede:	2009      	movs	r0, #9
  400ee0:	4b46      	ldr	r3, [pc, #280]	; (400ffc <ili9488_init+0x124>)
  400ee2:	4798      	blx	r3
	smc_set_setup_timing(SMC, BOARD_ILI9488_EBI_NPCS, SMC_SETUP_NWE_SETUP(0)
  400ee4:	4d46      	ldr	r5, [pc, #280]	; (401000 <ili9488_init+0x128>)
  400ee6:	2200      	movs	r2, #0
  400ee8:	2103      	movs	r1, #3
  400eea:	4628      	mov	r0, r5
  400eec:	4b45      	ldr	r3, [pc, #276]	; (401004 <ili9488_init+0x12c>)
  400eee:	4798      	blx	r3
	smc_set_pulse_timing(SMC, BOARD_ILI9488_EBI_NPCS , SMC_PULSE_NWE_PULSE(3)
  400ef0:	4a45      	ldr	r2, [pc, #276]	; (401008 <ili9488_init+0x130>)
  400ef2:	2103      	movs	r1, #3
  400ef4:	4628      	mov	r0, r5
  400ef6:	4b45      	ldr	r3, [pc, #276]	; (40100c <ili9488_init+0x134>)
  400ef8:	4798      	blx	r3
	smc_set_cycle_timing(SMC, BOARD_ILI9488_EBI_NPCS, SMC_CYCLE_NWE_CYCLE(0x4)
  400efa:	4a45      	ldr	r2, [pc, #276]	; (401010 <ili9488_init+0x138>)
  400efc:	2103      	movs	r1, #3
  400efe:	4628      	mov	r0, r5
  400f00:	4b44      	ldr	r3, [pc, #272]	; (401014 <ili9488_init+0x13c>)
  400f02:	4798      	blx	r3
	smc_set_mode(SMC, BOARD_ILI9488_EBI_NPCS, SMC_MODE_READ_MODE
  400f04:	4a44      	ldr	r2, [pc, #272]	; (401018 <ili9488_init+0x140>)
  400f06:	2103      	movs	r1, #3
  400f08:	4628      	mov	r0, r5
  400f0a:	4b44      	ldr	r3, [pc, #272]	; (40101c <ili9488_init+0x144>)
  400f0c:	4798      	blx	r3
	ili9488_write_register(ILI9488_CMD_SOFTWARE_RESET, 0x0000, 0);
  400f0e:	2200      	movs	r2, #0
  400f10:	4611      	mov	r1, r2
  400f12:	2001      	movs	r0, #1
  400f14:	4e42      	ldr	r6, [pc, #264]	; (401020 <ili9488_init+0x148>)
  400f16:	47b0      	blx	r6
	ili9488_delay(200);
  400f18:	20c8      	movs	r0, #200	; 0xc8
  400f1a:	4d42      	ldr	r5, [pc, #264]	; (401024 <ili9488_init+0x14c>)
  400f1c:	47a8      	blx	r5
	ili9488_write_register(ILI9488_CMD_SLEEP_OUT, 0x0000, 0);
  400f1e:	2200      	movs	r2, #0
  400f20:	4611      	mov	r1, r2
  400f22:	2011      	movs	r0, #17
  400f24:	47b0      	blx	r6
	ili9488_delay(200);
  400f26:	20c8      	movs	r0, #200	; 0xc8
  400f28:	47a8      	blx	r5
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  400f2a:	4e3f      	ldr	r6, [pc, #252]	; (401028 <ili9488_init+0x150>)
  400f2c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400f30:	4630      	mov	r0, r6
  400f32:	4b3e      	ldr	r3, [pc, #248]	; (40102c <ili9488_init+0x154>)
  400f34:	4798      	blx	r3
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  400f36:	f04f 45c6 	mov.w	r5, #1660944384	; 0x63000000
  400f3a:	23d3      	movs	r3, #211	; 0xd3
  400f3c:	802b      	strh	r3, [r5, #0]
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  400f3e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400f42:	4630      	mov	r0, r6
  400f44:	4b3a      	ldr	r3, [pc, #232]	; (401030 <ili9488_init+0x158>)
  400f46:	4798      	blx	r3
		return *(volatile uint16_t *)(BOARD_ILI9488_ADDR);
	}
	static inline void LCD_MULTI_RD(uint16_t *pbuffer, uint32_t size)
	{
		while(size--) {
			*pbuffer++ = *((volatile uint16_t *)(BOARD_ILI9488_ADDR));
  400f48:	882b      	ldrh	r3, [r5, #0]
  400f4a:	f8ad 3004 	strh.w	r3, [sp, #4]
  400f4e:	8829      	ldrh	r1, [r5, #0]
  400f50:	b289      	uxth	r1, r1
  400f52:	f8ad 1006 	strh.w	r1, [sp, #6]
  400f56:	882b      	ldrh	r3, [r5, #0]
  400f58:	b29b      	uxth	r3, r3
  400f5a:	f8ad 3008 	strh.w	r3, [sp, #8]
  400f5e:	882a      	ldrh	r2, [r5, #0]
  400f60:	b292      	uxth	r2, r2
  400f62:	f8ad 200a 	strh.w	r2, [sp, #10]
  400f66:	8828      	ldrh	r0, [r5, #0]
		chipid |= (*ptr &0xFF)<< (shift_cnt << 3);
  400f68:	b2c9      	uxtb	r1, r1
  400f6a:	b2db      	uxtb	r3, r3
  400f6c:	021b      	lsls	r3, r3, #8
  400f6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  400f72:	b2d2      	uxtb	r2, r2
  400f74:	4313      	orrs	r3, r2
	if (chipid != ILI9488_DEVICE_CODE) {
  400f76:	f249 4288 	movw	r2, #38024	; 0x9488
  400f7a:	4293      	cmp	r3, r2
  400f7c:	d002      	beq.n	400f84 <ili9488_init+0xac>
		return 1;
  400f7e:	2001      	movs	r0, #1
}
  400f80:	b005      	add	sp, #20
  400f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	param = 0x48;
  400f84:	ae04      	add	r6, sp, #16
  400f86:	2348      	movs	r3, #72	; 0x48
  400f88:	f826 3d02 	strh.w	r3, [r6, #-2]!
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &param, 1);
  400f8c:	2201      	movs	r2, #1
  400f8e:	4631      	mov	r1, r6
  400f90:	2036      	movs	r0, #54	; 0x36
  400f92:	4f23      	ldr	r7, [pc, #140]	; (401020 <ili9488_init+0x148>)
  400f94:	47b8      	blx	r7
	ili9488_delay(100);
  400f96:	2064      	movs	r0, #100	; 0x64
  400f98:	4d22      	ldr	r5, [pc, #136]	; (401024 <ili9488_init+0x14c>)
  400f9a:	47a8      	blx	r5
	param = 0x04;
  400f9c:	2304      	movs	r3, #4
  400f9e:	f8ad 300e 	strh.w	r3, [sp, #14]
	ili9488_write_register(ILI9488_CMD_CABC_CONTROL_9, &param, 1);
  400fa2:	2201      	movs	r2, #1
  400fa4:	4631      	mov	r1, r6
  400fa6:	20cf      	movs	r0, #207	; 0xcf
  400fa8:	47b8      	blx	r7
	ili9488_delay(100);
  400faa:	2064      	movs	r0, #100	; 0x64
  400fac:	47a8      	blx	r5
	param = 0x05;
  400fae:	2305      	movs	r3, #5
  400fb0:	f8ad 300e 	strh.w	r3, [sp, #14]
	ili9488_write_register(ILI9488_CMD_COLMOD_PIXEL_FORMAT_SET, &param, 1);
  400fb4:	2201      	movs	r2, #1
  400fb6:	4631      	mov	r1, r6
  400fb8:	203a      	movs	r0, #58	; 0x3a
  400fba:	47b8      	blx	r7
	ili9488_delay(100);
  400fbc:	2064      	movs	r0, #100	; 0x64
  400fbe:	47a8      	blx	r5
	ili9488_write_register(ILI9488_CMD_PARTIAL_MODE_ON, 0, 0);
  400fc0:	2200      	movs	r2, #0
  400fc2:	4611      	mov	r1, r2
  400fc4:	2012      	movs	r0, #18
  400fc6:	47b8      	blx	r7
	ili9488_delay(100);
  400fc8:	2064      	movs	r0, #100	; 0x64
  400fca:	47a8      	blx	r5
	ili9488_display_on();
  400fcc:	4b19      	ldr	r3, [pc, #100]	; (401034 <ili9488_init+0x15c>)
  400fce:	4798      	blx	r3
	ili9488_delay(100);
  400fd0:	2064      	movs	r0, #100	; 0x64
  400fd2:	47a8      	blx	r5
	ili9488_set_display_direction(LANDSCAPE);
  400fd4:	2000      	movs	r0, #0
  400fd6:	4b18      	ldr	r3, [pc, #96]	; (401038 <ili9488_init+0x160>)
  400fd8:	4798      	blx	r3
	ili9488_delay(100);
  400fda:	2064      	movs	r0, #100	; 0x64
  400fdc:	47a8      	blx	r5
	ili9488_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  400fde:	88a3      	ldrh	r3, [r4, #4]
  400fe0:	8822      	ldrh	r2, [r4, #0]
  400fe2:	2100      	movs	r1, #0
  400fe4:	4608      	mov	r0, r1
  400fe6:	4d15      	ldr	r5, [pc, #84]	; (40103c <ili9488_init+0x164>)
  400fe8:	47a8      	blx	r5
	ili9488_set_foreground_color(p_opt->foreground_color);
  400fea:	68a0      	ldr	r0, [r4, #8]
  400fec:	4b14      	ldr	r3, [pc, #80]	; (401040 <ili9488_init+0x168>)
  400fee:	4798      	blx	r3
	ili9488_set_cursor_position(0, 0);
  400ff0:	2100      	movs	r1, #0
  400ff2:	4608      	mov	r0, r1
  400ff4:	4b13      	ldr	r3, [pc, #76]	; (401044 <ili9488_init+0x16c>)
  400ff6:	4798      	blx	r3
	return 0;
  400ff8:	2000      	movs	r0, #0
  400ffa:	e7c1      	b.n	400f80 <ili9488_init+0xa8>
  400ffc:	00401a65 	.word	0x00401a65
  401000:	40080000 	.word	0x40080000
  401004:	00401171 	.word	0x00401171
  401008:	0a0a0403 	.word	0x0a0a0403
  40100c:	00401177 	.word	0x00401177
  401010:	000a0004 	.word	0x000a0004
  401014:	0040117f 	.word	0x0040117f
  401018:	000f1003 	.word	0x000f1003
  40101c:	00401187 	.word	0x00401187
  401020:	00400d35 	.word	0x00400d35
  401024:	00400d81 	.word	0x00400d81
  401028:	400e1200 	.word	0x400e1200
  40102c:	00401705 	.word	0x00401705
  401030:	00401701 	.word	0x00401701
  401034:	00400e49 	.word	0x00400e49
  401038:	00400d9d 	.word	0x00400d9d
  40103c:	00400dc9 	.word	0x00400dc9
  401040:	00400e5d 	.word	0x00400e5d
  401044:	00400e75 	.word	0x00400e75

00401048 <ili9488_set_limits>:
 * \param end_x The x coordinate of the bottom right corner
 * \param end_y The y coordinate of the bottom right corner
 */
void ili9488_set_limits(ili9488_coord_t start_x, ili9488_coord_t start_y,
		ili9488_coord_t end_x, ili9488_coord_t end_y)
{
  401048:	b410      	push	{r4}
	limit_start_x = start_x;
  40104a:	4c05      	ldr	r4, [pc, #20]	; (401060 <ili9488_set_limits+0x18>)
  40104c:	8020      	strh	r0, [r4, #0]
	limit_start_y = start_y;
  40104e:	4805      	ldr	r0, [pc, #20]	; (401064 <ili9488_set_limits+0x1c>)
  401050:	8001      	strh	r1, [r0, #0]
	limit_end_x = end_x;
  401052:	4905      	ldr	r1, [pc, #20]	; (401068 <ili9488_set_limits+0x20>)
  401054:	800a      	strh	r2, [r1, #0]
	limit_end_y = end_y;
  401056:	4a05      	ldr	r2, [pc, #20]	; (40106c <ili9488_set_limits+0x24>)
  401058:	8013      	strh	r3, [r2, #0]
}
  40105a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40105e:	4770      	bx	lr
  401060:	20400b04 	.word	0x20400b04
  401064:	20400b06 	.word	0x20400b06
  401068:	20400b00 	.word	0x20400b00
  40106c:	20400b02 	.word	0x20400b02

00401070 <ili9488_set_orientation>:
 *
 * \param flags Orientation flags to use, see \ref ILI9488_FLIP_X, \ref ILI9488_FLIP_Y
 *        and \ref ILI9488_SWITCH_XY.
 */
void ili9488_set_orientation(uint8_t flags)
{
  401070:	b500      	push	{lr}
  401072:	b083      	sub	sp, #12
	/* Flip X/Y and reverse X orientation and set BGR mode*/
	ili9488_color_t madctl = 0x68;

	if (flags & ILI9488_FLIP_X) {
  401074:	f010 0f01 	tst.w	r0, #1
	ili9488_color_t madctl = 0x68;
  401078:	bf0c      	ite	eq
  40107a:	2368      	moveq	r3, #104	; 0x68
		madctl &= ~(1 << 6);
  40107c:	2328      	movne	r3, #40	; 0x28
  40107e:	f8ad 3006 	strh.w	r3, [sp, #6]
	}

	if (flags & ILI9488_FLIP_Y) {
  401082:	f010 0f02 	tst.w	r0, #2
  401086:	d005      	beq.n	401094 <ili9488_set_orientation+0x24>
		madctl |= 1 << 7;
  401088:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40108c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401090:	f8ad 3006 	strh.w	r3, [sp, #6]
	}

	if (flags & ILI9488_SWITCH_XY) {
  401094:	f010 0f04 	tst.w	r0, #4
  401098:	d005      	beq.n	4010a6 <ili9488_set_orientation+0x36>
		madctl &= ~(1 << 5);
  40109a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40109e:	f023 0320 	bic.w	r3, r3, #32
  4010a2:	f8ad 3006 	strh.w	r3, [sp, #6]
	}

	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &madctl, 1);
  4010a6:	2201      	movs	r2, #1
  4010a8:	f10d 0106 	add.w	r1, sp, #6
  4010ac:	2036      	movs	r0, #54	; 0x36
  4010ae:	4b02      	ldr	r3, [pc, #8]	; (4010b8 <ili9488_set_orientation+0x48>)
  4010b0:	4798      	blx	r3
}
  4010b2:	b003      	add	sp, #12
  4010b4:	f85d fb04 	ldr.w	pc, [sp], #4
  4010b8:	00400d35 	.word	0x00400d35

004010bc <ili9488_write_gram>:
 * \endcode
 *
 * \param color The color pixel to write to the screen
 */
void ili9488_write_gram(uint16_t color)
{
  4010bc:	b510      	push	{r4, lr}
  4010be:	4604      	mov	r4, r0
	ili9488_set_cursor_position(limit_start_x, limit_start_y);
  4010c0:	4b08      	ldr	r3, [pc, #32]	; (4010e4 <ili9488_write_gram+0x28>)
  4010c2:	8819      	ldrh	r1, [r3, #0]
  4010c4:	4b08      	ldr	r3, [pc, #32]	; (4010e8 <ili9488_write_gram+0x2c>)
  4010c6:	8818      	ldrh	r0, [r3, #0]
  4010c8:	4b08      	ldr	r3, [pc, #32]	; (4010ec <ili9488_write_gram+0x30>)
  4010ca:	4798      	blx	r3
	ili9488_write_ram_prepare();
  4010cc:	4b08      	ldr	r3, [pc, #32]	; (4010f0 <ili9488_write_gram+0x34>)
  4010ce:	4798      	blx	r3
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  4010d0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4010d4:	4807      	ldr	r0, [pc, #28]	; (4010f4 <ili9488_write_gram+0x38>)
  4010d6:	4b08      	ldr	r3, [pc, #32]	; (4010f8 <ili9488_write_gram+0x3c>)
  4010d8:	4798      	blx	r3
		*(volatile uint16_t *)(BOARD_ILI9488_ADDR) = lcd_data;
  4010da:	f04f 43c6 	mov.w	r3, #1660944384	; 0x63000000
  4010de:	801c      	strh	r4, [r3, #0]
  4010e0:	bd10      	pop	{r4, pc}
  4010e2:	bf00      	nop
  4010e4:	20400b06 	.word	0x20400b06
  4010e8:	20400b04 	.word	0x20400b04
  4010ec:	00400e75 	.word	0x00400e75
  4010f0:	00400d15 	.word	0x00400d15
  4010f4:	400e1200 	.word	0x400e1200
  4010f8:	00401701 	.word	0x00401701

004010fc <ili9488_duplicate_pixel>:
 *
 * \param color The color to write to the display
 * \param count The number of pixels to write with this color
 */
void ili9488_duplicate_pixel(const uint16_t color, uint32_t count)
{
  4010fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401100:	4605      	mov	r5, r0
  401102:	460e      	mov	r6, r1
	ili9488_set_window(limit_start_x, limit_start_y, (limit_end_x - limit_start_x) + 1, (limit_end_y - limit_start_y) + 1);
  401104:	4b12      	ldr	r3, [pc, #72]	; (401150 <ili9488_duplicate_pixel+0x54>)
  401106:	8818      	ldrh	r0, [r3, #0]
  401108:	4b12      	ldr	r3, [pc, #72]	; (401154 <ili9488_duplicate_pixel+0x58>)
  40110a:	8819      	ldrh	r1, [r3, #0]
  40110c:	4b12      	ldr	r3, [pc, #72]	; (401158 <ili9488_duplicate_pixel+0x5c>)
  40110e:	881b      	ldrh	r3, [r3, #0]
  401110:	3301      	adds	r3, #1
  401112:	1a5b      	subs	r3, r3, r1
  401114:	4a11      	ldr	r2, [pc, #68]	; (40115c <ili9488_duplicate_pixel+0x60>)
  401116:	8812      	ldrh	r2, [r2, #0]
  401118:	3201      	adds	r2, #1
  40111a:	1a12      	subs	r2, r2, r0
  40111c:	b29b      	uxth	r3, r3
  40111e:	b292      	uxth	r2, r2
  401120:	4c0f      	ldr	r4, [pc, #60]	; (401160 <ili9488_duplicate_pixel+0x64>)
  401122:	47a0      	blx	r4
	ili9488_write_ram_prepare();
  401124:	4b0f      	ldr	r3, [pc, #60]	; (401164 <ili9488_duplicate_pixel+0x68>)
  401126:	4798      	blx	r3

#ifdef ILI9488_EBIMODE
	while (count--) {
  401128:	b17e      	cbz	r6, 40114a <ili9488_duplicate_pixel+0x4e>
  40112a:	1e74      	subs	r4, r6, #1
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  40112c:	f8df 803c 	ldr.w	r8, [pc, #60]	; 40116c <ili9488_duplicate_pixel+0x70>
  401130:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
  401134:	4e0c      	ldr	r6, [pc, #48]	; (401168 <ili9488_duplicate_pixel+0x6c>)
  401136:	4639      	mov	r1, r7
  401138:	4640      	mov	r0, r8
  40113a:	47b0      	blx	r6
  40113c:	f04f 43c6 	mov.w	r3, #1660944384	; 0x63000000
  401140:	801d      	strh	r5, [r3, #0]
	while (count--) {
  401142:	3c01      	subs	r4, #1
  401144:	f1b4 3fff 	cmp.w	r4, #4294967295
  401148:	d1f5      	bne.n	401136 <ili9488_duplicate_pixel+0x3a>
  40114a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40114e:	bf00      	nop
  401150:	20400b04 	.word	0x20400b04
  401154:	20400b06 	.word	0x20400b06
  401158:	20400b02 	.word	0x20400b02
  40115c:	20400b00 	.word	0x20400b00
  401160:	00400dc9 	.word	0x00400dc9
  401164:	00400d15 	.word	0x00400d15
  401168:	00401701 	.word	0x00401701
  40116c:	400e1200 	.word	0x400e1200

00401170 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
  401170:	0109      	lsls	r1, r1, #4
  401172:	5042      	str	r2, [r0, r1]
  401174:	4770      	bx	lr

00401176 <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
  401176:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  40117a:	604a      	str	r2, [r1, #4]
  40117c:	4770      	bx	lr

0040117e <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
  40117e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  401182:	608a      	str	r2, [r1, #8]
  401184:	4770      	bx	lr

00401186 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
  401186:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  40118a:	60ca      	str	r2, [r1, #12]
  40118c:	4770      	bx	lr
	...

00401190 <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401190:	4b28      	ldr	r3, [pc, #160]	; (401234 <twihs_set_speed+0xa4>)
  401192:	4299      	cmp	r1, r3
  401194:	d84b      	bhi.n	40122e <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  401196:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  40119a:	4299      	cmp	r1, r3
  40119c:	d92d      	bls.n	4011fa <twihs_set_speed+0x6a>
{
  40119e:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4011a0:	4c25      	ldr	r4, [pc, #148]	; (401238 <twihs_set_speed+0xa8>)
  4011a2:	fba4 3402 	umull	r3, r4, r4, r2
  4011a6:	0ba4      	lsrs	r4, r4, #14
  4011a8:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4011aa:	4b24      	ldr	r3, [pc, #144]	; (40123c <twihs_set_speed+0xac>)
  4011ac:	440b      	add	r3, r1
  4011ae:	009b      	lsls	r3, r3, #2
  4011b0:	fbb2 f2f3 	udiv	r2, r2, r3
  4011b4:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4011b6:	2cff      	cmp	r4, #255	; 0xff
  4011b8:	d91d      	bls.n	4011f6 <twihs_set_speed+0x66>
  4011ba:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  4011bc:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  4011be:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4011c0:	2cff      	cmp	r4, #255	; 0xff
  4011c2:	d901      	bls.n	4011c8 <twihs_set_speed+0x38>
  4011c4:	2906      	cmp	r1, #6
  4011c6:	d9f9      	bls.n	4011bc <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4011c8:	2aff      	cmp	r2, #255	; 0xff
  4011ca:	d907      	bls.n	4011dc <twihs_set_speed+0x4c>
  4011cc:	2906      	cmp	r1, #6
  4011ce:	d805      	bhi.n	4011dc <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  4011d0:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  4011d2:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4011d4:	2aff      	cmp	r2, #255	; 0xff
  4011d6:	d901      	bls.n	4011dc <twihs_set_speed+0x4c>
  4011d8:	2906      	cmp	r1, #6
  4011da:	d9f9      	bls.n	4011d0 <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  4011dc:	0213      	lsls	r3, r2, #8
  4011de:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  4011e0:	0409      	lsls	r1, r1, #16
  4011e2:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  4011e6:	430b      	orrs	r3, r1
  4011e8:	b2e4      	uxtb	r4, r4
  4011ea:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  4011ec:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  4011ee:	2000      	movs	r0, #0
}
  4011f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4011f4:	4770      	bx	lr
	uint32_t ckdiv = 0;
  4011f6:	2100      	movs	r1, #0
  4011f8:	e7e6      	b.n	4011c8 <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4011fa:	0049      	lsls	r1, r1, #1
  4011fc:	fbb2 f2f1 	udiv	r2, r2, r1
  401200:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401202:	2aff      	cmp	r2, #255	; 0xff
  401204:	d911      	bls.n	40122a <twihs_set_speed+0x9a>
  401206:	2300      	movs	r3, #0
			ckdiv++;
  401208:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  40120a:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40120c:	2aff      	cmp	r2, #255	; 0xff
  40120e:	d901      	bls.n	401214 <twihs_set_speed+0x84>
  401210:	2b06      	cmp	r3, #6
  401212:	d9f9      	bls.n	401208 <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401214:	0211      	lsls	r1, r2, #8
  401216:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  401218:	041b      	lsls	r3, r3, #16
  40121a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  40121e:	430b      	orrs	r3, r1
  401220:	b2d2      	uxtb	r2, r2
  401222:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  401224:	6102      	str	r2, [r0, #16]
	return PASS;
  401226:	2000      	movs	r0, #0
  401228:	4770      	bx	lr
	uint32_t ckdiv = 0;
  40122a:	2300      	movs	r3, #0
  40122c:	e7f2      	b.n	401214 <twihs_set_speed+0x84>
		return FAIL;
  40122e:	2001      	movs	r0, #1
  401230:	4770      	bx	lr
  401232:	bf00      	nop
  401234:	00061a80 	.word	0x00061a80
  401238:	057619f1 	.word	0x057619f1
  40123c:	3ffd1200 	.word	0x3ffd1200

00401240 <twihs_master_init>:
{
  401240:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  401242:	f04f 32ff 	mov.w	r2, #4294967295
  401246:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  401248:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  40124a:	2280      	movs	r2, #128	; 0x80
  40124c:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  40124e:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401250:	2208      	movs	r2, #8
  401252:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  401254:	2220      	movs	r2, #32
  401256:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401258:	2204      	movs	r2, #4
  40125a:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  40125c:	680a      	ldr	r2, [r1, #0]
  40125e:	6849      	ldr	r1, [r1, #4]
  401260:	4b03      	ldr	r3, [pc, #12]	; (401270 <twihs_master_init+0x30>)
  401262:	4798      	blx	r3
}
  401264:	2801      	cmp	r0, #1
  401266:	bf14      	ite	ne
  401268:	2000      	movne	r0, #0
  40126a:	2001      	moveq	r0, #1
  40126c:	bd08      	pop	{r3, pc}
  40126e:	bf00      	nop
  401270:	00401191 	.word	0x00401191

00401274 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  401274:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  401276:	2a00      	cmp	r2, #0
  401278:	d04c      	beq.n	401314 <twihs_master_read+0xa0>
{
  40127a:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  40127c:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  40127e:	2600      	movs	r6, #0
  401280:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401282:	684b      	ldr	r3, [r1, #4]
  401284:	021b      	lsls	r3, r3, #8
  401286:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  40128a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  40128e:	7c0d      	ldrb	r5, [r1, #16]
  401290:	042d      	lsls	r5, r5, #16
  401292:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  401296:	432b      	orrs	r3, r5
  401298:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  40129a:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  40129c:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  40129e:	b15d      	cbz	r5, 4012b8 <twihs_master_read+0x44>
	val = addr[0];
  4012a0:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  4012a2:	2d01      	cmp	r5, #1
  4012a4:	dd02      	ble.n	4012ac <twihs_master_read+0x38>
		val |= addr[1];
  4012a6:	784e      	ldrb	r6, [r1, #1]
  4012a8:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	if (len > 2) {
  4012ac:	2d02      	cmp	r5, #2
  4012ae:	dd04      	ble.n	4012ba <twihs_master_read+0x46>
		val |= addr[2];
  4012b0:	7889      	ldrb	r1, [r1, #2]
  4012b2:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  4012b6:	e000      	b.n	4012ba <twihs_master_read+0x46>
		return 0;
  4012b8:	2300      	movs	r3, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4012ba:	60c3      	str	r3, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  4012bc:	2301      	movs	r3, #1
  4012be:	6003      	str	r3, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4012c0:	2502      	movs	r5, #2
  4012c2:	e012      	b.n	4012ea <twihs_master_read+0x76>
  4012c4:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  4012c6:	f013 0f02 	tst.w	r3, #2
  4012ca:	d01b      	beq.n	401304 <twihs_master_read+0x90>
		*buffer++ = p_twihs->TWIHS_RHR;
  4012cc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4012ce:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4012d0:	6a03      	ldr	r3, [r0, #32]
  4012d2:	f013 0f01 	tst.w	r3, #1
  4012d6:	d0fb      	beq.n	4012d0 <twihs_master_read+0x5c>
	p_twihs->TWIHS_SR;
  4012d8:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  4012da:	2000      	movs	r0, #0
}
  4012dc:	bc70      	pop	{r4, r5, r6}
  4012de:	4770      	bx	lr
		*buffer++ = p_twihs->TWIHS_RHR;
  4012e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4012e2:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt > 0) {
  4012e6:	3a01      	subs	r2, #1
  4012e8:	d0f2      	beq.n	4012d0 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  4012ea:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4012ec:	f413 7f80 	tst.w	r3, #256	; 0x100
  4012f0:	d114      	bne.n	40131c <twihs_master_read+0xa8>
  4012f2:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  4012f6:	2a01      	cmp	r2, #1
  4012f8:	d0e4      	beq.n	4012c4 <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  4012fa:	f013 0f02 	tst.w	r3, #2
  4012fe:	d1ef      	bne.n	4012e0 <twihs_master_read+0x6c>
	while (cnt > 0) {
  401300:	2a00      	cmp	r2, #0
  401302:	d0e5      	beq.n	4012d0 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  401304:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401306:	f413 7f80 	tst.w	r3, #256	; 0x100
  40130a:	d105      	bne.n	401318 <twihs_master_read+0xa4>
		if (!timeout--) {
  40130c:	3901      	subs	r1, #1
  40130e:	d1f2      	bne.n	4012f6 <twihs_master_read+0x82>
			return TWIHS_ERROR_TIMEOUT;
  401310:	2009      	movs	r0, #9
  401312:	e7e3      	b.n	4012dc <twihs_master_read+0x68>
		return TWIHS_INVALID_ARGUMENT;
  401314:	2001      	movs	r0, #1
  401316:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401318:	2005      	movs	r0, #5
  40131a:	e7df      	b.n	4012dc <twihs_master_read+0x68>
  40131c:	2005      	movs	r0, #5
  40131e:	e7dd      	b.n	4012dc <twihs_master_read+0x68>

00401320 <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  401320:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  401322:	2b00      	cmp	r3, #0
  401324:	d043      	beq.n	4013ae <twihs_master_write+0x8e>
{
  401326:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401328:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  40132a:	2600      	movs	r6, #0
  40132c:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  40132e:	7c0a      	ldrb	r2, [r1, #16]
  401330:	0412      	lsls	r2, r2, #16
  401332:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401336:	684d      	ldr	r5, [r1, #4]
  401338:	022d      	lsls	r5, r5, #8
  40133a:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  40133e:	432a      	orrs	r2, r5
  401340:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401342:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401344:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  401346:	b15d      	cbz	r5, 401360 <twihs_master_write+0x40>
	val = addr[0];
  401348:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  40134a:	2d01      	cmp	r5, #1
  40134c:	dd02      	ble.n	401354 <twihs_master_write+0x34>
		val |= addr[1];
  40134e:	784e      	ldrb	r6, [r1, #1]
  401350:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  401354:	2d02      	cmp	r5, #2
  401356:	dd04      	ble.n	401362 <twihs_master_write+0x42>
		val |= addr[2];
  401358:	7889      	ldrb	r1, [r1, #2]
  40135a:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  40135e:	e000      	b.n	401362 <twihs_master_write+0x42>
		return 0;
  401360:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401362:	60c2      	str	r2, [r0, #12]
  401364:	e004      	b.n	401370 <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  401366:	f814 2b01 	ldrb.w	r2, [r4], #1
  40136a:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  40136c:	3b01      	subs	r3, #1
  40136e:	d00f      	beq.n	401390 <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  401370:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401372:	f412 7f80 	tst.w	r2, #256	; 0x100
  401376:	d11e      	bne.n	4013b6 <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  401378:	f012 0f04 	tst.w	r2, #4
  40137c:	d1f3      	bne.n	401366 <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  40137e:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401380:	f412 7f80 	tst.w	r2, #256	; 0x100
  401384:	d115      	bne.n	4013b2 <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  401386:	f012 0f04 	tst.w	r2, #4
  40138a:	d1ec      	bne.n	401366 <twihs_master_write+0x46>
	while (cnt > 0) {
  40138c:	2b00      	cmp	r3, #0
  40138e:	d1f6      	bne.n	40137e <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  401390:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401392:	f413 7f80 	tst.w	r3, #256	; 0x100
  401396:	d111      	bne.n	4013bc <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  401398:	f013 0f04 	tst.w	r3, #4
  40139c:	d0f8      	beq.n	401390 <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  40139e:	2302      	movs	r3, #2
  4013a0:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4013a2:	6a03      	ldr	r3, [r0, #32]
  4013a4:	f013 0f01 	tst.w	r3, #1
  4013a8:	d0fb      	beq.n	4013a2 <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  4013aa:	2000      	movs	r0, #0
  4013ac:	e004      	b.n	4013b8 <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  4013ae:	2001      	movs	r0, #1
  4013b0:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  4013b2:	2005      	movs	r0, #5
  4013b4:	e000      	b.n	4013b8 <twihs_master_write+0x98>
  4013b6:	2005      	movs	r0, #5
}
  4013b8:	bc70      	pop	{r4, r5, r6}
  4013ba:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  4013bc:	2005      	movs	r0, #5
  4013be:	e7fb      	b.n	4013b8 <twihs_master_write+0x98>

004013c0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4013c0:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4013c2:	4810      	ldr	r0, [pc, #64]	; (401404 <sysclk_init+0x44>)
  4013c4:	4b10      	ldr	r3, [pc, #64]	; (401408 <sysclk_init+0x48>)
  4013c6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4013c8:	213e      	movs	r1, #62	; 0x3e
  4013ca:	2000      	movs	r0, #0
  4013cc:	4b0f      	ldr	r3, [pc, #60]	; (40140c <sysclk_init+0x4c>)
  4013ce:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4013d0:	4c0f      	ldr	r4, [pc, #60]	; (401410 <sysclk_init+0x50>)
  4013d2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4013d4:	2800      	cmp	r0, #0
  4013d6:	d0fc      	beq.n	4013d2 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4013d8:	4b0e      	ldr	r3, [pc, #56]	; (401414 <sysclk_init+0x54>)
  4013da:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4013dc:	4a0e      	ldr	r2, [pc, #56]	; (401418 <sysclk_init+0x58>)
  4013de:	4b0f      	ldr	r3, [pc, #60]	; (40141c <sysclk_init+0x5c>)
  4013e0:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4013e2:	4c0f      	ldr	r4, [pc, #60]	; (401420 <sysclk_init+0x60>)
  4013e4:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4013e6:	2800      	cmp	r0, #0
  4013e8:	d0fc      	beq.n	4013e4 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4013ea:	2002      	movs	r0, #2
  4013ec:	4b0d      	ldr	r3, [pc, #52]	; (401424 <sysclk_init+0x64>)
  4013ee:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4013f0:	2000      	movs	r0, #0
  4013f2:	4b0d      	ldr	r3, [pc, #52]	; (401428 <sysclk_init+0x68>)
  4013f4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4013f6:	4b0d      	ldr	r3, [pc, #52]	; (40142c <sysclk_init+0x6c>)
  4013f8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4013fa:	4802      	ldr	r0, [pc, #8]	; (401404 <sysclk_init+0x44>)
  4013fc:	4b02      	ldr	r3, [pc, #8]	; (401408 <sysclk_init+0x48>)
  4013fe:	4798      	blx	r3
  401400:	bd10      	pop	{r4, pc}
  401402:	bf00      	nop
  401404:	11e1a300 	.word	0x11e1a300
  401408:	00401c91 	.word	0x00401c91
  40140c:	004019e1 	.word	0x004019e1
  401410:	00401a35 	.word	0x00401a35
  401414:	00401a45 	.word	0x00401a45
  401418:	20183f01 	.word	0x20183f01
  40141c:	400e0600 	.word	0x400e0600
  401420:	00401a55 	.word	0x00401a55
  401424:	00401945 	.word	0x00401945
  401428:	0040197d 	.word	0x0040197d
  40142c:	00401b85 	.word	0x00401b85

00401430 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  401430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401432:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401436:	4b84      	ldr	r3, [pc, #528]	; (401648 <board_init+0x218>)
  401438:	605a      	str	r2, [r3, #4]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40143a:	f3bf 8f5f 	dmb	sy
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  40143e:	4f83      	ldr	r7, [pc, #524]	; (40164c <board_init+0x21c>)
  401440:	4638      	mov	r0, r7
  401442:	4d83      	ldr	r5, [pc, #524]	; (401650 <board_init+0x220>)
  401444:	47a8      	blx	r5
	dw_region_attr =
  401446:	4e83      	ldr	r6, [pc, #524]	; (401654 <board_init+0x224>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401448:	ea40 0106 	orr.w	r1, r0, r6
  40144c:	2011      	movs	r0, #17
  40144e:	4c82      	ldr	r4, [pc, #520]	; (401658 <board_init+0x228>)
  401450:	47a0      	blx	r4
		mpu_cal_mpu_region_size(IFLASH_END_ADDRESS - IFLASH_START_ADDRESS) |
  401452:	4882      	ldr	r0, [pc, #520]	; (40165c <board_init+0x22c>)
  401454:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401456:	4982      	ldr	r1, [pc, #520]	; (401660 <board_init+0x230>)
  401458:	4301      	orrs	r1, r0
  40145a:	4882      	ldr	r0, [pc, #520]	; (401664 <board_init+0x234>)
  40145c:	47a0      	blx	r4
		mpu_cal_mpu_region_size(DTCM_END_ADDRESS - DTCM_START_ADDRESS) |
  40145e:	4638      	mov	r0, r7
  401460:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401462:	ea40 0106 	orr.w	r1, r0, r6
  401466:	4880      	ldr	r0, [pc, #512]	; (401668 <board_init+0x238>)
  401468:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SRAM_FIRST_END_ADDRESS - SRAM_FIRST_START_ADDRESS)
  40146a:	4880      	ldr	r0, [pc, #512]	; (40166c <board_init+0x23c>)
  40146c:	47a8      	blx	r5
	dw_region_attr =
  40146e:	f106 7608 	add.w	r6, r6, #35651584	; 0x2200000
  401472:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401476:	ea40 0106 	orr.w	r1, r0, r6
  40147a:	487d      	ldr	r0, [pc, #500]	; (401670 <board_init+0x240>)
  40147c:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SRAM_SECOND_END_ADDRESS - SRAM_SECOND_START_ADDRESS) |
  40147e:	487d      	ldr	r0, [pc, #500]	; (401674 <board_init+0x244>)
  401480:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401482:	ea40 0106 	orr.w	r1, r0, r6
  401486:	487c      	ldr	r0, [pc, #496]	; (401678 <board_init+0x248>)
  401488:	47a0      	blx	r4
		mpu_cal_mpu_region_size(PERIPHERALS_END_ADDRESS - PERIPHERALS_START_ADDRESS)
  40148a:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  40148e:	47a8      	blx	r5
	dw_region_attr = MPU_AP_FULL_ACCESS |
  401490:	4e7a      	ldr	r6, [pc, #488]	; (40167c <board_init+0x24c>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401492:	ea40 0106 	orr.w	r1, r0, r6
  401496:	487a      	ldr	r0, [pc, #488]	; (401680 <board_init+0x250>)
  401498:	47a0      	blx	r4
		mpu_cal_mpu_region_size(EXT_EBI_END_ADDRESS - EXT_EBI_START_ADDRESS) |
  40149a:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  40149e:	47a8      	blx	r5
	dw_region_attr =
  4014a0:	4f78      	ldr	r7, [pc, #480]	; (401684 <board_init+0x254>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4014a2:	ea40 0107 	orr.w	r1, r0, r7
  4014a6:	4878      	ldr	r0, [pc, #480]	; (401688 <board_init+0x258>)
  4014a8:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SDRAM_END_ADDRESS - SDRAM_START_ADDRESS) |
  4014aa:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  4014ae:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4014b0:	4976      	ldr	r1, [pc, #472]	; (40168c <board_init+0x25c>)
  4014b2:	4301      	orrs	r1, r0
  4014b4:	4876      	ldr	r0, [pc, #472]	; (401690 <board_init+0x260>)
  4014b6:	47a0      	blx	r4
		mpu_cal_mpu_region_size(QSPI_END_ADDRESS - QSPI_START_ADDRESS) |
  4014b8:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  4014bc:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4014be:	ea40 0107 	orr.w	r1, r0, r7
  4014c2:	4874      	ldr	r0, [pc, #464]	; (401694 <board_init+0x264>)
  4014c4:	47a0      	blx	r4
		mpu_cal_mpu_region_size(USBHSRAM_END_ADDRESS - USBHSRAM_START_ADDRESS) |
  4014c6:	4874      	ldr	r0, [pc, #464]	; (401698 <board_init+0x268>)
  4014c8:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4014ca:	ea40 0106 	orr.w	r1, r0, r6
  4014ce:	4873      	ldr	r0, [pc, #460]	; (40169c <board_init+0x26c>)
  4014d0:	47a0      	blx	r4
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  4014d2:	4c73      	ldr	r4, [pc, #460]	; (4016a0 <board_init+0x270>)
  4014d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4014d6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
  4014da:	6263      	str	r3, [r4, #36]	; 0x24
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  4014dc:	2005      	movs	r0, #5
  4014de:	4b71      	ldr	r3, [pc, #452]	; (4016a4 <board_init+0x274>)
  4014e0:	4798      	blx	r3
  __ASM volatile ("dsb");
  4014e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4014e6:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4014ea:	4b6f      	ldr	r3, [pc, #444]	; (4016a8 <board_init+0x278>)
  4014ec:	4a6f      	ldr	r2, [pc, #444]	; (4016ac <board_init+0x27c>)
  4014ee:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4014f0:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
  4014f4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  4014f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4014fa:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4014fe:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  401502:	f023 0301 	bic.w	r3, r3, #1
  401506:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  40150a:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
  40150e:	f023 0301 	bic.w	r3, r3, #1
  401512:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  __ASM volatile ("dsb");
  401516:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40151a:	f3bf 8f6f 	isb	sy
  40151e:	200a      	movs	r0, #10
  401520:	4c63      	ldr	r4, [pc, #396]	; (4016b0 <board_init+0x280>)
  401522:	47a0      	blx	r4
  401524:	200b      	movs	r0, #11
  401526:	47a0      	blx	r4
  401528:	200c      	movs	r0, #12
  40152a:	47a0      	blx	r4
  40152c:	2010      	movs	r0, #16
  40152e:	47a0      	blx	r4
  401530:	2011      	movs	r0, #17
  401532:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401534:	4c5f      	ldr	r4, [pc, #380]	; (4016b4 <board_init+0x284>)
  401536:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  40153a:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40153c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401540:	6323      	str	r3, [r4, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401542:	4e5d      	ldr	r6, [pc, #372]	; (4016b8 <board_init+0x288>)
  401544:	f44f 7500 	mov.w	r5, #512	; 0x200
  401548:	6135      	str	r5, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40154a:	f8c6 50a0 	str.w	r5, [r6, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40154e:	6335      	str	r5, [r6, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401550:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401552:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  401556:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  401558:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40155c:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  40155e:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  401560:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  401564:	6f23      	ldr	r3, [r4, #112]	; 0x70
  401566:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  40156a:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40156c:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40156e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  401572:	6763      	str	r3, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  401574:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  401578:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  40157c:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  401580:	2308      	movs	r3, #8
  401582:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401584:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401588:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40158a:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40158c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401590:	6f22      	ldr	r2, [r4, #112]	; 0x70
  401592:	f022 0208 	bic.w	r2, r2, #8
  401596:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401598:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40159a:	f022 0208 	bic.w	r2, r2, #8
  40159e:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4015a0:	6063      	str	r3, [r4, #4]
		base->PIO_PUDR = mask;
  4015a2:	2310      	movs	r3, #16
  4015a4:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4015a6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4015aa:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4015ac:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4015ae:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4015b2:	6f22      	ldr	r2, [r4, #112]	; 0x70
  4015b4:	f022 0210 	bic.w	r2, r2, #16
  4015b8:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4015ba:	6f62      	ldr	r2, [r4, #116]	; 0x74
  4015bc:	f022 0210 	bic.w	r2, r2, #16
  4015c0:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4015c2:	6063      	str	r3, [r4, #4]
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  4015c4:	2300      	movs	r3, #0
  4015c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4015ca:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4015ce:	4630      	mov	r0, r6
  4015d0:	4f3a      	ldr	r7, [pc, #232]	; (4016bc <board_init+0x28c>)
  4015d2:	47b8      	blx	r7
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  4015d4:	2300      	movs	r3, #0
  4015d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4015da:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4015de:	4630      	mov	r0, r6
  4015e0:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  4015e2:	2301      	movs	r3, #1
  4015e4:	22ff      	movs	r2, #255	; 0xff
  4015e6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4015ea:	4630      	mov	r0, r6
  4015ec:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  4015ee:	2301      	movs	r3, #1
  4015f0:	223f      	movs	r2, #63	; 0x3f
  4015f2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4015f6:	4832      	ldr	r0, [pc, #200]	; (4016c0 <board_init+0x290>)
  4015f8:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  4015fa:	2301      	movs	r3, #1
  4015fc:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  401600:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401604:	4620      	mov	r0, r4
  401606:	47b8      	blx	r7
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  401608:	2301      	movs	r3, #1
  40160a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40160e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401612:	4630      	mov	r0, r6
  401614:	47b8      	blx	r7
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  401616:	2301      	movs	r3, #1
  401618:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40161c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401620:	4630      	mov	r0, r6
  401622:	47b8      	blx	r7
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  401624:	2301      	movs	r3, #1
  401626:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40162a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40162e:	4825      	ldr	r0, [pc, #148]	; (4016c4 <board_init+0x294>)
  401630:	47b8      	blx	r7
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  401632:	2300      	movs	r3, #0
  401634:	462a      	mov	r2, r5
  401636:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40163a:	4630      	mov	r0, r6
  40163c:	47b8      	blx	r7
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  40163e:	4629      	mov	r1, r5
  401640:	4630      	mov	r0, r6
  401642:	4b21      	ldr	r3, [pc, #132]	; (4016c8 <board_init+0x298>)
  401644:	4798      	blx	r3
  401646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401648:	400e1850 	.word	0x400e1850
  40164c:	003fffff 	.word	0x003fffff
  401650:	004016e5 	.word	0x004016e5
  401654:	01000001 	.word	0x01000001
  401658:	004016d9 	.word	0x004016d9
  40165c:	001fffff 	.word	0x001fffff
  401660:	06230001 	.word	0x06230001
  401664:	00400012 	.word	0x00400012
  401668:	20000013 	.word	0x20000013
  40166c:	0003ffff 	.word	0x0003ffff
  401670:	20400014 	.word	0x20400014
  401674:	0001ffff 	.word	0x0001ffff
  401678:	20440015 	.word	0x20440015
  40167c:	13010001 	.word	0x13010001
  401680:	40000016 	.word	0x40000016
  401684:	03000001 	.word	0x03000001
  401688:	60000017 	.word	0x60000017
  40168c:	03250001 	.word	0x03250001
  401690:	70000018 	.word	0x70000018
  401694:	80000019 	.word	0x80000019
  401698:	000fffff 	.word	0x000fffff
  40169c:	a010001a 	.word	0xa010001a
  4016a0:	e000ed00 	.word	0xe000ed00
  4016a4:	004016cd 	.word	0x004016cd
  4016a8:	400e0c00 	.word	0x400e0c00
  4016ac:	5a00080c 	.word	0x5a00080c
  4016b0:	00401a65 	.word	0x00401a65
  4016b4:	400e0e00 	.word	0x400e0e00
  4016b8:	400e1200 	.word	0x400e1200
  4016bc:	004017f9 	.word	0x004017f9
  4016c0:	400e1600 	.word	0x400e1600
  4016c4:	400e1400 	.word	0x400e1400
  4016c8:	00401701 	.word	0x00401701

004016cc <mpu_enable>:
 *
 * \param dwMPUEnable  Enable/Disable the memory region.
 */
void mpu_enable(uint32_t dw_mpu_enable)
{
	MPU->CTRL = dw_mpu_enable ;
  4016cc:	4b01      	ldr	r3, [pc, #4]	; (4016d4 <mpu_enable+0x8>)
  4016ce:	6058      	str	r0, [r3, #4]
  4016d0:	4770      	bx	lr
  4016d2:	bf00      	nop
  4016d4:	e000ed90 	.word	0xe000ed90

004016d8 <mpu_set_region>:
 * \param dwRegionBaseAddr  Memory region base address.
 * \param dwRegionAttr  Memory region attributes.
 */
void mpu_set_region(uint32_t dw_region_base_addr, uint32_t dw_region_attr)
{
	MPU->RBAR = dw_region_base_addr;
  4016d8:	4b01      	ldr	r3, [pc, #4]	; (4016e0 <mpu_set_region+0x8>)
  4016da:	60d8      	str	r0, [r3, #12]
	MPU->RASR = dw_region_attr;
  4016dc:	6119      	str	r1, [r3, #16]
  4016de:	4770      	bx	lr
  4016e0:	e000ed90 	.word	0xe000ed90

004016e4 <mpu_cal_mpu_region_size>:
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;

	while( dwReturnValue < 31 ) {
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  4016e4:	2820      	cmp	r0, #32
  4016e6:	d909      	bls.n	4016fc <mpu_cal_mpu_region_size+0x18>
  4016e8:	2304      	movs	r3, #4
  4016ea:	2220      	movs	r2, #32
			break;
		} else {
			dwReturnValue++;
  4016ec:	3301      	adds	r3, #1
		}
		dwRegionSize <<= 1;
  4016ee:	0052      	lsls	r2, r2, #1
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  4016f0:	4290      	cmp	r0, r2
  4016f2:	d901      	bls.n	4016f8 <mpu_cal_mpu_region_size+0x14>
  4016f4:	2b1e      	cmp	r3, #30
  4016f6:	d9f9      	bls.n	4016ec <mpu_cal_mpu_region_size+0x8>
	}

	return ( dwReturnValue << 1 );
}
  4016f8:	0058      	lsls	r0, r3, #1
  4016fa:	4770      	bx	lr
	uint32_t dwReturnValue = 4;
  4016fc:	2304      	movs	r3, #4
  4016fe:	e7fb      	b.n	4016f8 <mpu_cal_mpu_region_size+0x14>

00401700 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  401700:	6301      	str	r1, [r0, #48]	; 0x30
  401702:	4770      	bx	lr

00401704 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  401704:	6341      	str	r1, [r0, #52]	; 0x34
  401706:	4770      	bx	lr

00401708 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401708:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40170a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40170e:	d03a      	beq.n	401786 <pio_set_peripheral+0x7e>
  401710:	d813      	bhi.n	40173a <pio_set_peripheral+0x32>
  401712:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401716:	d025      	beq.n	401764 <pio_set_peripheral+0x5c>
  401718:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40171c:	d10a      	bne.n	401734 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40171e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401720:	4313      	orrs	r3, r2
  401722:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401724:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401726:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401728:	400b      	ands	r3, r1
  40172a:	ea23 0302 	bic.w	r3, r3, r2
  40172e:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401730:	6042      	str	r2, [r0, #4]
  401732:	4770      	bx	lr
	switch (ul_type) {
  401734:	2900      	cmp	r1, #0
  401736:	d1fb      	bne.n	401730 <pio_set_peripheral+0x28>
  401738:	4770      	bx	lr
  40173a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40173e:	d021      	beq.n	401784 <pio_set_peripheral+0x7c>
  401740:	d809      	bhi.n	401756 <pio_set_peripheral+0x4e>
  401742:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401746:	d1f3      	bne.n	401730 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401748:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40174a:	4313      	orrs	r3, r2
  40174c:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40174e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401750:	4313      	orrs	r3, r2
  401752:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401754:	e7ec      	b.n	401730 <pio_set_peripheral+0x28>
	switch (ul_type) {
  401756:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40175a:	d013      	beq.n	401784 <pio_set_peripheral+0x7c>
  40175c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401760:	d010      	beq.n	401784 <pio_set_peripheral+0x7c>
  401762:	e7e5      	b.n	401730 <pio_set_peripheral+0x28>
{
  401764:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  401766:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401768:	6f04      	ldr	r4, [r0, #112]	; 0x70
  40176a:	43d3      	mvns	r3, r2
  40176c:	4021      	ands	r1, r4
  40176e:	461c      	mov	r4, r3
  401770:	4019      	ands	r1, r3
  401772:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401774:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401776:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401778:	400b      	ands	r3, r1
  40177a:	4023      	ands	r3, r4
  40177c:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  40177e:	6042      	str	r2, [r0, #4]
}
  401780:	f85d 4b04 	ldr.w	r4, [sp], #4
  401784:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  401786:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401788:	6f01      	ldr	r1, [r0, #112]	; 0x70
  40178a:	400b      	ands	r3, r1
  40178c:	ea23 0302 	bic.w	r3, r3, r2
  401790:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401792:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401794:	4313      	orrs	r3, r2
  401796:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401798:	e7ca      	b.n	401730 <pio_set_peripheral+0x28>

0040179a <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40179a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40179c:	f012 0f01 	tst.w	r2, #1
  4017a0:	d10d      	bne.n	4017be <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4017a2:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4017a4:	f012 0f0a 	tst.w	r2, #10
  4017a8:	d00b      	beq.n	4017c2 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4017aa:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4017ac:	f012 0f02 	tst.w	r2, #2
  4017b0:	d109      	bne.n	4017c6 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4017b2:	f012 0f08 	tst.w	r2, #8
  4017b6:	d008      	beq.n	4017ca <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4017b8:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4017bc:	e005      	b.n	4017ca <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4017be:	6641      	str	r1, [r0, #100]	; 0x64
  4017c0:	e7f0      	b.n	4017a4 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4017c2:	6241      	str	r1, [r0, #36]	; 0x24
  4017c4:	e7f2      	b.n	4017ac <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4017c6:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4017ca:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4017cc:	6001      	str	r1, [r0, #0]
  4017ce:	4770      	bx	lr

004017d0 <pio_set_output>:
{
  4017d0:	b410      	push	{r4}
  4017d2:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4017d4:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4017d6:	b94c      	cbnz	r4, 4017ec <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  4017d8:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4017da:	b14b      	cbz	r3, 4017f0 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  4017dc:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4017de:	b94a      	cbnz	r2, 4017f4 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  4017e0:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4017e2:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4017e4:	6001      	str	r1, [r0, #0]
}
  4017e6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4017ea:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4017ec:	6641      	str	r1, [r0, #100]	; 0x64
  4017ee:	e7f4      	b.n	4017da <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  4017f0:	6541      	str	r1, [r0, #84]	; 0x54
  4017f2:	e7f4      	b.n	4017de <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4017f4:	6301      	str	r1, [r0, #48]	; 0x30
  4017f6:	e7f4      	b.n	4017e2 <pio_set_output+0x12>

004017f8 <pio_configure>:
{
  4017f8:	b570      	push	{r4, r5, r6, lr}
  4017fa:	b082      	sub	sp, #8
  4017fc:	4605      	mov	r5, r0
  4017fe:	4616      	mov	r6, r2
  401800:	461c      	mov	r4, r3
	switch (ul_type) {
  401802:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401806:	d014      	beq.n	401832 <pio_configure+0x3a>
  401808:	d90a      	bls.n	401820 <pio_configure+0x28>
  40180a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40180e:	d024      	beq.n	40185a <pio_configure+0x62>
  401810:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401814:	d021      	beq.n	40185a <pio_configure+0x62>
  401816:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40181a:	d017      	beq.n	40184c <pio_configure+0x54>
		return 0;
  40181c:	2000      	movs	r0, #0
  40181e:	e01a      	b.n	401856 <pio_configure+0x5e>
	switch (ul_type) {
  401820:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401824:	d005      	beq.n	401832 <pio_configure+0x3a>
  401826:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40182a:	d002      	beq.n	401832 <pio_configure+0x3a>
  40182c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401830:	d1f4      	bne.n	40181c <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  401832:	4632      	mov	r2, r6
  401834:	4628      	mov	r0, r5
  401836:	4b11      	ldr	r3, [pc, #68]	; (40187c <pio_configure+0x84>)
  401838:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40183a:	f014 0f01 	tst.w	r4, #1
  40183e:	d102      	bne.n	401846 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  401840:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  401842:	2001      	movs	r0, #1
  401844:	e007      	b.n	401856 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  401846:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  401848:	2001      	movs	r0, #1
  40184a:	e004      	b.n	401856 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  40184c:	461a      	mov	r2, r3
  40184e:	4631      	mov	r1, r6
  401850:	4b0b      	ldr	r3, [pc, #44]	; (401880 <pio_configure+0x88>)
  401852:	4798      	blx	r3
	return 1;
  401854:	2001      	movs	r0, #1
}
  401856:	b002      	add	sp, #8
  401858:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  40185a:	f004 0301 	and.w	r3, r4, #1
  40185e:	9300      	str	r3, [sp, #0]
  401860:	f3c4 0380 	ubfx	r3, r4, #2, #1
  401864:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401868:	bf14      	ite	ne
  40186a:	2200      	movne	r2, #0
  40186c:	2201      	moveq	r2, #1
  40186e:	4631      	mov	r1, r6
  401870:	4628      	mov	r0, r5
  401872:	4c04      	ldr	r4, [pc, #16]	; (401884 <pio_configure+0x8c>)
  401874:	47a0      	blx	r4
	return 1;
  401876:	2001      	movs	r0, #1
		break;
  401878:	e7ed      	b.n	401856 <pio_configure+0x5e>
  40187a:	bf00      	nop
  40187c:	00401709 	.word	0x00401709
  401880:	0040179b 	.word	0x0040179b
  401884:	004017d1 	.word	0x004017d1

00401888 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401888:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40188a:	4770      	bx	lr

0040188c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  40188c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40188e:	4770      	bx	lr

00401890 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401894:	4604      	mov	r4, r0
  401896:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401898:	4b0e      	ldr	r3, [pc, #56]	; (4018d4 <pio_handler_process+0x44>)
  40189a:	4798      	blx	r3
  40189c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40189e:	4620      	mov	r0, r4
  4018a0:	4b0d      	ldr	r3, [pc, #52]	; (4018d8 <pio_handler_process+0x48>)
  4018a2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4018a4:	4005      	ands	r5, r0
  4018a6:	d013      	beq.n	4018d0 <pio_handler_process+0x40>
  4018a8:	4c0c      	ldr	r4, [pc, #48]	; (4018dc <pio_handler_process+0x4c>)
  4018aa:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4018ae:	e003      	b.n	4018b8 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4018b0:	42b4      	cmp	r4, r6
  4018b2:	d00d      	beq.n	4018d0 <pio_handler_process+0x40>
  4018b4:	3410      	adds	r4, #16
		while (status != 0) {
  4018b6:	b15d      	cbz	r5, 4018d0 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4018b8:	6820      	ldr	r0, [r4, #0]
  4018ba:	4540      	cmp	r0, r8
  4018bc:	d1f8      	bne.n	4018b0 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4018be:	6861      	ldr	r1, [r4, #4]
  4018c0:	4229      	tst	r1, r5
  4018c2:	d0f5      	beq.n	4018b0 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4018c4:	68e3      	ldr	r3, [r4, #12]
  4018c6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4018c8:	6863      	ldr	r3, [r4, #4]
  4018ca:	ea25 0503 	bic.w	r5, r5, r3
  4018ce:	e7ef      	b.n	4018b0 <pio_handler_process+0x20>
  4018d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4018d4:	00401889 	.word	0x00401889
  4018d8:	0040188d 	.word	0x0040188d
  4018dc:	20400b08 	.word	0x20400b08

004018e0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4018e0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4018e2:	210a      	movs	r1, #10
  4018e4:	4801      	ldr	r0, [pc, #4]	; (4018ec <PIOA_Handler+0xc>)
  4018e6:	4b02      	ldr	r3, [pc, #8]	; (4018f0 <PIOA_Handler+0x10>)
  4018e8:	4798      	blx	r3
  4018ea:	bd08      	pop	{r3, pc}
  4018ec:	400e0e00 	.word	0x400e0e00
  4018f0:	00401891 	.word	0x00401891

004018f4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4018f4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4018f6:	210b      	movs	r1, #11
  4018f8:	4801      	ldr	r0, [pc, #4]	; (401900 <PIOB_Handler+0xc>)
  4018fa:	4b02      	ldr	r3, [pc, #8]	; (401904 <PIOB_Handler+0x10>)
  4018fc:	4798      	blx	r3
  4018fe:	bd08      	pop	{r3, pc}
  401900:	400e1000 	.word	0x400e1000
  401904:	00401891 	.word	0x00401891

00401908 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401908:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40190a:	210c      	movs	r1, #12
  40190c:	4801      	ldr	r0, [pc, #4]	; (401914 <PIOC_Handler+0xc>)
  40190e:	4b02      	ldr	r3, [pc, #8]	; (401918 <PIOC_Handler+0x10>)
  401910:	4798      	blx	r3
  401912:	bd08      	pop	{r3, pc}
  401914:	400e1200 	.word	0x400e1200
  401918:	00401891 	.word	0x00401891

0040191c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  40191c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40191e:	2110      	movs	r1, #16
  401920:	4801      	ldr	r0, [pc, #4]	; (401928 <PIOD_Handler+0xc>)
  401922:	4b02      	ldr	r3, [pc, #8]	; (40192c <PIOD_Handler+0x10>)
  401924:	4798      	blx	r3
  401926:	bd08      	pop	{r3, pc}
  401928:	400e1400 	.word	0x400e1400
  40192c:	00401891 	.word	0x00401891

00401930 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401930:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  401932:	2111      	movs	r1, #17
  401934:	4801      	ldr	r0, [pc, #4]	; (40193c <PIOE_Handler+0xc>)
  401936:	4b02      	ldr	r3, [pc, #8]	; (401940 <PIOE_Handler+0x10>)
  401938:	4798      	blx	r3
  40193a:	bd08      	pop	{r3, pc}
  40193c:	400e1600 	.word	0x400e1600
  401940:	00401891 	.word	0x00401891

00401944 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401944:	2803      	cmp	r0, #3
  401946:	d011      	beq.n	40196c <pmc_mck_set_division+0x28>
  401948:	2804      	cmp	r0, #4
  40194a:	d012      	beq.n	401972 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40194c:	2802      	cmp	r0, #2
  40194e:	bf0c      	ite	eq
  401950:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401954:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401956:	4a08      	ldr	r2, [pc, #32]	; (401978 <pmc_mck_set_division+0x34>)
  401958:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40195a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40195e:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401960:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401962:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401964:	f013 0f08 	tst.w	r3, #8
  401968:	d0fb      	beq.n	401962 <pmc_mck_set_division+0x1e>
}
  40196a:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40196c:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401970:	e7f1      	b.n	401956 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401972:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  401976:	e7ee      	b.n	401956 <pmc_mck_set_division+0x12>
  401978:	400e0600 	.word	0x400e0600

0040197c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40197c:	4a17      	ldr	r2, [pc, #92]	; (4019dc <pmc_switch_mck_to_pllack+0x60>)
  40197e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401984:	4318      	orrs	r0, r3
  401986:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401988:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40198a:	f013 0f08 	tst.w	r3, #8
  40198e:	d10a      	bne.n	4019a6 <pmc_switch_mck_to_pllack+0x2a>
  401990:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401994:	4911      	ldr	r1, [pc, #68]	; (4019dc <pmc_switch_mck_to_pllack+0x60>)
  401996:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401998:	f012 0f08 	tst.w	r2, #8
  40199c:	d103      	bne.n	4019a6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40199e:	3b01      	subs	r3, #1
  4019a0:	d1f9      	bne.n	401996 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4019a2:	2001      	movs	r0, #1
  4019a4:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4019a6:	4a0d      	ldr	r2, [pc, #52]	; (4019dc <pmc_switch_mck_to_pllack+0x60>)
  4019a8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4019aa:	f023 0303 	bic.w	r3, r3, #3
  4019ae:	f043 0302 	orr.w	r3, r3, #2
  4019b2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4019b4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4019b6:	f013 0f08 	tst.w	r3, #8
  4019ba:	d10a      	bne.n	4019d2 <pmc_switch_mck_to_pllack+0x56>
  4019bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4019c0:	4906      	ldr	r1, [pc, #24]	; (4019dc <pmc_switch_mck_to_pllack+0x60>)
  4019c2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4019c4:	f012 0f08 	tst.w	r2, #8
  4019c8:	d105      	bne.n	4019d6 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4019ca:	3b01      	subs	r3, #1
  4019cc:	d1f9      	bne.n	4019c2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4019ce:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4019d0:	4770      	bx	lr
	return 0;
  4019d2:	2000      	movs	r0, #0
  4019d4:	4770      	bx	lr
  4019d6:	2000      	movs	r0, #0
  4019d8:	4770      	bx	lr
  4019da:	bf00      	nop
  4019dc:	400e0600 	.word	0x400e0600

004019e0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4019e0:	b9a0      	cbnz	r0, 401a0c <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4019e2:	480e      	ldr	r0, [pc, #56]	; (401a1c <pmc_switch_mainck_to_xtal+0x3c>)
  4019e4:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4019e6:	0209      	lsls	r1, r1, #8
  4019e8:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4019ea:	4a0d      	ldr	r2, [pc, #52]	; (401a20 <pmc_switch_mainck_to_xtal+0x40>)
  4019ec:	401a      	ands	r2, r3
  4019ee:	4b0d      	ldr	r3, [pc, #52]	; (401a24 <pmc_switch_mainck_to_xtal+0x44>)
  4019f0:	4313      	orrs	r3, r2
  4019f2:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4019f4:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4019f6:	4602      	mov	r2, r0
  4019f8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4019fa:	f013 0f01 	tst.w	r3, #1
  4019fe:	d0fb      	beq.n	4019f8 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401a00:	4a06      	ldr	r2, [pc, #24]	; (401a1c <pmc_switch_mainck_to_xtal+0x3c>)
  401a02:	6a11      	ldr	r1, [r2, #32]
  401a04:	4b08      	ldr	r3, [pc, #32]	; (401a28 <pmc_switch_mainck_to_xtal+0x48>)
  401a06:	430b      	orrs	r3, r1
  401a08:	6213      	str	r3, [r2, #32]
  401a0a:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401a0c:	4903      	ldr	r1, [pc, #12]	; (401a1c <pmc_switch_mainck_to_xtal+0x3c>)
  401a0e:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401a10:	4a06      	ldr	r2, [pc, #24]	; (401a2c <pmc_switch_mainck_to_xtal+0x4c>)
  401a12:	401a      	ands	r2, r3
  401a14:	4b06      	ldr	r3, [pc, #24]	; (401a30 <pmc_switch_mainck_to_xtal+0x50>)
  401a16:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401a18:	620b      	str	r3, [r1, #32]
  401a1a:	4770      	bx	lr
  401a1c:	400e0600 	.word	0x400e0600
  401a20:	ffc8fffc 	.word	0xffc8fffc
  401a24:	00370001 	.word	0x00370001
  401a28:	01370000 	.word	0x01370000
  401a2c:	fec8fffc 	.word	0xfec8fffc
  401a30:	01370002 	.word	0x01370002

00401a34 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401a34:	4b02      	ldr	r3, [pc, #8]	; (401a40 <pmc_osc_is_ready_mainck+0xc>)
  401a36:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401a38:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401a3c:	4770      	bx	lr
  401a3e:	bf00      	nop
  401a40:	400e0600 	.word	0x400e0600

00401a44 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401a44:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401a48:	4b01      	ldr	r3, [pc, #4]	; (401a50 <pmc_disable_pllack+0xc>)
  401a4a:	629a      	str	r2, [r3, #40]	; 0x28
  401a4c:	4770      	bx	lr
  401a4e:	bf00      	nop
  401a50:	400e0600 	.word	0x400e0600

00401a54 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401a54:	4b02      	ldr	r3, [pc, #8]	; (401a60 <pmc_is_locked_pllack+0xc>)
  401a56:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401a58:	f000 0002 	and.w	r0, r0, #2
  401a5c:	4770      	bx	lr
  401a5e:	bf00      	nop
  401a60:	400e0600 	.word	0x400e0600

00401a64 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401a64:	283f      	cmp	r0, #63	; 0x3f
  401a66:	d81e      	bhi.n	401aa6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401a68:	281f      	cmp	r0, #31
  401a6a:	d80c      	bhi.n	401a86 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401a6c:	4b11      	ldr	r3, [pc, #68]	; (401ab4 <pmc_enable_periph_clk+0x50>)
  401a6e:	699a      	ldr	r2, [r3, #24]
  401a70:	2301      	movs	r3, #1
  401a72:	4083      	lsls	r3, r0
  401a74:	4393      	bics	r3, r2
  401a76:	d018      	beq.n	401aaa <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401a78:	2301      	movs	r3, #1
  401a7a:	fa03 f000 	lsl.w	r0, r3, r0
  401a7e:	4b0d      	ldr	r3, [pc, #52]	; (401ab4 <pmc_enable_periph_clk+0x50>)
  401a80:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401a82:	2000      	movs	r0, #0
  401a84:	4770      	bx	lr
		ul_id -= 32;
  401a86:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401a88:	4b0a      	ldr	r3, [pc, #40]	; (401ab4 <pmc_enable_periph_clk+0x50>)
  401a8a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401a8e:	2301      	movs	r3, #1
  401a90:	4083      	lsls	r3, r0
  401a92:	4393      	bics	r3, r2
  401a94:	d00b      	beq.n	401aae <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401a96:	2301      	movs	r3, #1
  401a98:	fa03 f000 	lsl.w	r0, r3, r0
  401a9c:	4b05      	ldr	r3, [pc, #20]	; (401ab4 <pmc_enable_periph_clk+0x50>)
  401a9e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  401aa2:	2000      	movs	r0, #0
  401aa4:	4770      	bx	lr
		return 1;
  401aa6:	2001      	movs	r0, #1
  401aa8:	4770      	bx	lr
	return 0;
  401aaa:	2000      	movs	r0, #0
  401aac:	4770      	bx	lr
  401aae:	2000      	movs	r0, #0
}
  401ab0:	4770      	bx	lr
  401ab2:	bf00      	nop
  401ab4:	400e0600 	.word	0x400e0600

00401ab8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401ab8:	e7fe      	b.n	401ab8 <Dummy_Handler>
	...

00401abc <Reset_Handler>:
{
  401abc:	b500      	push	{lr}
  401abe:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401ac0:	4b25      	ldr	r3, [pc, #148]	; (401b58 <Reset_Handler+0x9c>)
  401ac2:	4a26      	ldr	r2, [pc, #152]	; (401b5c <Reset_Handler+0xa0>)
  401ac4:	429a      	cmp	r2, r3
  401ac6:	d010      	beq.n	401aea <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401ac8:	4b25      	ldr	r3, [pc, #148]	; (401b60 <Reset_Handler+0xa4>)
  401aca:	4a23      	ldr	r2, [pc, #140]	; (401b58 <Reset_Handler+0x9c>)
  401acc:	429a      	cmp	r2, r3
  401ace:	d20c      	bcs.n	401aea <Reset_Handler+0x2e>
  401ad0:	3b01      	subs	r3, #1
  401ad2:	1a9b      	subs	r3, r3, r2
  401ad4:	f023 0303 	bic.w	r3, r3, #3
  401ad8:	3304      	adds	r3, #4
  401ada:	4413      	add	r3, r2
  401adc:	491f      	ldr	r1, [pc, #124]	; (401b5c <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  401ade:	f851 0b04 	ldr.w	r0, [r1], #4
  401ae2:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  401ae6:	429a      	cmp	r2, r3
  401ae8:	d1f9      	bne.n	401ade <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  401aea:	4b1e      	ldr	r3, [pc, #120]	; (401b64 <Reset_Handler+0xa8>)
  401aec:	4a1e      	ldr	r2, [pc, #120]	; (401b68 <Reset_Handler+0xac>)
  401aee:	429a      	cmp	r2, r3
  401af0:	d20a      	bcs.n	401b08 <Reset_Handler+0x4c>
  401af2:	3b01      	subs	r3, #1
  401af4:	1a9b      	subs	r3, r3, r2
  401af6:	f023 0303 	bic.w	r3, r3, #3
  401afa:	3304      	adds	r3, #4
  401afc:	4413      	add	r3, r2
                *pDest++ = 0;
  401afe:	2100      	movs	r1, #0
  401b00:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401b04:	4293      	cmp	r3, r2
  401b06:	d1fb      	bne.n	401b00 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401b08:	4a18      	ldr	r2, [pc, #96]	; (401b6c <Reset_Handler+0xb0>)
  401b0a:	4b19      	ldr	r3, [pc, #100]	; (401b70 <Reset_Handler+0xb4>)
  401b0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401b10:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401b12:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401b16:	fab3 f383 	clz	r3, r3
  401b1a:	095b      	lsrs	r3, r3, #5
  401b1c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401b1e:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401b20:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401b24:	2200      	movs	r2, #0
  401b26:	4b13      	ldr	r3, [pc, #76]	; (401b74 <Reset_Handler+0xb8>)
  401b28:	701a      	strb	r2, [r3, #0]
	return flags;
  401b2a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401b2c:	4a12      	ldr	r2, [pc, #72]	; (401b78 <Reset_Handler+0xbc>)
  401b2e:	6813      	ldr	r3, [r2, #0]
  401b30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401b34:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401b36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401b3a:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401b3e:	b129      	cbz	r1, 401b4c <Reset_Handler+0x90>
		cpu_irq_enable();
  401b40:	2201      	movs	r2, #1
  401b42:	4b0c      	ldr	r3, [pc, #48]	; (401b74 <Reset_Handler+0xb8>)
  401b44:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401b46:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401b4a:	b662      	cpsie	i
        __libc_init_array();
  401b4c:	4b0b      	ldr	r3, [pc, #44]	; (401b7c <Reset_Handler+0xc0>)
  401b4e:	4798      	blx	r3
        main();
  401b50:	4b0b      	ldr	r3, [pc, #44]	; (401b80 <Reset_Handler+0xc4>)
  401b52:	4798      	blx	r3
  401b54:	e7fe      	b.n	401b54 <Reset_Handler+0x98>
  401b56:	bf00      	nop
  401b58:	20400000 	.word	0x20400000
  401b5c:	00403394 	.word	0x00403394
  401b60:	20400864 	.word	0x20400864
  401b64:	20400c04 	.word	0x20400c04
  401b68:	20400864 	.word	0x20400864
  401b6c:	e000ed00 	.word	0xe000ed00
  401b70:	00400000 	.word	0x00400000
  401b74:	20400018 	.word	0x20400018
  401b78:	e000ed88 	.word	0xe000ed88
  401b7c:	00401dbd 	.word	0x00401dbd
  401b80:	00401d55 	.word	0x00401d55

00401b84 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401b84:	4b3b      	ldr	r3, [pc, #236]	; (401c74 <SystemCoreClockUpdate+0xf0>)
  401b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401b88:	f003 0303 	and.w	r3, r3, #3
  401b8c:	2b01      	cmp	r3, #1
  401b8e:	d01d      	beq.n	401bcc <SystemCoreClockUpdate+0x48>
  401b90:	b183      	cbz	r3, 401bb4 <SystemCoreClockUpdate+0x30>
  401b92:	2b02      	cmp	r3, #2
  401b94:	d036      	beq.n	401c04 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401b96:	4b37      	ldr	r3, [pc, #220]	; (401c74 <SystemCoreClockUpdate+0xf0>)
  401b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401b9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401b9e:	2b70      	cmp	r3, #112	; 0x70
  401ba0:	d05f      	beq.n	401c62 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401ba2:	4b34      	ldr	r3, [pc, #208]	; (401c74 <SystemCoreClockUpdate+0xf0>)
  401ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401ba6:	4934      	ldr	r1, [pc, #208]	; (401c78 <SystemCoreClockUpdate+0xf4>)
  401ba8:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401bac:	680b      	ldr	r3, [r1, #0]
  401bae:	40d3      	lsrs	r3, r2
  401bb0:	600b      	str	r3, [r1, #0]
  401bb2:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401bb4:	4b31      	ldr	r3, [pc, #196]	; (401c7c <SystemCoreClockUpdate+0xf8>)
  401bb6:	695b      	ldr	r3, [r3, #20]
  401bb8:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401bbc:	bf14      	ite	ne
  401bbe:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401bc2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401bc6:	4b2c      	ldr	r3, [pc, #176]	; (401c78 <SystemCoreClockUpdate+0xf4>)
  401bc8:	601a      	str	r2, [r3, #0]
  401bca:	e7e4      	b.n	401b96 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401bcc:	4b29      	ldr	r3, [pc, #164]	; (401c74 <SystemCoreClockUpdate+0xf0>)
  401bce:	6a1b      	ldr	r3, [r3, #32]
  401bd0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401bd4:	d003      	beq.n	401bde <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401bd6:	4a2a      	ldr	r2, [pc, #168]	; (401c80 <SystemCoreClockUpdate+0xfc>)
  401bd8:	4b27      	ldr	r3, [pc, #156]	; (401c78 <SystemCoreClockUpdate+0xf4>)
  401bda:	601a      	str	r2, [r3, #0]
  401bdc:	e7db      	b.n	401b96 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401bde:	4a29      	ldr	r2, [pc, #164]	; (401c84 <SystemCoreClockUpdate+0x100>)
  401be0:	4b25      	ldr	r3, [pc, #148]	; (401c78 <SystemCoreClockUpdate+0xf4>)
  401be2:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401be4:	4b23      	ldr	r3, [pc, #140]	; (401c74 <SystemCoreClockUpdate+0xf0>)
  401be6:	6a1b      	ldr	r3, [r3, #32]
  401be8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401bec:	2b10      	cmp	r3, #16
  401bee:	d005      	beq.n	401bfc <SystemCoreClockUpdate+0x78>
  401bf0:	2b20      	cmp	r3, #32
  401bf2:	d1d0      	bne.n	401b96 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401bf4:	4a22      	ldr	r2, [pc, #136]	; (401c80 <SystemCoreClockUpdate+0xfc>)
  401bf6:	4b20      	ldr	r3, [pc, #128]	; (401c78 <SystemCoreClockUpdate+0xf4>)
  401bf8:	601a      	str	r2, [r3, #0]
          break;
  401bfa:	e7cc      	b.n	401b96 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401bfc:	4a22      	ldr	r2, [pc, #136]	; (401c88 <SystemCoreClockUpdate+0x104>)
  401bfe:	4b1e      	ldr	r3, [pc, #120]	; (401c78 <SystemCoreClockUpdate+0xf4>)
  401c00:	601a      	str	r2, [r3, #0]
          break;
  401c02:	e7c8      	b.n	401b96 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401c04:	4b1b      	ldr	r3, [pc, #108]	; (401c74 <SystemCoreClockUpdate+0xf0>)
  401c06:	6a1b      	ldr	r3, [r3, #32]
  401c08:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401c0c:	d016      	beq.n	401c3c <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401c0e:	4a1c      	ldr	r2, [pc, #112]	; (401c80 <SystemCoreClockUpdate+0xfc>)
  401c10:	4b19      	ldr	r3, [pc, #100]	; (401c78 <SystemCoreClockUpdate+0xf4>)
  401c12:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401c14:	4b17      	ldr	r3, [pc, #92]	; (401c74 <SystemCoreClockUpdate+0xf0>)
  401c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401c18:	f003 0303 	and.w	r3, r3, #3
  401c1c:	2b02      	cmp	r3, #2
  401c1e:	d1ba      	bne.n	401b96 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401c20:	4a14      	ldr	r2, [pc, #80]	; (401c74 <SystemCoreClockUpdate+0xf0>)
  401c22:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401c24:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401c26:	4814      	ldr	r0, [pc, #80]	; (401c78 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401c28:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401c2c:	6803      	ldr	r3, [r0, #0]
  401c2e:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401c32:	b2d2      	uxtb	r2, r2
  401c34:	fbb3 f3f2 	udiv	r3, r3, r2
  401c38:	6003      	str	r3, [r0, #0]
  401c3a:	e7ac      	b.n	401b96 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401c3c:	4a11      	ldr	r2, [pc, #68]	; (401c84 <SystemCoreClockUpdate+0x100>)
  401c3e:	4b0e      	ldr	r3, [pc, #56]	; (401c78 <SystemCoreClockUpdate+0xf4>)
  401c40:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401c42:	4b0c      	ldr	r3, [pc, #48]	; (401c74 <SystemCoreClockUpdate+0xf0>)
  401c44:	6a1b      	ldr	r3, [r3, #32]
  401c46:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401c4a:	2b10      	cmp	r3, #16
  401c4c:	d005      	beq.n	401c5a <SystemCoreClockUpdate+0xd6>
  401c4e:	2b20      	cmp	r3, #32
  401c50:	d1e0      	bne.n	401c14 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401c52:	4a0b      	ldr	r2, [pc, #44]	; (401c80 <SystemCoreClockUpdate+0xfc>)
  401c54:	4b08      	ldr	r3, [pc, #32]	; (401c78 <SystemCoreClockUpdate+0xf4>)
  401c56:	601a      	str	r2, [r3, #0]
          break;
  401c58:	e7dc      	b.n	401c14 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401c5a:	4a0b      	ldr	r2, [pc, #44]	; (401c88 <SystemCoreClockUpdate+0x104>)
  401c5c:	4b06      	ldr	r3, [pc, #24]	; (401c78 <SystemCoreClockUpdate+0xf4>)
  401c5e:	601a      	str	r2, [r3, #0]
          break;
  401c60:	e7d8      	b.n	401c14 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401c62:	4a05      	ldr	r2, [pc, #20]	; (401c78 <SystemCoreClockUpdate+0xf4>)
  401c64:	6813      	ldr	r3, [r2, #0]
  401c66:	4909      	ldr	r1, [pc, #36]	; (401c8c <SystemCoreClockUpdate+0x108>)
  401c68:	fba1 1303 	umull	r1, r3, r1, r3
  401c6c:	085b      	lsrs	r3, r3, #1
  401c6e:	6013      	str	r3, [r2, #0]
  401c70:	4770      	bx	lr
  401c72:	bf00      	nop
  401c74:	400e0600 	.word	0x400e0600
  401c78:	2040001c 	.word	0x2040001c
  401c7c:	400e1810 	.word	0x400e1810
  401c80:	00b71b00 	.word	0x00b71b00
  401c84:	003d0900 	.word	0x003d0900
  401c88:	007a1200 	.word	0x007a1200
  401c8c:	aaaaaaab 	.word	0xaaaaaaab

00401c90 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401c90:	4b16      	ldr	r3, [pc, #88]	; (401cec <system_init_flash+0x5c>)
  401c92:	4298      	cmp	r0, r3
  401c94:	d913      	bls.n	401cbe <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401c96:	4b16      	ldr	r3, [pc, #88]	; (401cf0 <system_init_flash+0x60>)
  401c98:	4298      	cmp	r0, r3
  401c9a:	d915      	bls.n	401cc8 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401c9c:	4b15      	ldr	r3, [pc, #84]	; (401cf4 <system_init_flash+0x64>)
  401c9e:	4298      	cmp	r0, r3
  401ca0:	d916      	bls.n	401cd0 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401ca2:	4b15      	ldr	r3, [pc, #84]	; (401cf8 <system_init_flash+0x68>)
  401ca4:	4298      	cmp	r0, r3
  401ca6:	d917      	bls.n	401cd8 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401ca8:	4b14      	ldr	r3, [pc, #80]	; (401cfc <system_init_flash+0x6c>)
  401caa:	4298      	cmp	r0, r3
  401cac:	d918      	bls.n	401ce0 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401cae:	4b14      	ldr	r3, [pc, #80]	; (401d00 <system_init_flash+0x70>)
  401cb0:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401cb2:	bf94      	ite	ls
  401cb4:	4a13      	ldrls	r2, [pc, #76]	; (401d04 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401cb6:	4a14      	ldrhi	r2, [pc, #80]	; (401d08 <system_init_flash+0x78>)
  401cb8:	4b14      	ldr	r3, [pc, #80]	; (401d0c <system_init_flash+0x7c>)
  401cba:	601a      	str	r2, [r3, #0]
  401cbc:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401cbe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401cc2:	4b12      	ldr	r3, [pc, #72]	; (401d0c <system_init_flash+0x7c>)
  401cc4:	601a      	str	r2, [r3, #0]
  401cc6:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401cc8:	4a11      	ldr	r2, [pc, #68]	; (401d10 <system_init_flash+0x80>)
  401cca:	4b10      	ldr	r3, [pc, #64]	; (401d0c <system_init_flash+0x7c>)
  401ccc:	601a      	str	r2, [r3, #0]
  401cce:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401cd0:	4a10      	ldr	r2, [pc, #64]	; (401d14 <system_init_flash+0x84>)
  401cd2:	4b0e      	ldr	r3, [pc, #56]	; (401d0c <system_init_flash+0x7c>)
  401cd4:	601a      	str	r2, [r3, #0]
  401cd6:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401cd8:	4a0f      	ldr	r2, [pc, #60]	; (401d18 <system_init_flash+0x88>)
  401cda:	4b0c      	ldr	r3, [pc, #48]	; (401d0c <system_init_flash+0x7c>)
  401cdc:	601a      	str	r2, [r3, #0]
  401cde:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401ce0:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401ce4:	4b09      	ldr	r3, [pc, #36]	; (401d0c <system_init_flash+0x7c>)
  401ce6:	601a      	str	r2, [r3, #0]
  401ce8:	4770      	bx	lr
  401cea:	bf00      	nop
  401cec:	015ef3bf 	.word	0x015ef3bf
  401cf0:	02bde77f 	.word	0x02bde77f
  401cf4:	041cdb3f 	.word	0x041cdb3f
  401cf8:	057bceff 	.word	0x057bceff
  401cfc:	06dac2bf 	.word	0x06dac2bf
  401d00:	0839b67f 	.word	0x0839b67f
  401d04:	04000500 	.word	0x04000500
  401d08:	04000600 	.word	0x04000600
  401d0c:	400e0c00 	.word	0x400e0c00
  401d10:	04000100 	.word	0x04000100
  401d14:	04000200 	.word	0x04000200
  401d18:	04000300 	.word	0x04000300

00401d1c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401d1c:	4b0a      	ldr	r3, [pc, #40]	; (401d48 <_sbrk+0x2c>)
  401d1e:	681b      	ldr	r3, [r3, #0]
  401d20:	b153      	cbz	r3, 401d38 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401d22:	4b09      	ldr	r3, [pc, #36]	; (401d48 <_sbrk+0x2c>)
  401d24:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401d26:	181a      	adds	r2, r3, r0
  401d28:	4908      	ldr	r1, [pc, #32]	; (401d4c <_sbrk+0x30>)
  401d2a:	4291      	cmp	r1, r2
  401d2c:	db08      	blt.n	401d40 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401d2e:	4610      	mov	r0, r2
  401d30:	4a05      	ldr	r2, [pc, #20]	; (401d48 <_sbrk+0x2c>)
  401d32:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401d34:	4618      	mov	r0, r3
  401d36:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401d38:	4a05      	ldr	r2, [pc, #20]	; (401d50 <_sbrk+0x34>)
  401d3a:	4b03      	ldr	r3, [pc, #12]	; (401d48 <_sbrk+0x2c>)
  401d3c:	601a      	str	r2, [r3, #0]
  401d3e:	e7f0      	b.n	401d22 <_sbrk+0x6>
		return (caddr_t) -1;	
  401d40:	f04f 30ff 	mov.w	r0, #4294967295
}
  401d44:	4770      	bx	lr
  401d46:	bf00      	nop
  401d48:	20400b78 	.word	0x20400b78
  401d4c:	2045fffc 	.word	0x2045fffc
  401d50:	20402e08 	.word	0x20402e08

00401d54 <main>:
#include "keyboard.h"

const char example_string[] = "BOOP!";

int main(void)
{
  401d54:	b580      	push	{r7, lr}
  401d56:	b086      	sub	sp, #24
	board_init();
  401d58:	4b10      	ldr	r3, [pc, #64]	; (401d9c <main+0x48>)
  401d5a:	4798      	blx	r3
	sysclk_init();
  401d5c:	4b10      	ldr	r3, [pc, #64]	; (401da0 <main+0x4c>)
  401d5e:	4798      	blx	r3
	lcd_init(); 
  401d60:	4b10      	ldr	r3, [pc, #64]	; (401da4 <main+0x50>)
  401d62:	4798      	blx	r3
	/* Draw the keyboard at the bottom of the screen */
	//gfx_draw_bitmap(&keyboard, (gfx_get_width() - keyboard.width) / 2, gfx_get_height() - keyboard.height);
	
	touch_t touched_point;
	while (1) {
		if (lcd_touched()) 
  401d64:	4c10      	ldr	r4, [pc, #64]	; (401da8 <main+0x54>)
		{
			touch_handler(&touched_point);
  401d66:	4f11      	ldr	r7, [pc, #68]	; (401dac <main+0x58>)
			gfx_draw_string_aligned(example_string,
  401d68:	4e11      	ldr	r6, [pc, #68]	; (401db0 <main+0x5c>)
		if (lcd_touched()) 
  401d6a:	47a0      	blx	r4
  401d6c:	2800      	cmp	r0, #0
  401d6e:	d0fc      	beq.n	401d6a <main+0x16>
			touch_handler(&touched_point);
  401d70:	a804      	add	r0, sp, #16
  401d72:	47b8      	blx	r7
			gfx_draw_string_aligned(example_string,
  401d74:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
  401d78:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
  401d7c:	2300      	movs	r3, #0
  401d7e:	9303      	str	r3, [sp, #12]
  401d80:	2310      	movs	r3, #16
  401d82:	9302      	str	r3, [sp, #8]
  401d84:	f44f 4378 	mov.w	r3, #63488	; 0xf800
  401d88:	9301      	str	r3, [sp, #4]
  401d8a:	f24f 031e 	movw	r3, #61470	; 0xf01e
  401d8e:	9300      	str	r3, [sp, #0]
  401d90:	4633      	mov	r3, r6
  401d92:	4808      	ldr	r0, [pc, #32]	; (401db4 <main+0x60>)
  401d94:	4d08      	ldr	r5, [pc, #32]	; (401db8 <main+0x64>)
  401d96:	47a8      	blx	r5
  401d98:	e7e7      	b.n	401d6a <main+0x16>
  401d9a:	bf00      	nop
  401d9c:	00401431 	.word	0x00401431
  401da0:	004013c1 	.word	0x004013c1
  401da4:	00400671 	.word	0x00400671
  401da8:	004006ed 	.word	0x004006ed
  401dac:	00400685 	.word	0x00400685
  401db0:	2040000c 	.word	0x2040000c
  401db4:	00403364 	.word	0x00403364
  401db8:	00400521 	.word	0x00400521

00401dbc <__libc_init_array>:
  401dbc:	b570      	push	{r4, r5, r6, lr}
  401dbe:	4e0f      	ldr	r6, [pc, #60]	; (401dfc <__libc_init_array+0x40>)
  401dc0:	4d0f      	ldr	r5, [pc, #60]	; (401e00 <__libc_init_array+0x44>)
  401dc2:	1b76      	subs	r6, r6, r5
  401dc4:	10b6      	asrs	r6, r6, #2
  401dc6:	bf18      	it	ne
  401dc8:	2400      	movne	r4, #0
  401dca:	d005      	beq.n	401dd8 <__libc_init_array+0x1c>
  401dcc:	3401      	adds	r4, #1
  401dce:	f855 3b04 	ldr.w	r3, [r5], #4
  401dd2:	4798      	blx	r3
  401dd4:	42a6      	cmp	r6, r4
  401dd6:	d1f9      	bne.n	401dcc <__libc_init_array+0x10>
  401dd8:	4e0a      	ldr	r6, [pc, #40]	; (401e04 <__libc_init_array+0x48>)
  401dda:	4d0b      	ldr	r5, [pc, #44]	; (401e08 <__libc_init_array+0x4c>)
  401ddc:	1b76      	subs	r6, r6, r5
  401dde:	f001 fac7 	bl	403370 <_init>
  401de2:	10b6      	asrs	r6, r6, #2
  401de4:	bf18      	it	ne
  401de6:	2400      	movne	r4, #0
  401de8:	d006      	beq.n	401df8 <__libc_init_array+0x3c>
  401dea:	3401      	adds	r4, #1
  401dec:	f855 3b04 	ldr.w	r3, [r5], #4
  401df0:	4798      	blx	r3
  401df2:	42a6      	cmp	r6, r4
  401df4:	d1f9      	bne.n	401dea <__libc_init_array+0x2e>
  401df6:	bd70      	pop	{r4, r5, r6, pc}
  401df8:	bd70      	pop	{r4, r5, r6, pc}
  401dfa:	bf00      	nop
  401dfc:	0040337c 	.word	0x0040337c
  401e00:	0040337c 	.word	0x0040337c
  401e04:	00403384 	.word	0x00403384
  401e08:	0040337c 	.word	0x0040337c

00401e0c <malloc>:
  401e0c:	4b02      	ldr	r3, [pc, #8]	; (401e18 <malloc+0xc>)
  401e0e:	4601      	mov	r1, r0
  401e10:	6818      	ldr	r0, [r3, #0]
  401e12:	f000 b803 	b.w	401e1c <_malloc_r>
  401e16:	bf00      	nop
  401e18:	20400020 	.word	0x20400020

00401e1c <_malloc_r>:
  401e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401e20:	f101 060b 	add.w	r6, r1, #11
  401e24:	2e16      	cmp	r6, #22
  401e26:	b083      	sub	sp, #12
  401e28:	4605      	mov	r5, r0
  401e2a:	f240 809e 	bls.w	401f6a <_malloc_r+0x14e>
  401e2e:	f036 0607 	bics.w	r6, r6, #7
  401e32:	f100 80bd 	bmi.w	401fb0 <_malloc_r+0x194>
  401e36:	42b1      	cmp	r1, r6
  401e38:	f200 80ba 	bhi.w	401fb0 <_malloc_r+0x194>
  401e3c:	f000 fa9e 	bl	40237c <__malloc_lock>
  401e40:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  401e44:	f0c0 8293 	bcc.w	40236e <_malloc_r+0x552>
  401e48:	0a73      	lsrs	r3, r6, #9
  401e4a:	f000 80b8 	beq.w	401fbe <_malloc_r+0x1a2>
  401e4e:	2b04      	cmp	r3, #4
  401e50:	f200 8179 	bhi.w	402146 <_malloc_r+0x32a>
  401e54:	09b3      	lsrs	r3, r6, #6
  401e56:	f103 0039 	add.w	r0, r3, #57	; 0x39
  401e5a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  401e5e:	00c3      	lsls	r3, r0, #3
  401e60:	4fbf      	ldr	r7, [pc, #764]	; (402160 <_malloc_r+0x344>)
  401e62:	443b      	add	r3, r7
  401e64:	f1a3 0108 	sub.w	r1, r3, #8
  401e68:	685c      	ldr	r4, [r3, #4]
  401e6a:	42a1      	cmp	r1, r4
  401e6c:	d106      	bne.n	401e7c <_malloc_r+0x60>
  401e6e:	e00c      	b.n	401e8a <_malloc_r+0x6e>
  401e70:	2a00      	cmp	r2, #0
  401e72:	f280 80aa 	bge.w	401fca <_malloc_r+0x1ae>
  401e76:	68e4      	ldr	r4, [r4, #12]
  401e78:	42a1      	cmp	r1, r4
  401e7a:	d006      	beq.n	401e8a <_malloc_r+0x6e>
  401e7c:	6863      	ldr	r3, [r4, #4]
  401e7e:	f023 0303 	bic.w	r3, r3, #3
  401e82:	1b9a      	subs	r2, r3, r6
  401e84:	2a0f      	cmp	r2, #15
  401e86:	ddf3      	ble.n	401e70 <_malloc_r+0x54>
  401e88:	4670      	mov	r0, lr
  401e8a:	693c      	ldr	r4, [r7, #16]
  401e8c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 402174 <_malloc_r+0x358>
  401e90:	4574      	cmp	r4, lr
  401e92:	f000 81ab 	beq.w	4021ec <_malloc_r+0x3d0>
  401e96:	6863      	ldr	r3, [r4, #4]
  401e98:	f023 0303 	bic.w	r3, r3, #3
  401e9c:	1b9a      	subs	r2, r3, r6
  401e9e:	2a0f      	cmp	r2, #15
  401ea0:	f300 8190 	bgt.w	4021c4 <_malloc_r+0x3a8>
  401ea4:	2a00      	cmp	r2, #0
  401ea6:	f8c7 e014 	str.w	lr, [r7, #20]
  401eaa:	f8c7 e010 	str.w	lr, [r7, #16]
  401eae:	f280 809d 	bge.w	401fec <_malloc_r+0x1d0>
  401eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401eb6:	f080 8161 	bcs.w	40217c <_malloc_r+0x360>
  401eba:	08db      	lsrs	r3, r3, #3
  401ebc:	f103 0c01 	add.w	ip, r3, #1
  401ec0:	1099      	asrs	r1, r3, #2
  401ec2:	687a      	ldr	r2, [r7, #4]
  401ec4:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  401ec8:	f8c4 8008 	str.w	r8, [r4, #8]
  401ecc:	2301      	movs	r3, #1
  401ece:	408b      	lsls	r3, r1
  401ed0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  401ed4:	4313      	orrs	r3, r2
  401ed6:	3908      	subs	r1, #8
  401ed8:	60e1      	str	r1, [r4, #12]
  401eda:	607b      	str	r3, [r7, #4]
  401edc:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  401ee0:	f8c8 400c 	str.w	r4, [r8, #12]
  401ee4:	1082      	asrs	r2, r0, #2
  401ee6:	2401      	movs	r4, #1
  401ee8:	4094      	lsls	r4, r2
  401eea:	429c      	cmp	r4, r3
  401eec:	f200 808b 	bhi.w	402006 <_malloc_r+0x1ea>
  401ef0:	421c      	tst	r4, r3
  401ef2:	d106      	bne.n	401f02 <_malloc_r+0xe6>
  401ef4:	f020 0003 	bic.w	r0, r0, #3
  401ef8:	0064      	lsls	r4, r4, #1
  401efa:	421c      	tst	r4, r3
  401efc:	f100 0004 	add.w	r0, r0, #4
  401f00:	d0fa      	beq.n	401ef8 <_malloc_r+0xdc>
  401f02:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  401f06:	46cc      	mov	ip, r9
  401f08:	4680      	mov	r8, r0
  401f0a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  401f0e:	459c      	cmp	ip, r3
  401f10:	d107      	bne.n	401f22 <_malloc_r+0x106>
  401f12:	e16d      	b.n	4021f0 <_malloc_r+0x3d4>
  401f14:	2a00      	cmp	r2, #0
  401f16:	f280 817b 	bge.w	402210 <_malloc_r+0x3f4>
  401f1a:	68db      	ldr	r3, [r3, #12]
  401f1c:	459c      	cmp	ip, r3
  401f1e:	f000 8167 	beq.w	4021f0 <_malloc_r+0x3d4>
  401f22:	6859      	ldr	r1, [r3, #4]
  401f24:	f021 0103 	bic.w	r1, r1, #3
  401f28:	1b8a      	subs	r2, r1, r6
  401f2a:	2a0f      	cmp	r2, #15
  401f2c:	ddf2      	ble.n	401f14 <_malloc_r+0xf8>
  401f2e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  401f32:	f8d3 8008 	ldr.w	r8, [r3, #8]
  401f36:	9300      	str	r3, [sp, #0]
  401f38:	199c      	adds	r4, r3, r6
  401f3a:	4628      	mov	r0, r5
  401f3c:	f046 0601 	orr.w	r6, r6, #1
  401f40:	f042 0501 	orr.w	r5, r2, #1
  401f44:	605e      	str	r6, [r3, #4]
  401f46:	f8c8 c00c 	str.w	ip, [r8, #12]
  401f4a:	f8cc 8008 	str.w	r8, [ip, #8]
  401f4e:	617c      	str	r4, [r7, #20]
  401f50:	613c      	str	r4, [r7, #16]
  401f52:	f8c4 e00c 	str.w	lr, [r4, #12]
  401f56:	f8c4 e008 	str.w	lr, [r4, #8]
  401f5a:	6065      	str	r5, [r4, #4]
  401f5c:	505a      	str	r2, [r3, r1]
  401f5e:	f000 fa13 	bl	402388 <__malloc_unlock>
  401f62:	9b00      	ldr	r3, [sp, #0]
  401f64:	f103 0408 	add.w	r4, r3, #8
  401f68:	e01e      	b.n	401fa8 <_malloc_r+0x18c>
  401f6a:	2910      	cmp	r1, #16
  401f6c:	d820      	bhi.n	401fb0 <_malloc_r+0x194>
  401f6e:	f000 fa05 	bl	40237c <__malloc_lock>
  401f72:	2610      	movs	r6, #16
  401f74:	2318      	movs	r3, #24
  401f76:	2002      	movs	r0, #2
  401f78:	4f79      	ldr	r7, [pc, #484]	; (402160 <_malloc_r+0x344>)
  401f7a:	443b      	add	r3, r7
  401f7c:	f1a3 0208 	sub.w	r2, r3, #8
  401f80:	685c      	ldr	r4, [r3, #4]
  401f82:	4294      	cmp	r4, r2
  401f84:	f000 813d 	beq.w	402202 <_malloc_r+0x3e6>
  401f88:	6863      	ldr	r3, [r4, #4]
  401f8a:	68e1      	ldr	r1, [r4, #12]
  401f8c:	68a6      	ldr	r6, [r4, #8]
  401f8e:	f023 0303 	bic.w	r3, r3, #3
  401f92:	4423      	add	r3, r4
  401f94:	4628      	mov	r0, r5
  401f96:	685a      	ldr	r2, [r3, #4]
  401f98:	60f1      	str	r1, [r6, #12]
  401f9a:	f042 0201 	orr.w	r2, r2, #1
  401f9e:	608e      	str	r6, [r1, #8]
  401fa0:	605a      	str	r2, [r3, #4]
  401fa2:	f000 f9f1 	bl	402388 <__malloc_unlock>
  401fa6:	3408      	adds	r4, #8
  401fa8:	4620      	mov	r0, r4
  401faa:	b003      	add	sp, #12
  401fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401fb0:	2400      	movs	r4, #0
  401fb2:	230c      	movs	r3, #12
  401fb4:	4620      	mov	r0, r4
  401fb6:	602b      	str	r3, [r5, #0]
  401fb8:	b003      	add	sp, #12
  401fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401fbe:	2040      	movs	r0, #64	; 0x40
  401fc0:	f44f 7300 	mov.w	r3, #512	; 0x200
  401fc4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  401fc8:	e74a      	b.n	401e60 <_malloc_r+0x44>
  401fca:	4423      	add	r3, r4
  401fcc:	68e1      	ldr	r1, [r4, #12]
  401fce:	685a      	ldr	r2, [r3, #4]
  401fd0:	68a6      	ldr	r6, [r4, #8]
  401fd2:	f042 0201 	orr.w	r2, r2, #1
  401fd6:	60f1      	str	r1, [r6, #12]
  401fd8:	4628      	mov	r0, r5
  401fda:	608e      	str	r6, [r1, #8]
  401fdc:	605a      	str	r2, [r3, #4]
  401fde:	f000 f9d3 	bl	402388 <__malloc_unlock>
  401fe2:	3408      	adds	r4, #8
  401fe4:	4620      	mov	r0, r4
  401fe6:	b003      	add	sp, #12
  401fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401fec:	4423      	add	r3, r4
  401fee:	4628      	mov	r0, r5
  401ff0:	685a      	ldr	r2, [r3, #4]
  401ff2:	f042 0201 	orr.w	r2, r2, #1
  401ff6:	605a      	str	r2, [r3, #4]
  401ff8:	f000 f9c6 	bl	402388 <__malloc_unlock>
  401ffc:	3408      	adds	r4, #8
  401ffe:	4620      	mov	r0, r4
  402000:	b003      	add	sp, #12
  402002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402006:	68bc      	ldr	r4, [r7, #8]
  402008:	6863      	ldr	r3, [r4, #4]
  40200a:	f023 0803 	bic.w	r8, r3, #3
  40200e:	45b0      	cmp	r8, r6
  402010:	d304      	bcc.n	40201c <_malloc_r+0x200>
  402012:	eba8 0306 	sub.w	r3, r8, r6
  402016:	2b0f      	cmp	r3, #15
  402018:	f300 8085 	bgt.w	402126 <_malloc_r+0x30a>
  40201c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 402178 <_malloc_r+0x35c>
  402020:	4b50      	ldr	r3, [pc, #320]	; (402164 <_malloc_r+0x348>)
  402022:	f8d9 2000 	ldr.w	r2, [r9]
  402026:	681b      	ldr	r3, [r3, #0]
  402028:	3201      	adds	r2, #1
  40202a:	4433      	add	r3, r6
  40202c:	eb04 0a08 	add.w	sl, r4, r8
  402030:	f000 8155 	beq.w	4022de <_malloc_r+0x4c2>
  402034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  402038:	330f      	adds	r3, #15
  40203a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40203e:	f02b 0b0f 	bic.w	fp, fp, #15
  402042:	4659      	mov	r1, fp
  402044:	4628      	mov	r0, r5
  402046:	f000 f9a5 	bl	402394 <_sbrk_r>
  40204a:	1c41      	adds	r1, r0, #1
  40204c:	4602      	mov	r2, r0
  40204e:	f000 80fc 	beq.w	40224a <_malloc_r+0x42e>
  402052:	4582      	cmp	sl, r0
  402054:	f200 80f7 	bhi.w	402246 <_malloc_r+0x42a>
  402058:	4b43      	ldr	r3, [pc, #268]	; (402168 <_malloc_r+0x34c>)
  40205a:	6819      	ldr	r1, [r3, #0]
  40205c:	4459      	add	r1, fp
  40205e:	6019      	str	r1, [r3, #0]
  402060:	f000 814d 	beq.w	4022fe <_malloc_r+0x4e2>
  402064:	f8d9 0000 	ldr.w	r0, [r9]
  402068:	3001      	adds	r0, #1
  40206a:	bf1b      	ittet	ne
  40206c:	eba2 0a0a 	subne.w	sl, r2, sl
  402070:	4451      	addne	r1, sl
  402072:	f8c9 2000 	streq.w	r2, [r9]
  402076:	6019      	strne	r1, [r3, #0]
  402078:	f012 0107 	ands.w	r1, r2, #7
  40207c:	f000 8115 	beq.w	4022aa <_malloc_r+0x48e>
  402080:	f1c1 0008 	rsb	r0, r1, #8
  402084:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  402088:	4402      	add	r2, r0
  40208a:	3108      	adds	r1, #8
  40208c:	eb02 090b 	add.w	r9, r2, fp
  402090:	f3c9 090b 	ubfx	r9, r9, #0, #12
  402094:	eba1 0909 	sub.w	r9, r1, r9
  402098:	4649      	mov	r1, r9
  40209a:	4628      	mov	r0, r5
  40209c:	9301      	str	r3, [sp, #4]
  40209e:	9200      	str	r2, [sp, #0]
  4020a0:	f000 f978 	bl	402394 <_sbrk_r>
  4020a4:	1c43      	adds	r3, r0, #1
  4020a6:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4020aa:	f000 8143 	beq.w	402334 <_malloc_r+0x518>
  4020ae:	1a80      	subs	r0, r0, r2
  4020b0:	4448      	add	r0, r9
  4020b2:	f040 0001 	orr.w	r0, r0, #1
  4020b6:	6819      	ldr	r1, [r3, #0]
  4020b8:	60ba      	str	r2, [r7, #8]
  4020ba:	4449      	add	r1, r9
  4020bc:	42bc      	cmp	r4, r7
  4020be:	6050      	str	r0, [r2, #4]
  4020c0:	6019      	str	r1, [r3, #0]
  4020c2:	d017      	beq.n	4020f4 <_malloc_r+0x2d8>
  4020c4:	f1b8 0f0f 	cmp.w	r8, #15
  4020c8:	f240 80fb 	bls.w	4022c2 <_malloc_r+0x4a6>
  4020cc:	6860      	ldr	r0, [r4, #4]
  4020ce:	f1a8 020c 	sub.w	r2, r8, #12
  4020d2:	f022 0207 	bic.w	r2, r2, #7
  4020d6:	eb04 0e02 	add.w	lr, r4, r2
  4020da:	f000 0001 	and.w	r0, r0, #1
  4020de:	f04f 0c05 	mov.w	ip, #5
  4020e2:	4310      	orrs	r0, r2
  4020e4:	2a0f      	cmp	r2, #15
  4020e6:	6060      	str	r0, [r4, #4]
  4020e8:	f8ce c004 	str.w	ip, [lr, #4]
  4020ec:	f8ce c008 	str.w	ip, [lr, #8]
  4020f0:	f200 8117 	bhi.w	402322 <_malloc_r+0x506>
  4020f4:	4b1d      	ldr	r3, [pc, #116]	; (40216c <_malloc_r+0x350>)
  4020f6:	68bc      	ldr	r4, [r7, #8]
  4020f8:	681a      	ldr	r2, [r3, #0]
  4020fa:	4291      	cmp	r1, r2
  4020fc:	bf88      	it	hi
  4020fe:	6019      	strhi	r1, [r3, #0]
  402100:	4b1b      	ldr	r3, [pc, #108]	; (402170 <_malloc_r+0x354>)
  402102:	681a      	ldr	r2, [r3, #0]
  402104:	4291      	cmp	r1, r2
  402106:	6862      	ldr	r2, [r4, #4]
  402108:	bf88      	it	hi
  40210a:	6019      	strhi	r1, [r3, #0]
  40210c:	f022 0203 	bic.w	r2, r2, #3
  402110:	4296      	cmp	r6, r2
  402112:	eba2 0306 	sub.w	r3, r2, r6
  402116:	d801      	bhi.n	40211c <_malloc_r+0x300>
  402118:	2b0f      	cmp	r3, #15
  40211a:	dc04      	bgt.n	402126 <_malloc_r+0x30a>
  40211c:	4628      	mov	r0, r5
  40211e:	f000 f933 	bl	402388 <__malloc_unlock>
  402122:	2400      	movs	r4, #0
  402124:	e740      	b.n	401fa8 <_malloc_r+0x18c>
  402126:	19a2      	adds	r2, r4, r6
  402128:	f043 0301 	orr.w	r3, r3, #1
  40212c:	f046 0601 	orr.w	r6, r6, #1
  402130:	6066      	str	r6, [r4, #4]
  402132:	4628      	mov	r0, r5
  402134:	60ba      	str	r2, [r7, #8]
  402136:	6053      	str	r3, [r2, #4]
  402138:	f000 f926 	bl	402388 <__malloc_unlock>
  40213c:	3408      	adds	r4, #8
  40213e:	4620      	mov	r0, r4
  402140:	b003      	add	sp, #12
  402142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402146:	2b14      	cmp	r3, #20
  402148:	d971      	bls.n	40222e <_malloc_r+0x412>
  40214a:	2b54      	cmp	r3, #84	; 0x54
  40214c:	f200 80a3 	bhi.w	402296 <_malloc_r+0x47a>
  402150:	0b33      	lsrs	r3, r6, #12
  402152:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  402156:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40215a:	00c3      	lsls	r3, r0, #3
  40215c:	e680      	b.n	401e60 <_malloc_r+0x44>
  40215e:	bf00      	nop
  402160:	20400450 	.word	0x20400450
  402164:	20400bac 	.word	0x20400bac
  402168:	20400b7c 	.word	0x20400b7c
  40216c:	20400ba4 	.word	0x20400ba4
  402170:	20400ba8 	.word	0x20400ba8
  402174:	20400458 	.word	0x20400458
  402178:	20400858 	.word	0x20400858
  40217c:	0a5a      	lsrs	r2, r3, #9
  40217e:	2a04      	cmp	r2, #4
  402180:	d95b      	bls.n	40223a <_malloc_r+0x41e>
  402182:	2a14      	cmp	r2, #20
  402184:	f200 80ae 	bhi.w	4022e4 <_malloc_r+0x4c8>
  402188:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40218c:	00c9      	lsls	r1, r1, #3
  40218e:	325b      	adds	r2, #91	; 0x5b
  402190:	eb07 0c01 	add.w	ip, r7, r1
  402194:	5879      	ldr	r1, [r7, r1]
  402196:	f1ac 0c08 	sub.w	ip, ip, #8
  40219a:	458c      	cmp	ip, r1
  40219c:	f000 8088 	beq.w	4022b0 <_malloc_r+0x494>
  4021a0:	684a      	ldr	r2, [r1, #4]
  4021a2:	f022 0203 	bic.w	r2, r2, #3
  4021a6:	4293      	cmp	r3, r2
  4021a8:	d273      	bcs.n	402292 <_malloc_r+0x476>
  4021aa:	6889      	ldr	r1, [r1, #8]
  4021ac:	458c      	cmp	ip, r1
  4021ae:	d1f7      	bne.n	4021a0 <_malloc_r+0x384>
  4021b0:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4021b4:	687b      	ldr	r3, [r7, #4]
  4021b6:	60e2      	str	r2, [r4, #12]
  4021b8:	f8c4 c008 	str.w	ip, [r4, #8]
  4021bc:	6094      	str	r4, [r2, #8]
  4021be:	f8cc 400c 	str.w	r4, [ip, #12]
  4021c2:	e68f      	b.n	401ee4 <_malloc_r+0xc8>
  4021c4:	19a1      	adds	r1, r4, r6
  4021c6:	f046 0c01 	orr.w	ip, r6, #1
  4021ca:	f042 0601 	orr.w	r6, r2, #1
  4021ce:	f8c4 c004 	str.w	ip, [r4, #4]
  4021d2:	4628      	mov	r0, r5
  4021d4:	6179      	str	r1, [r7, #20]
  4021d6:	6139      	str	r1, [r7, #16]
  4021d8:	f8c1 e00c 	str.w	lr, [r1, #12]
  4021dc:	f8c1 e008 	str.w	lr, [r1, #8]
  4021e0:	604e      	str	r6, [r1, #4]
  4021e2:	50e2      	str	r2, [r4, r3]
  4021e4:	f000 f8d0 	bl	402388 <__malloc_unlock>
  4021e8:	3408      	adds	r4, #8
  4021ea:	e6dd      	b.n	401fa8 <_malloc_r+0x18c>
  4021ec:	687b      	ldr	r3, [r7, #4]
  4021ee:	e679      	b.n	401ee4 <_malloc_r+0xc8>
  4021f0:	f108 0801 	add.w	r8, r8, #1
  4021f4:	f018 0f03 	tst.w	r8, #3
  4021f8:	f10c 0c08 	add.w	ip, ip, #8
  4021fc:	f47f ae85 	bne.w	401f0a <_malloc_r+0xee>
  402200:	e02d      	b.n	40225e <_malloc_r+0x442>
  402202:	68dc      	ldr	r4, [r3, #12]
  402204:	42a3      	cmp	r3, r4
  402206:	bf08      	it	eq
  402208:	3002      	addeq	r0, #2
  40220a:	f43f ae3e 	beq.w	401e8a <_malloc_r+0x6e>
  40220e:	e6bb      	b.n	401f88 <_malloc_r+0x16c>
  402210:	4419      	add	r1, r3
  402212:	461c      	mov	r4, r3
  402214:	684a      	ldr	r2, [r1, #4]
  402216:	68db      	ldr	r3, [r3, #12]
  402218:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40221c:	f042 0201 	orr.w	r2, r2, #1
  402220:	604a      	str	r2, [r1, #4]
  402222:	4628      	mov	r0, r5
  402224:	60f3      	str	r3, [r6, #12]
  402226:	609e      	str	r6, [r3, #8]
  402228:	f000 f8ae 	bl	402388 <__malloc_unlock>
  40222c:	e6bc      	b.n	401fa8 <_malloc_r+0x18c>
  40222e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  402232:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  402236:	00c3      	lsls	r3, r0, #3
  402238:	e612      	b.n	401e60 <_malloc_r+0x44>
  40223a:	099a      	lsrs	r2, r3, #6
  40223c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  402240:	00c9      	lsls	r1, r1, #3
  402242:	3238      	adds	r2, #56	; 0x38
  402244:	e7a4      	b.n	402190 <_malloc_r+0x374>
  402246:	42bc      	cmp	r4, r7
  402248:	d054      	beq.n	4022f4 <_malloc_r+0x4d8>
  40224a:	68bc      	ldr	r4, [r7, #8]
  40224c:	6862      	ldr	r2, [r4, #4]
  40224e:	f022 0203 	bic.w	r2, r2, #3
  402252:	e75d      	b.n	402110 <_malloc_r+0x2f4>
  402254:	f859 3908 	ldr.w	r3, [r9], #-8
  402258:	4599      	cmp	r9, r3
  40225a:	f040 8086 	bne.w	40236a <_malloc_r+0x54e>
  40225e:	f010 0f03 	tst.w	r0, #3
  402262:	f100 30ff 	add.w	r0, r0, #4294967295
  402266:	d1f5      	bne.n	402254 <_malloc_r+0x438>
  402268:	687b      	ldr	r3, [r7, #4]
  40226a:	ea23 0304 	bic.w	r3, r3, r4
  40226e:	607b      	str	r3, [r7, #4]
  402270:	0064      	lsls	r4, r4, #1
  402272:	429c      	cmp	r4, r3
  402274:	f63f aec7 	bhi.w	402006 <_malloc_r+0x1ea>
  402278:	2c00      	cmp	r4, #0
  40227a:	f43f aec4 	beq.w	402006 <_malloc_r+0x1ea>
  40227e:	421c      	tst	r4, r3
  402280:	4640      	mov	r0, r8
  402282:	f47f ae3e 	bne.w	401f02 <_malloc_r+0xe6>
  402286:	0064      	lsls	r4, r4, #1
  402288:	421c      	tst	r4, r3
  40228a:	f100 0004 	add.w	r0, r0, #4
  40228e:	d0fa      	beq.n	402286 <_malloc_r+0x46a>
  402290:	e637      	b.n	401f02 <_malloc_r+0xe6>
  402292:	468c      	mov	ip, r1
  402294:	e78c      	b.n	4021b0 <_malloc_r+0x394>
  402296:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40229a:	d815      	bhi.n	4022c8 <_malloc_r+0x4ac>
  40229c:	0bf3      	lsrs	r3, r6, #15
  40229e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4022a2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4022a6:	00c3      	lsls	r3, r0, #3
  4022a8:	e5da      	b.n	401e60 <_malloc_r+0x44>
  4022aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4022ae:	e6ed      	b.n	40208c <_malloc_r+0x270>
  4022b0:	687b      	ldr	r3, [r7, #4]
  4022b2:	1092      	asrs	r2, r2, #2
  4022b4:	2101      	movs	r1, #1
  4022b6:	fa01 f202 	lsl.w	r2, r1, r2
  4022ba:	4313      	orrs	r3, r2
  4022bc:	607b      	str	r3, [r7, #4]
  4022be:	4662      	mov	r2, ip
  4022c0:	e779      	b.n	4021b6 <_malloc_r+0x39a>
  4022c2:	2301      	movs	r3, #1
  4022c4:	6053      	str	r3, [r2, #4]
  4022c6:	e729      	b.n	40211c <_malloc_r+0x300>
  4022c8:	f240 5254 	movw	r2, #1364	; 0x554
  4022cc:	4293      	cmp	r3, r2
  4022ce:	d822      	bhi.n	402316 <_malloc_r+0x4fa>
  4022d0:	0cb3      	lsrs	r3, r6, #18
  4022d2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4022d6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4022da:	00c3      	lsls	r3, r0, #3
  4022dc:	e5c0      	b.n	401e60 <_malloc_r+0x44>
  4022de:	f103 0b10 	add.w	fp, r3, #16
  4022e2:	e6ae      	b.n	402042 <_malloc_r+0x226>
  4022e4:	2a54      	cmp	r2, #84	; 0x54
  4022e6:	d829      	bhi.n	40233c <_malloc_r+0x520>
  4022e8:	0b1a      	lsrs	r2, r3, #12
  4022ea:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4022ee:	00c9      	lsls	r1, r1, #3
  4022f0:	326e      	adds	r2, #110	; 0x6e
  4022f2:	e74d      	b.n	402190 <_malloc_r+0x374>
  4022f4:	4b20      	ldr	r3, [pc, #128]	; (402378 <_malloc_r+0x55c>)
  4022f6:	6819      	ldr	r1, [r3, #0]
  4022f8:	4459      	add	r1, fp
  4022fa:	6019      	str	r1, [r3, #0]
  4022fc:	e6b2      	b.n	402064 <_malloc_r+0x248>
  4022fe:	f3ca 000b 	ubfx	r0, sl, #0, #12
  402302:	2800      	cmp	r0, #0
  402304:	f47f aeae 	bne.w	402064 <_malloc_r+0x248>
  402308:	eb08 030b 	add.w	r3, r8, fp
  40230c:	68ba      	ldr	r2, [r7, #8]
  40230e:	f043 0301 	orr.w	r3, r3, #1
  402312:	6053      	str	r3, [r2, #4]
  402314:	e6ee      	b.n	4020f4 <_malloc_r+0x2d8>
  402316:	207f      	movs	r0, #127	; 0x7f
  402318:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40231c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  402320:	e59e      	b.n	401e60 <_malloc_r+0x44>
  402322:	f104 0108 	add.w	r1, r4, #8
  402326:	4628      	mov	r0, r5
  402328:	9300      	str	r3, [sp, #0]
  40232a:	f000 f8bf 	bl	4024ac <_free_r>
  40232e:	9b00      	ldr	r3, [sp, #0]
  402330:	6819      	ldr	r1, [r3, #0]
  402332:	e6df      	b.n	4020f4 <_malloc_r+0x2d8>
  402334:	2001      	movs	r0, #1
  402336:	f04f 0900 	mov.w	r9, #0
  40233a:	e6bc      	b.n	4020b6 <_malloc_r+0x29a>
  40233c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402340:	d805      	bhi.n	40234e <_malloc_r+0x532>
  402342:	0bda      	lsrs	r2, r3, #15
  402344:	f102 0178 	add.w	r1, r2, #120	; 0x78
  402348:	00c9      	lsls	r1, r1, #3
  40234a:	3277      	adds	r2, #119	; 0x77
  40234c:	e720      	b.n	402190 <_malloc_r+0x374>
  40234e:	f240 5154 	movw	r1, #1364	; 0x554
  402352:	428a      	cmp	r2, r1
  402354:	d805      	bhi.n	402362 <_malloc_r+0x546>
  402356:	0c9a      	lsrs	r2, r3, #18
  402358:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40235c:	00c9      	lsls	r1, r1, #3
  40235e:	327c      	adds	r2, #124	; 0x7c
  402360:	e716      	b.n	402190 <_malloc_r+0x374>
  402362:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  402366:	227e      	movs	r2, #126	; 0x7e
  402368:	e712      	b.n	402190 <_malloc_r+0x374>
  40236a:	687b      	ldr	r3, [r7, #4]
  40236c:	e780      	b.n	402270 <_malloc_r+0x454>
  40236e:	08f0      	lsrs	r0, r6, #3
  402370:	f106 0308 	add.w	r3, r6, #8
  402374:	e600      	b.n	401f78 <_malloc_r+0x15c>
  402376:	bf00      	nop
  402378:	20400b7c 	.word	0x20400b7c

0040237c <__malloc_lock>:
  40237c:	4801      	ldr	r0, [pc, #4]	; (402384 <__malloc_lock+0x8>)
  40237e:	f000 b97b 	b.w	402678 <__retarget_lock_acquire_recursive>
  402382:	bf00      	nop
  402384:	20400bec 	.word	0x20400bec

00402388 <__malloc_unlock>:
  402388:	4801      	ldr	r0, [pc, #4]	; (402390 <__malloc_unlock+0x8>)
  40238a:	f000 b977 	b.w	40267c <__retarget_lock_release_recursive>
  40238e:	bf00      	nop
  402390:	20400bec 	.word	0x20400bec

00402394 <_sbrk_r>:
  402394:	b538      	push	{r3, r4, r5, lr}
  402396:	4c07      	ldr	r4, [pc, #28]	; (4023b4 <_sbrk_r+0x20>)
  402398:	2300      	movs	r3, #0
  40239a:	4605      	mov	r5, r0
  40239c:	4608      	mov	r0, r1
  40239e:	6023      	str	r3, [r4, #0]
  4023a0:	f7ff fcbc 	bl	401d1c <_sbrk>
  4023a4:	1c43      	adds	r3, r0, #1
  4023a6:	d000      	beq.n	4023aa <_sbrk_r+0x16>
  4023a8:	bd38      	pop	{r3, r4, r5, pc}
  4023aa:	6823      	ldr	r3, [r4, #0]
  4023ac:	2b00      	cmp	r3, #0
  4023ae:	d0fb      	beq.n	4023a8 <_sbrk_r+0x14>
  4023b0:	602b      	str	r3, [r5, #0]
  4023b2:	bd38      	pop	{r3, r4, r5, pc}
  4023b4:	20400c00 	.word	0x20400c00

004023b8 <register_fini>:
  4023b8:	4b02      	ldr	r3, [pc, #8]	; (4023c4 <register_fini+0xc>)
  4023ba:	b113      	cbz	r3, 4023c2 <register_fini+0xa>
  4023bc:	4802      	ldr	r0, [pc, #8]	; (4023c8 <register_fini+0x10>)
  4023be:	f000 b805 	b.w	4023cc <atexit>
  4023c2:	4770      	bx	lr
  4023c4:	00000000 	.word	0x00000000
  4023c8:	004023d9 	.word	0x004023d9

004023cc <atexit>:
  4023cc:	2300      	movs	r3, #0
  4023ce:	4601      	mov	r1, r0
  4023d0:	461a      	mov	r2, r3
  4023d2:	4618      	mov	r0, r3
  4023d4:	f000 b954 	b.w	402680 <__register_exitproc>

004023d8 <__libc_fini_array>:
  4023d8:	b538      	push	{r3, r4, r5, lr}
  4023da:	4c0a      	ldr	r4, [pc, #40]	; (402404 <__libc_fini_array+0x2c>)
  4023dc:	4d0a      	ldr	r5, [pc, #40]	; (402408 <__libc_fini_array+0x30>)
  4023de:	1b64      	subs	r4, r4, r5
  4023e0:	10a4      	asrs	r4, r4, #2
  4023e2:	d00a      	beq.n	4023fa <__libc_fini_array+0x22>
  4023e4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4023e8:	3b01      	subs	r3, #1
  4023ea:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4023ee:	3c01      	subs	r4, #1
  4023f0:	f855 3904 	ldr.w	r3, [r5], #-4
  4023f4:	4798      	blx	r3
  4023f6:	2c00      	cmp	r4, #0
  4023f8:	d1f9      	bne.n	4023ee <__libc_fini_array+0x16>
  4023fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4023fe:	f000 bfc1 	b.w	403384 <_fini>
  402402:	bf00      	nop
  402404:	00403394 	.word	0x00403394
  402408:	00403390 	.word	0x00403390

0040240c <_malloc_trim_r>:
  40240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40240e:	4f24      	ldr	r7, [pc, #144]	; (4024a0 <_malloc_trim_r+0x94>)
  402410:	460c      	mov	r4, r1
  402412:	4606      	mov	r6, r0
  402414:	f7ff ffb2 	bl	40237c <__malloc_lock>
  402418:	68bb      	ldr	r3, [r7, #8]
  40241a:	685d      	ldr	r5, [r3, #4]
  40241c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  402420:	310f      	adds	r1, #15
  402422:	f025 0503 	bic.w	r5, r5, #3
  402426:	4429      	add	r1, r5
  402428:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40242c:	f021 010f 	bic.w	r1, r1, #15
  402430:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  402434:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402438:	db07      	blt.n	40244a <_malloc_trim_r+0x3e>
  40243a:	2100      	movs	r1, #0
  40243c:	4630      	mov	r0, r6
  40243e:	f7ff ffa9 	bl	402394 <_sbrk_r>
  402442:	68bb      	ldr	r3, [r7, #8]
  402444:	442b      	add	r3, r5
  402446:	4298      	cmp	r0, r3
  402448:	d004      	beq.n	402454 <_malloc_trim_r+0x48>
  40244a:	4630      	mov	r0, r6
  40244c:	f7ff ff9c 	bl	402388 <__malloc_unlock>
  402450:	2000      	movs	r0, #0
  402452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402454:	4261      	negs	r1, r4
  402456:	4630      	mov	r0, r6
  402458:	f7ff ff9c 	bl	402394 <_sbrk_r>
  40245c:	3001      	adds	r0, #1
  40245e:	d00d      	beq.n	40247c <_malloc_trim_r+0x70>
  402460:	4b10      	ldr	r3, [pc, #64]	; (4024a4 <_malloc_trim_r+0x98>)
  402462:	68ba      	ldr	r2, [r7, #8]
  402464:	6819      	ldr	r1, [r3, #0]
  402466:	1b2d      	subs	r5, r5, r4
  402468:	f045 0501 	orr.w	r5, r5, #1
  40246c:	4630      	mov	r0, r6
  40246e:	1b09      	subs	r1, r1, r4
  402470:	6055      	str	r5, [r2, #4]
  402472:	6019      	str	r1, [r3, #0]
  402474:	f7ff ff88 	bl	402388 <__malloc_unlock>
  402478:	2001      	movs	r0, #1
  40247a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40247c:	2100      	movs	r1, #0
  40247e:	4630      	mov	r0, r6
  402480:	f7ff ff88 	bl	402394 <_sbrk_r>
  402484:	68ba      	ldr	r2, [r7, #8]
  402486:	1a83      	subs	r3, r0, r2
  402488:	2b0f      	cmp	r3, #15
  40248a:	ddde      	ble.n	40244a <_malloc_trim_r+0x3e>
  40248c:	4c06      	ldr	r4, [pc, #24]	; (4024a8 <_malloc_trim_r+0x9c>)
  40248e:	4905      	ldr	r1, [pc, #20]	; (4024a4 <_malloc_trim_r+0x98>)
  402490:	6824      	ldr	r4, [r4, #0]
  402492:	f043 0301 	orr.w	r3, r3, #1
  402496:	1b00      	subs	r0, r0, r4
  402498:	6053      	str	r3, [r2, #4]
  40249a:	6008      	str	r0, [r1, #0]
  40249c:	e7d5      	b.n	40244a <_malloc_trim_r+0x3e>
  40249e:	bf00      	nop
  4024a0:	20400450 	.word	0x20400450
  4024a4:	20400b7c 	.word	0x20400b7c
  4024a8:	20400858 	.word	0x20400858

004024ac <_free_r>:
  4024ac:	2900      	cmp	r1, #0
  4024ae:	d044      	beq.n	40253a <_free_r+0x8e>
  4024b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4024b4:	460d      	mov	r5, r1
  4024b6:	4680      	mov	r8, r0
  4024b8:	f7ff ff60 	bl	40237c <__malloc_lock>
  4024bc:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4024c0:	4969      	ldr	r1, [pc, #420]	; (402668 <_free_r+0x1bc>)
  4024c2:	f027 0301 	bic.w	r3, r7, #1
  4024c6:	f1a5 0408 	sub.w	r4, r5, #8
  4024ca:	18e2      	adds	r2, r4, r3
  4024cc:	688e      	ldr	r6, [r1, #8]
  4024ce:	6850      	ldr	r0, [r2, #4]
  4024d0:	42b2      	cmp	r2, r6
  4024d2:	f020 0003 	bic.w	r0, r0, #3
  4024d6:	d05e      	beq.n	402596 <_free_r+0xea>
  4024d8:	07fe      	lsls	r6, r7, #31
  4024da:	6050      	str	r0, [r2, #4]
  4024dc:	d40b      	bmi.n	4024f6 <_free_r+0x4a>
  4024de:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4024e2:	1be4      	subs	r4, r4, r7
  4024e4:	f101 0e08 	add.w	lr, r1, #8
  4024e8:	68a5      	ldr	r5, [r4, #8]
  4024ea:	4575      	cmp	r5, lr
  4024ec:	443b      	add	r3, r7
  4024ee:	d06d      	beq.n	4025cc <_free_r+0x120>
  4024f0:	68e7      	ldr	r7, [r4, #12]
  4024f2:	60ef      	str	r7, [r5, #12]
  4024f4:	60bd      	str	r5, [r7, #8]
  4024f6:	1815      	adds	r5, r2, r0
  4024f8:	686d      	ldr	r5, [r5, #4]
  4024fa:	07ed      	lsls	r5, r5, #31
  4024fc:	d53e      	bpl.n	40257c <_free_r+0xd0>
  4024fe:	f043 0201 	orr.w	r2, r3, #1
  402502:	6062      	str	r2, [r4, #4]
  402504:	50e3      	str	r3, [r4, r3]
  402506:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40250a:	d217      	bcs.n	40253c <_free_r+0x90>
  40250c:	08db      	lsrs	r3, r3, #3
  40250e:	1c58      	adds	r0, r3, #1
  402510:	109a      	asrs	r2, r3, #2
  402512:	684d      	ldr	r5, [r1, #4]
  402514:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  402518:	60a7      	str	r7, [r4, #8]
  40251a:	2301      	movs	r3, #1
  40251c:	4093      	lsls	r3, r2
  40251e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  402522:	432b      	orrs	r3, r5
  402524:	3a08      	subs	r2, #8
  402526:	60e2      	str	r2, [r4, #12]
  402528:	604b      	str	r3, [r1, #4]
  40252a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40252e:	60fc      	str	r4, [r7, #12]
  402530:	4640      	mov	r0, r8
  402532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402536:	f7ff bf27 	b.w	402388 <__malloc_unlock>
  40253a:	4770      	bx	lr
  40253c:	0a5a      	lsrs	r2, r3, #9
  40253e:	2a04      	cmp	r2, #4
  402540:	d852      	bhi.n	4025e8 <_free_r+0x13c>
  402542:	099a      	lsrs	r2, r3, #6
  402544:	f102 0739 	add.w	r7, r2, #57	; 0x39
  402548:	00ff      	lsls	r7, r7, #3
  40254a:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40254e:	19c8      	adds	r0, r1, r7
  402550:	59ca      	ldr	r2, [r1, r7]
  402552:	3808      	subs	r0, #8
  402554:	4290      	cmp	r0, r2
  402556:	d04f      	beq.n	4025f8 <_free_r+0x14c>
  402558:	6851      	ldr	r1, [r2, #4]
  40255a:	f021 0103 	bic.w	r1, r1, #3
  40255e:	428b      	cmp	r3, r1
  402560:	d232      	bcs.n	4025c8 <_free_r+0x11c>
  402562:	6892      	ldr	r2, [r2, #8]
  402564:	4290      	cmp	r0, r2
  402566:	d1f7      	bne.n	402558 <_free_r+0xac>
  402568:	68c3      	ldr	r3, [r0, #12]
  40256a:	60a0      	str	r0, [r4, #8]
  40256c:	60e3      	str	r3, [r4, #12]
  40256e:	609c      	str	r4, [r3, #8]
  402570:	60c4      	str	r4, [r0, #12]
  402572:	4640      	mov	r0, r8
  402574:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402578:	f7ff bf06 	b.w	402388 <__malloc_unlock>
  40257c:	6895      	ldr	r5, [r2, #8]
  40257e:	4f3b      	ldr	r7, [pc, #236]	; (40266c <_free_r+0x1c0>)
  402580:	42bd      	cmp	r5, r7
  402582:	4403      	add	r3, r0
  402584:	d040      	beq.n	402608 <_free_r+0x15c>
  402586:	68d0      	ldr	r0, [r2, #12]
  402588:	60e8      	str	r0, [r5, #12]
  40258a:	f043 0201 	orr.w	r2, r3, #1
  40258e:	6085      	str	r5, [r0, #8]
  402590:	6062      	str	r2, [r4, #4]
  402592:	50e3      	str	r3, [r4, r3]
  402594:	e7b7      	b.n	402506 <_free_r+0x5a>
  402596:	07ff      	lsls	r7, r7, #31
  402598:	4403      	add	r3, r0
  40259a:	d407      	bmi.n	4025ac <_free_r+0x100>
  40259c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4025a0:	1aa4      	subs	r4, r4, r2
  4025a2:	4413      	add	r3, r2
  4025a4:	68a0      	ldr	r0, [r4, #8]
  4025a6:	68e2      	ldr	r2, [r4, #12]
  4025a8:	60c2      	str	r2, [r0, #12]
  4025aa:	6090      	str	r0, [r2, #8]
  4025ac:	4a30      	ldr	r2, [pc, #192]	; (402670 <_free_r+0x1c4>)
  4025ae:	6812      	ldr	r2, [r2, #0]
  4025b0:	f043 0001 	orr.w	r0, r3, #1
  4025b4:	4293      	cmp	r3, r2
  4025b6:	6060      	str	r0, [r4, #4]
  4025b8:	608c      	str	r4, [r1, #8]
  4025ba:	d3b9      	bcc.n	402530 <_free_r+0x84>
  4025bc:	4b2d      	ldr	r3, [pc, #180]	; (402674 <_free_r+0x1c8>)
  4025be:	4640      	mov	r0, r8
  4025c0:	6819      	ldr	r1, [r3, #0]
  4025c2:	f7ff ff23 	bl	40240c <_malloc_trim_r>
  4025c6:	e7b3      	b.n	402530 <_free_r+0x84>
  4025c8:	4610      	mov	r0, r2
  4025ca:	e7cd      	b.n	402568 <_free_r+0xbc>
  4025cc:	1811      	adds	r1, r2, r0
  4025ce:	6849      	ldr	r1, [r1, #4]
  4025d0:	07c9      	lsls	r1, r1, #31
  4025d2:	d444      	bmi.n	40265e <_free_r+0x1b2>
  4025d4:	6891      	ldr	r1, [r2, #8]
  4025d6:	68d2      	ldr	r2, [r2, #12]
  4025d8:	60ca      	str	r2, [r1, #12]
  4025da:	4403      	add	r3, r0
  4025dc:	f043 0001 	orr.w	r0, r3, #1
  4025e0:	6091      	str	r1, [r2, #8]
  4025e2:	6060      	str	r0, [r4, #4]
  4025e4:	50e3      	str	r3, [r4, r3]
  4025e6:	e7a3      	b.n	402530 <_free_r+0x84>
  4025e8:	2a14      	cmp	r2, #20
  4025ea:	d816      	bhi.n	40261a <_free_r+0x16e>
  4025ec:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4025f0:	00ff      	lsls	r7, r7, #3
  4025f2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4025f6:	e7aa      	b.n	40254e <_free_r+0xa2>
  4025f8:	10aa      	asrs	r2, r5, #2
  4025fa:	2301      	movs	r3, #1
  4025fc:	684d      	ldr	r5, [r1, #4]
  4025fe:	4093      	lsls	r3, r2
  402600:	432b      	orrs	r3, r5
  402602:	604b      	str	r3, [r1, #4]
  402604:	4603      	mov	r3, r0
  402606:	e7b0      	b.n	40256a <_free_r+0xbe>
  402608:	f043 0201 	orr.w	r2, r3, #1
  40260c:	614c      	str	r4, [r1, #20]
  40260e:	610c      	str	r4, [r1, #16]
  402610:	60e5      	str	r5, [r4, #12]
  402612:	60a5      	str	r5, [r4, #8]
  402614:	6062      	str	r2, [r4, #4]
  402616:	50e3      	str	r3, [r4, r3]
  402618:	e78a      	b.n	402530 <_free_r+0x84>
  40261a:	2a54      	cmp	r2, #84	; 0x54
  40261c:	d806      	bhi.n	40262c <_free_r+0x180>
  40261e:	0b1a      	lsrs	r2, r3, #12
  402620:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  402624:	00ff      	lsls	r7, r7, #3
  402626:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40262a:	e790      	b.n	40254e <_free_r+0xa2>
  40262c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402630:	d806      	bhi.n	402640 <_free_r+0x194>
  402632:	0bda      	lsrs	r2, r3, #15
  402634:	f102 0778 	add.w	r7, r2, #120	; 0x78
  402638:	00ff      	lsls	r7, r7, #3
  40263a:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40263e:	e786      	b.n	40254e <_free_r+0xa2>
  402640:	f240 5054 	movw	r0, #1364	; 0x554
  402644:	4282      	cmp	r2, r0
  402646:	d806      	bhi.n	402656 <_free_r+0x1aa>
  402648:	0c9a      	lsrs	r2, r3, #18
  40264a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40264e:	00ff      	lsls	r7, r7, #3
  402650:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  402654:	e77b      	b.n	40254e <_free_r+0xa2>
  402656:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40265a:	257e      	movs	r5, #126	; 0x7e
  40265c:	e777      	b.n	40254e <_free_r+0xa2>
  40265e:	f043 0101 	orr.w	r1, r3, #1
  402662:	6061      	str	r1, [r4, #4]
  402664:	6013      	str	r3, [r2, #0]
  402666:	e763      	b.n	402530 <_free_r+0x84>
  402668:	20400450 	.word	0x20400450
  40266c:	20400458 	.word	0x20400458
  402670:	2040085c 	.word	0x2040085c
  402674:	20400bac 	.word	0x20400bac

00402678 <__retarget_lock_acquire_recursive>:
  402678:	4770      	bx	lr
  40267a:	bf00      	nop

0040267c <__retarget_lock_release_recursive>:
  40267c:	4770      	bx	lr
  40267e:	bf00      	nop

00402680 <__register_exitproc>:
  402680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402684:	4d2c      	ldr	r5, [pc, #176]	; (402738 <__register_exitproc+0xb8>)
  402686:	4606      	mov	r6, r0
  402688:	6828      	ldr	r0, [r5, #0]
  40268a:	4698      	mov	r8, r3
  40268c:	460f      	mov	r7, r1
  40268e:	4691      	mov	r9, r2
  402690:	f7ff fff2 	bl	402678 <__retarget_lock_acquire_recursive>
  402694:	4b29      	ldr	r3, [pc, #164]	; (40273c <__register_exitproc+0xbc>)
  402696:	681c      	ldr	r4, [r3, #0]
  402698:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40269c:	2b00      	cmp	r3, #0
  40269e:	d03e      	beq.n	40271e <__register_exitproc+0x9e>
  4026a0:	685a      	ldr	r2, [r3, #4]
  4026a2:	2a1f      	cmp	r2, #31
  4026a4:	dc1c      	bgt.n	4026e0 <__register_exitproc+0x60>
  4026a6:	f102 0e01 	add.w	lr, r2, #1
  4026aa:	b176      	cbz	r6, 4026ca <__register_exitproc+0x4a>
  4026ac:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4026b0:	2401      	movs	r4, #1
  4026b2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4026b6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4026ba:	4094      	lsls	r4, r2
  4026bc:	4320      	orrs	r0, r4
  4026be:	2e02      	cmp	r6, #2
  4026c0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4026c4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4026c8:	d023      	beq.n	402712 <__register_exitproc+0x92>
  4026ca:	3202      	adds	r2, #2
  4026cc:	f8c3 e004 	str.w	lr, [r3, #4]
  4026d0:	6828      	ldr	r0, [r5, #0]
  4026d2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4026d6:	f7ff ffd1 	bl	40267c <__retarget_lock_release_recursive>
  4026da:	2000      	movs	r0, #0
  4026dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4026e0:	4b17      	ldr	r3, [pc, #92]	; (402740 <__register_exitproc+0xc0>)
  4026e2:	b30b      	cbz	r3, 402728 <__register_exitproc+0xa8>
  4026e4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4026e8:	f7ff fb90 	bl	401e0c <malloc>
  4026ec:	4603      	mov	r3, r0
  4026ee:	b1d8      	cbz	r0, 402728 <__register_exitproc+0xa8>
  4026f0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4026f4:	6002      	str	r2, [r0, #0]
  4026f6:	2100      	movs	r1, #0
  4026f8:	6041      	str	r1, [r0, #4]
  4026fa:	460a      	mov	r2, r1
  4026fc:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  402700:	f04f 0e01 	mov.w	lr, #1
  402704:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  402708:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40270c:	2e00      	cmp	r6, #0
  40270e:	d0dc      	beq.n	4026ca <__register_exitproc+0x4a>
  402710:	e7cc      	b.n	4026ac <__register_exitproc+0x2c>
  402712:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  402716:	430c      	orrs	r4, r1
  402718:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40271c:	e7d5      	b.n	4026ca <__register_exitproc+0x4a>
  40271e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  402722:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  402726:	e7bb      	b.n	4026a0 <__register_exitproc+0x20>
  402728:	6828      	ldr	r0, [r5, #0]
  40272a:	f7ff ffa7 	bl	40267c <__retarget_lock_release_recursive>
  40272e:	f04f 30ff 	mov.w	r0, #4294967295
  402732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402736:	bf00      	nop
  402738:	20400860 	.word	0x20400860
  40273c:	0040336c 	.word	0x0040336c
  402740:	00401e0d 	.word	0x00401e0d

00402744 <sysfont_glyphs>:
	...
  402768:	00300000 00300030 00300030 00300030     ..0.0.0.0.0.0.0.
  402778:	00300000 00000030 00000000 00000000     ..0.0...........
  402788:	006c0000 006c006c 0000006c 00000000     ..l.l.l.l.......
	...
  4027ac:	00480048 004800fc 00480048 004800fc     H.H...H.H.H...H.
  4027bc:	00000048 00000000 00000000 00100000     H...............
  4027cc:	003c0010 00300040 00040008 00100078     ..<.@.0.....x...
  4027dc:	00000010 00000000 00000000 00000000     ................
  4027ec:	00a4007c 004800a8 00140010 004a002a     |.....H.....*.J.
  4027fc:	00000044 00000000 00000000 00700000     D.............p.
  40280c:	00880088 00700088 008a0088 008c008a     ......p.........
  40281c:	00000070 00000000 00000000 00100000     p...............
  40282c:	00100010 00000000 00000000 00000000     ................
	...
  402848:	00100008 00200010 00200020 00200020     ...... . . . . .
  402858:	00100020 00080010 00000000 00000000      ...............
  402868:	00100020 00080010 00080008 00080008      ...............
  402878:	00100008 00200010 00000000 00000000     ...... .........
  402888:	00280000 007c0010 00280010 00000000     ..(...|...(.....
	...
  4028b0:	00100010 00fe0010 00100010 00000010     ................
	...
  4028d8:	00180000 00300018 00000020 00000000     ......0. .......
	...
  4028f4:	00fe0000 00000000 00000000 00000000     ................
	...
  402918:	00180000 00000018 00000000 00000000     ................
  402928:	00000000 00080004 00100008 00200010     .............. .
  402938:	00400020 00000040 00000000 00000000      .@.@...........
  402948:	00780000 00840084 0094008c 00c400a4     ..x.............
  402958:	00840084 00000078 00000000 00000000     ....x...........
  402968:	00100000 00500030 00100010 00100010     ....0.P.........
  402978:	00100010 0000007c 00000000 00000000     ....|...........
  402988:	00700000 00080088 00100008 00200010     ..p........... .
  402998:	00400020 000000fc 00000000 00000000      .@.............
  4029a8:	00700000 00080088 00300008 00080008     ..p.......0.....
  4029b8:	00880008 00000070 00000000 00000000     ....p...........
  4029c8:	00080000 00280018 00480028 00880088     ......(.(.H.....
  4029d8:	000800fc 00000008 00000000 00000000     ................
  4029e8:	007c0000 00800080 00c400b8 00040004     ..|.............
  4029f8:	00840004 00000078 00000000 00000000     ....x...........
  402a08:	00380000 00800040 00b00080 008400c8     ..8.@...........
  402a18:	00480084 00000030 00000000 00000000     ..H.0...........
  402a28:	00fc0000 00040004 00080008 00100010     ................
  402a38:	00200020 00000040 00000000 00000000      . .@...........
  402a48:	00780000 00840084 00780084 00840084     ..x.......x.....
  402a58:	00840084 00000078 00000000 00000000     ....x...........
  402a68:	00780000 00840084 008c0084 00040074     ..x.........t...
  402a78:	00100008 000000e0 00000000 00000000     ................
	...
  402a90:	00300000 00000030 00300000 00000030     ..0.0.....0.0...
	...
  402ab0:	00600000 00000060 00600000 00c00060     ..`.`.....`.`...
  402ac0:	00000080 00000000 00000000 00000000     ................
  402ad0:	00180004 00800060 00180060 00000004     ....`...`.......
	...
  402af0:	007e0000 00000000 0000007e 00000000     ..~.....~.......
	...
  402b10:	00300040 0002000c 0030000c 00000040     @.0.......0.@...
	...
  402b28:	00700000 00080088 00100008 00200020     ..p......... . .
  402b38:	00200000 00000020 00000000 00000000     .. . ...........
  402b48:	00000000 003c0000 00ba0042 00aa00aa     ......<.B.......
  402b58:	00bc00aa 003c0040 00000000 00000000     ....@.<.........
  402b68:	00100000 00280010 00280028 007c0044     ......(.(.(.D.|.
  402b78:	00820044 00000082 00000000 00000000     D...............
  402b88:	00f00000 00880088 00f00088 00880088     ................
  402b98:	00880088 000000f0 00000000 00000000     ................
  402ba8:	00380000 00800044 00800080 00800080     ..8.D...........
  402bb8:	00440080 00000038 00000000 00000000     ..D.8...........
  402bc8:	00f00000 00840088 00840084 00840084     ................
  402bd8:	00880084 000000f0 00000000 00000000     ................
  402be8:	007c0000 00400040 00780040 00400040     ..|.@.@.@.x.@.@.
  402bf8:	00400040 0000007c 00000000 00000000     @.@.|...........
  402c08:	007c0000 00400040 00400040 00400078     ..|.@.@.@.@.x.@.
  402c18:	00400040 00000040 00000000 00000000     @.@.@...........
  402c28:	00380000 00800044 00800080 0084009c     ..8.D...........
  402c38:	00440084 0000003c 00000000 00000000     ..D.<...........
  402c48:	00840000 00840084 00fc0084 00840084     ................
  402c58:	00840084 00000084 00000000 00000000     ................
  402c68:	007c0000 00100010 00100010 00100010     ..|.............
  402c78:	00100010 0000007c 00000000 00000000     ....|...........
  402c88:	00f80000 00080008 00080008 00080008     ................
  402c98:	00100008 000000e0 00000000 00000000     ................
  402ca8:	00840000 00880084 00a00090 008800d0     ................
  402cb8:	00840088 00000084 00000000 00000000     ................
  402cc8:	00800000 00800080 00800080 00800080     ................
  402cd8:	00800080 000000fc 00000000 00000000     ................
  402ce8:	00840000 00cc0084 00b400cc 008400b4     ................
  402cf8:	00840084 00000084 00000000 00000000     ................
  402d08:	00840000 00c400c4 00a400a4 00940094     ................
  402d18:	008c008c 00000084 00000000 00000000     ................
  402d28:	00300000 00840048 00840084 00840084     ..0.H...........
  402d38:	00480084 00000030 00000000 00000000     ..H.0...........
  402d48:	00f00000 00840088 00840084 00f00088     ................
  402d58:	00800080 00000080 00000000 00000000     ................
  402d68:	00300000 00840048 00840084 00840084     ..0.H...........
  402d78:	00480084 00200030 0000001c 00000000     ..H.0. .........
  402d88:	00f00000 00840088 00880084 009000f0     ................
  402d98:	00840088 00000084 00000000 00000000     ................
  402da8:	00780000 00800084 00300040 00040008     ..x.....@.0.....
  402db8:	00840004 00000078 00000000 00000000     ....x...........
  402dc8:	00fe0000 00100010 00100010 00100010     ................
  402dd8:	00100010 00000010 00000000 00000000     ................
  402de8:	00840000 00840084 00840084 00840084     ................
  402df8:	00840084 00000078 00000000 00000000     ....x...........
  402e08:	00820000 00440082 00440044 00280044     ......D.D.D.D.(.
  402e18:	00280028 00000010 00000000 00000000     (.(.............
  402e28:	00840000 00840084 00b40084 00b400b4     ................
  402e38:	00480078 00000048 00000000 00000000     x.H.H...........
  402e48:	00820000 00440044 00100028 00280010     ....D.D.(.....(.
  402e58:	00440044 00000082 00000000 00000000     D.D.............
  402e68:	00820000 00440044 00280028 00100028     ....D.D.(.(.(...
  402e78:	00100010 00000010 00000000 00000000     ................
  402e88:	00fc0000 00080004 00100008 00200010     .............. .
  402e98:	00400040 000000fe 00000000 00000000     @.@.............
  402ea8:	008000e0 00800080 00800080 00800080     ................
  402eb8:	00800080 00e00080 00000000 00000000     ................
  402ec8:	00400000 00200040 00100020 00080010     ..@.@. . .......
  402ed8:	00040008 00000004 00000000 00000000     ................
  402ee8:	002000e0 00200020 00200020 00200020     .. . . . . . . .
  402ef8:	00200020 00e00020 00000000 00000000      . . ...........
  402f08:	00100000 00440028 00000000 00000000     ....(.D.........
	...
  402f3c:	0000007c 00000000 00000000 00200000     |............. .
  402f4c:	00080010 00000000 00000000 00000000     ................
	...
  402f70:	00040078 007c0004 008c0084 00000076     x.....|.....v...
	...
  402f88:	00800080 00800080 00c400b8 00840084     ................
  402f98:	00880084 000000f0 00000000 00000000     ................
	...
  402fb0:	0080007c 00800080 00800080 0000007c     |...........|...
	...
  402fc8:	00020002 00020002 0042003e 00820082     ........>.B.....
  402fd8:	00420082 0000003e 00000000 00000000     ..B.>...........
	...
  402ff0:	0082007c 00fe0082 00800080 0000007e     |...........~...
	...
  403008:	001c0000 00200020 002000fc 00200020     .... . ... . . .
  403018:	00200020 000000fc 00000000 00000000      . .............
	...
  403030:	0084007c 00840084 008c0084 00040074     |...........t...
  403040:	00380044 00000000 00800080 00800080     D.8.............
  403050:	00c400b8 00840084 00840084 00000084     ................
	...
  403068:	00100000 00000000 00100070 00100010     ........p.......
  403078:	00100010 0000007c 00000000 00000000     ....|...........
  403088:	00080000 00000000 00080078 00080008     ........x.......
  403098:	00080008 00080008 00e00010 00000000     ................
  4030a8:	00800080 00800080 00900088 00e000a0     ................
  4030b8:	00880090 00000084 00000000 00000000     ................
  4030c8:	00f00000 00100010 00100010 00100010     ................
  4030d8:	00100010 000000fe 00000000 00000000     ................
	...
  4030f0:	00d400ac 00940094 00940094 00000094     ................
	...
  403110:	00c400b8 00840084 00840084 00000084     ................
	...
  403130:	00840078 00840084 00840084 00000078     x...........x...
	...
  403150:	00c400b8 00840084 00840084 008000f8     ................
  403160:	00800080 00000000 00000000 00000000     ................
  403170:	0084007c 00840084 00840084 0004007c     |...........|...
  403180:	00040004 00000000 00000000 00000000     ................
  403190:	003000cc 00200020 00200020 000000f8     ..0. . . . .....
	...
  4031b0:	0080007c 00780080 00040004 000000f8     |.....x.........
	...
  4031cc:	00200000 002000fc 00200020 00200020     .. ... . . . . .
  4031dc:	0000001c 00000000 00000000 00000000     ................
  4031ec:	00000000 00880088 00880088 00880088     ................
  4031fc:	00000074 00000000 00000000 00000000     t...............
  40320c:	00000000 00440082 00280044 00100028     ......D.D.(.(...
  40321c:	00000010 00000000 00000000 00000000     ................
  40322c:	00000000 00840084 00b400b4 00480048     ............H.H.
  40323c:	00000048 00000000 00000000 00000000     H...............
  40324c:	00000000 00280044 00100028 00440028     ....D.(.(...(.D.
  40325c:	00000044 00000000 00000000 00000000     D...............
  40326c:	00000000 00440082 00280044 00280028     ......D.D.(.(.(.
  40327c:	00100010 00200020 00000000 00000000     .... . .........
  40328c:	00000000 000400fc 00100008 00400020     ............ .@.
  40329c:	000000fc 00000000 00000000 00100008     ................
  4032ac:	00080010 00100008 00080010 00100008     ................
  4032bc:	00080010 00000000 00000000 00100010     ................
  4032cc:	00100010 00000010 00100000 00100010     ................
  4032dc:	00100010 00000000 00000000 00100020     ............ ...
  4032ec:	00200010 00100020 00200010 00100020     .. . ..... . ...
  4032fc:	00200010 00000000 0a05000d 0000004b     .. .........K...
  40330c:	00001932 0e00008b 32800008 030a0205     2..........2....
  40331c:	0f022003 00000a0f 18180000 00002020     . ..........  ..
  40332c:	0a000000 02020000 18180000 00030000     ................
  40333c:	00000000 18010002 1e1e1e1e 1e1e1e1e     ................
  40334c:	1e1e1e1e 00001e1e 00000000 00000000     ................
	...

00403364 <example_string>:
  403364:	504f4f42 00000021                       BOOP!...

0040336c <_global_impure_ptr>:
  40336c:	20400028                                (.@ 

00403370 <_init>:
  403370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403372:	bf00      	nop
  403374:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403376:	bc08      	pop	{r3}
  403378:	469e      	mov	lr, r3
  40337a:	4770      	bx	lr

0040337c <__init_array_start>:
  40337c:	004023b9 	.word	0x004023b9

00403380 <__frame_dummy_init_array_entry>:
  403380:	00400165                                e.@.

00403384 <_fini>:
  403384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403386:	bf00      	nop
  403388:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40338a:	bc08      	pop	{r3}
  40338c:	469e      	mov	lr, r3
  40338e:	4770      	bx	lr

00403390 <__fini_array_start>:
  403390:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 2744 0040 100a 7d20               ....D'@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <_impure_ptr>:
20400020:	0028 2040 0000 0000                         (.@ ....

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__malloc_av_>:
	...
20400458:	0450 2040 0450 2040 0458 2040 0458 2040     P.@ P.@ X.@ X.@ 
20400468:	0460 2040 0460 2040 0468 2040 0468 2040     `.@ `.@ h.@ h.@ 
20400478:	0470 2040 0470 2040 0478 2040 0478 2040     p.@ p.@ x.@ x.@ 
20400488:	0480 2040 0480 2040 0488 2040 0488 2040     ..@ ..@ ..@ ..@ 
20400498:	0490 2040 0490 2040 0498 2040 0498 2040     ..@ ..@ ..@ ..@ 
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 

20400858 <__malloc_sbrk_base>:
20400858:	ffff ffff                                   ....

2040085c <__malloc_trim_threshold>:
2040085c:	0000 0002                                   ....

20400860 <__atexit_recursive_mutex>:
20400860:	0bdc 2040                                   ..@ 
