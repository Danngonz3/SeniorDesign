
LCD_Example_Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c34  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000084c  20400000  00403c34  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000390  2040084c  00404480  0002084c  2**2
                  ALLOC
  3 .stack        00002004  20400bdc  00404810  0002084c  2**0
                  ALLOC
  4 .heap         00000200  20402be0  00406814  0002084c  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  0002084c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002087a  2**0
                  CONTENTS, READONLY
  7 .debug_info   00017226  00000000  00000000  000208d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000030c3  00000000  00000000  00037af9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005d87  00000000  00000000  0003abbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b68  00000000  00000000  00040943  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000bb0  00000000  00000000  000414ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001ff7a  00000000  00000000  0004205b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000c69a  00000000  00000000  00061fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008d4fc  00000000  00000000  0006e66f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000022a0  00000000  00000000  000fbb6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e0 2b 40 20 79 11 40 00 77 11 40 00 77 11 40 00     .+@ y.@.w.@.w.@.
  400010:	77 11 40 00 77 11 40 00 77 11 40 00 00 00 00 00     w.@.w.@.w.@.....
	...
  40002c:	77 11 40 00 77 11 40 00 00 00 00 00 77 11 40 00     w.@.w.@.....w.@.
  40003c:	d9 15 40 00 77 11 40 00 77 11 40 00 77 11 40 00     ..@.w.@.w.@.w.@.
  40004c:	77 11 40 00 77 11 40 00 77 11 40 00 77 11 40 00     w.@.w.@.w.@.w.@.
  40005c:	77 11 40 00 77 11 40 00 00 00 00 00 69 0e 40 00     w.@.w.@.....i.@.
  40006c:	7d 0e 40 00 91 0e 40 00 77 11 40 00 77 11 40 00     }.@...@.w.@.w.@.
  40007c:	77 11 40 00 a5 0e 40 00 b9 0e 40 00 77 11 40 00     w.@...@...@.w.@.
  40008c:	77 11 40 00 77 11 40 00 77 11 40 00 77 11 40 00     w.@.w.@.w.@.w.@.
  40009c:	77 11 40 00 77 11 40 00 77 11 40 00 77 11 40 00     w.@.w.@.w.@.w.@.
  4000ac:	77 11 40 00 77 11 40 00 77 11 40 00 77 11 40 00     w.@.w.@.w.@.w.@.
  4000bc:	77 11 40 00 77 11 40 00 77 11 40 00 77 11 40 00     w.@.w.@.w.@.w.@.
  4000cc:	77 11 40 00 00 00 00 00 77 11 40 00 00 00 00 00     w.@.....w.@.....
  4000dc:	77 11 40 00 77 11 40 00 77 11 40 00 77 11 40 00     w.@.w.@.w.@.w.@.
  4000ec:	77 11 40 00 77 11 40 00 77 11 40 00 77 11 40 00     w.@.w.@.w.@.w.@.
  4000fc:	77 11 40 00 77 11 40 00 77 11 40 00 77 11 40 00     w.@.w.@.w.@.w.@.
  40010c:	77 11 40 00 77 11 40 00 77 11 40 00 00 00 00 00     w.@.w.@.w.@.....
  40011c:	00 00 00 00 77 11 40 00 77 11 40 00 77 11 40 00     ....w.@.w.@.w.@.
  40012c:	77 11 40 00 77 11 40 00 00 00 00 00 77 11 40 00     w.@.w.@.....w.@.
  40013c:	77 11 40 00                                         w.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040084c 	.word	0x2040084c
  40015c:	00000000 	.word	0x00000000
  400160:	00403c34 	.word	0x00403c34

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00403c34 	.word	0x00403c34
  4001a0:	20400850 	.word	0x20400850
  4001a4:	00403c34 	.word	0x00403c34
  4001a8:	00000000 	.word	0x00000000

004001ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001ac:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ae:	4810      	ldr	r0, [pc, #64]	; (4001f0 <sysclk_init+0x44>)
  4001b0:	4b10      	ldr	r3, [pc, #64]	; (4001f4 <sysclk_init+0x48>)
  4001b2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001b4:	213e      	movs	r1, #62	; 0x3e
  4001b6:	2000      	movs	r0, #0
  4001b8:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x4c>)
  4001ba:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001bc:	4c0f      	ldr	r4, [pc, #60]	; (4001fc <sysclk_init+0x50>)
  4001be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001c0:	2800      	cmp	r0, #0
  4001c2:	d0fc      	beq.n	4001be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001c4:	4b0e      	ldr	r3, [pc, #56]	; (400200 <sysclk_init+0x54>)
  4001c6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001c8:	4a0e      	ldr	r2, [pc, #56]	; (400204 <sysclk_init+0x58>)
  4001ca:	4b0f      	ldr	r3, [pc, #60]	; (400208 <sysclk_init+0x5c>)
  4001cc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001ce:	4c0f      	ldr	r4, [pc, #60]	; (40020c <sysclk_init+0x60>)
  4001d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001d2:	2800      	cmp	r0, #0
  4001d4:	d0fc      	beq.n	4001d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001d6:	2002      	movs	r0, #2
  4001d8:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x64>)
  4001da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001dc:	2000      	movs	r0, #0
  4001de:	4b0d      	ldr	r3, [pc, #52]	; (400214 <sysclk_init+0x68>)
  4001e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <sysclk_init+0x6c>)
  4001e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001e6:	4802      	ldr	r0, [pc, #8]	; (4001f0 <sysclk_init+0x44>)
  4001e8:	4b02      	ldr	r3, [pc, #8]	; (4001f4 <sysclk_init+0x48>)
  4001ea:	4798      	blx	r3
  4001ec:	bd10      	pop	{r4, pc}
  4001ee:	bf00      	nop
  4001f0:	11e1a300 	.word	0x11e1a300
  4001f4:	0040134d 	.word	0x0040134d
  4001f8:	00400f69 	.word	0x00400f69
  4001fc:	00400fbd 	.word	0x00400fbd
  400200:	00400fcd 	.word	0x00400fcd
  400204:	20183f01 	.word	0x20183f01
  400208:	400e0600 	.word	0x400e0600
  40020c:	00400fdd 	.word	0x00400fdd
  400210:	00400ecd 	.word	0x00400ecd
  400214:	00400f05 	.word	0x00400f05
  400218:	00401241 	.word	0x00401241

0040021c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40021c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400220:	b980      	cbnz	r0, 400244 <_read+0x28>
  400222:	460c      	mov	r4, r1
  400224:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400226:	2a00      	cmp	r2, #0
  400228:	dd0f      	ble.n	40024a <_read+0x2e>
  40022a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40022c:	4e08      	ldr	r6, [pc, #32]	; (400250 <_read+0x34>)
  40022e:	4d09      	ldr	r5, [pc, #36]	; (400254 <_read+0x38>)
  400230:	6830      	ldr	r0, [r6, #0]
  400232:	4621      	mov	r1, r4
  400234:	682b      	ldr	r3, [r5, #0]
  400236:	4798      	blx	r3
		ptr++;
  400238:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  40023a:	42bc      	cmp	r4, r7
  40023c:	d1f8      	bne.n	400230 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40023e:	4640      	mov	r0, r8
  400240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400244:	f04f 38ff 	mov.w	r8, #4294967295
  400248:	e7f9      	b.n	40023e <_read+0x22>
	for (; len > 0; --len) {
  40024a:	4680      	mov	r8, r0
  40024c:	e7f7      	b.n	40023e <_read+0x22>
  40024e:	bf00      	nop
  400250:	20400b9c 	.word	0x20400b9c
  400254:	20400b94 	.word	0x20400b94

00400258 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400258:	3801      	subs	r0, #1
  40025a:	2802      	cmp	r0, #2
  40025c:	d815      	bhi.n	40028a <_write+0x32>
{
  40025e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400262:	460e      	mov	r6, r1
  400264:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400266:	b19a      	cbz	r2, 400290 <_write+0x38>
  400268:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40026a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4002a4 <_write+0x4c>
  40026e:	4f0c      	ldr	r7, [pc, #48]	; (4002a0 <_write+0x48>)
  400270:	f8d8 0000 	ldr.w	r0, [r8]
  400274:	f815 1b01 	ldrb.w	r1, [r5], #1
  400278:	683b      	ldr	r3, [r7, #0]
  40027a:	4798      	blx	r3
  40027c:	2800      	cmp	r0, #0
  40027e:	db0a      	blt.n	400296 <_write+0x3e>
  400280:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400282:	3c01      	subs	r4, #1
  400284:	d1f4      	bne.n	400270 <_write+0x18>
  400286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40028a:	f04f 30ff 	mov.w	r0, #4294967295
  40028e:	4770      	bx	lr
	for (; len != 0; --len) {
  400290:	4610      	mov	r0, r2
  400292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400296:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40029a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40029e:	bf00      	nop
  4002a0:	20400b98 	.word	0x20400b98
  4002a4:	20400b9c 	.word	0x20400b9c

004002a8 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4002a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002ae:	4b88      	ldr	r3, [pc, #544]	; (4004d0 <board_init+0x228>)
  4002b0:	605a      	str	r2, [r3, #4]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4002b2:	f3bf 8f5f 	dmb	sy
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  4002b6:	4f87      	ldr	r7, [pc, #540]	; (4004d4 <board_init+0x22c>)
  4002b8:	4638      	mov	r0, r7
  4002ba:	4d87      	ldr	r5, [pc, #540]	; (4004d8 <board_init+0x230>)
  4002bc:	47a8      	blx	r5
	dw_region_attr =
  4002be:	4e87      	ldr	r6, [pc, #540]	; (4004dc <board_init+0x234>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4002c0:	ea40 0106 	orr.w	r1, r0, r6
  4002c4:	2011      	movs	r0, #17
  4002c6:	4c86      	ldr	r4, [pc, #536]	; (4004e0 <board_init+0x238>)
  4002c8:	47a0      	blx	r4
		mpu_cal_mpu_region_size(IFLASH_END_ADDRESS - IFLASH_START_ADDRESS) |
  4002ca:	4886      	ldr	r0, [pc, #536]	; (4004e4 <board_init+0x23c>)
  4002cc:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4002ce:	4986      	ldr	r1, [pc, #536]	; (4004e8 <board_init+0x240>)
  4002d0:	4301      	orrs	r1, r0
  4002d2:	4886      	ldr	r0, [pc, #536]	; (4004ec <board_init+0x244>)
  4002d4:	47a0      	blx	r4
		mpu_cal_mpu_region_size(DTCM_END_ADDRESS - DTCM_START_ADDRESS) |
  4002d6:	4638      	mov	r0, r7
  4002d8:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4002da:	ea40 0106 	orr.w	r1, r0, r6
  4002de:	4884      	ldr	r0, [pc, #528]	; (4004f0 <board_init+0x248>)
  4002e0:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SRAM_FIRST_END_ADDRESS - SRAM_FIRST_START_ADDRESS)
  4002e2:	4884      	ldr	r0, [pc, #528]	; (4004f4 <board_init+0x24c>)
  4002e4:	47a8      	blx	r5
	dw_region_attr =
  4002e6:	f106 7608 	add.w	r6, r6, #35651584	; 0x2200000
  4002ea:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4002ee:	ea40 0106 	orr.w	r1, r0, r6
  4002f2:	4881      	ldr	r0, [pc, #516]	; (4004f8 <board_init+0x250>)
  4002f4:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SRAM_SECOND_END_ADDRESS - SRAM_SECOND_START_ADDRESS) |
  4002f6:	4881      	ldr	r0, [pc, #516]	; (4004fc <board_init+0x254>)
  4002f8:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4002fa:	ea40 0106 	orr.w	r1, r0, r6
  4002fe:	4880      	ldr	r0, [pc, #512]	; (400500 <board_init+0x258>)
  400300:	47a0      	blx	r4
		mpu_cal_mpu_region_size(PERIPHERALS_END_ADDRESS - PERIPHERALS_START_ADDRESS)
  400302:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  400306:	47a8      	blx	r5
	dw_region_attr = MPU_AP_FULL_ACCESS |
  400308:	4e7e      	ldr	r6, [pc, #504]	; (400504 <board_init+0x25c>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40030a:	ea40 0106 	orr.w	r1, r0, r6
  40030e:	487e      	ldr	r0, [pc, #504]	; (400508 <board_init+0x260>)
  400310:	47a0      	blx	r4
		mpu_cal_mpu_region_size(EXT_EBI_END_ADDRESS - EXT_EBI_START_ADDRESS) |
  400312:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  400316:	47a8      	blx	r5
	dw_region_attr =
  400318:	4f7c      	ldr	r7, [pc, #496]	; (40050c <board_init+0x264>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40031a:	ea40 0107 	orr.w	r1, r0, r7
  40031e:	487c      	ldr	r0, [pc, #496]	; (400510 <board_init+0x268>)
  400320:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SDRAM_END_ADDRESS - SDRAM_START_ADDRESS) |
  400322:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  400326:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  400328:	497a      	ldr	r1, [pc, #488]	; (400514 <board_init+0x26c>)
  40032a:	4301      	orrs	r1, r0
  40032c:	487a      	ldr	r0, [pc, #488]	; (400518 <board_init+0x270>)
  40032e:	47a0      	blx	r4
		mpu_cal_mpu_region_size(QSPI_END_ADDRESS - QSPI_START_ADDRESS) |
  400330:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  400334:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  400336:	ea40 0107 	orr.w	r1, r0, r7
  40033a:	4878      	ldr	r0, [pc, #480]	; (40051c <board_init+0x274>)
  40033c:	47a0      	blx	r4
		mpu_cal_mpu_region_size(USBHSRAM_END_ADDRESS - USBHSRAM_START_ADDRESS) |
  40033e:	4878      	ldr	r0, [pc, #480]	; (400520 <board_init+0x278>)
  400340:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  400342:	ea40 0106 	orr.w	r1, r0, r6
  400346:	4877      	ldr	r0, [pc, #476]	; (400524 <board_init+0x27c>)
  400348:	47a0      	blx	r4
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  40034a:	4c77      	ldr	r4, [pc, #476]	; (400528 <board_init+0x280>)
  40034c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40034e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
  400352:	6263      	str	r3, [r4, #36]	; 0x24
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  400354:	2005      	movs	r0, #5
  400356:	4b75      	ldr	r3, [pc, #468]	; (40052c <board_init+0x284>)
  400358:	4798      	blx	r3
  __ASM volatile ("dsb");
  40035a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40035e:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400362:	4b73      	ldr	r3, [pc, #460]	; (400530 <board_init+0x288>)
  400364:	4a73      	ldr	r2, [pc, #460]	; (400534 <board_init+0x28c>)
  400366:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400368:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
  40036c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  40036e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400372:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400376:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  40037a:	f023 0301 	bic.w	r3, r3, #1
  40037e:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400382:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
  400386:	f023 0301 	bic.w	r3, r3, #1
  40038a:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  __ASM volatile ("dsb");
  40038e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400392:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400396:	200a      	movs	r0, #10
  400398:	4c67      	ldr	r4, [pc, #412]	; (400538 <board_init+0x290>)
  40039a:	47a0      	blx	r4
  40039c:	200b      	movs	r0, #11
  40039e:	47a0      	blx	r4
  4003a0:	200c      	movs	r0, #12
  4003a2:	47a0      	blx	r4
  4003a4:	2010      	movs	r0, #16
  4003a6:	47a0      	blx	r4
  4003a8:	2011      	movs	r0, #17
  4003aa:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4003ac:	4c63      	ldr	r4, [pc, #396]	; (40053c <board_init+0x294>)
  4003ae:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  4003b2:	6123      	str	r3, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003b4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003b8:	6323      	str	r3, [r4, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4003ba:	4e61      	ldr	r6, [pc, #388]	; (400540 <board_init+0x298>)
  4003bc:	f44f 7500 	mov.w	r5, #512	; 0x200
  4003c0:	6135      	str	r5, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003c2:	f8c6 50a0 	str.w	r5, [r6, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003c6:	6335      	str	r5, [r6, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4003c8:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003ca:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  4003ce:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4003d0:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003d4:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  4003d6:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  4003d8:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4003dc:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4003de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  4003e2:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003e4:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4003e6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  4003ea:	6763      	str	r3, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4003ec:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003f0:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4003f4:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4003f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  4003fc:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003fe:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400402:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400404:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400406:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40040a:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40040c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400410:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400412:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400414:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400418:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40041a:	6063      	str	r3, [r4, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  40041c:	4a49      	ldr	r2, [pc, #292]	; (400544 <board_init+0x29c>)
  40041e:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400422:	f043 0310 	orr.w	r3, r3, #16
  400426:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  40042a:	4b47      	ldr	r3, [pc, #284]	; (400548 <board_init+0x2a0>)
  40042c:	2210      	movs	r2, #16
  40042e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400430:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400434:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400436:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400438:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40043c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40043e:	4311      	orrs	r1, r2
  400440:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400442:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400444:	4311      	orrs	r1, r2
  400446:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400448:	605a      	str	r2, [r3, #4]
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  40044a:	2300      	movs	r3, #0
  40044c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400450:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400454:	4630      	mov	r0, r6
  400456:	4f3d      	ldr	r7, [pc, #244]	; (40054c <board_init+0x2a4>)
  400458:	47b8      	blx	r7
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  40045a:	2300      	movs	r3, #0
  40045c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400460:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400464:	4630      	mov	r0, r6
  400466:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  400468:	2301      	movs	r3, #1
  40046a:	22ff      	movs	r2, #255	; 0xff
  40046c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400470:	4630      	mov	r0, r6
  400472:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  400474:	2301      	movs	r3, #1
  400476:	223f      	movs	r2, #63	; 0x3f
  400478:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40047c:	4834      	ldr	r0, [pc, #208]	; (400550 <board_init+0x2a8>)
  40047e:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  400480:	2301      	movs	r3, #1
  400482:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  400486:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40048a:	4620      	mov	r0, r4
  40048c:	47b8      	blx	r7
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  40048e:	2301      	movs	r3, #1
  400490:	f44f 7280 	mov.w	r2, #256	; 0x100
  400494:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400498:	4630      	mov	r0, r6
  40049a:	47b8      	blx	r7
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  40049c:	2301      	movs	r3, #1
  40049e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4004a2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4004a6:	4630      	mov	r0, r6
  4004a8:	47b8      	blx	r7
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  4004aa:	2301      	movs	r3, #1
  4004ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4004b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4004b4:	4827      	ldr	r0, [pc, #156]	; (400554 <board_init+0x2ac>)
  4004b6:	47b8      	blx	r7
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  4004b8:	2300      	movs	r3, #0
  4004ba:	462a      	mov	r2, r5
  4004bc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4004c0:	4630      	mov	r0, r6
  4004c2:	47b8      	blx	r7
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  4004c4:	4629      	mov	r1, r5
  4004c6:	4630      	mov	r0, r6
  4004c8:	4b23      	ldr	r3, [pc, #140]	; (400558 <board_init+0x2b0>)
  4004ca:	4798      	blx	r3
  4004cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4004ce:	bf00      	nop
  4004d0:	400e1850 	.word	0x400e1850
  4004d4:	003fffff 	.word	0x003fffff
  4004d8:	00400c6d 	.word	0x00400c6d
  4004dc:	01000001 	.word	0x01000001
  4004e0:	00400c61 	.word	0x00400c61
  4004e4:	001fffff 	.word	0x001fffff
  4004e8:	06230001 	.word	0x06230001
  4004ec:	00400012 	.word	0x00400012
  4004f0:	20000013 	.word	0x20000013
  4004f4:	0003ffff 	.word	0x0003ffff
  4004f8:	20400014 	.word	0x20400014
  4004fc:	0001ffff 	.word	0x0001ffff
  400500:	20440015 	.word	0x20440015
  400504:	13010001 	.word	0x13010001
  400508:	40000016 	.word	0x40000016
  40050c:	03000001 	.word	0x03000001
  400510:	60000017 	.word	0x60000017
  400514:	03250001 	.word	0x03250001
  400518:	70000018 	.word	0x70000018
  40051c:	80000019 	.word	0x80000019
  400520:	000fffff 	.word	0x000fffff
  400524:	a010001a 	.word	0xa010001a
  400528:	e000ed00 	.word	0xe000ed00
  40052c:	00400c55 	.word	0x00400c55
  400530:	400e0c00 	.word	0x400e0c00
  400534:	5a00080c 	.word	0x5a00080c
  400538:	00400fed 	.word	0x00400fed
  40053c:	400e0e00 	.word	0x400e0e00
  400540:	400e1200 	.word	0x400e1200
  400544:	40088000 	.word	0x40088000
  400548:	400e1000 	.word	0x400e1000
  40054c:	00400d81 	.word	0x00400d81
  400550:	400e1600 	.word	0x400e1600
  400554:	400e1400 	.word	0x400e1400
  400558:	00400c89 	.word	0x00400c89

0040055c <ili9488_check_box_coordinates>:
 * \param p_ul_x2 X coordinate of lower-right corner on LCD.
 * \param p_ul_y2 Y coordinate of lower-right corner on LCD.
 */
static void ili9488_check_box_coordinates(uint32_t *p_ul_x1, uint32_t *p_ul_y1,
		uint32_t *p_ul_x2, uint32_t *p_ul_y2)
{
  40055c:	b430      	push	{r4, r5}
	uint32_t dw;

	if (*p_ul_x1 >= ILI9488_LCD_WIDTH) {
  40055e:	6804      	ldr	r4, [r0, #0]
  400560:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
  400564:	d302      	bcc.n	40056c <ili9488_check_box_coordinates+0x10>
		*p_ul_x1 = ILI9488_LCD_WIDTH - 1;
  400566:	f240 143f 	movw	r4, #319	; 0x13f
  40056a:	6004      	str	r4, [r0, #0]
	}

	if (*p_ul_x2 >= ILI9488_LCD_WIDTH) {
  40056c:	6814      	ldr	r4, [r2, #0]
  40056e:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
  400572:	d302      	bcc.n	40057a <ili9488_check_box_coordinates+0x1e>
		*p_ul_x2 = ILI9488_LCD_WIDTH - 1;
  400574:	f240 143f 	movw	r4, #319	; 0x13f
  400578:	6014      	str	r4, [r2, #0]
	}

	if (*p_ul_y1 >= ILI9488_LCD_HEIGHT) {
  40057a:	680c      	ldr	r4, [r1, #0]
  40057c:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
  400580:	d302      	bcc.n	400588 <ili9488_check_box_coordinates+0x2c>
		*p_ul_y1 = ILI9488_LCD_HEIGHT - 1;
  400582:	f240 14df 	movw	r4, #479	; 0x1df
  400586:	600c      	str	r4, [r1, #0]
	}

	if (*p_ul_y2 >= ILI9488_LCD_HEIGHT) {
  400588:	681c      	ldr	r4, [r3, #0]
  40058a:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
  40058e:	d302      	bcc.n	400596 <ili9488_check_box_coordinates+0x3a>
		*p_ul_y2 = ILI9488_LCD_HEIGHT - 1;
  400590:	f240 14df 	movw	r4, #479	; 0x1df
  400594:	601c      	str	r4, [r3, #0]
	}

	if (*p_ul_x1 > *p_ul_x2) {
  400596:	6804      	ldr	r4, [r0, #0]
  400598:	6815      	ldr	r5, [r2, #0]
  40059a:	42ac      	cmp	r4, r5
  40059c:	d901      	bls.n	4005a2 <ili9488_check_box_coordinates+0x46>
		dw = *p_ul_x1;
		*p_ul_x1 = *p_ul_x2;
  40059e:	6005      	str	r5, [r0, #0]
		*p_ul_x2 = dw;
  4005a0:	6014      	str	r4, [r2, #0]
	}

	if (*p_ul_y1 > *p_ul_y2) {
  4005a2:	680a      	ldr	r2, [r1, #0]
  4005a4:	6818      	ldr	r0, [r3, #0]
  4005a6:	4282      	cmp	r2, r0
  4005a8:	d901      	bls.n	4005ae <ili9488_check_box_coordinates+0x52>
		dw = *p_ul_y1;
		*p_ul_y1 = *p_ul_y2;
  4005aa:	6008      	str	r0, [r1, #0]
		*p_ul_y2 = dw;
  4005ac:	601a      	str	r2, [r3, #0]
	}
}
  4005ae:	bc30      	pop	{r4, r5}
  4005b0:	4770      	bx	lr
	...

004005b4 <ili9488_write_ram_prepare>:
{
  4005b4:	b508      	push	{r3, lr}
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  4005b6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4005ba:	4804      	ldr	r0, [pc, #16]	; (4005cc <ili9488_write_ram_prepare+0x18>)
  4005bc:	4b04      	ldr	r3, [pc, #16]	; (4005d0 <ili9488_write_ram_prepare+0x1c>)
  4005be:	4798      	blx	r3

/* Define EBI access for ILI9488 16-bit System Interface.*/
#ifdef ILI9488_EBIMODE
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  4005c0:	222c      	movs	r2, #44	; 0x2c
  4005c2:	f04f 43c6 	mov.w	r3, #1660944384	; 0x63000000
  4005c6:	801a      	strh	r2, [r3, #0]
  4005c8:	bd08      	pop	{r3, pc}
  4005ca:	bf00      	nop
  4005cc:	400e1200 	.word	0x400e1200
  4005d0:	00400c8d 	.word	0x00400c8d

004005d4 <ili9488_write_register>:
{
  4005d4:	b570      	push	{r4, r5, r6, lr}
  4005d6:	4606      	mov	r6, r0
  4005d8:	460d      	mov	r5, r1
  4005da:	4614      	mov	r4, r2
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  4005dc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4005e0:	480c      	ldr	r0, [pc, #48]	; (400614 <ili9488_write_register+0x40>)
  4005e2:	4b0d      	ldr	r3, [pc, #52]	; (400618 <ili9488_write_register+0x44>)
  4005e4:	4798      	blx	r3
  4005e6:	b2b6      	uxth	r6, r6
  4005e8:	f04f 43c6 	mov.w	r3, #1660944384	; 0x63000000
  4005ec:	801e      	strh	r6, [r3, #0]
	if(size == 0) {
  4005ee:	b904      	cbnz	r4, 4005f2 <ili9488_write_register+0x1e>
  4005f0:	bd70      	pop	{r4, r5, r6, pc}
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  4005f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4005f6:	4807      	ldr	r0, [pc, #28]	; (400614 <ili9488_write_register+0x40>)
  4005f8:	4b08      	ldr	r3, [pc, #32]	; (40061c <ili9488_write_register+0x48>)
  4005fa:	4798      	blx	r3
	{
		*(volatile uint16_t *)(BOARD_ILI9488_ADDR) = lcd_data;
	}
	static inline void LCD_MULTI_WD(const uint16_t *lcd_data, uint32_t size)
	{
		while(size--) {
  4005fc:	1e62      	subs	r2, r4, #1
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  4005fe:	f04f 41c6 	mov.w	r1, #1660944384	; 0x63000000
  400602:	f835 3b02 	ldrh.w	r3, [r5], #2
  400606:	800b      	strh	r3, [r1, #0]
		while(size--) {
  400608:	3a01      	subs	r2, #1
  40060a:	f1b2 3fff 	cmp.w	r2, #4294967295
  40060e:	d1f8      	bne.n	400602 <ili9488_write_register+0x2e>
  400610:	e7ee      	b.n	4005f0 <ili9488_write_register+0x1c>
  400612:	bf00      	nop
  400614:	400e1200 	.word	0x400e1200
  400618:	00400c8d 	.word	0x00400c8d
  40061c:	00400c89 	.word	0x00400c89

00400620 <ili9488_write_ram_buffer>:
{
  400620:	b538      	push	{r3, r4, r5, lr}
  400622:	4604      	mov	r4, r0
  400624:	460d      	mov	r5, r1
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  400626:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40062a:	4807      	ldr	r0, [pc, #28]	; (400648 <ili9488_write_ram_buffer+0x28>)
  40062c:	4b07      	ldr	r3, [pc, #28]	; (40064c <ili9488_write_ram_buffer+0x2c>)
  40062e:	4798      	blx	r3
  400630:	b14d      	cbz	r5, 400646 <ili9488_write_ram_buffer+0x26>
  400632:	1e6b      	subs	r3, r5, #1
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  400634:	f04f 41c6 	mov.w	r1, #1660944384	; 0x63000000
  400638:	f834 2b02 	ldrh.w	r2, [r4], #2
  40063c:	800a      	strh	r2, [r1, #0]
		while(size--) {
  40063e:	3b01      	subs	r3, #1
  400640:	f1b3 3fff 	cmp.w	r3, #4294967295
  400644:	d1f8      	bne.n	400638 <ili9488_write_ram_buffer+0x18>
  400646:	bd38      	pop	{r3, r4, r5, pc}
  400648:	400e1200 	.word	0x400e1200
  40064c:	00400c89 	.word	0x00400c89

00400650 <ili9488_delay>:
	for(i = 0; i < ul_ms; i++) {
  400650:	4601      	mov	r1, r0
  400652:	b130      	cbz	r0, 400662 <ili9488_delay+0x12>
  400654:	4a03      	ldr	r2, [pc, #12]	; (400664 <ili9488_delay+0x14>)
{
  400656:	4b04      	ldr	r3, [pc, #16]	; (400668 <ili9488_delay+0x18>)
		for(i = 0; i < 100000; i++) {
  400658:	3b01      	subs	r3, #1
  40065a:	d1fd      	bne.n	400658 <ili9488_delay+0x8>
	for(i = 0; i < ul_ms; i++) {
  40065c:	4291      	cmp	r1, r2
  40065e:	d8fa      	bhi.n	400656 <ili9488_delay+0x6>
  400660:	4770      	bx	lr
  400662:	4770      	bx	lr
  400664:	000186a1 	.word	0x000186a1
  400668:	000186a0 	.word	0x000186a0

0040066c <ili9488_set_display_direction>:
 * \brief ILI9488 configure landscape.
 *
 * \Param LandscaprMode Landscape Mode.
 */
void ili9488_set_display_direction(enum ili9488_display_direction direction )
{
  40066c:	b500      	push	{lr}
  40066e:	b083      	sub	sp, #12
	ili9488_color_t value;
	if(direction) {
  400670:	b958      	cbnz	r0, 40068a <ili9488_set_display_direction+0x1e>
		value = 0xE8;
	} else {
		value = 0x48;
  400672:	2348      	movs	r3, #72	; 0x48
  400674:	f8ad 3006 	strh.w	r3, [sp, #6]
	}
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &value, 1);
  400678:	2201      	movs	r2, #1
  40067a:	f10d 0106 	add.w	r1, sp, #6
  40067e:	2036      	movs	r0, #54	; 0x36
  400680:	4b04      	ldr	r3, [pc, #16]	; (400694 <ili9488_set_display_direction+0x28>)
  400682:	4798      	blx	r3
}
  400684:	b003      	add	sp, #12
  400686:	f85d fb04 	ldr.w	pc, [sp], #4
		value = 0xE8;
  40068a:	23e8      	movs	r3, #232	; 0xe8
  40068c:	f8ad 3006 	strh.w	r3, [sp, #6]
  400690:	e7f2      	b.n	400678 <ili9488_set_display_direction+0xc>
  400692:	bf00      	nop
  400694:	004005d5 	.word	0x004005d5

00400698 <ili9488_set_window>:
 * \Param y start position.
 * \Param width  Width of window.
 * \Param height Height of window.
 */
void ili9488_set_window(uint16_t x, uint16_t y, uint16_t width, uint16_t height )
{
  400698:	b510      	push	{r4, lr}
  40069a:	b084      	sub	sp, #16
	uint32_t cnt = 0;
	ili9488_color_t buf[4];

	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	col_start  =  x ;
  40069c:	f8ad 000e 	strh.w	r0, [sp, #14]
	col_end    =  width + x - 1;
  4006a0:	3a01      	subs	r2, #1
  4006a2:	4402      	add	r2, r0
  4006a4:	f8ad 200c 	strh.w	r2, [sp, #12]

	row_start = y ;
  4006a8:	f8ad 100a 	strh.w	r1, [sp, #10]
	row_end   = height + y - 1;
  4006ac:	3b01      	subs	r3, #1
  4006ae:	4419      	add	r1, r3
  4006b0:	f8ad 1008 	strh.w	r1, [sp, #8]

	buf[0] = get_8b_to_16b(col_start);
  4006b4:	0a03      	lsrs	r3, r0, #8
  4006b6:	f8ad 3000 	strh.w	r3, [sp]
	buf[1] = get_0b_to_8b(col_start);
  4006ba:	b2c0      	uxtb	r0, r0
  4006bc:	f8ad 0002 	strh.w	r0, [sp, #2]
	buf[2] = get_8b_to_16b(col_end);
  4006c0:	f3c2 2307 	ubfx	r3, r2, #8, #8
  4006c4:	f8ad 3004 	strh.w	r3, [sp, #4]
	buf[3] = get_0b_to_8b(col_end);
  4006c8:	b2d2      	uxtb	r2, r2
  4006ca:	f8ad 2006 	strh.w	r2, [sp, #6]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  4006ce:	2204      	movs	r2, #4
  4006d0:	4669      	mov	r1, sp
  4006d2:	202a      	movs	r0, #42	; 0x2a
  4006d4:	4c0f      	ldr	r4, [pc, #60]	; (400714 <ili9488_set_window+0x7c>)
  4006d6:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  4006d8:	2200      	movs	r2, #0
  4006da:	4611      	mov	r1, r2
  4006dc:	4610      	mov	r0, r2
  4006de:	47a0      	blx	r4

	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(row_start);
  4006e0:	f89d 300b 	ldrb.w	r3, [sp, #11]
  4006e4:	f8ad 3000 	strh.w	r3, [sp]
	buf[1] = get_0b_to_8b(row_start);
  4006e8:	f89d 300a 	ldrb.w	r3, [sp, #10]
  4006ec:	f8ad 3002 	strh.w	r3, [sp, #2]
	buf[2] = get_8b_to_16b(row_end);
  4006f0:	f89d 3009 	ldrb.w	r3, [sp, #9]
  4006f4:	f8ad 3004 	strh.w	r3, [sp, #4]
	buf[3] = get_0b_to_8b(row_end);
  4006f8:	f89d 3008 	ldrb.w	r3, [sp, #8]
  4006fc:	f8ad 3006 	strh.w	r3, [sp, #6]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  400700:	2204      	movs	r2, #4
  400702:	4669      	mov	r1, sp
  400704:	202b      	movs	r0, #43	; 0x2b
  400706:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400708:	2200      	movs	r2, #0
  40070a:	4611      	mov	r1, r2
  40070c:	4610      	mov	r0, r2
  40070e:	47a0      	blx	r4
}
  400710:	b004      	add	sp, #16
  400712:	bd10      	pop	{r4, pc}
  400714:	004005d5 	.word	0x004005d5

00400718 <ili9488_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9488_display_on(void)
{
  400718:	b508      	push	{r3, lr}
	ili9488_write_register(ILI9488_CMD_DISPLAY_ON, 0, 0);
  40071a:	2200      	movs	r2, #0
  40071c:	4611      	mov	r1, r2
  40071e:	2029      	movs	r0, #41	; 0x29
  400720:	4b01      	ldr	r3, [pc, #4]	; (400728 <ili9488_display_on+0x10>)
  400722:	4798      	blx	r3
  400724:	bd08      	pop	{r3, pc}
  400726:	bf00      	nop
  400728:	004005d5 	.word	0x004005d5

0040072c <ili9488_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili9488_set_foreground_color(uint32_t ul_color)
{
  40072c:	4a04      	ldr	r2, [pc, #16]	; (400740 <ili9488_set_foreground_color+0x14>)
  40072e:	1e93      	subs	r3, r2, #2
  400730:	f202 227e 	addw	r2, r2, #638	; 0x27e
	uint32_t i;
#ifdef ILI9488_EBIMODE
	/* Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
		g_ul_pixel_cache[i] = ul_color;
  400734:	f823 0f02 	strh.w	r0, [r3, #2]!
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
  400738:	4293      	cmp	r3, r2
  40073a:	d1fb      	bne.n	400734 <ili9488_set_foreground_color+0x8>
		g_ul_pixel_cache[i++] = ul_color>>16;
		g_ul_pixel_cache[i++] = ul_color>>8;
		g_ul_pixel_cache[i++] = ul_color&0xFF;
	}
#endif
}
  40073c:	4770      	bx	lr
  40073e:	bf00      	nop
  400740:	20400868 	.word	0x20400868

00400744 <ili9488_set_cursor_position>:
 *
 * \param x X coordinate of upper-left corner on LCD.
 * \param y Y coordinate of upper-left corner on LCD.
 */
void ili9488_set_cursor_position(uint16_t x, uint16_t y)
{
  400744:	b510      	push	{r4, lr}
  400746:	b084      	sub	sp, #16
  400748:	f8ad 0006 	strh.w	r0, [sp, #6]
  40074c:	f8ad 1004 	strh.w	r1, [sp, #4]
	uint32_t cnt = 0;

	ili9488_color_t buf[4];
	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	buf[0] = get_8b_to_16b(x);
  400750:	0a03      	lsrs	r3, r0, #8
  400752:	f8ad 3008 	strh.w	r3, [sp, #8]
	buf[1] = get_0b_to_8b(x);
  400756:	b2c0      	uxtb	r0, r0
  400758:	f8ad 000a 	strh.w	r0, [sp, #10]
	buf[2] = get_8b_to_16b(x);
  40075c:	f8ad 300c 	strh.w	r3, [sp, #12]
	buf[3] = get_0b_to_8b(x);
  400760:	f8ad 000e 	strh.w	r0, [sp, #14]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  400764:	2204      	movs	r2, #4
  400766:	a902      	add	r1, sp, #8
  400768:	202a      	movs	r0, #42	; 0x2a
  40076a:	4c0e      	ldr	r4, [pc, #56]	; (4007a4 <ili9488_set_cursor_position+0x60>)
  40076c:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  40076e:	2200      	movs	r2, #0
  400770:	4611      	mov	r1, r2
  400772:	4610      	mov	r0, r2
  400774:	47a0      	blx	r4


	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(y);
  400776:	f89d 2005 	ldrb.w	r2, [sp, #5]
  40077a:	f8ad 2008 	strh.w	r2, [sp, #8]
	buf[1] = get_0b_to_8b(y);
  40077e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  400782:	f8ad 300a 	strh.w	r3, [sp, #10]
	buf[2] = get_8b_to_16b(y);
  400786:	f8ad 200c 	strh.w	r2, [sp, #12]
	buf[3] = get_0b_to_8b(y);
  40078a:	f8ad 300e 	strh.w	r3, [sp, #14]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  40078e:	2204      	movs	r2, #4
  400790:	a902      	add	r1, sp, #8
  400792:	202b      	movs	r0, #43	; 0x2b
  400794:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400796:	2200      	movs	r2, #0
  400798:	4611      	mov	r1, r2
  40079a:	4610      	mov	r0, r2
  40079c:	47a0      	blx	r4
}
  40079e:	b004      	add	sp, #16
  4007a0:	bd10      	pop	{r4, pc}
  4007a2:	bf00      	nop
  4007a4:	004005d5 	.word	0x004005d5

004007a8 <ili9488_init>:
{
  4007a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4007aa:	b085      	sub	sp, #20
  4007ac:	4604      	mov	r4, r0
	pmc_enable_periph_clk(ID_SMC);
  4007ae:	2009      	movs	r0, #9
  4007b0:	4b46      	ldr	r3, [pc, #280]	; (4008cc <ili9488_init+0x124>)
  4007b2:	4798      	blx	r3
	smc_set_setup_timing(SMC, BOARD_ILI9488_EBI_NPCS, SMC_SETUP_NWE_SETUP(0)
  4007b4:	4d46      	ldr	r5, [pc, #280]	; (4008d0 <ili9488_init+0x128>)
  4007b6:	2200      	movs	r2, #0
  4007b8:	2103      	movs	r1, #3
  4007ba:	4628      	mov	r0, r5
  4007bc:	4b45      	ldr	r3, [pc, #276]	; (4008d4 <ili9488_init+0x12c>)
  4007be:	4798      	blx	r3
	smc_set_pulse_timing(SMC, BOARD_ILI9488_EBI_NPCS , SMC_PULSE_NWE_PULSE(3)
  4007c0:	4a45      	ldr	r2, [pc, #276]	; (4008d8 <ili9488_init+0x130>)
  4007c2:	2103      	movs	r1, #3
  4007c4:	4628      	mov	r0, r5
  4007c6:	4b45      	ldr	r3, [pc, #276]	; (4008dc <ili9488_init+0x134>)
  4007c8:	4798      	blx	r3
	smc_set_cycle_timing(SMC, BOARD_ILI9488_EBI_NPCS, SMC_CYCLE_NWE_CYCLE(0x4)
  4007ca:	4a45      	ldr	r2, [pc, #276]	; (4008e0 <ili9488_init+0x138>)
  4007cc:	2103      	movs	r1, #3
  4007ce:	4628      	mov	r0, r5
  4007d0:	4b44      	ldr	r3, [pc, #272]	; (4008e4 <ili9488_init+0x13c>)
  4007d2:	4798      	blx	r3
	smc_set_mode(SMC, BOARD_ILI9488_EBI_NPCS, SMC_MODE_READ_MODE
  4007d4:	4a44      	ldr	r2, [pc, #272]	; (4008e8 <ili9488_init+0x140>)
  4007d6:	2103      	movs	r1, #3
  4007d8:	4628      	mov	r0, r5
  4007da:	4b44      	ldr	r3, [pc, #272]	; (4008ec <ili9488_init+0x144>)
  4007dc:	4798      	blx	r3
	ili9488_write_register(ILI9488_CMD_SOFTWARE_RESET, 0x0000, 0);
  4007de:	2200      	movs	r2, #0
  4007e0:	4611      	mov	r1, r2
  4007e2:	2001      	movs	r0, #1
  4007e4:	4e42      	ldr	r6, [pc, #264]	; (4008f0 <ili9488_init+0x148>)
  4007e6:	47b0      	blx	r6
	ili9488_delay(200);
  4007e8:	20c8      	movs	r0, #200	; 0xc8
  4007ea:	4d42      	ldr	r5, [pc, #264]	; (4008f4 <ili9488_init+0x14c>)
  4007ec:	47a8      	blx	r5
	ili9488_write_register(ILI9488_CMD_SLEEP_OUT, 0x0000, 0);
  4007ee:	2200      	movs	r2, #0
  4007f0:	4611      	mov	r1, r2
  4007f2:	2011      	movs	r0, #17
  4007f4:	47b0      	blx	r6
	ili9488_delay(200);
  4007f6:	20c8      	movs	r0, #200	; 0xc8
  4007f8:	47a8      	blx	r5
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  4007fa:	4e3f      	ldr	r6, [pc, #252]	; (4008f8 <ili9488_init+0x150>)
  4007fc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400800:	4630      	mov	r0, r6
  400802:	4b3e      	ldr	r3, [pc, #248]	; (4008fc <ili9488_init+0x154>)
  400804:	4798      	blx	r3
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  400806:	f04f 45c6 	mov.w	r5, #1660944384	; 0x63000000
  40080a:	23d3      	movs	r3, #211	; 0xd3
  40080c:	802b      	strh	r3, [r5, #0]
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  40080e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400812:	4630      	mov	r0, r6
  400814:	4b3a      	ldr	r3, [pc, #232]	; (400900 <ili9488_init+0x158>)
  400816:	4798      	blx	r3
		return *(volatile uint16_t *)(BOARD_ILI9488_ADDR);
	}
	static inline void LCD_MULTI_RD(uint16_t *pbuffer, uint32_t size)
	{
		while(size--) {
			*pbuffer++ = *((volatile uint16_t *)(BOARD_ILI9488_ADDR));
  400818:	882b      	ldrh	r3, [r5, #0]
  40081a:	f8ad 3004 	strh.w	r3, [sp, #4]
  40081e:	8829      	ldrh	r1, [r5, #0]
  400820:	b289      	uxth	r1, r1
  400822:	f8ad 1006 	strh.w	r1, [sp, #6]
  400826:	882b      	ldrh	r3, [r5, #0]
  400828:	b29b      	uxth	r3, r3
  40082a:	f8ad 3008 	strh.w	r3, [sp, #8]
  40082e:	882a      	ldrh	r2, [r5, #0]
  400830:	b292      	uxth	r2, r2
  400832:	f8ad 200a 	strh.w	r2, [sp, #10]
  400836:	8828      	ldrh	r0, [r5, #0]
		chipid |= (*ptr &0xFF)<< (shift_cnt << 3);
  400838:	b2c9      	uxtb	r1, r1
  40083a:	b2db      	uxtb	r3, r3
  40083c:	021b      	lsls	r3, r3, #8
  40083e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  400842:	b2d2      	uxtb	r2, r2
  400844:	4313      	orrs	r3, r2
	if (chipid != ILI9488_DEVICE_CODE) {
  400846:	f249 4288 	movw	r2, #38024	; 0x9488
  40084a:	4293      	cmp	r3, r2
  40084c:	d002      	beq.n	400854 <ili9488_init+0xac>
		return 1;
  40084e:	2001      	movs	r0, #1
}
  400850:	b005      	add	sp, #20
  400852:	bdf0      	pop	{r4, r5, r6, r7, pc}
	param = 0x48;
  400854:	ae04      	add	r6, sp, #16
  400856:	2348      	movs	r3, #72	; 0x48
  400858:	f826 3d02 	strh.w	r3, [r6, #-2]!
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &param, 1);
  40085c:	2201      	movs	r2, #1
  40085e:	4631      	mov	r1, r6
  400860:	2036      	movs	r0, #54	; 0x36
  400862:	4f23      	ldr	r7, [pc, #140]	; (4008f0 <ili9488_init+0x148>)
  400864:	47b8      	blx	r7
	ili9488_delay(100);
  400866:	2064      	movs	r0, #100	; 0x64
  400868:	4d22      	ldr	r5, [pc, #136]	; (4008f4 <ili9488_init+0x14c>)
  40086a:	47a8      	blx	r5
	param = 0x04;
  40086c:	2304      	movs	r3, #4
  40086e:	f8ad 300e 	strh.w	r3, [sp, #14]
	ili9488_write_register(ILI9488_CMD_CABC_CONTROL_9, &param, 1);
  400872:	2201      	movs	r2, #1
  400874:	4631      	mov	r1, r6
  400876:	20cf      	movs	r0, #207	; 0xcf
  400878:	47b8      	blx	r7
	ili9488_delay(100);
  40087a:	2064      	movs	r0, #100	; 0x64
  40087c:	47a8      	blx	r5
	param = 0x05;
  40087e:	2305      	movs	r3, #5
  400880:	f8ad 300e 	strh.w	r3, [sp, #14]
	ili9488_write_register(ILI9488_CMD_COLMOD_PIXEL_FORMAT_SET, &param, 1);
  400884:	2201      	movs	r2, #1
  400886:	4631      	mov	r1, r6
  400888:	203a      	movs	r0, #58	; 0x3a
  40088a:	47b8      	blx	r7
	ili9488_delay(100);
  40088c:	2064      	movs	r0, #100	; 0x64
  40088e:	47a8      	blx	r5
	ili9488_write_register(ILI9488_CMD_PARTIAL_MODE_ON, 0, 0);
  400890:	2200      	movs	r2, #0
  400892:	4611      	mov	r1, r2
  400894:	2012      	movs	r0, #18
  400896:	47b8      	blx	r7
	ili9488_delay(100);
  400898:	2064      	movs	r0, #100	; 0x64
  40089a:	47a8      	blx	r5
	ili9488_display_on();
  40089c:	4b19      	ldr	r3, [pc, #100]	; (400904 <ili9488_init+0x15c>)
  40089e:	4798      	blx	r3
	ili9488_delay(100);
  4008a0:	2064      	movs	r0, #100	; 0x64
  4008a2:	47a8      	blx	r5
	ili9488_set_display_direction(LANDSCAPE);
  4008a4:	2000      	movs	r0, #0
  4008a6:	4b18      	ldr	r3, [pc, #96]	; (400908 <ili9488_init+0x160>)
  4008a8:	4798      	blx	r3
	ili9488_delay(100);
  4008aa:	2064      	movs	r0, #100	; 0x64
  4008ac:	47a8      	blx	r5
	ili9488_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  4008ae:	88a3      	ldrh	r3, [r4, #4]
  4008b0:	8822      	ldrh	r2, [r4, #0]
  4008b2:	2100      	movs	r1, #0
  4008b4:	4608      	mov	r0, r1
  4008b6:	4d15      	ldr	r5, [pc, #84]	; (40090c <ili9488_init+0x164>)
  4008b8:	47a8      	blx	r5
	ili9488_set_foreground_color(p_opt->foreground_color);
  4008ba:	68a0      	ldr	r0, [r4, #8]
  4008bc:	4b14      	ldr	r3, [pc, #80]	; (400910 <ili9488_init+0x168>)
  4008be:	4798      	blx	r3
	ili9488_set_cursor_position(0, 0);
  4008c0:	2100      	movs	r1, #0
  4008c2:	4608      	mov	r0, r1
  4008c4:	4b13      	ldr	r3, [pc, #76]	; (400914 <ili9488_init+0x16c>)
  4008c6:	4798      	blx	r3
	return 0;
  4008c8:	2000      	movs	r0, #0
  4008ca:	e7c1      	b.n	400850 <ili9488_init+0xa8>
  4008cc:	00400fed 	.word	0x00400fed
  4008d0:	40080000 	.word	0x40080000
  4008d4:	00400c35 	.word	0x00400c35
  4008d8:	0a0a0403 	.word	0x0a0a0403
  4008dc:	00400c3b 	.word	0x00400c3b
  4008e0:	000a0004 	.word	0x000a0004
  4008e4:	00400c43 	.word	0x00400c43
  4008e8:	000f1003 	.word	0x000f1003
  4008ec:	00400c4b 	.word	0x00400c4b
  4008f0:	004005d5 	.word	0x004005d5
  4008f4:	00400651 	.word	0x00400651
  4008f8:	400e1200 	.word	0x400e1200
  4008fc:	00400c8d 	.word	0x00400c8d
  400900:	00400c89 	.word	0x00400c89
  400904:	00400719 	.word	0x00400719
  400908:	0040066d 	.word	0x0040066d
  40090c:	00400699 	.word	0x00400699
  400910:	0040072d 	.word	0x0040072d
  400914:	00400745 	.word	0x00400745

00400918 <ili9488_draw_pixel>:
 *
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili9488_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
	if ((ul_x >= ILI9488_LCD_WIDTH) || (ul_y >= ILI9488_LCD_HEIGHT)) {
  400918:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  40091c:	d20f      	bcs.n	40093e <ili9488_draw_pixel+0x26>
  40091e:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
  400922:	d20c      	bcs.n	40093e <ili9488_draw_pixel+0x26>
{
  400924:	b508      	push	{r3, lr}
		return 1;
	}

	/* Set cursor */
	ili9488_set_cursor_position(ul_x, ul_y);
  400926:	b289      	uxth	r1, r1
  400928:	b280      	uxth	r0, r0
  40092a:	4b06      	ldr	r3, [pc, #24]	; (400944 <ili9488_draw_pixel+0x2c>)
  40092c:	4798      	blx	r3

	/* Prepare to write in GRAM */
	ili9488_write_ram_prepare();
  40092e:	4b06      	ldr	r3, [pc, #24]	; (400948 <ili9488_draw_pixel+0x30>)
  400930:	4798      	blx	r3
	ili9488_write_ram_buffer(g_ul_pixel_cache, LCD_DATA_COLOR_UNIT);
  400932:	2101      	movs	r1, #1
  400934:	4805      	ldr	r0, [pc, #20]	; (40094c <ili9488_draw_pixel+0x34>)
  400936:	4b06      	ldr	r3, [pc, #24]	; (400950 <ili9488_draw_pixel+0x38>)
  400938:	4798      	blx	r3
	return 0;
  40093a:	2000      	movs	r0, #0
  40093c:	bd08      	pop	{r3, pc}
		return 1;
  40093e:	2001      	movs	r0, #1
  400940:	4770      	bx	lr
  400942:	bf00      	nop
  400944:	00400745 	.word	0x00400745
  400948:	004005b5 	.word	0x004005b5
  40094c:	20400868 	.word	0x20400868
  400950:	00400621 	.word	0x00400621

00400954 <ili9488_draw_filled_rectangle>:
 * \param ul_x2 X coordinate of lower-right corner on LCD.
 * \param ul_y2 Y coordinate of lower-right corner on LCD.
 */
void ili9488_draw_filled_rectangle(uint32_t ul_x1, uint32_t ul_y1,
		uint32_t ul_x2, uint32_t ul_y2)
{
  400954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400958:	b084      	sub	sp, #16
  40095a:	9003      	str	r0, [sp, #12]
  40095c:	9102      	str	r1, [sp, #8]
  40095e:	9201      	str	r2, [sp, #4]
  400960:	aa04      	add	r2, sp, #16
  400962:	f842 3d10 	str.w	r3, [r2, #-16]!
	uint32_t size, blocks;

	/* Swap coordinates if necessary */
	ili9488_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);
  400966:	4613      	mov	r3, r2
  400968:	aa01      	add	r2, sp, #4
  40096a:	a902      	add	r1, sp, #8
  40096c:	a803      	add	r0, sp, #12
  40096e:	4c22      	ldr	r4, [pc, #136]	; (4009f8 <ili9488_draw_filled_rectangle+0xa4>)
  400970:	47a0      	blx	r4

	/* Determine the refresh window area */
	ili9488_set_window(ul_x1, ul_y1, (ul_x2 - ul_x1) + 1, (ul_y2 - ul_y1) + 1);
  400972:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  400976:	f8bd 1008 	ldrh.w	r1, [sp, #8]
  40097a:	9b00      	ldr	r3, [sp, #0]
  40097c:	3301      	adds	r3, #1
  40097e:	1a5b      	subs	r3, r3, r1
  400980:	9a01      	ldr	r2, [sp, #4]
  400982:	3201      	adds	r2, #1
  400984:	1a12      	subs	r2, r2, r0
  400986:	b29b      	uxth	r3, r3
  400988:	b292      	uxth	r2, r2
  40098a:	4c1c      	ldr	r4, [pc, #112]	; (4009fc <ili9488_draw_filled_rectangle+0xa8>)
  40098c:	47a0      	blx	r4

	/* Prepare to write in GRAM */
	ili9488_write_ram_prepare();
  40098e:	4b1c      	ldr	r3, [pc, #112]	; (400a00 <ili9488_draw_filled_rectangle+0xac>)
  400990:	4798      	blx	r3

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);
  400992:	9a03      	ldr	r2, [sp, #12]
  400994:	9b01      	ldr	r3, [sp, #4]
  400996:	1a9a      	subs	r2, r3, r2
  400998:	9b00      	ldr	r3, [sp, #0]
  40099a:	f103 0801 	add.w	r8, r3, #1
  40099e:	9b02      	ldr	r3, [sp, #8]
  4009a0:	eba8 0803 	sub.w	r8, r8, r3
  4009a4:	fb02 8808 	mla	r8, r2, r8, r8
	/* Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
  4009a8:	4b16      	ldr	r3, [pc, #88]	; (400a04 <ili9488_draw_filled_rectangle+0xb0>)
  4009aa:	fba3 2308 	umull	r2, r3, r3, r8
  4009ae:	0a1b      	lsrs	r3, r3, #8
	while (blocks--) {
  4009b0:	b15b      	cbz	r3, 4009ca <ili9488_draw_filled_rectangle+0x76>
  4009b2:	1e5c      	subs	r4, r3, #1
		ili9488_write_ram_buffer(g_ul_pixel_cache, LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT);
  4009b4:	4f14      	ldr	r7, [pc, #80]	; (400a08 <ili9488_draw_filled_rectangle+0xb4>)
  4009b6:	f44f 76a0 	mov.w	r6, #320	; 0x140
  4009ba:	4d14      	ldr	r5, [pc, #80]	; (400a0c <ili9488_draw_filled_rectangle+0xb8>)
  4009bc:	4631      	mov	r1, r6
  4009be:	4638      	mov	r0, r7
  4009c0:	47a8      	blx	r5
	while (blocks--) {
  4009c2:	3c01      	subs	r4, #1
  4009c4:	f1b4 3fff 	cmp.w	r4, #4294967295
  4009c8:	d1f8      	bne.n	4009bc <ili9488_draw_filled_rectangle+0x68>
	}

	/* Send remaining pixels */
	ili9488_write_ram_buffer(g_ul_pixel_cache, (size % LCD_DATA_CACHE_SIZE) * LCD_DATA_COLOR_UNIT);
  4009ca:	490e      	ldr	r1, [pc, #56]	; (400a04 <ili9488_draw_filled_rectangle+0xb0>)
  4009cc:	fba1 3108 	umull	r3, r1, r1, r8
  4009d0:	0a09      	lsrs	r1, r1, #8
  4009d2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4009d6:	eba8 1181 	sub.w	r1, r8, r1, lsl #6
  4009da:	480b      	ldr	r0, [pc, #44]	; (400a08 <ili9488_draw_filled_rectangle+0xb4>)
  4009dc:	4b0b      	ldr	r3, [pc, #44]	; (400a0c <ili9488_draw_filled_rectangle+0xb8>)
  4009de:	4798      	blx	r3

	/* Reset the refresh window area */
	ili9488_set_window(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  4009e0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  4009e4:	f44f 72a0 	mov.w	r2, #320	; 0x140
  4009e8:	2100      	movs	r1, #0
  4009ea:	4608      	mov	r0, r1
  4009ec:	4c03      	ldr	r4, [pc, #12]	; (4009fc <ili9488_draw_filled_rectangle+0xa8>)
  4009ee:	47a0      	blx	r4

}
  4009f0:	b004      	add	sp, #16
  4009f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4009f6:	bf00      	nop
  4009f8:	0040055d 	.word	0x0040055d
  4009fc:	00400699 	.word	0x00400699
  400a00:	004005b5 	.word	0x004005b5
  400a04:	cccccccd 	.word	0xcccccccd
  400a08:	20400868 	.word	0x20400868
  400a0c:	00400621 	.word	0x00400621

00400a10 <ili9488_draw_line>:
{
  400a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400a14:	b083      	sub	sp, #12
  400a16:	4606      	mov	r6, r0
  400a18:	4688      	mov	r8, r1
	if ((ul_y1 == ul_y2) || (ul_x1 == ul_x2)) {
  400a1a:	4299      	cmp	r1, r3
  400a1c:	d02b      	beq.n	400a76 <ili9488_draw_line+0x66>
  400a1e:	4290      	cmp	r0, r2
  400a20:	d029      	beq.n	400a76 <ili9488_draw_line+0x66>
	x = ul_x1;
  400a22:	4681      	mov	r9, r0
	y = ul_y1;
  400a24:	460f      	mov	r7, r1
	dx = ul_x2 - ul_x1;
  400a26:	1a12      	subs	r2, r2, r0
	dy = ul_y2 - ul_y1;
  400a28:	1a5b      	subs	r3, r3, r1
	xinc = (dx > 0) ? 1 : -1;
  400a2a:	2a00      	cmp	r2, #0
  400a2c:	bfcc      	ite	gt
  400a2e:	2101      	movgt	r1, #1
  400a30:	f04f 31ff 	movle.w	r1, #4294967295
  400a34:	9100      	str	r1, [sp, #0]
	yinc = (dy > 0) ? 1 : -1;
  400a36:	2b00      	cmp	r3, #0
  400a38:	bfcc      	ite	gt
  400a3a:	2001      	movgt	r0, #1
  400a3c:	f04f 30ff 	movle.w	r0, #4294967295
  400a40:	9001      	str	r0, [sp, #4]
	dx = abs(ul_x2 - ul_x1);
  400a42:	ea82 75e2 	eor.w	r5, r2, r2, asr #31
  400a46:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
	dy = abs(ul_y2 - ul_y1);
  400a4a:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
  400a4e:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
	ili9488_draw_pixel(x, y);
  400a52:	4641      	mov	r1, r8
  400a54:	4630      	mov	r0, r6
  400a56:	4b21      	ldr	r3, [pc, #132]	; (400adc <ili9488_draw_line+0xcc>)
  400a58:	4798      	blx	r3
	if (dx > dy) {
  400a5a:	42a5      	cmp	r5, r4
  400a5c:	dd22      	ble.n	400aa4 <ili9488_draw_line+0x94>
		cumul = dx >> 1;
  400a5e:	ea4f 0865 	mov.w	r8, r5, asr #1
		for (i = 1; i <= dx; i++) {
  400a62:	2d00      	cmp	r5, #0
  400a64:	dd0b      	ble.n	400a7e <ili9488_draw_line+0x6e>
  400a66:	9900      	ldr	r1, [sp, #0]
  400a68:	4689      	mov	r9, r1
  400a6a:	440e      	add	r6, r1
  400a6c:	f04f 0a01 	mov.w	sl, #1
			ili9488_draw_pixel(x, y);
  400a70:	f8df b068 	ldr.w	fp, [pc, #104]	; 400adc <ili9488_draw_line+0xcc>
  400a74:	e00e      	b.n	400a94 <ili9488_draw_line+0x84>
		ili9488_draw_filled_rectangle(ul_x1, ul_y1, ul_x2, ul_y2);
  400a76:	4641      	mov	r1, r8
  400a78:	4630      	mov	r0, r6
  400a7a:	4c19      	ldr	r4, [pc, #100]	; (400ae0 <ili9488_draw_line+0xd0>)
  400a7c:	47a0      	blx	r4
}
  400a7e:	b003      	add	sp, #12
  400a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ili9488_draw_pixel(x, y);
  400a84:	4639      	mov	r1, r7
  400a86:	4630      	mov	r0, r6
  400a88:	47d8      	blx	fp
		for (i = 1; i <= dx; i++) {
  400a8a:	f10a 0a01 	add.w	sl, sl, #1
  400a8e:	444e      	add	r6, r9
  400a90:	4555      	cmp	r5, sl
  400a92:	dbf4      	blt.n	400a7e <ili9488_draw_line+0x6e>
			cumul += dy;
  400a94:	44a0      	add	r8, r4
			if (cumul >= dx) {
  400a96:	4545      	cmp	r5, r8
  400a98:	dcf4      	bgt.n	400a84 <ili9488_draw_line+0x74>
				cumul -= dx;
  400a9a:	eba8 0805 	sub.w	r8, r8, r5
				y += yinc;
  400a9e:	9b01      	ldr	r3, [sp, #4]
  400aa0:	441f      	add	r7, r3
  400aa2:	e7ef      	b.n	400a84 <ili9488_draw_line+0x74>
		cumul = dy >> 1;
  400aa4:	1067      	asrs	r7, r4, #1
		for (i = 1; i <= dy; i++) {
  400aa6:	2c00      	cmp	r4, #0
  400aa8:	dde9      	ble.n	400a7e <ili9488_draw_line+0x6e>
  400aaa:	9b01      	ldr	r3, [sp, #4]
  400aac:	469b      	mov	fp, r3
  400aae:	4443      	add	r3, r8
  400ab0:	461e      	mov	r6, r3
  400ab2:	f04f 0801 	mov.w	r8, #1
			ili9488_draw_pixel(x, y);
  400ab6:	f8df a024 	ldr.w	sl, [pc, #36]	; 400adc <ili9488_draw_line+0xcc>
  400aba:	e007      	b.n	400acc <ili9488_draw_line+0xbc>
  400abc:	4631      	mov	r1, r6
  400abe:	4648      	mov	r0, r9
  400ac0:	47d0      	blx	sl
		for (i = 1; i <= dy; i++) {
  400ac2:	f108 0801 	add.w	r8, r8, #1
  400ac6:	445e      	add	r6, fp
  400ac8:	4544      	cmp	r4, r8
  400aca:	dbd8      	blt.n	400a7e <ili9488_draw_line+0x6e>
			cumul += dx;
  400acc:	442f      	add	r7, r5
			if (cumul >= dy) {
  400ace:	42bc      	cmp	r4, r7
  400ad0:	dcf4      	bgt.n	400abc <ili9488_draw_line+0xac>
				cumul -= dy;
  400ad2:	1b3f      	subs	r7, r7, r4
				x += xinc;
  400ad4:	9b00      	ldr	r3, [sp, #0]
  400ad6:	4499      	add	r9, r3
  400ad8:	e7f0      	b.n	400abc <ili9488_draw_line+0xac>
  400ada:	bf00      	nop
  400adc:	00400919 	.word	0x00400919
  400ae0:	00400955 	.word	0x00400955

00400ae4 <ili9488_draw_circle>:
{
	int32_t   d;    /* Decision Variable */
	uint32_t  curX; /* Current X Value */
	uint32_t  curY; /* Current Y Value */

	if (ul_r == 0) {
  400ae4:	2a00      	cmp	r2, #0
  400ae6:	d049      	beq.n	400b7c <ili9488_draw_circle+0x98>
{
  400ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400aec:	b083      	sub	sp, #12
  400aee:	4680      	mov	r8, r0
  400af0:	4689      	mov	r9, r1
  400af2:	4616      	mov	r6, r2
		return 1;
	}

	d = 3 - (ul_r << 1);
  400af4:	0057      	lsls	r7, r2, #1
  400af6:	f1c7 0703 	rsb	r7, r7, #3
	curX = 0;
  400afa:	2500      	movs	r5, #0
	curY = ul_r;

	while (curX <= curY) {
		ili9488_draw_pixel(ul_x + curX, ul_y + curY);
  400afc:	4c20      	ldr	r4, [pc, #128]	; (400b80 <ili9488_draw_circle+0x9c>)
  400afe:	e005      	b.n	400b0c <ili9488_draw_circle+0x28>
		ili9488_draw_pixel(ul_x + curY, ul_y - curX);
		ili9488_draw_pixel(ul_x - curY, ul_y + curX);
		ili9488_draw_pixel(ul_x - curY, ul_y - curX);

		if (d < 0) {
			d += (curX << 2) + 6;
  400b00:	3706      	adds	r7, #6
  400b02:	eb07 0785 	add.w	r7, r7, r5, lsl #2
		} else {
			d += ((curX - curY) << 2) + 10;
			curY--;
		}
		curX++;
  400b06:	3501      	adds	r5, #1
	while (curX <= curY) {
  400b08:	42ae      	cmp	r6, r5
  400b0a:	d333      	bcc.n	400b74 <ili9488_draw_circle+0x90>
		ili9488_draw_pixel(ul_x + curX, ul_y + curY);
  400b0c:	eb08 0305 	add.w	r3, r8, r5
  400b10:	eb09 0b06 	add.w	fp, r9, r6
  400b14:	4659      	mov	r1, fp
  400b16:	9301      	str	r3, [sp, #4]
  400b18:	4618      	mov	r0, r3
  400b1a:	47a0      	blx	r4
		ili9488_draw_pixel(ul_x + curX, ul_y - curY);
  400b1c:	eba9 0a06 	sub.w	sl, r9, r6
  400b20:	4651      	mov	r1, sl
  400b22:	9801      	ldr	r0, [sp, #4]
  400b24:	47a0      	blx	r4
		ili9488_draw_pixel(ul_x - curX, ul_y + curY);
  400b26:	eba8 0305 	sub.w	r3, r8, r5
  400b2a:	4659      	mov	r1, fp
  400b2c:	469b      	mov	fp, r3
  400b2e:	4618      	mov	r0, r3
  400b30:	47a0      	blx	r4
		ili9488_draw_pixel(ul_x - curX, ul_y - curY);
  400b32:	4651      	mov	r1, sl
  400b34:	4658      	mov	r0, fp
  400b36:	47a0      	blx	r4
		ili9488_draw_pixel(ul_x + curY, ul_y + curX);
  400b38:	eb08 0306 	add.w	r3, r8, r6
  400b3c:	eb09 0b05 	add.w	fp, r9, r5
  400b40:	4659      	mov	r1, fp
  400b42:	9301      	str	r3, [sp, #4]
  400b44:	4618      	mov	r0, r3
  400b46:	47a0      	blx	r4
		ili9488_draw_pixel(ul_x + curY, ul_y - curX);
  400b48:	eba9 0a05 	sub.w	sl, r9, r5
  400b4c:	4651      	mov	r1, sl
  400b4e:	9801      	ldr	r0, [sp, #4]
  400b50:	47a0      	blx	r4
		ili9488_draw_pixel(ul_x - curY, ul_y + curX);
  400b52:	eba8 0306 	sub.w	r3, r8, r6
  400b56:	4659      	mov	r1, fp
  400b58:	469b      	mov	fp, r3
  400b5a:	4618      	mov	r0, r3
  400b5c:	47a0      	blx	r4
		ili9488_draw_pixel(ul_x - curY, ul_y - curX);
  400b5e:	4651      	mov	r1, sl
  400b60:	4658      	mov	r0, fp
  400b62:	47a0      	blx	r4
		if (d < 0) {
  400b64:	2f00      	cmp	r7, #0
  400b66:	dbcb      	blt.n	400b00 <ili9488_draw_circle+0x1c>
			d += ((curX - curY) << 2) + 10;
  400b68:	1bab      	subs	r3, r5, r6
  400b6a:	370a      	adds	r7, #10
  400b6c:	eb07 0783 	add.w	r7, r7, r3, lsl #2
			curY--;
  400b70:	3e01      	subs	r6, #1
  400b72:	e7c8      	b.n	400b06 <ili9488_draw_circle+0x22>
	}

	return 0;
  400b74:	2000      	movs	r0, #0
}
  400b76:	b003      	add	sp, #12
  400b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 1;
  400b7c:	2001      	movs	r0, #1
  400b7e:	4770      	bx	lr
  400b80:	00400919 	.word	0x00400919

00400b84 <ili9488_draw_string>:
 * \param ul_x X coordinate of string top-left corner.
 * \param ul_y Y coordinate of string top-left corner.
 * \param p_str String to display.
 */
void ili9488_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
  400b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400b88:	b085      	sub	sp, #20
  400b8a:	9003      	str	r0, [sp, #12]
  400b8c:	9202      	str	r2, [sp, #8]
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  400b8e:	7813      	ldrb	r3, [r2, #0]
  400b90:	2b00      	cmp	r3, #0
  400b92:	d048      	beq.n	400c26 <ili9488_draw_string+0xa2>
  400b94:	468b      	mov	fp, r1
  400b96:	9001      	str	r0, [sp, #4]
				ili9488_draw_pixel(ul_x + col, ul_y + row);
  400b98:	f8df 8094 	ldr.w	r8, [pc, #148]	; 400c30 <ili9488_draw_string+0xac>
  400b9c:	e033      	b.n	400c06 <ili9488_draw_string+0x82>
		/* If newline, jump to the next line (font height + 2) */
		if (*p_str == '\n') {
			ul_y += gfont.height + 2;
  400b9e:	f10b 0b10 	add.w	fp, fp, #16
			ul_x = xorg;
  400ba2:	9b03      	ldr	r3, [sp, #12]
  400ba4:	9301      	str	r3, [sp, #4]
  400ba6:	e029      	b.n	400bfc <ili9488_draw_string+0x78>
  400ba8:	3c01      	subs	r4, #1
		for (row = 0; row < 8; row++) {
  400baa:	f1b4 3fff 	cmp.w	r4, #4294967295
  400bae:	d009      	beq.n	400bc4 <ili9488_draw_string+0x40>
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
  400bb0:	782b      	ldrb	r3, [r5, #0]
  400bb2:	4123      	asrs	r3, r4
  400bb4:	f013 0f01 	tst.w	r3, #1
  400bb8:	d0f6      	beq.n	400ba8 <ili9488_draw_string+0x24>
				ili9488_draw_pixel(ul_x + col, ul_y + row);
  400bba:	ebaa 0104 	sub.w	r1, sl, r4
  400bbe:	4630      	mov	r0, r6
  400bc0:	47c0      	blx	r8
  400bc2:	e7f1      	b.n	400ba8 <ili9488_draw_string+0x24>
		for (row = 0; row < 8; row++) {
  400bc4:	2407      	movs	r4, #7
				ili9488_draw_pixel(ul_x + col, ul_y + row + 8);
  400bc6:	f10b 090f 	add.w	r9, fp, #15
  400bca:	e002      	b.n	400bd2 <ili9488_draw_string+0x4e>
  400bcc:	3c01      	subs	r4, #1
		for (row = 0; row < 6; row++) {
  400bce:	2c01      	cmp	r4, #1
  400bd0:	d009      	beq.n	400be6 <ili9488_draw_string+0x62>
			if ((p_uc_charset10x14[offset1] >> (7 - row)) & 0x1) {
  400bd2:	787b      	ldrb	r3, [r7, #1]
  400bd4:	4123      	asrs	r3, r4
  400bd6:	f013 0f01 	tst.w	r3, #1
  400bda:	d0f7      	beq.n	400bcc <ili9488_draw_string+0x48>
				ili9488_draw_pixel(ul_x + col, ul_y + row + 8);
  400bdc:	eba9 0104 	sub.w	r1, r9, r4
  400be0:	4630      	mov	r0, r6
  400be2:	47c0      	blx	r8
  400be4:	e7f2      	b.n	400bcc <ili9488_draw_string+0x48>
  400be6:	3502      	adds	r5, #2
  400be8:	3601      	adds	r6, #1
	for (col = 0; col < 10; col++) {
  400bea:	9b00      	ldr	r3, [sp, #0]
  400bec:	42b3      	cmp	r3, r6
  400bee:	d002      	beq.n	400bf6 <ili9488_draw_string+0x72>
	offset = ((uint32_t)uc_c - 0x20) * 20;
  400bf0:	2407      	movs	r4, #7
  400bf2:	462f      	mov	r7, r5
  400bf4:	e7dc      	b.n	400bb0 <ili9488_draw_string+0x2c>
		} else {
			/* Draw the character and place cursor right after (font width + 2) */
			ili9488_draw_char(ul_x, ul_y, *p_str);
			ul_x += gfont.width + 2;
  400bf6:	9b01      	ldr	r3, [sp, #4]
  400bf8:	330c      	adds	r3, #12
  400bfa:	9301      	str	r3, [sp, #4]
	while (*p_str != 0) {
  400bfc:	9a02      	ldr	r2, [sp, #8]
  400bfe:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  400c02:	9202      	str	r2, [sp, #8]
  400c04:	b17b      	cbz	r3, 400c26 <ili9488_draw_string+0xa2>
		if (*p_str == '\n') {
  400c06:	2b0a      	cmp	r3, #10
  400c08:	d0c9      	beq.n	400b9e <ili9488_draw_string+0x1a>
	offset = ((uint32_t)uc_c - 0x20) * 20;
  400c0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400c0e:	4d07      	ldr	r5, [pc, #28]	; (400c2c <ili9488_draw_string+0xa8>)
  400c10:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  400c14:	f5a3 7520 	sub.w	r5, r3, #640	; 0x280
  400c18:	9e01      	ldr	r6, [sp, #4]
  400c1a:	4633      	mov	r3, r6
  400c1c:	330a      	adds	r3, #10
  400c1e:	9300      	str	r3, [sp, #0]
				ili9488_draw_pixel(ul_x + col, ul_y + row);
  400c20:	f10b 0a07 	add.w	sl, fp, #7
  400c24:	e7e4      	b.n	400bf0 <ili9488_draw_string+0x6c>
		}
		p_str++;
	}
}
  400c26:	b005      	add	sp, #20
  400c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400c2c:	00403460 	.word	0x00403460
  400c30:	00400919 	.word	0x00400919

00400c34 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
  400c34:	0109      	lsls	r1, r1, #4
  400c36:	5042      	str	r2, [r0, r1]
  400c38:	4770      	bx	lr

00400c3a <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
  400c3a:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  400c3e:	604a      	str	r2, [r1, #4]
  400c40:	4770      	bx	lr

00400c42 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
  400c42:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  400c46:	608a      	str	r2, [r1, #8]
  400c48:	4770      	bx	lr

00400c4a <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
  400c4a:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  400c4e:	60ca      	str	r2, [r1, #12]
  400c50:	4770      	bx	lr
	...

00400c54 <mpu_enable>:
 *
 * \param dwMPUEnable  Enable/Disable the memory region.
 */
void mpu_enable(uint32_t dw_mpu_enable)
{
	MPU->CTRL = dw_mpu_enable ;
  400c54:	4b01      	ldr	r3, [pc, #4]	; (400c5c <mpu_enable+0x8>)
  400c56:	6058      	str	r0, [r3, #4]
  400c58:	4770      	bx	lr
  400c5a:	bf00      	nop
  400c5c:	e000ed90 	.word	0xe000ed90

00400c60 <mpu_set_region>:
 * \param dwRegionBaseAddr  Memory region base address.
 * \param dwRegionAttr  Memory region attributes.
 */
void mpu_set_region(uint32_t dw_region_base_addr, uint32_t dw_region_attr)
{
	MPU->RBAR = dw_region_base_addr;
  400c60:	4b01      	ldr	r3, [pc, #4]	; (400c68 <mpu_set_region+0x8>)
  400c62:	60d8      	str	r0, [r3, #12]
	MPU->RASR = dw_region_attr;
  400c64:	6119      	str	r1, [r3, #16]
  400c66:	4770      	bx	lr
  400c68:	e000ed90 	.word	0xe000ed90

00400c6c <mpu_cal_mpu_region_size>:
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;

	while( dwReturnValue < 31 ) {
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  400c6c:	2820      	cmp	r0, #32
  400c6e:	d909      	bls.n	400c84 <mpu_cal_mpu_region_size+0x18>
  400c70:	2304      	movs	r3, #4
  400c72:	2220      	movs	r2, #32
			break;
		} else {
			dwReturnValue++;
  400c74:	3301      	adds	r3, #1
		}
		dwRegionSize <<= 1;
  400c76:	0052      	lsls	r2, r2, #1
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  400c78:	4290      	cmp	r0, r2
  400c7a:	d901      	bls.n	400c80 <mpu_cal_mpu_region_size+0x14>
  400c7c:	2b1e      	cmp	r3, #30
  400c7e:	d9f9      	bls.n	400c74 <mpu_cal_mpu_region_size+0x8>
	}

	return ( dwReturnValue << 1 );
}
  400c80:	0058      	lsls	r0, r3, #1
  400c82:	4770      	bx	lr
	uint32_t dwReturnValue = 4;
  400c84:	2304      	movs	r3, #4
  400c86:	e7fb      	b.n	400c80 <mpu_cal_mpu_region_size+0x14>

00400c88 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400c88:	6301      	str	r1, [r0, #48]	; 0x30
  400c8a:	4770      	bx	lr

00400c8c <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400c8c:	6341      	str	r1, [r0, #52]	; 0x34
  400c8e:	4770      	bx	lr

00400c90 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400c90:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400c92:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400c96:	d03a      	beq.n	400d0e <pio_set_peripheral+0x7e>
  400c98:	d813      	bhi.n	400cc2 <pio_set_peripheral+0x32>
  400c9a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400c9e:	d025      	beq.n	400cec <pio_set_peripheral+0x5c>
  400ca0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400ca4:	d10a      	bne.n	400cbc <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400ca6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400ca8:	4313      	orrs	r3, r2
  400caa:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400cac:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400cae:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400cb0:	400b      	ands	r3, r1
  400cb2:	ea23 0302 	bic.w	r3, r3, r2
  400cb6:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400cb8:	6042      	str	r2, [r0, #4]
  400cba:	4770      	bx	lr
	switch (ul_type) {
  400cbc:	2900      	cmp	r1, #0
  400cbe:	d1fb      	bne.n	400cb8 <pio_set_peripheral+0x28>
  400cc0:	4770      	bx	lr
  400cc2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400cc6:	d021      	beq.n	400d0c <pio_set_peripheral+0x7c>
  400cc8:	d809      	bhi.n	400cde <pio_set_peripheral+0x4e>
  400cca:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400cce:	d1f3      	bne.n	400cb8 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400cd0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400cd2:	4313      	orrs	r3, r2
  400cd4:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400cd6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400cd8:	4313      	orrs	r3, r2
  400cda:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400cdc:	e7ec      	b.n	400cb8 <pio_set_peripheral+0x28>
	switch (ul_type) {
  400cde:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400ce2:	d013      	beq.n	400d0c <pio_set_peripheral+0x7c>
  400ce4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400ce8:	d010      	beq.n	400d0c <pio_set_peripheral+0x7c>
  400cea:	e7e5      	b.n	400cb8 <pio_set_peripheral+0x28>
{
  400cec:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400cee:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400cf0:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400cf2:	43d3      	mvns	r3, r2
  400cf4:	4021      	ands	r1, r4
  400cf6:	461c      	mov	r4, r3
  400cf8:	4019      	ands	r1, r3
  400cfa:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400cfc:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400cfe:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400d00:	400b      	ands	r3, r1
  400d02:	4023      	ands	r3, r4
  400d04:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400d06:	6042      	str	r2, [r0, #4]
}
  400d08:	f85d 4b04 	ldr.w	r4, [sp], #4
  400d0c:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d0e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400d10:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400d12:	400b      	ands	r3, r1
  400d14:	ea23 0302 	bic.w	r3, r3, r2
  400d18:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400d1a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400d1c:	4313      	orrs	r3, r2
  400d1e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400d20:	e7ca      	b.n	400cb8 <pio_set_peripheral+0x28>

00400d22 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400d22:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400d24:	f012 0f01 	tst.w	r2, #1
  400d28:	d10d      	bne.n	400d46 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400d2a:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400d2c:	f012 0f0a 	tst.w	r2, #10
  400d30:	d00b      	beq.n	400d4a <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400d32:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400d34:	f012 0f02 	tst.w	r2, #2
  400d38:	d109      	bne.n	400d4e <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400d3a:	f012 0f08 	tst.w	r2, #8
  400d3e:	d008      	beq.n	400d52 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400d40:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400d44:	e005      	b.n	400d52 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400d46:	6641      	str	r1, [r0, #100]	; 0x64
  400d48:	e7f0      	b.n	400d2c <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400d4a:	6241      	str	r1, [r0, #36]	; 0x24
  400d4c:	e7f2      	b.n	400d34 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400d4e:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400d52:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400d54:	6001      	str	r1, [r0, #0]
  400d56:	4770      	bx	lr

00400d58 <pio_set_output>:
{
  400d58:	b410      	push	{r4}
  400d5a:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400d5c:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400d5e:	b94c      	cbnz	r4, 400d74 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400d60:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400d62:	b14b      	cbz	r3, 400d78 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400d64:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400d66:	b94a      	cbnz	r2, 400d7c <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400d68:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400d6a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400d6c:	6001      	str	r1, [r0, #0]
}
  400d6e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400d72:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400d74:	6641      	str	r1, [r0, #100]	; 0x64
  400d76:	e7f4      	b.n	400d62 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400d78:	6541      	str	r1, [r0, #84]	; 0x54
  400d7a:	e7f4      	b.n	400d66 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400d7c:	6301      	str	r1, [r0, #48]	; 0x30
  400d7e:	e7f4      	b.n	400d6a <pio_set_output+0x12>

00400d80 <pio_configure>:
{
  400d80:	b570      	push	{r4, r5, r6, lr}
  400d82:	b082      	sub	sp, #8
  400d84:	4605      	mov	r5, r0
  400d86:	4616      	mov	r6, r2
  400d88:	461c      	mov	r4, r3
	switch (ul_type) {
  400d8a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400d8e:	d014      	beq.n	400dba <pio_configure+0x3a>
  400d90:	d90a      	bls.n	400da8 <pio_configure+0x28>
  400d92:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400d96:	d024      	beq.n	400de2 <pio_configure+0x62>
  400d98:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400d9c:	d021      	beq.n	400de2 <pio_configure+0x62>
  400d9e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400da2:	d017      	beq.n	400dd4 <pio_configure+0x54>
		return 0;
  400da4:	2000      	movs	r0, #0
  400da6:	e01a      	b.n	400dde <pio_configure+0x5e>
	switch (ul_type) {
  400da8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400dac:	d005      	beq.n	400dba <pio_configure+0x3a>
  400dae:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400db2:	d002      	beq.n	400dba <pio_configure+0x3a>
  400db4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400db8:	d1f4      	bne.n	400da4 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400dba:	4632      	mov	r2, r6
  400dbc:	4628      	mov	r0, r5
  400dbe:	4b11      	ldr	r3, [pc, #68]	; (400e04 <pio_configure+0x84>)
  400dc0:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400dc2:	f014 0f01 	tst.w	r4, #1
  400dc6:	d102      	bne.n	400dce <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400dc8:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  400dca:	2001      	movs	r0, #1
  400dcc:	e007      	b.n	400dde <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400dce:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400dd0:	2001      	movs	r0, #1
  400dd2:	e004      	b.n	400dde <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400dd4:	461a      	mov	r2, r3
  400dd6:	4631      	mov	r1, r6
  400dd8:	4b0b      	ldr	r3, [pc, #44]	; (400e08 <pio_configure+0x88>)
  400dda:	4798      	blx	r3
	return 1;
  400ddc:	2001      	movs	r0, #1
}
  400dde:	b002      	add	sp, #8
  400de0:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400de2:	f004 0301 	and.w	r3, r4, #1
  400de6:	9300      	str	r3, [sp, #0]
  400de8:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400dec:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400df0:	bf14      	ite	ne
  400df2:	2200      	movne	r2, #0
  400df4:	2201      	moveq	r2, #1
  400df6:	4631      	mov	r1, r6
  400df8:	4628      	mov	r0, r5
  400dfa:	4c04      	ldr	r4, [pc, #16]	; (400e0c <pio_configure+0x8c>)
  400dfc:	47a0      	blx	r4
	return 1;
  400dfe:	2001      	movs	r0, #1
		break;
  400e00:	e7ed      	b.n	400dde <pio_configure+0x5e>
  400e02:	bf00      	nop
  400e04:	00400c91 	.word	0x00400c91
  400e08:	00400d23 	.word	0x00400d23
  400e0c:	00400d59 	.word	0x00400d59

00400e10 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400e10:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400e12:	4770      	bx	lr

00400e14 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400e14:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400e16:	4770      	bx	lr

00400e18 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400e1c:	4604      	mov	r4, r0
  400e1e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400e20:	4b0e      	ldr	r3, [pc, #56]	; (400e5c <pio_handler_process+0x44>)
  400e22:	4798      	blx	r3
  400e24:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400e26:	4620      	mov	r0, r4
  400e28:	4b0d      	ldr	r3, [pc, #52]	; (400e60 <pio_handler_process+0x48>)
  400e2a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400e2c:	4005      	ands	r5, r0
  400e2e:	d013      	beq.n	400e58 <pio_handler_process+0x40>
  400e30:	4c0c      	ldr	r4, [pc, #48]	; (400e64 <pio_handler_process+0x4c>)
  400e32:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400e36:	e003      	b.n	400e40 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400e38:	42b4      	cmp	r4, r6
  400e3a:	d00d      	beq.n	400e58 <pio_handler_process+0x40>
  400e3c:	3410      	adds	r4, #16
		while (status != 0) {
  400e3e:	b15d      	cbz	r5, 400e58 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400e40:	6820      	ldr	r0, [r4, #0]
  400e42:	4540      	cmp	r0, r8
  400e44:	d1f8      	bne.n	400e38 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400e46:	6861      	ldr	r1, [r4, #4]
  400e48:	4229      	tst	r1, r5
  400e4a:	d0f5      	beq.n	400e38 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400e4c:	68e3      	ldr	r3, [r4, #12]
  400e4e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400e50:	6863      	ldr	r3, [r4, #4]
  400e52:	ea25 0503 	bic.w	r5, r5, r3
  400e56:	e7ef      	b.n	400e38 <pio_handler_process+0x20>
  400e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400e5c:	00400e11 	.word	0x00400e11
  400e60:	00400e15 	.word	0x00400e15
  400e64:	20400ae8 	.word	0x20400ae8

00400e68 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400e68:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400e6a:	210a      	movs	r1, #10
  400e6c:	4801      	ldr	r0, [pc, #4]	; (400e74 <PIOA_Handler+0xc>)
  400e6e:	4b02      	ldr	r3, [pc, #8]	; (400e78 <PIOA_Handler+0x10>)
  400e70:	4798      	blx	r3
  400e72:	bd08      	pop	{r3, pc}
  400e74:	400e0e00 	.word	0x400e0e00
  400e78:	00400e19 	.word	0x00400e19

00400e7c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400e7c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400e7e:	210b      	movs	r1, #11
  400e80:	4801      	ldr	r0, [pc, #4]	; (400e88 <PIOB_Handler+0xc>)
  400e82:	4b02      	ldr	r3, [pc, #8]	; (400e8c <PIOB_Handler+0x10>)
  400e84:	4798      	blx	r3
  400e86:	bd08      	pop	{r3, pc}
  400e88:	400e1000 	.word	0x400e1000
  400e8c:	00400e19 	.word	0x00400e19

00400e90 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400e90:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400e92:	210c      	movs	r1, #12
  400e94:	4801      	ldr	r0, [pc, #4]	; (400e9c <PIOC_Handler+0xc>)
  400e96:	4b02      	ldr	r3, [pc, #8]	; (400ea0 <PIOC_Handler+0x10>)
  400e98:	4798      	blx	r3
  400e9a:	bd08      	pop	{r3, pc}
  400e9c:	400e1200 	.word	0x400e1200
  400ea0:	00400e19 	.word	0x00400e19

00400ea4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400ea4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400ea6:	2110      	movs	r1, #16
  400ea8:	4801      	ldr	r0, [pc, #4]	; (400eb0 <PIOD_Handler+0xc>)
  400eaa:	4b02      	ldr	r3, [pc, #8]	; (400eb4 <PIOD_Handler+0x10>)
  400eac:	4798      	blx	r3
  400eae:	bd08      	pop	{r3, pc}
  400eb0:	400e1400 	.word	0x400e1400
  400eb4:	00400e19 	.word	0x00400e19

00400eb8 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400eb8:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400eba:	2111      	movs	r1, #17
  400ebc:	4801      	ldr	r0, [pc, #4]	; (400ec4 <PIOE_Handler+0xc>)
  400ebe:	4b02      	ldr	r3, [pc, #8]	; (400ec8 <PIOE_Handler+0x10>)
  400ec0:	4798      	blx	r3
  400ec2:	bd08      	pop	{r3, pc}
  400ec4:	400e1600 	.word	0x400e1600
  400ec8:	00400e19 	.word	0x00400e19

00400ecc <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400ecc:	2803      	cmp	r0, #3
  400ece:	d011      	beq.n	400ef4 <pmc_mck_set_division+0x28>
  400ed0:	2804      	cmp	r0, #4
  400ed2:	d012      	beq.n	400efa <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400ed4:	2802      	cmp	r0, #2
  400ed6:	bf0c      	ite	eq
  400ed8:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400edc:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400ede:	4a08      	ldr	r2, [pc, #32]	; (400f00 <pmc_mck_set_division+0x34>)
  400ee0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400ee6:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400ee8:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400eea:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400eec:	f013 0f08 	tst.w	r3, #8
  400ef0:	d0fb      	beq.n	400eea <pmc_mck_set_division+0x1e>
}
  400ef2:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400ef4:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400ef8:	e7f1      	b.n	400ede <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400efa:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400efe:	e7ee      	b.n	400ede <pmc_mck_set_division+0x12>
  400f00:	400e0600 	.word	0x400e0600

00400f04 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400f04:	4a17      	ldr	r2, [pc, #92]	; (400f64 <pmc_switch_mck_to_pllack+0x60>)
  400f06:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400f0c:	4318      	orrs	r0, r3
  400f0e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400f10:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f12:	f013 0f08 	tst.w	r3, #8
  400f16:	d10a      	bne.n	400f2e <pmc_switch_mck_to_pllack+0x2a>
  400f18:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400f1c:	4911      	ldr	r1, [pc, #68]	; (400f64 <pmc_switch_mck_to_pllack+0x60>)
  400f1e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400f20:	f012 0f08 	tst.w	r2, #8
  400f24:	d103      	bne.n	400f2e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400f26:	3b01      	subs	r3, #1
  400f28:	d1f9      	bne.n	400f1e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400f2a:	2001      	movs	r0, #1
  400f2c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400f2e:	4a0d      	ldr	r2, [pc, #52]	; (400f64 <pmc_switch_mck_to_pllack+0x60>)
  400f30:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f32:	f023 0303 	bic.w	r3, r3, #3
  400f36:	f043 0302 	orr.w	r3, r3, #2
  400f3a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400f3c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f3e:	f013 0f08 	tst.w	r3, #8
  400f42:	d10a      	bne.n	400f5a <pmc_switch_mck_to_pllack+0x56>
  400f44:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400f48:	4906      	ldr	r1, [pc, #24]	; (400f64 <pmc_switch_mck_to_pllack+0x60>)
  400f4a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400f4c:	f012 0f08 	tst.w	r2, #8
  400f50:	d105      	bne.n	400f5e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400f52:	3b01      	subs	r3, #1
  400f54:	d1f9      	bne.n	400f4a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400f56:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400f58:	4770      	bx	lr
	return 0;
  400f5a:	2000      	movs	r0, #0
  400f5c:	4770      	bx	lr
  400f5e:	2000      	movs	r0, #0
  400f60:	4770      	bx	lr
  400f62:	bf00      	nop
  400f64:	400e0600 	.word	0x400e0600

00400f68 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400f68:	b9a0      	cbnz	r0, 400f94 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400f6a:	480e      	ldr	r0, [pc, #56]	; (400fa4 <pmc_switch_mainck_to_xtal+0x3c>)
  400f6c:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400f6e:	0209      	lsls	r1, r1, #8
  400f70:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400f72:	4a0d      	ldr	r2, [pc, #52]	; (400fa8 <pmc_switch_mainck_to_xtal+0x40>)
  400f74:	401a      	ands	r2, r3
  400f76:	4b0d      	ldr	r3, [pc, #52]	; (400fac <pmc_switch_mainck_to_xtal+0x44>)
  400f78:	4313      	orrs	r3, r2
  400f7a:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400f7c:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400f7e:	4602      	mov	r2, r0
  400f80:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f82:	f013 0f01 	tst.w	r3, #1
  400f86:	d0fb      	beq.n	400f80 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400f88:	4a06      	ldr	r2, [pc, #24]	; (400fa4 <pmc_switch_mainck_to_xtal+0x3c>)
  400f8a:	6a11      	ldr	r1, [r2, #32]
  400f8c:	4b08      	ldr	r3, [pc, #32]	; (400fb0 <pmc_switch_mainck_to_xtal+0x48>)
  400f8e:	430b      	orrs	r3, r1
  400f90:	6213      	str	r3, [r2, #32]
  400f92:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400f94:	4903      	ldr	r1, [pc, #12]	; (400fa4 <pmc_switch_mainck_to_xtal+0x3c>)
  400f96:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400f98:	4a06      	ldr	r2, [pc, #24]	; (400fb4 <pmc_switch_mainck_to_xtal+0x4c>)
  400f9a:	401a      	ands	r2, r3
  400f9c:	4b06      	ldr	r3, [pc, #24]	; (400fb8 <pmc_switch_mainck_to_xtal+0x50>)
  400f9e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400fa0:	620b      	str	r3, [r1, #32]
  400fa2:	4770      	bx	lr
  400fa4:	400e0600 	.word	0x400e0600
  400fa8:	ffc8fffc 	.word	0xffc8fffc
  400fac:	00370001 	.word	0x00370001
  400fb0:	01370000 	.word	0x01370000
  400fb4:	fec8fffc 	.word	0xfec8fffc
  400fb8:	01370002 	.word	0x01370002

00400fbc <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400fbc:	4b02      	ldr	r3, [pc, #8]	; (400fc8 <pmc_osc_is_ready_mainck+0xc>)
  400fbe:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400fc0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400fc4:	4770      	bx	lr
  400fc6:	bf00      	nop
  400fc8:	400e0600 	.word	0x400e0600

00400fcc <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400fcc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400fd0:	4b01      	ldr	r3, [pc, #4]	; (400fd8 <pmc_disable_pllack+0xc>)
  400fd2:	629a      	str	r2, [r3, #40]	; 0x28
  400fd4:	4770      	bx	lr
  400fd6:	bf00      	nop
  400fd8:	400e0600 	.word	0x400e0600

00400fdc <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400fdc:	4b02      	ldr	r3, [pc, #8]	; (400fe8 <pmc_is_locked_pllack+0xc>)
  400fde:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400fe0:	f000 0002 	and.w	r0, r0, #2
  400fe4:	4770      	bx	lr
  400fe6:	bf00      	nop
  400fe8:	400e0600 	.word	0x400e0600

00400fec <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400fec:	283f      	cmp	r0, #63	; 0x3f
  400fee:	d81e      	bhi.n	40102e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400ff0:	281f      	cmp	r0, #31
  400ff2:	d80c      	bhi.n	40100e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400ff4:	4b11      	ldr	r3, [pc, #68]	; (40103c <pmc_enable_periph_clk+0x50>)
  400ff6:	699a      	ldr	r2, [r3, #24]
  400ff8:	2301      	movs	r3, #1
  400ffa:	4083      	lsls	r3, r0
  400ffc:	4393      	bics	r3, r2
  400ffe:	d018      	beq.n	401032 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401000:	2301      	movs	r3, #1
  401002:	fa03 f000 	lsl.w	r0, r3, r0
  401006:	4b0d      	ldr	r3, [pc, #52]	; (40103c <pmc_enable_periph_clk+0x50>)
  401008:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40100a:	2000      	movs	r0, #0
  40100c:	4770      	bx	lr
		ul_id -= 32;
  40100e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401010:	4b0a      	ldr	r3, [pc, #40]	; (40103c <pmc_enable_periph_clk+0x50>)
  401012:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401016:	2301      	movs	r3, #1
  401018:	4083      	lsls	r3, r0
  40101a:	4393      	bics	r3, r2
  40101c:	d00b      	beq.n	401036 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40101e:	2301      	movs	r3, #1
  401020:	fa03 f000 	lsl.w	r0, r3, r0
  401024:	4b05      	ldr	r3, [pc, #20]	; (40103c <pmc_enable_periph_clk+0x50>)
  401026:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40102a:	2000      	movs	r0, #0
  40102c:	4770      	bx	lr
		return 1;
  40102e:	2001      	movs	r0, #1
  401030:	4770      	bx	lr
	return 0;
  401032:	2000      	movs	r0, #0
  401034:	4770      	bx	lr
  401036:	2000      	movs	r0, #0
}
  401038:	4770      	bx	lr
  40103a:	bf00      	nop
  40103c:	400e0600 	.word	0x400e0600

00401040 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401040:	6943      	ldr	r3, [r0, #20]
  401042:	f013 0f02 	tst.w	r3, #2
  401046:	d002      	beq.n	40104e <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401048:	61c1      	str	r1, [r0, #28]
	return 0;
  40104a:	2000      	movs	r0, #0
  40104c:	4770      	bx	lr
		return 1;
  40104e:	2001      	movs	r0, #1
}
  401050:	4770      	bx	lr

00401052 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401052:	6943      	ldr	r3, [r0, #20]
  401054:	f013 0f01 	tst.w	r3, #1
  401058:	d003      	beq.n	401062 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40105a:	6983      	ldr	r3, [r0, #24]
  40105c:	700b      	strb	r3, [r1, #0]
	return 0;
  40105e:	2000      	movs	r0, #0
  401060:	4770      	bx	lr
		return 1;
  401062:	2001      	movs	r0, #1
}
  401064:	4770      	bx	lr

00401066 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401066:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401068:	010b      	lsls	r3, r1, #4
  40106a:	4293      	cmp	r3, r2
  40106c:	d914      	bls.n	401098 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40106e:	00c9      	lsls	r1, r1, #3
  401070:	084b      	lsrs	r3, r1, #1
  401072:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  401076:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  40107a:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40107c:	1e5c      	subs	r4, r3, #1
  40107e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401082:	428c      	cmp	r4, r1
  401084:	d901      	bls.n	40108a <usart_set_async_baudrate+0x24>
		return 1;
  401086:	2001      	movs	r0, #1
  401088:	e017      	b.n	4010ba <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  40108a:	6841      	ldr	r1, [r0, #4]
  40108c:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401090:	6041      	str	r1, [r0, #4]
  401092:	e00c      	b.n	4010ae <usart_set_async_baudrate+0x48>
		return 1;
  401094:	2001      	movs	r0, #1
  401096:	e010      	b.n	4010ba <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401098:	0859      	lsrs	r1, r3, #1
  40109a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  40109e:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4010a2:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4010a4:	1e5c      	subs	r4, r3, #1
  4010a6:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4010aa:	428c      	cmp	r4, r1
  4010ac:	d8f2      	bhi.n	401094 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4010ae:	0412      	lsls	r2, r2, #16
  4010b0:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4010b4:	431a      	orrs	r2, r3
  4010b6:	6202      	str	r2, [r0, #32]

	return 0;
  4010b8:	2000      	movs	r0, #0
}
  4010ba:	f85d 4b04 	ldr.w	r4, [sp], #4
  4010be:	4770      	bx	lr

004010c0 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4010c0:	4b08      	ldr	r3, [pc, #32]	; (4010e4 <usart_reset+0x24>)
  4010c2:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  4010c6:	2300      	movs	r3, #0
  4010c8:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  4010ca:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4010cc:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4010ce:	2388      	movs	r3, #136	; 0x88
  4010d0:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4010d2:	2324      	movs	r3, #36	; 0x24
  4010d4:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  4010d6:	f44f 7380 	mov.w	r3, #256	; 0x100
  4010da:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  4010dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4010e0:	6003      	str	r3, [r0, #0]
  4010e2:	4770      	bx	lr
  4010e4:	55534100 	.word	0x55534100

004010e8 <usart_init_rs232>:
{
  4010e8:	b570      	push	{r4, r5, r6, lr}
  4010ea:	4605      	mov	r5, r0
  4010ec:	460c      	mov	r4, r1
  4010ee:	4616      	mov	r6, r2
	usart_reset(p_usart);
  4010f0:	4b0f      	ldr	r3, [pc, #60]	; (401130 <usart_init_rs232+0x48>)
  4010f2:	4798      	blx	r3
	ul_reg_val = 0;
  4010f4:	2200      	movs	r2, #0
  4010f6:	4b0f      	ldr	r3, [pc, #60]	; (401134 <usart_init_rs232+0x4c>)
  4010f8:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4010fa:	b1a4      	cbz	r4, 401126 <usart_init_rs232+0x3e>
  4010fc:	4632      	mov	r2, r6
  4010fe:	6821      	ldr	r1, [r4, #0]
  401100:	4628      	mov	r0, r5
  401102:	4b0d      	ldr	r3, [pc, #52]	; (401138 <usart_init_rs232+0x50>)
  401104:	4798      	blx	r3
  401106:	4602      	mov	r2, r0
  401108:	b978      	cbnz	r0, 40112a <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40110a:	6863      	ldr	r3, [r4, #4]
  40110c:	68a1      	ldr	r1, [r4, #8]
  40110e:	430b      	orrs	r3, r1
  401110:	6921      	ldr	r1, [r4, #16]
  401112:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401114:	68e1      	ldr	r1, [r4, #12]
  401116:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401118:	4906      	ldr	r1, [pc, #24]	; (401134 <usart_init_rs232+0x4c>)
  40111a:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  40111c:	6869      	ldr	r1, [r5, #4]
  40111e:	430b      	orrs	r3, r1
  401120:	606b      	str	r3, [r5, #4]
}
  401122:	4610      	mov	r0, r2
  401124:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  401126:	2201      	movs	r2, #1
  401128:	e7fb      	b.n	401122 <usart_init_rs232+0x3a>
  40112a:	2201      	movs	r2, #1
  40112c:	e7f9      	b.n	401122 <usart_init_rs232+0x3a>
  40112e:	bf00      	nop
  401130:	004010c1 	.word	0x004010c1
  401134:	20400b58 	.word	0x20400b58
  401138:	00401067 	.word	0x00401067

0040113c <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  40113c:	2340      	movs	r3, #64	; 0x40
  40113e:	6003      	str	r3, [r0, #0]
  401140:	4770      	bx	lr

00401142 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  401142:	2310      	movs	r3, #16
  401144:	6003      	str	r3, [r0, #0]
  401146:	4770      	bx	lr

00401148 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401148:	6943      	ldr	r3, [r0, #20]
  40114a:	f013 0f02 	tst.w	r3, #2
  40114e:	d004      	beq.n	40115a <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  401150:	f3c1 0108 	ubfx	r1, r1, #0, #9
  401154:	61c1      	str	r1, [r0, #28]
	return 0;
  401156:	2000      	movs	r0, #0
  401158:	4770      	bx	lr
		return 1;
  40115a:	2001      	movs	r0, #1
}
  40115c:	4770      	bx	lr

0040115e <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40115e:	6943      	ldr	r3, [r0, #20]
  401160:	f013 0f01 	tst.w	r3, #1
  401164:	d005      	beq.n	401172 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401166:	6983      	ldr	r3, [r0, #24]
  401168:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40116c:	600b      	str	r3, [r1, #0]
	return 0;
  40116e:	2000      	movs	r0, #0
  401170:	4770      	bx	lr
		return 1;
  401172:	2001      	movs	r0, #1
}
  401174:	4770      	bx	lr

00401176 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401176:	e7fe      	b.n	401176 <Dummy_Handler>

00401178 <Reset_Handler>:
{
  401178:	b500      	push	{lr}
  40117a:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  40117c:	4b25      	ldr	r3, [pc, #148]	; (401214 <Reset_Handler+0x9c>)
  40117e:	4a26      	ldr	r2, [pc, #152]	; (401218 <Reset_Handler+0xa0>)
  401180:	429a      	cmp	r2, r3
  401182:	d010      	beq.n	4011a6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401184:	4b25      	ldr	r3, [pc, #148]	; (40121c <Reset_Handler+0xa4>)
  401186:	4a23      	ldr	r2, [pc, #140]	; (401214 <Reset_Handler+0x9c>)
  401188:	429a      	cmp	r2, r3
  40118a:	d20c      	bcs.n	4011a6 <Reset_Handler+0x2e>
  40118c:	3b01      	subs	r3, #1
  40118e:	1a9b      	subs	r3, r3, r2
  401190:	f023 0303 	bic.w	r3, r3, #3
  401194:	3304      	adds	r3, #4
  401196:	4413      	add	r3, r2
  401198:	491f      	ldr	r1, [pc, #124]	; (401218 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  40119a:	f851 0b04 	ldr.w	r0, [r1], #4
  40119e:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4011a2:	429a      	cmp	r2, r3
  4011a4:	d1f9      	bne.n	40119a <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4011a6:	4b1e      	ldr	r3, [pc, #120]	; (401220 <Reset_Handler+0xa8>)
  4011a8:	4a1e      	ldr	r2, [pc, #120]	; (401224 <Reset_Handler+0xac>)
  4011aa:	429a      	cmp	r2, r3
  4011ac:	d20a      	bcs.n	4011c4 <Reset_Handler+0x4c>
  4011ae:	3b01      	subs	r3, #1
  4011b0:	1a9b      	subs	r3, r3, r2
  4011b2:	f023 0303 	bic.w	r3, r3, #3
  4011b6:	3304      	adds	r3, #4
  4011b8:	4413      	add	r3, r2
                *pDest++ = 0;
  4011ba:	2100      	movs	r1, #0
  4011bc:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4011c0:	4293      	cmp	r3, r2
  4011c2:	d1fb      	bne.n	4011bc <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4011c4:	4a18      	ldr	r2, [pc, #96]	; (401228 <Reset_Handler+0xb0>)
  4011c6:	4b19      	ldr	r3, [pc, #100]	; (40122c <Reset_Handler+0xb4>)
  4011c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4011cc:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4011ce:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4011d2:	fab3 f383 	clz	r3, r3
  4011d6:	095b      	lsrs	r3, r3, #5
  4011d8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4011da:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4011dc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4011e0:	2200      	movs	r2, #0
  4011e2:	4b13      	ldr	r3, [pc, #76]	; (401230 <Reset_Handler+0xb8>)
  4011e4:	701a      	strb	r2, [r3, #0]
	return flags;
  4011e6:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4011e8:	4a12      	ldr	r2, [pc, #72]	; (401234 <Reset_Handler+0xbc>)
  4011ea:	6813      	ldr	r3, [r2, #0]
  4011ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4011f0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4011f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4011f6:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4011fa:	b129      	cbz	r1, 401208 <Reset_Handler+0x90>
		cpu_irq_enable();
  4011fc:	2201      	movs	r2, #1
  4011fe:	4b0c      	ldr	r3, [pc, #48]	; (401230 <Reset_Handler+0xb8>)
  401200:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401202:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401206:	b662      	cpsie	i
        __libc_init_array();
  401208:	4b0b      	ldr	r3, [pc, #44]	; (401238 <Reset_Handler+0xc0>)
  40120a:	4798      	blx	r3
        main();
  40120c:	4b0b      	ldr	r3, [pc, #44]	; (40123c <Reset_Handler+0xc4>)
  40120e:	4798      	blx	r3
  401210:	e7fe      	b.n	401210 <Reset_Handler+0x98>
  401212:	bf00      	nop
  401214:	20400000 	.word	0x20400000
  401218:	00403c34 	.word	0x00403c34
  40121c:	2040084c 	.word	0x2040084c
  401220:	20400bdc 	.word	0x20400bdc
  401224:	2040084c 	.word	0x2040084c
  401228:	e000ed00 	.word	0xe000ed00
  40122c:	00400000 	.word	0x00400000
  401230:	20400000 	.word	0x20400000
  401234:	e000ed88 	.word	0xe000ed88
  401238:	00401781 	.word	0x00401781
  40123c:	00401605 	.word	0x00401605

00401240 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401240:	4b3b      	ldr	r3, [pc, #236]	; (401330 <SystemCoreClockUpdate+0xf0>)
  401242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401244:	f003 0303 	and.w	r3, r3, #3
  401248:	2b01      	cmp	r3, #1
  40124a:	d01d      	beq.n	401288 <SystemCoreClockUpdate+0x48>
  40124c:	b183      	cbz	r3, 401270 <SystemCoreClockUpdate+0x30>
  40124e:	2b02      	cmp	r3, #2
  401250:	d036      	beq.n	4012c0 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401252:	4b37      	ldr	r3, [pc, #220]	; (401330 <SystemCoreClockUpdate+0xf0>)
  401254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401256:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40125a:	2b70      	cmp	r3, #112	; 0x70
  40125c:	d05f      	beq.n	40131e <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40125e:	4b34      	ldr	r3, [pc, #208]	; (401330 <SystemCoreClockUpdate+0xf0>)
  401260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401262:	4934      	ldr	r1, [pc, #208]	; (401334 <SystemCoreClockUpdate+0xf4>)
  401264:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401268:	680b      	ldr	r3, [r1, #0]
  40126a:	40d3      	lsrs	r3, r2
  40126c:	600b      	str	r3, [r1, #0]
  40126e:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401270:	4b31      	ldr	r3, [pc, #196]	; (401338 <SystemCoreClockUpdate+0xf8>)
  401272:	695b      	ldr	r3, [r3, #20]
  401274:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401278:	bf14      	ite	ne
  40127a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40127e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401282:	4b2c      	ldr	r3, [pc, #176]	; (401334 <SystemCoreClockUpdate+0xf4>)
  401284:	601a      	str	r2, [r3, #0]
  401286:	e7e4      	b.n	401252 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401288:	4b29      	ldr	r3, [pc, #164]	; (401330 <SystemCoreClockUpdate+0xf0>)
  40128a:	6a1b      	ldr	r3, [r3, #32]
  40128c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401290:	d003      	beq.n	40129a <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401292:	4a2a      	ldr	r2, [pc, #168]	; (40133c <SystemCoreClockUpdate+0xfc>)
  401294:	4b27      	ldr	r3, [pc, #156]	; (401334 <SystemCoreClockUpdate+0xf4>)
  401296:	601a      	str	r2, [r3, #0]
  401298:	e7db      	b.n	401252 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40129a:	4a29      	ldr	r2, [pc, #164]	; (401340 <SystemCoreClockUpdate+0x100>)
  40129c:	4b25      	ldr	r3, [pc, #148]	; (401334 <SystemCoreClockUpdate+0xf4>)
  40129e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4012a0:	4b23      	ldr	r3, [pc, #140]	; (401330 <SystemCoreClockUpdate+0xf0>)
  4012a2:	6a1b      	ldr	r3, [r3, #32]
  4012a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4012a8:	2b10      	cmp	r3, #16
  4012aa:	d005      	beq.n	4012b8 <SystemCoreClockUpdate+0x78>
  4012ac:	2b20      	cmp	r3, #32
  4012ae:	d1d0      	bne.n	401252 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4012b0:	4a22      	ldr	r2, [pc, #136]	; (40133c <SystemCoreClockUpdate+0xfc>)
  4012b2:	4b20      	ldr	r3, [pc, #128]	; (401334 <SystemCoreClockUpdate+0xf4>)
  4012b4:	601a      	str	r2, [r3, #0]
          break;
  4012b6:	e7cc      	b.n	401252 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4012b8:	4a22      	ldr	r2, [pc, #136]	; (401344 <SystemCoreClockUpdate+0x104>)
  4012ba:	4b1e      	ldr	r3, [pc, #120]	; (401334 <SystemCoreClockUpdate+0xf4>)
  4012bc:	601a      	str	r2, [r3, #0]
          break;
  4012be:	e7c8      	b.n	401252 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4012c0:	4b1b      	ldr	r3, [pc, #108]	; (401330 <SystemCoreClockUpdate+0xf0>)
  4012c2:	6a1b      	ldr	r3, [r3, #32]
  4012c4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4012c8:	d016      	beq.n	4012f8 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4012ca:	4a1c      	ldr	r2, [pc, #112]	; (40133c <SystemCoreClockUpdate+0xfc>)
  4012cc:	4b19      	ldr	r3, [pc, #100]	; (401334 <SystemCoreClockUpdate+0xf4>)
  4012ce:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4012d0:	4b17      	ldr	r3, [pc, #92]	; (401330 <SystemCoreClockUpdate+0xf0>)
  4012d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4012d4:	f003 0303 	and.w	r3, r3, #3
  4012d8:	2b02      	cmp	r3, #2
  4012da:	d1ba      	bne.n	401252 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4012dc:	4a14      	ldr	r2, [pc, #80]	; (401330 <SystemCoreClockUpdate+0xf0>)
  4012de:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4012e0:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4012e2:	4814      	ldr	r0, [pc, #80]	; (401334 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4012e4:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4012e8:	6803      	ldr	r3, [r0, #0]
  4012ea:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4012ee:	b2d2      	uxtb	r2, r2
  4012f0:	fbb3 f3f2 	udiv	r3, r3, r2
  4012f4:	6003      	str	r3, [r0, #0]
  4012f6:	e7ac      	b.n	401252 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4012f8:	4a11      	ldr	r2, [pc, #68]	; (401340 <SystemCoreClockUpdate+0x100>)
  4012fa:	4b0e      	ldr	r3, [pc, #56]	; (401334 <SystemCoreClockUpdate+0xf4>)
  4012fc:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4012fe:	4b0c      	ldr	r3, [pc, #48]	; (401330 <SystemCoreClockUpdate+0xf0>)
  401300:	6a1b      	ldr	r3, [r3, #32]
  401302:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401306:	2b10      	cmp	r3, #16
  401308:	d005      	beq.n	401316 <SystemCoreClockUpdate+0xd6>
  40130a:	2b20      	cmp	r3, #32
  40130c:	d1e0      	bne.n	4012d0 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40130e:	4a0b      	ldr	r2, [pc, #44]	; (40133c <SystemCoreClockUpdate+0xfc>)
  401310:	4b08      	ldr	r3, [pc, #32]	; (401334 <SystemCoreClockUpdate+0xf4>)
  401312:	601a      	str	r2, [r3, #0]
          break;
  401314:	e7dc      	b.n	4012d0 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401316:	4a0b      	ldr	r2, [pc, #44]	; (401344 <SystemCoreClockUpdate+0x104>)
  401318:	4b06      	ldr	r3, [pc, #24]	; (401334 <SystemCoreClockUpdate+0xf4>)
  40131a:	601a      	str	r2, [r3, #0]
          break;
  40131c:	e7d8      	b.n	4012d0 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40131e:	4a05      	ldr	r2, [pc, #20]	; (401334 <SystemCoreClockUpdate+0xf4>)
  401320:	6813      	ldr	r3, [r2, #0]
  401322:	4909      	ldr	r1, [pc, #36]	; (401348 <SystemCoreClockUpdate+0x108>)
  401324:	fba1 1303 	umull	r1, r3, r1, r3
  401328:	085b      	lsrs	r3, r3, #1
  40132a:	6013      	str	r3, [r2, #0]
  40132c:	4770      	bx	lr
  40132e:	bf00      	nop
  401330:	400e0600 	.word	0x400e0600
  401334:	20400004 	.word	0x20400004
  401338:	400e1810 	.word	0x400e1810
  40133c:	00b71b00 	.word	0x00b71b00
  401340:	003d0900 	.word	0x003d0900
  401344:	007a1200 	.word	0x007a1200
  401348:	aaaaaaab 	.word	0xaaaaaaab

0040134c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  40134c:	4b16      	ldr	r3, [pc, #88]	; (4013a8 <system_init_flash+0x5c>)
  40134e:	4298      	cmp	r0, r3
  401350:	d913      	bls.n	40137a <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401352:	4b16      	ldr	r3, [pc, #88]	; (4013ac <system_init_flash+0x60>)
  401354:	4298      	cmp	r0, r3
  401356:	d915      	bls.n	401384 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401358:	4b15      	ldr	r3, [pc, #84]	; (4013b0 <system_init_flash+0x64>)
  40135a:	4298      	cmp	r0, r3
  40135c:	d916      	bls.n	40138c <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40135e:	4b15      	ldr	r3, [pc, #84]	; (4013b4 <system_init_flash+0x68>)
  401360:	4298      	cmp	r0, r3
  401362:	d917      	bls.n	401394 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401364:	4b14      	ldr	r3, [pc, #80]	; (4013b8 <system_init_flash+0x6c>)
  401366:	4298      	cmp	r0, r3
  401368:	d918      	bls.n	40139c <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  40136a:	4b14      	ldr	r3, [pc, #80]	; (4013bc <system_init_flash+0x70>)
  40136c:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40136e:	bf94      	ite	ls
  401370:	4a13      	ldrls	r2, [pc, #76]	; (4013c0 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401372:	4a14      	ldrhi	r2, [pc, #80]	; (4013c4 <system_init_flash+0x78>)
  401374:	4b14      	ldr	r3, [pc, #80]	; (4013c8 <system_init_flash+0x7c>)
  401376:	601a      	str	r2, [r3, #0]
  401378:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40137a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40137e:	4b12      	ldr	r3, [pc, #72]	; (4013c8 <system_init_flash+0x7c>)
  401380:	601a      	str	r2, [r3, #0]
  401382:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401384:	4a11      	ldr	r2, [pc, #68]	; (4013cc <system_init_flash+0x80>)
  401386:	4b10      	ldr	r3, [pc, #64]	; (4013c8 <system_init_flash+0x7c>)
  401388:	601a      	str	r2, [r3, #0]
  40138a:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40138c:	4a10      	ldr	r2, [pc, #64]	; (4013d0 <system_init_flash+0x84>)
  40138e:	4b0e      	ldr	r3, [pc, #56]	; (4013c8 <system_init_flash+0x7c>)
  401390:	601a      	str	r2, [r3, #0]
  401392:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401394:	4a0f      	ldr	r2, [pc, #60]	; (4013d4 <system_init_flash+0x88>)
  401396:	4b0c      	ldr	r3, [pc, #48]	; (4013c8 <system_init_flash+0x7c>)
  401398:	601a      	str	r2, [r3, #0]
  40139a:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40139c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4013a0:	4b09      	ldr	r3, [pc, #36]	; (4013c8 <system_init_flash+0x7c>)
  4013a2:	601a      	str	r2, [r3, #0]
  4013a4:	4770      	bx	lr
  4013a6:	bf00      	nop
  4013a8:	015ef3bf 	.word	0x015ef3bf
  4013ac:	02bde77f 	.word	0x02bde77f
  4013b0:	041cdb3f 	.word	0x041cdb3f
  4013b4:	057bceff 	.word	0x057bceff
  4013b8:	06dac2bf 	.word	0x06dac2bf
  4013bc:	0839b67f 	.word	0x0839b67f
  4013c0:	04000500 	.word	0x04000500
  4013c4:	04000600 	.word	0x04000600
  4013c8:	400e0c00 	.word	0x400e0c00
  4013cc:	04000100 	.word	0x04000100
  4013d0:	04000200 	.word	0x04000200
  4013d4:	04000300 	.word	0x04000300

004013d8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4013d8:	4b0a      	ldr	r3, [pc, #40]	; (401404 <_sbrk+0x2c>)
  4013da:	681b      	ldr	r3, [r3, #0]
  4013dc:	b153      	cbz	r3, 4013f4 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4013de:	4b09      	ldr	r3, [pc, #36]	; (401404 <_sbrk+0x2c>)
  4013e0:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4013e2:	181a      	adds	r2, r3, r0
  4013e4:	4908      	ldr	r1, [pc, #32]	; (401408 <_sbrk+0x30>)
  4013e6:	4291      	cmp	r1, r2
  4013e8:	db08      	blt.n	4013fc <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4013ea:	4610      	mov	r0, r2
  4013ec:	4a05      	ldr	r2, [pc, #20]	; (401404 <_sbrk+0x2c>)
  4013ee:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4013f0:	4618      	mov	r0, r3
  4013f2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4013f4:	4a05      	ldr	r2, [pc, #20]	; (40140c <_sbrk+0x34>)
  4013f6:	4b03      	ldr	r3, [pc, #12]	; (401404 <_sbrk+0x2c>)
  4013f8:	601a      	str	r2, [r3, #0]
  4013fa:	e7f0      	b.n	4013de <_sbrk+0x6>
		return (caddr_t) -1;	
  4013fc:	f04f 30ff 	mov.w	r0, #4294967295
}
  401400:	4770      	bx	lr
  401402:	bf00      	nop
  401404:	20400b5c 	.word	0x20400b5c
  401408:	2045fffc 	.word	0x2045fffc
  40140c:	20402de0 	.word	0x20402de0

00401410 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401410:	f04f 30ff 	mov.w	r0, #4294967295
  401414:	4770      	bx	lr

00401416 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40141a:	604b      	str	r3, [r1, #4]

	return 0;
}
  40141c:	2000      	movs	r0, #0
  40141e:	4770      	bx	lr

00401420 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401420:	2001      	movs	r0, #1
  401422:	4770      	bx	lr

00401424 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401424:	2000      	movs	r0, #0
  401426:	4770      	bx	lr

00401428 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  401428:	b5f0      	push	{r4, r5, r6, r7, lr}
  40142a:	b083      	sub	sp, #12
  40142c:	4605      	mov	r5, r0
  40142e:	460c      	mov	r4, r1
	uint32_t val = 0;
  401430:	2300      	movs	r3, #0
  401432:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401434:	4b2a      	ldr	r3, [pc, #168]	; (4014e0 <usart_serial_getchar+0xb8>)
  401436:	4298      	cmp	r0, r3
  401438:	d013      	beq.n	401462 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40143a:	4b2a      	ldr	r3, [pc, #168]	; (4014e4 <usart_serial_getchar+0xbc>)
  40143c:	4298      	cmp	r0, r3
  40143e:	d018      	beq.n	401472 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401440:	4b29      	ldr	r3, [pc, #164]	; (4014e8 <usart_serial_getchar+0xc0>)
  401442:	4298      	cmp	r0, r3
  401444:	d01d      	beq.n	401482 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  401446:	4b29      	ldr	r3, [pc, #164]	; (4014ec <usart_serial_getchar+0xc4>)
  401448:	429d      	cmp	r5, r3
  40144a:	d022      	beq.n	401492 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40144c:	4b28      	ldr	r3, [pc, #160]	; (4014f0 <usart_serial_getchar+0xc8>)
  40144e:	429d      	cmp	r5, r3
  401450:	d027      	beq.n	4014a2 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401452:	4b28      	ldr	r3, [pc, #160]	; (4014f4 <usart_serial_getchar+0xcc>)
  401454:	429d      	cmp	r5, r3
  401456:	d02e      	beq.n	4014b6 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401458:	4b27      	ldr	r3, [pc, #156]	; (4014f8 <usart_serial_getchar+0xd0>)
  40145a:	429d      	cmp	r5, r3
  40145c:	d035      	beq.n	4014ca <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40145e:	b003      	add	sp, #12
  401460:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  401462:	461f      	mov	r7, r3
  401464:	4e25      	ldr	r6, [pc, #148]	; (4014fc <usart_serial_getchar+0xd4>)
  401466:	4621      	mov	r1, r4
  401468:	4638      	mov	r0, r7
  40146a:	47b0      	blx	r6
  40146c:	2800      	cmp	r0, #0
  40146e:	d1fa      	bne.n	401466 <usart_serial_getchar+0x3e>
  401470:	e7e9      	b.n	401446 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  401472:	461f      	mov	r7, r3
  401474:	4e21      	ldr	r6, [pc, #132]	; (4014fc <usart_serial_getchar+0xd4>)
  401476:	4621      	mov	r1, r4
  401478:	4638      	mov	r0, r7
  40147a:	47b0      	blx	r6
  40147c:	2800      	cmp	r0, #0
  40147e:	d1fa      	bne.n	401476 <usart_serial_getchar+0x4e>
  401480:	e7e4      	b.n	40144c <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  401482:	461f      	mov	r7, r3
  401484:	4e1d      	ldr	r6, [pc, #116]	; (4014fc <usart_serial_getchar+0xd4>)
  401486:	4621      	mov	r1, r4
  401488:	4638      	mov	r0, r7
  40148a:	47b0      	blx	r6
  40148c:	2800      	cmp	r0, #0
  40148e:	d1fa      	bne.n	401486 <usart_serial_getchar+0x5e>
  401490:	e7df      	b.n	401452 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  401492:	461f      	mov	r7, r3
  401494:	4e19      	ldr	r6, [pc, #100]	; (4014fc <usart_serial_getchar+0xd4>)
  401496:	4621      	mov	r1, r4
  401498:	4638      	mov	r0, r7
  40149a:	47b0      	blx	r6
  40149c:	2800      	cmp	r0, #0
  40149e:	d1fa      	bne.n	401496 <usart_serial_getchar+0x6e>
  4014a0:	e7da      	b.n	401458 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4014a2:	461e      	mov	r6, r3
  4014a4:	4d16      	ldr	r5, [pc, #88]	; (401500 <usart_serial_getchar+0xd8>)
  4014a6:	a901      	add	r1, sp, #4
  4014a8:	4630      	mov	r0, r6
  4014aa:	47a8      	blx	r5
  4014ac:	2800      	cmp	r0, #0
  4014ae:	d1fa      	bne.n	4014a6 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4014b0:	9b01      	ldr	r3, [sp, #4]
  4014b2:	7023      	strb	r3, [r4, #0]
  4014b4:	e7d3      	b.n	40145e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4014b6:	461e      	mov	r6, r3
  4014b8:	4d11      	ldr	r5, [pc, #68]	; (401500 <usart_serial_getchar+0xd8>)
  4014ba:	a901      	add	r1, sp, #4
  4014bc:	4630      	mov	r0, r6
  4014be:	47a8      	blx	r5
  4014c0:	2800      	cmp	r0, #0
  4014c2:	d1fa      	bne.n	4014ba <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  4014c4:	9b01      	ldr	r3, [sp, #4]
  4014c6:	7023      	strb	r3, [r4, #0]
  4014c8:	e7c9      	b.n	40145e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4014ca:	461e      	mov	r6, r3
  4014cc:	4d0c      	ldr	r5, [pc, #48]	; (401500 <usart_serial_getchar+0xd8>)
  4014ce:	a901      	add	r1, sp, #4
  4014d0:	4630      	mov	r0, r6
  4014d2:	47a8      	blx	r5
  4014d4:	2800      	cmp	r0, #0
  4014d6:	d1fa      	bne.n	4014ce <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  4014d8:	9b01      	ldr	r3, [sp, #4]
  4014da:	7023      	strb	r3, [r4, #0]
}
  4014dc:	e7bf      	b.n	40145e <usart_serial_getchar+0x36>
  4014de:	bf00      	nop
  4014e0:	400e0800 	.word	0x400e0800
  4014e4:	400e0a00 	.word	0x400e0a00
  4014e8:	400e1a00 	.word	0x400e1a00
  4014ec:	400e1c00 	.word	0x400e1c00
  4014f0:	40024000 	.word	0x40024000
  4014f4:	40028000 	.word	0x40028000
  4014f8:	4002c000 	.word	0x4002c000
  4014fc:	00401053 	.word	0x00401053
  401500:	0040115f 	.word	0x0040115f

00401504 <usart_serial_putchar>:
{
  401504:	b570      	push	{r4, r5, r6, lr}
  401506:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  401508:	4b2a      	ldr	r3, [pc, #168]	; (4015b4 <usart_serial_putchar+0xb0>)
  40150a:	4298      	cmp	r0, r3
  40150c:	d013      	beq.n	401536 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  40150e:	4b2a      	ldr	r3, [pc, #168]	; (4015b8 <usart_serial_putchar+0xb4>)
  401510:	4298      	cmp	r0, r3
  401512:	d019      	beq.n	401548 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  401514:	4b29      	ldr	r3, [pc, #164]	; (4015bc <usart_serial_putchar+0xb8>)
  401516:	4298      	cmp	r0, r3
  401518:	d01f      	beq.n	40155a <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  40151a:	4b29      	ldr	r3, [pc, #164]	; (4015c0 <usart_serial_putchar+0xbc>)
  40151c:	4298      	cmp	r0, r3
  40151e:	d025      	beq.n	40156c <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  401520:	4b28      	ldr	r3, [pc, #160]	; (4015c4 <usart_serial_putchar+0xc0>)
  401522:	4298      	cmp	r0, r3
  401524:	d02b      	beq.n	40157e <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  401526:	4b28      	ldr	r3, [pc, #160]	; (4015c8 <usart_serial_putchar+0xc4>)
  401528:	4298      	cmp	r0, r3
  40152a:	d031      	beq.n	401590 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  40152c:	4b27      	ldr	r3, [pc, #156]	; (4015cc <usart_serial_putchar+0xc8>)
  40152e:	4298      	cmp	r0, r3
  401530:	d037      	beq.n	4015a2 <usart_serial_putchar+0x9e>
	return 0;
  401532:	2000      	movs	r0, #0
}
  401534:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  401536:	461e      	mov	r6, r3
  401538:	4d25      	ldr	r5, [pc, #148]	; (4015d0 <usart_serial_putchar+0xcc>)
  40153a:	4621      	mov	r1, r4
  40153c:	4630      	mov	r0, r6
  40153e:	47a8      	blx	r5
  401540:	2800      	cmp	r0, #0
  401542:	d1fa      	bne.n	40153a <usart_serial_putchar+0x36>
		return 1;
  401544:	2001      	movs	r0, #1
  401546:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  401548:	461e      	mov	r6, r3
  40154a:	4d21      	ldr	r5, [pc, #132]	; (4015d0 <usart_serial_putchar+0xcc>)
  40154c:	4621      	mov	r1, r4
  40154e:	4630      	mov	r0, r6
  401550:	47a8      	blx	r5
  401552:	2800      	cmp	r0, #0
  401554:	d1fa      	bne.n	40154c <usart_serial_putchar+0x48>
		return 1;
  401556:	2001      	movs	r0, #1
  401558:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40155a:	461e      	mov	r6, r3
  40155c:	4d1c      	ldr	r5, [pc, #112]	; (4015d0 <usart_serial_putchar+0xcc>)
  40155e:	4621      	mov	r1, r4
  401560:	4630      	mov	r0, r6
  401562:	47a8      	blx	r5
  401564:	2800      	cmp	r0, #0
  401566:	d1fa      	bne.n	40155e <usart_serial_putchar+0x5a>
		return 1;
  401568:	2001      	movs	r0, #1
  40156a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40156c:	461e      	mov	r6, r3
  40156e:	4d18      	ldr	r5, [pc, #96]	; (4015d0 <usart_serial_putchar+0xcc>)
  401570:	4621      	mov	r1, r4
  401572:	4630      	mov	r0, r6
  401574:	47a8      	blx	r5
  401576:	2800      	cmp	r0, #0
  401578:	d1fa      	bne.n	401570 <usart_serial_putchar+0x6c>
		return 1;
  40157a:	2001      	movs	r0, #1
  40157c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40157e:	461e      	mov	r6, r3
  401580:	4d14      	ldr	r5, [pc, #80]	; (4015d4 <usart_serial_putchar+0xd0>)
  401582:	4621      	mov	r1, r4
  401584:	4630      	mov	r0, r6
  401586:	47a8      	blx	r5
  401588:	2800      	cmp	r0, #0
  40158a:	d1fa      	bne.n	401582 <usart_serial_putchar+0x7e>
		return 1;
  40158c:	2001      	movs	r0, #1
  40158e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  401590:	461e      	mov	r6, r3
  401592:	4d10      	ldr	r5, [pc, #64]	; (4015d4 <usart_serial_putchar+0xd0>)
  401594:	4621      	mov	r1, r4
  401596:	4630      	mov	r0, r6
  401598:	47a8      	blx	r5
  40159a:	2800      	cmp	r0, #0
  40159c:	d1fa      	bne.n	401594 <usart_serial_putchar+0x90>
		return 1;
  40159e:	2001      	movs	r0, #1
  4015a0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4015a2:	461e      	mov	r6, r3
  4015a4:	4d0b      	ldr	r5, [pc, #44]	; (4015d4 <usart_serial_putchar+0xd0>)
  4015a6:	4621      	mov	r1, r4
  4015a8:	4630      	mov	r0, r6
  4015aa:	47a8      	blx	r5
  4015ac:	2800      	cmp	r0, #0
  4015ae:	d1fa      	bne.n	4015a6 <usart_serial_putchar+0xa2>
		return 1;
  4015b0:	2001      	movs	r0, #1
  4015b2:	bd70      	pop	{r4, r5, r6, pc}
  4015b4:	400e0800 	.word	0x400e0800
  4015b8:	400e0a00 	.word	0x400e0a00
  4015bc:	400e1a00 	.word	0x400e1a00
  4015c0:	400e1c00 	.word	0x400e1c00
  4015c4:	40024000 	.word	0x40024000
  4015c8:	40028000 	.word	0x40028000
  4015cc:	4002c000 	.word	0x4002c000
  4015d0:	00401041 	.word	0x00401041
  4015d4:	00401149 	.word	0x00401149

004015d8 <SysTick_Handler>:
 *  Process System Tick Event.
 *  Increment the ul_ms_ticks counter.
 */
void SysTick_Handler(void)
{
	g_ul_tick_count++;
  4015d8:	4a02      	ldr	r2, [pc, #8]	; (4015e4 <SysTick_Handler+0xc>)
  4015da:	6813      	ldr	r3, [r2, #0]
  4015dc:	3301      	adds	r3, #1
  4015de:	6013      	str	r3, [r2, #0]
  4015e0:	4770      	bx	lr
  4015e2:	bf00      	nop
  4015e4:	20400ba0 	.word	0x20400ba0

004015e8 <wait>:
/**
 *  \brief Wait for some time in ms.
 *
 */
 void wait(volatile uint32_t ul_ms)
{
  4015e8:	b082      	sub	sp, #8
  4015ea:	9001      	str	r0, [sp, #4]
	uint32_t ul_start;
	uint32_t ul_current;

	ul_start = g_ul_tick_count;
  4015ec:	4b04      	ldr	r3, [pc, #16]	; (401600 <wait+0x18>)
  4015ee:	6818      	ldr	r0, [r3, #0]
	do {
		ul_current = g_ul_tick_count;
  4015f0:	4619      	mov	r1, r3
  4015f2:	680b      	ldr	r3, [r1, #0]
	} while (ul_current - ul_start < ul_ms);
  4015f4:	9a01      	ldr	r2, [sp, #4]
  4015f6:	1a1b      	subs	r3, r3, r0
  4015f8:	4293      	cmp	r3, r2
  4015fa:	d3fa      	bcc.n	4015f2 <wait+0xa>
}
  4015fc:	b002      	add	sp, #8
  4015fe:	4770      	bx	lr
  401600:	20400ba0 	.word	0x20400ba0

00401604 <main>:
 * \brief Application entry point for smc_lcd example.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  401604:	b580      	push	{r7, lr}
  401606:	b086      	sub	sp, #24
	sysclk_init();
  401608:	4b40      	ldr	r3, [pc, #256]	; (40170c <main+0x108>)
  40160a:	4798      	blx	r3
	board_init();
  40160c:	4b40      	ldr	r3, [pc, #256]	; (401710 <main+0x10c>)
  40160e:	4798      	blx	r3
  401610:	200e      	movs	r0, #14
  401612:	4e40      	ldr	r6, [pc, #256]	; (401714 <main+0x110>)
  401614:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  401616:	4d40      	ldr	r5, [pc, #256]	; (401718 <main+0x114>)
  401618:	4b40      	ldr	r3, [pc, #256]	; (40171c <main+0x118>)
  40161a:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40161c:	4a40      	ldr	r2, [pc, #256]	; (401720 <main+0x11c>)
  40161e:	4b41      	ldr	r3, [pc, #260]	; (401724 <main+0x120>)
  401620:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  401622:	4a41      	ldr	r2, [pc, #260]	; (401728 <main+0x124>)
  401624:	4b41      	ldr	r3, [pc, #260]	; (40172c <main+0x128>)
  401626:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  401628:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40162c:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  40162e:	23c0      	movs	r3, #192	; 0xc0
  401630:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  401632:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401636:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  401638:	2400      	movs	r4, #0
  40163a:	9403      	str	r4, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40163c:	9404      	str	r4, [sp, #16]
  40163e:	200e      	movs	r0, #14
  401640:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  401642:	4a3b      	ldr	r2, [pc, #236]	; (401730 <main+0x12c>)
  401644:	4669      	mov	r1, sp
  401646:	4628      	mov	r0, r5
  401648:	4b3a      	ldr	r3, [pc, #232]	; (401734 <main+0x130>)
  40164a:	4798      	blx	r3
		usart_enable_tx(p_usart);
  40164c:	4628      	mov	r0, r5
  40164e:	4b3a      	ldr	r3, [pc, #232]	; (401738 <main+0x134>)
  401650:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401652:	4628      	mov	r0, r5
  401654:	4b39      	ldr	r3, [pc, #228]	; (40173c <main+0x138>)
  401656:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  401658:	4e39      	ldr	r6, [pc, #228]	; (401740 <main+0x13c>)
  40165a:	6833      	ldr	r3, [r6, #0]
  40165c:	4621      	mov	r1, r4
  40165e:	6898      	ldr	r0, [r3, #8]
  401660:	4d38      	ldr	r5, [pc, #224]	; (401744 <main+0x140>)
  401662:	47a8      	blx	r5
	setbuf(stdin, NULL);
  401664:	6833      	ldr	r3, [r6, #0]
  401666:	4621      	mov	r1, r4
  401668:	6858      	ldr	r0, [r3, #4]
  40166a:	47a8      	blx	r5
	
	/* Initialize debug console */
	configure_console();
	puts("ILI9488 example\n\r");
  40166c:	4836      	ldr	r0, [pc, #216]	; (401748 <main+0x144>)
  40166e:	4b37      	ldr	r3, [pc, #220]	; (40174c <main+0x148>)
  401670:	4798      	blx	r3
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  401672:	4b37      	ldr	r3, [pc, #220]	; (401750 <main+0x14c>)
  401674:	4a37      	ldr	r2, [pc, #220]	; (401754 <main+0x150>)
  401676:	605a      	str	r2, [r3, #4]
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401678:	21e0      	movs	r1, #224	; 0xe0
  40167a:	4a37      	ldr	r2, [pc, #220]	; (401758 <main+0x154>)
  40167c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  401680:	609c      	str	r4, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  401682:	2207      	movs	r2, #7
  401684:	601a      	str	r2, [r3, #0]
	
	configure_systick();

	/* Initialize display parameter */
	g_ili9488_display_opt.ul_width = ILI9488_LCD_WIDTH;
  401686:	4835      	ldr	r0, [pc, #212]	; (40175c <main+0x158>)
  401688:	f44f 76a0 	mov.w	r6, #320	; 0x140
  40168c:	6006      	str	r6, [r0, #0]
	g_ili9488_display_opt.ul_height = ILI9488_LCD_HEIGHT;
  40168e:	f44f 77f0 	mov.w	r7, #480	; 0x1e0
  401692:	6047      	str	r7, [r0, #4]
	g_ili9488_display_opt.foreground_color = COLOR_CONVERT(COLOR_WHITE);
  401694:	f64f 75ff 	movw	r5, #65535	; 0xffff
  401698:	6085      	str	r5, [r0, #8]
	g_ili9488_display_opt.background_color = COLOR_CONVERT(COLOR_WHITE);
  40169a:	60c5      	str	r5, [r0, #12]

	/* Initialize LCD */
	ili9488_init(&g_ili9488_display_opt);
  40169c:	4b30      	ldr	r3, [pc, #192]	; (401760 <main+0x15c>)
  40169e:	4798      	blx	r3
	
	/* Draw text, image and basic shapes on the LCD */
	ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  4016a0:	4628      	mov	r0, r5
  4016a2:	4d30      	ldr	r5, [pc, #192]	; (401764 <main+0x160>)
  4016a4:	47a8      	blx	r5
	ili9488_draw_filled_rectangle(0, 0, ILI9488_LCD_WIDTH,ILI9488_LCD_HEIGHT);
  4016a6:	463b      	mov	r3, r7
  4016a8:	4632      	mov	r2, r6
  4016aa:	4621      	mov	r1, r4
  4016ac:	4620      	mov	r0, r4
  4016ae:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 401778 <main+0x174>
  4016b2:	47c0      	blx	r8
	
	
	ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLACK));
  4016b4:	4620      	mov	r0, r4
  4016b6:	47a8      	blx	r5
	ili9488_draw_string(10, 20, (uint8_t *)"ili9488_lcd example");
  4016b8:	4a2b      	ldr	r2, [pc, #172]	; (401768 <main+0x164>)
  4016ba:	2114      	movs	r1, #20
  4016bc:	200a      	movs	r0, #10
  4016be:	4b2b      	ldr	r3, [pc, #172]	; (40176c <main+0x168>)
  4016c0:	4798      	blx	r3
	wait(1000);
  4016c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  4016c6:	4b2a      	ldr	r3, [pc, #168]	; (401770 <main+0x16c>)
  4016c8:	4798      	blx	r3
	
	ili9488_set_foreground_color(COLOR_CONVERT(COLOR_RED));
  4016ca:	f44f 4078 	mov.w	r0, #63488	; 0xf800
  4016ce:	47a8      	blx	r5
	ili9488_draw_circle(60, 160, 40);
  4016d0:	2228      	movs	r2, #40	; 0x28
  4016d2:	21a0      	movs	r1, #160	; 0xa0
  4016d4:	203c      	movs	r0, #60	; 0x3c
  4016d6:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 40177c <main+0x178>
  4016da:	47c0      	blx	r8
	ili9488_set_foreground_color(COLOR_CONVERT(COLOR_GREEN));
  4016dc:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
  4016e0:	47a8      	blx	r5
	ili9488_draw_circle(120, 160, 40);
  4016e2:	2228      	movs	r2, #40	; 0x28
  4016e4:	21a0      	movs	r1, #160	; 0xa0
  4016e6:	2078      	movs	r0, #120	; 0x78
  4016e8:	47c0      	blx	r8
	ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLUE));
  4016ea:	201f      	movs	r0, #31
  4016ec:	47a8      	blx	r5
	ili9488_draw_circle(180, 160, 40);
  4016ee:	2228      	movs	r2, #40	; 0x28
  4016f0:	21a0      	movs	r1, #160	; 0xa0
  4016f2:	20b4      	movs	r0, #180	; 0xb4
  4016f4:	47c0      	blx	r8
	
	ili9488_set_foreground_color(COLOR_CONVERT(COLOR_VIOLET));
  4016f6:	f64e 400e 	movw	r0, #60430	; 0xec0e
  4016fa:	47a8      	blx	r5
	ili9488_draw_line(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  4016fc:	463b      	mov	r3, r7
  4016fe:	4632      	mov	r2, r6
  401700:	4621      	mov	r1, r4
  401702:	4620      	mov	r0, r4
  401704:	4c1b      	ldr	r4, [pc, #108]	; (401774 <main+0x170>)
  401706:	47a0      	blx	r4
  401708:	e7fe      	b.n	401708 <main+0x104>
  40170a:	bf00      	nop
  40170c:	004001ad 	.word	0x004001ad
  401710:	004002a9 	.word	0x004002a9
  401714:	00400fed 	.word	0x00400fed
  401718:	40028000 	.word	0x40028000
  40171c:	20400b9c 	.word	0x20400b9c
  401720:	00401505 	.word	0x00401505
  401724:	20400b98 	.word	0x20400b98
  401728:	00401429 	.word	0x00401429
  40172c:	20400b94 	.word	0x20400b94
  401730:	08f0d180 	.word	0x08f0d180
  401734:	004010e9 	.word	0x004010e9
  401738:	0040113d 	.word	0x0040113d
  40173c:	00401143 	.word	0x00401143
  401740:	20400008 	.word	0x20400008
  401744:	00401919 	.word	0x00401919
  401748:	00403be0 	.word	0x00403be0
  40174c:	00401909 	.word	0x00401909
  401750:	e000e010 	.word	0xe000e010
  401754:	000493df 	.word	0x000493df
  401758:	e000ed00 	.word	0xe000ed00
  40175c:	20400ba4 	.word	0x20400ba4
  401760:	004007a9 	.word	0x004007a9
  401764:	0040072d 	.word	0x0040072d
  401768:	00403bf4 	.word	0x00403bf4
  40176c:	00400b85 	.word	0x00400b85
  401770:	004015e9 	.word	0x004015e9
  401774:	00400a11 	.word	0x00400a11
  401778:	00400955 	.word	0x00400955
  40177c:	00400ae5 	.word	0x00400ae5

00401780 <__libc_init_array>:
  401780:	b570      	push	{r4, r5, r6, lr}
  401782:	4e0f      	ldr	r6, [pc, #60]	; (4017c0 <__libc_init_array+0x40>)
  401784:	4d0f      	ldr	r5, [pc, #60]	; (4017c4 <__libc_init_array+0x44>)
  401786:	1b76      	subs	r6, r6, r5
  401788:	10b6      	asrs	r6, r6, #2
  40178a:	bf18      	it	ne
  40178c:	2400      	movne	r4, #0
  40178e:	d005      	beq.n	40179c <__libc_init_array+0x1c>
  401790:	3401      	adds	r4, #1
  401792:	f855 3b04 	ldr.w	r3, [r5], #4
  401796:	4798      	blx	r3
  401798:	42a6      	cmp	r6, r4
  40179a:	d1f9      	bne.n	401790 <__libc_init_array+0x10>
  40179c:	4e0a      	ldr	r6, [pc, #40]	; (4017c8 <__libc_init_array+0x48>)
  40179e:	4d0b      	ldr	r5, [pc, #44]	; (4017cc <__libc_init_array+0x4c>)
  4017a0:	1b76      	subs	r6, r6, r5
  4017a2:	f002 fa35 	bl	403c10 <_init>
  4017a6:	10b6      	asrs	r6, r6, #2
  4017a8:	bf18      	it	ne
  4017aa:	2400      	movne	r4, #0
  4017ac:	d006      	beq.n	4017bc <__libc_init_array+0x3c>
  4017ae:	3401      	adds	r4, #1
  4017b0:	f855 3b04 	ldr.w	r3, [r5], #4
  4017b4:	4798      	blx	r3
  4017b6:	42a6      	cmp	r6, r4
  4017b8:	d1f9      	bne.n	4017ae <__libc_init_array+0x2e>
  4017ba:	bd70      	pop	{r4, r5, r6, pc}
  4017bc:	bd70      	pop	{r4, r5, r6, pc}
  4017be:	bf00      	nop
  4017c0:	00403c1c 	.word	0x00403c1c
  4017c4:	00403c1c 	.word	0x00403c1c
  4017c8:	00403c24 	.word	0x00403c24
  4017cc:	00403c1c 	.word	0x00403c1c

004017d0 <memset>:
  4017d0:	b470      	push	{r4, r5, r6}
  4017d2:	0786      	lsls	r6, r0, #30
  4017d4:	d046      	beq.n	401864 <memset+0x94>
  4017d6:	1e54      	subs	r4, r2, #1
  4017d8:	2a00      	cmp	r2, #0
  4017da:	d041      	beq.n	401860 <memset+0x90>
  4017dc:	b2ca      	uxtb	r2, r1
  4017de:	4603      	mov	r3, r0
  4017e0:	e002      	b.n	4017e8 <memset+0x18>
  4017e2:	f114 34ff 	adds.w	r4, r4, #4294967295
  4017e6:	d33b      	bcc.n	401860 <memset+0x90>
  4017e8:	f803 2b01 	strb.w	r2, [r3], #1
  4017ec:	079d      	lsls	r5, r3, #30
  4017ee:	d1f8      	bne.n	4017e2 <memset+0x12>
  4017f0:	2c03      	cmp	r4, #3
  4017f2:	d92e      	bls.n	401852 <memset+0x82>
  4017f4:	b2cd      	uxtb	r5, r1
  4017f6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4017fa:	2c0f      	cmp	r4, #15
  4017fc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401800:	d919      	bls.n	401836 <memset+0x66>
  401802:	f103 0210 	add.w	r2, r3, #16
  401806:	4626      	mov	r6, r4
  401808:	3e10      	subs	r6, #16
  40180a:	2e0f      	cmp	r6, #15
  40180c:	f842 5c10 	str.w	r5, [r2, #-16]
  401810:	f842 5c0c 	str.w	r5, [r2, #-12]
  401814:	f842 5c08 	str.w	r5, [r2, #-8]
  401818:	f842 5c04 	str.w	r5, [r2, #-4]
  40181c:	f102 0210 	add.w	r2, r2, #16
  401820:	d8f2      	bhi.n	401808 <memset+0x38>
  401822:	f1a4 0210 	sub.w	r2, r4, #16
  401826:	f022 020f 	bic.w	r2, r2, #15
  40182a:	f004 040f 	and.w	r4, r4, #15
  40182e:	3210      	adds	r2, #16
  401830:	2c03      	cmp	r4, #3
  401832:	4413      	add	r3, r2
  401834:	d90d      	bls.n	401852 <memset+0x82>
  401836:	461e      	mov	r6, r3
  401838:	4622      	mov	r2, r4
  40183a:	3a04      	subs	r2, #4
  40183c:	2a03      	cmp	r2, #3
  40183e:	f846 5b04 	str.w	r5, [r6], #4
  401842:	d8fa      	bhi.n	40183a <memset+0x6a>
  401844:	1f22      	subs	r2, r4, #4
  401846:	f022 0203 	bic.w	r2, r2, #3
  40184a:	3204      	adds	r2, #4
  40184c:	4413      	add	r3, r2
  40184e:	f004 0403 	and.w	r4, r4, #3
  401852:	b12c      	cbz	r4, 401860 <memset+0x90>
  401854:	b2c9      	uxtb	r1, r1
  401856:	441c      	add	r4, r3
  401858:	f803 1b01 	strb.w	r1, [r3], #1
  40185c:	429c      	cmp	r4, r3
  40185e:	d1fb      	bne.n	401858 <memset+0x88>
  401860:	bc70      	pop	{r4, r5, r6}
  401862:	4770      	bx	lr
  401864:	4614      	mov	r4, r2
  401866:	4603      	mov	r3, r0
  401868:	e7c2      	b.n	4017f0 <memset+0x20>
  40186a:	bf00      	nop

0040186c <_puts_r>:
  40186c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40186e:	4605      	mov	r5, r0
  401870:	b089      	sub	sp, #36	; 0x24
  401872:	4608      	mov	r0, r1
  401874:	460c      	mov	r4, r1
  401876:	f000 f923 	bl	401ac0 <strlen>
  40187a:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40187c:	4f21      	ldr	r7, [pc, #132]	; (401904 <_puts_r+0x98>)
  40187e:	9404      	str	r4, [sp, #16]
  401880:	2601      	movs	r6, #1
  401882:	1c44      	adds	r4, r0, #1
  401884:	a904      	add	r1, sp, #16
  401886:	2202      	movs	r2, #2
  401888:	9403      	str	r4, [sp, #12]
  40188a:	9005      	str	r0, [sp, #20]
  40188c:	68ac      	ldr	r4, [r5, #8]
  40188e:	9706      	str	r7, [sp, #24]
  401890:	9607      	str	r6, [sp, #28]
  401892:	9101      	str	r1, [sp, #4]
  401894:	9202      	str	r2, [sp, #8]
  401896:	b353      	cbz	r3, 4018ee <_puts_r+0x82>
  401898:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40189a:	f013 0f01 	tst.w	r3, #1
  40189e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4018a2:	b29a      	uxth	r2, r3
  4018a4:	d101      	bne.n	4018aa <_puts_r+0x3e>
  4018a6:	0590      	lsls	r0, r2, #22
  4018a8:	d525      	bpl.n	4018f6 <_puts_r+0x8a>
  4018aa:	0491      	lsls	r1, r2, #18
  4018ac:	d406      	bmi.n	4018bc <_puts_r+0x50>
  4018ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4018b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4018b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  4018b8:	81a3      	strh	r3, [r4, #12]
  4018ba:	6662      	str	r2, [r4, #100]	; 0x64
  4018bc:	4628      	mov	r0, r5
  4018be:	aa01      	add	r2, sp, #4
  4018c0:	4621      	mov	r1, r4
  4018c2:	f000 fbfb 	bl	4020bc <__sfvwrite_r>
  4018c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4018c8:	2800      	cmp	r0, #0
  4018ca:	bf0c      	ite	eq
  4018cc:	250a      	moveq	r5, #10
  4018ce:	f04f 35ff 	movne.w	r5, #4294967295
  4018d2:	07da      	lsls	r2, r3, #31
  4018d4:	d402      	bmi.n	4018dc <_puts_r+0x70>
  4018d6:	89a3      	ldrh	r3, [r4, #12]
  4018d8:	059b      	lsls	r3, r3, #22
  4018da:	d502      	bpl.n	4018e2 <_puts_r+0x76>
  4018dc:	4628      	mov	r0, r5
  4018de:	b009      	add	sp, #36	; 0x24
  4018e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4018e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4018e4:	f000 fd92 	bl	40240c <__retarget_lock_release_recursive>
  4018e8:	4628      	mov	r0, r5
  4018ea:	b009      	add	sp, #36	; 0x24
  4018ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4018ee:	4628      	mov	r0, r5
  4018f0:	f000 fa5c 	bl	401dac <__sinit>
  4018f4:	e7d0      	b.n	401898 <_puts_r+0x2c>
  4018f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4018f8:	f000 fd86 	bl	402408 <__retarget_lock_acquire_recursive>
  4018fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401900:	b29a      	uxth	r2, r3
  401902:	e7d2      	b.n	4018aa <_puts_r+0x3e>
  401904:	00403c0c 	.word	0x00403c0c

00401908 <puts>:
  401908:	4b02      	ldr	r3, [pc, #8]	; (401914 <puts+0xc>)
  40190a:	4601      	mov	r1, r0
  40190c:	6818      	ldr	r0, [r3, #0]
  40190e:	f7ff bfad 	b.w	40186c <_puts_r>
  401912:	bf00      	nop
  401914:	20400008 	.word	0x20400008

00401918 <setbuf>:
  401918:	2900      	cmp	r1, #0
  40191a:	bf0c      	ite	eq
  40191c:	2202      	moveq	r2, #2
  40191e:	2200      	movne	r2, #0
  401920:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401924:	f000 b800 	b.w	401928 <setvbuf>

00401928 <setvbuf>:
  401928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40192c:	4c61      	ldr	r4, [pc, #388]	; (401ab4 <setvbuf+0x18c>)
  40192e:	6825      	ldr	r5, [r4, #0]
  401930:	b083      	sub	sp, #12
  401932:	4604      	mov	r4, r0
  401934:	460f      	mov	r7, r1
  401936:	4690      	mov	r8, r2
  401938:	461e      	mov	r6, r3
  40193a:	b115      	cbz	r5, 401942 <setvbuf+0x1a>
  40193c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40193e:	2b00      	cmp	r3, #0
  401940:	d064      	beq.n	401a0c <setvbuf+0xe4>
  401942:	f1b8 0f02 	cmp.w	r8, #2
  401946:	d006      	beq.n	401956 <setvbuf+0x2e>
  401948:	f1b8 0f01 	cmp.w	r8, #1
  40194c:	f200 809f 	bhi.w	401a8e <setvbuf+0x166>
  401950:	2e00      	cmp	r6, #0
  401952:	f2c0 809c 	blt.w	401a8e <setvbuf+0x166>
  401956:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401958:	07d8      	lsls	r0, r3, #31
  40195a:	d534      	bpl.n	4019c6 <setvbuf+0x9e>
  40195c:	4621      	mov	r1, r4
  40195e:	4628      	mov	r0, r5
  401960:	f000 f9cc 	bl	401cfc <_fflush_r>
  401964:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401966:	b141      	cbz	r1, 40197a <setvbuf+0x52>
  401968:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40196c:	4299      	cmp	r1, r3
  40196e:	d002      	beq.n	401976 <setvbuf+0x4e>
  401970:	4628      	mov	r0, r5
  401972:	f000 fabd 	bl	401ef0 <_free_r>
  401976:	2300      	movs	r3, #0
  401978:	6323      	str	r3, [r4, #48]	; 0x30
  40197a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40197e:	2200      	movs	r2, #0
  401980:	61a2      	str	r2, [r4, #24]
  401982:	6062      	str	r2, [r4, #4]
  401984:	061a      	lsls	r2, r3, #24
  401986:	d43a      	bmi.n	4019fe <setvbuf+0xd6>
  401988:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40198c:	f023 0303 	bic.w	r3, r3, #3
  401990:	f1b8 0f02 	cmp.w	r8, #2
  401994:	81a3      	strh	r3, [r4, #12]
  401996:	d01d      	beq.n	4019d4 <setvbuf+0xac>
  401998:	ab01      	add	r3, sp, #4
  40199a:	466a      	mov	r2, sp
  40199c:	4621      	mov	r1, r4
  40199e:	4628      	mov	r0, r5
  4019a0:	f000 fd36 	bl	402410 <__swhatbuf_r>
  4019a4:	89a3      	ldrh	r3, [r4, #12]
  4019a6:	4318      	orrs	r0, r3
  4019a8:	81a0      	strh	r0, [r4, #12]
  4019aa:	2e00      	cmp	r6, #0
  4019ac:	d132      	bne.n	401a14 <setvbuf+0xec>
  4019ae:	9e00      	ldr	r6, [sp, #0]
  4019b0:	4630      	mov	r0, r6
  4019b2:	f000 fda5 	bl	402500 <malloc>
  4019b6:	4607      	mov	r7, r0
  4019b8:	2800      	cmp	r0, #0
  4019ba:	d06b      	beq.n	401a94 <setvbuf+0x16c>
  4019bc:	89a3      	ldrh	r3, [r4, #12]
  4019be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4019c2:	81a3      	strh	r3, [r4, #12]
  4019c4:	e028      	b.n	401a18 <setvbuf+0xf0>
  4019c6:	89a3      	ldrh	r3, [r4, #12]
  4019c8:	0599      	lsls	r1, r3, #22
  4019ca:	d4c7      	bmi.n	40195c <setvbuf+0x34>
  4019cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4019ce:	f000 fd1b 	bl	402408 <__retarget_lock_acquire_recursive>
  4019d2:	e7c3      	b.n	40195c <setvbuf+0x34>
  4019d4:	2500      	movs	r5, #0
  4019d6:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4019d8:	2600      	movs	r6, #0
  4019da:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4019de:	f043 0302 	orr.w	r3, r3, #2
  4019e2:	2001      	movs	r0, #1
  4019e4:	60a6      	str	r6, [r4, #8]
  4019e6:	07ce      	lsls	r6, r1, #31
  4019e8:	81a3      	strh	r3, [r4, #12]
  4019ea:	6022      	str	r2, [r4, #0]
  4019ec:	6122      	str	r2, [r4, #16]
  4019ee:	6160      	str	r0, [r4, #20]
  4019f0:	d401      	bmi.n	4019f6 <setvbuf+0xce>
  4019f2:	0598      	lsls	r0, r3, #22
  4019f4:	d53e      	bpl.n	401a74 <setvbuf+0x14c>
  4019f6:	4628      	mov	r0, r5
  4019f8:	b003      	add	sp, #12
  4019fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4019fe:	6921      	ldr	r1, [r4, #16]
  401a00:	4628      	mov	r0, r5
  401a02:	f000 fa75 	bl	401ef0 <_free_r>
  401a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401a0a:	e7bd      	b.n	401988 <setvbuf+0x60>
  401a0c:	4628      	mov	r0, r5
  401a0e:	f000 f9cd 	bl	401dac <__sinit>
  401a12:	e796      	b.n	401942 <setvbuf+0x1a>
  401a14:	2f00      	cmp	r7, #0
  401a16:	d0cb      	beq.n	4019b0 <setvbuf+0x88>
  401a18:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401a1a:	2b00      	cmp	r3, #0
  401a1c:	d033      	beq.n	401a86 <setvbuf+0x15e>
  401a1e:	9b00      	ldr	r3, [sp, #0]
  401a20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  401a24:	6027      	str	r7, [r4, #0]
  401a26:	429e      	cmp	r6, r3
  401a28:	bf1c      	itt	ne
  401a2a:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  401a2e:	81a2      	strhne	r2, [r4, #12]
  401a30:	f1b8 0f01 	cmp.w	r8, #1
  401a34:	bf04      	itt	eq
  401a36:	f042 0201 	orreq.w	r2, r2, #1
  401a3a:	81a2      	strheq	r2, [r4, #12]
  401a3c:	b292      	uxth	r2, r2
  401a3e:	f012 0308 	ands.w	r3, r2, #8
  401a42:	6127      	str	r7, [r4, #16]
  401a44:	6166      	str	r6, [r4, #20]
  401a46:	d00e      	beq.n	401a66 <setvbuf+0x13e>
  401a48:	07d1      	lsls	r1, r2, #31
  401a4a:	d51a      	bpl.n	401a82 <setvbuf+0x15a>
  401a4c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  401a4e:	4276      	negs	r6, r6
  401a50:	2300      	movs	r3, #0
  401a52:	f015 0501 	ands.w	r5, r5, #1
  401a56:	61a6      	str	r6, [r4, #24]
  401a58:	60a3      	str	r3, [r4, #8]
  401a5a:	d009      	beq.n	401a70 <setvbuf+0x148>
  401a5c:	2500      	movs	r5, #0
  401a5e:	4628      	mov	r0, r5
  401a60:	b003      	add	sp, #12
  401a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401a66:	60a3      	str	r3, [r4, #8]
  401a68:	6e65      	ldr	r5, [r4, #100]	; 0x64
  401a6a:	f015 0501 	ands.w	r5, r5, #1
  401a6e:	d1f5      	bne.n	401a5c <setvbuf+0x134>
  401a70:	0593      	lsls	r3, r2, #22
  401a72:	d4c0      	bmi.n	4019f6 <setvbuf+0xce>
  401a74:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401a76:	f000 fcc9 	bl	40240c <__retarget_lock_release_recursive>
  401a7a:	4628      	mov	r0, r5
  401a7c:	b003      	add	sp, #12
  401a7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401a82:	60a6      	str	r6, [r4, #8]
  401a84:	e7f0      	b.n	401a68 <setvbuf+0x140>
  401a86:	4628      	mov	r0, r5
  401a88:	f000 f990 	bl	401dac <__sinit>
  401a8c:	e7c7      	b.n	401a1e <setvbuf+0xf6>
  401a8e:	f04f 35ff 	mov.w	r5, #4294967295
  401a92:	e7b0      	b.n	4019f6 <setvbuf+0xce>
  401a94:	f8dd 9000 	ldr.w	r9, [sp]
  401a98:	45b1      	cmp	r9, r6
  401a9a:	d004      	beq.n	401aa6 <setvbuf+0x17e>
  401a9c:	4648      	mov	r0, r9
  401a9e:	f000 fd2f 	bl	402500 <malloc>
  401aa2:	4607      	mov	r7, r0
  401aa4:	b920      	cbnz	r0, 401ab0 <setvbuf+0x188>
  401aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401aaa:	f04f 35ff 	mov.w	r5, #4294967295
  401aae:	e792      	b.n	4019d6 <setvbuf+0xae>
  401ab0:	464e      	mov	r6, r9
  401ab2:	e783      	b.n	4019bc <setvbuf+0x94>
  401ab4:	20400008 	.word	0x20400008
	...

00401ac0 <strlen>:
  401ac0:	f890 f000 	pld	[r0]
  401ac4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  401ac8:	f020 0107 	bic.w	r1, r0, #7
  401acc:	f06f 0c00 	mvn.w	ip, #0
  401ad0:	f010 0407 	ands.w	r4, r0, #7
  401ad4:	f891 f020 	pld	[r1, #32]
  401ad8:	f040 8049 	bne.w	401b6e <strlen+0xae>
  401adc:	f04f 0400 	mov.w	r4, #0
  401ae0:	f06f 0007 	mvn.w	r0, #7
  401ae4:	e9d1 2300 	ldrd	r2, r3, [r1]
  401ae8:	f891 f040 	pld	[r1, #64]	; 0x40
  401aec:	f100 0008 	add.w	r0, r0, #8
  401af0:	fa82 f24c 	uadd8	r2, r2, ip
  401af4:	faa4 f28c 	sel	r2, r4, ip
  401af8:	fa83 f34c 	uadd8	r3, r3, ip
  401afc:	faa2 f38c 	sel	r3, r2, ip
  401b00:	bb4b      	cbnz	r3, 401b56 <strlen+0x96>
  401b02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  401b06:	fa82 f24c 	uadd8	r2, r2, ip
  401b0a:	f100 0008 	add.w	r0, r0, #8
  401b0e:	faa4 f28c 	sel	r2, r4, ip
  401b12:	fa83 f34c 	uadd8	r3, r3, ip
  401b16:	faa2 f38c 	sel	r3, r2, ip
  401b1a:	b9e3      	cbnz	r3, 401b56 <strlen+0x96>
  401b1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  401b20:	fa82 f24c 	uadd8	r2, r2, ip
  401b24:	f100 0008 	add.w	r0, r0, #8
  401b28:	faa4 f28c 	sel	r2, r4, ip
  401b2c:	fa83 f34c 	uadd8	r3, r3, ip
  401b30:	faa2 f38c 	sel	r3, r2, ip
  401b34:	b97b      	cbnz	r3, 401b56 <strlen+0x96>
  401b36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  401b3a:	f101 0120 	add.w	r1, r1, #32
  401b3e:	fa82 f24c 	uadd8	r2, r2, ip
  401b42:	f100 0008 	add.w	r0, r0, #8
  401b46:	faa4 f28c 	sel	r2, r4, ip
  401b4a:	fa83 f34c 	uadd8	r3, r3, ip
  401b4e:	faa2 f38c 	sel	r3, r2, ip
  401b52:	2b00      	cmp	r3, #0
  401b54:	d0c6      	beq.n	401ae4 <strlen+0x24>
  401b56:	2a00      	cmp	r2, #0
  401b58:	bf04      	itt	eq
  401b5a:	3004      	addeq	r0, #4
  401b5c:	461a      	moveq	r2, r3
  401b5e:	ba12      	rev	r2, r2
  401b60:	fab2 f282 	clz	r2, r2
  401b64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  401b68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  401b6c:	4770      	bx	lr
  401b6e:	e9d1 2300 	ldrd	r2, r3, [r1]
  401b72:	f004 0503 	and.w	r5, r4, #3
  401b76:	f1c4 0000 	rsb	r0, r4, #0
  401b7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  401b7e:	f014 0f04 	tst.w	r4, #4
  401b82:	f891 f040 	pld	[r1, #64]	; 0x40
  401b86:	fa0c f505 	lsl.w	r5, ip, r5
  401b8a:	ea62 0205 	orn	r2, r2, r5
  401b8e:	bf1c      	itt	ne
  401b90:	ea63 0305 	ornne	r3, r3, r5
  401b94:	4662      	movne	r2, ip
  401b96:	f04f 0400 	mov.w	r4, #0
  401b9a:	e7a9      	b.n	401af0 <strlen+0x30>

00401b9c <register_fini>:
  401b9c:	4b02      	ldr	r3, [pc, #8]	; (401ba8 <register_fini+0xc>)
  401b9e:	b113      	cbz	r3, 401ba6 <register_fini+0xa>
  401ba0:	4802      	ldr	r0, [pc, #8]	; (401bac <register_fini+0x10>)
  401ba2:	f000 b805 	b.w	401bb0 <atexit>
  401ba6:	4770      	bx	lr
  401ba8:	00000000 	.word	0x00000000
  401bac:	00401e1d 	.word	0x00401e1d

00401bb0 <atexit>:
  401bb0:	2300      	movs	r3, #0
  401bb2:	4601      	mov	r1, r0
  401bb4:	461a      	mov	r2, r3
  401bb6:	4618      	mov	r0, r3
  401bb8:	f001 bb2a 	b.w	403210 <__register_exitproc>

00401bbc <__sflush_r>:
  401bbc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  401bc0:	b29a      	uxth	r2, r3
  401bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401bc6:	460d      	mov	r5, r1
  401bc8:	0711      	lsls	r1, r2, #28
  401bca:	4680      	mov	r8, r0
  401bcc:	d43a      	bmi.n	401c44 <__sflush_r+0x88>
  401bce:	686a      	ldr	r2, [r5, #4]
  401bd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  401bd4:	2a00      	cmp	r2, #0
  401bd6:	81ab      	strh	r3, [r5, #12]
  401bd8:	dd6f      	ble.n	401cba <__sflush_r+0xfe>
  401bda:	6aac      	ldr	r4, [r5, #40]	; 0x28
  401bdc:	2c00      	cmp	r4, #0
  401bde:	d049      	beq.n	401c74 <__sflush_r+0xb8>
  401be0:	2200      	movs	r2, #0
  401be2:	b29b      	uxth	r3, r3
  401be4:	f8d8 6000 	ldr.w	r6, [r8]
  401be8:	f8c8 2000 	str.w	r2, [r8]
  401bec:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  401bf0:	d067      	beq.n	401cc2 <__sflush_r+0x106>
  401bf2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  401bf4:	075f      	lsls	r7, r3, #29
  401bf6:	d505      	bpl.n	401c04 <__sflush_r+0x48>
  401bf8:	6869      	ldr	r1, [r5, #4]
  401bfa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  401bfc:	1a52      	subs	r2, r2, r1
  401bfe:	b10b      	cbz	r3, 401c04 <__sflush_r+0x48>
  401c00:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  401c02:	1ad2      	subs	r2, r2, r3
  401c04:	2300      	movs	r3, #0
  401c06:	69e9      	ldr	r1, [r5, #28]
  401c08:	4640      	mov	r0, r8
  401c0a:	47a0      	blx	r4
  401c0c:	1c44      	adds	r4, r0, #1
  401c0e:	d03c      	beq.n	401c8a <__sflush_r+0xce>
  401c10:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  401c14:	692a      	ldr	r2, [r5, #16]
  401c16:	602a      	str	r2, [r5, #0]
  401c18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  401c1c:	2200      	movs	r2, #0
  401c1e:	81ab      	strh	r3, [r5, #12]
  401c20:	04db      	lsls	r3, r3, #19
  401c22:	606a      	str	r2, [r5, #4]
  401c24:	d447      	bmi.n	401cb6 <__sflush_r+0xfa>
  401c26:	6b29      	ldr	r1, [r5, #48]	; 0x30
  401c28:	f8c8 6000 	str.w	r6, [r8]
  401c2c:	b311      	cbz	r1, 401c74 <__sflush_r+0xb8>
  401c2e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  401c32:	4299      	cmp	r1, r3
  401c34:	d002      	beq.n	401c3c <__sflush_r+0x80>
  401c36:	4640      	mov	r0, r8
  401c38:	f000 f95a 	bl	401ef0 <_free_r>
  401c3c:	2000      	movs	r0, #0
  401c3e:	6328      	str	r0, [r5, #48]	; 0x30
  401c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401c44:	692e      	ldr	r6, [r5, #16]
  401c46:	b1ae      	cbz	r6, 401c74 <__sflush_r+0xb8>
  401c48:	682c      	ldr	r4, [r5, #0]
  401c4a:	602e      	str	r6, [r5, #0]
  401c4c:	0791      	lsls	r1, r2, #30
  401c4e:	bf0c      	ite	eq
  401c50:	696b      	ldreq	r3, [r5, #20]
  401c52:	2300      	movne	r3, #0
  401c54:	1ba4      	subs	r4, r4, r6
  401c56:	60ab      	str	r3, [r5, #8]
  401c58:	e00a      	b.n	401c70 <__sflush_r+0xb4>
  401c5a:	4623      	mov	r3, r4
  401c5c:	4632      	mov	r2, r6
  401c5e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  401c60:	69e9      	ldr	r1, [r5, #28]
  401c62:	4640      	mov	r0, r8
  401c64:	47b8      	blx	r7
  401c66:	2800      	cmp	r0, #0
  401c68:	eba4 0400 	sub.w	r4, r4, r0
  401c6c:	4406      	add	r6, r0
  401c6e:	dd04      	ble.n	401c7a <__sflush_r+0xbe>
  401c70:	2c00      	cmp	r4, #0
  401c72:	dcf2      	bgt.n	401c5a <__sflush_r+0x9e>
  401c74:	2000      	movs	r0, #0
  401c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401c7a:	89ab      	ldrh	r3, [r5, #12]
  401c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401c80:	81ab      	strh	r3, [r5, #12]
  401c82:	f04f 30ff 	mov.w	r0, #4294967295
  401c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401c8a:	f8d8 4000 	ldr.w	r4, [r8]
  401c8e:	2c1d      	cmp	r4, #29
  401c90:	d8f3      	bhi.n	401c7a <__sflush_r+0xbe>
  401c92:	4b19      	ldr	r3, [pc, #100]	; (401cf8 <__sflush_r+0x13c>)
  401c94:	40e3      	lsrs	r3, r4
  401c96:	43db      	mvns	r3, r3
  401c98:	f013 0301 	ands.w	r3, r3, #1
  401c9c:	d1ed      	bne.n	401c7a <__sflush_r+0xbe>
  401c9e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  401ca2:	606b      	str	r3, [r5, #4]
  401ca4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  401ca8:	6929      	ldr	r1, [r5, #16]
  401caa:	81ab      	strh	r3, [r5, #12]
  401cac:	04da      	lsls	r2, r3, #19
  401cae:	6029      	str	r1, [r5, #0]
  401cb0:	d5b9      	bpl.n	401c26 <__sflush_r+0x6a>
  401cb2:	2c00      	cmp	r4, #0
  401cb4:	d1b7      	bne.n	401c26 <__sflush_r+0x6a>
  401cb6:	6528      	str	r0, [r5, #80]	; 0x50
  401cb8:	e7b5      	b.n	401c26 <__sflush_r+0x6a>
  401cba:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  401cbc:	2a00      	cmp	r2, #0
  401cbe:	dc8c      	bgt.n	401bda <__sflush_r+0x1e>
  401cc0:	e7d8      	b.n	401c74 <__sflush_r+0xb8>
  401cc2:	2301      	movs	r3, #1
  401cc4:	69e9      	ldr	r1, [r5, #28]
  401cc6:	4640      	mov	r0, r8
  401cc8:	47a0      	blx	r4
  401cca:	1c43      	adds	r3, r0, #1
  401ccc:	4602      	mov	r2, r0
  401cce:	d002      	beq.n	401cd6 <__sflush_r+0x11a>
  401cd0:	89ab      	ldrh	r3, [r5, #12]
  401cd2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  401cd4:	e78e      	b.n	401bf4 <__sflush_r+0x38>
  401cd6:	f8d8 3000 	ldr.w	r3, [r8]
  401cda:	2b00      	cmp	r3, #0
  401cdc:	d0f8      	beq.n	401cd0 <__sflush_r+0x114>
  401cde:	2b1d      	cmp	r3, #29
  401ce0:	d001      	beq.n	401ce6 <__sflush_r+0x12a>
  401ce2:	2b16      	cmp	r3, #22
  401ce4:	d102      	bne.n	401cec <__sflush_r+0x130>
  401ce6:	f8c8 6000 	str.w	r6, [r8]
  401cea:	e7c3      	b.n	401c74 <__sflush_r+0xb8>
  401cec:	89ab      	ldrh	r3, [r5, #12]
  401cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401cf2:	81ab      	strh	r3, [r5, #12]
  401cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401cf8:	20400001 	.word	0x20400001

00401cfc <_fflush_r>:
  401cfc:	b538      	push	{r3, r4, r5, lr}
  401cfe:	460d      	mov	r5, r1
  401d00:	4604      	mov	r4, r0
  401d02:	b108      	cbz	r0, 401d08 <_fflush_r+0xc>
  401d04:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401d06:	b1bb      	cbz	r3, 401d38 <_fflush_r+0x3c>
  401d08:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  401d0c:	b188      	cbz	r0, 401d32 <_fflush_r+0x36>
  401d0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  401d10:	07db      	lsls	r3, r3, #31
  401d12:	d401      	bmi.n	401d18 <_fflush_r+0x1c>
  401d14:	0581      	lsls	r1, r0, #22
  401d16:	d517      	bpl.n	401d48 <_fflush_r+0x4c>
  401d18:	4620      	mov	r0, r4
  401d1a:	4629      	mov	r1, r5
  401d1c:	f7ff ff4e 	bl	401bbc <__sflush_r>
  401d20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  401d22:	07da      	lsls	r2, r3, #31
  401d24:	4604      	mov	r4, r0
  401d26:	d402      	bmi.n	401d2e <_fflush_r+0x32>
  401d28:	89ab      	ldrh	r3, [r5, #12]
  401d2a:	059b      	lsls	r3, r3, #22
  401d2c:	d507      	bpl.n	401d3e <_fflush_r+0x42>
  401d2e:	4620      	mov	r0, r4
  401d30:	bd38      	pop	{r3, r4, r5, pc}
  401d32:	4604      	mov	r4, r0
  401d34:	4620      	mov	r0, r4
  401d36:	bd38      	pop	{r3, r4, r5, pc}
  401d38:	f000 f838 	bl	401dac <__sinit>
  401d3c:	e7e4      	b.n	401d08 <_fflush_r+0xc>
  401d3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  401d40:	f000 fb64 	bl	40240c <__retarget_lock_release_recursive>
  401d44:	4620      	mov	r0, r4
  401d46:	bd38      	pop	{r3, r4, r5, pc}
  401d48:	6da8      	ldr	r0, [r5, #88]	; 0x58
  401d4a:	f000 fb5d 	bl	402408 <__retarget_lock_acquire_recursive>
  401d4e:	e7e3      	b.n	401d18 <_fflush_r+0x1c>

00401d50 <_cleanup_r>:
  401d50:	4901      	ldr	r1, [pc, #4]	; (401d58 <_cleanup_r+0x8>)
  401d52:	f000 bb2b 	b.w	4023ac <_fwalk_reent>
  401d56:	bf00      	nop
  401d58:	004032f9 	.word	0x004032f9

00401d5c <std.isra.0>:
  401d5c:	b510      	push	{r4, lr}
  401d5e:	2300      	movs	r3, #0
  401d60:	4604      	mov	r4, r0
  401d62:	8181      	strh	r1, [r0, #12]
  401d64:	81c2      	strh	r2, [r0, #14]
  401d66:	6003      	str	r3, [r0, #0]
  401d68:	6043      	str	r3, [r0, #4]
  401d6a:	6083      	str	r3, [r0, #8]
  401d6c:	6643      	str	r3, [r0, #100]	; 0x64
  401d6e:	6103      	str	r3, [r0, #16]
  401d70:	6143      	str	r3, [r0, #20]
  401d72:	6183      	str	r3, [r0, #24]
  401d74:	4619      	mov	r1, r3
  401d76:	2208      	movs	r2, #8
  401d78:	305c      	adds	r0, #92	; 0x5c
  401d7a:	f7ff fd29 	bl	4017d0 <memset>
  401d7e:	4807      	ldr	r0, [pc, #28]	; (401d9c <std.isra.0+0x40>)
  401d80:	4907      	ldr	r1, [pc, #28]	; (401da0 <std.isra.0+0x44>)
  401d82:	4a08      	ldr	r2, [pc, #32]	; (401da4 <std.isra.0+0x48>)
  401d84:	4b08      	ldr	r3, [pc, #32]	; (401da8 <std.isra.0+0x4c>)
  401d86:	6220      	str	r0, [r4, #32]
  401d88:	61e4      	str	r4, [r4, #28]
  401d8a:	6261      	str	r1, [r4, #36]	; 0x24
  401d8c:	62a2      	str	r2, [r4, #40]	; 0x28
  401d8e:	62e3      	str	r3, [r4, #44]	; 0x2c
  401d90:	f104 0058 	add.w	r0, r4, #88	; 0x58
  401d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  401d98:	f000 bb32 	b.w	402400 <__retarget_lock_init_recursive>
  401d9c:	00403095 	.word	0x00403095
  401da0:	004030b9 	.word	0x004030b9
  401da4:	004030f5 	.word	0x004030f5
  401da8:	00403115 	.word	0x00403115

00401dac <__sinit>:
  401dac:	b510      	push	{r4, lr}
  401dae:	4604      	mov	r4, r0
  401db0:	4812      	ldr	r0, [pc, #72]	; (401dfc <__sinit+0x50>)
  401db2:	f000 fb29 	bl	402408 <__retarget_lock_acquire_recursive>
  401db6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401db8:	b9d2      	cbnz	r2, 401df0 <__sinit+0x44>
  401dba:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  401dbe:	4810      	ldr	r0, [pc, #64]	; (401e00 <__sinit+0x54>)
  401dc0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  401dc4:	2103      	movs	r1, #3
  401dc6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  401dca:	63e0      	str	r0, [r4, #60]	; 0x3c
  401dcc:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  401dd0:	6860      	ldr	r0, [r4, #4]
  401dd2:	2104      	movs	r1, #4
  401dd4:	f7ff ffc2 	bl	401d5c <std.isra.0>
  401dd8:	2201      	movs	r2, #1
  401dda:	2109      	movs	r1, #9
  401ddc:	68a0      	ldr	r0, [r4, #8]
  401dde:	f7ff ffbd 	bl	401d5c <std.isra.0>
  401de2:	2202      	movs	r2, #2
  401de4:	2112      	movs	r1, #18
  401de6:	68e0      	ldr	r0, [r4, #12]
  401de8:	f7ff ffb8 	bl	401d5c <std.isra.0>
  401dec:	2301      	movs	r3, #1
  401dee:	63a3      	str	r3, [r4, #56]	; 0x38
  401df0:	4802      	ldr	r0, [pc, #8]	; (401dfc <__sinit+0x50>)
  401df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  401df6:	f000 bb09 	b.w	40240c <__retarget_lock_release_recursive>
  401dfa:	bf00      	nop
  401dfc:	20400bc0 	.word	0x20400bc0
  401e00:	00401d51 	.word	0x00401d51

00401e04 <__sfp_lock_acquire>:
  401e04:	4801      	ldr	r0, [pc, #4]	; (401e0c <__sfp_lock_acquire+0x8>)
  401e06:	f000 baff 	b.w	402408 <__retarget_lock_acquire_recursive>
  401e0a:	bf00      	nop
  401e0c:	20400bd4 	.word	0x20400bd4

00401e10 <__sfp_lock_release>:
  401e10:	4801      	ldr	r0, [pc, #4]	; (401e18 <__sfp_lock_release+0x8>)
  401e12:	f000 bafb 	b.w	40240c <__retarget_lock_release_recursive>
  401e16:	bf00      	nop
  401e18:	20400bd4 	.word	0x20400bd4

00401e1c <__libc_fini_array>:
  401e1c:	b538      	push	{r3, r4, r5, lr}
  401e1e:	4c0a      	ldr	r4, [pc, #40]	; (401e48 <__libc_fini_array+0x2c>)
  401e20:	4d0a      	ldr	r5, [pc, #40]	; (401e4c <__libc_fini_array+0x30>)
  401e22:	1b64      	subs	r4, r4, r5
  401e24:	10a4      	asrs	r4, r4, #2
  401e26:	d00a      	beq.n	401e3e <__libc_fini_array+0x22>
  401e28:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  401e2c:	3b01      	subs	r3, #1
  401e2e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  401e32:	3c01      	subs	r4, #1
  401e34:	f855 3904 	ldr.w	r3, [r5], #-4
  401e38:	4798      	blx	r3
  401e3a:	2c00      	cmp	r4, #0
  401e3c:	d1f9      	bne.n	401e32 <__libc_fini_array+0x16>
  401e3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401e42:	f001 beef 	b.w	403c24 <_fini>
  401e46:	bf00      	nop
  401e48:	00403c34 	.word	0x00403c34
  401e4c:	00403c30 	.word	0x00403c30

00401e50 <_malloc_trim_r>:
  401e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401e52:	4f24      	ldr	r7, [pc, #144]	; (401ee4 <_malloc_trim_r+0x94>)
  401e54:	460c      	mov	r4, r1
  401e56:	4606      	mov	r6, r0
  401e58:	f000 ff58 	bl	402d0c <__malloc_lock>
  401e5c:	68bb      	ldr	r3, [r7, #8]
  401e5e:	685d      	ldr	r5, [r3, #4]
  401e60:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  401e64:	310f      	adds	r1, #15
  401e66:	f025 0503 	bic.w	r5, r5, #3
  401e6a:	4429      	add	r1, r5
  401e6c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  401e70:	f021 010f 	bic.w	r1, r1, #15
  401e74:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  401e78:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  401e7c:	db07      	blt.n	401e8e <_malloc_trim_r+0x3e>
  401e7e:	2100      	movs	r1, #0
  401e80:	4630      	mov	r0, r6
  401e82:	f001 f8f5 	bl	403070 <_sbrk_r>
  401e86:	68bb      	ldr	r3, [r7, #8]
  401e88:	442b      	add	r3, r5
  401e8a:	4298      	cmp	r0, r3
  401e8c:	d004      	beq.n	401e98 <_malloc_trim_r+0x48>
  401e8e:	4630      	mov	r0, r6
  401e90:	f000 ff42 	bl	402d18 <__malloc_unlock>
  401e94:	2000      	movs	r0, #0
  401e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401e98:	4261      	negs	r1, r4
  401e9a:	4630      	mov	r0, r6
  401e9c:	f001 f8e8 	bl	403070 <_sbrk_r>
  401ea0:	3001      	adds	r0, #1
  401ea2:	d00d      	beq.n	401ec0 <_malloc_trim_r+0x70>
  401ea4:	4b10      	ldr	r3, [pc, #64]	; (401ee8 <_malloc_trim_r+0x98>)
  401ea6:	68ba      	ldr	r2, [r7, #8]
  401ea8:	6819      	ldr	r1, [r3, #0]
  401eaa:	1b2d      	subs	r5, r5, r4
  401eac:	f045 0501 	orr.w	r5, r5, #1
  401eb0:	4630      	mov	r0, r6
  401eb2:	1b09      	subs	r1, r1, r4
  401eb4:	6055      	str	r5, [r2, #4]
  401eb6:	6019      	str	r1, [r3, #0]
  401eb8:	f000 ff2e 	bl	402d18 <__malloc_unlock>
  401ebc:	2001      	movs	r0, #1
  401ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401ec0:	2100      	movs	r1, #0
  401ec2:	4630      	mov	r0, r6
  401ec4:	f001 f8d4 	bl	403070 <_sbrk_r>
  401ec8:	68ba      	ldr	r2, [r7, #8]
  401eca:	1a83      	subs	r3, r0, r2
  401ecc:	2b0f      	cmp	r3, #15
  401ece:	ddde      	ble.n	401e8e <_malloc_trim_r+0x3e>
  401ed0:	4c06      	ldr	r4, [pc, #24]	; (401eec <_malloc_trim_r+0x9c>)
  401ed2:	4905      	ldr	r1, [pc, #20]	; (401ee8 <_malloc_trim_r+0x98>)
  401ed4:	6824      	ldr	r4, [r4, #0]
  401ed6:	f043 0301 	orr.w	r3, r3, #1
  401eda:	1b00      	subs	r0, r0, r4
  401edc:	6053      	str	r3, [r2, #4]
  401ede:	6008      	str	r0, [r1, #0]
  401ee0:	e7d5      	b.n	401e8e <_malloc_trim_r+0x3e>
  401ee2:	bf00      	nop
  401ee4:	2040043c 	.word	0x2040043c
  401ee8:	20400b60 	.word	0x20400b60
  401eec:	20400844 	.word	0x20400844

00401ef0 <_free_r>:
  401ef0:	2900      	cmp	r1, #0
  401ef2:	d044      	beq.n	401f7e <_free_r+0x8e>
  401ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401ef8:	460d      	mov	r5, r1
  401efa:	4680      	mov	r8, r0
  401efc:	f000 ff06 	bl	402d0c <__malloc_lock>
  401f00:	f855 7c04 	ldr.w	r7, [r5, #-4]
  401f04:	4969      	ldr	r1, [pc, #420]	; (4020ac <_free_r+0x1bc>)
  401f06:	f027 0301 	bic.w	r3, r7, #1
  401f0a:	f1a5 0408 	sub.w	r4, r5, #8
  401f0e:	18e2      	adds	r2, r4, r3
  401f10:	688e      	ldr	r6, [r1, #8]
  401f12:	6850      	ldr	r0, [r2, #4]
  401f14:	42b2      	cmp	r2, r6
  401f16:	f020 0003 	bic.w	r0, r0, #3
  401f1a:	d05e      	beq.n	401fda <_free_r+0xea>
  401f1c:	07fe      	lsls	r6, r7, #31
  401f1e:	6050      	str	r0, [r2, #4]
  401f20:	d40b      	bmi.n	401f3a <_free_r+0x4a>
  401f22:	f855 7c08 	ldr.w	r7, [r5, #-8]
  401f26:	1be4      	subs	r4, r4, r7
  401f28:	f101 0e08 	add.w	lr, r1, #8
  401f2c:	68a5      	ldr	r5, [r4, #8]
  401f2e:	4575      	cmp	r5, lr
  401f30:	443b      	add	r3, r7
  401f32:	d06d      	beq.n	402010 <_free_r+0x120>
  401f34:	68e7      	ldr	r7, [r4, #12]
  401f36:	60ef      	str	r7, [r5, #12]
  401f38:	60bd      	str	r5, [r7, #8]
  401f3a:	1815      	adds	r5, r2, r0
  401f3c:	686d      	ldr	r5, [r5, #4]
  401f3e:	07ed      	lsls	r5, r5, #31
  401f40:	d53e      	bpl.n	401fc0 <_free_r+0xd0>
  401f42:	f043 0201 	orr.w	r2, r3, #1
  401f46:	6062      	str	r2, [r4, #4]
  401f48:	50e3      	str	r3, [r4, r3]
  401f4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401f4e:	d217      	bcs.n	401f80 <_free_r+0x90>
  401f50:	08db      	lsrs	r3, r3, #3
  401f52:	1c58      	adds	r0, r3, #1
  401f54:	109a      	asrs	r2, r3, #2
  401f56:	684d      	ldr	r5, [r1, #4]
  401f58:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  401f5c:	60a7      	str	r7, [r4, #8]
  401f5e:	2301      	movs	r3, #1
  401f60:	4093      	lsls	r3, r2
  401f62:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  401f66:	432b      	orrs	r3, r5
  401f68:	3a08      	subs	r2, #8
  401f6a:	60e2      	str	r2, [r4, #12]
  401f6c:	604b      	str	r3, [r1, #4]
  401f6e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  401f72:	60fc      	str	r4, [r7, #12]
  401f74:	4640      	mov	r0, r8
  401f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401f7a:	f000 becd 	b.w	402d18 <__malloc_unlock>
  401f7e:	4770      	bx	lr
  401f80:	0a5a      	lsrs	r2, r3, #9
  401f82:	2a04      	cmp	r2, #4
  401f84:	d852      	bhi.n	40202c <_free_r+0x13c>
  401f86:	099a      	lsrs	r2, r3, #6
  401f88:	f102 0739 	add.w	r7, r2, #57	; 0x39
  401f8c:	00ff      	lsls	r7, r7, #3
  401f8e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  401f92:	19c8      	adds	r0, r1, r7
  401f94:	59ca      	ldr	r2, [r1, r7]
  401f96:	3808      	subs	r0, #8
  401f98:	4290      	cmp	r0, r2
  401f9a:	d04f      	beq.n	40203c <_free_r+0x14c>
  401f9c:	6851      	ldr	r1, [r2, #4]
  401f9e:	f021 0103 	bic.w	r1, r1, #3
  401fa2:	428b      	cmp	r3, r1
  401fa4:	d232      	bcs.n	40200c <_free_r+0x11c>
  401fa6:	6892      	ldr	r2, [r2, #8]
  401fa8:	4290      	cmp	r0, r2
  401faa:	d1f7      	bne.n	401f9c <_free_r+0xac>
  401fac:	68c3      	ldr	r3, [r0, #12]
  401fae:	60a0      	str	r0, [r4, #8]
  401fb0:	60e3      	str	r3, [r4, #12]
  401fb2:	609c      	str	r4, [r3, #8]
  401fb4:	60c4      	str	r4, [r0, #12]
  401fb6:	4640      	mov	r0, r8
  401fb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401fbc:	f000 beac 	b.w	402d18 <__malloc_unlock>
  401fc0:	6895      	ldr	r5, [r2, #8]
  401fc2:	4f3b      	ldr	r7, [pc, #236]	; (4020b0 <_free_r+0x1c0>)
  401fc4:	42bd      	cmp	r5, r7
  401fc6:	4403      	add	r3, r0
  401fc8:	d040      	beq.n	40204c <_free_r+0x15c>
  401fca:	68d0      	ldr	r0, [r2, #12]
  401fcc:	60e8      	str	r0, [r5, #12]
  401fce:	f043 0201 	orr.w	r2, r3, #1
  401fd2:	6085      	str	r5, [r0, #8]
  401fd4:	6062      	str	r2, [r4, #4]
  401fd6:	50e3      	str	r3, [r4, r3]
  401fd8:	e7b7      	b.n	401f4a <_free_r+0x5a>
  401fda:	07ff      	lsls	r7, r7, #31
  401fdc:	4403      	add	r3, r0
  401fde:	d407      	bmi.n	401ff0 <_free_r+0x100>
  401fe0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  401fe4:	1aa4      	subs	r4, r4, r2
  401fe6:	4413      	add	r3, r2
  401fe8:	68a0      	ldr	r0, [r4, #8]
  401fea:	68e2      	ldr	r2, [r4, #12]
  401fec:	60c2      	str	r2, [r0, #12]
  401fee:	6090      	str	r0, [r2, #8]
  401ff0:	4a30      	ldr	r2, [pc, #192]	; (4020b4 <_free_r+0x1c4>)
  401ff2:	6812      	ldr	r2, [r2, #0]
  401ff4:	f043 0001 	orr.w	r0, r3, #1
  401ff8:	4293      	cmp	r3, r2
  401ffa:	6060      	str	r0, [r4, #4]
  401ffc:	608c      	str	r4, [r1, #8]
  401ffe:	d3b9      	bcc.n	401f74 <_free_r+0x84>
  402000:	4b2d      	ldr	r3, [pc, #180]	; (4020b8 <_free_r+0x1c8>)
  402002:	4640      	mov	r0, r8
  402004:	6819      	ldr	r1, [r3, #0]
  402006:	f7ff ff23 	bl	401e50 <_malloc_trim_r>
  40200a:	e7b3      	b.n	401f74 <_free_r+0x84>
  40200c:	4610      	mov	r0, r2
  40200e:	e7cd      	b.n	401fac <_free_r+0xbc>
  402010:	1811      	adds	r1, r2, r0
  402012:	6849      	ldr	r1, [r1, #4]
  402014:	07c9      	lsls	r1, r1, #31
  402016:	d444      	bmi.n	4020a2 <_free_r+0x1b2>
  402018:	6891      	ldr	r1, [r2, #8]
  40201a:	68d2      	ldr	r2, [r2, #12]
  40201c:	60ca      	str	r2, [r1, #12]
  40201e:	4403      	add	r3, r0
  402020:	f043 0001 	orr.w	r0, r3, #1
  402024:	6091      	str	r1, [r2, #8]
  402026:	6060      	str	r0, [r4, #4]
  402028:	50e3      	str	r3, [r4, r3]
  40202a:	e7a3      	b.n	401f74 <_free_r+0x84>
  40202c:	2a14      	cmp	r2, #20
  40202e:	d816      	bhi.n	40205e <_free_r+0x16e>
  402030:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  402034:	00ff      	lsls	r7, r7, #3
  402036:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40203a:	e7aa      	b.n	401f92 <_free_r+0xa2>
  40203c:	10aa      	asrs	r2, r5, #2
  40203e:	2301      	movs	r3, #1
  402040:	684d      	ldr	r5, [r1, #4]
  402042:	4093      	lsls	r3, r2
  402044:	432b      	orrs	r3, r5
  402046:	604b      	str	r3, [r1, #4]
  402048:	4603      	mov	r3, r0
  40204a:	e7b0      	b.n	401fae <_free_r+0xbe>
  40204c:	f043 0201 	orr.w	r2, r3, #1
  402050:	614c      	str	r4, [r1, #20]
  402052:	610c      	str	r4, [r1, #16]
  402054:	60e5      	str	r5, [r4, #12]
  402056:	60a5      	str	r5, [r4, #8]
  402058:	6062      	str	r2, [r4, #4]
  40205a:	50e3      	str	r3, [r4, r3]
  40205c:	e78a      	b.n	401f74 <_free_r+0x84>
  40205e:	2a54      	cmp	r2, #84	; 0x54
  402060:	d806      	bhi.n	402070 <_free_r+0x180>
  402062:	0b1a      	lsrs	r2, r3, #12
  402064:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  402068:	00ff      	lsls	r7, r7, #3
  40206a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40206e:	e790      	b.n	401f92 <_free_r+0xa2>
  402070:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402074:	d806      	bhi.n	402084 <_free_r+0x194>
  402076:	0bda      	lsrs	r2, r3, #15
  402078:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40207c:	00ff      	lsls	r7, r7, #3
  40207e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  402082:	e786      	b.n	401f92 <_free_r+0xa2>
  402084:	f240 5054 	movw	r0, #1364	; 0x554
  402088:	4282      	cmp	r2, r0
  40208a:	d806      	bhi.n	40209a <_free_r+0x1aa>
  40208c:	0c9a      	lsrs	r2, r3, #18
  40208e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  402092:	00ff      	lsls	r7, r7, #3
  402094:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  402098:	e77b      	b.n	401f92 <_free_r+0xa2>
  40209a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40209e:	257e      	movs	r5, #126	; 0x7e
  4020a0:	e777      	b.n	401f92 <_free_r+0xa2>
  4020a2:	f043 0101 	orr.w	r1, r3, #1
  4020a6:	6061      	str	r1, [r4, #4]
  4020a8:	6013      	str	r3, [r2, #0]
  4020aa:	e763      	b.n	401f74 <_free_r+0x84>
  4020ac:	2040043c 	.word	0x2040043c
  4020b0:	20400444 	.word	0x20400444
  4020b4:	20400848 	.word	0x20400848
  4020b8:	20400b90 	.word	0x20400b90

004020bc <__sfvwrite_r>:
  4020bc:	6893      	ldr	r3, [r2, #8]
  4020be:	2b00      	cmp	r3, #0
  4020c0:	d073      	beq.n	4021aa <__sfvwrite_r+0xee>
  4020c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4020c6:	898b      	ldrh	r3, [r1, #12]
  4020c8:	b083      	sub	sp, #12
  4020ca:	460c      	mov	r4, r1
  4020cc:	0719      	lsls	r1, r3, #28
  4020ce:	9000      	str	r0, [sp, #0]
  4020d0:	4616      	mov	r6, r2
  4020d2:	d526      	bpl.n	402122 <__sfvwrite_r+0x66>
  4020d4:	6922      	ldr	r2, [r4, #16]
  4020d6:	b322      	cbz	r2, 402122 <__sfvwrite_r+0x66>
  4020d8:	f013 0002 	ands.w	r0, r3, #2
  4020dc:	6835      	ldr	r5, [r6, #0]
  4020de:	d02c      	beq.n	40213a <__sfvwrite_r+0x7e>
  4020e0:	f04f 0900 	mov.w	r9, #0
  4020e4:	4fb0      	ldr	r7, [pc, #704]	; (4023a8 <__sfvwrite_r+0x2ec>)
  4020e6:	46c8      	mov	r8, r9
  4020e8:	46b2      	mov	sl, r6
  4020ea:	45b8      	cmp	r8, r7
  4020ec:	4643      	mov	r3, r8
  4020ee:	464a      	mov	r2, r9
  4020f0:	bf28      	it	cs
  4020f2:	463b      	movcs	r3, r7
  4020f4:	9800      	ldr	r0, [sp, #0]
  4020f6:	f1b8 0f00 	cmp.w	r8, #0
  4020fa:	d050      	beq.n	40219e <__sfvwrite_r+0xe2>
  4020fc:	69e1      	ldr	r1, [r4, #28]
  4020fe:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402100:	47b0      	blx	r6
  402102:	2800      	cmp	r0, #0
  402104:	dd58      	ble.n	4021b8 <__sfvwrite_r+0xfc>
  402106:	f8da 3008 	ldr.w	r3, [sl, #8]
  40210a:	1a1b      	subs	r3, r3, r0
  40210c:	4481      	add	r9, r0
  40210e:	eba8 0800 	sub.w	r8, r8, r0
  402112:	f8ca 3008 	str.w	r3, [sl, #8]
  402116:	2b00      	cmp	r3, #0
  402118:	d1e7      	bne.n	4020ea <__sfvwrite_r+0x2e>
  40211a:	2000      	movs	r0, #0
  40211c:	b003      	add	sp, #12
  40211e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402122:	4621      	mov	r1, r4
  402124:	9800      	ldr	r0, [sp, #0]
  402126:	f001 f80f 	bl	403148 <__swsetup_r>
  40212a:	2800      	cmp	r0, #0
  40212c:	f040 8133 	bne.w	402396 <__sfvwrite_r+0x2da>
  402130:	89a3      	ldrh	r3, [r4, #12]
  402132:	6835      	ldr	r5, [r6, #0]
  402134:	f013 0002 	ands.w	r0, r3, #2
  402138:	d1d2      	bne.n	4020e0 <__sfvwrite_r+0x24>
  40213a:	f013 0901 	ands.w	r9, r3, #1
  40213e:	d145      	bne.n	4021cc <__sfvwrite_r+0x110>
  402140:	464f      	mov	r7, r9
  402142:	9601      	str	r6, [sp, #4]
  402144:	b337      	cbz	r7, 402194 <__sfvwrite_r+0xd8>
  402146:	059a      	lsls	r2, r3, #22
  402148:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40214c:	f140 8083 	bpl.w	402256 <__sfvwrite_r+0x19a>
  402150:	4547      	cmp	r7, r8
  402152:	46c3      	mov	fp, r8
  402154:	f0c0 80ab 	bcc.w	4022ae <__sfvwrite_r+0x1f2>
  402158:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40215c:	f040 80ac 	bne.w	4022b8 <__sfvwrite_r+0x1fc>
  402160:	6820      	ldr	r0, [r4, #0]
  402162:	46ba      	mov	sl, r7
  402164:	465a      	mov	r2, fp
  402166:	4649      	mov	r1, r9
  402168:	f000 fd6c 	bl	402c44 <memmove>
  40216c:	68a2      	ldr	r2, [r4, #8]
  40216e:	6823      	ldr	r3, [r4, #0]
  402170:	eba2 0208 	sub.w	r2, r2, r8
  402174:	445b      	add	r3, fp
  402176:	60a2      	str	r2, [r4, #8]
  402178:	6023      	str	r3, [r4, #0]
  40217a:	9a01      	ldr	r2, [sp, #4]
  40217c:	6893      	ldr	r3, [r2, #8]
  40217e:	eba3 030a 	sub.w	r3, r3, sl
  402182:	44d1      	add	r9, sl
  402184:	eba7 070a 	sub.w	r7, r7, sl
  402188:	6093      	str	r3, [r2, #8]
  40218a:	2b00      	cmp	r3, #0
  40218c:	d0c5      	beq.n	40211a <__sfvwrite_r+0x5e>
  40218e:	89a3      	ldrh	r3, [r4, #12]
  402190:	2f00      	cmp	r7, #0
  402192:	d1d8      	bne.n	402146 <__sfvwrite_r+0x8a>
  402194:	f8d5 9000 	ldr.w	r9, [r5]
  402198:	686f      	ldr	r7, [r5, #4]
  40219a:	3508      	adds	r5, #8
  40219c:	e7d2      	b.n	402144 <__sfvwrite_r+0x88>
  40219e:	f8d5 9000 	ldr.w	r9, [r5]
  4021a2:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4021a6:	3508      	adds	r5, #8
  4021a8:	e79f      	b.n	4020ea <__sfvwrite_r+0x2e>
  4021aa:	2000      	movs	r0, #0
  4021ac:	4770      	bx	lr
  4021ae:	4621      	mov	r1, r4
  4021b0:	9800      	ldr	r0, [sp, #0]
  4021b2:	f7ff fda3 	bl	401cfc <_fflush_r>
  4021b6:	b370      	cbz	r0, 402216 <__sfvwrite_r+0x15a>
  4021b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4021bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4021c0:	f04f 30ff 	mov.w	r0, #4294967295
  4021c4:	81a3      	strh	r3, [r4, #12]
  4021c6:	b003      	add	sp, #12
  4021c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4021cc:	4681      	mov	r9, r0
  4021ce:	4633      	mov	r3, r6
  4021d0:	464e      	mov	r6, r9
  4021d2:	46a8      	mov	r8, r5
  4021d4:	469a      	mov	sl, r3
  4021d6:	464d      	mov	r5, r9
  4021d8:	b34e      	cbz	r6, 40222e <__sfvwrite_r+0x172>
  4021da:	b380      	cbz	r0, 40223e <__sfvwrite_r+0x182>
  4021dc:	6820      	ldr	r0, [r4, #0]
  4021de:	6923      	ldr	r3, [r4, #16]
  4021e0:	6962      	ldr	r2, [r4, #20]
  4021e2:	45b1      	cmp	r9, r6
  4021e4:	46cb      	mov	fp, r9
  4021e6:	bf28      	it	cs
  4021e8:	46b3      	movcs	fp, r6
  4021ea:	4298      	cmp	r0, r3
  4021ec:	465f      	mov	r7, fp
  4021ee:	d904      	bls.n	4021fa <__sfvwrite_r+0x13e>
  4021f0:	68a3      	ldr	r3, [r4, #8]
  4021f2:	4413      	add	r3, r2
  4021f4:	459b      	cmp	fp, r3
  4021f6:	f300 80a6 	bgt.w	402346 <__sfvwrite_r+0x28a>
  4021fa:	4593      	cmp	fp, r2
  4021fc:	db4b      	blt.n	402296 <__sfvwrite_r+0x1da>
  4021fe:	4613      	mov	r3, r2
  402200:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402202:	69e1      	ldr	r1, [r4, #28]
  402204:	9800      	ldr	r0, [sp, #0]
  402206:	462a      	mov	r2, r5
  402208:	47b8      	blx	r7
  40220a:	1e07      	subs	r7, r0, #0
  40220c:	ddd4      	ble.n	4021b8 <__sfvwrite_r+0xfc>
  40220e:	ebb9 0907 	subs.w	r9, r9, r7
  402212:	d0cc      	beq.n	4021ae <__sfvwrite_r+0xf2>
  402214:	2001      	movs	r0, #1
  402216:	f8da 3008 	ldr.w	r3, [sl, #8]
  40221a:	1bdb      	subs	r3, r3, r7
  40221c:	443d      	add	r5, r7
  40221e:	1bf6      	subs	r6, r6, r7
  402220:	f8ca 3008 	str.w	r3, [sl, #8]
  402224:	2b00      	cmp	r3, #0
  402226:	f43f af78 	beq.w	40211a <__sfvwrite_r+0x5e>
  40222a:	2e00      	cmp	r6, #0
  40222c:	d1d5      	bne.n	4021da <__sfvwrite_r+0x11e>
  40222e:	f108 0308 	add.w	r3, r8, #8
  402232:	e913 0060 	ldmdb	r3, {r5, r6}
  402236:	4698      	mov	r8, r3
  402238:	3308      	adds	r3, #8
  40223a:	2e00      	cmp	r6, #0
  40223c:	d0f9      	beq.n	402232 <__sfvwrite_r+0x176>
  40223e:	4632      	mov	r2, r6
  402240:	210a      	movs	r1, #10
  402242:	4628      	mov	r0, r5
  402244:	f000 fc14 	bl	402a70 <memchr>
  402248:	2800      	cmp	r0, #0
  40224a:	f000 80a1 	beq.w	402390 <__sfvwrite_r+0x2d4>
  40224e:	3001      	adds	r0, #1
  402250:	eba0 0905 	sub.w	r9, r0, r5
  402254:	e7c2      	b.n	4021dc <__sfvwrite_r+0x120>
  402256:	6820      	ldr	r0, [r4, #0]
  402258:	6923      	ldr	r3, [r4, #16]
  40225a:	4298      	cmp	r0, r3
  40225c:	d802      	bhi.n	402264 <__sfvwrite_r+0x1a8>
  40225e:	6963      	ldr	r3, [r4, #20]
  402260:	429f      	cmp	r7, r3
  402262:	d25d      	bcs.n	402320 <__sfvwrite_r+0x264>
  402264:	45b8      	cmp	r8, r7
  402266:	bf28      	it	cs
  402268:	46b8      	movcs	r8, r7
  40226a:	4642      	mov	r2, r8
  40226c:	4649      	mov	r1, r9
  40226e:	f000 fce9 	bl	402c44 <memmove>
  402272:	68a3      	ldr	r3, [r4, #8]
  402274:	6822      	ldr	r2, [r4, #0]
  402276:	eba3 0308 	sub.w	r3, r3, r8
  40227a:	4442      	add	r2, r8
  40227c:	60a3      	str	r3, [r4, #8]
  40227e:	6022      	str	r2, [r4, #0]
  402280:	b10b      	cbz	r3, 402286 <__sfvwrite_r+0x1ca>
  402282:	46c2      	mov	sl, r8
  402284:	e779      	b.n	40217a <__sfvwrite_r+0xbe>
  402286:	4621      	mov	r1, r4
  402288:	9800      	ldr	r0, [sp, #0]
  40228a:	f7ff fd37 	bl	401cfc <_fflush_r>
  40228e:	2800      	cmp	r0, #0
  402290:	d192      	bne.n	4021b8 <__sfvwrite_r+0xfc>
  402292:	46c2      	mov	sl, r8
  402294:	e771      	b.n	40217a <__sfvwrite_r+0xbe>
  402296:	465a      	mov	r2, fp
  402298:	4629      	mov	r1, r5
  40229a:	f000 fcd3 	bl	402c44 <memmove>
  40229e:	68a2      	ldr	r2, [r4, #8]
  4022a0:	6823      	ldr	r3, [r4, #0]
  4022a2:	eba2 020b 	sub.w	r2, r2, fp
  4022a6:	445b      	add	r3, fp
  4022a8:	60a2      	str	r2, [r4, #8]
  4022aa:	6023      	str	r3, [r4, #0]
  4022ac:	e7af      	b.n	40220e <__sfvwrite_r+0x152>
  4022ae:	6820      	ldr	r0, [r4, #0]
  4022b0:	46b8      	mov	r8, r7
  4022b2:	46ba      	mov	sl, r7
  4022b4:	46bb      	mov	fp, r7
  4022b6:	e755      	b.n	402164 <__sfvwrite_r+0xa8>
  4022b8:	6962      	ldr	r2, [r4, #20]
  4022ba:	6820      	ldr	r0, [r4, #0]
  4022bc:	6921      	ldr	r1, [r4, #16]
  4022be:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4022c2:	eba0 0a01 	sub.w	sl, r0, r1
  4022c6:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4022ca:	f10a 0001 	add.w	r0, sl, #1
  4022ce:	ea4f 0868 	mov.w	r8, r8, asr #1
  4022d2:	4438      	add	r0, r7
  4022d4:	4540      	cmp	r0, r8
  4022d6:	4642      	mov	r2, r8
  4022d8:	bf84      	itt	hi
  4022da:	4680      	movhi	r8, r0
  4022dc:	4642      	movhi	r2, r8
  4022de:	055b      	lsls	r3, r3, #21
  4022e0:	d544      	bpl.n	40236c <__sfvwrite_r+0x2b0>
  4022e2:	4611      	mov	r1, r2
  4022e4:	9800      	ldr	r0, [sp, #0]
  4022e6:	f000 f913 	bl	402510 <_malloc_r>
  4022ea:	4683      	mov	fp, r0
  4022ec:	2800      	cmp	r0, #0
  4022ee:	d055      	beq.n	40239c <__sfvwrite_r+0x2e0>
  4022f0:	4652      	mov	r2, sl
  4022f2:	6921      	ldr	r1, [r4, #16]
  4022f4:	f000 fc0c 	bl	402b10 <memcpy>
  4022f8:	89a3      	ldrh	r3, [r4, #12]
  4022fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4022fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402302:	81a3      	strh	r3, [r4, #12]
  402304:	eb0b 000a 	add.w	r0, fp, sl
  402308:	eba8 030a 	sub.w	r3, r8, sl
  40230c:	f8c4 b010 	str.w	fp, [r4, #16]
  402310:	f8c4 8014 	str.w	r8, [r4, #20]
  402314:	6020      	str	r0, [r4, #0]
  402316:	60a3      	str	r3, [r4, #8]
  402318:	46b8      	mov	r8, r7
  40231a:	46ba      	mov	sl, r7
  40231c:	46bb      	mov	fp, r7
  40231e:	e721      	b.n	402164 <__sfvwrite_r+0xa8>
  402320:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  402324:	42b9      	cmp	r1, r7
  402326:	bf28      	it	cs
  402328:	4639      	movcs	r1, r7
  40232a:	464a      	mov	r2, r9
  40232c:	fb91 f1f3 	sdiv	r1, r1, r3
  402330:	9800      	ldr	r0, [sp, #0]
  402332:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402334:	fb03 f301 	mul.w	r3, r3, r1
  402338:	69e1      	ldr	r1, [r4, #28]
  40233a:	47b0      	blx	r6
  40233c:	f1b0 0a00 	subs.w	sl, r0, #0
  402340:	f73f af1b 	bgt.w	40217a <__sfvwrite_r+0xbe>
  402344:	e738      	b.n	4021b8 <__sfvwrite_r+0xfc>
  402346:	461a      	mov	r2, r3
  402348:	4629      	mov	r1, r5
  40234a:	9301      	str	r3, [sp, #4]
  40234c:	f000 fc7a 	bl	402c44 <memmove>
  402350:	6822      	ldr	r2, [r4, #0]
  402352:	9b01      	ldr	r3, [sp, #4]
  402354:	9800      	ldr	r0, [sp, #0]
  402356:	441a      	add	r2, r3
  402358:	6022      	str	r2, [r4, #0]
  40235a:	4621      	mov	r1, r4
  40235c:	f7ff fcce 	bl	401cfc <_fflush_r>
  402360:	9b01      	ldr	r3, [sp, #4]
  402362:	2800      	cmp	r0, #0
  402364:	f47f af28 	bne.w	4021b8 <__sfvwrite_r+0xfc>
  402368:	461f      	mov	r7, r3
  40236a:	e750      	b.n	40220e <__sfvwrite_r+0x152>
  40236c:	9800      	ldr	r0, [sp, #0]
  40236e:	f000 fcd9 	bl	402d24 <_realloc_r>
  402372:	4683      	mov	fp, r0
  402374:	2800      	cmp	r0, #0
  402376:	d1c5      	bne.n	402304 <__sfvwrite_r+0x248>
  402378:	9d00      	ldr	r5, [sp, #0]
  40237a:	6921      	ldr	r1, [r4, #16]
  40237c:	4628      	mov	r0, r5
  40237e:	f7ff fdb7 	bl	401ef0 <_free_r>
  402382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402386:	220c      	movs	r2, #12
  402388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40238c:	602a      	str	r2, [r5, #0]
  40238e:	e715      	b.n	4021bc <__sfvwrite_r+0x100>
  402390:	f106 0901 	add.w	r9, r6, #1
  402394:	e722      	b.n	4021dc <__sfvwrite_r+0x120>
  402396:	f04f 30ff 	mov.w	r0, #4294967295
  40239a:	e6bf      	b.n	40211c <__sfvwrite_r+0x60>
  40239c:	9a00      	ldr	r2, [sp, #0]
  40239e:	230c      	movs	r3, #12
  4023a0:	6013      	str	r3, [r2, #0]
  4023a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4023a6:	e709      	b.n	4021bc <__sfvwrite_r+0x100>
  4023a8:	7ffffc00 	.word	0x7ffffc00

004023ac <_fwalk_reent>:
  4023ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4023b0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4023b4:	d01f      	beq.n	4023f6 <_fwalk_reent+0x4a>
  4023b6:	4688      	mov	r8, r1
  4023b8:	4606      	mov	r6, r0
  4023ba:	f04f 0900 	mov.w	r9, #0
  4023be:	687d      	ldr	r5, [r7, #4]
  4023c0:	68bc      	ldr	r4, [r7, #8]
  4023c2:	3d01      	subs	r5, #1
  4023c4:	d411      	bmi.n	4023ea <_fwalk_reent+0x3e>
  4023c6:	89a3      	ldrh	r3, [r4, #12]
  4023c8:	2b01      	cmp	r3, #1
  4023ca:	f105 35ff 	add.w	r5, r5, #4294967295
  4023ce:	d908      	bls.n	4023e2 <_fwalk_reent+0x36>
  4023d0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4023d4:	3301      	adds	r3, #1
  4023d6:	4621      	mov	r1, r4
  4023d8:	4630      	mov	r0, r6
  4023da:	d002      	beq.n	4023e2 <_fwalk_reent+0x36>
  4023dc:	47c0      	blx	r8
  4023de:	ea49 0900 	orr.w	r9, r9, r0
  4023e2:	1c6b      	adds	r3, r5, #1
  4023e4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4023e8:	d1ed      	bne.n	4023c6 <_fwalk_reent+0x1a>
  4023ea:	683f      	ldr	r7, [r7, #0]
  4023ec:	2f00      	cmp	r7, #0
  4023ee:	d1e6      	bne.n	4023be <_fwalk_reent+0x12>
  4023f0:	4648      	mov	r0, r9
  4023f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4023f6:	46b9      	mov	r9, r7
  4023f8:	4648      	mov	r0, r9
  4023fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4023fe:	bf00      	nop

00402400 <__retarget_lock_init_recursive>:
  402400:	4770      	bx	lr
  402402:	bf00      	nop

00402404 <__retarget_lock_close_recursive>:
  402404:	4770      	bx	lr
  402406:	bf00      	nop

00402408 <__retarget_lock_acquire_recursive>:
  402408:	4770      	bx	lr
  40240a:	bf00      	nop

0040240c <__retarget_lock_release_recursive>:
  40240c:	4770      	bx	lr
  40240e:	bf00      	nop

00402410 <__swhatbuf_r>:
  402410:	b570      	push	{r4, r5, r6, lr}
  402412:	460c      	mov	r4, r1
  402414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402418:	2900      	cmp	r1, #0
  40241a:	b090      	sub	sp, #64	; 0x40
  40241c:	4615      	mov	r5, r2
  40241e:	461e      	mov	r6, r3
  402420:	db14      	blt.n	40244c <__swhatbuf_r+0x3c>
  402422:	aa01      	add	r2, sp, #4
  402424:	f000 ffca 	bl	4033bc <_fstat_r>
  402428:	2800      	cmp	r0, #0
  40242a:	db0f      	blt.n	40244c <__swhatbuf_r+0x3c>
  40242c:	9a02      	ldr	r2, [sp, #8]
  40242e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  402432:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  402436:	fab2 f282 	clz	r2, r2
  40243a:	0952      	lsrs	r2, r2, #5
  40243c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402440:	f44f 6000 	mov.w	r0, #2048	; 0x800
  402444:	6032      	str	r2, [r6, #0]
  402446:	602b      	str	r3, [r5, #0]
  402448:	b010      	add	sp, #64	; 0x40
  40244a:	bd70      	pop	{r4, r5, r6, pc}
  40244c:	89a2      	ldrh	r2, [r4, #12]
  40244e:	2300      	movs	r3, #0
  402450:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  402454:	6033      	str	r3, [r6, #0]
  402456:	d004      	beq.n	402462 <__swhatbuf_r+0x52>
  402458:	2240      	movs	r2, #64	; 0x40
  40245a:	4618      	mov	r0, r3
  40245c:	602a      	str	r2, [r5, #0]
  40245e:	b010      	add	sp, #64	; 0x40
  402460:	bd70      	pop	{r4, r5, r6, pc}
  402462:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402466:	602b      	str	r3, [r5, #0]
  402468:	b010      	add	sp, #64	; 0x40
  40246a:	bd70      	pop	{r4, r5, r6, pc}

0040246c <__smakebuf_r>:
  40246c:	898a      	ldrh	r2, [r1, #12]
  40246e:	0792      	lsls	r2, r2, #30
  402470:	460b      	mov	r3, r1
  402472:	d506      	bpl.n	402482 <__smakebuf_r+0x16>
  402474:	f101 0243 	add.w	r2, r1, #67	; 0x43
  402478:	2101      	movs	r1, #1
  40247a:	601a      	str	r2, [r3, #0]
  40247c:	611a      	str	r2, [r3, #16]
  40247e:	6159      	str	r1, [r3, #20]
  402480:	4770      	bx	lr
  402482:	b5f0      	push	{r4, r5, r6, r7, lr}
  402484:	b083      	sub	sp, #12
  402486:	ab01      	add	r3, sp, #4
  402488:	466a      	mov	r2, sp
  40248a:	460c      	mov	r4, r1
  40248c:	4606      	mov	r6, r0
  40248e:	f7ff ffbf 	bl	402410 <__swhatbuf_r>
  402492:	9900      	ldr	r1, [sp, #0]
  402494:	4605      	mov	r5, r0
  402496:	4630      	mov	r0, r6
  402498:	f000 f83a 	bl	402510 <_malloc_r>
  40249c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4024a0:	b1d8      	cbz	r0, 4024da <__smakebuf_r+0x6e>
  4024a2:	9a01      	ldr	r2, [sp, #4]
  4024a4:	4f15      	ldr	r7, [pc, #84]	; (4024fc <__smakebuf_r+0x90>)
  4024a6:	9900      	ldr	r1, [sp, #0]
  4024a8:	63f7      	str	r7, [r6, #60]	; 0x3c
  4024aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4024ae:	81a3      	strh	r3, [r4, #12]
  4024b0:	6020      	str	r0, [r4, #0]
  4024b2:	6120      	str	r0, [r4, #16]
  4024b4:	6161      	str	r1, [r4, #20]
  4024b6:	b91a      	cbnz	r2, 4024c0 <__smakebuf_r+0x54>
  4024b8:	432b      	orrs	r3, r5
  4024ba:	81a3      	strh	r3, [r4, #12]
  4024bc:	b003      	add	sp, #12
  4024be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4024c0:	4630      	mov	r0, r6
  4024c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4024c6:	f000 ff8d 	bl	4033e4 <_isatty_r>
  4024ca:	b1a0      	cbz	r0, 4024f6 <__smakebuf_r+0x8a>
  4024cc:	89a3      	ldrh	r3, [r4, #12]
  4024ce:	f023 0303 	bic.w	r3, r3, #3
  4024d2:	f043 0301 	orr.w	r3, r3, #1
  4024d6:	b21b      	sxth	r3, r3
  4024d8:	e7ee      	b.n	4024b8 <__smakebuf_r+0x4c>
  4024da:	059a      	lsls	r2, r3, #22
  4024dc:	d4ee      	bmi.n	4024bc <__smakebuf_r+0x50>
  4024de:	f023 0303 	bic.w	r3, r3, #3
  4024e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4024e6:	f043 0302 	orr.w	r3, r3, #2
  4024ea:	2101      	movs	r1, #1
  4024ec:	81a3      	strh	r3, [r4, #12]
  4024ee:	6022      	str	r2, [r4, #0]
  4024f0:	6122      	str	r2, [r4, #16]
  4024f2:	6161      	str	r1, [r4, #20]
  4024f4:	e7e2      	b.n	4024bc <__smakebuf_r+0x50>
  4024f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4024fa:	e7dd      	b.n	4024b8 <__smakebuf_r+0x4c>
  4024fc:	00401d51 	.word	0x00401d51

00402500 <malloc>:
  402500:	4b02      	ldr	r3, [pc, #8]	; (40250c <malloc+0xc>)
  402502:	4601      	mov	r1, r0
  402504:	6818      	ldr	r0, [r3, #0]
  402506:	f000 b803 	b.w	402510 <_malloc_r>
  40250a:	bf00      	nop
  40250c:	20400008 	.word	0x20400008

00402510 <_malloc_r>:
  402510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402514:	f101 060b 	add.w	r6, r1, #11
  402518:	2e16      	cmp	r6, #22
  40251a:	b083      	sub	sp, #12
  40251c:	4605      	mov	r5, r0
  40251e:	f240 809e 	bls.w	40265e <_malloc_r+0x14e>
  402522:	f036 0607 	bics.w	r6, r6, #7
  402526:	f100 80bd 	bmi.w	4026a4 <_malloc_r+0x194>
  40252a:	42b1      	cmp	r1, r6
  40252c:	f200 80ba 	bhi.w	4026a4 <_malloc_r+0x194>
  402530:	f000 fbec 	bl	402d0c <__malloc_lock>
  402534:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  402538:	f0c0 8293 	bcc.w	402a62 <_malloc_r+0x552>
  40253c:	0a73      	lsrs	r3, r6, #9
  40253e:	f000 80b8 	beq.w	4026b2 <_malloc_r+0x1a2>
  402542:	2b04      	cmp	r3, #4
  402544:	f200 8179 	bhi.w	40283a <_malloc_r+0x32a>
  402548:	09b3      	lsrs	r3, r6, #6
  40254a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40254e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  402552:	00c3      	lsls	r3, r0, #3
  402554:	4fbf      	ldr	r7, [pc, #764]	; (402854 <_malloc_r+0x344>)
  402556:	443b      	add	r3, r7
  402558:	f1a3 0108 	sub.w	r1, r3, #8
  40255c:	685c      	ldr	r4, [r3, #4]
  40255e:	42a1      	cmp	r1, r4
  402560:	d106      	bne.n	402570 <_malloc_r+0x60>
  402562:	e00c      	b.n	40257e <_malloc_r+0x6e>
  402564:	2a00      	cmp	r2, #0
  402566:	f280 80aa 	bge.w	4026be <_malloc_r+0x1ae>
  40256a:	68e4      	ldr	r4, [r4, #12]
  40256c:	42a1      	cmp	r1, r4
  40256e:	d006      	beq.n	40257e <_malloc_r+0x6e>
  402570:	6863      	ldr	r3, [r4, #4]
  402572:	f023 0303 	bic.w	r3, r3, #3
  402576:	1b9a      	subs	r2, r3, r6
  402578:	2a0f      	cmp	r2, #15
  40257a:	ddf3      	ble.n	402564 <_malloc_r+0x54>
  40257c:	4670      	mov	r0, lr
  40257e:	693c      	ldr	r4, [r7, #16]
  402580:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 402868 <_malloc_r+0x358>
  402584:	4574      	cmp	r4, lr
  402586:	f000 81ab 	beq.w	4028e0 <_malloc_r+0x3d0>
  40258a:	6863      	ldr	r3, [r4, #4]
  40258c:	f023 0303 	bic.w	r3, r3, #3
  402590:	1b9a      	subs	r2, r3, r6
  402592:	2a0f      	cmp	r2, #15
  402594:	f300 8190 	bgt.w	4028b8 <_malloc_r+0x3a8>
  402598:	2a00      	cmp	r2, #0
  40259a:	f8c7 e014 	str.w	lr, [r7, #20]
  40259e:	f8c7 e010 	str.w	lr, [r7, #16]
  4025a2:	f280 809d 	bge.w	4026e0 <_malloc_r+0x1d0>
  4025a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4025aa:	f080 8161 	bcs.w	402870 <_malloc_r+0x360>
  4025ae:	08db      	lsrs	r3, r3, #3
  4025b0:	f103 0c01 	add.w	ip, r3, #1
  4025b4:	1099      	asrs	r1, r3, #2
  4025b6:	687a      	ldr	r2, [r7, #4]
  4025b8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4025bc:	f8c4 8008 	str.w	r8, [r4, #8]
  4025c0:	2301      	movs	r3, #1
  4025c2:	408b      	lsls	r3, r1
  4025c4:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4025c8:	4313      	orrs	r3, r2
  4025ca:	3908      	subs	r1, #8
  4025cc:	60e1      	str	r1, [r4, #12]
  4025ce:	607b      	str	r3, [r7, #4]
  4025d0:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4025d4:	f8c8 400c 	str.w	r4, [r8, #12]
  4025d8:	1082      	asrs	r2, r0, #2
  4025da:	2401      	movs	r4, #1
  4025dc:	4094      	lsls	r4, r2
  4025de:	429c      	cmp	r4, r3
  4025e0:	f200 808b 	bhi.w	4026fa <_malloc_r+0x1ea>
  4025e4:	421c      	tst	r4, r3
  4025e6:	d106      	bne.n	4025f6 <_malloc_r+0xe6>
  4025e8:	f020 0003 	bic.w	r0, r0, #3
  4025ec:	0064      	lsls	r4, r4, #1
  4025ee:	421c      	tst	r4, r3
  4025f0:	f100 0004 	add.w	r0, r0, #4
  4025f4:	d0fa      	beq.n	4025ec <_malloc_r+0xdc>
  4025f6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4025fa:	46cc      	mov	ip, r9
  4025fc:	4680      	mov	r8, r0
  4025fe:	f8dc 300c 	ldr.w	r3, [ip, #12]
  402602:	459c      	cmp	ip, r3
  402604:	d107      	bne.n	402616 <_malloc_r+0x106>
  402606:	e16d      	b.n	4028e4 <_malloc_r+0x3d4>
  402608:	2a00      	cmp	r2, #0
  40260a:	f280 817b 	bge.w	402904 <_malloc_r+0x3f4>
  40260e:	68db      	ldr	r3, [r3, #12]
  402610:	459c      	cmp	ip, r3
  402612:	f000 8167 	beq.w	4028e4 <_malloc_r+0x3d4>
  402616:	6859      	ldr	r1, [r3, #4]
  402618:	f021 0103 	bic.w	r1, r1, #3
  40261c:	1b8a      	subs	r2, r1, r6
  40261e:	2a0f      	cmp	r2, #15
  402620:	ddf2      	ble.n	402608 <_malloc_r+0xf8>
  402622:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  402626:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40262a:	9300      	str	r3, [sp, #0]
  40262c:	199c      	adds	r4, r3, r6
  40262e:	4628      	mov	r0, r5
  402630:	f046 0601 	orr.w	r6, r6, #1
  402634:	f042 0501 	orr.w	r5, r2, #1
  402638:	605e      	str	r6, [r3, #4]
  40263a:	f8c8 c00c 	str.w	ip, [r8, #12]
  40263e:	f8cc 8008 	str.w	r8, [ip, #8]
  402642:	617c      	str	r4, [r7, #20]
  402644:	613c      	str	r4, [r7, #16]
  402646:	f8c4 e00c 	str.w	lr, [r4, #12]
  40264a:	f8c4 e008 	str.w	lr, [r4, #8]
  40264e:	6065      	str	r5, [r4, #4]
  402650:	505a      	str	r2, [r3, r1]
  402652:	f000 fb61 	bl	402d18 <__malloc_unlock>
  402656:	9b00      	ldr	r3, [sp, #0]
  402658:	f103 0408 	add.w	r4, r3, #8
  40265c:	e01e      	b.n	40269c <_malloc_r+0x18c>
  40265e:	2910      	cmp	r1, #16
  402660:	d820      	bhi.n	4026a4 <_malloc_r+0x194>
  402662:	f000 fb53 	bl	402d0c <__malloc_lock>
  402666:	2610      	movs	r6, #16
  402668:	2318      	movs	r3, #24
  40266a:	2002      	movs	r0, #2
  40266c:	4f79      	ldr	r7, [pc, #484]	; (402854 <_malloc_r+0x344>)
  40266e:	443b      	add	r3, r7
  402670:	f1a3 0208 	sub.w	r2, r3, #8
  402674:	685c      	ldr	r4, [r3, #4]
  402676:	4294      	cmp	r4, r2
  402678:	f000 813d 	beq.w	4028f6 <_malloc_r+0x3e6>
  40267c:	6863      	ldr	r3, [r4, #4]
  40267e:	68e1      	ldr	r1, [r4, #12]
  402680:	68a6      	ldr	r6, [r4, #8]
  402682:	f023 0303 	bic.w	r3, r3, #3
  402686:	4423      	add	r3, r4
  402688:	4628      	mov	r0, r5
  40268a:	685a      	ldr	r2, [r3, #4]
  40268c:	60f1      	str	r1, [r6, #12]
  40268e:	f042 0201 	orr.w	r2, r2, #1
  402692:	608e      	str	r6, [r1, #8]
  402694:	605a      	str	r2, [r3, #4]
  402696:	f000 fb3f 	bl	402d18 <__malloc_unlock>
  40269a:	3408      	adds	r4, #8
  40269c:	4620      	mov	r0, r4
  40269e:	b003      	add	sp, #12
  4026a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4026a4:	2400      	movs	r4, #0
  4026a6:	230c      	movs	r3, #12
  4026a8:	4620      	mov	r0, r4
  4026aa:	602b      	str	r3, [r5, #0]
  4026ac:	b003      	add	sp, #12
  4026ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4026b2:	2040      	movs	r0, #64	; 0x40
  4026b4:	f44f 7300 	mov.w	r3, #512	; 0x200
  4026b8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4026bc:	e74a      	b.n	402554 <_malloc_r+0x44>
  4026be:	4423      	add	r3, r4
  4026c0:	68e1      	ldr	r1, [r4, #12]
  4026c2:	685a      	ldr	r2, [r3, #4]
  4026c4:	68a6      	ldr	r6, [r4, #8]
  4026c6:	f042 0201 	orr.w	r2, r2, #1
  4026ca:	60f1      	str	r1, [r6, #12]
  4026cc:	4628      	mov	r0, r5
  4026ce:	608e      	str	r6, [r1, #8]
  4026d0:	605a      	str	r2, [r3, #4]
  4026d2:	f000 fb21 	bl	402d18 <__malloc_unlock>
  4026d6:	3408      	adds	r4, #8
  4026d8:	4620      	mov	r0, r4
  4026da:	b003      	add	sp, #12
  4026dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4026e0:	4423      	add	r3, r4
  4026e2:	4628      	mov	r0, r5
  4026e4:	685a      	ldr	r2, [r3, #4]
  4026e6:	f042 0201 	orr.w	r2, r2, #1
  4026ea:	605a      	str	r2, [r3, #4]
  4026ec:	f000 fb14 	bl	402d18 <__malloc_unlock>
  4026f0:	3408      	adds	r4, #8
  4026f2:	4620      	mov	r0, r4
  4026f4:	b003      	add	sp, #12
  4026f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4026fa:	68bc      	ldr	r4, [r7, #8]
  4026fc:	6863      	ldr	r3, [r4, #4]
  4026fe:	f023 0803 	bic.w	r8, r3, #3
  402702:	45b0      	cmp	r8, r6
  402704:	d304      	bcc.n	402710 <_malloc_r+0x200>
  402706:	eba8 0306 	sub.w	r3, r8, r6
  40270a:	2b0f      	cmp	r3, #15
  40270c:	f300 8085 	bgt.w	40281a <_malloc_r+0x30a>
  402710:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40286c <_malloc_r+0x35c>
  402714:	4b50      	ldr	r3, [pc, #320]	; (402858 <_malloc_r+0x348>)
  402716:	f8d9 2000 	ldr.w	r2, [r9]
  40271a:	681b      	ldr	r3, [r3, #0]
  40271c:	3201      	adds	r2, #1
  40271e:	4433      	add	r3, r6
  402720:	eb04 0a08 	add.w	sl, r4, r8
  402724:	f000 8155 	beq.w	4029d2 <_malloc_r+0x4c2>
  402728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40272c:	330f      	adds	r3, #15
  40272e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  402732:	f02b 0b0f 	bic.w	fp, fp, #15
  402736:	4659      	mov	r1, fp
  402738:	4628      	mov	r0, r5
  40273a:	f000 fc99 	bl	403070 <_sbrk_r>
  40273e:	1c41      	adds	r1, r0, #1
  402740:	4602      	mov	r2, r0
  402742:	f000 80fc 	beq.w	40293e <_malloc_r+0x42e>
  402746:	4582      	cmp	sl, r0
  402748:	f200 80f7 	bhi.w	40293a <_malloc_r+0x42a>
  40274c:	4b43      	ldr	r3, [pc, #268]	; (40285c <_malloc_r+0x34c>)
  40274e:	6819      	ldr	r1, [r3, #0]
  402750:	4459      	add	r1, fp
  402752:	6019      	str	r1, [r3, #0]
  402754:	f000 814d 	beq.w	4029f2 <_malloc_r+0x4e2>
  402758:	f8d9 0000 	ldr.w	r0, [r9]
  40275c:	3001      	adds	r0, #1
  40275e:	bf1b      	ittet	ne
  402760:	eba2 0a0a 	subne.w	sl, r2, sl
  402764:	4451      	addne	r1, sl
  402766:	f8c9 2000 	streq.w	r2, [r9]
  40276a:	6019      	strne	r1, [r3, #0]
  40276c:	f012 0107 	ands.w	r1, r2, #7
  402770:	f000 8115 	beq.w	40299e <_malloc_r+0x48e>
  402774:	f1c1 0008 	rsb	r0, r1, #8
  402778:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40277c:	4402      	add	r2, r0
  40277e:	3108      	adds	r1, #8
  402780:	eb02 090b 	add.w	r9, r2, fp
  402784:	f3c9 090b 	ubfx	r9, r9, #0, #12
  402788:	eba1 0909 	sub.w	r9, r1, r9
  40278c:	4649      	mov	r1, r9
  40278e:	4628      	mov	r0, r5
  402790:	9301      	str	r3, [sp, #4]
  402792:	9200      	str	r2, [sp, #0]
  402794:	f000 fc6c 	bl	403070 <_sbrk_r>
  402798:	1c43      	adds	r3, r0, #1
  40279a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40279e:	f000 8143 	beq.w	402a28 <_malloc_r+0x518>
  4027a2:	1a80      	subs	r0, r0, r2
  4027a4:	4448      	add	r0, r9
  4027a6:	f040 0001 	orr.w	r0, r0, #1
  4027aa:	6819      	ldr	r1, [r3, #0]
  4027ac:	60ba      	str	r2, [r7, #8]
  4027ae:	4449      	add	r1, r9
  4027b0:	42bc      	cmp	r4, r7
  4027b2:	6050      	str	r0, [r2, #4]
  4027b4:	6019      	str	r1, [r3, #0]
  4027b6:	d017      	beq.n	4027e8 <_malloc_r+0x2d8>
  4027b8:	f1b8 0f0f 	cmp.w	r8, #15
  4027bc:	f240 80fb 	bls.w	4029b6 <_malloc_r+0x4a6>
  4027c0:	6860      	ldr	r0, [r4, #4]
  4027c2:	f1a8 020c 	sub.w	r2, r8, #12
  4027c6:	f022 0207 	bic.w	r2, r2, #7
  4027ca:	eb04 0e02 	add.w	lr, r4, r2
  4027ce:	f000 0001 	and.w	r0, r0, #1
  4027d2:	f04f 0c05 	mov.w	ip, #5
  4027d6:	4310      	orrs	r0, r2
  4027d8:	2a0f      	cmp	r2, #15
  4027da:	6060      	str	r0, [r4, #4]
  4027dc:	f8ce c004 	str.w	ip, [lr, #4]
  4027e0:	f8ce c008 	str.w	ip, [lr, #8]
  4027e4:	f200 8117 	bhi.w	402a16 <_malloc_r+0x506>
  4027e8:	4b1d      	ldr	r3, [pc, #116]	; (402860 <_malloc_r+0x350>)
  4027ea:	68bc      	ldr	r4, [r7, #8]
  4027ec:	681a      	ldr	r2, [r3, #0]
  4027ee:	4291      	cmp	r1, r2
  4027f0:	bf88      	it	hi
  4027f2:	6019      	strhi	r1, [r3, #0]
  4027f4:	4b1b      	ldr	r3, [pc, #108]	; (402864 <_malloc_r+0x354>)
  4027f6:	681a      	ldr	r2, [r3, #0]
  4027f8:	4291      	cmp	r1, r2
  4027fa:	6862      	ldr	r2, [r4, #4]
  4027fc:	bf88      	it	hi
  4027fe:	6019      	strhi	r1, [r3, #0]
  402800:	f022 0203 	bic.w	r2, r2, #3
  402804:	4296      	cmp	r6, r2
  402806:	eba2 0306 	sub.w	r3, r2, r6
  40280a:	d801      	bhi.n	402810 <_malloc_r+0x300>
  40280c:	2b0f      	cmp	r3, #15
  40280e:	dc04      	bgt.n	40281a <_malloc_r+0x30a>
  402810:	4628      	mov	r0, r5
  402812:	f000 fa81 	bl	402d18 <__malloc_unlock>
  402816:	2400      	movs	r4, #0
  402818:	e740      	b.n	40269c <_malloc_r+0x18c>
  40281a:	19a2      	adds	r2, r4, r6
  40281c:	f043 0301 	orr.w	r3, r3, #1
  402820:	f046 0601 	orr.w	r6, r6, #1
  402824:	6066      	str	r6, [r4, #4]
  402826:	4628      	mov	r0, r5
  402828:	60ba      	str	r2, [r7, #8]
  40282a:	6053      	str	r3, [r2, #4]
  40282c:	f000 fa74 	bl	402d18 <__malloc_unlock>
  402830:	3408      	adds	r4, #8
  402832:	4620      	mov	r0, r4
  402834:	b003      	add	sp, #12
  402836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40283a:	2b14      	cmp	r3, #20
  40283c:	d971      	bls.n	402922 <_malloc_r+0x412>
  40283e:	2b54      	cmp	r3, #84	; 0x54
  402840:	f200 80a3 	bhi.w	40298a <_malloc_r+0x47a>
  402844:	0b33      	lsrs	r3, r6, #12
  402846:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40284a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40284e:	00c3      	lsls	r3, r0, #3
  402850:	e680      	b.n	402554 <_malloc_r+0x44>
  402852:	bf00      	nop
  402854:	2040043c 	.word	0x2040043c
  402858:	20400b90 	.word	0x20400b90
  40285c:	20400b60 	.word	0x20400b60
  402860:	20400b88 	.word	0x20400b88
  402864:	20400b8c 	.word	0x20400b8c
  402868:	20400444 	.word	0x20400444
  40286c:	20400844 	.word	0x20400844
  402870:	0a5a      	lsrs	r2, r3, #9
  402872:	2a04      	cmp	r2, #4
  402874:	d95b      	bls.n	40292e <_malloc_r+0x41e>
  402876:	2a14      	cmp	r2, #20
  402878:	f200 80ae 	bhi.w	4029d8 <_malloc_r+0x4c8>
  40287c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  402880:	00c9      	lsls	r1, r1, #3
  402882:	325b      	adds	r2, #91	; 0x5b
  402884:	eb07 0c01 	add.w	ip, r7, r1
  402888:	5879      	ldr	r1, [r7, r1]
  40288a:	f1ac 0c08 	sub.w	ip, ip, #8
  40288e:	458c      	cmp	ip, r1
  402890:	f000 8088 	beq.w	4029a4 <_malloc_r+0x494>
  402894:	684a      	ldr	r2, [r1, #4]
  402896:	f022 0203 	bic.w	r2, r2, #3
  40289a:	4293      	cmp	r3, r2
  40289c:	d273      	bcs.n	402986 <_malloc_r+0x476>
  40289e:	6889      	ldr	r1, [r1, #8]
  4028a0:	458c      	cmp	ip, r1
  4028a2:	d1f7      	bne.n	402894 <_malloc_r+0x384>
  4028a4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4028a8:	687b      	ldr	r3, [r7, #4]
  4028aa:	60e2      	str	r2, [r4, #12]
  4028ac:	f8c4 c008 	str.w	ip, [r4, #8]
  4028b0:	6094      	str	r4, [r2, #8]
  4028b2:	f8cc 400c 	str.w	r4, [ip, #12]
  4028b6:	e68f      	b.n	4025d8 <_malloc_r+0xc8>
  4028b8:	19a1      	adds	r1, r4, r6
  4028ba:	f046 0c01 	orr.w	ip, r6, #1
  4028be:	f042 0601 	orr.w	r6, r2, #1
  4028c2:	f8c4 c004 	str.w	ip, [r4, #4]
  4028c6:	4628      	mov	r0, r5
  4028c8:	6179      	str	r1, [r7, #20]
  4028ca:	6139      	str	r1, [r7, #16]
  4028cc:	f8c1 e00c 	str.w	lr, [r1, #12]
  4028d0:	f8c1 e008 	str.w	lr, [r1, #8]
  4028d4:	604e      	str	r6, [r1, #4]
  4028d6:	50e2      	str	r2, [r4, r3]
  4028d8:	f000 fa1e 	bl	402d18 <__malloc_unlock>
  4028dc:	3408      	adds	r4, #8
  4028de:	e6dd      	b.n	40269c <_malloc_r+0x18c>
  4028e0:	687b      	ldr	r3, [r7, #4]
  4028e2:	e679      	b.n	4025d8 <_malloc_r+0xc8>
  4028e4:	f108 0801 	add.w	r8, r8, #1
  4028e8:	f018 0f03 	tst.w	r8, #3
  4028ec:	f10c 0c08 	add.w	ip, ip, #8
  4028f0:	f47f ae85 	bne.w	4025fe <_malloc_r+0xee>
  4028f4:	e02d      	b.n	402952 <_malloc_r+0x442>
  4028f6:	68dc      	ldr	r4, [r3, #12]
  4028f8:	42a3      	cmp	r3, r4
  4028fa:	bf08      	it	eq
  4028fc:	3002      	addeq	r0, #2
  4028fe:	f43f ae3e 	beq.w	40257e <_malloc_r+0x6e>
  402902:	e6bb      	b.n	40267c <_malloc_r+0x16c>
  402904:	4419      	add	r1, r3
  402906:	461c      	mov	r4, r3
  402908:	684a      	ldr	r2, [r1, #4]
  40290a:	68db      	ldr	r3, [r3, #12]
  40290c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  402910:	f042 0201 	orr.w	r2, r2, #1
  402914:	604a      	str	r2, [r1, #4]
  402916:	4628      	mov	r0, r5
  402918:	60f3      	str	r3, [r6, #12]
  40291a:	609e      	str	r6, [r3, #8]
  40291c:	f000 f9fc 	bl	402d18 <__malloc_unlock>
  402920:	e6bc      	b.n	40269c <_malloc_r+0x18c>
  402922:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  402926:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40292a:	00c3      	lsls	r3, r0, #3
  40292c:	e612      	b.n	402554 <_malloc_r+0x44>
  40292e:	099a      	lsrs	r2, r3, #6
  402930:	f102 0139 	add.w	r1, r2, #57	; 0x39
  402934:	00c9      	lsls	r1, r1, #3
  402936:	3238      	adds	r2, #56	; 0x38
  402938:	e7a4      	b.n	402884 <_malloc_r+0x374>
  40293a:	42bc      	cmp	r4, r7
  40293c:	d054      	beq.n	4029e8 <_malloc_r+0x4d8>
  40293e:	68bc      	ldr	r4, [r7, #8]
  402940:	6862      	ldr	r2, [r4, #4]
  402942:	f022 0203 	bic.w	r2, r2, #3
  402946:	e75d      	b.n	402804 <_malloc_r+0x2f4>
  402948:	f859 3908 	ldr.w	r3, [r9], #-8
  40294c:	4599      	cmp	r9, r3
  40294e:	f040 8086 	bne.w	402a5e <_malloc_r+0x54e>
  402952:	f010 0f03 	tst.w	r0, #3
  402956:	f100 30ff 	add.w	r0, r0, #4294967295
  40295a:	d1f5      	bne.n	402948 <_malloc_r+0x438>
  40295c:	687b      	ldr	r3, [r7, #4]
  40295e:	ea23 0304 	bic.w	r3, r3, r4
  402962:	607b      	str	r3, [r7, #4]
  402964:	0064      	lsls	r4, r4, #1
  402966:	429c      	cmp	r4, r3
  402968:	f63f aec7 	bhi.w	4026fa <_malloc_r+0x1ea>
  40296c:	2c00      	cmp	r4, #0
  40296e:	f43f aec4 	beq.w	4026fa <_malloc_r+0x1ea>
  402972:	421c      	tst	r4, r3
  402974:	4640      	mov	r0, r8
  402976:	f47f ae3e 	bne.w	4025f6 <_malloc_r+0xe6>
  40297a:	0064      	lsls	r4, r4, #1
  40297c:	421c      	tst	r4, r3
  40297e:	f100 0004 	add.w	r0, r0, #4
  402982:	d0fa      	beq.n	40297a <_malloc_r+0x46a>
  402984:	e637      	b.n	4025f6 <_malloc_r+0xe6>
  402986:	468c      	mov	ip, r1
  402988:	e78c      	b.n	4028a4 <_malloc_r+0x394>
  40298a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40298e:	d815      	bhi.n	4029bc <_malloc_r+0x4ac>
  402990:	0bf3      	lsrs	r3, r6, #15
  402992:	f103 0078 	add.w	r0, r3, #120	; 0x78
  402996:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40299a:	00c3      	lsls	r3, r0, #3
  40299c:	e5da      	b.n	402554 <_malloc_r+0x44>
  40299e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4029a2:	e6ed      	b.n	402780 <_malloc_r+0x270>
  4029a4:	687b      	ldr	r3, [r7, #4]
  4029a6:	1092      	asrs	r2, r2, #2
  4029a8:	2101      	movs	r1, #1
  4029aa:	fa01 f202 	lsl.w	r2, r1, r2
  4029ae:	4313      	orrs	r3, r2
  4029b0:	607b      	str	r3, [r7, #4]
  4029b2:	4662      	mov	r2, ip
  4029b4:	e779      	b.n	4028aa <_malloc_r+0x39a>
  4029b6:	2301      	movs	r3, #1
  4029b8:	6053      	str	r3, [r2, #4]
  4029ba:	e729      	b.n	402810 <_malloc_r+0x300>
  4029bc:	f240 5254 	movw	r2, #1364	; 0x554
  4029c0:	4293      	cmp	r3, r2
  4029c2:	d822      	bhi.n	402a0a <_malloc_r+0x4fa>
  4029c4:	0cb3      	lsrs	r3, r6, #18
  4029c6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4029ca:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4029ce:	00c3      	lsls	r3, r0, #3
  4029d0:	e5c0      	b.n	402554 <_malloc_r+0x44>
  4029d2:	f103 0b10 	add.w	fp, r3, #16
  4029d6:	e6ae      	b.n	402736 <_malloc_r+0x226>
  4029d8:	2a54      	cmp	r2, #84	; 0x54
  4029da:	d829      	bhi.n	402a30 <_malloc_r+0x520>
  4029dc:	0b1a      	lsrs	r2, r3, #12
  4029de:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4029e2:	00c9      	lsls	r1, r1, #3
  4029e4:	326e      	adds	r2, #110	; 0x6e
  4029e6:	e74d      	b.n	402884 <_malloc_r+0x374>
  4029e8:	4b20      	ldr	r3, [pc, #128]	; (402a6c <_malloc_r+0x55c>)
  4029ea:	6819      	ldr	r1, [r3, #0]
  4029ec:	4459      	add	r1, fp
  4029ee:	6019      	str	r1, [r3, #0]
  4029f0:	e6b2      	b.n	402758 <_malloc_r+0x248>
  4029f2:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4029f6:	2800      	cmp	r0, #0
  4029f8:	f47f aeae 	bne.w	402758 <_malloc_r+0x248>
  4029fc:	eb08 030b 	add.w	r3, r8, fp
  402a00:	68ba      	ldr	r2, [r7, #8]
  402a02:	f043 0301 	orr.w	r3, r3, #1
  402a06:	6053      	str	r3, [r2, #4]
  402a08:	e6ee      	b.n	4027e8 <_malloc_r+0x2d8>
  402a0a:	207f      	movs	r0, #127	; 0x7f
  402a0c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  402a10:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  402a14:	e59e      	b.n	402554 <_malloc_r+0x44>
  402a16:	f104 0108 	add.w	r1, r4, #8
  402a1a:	4628      	mov	r0, r5
  402a1c:	9300      	str	r3, [sp, #0]
  402a1e:	f7ff fa67 	bl	401ef0 <_free_r>
  402a22:	9b00      	ldr	r3, [sp, #0]
  402a24:	6819      	ldr	r1, [r3, #0]
  402a26:	e6df      	b.n	4027e8 <_malloc_r+0x2d8>
  402a28:	2001      	movs	r0, #1
  402a2a:	f04f 0900 	mov.w	r9, #0
  402a2e:	e6bc      	b.n	4027aa <_malloc_r+0x29a>
  402a30:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402a34:	d805      	bhi.n	402a42 <_malloc_r+0x532>
  402a36:	0bda      	lsrs	r2, r3, #15
  402a38:	f102 0178 	add.w	r1, r2, #120	; 0x78
  402a3c:	00c9      	lsls	r1, r1, #3
  402a3e:	3277      	adds	r2, #119	; 0x77
  402a40:	e720      	b.n	402884 <_malloc_r+0x374>
  402a42:	f240 5154 	movw	r1, #1364	; 0x554
  402a46:	428a      	cmp	r2, r1
  402a48:	d805      	bhi.n	402a56 <_malloc_r+0x546>
  402a4a:	0c9a      	lsrs	r2, r3, #18
  402a4c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  402a50:	00c9      	lsls	r1, r1, #3
  402a52:	327c      	adds	r2, #124	; 0x7c
  402a54:	e716      	b.n	402884 <_malloc_r+0x374>
  402a56:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  402a5a:	227e      	movs	r2, #126	; 0x7e
  402a5c:	e712      	b.n	402884 <_malloc_r+0x374>
  402a5e:	687b      	ldr	r3, [r7, #4]
  402a60:	e780      	b.n	402964 <_malloc_r+0x454>
  402a62:	08f0      	lsrs	r0, r6, #3
  402a64:	f106 0308 	add.w	r3, r6, #8
  402a68:	e600      	b.n	40266c <_malloc_r+0x15c>
  402a6a:	bf00      	nop
  402a6c:	20400b60 	.word	0x20400b60

00402a70 <memchr>:
  402a70:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  402a74:	2a10      	cmp	r2, #16
  402a76:	db2b      	blt.n	402ad0 <memchr+0x60>
  402a78:	f010 0f07 	tst.w	r0, #7
  402a7c:	d008      	beq.n	402a90 <memchr+0x20>
  402a7e:	f810 3b01 	ldrb.w	r3, [r0], #1
  402a82:	3a01      	subs	r2, #1
  402a84:	428b      	cmp	r3, r1
  402a86:	d02d      	beq.n	402ae4 <memchr+0x74>
  402a88:	f010 0f07 	tst.w	r0, #7
  402a8c:	b342      	cbz	r2, 402ae0 <memchr+0x70>
  402a8e:	d1f6      	bne.n	402a7e <memchr+0xe>
  402a90:	b4f0      	push	{r4, r5, r6, r7}
  402a92:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  402a96:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  402a9a:	f022 0407 	bic.w	r4, r2, #7
  402a9e:	f07f 0700 	mvns.w	r7, #0
  402aa2:	2300      	movs	r3, #0
  402aa4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  402aa8:	3c08      	subs	r4, #8
  402aaa:	ea85 0501 	eor.w	r5, r5, r1
  402aae:	ea86 0601 	eor.w	r6, r6, r1
  402ab2:	fa85 f547 	uadd8	r5, r5, r7
  402ab6:	faa3 f587 	sel	r5, r3, r7
  402aba:	fa86 f647 	uadd8	r6, r6, r7
  402abe:	faa5 f687 	sel	r6, r5, r7
  402ac2:	b98e      	cbnz	r6, 402ae8 <memchr+0x78>
  402ac4:	d1ee      	bne.n	402aa4 <memchr+0x34>
  402ac6:	bcf0      	pop	{r4, r5, r6, r7}
  402ac8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  402acc:	f002 0207 	and.w	r2, r2, #7
  402ad0:	b132      	cbz	r2, 402ae0 <memchr+0x70>
  402ad2:	f810 3b01 	ldrb.w	r3, [r0], #1
  402ad6:	3a01      	subs	r2, #1
  402ad8:	ea83 0301 	eor.w	r3, r3, r1
  402adc:	b113      	cbz	r3, 402ae4 <memchr+0x74>
  402ade:	d1f8      	bne.n	402ad2 <memchr+0x62>
  402ae0:	2000      	movs	r0, #0
  402ae2:	4770      	bx	lr
  402ae4:	3801      	subs	r0, #1
  402ae6:	4770      	bx	lr
  402ae8:	2d00      	cmp	r5, #0
  402aea:	bf06      	itte	eq
  402aec:	4635      	moveq	r5, r6
  402aee:	3803      	subeq	r0, #3
  402af0:	3807      	subne	r0, #7
  402af2:	f015 0f01 	tst.w	r5, #1
  402af6:	d107      	bne.n	402b08 <memchr+0x98>
  402af8:	3001      	adds	r0, #1
  402afa:	f415 7f80 	tst.w	r5, #256	; 0x100
  402afe:	bf02      	ittt	eq
  402b00:	3001      	addeq	r0, #1
  402b02:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  402b06:	3001      	addeq	r0, #1
  402b08:	bcf0      	pop	{r4, r5, r6, r7}
  402b0a:	3801      	subs	r0, #1
  402b0c:	4770      	bx	lr
  402b0e:	bf00      	nop

00402b10 <memcpy>:
  402b10:	4684      	mov	ip, r0
  402b12:	ea41 0300 	orr.w	r3, r1, r0
  402b16:	f013 0303 	ands.w	r3, r3, #3
  402b1a:	d16d      	bne.n	402bf8 <memcpy+0xe8>
  402b1c:	3a40      	subs	r2, #64	; 0x40
  402b1e:	d341      	bcc.n	402ba4 <memcpy+0x94>
  402b20:	f851 3b04 	ldr.w	r3, [r1], #4
  402b24:	f840 3b04 	str.w	r3, [r0], #4
  402b28:	f851 3b04 	ldr.w	r3, [r1], #4
  402b2c:	f840 3b04 	str.w	r3, [r0], #4
  402b30:	f851 3b04 	ldr.w	r3, [r1], #4
  402b34:	f840 3b04 	str.w	r3, [r0], #4
  402b38:	f851 3b04 	ldr.w	r3, [r1], #4
  402b3c:	f840 3b04 	str.w	r3, [r0], #4
  402b40:	f851 3b04 	ldr.w	r3, [r1], #4
  402b44:	f840 3b04 	str.w	r3, [r0], #4
  402b48:	f851 3b04 	ldr.w	r3, [r1], #4
  402b4c:	f840 3b04 	str.w	r3, [r0], #4
  402b50:	f851 3b04 	ldr.w	r3, [r1], #4
  402b54:	f840 3b04 	str.w	r3, [r0], #4
  402b58:	f851 3b04 	ldr.w	r3, [r1], #4
  402b5c:	f840 3b04 	str.w	r3, [r0], #4
  402b60:	f851 3b04 	ldr.w	r3, [r1], #4
  402b64:	f840 3b04 	str.w	r3, [r0], #4
  402b68:	f851 3b04 	ldr.w	r3, [r1], #4
  402b6c:	f840 3b04 	str.w	r3, [r0], #4
  402b70:	f851 3b04 	ldr.w	r3, [r1], #4
  402b74:	f840 3b04 	str.w	r3, [r0], #4
  402b78:	f851 3b04 	ldr.w	r3, [r1], #4
  402b7c:	f840 3b04 	str.w	r3, [r0], #4
  402b80:	f851 3b04 	ldr.w	r3, [r1], #4
  402b84:	f840 3b04 	str.w	r3, [r0], #4
  402b88:	f851 3b04 	ldr.w	r3, [r1], #4
  402b8c:	f840 3b04 	str.w	r3, [r0], #4
  402b90:	f851 3b04 	ldr.w	r3, [r1], #4
  402b94:	f840 3b04 	str.w	r3, [r0], #4
  402b98:	f851 3b04 	ldr.w	r3, [r1], #4
  402b9c:	f840 3b04 	str.w	r3, [r0], #4
  402ba0:	3a40      	subs	r2, #64	; 0x40
  402ba2:	d2bd      	bcs.n	402b20 <memcpy+0x10>
  402ba4:	3230      	adds	r2, #48	; 0x30
  402ba6:	d311      	bcc.n	402bcc <memcpy+0xbc>
  402ba8:	f851 3b04 	ldr.w	r3, [r1], #4
  402bac:	f840 3b04 	str.w	r3, [r0], #4
  402bb0:	f851 3b04 	ldr.w	r3, [r1], #4
  402bb4:	f840 3b04 	str.w	r3, [r0], #4
  402bb8:	f851 3b04 	ldr.w	r3, [r1], #4
  402bbc:	f840 3b04 	str.w	r3, [r0], #4
  402bc0:	f851 3b04 	ldr.w	r3, [r1], #4
  402bc4:	f840 3b04 	str.w	r3, [r0], #4
  402bc8:	3a10      	subs	r2, #16
  402bca:	d2ed      	bcs.n	402ba8 <memcpy+0x98>
  402bcc:	320c      	adds	r2, #12
  402bce:	d305      	bcc.n	402bdc <memcpy+0xcc>
  402bd0:	f851 3b04 	ldr.w	r3, [r1], #4
  402bd4:	f840 3b04 	str.w	r3, [r0], #4
  402bd8:	3a04      	subs	r2, #4
  402bda:	d2f9      	bcs.n	402bd0 <memcpy+0xc0>
  402bdc:	3204      	adds	r2, #4
  402bde:	d008      	beq.n	402bf2 <memcpy+0xe2>
  402be0:	07d2      	lsls	r2, r2, #31
  402be2:	bf1c      	itt	ne
  402be4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402be8:	f800 3b01 	strbne.w	r3, [r0], #1
  402bec:	d301      	bcc.n	402bf2 <memcpy+0xe2>
  402bee:	880b      	ldrh	r3, [r1, #0]
  402bf0:	8003      	strh	r3, [r0, #0]
  402bf2:	4660      	mov	r0, ip
  402bf4:	4770      	bx	lr
  402bf6:	bf00      	nop
  402bf8:	2a08      	cmp	r2, #8
  402bfa:	d313      	bcc.n	402c24 <memcpy+0x114>
  402bfc:	078b      	lsls	r3, r1, #30
  402bfe:	d08d      	beq.n	402b1c <memcpy+0xc>
  402c00:	f010 0303 	ands.w	r3, r0, #3
  402c04:	d08a      	beq.n	402b1c <memcpy+0xc>
  402c06:	f1c3 0304 	rsb	r3, r3, #4
  402c0a:	1ad2      	subs	r2, r2, r3
  402c0c:	07db      	lsls	r3, r3, #31
  402c0e:	bf1c      	itt	ne
  402c10:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402c14:	f800 3b01 	strbne.w	r3, [r0], #1
  402c18:	d380      	bcc.n	402b1c <memcpy+0xc>
  402c1a:	f831 3b02 	ldrh.w	r3, [r1], #2
  402c1e:	f820 3b02 	strh.w	r3, [r0], #2
  402c22:	e77b      	b.n	402b1c <memcpy+0xc>
  402c24:	3a04      	subs	r2, #4
  402c26:	d3d9      	bcc.n	402bdc <memcpy+0xcc>
  402c28:	3a01      	subs	r2, #1
  402c2a:	f811 3b01 	ldrb.w	r3, [r1], #1
  402c2e:	f800 3b01 	strb.w	r3, [r0], #1
  402c32:	d2f9      	bcs.n	402c28 <memcpy+0x118>
  402c34:	780b      	ldrb	r3, [r1, #0]
  402c36:	7003      	strb	r3, [r0, #0]
  402c38:	784b      	ldrb	r3, [r1, #1]
  402c3a:	7043      	strb	r3, [r0, #1]
  402c3c:	788b      	ldrb	r3, [r1, #2]
  402c3e:	7083      	strb	r3, [r0, #2]
  402c40:	4660      	mov	r0, ip
  402c42:	4770      	bx	lr

00402c44 <memmove>:
  402c44:	4288      	cmp	r0, r1
  402c46:	b5f0      	push	{r4, r5, r6, r7, lr}
  402c48:	d90d      	bls.n	402c66 <memmove+0x22>
  402c4a:	188b      	adds	r3, r1, r2
  402c4c:	4298      	cmp	r0, r3
  402c4e:	d20a      	bcs.n	402c66 <memmove+0x22>
  402c50:	1884      	adds	r4, r0, r2
  402c52:	2a00      	cmp	r2, #0
  402c54:	d051      	beq.n	402cfa <memmove+0xb6>
  402c56:	4622      	mov	r2, r4
  402c58:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  402c5c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  402c60:	4299      	cmp	r1, r3
  402c62:	d1f9      	bne.n	402c58 <memmove+0x14>
  402c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402c66:	2a0f      	cmp	r2, #15
  402c68:	d948      	bls.n	402cfc <memmove+0xb8>
  402c6a:	ea41 0300 	orr.w	r3, r1, r0
  402c6e:	079b      	lsls	r3, r3, #30
  402c70:	d146      	bne.n	402d00 <memmove+0xbc>
  402c72:	f100 0410 	add.w	r4, r0, #16
  402c76:	f101 0310 	add.w	r3, r1, #16
  402c7a:	4615      	mov	r5, r2
  402c7c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  402c80:	f844 6c10 	str.w	r6, [r4, #-16]
  402c84:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  402c88:	f844 6c0c 	str.w	r6, [r4, #-12]
  402c8c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  402c90:	f844 6c08 	str.w	r6, [r4, #-8]
  402c94:	3d10      	subs	r5, #16
  402c96:	f853 6c04 	ldr.w	r6, [r3, #-4]
  402c9a:	f844 6c04 	str.w	r6, [r4, #-4]
  402c9e:	2d0f      	cmp	r5, #15
  402ca0:	f103 0310 	add.w	r3, r3, #16
  402ca4:	f104 0410 	add.w	r4, r4, #16
  402ca8:	d8e8      	bhi.n	402c7c <memmove+0x38>
  402caa:	f1a2 0310 	sub.w	r3, r2, #16
  402cae:	f023 030f 	bic.w	r3, r3, #15
  402cb2:	f002 0e0f 	and.w	lr, r2, #15
  402cb6:	3310      	adds	r3, #16
  402cb8:	f1be 0f03 	cmp.w	lr, #3
  402cbc:	4419      	add	r1, r3
  402cbe:	4403      	add	r3, r0
  402cc0:	d921      	bls.n	402d06 <memmove+0xc2>
  402cc2:	1f1e      	subs	r6, r3, #4
  402cc4:	460d      	mov	r5, r1
  402cc6:	4674      	mov	r4, lr
  402cc8:	3c04      	subs	r4, #4
  402cca:	f855 7b04 	ldr.w	r7, [r5], #4
  402cce:	f846 7f04 	str.w	r7, [r6, #4]!
  402cd2:	2c03      	cmp	r4, #3
  402cd4:	d8f8      	bhi.n	402cc8 <memmove+0x84>
  402cd6:	f1ae 0404 	sub.w	r4, lr, #4
  402cda:	f024 0403 	bic.w	r4, r4, #3
  402cde:	3404      	adds	r4, #4
  402ce0:	4421      	add	r1, r4
  402ce2:	4423      	add	r3, r4
  402ce4:	f002 0203 	and.w	r2, r2, #3
  402ce8:	b162      	cbz	r2, 402d04 <memmove+0xc0>
  402cea:	3b01      	subs	r3, #1
  402cec:	440a      	add	r2, r1
  402cee:	f811 4b01 	ldrb.w	r4, [r1], #1
  402cf2:	f803 4f01 	strb.w	r4, [r3, #1]!
  402cf6:	428a      	cmp	r2, r1
  402cf8:	d1f9      	bne.n	402cee <memmove+0xaa>
  402cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402cfc:	4603      	mov	r3, r0
  402cfe:	e7f3      	b.n	402ce8 <memmove+0xa4>
  402d00:	4603      	mov	r3, r0
  402d02:	e7f2      	b.n	402cea <memmove+0xa6>
  402d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402d06:	4672      	mov	r2, lr
  402d08:	e7ee      	b.n	402ce8 <memmove+0xa4>
  402d0a:	bf00      	nop

00402d0c <__malloc_lock>:
  402d0c:	4801      	ldr	r0, [pc, #4]	; (402d14 <__malloc_lock+0x8>)
  402d0e:	f7ff bb7b 	b.w	402408 <__retarget_lock_acquire_recursive>
  402d12:	bf00      	nop
  402d14:	20400bc4 	.word	0x20400bc4

00402d18 <__malloc_unlock>:
  402d18:	4801      	ldr	r0, [pc, #4]	; (402d20 <__malloc_unlock+0x8>)
  402d1a:	f7ff bb77 	b.w	40240c <__retarget_lock_release_recursive>
  402d1e:	bf00      	nop
  402d20:	20400bc4 	.word	0x20400bc4

00402d24 <_realloc_r>:
  402d24:	2900      	cmp	r1, #0
  402d26:	f000 8095 	beq.w	402e54 <_realloc_r+0x130>
  402d2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402d2e:	460d      	mov	r5, r1
  402d30:	4616      	mov	r6, r2
  402d32:	b083      	sub	sp, #12
  402d34:	4680      	mov	r8, r0
  402d36:	f106 070b 	add.w	r7, r6, #11
  402d3a:	f7ff ffe7 	bl	402d0c <__malloc_lock>
  402d3e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  402d42:	2f16      	cmp	r7, #22
  402d44:	f02e 0403 	bic.w	r4, lr, #3
  402d48:	f1a5 0908 	sub.w	r9, r5, #8
  402d4c:	d83c      	bhi.n	402dc8 <_realloc_r+0xa4>
  402d4e:	2210      	movs	r2, #16
  402d50:	4617      	mov	r7, r2
  402d52:	42be      	cmp	r6, r7
  402d54:	d83d      	bhi.n	402dd2 <_realloc_r+0xae>
  402d56:	4294      	cmp	r4, r2
  402d58:	da43      	bge.n	402de2 <_realloc_r+0xbe>
  402d5a:	4bc4      	ldr	r3, [pc, #784]	; (40306c <_realloc_r+0x348>)
  402d5c:	6899      	ldr	r1, [r3, #8]
  402d5e:	eb09 0004 	add.w	r0, r9, r4
  402d62:	4288      	cmp	r0, r1
  402d64:	f000 80b4 	beq.w	402ed0 <_realloc_r+0x1ac>
  402d68:	6843      	ldr	r3, [r0, #4]
  402d6a:	f023 0101 	bic.w	r1, r3, #1
  402d6e:	4401      	add	r1, r0
  402d70:	6849      	ldr	r1, [r1, #4]
  402d72:	07c9      	lsls	r1, r1, #31
  402d74:	d54c      	bpl.n	402e10 <_realloc_r+0xec>
  402d76:	f01e 0f01 	tst.w	lr, #1
  402d7a:	f000 809b 	beq.w	402eb4 <_realloc_r+0x190>
  402d7e:	4631      	mov	r1, r6
  402d80:	4640      	mov	r0, r8
  402d82:	f7ff fbc5 	bl	402510 <_malloc_r>
  402d86:	4606      	mov	r6, r0
  402d88:	2800      	cmp	r0, #0
  402d8a:	d03a      	beq.n	402e02 <_realloc_r+0xde>
  402d8c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  402d90:	f023 0301 	bic.w	r3, r3, #1
  402d94:	444b      	add	r3, r9
  402d96:	f1a0 0208 	sub.w	r2, r0, #8
  402d9a:	429a      	cmp	r2, r3
  402d9c:	f000 8121 	beq.w	402fe2 <_realloc_r+0x2be>
  402da0:	1f22      	subs	r2, r4, #4
  402da2:	2a24      	cmp	r2, #36	; 0x24
  402da4:	f200 8107 	bhi.w	402fb6 <_realloc_r+0x292>
  402da8:	2a13      	cmp	r2, #19
  402daa:	f200 80db 	bhi.w	402f64 <_realloc_r+0x240>
  402dae:	4603      	mov	r3, r0
  402db0:	462a      	mov	r2, r5
  402db2:	6811      	ldr	r1, [r2, #0]
  402db4:	6019      	str	r1, [r3, #0]
  402db6:	6851      	ldr	r1, [r2, #4]
  402db8:	6059      	str	r1, [r3, #4]
  402dba:	6892      	ldr	r2, [r2, #8]
  402dbc:	609a      	str	r2, [r3, #8]
  402dbe:	4629      	mov	r1, r5
  402dc0:	4640      	mov	r0, r8
  402dc2:	f7ff f895 	bl	401ef0 <_free_r>
  402dc6:	e01c      	b.n	402e02 <_realloc_r+0xde>
  402dc8:	f027 0707 	bic.w	r7, r7, #7
  402dcc:	2f00      	cmp	r7, #0
  402dce:	463a      	mov	r2, r7
  402dd0:	dabf      	bge.n	402d52 <_realloc_r+0x2e>
  402dd2:	2600      	movs	r6, #0
  402dd4:	230c      	movs	r3, #12
  402dd6:	4630      	mov	r0, r6
  402dd8:	f8c8 3000 	str.w	r3, [r8]
  402ddc:	b003      	add	sp, #12
  402dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402de2:	462e      	mov	r6, r5
  402de4:	1be3      	subs	r3, r4, r7
  402de6:	2b0f      	cmp	r3, #15
  402de8:	d81e      	bhi.n	402e28 <_realloc_r+0x104>
  402dea:	f8d9 3004 	ldr.w	r3, [r9, #4]
  402dee:	f003 0301 	and.w	r3, r3, #1
  402df2:	4323      	orrs	r3, r4
  402df4:	444c      	add	r4, r9
  402df6:	f8c9 3004 	str.w	r3, [r9, #4]
  402dfa:	6863      	ldr	r3, [r4, #4]
  402dfc:	f043 0301 	orr.w	r3, r3, #1
  402e00:	6063      	str	r3, [r4, #4]
  402e02:	4640      	mov	r0, r8
  402e04:	f7ff ff88 	bl	402d18 <__malloc_unlock>
  402e08:	4630      	mov	r0, r6
  402e0a:	b003      	add	sp, #12
  402e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402e10:	f023 0303 	bic.w	r3, r3, #3
  402e14:	18e1      	adds	r1, r4, r3
  402e16:	4291      	cmp	r1, r2
  402e18:	db1f      	blt.n	402e5a <_realloc_r+0x136>
  402e1a:	68c3      	ldr	r3, [r0, #12]
  402e1c:	6882      	ldr	r2, [r0, #8]
  402e1e:	462e      	mov	r6, r5
  402e20:	60d3      	str	r3, [r2, #12]
  402e22:	460c      	mov	r4, r1
  402e24:	609a      	str	r2, [r3, #8]
  402e26:	e7dd      	b.n	402de4 <_realloc_r+0xc0>
  402e28:	f8d9 2004 	ldr.w	r2, [r9, #4]
  402e2c:	eb09 0107 	add.w	r1, r9, r7
  402e30:	f002 0201 	and.w	r2, r2, #1
  402e34:	444c      	add	r4, r9
  402e36:	f043 0301 	orr.w	r3, r3, #1
  402e3a:	4317      	orrs	r7, r2
  402e3c:	f8c9 7004 	str.w	r7, [r9, #4]
  402e40:	604b      	str	r3, [r1, #4]
  402e42:	6863      	ldr	r3, [r4, #4]
  402e44:	f043 0301 	orr.w	r3, r3, #1
  402e48:	3108      	adds	r1, #8
  402e4a:	6063      	str	r3, [r4, #4]
  402e4c:	4640      	mov	r0, r8
  402e4e:	f7ff f84f 	bl	401ef0 <_free_r>
  402e52:	e7d6      	b.n	402e02 <_realloc_r+0xde>
  402e54:	4611      	mov	r1, r2
  402e56:	f7ff bb5b 	b.w	402510 <_malloc_r>
  402e5a:	f01e 0f01 	tst.w	lr, #1
  402e5e:	d18e      	bne.n	402d7e <_realloc_r+0x5a>
  402e60:	f855 1c08 	ldr.w	r1, [r5, #-8]
  402e64:	eba9 0a01 	sub.w	sl, r9, r1
  402e68:	f8da 1004 	ldr.w	r1, [sl, #4]
  402e6c:	f021 0103 	bic.w	r1, r1, #3
  402e70:	440b      	add	r3, r1
  402e72:	4423      	add	r3, r4
  402e74:	4293      	cmp	r3, r2
  402e76:	db25      	blt.n	402ec4 <_realloc_r+0x1a0>
  402e78:	68c2      	ldr	r2, [r0, #12]
  402e7a:	6881      	ldr	r1, [r0, #8]
  402e7c:	4656      	mov	r6, sl
  402e7e:	60ca      	str	r2, [r1, #12]
  402e80:	6091      	str	r1, [r2, #8]
  402e82:	f8da 100c 	ldr.w	r1, [sl, #12]
  402e86:	f856 0f08 	ldr.w	r0, [r6, #8]!
  402e8a:	1f22      	subs	r2, r4, #4
  402e8c:	2a24      	cmp	r2, #36	; 0x24
  402e8e:	60c1      	str	r1, [r0, #12]
  402e90:	6088      	str	r0, [r1, #8]
  402e92:	f200 8094 	bhi.w	402fbe <_realloc_r+0x29a>
  402e96:	2a13      	cmp	r2, #19
  402e98:	d96f      	bls.n	402f7a <_realloc_r+0x256>
  402e9a:	6829      	ldr	r1, [r5, #0]
  402e9c:	f8ca 1008 	str.w	r1, [sl, #8]
  402ea0:	6869      	ldr	r1, [r5, #4]
  402ea2:	f8ca 100c 	str.w	r1, [sl, #12]
  402ea6:	2a1b      	cmp	r2, #27
  402ea8:	f200 80a2 	bhi.w	402ff0 <_realloc_r+0x2cc>
  402eac:	3508      	adds	r5, #8
  402eae:	f10a 0210 	add.w	r2, sl, #16
  402eb2:	e063      	b.n	402f7c <_realloc_r+0x258>
  402eb4:	f855 3c08 	ldr.w	r3, [r5, #-8]
  402eb8:	eba9 0a03 	sub.w	sl, r9, r3
  402ebc:	f8da 1004 	ldr.w	r1, [sl, #4]
  402ec0:	f021 0103 	bic.w	r1, r1, #3
  402ec4:	1863      	adds	r3, r4, r1
  402ec6:	4293      	cmp	r3, r2
  402ec8:	f6ff af59 	blt.w	402d7e <_realloc_r+0x5a>
  402ecc:	4656      	mov	r6, sl
  402ece:	e7d8      	b.n	402e82 <_realloc_r+0x15e>
  402ed0:	6841      	ldr	r1, [r0, #4]
  402ed2:	f021 0b03 	bic.w	fp, r1, #3
  402ed6:	44a3      	add	fp, r4
  402ed8:	f107 0010 	add.w	r0, r7, #16
  402edc:	4583      	cmp	fp, r0
  402ede:	da56      	bge.n	402f8e <_realloc_r+0x26a>
  402ee0:	f01e 0f01 	tst.w	lr, #1
  402ee4:	f47f af4b 	bne.w	402d7e <_realloc_r+0x5a>
  402ee8:	f855 1c08 	ldr.w	r1, [r5, #-8]
  402eec:	eba9 0a01 	sub.w	sl, r9, r1
  402ef0:	f8da 1004 	ldr.w	r1, [sl, #4]
  402ef4:	f021 0103 	bic.w	r1, r1, #3
  402ef8:	448b      	add	fp, r1
  402efa:	4558      	cmp	r0, fp
  402efc:	dce2      	bgt.n	402ec4 <_realloc_r+0x1a0>
  402efe:	4656      	mov	r6, sl
  402f00:	f8da 100c 	ldr.w	r1, [sl, #12]
  402f04:	f856 0f08 	ldr.w	r0, [r6, #8]!
  402f08:	1f22      	subs	r2, r4, #4
  402f0a:	2a24      	cmp	r2, #36	; 0x24
  402f0c:	60c1      	str	r1, [r0, #12]
  402f0e:	6088      	str	r0, [r1, #8]
  402f10:	f200 808f 	bhi.w	403032 <_realloc_r+0x30e>
  402f14:	2a13      	cmp	r2, #19
  402f16:	f240 808a 	bls.w	40302e <_realloc_r+0x30a>
  402f1a:	6829      	ldr	r1, [r5, #0]
  402f1c:	f8ca 1008 	str.w	r1, [sl, #8]
  402f20:	6869      	ldr	r1, [r5, #4]
  402f22:	f8ca 100c 	str.w	r1, [sl, #12]
  402f26:	2a1b      	cmp	r2, #27
  402f28:	f200 808a 	bhi.w	403040 <_realloc_r+0x31c>
  402f2c:	3508      	adds	r5, #8
  402f2e:	f10a 0210 	add.w	r2, sl, #16
  402f32:	6829      	ldr	r1, [r5, #0]
  402f34:	6011      	str	r1, [r2, #0]
  402f36:	6869      	ldr	r1, [r5, #4]
  402f38:	6051      	str	r1, [r2, #4]
  402f3a:	68a9      	ldr	r1, [r5, #8]
  402f3c:	6091      	str	r1, [r2, #8]
  402f3e:	eb0a 0107 	add.w	r1, sl, r7
  402f42:	ebab 0207 	sub.w	r2, fp, r7
  402f46:	f042 0201 	orr.w	r2, r2, #1
  402f4a:	6099      	str	r1, [r3, #8]
  402f4c:	604a      	str	r2, [r1, #4]
  402f4e:	f8da 3004 	ldr.w	r3, [sl, #4]
  402f52:	f003 0301 	and.w	r3, r3, #1
  402f56:	431f      	orrs	r7, r3
  402f58:	4640      	mov	r0, r8
  402f5a:	f8ca 7004 	str.w	r7, [sl, #4]
  402f5e:	f7ff fedb 	bl	402d18 <__malloc_unlock>
  402f62:	e751      	b.n	402e08 <_realloc_r+0xe4>
  402f64:	682b      	ldr	r3, [r5, #0]
  402f66:	6003      	str	r3, [r0, #0]
  402f68:	686b      	ldr	r3, [r5, #4]
  402f6a:	6043      	str	r3, [r0, #4]
  402f6c:	2a1b      	cmp	r2, #27
  402f6e:	d82d      	bhi.n	402fcc <_realloc_r+0x2a8>
  402f70:	f100 0308 	add.w	r3, r0, #8
  402f74:	f105 0208 	add.w	r2, r5, #8
  402f78:	e71b      	b.n	402db2 <_realloc_r+0x8e>
  402f7a:	4632      	mov	r2, r6
  402f7c:	6829      	ldr	r1, [r5, #0]
  402f7e:	6011      	str	r1, [r2, #0]
  402f80:	6869      	ldr	r1, [r5, #4]
  402f82:	6051      	str	r1, [r2, #4]
  402f84:	68a9      	ldr	r1, [r5, #8]
  402f86:	6091      	str	r1, [r2, #8]
  402f88:	461c      	mov	r4, r3
  402f8a:	46d1      	mov	r9, sl
  402f8c:	e72a      	b.n	402de4 <_realloc_r+0xc0>
  402f8e:	eb09 0107 	add.w	r1, r9, r7
  402f92:	ebab 0b07 	sub.w	fp, fp, r7
  402f96:	f04b 0201 	orr.w	r2, fp, #1
  402f9a:	6099      	str	r1, [r3, #8]
  402f9c:	604a      	str	r2, [r1, #4]
  402f9e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  402fa2:	f003 0301 	and.w	r3, r3, #1
  402fa6:	431f      	orrs	r7, r3
  402fa8:	4640      	mov	r0, r8
  402faa:	f845 7c04 	str.w	r7, [r5, #-4]
  402fae:	f7ff feb3 	bl	402d18 <__malloc_unlock>
  402fb2:	462e      	mov	r6, r5
  402fb4:	e728      	b.n	402e08 <_realloc_r+0xe4>
  402fb6:	4629      	mov	r1, r5
  402fb8:	f7ff fe44 	bl	402c44 <memmove>
  402fbc:	e6ff      	b.n	402dbe <_realloc_r+0x9a>
  402fbe:	4629      	mov	r1, r5
  402fc0:	4630      	mov	r0, r6
  402fc2:	461c      	mov	r4, r3
  402fc4:	46d1      	mov	r9, sl
  402fc6:	f7ff fe3d 	bl	402c44 <memmove>
  402fca:	e70b      	b.n	402de4 <_realloc_r+0xc0>
  402fcc:	68ab      	ldr	r3, [r5, #8]
  402fce:	6083      	str	r3, [r0, #8]
  402fd0:	68eb      	ldr	r3, [r5, #12]
  402fd2:	60c3      	str	r3, [r0, #12]
  402fd4:	2a24      	cmp	r2, #36	; 0x24
  402fd6:	d017      	beq.n	403008 <_realloc_r+0x2e4>
  402fd8:	f100 0310 	add.w	r3, r0, #16
  402fdc:	f105 0210 	add.w	r2, r5, #16
  402fe0:	e6e7      	b.n	402db2 <_realloc_r+0x8e>
  402fe2:	f850 3c04 	ldr.w	r3, [r0, #-4]
  402fe6:	f023 0303 	bic.w	r3, r3, #3
  402fea:	441c      	add	r4, r3
  402fec:	462e      	mov	r6, r5
  402fee:	e6f9      	b.n	402de4 <_realloc_r+0xc0>
  402ff0:	68a9      	ldr	r1, [r5, #8]
  402ff2:	f8ca 1010 	str.w	r1, [sl, #16]
  402ff6:	68e9      	ldr	r1, [r5, #12]
  402ff8:	f8ca 1014 	str.w	r1, [sl, #20]
  402ffc:	2a24      	cmp	r2, #36	; 0x24
  402ffe:	d00c      	beq.n	40301a <_realloc_r+0x2f6>
  403000:	3510      	adds	r5, #16
  403002:	f10a 0218 	add.w	r2, sl, #24
  403006:	e7b9      	b.n	402f7c <_realloc_r+0x258>
  403008:	692b      	ldr	r3, [r5, #16]
  40300a:	6103      	str	r3, [r0, #16]
  40300c:	696b      	ldr	r3, [r5, #20]
  40300e:	6143      	str	r3, [r0, #20]
  403010:	f105 0218 	add.w	r2, r5, #24
  403014:	f100 0318 	add.w	r3, r0, #24
  403018:	e6cb      	b.n	402db2 <_realloc_r+0x8e>
  40301a:	692a      	ldr	r2, [r5, #16]
  40301c:	f8ca 2018 	str.w	r2, [sl, #24]
  403020:	696a      	ldr	r2, [r5, #20]
  403022:	f8ca 201c 	str.w	r2, [sl, #28]
  403026:	3518      	adds	r5, #24
  403028:	f10a 0220 	add.w	r2, sl, #32
  40302c:	e7a6      	b.n	402f7c <_realloc_r+0x258>
  40302e:	4632      	mov	r2, r6
  403030:	e77f      	b.n	402f32 <_realloc_r+0x20e>
  403032:	4629      	mov	r1, r5
  403034:	4630      	mov	r0, r6
  403036:	9301      	str	r3, [sp, #4]
  403038:	f7ff fe04 	bl	402c44 <memmove>
  40303c:	9b01      	ldr	r3, [sp, #4]
  40303e:	e77e      	b.n	402f3e <_realloc_r+0x21a>
  403040:	68a9      	ldr	r1, [r5, #8]
  403042:	f8ca 1010 	str.w	r1, [sl, #16]
  403046:	68e9      	ldr	r1, [r5, #12]
  403048:	f8ca 1014 	str.w	r1, [sl, #20]
  40304c:	2a24      	cmp	r2, #36	; 0x24
  40304e:	d003      	beq.n	403058 <_realloc_r+0x334>
  403050:	3510      	adds	r5, #16
  403052:	f10a 0218 	add.w	r2, sl, #24
  403056:	e76c      	b.n	402f32 <_realloc_r+0x20e>
  403058:	692a      	ldr	r2, [r5, #16]
  40305a:	f8ca 2018 	str.w	r2, [sl, #24]
  40305e:	696a      	ldr	r2, [r5, #20]
  403060:	f8ca 201c 	str.w	r2, [sl, #28]
  403064:	3518      	adds	r5, #24
  403066:	f10a 0220 	add.w	r2, sl, #32
  40306a:	e762      	b.n	402f32 <_realloc_r+0x20e>
  40306c:	2040043c 	.word	0x2040043c

00403070 <_sbrk_r>:
  403070:	b538      	push	{r3, r4, r5, lr}
  403072:	4c07      	ldr	r4, [pc, #28]	; (403090 <_sbrk_r+0x20>)
  403074:	2300      	movs	r3, #0
  403076:	4605      	mov	r5, r0
  403078:	4608      	mov	r0, r1
  40307a:	6023      	str	r3, [r4, #0]
  40307c:	f7fe f9ac 	bl	4013d8 <_sbrk>
  403080:	1c43      	adds	r3, r0, #1
  403082:	d000      	beq.n	403086 <_sbrk_r+0x16>
  403084:	bd38      	pop	{r3, r4, r5, pc}
  403086:	6823      	ldr	r3, [r4, #0]
  403088:	2b00      	cmp	r3, #0
  40308a:	d0fb      	beq.n	403084 <_sbrk_r+0x14>
  40308c:	602b      	str	r3, [r5, #0]
  40308e:	bd38      	pop	{r3, r4, r5, pc}
  403090:	20400bd8 	.word	0x20400bd8

00403094 <__sread>:
  403094:	b510      	push	{r4, lr}
  403096:	460c      	mov	r4, r1
  403098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40309c:	f000 f9ca 	bl	403434 <_read_r>
  4030a0:	2800      	cmp	r0, #0
  4030a2:	db03      	blt.n	4030ac <__sread+0x18>
  4030a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4030a6:	4403      	add	r3, r0
  4030a8:	6523      	str	r3, [r4, #80]	; 0x50
  4030aa:	bd10      	pop	{r4, pc}
  4030ac:	89a3      	ldrh	r3, [r4, #12]
  4030ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4030b2:	81a3      	strh	r3, [r4, #12]
  4030b4:	bd10      	pop	{r4, pc}
  4030b6:	bf00      	nop

004030b8 <__swrite>:
  4030b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4030bc:	4616      	mov	r6, r2
  4030be:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4030c2:	461f      	mov	r7, r3
  4030c4:	05d3      	lsls	r3, r2, #23
  4030c6:	460c      	mov	r4, r1
  4030c8:	4605      	mov	r5, r0
  4030ca:	d507      	bpl.n	4030dc <__swrite+0x24>
  4030cc:	2200      	movs	r2, #0
  4030ce:	2302      	movs	r3, #2
  4030d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4030d4:	f000 f998 	bl	403408 <_lseek_r>
  4030d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4030dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4030e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4030e4:	81a2      	strh	r2, [r4, #12]
  4030e6:	463b      	mov	r3, r7
  4030e8:	4632      	mov	r2, r6
  4030ea:	4628      	mov	r0, r5
  4030ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4030f0:	f000 b814 	b.w	40311c <_write_r>

004030f4 <__sseek>:
  4030f4:	b510      	push	{r4, lr}
  4030f6:	460c      	mov	r4, r1
  4030f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4030fc:	f000 f984 	bl	403408 <_lseek_r>
  403100:	89a3      	ldrh	r3, [r4, #12]
  403102:	1c42      	adds	r2, r0, #1
  403104:	bf0e      	itee	eq
  403106:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40310a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40310e:	6520      	strne	r0, [r4, #80]	; 0x50
  403110:	81a3      	strh	r3, [r4, #12]
  403112:	bd10      	pop	{r4, pc}

00403114 <__sclose>:
  403114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403118:	f000 b8dc 	b.w	4032d4 <_close_r>

0040311c <_write_r>:
  40311c:	b570      	push	{r4, r5, r6, lr}
  40311e:	460d      	mov	r5, r1
  403120:	4c08      	ldr	r4, [pc, #32]	; (403144 <_write_r+0x28>)
  403122:	4611      	mov	r1, r2
  403124:	4606      	mov	r6, r0
  403126:	461a      	mov	r2, r3
  403128:	4628      	mov	r0, r5
  40312a:	2300      	movs	r3, #0
  40312c:	6023      	str	r3, [r4, #0]
  40312e:	f7fd f893 	bl	400258 <_write>
  403132:	1c43      	adds	r3, r0, #1
  403134:	d000      	beq.n	403138 <_write_r+0x1c>
  403136:	bd70      	pop	{r4, r5, r6, pc}
  403138:	6823      	ldr	r3, [r4, #0]
  40313a:	2b00      	cmp	r3, #0
  40313c:	d0fb      	beq.n	403136 <_write_r+0x1a>
  40313e:	6033      	str	r3, [r6, #0]
  403140:	bd70      	pop	{r4, r5, r6, pc}
  403142:	bf00      	nop
  403144:	20400bd8 	.word	0x20400bd8

00403148 <__swsetup_r>:
  403148:	b538      	push	{r3, r4, r5, lr}
  40314a:	4b30      	ldr	r3, [pc, #192]	; (40320c <__swsetup_r+0xc4>)
  40314c:	681b      	ldr	r3, [r3, #0]
  40314e:	4605      	mov	r5, r0
  403150:	460c      	mov	r4, r1
  403152:	b113      	cbz	r3, 40315a <__swsetup_r+0x12>
  403154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  403156:	2a00      	cmp	r2, #0
  403158:	d038      	beq.n	4031cc <__swsetup_r+0x84>
  40315a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40315e:	b293      	uxth	r3, r2
  403160:	0718      	lsls	r0, r3, #28
  403162:	d50c      	bpl.n	40317e <__swsetup_r+0x36>
  403164:	6920      	ldr	r0, [r4, #16]
  403166:	b1a8      	cbz	r0, 403194 <__swsetup_r+0x4c>
  403168:	f013 0201 	ands.w	r2, r3, #1
  40316c:	d01e      	beq.n	4031ac <__swsetup_r+0x64>
  40316e:	6963      	ldr	r3, [r4, #20]
  403170:	2200      	movs	r2, #0
  403172:	425b      	negs	r3, r3
  403174:	61a3      	str	r3, [r4, #24]
  403176:	60a2      	str	r2, [r4, #8]
  403178:	b1f0      	cbz	r0, 4031b8 <__swsetup_r+0x70>
  40317a:	2000      	movs	r0, #0
  40317c:	bd38      	pop	{r3, r4, r5, pc}
  40317e:	06d9      	lsls	r1, r3, #27
  403180:	d53c      	bpl.n	4031fc <__swsetup_r+0xb4>
  403182:	0758      	lsls	r0, r3, #29
  403184:	d426      	bmi.n	4031d4 <__swsetup_r+0x8c>
  403186:	6920      	ldr	r0, [r4, #16]
  403188:	f042 0308 	orr.w	r3, r2, #8
  40318c:	81a3      	strh	r3, [r4, #12]
  40318e:	b29b      	uxth	r3, r3
  403190:	2800      	cmp	r0, #0
  403192:	d1e9      	bne.n	403168 <__swsetup_r+0x20>
  403194:	f403 7220 	and.w	r2, r3, #640	; 0x280
  403198:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40319c:	d0e4      	beq.n	403168 <__swsetup_r+0x20>
  40319e:	4628      	mov	r0, r5
  4031a0:	4621      	mov	r1, r4
  4031a2:	f7ff f963 	bl	40246c <__smakebuf_r>
  4031a6:	89a3      	ldrh	r3, [r4, #12]
  4031a8:	6920      	ldr	r0, [r4, #16]
  4031aa:	e7dd      	b.n	403168 <__swsetup_r+0x20>
  4031ac:	0799      	lsls	r1, r3, #30
  4031ae:	bf58      	it	pl
  4031b0:	6962      	ldrpl	r2, [r4, #20]
  4031b2:	60a2      	str	r2, [r4, #8]
  4031b4:	2800      	cmp	r0, #0
  4031b6:	d1e0      	bne.n	40317a <__swsetup_r+0x32>
  4031b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4031bc:	061a      	lsls	r2, r3, #24
  4031be:	d5dd      	bpl.n	40317c <__swsetup_r+0x34>
  4031c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4031c4:	81a3      	strh	r3, [r4, #12]
  4031c6:	f04f 30ff 	mov.w	r0, #4294967295
  4031ca:	bd38      	pop	{r3, r4, r5, pc}
  4031cc:	4618      	mov	r0, r3
  4031ce:	f7fe fded 	bl	401dac <__sinit>
  4031d2:	e7c2      	b.n	40315a <__swsetup_r+0x12>
  4031d4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4031d6:	b151      	cbz	r1, 4031ee <__swsetup_r+0xa6>
  4031d8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4031dc:	4299      	cmp	r1, r3
  4031de:	d004      	beq.n	4031ea <__swsetup_r+0xa2>
  4031e0:	4628      	mov	r0, r5
  4031e2:	f7fe fe85 	bl	401ef0 <_free_r>
  4031e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4031ea:	2300      	movs	r3, #0
  4031ec:	6323      	str	r3, [r4, #48]	; 0x30
  4031ee:	2300      	movs	r3, #0
  4031f0:	6920      	ldr	r0, [r4, #16]
  4031f2:	6063      	str	r3, [r4, #4]
  4031f4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4031f8:	6020      	str	r0, [r4, #0]
  4031fa:	e7c5      	b.n	403188 <__swsetup_r+0x40>
  4031fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  403200:	2309      	movs	r3, #9
  403202:	602b      	str	r3, [r5, #0]
  403204:	f04f 30ff 	mov.w	r0, #4294967295
  403208:	81a2      	strh	r2, [r4, #12]
  40320a:	bd38      	pop	{r3, r4, r5, pc}
  40320c:	20400008 	.word	0x20400008

00403210 <__register_exitproc>:
  403210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403214:	4d2c      	ldr	r5, [pc, #176]	; (4032c8 <__register_exitproc+0xb8>)
  403216:	4606      	mov	r6, r0
  403218:	6828      	ldr	r0, [r5, #0]
  40321a:	4698      	mov	r8, r3
  40321c:	460f      	mov	r7, r1
  40321e:	4691      	mov	r9, r2
  403220:	f7ff f8f2 	bl	402408 <__retarget_lock_acquire_recursive>
  403224:	4b29      	ldr	r3, [pc, #164]	; (4032cc <__register_exitproc+0xbc>)
  403226:	681c      	ldr	r4, [r3, #0]
  403228:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40322c:	2b00      	cmp	r3, #0
  40322e:	d03e      	beq.n	4032ae <__register_exitproc+0x9e>
  403230:	685a      	ldr	r2, [r3, #4]
  403232:	2a1f      	cmp	r2, #31
  403234:	dc1c      	bgt.n	403270 <__register_exitproc+0x60>
  403236:	f102 0e01 	add.w	lr, r2, #1
  40323a:	b176      	cbz	r6, 40325a <__register_exitproc+0x4a>
  40323c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  403240:	2401      	movs	r4, #1
  403242:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  403246:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40324a:	4094      	lsls	r4, r2
  40324c:	4320      	orrs	r0, r4
  40324e:	2e02      	cmp	r6, #2
  403250:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  403254:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  403258:	d023      	beq.n	4032a2 <__register_exitproc+0x92>
  40325a:	3202      	adds	r2, #2
  40325c:	f8c3 e004 	str.w	lr, [r3, #4]
  403260:	6828      	ldr	r0, [r5, #0]
  403262:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  403266:	f7ff f8d1 	bl	40240c <__retarget_lock_release_recursive>
  40326a:	2000      	movs	r0, #0
  40326c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403270:	4b17      	ldr	r3, [pc, #92]	; (4032d0 <__register_exitproc+0xc0>)
  403272:	b30b      	cbz	r3, 4032b8 <__register_exitproc+0xa8>
  403274:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403278:	f7ff f942 	bl	402500 <malloc>
  40327c:	4603      	mov	r3, r0
  40327e:	b1d8      	cbz	r0, 4032b8 <__register_exitproc+0xa8>
  403280:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  403284:	6002      	str	r2, [r0, #0]
  403286:	2100      	movs	r1, #0
  403288:	6041      	str	r1, [r0, #4]
  40328a:	460a      	mov	r2, r1
  40328c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  403290:	f04f 0e01 	mov.w	lr, #1
  403294:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  403298:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40329c:	2e00      	cmp	r6, #0
  40329e:	d0dc      	beq.n	40325a <__register_exitproc+0x4a>
  4032a0:	e7cc      	b.n	40323c <__register_exitproc+0x2c>
  4032a2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4032a6:	430c      	orrs	r4, r1
  4032a8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4032ac:	e7d5      	b.n	40325a <__register_exitproc+0x4a>
  4032ae:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4032b2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4032b6:	e7bb      	b.n	403230 <__register_exitproc+0x20>
  4032b8:	6828      	ldr	r0, [r5, #0]
  4032ba:	f7ff f8a7 	bl	40240c <__retarget_lock_release_recursive>
  4032be:	f04f 30ff 	mov.w	r0, #4294967295
  4032c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4032c6:	bf00      	nop
  4032c8:	20400438 	.word	0x20400438
  4032cc:	00403c08 	.word	0x00403c08
  4032d0:	00402501 	.word	0x00402501

004032d4 <_close_r>:
  4032d4:	b538      	push	{r3, r4, r5, lr}
  4032d6:	4c07      	ldr	r4, [pc, #28]	; (4032f4 <_close_r+0x20>)
  4032d8:	2300      	movs	r3, #0
  4032da:	4605      	mov	r5, r0
  4032dc:	4608      	mov	r0, r1
  4032de:	6023      	str	r3, [r4, #0]
  4032e0:	f7fe f896 	bl	401410 <_close>
  4032e4:	1c43      	adds	r3, r0, #1
  4032e6:	d000      	beq.n	4032ea <_close_r+0x16>
  4032e8:	bd38      	pop	{r3, r4, r5, pc}
  4032ea:	6823      	ldr	r3, [r4, #0]
  4032ec:	2b00      	cmp	r3, #0
  4032ee:	d0fb      	beq.n	4032e8 <_close_r+0x14>
  4032f0:	602b      	str	r3, [r5, #0]
  4032f2:	bd38      	pop	{r3, r4, r5, pc}
  4032f4:	20400bd8 	.word	0x20400bd8

004032f8 <_fclose_r>:
  4032f8:	b570      	push	{r4, r5, r6, lr}
  4032fa:	b159      	cbz	r1, 403314 <_fclose_r+0x1c>
  4032fc:	4605      	mov	r5, r0
  4032fe:	460c      	mov	r4, r1
  403300:	b110      	cbz	r0, 403308 <_fclose_r+0x10>
  403302:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403304:	2b00      	cmp	r3, #0
  403306:	d03c      	beq.n	403382 <_fclose_r+0x8a>
  403308:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40330a:	07d8      	lsls	r0, r3, #31
  40330c:	d505      	bpl.n	40331a <_fclose_r+0x22>
  40330e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403312:	b92b      	cbnz	r3, 403320 <_fclose_r+0x28>
  403314:	2600      	movs	r6, #0
  403316:	4630      	mov	r0, r6
  403318:	bd70      	pop	{r4, r5, r6, pc}
  40331a:	89a3      	ldrh	r3, [r4, #12]
  40331c:	0599      	lsls	r1, r3, #22
  40331e:	d53c      	bpl.n	40339a <_fclose_r+0xa2>
  403320:	4621      	mov	r1, r4
  403322:	4628      	mov	r0, r5
  403324:	f7fe fc4a 	bl	401bbc <__sflush_r>
  403328:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40332a:	4606      	mov	r6, r0
  40332c:	b133      	cbz	r3, 40333c <_fclose_r+0x44>
  40332e:	69e1      	ldr	r1, [r4, #28]
  403330:	4628      	mov	r0, r5
  403332:	4798      	blx	r3
  403334:	2800      	cmp	r0, #0
  403336:	bfb8      	it	lt
  403338:	f04f 36ff 	movlt.w	r6, #4294967295
  40333c:	89a3      	ldrh	r3, [r4, #12]
  40333e:	061a      	lsls	r2, r3, #24
  403340:	d422      	bmi.n	403388 <_fclose_r+0x90>
  403342:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403344:	b141      	cbz	r1, 403358 <_fclose_r+0x60>
  403346:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40334a:	4299      	cmp	r1, r3
  40334c:	d002      	beq.n	403354 <_fclose_r+0x5c>
  40334e:	4628      	mov	r0, r5
  403350:	f7fe fdce 	bl	401ef0 <_free_r>
  403354:	2300      	movs	r3, #0
  403356:	6323      	str	r3, [r4, #48]	; 0x30
  403358:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40335a:	b121      	cbz	r1, 403366 <_fclose_r+0x6e>
  40335c:	4628      	mov	r0, r5
  40335e:	f7fe fdc7 	bl	401ef0 <_free_r>
  403362:	2300      	movs	r3, #0
  403364:	6463      	str	r3, [r4, #68]	; 0x44
  403366:	f7fe fd4d 	bl	401e04 <__sfp_lock_acquire>
  40336a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40336c:	2200      	movs	r2, #0
  40336e:	07db      	lsls	r3, r3, #31
  403370:	81a2      	strh	r2, [r4, #12]
  403372:	d50e      	bpl.n	403392 <_fclose_r+0x9a>
  403374:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403376:	f7ff f845 	bl	402404 <__retarget_lock_close_recursive>
  40337a:	f7fe fd49 	bl	401e10 <__sfp_lock_release>
  40337e:	4630      	mov	r0, r6
  403380:	bd70      	pop	{r4, r5, r6, pc}
  403382:	f7fe fd13 	bl	401dac <__sinit>
  403386:	e7bf      	b.n	403308 <_fclose_r+0x10>
  403388:	6921      	ldr	r1, [r4, #16]
  40338a:	4628      	mov	r0, r5
  40338c:	f7fe fdb0 	bl	401ef0 <_free_r>
  403390:	e7d7      	b.n	403342 <_fclose_r+0x4a>
  403392:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403394:	f7ff f83a 	bl	40240c <__retarget_lock_release_recursive>
  403398:	e7ec      	b.n	403374 <_fclose_r+0x7c>
  40339a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40339c:	f7ff f834 	bl	402408 <__retarget_lock_acquire_recursive>
  4033a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4033a4:	2b00      	cmp	r3, #0
  4033a6:	d1bb      	bne.n	403320 <_fclose_r+0x28>
  4033a8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4033aa:	f016 0601 	ands.w	r6, r6, #1
  4033ae:	d1b1      	bne.n	403314 <_fclose_r+0x1c>
  4033b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4033b2:	f7ff f82b 	bl	40240c <__retarget_lock_release_recursive>
  4033b6:	4630      	mov	r0, r6
  4033b8:	bd70      	pop	{r4, r5, r6, pc}
  4033ba:	bf00      	nop

004033bc <_fstat_r>:
  4033bc:	b538      	push	{r3, r4, r5, lr}
  4033be:	460b      	mov	r3, r1
  4033c0:	4c07      	ldr	r4, [pc, #28]	; (4033e0 <_fstat_r+0x24>)
  4033c2:	4605      	mov	r5, r0
  4033c4:	4611      	mov	r1, r2
  4033c6:	4618      	mov	r0, r3
  4033c8:	2300      	movs	r3, #0
  4033ca:	6023      	str	r3, [r4, #0]
  4033cc:	f7fe f823 	bl	401416 <_fstat>
  4033d0:	1c43      	adds	r3, r0, #1
  4033d2:	d000      	beq.n	4033d6 <_fstat_r+0x1a>
  4033d4:	bd38      	pop	{r3, r4, r5, pc}
  4033d6:	6823      	ldr	r3, [r4, #0]
  4033d8:	2b00      	cmp	r3, #0
  4033da:	d0fb      	beq.n	4033d4 <_fstat_r+0x18>
  4033dc:	602b      	str	r3, [r5, #0]
  4033de:	bd38      	pop	{r3, r4, r5, pc}
  4033e0:	20400bd8 	.word	0x20400bd8

004033e4 <_isatty_r>:
  4033e4:	b538      	push	{r3, r4, r5, lr}
  4033e6:	4c07      	ldr	r4, [pc, #28]	; (403404 <_isatty_r+0x20>)
  4033e8:	2300      	movs	r3, #0
  4033ea:	4605      	mov	r5, r0
  4033ec:	4608      	mov	r0, r1
  4033ee:	6023      	str	r3, [r4, #0]
  4033f0:	f7fe f816 	bl	401420 <_isatty>
  4033f4:	1c43      	adds	r3, r0, #1
  4033f6:	d000      	beq.n	4033fa <_isatty_r+0x16>
  4033f8:	bd38      	pop	{r3, r4, r5, pc}
  4033fa:	6823      	ldr	r3, [r4, #0]
  4033fc:	2b00      	cmp	r3, #0
  4033fe:	d0fb      	beq.n	4033f8 <_isatty_r+0x14>
  403400:	602b      	str	r3, [r5, #0]
  403402:	bd38      	pop	{r3, r4, r5, pc}
  403404:	20400bd8 	.word	0x20400bd8

00403408 <_lseek_r>:
  403408:	b570      	push	{r4, r5, r6, lr}
  40340a:	460d      	mov	r5, r1
  40340c:	4c08      	ldr	r4, [pc, #32]	; (403430 <_lseek_r+0x28>)
  40340e:	4611      	mov	r1, r2
  403410:	4606      	mov	r6, r0
  403412:	461a      	mov	r2, r3
  403414:	4628      	mov	r0, r5
  403416:	2300      	movs	r3, #0
  403418:	6023      	str	r3, [r4, #0]
  40341a:	f7fe f803 	bl	401424 <_lseek>
  40341e:	1c43      	adds	r3, r0, #1
  403420:	d000      	beq.n	403424 <_lseek_r+0x1c>
  403422:	bd70      	pop	{r4, r5, r6, pc}
  403424:	6823      	ldr	r3, [r4, #0]
  403426:	2b00      	cmp	r3, #0
  403428:	d0fb      	beq.n	403422 <_lseek_r+0x1a>
  40342a:	6033      	str	r3, [r6, #0]
  40342c:	bd70      	pop	{r4, r5, r6, pc}
  40342e:	bf00      	nop
  403430:	20400bd8 	.word	0x20400bd8

00403434 <_read_r>:
  403434:	b570      	push	{r4, r5, r6, lr}
  403436:	460d      	mov	r5, r1
  403438:	4c08      	ldr	r4, [pc, #32]	; (40345c <_read_r+0x28>)
  40343a:	4611      	mov	r1, r2
  40343c:	4606      	mov	r6, r0
  40343e:	461a      	mov	r2, r3
  403440:	4628      	mov	r0, r5
  403442:	2300      	movs	r3, #0
  403444:	6023      	str	r3, [r4, #0]
  403446:	f7fc fee9 	bl	40021c <_read>
  40344a:	1c43      	adds	r3, r0, #1
  40344c:	d000      	beq.n	403450 <_read_r+0x1c>
  40344e:	bd70      	pop	{r4, r5, r6, pc}
  403450:	6823      	ldr	r3, [r4, #0]
  403452:	2b00      	cmp	r3, #0
  403454:	d0fb      	beq.n	40344e <_read_r+0x1a>
  403456:	6033      	str	r3, [r6, #0]
  403458:	bd70      	pop	{r4, r5, r6, pc}
  40345a:	bf00      	nop
  40345c:	20400bd8 	.word	0x20400bd8

00403460 <p_uc_charset10x14>:
	...
  40347c:	ccffccff 00000000 00000000 00000000     ................
  40348c:	00f000f0 00000000 00f000f0 00000000     ................
  40349c:	c00cc00c fcfffcff c00cc00c fcfffcff     ................
  4034ac:	c00cc00c 701e600c 3033303f fcfffcff     .....`.p?030....
  4034bc:	f0333033 c018e039 0cf00060 f0603cf0     303.9...`....<`.
  4034cc:	000fc003 3cf0183c 18003cc0 f87ff03c     ....<..<.<..<...
  4034dc:	8cc71cc3 ecdccccf 30307878 cc00fc00     ........xx00....
  4034ec:	00000000 00440000 00f800ec 00000070     ......D.....p...
	...
  403504:	f03fc00f 18607878 0cc00cc0 00000000     ..?.xx`.........
  403514:	00000000 0cc00cc0 78781860 c00ff03f     ........`.xx?...
  403524:	00000000 e00e600c 8003c007 f83ff83f     .....`......?.?.
  403534:	c0078003 600ce00e 00030003 00030003     .......`........
  403544:	f03ff03f 00030003 00030003 ec004400     ?.?..........D..
  403554:	7000f800 00000000 00000000 00000000     ...p............
  403564:	00030003 00030003 00030003 00030003     ................
  403574:	00030003 3c001800 18003c00 00000000     .......<.<......
	...
  40358c:	0c000000 f0003c00 000fc003 00f0003c     .....<......<...
  40359c:	000000c0 f87ff03f ccc1fce0 0cc78cc3     ....?...........
  4035ac:	1cfc0cce f03ff87f 00000000 0c700c30     ......?.....0.p.
  4035bc:	fcfffcff 0c000c00 00000000 1c700c30     ............0.p.
  4035cc:	7cc03ce0 ccc1ecc0 0ce78cc3 0c3c0c7e     .<.|........~.<.
  4035dc:	38703030 0cc01ce0 0cc30cc0 1ce30cc3     00p8............
  4035ec:	f03cf87f c007c003 c01cc00e c070c038     ..<.........8.p.
  4035fc:	fcfffcff c000c000 38fc30fc 0ccc1ccc     .........0.8....
  40360c:	0ccc0ccc 1cce0ccc f0c3f8c7 f87ff03f     ............?...
  40361c:	0cc31ce3 0cc30cc3 9ce30cc3 f030f871     ............q.0.
  40362c:	00c000c0 00c000c0 fcc7fcc3 00dc00ce     ................
  40363c:	00f000f8 f87ff03c 0cc39ce7 0cc30cc3     ....<...........
  40364c:	9ce70cc3 f03cf87f 007e003c 0cc30ce7     ......<.<.~.....
  40365c:	38c31cc3 e0e770c3 803fc07f 00000000     ...8.p....?.....
  40366c:	60180000 f03cf03c 00006018 00000000     ...`<.<..`......
  40367c:	00000000 44180000 f83cec3c 00007018     .......D<.<..p..
  40368c:	00000000 00030000 c00f8007 7038e01c     ..............8p
  40369c:	1ce03870 00000cc0 c00cc00c c00cc00c     p8..............
  4036ac:	c00cc00c c00cc00c c00cc00c 0cc00000     ................
  4036bc:	38701ce0 e01c7038 8007c00f 00000003     ..p88p..........
  4036cc:	00700030 00c000e0 ecc3ecc1 00e600c3     0.p.............
  4036dc:	003c007e f871f030 0cc39ce3 fcc3fcc3     ~.<.0.q.........
  4036ec:	1ce00cc0 f03ff87f fc7ffc3f c0c0c0e0     ......?.?.......
  4036fc:	c0c0c0c0 c0e0c0c0 fc3ffc7f fcfffcff     ..........?.....
  40370c:	0cc30cc3 0cc30cc3 9ce70cc3 f03cf87f     ..............<.
  40371c:	f87ff03f 0cc01ce0 0cc00cc0 1ce00cc0     ?...............
  40372c:	30303870 fcfffcff 0cc00cc0 0cc00cc0     p800............
  40373c:	1ce00cc0 f03ff87f fcfffcff 0cc30cc3     ......?.........
  40374c:	0cc30cc3 0cc30cc3 0cc00cc0 fcfffcff     ................
  40375c:	00c300c3 00c300c3 00c300c3 00c000c0     ................
  40376c:	f87ff03f 0cc01ce0 0cc30cc0 1ce30cc3     ?...............
  40377c:	f033f873 fcfffcff 00030003 00030003     s.3.............
  40378c:	00030003 fcfffcff 00000000 0cc00cc0     ................
  40379c:	fcfffcff 0cc00cc0 00000000 38003000     .............0.8
  4037ac:	0cc01cc0 1cc00cc0 f0fff8ff 00c000c0     ................
  4037bc:	fcfffcff 80078007 e01cc00f 38707038     ............8pp8
  4037cc:	0cc01ce0 fcfffcff 0c000c00 0c000c00     ................
  4037dc:	0c000c00 0c000c00 fcfffcff 00380070     ............p.8.
  4037ec:	001f001f 00700038 fcfffcff fcfffcff     ....8.p.........
  4037fc:	000e001c 80030007 e000c001 fcfffcff     ................
  40380c:	f87ff03f 0cc01ce0 0cc00cc0 1ce00cc0     ?...............
  40381c:	f03ff87f fcfffcff 00c300c3 00c300c3     ..?.............
  40382c:	00e700c3 003c007e f87ff03f 0cc01ce0     ....~.<.?.......
  40383c:	ecc0ccc0 38e07cc0 ec3ffc7f fcfffcff     .....|.8..?.....
  40384c:	80c300c3 c0c380c3 70e7c0c3 1c3c3c7e     ...........p~<<.
  40385c:	1c7e183c 0cc30ce7 0cc30cc3 9cc30cc3     <.~.............
  40386c:	f060f8e1 00c000c0 00c000c0 fcfffcff     ..`.............
  40387c:	00c000c0 00c000c0 f8fff0ff 0c001c00     ................
  40388c:	0c000c00 1c000c00 f0fff8ff e0ffc0ff     ................
  40389c:	38007000 1c001c00 70003800 c0ffe0ff     .p.8.....8.p....
  4038ac:	f8fff0ff 3c001c00 f800f800 1c003c00     .......<.....<..
  4038bc:	f0fff8ff 7cf83cf0 c00fe01c 80078007     .....<.|........
  4038cc:	e01cc00f 3cf07cf8 00fe00fc 80030007     .....|.<........
  4038dc:	fc01fc01 00078003 00fc00fe 7cc03cc0     .............<.|
  4038ec:	ccc1ecc0 0cc78cc3 0cdc0cce 0cf00cf8     ................
  4038fc:	00000000 fcfffcff 0cc00cc0 00000cc0     ................
  40390c:	00000000 00300030 000c000c 00030003     ....0.0.........
  40391c:	c000c000 30003000 00000000 0cc00cc0     .....0.0........
  40392c:	fcff0cc0 0000fcff 00000000 001c000c     ................
  40393c:	00700038 00e000e0 00380070 000c001c     8.p.....p.8.....
  40394c:	0c000c00 0c000c00 0c000c00 0c000c00     ................
  40395c:	0c000c00 00000000 00e000c0 00380070     ............p.8.
  40396c:	00000018 00000000 78063000 cc0cfc0e     .........0.x....
  40397c:	cc0ccc0c cc0ecc0c f803fc07 fcfffcff     ................
  40398c:	0c030c03 0c030c03 9c030c03 f000f801     ................
  40399c:	f807f003 0c0c1c0e 0c0c0c0c 1c0e0c0c     ................
  4039ac:	30033807 f801f000 0c039c03 0c030c03     .8.0............
  4039bc:	0c030c03 fcfffcff f807f003 cc0cdc0e     ................
  4039cc:	cc0ccc0c dc0ecc0c 9003d807 00030000     ................
  4039dc:	fc7ffc3f 00e300e3 00300070 00000000     ?.......p.0.....
  4039ec:	9c071803 cc0ccc0f cc0ccc0c dc0ccc0c     ................
  4039fc:	f007f80f fcfffcff 00030003 00030003     ................
  403a0c:	fc018003 0000fc00 00000000 00000000     ................
  403a1c:	fc1bfc1b 00000000 00000000 30000000     ...............0
  403a2c:	1c003800 0c000c00 f8cf1c00 0000f0cf     .8..............
  403a3c:	fcff0000 e000fcff f003e001 1c0e3807     .............8..
  403a4c:	00000c0c 00000000 0cc00cc0 fcfffcff     ................
  403a5c:	0c000c00 00000000 fc0ffc0f 0007000e     ................
  403a6c:	c003c003 000e0007 fc0ffc0f fc0ffc0f     ................
  403a7c:	00070003 000c000e 000e000c fc03fc07     ................
  403a8c:	f807f003 0c0c1c0e 0c0c0c0c 1c0e0c0c     ................
  403a9c:	f003f807 fc0ffc0f c00cc00c c00cc00c     ................
  403aac:	c00fc00c 00038007 80070003 c00cc00f     ................
  403abc:	c00cc00c c00cc00c fc0ffc0f fc0ffc0f     ................
  403acc:	00078003 000c000e 000e000c 00030007     ................
  403adc:	9c071803 cc0ccc0f cc0ccc0c fc0ccc0c     ................
  403aec:	3006780e 000c0000 f0ff000c 1c0cf8ff     .x.0............
  403afc:	380c1c0c 0000300c f80ff00f 0c001c00     ...8.0..........
  403b0c:	0c000c00 1c000c00 f00ff80f e00fc00f     ................
  403b1c:	38007000 1c001c00 70003800 c00fe00f     .p.8.....8.p....
  403b2c:	f80ff00f 1c001c00 f800f800 1c001c00     ................
  403b3c:	f00ff80f 1c0e0c0c f0033807 e001e001     .........8......
  403b4c:	3807f003 0c0c1c0e 000e000c 9c030c07     ...8............
  403b5c:	f001f801 00078003 000c000e 1c0c0c0c     ................
  403b6c:	7c0c3c0c cc0dec0c 0c0f8c0f 0c0c0c0e     .<.|............
  403b7c:	00030000 f03f8007 1ce0f87c 0cc00cc0     ......?.|.......
  403b8c:	00000cc0 0c030c03 fc7ffc3f 0cc30ce3     ........?.......
  403b9c:	0ce00cc0 0c300c70 0cc00000 0cc00cc0     ....p.0.........
  403bac:	f87c1ce0 8007f03f 00000003 00c000c0     ..|.?...........
  403bbc:	00c000c0 00c000c0 00c000c0 00c000c0     ................
  403bcc:	fcfffcff fcfffcff fcfffcff fcfffcff     ................
  403bdc:	fcfffcff 39494c49 20383834 6d617865     ....ILI9488 exam
  403bec:	0a656c70 0000000d 39696c69 5f383834     ple.....ili9488_
  403bfc:	2064636c 6d617865 00656c70              lcd example.

00403c08 <_global_impure_ptr>:
  403c08:	20400010 0000000a                       ..@ ....

00403c10 <_init>:
  403c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403c12:	bf00      	nop
  403c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403c16:	bc08      	pop	{r3}
  403c18:	469e      	mov	lr, r3
  403c1a:	4770      	bx	lr

00403c1c <__init_array_start>:
  403c1c:	00401b9d 	.word	0x00401b9d

00403c20 <__frame_dummy_init_array_entry>:
  403c20:	00400165                                e.@.

00403c24 <_fini>:
  403c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403c26:	bf00      	nop
  403c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403c2a:	bc08      	pop	{r3}
  403c2c:	469e      	mov	lr, r3
  403c2e:	4770      	bx	lr

00403c30 <__fini_array_start>:
  403c30:	00400141 	.word	0x00400141
