
GFX_EXAMPLE12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006418  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000045c  20400000  00406418  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000348  2040045c  00406874  0002045c  2**2
                  ALLOC
  3 .stack        00002004  204007a4  00406bbc  0002045c  2**0
                  ALLOC
  4 .heap         00000200  204027a8  00408bc0  0002045c  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002048a  2**0
                  CONTENTS, READONLY
  7 .debug_info   000159ea  00000000  00000000  000204e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002db9  00000000  00000000  00035ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006e87  00000000  00000000  00038c86  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000850  00000000  00000000  0003fb0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000958  00000000  00000000  0004035d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002026c  00000000  00000000  00040cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000c22f  00000000  00000000  00060f21  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008e3e0  00000000  00000000  0006d150  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001560  00000000  00000000  000fb530  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	a8 27 40 20 09 18 40 00 05 18 40 00 05 18 40 00     .'@ ..@...@...@.
  400010:	05 18 40 00 05 18 40 00 05 18 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	05 18 40 00 05 18 40 00 00 00 00 00 05 18 40 00     ..@...@.......@.
  40003c:	05 18 40 00 05 18 40 00 05 18 40 00 05 18 40 00     ..@...@...@...@.
  40004c:	05 18 40 00 05 18 40 00 05 18 40 00 05 18 40 00     ..@...@...@...@.
  40005c:	05 18 40 00 05 18 40 00 00 00 00 00 2d 16 40 00     ..@...@.....-.@.
  40006c:	41 16 40 00 55 16 40 00 05 18 40 00 05 18 40 00     A.@.U.@...@...@.
  40007c:	05 18 40 00 69 16 40 00 7d 16 40 00 05 18 40 00     ..@.i.@.}.@...@.
  40008c:	05 18 40 00 05 18 40 00 05 18 40 00 05 18 40 00     ..@...@...@...@.
  40009c:	05 18 40 00 05 18 40 00 05 18 40 00 05 18 40 00     ..@...@...@...@.
  4000ac:	05 18 40 00 05 18 40 00 05 18 40 00 05 18 40 00     ..@...@...@...@.
  4000bc:	05 18 40 00 05 18 40 00 05 18 40 00 05 18 40 00     ..@...@...@...@.
  4000cc:	05 18 40 00 00 00 00 00 05 18 40 00 00 00 00 00     ..@.......@.....
  4000dc:	05 18 40 00 05 18 40 00 05 18 40 00 05 18 40 00     ..@...@...@...@.
  4000ec:	05 18 40 00 05 18 40 00 05 18 40 00 05 18 40 00     ..@...@...@...@.
  4000fc:	05 18 40 00 05 18 40 00 05 18 40 00 05 18 40 00     ..@...@...@...@.
  40010c:	05 18 40 00 05 18 40 00 05 18 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 05 18 40 00 05 18 40 00 05 18 40 00     ......@...@...@.
  40012c:	05 18 40 00 05 18 40 00 00 00 00 00 05 18 40 00     ..@...@.......@.
  40013c:	05 18 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040045c 	.word	0x2040045c
  40015c:	00000000 	.word	0x00000000
  400160:	00406418 	.word	0x00406418

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00406418 	.word	0x00406418
  4001a0:	20400460 	.word	0x20400460
  4001a4:	00406418 	.word	0x00406418
  4001a8:	00000000 	.word	0x00000000

004001ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001ac:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ae:	4810      	ldr	r0, [pc, #64]	; (4001f0 <sysclk_init+0x44>)
  4001b0:	4b10      	ldr	r3, [pc, #64]	; (4001f4 <sysclk_init+0x48>)
  4001b2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001b4:	213e      	movs	r1, #62	; 0x3e
  4001b6:	2000      	movs	r0, #0
  4001b8:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x4c>)
  4001ba:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001bc:	4c0f      	ldr	r4, [pc, #60]	; (4001fc <sysclk_init+0x50>)
  4001be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001c0:	2800      	cmp	r0, #0
  4001c2:	d0fc      	beq.n	4001be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001c4:	4b0e      	ldr	r3, [pc, #56]	; (400200 <sysclk_init+0x54>)
  4001c6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001c8:	4a0e      	ldr	r2, [pc, #56]	; (400204 <sysclk_init+0x58>)
  4001ca:	4b0f      	ldr	r3, [pc, #60]	; (400208 <sysclk_init+0x5c>)
  4001cc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001ce:	4c0f      	ldr	r4, [pc, #60]	; (40020c <sysclk_init+0x60>)
  4001d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001d2:	2800      	cmp	r0, #0
  4001d4:	d0fc      	beq.n	4001d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001d6:	2002      	movs	r0, #2
  4001d8:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x64>)
  4001da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001dc:	2000      	movs	r0, #0
  4001de:	4b0d      	ldr	r3, [pc, #52]	; (400214 <sysclk_init+0x68>)
  4001e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <sysclk_init+0x6c>)
  4001e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001e6:	4802      	ldr	r0, [pc, #8]	; (4001f0 <sysclk_init+0x44>)
  4001e8:	4b02      	ldr	r3, [pc, #8]	; (4001f4 <sysclk_init+0x48>)
  4001ea:	4798      	blx	r3
  4001ec:	bd10      	pop	{r4, pc}
  4001ee:	bf00      	nop
  4001f0:	11e1a300 	.word	0x11e1a300
  4001f4:	004019dd 	.word	0x004019dd
  4001f8:	0040172d 	.word	0x0040172d
  4001fc:	00401781 	.word	0x00401781
  400200:	00401791 	.word	0x00401791
  400204:	20183f01 	.word	0x20183f01
  400208:	400e0600 	.word	0x400e0600
  40020c:	004017a1 	.word	0x004017a1
  400210:	00401691 	.word	0x00401691
  400214:	004016c9 	.word	0x004016c9
  400218:	004018d1 	.word	0x004018d1

0040021c <gfx_set_clipping>:
static gfx_ext_draw_handler_t gfx_ext_draw_func;

/* This function is documented in gfx.h */
void gfx_set_clipping(gfx_coord_t min_x, gfx_coord_t min_y,
		gfx_coord_t max_x, gfx_coord_t max_y)
{
  40021c:	b410      	push	{r4}
  40021e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  400222:	ea21 71e1 	bic.w	r1, r1, r1, asr #31

	if (min_y < 0) {
		min_y = 0;
	}

	if (max_x >= gfx_width) {
  400226:	4c0c      	ldr	r4, [pc, #48]	; (400258 <gfx_set_clipping+0x3c>)
  400228:	f9b4 4000 	ldrsh.w	r4, [r4]
  40022c:	4294      	cmp	r4, r2
  40022e:	dc01      	bgt.n	400234 <gfx_set_clipping+0x18>
		max_x = gfx_width - 1;
  400230:	1e62      	subs	r2, r4, #1
  400232:	b212      	sxth	r2, r2
	}

	if (max_y >= gfx_height) {
  400234:	4c09      	ldr	r4, [pc, #36]	; (40025c <gfx_set_clipping+0x40>)
  400236:	f9b4 4000 	ldrsh.w	r4, [r4]
  40023a:	429c      	cmp	r4, r3
  40023c:	dc01      	bgt.n	400242 <gfx_set_clipping+0x26>
		max_y = gfx_height - 1;
  40023e:	3c01      	subs	r4, #1
  400240:	b223      	sxth	r3, r4
	}

	gfx_min_x = min_x;
  400242:	4c07      	ldr	r4, [pc, #28]	; (400260 <gfx_set_clipping+0x44>)
  400244:	8020      	strh	r0, [r4, #0]
	gfx_min_y = min_y;
  400246:	4807      	ldr	r0, [pc, #28]	; (400264 <gfx_set_clipping+0x48>)
  400248:	8001      	strh	r1, [r0, #0]
	gfx_max_x = max_x;
  40024a:	4907      	ldr	r1, [pc, #28]	; (400268 <gfx_set_clipping+0x4c>)
  40024c:	800a      	strh	r2, [r1, #0]
	gfx_max_y = max_y;
  40024e:	4a07      	ldr	r2, [pc, #28]	; (40026c <gfx_set_clipping+0x50>)
  400250:	8013      	strh	r3, [r2, #0]
#endif
}
  400252:	f85d 4b04 	ldr.w	r4, [sp], #4
  400256:	4770      	bx	lr
  400258:	20400774 	.word	0x20400774
  40025c:	2040077e 	.word	0x2040077e
  400260:	20400778 	.word	0x20400778
  400264:	2040077c 	.word	0x2040077c
  400268:	20400776 	.word	0x20400776
  40026c:	2040077a 	.word	0x2040077a

00400270 <gfx_get_width>:

gfx_coord_t gfx_get_width(void)
{
	return gfx_width;
}
  400270:	4b01      	ldr	r3, [pc, #4]	; (400278 <gfx_get_width+0x8>)
  400272:	f9b3 0000 	ldrsh.w	r0, [r3]
  400276:	4770      	bx	lr
  400278:	20400774 	.word	0x20400774

0040027c <gfx_get_height>:

gfx_coord_t gfx_get_height(void)
{
	return gfx_height;
}
  40027c:	4b01      	ldr	r3, [pc, #4]	; (400284 <gfx_get_height+0x8>)
  40027e:	f9b3 0000 	ldrsh.w	r0, [r3]
  400282:	4770      	bx	lr
  400284:	2040077e 	.word	0x2040077e

00400288 <gfx_generic_draw_filled_rect>:
		gfx_color_t color)
{
	gfx_coord_t x2;
	gfx_coord_t y2;

	if ((width == 0) || (height == 0)) {
  400288:	2a00      	cmp	r2, #0
  40028a:	d05c      	beq.n	400346 <gfx_generic_draw_filled_rect+0xbe>
{
  40028c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40028e:	461c      	mov	r4, r3
  400290:	4615      	mov	r5, r2
	if ((width == 0) || (height == 0)) {
  400292:	2b00      	cmp	r3, #0
  400294:	d048      	beq.n	400328 <gfx_generic_draw_filled_rect+0xa0>
		return;
	}

	/* Invert if width or height is negative. */
	if (width < 0) {
  400296:	2a00      	cmp	r2, #0
  400298:	db47      	blt.n	40032a <gfx_generic_draw_filled_rect+0xa2>
		width = -width;
		x -= width - 1;
	}

	if (height < 0) {
  40029a:	2c00      	cmp	r4, #0
  40029c:	db4c      	blt.n	400338 <gfx_generic_draw_filled_rect+0xb0>
		y -= height - 1;
	}

#ifdef CONF_GFX_USE_CLIPPING
	/* Nothing to do if entire rectangle is outside clipping region. */
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
  40029e:	4b2a      	ldr	r3, [pc, #168]	; (400348 <gfx_generic_draw_filled_rect+0xc0>)
  4002a0:	f9b3 6000 	ldrsh.w	r6, [r3]
  4002a4:	42b0      	cmp	r0, r6
  4002a6:	dc3f      	bgt.n	400328 <gfx_generic_draw_filled_rect+0xa0>
  4002a8:	4b28      	ldr	r3, [pc, #160]	; (40034c <gfx_generic_draw_filled_rect+0xc4>)
  4002aa:	f9b3 7000 	ldrsh.w	r7, [r3]
  4002ae:	42b9      	cmp	r1, r7
  4002b0:	dc3a      	bgt.n	400328 <gfx_generic_draw_filled_rect+0xa0>
			((x + width) <= gfx_min_x) ||
  4002b2:	4b27      	ldr	r3, [pc, #156]	; (400350 <gfx_generic_draw_filled_rect+0xc8>)
  4002b4:	f9b3 3000 	ldrsh.w	r3, [r3]
  4002b8:	1942      	adds	r2, r0, r5
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
  4002ba:	429a      	cmp	r2, r3
  4002bc:	dd34      	ble.n	400328 <gfx_generic_draw_filled_rect+0xa0>
			((y + height) <= gfx_min_y)) {
  4002be:	4a25      	ldr	r2, [pc, #148]	; (400354 <gfx_generic_draw_filled_rect+0xcc>)
  4002c0:	f9b2 2000 	ldrsh.w	r2, [r2]
  4002c4:	eb01 0e04 	add.w	lr, r1, r4
			((x + width) <= gfx_min_x) ||
  4002c8:	4596      	cmp	lr, r2
  4002ca:	dd2d      	ble.n	400328 <gfx_generic_draw_filled_rect+0xa0>
		return;
	}

	/* Clip if outside left X limit. */
	if (x < gfx_min_x) {
  4002cc:	4298      	cmp	r0, r3
  4002ce:	da03      	bge.n	4002d8 <gfx_generic_draw_filled_rect+0x50>
		width -= gfx_min_x - x;
  4002d0:	4405      	add	r5, r0
  4002d2:	1aed      	subs	r5, r5, r3
  4002d4:	b22d      	sxth	r5, r5
		x = gfx_min_x;
  4002d6:	4618      	mov	r0, r3
	}

	/* Clip if outside top Y limit. */
	if (y < gfx_min_y) {
  4002d8:	4291      	cmp	r1, r2
  4002da:	da03      	bge.n	4002e4 <gfx_generic_draw_filled_rect+0x5c>
		height -= gfx_min_y - y;
  4002dc:	440c      	add	r4, r1
  4002de:	1aa4      	subs	r4, r4, r2
  4002e0:	b224      	sxth	r4, r4
		y = gfx_min_y;
  4002e2:	4611      	mov	r1, r2
	}
#endif

	/*  Compute bottom right point. */
	x2 = x + width - 1;
  4002e4:	fa1f fc80 	uxth.w	ip, r0
  4002e8:	eb0c 0205 	add.w	r2, ip, r5
  4002ec:	3a01      	subs	r2, #1
  4002ee:	b212      	sxth	r2, r2
	y2 = y + height - 1;
  4002f0:	fa1f fe81 	uxth.w	lr, r1
  4002f4:	eb0e 0304 	add.w	r3, lr, r4
  4002f8:	3b01      	subs	r3, #1
  4002fa:	b21b      	sxth	r3, r3

#ifdef CONF_GFX_USE_CLIPPING
	/* Clip if outside right X limit. */
	if (x2 > gfx_max_x) {
  4002fc:	4296      	cmp	r6, r2
  4002fe:	da04      	bge.n	40030a <gfx_generic_draw_filled_rect+0x82>
		x2 = gfx_max_x;
		width = x2 - x + 1;
  400300:	1c75      	adds	r5, r6, #1
  400302:	eba5 050c 	sub.w	r5, r5, ip
  400306:	b22d      	sxth	r5, r5
		x2 = gfx_max_x;
  400308:	4632      	mov	r2, r6
	}

	/* Clip if outside bottom Y limit. */
	if (y2 > gfx_max_y) {
  40030a:	429f      	cmp	r7, r3
  40030c:	da04      	bge.n	400318 <gfx_generic_draw_filled_rect+0x90>
		y2 = gfx_max_y;
		height = y2 - y + 1;
  40030e:	1c7c      	adds	r4, r7, #1
  400310:	eba4 040e 	sub.w	r4, r4, lr
  400314:	b224      	sxth	r4, r4
		y2 = gfx_max_y;
  400316:	463b      	mov	r3, r7
	}
#endif

	/* Set up draw area and duplicate pixel color until area is full. */
	gfx_set_limits(x, y, x2, y2);
  400318:	4e0f      	ldr	r6, [pc, #60]	; (400358 <gfx_generic_draw_filled_rect+0xd0>)
  40031a:	47b0      	blx	r6
	gfx_duplicate_pixel(color, (uint32_t)width * height);
  40031c:	fb04 f105 	mul.w	r1, r4, r5
  400320:	f8bd 0018 	ldrh.w	r0, [sp, #24]
  400324:	4b0d      	ldr	r3, [pc, #52]	; (40035c <gfx_generic_draw_filled_rect+0xd4>)
  400326:	4798      	blx	r3
  400328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		width = -width;
  40032a:	b293      	uxth	r3, r2
  40032c:	425d      	negs	r5, r3
  40032e:	b22d      	sxth	r5, r5
		x -= width - 1;
  400330:	3001      	adds	r0, #1
  400332:	4418      	add	r0, r3
  400334:	b200      	sxth	r0, r0
  400336:	e7b0      	b.n	40029a <gfx_generic_draw_filled_rect+0x12>
		height = -height;
  400338:	b2a3      	uxth	r3, r4
  40033a:	425c      	negs	r4, r3
  40033c:	b224      	sxth	r4, r4
		y -= height - 1;
  40033e:	3101      	adds	r1, #1
  400340:	4419      	add	r1, r3
  400342:	b209      	sxth	r1, r1
  400344:	e7ab      	b.n	40029e <gfx_generic_draw_filled_rect+0x16>
  400346:	4770      	bx	lr
  400348:	20400776 	.word	0x20400776
  40034c:	2040077a 	.word	0x2040077a
  400350:	20400778 	.word	0x20400778
  400354:	2040077c 	.word	0x2040077c
  400358:	00401285 	.word	0x00401285
  40035c:	00401385 	.word	0x00401385

00400360 <gfx_generic_draw_line>:
}

void gfx_generic_draw_line(gfx_coord_t x1, gfx_coord_t y1,
		gfx_coord_t x2, gfx_coord_t y2, gfx_color_t color)
{
  400360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400364:	b085      	sub	sp, #20
  400366:	4605      	mov	r5, r0
  400368:	460e      	mov	r6, r1
  40036a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
  40036e:	9101      	str	r1, [sp, #4]
	/* Compute deltas, ie. "width" and "height" of line, then
	 * compute x and y direction, and make deltas positive for later use.
	 * Start off assuming direction is positive, ie. right and down.
	 */
	xinc = 1;
	dx = x2 - x1;
  400370:	1a12      	subs	r2, r2, r0
  400372:	b292      	uxth	r2, r2
  400374:	b217      	sxth	r7, r2
	if (dx < 0) {
  400376:	2f00      	cmp	r7, #0
  400378:	db22      	blt.n	4003c0 <gfx_generic_draw_line+0x60>
	xinc = 1;
  40037a:	2201      	movs	r2, #1
  40037c:	9202      	str	r2, [sp, #8]
		xinc = -1;
		dx = -dx;
	}

	yinc = 1;
	dy = y2 - y1;
  40037e:	1b9b      	subs	r3, r3, r6
  400380:	b29b      	uxth	r3, r3
  400382:	fa0f f883 	sxth.w	r8, r3
	if (dy < 0) {
  400386:	f1b8 0f00 	cmp.w	r8, #0
  40038a:	db1f      	blt.n	4003cc <gfx_generic_draw_line+0x6c>
	yinc = 1;
  40038c:	f04f 0a01 	mov.w	sl, #1
	}

	/* Set up current point and prepare bottom right corner of draw area.*/
	x = x1;
	y = y1;
	gfx_set_bottom_right_limit(gfx_width - 1, gfx_height - 1);
  400390:	4b30      	ldr	r3, [pc, #192]	; (400454 <gfx_generic_draw_line+0xf4>)
  400392:	8819      	ldrh	r1, [r3, #0]
  400394:	3901      	subs	r1, #1
  400396:	4b30      	ldr	r3, [pc, #192]	; (400458 <gfx_generic_draw_line+0xf8>)
  400398:	8818      	ldrh	r0, [r3, #0]
  40039a:	3801      	subs	r0, #1
  40039c:	b209      	sxth	r1, r1
  40039e:	b200      	sxth	r0, r0
  4003a0:	4b2e      	ldr	r3, [pc, #184]	; (40045c <gfx_generic_draw_line+0xfc>)
  4003a2:	4798      	blx	r3

	/*
	 * A "flat" line (dx>dy) is handled differently from a "steep"
	 * line (dx<dy).
	 */
	if (dx > dy) {
  4003a4:	4547      	cmp	r7, r8
  4003a6:	dd30      	ble.n	40040a <gfx_generic_draw_line+0xaa>
		gfx_coord_t i;
		int16_t e = dx >> 1;
  4003a8:	107c      	asrs	r4, r7, #1

		/* Walk along X, draw pixel, and step Y when required. */
		for (i = 0; i <= dx; ++i) {
  4003aa:	2f00      	cmp	r7, #0
  4003ac:	db4f      	blt.n	40044e <gfx_generic_draw_line+0xee>
  4003ae:	f04f 0900 	mov.w	r9, #0
			gfx_draw_line_pixel(x, y, color);
  4003b2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 400460 <gfx_generic_draw_line+0x100>
  4003b6:	f8cd a00c 	str.w	sl, [sp, #12]
  4003ba:	f8dd a008 	ldr.w	sl, [sp, #8]
  4003be:	e014      	b.n	4003ea <gfx_generic_draw_line+0x8a>
		dx = -dx;
  4003c0:	4252      	negs	r2, r2
  4003c2:	b217      	sxth	r7, r2
		xinc = -1;
  4003c4:	f04f 32ff 	mov.w	r2, #4294967295
  4003c8:	9202      	str	r2, [sp, #8]
  4003ca:	e7d8      	b.n	40037e <gfx_generic_draw_line+0x1e>
		dy = -dy;
  4003cc:	f1c3 0800 	rsb	r8, r3, #0
  4003d0:	fa0f f888 	sxth.w	r8, r8
		yinc = -1;
  4003d4:	f04f 3aff 	mov.w	sl, #4294967295
  4003d8:	e7da      	b.n	400390 <gfx_generic_draw_line+0x30>
  4003da:	4455      	add	r5, sl
  4003dc:	b22d      	sxth	r5, r5
  4003de:	f109 0901 	add.w	r9, r9, #1
		for (i = 0; i <= dx; ++i) {
  4003e2:	fa0f f389 	sxth.w	r3, r9
  4003e6:	429f      	cmp	r7, r3
  4003e8:	db31      	blt.n	40044e <gfx_generic_draw_line+0xee>
			gfx_draw_line_pixel(x, y, color);
  4003ea:	9a01      	ldr	r2, [sp, #4]
  4003ec:	4631      	mov	r1, r6
  4003ee:	4628      	mov	r0, r5
  4003f0:	47d8      	blx	fp

			/* Update fractional part ("error"),
			 * and step Y when it crosses 0.
			 */
			e -= dy;
  4003f2:	eba4 0408 	sub.w	r4, r4, r8
  4003f6:	b2a3      	uxth	r3, r4
  4003f8:	b21c      	sxth	r4, r3
			if (e < 0) {
  4003fa:	2c00      	cmp	r4, #0
  4003fc:	daed      	bge.n	4003da <gfx_generic_draw_line+0x7a>
				e += dx;
  4003fe:	19dc      	adds	r4, r3, r7
  400400:	b224      	sxth	r4, r4
				y += yinc;
  400402:	9b03      	ldr	r3, [sp, #12]
  400404:	441e      	add	r6, r3
  400406:	b236      	sxth	r6, r6
  400408:	e7e7      	b.n	4003da <gfx_generic_draw_line+0x7a>
			/* Walk one step along X.*/
			x += xinc;
		}
	} else {
		gfx_coord_t i;
		int16_t e = dy >> 1;
  40040a:	ea4f 0468 	mov.w	r4, r8, asr #1

		/* Walk along Y, draw pixel, and step X when required. */
		for (i = 0; i <= dy; ++i) {
  40040e:	f1b8 0f00 	cmp.w	r8, #0
  400412:	db1c      	blt.n	40044e <gfx_generic_draw_line+0xee>
  400414:	f04f 0900 	mov.w	r9, #0
			gfx_draw_line_pixel(x, y, color);
  400418:	f8df b044 	ldr.w	fp, [pc, #68]	; 400460 <gfx_generic_draw_line+0x100>
  40041c:	e007      	b.n	40042e <gfx_generic_draw_line+0xce>
  40041e:	4456      	add	r6, sl
  400420:	b236      	sxth	r6, r6
  400422:	f109 0901 	add.w	r9, r9, #1
		for (i = 0; i <= dy; ++i) {
  400426:	fa0f f389 	sxth.w	r3, r9
  40042a:	4598      	cmp	r8, r3
  40042c:	db0f      	blt.n	40044e <gfx_generic_draw_line+0xee>
			gfx_draw_line_pixel(x, y, color);
  40042e:	9a01      	ldr	r2, [sp, #4]
  400430:	4631      	mov	r1, r6
  400432:	4628      	mov	r0, r5
  400434:	47d8      	blx	fp

			/* Update fractional part ("error"),
			 * and step X when it crosses 0.
			 */
			e -= dx;
  400436:	1be4      	subs	r4, r4, r7
  400438:	b2a3      	uxth	r3, r4
  40043a:	b21c      	sxth	r4, r3
			if (e < 0) {
  40043c:	2c00      	cmp	r4, #0
  40043e:	daee      	bge.n	40041e <gfx_generic_draw_line+0xbe>
				e += dy;
  400440:	eb03 0408 	add.w	r4, r3, r8
  400444:	b224      	sxth	r4, r4
				x += xinc;
  400446:	9b02      	ldr	r3, [sp, #8]
  400448:	441d      	add	r5, r3
  40044a:	b22d      	sxth	r5, r5
  40044c:	e7e7      	b.n	40041e <gfx_generic_draw_line+0xbe>

			/* Walk one step along Y. */
			y += yinc;
		}
	}
}
  40044e:	b005      	add	sp, #20
  400450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400454:	2040077e 	.word	0x2040077e
  400458:	20400774 	.word	0x20400774
  40045c:	00401271 	.word	0x00401271
  400460:	0040095d 	.word	0x0040095d

00400464 <gfx_generic_draw_circle>:

void gfx_generic_draw_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, gfx_color_t color, uint8_t octant_mask)
{
  400464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400468:	b083      	sub	sp, #12
  40046a:	4680      	mov	r8, r0
  40046c:	4689      	mov	r9, r1
  40046e:	9300      	str	r3, [sp, #0]
  400470:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
  400474:	b17a      	cbz	r2, 400496 <gfx_generic_draw_circle+0x32>
  400476:	4615      	mov	r5, r2
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
  400478:	0054      	lsls	r4, r2, #1
  40047a:	f1c4 0403 	rsb	r4, r4, #3
  40047e:	b224      	sxth	r4, r4

	/* Iterate offsetX from 0 to radius. */
	while (offset_x <= offset_y) {
  400480:	2a00      	cmp	r2, #0
  400482:	db0b      	blt.n	40049c <gfx_generic_draw_circle+0x38>
  400484:	2700      	movs	r7, #0
		/* Draw one pixel for each octant enabled in octant_mask. */
		if (octant_mask & GFX_OCTANT0) {
  400486:	f006 0b01 	and.w	fp, r6, #1
			gfx_draw_pixel(x + offset_y, y - offset_x, color);
  40048a:	f8df a100 	ldr.w	sl, [pc, #256]	; 40058c <gfx_generic_draw_circle+0x128>
		}

		if (octant_mask & GFX_OCTANT1) {
  40048e:	f006 0302 	and.w	r3, r6, #2
  400492:	9301      	str	r3, [sp, #4]
  400494:	e04d      	b.n	400532 <gfx_generic_draw_circle+0xce>
		gfx_draw_pixel(x, y, color);
  400496:	461a      	mov	r2, r3
  400498:	4b3c      	ldr	r3, [pc, #240]	; (40058c <gfx_generic_draw_circle+0x128>)
  40049a:	4798      	blx	r3
		}

		/* Next X. */
		++offset_x;
	}
}
  40049c:	b003      	add	sp, #12
  40049e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			gfx_draw_pixel(x + offset_y, y - offset_x, color);
  4004a2:	eba9 0107 	sub.w	r1, r9, r7
  4004a6:	eb08 0005 	add.w	r0, r8, r5
  4004aa:	9a00      	ldr	r2, [sp, #0]
  4004ac:	b209      	sxth	r1, r1
  4004ae:	b200      	sxth	r0, r0
  4004b0:	47d0      	blx	sl
  4004b2:	e041      	b.n	400538 <gfx_generic_draw_circle+0xd4>
			gfx_draw_pixel(x + offset_x, y - offset_y, color);
  4004b4:	eba9 0105 	sub.w	r1, r9, r5
  4004b8:	eb08 0007 	add.w	r0, r8, r7
  4004bc:	9a00      	ldr	r2, [sp, #0]
  4004be:	b209      	sxth	r1, r1
  4004c0:	b200      	sxth	r0, r0
  4004c2:	47d0      	blx	sl
  4004c4:	e03b      	b.n	40053e <gfx_generic_draw_circle+0xda>
			gfx_draw_pixel(x - offset_x, y - offset_y, color);
  4004c6:	eba9 0105 	sub.w	r1, r9, r5
  4004ca:	eba8 0007 	sub.w	r0, r8, r7
  4004ce:	9a00      	ldr	r2, [sp, #0]
  4004d0:	b209      	sxth	r1, r1
  4004d2:	b200      	sxth	r0, r0
  4004d4:	47d0      	blx	sl
  4004d6:	e035      	b.n	400544 <gfx_generic_draw_circle+0xe0>
			gfx_draw_pixel(x - offset_y, y - offset_x, color);
  4004d8:	eba9 0107 	sub.w	r1, r9, r7
  4004dc:	eba8 0005 	sub.w	r0, r8, r5
  4004e0:	9a00      	ldr	r2, [sp, #0]
  4004e2:	b209      	sxth	r1, r1
  4004e4:	b200      	sxth	r0, r0
  4004e6:	47d0      	blx	sl
  4004e8:	e02f      	b.n	40054a <gfx_generic_draw_circle+0xe6>
			gfx_draw_pixel(x - offset_y, y + offset_x, color);
  4004ea:	eb09 0107 	add.w	r1, r9, r7
  4004ee:	eba8 0005 	sub.w	r0, r8, r5
  4004f2:	9a00      	ldr	r2, [sp, #0]
  4004f4:	b209      	sxth	r1, r1
  4004f6:	b200      	sxth	r0, r0
  4004f8:	47d0      	blx	sl
  4004fa:	e029      	b.n	400550 <gfx_generic_draw_circle+0xec>
			gfx_draw_pixel(x - offset_x, y + offset_y, color);
  4004fc:	eb09 0105 	add.w	r1, r9, r5
  400500:	eba8 0007 	sub.w	r0, r8, r7
  400504:	9a00      	ldr	r2, [sp, #0]
  400506:	b209      	sxth	r1, r1
  400508:	b200      	sxth	r0, r0
  40050a:	47d0      	blx	sl
  40050c:	e023      	b.n	400556 <gfx_generic_draw_circle+0xf2>
		if (octant_mask & GFX_OCTANT7) {
  40050e:	f016 0f80 	tst.w	r6, #128	; 0x80
  400512:	d12c      	bne.n	40056e <gfx_generic_draw_circle+0x10a>
		if (error < 0) {
  400514:	2c00      	cmp	r4, #0
  400516:	db33      	blt.n	400580 <gfx_generic_draw_circle+0x11c>
			error += (((offset_x - offset_y) << 2) + 10);
  400518:	b2ad      	uxth	r5, r5
  40051a:	1b7b      	subs	r3, r7, r5
  40051c:	340a      	adds	r4, #10
  40051e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  400522:	b224      	sxth	r4, r4
			--offset_y;
  400524:	3d01      	subs	r5, #1
  400526:	b22d      	sxth	r5, r5
  400528:	1c7b      	adds	r3, r7, #1
  40052a:	b21b      	sxth	r3, r3
  40052c:	3701      	adds	r7, #1
	while (offset_x <= offset_y) {
  40052e:	429d      	cmp	r5, r3
  400530:	dbb4      	blt.n	40049c <gfx_generic_draw_circle+0x38>
		if (octant_mask & GFX_OCTANT0) {
  400532:	f1bb 0f00 	cmp.w	fp, #0
  400536:	d1b4      	bne.n	4004a2 <gfx_generic_draw_circle+0x3e>
		if (octant_mask & GFX_OCTANT1) {
  400538:	9b01      	ldr	r3, [sp, #4]
  40053a:	2b00      	cmp	r3, #0
  40053c:	d1ba      	bne.n	4004b4 <gfx_generic_draw_circle+0x50>
		if (octant_mask & GFX_OCTANT2) {
  40053e:	f016 0f04 	tst.w	r6, #4
  400542:	d1c0      	bne.n	4004c6 <gfx_generic_draw_circle+0x62>
		if (octant_mask & GFX_OCTANT3) {
  400544:	f016 0f08 	tst.w	r6, #8
  400548:	d1c6      	bne.n	4004d8 <gfx_generic_draw_circle+0x74>
		if (octant_mask & GFX_OCTANT4) {
  40054a:	f016 0f10 	tst.w	r6, #16
  40054e:	d1cc      	bne.n	4004ea <gfx_generic_draw_circle+0x86>
		if (octant_mask & GFX_OCTANT5) {
  400550:	f016 0f20 	tst.w	r6, #32
  400554:	d1d2      	bne.n	4004fc <gfx_generic_draw_circle+0x98>
		if (octant_mask & GFX_OCTANT6) {
  400556:	f016 0f40 	tst.w	r6, #64	; 0x40
  40055a:	d0d8      	beq.n	40050e <gfx_generic_draw_circle+0xaa>
			gfx_draw_pixel(x + offset_x, y + offset_y, color);
  40055c:	eb09 0105 	add.w	r1, r9, r5
  400560:	eb08 0007 	add.w	r0, r8, r7
  400564:	9a00      	ldr	r2, [sp, #0]
  400566:	b209      	sxth	r1, r1
  400568:	b200      	sxth	r0, r0
  40056a:	47d0      	blx	sl
  40056c:	e7cf      	b.n	40050e <gfx_generic_draw_circle+0xaa>
			gfx_draw_pixel(x + offset_y, y + offset_x, color);
  40056e:	eb09 0107 	add.w	r1, r9, r7
  400572:	eb08 0005 	add.w	r0, r8, r5
  400576:	9a00      	ldr	r2, [sp, #0]
  400578:	b209      	sxth	r1, r1
  40057a:	b200      	sxth	r0, r0
  40057c:	47d0      	blx	sl
  40057e:	e7c9      	b.n	400514 <gfx_generic_draw_circle+0xb0>
			error += ((offset_x << 2) + 6);
  400580:	3406      	adds	r4, #6
  400582:	eb04 0487 	add.w	r4, r4, r7, lsl #2
  400586:	b224      	sxth	r4, r4
  400588:	e7ce      	b.n	400528 <gfx_generic_draw_circle+0xc4>
  40058a:	bf00      	nop
  40058c:	00400905 	.word	0x00400905

00400590 <gfx_generic_draw_filled_circle>:

void gfx_generic_draw_filled_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, gfx_color_t color, uint8_t quadrant_mask)
{
  400590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400594:	b08b      	sub	sp, #44	; 0x2c
  400596:	9005      	str	r0, [sp, #20]
  400598:	9106      	str	r1, [sp, #24]
  40059a:	9304      	str	r3, [sp, #16]
  40059c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
  4005a0:	b19a      	cbz	r2, 4005ca <gfx_generic_draw_filled_circle+0x3a>
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
  4005a2:	0054      	lsls	r4, r2, #1
  4005a4:	f1c4 0403 	rsb	r4, r4, #3
  4005a8:	b224      	sxth	r4, r4

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
  4005aa:	2a00      	cmp	r2, #0
  4005ac:	db10      	blt.n	4005d0 <gfx_generic_draw_filled_circle+0x40>
  4005ae:	f04f 0801 	mov.w	r8, #1
  4005b2:	2500      	movs	r5, #0
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
  4005b4:	f00a 0303 	and.w	r3, sl, #3
  4005b8:	9307      	str	r3, [sp, #28]

/*! Generic implementation of gfx_draw_vertical_line(). */
__always_inline static void gfx_generic_draw_vertical_line(gfx_coord_t x,
		gfx_coord_t y, gfx_coord_t length, gfx_color_t color)
{
	gfx_draw_filled_rect(x, y, 1, length, color);
  4005ba:	f8df 9154 	ldr.w	r9, [pc, #340]	; 400710 <gfx_generic_draw_filled_circle+0x180>
					y - offset_x, offset_x + 1, color);
			gfx_draw_vertical_line(x + offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
  4005be:	f00a 030c 	and.w	r3, sl, #12
  4005c2:	9308      	str	r3, [sp, #32]
  4005c4:	9203      	str	r2, [sp, #12]
  4005c6:	46d3      	mov	fp, sl
  4005c8:	e076      	b.n	4006b8 <gfx_generic_draw_filled_circle+0x128>
		gfx_draw_pixel(x, y, color);
  4005ca:	461a      	mov	r2, r3
  4005cc:	4b4f      	ldr	r3, [pc, #316]	; (40070c <gfx_generic_draw_filled_circle+0x17c>)
  4005ce:	4798      	blx	r3
		}

		/* Next X. */
		++offset_x;
	}
}
  4005d0:	b00b      	add	sp, #44	; 0x2c
  4005d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			gfx_draw_vertical_line(x + offset_y,
  4005d6:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  4005da:	f8bd a00c 	ldrh.w	sl, [sp, #12]
  4005de:	f8bd 7018 	ldrh.w	r7, [sp, #24]
  4005e2:	b2ab      	uxth	r3, r5
  4005e4:	9309      	str	r3, [sp, #36]	; 0x24
  4005e6:	1af9      	subs	r1, r7, r3
  4005e8:	eb06 000a 	add.w	r0, r6, sl
  4005ec:	9a04      	ldr	r2, [sp, #16]
  4005ee:	9200      	str	r2, [sp, #0]
  4005f0:	fa0f f388 	sxth.w	r3, r8
  4005f4:	2201      	movs	r2, #1
  4005f6:	b209      	sxth	r1, r1
  4005f8:	b200      	sxth	r0, r0
  4005fa:	47c8      	blx	r9
			gfx_draw_vertical_line(x + offset_x,
  4005fc:	f10a 0301 	add.w	r3, sl, #1
  400600:	eba7 010a 	sub.w	r1, r7, sl
  400604:	9a09      	ldr	r2, [sp, #36]	; 0x24
  400606:	18b0      	adds	r0, r6, r2
  400608:	9a04      	ldr	r2, [sp, #16]
  40060a:	9200      	str	r2, [sp, #0]
  40060c:	b21b      	sxth	r3, r3
  40060e:	2201      	movs	r2, #1
  400610:	b209      	sxth	r1, r1
  400612:	b200      	sxth	r0, r0
  400614:	47c8      	blx	r9
  400616:	e052      	b.n	4006be <gfx_generic_draw_filled_circle+0x12e>
			gfx_draw_vertical_line(x - offset_y,
  400618:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  40061c:	f8bd a00c 	ldrh.w	sl, [sp, #12]
  400620:	f8bd 7018 	ldrh.w	r7, [sp, #24]
  400624:	b2ab      	uxth	r3, r5
  400626:	9309      	str	r3, [sp, #36]	; 0x24
  400628:	1af9      	subs	r1, r7, r3
  40062a:	eba6 000a 	sub.w	r0, r6, sl
  40062e:	9a04      	ldr	r2, [sp, #16]
  400630:	9200      	str	r2, [sp, #0]
  400632:	fa0f f388 	sxth.w	r3, r8
  400636:	2201      	movs	r2, #1
  400638:	b209      	sxth	r1, r1
  40063a:	b200      	sxth	r0, r0
  40063c:	47c8      	blx	r9
			gfx_draw_vertical_line(x - offset_x,
  40063e:	f10a 0301 	add.w	r3, sl, #1
  400642:	eba7 010a 	sub.w	r1, r7, sl
  400646:	9a09      	ldr	r2, [sp, #36]	; 0x24
  400648:	1ab0      	subs	r0, r6, r2
  40064a:	9a04      	ldr	r2, [sp, #16]
  40064c:	9200      	str	r2, [sp, #0]
  40064e:	b21b      	sxth	r3, r3
  400650:	2201      	movs	r2, #1
  400652:	b209      	sxth	r1, r1
  400654:	b200      	sxth	r0, r0
  400656:	47c8      	blx	r9
  400658:	e034      	b.n	4006c4 <gfx_generic_draw_filled_circle+0x134>
			gfx_draw_vertical_line(x - offset_y,
  40065a:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  40065e:	f8bd 700c 	ldrh.w	r7, [sp, #12]
  400662:	1bf0      	subs	r0, r6, r7
  400664:	9b04      	ldr	r3, [sp, #16]
  400666:	9300      	str	r3, [sp, #0]
  400668:	fa0f f388 	sxth.w	r3, r8
  40066c:	2201      	movs	r2, #1
  40066e:	f8dd a018 	ldr.w	sl, [sp, #24]
  400672:	4651      	mov	r1, sl
  400674:	b200      	sxth	r0, r0
  400676:	47c8      	blx	r9
			gfx_draw_vertical_line(x - offset_x,
  400678:	1c7b      	adds	r3, r7, #1
  40067a:	1b70      	subs	r0, r6, r5
  40067c:	9a04      	ldr	r2, [sp, #16]
  40067e:	9200      	str	r2, [sp, #0]
  400680:	b21b      	sxth	r3, r3
  400682:	2201      	movs	r2, #1
  400684:	4651      	mov	r1, sl
  400686:	b200      	sxth	r0, r0
  400688:	47c8      	blx	r9
  40068a:	e01e      	b.n	4006ca <gfx_generic_draw_filled_circle+0x13a>
		if (error < 0) {
  40068c:	2c00      	cmp	r4, #0
  40068e:	db38      	blt.n	400702 <gfx_generic_draw_filled_circle+0x172>
			error += (((offset_x - offset_y) << 2) + 10);
  400690:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  400694:	1aea      	subs	r2, r5, r3
  400696:	340a      	adds	r4, #10
  400698:	eb04 0482 	add.w	r4, r4, r2, lsl #2
  40069c:	b224      	sxth	r4, r4
			--offset_y;
  40069e:	3b01      	subs	r3, #1
  4006a0:	b21b      	sxth	r3, r3
  4006a2:	9303      	str	r3, [sp, #12]
		++offset_x;
  4006a4:	fa0f f388 	sxth.w	r3, r8
  4006a8:	3501      	adds	r5, #1
  4006aa:	f108 0801 	add.w	r8, r8, #1
  4006ae:	fa1f f888 	uxth.w	r8, r8
	while (offset_x <= offset_y) {
  4006b2:	9a03      	ldr	r2, [sp, #12]
  4006b4:	429a      	cmp	r2, r3
  4006b6:	db8b      	blt.n	4005d0 <gfx_generic_draw_filled_circle+0x40>
		if (quadrant_mask & GFX_QUADRANT0) {
  4006b8:	9b07      	ldr	r3, [sp, #28]
  4006ba:	2b00      	cmp	r3, #0
  4006bc:	d18b      	bne.n	4005d6 <gfx_generic_draw_filled_circle+0x46>
		if (quadrant_mask & GFX_QUADRANT1) {
  4006be:	9b08      	ldr	r3, [sp, #32]
  4006c0:	2b00      	cmp	r3, #0
  4006c2:	d1a9      	bne.n	400618 <gfx_generic_draw_filled_circle+0x88>
		if (quadrant_mask & GFX_QUADRANT2) {
  4006c4:	f01b 0f30 	tst.w	fp, #48	; 0x30
  4006c8:	d1c7      	bne.n	40065a <gfx_generic_draw_filled_circle+0xca>
		if (quadrant_mask & GFX_QUADRANT3) {
  4006ca:	f01b 0fc0 	tst.w	fp, #192	; 0xc0
  4006ce:	d0dd      	beq.n	40068c <gfx_generic_draw_filled_circle+0xfc>
			gfx_draw_vertical_line(x + offset_y,
  4006d0:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  4006d4:	f8bd 700c 	ldrh.w	r7, [sp, #12]
  4006d8:	19f0      	adds	r0, r6, r7
  4006da:	9b04      	ldr	r3, [sp, #16]
  4006dc:	9300      	str	r3, [sp, #0]
  4006de:	fa0f f388 	sxth.w	r3, r8
  4006e2:	2201      	movs	r2, #1
  4006e4:	f8dd a018 	ldr.w	sl, [sp, #24]
  4006e8:	4651      	mov	r1, sl
  4006ea:	b200      	sxth	r0, r0
  4006ec:	47c8      	blx	r9
			gfx_draw_vertical_line(x + offset_x,
  4006ee:	1c7b      	adds	r3, r7, #1
  4006f0:	1970      	adds	r0, r6, r5
  4006f2:	9a04      	ldr	r2, [sp, #16]
  4006f4:	9200      	str	r2, [sp, #0]
  4006f6:	b21b      	sxth	r3, r3
  4006f8:	2201      	movs	r2, #1
  4006fa:	4651      	mov	r1, sl
  4006fc:	b200      	sxth	r0, r0
  4006fe:	47c8      	blx	r9
  400700:	e7c4      	b.n	40068c <gfx_generic_draw_filled_circle+0xfc>
			error += ((offset_x << 2) + 6);
  400702:	3406      	adds	r4, #6
  400704:	eb04 0485 	add.w	r4, r4, r5, lsl #2
  400708:	b224      	sxth	r4, r4
  40070a:	e7cb      	b.n	4006a4 <gfx_generic_draw_filled_circle+0x114>
  40070c:	00400905 	.word	0x00400905
  400710:	00400289 	.word	0x00400289

00400714 <gfx_generic_put_bitmap>:

void gfx_generic_put_bitmap(const struct gfx_bitmap *bmp,
		gfx_coord_t map_x, gfx_coord_t map_y,
		gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height)
{
  400714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400718:	b083      	sub	sp, #12
  40071a:	f9bd 4030 	ldrsh.w	r4, [sp, #48]	; 0x30
  40071e:	f9bd 5034 	ldrsh.w	r5, [sp, #52]	; 0x34
  400722:	f9bd 7038 	ldrsh.w	r7, [sp, #56]	; 0x38
#if XMEGA
	gfx_color_t PROGMEM_PTR_T progmem_pixmap;
#endif

	/* Nothing to do if width or height is zero. */
	if ((width == 0) || (height == 0)) {
  400726:	2d00      	cmp	r5, #0
  400728:	d068      	beq.n	4007fc <gfx_generic_put_bitmap+0xe8>
  40072a:	4688      	mov	r8, r1
  40072c:	461e      	mov	r6, r3
  40072e:	2f00      	cmp	r7, #0
  400730:	d064      	beq.n	4007fc <gfx_generic_put_bitmap+0xe8>
	Assert(width > 0);
	Assert(height > 0);

#ifdef CONF_GFX_USE_CLIPPING
	/* Nothing to do if entire rectangle is outside clipping region. */
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
  400732:	4b55      	ldr	r3, [pc, #340]	; (400888 <gfx_generic_put_bitmap+0x174>)
  400734:	f9b3 3000 	ldrsh.w	r3, [r3]
  400738:	42b3      	cmp	r3, r6
  40073a:	db5f      	blt.n	4007fc <gfx_generic_put_bitmap+0xe8>
  40073c:	4953      	ldr	r1, [pc, #332]	; (40088c <gfx_generic_put_bitmap+0x178>)
  40073e:	f9b1 e000 	ldrsh.w	lr, [r1]
  400742:	45a6      	cmp	lr, r4
  400744:	db5a      	blt.n	4007fc <gfx_generic_put_bitmap+0xe8>
			((x + width) <= gfx_min_x) ||
  400746:	4952      	ldr	r1, [pc, #328]	; (400890 <gfx_generic_put_bitmap+0x17c>)
  400748:	f9b1 1000 	ldrsh.w	r1, [r1]
  40074c:	eb06 0c05 	add.w	ip, r6, r5
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
  400750:	458c      	cmp	ip, r1
  400752:	dd53      	ble.n	4007fc <gfx_generic_put_bitmap+0xe8>
			((y + height) <= gfx_min_y)) {
  400754:	f8df c150 	ldr.w	ip, [pc, #336]	; 4008a8 <gfx_generic_put_bitmap+0x194>
  400758:	f9bc c000 	ldrsh.w	ip, [ip]
  40075c:	eb04 0907 	add.w	r9, r4, r7
			((x + width) <= gfx_min_x) ||
  400760:	45e1      	cmp	r9, ip
  400762:	dd4b      	ble.n	4007fc <gfx_generic_put_bitmap+0xe8>
		return;
	}

	/* Clip if outside left X limit. */
	if (x < gfx_min_x) {
  400764:	428e      	cmp	r6, r1
  400766:	da0c      	bge.n	400782 <gfx_generic_put_bitmap+0x6e>
		width -= gfx_min_x - x;
  400768:	b2b6      	uxth	r6, r6
  40076a:	fa1f f981 	uxth.w	r9, r1
  40076e:	eba6 0a09 	sub.w	sl, r6, r9
  400772:	4455      	add	r5, sl
  400774:	b22d      	sxth	r5, r5
		map_x += gfx_min_x - x;
  400776:	44c8      	add	r8, r9
  400778:	eba8 0806 	sub.w	r8, r8, r6
  40077c:	fa0f f888 	sxth.w	r8, r8
		x = gfx_min_x;
  400780:	460e      	mov	r6, r1
	}

	/* Clip if outside top Y limit. */
	if (y < gfx_min_y) {
  400782:	4564      	cmp	r4, ip
  400784:	da0a      	bge.n	40079c <gfx_generic_put_bitmap+0x88>
		height -= gfx_min_y - y;
  400786:	b2a4      	uxth	r4, r4
  400788:	fa1f f18c 	uxth.w	r1, ip
  40078c:	eba4 0901 	sub.w	r9, r4, r1
  400790:	444f      	add	r7, r9
  400792:	b23f      	sxth	r7, r7
		map_y += gfx_min_y - y;
  400794:	440a      	add	r2, r1
  400796:	1b12      	subs	r2, r2, r4
  400798:	b212      	sxth	r2, r2
		y = gfx_min_y;
  40079a:	4664      	mov	r4, ip
	}

#endif

	/* Compute bottom right point. */
	x2 = x + width - 1;
  40079c:	fa1f fa86 	uxth.w	sl, r6
  4007a0:	eb0a 0c05 	add.w	ip, sl, r5
  4007a4:	f10c 3cff 	add.w	ip, ip, #4294967295
  4007a8:	fa0f fc8c 	sxth.w	ip, ip
	y2 = y + height - 1;
  4007ac:	fa1f f984 	uxth.w	r9, r4
  4007b0:	eb09 0107 	add.w	r1, r9, r7
  4007b4:	3901      	subs	r1, #1
  4007b6:	b209      	sxth	r1, r1

#ifdef CONF_GFX_USE_CLIPPING
	/* Clip if outside right X limit. */
	if (x2 > gfx_max_x) {
  4007b8:	4563      	cmp	r3, ip
  4007ba:	da04      	bge.n	4007c6 <gfx_generic_put_bitmap+0xb2>
		x2 = gfx_max_x;
		width = x2 - x + 1;
  4007bc:	1c5d      	adds	r5, r3, #1
  4007be:	eba5 050a 	sub.w	r5, r5, sl
  4007c2:	b22d      	sxth	r5, r5
		x2 = gfx_max_x;
  4007c4:	469c      	mov	ip, r3
	}

	/* Clip if outside bottom Y limit. */
	if (y2 > gfx_max_y) {
  4007c6:	458e      	cmp	lr, r1
  4007c8:	da05      	bge.n	4007d6 <gfx_generic_put_bitmap+0xc2>
		y2 = gfx_max_y;
		height = y2 - y + 1;
  4007ca:	f10e 0701 	add.w	r7, lr, #1
  4007ce:	eba7 0709 	sub.w	r7, r7, r9
  4007d2:	b23f      	sxth	r7, r7
		y2 = gfx_max_y;
  4007d4:	4671      	mov	r1, lr
	}
#endif

	switch (bmp->type) {
  4007d6:	7903      	ldrb	r3, [r0, #4]
  4007d8:	2b03      	cmp	r3, #3
  4007da:	d80f      	bhi.n	4007fc <gfx_generic_put_bitmap+0xe8>
  4007dc:	e8df f003 	tbb	[pc, r3]
  4007e0:	11202002 	.word	0x11202002
	case GFX_BITMAP_SOLID:
		gfx_draw_filled_rect(x, y, x2 - x, y2 - y, bmp->data.color);
  4007e4:	eba1 0309 	sub.w	r3, r1, r9
  4007e8:	ebac 020a 	sub.w	r2, ip, sl
  4007ec:	8901      	ldrh	r1, [r0, #8]
  4007ee:	9100      	str	r1, [sp, #0]
  4007f0:	b21b      	sxth	r3, r3
  4007f2:	b212      	sxth	r2, r2
  4007f4:	4621      	mov	r1, r4
  4007f6:	4630      	mov	r0, r6
  4007f8:	4c26      	ldr	r4, [pc, #152]	; (400894 <gfx_generic_put_bitmap+0x180>)
  4007fa:	47a0      	blx	r4
		}

		break;
#endif
	}
}
  4007fc:	b003      	add	sp, #12
  4007fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (gfx_ext_draw_func != NULL) {
  400802:	4b25      	ldr	r3, [pc, #148]	; (400898 <gfx_generic_put_bitmap+0x184>)
  400804:	681d      	ldr	r5, [r3, #0]
  400806:	2d00      	cmp	r5, #0
  400808:	d0f8      	beq.n	4007fc <gfx_generic_put_bitmap+0xe8>
			gfx_ext_draw_func(bmp, x, y, x2 - x, y2 - y);
  40080a:	ebac 030a 	sub.w	r3, ip, sl
  40080e:	eba1 0209 	sub.w	r2, r1, r9
  400812:	b212      	sxth	r2, r2
  400814:	9200      	str	r2, [sp, #0]
  400816:	b21b      	sxth	r3, r3
  400818:	4622      	mov	r2, r4
  40081a:	4631      	mov	r1, r6
  40081c:	47a8      	blx	r5
  40081e:	e7ed      	b.n	4007fc <gfx_generic_put_bitmap+0xe8>
	gfx_coord_t map_width = bmp->width;
  400820:	f9b0 a000 	ldrsh.w	sl, [r0]
		pixmap = bmp->data.pixmap;
  400824:	6883      	ldr	r3, [r0, #8]
		pixmap += map_x;
  400826:	eb03 0b48 	add.w	fp, r3, r8, lsl #1
		if (map_y > 0) {
  40082a:	2a00      	cmp	r2, #0
  40082c:	dd03      	ble.n	400836 <gfx_generic_put_bitmap+0x122>
			pixmap += (uint32_t)map_y * map_width;
  40082e:	ea4f 034a 	mov.w	r3, sl, lsl #1
  400832:	fb02 bb03 	mla	fp, r2, r3, fp
		gfx_set_bottom_right_limit(x2, y2);
  400836:	4660      	mov	r0, ip
  400838:	4b18      	ldr	r3, [pc, #96]	; (40089c <gfx_generic_put_bitmap+0x188>)
  40083a:	4798      	blx	r3
		if ((map_width == width) && (map_x == 0)) {
  40083c:	4555      	cmp	r5, sl
  40083e:	d102      	bne.n	400846 <gfx_generic_put_bitmap+0x132>
  400840:	f1b8 0f00 	cmp.w	r8, #0
  400844:	d015      	beq.n	400872 <gfx_generic_put_bitmap+0x15e>
			while (lines_left > 0) {
  400846:	2f00      	cmp	r7, #0
  400848:	ddd8      	ble.n	4007fc <gfx_generic_put_bitmap+0xe8>
				pixmap += map_width;
  40084a:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
  40084e:	444f      	add	r7, r9
  400850:	b23f      	sxth	r7, r7
				gfx_set_top_left_limit(x, y);
  400852:	f8df 904c 	ldr.w	r9, [pc, #76]	; 4008a0 <gfx_generic_put_bitmap+0x18c>
				gfx_copy_pixels_to_screen(pixmap, width);
  400856:	f8df 804c 	ldr.w	r8, [pc, #76]	; 4008a4 <gfx_generic_put_bitmap+0x190>
				gfx_set_top_left_limit(x, y);
  40085a:	4621      	mov	r1, r4
  40085c:	4630      	mov	r0, r6
  40085e:	47c8      	blx	r9
  400860:	3401      	adds	r4, #1
  400862:	b224      	sxth	r4, r4
				gfx_copy_pixels_to_screen(pixmap, width);
  400864:	4629      	mov	r1, r5
  400866:	4658      	mov	r0, fp
  400868:	47c0      	blx	r8
				pixmap += map_width;
  40086a:	44d3      	add	fp, sl
			while (lines_left > 0) {
  40086c:	42bc      	cmp	r4, r7
  40086e:	d1f4      	bne.n	40085a <gfx_generic_put_bitmap+0x146>
  400870:	e7c4      	b.n	4007fc <gfx_generic_put_bitmap+0xe8>
			gfx_set_top_left_limit(x, y);
  400872:	4621      	mov	r1, r4
  400874:	4630      	mov	r0, r6
  400876:	4b0a      	ldr	r3, [pc, #40]	; (4008a0 <gfx_generic_put_bitmap+0x18c>)
  400878:	4798      	blx	r3
			gfx_copy_pixels_to_screen(pixmap,
  40087a:	fb07 f105 	mul.w	r1, r7, r5
  40087e:	4658      	mov	r0, fp
  400880:	4b08      	ldr	r3, [pc, #32]	; (4008a4 <gfx_generic_put_bitmap+0x190>)
  400882:	4798      	blx	r3
  400884:	e7ba      	b.n	4007fc <gfx_generic_put_bitmap+0xe8>
  400886:	bf00      	nop
  400888:	20400776 	.word	0x20400776
  40088c:	2040077a 	.word	0x2040077a
  400890:	20400778 	.word	0x20400778
  400894:	00400289 	.word	0x00400289
  400898:	20400478 	.word	0x20400478
  40089c:	00401271 	.word	0x00401271
  4008a0:	0040125d 	.word	0x0040125d
  4008a4:	00401339 	.word	0x00401339
  4008a8:	2040077c 	.word	0x2040077c

004008ac <gfx_ili9488_set_orientation>:
gfx_coord_t gfx_height, gfx_width;
gfx_coord_t gfx_min_x, gfx_min_y;
gfx_coord_t gfx_max_x, gfx_max_y;

void gfx_ili9488_set_orientation(uint8_t flags)
{
  4008ac:	b510      	push	{r4, lr}
	ili9488_set_orientation(flags);
  4008ae:	4b0b      	ldr	r3, [pc, #44]	; (4008dc <gfx_ili9488_set_orientation+0x30>)
  4008b0:	4798      	blx	r3
	/* Switch width and height if XY is switched. */
	if ((flags & GFX_SWITCH_XY) != 0x00) {
		gfx_width = ILI9488_SWITCH_XY_WIDTH;
		gfx_height = ILI9488_SWITCH_XY_HEIGHT;
	} else {
		gfx_width = ILI9488_LCD_WIDTH;
  4008b2:	f44f 72a0 	mov.w	r2, #320	; 0x140
  4008b6:	4b0a      	ldr	r3, [pc, #40]	; (4008e0 <gfx_ili9488_set_orientation+0x34>)
  4008b8:	801a      	strh	r2, [r3, #0]
		gfx_height = ILI9488_LCD_HEIGHT;
  4008ba:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  4008be:	4b09      	ldr	r3, [pc, #36]	; (4008e4 <gfx_ili9488_set_orientation+0x38>)
  4008c0:	801a      	strh	r2, [r3, #0]
	}

#ifdef CONF_GFX_USE_CLIPPING
	/* Reset clipping region. */
	gfx_set_clipping(0, 0, gfx_width - 1, gfx_height - 1);
  4008c2:	4b08      	ldr	r3, [pc, #32]	; (4008e4 <gfx_ili9488_set_orientation+0x38>)
  4008c4:	881b      	ldrh	r3, [r3, #0]
  4008c6:	3b01      	subs	r3, #1
  4008c8:	4a05      	ldr	r2, [pc, #20]	; (4008e0 <gfx_ili9488_set_orientation+0x34>)
  4008ca:	8812      	ldrh	r2, [r2, #0]
  4008cc:	3a01      	subs	r2, #1
  4008ce:	b21b      	sxth	r3, r3
  4008d0:	b212      	sxth	r2, r2
  4008d2:	2100      	movs	r1, #0
  4008d4:	4608      	mov	r0, r1
  4008d6:	4c04      	ldr	r4, [pc, #16]	; (4008e8 <gfx_ili9488_set_orientation+0x3c>)
  4008d8:	47a0      	blx	r4
  4008da:	bd10      	pop	{r4, pc}
  4008dc:	004012ad 	.word	0x004012ad
  4008e0:	20400774 	.word	0x20400774
  4008e4:	2040077e 	.word	0x2040077e
  4008e8:	0040021d 	.word	0x0040021d

004008ec <gfx_ili9488_color>:
#endif
}

gfx_color_t gfx_ili9488_color(uint8_t r, uint8_t g, uint8_t b)
{
	return GFX_COLOR(r, g, b);
  4008ec:	4b04      	ldr	r3, [pc, #16]	; (400900 <gfx_ili9488_color+0x14>)
  4008ee:	ea03 2000 	and.w	r0, r3, r0, lsl #8
  4008f2:	ea40 00d2 	orr.w	r0, r0, r2, lsr #3
  4008f6:	00c9      	lsls	r1, r1, #3
  4008f8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
}
  4008fc:	4308      	orrs	r0, r1
  4008fe:	4770      	bx	lr
  400900:	fffff800 	.word	0xfffff800

00400904 <gfx_ili9488_draw_pixel>:

	return color;
}

void gfx_ili9488_draw_pixel(gfx_coord_t x, gfx_coord_t y, gfx_color_t color)
{
  400904:	b538      	push	{r3, r4, r5, lr}
#ifdef CONF_GFX_USE_CLIPPING
	if ((x < gfx_min_x) || (x > gfx_max_x) ||
  400906:	4c0f      	ldr	r4, [pc, #60]	; (400944 <gfx_ili9488_draw_pixel+0x40>)
  400908:	f9b4 4000 	ldrsh.w	r4, [r4]
  40090c:	4284      	cmp	r4, r0
  40090e:	dc0e      	bgt.n	40092e <gfx_ili9488_draw_pixel+0x2a>
  400910:	4b0d      	ldr	r3, [pc, #52]	; (400948 <gfx_ili9488_draw_pixel+0x44>)
  400912:	f9b3 3000 	ldrsh.w	r3, [r3]
  400916:	4283      	cmp	r3, r0
  400918:	db09      	blt.n	40092e <gfx_ili9488_draw_pixel+0x2a>
			(y < gfx_min_y) || (y > gfx_max_y)) {
  40091a:	4b0c      	ldr	r3, [pc, #48]	; (40094c <gfx_ili9488_draw_pixel+0x48>)
	if ((x < gfx_min_x) || (x > gfx_max_x) ||
  40091c:	f9b3 3000 	ldrsh.w	r3, [r3]
  400920:	428b      	cmp	r3, r1
  400922:	dc04      	bgt.n	40092e <gfx_ili9488_draw_pixel+0x2a>
			(y < gfx_min_y) || (y > gfx_max_y)) {
  400924:	4b0a      	ldr	r3, [pc, #40]	; (400950 <gfx_ili9488_draw_pixel+0x4c>)
  400926:	f9b3 3000 	ldrsh.w	r3, [r3]
  40092a:	428b      	cmp	r3, r1
  40092c:	da00      	bge.n	400930 <gfx_ili9488_draw_pixel+0x2c>
  40092e:	bd38      	pop	{r3, r4, r5, pc}
  400930:	4614      	mov	r4, r2
		return;
	}
#endif

	/* Set up draw area and write the two bytes of pixel data. */
	gfx_set_limits(x, y, x, y);
  400932:	460b      	mov	r3, r1
  400934:	4602      	mov	r2, r0
  400936:	4d07      	ldr	r5, [pc, #28]	; (400954 <gfx_ili9488_draw_pixel+0x50>)
  400938:	47a8      	blx	r5
	ili9488_write_gram(color);
  40093a:	4620      	mov	r0, r4
  40093c:	4b06      	ldr	r3, [pc, #24]	; (400958 <gfx_ili9488_draw_pixel+0x54>)
  40093e:	4798      	blx	r3
  400940:	e7f5      	b.n	40092e <gfx_ili9488_draw_pixel+0x2a>
  400942:	bf00      	nop
  400944:	20400778 	.word	0x20400778
  400948:	20400776 	.word	0x20400776
  40094c:	2040077c 	.word	0x2040077c
  400950:	2040077a 	.word	0x2040077a
  400954:	00401285 	.word	0x00401285
  400958:	004012f9 	.word	0x004012f9

0040095c <gfx_ili9488_draw_line_pixel>:

void gfx_ili9488_draw_line_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_color_t color)
{
#ifdef CONF_GFX_USE_CLIPPING
	if ((x < gfx_min_x) || (x > gfx_max_x) ||
  40095c:	4b0e      	ldr	r3, [pc, #56]	; (400998 <gfx_ili9488_draw_line_pixel+0x3c>)
  40095e:	f9b3 3000 	ldrsh.w	r3, [r3]
  400962:	4283      	cmp	r3, r0
  400964:	dc0e      	bgt.n	400984 <gfx_ili9488_draw_line_pixel+0x28>
  400966:	4b0d      	ldr	r3, [pc, #52]	; (40099c <gfx_ili9488_draw_line_pixel+0x40>)
  400968:	f9b3 3000 	ldrsh.w	r3, [r3]
  40096c:	4283      	cmp	r3, r0
  40096e:	db09      	blt.n	400984 <gfx_ili9488_draw_line_pixel+0x28>
			(y < gfx_min_y) || (y > gfx_max_y)) {
  400970:	4b0b      	ldr	r3, [pc, #44]	; (4009a0 <gfx_ili9488_draw_line_pixel+0x44>)
	if ((x < gfx_min_x) || (x > gfx_max_x) ||
  400972:	f9b3 3000 	ldrsh.w	r3, [r3]
  400976:	428b      	cmp	r3, r1
  400978:	dc04      	bgt.n	400984 <gfx_ili9488_draw_line_pixel+0x28>
			(y < gfx_min_y) || (y > gfx_max_y)) {
  40097a:	4b0a      	ldr	r3, [pc, #40]	; (4009a4 <gfx_ili9488_draw_line_pixel+0x48>)
  40097c:	f9b3 3000 	ldrsh.w	r3, [r3]
  400980:	428b      	cmp	r3, r1
  400982:	da00      	bge.n	400986 <gfx_ili9488_draw_line_pixel+0x2a>
  400984:	4770      	bx	lr
{
  400986:	b510      	push	{r4, lr}
  400988:	4614      	mov	r4, r2
	}
#endif

	/* Set up top left corner of area and write the two bytes of */
	/* pixel data.  Bottom left corner is already set to max_x/y. */
	gfx_set_top_left_limit(x, y);
  40098a:	4b07      	ldr	r3, [pc, #28]	; (4009a8 <gfx_ili9488_draw_line_pixel+0x4c>)
  40098c:	4798      	blx	r3
	ili9488_write_gram(color);
  40098e:	4620      	mov	r0, r4
  400990:	4b06      	ldr	r3, [pc, #24]	; (4009ac <gfx_ili9488_draw_line_pixel+0x50>)
  400992:	4798      	blx	r3
  400994:	bd10      	pop	{r4, pc}
  400996:	bf00      	nop
  400998:	20400778 	.word	0x20400778
  40099c:	20400776 	.word	0x20400776
  4009a0:	2040077c 	.word	0x2040077c
  4009a4:	2040077a 	.word	0x2040077a
  4009a8:	0040125d 	.word	0x0040125d
  4009ac:	004012f9 	.word	0x004012f9

004009b0 <gfx_ili9488_init>:
}

void gfx_ili9488_init(void)
{
  4009b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4009b2:	b087      	sub	sp, #28
	struct ili9488_opt_t g_ili9488_display_opt;

	/* initialize globals */
	gfx_width = ILI9488_LCD_WIDTH;
  4009b4:	4d13      	ldr	r5, [pc, #76]	; (400a04 <gfx_ili9488_init+0x54>)
  4009b6:	f44f 72a0 	mov.w	r2, #320	; 0x140
  4009ba:	802a      	strh	r2, [r5, #0]
	gfx_height = ILI9488_LCD_HEIGHT;
  4009bc:	4e12      	ldr	r6, [pc, #72]	; (400a08 <gfx_ili9488_init+0x58>)
  4009be:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  4009c2:	8033      	strh	r3, [r6, #0]

	/* Initialize display parameter */
	g_ili9488_display_opt.ul_width= ILI9488_LCD_WIDTH;
  4009c4:	9202      	str	r2, [sp, #8]
	g_ili9488_display_opt.ul_height = ILI9488_LCD_HEIGHT;
  4009c6:	9303      	str	r3, [sp, #12]
	g_ili9488_display_opt.foreground_color= COLOR_BLACK;
  4009c8:	2400      	movs	r4, #0
  4009ca:	9404      	str	r4, [sp, #16]
	g_ili9488_display_opt.background_color = COLOR_WHITE;
  4009cc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  4009d0:	9305      	str	r3, [sp, #20]

	ili9488_init(&g_ili9488_display_opt);
  4009d2:	a802      	add	r0, sp, #8
  4009d4:	4b0d      	ldr	r3, [pc, #52]	; (400a0c <gfx_ili9488_init+0x5c>)
  4009d6:	4798      	blx	r3
	ili9488_display_on();
  4009d8:	4b0d      	ldr	r3, [pc, #52]	; (400a10 <gfx_ili9488_init+0x60>)
  4009da:	4798      	blx	r3

	/* Set clipping area to whole screen initially */
	gfx_set_clipping(0, 0, gfx_width, gfx_height);
  4009dc:	f9b6 3000 	ldrsh.w	r3, [r6]
  4009e0:	f9b5 2000 	ldrsh.w	r2, [r5]
  4009e4:	4621      	mov	r1, r4
  4009e6:	4620      	mov	r0, r4
  4009e8:	4f0a      	ldr	r7, [pc, #40]	; (400a14 <gfx_ili9488_init+0x64>)
  4009ea:	47b8      	blx	r7

	gfx_draw_filled_rect(0, 0, gfx_width, gfx_height,
  4009ec:	f9b6 3000 	ldrsh.w	r3, [r6]
  4009f0:	f9b5 2000 	ldrsh.w	r2, [r5]
  4009f4:	9400      	str	r4, [sp, #0]
  4009f6:	4621      	mov	r1, r4
  4009f8:	4620      	mov	r0, r4
  4009fa:	4c07      	ldr	r4, [pc, #28]	; (400a18 <gfx_ili9488_init+0x68>)
  4009fc:	47a0      	blx	r4
			GFX_COLOR_BLACK);
}
  4009fe:	b007      	add	sp, #28
  400a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400a02:	bf00      	nop
  400a04:	20400774 	.word	0x20400774
  400a08:	2040077e 	.word	0x2040077e
  400a0c:	004010ed 	.word	0x004010ed
  400a10:	0040105d 	.word	0x0040105d
  400a14:	0040021d 	.word	0x0040021d
  400a18:	00400289 	.word	0x00400289

00400a1c <gfx_draw_char>:
 * \param text_color  Foreground color to draw the text string in
 */
void gfx_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font, const gfx_color_t bg_color,
		const gfx_color_t text_color)
{
  400a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400a20:	b085      	sub	sp, #20
  400a22:	4604      	mov	r4, r0
  400a24:	4688      	mov	r8, r1
  400a26:	4691      	mov	r9, r2
  400a28:	469a      	mov	sl, r3
  400a2a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
  400a2e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  400a32:	9302      	str	r3, [sp, #8]
	if (bg_color != GFX_COLOR_TRANSPARENT) {
  400a34:	f24f 031e 	movw	r3, #61470	; 0xf01e
  400a38:	4299      	cmp	r1, r3
  400a3a:	d008      	beq.n	400a4e <gfx_draw_char+0x32>
		gfx_draw_filled_rect(x, y, font->width, font->height, bg_color);
  400a3c:	f89a 3009 	ldrb.w	r3, [sl, #9]
  400a40:	f89a 2008 	ldrb.w	r2, [sl, #8]
  400a44:	9100      	str	r1, [sp, #0]
  400a46:	4649      	mov	r1, r9
  400a48:	4640      	mov	r0, r8
  400a4a:	4d25      	ldr	r5, [pc, #148]	; (400ae0 <gfx_draw_char+0xc4>)
  400a4c:	47a8      	blx	r5
	}

	switch (font->type) {
  400a4e:	f89a 3000 	ldrb.w	r3, [sl]
  400a52:	b113      	cbz	r3, 400a5a <gfx_draw_char+0x3e>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  400a54:	b005      	add	sp, #20
  400a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  400a5a:	f89a 3008 	ldrb.w	r3, [sl, #8]
  400a5e:	08da      	lsrs	r2, r3, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  400a60:	f013 0f07 	tst.w	r3, #7
		char_row_size++;
  400a64:	bf18      	it	ne
  400a66:	3201      	addne	r2, #1
	glyph_data_offset = char_row_size * font->height *
  400a68:	f89a 3009 	ldrb.w	r3, [sl, #9]
			((uint8_t)ch - font->first_char);
  400a6c:	f89a 700a 	ldrb.w	r7, [sl, #10]
  400a70:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  400a72:	fb17 f703 	smulbb	r7, r7, r3
  400a76:	fb17 f702 	smulbb	r7, r7, r2
	glyph_data = font->data.progmem + glyph_data_offset;
  400a7a:	f8da 2004 	ldr.w	r2, [sl, #4]
  400a7e:	fa12 f787 	uxtah	r7, r2, r7
  400a82:	3b01      	subs	r3, #1
  400a84:	f109 0201 	add.w	r2, r9, #1
  400a88:	fa52 f383 	uxtab	r3, r2, r3
  400a8c:	b29b      	uxth	r3, r3
  400a8e:	9303      	str	r3, [sp, #12]
				gfx_draw_pixel(inc_x, inc_y, color);
  400a90:	f8df b050 	ldr.w	fp, [pc, #80]	; 400ae4 <gfx_draw_char+0xc8>
  400a94:	e01d      	b.n	400ad2 <gfx_draw_char+0xb6>
			glyph_byte <<= 1;
  400a96:	0064      	lsls	r4, r4, #1
  400a98:	b2e4      	uxtb	r4, r4
  400a9a:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  400a9c:	b2eb      	uxtb	r3, r5
  400a9e:	429e      	cmp	r6, r3
  400aa0:	d90e      	bls.n	400ac0 <gfx_draw_char+0xa4>
  400aa2:	eb05 0008 	add.w	r0, r5, r8
  400aa6:	b200      	sxth	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  400aa8:	f015 0f07 	tst.w	r5, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  400aac:	bf08      	it	eq
  400aae:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  400ab2:	f014 0f80 	tst.w	r4, #128	; 0x80
  400ab6:	d0ee      	beq.n	400a96 <gfx_draw_char+0x7a>
				gfx_draw_pixel(inc_x, inc_y, color);
  400ab8:	9a02      	ldr	r2, [sp, #8]
  400aba:	4649      	mov	r1, r9
  400abc:	47d8      	blx	fp
  400abe:	e7ea      	b.n	400a96 <gfx_draw_char+0x7a>
  400ac0:	f109 0901 	add.w	r9, r9, #1
  400ac4:	fa1f f389 	uxth.w	r3, r9
		inc_y += 1;
  400ac8:	fa0f f983 	sxth.w	r9, r3
	} while (rows_left > 0);
  400acc:	9a03      	ldr	r2, [sp, #12]
  400ace:	429a      	cmp	r2, r3
  400ad0:	d0c0      	beq.n	400a54 <gfx_draw_char+0x38>
		uint8_t pixelsToDraw = font->width;
  400ad2:	f89a 6008 	ldrb.w	r6, [sl, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  400ad6:	2e00      	cmp	r6, #0
  400ad8:	d0f2      	beq.n	400ac0 <gfx_draw_char+0xa4>
  400ada:	2500      	movs	r5, #0
  400adc:	462c      	mov	r4, r5
  400ade:	e7e0      	b.n	400aa2 <gfx_draw_char+0x86>
  400ae0:	00400289 	.word	0x00400289
  400ae4:	00400905 	.word	0x00400905

00400ae8 <gfx_get_string_bounding_box>:
 * \param width    Pointer to width result
 * \param height   Pointer to height result
 */
void gfx_get_string_bounding_box(const char *str, const struct font *font,
		gfx_coord_t *width, gfx_coord_t *height)
{
  400ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
	gfx_coord_t font_width = font->width;
  400aea:	7a0f      	ldrb	r7, [r1, #8]
	gfx_coord_t font_height = font->height;
  400aec:	f891 e009 	ldrb.w	lr, [r1, #9]
  400af0:	fa0f f58e 	sxth.w	r5, lr

	gfx_coord_t max_width = 1;
	gfx_coord_t max_height = font_height;
	gfx_coord_t x = 0;
  400af4:	2100      	movs	r1, #0
	gfx_coord_t max_width = 1;
  400af6:	2601      	movs	r6, #1

	/* Handle each character until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = 0;
  400af8:	468c      	mov	ip, r1
  400afa:	e005      	b.n	400b08 <gfx_get_string_bounding_box+0x20>
			max_height += font_height;
  400afc:	4475      	add	r5, lr
  400afe:	b22d      	sxth	r5, r5
			x = 0;
  400b00:	4661      	mov	r1, ip
			x += font_width;
			if (x > max_width) {
				max_width = x;
			}
		}
	} while (*(++str));
  400b02:	f810 4f01 	ldrb.w	r4, [r0, #1]!
  400b06:	b154      	cbz	r4, 400b1e <gfx_get_string_bounding_box+0x36>
		if (*str == '\n') {
  400b08:	7804      	ldrb	r4, [r0, #0]
  400b0a:	2c0a      	cmp	r4, #10
  400b0c:	d0f6      	beq.n	400afc <gfx_get_string_bounding_box+0x14>
		} else if (*str == '\r') {
  400b0e:	2c0d      	cmp	r4, #13
  400b10:	d0f7      	beq.n	400b02 <gfx_get_string_bounding_box+0x1a>
			x += font_width;
  400b12:	4439      	add	r1, r7
  400b14:	b209      	sxth	r1, r1
  400b16:	428e      	cmp	r6, r1
  400b18:	bfb8      	it	lt
  400b1a:	460e      	movlt	r6, r1
  400b1c:	e7f1      	b.n	400b02 <gfx_get_string_bounding_box+0x1a>

	/* Return values through references */
	*width = max_width;
  400b1e:	8016      	strh	r6, [r2, #0]
	*height = max_height;
  400b20:	801d      	strh	r5, [r3, #0]
  400b22:	bdf0      	pop	{r4, r5, r6, r7, pc}

00400b24 <gfx_draw_string_aligned>:
{
  400b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400b28:	b087      	sub	sp, #28
  400b2a:	4606      	mov	r6, r0
  400b2c:	9103      	str	r1, [sp, #12]
  400b2e:	4690      	mov	r8, r2
  400b30:	461f      	mov	r7, r3
  400b32:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
  400b36:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
  400b3a:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
  400b3e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
  400b42:	9302      	str	r3, [sp, #8]
	gfx_get_string_bounding_box(str, font, &bounding_x, &bounding_y);
  400b44:	ab05      	add	r3, sp, #20
  400b46:	f10d 0216 	add.w	r2, sp, #22
  400b4a:	4639      	mov	r1, r7
  400b4c:	4d47      	ldr	r5, [pc, #284]	; (400c6c <gfx_draw_string_aligned+0x148>)
  400b4e:	47a8      	blx	r5
	if (text_pos & TEXT_POS_CENTER_Y) {
  400b50:	f014 0f02 	tst.w	r4, #2
  400b54:	d01b      	beq.n	400b8e <gfx_draw_string_aligned+0x6a>
		y -= bounding_y / 2;
  400b56:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  400b5a:	2b00      	cmp	r3, #0
  400b5c:	bfb8      	it	lt
  400b5e:	3301      	addlt	r3, #1
  400b60:	eba8 0863 	sub.w	r8, r8, r3, asr #1
  400b64:	fa0f f888 	sxth.w	r8, r8
	if (text_pos & TEXT_POS_CENTER_X) {
  400b68:	f014 0f10 	tst.w	r4, #16
  400b6c:	d019      	beq.n	400ba2 <gfx_draw_string_aligned+0x7e>
		x -= bounding_x / 2;
  400b6e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
  400b72:	2b00      	cmp	r3, #0
  400b74:	bfb8      	it	lt
  400b76:	3301      	addlt	r3, #1
  400b78:	9a03      	ldr	r2, [sp, #12]
  400b7a:	eba2 0363 	sub.w	r3, r2, r3, asr #1
  400b7e:	b21b      	sxth	r3, r3
  400b80:	9303      	str	r3, [sp, #12]
	while (*str != '\0') {
  400b82:	7833      	ldrb	r3, [r6, #0]
  400b84:	2b00      	cmp	r3, #0
  400b86:	d06d      	beq.n	400c64 <gfx_draw_string_aligned+0x140>
				gfx_draw_char(*curr_line_text, curr_line_x, y,
  400b88:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 400c70 <gfx_draw_string_aligned+0x14c>
  400b8c:	e067      	b.n	400c5e <gfx_draw_string_aligned+0x13a>
	} else if (text_pos & TEXT_POS_BOTTOM) {
  400b8e:	f014 0f04 	tst.w	r4, #4
  400b92:	d0e9      	beq.n	400b68 <gfx_draw_string_aligned+0x44>
		y -= bounding_y;
  400b94:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  400b98:	eba8 0803 	sub.w	r8, r8, r3
  400b9c:	fa0f f888 	sxth.w	r8, r8
  400ba0:	e7e2      	b.n	400b68 <gfx_draw_string_aligned+0x44>
	} else if (text_pos & TEXT_POS_RIGHT) {
  400ba2:	f014 0f20 	tst.w	r4, #32
  400ba6:	d0ec      	beq.n	400b82 <gfx_draw_string_aligned+0x5e>
		x -= bounding_x;
  400ba8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  400bac:	9a03      	ldr	r2, [sp, #12]
  400bae:	1ad3      	subs	r3, r2, r3
  400bb0:	b21b      	sxth	r3, r3
  400bb2:	9303      	str	r3, [sp, #12]
  400bb4:	e7e5      	b.n	400b82 <gfx_draw_string_aligned+0x5e>
				str++;
  400bb6:	3501      	adds	r5, #1
		if (text_align == TEXT_ALIGN_CENTER) {
  400bb8:	9a02      	ldr	r2, [sp, #8]
  400bba:	2a02      	cmp	r2, #2
  400bbc:	d014      	beq.n	400be8 <gfx_draw_string_aligned+0xc4>
		} else if (text_align == TEXT_ALIGN_RIGHT) {
  400bbe:	9a02      	ldr	r2, [sp, #8]
  400bc0:	2a01      	cmp	r2, #1
  400bc2:	d024      	beq.n	400c0e <gfx_draw_string_aligned+0xea>
		gfx_coord_t curr_line_x = x;
  400bc4:	9c03      	ldr	r4, [sp, #12]
  400bc6:	464b      	mov	r3, r9
  400bc8:	46a9      	mov	r9, r5
  400bca:	461d      	mov	r5, r3
  400bcc:	e02c      	b.n	400c28 <gfx_draw_string_aligned+0x104>
		} while (*(++str) != '\0');
  400bce:	f815 2f01 	ldrb.w	r2, [r5, #1]!
  400bd2:	2a00      	cmp	r2, #0
  400bd4:	d0f0      	beq.n	400bb8 <gfx_draw_string_aligned+0x94>
			if (*str == '\n') {
  400bd6:	782a      	ldrb	r2, [r5, #0]
  400bd8:	2a0a      	cmp	r2, #10
  400bda:	d0ec      	beq.n	400bb6 <gfx_draw_string_aligned+0x92>
			} else if (*str != '\r') {
  400bdc:	2a0d      	cmp	r2, #13
  400bde:	d0f6      	beq.n	400bce <gfx_draw_string_aligned+0xaa>
				curr_line_width += font->width;
  400be0:	7a3a      	ldrb	r2, [r7, #8]
  400be2:	4413      	add	r3, r2
  400be4:	b21b      	sxth	r3, r3
  400be6:	e7f2      	b.n	400bce <gfx_draw_string_aligned+0xaa>
			curr_line_x += (bounding_x / 2) - (curr_line_width / 2);
  400be8:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
  400bec:	2a00      	cmp	r2, #0
  400bee:	bfb8      	it	lt
  400bf0:	3201      	addlt	r2, #1
  400bf2:	9903      	ldr	r1, [sp, #12]
  400bf4:	eb01 0462 	add.w	r4, r1, r2, asr #1
  400bf8:	461a      	mov	r2, r3
  400bfa:	2b00      	cmp	r3, #0
  400bfc:	bfb8      	it	lt
  400bfe:	1c5a      	addlt	r2, r3, #1
  400c00:	eba4 0462 	sub.w	r4, r4, r2, asr #1
  400c04:	b224      	sxth	r4, r4
  400c06:	464b      	mov	r3, r9
  400c08:	46a9      	mov	r9, r5
  400c0a:	461d      	mov	r5, r3
  400c0c:	e00c      	b.n	400c28 <gfx_draw_string_aligned+0x104>
			curr_line_x += bounding_x - curr_line_width;
  400c0e:	f8bd 4016 	ldrh.w	r4, [sp, #22]
  400c12:	9a03      	ldr	r2, [sp, #12]
  400c14:	4414      	add	r4, r2
  400c16:	1ae4      	subs	r4, r4, r3
  400c18:	b224      	sxth	r4, r4
  400c1a:	464b      	mov	r3, r9
  400c1c:	46a9      	mov	r9, r5
  400c1e:	461d      	mov	r5, r3
  400c20:	e002      	b.n	400c28 <gfx_draw_string_aligned+0x104>
		} while (*(++curr_line_text) != '\0');
  400c22:	f816 3f01 	ldrb.w	r3, [r6, #1]!
  400c26:	b17b      	cbz	r3, 400c48 <gfx_draw_string_aligned+0x124>
			if (*curr_line_text == '\n') {
  400c28:	7830      	ldrb	r0, [r6, #0]
  400c2a:	280a      	cmp	r0, #10
  400c2c:	d00c      	beq.n	400c48 <gfx_draw_string_aligned+0x124>
			} else if (*curr_line_text != '\r') {
  400c2e:	280d      	cmp	r0, #13
  400c30:	d0f7      	beq.n	400c22 <gfx_draw_string_aligned+0xfe>
				gfx_draw_char(*curr_line_text, curr_line_x, y,
  400c32:	f8cd a004 	str.w	sl, [sp, #4]
  400c36:	9500      	str	r5, [sp, #0]
  400c38:	463b      	mov	r3, r7
  400c3a:	4642      	mov	r2, r8
  400c3c:	4621      	mov	r1, r4
  400c3e:	47d8      	blx	fp
				curr_line_x += font->width;
  400c40:	7a3b      	ldrb	r3, [r7, #8]
  400c42:	441c      	add	r4, r3
  400c44:	b224      	sxth	r4, r4
  400c46:	e7ec      	b.n	400c22 <gfx_draw_string_aligned+0xfe>
  400c48:	462b      	mov	r3, r5
  400c4a:	464d      	mov	r5, r9
  400c4c:	4699      	mov	r9, r3
		y += font->height + 1;
  400c4e:	7a7b      	ldrb	r3, [r7, #9]
  400c50:	3301      	adds	r3, #1
  400c52:	4498      	add	r8, r3
  400c54:	fa0f f888 	sxth.w	r8, r8
	while (*str != '\0') {
  400c58:	782b      	ldrb	r3, [r5, #0]
  400c5a:	b11b      	cbz	r3, 400c64 <gfx_draw_string_aligned+0x140>
  400c5c:	462e      	mov	r6, r5
  400c5e:	4635      	mov	r5, r6
  400c60:	2300      	movs	r3, #0
  400c62:	e7b8      	b.n	400bd6 <gfx_draw_string_aligned+0xb2>
}
  400c64:	b007      	add	sp, #28
  400c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400c6a:	bf00      	nop
  400c6c:	00400ae9 	.word	0x00400ae9
  400c70:	00400a1d 	.word	0x00400a1d

00400c74 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400c76:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400c7a:	4b88      	ldr	r3, [pc, #544]	; (400e9c <board_init+0x228>)
  400c7c:	605a      	str	r2, [r3, #4]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400c7e:	f3bf 8f5f 	dmb	sy
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  400c82:	4f87      	ldr	r7, [pc, #540]	; (400ea0 <board_init+0x22c>)
  400c84:	4638      	mov	r0, r7
  400c86:	4d87      	ldr	r5, [pc, #540]	; (400ea4 <board_init+0x230>)
  400c88:	47a8      	blx	r5
	dw_region_attr =
  400c8a:	4e87      	ldr	r6, [pc, #540]	; (400ea8 <board_init+0x234>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  400c8c:	ea40 0106 	orr.w	r1, r0, r6
  400c90:	2011      	movs	r0, #17
  400c92:	4c86      	ldr	r4, [pc, #536]	; (400eac <board_init+0x238>)
  400c94:	47a0      	blx	r4
		mpu_cal_mpu_region_size(IFLASH_END_ADDRESS - IFLASH_START_ADDRESS) |
  400c96:	4886      	ldr	r0, [pc, #536]	; (400eb0 <board_init+0x23c>)
  400c98:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  400c9a:	4986      	ldr	r1, [pc, #536]	; (400eb4 <board_init+0x240>)
  400c9c:	4301      	orrs	r1, r0
  400c9e:	4886      	ldr	r0, [pc, #536]	; (400eb8 <board_init+0x244>)
  400ca0:	47a0      	blx	r4
		mpu_cal_mpu_region_size(DTCM_END_ADDRESS - DTCM_START_ADDRESS) |
  400ca2:	4638      	mov	r0, r7
  400ca4:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  400ca6:	ea40 0106 	orr.w	r1, r0, r6
  400caa:	4884      	ldr	r0, [pc, #528]	; (400ebc <board_init+0x248>)
  400cac:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SRAM_FIRST_END_ADDRESS - SRAM_FIRST_START_ADDRESS)
  400cae:	4884      	ldr	r0, [pc, #528]	; (400ec0 <board_init+0x24c>)
  400cb0:	47a8      	blx	r5
	dw_region_attr =
  400cb2:	f106 7608 	add.w	r6, r6, #35651584	; 0x2200000
  400cb6:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  400cba:	ea40 0106 	orr.w	r1, r0, r6
  400cbe:	4881      	ldr	r0, [pc, #516]	; (400ec4 <board_init+0x250>)
  400cc0:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SRAM_SECOND_END_ADDRESS - SRAM_SECOND_START_ADDRESS) |
  400cc2:	4881      	ldr	r0, [pc, #516]	; (400ec8 <board_init+0x254>)
  400cc4:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  400cc6:	ea40 0106 	orr.w	r1, r0, r6
  400cca:	4880      	ldr	r0, [pc, #512]	; (400ecc <board_init+0x258>)
  400ccc:	47a0      	blx	r4
		mpu_cal_mpu_region_size(PERIPHERALS_END_ADDRESS - PERIPHERALS_START_ADDRESS)
  400cce:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  400cd2:	47a8      	blx	r5
	dw_region_attr = MPU_AP_FULL_ACCESS |
  400cd4:	4e7e      	ldr	r6, [pc, #504]	; (400ed0 <board_init+0x25c>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  400cd6:	ea40 0106 	orr.w	r1, r0, r6
  400cda:	487e      	ldr	r0, [pc, #504]	; (400ed4 <board_init+0x260>)
  400cdc:	47a0      	blx	r4
		mpu_cal_mpu_region_size(EXT_EBI_END_ADDRESS - EXT_EBI_START_ADDRESS) |
  400cde:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  400ce2:	47a8      	blx	r5
	dw_region_attr =
  400ce4:	4f7c      	ldr	r7, [pc, #496]	; (400ed8 <board_init+0x264>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  400ce6:	ea40 0107 	orr.w	r1, r0, r7
  400cea:	487c      	ldr	r0, [pc, #496]	; (400edc <board_init+0x268>)
  400cec:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SDRAM_END_ADDRESS - SDRAM_START_ADDRESS) |
  400cee:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  400cf2:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  400cf4:	497a      	ldr	r1, [pc, #488]	; (400ee0 <board_init+0x26c>)
  400cf6:	4301      	orrs	r1, r0
  400cf8:	487a      	ldr	r0, [pc, #488]	; (400ee4 <board_init+0x270>)
  400cfa:	47a0      	blx	r4
		mpu_cal_mpu_region_size(QSPI_END_ADDRESS - QSPI_START_ADDRESS) |
  400cfc:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  400d00:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  400d02:	ea40 0107 	orr.w	r1, r0, r7
  400d06:	4878      	ldr	r0, [pc, #480]	; (400ee8 <board_init+0x274>)
  400d08:	47a0      	blx	r4
		mpu_cal_mpu_region_size(USBHSRAM_END_ADDRESS - USBHSRAM_START_ADDRESS) |
  400d0a:	4878      	ldr	r0, [pc, #480]	; (400eec <board_init+0x278>)
  400d0c:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  400d0e:	ea40 0106 	orr.w	r1, r0, r6
  400d12:	4877      	ldr	r0, [pc, #476]	; (400ef0 <board_init+0x27c>)
  400d14:	47a0      	blx	r4
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  400d16:	4c77      	ldr	r4, [pc, #476]	; (400ef4 <board_init+0x280>)
  400d18:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400d1a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
  400d1e:	6263      	str	r3, [r4, #36]	; 0x24
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  400d20:	2005      	movs	r0, #5
  400d22:	4b75      	ldr	r3, [pc, #468]	; (400ef8 <board_init+0x284>)
  400d24:	4798      	blx	r3
  __ASM volatile ("dsb");
  400d26:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400d2a:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400d2e:	4b73      	ldr	r3, [pc, #460]	; (400efc <board_init+0x288>)
  400d30:	4a73      	ldr	r2, [pc, #460]	; (400f00 <board_init+0x28c>)
  400d32:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400d34:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
  400d38:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  400d3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400d3e:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400d42:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  400d46:	f023 0301 	bic.w	r3, r3, #1
  400d4a:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400d4e:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
  400d52:	f023 0301 	bic.w	r3, r3, #1
  400d56:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  __ASM volatile ("dsb");
  400d5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400d5e:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400d62:	200a      	movs	r0, #10
  400d64:	4c67      	ldr	r4, [pc, #412]	; (400f04 <board_init+0x290>)
  400d66:	47a0      	blx	r4
  400d68:	200b      	movs	r0, #11
  400d6a:	47a0      	blx	r4
  400d6c:	200c      	movs	r0, #12
  400d6e:	47a0      	blx	r4
  400d70:	2010      	movs	r0, #16
  400d72:	47a0      	blx	r4
  400d74:	2011      	movs	r0, #17
  400d76:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400d78:	4c63      	ldr	r4, [pc, #396]	; (400f08 <board_init+0x294>)
  400d7a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  400d7e:	6123      	str	r3, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d80:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400d84:	6323      	str	r3, [r4, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400d86:	4e61      	ldr	r6, [pc, #388]	; (400f0c <board_init+0x298>)
  400d88:	f44f 7500 	mov.w	r5, #512	; 0x200
  400d8c:	6135      	str	r5, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d8e:	f8c6 50a0 	str.w	r5, [r6, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400d92:	6335      	str	r5, [r6, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400d94:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d96:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  400d9a:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400d9c:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400da0:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  400da2:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  400da4:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400da8:	6f23      	ldr	r3, [r4, #112]	; 0x70
  400daa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  400dae:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400db0:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400db2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  400db6:	6763      	str	r3, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400db8:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400dbc:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400dc0:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400dc4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  400dc8:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400dca:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400dce:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400dd0:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400dd2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400dd6:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400dd8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400ddc:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400dde:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400de0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400de4:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400de6:	6063      	str	r3, [r4, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400de8:	4a49      	ldr	r2, [pc, #292]	; (400f10 <board_init+0x29c>)
  400dea:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400dee:	f043 0310 	orr.w	r3, r3, #16
  400df2:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400df6:	4b47      	ldr	r3, [pc, #284]	; (400f14 <board_init+0x2a0>)
  400df8:	2210      	movs	r2, #16
  400dfa:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400dfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400e00:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400e02:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400e04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400e08:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400e0a:	4311      	orrs	r1, r2
  400e0c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400e0e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400e10:	4311      	orrs	r1, r2
  400e12:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400e14:	605a      	str	r2, [r3, #4]
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  400e16:	2300      	movs	r3, #0
  400e18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400e1c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400e20:	4630      	mov	r0, r6
  400e22:	4f3d      	ldr	r7, [pc, #244]	; (400f18 <board_init+0x2a4>)
  400e24:	47b8      	blx	r7
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  400e26:	2300      	movs	r3, #0
  400e28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400e2c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400e30:	4630      	mov	r0, r6
  400e32:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  400e34:	2301      	movs	r3, #1
  400e36:	22ff      	movs	r2, #255	; 0xff
  400e38:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400e3c:	4630      	mov	r0, r6
  400e3e:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  400e40:	2301      	movs	r3, #1
  400e42:	223f      	movs	r2, #63	; 0x3f
  400e44:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400e48:	4834      	ldr	r0, [pc, #208]	; (400f1c <board_init+0x2a8>)
  400e4a:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  400e4c:	2301      	movs	r3, #1
  400e4e:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  400e52:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400e56:	4620      	mov	r0, r4
  400e58:	47b8      	blx	r7
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  400e5a:	2301      	movs	r3, #1
  400e5c:	f44f 7280 	mov.w	r2, #256	; 0x100
  400e60:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400e64:	4630      	mov	r0, r6
  400e66:	47b8      	blx	r7
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  400e68:	2301      	movs	r3, #1
  400e6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400e6e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400e72:	4630      	mov	r0, r6
  400e74:	47b8      	blx	r7
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  400e76:	2301      	movs	r3, #1
  400e78:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400e7c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400e80:	4827      	ldr	r0, [pc, #156]	; (400f20 <board_init+0x2ac>)
  400e82:	47b8      	blx	r7
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  400e84:	2300      	movs	r3, #0
  400e86:	462a      	mov	r2, r5
  400e88:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400e8c:	4630      	mov	r0, r6
  400e8e:	47b8      	blx	r7
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  400e90:	4629      	mov	r1, r5
  400e92:	4630      	mov	r0, r6
  400e94:	4b23      	ldr	r3, [pc, #140]	; (400f24 <board_init+0x2b0>)
  400e96:	4798      	blx	r3
  400e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e9a:	bf00      	nop
  400e9c:	400e1850 	.word	0x400e1850
  400ea0:	003fffff 	.word	0x003fffff
  400ea4:	00401431 	.word	0x00401431
  400ea8:	01000001 	.word	0x01000001
  400eac:	00401425 	.word	0x00401425
  400eb0:	001fffff 	.word	0x001fffff
  400eb4:	06230001 	.word	0x06230001
  400eb8:	00400012 	.word	0x00400012
  400ebc:	20000013 	.word	0x20000013
  400ec0:	0003ffff 	.word	0x0003ffff
  400ec4:	20400014 	.word	0x20400014
  400ec8:	0001ffff 	.word	0x0001ffff
  400ecc:	20440015 	.word	0x20440015
  400ed0:	13010001 	.word	0x13010001
  400ed4:	40000016 	.word	0x40000016
  400ed8:	03000001 	.word	0x03000001
  400edc:	60000017 	.word	0x60000017
  400ee0:	03250001 	.word	0x03250001
  400ee4:	70000018 	.word	0x70000018
  400ee8:	80000019 	.word	0x80000019
  400eec:	000fffff 	.word	0x000fffff
  400ef0:	a010001a 	.word	0xa010001a
  400ef4:	e000ed00 	.word	0xe000ed00
  400ef8:	00401419 	.word	0x00401419
  400efc:	400e0c00 	.word	0x400e0c00
  400f00:	5a00080c 	.word	0x5a00080c
  400f04:	004017b1 	.word	0x004017b1
  400f08:	400e0e00 	.word	0x400e0e00
  400f0c:	400e1200 	.word	0x400e1200
  400f10:	40088000 	.word	0x40088000
  400f14:	400e1000 	.word	0x400e1000
  400f18:	00401545 	.word	0x00401545
  400f1c:	400e1600 	.word	0x400e1600
  400f20:	400e1400 	.word	0x400e1400
  400f24:	0040144d 	.word	0x0040144d

00400f28 <ili9488_write_ram_prepare>:

/**
 * \brief Prepare to write GRAM data.
 */
static void ili9488_write_ram_prepare(void)
{
  400f28:	b508      	push	{r3, lr}
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  400f2a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400f2e:	4804      	ldr	r0, [pc, #16]	; (400f40 <ili9488_write_ram_prepare+0x18>)
  400f30:	4b04      	ldr	r3, [pc, #16]	; (400f44 <ili9488_write_ram_prepare+0x1c>)
  400f32:	4798      	blx	r3

/* Define EBI access for ILI9488 16-bit System Interface.*/
#ifdef ILI9488_EBIMODE
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  400f34:	222c      	movs	r2, #44	; 0x2c
  400f36:	f04f 43c6 	mov.w	r3, #1660944384	; 0x63000000
  400f3a:	801a      	strh	r2, [r3, #0]
  400f3c:	bd08      	pop	{r3, pc}
  400f3e:	bf00      	nop
  400f40:	400e1200 	.word	0x400e1200
  400f44:	00401451 	.word	0x00401451

00400f48 <ili9488_write_register>:
 * \param uc_reg register address.
 * \param us_data data to be written.
 * \param size the number of parameters.
 */
static void ili9488_write_register(uint8_t uc_reg, const ili9488_color_t *us_data, uint32_t size)
{
  400f48:	b570      	push	{r4, r5, r6, lr}
  400f4a:	4606      	mov	r6, r0
  400f4c:	460d      	mov	r5, r1
  400f4e:	4614      	mov	r4, r2
	/* CDS pin is set low level when writing command*/
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  400f50:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400f54:	480c      	ldr	r0, [pc, #48]	; (400f88 <ili9488_write_register+0x40>)
  400f56:	4b0d      	ldr	r3, [pc, #52]	; (400f8c <ili9488_write_register+0x44>)
  400f58:	4798      	blx	r3
  400f5a:	b2b6      	uxth	r6, r6
  400f5c:	f04f 43c6 	mov.w	r3, #1660944384	; 0x63000000
  400f60:	801e      	strh	r6, [r3, #0]
	LCD_IR(uc_reg);

	if(size == 0) {
  400f62:	b904      	cbnz	r4, 400f66 <ili9488_write_register+0x1e>
  400f64:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	/* CDS pin is set high level when writing parameters or image data*/
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  400f66:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400f6a:	4807      	ldr	r0, [pc, #28]	; (400f88 <ili9488_write_register+0x40>)
  400f6c:	4b08      	ldr	r3, [pc, #32]	; (400f90 <ili9488_write_register+0x48>)
  400f6e:	4798      	blx	r3
	{
		*(volatile uint16_t *)(BOARD_ILI9488_ADDR) = lcd_data;
	}
	static inline void LCD_MULTI_WD(const uint16_t *lcd_data, uint32_t size)
	{
		while(size--) {
  400f70:	1e62      	subs	r2, r4, #1
			*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = *lcd_data++;
  400f72:	f04f 41c6 	mov.w	r1, #1660944384	; 0x63000000
  400f76:	f835 3b02 	ldrh.w	r3, [r5], #2
  400f7a:	800b      	strh	r3, [r1, #0]
		while(size--) {
  400f7c:	3a01      	subs	r2, #1
  400f7e:	f1b2 3fff 	cmp.w	r2, #4294967295
  400f82:	d1f8      	bne.n	400f76 <ili9488_write_register+0x2e>
  400f84:	e7ee      	b.n	400f64 <ili9488_write_register+0x1c>
  400f86:	bf00      	nop
  400f88:	400e1200 	.word	0x400e1200
  400f8c:	00401451 	.word	0x00401451
  400f90:	0040144d 	.word	0x0040144d

00400f94 <ili9488_delay>:
 */
void ili9488_delay(uint32_t ul_ms)
{
	uint32_t i;

	for(i = 0; i < ul_ms; i++) {
  400f94:	4601      	mov	r1, r0
  400f96:	b130      	cbz	r0, 400fa6 <ili9488_delay+0x12>
  400f98:	4a03      	ldr	r2, [pc, #12]	; (400fa8 <ili9488_delay+0x14>)
{
  400f9a:	4b04      	ldr	r3, [pc, #16]	; (400fac <ili9488_delay+0x18>)
		for(i = 0; i < 100000; i++) {
  400f9c:	3b01      	subs	r3, #1
  400f9e:	d1fd      	bne.n	400f9c <ili9488_delay+0x8>
	for(i = 0; i < ul_ms; i++) {
  400fa0:	4291      	cmp	r1, r2
  400fa2:	d8fa      	bhi.n	400f9a <ili9488_delay+0x6>
  400fa4:	4770      	bx	lr
  400fa6:	4770      	bx	lr
  400fa8:	000186a1 	.word	0x000186a1
  400fac:	000186a0 	.word	0x000186a0

00400fb0 <ili9488_set_display_direction>:
 * \brief ILI9488 configure landscape.
 *
 * \Param LandscaprMode Landscape Mode.
 */
void ili9488_set_display_direction(enum ili9488_display_direction direction )
{
  400fb0:	b500      	push	{lr}
  400fb2:	b083      	sub	sp, #12
	ili9488_color_t value;
	if(direction) {
  400fb4:	b958      	cbnz	r0, 400fce <ili9488_set_display_direction+0x1e>
		value = 0xE8;
	} else {
		value = 0x48;
  400fb6:	2348      	movs	r3, #72	; 0x48
  400fb8:	f8ad 3006 	strh.w	r3, [sp, #6]
	}
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &value, 1);
  400fbc:	2201      	movs	r2, #1
  400fbe:	f10d 0106 	add.w	r1, sp, #6
  400fc2:	2036      	movs	r0, #54	; 0x36
  400fc4:	4b04      	ldr	r3, [pc, #16]	; (400fd8 <ili9488_set_display_direction+0x28>)
  400fc6:	4798      	blx	r3
}
  400fc8:	b003      	add	sp, #12
  400fca:	f85d fb04 	ldr.w	pc, [sp], #4
		value = 0xE8;
  400fce:	23e8      	movs	r3, #232	; 0xe8
  400fd0:	f8ad 3006 	strh.w	r3, [sp, #6]
  400fd4:	e7f2      	b.n	400fbc <ili9488_set_display_direction+0xc>
  400fd6:	bf00      	nop
  400fd8:	00400f49 	.word	0x00400f49

00400fdc <ili9488_set_window>:
 * \Param y start position.
 * \Param width  Width of window.
 * \Param height Height of window.
 */
void ili9488_set_window(uint16_t x, uint16_t y, uint16_t width, uint16_t height )
{
  400fdc:	b510      	push	{r4, lr}
  400fde:	b084      	sub	sp, #16
	uint32_t cnt = 0;
	ili9488_color_t buf[4];

	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	col_start  =  x ;
  400fe0:	f8ad 000e 	strh.w	r0, [sp, #14]
	col_end    =  width + x - 1;
  400fe4:	3a01      	subs	r2, #1
  400fe6:	4402      	add	r2, r0
  400fe8:	f8ad 200c 	strh.w	r2, [sp, #12]

	row_start = y ;
  400fec:	f8ad 100a 	strh.w	r1, [sp, #10]
	row_end   = height + y - 1;
  400ff0:	3b01      	subs	r3, #1
  400ff2:	4419      	add	r1, r3
  400ff4:	f8ad 1008 	strh.w	r1, [sp, #8]

	buf[0] = get_8b_to_16b(col_start);
  400ff8:	0a03      	lsrs	r3, r0, #8
  400ffa:	f8ad 3000 	strh.w	r3, [sp]
	buf[1] = get_0b_to_8b(col_start);
  400ffe:	b2c0      	uxtb	r0, r0
  401000:	f8ad 0002 	strh.w	r0, [sp, #2]
	buf[2] = get_8b_to_16b(col_end);
  401004:	f3c2 2307 	ubfx	r3, r2, #8, #8
  401008:	f8ad 3004 	strh.w	r3, [sp, #4]
	buf[3] = get_0b_to_8b(col_end);
  40100c:	b2d2      	uxtb	r2, r2
  40100e:	f8ad 2006 	strh.w	r2, [sp, #6]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  401012:	2204      	movs	r2, #4
  401014:	4669      	mov	r1, sp
  401016:	202a      	movs	r0, #42	; 0x2a
  401018:	4c0f      	ldr	r4, [pc, #60]	; (401058 <ili9488_set_window+0x7c>)
  40101a:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  40101c:	2200      	movs	r2, #0
  40101e:	4611      	mov	r1, r2
  401020:	4610      	mov	r0, r2
  401022:	47a0      	blx	r4

	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(row_start);
  401024:	f89d 300b 	ldrb.w	r3, [sp, #11]
  401028:	f8ad 3000 	strh.w	r3, [sp]
	buf[1] = get_0b_to_8b(row_start);
  40102c:	f89d 300a 	ldrb.w	r3, [sp, #10]
  401030:	f8ad 3002 	strh.w	r3, [sp, #2]
	buf[2] = get_8b_to_16b(row_end);
  401034:	f89d 3009 	ldrb.w	r3, [sp, #9]
  401038:	f8ad 3004 	strh.w	r3, [sp, #4]
	buf[3] = get_0b_to_8b(row_end);
  40103c:	f89d 3008 	ldrb.w	r3, [sp, #8]
  401040:	f8ad 3006 	strh.w	r3, [sp, #6]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  401044:	2204      	movs	r2, #4
  401046:	4669      	mov	r1, sp
  401048:	202b      	movs	r0, #43	; 0x2b
  40104a:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  40104c:	2200      	movs	r2, #0
  40104e:	4611      	mov	r1, r2
  401050:	4610      	mov	r0, r2
  401052:	47a0      	blx	r4
}
  401054:	b004      	add	sp, #16
  401056:	bd10      	pop	{r4, pc}
  401058:	00400f49 	.word	0x00400f49

0040105c <ili9488_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9488_display_on(void)
{
  40105c:	b508      	push	{r3, lr}
	ili9488_write_register(ILI9488_CMD_DISPLAY_ON, 0, 0);
  40105e:	2200      	movs	r2, #0
  401060:	4611      	mov	r1, r2
  401062:	2029      	movs	r0, #41	; 0x29
  401064:	4b01      	ldr	r3, [pc, #4]	; (40106c <ili9488_display_on+0x10>)
  401066:	4798      	blx	r3
  401068:	bd08      	pop	{r3, pc}
  40106a:	bf00      	nop
  40106c:	00400f49 	.word	0x00400f49

00401070 <ili9488_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili9488_set_foreground_color(uint32_t ul_color)
{
  401070:	4a04      	ldr	r2, [pc, #16]	; (401084 <ili9488_set_foreground_color+0x14>)
  401072:	1e93      	subs	r3, r2, #2
  401074:	f202 227e 	addw	r2, r2, #638	; 0x27e
	uint32_t i;
#ifdef ILI9488_EBIMODE
	/* Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
		g_ul_pixel_cache[i] = ul_color;
  401078:	f823 0f02 	strh.w	r0, [r3, #2]!
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
  40107c:	4293      	cmp	r3, r2
  40107e:	d1fb      	bne.n	401078 <ili9488_set_foreground_color+0x8>
		g_ul_pixel_cache[i++] = ul_color>>16;
		g_ul_pixel_cache[i++] = ul_color>>8;
		g_ul_pixel_cache[i++] = ul_color&0xFF;
	}
#endif
}
  401080:	4770      	bx	lr
  401082:	bf00      	nop
  401084:	2040047c 	.word	0x2040047c

00401088 <ili9488_set_cursor_position>:
 *
 * \param x X coordinate of upper-left corner on LCD.
 * \param y Y coordinate of upper-left corner on LCD.
 */
void ili9488_set_cursor_position(uint16_t x, uint16_t y)
{
  401088:	b510      	push	{r4, lr}
  40108a:	b084      	sub	sp, #16
  40108c:	f8ad 0006 	strh.w	r0, [sp, #6]
  401090:	f8ad 1004 	strh.w	r1, [sp, #4]
	uint32_t cnt = 0;

	ili9488_color_t buf[4];
	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	buf[0] = get_8b_to_16b(x);
  401094:	0a03      	lsrs	r3, r0, #8
  401096:	f8ad 3008 	strh.w	r3, [sp, #8]
	buf[1] = get_0b_to_8b(x);
  40109a:	b2c0      	uxtb	r0, r0
  40109c:	f8ad 000a 	strh.w	r0, [sp, #10]
	buf[2] = get_8b_to_16b(x);
  4010a0:	f8ad 300c 	strh.w	r3, [sp, #12]
	buf[3] = get_0b_to_8b(x);
  4010a4:	f8ad 000e 	strh.w	r0, [sp, #14]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  4010a8:	2204      	movs	r2, #4
  4010aa:	a902      	add	r1, sp, #8
  4010ac:	202a      	movs	r0, #42	; 0x2a
  4010ae:	4c0e      	ldr	r4, [pc, #56]	; (4010e8 <ili9488_set_cursor_position+0x60>)
  4010b0:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  4010b2:	2200      	movs	r2, #0
  4010b4:	4611      	mov	r1, r2
  4010b6:	4610      	mov	r0, r2
  4010b8:	47a0      	blx	r4


	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(y);
  4010ba:	f89d 2005 	ldrb.w	r2, [sp, #5]
  4010be:	f8ad 2008 	strh.w	r2, [sp, #8]
	buf[1] = get_0b_to_8b(y);
  4010c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  4010c6:	f8ad 300a 	strh.w	r3, [sp, #10]
	buf[2] = get_8b_to_16b(y);
  4010ca:	f8ad 200c 	strh.w	r2, [sp, #12]
	buf[3] = get_0b_to_8b(y);
  4010ce:	f8ad 300e 	strh.w	r3, [sp, #14]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  4010d2:	2204      	movs	r2, #4
  4010d4:	a902      	add	r1, sp, #8
  4010d6:	202b      	movs	r0, #43	; 0x2b
  4010d8:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  4010da:	2200      	movs	r2, #0
  4010dc:	4611      	mov	r1, r2
  4010de:	4610      	mov	r0, r2
  4010e0:	47a0      	blx	r4
}
  4010e2:	b004      	add	sp, #16
  4010e4:	bd10      	pop	{r4, pc}
  4010e6:	bf00      	nop
  4010e8:	00400f49 	.word	0x00400f49

004010ec <ili9488_init>:
{
  4010ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  4010ee:	b085      	sub	sp, #20
  4010f0:	4604      	mov	r4, r0
	pmc_enable_periph_clk(ID_SMC);
  4010f2:	2009      	movs	r0, #9
  4010f4:	4b46      	ldr	r3, [pc, #280]	; (401210 <ili9488_init+0x124>)
  4010f6:	4798      	blx	r3
	smc_set_setup_timing(SMC, BOARD_ILI9488_EBI_NPCS, SMC_SETUP_NWE_SETUP(0)
  4010f8:	4d46      	ldr	r5, [pc, #280]	; (401214 <ili9488_init+0x128>)
  4010fa:	2200      	movs	r2, #0
  4010fc:	2103      	movs	r1, #3
  4010fe:	4628      	mov	r0, r5
  401100:	4b45      	ldr	r3, [pc, #276]	; (401218 <ili9488_init+0x12c>)
  401102:	4798      	blx	r3
	smc_set_pulse_timing(SMC, BOARD_ILI9488_EBI_NPCS , SMC_PULSE_NWE_PULSE(3)
  401104:	4a45      	ldr	r2, [pc, #276]	; (40121c <ili9488_init+0x130>)
  401106:	2103      	movs	r1, #3
  401108:	4628      	mov	r0, r5
  40110a:	4b45      	ldr	r3, [pc, #276]	; (401220 <ili9488_init+0x134>)
  40110c:	4798      	blx	r3
	smc_set_cycle_timing(SMC, BOARD_ILI9488_EBI_NPCS, SMC_CYCLE_NWE_CYCLE(0x4)
  40110e:	4a45      	ldr	r2, [pc, #276]	; (401224 <ili9488_init+0x138>)
  401110:	2103      	movs	r1, #3
  401112:	4628      	mov	r0, r5
  401114:	4b44      	ldr	r3, [pc, #272]	; (401228 <ili9488_init+0x13c>)
  401116:	4798      	blx	r3
	smc_set_mode(SMC, BOARD_ILI9488_EBI_NPCS, SMC_MODE_READ_MODE
  401118:	4a44      	ldr	r2, [pc, #272]	; (40122c <ili9488_init+0x140>)
  40111a:	2103      	movs	r1, #3
  40111c:	4628      	mov	r0, r5
  40111e:	4b44      	ldr	r3, [pc, #272]	; (401230 <ili9488_init+0x144>)
  401120:	4798      	blx	r3
	ili9488_write_register(ILI9488_CMD_SOFTWARE_RESET, 0x0000, 0);
  401122:	2200      	movs	r2, #0
  401124:	4611      	mov	r1, r2
  401126:	2001      	movs	r0, #1
  401128:	4e42      	ldr	r6, [pc, #264]	; (401234 <ili9488_init+0x148>)
  40112a:	47b0      	blx	r6
	ili9488_delay(200);
  40112c:	20c8      	movs	r0, #200	; 0xc8
  40112e:	4d42      	ldr	r5, [pc, #264]	; (401238 <ili9488_init+0x14c>)
  401130:	47a8      	blx	r5
	ili9488_write_register(ILI9488_CMD_SLEEP_OUT, 0x0000, 0);
  401132:	2200      	movs	r2, #0
  401134:	4611      	mov	r1, r2
  401136:	2011      	movs	r0, #17
  401138:	47b0      	blx	r6
	ili9488_delay(200);
  40113a:	20c8      	movs	r0, #200	; 0xc8
  40113c:	47a8      	blx	r5
	pio_clear(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  40113e:	4e3f      	ldr	r6, [pc, #252]	; (40123c <ili9488_init+0x150>)
  401140:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401144:	4630      	mov	r0, r6
  401146:	4b3e      	ldr	r3, [pc, #248]	; (401240 <ili9488_init+0x154>)
  401148:	4798      	blx	r3
		*((volatile uint16_t *)(BOARD_ILI9488_ADDR)) = lcd_index; /* ILI9488 index register address */
  40114a:	f04f 45c6 	mov.w	r5, #1660944384	; 0x63000000
  40114e:	23d3      	movs	r3, #211	; 0xd3
  401150:	802b      	strh	r3, [r5, #0]
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  401152:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401156:	4630      	mov	r0, r6
  401158:	4b3a      	ldr	r3, [pc, #232]	; (401244 <ili9488_init+0x158>)
  40115a:	4798      	blx	r3
		return *(volatile uint16_t *)(BOARD_ILI9488_ADDR);
	}
	static inline void LCD_MULTI_RD(uint16_t *pbuffer, uint32_t size)
	{
		while(size--) {
			*pbuffer++ = *((volatile uint16_t *)(BOARD_ILI9488_ADDR));
  40115c:	882b      	ldrh	r3, [r5, #0]
  40115e:	f8ad 3004 	strh.w	r3, [sp, #4]
  401162:	8829      	ldrh	r1, [r5, #0]
  401164:	b289      	uxth	r1, r1
  401166:	f8ad 1006 	strh.w	r1, [sp, #6]
  40116a:	882b      	ldrh	r3, [r5, #0]
  40116c:	b29b      	uxth	r3, r3
  40116e:	f8ad 3008 	strh.w	r3, [sp, #8]
  401172:	882a      	ldrh	r2, [r5, #0]
  401174:	b292      	uxth	r2, r2
  401176:	f8ad 200a 	strh.w	r2, [sp, #10]
  40117a:	8828      	ldrh	r0, [r5, #0]
		chipid |= (*ptr &0xFF)<< (shift_cnt << 3);
  40117c:	b2c9      	uxtb	r1, r1
  40117e:	b2db      	uxtb	r3, r3
  401180:	021b      	lsls	r3, r3, #8
  401182:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  401186:	b2d2      	uxtb	r2, r2
  401188:	4313      	orrs	r3, r2
	if (chipid != ILI9488_DEVICE_CODE) {
  40118a:	f249 4288 	movw	r2, #38024	; 0x9488
  40118e:	4293      	cmp	r3, r2
  401190:	d002      	beq.n	401198 <ili9488_init+0xac>
		return 1;
  401192:	2001      	movs	r0, #1
}
  401194:	b005      	add	sp, #20
  401196:	bdf0      	pop	{r4, r5, r6, r7, pc}
	param = 0x48;
  401198:	ae04      	add	r6, sp, #16
  40119a:	2348      	movs	r3, #72	; 0x48
  40119c:	f826 3d02 	strh.w	r3, [r6, #-2]!
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &param, 1);
  4011a0:	2201      	movs	r2, #1
  4011a2:	4631      	mov	r1, r6
  4011a4:	2036      	movs	r0, #54	; 0x36
  4011a6:	4f23      	ldr	r7, [pc, #140]	; (401234 <ili9488_init+0x148>)
  4011a8:	47b8      	blx	r7
	ili9488_delay(100);
  4011aa:	2064      	movs	r0, #100	; 0x64
  4011ac:	4d22      	ldr	r5, [pc, #136]	; (401238 <ili9488_init+0x14c>)
  4011ae:	47a8      	blx	r5
	param = 0x04;
  4011b0:	2304      	movs	r3, #4
  4011b2:	f8ad 300e 	strh.w	r3, [sp, #14]
	ili9488_write_register(ILI9488_CMD_CABC_CONTROL_9, &param, 1);
  4011b6:	2201      	movs	r2, #1
  4011b8:	4631      	mov	r1, r6
  4011ba:	20cf      	movs	r0, #207	; 0xcf
  4011bc:	47b8      	blx	r7
	ili9488_delay(100);
  4011be:	2064      	movs	r0, #100	; 0x64
  4011c0:	47a8      	blx	r5
	param = 0x05;
  4011c2:	2305      	movs	r3, #5
  4011c4:	f8ad 300e 	strh.w	r3, [sp, #14]
	ili9488_write_register(ILI9488_CMD_COLMOD_PIXEL_FORMAT_SET, &param, 1);
  4011c8:	2201      	movs	r2, #1
  4011ca:	4631      	mov	r1, r6
  4011cc:	203a      	movs	r0, #58	; 0x3a
  4011ce:	47b8      	blx	r7
	ili9488_delay(100);
  4011d0:	2064      	movs	r0, #100	; 0x64
  4011d2:	47a8      	blx	r5
	ili9488_write_register(ILI9488_CMD_PARTIAL_MODE_ON, 0, 0);
  4011d4:	2200      	movs	r2, #0
  4011d6:	4611      	mov	r1, r2
  4011d8:	2012      	movs	r0, #18
  4011da:	47b8      	blx	r7
	ili9488_delay(100);
  4011dc:	2064      	movs	r0, #100	; 0x64
  4011de:	47a8      	blx	r5
	ili9488_display_on();
  4011e0:	4b19      	ldr	r3, [pc, #100]	; (401248 <ili9488_init+0x15c>)
  4011e2:	4798      	blx	r3
	ili9488_delay(100);
  4011e4:	2064      	movs	r0, #100	; 0x64
  4011e6:	47a8      	blx	r5
	ili9488_set_display_direction(LANDSCAPE);
  4011e8:	2000      	movs	r0, #0
  4011ea:	4b18      	ldr	r3, [pc, #96]	; (40124c <ili9488_init+0x160>)
  4011ec:	4798      	blx	r3
	ili9488_delay(100);
  4011ee:	2064      	movs	r0, #100	; 0x64
  4011f0:	47a8      	blx	r5
	ili9488_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  4011f2:	88a3      	ldrh	r3, [r4, #4]
  4011f4:	8822      	ldrh	r2, [r4, #0]
  4011f6:	2100      	movs	r1, #0
  4011f8:	4608      	mov	r0, r1
  4011fa:	4d15      	ldr	r5, [pc, #84]	; (401250 <ili9488_init+0x164>)
  4011fc:	47a8      	blx	r5
	ili9488_set_foreground_color(p_opt->foreground_color);
  4011fe:	68a0      	ldr	r0, [r4, #8]
  401200:	4b14      	ldr	r3, [pc, #80]	; (401254 <ili9488_init+0x168>)
  401202:	4798      	blx	r3
	ili9488_set_cursor_position(0, 0);
  401204:	2100      	movs	r1, #0
  401206:	4608      	mov	r0, r1
  401208:	4b13      	ldr	r3, [pc, #76]	; (401258 <ili9488_init+0x16c>)
  40120a:	4798      	blx	r3
	return 0;
  40120c:	2000      	movs	r0, #0
  40120e:	e7c1      	b.n	401194 <ili9488_init+0xa8>
  401210:	004017b1 	.word	0x004017b1
  401214:	40080000 	.word	0x40080000
  401218:	004013f9 	.word	0x004013f9
  40121c:	0a0a0403 	.word	0x0a0a0403
  401220:	004013ff 	.word	0x004013ff
  401224:	000a0004 	.word	0x000a0004
  401228:	00401407 	.word	0x00401407
  40122c:	000f1003 	.word	0x000f1003
  401230:	0040140f 	.word	0x0040140f
  401234:	00400f49 	.word	0x00400f49
  401238:	00400f95 	.word	0x00400f95
  40123c:	400e1200 	.word	0x400e1200
  401240:	00401451 	.word	0x00401451
  401244:	0040144d 	.word	0x0040144d
  401248:	0040105d 	.word	0x0040105d
  40124c:	00400fb1 	.word	0x00400fb1
  401250:	00400fdd 	.word	0x00400fdd
  401254:	00401071 	.word	0x00401071
  401258:	00401089 	.word	0x00401089

0040125c <ili9488_set_top_left_limit>:
 * \param x The x coordinate of the top left corner
 * \param y The y coordinate of the top left corner
 */
void ili9488_set_top_left_limit(ili9488_coord_t x, ili9488_coord_t y)
{
	limit_start_x = x;
  40125c:	4b02      	ldr	r3, [pc, #8]	; (401268 <ili9488_set_top_left_limit+0xc>)
  40125e:	8018      	strh	r0, [r3, #0]
	limit_start_y = y;
  401260:	4b02      	ldr	r3, [pc, #8]	; (40126c <ili9488_set_top_left_limit+0x10>)
  401262:	8019      	strh	r1, [r3, #0]
  401264:	4770      	bx	lr
  401266:	bf00      	nop
  401268:	20400700 	.word	0x20400700
  40126c:	20400702 	.word	0x20400702

00401270 <ili9488_set_bottom_right_limit>:
 * \param x The x coordinate of the bottom right corner
 * \param y The y coordinate of the bottom right corner
 */
void ili9488_set_bottom_right_limit(ili9488_coord_t x, ili9488_coord_t y)
{
	limit_end_x = x;
  401270:	4b02      	ldr	r3, [pc, #8]	; (40127c <ili9488_set_bottom_right_limit+0xc>)
  401272:	8018      	strh	r0, [r3, #0]
	limit_end_y = y;
  401274:	4b02      	ldr	r3, [pc, #8]	; (401280 <ili9488_set_bottom_right_limit+0x10>)
  401276:	8019      	strh	r1, [r3, #0]
  401278:	4770      	bx	lr
  40127a:	bf00      	nop
  40127c:	204006fc 	.word	0x204006fc
  401280:	204006fe 	.word	0x204006fe

00401284 <ili9488_set_limits>:
 * \param end_x The x coordinate of the bottom right corner
 * \param end_y The y coordinate of the bottom right corner
 */
void ili9488_set_limits(ili9488_coord_t start_x, ili9488_coord_t start_y,
		ili9488_coord_t end_x, ili9488_coord_t end_y)
{
  401284:	b410      	push	{r4}
	limit_start_x = start_x;
  401286:	4c05      	ldr	r4, [pc, #20]	; (40129c <ili9488_set_limits+0x18>)
  401288:	8020      	strh	r0, [r4, #0]
	limit_start_y = start_y;
  40128a:	4805      	ldr	r0, [pc, #20]	; (4012a0 <ili9488_set_limits+0x1c>)
  40128c:	8001      	strh	r1, [r0, #0]
	limit_end_x = end_x;
  40128e:	4905      	ldr	r1, [pc, #20]	; (4012a4 <ili9488_set_limits+0x20>)
  401290:	800a      	strh	r2, [r1, #0]
	limit_end_y = end_y;
  401292:	4a05      	ldr	r2, [pc, #20]	; (4012a8 <ili9488_set_limits+0x24>)
  401294:	8013      	strh	r3, [r2, #0]
}
  401296:	f85d 4b04 	ldr.w	r4, [sp], #4
  40129a:	4770      	bx	lr
  40129c:	20400700 	.word	0x20400700
  4012a0:	20400702 	.word	0x20400702
  4012a4:	204006fc 	.word	0x204006fc
  4012a8:	204006fe 	.word	0x204006fe

004012ac <ili9488_set_orientation>:
 *
 * \param flags Orientation flags to use, see \ref ILI9488_FLIP_X, \ref ILI9488_FLIP_Y
 *        and \ref ILI9488_SWITCH_XY.
 */
void ili9488_set_orientation(uint8_t flags)
{
  4012ac:	b500      	push	{lr}
  4012ae:	b083      	sub	sp, #12
	/* Flip X/Y and reverse X orientation and set BGR mode*/
	ili9488_color_t madctl = 0x68;

	if (flags & ILI9488_FLIP_X) {
  4012b0:	f010 0f01 	tst.w	r0, #1
	ili9488_color_t madctl = 0x68;
  4012b4:	bf0c      	ite	eq
  4012b6:	2368      	moveq	r3, #104	; 0x68
		madctl &= ~(1 << 6);
  4012b8:	2328      	movne	r3, #40	; 0x28
  4012ba:	f8ad 3006 	strh.w	r3, [sp, #6]
	}

	if (flags & ILI9488_FLIP_Y) {
  4012be:	f010 0f02 	tst.w	r0, #2
  4012c2:	d005      	beq.n	4012d0 <ili9488_set_orientation+0x24>
		madctl |= 1 << 7;
  4012c4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4012c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4012cc:	f8ad 3006 	strh.w	r3, [sp, #6]
	}

	if (flags & ILI9488_SWITCH_XY) {
  4012d0:	f010 0f04 	tst.w	r0, #4
  4012d4:	d005      	beq.n	4012e2 <ili9488_set_orientation+0x36>
		madctl &= ~(1 << 5);
  4012d6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4012da:	f023 0320 	bic.w	r3, r3, #32
  4012de:	f8ad 3006 	strh.w	r3, [sp, #6]
	}

	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &madctl, 1);
  4012e2:	2201      	movs	r2, #1
  4012e4:	f10d 0106 	add.w	r1, sp, #6
  4012e8:	2036      	movs	r0, #54	; 0x36
  4012ea:	4b02      	ldr	r3, [pc, #8]	; (4012f4 <ili9488_set_orientation+0x48>)
  4012ec:	4798      	blx	r3
}
  4012ee:	b003      	add	sp, #12
  4012f0:	f85d fb04 	ldr.w	pc, [sp], #4
  4012f4:	00400f49 	.word	0x00400f49

004012f8 <ili9488_write_gram>:
 * \endcode
 *
 * \param color The color pixel to write to the screen
 */
void ili9488_write_gram(uint16_t color)
{
  4012f8:	b510      	push	{r4, lr}
  4012fa:	4604      	mov	r4, r0
	ili9488_set_cursor_position(limit_start_x, limit_start_y);
  4012fc:	4b08      	ldr	r3, [pc, #32]	; (401320 <ili9488_write_gram+0x28>)
  4012fe:	8819      	ldrh	r1, [r3, #0]
  401300:	4b08      	ldr	r3, [pc, #32]	; (401324 <ili9488_write_gram+0x2c>)
  401302:	8818      	ldrh	r0, [r3, #0]
  401304:	4b08      	ldr	r3, [pc, #32]	; (401328 <ili9488_write_gram+0x30>)
  401306:	4798      	blx	r3
	ili9488_write_ram_prepare();
  401308:	4b08      	ldr	r3, [pc, #32]	; (40132c <ili9488_write_gram+0x34>)
  40130a:	4798      	blx	r3
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  40130c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401310:	4807      	ldr	r0, [pc, #28]	; (401330 <ili9488_write_gram+0x38>)
  401312:	4b08      	ldr	r3, [pc, #32]	; (401334 <ili9488_write_gram+0x3c>)
  401314:	4798      	blx	r3
		*(volatile uint16_t *)(BOARD_ILI9488_ADDR) = lcd_data;
  401316:	f04f 43c6 	mov.w	r3, #1660944384	; 0x63000000
  40131a:	801c      	strh	r4, [r3, #0]
  40131c:	bd10      	pop	{r4, pc}
  40131e:	bf00      	nop
  401320:	20400702 	.word	0x20400702
  401324:	20400700 	.word	0x20400700
  401328:	00401089 	.word	0x00401089
  40132c:	00400f29 	.word	0x00400f29
  401330:	400e1200 	.word	0x400e1200
  401334:	0040144d 	.word	0x0040144d

00401338 <ili9488_copy_pixels_to_screen>:
 *
 * \param pixels Pointer to the pixel data
 * \param count Number of pixels to copy to the screen
 */
void ili9488_copy_pixels_to_screen(const uint16_t *pixels, uint32_t count)
{
  401338:	b570      	push	{r4, r5, r6, lr}
  40133a:	4604      	mov	r4, r0
  40133c:	460d      	mov	r5, r1
	ili9488_set_window(limit_start_x, limit_start_y, (limit_end_x - limit_start_x) + 1, (limit_end_y - limit_start_y) + 1);
  40133e:	4b0b      	ldr	r3, [pc, #44]	; (40136c <ili9488_copy_pixels_to_screen+0x34>)
  401340:	8818      	ldrh	r0, [r3, #0]
  401342:	4b0b      	ldr	r3, [pc, #44]	; (401370 <ili9488_copy_pixels_to_screen+0x38>)
  401344:	8819      	ldrh	r1, [r3, #0]
  401346:	4b0b      	ldr	r3, [pc, #44]	; (401374 <ili9488_copy_pixels_to_screen+0x3c>)
  401348:	881b      	ldrh	r3, [r3, #0]
  40134a:	3301      	adds	r3, #1
  40134c:	1a5b      	subs	r3, r3, r1
  40134e:	4a0a      	ldr	r2, [pc, #40]	; (401378 <ili9488_copy_pixels_to_screen+0x40>)
  401350:	8812      	ldrh	r2, [r2, #0]
  401352:	3201      	adds	r2, #1
  401354:	1a12      	subs	r2, r2, r0
  401356:	b29b      	uxth	r3, r3
  401358:	b292      	uxth	r2, r2
  40135a:	4e08      	ldr	r6, [pc, #32]	; (40137c <ili9488_copy_pixels_to_screen+0x44>)
  40135c:	47b0      	blx	r6

#ifdef ILI9488_EBIMODE
	ili9488_write_register(ILI9488_CMD_MEMORY_WRITE, pixels, count * LCD_DATA_COLOR_UNIT);
  40135e:	462a      	mov	r2, r5
  401360:	4621      	mov	r1, r4
  401362:	202c      	movs	r0, #44	; 0x2c
  401364:	4b06      	ldr	r3, [pc, #24]	; (401380 <ili9488_copy_pixels_to_screen+0x48>)
  401366:	4798      	blx	r3
  401368:	bd70      	pop	{r4, r5, r6, pc}
  40136a:	bf00      	nop
  40136c:	20400700 	.word	0x20400700
  401370:	20400702 	.word	0x20400702
  401374:	204006fe 	.word	0x204006fe
  401378:	204006fc 	.word	0x204006fc
  40137c:	00400fdd 	.word	0x00400fdd
  401380:	00400f49 	.word	0x00400f49

00401384 <ili9488_duplicate_pixel>:
 *
 * \param color The color to write to the display
 * \param count The number of pixels to write with this color
 */
void ili9488_duplicate_pixel(const uint16_t color, uint32_t count)
{
  401384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401388:	4605      	mov	r5, r0
  40138a:	460e      	mov	r6, r1
	ili9488_set_window(limit_start_x, limit_start_y, (limit_end_x - limit_start_x) + 1, (limit_end_y - limit_start_y) + 1);
  40138c:	4b12      	ldr	r3, [pc, #72]	; (4013d8 <ili9488_duplicate_pixel+0x54>)
  40138e:	8818      	ldrh	r0, [r3, #0]
  401390:	4b12      	ldr	r3, [pc, #72]	; (4013dc <ili9488_duplicate_pixel+0x58>)
  401392:	8819      	ldrh	r1, [r3, #0]
  401394:	4b12      	ldr	r3, [pc, #72]	; (4013e0 <ili9488_duplicate_pixel+0x5c>)
  401396:	881b      	ldrh	r3, [r3, #0]
  401398:	3301      	adds	r3, #1
  40139a:	1a5b      	subs	r3, r3, r1
  40139c:	4a11      	ldr	r2, [pc, #68]	; (4013e4 <ili9488_duplicate_pixel+0x60>)
  40139e:	8812      	ldrh	r2, [r2, #0]
  4013a0:	3201      	adds	r2, #1
  4013a2:	1a12      	subs	r2, r2, r0
  4013a4:	b29b      	uxth	r3, r3
  4013a6:	b292      	uxth	r2, r2
  4013a8:	4c0f      	ldr	r4, [pc, #60]	; (4013e8 <ili9488_duplicate_pixel+0x64>)
  4013aa:	47a0      	blx	r4
	ili9488_write_ram_prepare();
  4013ac:	4b0f      	ldr	r3, [pc, #60]	; (4013ec <ili9488_duplicate_pixel+0x68>)
  4013ae:	4798      	blx	r3

#ifdef ILI9488_EBIMODE
	while (count--) {
  4013b0:	b17e      	cbz	r6, 4013d2 <ili9488_duplicate_pixel+0x4e>
  4013b2:	1e74      	subs	r4, r6, #1
	pio_set(PIN_EBI_CDS_PIO, PIN_EBI_CDS_MASK);
  4013b4:	f8df 803c 	ldr.w	r8, [pc, #60]	; 4013f4 <ili9488_duplicate_pixel+0x70>
  4013b8:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
  4013bc:	4e0c      	ldr	r6, [pc, #48]	; (4013f0 <ili9488_duplicate_pixel+0x6c>)
  4013be:	4639      	mov	r1, r7
  4013c0:	4640      	mov	r0, r8
  4013c2:	47b0      	blx	r6
  4013c4:	f04f 43c6 	mov.w	r3, #1660944384	; 0x63000000
  4013c8:	801d      	strh	r5, [r3, #0]
	while (count--) {
  4013ca:	3c01      	subs	r4, #1
  4013cc:	f1b4 3fff 	cmp.w	r4, #4294967295
  4013d0:	d1f5      	bne.n	4013be <ili9488_duplicate_pixel+0x3a>
  4013d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4013d6:	bf00      	nop
  4013d8:	20400700 	.word	0x20400700
  4013dc:	20400702 	.word	0x20400702
  4013e0:	204006fe 	.word	0x204006fe
  4013e4:	204006fc 	.word	0x204006fc
  4013e8:	00400fdd 	.word	0x00400fdd
  4013ec:	00400f29 	.word	0x00400f29
  4013f0:	0040144d 	.word	0x0040144d
  4013f4:	400e1200 	.word	0x400e1200

004013f8 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
  4013f8:	0109      	lsls	r1, r1, #4
  4013fa:	5042      	str	r2, [r0, r1]
  4013fc:	4770      	bx	lr

004013fe <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
  4013fe:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  401402:	604a      	str	r2, [r1, #4]
  401404:	4770      	bx	lr

00401406 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
  401406:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  40140a:	608a      	str	r2, [r1, #8]
  40140c:	4770      	bx	lr

0040140e <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
  40140e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  401412:	60ca      	str	r2, [r1, #12]
  401414:	4770      	bx	lr
	...

00401418 <mpu_enable>:
 *
 * \param dwMPUEnable  Enable/Disable the memory region.
 */
void mpu_enable(uint32_t dw_mpu_enable)
{
	MPU->CTRL = dw_mpu_enable ;
  401418:	4b01      	ldr	r3, [pc, #4]	; (401420 <mpu_enable+0x8>)
  40141a:	6058      	str	r0, [r3, #4]
  40141c:	4770      	bx	lr
  40141e:	bf00      	nop
  401420:	e000ed90 	.word	0xe000ed90

00401424 <mpu_set_region>:
 * \param dwRegionBaseAddr  Memory region base address.
 * \param dwRegionAttr  Memory region attributes.
 */
void mpu_set_region(uint32_t dw_region_base_addr, uint32_t dw_region_attr)
{
	MPU->RBAR = dw_region_base_addr;
  401424:	4b01      	ldr	r3, [pc, #4]	; (40142c <mpu_set_region+0x8>)
  401426:	60d8      	str	r0, [r3, #12]
	MPU->RASR = dw_region_attr;
  401428:	6119      	str	r1, [r3, #16]
  40142a:	4770      	bx	lr
  40142c:	e000ed90 	.word	0xe000ed90

00401430 <mpu_cal_mpu_region_size>:
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;

	while( dwReturnValue < 31 ) {
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  401430:	2820      	cmp	r0, #32
  401432:	d909      	bls.n	401448 <mpu_cal_mpu_region_size+0x18>
  401434:	2304      	movs	r3, #4
  401436:	2220      	movs	r2, #32
			break;
		} else {
			dwReturnValue++;
  401438:	3301      	adds	r3, #1
		}
		dwRegionSize <<= 1;
  40143a:	0052      	lsls	r2, r2, #1
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  40143c:	4290      	cmp	r0, r2
  40143e:	d901      	bls.n	401444 <mpu_cal_mpu_region_size+0x14>
  401440:	2b1e      	cmp	r3, #30
  401442:	d9f9      	bls.n	401438 <mpu_cal_mpu_region_size+0x8>
	}

	return ( dwReturnValue << 1 );
}
  401444:	0058      	lsls	r0, r3, #1
  401446:	4770      	bx	lr
	uint32_t dwReturnValue = 4;
  401448:	2304      	movs	r3, #4
  40144a:	e7fb      	b.n	401444 <mpu_cal_mpu_region_size+0x14>

0040144c <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  40144c:	6301      	str	r1, [r0, #48]	; 0x30
  40144e:	4770      	bx	lr

00401450 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  401450:	6341      	str	r1, [r0, #52]	; 0x34
  401452:	4770      	bx	lr

00401454 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401454:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401456:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40145a:	d03a      	beq.n	4014d2 <pio_set_peripheral+0x7e>
  40145c:	d813      	bhi.n	401486 <pio_set_peripheral+0x32>
  40145e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401462:	d025      	beq.n	4014b0 <pio_set_peripheral+0x5c>
  401464:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401468:	d10a      	bne.n	401480 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40146a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40146c:	4313      	orrs	r3, r2
  40146e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401470:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401472:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401474:	400b      	ands	r3, r1
  401476:	ea23 0302 	bic.w	r3, r3, r2
  40147a:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40147c:	6042      	str	r2, [r0, #4]
  40147e:	4770      	bx	lr
	switch (ul_type) {
  401480:	2900      	cmp	r1, #0
  401482:	d1fb      	bne.n	40147c <pio_set_peripheral+0x28>
  401484:	4770      	bx	lr
  401486:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40148a:	d021      	beq.n	4014d0 <pio_set_peripheral+0x7c>
  40148c:	d809      	bhi.n	4014a2 <pio_set_peripheral+0x4e>
  40148e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401492:	d1f3      	bne.n	40147c <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401494:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401496:	4313      	orrs	r3, r2
  401498:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40149a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40149c:	4313      	orrs	r3, r2
  40149e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4014a0:	e7ec      	b.n	40147c <pio_set_peripheral+0x28>
	switch (ul_type) {
  4014a2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4014a6:	d013      	beq.n	4014d0 <pio_set_peripheral+0x7c>
  4014a8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4014ac:	d010      	beq.n	4014d0 <pio_set_peripheral+0x7c>
  4014ae:	e7e5      	b.n	40147c <pio_set_peripheral+0x28>
{
  4014b0:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4014b2:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4014b4:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4014b6:	43d3      	mvns	r3, r2
  4014b8:	4021      	ands	r1, r4
  4014ba:	461c      	mov	r4, r3
  4014bc:	4019      	ands	r1, r3
  4014be:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4014c0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4014c2:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4014c4:	400b      	ands	r3, r1
  4014c6:	4023      	ands	r3, r4
  4014c8:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4014ca:	6042      	str	r2, [r0, #4]
}
  4014cc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4014d0:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4014d2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4014d4:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4014d6:	400b      	ands	r3, r1
  4014d8:	ea23 0302 	bic.w	r3, r3, r2
  4014dc:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4014de:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4014e0:	4313      	orrs	r3, r2
  4014e2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4014e4:	e7ca      	b.n	40147c <pio_set_peripheral+0x28>

004014e6 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4014e6:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4014e8:	f012 0f01 	tst.w	r2, #1
  4014ec:	d10d      	bne.n	40150a <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4014ee:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4014f0:	f012 0f0a 	tst.w	r2, #10
  4014f4:	d00b      	beq.n	40150e <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4014f6:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4014f8:	f012 0f02 	tst.w	r2, #2
  4014fc:	d109      	bne.n	401512 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4014fe:	f012 0f08 	tst.w	r2, #8
  401502:	d008      	beq.n	401516 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  401504:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  401508:	e005      	b.n	401516 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  40150a:	6641      	str	r1, [r0, #100]	; 0x64
  40150c:	e7f0      	b.n	4014f0 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  40150e:	6241      	str	r1, [r0, #36]	; 0x24
  401510:	e7f2      	b.n	4014f8 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  401512:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  401516:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401518:	6001      	str	r1, [r0, #0]
  40151a:	4770      	bx	lr

0040151c <pio_set_output>:
{
  40151c:	b410      	push	{r4}
  40151e:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  401520:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401522:	b94c      	cbnz	r4, 401538 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  401524:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  401526:	b14b      	cbz	r3, 40153c <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  401528:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40152a:	b94a      	cbnz	r2, 401540 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  40152c:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  40152e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401530:	6001      	str	r1, [r0, #0]
}
  401532:	f85d 4b04 	ldr.w	r4, [sp], #4
  401536:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  401538:	6641      	str	r1, [r0, #100]	; 0x64
  40153a:	e7f4      	b.n	401526 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  40153c:	6541      	str	r1, [r0, #84]	; 0x54
  40153e:	e7f4      	b.n	40152a <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  401540:	6301      	str	r1, [r0, #48]	; 0x30
  401542:	e7f4      	b.n	40152e <pio_set_output+0x12>

00401544 <pio_configure>:
{
  401544:	b570      	push	{r4, r5, r6, lr}
  401546:	b082      	sub	sp, #8
  401548:	4605      	mov	r5, r0
  40154a:	4616      	mov	r6, r2
  40154c:	461c      	mov	r4, r3
	switch (ul_type) {
  40154e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401552:	d014      	beq.n	40157e <pio_configure+0x3a>
  401554:	d90a      	bls.n	40156c <pio_configure+0x28>
  401556:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40155a:	d024      	beq.n	4015a6 <pio_configure+0x62>
  40155c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401560:	d021      	beq.n	4015a6 <pio_configure+0x62>
  401562:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401566:	d017      	beq.n	401598 <pio_configure+0x54>
		return 0;
  401568:	2000      	movs	r0, #0
  40156a:	e01a      	b.n	4015a2 <pio_configure+0x5e>
	switch (ul_type) {
  40156c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401570:	d005      	beq.n	40157e <pio_configure+0x3a>
  401572:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401576:	d002      	beq.n	40157e <pio_configure+0x3a>
  401578:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40157c:	d1f4      	bne.n	401568 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40157e:	4632      	mov	r2, r6
  401580:	4628      	mov	r0, r5
  401582:	4b11      	ldr	r3, [pc, #68]	; (4015c8 <pio_configure+0x84>)
  401584:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401586:	f014 0f01 	tst.w	r4, #1
  40158a:	d102      	bne.n	401592 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  40158c:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  40158e:	2001      	movs	r0, #1
  401590:	e007      	b.n	4015a2 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  401592:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  401594:	2001      	movs	r0, #1
  401596:	e004      	b.n	4015a2 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  401598:	461a      	mov	r2, r3
  40159a:	4631      	mov	r1, r6
  40159c:	4b0b      	ldr	r3, [pc, #44]	; (4015cc <pio_configure+0x88>)
  40159e:	4798      	blx	r3
	return 1;
  4015a0:	2001      	movs	r0, #1
}
  4015a2:	b002      	add	sp, #8
  4015a4:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4015a6:	f004 0301 	and.w	r3, r4, #1
  4015aa:	9300      	str	r3, [sp, #0]
  4015ac:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4015b0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4015b4:	bf14      	ite	ne
  4015b6:	2200      	movne	r2, #0
  4015b8:	2201      	moveq	r2, #1
  4015ba:	4631      	mov	r1, r6
  4015bc:	4628      	mov	r0, r5
  4015be:	4c04      	ldr	r4, [pc, #16]	; (4015d0 <pio_configure+0x8c>)
  4015c0:	47a0      	blx	r4
	return 1;
  4015c2:	2001      	movs	r0, #1
		break;
  4015c4:	e7ed      	b.n	4015a2 <pio_configure+0x5e>
  4015c6:	bf00      	nop
  4015c8:	00401455 	.word	0x00401455
  4015cc:	004014e7 	.word	0x004014e7
  4015d0:	0040151d 	.word	0x0040151d

004015d4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4015d4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4015d6:	4770      	bx	lr

004015d8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4015d8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4015da:	4770      	bx	lr

004015dc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4015dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4015e0:	4604      	mov	r4, r0
  4015e2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4015e4:	4b0e      	ldr	r3, [pc, #56]	; (401620 <pio_handler_process+0x44>)
  4015e6:	4798      	blx	r3
  4015e8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4015ea:	4620      	mov	r0, r4
  4015ec:	4b0d      	ldr	r3, [pc, #52]	; (401624 <pio_handler_process+0x48>)
  4015ee:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4015f0:	4005      	ands	r5, r0
  4015f2:	d013      	beq.n	40161c <pio_handler_process+0x40>
  4015f4:	4c0c      	ldr	r4, [pc, #48]	; (401628 <pio_handler_process+0x4c>)
  4015f6:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4015fa:	e003      	b.n	401604 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4015fc:	42b4      	cmp	r4, r6
  4015fe:	d00d      	beq.n	40161c <pio_handler_process+0x40>
  401600:	3410      	adds	r4, #16
		while (status != 0) {
  401602:	b15d      	cbz	r5, 40161c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401604:	6820      	ldr	r0, [r4, #0]
  401606:	4540      	cmp	r0, r8
  401608:	d1f8      	bne.n	4015fc <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40160a:	6861      	ldr	r1, [r4, #4]
  40160c:	4229      	tst	r1, r5
  40160e:	d0f5      	beq.n	4015fc <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401610:	68e3      	ldr	r3, [r4, #12]
  401612:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401614:	6863      	ldr	r3, [r4, #4]
  401616:	ea25 0503 	bic.w	r5, r5, r3
  40161a:	e7ef      	b.n	4015fc <pio_handler_process+0x20>
  40161c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401620:	004015d5 	.word	0x004015d5
  401624:	004015d9 	.word	0x004015d9
  401628:	20400704 	.word	0x20400704

0040162c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40162c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40162e:	210a      	movs	r1, #10
  401630:	4801      	ldr	r0, [pc, #4]	; (401638 <PIOA_Handler+0xc>)
  401632:	4b02      	ldr	r3, [pc, #8]	; (40163c <PIOA_Handler+0x10>)
  401634:	4798      	blx	r3
  401636:	bd08      	pop	{r3, pc}
  401638:	400e0e00 	.word	0x400e0e00
  40163c:	004015dd 	.word	0x004015dd

00401640 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401640:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401642:	210b      	movs	r1, #11
  401644:	4801      	ldr	r0, [pc, #4]	; (40164c <PIOB_Handler+0xc>)
  401646:	4b02      	ldr	r3, [pc, #8]	; (401650 <PIOB_Handler+0x10>)
  401648:	4798      	blx	r3
  40164a:	bd08      	pop	{r3, pc}
  40164c:	400e1000 	.word	0x400e1000
  401650:	004015dd 	.word	0x004015dd

00401654 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401654:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401656:	210c      	movs	r1, #12
  401658:	4801      	ldr	r0, [pc, #4]	; (401660 <PIOC_Handler+0xc>)
  40165a:	4b02      	ldr	r3, [pc, #8]	; (401664 <PIOC_Handler+0x10>)
  40165c:	4798      	blx	r3
  40165e:	bd08      	pop	{r3, pc}
  401660:	400e1200 	.word	0x400e1200
  401664:	004015dd 	.word	0x004015dd

00401668 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401668:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40166a:	2110      	movs	r1, #16
  40166c:	4801      	ldr	r0, [pc, #4]	; (401674 <PIOD_Handler+0xc>)
  40166e:	4b02      	ldr	r3, [pc, #8]	; (401678 <PIOD_Handler+0x10>)
  401670:	4798      	blx	r3
  401672:	bd08      	pop	{r3, pc}
  401674:	400e1400 	.word	0x400e1400
  401678:	004015dd 	.word	0x004015dd

0040167c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40167c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40167e:	2111      	movs	r1, #17
  401680:	4801      	ldr	r0, [pc, #4]	; (401688 <PIOE_Handler+0xc>)
  401682:	4b02      	ldr	r3, [pc, #8]	; (40168c <PIOE_Handler+0x10>)
  401684:	4798      	blx	r3
  401686:	bd08      	pop	{r3, pc}
  401688:	400e1600 	.word	0x400e1600
  40168c:	004015dd 	.word	0x004015dd

00401690 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401690:	2803      	cmp	r0, #3
  401692:	d011      	beq.n	4016b8 <pmc_mck_set_division+0x28>
  401694:	2804      	cmp	r0, #4
  401696:	d012      	beq.n	4016be <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401698:	2802      	cmp	r0, #2
  40169a:	bf0c      	ite	eq
  40169c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4016a0:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4016a2:	4a08      	ldr	r2, [pc, #32]	; (4016c4 <pmc_mck_set_division+0x34>)
  4016a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4016a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4016aa:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  4016ac:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4016ae:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4016b0:	f013 0f08 	tst.w	r3, #8
  4016b4:	d0fb      	beq.n	4016ae <pmc_mck_set_division+0x1e>
}
  4016b6:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4016b8:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4016bc:	e7f1      	b.n	4016a2 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4016be:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4016c2:	e7ee      	b.n	4016a2 <pmc_mck_set_division+0x12>
  4016c4:	400e0600 	.word	0x400e0600

004016c8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4016c8:	4a17      	ldr	r2, [pc, #92]	; (401728 <pmc_switch_mck_to_pllack+0x60>)
  4016ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4016cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4016d0:	4318      	orrs	r0, r3
  4016d2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4016d4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4016d6:	f013 0f08 	tst.w	r3, #8
  4016da:	d10a      	bne.n	4016f2 <pmc_switch_mck_to_pllack+0x2a>
  4016dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4016e0:	4911      	ldr	r1, [pc, #68]	; (401728 <pmc_switch_mck_to_pllack+0x60>)
  4016e2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4016e4:	f012 0f08 	tst.w	r2, #8
  4016e8:	d103      	bne.n	4016f2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4016ea:	3b01      	subs	r3, #1
  4016ec:	d1f9      	bne.n	4016e2 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4016ee:	2001      	movs	r0, #1
  4016f0:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4016f2:	4a0d      	ldr	r2, [pc, #52]	; (401728 <pmc_switch_mck_to_pllack+0x60>)
  4016f4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4016f6:	f023 0303 	bic.w	r3, r3, #3
  4016fa:	f043 0302 	orr.w	r3, r3, #2
  4016fe:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401700:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401702:	f013 0f08 	tst.w	r3, #8
  401706:	d10a      	bne.n	40171e <pmc_switch_mck_to_pllack+0x56>
  401708:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40170c:	4906      	ldr	r1, [pc, #24]	; (401728 <pmc_switch_mck_to_pllack+0x60>)
  40170e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401710:	f012 0f08 	tst.w	r2, #8
  401714:	d105      	bne.n	401722 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401716:	3b01      	subs	r3, #1
  401718:	d1f9      	bne.n	40170e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40171a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40171c:	4770      	bx	lr
	return 0;
  40171e:	2000      	movs	r0, #0
  401720:	4770      	bx	lr
  401722:	2000      	movs	r0, #0
  401724:	4770      	bx	lr
  401726:	bf00      	nop
  401728:	400e0600 	.word	0x400e0600

0040172c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40172c:	b9a0      	cbnz	r0, 401758 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40172e:	480e      	ldr	r0, [pc, #56]	; (401768 <pmc_switch_mainck_to_xtal+0x3c>)
  401730:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401732:	0209      	lsls	r1, r1, #8
  401734:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401736:	4a0d      	ldr	r2, [pc, #52]	; (40176c <pmc_switch_mainck_to_xtal+0x40>)
  401738:	401a      	ands	r2, r3
  40173a:	4b0d      	ldr	r3, [pc, #52]	; (401770 <pmc_switch_mainck_to_xtal+0x44>)
  40173c:	4313      	orrs	r3, r2
  40173e:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401740:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401742:	4602      	mov	r2, r0
  401744:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401746:	f013 0f01 	tst.w	r3, #1
  40174a:	d0fb      	beq.n	401744 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40174c:	4a06      	ldr	r2, [pc, #24]	; (401768 <pmc_switch_mainck_to_xtal+0x3c>)
  40174e:	6a11      	ldr	r1, [r2, #32]
  401750:	4b08      	ldr	r3, [pc, #32]	; (401774 <pmc_switch_mainck_to_xtal+0x48>)
  401752:	430b      	orrs	r3, r1
  401754:	6213      	str	r3, [r2, #32]
  401756:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401758:	4903      	ldr	r1, [pc, #12]	; (401768 <pmc_switch_mainck_to_xtal+0x3c>)
  40175a:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40175c:	4a06      	ldr	r2, [pc, #24]	; (401778 <pmc_switch_mainck_to_xtal+0x4c>)
  40175e:	401a      	ands	r2, r3
  401760:	4b06      	ldr	r3, [pc, #24]	; (40177c <pmc_switch_mainck_to_xtal+0x50>)
  401762:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401764:	620b      	str	r3, [r1, #32]
  401766:	4770      	bx	lr
  401768:	400e0600 	.word	0x400e0600
  40176c:	ffc8fffc 	.word	0xffc8fffc
  401770:	00370001 	.word	0x00370001
  401774:	01370000 	.word	0x01370000
  401778:	fec8fffc 	.word	0xfec8fffc
  40177c:	01370002 	.word	0x01370002

00401780 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401780:	4b02      	ldr	r3, [pc, #8]	; (40178c <pmc_osc_is_ready_mainck+0xc>)
  401782:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401784:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401788:	4770      	bx	lr
  40178a:	bf00      	nop
  40178c:	400e0600 	.word	0x400e0600

00401790 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401790:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401794:	4b01      	ldr	r3, [pc, #4]	; (40179c <pmc_disable_pllack+0xc>)
  401796:	629a      	str	r2, [r3, #40]	; 0x28
  401798:	4770      	bx	lr
  40179a:	bf00      	nop
  40179c:	400e0600 	.word	0x400e0600

004017a0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4017a0:	4b02      	ldr	r3, [pc, #8]	; (4017ac <pmc_is_locked_pllack+0xc>)
  4017a2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4017a4:	f000 0002 	and.w	r0, r0, #2
  4017a8:	4770      	bx	lr
  4017aa:	bf00      	nop
  4017ac:	400e0600 	.word	0x400e0600

004017b0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4017b0:	283f      	cmp	r0, #63	; 0x3f
  4017b2:	d81e      	bhi.n	4017f2 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4017b4:	281f      	cmp	r0, #31
  4017b6:	d80c      	bhi.n	4017d2 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4017b8:	4b11      	ldr	r3, [pc, #68]	; (401800 <pmc_enable_periph_clk+0x50>)
  4017ba:	699a      	ldr	r2, [r3, #24]
  4017bc:	2301      	movs	r3, #1
  4017be:	4083      	lsls	r3, r0
  4017c0:	4393      	bics	r3, r2
  4017c2:	d018      	beq.n	4017f6 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4017c4:	2301      	movs	r3, #1
  4017c6:	fa03 f000 	lsl.w	r0, r3, r0
  4017ca:	4b0d      	ldr	r3, [pc, #52]	; (401800 <pmc_enable_periph_clk+0x50>)
  4017cc:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4017ce:	2000      	movs	r0, #0
  4017d0:	4770      	bx	lr
		ul_id -= 32;
  4017d2:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4017d4:	4b0a      	ldr	r3, [pc, #40]	; (401800 <pmc_enable_periph_clk+0x50>)
  4017d6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4017da:	2301      	movs	r3, #1
  4017dc:	4083      	lsls	r3, r0
  4017de:	4393      	bics	r3, r2
  4017e0:	d00b      	beq.n	4017fa <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4017e2:	2301      	movs	r3, #1
  4017e4:	fa03 f000 	lsl.w	r0, r3, r0
  4017e8:	4b05      	ldr	r3, [pc, #20]	; (401800 <pmc_enable_periph_clk+0x50>)
  4017ea:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4017ee:	2000      	movs	r0, #0
  4017f0:	4770      	bx	lr
		return 1;
  4017f2:	2001      	movs	r0, #1
  4017f4:	4770      	bx	lr
	return 0;
  4017f6:	2000      	movs	r0, #0
  4017f8:	4770      	bx	lr
  4017fa:	2000      	movs	r0, #0
}
  4017fc:	4770      	bx	lr
  4017fe:	bf00      	nop
  401800:	400e0600 	.word	0x400e0600

00401804 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401804:	e7fe      	b.n	401804 <Dummy_Handler>
	...

00401808 <Reset_Handler>:
{
  401808:	b500      	push	{lr}
  40180a:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  40180c:	4b25      	ldr	r3, [pc, #148]	; (4018a4 <Reset_Handler+0x9c>)
  40180e:	4a26      	ldr	r2, [pc, #152]	; (4018a8 <Reset_Handler+0xa0>)
  401810:	429a      	cmp	r2, r3
  401812:	d010      	beq.n	401836 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401814:	4b25      	ldr	r3, [pc, #148]	; (4018ac <Reset_Handler+0xa4>)
  401816:	4a23      	ldr	r2, [pc, #140]	; (4018a4 <Reset_Handler+0x9c>)
  401818:	429a      	cmp	r2, r3
  40181a:	d20c      	bcs.n	401836 <Reset_Handler+0x2e>
  40181c:	3b01      	subs	r3, #1
  40181e:	1a9b      	subs	r3, r3, r2
  401820:	f023 0303 	bic.w	r3, r3, #3
  401824:	3304      	adds	r3, #4
  401826:	4413      	add	r3, r2
  401828:	491f      	ldr	r1, [pc, #124]	; (4018a8 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  40182a:	f851 0b04 	ldr.w	r0, [r1], #4
  40182e:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  401832:	429a      	cmp	r2, r3
  401834:	d1f9      	bne.n	40182a <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  401836:	4b1e      	ldr	r3, [pc, #120]	; (4018b0 <Reset_Handler+0xa8>)
  401838:	4a1e      	ldr	r2, [pc, #120]	; (4018b4 <Reset_Handler+0xac>)
  40183a:	429a      	cmp	r2, r3
  40183c:	d20a      	bcs.n	401854 <Reset_Handler+0x4c>
  40183e:	3b01      	subs	r3, #1
  401840:	1a9b      	subs	r3, r3, r2
  401842:	f023 0303 	bic.w	r3, r3, #3
  401846:	3304      	adds	r3, #4
  401848:	4413      	add	r3, r2
                *pDest++ = 0;
  40184a:	2100      	movs	r1, #0
  40184c:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401850:	4293      	cmp	r3, r2
  401852:	d1fb      	bne.n	40184c <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401854:	4a18      	ldr	r2, [pc, #96]	; (4018b8 <Reset_Handler+0xb0>)
  401856:	4b19      	ldr	r3, [pc, #100]	; (4018bc <Reset_Handler+0xb4>)
  401858:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40185c:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40185e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401862:	fab3 f383 	clz	r3, r3
  401866:	095b      	lsrs	r3, r3, #5
  401868:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40186a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  40186c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401870:	2200      	movs	r2, #0
  401872:	4b13      	ldr	r3, [pc, #76]	; (4018c0 <Reset_Handler+0xb8>)
  401874:	701a      	strb	r2, [r3, #0]
	return flags;
  401876:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401878:	4a12      	ldr	r2, [pc, #72]	; (4018c4 <Reset_Handler+0xbc>)
  40187a:	6813      	ldr	r3, [r2, #0]
  40187c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401880:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401882:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401886:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40188a:	b129      	cbz	r1, 401898 <Reset_Handler+0x90>
		cpu_irq_enable();
  40188c:	2201      	movs	r2, #1
  40188e:	4b0c      	ldr	r3, [pc, #48]	; (4018c0 <Reset_Handler+0xb8>)
  401890:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401892:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401896:	b662      	cpsie	i
        __libc_init_array();
  401898:	4b0b      	ldr	r3, [pc, #44]	; (4018c8 <Reset_Handler+0xc0>)
  40189a:	4798      	blx	r3
        main();
  40189c:	4b0b      	ldr	r3, [pc, #44]	; (4018cc <Reset_Handler+0xc4>)
  40189e:	4798      	blx	r3
  4018a0:	e7fe      	b.n	4018a0 <Reset_Handler+0x98>
  4018a2:	bf00      	nop
  4018a4:	20400000 	.word	0x20400000
  4018a8:	00406418 	.word	0x00406418
  4018ac:	2040045c 	.word	0x2040045c
  4018b0:	204007a4 	.word	0x204007a4
  4018b4:	2040045c 	.word	0x2040045c
  4018b8:	e000ed00 	.word	0xe000ed00
  4018bc:	00400000 	.word	0x00400000
  4018c0:	2040000c 	.word	0x2040000c
  4018c4:	e000ed88 	.word	0xe000ed88
  4018c8:	00401d35 	.word	0x00401d35
  4018cc:	00401a69 	.word	0x00401a69

004018d0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4018d0:	4b3b      	ldr	r3, [pc, #236]	; (4019c0 <SystemCoreClockUpdate+0xf0>)
  4018d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4018d4:	f003 0303 	and.w	r3, r3, #3
  4018d8:	2b01      	cmp	r3, #1
  4018da:	d01d      	beq.n	401918 <SystemCoreClockUpdate+0x48>
  4018dc:	b183      	cbz	r3, 401900 <SystemCoreClockUpdate+0x30>
  4018de:	2b02      	cmp	r3, #2
  4018e0:	d036      	beq.n	401950 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4018e2:	4b37      	ldr	r3, [pc, #220]	; (4019c0 <SystemCoreClockUpdate+0xf0>)
  4018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4018e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4018ea:	2b70      	cmp	r3, #112	; 0x70
  4018ec:	d05f      	beq.n	4019ae <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4018ee:	4b34      	ldr	r3, [pc, #208]	; (4019c0 <SystemCoreClockUpdate+0xf0>)
  4018f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4018f2:	4934      	ldr	r1, [pc, #208]	; (4019c4 <SystemCoreClockUpdate+0xf4>)
  4018f4:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4018f8:	680b      	ldr	r3, [r1, #0]
  4018fa:	40d3      	lsrs	r3, r2
  4018fc:	600b      	str	r3, [r1, #0]
  4018fe:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401900:	4b31      	ldr	r3, [pc, #196]	; (4019c8 <SystemCoreClockUpdate+0xf8>)
  401902:	695b      	ldr	r3, [r3, #20]
  401904:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401908:	bf14      	ite	ne
  40190a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40190e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401912:	4b2c      	ldr	r3, [pc, #176]	; (4019c4 <SystemCoreClockUpdate+0xf4>)
  401914:	601a      	str	r2, [r3, #0]
  401916:	e7e4      	b.n	4018e2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401918:	4b29      	ldr	r3, [pc, #164]	; (4019c0 <SystemCoreClockUpdate+0xf0>)
  40191a:	6a1b      	ldr	r3, [r3, #32]
  40191c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401920:	d003      	beq.n	40192a <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401922:	4a2a      	ldr	r2, [pc, #168]	; (4019cc <SystemCoreClockUpdate+0xfc>)
  401924:	4b27      	ldr	r3, [pc, #156]	; (4019c4 <SystemCoreClockUpdate+0xf4>)
  401926:	601a      	str	r2, [r3, #0]
  401928:	e7db      	b.n	4018e2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40192a:	4a29      	ldr	r2, [pc, #164]	; (4019d0 <SystemCoreClockUpdate+0x100>)
  40192c:	4b25      	ldr	r3, [pc, #148]	; (4019c4 <SystemCoreClockUpdate+0xf4>)
  40192e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401930:	4b23      	ldr	r3, [pc, #140]	; (4019c0 <SystemCoreClockUpdate+0xf0>)
  401932:	6a1b      	ldr	r3, [r3, #32]
  401934:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401938:	2b10      	cmp	r3, #16
  40193a:	d005      	beq.n	401948 <SystemCoreClockUpdate+0x78>
  40193c:	2b20      	cmp	r3, #32
  40193e:	d1d0      	bne.n	4018e2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401940:	4a22      	ldr	r2, [pc, #136]	; (4019cc <SystemCoreClockUpdate+0xfc>)
  401942:	4b20      	ldr	r3, [pc, #128]	; (4019c4 <SystemCoreClockUpdate+0xf4>)
  401944:	601a      	str	r2, [r3, #0]
          break;
  401946:	e7cc      	b.n	4018e2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401948:	4a22      	ldr	r2, [pc, #136]	; (4019d4 <SystemCoreClockUpdate+0x104>)
  40194a:	4b1e      	ldr	r3, [pc, #120]	; (4019c4 <SystemCoreClockUpdate+0xf4>)
  40194c:	601a      	str	r2, [r3, #0]
          break;
  40194e:	e7c8      	b.n	4018e2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401950:	4b1b      	ldr	r3, [pc, #108]	; (4019c0 <SystemCoreClockUpdate+0xf0>)
  401952:	6a1b      	ldr	r3, [r3, #32]
  401954:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401958:	d016      	beq.n	401988 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40195a:	4a1c      	ldr	r2, [pc, #112]	; (4019cc <SystemCoreClockUpdate+0xfc>)
  40195c:	4b19      	ldr	r3, [pc, #100]	; (4019c4 <SystemCoreClockUpdate+0xf4>)
  40195e:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401960:	4b17      	ldr	r3, [pc, #92]	; (4019c0 <SystemCoreClockUpdate+0xf0>)
  401962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401964:	f003 0303 	and.w	r3, r3, #3
  401968:	2b02      	cmp	r3, #2
  40196a:	d1ba      	bne.n	4018e2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40196c:	4a14      	ldr	r2, [pc, #80]	; (4019c0 <SystemCoreClockUpdate+0xf0>)
  40196e:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401970:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401972:	4814      	ldr	r0, [pc, #80]	; (4019c4 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401974:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401978:	6803      	ldr	r3, [r0, #0]
  40197a:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40197e:	b2d2      	uxtb	r2, r2
  401980:	fbb3 f3f2 	udiv	r3, r3, r2
  401984:	6003      	str	r3, [r0, #0]
  401986:	e7ac      	b.n	4018e2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401988:	4a11      	ldr	r2, [pc, #68]	; (4019d0 <SystemCoreClockUpdate+0x100>)
  40198a:	4b0e      	ldr	r3, [pc, #56]	; (4019c4 <SystemCoreClockUpdate+0xf4>)
  40198c:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40198e:	4b0c      	ldr	r3, [pc, #48]	; (4019c0 <SystemCoreClockUpdate+0xf0>)
  401990:	6a1b      	ldr	r3, [r3, #32]
  401992:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401996:	2b10      	cmp	r3, #16
  401998:	d005      	beq.n	4019a6 <SystemCoreClockUpdate+0xd6>
  40199a:	2b20      	cmp	r3, #32
  40199c:	d1e0      	bne.n	401960 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40199e:	4a0b      	ldr	r2, [pc, #44]	; (4019cc <SystemCoreClockUpdate+0xfc>)
  4019a0:	4b08      	ldr	r3, [pc, #32]	; (4019c4 <SystemCoreClockUpdate+0xf4>)
  4019a2:	601a      	str	r2, [r3, #0]
          break;
  4019a4:	e7dc      	b.n	401960 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  4019a6:	4a0b      	ldr	r2, [pc, #44]	; (4019d4 <SystemCoreClockUpdate+0x104>)
  4019a8:	4b06      	ldr	r3, [pc, #24]	; (4019c4 <SystemCoreClockUpdate+0xf4>)
  4019aa:	601a      	str	r2, [r3, #0]
          break;
  4019ac:	e7d8      	b.n	401960 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  4019ae:	4a05      	ldr	r2, [pc, #20]	; (4019c4 <SystemCoreClockUpdate+0xf4>)
  4019b0:	6813      	ldr	r3, [r2, #0]
  4019b2:	4909      	ldr	r1, [pc, #36]	; (4019d8 <SystemCoreClockUpdate+0x108>)
  4019b4:	fba1 1303 	umull	r1, r3, r1, r3
  4019b8:	085b      	lsrs	r3, r3, #1
  4019ba:	6013      	str	r3, [r2, #0]
  4019bc:	4770      	bx	lr
  4019be:	bf00      	nop
  4019c0:	400e0600 	.word	0x400e0600
  4019c4:	20400010 	.word	0x20400010
  4019c8:	400e1810 	.word	0x400e1810
  4019cc:	00b71b00 	.word	0x00b71b00
  4019d0:	003d0900 	.word	0x003d0900
  4019d4:	007a1200 	.word	0x007a1200
  4019d8:	aaaaaaab 	.word	0xaaaaaaab

004019dc <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4019dc:	4b16      	ldr	r3, [pc, #88]	; (401a38 <system_init_flash+0x5c>)
  4019de:	4298      	cmp	r0, r3
  4019e0:	d913      	bls.n	401a0a <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4019e2:	4b16      	ldr	r3, [pc, #88]	; (401a3c <system_init_flash+0x60>)
  4019e4:	4298      	cmp	r0, r3
  4019e6:	d915      	bls.n	401a14 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4019e8:	4b15      	ldr	r3, [pc, #84]	; (401a40 <system_init_flash+0x64>)
  4019ea:	4298      	cmp	r0, r3
  4019ec:	d916      	bls.n	401a1c <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4019ee:	4b15      	ldr	r3, [pc, #84]	; (401a44 <system_init_flash+0x68>)
  4019f0:	4298      	cmp	r0, r3
  4019f2:	d917      	bls.n	401a24 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4019f4:	4b14      	ldr	r3, [pc, #80]	; (401a48 <system_init_flash+0x6c>)
  4019f6:	4298      	cmp	r0, r3
  4019f8:	d918      	bls.n	401a2c <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4019fa:	4b14      	ldr	r3, [pc, #80]	; (401a4c <system_init_flash+0x70>)
  4019fc:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4019fe:	bf94      	ite	ls
  401a00:	4a13      	ldrls	r2, [pc, #76]	; (401a50 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401a02:	4a14      	ldrhi	r2, [pc, #80]	; (401a54 <system_init_flash+0x78>)
  401a04:	4b14      	ldr	r3, [pc, #80]	; (401a58 <system_init_flash+0x7c>)
  401a06:	601a      	str	r2, [r3, #0]
  401a08:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401a0a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401a0e:	4b12      	ldr	r3, [pc, #72]	; (401a58 <system_init_flash+0x7c>)
  401a10:	601a      	str	r2, [r3, #0]
  401a12:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401a14:	4a11      	ldr	r2, [pc, #68]	; (401a5c <system_init_flash+0x80>)
  401a16:	4b10      	ldr	r3, [pc, #64]	; (401a58 <system_init_flash+0x7c>)
  401a18:	601a      	str	r2, [r3, #0]
  401a1a:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401a1c:	4a10      	ldr	r2, [pc, #64]	; (401a60 <system_init_flash+0x84>)
  401a1e:	4b0e      	ldr	r3, [pc, #56]	; (401a58 <system_init_flash+0x7c>)
  401a20:	601a      	str	r2, [r3, #0]
  401a22:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401a24:	4a0f      	ldr	r2, [pc, #60]	; (401a64 <system_init_flash+0x88>)
  401a26:	4b0c      	ldr	r3, [pc, #48]	; (401a58 <system_init_flash+0x7c>)
  401a28:	601a      	str	r2, [r3, #0]
  401a2a:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401a2c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401a30:	4b09      	ldr	r3, [pc, #36]	; (401a58 <system_init_flash+0x7c>)
  401a32:	601a      	str	r2, [r3, #0]
  401a34:	4770      	bx	lr
  401a36:	bf00      	nop
  401a38:	015ef3bf 	.word	0x015ef3bf
  401a3c:	02bde77f 	.word	0x02bde77f
  401a40:	041cdb3f 	.word	0x041cdb3f
  401a44:	057bceff 	.word	0x057bceff
  401a48:	06dac2bf 	.word	0x06dac2bf
  401a4c:	0839b67f 	.word	0x0839b67f
  401a50:	04000500 	.word	0x04000500
  401a54:	04000600 	.word	0x04000600
  401a58:	400e0c00 	.word	0x400e0c00
  401a5c:	04000100 	.word	0x04000100
  401a60:	04000200 	.word	0x04000200
  401a64:	04000300 	.word	0x04000300

00401a68 <main>:
 * from bottom to top with varying colors (incrementing y). Below the figures
 * it draws the Atmel logo centered on the screen.
 *
 */
int main(void)
{
  401a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401a6c:	b089      	sub	sp, #36	; 0x24
	uint8_t color_table_index = 0;
	uint16_t y, color;
	uint8_t xoff = 0;

	board_init();
  401a6e:	4b9d      	ldr	r3, [pc, #628]	; (401ce4 <main+0x27c>)
  401a70:	4798      	blx	r3
	sysclk_init();
  401a72:	4b9d      	ldr	r3, [pc, #628]	; (401ce8 <main+0x280>)
  401a74:	4798      	blx	r3

	gfx_init();
  401a76:	4b9d      	ldr	r3, [pc, #628]	; (401cec <main+0x284>)
  401a78:	4798      	blx	r3

#ifdef LANDSCAPE_MODE
	gfx_set_orientation(GFX_SWITCH_XY | GFX_FLIP_Y);
  401a7a:	2006      	movs	r0, #6
  401a7c:	4b9c      	ldr	r3, [pc, #624]	; (401cf0 <main+0x288>)
  401a7e:	4798      	blx	r3
#endif

	/* Fill the whole screen with the background color */
	gfx_draw_filled_rect(0, 0, gfx_get_width(), gfx_get_height(),
  401a80:	4c9c      	ldr	r4, [pc, #624]	; (401cf4 <main+0x28c>)
  401a82:	47a0      	blx	r4
  401a84:	4605      	mov	r5, r0
  401a86:	4b9c      	ldr	r3, [pc, #624]	; (401cf8 <main+0x290>)
  401a88:	4798      	blx	r3
  401a8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401a8e:	9300      	str	r3, [sp, #0]
  401a90:	4603      	mov	r3, r0
  401a92:	462a      	mov	r2, r5
  401a94:	2100      	movs	r1, #0
  401a96:	4608      	mov	r0, r1
  401a98:	4d98      	ldr	r5, [pc, #608]	; (401cfc <main+0x294>)
  401a9a:	47a8      	blx	r5
			GFX_COLOR_WHITE);

	/* Write center-aligned text string to the top of the display */
	gfx_draw_string_aligned(example_string,
			gfx_get_width() / 2, 2, &sysfont,
  401a9c:	47a0      	blx	r4
	gfx_draw_string_aligned(example_string,
  401a9e:	4601      	mov	r1, r0
  401aa0:	2800      	cmp	r0, #0
  401aa2:	bfb8      	it	lt
  401aa4:	1c41      	addlt	r1, r0, #1
  401aa6:	2500      	movs	r5, #0
  401aa8:	9503      	str	r5, [sp, #12]
  401aaa:	2310      	movs	r3, #16
  401aac:	9302      	str	r3, [sp, #8]
  401aae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
  401ab2:	9301      	str	r3, [sp, #4]
  401ab4:	f24f 031e 	movw	r3, #61470	; 0xf01e
  401ab8:	9300      	str	r3, [sp, #0]
  401aba:	4b91      	ldr	r3, [pc, #580]	; (401d00 <main+0x298>)
  401abc:	2202      	movs	r2, #2
  401abe:	f341 014f 	sbfx	r1, r1, #1, #16
  401ac2:	4890      	ldr	r0, [pc, #576]	; (401d04 <main+0x29c>)
  401ac4:	4c90      	ldr	r4, [pc, #576]	; (401d08 <main+0x2a0>)
  401ac6:	47a0      	blx	r4
	uint8_t xoff = 0;
  401ac8:	462c      	mov	r4, r5
			GFX_COLOR_TRANSPARENT, GFX_COLOR_RED,
			TEXT_POS_CENTER_X, TEXT_ALIGN_LEFT);

	/* We move down the screen with STEP size increments */
	for (y = STEP; y < (gfx_get_height() - atmel_logo.height - STEP);
  401aca:	f04f 0b14 	mov.w	fp, #20
	uint8_t color_table_index = 0;
  401ace:	46aa      	mov	sl, r5
	for (y = STEP; y < (gfx_get_height() - atmel_logo.height - STEP);
  401ad0:	e0a2      	b.n	401c18 <main+0x1b0>
			y += STEP) {

		/* Generate a color that increments along with the Y coordinate */
		color = color_table[color_table_index++];
  401ad2:	f10a 0201 	add.w	r2, sl, #1
  401ad6:	b2d2      	uxtb	r2, r2
  401ad8:	4b8c      	ldr	r3, [pc, #560]	; (401d0c <main+0x2a4>)
  401ada:	f833 501a 	ldrh.w	r5, [r3, sl, lsl #1]
		color_table_index %= sizeof(color_table) / sizeof(color_table[0]);
  401ade:	4b8c      	ldr	r3, [pc, #560]	; (401d10 <main+0x2a8>)
  401ae0:	fba3 1302 	umull	r1, r3, r3, r2
  401ae4:	089b      	lsrs	r3, r3, #2
  401ae6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  401aea:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
  401aee:	fa5f fa83 	uxtb.w	sl, r3

		/* set X offset so that the pattern is centered */
		xoff = (gfx_get_width() - (7 * GAP)) / 2;
  401af2:	4b80      	ldr	r3, [pc, #512]	; (401cf4 <main+0x28c>)
  401af4:	4798      	blx	r3
  401af6:	38d2      	subs	r0, #210	; 0xd2
  401af8:	bf48      	it	mi
  401afa:	3001      	addmi	r0, #1
  401afc:	f3c0 0447 	ubfx	r4, r0, #1, #8
  401b00:	f10b 030a 	add.w	r3, fp, #10
  401b04:	b21b      	sxth	r3, r3
  401b06:	4619      	mov	r1, r3

		/* Draw a filled circle with radius of 10 */
		gfx_draw_filled_circle(xoff, y + 10, 10, color, GFX_WHOLE);
  401b08:	23ff      	movs	r3, #255	; 0xff
  401b0a:	9300      	str	r3, [sp, #0]
  401b0c:	462b      	mov	r3, r5
  401b0e:	220a      	movs	r2, #10
  401b10:	9106      	str	r1, [sp, #24]
  401b12:	4620      	mov	r0, r4
  401b14:	4e7f      	ldr	r6, [pc, #508]	; (401d14 <main+0x2ac>)
  401b16:	47b0      	blx	r6

		xoff += GAP;
  401b18:	f104 081e 	add.w	r8, r4, #30
  401b1c:	fa5f f888 	uxtb.w	r8, r8

		/* Draw box with cross to the right of the filled circles */
		gfx_draw_horizontal_line(xoff, y, STEP, color);
  401b20:	fa0f f288 	sxth.w	r2, r8
  401b24:	4610      	mov	r0, r2
  401b26:	fa0f f68b 	sxth.w	r6, fp
	gfx_draw_filled_rect(x, y, length, 1, color);
  401b2a:	9500      	str	r5, [sp, #0]
  401b2c:	2301      	movs	r3, #1
  401b2e:	2214      	movs	r2, #20
  401b30:	4631      	mov	r1, r6
  401b32:	4681      	mov	r9, r0
  401b34:	4f71      	ldr	r7, [pc, #452]	; (401cfc <main+0x294>)
  401b36:	47b8      	blx	r7
		gfx_draw_horizontal_line(xoff, y + STEP, STEP, color);
  401b38:	f10b 0314 	add.w	r3, fp, #20
  401b3c:	b29b      	uxth	r3, r3
  401b3e:	9304      	str	r3, [sp, #16]
  401b40:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
  401b44:	4610      	mov	r0, r2
  401b46:	9500      	str	r5, [sp, #0]
  401b48:	2301      	movs	r3, #1
  401b4a:	2214      	movs	r2, #20
  401b4c:	9005      	str	r0, [sp, #20]
  401b4e:	4601      	mov	r1, r0
  401b50:	4648      	mov	r0, r9
  401b52:	47b8      	blx	r7
	gfx_draw_filled_rect(x, y, 1, length, color);
  401b54:	9500      	str	r5, [sp, #0]
  401b56:	2314      	movs	r3, #20
  401b58:	2201      	movs	r2, #1
  401b5a:	4631      	mov	r1, r6
  401b5c:	4648      	mov	r0, r9
  401b5e:	47b8      	blx	r7
		gfx_draw_vertical_line(xoff, y, STEP, color);
		gfx_draw_vertical_line(xoff + STEP, y, STEP, color);
  401b60:	f108 0814 	add.w	r8, r8, #20
  401b64:	9500      	str	r5, [sp, #0]
  401b66:	2314      	movs	r3, #20
  401b68:	2201      	movs	r2, #1
  401b6a:	4631      	mov	r1, r6
  401b6c:	4640      	mov	r0, r8
  401b6e:	47b8      	blx	r7
		gfx_draw_line(xoff, y, xoff + STEP, y + STEP, color);
  401b70:	9500      	str	r5, [sp, #0]
  401b72:	9b05      	ldr	r3, [sp, #20]
  401b74:	4642      	mov	r2, r8
  401b76:	4631      	mov	r1, r6
  401b78:	f8cd 901c 	str.w	r9, [sp, #28]
  401b7c:	4648      	mov	r0, r9
  401b7e:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 401d28 <main+0x2c0>
  401b82:	47c8      	blx	r9
		gfx_draw_line(xoff, y + STEP, xoff + STEP, y, color);
  401b84:	9500      	str	r5, [sp, #0]
  401b86:	4633      	mov	r3, r6
  401b88:	4642      	mov	r2, r8
  401b8a:	9905      	ldr	r1, [sp, #20]
  401b8c:	9807      	ldr	r0, [sp, #28]
  401b8e:	47c8      	blx	r9

		xoff += GAP;
  401b90:	f104 083c 	add.w	r8, r4, #60	; 0x3c
  401b94:	fa5f f888 	uxtb.w	r8, r8

		/* even better, use a rectangle to make box instead */
		gfx_draw_rect(xoff, y, STEP, STEP, color);
  401b98:	fa0f f988 	sxth.w	r9, r8
	gfx_draw_filled_rect(x, y, length, 1, color);
  401b9c:	9500      	str	r5, [sp, #0]
  401b9e:	2301      	movs	r3, #1
  401ba0:	2214      	movs	r2, #20
  401ba2:	4631      	mov	r1, r6
  401ba4:	4648      	mov	r0, r9
  401ba6:	47b8      	blx	r7
  401ba8:	f10b 0113 	add.w	r1, fp, #19
  401bac:	9500      	str	r5, [sp, #0]
  401bae:	2301      	movs	r3, #1
  401bb0:	2214      	movs	r2, #20
  401bb2:	b209      	sxth	r1, r1
  401bb4:	4648      	mov	r0, r9
  401bb6:	47b8      	blx	r7
	gfx_draw_filled_rect(x, y, 1, length, color);
  401bb8:	9500      	str	r5, [sp, #0]
  401bba:	2314      	movs	r3, #20
  401bbc:	2201      	movs	r2, #1
  401bbe:	4631      	mov	r1, r6
  401bc0:	4648      	mov	r0, r9
  401bc2:	47b8      	blx	r7
  401bc4:	9500      	str	r5, [sp, #0]
  401bc6:	2314      	movs	r3, #20
  401bc8:	2201      	movs	r2, #1
  401bca:	4631      	mov	r1, r6
  401bcc:	f108 0013 	add.w	r0, r8, #19
  401bd0:	47b8      	blx	r7

		xoff += GAP;
  401bd2:	f104 005a 	add.w	r0, r4, #90	; 0x5a

		/* filled rectangles */
		gfx_draw_filled_rect(xoff, y, STEP, STEP, color);
  401bd6:	9500      	str	r5, [sp, #0]
  401bd8:	2314      	movs	r3, #20
  401bda:	461a      	mov	r2, r3
  401bdc:	4631      	mov	r1, r6
  401bde:	b2c0      	uxtb	r0, r0
  401be0:	47b8      	blx	r7

		xoff += GAP + SPACING;
  401be2:	f1a4 007e 	sub.w	r0, r4, #126	; 0x7e

		/* circles that are not filled */
		gfx_draw_circle(xoff, y + 10, 10, color, GFX_WHOLE);
  401be6:	22ff      	movs	r2, #255	; 0xff
  401be8:	9200      	str	r2, [sp, #0]
  401bea:	462b      	mov	r3, r5
  401bec:	220a      	movs	r2, #10
  401bee:	9906      	ldr	r1, [sp, #24]
  401bf0:	b2c0      	uxtb	r0, r0
  401bf2:	4d49      	ldr	r5, [pc, #292]	; (401d18 <main+0x2b0>)
  401bf4:	47a8      	blx	r5

		xoff += GAP;
  401bf6:	3c60      	subs	r4, #96	; 0x60
  401bf8:	b2e4      	uxtb	r4, r4
/*! Generic implementation of gfx_draw_bitmap(). */
__always_inline static void gfx_generic_draw_bitmap(
		const struct gfx_bitmap *bmp, gfx_coord_t x,
		gfx_coord_t y)
{
	gfx_put_bitmap(bmp, 0, 0, x, y, bmp->width, bmp->height);
  401bfa:	4848      	ldr	r0, [pc, #288]	; (401d1c <main+0x2b4>)
  401bfc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  401c00:	9302      	str	r3, [sp, #8]
  401c02:	f9b0 3000 	ldrsh.w	r3, [r0]
  401c06:	9301      	str	r3, [sp, #4]
  401c08:	9600      	str	r6, [sp, #0]
  401c0a:	4623      	mov	r3, r4
  401c0c:	2200      	movs	r2, #0
  401c0e:	4611      	mov	r1, r2
  401c10:	4d43      	ldr	r5, [pc, #268]	; (401d20 <main+0x2b8>)
  401c12:	47a8      	blx	r5
			y += STEP) {
  401c14:	f8dd b010 	ldr.w	fp, [sp, #16]
	for (y = STEP; y < (gfx_get_height() - atmel_logo.height - STEP);
  401c18:	4b37      	ldr	r3, [pc, #220]	; (401cf8 <main+0x290>)
  401c1a:	4798      	blx	r3
  401c1c:	4b41      	ldr	r3, [pc, #260]	; (401d24 <main+0x2bc>)
  401c1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  401c22:	1ac3      	subs	r3, r0, r3
  401c24:	3b14      	subs	r3, #20
  401c26:	459b      	cmp	fp, r3
  401c28:	f6ff af53 	blt.w	401ad2 <main+0x6a>

		/* Draw a smiley bitmap */
		gfx_draw_bitmap(&smiley, xoff, y);
	}

	xoff += GAP;
  401c2c:	341e      	adds	r4, #30
  401c2e:	b2e3      	uxtb	r3, r4
  401c30:	9306      	str	r3, [sp, #24]
  401c32:	461f      	mov	r7, r3
	uint16_t start_pos = xoff;
	uint8_t r, g, b;

	/* reset y to the top of the screen */
	y = STEP;
	for (r = 0; r < 32; r += 4) {
  401c34:	2300      	movs	r3, #0
  401c36:	9307      	str	r3, [sp, #28]
	y = STEP;
  401c38:	2614      	movs	r6, #20
			for (b = 0; b < 32; b += 4) {
				/* The gfx_color function expect 8-bit color
				 * values, so we make the color values 8-bit
				 * before passing them.
				 */
				gfx_draw_pixel(xoff++, y,
  401c3a:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 401d2c <main+0x2c4>
  401c3e:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 401d30 <main+0x2c8>
  401c42:	e028      	b.n	401c96 <main+0x22e>
  401c44:	4627      	mov	r7, r4
  401c46:	3501      	adds	r5, #1
			for (b = 0; b < 32; b += 4) {
  401c48:	2d08      	cmp	r5, #8
  401c4a:	d011      	beq.n	401c70 <main+0x208>
				gfx_draw_pixel(xoff++, y,
  401c4c:	1c7c      	adds	r4, r7, #1
  401c4e:	b2e4      	uxtb	r4, r4
  401c50:	016a      	lsls	r2, r5, #5
  401c52:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
  401c56:	9904      	ldr	r1, [sp, #16]
  401c58:	9805      	ldr	r0, [sp, #20]
  401c5a:	47c0      	blx	r8
  401c5c:	4602      	mov	r2, r0
  401c5e:	b231      	sxth	r1, r6
  401c60:	4638      	mov	r0, r7
  401c62:	47c8      	blx	r9
						gfx_color((r << 3), (g << 2), (b << 3)));
				if (xoff >= start_pos + 8) {
  401c64:	455c      	cmp	r4, fp
  401c66:	dbed      	blt.n	401c44 <main+0x1dc>
					xoff = start_pos;
					y++;
  401c68:	3601      	adds	r6, #1
  401c6a:	b2b6      	uxth	r6, r6
					xoff = start_pos;
  401c6c:	9f06      	ldr	r7, [sp, #24]
  401c6e:	e7ea      	b.n	401c46 <main+0x1de>
		for (g = 0; g < 64; g += 4) {
  401c70:	f10a 0a04 	add.w	sl, sl, #4
  401c74:	fa5f fa8a 	uxtb.w	sl, sl
  401c78:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
  401c7c:	d005      	beq.n	401c8a <main+0x222>
  401c7e:	ea4f 038a 	mov.w	r3, sl, lsl #2
  401c82:	b2db      	uxtb	r3, r3
  401c84:	9304      	str	r3, [sp, #16]
	uint8_t color_table_index = 0;
  401c86:	2500      	movs	r5, #0
  401c88:	e7e0      	b.n	401c4c <main+0x1e4>
	for (r = 0; r < 32; r += 4) {
  401c8a:	9b07      	ldr	r3, [sp, #28]
  401c8c:	3304      	adds	r3, #4
  401c8e:	b2db      	uxtb	r3, r3
  401c90:	9307      	str	r3, [sp, #28]
  401c92:	2b20      	cmp	r3, #32
  401c94:	d009      	beq.n	401caa <main+0x242>
  401c96:	9b07      	ldr	r3, [sp, #28]
  401c98:	00db      	lsls	r3, r3, #3
  401c9a:	b2db      	uxtb	r3, r3
  401c9c:	9305      	str	r3, [sp, #20]
					xoff = start_pos;
  401c9e:	f04f 0a00 	mov.w	sl, #0
				if (xoff >= start_pos + 8) {
  401ca2:	9b06      	ldr	r3, [sp, #24]
  401ca4:	f103 0b08 	add.w	fp, r3, #8
  401ca8:	e7e9      	b.n	401c7e <main+0x216>
			}
		}
	}

	/* Draw the Atmel logo (186x85 pixels) at the bottom of the screen */
	gfx_draw_bitmap(&atmel_logo, (gfx_get_width() - atmel_logo.width) / 2,
  401caa:	4b12      	ldr	r3, [pc, #72]	; (401cf4 <main+0x28c>)
  401cac:	4798      	blx	r3
  401cae:	4b1d      	ldr	r3, [pc, #116]	; (401d24 <main+0x2bc>)
  401cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
  401cb4:	1ac0      	subs	r0, r0, r3
  401cb6:	bf48      	it	mi
  401cb8:	3001      	addmi	r0, #1
  401cba:	f340 044f 	sbfx	r4, r0, #1, #16
  401cbe:	4b0e      	ldr	r3, [pc, #56]	; (401cf8 <main+0x290>)
  401cc0:	4798      	blx	r3
  401cc2:	4d18      	ldr	r5, [pc, #96]	; (401d24 <main+0x2bc>)
  401cc4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  401cc8:	9302      	str	r3, [sp, #8]
  401cca:	f9b5 2000 	ldrsh.w	r2, [r5]
  401cce:	9201      	str	r2, [sp, #4]
  401cd0:	1ac3      	subs	r3, r0, r3
  401cd2:	b21b      	sxth	r3, r3
  401cd4:	9300      	str	r3, [sp, #0]
  401cd6:	4623      	mov	r3, r4
  401cd8:	2200      	movs	r2, #0
  401cda:	4611      	mov	r1, r2
  401cdc:	4628      	mov	r0, r5
  401cde:	4c10      	ldr	r4, [pc, #64]	; (401d20 <main+0x2b8>)
  401ce0:	47a0      	blx	r4
  401ce2:	e7fe      	b.n	401ce2 <main+0x27a>
  401ce4:	00400c75 	.word	0x00400c75
  401ce8:	004001ad 	.word	0x004001ad
  401cec:	004009b1 	.word	0x004009b1
  401cf0:	004008ad 	.word	0x004008ad
  401cf4:	00400271 	.word	0x00400271
  401cf8:	0040027d 	.word	0x0040027d
  401cfc:	00400289 	.word	0x00400289
  401d00:	20400000 	.word	0x20400000
  401d04:	004060a4 	.word	0x004060a4
  401d08:	00400b25 	.word	0x00400b25
  401d0c:	00406098 	.word	0x00406098
  401d10:	aaaaaaab 	.word	0xaaaaaaab
  401d14:	00400591 	.word	0x00400591
  401d18:	00400465 	.word	0x00400465
  401d1c:	20400020 	.word	0x20400020
  401d20:	00400715 	.word	0x00400715
  401d24:	20400014 	.word	0x20400014
  401d28:	00400361 	.word	0x00400361
  401d2c:	004008ed 	.word	0x004008ed
  401d30:	00400905 	.word	0x00400905

00401d34 <__libc_init_array>:
  401d34:	b570      	push	{r4, r5, r6, lr}
  401d36:	4e0f      	ldr	r6, [pc, #60]	; (401d74 <__libc_init_array+0x40>)
  401d38:	4d0f      	ldr	r5, [pc, #60]	; (401d78 <__libc_init_array+0x44>)
  401d3a:	1b76      	subs	r6, r6, r5
  401d3c:	10b6      	asrs	r6, r6, #2
  401d3e:	bf18      	it	ne
  401d40:	2400      	movne	r4, #0
  401d42:	d005      	beq.n	401d50 <__libc_init_array+0x1c>
  401d44:	3401      	adds	r4, #1
  401d46:	f855 3b04 	ldr.w	r3, [r5], #4
  401d4a:	4798      	blx	r3
  401d4c:	42a6      	cmp	r6, r4
  401d4e:	d1f9      	bne.n	401d44 <__libc_init_array+0x10>
  401d50:	4e0a      	ldr	r6, [pc, #40]	; (401d7c <__libc_init_array+0x48>)
  401d52:	4d0b      	ldr	r5, [pc, #44]	; (401d80 <__libc_init_array+0x4c>)
  401d54:	1b76      	subs	r6, r6, r5
  401d56:	f004 fb4d 	bl	4063f4 <_init>
  401d5a:	10b6      	asrs	r6, r6, #2
  401d5c:	bf18      	it	ne
  401d5e:	2400      	movne	r4, #0
  401d60:	d006      	beq.n	401d70 <__libc_init_array+0x3c>
  401d62:	3401      	adds	r4, #1
  401d64:	f855 3b04 	ldr.w	r3, [r5], #4
  401d68:	4798      	blx	r3
  401d6a:	42a6      	cmp	r6, r4
  401d6c:	d1f9      	bne.n	401d62 <__libc_init_array+0x2e>
  401d6e:	bd70      	pop	{r4, r5, r6, pc}
  401d70:	bd70      	pop	{r4, r5, r6, pc}
  401d72:	bf00      	nop
  401d74:	00406400 	.word	0x00406400
  401d78:	00406400 	.word	0x00406400
  401d7c:	00406408 	.word	0x00406408
  401d80:	00406400 	.word	0x00406400

00401d84 <register_fini>:
  401d84:	4b02      	ldr	r3, [pc, #8]	; (401d90 <register_fini+0xc>)
  401d86:	b113      	cbz	r3, 401d8e <register_fini+0xa>
  401d88:	4802      	ldr	r0, [pc, #8]	; (401d94 <register_fini+0x10>)
  401d8a:	f000 b805 	b.w	401d98 <atexit>
  401d8e:	4770      	bx	lr
  401d90:	00000000 	.word	0x00000000
  401d94:	00401da5 	.word	0x00401da5

00401d98 <atexit>:
  401d98:	2300      	movs	r3, #0
  401d9a:	4601      	mov	r1, r0
  401d9c:	461a      	mov	r2, r3
  401d9e:	4618      	mov	r0, r3
  401da0:	f000 b81e 	b.w	401de0 <__register_exitproc>

00401da4 <__libc_fini_array>:
  401da4:	b538      	push	{r3, r4, r5, lr}
  401da6:	4c0a      	ldr	r4, [pc, #40]	; (401dd0 <__libc_fini_array+0x2c>)
  401da8:	4d0a      	ldr	r5, [pc, #40]	; (401dd4 <__libc_fini_array+0x30>)
  401daa:	1b64      	subs	r4, r4, r5
  401dac:	10a4      	asrs	r4, r4, #2
  401dae:	d00a      	beq.n	401dc6 <__libc_fini_array+0x22>
  401db0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  401db4:	3b01      	subs	r3, #1
  401db6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  401dba:	3c01      	subs	r4, #1
  401dbc:	f855 3904 	ldr.w	r3, [r5], #-4
  401dc0:	4798      	blx	r3
  401dc2:	2c00      	cmp	r4, #0
  401dc4:	d1f9      	bne.n	401dba <__libc_fini_array+0x16>
  401dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401dca:	f004 bb1d 	b.w	406408 <_fini>
  401dce:	bf00      	nop
  401dd0:	00406418 	.word	0x00406418
  401dd4:	00406414 	.word	0x00406414

00401dd8 <__retarget_lock_acquire_recursive>:
  401dd8:	4770      	bx	lr
  401dda:	bf00      	nop

00401ddc <__retarget_lock_release_recursive>:
  401ddc:	4770      	bx	lr
  401dde:	bf00      	nop

00401de0 <__register_exitproc>:
  401de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401de4:	4d2c      	ldr	r5, [pc, #176]	; (401e98 <__register_exitproc+0xb8>)
  401de6:	4606      	mov	r6, r0
  401de8:	6828      	ldr	r0, [r5, #0]
  401dea:	4698      	mov	r8, r3
  401dec:	460f      	mov	r7, r1
  401dee:	4691      	mov	r9, r2
  401df0:	f7ff fff2 	bl	401dd8 <__retarget_lock_acquire_recursive>
  401df4:	4b29      	ldr	r3, [pc, #164]	; (401e9c <__register_exitproc+0xbc>)
  401df6:	681c      	ldr	r4, [r3, #0]
  401df8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  401dfc:	2b00      	cmp	r3, #0
  401dfe:	d03e      	beq.n	401e7e <__register_exitproc+0x9e>
  401e00:	685a      	ldr	r2, [r3, #4]
  401e02:	2a1f      	cmp	r2, #31
  401e04:	dc1c      	bgt.n	401e40 <__register_exitproc+0x60>
  401e06:	f102 0e01 	add.w	lr, r2, #1
  401e0a:	b176      	cbz	r6, 401e2a <__register_exitproc+0x4a>
  401e0c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  401e10:	2401      	movs	r4, #1
  401e12:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  401e16:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  401e1a:	4094      	lsls	r4, r2
  401e1c:	4320      	orrs	r0, r4
  401e1e:	2e02      	cmp	r6, #2
  401e20:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  401e24:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  401e28:	d023      	beq.n	401e72 <__register_exitproc+0x92>
  401e2a:	3202      	adds	r2, #2
  401e2c:	f8c3 e004 	str.w	lr, [r3, #4]
  401e30:	6828      	ldr	r0, [r5, #0]
  401e32:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  401e36:	f7ff ffd1 	bl	401ddc <__retarget_lock_release_recursive>
  401e3a:	2000      	movs	r0, #0
  401e3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401e40:	4b17      	ldr	r3, [pc, #92]	; (401ea0 <__register_exitproc+0xc0>)
  401e42:	b30b      	cbz	r3, 401e88 <__register_exitproc+0xa8>
  401e44:	f44f 70c8 	mov.w	r0, #400	; 0x190
  401e48:	f3af 8000 	nop.w
  401e4c:	4603      	mov	r3, r0
  401e4e:	b1d8      	cbz	r0, 401e88 <__register_exitproc+0xa8>
  401e50:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  401e54:	6002      	str	r2, [r0, #0]
  401e56:	2100      	movs	r1, #0
  401e58:	6041      	str	r1, [r0, #4]
  401e5a:	460a      	mov	r2, r1
  401e5c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  401e60:	f04f 0e01 	mov.w	lr, #1
  401e64:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  401e68:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  401e6c:	2e00      	cmp	r6, #0
  401e6e:	d0dc      	beq.n	401e2a <__register_exitproc+0x4a>
  401e70:	e7cc      	b.n	401e0c <__register_exitproc+0x2c>
  401e72:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  401e76:	430c      	orrs	r4, r1
  401e78:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  401e7c:	e7d5      	b.n	401e2a <__register_exitproc+0x4a>
  401e7e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  401e82:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  401e86:	e7bb      	b.n	401e00 <__register_exitproc+0x20>
  401e88:	6828      	ldr	r0, [r5, #0]
  401e8a:	f7ff ffa7 	bl	401ddc <__retarget_lock_release_recursive>
  401e8e:	f04f 30ff 	mov.w	r0, #4294967295
  401e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401e96:	bf00      	nop
  401e98:	20400458 	.word	0x20400458
  401e9c:	004063f0 	.word	0x004063f0
  401ea0:	00000000 	.word	0x00000000

00401ea4 <sysfont_glyphs>:
  401ea4:	00000000 20000000 20202020 50502000     .......     . PP
  401eb4:	00000050 f8505000 5050f850 70a07820     P....PP.P.PP x.p
  401ec4:	c020f028 402010c8 90601898 90a840a0     (. ... @..`..@..
  401ed4:	40206068 00000000 40402010 40102040     h` @..... @@@ .@
  401ee4:	10101020 50004020 5020f820 20200000      ... @.P . P..  
  401ef4:	002020f8 00000000 00402060 00f80000     .  .....` @.....
  401f04:	00000000 60000000 10080060 00804020     .......``... @..
  401f14:	a8988870 207088c8 20202060 88707020     p.....p `    pp.
  401f24:	40201008 2010f8f8 70880810 90503010     .. @... ...p.0P.
  401f34:	f81010f8 0808f080 40307088 8888f080     .........p0@....
  401f44:	1008f870 40404020 70888870 70708888     p... @@@p..p..pp
  401f54:	08788888 60006010 60600060 60600000     ..x..`.``.``..``
  401f64:	40206000 40201008 00081020 f800f800     .` @.. @ .......
  401f74:	40800000 40201020 08887080 20002010     ...@ . @.p... . 
  401f84:	68088870 7070a8a8 f8888888 88f08888     p..h..pp........
  401f94:	8888f088 808870f0 70888080 888890e0     .....p.....p....
  401fa4:	f8e09088 80f08080 80f8f880 8080e080     ................
  401fb4:	80887080 70889880 f8888888 70888888     .p.....p.......p
  401fc4:	20202020 10387020 90101010 a0908860          p8.....`...
  401fd4:	8890a0c0 80808080 88f88080 8888a8d8     ................
  401fe4:	88888888 8898a8c8 88887088 70888888     .........p.....p
  401ff4:	f08888f0 70808080 a8888888 88f06890     .......p.....h..
  402004:	90a0f088 80807888 f0080870 202020f8     .....x..p....   
  402014:	88202020 88888888 88887088 50888888        ......p.....P
  402024:	88888820 88d8a8a8 20508888 88888850      .........P P...
  402034:	20205088 08f82020 80402010 202038f8     .P    ... @..8  
  402044:	38202020 20408000 e0000810 20202020        8..@ ....    
  402054:	5020e020 00000088 00000000 f8000000      . P............
  402064:	00102040 00000000 78087000 80807888     @ .......p.x.x..
  402074:	8888c8b0 700000f0 70888080 98680808     .......p...p..h.
  402084:	00788888 f8887000 48307080 4040e040     ..x..p...p0H@.@@
  402094:	78000040 30087888 c8b08080 20888888     @..x.x.0....... 
  4020a4:	20206000 00107020 90101030 48404060     .`   p..0...`@@H
  4020b4:	48506050 20202060 00702020 a8a8d000     P`PH`     p.....
  4020c4:	00008888 8888c8b0 70000088 70888888     ...........p...p
  4020d4:	88f00000 008080f0 78986800 00000808     .........h.x....
  4020e4:	8080c8b0 70000080 f0087080 40e04040     .......p.p..@@.@
  4020f4:	00304840 88888800 00006898 50888888     @H0......h.....P
  402104:	88000020 50a8a888 50880000 00885020      ......P...P P..
  402114:	78888800 00007008 402010f8 202010f8     ...x.p.... @..  
  402124:	10202040 20202020 40202020 20102020     @  .       @  . 
  402134:	00004020                                 @..

00402138 <atmel_logo_data>:
  402138:	ffffffff ffffffff ffffffff ffffffff     ................
  402148:	ffffffff ffffffff ffffffff ffffffff     ................
  402158:	ffffffff ffffffff ffffffff ffffffff     ................
  402168:	ffffffff ffffffff ffffffff ffffffff     ................
  402178:	ffffffff ffffffff ffffffff ffffffff     ................
  402188:	ffffffff ffffffff ffffffff ffffffff     ................
  402198:	ffffffff ffffffff ffffffff ffffffff     ................
  4021a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4021b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4021c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4021d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4021e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4021f8:	ffffffff ffffffff ffffffff ffffffff     ................
  402208:	ffffffff ffffffff ffffffff ffffffff     ................
  402218:	ffffffff ffffffff ffffffff ffffffff     ................
  402228:	ffffffff ffffffff ffffffff ffffffff     ................
  402238:	ffffffff ffffffff ffffffff ffffffff     ................
  402248:	ffffffff ffffffff ffffffff ffffffff     ................
  402258:	ffffffff ffffffff ffffffff ffffffff     ................
  402268:	ffffffff ffffffff ffffffff ffffffff     ................
  402278:	ffffffff ffffffff ffffffff ffffffff     ................
  402288:	ffffffff ffffffff ffffffff ffffffff     ................
  402298:	ffffffff ffffffff ffffffff ffffffff     ................
  4022a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4022b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4022c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4022d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4022e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4022f8:	ffffffff ffffffff ffffffff ffffffff     ................
  402308:	ffffffff ffffffff ffffffff ffffffff     ................
  402318:	ffffffff ffffffff ffffffff ffffffff     ................
  402328:	ffffffff ffffffff ffffffff ffffffff     ................
  402338:	ffffffff ffffffff ffffffff ffffffff     ................
  402348:	ffffffff ffffffff ffffffff ffffffff     ................
  402358:	ffffffff ffffffff ffffffff ffffffff     ................
  402368:	ffffffff ffffffff ffffffff ffffffff     ................
  402378:	ffffffff ffffffff ffffffff ffffffff     ................
  402388:	ffffffff ffffffff ffffffff ffffffff     ................
  402398:	ffffffff ffffffff ffffffff ffffffff     ................
  4023a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4023b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4023c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4023d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4023e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4023f8:	ffffffff ffffffff ffffffff ffffffff     ................
  402408:	ffffffff ffffffff ffffffff ffffffff     ................
  402418:	ffffffff ffffffff ffffffff ffffffff     ................
  402428:	ffffffff ffffffff ffffffff ffffffff     ................
  402438:	ffffffff ffffffff ffffffff ffffffff     ................
  402448:	ffffffff ffffffff ffffffff ffffffff     ................
  402458:	ffffffff ffffffff ffffffff ffffffff     ................
  402468:	ffffffff ffffffff ffffffff ffffffff     ................
  402478:	ffffffff ffffffff ffffffff ffffffff     ................
  402488:	ffffffff ffffffff ffffffff ffffffff     ................
  402498:	ffffffff ffffffff ffffffff ffffffff     ................
  4024a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4024b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4024c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4024d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4024e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4024f8:	ffffffff ffffffff ffffffff ffffffff     ................
  402508:	ffffffff ffffffff ffffffff ffffffff     ................
  402518:	ffffffff ffffffff ffffffff ffffffff     ................
  402528:	ffffffff ffffffff ffffffff ffffffff     ................
  402538:	ffffffff ffffffff ffffffff ffffffff     ................
  402548:	ffffffff ffffffff ffffffff ffffffff     ................
  402558:	ffffffff ffffffff ffffffff ffffffff     ................
  402568:	ffffffff ffffffff ffffffff ffffffff     ................
  402578:	ffffffff ffffffff ffffffff ffffffff     ................
  402588:	ffffffff ffffffff ffffffff ffffffff     ................
  402598:	ffffffff ffffffff ffffffff ffffffff     ................
  4025a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4025b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4025c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4025d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4025e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4025f8:	ffffffff ffffffff ffffffff ffffffff     ................
  402608:	ffffffff ffffffff ffffffff ffffffff     ................
  402618:	ffffffff ffffffff ffffffff ffffffff     ................
  402628:	ffffffff ffffffff ffffffff ffffffff     ................
  402638:	ffffffff ffffffff ffffffff ffffffff     ................
  402648:	ffffffff ffffffff ffffffff ffffffff     ................
  402658:	ffffffff ffffffff ffffffff ffffffff     ................
  402668:	ffffffff ffffffff ffffffff ffffffff     ................
  402678:	ffffffff ffffffff ffffffff ffffffff     ................
  402688:	ffffffff ffffffff ffffffff ffffffff     ................
  402698:	ffffffff ffffffff ffffffff ffffffff     ................
  4026a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4026b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4026c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4026d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4026e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4026f8:	ffffffff ffffffff ffffffff ffffffff     ................
  402708:	ffffffff ffffffff ffffffff ffffffff     ................
  402718:	ffffffff ffffffff ffffffff ffffffff     ................
  402728:	ffffffff ffffffff ffffffff ffffffff     ................
  402738:	ffffffff ffffffff ffffffff ffffffff     ................
  402748:	ffffffff ffffffff ffffffff ffffffff     ................
  402758:	ffffffff ffffffff ffffffff ffffffff     ................
  402768:	ffffffff ffffffff ffffffff ffffffff     ................
  402778:	ffffffff ffffffff ffffffff ffffffff     ................
  402788:	ffffffff ffffffff ffffffff ffffffff     ................
  402798:	ffffffff ffffffff ffffffff ffffffff     ................
  4027a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4027b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4027c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4027d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4027e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4027f8:	ffffffff ffffffff ffffffff ffffffff     ................
  402808:	ffffffff ffffffff ffffffff ffffffff     ................
  402818:	ffffffff ffffffff ffffffff ffffffff     ................
  402828:	ffffffff ffffffff ffffffff ffffffff     ................
  402838:	ffffffff ffffffff ffffffff ffffffff     ................
  402848:	ffffffff ffffffff ffffffff ffffffff     ................
  402858:	ffffffff ffffffff ffffffff ffffffff     ................
  402868:	ffffffff ffffffff ffffffff ffffffff     ................
  402878:	ffffffff ffffffff ffffffff ffffffff     ................
  402888:	ffffffff ffffffff ffffffff ffffffff     ................
  402898:	ffffffff ffffffff ffffffff ffffffff     ................
  4028a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4028b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4028c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4028d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4028e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4028f8:	ffffffff ffffffff ffffffff ffffffff     ................
  402908:	ffffffff ffffffff ffffffff ffffffff     ................
  402918:	ffffffff ffffffff ffffffff ffffffff     ................
  402928:	ffffffff ffffffff ffffffff ffffffff     ................
  402938:	ffffffff ffffffff ffffffff ffffffff     ................
  402948:	ffffffff ffffffff ffffffff ffffffff     ................
  402958:	ffffffff ffffffff ffffffff ffffffff     ................
  402968:	ffffffff ffffffff ffffffff ffffffff     ................
  402978:	ffffffff ffffffff ffffffff ffffffff     ................
  402988:	ffffffff ffffffff ffffffff ffffffff     ................
  402998:	ffffffff ffffffff ffffffff ffffffff     ................
  4029a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4029b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4029c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4029d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4029e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4029f8:	ffffffff ffffffff befdbefd befdbefd     ................
  402a08:	befdbefd ffffcf3e ffffffff ffffffff     ....>...........
  402a18:	cf3effff befdbefd befdbefd ffffcf3e     ..>.........>...
  402a28:	ffffffff ffffffff ffffffff ffffffff     ................
  402a38:	ffffffff ffffffff ffffffff ffffffff     ................
  402a48:	ffffffff ffffffff ffffffff ffffffff     ................
  402a58:	ffffffff ffffffff ffffffff ffffffff     ................
  402a68:	ffffffff ffffffff ffffffff ffffffff     ................
  402a78:	ffffffff ffffffff ffffffff ffffffff     ................
  402a88:	ffffffff ffffffff ffffffff ffffffff     ................
  402a98:	ffffffff ffffffff ffffffff ffffffff     ................
  402aa8:	ffffffff ffffffff ffffffff ffffffff     ................
  402ab8:	ffffffff ffffffff ffffffff ffffffff     ................
  402ac8:	ffffffff df7effff befdbefd befdbefd     ......~.........
  402ad8:	efbfbefd ffffffff ffffffff befdcf3e     ............>...
  402ae8:	ffffefbf ffffffff ffffffff ffffffff     ................
  402af8:	ffffffff ffffffff ffffffff ffffffff     ................
  402b08:	ffffffff ffffffff ffffffff ffffffff     ................
  402b18:	ffffffff ffffffff ffffffff ffffffff     ................
  402b28:	ffffffff ffffffff ffffffff 8e3cffff     ..............<.
  402b38:	03d803d8 03d803d8 03d803d8 ffff44da     .............D..
  402b48:	ffffffff ffffffff 44daffff 03d803d8     ...........D....
  402b58:	03d803d8 ffff44da ffffffff ffffffff     .....D..........
  402b68:	ffffffff ffffffff ffffffff ffffffff     ................
  402b78:	ffffffff ffffffff ffffffff ffffffff     ................
  402b88:	ffffffff ffffffff ffffffff ffffffff     ................
  402b98:	ffffffff ffffffff ffffffff ffffffff     ................
  402ba8:	ffffffff ffffffff ffffffff ffffffff     ................
  402bb8:	ffffffff ffffffff ffffffff ffffffff     ................
  402bc8:	ffffffff ffffffff ffffffff ffffffff     ................
  402bd8:	ffffffff ffffffff ffffffff ffffffff     ................
  402be8:	ffffffff ffffffff ffffffff ffffffff     ................
  402bf8:	ffffffff ffffffff ffffffff 7ddcffff     ...............}
  402c08:	03d803d8 03d803d8 befd03d8 ffffffff     ................
  402c18:	655bffff 759b551a cf3e2459 ffffffff     ..[e.U.uY$>.....
  402c28:	ffffffff ffffffff ffffffff ffffffff     ................
  402c38:	ffffffff ffffffff ffffffff ffffffff     ................
  402c48:	ffffffff ffffffff ffffffff ffffffff     ................
  402c58:	ffffffff ffffffff ffffffff ffffffff     ................
  402c68:	ffffffff 03d89e7d 03d803d8 03d803d8     ....}...........
  402c78:	03d803d8 ffff44da ffffffff ffffffff     .....D..........
  402c88:	44daffff 03d803d8 03d803d8 ffff44da     ...D.........D..
  402c98:	ffffffff ffffffff ffffffff ffffffff     ................
  402ca8:	ffffffff ffffffff ffffffff ffffffff     ................
  402cb8:	ffffffff ffffffff ffffffff ffffffff     ................
  402cc8:	ffffffff ffffffff ffffffff ffffffff     ................
  402cd8:	ffffffff ffffffff ffffffff ffffffff     ................
  402ce8:	ffffffff ffffffff ffffffff ffffffff     ................
  402cf8:	ffffffff ffffffff ffffffff ffffffff     ................
  402d08:	ffffffff ffffffff ffffffff ffffffff     ................
  402d18:	ffffffff ffffffff ffffffff ffffffff     ................
  402d28:	ffffffff ffffffff ffffffff ffffffff     ................
  402d38:	ffffffff 7ddcffff 03d803d8 03d803d8     .......}........
  402d48:	befd03d8 ffffffff 551acf3e 349944da     ........>..U.D.4
  402d58:	551a8e3c ffffffff ffffffff ffffffff     <..U............
  402d68:	ffffffff ffffffff ffffffff ffffffff     ................
  402d78:	ffffffff ffffffff ffffffff ffffffff     ................
  402d88:	ffffffff ffffffff ffffffff ffffffff     ................
  402d98:	ffffffff ffffffff cf3effff 03d81418     ..........>.....
  402da8:	03d803d8 03d803d8 03d803d8 ffff44da     .............D..
  402db8:	ffffffff ffffffff 44daffff 03d803d8     ...........D....
  402dc8:	03d803d8 ffff44da ffffffff ffffffff     .....D..........
  402dd8:	ffffffff ffffffff ffffffff ffffffff     ................
  402de8:	ffffffff ffffffff ffffffff ffffffff     ................
  402df8:	ffffffff ffffffff ffffffff ffffffff     ................
  402e08:	ffffffff ffffffff ffffffff ffffffff     ................
  402e18:	ffffffff ffffffff ffffffff ffffffff     ................
  402e28:	ffffffff ffffffff ffffffff ffffffff     ................
  402e38:	ffffffff ffffffff ffffffff ffffffff     ................
  402e48:	ffffffff ffffffff ffffffff ffffffff     ................
  402e58:	ffffffff ffffffff ffffffff ffffffff     ................
  402e68:	ffffffff ffffffff ffffffff 7ddcffff     ...............}
  402e78:	03d803d8 03d803d8 befd03d8 ffffffff     ................
  402e88:	759bbefd 349944da 44dabefd ffffffff     ...u.D.4...D....
  402e98:	ffffffff ffffffff ffffffff ffffffff     ................
  402ea8:	ffffffff ffffffff ffffffff ffffffff     ................
  402eb8:	ffffffff ffffffff ffffffff ffffffff     ................
  402ec8:	ffffffff ffffffff ffffffff ffffffff     ................
  402ed8:	1418efbf 03d803d8 03d803d8 03d803d8     ................
  402ee8:	03d803d8 ffff44da ffffffff ffffffff     .....D..........
  402ef8:	44daffff 03d803d8 03d803d8 ffff44da     ...D.........D..
  402f08:	ffffffff ffffffff ffffffff ffffffff     ................
  402f18:	ffffffff ffffffff ffffffff ffffffff     ................
  402f28:	ffffffff ffffffff ffffffff ffffffff     ................
  402f38:	ffffffff ffffffff ffffffff ffffffff     ................
  402f48:	ffffffff ffffffff ffffffff ffffffff     ................
  402f58:	ffffffff ffffffff ffffffff ffffffff     ................
  402f68:	ffffffff ffffffff ffffffff ffffffff     ................
  402f78:	ffffffff ffffffff ffffffff ffffffff     ................
  402f88:	ffffffff ffffffff ffffffff ffffffff     ................
  402f98:	ffffffff ffffffff ffffffff ffffffff     ................
  402fa8:	ffffffff 7ddcffff 03d803d8 03d803d8     .......}........
  402fb8:	befd03d8 ffffffff 2459efbf befd655b     ..........Y$[e..
  402fc8:	9e7d2459 ffffffff ffffffff ffffffff     Y$}.............
  402fd8:	ffffffff ffffffff ffffffff ffffffff     ................
  402fe8:	ffffffff ffffffff ffffffff ffffffff     ................
  402ff8:	ffffffff ffffffff ffffffff ffffffff     ................
  403008:	ffffffff efbfffff 03d83499 03d803d8     .........4......
  403018:	03d803d8 03d803d8 03d803d8 ffff44da     .............D..
  403028:	ffffffff ffffffff 44daffff 03d803d8     ...........D....
  403038:	03d803d8 ffff44da ffffffff ffffffff     .....D..........
  403048:	ffffffff ffffffff ffffffff ffffffff     ................
  403058:	ffffffff ffffffff ffffffff ffffffff     ................
  403068:	ffffffff ffffffff ffffffff ffffffff     ................
  403078:	ffffffff ffffffff ffffffff ffffffff     ................
  403088:	ffffffff ffffffff ffffffff ffffffff     ................
  403098:	ffffffff ffffffff ffffffff ffffffff     ................
  4030a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4030b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4030c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4030d8:	ffffffff ffffffff ffffffff 7ddcffff     ...............}
  4030e8:	03d803d8 03d803d8 befd03d8 ffffffff     ................
  4030f8:	cf3effff 44da551a ffff9e7d ffffffff     ..>..U.D}.......
  403108:	ffffffff ffffffff ffffffff ffffffff     ................
  403118:	ffffffff ffffffff ffffffff ffffffff     ................
  403128:	ffffffff ffffffff ffffffff ffffffff     ................
  403138:	ffffffff ffffffff ffffffff 551affff     ...............U
  403148:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  403158:	03d803d8 ffff44da ffffffff ffffffff     .....D..........
  403168:	44daffff 03d803d8 03d803d8 ffff44da     ...D.........D..
  403178:	ffffffff ffffffff ffffffff ffffffff     ................
  403188:	ffffffff ffffffff ffffffff ffffffff     ................
  403198:	ffffffff ffffffff ffffffff ffffffff     ................
  4031a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4031b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4031c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4031d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4031e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4031f8:	ffffffff ffffffff ffffffff ffffffff     ................
  403208:	ffffffff ffffffff ffffffff ffffffff     ................
  403218:	ffffffff 7ddcffff 03d803d8 03d803d8     .......}........
  403228:	befd03d8 ffffffff ffffffff ffffffff     ................
  403238:	ffffffff ffffffff ffffffff ffffffff     ................
  403248:	ffffffff ffffffff ffffffff ffffffff     ................
  403258:	ffffffff ffffffff ffffffff ffffffff     ................
  403268:	ffffffff ffffffff ffffffff ffffffff     ................
  403278:	ffffffff 03d8759b 03d803d8 03d803d8     .....u..........
  403288:	03d803d8 03d803d8 03d803d8 ffff44da     .............D..
  403298:	ffffffff ffffffff 44daffff 03d803d8     ...........D....
  4032a8:	03d803d8 ffff44da ffffffff ffffffff     .....D..........
  4032b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4032c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4032d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4032e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4032f8:	ffffffff ffffffff ffffffff ffffffff     ................
  403308:	ffffffff ffffffff ffffffff ffffffff     ................
  403318:	ffffffff ffffffff ffffffff ffffffff     ................
  403328:	ffffffff ffffffff ffffffff ffffffff     ................
  403338:	ffffffff ffffffff ffffffff ffffffff     ................
  403348:	ffffffff ffffffff ffffffff 7ddcffff     ...............}
  403358:	03d803d8 03d803d8 befd03d8 ffffffff     ................
  403368:	ffffffff ffffffff ffffffff ffffffff     ................
  403378:	ffffffff ffffffff ffffffff ffffffff     ................
  403388:	ffffffff ffffffff ffffffff ffffffff     ................
  403398:	ffffffff ffffffff ffffffff ffffffff     ................
  4033a8:	ffffffff ffffffff 9e7dffff 03d803d8     ..........}.....
  4033b8:	03d803d8 03d803d8 03d8655b 03d803d8     ........[e......
  4033c8:	03d803d8 ffff44da ffffffff ffffffff     .....D..........
  4033d8:	44daffff 03d803d8 03d803d8 ffff44da     ...D.........D..
  4033e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4033f8:	ffffffff ffffffff ffffffff ffffffff     ................
  403408:	ffffffff ffffffff ffffffff ffffffff     ................
  403418:	ffffffff ffffffff ffffffff ffffffff     ................
  403428:	ffffffff ffffffff ffffffff ffffffff     ................
  403438:	ffffffff ffffffff ffffffff ffffffff     ................
  403448:	ffffffff ffffffff ffffffff ffffffff     ................
  403458:	ffffffff ffffffff ffffffff ffffffff     ................
  403468:	ffffffff ffffffff ffffffff ffffffff     ................
  403478:	ffffffff ffffffff ffffffff ffffffff     ................
  403488:	ffffffff 7ddcffff 03d803d8 03d803d8     .......}........
  403498:	befd03d8 ffffffff ffffffff ffffffff     ................
  4034a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4034b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4034c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4034d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4034e8:	03d8befd 03d803d8 03d803d8 551a03d8     ...............U
  4034f8:	03d8ffff 03d803d8 03d803d8 ffff44da     .............D..
  403508:	ffffffff ffffffff 44daffff 03d803d8     ...........D....
  403518:	03d803d8 ffff44da ffffffff ffffffff     .....D..........
  403528:	ffffffff ffffffff ffffffff ffffffff     ................
  403538:	ffffffff ffffffff ffffffff ffffffff     ................
  403548:	ffffffff ffffffff ffffffff ffffffff     ................
  403558:	ffffffff ffffffff ffffffff ffffffff     ................
  403568:	ffffffff ffffffff ffffffff ffffffff     ................
  403578:	ffffffff ffffffff ffffffff ffffffff     ................
  403588:	ffffffff ffffffff ffffffff ffffffff     ................
  403598:	ffffffff ffffffff ffffffff ffffffff     ................
  4035a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4035b8:	ffffffff ffffffff ffffffff 7ddcffff     ...............}
  4035c8:	03d803d8 03d803d8 befd03d8 ffffffff     ................
  4035d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4035e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4035f8:	ffffffff ffffffff ffffffff ffffffff     ................
  403608:	ffffffff ffffffff ffffffff ffffffff     ................
  403618:	ffffffff cf3effff 03d81418 03d803d8     ......>.........
  403628:	03d803d8 efbf3499 03d8ffff 03d803d8     .....4..........
  403638:	03d803d8 ffff44da ffffffff 7ddc9e7d     .....D......}..}
  403648:	24597ddc 03d803d8 03d803d8 7ddc2459     .}Y$........Y$.}
  403658:	7ddc7ddc 7ddc7ddc 7ddc7ddc df7e7ddc     .}.}.}.}.}.}.}~.
  403668:	ffffffff ffffffff ffffffff ffffffff     ................
  403678:	ffffffff 7ddccf3e 44da551a 44da44da     ....>..}.U.D.D.D
  403688:	aebd7ddc ffffffff ffffffff ffffffff     .}..............
  403698:	ffffffff befdffff 44da7ddc 44da44da     .........}.D.D.D
  4036a8:	7ddc44da ffffcf3e ffffffff ffffffff     .D.}>...........
  4036b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4036c8:	ffffffff ffffffff ffffffff 759baebd     ...............u
  4036d8:	245944da 03d803d8 44da03d8 9e7d551a     .DY$.......D.U}.
  4036e8:	ffffdf7e ffffffff ffffffff ffffffff     ~...............
  4036f8:	ffffffff 7ddcffff 03d803d8 03d803d8     .......}........
  403708:	befd03d8 ffffffff ffffffff ffffffff     ................
  403718:	ffffffff ffffffff ffffffff ffffffff     ................
  403728:	ffffffff ffffffff ffffffff ffffffff     ................
  403738:	ffffffff ffffffff ffffffff ffffffff     ................
  403748:	ffffffff ffffffff ffffffff 3499efbf     ...............4
  403758:	03d803d8 03d803d8 141803d8 ffffdf7e     ............~...
  403768:	03d8ffff 03d803d8 03d803d8 ffff44da     .............D..
  403778:	ffffffff 03d844da 03d803d8 03d803d8     .....D..........
  403788:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  403798:	03d803d8 befd03d8 ffffffff ffffffff     ................
  4037a8:	ffffffff ffffffff 2459aebd 03d803d8     ..........Y$....
  4037b8:	03d803d8 03d803d8 03d803d8 8e3c2459     ............Y$<.
  4037c8:	ffffffff ffffffff 9e7dffff 03d82459     ..........}.Y$..
  4037d8:	03d803d8 03d803d8 03d803d8 245903d8     ..............Y$
  4037e8:	ffff9e7d ffffffff ffffffff ffffffff     }...............
  4037f8:	ffffffff ffffffff ffffffff ffffffff     ................
  403808:	24597ddc 03d803d8 03d803d8 03d803d8     .}Y$............
  403818:	03d803d8 03d803d8 655b03d8 ffffdf7e     ..........[e~...
  403828:	ffffffff ffffffff ffffffff 7ddcffff     ...............}
  403838:	03d803d8 03d803d8 befd03d8 ffffffff     ................
  403848:	ffffffff ffffffff ffffffff ffffffff     ................
  403858:	ffffffff ffffffff ffffffff ffffffff     ................
  403868:	ffffffff ffffffff ffffffff ffffffff     ................
  403878:	ffffffff ffffffff ffffffff ffffffff     ................
  403888:	ffffffff 03d83499 03d803d8 03d803d8     .....4..........
  403898:	cf3e1418 ffffffff 03d8ffff 03d803d8     ..>.............
  4038a8:	03d803d8 ffff44da ffffffff 03d844da     .....D.......D..
  4038b8:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  4038c8:	03d803d8 03d803d8 03d803d8 befd03d8     ................
  4038d8:	ffffffff ffffffff ffffffff 551aefbf     ...............U
  4038e8:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  4038f8:	03d803d8 03d803d8 efbf3499 efbfffff     .........4......
  403908:	03d844da 03d803d8 03d803d8 03d803d8     .D..............
  403918:	03d803d8 03d803d8 44da03d8 ffffefbf     ...........D....
  403928:	ffffffff ffffffff ffffffff ffffffff     ................
  403938:	ffffffff 2459cf3e 03d803d8 03d803d8     ....>.Y$........
  403948:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  403958:	03d803d8 8e3c03d8 ffffffff ffffffff     ......<.........
  403968:	ffffffff 7ddcffff 03d803d8 03d803d8     .......}........
  403978:	befd03d8 ffffffff ffffffff ffffffff     ................
  403988:	ffffffff ffffffff ffffffff ffffffff     ................
  403998:	ffffffff ffffffff ffffffff ffffffff     ................
  4039a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4039b8:	ffffffff ffffffff 655bffff 03d803d8     ..........[e....
  4039c8:	03d803d8 03d803d8 ffff9e7d ffffffff     ........}.......
  4039d8:	03d8ffff 03d803d8 03d803d8 ffff44da     .............D..
  4039e8:	ffffffff 03d844da 03d803d8 03d803d8     .....D..........
  4039f8:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  403a08:	03d803d8 befd03d8 ffffffff ffffffff     ................
  403a18:	efbfffff 03d83499 03d803d8 03d803d8     .....4..........
  403a28:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  403a38:	141803d8 3499befd 03d803d8 03d803d8     .......4........
  403a48:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  403a58:	03d803d8 efbf3499 ffffffff ffffffff     .....4..........
  403a68:	ffffffff ffffffff 9e7dffff 03d803d8     ..........}.....
  403a78:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  403a88:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  403a98:	ffff655b ffffffff ffffffff 7ddcffff     [e.............}
  403aa8:	03d803d8 03d803d8 befd03d8 ffffffff     ................
  403ab8:	ffffffff ffffffff ffffffff ffffffff     ................
  403ac8:	ffffffff ffffffff ffffffff ffffffff     ................
  403ad8:	ffffffff ffffffff ffffffff ffffffff     ................
  403ae8:	ffffffff ffffffff ffffffff ffffffff     ................
  403af8:	03d88e3c 03d803d8 03d803d8 8e3c03d8     <.............<.
  403b08:	ffffffff ffffffff 03d8ffff 03d803d8     ................
  403b18:	03d803d8 ffff44da ffffffff 03d844da     .....D.......D..
  403b28:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  403b38:	03d803d8 03d803d8 03d803d8 befd03d8     ................
  403b48:	ffffffff ffffffff 44daffff 03d803d8     ...........D....
  403b58:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  403b68:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  403b78:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  403b88:	03d803d8 03d803d8 03d803d8 349903d8     ...............4
  403b98:	ffffefbf ffffffff ffffffff ffffffff     ................
  403ba8:	03d8aebd 03d803d8 03d803d8 03d803d8     ................
  403bb8:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  403bc8:	03d803d8 03d803d8 7ddc03d8 ffffffff     ...........}....
  403bd8:	ffffffff 7ddcffff 03d803d8 03d803d8     .......}........
  403be8:	befd03d8 ffffffff ffffffff ffffffff     ................
  403bf8:	ffffffff ffffffff ffffffff ffffffff     ................
  403c08:	ffffffff ffffffff ffffffff ffffffff     ................
  403c18:	ffffffff ffffffff ffffffff ffffffff     ................
  403c28:	ffffffff 9e7dffff 03d803d8 03d803d8     ......}.........
  403c38:	03d803d8 ffff655b ffffffff ffffffff     ....[e..........
  403c48:	03d8ffff 03d803d8 03d803d8 ffff44da     .............D..
  403c58:	ffffffff 03d844da 03d803d8 03d803d8     .....D..........
  403c68:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  403c78:	03d803d8 befd03d8 ffffffff ffffffff     ................
  403c88:	03d88e3c 03d803d8 03d803d8 03d803d8     <...............
  403c98:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  403ca8:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  403cb8:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  403cc8:	03d803d8 03d803d8 ffff759b ffffffff     .........u......
  403cd8:	ffffffff df7effff 03d81418 03d803d8     ......~.........
  403ce8:	03d803d8 03d803d8 7ddc551a befdbefd     .........U.}....
  403cf8:	759b9e7d 03d82459 03d803d8 03d803d8     }..uY$..........
  403d08:	03d803d8 ffffbefd ffffffff 7ddcffff     ...............}
  403d18:	03d803d8 03d803d8 befd03d8 ffffffff     ................
  403d28:	ffffffff ffffffff ffffffff ffffffff     ................
  403d38:	ffffffff ffffffff ffffffff ffffffff     ................
  403d48:	ffffffff ffffffff ffffffff ffffffff     ................
  403d58:	ffffffff ffffffff ffffffff 1418cf3e     ............>...
  403d68:	03d803d8 03d803d8 349903d8 ffffffff     ...........4....
  403d78:	ffffffff ffffffff 03d8ffff 03d803d8     ................
  403d88:	03d803d8 ffff44da ffffffff befdcf3e     .....D......>...
  403d98:	3499befd 03d803d8 03d803d8 befd3499     ...4.........4..
  403da8:	befdbefd befdbefd befdbefd efbfbefd     ................
  403db8:	ffffffff efbfffff 03d81418 03d803d8     ................
  403dc8:	03d803d8 245903d8 befd9e7d aebdbefd     ......Y$}.......
  403dd8:	03d844da 03d803d8 03d803d8 03d803d8     .D..............
  403de8:	03d803d8 03d803d8 9e7d44da befdbefd     .........D}.....
  403df8:	44da9e7d 03d803d8 03d803d8 03d803d8     }..D............
  403e08:	df7e03d8 ffffffff ffffffff 44daffff     ..~............D
  403e18:	03d803d8 03d803d8 03d803d8 df7e3499     .............4~.
  403e28:	ffffffff ffffffff ffffffff 7ddcffff     ...............}
  403e38:	03d803d8 03d803d8 03d803d8 ffff3499     .............4..
  403e48:	ffffffff 7ddcffff 03d803d8 03d803d8     .......}........
  403e58:	befd03d8 ffffffff ffffffff ffffffff     ................
  403e68:	ffffffff ffffffff ffffffff ffffffff     ................
  403e78:	ffffffff ffffffff ffffffff ffffffff     ................
  403e88:	ffffffff ffffffff ffffffff ffffffff     ................
  403e98:	efbfffff 03d81418 03d803d8 03d803d8     ................
  403ea8:	efbf3499 ffffffff ffffffff ffffffff     .4..............
  403eb8:	03d8ffff 03d803d8 03d803d8 ffff44da     .............D..
  403ec8:	ffffffff ffffffff 44daffff 03d803d8     ...........D....
  403ed8:	03d803d8 ffff44da ffffffff ffffffff     .....D..........
  403ee8:	ffffffff ffffffff ffffffff 8e3cffff     ..............<.
  403ef8:	03d803d8 03d803d8 03d803d8 ffff655b     ............[e..
  403f08:	ffffffff ffffffff 9e7dffff 03d803d8     ..........}.....
  403f18:	03d803d8 03d803d8 03d803d8 8e3c03d8     ..............<.
  403f28:	ffffffff ffffffff ffffffff 03d88e3c     ............<...
  403f38:	03d803d8 03d803d8 759b03d8 ffffffff     ...........u....
  403f48:	ffffffff 03d8befd 03d803d8 03d803d8     ................
  403f58:	551a03d8 ffffffff ffffffff ffffffff     ...U............
  403f68:	ffffffff ffffffff 03d89e7d 03d803d8     ........}.......
  403f78:	03d803d8 aebd03d8 ffffffff 7ddcffff     ...............}
  403f88:	03d803d8 03d803d8 befd03d8 ffffffff     ................
  403f98:	ffffffff ffffffff ffffffff ffffffff     ................
  403fa8:	ffffffff ffffffff ffffffff ffffffff     ................
  403fb8:	ffffffff ffffffff ffffffff ffffffff     ................
  403fc8:	ffffffff ffffffff 3499efbf 03d803d8     ...........4....
  403fd8:	03d803d8 141803d8 ffffcf3e ffffffff     ........>.......
  403fe8:	ffffffff ffffffff 03d8ffff 03d803d8     ................
  403ff8:	03d803d8 ffff44da ffffffff ffffffff     .....D..........
  404008:	44daffff 03d803d8 03d803d8 ffff44da     ...D.........D..
  404018:	ffffffff ffffffff ffffffff ffffffff     ................
  404028:	ffffffff 3499ffff 03d803d8 03d803d8     .......4........
  404038:	551a03d8 ffffffff ffffffff ffffffff     ...U............
  404048:	ffffffff 03d88e3c 03d803d8 03d803d8     ....<...........
  404058:	03d803d8 ffff7ddc ffffffff ffffffff     .....}..........
  404068:	ffffffff 759bffff 03d803d8 03d803d8     .......u........
  404078:	245903d8 ffffffff ffffffff 03d8655b     ..Y$........[e..
  404088:	03d803d8 03d803d8 efbf1418 ffffffff     ................
  404098:	ffffffff ffffffff ffffffff ffffffff     ................
  4040a8:	551affff 03d803d8 03d803d8 551a03d8     ...U...........U
  4040b8:	ffffffff 7ddcffff 03d803d8 03d803d8     .......}........
  4040c8:	befd03d8 ffffffff ffffffff ffffffff     ................
  4040d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4040e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4040f8:	ffffffff ffffffff ffffffff ffffffff     ................
  404108:	03d8551a 03d803d8 03d803d8 cf3e03d8     .U............>.
  404118:	ffffffff ffffffff ffffffff ffffffff     ................
  404128:	03d8ffff 03d803d8 03d803d8 ffff44da     .............D..
  404138:	ffffffff ffffffff 44daffff 03d803d8     ...........D....
  404148:	03d803d8 ffff44da ffffffff ffffffff     .....D..........
  404158:	ffffffff ffffffff ffffffff 03d8ffff     ................
  404168:	03d803d8 03d803d8 df7e03d8 ffffffff     ..........~.....
  404178:	ffffffff ffffffff ffffffff 2459ffff     ..............Y$
  404188:	03d803d8 03d803d8 141803d8 ffffefbf     ................
  404198:	ffffffff ffffffff ffffffff efbfffff     ................
  4041a8:	03d81418 03d803d8 03d803d8 ffffdf7e     ............~...
  4041b8:	ffffffff 03d81418 03d803d8 03d803d8     ................
  4041c8:	ffff8e3c ffffffff ffffffff ffffffff     <...............
  4041d8:	ffffffff ffffffff cf3effff 03d803d8     ..........>.....
  4041e8:	03d803d8 03d803d8 ffffffff 7ddcffff     ...............}
  4041f8:	03d803d8 03d803d8 befd03d8 ffffffff     ................
  404208:	ffffffff ffffffff ffffffff ffffffff     ................
  404218:	ffffffff ffffffff ffffffff ffffffff     ................
  404228:	ffffffff ffffffff ffffffff ffffffff     ................
  404238:	ffffffff 759bffff 03d803d8 03d803d8     .......u........
  404248:	03d803d8 befd655b befdbefd befdbefd     ....[e..........
  404258:	ffffdf7e ffffffff 03d8ffff 03d803d8     ~...............
  404268:	03d803d8 ffff44da ffffffff ffffffff     .....D..........
  404278:	44daffff 03d803d8 03d803d8 ffff44da     ...D.........D..
  404288:	ffffffff ffffffff ffffffff ffffffff     ................
  404298:	ffffffff 03d8cf3e 03d803d8 03d803d8     ....>...........
  4042a8:	ffff44da ffffffff ffffffff ffffffff     .D..............
  4042b8:	ffffffff 7ddcffff 03d803d8 03d803d8     .......}........
  4042c8:	655b03d8 ffffffff ffffffff ffffffff     ..[e............
  4042d8:	ffffffff ffffffff 03d8655b 03d803d8     ........[e......
  4042e8:	03d803d8 ffffbefd befdffff 03d803d8     ................
  4042f8:	03d803d8 03d803d8 befdaebd befdbefd     ................
  404308:	befdbefd befdbefd befdbefd befdbefd     ................
  404318:	befdbefd 03d81418 03d803d8 03d803d8     ................
  404328:	ffffbefd 7ddcffff 03d803d8 03d803d8     .......}........
  404338:	befd03d8 ffffffff ffffffff ffffffff     ................
  404348:	ffffffff ffffffff ffffffff ffffffff     ................
  404358:	ffffffff ffffffff ffffffff ffffffff     ................
  404368:	ffffffff ffffffff ffffffff 03d89e7d     ............}...
  404378:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  404388:	03d803d8 03d803d8 ffff7ddc ffffffff     .........}......
  404398:	03d8ffff 03d803d8 03d803d8 ffff44da     .............D..
  4043a8:	ffffffff ffffffff 44daffff 03d803d8     ...........D....
  4043b8:	03d803d8 ffff44da ffffffff ffffffff     .....D..........
  4043c8:	ffffffff ffffffff ffffffff 03d8befd     ................
  4043d8:	03d803d8 03d803d8 ffff7ddc ffffffff     .........}......
  4043e8:	ffffffff ffffffff ffffffff aebdffff     ................
  4043f8:	03d803d8 03d803d8 7ddc03d8 ffffffff     ...........}....
  404408:	ffffffff ffffffff ffffffff ffffffff     ................
  404418:	03d87ddc 03d803d8 03d803d8 ffffbefd     .}..............
  404428:	8e3cffff 03d803d8 03d803d8 03d803d8     ..<.............
  404438:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  404448:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  404458:	03d803d8 03d803d8 ffff9e7d 7ddcffff     ........}......}
  404468:	03d803d8 03d803d8 befd03d8 ffffffff     ................
  404478:	ffffffff ffffffff ffffffff ffffffff     ................
  404488:	ffffffff ffffffff ffffffff ffffffff     ................
  404498:	ffffffff ffffffff ffffffff ffffffff     ................
  4044a8:	befdffff 03d803d8 03d803d8 03d803d8     ................
  4044b8:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  4044c8:	ffff7ddc ffffffff 03d8ffff 03d803d8     .}..............
  4044d8:	03d803d8 ffff44da ffffffff ffffffff     .....D..........
  4044e8:	44daffff 03d803d8 03d803d8 ffff44da     ...D.........D..
  4044f8:	ffffffff ffffffff ffffffff ffffffff     ................
  404508:	ffffffff 03d8befd 03d803d8 03d803d8     ................
  404518:	ffff7ddc ffffffff ffffffff ffffffff     .}..............
  404528:	ffffffff befdffff 03d803d8 03d803d8     ................
  404538:	7ddc03d8 ffffffff ffffffff ffffffff     ...}............
  404548:	ffffffff ffffffff 03d87ddc 03d803d8     .........}......
  404558:	03d803d8 ffffbefd 7ddcffff 03d803d8     ...........}....
  404568:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  404578:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  404588:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  404598:	ffff7ddc 7ddcffff 03d803d8 03d803d8     .}.....}........
  4045a8:	befd03d8 ffffffff ffffffff ffffffff     ................
  4045b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4045c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4045d8:	ffffffff ffffffff 1418cf3e 03d803d8     ........>.......
  4045e8:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  4045f8:	03d803d8 03d803d8 ffff7ddc ffffffff     .........}......
  404608:	03d8ffff 03d803d8 03d803d8 ffff44da     .............D..
  404618:	ffffffff ffffffff 44daffff 03d803d8     ...........D....
  404628:	03d803d8 ffff44da ffffffff ffffffff     .....D..........
  404638:	ffffffff ffffffff ffffffff 03d8befd     ................
  404648:	03d803d8 03d803d8 ffff7ddc ffffffff     .........}......
  404658:	ffffffff ffffffff ffffffff befdffff     ................
  404668:	03d803d8 03d803d8 7ddc03d8 ffffffff     ...........}....
  404678:	ffffffff ffffffff ffffffff ffffffff     ................
  404688:	03d87ddc 03d803d8 03d803d8 ffffbefd     .}..............
  404698:	7ddcffff 03d803d8 03d803d8 03d803d8     ...}............
  4046a8:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  4046b8:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  4046c8:	03d803d8 03d803d8 ffff7ddc 7ddcffff     .........}.....}
  4046d8:	03d803d8 03d803d8 befd03d8 ffffffff     ................
  4046e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4046f8:	ffffffff ffffffff ffffffff ffffffff     ................
  404708:	ffffffff ffffffff ffffffff efbfffff     ................
  404718:	03d83499 03d803d8 03d803d8 03d803d8     .4..............
  404728:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  404738:	ffff7ddc ffffffff 03d8ffff 03d803d8     .}..............
  404748:	03d803d8 ffff44da ffffffff ffffffff     .....D..........
  404758:	44daffff 03d803d8 03d803d8 ffff44da     ...D.........D..
  404768:	ffffffff ffffffff ffffffff ffffffff     ................
  404778:	ffffffff 03d8befd 03d803d8 03d803d8     ................
  404788:	ffff7ddc ffffffff ffffffff ffffffff     .}..............
  404798:	ffffffff befdffff 03d803d8 03d803d8     ................
  4047a8:	7ddc03d8 ffffffff ffffffff ffffffff     ...}............
  4047b8:	ffffffff ffffffff 03d87ddc 03d803d8     .........}......
  4047c8:	03d803d8 ffffbefd 7ddcffff 03d803d8     ...........}....
  4047d8:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  4047e8:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  4047f8:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  404808:	ffff7ddc 7ddcffff 03d803d8 03d803d8     .}.....}........
  404818:	befd03d8 ffffffff ffffffff ffffffff     ................
  404828:	ffffffff ffffffff ffffffff ffffffff     ................
  404838:	ffffffff ffffffff ffffffff ffffffff     ................
  404848:	ffffffff 44daffff 03d803d8 03d803d8     .......D........
  404858:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  404868:	03d803d8 03d803d8 ffff7ddc ffffffff     .........}......
  404878:	03d8ffff 03d803d8 03d803d8 ffff44da     .............D..
  404888:	ffffffff ffffffff 44daffff 03d803d8     ...........D....
  404898:	03d803d8 ffff44da ffffffff ffffffff     .....D..........
  4048a8:	ffffffff ffffffff ffffffff 03d8befd     ................
  4048b8:	03d803d8 03d803d8 ffff7ddc ffffffff     .........}......
  4048c8:	ffffffff ffffffff ffffffff befdffff     ................
  4048d8:	03d803d8 03d803d8 7ddc03d8 ffffffff     ...........}....
  4048e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4048f8:	03d87ddc 03d803d8 03d803d8 ffffbefd     .}..............
  404908:	7ddcffff 03d803d8 03d803d8 03d803d8     ...}............
  404918:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  404928:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  404938:	03d803d8 03d803d8 ffff7ddc 7ddcffff     .........}.....}
  404948:	03d803d8 03d803d8 befd03d8 ffffffff     ................
  404958:	ffffffff ffffffff ffffffff ffffffff     ................
  404968:	ffffffff ffffffff ffffffff ffffffff     ................
  404978:	ffffffff ffffffff ffffffff 03d8655b     ............[e..
  404988:	03d803d8 03d803d8 aebd03d8 ffffffff     ................
  404998:	ffffffff ffffffff ffffffff ffffffff     ................
  4049a8:	ffffffff ffffffff 03d8ffff 03d803d8     ................
  4049b8:	03d803d8 ffff44da ffffffff ffffffff     .....D..........
  4049c8:	44daffff 03d803d8 03d803d8 ffff3499     ...D.........4..
  4049d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4049e8:	ffffffff 03d8befd 03d803d8 03d803d8     ................
  4049f8:	ffff7ddc ffffffff ffffffff ffffffff     .}..............
  404a08:	ffffffff befdffff 03d803d8 03d803d8     ................
  404a18:	7ddc03d8 ffffffff ffffffff ffffffff     ...}............
  404a28:	ffffffff ffffffff 03d87ddc 03d803d8     .........}......
  404a38:	03d803d8 ffffbefd aebdffff 03d803d8     ................
  404a48:	03d803d8 245903d8 ffffffff ffffffff     ......Y$........
  404a58:	ffffffff ffffffff ffffffff ffffffff     ................
  404a68:	ffffffff ffffffff ffffffff ffffffff     ................
  404a78:	ffffffff 8e3cffff 03d803d8 03d803d8     ......<.........
  404a88:	befd03d8 ffffffff ffffffff ffffffff     ................
  404a98:	ffffffff ffffffff ffffffff ffffffff     ................
  404aa8:	ffffffff ffffffff ffffffff ffffffff     ................
  404ab8:	8e3cffff 03d803d8 03d803d8 03d803d8     ..<.............
  404ac8:	ffff9e7d ffffffff ffffffff ffffffff     }...............
  404ad8:	ffffffff ffffffff ffffffff ffffffff     ................
  404ae8:	03d8ffff 03d803d8 03d803d8 ffff44da     .............D..
  404af8:	ffffffff ffffffff 44daffff 03d803d8     ...........D....
  404b08:	03d803d8 efbf03d8 ffffffff ffffffff     ................
  404b18:	ffffffff ffffffff ffffffff 03d8befd     ................
  404b28:	03d803d8 03d803d8 ffff7ddc ffffffff     .........}......
  404b38:	ffffffff ffffffff ffffffff befdffff     ................
  404b48:	03d803d8 03d803d8 7ddc03d8 ffffffff     ...........}....
  404b58:	ffffffff ffffffff ffffffff ffffffff     ................
  404b68:	03d87ddc 03d803d8 03d803d8 ffffbefd     .}..............
  404b78:	df7effff 03d803d8 03d803d8 03d803d8     ..~.............
  404b88:	ffffefbf ffffffff ffffffff ffffffff     ................
  404b98:	ffffffff ffffffff ffffffff ffffffff     ................
  404ba8:	ffffffff ffffffff ffffffff befdffff     ................
  404bb8:	03d803d8 03d803d8 7ddc03d8 ffffffff     ...........}....
  404bc8:	ffffffff ffffffff ffffffff ffffffff     ................
  404bd8:	ffffffff ffffffff ffffffff ffffffff     ................
  404be8:	ffffffff ffffffff 03d8aebd 03d803d8     ................
  404bf8:	03d803d8 655b03d8 ffffffff ffffffff     ......[e........
  404c08:	ffffffff ffffffff ffffffff ffffffff     ................
  404c18:	ffffffff ffffffff 03d8ffff 03d803d8     ................
  404c28:	03d803d8 ffff44da ffffffff ffffffff     .....D..........
  404c38:	7ddcffff 03d803d8 03d803d8 7ddc03d8     ...}...........}
  404c48:	ffffffff ffffffff ffffffff ffffffff     ................
  404c58:	ffffffff 03d8befd 03d803d8 03d803d8     ................
  404c68:	ffff7ddc ffffffff ffffffff ffffffff     .}..............
  404c78:	ffffffff befdffff 03d803d8 03d803d8     ................
  404c88:	7ddc03d8 ffffffff ffffffff ffffffff     ...}............
  404c98:	ffffffff ffffffff 03d87ddc 03d803d8     .........}......
  404ca8:	03d803d8 ffffbefd ffffffff 03d82459     ............Y$..
  404cb8:	03d803d8 03d803d8 ffff9e7d ffffffff     ........}.......
  404cc8:	ffffffff ffffffff ffffffff ffffffff     ................
  404cd8:	ffffffff ffffffff ffffffff ffffffff     ................
  404ce8:	ffffffff df7effff 03d803d8 03d803d8     ......~.........
  404cf8:	245903d8 ffffefbf ffffffff ffffffff     ..Y$............
  404d08:	ffffffff ffffffff ffffffff ffffffff     ................
  404d18:	ffffffff ffffffff ffffffff cf3effff     ..............>.
  404d28:	03d81418 03d803d8 03d803d8 ffff551a     .............U..
  404d38:	ffffffff ffffffff ffffffff ffffffff     ................
  404d48:	ffffffff ffffffff ffffffff ffffffff     ................
  404d58:	03d8ffff 03d803d8 03d803d8 ffff44da     .............D..
  404d68:	ffffffff ffffffff cf3effff 03d803d8     ..........>.....
  404d78:	03d803d8 03d803d8 ffffcf3e ffffffff     ........>.......
  404d88:	ffffffff ffffffff ffffffff 03d8befd     ................
  404d98:	03d803d8 03d803d8 ffff7ddc ffffffff     .........}......
  404da8:	ffffffff ffffffff ffffffff befdffff     ................
  404db8:	03d803d8 03d803d8 7ddc03d8 ffffffff     ...........}....
  404dc8:	ffffffff ffffffff ffffffff ffffffff     ................
  404dd8:	03d87ddc 03d803d8 03d803d8 ffffbefd     .}..............
  404de8:	ffffffff 03d8759b 03d803d8 03d803d8     .....u..........
  404df8:	efbf2459 ffffffff ffffffff ffffffff     Y$..............
  404e08:	ffffffff ffffffff ffffffff ffffffff     ................
  404e18:	ffffffff ffffffff ffffffff ffffffff     ................
  404e28:	03d83499 03d803d8 03d803d8 ffff655b     .4..........[e..
  404e38:	ffffffff ffffffff ffffffff ffffffff     ................
  404e48:	ffffffff ffffffff ffffffff ffffffff     ................
  404e58:	ffffffff 1418efbf 03d803d8 03d803d8     ................
  404e68:	349903d8 ffffefbf ffffffff ffffffff     ...4............
  404e78:	ffffffff ffffffff ffffffff ffffffff     ................
  404e88:	ffffffff ffffffff 03d8ffff 03d803d8     ................
  404e98:	03d803d8 ffff44da ffffffff ffffffff     .....D..........
  404ea8:	ffffffff 03d82459 03d803d8 03d803d8     ....Y$..........
  404eb8:	9e7d1418 ffffffff ffffffff ffffffff     ..}.............
  404ec8:	ffffffff 03d8befd 03d803d8 03d803d8     ................
  404ed8:	ffff7ddc ffffffff ffffffff ffffffff     .}..............
  404ee8:	ffffffff befdffff 03d803d8 03d803d8     ................
  404ef8:	7ddc03d8 ffffffff ffffffff ffffffff     ...}............
  404f08:	ffffffff ffffffff 03d87ddc 03d803d8     .........}......
  404f18:	03d803d8 ffffbefd ffffffff 03d8df7e     ............~...
  404f28:	03d803d8 03d803d8 349903d8 ffffefbf     ...........4....
  404f38:	ffffffff ffffffff ffffffff ffffffff     ................
  404f48:	2459efbf 03d803d8 03d803d8 655b03d8     ..Y$..........[e
  404f58:	ffffffff ffffffff 03d89e7d 03d803d8     ........}.......
  404f68:	03d803d8 551a03d8 ffffefbf ffffffff     .......U........
  404f78:	ffffffff ffffffff ffffffff ffffffff     ................
  404f88:	ffffffff ffffffff efbfffff 03d83499     .............4..
  404f98:	03d803d8 03d803d8 df7e1418 ffffffff     ..........~.....
  404fa8:	ffffffff ffffffff ffffffff ffffffff     ................
  404fb8:	ffffffff ffffffff ffffffff ffffffff     ................
  404fc8:	03d8ffff 03d803d8 03d803d8 ffff44da     .............D..
  404fd8:	ffffffff ffffffff ffffffff 03d8aebd     ................
  404fe8:	03d803d8 03d803d8 03d803d8 759b2459     ............Y$.u
  404ff8:	7ddc7ddc df7e7ddc ffffffff 03d8befd     .}.}.}~.........
  405008:	03d803d8 03d803d8 ffff7ddc ffffffff     .........}......
  405018:	ffffffff ffffffff ffffffff befdffff     ................
  405028:	03d803d8 03d803d8 7ddc03d8 ffffffff     ...........}....
  405038:	ffffffff ffffffff ffffffff ffffffff     ................
  405048:	03d87ddc 03d803d8 03d803d8 ffffbefd     .}..............
  405058:	ffffffff 655bffff 03d803d8 03d803d8     ......[e........
  405068:	03d803d8 befd3499 ffffffff ffffffff     .....4..........
  405078:	ffffffff befdffff 03d81418 03d803d8     ................
  405088:	03d803d8 df7e03d8 ffffffff ffffffff     ......~.........
  405098:	2459ffff 03d803d8 03d803d8 03d803d8     ..Y$............
  4050a8:	551a03d8 7ddc7ddc 7ddc7ddc ffffffff     ...U.}.}.}.}....
  4050b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4050c8:	655bffff 03d803d8 03d803d8 141803d8     ..[e............
  4050d8:	ffffcf3e ffffffff ffffffff ffffffff     >...............
  4050e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4050f8:	ffffffff ffffffff 03d8ffff 03d803d8     ................
  405108:	03d803d8 ffff44da ffffffff ffffffff     .....D..........
  405118:	ffffffff 551affff 03d803d8 03d803d8     .......U........
  405128:	03d803d8 03d803d8 03d803d8 befd03d8     ................
  405138:	ffffffff 03d8befd 03d803d8 03d803d8     ................
  405148:	ffff7ddc ffffffff ffffffff ffffffff     .}..............
  405158:	ffffffff befdffff 03d803d8 03d803d8     ................
  405168:	7ddc03d8 ffffffff ffffffff ffffffff     ...}............
  405178:	ffffffff ffffffff 03d87ddc 03d803d8     .........}......
  405188:	03d803d8 ffffbefd ffffffff efbfffff     ................
  405198:	03d81418 03d803d8 03d803d8 03d803d8     ................
  4051a8:	8e3c44da befdbefd 8e3cbefd 03d83499     .D<.......<..4..
  4051b8:	03d803d8 03d803d8 03d803d8 ffff759b     .............u..
  4051c8:	ffffffff ffffffff befdffff 03d803d8     ................
  4051d8:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  4051e8:	03d803d8 ffffffff ffffffff ffffffff     ................
  4051f8:	ffffffff ffffffff 03d8759b 03d803d8     .........u......
  405208:	03d803d8 9e7d03d8 ffffffff ffffffff     ......}.........
  405218:	ffffffff ffffffff ffffffff ffffffff     ................
  405228:	ffffffff ffffffff ffffffff ffffffff     ................
  405238:	03d8ffff 03d803d8 03d803d8 ffff44da     .............D..
  405248:	ffffffff ffffffff ffffffff efbfffff     ................
  405258:	03d83499 03d803d8 03d803d8 03d803d8     .4..............
  405268:	03d803d8 befd03d8 ffffffff 03d8befd     ................
  405278:	03d803d8 03d803d8 ffff7ddc ffffffff     .........}......
  405288:	ffffffff ffffffff ffffffff befdffff     ................
  405298:	03d803d8 03d803d8 7ddc03d8 ffffffff     ...........}....
  4052a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4052b8:	03d87ddc 03d803d8 03d803d8 ffffbefd     .}..............
  4052c8:	ffffffff ffffffff 03d8befd 03d803d8     ................
  4052d8:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  4052e8:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  4052f8:	349903d8 ffffffff ffffffff ffffffff     ...4............
  405308:	ffffffff 03d89e7d 03d803d8 03d803d8     ....}...........
  405318:	03d803d8 03d803d8 03d803d8 ffffffff     ................
  405328:	ffffffff ffffffff ffffffff 9e7dffff     ..............}.
  405338:	03d803d8 03d803d8 03d803d8 ffff7ddc     .............}..
  405348:	ffffffff ffffffff ffffffff ffffffff     ................
  405358:	ffffffff ffffffff ffffffff ffffffff     ................
  405368:	ffffffff ffffffff 03d8ffff 03d803d8     ................
  405378:	03d803d8 ffff44da ffffffff ffffffff     .....D..........
  405388:	ffffffff ffffffff 44daefbf 03d803d8     ...........D....
  405398:	03d803d8 03d803d8 03d803d8 befd03d8     ................
  4053a8:	ffffffff 03d8befd 03d803d8 03d803d8     ................
  4053b8:	ffff7ddc ffffffff ffffffff ffffffff     .}..............
  4053c8:	ffffffff befdffff 03d803d8 03d803d8     ................
  4053d8:	7ddc03d8 ffffffff ffffffff ffffffff     ...}............
  4053e8:	ffffffff ffffffff 03d87ddc 03d803d8     .........}......
  4053f8:	03d803d8 ffffbefd ffffffff ffffffff     ................
  405408:	aebdffff 03d81418 03d803d8 03d803d8     ................
  405418:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  405428:	03d803d8 03d803d8 efbf44da ffffffff     .........D......
  405438:	ffffffff ffffffff ffffffff 9e7dffff     ..............}.
  405448:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  405458:	03d803d8 ffffffff ffffffff ffffffff     ................
  405468:	ffffffff 03d8cf3e 03d803d8 03d803d8     ....>...........
  405478:	655b03d8 ffffffff ffffffff ffffffff     ..[e............
  405488:	ffffffff ffffffff ffffffff ffffffff     ................
  405498:	ffffffff ffffffff ffffffff ffffffff     ................
  4054a8:	03d8ffff 03d803d8 03d803d8 ffff44da     .............D..
  4054b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4054c8:	ffffffff 14187ddc 03d803d8 03d803d8     .....}..........
  4054d8:	03d803d8 befd03d8 ffffffff 03d8befd     ................
  4054e8:	03d803d8 03d803d8 ffff7ddc ffffffff     .........}......
  4054f8:	ffffffff ffffffff ffffffff befdffff     ................
  405508:	03d803d8 03d803d8 7ddc03d8 ffffffff     ...........}....
  405518:	ffffffff ffffffff ffffffff ffffffff     ................
  405528:	03d87ddc 03d803d8 03d803d8 ffffbefd     .}..............
  405538:	ffffffff ffffffff ffffffff 44dacf3e     ............>..D
  405548:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  405558:	03d803d8 03d803d8 03d803d8 7ddc1418     ...............}
  405568:	ffffffff ffffffff ffffffff ffffffff     ................
  405578:	ffffffff ffffffff 44dacf3e 03d803d8     ........>..D....
  405588:	03d803d8 03d803d8 03d803d8 ffffffff     ................
  405598:	ffffffff ffffffff df7effff 03d81418     ..........~.....
  4055a8:	03d803d8 03d803d8 ffff3499 ffffffff     .........4......
  4055b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4055c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4055d8:	ffffffff ffffffff 03d8ffff 03d803d8     ................
  4055e8:	03d803d8 ffff44da ffffffff ffffffff     .....D..........
  4055f8:	ffffffff ffffffff ffffffff efbfffff     ................
  405608:	44da8e3c 03d803d8 03d803d8 befd03d8     <..D............
  405618:	ffffffff 03d8befd 03d803d8 03d803d8     ................
  405628:	ffff7ddc ffffffff ffffffff ffffffff     .}..............
  405638:	ffffffff befdffff 03d803d8 03d803d8     ................
  405648:	7ddc03d8 ffffffff ffffffff ffffffff     ...}............
  405658:	ffffffff ffffffff 03d87ddc 03d803d8     .........}......
  405668:	03d803d8 ffffbefd ffffffff ffffffff     ................
  405678:	ffffffff ffffffff 44da9e7d 03d803d8     ........}..D....
  405688:	03d803d8 03d803d8 03d803d8 03d803d8     ................
  405698:	759b1418 ffffdf7e ffffffff ffffffff     ...u~...........
  4056a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4056b8:	ffffffff 655bbefd 03d81418 03d803d8     ......[e........
  4056c8:	03d803d8 ffffffff ffffffff ffffffff     ................
  4056d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4056e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4056f8:	ffffffff ffffffff ffffffff ffffffff     ................
  405708:	ffffffff ffffffff ffffffff ffffffff     ................
  405718:	ffffffff ffffffff ffffffff ffffffff     ................
  405728:	ffffffff ffffffff ffffffff ffffffff     ................
  405738:	ffffffff ffffffff ffffffff df7effff     ..............~.
  405748:	befdbefd efbfbefd ffffffff ffffffff     ................
  405758:	ffffffff ffffffff ffffffff ffffffff     ................
  405768:	ffffffff ffffffff ffffffff ffffffff     ................
  405778:	ffffffff ffffffff ffffffff ffffffff     ................
  405788:	ffffffff ffffffff ffffffff ffffffff     ................
  405798:	ffffffff ffffffff ffffffff ffffffff     ................
  4057a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4057b8:	ffffffff 9e7ddf7e 551a7ddc 44da44da     ....~.}..}.U.D.D
  4057c8:	759b44da cf3e8e3c ffffffff ffffffff     .D.u<.>.........
  4057d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4057e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4057f8:	ffffffff befdbefd befdbefd ffffffff     ................
  405808:	ffffffff ffffffff ffffffff ffffffff     ................
  405818:	ffffffff ffffffff ffffffff ffffffff     ................
  405828:	ffffffff ffffffff ffffffff ffffffff     ................
  405838:	ffffffff ffffffff ffffffff ffffffff     ................
  405848:	ffffffff ffffffff ffffffff ffffffff     ................
  405858:	ffffffff ffffffff ffffffff ffffffff     ................
  405868:	ffffffff ffffffff ffffffff ffffffff     ................
  405878:	ffffffff ffffffff ffffffff ffffffff     ................
  405888:	ffffffff ffffffff ffffffff ffffffff     ................
  405898:	ffffffff ffffffff ffffffff ffffffff     ................
  4058a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4058b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4058c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4058d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4058e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4058f8:	ffffffff ffffffff ffffffff ffffffff     ................
  405908:	ffffffff ffffffff ffffffff ffffffff     ................
  405918:	ffffffff ffffffff ffffffff ffffffff     ................
  405928:	ffffffff ffffffff ffffffff ffffffff     ................
  405938:	ffffffff ffffffff ffffffff ffffffff     ................
  405948:	ffffffff ffffffff ffffffff ffffffff     ................
  405958:	ffffffff ffffffff ffffffff ffffffff     ................
  405968:	ffffffff ffffffff ffffffff ffffffff     ................
  405978:	ffffffff ffffffff ffffffff ffffffff     ................
  405988:	ffffffff ffffffff ffffffff ffffffff     ................
  405998:	ffffffff ffffffff ffffffff ffffffff     ................
  4059a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4059b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4059c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4059d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4059e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4059f8:	ffffffff ffffffff ffffffff ffffffff     ................
  405a08:	ffffffff ffffffff ffffffff ffffffff     ................
  405a18:	ffffffff ffffffff ffffffff ffffffff     ................
  405a28:	ffffffff ffffffff ffffffff ffffffff     ................
  405a38:	ffffffff ffffffff ffffffff ffffffff     ................
  405a48:	ffffffff ffffffff ffffffff ffffffff     ................
  405a58:	ffffffff ffffffff ffffffff ffffffff     ................
  405a68:	ffffffff ffffffff ffffffff ffffffff     ................
  405a78:	ffffffff ffffffff ffffffff ffffffff     ................
  405a88:	ffffffff ffffffff ffffffff ffffffff     ................
  405a98:	ffffffff ffffffff ffffffff ffffffff     ................
  405aa8:	ffffffff ffffffff ffffffff ffffffff     ................
  405ab8:	ffffffff ffffffff ffffffff ffffffff     ................
  405ac8:	ffffffff ffffffff ffffffff ffffffff     ................
  405ad8:	ffffffff ffffffff ffffffff ffffffff     ................
  405ae8:	ffffffff ffffffff ffffffff ffffffff     ................
  405af8:	ffffffff ffffffff ffffffff ffffffff     ................
  405b08:	ffffffff ffffffff ffffffff ffffffff     ................
  405b18:	ffffffff ffffffff ffffffff ffffffff     ................
  405b28:	ffffffff ffffffff ffffffff ffffffff     ................
  405b38:	ffffffff ffffffff ffffffff ffffffff     ................
  405b48:	ffffffff ffffffff ffffffff ffffffff     ................
  405b58:	ffffffff ffffffff ffffffff ffffffff     ................
  405b68:	ffffffff ffffffff ffffffff ffffffff     ................
  405b78:	ffffffff ffffffff ffffffff ffffffff     ................
  405b88:	ffffffff ffffffff ffffffff ffffffff     ................
  405b98:	ffffffff ffffffff ffffffff ffffffff     ................
  405ba8:	ffffffff ffffffff ffffffff ffffffff     ................
  405bb8:	ffffffff ffffffff ffffffff ffffffff     ................
  405bc8:	ffffffff ffffffff ffffffff ffffffff     ................
  405bd8:	ffffffff ffffffff ffffffff ffffffff     ................
  405be8:	ffffffff ffffffff ffffffff ffffffff     ................
  405bf8:	ffffffff ffffffff ffffffff ffffffff     ................
  405c08:	ffffffff ffffffff ffffffff ffffffff     ................
  405c18:	ffffffff ffffffff ffffffff ffffffff     ................
  405c28:	ffffffff ffffffff ffffffff ffffffff     ................
  405c38:	ffffffff ffffffff ffffffff ffffffff     ................
  405c48:	ffffffff ffffffff ffffffff ffffffff     ................
  405c58:	ffffffff ffffffff ffffffff ffffffff     ................
  405c68:	ffffffff ffffffff ffffffff ffffffff     ................
  405c78:	ffffffff ffffffff ffffffff ffffffff     ................
  405c88:	ffffffff ffffffff ffffffff ffffffff     ................
  405c98:	ffffffff ffffffff ffffffff ffffffff     ................
  405ca8:	ffffffff ffffffff ffffffff ffffffff     ................
  405cb8:	ffffffff ffffffff ffffffff ffffffff     ................
  405cc8:	ffffffff ffffffff ffffffff ffffffff     ................
  405cd8:	ffffffff ffffffff ffffffff ffffffff     ................
  405ce8:	ffffffff ffffffff ffffffff ffffffff     ................
  405cf8:	ffffffff ffffffff ffffffff ffffffff     ................
  405d08:	ffffffff ffffffff ffffffff ffffffff     ................
  405d18:	ffffffff ffffffff ffffffff ffffffff     ................
  405d28:	ffffffff ffffffff ffffffff ffffffff     ................
  405d38:	ffffffff ffffffff ffffffff ffffffff     ................
  405d48:	ffffffff ffffffff ffffffff ffffffff     ................
  405d58:	ffffffff ffffffff ffffffff ffffffff     ................
  405d68:	ffffffff ffffffff ffffffff ffffffff     ................
  405d78:	ffffffff ffffffff ffffffff ffffffff     ................
  405d88:	ffffffff ffffffff ffffffff ffffffff     ................
  405d98:	ffffffff ffffffff ffffffff ffffffff     ................
  405da8:	ffffffff ffffffff ffffffff ffffffff     ................
  405db8:	ffffffff ffffffff ffffffff ffffffff     ................
  405dc8:	ffffffff ffffffff ffffffff ffffffff     ................
  405dd8:	ffffffff ffffffff ffffffff ffffffff     ................
  405de8:	ffffffff ffffffff ffffffff ffffffff     ................
  405df8:	ffffffff ffffffff ffffffff ffffffff     ................
  405e08:	ffffffff ffffffff ffffffff ffffffff     ................
  405e18:	ffffffff ffffffff ffffffff ffffffff     ................
  405e28:	ffffffff ffffffff ffffffff ffffffff     ................
  405e38:	ffffffff ffffffff ffffffff ffffffff     ................
  405e48:	ffffffff ffffffff ffffffff ffffffff     ................
  405e58:	ffffffff ffffffff ffffffff ffffffff     ................
  405e68:	ffffffff ffffffff ffffffff ffffffff     ................
  405e78:	ffffffff ffffffff ffffffff ffffffff     ................
  405e88:	ffffffff ffffffff ffffffff ffffffff     ................
  405e98:	ffffffff ffffffff ffffffff ffffffff     ................
  405ea8:	ffffffff ffffffff ffffffff ffffffff     ................
  405eb8:	ffffffff ffffffff ffffffff ffffffff     ................
  405ec8:	ffffffff ffffffff ffffffff ffffffff     ................
  405ed8:	ffffffff ffffffff ffffffff ffffffff     ................
  405ee8:	ffffffff ffffffff ffffffff ffffffff     ................
  405ef8:	ffffffff ffffffff ffffffff ffffffff     ................
  405f08:	ffffffff ffffffff ffffffff ffffffff     ................
  405f18:	ffffffff ffffffff ffffffff ffffffff     ................
  405f28:	ffffffff ffffffff ffffffff ffffffff     ................
  405f38:	ffffffff ffffffff ffffffff ffffffff     ................
  405f48:	ffffffff ffffffff ffffffff ffffffff     ................
  405f58:	ffffffff ffffffff ffffffff ffffffff     ................
  405f68:	ffffffff ffffffff ffffffff ffffffff     ................
  405f78:	ffffffff ffffffff ffffffff ffffffff     ................
  405f88:	ffffffff ffffffff ffffffff ffffffff     ................
  405f98:	ffffffff ffffffff ffffffff ffffffff     ................
  405fa8:	ffffffff ffffffff ffffffff ffffffff     ................
  405fb8:	ffffffff ffffffff ffffffff ffffffff     ................
  405fc8:	ffffffff ffffffff ffffffff ffffffff     ................
  405fd8:	ffffffff ffffffff ffffffff ffffffff     ................
  405fe8:	ffffffff ffffffff ffffffff ffffffff     ................
  405ff8:	ffffffff ffffffff ffffffff ffffffff     ................
  406008:	ffffffff ffffffff ffffffff ffffffff     ................
  406018:	ffffffff ffffffff ffffffff ffffffff     ................
  406028:	ffffffff ffffffff ffffffff ffffffff     ................
  406038:	ffffffff ffffffff ffffffff ffffffff     ................
  406048:	ffffffff ffffffff ffffffff ffffffff     ................
  406058:	ffffffff ffffffff ffffffff ffffffff     ................
  406068:	ffffffff ffffffff ffffffff ffffffff     ................
  406078:	ffffffff ffffffff ffffffff ffffffff     ................
  406088:	ffffffff ffffffff ffffffff ffffffff     ................

00406098 <color_table>:
  406098:	07e0001f 07fff800 ffe0f81f              ............

004060a4 <example_string>:
  4060a4:	656d7441 7247206c 69687061 206c6163     Atmel Graphical 
  4060b4:	7262694c 20797261 20584647 76726553     Library GFX Serv
  4060c4:	20656369 74736554 00000000              ice Test....

004060d0 <smiley_data>:
  4060d0:	ffffffff ffffffff ffffffff ffffffff     ................
  4060e0:	ffffffff ffffffff ffffffff ffffffff     ................
  4060f0:	ffffffff ffffffff ffffffff ffffffff     ................
  406100:	ffffffff ff20ff22 ff20ff20 ff20ff20     ....". . . . . .
  406110:	ff43ff20 ffffffff ffffffff ffffffff      .C.............
  406120:	ffffffff ffffffff ff21ff22 ff91ffb5     ........".!.....
  406130:	ff46fffc ff20ff20 ff20ff20 ff43ff20     ..F. . . . . .C.
  406140:	ffffffff ffffffff ffffffff ff22ffff     ..............".
  406150:	ff6aff20 ff48fffe ff20ff20 ff20ff20      .j...H. . . . .
  406160:	ff20ff20 ff20ff20 ffffff43 ffffffff      . . . .C.......
  406170:	ffffffff ff20ff22 ff20ff20 ff20ff20     ....". . . . . .
  406180:	ff20ff20 ff20ff20 ff20ff20 ff20ff20      . . . . . . . .
  406190:	ff43ff20 ffffffff ffffffff ff20ff20      .C......... . .
  4061a0:	ef7dffff 8bc00000 ff20ff20 ff20ff20     ..}..... . . . .
  4061b0:	ef7def7d 8bc00000 ff20ff20 ffffffff     }.}..... . .....
  4061c0:	ff22ffff ff20ff20 a534ffff 39a00000     ..". . ...4....9
  4061d0:	ff20ff20 ff20ff20 ef7def7d 39a00000      . . . .}.}....9
  4061e0:	ff20ff20 ffffff43 ff20ffff ff20ff20      . .C..... . . .
  4061f0:	00000000 73200000 ff20ff20 ff20ff20     ...... s . . . .
  406200:	00000000 73200000 ff20ff20 ffffff20     ...... s . . ...
  406210:	ff20ffff ff20ff20 39a08bc0 ee807320     .. . . ....9 s..
  406220:	ff20ff20 ff20ff20 39a08bc0 ee807320      . . . ....9 s..
  406230:	ff20ff20 ffffff20 ff20ffff ff20ff20      . . ..... . . .
  406240:	ff20ff20 ff20ff20 ff20ff20 ff20ff20      . . . . . . . .
  406250:	ff20ff20 ff20ff20 ff20ff20 ffffff20      . . . . . . ...
  406260:	ff20ffff ff20ff20 ff20ff20 ff20ff20     .. . . . . . . .
  406270:	ff20ff20 ff20ff20 ff20ff20 ff20ff20      . . . . . . . .
  406280:	ff20ff20 ffffff20 ff20ffff ff20ff20      . . ..... . . .
  406290:	ff200000 ff20ff20 ff20ff20 ff20ff20     .. . . . . . . .
  4062a0:	ff20ff20 ff20ff20 ff200000 ffffff20      . . . ... . ...
  4062b0:	ff20ffff ff20ff20 ff200000 ff20ff20     .. . . ... . . .
  4062c0:	ff20ff20 ff20ff20 ff20ff20 0000ff20      . . . . . . ...
  4062d0:	ff200000 ffffff20 ff21ffff ff20ff20     .. . .....!. . .
  4062e0:	00000000 ff20ff20 ff20ff20 ff20ff20     .... . . . . . .
  4062f0:	ff20ff20 0000ff20 ff20ff20 ffffff41      . . ... . .A...
  406300:	ffffffff ff20ff20 0000ff20 ff200000     .... . . ..... .
  406310:	ff20ff20 ff20ff20 ff20ff20 00000000      . . . . . .....
  406320:	ff20ff20 ffffffff ffffffff ff20ff21      . .........!. .
  406330:	ff20ff20 00000000 00000000 ff20ff20      . ......... . .
  406340:	00000000 ff200000 ff41ff20 ffffffff     ...... . .A.....
  406350:	ffffffff ff21ffff ff20ff20 ff20ff20     ......!. . . . .
  406360:	0000ff20 00000000 ff200000 ff20ff20      ......... . . .
  406370:	ffffff41 ffffffff ffffffff ffffffff     A...............
  406380:	ff20ff21 ff20ff20 ff20ff20 ff20ff20     !. . . . . . . .
  406390:	ff20ff20 ff41ff20 ffffffff ffffffff      . . .A.........
  4063a0:	ffffffff ffffffff ffffffff ff20ff21     ............!. .
  4063b0:	ff20ff20 ff20ff20 ff41ff20 ffffffff      . . . . .A.....
  4063c0:	ffffffff ffffffff ffffffff ffffffff     ................
  4063d0:	ffffffff ffffffff ffffffff ffffffff     ................
  4063e0:	ffffffff ffffffff ffffffff ffffffff     ................

004063f0 <_global_impure_ptr>:
  4063f0:	20400030                                0.@ 

004063f4 <_init>:
  4063f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4063f6:	bf00      	nop
  4063f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4063fa:	bc08      	pop	{r3}
  4063fc:	469e      	mov	lr, r3
  4063fe:	4770      	bx	lr

00406400 <__init_array_start>:
  406400:	00401d85 	.word	0x00401d85

00406404 <__frame_dummy_init_array_entry>:
  406404:	00400165                                e.@.

00406408 <_fini>:
  406408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40640a:	bf00      	nop
  40640c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40640e:	bc08      	pop	{r3}
  406410:	469e      	mov	lr, r3
  406412:	4770      	bx	lr

00406414 <__fini_array_start>:
  406414:	00400141 	.word	0x00400141
