
SoundInSoundOut_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009dd4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409dd4  00409dd4  00019dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b0  20400000  00409ddc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0001037c  204009c0  0040a7a0  000209c0  2**5
                  ALLOC
  4 .heap         00000204  20410d3c  0041ab1c  000209c0  2**0
                  ALLOC
  5 .stack        00000400  20410f40  0041ad20  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002a  00000000  00000000  000209b0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209da  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001e338  00000000  00000000  00020a33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002fe2  00000000  00000000  0003ed6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006f30  00000000  00000000  00041d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000790  00000000  00000000  00048c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006c8  00000000  00000000  0004940d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001ee15  00000000  00000000  00049ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00010ccf  00000000  00000000  000688ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000861e0  00000000  00000000  000795b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000279c  00000000  00000000  000ff79c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	40 13 41 20 b1 01 40 00 ad 01 40 00 09 05 40 00     @.A ..@...@...@.
  400010:	ad 01 40 00 31 05 40 00 59 05 40 00 00 00 00 00     ..@.1.@.Y.@.....
	...
  40002c:	ad 01 40 00 ad 01 40 00 00 00 00 00 ad 01 40 00     ..@...@.......@.
  40003c:	21 09 40 00 ad 01 40 00 ad 01 40 00 ad 01 40 00     !.@...@...@...@.
  40004c:	ad 01 40 00 ad 01 40 00 ad 01 40 00 ad 01 40 00     ..@...@...@...@.
  40005c:	ad 01 40 00 ad 01 40 00 00 00 00 00 95 07 40 00     ..@...@.......@.
  40006c:	a9 07 40 00 bd 07 40 00 ad 01 40 00 ad 01 40 00     ..@...@...@...@.
  40007c:	ad 01 40 00 d1 07 40 00 e5 07 40 00 ad 01 40 00     ..@...@...@...@.
  40008c:	9d 21 40 00 ad 01 40 00 ad 01 40 00 ad 01 40 00     .!@...@...@...@.
  40009c:	ad 01 40 00 ad 01 40 00 ad 01 40 00 ad 01 40 00     ..@...@...@...@.
  4000ac:	ad 01 40 00 ad 01 40 00 ad 01 40 00 ad 01 40 00     ..@...@...@...@.
  4000bc:	ad 01 40 00 ad 01 40 00 ad 01 40 00 ad 01 40 00     ..@...@...@...@.
  4000cc:	ad 01 40 00 00 00 00 00 ad 01 40 00 00 00 00 00     ..@.......@.....
  4000dc:	ad 01 40 00 ad 01 40 00 ad 01 40 00 ad 01 40 00     ..@...@...@...@.
  4000ec:	ad 01 40 00 ad 01 40 00 ad 01 40 00 ad 01 40 00     ..@...@...@...@.
  4000fc:	ad 01 40 00 ad 01 40 00 ad 01 40 00 ad 01 40 00     ..@...@...@...@.
  40010c:	ad 01 40 00 ad 01 40 00 ad 01 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 ad 01 40 00 ad 01 40 00 89 21 40 00     ......@...@..!@.
  40012c:	ad 01 40 00 ad 01 40 00 00 00 00 00 ad 01 40 00     ..@...@.......@.
  40013c:	ad 01 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009c0 	.word	0x204009c0
  40015c:	00000000 	.word	0x00000000
  400160:	00409ddc 	.word	0x00409ddc

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00409ddc 	.word	0x00409ddc
  4001a0:	204009c4 	.word	0x204009c4
  4001a4:	00409ddc 	.word	0x00409ddc
  4001a8:	00000000 	.word	0x00000000

004001ac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4001ac:	e7fe      	b.n	4001ac <Dummy_Handler>
	...

004001b0 <Reset_Handler>:
{
  4001b0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4001b2:	4b10      	ldr	r3, [pc, #64]	; (4001f4 <Reset_Handler+0x44>)
  4001b4:	4a10      	ldr	r2, [pc, #64]	; (4001f8 <Reset_Handler+0x48>)
  4001b6:	429a      	cmp	r2, r3
  4001b8:	d009      	beq.n	4001ce <Reset_Handler+0x1e>
  4001ba:	4b0e      	ldr	r3, [pc, #56]	; (4001f4 <Reset_Handler+0x44>)
  4001bc:	4a0e      	ldr	r2, [pc, #56]	; (4001f8 <Reset_Handler+0x48>)
  4001be:	e003      	b.n	4001c8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4001c0:	6811      	ldr	r1, [r2, #0]
  4001c2:	6019      	str	r1, [r3, #0]
  4001c4:	3304      	adds	r3, #4
  4001c6:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  4001c8:	490c      	ldr	r1, [pc, #48]	; (4001fc <Reset_Handler+0x4c>)
  4001ca:	428b      	cmp	r3, r1
  4001cc:	d3f8      	bcc.n	4001c0 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  4001ce:	4b0c      	ldr	r3, [pc, #48]	; (400200 <Reset_Handler+0x50>)
  4001d0:	e002      	b.n	4001d8 <Reset_Handler+0x28>
                *pDest++ = 0;
  4001d2:	2200      	movs	r2, #0
  4001d4:	601a      	str	r2, [r3, #0]
  4001d6:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4001d8:	4a0a      	ldr	r2, [pc, #40]	; (400204 <Reset_Handler+0x54>)
  4001da:	4293      	cmp	r3, r2
  4001dc:	d3f9      	bcc.n	4001d2 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4001de:	4a0a      	ldr	r2, [pc, #40]	; (400208 <Reset_Handler+0x58>)
  4001e0:	4b0a      	ldr	r3, [pc, #40]	; (40020c <Reset_Handler+0x5c>)
  4001e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4001e6:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  4001e8:	4b09      	ldr	r3, [pc, #36]	; (400210 <Reset_Handler+0x60>)
  4001ea:	4798      	blx	r3
        main();
  4001ec:	4b09      	ldr	r3, [pc, #36]	; (400214 <Reset_Handler+0x64>)
  4001ee:	4798      	blx	r3
  4001f0:	e7fe      	b.n	4001f0 <Reset_Handler+0x40>
  4001f2:	bf00      	nop
  4001f4:	20400000 	.word	0x20400000
  4001f8:	00409ddc 	.word	0x00409ddc
  4001fc:	204009b0 	.word	0x204009b0
  400200:	204009c0 	.word	0x204009c0
  400204:	20410d3c 	.word	0x20410d3c
  400208:	e000ed00 	.word	0xe000ed00
  40020c:	00400000 	.word	0x00400000
  400210:	0040247d 	.word	0x0040247d
  400214:	004021b1 	.word	0x004021b1

00400218 <DBG_Configure>:
 *
 * \param baudrate  Baudrate at which the USART should operate (in Hz).
 * \param masterClock  Frequency of the system master clock (in Hz).
 */
extern void DBG_Configure(uint32_t baudrate, uint32_t masterClock)
{
  400218:	b5f0      	push	{r4, r5, r6, r7, lr}
  40021a:	b087      	sub	sp, #28
  40021c:	4607      	mov	r7, r0
  40021e:	460e      	mov	r6, r1

	const Pin pPins[] = CONSOLE_PINS;
  400220:	466c      	mov	r4, sp
  400222:	4d1a      	ldr	r5, [pc, #104]	; (40028c <DBG_Configure+0x74>)
  400224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400228:	e895 0003 	ldmia.w	r5, {r0, r1}
  40022c:	e884 0003 	stmia.w	r4, {r0, r1}
#endif

#if defined CONSOLE_ON_USART
	Usart *pUsart = CONSOLE_Usart;
	// Disable the MATRIX registers write protection
	MATRIX->MATRIX_WPMR  = MATRIX_WPMR_WPKEY_PASSWD;
  400230:	4b17      	ldr	r3, [pc, #92]	; (400290 <DBG_Configure+0x78>)
  400232:	4a18      	ldr	r2, [pc, #96]	; (400294 <DBG_Configure+0x7c>)
  400234:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400238:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
  40023c:	f042 0210 	orr.w	r2, r2, #16
  400240:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	PIO_Configure(pPins, PIO_LISTSIZE(pPins));
  400244:	2102      	movs	r1, #2
  400246:	4668      	mov	r0, sp
  400248:	4b13      	ldr	r3, [pc, #76]	; (400298 <DBG_Configure+0x80>)
  40024a:	4798      	blx	r3

	// Reset & disable receiver and transmitter, disable interrupts
	pUsart->US_CR = US_CR_RSTRX | US_CR_RSTTX | US_CR_RSTSTA;
  40024c:	4c13      	ldr	r4, [pc, #76]	; (40029c <DBG_Configure+0x84>)
  40024e:	f44f 7386 	mov.w	r3, #268	; 0x10c
  400252:	6023      	str	r3, [r4, #0]
	pUsart->US_IDR = 0xFFFFFFFF;
  400254:	f04f 33ff 	mov.w	r3, #4294967295
  400258:	60e3      	str	r3, [r4, #12]
	PMC_EnablePeripheral(CONSOLE_ID);
  40025a:	200e      	movs	r0, #14
  40025c:	4b10      	ldr	r3, [pc, #64]	; (4002a0 <DBG_Configure+0x88>)
  40025e:	4798      	blx	r3
	pUsart->US_BRGR = (masterClock / baudrate) / 16;
  400260:	fbb6 f6f7 	udiv	r6, r6, r7
  400264:	0936      	lsrs	r6, r6, #4
  400266:	6226      	str	r6, [r4, #32]

	// Configure mode register
	pUsart->US_MR
		= (US_MR_USART_MODE_NORMAL | US_MR_PAR_NO | US_MR_USCLKS_MCK
  400268:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
  40026c:	6063      	str	r3, [r4, #4]
		   | US_MR_CHRL_8_BIT);

	// Enable receiver and transmitter
	pUsart->US_CR = US_CR_RXEN | US_CR_TXEN;
  40026e:	2350      	movs	r3, #80	; 0x50
  400270:	6023      	str	r3, [r4, #0]
#endif
	_ucIsConsoleInitialized = 1;
  400272:	2201      	movs	r2, #1
  400274:	4b0b      	ldr	r3, [pc, #44]	; (4002a4 <DBG_Configure+0x8c>)
  400276:	701a      	strb	r2, [r3, #0]

	/* Disable buffering for printf(). */
#if (defined (__GNUC__) && !defined (__SAMBA__))
	setvbuf(stdout, (char *)NULL, _IONBF, 0);
  400278:	4b0b      	ldr	r3, [pc, #44]	; (4002a8 <DBG_Configure+0x90>)
  40027a:	6818      	ldr	r0, [r3, #0]
  40027c:	2300      	movs	r3, #0
  40027e:	2202      	movs	r2, #2
  400280:	4619      	mov	r1, r3
  400282:	6880      	ldr	r0, [r0, #8]
  400284:	4c09      	ldr	r4, [pc, #36]	; (4002ac <DBG_Configure+0x94>)
  400286:	47a0      	blx	r4
#endif
}
  400288:	b007      	add	sp, #28
  40028a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40028c:	00408988 	.word	0x00408988
  400290:	40088000 	.word	0x40088000
  400294:	4d415400 	.word	0x4d415400
  400298:	0040065d 	.word	0x0040065d
  40029c:	40028000 	.word	0x40028000
  4002a0:	004007f9 	.word	0x004007f9
  4002a4:	204009dc 	.word	0x204009dc
  4002a8:	20400004 	.word	0x20400004
  4002ac:	00402c71 	.word	0x00402c71

004002b0 <DBG_PutChar>:
 *
 * \note This function is synchronous (i.e. uses polling).
 * \param c  Character to send.
 */
extern void DBG_PutChar(uint8_t c)
{
  4002b0:	b510      	push	{r4, lr}
  4002b2:	4604      	mov	r4, r0
#endif

#if defined CONSOLE_ON_USART
	Usart *pUsart = CONSOLE_Usart;

	if (!_ucIsConsoleInitialized)
  4002b4:	4b0a      	ldr	r3, [pc, #40]	; (4002e0 <DBG_PutChar+0x30>)
  4002b6:	781b      	ldrb	r3, [r3, #0]
  4002b8:	b163      	cbz	r3, 4002d4 <DBG_PutChar+0x24>
		DBG_Configure(CONSOLE_BAUDRATE, BOARD_MCK);

	// Wait for the transmitter to be ready
	while ((pUsart->US_CSR & US_CSR_TXEMPTY) == 0);
  4002ba:	4b0a      	ldr	r3, [pc, #40]	; (4002e4 <DBG_PutChar+0x34>)
  4002bc:	695b      	ldr	r3, [r3, #20]
  4002be:	f413 7f00 	tst.w	r3, #512	; 0x200
  4002c2:	d0fa      	beq.n	4002ba <DBG_PutChar+0xa>

	// Send character
	pUsart->US_THR = c;
  4002c4:	4b07      	ldr	r3, [pc, #28]	; (4002e4 <DBG_PutChar+0x34>)
  4002c6:	61dc      	str	r4, [r3, #28]

	// Wait for the transfer to complete
	while ((pUsart->US_CSR & US_CSR_TXEMPTY) == 0);
  4002c8:	4b06      	ldr	r3, [pc, #24]	; (4002e4 <DBG_PutChar+0x34>)
  4002ca:	695b      	ldr	r3, [r3, #20]
  4002cc:	f413 7f00 	tst.w	r3, #512	; 0x200
  4002d0:	d0fa      	beq.n	4002c8 <DBG_PutChar+0x18>

#endif
}
  4002d2:	bd10      	pop	{r4, pc}
		DBG_Configure(CONSOLE_BAUDRATE, BOARD_MCK);
  4002d4:	4904      	ldr	r1, [pc, #16]	; (4002e8 <DBG_PutChar+0x38>)
  4002d6:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
  4002da:	4b04      	ldr	r3, [pc, #16]	; (4002ec <DBG_PutChar+0x3c>)
  4002dc:	4798      	blx	r3
  4002de:	e7ec      	b.n	4002ba <DBG_PutChar+0xa>
  4002e0:	204009dc 	.word	0x204009dc
  4002e4:	40028000 	.word	0x40028000
  4002e8:	08f0d180 	.word	0x08f0d180
  4002ec:	00400219 	.word	0x00400219

004002f0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid (void);

extern caddr_t _sbrk (int incr)
{
  4002f0:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_sheap;

	if (heap == NULL)
  4002f2:	4a06      	ldr	r2, [pc, #24]	; (40030c <_sbrk+0x1c>)
  4002f4:	6812      	ldr	r2, [r2, #0]
  4002f6:	b122      	cbz	r2, 400302 <_sbrk+0x12>
		heap = (unsigned char *)&_sheap;

	prev_sheap = heap;
  4002f8:	4a04      	ldr	r2, [pc, #16]	; (40030c <_sbrk+0x1c>)
  4002fa:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  4002fc:	4403      	add	r3, r0
  4002fe:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_sheap;
}
  400300:	4770      	bx	lr
		heap = (unsigned char *)&_sheap;
  400302:	4903      	ldr	r1, [pc, #12]	; (400310 <_sbrk+0x20>)
  400304:	4a01      	ldr	r2, [pc, #4]	; (40030c <_sbrk+0x1c>)
  400306:	6011      	str	r1, [r2, #0]
  400308:	e7f6      	b.n	4002f8 <_sbrk+0x8>
  40030a:	bf00      	nop
  40030c:	204009e4 	.word	0x204009e4
  400310:	20410d40 	.word	0x20410d40

00400314 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400314:	f04f 30ff 	mov.w	r0, #4294967295
  400318:	4770      	bx	lr

0040031a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40031a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40031e:	604b      	str	r3, [r1, #4]

	return 0;
}
  400320:	2000      	movs	r0, #0
  400322:	4770      	bx	lr

00400324 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400324:	2001      	movs	r0, #1
  400326:	4770      	bx	lr

00400328 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400328:	2000      	movs	r0, #0
  40032a:	4770      	bx	lr

0040032c <_read>:

extern int _read(int file, char *ptr, int len)
{
	return 0;
}
  40032c:	2000      	movs	r0, #0
  40032e:	4770      	bx	lr

00400330 <_write>:

extern int _write(int file, char *ptr, int len)
{
  400330:	b570      	push	{r4, r5, r6, lr}
  400332:	460d      	mov	r5, r1
  400334:	4616      	mov	r6, r2
	int iIndex;

	//    for (; *ptr != 0; ptr++)
	for (iIndex = 0; iIndex < len; iIndex++, ptr++)
  400336:	2400      	movs	r4, #0
  400338:	e004      	b.n	400344 <_write+0x14>
		DBG_PutChar(*ptr);
  40033a:	f815 0b01 	ldrb.w	r0, [r5], #1
  40033e:	4b03      	ldr	r3, [pc, #12]	; (40034c <_write+0x1c>)
  400340:	4798      	blx	r3
	for (iIndex = 0; iIndex < len; iIndex++, ptr++)
  400342:	3401      	adds	r4, #1
  400344:	42b4      	cmp	r4, r6
  400346:	dbf8      	blt.n	40033a <_write+0xa>

	return iIndex;
}
  400348:	4620      	mov	r0, r4
  40034a:	bd70      	pop	{r4, r5, r6, pc}
  40034c:	004002b1 	.word	0x004002b1

00400350 <_exit>:

extern void _exit(int status)
{
  400350:	b508      	push	{r3, lr}
	printf("Exiting with status %d.\n", status);
  400352:	4601      	mov	r1, r0
  400354:	4801      	ldr	r0, [pc, #4]	; (40035c <_exit+0xc>)
  400356:	4b02      	ldr	r3, [pc, #8]	; (400360 <_exit+0x10>)
  400358:	4798      	blx	r3
  40035a:	e7fe      	b.n	40035a <_exit+0xa>
  40035c:	004089a0 	.word	0x004089a0
  400360:	00402c25 	.word	0x00402c25

00400364 <_kill>:

	for (;;);
}

extern void _kill(int pid, int sig)
{
  400364:	4770      	bx	lr

00400366 <_getpid>:
}

extern int _getpid (void)
{
	return -1;
}
  400366:	f04f 30ff 	mov.w	r0, #4294967295
  40036a:	4770      	bx	lr

0040036c <WM8904_Read>:
 * \return value in the given register.
 */
uint16_t WM8904_Read(Twid *pTwid,
					 uint32_t device,
					 uint32_t regAddr)
{
  40036c:	b510      	push	{r4, lr}
  40036e:	b086      	sub	sp, #24
	uint16_t bitsDataRegister;
	uint8_t Tdata[2] = {0, 0};
  400370:	2300      	movs	r3, #0
  400372:	f88d 3014 	strb.w	r3, [sp, #20]
  400376:	f88d 3015 	strb.w	r3, [sp, #21]

	TWID_Read(pTwid, device, regAddr, 1, Tdata, 2, 0);
  40037a:	9302      	str	r3, [sp, #8]
  40037c:	2302      	movs	r3, #2
  40037e:	9301      	str	r3, [sp, #4]
  400380:	ab05      	add	r3, sp, #20
  400382:	9300      	str	r3, [sp, #0]
  400384:	2301      	movs	r3, #1
  400386:	b2c9      	uxtb	r1, r1
  400388:	4c04      	ldr	r4, [pc, #16]	; (40039c <WM8904_Read+0x30>)
  40038a:	47a0      	blx	r4
	bitsDataRegister = (Tdata[0] << 8) | Tdata[1];
  40038c:	f89d 0014 	ldrb.w	r0, [sp, #20]
  400390:	f89d 3015 	ldrb.w	r3, [sp, #21]
	return bitsDataRegister;
}
  400394:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  400398:	b006      	add	sp, #24
  40039a:	bd10      	pop	{r4, pc}
  40039c:	00400eed 	.word	0x00400eed

004003a0 <WM8904_Write>:
 */
void WM8904_Write(Twid *pTwid,
				  uint32_t device,
				  uint32_t regAddr,
				  uint16_t data)
{
  4003a0:	b510      	push	{r4, lr}
  4003a2:	b086      	sub	sp, #24
	uint8_t tmpData[2];

	tmpData[0] = (data & 0xff00) >> 8;
  4003a4:	0a1c      	lsrs	r4, r3, #8
  4003a6:	f88d 4014 	strb.w	r4, [sp, #20]
	tmpData[1] = data & 0xff;
  4003aa:	f88d 3015 	strb.w	r3, [sp, #21]
	TWID_Write(pTwid, device, regAddr, 1, tmpData, 2, 0);
  4003ae:	2300      	movs	r3, #0
  4003b0:	9302      	str	r3, [sp, #8]
  4003b2:	2302      	movs	r3, #2
  4003b4:	9301      	str	r3, [sp, #4]
  4003b6:	ab05      	add	r3, sp, #20
  4003b8:	9300      	str	r3, [sp, #0]
  4003ba:	2301      	movs	r3, #1
  4003bc:	b2c9      	uxtb	r1, r1
  4003be:	4c02      	ldr	r4, [pc, #8]	; (4003c8 <WM8904_Write+0x28>)
  4003c0:	47a0      	blx	r4
}
  4003c2:	b006      	add	sp, #24
  4003c4:	bd10      	pop	{r4, pc}
  4003c6:	bf00      	nop
  4003c8:	00401065 	.word	0x00401065

004003cc <WM8904_Init>:
	//{ 0x0019, 248}, /** R248 - FLL NCO Test 1 */
	{ 0x55AA, 255}  /** end */
};

uint8_t WM8904_Init(Twid *pTwid, uint32_t device,  uint32_t PCK)
{
  4003cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4003d0:	4681      	mov	r9, r0
  4003d2:	4688      	mov	r8, r1
  4003d4:	4614      	mov	r4, r2
	uint8_t count, size;
	uint16_t data = 0;

	// Reset (write Reg@0x0 to reset)
	WM8904_Write(pTwid, device, 0, 0xFFFF);
  4003d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4003da:	2200      	movs	r2, #0
  4003dc:	4d31      	ldr	r5, [pc, #196]	; (4004a4 <WM8904_Init+0xd8>)
  4003de:	47a8      	blx	r5

	for (data = 0; data < 1000; data++);
  4003e0:	2000      	movs	r0, #0
  4003e2:	e001      	b.n	4003e8 <WM8904_Init+0x1c>
  4003e4:	3001      	adds	r0, #1
  4003e6:	b280      	uxth	r0, r0
  4003e8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
  4003ec:	d3fa      	bcc.n	4003e4 <WM8904_Init+0x18>
  4003ee:	e004      	b.n	4003fa <WM8904_Init+0x2e>

	//wait ready
	while (data != 0x8904)
		data = WM8904_Read(pTwid, device, 0);
  4003f0:	2200      	movs	r2, #0
  4003f2:	4641      	mov	r1, r8
  4003f4:	4648      	mov	r0, r9
  4003f6:	4b2c      	ldr	r3, [pc, #176]	; (4004a8 <WM8904_Init+0xdc>)
  4003f8:	4798      	blx	r3
	while (data != 0x8904)
  4003fa:	f648 1304 	movw	r3, #35076	; 0x8904
  4003fe:	4298      	cmp	r0, r3
  400400:	d1f6      	bne.n	4003f0 <WM8904_Init+0x24>

	if (PMC_MCKR_CSS_SLOW_CLK == PCK) {
  400402:	2c00      	cmp	r4, #0
  400404:	d045      	beq.n	400492 <WM8904_Init+0xc6>
				 && (wm8904_access_slow[count].value == 0x00F0))
				|| ((wm8904_access_slow[count].address == 0x3A)
					&& (wm8904_access_slow[count].value == 0x00B9)))
				Wait(100);
		}
	} else if (PMC_MCKR_CSS_MAIN_CLK == PCK) {
  400406:	2c01      	cmp	r4, #1
  400408:	d145      	bne.n	400496 <WM8904_Init+0xca>
  40040a:	2400      	movs	r4, #0
		for (count = 0; count < 255; count++) {
  40040c:	2cff      	cmp	r4, #255	; 0xff
  40040e:	d046      	beq.n	40049e <WM8904_Init+0xd2>
			if (wm8904_access_main[count].address < 255) {
  400410:	4b26      	ldr	r3, [pc, #152]	; (4004ac <WM8904_Init+0xe0>)
  400412:	eb03 0384 	add.w	r3, r3, r4, lsl #2
  400416:	f893 2096 	ldrb.w	r2, [r3, #150]	; 0x96
  40041a:	2aff      	cmp	r2, #255	; 0xff
  40041c:	d03f      	beq.n	40049e <WM8904_Init+0xd2>
				WM8904_Write(pTwid, device, wm8904_access_main[count].address,
  40041e:	4b23      	ldr	r3, [pc, #140]	; (4004ac <WM8904_Init+0xe0>)
  400420:	eb03 0384 	add.w	r3, r3, r4, lsl #2
  400424:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
  400428:	4641      	mov	r1, r8
  40042a:	4648      	mov	r0, r9
  40042c:	4d1d      	ldr	r5, [pc, #116]	; (4004a4 <WM8904_Init+0xd8>)
  40042e:	47a8      	blx	r5
		for (count = 0; count < 255; count++) {
  400430:	3401      	adds	r4, #1
  400432:	b2e4      	uxtb	r4, r4
  400434:	e7ea      	b.n	40040c <WM8904_Init+0x40>
				 && (wm8904_access_slow[count].value == 0x0047))
  400436:	2e47      	cmp	r6, #71	; 0x47
  400438:	d118      	bne.n	40046c <WM8904_Init+0xa0>
				Wait(5);
  40043a:	2005      	movs	r0, #5
  40043c:	4b1c      	ldr	r3, [pc, #112]	; (4004b0 <WM8904_Init+0xe4>)
  40043e:	4798      	blx	r3
			if (((wm8904_access_slow[count].address == 0x44)
  400440:	2d44      	cmp	r5, #68	; 0x44
  400442:	d01d      	beq.n	400480 <WM8904_Init+0xb4>
				|| ((wm8904_access_slow[count].address == 0x3A)
  400444:	2d3a      	cmp	r5, #58	; 0x3a
  400446:	d021      	beq.n	40048c <WM8904_Init+0xc0>
		for (count = 0; count < size; count++) {
  400448:	3401      	adds	r4, #1
  40044a:	b2e4      	uxtb	r4, r4
  40044c:	2c24      	cmp	r4, #36	; 0x24
  40044e:	d826      	bhi.n	40049e <WM8904_Init+0xd2>
			WM8904_Write(pTwid, device, wm8904_access_slow[count].address,
  400450:	4b16      	ldr	r3, [pc, #88]	; (4004ac <WM8904_Init+0xe0>)
  400452:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  400456:	7895      	ldrb	r5, [r2, #2]
  400458:	f833 6024 	ldrh.w	r6, [r3, r4, lsl #2]
  40045c:	4633      	mov	r3, r6
  40045e:	462a      	mov	r2, r5
  400460:	4641      	mov	r1, r8
  400462:	4648      	mov	r0, r9
  400464:	4f0f      	ldr	r7, [pc, #60]	; (4004a4 <WM8904_Init+0xd8>)
  400466:	47b8      	blx	r7
			if (((wm8904_access_slow[count].address == 0x05)
  400468:	2d05      	cmp	r5, #5
  40046a:	d0e4      	beq.n	400436 <WM8904_Init+0x6a>
				|| ((wm8904_access_slow[count].address == 0x74)
  40046c:	2d74      	cmp	r5, #116	; 0x74
  40046e:	d004      	beq.n	40047a <WM8904_Init+0xae>
				|| ((wm8904_access_slow[count].address == 0x12)
  400470:	2d12      	cmp	r5, #18
  400472:	d1e5      	bne.n	400440 <WM8904_Init+0x74>
					&& (wm8904_access_slow[count].value == 0x000F)))
  400474:	2e0f      	cmp	r6, #15
  400476:	d1e3      	bne.n	400440 <WM8904_Init+0x74>
  400478:	e7df      	b.n	40043a <WM8904_Init+0x6e>
					&& (wm8904_access_slow[count].value == 0x0005))
  40047a:	2e05      	cmp	r6, #5
  40047c:	d1f8      	bne.n	400470 <WM8904_Init+0xa4>
  40047e:	e7dc      	b.n	40043a <WM8904_Init+0x6e>
				 && (wm8904_access_slow[count].value == 0x00F0))
  400480:	2ef0      	cmp	r6, #240	; 0xf0
  400482:	d1df      	bne.n	400444 <WM8904_Init+0x78>
				Wait(100);
  400484:	2064      	movs	r0, #100	; 0x64
  400486:	4b0a      	ldr	r3, [pc, #40]	; (4004b0 <WM8904_Init+0xe4>)
  400488:	4798      	blx	r3
  40048a:	e7dd      	b.n	400448 <WM8904_Init+0x7c>
					&& (wm8904_access_slow[count].value == 0x00B9)))
  40048c:	2eb9      	cmp	r6, #185	; 0xb9
  40048e:	d1db      	bne.n	400448 <WM8904_Init+0x7c>
  400490:	e7f8      	b.n	400484 <WM8904_Init+0xb8>
  400492:	2400      	movs	r4, #0
  400494:	e7da      	b.n	40044c <WM8904_Init+0x80>
							 wm8904_access_main[count].value);
			} else
				break;
		}
	} else {
		printf("W: PCK not supported! \n\r");
  400496:	4807      	ldr	r0, [pc, #28]	; (4004b4 <WM8904_Init+0xe8>)
  400498:	4b07      	ldr	r3, [pc, #28]	; (4004b8 <WM8904_Init+0xec>)
  40049a:	4798      	blx	r3
  40049c:	e7fe      	b.n	40049c <WM8904_Init+0xd0>

		while (1);
	}

	return 0;
}
  40049e:	2000      	movs	r0, #0
  4004a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4004a4:	004003a1 	.word	0x004003a1
  4004a8:	0040036d 	.word	0x0040036d
  4004ac:	004089bc 	.word	0x004089bc
  4004b0:	00400a69 	.word	0x00400a69
  4004b4:	00408ab0 	.word	0x00408ab0
  4004b8:	00402c25 	.word	0x00402c25

004004bc <HardFault_reason>:
{
	uint32_t CFSRValue;
	TRACE_DEBUG("In Hard Fault Handler\n\r");
	TRACE_DEBUG("SCB->HFSR = 0x%08x\n\r", SCB->HFSR);

	if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk)) {
  4004bc:	4b10      	ldr	r3, [pc, #64]	; (400500 <HardFault_reason+0x44>)
  4004be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		TRACE_DEBUG("Debug Event Hard Fault\n\r");
		TRACE_DEBUG("SCB->DFSR = 0x%08x\n", SCB->DFSR);
	}

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk)) {
  4004c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		TRACE_DEBUG("Fault was due to vector table read on \
			exception processing\n\r");
	}

	// Forced HardFault
	if ((SCB->HFSR & SCB_HFSR_FORCED_Msk)) {
  4004c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4004c4:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
  4004c8:	d00d      	beq.n	4004e6 <HardFault_reason+0x2a>
		TRACE_DEBUG("Forced Hard Fault\n\r");
		TRACE_DEBUG("SCB->CFSR = 0x%08x\n\r", SCB->CFSR);

		// Usage Fault
		if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk)) {
  4004ca:	4b0d      	ldr	r3, [pc, #52]	; (400500 <HardFault_reason+0x44>)
  4004cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  4004ce:	4b0d      	ldr	r3, [pc, #52]	; (400504 <HardFault_reason+0x48>)
  4004d0:	4013      	ands	r3, r2
  4004d2:	b10b      	cbz	r3, 4004d8 <HardFault_reason+0x1c>
			CFSRValue = SCB->CFSR;
  4004d4:	4b0a      	ldr	r3, [pc, #40]	; (400500 <HardFault_reason+0x44>)
  4004d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			if ((CFSRValue & (1 << 2)))
				TRACE_DEBUG("Integrity check error on EXC_RETURN\n\r");
		}

		// Bus Fault
		if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk)) {
  4004d8:	4b09      	ldr	r3, [pc, #36]	; (400500 <HardFault_reason+0x44>)
  4004da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4004dc:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
  4004e0:	d001      	beq.n	4004e6 <HardFault_reason+0x2a>
			CFSRValue = SCB->CFSR;
  4004e2:	4b07      	ldr	r3, [pc, #28]	; (400500 <HardFault_reason+0x44>)
  4004e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			}
		}
	}

	// MemoryFault
	if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk)) {
  4004e6:	4b06      	ldr	r3, [pc, #24]	; (400500 <HardFault_reason+0x44>)
  4004e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4004ea:	f013 0fff 	tst.w	r3, #255	; 0xff
  4004ee:	d001      	beq.n	4004f4 <HardFault_reason+0x38>
		CFSRValue = SCB->CFSR;
  4004f0:	4b03      	ldr	r3, [pc, #12]	; (400500 <HardFault_reason+0x44>)
  4004f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
  4004f4:	f3bf 8f6f 	isb	sy
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4004f8:	f3bf 8f5f 	dmb	sy
			TRACE_DEBUG("Divide by zero\n\r");
	}

	__ISB();
	__DMB();
	__ASM volatile("BKPT #01");
  4004fc:	be01      	bkpt	0x0001
  4004fe:	4770      	bx	lr
  400500:	e000ed00 	.word	0xe000ed00
  400504:	ffff0000 	.word	0xffff0000

00400508 <HardFault_Handler>:
/**
 * \brief Default HardFault interrupt handler.
 */

void HardFault_Handler(void)
{
  400508:	b508      	push	{r3, lr}
	__ASM("mrs r0, msp ");
  40050a:	f3ef 8008 	mrs	r0, MSP
	__ASM("ldr %0, [r0,#28]" : "=r" (Fault_Add));
  40050e:	69c1      	ldr	r1, [r0, #28]
	printf("\n\rHardFault at address 0X%x\n\r", (int)StackUnwind());
  400510:	4804      	ldr	r0, [pc, #16]	; (400524 <HardFault_Handler+0x1c>)
  400512:	4b05      	ldr	r3, [pc, #20]	; (400528 <HardFault_Handler+0x20>)
  400514:	4798      	blx	r3
  __ASM volatile ("isb 0xF":::"memory");
  400516:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dmb 0xF":::"memory");
  40051a:	f3bf 8f5f 	dmb	sy
	__ISB();
	__DMB();
	HardFault_reason();
  40051e:	4b03      	ldr	r3, [pc, #12]	; (40052c <HardFault_Handler+0x24>)
  400520:	4798      	blx	r3
  400522:	bd08      	pop	{r3, pc}
  400524:	00408ae8 	.word	0x00408ae8
  400528:	00402c25 	.word	0x00402c25
  40052c:	004004bd 	.word	0x004004bd

00400530 <BusFault_Handler>:

/**
 * \brief Default BusFault interrupt handler.
 */
void BusFault_Handler(void)
{
  400530:	b508      	push	{r3, lr}
	__ASM("nop");
  400532:	bf00      	nop
	__ASM("nop");
  400534:	bf00      	nop
	__ASM("mrs r0, msp ");
  400536:	f3ef 8008 	mrs	r0, MSP
	__ASM("ldr %0, [r0,#28]" : "=r" (Fault_Add));
  40053a:	69c1      	ldr	r1, [r0, #28]
	printf("\n\rBus Fault at address 0X%x\n\r", (int)StackUnwind());
  40053c:	4804      	ldr	r0, [pc, #16]	; (400550 <BusFault_Handler+0x20>)
  40053e:	4b05      	ldr	r3, [pc, #20]	; (400554 <BusFault_Handler+0x24>)
  400540:	4798      	blx	r3
  __ASM volatile ("isb 0xF":::"memory");
  400542:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dmb 0xF":::"memory");
  400546:	f3bf 8f5f 	dmb	sy

	__ISB();
	__DMB();
	__ASM volatile("BKPT #01");
  40054a:	be01      	bkpt	0x0001
  40054c:	bd08      	pop	{r3, pc}
  40054e:	bf00      	nop
  400550:	00408b38 	.word	0x00408b38
  400554:	00402c25 	.word	0x00402c25

00400558 <UsageFault_Handler>:

/**
 * \brief Default UsageFault interrupt handler.
 */
void UsageFault_Handler(void)
{
  400558:	b508      	push	{r3, lr}
	__ASM("mrs r0, msp ");
  40055a:	f3ef 8008 	mrs	r0, MSP
	__ASM("ldr %0, [r0,#28]" : "=r" (Fault_Add));
  40055e:	69c1      	ldr	r1, [r0, #28]
	printf("\r\nUsage fault at address 0X%x", (int)StackUnwind());
  400560:	4804      	ldr	r0, [pc, #16]	; (400574 <UsageFault_Handler+0x1c>)
  400562:	4b05      	ldr	r3, [pc, #20]	; (400578 <UsageFault_Handler+0x20>)
  400564:	4798      	blx	r3
  __ASM volatile ("isb 0xF":::"memory");
  400566:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dmb 0xF":::"memory");
  40056a:	f3bf 8f5f 	dmb	sy

	__ISB();
	__DMB();
	__ASM volatile("BKPT #01");
  40056e:	be01      	bkpt	0x0001
  400570:	bd08      	pop	{r3, pc}
  400572:	bf00      	nop
  400574:	00408b58 	.word	0x00408b58
  400578:	00402c25 	.word	0x00402c25

0040057c <PIO_SetPeripheralA>:
 */
static void PIO_SetPeripheralA(
	Pio *pio,
	unsigned int mask,
	unsigned char enablePullUp)
{
  40057c:	b410      	push	{r4}
	unsigned int abcdsr;
	/* Disable interrupts on the pin(s) */
	pio->PIO_IDR = mask;
  40057e:	6441      	str	r1, [r0, #68]	; 0x44

	/* Enable the pull-up(s) if necessary */
	if (enablePullUp)
  400580:	b972      	cbnz	r2, 4005a0 <PIO_SetPeripheralA+0x24>
		pio->PIO_PUER = mask;
	else
		pio->PIO_PUDR = mask;
  400582:	6601      	str	r1, [r0, #96]	; 0x60

	abcdsr = pio->PIO_ABCDSR[0];
  400584:	6f04      	ldr	r4, [r0, #112]	; 0x70
	pio->PIO_ABCDSR[0] &= (~mask & abcdsr);
  400586:	6f02      	ldr	r2, [r0, #112]	; 0x70
  400588:	43cb      	mvns	r3, r1
  40058a:	401c      	ands	r4, r3
  40058c:	4022      	ands	r2, r4
  40058e:	6702      	str	r2, [r0, #112]	; 0x70
	abcdsr = pio->PIO_ABCDSR[1];
  400590:	6f44      	ldr	r4, [r0, #116]	; 0x74
	pio->PIO_ABCDSR[1] &= (~mask & abcdsr);
  400592:	6f42      	ldr	r2, [r0, #116]	; 0x74
  400594:	4023      	ands	r3, r4
  400596:	4013      	ands	r3, r2
  400598:	6743      	str	r3, [r0, #116]	; 0x74
	pio->PIO_PDR = mask;
  40059a:	6041      	str	r1, [r0, #4]
}
  40059c:	bc10      	pop	{r4}
  40059e:	4770      	bx	lr
		pio->PIO_PUER = mask;
  4005a0:	6641      	str	r1, [r0, #100]	; 0x64
  4005a2:	e7ef      	b.n	400584 <PIO_SetPeripheralA+0x8>

004005a4 <PIO_SetPeripheralB>:
	unsigned int mask,
	unsigned char enablePullUp)
{
	unsigned int abcdsr;
	/* Disable interrupts on the pin(s) */
	pio->PIO_IDR = mask;
  4005a4:	6441      	str	r1, [r0, #68]	; 0x44

	/* Enable the pull-up(s) if necessary */
	if (enablePullUp)
  4005a6:	b95a      	cbnz	r2, 4005c0 <PIO_SetPeripheralB+0x1c>
		pio->PIO_PUER = mask;
	else
		pio->PIO_PUDR = mask;
  4005a8:	6601      	str	r1, [r0, #96]	; 0x60

	abcdsr = pio->PIO_ABCDSR[0];
  4005aa:	6f03      	ldr	r3, [r0, #112]	; 0x70
	pio->PIO_ABCDSR[0] = (mask | abcdsr);
  4005ac:	430b      	orrs	r3, r1
  4005ae:	6703      	str	r3, [r0, #112]	; 0x70
	abcdsr = pio->PIO_ABCDSR[1];
  4005b0:	6f42      	ldr	r2, [r0, #116]	; 0x74
	pio->PIO_ABCDSR[1] &= (~mask & abcdsr);
  4005b2:	6f43      	ldr	r3, [r0, #116]	; 0x74
  4005b4:	ea22 0201 	bic.w	r2, r2, r1
  4005b8:	4013      	ands	r3, r2
  4005ba:	6743      	str	r3, [r0, #116]	; 0x74

	pio->PIO_PDR = mask;
  4005bc:	6041      	str	r1, [r0, #4]
  4005be:	4770      	bx	lr
		pio->PIO_PUER = mask;
  4005c0:	6641      	str	r1, [r0, #100]	; 0x64
  4005c2:	e7f2      	b.n	4005aa <PIO_SetPeripheralB+0x6>

004005c4 <PIO_SetPeripheralC>:
	unsigned int mask,
	unsigned char enablePullUp)
{
	unsigned int abcdsr;
	/* Disable interrupts on the pin(s) */
	pio->PIO_IDR = mask;
  4005c4:	6441      	str	r1, [r0, #68]	; 0x44

	/* Enable the pull-up(s) if necessary */
	if (enablePullUp)
  4005c6:	b95a      	cbnz	r2, 4005e0 <PIO_SetPeripheralC+0x1c>
		pio->PIO_PUER = mask;
	else
		pio->PIO_PUDR = mask;
  4005c8:	6601      	str	r1, [r0, #96]	; 0x60

	abcdsr = pio->PIO_ABCDSR[0];
  4005ca:	6f02      	ldr	r2, [r0, #112]	; 0x70
	pio->PIO_ABCDSR[0] &= (~mask & abcdsr);
  4005cc:	6f03      	ldr	r3, [r0, #112]	; 0x70
  4005ce:	ea22 0201 	bic.w	r2, r2, r1
  4005d2:	4013      	ands	r3, r2
  4005d4:	6703      	str	r3, [r0, #112]	; 0x70
	abcdsr = pio->PIO_ABCDSR[1];
  4005d6:	6f43      	ldr	r3, [r0, #116]	; 0x74
	pio->PIO_ABCDSR[1] = (mask | abcdsr);
  4005d8:	430b      	orrs	r3, r1
  4005da:	6743      	str	r3, [r0, #116]	; 0x74

	pio->PIO_PDR = mask;
  4005dc:	6041      	str	r1, [r0, #4]
  4005de:	4770      	bx	lr
		pio->PIO_PUER = mask;
  4005e0:	6641      	str	r1, [r0, #100]	; 0x64
  4005e2:	e7f2      	b.n	4005ca <PIO_SetPeripheralC+0x6>

004005e4 <PIO_SetPeripheralD>:
	unsigned int mask,
	unsigned char enablePullUp)
{
	unsigned int abcdsr;
	/* Disable interrupts on the pin(s) */
	pio->PIO_IDR = mask;
  4005e4:	6441      	str	r1, [r0, #68]	; 0x44

	/* Enable the pull-up(s) if necessary */
	if (enablePullUp)
  4005e6:	b942      	cbnz	r2, 4005fa <PIO_SetPeripheralD+0x16>
		pio->PIO_PUER = mask;
	else
		pio->PIO_PUDR = mask;
  4005e8:	6601      	str	r1, [r0, #96]	; 0x60

	abcdsr = pio->PIO_ABCDSR[0];
  4005ea:	6f03      	ldr	r3, [r0, #112]	; 0x70
	pio->PIO_ABCDSR[0] = (mask | abcdsr);
  4005ec:	430b      	orrs	r3, r1
  4005ee:	6703      	str	r3, [r0, #112]	; 0x70
	abcdsr = pio->PIO_ABCDSR[1];
  4005f0:	6f43      	ldr	r3, [r0, #116]	; 0x74
	pio->PIO_ABCDSR[1] = (mask | abcdsr);
  4005f2:	430b      	orrs	r3, r1
  4005f4:	6743      	str	r3, [r0, #116]	; 0x74

	pio->PIO_PDR = mask;
  4005f6:	6041      	str	r1, [r0, #4]
  4005f8:	4770      	bx	lr
		pio->PIO_PUER = mask;
  4005fa:	6641      	str	r1, [r0, #100]	; 0x64
  4005fc:	e7f5      	b.n	4005ea <PIO_SetPeripheralD+0x6>

004005fe <PIO_SetInput>:
	Pio *pio,
	unsigned int mask,
	unsigned char attribute)
{
	/* Disable interrupts */
	pio->PIO_IDR = mask;
  4005fe:	6441      	str	r1, [r0, #68]	; 0x44

	/* Enable pull-up(s) if necessary */
	if (attribute & PIO_PULLUP)
  400600:	f012 0f01 	tst.w	r2, #1
  400604:	d00d      	beq.n	400622 <PIO_SetInput+0x24>
		pio->PIO_PUER = mask;
  400606:	6641      	str	r1, [r0, #100]	; 0x64
	else
		pio->PIO_PUDR = mask;

	/* Enable Input Filter if necessary */
	if (attribute & (PIO_DEGLITCH | PIO_DEBOUNCE))
  400608:	f012 0f0a 	tst.w	r2, #10
  40060c:	d00b      	beq.n	400626 <PIO_SetInput+0x28>
		pio->PIO_IFER = mask;
  40060e:	6201      	str	r1, [r0, #32]
	else
		pio->PIO_IFDR = mask;

	/* Enable de-glitch or de-bounce if necessary */
	if (attribute & PIO_DEGLITCH)
  400610:	f012 0f02 	tst.w	r2, #2
  400614:	d109      	bne.n	40062a <PIO_SetInput+0x2c>
		pio->PIO_IFSCDR = mask;
	else {
		if (attribute & PIO_DEBOUNCE)
  400616:	f012 0f08 	tst.w	r2, #8
  40061a:	d008      	beq.n	40062e <PIO_SetInput+0x30>
			pio->PIO_IFSCER = mask;
  40061c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400620:	e005      	b.n	40062e <PIO_SetInput+0x30>
		pio->PIO_PUDR = mask;
  400622:	6601      	str	r1, [r0, #96]	; 0x60
  400624:	e7f0      	b.n	400608 <PIO_SetInput+0xa>
		pio->PIO_IFDR = mask;
  400626:	6241      	str	r1, [r0, #36]	; 0x24
  400628:	e7f2      	b.n	400610 <PIO_SetInput+0x12>
		pio->PIO_IFSCDR = mask;
  40062a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	}

	/* Configure pin as input */
	pio->PIO_ODR = mask;
  40062e:	6141      	str	r1, [r0, #20]
	pio->PIO_PER = mask;
  400630:	6001      	str	r1, [r0, #0]
  400632:	4770      	bx	lr

00400634 <PIO_SetOutput>:
	Pio *pio,
	unsigned int mask,
	unsigned char defaultValue,
	unsigned char enableMultiDrive,
	unsigned char enablePullUp)
{
  400634:	b410      	push	{r4}
  400636:	f89d 4004 	ldrb.w	r4, [sp, #4]
	/* Disable interrupts */
	pio->PIO_IDR = mask;
  40063a:	6441      	str	r1, [r0, #68]	; 0x44

	/* Enable pull-up(s) if necessary */
	if (enablePullUp)
  40063c:	b144      	cbz	r4, 400650 <PIO_SetOutput+0x1c>
		pio->PIO_PUER = mask;
  40063e:	6641      	str	r1, [r0, #100]	; 0x64
	else
		pio->PIO_PUDR = mask;

	/* Enable multi-drive if necessary */
	if (enableMultiDrive)
  400640:	b143      	cbz	r3, 400654 <PIO_SetOutput+0x20>
		pio->PIO_MDER = mask;
  400642:	6501      	str	r1, [r0, #80]	; 0x50
	else
		pio->PIO_MDDR = mask;

	/* Set default value */
	if (defaultValue)
  400644:	b942      	cbnz	r2, 400658 <PIO_SetOutput+0x24>
		pio->PIO_SODR = mask;
	else
		pio->PIO_CODR = mask;
  400646:	6341      	str	r1, [r0, #52]	; 0x34

	/* Configure pin(s) as output(s) */
	pio->PIO_OER = mask;
  400648:	6101      	str	r1, [r0, #16]
	pio->PIO_PER = mask;
  40064a:	6001      	str	r1, [r0, #0]
}
  40064c:	bc10      	pop	{r4}
  40064e:	4770      	bx	lr
		pio->PIO_PUDR = mask;
  400650:	6601      	str	r1, [r0, #96]	; 0x60
  400652:	e7f5      	b.n	400640 <PIO_SetOutput+0xc>
		pio->PIO_MDDR = mask;
  400654:	6541      	str	r1, [r0, #84]	; 0x54
  400656:	e7f5      	b.n	400644 <PIO_SetOutput+0x10>
		pio->PIO_SODR = mask;
  400658:	6301      	str	r1, [r0, #48]	; 0x30
  40065a:	e7f5      	b.n	400648 <PIO_SetOutput+0x14>

0040065c <PIO_Configure>:
 * \param size  Size of the Pin list (calculated using PIO_LISTSIZE).
 *
 * \return 1 if the pins have been configured properly; otherwise 0.
 */
uint8_t PIO_Configure(const Pin *list, uint32_t size)
{
  40065c:	b570      	push	{r4, r5, r6, lr}
  40065e:	b082      	sub	sp, #8
  400660:	4604      	mov	r4, r0
  400662:	460d      	mov	r5, r1
	/* Configure pins */
	while (size > 0) {
  400664:	e008      	b.n	400678 <PIO_Configure+0x1c>
		switch (list->type) {
		case PIO_PERIPH_A:
			PIO_SetPeripheralA(list->pio,
							   list->mask,
							   (list->attribute & PIO_PULLUP) ? 1 : 0);
  400666:	7aa2      	ldrb	r2, [r4, #10]
			PIO_SetPeripheralA(list->pio,
  400668:	f002 0201 	and.w	r2, r2, #1
  40066c:	6821      	ldr	r1, [r4, #0]
  40066e:	6860      	ldr	r0, [r4, #4]
  400670:	4b27      	ldr	r3, [pc, #156]	; (400710 <PIO_Configure+0xb4>)
  400672:	4798      	blx	r3
			break;

		default: return 0;
		}

		list++;
  400674:	340c      	adds	r4, #12
		size--;
  400676:	3d01      	subs	r5, #1
	while (size > 0) {
  400678:	2d00      	cmp	r5, #0
  40067a:	d043      	beq.n	400704 <PIO_Configure+0xa8>
		switch (list->type) {
  40067c:	7a62      	ldrb	r2, [r4, #9]
  40067e:	2a06      	cmp	r2, #6
  400680:	d843      	bhi.n	40070a <PIO_Configure+0xae>
  400682:	a301      	add	r3, pc, #4	; (adr r3, 400688 <PIO_Configure+0x2c>)
  400684:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
  400688:	00400667 	.word	0x00400667
  40068c:	004006a5 	.word	0x004006a5
  400690:	004006b5 	.word	0x004006b5
  400694:	004006c5 	.word	0x004006c5
  400698:	004006d5 	.word	0x004006d5
  40069c:	004006e7 	.word	0x004006e7
  4006a0:	004006e7 	.word	0x004006e7
							   (list->attribute & PIO_PULLUP) ? 1 : 0);
  4006a4:	7aa2      	ldrb	r2, [r4, #10]
			PIO_SetPeripheralB(list->pio,
  4006a6:	f002 0201 	and.w	r2, r2, #1
  4006aa:	6821      	ldr	r1, [r4, #0]
  4006ac:	6860      	ldr	r0, [r4, #4]
  4006ae:	4b19      	ldr	r3, [pc, #100]	; (400714 <PIO_Configure+0xb8>)
  4006b0:	4798      	blx	r3
			break;
  4006b2:	e7df      	b.n	400674 <PIO_Configure+0x18>
							   (list->attribute & PIO_PULLUP) ? 1 : 0);
  4006b4:	7aa2      	ldrb	r2, [r4, #10]
			PIO_SetPeripheralC(list->pio,
  4006b6:	f002 0201 	and.w	r2, r2, #1
  4006ba:	6821      	ldr	r1, [r4, #0]
  4006bc:	6860      	ldr	r0, [r4, #4]
  4006be:	4b16      	ldr	r3, [pc, #88]	; (400718 <PIO_Configure+0xbc>)
  4006c0:	4798      	blx	r3
			break;
  4006c2:	e7d7      	b.n	400674 <PIO_Configure+0x18>
							   (list->attribute & PIO_PULLUP) ? 1 : 0);
  4006c4:	7aa2      	ldrb	r2, [r4, #10]
			PIO_SetPeripheralD(list->pio,
  4006c6:	f002 0201 	and.w	r2, r2, #1
  4006ca:	6821      	ldr	r1, [r4, #0]
  4006cc:	6860      	ldr	r0, [r4, #4]
  4006ce:	4b13      	ldr	r3, [pc, #76]	; (40071c <PIO_Configure+0xc0>)
  4006d0:	4798      	blx	r3
			break;
  4006d2:	e7cf      	b.n	400674 <PIO_Configure+0x18>
			PMC_EnablePeripheral(list->id);
  4006d4:	7a20      	ldrb	r0, [r4, #8]
  4006d6:	4b12      	ldr	r3, [pc, #72]	; (400720 <PIO_Configure+0xc4>)
  4006d8:	4798      	blx	r3
			PIO_SetInput(list->pio,
  4006da:	7aa2      	ldrb	r2, [r4, #10]
  4006dc:	6821      	ldr	r1, [r4, #0]
  4006de:	6860      	ldr	r0, [r4, #4]
  4006e0:	4b10      	ldr	r3, [pc, #64]	; (400724 <PIO_Configure+0xc8>)
  4006e2:	4798      	blx	r3
			break;
  4006e4:	e7c6      	b.n	400674 <PIO_Configure+0x18>
						  (list->attribute & PIO_OPENDRAIN) ? 1 : 0,
  4006e6:	7aa3      	ldrb	r3, [r4, #10]
			PIO_SetOutput(list->pio,
  4006e8:	f003 0101 	and.w	r1, r3, #1
  4006ec:	9100      	str	r1, [sp, #0]
  4006ee:	f3c3 0380 	ubfx	r3, r3, #2, #1
  4006f2:	2a06      	cmp	r2, #6
  4006f4:	bf14      	ite	ne
  4006f6:	2200      	movne	r2, #0
  4006f8:	2201      	moveq	r2, #1
  4006fa:	6821      	ldr	r1, [r4, #0]
  4006fc:	6860      	ldr	r0, [r4, #4]
  4006fe:	4e0a      	ldr	r6, [pc, #40]	; (400728 <PIO_Configure+0xcc>)
  400700:	47b0      	blx	r6
			break;
  400702:	e7b7      	b.n	400674 <PIO_Configure+0x18>
	}

	return 1;
  400704:	2001      	movs	r0, #1
}
  400706:	b002      	add	sp, #8
  400708:	bd70      	pop	{r4, r5, r6, pc}
		default: return 0;
  40070a:	2000      	movs	r0, #0
  40070c:	e7fb      	b.n	400706 <PIO_Configure+0xaa>
  40070e:	bf00      	nop
  400710:	0040057d 	.word	0x0040057d
  400714:	004005a5 	.word	0x004005a5
  400718:	004005c5 	.word	0x004005c5
  40071c:	004005e5 	.word	0x004005e5
  400720:	004007f9 	.word	0x004007f9
  400724:	004005ff 	.word	0x004005ff
  400728:	00400635 	.word	0x00400635

0040072c <PioInterruptHandler>:
 * \brief Handles all interrupts on the given PIO controller.
 * \param id  PIO controller ID.
 * \param pPio  PIO controller base address.
 */
extern void PioInterruptHandler(uint32_t id, Pio *pPio)
{
  40072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pPio->PIO_ISR;
  40072e:	6ccd      	ldr	r5, [r1, #76]	; 0x4c
	status &= pPio->PIO_IMR;
  400730:	6c8b      	ldr	r3, [r1, #72]	; 0x48

	/* Check pending events */
	if (status != 0) {
  400732:	401d      	ands	r5, r3
  400734:	d002      	beq.n	40073c <PioInterruptHandler+0x10>
  400736:	4606      	mov	r6, r0
  400738:	2400      	movs	r4, #0
  40073a:	e007      	b.n	40074c <PioInterruptHandler+0x20>
  40073c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		/* Find triggering source */
		i = 0;

		while (status != 0) {
			/* There cannot be an un-configured source enabled. */
			assert(i < _dwNumSources);
  40073e:	4b10      	ldr	r3, [pc, #64]	; (400780 <PioInterruptHandler+0x54>)
  400740:	4a10      	ldr	r2, [pc, #64]	; (400784 <PioInterruptHandler+0x58>)
  400742:	2168      	movs	r1, #104	; 0x68
  400744:	4810      	ldr	r0, [pc, #64]	; (400788 <PioInterruptHandler+0x5c>)
  400746:	4c11      	ldr	r4, [pc, #68]	; (40078c <PioInterruptHandler+0x60>)
  400748:	47a0      	blx	r4
					_aIntSources[i].handler(_aIntSources[i].pPin);
					status &= ~(_aIntSources[i].pPin->mask);
				}
			}

			i++;
  40074a:	3401      	adds	r4, #1
		while (status != 0) {
  40074c:	b1bd      	cbz	r5, 40077e <PioInterruptHandler+0x52>
			assert(i < _dwNumSources);
  40074e:	4b10      	ldr	r3, [pc, #64]	; (400790 <PioInterruptHandler+0x64>)
  400750:	681b      	ldr	r3, [r3, #0]
  400752:	429c      	cmp	r4, r3
  400754:	d2f3      	bcs.n	40073e <PioInterruptHandler+0x12>
			if (_aIntSources[i].pPin->id == id) {
  400756:	4b0e      	ldr	r3, [pc, #56]	; (400790 <PioInterruptHandler+0x64>)
  400758:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  40075c:	6858      	ldr	r0, [r3, #4]
  40075e:	7a03      	ldrb	r3, [r0, #8]
  400760:	42b3      	cmp	r3, r6
  400762:	d1f2      	bne.n	40074a <PioInterruptHandler+0x1e>
				if ((status & _aIntSources[i].pPin->mask) != 0) {
  400764:	6803      	ldr	r3, [r0, #0]
  400766:	421d      	tst	r5, r3
  400768:	d0ef      	beq.n	40074a <PioInterruptHandler+0x1e>
					_aIntSources[i].handler(_aIntSources[i].pPin);
  40076a:	4f09      	ldr	r7, [pc, #36]	; (400790 <PioInterruptHandler+0x64>)
  40076c:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
  400770:	68bb      	ldr	r3, [r7, #8]
  400772:	4798      	blx	r3
					status &= ~(_aIntSources[i].pPin->mask);
  400774:	687b      	ldr	r3, [r7, #4]
  400776:	681b      	ldr	r3, [r3, #0]
  400778:	ea25 0503 	bic.w	r5, r5, r3
  40077c:	e7e5      	b.n	40074a <PioInterruptHandler+0x1e>
  40077e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400780:	00408bbc 	.word	0x00408bbc
  400784:	00408b78 	.word	0x00408b78
  400788:	00408bd0 	.word	0x00408bd0
  40078c:	00402419 	.word	0x00402419
  400790:	204009f0 	.word	0x204009f0

00400794 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler
 * \Redefined PIOA interrupt handler for NVIC interrupt table.
 */
extern void PIOA_Handler(void)
{
  400794:	b508      	push	{r3, lr}
	PioInterruptHandler(ID_PIOA, PIOA);
  400796:	4902      	ldr	r1, [pc, #8]	; (4007a0 <PIOA_Handler+0xc>)
  400798:	200a      	movs	r0, #10
  40079a:	4b02      	ldr	r3, [pc, #8]	; (4007a4 <PIOA_Handler+0x10>)
  40079c:	4798      	blx	r3
  40079e:	bd08      	pop	{r3, pc}
  4007a0:	400e0e00 	.word	0x400e0e00
  4007a4:	0040072d 	.word	0x0040072d

004007a8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * \Redefined PIOB interrupt handler for NVIC interrupt table.
 */
extern void PIOB_Handler(void)
{
  4007a8:	b508      	push	{r3, lr}
	PioInterruptHandler(ID_PIOB, PIOB);
  4007aa:	4902      	ldr	r1, [pc, #8]	; (4007b4 <PIOB_Handler+0xc>)
  4007ac:	200b      	movs	r0, #11
  4007ae:	4b02      	ldr	r3, [pc, #8]	; (4007b8 <PIOB_Handler+0x10>)
  4007b0:	4798      	blx	r3
  4007b2:	bd08      	pop	{r3, pc}
  4007b4:	400e1000 	.word	0x400e1000
  4007b8:	0040072d 	.word	0x0040072d

004007bc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler
 * \Redefined PIOC interrupt handler for NVIC interrupt table.
 */
extern void PIOC_Handler(void)
{
  4007bc:	b508      	push	{r3, lr}
	PioInterruptHandler(ID_PIOC, PIOC);
  4007be:	4902      	ldr	r1, [pc, #8]	; (4007c8 <PIOC_Handler+0xc>)
  4007c0:	200c      	movs	r0, #12
  4007c2:	4b02      	ldr	r3, [pc, #8]	; (4007cc <PIOC_Handler+0x10>)
  4007c4:	4798      	blx	r3
  4007c6:	bd08      	pop	{r3, pc}
  4007c8:	400e1200 	.word	0x400e1200
  4007cc:	0040072d 	.word	0x0040072d

004007d0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler
 * \Redefined PIOD interrupt handler for NVIC interrupt table.
 */
extern void PIOD_Handler(void)
{
  4007d0:	b508      	push	{r3, lr}
	PioInterruptHandler(ID_PIOD, PIOD);
  4007d2:	4902      	ldr	r1, [pc, #8]	; (4007dc <PIOD_Handler+0xc>)
  4007d4:	2010      	movs	r0, #16
  4007d6:	4b02      	ldr	r3, [pc, #8]	; (4007e0 <PIOD_Handler+0x10>)
  4007d8:	4798      	blx	r3
  4007da:	bd08      	pop	{r3, pc}
  4007dc:	400e1400 	.word	0x400e1400
  4007e0:	0040072d 	.word	0x0040072d

004007e4 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler
 * \Redefined PIOE interrupt handler for NVIC interrupt table.
 */
extern void PIOE_Handler(void)
{
  4007e4:	b508      	push	{r3, lr}
	PioInterruptHandler(ID_PIOE, PIOE);
  4007e6:	4902      	ldr	r1, [pc, #8]	; (4007f0 <PIOE_Handler+0xc>)
  4007e8:	2011      	movs	r0, #17
  4007ea:	4b02      	ldr	r3, [pc, #8]	; (4007f4 <PIOE_Handler+0x10>)
  4007ec:	4798      	blx	r3
  4007ee:	bd08      	pop	{r3, pc}
  4007f0:	400e1600 	.word	0x400e1600
  4007f4:	0040072d 	.word	0x0040072d

004007f8 <PMC_EnablePeripheral>:
 *
 * \param id  Peripheral ID (ID_xxx).
 */
void PMC_EnablePeripheral(uint32_t dwId)
{
	assert(dwId < 63);
  4007f8:	283e      	cmp	r0, #62	; 0x3e
  4007fa:	d80d      	bhi.n	400818 <PMC_EnablePeripheral+0x20>

	if (dwId < 32) {
  4007fc:	281f      	cmp	r0, #31
  4007fe:	d812      	bhi.n	400826 <PMC_EnablePeripheral+0x2e>
		if ((PMC->PMC_PCSR0 & ((uint32_t)1 << dwId)) == ((uint32_t)1 << dwId)) {
  400800:	4b10      	ldr	r3, [pc, #64]	; (400844 <PMC_EnablePeripheral+0x4c>)
  400802:	699a      	ldr	r2, [r3, #24]
  400804:	2301      	movs	r3, #1
  400806:	4083      	lsls	r3, r0
  400808:	4393      	bics	r3, r2
  40080a:	d01a      	beq.n	400842 <PMC_EnablePeripheral+0x4a>
			TRACE_DEBUG("PMC_EnablePeripheral: clock of peripheral" \
						 " %u is already enabled\n\r", (unsigned int)dwId);
		} else
			PMC->PMC_PCER0 = 1 << dwId;
  40080c:	2301      	movs	r3, #1
  40080e:	fa03 f000 	lsl.w	r0, r3, r0
  400812:	4b0c      	ldr	r3, [pc, #48]	; (400844 <PMC_EnablePeripheral+0x4c>)
  400814:	6118      	str	r0, [r3, #16]
  400816:	e014      	b.n	400842 <PMC_EnablePeripheral+0x4a>
{
  400818:	b510      	push	{r4, lr}
	assert(dwId < 63);
  40081a:	4b0b      	ldr	r3, [pc, #44]	; (400848 <PMC_EnablePeripheral+0x50>)
  40081c:	4a0b      	ldr	r2, [pc, #44]	; (40084c <PMC_EnablePeripheral+0x54>)
  40081e:	219e      	movs	r1, #158	; 0x9e
  400820:	480b      	ldr	r0, [pc, #44]	; (400850 <PMC_EnablePeripheral+0x58>)
  400822:	4c0c      	ldr	r4, [pc, #48]	; (400854 <PMC_EnablePeripheral+0x5c>)
  400824:	47a0      	blx	r4
	} else {
		dwId -= 32;
  400826:	3820      	subs	r0, #32

		if ((PMC->PMC_PCSR1 & ((uint32_t)1 << dwId)) == ((uint32_t)1 << dwId)) {
  400828:	4b06      	ldr	r3, [pc, #24]	; (400844 <PMC_EnablePeripheral+0x4c>)
  40082a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40082e:	2301      	movs	r3, #1
  400830:	4083      	lsls	r3, r0
  400832:	4393      	bics	r3, r2
  400834:	d005      	beq.n	400842 <PMC_EnablePeripheral+0x4a>
			TRACE_DEBUG("PMC_EnablePeripheral: clock of peripheral" \
						 " %u is already enabled\n\r", (unsigned int)(dwId + 32));
		} else
			PMC->PMC_PCER1 = 1 << dwId;
  400836:	2301      	movs	r3, #1
  400838:	fa03 f000 	lsl.w	r0, r3, r0
  40083c:	4b01      	ldr	r3, [pc, #4]	; (400844 <PMC_EnablePeripheral+0x4c>)
  40083e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
  400842:	4770      	bx	lr
  400844:	400e0600 	.word	0x400e0600
  400848:	00408c80 	.word	0x00408c80
  40084c:	00408c3c 	.word	0x00408c3c
  400850:	00408c8c 	.word	0x00408c8c
  400854:	00402419 	.word	0x00402419

00400858 <PMC_IsPeriphEnabled>:
 *
 * \param id  Peripheral ID (ID_xxx).
 */
uint32_t PMC_IsPeriphEnabled(uint32_t dwId)
{
	assert(dwId < ID_PERIPH_COUNT);
  400858:	283f      	cmp	r0, #63	; 0x3f
  40085a:	d80a      	bhi.n	400872 <PMC_IsPeriphEnabled+0x1a>

	if (dwId < 32)
  40085c:	281f      	cmp	r0, #31
  40085e:	d90f      	bls.n	400880 <PMC_IsPeriphEnabled+0x28>
		return (PMC->PMC_PCSR0 & (1 << dwId));
	else
		return (PMC->PMC_PCSR1 & (1 << (dwId - 32)));
  400860:	4b0b      	ldr	r3, [pc, #44]	; (400890 <PMC_IsPeriphEnabled+0x38>)
  400862:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  400866:	3820      	subs	r0, #32
  400868:	2201      	movs	r2, #1
  40086a:	fa02 f000 	lsl.w	r0, r2, r0
  40086e:	4018      	ands	r0, r3
}
  400870:	4770      	bx	lr
{
  400872:	b510      	push	{r4, lr}
	assert(dwId < ID_PERIPH_COUNT);
  400874:	4b07      	ldr	r3, [pc, #28]	; (400894 <PMC_IsPeriphEnabled+0x3c>)
  400876:	4a08      	ldr	r2, [pc, #32]	; (400898 <PMC_IsPeriphEnabled+0x40>)
  400878:	21f5      	movs	r1, #245	; 0xf5
  40087a:	4808      	ldr	r0, [pc, #32]	; (40089c <PMC_IsPeriphEnabled+0x44>)
  40087c:	4c08      	ldr	r4, [pc, #32]	; (4008a0 <PMC_IsPeriphEnabled+0x48>)
  40087e:	47a0      	blx	r4
		return (PMC->PMC_PCSR0 & (1 << dwId));
  400880:	4b03      	ldr	r3, [pc, #12]	; (400890 <PMC_IsPeriphEnabled+0x38>)
  400882:	699b      	ldr	r3, [r3, #24]
  400884:	2201      	movs	r2, #1
  400886:	fa02 f000 	lsl.w	r0, r2, r0
  40088a:	4018      	ands	r0, r3
  40088c:	e7f0      	b.n	400870 <PMC_IsPeriphEnabled+0x18>
  40088e:	bf00      	nop
  400890:	400e0600 	.word	0x400e0600
  400894:	00408ca4 	.word	0x00408ca4
  400898:	00408c6c 	.word	0x00408c6c
  40089c:	00408c8c 	.word	0x00408c8c
  4008a0:	00402419 	.word	0x00402419

004008a4 <PMC_ConfigurePCK2>:
 * \param div        PLL divider factor (not shifted).
 * \param prescaler  Master Clock prescaler (shifted as in register).
 */
void PMC_ConfigurePCK2(uint32_t MasterClk, uint32_t prescaler)
{
	PMC->PMC_SCDR = PMC_SCDR_PCK2;  /* disable PCK */
  4008a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4008a8:	4b09      	ldr	r3, [pc, #36]	; (4008d0 <PMC_ConfigurePCK2+0x2c>)
  4008aa:	605a      	str	r2, [r3, #4]

	while ((PMC->PMC_SCSR)& PMC_SCSR_PCK2);
  4008ac:	4b08      	ldr	r3, [pc, #32]	; (4008d0 <PMC_ConfigurePCK2+0x2c>)
  4008ae:	689b      	ldr	r3, [r3, #8]
  4008b0:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4008b4:	d1fa      	bne.n	4008ac <PMC_ConfigurePCK2+0x8>

	PMC->PMC_PCK[2] = MasterClk | prescaler;
  4008b6:	4308      	orrs	r0, r1
  4008b8:	4b05      	ldr	r3, [pc, #20]	; (4008d0 <PMC_ConfigurePCK2+0x2c>)
  4008ba:	6498      	str	r0, [r3, #72]	; 0x48
	PMC->PMC_SCER = PMC_SCER_PCK2;
  4008bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4008c0:	601a      	str	r2, [r3, #0]

	while (!((PMC->PMC_SR) & PMC_SR_PCKRDY2));
  4008c2:	4b03      	ldr	r3, [pc, #12]	; (4008d0 <PMC_ConfigurePCK2+0x2c>)
  4008c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4008c6:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4008ca:	d0fa      	beq.n	4008c2 <PMC_ConfigurePCK2+0x1e>

}
  4008cc:	4770      	bx	lr
  4008ce:	bf00      	nop
  4008d0:	400e0600 	.word	0x400e0600

004008d4 <SSC_Configure>:
 * \param ssc  Pointer to an SSC instance.
 * \param bitRate  bit rate.
 * \param masterClock  master clock.
 */
void SSC_Configure(Ssc *ssc, uint32_t bitRate, uint32_t masterClock)
{
  4008d4:	b508      	push	{r3, lr}
	//    uint32_t maxClock;
	id = ID_SSC;
	//    maxClock = PMC_SetPeriMaxClock(id, masterClock);

	/* Reset, disable receiver & transmitter */
	ssc->SSC_CR = SSC_CR_RXDIS | SSC_CR_TXDIS | SSC_CR_SWRST;
  4008d6:	f248 2302 	movw	r3, #33282	; 0x8202
  4008da:	6003      	str	r3, [r0, #0]

	/* Configure clock frequency */
	if (bitRate != 0)
  4008dc:	b929      	cbnz	r1, 4008ea <SSC_Configure+0x16>
		ssc->SSC_CMR = masterClock / (2 * bitRate);
	else
		ssc->SSC_CMR = 0;
  4008de:	2300      	movs	r3, #0
  4008e0:	6043      	str	r3, [r0, #4]

	/* Enable SSC peripheral clock */
	PMC_EnablePeripheral(id);
  4008e2:	2016      	movs	r0, #22
  4008e4:	4b03      	ldr	r3, [pc, #12]	; (4008f4 <SSC_Configure+0x20>)
  4008e6:	4798      	blx	r3
  4008e8:	bd08      	pop	{r3, pc}
		ssc->SSC_CMR = masterClock / (2 * bitRate);
  4008ea:	004b      	lsls	r3, r1, #1
  4008ec:	fbb2 f2f3 	udiv	r2, r2, r3
  4008f0:	6042      	str	r2, [r0, #4]
  4008f2:	e7f6      	b.n	4008e2 <SSC_Configure+0xe>
  4008f4:	004007f9 	.word	0x004007f9

004008f8 <SSC_ConfigureTransmitter>:
 * \param tcmr Transmit Clock Mode Register value.
 * \param tfmr Transmit Frame Mode Register value.
 */
void SSC_ConfigureTransmitter(Ssc *ssc, uint32_t tcmr, uint32_t tfmr)
{
	ssc->SSC_TCMR = tcmr;
  4008f8:	6181      	str	r1, [r0, #24]
	ssc->SSC_TFMR = tfmr;
  4008fa:	61c2      	str	r2, [r0, #28]
  4008fc:	4770      	bx	lr

004008fe <SSC_ConfigureReceiver>:
 * \param rcmr Receive Clock Mode Register value.
 * \param rfmr Receive Frame Mode Register value.
 */
void SSC_ConfigureReceiver(Ssc *ssc, uint32_t rcmr, uint32_t rfmr)
{
	ssc->SSC_RCMR = rcmr;
  4008fe:	6101      	str	r1, [r0, #16]
	ssc->SSC_RFMR = rfmr;
  400900:	6142      	str	r2, [r0, #20]
  400902:	4770      	bx	lr

00400904 <SSC_EnableTransmitter>:
 * \brief Enables the transmitter of a SSC peripheral.
 * \param ssc  Pointer to an SSC instance.
 */
void SSC_EnableTransmitter(Ssc *ssc)
{
	ssc->SSC_CR = SSC_CR_TXEN;
  400904:	f44f 7380 	mov.w	r3, #256	; 0x100
  400908:	6003      	str	r3, [r0, #0]
  40090a:	4770      	bx	lr

0040090c <SSC_DisableTransmitter>:
 * \brief Disables the transmitter of a SSC peripheral.
 * \param ssc  Pointer to an SSC instance.
 */
void SSC_DisableTransmitter(Ssc *ssc)
{
	ssc->SSC_CR = SSC_CR_TXDIS;
  40090c:	f44f 7300 	mov.w	r3, #512	; 0x200
  400910:	6003      	str	r3, [r0, #0]
  400912:	4770      	bx	lr

00400914 <SSC_EnableReceiver>:
 * \brief Enables the receiver of a SSC peripheral.
 * \param ssc  Pointer to an SSC instance.
 */
void SSC_EnableReceiver(Ssc *ssc)
{
	ssc->SSC_CR = SSC_CR_RXEN;
  400914:	2301      	movs	r3, #1
  400916:	6003      	str	r3, [r0, #0]
  400918:	4770      	bx	lr

0040091a <SSC_DisableReceiver>:
 * \brief Disables the receiver of a SSC peripheral.
 * \param ssc  Pointer to an SSC instance.
 */
void SSC_DisableReceiver(Ssc *ssc)
{
	ssc->SSC_CR = SSC_CR_RXDIS;
  40091a:	2302      	movs	r3, #2
  40091c:	6003      	str	r3, [r0, #0]
  40091e:	4770      	bx	lr

00400920 <SysTick_Handler>:
 *  Increments the time-stamp counter.
 */
void SysTick_Handler(void)
{
	TimeEvent *pEvent;
	pEvent = pTimeEventList;
  400920:	4a0e      	ldr	r2, [pc, #56]	; (40095c <SysTick_Handler+0x3c>)
  400922:	6813      	ldr	r3, [r2, #0]
	_dwTickCount ++;
  400924:	6851      	ldr	r1, [r2, #4]
  400926:	3101      	adds	r1, #1
  400928:	6051      	str	r1, [r2, #4]

	if (_dwTickTimer)
  40092a:	6892      	ldr	r2, [r2, #8]
  40092c:	b12a      	cbz	r2, 40093a <SysTick_Handler+0x1a>
		_dwTickTimer --;
  40092e:	490b      	ldr	r1, [pc, #44]	; (40095c <SysTick_Handler+0x3c>)
  400930:	688a      	ldr	r2, [r1, #8]
  400932:	3a01      	subs	r2, #1
  400934:	608a      	str	r2, [r1, #8]
  400936:	e000      	b.n	40093a <SysTick_Handler+0x1a>
				pEvent->time_start = 0;
				pEvent->occur = 1;
			}
		}

		pEvent = pEvent->pNextEvent;
  400938:	695b      	ldr	r3, [r3, #20]
	while (pEvent) {
  40093a:	b173      	cbz	r3, 40095a <SysTick_Handler+0x3a>
		if (pEvent->time_start && pEvent->occur == 0) {
  40093c:	689a      	ldr	r2, [r3, #8]
  40093e:	2a00      	cmp	r2, #0
  400940:	d0fa      	beq.n	400938 <SysTick_Handler+0x18>
  400942:	68da      	ldr	r2, [r3, #12]
  400944:	2a00      	cmp	r2, #0
  400946:	d1f7      	bne.n	400938 <SysTick_Handler+0x18>
			pEvent->time_tick--;
  400948:	685a      	ldr	r2, [r3, #4]
  40094a:	3a01      	subs	r2, #1
  40094c:	605a      	str	r2, [r3, #4]
			if (pEvent->time_tick == 0) {
  40094e:	2a00      	cmp	r2, #0
  400950:	d1f2      	bne.n	400938 <SysTick_Handler+0x18>
				pEvent->time_start = 0;
  400952:	609a      	str	r2, [r3, #8]
				pEvent->occur = 1;
  400954:	2201      	movs	r2, #1
  400956:	60da      	str	r2, [r3, #12]
  400958:	e7ee      	b.n	400938 <SysTick_Handler+0x18>
	}
}
  40095a:	4770      	bx	lr
  40095c:	20400a34 	.word	0x20400a34

00400960 <TimeTick_Configure>:
 *  Systick interrupt handler will generates 1ms interrupt and increase a
 *  tickCount.
 *  \note IRQ handler must be configured before invoking this function.
 */
uint32_t TimeTick_Configure(void)
{
  400960:	b508      	push	{r3, lr}
	uint8_t Mdiv_Val;
	uint32_t Pck;
	_dwTickCount = 0;
  400962:	2200      	movs	r2, #0
  400964:	4b1c      	ldr	r3, [pc, #112]	; (4009d8 <TimeTick_Configure+0x78>)
  400966:	605a      	str	r2, [r3, #4]

	TRACE_INFO("Configure system tick to get 1ms tick period.\n\r");
  400968:	481c      	ldr	r0, [pc, #112]	; (4009dc <TimeTick_Configure+0x7c>)
  40096a:	4b1d      	ldr	r3, [pc, #116]	; (4009e0 <TimeTick_Configure+0x80>)
  40096c:	4798      	blx	r3
	/* check if there is MDIV value */
	Mdiv_Val = ((PMC->PMC_MCKR & PMC_MCKR_MDIV_Msk) >> PMC_MCKR_MDIV_Pos);
  40096e:	4b1d      	ldr	r3, [pc, #116]	; (4009e4 <TimeTick_Configure+0x84>)
  400970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400972:	f3c3 2301 	ubfx	r3, r3, #8, #2

	if (Mdiv_Val == 0)
  400976:	b14b      	cbz	r3, 40098c <TimeTick_Configure+0x2c>
		Pck = BOARD_MCK;
	else if (Mdiv_Val == 3)
  400978:	2b03      	cmp	r3, #3
  40097a:	d003      	beq.n	400984 <TimeTick_Configure+0x24>
		Pck = BOARD_MCK * Mdiv_Val;
	else
		Pck = BOARD_MCK * (Mdiv_Val * 2);
  40097c:	4a1a      	ldr	r2, [pc, #104]	; (4009e8 <TimeTick_Configure+0x88>)
  40097e:	fb02 f303 	mul.w	r3, r2, r3
  400982:	e004      	b.n	40098e <TimeTick_Configure+0x2e>
		Pck = BOARD_MCK * Mdiv_Val;
  400984:	4a19      	ldr	r2, [pc, #100]	; (4009ec <TimeTick_Configure+0x8c>)
  400986:	fb02 f303 	mul.w	r3, r2, r3
  40098a:	e000      	b.n	40098e <TimeTick_Configure+0x2e>
		Pck = BOARD_MCK;
  40098c:	4b17      	ldr	r3, [pc, #92]	; (4009ec <TimeTick_Configure+0x8c>)

	DelayTimer.pTimer1 = NULL; DelayTimer.pTimer1 = NULL;
  40098e:	2100      	movs	r1, #0
  400990:	4a17      	ldr	r2, [pc, #92]	; (4009f0 <TimeTick_Configure+0x90>)
  400992:	6011      	str	r1, [r2, #0]

	/* Configure SysTick for 1 ms. */
	if (SysTick_Config(Pck / 1000)) {
  400994:	4a17      	ldr	r2, [pc, #92]	; (4009f4 <TimeTick_Configure+0x94>)
  400996:	fba2 2303 	umull	r2, r3, r2, r3
  40099a:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  40099c:	3b01      	subs	r3, #1
  40099e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  4009a2:	d20f      	bcs.n	4009c4 <TimeTick_Configure+0x64>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  4009a4:	4a14      	ldr	r2, [pc, #80]	; (4009f8 <TimeTick_Configure+0x98>)
  4009a6:	6053      	str	r3, [r2, #4]
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4009a8:	21e0      	movs	r1, #224	; 0xe0
  4009aa:	4b14      	ldr	r3, [pc, #80]	; (4009fc <TimeTick_Configure+0x9c>)
  4009ac:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  4009b0:	2300      	movs	r3, #0
  4009b2:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  4009b4:	2107      	movs	r1, #7
  4009b6:	6011      	str	r1, [r2, #0]
  4009b8:	b933      	cbnz	r3, 4009c8 <TimeTick_Configure+0x68>
		TRACE_ERROR("SysTick configuration error\n\r");
		SysTickConfigured = 0;
		return 1;
	}

	SysTickConfigured = 1;
  4009ba:	2201      	movs	r2, #1
  4009bc:	4b06      	ldr	r3, [pc, #24]	; (4009d8 <TimeTick_Configure+0x78>)
  4009be:	731a      	strb	r2, [r3, #12]
	return 0;
  4009c0:	2000      	movs	r0, #0
}
  4009c2:	bd08      	pop	{r3, pc}
    return (1UL);                                                   /* Reload value impossible */
  4009c4:	2301      	movs	r3, #1
  4009c6:	e7f7      	b.n	4009b8 <TimeTick_Configure+0x58>
		TRACE_ERROR("SysTick configuration error\n\r");
  4009c8:	480d      	ldr	r0, [pc, #52]	; (400a00 <TimeTick_Configure+0xa0>)
  4009ca:	4b05      	ldr	r3, [pc, #20]	; (4009e0 <TimeTick_Configure+0x80>)
  4009cc:	4798      	blx	r3
		SysTickConfigured = 0;
  4009ce:	2200      	movs	r2, #0
  4009d0:	4b01      	ldr	r3, [pc, #4]	; (4009d8 <TimeTick_Configure+0x78>)
  4009d2:	731a      	strb	r2, [r3, #12]
		return 1;
  4009d4:	2001      	movs	r0, #1
  4009d6:	bd08      	pop	{r3, pc}
  4009d8:	20400a34 	.word	0x20400a34
  4009dc:	00408ce8 	.word	0x00408ce8
  4009e0:	00402c25 	.word	0x00402c25
  4009e4:	400e0600 	.word	0x400e0600
  4009e8:	11e1a300 	.word	0x11e1a300
  4009ec:	08f0d180 	.word	0x08f0d180
  4009f0:	20410d04 	.word	0x20410d04
  4009f4:	10624dd3 	.word	0x10624dd3
  4009f8:	e000e010 	.word	0xe000e010
  4009fc:	e000ed00 	.word	0xe000ed00
  400a00:	00408d1c 	.word	0x00408d1c

00400a04 <GetDelayInTicks>:
 * \param startTick Start tick point.
 * \param endTick   End tick point.
 */
uint32_t GetDelayInTicks(uint32_t startTick, uint32_t endTick)
{
	assert(SysTickConfigured);
  400a04:	4b07      	ldr	r3, [pc, #28]	; (400a24 <GetDelayInTicks+0x20>)
  400a06:	7b1b      	ldrb	r3, [r3, #12]
  400a08:	b11b      	cbz	r3, 400a12 <GetDelayInTicks+0xe>

	if (endTick >= startTick) return (endTick - startTick);
  400a0a:	4281      	cmp	r1, r0
  400a0c:	d208      	bcs.n	400a20 <GetDelayInTicks+0x1c>

	return (endTick + (0xFFFFFFFF - startTick) + 1);
  400a0e:	1a08      	subs	r0, r1, r0

}
  400a10:	4770      	bx	lr
{
  400a12:	b510      	push	{r4, lr}
	assert(SysTickConfigured);
  400a14:	4b04      	ldr	r3, [pc, #16]	; (400a28 <GetDelayInTicks+0x24>)
  400a16:	4a05      	ldr	r2, [pc, #20]	; (400a2c <GetDelayInTicks+0x28>)
  400a18:	2188      	movs	r1, #136	; 0x88
  400a1a:	4805      	ldr	r0, [pc, #20]	; (400a30 <GetDelayInTicks+0x2c>)
  400a1c:	4c05      	ldr	r4, [pc, #20]	; (400a34 <GetDelayInTicks+0x30>)
  400a1e:	47a0      	blx	r4
	if (endTick >= startTick) return (endTick - startTick);
  400a20:	1a08      	subs	r0, r1, r0
  400a22:	e7f5      	b.n	400a10 <GetDelayInTicks+0xc>
  400a24:	20400a34 	.word	0x20400a34
  400a28:	00408d40 	.word	0x00408d40
  400a2c:	00408cbc 	.word	0x00408cbc
  400a30:	00408d54 	.word	0x00408d54
  400a34:	00402419 	.word	0x00402419

00400a38 <GetTicks>:
 * \param startTick Start tick point.
 * \param endTick   End tick point.
 */
uint32_t GetTicks(void)
{
	assert(SysTickConfigured);
  400a38:	4b06      	ldr	r3, [pc, #24]	; (400a54 <GetTicks+0x1c>)
  400a3a:	7b1b      	ldrb	r3, [r3, #12]
  400a3c:	b113      	cbz	r3, 400a44 <GetTicks+0xc>

	return _dwTickCount;
  400a3e:	4b05      	ldr	r3, [pc, #20]	; (400a54 <GetTicks+0x1c>)
  400a40:	6858      	ldr	r0, [r3, #4]
}
  400a42:	4770      	bx	lr
{
  400a44:	b510      	push	{r4, lr}
	assert(SysTickConfigured);
  400a46:	4b04      	ldr	r3, [pc, #16]	; (400a58 <GetTicks+0x20>)
  400a48:	4a04      	ldr	r2, [pc, #16]	; (400a5c <GetTicks+0x24>)
  400a4a:	2197      	movs	r1, #151	; 0x97
  400a4c:	4804      	ldr	r0, [pc, #16]	; (400a60 <GetTicks+0x28>)
  400a4e:	4c05      	ldr	r4, [pc, #20]	; (400a64 <GetTicks+0x2c>)
  400a50:	47a0      	blx	r4
  400a52:	bf00      	nop
  400a54:	20400a34 	.word	0x20400a34
  400a58:	00408d40 	.word	0x00408d40
  400a5c:	00408ccc 	.word	0x00408ccc
  400a60:	00408d54 	.word	0x00408d54
  400a64:	00402419 	.word	0x00402419

00400a68 <Wait>:
/**
 *  \brief Sync Wait for several ms
 *  \param dwMs    Waiting time in ms.
 */
void Wait(volatile uint32_t dwMs)
{
  400a68:	b510      	push	{r4, lr}
  400a6a:	b082      	sub	sp, #8
  400a6c:	9001      	str	r0, [sp, #4]
	uint32_t dwStart , dwEnd;

	assert(SysTickConfigured);
  400a6e:	4b0b      	ldr	r3, [pc, #44]	; (400a9c <Wait+0x34>)
  400a70:	7b1b      	ldrb	r3, [r3, #12]
  400a72:	b11b      	cbz	r3, 400a7c <Wait+0x14>

	dwStart = _dwTickCount;
  400a74:	4b09      	ldr	r3, [pc, #36]	; (400a9c <Wait+0x34>)
  400a76:	685c      	ldr	r4, [r3, #4]
	dwEnd = _dwTickCount;
  400a78:	6859      	ldr	r1, [r3, #4]

	while (GetDelayInTicks(dwStart, dwEnd) < dwMs)
  400a7a:	e007      	b.n	400a8c <Wait+0x24>
	assert(SysTickConfigured);
  400a7c:	4b08      	ldr	r3, [pc, #32]	; (400aa0 <Wait+0x38>)
  400a7e:	4a09      	ldr	r2, [pc, #36]	; (400aa4 <Wait+0x3c>)
  400a80:	21a4      	movs	r1, #164	; 0xa4
  400a82:	4809      	ldr	r0, [pc, #36]	; (400aa8 <Wait+0x40>)
  400a84:	4c09      	ldr	r4, [pc, #36]	; (400aac <Wait+0x44>)
  400a86:	47a0      	blx	r4
		dwEnd = _dwTickCount;
  400a88:	4b04      	ldr	r3, [pc, #16]	; (400a9c <Wait+0x34>)
  400a8a:	6859      	ldr	r1, [r3, #4]
	while (GetDelayInTicks(dwStart, dwEnd) < dwMs)
  400a8c:	4620      	mov	r0, r4
  400a8e:	4b08      	ldr	r3, [pc, #32]	; (400ab0 <Wait+0x48>)
  400a90:	4798      	blx	r3
  400a92:	9b01      	ldr	r3, [sp, #4]
  400a94:	4298      	cmp	r0, r3
  400a96:	d3f7      	bcc.n	400a88 <Wait+0x20>
}
  400a98:	b002      	add	sp, #8
  400a9a:	bd10      	pop	{r4, pc}
  400a9c:	20400a34 	.word	0x20400a34
  400aa0:	00408d40 	.word	0x00408d40
  400aa4:	00408cd8 	.word	0x00408cd8
  400aa8:	00408d54 	.word	0x00408d54
  400aac:	00402419 	.word	0x00402419
  400ab0:	00400a05 	.word	0x00400a05

00400ab4 <TWI_ConfigureMaster>:
 * \param pTwi  Pointer to an Twihs instance.
 * \param twck  Desired TWI clock frequency.
 * \param mck  Master clock frequency.
 */
void TWI_ConfigureMaster(Twihs *pTwi, uint32_t dwTwCk, uint32_t dwMCk)
{
  400ab4:	b538      	push	{r3, r4, r5, lr}
	uint32_t dwCkDiv = 0;
	uint32_t dwClDiv;
	uint32_t dwOk = 0;

	TRACE_DEBUG("TWI_ConfigureMaster()\n\r");
	assert(pTwi);
  400ab6:	b128      	cbz	r0, 400ac4 <TWI_ConfigureMaster+0x10>
  400ab8:	4605      	mov	r5, r0

	/* Reset the TWI */
	pTwi->TWIHS_CR = TWIHS_CR_SWRST;
  400aba:	2080      	movs	r0, #128	; 0x80
  400abc:	6028      	str	r0, [r5, #0]
	uint32_t dwOk = 0;
  400abe:	2400      	movs	r4, #0
	uint32_t dwCkDiv = 0;
  400ac0:	4620      	mov	r0, r4

	/* Configure clock */
	while (!dwOk) {
  400ac2:	e006      	b.n	400ad2 <TWI_ConfigureMaster+0x1e>
	assert(pTwi);
  400ac4:	4b11      	ldr	r3, [pc, #68]	; (400b0c <TWI_ConfigureMaster+0x58>)
  400ac6:	4a12      	ldr	r2, [pc, #72]	; (400b10 <TWI_ConfigureMaster+0x5c>)
  400ac8:	2177      	movs	r1, #119	; 0x77
  400aca:	4812      	ldr	r0, [pc, #72]	; (400b14 <TWI_ConfigureMaster+0x60>)
  400acc:	4c12      	ldr	r4, [pc, #72]	; (400b18 <TWI_ConfigureMaster+0x64>)
  400ace:	47a0      	blx	r4
		dwClDiv = ((dwMCk / (2 * dwTwCk)) - 4) / (1 << dwCkDiv);

		if (dwClDiv <= 255)
			dwOk = 1;
  400ad0:	2401      	movs	r4, #1
	while (!dwOk) {
  400ad2:	b944      	cbnz	r4, 400ae6 <TWI_ConfigureMaster+0x32>
		dwClDiv = ((dwMCk / (2 * dwTwCk)) - 4) / (1 << dwCkDiv);
  400ad4:	004b      	lsls	r3, r1, #1
  400ad6:	fbb2 f3f3 	udiv	r3, r2, r3
  400ada:	3b04      	subs	r3, #4
  400adc:	40c3      	lsrs	r3, r0
		if (dwClDiv <= 255)
  400ade:	2bff      	cmp	r3, #255	; 0xff
  400ae0:	d9f6      	bls.n	400ad0 <TWI_ConfigureMaster+0x1c>
		else
			dwCkDiv++;
  400ae2:	3001      	adds	r0, #1
  400ae4:	e7f5      	b.n	400ad2 <TWI_ConfigureMaster+0x1e>
	}

	assert(dwCkDiv < 8);
  400ae6:	2807      	cmp	r0, #7
  400ae8:	d809      	bhi.n	400afe <TWI_ConfigureMaster+0x4a>
	TRACE_DEBUG("Using CKDIV = %u and CLDIV/CHDIV = %u\n\r", dwCkDiv, dwClDiv);

	pTwi->TWIHS_CWGR = (dwCkDiv << 16) | (dwClDiv << 8) | dwClDiv;
  400aea:	021a      	lsls	r2, r3, #8
  400aec:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
  400af0:	4303      	orrs	r3, r0
  400af2:	612b      	str	r3, [r5, #16]

	/* TWI Slave Mode Disabled. */
	pTwi->TWIHS_CR = TWIHS_CR_SVDIS;
  400af4:	2320      	movs	r3, #32
  400af6:	602b      	str	r3, [r5, #0]

	/* Set master mode */
	pTwi->TWIHS_CR = TWIHS_CR_MSEN;
  400af8:	2304      	movs	r3, #4
  400afa:	602b      	str	r3, [r5, #0]
  400afc:	bd38      	pop	{r3, r4, r5, pc}
	assert(dwCkDiv < 8);
  400afe:	4b07      	ldr	r3, [pc, #28]	; (400b1c <TWI_ConfigureMaster+0x68>)
  400b00:	4a03      	ldr	r2, [pc, #12]	; (400b10 <TWI_ConfigureMaster+0x5c>)
  400b02:	2186      	movs	r1, #134	; 0x86
  400b04:	4803      	ldr	r0, [pc, #12]	; (400b14 <TWI_ConfigureMaster+0x60>)
  400b06:	4c04      	ldr	r4, [pc, #16]	; (400b18 <TWI_ConfigureMaster+0x64>)
  400b08:	47a0      	blx	r4
  400b0a:	bf00      	nop
  400b0c:	00408e44 	.word	0x00408e44
  400b10:	00408d74 	.word	0x00408d74
  400b14:	00408e4c 	.word	0x00408e4c
  400b18:	00402419 	.word	0x00402419
  400b1c:	00408e64 	.word	0x00408e64

00400b20 <TWI_Stop>:
 * \brief Sends a STOP condition on the TWI.
 * \param pTwi  Pointer to an Twihs instance.
 */
void TWI_Stop(Twihs *pTwi)
{
	assert(pTwi != NULL);
  400b20:	b110      	cbz	r0, 400b28 <TWI_Stop+0x8>

	pTwi->TWIHS_CR = TWIHS_CR_STOP;
  400b22:	2202      	movs	r2, #2
  400b24:	6002      	str	r2, [r0, #0]
  400b26:	4770      	bx	lr
{
  400b28:	b510      	push	{r4, lr}
	assert(pTwi != NULL);
  400b2a:	4b03      	ldr	r3, [pc, #12]	; (400b38 <TWI_Stop+0x18>)
  400b2c:	4a03      	ldr	r2, [pc, #12]	; (400b3c <TWI_Stop+0x1c>)
  400b2e:	21ae      	movs	r1, #174	; 0xae
  400b30:	4803      	ldr	r0, [pc, #12]	; (400b40 <TWI_Stop+0x20>)
  400b32:	4c04      	ldr	r4, [pc, #16]	; (400b44 <TWI_Stop+0x24>)
  400b34:	47a0      	blx	r4
  400b36:	bf00      	nop
  400b38:	00408ea4 	.word	0x00408ea4
  400b3c:	00408d9c 	.word	0x00408d9c
  400b40:	00408e4c 	.word	0x00408e4c
  400b44:	00402419 	.word	0x00402419

00400b48 <TWI_StartRead>:
void TWI_StartRead(
	Twihs *pTwi,
	uint8_t address,
	uint32_t iaddress,
	uint8_t isize)
{
  400b48:	b510      	push	{r4, lr}
	assert(pTwi != NULL);
  400b4a:	b1d8      	cbz	r0, 400b84 <TWI_StartRead+0x3c>
  400b4c:	4604      	mov	r4, r0
	assert((address & 0x80) == 0);
  400b4e:	f011 0f80 	tst.w	r1, #128	; 0x80
  400b52:	d11d      	bne.n	400b90 <TWI_StartRead+0x48>
	assert((iaddress & 0xFF000000) == 0);
  400b54:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  400b58:	d120      	bne.n	400b9c <TWI_StartRead+0x54>
	assert(isize < 4);
  400b5a:	2b03      	cmp	r3, #3
  400b5c:	d824      	bhi.n	400ba8 <TWI_StartRead+0x60>

	/* Set slave address and number of internal address bytes. */
	pTwi->TWIHS_MMR = 0;
  400b5e:	2000      	movs	r0, #0
  400b60:	6060      	str	r0, [r4, #4]
	pTwi->TWIHS_MMR = (isize << 8) | TWIHS_MMR_MREAD | (address << 16);
  400b62:	0409      	lsls	r1, r1, #16
  400b64:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  400b68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  400b6c:	6063      	str	r3, [r4, #4]

	/* Set internal address bytes */
	pTwi->TWIHS_IADR = 0;
  400b6e:	60e0      	str	r0, [r4, #12]
	pTwi->TWIHS_IADR = iaddress;
  400b70:	60e2      	str	r2, [r4, #12]

	/* Send START condition */
	if (0 == twi_send_stop)
  400b72:	4b12      	ldr	r3, [pc, #72]	; (400bbc <TWI_StartRead+0x74>)
  400b74:	681b      	ldr	r3, [r3, #0]
  400b76:	b1eb      	cbz	r3, 400bb4 <TWI_StartRead+0x6c>
		pTwi->TWIHS_CR = TWIHS_CR_START;
	else {
		twi_send_stop = 0;
  400b78:	2200      	movs	r2, #0
  400b7a:	4b10      	ldr	r3, [pc, #64]	; (400bbc <TWI_StartRead+0x74>)
  400b7c:	601a      	str	r2, [r3, #0]
		pTwi->TWIHS_CR = TWIHS_CR_START | TWIHS_CR_STOP;
  400b7e:	2303      	movs	r3, #3
  400b80:	6023      	str	r3, [r4, #0]
  400b82:	bd10      	pop	{r4, pc}
	assert(pTwi != NULL);
  400b84:	4b0e      	ldr	r3, [pc, #56]	; (400bc0 <TWI_StartRead+0x78>)
  400b86:	4a0f      	ldr	r2, [pc, #60]	; (400bc4 <TWI_StartRead+0x7c>)
  400b88:	21c2      	movs	r1, #194	; 0xc2
  400b8a:	480f      	ldr	r0, [pc, #60]	; (400bc8 <TWI_StartRead+0x80>)
  400b8c:	4c0f      	ldr	r4, [pc, #60]	; (400bcc <TWI_StartRead+0x84>)
  400b8e:	47a0      	blx	r4
	assert((address & 0x80) == 0);
  400b90:	4b0f      	ldr	r3, [pc, #60]	; (400bd0 <TWI_StartRead+0x88>)
  400b92:	4a0c      	ldr	r2, [pc, #48]	; (400bc4 <TWI_StartRead+0x7c>)
  400b94:	21c3      	movs	r1, #195	; 0xc3
  400b96:	480c      	ldr	r0, [pc, #48]	; (400bc8 <TWI_StartRead+0x80>)
  400b98:	4c0c      	ldr	r4, [pc, #48]	; (400bcc <TWI_StartRead+0x84>)
  400b9a:	47a0      	blx	r4
	assert((iaddress & 0xFF000000) == 0);
  400b9c:	4b0d      	ldr	r3, [pc, #52]	; (400bd4 <TWI_StartRead+0x8c>)
  400b9e:	4a09      	ldr	r2, [pc, #36]	; (400bc4 <TWI_StartRead+0x7c>)
  400ba0:	21c4      	movs	r1, #196	; 0xc4
  400ba2:	4809      	ldr	r0, [pc, #36]	; (400bc8 <TWI_StartRead+0x80>)
  400ba4:	4c09      	ldr	r4, [pc, #36]	; (400bcc <TWI_StartRead+0x84>)
  400ba6:	47a0      	blx	r4
	assert(isize < 4);
  400ba8:	4b0b      	ldr	r3, [pc, #44]	; (400bd8 <TWI_StartRead+0x90>)
  400baa:	4a06      	ldr	r2, [pc, #24]	; (400bc4 <TWI_StartRead+0x7c>)
  400bac:	21c5      	movs	r1, #197	; 0xc5
  400bae:	4806      	ldr	r0, [pc, #24]	; (400bc8 <TWI_StartRead+0x80>)
  400bb0:	4c06      	ldr	r4, [pc, #24]	; (400bcc <TWI_StartRead+0x84>)
  400bb2:	47a0      	blx	r4
		pTwi->TWIHS_CR = TWIHS_CR_START;
  400bb4:	2301      	movs	r3, #1
  400bb6:	6023      	str	r3, [r4, #0]
  400bb8:	bd10      	pop	{r4, pc}
  400bba:	bf00      	nop
  400bbc:	20400a48 	.word	0x20400a48
  400bc0:	00408ea4 	.word	0x00408ea4
  400bc4:	00408da8 	.word	0x00408da8
  400bc8:	00408e4c 	.word	0x00408e4c
  400bcc:	00402419 	.word	0x00402419
  400bd0:	00408eb4 	.word	0x00408eb4
  400bd4:	00408ecc 	.word	0x00408ecc
  400bd8:	00408eec 	.word	0x00408eec

00400bdc <TWI_ReadByte>:
 * \param pTwi  Pointer to an Twihs instance.
 * \return byte read.
 */
uint8_t TWI_ReadByte(Twihs *pTwi)
{
	assert(pTwi != NULL);
  400bdc:	b110      	cbz	r0, 400be4 <TWI_ReadByte+0x8>

	return pTwi->TWIHS_RHR;
  400bde:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
  400be0:	b2c0      	uxtb	r0, r0
  400be2:	4770      	bx	lr
{
  400be4:	b510      	push	{r4, lr}
	assert(pTwi != NULL);
  400be6:	4b03      	ldr	r3, [pc, #12]	; (400bf4 <TWI_ReadByte+0x18>)
  400be8:	4a03      	ldr	r2, [pc, #12]	; (400bf8 <TWI_ReadByte+0x1c>)
  400bea:	21e0      	movs	r1, #224	; 0xe0
  400bec:	4803      	ldr	r0, [pc, #12]	; (400bfc <TWI_ReadByte+0x20>)
  400bee:	4c04      	ldr	r4, [pc, #16]	; (400c00 <TWI_ReadByte+0x24>)
  400bf0:	47a0      	blx	r4
  400bf2:	bf00      	nop
  400bf4:	00408ea4 	.word	0x00408ea4
  400bf8:	00408db8 	.word	0x00408db8
  400bfc:	00408e4c 	.word	0x00408e4c
  400c00:	00402419 	.word	0x00402419

00400c04 <TWI_WriteByte>:
 * \param pTwi  Pointer to an Twihs instance.
 * \param byte  Byte to send.
 */
void TWI_WriteByte(Twihs *pTwi, uint8_t byte)
{
	assert(pTwi != NULL);
  400c04:	b108      	cbz	r0, 400c0a <TWI_WriteByte+0x6>

	pTwi->TWIHS_THR = byte;
  400c06:	6341      	str	r1, [r0, #52]	; 0x34
  400c08:	4770      	bx	lr
{
  400c0a:	b510      	push	{r4, lr}
	assert(pTwi != NULL);
  400c0c:	4b02      	ldr	r3, [pc, #8]	; (400c18 <TWI_WriteByte+0x14>)
  400c0e:	4a03      	ldr	r2, [pc, #12]	; (400c1c <TWI_WriteByte+0x18>)
  400c10:	21ef      	movs	r1, #239	; 0xef
  400c12:	4803      	ldr	r0, [pc, #12]	; (400c20 <TWI_WriteByte+0x1c>)
  400c14:	4c03      	ldr	r4, [pc, #12]	; (400c24 <TWI_WriteByte+0x20>)
  400c16:	47a0      	blx	r4
  400c18:	00408ea4 	.word	0x00408ea4
  400c1c:	00408dc8 	.word	0x00408dc8
  400c20:	00408e4c 	.word	0x00408e4c
  400c24:	00402419 	.word	0x00402419

00400c28 <TWI_StartWrite>:
	Twihs *pTwi,
	uint8_t address,
	uint32_t iaddress,
	uint8_t isize,
	uint8_t byte)
{
  400c28:	b510      	push	{r4, lr}
	assert(pTwi != NULL);
  400c2a:	b1b0      	cbz	r0, 400c5a <TWI_StartWrite+0x32>
  400c2c:	4604      	mov	r4, r0
	assert((address & 0x80) == 0);
  400c2e:	f011 0f80 	tst.w	r1, #128	; 0x80
  400c32:	d119      	bne.n	400c68 <TWI_StartWrite+0x40>
	assert((iaddress & 0xFF000000) == 0);
  400c34:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  400c38:	d11d      	bne.n	400c76 <TWI_StartWrite+0x4e>
	assert(isize < 4);
  400c3a:	2b03      	cmp	r3, #3
  400c3c:	d822      	bhi.n	400c84 <TWI_StartWrite+0x5c>

	/* Set slave address and number of internal address bytes. */
	pTwi->TWIHS_MMR = 0;
  400c3e:	2000      	movs	r0, #0
  400c40:	6060      	str	r0, [r4, #4]
	pTwi->TWIHS_MMR = (isize << 8) | (address << 16);
  400c42:	0409      	lsls	r1, r1, #16
  400c44:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  400c48:	6063      	str	r3, [r4, #4]

	/* Set internal address bytes. */
	pTwi->TWIHS_IADR = 0;
  400c4a:	60e0      	str	r0, [r4, #12]
	pTwi->TWIHS_IADR = iaddress;
  400c4c:	60e2      	str	r2, [r4, #12]

	/* Write first byte to send.*/
	TWI_WriteByte(pTwi, byte);
  400c4e:	f89d 1008 	ldrb.w	r1, [sp, #8]
  400c52:	4620      	mov	r0, r4
  400c54:	4b0f      	ldr	r3, [pc, #60]	; (400c94 <TWI_StartWrite+0x6c>)
  400c56:	4798      	blx	r3
  400c58:	bd10      	pop	{r4, pc}
	assert(pTwi != NULL);
  400c5a:	4b0f      	ldr	r3, [pc, #60]	; (400c98 <TWI_StartWrite+0x70>)
  400c5c:	4a0f      	ldr	r2, [pc, #60]	; (400c9c <TWI_StartWrite+0x74>)
  400c5e:	f44f 7183 	mov.w	r1, #262	; 0x106
  400c62:	480f      	ldr	r0, [pc, #60]	; (400ca0 <TWI_StartWrite+0x78>)
  400c64:	4c0f      	ldr	r4, [pc, #60]	; (400ca4 <TWI_StartWrite+0x7c>)
  400c66:	47a0      	blx	r4
	assert((address & 0x80) == 0);
  400c68:	4b0f      	ldr	r3, [pc, #60]	; (400ca8 <TWI_StartWrite+0x80>)
  400c6a:	4a0c      	ldr	r2, [pc, #48]	; (400c9c <TWI_StartWrite+0x74>)
  400c6c:	f240 1107 	movw	r1, #263	; 0x107
  400c70:	480b      	ldr	r0, [pc, #44]	; (400ca0 <TWI_StartWrite+0x78>)
  400c72:	4c0c      	ldr	r4, [pc, #48]	; (400ca4 <TWI_StartWrite+0x7c>)
  400c74:	47a0      	blx	r4
	assert((iaddress & 0xFF000000) == 0);
  400c76:	4b0d      	ldr	r3, [pc, #52]	; (400cac <TWI_StartWrite+0x84>)
  400c78:	4a08      	ldr	r2, [pc, #32]	; (400c9c <TWI_StartWrite+0x74>)
  400c7a:	f44f 7184 	mov.w	r1, #264	; 0x108
  400c7e:	4808      	ldr	r0, [pc, #32]	; (400ca0 <TWI_StartWrite+0x78>)
  400c80:	4c08      	ldr	r4, [pc, #32]	; (400ca4 <TWI_StartWrite+0x7c>)
  400c82:	47a0      	blx	r4
	assert(isize < 4);
  400c84:	4b0a      	ldr	r3, [pc, #40]	; (400cb0 <TWI_StartWrite+0x88>)
  400c86:	4a05      	ldr	r2, [pc, #20]	; (400c9c <TWI_StartWrite+0x74>)
  400c88:	f240 1109 	movw	r1, #265	; 0x109
  400c8c:	4804      	ldr	r0, [pc, #16]	; (400ca0 <TWI_StartWrite+0x78>)
  400c8e:	4c05      	ldr	r4, [pc, #20]	; (400ca4 <TWI_StartWrite+0x7c>)
  400c90:	47a0      	blx	r4
  400c92:	bf00      	nop
  400c94:	00400c05 	.word	0x00400c05
  400c98:	00408ea4 	.word	0x00408ea4
  400c9c:	00408dd8 	.word	0x00408dd8
  400ca0:	00408e4c 	.word	0x00408e4c
  400ca4:	00402419 	.word	0x00402419
  400ca8:	00408eb4 	.word	0x00408eb4
  400cac:	00408ecc 	.word	0x00408ecc
  400cb0:	00408eec 	.word	0x00408eec

00400cb4 <TWI_ByteReceived>:
 * \return 1 if a byte has been received and can be read on the given TWI
 * peripheral; otherwise, returns 0. This function resets the status register.
 */
uint8_t TWI_ByteReceived(Twihs *pTwi)
{
	return ((pTwi->TWIHS_SR & TWIHS_SR_RXRDY) == TWIHS_SR_RXRDY);
  400cb4:	6a00      	ldr	r0, [r0, #32]
}
  400cb6:	f3c0 0040 	ubfx	r0, r0, #1, #1
  400cba:	4770      	bx	lr

00400cbc <TWI_ByteSent>:
 * \return 1 if a byte has been sent  so another one can be stored for
 * transmission; otherwise returns 0. This function clears the status register.
 */
uint8_t TWI_ByteSent(Twihs *pTwi)
{
	return ((pTwi->TWIHS_SR & TWIHS_SR_TXRDY) == TWIHS_SR_TXRDY);
  400cbc:	6a00      	ldr	r0, [r0, #32]
}
  400cbe:	f3c0 0080 	ubfx	r0, r0, #2, #1
  400cc2:	4770      	bx	lr

00400cc4 <TWI_TransferComplete>:
 * \return  1 if the current transmission is complete (the STOP has been sent);
 * otherwise returns 0.
 */
uint8_t TWI_TransferComplete(Twihs *pTwi)
{
	return ((pTwi->TWIHS_SR & TWIHS_SR_TXCOMP) == TWIHS_SR_TXCOMP);
  400cc4:	6a00      	ldr	r0, [r0, #32]
  400cc6:	f000 0001 	and.w	r0, r0, #1
}
  400cca:	4770      	bx	lr

00400ccc <TWI_EnableIt>:
 * \brief Enables the selected interrupts sources on a TWI peripheral.
 * \param pTwi  Pointer to an Twihs instance.
 * \param sources  Bitwise OR of selected interrupt sources.
 */
void TWI_EnableIt(Twihs *pTwi, uint32_t sources)
{
  400ccc:	b510      	push	{r4, lr}
	assert(pTwi != NULL);
  400cce:	b120      	cbz	r0, 400cda <TWI_EnableIt+0xe>
	assert((sources & TWIHS_IT));
  400cd0:	4a09      	ldr	r2, [pc, #36]	; (400cf8 <TWI_EnableIt+0x2c>)
  400cd2:	4211      	tst	r1, r2
  400cd4:	d008      	beq.n	400ce8 <TWI_EnableIt+0x1c>

	pTwi->TWIHS_IER = sources;
  400cd6:	6241      	str	r1, [r0, #36]	; 0x24
  400cd8:	bd10      	pop	{r4, pc}
	assert(pTwi != NULL);
  400cda:	4b08      	ldr	r3, [pc, #32]	; (400cfc <TWI_EnableIt+0x30>)
  400cdc:	4a08      	ldr	r2, [pc, #32]	; (400d00 <TWI_EnableIt+0x34>)
  400cde:	f240 113f 	movw	r1, #319	; 0x13f
  400ce2:	4808      	ldr	r0, [pc, #32]	; (400d04 <TWI_EnableIt+0x38>)
  400ce4:	4c08      	ldr	r4, [pc, #32]	; (400d08 <TWI_EnableIt+0x3c>)
  400ce6:	47a0      	blx	r4
	assert((sources & TWIHS_IT));
  400ce8:	4b08      	ldr	r3, [pc, #32]	; (400d0c <TWI_EnableIt+0x40>)
  400cea:	4a05      	ldr	r2, [pc, #20]	; (400d00 <TWI_EnableIt+0x34>)
  400cec:	f44f 71a0 	mov.w	r1, #320	; 0x140
  400cf0:	4804      	ldr	r0, [pc, #16]	; (400d04 <TWI_EnableIt+0x38>)
  400cf2:	4c05      	ldr	r4, [pc, #20]	; (400d08 <TWI_EnableIt+0x3c>)
  400cf4:	47a0      	blx	r4
  400cf6:	bf00      	nop
  400cf8:	003d0ff7 	.word	0x003d0ff7
  400cfc:	00408ea4 	.word	0x00408ea4
  400d00:	00408de8 	.word	0x00408de8
  400d04:	00408e4c 	.word	0x00408e4c
  400d08:	00402419 	.word	0x00402419
  400d0c:	00408ef8 	.word	0x00408ef8

00400d10 <TWI_DisableIt>:
 * \brief Disables the selected interrupts sources on a TWI peripheral.
 * \param pTwi  Pointer to an Twihs instance.
 * \param sources  Bitwise OR of selected interrupt sources.
 */
void TWI_DisableIt(Twihs *pTwi, uint32_t sources)
{
  400d10:	b510      	push	{r4, lr}
	assert(pTwi != NULL);
  400d12:	b120      	cbz	r0, 400d1e <TWI_DisableIt+0xe>
	assert(sources & TWIHS_IT);
  400d14:	4a09      	ldr	r2, [pc, #36]	; (400d3c <TWI_DisableIt+0x2c>)
  400d16:	4211      	tst	r1, r2
  400d18:	d008      	beq.n	400d2c <TWI_DisableIt+0x1c>

	pTwi->TWIHS_IDR = sources;
  400d1a:	6281      	str	r1, [r0, #40]	; 0x28
  400d1c:	bd10      	pop	{r4, pc}
	assert(pTwi != NULL);
  400d1e:	4b08      	ldr	r3, [pc, #32]	; (400d40 <TWI_DisableIt+0x30>)
  400d20:	4a08      	ldr	r2, [pc, #32]	; (400d44 <TWI_DisableIt+0x34>)
  400d22:	f44f 71a6 	mov.w	r1, #332	; 0x14c
  400d26:	4808      	ldr	r0, [pc, #32]	; (400d48 <TWI_DisableIt+0x38>)
  400d28:	4c08      	ldr	r4, [pc, #32]	; (400d4c <TWI_DisableIt+0x3c>)
  400d2a:	47a0      	blx	r4
	assert(sources & TWIHS_IT);
  400d2c:	4b08      	ldr	r3, [pc, #32]	; (400d50 <TWI_DisableIt+0x40>)
  400d2e:	4a05      	ldr	r2, [pc, #20]	; (400d44 <TWI_DisableIt+0x34>)
  400d30:	f240 114d 	movw	r1, #333	; 0x14d
  400d34:	4804      	ldr	r0, [pc, #16]	; (400d48 <TWI_DisableIt+0x38>)
  400d36:	4c05      	ldr	r4, [pc, #20]	; (400d4c <TWI_DisableIt+0x3c>)
  400d38:	47a0      	blx	r4
  400d3a:	bf00      	nop
  400d3c:	003d0ff7 	.word	0x003d0ff7
  400d40:	00408ea4 	.word	0x00408ea4
  400d44:	00408df8 	.word	0x00408df8
  400d48:	00408e4c 	.word	0x00408e4c
  400d4c:	00402419 	.word	0x00402419
  400d50:	00408f10 	.word	0x00408f10

00400d54 <TWI_GetMaskedStatus>:
 */
uint32_t TWI_GetMaskedStatus(Twihs *pTwi)
{
	uint32_t status;

	assert(pTwi != NULL);
  400d54:	b120      	cbz	r0, 400d60 <TWI_GetMaskedStatus+0xc>
  400d56:	4603      	mov	r3, r0

	status = pTwi->TWIHS_SR;
  400d58:	6a00      	ldr	r0, [r0, #32]
	status &= pTwi->TWIHS_IMR;
  400d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	return status;
}
  400d5c:	4018      	ands	r0, r3
  400d5e:	4770      	bx	lr
{
  400d60:	b510      	push	{r4, lr}
	assert(pTwi != NULL);
  400d62:	4b03      	ldr	r3, [pc, #12]	; (400d70 <TWI_GetMaskedStatus+0x1c>)
  400d64:	4a03      	ldr	r2, [pc, #12]	; (400d74 <TWI_GetMaskedStatus+0x20>)
  400d66:	f240 116b 	movw	r1, #363	; 0x16b
  400d6a:	4803      	ldr	r0, [pc, #12]	; (400d78 <TWI_GetMaskedStatus+0x24>)
  400d6c:	4c03      	ldr	r4, [pc, #12]	; (400d7c <TWI_GetMaskedStatus+0x28>)
  400d6e:	47a0      	blx	r4
  400d70:	00408ea4 	.word	0x00408ea4
  400d74:	00408e18 	.word	0x00408e18
  400d78:	00408e4c 	.word	0x00408e4c
  400d7c:	00402419 	.word	0x00402419

00400d80 <TWI_SendSTOPCondition>:
 *  the current byte transmission in master read mode.
 * \param pTwi  Pointer to an Twihs instance.
 */
void TWI_SendSTOPCondition(Twihs *pTwi)
{
	assert(pTwi != NULL);
  400d80:	b120      	cbz	r0, 400d8c <TWI_SendSTOPCondition+0xc>

	pTwi->TWIHS_CR |= TWIHS_CR_STOP;
  400d82:	6803      	ldr	r3, [r0, #0]
  400d84:	f043 0302 	orr.w	r3, r3, #2
  400d88:	6003      	str	r3, [r0, #0]
  400d8a:	4770      	bx	lr
{
  400d8c:	b510      	push	{r4, lr}
	assert(pTwi != NULL);
  400d8e:	4b03      	ldr	r3, [pc, #12]	; (400d9c <TWI_SendSTOPCondition+0x1c>)
  400d90:	4a03      	ldr	r2, [pc, #12]	; (400da0 <TWI_SendSTOPCondition+0x20>)
  400d92:	f44f 71bd 	mov.w	r1, #378	; 0x17a
  400d96:	4803      	ldr	r0, [pc, #12]	; (400da4 <TWI_SendSTOPCondition+0x24>)
  400d98:	4c03      	ldr	r4, [pc, #12]	; (400da8 <TWI_SendSTOPCondition+0x28>)
  400d9a:	47a0      	blx	r4
  400d9c:	00408ea4 	.word	0x00408ea4
  400da0:	00408e2c 	.word	0x00408e2c
  400da4:	00408e4c 	.word	0x00408e4c
  400da8:	00402419 	.word	0x00402419

00400dac <TWID_Initialize>:
 * function.
 * \param pTwid  Pointer to the Twid instance to initialize.
 * \param pTwi  Pointer to the TWI peripheral to use.
 */
void TWID_Initialize(Twid *pTwid, Twihs *pTwi)
{
  400dac:	b510      	push	{r4, lr}
	TRACE_DEBUG("TWID_Initialize()\n\r");
	assert(pTwid != NULL);
  400dae:	b120      	cbz	r0, 400dba <TWID_Initialize+0xe>
	assert(pTwi != NULL);
  400db0:	b149      	cbz	r1, 400dc6 <TWID_Initialize+0x1a>

	/* Initialize driver. */
	pTwid->pTwi = pTwi;
  400db2:	6001      	str	r1, [r0, #0]
	pTwid->pTransfer = 0;
  400db4:	2200      	movs	r2, #0
  400db6:	6042      	str	r2, [r0, #4]
  400db8:	bd10      	pop	{r4, pc}
	assert(pTwid != NULL);
  400dba:	4b06      	ldr	r3, [pc, #24]	; (400dd4 <TWID_Initialize+0x28>)
  400dbc:	4a06      	ldr	r2, [pc, #24]	; (400dd8 <TWID_Initialize+0x2c>)
  400dbe:	21e2      	movs	r1, #226	; 0xe2
  400dc0:	4806      	ldr	r0, [pc, #24]	; (400ddc <TWID_Initialize+0x30>)
  400dc2:	4c07      	ldr	r4, [pc, #28]	; (400de0 <TWID_Initialize+0x34>)
  400dc4:	47a0      	blx	r4
	assert(pTwi != NULL);
  400dc6:	4b07      	ldr	r3, [pc, #28]	; (400de4 <TWID_Initialize+0x38>)
  400dc8:	4a03      	ldr	r2, [pc, #12]	; (400dd8 <TWID_Initialize+0x2c>)
  400dca:	21e3      	movs	r1, #227	; 0xe3
  400dcc:	4803      	ldr	r0, [pc, #12]	; (400ddc <TWID_Initialize+0x30>)
  400dce:	4c04      	ldr	r4, [pc, #16]	; (400de0 <TWID_Initialize+0x34>)
  400dd0:	47a0      	blx	r4
  400dd2:	bf00      	nop
  400dd4:	00408fb4 	.word	0x00408fb4
  400dd8:	00408f24 	.word	0x00408f24
  400ddc:	00408fc4 	.word	0x00408fc4
  400de0:	00402419 	.word	0x00402419
  400de4:	00408ea4 	.word	0x00408ea4

00400de8 <TWID_Handler>:
 * occurring on the bus. This function MUST be called by the interrupt service
 * routine of the TWI peripheral if asynchronous read/write are needed.
 * \param pTwid  Pointer to a Twid instance.
 */
void TWID_Handler(Twid *pTwid)
{
  400de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t status;
	AsyncTwi *pTransfer;
	Twihs *pTwi;

	assert(pTwid != NULL);
  400dea:	b1d0      	cbz	r0, 400e22 <TWID_Handler+0x3a>
  400dec:	4606      	mov	r6, r0

	pTransfer = (AsyncTwi *)pTwid->pTransfer;
  400dee:	6844      	ldr	r4, [r0, #4]
	assert(pTransfer != NULL);
  400df0:	b1ec      	cbz	r4, 400e2e <TWID_Handler+0x46>
	pTwi = pTwid->pTwi;
  400df2:	6805      	ldr	r5, [r0, #0]
	assert(pTwi != NULL);
  400df4:	b30d      	cbz	r5, 400e3a <TWID_Handler+0x52>

	/* Retrieve interrupt status */
	status = TWI_GetMaskedStatus(pTwi);
  400df6:	4628      	mov	r0, r5
  400df8:	4b2f      	ldr	r3, [pc, #188]	; (400eb8 <TWID_Handler+0xd0>)
  400dfa:	4798      	blx	r3

	/* Byte received */
	if (TWI_STATUS_RXRDY(status)) {
  400dfc:	f010 0f02 	tst.w	r0, #2
  400e00:	d121      	bne.n	400e46 <TWID_Handler+0x5e>
		else if (pTransfer->transferred == (pTransfer->num - 1))

			TWI_Stop(pTwi);
	}
	/* Byte sent*/
	else if (TWI_STATUS_TXRDY(status)) {
  400e02:	f010 0f04 	tst.w	r0, #4
  400e06:	d047      	beq.n	400e98 <TWID_Handler+0xb0>

		/* Transfer finished ? */
		if (pTransfer->transferred == pTransfer->num) {
  400e08:	6923      	ldr	r3, [r4, #16]
  400e0a:	68e2      	ldr	r2, [r4, #12]
  400e0c:	4293      	cmp	r3, r2
  400e0e:	d037      	beq.n	400e80 <TWID_Handler+0x98>
			TWI_SendSTOPCondition(pTwi);
		}
		/* Bytes remaining */
		else {

			TWI_WriteByte(pTwi, pTransfer->pData[pTransfer->transferred]);
  400e10:	68a2      	ldr	r2, [r4, #8]
  400e12:	5cd1      	ldrb	r1, [r2, r3]
  400e14:	4628      	mov	r0, r5
  400e16:	4b29      	ldr	r3, [pc, #164]	; (400ebc <TWID_Handler+0xd4>)
  400e18:	4798      	blx	r3
			pTransfer->transferred++;
  400e1a:	6923      	ldr	r3, [r4, #16]
  400e1c:	3301      	adds	r3, #1
  400e1e:	6123      	str	r3, [r4, #16]
  400e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	assert(pTwid != NULL);
  400e22:	4b27      	ldr	r3, [pc, #156]	; (400ec0 <TWID_Handler+0xd8>)
  400e24:	4a27      	ldr	r2, [pc, #156]	; (400ec4 <TWID_Handler+0xdc>)
  400e26:	21f6      	movs	r1, #246	; 0xf6
  400e28:	4827      	ldr	r0, [pc, #156]	; (400ec8 <TWID_Handler+0xe0>)
  400e2a:	4c28      	ldr	r4, [pc, #160]	; (400ecc <TWID_Handler+0xe4>)
  400e2c:	47a0      	blx	r4
	assert(pTransfer != NULL);
  400e2e:	4b28      	ldr	r3, [pc, #160]	; (400ed0 <TWID_Handler+0xe8>)
  400e30:	4a24      	ldr	r2, [pc, #144]	; (400ec4 <TWID_Handler+0xdc>)
  400e32:	21f9      	movs	r1, #249	; 0xf9
  400e34:	4824      	ldr	r0, [pc, #144]	; (400ec8 <TWID_Handler+0xe0>)
  400e36:	4c25      	ldr	r4, [pc, #148]	; (400ecc <TWID_Handler+0xe4>)
  400e38:	47a0      	blx	r4
	assert(pTwi != NULL);
  400e3a:	4b26      	ldr	r3, [pc, #152]	; (400ed4 <TWID_Handler+0xec>)
  400e3c:	4a21      	ldr	r2, [pc, #132]	; (400ec4 <TWID_Handler+0xdc>)
  400e3e:	21fb      	movs	r1, #251	; 0xfb
  400e40:	4821      	ldr	r0, [pc, #132]	; (400ec8 <TWID_Handler+0xe0>)
  400e42:	4c22      	ldr	r4, [pc, #136]	; (400ecc <TWID_Handler+0xe4>)
  400e44:	47a0      	blx	r4
		pTransfer->pData[pTransfer->transferred] = TWI_ReadByte(pTwi);
  400e46:	68a7      	ldr	r7, [r4, #8]
  400e48:	6926      	ldr	r6, [r4, #16]
  400e4a:	4628      	mov	r0, r5
  400e4c:	4b22      	ldr	r3, [pc, #136]	; (400ed8 <TWID_Handler+0xf0>)
  400e4e:	4798      	blx	r3
  400e50:	55b8      	strb	r0, [r7, r6]
		pTransfer->transferred++;
  400e52:	6923      	ldr	r3, [r4, #16]
  400e54:	3301      	adds	r3, #1
  400e56:	6123      	str	r3, [r4, #16]
		if (pTransfer->transferred == pTransfer->num) {
  400e58:	68e2      	ldr	r2, [r4, #12]
  400e5a:	4293      	cmp	r3, r2
  400e5c:	d003      	beq.n	400e66 <TWID_Handler+0x7e>
		else if (pTransfer->transferred == (pTransfer->num - 1))
  400e5e:	3a01      	subs	r2, #1
  400e60:	4293      	cmp	r3, r2
  400e62:	d009      	beq.n	400e78 <TWID_Handler+0x90>
  400e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			TWI_DisableIt(pTwi, TWIHS_IDR_RXRDY);
  400e66:	2102      	movs	r1, #2
  400e68:	4628      	mov	r0, r5
  400e6a:	4b1c      	ldr	r3, [pc, #112]	; (400edc <TWID_Handler+0xf4>)
  400e6c:	4798      	blx	r3
			TWI_EnableIt(pTwi, TWIHS_IER_TXCOMP);
  400e6e:	2101      	movs	r1, #1
  400e70:	4628      	mov	r0, r5
  400e72:	4b1b      	ldr	r3, [pc, #108]	; (400ee0 <TWID_Handler+0xf8>)
  400e74:	4798      	blx	r3
  400e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			TWI_Stop(pTwi);
  400e78:	4628      	mov	r0, r5
  400e7a:	4b1a      	ldr	r3, [pc, #104]	; (400ee4 <TWID_Handler+0xfc>)
  400e7c:	4798      	blx	r3
  400e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			TWI_DisableIt(pTwi, TWIHS_IDR_TXRDY);
  400e80:	2104      	movs	r1, #4
  400e82:	4628      	mov	r0, r5
  400e84:	4b15      	ldr	r3, [pc, #84]	; (400edc <TWID_Handler+0xf4>)
  400e86:	4798      	blx	r3
			TWI_EnableIt(pTwi, TWIHS_IER_TXCOMP);
  400e88:	2101      	movs	r1, #1
  400e8a:	4628      	mov	r0, r5
  400e8c:	4b14      	ldr	r3, [pc, #80]	; (400ee0 <TWID_Handler+0xf8>)
  400e8e:	4798      	blx	r3
			TWI_SendSTOPCondition(pTwi);
  400e90:	4628      	mov	r0, r5
  400e92:	4b15      	ldr	r3, [pc, #84]	; (400ee8 <TWID_Handler+0x100>)
  400e94:	4798      	blx	r3
  400e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}
	/* Transfer complete*/
	else if (TWI_STATUS_TXCOMP(status)) {
  400e98:	f010 0f01 	tst.w	r0, #1
  400e9c:	d0e2      	beq.n	400e64 <TWID_Handler+0x7c>

		TWI_DisableIt(pTwi, TWIHS_IDR_TXCOMP);
  400e9e:	2101      	movs	r1, #1
  400ea0:	4628      	mov	r0, r5
  400ea2:	4b0e      	ldr	r3, [pc, #56]	; (400edc <TWID_Handler+0xf4>)
  400ea4:	4798      	blx	r3
		pTransfer->status = 0;
  400ea6:	2300      	movs	r3, #0
  400ea8:	7023      	strb	r3, [r4, #0]

		if (pTransfer->callback)
  400eaa:	6863      	ldr	r3, [r4, #4]
  400eac:	b10b      	cbz	r3, 400eb2 <TWID_Handler+0xca>
			pTransfer->callback((Async *) pTransfer);
  400eae:	4620      	mov	r0, r4
  400eb0:	4798      	blx	r3

		pTwid->pTransfer = 0;
  400eb2:	2300      	movs	r3, #0
  400eb4:	6073      	str	r3, [r6, #4]
	}
}
  400eb6:	e7d5      	b.n	400e64 <TWID_Handler+0x7c>
  400eb8:	00400d55 	.word	0x00400d55
  400ebc:	00400c05 	.word	0x00400c05
  400ec0:	00408fb4 	.word	0x00408fb4
  400ec4:	00408f34 	.word	0x00408f34
  400ec8:	00408fc4 	.word	0x00408fc4
  400ecc:	00402419 	.word	0x00402419
  400ed0:	00408fe0 	.word	0x00408fe0
  400ed4:	00408ea4 	.word	0x00408ea4
  400ed8:	00400bdd 	.word	0x00400bdd
  400edc:	00400d11 	.word	0x00400d11
  400ee0:	00400ccd 	.word	0x00400ccd
  400ee4:	00400b21 	.word	0x00400b21
  400ee8:	00400d81 	.word	0x00400d81

00400eec <TWID_Read>:
	uint32_t iaddress,
	uint8_t isize,
	uint8_t *pData,
	uint32_t num,
	Async *pAsync)
{
  400eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400ef0:	4691      	mov	r9, r2
  400ef2:	9f08      	ldr	r7, [sp, #32]
  400ef4:	9e09      	ldr	r6, [sp, #36]	; 0x24
  400ef6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	Twihs *pTwi;
	AsyncTwi *pTransfer;
	uint32_t startTime;
	assert(pTwid != NULL);
  400ef8:	b1a8      	cbz	r0, 400f26 <TWID_Read+0x3a>
  400efa:	4688      	mov	r8, r1
  400efc:	469a      	mov	sl, r3
  400efe:	4603      	mov	r3, r0
	pTwi = pTwid->pTwi;
  400f00:	6804      	ldr	r4, [r0, #0]
	pTransfer = (AsyncTwi *) pTwid->pTransfer;
  400f02:	6841      	ldr	r1, [r0, #4]

	assert((address & 0x80) == 0);
  400f04:	f018 0f80 	tst.w	r8, #128	; 0x80
  400f08:	d114      	bne.n	400f34 <TWID_Read+0x48>
	assert((iaddress & 0xFF000000) == 0);
  400f0a:	f019 4f7f 	tst.w	r9, #4278190080	; 0xff000000
  400f0e:	d118      	bne.n	400f42 <TWID_Read+0x56>
	assert(isize < 4);
  400f10:	f1ba 0f03 	cmp.w	sl, #3
  400f14:	d81c      	bhi.n	400f50 <TWID_Read+0x64>

	/* Check that no transfer is already pending*/
	if (pTransfer) {
  400f16:	b311      	cbz	r1, 400f5e <TWID_Read+0x72>

		TRACE_ERROR("TWID_Read: A transfer is already pending\n\r");
  400f18:	483e      	ldr	r0, [pc, #248]	; (401014 <TWID_Read+0x128>)
  400f1a:	4b3f      	ldr	r3, [pc, #252]	; (401018 <TWID_Read+0x12c>)
  400f1c:	4798      	blx	r3
		return TWID_ERROR_BUSY;
  400f1e:	2501      	movs	r5, #1
			}
		}
	}

	return 0;
}
  400f20:	4628      	mov	r0, r5
  400f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	assert(pTwid != NULL);
  400f26:	4b3d      	ldr	r3, [pc, #244]	; (40101c <TWID_Read+0x130>)
  400f28:	4a3d      	ldr	r2, [pc, #244]	; (401020 <TWID_Read+0x134>)
  400f2a:	f240 1147 	movw	r1, #327	; 0x147
  400f2e:	483d      	ldr	r0, [pc, #244]	; (401024 <TWID_Read+0x138>)
  400f30:	4c3d      	ldr	r4, [pc, #244]	; (401028 <TWID_Read+0x13c>)
  400f32:	47a0      	blx	r4
	assert((address & 0x80) == 0);
  400f34:	4b3d      	ldr	r3, [pc, #244]	; (40102c <TWID_Read+0x140>)
  400f36:	4a3a      	ldr	r2, [pc, #232]	; (401020 <TWID_Read+0x134>)
  400f38:	f240 114b 	movw	r1, #331	; 0x14b
  400f3c:	4839      	ldr	r0, [pc, #228]	; (401024 <TWID_Read+0x138>)
  400f3e:	4c3a      	ldr	r4, [pc, #232]	; (401028 <TWID_Read+0x13c>)
  400f40:	47a0      	blx	r4
	assert((iaddress & 0xFF000000) == 0);
  400f42:	4b3b      	ldr	r3, [pc, #236]	; (401030 <TWID_Read+0x144>)
  400f44:	4a36      	ldr	r2, [pc, #216]	; (401020 <TWID_Read+0x134>)
  400f46:	f44f 71a6 	mov.w	r1, #332	; 0x14c
  400f4a:	4836      	ldr	r0, [pc, #216]	; (401024 <TWID_Read+0x138>)
  400f4c:	4c36      	ldr	r4, [pc, #216]	; (401028 <TWID_Read+0x13c>)
  400f4e:	47a0      	blx	r4
	assert(isize < 4);
  400f50:	4b38      	ldr	r3, [pc, #224]	; (401034 <TWID_Read+0x148>)
  400f52:	4a33      	ldr	r2, [pc, #204]	; (401020 <TWID_Read+0x134>)
  400f54:	f240 114d 	movw	r1, #333	; 0x14d
  400f58:	4832      	ldr	r0, [pc, #200]	; (401024 <TWID_Read+0x138>)
  400f5a:	4c33      	ldr	r4, [pc, #204]	; (401028 <TWID_Read+0x13c>)
  400f5c:	47a0      	blx	r4
	twi_send_stop = (num == 1) ? 1 : 0;
  400f5e:	2e01      	cmp	r6, #1
  400f60:	bf14      	ite	ne
  400f62:	2000      	movne	r0, #0
  400f64:	2001      	moveq	r0, #1
  400f66:	4934      	ldr	r1, [pc, #208]	; (401038 <TWID_Read+0x14c>)
  400f68:	6008      	str	r0, [r1, #0]
	if (pAsync) {
  400f6a:	b18a      	cbz	r2, 400f90 <TWID_Read+0xa4>
		pTwid->pTransfer = pAsync;
  400f6c:	605a      	str	r2, [r3, #4]
		pTransfer->status = ASYNC_STATUS_PENDING;
  400f6e:	23ff      	movs	r3, #255	; 0xff
  400f70:	7013      	strb	r3, [r2, #0]
		pTransfer->pData = pData;
  400f72:	6097      	str	r7, [r2, #8]
		pTransfer->num = num;
  400f74:	60d6      	str	r6, [r2, #12]
		pTransfer->transferred = 0;
  400f76:	2500      	movs	r5, #0
  400f78:	6115      	str	r5, [r2, #16]
		TWI_EnableIt(pTwi, TWIHS_IER_RXRDY);
  400f7a:	2102      	movs	r1, #2
  400f7c:	4620      	mov	r0, r4
  400f7e:	4b2f      	ldr	r3, [pc, #188]	; (40103c <TWID_Read+0x150>)
  400f80:	4798      	blx	r3
		TWI_StartRead(pTwi, address, iaddress, isize);
  400f82:	4653      	mov	r3, sl
  400f84:	464a      	mov	r2, r9
  400f86:	4641      	mov	r1, r8
  400f88:	4620      	mov	r0, r4
  400f8a:	4c2d      	ldr	r4, [pc, #180]	; (401040 <TWID_Read+0x154>)
  400f8c:	47a0      	blx	r4
  400f8e:	e7c7      	b.n	400f20 <TWID_Read+0x34>
		TWI_StartRead(pTwi, address, iaddress, isize);
  400f90:	4653      	mov	r3, sl
  400f92:	464a      	mov	r2, r9
  400f94:	4641      	mov	r1, r8
  400f96:	4620      	mov	r0, r4
  400f98:	4d29      	ldr	r5, [pc, #164]	; (401040 <TWID_Read+0x154>)
  400f9a:	47a8      	blx	r5
		while (num > 0) {
  400f9c:	e00a      	b.n	400fb4 <TWID_Read+0xc8>
				TWI_Stop(pTwi);
  400f9e:	4620      	mov	r0, r4
  400fa0:	4b28      	ldr	r3, [pc, #160]	; (401044 <TWID_Read+0x158>)
  400fa2:	4798      	blx	r3
  400fa4:	e009      	b.n	400fba <TWID_Read+0xce>
			*pData++ = TWI_ReadByte(pTwi);
  400fa6:	1c7d      	adds	r5, r7, #1
  400fa8:	4620      	mov	r0, r4
  400faa:	4b27      	ldr	r3, [pc, #156]	; (401048 <TWID_Read+0x15c>)
  400fac:	4798      	blx	r3
  400fae:	7038      	strb	r0, [r7, #0]
			num--;
  400fb0:	3e01      	subs	r6, #1
			*pData++ = TWI_ReadByte(pTwi);
  400fb2:	462f      	mov	r7, r5
		while (num > 0) {
  400fb4:	b1b6      	cbz	r6, 400fe4 <TWID_Read+0xf8>
			if (num == 1)
  400fb6:	2e01      	cmp	r6, #1
  400fb8:	d0f1      	beq.n	400f9e <TWID_Read+0xb2>
			startTime = GetTicks();
  400fba:	4b24      	ldr	r3, [pc, #144]	; (40104c <TWID_Read+0x160>)
  400fbc:	4798      	blx	r3
  400fbe:	4605      	mov	r5, r0
			while (!TWI_ByteReceived(pTwi)) {
  400fc0:	4620      	mov	r0, r4
  400fc2:	4b23      	ldr	r3, [pc, #140]	; (401050 <TWID_Read+0x164>)
  400fc4:	4798      	blx	r3
  400fc6:	2800      	cmp	r0, #0
  400fc8:	d1ed      	bne.n	400fa6 <TWID_Read+0xba>
				if ((GetDelayInTicks(startTime, GetTicks())) > TWITIMEOUTMAX) {
  400fca:	4b20      	ldr	r3, [pc, #128]	; (40104c <TWID_Read+0x160>)
  400fcc:	4798      	blx	r3
  400fce:	4601      	mov	r1, r0
  400fd0:	4628      	mov	r0, r5
  400fd2:	4b20      	ldr	r3, [pc, #128]	; (401054 <TWID_Read+0x168>)
  400fd4:	4798      	blx	r3
  400fd6:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
  400fda:	d9f1      	bls.n	400fc0 <TWID_Read+0xd4>
					TRACE_ERROR("TWID Timeout BR\n\r");
  400fdc:	481e      	ldr	r0, [pc, #120]	; (401058 <TWID_Read+0x16c>)
  400fde:	4b0e      	ldr	r3, [pc, #56]	; (401018 <TWID_Read+0x12c>)
  400fe0:	4798      	blx	r3
					break;
  400fe2:	e7e0      	b.n	400fa6 <TWID_Read+0xba>
		startTime = GetTicks();
  400fe4:	4b19      	ldr	r3, [pc, #100]	; (40104c <TWID_Read+0x160>)
  400fe6:	4798      	blx	r3
  400fe8:	4606      	mov	r6, r0
		while (!TWI_TransferComplete(pTwi)) {
  400fea:	4620      	mov	r0, r4
  400fec:	4b1b      	ldr	r3, [pc, #108]	; (40105c <TWID_Read+0x170>)
  400fee:	4798      	blx	r3
  400ff0:	4605      	mov	r5, r0
  400ff2:	b960      	cbnz	r0, 40100e <TWID_Read+0x122>
			if ((GetDelayInTicks(startTime, GetTicks())) > TWITIMEOUTMAX) {
  400ff4:	4b15      	ldr	r3, [pc, #84]	; (40104c <TWID_Read+0x160>)
  400ff6:	4798      	blx	r3
  400ff8:	4601      	mov	r1, r0
  400ffa:	4630      	mov	r0, r6
  400ffc:	4b15      	ldr	r3, [pc, #84]	; (401054 <TWID_Read+0x168>)
  400ffe:	4798      	blx	r3
  401000:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
  401004:	d9f1      	bls.n	400fea <TWID_Read+0xfe>
				TRACE_ERROR("TWID Timeout TC\n\r");
  401006:	4816      	ldr	r0, [pc, #88]	; (401060 <TWID_Read+0x174>)
  401008:	4b03      	ldr	r3, [pc, #12]	; (401018 <TWID_Read+0x12c>)
  40100a:	4798      	blx	r3
				break;
  40100c:	e788      	b.n	400f20 <TWID_Read+0x34>
	return 0;
  40100e:	2500      	movs	r5, #0
  401010:	e786      	b.n	400f20 <TWID_Read+0x34>
  401012:	bf00      	nop
  401014:	00408ff4 	.word	0x00408ff4
  401018:	00402c25 	.word	0x00402c25
  40101c:	00408fb4 	.word	0x00408fb4
  401020:	00408f44 	.word	0x00408f44
  401024:	00408fc4 	.word	0x00408fc4
  401028:	00402419 	.word	0x00402419
  40102c:	00408eb4 	.word	0x00408eb4
  401030:	00408ecc 	.word	0x00408ecc
  401034:	00408eec 	.word	0x00408eec
  401038:	20400a48 	.word	0x20400a48
  40103c:	00400ccd 	.word	0x00400ccd
  401040:	00400b49 	.word	0x00400b49
  401044:	00400b21 	.word	0x00400b21
  401048:	00400bdd 	.word	0x00400bdd
  40104c:	00400a39 	.word	0x00400a39
  401050:	00400cb5 	.word	0x00400cb5
  401054:	00400a05 	.word	0x00400a05
  401058:	00409024 	.word	0x00409024
  40105c:	00400cc5 	.word	0x00400cc5
  401060:	0040903c 	.word	0x0040903c

00401064 <TWID_Write>:
	uint32_t iaddress,
	uint8_t isize,
	uint8_t *pData,
	uint32_t num,
	Async *pAsync)
{
  401064:	b5f0      	push	{r4, r5, r6, r7, lr}
  401066:	b083      	sub	sp, #12
  401068:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	Twihs *pTwi = pTwid->pTwi;
  40106a:	6804      	ldr	r4, [r0, #0]
	uint32_t startTime;
	AsyncTwi *pTransfer = (AsyncTwi *) pTwid->pTransfer;
  40106c:	6846      	ldr	r6, [r0, #4]

	assert(pTwi != NULL);
  40106e:	b17c      	cbz	r4, 401090 <TWID_Write+0x2c>
	assert((address & 0x80) == 0);
  401070:	f011 0f80 	tst.w	r1, #128	; 0x80
  401074:	d113      	bne.n	40109e <TWID_Write+0x3a>
	assert((iaddress & 0xFF000000) == 0);
  401076:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  40107a:	d117      	bne.n	4010ac <TWID_Write+0x48>
	assert(isize < 4);
  40107c:	2b03      	cmp	r3, #3
  40107e:	d81c      	bhi.n	4010ba <TWID_Write+0x56>

	/* Check that no transfer is already pending */
	if (pTransfer) {
  401080:	b316      	cbz	r6, 4010c8 <TWID_Write+0x64>
		TRACE_ERROR("TWI_Write: A transfer is already pending\n\r");
  401082:	483d      	ldr	r0, [pc, #244]	; (401178 <TWID_Write+0x114>)
  401084:	4b3d      	ldr	r3, [pc, #244]	; (40117c <TWID_Write+0x118>)
  401086:	4798      	blx	r3
		return TWID_ERROR_BUSY;
  401088:	2501      	movs	r5, #1
			}
		}
	}

	return 0;
}
  40108a:	4628      	mov	r0, r5
  40108c:	b003      	add	sp, #12
  40108e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	assert(pTwi != NULL);
  401090:	4b3b      	ldr	r3, [pc, #236]	; (401180 <TWID_Write+0x11c>)
  401092:	4a3c      	ldr	r2, [pc, #240]	; (401184 <TWID_Write+0x120>)
  401094:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  401098:	483b      	ldr	r0, [pc, #236]	; (401188 <TWID_Write+0x124>)
  40109a:	4c3c      	ldr	r4, [pc, #240]	; (40118c <TWID_Write+0x128>)
  40109c:	47a0      	blx	r4
	assert((address & 0x80) == 0);
  40109e:	4b3c      	ldr	r3, [pc, #240]	; (401190 <TWID_Write+0x12c>)
  4010a0:	4a38      	ldr	r2, [pc, #224]	; (401184 <TWID_Write+0x120>)
  4010a2:	f240 11ab 	movw	r1, #427	; 0x1ab
  4010a6:	4838      	ldr	r0, [pc, #224]	; (401188 <TWID_Write+0x124>)
  4010a8:	4c38      	ldr	r4, [pc, #224]	; (40118c <TWID_Write+0x128>)
  4010aa:	47a0      	blx	r4
	assert((iaddress & 0xFF000000) == 0);
  4010ac:	4b39      	ldr	r3, [pc, #228]	; (401194 <TWID_Write+0x130>)
  4010ae:	4a35      	ldr	r2, [pc, #212]	; (401184 <TWID_Write+0x120>)
  4010b0:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
  4010b4:	4834      	ldr	r0, [pc, #208]	; (401188 <TWID_Write+0x124>)
  4010b6:	4c35      	ldr	r4, [pc, #212]	; (40118c <TWID_Write+0x128>)
  4010b8:	47a0      	blx	r4
	assert(isize < 4);
  4010ba:	4b37      	ldr	r3, [pc, #220]	; (401198 <TWID_Write+0x134>)
  4010bc:	4a31      	ldr	r2, [pc, #196]	; (401184 <TWID_Write+0x120>)
  4010be:	f240 11ad 	movw	r1, #429	; 0x1ad
  4010c2:	4831      	ldr	r0, [pc, #196]	; (401188 <TWID_Write+0x124>)
  4010c4:	4c31      	ldr	r4, [pc, #196]	; (40118c <TWID_Write+0x128>)
  4010c6:	47a0      	blx	r4
	if (pAsync) {
  4010c8:	b1a5      	cbz	r5, 4010f4 <TWID_Write+0x90>
		pTwid->pTransfer = pAsync;
  4010ca:	6045      	str	r5, [r0, #4]
		pTransfer->status = ASYNC_STATUS_PENDING;
  4010cc:	20ff      	movs	r0, #255	; 0xff
  4010ce:	7028      	strb	r0, [r5, #0]
		pTransfer->pData = pData;
  4010d0:	9808      	ldr	r0, [sp, #32]
  4010d2:	60a8      	str	r0, [r5, #8]
		pTransfer->num = num;
  4010d4:	9809      	ldr	r0, [sp, #36]	; 0x24
  4010d6:	60e8      	str	r0, [r5, #12]
		pTransfer->transferred = 1;
  4010d8:	2001      	movs	r0, #1
  4010da:	6128      	str	r0, [r5, #16]
		TWI_StartWrite(pTwi, address, iaddress, isize, *pData);
  4010dc:	9808      	ldr	r0, [sp, #32]
  4010de:	7800      	ldrb	r0, [r0, #0]
  4010e0:	9000      	str	r0, [sp, #0]
  4010e2:	4620      	mov	r0, r4
  4010e4:	4d2d      	ldr	r5, [pc, #180]	; (40119c <TWID_Write+0x138>)
  4010e6:	47a8      	blx	r5
		TWI_EnableIt(pTwi, TWIHS_IER_TXRDY);
  4010e8:	2104      	movs	r1, #4
  4010ea:	4620      	mov	r0, r4
  4010ec:	4b2c      	ldr	r3, [pc, #176]	; (4011a0 <TWID_Write+0x13c>)
  4010ee:	4798      	blx	r3
	return 0;
  4010f0:	2500      	movs	r5, #0
  4010f2:	e7ca      	b.n	40108a <TWID_Write+0x26>
		TWI_StartWrite(pTwi, address, iaddress, isize, *pData++);
  4010f4:	9808      	ldr	r0, [sp, #32]
  4010f6:	1c47      	adds	r7, r0, #1
  4010f8:	7800      	ldrb	r0, [r0, #0]
  4010fa:	9000      	str	r0, [sp, #0]
  4010fc:	4620      	mov	r0, r4
  4010fe:	4d27      	ldr	r5, [pc, #156]	; (40119c <TWID_Write+0x138>)
  401100:	47a8      	blx	r5
		num--;
  401102:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401104:	1e5e      	subs	r6, r3, #1
		while (num > 0) {
  401106:	e006      	b.n	401116 <TWID_Write+0xb2>
			TWI_WriteByte(pTwi, *pData++);
  401108:	1c7d      	adds	r5, r7, #1
  40110a:	7839      	ldrb	r1, [r7, #0]
  40110c:	4620      	mov	r0, r4
  40110e:	4b25      	ldr	r3, [pc, #148]	; (4011a4 <TWID_Write+0x140>)
  401110:	4798      	blx	r3
			num--;
  401112:	3e01      	subs	r6, #1
			TWI_WriteByte(pTwi, *pData++);
  401114:	462f      	mov	r7, r5
		while (num > 0) {
  401116:	b1a6      	cbz	r6, 401142 <TWID_Write+0xde>
			startTime = GetTicks();
  401118:	4b23      	ldr	r3, [pc, #140]	; (4011a8 <TWID_Write+0x144>)
  40111a:	4798      	blx	r3
  40111c:	4605      	mov	r5, r0
			while (!TWI_ByteSent(pTwi)) {
  40111e:	4620      	mov	r0, r4
  401120:	4b22      	ldr	r3, [pc, #136]	; (4011ac <TWID_Write+0x148>)
  401122:	4798      	blx	r3
  401124:	2800      	cmp	r0, #0
  401126:	d1ef      	bne.n	401108 <TWID_Write+0xa4>
				if ((GetDelayInTicks(startTime, GetTicks())) > TWITIMEOUTMAX) {
  401128:	4b1f      	ldr	r3, [pc, #124]	; (4011a8 <TWID_Write+0x144>)
  40112a:	4798      	blx	r3
  40112c:	4601      	mov	r1, r0
  40112e:	4628      	mov	r0, r5
  401130:	4b1f      	ldr	r3, [pc, #124]	; (4011b0 <TWID_Write+0x14c>)
  401132:	4798      	blx	r3
  401134:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
  401138:	d9f1      	bls.n	40111e <TWID_Write+0xba>
					TRACE_ERROR("TWID Timeout BS\n\r");
  40113a:	481e      	ldr	r0, [pc, #120]	; (4011b4 <TWID_Write+0x150>)
  40113c:	4b0f      	ldr	r3, [pc, #60]	; (40117c <TWID_Write+0x118>)
  40113e:	4798      	blx	r3
					break;
  401140:	e7e2      	b.n	401108 <TWID_Write+0xa4>
		startTime = GetTicks();
  401142:	4b19      	ldr	r3, [pc, #100]	; (4011a8 <TWID_Write+0x144>)
  401144:	4798      	blx	r3
  401146:	4606      	mov	r6, r0
		TWI_SendSTOPCondition(pTwi);
  401148:	4620      	mov	r0, r4
  40114a:	4b1b      	ldr	r3, [pc, #108]	; (4011b8 <TWID_Write+0x154>)
  40114c:	4798      	blx	r3
		while (!TWI_TransferComplete(pTwi)) {
  40114e:	4620      	mov	r0, r4
  401150:	4b1a      	ldr	r3, [pc, #104]	; (4011bc <TWID_Write+0x158>)
  401152:	4798      	blx	r3
  401154:	4605      	mov	r5, r0
  401156:	b960      	cbnz	r0, 401172 <TWID_Write+0x10e>
			if ((GetDelayInTicks(startTime, GetTicks())) > TWITIMEOUTMAX) {
  401158:	4b13      	ldr	r3, [pc, #76]	; (4011a8 <TWID_Write+0x144>)
  40115a:	4798      	blx	r3
  40115c:	4601      	mov	r1, r0
  40115e:	4630      	mov	r0, r6
  401160:	4b13      	ldr	r3, [pc, #76]	; (4011b0 <TWID_Write+0x14c>)
  401162:	4798      	blx	r3
  401164:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
  401168:	d9f1      	bls.n	40114e <TWID_Write+0xea>
				TRACE_ERROR("TWID Timeout TC2\n\r");
  40116a:	4815      	ldr	r0, [pc, #84]	; (4011c0 <TWID_Write+0x15c>)
  40116c:	4b03      	ldr	r3, [pc, #12]	; (40117c <TWID_Write+0x118>)
  40116e:	4798      	blx	r3
				break;
  401170:	e78b      	b.n	40108a <TWID_Write+0x26>
	return 0;
  401172:	2500      	movs	r5, #0
  401174:	e789      	b.n	40108a <TWID_Write+0x26>
  401176:	bf00      	nop
  401178:	00409054 	.word	0x00409054
  40117c:	00402c25 	.word	0x00402c25
  401180:	00408ea4 	.word	0x00408ea4
  401184:	00408f50 	.word	0x00408f50
  401188:	00408fc4 	.word	0x00408fc4
  40118c:	00402419 	.word	0x00402419
  401190:	00408eb4 	.word	0x00408eb4
  401194:	00408ecc 	.word	0x00408ecc
  401198:	00408eec 	.word	0x00408eec
  40119c:	00400c29 	.word	0x00400c29
  4011a0:	00400ccd 	.word	0x00400ccd
  4011a4:	00400c05 	.word	0x00400c05
  4011a8:	00400a39 	.word	0x00400a39
  4011ac:	00400cbd 	.word	0x00400cbd
  4011b0:	00400a05 	.word	0x00400a05
  4011b4:	00409084 	.word	0x00409084
  4011b8:	00400d81 	.word	0x00400d81
  4011bc:	00400cc5 	.word	0x00400cc5
  4011c0:	0040909c 	.word	0x0040909c

004011c4 <WDT_Disable>:
 * \note The Watchdog Mode Register (WDT_MR) can be written only once.
 * Only a processor reset resets it.
 */
extern void WDT_Disable(Wdt *pWDT)
{
	pWDT->WDT_MR = WDT_MR_WDDIS;
  4011c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4011c8:	6043      	str	r3, [r0, #4]
  4011ca:	4770      	bx	lr

004011cc <XDMAC_GetType>:
 *
 * \param pXdmac Pointer to the XDMAC peripheral.
 */
uint32_t XDMAC_GetType(Xdmac *pXdmac)
{
	assert(pXdmac);
  4011cc:	b108      	cbz	r0, 4011d2 <XDMAC_GetType+0x6>
	return pXdmac->XDMAC_GTYPE;
  4011ce:	6800      	ldr	r0, [r0, #0]
}
  4011d0:	4770      	bx	lr
{
  4011d2:	b510      	push	{r4, lr}
	assert(pXdmac);
  4011d4:	4b02      	ldr	r3, [pc, #8]	; (4011e0 <XDMAC_GetType+0x14>)
  4011d6:	4a03      	ldr	r2, [pc, #12]	; (4011e4 <XDMAC_GetType+0x18>)
  4011d8:	213d      	movs	r1, #61	; 0x3d
  4011da:	4803      	ldr	r0, [pc, #12]	; (4011e8 <XDMAC_GetType+0x1c>)
  4011dc:	4c03      	ldr	r4, [pc, #12]	; (4011ec <XDMAC_GetType+0x20>)
  4011de:	47a0      	blx	r4
  4011e0:	00409504 	.word	0x00409504
  4011e4:	00409174 	.word	0x00409174
  4011e8:	0040950c 	.word	0x0040950c
  4011ec:	00402419 	.word	0x00402419

004011f0 <XDMAC_EnableGIt>:
 * \param pXdmac Pointer to the XDMAC peripheral.
 * \param dwInteruptMask IT to be enabled.
 */
void XDMAC_EnableGIt (Xdmac *pXdmac, uint8_t dwInteruptMask)
{
	assert(pXdmac);
  4011f0:	b120      	cbz	r0, 4011fc <XDMAC_EnableGIt+0xc>
	pXdmac->XDMAC_GIE = (XDMAC_GIE_IE0 << dwInteruptMask);
  4011f2:	2301      	movs	r3, #1
  4011f4:	fa03 f101 	lsl.w	r1, r3, r1
  4011f8:	60c1      	str	r1, [r0, #12]
  4011fa:	4770      	bx	lr
{
  4011fc:	b510      	push	{r4, lr}
	assert(pXdmac);
  4011fe:	4b03      	ldr	r3, [pc, #12]	; (40120c <XDMAC_EnableGIt+0x1c>)
  401200:	4a03      	ldr	r2, [pc, #12]	; (401210 <XDMAC_EnableGIt+0x20>)
  401202:	215f      	movs	r1, #95	; 0x5f
  401204:	4803      	ldr	r0, [pc, #12]	; (401214 <XDMAC_EnableGIt+0x24>)
  401206:	4c04      	ldr	r4, [pc, #16]	; (401218 <XDMAC_EnableGIt+0x28>)
  401208:	47a0      	blx	r4
  40120a:	bf00      	nop
  40120c:	00409504 	.word	0x00409504
  401210:	004091a8 	.word	0x004091a8
  401214:	0040950c 	.word	0x0040950c
  401218:	00402419 	.word	0x00402419

0040121c <XDMAC_DisableGIt>:
 * \param pXdmac Pointer to the XDMAC peripheral.
 * \param dwInteruptMask IT to be enabled
 */
void XDMAC_DisableGIt (Xdmac *pXdmac, uint8_t dwInteruptMask)
{
	assert(pXdmac);
  40121c:	b120      	cbz	r0, 401228 <XDMAC_DisableGIt+0xc>
	pXdmac->XDMAC_GID = (XDMAC_GID_ID0 << dwInteruptMask);
  40121e:	2301      	movs	r3, #1
  401220:	fa03 f101 	lsl.w	r1, r3, r1
  401224:	6101      	str	r1, [r0, #16]
  401226:	4770      	bx	lr
{
  401228:	b510      	push	{r4, lr}
	assert(pXdmac);
  40122a:	4b03      	ldr	r3, [pc, #12]	; (401238 <XDMAC_DisableGIt+0x1c>)
  40122c:	4a03      	ldr	r2, [pc, #12]	; (40123c <XDMAC_DisableGIt+0x20>)
  40122e:	216b      	movs	r1, #107	; 0x6b
  401230:	4803      	ldr	r0, [pc, #12]	; (401240 <XDMAC_DisableGIt+0x24>)
  401232:	4c04      	ldr	r4, [pc, #16]	; (401244 <XDMAC_DisableGIt+0x28>)
  401234:	47a0      	blx	r4
  401236:	bf00      	nop
  401238:	00409504 	.word	0x00409504
  40123c:	004091b8 	.word	0x004091b8
  401240:	0040950c 	.word	0x0040950c
  401244:	00402419 	.word	0x00402419

00401248 <XDMAC_GetGIsr>:
 *
 * \param pXdmac Pointer to the XDMAC peripheral.
 */
uint32_t XDMAC_GetGIsr(Xdmac *pXdmac)
{
	assert(pXdmac);
  401248:	b108      	cbz	r0, 40124e <XDMAC_GetGIsr+0x6>
	return (pXdmac->XDMAC_GIS);
  40124a:	6980      	ldr	r0, [r0, #24]
}
  40124c:	4770      	bx	lr
{
  40124e:	b510      	push	{r4, lr}
	assert(pXdmac);
  401250:	4b02      	ldr	r3, [pc, #8]	; (40125c <XDMAC_GetGIsr+0x14>)
  401252:	4a03      	ldr	r2, [pc, #12]	; (401260 <XDMAC_GetGIsr+0x18>)
  401254:	2181      	movs	r1, #129	; 0x81
  401256:	4803      	ldr	r0, [pc, #12]	; (401264 <XDMAC_GetGIsr+0x1c>)
  401258:	4c03      	ldr	r4, [pc, #12]	; (401268 <XDMAC_GetGIsr+0x20>)
  40125a:	47a0      	blx	r4
  40125c:	00409504 	.word	0x00409504
  401260:	004091e0 	.word	0x004091e0
  401264:	0040950c 	.word	0x0040950c
  401268:	00402419 	.word	0x00402419

0040126c <XDMAC_EnableChannel>:
 *
 * \param pXdmac Pointer to the XDMAC peripheral.
 * \param channel Particular channel number.
 */
void XDMAC_EnableChannel(Xdmac *pXdmac, uint8_t channel)
{
  40126c:	b510      	push	{r4, lr}
	assert(pXdmac);
  40126e:	b130      	cbz	r0, 40127e <XDMAC_EnableChannel+0x12>
	assert(channel < XDMAC_CHANNEL_NUM);
  401270:	2917      	cmp	r1, #23
  401272:	d80a      	bhi.n	40128a <XDMAC_EnableChannel+0x1e>
	pXdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel);
  401274:	2301      	movs	r3, #1
  401276:	fa03 f101 	lsl.w	r1, r3, r1
  40127a:	61c1      	str	r1, [r0, #28]
  40127c:	bd10      	pop	{r4, pc}
	assert(pXdmac);
  40127e:	4b06      	ldr	r3, [pc, #24]	; (401298 <XDMAC_EnableChannel+0x2c>)
  401280:	4a06      	ldr	r2, [pc, #24]	; (40129c <XDMAC_EnableChannel+0x30>)
  401282:	219b      	movs	r1, #155	; 0x9b
  401284:	4806      	ldr	r0, [pc, #24]	; (4012a0 <XDMAC_EnableChannel+0x34>)
  401286:	4c07      	ldr	r4, [pc, #28]	; (4012a4 <XDMAC_EnableChannel+0x38>)
  401288:	47a0      	blx	r4
	assert(channel < XDMAC_CHANNEL_NUM);
  40128a:	4b07      	ldr	r3, [pc, #28]	; (4012a8 <XDMAC_EnableChannel+0x3c>)
  40128c:	4a03      	ldr	r2, [pc, #12]	; (40129c <XDMAC_EnableChannel+0x30>)
  40128e:	219c      	movs	r1, #156	; 0x9c
  401290:	4803      	ldr	r0, [pc, #12]	; (4012a0 <XDMAC_EnableChannel+0x34>)
  401292:	4c04      	ldr	r4, [pc, #16]	; (4012a4 <XDMAC_EnableChannel+0x38>)
  401294:	47a0      	blx	r4
  401296:	bf00      	nop
  401298:	00409504 	.word	0x00409504
  40129c:	00409204 	.word	0x00409204
  4012a0:	0040950c 	.word	0x0040950c
  4012a4:	00402419 	.word	0x00402419
  4012a8:	00409528 	.word	0x00409528

004012ac <XDMAC_DisableChannel>:
 *
 * \param pXdmac Pointer to the XDMAC peripheral.
 * \param channel Particular channel number.
 */
void XDMAC_DisableChannel(Xdmac *pXdmac, uint8_t channel)
{
  4012ac:	b510      	push	{r4, lr}
	assert(pXdmac);
  4012ae:	b130      	cbz	r0, 4012be <XDMAC_DisableChannel+0x12>
	assert(channel < XDMAC_CHANNEL_NUM);
  4012b0:	2917      	cmp	r1, #23
  4012b2:	d80a      	bhi.n	4012ca <XDMAC_DisableChannel+0x1e>
	pXdmac->XDMAC_GD = (XDMAC_GD_DI0 << channel);
  4012b4:	2301      	movs	r3, #1
  4012b6:	fa03 f101 	lsl.w	r1, r3, r1
  4012ba:	6201      	str	r1, [r0, #32]
  4012bc:	bd10      	pop	{r4, pc}
	assert(pXdmac);
  4012be:	4b06      	ldr	r3, [pc, #24]	; (4012d8 <XDMAC_DisableChannel+0x2c>)
  4012c0:	4a06      	ldr	r2, [pc, #24]	; (4012dc <XDMAC_DisableChannel+0x30>)
  4012c2:	21b4      	movs	r1, #180	; 0xb4
  4012c4:	4806      	ldr	r0, [pc, #24]	; (4012e0 <XDMAC_DisableChannel+0x34>)
  4012c6:	4c07      	ldr	r4, [pc, #28]	; (4012e4 <XDMAC_DisableChannel+0x38>)
  4012c8:	47a0      	blx	r4
	assert(channel < XDMAC_CHANNEL_NUM);
  4012ca:	4b07      	ldr	r3, [pc, #28]	; (4012e8 <XDMAC_DisableChannel+0x3c>)
  4012cc:	4a03      	ldr	r2, [pc, #12]	; (4012dc <XDMAC_DisableChannel+0x30>)
  4012ce:	21b5      	movs	r1, #181	; 0xb5
  4012d0:	4803      	ldr	r0, [pc, #12]	; (4012e0 <XDMAC_DisableChannel+0x34>)
  4012d2:	4c04      	ldr	r4, [pc, #16]	; (4012e4 <XDMAC_DisableChannel+0x38>)
  4012d4:	47a0      	blx	r4
  4012d6:	bf00      	nop
  4012d8:	00409504 	.word	0x00409504
  4012dc:	00409230 	.word	0x00409230
  4012e0:	0040950c 	.word	0x0040950c
  4012e4:	00402419 	.word	0x00402419
  4012e8:	00409528 	.word	0x00409528

004012ec <XDMAC_GetGlobalChStatus>:
   until pending transaction is completed.
 * \param pXdmac Pointer to the XDMAC peripheral.
 */
uint32_t XDMAC_GetGlobalChStatus(Xdmac *pXdmac)
{
	assert(pXdmac);
  4012ec:	b108      	cbz	r0, 4012f2 <XDMAC_GetGlobalChStatus+0x6>
	return pXdmac->XDMAC_GS;
  4012ee:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
  4012f0:	4770      	bx	lr
{
  4012f2:	b510      	push	{r4, lr}
	assert(pXdmac);
  4012f4:	4b02      	ldr	r3, [pc, #8]	; (401300 <XDMAC_GetGlobalChStatus+0x14>)
  4012f6:	4a03      	ldr	r2, [pc, #12]	; (401304 <XDMAC_GetGlobalChStatus+0x18>)
  4012f8:	21cf      	movs	r1, #207	; 0xcf
  4012fa:	4803      	ldr	r0, [pc, #12]	; (401308 <XDMAC_GetGlobalChStatus+0x1c>)
  4012fc:	4c03      	ldr	r4, [pc, #12]	; (40130c <XDMAC_GetGlobalChStatus+0x20>)
  4012fe:	47a0      	blx	r4
  401300:	00409504 	.word	0x00409504
  401304:	00409260 	.word	0x00409260
  401308:	0040950c 	.word	0x0040950c
  40130c:	00402419 	.word	0x00402419

00401310 <XDMAC_EnableChannelIt>:
 * \param channel Particular channel number.
 * \param dwInteruptMask Interrupt mask.
 */
void XDMAC_EnableChannelIt (Xdmac *pXdmac, uint8_t channel,
							uint8_t dwInteruptMask)
{
  401310:	b510      	push	{r4, lr}
	assert(pXdmac);
  401312:	b128      	cbz	r0, 401320 <XDMAC_EnableChannelIt+0x10>
	assert(channel < XDMAC_CHANNEL_NUM);
  401314:	2917      	cmp	r1, #23
  401316:	d80a      	bhi.n	40132e <XDMAC_EnableChannelIt+0x1e>
	pXdmac->XDMAC_CHID[channel].XDMAC_CIE = dwInteruptMask;
  401318:	eb00 1381 	add.w	r3, r0, r1, lsl #6
  40131c:	651a      	str	r2, [r3, #80]	; 0x50
  40131e:	bd10      	pop	{r4, pc}
	assert(pXdmac);
  401320:	4b06      	ldr	r3, [pc, #24]	; (40133c <XDMAC_EnableChannelIt+0x2c>)
  401322:	4a07      	ldr	r2, [pc, #28]	; (401340 <XDMAC_EnableChannelIt+0x30>)
  401324:	f240 113b 	movw	r1, #315	; 0x13b
  401328:	4806      	ldr	r0, [pc, #24]	; (401344 <XDMAC_EnableChannelIt+0x34>)
  40132a:	4c07      	ldr	r4, [pc, #28]	; (401348 <XDMAC_EnableChannelIt+0x38>)
  40132c:	47a0      	blx	r4
	assert(channel < XDMAC_CHANNEL_NUM);
  40132e:	4b07      	ldr	r3, [pc, #28]	; (40134c <XDMAC_EnableChannelIt+0x3c>)
  401330:	4a03      	ldr	r2, [pc, #12]	; (401340 <XDMAC_EnableChannelIt+0x30>)
  401332:	f44f 719e 	mov.w	r1, #316	; 0x13c
  401336:	4803      	ldr	r0, [pc, #12]	; (401344 <XDMAC_EnableChannelIt+0x34>)
  401338:	4c03      	ldr	r4, [pc, #12]	; (401348 <XDMAC_EnableChannelIt+0x38>)
  40133a:	47a0      	blx	r4
  40133c:	00409504 	.word	0x00409504
  401340:	0040932c 	.word	0x0040932c
  401344:	0040950c 	.word	0x0040950c
  401348:	00402419 	.word	0x00402419
  40134c:	00409528 	.word	0x00409528

00401350 <XDMAC_DisableChannelIt>:
 * \param channel Particular channel number.
 * \param dwInteruptMask Interrupt mask.
 */
void XDMAC_DisableChannelIt (Xdmac *pXdmac, uint8_t channel,
							 uint8_t dwInteruptMask)
{
  401350:	b510      	push	{r4, lr}
	assert(pXdmac);
  401352:	b128      	cbz	r0, 401360 <XDMAC_DisableChannelIt+0x10>
	assert(channel < XDMAC_CHANNEL_NUM);
  401354:	2917      	cmp	r1, #23
  401356:	d80a      	bhi.n	40136e <XDMAC_DisableChannelIt+0x1e>
	pXdmac->XDMAC_CHID[channel].XDMAC_CID = dwInteruptMask;
  401358:	eb00 1381 	add.w	r3, r0, r1, lsl #6
  40135c:	655a      	str	r2, [r3, #84]	; 0x54
  40135e:	bd10      	pop	{r4, pc}
	assert(pXdmac);
  401360:	4b06      	ldr	r3, [pc, #24]	; (40137c <XDMAC_DisableChannelIt+0x2c>)
  401362:	4a07      	ldr	r2, [pc, #28]	; (401380 <XDMAC_DisableChannelIt+0x30>)
  401364:	f44f 71a5 	mov.w	r1, #330	; 0x14a
  401368:	4806      	ldr	r0, [pc, #24]	; (401384 <XDMAC_DisableChannelIt+0x34>)
  40136a:	4c07      	ldr	r4, [pc, #28]	; (401388 <XDMAC_DisableChannelIt+0x38>)
  40136c:	47a0      	blx	r4
	assert(channel < XDMAC_CHANNEL_NUM);
  40136e:	4b07      	ldr	r3, [pc, #28]	; (40138c <XDMAC_DisableChannelIt+0x3c>)
  401370:	4a03      	ldr	r2, [pc, #12]	; (401380 <XDMAC_DisableChannelIt+0x30>)
  401372:	f240 114b 	movw	r1, #331	; 0x14b
  401376:	4803      	ldr	r0, [pc, #12]	; (401384 <XDMAC_DisableChannelIt+0x34>)
  401378:	4c03      	ldr	r4, [pc, #12]	; (401388 <XDMAC_DisableChannelIt+0x38>)
  40137a:	47a0      	blx	r4
  40137c:	00409504 	.word	0x00409504
  401380:	00409344 	.word	0x00409344
  401384:	0040950c 	.word	0x0040950c
  401388:	00402419 	.word	0x00402419
  40138c:	00409528 	.word	0x00409528

00401390 <XDMAC_GetChannelItMask>:
 *
 * \param pXdmac Pointer to the XDMAC peripheral.
 * \param channel Particular channel number.
 */
uint32_t XDMAC_GetChannelItMask (Xdmac *pXdmac, uint8_t channel)
{
  401390:	b510      	push	{r4, lr}
	assert(pXdmac);
  401392:	b128      	cbz	r0, 4013a0 <XDMAC_GetChannelItMask+0x10>
	assert(channel < XDMAC_CHANNEL_NUM);
  401394:	2917      	cmp	r1, #23
  401396:	d80a      	bhi.n	4013ae <XDMAC_GetChannelItMask+0x1e>
	return pXdmac->XDMAC_CHID[channel].XDMAC_CIM;
  401398:	eb00 1381 	add.w	r3, r0, r1, lsl #6
  40139c:	6d98      	ldr	r0, [r3, #88]	; 0x58
}
  40139e:	bd10      	pop	{r4, pc}
	assert(pXdmac);
  4013a0:	4b06      	ldr	r3, [pc, #24]	; (4013bc <XDMAC_GetChannelItMask+0x2c>)
  4013a2:	4a07      	ldr	r2, [pc, #28]	; (4013c0 <XDMAC_GetChannelItMask+0x30>)
  4013a4:	f240 1157 	movw	r1, #343	; 0x157
  4013a8:	4806      	ldr	r0, [pc, #24]	; (4013c4 <XDMAC_GetChannelItMask+0x34>)
  4013aa:	4c07      	ldr	r4, [pc, #28]	; (4013c8 <XDMAC_GetChannelItMask+0x38>)
  4013ac:	47a0      	blx	r4
	assert(channel < XDMAC_CHANNEL_NUM);
  4013ae:	4b07      	ldr	r3, [pc, #28]	; (4013cc <XDMAC_GetChannelItMask+0x3c>)
  4013b0:	4a03      	ldr	r2, [pc, #12]	; (4013c0 <XDMAC_GetChannelItMask+0x30>)
  4013b2:	f44f 71ac 	mov.w	r1, #344	; 0x158
  4013b6:	4803      	ldr	r0, [pc, #12]	; (4013c4 <XDMAC_GetChannelItMask+0x34>)
  4013b8:	4c03      	ldr	r4, [pc, #12]	; (4013c8 <XDMAC_GetChannelItMask+0x38>)
  4013ba:	47a0      	blx	r4
  4013bc:	00409504 	.word	0x00409504
  4013c0:	0040935c 	.word	0x0040935c
  4013c4:	0040950c 	.word	0x0040950c
  4013c8:	00402419 	.word	0x00402419
  4013cc:	00409528 	.word	0x00409528

004013d0 <XDMAC_GetChannelIsr>:
 *
 * \param pXdmac Pointer to the XDMAC peripheral.
 * \param channel Particular channel number.
 */
uint32_t XDMAC_GetChannelIsr (Xdmac *pXdmac, uint8_t channel)
{
  4013d0:	b510      	push	{r4, lr}
	assert(pXdmac);
  4013d2:	b128      	cbz	r0, 4013e0 <XDMAC_GetChannelIsr+0x10>
	assert(channel < XDMAC_CHANNEL_NUM);
  4013d4:	2917      	cmp	r1, #23
  4013d6:	d80a      	bhi.n	4013ee <XDMAC_GetChannelIsr+0x1e>
	return pXdmac->XDMAC_CHID[channel].XDMAC_CIS;
  4013d8:	eb00 1381 	add.w	r3, r0, r1, lsl #6
  4013dc:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
}
  4013de:	bd10      	pop	{r4, pc}
	assert(pXdmac);
  4013e0:	4b06      	ldr	r3, [pc, #24]	; (4013fc <XDMAC_GetChannelIsr+0x2c>)
  4013e2:	4a07      	ldr	r2, [pc, #28]	; (401400 <XDMAC_GetChannelIsr+0x30>)
  4013e4:	f44f 71b2 	mov.w	r1, #356	; 0x164
  4013e8:	4806      	ldr	r0, [pc, #24]	; (401404 <XDMAC_GetChannelIsr+0x34>)
  4013ea:	4c07      	ldr	r4, [pc, #28]	; (401408 <XDMAC_GetChannelIsr+0x38>)
  4013ec:	47a0      	blx	r4
	assert(channel < XDMAC_CHANNEL_NUM);
  4013ee:	4b07      	ldr	r3, [pc, #28]	; (40140c <XDMAC_GetChannelIsr+0x3c>)
  4013f0:	4a03      	ldr	r2, [pc, #12]	; (401400 <XDMAC_GetChannelIsr+0x30>)
  4013f2:	f240 1165 	movw	r1, #357	; 0x165
  4013f6:	4803      	ldr	r0, [pc, #12]	; (401404 <XDMAC_GetChannelIsr+0x34>)
  4013f8:	4c03      	ldr	r4, [pc, #12]	; (401408 <XDMAC_GetChannelIsr+0x38>)
  4013fa:	47a0      	blx	r4
  4013fc:	00409504 	.word	0x00409504
  401400:	00409374 	.word	0x00409374
  401404:	0040950c 	.word	0x0040950c
  401408:	00402419 	.word	0x00402419
  40140c:	00409528 	.word	0x00409528

00401410 <XDMAC_GetMaskChannelIsr>:
 *
 * \param pXdmac Pointer to the XDMAC peripheral.
 * \param channel Particular channel number.
 */
uint32_t XDMAC_GetMaskChannelIsr (Xdmac *pXdmac, uint8_t channel)
{
  401410:	b510      	push	{r4, lr}
	uint32_t status;
	assert(pXdmac);
  401412:	b138      	cbz	r0, 401424 <XDMAC_GetMaskChannelIsr+0x14>
	assert(channel < XDMAC_CHANNEL_NUM);
  401414:	2917      	cmp	r1, #23
  401416:	d80c      	bhi.n	401432 <XDMAC_GetMaskChannelIsr+0x22>
	status = pXdmac->XDMAC_CHID[channel].XDMAC_CIS;
  401418:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  40141c:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
	status &= pXdmac->XDMAC_CHID[channel].XDMAC_CIM;
  40141e:	6d8b      	ldr	r3, [r1, #88]	; 0x58

	return status;
}
  401420:	4018      	ands	r0, r3
  401422:	bd10      	pop	{r4, pc}
	assert(pXdmac);
  401424:	4b06      	ldr	r3, [pc, #24]	; (401440 <XDMAC_GetMaskChannelIsr+0x30>)
  401426:	4a07      	ldr	r2, [pc, #28]	; (401444 <XDMAC_GetMaskChannelIsr+0x34>)
  401428:	f44f 71b9 	mov.w	r1, #370	; 0x172
  40142c:	4806      	ldr	r0, [pc, #24]	; (401448 <XDMAC_GetMaskChannelIsr+0x38>)
  40142e:	4c07      	ldr	r4, [pc, #28]	; (40144c <XDMAC_GetMaskChannelIsr+0x3c>)
  401430:	47a0      	blx	r4
	assert(channel < XDMAC_CHANNEL_NUM);
  401432:	4b07      	ldr	r3, [pc, #28]	; (401450 <XDMAC_GetMaskChannelIsr+0x40>)
  401434:	4a03      	ldr	r2, [pc, #12]	; (401444 <XDMAC_GetMaskChannelIsr+0x34>)
  401436:	f240 1173 	movw	r1, #371	; 0x173
  40143a:	4803      	ldr	r0, [pc, #12]	; (401448 <XDMAC_GetMaskChannelIsr+0x38>)
  40143c:	4c03      	ldr	r4, [pc, #12]	; (40144c <XDMAC_GetMaskChannelIsr+0x3c>)
  40143e:	47a0      	blx	r4
  401440:	00409504 	.word	0x00409504
  401444:	004093a0 	.word	0x004093a0
  401448:	0040950c 	.word	0x0040950c
  40144c:	00402419 	.word	0x00402419
  401450:	00409528 	.word	0x00409528

00401454 <XDMAC_SetSourceAddr>:
 * \param pXdmac Pointer to the XDMAC peripheral.
 * \param channel Particular channel number.
 * \param addr Source address.
 */
void XDMAC_SetSourceAddr(Xdmac *pXdmac, uint8_t channel, uint32_t addr)
{
  401454:	b510      	push	{r4, lr}
	assert(pXdmac);
  401456:	b128      	cbz	r0, 401464 <XDMAC_SetSourceAddr+0x10>
	assert(channel < XDMAC_CHANNEL_NUM);
  401458:	2917      	cmp	r1, #23
  40145a:	d80a      	bhi.n	401472 <XDMAC_SetSourceAddr+0x1e>
	pXdmac->XDMAC_CHID[channel].XDMAC_CSA = addr;
  40145c:	eb00 1381 	add.w	r3, r0, r1, lsl #6
  401460:	661a      	str	r2, [r3, #96]	; 0x60
  401462:	bd10      	pop	{r4, pc}
	assert(pXdmac);
  401464:	4b06      	ldr	r3, [pc, #24]	; (401480 <XDMAC_SetSourceAddr+0x2c>)
  401466:	4a07      	ldr	r2, [pc, #28]	; (401484 <XDMAC_SetSourceAddr+0x30>)
  401468:	f240 1183 	movw	r1, #387	; 0x183
  40146c:	4806      	ldr	r0, [pc, #24]	; (401488 <XDMAC_SetSourceAddr+0x34>)
  40146e:	4c07      	ldr	r4, [pc, #28]	; (40148c <XDMAC_SetSourceAddr+0x38>)
  401470:	47a0      	blx	r4
	assert(channel < XDMAC_CHANNEL_NUM);
  401472:	4b07      	ldr	r3, [pc, #28]	; (401490 <XDMAC_SetSourceAddr+0x3c>)
  401474:	4a03      	ldr	r2, [pc, #12]	; (401484 <XDMAC_SetSourceAddr+0x30>)
  401476:	f44f 71c2 	mov.w	r1, #388	; 0x184
  40147a:	4803      	ldr	r0, [pc, #12]	; (401488 <XDMAC_SetSourceAddr+0x34>)
  40147c:	4c03      	ldr	r4, [pc, #12]	; (40148c <XDMAC_SetSourceAddr+0x38>)
  40147e:	47a0      	blx	r4
  401480:	00409504 	.word	0x00409504
  401484:	004093b8 	.word	0x004093b8
  401488:	0040950c 	.word	0x0040950c
  40148c:	00402419 	.word	0x00402419
  401490:	00409528 	.word	0x00409528

00401494 <XDMAC_SetDestinationAddr>:
 * \param pXdmac Pointer to the XDMAC peripheral.
 * \param channel Particular channel number.
 * \param addr Destination address.
 */
void XDMAC_SetDestinationAddr(Xdmac *pXdmac, uint8_t channel, uint32_t addr)
{
  401494:	b510      	push	{r4, lr}
	assert(pXdmac);
  401496:	b128      	cbz	r0, 4014a4 <XDMAC_SetDestinationAddr+0x10>
	assert(channel < XDMAC_CHANNEL_NUM);
  401498:	2917      	cmp	r1, #23
  40149a:	d80a      	bhi.n	4014b2 <XDMAC_SetDestinationAddr+0x1e>
	pXdmac->XDMAC_CHID[channel].XDMAC_CDA = addr;
  40149c:	eb00 1381 	add.w	r3, r0, r1, lsl #6
  4014a0:	665a      	str	r2, [r3, #100]	; 0x64
  4014a2:	bd10      	pop	{r4, pc}
	assert(pXdmac);
  4014a4:	4b06      	ldr	r3, [pc, #24]	; (4014c0 <XDMAC_SetDestinationAddr+0x2c>)
  4014a6:	4a07      	ldr	r2, [pc, #28]	; (4014c4 <XDMAC_SetDestinationAddr+0x30>)
  4014a8:	f240 1191 	movw	r1, #401	; 0x191
  4014ac:	4806      	ldr	r0, [pc, #24]	; (4014c8 <XDMAC_SetDestinationAddr+0x34>)
  4014ae:	4c07      	ldr	r4, [pc, #28]	; (4014cc <XDMAC_SetDestinationAddr+0x38>)
  4014b0:	47a0      	blx	r4
	assert(channel < XDMAC_CHANNEL_NUM);
  4014b2:	4b07      	ldr	r3, [pc, #28]	; (4014d0 <XDMAC_SetDestinationAddr+0x3c>)
  4014b4:	4a03      	ldr	r2, [pc, #12]	; (4014c4 <XDMAC_SetDestinationAddr+0x30>)
  4014b6:	f44f 71c9 	mov.w	r1, #402	; 0x192
  4014ba:	4803      	ldr	r0, [pc, #12]	; (4014c8 <XDMAC_SetDestinationAddr+0x34>)
  4014bc:	4c03      	ldr	r4, [pc, #12]	; (4014cc <XDMAC_SetDestinationAddr+0x38>)
  4014be:	47a0      	blx	r4
  4014c0:	00409504 	.word	0x00409504
  4014c4:	004093cc 	.word	0x004093cc
  4014c8:	0040950c 	.word	0x0040950c
  4014cc:	00402419 	.word	0x00402419
  4014d0:	00409528 	.word	0x00409528

004014d4 <XDMAC_SetDescriptorAddr>:
 * \param addr Address of next descriptor.
 * \param ndaif Interface of next descriptor.
 */
void XDMAC_SetDescriptorAddr(Xdmac *pXdmac, uint8_t channel,
							 uint32_t addr, uint8_t ndaif)
{
  4014d4:	b510      	push	{r4, lr}
	assert(pXdmac);
  4014d6:	b150      	cbz	r0, 4014ee <XDMAC_SetDescriptorAddr+0x1a>
	assert(ndaif < 2);
  4014d8:	2b01      	cmp	r3, #1
  4014da:	d80f      	bhi.n	4014fc <XDMAC_SetDescriptorAddr+0x28>
	assert(channel < XDMAC_CHANNEL_NUM);
  4014dc:	2917      	cmp	r1, #23
  4014de:	d814      	bhi.n	40150a <XDMAC_SetDescriptorAddr+0x36>
	pXdmac->XDMAC_CHID[channel].XDMAC_CNDA =  (addr & 0xFFFFFFFC) | ndaif;
  4014e0:	f022 0203 	bic.w	r2, r2, #3
  4014e4:	4313      	orrs	r3, r2
  4014e6:	eb00 1481 	add.w	r4, r0, r1, lsl #6
  4014ea:	66a3      	str	r3, [r4, #104]	; 0x68
  4014ec:	bd10      	pop	{r4, pc}
	assert(pXdmac);
  4014ee:	4b0a      	ldr	r3, [pc, #40]	; (401518 <XDMAC_SetDescriptorAddr+0x44>)
  4014f0:	4a0a      	ldr	r2, [pc, #40]	; (40151c <XDMAC_SetDescriptorAddr+0x48>)
  4014f2:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
  4014f6:	480a      	ldr	r0, [pc, #40]	; (401520 <XDMAC_SetDescriptorAddr+0x4c>)
  4014f8:	4c0a      	ldr	r4, [pc, #40]	; (401524 <XDMAC_SetDescriptorAddr+0x50>)
  4014fa:	47a0      	blx	r4
	assert(ndaif < 2);
  4014fc:	4b0a      	ldr	r3, [pc, #40]	; (401528 <XDMAC_SetDescriptorAddr+0x54>)
  4014fe:	4a07      	ldr	r2, [pc, #28]	; (40151c <XDMAC_SetDescriptorAddr+0x48>)
  401500:	f240 11a3 	movw	r1, #419	; 0x1a3
  401504:	4806      	ldr	r0, [pc, #24]	; (401520 <XDMAC_SetDescriptorAddr+0x4c>)
  401506:	4c07      	ldr	r4, [pc, #28]	; (401524 <XDMAC_SetDescriptorAddr+0x50>)
  401508:	47a0      	blx	r4
	assert(channel < XDMAC_CHANNEL_NUM);
  40150a:	4b08      	ldr	r3, [pc, #32]	; (40152c <XDMAC_SetDescriptorAddr+0x58>)
  40150c:	4a03      	ldr	r2, [pc, #12]	; (40151c <XDMAC_SetDescriptorAddr+0x48>)
  40150e:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
  401512:	4803      	ldr	r0, [pc, #12]	; (401520 <XDMAC_SetDescriptorAddr+0x4c>)
  401514:	4c03      	ldr	r4, [pc, #12]	; (401524 <XDMAC_SetDescriptorAddr+0x50>)
  401516:	47a0      	blx	r4
  401518:	00409504 	.word	0x00409504
  40151c:	004093e8 	.word	0x004093e8
  401520:	0040950c 	.word	0x0040950c
  401524:	00402419 	.word	0x00402419
  401528:	00409544 	.word	0x00409544
  40152c:	00409528 	.word	0x00409528

00401530 <XDMAC_SetDescriptorControl>:
 * \param pXdmac Pointer to the XDMAC peripheral.
 * \param channel Particular channel number.
 * \param config Configuration of next descriptor.
 */
void XDMAC_SetDescriptorControl(Xdmac *pXdmac, uint8_t channel, uint8_t config)
{
  401530:	b510      	push	{r4, lr}
	assert(pXdmac);
  401532:	b128      	cbz	r0, 401540 <XDMAC_SetDescriptorControl+0x10>
	assert(channel < XDMAC_CHANNEL_NUM);
  401534:	2917      	cmp	r1, #23
  401536:	d80a      	bhi.n	40154e <XDMAC_SetDescriptorControl+0x1e>
	pXdmac->XDMAC_CHID[channel].XDMAC_CNDC = config;
  401538:	eb00 1381 	add.w	r3, r0, r1, lsl #6
  40153c:	66da      	str	r2, [r3, #108]	; 0x6c
  40153e:	bd10      	pop	{r4, pc}
	assert(pXdmac);
  401540:	4b06      	ldr	r3, [pc, #24]	; (40155c <XDMAC_SetDescriptorControl+0x2c>)
  401542:	4a07      	ldr	r2, [pc, #28]	; (401560 <XDMAC_SetDescriptorControl+0x30>)
  401544:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
  401548:	4806      	ldr	r0, [pc, #24]	; (401564 <XDMAC_SetDescriptorControl+0x34>)
  40154a:	4c07      	ldr	r4, [pc, #28]	; (401568 <XDMAC_SetDescriptorControl+0x38>)
  40154c:	47a0      	blx	r4
	assert(channel < XDMAC_CHANNEL_NUM);
  40154e:	4b07      	ldr	r3, [pc, #28]	; (40156c <XDMAC_SetDescriptorControl+0x3c>)
  401550:	4a03      	ldr	r2, [pc, #12]	; (401560 <XDMAC_SetDescriptorControl+0x30>)
  401552:	f240 11b3 	movw	r1, #435	; 0x1b3
  401556:	4803      	ldr	r0, [pc, #12]	; (401564 <XDMAC_SetDescriptorControl+0x34>)
  401558:	4c03      	ldr	r4, [pc, #12]	; (401568 <XDMAC_SetDescriptorControl+0x38>)
  40155a:	47a0      	blx	r4
  40155c:	00409504 	.word	0x00409504
  401560:	00409400 	.word	0x00409400
  401564:	0040950c 	.word	0x0040950c
  401568:	00402419 	.word	0x00402419
  40156c:	00409528 	.word	0x00409528

00401570 <XDMAC_SetMicroblockControl>:
 * \param pXdmac Pointer to the XDMAC peripheral.
 * \param channel Particular channel number.
 * \param ublen Microblock length.
 */
void XDMAC_SetMicroblockControl(Xdmac *pXdmac, uint8_t channel, uint32_t ublen)
{
  401570:	b510      	push	{r4, lr}
	assert(pXdmac);
  401572:	b138      	cbz	r0, 401584 <XDMAC_SetMicroblockControl+0x14>
	assert(channel < XDMAC_CHANNEL_NUM);
  401574:	2917      	cmp	r1, #23
  401576:	d80c      	bhi.n	401592 <XDMAC_SetMicroblockControl+0x22>
	pXdmac->XDMAC_CHID[channel].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  401578:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
  40157c:	eb00 1381 	add.w	r3, r0, r1, lsl #6
  401580:	671a      	str	r2, [r3, #112]	; 0x70
  401582:	bd10      	pop	{r4, pc}
	assert(pXdmac);
  401584:	4b06      	ldr	r3, [pc, #24]	; (4015a0 <XDMAC_SetMicroblockControl+0x30>)
  401586:	4a07      	ldr	r2, [pc, #28]	; (4015a4 <XDMAC_SetMicroblockControl+0x34>)
  401588:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
  40158c:	4806      	ldr	r0, [pc, #24]	; (4015a8 <XDMAC_SetMicroblockControl+0x38>)
  40158e:	4c07      	ldr	r4, [pc, #28]	; (4015ac <XDMAC_SetMicroblockControl+0x3c>)
  401590:	47a0      	blx	r4
	assert(channel < XDMAC_CHANNEL_NUM);
  401592:	4b07      	ldr	r3, [pc, #28]	; (4015b0 <XDMAC_SetMicroblockControl+0x40>)
  401594:	4a03      	ldr	r2, [pc, #12]	; (4015a4 <XDMAC_SetMicroblockControl+0x34>)
  401596:	f240 11c1 	movw	r1, #449	; 0x1c1
  40159a:	4803      	ldr	r0, [pc, #12]	; (4015a8 <XDMAC_SetMicroblockControl+0x38>)
  40159c:	4c03      	ldr	r4, [pc, #12]	; (4015ac <XDMAC_SetMicroblockControl+0x3c>)
  40159e:	47a0      	blx	r4
  4015a0:	00409504 	.word	0x00409504
  4015a4:	0040941c 	.word	0x0040941c
  4015a8:	0040950c 	.word	0x0040950c
  4015ac:	00402419 	.word	0x00402419
  4015b0:	00409528 	.word	0x00409528

004015b4 <XDMAC_SetBlockControl>:
 * \param pXdmac Pointer to the XDMAC peripheral.
 * \param channel Particular channel number.
 * \param blen Block length.
 */
void XDMAC_SetBlockControl(Xdmac *pXdmac, uint8_t channel, uint16_t blen)
{
  4015b4:	b510      	push	{r4, lr}
	assert(pXdmac);
  4015b6:	b138      	cbz	r0, 4015c8 <XDMAC_SetBlockControl+0x14>
	assert(channel < XDMAC_CHANNEL_NUM);
  4015b8:	2917      	cmp	r1, #23
  4015ba:	d80c      	bhi.n	4015d6 <XDMAC_SetBlockControl+0x22>
	pXdmac->XDMAC_CHID[channel].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  4015bc:	f3c2 020b 	ubfx	r2, r2, #0, #12
  4015c0:	eb00 1381 	add.w	r3, r0, r1, lsl #6
  4015c4:	675a      	str	r2, [r3, #116]	; 0x74
  4015c6:	bd10      	pop	{r4, pc}
	assert(pXdmac);
  4015c8:	4b06      	ldr	r3, [pc, #24]	; (4015e4 <XDMAC_SetBlockControl+0x30>)
  4015ca:	4a07      	ldr	r2, [pc, #28]	; (4015e8 <XDMAC_SetBlockControl+0x34>)
  4015cc:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
  4015d0:	4806      	ldr	r0, [pc, #24]	; (4015ec <XDMAC_SetBlockControl+0x38>)
  4015d2:	4c07      	ldr	r4, [pc, #28]	; (4015f0 <XDMAC_SetBlockControl+0x3c>)
  4015d4:	47a0      	blx	r4
	assert(channel < XDMAC_CHANNEL_NUM);
  4015d6:	4b07      	ldr	r3, [pc, #28]	; (4015f4 <XDMAC_SetBlockControl+0x40>)
  4015d8:	4a03      	ldr	r2, [pc, #12]	; (4015e8 <XDMAC_SetBlockControl+0x34>)
  4015da:	f240 11cf 	movw	r1, #463	; 0x1cf
  4015de:	4803      	ldr	r0, [pc, #12]	; (4015ec <XDMAC_SetBlockControl+0x38>)
  4015e0:	4c03      	ldr	r4, [pc, #12]	; (4015f0 <XDMAC_SetBlockControl+0x3c>)
  4015e2:	47a0      	blx	r4
  4015e4:	00409504 	.word	0x00409504
  4015e8:	00409438 	.word	0x00409438
  4015ec:	0040950c 	.word	0x0040950c
  4015f0:	00402419 	.word	0x00402419
  4015f4:	00409528 	.word	0x00409528

004015f8 <XDMAC_SetChannelConfig>:
 * \param pXdmac Pointer to the XDMAC peripheral.
 * \param channel Particular channel number.
 * \param config Channel configuration.
 */
void XDMAC_SetChannelConfig(Xdmac *pXdmac, uint8_t channel, uint32_t config)
{
  4015f8:	b510      	push	{r4, lr}
	assert(pXdmac);
  4015fa:	b128      	cbz	r0, 401608 <XDMAC_SetChannelConfig+0x10>
	assert(channel < XDMAC_CHANNEL_NUM);
  4015fc:	2917      	cmp	r1, #23
  4015fe:	d80a      	bhi.n	401616 <XDMAC_SetChannelConfig+0x1e>
	pXdmac->XDMAC_CHID[channel].XDMAC_CC = config;
  401600:	eb00 1381 	add.w	r3, r0, r1, lsl #6
  401604:	679a      	str	r2, [r3, #120]	; 0x78
  401606:	bd10      	pop	{r4, pc}
	assert(pXdmac);
  401608:	4b06      	ldr	r3, [pc, #24]	; (401624 <XDMAC_SetChannelConfig+0x2c>)
  40160a:	4a07      	ldr	r2, [pc, #28]	; (401628 <XDMAC_SetChannelConfig+0x30>)
  40160c:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
  401610:	4806      	ldr	r0, [pc, #24]	; (40162c <XDMAC_SetChannelConfig+0x34>)
  401612:	4c07      	ldr	r4, [pc, #28]	; (401630 <XDMAC_SetChannelConfig+0x38>)
  401614:	47a0      	blx	r4
	assert(channel < XDMAC_CHANNEL_NUM);
  401616:	4b07      	ldr	r3, [pc, #28]	; (401634 <XDMAC_SetChannelConfig+0x3c>)
  401618:	4a03      	ldr	r2, [pc, #12]	; (401628 <XDMAC_SetChannelConfig+0x30>)
  40161a:	f240 11dd 	movw	r1, #477	; 0x1dd
  40161e:	4803      	ldr	r0, [pc, #12]	; (40162c <XDMAC_SetChannelConfig+0x34>)
  401620:	4c03      	ldr	r4, [pc, #12]	; (401630 <XDMAC_SetChannelConfig+0x38>)
  401622:	47a0      	blx	r4
  401624:	00409504 	.word	0x00409504
  401628:	00409450 	.word	0x00409450
  40162c:	0040950c 	.word	0x0040950c
  401630:	00402419 	.word	0x00402419
  401634:	00409528 	.word	0x00409528

00401638 <XDMAC_SetDataStride_MemPattern>:
 * \param channel Particular channel number.
 * \param dds_msp Data stride memory pattern.
 */
void XDMAC_SetDataStride_MemPattern(Xdmac *pXdmac, uint8_t channel,
									uint32_t dds_msp)
{
  401638:	b510      	push	{r4, lr}

	assert(pXdmac);
  40163a:	b128      	cbz	r0, 401648 <XDMAC_SetDataStride_MemPattern+0x10>
	assert(channel < XDMAC_CHANNEL_NUM);
  40163c:	2917      	cmp	r1, #23
  40163e:	d80a      	bhi.n	401656 <XDMAC_SetDataStride_MemPattern+0x1e>
	pXdmac->XDMAC_CHID[channel].XDMAC_CDS_MSP = dds_msp;
  401640:	eb00 1381 	add.w	r3, r0, r1, lsl #6
  401644:	67da      	str	r2, [r3, #124]	; 0x7c
  401646:	bd10      	pop	{r4, pc}
	assert(pXdmac);
  401648:	4b06      	ldr	r3, [pc, #24]	; (401664 <XDMAC_SetDataStride_MemPattern+0x2c>)
  40164a:	4a07      	ldr	r2, [pc, #28]	; (401668 <XDMAC_SetDataStride_MemPattern+0x30>)
  40164c:	f240 11f9 	movw	r1, #505	; 0x1f9
  401650:	4806      	ldr	r0, [pc, #24]	; (40166c <XDMAC_SetDataStride_MemPattern+0x34>)
  401652:	4c07      	ldr	r4, [pc, #28]	; (401670 <XDMAC_SetDataStride_MemPattern+0x38>)
  401654:	47a0      	blx	r4
	assert(channel < XDMAC_CHANNEL_NUM);
  401656:	4b07      	ldr	r3, [pc, #28]	; (401674 <XDMAC_SetDataStride_MemPattern+0x3c>)
  401658:	4a03      	ldr	r2, [pc, #12]	; (401668 <XDMAC_SetDataStride_MemPattern+0x30>)
  40165a:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
  40165e:	4803      	ldr	r0, [pc, #12]	; (40166c <XDMAC_SetDataStride_MemPattern+0x34>)
  401660:	4c03      	ldr	r4, [pc, #12]	; (401670 <XDMAC_SetDataStride_MemPattern+0x38>)
  401662:	47a0      	blx	r4
  401664:	00409504 	.word	0x00409504
  401668:	00409480 	.word	0x00409480
  40166c:	0040950c 	.word	0x0040950c
  401670:	00402419 	.word	0x00402419
  401674:	00409528 	.word	0x00409528

00401678 <XDMAC_SetSourceMicroBlockStride>:
 * \param channel Particular channel number.
 * \param subs Source microblock stride.
 */
void XDMAC_SetSourceMicroBlockStride(Xdmac *pXdmac, uint8_t channel,
									 uint32_t subs)
{
  401678:	b510      	push	{r4, lr}
	assert(pXdmac);
  40167a:	b138      	cbz	r0, 40168c <XDMAC_SetSourceMicroBlockStride+0x14>
	assert(channel < XDMAC_CHANNEL_NUM);
  40167c:	2917      	cmp	r1, #23
  40167e:	d80c      	bhi.n	40169a <XDMAC_SetSourceMicroBlockStride+0x22>
	pXdmac->XDMAC_CHID[channel].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  401680:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
  401684:	3102      	adds	r1, #2
  401686:	0189      	lsls	r1, r1, #6
  401688:	5042      	str	r2, [r0, r1]
  40168a:	bd10      	pop	{r4, pc}
	assert(pXdmac);
  40168c:	4b06      	ldr	r3, [pc, #24]	; (4016a8 <XDMAC_SetSourceMicroBlockStride+0x30>)
  40168e:	4a07      	ldr	r2, [pc, #28]	; (4016ac <XDMAC_SetSourceMicroBlockStride+0x34>)
  401690:	f44f 7102 	mov.w	r1, #520	; 0x208
  401694:	4806      	ldr	r0, [pc, #24]	; (4016b0 <XDMAC_SetSourceMicroBlockStride+0x38>)
  401696:	4c07      	ldr	r4, [pc, #28]	; (4016b4 <XDMAC_SetSourceMicroBlockStride+0x3c>)
  401698:	47a0      	blx	r4
	assert(channel < XDMAC_CHANNEL_NUM);
  40169a:	4b07      	ldr	r3, [pc, #28]	; (4016b8 <XDMAC_SetSourceMicroBlockStride+0x40>)
  40169c:	4a03      	ldr	r2, [pc, #12]	; (4016ac <XDMAC_SetSourceMicroBlockStride+0x34>)
  40169e:	f240 2109 	movw	r1, #521	; 0x209
  4016a2:	4803      	ldr	r0, [pc, #12]	; (4016b0 <XDMAC_SetSourceMicroBlockStride+0x38>)
  4016a4:	4c03      	ldr	r4, [pc, #12]	; (4016b4 <XDMAC_SetSourceMicroBlockStride+0x3c>)
  4016a6:	47a0      	blx	r4
  4016a8:	00409504 	.word	0x00409504
  4016ac:	004094a0 	.word	0x004094a0
  4016b0:	0040950c 	.word	0x0040950c
  4016b4:	00402419 	.word	0x00402419
  4016b8:	00409528 	.word	0x00409528

004016bc <XDMAC_SetDestinationMicroBlockStride>:
 * \param channel Particular channel number.
 * \param dubs Destination microblock stride.
 */
void XDMAC_SetDestinationMicroBlockStride(Xdmac *pXdmac, uint8_t channel,
		uint32_t dubs)
{
  4016bc:	b510      	push	{r4, lr}
	assert(pXdmac);
  4016be:	b140      	cbz	r0, 4016d2 <XDMAC_SetDestinationMicroBlockStride+0x16>
	assert(channel < XDMAC_CHANNEL_NUM);
  4016c0:	2917      	cmp	r1, #23
  4016c2:	d80d      	bhi.n	4016e0 <XDMAC_SetDestinationMicroBlockStride+0x24>
	pXdmac->XDMAC_CHID[channel].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  4016c4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
  4016c8:	3102      	adds	r1, #2
  4016ca:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4016ce:	604a      	str	r2, [r1, #4]
  4016d0:	bd10      	pop	{r4, pc}
	assert(pXdmac);
  4016d2:	4b07      	ldr	r3, [pc, #28]	; (4016f0 <XDMAC_SetDestinationMicroBlockStride+0x34>)
  4016d4:	4a07      	ldr	r2, [pc, #28]	; (4016f4 <XDMAC_SetDestinationMicroBlockStride+0x38>)
  4016d6:	f240 2117 	movw	r1, #535	; 0x217
  4016da:	4807      	ldr	r0, [pc, #28]	; (4016f8 <XDMAC_SetDestinationMicroBlockStride+0x3c>)
  4016dc:	4c07      	ldr	r4, [pc, #28]	; (4016fc <XDMAC_SetDestinationMicroBlockStride+0x40>)
  4016de:	47a0      	blx	r4
	assert(channel < XDMAC_CHANNEL_NUM);
  4016e0:	4b07      	ldr	r3, [pc, #28]	; (401700 <XDMAC_SetDestinationMicroBlockStride+0x44>)
  4016e2:	4a04      	ldr	r2, [pc, #16]	; (4016f4 <XDMAC_SetDestinationMicroBlockStride+0x38>)
  4016e4:	f44f 7106 	mov.w	r1, #536	; 0x218
  4016e8:	4803      	ldr	r0, [pc, #12]	; (4016f8 <XDMAC_SetDestinationMicroBlockStride+0x3c>)
  4016ea:	4c04      	ldr	r4, [pc, #16]	; (4016fc <XDMAC_SetDestinationMicroBlockStride+0x40>)
  4016ec:	47a0      	blx	r4
  4016ee:	bf00      	nop
  4016f0:	00409504 	.word	0x00409504
  4016f4:	004094c0 	.word	0x004094c0
  4016f8:	0040950c 	.word	0x0040950c
  4016fc:	00402419 	.word	0x00402419
  401700:	00409528 	.word	0x00409528

00401704 <XDMAD_AllocateXdmacChannel>:
		uint8_t bDstID)
{
	uint32_t i;

	/* Can't support peripheral to peripheral */
	if (((bSrcID != XDMAD_TRANSFER_MEMORY)
  401704:	29ff      	cmp	r1, #255	; 0xff
  401706:	bf18      	it	ne
  401708:	2aff      	cmpne	r2, #255	; 0xff
  40170a:	d002      	beq.n	401712 <XDMAD_AllocateXdmacChannel+0xe>
		 && (bDstID != XDMAD_TRANSFER_MEMORY)))
		return XDMAD_ALLOC_FAILED;
  40170c:	f64f 70ff 	movw	r0, #65535	; 0xffff
  401710:	4770      	bx	lr
{
  401712:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401716:	4616      	mov	r6, r2
  401718:	460f      	mov	r7, r1
  40171a:	4605      	mov	r5, r0

	/* dma transfer from peripheral to memory */
	if (bDstID == XDMAD_TRANSFER_MEMORY) {
  40171c:	2aff      	cmp	r2, #255	; 0xff
  40171e:	d00c      	beq.n	40173a <XDMAD_AllocateXdmacChannel+0x36>
			return XDMAD_ALLOC_FAILED;
		}
	}

	/* dma transfer from memory to peripheral */
	if (bSrcID == XDMAD_TRANSFER_MEMORY) {
  401720:	2fff      	cmp	r7, #255	; 0xff
  401722:	d017      	beq.n	401754 <XDMAD_AllocateXdmacChannel+0x50>
			TRACE_ERROR("%s:: Allocation failed", __FUNCTION__);
			return XDMAD_ALLOC_FAILED;
		}
	}

	for (i = 0; i < pXdmad->numChannels; i ++) {
  401724:	2400      	movs	r4, #0
  401726:	f895 3185 	ldrb.w	r3, [r5, #389]	; 0x185
  40172a:	429c      	cmp	r4, r3
  40172c:	d23c      	bcs.n	4017a8 <XDMAD_AllocateXdmacChannel+0xa4>
		if (pXdmad->XdmaChannels[i].state == XDMAD_STATE_FREE) {
  40172e:	eb05 1304 	add.w	r3, r5, r4, lsl #4
  401732:	7cdb      	ldrb	r3, [r3, #19]
  401734:	b1db      	cbz	r3, 40176e <XDMAD_AllocateXdmacChannel+0x6a>
	for (i = 0; i < pXdmad->numChannels; i ++) {
  401736:	3401      	adds	r4, #1
  401738:	e7f5      	b.n	401726 <XDMAD_AllocateXdmacChannel+0x22>
		if ((!XDMAIF_IsValidatedPeripherOnDma(bSrcID))) {
  40173a:	4608      	mov	r0, r1
  40173c:	4b1e      	ldr	r3, [pc, #120]	; (4017b8 <XDMAD_AllocateXdmacChannel+0xb4>)
  40173e:	4798      	blx	r3
  401740:	2800      	cmp	r0, #0
  401742:	d1ed      	bne.n	401720 <XDMAD_AllocateXdmacChannel+0x1c>
			TRACE_ERROR("%s:: Allocation failed", __FUNCTION__);
  401744:	491d      	ldr	r1, [pc, #116]	; (4017bc <XDMAD_AllocateXdmacChannel+0xb8>)
  401746:	481e      	ldr	r0, [pc, #120]	; (4017c0 <XDMAD_AllocateXdmacChannel+0xbc>)
  401748:	4b1e      	ldr	r3, [pc, #120]	; (4017c4 <XDMAD_AllocateXdmacChannel+0xc0>)
  40174a:	4798      	blx	r3
			return XDMAD_ALLOC_FAILED;
  40174c:	f64f 70ff 	movw	r0, #65535	; 0xffff
  401750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if ((!XDMAIF_IsValidatedPeripherOnDma(bDstID))) {
  401754:	4630      	mov	r0, r6
  401756:	4b18      	ldr	r3, [pc, #96]	; (4017b8 <XDMAD_AllocateXdmacChannel+0xb4>)
  401758:	4798      	blx	r3
  40175a:	2800      	cmp	r0, #0
  40175c:	d1e2      	bne.n	401724 <XDMAD_AllocateXdmacChannel+0x20>
			TRACE_ERROR("%s:: Allocation failed", __FUNCTION__);
  40175e:	4917      	ldr	r1, [pc, #92]	; (4017bc <XDMAD_AllocateXdmacChannel+0xb8>)
  401760:	4817      	ldr	r0, [pc, #92]	; (4017c0 <XDMAD_AllocateXdmacChannel+0xbc>)
  401762:	4b18      	ldr	r3, [pc, #96]	; (4017c4 <XDMAD_AllocateXdmacChannel+0xc0>)
  401764:	4798      	blx	r3
			return XDMAD_ALLOC_FAILED;
  401766:	f64f 70ff 	movw	r0, #65535	; 0xffff
  40176a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			/* Allocate the channel */
			pXdmad->XdmaChannels[i].state = XDMAD_STATE_ALLOCATED;
  40176e:	eb05 1504 	add.w	r5, r5, r4, lsl #4
  401772:	f04f 0901 	mov.w	r9, #1
  401776:	f885 9013 	strb.w	r9, [r5, #19]
			/* Get general informations */
			pXdmad->XdmaChannels[i].bSrcPeriphID = bSrcID;
  40177a:	736f      	strb	r7, [r5, #13]
			pXdmad->XdmaChannels[i].bDstPeriphID = bDstID;
  40177c:	73ae      	strb	r6, [r5, #14]
			pXdmad->XdmaChannels[i].bSrcTxIfID =
				XDMAIF_Get_ChannelNumber(bSrcID, 0);
  40177e:	2100      	movs	r1, #0
  401780:	4638      	mov	r0, r7
  401782:	f8df 8048 	ldr.w	r8, [pc, #72]	; 4017cc <XDMAD_AllocateXdmacChannel+0xc8>
  401786:	47c0      	blx	r8
			pXdmad->XdmaChannels[i].bSrcTxIfID =
  401788:	73e8      	strb	r0, [r5, #15]
			pXdmad->XdmaChannels[i].bSrcRxIfID =
				XDMAIF_Get_ChannelNumber(bSrcID, 1);
  40178a:	4649      	mov	r1, r9
  40178c:	4638      	mov	r0, r7
  40178e:	47c0      	blx	r8
			pXdmad->XdmaChannels[i].bSrcRxIfID =
  401790:	7428      	strb	r0, [r5, #16]
			pXdmad->XdmaChannels[i].bDstTxIfID =
				XDMAIF_Get_ChannelNumber(bDstID, 0);
  401792:	2100      	movs	r1, #0
  401794:	4630      	mov	r0, r6
  401796:	47c0      	blx	r8
			pXdmad->XdmaChannels[i].bDstTxIfID =
  401798:	7468      	strb	r0, [r5, #17]
			pXdmad->XdmaChannels[i].bDstRxIfID =
				XDMAIF_Get_ChannelNumber(bDstID, 1);
  40179a:	4649      	mov	r1, r9
  40179c:	4630      	mov	r0, r6
  40179e:	47c0      	blx	r8
			pXdmad->XdmaChannels[i].bDstRxIfID =
  4017a0:	74a8      	strb	r0, [r5, #18]
			return  ((i) & 0xFF);
  4017a2:	b2e0      	uxtb	r0, r4
  4017a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		}
	}

	TRACE_ERROR("%s:: Allocation failed, all channels are occupied", __FUNCTION__);
  4017a8:	4904      	ldr	r1, [pc, #16]	; (4017bc <XDMAD_AllocateXdmacChannel+0xb8>)
  4017aa:	4807      	ldr	r0, [pc, #28]	; (4017c8 <XDMAD_AllocateXdmacChannel+0xc4>)
  4017ac:	4b05      	ldr	r3, [pc, #20]	; (4017c4 <XDMAD_AllocateXdmacChannel+0xc0>)
  4017ae:	4798      	blx	r3
	return XDMAD_ALLOC_FAILED;
  4017b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
  4017b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4017b8:	00401e55 	.word	0x00401e55
  4017bc:	00409550 	.word	0x00409550
  4017c0:	0040963c 	.word	0x0040963c
  4017c4:	00402c25 	.word	0x00402c25
  4017c8:	00409658 	.word	0x00409658
  4017cc:	00401e05 	.word	0x00401e05

004017d0 <XDMAD_Initialize>:
 * \param bPollingMode Polling DMA transfer:
 *                     1. Via XDMAD_IsTransferDone(); or
 *                     2. Via XDMAD_Handler().
 */
void XDMAD_Initialize(sXdmad *pXdmad, uint8_t bPollingMode)
{
  4017d0:	b510      	push	{r4, lr}
  4017d2:	b082      	sub	sp, #8
	uint32_t j;
	uint32_t volatile timer = 0x7FF;
  4017d4:	f240 73ff 	movw	r3, #2047	; 0x7ff
  4017d8:	9301      	str	r3, [sp, #4]

	assert(pXdmad);
  4017da:	b168      	cbz	r0, 4017f8 <XDMAD_Initialize+0x28>
  4017dc:	4604      	mov	r4, r0
	LockMutex(pXdmad->xdmaMutex, timer);
  4017de:	f500 72c4 	add.w	r2, r0, #392	; 0x188
    
}

__STATIC_INLINE uint8_t get_lock(volatile uint8_t *Lock_Variable, const uint8_t maxValue, volatile uint32_t *pTimeout)
{
    while (*pTimeout)
  4017e2:	9b01      	ldr	r3, [sp, #4]
  4017e4:	b1eb      	cbz	r3, 401822 <XDMAD_Initialize+0x52>
__attribute__((always_inline)) __STATIC_INLINE uint8_t __LDREXB(volatile uint8_t *addr)
{
    uint32_t result;

#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
   __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
  4017e6:	e8d2 3f4f 	ldrexb	r3, [r2]
	{
        if(__LDREXB(Lock_Variable) < maxValue)
  4017ea:	f013 0fff 	tst.w	r3, #255	; 0xff
  4017ee:	d009      	beq.n	401804 <XDMAD_Initialize+0x34>
          __DMB();
          TRACE_DEBUG("Mutex locked ");
          return 0;
        }
        
        ((*pTimeout)--);
  4017f0:	9b01      	ldr	r3, [sp, #4]
  4017f2:	3b01      	subs	r3, #1
  4017f4:	9301      	str	r3, [sp, #4]
  4017f6:	e7f4      	b.n	4017e2 <XDMAD_Initialize+0x12>
	assert(pXdmad);
  4017f8:	4b33      	ldr	r3, [pc, #204]	; (4018c8 <XDMAD_Initialize+0xf8>)
  4017fa:	4a34      	ldr	r2, [pc, #208]	; (4018cc <XDMAD_Initialize+0xfc>)
  4017fc:	2191      	movs	r1, #145	; 0x91
  4017fe:	4834      	ldr	r0, [pc, #208]	; (4018d0 <XDMAD_Initialize+0x100>)
  401800:	4c34      	ldr	r4, [pc, #208]	; (4018d4 <XDMAD_Initialize+0x104>)
  401802:	47a0      	blx	r4
          while( __STREXB(((*Lock_Variable) + 1), Lock_Variable) )
  401804:	f894 3188 	ldrb.w	r3, [r4, #392]	; 0x188
  401808:	3301      	adds	r3, #1
  40180a:	b2db      	uxtb	r3, r3
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
{
   uint32_t result;

   __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
  40180c:	e8c2 3f40 	strexb	r0, r3, [r2]
  401810:	b128      	cbz	r0, 40181e <XDMAD_Initialize+0x4e>
            if(!(*pTimeout)--)
  401812:	9b01      	ldr	r3, [sp, #4]
  401814:	1e58      	subs	r0, r3, #1
  401816:	9001      	str	r0, [sp, #4]
  401818:	2b00      	cmp	r3, #0
  40181a:	d1f3      	bne.n	401804 <XDMAD_Initialize+0x34>
  40181c:	e001      	b.n	401822 <XDMAD_Initialize+0x52>
  __ASM volatile ("dmb 0xF":::"memory");
  40181e:	f3bf 8f5f 	dmb	sy

	if (xDmad_Initialized) {
  401822:	4b2d      	ldr	r3, [pc, #180]	; (4018d8 <XDMAD_Initialize+0x108>)
  401824:	781b      	ldrb	r3, [r3, #0]
  401826:	b1b3      	cbz	r3, 401856 <XDMAD_Initialize+0x86>
  __ASM volatile ("dsb 0xF":::"memory");
  401828:	f3bf 8f4f 	dsb	sy
   __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
  40182c:	f504 73c4 	add.w	r3, r4, #392	; 0x188
  401830:	e8d3 3f4f 	ldrexb	r3, [r3]

__STATIC_INLINE uint8_t free_lock(volatile uint8_t *Lock_Variable)
{
    /* Memory access barrier Ensure memory operations completed before releasing lock  */
    __DSB();
    if(__LDREXB(Lock_Variable))
  401834:	f013 0fff 	tst.w	r3, #255	; 0xff
  401838:	d00b      	beq.n	401852 <XDMAD_Initialize+0x82>
    {
      __STREXB( ((*Lock_Variable) - 1), Lock_Variable);
  40183a:	f894 3188 	ldrb.w	r3, [r4, #392]	; 0x188
  40183e:	3b01      	subs	r3, #1
  401840:	b2db      	uxtb	r3, r3
   __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
  401842:	f504 71c4 	add.w	r1, r4, #392	; 0x188
  401846:	e8c1 3f42 	strexb	r2, r3, [r1]
  __ASM volatile ("dsb 0xF":::"memory");
  40184a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("dmb 0xF":::"memory");
  40184e:	f3bf 8f5f 	dmb	sy
		pXdmad->XdmaChannels[j].state = XDMAD_STATE_FREE;
	}

	xDmad_Initialized = 1;
	ReleaseMutex(pXdmad->xdmaMutex);
}
  401852:	b002      	add	sp, #8
  401854:	bd10      	pop	{r4, pc}
	pXdmad->pXdmacs = XDMAC;
  401856:	4821      	ldr	r0, [pc, #132]	; (4018dc <XDMAD_Initialize+0x10c>)
  401858:	6020      	str	r0, [r4, #0]
	pXdmad->pollingMode = bPollingMode;
  40185a:	f884 1186 	strb.w	r1, [r4, #390]	; 0x186
	pXdmad->numControllers = XDMAC_CONTROLLER_NUM;
  40185e:	2301      	movs	r3, #1
  401860:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
	pXdmad->numChannels    = (XDMAC_GTYPE_NB_CH(XDMAC_GetType(XDMAC)) + 1);
  401864:	4b1e      	ldr	r3, [pc, #120]	; (4018e0 <XDMAD_Initialize+0x110>)
  401866:	4798      	blx	r3
  401868:	f000 001f 	and.w	r0, r0, #31
  40186c:	3001      	adds	r0, #1
  40186e:	f884 0185 	strb.w	r0, [r4, #389]	; 0x185
	for (j = 0; j < pXdmad->numChannels; j ++) {
  401872:	2100      	movs	r1, #0
  401874:	e00d      	b.n	401892 <XDMAD_Initialize+0xc2>
		pXdmad->XdmaChannels[j].fCallback = 0;
  401876:	eb04 1301 	add.w	r3, r4, r1, lsl #4
  40187a:	2200      	movs	r2, #0
  40187c:	605a      	str	r2, [r3, #4]
		pXdmad->XdmaChannels[j].pArg      = 0;
  40187e:	609a      	str	r2, [r3, #8]
		pXdmad->XdmaChannels[j].bIrqOwner    = 0;
  401880:	731a      	strb	r2, [r3, #12]
		pXdmad->XdmaChannels[j].bSrcPeriphID = 0;
  401882:	735a      	strb	r2, [r3, #13]
		pXdmad->XdmaChannels[j].bDstPeriphID = 0;
  401884:	739a      	strb	r2, [r3, #14]
		pXdmad->XdmaChannels[j].bSrcTxIfID   = 0;
  401886:	73da      	strb	r2, [r3, #15]
		pXdmad->XdmaChannels[j].bSrcRxIfID   = 0;
  401888:	741a      	strb	r2, [r3, #16]
		pXdmad->XdmaChannels[j].bDstTxIfID   = 0;
  40188a:	745a      	strb	r2, [r3, #17]
		pXdmad->XdmaChannels[j].bDstRxIfID   = 0;
  40188c:	749a      	strb	r2, [r3, #18]
		pXdmad->XdmaChannels[j].state = XDMAD_STATE_FREE;
  40188e:	74da      	strb	r2, [r3, #19]
	for (j = 0; j < pXdmad->numChannels; j ++) {
  401890:	3101      	adds	r1, #1
  401892:	4281      	cmp	r1, r0
  401894:	d3ef      	bcc.n	401876 <XDMAD_Initialize+0xa6>
	xDmad_Initialized = 1;
  401896:	2201      	movs	r2, #1
  401898:	4b0f      	ldr	r3, [pc, #60]	; (4018d8 <XDMAD_Initialize+0x108>)
  40189a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  40189c:	f3bf 8f4f 	dsb	sy
   __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
  4018a0:	f504 73c4 	add.w	r3, r4, #392	; 0x188
  4018a4:	e8d3 3f4f 	ldrexb	r3, [r3]
    if(__LDREXB(Lock_Variable))
  4018a8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4018ac:	d0d1      	beq.n	401852 <XDMAD_Initialize+0x82>
      __STREXB( ((*Lock_Variable) - 1), Lock_Variable);
  4018ae:	f894 3188 	ldrb.w	r3, [r4, #392]	; 0x188
  4018b2:	3b01      	subs	r3, #1
  4018b4:	b2db      	uxtb	r3, r3
   __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
  4018b6:	f504 71c4 	add.w	r1, r4, #392	; 0x188
  4018ba:	e8c1 3f42 	strexb	r2, r3, [r1]
  __ASM volatile ("dsb 0xF":::"memory");
  4018be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("dmb 0xF":::"memory");
  4018c2:	f3bf 8f5f 	dmb	sy
  4018c6:	e7c4      	b.n	401852 <XDMAD_Initialize+0x82>
  4018c8:	00409690 	.word	0x00409690
  4018cc:	0040956c 	.word	0x0040956c
  4018d0:	00409698 	.word	0x00409698
  4018d4:	00402419 	.word	0x00402419
  4018d8:	20400a54 	.word	0x20400a54
  4018dc:	40078000 	.word	0x40078000
  4018e0:	004011cd 	.word	0x004011cd

004018e4 <XDMAD_AllocateChannel>:
 * XDMAD_ALLOC_FAILED if allocation failed.
 */
uint32_t XDMAD_AllocateChannel(sXdmad *pXdmad,
								uint8_t bSrcID,
								uint8_t bDstID)
{
  4018e4:	b530      	push	{r4, r5, lr}
  4018e6:	b083      	sub	sp, #12
  4018e8:	4604      	mov	r4, r0
	uint32_t dwChannel = XDMAD_ALLOC_FAILED;
	uint32_t volatile timer = 0x7FF;
  4018ea:	f240 73ff 	movw	r3, #2047	; 0x7ff
  4018ee:	9301      	str	r3, [sp, #4]

	LockMutex(pXdmad->xdmaMutex, timer);
  4018f0:	f500 70c4 	add.w	r0, r0, #392	; 0x188
    while (*pTimeout)
  4018f4:	9b01      	ldr	r3, [sp, #4]
  4018f6:	b1bb      	cbz	r3, 401928 <XDMAD_AllocateChannel+0x44>
   __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
  4018f8:	e8d0 3f4f 	ldrexb	r3, [r0]
        if(__LDREXB(Lock_Variable) < maxValue)
  4018fc:	f013 0fff 	tst.w	r3, #255	; 0xff
  401900:	d003      	beq.n	40190a <XDMAD_AllocateChannel+0x26>
        ((*pTimeout)--);
  401902:	9b01      	ldr	r3, [sp, #4]
  401904:	3b01      	subs	r3, #1
  401906:	9301      	str	r3, [sp, #4]
  401908:	e7f4      	b.n	4018f4 <XDMAD_AllocateChannel+0x10>
          while( __STREXB(((*Lock_Variable) + 1), Lock_Variable) )
  40190a:	f894 3188 	ldrb.w	r3, [r4, #392]	; 0x188
  40190e:	3301      	adds	r3, #1
  401910:	b2db      	uxtb	r3, r3
   __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
  401912:	e8c0 3f45 	strexb	r5, r3, [r0]
  401916:	b12d      	cbz	r5, 401924 <XDMAD_AllocateChannel+0x40>
            if(!(*pTimeout)--)
  401918:	9b01      	ldr	r3, [sp, #4]
  40191a:	1e5d      	subs	r5, r3, #1
  40191c:	9501      	str	r5, [sp, #4]
  40191e:	2b00      	cmp	r3, #0
  401920:	d1f3      	bne.n	40190a <XDMAD_AllocateChannel+0x26>
  401922:	e001      	b.n	401928 <XDMAD_AllocateChannel+0x44>
  __ASM volatile ("dmb 0xF":::"memory");
  401924:	f3bf 8f5f 	dmb	sy
	dwChannel = XDMAD_AllocateXdmacChannel(pXdmad,  bSrcID, bDstID);
  401928:	4620      	mov	r0, r4
  40192a:	4b0c      	ldr	r3, [pc, #48]	; (40195c <XDMAD_AllocateChannel+0x78>)
  40192c:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
  40192e:	f3bf 8f4f 	dsb	sy
   __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
  401932:	f504 73c4 	add.w	r3, r4, #392	; 0x188
  401936:	e8d3 3f4f 	ldrexb	r3, [r3]
    if(__LDREXB(Lock_Variable))
  40193a:	f013 0fff 	tst.w	r3, #255	; 0xff
  40193e:	d00b      	beq.n	401958 <XDMAD_AllocateChannel+0x74>
      __STREXB( ((*Lock_Variable) - 1), Lock_Variable);
  401940:	f894 3188 	ldrb.w	r3, [r4, #392]	; 0x188
  401944:	3b01      	subs	r3, #1
  401946:	b2db      	uxtb	r3, r3
   __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
  401948:	f504 71c4 	add.w	r1, r4, #392	; 0x188
  40194c:	e8c1 3f42 	strexb	r2, r3, [r1]
  __ASM volatile ("dsb 0xF":::"memory");
  401950:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("dmb 0xF":::"memory");
  401954:	f3bf 8f5f 	dmb	sy
	ReleaseMutex(pXdmad->xdmaMutex);

	return dwChannel;
}
  401958:	b003      	add	sp, #12
  40195a:	bd30      	pop	{r4, r5, pc}
  40195c:	00401705 	.word	0x00401705

00401960 <XDMAD_SetCallback>:
 */
eXdmadRC XDMAD_SetCallback(sXdmad *pXdmad,
							uint32_t dwChannel,
							XdmadTransferCallback fCallback,
							void *pArg)
{
  401960:	b538      	push	{r3, r4, r5, lr}

	uint8_t iChannel    = (dwChannel) & 0xFF;
	assert(pXdmad != NULL);
  401962:	b138      	cbz	r0, 401974 <XDMAD_SetCallback+0x14>
  401964:	b2cd      	uxtb	r5, r1
  401966:	4604      	mov	r4, r0

	if (iChannel >= pXdmad->numChannels) return XDMAD_ERROR;
  401968:	f890 0185 	ldrb.w	r0, [r0, #389]	; 0x185
  40196c:	4285      	cmp	r5, r0
  40196e:	d307      	bcc.n	401980 <XDMAD_SetCallback+0x20>
  401970:	2004      	movs	r0, #4
  401972:	bd38      	pop	{r3, r4, r5, pc}
	assert(pXdmad != NULL);
  401974:	4b0d      	ldr	r3, [pc, #52]	; (4019ac <XDMAD_SetCallback+0x4c>)
  401976:	4a0e      	ldr	r2, [pc, #56]	; (4019b0 <XDMAD_SetCallback+0x50>)
  401978:	21f0      	movs	r1, #240	; 0xf0
  40197a:	480e      	ldr	r0, [pc, #56]	; (4019b4 <XDMAD_SetCallback+0x54>)
  40197c:	4c0e      	ldr	r4, [pc, #56]	; (4019b8 <XDMAD_SetCallback+0x58>)
  40197e:	47a0      	blx	r4

	if (pXdmad->XdmaChannels[iChannel].state == XDMAD_STATE_FREE)
  401980:	b2c9      	uxtb	r1, r1
  401982:	eb04 1001 	add.w	r0, r4, r1, lsl #4
  401986:	7cc0      	ldrb	r0, [r0, #19]
  401988:	b908      	cbnz	r0, 40198e <XDMAD_SetCallback+0x2e>
		return XDMAD_ERROR;
  40198a:	2004      	movs	r0, #4
  40198c:	bd38      	pop	{r3, r4, r5, pc}
	else if (pXdmad->XdmaChannels[iChannel].state == XDMAD_STATE_START)
  40198e:	eb04 1001 	add.w	r0, r4, r1, lsl #4
  401992:	7cc0      	ldrb	r0, [r0, #19]
  401994:	b2c0      	uxtb	r0, r0
  401996:	2802      	cmp	r0, #2
  401998:	d005      	beq.n	4019a6 <XDMAD_SetCallback+0x46>
		return XDMAD_BUSY;

	pXdmad->XdmaChannels[iChannel].fCallback = fCallback;
  40199a:	eb04 1101 	add.w	r1, r4, r1, lsl #4
  40199e:	604a      	str	r2, [r1, #4]
	pXdmad->XdmaChannels[iChannel].pArg = pArg;
  4019a0:	608b      	str	r3, [r1, #8]

	return XDMAD_OK;
  4019a2:	2000      	movs	r0, #0
  4019a4:	bd38      	pop	{r3, r4, r5, pc}
		return XDMAD_BUSY;
  4019a6:	2003      	movs	r0, #3
}
  4019a8:	bd38      	pop	{r3, r4, r5, pc}
  4019aa:	bf00      	nop
  4019ac:	004096b4 	.word	0x004096b4
  4019b0:	00409594 	.word	0x00409594
  4019b4:	00409698 	.word	0x00409698
  4019b8:	00402419 	.word	0x00402419

004019bc <XDMAD_PrepareChannel>:
 * \param pXdmad     Pointer to xDMA driver instance.
 * \param dwChannel ControllerNumber << 8 | ChannelNumber.
 * \param dwCfg     Configuration value.
 */
eXdmadRC XDMAD_PrepareChannel(sXdmad *pXdmad, uint32_t dwChannel)
{
  4019bc:	b570      	push	{r4, r5, r6, lr}

	uint8_t iChannel    = (dwChannel) & 0xFF;
	Xdmac *pXdmac = pXdmad->pXdmacs;
  4019be:	6805      	ldr	r5, [r0, #0]

	assert(pXdmad != NULL);
  4019c0:	b130      	cbz	r0, 4019d0 <XDMAD_PrepareChannel+0x14>
  4019c2:	b2cc      	uxtb	r4, r1

	if (iChannel >= pXdmad->numChannels) return XDMAD_ERROR;
  4019c4:	f890 3185 	ldrb.w	r3, [r0, #389]	; 0x185
  4019c8:	429c      	cmp	r4, r3
  4019ca:	d308      	bcc.n	4019de <XDMAD_PrepareChannel+0x22>
  4019cc:	2004      	movs	r0, #4
  4019ce:	bd70      	pop	{r4, r5, r6, pc}
	assert(pXdmad != NULL);
  4019d0:	4b2c      	ldr	r3, [pc, #176]	; (401a84 <XDMAD_PrepareChannel+0xc8>)
  4019d2:	4a2d      	ldr	r2, [pc, #180]	; (401a88 <XDMAD_PrepareChannel+0xcc>)
  4019d4:	f240 110d 	movw	r1, #269	; 0x10d
  4019d8:	482c      	ldr	r0, [pc, #176]	; (401a8c <XDMAD_PrepareChannel+0xd0>)
  4019da:	4c2d      	ldr	r4, [pc, #180]	; (401a90 <XDMAD_PrepareChannel+0xd4>)
  4019dc:	47a0      	blx	r4

	if (pXdmad->XdmaChannels[iChannel].state == XDMAD_STATE_FREE)
  4019de:	b2c9      	uxtb	r1, r1
  4019e0:	eb00 1301 	add.w	r3, r0, r1, lsl #4
  4019e4:	7cdb      	ldrb	r3, [r3, #19]
  4019e6:	b90b      	cbnz	r3, 4019ec <XDMAD_PrepareChannel+0x30>
		return XDMAD_ERROR;
  4019e8:	2004      	movs	r0, #4
  4019ea:	bd70      	pop	{r4, r5, r6, pc}
	else if ((pXdmad->XdmaChannels[iChannel].state == XDMAD_STATE_START)
  4019ec:	eb00 1301 	add.w	r3, r0, r1, lsl #4
  4019f0:	7cdb      	ldrb	r3, [r3, #19]
  4019f2:	b2db      	uxtb	r3, r3
  4019f4:	2b02      	cmp	r3, #2
  4019f6:	d042      	beq.n	401a7e <XDMAD_PrepareChannel+0xc2>
			  || (pXdmad->XdmaChannels[iChannel].state == XDMAD_STATE_IN_XFR))
  4019f8:	eb00 1001 	add.w	r0, r0, r1, lsl #4
  4019fc:	7cc3      	ldrb	r3, [r0, #19]
  4019fe:	b2db      	uxtb	r3, r3
  401a00:	2b03      	cmp	r3, #3
  401a02:	d101      	bne.n	401a08 <XDMAD_PrepareChannel+0x4c>
		return XDMAD_BUSY;
  401a04:	2003      	movs	r0, #3
	XDMAC_SetBlockControl(pXdmac, iChannel, 0);
	XDMAC_SetChannelConfig(pXdmac, iChannel, 0x20);
	XDMAC_SetDescriptorAddr(pXdmac, iChannel, 0, 0);
	XDMAC_SetDescriptorControl(pXdmac, iChannel, 0);
	return XDMAD_OK;
}
  401a06:	bd70      	pop	{r4, r5, r6, pc}
	if (!PMC_IsPeriphEnabled(ID_XDMAC))
  401a08:	203a      	movs	r0, #58	; 0x3a
  401a0a:	4b22      	ldr	r3, [pc, #136]	; (401a94 <XDMAD_PrepareChannel+0xd8>)
  401a0c:	4798      	blx	r3
  401a0e:	2800      	cmp	r0, #0
  401a10:	d031      	beq.n	401a76 <XDMAD_PrepareChannel+0xba>
	XDMAC_GetChannelIsr(pXdmac, iChannel);
  401a12:	4621      	mov	r1, r4
  401a14:	4628      	mov	r0, r5
  401a16:	4b20      	ldr	r3, [pc, #128]	; (401a98 <XDMAD_PrepareChannel+0xdc>)
  401a18:	4798      	blx	r3
	XDMAC_DisableGIt (pXdmac, iChannel);
  401a1a:	4621      	mov	r1, r4
  401a1c:	4628      	mov	r0, r5
  401a1e:	4b1f      	ldr	r3, [pc, #124]	; (401a9c <XDMAD_PrepareChannel+0xe0>)
  401a20:	4798      	blx	r3
	XDMAC_DisableChannelIt (pXdmac, iChannel, 0xFF);
  401a22:	22ff      	movs	r2, #255	; 0xff
  401a24:	4621      	mov	r1, r4
  401a26:	4628      	mov	r0, r5
  401a28:	4b1d      	ldr	r3, [pc, #116]	; (401aa0 <XDMAD_PrepareChannel+0xe4>)
  401a2a:	4798      	blx	r3
	XDMAC_DisableChannel(pXdmac, iChannel);
  401a2c:	4621      	mov	r1, r4
  401a2e:	4628      	mov	r0, r5
  401a30:	4b1c      	ldr	r3, [pc, #112]	; (401aa4 <XDMAD_PrepareChannel+0xe8>)
  401a32:	4798      	blx	r3
	XDMAC_SetSourceAddr(pXdmac, iChannel, 0);
  401a34:	2200      	movs	r2, #0
  401a36:	4621      	mov	r1, r4
  401a38:	4628      	mov	r0, r5
  401a3a:	4b1b      	ldr	r3, [pc, #108]	; (401aa8 <XDMAD_PrepareChannel+0xec>)
  401a3c:	4798      	blx	r3
	XDMAC_SetDestinationAddr(pXdmac, iChannel, 0);
  401a3e:	2200      	movs	r2, #0
  401a40:	4621      	mov	r1, r4
  401a42:	4628      	mov	r0, r5
  401a44:	4b19      	ldr	r3, [pc, #100]	; (401aac <XDMAD_PrepareChannel+0xf0>)
  401a46:	4798      	blx	r3
	XDMAC_SetBlockControl(pXdmac, iChannel, 0);
  401a48:	2200      	movs	r2, #0
  401a4a:	4621      	mov	r1, r4
  401a4c:	4628      	mov	r0, r5
  401a4e:	4b18      	ldr	r3, [pc, #96]	; (401ab0 <XDMAD_PrepareChannel+0xf4>)
  401a50:	4798      	blx	r3
	XDMAC_SetChannelConfig(pXdmac, iChannel, 0x20);
  401a52:	2220      	movs	r2, #32
  401a54:	4621      	mov	r1, r4
  401a56:	4628      	mov	r0, r5
  401a58:	4b16      	ldr	r3, [pc, #88]	; (401ab4 <XDMAD_PrepareChannel+0xf8>)
  401a5a:	4798      	blx	r3
	XDMAC_SetDescriptorAddr(pXdmac, iChannel, 0, 0);
  401a5c:	2300      	movs	r3, #0
  401a5e:	461a      	mov	r2, r3
  401a60:	4621      	mov	r1, r4
  401a62:	4628      	mov	r0, r5
  401a64:	4e14      	ldr	r6, [pc, #80]	; (401ab8 <XDMAD_PrepareChannel+0xfc>)
  401a66:	47b0      	blx	r6
	XDMAC_SetDescriptorControl(pXdmac, iChannel, 0);
  401a68:	2200      	movs	r2, #0
  401a6a:	4621      	mov	r1, r4
  401a6c:	4628      	mov	r0, r5
  401a6e:	4b13      	ldr	r3, [pc, #76]	; (401abc <XDMAD_PrepareChannel+0x100>)
  401a70:	4798      	blx	r3
	return XDMAD_OK;
  401a72:	2000      	movs	r0, #0
  401a74:	bd70      	pop	{r4, r5, r6, pc}
		PMC_EnablePeripheral(ID_XDMAC);
  401a76:	203a      	movs	r0, #58	; 0x3a
  401a78:	4b11      	ldr	r3, [pc, #68]	; (401ac0 <XDMAD_PrepareChannel+0x104>)
  401a7a:	4798      	blx	r3
  401a7c:	e7c9      	b.n	401a12 <XDMAD_PrepareChannel+0x56>
		return XDMAD_BUSY;
  401a7e:	2003      	movs	r0, #3
  401a80:	bd70      	pop	{r4, r5, r6, pc}
  401a82:	bf00      	nop
  401a84:	004096b4 	.word	0x004096b4
  401a88:	004095a8 	.word	0x004095a8
  401a8c:	00409698 	.word	0x00409698
  401a90:	00402419 	.word	0x00402419
  401a94:	00400859 	.word	0x00400859
  401a98:	004013d1 	.word	0x004013d1
  401a9c:	0040121d 	.word	0x0040121d
  401aa0:	00401351 	.word	0x00401351
  401aa4:	004012ad 	.word	0x004012ad
  401aa8:	00401455 	.word	0x00401455
  401aac:	00401495 	.word	0x00401495
  401ab0:	004015b5 	.word	0x004015b5
  401ab4:	004015f9 	.word	0x004015f9
  401ab8:	004014d5 	.word	0x004014d5
  401abc:	00401531 	.word	0x00401531
  401ac0:	004007f9 	.word	0x004007f9

00401ac4 <XDMAD_Handler>:
/**
 * \brief xDMA interrupt handler
 * \param pxDmad Pointer to DMA driver instance.
 */
void XDMAD_Handler(sXdmad *pDmad)
{
  401ac4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Xdmac *pXdmac;
	sXdmadChannel *pCh;
	uint32_t xdmaChannelIntStatus, xdmaGlobaIntStatus, xdmaGlobalChStatus;
	uint8_t bExec = 0;
	uint8_t _iChannel;
	assert(pDmad != NULL);
  401ac8:	b158      	cbz	r0, 401ae2 <XDMAD_Handler+0x1e>
  401aca:	4605      	mov	r5, r0

	pXdmac = pDmad->pXdmacs;
  401acc:	f8d0 9000 	ldr.w	r9, [r0]
	xdmaGlobaIntStatus = XDMAC_GetGIsr(pXdmac);
  401ad0:	4648      	mov	r0, r9
  401ad2:	4b39      	ldr	r3, [pc, #228]	; (401bb8 <XDMAD_Handler+0xf4>)
  401ad4:	4798      	blx	r3
  401ad6:	4607      	mov	r7, r0

	if ((xdmaGlobaIntStatus & 0xFFFFFF) != 0) {
  401ad8:	f030 437f 	bics.w	r3, r0, #4278190080	; 0xff000000
  401adc:	d108      	bne.n	401af0 <XDMAD_Handler+0x2c>
  401ade:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	assert(pDmad != NULL);
  401ae2:	4b36      	ldr	r3, [pc, #216]	; (401bbc <XDMAD_Handler+0xf8>)
  401ae4:	4a36      	ldr	r2, [pc, #216]	; (401bc0 <XDMAD_Handler+0xfc>)
  401ae6:	f240 1137 	movw	r1, #311	; 0x137
  401aea:	4836      	ldr	r0, [pc, #216]	; (401bc4 <XDMAD_Handler+0x100>)
  401aec:	4c36      	ldr	r4, [pc, #216]	; (401bc8 <XDMAD_Handler+0x104>)
  401aee:	47a0      	blx	r4
		xdmaGlobalChStatus = XDMAC_GetGlobalChStatus(pXdmac);
  401af0:	4648      	mov	r0, r9
  401af2:	4b36      	ldr	r3, [pc, #216]	; (401bcc <XDMAD_Handler+0x108>)
  401af4:	4798      	blx	r3
  401af6:	4682      	mov	sl, r0

		for (_iChannel = 0; _iChannel < pDmad->numChannels; _iChannel ++) {
  401af8:	2400      	movs	r4, #0
	uint8_t bExec = 0;
  401afa:	46a0      	mov	r8, r4
		for (_iChannel = 0; _iChannel < pDmad->numChannels; _iChannel ++) {
  401afc:	e025      	b.n	401b4a <XDMAD_Handler+0x86>
			if ((xdmaGlobalChStatus & (XDMAC_GS_ST0 << _iChannel)) == 0) {
				bExec = 0;
				xdmaChannelIntStatus = XDMAC_GetMaskChannelIsr(pXdmac, _iChannel);

				if (xdmaChannelIntStatus & XDMAC_CIS_BIS) {
					if ((XDMAC_GetChannelItMask(pXdmac, _iChannel) & XDMAC_CIM_LIM)
  401afe:	4621      	mov	r1, r4
  401b00:	4648      	mov	r0, r9
  401b02:	4b33      	ldr	r3, [pc, #204]	; (401bd0 <XDMAD_Handler+0x10c>)
  401b04:	4798      	blx	r3
  401b06:	f010 0f02 	tst.w	r0, #2
  401b0a:	d106      	bne.n	401b1a <XDMAD_Handler+0x56>
						== 0) {
						pCh->state = XDMAD_STATE_DONE;
  401b0c:	eb05 1304 	add.w	r3, r5, r4, lsl #4
  401b10:	2204      	movs	r2, #4
  401b12:	74da      	strb	r2, [r3, #19]
						bExec = 1;
  401b14:	f04f 0801 	mov.w	r8, #1
  401b18:	e034      	b.n	401b84 <XDMAD_Handler+0xc0>
				bExec = 0;
  401b1a:	f04f 0800 	mov.w	r8, #0
  401b1e:	e031      	b.n	401b84 <XDMAD_Handler+0xc0>
					bExec = 1;
				}

			} else {
				/* Block end interrupt for LLI dma mode */
				if (XDMAC_GetChannelIsr(pXdmac, _iChannel) & XDMAC_CIS_BIS) {
  401b20:	4621      	mov	r1, r4
  401b22:	4648      	mov	r0, r9
  401b24:	4b2b      	ldr	r3, [pc, #172]	; (401bd4 <XDMAD_Handler+0x110>)
  401b26:	4798      	blx	r3
  401b28:	f010 0f01 	tst.w	r0, #1
  401b2c:	d13d      	bne.n	401baa <XDMAD_Handler+0xe6>
					pCh->fCallback(_iChannel, pCh->pArg);
				}
			}

			/* Execute callback */
			if (bExec && pCh->fCallback)
  401b2e:	f1b8 0f00 	cmp.w	r8, #0
  401b32:	d008      	beq.n	401b46 <XDMAD_Handler+0x82>
  401b34:	eb05 1306 	add.w	r3, r5, r6, lsl #4
  401b38:	685b      	ldr	r3, [r3, #4]
  401b3a:	b123      	cbz	r3, 401b46 <XDMAD_Handler+0x82>
				pCh->fCallback(_iChannel, pCh->pArg);
  401b3c:	eb05 1606 	add.w	r6, r5, r6, lsl #4
  401b40:	68b1      	ldr	r1, [r6, #8]
  401b42:	4620      	mov	r0, r4
  401b44:	4798      	blx	r3
		for (_iChannel = 0; _iChannel < pDmad->numChannels; _iChannel ++) {
  401b46:	3401      	adds	r4, #1
  401b48:	b2e4      	uxtb	r4, r4
  401b4a:	f895 3185 	ldrb.w	r3, [r5, #389]	; 0x185
  401b4e:	429c      	cmp	r4, r3
  401b50:	d2c5      	bcs.n	401ade <XDMAD_Handler+0x1a>
			if (!(xdmaGlobaIntStatus & (1 << _iChannel))) continue;
  401b52:	4626      	mov	r6, r4
  401b54:	2301      	movs	r3, #1
  401b56:	40a3      	lsls	r3, r4
  401b58:	421f      	tst	r7, r3
  401b5a:	d0f4      	beq.n	401b46 <XDMAD_Handler+0x82>
			if (pCh->state == XDMAD_STATE_FREE) return;
  401b5c:	eb05 1304 	add.w	r3, r5, r4, lsl #4
  401b60:	7cdb      	ldrb	r3, [r3, #19]
  401b62:	2b00      	cmp	r3, #0
  401b64:	d0bb      	beq.n	401ade <XDMAD_Handler+0x1a>
			if ((xdmaGlobalChStatus & (XDMAC_GS_ST0 << _iChannel)) == 0) {
  401b66:	2301      	movs	r3, #1
  401b68:	40a3      	lsls	r3, r4
  401b6a:	ea1a 0f03 	tst.w	sl, r3
  401b6e:	d1d7      	bne.n	401b20 <XDMAD_Handler+0x5c>
				xdmaChannelIntStatus = XDMAC_GetMaskChannelIsr(pXdmac, _iChannel);
  401b70:	4621      	mov	r1, r4
  401b72:	4648      	mov	r0, r9
  401b74:	4b18      	ldr	r3, [pc, #96]	; (401bd8 <XDMAD_Handler+0x114>)
  401b76:	4798      	blx	r3
  401b78:	4683      	mov	fp, r0
				if (xdmaChannelIntStatus & XDMAC_CIS_BIS) {
  401b7a:	f010 0f01 	tst.w	r0, #1
  401b7e:	d1be      	bne.n	401afe <XDMAD_Handler+0x3a>
				bExec = 0;
  401b80:	f04f 0800 	mov.w	r8, #0
				if (xdmaChannelIntStatus & XDMAC_CIS_LIS) {
  401b84:	f01b 0f02 	tst.w	fp, #2
  401b88:	d005      	beq.n	401b96 <XDMAD_Handler+0xd2>
					pCh->state = XDMAD_STATE_DONE;
  401b8a:	eb05 1306 	add.w	r3, r5, r6, lsl #4
  401b8e:	2204      	movs	r2, #4
  401b90:	74da      	strb	r2, [r3, #19]
					bExec = 1;
  401b92:	f04f 0801 	mov.w	r8, #1
				if (xdmaChannelIntStatus & XDMAC_CIS_DIS) {
  401b96:	f01b 0f04 	tst.w	fp, #4
  401b9a:	d0c8      	beq.n	401b2e <XDMAD_Handler+0x6a>
					pCh->state = XDMAD_STATE_DONE;
  401b9c:	eb05 1306 	add.w	r3, r5, r6, lsl #4
  401ba0:	2204      	movs	r2, #4
  401ba2:	74da      	strb	r2, [r3, #19]
					bExec = 1;
  401ba4:	f04f 0801 	mov.w	r8, #1
  401ba8:	e7c1      	b.n	401b2e <XDMAD_Handler+0x6a>
					pCh->fCallback(_iChannel, pCh->pArg);
  401baa:	eb05 1304 	add.w	r3, r5, r4, lsl #4
  401bae:	685a      	ldr	r2, [r3, #4]
  401bb0:	6899      	ldr	r1, [r3, #8]
  401bb2:	4620      	mov	r0, r4
  401bb4:	4790      	blx	r2
  401bb6:	e7ba      	b.n	401b2e <XDMAD_Handler+0x6a>
  401bb8:	00401249 	.word	0x00401249
  401bbc:	004096c4 	.word	0x004096c4
  401bc0:	004095c0 	.word	0x004095c0
  401bc4:	00409698 	.word	0x00409698
  401bc8:	00402419 	.word	0x00402419
  401bcc:	004012ed 	.word	0x004012ed
  401bd0:	00401391 	.word	0x00401391
  401bd4:	004013d1 	.word	0x004013d1
  401bd8:	00401411 	.word	0x00401411

00401bdc <XDMAD_ConfigureTransfer>:
								  uint32_t dwChannel,
								  sXdmadCfg *pXdmaParam,
								  uint32_t dwXdmaDescCfg,
								  uint32_t dwXdmaDescAddr,
								  uint32_t dwXdmaIntEn)
{
  401bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t iChannel    = (dwChannel) & 0xFF;

	assert(pXdmad != NULL);
  401be0:	b158      	cbz	r0, 401bfa <XDMAD_ConfigureTransfer+0x1e>
  401be2:	460c      	mov	r4, r1
  401be4:	4617      	mov	r7, r2
  401be6:	4698      	mov	r8, r3
  401be8:	b2ce      	uxtb	r6, r1
  401bea:	4605      	mov	r5, r0

	if (iChannel >= pXdmad->numChannels)
  401bec:	f890 3185 	ldrb.w	r3, [r0, #389]	; 0x185
  401bf0:	429e      	cmp	r6, r3
  401bf2:	d309      	bcc.n	401c08 <XDMAD_ConfigureTransfer+0x2c>
		return XDMAD_ERROR;
  401bf4:	2004      	movs	r0, #4
  401bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	assert(pXdmad != NULL);
  401bfa:	4b49      	ldr	r3, [pc, #292]	; (401d20 <XDMAD_ConfigureTransfer+0x144>)
  401bfc:	4a49      	ldr	r2, [pc, #292]	; (401d24 <XDMAD_ConfigureTransfer+0x148>)
  401bfe:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
  401c02:	4849      	ldr	r0, [pc, #292]	; (401d28 <XDMAD_ConfigureTransfer+0x14c>)
  401c04:	4c49      	ldr	r4, [pc, #292]	; (401d2c <XDMAD_ConfigureTransfer+0x150>)
  401c06:	47a0      	blx	r4

	Xdmac *pXdmac = pXdmad->pXdmacs;
  401c08:	f8d0 9000 	ldr.w	r9, [r0]
	XDMAC_GetChannelIsr(pXdmac, iChannel);
  401c0c:	4631      	mov	r1, r6
  401c0e:	4648      	mov	r0, r9
  401c10:	4b47      	ldr	r3, [pc, #284]	; (401d30 <XDMAD_ConfigureTransfer+0x154>)
  401c12:	4798      	blx	r3

	if (pXdmad->XdmaChannels[iChannel].state == XDMAD_STATE_FREE)
  401c14:	b2e4      	uxtb	r4, r4
  401c16:	eb05 1304 	add.w	r3, r5, r4, lsl #4
  401c1a:	7cdb      	ldrb	r3, [r3, #19]
  401c1c:	b913      	cbnz	r3, 401c24 <XDMAD_ConfigureTransfer+0x48>
		return XDMAD_ERROR;
  401c1e:	2004      	movs	r0, #4
  401c20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	if (pXdmad->XdmaChannels[iChannel].state == XDMAD_STATE_START)
  401c24:	eb05 1404 	add.w	r4, r5, r4, lsl #4
  401c28:	7ce3      	ldrb	r3, [r4, #19]
  401c2a:	b2db      	uxtb	r3, r3
  401c2c:	2b02      	cmp	r3, #2
  401c2e:	d073      	beq.n	401d18 <XDMAD_ConfigureTransfer+0x13c>
		return XDMAD_BUSY;

	/* Linked List is enabled */
	if ((dwXdmaDescCfg & XDMAC_CNDC_NDE) == XDMAC_CNDC_NDE_DSCR_FETCH_EN) {
  401c30:	f018 0f01 	tst.w	r8, #1
  401c34:	d034      	beq.n	401ca0 <XDMAD_ConfigureTransfer+0xc4>
		if ((dwXdmaDescCfg & XDMAC_CNDC_NDVIEW_Msk) == XDMAC_CNDC_NDVIEW_NDV0) {
  401c36:	f018 0418 	ands.w	r4, r8, #24
  401c3a:	d01b      	beq.n	401c74 <XDMAD_ConfigureTransfer+0x98>
			XDMAC_SetChannelConfig(pXdmac, iChannel, pXdmaParam->mbr_cfg);
			XDMAC_SetSourceAddr(pXdmac, iChannel, pXdmaParam->mbr_sa);
			XDMAC_SetDestinationAddr(pXdmac, iChannel, pXdmaParam->mbr_da);
		}

		if ((dwXdmaDescCfg & XDMAC_CNDC_NDVIEW_Msk) == XDMAC_CNDC_NDVIEW_NDV1)
  401c3c:	2c08      	cmp	r4, #8
  401c3e:	d029      	beq.n	401c94 <XDMAD_ConfigureTransfer+0xb8>
			XDMAC_SetChannelConfig(pXdmac, iChannel, pXdmaParam->mbr_cfg);

		XDMAC_SetDescriptorAddr(pXdmac, iChannel, dwXdmaDescAddr, 0);
  401c40:	2300      	movs	r3, #0
  401c42:	9a08      	ldr	r2, [sp, #32]
  401c44:	4631      	mov	r1, r6
  401c46:	4648      	mov	r0, r9
  401c48:	4c3a      	ldr	r4, [pc, #232]	; (401d34 <XDMAD_ConfigureTransfer+0x158>)
  401c4a:	47a0      	blx	r4
		XDMAC_SetDescriptorControl(pXdmac, iChannel, dwXdmaDescCfg);
  401c4c:	fa5f f288 	uxtb.w	r2, r8
  401c50:	4631      	mov	r1, r6
  401c52:	4648      	mov	r0, r9
  401c54:	4b38      	ldr	r3, [pc, #224]	; (401d38 <XDMAD_ConfigureTransfer+0x15c>)
  401c56:	4798      	blx	r3
		XDMAC_DisableChannelIt (pXdmac, iChannel, 0xFF);
  401c58:	22ff      	movs	r2, #255	; 0xff
  401c5a:	4631      	mov	r1, r6
  401c5c:	4648      	mov	r0, r9
  401c5e:	4b37      	ldr	r3, [pc, #220]	; (401d3c <XDMAD_ConfigureTransfer+0x160>)
  401c60:	4798      	blx	r3
		XDMAC_EnableChannelIt (pXdmac, iChannel, dwXdmaIntEn);
  401c62:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
  401c66:	4631      	mov	r1, r6
  401c68:	4648      	mov	r0, r9
  401c6a:	4b35      	ldr	r3, [pc, #212]	; (401d40 <XDMAD_ConfigureTransfer+0x164>)
  401c6c:	4798      	blx	r3
		XDMAC_SetDescriptorAddr(pXdmac, iChannel, 0, 0);
		XDMAC_SetDescriptorControl(pXdmac, iChannel, 0);
		XDMAC_EnableChannelIt (pXdmac, iChannel, dwXdmaIntEn);
	}

	return XDMAD_OK;
  401c6e:	2000      	movs	r0, #0
  401c70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			XDMAC_SetChannelConfig(pXdmac, iChannel, pXdmaParam->mbr_cfg);
  401c74:	68fa      	ldr	r2, [r7, #12]
  401c76:	4631      	mov	r1, r6
  401c78:	4648      	mov	r0, r9
  401c7a:	4b32      	ldr	r3, [pc, #200]	; (401d44 <XDMAD_ConfigureTransfer+0x168>)
  401c7c:	4798      	blx	r3
			XDMAC_SetSourceAddr(pXdmac, iChannel, pXdmaParam->mbr_sa);
  401c7e:	687a      	ldr	r2, [r7, #4]
  401c80:	4631      	mov	r1, r6
  401c82:	4648      	mov	r0, r9
  401c84:	4b30      	ldr	r3, [pc, #192]	; (401d48 <XDMAD_ConfigureTransfer+0x16c>)
  401c86:	4798      	blx	r3
			XDMAC_SetDestinationAddr(pXdmac, iChannel, pXdmaParam->mbr_da);
  401c88:	68ba      	ldr	r2, [r7, #8]
  401c8a:	4631      	mov	r1, r6
  401c8c:	4648      	mov	r0, r9
  401c8e:	4b2f      	ldr	r3, [pc, #188]	; (401d4c <XDMAD_ConfigureTransfer+0x170>)
  401c90:	4798      	blx	r3
  401c92:	e7d3      	b.n	401c3c <XDMAD_ConfigureTransfer+0x60>
			XDMAC_SetChannelConfig(pXdmac, iChannel, pXdmaParam->mbr_cfg);
  401c94:	68fa      	ldr	r2, [r7, #12]
  401c96:	4631      	mov	r1, r6
  401c98:	4648      	mov	r0, r9
  401c9a:	4b2a      	ldr	r3, [pc, #168]	; (401d44 <XDMAD_ConfigureTransfer+0x168>)
  401c9c:	4798      	blx	r3
  401c9e:	e7cf      	b.n	401c40 <XDMAD_ConfigureTransfer+0x64>
		XDMAC_SetSourceAddr(pXdmac, iChannel, pXdmaParam->mbr_sa);
  401ca0:	687a      	ldr	r2, [r7, #4]
  401ca2:	4631      	mov	r1, r6
  401ca4:	4648      	mov	r0, r9
  401ca6:	4b28      	ldr	r3, [pc, #160]	; (401d48 <XDMAD_ConfigureTransfer+0x16c>)
  401ca8:	4798      	blx	r3
		XDMAC_SetDestinationAddr(pXdmac, iChannel, pXdmaParam->mbr_da);
  401caa:	68ba      	ldr	r2, [r7, #8]
  401cac:	4631      	mov	r1, r6
  401cae:	4648      	mov	r0, r9
  401cb0:	4b26      	ldr	r3, [pc, #152]	; (401d4c <XDMAD_ConfigureTransfer+0x170>)
  401cb2:	4798      	blx	r3
		XDMAC_SetMicroblockControl(pXdmac, iChannel, pXdmaParam->mbr_ubc);
  401cb4:	683a      	ldr	r2, [r7, #0]
  401cb6:	4631      	mov	r1, r6
  401cb8:	4648      	mov	r0, r9
  401cba:	4b25      	ldr	r3, [pc, #148]	; (401d50 <XDMAD_ConfigureTransfer+0x174>)
  401cbc:	4798      	blx	r3
		XDMAC_SetBlockControl(pXdmac, iChannel, pXdmaParam->mbr_bc);
  401cbe:	8a3a      	ldrh	r2, [r7, #16]
  401cc0:	4631      	mov	r1, r6
  401cc2:	4648      	mov	r0, r9
  401cc4:	4b23      	ldr	r3, [pc, #140]	; (401d54 <XDMAD_ConfigureTransfer+0x178>)
  401cc6:	4798      	blx	r3
		XDMAC_SetDataStride_MemPattern(pXdmac, iChannel, pXdmaParam->mbr_ds);
  401cc8:	697a      	ldr	r2, [r7, #20]
  401cca:	4631      	mov	r1, r6
  401ccc:	4648      	mov	r0, r9
  401cce:	4b22      	ldr	r3, [pc, #136]	; (401d58 <XDMAD_ConfigureTransfer+0x17c>)
  401cd0:	4798      	blx	r3
		XDMAC_SetSourceMicroBlockStride(pXdmac, iChannel, pXdmaParam->mbr_sus);
  401cd2:	69ba      	ldr	r2, [r7, #24]
  401cd4:	4631      	mov	r1, r6
  401cd6:	4648      	mov	r0, r9
  401cd8:	4b20      	ldr	r3, [pc, #128]	; (401d5c <XDMAD_ConfigureTransfer+0x180>)
  401cda:	4798      	blx	r3
		XDMAC_SetDestinationMicroBlockStride(pXdmac, iChannel, pXdmaParam->mbr_dus);
  401cdc:	69fa      	ldr	r2, [r7, #28]
  401cde:	4631      	mov	r1, r6
  401ce0:	4648      	mov	r0, r9
  401ce2:	4b1f      	ldr	r3, [pc, #124]	; (401d60 <XDMAD_ConfigureTransfer+0x184>)
  401ce4:	4798      	blx	r3
		XDMAC_SetChannelConfig(pXdmac, iChannel, pXdmaParam->mbr_cfg);
  401ce6:	68fa      	ldr	r2, [r7, #12]
  401ce8:	4631      	mov	r1, r6
  401cea:	4648      	mov	r0, r9
  401cec:	4b15      	ldr	r3, [pc, #84]	; (401d44 <XDMAD_ConfigureTransfer+0x168>)
  401cee:	4798      	blx	r3
		XDMAC_SetDescriptorAddr(pXdmac, iChannel, 0, 0);
  401cf0:	2300      	movs	r3, #0
  401cf2:	461a      	mov	r2, r3
  401cf4:	4631      	mov	r1, r6
  401cf6:	4648      	mov	r0, r9
  401cf8:	4c0e      	ldr	r4, [pc, #56]	; (401d34 <XDMAD_ConfigureTransfer+0x158>)
  401cfa:	47a0      	blx	r4
		XDMAC_SetDescriptorControl(pXdmac, iChannel, 0);
  401cfc:	2200      	movs	r2, #0
  401cfe:	4631      	mov	r1, r6
  401d00:	4648      	mov	r0, r9
  401d02:	4b0d      	ldr	r3, [pc, #52]	; (401d38 <XDMAD_ConfigureTransfer+0x15c>)
  401d04:	4798      	blx	r3
		XDMAC_EnableChannelIt (pXdmac, iChannel, dwXdmaIntEn);
  401d06:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
  401d0a:	4631      	mov	r1, r6
  401d0c:	4648      	mov	r0, r9
  401d0e:	4b0c      	ldr	r3, [pc, #48]	; (401d40 <XDMAD_ConfigureTransfer+0x164>)
  401d10:	4798      	blx	r3
	return XDMAD_OK;
  401d12:	2000      	movs	r0, #0
  401d14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return XDMAD_BUSY;
  401d18:	2003      	movs	r0, #3
}
  401d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401d1e:	bf00      	nop
  401d20:	004096b4 	.word	0x004096b4
  401d24:	004095e8 	.word	0x004095e8
  401d28:	00409698 	.word	0x00409698
  401d2c:	00402419 	.word	0x00402419
  401d30:	004013d1 	.word	0x004013d1
  401d34:	004014d5 	.word	0x004014d5
  401d38:	00401531 	.word	0x00401531
  401d3c:	00401351 	.word	0x00401351
  401d40:	00401311 	.word	0x00401311
  401d44:	004015f9 	.word	0x004015f9
  401d48:	00401455 	.word	0x00401455
  401d4c:	00401495 	.word	0x00401495
  401d50:	00401571 	.word	0x00401571
  401d54:	004015b5 	.word	0x004015b5
  401d58:	00401639 	.word	0x00401639
  401d5c:	00401679 	.word	0x00401679
  401d60:	004016bd 	.word	0x004016bd

00401d64 <XDMAD_StartTransfer>:
 * \brief Start xDMA transfer.
 * \param pXdmad     Pointer to XDMA driver instance.
 * \param dwChannel ControllerNumber << 8 | ChannelNumber.
 */
eXdmadRC XDMAD_StartTransfer(sXdmad *pXdmad, uint32_t dwChannel)
{
  401d64:	b570      	push	{r4, r5, r6, lr}
	uint8_t iChannel    = (dwChannel) & 0xFF;

	assert(pXdmad != NULL);
  401d66:	b138      	cbz	r0, 401d78 <XDMAD_StartTransfer+0x14>
  401d68:	b2cd      	uxtb	r5, r1
  401d6a:	4604      	mov	r4, r0

	if (iChannel >= pXdmad->numChannels) return XDMAD_ERROR;
  401d6c:	f890 3185 	ldrb.w	r3, [r0, #389]	; 0x185
  401d70:	429d      	cmp	r5, r3
  401d72:	d308      	bcc.n	401d86 <XDMAD_StartTransfer+0x22>
  401d74:	2004      	movs	r0, #4
  401d76:	bd70      	pop	{r4, r5, r6, pc}
	assert(pXdmad != NULL);
  401d78:	4b18      	ldr	r3, [pc, #96]	; (401ddc <XDMAD_StartTransfer+0x78>)
  401d7a:	4a19      	ldr	r2, [pc, #100]	; (401de0 <XDMAD_StartTransfer+0x7c>)
  401d7c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
  401d80:	4818      	ldr	r0, [pc, #96]	; (401de4 <XDMAD_StartTransfer+0x80>)
  401d82:	4c19      	ldr	r4, [pc, #100]	; (401de8 <XDMAD_StartTransfer+0x84>)
  401d84:	47a0      	blx	r4

	Xdmac *pXdmac = pXdmad->pXdmacs;
  401d86:	6806      	ldr	r6, [r0, #0]

	if (pXdmad->XdmaChannels[iChannel].state == XDMAD_STATE_FREE) {
  401d88:	b2c9      	uxtb	r1, r1
  401d8a:	eb00 1301 	add.w	r3, r0, r1, lsl #4
  401d8e:	7cdb      	ldrb	r3, [r3, #19]
  401d90:	b193      	cbz	r3, 401db8 <XDMAD_StartTransfer+0x54>
		TRACE_ERROR("%s:: XDMAD_STATE_FREE \n\r", __FUNCTION__);
		return XDMAD_ERROR;
	} else if (pXdmad->XdmaChannels[iChannel].state == XDMAD_STATE_START) {
  401d92:	eb00 1301 	add.w	r3, r0, r1, lsl #4
  401d96:	7cdb      	ldrb	r3, [r3, #19]
  401d98:	b2db      	uxtb	r3, r3
  401d9a:	2b02      	cmp	r3, #2
  401d9c:	d012      	beq.n	401dc4 <XDMAD_StartTransfer+0x60>
		TRACE_ERROR("%s:: XDMAD_STATE_START \n\r", __FUNCTION__)
		return XDMAD_BUSY;
	}

	/* Change state to transferring */
	pXdmad->XdmaChannels[iChannel].state = XDMAD_STATE_START;
  401d9e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  401da2:	2302      	movs	r3, #2
  401da4:	74cb      	strb	r3, [r1, #19]
	XDMAC_EnableChannel(pXdmac, iChannel);
  401da6:	4629      	mov	r1, r5
  401da8:	4630      	mov	r0, r6
  401daa:	4b10      	ldr	r3, [pc, #64]	; (401dec <XDMAD_StartTransfer+0x88>)
  401dac:	4798      	blx	r3

	if (pXdmad->pollingMode == 0)
  401dae:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
  401db2:	b16b      	cbz	r3, 401dd0 <XDMAD_StartTransfer+0x6c>
		XDMAC_EnableGIt(pXdmac, iChannel);

	return XDMAD_OK;
  401db4:	2000      	movs	r0, #0
}
  401db6:	bd70      	pop	{r4, r5, r6, pc}
		TRACE_ERROR("%s:: XDMAD_STATE_FREE \n\r", __FUNCTION__);
  401db8:	490d      	ldr	r1, [pc, #52]	; (401df0 <XDMAD_StartTransfer+0x8c>)
  401dba:	480e      	ldr	r0, [pc, #56]	; (401df4 <XDMAD_StartTransfer+0x90>)
  401dbc:	4b0e      	ldr	r3, [pc, #56]	; (401df8 <XDMAD_StartTransfer+0x94>)
  401dbe:	4798      	blx	r3
		return XDMAD_ERROR;
  401dc0:	2004      	movs	r0, #4
  401dc2:	bd70      	pop	{r4, r5, r6, pc}
		TRACE_ERROR("%s:: XDMAD_STATE_START \n\r", __FUNCTION__)
  401dc4:	490a      	ldr	r1, [pc, #40]	; (401df0 <XDMAD_StartTransfer+0x8c>)
  401dc6:	480d      	ldr	r0, [pc, #52]	; (401dfc <XDMAD_StartTransfer+0x98>)
  401dc8:	4b0b      	ldr	r3, [pc, #44]	; (401df8 <XDMAD_StartTransfer+0x94>)
  401dca:	4798      	blx	r3
		return XDMAD_BUSY;
  401dcc:	2003      	movs	r0, #3
  401dce:	bd70      	pop	{r4, r5, r6, pc}
		XDMAC_EnableGIt(pXdmac, iChannel);
  401dd0:	4629      	mov	r1, r5
  401dd2:	4630      	mov	r0, r6
  401dd4:	4b0a      	ldr	r3, [pc, #40]	; (401e00 <XDMAD_StartTransfer+0x9c>)
  401dd6:	4798      	blx	r3
	return XDMAD_OK;
  401dd8:	2000      	movs	r0, #0
  401dda:	bd70      	pop	{r4, r5, r6, pc}
  401ddc:	004096b4 	.word	0x004096b4
  401de0:	00409600 	.word	0x00409600
  401de4:	00409698 	.word	0x00409698
  401de8:	00402419 	.word	0x00402419
  401dec:	0040126d 	.word	0x0040126d
  401df0:	00409614 	.word	0x00409614
  401df4:	004096d4 	.word	0x004096d4
  401df8:	00402c25 	.word	0x00402c25
  401dfc:	004096f4 	.word	0x004096f4
  401e00:	004011f1 	.word	0x004011f1

00401e04 <XDMAIF_Get_ChannelNumber>:
 * \return 0-15 peripheral identifier coded.
 *         0xff : no associated peripheral identifier coded.
 */
uint8_t XDMAIF_Get_ChannelNumber (uint8_t bPeriphID,
								  uint8_t bTransfer)
{
  401e04:	b570      	push	{r4, r5, r6, lr}
  401e06:	4604      	mov	r4, r0
  401e08:	460d      	mov	r5, r1
	uint8_t i;
	uint8_t NumOfPeripheral = ((XDMAC_GetType(XDMAC) & 0x00FF0000) >> 16);
  401e0a:	480f      	ldr	r0, [pc, #60]	; (401e48 <XDMAIF_Get_ChannelNumber+0x44>)
  401e0c:	4b0f      	ldr	r3, [pc, #60]	; (401e4c <XDMAIF_Get_ChannelNumber+0x48>)
  401e0e:	4798      	blx	r3
  401e10:	f3c0 4007 	ubfx	r0, r0, #16, #8

	for (i = 0; i <= NumOfPeripheral; i++) {
  401e14:	2300      	movs	r3, #0
  401e16:	e001      	b.n	401e1c <XDMAIF_Get_ChannelNumber+0x18>
  401e18:	3301      	adds	r3, #1
  401e1a:	b2db      	uxtb	r3, r3
  401e1c:	4283      	cmp	r3, r0
  401e1e:	d810      	bhi.n	401e42 <XDMAIF_Get_ChannelNumber+0x3e>
		if ((xdmaHwIf[i].bPeriphID == bPeriphID) &&
  401e20:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  401e24:	0091      	lsls	r1, r2, #2
  401e26:	4a0a      	ldr	r2, [pc, #40]	; (401e50 <XDMAIF_Get_ChannelNumber+0x4c>)
  401e28:	440a      	add	r2, r1
  401e2a:	6852      	ldr	r2, [r2, #4]
  401e2c:	42a2      	cmp	r2, r4
  401e2e:	d1f3      	bne.n	401e18 <XDMAIF_Get_ChannelNumber+0x14>
			 (xdmaHwIf[i].bTransfer == bTransfer))
  401e30:	4a07      	ldr	r2, [pc, #28]	; (401e50 <XDMAIF_Get_ChannelNumber+0x4c>)
  401e32:	440a      	add	r2, r1
  401e34:	7a12      	ldrb	r2, [r2, #8]
		if ((xdmaHwIf[i].bPeriphID == bPeriphID) &&
  401e36:	42aa      	cmp	r2, r5
  401e38:	d1ee      	bne.n	401e18 <XDMAIF_Get_ChannelNumber+0x14>
			return xdmaHwIf[i].bIfID;
  401e3a:	4b05      	ldr	r3, [pc, #20]	; (401e50 <XDMAIF_Get_ChannelNumber+0x4c>)
  401e3c:	440b      	add	r3, r1
  401e3e:	7a58      	ldrb	r0, [r3, #9]
  401e40:	bd70      	pop	{r4, r5, r6, pc}
	}

	return 0xff;
  401e42:	20ff      	movs	r0, #255	; 0xff
}
  401e44:	bd70      	pop	{r4, r5, r6, pc}
  401e46:	bf00      	nop
  401e48:	40078000 	.word	0x40078000
  401e4c:	004011cd 	.word	0x004011cd
  401e50:	00409714 	.word	0x00409714

00401e54 <XDMAIF_IsValidatedPeripherOnDma>:
 * \param bPeriphID  Peripheral ID (0xff : memory only).
 * \return 1:  Is a validated peripheral. 0: no associated peripheral identifier
 * coded.
 */
uint8_t XDMAIF_IsValidatedPeripherOnDma(uint8_t bPeriphID)
{
  401e54:	b510      	push	{r4, lr}
  401e56:	4604      	mov	r4, r0
	uint8_t i;
	uint8_t NumOfPeripheral = ((XDMAC_GetType(XDMAC) & 0x00FF0000) >> 16);
  401e58:	480d      	ldr	r0, [pc, #52]	; (401e90 <XDMAIF_IsValidatedPeripherOnDma+0x3c>)
  401e5a:	4b0e      	ldr	r3, [pc, #56]	; (401e94 <XDMAIF_IsValidatedPeripherOnDma+0x40>)
  401e5c:	4798      	blx	r3
  401e5e:	f3c0 4007 	ubfx	r0, r0, #16, #8

	/* It is always validated when transfer to memory */
	if (bPeriphID == 0xFF)
  401e62:	2cff      	cmp	r4, #255	; 0xff
  401e64:	d00f      	beq.n	401e86 <XDMAIF_IsValidatedPeripherOnDma+0x32>
  401e66:	2300      	movs	r3, #0
		return 1;

	for (i = 0; i <= NumOfPeripheral; i++) {
  401e68:	4283      	cmp	r3, r0
  401e6a:	d80a      	bhi.n	401e82 <XDMAIF_IsValidatedPeripherOnDma+0x2e>
		if ((xdmaHwIf[i].bPeriphID == bPeriphID))
  401e6c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  401e70:	0091      	lsls	r1, r2, #2
  401e72:	4a09      	ldr	r2, [pc, #36]	; (401e98 <XDMAIF_IsValidatedPeripherOnDma+0x44>)
  401e74:	440a      	add	r2, r1
  401e76:	6852      	ldr	r2, [r2, #4]
  401e78:	42a2      	cmp	r2, r4
  401e7a:	d006      	beq.n	401e8a <XDMAIF_IsValidatedPeripherOnDma+0x36>
	for (i = 0; i <= NumOfPeripheral; i++) {
  401e7c:	3301      	adds	r3, #1
  401e7e:	b2db      	uxtb	r3, r3
  401e80:	e7f2      	b.n	401e68 <XDMAIF_IsValidatedPeripherOnDma+0x14>
			return 1;
	}

	return 0;
  401e82:	2000      	movs	r0, #0
  401e84:	bd10      	pop	{r4, pc}
		return 1;
  401e86:	2001      	movs	r0, #1
  401e88:	bd10      	pop	{r4, pc}
			return 1;
  401e8a:	2001      	movs	r0, #1
}
  401e8c:	bd10      	pop	{r4, pc}
  401e8e:	bf00      	nop
  401e90:	40078000 	.word	0x40078000
  401e94:	004011cd 	.word	0x004011cd
  401e98:	00409714 	.word	0x00409714

00401e9c <sscDmaTxClk>:

/*
 * \brief Callback function for SSC Tx.
 * */
static void sscDmaTxClk(uint32_t Channel, void* pArg)
{
  401e9c:	4770      	bx	lr
	...

00401ea0 <sscDmaRxClk>:
{
  401ea0:	b508      	push	{r3, lr}
	if (cpu_flag) {
  401ea2:	4b19      	ldr	r3, [pc, #100]	; (401f08 <sscDmaRxClk+0x68>)
  401ea4:	781b      	ldrb	r3, [r3, #0]
  401ea6:	b183      	cbz	r3, 401eca <sscDmaRxClk+0x2a>
		if (AudioNextBuffer[buf_flag] == 0)
  401ea8:	4b18      	ldr	r3, [pc, #96]	; (401f0c <sscDmaRxClk+0x6c>)
  401eaa:	7819      	ldrb	r1, [r3, #0]
  401eac:	4a16      	ldr	r2, [pc, #88]	; (401f08 <sscDmaRxClk+0x68>)
  401eae:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  401eb2:	6853      	ldr	r3, [r2, #4]
  401eb4:	b98b      	cbnz	r3, 401eda <sscDmaRxClk+0x3a>
			AudioNextBuffer[buf_flag] = (dmad.pXdmacs->XDMAC_CHID[sscDmaRxChannel].XDMAC_CNDA);
  401eb6:	4b14      	ldr	r3, [pc, #80]	; (401f08 <sscDmaRxClk+0x68>)
  401eb8:	695a      	ldr	r2, [r3, #20]
  401eba:	f8d3 01a0 	ldr.w	r0, [r3, #416]	; 0x1a0
  401ebe:	eb02 1280 	add.w	r2, r2, r0, lsl #6
  401ec2:	6e92      	ldr	r2, [r2, #104]	; 0x68
  401ec4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  401ec8:	605a      	str	r2, [r3, #4]
	buf_flag++;
  401eca:	4a10      	ldr	r2, [pc, #64]	; (401f0c <sscDmaRxClk+0x6c>)
  401ecc:	7813      	ldrb	r3, [r2, #0]
  401ece:	3301      	adds	r3, #1
  401ed0:	b2db      	uxtb	r3, r3
  401ed2:	7013      	strb	r3, [r2, #0]
	if (buf_flag == TOTAL_Buffers) {
  401ed4:	2b04      	cmp	r3, #4
  401ed6:	d010      	beq.n	401efa <sscDmaRxClk+0x5a>
  401ed8:	bd08      	pop	{r3, pc}
			TRACE_WARNING("DMA is faster than CPU-%d\n\r",buf_flag);
  401eda:	480d      	ldr	r0, [pc, #52]	; (401f10 <sscDmaRxClk+0x70>)
  401edc:	4b0d      	ldr	r3, [pc, #52]	; (401f14 <sscDmaRxClk+0x74>)
  401ede:	4798      	blx	r3
			AudioNextBuffer[buf_flag] = (dmad.pXdmacs->XDMAC_CHID[sscDmaRxChannel].XDMAC_CNDA);
  401ee0:	4b0a      	ldr	r3, [pc, #40]	; (401f0c <sscDmaRxClk+0x6c>)
  401ee2:	7819      	ldrb	r1, [r3, #0]
  401ee4:	4b08      	ldr	r3, [pc, #32]	; (401f08 <sscDmaRxClk+0x68>)
  401ee6:	695a      	ldr	r2, [r3, #20]
  401ee8:	f8d3 01a0 	ldr.w	r0, [r3, #416]	; 0x1a0
  401eec:	eb02 1280 	add.w	r2, r2, r0, lsl #6
  401ef0:	6e92      	ldr	r2, [r2, #104]	; 0x68
  401ef2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  401ef6:	605a      	str	r2, [r3, #4]
  401ef8:	e7e7      	b.n	401eca <sscDmaRxClk+0x2a>
		buf_flag = 0;
  401efa:	2200      	movs	r2, #0
  401efc:	4b03      	ldr	r3, [pc, #12]	; (401f0c <sscDmaRxClk+0x6c>)
  401efe:	701a      	strb	r2, [r3, #0]
		cpu_flag = true;
  401f00:	2201      	movs	r2, #1
  401f02:	4b01      	ldr	r3, [pc, #4]	; (401f08 <sscDmaRxClk+0x68>)
  401f04:	701a      	strb	r2, [r3, #0]
}
  401f06:	e7e7      	b.n	401ed8 <sscDmaRxClk+0x38>
  401f08:	20400a60 	.word	0x20400a60
  401f0c:	20400000 	.word	0x20400000
  401f10:	0040999c 	.word	0x0040999c
  401f14:	00402c25 	.word	0x00402c25

00401f18 <Dma_configure>:

/**
 * \brief DMA driver configuration
 */
static void Dma_configure(void)
{
  401f18:	b570      	push	{r4, r5, r6, lr}
	sXdmad *pDmad = &dmad;

	/* Driver initialize */
	XDMAD_Initialize( pDmad, 0);
  401f1a:	4c1f      	ldr	r4, [pc, #124]	; (401f98 <Dma_configure+0x80>)
  401f1c:	f104 0514 	add.w	r5, r4, #20
  401f20:	2100      	movs	r1, #0
  401f22:	4628      	mov	r0, r5
  401f24:	4b1d      	ldr	r3, [pc, #116]	; (401f9c <Dma_configure+0x84>)
  401f26:	4798      	blx	r3
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  401f28:	4b1d      	ldr	r3, [pc, #116]	; (401fa0 <Dma_configure+0x88>)
  401f2a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401f2e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  401f32:	605a      	str	r2, [r3, #4]
	/* Configure TWI interrupts */
	NVIC_ClearPendingIRQ(XDMAC_IRQn);
	NVIC_EnableIRQ(XDMAC_IRQn);
	/* Allocate DMA channels for SSC */
	sscDmaTxChannel = XDMAD_AllocateChannel(pDmad, XDMAD_TRANSFER_MEMORY, ID_SSC);
  401f34:	2216      	movs	r2, #22
  401f36:	21ff      	movs	r1, #255	; 0xff
  401f38:	4628      	mov	r0, r5
  401f3a:	4e1a      	ldr	r6, [pc, #104]	; (401fa4 <Dma_configure+0x8c>)
  401f3c:	47b0      	blx	r6
  401f3e:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	sscDmaRxChannel = XDMAD_AllocateChannel(pDmad, ID_SSC, XDMAD_TRANSFER_MEMORY);
  401f42:	22ff      	movs	r2, #255	; 0xff
  401f44:	2116      	movs	r1, #22
  401f46:	4628      	mov	r0, r5
  401f48:	47b0      	blx	r6
  401f4a:	f8c4 01a0 	str.w	r0, [r4, #416]	; 0x1a0
	if (sscDmaTxChannel == XDMAD_ALLOC_FAILED
  401f4e:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
  401f52:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401f56:	429a      	cmp	r2, r3
  401f58:	d002      	beq.n	401f60 <Dma_configure+0x48>
  401f5a:	4601      	mov	r1, r0
			|| sscDmaRxChannel == XDMAD_ALLOC_FAILED) {
  401f5c:	4298      	cmp	r0, r3
  401f5e:	d103      	bne.n	401f68 <Dma_configure+0x50>
		printf("xDMA channel allocation error\n\r");
  401f60:	4811      	ldr	r0, [pc, #68]	; (401fa8 <Dma_configure+0x90>)
  401f62:	4b12      	ldr	r3, [pc, #72]	; (401fac <Dma_configure+0x94>)
  401f64:	4798      	blx	r3
  401f66:	e7fe      	b.n	401f66 <Dma_configure+0x4e>
		while (1);
	}

	XDMAD_SetCallback( pDmad, sscDmaRxChannel, sscDmaRxClk, 0);
  401f68:	4d0b      	ldr	r5, [pc, #44]	; (401f98 <Dma_configure+0x80>)
  401f6a:	f105 0414 	add.w	r4, r5, #20
  401f6e:	2300      	movs	r3, #0
  401f70:	4a0f      	ldr	r2, [pc, #60]	; (401fb0 <Dma_configure+0x98>)
  401f72:	4620      	mov	r0, r4
  401f74:	4e0f      	ldr	r6, [pc, #60]	; (401fb4 <Dma_configure+0x9c>)
  401f76:	47b0      	blx	r6
	XDMAD_SetCallback( pDmad, sscDmaTxChannel, sscDmaTxClk, 0);
  401f78:	2300      	movs	r3, #0
  401f7a:	4a0f      	ldr	r2, [pc, #60]	; (401fb8 <Dma_configure+0xa0>)
  401f7c:	f8d5 11a4 	ldr.w	r1, [r5, #420]	; 0x1a4
  401f80:	4620      	mov	r0, r4
  401f82:	47b0      	blx	r6

	XDMAD_PrepareChannel(pDmad, sscDmaTxChannel);
  401f84:	f8d5 11a4 	ldr.w	r1, [r5, #420]	; 0x1a4
  401f88:	4620      	mov	r0, r4
  401f8a:	4e0c      	ldr	r6, [pc, #48]	; (401fbc <Dma_configure+0xa4>)
  401f8c:	47b0      	blx	r6
	XDMAD_PrepareChannel(pDmad, sscDmaRxChannel);
  401f8e:	f8d5 11a0 	ldr.w	r1, [r5, #416]	; 0x1a0
  401f92:	4620      	mov	r0, r4
  401f94:	47b0      	blx	r6
  401f96:	bd70      	pop	{r4, r5, r6, pc}
  401f98:	20400a60 	.word	0x20400a60
  401f9c:	004017d1 	.word	0x004017d1
  401fa0:	e000e100 	.word	0xe000e100
  401fa4:	004018e5 	.word	0x004018e5
  401fa8:	004099bc 	.word	0x004099bc
  401fac:	00402c25 	.word	0x00402c25
  401fb0:	00401ea1 	.word	0x00401ea1
  401fb4:	00401961 	.word	0x00401961
  401fb8:	00401e9d 	.word	0x00401e9d
  401fbc:	004019bd 	.word	0x004019bd

00401fc0 <PlayRecording>:

/**
 * \brief Receive and play audio with DMA.
 */
static void PlayRecording(void)
{
  401fc0:	b570      	push	{r4, r5, r6, lr}
  401fc2:	b082      	sub	sp, #8
	uint16_t *src;
	uint8_t i;
	uint32_t xdmaCndc;

	src = &AudioBuffer[0];
	for (i = 0; i < TOTAL_Buffers; i++) {
  401fc4:	2300      	movs	r3, #0
	src = &AudioBuffer[0];
  401fc6:	4c61      	ldr	r4, [pc, #388]	; (40214c <PlayRecording+0x18c>)
	for (i = 0; i < TOTAL_Buffers; i++) {
  401fc8:	e00a      	b.n	401fe0 <PlayRecording+0x20>
			| XDMA_UBC_NSEN_UPDATED
			| XDMAC_CUBC_UBLEN(MAX_DMA_SIZE);
		dmaReadLinkList[i].mbr_sa  = (uint32_t)&(AUDIO_IF->SSC_RHR);
		dmaReadLinkList[i].mbr_da = (uint32_t)(src);
		if (i == (TOTAL_Buffers - 1))
			dmaReadLinkList[i].mbr_nda = (uint32_t)&dmaReadLinkList[0];
  401fca:	4a61      	ldr	r2, [pc, #388]	; (402150 <PlayRecording+0x190>)
  401fcc:	f502 714e 	add.w	r1, r2, #824	; 0x338
  401fd0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  401fd4:	f8c2 1338 	str.w	r1, [r2, #824]	; 0x338
		else
			dmaReadLinkList[i].mbr_nda = (uint32_t)&dmaReadLinkList[i + 1];
		src += MAX_DMA_SIZE;
  401fd8:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
	for (i = 0; i < TOTAL_Buffers; i++) {
  401fdc:	3301      	adds	r3, #1
  401fde:	b2db      	uxtb	r3, r3
  401fe0:	2b03      	cmp	r3, #3
  401fe2:	d817      	bhi.n	402014 <PlayRecording+0x54>
		dmaReadLinkList[i].mbr_ubc = XDMA_UBC_NVIEW_NDV1
  401fe4:	4a5a      	ldr	r2, [pc, #360]	; (402150 <PlayRecording+0x190>)
  401fe6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  401fea:	495a      	ldr	r1, [pc, #360]	; (402154 <PlayRecording+0x194>)
  401fec:	f8c2 133c 	str.w	r1, [r2, #828]	; 0x33c
		dmaReadLinkList[i].mbr_sa  = (uint32_t)&(AUDIO_IF->SSC_RHR);
  401ff0:	4959      	ldr	r1, [pc, #356]	; (402158 <PlayRecording+0x198>)
  401ff2:	f8c2 1340 	str.w	r1, [r2, #832]	; 0x340
		dmaReadLinkList[i].mbr_da = (uint32_t)(src);
  401ff6:	f8c2 4344 	str.w	r4, [r2, #836]	; 0x344
		if (i == (TOTAL_Buffers - 1))
  401ffa:	2b03      	cmp	r3, #3
  401ffc:	d0e5      	beq.n	401fca <PlayRecording+0xa>
			dmaReadLinkList[i].mbr_nda = (uint32_t)&dmaReadLinkList[i + 1];
  401ffe:	1c59      	adds	r1, r3, #1
  402000:	4a53      	ldr	r2, [pc, #332]	; (402150 <PlayRecording+0x190>)
  402002:	f502 704e 	add.w	r0, r2, #824	; 0x338
  402006:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  40200a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  40200e:	f8c2 1338 	str.w	r1, [r2, #824]	; 0x338
  402012:	e7e1      	b.n	401fd8 <PlayRecording+0x18>
		| XDMAC_CC_DWIDTH_HALFWORD
		| XDMAC_CC_SIF_AHB_IF1
		| XDMAC_CC_DIF_AHB_IF1
		| XDMAC_CC_SAM_FIXED_AM
		| XDMAC_CC_DAM_INCREMENTED_AM
		| XDMAC_CC_PERID(XDMAIF_Get_ChannelNumber(ID_SSC, XDMAD_TRANSFER_RX));
  402014:	2101      	movs	r1, #1
  402016:	2016      	movs	r0, #22
  402018:	4b50      	ldr	r3, [pc, #320]	; (40215c <PlayRecording+0x19c>)
  40201a:	4798      	blx	r3
  40201c:	0600      	lsls	r0, r0, #24
  40201e:	f000 40fe 	and.w	r0, r0, #2130706432	; 0x7f000000
  402022:	4a4f      	ldr	r2, [pc, #316]	; (402160 <PlayRecording+0x1a0>)
  402024:	4302      	orrs	r2, r0
	xdmadCfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  402026:	4b4a      	ldr	r3, [pc, #296]	; (402150 <PlayRecording+0x190>)
  402028:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
    uint32_t op_addr = (uint32_t) addr;
  40202c:	f503 734e 	add.w	r3, r3, #824	; 0x338
  __ASM volatile ("dsb 0xF":::"memory");
  402030:	f3bf 8f4f 	dsb	sy
     int32_t op_size = dsize;
  402034:	2240      	movs	r2, #64	; 0x40
  402036:	e004      	b.n	402042 <PlayRecording+0x82>
      SCB->DCCMVAC = op_addr;
  402038:	494a      	ldr	r1, [pc, #296]	; (402164 <PlayRecording+0x1a4>)
  40203a:	f8c1 3268 	str.w	r3, [r1, #616]	; 0x268
      op_addr += (uint32_t)linesize;
  40203e:	3320      	adds	r3, #32
      op_size -=           linesize;
  402040:	3a20      	subs	r2, #32
    while (op_size > 0) {
  402042:	2a00      	cmp	r2, #0
  402044:	dcf8      	bgt.n	402038 <PlayRecording+0x78>
  402046:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40204a:	f3bf 8f6f 	isb	sy
		| XDMAC_CNDC_NDDUP_DST_PARAMS_UPDATED;

	SCB_CleanDCache_by_Addr((uint32_t *)dmaReadLinkList, sizeof(dmaReadLinkList));

	/*XDMAC_CIE_BIE make interrupts can be generated on per block basis*/
	XDMAD_ConfigureTransfer( &dmad, sscDmaRxChannel, &xdmadCfg, xdmaCndc,
  40204e:	4a40      	ldr	r2, [pc, #256]	; (402150 <PlayRecording+0x190>)
  402050:	4c45      	ldr	r4, [pc, #276]	; (402168 <PlayRecording+0x1a8>)
  402052:	2301      	movs	r3, #1
  402054:	9301      	str	r3, [sp, #4]
  402056:	f502 734e 	add.w	r3, r2, #824	; 0x338
  40205a:	9300      	str	r3, [sp, #0]
  40205c:	230f      	movs	r3, #15
  40205e:	f502 725e 	add.w	r2, r2, #888	; 0x378
  402062:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
  402066:	f104 0014 	add.w	r0, r4, #20
  40206a:	4d40      	ldr	r5, [pc, #256]	; (40216c <PlayRecording+0x1ac>)
  40206c:	47a8      	blx	r5
			(uint32_t)&dmaReadLinkList[0], XDMAC_CIE_BIE);


	src = &AudioBuffer[0];
	for (i = 0; i < TOTAL_Buffers; i++) {
  40206e:	2300      	movs	r3, #0
	src = &AudioBuffer[0];
  402070:	f504 74d4 	add.w	r4, r4, #424	; 0x1a8
	for (i = 0; i < TOTAL_Buffers; i++) {
  402074:	e00a      	b.n	40208c <PlayRecording+0xcc>
			| XDMA_UBC_NSEN_UPDATED
			| XDMAC_CUBC_UBLEN(MAX_DMA_SIZE);
		dmaWriteLinkList[i].mbr_sa = (uint32_t)(src);
		dmaWriteLinkList[i].mbr_da = (uint32_t)&(AUDIO_IF->SSC_THR);
		if (i == (TOTAL_Buffers - 1))
			dmaWriteLinkList[i].mbr_nda = (uint32_t)&dmaWriteLinkList[0];
  402076:	4a36      	ldr	r2, [pc, #216]	; (402150 <PlayRecording+0x190>)
  402078:	f502 7166 	add.w	r1, r2, #920	; 0x398
  40207c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  402080:	f8c2 1398 	str.w	r1, [r2, #920]	; 0x398
		else
			dmaWriteLinkList[i].mbr_nda = (uint32_t)&dmaWriteLinkList[i + 1];
		src += MAX_DMA_SIZE;
  402084:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
	for (i = 0; i < TOTAL_Buffers; i++) {
  402088:	3301      	adds	r3, #1
  40208a:	b2db      	uxtb	r3, r3
  40208c:	2b03      	cmp	r3, #3
  40208e:	d817      	bhi.n	4020c0 <PlayRecording+0x100>
		dmaWriteLinkList[i].mbr_ubc = XDMA_UBC_NVIEW_NDV1
  402090:	4a2f      	ldr	r2, [pc, #188]	; (402150 <PlayRecording+0x190>)
  402092:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  402096:	492f      	ldr	r1, [pc, #188]	; (402154 <PlayRecording+0x194>)
  402098:	f8c2 139c 	str.w	r1, [r2, #924]	; 0x39c
		dmaWriteLinkList[i].mbr_sa = (uint32_t)(src);
  40209c:	f8c2 43a0 	str.w	r4, [r2, #928]	; 0x3a0
		dmaWriteLinkList[i].mbr_da = (uint32_t)&(AUDIO_IF->SSC_THR);
  4020a0:	4933      	ldr	r1, [pc, #204]	; (402170 <PlayRecording+0x1b0>)
  4020a2:	f8c2 13a4 	str.w	r1, [r2, #932]	; 0x3a4
		if (i == (TOTAL_Buffers - 1))
  4020a6:	2b03      	cmp	r3, #3
  4020a8:	d0e5      	beq.n	402076 <PlayRecording+0xb6>
			dmaWriteLinkList[i].mbr_nda = (uint32_t)&dmaWriteLinkList[i + 1];
  4020aa:	1c59      	adds	r1, r3, #1
  4020ac:	4a28      	ldr	r2, [pc, #160]	; (402150 <PlayRecording+0x190>)
  4020ae:	f502 7066 	add.w	r0, r2, #920	; 0x398
  4020b2:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  4020b6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  4020ba:	f8c2 1398 	str.w	r1, [r2, #920]	; 0x398
  4020be:	e7e1      	b.n	402084 <PlayRecording+0xc4>
		| XDMAC_CC_DWIDTH_HALFWORD
		| XDMAC_CC_SIF_AHB_IF1
		| XDMAC_CC_DIF_AHB_IF1
		| XDMAC_CC_SAM_INCREMENTED_AM
		| XDMAC_CC_DAM_FIXED_AM
		| XDMAC_CC_PERID(XDMAIF_Get_ChannelNumber(ID_SSC, XDMAD_TRANSFER_TX));
  4020c0:	2100      	movs	r1, #0
  4020c2:	2016      	movs	r0, #22
  4020c4:	4b25      	ldr	r3, [pc, #148]	; (40215c <PlayRecording+0x19c>)
  4020c6:	4798      	blx	r3
  4020c8:	0600      	lsls	r0, r0, #24
  4020ca:	f000 40fe 	and.w	r0, r0, #2130706432	; 0x7f000000
  4020ce:	4a29      	ldr	r2, [pc, #164]	; (402174 <PlayRecording+0x1b4>)
  4020d0:	4302      	orrs	r2, r0
	xdmadCfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4020d2:	4b1f      	ldr	r3, [pc, #124]	; (402150 <PlayRecording+0x190>)
  4020d4:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
    uint32_t op_addr = (uint32_t) addr;
  4020d8:	f503 7366 	add.w	r3, r3, #920	; 0x398
  __ASM volatile ("dsb 0xF":::"memory");
  4020dc:	f3bf 8f4f 	dsb	sy
     int32_t op_size = dsize;
  4020e0:	2240      	movs	r2, #64	; 0x40
  4020e2:	e004      	b.n	4020ee <PlayRecording+0x12e>
      SCB->DCCMVAC = op_addr;
  4020e4:	491f      	ldr	r1, [pc, #124]	; (402164 <PlayRecording+0x1a4>)
  4020e6:	f8c1 3268 	str.w	r3, [r1, #616]	; 0x268
      op_addr += (uint32_t)linesize;
  4020ea:	3320      	adds	r3, #32
      op_size -=           linesize;
  4020ec:	3a20      	subs	r2, #32
    while (op_size > 0) {
  4020ee:	2a00      	cmp	r2, #0
  4020f0:	dcf8      	bgt.n	4020e4 <PlayRecording+0x124>
  4020f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4020f6:	f3bf 8f6f 	isb	sy
		| XDMAC_CNDC_NDE_DSCR_FETCH_EN
		| XDMAC_CNDC_NDSUP_SRC_PARAMS_UPDATED
		| XDMAC_CNDC_NDDUP_DST_PARAMS_UPDATED;

 	SCB_CleanDCache_by_Addr((uint32_t *)dmaWriteLinkList, sizeof(dmaWriteLinkList));
	XDMAD_ConfigureTransfer( &dmad, sscDmaTxChannel, &xdmadCfg, xdmaCndc,
  4020fa:	4a15      	ldr	r2, [pc, #84]	; (402150 <PlayRecording+0x190>)
  4020fc:	4c1a      	ldr	r4, [pc, #104]	; (402168 <PlayRecording+0x1a8>)
  4020fe:	f104 0514 	add.w	r5, r4, #20
  402102:	2301      	movs	r3, #1
  402104:	9301      	str	r3, [sp, #4]
  402106:	f502 7366 	add.w	r3, r2, #920	; 0x398
  40210a:	9300      	str	r3, [sp, #0]
  40210c:	230f      	movs	r3, #15
  40210e:	f502 725e 	add.w	r2, r2, #888	; 0x378
  402112:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
  402116:	4628      	mov	r0, r5
  402118:	4e14      	ldr	r6, [pc, #80]	; (40216c <PlayRecording+0x1ac>)
  40211a:	47b0      	blx	r6
			(uint32_t)&dmaWriteLinkList[0], XDMAC_CIE_BIE);

	SSC_EnableReceiver(AUDIO_IF);
  40211c:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  402120:	4b15      	ldr	r3, [pc, #84]	; (402178 <PlayRecording+0x1b8>)
  402122:	4798      	blx	r3
	XDMAD_StartTransfer( &dmad, sscDmaRxChannel);
  402124:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
  402128:	4628      	mov	r0, r5
  40212a:	4e14      	ldr	r6, [pc, #80]	; (40217c <PlayRecording+0x1bc>)
  40212c:	47b0      	blx	r6


	Wait(300);
  40212e:	f44f 7096 	mov.w	r0, #300	; 0x12c
  402132:	4b13      	ldr	r3, [pc, #76]	; (402180 <PlayRecording+0x1c0>)
  402134:	4798      	blx	r3
	/* Enable playback(SSC TX) */
	SSC_EnableTransmitter(AUDIO_IF);
  402136:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40213a:	4b12      	ldr	r3, [pc, #72]	; (402184 <PlayRecording+0x1c4>)
  40213c:	4798      	blx	r3
	XDMAD_StartTransfer( &dmad, sscDmaTxChannel);
  40213e:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
  402142:	4628      	mov	r0, r5
  402144:	47b0      	blx	r6

}
  402146:	b002      	add	sp, #8
  402148:	bd70      	pop	{r4, r5, r6, pc}
  40214a:	bf00      	nop
  40214c:	20400c08 	.word	0x20400c08
  402150:	204108e8 	.word	0x204108e8
  402154:	0b001000 	.word	0x0b001000
  402158:	40004020 	.word	0x40004020
  40215c:	00401e05 	.word	0x00401e05
  402160:	00046801 	.word	0x00046801
  402164:	e000ed00 	.word	0xe000ed00
  402168:	20400a60 	.word	0x20400a60
  40216c:	00401bdd 	.word	0x00401bdd
  402170:	40004024 	.word	0x40004024
  402174:	00016811 	.word	0x00016811
  402178:	00400915 	.word	0x00400915
  40217c:	00401d65 	.word	0x00401d65
  402180:	00400a69 	.word	0x00400a69
  402184:	00400905 	.word	0x00400905

00402188 <XDMAC_Handler>:
{
  402188:	b508      	push	{r3, lr}
	XDMAD_Handler(&dmad);
  40218a:	4802      	ldr	r0, [pc, #8]	; (402194 <XDMAC_Handler+0xc>)
  40218c:	4b02      	ldr	r3, [pc, #8]	; (402198 <XDMAC_Handler+0x10>)
  40218e:	4798      	blx	r3
  402190:	bd08      	pop	{r3, pc}
  402192:	bf00      	nop
  402194:	20400a74 	.word	0x20400a74
  402198:	00401ac5 	.word	0x00401ac5

0040219c <TWIHS0_Handler>:
{
  40219c:	b508      	push	{r3, lr}
	TWID_Handler(&twid);
  40219e:	4802      	ldr	r0, [pc, #8]	; (4021a8 <TWIHS0_Handler+0xc>)
  4021a0:	4b02      	ldr	r3, [pc, #8]	; (4021ac <TWIHS0_Handler+0x10>)
  4021a2:	4798      	blx	r3
  4021a4:	bd08      	pop	{r3, pc}
  4021a6:	bf00      	nop
  4021a8:	20410cc0 	.word	0x20410cc0
  4021ac:	00400de9 	.word	0x00400de9

004021b0 <main>:
 * \brief Application entry point for ssc_dam_audio example.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main( void )
{
  4021b0:	b538      	push	{r3, r4, r5, lr}
	uint16_t data = 0;
	/* Disable watchdog */
	WDT_Disable(WDT);
  4021b2:	486f      	ldr	r0, [pc, #444]	; (402370 <main+0x1c0>)
  4021b4:	4b6f      	ldr	r3, [pc, #444]	; (402374 <main+0x1c4>)
  4021b6:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
  4021b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4021bc:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  4021c0:	4b6d      	ldr	r3, [pc, #436]	; (402378 <main+0x1c8>)
  4021c2:	2100      	movs	r1, #0
  4021c4:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  4021c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4021cc:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  4021d0:	695a      	ldr	r2, [r3, #20]
  4021d2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4021d6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  4021d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4021dc:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  4021e0:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4021e4:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
  4021e8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  4021ec:	f3c0 324e 	ubfx	r2, r0, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  4021f0:	f3c0 01c9 	ubfx	r1, r0, #3, #10
  4021f4:	e002      	b.n	4021fc <main+0x4c>
    } while(sets-- != 0U);
  4021f6:	461a      	mov	r2, r3
  4021f8:	e7fa      	b.n	4021f0 <main+0x40>
      } while (ways-- != 0U);
  4021fa:	4619      	mov	r1, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  4021fc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
  402200:	ea03 1342 	and.w	r3, r3, r2, lsl #5
  402204:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
  402208:	4c5b      	ldr	r4, [pc, #364]	; (402378 <main+0x1c8>)
  40220a:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways-- != 0U);
  40220e:	1e4b      	subs	r3, r1, #1
  402210:	2900      	cmp	r1, #0
  402212:	d1f2      	bne.n	4021fa <main+0x4a>
    } while(sets-- != 0U);
  402214:	1e53      	subs	r3, r2, #1
  402216:	2a00      	cmp	r2, #0
  402218:	d1ed      	bne.n	4021f6 <main+0x46>
  40221a:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  40221e:	6963      	ldr	r3, [r4, #20]
  402220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  402224:	6163      	str	r3, [r4, #20]
  402226:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40222a:	f3bf 8f6f 	isb	sy
	/* Enable I and D cache */
	SCB_EnableICache();
	SCB_EnableDCache();

	/* Output example information */
	printf("-- SSC DMA Audio Example %s --\n\r", SOFTPACK_VERSION);
  40222e:	4953      	ldr	r1, [pc, #332]	; (40237c <main+0x1cc>)
  402230:	4853      	ldr	r0, [pc, #332]	; (402380 <main+0x1d0>)
  402232:	4c54      	ldr	r4, [pc, #336]	; (402384 <main+0x1d4>)
  402234:	47a0      	blx	r4
	printf("-- %s\n\r", BOARD_NAME);
  402236:	4954      	ldr	r1, [pc, #336]	; (402388 <main+0x1d8>)
  402238:	4854      	ldr	r0, [pc, #336]	; (40238c <main+0x1dc>)
  40223a:	47a0      	blx	r4
	printf("-- Compiled: %s %s With %s--\n\r", __DATE__, __TIME__, COMPILER_NAME);
  40223c:	4b54      	ldr	r3, [pc, #336]	; (402390 <main+0x1e0>)
  40223e:	4a55      	ldr	r2, [pc, #340]	; (402394 <main+0x1e4>)
  402240:	4955      	ldr	r1, [pc, #340]	; (402398 <main+0x1e8>)
  402242:	4856      	ldr	r0, [pc, #344]	; (40239c <main+0x1ec>)
  402244:	47a0      	blx	r4

	/* Configure systick for 1 ms. */
	printf( "Configure system tick to get 1ms tick period.\n\r" );
  402246:	4856      	ldr	r0, [pc, #344]	; (4023a0 <main+0x1f0>)
  402248:	47a0      	blx	r4
	if (TimeTick_Configure())
  40224a:	4b56      	ldr	r3, [pc, #344]	; (4023a4 <main+0x1f4>)
  40224c:	4798      	blx	r3
  40224e:	b108      	cbz	r0, 402254 <main+0xa4>
		printf("-F- Systick configuration error\n\r" );
  402250:	4855      	ldr	r0, [pc, #340]	; (4023a8 <main+0x1f8>)
  402252:	47a0      	blx	r4

	/* Configure all pins */
	PIO_Configure(pinsSsc, PIO_LISTSIZE(pinsSsc));
  402254:	2109      	movs	r1, #9
  402256:	4855      	ldr	r0, [pc, #340]	; (4023ac <main+0x1fc>)
  402258:	4b55      	ldr	r3, [pc, #340]	; (4023b0 <main+0x200>)
  40225a:	4798      	blx	r3

	/* Configure SSC */
	SSC_Configure(AUDIO_IF , 0 , SSC_MCK);
  40225c:	4c55      	ldr	r4, [pc, #340]	; (4023b4 <main+0x204>)
  40225e:	4622      	mov	r2, r4
  402260:	2100      	movs	r1, #0
  402262:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  402266:	4b54      	ldr	r3, [pc, #336]	; (4023b8 <main+0x208>)
  402268:	4798      	blx	r3
	SSC_ConfigureReceiver(AUDIO_IF,I2S_SLAVE_RX_SETTING,I2S_SLAVE_RX_FRM_SETTING);
  40226a:	228f      	movs	r2, #143	; 0x8f
  40226c:	4953      	ldr	r1, [pc, #332]	; (4023bc <main+0x20c>)
  40226e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  402272:	4b53      	ldr	r3, [pc, #332]	; (4023c0 <main+0x210>)
  402274:	4798      	blx	r3
	SSC_DisableReceiver(AUDIO_IF);
  402276:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40227a:	4b52      	ldr	r3, [pc, #328]	; (4023c4 <main+0x214>)
  40227c:	4798      	blx	r3
	SSC_ConfigureTransmitter(AUDIO_IF,I2S_SLAVE_TX_SETTING,I2S_SLAVE_TX_FRM_SETTING);
  40227e:	228f      	movs	r2, #143	; 0x8f
  402280:	4951      	ldr	r1, [pc, #324]	; (4023c8 <main+0x218>)
  402282:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  402286:	4b51      	ldr	r3, [pc, #324]	; (4023cc <main+0x21c>)
  402288:	4798      	blx	r3
	SSC_DisableTransmitter(AUDIO_IF);
  40228a:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40228e:	4b50      	ldr	r3, [pc, #320]	; (4023d0 <main+0x220>)
  402290:	4798      	blx	r3

	/* Configure DMA */
	Dma_configure();
  402292:	4b50      	ldr	r3, [pc, #320]	; (4023d4 <main+0x224>)
  402294:	4798      	blx	r3

	/* Configure and enable the TWI (required for accessing the DAC) */
	PMC_EnablePeripheral(ID_TWIHS0);
  402296:	2013      	movs	r0, #19
  402298:	4b4f      	ldr	r3, [pc, #316]	; (4023d8 <main+0x228>)
  40229a:	4798      	blx	r3
	TWI_ConfigureMaster(TWIHS0, TWI_CLOCK, BOARD_MCK);
  40229c:	4d4f      	ldr	r5, [pc, #316]	; (4023dc <main+0x22c>)
  40229e:	4622      	mov	r2, r4
  4022a0:	494f      	ldr	r1, [pc, #316]	; (4023e0 <main+0x230>)
  4022a2:	4628      	mov	r0, r5
  4022a4:	4b4f      	ldr	r3, [pc, #316]	; (4023e4 <main+0x234>)
  4022a6:	4798      	blx	r3
	TWID_Initialize(&twid, TWIHS0);
  4022a8:	4c4f      	ldr	r4, [pc, #316]	; (4023e8 <main+0x238>)
  4022aa:	4629      	mov	r1, r5
  4022ac:	4620      	mov	r0, r4
  4022ae:	4b4f      	ldr	r3, [pc, #316]	; (4023ec <main+0x23c>)
  4022b0:	4798      	blx	r3
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  4022b2:	4b4f      	ldr	r3, [pc, #316]	; (4023f0 <main+0x240>)
  4022b4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4022b8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  4022bc:	601a      	str	r2, [r3, #0]
	/* Configure TWI interrupts */
	NVIC_ClearPendingIRQ(TWIHS0_IRQn);
	NVIC_EnableIRQ(TWIHS0_IRQn);

	/* check that WM8904 is present */
	WM8904_Write(&twid, WM8904_SLAVE_ADDRESS, 22, 0);
  4022be:	2300      	movs	r3, #0
  4022c0:	2216      	movs	r2, #22
  4022c2:	211a      	movs	r1, #26
  4022c4:	4620      	mov	r0, r4
  4022c6:	4d4b      	ldr	r5, [pc, #300]	; (4023f4 <main+0x244>)
  4022c8:	47a8      	blx	r5
	data=WM8904_Read(&twid, WM8904_SLAVE_ADDRESS, 0);
  4022ca:	2200      	movs	r2, #0
  4022cc:	211a      	movs	r1, #26
  4022ce:	4620      	mov	r0, r4
  4022d0:	4b49      	ldr	r3, [pc, #292]	; (4023f8 <main+0x248>)
  4022d2:	4798      	blx	r3
	if (data != 0x8904) {
  4022d4:	f648 1304 	movw	r3, #35076	; 0x8904
  4022d8:	4298      	cmp	r0, r3
  4022da:	d003      	beq.n	4022e4 <main+0x134>
		printf("WM8904 not found!\n\r");
  4022dc:	4847      	ldr	r0, [pc, #284]	; (4023fc <main+0x24c>)
  4022de:	4b29      	ldr	r3, [pc, #164]	; (402384 <main+0x1d4>)
  4022e0:	4798      	blx	r3
  4022e2:	e7fe      	b.n	4022e2 <main+0x132>
		while (1);
	}
	/* Initialize the audio DAC */
	WM8904_Init(&twid, WM8904_SLAVE_ADDRESS, PMC_MCKR_CSS_SLOW_CLK);
  4022e4:	2200      	movs	r2, #0
  4022e6:	211a      	movs	r1, #26
  4022e8:	483f      	ldr	r0, [pc, #252]	; (4023e8 <main+0x238>)
  4022ea:	4b45      	ldr	r3, [pc, #276]	; (402400 <main+0x250>)
  4022ec:	4798      	blx	r3

	/* Enable the DAC master clock */
	PMC_ConfigurePCK2(PMC_MCKR_CSS_SLOW_CLK, PMC_MCKR_PRES_CLK_1);
  4022ee:	2100      	movs	r1, #0
  4022f0:	4608      	mov	r0, r1
  4022f2:	4b44      	ldr	r3, [pc, #272]	; (402404 <main+0x254>)
  4022f4:	4798      	blx	r3
	printf("Insert Line-in cable with PC Headphone output\n\r");
  4022f6:	4844      	ldr	r0, [pc, #272]	; (402408 <main+0x258>)
  4022f8:	4b22      	ldr	r3, [pc, #136]	; (402384 <main+0x1d4>)
  4022fa:	4798      	blx	r3
	PlayRecording();
  4022fc:	4b43      	ldr	r3, [pc, #268]	; (40240c <main+0x25c>)
  4022fe:	4798      	blx	r3
  402300:	e019      	b.n	402336 <main+0x186>
      SCB->DCIMVAC = op_addr;
  402302:	491d      	ldr	r1, [pc, #116]	; (402378 <main+0x1c8>)
  402304:	f8c1 225c 	str.w	r2, [r1, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
  402308:	3220      	adds	r2, #32
      op_size -=           linesize;
  40230a:	3b20      	subs	r3, #32
    while (op_size > 0) {
  40230c:	2b00      	cmp	r3, #0
  40230e:	dcf8      	bgt.n	402302 <main+0x152>
  __ASM volatile ("dsb 0xF":::"memory");
  402310:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402314:	f3bf 8f6f 	isb	sy
				/* If data received need to be handled by CPU,
				 * cache coherence operation is necessary */
				SCB_InvalidateDCache_by_Addr((uint32_t *)AudioNextBuffer[buf_flag - 1],
											MAX_DMA_SIZE * (BITS_BY_SLOT / 8));
					/* The users can handle the received data here. */
				AudioNextBuffer[(buf_flag + (TOTAL_Buffers - 1)) % (TOTAL_Buffers)] = 0;
  402318:	4b3d      	ldr	r3, [pc, #244]	; (402410 <main+0x260>)
  40231a:	781b      	ldrb	r3, [r3, #0]
  40231c:	3303      	adds	r3, #3
  40231e:	425a      	negs	r2, r3
  402320:	f003 0303 	and.w	r3, r3, #3
  402324:	f002 0203 	and.w	r2, r2, #3
  402328:	bf58      	it	pl
  40232a:	4253      	negpl	r3, r2
  40232c:	4a39      	ldr	r2, [pc, #228]	; (402414 <main+0x264>)
  40232e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402332:	2200      	movs	r2, #0
  402334:	605a      	str	r2, [r3, #4]
		if (cpu_flag == true) {
  402336:	4b37      	ldr	r3, [pc, #220]	; (402414 <main+0x264>)
  402338:	781b      	ldrb	r3, [r3, #0]
  40233a:	2b00      	cmp	r3, #0
  40233c:	d0fb      	beq.n	402336 <main+0x186>
			if (AudioNextBuffer[(buf_flag + (TOTAL_Buffers - 1)) %
  40233e:	4b34      	ldr	r3, [pc, #208]	; (402410 <main+0x260>)
  402340:	7819      	ldrb	r1, [r3, #0]
  402342:	1ccb      	adds	r3, r1, #3
  402344:	425a      	negs	r2, r3
  402346:	f003 0303 	and.w	r3, r3, #3
  40234a:	f002 0203 	and.w	r2, r2, #3
  40234e:	bf58      	it	pl
  402350:	4253      	negpl	r3, r2
  402352:	4a30      	ldr	r2, [pc, #192]	; (402414 <main+0x264>)
  402354:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402358:	685b      	ldr	r3, [r3, #4]
  40235a:	2b00      	cmp	r3, #0
  40235c:	d0eb      	beq.n	402336 <main+0x186>
				SCB_InvalidateDCache_by_Addr((uint32_t *)AudioNextBuffer[buf_flag - 1],
  40235e:	3901      	subs	r1, #1
  402360:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  402364:	684a      	ldr	r2, [r1, #4]
  __ASM volatile ("dsb 0xF":::"memory");
  402366:	f3bf 8f4f 	dsb	sy
     int32_t op_size = dsize;
  40236a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40236e:	e7cd      	b.n	40230c <main+0x15c>
  402370:	400e1850 	.word	0x400e1850
  402374:	004011c5 	.word	0x004011c5
  402378:	e000ed00 	.word	0xe000ed00
  40237c:	004099dc 	.word	0x004099dc
  402380:	004099e0 	.word	0x004099e0
  402384:	00402c25 	.word	0x00402c25
  402388:	00409a04 	.word	0x00409a04
  40238c:	00409a1c 	.word	0x00409a1c
  402390:	00409a24 	.word	0x00409a24
  402394:	00409a28 	.word	0x00409a28
  402398:	00409a34 	.word	0x00409a34
  40239c:	00409a40 	.word	0x00409a40
  4023a0:	00408cec 	.word	0x00408cec
  4023a4:	00400961 	.word	0x00400961
  4023a8:	00409a60 	.word	0x00409a60
  4023ac:	00409930 	.word	0x00409930
  4023b0:	0040065d 	.word	0x0040065d
  4023b4:	08f0d180 	.word	0x08f0d180
  4023b8:	004008d5 	.word	0x004008d5
  4023bc:	00010721 	.word	0x00010721
  4023c0:	004008ff 	.word	0x004008ff
  4023c4:	0040091b 	.word	0x0040091b
  4023c8:	00010702 	.word	0x00010702
  4023cc:	004008f9 	.word	0x004008f9
  4023d0:	0040090d 	.word	0x0040090d
  4023d4:	00401f19 	.word	0x00401f19
  4023d8:	004007f9 	.word	0x004007f9
  4023dc:	40018000 	.word	0x40018000
  4023e0:	00061a80 	.word	0x00061a80
  4023e4:	00400ab5 	.word	0x00400ab5
  4023e8:	20410cc0 	.word	0x20410cc0
  4023ec:	00400dad 	.word	0x00400dad
  4023f0:	e000e100 	.word	0xe000e100
  4023f4:	004003a1 	.word	0x004003a1
  4023f8:	0040036d 	.word	0x0040036d
  4023fc:	00409a84 	.word	0x00409a84
  402400:	004003cd 	.word	0x004003cd
  402404:	004008a5 	.word	0x004008a5
  402408:	00409a98 	.word	0x00409a98
  40240c:	00401fc1 	.word	0x00401fc1
  402410:	20400000 	.word	0x20400000
  402414:	20400a60 	.word	0x20400a60

00402418 <__assert_func>:
  402418:	b500      	push	{lr}
  40241a:	4c0a      	ldr	r4, [pc, #40]	; (402444 <__assert_func+0x2c>)
  40241c:	6826      	ldr	r6, [r4, #0]
  40241e:	4605      	mov	r5, r0
  402420:	b085      	sub	sp, #20
  402422:	461c      	mov	r4, r3
  402424:	68f0      	ldr	r0, [r6, #12]
  402426:	b152      	cbz	r2, 40243e <__assert_func+0x26>
  402428:	4b07      	ldr	r3, [pc, #28]	; (402448 <__assert_func+0x30>)
  40242a:	9202      	str	r2, [sp, #8]
  40242c:	e88d 000a 	stmia.w	sp, {r1, r3}
  402430:	4622      	mov	r2, r4
  402432:	462b      	mov	r3, r5
  402434:	4905      	ldr	r1, [pc, #20]	; (40244c <__assert_func+0x34>)
  402436:	f000 f80d 	bl	402454 <fiprintf>
  40243a:	f002 ff11 	bl	405260 <abort>
  40243e:	4b04      	ldr	r3, [pc, #16]	; (402450 <__assert_func+0x38>)
  402440:	461a      	mov	r2, r3
  402442:	e7f2      	b.n	40242a <__assert_func+0x12>
  402444:	20400004 	.word	0x20400004
  402448:	00409ac8 	.word	0x00409ac8
  40244c:	00409ad8 	.word	0x00409ad8
  402450:	004089b8 	.word	0x004089b8

00402454 <fiprintf>:
  402454:	b40e      	push	{r1, r2, r3}
  402456:	b510      	push	{r4, lr}
  402458:	b083      	sub	sp, #12
  40245a:	ab05      	add	r3, sp, #20
  40245c:	4c06      	ldr	r4, [pc, #24]	; (402478 <fiprintf+0x24>)
  40245e:	f853 2b04 	ldr.w	r2, [r3], #4
  402462:	9301      	str	r3, [sp, #4]
  402464:	4601      	mov	r1, r0
  402466:	6820      	ldr	r0, [r4, #0]
  402468:	f000 fd14 	bl	402e94 <_vfiprintf_r>
  40246c:	b003      	add	sp, #12
  40246e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402472:	b003      	add	sp, #12
  402474:	4770      	bx	lr
  402476:	bf00      	nop
  402478:	20400004 	.word	0x20400004

0040247c <__libc_init_array>:
  40247c:	b570      	push	{r4, r5, r6, lr}
  40247e:	4e0f      	ldr	r6, [pc, #60]	; (4024bc <__libc_init_array+0x40>)
  402480:	4d0f      	ldr	r5, [pc, #60]	; (4024c0 <__libc_init_array+0x44>)
  402482:	1b76      	subs	r6, r6, r5
  402484:	10b6      	asrs	r6, r6, #2
  402486:	bf18      	it	ne
  402488:	2400      	movne	r4, #0
  40248a:	d005      	beq.n	402498 <__libc_init_array+0x1c>
  40248c:	3401      	adds	r4, #1
  40248e:	f855 3b04 	ldr.w	r3, [r5], #4
  402492:	4798      	blx	r3
  402494:	42a6      	cmp	r6, r4
  402496:	d1f9      	bne.n	40248c <__libc_init_array+0x10>
  402498:	4e0a      	ldr	r6, [pc, #40]	; (4024c4 <__libc_init_array+0x48>)
  40249a:	4d0b      	ldr	r5, [pc, #44]	; (4024c8 <__libc_init_array+0x4c>)
  40249c:	1b76      	subs	r6, r6, r5
  40249e:	f007 fc87 	bl	409db0 <_init>
  4024a2:	10b6      	asrs	r6, r6, #2
  4024a4:	bf18      	it	ne
  4024a6:	2400      	movne	r4, #0
  4024a8:	d006      	beq.n	4024b8 <__libc_init_array+0x3c>
  4024aa:	3401      	adds	r4, #1
  4024ac:	f855 3b04 	ldr.w	r3, [r5], #4
  4024b0:	4798      	blx	r3
  4024b2:	42a6      	cmp	r6, r4
  4024b4:	d1f9      	bne.n	4024aa <__libc_init_array+0x2e>
  4024b6:	bd70      	pop	{r4, r5, r6, pc}
  4024b8:	bd70      	pop	{r4, r5, r6, pc}
  4024ba:	bf00      	nop
  4024bc:	00409dbc 	.word	0x00409dbc
  4024c0:	00409dbc 	.word	0x00409dbc
  4024c4:	00409dc4 	.word	0x00409dc4
  4024c8:	00409dbc 	.word	0x00409dbc

004024cc <malloc>:
  4024cc:	4b02      	ldr	r3, [pc, #8]	; (4024d8 <malloc+0xc>)
  4024ce:	4601      	mov	r1, r0
  4024d0:	6818      	ldr	r0, [r3, #0]
  4024d2:	f000 b803 	b.w	4024dc <_malloc_r>
  4024d6:	bf00      	nop
  4024d8:	20400004 	.word	0x20400004

004024dc <_malloc_r>:
  4024dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4024e0:	f101 060b 	add.w	r6, r1, #11
  4024e4:	2e16      	cmp	r6, #22
  4024e6:	b083      	sub	sp, #12
  4024e8:	4605      	mov	r5, r0
  4024ea:	f240 809e 	bls.w	40262a <_malloc_r+0x14e>
  4024ee:	f036 0607 	bics.w	r6, r6, #7
  4024f2:	f100 80bd 	bmi.w	402670 <_malloc_r+0x194>
  4024f6:	42b1      	cmp	r1, r6
  4024f8:	f200 80ba 	bhi.w	402670 <_malloc_r+0x194>
  4024fc:	f000 fb86 	bl	402c0c <__malloc_lock>
  402500:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  402504:	f0c0 8293 	bcc.w	402a2e <_malloc_r+0x552>
  402508:	0a73      	lsrs	r3, r6, #9
  40250a:	f000 80b8 	beq.w	40267e <_malloc_r+0x1a2>
  40250e:	2b04      	cmp	r3, #4
  402510:	f200 8179 	bhi.w	402806 <_malloc_r+0x32a>
  402514:	09b3      	lsrs	r3, r6, #6
  402516:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40251a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40251e:	00c3      	lsls	r3, r0, #3
  402520:	4fbf      	ldr	r7, [pc, #764]	; (402820 <_malloc_r+0x344>)
  402522:	443b      	add	r3, r7
  402524:	f1a3 0108 	sub.w	r1, r3, #8
  402528:	685c      	ldr	r4, [r3, #4]
  40252a:	42a1      	cmp	r1, r4
  40252c:	d106      	bne.n	40253c <_malloc_r+0x60>
  40252e:	e00c      	b.n	40254a <_malloc_r+0x6e>
  402530:	2a00      	cmp	r2, #0
  402532:	f280 80aa 	bge.w	40268a <_malloc_r+0x1ae>
  402536:	68e4      	ldr	r4, [r4, #12]
  402538:	42a1      	cmp	r1, r4
  40253a:	d006      	beq.n	40254a <_malloc_r+0x6e>
  40253c:	6863      	ldr	r3, [r4, #4]
  40253e:	f023 0303 	bic.w	r3, r3, #3
  402542:	1b9a      	subs	r2, r3, r6
  402544:	2a0f      	cmp	r2, #15
  402546:	ddf3      	ble.n	402530 <_malloc_r+0x54>
  402548:	4670      	mov	r0, lr
  40254a:	693c      	ldr	r4, [r7, #16]
  40254c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 402834 <_malloc_r+0x358>
  402550:	4574      	cmp	r4, lr
  402552:	f000 81ab 	beq.w	4028ac <_malloc_r+0x3d0>
  402556:	6863      	ldr	r3, [r4, #4]
  402558:	f023 0303 	bic.w	r3, r3, #3
  40255c:	1b9a      	subs	r2, r3, r6
  40255e:	2a0f      	cmp	r2, #15
  402560:	f300 8190 	bgt.w	402884 <_malloc_r+0x3a8>
  402564:	2a00      	cmp	r2, #0
  402566:	f8c7 e014 	str.w	lr, [r7, #20]
  40256a:	f8c7 e010 	str.w	lr, [r7, #16]
  40256e:	f280 809d 	bge.w	4026ac <_malloc_r+0x1d0>
  402572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402576:	f080 8161 	bcs.w	40283c <_malloc_r+0x360>
  40257a:	08db      	lsrs	r3, r3, #3
  40257c:	f103 0c01 	add.w	ip, r3, #1
  402580:	1099      	asrs	r1, r3, #2
  402582:	687a      	ldr	r2, [r7, #4]
  402584:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  402588:	f8c4 8008 	str.w	r8, [r4, #8]
  40258c:	2301      	movs	r3, #1
  40258e:	408b      	lsls	r3, r1
  402590:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  402594:	4313      	orrs	r3, r2
  402596:	3908      	subs	r1, #8
  402598:	60e1      	str	r1, [r4, #12]
  40259a:	607b      	str	r3, [r7, #4]
  40259c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4025a0:	f8c8 400c 	str.w	r4, [r8, #12]
  4025a4:	1082      	asrs	r2, r0, #2
  4025a6:	2401      	movs	r4, #1
  4025a8:	4094      	lsls	r4, r2
  4025aa:	429c      	cmp	r4, r3
  4025ac:	f200 808b 	bhi.w	4026c6 <_malloc_r+0x1ea>
  4025b0:	421c      	tst	r4, r3
  4025b2:	d106      	bne.n	4025c2 <_malloc_r+0xe6>
  4025b4:	f020 0003 	bic.w	r0, r0, #3
  4025b8:	0064      	lsls	r4, r4, #1
  4025ba:	421c      	tst	r4, r3
  4025bc:	f100 0004 	add.w	r0, r0, #4
  4025c0:	d0fa      	beq.n	4025b8 <_malloc_r+0xdc>
  4025c2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4025c6:	46cc      	mov	ip, r9
  4025c8:	4680      	mov	r8, r0
  4025ca:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4025ce:	459c      	cmp	ip, r3
  4025d0:	d107      	bne.n	4025e2 <_malloc_r+0x106>
  4025d2:	e16d      	b.n	4028b0 <_malloc_r+0x3d4>
  4025d4:	2a00      	cmp	r2, #0
  4025d6:	f280 817b 	bge.w	4028d0 <_malloc_r+0x3f4>
  4025da:	68db      	ldr	r3, [r3, #12]
  4025dc:	459c      	cmp	ip, r3
  4025de:	f000 8167 	beq.w	4028b0 <_malloc_r+0x3d4>
  4025e2:	6859      	ldr	r1, [r3, #4]
  4025e4:	f021 0103 	bic.w	r1, r1, #3
  4025e8:	1b8a      	subs	r2, r1, r6
  4025ea:	2a0f      	cmp	r2, #15
  4025ec:	ddf2      	ble.n	4025d4 <_malloc_r+0xf8>
  4025ee:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4025f2:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4025f6:	9300      	str	r3, [sp, #0]
  4025f8:	199c      	adds	r4, r3, r6
  4025fa:	4628      	mov	r0, r5
  4025fc:	f046 0601 	orr.w	r6, r6, #1
  402600:	f042 0501 	orr.w	r5, r2, #1
  402604:	605e      	str	r6, [r3, #4]
  402606:	f8c8 c00c 	str.w	ip, [r8, #12]
  40260a:	f8cc 8008 	str.w	r8, [ip, #8]
  40260e:	617c      	str	r4, [r7, #20]
  402610:	613c      	str	r4, [r7, #16]
  402612:	f8c4 e00c 	str.w	lr, [r4, #12]
  402616:	f8c4 e008 	str.w	lr, [r4, #8]
  40261a:	6065      	str	r5, [r4, #4]
  40261c:	505a      	str	r2, [r3, r1]
  40261e:	f000 fafb 	bl	402c18 <__malloc_unlock>
  402622:	9b00      	ldr	r3, [sp, #0]
  402624:	f103 0408 	add.w	r4, r3, #8
  402628:	e01e      	b.n	402668 <_malloc_r+0x18c>
  40262a:	2910      	cmp	r1, #16
  40262c:	d820      	bhi.n	402670 <_malloc_r+0x194>
  40262e:	f000 faed 	bl	402c0c <__malloc_lock>
  402632:	2610      	movs	r6, #16
  402634:	2318      	movs	r3, #24
  402636:	2002      	movs	r0, #2
  402638:	4f79      	ldr	r7, [pc, #484]	; (402820 <_malloc_r+0x344>)
  40263a:	443b      	add	r3, r7
  40263c:	f1a3 0208 	sub.w	r2, r3, #8
  402640:	685c      	ldr	r4, [r3, #4]
  402642:	4294      	cmp	r4, r2
  402644:	f000 813d 	beq.w	4028c2 <_malloc_r+0x3e6>
  402648:	6863      	ldr	r3, [r4, #4]
  40264a:	68e1      	ldr	r1, [r4, #12]
  40264c:	68a6      	ldr	r6, [r4, #8]
  40264e:	f023 0303 	bic.w	r3, r3, #3
  402652:	4423      	add	r3, r4
  402654:	4628      	mov	r0, r5
  402656:	685a      	ldr	r2, [r3, #4]
  402658:	60f1      	str	r1, [r6, #12]
  40265a:	f042 0201 	orr.w	r2, r2, #1
  40265e:	608e      	str	r6, [r1, #8]
  402660:	605a      	str	r2, [r3, #4]
  402662:	f000 fad9 	bl	402c18 <__malloc_unlock>
  402666:	3408      	adds	r4, #8
  402668:	4620      	mov	r0, r4
  40266a:	b003      	add	sp, #12
  40266c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402670:	2400      	movs	r4, #0
  402672:	230c      	movs	r3, #12
  402674:	4620      	mov	r0, r4
  402676:	602b      	str	r3, [r5, #0]
  402678:	b003      	add	sp, #12
  40267a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40267e:	2040      	movs	r0, #64	; 0x40
  402680:	f44f 7300 	mov.w	r3, #512	; 0x200
  402684:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  402688:	e74a      	b.n	402520 <_malloc_r+0x44>
  40268a:	4423      	add	r3, r4
  40268c:	68e1      	ldr	r1, [r4, #12]
  40268e:	685a      	ldr	r2, [r3, #4]
  402690:	68a6      	ldr	r6, [r4, #8]
  402692:	f042 0201 	orr.w	r2, r2, #1
  402696:	60f1      	str	r1, [r6, #12]
  402698:	4628      	mov	r0, r5
  40269a:	608e      	str	r6, [r1, #8]
  40269c:	605a      	str	r2, [r3, #4]
  40269e:	f000 fabb 	bl	402c18 <__malloc_unlock>
  4026a2:	3408      	adds	r4, #8
  4026a4:	4620      	mov	r0, r4
  4026a6:	b003      	add	sp, #12
  4026a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4026ac:	4423      	add	r3, r4
  4026ae:	4628      	mov	r0, r5
  4026b0:	685a      	ldr	r2, [r3, #4]
  4026b2:	f042 0201 	orr.w	r2, r2, #1
  4026b6:	605a      	str	r2, [r3, #4]
  4026b8:	f000 faae 	bl	402c18 <__malloc_unlock>
  4026bc:	3408      	adds	r4, #8
  4026be:	4620      	mov	r0, r4
  4026c0:	b003      	add	sp, #12
  4026c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4026c6:	68bc      	ldr	r4, [r7, #8]
  4026c8:	6863      	ldr	r3, [r4, #4]
  4026ca:	f023 0803 	bic.w	r8, r3, #3
  4026ce:	45b0      	cmp	r8, r6
  4026d0:	d304      	bcc.n	4026dc <_malloc_r+0x200>
  4026d2:	eba8 0306 	sub.w	r3, r8, r6
  4026d6:	2b0f      	cmp	r3, #15
  4026d8:	f300 8085 	bgt.w	4027e6 <_malloc_r+0x30a>
  4026dc:	f8df 9158 	ldr.w	r9, [pc, #344]	; 402838 <_malloc_r+0x35c>
  4026e0:	4b50      	ldr	r3, [pc, #320]	; (402824 <_malloc_r+0x348>)
  4026e2:	f8d9 2000 	ldr.w	r2, [r9]
  4026e6:	681b      	ldr	r3, [r3, #0]
  4026e8:	3201      	adds	r2, #1
  4026ea:	4433      	add	r3, r6
  4026ec:	eb04 0a08 	add.w	sl, r4, r8
  4026f0:	f000 8155 	beq.w	40299e <_malloc_r+0x4c2>
  4026f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4026f8:	330f      	adds	r3, #15
  4026fa:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4026fe:	f02b 0b0f 	bic.w	fp, fp, #15
  402702:	4659      	mov	r1, fp
  402704:	4628      	mov	r0, r5
  402706:	f000 faa1 	bl	402c4c <_sbrk_r>
  40270a:	1c41      	adds	r1, r0, #1
  40270c:	4602      	mov	r2, r0
  40270e:	f000 80fc 	beq.w	40290a <_malloc_r+0x42e>
  402712:	4582      	cmp	sl, r0
  402714:	f200 80f7 	bhi.w	402906 <_malloc_r+0x42a>
  402718:	4b43      	ldr	r3, [pc, #268]	; (402828 <_malloc_r+0x34c>)
  40271a:	6819      	ldr	r1, [r3, #0]
  40271c:	4459      	add	r1, fp
  40271e:	6019      	str	r1, [r3, #0]
  402720:	f000 814d 	beq.w	4029be <_malloc_r+0x4e2>
  402724:	f8d9 0000 	ldr.w	r0, [r9]
  402728:	3001      	adds	r0, #1
  40272a:	bf1b      	ittet	ne
  40272c:	eba2 0a0a 	subne.w	sl, r2, sl
  402730:	4451      	addne	r1, sl
  402732:	f8c9 2000 	streq.w	r2, [r9]
  402736:	6019      	strne	r1, [r3, #0]
  402738:	f012 0107 	ands.w	r1, r2, #7
  40273c:	f000 8115 	beq.w	40296a <_malloc_r+0x48e>
  402740:	f1c1 0008 	rsb	r0, r1, #8
  402744:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  402748:	4402      	add	r2, r0
  40274a:	3108      	adds	r1, #8
  40274c:	eb02 090b 	add.w	r9, r2, fp
  402750:	f3c9 090b 	ubfx	r9, r9, #0, #12
  402754:	eba1 0909 	sub.w	r9, r1, r9
  402758:	4649      	mov	r1, r9
  40275a:	4628      	mov	r0, r5
  40275c:	9301      	str	r3, [sp, #4]
  40275e:	9200      	str	r2, [sp, #0]
  402760:	f000 fa74 	bl	402c4c <_sbrk_r>
  402764:	1c43      	adds	r3, r0, #1
  402766:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40276a:	f000 8143 	beq.w	4029f4 <_malloc_r+0x518>
  40276e:	1a80      	subs	r0, r0, r2
  402770:	4448      	add	r0, r9
  402772:	f040 0001 	orr.w	r0, r0, #1
  402776:	6819      	ldr	r1, [r3, #0]
  402778:	60ba      	str	r2, [r7, #8]
  40277a:	4449      	add	r1, r9
  40277c:	42bc      	cmp	r4, r7
  40277e:	6050      	str	r0, [r2, #4]
  402780:	6019      	str	r1, [r3, #0]
  402782:	d017      	beq.n	4027b4 <_malloc_r+0x2d8>
  402784:	f1b8 0f0f 	cmp.w	r8, #15
  402788:	f240 80fb 	bls.w	402982 <_malloc_r+0x4a6>
  40278c:	6860      	ldr	r0, [r4, #4]
  40278e:	f1a8 020c 	sub.w	r2, r8, #12
  402792:	f022 0207 	bic.w	r2, r2, #7
  402796:	eb04 0e02 	add.w	lr, r4, r2
  40279a:	f000 0001 	and.w	r0, r0, #1
  40279e:	f04f 0c05 	mov.w	ip, #5
  4027a2:	4310      	orrs	r0, r2
  4027a4:	2a0f      	cmp	r2, #15
  4027a6:	6060      	str	r0, [r4, #4]
  4027a8:	f8ce c004 	str.w	ip, [lr, #4]
  4027ac:	f8ce c008 	str.w	ip, [lr, #8]
  4027b0:	f200 8117 	bhi.w	4029e2 <_malloc_r+0x506>
  4027b4:	4b1d      	ldr	r3, [pc, #116]	; (40282c <_malloc_r+0x350>)
  4027b6:	68bc      	ldr	r4, [r7, #8]
  4027b8:	681a      	ldr	r2, [r3, #0]
  4027ba:	4291      	cmp	r1, r2
  4027bc:	bf88      	it	hi
  4027be:	6019      	strhi	r1, [r3, #0]
  4027c0:	4b1b      	ldr	r3, [pc, #108]	; (402830 <_malloc_r+0x354>)
  4027c2:	681a      	ldr	r2, [r3, #0]
  4027c4:	4291      	cmp	r1, r2
  4027c6:	6862      	ldr	r2, [r4, #4]
  4027c8:	bf88      	it	hi
  4027ca:	6019      	strhi	r1, [r3, #0]
  4027cc:	f022 0203 	bic.w	r2, r2, #3
  4027d0:	4296      	cmp	r6, r2
  4027d2:	eba2 0306 	sub.w	r3, r2, r6
  4027d6:	d801      	bhi.n	4027dc <_malloc_r+0x300>
  4027d8:	2b0f      	cmp	r3, #15
  4027da:	dc04      	bgt.n	4027e6 <_malloc_r+0x30a>
  4027dc:	4628      	mov	r0, r5
  4027de:	f000 fa1b 	bl	402c18 <__malloc_unlock>
  4027e2:	2400      	movs	r4, #0
  4027e4:	e740      	b.n	402668 <_malloc_r+0x18c>
  4027e6:	19a2      	adds	r2, r4, r6
  4027e8:	f043 0301 	orr.w	r3, r3, #1
  4027ec:	f046 0601 	orr.w	r6, r6, #1
  4027f0:	6066      	str	r6, [r4, #4]
  4027f2:	4628      	mov	r0, r5
  4027f4:	60ba      	str	r2, [r7, #8]
  4027f6:	6053      	str	r3, [r2, #4]
  4027f8:	f000 fa0e 	bl	402c18 <__malloc_unlock>
  4027fc:	3408      	adds	r4, #8
  4027fe:	4620      	mov	r0, r4
  402800:	b003      	add	sp, #12
  402802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402806:	2b14      	cmp	r3, #20
  402808:	d971      	bls.n	4028ee <_malloc_r+0x412>
  40280a:	2b54      	cmp	r3, #84	; 0x54
  40280c:	f200 80a3 	bhi.w	402956 <_malloc_r+0x47a>
  402810:	0b33      	lsrs	r3, r6, #12
  402812:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  402816:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40281a:	00c3      	lsls	r3, r0, #3
  40281c:	e680      	b.n	402520 <_malloc_r+0x44>
  40281e:	bf00      	nop
  402820:	20400430 	.word	0x20400430
  402824:	20410d00 	.word	0x20410d00
  402828:	20410cd0 	.word	0x20410cd0
  40282c:	20410cf8 	.word	0x20410cf8
  402830:	20410cfc 	.word	0x20410cfc
  402834:	20400438 	.word	0x20400438
  402838:	20400838 	.word	0x20400838
  40283c:	0a5a      	lsrs	r2, r3, #9
  40283e:	2a04      	cmp	r2, #4
  402840:	d95b      	bls.n	4028fa <_malloc_r+0x41e>
  402842:	2a14      	cmp	r2, #20
  402844:	f200 80ae 	bhi.w	4029a4 <_malloc_r+0x4c8>
  402848:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40284c:	00c9      	lsls	r1, r1, #3
  40284e:	325b      	adds	r2, #91	; 0x5b
  402850:	eb07 0c01 	add.w	ip, r7, r1
  402854:	5879      	ldr	r1, [r7, r1]
  402856:	f1ac 0c08 	sub.w	ip, ip, #8
  40285a:	458c      	cmp	ip, r1
  40285c:	f000 8088 	beq.w	402970 <_malloc_r+0x494>
  402860:	684a      	ldr	r2, [r1, #4]
  402862:	f022 0203 	bic.w	r2, r2, #3
  402866:	4293      	cmp	r3, r2
  402868:	d273      	bcs.n	402952 <_malloc_r+0x476>
  40286a:	6889      	ldr	r1, [r1, #8]
  40286c:	458c      	cmp	ip, r1
  40286e:	d1f7      	bne.n	402860 <_malloc_r+0x384>
  402870:	f8dc 200c 	ldr.w	r2, [ip, #12]
  402874:	687b      	ldr	r3, [r7, #4]
  402876:	60e2      	str	r2, [r4, #12]
  402878:	f8c4 c008 	str.w	ip, [r4, #8]
  40287c:	6094      	str	r4, [r2, #8]
  40287e:	f8cc 400c 	str.w	r4, [ip, #12]
  402882:	e68f      	b.n	4025a4 <_malloc_r+0xc8>
  402884:	19a1      	adds	r1, r4, r6
  402886:	f046 0c01 	orr.w	ip, r6, #1
  40288a:	f042 0601 	orr.w	r6, r2, #1
  40288e:	f8c4 c004 	str.w	ip, [r4, #4]
  402892:	4628      	mov	r0, r5
  402894:	6179      	str	r1, [r7, #20]
  402896:	6139      	str	r1, [r7, #16]
  402898:	f8c1 e00c 	str.w	lr, [r1, #12]
  40289c:	f8c1 e008 	str.w	lr, [r1, #8]
  4028a0:	604e      	str	r6, [r1, #4]
  4028a2:	50e2      	str	r2, [r4, r3]
  4028a4:	f000 f9b8 	bl	402c18 <__malloc_unlock>
  4028a8:	3408      	adds	r4, #8
  4028aa:	e6dd      	b.n	402668 <_malloc_r+0x18c>
  4028ac:	687b      	ldr	r3, [r7, #4]
  4028ae:	e679      	b.n	4025a4 <_malloc_r+0xc8>
  4028b0:	f108 0801 	add.w	r8, r8, #1
  4028b4:	f018 0f03 	tst.w	r8, #3
  4028b8:	f10c 0c08 	add.w	ip, ip, #8
  4028bc:	f47f ae85 	bne.w	4025ca <_malloc_r+0xee>
  4028c0:	e02d      	b.n	40291e <_malloc_r+0x442>
  4028c2:	68dc      	ldr	r4, [r3, #12]
  4028c4:	42a3      	cmp	r3, r4
  4028c6:	bf08      	it	eq
  4028c8:	3002      	addeq	r0, #2
  4028ca:	f43f ae3e 	beq.w	40254a <_malloc_r+0x6e>
  4028ce:	e6bb      	b.n	402648 <_malloc_r+0x16c>
  4028d0:	4419      	add	r1, r3
  4028d2:	461c      	mov	r4, r3
  4028d4:	684a      	ldr	r2, [r1, #4]
  4028d6:	68db      	ldr	r3, [r3, #12]
  4028d8:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4028dc:	f042 0201 	orr.w	r2, r2, #1
  4028e0:	604a      	str	r2, [r1, #4]
  4028e2:	4628      	mov	r0, r5
  4028e4:	60f3      	str	r3, [r6, #12]
  4028e6:	609e      	str	r6, [r3, #8]
  4028e8:	f000 f996 	bl	402c18 <__malloc_unlock>
  4028ec:	e6bc      	b.n	402668 <_malloc_r+0x18c>
  4028ee:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4028f2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4028f6:	00c3      	lsls	r3, r0, #3
  4028f8:	e612      	b.n	402520 <_malloc_r+0x44>
  4028fa:	099a      	lsrs	r2, r3, #6
  4028fc:	f102 0139 	add.w	r1, r2, #57	; 0x39
  402900:	00c9      	lsls	r1, r1, #3
  402902:	3238      	adds	r2, #56	; 0x38
  402904:	e7a4      	b.n	402850 <_malloc_r+0x374>
  402906:	42bc      	cmp	r4, r7
  402908:	d054      	beq.n	4029b4 <_malloc_r+0x4d8>
  40290a:	68bc      	ldr	r4, [r7, #8]
  40290c:	6862      	ldr	r2, [r4, #4]
  40290e:	f022 0203 	bic.w	r2, r2, #3
  402912:	e75d      	b.n	4027d0 <_malloc_r+0x2f4>
  402914:	f859 3908 	ldr.w	r3, [r9], #-8
  402918:	4599      	cmp	r9, r3
  40291a:	f040 8086 	bne.w	402a2a <_malloc_r+0x54e>
  40291e:	f010 0f03 	tst.w	r0, #3
  402922:	f100 30ff 	add.w	r0, r0, #4294967295
  402926:	d1f5      	bne.n	402914 <_malloc_r+0x438>
  402928:	687b      	ldr	r3, [r7, #4]
  40292a:	ea23 0304 	bic.w	r3, r3, r4
  40292e:	607b      	str	r3, [r7, #4]
  402930:	0064      	lsls	r4, r4, #1
  402932:	429c      	cmp	r4, r3
  402934:	f63f aec7 	bhi.w	4026c6 <_malloc_r+0x1ea>
  402938:	2c00      	cmp	r4, #0
  40293a:	f43f aec4 	beq.w	4026c6 <_malloc_r+0x1ea>
  40293e:	421c      	tst	r4, r3
  402940:	4640      	mov	r0, r8
  402942:	f47f ae3e 	bne.w	4025c2 <_malloc_r+0xe6>
  402946:	0064      	lsls	r4, r4, #1
  402948:	421c      	tst	r4, r3
  40294a:	f100 0004 	add.w	r0, r0, #4
  40294e:	d0fa      	beq.n	402946 <_malloc_r+0x46a>
  402950:	e637      	b.n	4025c2 <_malloc_r+0xe6>
  402952:	468c      	mov	ip, r1
  402954:	e78c      	b.n	402870 <_malloc_r+0x394>
  402956:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40295a:	d815      	bhi.n	402988 <_malloc_r+0x4ac>
  40295c:	0bf3      	lsrs	r3, r6, #15
  40295e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  402962:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  402966:	00c3      	lsls	r3, r0, #3
  402968:	e5da      	b.n	402520 <_malloc_r+0x44>
  40296a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40296e:	e6ed      	b.n	40274c <_malloc_r+0x270>
  402970:	687b      	ldr	r3, [r7, #4]
  402972:	1092      	asrs	r2, r2, #2
  402974:	2101      	movs	r1, #1
  402976:	fa01 f202 	lsl.w	r2, r1, r2
  40297a:	4313      	orrs	r3, r2
  40297c:	607b      	str	r3, [r7, #4]
  40297e:	4662      	mov	r2, ip
  402980:	e779      	b.n	402876 <_malloc_r+0x39a>
  402982:	2301      	movs	r3, #1
  402984:	6053      	str	r3, [r2, #4]
  402986:	e729      	b.n	4027dc <_malloc_r+0x300>
  402988:	f240 5254 	movw	r2, #1364	; 0x554
  40298c:	4293      	cmp	r3, r2
  40298e:	d822      	bhi.n	4029d6 <_malloc_r+0x4fa>
  402990:	0cb3      	lsrs	r3, r6, #18
  402992:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  402996:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40299a:	00c3      	lsls	r3, r0, #3
  40299c:	e5c0      	b.n	402520 <_malloc_r+0x44>
  40299e:	f103 0b10 	add.w	fp, r3, #16
  4029a2:	e6ae      	b.n	402702 <_malloc_r+0x226>
  4029a4:	2a54      	cmp	r2, #84	; 0x54
  4029a6:	d829      	bhi.n	4029fc <_malloc_r+0x520>
  4029a8:	0b1a      	lsrs	r2, r3, #12
  4029aa:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4029ae:	00c9      	lsls	r1, r1, #3
  4029b0:	326e      	adds	r2, #110	; 0x6e
  4029b2:	e74d      	b.n	402850 <_malloc_r+0x374>
  4029b4:	4b20      	ldr	r3, [pc, #128]	; (402a38 <_malloc_r+0x55c>)
  4029b6:	6819      	ldr	r1, [r3, #0]
  4029b8:	4459      	add	r1, fp
  4029ba:	6019      	str	r1, [r3, #0]
  4029bc:	e6b2      	b.n	402724 <_malloc_r+0x248>
  4029be:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4029c2:	2800      	cmp	r0, #0
  4029c4:	f47f aeae 	bne.w	402724 <_malloc_r+0x248>
  4029c8:	eb08 030b 	add.w	r3, r8, fp
  4029cc:	68ba      	ldr	r2, [r7, #8]
  4029ce:	f043 0301 	orr.w	r3, r3, #1
  4029d2:	6053      	str	r3, [r2, #4]
  4029d4:	e6ee      	b.n	4027b4 <_malloc_r+0x2d8>
  4029d6:	207f      	movs	r0, #127	; 0x7f
  4029d8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4029dc:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4029e0:	e59e      	b.n	402520 <_malloc_r+0x44>
  4029e2:	f104 0108 	add.w	r1, r4, #8
  4029e6:	4628      	mov	r0, r5
  4029e8:	9300      	str	r3, [sp, #0]
  4029ea:	f003 fe25 	bl	406638 <_free_r>
  4029ee:	9b00      	ldr	r3, [sp, #0]
  4029f0:	6819      	ldr	r1, [r3, #0]
  4029f2:	e6df      	b.n	4027b4 <_malloc_r+0x2d8>
  4029f4:	2001      	movs	r0, #1
  4029f6:	f04f 0900 	mov.w	r9, #0
  4029fa:	e6bc      	b.n	402776 <_malloc_r+0x29a>
  4029fc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402a00:	d805      	bhi.n	402a0e <_malloc_r+0x532>
  402a02:	0bda      	lsrs	r2, r3, #15
  402a04:	f102 0178 	add.w	r1, r2, #120	; 0x78
  402a08:	00c9      	lsls	r1, r1, #3
  402a0a:	3277      	adds	r2, #119	; 0x77
  402a0c:	e720      	b.n	402850 <_malloc_r+0x374>
  402a0e:	f240 5154 	movw	r1, #1364	; 0x554
  402a12:	428a      	cmp	r2, r1
  402a14:	d805      	bhi.n	402a22 <_malloc_r+0x546>
  402a16:	0c9a      	lsrs	r2, r3, #18
  402a18:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  402a1c:	00c9      	lsls	r1, r1, #3
  402a1e:	327c      	adds	r2, #124	; 0x7c
  402a20:	e716      	b.n	402850 <_malloc_r+0x374>
  402a22:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  402a26:	227e      	movs	r2, #126	; 0x7e
  402a28:	e712      	b.n	402850 <_malloc_r+0x374>
  402a2a:	687b      	ldr	r3, [r7, #4]
  402a2c:	e780      	b.n	402930 <_malloc_r+0x454>
  402a2e:	08f0      	lsrs	r0, r6, #3
  402a30:	f106 0308 	add.w	r3, r6, #8
  402a34:	e600      	b.n	402638 <_malloc_r+0x15c>
  402a36:	bf00      	nop
  402a38:	20410cd0 	.word	0x20410cd0

00402a3c <memcpy>:
  402a3c:	4684      	mov	ip, r0
  402a3e:	ea41 0300 	orr.w	r3, r1, r0
  402a42:	f013 0303 	ands.w	r3, r3, #3
  402a46:	d16d      	bne.n	402b24 <memcpy+0xe8>
  402a48:	3a40      	subs	r2, #64	; 0x40
  402a4a:	d341      	bcc.n	402ad0 <memcpy+0x94>
  402a4c:	f851 3b04 	ldr.w	r3, [r1], #4
  402a50:	f840 3b04 	str.w	r3, [r0], #4
  402a54:	f851 3b04 	ldr.w	r3, [r1], #4
  402a58:	f840 3b04 	str.w	r3, [r0], #4
  402a5c:	f851 3b04 	ldr.w	r3, [r1], #4
  402a60:	f840 3b04 	str.w	r3, [r0], #4
  402a64:	f851 3b04 	ldr.w	r3, [r1], #4
  402a68:	f840 3b04 	str.w	r3, [r0], #4
  402a6c:	f851 3b04 	ldr.w	r3, [r1], #4
  402a70:	f840 3b04 	str.w	r3, [r0], #4
  402a74:	f851 3b04 	ldr.w	r3, [r1], #4
  402a78:	f840 3b04 	str.w	r3, [r0], #4
  402a7c:	f851 3b04 	ldr.w	r3, [r1], #4
  402a80:	f840 3b04 	str.w	r3, [r0], #4
  402a84:	f851 3b04 	ldr.w	r3, [r1], #4
  402a88:	f840 3b04 	str.w	r3, [r0], #4
  402a8c:	f851 3b04 	ldr.w	r3, [r1], #4
  402a90:	f840 3b04 	str.w	r3, [r0], #4
  402a94:	f851 3b04 	ldr.w	r3, [r1], #4
  402a98:	f840 3b04 	str.w	r3, [r0], #4
  402a9c:	f851 3b04 	ldr.w	r3, [r1], #4
  402aa0:	f840 3b04 	str.w	r3, [r0], #4
  402aa4:	f851 3b04 	ldr.w	r3, [r1], #4
  402aa8:	f840 3b04 	str.w	r3, [r0], #4
  402aac:	f851 3b04 	ldr.w	r3, [r1], #4
  402ab0:	f840 3b04 	str.w	r3, [r0], #4
  402ab4:	f851 3b04 	ldr.w	r3, [r1], #4
  402ab8:	f840 3b04 	str.w	r3, [r0], #4
  402abc:	f851 3b04 	ldr.w	r3, [r1], #4
  402ac0:	f840 3b04 	str.w	r3, [r0], #4
  402ac4:	f851 3b04 	ldr.w	r3, [r1], #4
  402ac8:	f840 3b04 	str.w	r3, [r0], #4
  402acc:	3a40      	subs	r2, #64	; 0x40
  402ace:	d2bd      	bcs.n	402a4c <memcpy+0x10>
  402ad0:	3230      	adds	r2, #48	; 0x30
  402ad2:	d311      	bcc.n	402af8 <memcpy+0xbc>
  402ad4:	f851 3b04 	ldr.w	r3, [r1], #4
  402ad8:	f840 3b04 	str.w	r3, [r0], #4
  402adc:	f851 3b04 	ldr.w	r3, [r1], #4
  402ae0:	f840 3b04 	str.w	r3, [r0], #4
  402ae4:	f851 3b04 	ldr.w	r3, [r1], #4
  402ae8:	f840 3b04 	str.w	r3, [r0], #4
  402aec:	f851 3b04 	ldr.w	r3, [r1], #4
  402af0:	f840 3b04 	str.w	r3, [r0], #4
  402af4:	3a10      	subs	r2, #16
  402af6:	d2ed      	bcs.n	402ad4 <memcpy+0x98>
  402af8:	320c      	adds	r2, #12
  402afa:	d305      	bcc.n	402b08 <memcpy+0xcc>
  402afc:	f851 3b04 	ldr.w	r3, [r1], #4
  402b00:	f840 3b04 	str.w	r3, [r0], #4
  402b04:	3a04      	subs	r2, #4
  402b06:	d2f9      	bcs.n	402afc <memcpy+0xc0>
  402b08:	3204      	adds	r2, #4
  402b0a:	d008      	beq.n	402b1e <memcpy+0xe2>
  402b0c:	07d2      	lsls	r2, r2, #31
  402b0e:	bf1c      	itt	ne
  402b10:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402b14:	f800 3b01 	strbne.w	r3, [r0], #1
  402b18:	d301      	bcc.n	402b1e <memcpy+0xe2>
  402b1a:	880b      	ldrh	r3, [r1, #0]
  402b1c:	8003      	strh	r3, [r0, #0]
  402b1e:	4660      	mov	r0, ip
  402b20:	4770      	bx	lr
  402b22:	bf00      	nop
  402b24:	2a08      	cmp	r2, #8
  402b26:	d313      	bcc.n	402b50 <memcpy+0x114>
  402b28:	078b      	lsls	r3, r1, #30
  402b2a:	d08d      	beq.n	402a48 <memcpy+0xc>
  402b2c:	f010 0303 	ands.w	r3, r0, #3
  402b30:	d08a      	beq.n	402a48 <memcpy+0xc>
  402b32:	f1c3 0304 	rsb	r3, r3, #4
  402b36:	1ad2      	subs	r2, r2, r3
  402b38:	07db      	lsls	r3, r3, #31
  402b3a:	bf1c      	itt	ne
  402b3c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402b40:	f800 3b01 	strbne.w	r3, [r0], #1
  402b44:	d380      	bcc.n	402a48 <memcpy+0xc>
  402b46:	f831 3b02 	ldrh.w	r3, [r1], #2
  402b4a:	f820 3b02 	strh.w	r3, [r0], #2
  402b4e:	e77b      	b.n	402a48 <memcpy+0xc>
  402b50:	3a04      	subs	r2, #4
  402b52:	d3d9      	bcc.n	402b08 <memcpy+0xcc>
  402b54:	3a01      	subs	r2, #1
  402b56:	f811 3b01 	ldrb.w	r3, [r1], #1
  402b5a:	f800 3b01 	strb.w	r3, [r0], #1
  402b5e:	d2f9      	bcs.n	402b54 <memcpy+0x118>
  402b60:	780b      	ldrb	r3, [r1, #0]
  402b62:	7003      	strb	r3, [r0, #0]
  402b64:	784b      	ldrb	r3, [r1, #1]
  402b66:	7043      	strb	r3, [r0, #1]
  402b68:	788b      	ldrb	r3, [r1, #2]
  402b6a:	7083      	strb	r3, [r0, #2]
  402b6c:	4660      	mov	r0, ip
  402b6e:	4770      	bx	lr

00402b70 <memset>:
  402b70:	b470      	push	{r4, r5, r6}
  402b72:	0786      	lsls	r6, r0, #30
  402b74:	d046      	beq.n	402c04 <memset+0x94>
  402b76:	1e54      	subs	r4, r2, #1
  402b78:	2a00      	cmp	r2, #0
  402b7a:	d041      	beq.n	402c00 <memset+0x90>
  402b7c:	b2ca      	uxtb	r2, r1
  402b7e:	4603      	mov	r3, r0
  402b80:	e002      	b.n	402b88 <memset+0x18>
  402b82:	f114 34ff 	adds.w	r4, r4, #4294967295
  402b86:	d33b      	bcc.n	402c00 <memset+0x90>
  402b88:	f803 2b01 	strb.w	r2, [r3], #1
  402b8c:	079d      	lsls	r5, r3, #30
  402b8e:	d1f8      	bne.n	402b82 <memset+0x12>
  402b90:	2c03      	cmp	r4, #3
  402b92:	d92e      	bls.n	402bf2 <memset+0x82>
  402b94:	b2cd      	uxtb	r5, r1
  402b96:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402b9a:	2c0f      	cmp	r4, #15
  402b9c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402ba0:	d919      	bls.n	402bd6 <memset+0x66>
  402ba2:	f103 0210 	add.w	r2, r3, #16
  402ba6:	4626      	mov	r6, r4
  402ba8:	3e10      	subs	r6, #16
  402baa:	2e0f      	cmp	r6, #15
  402bac:	f842 5c10 	str.w	r5, [r2, #-16]
  402bb0:	f842 5c0c 	str.w	r5, [r2, #-12]
  402bb4:	f842 5c08 	str.w	r5, [r2, #-8]
  402bb8:	f842 5c04 	str.w	r5, [r2, #-4]
  402bbc:	f102 0210 	add.w	r2, r2, #16
  402bc0:	d8f2      	bhi.n	402ba8 <memset+0x38>
  402bc2:	f1a4 0210 	sub.w	r2, r4, #16
  402bc6:	f022 020f 	bic.w	r2, r2, #15
  402bca:	f004 040f 	and.w	r4, r4, #15
  402bce:	3210      	adds	r2, #16
  402bd0:	2c03      	cmp	r4, #3
  402bd2:	4413      	add	r3, r2
  402bd4:	d90d      	bls.n	402bf2 <memset+0x82>
  402bd6:	461e      	mov	r6, r3
  402bd8:	4622      	mov	r2, r4
  402bda:	3a04      	subs	r2, #4
  402bdc:	2a03      	cmp	r2, #3
  402bde:	f846 5b04 	str.w	r5, [r6], #4
  402be2:	d8fa      	bhi.n	402bda <memset+0x6a>
  402be4:	1f22      	subs	r2, r4, #4
  402be6:	f022 0203 	bic.w	r2, r2, #3
  402bea:	3204      	adds	r2, #4
  402bec:	4413      	add	r3, r2
  402bee:	f004 0403 	and.w	r4, r4, #3
  402bf2:	b12c      	cbz	r4, 402c00 <memset+0x90>
  402bf4:	b2c9      	uxtb	r1, r1
  402bf6:	441c      	add	r4, r3
  402bf8:	f803 1b01 	strb.w	r1, [r3], #1
  402bfc:	429c      	cmp	r4, r3
  402bfe:	d1fb      	bne.n	402bf8 <memset+0x88>
  402c00:	bc70      	pop	{r4, r5, r6}
  402c02:	4770      	bx	lr
  402c04:	4614      	mov	r4, r2
  402c06:	4603      	mov	r3, r0
  402c08:	e7c2      	b.n	402b90 <memset+0x20>
  402c0a:	bf00      	nop

00402c0c <__malloc_lock>:
  402c0c:	4801      	ldr	r0, [pc, #4]	; (402c14 <__malloc_lock+0x8>)
  402c0e:	f003 bfbb 	b.w	406b88 <__retarget_lock_acquire_recursive>
  402c12:	bf00      	nop
  402c14:	20410d24 	.word	0x20410d24

00402c18 <__malloc_unlock>:
  402c18:	4801      	ldr	r0, [pc, #4]	; (402c20 <__malloc_unlock+0x8>)
  402c1a:	f003 bfb7 	b.w	406b8c <__retarget_lock_release_recursive>
  402c1e:	bf00      	nop
  402c20:	20410d24 	.word	0x20410d24

00402c24 <printf>:
  402c24:	b40f      	push	{r0, r1, r2, r3}
  402c26:	b500      	push	{lr}
  402c28:	4907      	ldr	r1, [pc, #28]	; (402c48 <printf+0x24>)
  402c2a:	b083      	sub	sp, #12
  402c2c:	ab04      	add	r3, sp, #16
  402c2e:	6808      	ldr	r0, [r1, #0]
  402c30:	f853 2b04 	ldr.w	r2, [r3], #4
  402c34:	6881      	ldr	r1, [r0, #8]
  402c36:	9301      	str	r3, [sp, #4]
  402c38:	f000 ffb6 	bl	403ba8 <_vfprintf_r>
  402c3c:	b003      	add	sp, #12
  402c3e:	f85d eb04 	ldr.w	lr, [sp], #4
  402c42:	b004      	add	sp, #16
  402c44:	4770      	bx	lr
  402c46:	bf00      	nop
  402c48:	20400004 	.word	0x20400004

00402c4c <_sbrk_r>:
  402c4c:	b538      	push	{r3, r4, r5, lr}
  402c4e:	4c07      	ldr	r4, [pc, #28]	; (402c6c <_sbrk_r+0x20>)
  402c50:	2300      	movs	r3, #0
  402c52:	4605      	mov	r5, r0
  402c54:	4608      	mov	r0, r1
  402c56:	6023      	str	r3, [r4, #0]
  402c58:	f7fd fb4a 	bl	4002f0 <_sbrk>
  402c5c:	1c43      	adds	r3, r0, #1
  402c5e:	d000      	beq.n	402c62 <_sbrk_r+0x16>
  402c60:	bd38      	pop	{r3, r4, r5, pc}
  402c62:	6823      	ldr	r3, [r4, #0]
  402c64:	2b00      	cmp	r3, #0
  402c66:	d0fb      	beq.n	402c60 <_sbrk_r+0x14>
  402c68:	602b      	str	r3, [r5, #0]
  402c6a:	bd38      	pop	{r3, r4, r5, pc}
  402c6c:	20410d38 	.word	0x20410d38

00402c70 <setvbuf>:
  402c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402c74:	4c61      	ldr	r4, [pc, #388]	; (402dfc <setvbuf+0x18c>)
  402c76:	6825      	ldr	r5, [r4, #0]
  402c78:	b083      	sub	sp, #12
  402c7a:	4604      	mov	r4, r0
  402c7c:	460f      	mov	r7, r1
  402c7e:	4690      	mov	r8, r2
  402c80:	461e      	mov	r6, r3
  402c82:	b115      	cbz	r5, 402c8a <setvbuf+0x1a>
  402c84:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402c86:	2b00      	cmp	r3, #0
  402c88:	d064      	beq.n	402d54 <setvbuf+0xe4>
  402c8a:	f1b8 0f02 	cmp.w	r8, #2
  402c8e:	d006      	beq.n	402c9e <setvbuf+0x2e>
  402c90:	f1b8 0f01 	cmp.w	r8, #1
  402c94:	f200 809f 	bhi.w	402dd6 <setvbuf+0x166>
  402c98:	2e00      	cmp	r6, #0
  402c9a:	f2c0 809c 	blt.w	402dd6 <setvbuf+0x166>
  402c9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402ca0:	07d8      	lsls	r0, r3, #31
  402ca2:	d534      	bpl.n	402d0e <setvbuf+0x9e>
  402ca4:	4621      	mov	r1, r4
  402ca6:	4628      	mov	r0, r5
  402ca8:	f003 fb48 	bl	40633c <_fflush_r>
  402cac:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402cae:	b141      	cbz	r1, 402cc2 <setvbuf+0x52>
  402cb0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402cb4:	4299      	cmp	r1, r3
  402cb6:	d002      	beq.n	402cbe <setvbuf+0x4e>
  402cb8:	4628      	mov	r0, r5
  402cba:	f003 fcbd 	bl	406638 <_free_r>
  402cbe:	2300      	movs	r3, #0
  402cc0:	6323      	str	r3, [r4, #48]	; 0x30
  402cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402cc6:	2200      	movs	r2, #0
  402cc8:	61a2      	str	r2, [r4, #24]
  402cca:	6062      	str	r2, [r4, #4]
  402ccc:	061a      	lsls	r2, r3, #24
  402cce:	d43a      	bmi.n	402d46 <setvbuf+0xd6>
  402cd0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  402cd4:	f023 0303 	bic.w	r3, r3, #3
  402cd8:	f1b8 0f02 	cmp.w	r8, #2
  402cdc:	81a3      	strh	r3, [r4, #12]
  402cde:	d01d      	beq.n	402d1c <setvbuf+0xac>
  402ce0:	ab01      	add	r3, sp, #4
  402ce2:	466a      	mov	r2, sp
  402ce4:	4621      	mov	r1, r4
  402ce6:	4628      	mov	r0, r5
  402ce8:	f003 ff52 	bl	406b90 <__swhatbuf_r>
  402cec:	89a3      	ldrh	r3, [r4, #12]
  402cee:	4318      	orrs	r0, r3
  402cf0:	81a0      	strh	r0, [r4, #12]
  402cf2:	2e00      	cmp	r6, #0
  402cf4:	d132      	bne.n	402d5c <setvbuf+0xec>
  402cf6:	9e00      	ldr	r6, [sp, #0]
  402cf8:	4630      	mov	r0, r6
  402cfa:	f7ff fbe7 	bl	4024cc <malloc>
  402cfe:	4607      	mov	r7, r0
  402d00:	2800      	cmp	r0, #0
  402d02:	d06b      	beq.n	402ddc <setvbuf+0x16c>
  402d04:	89a3      	ldrh	r3, [r4, #12]
  402d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402d0a:	81a3      	strh	r3, [r4, #12]
  402d0c:	e028      	b.n	402d60 <setvbuf+0xf0>
  402d0e:	89a3      	ldrh	r3, [r4, #12]
  402d10:	0599      	lsls	r1, r3, #22
  402d12:	d4c7      	bmi.n	402ca4 <setvbuf+0x34>
  402d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402d16:	f003 ff37 	bl	406b88 <__retarget_lock_acquire_recursive>
  402d1a:	e7c3      	b.n	402ca4 <setvbuf+0x34>
  402d1c:	2500      	movs	r5, #0
  402d1e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  402d20:	2600      	movs	r6, #0
  402d22:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402d26:	f043 0302 	orr.w	r3, r3, #2
  402d2a:	2001      	movs	r0, #1
  402d2c:	60a6      	str	r6, [r4, #8]
  402d2e:	07ce      	lsls	r6, r1, #31
  402d30:	81a3      	strh	r3, [r4, #12]
  402d32:	6022      	str	r2, [r4, #0]
  402d34:	6122      	str	r2, [r4, #16]
  402d36:	6160      	str	r0, [r4, #20]
  402d38:	d401      	bmi.n	402d3e <setvbuf+0xce>
  402d3a:	0598      	lsls	r0, r3, #22
  402d3c:	d53e      	bpl.n	402dbc <setvbuf+0x14c>
  402d3e:	4628      	mov	r0, r5
  402d40:	b003      	add	sp, #12
  402d42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402d46:	6921      	ldr	r1, [r4, #16]
  402d48:	4628      	mov	r0, r5
  402d4a:	f003 fc75 	bl	406638 <_free_r>
  402d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402d52:	e7bd      	b.n	402cd0 <setvbuf+0x60>
  402d54:	4628      	mov	r0, r5
  402d56:	f003 fb49 	bl	4063ec <__sinit>
  402d5a:	e796      	b.n	402c8a <setvbuf+0x1a>
  402d5c:	2f00      	cmp	r7, #0
  402d5e:	d0cb      	beq.n	402cf8 <setvbuf+0x88>
  402d60:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402d62:	2b00      	cmp	r3, #0
  402d64:	d033      	beq.n	402dce <setvbuf+0x15e>
  402d66:	9b00      	ldr	r3, [sp, #0]
  402d68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402d6c:	6027      	str	r7, [r4, #0]
  402d6e:	429e      	cmp	r6, r3
  402d70:	bf1c      	itt	ne
  402d72:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  402d76:	81a2      	strhne	r2, [r4, #12]
  402d78:	f1b8 0f01 	cmp.w	r8, #1
  402d7c:	bf04      	itt	eq
  402d7e:	f042 0201 	orreq.w	r2, r2, #1
  402d82:	81a2      	strheq	r2, [r4, #12]
  402d84:	b292      	uxth	r2, r2
  402d86:	f012 0308 	ands.w	r3, r2, #8
  402d8a:	6127      	str	r7, [r4, #16]
  402d8c:	6166      	str	r6, [r4, #20]
  402d8e:	d00e      	beq.n	402dae <setvbuf+0x13e>
  402d90:	07d1      	lsls	r1, r2, #31
  402d92:	d51a      	bpl.n	402dca <setvbuf+0x15a>
  402d94:	6e65      	ldr	r5, [r4, #100]	; 0x64
  402d96:	4276      	negs	r6, r6
  402d98:	2300      	movs	r3, #0
  402d9a:	f015 0501 	ands.w	r5, r5, #1
  402d9e:	61a6      	str	r6, [r4, #24]
  402da0:	60a3      	str	r3, [r4, #8]
  402da2:	d009      	beq.n	402db8 <setvbuf+0x148>
  402da4:	2500      	movs	r5, #0
  402da6:	4628      	mov	r0, r5
  402da8:	b003      	add	sp, #12
  402daa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402dae:	60a3      	str	r3, [r4, #8]
  402db0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  402db2:	f015 0501 	ands.w	r5, r5, #1
  402db6:	d1f5      	bne.n	402da4 <setvbuf+0x134>
  402db8:	0593      	lsls	r3, r2, #22
  402dba:	d4c0      	bmi.n	402d3e <setvbuf+0xce>
  402dbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402dbe:	f003 fee5 	bl	406b8c <__retarget_lock_release_recursive>
  402dc2:	4628      	mov	r0, r5
  402dc4:	b003      	add	sp, #12
  402dc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402dca:	60a6      	str	r6, [r4, #8]
  402dcc:	e7f0      	b.n	402db0 <setvbuf+0x140>
  402dce:	4628      	mov	r0, r5
  402dd0:	f003 fb0c 	bl	4063ec <__sinit>
  402dd4:	e7c7      	b.n	402d66 <setvbuf+0xf6>
  402dd6:	f04f 35ff 	mov.w	r5, #4294967295
  402dda:	e7b0      	b.n	402d3e <setvbuf+0xce>
  402ddc:	f8dd 9000 	ldr.w	r9, [sp]
  402de0:	45b1      	cmp	r9, r6
  402de2:	d004      	beq.n	402dee <setvbuf+0x17e>
  402de4:	4648      	mov	r0, r9
  402de6:	f7ff fb71 	bl	4024cc <malloc>
  402dea:	4607      	mov	r7, r0
  402dec:	b920      	cbnz	r0, 402df8 <setvbuf+0x188>
  402dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402df2:	f04f 35ff 	mov.w	r5, #4294967295
  402df6:	e792      	b.n	402d1e <setvbuf+0xae>
  402df8:	464e      	mov	r6, r9
  402dfa:	e783      	b.n	402d04 <setvbuf+0x94>
  402dfc:	20400004 	.word	0x20400004

00402e00 <__sprint_r.part.0>:
  402e00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402e04:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  402e06:	049c      	lsls	r4, r3, #18
  402e08:	4693      	mov	fp, r2
  402e0a:	d52f      	bpl.n	402e6c <__sprint_r.part.0+0x6c>
  402e0c:	6893      	ldr	r3, [r2, #8]
  402e0e:	6812      	ldr	r2, [r2, #0]
  402e10:	b353      	cbz	r3, 402e68 <__sprint_r.part.0+0x68>
  402e12:	460e      	mov	r6, r1
  402e14:	4607      	mov	r7, r0
  402e16:	f102 0908 	add.w	r9, r2, #8
  402e1a:	e919 0420 	ldmdb	r9, {r5, sl}
  402e1e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  402e22:	d017      	beq.n	402e54 <__sprint_r.part.0+0x54>
  402e24:	3d04      	subs	r5, #4
  402e26:	2400      	movs	r4, #0
  402e28:	e001      	b.n	402e2e <__sprint_r.part.0+0x2e>
  402e2a:	45a0      	cmp	r8, r4
  402e2c:	d010      	beq.n	402e50 <__sprint_r.part.0+0x50>
  402e2e:	4632      	mov	r2, r6
  402e30:	f855 1f04 	ldr.w	r1, [r5, #4]!
  402e34:	4638      	mov	r0, r7
  402e36:	f003 fb7b 	bl	406530 <_fputwc_r>
  402e3a:	1c43      	adds	r3, r0, #1
  402e3c:	f104 0401 	add.w	r4, r4, #1
  402e40:	d1f3      	bne.n	402e2a <__sprint_r.part.0+0x2a>
  402e42:	2300      	movs	r3, #0
  402e44:	f8cb 3008 	str.w	r3, [fp, #8]
  402e48:	f8cb 3004 	str.w	r3, [fp, #4]
  402e4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402e50:	f8db 3008 	ldr.w	r3, [fp, #8]
  402e54:	f02a 0a03 	bic.w	sl, sl, #3
  402e58:	eba3 030a 	sub.w	r3, r3, sl
  402e5c:	f8cb 3008 	str.w	r3, [fp, #8]
  402e60:	f109 0908 	add.w	r9, r9, #8
  402e64:	2b00      	cmp	r3, #0
  402e66:	d1d8      	bne.n	402e1a <__sprint_r.part.0+0x1a>
  402e68:	2000      	movs	r0, #0
  402e6a:	e7ea      	b.n	402e42 <__sprint_r.part.0+0x42>
  402e6c:	f003 fcca 	bl	406804 <__sfvwrite_r>
  402e70:	2300      	movs	r3, #0
  402e72:	f8cb 3008 	str.w	r3, [fp, #8]
  402e76:	f8cb 3004 	str.w	r3, [fp, #4]
  402e7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402e7e:	bf00      	nop

00402e80 <__sprint_r>:
  402e80:	6893      	ldr	r3, [r2, #8]
  402e82:	b10b      	cbz	r3, 402e88 <__sprint_r+0x8>
  402e84:	f7ff bfbc 	b.w	402e00 <__sprint_r.part.0>
  402e88:	b410      	push	{r4}
  402e8a:	4618      	mov	r0, r3
  402e8c:	6053      	str	r3, [r2, #4]
  402e8e:	bc10      	pop	{r4}
  402e90:	4770      	bx	lr
  402e92:	bf00      	nop

00402e94 <_vfiprintf_r>:
  402e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402e98:	b0ad      	sub	sp, #180	; 0xb4
  402e9a:	461d      	mov	r5, r3
  402e9c:	468b      	mov	fp, r1
  402e9e:	4690      	mov	r8, r2
  402ea0:	9307      	str	r3, [sp, #28]
  402ea2:	9006      	str	r0, [sp, #24]
  402ea4:	b118      	cbz	r0, 402eae <_vfiprintf_r+0x1a>
  402ea6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402ea8:	2b00      	cmp	r3, #0
  402eaa:	f000 80f3 	beq.w	403094 <_vfiprintf_r+0x200>
  402eae:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402eb2:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  402eb6:	07df      	lsls	r7, r3, #31
  402eb8:	b281      	uxth	r1, r0
  402eba:	d402      	bmi.n	402ec2 <_vfiprintf_r+0x2e>
  402ebc:	058e      	lsls	r6, r1, #22
  402ebe:	f140 80fc 	bpl.w	4030ba <_vfiprintf_r+0x226>
  402ec2:	048c      	lsls	r4, r1, #18
  402ec4:	d40a      	bmi.n	402edc <_vfiprintf_r+0x48>
  402ec6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402eca:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  402ece:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  402ed2:	f8ab 100c 	strh.w	r1, [fp, #12]
  402ed6:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  402eda:	b289      	uxth	r1, r1
  402edc:	0708      	lsls	r0, r1, #28
  402ede:	f140 80b3 	bpl.w	403048 <_vfiprintf_r+0x1b4>
  402ee2:	f8db 3010 	ldr.w	r3, [fp, #16]
  402ee6:	2b00      	cmp	r3, #0
  402ee8:	f000 80ae 	beq.w	403048 <_vfiprintf_r+0x1b4>
  402eec:	f001 031a 	and.w	r3, r1, #26
  402ef0:	2b0a      	cmp	r3, #10
  402ef2:	f000 80b5 	beq.w	403060 <_vfiprintf_r+0x1cc>
  402ef6:	2300      	movs	r3, #0
  402ef8:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  402efc:	930b      	str	r3, [sp, #44]	; 0x2c
  402efe:	9311      	str	r3, [sp, #68]	; 0x44
  402f00:	9310      	str	r3, [sp, #64]	; 0x40
  402f02:	9303      	str	r3, [sp, #12]
  402f04:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  402f08:	46ca      	mov	sl, r9
  402f0a:	f8cd b010 	str.w	fp, [sp, #16]
  402f0e:	f898 3000 	ldrb.w	r3, [r8]
  402f12:	4644      	mov	r4, r8
  402f14:	b1fb      	cbz	r3, 402f56 <_vfiprintf_r+0xc2>
  402f16:	2b25      	cmp	r3, #37	; 0x25
  402f18:	d102      	bne.n	402f20 <_vfiprintf_r+0x8c>
  402f1a:	e01c      	b.n	402f56 <_vfiprintf_r+0xc2>
  402f1c:	2b25      	cmp	r3, #37	; 0x25
  402f1e:	d003      	beq.n	402f28 <_vfiprintf_r+0x94>
  402f20:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  402f24:	2b00      	cmp	r3, #0
  402f26:	d1f9      	bne.n	402f1c <_vfiprintf_r+0x88>
  402f28:	eba4 0508 	sub.w	r5, r4, r8
  402f2c:	b19d      	cbz	r5, 402f56 <_vfiprintf_r+0xc2>
  402f2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402f30:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402f32:	f8ca 8000 	str.w	r8, [sl]
  402f36:	3301      	adds	r3, #1
  402f38:	442a      	add	r2, r5
  402f3a:	2b07      	cmp	r3, #7
  402f3c:	f8ca 5004 	str.w	r5, [sl, #4]
  402f40:	9211      	str	r2, [sp, #68]	; 0x44
  402f42:	9310      	str	r3, [sp, #64]	; 0x40
  402f44:	dd7a      	ble.n	40303c <_vfiprintf_r+0x1a8>
  402f46:	2a00      	cmp	r2, #0
  402f48:	f040 84b0 	bne.w	4038ac <_vfiprintf_r+0xa18>
  402f4c:	9b03      	ldr	r3, [sp, #12]
  402f4e:	9210      	str	r2, [sp, #64]	; 0x40
  402f50:	442b      	add	r3, r5
  402f52:	46ca      	mov	sl, r9
  402f54:	9303      	str	r3, [sp, #12]
  402f56:	7823      	ldrb	r3, [r4, #0]
  402f58:	2b00      	cmp	r3, #0
  402f5a:	f000 83e0 	beq.w	40371e <_vfiprintf_r+0x88a>
  402f5e:	2000      	movs	r0, #0
  402f60:	f04f 0300 	mov.w	r3, #0
  402f64:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  402f68:	f104 0801 	add.w	r8, r4, #1
  402f6c:	7862      	ldrb	r2, [r4, #1]
  402f6e:	4605      	mov	r5, r0
  402f70:	4606      	mov	r6, r0
  402f72:	4603      	mov	r3, r0
  402f74:	f04f 34ff 	mov.w	r4, #4294967295
  402f78:	f108 0801 	add.w	r8, r8, #1
  402f7c:	f1a2 0120 	sub.w	r1, r2, #32
  402f80:	2958      	cmp	r1, #88	; 0x58
  402f82:	f200 82de 	bhi.w	403542 <_vfiprintf_r+0x6ae>
  402f86:	e8df f011 	tbh	[pc, r1, lsl #1]
  402f8a:	0221      	.short	0x0221
  402f8c:	02dc02dc 	.word	0x02dc02dc
  402f90:	02dc0229 	.word	0x02dc0229
  402f94:	02dc02dc 	.word	0x02dc02dc
  402f98:	02dc02dc 	.word	0x02dc02dc
  402f9c:	028902dc 	.word	0x028902dc
  402fa0:	02dc0295 	.word	0x02dc0295
  402fa4:	02bd00a2 	.word	0x02bd00a2
  402fa8:	019f02dc 	.word	0x019f02dc
  402fac:	01a401a4 	.word	0x01a401a4
  402fb0:	01a401a4 	.word	0x01a401a4
  402fb4:	01a401a4 	.word	0x01a401a4
  402fb8:	01a401a4 	.word	0x01a401a4
  402fbc:	02dc01a4 	.word	0x02dc01a4
  402fc0:	02dc02dc 	.word	0x02dc02dc
  402fc4:	02dc02dc 	.word	0x02dc02dc
  402fc8:	02dc02dc 	.word	0x02dc02dc
  402fcc:	02dc02dc 	.word	0x02dc02dc
  402fd0:	01b202dc 	.word	0x01b202dc
  402fd4:	02dc02dc 	.word	0x02dc02dc
  402fd8:	02dc02dc 	.word	0x02dc02dc
  402fdc:	02dc02dc 	.word	0x02dc02dc
  402fe0:	02dc02dc 	.word	0x02dc02dc
  402fe4:	02dc02dc 	.word	0x02dc02dc
  402fe8:	02dc0197 	.word	0x02dc0197
  402fec:	02dc02dc 	.word	0x02dc02dc
  402ff0:	02dc02dc 	.word	0x02dc02dc
  402ff4:	02dc019b 	.word	0x02dc019b
  402ff8:	025302dc 	.word	0x025302dc
  402ffc:	02dc02dc 	.word	0x02dc02dc
  403000:	02dc02dc 	.word	0x02dc02dc
  403004:	02dc02dc 	.word	0x02dc02dc
  403008:	02dc02dc 	.word	0x02dc02dc
  40300c:	02dc02dc 	.word	0x02dc02dc
  403010:	021b025a 	.word	0x021b025a
  403014:	02dc02dc 	.word	0x02dc02dc
  403018:	026e02dc 	.word	0x026e02dc
  40301c:	02dc021b 	.word	0x02dc021b
  403020:	027302dc 	.word	0x027302dc
  403024:	01f502dc 	.word	0x01f502dc
  403028:	02090182 	.word	0x02090182
  40302c:	02dc02d7 	.word	0x02dc02d7
  403030:	02dc029a 	.word	0x02dc029a
  403034:	02dc00a7 	.word	0x02dc00a7
  403038:	022e02dc 	.word	0x022e02dc
  40303c:	f10a 0a08 	add.w	sl, sl, #8
  403040:	9b03      	ldr	r3, [sp, #12]
  403042:	442b      	add	r3, r5
  403044:	9303      	str	r3, [sp, #12]
  403046:	e786      	b.n	402f56 <_vfiprintf_r+0xc2>
  403048:	4659      	mov	r1, fp
  40304a:	9806      	ldr	r0, [sp, #24]
  40304c:	f002 f89a 	bl	405184 <__swsetup_r>
  403050:	bb18      	cbnz	r0, 40309a <_vfiprintf_r+0x206>
  403052:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  403056:	f001 031a 	and.w	r3, r1, #26
  40305a:	2b0a      	cmp	r3, #10
  40305c:	f47f af4b 	bne.w	402ef6 <_vfiprintf_r+0x62>
  403060:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  403064:	2b00      	cmp	r3, #0
  403066:	f6ff af46 	blt.w	402ef6 <_vfiprintf_r+0x62>
  40306a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40306e:	07db      	lsls	r3, r3, #31
  403070:	d405      	bmi.n	40307e <_vfiprintf_r+0x1ea>
  403072:	058f      	lsls	r7, r1, #22
  403074:	d403      	bmi.n	40307e <_vfiprintf_r+0x1ea>
  403076:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40307a:	f003 fd87 	bl	406b8c <__retarget_lock_release_recursive>
  40307e:	462b      	mov	r3, r5
  403080:	4642      	mov	r2, r8
  403082:	4659      	mov	r1, fp
  403084:	9806      	ldr	r0, [sp, #24]
  403086:	f000 fd4d 	bl	403b24 <__sbprintf>
  40308a:	9003      	str	r0, [sp, #12]
  40308c:	9803      	ldr	r0, [sp, #12]
  40308e:	b02d      	add	sp, #180	; 0xb4
  403090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403094:	f003 f9aa 	bl	4063ec <__sinit>
  403098:	e709      	b.n	402eae <_vfiprintf_r+0x1a>
  40309a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40309e:	07d9      	lsls	r1, r3, #31
  4030a0:	d404      	bmi.n	4030ac <_vfiprintf_r+0x218>
  4030a2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4030a6:	059a      	lsls	r2, r3, #22
  4030a8:	f140 84aa 	bpl.w	403a00 <_vfiprintf_r+0xb6c>
  4030ac:	f04f 33ff 	mov.w	r3, #4294967295
  4030b0:	9303      	str	r3, [sp, #12]
  4030b2:	9803      	ldr	r0, [sp, #12]
  4030b4:	b02d      	add	sp, #180	; 0xb4
  4030b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4030ba:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4030be:	f003 fd63 	bl	406b88 <__retarget_lock_acquire_recursive>
  4030c2:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4030c6:	b281      	uxth	r1, r0
  4030c8:	e6fb      	b.n	402ec2 <_vfiprintf_r+0x2e>
  4030ca:	4276      	negs	r6, r6
  4030cc:	9207      	str	r2, [sp, #28]
  4030ce:	f043 0304 	orr.w	r3, r3, #4
  4030d2:	f898 2000 	ldrb.w	r2, [r8]
  4030d6:	e74f      	b.n	402f78 <_vfiprintf_r+0xe4>
  4030d8:	9608      	str	r6, [sp, #32]
  4030da:	069e      	lsls	r6, r3, #26
  4030dc:	f100 8450 	bmi.w	403980 <_vfiprintf_r+0xaec>
  4030e0:	9907      	ldr	r1, [sp, #28]
  4030e2:	06dd      	lsls	r5, r3, #27
  4030e4:	460a      	mov	r2, r1
  4030e6:	f100 83ef 	bmi.w	4038c8 <_vfiprintf_r+0xa34>
  4030ea:	0658      	lsls	r0, r3, #25
  4030ec:	f140 83ec 	bpl.w	4038c8 <_vfiprintf_r+0xa34>
  4030f0:	880e      	ldrh	r6, [r1, #0]
  4030f2:	3104      	adds	r1, #4
  4030f4:	2700      	movs	r7, #0
  4030f6:	2201      	movs	r2, #1
  4030f8:	9107      	str	r1, [sp, #28]
  4030fa:	f04f 0100 	mov.w	r1, #0
  4030fe:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  403102:	2500      	movs	r5, #0
  403104:	1c61      	adds	r1, r4, #1
  403106:	f000 8116 	beq.w	403336 <_vfiprintf_r+0x4a2>
  40310a:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  40310e:	9102      	str	r1, [sp, #8]
  403110:	ea56 0107 	orrs.w	r1, r6, r7
  403114:	f040 8114 	bne.w	403340 <_vfiprintf_r+0x4ac>
  403118:	2c00      	cmp	r4, #0
  40311a:	f040 835c 	bne.w	4037d6 <_vfiprintf_r+0x942>
  40311e:	2a00      	cmp	r2, #0
  403120:	f040 83b7 	bne.w	403892 <_vfiprintf_r+0x9fe>
  403124:	f013 0301 	ands.w	r3, r3, #1
  403128:	9305      	str	r3, [sp, #20]
  40312a:	f000 8457 	beq.w	4039dc <_vfiprintf_r+0xb48>
  40312e:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  403132:	2330      	movs	r3, #48	; 0x30
  403134:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  403138:	9b05      	ldr	r3, [sp, #20]
  40313a:	42a3      	cmp	r3, r4
  40313c:	bfb8      	it	lt
  40313e:	4623      	movlt	r3, r4
  403140:	9301      	str	r3, [sp, #4]
  403142:	b10d      	cbz	r5, 403148 <_vfiprintf_r+0x2b4>
  403144:	3301      	adds	r3, #1
  403146:	9301      	str	r3, [sp, #4]
  403148:	9b02      	ldr	r3, [sp, #8]
  40314a:	f013 0302 	ands.w	r3, r3, #2
  40314e:	9309      	str	r3, [sp, #36]	; 0x24
  403150:	d002      	beq.n	403158 <_vfiprintf_r+0x2c4>
  403152:	9b01      	ldr	r3, [sp, #4]
  403154:	3302      	adds	r3, #2
  403156:	9301      	str	r3, [sp, #4]
  403158:	9b02      	ldr	r3, [sp, #8]
  40315a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40315e:	930a      	str	r3, [sp, #40]	; 0x28
  403160:	f040 8217 	bne.w	403592 <_vfiprintf_r+0x6fe>
  403164:	9b08      	ldr	r3, [sp, #32]
  403166:	9a01      	ldr	r2, [sp, #4]
  403168:	1a9d      	subs	r5, r3, r2
  40316a:	2d00      	cmp	r5, #0
  40316c:	f340 8211 	ble.w	403592 <_vfiprintf_r+0x6fe>
  403170:	2d10      	cmp	r5, #16
  403172:	f340 8490 	ble.w	403a96 <_vfiprintf_r+0xc02>
  403176:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403178:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40317a:	4ec4      	ldr	r6, [pc, #784]	; (40348c <_vfiprintf_r+0x5f8>)
  40317c:	46d6      	mov	lr, sl
  40317e:	2710      	movs	r7, #16
  403180:	46a2      	mov	sl, r4
  403182:	4619      	mov	r1, r3
  403184:	9c06      	ldr	r4, [sp, #24]
  403186:	e007      	b.n	403198 <_vfiprintf_r+0x304>
  403188:	f101 0c02 	add.w	ip, r1, #2
  40318c:	f10e 0e08 	add.w	lr, lr, #8
  403190:	4601      	mov	r1, r0
  403192:	3d10      	subs	r5, #16
  403194:	2d10      	cmp	r5, #16
  403196:	dd11      	ble.n	4031bc <_vfiprintf_r+0x328>
  403198:	1c48      	adds	r0, r1, #1
  40319a:	3210      	adds	r2, #16
  40319c:	2807      	cmp	r0, #7
  40319e:	9211      	str	r2, [sp, #68]	; 0x44
  4031a0:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4031a4:	9010      	str	r0, [sp, #64]	; 0x40
  4031a6:	ddef      	ble.n	403188 <_vfiprintf_r+0x2f4>
  4031a8:	2a00      	cmp	r2, #0
  4031aa:	f040 81e4 	bne.w	403576 <_vfiprintf_r+0x6e2>
  4031ae:	3d10      	subs	r5, #16
  4031b0:	2d10      	cmp	r5, #16
  4031b2:	4611      	mov	r1, r2
  4031b4:	f04f 0c01 	mov.w	ip, #1
  4031b8:	46ce      	mov	lr, r9
  4031ba:	dced      	bgt.n	403198 <_vfiprintf_r+0x304>
  4031bc:	4654      	mov	r4, sl
  4031be:	4661      	mov	r1, ip
  4031c0:	46f2      	mov	sl, lr
  4031c2:	442a      	add	r2, r5
  4031c4:	2907      	cmp	r1, #7
  4031c6:	9211      	str	r2, [sp, #68]	; 0x44
  4031c8:	f8ca 6000 	str.w	r6, [sl]
  4031cc:	f8ca 5004 	str.w	r5, [sl, #4]
  4031d0:	9110      	str	r1, [sp, #64]	; 0x40
  4031d2:	f300 82ec 	bgt.w	4037ae <_vfiprintf_r+0x91a>
  4031d6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4031da:	f10a 0a08 	add.w	sl, sl, #8
  4031de:	1c48      	adds	r0, r1, #1
  4031e0:	2d00      	cmp	r5, #0
  4031e2:	f040 81de 	bne.w	4035a2 <_vfiprintf_r+0x70e>
  4031e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4031e8:	2b00      	cmp	r3, #0
  4031ea:	f000 81f8 	beq.w	4035de <_vfiprintf_r+0x74a>
  4031ee:	3202      	adds	r2, #2
  4031f0:	a90e      	add	r1, sp, #56	; 0x38
  4031f2:	2302      	movs	r3, #2
  4031f4:	2807      	cmp	r0, #7
  4031f6:	9211      	str	r2, [sp, #68]	; 0x44
  4031f8:	9010      	str	r0, [sp, #64]	; 0x40
  4031fa:	e88a 000a 	stmia.w	sl, {r1, r3}
  4031fe:	f340 81ea 	ble.w	4035d6 <_vfiprintf_r+0x742>
  403202:	2a00      	cmp	r2, #0
  403204:	f040 838c 	bne.w	403920 <_vfiprintf_r+0xa8c>
  403208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40320a:	2b80      	cmp	r3, #128	; 0x80
  40320c:	f04f 0001 	mov.w	r0, #1
  403210:	4611      	mov	r1, r2
  403212:	46ca      	mov	sl, r9
  403214:	f040 81e7 	bne.w	4035e6 <_vfiprintf_r+0x752>
  403218:	9b08      	ldr	r3, [sp, #32]
  40321a:	9d01      	ldr	r5, [sp, #4]
  40321c:	1b5e      	subs	r6, r3, r5
  40321e:	2e00      	cmp	r6, #0
  403220:	f340 81e1 	ble.w	4035e6 <_vfiprintf_r+0x752>
  403224:	2e10      	cmp	r6, #16
  403226:	4d9a      	ldr	r5, [pc, #616]	; (403490 <_vfiprintf_r+0x5fc>)
  403228:	f340 8450 	ble.w	403acc <_vfiprintf_r+0xc38>
  40322c:	46d4      	mov	ip, sl
  40322e:	2710      	movs	r7, #16
  403230:	46a2      	mov	sl, r4
  403232:	9c06      	ldr	r4, [sp, #24]
  403234:	e007      	b.n	403246 <_vfiprintf_r+0x3b2>
  403236:	f101 0e02 	add.w	lr, r1, #2
  40323a:	f10c 0c08 	add.w	ip, ip, #8
  40323e:	4601      	mov	r1, r0
  403240:	3e10      	subs	r6, #16
  403242:	2e10      	cmp	r6, #16
  403244:	dd11      	ble.n	40326a <_vfiprintf_r+0x3d6>
  403246:	1c48      	adds	r0, r1, #1
  403248:	3210      	adds	r2, #16
  40324a:	2807      	cmp	r0, #7
  40324c:	9211      	str	r2, [sp, #68]	; 0x44
  40324e:	e88c 00a0 	stmia.w	ip, {r5, r7}
  403252:	9010      	str	r0, [sp, #64]	; 0x40
  403254:	ddef      	ble.n	403236 <_vfiprintf_r+0x3a2>
  403256:	2a00      	cmp	r2, #0
  403258:	f040 829d 	bne.w	403796 <_vfiprintf_r+0x902>
  40325c:	3e10      	subs	r6, #16
  40325e:	2e10      	cmp	r6, #16
  403260:	f04f 0e01 	mov.w	lr, #1
  403264:	4611      	mov	r1, r2
  403266:	46cc      	mov	ip, r9
  403268:	dced      	bgt.n	403246 <_vfiprintf_r+0x3b2>
  40326a:	4654      	mov	r4, sl
  40326c:	46e2      	mov	sl, ip
  40326e:	4432      	add	r2, r6
  403270:	f1be 0f07 	cmp.w	lr, #7
  403274:	9211      	str	r2, [sp, #68]	; 0x44
  403276:	e88a 0060 	stmia.w	sl, {r5, r6}
  40327a:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40327e:	f300 8369 	bgt.w	403954 <_vfiprintf_r+0xac0>
  403282:	f10a 0a08 	add.w	sl, sl, #8
  403286:	f10e 0001 	add.w	r0, lr, #1
  40328a:	4671      	mov	r1, lr
  40328c:	e1ab      	b.n	4035e6 <_vfiprintf_r+0x752>
  40328e:	9608      	str	r6, [sp, #32]
  403290:	f013 0220 	ands.w	r2, r3, #32
  403294:	f040 838c 	bne.w	4039b0 <_vfiprintf_r+0xb1c>
  403298:	f013 0110 	ands.w	r1, r3, #16
  40329c:	f040 831a 	bne.w	4038d4 <_vfiprintf_r+0xa40>
  4032a0:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4032a4:	f000 8316 	beq.w	4038d4 <_vfiprintf_r+0xa40>
  4032a8:	9807      	ldr	r0, [sp, #28]
  4032aa:	460a      	mov	r2, r1
  4032ac:	4601      	mov	r1, r0
  4032ae:	3104      	adds	r1, #4
  4032b0:	8806      	ldrh	r6, [r0, #0]
  4032b2:	9107      	str	r1, [sp, #28]
  4032b4:	2700      	movs	r7, #0
  4032b6:	e720      	b.n	4030fa <_vfiprintf_r+0x266>
  4032b8:	9608      	str	r6, [sp, #32]
  4032ba:	f043 0310 	orr.w	r3, r3, #16
  4032be:	e7e7      	b.n	403290 <_vfiprintf_r+0x3fc>
  4032c0:	9608      	str	r6, [sp, #32]
  4032c2:	f043 0310 	orr.w	r3, r3, #16
  4032c6:	e708      	b.n	4030da <_vfiprintf_r+0x246>
  4032c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4032cc:	f898 2000 	ldrb.w	r2, [r8]
  4032d0:	e652      	b.n	402f78 <_vfiprintf_r+0xe4>
  4032d2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4032d6:	2600      	movs	r6, #0
  4032d8:	f818 2b01 	ldrb.w	r2, [r8], #1
  4032dc:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4032e0:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4032e4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4032e8:	2909      	cmp	r1, #9
  4032ea:	d9f5      	bls.n	4032d8 <_vfiprintf_r+0x444>
  4032ec:	e646      	b.n	402f7c <_vfiprintf_r+0xe8>
  4032ee:	9608      	str	r6, [sp, #32]
  4032f0:	2800      	cmp	r0, #0
  4032f2:	f040 8408 	bne.w	403b06 <_vfiprintf_r+0xc72>
  4032f6:	f043 0310 	orr.w	r3, r3, #16
  4032fa:	069e      	lsls	r6, r3, #26
  4032fc:	f100 834c 	bmi.w	403998 <_vfiprintf_r+0xb04>
  403300:	06dd      	lsls	r5, r3, #27
  403302:	f100 82f3 	bmi.w	4038ec <_vfiprintf_r+0xa58>
  403306:	0658      	lsls	r0, r3, #25
  403308:	f140 82f0 	bpl.w	4038ec <_vfiprintf_r+0xa58>
  40330c:	9d07      	ldr	r5, [sp, #28]
  40330e:	f9b5 6000 	ldrsh.w	r6, [r5]
  403312:	462a      	mov	r2, r5
  403314:	17f7      	asrs	r7, r6, #31
  403316:	3204      	adds	r2, #4
  403318:	4630      	mov	r0, r6
  40331a:	4639      	mov	r1, r7
  40331c:	9207      	str	r2, [sp, #28]
  40331e:	2800      	cmp	r0, #0
  403320:	f171 0200 	sbcs.w	r2, r1, #0
  403324:	f2c0 835d 	blt.w	4039e2 <_vfiprintf_r+0xb4e>
  403328:	1c61      	adds	r1, r4, #1
  40332a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40332e:	f04f 0201 	mov.w	r2, #1
  403332:	f47f aeea 	bne.w	40310a <_vfiprintf_r+0x276>
  403336:	ea56 0107 	orrs.w	r1, r6, r7
  40333a:	f000 824d 	beq.w	4037d8 <_vfiprintf_r+0x944>
  40333e:	9302      	str	r3, [sp, #8]
  403340:	2a01      	cmp	r2, #1
  403342:	f000 828c 	beq.w	40385e <_vfiprintf_r+0x9ca>
  403346:	2a02      	cmp	r2, #2
  403348:	f040 825c 	bne.w	403804 <_vfiprintf_r+0x970>
  40334c:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40334e:	46cb      	mov	fp, r9
  403350:	0933      	lsrs	r3, r6, #4
  403352:	f006 010f 	and.w	r1, r6, #15
  403356:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40335a:	093a      	lsrs	r2, r7, #4
  40335c:	461e      	mov	r6, r3
  40335e:	4617      	mov	r7, r2
  403360:	5c43      	ldrb	r3, [r0, r1]
  403362:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  403366:	ea56 0307 	orrs.w	r3, r6, r7
  40336a:	d1f1      	bne.n	403350 <_vfiprintf_r+0x4bc>
  40336c:	eba9 030b 	sub.w	r3, r9, fp
  403370:	9305      	str	r3, [sp, #20]
  403372:	e6e1      	b.n	403138 <_vfiprintf_r+0x2a4>
  403374:	2800      	cmp	r0, #0
  403376:	f040 83c0 	bne.w	403afa <_vfiprintf_r+0xc66>
  40337a:	0699      	lsls	r1, r3, #26
  40337c:	f100 8367 	bmi.w	403a4e <_vfiprintf_r+0xbba>
  403380:	06da      	lsls	r2, r3, #27
  403382:	f100 80f1 	bmi.w	403568 <_vfiprintf_r+0x6d4>
  403386:	065b      	lsls	r3, r3, #25
  403388:	f140 80ee 	bpl.w	403568 <_vfiprintf_r+0x6d4>
  40338c:	9a07      	ldr	r2, [sp, #28]
  40338e:	6813      	ldr	r3, [r2, #0]
  403390:	3204      	adds	r2, #4
  403392:	9207      	str	r2, [sp, #28]
  403394:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  403398:	801a      	strh	r2, [r3, #0]
  40339a:	e5b8      	b.n	402f0e <_vfiprintf_r+0x7a>
  40339c:	9807      	ldr	r0, [sp, #28]
  40339e:	4a3d      	ldr	r2, [pc, #244]	; (403494 <_vfiprintf_r+0x600>)
  4033a0:	9608      	str	r6, [sp, #32]
  4033a2:	920b      	str	r2, [sp, #44]	; 0x2c
  4033a4:	6806      	ldr	r6, [r0, #0]
  4033a6:	2278      	movs	r2, #120	; 0x78
  4033a8:	2130      	movs	r1, #48	; 0x30
  4033aa:	3004      	adds	r0, #4
  4033ac:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4033b0:	f043 0302 	orr.w	r3, r3, #2
  4033b4:	9007      	str	r0, [sp, #28]
  4033b6:	2700      	movs	r7, #0
  4033b8:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4033bc:	2202      	movs	r2, #2
  4033be:	e69c      	b.n	4030fa <_vfiprintf_r+0x266>
  4033c0:	9608      	str	r6, [sp, #32]
  4033c2:	2800      	cmp	r0, #0
  4033c4:	d099      	beq.n	4032fa <_vfiprintf_r+0x466>
  4033c6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4033ca:	e796      	b.n	4032fa <_vfiprintf_r+0x466>
  4033cc:	f898 2000 	ldrb.w	r2, [r8]
  4033d0:	2d00      	cmp	r5, #0
  4033d2:	f47f add1 	bne.w	402f78 <_vfiprintf_r+0xe4>
  4033d6:	2001      	movs	r0, #1
  4033d8:	2520      	movs	r5, #32
  4033da:	e5cd      	b.n	402f78 <_vfiprintf_r+0xe4>
  4033dc:	f043 0301 	orr.w	r3, r3, #1
  4033e0:	f898 2000 	ldrb.w	r2, [r8]
  4033e4:	e5c8      	b.n	402f78 <_vfiprintf_r+0xe4>
  4033e6:	9608      	str	r6, [sp, #32]
  4033e8:	2800      	cmp	r0, #0
  4033ea:	f040 8393 	bne.w	403b14 <_vfiprintf_r+0xc80>
  4033ee:	4929      	ldr	r1, [pc, #164]	; (403494 <_vfiprintf_r+0x600>)
  4033f0:	910b      	str	r1, [sp, #44]	; 0x2c
  4033f2:	069f      	lsls	r7, r3, #26
  4033f4:	f100 82e8 	bmi.w	4039c8 <_vfiprintf_r+0xb34>
  4033f8:	9807      	ldr	r0, [sp, #28]
  4033fa:	06de      	lsls	r6, r3, #27
  4033fc:	4601      	mov	r1, r0
  4033fe:	f100 8270 	bmi.w	4038e2 <_vfiprintf_r+0xa4e>
  403402:	065d      	lsls	r5, r3, #25
  403404:	f140 826d 	bpl.w	4038e2 <_vfiprintf_r+0xa4e>
  403408:	3104      	adds	r1, #4
  40340a:	8806      	ldrh	r6, [r0, #0]
  40340c:	9107      	str	r1, [sp, #28]
  40340e:	2700      	movs	r7, #0
  403410:	07d8      	lsls	r0, r3, #31
  403412:	f140 8222 	bpl.w	40385a <_vfiprintf_r+0x9c6>
  403416:	ea56 0107 	orrs.w	r1, r6, r7
  40341a:	f000 821e 	beq.w	40385a <_vfiprintf_r+0x9c6>
  40341e:	2130      	movs	r1, #48	; 0x30
  403420:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  403424:	f043 0302 	orr.w	r3, r3, #2
  403428:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  40342c:	2202      	movs	r2, #2
  40342e:	e664      	b.n	4030fa <_vfiprintf_r+0x266>
  403430:	9608      	str	r6, [sp, #32]
  403432:	2800      	cmp	r0, #0
  403434:	f040 836b 	bne.w	403b0e <_vfiprintf_r+0xc7a>
  403438:	4917      	ldr	r1, [pc, #92]	; (403498 <_vfiprintf_r+0x604>)
  40343a:	910b      	str	r1, [sp, #44]	; 0x2c
  40343c:	e7d9      	b.n	4033f2 <_vfiprintf_r+0x55e>
  40343e:	9907      	ldr	r1, [sp, #28]
  403440:	9608      	str	r6, [sp, #32]
  403442:	680a      	ldr	r2, [r1, #0]
  403444:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  403448:	f04f 0000 	mov.w	r0, #0
  40344c:	460a      	mov	r2, r1
  40344e:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  403452:	3204      	adds	r2, #4
  403454:	2001      	movs	r0, #1
  403456:	9001      	str	r0, [sp, #4]
  403458:	9207      	str	r2, [sp, #28]
  40345a:	9005      	str	r0, [sp, #20]
  40345c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  403460:	9302      	str	r3, [sp, #8]
  403462:	2400      	movs	r4, #0
  403464:	e670      	b.n	403148 <_vfiprintf_r+0x2b4>
  403466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40346a:	f898 2000 	ldrb.w	r2, [r8]
  40346e:	e583      	b.n	402f78 <_vfiprintf_r+0xe4>
  403470:	f898 2000 	ldrb.w	r2, [r8]
  403474:	2a6c      	cmp	r2, #108	; 0x6c
  403476:	bf03      	ittte	eq
  403478:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  40347c:	f043 0320 	orreq.w	r3, r3, #32
  403480:	f108 0801 	addeq.w	r8, r8, #1
  403484:	f043 0310 	orrne.w	r3, r3, #16
  403488:	e576      	b.n	402f78 <_vfiprintf_r+0xe4>
  40348a:	bf00      	nop
  40348c:	00409b3c 	.word	0x00409b3c
  403490:	00409b4c 	.word	0x00409b4c
  403494:	00409b20 	.word	0x00409b20
  403498:	00409b0c 	.word	0x00409b0c
  40349c:	9907      	ldr	r1, [sp, #28]
  40349e:	680e      	ldr	r6, [r1, #0]
  4034a0:	460a      	mov	r2, r1
  4034a2:	2e00      	cmp	r6, #0
  4034a4:	f102 0204 	add.w	r2, r2, #4
  4034a8:	f6ff ae0f 	blt.w	4030ca <_vfiprintf_r+0x236>
  4034ac:	9207      	str	r2, [sp, #28]
  4034ae:	f898 2000 	ldrb.w	r2, [r8]
  4034b2:	e561      	b.n	402f78 <_vfiprintf_r+0xe4>
  4034b4:	f898 2000 	ldrb.w	r2, [r8]
  4034b8:	2001      	movs	r0, #1
  4034ba:	252b      	movs	r5, #43	; 0x2b
  4034bc:	e55c      	b.n	402f78 <_vfiprintf_r+0xe4>
  4034be:	9907      	ldr	r1, [sp, #28]
  4034c0:	9608      	str	r6, [sp, #32]
  4034c2:	f8d1 b000 	ldr.w	fp, [r1]
  4034c6:	f04f 0200 	mov.w	r2, #0
  4034ca:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4034ce:	1d0e      	adds	r6, r1, #4
  4034d0:	f1bb 0f00 	cmp.w	fp, #0
  4034d4:	f000 82e5 	beq.w	403aa2 <_vfiprintf_r+0xc0e>
  4034d8:	1c67      	adds	r7, r4, #1
  4034da:	f000 82c4 	beq.w	403a66 <_vfiprintf_r+0xbd2>
  4034de:	4622      	mov	r2, r4
  4034e0:	2100      	movs	r1, #0
  4034e2:	4658      	mov	r0, fp
  4034e4:	9301      	str	r3, [sp, #4]
  4034e6:	f003 fbe3 	bl	406cb0 <memchr>
  4034ea:	9b01      	ldr	r3, [sp, #4]
  4034ec:	2800      	cmp	r0, #0
  4034ee:	f000 82e5 	beq.w	403abc <_vfiprintf_r+0xc28>
  4034f2:	eba0 020b 	sub.w	r2, r0, fp
  4034f6:	9205      	str	r2, [sp, #20]
  4034f8:	9607      	str	r6, [sp, #28]
  4034fa:	9302      	str	r3, [sp, #8]
  4034fc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403500:	2400      	movs	r4, #0
  403502:	e619      	b.n	403138 <_vfiprintf_r+0x2a4>
  403504:	f898 2000 	ldrb.w	r2, [r8]
  403508:	2a2a      	cmp	r2, #42	; 0x2a
  40350a:	f108 0701 	add.w	r7, r8, #1
  40350e:	f000 82e9 	beq.w	403ae4 <_vfiprintf_r+0xc50>
  403512:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  403516:	2909      	cmp	r1, #9
  403518:	46b8      	mov	r8, r7
  40351a:	f04f 0400 	mov.w	r4, #0
  40351e:	f63f ad2d 	bhi.w	402f7c <_vfiprintf_r+0xe8>
  403522:	f818 2b01 	ldrb.w	r2, [r8], #1
  403526:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40352a:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  40352e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  403532:	2909      	cmp	r1, #9
  403534:	d9f5      	bls.n	403522 <_vfiprintf_r+0x68e>
  403536:	e521      	b.n	402f7c <_vfiprintf_r+0xe8>
  403538:	f043 0320 	orr.w	r3, r3, #32
  40353c:	f898 2000 	ldrb.w	r2, [r8]
  403540:	e51a      	b.n	402f78 <_vfiprintf_r+0xe4>
  403542:	9608      	str	r6, [sp, #32]
  403544:	2800      	cmp	r0, #0
  403546:	f040 82db 	bne.w	403b00 <_vfiprintf_r+0xc6c>
  40354a:	2a00      	cmp	r2, #0
  40354c:	f000 80e7 	beq.w	40371e <_vfiprintf_r+0x88a>
  403550:	2101      	movs	r1, #1
  403552:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  403556:	f04f 0200 	mov.w	r2, #0
  40355a:	9101      	str	r1, [sp, #4]
  40355c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  403560:	9105      	str	r1, [sp, #20]
  403562:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  403566:	e77b      	b.n	403460 <_vfiprintf_r+0x5cc>
  403568:	9a07      	ldr	r2, [sp, #28]
  40356a:	6813      	ldr	r3, [r2, #0]
  40356c:	3204      	adds	r2, #4
  40356e:	9207      	str	r2, [sp, #28]
  403570:	9a03      	ldr	r2, [sp, #12]
  403572:	601a      	str	r2, [r3, #0]
  403574:	e4cb      	b.n	402f0e <_vfiprintf_r+0x7a>
  403576:	aa0f      	add	r2, sp, #60	; 0x3c
  403578:	9904      	ldr	r1, [sp, #16]
  40357a:	4620      	mov	r0, r4
  40357c:	f7ff fc40 	bl	402e00 <__sprint_r.part.0>
  403580:	2800      	cmp	r0, #0
  403582:	f040 8139 	bne.w	4037f8 <_vfiprintf_r+0x964>
  403586:	9910      	ldr	r1, [sp, #64]	; 0x40
  403588:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40358a:	f101 0c01 	add.w	ip, r1, #1
  40358e:	46ce      	mov	lr, r9
  403590:	e5ff      	b.n	403192 <_vfiprintf_r+0x2fe>
  403592:	9910      	ldr	r1, [sp, #64]	; 0x40
  403594:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403596:	1c48      	adds	r0, r1, #1
  403598:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40359c:	2d00      	cmp	r5, #0
  40359e:	f43f ae22 	beq.w	4031e6 <_vfiprintf_r+0x352>
  4035a2:	3201      	adds	r2, #1
  4035a4:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4035a8:	2101      	movs	r1, #1
  4035aa:	2807      	cmp	r0, #7
  4035ac:	9211      	str	r2, [sp, #68]	; 0x44
  4035ae:	9010      	str	r0, [sp, #64]	; 0x40
  4035b0:	f8ca 5000 	str.w	r5, [sl]
  4035b4:	f8ca 1004 	str.w	r1, [sl, #4]
  4035b8:	f340 8108 	ble.w	4037cc <_vfiprintf_r+0x938>
  4035bc:	2a00      	cmp	r2, #0
  4035be:	f040 81bc 	bne.w	40393a <_vfiprintf_r+0xaa6>
  4035c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4035c4:	2b00      	cmp	r3, #0
  4035c6:	f43f ae1f 	beq.w	403208 <_vfiprintf_r+0x374>
  4035ca:	ab0e      	add	r3, sp, #56	; 0x38
  4035cc:	2202      	movs	r2, #2
  4035ce:	4608      	mov	r0, r1
  4035d0:	931c      	str	r3, [sp, #112]	; 0x70
  4035d2:	921d      	str	r2, [sp, #116]	; 0x74
  4035d4:	46ca      	mov	sl, r9
  4035d6:	4601      	mov	r1, r0
  4035d8:	f10a 0a08 	add.w	sl, sl, #8
  4035dc:	3001      	adds	r0, #1
  4035de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4035e0:	2b80      	cmp	r3, #128	; 0x80
  4035e2:	f43f ae19 	beq.w	403218 <_vfiprintf_r+0x384>
  4035e6:	9b05      	ldr	r3, [sp, #20]
  4035e8:	1ae4      	subs	r4, r4, r3
  4035ea:	2c00      	cmp	r4, #0
  4035ec:	dd2e      	ble.n	40364c <_vfiprintf_r+0x7b8>
  4035ee:	2c10      	cmp	r4, #16
  4035f0:	4db3      	ldr	r5, [pc, #716]	; (4038c0 <_vfiprintf_r+0xa2c>)
  4035f2:	dd1e      	ble.n	403632 <_vfiprintf_r+0x79e>
  4035f4:	46d6      	mov	lr, sl
  4035f6:	2610      	movs	r6, #16
  4035f8:	9f06      	ldr	r7, [sp, #24]
  4035fa:	f8dd a010 	ldr.w	sl, [sp, #16]
  4035fe:	e006      	b.n	40360e <_vfiprintf_r+0x77a>
  403600:	1c88      	adds	r0, r1, #2
  403602:	f10e 0e08 	add.w	lr, lr, #8
  403606:	4619      	mov	r1, r3
  403608:	3c10      	subs	r4, #16
  40360a:	2c10      	cmp	r4, #16
  40360c:	dd10      	ble.n	403630 <_vfiprintf_r+0x79c>
  40360e:	1c4b      	adds	r3, r1, #1
  403610:	3210      	adds	r2, #16
  403612:	2b07      	cmp	r3, #7
  403614:	9211      	str	r2, [sp, #68]	; 0x44
  403616:	e88e 0060 	stmia.w	lr, {r5, r6}
  40361a:	9310      	str	r3, [sp, #64]	; 0x40
  40361c:	ddf0      	ble.n	403600 <_vfiprintf_r+0x76c>
  40361e:	2a00      	cmp	r2, #0
  403620:	d165      	bne.n	4036ee <_vfiprintf_r+0x85a>
  403622:	3c10      	subs	r4, #16
  403624:	2c10      	cmp	r4, #16
  403626:	f04f 0001 	mov.w	r0, #1
  40362a:	4611      	mov	r1, r2
  40362c:	46ce      	mov	lr, r9
  40362e:	dcee      	bgt.n	40360e <_vfiprintf_r+0x77a>
  403630:	46f2      	mov	sl, lr
  403632:	4422      	add	r2, r4
  403634:	2807      	cmp	r0, #7
  403636:	9211      	str	r2, [sp, #68]	; 0x44
  403638:	f8ca 5000 	str.w	r5, [sl]
  40363c:	f8ca 4004 	str.w	r4, [sl, #4]
  403640:	9010      	str	r0, [sp, #64]	; 0x40
  403642:	f300 8085 	bgt.w	403750 <_vfiprintf_r+0x8bc>
  403646:	f10a 0a08 	add.w	sl, sl, #8
  40364a:	3001      	adds	r0, #1
  40364c:	9905      	ldr	r1, [sp, #20]
  40364e:	f8ca b000 	str.w	fp, [sl]
  403652:	440a      	add	r2, r1
  403654:	2807      	cmp	r0, #7
  403656:	9211      	str	r2, [sp, #68]	; 0x44
  403658:	f8ca 1004 	str.w	r1, [sl, #4]
  40365c:	9010      	str	r0, [sp, #64]	; 0x40
  40365e:	f340 8082 	ble.w	403766 <_vfiprintf_r+0x8d2>
  403662:	2a00      	cmp	r2, #0
  403664:	f040 8118 	bne.w	403898 <_vfiprintf_r+0xa04>
  403668:	9b02      	ldr	r3, [sp, #8]
  40366a:	9210      	str	r2, [sp, #64]	; 0x40
  40366c:	0758      	lsls	r0, r3, #29
  40366e:	d535      	bpl.n	4036dc <_vfiprintf_r+0x848>
  403670:	9b08      	ldr	r3, [sp, #32]
  403672:	9901      	ldr	r1, [sp, #4]
  403674:	1a5c      	subs	r4, r3, r1
  403676:	2c00      	cmp	r4, #0
  403678:	f340 80e7 	ble.w	40384a <_vfiprintf_r+0x9b6>
  40367c:	46ca      	mov	sl, r9
  40367e:	2c10      	cmp	r4, #16
  403680:	f340 8218 	ble.w	403ab4 <_vfiprintf_r+0xc20>
  403684:	9910      	ldr	r1, [sp, #64]	; 0x40
  403686:	4e8f      	ldr	r6, [pc, #572]	; (4038c4 <_vfiprintf_r+0xa30>)
  403688:	9f06      	ldr	r7, [sp, #24]
  40368a:	f8dd b010 	ldr.w	fp, [sp, #16]
  40368e:	2510      	movs	r5, #16
  403690:	e006      	b.n	4036a0 <_vfiprintf_r+0x80c>
  403692:	1c88      	adds	r0, r1, #2
  403694:	f10a 0a08 	add.w	sl, sl, #8
  403698:	4619      	mov	r1, r3
  40369a:	3c10      	subs	r4, #16
  40369c:	2c10      	cmp	r4, #16
  40369e:	dd11      	ble.n	4036c4 <_vfiprintf_r+0x830>
  4036a0:	1c4b      	adds	r3, r1, #1
  4036a2:	3210      	adds	r2, #16
  4036a4:	2b07      	cmp	r3, #7
  4036a6:	9211      	str	r2, [sp, #68]	; 0x44
  4036a8:	f8ca 6000 	str.w	r6, [sl]
  4036ac:	f8ca 5004 	str.w	r5, [sl, #4]
  4036b0:	9310      	str	r3, [sp, #64]	; 0x40
  4036b2:	ddee      	ble.n	403692 <_vfiprintf_r+0x7fe>
  4036b4:	bb42      	cbnz	r2, 403708 <_vfiprintf_r+0x874>
  4036b6:	3c10      	subs	r4, #16
  4036b8:	2c10      	cmp	r4, #16
  4036ba:	f04f 0001 	mov.w	r0, #1
  4036be:	4611      	mov	r1, r2
  4036c0:	46ca      	mov	sl, r9
  4036c2:	dced      	bgt.n	4036a0 <_vfiprintf_r+0x80c>
  4036c4:	4422      	add	r2, r4
  4036c6:	2807      	cmp	r0, #7
  4036c8:	9211      	str	r2, [sp, #68]	; 0x44
  4036ca:	f8ca 6000 	str.w	r6, [sl]
  4036ce:	f8ca 4004 	str.w	r4, [sl, #4]
  4036d2:	9010      	str	r0, [sp, #64]	; 0x40
  4036d4:	dd51      	ble.n	40377a <_vfiprintf_r+0x8e6>
  4036d6:	2a00      	cmp	r2, #0
  4036d8:	f040 819b 	bne.w	403a12 <_vfiprintf_r+0xb7e>
  4036dc:	9b03      	ldr	r3, [sp, #12]
  4036de:	9a08      	ldr	r2, [sp, #32]
  4036e0:	9901      	ldr	r1, [sp, #4]
  4036e2:	428a      	cmp	r2, r1
  4036e4:	bfac      	ite	ge
  4036e6:	189b      	addge	r3, r3, r2
  4036e8:	185b      	addlt	r3, r3, r1
  4036ea:	9303      	str	r3, [sp, #12]
  4036ec:	e04e      	b.n	40378c <_vfiprintf_r+0x8f8>
  4036ee:	aa0f      	add	r2, sp, #60	; 0x3c
  4036f0:	4651      	mov	r1, sl
  4036f2:	4638      	mov	r0, r7
  4036f4:	f7ff fb84 	bl	402e00 <__sprint_r.part.0>
  4036f8:	2800      	cmp	r0, #0
  4036fa:	f040 813f 	bne.w	40397c <_vfiprintf_r+0xae8>
  4036fe:	9910      	ldr	r1, [sp, #64]	; 0x40
  403700:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403702:	1c48      	adds	r0, r1, #1
  403704:	46ce      	mov	lr, r9
  403706:	e77f      	b.n	403608 <_vfiprintf_r+0x774>
  403708:	aa0f      	add	r2, sp, #60	; 0x3c
  40370a:	4659      	mov	r1, fp
  40370c:	4638      	mov	r0, r7
  40370e:	f7ff fb77 	bl	402e00 <__sprint_r.part.0>
  403712:	b960      	cbnz	r0, 40372e <_vfiprintf_r+0x89a>
  403714:	9910      	ldr	r1, [sp, #64]	; 0x40
  403716:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403718:	1c48      	adds	r0, r1, #1
  40371a:	46ca      	mov	sl, r9
  40371c:	e7bd      	b.n	40369a <_vfiprintf_r+0x806>
  40371e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403720:	f8dd b010 	ldr.w	fp, [sp, #16]
  403724:	2b00      	cmp	r3, #0
  403726:	f040 81d4 	bne.w	403ad2 <_vfiprintf_r+0xc3e>
  40372a:	2300      	movs	r3, #0
  40372c:	9310      	str	r3, [sp, #64]	; 0x40
  40372e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403732:	f013 0f01 	tst.w	r3, #1
  403736:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40373a:	d102      	bne.n	403742 <_vfiprintf_r+0x8ae>
  40373c:	059a      	lsls	r2, r3, #22
  40373e:	f140 80de 	bpl.w	4038fe <_vfiprintf_r+0xa6a>
  403742:	065b      	lsls	r3, r3, #25
  403744:	f53f acb2 	bmi.w	4030ac <_vfiprintf_r+0x218>
  403748:	9803      	ldr	r0, [sp, #12]
  40374a:	b02d      	add	sp, #180	; 0xb4
  40374c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403750:	2a00      	cmp	r2, #0
  403752:	f040 8106 	bne.w	403962 <_vfiprintf_r+0xace>
  403756:	9a05      	ldr	r2, [sp, #20]
  403758:	921d      	str	r2, [sp, #116]	; 0x74
  40375a:	2301      	movs	r3, #1
  40375c:	9211      	str	r2, [sp, #68]	; 0x44
  40375e:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  403762:	9310      	str	r3, [sp, #64]	; 0x40
  403764:	46ca      	mov	sl, r9
  403766:	f10a 0a08 	add.w	sl, sl, #8
  40376a:	9b02      	ldr	r3, [sp, #8]
  40376c:	0759      	lsls	r1, r3, #29
  40376e:	d504      	bpl.n	40377a <_vfiprintf_r+0x8e6>
  403770:	9b08      	ldr	r3, [sp, #32]
  403772:	9901      	ldr	r1, [sp, #4]
  403774:	1a5c      	subs	r4, r3, r1
  403776:	2c00      	cmp	r4, #0
  403778:	dc81      	bgt.n	40367e <_vfiprintf_r+0x7ea>
  40377a:	9b03      	ldr	r3, [sp, #12]
  40377c:	9908      	ldr	r1, [sp, #32]
  40377e:	9801      	ldr	r0, [sp, #4]
  403780:	4281      	cmp	r1, r0
  403782:	bfac      	ite	ge
  403784:	185b      	addge	r3, r3, r1
  403786:	181b      	addlt	r3, r3, r0
  403788:	9303      	str	r3, [sp, #12]
  40378a:	bb72      	cbnz	r2, 4037ea <_vfiprintf_r+0x956>
  40378c:	2300      	movs	r3, #0
  40378e:	9310      	str	r3, [sp, #64]	; 0x40
  403790:	46ca      	mov	sl, r9
  403792:	f7ff bbbc 	b.w	402f0e <_vfiprintf_r+0x7a>
  403796:	aa0f      	add	r2, sp, #60	; 0x3c
  403798:	9904      	ldr	r1, [sp, #16]
  40379a:	4620      	mov	r0, r4
  40379c:	f7ff fb30 	bl	402e00 <__sprint_r.part.0>
  4037a0:	bb50      	cbnz	r0, 4037f8 <_vfiprintf_r+0x964>
  4037a2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4037a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4037a6:	f101 0e01 	add.w	lr, r1, #1
  4037aa:	46cc      	mov	ip, r9
  4037ac:	e548      	b.n	403240 <_vfiprintf_r+0x3ac>
  4037ae:	2a00      	cmp	r2, #0
  4037b0:	f040 8140 	bne.w	403a34 <_vfiprintf_r+0xba0>
  4037b4:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4037b8:	2900      	cmp	r1, #0
  4037ba:	f000 811b 	beq.w	4039f4 <_vfiprintf_r+0xb60>
  4037be:	2201      	movs	r2, #1
  4037c0:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4037c4:	4610      	mov	r0, r2
  4037c6:	921d      	str	r2, [sp, #116]	; 0x74
  4037c8:	911c      	str	r1, [sp, #112]	; 0x70
  4037ca:	46ca      	mov	sl, r9
  4037cc:	4601      	mov	r1, r0
  4037ce:	f10a 0a08 	add.w	sl, sl, #8
  4037d2:	3001      	adds	r0, #1
  4037d4:	e507      	b.n	4031e6 <_vfiprintf_r+0x352>
  4037d6:	9b02      	ldr	r3, [sp, #8]
  4037d8:	2a01      	cmp	r2, #1
  4037da:	f000 8098 	beq.w	40390e <_vfiprintf_r+0xa7a>
  4037de:	2a02      	cmp	r2, #2
  4037e0:	d10d      	bne.n	4037fe <_vfiprintf_r+0x96a>
  4037e2:	9302      	str	r3, [sp, #8]
  4037e4:	2600      	movs	r6, #0
  4037e6:	2700      	movs	r7, #0
  4037e8:	e5b0      	b.n	40334c <_vfiprintf_r+0x4b8>
  4037ea:	aa0f      	add	r2, sp, #60	; 0x3c
  4037ec:	9904      	ldr	r1, [sp, #16]
  4037ee:	9806      	ldr	r0, [sp, #24]
  4037f0:	f7ff fb06 	bl	402e00 <__sprint_r.part.0>
  4037f4:	2800      	cmp	r0, #0
  4037f6:	d0c9      	beq.n	40378c <_vfiprintf_r+0x8f8>
  4037f8:	f8dd b010 	ldr.w	fp, [sp, #16]
  4037fc:	e797      	b.n	40372e <_vfiprintf_r+0x89a>
  4037fe:	9302      	str	r3, [sp, #8]
  403800:	2600      	movs	r6, #0
  403802:	2700      	movs	r7, #0
  403804:	4649      	mov	r1, r9
  403806:	e000      	b.n	40380a <_vfiprintf_r+0x976>
  403808:	4659      	mov	r1, fp
  40380a:	08f2      	lsrs	r2, r6, #3
  40380c:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  403810:	08f8      	lsrs	r0, r7, #3
  403812:	f006 0307 	and.w	r3, r6, #7
  403816:	4607      	mov	r7, r0
  403818:	4616      	mov	r6, r2
  40381a:	3330      	adds	r3, #48	; 0x30
  40381c:	ea56 0207 	orrs.w	r2, r6, r7
  403820:	f801 3c01 	strb.w	r3, [r1, #-1]
  403824:	f101 3bff 	add.w	fp, r1, #4294967295
  403828:	d1ee      	bne.n	403808 <_vfiprintf_r+0x974>
  40382a:	9a02      	ldr	r2, [sp, #8]
  40382c:	07d6      	lsls	r6, r2, #31
  40382e:	f57f ad9d 	bpl.w	40336c <_vfiprintf_r+0x4d8>
  403832:	2b30      	cmp	r3, #48	; 0x30
  403834:	f43f ad9a 	beq.w	40336c <_vfiprintf_r+0x4d8>
  403838:	3902      	subs	r1, #2
  40383a:	2330      	movs	r3, #48	; 0x30
  40383c:	f80b 3c01 	strb.w	r3, [fp, #-1]
  403840:	eba9 0301 	sub.w	r3, r9, r1
  403844:	9305      	str	r3, [sp, #20]
  403846:	468b      	mov	fp, r1
  403848:	e476      	b.n	403138 <_vfiprintf_r+0x2a4>
  40384a:	9b03      	ldr	r3, [sp, #12]
  40384c:	9a08      	ldr	r2, [sp, #32]
  40384e:	428a      	cmp	r2, r1
  403850:	bfac      	ite	ge
  403852:	189b      	addge	r3, r3, r2
  403854:	185b      	addlt	r3, r3, r1
  403856:	9303      	str	r3, [sp, #12]
  403858:	e798      	b.n	40378c <_vfiprintf_r+0x8f8>
  40385a:	2202      	movs	r2, #2
  40385c:	e44d      	b.n	4030fa <_vfiprintf_r+0x266>
  40385e:	2f00      	cmp	r7, #0
  403860:	bf08      	it	eq
  403862:	2e0a      	cmpeq	r6, #10
  403864:	d352      	bcc.n	40390c <_vfiprintf_r+0xa78>
  403866:	46cb      	mov	fp, r9
  403868:	4630      	mov	r0, r6
  40386a:	4639      	mov	r1, r7
  40386c:	220a      	movs	r2, #10
  40386e:	2300      	movs	r3, #0
  403870:	f004 ff02 	bl	408678 <__aeabi_uldivmod>
  403874:	3230      	adds	r2, #48	; 0x30
  403876:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  40387a:	4630      	mov	r0, r6
  40387c:	4639      	mov	r1, r7
  40387e:	2300      	movs	r3, #0
  403880:	220a      	movs	r2, #10
  403882:	f004 fef9 	bl	408678 <__aeabi_uldivmod>
  403886:	4606      	mov	r6, r0
  403888:	460f      	mov	r7, r1
  40388a:	ea56 0307 	orrs.w	r3, r6, r7
  40388e:	d1eb      	bne.n	403868 <_vfiprintf_r+0x9d4>
  403890:	e56c      	b.n	40336c <_vfiprintf_r+0x4d8>
  403892:	9405      	str	r4, [sp, #20]
  403894:	46cb      	mov	fp, r9
  403896:	e44f      	b.n	403138 <_vfiprintf_r+0x2a4>
  403898:	aa0f      	add	r2, sp, #60	; 0x3c
  40389a:	9904      	ldr	r1, [sp, #16]
  40389c:	9806      	ldr	r0, [sp, #24]
  40389e:	f7ff faaf 	bl	402e00 <__sprint_r.part.0>
  4038a2:	2800      	cmp	r0, #0
  4038a4:	d1a8      	bne.n	4037f8 <_vfiprintf_r+0x964>
  4038a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4038a8:	46ca      	mov	sl, r9
  4038aa:	e75e      	b.n	40376a <_vfiprintf_r+0x8d6>
  4038ac:	aa0f      	add	r2, sp, #60	; 0x3c
  4038ae:	9904      	ldr	r1, [sp, #16]
  4038b0:	9806      	ldr	r0, [sp, #24]
  4038b2:	f7ff faa5 	bl	402e00 <__sprint_r.part.0>
  4038b6:	2800      	cmp	r0, #0
  4038b8:	d19e      	bne.n	4037f8 <_vfiprintf_r+0x964>
  4038ba:	46ca      	mov	sl, r9
  4038bc:	f7ff bbc0 	b.w	403040 <_vfiprintf_r+0x1ac>
  4038c0:	00409b4c 	.word	0x00409b4c
  4038c4:	00409b3c 	.word	0x00409b3c
  4038c8:	3104      	adds	r1, #4
  4038ca:	6816      	ldr	r6, [r2, #0]
  4038cc:	9107      	str	r1, [sp, #28]
  4038ce:	2201      	movs	r2, #1
  4038d0:	2700      	movs	r7, #0
  4038d2:	e412      	b.n	4030fa <_vfiprintf_r+0x266>
  4038d4:	9807      	ldr	r0, [sp, #28]
  4038d6:	4601      	mov	r1, r0
  4038d8:	3104      	adds	r1, #4
  4038da:	6806      	ldr	r6, [r0, #0]
  4038dc:	9107      	str	r1, [sp, #28]
  4038de:	2700      	movs	r7, #0
  4038e0:	e40b      	b.n	4030fa <_vfiprintf_r+0x266>
  4038e2:	680e      	ldr	r6, [r1, #0]
  4038e4:	3104      	adds	r1, #4
  4038e6:	9107      	str	r1, [sp, #28]
  4038e8:	2700      	movs	r7, #0
  4038ea:	e591      	b.n	403410 <_vfiprintf_r+0x57c>
  4038ec:	9907      	ldr	r1, [sp, #28]
  4038ee:	680e      	ldr	r6, [r1, #0]
  4038f0:	460a      	mov	r2, r1
  4038f2:	17f7      	asrs	r7, r6, #31
  4038f4:	3204      	adds	r2, #4
  4038f6:	9207      	str	r2, [sp, #28]
  4038f8:	4630      	mov	r0, r6
  4038fa:	4639      	mov	r1, r7
  4038fc:	e50f      	b.n	40331e <_vfiprintf_r+0x48a>
  4038fe:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403902:	f003 f943 	bl	406b8c <__retarget_lock_release_recursive>
  403906:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40390a:	e71a      	b.n	403742 <_vfiprintf_r+0x8ae>
  40390c:	9b02      	ldr	r3, [sp, #8]
  40390e:	9302      	str	r3, [sp, #8]
  403910:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  403914:	3630      	adds	r6, #48	; 0x30
  403916:	2301      	movs	r3, #1
  403918:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  40391c:	9305      	str	r3, [sp, #20]
  40391e:	e40b      	b.n	403138 <_vfiprintf_r+0x2a4>
  403920:	aa0f      	add	r2, sp, #60	; 0x3c
  403922:	9904      	ldr	r1, [sp, #16]
  403924:	9806      	ldr	r0, [sp, #24]
  403926:	f7ff fa6b 	bl	402e00 <__sprint_r.part.0>
  40392a:	2800      	cmp	r0, #0
  40392c:	f47f af64 	bne.w	4037f8 <_vfiprintf_r+0x964>
  403930:	9910      	ldr	r1, [sp, #64]	; 0x40
  403932:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403934:	1c48      	adds	r0, r1, #1
  403936:	46ca      	mov	sl, r9
  403938:	e651      	b.n	4035de <_vfiprintf_r+0x74a>
  40393a:	aa0f      	add	r2, sp, #60	; 0x3c
  40393c:	9904      	ldr	r1, [sp, #16]
  40393e:	9806      	ldr	r0, [sp, #24]
  403940:	f7ff fa5e 	bl	402e00 <__sprint_r.part.0>
  403944:	2800      	cmp	r0, #0
  403946:	f47f af57 	bne.w	4037f8 <_vfiprintf_r+0x964>
  40394a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40394c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40394e:	1c48      	adds	r0, r1, #1
  403950:	46ca      	mov	sl, r9
  403952:	e448      	b.n	4031e6 <_vfiprintf_r+0x352>
  403954:	2a00      	cmp	r2, #0
  403956:	f040 8091 	bne.w	403a7c <_vfiprintf_r+0xbe8>
  40395a:	2001      	movs	r0, #1
  40395c:	4611      	mov	r1, r2
  40395e:	46ca      	mov	sl, r9
  403960:	e641      	b.n	4035e6 <_vfiprintf_r+0x752>
  403962:	aa0f      	add	r2, sp, #60	; 0x3c
  403964:	9904      	ldr	r1, [sp, #16]
  403966:	9806      	ldr	r0, [sp, #24]
  403968:	f7ff fa4a 	bl	402e00 <__sprint_r.part.0>
  40396c:	2800      	cmp	r0, #0
  40396e:	f47f af43 	bne.w	4037f8 <_vfiprintf_r+0x964>
  403972:	9810      	ldr	r0, [sp, #64]	; 0x40
  403974:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403976:	3001      	adds	r0, #1
  403978:	46ca      	mov	sl, r9
  40397a:	e667      	b.n	40364c <_vfiprintf_r+0x7b8>
  40397c:	46d3      	mov	fp, sl
  40397e:	e6d6      	b.n	40372e <_vfiprintf_r+0x89a>
  403980:	9e07      	ldr	r6, [sp, #28]
  403982:	3607      	adds	r6, #7
  403984:	f026 0207 	bic.w	r2, r6, #7
  403988:	f102 0108 	add.w	r1, r2, #8
  40398c:	e9d2 6700 	ldrd	r6, r7, [r2]
  403990:	9107      	str	r1, [sp, #28]
  403992:	2201      	movs	r2, #1
  403994:	f7ff bbb1 	b.w	4030fa <_vfiprintf_r+0x266>
  403998:	9e07      	ldr	r6, [sp, #28]
  40399a:	3607      	adds	r6, #7
  40399c:	f026 0607 	bic.w	r6, r6, #7
  4039a0:	e9d6 0100 	ldrd	r0, r1, [r6]
  4039a4:	f106 0208 	add.w	r2, r6, #8
  4039a8:	9207      	str	r2, [sp, #28]
  4039aa:	4606      	mov	r6, r0
  4039ac:	460f      	mov	r7, r1
  4039ae:	e4b6      	b.n	40331e <_vfiprintf_r+0x48a>
  4039b0:	9e07      	ldr	r6, [sp, #28]
  4039b2:	3607      	adds	r6, #7
  4039b4:	f026 0207 	bic.w	r2, r6, #7
  4039b8:	f102 0108 	add.w	r1, r2, #8
  4039bc:	e9d2 6700 	ldrd	r6, r7, [r2]
  4039c0:	9107      	str	r1, [sp, #28]
  4039c2:	2200      	movs	r2, #0
  4039c4:	f7ff bb99 	b.w	4030fa <_vfiprintf_r+0x266>
  4039c8:	9e07      	ldr	r6, [sp, #28]
  4039ca:	3607      	adds	r6, #7
  4039cc:	f026 0107 	bic.w	r1, r6, #7
  4039d0:	f101 0008 	add.w	r0, r1, #8
  4039d4:	9007      	str	r0, [sp, #28]
  4039d6:	e9d1 6700 	ldrd	r6, r7, [r1]
  4039da:	e519      	b.n	403410 <_vfiprintf_r+0x57c>
  4039dc:	46cb      	mov	fp, r9
  4039de:	f7ff bbab 	b.w	403138 <_vfiprintf_r+0x2a4>
  4039e2:	252d      	movs	r5, #45	; 0x2d
  4039e4:	4276      	negs	r6, r6
  4039e6:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4039ea:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4039ee:	2201      	movs	r2, #1
  4039f0:	f7ff bb88 	b.w	403104 <_vfiprintf_r+0x270>
  4039f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4039f6:	b9b3      	cbnz	r3, 403a26 <_vfiprintf_r+0xb92>
  4039f8:	4611      	mov	r1, r2
  4039fa:	2001      	movs	r0, #1
  4039fc:	46ca      	mov	sl, r9
  4039fe:	e5f2      	b.n	4035e6 <_vfiprintf_r+0x752>
  403a00:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403a04:	f003 f8c2 	bl	406b8c <__retarget_lock_release_recursive>
  403a08:	f04f 33ff 	mov.w	r3, #4294967295
  403a0c:	9303      	str	r3, [sp, #12]
  403a0e:	f7ff bb50 	b.w	4030b2 <_vfiprintf_r+0x21e>
  403a12:	aa0f      	add	r2, sp, #60	; 0x3c
  403a14:	9904      	ldr	r1, [sp, #16]
  403a16:	9806      	ldr	r0, [sp, #24]
  403a18:	f7ff f9f2 	bl	402e00 <__sprint_r.part.0>
  403a1c:	2800      	cmp	r0, #0
  403a1e:	f47f aeeb 	bne.w	4037f8 <_vfiprintf_r+0x964>
  403a22:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403a24:	e6a9      	b.n	40377a <_vfiprintf_r+0x8e6>
  403a26:	ab0e      	add	r3, sp, #56	; 0x38
  403a28:	2202      	movs	r2, #2
  403a2a:	931c      	str	r3, [sp, #112]	; 0x70
  403a2c:	921d      	str	r2, [sp, #116]	; 0x74
  403a2e:	2001      	movs	r0, #1
  403a30:	46ca      	mov	sl, r9
  403a32:	e5d0      	b.n	4035d6 <_vfiprintf_r+0x742>
  403a34:	aa0f      	add	r2, sp, #60	; 0x3c
  403a36:	9904      	ldr	r1, [sp, #16]
  403a38:	9806      	ldr	r0, [sp, #24]
  403a3a:	f7ff f9e1 	bl	402e00 <__sprint_r.part.0>
  403a3e:	2800      	cmp	r0, #0
  403a40:	f47f aeda 	bne.w	4037f8 <_vfiprintf_r+0x964>
  403a44:	9910      	ldr	r1, [sp, #64]	; 0x40
  403a46:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403a48:	1c48      	adds	r0, r1, #1
  403a4a:	46ca      	mov	sl, r9
  403a4c:	e5a4      	b.n	403598 <_vfiprintf_r+0x704>
  403a4e:	9a07      	ldr	r2, [sp, #28]
  403a50:	9903      	ldr	r1, [sp, #12]
  403a52:	6813      	ldr	r3, [r2, #0]
  403a54:	17cd      	asrs	r5, r1, #31
  403a56:	4608      	mov	r0, r1
  403a58:	3204      	adds	r2, #4
  403a5a:	4629      	mov	r1, r5
  403a5c:	9207      	str	r2, [sp, #28]
  403a5e:	e9c3 0100 	strd	r0, r1, [r3]
  403a62:	f7ff ba54 	b.w	402f0e <_vfiprintf_r+0x7a>
  403a66:	4658      	mov	r0, fp
  403a68:	9607      	str	r6, [sp, #28]
  403a6a:	9302      	str	r3, [sp, #8]
  403a6c:	f003 ff08 	bl	407880 <strlen>
  403a70:	2400      	movs	r4, #0
  403a72:	9005      	str	r0, [sp, #20]
  403a74:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403a78:	f7ff bb5e 	b.w	403138 <_vfiprintf_r+0x2a4>
  403a7c:	aa0f      	add	r2, sp, #60	; 0x3c
  403a7e:	9904      	ldr	r1, [sp, #16]
  403a80:	9806      	ldr	r0, [sp, #24]
  403a82:	f7ff f9bd 	bl	402e00 <__sprint_r.part.0>
  403a86:	2800      	cmp	r0, #0
  403a88:	f47f aeb6 	bne.w	4037f8 <_vfiprintf_r+0x964>
  403a8c:	9910      	ldr	r1, [sp, #64]	; 0x40
  403a8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403a90:	1c48      	adds	r0, r1, #1
  403a92:	46ca      	mov	sl, r9
  403a94:	e5a7      	b.n	4035e6 <_vfiprintf_r+0x752>
  403a96:	9910      	ldr	r1, [sp, #64]	; 0x40
  403a98:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403a9a:	4e20      	ldr	r6, [pc, #128]	; (403b1c <_vfiprintf_r+0xc88>)
  403a9c:	3101      	adds	r1, #1
  403a9e:	f7ff bb90 	b.w	4031c2 <_vfiprintf_r+0x32e>
  403aa2:	2c06      	cmp	r4, #6
  403aa4:	bf28      	it	cs
  403aa6:	2406      	movcs	r4, #6
  403aa8:	9405      	str	r4, [sp, #20]
  403aaa:	9607      	str	r6, [sp, #28]
  403aac:	9401      	str	r4, [sp, #4]
  403aae:	f8df b070 	ldr.w	fp, [pc, #112]	; 403b20 <_vfiprintf_r+0xc8c>
  403ab2:	e4d5      	b.n	403460 <_vfiprintf_r+0x5cc>
  403ab4:	9810      	ldr	r0, [sp, #64]	; 0x40
  403ab6:	4e19      	ldr	r6, [pc, #100]	; (403b1c <_vfiprintf_r+0xc88>)
  403ab8:	3001      	adds	r0, #1
  403aba:	e603      	b.n	4036c4 <_vfiprintf_r+0x830>
  403abc:	9405      	str	r4, [sp, #20]
  403abe:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403ac2:	9607      	str	r6, [sp, #28]
  403ac4:	9302      	str	r3, [sp, #8]
  403ac6:	4604      	mov	r4, r0
  403ac8:	f7ff bb36 	b.w	403138 <_vfiprintf_r+0x2a4>
  403acc:	4686      	mov	lr, r0
  403ace:	f7ff bbce 	b.w	40326e <_vfiprintf_r+0x3da>
  403ad2:	9806      	ldr	r0, [sp, #24]
  403ad4:	aa0f      	add	r2, sp, #60	; 0x3c
  403ad6:	4659      	mov	r1, fp
  403ad8:	f7ff f992 	bl	402e00 <__sprint_r.part.0>
  403adc:	2800      	cmp	r0, #0
  403ade:	f43f ae24 	beq.w	40372a <_vfiprintf_r+0x896>
  403ae2:	e624      	b.n	40372e <_vfiprintf_r+0x89a>
  403ae4:	9907      	ldr	r1, [sp, #28]
  403ae6:	f898 2001 	ldrb.w	r2, [r8, #1]
  403aea:	680c      	ldr	r4, [r1, #0]
  403aec:	3104      	adds	r1, #4
  403aee:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  403af2:	46b8      	mov	r8, r7
  403af4:	9107      	str	r1, [sp, #28]
  403af6:	f7ff ba3f 	b.w	402f78 <_vfiprintf_r+0xe4>
  403afa:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403afe:	e43c      	b.n	40337a <_vfiprintf_r+0x4e6>
  403b00:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403b04:	e521      	b.n	40354a <_vfiprintf_r+0x6b6>
  403b06:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403b0a:	f7ff bbf4 	b.w	4032f6 <_vfiprintf_r+0x462>
  403b0e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403b12:	e491      	b.n	403438 <_vfiprintf_r+0x5a4>
  403b14:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403b18:	e469      	b.n	4033ee <_vfiprintf_r+0x55a>
  403b1a:	bf00      	nop
  403b1c:	00409b3c 	.word	0x00409b3c
  403b20:	00409b34 	.word	0x00409b34

00403b24 <__sbprintf>:
  403b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403b28:	460c      	mov	r4, r1
  403b2a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  403b2e:	8989      	ldrh	r1, [r1, #12]
  403b30:	6e66      	ldr	r6, [r4, #100]	; 0x64
  403b32:	89e5      	ldrh	r5, [r4, #14]
  403b34:	9619      	str	r6, [sp, #100]	; 0x64
  403b36:	f021 0102 	bic.w	r1, r1, #2
  403b3a:	4606      	mov	r6, r0
  403b3c:	69e0      	ldr	r0, [r4, #28]
  403b3e:	f8ad 100c 	strh.w	r1, [sp, #12]
  403b42:	4617      	mov	r7, r2
  403b44:	f44f 6180 	mov.w	r1, #1024	; 0x400
  403b48:	6a62      	ldr	r2, [r4, #36]	; 0x24
  403b4a:	f8ad 500e 	strh.w	r5, [sp, #14]
  403b4e:	4698      	mov	r8, r3
  403b50:	ad1a      	add	r5, sp, #104	; 0x68
  403b52:	2300      	movs	r3, #0
  403b54:	9007      	str	r0, [sp, #28]
  403b56:	a816      	add	r0, sp, #88	; 0x58
  403b58:	9209      	str	r2, [sp, #36]	; 0x24
  403b5a:	9306      	str	r3, [sp, #24]
  403b5c:	9500      	str	r5, [sp, #0]
  403b5e:	9504      	str	r5, [sp, #16]
  403b60:	9102      	str	r1, [sp, #8]
  403b62:	9105      	str	r1, [sp, #20]
  403b64:	f003 f80c 	bl	406b80 <__retarget_lock_init_recursive>
  403b68:	4643      	mov	r3, r8
  403b6a:	463a      	mov	r2, r7
  403b6c:	4669      	mov	r1, sp
  403b6e:	4630      	mov	r0, r6
  403b70:	f7ff f990 	bl	402e94 <_vfiprintf_r>
  403b74:	1e05      	subs	r5, r0, #0
  403b76:	db07      	blt.n	403b88 <__sbprintf+0x64>
  403b78:	4630      	mov	r0, r6
  403b7a:	4669      	mov	r1, sp
  403b7c:	f002 fbde 	bl	40633c <_fflush_r>
  403b80:	2800      	cmp	r0, #0
  403b82:	bf18      	it	ne
  403b84:	f04f 35ff 	movne.w	r5, #4294967295
  403b88:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  403b8c:	065b      	lsls	r3, r3, #25
  403b8e:	d503      	bpl.n	403b98 <__sbprintf+0x74>
  403b90:	89a3      	ldrh	r3, [r4, #12]
  403b92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403b96:	81a3      	strh	r3, [r4, #12]
  403b98:	9816      	ldr	r0, [sp, #88]	; 0x58
  403b9a:	f002 fff3 	bl	406b84 <__retarget_lock_close_recursive>
  403b9e:	4628      	mov	r0, r5
  403ba0:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  403ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00403ba8 <_vfprintf_r>:
  403ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403bac:	b0c1      	sub	sp, #260	; 0x104
  403bae:	461d      	mov	r5, r3
  403bb0:	468a      	mov	sl, r1
  403bb2:	4691      	mov	r9, r2
  403bb4:	4604      	mov	r4, r0
  403bb6:	9008      	str	r0, [sp, #32]
  403bb8:	f002 ffd4 	bl	406b64 <_localeconv_r>
  403bbc:	6803      	ldr	r3, [r0, #0]
  403bbe:	9315      	str	r3, [sp, #84]	; 0x54
  403bc0:	4618      	mov	r0, r3
  403bc2:	f003 fe5d 	bl	407880 <strlen>
  403bc6:	950e      	str	r5, [sp, #56]	; 0x38
  403bc8:	9014      	str	r0, [sp, #80]	; 0x50
  403bca:	b11c      	cbz	r4, 403bd4 <_vfprintf_r+0x2c>
  403bcc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  403bce:	2b00      	cmp	r3, #0
  403bd0:	f000 825f 	beq.w	404092 <_vfprintf_r+0x4ea>
  403bd4:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  403bd8:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  403bdc:	f013 0f01 	tst.w	r3, #1
  403be0:	b293      	uxth	r3, r2
  403be2:	d102      	bne.n	403bea <_vfprintf_r+0x42>
  403be4:	0599      	lsls	r1, r3, #22
  403be6:	f140 8275 	bpl.w	4040d4 <_vfprintf_r+0x52c>
  403bea:	049f      	lsls	r7, r3, #18
  403bec:	d40a      	bmi.n	403c04 <_vfprintf_r+0x5c>
  403bee:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
  403bf2:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
  403bf6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  403bfa:	f8aa 300c 	strh.w	r3, [sl, #12]
  403bfe:	f8ca 1064 	str.w	r1, [sl, #100]	; 0x64
  403c02:	b29b      	uxth	r3, r3
  403c04:	071e      	lsls	r6, r3, #28
  403c06:	f140 8223 	bpl.w	404050 <_vfprintf_r+0x4a8>
  403c0a:	f8da 2010 	ldr.w	r2, [sl, #16]
  403c0e:	2a00      	cmp	r2, #0
  403c10:	f000 821e 	beq.w	404050 <_vfprintf_r+0x4a8>
  403c14:	f003 021a 	and.w	r2, r3, #26
  403c18:	2a0a      	cmp	r2, #10
  403c1a:	f000 823e 	beq.w	40409a <_vfprintf_r+0x4f2>
  403c1e:	2300      	movs	r3, #0
  403c20:	4618      	mov	r0, r3
  403c22:	9311      	str	r3, [sp, #68]	; 0x44
  403c24:	9313      	str	r3, [sp, #76]	; 0x4c
  403c26:	9312      	str	r3, [sp, #72]	; 0x48
  403c28:	9325      	str	r3, [sp, #148]	; 0x94
  403c2a:	9324      	str	r3, [sp, #144]	; 0x90
  403c2c:	9318      	str	r3, [sp, #96]	; 0x60
  403c2e:	9319      	str	r3, [sp, #100]	; 0x64
  403c30:	930b      	str	r3, [sp, #44]	; 0x2c
  403c32:	ab30      	add	r3, sp, #192	; 0xc0
  403c34:	9323      	str	r3, [sp, #140]	; 0x8c
  403c36:	4698      	mov	r8, r3
  403c38:	9016      	str	r0, [sp, #88]	; 0x58
  403c3a:	9017      	str	r0, [sp, #92]	; 0x5c
  403c3c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  403c40:	f899 3000 	ldrb.w	r3, [r9]
  403c44:	464c      	mov	r4, r9
  403c46:	b1eb      	cbz	r3, 403c84 <_vfprintf_r+0xdc>
  403c48:	2b25      	cmp	r3, #37	; 0x25
  403c4a:	d102      	bne.n	403c52 <_vfprintf_r+0xaa>
  403c4c:	e01a      	b.n	403c84 <_vfprintf_r+0xdc>
  403c4e:	2b25      	cmp	r3, #37	; 0x25
  403c50:	d003      	beq.n	403c5a <_vfprintf_r+0xb2>
  403c52:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403c56:	2b00      	cmp	r3, #0
  403c58:	d1f9      	bne.n	403c4e <_vfprintf_r+0xa6>
  403c5a:	eba4 0509 	sub.w	r5, r4, r9
  403c5e:	b18d      	cbz	r5, 403c84 <_vfprintf_r+0xdc>
  403c60:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403c62:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403c64:	f8c8 9000 	str.w	r9, [r8]
  403c68:	3301      	adds	r3, #1
  403c6a:	442a      	add	r2, r5
  403c6c:	2b07      	cmp	r3, #7
  403c6e:	f8c8 5004 	str.w	r5, [r8, #4]
  403c72:	9225      	str	r2, [sp, #148]	; 0x94
  403c74:	9324      	str	r3, [sp, #144]	; 0x90
  403c76:	f300 8201 	bgt.w	40407c <_vfprintf_r+0x4d4>
  403c7a:	f108 0808 	add.w	r8, r8, #8
  403c7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403c80:	442b      	add	r3, r5
  403c82:	930b      	str	r3, [sp, #44]	; 0x2c
  403c84:	7823      	ldrb	r3, [r4, #0]
  403c86:	2b00      	cmp	r3, #0
  403c88:	f000 83f0 	beq.w	40446c <_vfprintf_r+0x8c4>
  403c8c:	2300      	movs	r3, #0
  403c8e:	461a      	mov	r2, r3
  403c90:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  403c94:	4619      	mov	r1, r3
  403c96:	930c      	str	r3, [sp, #48]	; 0x30
  403c98:	469b      	mov	fp, r3
  403c9a:	7866      	ldrb	r6, [r4, #1]
  403c9c:	f04f 33ff 	mov.w	r3, #4294967295
  403ca0:	f104 0901 	add.w	r9, r4, #1
  403ca4:	9309      	str	r3, [sp, #36]	; 0x24
  403ca6:	f109 0901 	add.w	r9, r9, #1
  403caa:	f1a6 0320 	sub.w	r3, r6, #32
  403cae:	2b58      	cmp	r3, #88	; 0x58
  403cb0:	f200 83bf 	bhi.w	404432 <_vfprintf_r+0x88a>
  403cb4:	e8df f013 	tbh	[pc, r3, lsl #1]
  403cb8:	03bd02e0 	.word	0x03bd02e0
  403cbc:	034f03bd 	.word	0x034f03bd
  403cc0:	03bd03bd 	.word	0x03bd03bd
  403cc4:	03bd03bd 	.word	0x03bd03bd
  403cc8:	03bd03bd 	.word	0x03bd03bd
  403ccc:	03080354 	.word	0x03080354
  403cd0:	021a03bd 	.word	0x021a03bd
  403cd4:	03bd02e8 	.word	0x03bd02e8
  403cd8:	033a0303 	.word	0x033a0303
  403cdc:	033a033a 	.word	0x033a033a
  403ce0:	033a033a 	.word	0x033a033a
  403ce4:	033a033a 	.word	0x033a033a
  403ce8:	033a033a 	.word	0x033a033a
  403cec:	03bd03bd 	.word	0x03bd03bd
  403cf0:	03bd03bd 	.word	0x03bd03bd
  403cf4:	03bd03bd 	.word	0x03bd03bd
  403cf8:	03bd03bd 	.word	0x03bd03bd
  403cfc:	03bd03bd 	.word	0x03bd03bd
  403d00:	03620349 	.word	0x03620349
  403d04:	036203bd 	.word	0x036203bd
  403d08:	03bd03bd 	.word	0x03bd03bd
  403d0c:	03bd03bd 	.word	0x03bd03bd
  403d10:	03bd03a2 	.word	0x03bd03a2
  403d14:	006f03bd 	.word	0x006f03bd
  403d18:	03bd03bd 	.word	0x03bd03bd
  403d1c:	03bd03bd 	.word	0x03bd03bd
  403d20:	005903bd 	.word	0x005903bd
  403d24:	03bd03bd 	.word	0x03bd03bd
  403d28:	03bd031e 	.word	0x03bd031e
  403d2c:	03bd03bd 	.word	0x03bd03bd
  403d30:	03bd03bd 	.word	0x03bd03bd
  403d34:	03bd03bd 	.word	0x03bd03bd
  403d38:	03bd03bd 	.word	0x03bd03bd
  403d3c:	032403bd 	.word	0x032403bd
  403d40:	03620273 	.word	0x03620273
  403d44:	03620362 	.word	0x03620362
  403d48:	027302b7 	.word	0x027302b7
  403d4c:	03bd03bd 	.word	0x03bd03bd
  403d50:	03bd02bc 	.word	0x03bd02bc
  403d54:	007102c9 	.word	0x007102c9
  403d58:	0247030d 	.word	0x0247030d
  403d5c:	025203bd 	.word	0x025203bd
  403d60:	005b03bd 	.word	0x005b03bd
  403d64:	03bd03bd 	.word	0x03bd03bd
  403d68:	021f      	.short	0x021f
  403d6a:	f04b 0b10 	orr.w	fp, fp, #16
  403d6e:	f01b 0f20 	tst.w	fp, #32
  403d72:	f040 8353 	bne.w	40441c <_vfprintf_r+0x874>
  403d76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403d78:	f01b 0f10 	tst.w	fp, #16
  403d7c:	4613      	mov	r3, r2
  403d7e:	f040 85b4 	bne.w	4048ea <_vfprintf_r+0xd42>
  403d82:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403d86:	f000 85b0 	beq.w	4048ea <_vfprintf_r+0xd42>
  403d8a:	8814      	ldrh	r4, [r2, #0]
  403d8c:	3204      	adds	r2, #4
  403d8e:	2500      	movs	r5, #0
  403d90:	2301      	movs	r3, #1
  403d92:	920e      	str	r2, [sp, #56]	; 0x38
  403d94:	e014      	b.n	403dc0 <_vfprintf_r+0x218>
  403d96:	f04b 0b10 	orr.w	fp, fp, #16
  403d9a:	f01b 0320 	ands.w	r3, fp, #32
  403d9e:	f040 8332 	bne.w	404406 <_vfprintf_r+0x85e>
  403da2:	f01b 0210 	ands.w	r2, fp, #16
  403da6:	f040 8589 	bne.w	4048bc <_vfprintf_r+0xd14>
  403daa:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  403dae:	f000 8585 	beq.w	4048bc <_vfprintf_r+0xd14>
  403db2:	990e      	ldr	r1, [sp, #56]	; 0x38
  403db4:	4613      	mov	r3, r2
  403db6:	460a      	mov	r2, r1
  403db8:	3204      	adds	r2, #4
  403dba:	880c      	ldrh	r4, [r1, #0]
  403dbc:	920e      	str	r2, [sp, #56]	; 0x38
  403dbe:	2500      	movs	r5, #0
  403dc0:	f04f 0a00 	mov.w	sl, #0
  403dc4:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  403dc8:	9909      	ldr	r1, [sp, #36]	; 0x24
  403dca:	1c4a      	adds	r2, r1, #1
  403dcc:	f000 820b 	beq.w	4041e6 <_vfprintf_r+0x63e>
  403dd0:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  403dd4:	9206      	str	r2, [sp, #24]
  403dd6:	ea54 0205 	orrs.w	r2, r4, r5
  403dda:	f040 820a 	bne.w	4041f2 <_vfprintf_r+0x64a>
  403dde:	2900      	cmp	r1, #0
  403de0:	f040 846f 	bne.w	4046c2 <_vfprintf_r+0xb1a>
  403de4:	2b00      	cmp	r3, #0
  403de6:	f040 852d 	bne.w	404844 <_vfprintf_r+0xc9c>
  403dea:	f01b 0301 	ands.w	r3, fp, #1
  403dee:	930d      	str	r3, [sp, #52]	; 0x34
  403df0:	f000 8668 	beq.w	404ac4 <_vfprintf_r+0xf1c>
  403df4:	af40      	add	r7, sp, #256	; 0x100
  403df6:	2330      	movs	r3, #48	; 0x30
  403df8:	f807 3d41 	strb.w	r3, [r7, #-65]!
  403dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403dfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403e00:	4293      	cmp	r3, r2
  403e02:	bfb8      	it	lt
  403e04:	4613      	movlt	r3, r2
  403e06:	9307      	str	r3, [sp, #28]
  403e08:	2300      	movs	r3, #0
  403e0a:	9310      	str	r3, [sp, #64]	; 0x40
  403e0c:	f1ba 0f00 	cmp.w	sl, #0
  403e10:	d002      	beq.n	403e18 <_vfprintf_r+0x270>
  403e12:	9b07      	ldr	r3, [sp, #28]
  403e14:	3301      	adds	r3, #1
  403e16:	9307      	str	r3, [sp, #28]
  403e18:	9b06      	ldr	r3, [sp, #24]
  403e1a:	f013 0302 	ands.w	r3, r3, #2
  403e1e:	930f      	str	r3, [sp, #60]	; 0x3c
  403e20:	d002      	beq.n	403e28 <_vfprintf_r+0x280>
  403e22:	9b07      	ldr	r3, [sp, #28]
  403e24:	3302      	adds	r3, #2
  403e26:	9307      	str	r3, [sp, #28]
  403e28:	9b06      	ldr	r3, [sp, #24]
  403e2a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  403e2e:	f040 831b 	bne.w	404468 <_vfprintf_r+0x8c0>
  403e32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403e34:	9a07      	ldr	r2, [sp, #28]
  403e36:	eba3 0b02 	sub.w	fp, r3, r2
  403e3a:	f1bb 0f00 	cmp.w	fp, #0
  403e3e:	f340 8313 	ble.w	404468 <_vfprintf_r+0x8c0>
  403e42:	f1bb 0f10 	cmp.w	fp, #16
  403e46:	9925      	ldr	r1, [sp, #148]	; 0x94
  403e48:	9a24      	ldr	r2, [sp, #144]	; 0x90
  403e4a:	dd28      	ble.n	403e9e <_vfprintf_r+0x2f6>
  403e4c:	4643      	mov	r3, r8
  403e4e:	2410      	movs	r4, #16
  403e50:	46a8      	mov	r8, r5
  403e52:	f8dd a020 	ldr.w	sl, [sp, #32]
  403e56:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  403e58:	e006      	b.n	403e68 <_vfprintf_r+0x2c0>
  403e5a:	f1ab 0b10 	sub.w	fp, fp, #16
  403e5e:	f1bb 0f10 	cmp.w	fp, #16
  403e62:	f103 0308 	add.w	r3, r3, #8
  403e66:	dd18      	ble.n	403e9a <_vfprintf_r+0x2f2>
  403e68:	3201      	adds	r2, #1
  403e6a:	48b9      	ldr	r0, [pc, #740]	; (404150 <_vfprintf_r+0x5a8>)
  403e6c:	9224      	str	r2, [sp, #144]	; 0x90
  403e6e:	3110      	adds	r1, #16
  403e70:	2a07      	cmp	r2, #7
  403e72:	9125      	str	r1, [sp, #148]	; 0x94
  403e74:	e883 0011 	stmia.w	r3, {r0, r4}
  403e78:	ddef      	ble.n	403e5a <_vfprintf_r+0x2b2>
  403e7a:	aa23      	add	r2, sp, #140	; 0x8c
  403e7c:	4629      	mov	r1, r5
  403e7e:	4650      	mov	r0, sl
  403e80:	f7fe fffe 	bl	402e80 <__sprint_r>
  403e84:	2800      	cmp	r0, #0
  403e86:	f040 836a 	bne.w	40455e <_vfprintf_r+0x9b6>
  403e8a:	f1ab 0b10 	sub.w	fp, fp, #16
  403e8e:	f1bb 0f10 	cmp.w	fp, #16
  403e92:	9925      	ldr	r1, [sp, #148]	; 0x94
  403e94:	9a24      	ldr	r2, [sp, #144]	; 0x90
  403e96:	ab30      	add	r3, sp, #192	; 0xc0
  403e98:	dce6      	bgt.n	403e68 <_vfprintf_r+0x2c0>
  403e9a:	4645      	mov	r5, r8
  403e9c:	4698      	mov	r8, r3
  403e9e:	3201      	adds	r2, #1
  403ea0:	4bab      	ldr	r3, [pc, #684]	; (404150 <_vfprintf_r+0x5a8>)
  403ea2:	9224      	str	r2, [sp, #144]	; 0x90
  403ea4:	eb0b 0401 	add.w	r4, fp, r1
  403ea8:	2a07      	cmp	r2, #7
  403eaa:	9425      	str	r4, [sp, #148]	; 0x94
  403eac:	e888 0808 	stmia.w	r8, {r3, fp}
  403eb0:	f300 84cd 	bgt.w	40484e <_vfprintf_r+0xca6>
  403eb4:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  403eb8:	f108 0808 	add.w	r8, r8, #8
  403ebc:	f1ba 0f00 	cmp.w	sl, #0
  403ec0:	d00e      	beq.n	403ee0 <_vfprintf_r+0x338>
  403ec2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403ec4:	3301      	adds	r3, #1
  403ec6:	3401      	adds	r4, #1
  403ec8:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  403ecc:	2201      	movs	r2, #1
  403ece:	2b07      	cmp	r3, #7
  403ed0:	9425      	str	r4, [sp, #148]	; 0x94
  403ed2:	9324      	str	r3, [sp, #144]	; 0x90
  403ed4:	e888 0006 	stmia.w	r8, {r1, r2}
  403ed8:	f300 840a 	bgt.w	4046f0 <_vfprintf_r+0xb48>
  403edc:	f108 0808 	add.w	r8, r8, #8
  403ee0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  403ee2:	b16b      	cbz	r3, 403f00 <_vfprintf_r+0x358>
  403ee4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403ee6:	3301      	adds	r3, #1
  403ee8:	3402      	adds	r4, #2
  403eea:	a91c      	add	r1, sp, #112	; 0x70
  403eec:	2202      	movs	r2, #2
  403eee:	2b07      	cmp	r3, #7
  403ef0:	9425      	str	r4, [sp, #148]	; 0x94
  403ef2:	9324      	str	r3, [sp, #144]	; 0x90
  403ef4:	e888 0006 	stmia.w	r8, {r1, r2}
  403ef8:	f300 8406 	bgt.w	404708 <_vfprintf_r+0xb60>
  403efc:	f108 0808 	add.w	r8, r8, #8
  403f00:	2d80      	cmp	r5, #128	; 0x80
  403f02:	f000 832e 	beq.w	404562 <_vfprintf_r+0x9ba>
  403f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403f08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403f0a:	eba3 0a02 	sub.w	sl, r3, r2
  403f0e:	f1ba 0f00 	cmp.w	sl, #0
  403f12:	dd3b      	ble.n	403f8c <_vfprintf_r+0x3e4>
  403f14:	f1ba 0f10 	cmp.w	sl, #16
  403f18:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403f1a:	4d8e      	ldr	r5, [pc, #568]	; (404154 <_vfprintf_r+0x5ac>)
  403f1c:	dd2b      	ble.n	403f76 <_vfprintf_r+0x3ce>
  403f1e:	4642      	mov	r2, r8
  403f20:	4621      	mov	r1, r4
  403f22:	46b0      	mov	r8, r6
  403f24:	f04f 0b10 	mov.w	fp, #16
  403f28:	462e      	mov	r6, r5
  403f2a:	9c08      	ldr	r4, [sp, #32]
  403f2c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  403f2e:	e006      	b.n	403f3e <_vfprintf_r+0x396>
  403f30:	f1aa 0a10 	sub.w	sl, sl, #16
  403f34:	f1ba 0f10 	cmp.w	sl, #16
  403f38:	f102 0208 	add.w	r2, r2, #8
  403f3c:	dd17      	ble.n	403f6e <_vfprintf_r+0x3c6>
  403f3e:	3301      	adds	r3, #1
  403f40:	3110      	adds	r1, #16
  403f42:	2b07      	cmp	r3, #7
  403f44:	9125      	str	r1, [sp, #148]	; 0x94
  403f46:	9324      	str	r3, [sp, #144]	; 0x90
  403f48:	e882 0840 	stmia.w	r2, {r6, fp}
  403f4c:	ddf0      	ble.n	403f30 <_vfprintf_r+0x388>
  403f4e:	aa23      	add	r2, sp, #140	; 0x8c
  403f50:	4629      	mov	r1, r5
  403f52:	4620      	mov	r0, r4
  403f54:	f7fe ff94 	bl	402e80 <__sprint_r>
  403f58:	2800      	cmp	r0, #0
  403f5a:	f040 8300 	bne.w	40455e <_vfprintf_r+0x9b6>
  403f5e:	f1aa 0a10 	sub.w	sl, sl, #16
  403f62:	f1ba 0f10 	cmp.w	sl, #16
  403f66:	9925      	ldr	r1, [sp, #148]	; 0x94
  403f68:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403f6a:	aa30      	add	r2, sp, #192	; 0xc0
  403f6c:	dce7      	bgt.n	403f3e <_vfprintf_r+0x396>
  403f6e:	4635      	mov	r5, r6
  403f70:	460c      	mov	r4, r1
  403f72:	4646      	mov	r6, r8
  403f74:	4690      	mov	r8, r2
  403f76:	3301      	adds	r3, #1
  403f78:	4454      	add	r4, sl
  403f7a:	2b07      	cmp	r3, #7
  403f7c:	9425      	str	r4, [sp, #148]	; 0x94
  403f7e:	9324      	str	r3, [sp, #144]	; 0x90
  403f80:	e888 0420 	stmia.w	r8, {r5, sl}
  403f84:	f300 83a9 	bgt.w	4046da <_vfprintf_r+0xb32>
  403f88:	f108 0808 	add.w	r8, r8, #8
  403f8c:	9b06      	ldr	r3, [sp, #24]
  403f8e:	05db      	lsls	r3, r3, #23
  403f90:	f100 8285 	bmi.w	40449e <_vfprintf_r+0x8f6>
  403f94:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403f96:	990d      	ldr	r1, [sp, #52]	; 0x34
  403f98:	f8c8 7000 	str.w	r7, [r8]
  403f9c:	3301      	adds	r3, #1
  403f9e:	440c      	add	r4, r1
  403fa0:	2b07      	cmp	r3, #7
  403fa2:	9425      	str	r4, [sp, #148]	; 0x94
  403fa4:	f8c8 1004 	str.w	r1, [r8, #4]
  403fa8:	9324      	str	r3, [sp, #144]	; 0x90
  403faa:	f300 8375 	bgt.w	404698 <_vfprintf_r+0xaf0>
  403fae:	f108 0808 	add.w	r8, r8, #8
  403fb2:	9b06      	ldr	r3, [sp, #24]
  403fb4:	0759      	lsls	r1, r3, #29
  403fb6:	d53b      	bpl.n	404030 <_vfprintf_r+0x488>
  403fb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403fba:	9a07      	ldr	r2, [sp, #28]
  403fbc:	1a9d      	subs	r5, r3, r2
  403fbe:	2d00      	cmp	r5, #0
  403fc0:	dd36      	ble.n	404030 <_vfprintf_r+0x488>
  403fc2:	2d10      	cmp	r5, #16
  403fc4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403fc6:	dd21      	ble.n	40400c <_vfprintf_r+0x464>
  403fc8:	2610      	movs	r6, #16
  403fca:	9f08      	ldr	r7, [sp, #32]
  403fcc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  403fd0:	e004      	b.n	403fdc <_vfprintf_r+0x434>
  403fd2:	3d10      	subs	r5, #16
  403fd4:	2d10      	cmp	r5, #16
  403fd6:	f108 0808 	add.w	r8, r8, #8
  403fda:	dd17      	ble.n	40400c <_vfprintf_r+0x464>
  403fdc:	3301      	adds	r3, #1
  403fde:	4a5c      	ldr	r2, [pc, #368]	; (404150 <_vfprintf_r+0x5a8>)
  403fe0:	9324      	str	r3, [sp, #144]	; 0x90
  403fe2:	3410      	adds	r4, #16
  403fe4:	2b07      	cmp	r3, #7
  403fe6:	9425      	str	r4, [sp, #148]	; 0x94
  403fe8:	e888 0044 	stmia.w	r8, {r2, r6}
  403fec:	ddf1      	ble.n	403fd2 <_vfprintf_r+0x42a>
  403fee:	aa23      	add	r2, sp, #140	; 0x8c
  403ff0:	4651      	mov	r1, sl
  403ff2:	4638      	mov	r0, r7
  403ff4:	f7fe ff44 	bl	402e80 <__sprint_r>
  403ff8:	2800      	cmp	r0, #0
  403ffa:	f040 823f 	bne.w	40447c <_vfprintf_r+0x8d4>
  403ffe:	3d10      	subs	r5, #16
  404000:	2d10      	cmp	r5, #16
  404002:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404004:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404006:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40400a:	dce7      	bgt.n	403fdc <_vfprintf_r+0x434>
  40400c:	3301      	adds	r3, #1
  40400e:	4a50      	ldr	r2, [pc, #320]	; (404150 <_vfprintf_r+0x5a8>)
  404010:	9324      	str	r3, [sp, #144]	; 0x90
  404012:	442c      	add	r4, r5
  404014:	2b07      	cmp	r3, #7
  404016:	9425      	str	r4, [sp, #148]	; 0x94
  404018:	e888 0024 	stmia.w	r8, {r2, r5}
  40401c:	dd08      	ble.n	404030 <_vfprintf_r+0x488>
  40401e:	aa23      	add	r2, sp, #140	; 0x8c
  404020:	990a      	ldr	r1, [sp, #40]	; 0x28
  404022:	9808      	ldr	r0, [sp, #32]
  404024:	f7fe ff2c 	bl	402e80 <__sprint_r>
  404028:	2800      	cmp	r0, #0
  40402a:	f040 8347 	bne.w	4046bc <_vfprintf_r+0xb14>
  40402e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404032:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404034:	9907      	ldr	r1, [sp, #28]
  404036:	428a      	cmp	r2, r1
  404038:	bfac      	ite	ge
  40403a:	189b      	addge	r3, r3, r2
  40403c:	185b      	addlt	r3, r3, r1
  40403e:	930b      	str	r3, [sp, #44]	; 0x2c
  404040:	2c00      	cmp	r4, #0
  404042:	f040 8333 	bne.w	4046ac <_vfprintf_r+0xb04>
  404046:	2300      	movs	r3, #0
  404048:	9324      	str	r3, [sp, #144]	; 0x90
  40404a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40404e:	e5f7      	b.n	403c40 <_vfprintf_r+0x98>
  404050:	4651      	mov	r1, sl
  404052:	9808      	ldr	r0, [sp, #32]
  404054:	f001 f896 	bl	405184 <__swsetup_r>
  404058:	2800      	cmp	r0, #0
  40405a:	d038      	beq.n	4040ce <_vfprintf_r+0x526>
  40405c:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  404060:	07dd      	lsls	r5, r3, #31
  404062:	d404      	bmi.n	40406e <_vfprintf_r+0x4c6>
  404064:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  404068:	059c      	lsls	r4, r3, #22
  40406a:	f140 85ca 	bpl.w	404c02 <_vfprintf_r+0x105a>
  40406e:	f04f 33ff 	mov.w	r3, #4294967295
  404072:	930b      	str	r3, [sp, #44]	; 0x2c
  404074:	980b      	ldr	r0, [sp, #44]	; 0x2c
  404076:	b041      	add	sp, #260	; 0x104
  404078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40407c:	aa23      	add	r2, sp, #140	; 0x8c
  40407e:	990a      	ldr	r1, [sp, #40]	; 0x28
  404080:	9808      	ldr	r0, [sp, #32]
  404082:	f7fe fefd 	bl	402e80 <__sprint_r>
  404086:	2800      	cmp	r0, #0
  404088:	f040 8318 	bne.w	4046bc <_vfprintf_r+0xb14>
  40408c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404090:	e5f5      	b.n	403c7e <_vfprintf_r+0xd6>
  404092:	9808      	ldr	r0, [sp, #32]
  404094:	f002 f9aa 	bl	4063ec <__sinit>
  404098:	e59c      	b.n	403bd4 <_vfprintf_r+0x2c>
  40409a:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
  40409e:	2a00      	cmp	r2, #0
  4040a0:	f6ff adbd 	blt.w	403c1e <_vfprintf_r+0x76>
  4040a4:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
  4040a8:	07d0      	lsls	r0, r2, #31
  4040aa:	d405      	bmi.n	4040b8 <_vfprintf_r+0x510>
  4040ac:	0599      	lsls	r1, r3, #22
  4040ae:	d403      	bmi.n	4040b8 <_vfprintf_r+0x510>
  4040b0:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  4040b4:	f002 fd6a 	bl	406b8c <__retarget_lock_release_recursive>
  4040b8:	462b      	mov	r3, r5
  4040ba:	464a      	mov	r2, r9
  4040bc:	4651      	mov	r1, sl
  4040be:	9808      	ldr	r0, [sp, #32]
  4040c0:	f001 f81e 	bl	405100 <__sbprintf>
  4040c4:	900b      	str	r0, [sp, #44]	; 0x2c
  4040c6:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4040c8:	b041      	add	sp, #260	; 0x104
  4040ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4040ce:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  4040d2:	e59f      	b.n	403c14 <_vfprintf_r+0x6c>
  4040d4:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  4040d8:	f002 fd56 	bl	406b88 <__retarget_lock_acquire_recursive>
  4040dc:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  4040e0:	b293      	uxth	r3, r2
  4040e2:	e582      	b.n	403bea <_vfprintf_r+0x42>
  4040e4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4040e6:	930e      	str	r3, [sp, #56]	; 0x38
  4040e8:	4240      	negs	r0, r0
  4040ea:	900c      	str	r0, [sp, #48]	; 0x30
  4040ec:	f04b 0b04 	orr.w	fp, fp, #4
  4040f0:	f899 6000 	ldrb.w	r6, [r9]
  4040f4:	e5d7      	b.n	403ca6 <_vfprintf_r+0xfe>
  4040f6:	2a00      	cmp	r2, #0
  4040f8:	f040 87df 	bne.w	4050ba <_vfprintf_r+0x1512>
  4040fc:	4b16      	ldr	r3, [pc, #88]	; (404158 <_vfprintf_r+0x5b0>)
  4040fe:	9318      	str	r3, [sp, #96]	; 0x60
  404100:	f01b 0f20 	tst.w	fp, #32
  404104:	f040 84b9 	bne.w	404a7a <_vfprintf_r+0xed2>
  404108:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40410a:	f01b 0f10 	tst.w	fp, #16
  40410e:	4613      	mov	r3, r2
  404110:	f040 83dc 	bne.w	4048cc <_vfprintf_r+0xd24>
  404114:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404118:	f000 83d8 	beq.w	4048cc <_vfprintf_r+0xd24>
  40411c:	3304      	adds	r3, #4
  40411e:	8814      	ldrh	r4, [r2, #0]
  404120:	930e      	str	r3, [sp, #56]	; 0x38
  404122:	2500      	movs	r5, #0
  404124:	f01b 0f01 	tst.w	fp, #1
  404128:	f000 8322 	beq.w	404770 <_vfprintf_r+0xbc8>
  40412c:	ea54 0305 	orrs.w	r3, r4, r5
  404130:	f000 831e 	beq.w	404770 <_vfprintf_r+0xbc8>
  404134:	2330      	movs	r3, #48	; 0x30
  404136:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  40413a:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  40413e:	f04b 0b02 	orr.w	fp, fp, #2
  404142:	2302      	movs	r3, #2
  404144:	e63c      	b.n	403dc0 <_vfprintf_r+0x218>
  404146:	f04b 0b20 	orr.w	fp, fp, #32
  40414a:	f899 6000 	ldrb.w	r6, [r9]
  40414e:	e5aa      	b.n	403ca6 <_vfprintf_r+0xfe>
  404150:	00409b6c 	.word	0x00409b6c
  404154:	00409b7c 	.word	0x00409b7c
  404158:	00409b20 	.word	0x00409b20
  40415c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40415e:	6817      	ldr	r7, [r2, #0]
  404160:	2400      	movs	r4, #0
  404162:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  404166:	1d15      	adds	r5, r2, #4
  404168:	2f00      	cmp	r7, #0
  40416a:	f000 864e 	beq.w	404e0a <_vfprintf_r+0x1262>
  40416e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404170:	1c53      	adds	r3, r2, #1
  404172:	f000 85cc 	beq.w	404d0e <_vfprintf_r+0x1166>
  404176:	4621      	mov	r1, r4
  404178:	4638      	mov	r0, r7
  40417a:	f002 fd99 	bl	406cb0 <memchr>
  40417e:	2800      	cmp	r0, #0
  404180:	f000 8697 	beq.w	404eb2 <_vfprintf_r+0x130a>
  404184:	1bc3      	subs	r3, r0, r7
  404186:	930d      	str	r3, [sp, #52]	; 0x34
  404188:	9409      	str	r4, [sp, #36]	; 0x24
  40418a:	950e      	str	r5, [sp, #56]	; 0x38
  40418c:	f8cd b018 	str.w	fp, [sp, #24]
  404190:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404194:	9307      	str	r3, [sp, #28]
  404196:	9410      	str	r4, [sp, #64]	; 0x40
  404198:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  40419c:	e636      	b.n	403e0c <_vfprintf_r+0x264>
  40419e:	2a00      	cmp	r2, #0
  4041a0:	f040 8796 	bne.w	4050d0 <_vfprintf_r+0x1528>
  4041a4:	f01b 0f20 	tst.w	fp, #32
  4041a8:	f040 845a 	bne.w	404a60 <_vfprintf_r+0xeb8>
  4041ac:	f01b 0f10 	tst.w	fp, #16
  4041b0:	f040 83a2 	bne.w	4048f8 <_vfprintf_r+0xd50>
  4041b4:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4041b8:	f000 839e 	beq.w	4048f8 <_vfprintf_r+0xd50>
  4041bc:	990e      	ldr	r1, [sp, #56]	; 0x38
  4041be:	f9b1 4000 	ldrsh.w	r4, [r1]
  4041c2:	3104      	adds	r1, #4
  4041c4:	17e5      	asrs	r5, r4, #31
  4041c6:	4622      	mov	r2, r4
  4041c8:	462b      	mov	r3, r5
  4041ca:	910e      	str	r1, [sp, #56]	; 0x38
  4041cc:	2a00      	cmp	r2, #0
  4041ce:	f173 0300 	sbcs.w	r3, r3, #0
  4041d2:	f2c0 8487 	blt.w	404ae4 <_vfprintf_r+0xf3c>
  4041d6:	9909      	ldr	r1, [sp, #36]	; 0x24
  4041d8:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  4041dc:	1c4a      	adds	r2, r1, #1
  4041de:	f04f 0301 	mov.w	r3, #1
  4041e2:	f47f adf5 	bne.w	403dd0 <_vfprintf_r+0x228>
  4041e6:	ea54 0205 	orrs.w	r2, r4, r5
  4041ea:	f000 826c 	beq.w	4046c6 <_vfprintf_r+0xb1e>
  4041ee:	f8cd b018 	str.w	fp, [sp, #24]
  4041f2:	2b01      	cmp	r3, #1
  4041f4:	f000 8308 	beq.w	404808 <_vfprintf_r+0xc60>
  4041f8:	2b02      	cmp	r3, #2
  4041fa:	f040 8295 	bne.w	404728 <_vfprintf_r+0xb80>
  4041fe:	9818      	ldr	r0, [sp, #96]	; 0x60
  404200:	af30      	add	r7, sp, #192	; 0xc0
  404202:	0923      	lsrs	r3, r4, #4
  404204:	f004 010f 	and.w	r1, r4, #15
  404208:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  40420c:	092a      	lsrs	r2, r5, #4
  40420e:	461c      	mov	r4, r3
  404210:	4615      	mov	r5, r2
  404212:	5c43      	ldrb	r3, [r0, r1]
  404214:	f807 3d01 	strb.w	r3, [r7, #-1]!
  404218:	ea54 0305 	orrs.w	r3, r4, r5
  40421c:	d1f1      	bne.n	404202 <_vfprintf_r+0x65a>
  40421e:	ab30      	add	r3, sp, #192	; 0xc0
  404220:	1bdb      	subs	r3, r3, r7
  404222:	930d      	str	r3, [sp, #52]	; 0x34
  404224:	e5ea      	b.n	403dfc <_vfprintf_r+0x254>
  404226:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  40422a:	f899 6000 	ldrb.w	r6, [r9]
  40422e:	e53a      	b.n	403ca6 <_vfprintf_r+0xfe>
  404230:	f899 6000 	ldrb.w	r6, [r9]
  404234:	2e6c      	cmp	r6, #108	; 0x6c
  404236:	bf03      	ittte	eq
  404238:	f899 6001 	ldrbeq.w	r6, [r9, #1]
  40423c:	f04b 0b20 	orreq.w	fp, fp, #32
  404240:	f109 0901 	addeq.w	r9, r9, #1
  404244:	f04b 0b10 	orrne.w	fp, fp, #16
  404248:	e52d      	b.n	403ca6 <_vfprintf_r+0xfe>
  40424a:	2a00      	cmp	r2, #0
  40424c:	f040 874c 	bne.w	4050e8 <_vfprintf_r+0x1540>
  404250:	f01b 0f20 	tst.w	fp, #32
  404254:	f040 853f 	bne.w	404cd6 <_vfprintf_r+0x112e>
  404258:	f01b 0f10 	tst.w	fp, #16
  40425c:	f040 80fc 	bne.w	404458 <_vfprintf_r+0x8b0>
  404260:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404264:	f000 80f8 	beq.w	404458 <_vfprintf_r+0x8b0>
  404268:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40426a:	6813      	ldr	r3, [r2, #0]
  40426c:	3204      	adds	r2, #4
  40426e:	920e      	str	r2, [sp, #56]	; 0x38
  404270:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  404274:	801a      	strh	r2, [r3, #0]
  404276:	e4e3      	b.n	403c40 <_vfprintf_r+0x98>
  404278:	f899 6000 	ldrb.w	r6, [r9]
  40427c:	2900      	cmp	r1, #0
  40427e:	f47f ad12 	bne.w	403ca6 <_vfprintf_r+0xfe>
  404282:	2201      	movs	r2, #1
  404284:	2120      	movs	r1, #32
  404286:	e50e      	b.n	403ca6 <_vfprintf_r+0xfe>
  404288:	f899 6000 	ldrb.w	r6, [r9]
  40428c:	2e2a      	cmp	r6, #42	; 0x2a
  40428e:	f109 0001 	add.w	r0, r9, #1
  404292:	f000 86f1 	beq.w	405078 <_vfprintf_r+0x14d0>
  404296:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  40429a:	2b09      	cmp	r3, #9
  40429c:	4681      	mov	r9, r0
  40429e:	bf98      	it	ls
  4042a0:	2000      	movls	r0, #0
  4042a2:	f200 863d 	bhi.w	404f20 <_vfprintf_r+0x1378>
  4042a6:	f819 6b01 	ldrb.w	r6, [r9], #1
  4042aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4042ae:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  4042b2:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  4042b6:	2b09      	cmp	r3, #9
  4042b8:	d9f5      	bls.n	4042a6 <_vfprintf_r+0x6fe>
  4042ba:	9009      	str	r0, [sp, #36]	; 0x24
  4042bc:	e4f5      	b.n	403caa <_vfprintf_r+0x102>
  4042be:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  4042c2:	f899 6000 	ldrb.w	r6, [r9]
  4042c6:	e4ee      	b.n	403ca6 <_vfprintf_r+0xfe>
  4042c8:	f899 6000 	ldrb.w	r6, [r9]
  4042cc:	2201      	movs	r2, #1
  4042ce:	212b      	movs	r1, #43	; 0x2b
  4042d0:	e4e9      	b.n	403ca6 <_vfprintf_r+0xfe>
  4042d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4042d4:	4bae      	ldr	r3, [pc, #696]	; (404590 <_vfprintf_r+0x9e8>)
  4042d6:	6814      	ldr	r4, [r2, #0]
  4042d8:	9318      	str	r3, [sp, #96]	; 0x60
  4042da:	2678      	movs	r6, #120	; 0x78
  4042dc:	2330      	movs	r3, #48	; 0x30
  4042de:	3204      	adds	r2, #4
  4042e0:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  4042e4:	f04b 0b02 	orr.w	fp, fp, #2
  4042e8:	920e      	str	r2, [sp, #56]	; 0x38
  4042ea:	2500      	movs	r5, #0
  4042ec:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  4042f0:	2302      	movs	r3, #2
  4042f2:	e565      	b.n	403dc0 <_vfprintf_r+0x218>
  4042f4:	2a00      	cmp	r2, #0
  4042f6:	f040 86e4 	bne.w	4050c2 <_vfprintf_r+0x151a>
  4042fa:	4ba6      	ldr	r3, [pc, #664]	; (404594 <_vfprintf_r+0x9ec>)
  4042fc:	9318      	str	r3, [sp, #96]	; 0x60
  4042fe:	e6ff      	b.n	404100 <_vfprintf_r+0x558>
  404300:	990e      	ldr	r1, [sp, #56]	; 0x38
  404302:	f8cd b018 	str.w	fp, [sp, #24]
  404306:	680a      	ldr	r2, [r1, #0]
  404308:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  40430c:	2300      	movs	r3, #0
  40430e:	460a      	mov	r2, r1
  404310:	469a      	mov	sl, r3
  404312:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404316:	3204      	adds	r2, #4
  404318:	2301      	movs	r3, #1
  40431a:	9307      	str	r3, [sp, #28]
  40431c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  404320:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  404324:	920e      	str	r2, [sp, #56]	; 0x38
  404326:	930d      	str	r3, [sp, #52]	; 0x34
  404328:	af26      	add	r7, sp, #152	; 0x98
  40432a:	e575      	b.n	403e18 <_vfprintf_r+0x270>
  40432c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  404330:	2000      	movs	r0, #0
  404332:	f819 6b01 	ldrb.w	r6, [r9], #1
  404336:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40433a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  40433e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  404342:	2b09      	cmp	r3, #9
  404344:	d9f5      	bls.n	404332 <_vfprintf_r+0x78a>
  404346:	900c      	str	r0, [sp, #48]	; 0x30
  404348:	e4af      	b.n	403caa <_vfprintf_r+0x102>
  40434a:	2a00      	cmp	r2, #0
  40434c:	f040 86c8 	bne.w	4050e0 <_vfprintf_r+0x1538>
  404350:	f04b 0b10 	orr.w	fp, fp, #16
  404354:	e726      	b.n	4041a4 <_vfprintf_r+0x5fc>
  404356:	f04b 0b01 	orr.w	fp, fp, #1
  40435a:	f899 6000 	ldrb.w	r6, [r9]
  40435e:	e4a2      	b.n	403ca6 <_vfprintf_r+0xfe>
  404360:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  404362:	6823      	ldr	r3, [r4, #0]
  404364:	930c      	str	r3, [sp, #48]	; 0x30
  404366:	4618      	mov	r0, r3
  404368:	2800      	cmp	r0, #0
  40436a:	4623      	mov	r3, r4
  40436c:	f103 0304 	add.w	r3, r3, #4
  404370:	f6ff aeb8 	blt.w	4040e4 <_vfprintf_r+0x53c>
  404374:	930e      	str	r3, [sp, #56]	; 0x38
  404376:	f899 6000 	ldrb.w	r6, [r9]
  40437a:	e494      	b.n	403ca6 <_vfprintf_r+0xfe>
  40437c:	2a00      	cmp	r2, #0
  40437e:	f040 86b7 	bne.w	4050f0 <_vfprintf_r+0x1548>
  404382:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  404384:	3507      	adds	r5, #7
  404386:	f025 0307 	bic.w	r3, r5, #7
  40438a:	f103 0208 	add.w	r2, r3, #8
  40438e:	920e      	str	r2, [sp, #56]	; 0x38
  404390:	681a      	ldr	r2, [r3, #0]
  404392:	9213      	str	r2, [sp, #76]	; 0x4c
  404394:	685b      	ldr	r3, [r3, #4]
  404396:	9312      	str	r3, [sp, #72]	; 0x48
  404398:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40439a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  40439c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  4043a0:	4628      	mov	r0, r5
  4043a2:	4621      	mov	r1, r4
  4043a4:	f04f 32ff 	mov.w	r2, #4294967295
  4043a8:	4b7b      	ldr	r3, [pc, #492]	; (404598 <_vfprintf_r+0x9f0>)
  4043aa:	f004 f927 	bl	4085fc <__aeabi_dcmpun>
  4043ae:	2800      	cmp	r0, #0
  4043b0:	f040 83a2 	bne.w	404af8 <_vfprintf_r+0xf50>
  4043b4:	4628      	mov	r0, r5
  4043b6:	4621      	mov	r1, r4
  4043b8:	f04f 32ff 	mov.w	r2, #4294967295
  4043bc:	4b76      	ldr	r3, [pc, #472]	; (404598 <_vfprintf_r+0x9f0>)
  4043be:	f004 f8ff 	bl	4085c0 <__aeabi_dcmple>
  4043c2:	2800      	cmp	r0, #0
  4043c4:	f040 8398 	bne.w	404af8 <_vfprintf_r+0xf50>
  4043c8:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4043ca:	9813      	ldr	r0, [sp, #76]	; 0x4c
  4043cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4043ce:	9912      	ldr	r1, [sp, #72]	; 0x48
  4043d0:	f004 f8ec 	bl	4085ac <__aeabi_dcmplt>
  4043d4:	2800      	cmp	r0, #0
  4043d6:	f040 8435 	bne.w	404c44 <_vfprintf_r+0x109c>
  4043da:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  4043de:	4f6f      	ldr	r7, [pc, #444]	; (40459c <_vfprintf_r+0x9f4>)
  4043e0:	4b6f      	ldr	r3, [pc, #444]	; (4045a0 <_vfprintf_r+0x9f8>)
  4043e2:	2203      	movs	r2, #3
  4043e4:	2100      	movs	r1, #0
  4043e6:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  4043ea:	9207      	str	r2, [sp, #28]
  4043ec:	9109      	str	r1, [sp, #36]	; 0x24
  4043ee:	9006      	str	r0, [sp, #24]
  4043f0:	2e47      	cmp	r6, #71	; 0x47
  4043f2:	bfd8      	it	le
  4043f4:	461f      	movle	r7, r3
  4043f6:	920d      	str	r2, [sp, #52]	; 0x34
  4043f8:	9110      	str	r1, [sp, #64]	; 0x40
  4043fa:	e507      	b.n	403e0c <_vfprintf_r+0x264>
  4043fc:	f04b 0b08 	orr.w	fp, fp, #8
  404400:	f899 6000 	ldrb.w	r6, [r9]
  404404:	e44f      	b.n	403ca6 <_vfprintf_r+0xfe>
  404406:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  404408:	3507      	adds	r5, #7
  40440a:	f025 0307 	bic.w	r3, r5, #7
  40440e:	f103 0208 	add.w	r2, r3, #8
  404412:	e9d3 4500 	ldrd	r4, r5, [r3]
  404416:	920e      	str	r2, [sp, #56]	; 0x38
  404418:	2300      	movs	r3, #0
  40441a:	e4d1      	b.n	403dc0 <_vfprintf_r+0x218>
  40441c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40441e:	3507      	adds	r5, #7
  404420:	f025 0307 	bic.w	r3, r5, #7
  404424:	f103 0208 	add.w	r2, r3, #8
  404428:	e9d3 4500 	ldrd	r4, r5, [r3]
  40442c:	920e      	str	r2, [sp, #56]	; 0x38
  40442e:	2301      	movs	r3, #1
  404430:	e4c6      	b.n	403dc0 <_vfprintf_r+0x218>
  404432:	2a00      	cmp	r2, #0
  404434:	f040 8650 	bne.w	4050d8 <_vfprintf_r+0x1530>
  404438:	b1c6      	cbz	r6, 40446c <_vfprintf_r+0x8c4>
  40443a:	2300      	movs	r3, #0
  40443c:	2201      	movs	r2, #1
  40443e:	469a      	mov	sl, r3
  404440:	9207      	str	r2, [sp, #28]
  404442:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  404446:	f8cd b018 	str.w	fp, [sp, #24]
  40444a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40444e:	9309      	str	r3, [sp, #36]	; 0x24
  404450:	9310      	str	r3, [sp, #64]	; 0x40
  404452:	920d      	str	r2, [sp, #52]	; 0x34
  404454:	af26      	add	r7, sp, #152	; 0x98
  404456:	e4df      	b.n	403e18 <_vfprintf_r+0x270>
  404458:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40445a:	6813      	ldr	r3, [r2, #0]
  40445c:	3204      	adds	r2, #4
  40445e:	920e      	str	r2, [sp, #56]	; 0x38
  404460:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404462:	601a      	str	r2, [r3, #0]
  404464:	f7ff bbec 	b.w	403c40 <_vfprintf_r+0x98>
  404468:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40446a:	e527      	b.n	403ebc <_vfprintf_r+0x314>
  40446c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40446e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  404472:	2b00      	cmp	r3, #0
  404474:	f040 8594 	bne.w	404fa0 <_vfprintf_r+0x13f8>
  404478:	2300      	movs	r3, #0
  40447a:	9324      	str	r3, [sp, #144]	; 0x90
  40447c:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  404480:	f013 0f01 	tst.w	r3, #1
  404484:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  404488:	d102      	bne.n	404490 <_vfprintf_r+0x8e8>
  40448a:	059a      	lsls	r2, r3, #22
  40448c:	f140 8249 	bpl.w	404922 <_vfprintf_r+0xd7a>
  404490:	065b      	lsls	r3, r3, #25
  404492:	f53f adec 	bmi.w	40406e <_vfprintf_r+0x4c6>
  404496:	980b      	ldr	r0, [sp, #44]	; 0x2c
  404498:	b041      	add	sp, #260	; 0x104
  40449a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40449e:	2e65      	cmp	r6, #101	; 0x65
  4044a0:	f340 80b2 	ble.w	404608 <_vfprintf_r+0xa60>
  4044a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4044a6:	9813      	ldr	r0, [sp, #76]	; 0x4c
  4044a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4044aa:	9912      	ldr	r1, [sp, #72]	; 0x48
  4044ac:	f004 f874 	bl	408598 <__aeabi_dcmpeq>
  4044b0:	2800      	cmp	r0, #0
  4044b2:	f000 8160 	beq.w	404776 <_vfprintf_r+0xbce>
  4044b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4044b8:	4a3a      	ldr	r2, [pc, #232]	; (4045a4 <_vfprintf_r+0x9fc>)
  4044ba:	f8c8 2000 	str.w	r2, [r8]
  4044be:	3301      	adds	r3, #1
  4044c0:	3401      	adds	r4, #1
  4044c2:	2201      	movs	r2, #1
  4044c4:	2b07      	cmp	r3, #7
  4044c6:	9425      	str	r4, [sp, #148]	; 0x94
  4044c8:	9324      	str	r3, [sp, #144]	; 0x90
  4044ca:	f8c8 2004 	str.w	r2, [r8, #4]
  4044ce:	f300 83bf 	bgt.w	404c50 <_vfprintf_r+0x10a8>
  4044d2:	f108 0808 	add.w	r8, r8, #8
  4044d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4044d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4044da:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4044dc:	4293      	cmp	r3, r2
  4044de:	db03      	blt.n	4044e8 <_vfprintf_r+0x940>
  4044e0:	9b06      	ldr	r3, [sp, #24]
  4044e2:	07df      	lsls	r7, r3, #31
  4044e4:	f57f ad65 	bpl.w	403fb2 <_vfprintf_r+0x40a>
  4044e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4044ea:	9914      	ldr	r1, [sp, #80]	; 0x50
  4044ec:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4044ee:	f8c8 2000 	str.w	r2, [r8]
  4044f2:	3301      	adds	r3, #1
  4044f4:	440c      	add	r4, r1
  4044f6:	2b07      	cmp	r3, #7
  4044f8:	f8c8 1004 	str.w	r1, [r8, #4]
  4044fc:	9425      	str	r4, [sp, #148]	; 0x94
  4044fe:	9324      	str	r3, [sp, #144]	; 0x90
  404500:	f300 83f8 	bgt.w	404cf4 <_vfprintf_r+0x114c>
  404504:	f108 0808 	add.w	r8, r8, #8
  404508:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40450a:	1e5e      	subs	r6, r3, #1
  40450c:	2e00      	cmp	r6, #0
  40450e:	f77f ad50 	ble.w	403fb2 <_vfprintf_r+0x40a>
  404512:	2e10      	cmp	r6, #16
  404514:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404516:	4d24      	ldr	r5, [pc, #144]	; (4045a8 <_vfprintf_r+0xa00>)
  404518:	f340 81dd 	ble.w	4048d6 <_vfprintf_r+0xd2e>
  40451c:	2710      	movs	r7, #16
  40451e:	f8dd a020 	ldr.w	sl, [sp, #32]
  404522:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  404526:	e005      	b.n	404534 <_vfprintf_r+0x98c>
  404528:	f108 0808 	add.w	r8, r8, #8
  40452c:	3e10      	subs	r6, #16
  40452e:	2e10      	cmp	r6, #16
  404530:	f340 81d1 	ble.w	4048d6 <_vfprintf_r+0xd2e>
  404534:	3301      	adds	r3, #1
  404536:	3410      	adds	r4, #16
  404538:	2b07      	cmp	r3, #7
  40453a:	9425      	str	r4, [sp, #148]	; 0x94
  40453c:	9324      	str	r3, [sp, #144]	; 0x90
  40453e:	e888 00a0 	stmia.w	r8, {r5, r7}
  404542:	ddf1      	ble.n	404528 <_vfprintf_r+0x980>
  404544:	aa23      	add	r2, sp, #140	; 0x8c
  404546:	4659      	mov	r1, fp
  404548:	4650      	mov	r0, sl
  40454a:	f7fe fc99 	bl	402e80 <__sprint_r>
  40454e:	2800      	cmp	r0, #0
  404550:	f040 83cd 	bne.w	404cee <_vfprintf_r+0x1146>
  404554:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404556:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404558:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40455c:	e7e6      	b.n	40452c <_vfprintf_r+0x984>
  40455e:	46aa      	mov	sl, r5
  404560:	e78c      	b.n	40447c <_vfprintf_r+0x8d4>
  404562:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404564:	9a07      	ldr	r2, [sp, #28]
  404566:	eba3 0a02 	sub.w	sl, r3, r2
  40456a:	f1ba 0f00 	cmp.w	sl, #0
  40456e:	f77f acca 	ble.w	403f06 <_vfprintf_r+0x35e>
  404572:	f1ba 0f10 	cmp.w	sl, #16
  404576:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404578:	4d0b      	ldr	r5, [pc, #44]	; (4045a8 <_vfprintf_r+0xa00>)
  40457a:	dd39      	ble.n	4045f0 <_vfprintf_r+0xa48>
  40457c:	4642      	mov	r2, r8
  40457e:	4621      	mov	r1, r4
  404580:	46b0      	mov	r8, r6
  404582:	f04f 0b10 	mov.w	fp, #16
  404586:	462e      	mov	r6, r5
  404588:	9c08      	ldr	r4, [sp, #32]
  40458a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40458c:	e015      	b.n	4045ba <_vfprintf_r+0xa12>
  40458e:	bf00      	nop
  404590:	00409b20 	.word	0x00409b20
  404594:	00409b0c 	.word	0x00409b0c
  404598:	7fefffff 	.word	0x7fefffff
  40459c:	00409b60 	.word	0x00409b60
  4045a0:	00409b5c 	.word	0x00409b5c
  4045a4:	00408ec8 	.word	0x00408ec8
  4045a8:	00409b7c 	.word	0x00409b7c
  4045ac:	f1aa 0a10 	sub.w	sl, sl, #16
  4045b0:	f1ba 0f10 	cmp.w	sl, #16
  4045b4:	f102 0208 	add.w	r2, r2, #8
  4045b8:	dd16      	ble.n	4045e8 <_vfprintf_r+0xa40>
  4045ba:	3301      	adds	r3, #1
  4045bc:	3110      	adds	r1, #16
  4045be:	2b07      	cmp	r3, #7
  4045c0:	9125      	str	r1, [sp, #148]	; 0x94
  4045c2:	9324      	str	r3, [sp, #144]	; 0x90
  4045c4:	e882 0840 	stmia.w	r2, {r6, fp}
  4045c8:	ddf0      	ble.n	4045ac <_vfprintf_r+0xa04>
  4045ca:	aa23      	add	r2, sp, #140	; 0x8c
  4045cc:	4629      	mov	r1, r5
  4045ce:	4620      	mov	r0, r4
  4045d0:	f7fe fc56 	bl	402e80 <__sprint_r>
  4045d4:	2800      	cmp	r0, #0
  4045d6:	d1c2      	bne.n	40455e <_vfprintf_r+0x9b6>
  4045d8:	f1aa 0a10 	sub.w	sl, sl, #16
  4045dc:	f1ba 0f10 	cmp.w	sl, #16
  4045e0:	9925      	ldr	r1, [sp, #148]	; 0x94
  4045e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4045e4:	aa30      	add	r2, sp, #192	; 0xc0
  4045e6:	dce8      	bgt.n	4045ba <_vfprintf_r+0xa12>
  4045e8:	4635      	mov	r5, r6
  4045ea:	460c      	mov	r4, r1
  4045ec:	4646      	mov	r6, r8
  4045ee:	4690      	mov	r8, r2
  4045f0:	3301      	adds	r3, #1
  4045f2:	4454      	add	r4, sl
  4045f4:	2b07      	cmp	r3, #7
  4045f6:	9425      	str	r4, [sp, #148]	; 0x94
  4045f8:	9324      	str	r3, [sp, #144]	; 0x90
  4045fa:	e888 0420 	stmia.w	r8, {r5, sl}
  4045fe:	f300 8264 	bgt.w	404aca <_vfprintf_r+0xf22>
  404602:	f108 0808 	add.w	r8, r8, #8
  404606:	e47e      	b.n	403f06 <_vfprintf_r+0x35e>
  404608:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40460a:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40460c:	2b01      	cmp	r3, #1
  40460e:	f340 81fd 	ble.w	404a0c <_vfprintf_r+0xe64>
  404612:	3601      	adds	r6, #1
  404614:	3401      	adds	r4, #1
  404616:	2301      	movs	r3, #1
  404618:	2e07      	cmp	r6, #7
  40461a:	9425      	str	r4, [sp, #148]	; 0x94
  40461c:	9624      	str	r6, [sp, #144]	; 0x90
  40461e:	f8c8 7000 	str.w	r7, [r8]
  404622:	f8c8 3004 	str.w	r3, [r8, #4]
  404626:	f300 820e 	bgt.w	404a46 <_vfprintf_r+0xe9e>
  40462a:	f108 0808 	add.w	r8, r8, #8
  40462e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  404630:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404632:	f8c8 3000 	str.w	r3, [r8]
  404636:	3601      	adds	r6, #1
  404638:	4414      	add	r4, r2
  40463a:	2e07      	cmp	r6, #7
  40463c:	9425      	str	r4, [sp, #148]	; 0x94
  40463e:	9624      	str	r6, [sp, #144]	; 0x90
  404640:	f8c8 2004 	str.w	r2, [r8, #4]
  404644:	f300 822e 	bgt.w	404aa4 <_vfprintf_r+0xefc>
  404648:	f108 0808 	add.w	r8, r8, #8
  40464c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40464e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404650:	9813      	ldr	r0, [sp, #76]	; 0x4c
  404652:	9912      	ldr	r1, [sp, #72]	; 0x48
  404654:	f003 ffa0 	bl	408598 <__aeabi_dcmpeq>
  404658:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40465a:	2800      	cmp	r0, #0
  40465c:	f040 8106 	bne.w	40486c <_vfprintf_r+0xcc4>
  404660:	3b01      	subs	r3, #1
  404662:	3601      	adds	r6, #1
  404664:	3701      	adds	r7, #1
  404666:	441c      	add	r4, r3
  404668:	2e07      	cmp	r6, #7
  40466a:	9624      	str	r6, [sp, #144]	; 0x90
  40466c:	9425      	str	r4, [sp, #148]	; 0x94
  40466e:	f8c8 7000 	str.w	r7, [r8]
  404672:	f8c8 3004 	str.w	r3, [r8, #4]
  404676:	f300 81d9 	bgt.w	404a2c <_vfprintf_r+0xe84>
  40467a:	f108 0808 	add.w	r8, r8, #8
  40467e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404680:	f8c8 2004 	str.w	r2, [r8, #4]
  404684:	3601      	adds	r6, #1
  404686:	4414      	add	r4, r2
  404688:	ab1f      	add	r3, sp, #124	; 0x7c
  40468a:	2e07      	cmp	r6, #7
  40468c:	9425      	str	r4, [sp, #148]	; 0x94
  40468e:	9624      	str	r6, [sp, #144]	; 0x90
  404690:	f8c8 3000 	str.w	r3, [r8]
  404694:	f77f ac8b 	ble.w	403fae <_vfprintf_r+0x406>
  404698:	aa23      	add	r2, sp, #140	; 0x8c
  40469a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40469c:	9808      	ldr	r0, [sp, #32]
  40469e:	f7fe fbef 	bl	402e80 <__sprint_r>
  4046a2:	b958      	cbnz	r0, 4046bc <_vfprintf_r+0xb14>
  4046a4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4046a6:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4046aa:	e482      	b.n	403fb2 <_vfprintf_r+0x40a>
  4046ac:	aa23      	add	r2, sp, #140	; 0x8c
  4046ae:	990a      	ldr	r1, [sp, #40]	; 0x28
  4046b0:	9808      	ldr	r0, [sp, #32]
  4046b2:	f7fe fbe5 	bl	402e80 <__sprint_r>
  4046b6:	2800      	cmp	r0, #0
  4046b8:	f43f acc5 	beq.w	404046 <_vfprintf_r+0x49e>
  4046bc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  4046c0:	e6dc      	b.n	40447c <_vfprintf_r+0x8d4>
  4046c2:	f8dd b018 	ldr.w	fp, [sp, #24]
  4046c6:	2b01      	cmp	r3, #1
  4046c8:	f000 8121 	beq.w	40490e <_vfprintf_r+0xd66>
  4046cc:	2b02      	cmp	r3, #2
  4046ce:	d127      	bne.n	404720 <_vfprintf_r+0xb78>
  4046d0:	f8cd b018 	str.w	fp, [sp, #24]
  4046d4:	2400      	movs	r4, #0
  4046d6:	2500      	movs	r5, #0
  4046d8:	e591      	b.n	4041fe <_vfprintf_r+0x656>
  4046da:	aa23      	add	r2, sp, #140	; 0x8c
  4046dc:	990a      	ldr	r1, [sp, #40]	; 0x28
  4046de:	9808      	ldr	r0, [sp, #32]
  4046e0:	f7fe fbce 	bl	402e80 <__sprint_r>
  4046e4:	2800      	cmp	r0, #0
  4046e6:	d1e9      	bne.n	4046bc <_vfprintf_r+0xb14>
  4046e8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4046ea:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4046ee:	e44d      	b.n	403f8c <_vfprintf_r+0x3e4>
  4046f0:	aa23      	add	r2, sp, #140	; 0x8c
  4046f2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4046f4:	9808      	ldr	r0, [sp, #32]
  4046f6:	f7fe fbc3 	bl	402e80 <__sprint_r>
  4046fa:	2800      	cmp	r0, #0
  4046fc:	d1de      	bne.n	4046bc <_vfprintf_r+0xb14>
  4046fe:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404700:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404704:	f7ff bbec 	b.w	403ee0 <_vfprintf_r+0x338>
  404708:	aa23      	add	r2, sp, #140	; 0x8c
  40470a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40470c:	9808      	ldr	r0, [sp, #32]
  40470e:	f7fe fbb7 	bl	402e80 <__sprint_r>
  404712:	2800      	cmp	r0, #0
  404714:	d1d2      	bne.n	4046bc <_vfprintf_r+0xb14>
  404716:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404718:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40471c:	f7ff bbf0 	b.w	403f00 <_vfprintf_r+0x358>
  404720:	f8cd b018 	str.w	fp, [sp, #24]
  404724:	2400      	movs	r4, #0
  404726:	2500      	movs	r5, #0
  404728:	a930      	add	r1, sp, #192	; 0xc0
  40472a:	e000      	b.n	40472e <_vfprintf_r+0xb86>
  40472c:	4639      	mov	r1, r7
  40472e:	08e2      	lsrs	r2, r4, #3
  404730:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  404734:	08e8      	lsrs	r0, r5, #3
  404736:	f004 0307 	and.w	r3, r4, #7
  40473a:	4605      	mov	r5, r0
  40473c:	4614      	mov	r4, r2
  40473e:	3330      	adds	r3, #48	; 0x30
  404740:	ea54 0205 	orrs.w	r2, r4, r5
  404744:	f801 3c01 	strb.w	r3, [r1, #-1]
  404748:	f101 37ff 	add.w	r7, r1, #4294967295
  40474c:	d1ee      	bne.n	40472c <_vfprintf_r+0xb84>
  40474e:	9a06      	ldr	r2, [sp, #24]
  404750:	07d2      	lsls	r2, r2, #31
  404752:	f57f ad64 	bpl.w	40421e <_vfprintf_r+0x676>
  404756:	2b30      	cmp	r3, #48	; 0x30
  404758:	f43f ad61 	beq.w	40421e <_vfprintf_r+0x676>
  40475c:	2330      	movs	r3, #48	; 0x30
  40475e:	3902      	subs	r1, #2
  404760:	f807 3c01 	strb.w	r3, [r7, #-1]
  404764:	ab30      	add	r3, sp, #192	; 0xc0
  404766:	1a5b      	subs	r3, r3, r1
  404768:	930d      	str	r3, [sp, #52]	; 0x34
  40476a:	460f      	mov	r7, r1
  40476c:	f7ff bb46 	b.w	403dfc <_vfprintf_r+0x254>
  404770:	2302      	movs	r3, #2
  404772:	f7ff bb25 	b.w	403dc0 <_vfprintf_r+0x218>
  404776:	991d      	ldr	r1, [sp, #116]	; 0x74
  404778:	2900      	cmp	r1, #0
  40477a:	f340 8274 	ble.w	404c66 <_vfprintf_r+0x10be>
  40477e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404780:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404782:	4293      	cmp	r3, r2
  404784:	bfa8      	it	ge
  404786:	4613      	movge	r3, r2
  404788:	2b00      	cmp	r3, #0
  40478a:	461e      	mov	r6, r3
  40478c:	dd0d      	ble.n	4047aa <_vfprintf_r+0xc02>
  40478e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404790:	f8c8 7000 	str.w	r7, [r8]
  404794:	3301      	adds	r3, #1
  404796:	4434      	add	r4, r6
  404798:	2b07      	cmp	r3, #7
  40479a:	9425      	str	r4, [sp, #148]	; 0x94
  40479c:	f8c8 6004 	str.w	r6, [r8, #4]
  4047a0:	9324      	str	r3, [sp, #144]	; 0x90
  4047a2:	f300 8324 	bgt.w	404dee <_vfprintf_r+0x1246>
  4047a6:	f108 0808 	add.w	r8, r8, #8
  4047aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4047ac:	2e00      	cmp	r6, #0
  4047ae:	bfa8      	it	ge
  4047b0:	1b9b      	subge	r3, r3, r6
  4047b2:	2b00      	cmp	r3, #0
  4047b4:	461e      	mov	r6, r3
  4047b6:	f340 80d0 	ble.w	40495a <_vfprintf_r+0xdb2>
  4047ba:	2e10      	cmp	r6, #16
  4047bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4047be:	4dc0      	ldr	r5, [pc, #768]	; (404ac0 <_vfprintf_r+0xf18>)
  4047c0:	f340 80b7 	ble.w	404932 <_vfprintf_r+0xd8a>
  4047c4:	4622      	mov	r2, r4
  4047c6:	f04f 0a10 	mov.w	sl, #16
  4047ca:	f8dd b020 	ldr.w	fp, [sp, #32]
  4047ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4047d0:	e005      	b.n	4047de <_vfprintf_r+0xc36>
  4047d2:	f108 0808 	add.w	r8, r8, #8
  4047d6:	3e10      	subs	r6, #16
  4047d8:	2e10      	cmp	r6, #16
  4047da:	f340 80a9 	ble.w	404930 <_vfprintf_r+0xd88>
  4047de:	3301      	adds	r3, #1
  4047e0:	3210      	adds	r2, #16
  4047e2:	2b07      	cmp	r3, #7
  4047e4:	9225      	str	r2, [sp, #148]	; 0x94
  4047e6:	9324      	str	r3, [sp, #144]	; 0x90
  4047e8:	e888 0420 	stmia.w	r8, {r5, sl}
  4047ec:	ddf1      	ble.n	4047d2 <_vfprintf_r+0xc2a>
  4047ee:	aa23      	add	r2, sp, #140	; 0x8c
  4047f0:	4621      	mov	r1, r4
  4047f2:	4658      	mov	r0, fp
  4047f4:	f7fe fb44 	bl	402e80 <__sprint_r>
  4047f8:	2800      	cmp	r0, #0
  4047fa:	f040 8324 	bne.w	404e46 <_vfprintf_r+0x129e>
  4047fe:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404800:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404802:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404806:	e7e6      	b.n	4047d6 <_vfprintf_r+0xc2e>
  404808:	2d00      	cmp	r5, #0
  40480a:	bf08      	it	eq
  40480c:	2c0a      	cmpeq	r4, #10
  40480e:	d37c      	bcc.n	40490a <_vfprintf_r+0xd62>
  404810:	af30      	add	r7, sp, #192	; 0xc0
  404812:	4620      	mov	r0, r4
  404814:	4629      	mov	r1, r5
  404816:	220a      	movs	r2, #10
  404818:	2300      	movs	r3, #0
  40481a:	f003 ff2d 	bl	408678 <__aeabi_uldivmod>
  40481e:	3230      	adds	r2, #48	; 0x30
  404820:	f807 2d01 	strb.w	r2, [r7, #-1]!
  404824:	4620      	mov	r0, r4
  404826:	4629      	mov	r1, r5
  404828:	2300      	movs	r3, #0
  40482a:	220a      	movs	r2, #10
  40482c:	f003 ff24 	bl	408678 <__aeabi_uldivmod>
  404830:	4604      	mov	r4, r0
  404832:	460d      	mov	r5, r1
  404834:	ea54 0305 	orrs.w	r3, r4, r5
  404838:	d1eb      	bne.n	404812 <_vfprintf_r+0xc6a>
  40483a:	ab30      	add	r3, sp, #192	; 0xc0
  40483c:	1bdb      	subs	r3, r3, r7
  40483e:	930d      	str	r3, [sp, #52]	; 0x34
  404840:	f7ff badc 	b.w	403dfc <_vfprintf_r+0x254>
  404844:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404846:	930d      	str	r3, [sp, #52]	; 0x34
  404848:	af30      	add	r7, sp, #192	; 0xc0
  40484a:	f7ff bad7 	b.w	403dfc <_vfprintf_r+0x254>
  40484e:	aa23      	add	r2, sp, #140	; 0x8c
  404850:	990a      	ldr	r1, [sp, #40]	; 0x28
  404852:	9808      	ldr	r0, [sp, #32]
  404854:	f7fe fb14 	bl	402e80 <__sprint_r>
  404858:	2800      	cmp	r0, #0
  40485a:	f47f af2f 	bne.w	4046bc <_vfprintf_r+0xb14>
  40485e:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  404862:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404864:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404868:	f7ff bb28 	b.w	403ebc <_vfprintf_r+0x314>
  40486c:	1e5f      	subs	r7, r3, #1
  40486e:	2f00      	cmp	r7, #0
  404870:	f77f af05 	ble.w	40467e <_vfprintf_r+0xad6>
  404874:	2f10      	cmp	r7, #16
  404876:	4d92      	ldr	r5, [pc, #584]	; (404ac0 <_vfprintf_r+0xf18>)
  404878:	f340 810a 	ble.w	404a90 <_vfprintf_r+0xee8>
  40487c:	f04f 0a10 	mov.w	sl, #16
  404880:	f8dd b020 	ldr.w	fp, [sp, #32]
  404884:	e005      	b.n	404892 <_vfprintf_r+0xcea>
  404886:	f108 0808 	add.w	r8, r8, #8
  40488a:	3f10      	subs	r7, #16
  40488c:	2f10      	cmp	r7, #16
  40488e:	f340 80ff 	ble.w	404a90 <_vfprintf_r+0xee8>
  404892:	3601      	adds	r6, #1
  404894:	3410      	adds	r4, #16
  404896:	2e07      	cmp	r6, #7
  404898:	9425      	str	r4, [sp, #148]	; 0x94
  40489a:	9624      	str	r6, [sp, #144]	; 0x90
  40489c:	e888 0420 	stmia.w	r8, {r5, sl}
  4048a0:	ddf1      	ble.n	404886 <_vfprintf_r+0xcde>
  4048a2:	aa23      	add	r2, sp, #140	; 0x8c
  4048a4:	990a      	ldr	r1, [sp, #40]	; 0x28
  4048a6:	4658      	mov	r0, fp
  4048a8:	f7fe faea 	bl	402e80 <__sprint_r>
  4048ac:	2800      	cmp	r0, #0
  4048ae:	f47f af05 	bne.w	4046bc <_vfprintf_r+0xb14>
  4048b2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4048b4:	9e24      	ldr	r6, [sp, #144]	; 0x90
  4048b6:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4048ba:	e7e6      	b.n	40488a <_vfprintf_r+0xce2>
  4048bc:	990e      	ldr	r1, [sp, #56]	; 0x38
  4048be:	460a      	mov	r2, r1
  4048c0:	3204      	adds	r2, #4
  4048c2:	680c      	ldr	r4, [r1, #0]
  4048c4:	920e      	str	r2, [sp, #56]	; 0x38
  4048c6:	2500      	movs	r5, #0
  4048c8:	f7ff ba7a 	b.w	403dc0 <_vfprintf_r+0x218>
  4048cc:	681c      	ldr	r4, [r3, #0]
  4048ce:	3304      	adds	r3, #4
  4048d0:	930e      	str	r3, [sp, #56]	; 0x38
  4048d2:	2500      	movs	r5, #0
  4048d4:	e426      	b.n	404124 <_vfprintf_r+0x57c>
  4048d6:	3301      	adds	r3, #1
  4048d8:	4434      	add	r4, r6
  4048da:	2b07      	cmp	r3, #7
  4048dc:	9425      	str	r4, [sp, #148]	; 0x94
  4048de:	9324      	str	r3, [sp, #144]	; 0x90
  4048e0:	e888 0060 	stmia.w	r8, {r5, r6}
  4048e4:	f77f ab63 	ble.w	403fae <_vfprintf_r+0x406>
  4048e8:	e6d6      	b.n	404698 <_vfprintf_r+0xaf0>
  4048ea:	3204      	adds	r2, #4
  4048ec:	681c      	ldr	r4, [r3, #0]
  4048ee:	920e      	str	r2, [sp, #56]	; 0x38
  4048f0:	2301      	movs	r3, #1
  4048f2:	2500      	movs	r5, #0
  4048f4:	f7ff ba64 	b.w	403dc0 <_vfprintf_r+0x218>
  4048f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4048fa:	6814      	ldr	r4, [r2, #0]
  4048fc:	4613      	mov	r3, r2
  4048fe:	3304      	adds	r3, #4
  404900:	17e5      	asrs	r5, r4, #31
  404902:	930e      	str	r3, [sp, #56]	; 0x38
  404904:	4622      	mov	r2, r4
  404906:	462b      	mov	r3, r5
  404908:	e460      	b.n	4041cc <_vfprintf_r+0x624>
  40490a:	f8dd b018 	ldr.w	fp, [sp, #24]
  40490e:	f8cd b018 	str.w	fp, [sp, #24]
  404912:	af40      	add	r7, sp, #256	; 0x100
  404914:	3430      	adds	r4, #48	; 0x30
  404916:	2301      	movs	r3, #1
  404918:	f807 4d41 	strb.w	r4, [r7, #-65]!
  40491c:	930d      	str	r3, [sp, #52]	; 0x34
  40491e:	f7ff ba6d 	b.w	403dfc <_vfprintf_r+0x254>
  404922:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  404926:	f002 f931 	bl	406b8c <__retarget_lock_release_recursive>
  40492a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  40492e:	e5af      	b.n	404490 <_vfprintf_r+0x8e8>
  404930:	4614      	mov	r4, r2
  404932:	3301      	adds	r3, #1
  404934:	4434      	add	r4, r6
  404936:	2b07      	cmp	r3, #7
  404938:	9425      	str	r4, [sp, #148]	; 0x94
  40493a:	9324      	str	r3, [sp, #144]	; 0x90
  40493c:	e888 0060 	stmia.w	r8, {r5, r6}
  404940:	f340 816d 	ble.w	404c1e <_vfprintf_r+0x1076>
  404944:	aa23      	add	r2, sp, #140	; 0x8c
  404946:	990a      	ldr	r1, [sp, #40]	; 0x28
  404948:	9808      	ldr	r0, [sp, #32]
  40494a:	f7fe fa99 	bl	402e80 <__sprint_r>
  40494e:	2800      	cmp	r0, #0
  404950:	f47f aeb4 	bne.w	4046bc <_vfprintf_r+0xb14>
  404954:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404956:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40495a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40495c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40495e:	4293      	cmp	r3, r2
  404960:	f280 8158 	bge.w	404c14 <_vfprintf_r+0x106c>
  404964:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404966:	9814      	ldr	r0, [sp, #80]	; 0x50
  404968:	9915      	ldr	r1, [sp, #84]	; 0x54
  40496a:	f8c8 1000 	str.w	r1, [r8]
  40496e:	3201      	adds	r2, #1
  404970:	4404      	add	r4, r0
  404972:	2a07      	cmp	r2, #7
  404974:	9425      	str	r4, [sp, #148]	; 0x94
  404976:	f8c8 0004 	str.w	r0, [r8, #4]
  40497a:	9224      	str	r2, [sp, #144]	; 0x90
  40497c:	f300 8152 	bgt.w	404c24 <_vfprintf_r+0x107c>
  404980:	f108 0808 	add.w	r8, r8, #8
  404984:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404986:	9910      	ldr	r1, [sp, #64]	; 0x40
  404988:	1ad3      	subs	r3, r2, r3
  40498a:	1a56      	subs	r6, r2, r1
  40498c:	429e      	cmp	r6, r3
  40498e:	bfa8      	it	ge
  404990:	461e      	movge	r6, r3
  404992:	2e00      	cmp	r6, #0
  404994:	dd0e      	ble.n	4049b4 <_vfprintf_r+0xe0c>
  404996:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404998:	f8c8 6004 	str.w	r6, [r8, #4]
  40499c:	3201      	adds	r2, #1
  40499e:	440f      	add	r7, r1
  4049a0:	4434      	add	r4, r6
  4049a2:	2a07      	cmp	r2, #7
  4049a4:	f8c8 7000 	str.w	r7, [r8]
  4049a8:	9425      	str	r4, [sp, #148]	; 0x94
  4049aa:	9224      	str	r2, [sp, #144]	; 0x90
  4049ac:	f300 823c 	bgt.w	404e28 <_vfprintf_r+0x1280>
  4049b0:	f108 0808 	add.w	r8, r8, #8
  4049b4:	2e00      	cmp	r6, #0
  4049b6:	bfac      	ite	ge
  4049b8:	1b9e      	subge	r6, r3, r6
  4049ba:	461e      	movlt	r6, r3
  4049bc:	2e00      	cmp	r6, #0
  4049be:	f77f aaf8 	ble.w	403fb2 <_vfprintf_r+0x40a>
  4049c2:	2e10      	cmp	r6, #16
  4049c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4049c6:	4d3e      	ldr	r5, [pc, #248]	; (404ac0 <_vfprintf_r+0xf18>)
  4049c8:	dd85      	ble.n	4048d6 <_vfprintf_r+0xd2e>
  4049ca:	2710      	movs	r7, #16
  4049cc:	f8dd a020 	ldr.w	sl, [sp, #32]
  4049d0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4049d4:	e005      	b.n	4049e2 <_vfprintf_r+0xe3a>
  4049d6:	f108 0808 	add.w	r8, r8, #8
  4049da:	3e10      	subs	r6, #16
  4049dc:	2e10      	cmp	r6, #16
  4049de:	f77f af7a 	ble.w	4048d6 <_vfprintf_r+0xd2e>
  4049e2:	3301      	adds	r3, #1
  4049e4:	3410      	adds	r4, #16
  4049e6:	2b07      	cmp	r3, #7
  4049e8:	9425      	str	r4, [sp, #148]	; 0x94
  4049ea:	9324      	str	r3, [sp, #144]	; 0x90
  4049ec:	e888 00a0 	stmia.w	r8, {r5, r7}
  4049f0:	ddf1      	ble.n	4049d6 <_vfprintf_r+0xe2e>
  4049f2:	aa23      	add	r2, sp, #140	; 0x8c
  4049f4:	4659      	mov	r1, fp
  4049f6:	4650      	mov	r0, sl
  4049f8:	f7fe fa42 	bl	402e80 <__sprint_r>
  4049fc:	2800      	cmp	r0, #0
  4049fe:	f040 8176 	bne.w	404cee <_vfprintf_r+0x1146>
  404a02:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404a04:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404a06:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404a0a:	e7e6      	b.n	4049da <_vfprintf_r+0xe32>
  404a0c:	9b06      	ldr	r3, [sp, #24]
  404a0e:	07d8      	lsls	r0, r3, #31
  404a10:	f53f adff 	bmi.w	404612 <_vfprintf_r+0xa6a>
  404a14:	3601      	adds	r6, #1
  404a16:	3401      	adds	r4, #1
  404a18:	2301      	movs	r3, #1
  404a1a:	2e07      	cmp	r6, #7
  404a1c:	9425      	str	r4, [sp, #148]	; 0x94
  404a1e:	9624      	str	r6, [sp, #144]	; 0x90
  404a20:	f8c8 7000 	str.w	r7, [r8]
  404a24:	f8c8 3004 	str.w	r3, [r8, #4]
  404a28:	f77f ae27 	ble.w	40467a <_vfprintf_r+0xad2>
  404a2c:	aa23      	add	r2, sp, #140	; 0x8c
  404a2e:	990a      	ldr	r1, [sp, #40]	; 0x28
  404a30:	9808      	ldr	r0, [sp, #32]
  404a32:	f7fe fa25 	bl	402e80 <__sprint_r>
  404a36:	2800      	cmp	r0, #0
  404a38:	f47f ae40 	bne.w	4046bc <_vfprintf_r+0xb14>
  404a3c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404a3e:	9e24      	ldr	r6, [sp, #144]	; 0x90
  404a40:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404a44:	e61b      	b.n	40467e <_vfprintf_r+0xad6>
  404a46:	aa23      	add	r2, sp, #140	; 0x8c
  404a48:	990a      	ldr	r1, [sp, #40]	; 0x28
  404a4a:	9808      	ldr	r0, [sp, #32]
  404a4c:	f7fe fa18 	bl	402e80 <__sprint_r>
  404a50:	2800      	cmp	r0, #0
  404a52:	f47f ae33 	bne.w	4046bc <_vfprintf_r+0xb14>
  404a56:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404a58:	9e24      	ldr	r6, [sp, #144]	; 0x90
  404a5a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404a5e:	e5e6      	b.n	40462e <_vfprintf_r+0xa86>
  404a60:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  404a62:	3507      	adds	r5, #7
  404a64:	f025 0507 	bic.w	r5, r5, #7
  404a68:	e9d5 2300 	ldrd	r2, r3, [r5]
  404a6c:	f105 0108 	add.w	r1, r5, #8
  404a70:	910e      	str	r1, [sp, #56]	; 0x38
  404a72:	4614      	mov	r4, r2
  404a74:	461d      	mov	r5, r3
  404a76:	f7ff bba9 	b.w	4041cc <_vfprintf_r+0x624>
  404a7a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  404a7c:	3507      	adds	r5, #7
  404a7e:	f025 0307 	bic.w	r3, r5, #7
  404a82:	f103 0208 	add.w	r2, r3, #8
  404a86:	920e      	str	r2, [sp, #56]	; 0x38
  404a88:	e9d3 4500 	ldrd	r4, r5, [r3]
  404a8c:	f7ff bb4a 	b.w	404124 <_vfprintf_r+0x57c>
  404a90:	3601      	adds	r6, #1
  404a92:	443c      	add	r4, r7
  404a94:	2e07      	cmp	r6, #7
  404a96:	9425      	str	r4, [sp, #148]	; 0x94
  404a98:	9624      	str	r6, [sp, #144]	; 0x90
  404a9a:	e888 00a0 	stmia.w	r8, {r5, r7}
  404a9e:	f77f adec 	ble.w	40467a <_vfprintf_r+0xad2>
  404aa2:	e7c3      	b.n	404a2c <_vfprintf_r+0xe84>
  404aa4:	aa23      	add	r2, sp, #140	; 0x8c
  404aa6:	990a      	ldr	r1, [sp, #40]	; 0x28
  404aa8:	9808      	ldr	r0, [sp, #32]
  404aaa:	f7fe f9e9 	bl	402e80 <__sprint_r>
  404aae:	2800      	cmp	r0, #0
  404ab0:	f47f ae04 	bne.w	4046bc <_vfprintf_r+0xb14>
  404ab4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404ab6:	9e24      	ldr	r6, [sp, #144]	; 0x90
  404ab8:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404abc:	e5c6      	b.n	40464c <_vfprintf_r+0xaa4>
  404abe:	bf00      	nop
  404ac0:	00409b7c 	.word	0x00409b7c
  404ac4:	af30      	add	r7, sp, #192	; 0xc0
  404ac6:	f7ff b999 	b.w	403dfc <_vfprintf_r+0x254>
  404aca:	aa23      	add	r2, sp, #140	; 0x8c
  404acc:	990a      	ldr	r1, [sp, #40]	; 0x28
  404ace:	9808      	ldr	r0, [sp, #32]
  404ad0:	f7fe f9d6 	bl	402e80 <__sprint_r>
  404ad4:	2800      	cmp	r0, #0
  404ad6:	f47f adf1 	bne.w	4046bc <_vfprintf_r+0xb14>
  404ada:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404adc:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404ae0:	f7ff ba11 	b.w	403f06 <_vfprintf_r+0x35e>
  404ae4:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  404ae8:	4264      	negs	r4, r4
  404aea:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404aee:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  404af2:	2301      	movs	r3, #1
  404af4:	f7ff b968 	b.w	403dc8 <_vfprintf_r+0x220>
  404af8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  404afa:	4622      	mov	r2, r4
  404afc:	4620      	mov	r0, r4
  404afe:	9c12      	ldr	r4, [sp, #72]	; 0x48
  404b00:	4623      	mov	r3, r4
  404b02:	4621      	mov	r1, r4
  404b04:	f003 fd7a 	bl	4085fc <__aeabi_dcmpun>
  404b08:	2800      	cmp	r0, #0
  404b0a:	f040 828c 	bne.w	405026 <_vfprintf_r+0x147e>
  404b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404b10:	3301      	adds	r3, #1
  404b12:	f026 0320 	bic.w	r3, r6, #32
  404b16:	930d      	str	r3, [sp, #52]	; 0x34
  404b18:	f000 8091 	beq.w	404c3e <_vfprintf_r+0x1096>
  404b1c:	2b47      	cmp	r3, #71	; 0x47
  404b1e:	d104      	bne.n	404b2a <_vfprintf_r+0xf82>
  404b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404b22:	2b00      	cmp	r3, #0
  404b24:	bf08      	it	eq
  404b26:	2301      	moveq	r3, #1
  404b28:	9309      	str	r3, [sp, #36]	; 0x24
  404b2a:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  404b2e:	9306      	str	r3, [sp, #24]
  404b30:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404b32:	f1b3 0a00 	subs.w	sl, r3, #0
  404b36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404b38:	9307      	str	r3, [sp, #28]
  404b3a:	bfbb      	ittet	lt
  404b3c:	4653      	movlt	r3, sl
  404b3e:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
  404b42:	2300      	movge	r3, #0
  404b44:	232d      	movlt	r3, #45	; 0x2d
  404b46:	2e66      	cmp	r6, #102	; 0x66
  404b48:	930f      	str	r3, [sp, #60]	; 0x3c
  404b4a:	f000 817f 	beq.w	404e4c <_vfprintf_r+0x12a4>
  404b4e:	2e46      	cmp	r6, #70	; 0x46
  404b50:	f000 81d4 	beq.w	404efc <_vfprintf_r+0x1354>
  404b54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404b56:	9a07      	ldr	r2, [sp, #28]
  404b58:	2b45      	cmp	r3, #69	; 0x45
  404b5a:	bf0c      	ite	eq
  404b5c:	9b09      	ldreq	r3, [sp, #36]	; 0x24
  404b5e:	9d09      	ldrne	r5, [sp, #36]	; 0x24
  404b60:	a821      	add	r0, sp, #132	; 0x84
  404b62:	a91e      	add	r1, sp, #120	; 0x78
  404b64:	bf08      	it	eq
  404b66:	1c5d      	addeq	r5, r3, #1
  404b68:	9004      	str	r0, [sp, #16]
  404b6a:	9103      	str	r1, [sp, #12]
  404b6c:	a81d      	add	r0, sp, #116	; 0x74
  404b6e:	2102      	movs	r1, #2
  404b70:	9002      	str	r0, [sp, #8]
  404b72:	4653      	mov	r3, sl
  404b74:	9501      	str	r5, [sp, #4]
  404b76:	9100      	str	r1, [sp, #0]
  404b78:	9808      	ldr	r0, [sp, #32]
  404b7a:	f000 fc15 	bl	4053a8 <_dtoa_r>
  404b7e:	2e67      	cmp	r6, #103	; 0x67
  404b80:	4607      	mov	r7, r0
  404b82:	f040 81af 	bne.w	404ee4 <_vfprintf_r+0x133c>
  404b86:	f01b 0f01 	tst.w	fp, #1
  404b8a:	f000 8213 	beq.w	404fb4 <_vfprintf_r+0x140c>
  404b8e:	197c      	adds	r4, r7, r5
  404b90:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404b92:	9807      	ldr	r0, [sp, #28]
  404b94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404b96:	4651      	mov	r1, sl
  404b98:	f003 fcfe 	bl	408598 <__aeabi_dcmpeq>
  404b9c:	2800      	cmp	r0, #0
  404b9e:	f040 8132 	bne.w	404e06 <_vfprintf_r+0x125e>
  404ba2:	9b21      	ldr	r3, [sp, #132]	; 0x84
  404ba4:	42a3      	cmp	r3, r4
  404ba6:	d206      	bcs.n	404bb6 <_vfprintf_r+0x100e>
  404ba8:	2130      	movs	r1, #48	; 0x30
  404baa:	1c5a      	adds	r2, r3, #1
  404bac:	9221      	str	r2, [sp, #132]	; 0x84
  404bae:	7019      	strb	r1, [r3, #0]
  404bb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
  404bb2:	429c      	cmp	r4, r3
  404bb4:	d8f9      	bhi.n	404baa <_vfprintf_r+0x1002>
  404bb6:	1bdb      	subs	r3, r3, r7
  404bb8:	9311      	str	r3, [sp, #68]	; 0x44
  404bba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404bbc:	2b47      	cmp	r3, #71	; 0x47
  404bbe:	f000 80b9 	beq.w	404d34 <_vfprintf_r+0x118c>
  404bc2:	2e65      	cmp	r6, #101	; 0x65
  404bc4:	f340 8276 	ble.w	4050b4 <_vfprintf_r+0x150c>
  404bc8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404bca:	9310      	str	r3, [sp, #64]	; 0x40
  404bcc:	2e66      	cmp	r6, #102	; 0x66
  404bce:	f000 8162 	beq.w	404e96 <_vfprintf_r+0x12ee>
  404bd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404bd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
  404bd6:	4619      	mov	r1, r3
  404bd8:	4291      	cmp	r1, r2
  404bda:	f300 814f 	bgt.w	404e7c <_vfprintf_r+0x12d4>
  404bde:	f01b 0f01 	tst.w	fp, #1
  404be2:	f040 8209 	bne.w	404ff8 <_vfprintf_r+0x1450>
  404be6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404bea:	9307      	str	r3, [sp, #28]
  404bec:	920d      	str	r2, [sp, #52]	; 0x34
  404bee:	2667      	movs	r6, #103	; 0x67
  404bf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404bf2:	2b00      	cmp	r3, #0
  404bf4:	f040 8096 	bne.w	404d24 <_vfprintf_r+0x117c>
  404bf8:	9309      	str	r3, [sp, #36]	; 0x24
  404bfa:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  404bfe:	f7ff b905 	b.w	403e0c <_vfprintf_r+0x264>
  404c02:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  404c06:	f001 ffc1 	bl	406b8c <__retarget_lock_release_recursive>
  404c0a:	f04f 33ff 	mov.w	r3, #4294967295
  404c0e:	930b      	str	r3, [sp, #44]	; 0x2c
  404c10:	f7ff ba30 	b.w	404074 <_vfprintf_r+0x4cc>
  404c14:	9a06      	ldr	r2, [sp, #24]
  404c16:	07d5      	lsls	r5, r2, #31
  404c18:	f57f aeb4 	bpl.w	404984 <_vfprintf_r+0xddc>
  404c1c:	e6a2      	b.n	404964 <_vfprintf_r+0xdbc>
  404c1e:	f108 0808 	add.w	r8, r8, #8
  404c22:	e69a      	b.n	40495a <_vfprintf_r+0xdb2>
  404c24:	aa23      	add	r2, sp, #140	; 0x8c
  404c26:	990a      	ldr	r1, [sp, #40]	; 0x28
  404c28:	9808      	ldr	r0, [sp, #32]
  404c2a:	f7fe f929 	bl	402e80 <__sprint_r>
  404c2e:	2800      	cmp	r0, #0
  404c30:	f47f ad44 	bne.w	4046bc <_vfprintf_r+0xb14>
  404c34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404c36:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404c38:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404c3c:	e6a2      	b.n	404984 <_vfprintf_r+0xddc>
  404c3e:	2306      	movs	r3, #6
  404c40:	9309      	str	r3, [sp, #36]	; 0x24
  404c42:	e772      	b.n	404b2a <_vfprintf_r+0xf82>
  404c44:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  404c48:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  404c4c:	f7ff bbc7 	b.w	4043de <_vfprintf_r+0x836>
  404c50:	aa23      	add	r2, sp, #140	; 0x8c
  404c52:	990a      	ldr	r1, [sp, #40]	; 0x28
  404c54:	9808      	ldr	r0, [sp, #32]
  404c56:	f7fe f913 	bl	402e80 <__sprint_r>
  404c5a:	2800      	cmp	r0, #0
  404c5c:	f47f ad2e 	bne.w	4046bc <_vfprintf_r+0xb14>
  404c60:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404c64:	e437      	b.n	4044d6 <_vfprintf_r+0x92e>
  404c66:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404c68:	4ab4      	ldr	r2, [pc, #720]	; (404f3c <_vfprintf_r+0x1394>)
  404c6a:	f8c8 2000 	str.w	r2, [r8]
  404c6e:	3301      	adds	r3, #1
  404c70:	3401      	adds	r4, #1
  404c72:	2201      	movs	r2, #1
  404c74:	2b07      	cmp	r3, #7
  404c76:	9425      	str	r4, [sp, #148]	; 0x94
  404c78:	9324      	str	r3, [sp, #144]	; 0x90
  404c7a:	f8c8 2004 	str.w	r2, [r8, #4]
  404c7e:	f300 8124 	bgt.w	404eca <_vfprintf_r+0x1322>
  404c82:	f108 0808 	add.w	r8, r8, #8
  404c86:	b929      	cbnz	r1, 404c94 <_vfprintf_r+0x10ec>
  404c88:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404c8a:	b91b      	cbnz	r3, 404c94 <_vfprintf_r+0x10ec>
  404c8c:	9b06      	ldr	r3, [sp, #24]
  404c8e:	07de      	lsls	r6, r3, #31
  404c90:	f57f a98f 	bpl.w	403fb2 <_vfprintf_r+0x40a>
  404c94:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404c96:	9814      	ldr	r0, [sp, #80]	; 0x50
  404c98:	9a15      	ldr	r2, [sp, #84]	; 0x54
  404c9a:	f8c8 2000 	str.w	r2, [r8]
  404c9e:	3301      	adds	r3, #1
  404ca0:	4602      	mov	r2, r0
  404ca2:	4422      	add	r2, r4
  404ca4:	2b07      	cmp	r3, #7
  404ca6:	9225      	str	r2, [sp, #148]	; 0x94
  404ca8:	f8c8 0004 	str.w	r0, [r8, #4]
  404cac:	9324      	str	r3, [sp, #144]	; 0x90
  404cae:	f300 8169 	bgt.w	404f84 <_vfprintf_r+0x13dc>
  404cb2:	f108 0808 	add.w	r8, r8, #8
  404cb6:	2900      	cmp	r1, #0
  404cb8:	f2c0 8136 	blt.w	404f28 <_vfprintf_r+0x1380>
  404cbc:	9911      	ldr	r1, [sp, #68]	; 0x44
  404cbe:	f8c8 7000 	str.w	r7, [r8]
  404cc2:	3301      	adds	r3, #1
  404cc4:	188c      	adds	r4, r1, r2
  404cc6:	2b07      	cmp	r3, #7
  404cc8:	9425      	str	r4, [sp, #148]	; 0x94
  404cca:	9324      	str	r3, [sp, #144]	; 0x90
  404ccc:	f8c8 1004 	str.w	r1, [r8, #4]
  404cd0:	f77f a96d 	ble.w	403fae <_vfprintf_r+0x406>
  404cd4:	e4e0      	b.n	404698 <_vfprintf_r+0xaf0>
  404cd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404cd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404cda:	6813      	ldr	r3, [r2, #0]
  404cdc:	17cd      	asrs	r5, r1, #31
  404cde:	4608      	mov	r0, r1
  404ce0:	3204      	adds	r2, #4
  404ce2:	4629      	mov	r1, r5
  404ce4:	920e      	str	r2, [sp, #56]	; 0x38
  404ce6:	e9c3 0100 	strd	r0, r1, [r3]
  404cea:	f7fe bfa9 	b.w	403c40 <_vfprintf_r+0x98>
  404cee:	46da      	mov	sl, fp
  404cf0:	f7ff bbc4 	b.w	40447c <_vfprintf_r+0x8d4>
  404cf4:	aa23      	add	r2, sp, #140	; 0x8c
  404cf6:	990a      	ldr	r1, [sp, #40]	; 0x28
  404cf8:	9808      	ldr	r0, [sp, #32]
  404cfa:	f7fe f8c1 	bl	402e80 <__sprint_r>
  404cfe:	2800      	cmp	r0, #0
  404d00:	f47f acdc 	bne.w	4046bc <_vfprintf_r+0xb14>
  404d04:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404d06:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404d0a:	f7ff bbfd 	b.w	404508 <_vfprintf_r+0x960>
  404d0e:	4638      	mov	r0, r7
  404d10:	9409      	str	r4, [sp, #36]	; 0x24
  404d12:	f002 fdb5 	bl	407880 <strlen>
  404d16:	950e      	str	r5, [sp, #56]	; 0x38
  404d18:	900d      	str	r0, [sp, #52]	; 0x34
  404d1a:	f8cd b018 	str.w	fp, [sp, #24]
  404d1e:	4603      	mov	r3, r0
  404d20:	f7ff ba36 	b.w	404190 <_vfprintf_r+0x5e8>
  404d24:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  404d28:	2300      	movs	r3, #0
  404d2a:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  404d2e:	9309      	str	r3, [sp, #36]	; 0x24
  404d30:	f7ff b86f 	b.w	403e12 <_vfprintf_r+0x26a>
  404d34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404d36:	9310      	str	r3, [sp, #64]	; 0x40
  404d38:	461a      	mov	r2, r3
  404d3a:	3303      	adds	r3, #3
  404d3c:	db04      	blt.n	404d48 <_vfprintf_r+0x11a0>
  404d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404d40:	4619      	mov	r1, r3
  404d42:	4291      	cmp	r1, r2
  404d44:	f6bf af45 	bge.w	404bd2 <_vfprintf_r+0x102a>
  404d48:	3e02      	subs	r6, #2
  404d4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404d4c:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  404d50:	3b01      	subs	r3, #1
  404d52:	2b00      	cmp	r3, #0
  404d54:	931d      	str	r3, [sp, #116]	; 0x74
  404d56:	bfbd      	ittte	lt
  404d58:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
  404d5a:	f1c3 0301 	rsblt	r3, r3, #1
  404d5e:	222d      	movlt	r2, #45	; 0x2d
  404d60:	222b      	movge	r2, #43	; 0x2b
  404d62:	2b09      	cmp	r3, #9
  404d64:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  404d68:	f340 813e 	ble.w	404fe8 <_vfprintf_r+0x1440>
  404d6c:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
  404d70:	4620      	mov	r0, r4
  404d72:	4d73      	ldr	r5, [pc, #460]	; (404f40 <_vfprintf_r+0x1398>)
  404d74:	e000      	b.n	404d78 <_vfprintf_r+0x11d0>
  404d76:	4610      	mov	r0, r2
  404d78:	fb85 1203 	smull	r1, r2, r5, r3
  404d7c:	17d9      	asrs	r1, r3, #31
  404d7e:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  404d82:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  404d86:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  404d8a:	3230      	adds	r2, #48	; 0x30
  404d8c:	2909      	cmp	r1, #9
  404d8e:	f800 2c01 	strb.w	r2, [r0, #-1]
  404d92:	460b      	mov	r3, r1
  404d94:	f100 32ff 	add.w	r2, r0, #4294967295
  404d98:	dced      	bgt.n	404d76 <_vfprintf_r+0x11ce>
  404d9a:	3330      	adds	r3, #48	; 0x30
  404d9c:	3802      	subs	r0, #2
  404d9e:	b2d9      	uxtb	r1, r3
  404da0:	4284      	cmp	r4, r0
  404da2:	f802 1c01 	strb.w	r1, [r2, #-1]
  404da6:	f240 8190 	bls.w	4050ca <_vfprintf_r+0x1522>
  404daa:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
  404dae:	4613      	mov	r3, r2
  404db0:	e001      	b.n	404db6 <_vfprintf_r+0x120e>
  404db2:	f813 1b01 	ldrb.w	r1, [r3], #1
  404db6:	f800 1b01 	strb.w	r1, [r0], #1
  404dba:	42a3      	cmp	r3, r4
  404dbc:	d1f9      	bne.n	404db2 <_vfprintf_r+0x120a>
  404dbe:	3301      	adds	r3, #1
  404dc0:	1a9b      	subs	r3, r3, r2
  404dc2:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  404dc6:	4413      	add	r3, r2
  404dc8:	aa1f      	add	r2, sp, #124	; 0x7c
  404dca:	1a9b      	subs	r3, r3, r2
  404dcc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404dce:	9319      	str	r3, [sp, #100]	; 0x64
  404dd0:	2a01      	cmp	r2, #1
  404dd2:	4413      	add	r3, r2
  404dd4:	930d      	str	r3, [sp, #52]	; 0x34
  404dd6:	f340 8145 	ble.w	405064 <_vfprintf_r+0x14bc>
  404dda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404ddc:	9a14      	ldr	r2, [sp, #80]	; 0x50
  404dde:	4413      	add	r3, r2
  404de0:	930d      	str	r3, [sp, #52]	; 0x34
  404de2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404de6:	9307      	str	r3, [sp, #28]
  404de8:	2300      	movs	r3, #0
  404dea:	9310      	str	r3, [sp, #64]	; 0x40
  404dec:	e700      	b.n	404bf0 <_vfprintf_r+0x1048>
  404dee:	aa23      	add	r2, sp, #140	; 0x8c
  404df0:	990a      	ldr	r1, [sp, #40]	; 0x28
  404df2:	9808      	ldr	r0, [sp, #32]
  404df4:	f7fe f844 	bl	402e80 <__sprint_r>
  404df8:	2800      	cmp	r0, #0
  404dfa:	f47f ac5f 	bne.w	4046bc <_vfprintf_r+0xb14>
  404dfe:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404e00:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404e04:	e4d1      	b.n	4047aa <_vfprintf_r+0xc02>
  404e06:	4623      	mov	r3, r4
  404e08:	e6d5      	b.n	404bb6 <_vfprintf_r+0x100e>
  404e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404e0c:	9710      	str	r7, [sp, #64]	; 0x40
  404e0e:	2b06      	cmp	r3, #6
  404e10:	bf28      	it	cs
  404e12:	2306      	movcs	r3, #6
  404e14:	9709      	str	r7, [sp, #36]	; 0x24
  404e16:	46ba      	mov	sl, r7
  404e18:	9307      	str	r3, [sp, #28]
  404e1a:	950e      	str	r5, [sp, #56]	; 0x38
  404e1c:	f8cd b018 	str.w	fp, [sp, #24]
  404e20:	930d      	str	r3, [sp, #52]	; 0x34
  404e22:	4f48      	ldr	r7, [pc, #288]	; (404f44 <_vfprintf_r+0x139c>)
  404e24:	f7fe bff2 	b.w	403e0c <_vfprintf_r+0x264>
  404e28:	aa23      	add	r2, sp, #140	; 0x8c
  404e2a:	990a      	ldr	r1, [sp, #40]	; 0x28
  404e2c:	9808      	ldr	r0, [sp, #32]
  404e2e:	f7fe f827 	bl	402e80 <__sprint_r>
  404e32:	2800      	cmp	r0, #0
  404e34:	f47f ac42 	bne.w	4046bc <_vfprintf_r+0xb14>
  404e38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404e3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404e3c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404e3e:	1ad3      	subs	r3, r2, r3
  404e40:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404e44:	e5b6      	b.n	4049b4 <_vfprintf_r+0xe0c>
  404e46:	46a2      	mov	sl, r4
  404e48:	f7ff bb18 	b.w	40447c <_vfprintf_r+0x8d4>
  404e4c:	a821      	add	r0, sp, #132	; 0x84
  404e4e:	a91e      	add	r1, sp, #120	; 0x78
  404e50:	9d09      	ldr	r5, [sp, #36]	; 0x24
  404e52:	9004      	str	r0, [sp, #16]
  404e54:	9103      	str	r1, [sp, #12]
  404e56:	a81d      	add	r0, sp, #116	; 0x74
  404e58:	2103      	movs	r1, #3
  404e5a:	9002      	str	r0, [sp, #8]
  404e5c:	9a07      	ldr	r2, [sp, #28]
  404e5e:	9501      	str	r5, [sp, #4]
  404e60:	4653      	mov	r3, sl
  404e62:	9100      	str	r1, [sp, #0]
  404e64:	9808      	ldr	r0, [sp, #32]
  404e66:	f000 fa9f 	bl	4053a8 <_dtoa_r>
  404e6a:	4607      	mov	r7, r0
  404e6c:	1944      	adds	r4, r0, r5
  404e6e:	783b      	ldrb	r3, [r7, #0]
  404e70:	2b30      	cmp	r3, #48	; 0x30
  404e72:	f000 80ca 	beq.w	40500a <_vfprintf_r+0x1462>
  404e76:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  404e78:	442c      	add	r4, r5
  404e7a:	e689      	b.n	404b90 <_vfprintf_r+0xfe8>
  404e7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
  404e7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404e80:	4413      	add	r3, r2
  404e82:	9a10      	ldr	r2, [sp, #64]	; 0x40
  404e84:	930d      	str	r3, [sp, #52]	; 0x34
  404e86:	2a00      	cmp	r2, #0
  404e88:	f340 80e4 	ble.w	405054 <_vfprintf_r+0x14ac>
  404e8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404e90:	9307      	str	r3, [sp, #28]
  404e92:	2667      	movs	r6, #103	; 0x67
  404e94:	e6ac      	b.n	404bf0 <_vfprintf_r+0x1048>
  404e96:	2b00      	cmp	r3, #0
  404e98:	f340 80fb 	ble.w	405092 <_vfprintf_r+0x14ea>
  404e9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404e9e:	2a00      	cmp	r2, #0
  404ea0:	f040 80ce 	bne.w	405040 <_vfprintf_r+0x1498>
  404ea4:	f01b 0f01 	tst.w	fp, #1
  404ea8:	f040 80ca 	bne.w	405040 <_vfprintf_r+0x1498>
  404eac:	9307      	str	r3, [sp, #28]
  404eae:	930d      	str	r3, [sp, #52]	; 0x34
  404eb0:	e69e      	b.n	404bf0 <_vfprintf_r+0x1048>
  404eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404eb4:	9307      	str	r3, [sp, #28]
  404eb6:	930d      	str	r3, [sp, #52]	; 0x34
  404eb8:	9009      	str	r0, [sp, #36]	; 0x24
  404eba:	950e      	str	r5, [sp, #56]	; 0x38
  404ebc:	f8cd b018 	str.w	fp, [sp, #24]
  404ec0:	9010      	str	r0, [sp, #64]	; 0x40
  404ec2:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  404ec6:	f7fe bfa1 	b.w	403e0c <_vfprintf_r+0x264>
  404eca:	aa23      	add	r2, sp, #140	; 0x8c
  404ecc:	990a      	ldr	r1, [sp, #40]	; 0x28
  404ece:	9808      	ldr	r0, [sp, #32]
  404ed0:	f7fd ffd6 	bl	402e80 <__sprint_r>
  404ed4:	2800      	cmp	r0, #0
  404ed6:	f47f abf1 	bne.w	4046bc <_vfprintf_r+0xb14>
  404eda:	991d      	ldr	r1, [sp, #116]	; 0x74
  404edc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404ede:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404ee2:	e6d0      	b.n	404c86 <_vfprintf_r+0x10de>
  404ee4:	2e47      	cmp	r6, #71	; 0x47
  404ee6:	f47f ae52 	bne.w	404b8e <_vfprintf_r+0xfe6>
  404eea:	f01b 0f01 	tst.w	fp, #1
  404eee:	f000 80da 	beq.w	4050a6 <_vfprintf_r+0x14fe>
  404ef2:	2e46      	cmp	r6, #70	; 0x46
  404ef4:	eb07 0405 	add.w	r4, r7, r5
  404ef8:	d0b9      	beq.n	404e6e <_vfprintf_r+0x12c6>
  404efa:	e649      	b.n	404b90 <_vfprintf_r+0xfe8>
  404efc:	a821      	add	r0, sp, #132	; 0x84
  404efe:	a91e      	add	r1, sp, #120	; 0x78
  404f00:	9c09      	ldr	r4, [sp, #36]	; 0x24
  404f02:	9004      	str	r0, [sp, #16]
  404f04:	9103      	str	r1, [sp, #12]
  404f06:	a81d      	add	r0, sp, #116	; 0x74
  404f08:	2103      	movs	r1, #3
  404f0a:	9002      	str	r0, [sp, #8]
  404f0c:	9a07      	ldr	r2, [sp, #28]
  404f0e:	9401      	str	r4, [sp, #4]
  404f10:	4653      	mov	r3, sl
  404f12:	9100      	str	r1, [sp, #0]
  404f14:	9808      	ldr	r0, [sp, #32]
  404f16:	f000 fa47 	bl	4053a8 <_dtoa_r>
  404f1a:	4625      	mov	r5, r4
  404f1c:	4607      	mov	r7, r0
  404f1e:	e7e8      	b.n	404ef2 <_vfprintf_r+0x134a>
  404f20:	2300      	movs	r3, #0
  404f22:	9309      	str	r3, [sp, #36]	; 0x24
  404f24:	f7fe bec1 	b.w	403caa <_vfprintf_r+0x102>
  404f28:	424e      	negs	r6, r1
  404f2a:	3110      	adds	r1, #16
  404f2c:	4d06      	ldr	r5, [pc, #24]	; (404f48 <_vfprintf_r+0x13a0>)
  404f2e:	da43      	bge.n	404fb8 <_vfprintf_r+0x1410>
  404f30:	2410      	movs	r4, #16
  404f32:	f8dd a020 	ldr.w	sl, [sp, #32]
  404f36:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  404f3a:	e00c      	b.n	404f56 <_vfprintf_r+0x13ae>
  404f3c:	00408ec8 	.word	0x00408ec8
  404f40:	66666667 	.word	0x66666667
  404f44:	00409b34 	.word	0x00409b34
  404f48:	00409b7c 	.word	0x00409b7c
  404f4c:	f108 0808 	add.w	r8, r8, #8
  404f50:	3e10      	subs	r6, #16
  404f52:	2e10      	cmp	r6, #16
  404f54:	dd30      	ble.n	404fb8 <_vfprintf_r+0x1410>
  404f56:	3301      	adds	r3, #1
  404f58:	3210      	adds	r2, #16
  404f5a:	2b07      	cmp	r3, #7
  404f5c:	9225      	str	r2, [sp, #148]	; 0x94
  404f5e:	9324      	str	r3, [sp, #144]	; 0x90
  404f60:	f8c8 5000 	str.w	r5, [r8]
  404f64:	f8c8 4004 	str.w	r4, [r8, #4]
  404f68:	ddf0      	ble.n	404f4c <_vfprintf_r+0x13a4>
  404f6a:	aa23      	add	r2, sp, #140	; 0x8c
  404f6c:	4659      	mov	r1, fp
  404f6e:	4650      	mov	r0, sl
  404f70:	f7fd ff86 	bl	402e80 <__sprint_r>
  404f74:	2800      	cmp	r0, #0
  404f76:	f47f aeba 	bne.w	404cee <_vfprintf_r+0x1146>
  404f7a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404f7c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404f7e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404f82:	e7e5      	b.n	404f50 <_vfprintf_r+0x13a8>
  404f84:	aa23      	add	r2, sp, #140	; 0x8c
  404f86:	990a      	ldr	r1, [sp, #40]	; 0x28
  404f88:	9808      	ldr	r0, [sp, #32]
  404f8a:	f7fd ff79 	bl	402e80 <__sprint_r>
  404f8e:	2800      	cmp	r0, #0
  404f90:	f47f ab94 	bne.w	4046bc <_vfprintf_r+0xb14>
  404f94:	991d      	ldr	r1, [sp, #116]	; 0x74
  404f96:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404f98:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404f9a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404f9e:	e68a      	b.n	404cb6 <_vfprintf_r+0x110e>
  404fa0:	9808      	ldr	r0, [sp, #32]
  404fa2:	aa23      	add	r2, sp, #140	; 0x8c
  404fa4:	4651      	mov	r1, sl
  404fa6:	f7fd ff6b 	bl	402e80 <__sprint_r>
  404faa:	2800      	cmp	r0, #0
  404fac:	f43f aa64 	beq.w	404478 <_vfprintf_r+0x8d0>
  404fb0:	f7ff ba64 	b.w	40447c <_vfprintf_r+0x8d4>
  404fb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
  404fb6:	e5fe      	b.n	404bb6 <_vfprintf_r+0x100e>
  404fb8:	3301      	adds	r3, #1
  404fba:	4432      	add	r2, r6
  404fbc:	2b07      	cmp	r3, #7
  404fbe:	e888 0060 	stmia.w	r8, {r5, r6}
  404fc2:	9225      	str	r2, [sp, #148]	; 0x94
  404fc4:	9324      	str	r3, [sp, #144]	; 0x90
  404fc6:	f108 0808 	add.w	r8, r8, #8
  404fca:	f77f ae77 	ble.w	404cbc <_vfprintf_r+0x1114>
  404fce:	aa23      	add	r2, sp, #140	; 0x8c
  404fd0:	990a      	ldr	r1, [sp, #40]	; 0x28
  404fd2:	9808      	ldr	r0, [sp, #32]
  404fd4:	f7fd ff54 	bl	402e80 <__sprint_r>
  404fd8:	2800      	cmp	r0, #0
  404fda:	f47f ab6f 	bne.w	4046bc <_vfprintf_r+0xb14>
  404fde:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404fe0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404fe2:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404fe6:	e669      	b.n	404cbc <_vfprintf_r+0x1114>
  404fe8:	3330      	adds	r3, #48	; 0x30
  404fea:	2230      	movs	r2, #48	; 0x30
  404fec:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  404ff0:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  404ff4:	ab20      	add	r3, sp, #128	; 0x80
  404ff6:	e6e7      	b.n	404dc8 <_vfprintf_r+0x1220>
  404ff8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404ffa:	9a14      	ldr	r2, [sp, #80]	; 0x50
  404ffc:	4413      	add	r3, r2
  404ffe:	930d      	str	r3, [sp, #52]	; 0x34
  405000:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405004:	9307      	str	r3, [sp, #28]
  405006:	2667      	movs	r6, #103	; 0x67
  405008:	e5f2      	b.n	404bf0 <_vfprintf_r+0x1048>
  40500a:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40500c:	9807      	ldr	r0, [sp, #28]
  40500e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405010:	4651      	mov	r1, sl
  405012:	f003 fac1 	bl	408598 <__aeabi_dcmpeq>
  405016:	2800      	cmp	r0, #0
  405018:	f47f af2d 	bne.w	404e76 <_vfprintf_r+0x12ce>
  40501c:	f1c5 0501 	rsb	r5, r5, #1
  405020:	951d      	str	r5, [sp, #116]	; 0x74
  405022:	442c      	add	r4, r5
  405024:	e5b4      	b.n	404b90 <_vfprintf_r+0xfe8>
  405026:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405028:	4f33      	ldr	r7, [pc, #204]	; (4050f8 <_vfprintf_r+0x1550>)
  40502a:	2b00      	cmp	r3, #0
  40502c:	bfb6      	itet	lt
  40502e:	f04f 0a2d 	movlt.w	sl, #45	; 0x2d
  405032:	f89d a06f 	ldrbge.w	sl, [sp, #111]	; 0x6f
  405036:	f88d a06f 	strblt.w	sl, [sp, #111]	; 0x6f
  40503a:	4b30      	ldr	r3, [pc, #192]	; (4050fc <_vfprintf_r+0x1554>)
  40503c:	f7ff b9d1 	b.w	4043e2 <_vfprintf_r+0x83a>
  405040:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405042:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405044:	4413      	add	r3, r2
  405046:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405048:	441a      	add	r2, r3
  40504a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40504e:	920d      	str	r2, [sp, #52]	; 0x34
  405050:	9307      	str	r3, [sp, #28]
  405052:	e5cd      	b.n	404bf0 <_vfprintf_r+0x1048>
  405054:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405056:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405058:	f1c3 0301 	rsb	r3, r3, #1
  40505c:	441a      	add	r2, r3
  40505e:	4613      	mov	r3, r2
  405060:	920d      	str	r2, [sp, #52]	; 0x34
  405062:	e713      	b.n	404e8c <_vfprintf_r+0x12e4>
  405064:	f01b 0301 	ands.w	r3, fp, #1
  405068:	9310      	str	r3, [sp, #64]	; 0x40
  40506a:	f47f aeb6 	bne.w	404dda <_vfprintf_r+0x1232>
  40506e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405070:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405074:	9307      	str	r3, [sp, #28]
  405076:	e5bb      	b.n	404bf0 <_vfprintf_r+0x1048>
  405078:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40507a:	f899 6001 	ldrb.w	r6, [r9, #1]
  40507e:	6823      	ldr	r3, [r4, #0]
  405080:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
  405084:	9309      	str	r3, [sp, #36]	; 0x24
  405086:	4623      	mov	r3, r4
  405088:	3304      	adds	r3, #4
  40508a:	4681      	mov	r9, r0
  40508c:	930e      	str	r3, [sp, #56]	; 0x38
  40508e:	f7fe be0a 	b.w	403ca6 <_vfprintf_r+0xfe>
  405092:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405094:	b913      	cbnz	r3, 40509c <_vfprintf_r+0x14f4>
  405096:	f01b 0f01 	tst.w	fp, #1
  40509a:	d002      	beq.n	4050a2 <_vfprintf_r+0x14fa>
  40509c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40509e:	3301      	adds	r3, #1
  4050a0:	e7d1      	b.n	405046 <_vfprintf_r+0x149e>
  4050a2:	2301      	movs	r3, #1
  4050a4:	e702      	b.n	404eac <_vfprintf_r+0x1304>
  4050a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4050a8:	1bdb      	subs	r3, r3, r7
  4050aa:	9311      	str	r3, [sp, #68]	; 0x44
  4050ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4050ae:	2b47      	cmp	r3, #71	; 0x47
  4050b0:	f43f ae40 	beq.w	404d34 <_vfprintf_r+0x118c>
  4050b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4050b6:	9310      	str	r3, [sp, #64]	; 0x40
  4050b8:	e647      	b.n	404d4a <_vfprintf_r+0x11a2>
  4050ba:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4050be:	f7ff b81d 	b.w	4040fc <_vfprintf_r+0x554>
  4050c2:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4050c6:	f7ff b918 	b.w	4042fa <_vfprintf_r+0x752>
  4050ca:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  4050ce:	e67b      	b.n	404dc8 <_vfprintf_r+0x1220>
  4050d0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4050d4:	f7ff b866 	b.w	4041a4 <_vfprintf_r+0x5fc>
  4050d8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4050dc:	f7ff b9ac 	b.w	404438 <_vfprintf_r+0x890>
  4050e0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4050e4:	f7ff b934 	b.w	404350 <_vfprintf_r+0x7a8>
  4050e8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4050ec:	f7ff b8b0 	b.w	404250 <_vfprintf_r+0x6a8>
  4050f0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4050f4:	f7ff b945 	b.w	404382 <_vfprintf_r+0x7da>
  4050f8:	00409b68 	.word	0x00409b68
  4050fc:	00409b64 	.word	0x00409b64

00405100 <__sbprintf>:
  405100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405104:	460c      	mov	r4, r1
  405106:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40510a:	8989      	ldrh	r1, [r1, #12]
  40510c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40510e:	89e5      	ldrh	r5, [r4, #14]
  405110:	9619      	str	r6, [sp, #100]	; 0x64
  405112:	f021 0102 	bic.w	r1, r1, #2
  405116:	4606      	mov	r6, r0
  405118:	69e0      	ldr	r0, [r4, #28]
  40511a:	f8ad 100c 	strh.w	r1, [sp, #12]
  40511e:	4617      	mov	r7, r2
  405120:	f44f 6180 	mov.w	r1, #1024	; 0x400
  405124:	6a62      	ldr	r2, [r4, #36]	; 0x24
  405126:	f8ad 500e 	strh.w	r5, [sp, #14]
  40512a:	4698      	mov	r8, r3
  40512c:	ad1a      	add	r5, sp, #104	; 0x68
  40512e:	2300      	movs	r3, #0
  405130:	9007      	str	r0, [sp, #28]
  405132:	a816      	add	r0, sp, #88	; 0x58
  405134:	9209      	str	r2, [sp, #36]	; 0x24
  405136:	9306      	str	r3, [sp, #24]
  405138:	9500      	str	r5, [sp, #0]
  40513a:	9504      	str	r5, [sp, #16]
  40513c:	9102      	str	r1, [sp, #8]
  40513e:	9105      	str	r1, [sp, #20]
  405140:	f001 fd1e 	bl	406b80 <__retarget_lock_init_recursive>
  405144:	4643      	mov	r3, r8
  405146:	463a      	mov	r2, r7
  405148:	4669      	mov	r1, sp
  40514a:	4630      	mov	r0, r6
  40514c:	f7fe fd2c 	bl	403ba8 <_vfprintf_r>
  405150:	1e05      	subs	r5, r0, #0
  405152:	db07      	blt.n	405164 <__sbprintf+0x64>
  405154:	4630      	mov	r0, r6
  405156:	4669      	mov	r1, sp
  405158:	f001 f8f0 	bl	40633c <_fflush_r>
  40515c:	2800      	cmp	r0, #0
  40515e:	bf18      	it	ne
  405160:	f04f 35ff 	movne.w	r5, #4294967295
  405164:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405168:	065b      	lsls	r3, r3, #25
  40516a:	d503      	bpl.n	405174 <__sbprintf+0x74>
  40516c:	89a3      	ldrh	r3, [r4, #12]
  40516e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405172:	81a3      	strh	r3, [r4, #12]
  405174:	9816      	ldr	r0, [sp, #88]	; 0x58
  405176:	f001 fd05 	bl	406b84 <__retarget_lock_close_recursive>
  40517a:	4628      	mov	r0, r5
  40517c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  405180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00405184 <__swsetup_r>:
  405184:	b538      	push	{r3, r4, r5, lr}
  405186:	4b30      	ldr	r3, [pc, #192]	; (405248 <__swsetup_r+0xc4>)
  405188:	681b      	ldr	r3, [r3, #0]
  40518a:	4605      	mov	r5, r0
  40518c:	460c      	mov	r4, r1
  40518e:	b113      	cbz	r3, 405196 <__swsetup_r+0x12>
  405190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  405192:	2a00      	cmp	r2, #0
  405194:	d038      	beq.n	405208 <__swsetup_r+0x84>
  405196:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40519a:	b293      	uxth	r3, r2
  40519c:	0718      	lsls	r0, r3, #28
  40519e:	d50c      	bpl.n	4051ba <__swsetup_r+0x36>
  4051a0:	6920      	ldr	r0, [r4, #16]
  4051a2:	b1a8      	cbz	r0, 4051d0 <__swsetup_r+0x4c>
  4051a4:	f013 0201 	ands.w	r2, r3, #1
  4051a8:	d01e      	beq.n	4051e8 <__swsetup_r+0x64>
  4051aa:	6963      	ldr	r3, [r4, #20]
  4051ac:	2200      	movs	r2, #0
  4051ae:	425b      	negs	r3, r3
  4051b0:	61a3      	str	r3, [r4, #24]
  4051b2:	60a2      	str	r2, [r4, #8]
  4051b4:	b1f0      	cbz	r0, 4051f4 <__swsetup_r+0x70>
  4051b6:	2000      	movs	r0, #0
  4051b8:	bd38      	pop	{r3, r4, r5, pc}
  4051ba:	06d9      	lsls	r1, r3, #27
  4051bc:	d53c      	bpl.n	405238 <__swsetup_r+0xb4>
  4051be:	0758      	lsls	r0, r3, #29
  4051c0:	d426      	bmi.n	405210 <__swsetup_r+0x8c>
  4051c2:	6920      	ldr	r0, [r4, #16]
  4051c4:	f042 0308 	orr.w	r3, r2, #8
  4051c8:	81a3      	strh	r3, [r4, #12]
  4051ca:	b29b      	uxth	r3, r3
  4051cc:	2800      	cmp	r0, #0
  4051ce:	d1e9      	bne.n	4051a4 <__swsetup_r+0x20>
  4051d0:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4051d4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4051d8:	d0e4      	beq.n	4051a4 <__swsetup_r+0x20>
  4051da:	4628      	mov	r0, r5
  4051dc:	4621      	mov	r1, r4
  4051de:	f001 fd05 	bl	406bec <__smakebuf_r>
  4051e2:	89a3      	ldrh	r3, [r4, #12]
  4051e4:	6920      	ldr	r0, [r4, #16]
  4051e6:	e7dd      	b.n	4051a4 <__swsetup_r+0x20>
  4051e8:	0799      	lsls	r1, r3, #30
  4051ea:	bf58      	it	pl
  4051ec:	6962      	ldrpl	r2, [r4, #20]
  4051ee:	60a2      	str	r2, [r4, #8]
  4051f0:	2800      	cmp	r0, #0
  4051f2:	d1e0      	bne.n	4051b6 <__swsetup_r+0x32>
  4051f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4051f8:	061a      	lsls	r2, r3, #24
  4051fa:	d5dd      	bpl.n	4051b8 <__swsetup_r+0x34>
  4051fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405200:	81a3      	strh	r3, [r4, #12]
  405202:	f04f 30ff 	mov.w	r0, #4294967295
  405206:	bd38      	pop	{r3, r4, r5, pc}
  405208:	4618      	mov	r0, r3
  40520a:	f001 f8ef 	bl	4063ec <__sinit>
  40520e:	e7c2      	b.n	405196 <__swsetup_r+0x12>
  405210:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405212:	b151      	cbz	r1, 40522a <__swsetup_r+0xa6>
  405214:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405218:	4299      	cmp	r1, r3
  40521a:	d004      	beq.n	405226 <__swsetup_r+0xa2>
  40521c:	4628      	mov	r0, r5
  40521e:	f001 fa0b 	bl	406638 <_free_r>
  405222:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405226:	2300      	movs	r3, #0
  405228:	6323      	str	r3, [r4, #48]	; 0x30
  40522a:	2300      	movs	r3, #0
  40522c:	6920      	ldr	r0, [r4, #16]
  40522e:	6063      	str	r3, [r4, #4]
  405230:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  405234:	6020      	str	r0, [r4, #0]
  405236:	e7c5      	b.n	4051c4 <__swsetup_r+0x40>
  405238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40523c:	2309      	movs	r3, #9
  40523e:	602b      	str	r3, [r5, #0]
  405240:	f04f 30ff 	mov.w	r0, #4294967295
  405244:	81a2      	strh	r2, [r4, #12]
  405246:	bd38      	pop	{r3, r4, r5, pc}
  405248:	20400004 	.word	0x20400004

0040524c <register_fini>:
  40524c:	4b02      	ldr	r3, [pc, #8]	; (405258 <register_fini+0xc>)
  40524e:	b113      	cbz	r3, 405256 <register_fini+0xa>
  405250:	4802      	ldr	r0, [pc, #8]	; (40525c <register_fini+0x10>)
  405252:	f000 b80d 	b.w	405270 <atexit>
  405256:	4770      	bx	lr
  405258:	00000000 	.word	0x00000000
  40525c:	0040645d 	.word	0x0040645d

00405260 <abort>:
  405260:	b508      	push	{r3, lr}
  405262:	2006      	movs	r0, #6
  405264:	f002 faa8 	bl	4077b8 <raise>
  405268:	2001      	movs	r0, #1
  40526a:	f7fb f871 	bl	400350 <_exit>
  40526e:	bf00      	nop

00405270 <atexit>:
  405270:	2300      	movs	r3, #0
  405272:	4601      	mov	r1, r0
  405274:	461a      	mov	r2, r3
  405276:	4618      	mov	r0, r3
  405278:	f002 bc16 	b.w	407aa8 <__register_exitproc>

0040527c <quorem>:
  40527c:	6902      	ldr	r2, [r0, #16]
  40527e:	690b      	ldr	r3, [r1, #16]
  405280:	4293      	cmp	r3, r2
  405282:	f300 808d 	bgt.w	4053a0 <quorem+0x124>
  405286:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40528a:	f103 38ff 	add.w	r8, r3, #4294967295
  40528e:	f101 0714 	add.w	r7, r1, #20
  405292:	f100 0b14 	add.w	fp, r0, #20
  405296:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40529a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40529e:	ea4f 0488 	mov.w	r4, r8, lsl #2
  4052a2:	b083      	sub	sp, #12
  4052a4:	3201      	adds	r2, #1
  4052a6:	fbb3 f9f2 	udiv	r9, r3, r2
  4052aa:	eb0b 0304 	add.w	r3, fp, r4
  4052ae:	9400      	str	r4, [sp, #0]
  4052b0:	eb07 0a04 	add.w	sl, r7, r4
  4052b4:	9301      	str	r3, [sp, #4]
  4052b6:	f1b9 0f00 	cmp.w	r9, #0
  4052ba:	d039      	beq.n	405330 <quorem+0xb4>
  4052bc:	2500      	movs	r5, #0
  4052be:	462e      	mov	r6, r5
  4052c0:	46bc      	mov	ip, r7
  4052c2:	46de      	mov	lr, fp
  4052c4:	f85c 4b04 	ldr.w	r4, [ip], #4
  4052c8:	f8de 3000 	ldr.w	r3, [lr]
  4052cc:	b2a2      	uxth	r2, r4
  4052ce:	fb09 5502 	mla	r5, r9, r2, r5
  4052d2:	0c22      	lsrs	r2, r4, #16
  4052d4:	0c2c      	lsrs	r4, r5, #16
  4052d6:	fb09 4202 	mla	r2, r9, r2, r4
  4052da:	b2ad      	uxth	r5, r5
  4052dc:	1b75      	subs	r5, r6, r5
  4052de:	b296      	uxth	r6, r2
  4052e0:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  4052e4:	fa15 f383 	uxtah	r3, r5, r3
  4052e8:	eb06 4623 	add.w	r6, r6, r3, asr #16
  4052ec:	b29b      	uxth	r3, r3
  4052ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  4052f2:	45e2      	cmp	sl, ip
  4052f4:	ea4f 4512 	mov.w	r5, r2, lsr #16
  4052f8:	f84e 3b04 	str.w	r3, [lr], #4
  4052fc:	ea4f 4626 	mov.w	r6, r6, asr #16
  405300:	d2e0      	bcs.n	4052c4 <quorem+0x48>
  405302:	9b00      	ldr	r3, [sp, #0]
  405304:	f85b 3003 	ldr.w	r3, [fp, r3]
  405308:	b993      	cbnz	r3, 405330 <quorem+0xb4>
  40530a:	9c01      	ldr	r4, [sp, #4]
  40530c:	1f23      	subs	r3, r4, #4
  40530e:	459b      	cmp	fp, r3
  405310:	d20c      	bcs.n	40532c <quorem+0xb0>
  405312:	f854 3c04 	ldr.w	r3, [r4, #-4]
  405316:	b94b      	cbnz	r3, 40532c <quorem+0xb0>
  405318:	f1a4 0308 	sub.w	r3, r4, #8
  40531c:	e002      	b.n	405324 <quorem+0xa8>
  40531e:	681a      	ldr	r2, [r3, #0]
  405320:	3b04      	subs	r3, #4
  405322:	b91a      	cbnz	r2, 40532c <quorem+0xb0>
  405324:	459b      	cmp	fp, r3
  405326:	f108 38ff 	add.w	r8, r8, #4294967295
  40532a:	d3f8      	bcc.n	40531e <quorem+0xa2>
  40532c:	f8c0 8010 	str.w	r8, [r0, #16]
  405330:	4604      	mov	r4, r0
  405332:	f001 ff6f 	bl	407214 <__mcmp>
  405336:	2800      	cmp	r0, #0
  405338:	db2e      	blt.n	405398 <quorem+0x11c>
  40533a:	f109 0901 	add.w	r9, r9, #1
  40533e:	465d      	mov	r5, fp
  405340:	2300      	movs	r3, #0
  405342:	f857 1b04 	ldr.w	r1, [r7], #4
  405346:	6828      	ldr	r0, [r5, #0]
  405348:	b28a      	uxth	r2, r1
  40534a:	1a9a      	subs	r2, r3, r2
  40534c:	0c0b      	lsrs	r3, r1, #16
  40534e:	fa12 f280 	uxtah	r2, r2, r0
  405352:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  405356:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40535a:	b292      	uxth	r2, r2
  40535c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  405360:	45ba      	cmp	sl, r7
  405362:	f845 2b04 	str.w	r2, [r5], #4
  405366:	ea4f 4323 	mov.w	r3, r3, asr #16
  40536a:	d2ea      	bcs.n	405342 <quorem+0xc6>
  40536c:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  405370:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  405374:	b982      	cbnz	r2, 405398 <quorem+0x11c>
  405376:	1f1a      	subs	r2, r3, #4
  405378:	4593      	cmp	fp, r2
  40537a:	d20b      	bcs.n	405394 <quorem+0x118>
  40537c:	f853 2c04 	ldr.w	r2, [r3, #-4]
  405380:	b942      	cbnz	r2, 405394 <quorem+0x118>
  405382:	3b08      	subs	r3, #8
  405384:	e002      	b.n	40538c <quorem+0x110>
  405386:	681a      	ldr	r2, [r3, #0]
  405388:	3b04      	subs	r3, #4
  40538a:	b91a      	cbnz	r2, 405394 <quorem+0x118>
  40538c:	459b      	cmp	fp, r3
  40538e:	f108 38ff 	add.w	r8, r8, #4294967295
  405392:	d3f8      	bcc.n	405386 <quorem+0x10a>
  405394:	f8c4 8010 	str.w	r8, [r4, #16]
  405398:	4648      	mov	r0, r9
  40539a:	b003      	add	sp, #12
  40539c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4053a0:	2000      	movs	r0, #0
  4053a2:	4770      	bx	lr
  4053a4:	0000      	movs	r0, r0
	...

004053a8 <_dtoa_r>:
  4053a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4053ac:	6c01      	ldr	r1, [r0, #64]	; 0x40
  4053ae:	b09b      	sub	sp, #108	; 0x6c
  4053b0:	4604      	mov	r4, r0
  4053b2:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  4053b4:	4692      	mov	sl, r2
  4053b6:	469b      	mov	fp, r3
  4053b8:	b141      	cbz	r1, 4053cc <_dtoa_r+0x24>
  4053ba:	6c42      	ldr	r2, [r0, #68]	; 0x44
  4053bc:	604a      	str	r2, [r1, #4]
  4053be:	2301      	movs	r3, #1
  4053c0:	4093      	lsls	r3, r2
  4053c2:	608b      	str	r3, [r1, #8]
  4053c4:	f001 fd4e 	bl	406e64 <_Bfree>
  4053c8:	2300      	movs	r3, #0
  4053ca:	6423      	str	r3, [r4, #64]	; 0x40
  4053cc:	f1bb 0f00 	cmp.w	fp, #0
  4053d0:	465d      	mov	r5, fp
  4053d2:	db35      	blt.n	405440 <_dtoa_r+0x98>
  4053d4:	2300      	movs	r3, #0
  4053d6:	6033      	str	r3, [r6, #0]
  4053d8:	4b9d      	ldr	r3, [pc, #628]	; (405650 <_dtoa_r+0x2a8>)
  4053da:	43ab      	bics	r3, r5
  4053dc:	d015      	beq.n	40540a <_dtoa_r+0x62>
  4053de:	4650      	mov	r0, sl
  4053e0:	4659      	mov	r1, fp
  4053e2:	2200      	movs	r2, #0
  4053e4:	2300      	movs	r3, #0
  4053e6:	f003 f8d7 	bl	408598 <__aeabi_dcmpeq>
  4053ea:	4680      	mov	r8, r0
  4053ec:	2800      	cmp	r0, #0
  4053ee:	d02d      	beq.n	40544c <_dtoa_r+0xa4>
  4053f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4053f2:	2301      	movs	r3, #1
  4053f4:	6013      	str	r3, [r2, #0]
  4053f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4053f8:	2b00      	cmp	r3, #0
  4053fa:	f000 80bd 	beq.w	405578 <_dtoa_r+0x1d0>
  4053fe:	4895      	ldr	r0, [pc, #596]	; (405654 <_dtoa_r+0x2ac>)
  405400:	6018      	str	r0, [r3, #0]
  405402:	3801      	subs	r0, #1
  405404:	b01b      	add	sp, #108	; 0x6c
  405406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40540a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40540c:	f242 730f 	movw	r3, #9999	; 0x270f
  405410:	6013      	str	r3, [r2, #0]
  405412:	f1ba 0f00 	cmp.w	sl, #0
  405416:	d10d      	bne.n	405434 <_dtoa_r+0x8c>
  405418:	f3c5 0513 	ubfx	r5, r5, #0, #20
  40541c:	b955      	cbnz	r5, 405434 <_dtoa_r+0x8c>
  40541e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405420:	488d      	ldr	r0, [pc, #564]	; (405658 <_dtoa_r+0x2b0>)
  405422:	2b00      	cmp	r3, #0
  405424:	d0ee      	beq.n	405404 <_dtoa_r+0x5c>
  405426:	f100 0308 	add.w	r3, r0, #8
  40542a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  40542c:	6013      	str	r3, [r2, #0]
  40542e:	b01b      	add	sp, #108	; 0x6c
  405430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405434:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405436:	4889      	ldr	r0, [pc, #548]	; (40565c <_dtoa_r+0x2b4>)
  405438:	2b00      	cmp	r3, #0
  40543a:	d0e3      	beq.n	405404 <_dtoa_r+0x5c>
  40543c:	1cc3      	adds	r3, r0, #3
  40543e:	e7f4      	b.n	40542a <_dtoa_r+0x82>
  405440:	2301      	movs	r3, #1
  405442:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  405446:	6033      	str	r3, [r6, #0]
  405448:	46ab      	mov	fp, r5
  40544a:	e7c5      	b.n	4053d8 <_dtoa_r+0x30>
  40544c:	aa18      	add	r2, sp, #96	; 0x60
  40544e:	ab19      	add	r3, sp, #100	; 0x64
  405450:	9201      	str	r2, [sp, #4]
  405452:	9300      	str	r3, [sp, #0]
  405454:	4652      	mov	r2, sl
  405456:	465b      	mov	r3, fp
  405458:	4620      	mov	r0, r4
  40545a:	f001 ff7b 	bl	407354 <__d2b>
  40545e:	0d2b      	lsrs	r3, r5, #20
  405460:	4681      	mov	r9, r0
  405462:	d071      	beq.n	405548 <_dtoa_r+0x1a0>
  405464:	f3cb 0213 	ubfx	r2, fp, #0, #20
  405468:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  40546c:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40546e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  405472:	4650      	mov	r0, sl
  405474:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  405478:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40547c:	2200      	movs	r2, #0
  40547e:	4b78      	ldr	r3, [pc, #480]	; (405660 <_dtoa_r+0x2b8>)
  405480:	f002 fc6e 	bl	407d60 <__aeabi_dsub>
  405484:	a36c      	add	r3, pc, #432	; (adr r3, 405638 <_dtoa_r+0x290>)
  405486:	e9d3 2300 	ldrd	r2, r3, [r3]
  40548a:	f002 fe1d 	bl	4080c8 <__aeabi_dmul>
  40548e:	a36c      	add	r3, pc, #432	; (adr r3, 405640 <_dtoa_r+0x298>)
  405490:	e9d3 2300 	ldrd	r2, r3, [r3]
  405494:	f002 fc66 	bl	407d64 <__adddf3>
  405498:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40549c:	4630      	mov	r0, r6
  40549e:	f002 fdad 	bl	407ffc <__aeabi_i2d>
  4054a2:	a369      	add	r3, pc, #420	; (adr r3, 405648 <_dtoa_r+0x2a0>)
  4054a4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4054a8:	f002 fe0e 	bl	4080c8 <__aeabi_dmul>
  4054ac:	4602      	mov	r2, r0
  4054ae:	460b      	mov	r3, r1
  4054b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4054b4:	f002 fc56 	bl	407d64 <__adddf3>
  4054b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4054bc:	f003 f8b4 	bl	408628 <__aeabi_d2iz>
  4054c0:	2200      	movs	r2, #0
  4054c2:	9002      	str	r0, [sp, #8]
  4054c4:	2300      	movs	r3, #0
  4054c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4054ca:	f003 f86f 	bl	4085ac <__aeabi_dcmplt>
  4054ce:	2800      	cmp	r0, #0
  4054d0:	f040 8173 	bne.w	4057ba <_dtoa_r+0x412>
  4054d4:	9d02      	ldr	r5, [sp, #8]
  4054d6:	2d16      	cmp	r5, #22
  4054d8:	f200 815d 	bhi.w	405796 <_dtoa_r+0x3ee>
  4054dc:	4b61      	ldr	r3, [pc, #388]	; (405664 <_dtoa_r+0x2bc>)
  4054de:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  4054e2:	e9d3 0100 	ldrd	r0, r1, [r3]
  4054e6:	4652      	mov	r2, sl
  4054e8:	465b      	mov	r3, fp
  4054ea:	f003 f87d 	bl	4085e8 <__aeabi_dcmpgt>
  4054ee:	2800      	cmp	r0, #0
  4054f0:	f000 81c5 	beq.w	40587e <_dtoa_r+0x4d6>
  4054f4:	1e6b      	subs	r3, r5, #1
  4054f6:	9302      	str	r3, [sp, #8]
  4054f8:	2300      	movs	r3, #0
  4054fa:	930e      	str	r3, [sp, #56]	; 0x38
  4054fc:	1bbf      	subs	r7, r7, r6
  4054fe:	1e7b      	subs	r3, r7, #1
  405500:	9306      	str	r3, [sp, #24]
  405502:	f100 8154 	bmi.w	4057ae <_dtoa_r+0x406>
  405506:	2300      	movs	r3, #0
  405508:	9308      	str	r3, [sp, #32]
  40550a:	9b02      	ldr	r3, [sp, #8]
  40550c:	2b00      	cmp	r3, #0
  40550e:	f2c0 8145 	blt.w	40579c <_dtoa_r+0x3f4>
  405512:	9a06      	ldr	r2, [sp, #24]
  405514:	930d      	str	r3, [sp, #52]	; 0x34
  405516:	4611      	mov	r1, r2
  405518:	4419      	add	r1, r3
  40551a:	2300      	movs	r3, #0
  40551c:	9106      	str	r1, [sp, #24]
  40551e:	930c      	str	r3, [sp, #48]	; 0x30
  405520:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405522:	2b09      	cmp	r3, #9
  405524:	d82a      	bhi.n	40557c <_dtoa_r+0x1d4>
  405526:	2b05      	cmp	r3, #5
  405528:	f340 865b 	ble.w	4061e2 <_dtoa_r+0xe3a>
  40552c:	3b04      	subs	r3, #4
  40552e:	9324      	str	r3, [sp, #144]	; 0x90
  405530:	2500      	movs	r5, #0
  405532:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405534:	3b02      	subs	r3, #2
  405536:	2b03      	cmp	r3, #3
  405538:	f200 8642 	bhi.w	4061c0 <_dtoa_r+0xe18>
  40553c:	e8df f013 	tbh	[pc, r3, lsl #1]
  405540:	02c903d4 	.word	0x02c903d4
  405544:	046103df 	.word	0x046103df
  405548:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40554a:	9e19      	ldr	r6, [sp, #100]	; 0x64
  40554c:	443e      	add	r6, r7
  40554e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  405552:	2b20      	cmp	r3, #32
  405554:	f340 818e 	ble.w	405874 <_dtoa_r+0x4cc>
  405558:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40555c:	f206 4012 	addw	r0, r6, #1042	; 0x412
  405560:	409d      	lsls	r5, r3
  405562:	fa2a f000 	lsr.w	r0, sl, r0
  405566:	4328      	orrs	r0, r5
  405568:	f002 fd38 	bl	407fdc <__aeabi_ui2d>
  40556c:	2301      	movs	r3, #1
  40556e:	3e01      	subs	r6, #1
  405570:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  405574:	9314      	str	r3, [sp, #80]	; 0x50
  405576:	e781      	b.n	40547c <_dtoa_r+0xd4>
  405578:	483b      	ldr	r0, [pc, #236]	; (405668 <_dtoa_r+0x2c0>)
  40557a:	e743      	b.n	405404 <_dtoa_r+0x5c>
  40557c:	2100      	movs	r1, #0
  40557e:	6461      	str	r1, [r4, #68]	; 0x44
  405580:	4620      	mov	r0, r4
  405582:	9125      	str	r1, [sp, #148]	; 0x94
  405584:	f001 fc48 	bl	406e18 <_Balloc>
  405588:	f04f 33ff 	mov.w	r3, #4294967295
  40558c:	930a      	str	r3, [sp, #40]	; 0x28
  40558e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405590:	930f      	str	r3, [sp, #60]	; 0x3c
  405592:	2301      	movs	r3, #1
  405594:	9004      	str	r0, [sp, #16]
  405596:	6420      	str	r0, [r4, #64]	; 0x40
  405598:	9224      	str	r2, [sp, #144]	; 0x90
  40559a:	930b      	str	r3, [sp, #44]	; 0x2c
  40559c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40559e:	2b00      	cmp	r3, #0
  4055a0:	f2c0 80d9 	blt.w	405756 <_dtoa_r+0x3ae>
  4055a4:	9a02      	ldr	r2, [sp, #8]
  4055a6:	2a0e      	cmp	r2, #14
  4055a8:	f300 80d5 	bgt.w	405756 <_dtoa_r+0x3ae>
  4055ac:	4b2d      	ldr	r3, [pc, #180]	; (405664 <_dtoa_r+0x2bc>)
  4055ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4055b2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4055b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4055ba:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4055bc:	2b00      	cmp	r3, #0
  4055be:	f2c0 83ba 	blt.w	405d36 <_dtoa_r+0x98e>
  4055c2:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  4055c6:	4650      	mov	r0, sl
  4055c8:	462a      	mov	r2, r5
  4055ca:	4633      	mov	r3, r6
  4055cc:	4659      	mov	r1, fp
  4055ce:	f002 fea5 	bl	40831c <__aeabi_ddiv>
  4055d2:	f003 f829 	bl	408628 <__aeabi_d2iz>
  4055d6:	4680      	mov	r8, r0
  4055d8:	f002 fd10 	bl	407ffc <__aeabi_i2d>
  4055dc:	462a      	mov	r2, r5
  4055de:	4633      	mov	r3, r6
  4055e0:	f002 fd72 	bl	4080c8 <__aeabi_dmul>
  4055e4:	460b      	mov	r3, r1
  4055e6:	4602      	mov	r2, r0
  4055e8:	4659      	mov	r1, fp
  4055ea:	4650      	mov	r0, sl
  4055ec:	f002 fbb8 	bl	407d60 <__aeabi_dsub>
  4055f0:	9d04      	ldr	r5, [sp, #16]
  4055f2:	f108 0330 	add.w	r3, r8, #48	; 0x30
  4055f6:	702b      	strb	r3, [r5, #0]
  4055f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4055fa:	2b01      	cmp	r3, #1
  4055fc:	4606      	mov	r6, r0
  4055fe:	460f      	mov	r7, r1
  405600:	f105 0501 	add.w	r5, r5, #1
  405604:	d068      	beq.n	4056d8 <_dtoa_r+0x330>
  405606:	2200      	movs	r2, #0
  405608:	4b18      	ldr	r3, [pc, #96]	; (40566c <_dtoa_r+0x2c4>)
  40560a:	f002 fd5d 	bl	4080c8 <__aeabi_dmul>
  40560e:	2200      	movs	r2, #0
  405610:	2300      	movs	r3, #0
  405612:	4606      	mov	r6, r0
  405614:	460f      	mov	r7, r1
  405616:	f002 ffbf 	bl	408598 <__aeabi_dcmpeq>
  40561a:	2800      	cmp	r0, #0
  40561c:	f040 8088 	bne.w	405730 <_dtoa_r+0x388>
  405620:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  405624:	f04f 0a00 	mov.w	sl, #0
  405628:	f8df b040 	ldr.w	fp, [pc, #64]	; 40566c <_dtoa_r+0x2c4>
  40562c:	940c      	str	r4, [sp, #48]	; 0x30
  40562e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  405632:	e028      	b.n	405686 <_dtoa_r+0x2de>
  405634:	f3af 8000 	nop.w
  405638:	636f4361 	.word	0x636f4361
  40563c:	3fd287a7 	.word	0x3fd287a7
  405640:	8b60c8b3 	.word	0x8b60c8b3
  405644:	3fc68a28 	.word	0x3fc68a28
  405648:	509f79fb 	.word	0x509f79fb
  40564c:	3fd34413 	.word	0x3fd34413
  405650:	7ff00000 	.word	0x7ff00000
  405654:	00408ec9 	.word	0x00408ec9
  405658:	00409b8c 	.word	0x00409b8c
  40565c:	00409b98 	.word	0x00409b98
  405660:	3ff80000 	.word	0x3ff80000
  405664:	00409bd8 	.word	0x00409bd8
  405668:	00408ec8 	.word	0x00408ec8
  40566c:	40240000 	.word	0x40240000
  405670:	f002 fd2a 	bl	4080c8 <__aeabi_dmul>
  405674:	2200      	movs	r2, #0
  405676:	2300      	movs	r3, #0
  405678:	4606      	mov	r6, r0
  40567a:	460f      	mov	r7, r1
  40567c:	f002 ff8c 	bl	408598 <__aeabi_dcmpeq>
  405680:	2800      	cmp	r0, #0
  405682:	f040 83c1 	bne.w	405e08 <_dtoa_r+0xa60>
  405686:	4642      	mov	r2, r8
  405688:	464b      	mov	r3, r9
  40568a:	4630      	mov	r0, r6
  40568c:	4639      	mov	r1, r7
  40568e:	f002 fe45 	bl	40831c <__aeabi_ddiv>
  405692:	f002 ffc9 	bl	408628 <__aeabi_d2iz>
  405696:	4604      	mov	r4, r0
  405698:	f002 fcb0 	bl	407ffc <__aeabi_i2d>
  40569c:	4642      	mov	r2, r8
  40569e:	464b      	mov	r3, r9
  4056a0:	f002 fd12 	bl	4080c8 <__aeabi_dmul>
  4056a4:	4602      	mov	r2, r0
  4056a6:	460b      	mov	r3, r1
  4056a8:	4630      	mov	r0, r6
  4056aa:	4639      	mov	r1, r7
  4056ac:	f002 fb58 	bl	407d60 <__aeabi_dsub>
  4056b0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  4056b4:	9e04      	ldr	r6, [sp, #16]
  4056b6:	f805 eb01 	strb.w	lr, [r5], #1
  4056ba:	eba5 0e06 	sub.w	lr, r5, r6
  4056be:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4056c0:	45b6      	cmp	lr, r6
  4056c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4056c6:	4652      	mov	r2, sl
  4056c8:	465b      	mov	r3, fp
  4056ca:	d1d1      	bne.n	405670 <_dtoa_r+0x2c8>
  4056cc:	46a0      	mov	r8, r4
  4056ce:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4056d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4056d4:	4606      	mov	r6, r0
  4056d6:	460f      	mov	r7, r1
  4056d8:	4632      	mov	r2, r6
  4056da:	463b      	mov	r3, r7
  4056dc:	4630      	mov	r0, r6
  4056de:	4639      	mov	r1, r7
  4056e0:	f002 fb40 	bl	407d64 <__adddf3>
  4056e4:	4606      	mov	r6, r0
  4056e6:	460f      	mov	r7, r1
  4056e8:	4602      	mov	r2, r0
  4056ea:	460b      	mov	r3, r1
  4056ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4056f0:	f002 ff5c 	bl	4085ac <__aeabi_dcmplt>
  4056f4:	b948      	cbnz	r0, 40570a <_dtoa_r+0x362>
  4056f6:	4632      	mov	r2, r6
  4056f8:	463b      	mov	r3, r7
  4056fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4056fe:	f002 ff4b 	bl	408598 <__aeabi_dcmpeq>
  405702:	b1a8      	cbz	r0, 405730 <_dtoa_r+0x388>
  405704:	f018 0f01 	tst.w	r8, #1
  405708:	d012      	beq.n	405730 <_dtoa_r+0x388>
  40570a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40570e:	9a04      	ldr	r2, [sp, #16]
  405710:	1e6b      	subs	r3, r5, #1
  405712:	e004      	b.n	40571e <_dtoa_r+0x376>
  405714:	429a      	cmp	r2, r3
  405716:	f000 8401 	beq.w	405f1c <_dtoa_r+0xb74>
  40571a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40571e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  405722:	f103 0501 	add.w	r5, r3, #1
  405726:	d0f5      	beq.n	405714 <_dtoa_r+0x36c>
  405728:	f108 0801 	add.w	r8, r8, #1
  40572c:	f883 8000 	strb.w	r8, [r3]
  405730:	4649      	mov	r1, r9
  405732:	4620      	mov	r0, r4
  405734:	f001 fb96 	bl	406e64 <_Bfree>
  405738:	2200      	movs	r2, #0
  40573a:	9b02      	ldr	r3, [sp, #8]
  40573c:	702a      	strb	r2, [r5, #0]
  40573e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405740:	3301      	adds	r3, #1
  405742:	6013      	str	r3, [r2, #0]
  405744:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405746:	2b00      	cmp	r3, #0
  405748:	f000 839e 	beq.w	405e88 <_dtoa_r+0xae0>
  40574c:	9804      	ldr	r0, [sp, #16]
  40574e:	601d      	str	r5, [r3, #0]
  405750:	b01b      	add	sp, #108	; 0x6c
  405752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405756:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405758:	2a00      	cmp	r2, #0
  40575a:	d03e      	beq.n	4057da <_dtoa_r+0x432>
  40575c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40575e:	2a01      	cmp	r2, #1
  405760:	f340 8311 	ble.w	405d86 <_dtoa_r+0x9de>
  405764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405766:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405768:	1e5f      	subs	r7, r3, #1
  40576a:	42ba      	cmp	r2, r7
  40576c:	f2c0 838f 	blt.w	405e8e <_dtoa_r+0xae6>
  405770:	1bd7      	subs	r7, r2, r7
  405772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405774:	2b00      	cmp	r3, #0
  405776:	f2c0 848b 	blt.w	406090 <_dtoa_r+0xce8>
  40577a:	9d08      	ldr	r5, [sp, #32]
  40577c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40577e:	9a08      	ldr	r2, [sp, #32]
  405780:	441a      	add	r2, r3
  405782:	9208      	str	r2, [sp, #32]
  405784:	9a06      	ldr	r2, [sp, #24]
  405786:	2101      	movs	r1, #1
  405788:	441a      	add	r2, r3
  40578a:	4620      	mov	r0, r4
  40578c:	9206      	str	r2, [sp, #24]
  40578e:	f001 fc03 	bl	406f98 <__i2b>
  405792:	4606      	mov	r6, r0
  405794:	e024      	b.n	4057e0 <_dtoa_r+0x438>
  405796:	2301      	movs	r3, #1
  405798:	930e      	str	r3, [sp, #56]	; 0x38
  40579a:	e6af      	b.n	4054fc <_dtoa_r+0x154>
  40579c:	9a08      	ldr	r2, [sp, #32]
  40579e:	9b02      	ldr	r3, [sp, #8]
  4057a0:	1ad2      	subs	r2, r2, r3
  4057a2:	425b      	negs	r3, r3
  4057a4:	930c      	str	r3, [sp, #48]	; 0x30
  4057a6:	2300      	movs	r3, #0
  4057a8:	9208      	str	r2, [sp, #32]
  4057aa:	930d      	str	r3, [sp, #52]	; 0x34
  4057ac:	e6b8      	b.n	405520 <_dtoa_r+0x178>
  4057ae:	f1c7 0301 	rsb	r3, r7, #1
  4057b2:	9308      	str	r3, [sp, #32]
  4057b4:	2300      	movs	r3, #0
  4057b6:	9306      	str	r3, [sp, #24]
  4057b8:	e6a7      	b.n	40550a <_dtoa_r+0x162>
  4057ba:	9d02      	ldr	r5, [sp, #8]
  4057bc:	4628      	mov	r0, r5
  4057be:	f002 fc1d 	bl	407ffc <__aeabi_i2d>
  4057c2:	4602      	mov	r2, r0
  4057c4:	460b      	mov	r3, r1
  4057c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4057ca:	f002 fee5 	bl	408598 <__aeabi_dcmpeq>
  4057ce:	2800      	cmp	r0, #0
  4057d0:	f47f ae80 	bne.w	4054d4 <_dtoa_r+0x12c>
  4057d4:	1e6b      	subs	r3, r5, #1
  4057d6:	9302      	str	r3, [sp, #8]
  4057d8:	e67c      	b.n	4054d4 <_dtoa_r+0x12c>
  4057da:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4057dc:	9d08      	ldr	r5, [sp, #32]
  4057de:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  4057e0:	2d00      	cmp	r5, #0
  4057e2:	dd0c      	ble.n	4057fe <_dtoa_r+0x456>
  4057e4:	9906      	ldr	r1, [sp, #24]
  4057e6:	2900      	cmp	r1, #0
  4057e8:	460b      	mov	r3, r1
  4057ea:	dd08      	ble.n	4057fe <_dtoa_r+0x456>
  4057ec:	42a9      	cmp	r1, r5
  4057ee:	9a08      	ldr	r2, [sp, #32]
  4057f0:	bfa8      	it	ge
  4057f2:	462b      	movge	r3, r5
  4057f4:	1ad2      	subs	r2, r2, r3
  4057f6:	1aed      	subs	r5, r5, r3
  4057f8:	1acb      	subs	r3, r1, r3
  4057fa:	9208      	str	r2, [sp, #32]
  4057fc:	9306      	str	r3, [sp, #24]
  4057fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405800:	b1d3      	cbz	r3, 405838 <_dtoa_r+0x490>
  405802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405804:	2b00      	cmp	r3, #0
  405806:	f000 82b7 	beq.w	405d78 <_dtoa_r+0x9d0>
  40580a:	2f00      	cmp	r7, #0
  40580c:	dd10      	ble.n	405830 <_dtoa_r+0x488>
  40580e:	4631      	mov	r1, r6
  405810:	463a      	mov	r2, r7
  405812:	4620      	mov	r0, r4
  405814:	f001 fc5c 	bl	4070d0 <__pow5mult>
  405818:	464a      	mov	r2, r9
  40581a:	4601      	mov	r1, r0
  40581c:	4606      	mov	r6, r0
  40581e:	4620      	mov	r0, r4
  405820:	f001 fbc4 	bl	406fac <__multiply>
  405824:	4649      	mov	r1, r9
  405826:	4680      	mov	r8, r0
  405828:	4620      	mov	r0, r4
  40582a:	f001 fb1b 	bl	406e64 <_Bfree>
  40582e:	46c1      	mov	r9, r8
  405830:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405832:	1bda      	subs	r2, r3, r7
  405834:	f040 82a1 	bne.w	405d7a <_dtoa_r+0x9d2>
  405838:	2101      	movs	r1, #1
  40583a:	4620      	mov	r0, r4
  40583c:	f001 fbac 	bl	406f98 <__i2b>
  405840:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405842:	2b00      	cmp	r3, #0
  405844:	4680      	mov	r8, r0
  405846:	dd1c      	ble.n	405882 <_dtoa_r+0x4da>
  405848:	4601      	mov	r1, r0
  40584a:	461a      	mov	r2, r3
  40584c:	4620      	mov	r0, r4
  40584e:	f001 fc3f 	bl	4070d0 <__pow5mult>
  405852:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405854:	2b01      	cmp	r3, #1
  405856:	4680      	mov	r8, r0
  405858:	f340 8254 	ble.w	405d04 <_dtoa_r+0x95c>
  40585c:	2300      	movs	r3, #0
  40585e:	930c      	str	r3, [sp, #48]	; 0x30
  405860:	f8d8 3010 	ldr.w	r3, [r8, #16]
  405864:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  405868:	6918      	ldr	r0, [r3, #16]
  40586a:	f001 fb45 	bl	406ef8 <__hi0bits>
  40586e:	f1c0 0020 	rsb	r0, r0, #32
  405872:	e010      	b.n	405896 <_dtoa_r+0x4ee>
  405874:	f1c3 0520 	rsb	r5, r3, #32
  405878:	fa0a f005 	lsl.w	r0, sl, r5
  40587c:	e674      	b.n	405568 <_dtoa_r+0x1c0>
  40587e:	900e      	str	r0, [sp, #56]	; 0x38
  405880:	e63c      	b.n	4054fc <_dtoa_r+0x154>
  405882:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405884:	2b01      	cmp	r3, #1
  405886:	f340 8287 	ble.w	405d98 <_dtoa_r+0x9f0>
  40588a:	2300      	movs	r3, #0
  40588c:	930c      	str	r3, [sp, #48]	; 0x30
  40588e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405890:	2001      	movs	r0, #1
  405892:	2b00      	cmp	r3, #0
  405894:	d1e4      	bne.n	405860 <_dtoa_r+0x4b8>
  405896:	9a06      	ldr	r2, [sp, #24]
  405898:	4410      	add	r0, r2
  40589a:	f010 001f 	ands.w	r0, r0, #31
  40589e:	f000 80a1 	beq.w	4059e4 <_dtoa_r+0x63c>
  4058a2:	f1c0 0320 	rsb	r3, r0, #32
  4058a6:	2b04      	cmp	r3, #4
  4058a8:	f340 849e 	ble.w	4061e8 <_dtoa_r+0xe40>
  4058ac:	9b08      	ldr	r3, [sp, #32]
  4058ae:	f1c0 001c 	rsb	r0, r0, #28
  4058b2:	4403      	add	r3, r0
  4058b4:	9308      	str	r3, [sp, #32]
  4058b6:	4613      	mov	r3, r2
  4058b8:	4403      	add	r3, r0
  4058ba:	4405      	add	r5, r0
  4058bc:	9306      	str	r3, [sp, #24]
  4058be:	9b08      	ldr	r3, [sp, #32]
  4058c0:	2b00      	cmp	r3, #0
  4058c2:	dd05      	ble.n	4058d0 <_dtoa_r+0x528>
  4058c4:	4649      	mov	r1, r9
  4058c6:	461a      	mov	r2, r3
  4058c8:	4620      	mov	r0, r4
  4058ca:	f001 fc51 	bl	407170 <__lshift>
  4058ce:	4681      	mov	r9, r0
  4058d0:	9b06      	ldr	r3, [sp, #24]
  4058d2:	2b00      	cmp	r3, #0
  4058d4:	dd05      	ble.n	4058e2 <_dtoa_r+0x53a>
  4058d6:	4641      	mov	r1, r8
  4058d8:	461a      	mov	r2, r3
  4058da:	4620      	mov	r0, r4
  4058dc:	f001 fc48 	bl	407170 <__lshift>
  4058e0:	4680      	mov	r8, r0
  4058e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4058e4:	2b00      	cmp	r3, #0
  4058e6:	f040 8086 	bne.w	4059f6 <_dtoa_r+0x64e>
  4058ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4058ec:	2b00      	cmp	r3, #0
  4058ee:	f340 8266 	ble.w	405dbe <_dtoa_r+0xa16>
  4058f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4058f4:	2b00      	cmp	r3, #0
  4058f6:	f000 8098 	beq.w	405a2a <_dtoa_r+0x682>
  4058fa:	2d00      	cmp	r5, #0
  4058fc:	dd05      	ble.n	40590a <_dtoa_r+0x562>
  4058fe:	4631      	mov	r1, r6
  405900:	462a      	mov	r2, r5
  405902:	4620      	mov	r0, r4
  405904:	f001 fc34 	bl	407170 <__lshift>
  405908:	4606      	mov	r6, r0
  40590a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40590c:	2b00      	cmp	r3, #0
  40590e:	f040 8337 	bne.w	405f80 <_dtoa_r+0xbd8>
  405912:	9606      	str	r6, [sp, #24]
  405914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405916:	9a04      	ldr	r2, [sp, #16]
  405918:	f8dd b018 	ldr.w	fp, [sp, #24]
  40591c:	3b01      	subs	r3, #1
  40591e:	18d3      	adds	r3, r2, r3
  405920:	930b      	str	r3, [sp, #44]	; 0x2c
  405922:	f00a 0301 	and.w	r3, sl, #1
  405926:	930c      	str	r3, [sp, #48]	; 0x30
  405928:	4617      	mov	r7, r2
  40592a:	46c2      	mov	sl, r8
  40592c:	4651      	mov	r1, sl
  40592e:	4648      	mov	r0, r9
  405930:	f7ff fca4 	bl	40527c <quorem>
  405934:	4631      	mov	r1, r6
  405936:	4605      	mov	r5, r0
  405938:	4648      	mov	r0, r9
  40593a:	f001 fc6b 	bl	407214 <__mcmp>
  40593e:	465a      	mov	r2, fp
  405940:	900a      	str	r0, [sp, #40]	; 0x28
  405942:	4651      	mov	r1, sl
  405944:	4620      	mov	r0, r4
  405946:	f001 fc81 	bl	40724c <__mdiff>
  40594a:	68c2      	ldr	r2, [r0, #12]
  40594c:	4680      	mov	r8, r0
  40594e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  405952:	2a00      	cmp	r2, #0
  405954:	f040 822b 	bne.w	405dae <_dtoa_r+0xa06>
  405958:	4601      	mov	r1, r0
  40595a:	4648      	mov	r0, r9
  40595c:	9308      	str	r3, [sp, #32]
  40595e:	f001 fc59 	bl	407214 <__mcmp>
  405962:	4641      	mov	r1, r8
  405964:	9006      	str	r0, [sp, #24]
  405966:	4620      	mov	r0, r4
  405968:	f001 fa7c 	bl	406e64 <_Bfree>
  40596c:	9a06      	ldr	r2, [sp, #24]
  40596e:	9b08      	ldr	r3, [sp, #32]
  405970:	b932      	cbnz	r2, 405980 <_dtoa_r+0x5d8>
  405972:	9924      	ldr	r1, [sp, #144]	; 0x90
  405974:	b921      	cbnz	r1, 405980 <_dtoa_r+0x5d8>
  405976:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405978:	2a00      	cmp	r2, #0
  40597a:	f000 83ef 	beq.w	40615c <_dtoa_r+0xdb4>
  40597e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405980:	990a      	ldr	r1, [sp, #40]	; 0x28
  405982:	2900      	cmp	r1, #0
  405984:	f2c0 829f 	blt.w	405ec6 <_dtoa_r+0xb1e>
  405988:	d105      	bne.n	405996 <_dtoa_r+0x5ee>
  40598a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40598c:	b919      	cbnz	r1, 405996 <_dtoa_r+0x5ee>
  40598e:	990c      	ldr	r1, [sp, #48]	; 0x30
  405990:	2900      	cmp	r1, #0
  405992:	f000 8298 	beq.w	405ec6 <_dtoa_r+0xb1e>
  405996:	2a00      	cmp	r2, #0
  405998:	f300 8306 	bgt.w	405fa8 <_dtoa_r+0xc00>
  40599c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40599e:	703b      	strb	r3, [r7, #0]
  4059a0:	f107 0801 	add.w	r8, r7, #1
  4059a4:	4297      	cmp	r7, r2
  4059a6:	4645      	mov	r5, r8
  4059a8:	f000 830c 	beq.w	405fc4 <_dtoa_r+0xc1c>
  4059ac:	4649      	mov	r1, r9
  4059ae:	2300      	movs	r3, #0
  4059b0:	220a      	movs	r2, #10
  4059b2:	4620      	mov	r0, r4
  4059b4:	f001 fa60 	bl	406e78 <__multadd>
  4059b8:	455e      	cmp	r6, fp
  4059ba:	4681      	mov	r9, r0
  4059bc:	4631      	mov	r1, r6
  4059be:	f04f 0300 	mov.w	r3, #0
  4059c2:	f04f 020a 	mov.w	r2, #10
  4059c6:	4620      	mov	r0, r4
  4059c8:	f000 81eb 	beq.w	405da2 <_dtoa_r+0x9fa>
  4059cc:	f001 fa54 	bl	406e78 <__multadd>
  4059d0:	4659      	mov	r1, fp
  4059d2:	4606      	mov	r6, r0
  4059d4:	2300      	movs	r3, #0
  4059d6:	220a      	movs	r2, #10
  4059d8:	4620      	mov	r0, r4
  4059da:	f001 fa4d 	bl	406e78 <__multadd>
  4059de:	4647      	mov	r7, r8
  4059e0:	4683      	mov	fp, r0
  4059e2:	e7a3      	b.n	40592c <_dtoa_r+0x584>
  4059e4:	201c      	movs	r0, #28
  4059e6:	9b08      	ldr	r3, [sp, #32]
  4059e8:	4403      	add	r3, r0
  4059ea:	9308      	str	r3, [sp, #32]
  4059ec:	9b06      	ldr	r3, [sp, #24]
  4059ee:	4403      	add	r3, r0
  4059f0:	4405      	add	r5, r0
  4059f2:	9306      	str	r3, [sp, #24]
  4059f4:	e763      	b.n	4058be <_dtoa_r+0x516>
  4059f6:	4641      	mov	r1, r8
  4059f8:	4648      	mov	r0, r9
  4059fa:	f001 fc0b 	bl	407214 <__mcmp>
  4059fe:	2800      	cmp	r0, #0
  405a00:	f6bf af73 	bge.w	4058ea <_dtoa_r+0x542>
  405a04:	9f02      	ldr	r7, [sp, #8]
  405a06:	4649      	mov	r1, r9
  405a08:	2300      	movs	r3, #0
  405a0a:	220a      	movs	r2, #10
  405a0c:	4620      	mov	r0, r4
  405a0e:	3f01      	subs	r7, #1
  405a10:	9702      	str	r7, [sp, #8]
  405a12:	f001 fa31 	bl	406e78 <__multadd>
  405a16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405a18:	4681      	mov	r9, r0
  405a1a:	2b00      	cmp	r3, #0
  405a1c:	f040 83b6 	bne.w	40618c <_dtoa_r+0xde4>
  405a20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405a22:	2b00      	cmp	r3, #0
  405a24:	f340 83bf 	ble.w	4061a6 <_dtoa_r+0xdfe>
  405a28:	930a      	str	r3, [sp, #40]	; 0x28
  405a2a:	f8dd b010 	ldr.w	fp, [sp, #16]
  405a2e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405a30:	465d      	mov	r5, fp
  405a32:	e002      	b.n	405a3a <_dtoa_r+0x692>
  405a34:	f001 fa20 	bl	406e78 <__multadd>
  405a38:	4681      	mov	r9, r0
  405a3a:	4641      	mov	r1, r8
  405a3c:	4648      	mov	r0, r9
  405a3e:	f7ff fc1d 	bl	40527c <quorem>
  405a42:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  405a46:	f805 ab01 	strb.w	sl, [r5], #1
  405a4a:	eba5 030b 	sub.w	r3, r5, fp
  405a4e:	42bb      	cmp	r3, r7
  405a50:	f04f 020a 	mov.w	r2, #10
  405a54:	f04f 0300 	mov.w	r3, #0
  405a58:	4649      	mov	r1, r9
  405a5a:	4620      	mov	r0, r4
  405a5c:	dbea      	blt.n	405a34 <_dtoa_r+0x68c>
  405a5e:	9b04      	ldr	r3, [sp, #16]
  405a60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405a62:	2a01      	cmp	r2, #1
  405a64:	bfac      	ite	ge
  405a66:	189b      	addge	r3, r3, r2
  405a68:	3301      	addlt	r3, #1
  405a6a:	461d      	mov	r5, r3
  405a6c:	f04f 0b00 	mov.w	fp, #0
  405a70:	4649      	mov	r1, r9
  405a72:	2201      	movs	r2, #1
  405a74:	4620      	mov	r0, r4
  405a76:	f001 fb7b 	bl	407170 <__lshift>
  405a7a:	4641      	mov	r1, r8
  405a7c:	4681      	mov	r9, r0
  405a7e:	f001 fbc9 	bl	407214 <__mcmp>
  405a82:	2800      	cmp	r0, #0
  405a84:	f340 823d 	ble.w	405f02 <_dtoa_r+0xb5a>
  405a88:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  405a8c:	9904      	ldr	r1, [sp, #16]
  405a8e:	1e6b      	subs	r3, r5, #1
  405a90:	e004      	b.n	405a9c <_dtoa_r+0x6f4>
  405a92:	428b      	cmp	r3, r1
  405a94:	f000 81ae 	beq.w	405df4 <_dtoa_r+0xa4c>
  405a98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  405a9c:	2a39      	cmp	r2, #57	; 0x39
  405a9e:	f103 0501 	add.w	r5, r3, #1
  405aa2:	d0f6      	beq.n	405a92 <_dtoa_r+0x6ea>
  405aa4:	3201      	adds	r2, #1
  405aa6:	701a      	strb	r2, [r3, #0]
  405aa8:	4641      	mov	r1, r8
  405aaa:	4620      	mov	r0, r4
  405aac:	f001 f9da 	bl	406e64 <_Bfree>
  405ab0:	2e00      	cmp	r6, #0
  405ab2:	f43f ae3d 	beq.w	405730 <_dtoa_r+0x388>
  405ab6:	f1bb 0f00 	cmp.w	fp, #0
  405aba:	d005      	beq.n	405ac8 <_dtoa_r+0x720>
  405abc:	45b3      	cmp	fp, r6
  405abe:	d003      	beq.n	405ac8 <_dtoa_r+0x720>
  405ac0:	4659      	mov	r1, fp
  405ac2:	4620      	mov	r0, r4
  405ac4:	f001 f9ce 	bl	406e64 <_Bfree>
  405ac8:	4631      	mov	r1, r6
  405aca:	4620      	mov	r0, r4
  405acc:	f001 f9ca 	bl	406e64 <_Bfree>
  405ad0:	e62e      	b.n	405730 <_dtoa_r+0x388>
  405ad2:	2300      	movs	r3, #0
  405ad4:	930b      	str	r3, [sp, #44]	; 0x2c
  405ad6:	9b02      	ldr	r3, [sp, #8]
  405ad8:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405ada:	4413      	add	r3, r2
  405adc:	930f      	str	r3, [sp, #60]	; 0x3c
  405ade:	3301      	adds	r3, #1
  405ae0:	2b01      	cmp	r3, #1
  405ae2:	461f      	mov	r7, r3
  405ae4:	461e      	mov	r6, r3
  405ae6:	930a      	str	r3, [sp, #40]	; 0x28
  405ae8:	bfb8      	it	lt
  405aea:	2701      	movlt	r7, #1
  405aec:	2100      	movs	r1, #0
  405aee:	2f17      	cmp	r7, #23
  405af0:	6461      	str	r1, [r4, #68]	; 0x44
  405af2:	d90a      	bls.n	405b0a <_dtoa_r+0x762>
  405af4:	2201      	movs	r2, #1
  405af6:	2304      	movs	r3, #4
  405af8:	005b      	lsls	r3, r3, #1
  405afa:	f103 0014 	add.w	r0, r3, #20
  405afe:	4287      	cmp	r7, r0
  405b00:	4611      	mov	r1, r2
  405b02:	f102 0201 	add.w	r2, r2, #1
  405b06:	d2f7      	bcs.n	405af8 <_dtoa_r+0x750>
  405b08:	6461      	str	r1, [r4, #68]	; 0x44
  405b0a:	4620      	mov	r0, r4
  405b0c:	f001 f984 	bl	406e18 <_Balloc>
  405b10:	2e0e      	cmp	r6, #14
  405b12:	9004      	str	r0, [sp, #16]
  405b14:	6420      	str	r0, [r4, #64]	; 0x40
  405b16:	f63f ad41 	bhi.w	40559c <_dtoa_r+0x1f4>
  405b1a:	2d00      	cmp	r5, #0
  405b1c:	f43f ad3e 	beq.w	40559c <_dtoa_r+0x1f4>
  405b20:	9902      	ldr	r1, [sp, #8]
  405b22:	2900      	cmp	r1, #0
  405b24:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  405b28:	f340 8202 	ble.w	405f30 <_dtoa_r+0xb88>
  405b2c:	4bb8      	ldr	r3, [pc, #736]	; (405e10 <_dtoa_r+0xa68>)
  405b2e:	f001 020f 	and.w	r2, r1, #15
  405b32:	110d      	asrs	r5, r1, #4
  405b34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405b38:	06e9      	lsls	r1, r5, #27
  405b3a:	e9d3 6700 	ldrd	r6, r7, [r3]
  405b3e:	f140 81ae 	bpl.w	405e9e <_dtoa_r+0xaf6>
  405b42:	4bb4      	ldr	r3, [pc, #720]	; (405e14 <_dtoa_r+0xa6c>)
  405b44:	4650      	mov	r0, sl
  405b46:	4659      	mov	r1, fp
  405b48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  405b4c:	f002 fbe6 	bl	40831c <__aeabi_ddiv>
  405b50:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  405b54:	f005 050f 	and.w	r5, r5, #15
  405b58:	f04f 0a03 	mov.w	sl, #3
  405b5c:	b18d      	cbz	r5, 405b82 <_dtoa_r+0x7da>
  405b5e:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 405e14 <_dtoa_r+0xa6c>
  405b62:	07ea      	lsls	r2, r5, #31
  405b64:	d509      	bpl.n	405b7a <_dtoa_r+0x7d2>
  405b66:	4630      	mov	r0, r6
  405b68:	4639      	mov	r1, r7
  405b6a:	e9d8 2300 	ldrd	r2, r3, [r8]
  405b6e:	f002 faab 	bl	4080c8 <__aeabi_dmul>
  405b72:	f10a 0a01 	add.w	sl, sl, #1
  405b76:	4606      	mov	r6, r0
  405b78:	460f      	mov	r7, r1
  405b7a:	106d      	asrs	r5, r5, #1
  405b7c:	f108 0808 	add.w	r8, r8, #8
  405b80:	d1ef      	bne.n	405b62 <_dtoa_r+0x7ba>
  405b82:	463b      	mov	r3, r7
  405b84:	4632      	mov	r2, r6
  405b86:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  405b8a:	f002 fbc7 	bl	40831c <__aeabi_ddiv>
  405b8e:	4607      	mov	r7, r0
  405b90:	4688      	mov	r8, r1
  405b92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405b94:	b143      	cbz	r3, 405ba8 <_dtoa_r+0x800>
  405b96:	2200      	movs	r2, #0
  405b98:	4b9f      	ldr	r3, [pc, #636]	; (405e18 <_dtoa_r+0xa70>)
  405b9a:	4638      	mov	r0, r7
  405b9c:	4641      	mov	r1, r8
  405b9e:	f002 fd05 	bl	4085ac <__aeabi_dcmplt>
  405ba2:	2800      	cmp	r0, #0
  405ba4:	f040 8286 	bne.w	4060b4 <_dtoa_r+0xd0c>
  405ba8:	4650      	mov	r0, sl
  405baa:	f002 fa27 	bl	407ffc <__aeabi_i2d>
  405bae:	463a      	mov	r2, r7
  405bb0:	4643      	mov	r3, r8
  405bb2:	f002 fa89 	bl	4080c8 <__aeabi_dmul>
  405bb6:	4b99      	ldr	r3, [pc, #612]	; (405e1c <_dtoa_r+0xa74>)
  405bb8:	2200      	movs	r2, #0
  405bba:	f002 f8d3 	bl	407d64 <__adddf3>
  405bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405bc0:	4605      	mov	r5, r0
  405bc2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405bc6:	2b00      	cmp	r3, #0
  405bc8:	f000 813e 	beq.w	405e48 <_dtoa_r+0xaa0>
  405bcc:	9b02      	ldr	r3, [sp, #8]
  405bce:	9315      	str	r3, [sp, #84]	; 0x54
  405bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405bd2:	9312      	str	r3, [sp, #72]	; 0x48
  405bd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405bd6:	2b00      	cmp	r3, #0
  405bd8:	f000 81fa 	beq.w	405fd0 <_dtoa_r+0xc28>
  405bdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405bde:	4b8c      	ldr	r3, [pc, #560]	; (405e10 <_dtoa_r+0xa68>)
  405be0:	498f      	ldr	r1, [pc, #572]	; (405e20 <_dtoa_r+0xa78>)
  405be2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405be6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  405bea:	2000      	movs	r0, #0
  405bec:	f002 fb96 	bl	40831c <__aeabi_ddiv>
  405bf0:	462a      	mov	r2, r5
  405bf2:	4633      	mov	r3, r6
  405bf4:	f002 f8b4 	bl	407d60 <__aeabi_dsub>
  405bf8:	4682      	mov	sl, r0
  405bfa:	468b      	mov	fp, r1
  405bfc:	4638      	mov	r0, r7
  405bfe:	4641      	mov	r1, r8
  405c00:	f002 fd12 	bl	408628 <__aeabi_d2iz>
  405c04:	4605      	mov	r5, r0
  405c06:	f002 f9f9 	bl	407ffc <__aeabi_i2d>
  405c0a:	4602      	mov	r2, r0
  405c0c:	460b      	mov	r3, r1
  405c0e:	4638      	mov	r0, r7
  405c10:	4641      	mov	r1, r8
  405c12:	f002 f8a5 	bl	407d60 <__aeabi_dsub>
  405c16:	3530      	adds	r5, #48	; 0x30
  405c18:	fa5f f885 	uxtb.w	r8, r5
  405c1c:	9d04      	ldr	r5, [sp, #16]
  405c1e:	4606      	mov	r6, r0
  405c20:	460f      	mov	r7, r1
  405c22:	f885 8000 	strb.w	r8, [r5]
  405c26:	4602      	mov	r2, r0
  405c28:	460b      	mov	r3, r1
  405c2a:	4650      	mov	r0, sl
  405c2c:	4659      	mov	r1, fp
  405c2e:	3501      	adds	r5, #1
  405c30:	f002 fcda 	bl	4085e8 <__aeabi_dcmpgt>
  405c34:	2800      	cmp	r0, #0
  405c36:	d154      	bne.n	405ce2 <_dtoa_r+0x93a>
  405c38:	4632      	mov	r2, r6
  405c3a:	463b      	mov	r3, r7
  405c3c:	2000      	movs	r0, #0
  405c3e:	4976      	ldr	r1, [pc, #472]	; (405e18 <_dtoa_r+0xa70>)
  405c40:	f002 f88e 	bl	407d60 <__aeabi_dsub>
  405c44:	4602      	mov	r2, r0
  405c46:	460b      	mov	r3, r1
  405c48:	4650      	mov	r0, sl
  405c4a:	4659      	mov	r1, fp
  405c4c:	f002 fccc 	bl	4085e8 <__aeabi_dcmpgt>
  405c50:	2800      	cmp	r0, #0
  405c52:	f040 8270 	bne.w	406136 <_dtoa_r+0xd8e>
  405c56:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405c58:	2a01      	cmp	r2, #1
  405c5a:	f000 8111 	beq.w	405e80 <_dtoa_r+0xad8>
  405c5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405c60:	9a04      	ldr	r2, [sp, #16]
  405c62:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  405c66:	4413      	add	r3, r2
  405c68:	4699      	mov	r9, r3
  405c6a:	e00d      	b.n	405c88 <_dtoa_r+0x8e0>
  405c6c:	2000      	movs	r0, #0
  405c6e:	496a      	ldr	r1, [pc, #424]	; (405e18 <_dtoa_r+0xa70>)
  405c70:	f002 f876 	bl	407d60 <__aeabi_dsub>
  405c74:	4652      	mov	r2, sl
  405c76:	465b      	mov	r3, fp
  405c78:	f002 fc98 	bl	4085ac <__aeabi_dcmplt>
  405c7c:	2800      	cmp	r0, #0
  405c7e:	f040 8258 	bne.w	406132 <_dtoa_r+0xd8a>
  405c82:	454d      	cmp	r5, r9
  405c84:	f000 80fa 	beq.w	405e7c <_dtoa_r+0xad4>
  405c88:	4650      	mov	r0, sl
  405c8a:	4659      	mov	r1, fp
  405c8c:	2200      	movs	r2, #0
  405c8e:	4b65      	ldr	r3, [pc, #404]	; (405e24 <_dtoa_r+0xa7c>)
  405c90:	f002 fa1a 	bl	4080c8 <__aeabi_dmul>
  405c94:	2200      	movs	r2, #0
  405c96:	4b63      	ldr	r3, [pc, #396]	; (405e24 <_dtoa_r+0xa7c>)
  405c98:	4682      	mov	sl, r0
  405c9a:	468b      	mov	fp, r1
  405c9c:	4630      	mov	r0, r6
  405c9e:	4639      	mov	r1, r7
  405ca0:	f002 fa12 	bl	4080c8 <__aeabi_dmul>
  405ca4:	460f      	mov	r7, r1
  405ca6:	4606      	mov	r6, r0
  405ca8:	f002 fcbe 	bl	408628 <__aeabi_d2iz>
  405cac:	4680      	mov	r8, r0
  405cae:	f002 f9a5 	bl	407ffc <__aeabi_i2d>
  405cb2:	4602      	mov	r2, r0
  405cb4:	460b      	mov	r3, r1
  405cb6:	4630      	mov	r0, r6
  405cb8:	4639      	mov	r1, r7
  405cba:	f002 f851 	bl	407d60 <__aeabi_dsub>
  405cbe:	f108 0830 	add.w	r8, r8, #48	; 0x30
  405cc2:	fa5f f888 	uxtb.w	r8, r8
  405cc6:	4652      	mov	r2, sl
  405cc8:	465b      	mov	r3, fp
  405cca:	f805 8b01 	strb.w	r8, [r5], #1
  405cce:	4606      	mov	r6, r0
  405cd0:	460f      	mov	r7, r1
  405cd2:	f002 fc6b 	bl	4085ac <__aeabi_dcmplt>
  405cd6:	4632      	mov	r2, r6
  405cd8:	463b      	mov	r3, r7
  405cda:	2800      	cmp	r0, #0
  405cdc:	d0c6      	beq.n	405c6c <_dtoa_r+0x8c4>
  405cde:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405ce2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405ce4:	9302      	str	r3, [sp, #8]
  405ce6:	e523      	b.n	405730 <_dtoa_r+0x388>
  405ce8:	2300      	movs	r3, #0
  405cea:	930b      	str	r3, [sp, #44]	; 0x2c
  405cec:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405cee:	2b00      	cmp	r3, #0
  405cf0:	f340 80dc 	ble.w	405eac <_dtoa_r+0xb04>
  405cf4:	461f      	mov	r7, r3
  405cf6:	461e      	mov	r6, r3
  405cf8:	930f      	str	r3, [sp, #60]	; 0x3c
  405cfa:	930a      	str	r3, [sp, #40]	; 0x28
  405cfc:	e6f6      	b.n	405aec <_dtoa_r+0x744>
  405cfe:	2301      	movs	r3, #1
  405d00:	930b      	str	r3, [sp, #44]	; 0x2c
  405d02:	e7f3      	b.n	405cec <_dtoa_r+0x944>
  405d04:	f1ba 0f00 	cmp.w	sl, #0
  405d08:	f47f ada8 	bne.w	40585c <_dtoa_r+0x4b4>
  405d0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  405d10:	2b00      	cmp	r3, #0
  405d12:	f47f adba 	bne.w	40588a <_dtoa_r+0x4e2>
  405d16:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  405d1a:	0d3f      	lsrs	r7, r7, #20
  405d1c:	053f      	lsls	r7, r7, #20
  405d1e:	2f00      	cmp	r7, #0
  405d20:	f000 820d 	beq.w	40613e <_dtoa_r+0xd96>
  405d24:	9b08      	ldr	r3, [sp, #32]
  405d26:	3301      	adds	r3, #1
  405d28:	9308      	str	r3, [sp, #32]
  405d2a:	9b06      	ldr	r3, [sp, #24]
  405d2c:	3301      	adds	r3, #1
  405d2e:	9306      	str	r3, [sp, #24]
  405d30:	2301      	movs	r3, #1
  405d32:	930c      	str	r3, [sp, #48]	; 0x30
  405d34:	e5ab      	b.n	40588e <_dtoa_r+0x4e6>
  405d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405d38:	2b00      	cmp	r3, #0
  405d3a:	f73f ac42 	bgt.w	4055c2 <_dtoa_r+0x21a>
  405d3e:	f040 8221 	bne.w	406184 <_dtoa_r+0xddc>
  405d42:	2200      	movs	r2, #0
  405d44:	4b38      	ldr	r3, [pc, #224]	; (405e28 <_dtoa_r+0xa80>)
  405d46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405d4a:	f002 f9bd 	bl	4080c8 <__aeabi_dmul>
  405d4e:	4652      	mov	r2, sl
  405d50:	465b      	mov	r3, fp
  405d52:	f002 fc3f 	bl	4085d4 <__aeabi_dcmpge>
  405d56:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  405d5a:	4646      	mov	r6, r8
  405d5c:	2800      	cmp	r0, #0
  405d5e:	d041      	beq.n	405de4 <_dtoa_r+0xa3c>
  405d60:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405d62:	9d04      	ldr	r5, [sp, #16]
  405d64:	43db      	mvns	r3, r3
  405d66:	9302      	str	r3, [sp, #8]
  405d68:	4641      	mov	r1, r8
  405d6a:	4620      	mov	r0, r4
  405d6c:	f001 f87a 	bl	406e64 <_Bfree>
  405d70:	2e00      	cmp	r6, #0
  405d72:	f43f acdd 	beq.w	405730 <_dtoa_r+0x388>
  405d76:	e6a7      	b.n	405ac8 <_dtoa_r+0x720>
  405d78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405d7a:	4649      	mov	r1, r9
  405d7c:	4620      	mov	r0, r4
  405d7e:	f001 f9a7 	bl	4070d0 <__pow5mult>
  405d82:	4681      	mov	r9, r0
  405d84:	e558      	b.n	405838 <_dtoa_r+0x490>
  405d86:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405d88:	2a00      	cmp	r2, #0
  405d8a:	f000 8187 	beq.w	40609c <_dtoa_r+0xcf4>
  405d8e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  405d92:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405d94:	9d08      	ldr	r5, [sp, #32]
  405d96:	e4f2      	b.n	40577e <_dtoa_r+0x3d6>
  405d98:	f1ba 0f00 	cmp.w	sl, #0
  405d9c:	f47f ad75 	bne.w	40588a <_dtoa_r+0x4e2>
  405da0:	e7b4      	b.n	405d0c <_dtoa_r+0x964>
  405da2:	f001 f869 	bl	406e78 <__multadd>
  405da6:	4647      	mov	r7, r8
  405da8:	4606      	mov	r6, r0
  405daa:	4683      	mov	fp, r0
  405dac:	e5be      	b.n	40592c <_dtoa_r+0x584>
  405dae:	4601      	mov	r1, r0
  405db0:	4620      	mov	r0, r4
  405db2:	9306      	str	r3, [sp, #24]
  405db4:	f001 f856 	bl	406e64 <_Bfree>
  405db8:	2201      	movs	r2, #1
  405dba:	9b06      	ldr	r3, [sp, #24]
  405dbc:	e5e0      	b.n	405980 <_dtoa_r+0x5d8>
  405dbe:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405dc0:	2b02      	cmp	r3, #2
  405dc2:	f77f ad96 	ble.w	4058f2 <_dtoa_r+0x54a>
  405dc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405dc8:	2b00      	cmp	r3, #0
  405dca:	d1c9      	bne.n	405d60 <_dtoa_r+0x9b8>
  405dcc:	4641      	mov	r1, r8
  405dce:	2205      	movs	r2, #5
  405dd0:	4620      	mov	r0, r4
  405dd2:	f001 f851 	bl	406e78 <__multadd>
  405dd6:	4601      	mov	r1, r0
  405dd8:	4680      	mov	r8, r0
  405dda:	4648      	mov	r0, r9
  405ddc:	f001 fa1a 	bl	407214 <__mcmp>
  405de0:	2800      	cmp	r0, #0
  405de2:	ddbd      	ble.n	405d60 <_dtoa_r+0x9b8>
  405de4:	9a02      	ldr	r2, [sp, #8]
  405de6:	9904      	ldr	r1, [sp, #16]
  405de8:	2331      	movs	r3, #49	; 0x31
  405dea:	3201      	adds	r2, #1
  405dec:	9202      	str	r2, [sp, #8]
  405dee:	700b      	strb	r3, [r1, #0]
  405df0:	1c4d      	adds	r5, r1, #1
  405df2:	e7b9      	b.n	405d68 <_dtoa_r+0x9c0>
  405df4:	9a02      	ldr	r2, [sp, #8]
  405df6:	3201      	adds	r2, #1
  405df8:	9202      	str	r2, [sp, #8]
  405dfa:	9a04      	ldr	r2, [sp, #16]
  405dfc:	2331      	movs	r3, #49	; 0x31
  405dfe:	7013      	strb	r3, [r2, #0]
  405e00:	e652      	b.n	405aa8 <_dtoa_r+0x700>
  405e02:	2301      	movs	r3, #1
  405e04:	930b      	str	r3, [sp, #44]	; 0x2c
  405e06:	e666      	b.n	405ad6 <_dtoa_r+0x72e>
  405e08:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  405e0c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405e0e:	e48f      	b.n	405730 <_dtoa_r+0x388>
  405e10:	00409bd8 	.word	0x00409bd8
  405e14:	00409bb0 	.word	0x00409bb0
  405e18:	3ff00000 	.word	0x3ff00000
  405e1c:	401c0000 	.word	0x401c0000
  405e20:	3fe00000 	.word	0x3fe00000
  405e24:	40240000 	.word	0x40240000
  405e28:	40140000 	.word	0x40140000
  405e2c:	4650      	mov	r0, sl
  405e2e:	f002 f8e5 	bl	407ffc <__aeabi_i2d>
  405e32:	463a      	mov	r2, r7
  405e34:	4643      	mov	r3, r8
  405e36:	f002 f947 	bl	4080c8 <__aeabi_dmul>
  405e3a:	2200      	movs	r2, #0
  405e3c:	4bc1      	ldr	r3, [pc, #772]	; (406144 <_dtoa_r+0xd9c>)
  405e3e:	f001 ff91 	bl	407d64 <__adddf3>
  405e42:	4605      	mov	r5, r0
  405e44:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405e48:	4641      	mov	r1, r8
  405e4a:	2200      	movs	r2, #0
  405e4c:	4bbe      	ldr	r3, [pc, #760]	; (406148 <_dtoa_r+0xda0>)
  405e4e:	4638      	mov	r0, r7
  405e50:	f001 ff86 	bl	407d60 <__aeabi_dsub>
  405e54:	462a      	mov	r2, r5
  405e56:	4633      	mov	r3, r6
  405e58:	4682      	mov	sl, r0
  405e5a:	468b      	mov	fp, r1
  405e5c:	f002 fbc4 	bl	4085e8 <__aeabi_dcmpgt>
  405e60:	4680      	mov	r8, r0
  405e62:	2800      	cmp	r0, #0
  405e64:	f040 8110 	bne.w	406088 <_dtoa_r+0xce0>
  405e68:	462a      	mov	r2, r5
  405e6a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  405e6e:	4650      	mov	r0, sl
  405e70:	4659      	mov	r1, fp
  405e72:	f002 fb9b 	bl	4085ac <__aeabi_dcmplt>
  405e76:	b118      	cbz	r0, 405e80 <_dtoa_r+0xad8>
  405e78:	4646      	mov	r6, r8
  405e7a:	e771      	b.n	405d60 <_dtoa_r+0x9b8>
  405e7c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405e80:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  405e84:	f7ff bb8a 	b.w	40559c <_dtoa_r+0x1f4>
  405e88:	9804      	ldr	r0, [sp, #16]
  405e8a:	f7ff babb 	b.w	405404 <_dtoa_r+0x5c>
  405e8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405e90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405e92:	970c      	str	r7, [sp, #48]	; 0x30
  405e94:	1afb      	subs	r3, r7, r3
  405e96:	441a      	add	r2, r3
  405e98:	920d      	str	r2, [sp, #52]	; 0x34
  405e9a:	2700      	movs	r7, #0
  405e9c:	e469      	b.n	405772 <_dtoa_r+0x3ca>
  405e9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  405ea2:	f04f 0a02 	mov.w	sl, #2
  405ea6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  405eaa:	e657      	b.n	405b5c <_dtoa_r+0x7b4>
  405eac:	2100      	movs	r1, #0
  405eae:	2301      	movs	r3, #1
  405eb0:	6461      	str	r1, [r4, #68]	; 0x44
  405eb2:	4620      	mov	r0, r4
  405eb4:	9325      	str	r3, [sp, #148]	; 0x94
  405eb6:	f000 ffaf 	bl	406e18 <_Balloc>
  405eba:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405ebc:	9004      	str	r0, [sp, #16]
  405ebe:	6420      	str	r0, [r4, #64]	; 0x40
  405ec0:	930a      	str	r3, [sp, #40]	; 0x28
  405ec2:	930f      	str	r3, [sp, #60]	; 0x3c
  405ec4:	e629      	b.n	405b1a <_dtoa_r+0x772>
  405ec6:	2a00      	cmp	r2, #0
  405ec8:	46d0      	mov	r8, sl
  405eca:	f8cd b018 	str.w	fp, [sp, #24]
  405ece:	469a      	mov	sl, r3
  405ed0:	dd11      	ble.n	405ef6 <_dtoa_r+0xb4e>
  405ed2:	4649      	mov	r1, r9
  405ed4:	2201      	movs	r2, #1
  405ed6:	4620      	mov	r0, r4
  405ed8:	f001 f94a 	bl	407170 <__lshift>
  405edc:	4641      	mov	r1, r8
  405ede:	4681      	mov	r9, r0
  405ee0:	f001 f998 	bl	407214 <__mcmp>
  405ee4:	2800      	cmp	r0, #0
  405ee6:	f340 8146 	ble.w	406176 <_dtoa_r+0xdce>
  405eea:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  405eee:	f000 8106 	beq.w	4060fe <_dtoa_r+0xd56>
  405ef2:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  405ef6:	46b3      	mov	fp, r6
  405ef8:	f887 a000 	strb.w	sl, [r7]
  405efc:	1c7d      	adds	r5, r7, #1
  405efe:	9e06      	ldr	r6, [sp, #24]
  405f00:	e5d2      	b.n	405aa8 <_dtoa_r+0x700>
  405f02:	d104      	bne.n	405f0e <_dtoa_r+0xb66>
  405f04:	f01a 0f01 	tst.w	sl, #1
  405f08:	d001      	beq.n	405f0e <_dtoa_r+0xb66>
  405f0a:	e5bd      	b.n	405a88 <_dtoa_r+0x6e0>
  405f0c:	4615      	mov	r5, r2
  405f0e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  405f12:	2b30      	cmp	r3, #48	; 0x30
  405f14:	f105 32ff 	add.w	r2, r5, #4294967295
  405f18:	d0f8      	beq.n	405f0c <_dtoa_r+0xb64>
  405f1a:	e5c5      	b.n	405aa8 <_dtoa_r+0x700>
  405f1c:	9904      	ldr	r1, [sp, #16]
  405f1e:	2230      	movs	r2, #48	; 0x30
  405f20:	700a      	strb	r2, [r1, #0]
  405f22:	9a02      	ldr	r2, [sp, #8]
  405f24:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405f28:	3201      	adds	r2, #1
  405f2a:	9202      	str	r2, [sp, #8]
  405f2c:	f7ff bbfc 	b.w	405728 <_dtoa_r+0x380>
  405f30:	f000 80bb 	beq.w	4060aa <_dtoa_r+0xd02>
  405f34:	9b02      	ldr	r3, [sp, #8]
  405f36:	425d      	negs	r5, r3
  405f38:	4b84      	ldr	r3, [pc, #528]	; (40614c <_dtoa_r+0xda4>)
  405f3a:	f005 020f 	and.w	r2, r5, #15
  405f3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405f42:	e9d3 2300 	ldrd	r2, r3, [r3]
  405f46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  405f4a:	f002 f8bd 	bl	4080c8 <__aeabi_dmul>
  405f4e:	112d      	asrs	r5, r5, #4
  405f50:	4607      	mov	r7, r0
  405f52:	4688      	mov	r8, r1
  405f54:	f000 812c 	beq.w	4061b0 <_dtoa_r+0xe08>
  405f58:	4e7d      	ldr	r6, [pc, #500]	; (406150 <_dtoa_r+0xda8>)
  405f5a:	f04f 0a02 	mov.w	sl, #2
  405f5e:	07eb      	lsls	r3, r5, #31
  405f60:	d509      	bpl.n	405f76 <_dtoa_r+0xbce>
  405f62:	4638      	mov	r0, r7
  405f64:	4641      	mov	r1, r8
  405f66:	e9d6 2300 	ldrd	r2, r3, [r6]
  405f6a:	f002 f8ad 	bl	4080c8 <__aeabi_dmul>
  405f6e:	f10a 0a01 	add.w	sl, sl, #1
  405f72:	4607      	mov	r7, r0
  405f74:	4688      	mov	r8, r1
  405f76:	106d      	asrs	r5, r5, #1
  405f78:	f106 0608 	add.w	r6, r6, #8
  405f7c:	d1ef      	bne.n	405f5e <_dtoa_r+0xbb6>
  405f7e:	e608      	b.n	405b92 <_dtoa_r+0x7ea>
  405f80:	6871      	ldr	r1, [r6, #4]
  405f82:	4620      	mov	r0, r4
  405f84:	f000 ff48 	bl	406e18 <_Balloc>
  405f88:	6933      	ldr	r3, [r6, #16]
  405f8a:	3302      	adds	r3, #2
  405f8c:	009a      	lsls	r2, r3, #2
  405f8e:	4605      	mov	r5, r0
  405f90:	f106 010c 	add.w	r1, r6, #12
  405f94:	300c      	adds	r0, #12
  405f96:	f7fc fd51 	bl	402a3c <memcpy>
  405f9a:	4629      	mov	r1, r5
  405f9c:	2201      	movs	r2, #1
  405f9e:	4620      	mov	r0, r4
  405fa0:	f001 f8e6 	bl	407170 <__lshift>
  405fa4:	9006      	str	r0, [sp, #24]
  405fa6:	e4b5      	b.n	405914 <_dtoa_r+0x56c>
  405fa8:	2b39      	cmp	r3, #57	; 0x39
  405faa:	f8cd b018 	str.w	fp, [sp, #24]
  405fae:	46d0      	mov	r8, sl
  405fb0:	f000 80a5 	beq.w	4060fe <_dtoa_r+0xd56>
  405fb4:	f103 0a01 	add.w	sl, r3, #1
  405fb8:	46b3      	mov	fp, r6
  405fba:	f887 a000 	strb.w	sl, [r7]
  405fbe:	1c7d      	adds	r5, r7, #1
  405fc0:	9e06      	ldr	r6, [sp, #24]
  405fc2:	e571      	b.n	405aa8 <_dtoa_r+0x700>
  405fc4:	465a      	mov	r2, fp
  405fc6:	46d0      	mov	r8, sl
  405fc8:	46b3      	mov	fp, r6
  405fca:	469a      	mov	sl, r3
  405fcc:	4616      	mov	r6, r2
  405fce:	e54f      	b.n	405a70 <_dtoa_r+0x6c8>
  405fd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405fd2:	495e      	ldr	r1, [pc, #376]	; (40614c <_dtoa_r+0xda4>)
  405fd4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  405fd8:	462a      	mov	r2, r5
  405fda:	4633      	mov	r3, r6
  405fdc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  405fe0:	f002 f872 	bl	4080c8 <__aeabi_dmul>
  405fe4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  405fe8:	4638      	mov	r0, r7
  405fea:	4641      	mov	r1, r8
  405fec:	f002 fb1c 	bl	408628 <__aeabi_d2iz>
  405ff0:	4605      	mov	r5, r0
  405ff2:	f002 f803 	bl	407ffc <__aeabi_i2d>
  405ff6:	460b      	mov	r3, r1
  405ff8:	4602      	mov	r2, r0
  405ffa:	4641      	mov	r1, r8
  405ffc:	4638      	mov	r0, r7
  405ffe:	f001 feaf 	bl	407d60 <__aeabi_dsub>
  406002:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406004:	460f      	mov	r7, r1
  406006:	9904      	ldr	r1, [sp, #16]
  406008:	3530      	adds	r5, #48	; 0x30
  40600a:	2b01      	cmp	r3, #1
  40600c:	700d      	strb	r5, [r1, #0]
  40600e:	4606      	mov	r6, r0
  406010:	f101 0501 	add.w	r5, r1, #1
  406014:	d026      	beq.n	406064 <_dtoa_r+0xcbc>
  406016:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406018:	9a04      	ldr	r2, [sp, #16]
  40601a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 406158 <_dtoa_r+0xdb0>
  40601e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  406022:	4413      	add	r3, r2
  406024:	f04f 0a00 	mov.w	sl, #0
  406028:	4699      	mov	r9, r3
  40602a:	4652      	mov	r2, sl
  40602c:	465b      	mov	r3, fp
  40602e:	4630      	mov	r0, r6
  406030:	4639      	mov	r1, r7
  406032:	f002 f849 	bl	4080c8 <__aeabi_dmul>
  406036:	460f      	mov	r7, r1
  406038:	4606      	mov	r6, r0
  40603a:	f002 faf5 	bl	408628 <__aeabi_d2iz>
  40603e:	4680      	mov	r8, r0
  406040:	f001 ffdc 	bl	407ffc <__aeabi_i2d>
  406044:	f108 0830 	add.w	r8, r8, #48	; 0x30
  406048:	4602      	mov	r2, r0
  40604a:	460b      	mov	r3, r1
  40604c:	4630      	mov	r0, r6
  40604e:	4639      	mov	r1, r7
  406050:	f001 fe86 	bl	407d60 <__aeabi_dsub>
  406054:	f805 8b01 	strb.w	r8, [r5], #1
  406058:	454d      	cmp	r5, r9
  40605a:	4606      	mov	r6, r0
  40605c:	460f      	mov	r7, r1
  40605e:	d1e4      	bne.n	40602a <_dtoa_r+0xc82>
  406060:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406064:	4b3b      	ldr	r3, [pc, #236]	; (406154 <_dtoa_r+0xdac>)
  406066:	2200      	movs	r2, #0
  406068:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40606c:	f001 fe7a 	bl	407d64 <__adddf3>
  406070:	4632      	mov	r2, r6
  406072:	463b      	mov	r3, r7
  406074:	f002 fa9a 	bl	4085ac <__aeabi_dcmplt>
  406078:	2800      	cmp	r0, #0
  40607a:	d046      	beq.n	40610a <_dtoa_r+0xd62>
  40607c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40607e:	9302      	str	r3, [sp, #8]
  406080:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  406084:	f7ff bb43 	b.w	40570e <_dtoa_r+0x366>
  406088:	f04f 0800 	mov.w	r8, #0
  40608c:	4646      	mov	r6, r8
  40608e:	e6a9      	b.n	405de4 <_dtoa_r+0xa3c>
  406090:	9b08      	ldr	r3, [sp, #32]
  406092:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406094:	1a9d      	subs	r5, r3, r2
  406096:	2300      	movs	r3, #0
  406098:	f7ff bb71 	b.w	40577e <_dtoa_r+0x3d6>
  40609c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40609e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4060a0:	9d08      	ldr	r5, [sp, #32]
  4060a2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4060a6:	f7ff bb6a 	b.w	40577e <_dtoa_r+0x3d6>
  4060aa:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  4060ae:	f04f 0a02 	mov.w	sl, #2
  4060b2:	e56e      	b.n	405b92 <_dtoa_r+0x7ea>
  4060b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4060b6:	2b00      	cmp	r3, #0
  4060b8:	f43f aeb8 	beq.w	405e2c <_dtoa_r+0xa84>
  4060bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4060be:	2b00      	cmp	r3, #0
  4060c0:	f77f aede 	ble.w	405e80 <_dtoa_r+0xad8>
  4060c4:	2200      	movs	r2, #0
  4060c6:	4b24      	ldr	r3, [pc, #144]	; (406158 <_dtoa_r+0xdb0>)
  4060c8:	4638      	mov	r0, r7
  4060ca:	4641      	mov	r1, r8
  4060cc:	f001 fffc 	bl	4080c8 <__aeabi_dmul>
  4060d0:	4607      	mov	r7, r0
  4060d2:	4688      	mov	r8, r1
  4060d4:	f10a 0001 	add.w	r0, sl, #1
  4060d8:	f001 ff90 	bl	407ffc <__aeabi_i2d>
  4060dc:	463a      	mov	r2, r7
  4060de:	4643      	mov	r3, r8
  4060e0:	f001 fff2 	bl	4080c8 <__aeabi_dmul>
  4060e4:	2200      	movs	r2, #0
  4060e6:	4b17      	ldr	r3, [pc, #92]	; (406144 <_dtoa_r+0xd9c>)
  4060e8:	f001 fe3c 	bl	407d64 <__adddf3>
  4060ec:	9a02      	ldr	r2, [sp, #8]
  4060ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4060f0:	9312      	str	r3, [sp, #72]	; 0x48
  4060f2:	3a01      	subs	r2, #1
  4060f4:	4605      	mov	r5, r0
  4060f6:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4060fa:	9215      	str	r2, [sp, #84]	; 0x54
  4060fc:	e56a      	b.n	405bd4 <_dtoa_r+0x82c>
  4060fe:	2239      	movs	r2, #57	; 0x39
  406100:	46b3      	mov	fp, r6
  406102:	703a      	strb	r2, [r7, #0]
  406104:	9e06      	ldr	r6, [sp, #24]
  406106:	1c7d      	adds	r5, r7, #1
  406108:	e4c0      	b.n	405a8c <_dtoa_r+0x6e4>
  40610a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40610e:	2000      	movs	r0, #0
  406110:	4910      	ldr	r1, [pc, #64]	; (406154 <_dtoa_r+0xdac>)
  406112:	f001 fe25 	bl	407d60 <__aeabi_dsub>
  406116:	4632      	mov	r2, r6
  406118:	463b      	mov	r3, r7
  40611a:	f002 fa65 	bl	4085e8 <__aeabi_dcmpgt>
  40611e:	b908      	cbnz	r0, 406124 <_dtoa_r+0xd7c>
  406120:	e6ae      	b.n	405e80 <_dtoa_r+0xad8>
  406122:	4615      	mov	r5, r2
  406124:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406128:	2b30      	cmp	r3, #48	; 0x30
  40612a:	f105 32ff 	add.w	r2, r5, #4294967295
  40612e:	d0f8      	beq.n	406122 <_dtoa_r+0xd7a>
  406130:	e5d7      	b.n	405ce2 <_dtoa_r+0x93a>
  406132:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406136:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406138:	9302      	str	r3, [sp, #8]
  40613a:	f7ff bae8 	b.w	40570e <_dtoa_r+0x366>
  40613e:	970c      	str	r7, [sp, #48]	; 0x30
  406140:	f7ff bba5 	b.w	40588e <_dtoa_r+0x4e6>
  406144:	401c0000 	.word	0x401c0000
  406148:	40140000 	.word	0x40140000
  40614c:	00409bd8 	.word	0x00409bd8
  406150:	00409bb0 	.word	0x00409bb0
  406154:	3fe00000 	.word	0x3fe00000
  406158:	40240000 	.word	0x40240000
  40615c:	2b39      	cmp	r3, #57	; 0x39
  40615e:	f8cd b018 	str.w	fp, [sp, #24]
  406162:	46d0      	mov	r8, sl
  406164:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  406168:	469a      	mov	sl, r3
  40616a:	d0c8      	beq.n	4060fe <_dtoa_r+0xd56>
  40616c:	f1bb 0f00 	cmp.w	fp, #0
  406170:	f73f aebf 	bgt.w	405ef2 <_dtoa_r+0xb4a>
  406174:	e6bf      	b.n	405ef6 <_dtoa_r+0xb4e>
  406176:	f47f aebe 	bne.w	405ef6 <_dtoa_r+0xb4e>
  40617a:	f01a 0f01 	tst.w	sl, #1
  40617e:	f43f aeba 	beq.w	405ef6 <_dtoa_r+0xb4e>
  406182:	e6b2      	b.n	405eea <_dtoa_r+0xb42>
  406184:	f04f 0800 	mov.w	r8, #0
  406188:	4646      	mov	r6, r8
  40618a:	e5e9      	b.n	405d60 <_dtoa_r+0x9b8>
  40618c:	4631      	mov	r1, r6
  40618e:	2300      	movs	r3, #0
  406190:	220a      	movs	r2, #10
  406192:	4620      	mov	r0, r4
  406194:	f000 fe70 	bl	406e78 <__multadd>
  406198:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40619a:	2b00      	cmp	r3, #0
  40619c:	4606      	mov	r6, r0
  40619e:	dd0a      	ble.n	4061b6 <_dtoa_r+0xe0e>
  4061a0:	930a      	str	r3, [sp, #40]	; 0x28
  4061a2:	f7ff bbaa 	b.w	4058fa <_dtoa_r+0x552>
  4061a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4061a8:	2b02      	cmp	r3, #2
  4061aa:	dc23      	bgt.n	4061f4 <_dtoa_r+0xe4c>
  4061ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4061ae:	e43b      	b.n	405a28 <_dtoa_r+0x680>
  4061b0:	f04f 0a02 	mov.w	sl, #2
  4061b4:	e4ed      	b.n	405b92 <_dtoa_r+0x7ea>
  4061b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4061b8:	2b02      	cmp	r3, #2
  4061ba:	dc1b      	bgt.n	4061f4 <_dtoa_r+0xe4c>
  4061bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4061be:	e7ef      	b.n	4061a0 <_dtoa_r+0xdf8>
  4061c0:	2500      	movs	r5, #0
  4061c2:	6465      	str	r5, [r4, #68]	; 0x44
  4061c4:	4629      	mov	r1, r5
  4061c6:	4620      	mov	r0, r4
  4061c8:	f000 fe26 	bl	406e18 <_Balloc>
  4061cc:	f04f 33ff 	mov.w	r3, #4294967295
  4061d0:	930a      	str	r3, [sp, #40]	; 0x28
  4061d2:	930f      	str	r3, [sp, #60]	; 0x3c
  4061d4:	2301      	movs	r3, #1
  4061d6:	9004      	str	r0, [sp, #16]
  4061d8:	9525      	str	r5, [sp, #148]	; 0x94
  4061da:	6420      	str	r0, [r4, #64]	; 0x40
  4061dc:	930b      	str	r3, [sp, #44]	; 0x2c
  4061de:	f7ff b9dd 	b.w	40559c <_dtoa_r+0x1f4>
  4061e2:	2501      	movs	r5, #1
  4061e4:	f7ff b9a5 	b.w	405532 <_dtoa_r+0x18a>
  4061e8:	f43f ab69 	beq.w	4058be <_dtoa_r+0x516>
  4061ec:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  4061f0:	f7ff bbf9 	b.w	4059e6 <_dtoa_r+0x63e>
  4061f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4061f6:	930a      	str	r3, [sp, #40]	; 0x28
  4061f8:	e5e5      	b.n	405dc6 <_dtoa_r+0xa1e>
  4061fa:	bf00      	nop

004061fc <__sflush_r>:
  4061fc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  406200:	b29a      	uxth	r2, r3
  406202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406206:	460d      	mov	r5, r1
  406208:	0711      	lsls	r1, r2, #28
  40620a:	4680      	mov	r8, r0
  40620c:	d43a      	bmi.n	406284 <__sflush_r+0x88>
  40620e:	686a      	ldr	r2, [r5, #4]
  406210:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  406214:	2a00      	cmp	r2, #0
  406216:	81ab      	strh	r3, [r5, #12]
  406218:	dd6f      	ble.n	4062fa <__sflush_r+0xfe>
  40621a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40621c:	2c00      	cmp	r4, #0
  40621e:	d049      	beq.n	4062b4 <__sflush_r+0xb8>
  406220:	2200      	movs	r2, #0
  406222:	b29b      	uxth	r3, r3
  406224:	f8d8 6000 	ldr.w	r6, [r8]
  406228:	f8c8 2000 	str.w	r2, [r8]
  40622c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  406230:	d067      	beq.n	406302 <__sflush_r+0x106>
  406232:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  406234:	075f      	lsls	r7, r3, #29
  406236:	d505      	bpl.n	406244 <__sflush_r+0x48>
  406238:	6869      	ldr	r1, [r5, #4]
  40623a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40623c:	1a52      	subs	r2, r2, r1
  40623e:	b10b      	cbz	r3, 406244 <__sflush_r+0x48>
  406240:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  406242:	1ad2      	subs	r2, r2, r3
  406244:	2300      	movs	r3, #0
  406246:	69e9      	ldr	r1, [r5, #28]
  406248:	4640      	mov	r0, r8
  40624a:	47a0      	blx	r4
  40624c:	1c44      	adds	r4, r0, #1
  40624e:	d03c      	beq.n	4062ca <__sflush_r+0xce>
  406250:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  406254:	692a      	ldr	r2, [r5, #16]
  406256:	602a      	str	r2, [r5, #0]
  406258:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40625c:	2200      	movs	r2, #0
  40625e:	81ab      	strh	r3, [r5, #12]
  406260:	04db      	lsls	r3, r3, #19
  406262:	606a      	str	r2, [r5, #4]
  406264:	d447      	bmi.n	4062f6 <__sflush_r+0xfa>
  406266:	6b29      	ldr	r1, [r5, #48]	; 0x30
  406268:	f8c8 6000 	str.w	r6, [r8]
  40626c:	b311      	cbz	r1, 4062b4 <__sflush_r+0xb8>
  40626e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  406272:	4299      	cmp	r1, r3
  406274:	d002      	beq.n	40627c <__sflush_r+0x80>
  406276:	4640      	mov	r0, r8
  406278:	f000 f9de 	bl	406638 <_free_r>
  40627c:	2000      	movs	r0, #0
  40627e:	6328      	str	r0, [r5, #48]	; 0x30
  406280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406284:	692e      	ldr	r6, [r5, #16]
  406286:	b1ae      	cbz	r6, 4062b4 <__sflush_r+0xb8>
  406288:	682c      	ldr	r4, [r5, #0]
  40628a:	602e      	str	r6, [r5, #0]
  40628c:	0791      	lsls	r1, r2, #30
  40628e:	bf0c      	ite	eq
  406290:	696b      	ldreq	r3, [r5, #20]
  406292:	2300      	movne	r3, #0
  406294:	1ba4      	subs	r4, r4, r6
  406296:	60ab      	str	r3, [r5, #8]
  406298:	e00a      	b.n	4062b0 <__sflush_r+0xb4>
  40629a:	4623      	mov	r3, r4
  40629c:	4632      	mov	r2, r6
  40629e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4062a0:	69e9      	ldr	r1, [r5, #28]
  4062a2:	4640      	mov	r0, r8
  4062a4:	47b8      	blx	r7
  4062a6:	2800      	cmp	r0, #0
  4062a8:	eba4 0400 	sub.w	r4, r4, r0
  4062ac:	4406      	add	r6, r0
  4062ae:	dd04      	ble.n	4062ba <__sflush_r+0xbe>
  4062b0:	2c00      	cmp	r4, #0
  4062b2:	dcf2      	bgt.n	40629a <__sflush_r+0x9e>
  4062b4:	2000      	movs	r0, #0
  4062b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4062ba:	89ab      	ldrh	r3, [r5, #12]
  4062bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4062c0:	81ab      	strh	r3, [r5, #12]
  4062c2:	f04f 30ff 	mov.w	r0, #4294967295
  4062c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4062ca:	f8d8 4000 	ldr.w	r4, [r8]
  4062ce:	2c1d      	cmp	r4, #29
  4062d0:	d8f3      	bhi.n	4062ba <__sflush_r+0xbe>
  4062d2:	4b19      	ldr	r3, [pc, #100]	; (406338 <__sflush_r+0x13c>)
  4062d4:	40e3      	lsrs	r3, r4
  4062d6:	43db      	mvns	r3, r3
  4062d8:	f013 0301 	ands.w	r3, r3, #1
  4062dc:	d1ed      	bne.n	4062ba <__sflush_r+0xbe>
  4062de:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4062e2:	606b      	str	r3, [r5, #4]
  4062e4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4062e8:	6929      	ldr	r1, [r5, #16]
  4062ea:	81ab      	strh	r3, [r5, #12]
  4062ec:	04da      	lsls	r2, r3, #19
  4062ee:	6029      	str	r1, [r5, #0]
  4062f0:	d5b9      	bpl.n	406266 <__sflush_r+0x6a>
  4062f2:	2c00      	cmp	r4, #0
  4062f4:	d1b7      	bne.n	406266 <__sflush_r+0x6a>
  4062f6:	6528      	str	r0, [r5, #80]	; 0x50
  4062f8:	e7b5      	b.n	406266 <__sflush_r+0x6a>
  4062fa:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4062fc:	2a00      	cmp	r2, #0
  4062fe:	dc8c      	bgt.n	40621a <__sflush_r+0x1e>
  406300:	e7d8      	b.n	4062b4 <__sflush_r+0xb8>
  406302:	2301      	movs	r3, #1
  406304:	69e9      	ldr	r1, [r5, #28]
  406306:	4640      	mov	r0, r8
  406308:	47a0      	blx	r4
  40630a:	1c43      	adds	r3, r0, #1
  40630c:	4602      	mov	r2, r0
  40630e:	d002      	beq.n	406316 <__sflush_r+0x11a>
  406310:	89ab      	ldrh	r3, [r5, #12]
  406312:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406314:	e78e      	b.n	406234 <__sflush_r+0x38>
  406316:	f8d8 3000 	ldr.w	r3, [r8]
  40631a:	2b00      	cmp	r3, #0
  40631c:	d0f8      	beq.n	406310 <__sflush_r+0x114>
  40631e:	2b1d      	cmp	r3, #29
  406320:	d001      	beq.n	406326 <__sflush_r+0x12a>
  406322:	2b16      	cmp	r3, #22
  406324:	d102      	bne.n	40632c <__sflush_r+0x130>
  406326:	f8c8 6000 	str.w	r6, [r8]
  40632a:	e7c3      	b.n	4062b4 <__sflush_r+0xb8>
  40632c:	89ab      	ldrh	r3, [r5, #12]
  40632e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406332:	81ab      	strh	r3, [r5, #12]
  406334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406338:	20400001 	.word	0x20400001

0040633c <_fflush_r>:
  40633c:	b538      	push	{r3, r4, r5, lr}
  40633e:	460d      	mov	r5, r1
  406340:	4604      	mov	r4, r0
  406342:	b108      	cbz	r0, 406348 <_fflush_r+0xc>
  406344:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406346:	b1bb      	cbz	r3, 406378 <_fflush_r+0x3c>
  406348:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40634c:	b188      	cbz	r0, 406372 <_fflush_r+0x36>
  40634e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  406350:	07db      	lsls	r3, r3, #31
  406352:	d401      	bmi.n	406358 <_fflush_r+0x1c>
  406354:	0581      	lsls	r1, r0, #22
  406356:	d517      	bpl.n	406388 <_fflush_r+0x4c>
  406358:	4620      	mov	r0, r4
  40635a:	4629      	mov	r1, r5
  40635c:	f7ff ff4e 	bl	4061fc <__sflush_r>
  406360:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  406362:	07da      	lsls	r2, r3, #31
  406364:	4604      	mov	r4, r0
  406366:	d402      	bmi.n	40636e <_fflush_r+0x32>
  406368:	89ab      	ldrh	r3, [r5, #12]
  40636a:	059b      	lsls	r3, r3, #22
  40636c:	d507      	bpl.n	40637e <_fflush_r+0x42>
  40636e:	4620      	mov	r0, r4
  406370:	bd38      	pop	{r3, r4, r5, pc}
  406372:	4604      	mov	r4, r0
  406374:	4620      	mov	r0, r4
  406376:	bd38      	pop	{r3, r4, r5, pc}
  406378:	f000 f838 	bl	4063ec <__sinit>
  40637c:	e7e4      	b.n	406348 <_fflush_r+0xc>
  40637e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  406380:	f000 fc04 	bl	406b8c <__retarget_lock_release_recursive>
  406384:	4620      	mov	r0, r4
  406386:	bd38      	pop	{r3, r4, r5, pc}
  406388:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40638a:	f000 fbfd 	bl	406b88 <__retarget_lock_acquire_recursive>
  40638e:	e7e3      	b.n	406358 <_fflush_r+0x1c>

00406390 <_cleanup_r>:
  406390:	4901      	ldr	r1, [pc, #4]	; (406398 <_cleanup_r+0x8>)
  406392:	f000 bbaf 	b.w	406af4 <_fwalk_reent>
  406396:	bf00      	nop
  406398:	00407bf1 	.word	0x00407bf1

0040639c <std.isra.0>:
  40639c:	b510      	push	{r4, lr}
  40639e:	2300      	movs	r3, #0
  4063a0:	4604      	mov	r4, r0
  4063a2:	8181      	strh	r1, [r0, #12]
  4063a4:	81c2      	strh	r2, [r0, #14]
  4063a6:	6003      	str	r3, [r0, #0]
  4063a8:	6043      	str	r3, [r0, #4]
  4063aa:	6083      	str	r3, [r0, #8]
  4063ac:	6643      	str	r3, [r0, #100]	; 0x64
  4063ae:	6103      	str	r3, [r0, #16]
  4063b0:	6143      	str	r3, [r0, #20]
  4063b2:	6183      	str	r3, [r0, #24]
  4063b4:	4619      	mov	r1, r3
  4063b6:	2208      	movs	r2, #8
  4063b8:	305c      	adds	r0, #92	; 0x5c
  4063ba:	f7fc fbd9 	bl	402b70 <memset>
  4063be:	4807      	ldr	r0, [pc, #28]	; (4063dc <std.isra.0+0x40>)
  4063c0:	4907      	ldr	r1, [pc, #28]	; (4063e0 <std.isra.0+0x44>)
  4063c2:	4a08      	ldr	r2, [pc, #32]	; (4063e4 <std.isra.0+0x48>)
  4063c4:	4b08      	ldr	r3, [pc, #32]	; (4063e8 <std.isra.0+0x4c>)
  4063c6:	6220      	str	r0, [r4, #32]
  4063c8:	61e4      	str	r4, [r4, #28]
  4063ca:	6261      	str	r1, [r4, #36]	; 0x24
  4063cc:	62a2      	str	r2, [r4, #40]	; 0x28
  4063ce:	62e3      	str	r3, [r4, #44]	; 0x2c
  4063d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4063d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4063d8:	f000 bbd2 	b.w	406b80 <__retarget_lock_init_recursive>
  4063dc:	004077f5 	.word	0x004077f5
  4063e0:	00407819 	.word	0x00407819
  4063e4:	00407855 	.word	0x00407855
  4063e8:	00407875 	.word	0x00407875

004063ec <__sinit>:
  4063ec:	b510      	push	{r4, lr}
  4063ee:	4604      	mov	r4, r0
  4063f0:	4812      	ldr	r0, [pc, #72]	; (40643c <__sinit+0x50>)
  4063f2:	f000 fbc9 	bl	406b88 <__retarget_lock_acquire_recursive>
  4063f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4063f8:	b9d2      	cbnz	r2, 406430 <__sinit+0x44>
  4063fa:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4063fe:	4810      	ldr	r0, [pc, #64]	; (406440 <__sinit+0x54>)
  406400:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  406404:	2103      	movs	r1, #3
  406406:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40640a:	63e0      	str	r0, [r4, #60]	; 0x3c
  40640c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  406410:	6860      	ldr	r0, [r4, #4]
  406412:	2104      	movs	r1, #4
  406414:	f7ff ffc2 	bl	40639c <std.isra.0>
  406418:	2201      	movs	r2, #1
  40641a:	2109      	movs	r1, #9
  40641c:	68a0      	ldr	r0, [r4, #8]
  40641e:	f7ff ffbd 	bl	40639c <std.isra.0>
  406422:	2202      	movs	r2, #2
  406424:	2112      	movs	r1, #18
  406426:	68e0      	ldr	r0, [r4, #12]
  406428:	f7ff ffb8 	bl	40639c <std.isra.0>
  40642c:	2301      	movs	r3, #1
  40642e:	63a3      	str	r3, [r4, #56]	; 0x38
  406430:	4802      	ldr	r0, [pc, #8]	; (40643c <__sinit+0x50>)
  406432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406436:	f000 bba9 	b.w	406b8c <__retarget_lock_release_recursive>
  40643a:	bf00      	nop
  40643c:	20410d20 	.word	0x20410d20
  406440:	00406391 	.word	0x00406391

00406444 <__sfp_lock_acquire>:
  406444:	4801      	ldr	r0, [pc, #4]	; (40644c <__sfp_lock_acquire+0x8>)
  406446:	f000 bb9f 	b.w	406b88 <__retarget_lock_acquire_recursive>
  40644a:	bf00      	nop
  40644c:	20410d34 	.word	0x20410d34

00406450 <__sfp_lock_release>:
  406450:	4801      	ldr	r0, [pc, #4]	; (406458 <__sfp_lock_release+0x8>)
  406452:	f000 bb9b 	b.w	406b8c <__retarget_lock_release_recursive>
  406456:	bf00      	nop
  406458:	20410d34 	.word	0x20410d34

0040645c <__libc_fini_array>:
  40645c:	b538      	push	{r3, r4, r5, lr}
  40645e:	4c0a      	ldr	r4, [pc, #40]	; (406488 <__libc_fini_array+0x2c>)
  406460:	4d0a      	ldr	r5, [pc, #40]	; (40648c <__libc_fini_array+0x30>)
  406462:	1b64      	subs	r4, r4, r5
  406464:	10a4      	asrs	r4, r4, #2
  406466:	d00a      	beq.n	40647e <__libc_fini_array+0x22>
  406468:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40646c:	3b01      	subs	r3, #1
  40646e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  406472:	3c01      	subs	r4, #1
  406474:	f855 3904 	ldr.w	r3, [r5], #-4
  406478:	4798      	blx	r3
  40647a:	2c00      	cmp	r4, #0
  40647c:	d1f9      	bne.n	406472 <__libc_fini_array+0x16>
  40647e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406482:	f003 bc9f 	b.w	409dc4 <_fini>
  406486:	bf00      	nop
  406488:	00409dd4 	.word	0x00409dd4
  40648c:	00409dd0 	.word	0x00409dd0

00406490 <__fputwc>:
  406490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406494:	b082      	sub	sp, #8
  406496:	4680      	mov	r8, r0
  406498:	4689      	mov	r9, r1
  40649a:	4614      	mov	r4, r2
  40649c:	f000 fb54 	bl	406b48 <__locale_mb_cur_max>
  4064a0:	2801      	cmp	r0, #1
  4064a2:	d036      	beq.n	406512 <__fputwc+0x82>
  4064a4:	464a      	mov	r2, r9
  4064a6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4064aa:	a901      	add	r1, sp, #4
  4064ac:	4640      	mov	r0, r8
  4064ae:	f001 faad 	bl	407a0c <_wcrtomb_r>
  4064b2:	1c42      	adds	r2, r0, #1
  4064b4:	4606      	mov	r6, r0
  4064b6:	d025      	beq.n	406504 <__fputwc+0x74>
  4064b8:	b3a8      	cbz	r0, 406526 <__fputwc+0x96>
  4064ba:	f89d e004 	ldrb.w	lr, [sp, #4]
  4064be:	2500      	movs	r5, #0
  4064c0:	f10d 0a04 	add.w	sl, sp, #4
  4064c4:	e009      	b.n	4064da <__fputwc+0x4a>
  4064c6:	6823      	ldr	r3, [r4, #0]
  4064c8:	1c5a      	adds	r2, r3, #1
  4064ca:	6022      	str	r2, [r4, #0]
  4064cc:	f883 e000 	strb.w	lr, [r3]
  4064d0:	3501      	adds	r5, #1
  4064d2:	42b5      	cmp	r5, r6
  4064d4:	d227      	bcs.n	406526 <__fputwc+0x96>
  4064d6:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4064da:	68a3      	ldr	r3, [r4, #8]
  4064dc:	3b01      	subs	r3, #1
  4064de:	2b00      	cmp	r3, #0
  4064e0:	60a3      	str	r3, [r4, #8]
  4064e2:	daf0      	bge.n	4064c6 <__fputwc+0x36>
  4064e4:	69a7      	ldr	r7, [r4, #24]
  4064e6:	42bb      	cmp	r3, r7
  4064e8:	4671      	mov	r1, lr
  4064ea:	4622      	mov	r2, r4
  4064ec:	4640      	mov	r0, r8
  4064ee:	db02      	blt.n	4064f6 <__fputwc+0x66>
  4064f0:	f1be 0f0a 	cmp.w	lr, #10
  4064f4:	d1e7      	bne.n	4064c6 <__fputwc+0x36>
  4064f6:	f001 fa31 	bl	40795c <__swbuf_r>
  4064fa:	1c43      	adds	r3, r0, #1
  4064fc:	d1e8      	bne.n	4064d0 <__fputwc+0x40>
  4064fe:	b002      	add	sp, #8
  406500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406504:	89a3      	ldrh	r3, [r4, #12]
  406506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40650a:	81a3      	strh	r3, [r4, #12]
  40650c:	b002      	add	sp, #8
  40650e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406512:	f109 33ff 	add.w	r3, r9, #4294967295
  406516:	2bfe      	cmp	r3, #254	; 0xfe
  406518:	d8c4      	bhi.n	4064a4 <__fputwc+0x14>
  40651a:	fa5f fe89 	uxtb.w	lr, r9
  40651e:	4606      	mov	r6, r0
  406520:	f88d e004 	strb.w	lr, [sp, #4]
  406524:	e7cb      	b.n	4064be <__fputwc+0x2e>
  406526:	4648      	mov	r0, r9
  406528:	b002      	add	sp, #8
  40652a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40652e:	bf00      	nop

00406530 <_fputwc_r>:
  406530:	b530      	push	{r4, r5, lr}
  406532:	6e53      	ldr	r3, [r2, #100]	; 0x64
  406534:	f013 0f01 	tst.w	r3, #1
  406538:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40653c:	4614      	mov	r4, r2
  40653e:	b083      	sub	sp, #12
  406540:	4605      	mov	r5, r0
  406542:	b29a      	uxth	r2, r3
  406544:	d101      	bne.n	40654a <_fputwc_r+0x1a>
  406546:	0590      	lsls	r0, r2, #22
  406548:	d51c      	bpl.n	406584 <_fputwc_r+0x54>
  40654a:	0490      	lsls	r0, r2, #18
  40654c:	d406      	bmi.n	40655c <_fputwc_r+0x2c>
  40654e:	6e62      	ldr	r2, [r4, #100]	; 0x64
  406550:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  406554:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  406558:	81a3      	strh	r3, [r4, #12]
  40655a:	6662      	str	r2, [r4, #100]	; 0x64
  40655c:	4628      	mov	r0, r5
  40655e:	4622      	mov	r2, r4
  406560:	f7ff ff96 	bl	406490 <__fputwc>
  406564:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406566:	07da      	lsls	r2, r3, #31
  406568:	4605      	mov	r5, r0
  40656a:	d402      	bmi.n	406572 <_fputwc_r+0x42>
  40656c:	89a3      	ldrh	r3, [r4, #12]
  40656e:	059b      	lsls	r3, r3, #22
  406570:	d502      	bpl.n	406578 <_fputwc_r+0x48>
  406572:	4628      	mov	r0, r5
  406574:	b003      	add	sp, #12
  406576:	bd30      	pop	{r4, r5, pc}
  406578:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40657a:	f000 fb07 	bl	406b8c <__retarget_lock_release_recursive>
  40657e:	4628      	mov	r0, r5
  406580:	b003      	add	sp, #12
  406582:	bd30      	pop	{r4, r5, pc}
  406584:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406586:	9101      	str	r1, [sp, #4]
  406588:	f000 fafe 	bl	406b88 <__retarget_lock_acquire_recursive>
  40658c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406590:	9901      	ldr	r1, [sp, #4]
  406592:	b29a      	uxth	r2, r3
  406594:	e7d9      	b.n	40654a <_fputwc_r+0x1a>
  406596:	bf00      	nop

00406598 <_malloc_trim_r>:
  406598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40659a:	4f24      	ldr	r7, [pc, #144]	; (40662c <_malloc_trim_r+0x94>)
  40659c:	460c      	mov	r4, r1
  40659e:	4606      	mov	r6, r0
  4065a0:	f7fc fb34 	bl	402c0c <__malloc_lock>
  4065a4:	68bb      	ldr	r3, [r7, #8]
  4065a6:	685d      	ldr	r5, [r3, #4]
  4065a8:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4065ac:	310f      	adds	r1, #15
  4065ae:	f025 0503 	bic.w	r5, r5, #3
  4065b2:	4429      	add	r1, r5
  4065b4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4065b8:	f021 010f 	bic.w	r1, r1, #15
  4065bc:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4065c0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4065c4:	db07      	blt.n	4065d6 <_malloc_trim_r+0x3e>
  4065c6:	2100      	movs	r1, #0
  4065c8:	4630      	mov	r0, r6
  4065ca:	f7fc fb3f 	bl	402c4c <_sbrk_r>
  4065ce:	68bb      	ldr	r3, [r7, #8]
  4065d0:	442b      	add	r3, r5
  4065d2:	4298      	cmp	r0, r3
  4065d4:	d004      	beq.n	4065e0 <_malloc_trim_r+0x48>
  4065d6:	4630      	mov	r0, r6
  4065d8:	f7fc fb1e 	bl	402c18 <__malloc_unlock>
  4065dc:	2000      	movs	r0, #0
  4065de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4065e0:	4261      	negs	r1, r4
  4065e2:	4630      	mov	r0, r6
  4065e4:	f7fc fb32 	bl	402c4c <_sbrk_r>
  4065e8:	3001      	adds	r0, #1
  4065ea:	d00d      	beq.n	406608 <_malloc_trim_r+0x70>
  4065ec:	4b10      	ldr	r3, [pc, #64]	; (406630 <_malloc_trim_r+0x98>)
  4065ee:	68ba      	ldr	r2, [r7, #8]
  4065f0:	6819      	ldr	r1, [r3, #0]
  4065f2:	1b2d      	subs	r5, r5, r4
  4065f4:	f045 0501 	orr.w	r5, r5, #1
  4065f8:	4630      	mov	r0, r6
  4065fa:	1b09      	subs	r1, r1, r4
  4065fc:	6055      	str	r5, [r2, #4]
  4065fe:	6019      	str	r1, [r3, #0]
  406600:	f7fc fb0a 	bl	402c18 <__malloc_unlock>
  406604:	2001      	movs	r0, #1
  406606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406608:	2100      	movs	r1, #0
  40660a:	4630      	mov	r0, r6
  40660c:	f7fc fb1e 	bl	402c4c <_sbrk_r>
  406610:	68ba      	ldr	r2, [r7, #8]
  406612:	1a83      	subs	r3, r0, r2
  406614:	2b0f      	cmp	r3, #15
  406616:	ddde      	ble.n	4065d6 <_malloc_trim_r+0x3e>
  406618:	4c06      	ldr	r4, [pc, #24]	; (406634 <_malloc_trim_r+0x9c>)
  40661a:	4905      	ldr	r1, [pc, #20]	; (406630 <_malloc_trim_r+0x98>)
  40661c:	6824      	ldr	r4, [r4, #0]
  40661e:	f043 0301 	orr.w	r3, r3, #1
  406622:	1b00      	subs	r0, r0, r4
  406624:	6053      	str	r3, [r2, #4]
  406626:	6008      	str	r0, [r1, #0]
  406628:	e7d5      	b.n	4065d6 <_malloc_trim_r+0x3e>
  40662a:	bf00      	nop
  40662c:	20400430 	.word	0x20400430
  406630:	20410cd0 	.word	0x20410cd0
  406634:	20400838 	.word	0x20400838

00406638 <_free_r>:
  406638:	2900      	cmp	r1, #0
  40663a:	d044      	beq.n	4066c6 <_free_r+0x8e>
  40663c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406640:	460d      	mov	r5, r1
  406642:	4680      	mov	r8, r0
  406644:	f7fc fae2 	bl	402c0c <__malloc_lock>
  406648:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40664c:	4969      	ldr	r1, [pc, #420]	; (4067f4 <_free_r+0x1bc>)
  40664e:	f027 0301 	bic.w	r3, r7, #1
  406652:	f1a5 0408 	sub.w	r4, r5, #8
  406656:	18e2      	adds	r2, r4, r3
  406658:	688e      	ldr	r6, [r1, #8]
  40665a:	6850      	ldr	r0, [r2, #4]
  40665c:	42b2      	cmp	r2, r6
  40665e:	f020 0003 	bic.w	r0, r0, #3
  406662:	d05e      	beq.n	406722 <_free_r+0xea>
  406664:	07fe      	lsls	r6, r7, #31
  406666:	6050      	str	r0, [r2, #4]
  406668:	d40b      	bmi.n	406682 <_free_r+0x4a>
  40666a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40666e:	1be4      	subs	r4, r4, r7
  406670:	f101 0e08 	add.w	lr, r1, #8
  406674:	68a5      	ldr	r5, [r4, #8]
  406676:	4575      	cmp	r5, lr
  406678:	443b      	add	r3, r7
  40667a:	d06d      	beq.n	406758 <_free_r+0x120>
  40667c:	68e7      	ldr	r7, [r4, #12]
  40667e:	60ef      	str	r7, [r5, #12]
  406680:	60bd      	str	r5, [r7, #8]
  406682:	1815      	adds	r5, r2, r0
  406684:	686d      	ldr	r5, [r5, #4]
  406686:	07ed      	lsls	r5, r5, #31
  406688:	d53e      	bpl.n	406708 <_free_r+0xd0>
  40668a:	f043 0201 	orr.w	r2, r3, #1
  40668e:	6062      	str	r2, [r4, #4]
  406690:	50e3      	str	r3, [r4, r3]
  406692:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406696:	d217      	bcs.n	4066c8 <_free_r+0x90>
  406698:	08db      	lsrs	r3, r3, #3
  40669a:	1c58      	adds	r0, r3, #1
  40669c:	109a      	asrs	r2, r3, #2
  40669e:	684d      	ldr	r5, [r1, #4]
  4066a0:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4066a4:	60a7      	str	r7, [r4, #8]
  4066a6:	2301      	movs	r3, #1
  4066a8:	4093      	lsls	r3, r2
  4066aa:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4066ae:	432b      	orrs	r3, r5
  4066b0:	3a08      	subs	r2, #8
  4066b2:	60e2      	str	r2, [r4, #12]
  4066b4:	604b      	str	r3, [r1, #4]
  4066b6:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4066ba:	60fc      	str	r4, [r7, #12]
  4066bc:	4640      	mov	r0, r8
  4066be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4066c2:	f7fc baa9 	b.w	402c18 <__malloc_unlock>
  4066c6:	4770      	bx	lr
  4066c8:	0a5a      	lsrs	r2, r3, #9
  4066ca:	2a04      	cmp	r2, #4
  4066cc:	d852      	bhi.n	406774 <_free_r+0x13c>
  4066ce:	099a      	lsrs	r2, r3, #6
  4066d0:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4066d4:	00ff      	lsls	r7, r7, #3
  4066d6:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4066da:	19c8      	adds	r0, r1, r7
  4066dc:	59ca      	ldr	r2, [r1, r7]
  4066de:	3808      	subs	r0, #8
  4066e0:	4290      	cmp	r0, r2
  4066e2:	d04f      	beq.n	406784 <_free_r+0x14c>
  4066e4:	6851      	ldr	r1, [r2, #4]
  4066e6:	f021 0103 	bic.w	r1, r1, #3
  4066ea:	428b      	cmp	r3, r1
  4066ec:	d232      	bcs.n	406754 <_free_r+0x11c>
  4066ee:	6892      	ldr	r2, [r2, #8]
  4066f0:	4290      	cmp	r0, r2
  4066f2:	d1f7      	bne.n	4066e4 <_free_r+0xac>
  4066f4:	68c3      	ldr	r3, [r0, #12]
  4066f6:	60a0      	str	r0, [r4, #8]
  4066f8:	60e3      	str	r3, [r4, #12]
  4066fa:	609c      	str	r4, [r3, #8]
  4066fc:	60c4      	str	r4, [r0, #12]
  4066fe:	4640      	mov	r0, r8
  406700:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406704:	f7fc ba88 	b.w	402c18 <__malloc_unlock>
  406708:	6895      	ldr	r5, [r2, #8]
  40670a:	4f3b      	ldr	r7, [pc, #236]	; (4067f8 <_free_r+0x1c0>)
  40670c:	42bd      	cmp	r5, r7
  40670e:	4403      	add	r3, r0
  406710:	d040      	beq.n	406794 <_free_r+0x15c>
  406712:	68d0      	ldr	r0, [r2, #12]
  406714:	60e8      	str	r0, [r5, #12]
  406716:	f043 0201 	orr.w	r2, r3, #1
  40671a:	6085      	str	r5, [r0, #8]
  40671c:	6062      	str	r2, [r4, #4]
  40671e:	50e3      	str	r3, [r4, r3]
  406720:	e7b7      	b.n	406692 <_free_r+0x5a>
  406722:	07ff      	lsls	r7, r7, #31
  406724:	4403      	add	r3, r0
  406726:	d407      	bmi.n	406738 <_free_r+0x100>
  406728:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40672c:	1aa4      	subs	r4, r4, r2
  40672e:	4413      	add	r3, r2
  406730:	68a0      	ldr	r0, [r4, #8]
  406732:	68e2      	ldr	r2, [r4, #12]
  406734:	60c2      	str	r2, [r0, #12]
  406736:	6090      	str	r0, [r2, #8]
  406738:	4a30      	ldr	r2, [pc, #192]	; (4067fc <_free_r+0x1c4>)
  40673a:	6812      	ldr	r2, [r2, #0]
  40673c:	f043 0001 	orr.w	r0, r3, #1
  406740:	4293      	cmp	r3, r2
  406742:	6060      	str	r0, [r4, #4]
  406744:	608c      	str	r4, [r1, #8]
  406746:	d3b9      	bcc.n	4066bc <_free_r+0x84>
  406748:	4b2d      	ldr	r3, [pc, #180]	; (406800 <_free_r+0x1c8>)
  40674a:	4640      	mov	r0, r8
  40674c:	6819      	ldr	r1, [r3, #0]
  40674e:	f7ff ff23 	bl	406598 <_malloc_trim_r>
  406752:	e7b3      	b.n	4066bc <_free_r+0x84>
  406754:	4610      	mov	r0, r2
  406756:	e7cd      	b.n	4066f4 <_free_r+0xbc>
  406758:	1811      	adds	r1, r2, r0
  40675a:	6849      	ldr	r1, [r1, #4]
  40675c:	07c9      	lsls	r1, r1, #31
  40675e:	d444      	bmi.n	4067ea <_free_r+0x1b2>
  406760:	6891      	ldr	r1, [r2, #8]
  406762:	68d2      	ldr	r2, [r2, #12]
  406764:	60ca      	str	r2, [r1, #12]
  406766:	4403      	add	r3, r0
  406768:	f043 0001 	orr.w	r0, r3, #1
  40676c:	6091      	str	r1, [r2, #8]
  40676e:	6060      	str	r0, [r4, #4]
  406770:	50e3      	str	r3, [r4, r3]
  406772:	e7a3      	b.n	4066bc <_free_r+0x84>
  406774:	2a14      	cmp	r2, #20
  406776:	d816      	bhi.n	4067a6 <_free_r+0x16e>
  406778:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40677c:	00ff      	lsls	r7, r7, #3
  40677e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  406782:	e7aa      	b.n	4066da <_free_r+0xa2>
  406784:	10aa      	asrs	r2, r5, #2
  406786:	2301      	movs	r3, #1
  406788:	684d      	ldr	r5, [r1, #4]
  40678a:	4093      	lsls	r3, r2
  40678c:	432b      	orrs	r3, r5
  40678e:	604b      	str	r3, [r1, #4]
  406790:	4603      	mov	r3, r0
  406792:	e7b0      	b.n	4066f6 <_free_r+0xbe>
  406794:	f043 0201 	orr.w	r2, r3, #1
  406798:	614c      	str	r4, [r1, #20]
  40679a:	610c      	str	r4, [r1, #16]
  40679c:	60e5      	str	r5, [r4, #12]
  40679e:	60a5      	str	r5, [r4, #8]
  4067a0:	6062      	str	r2, [r4, #4]
  4067a2:	50e3      	str	r3, [r4, r3]
  4067a4:	e78a      	b.n	4066bc <_free_r+0x84>
  4067a6:	2a54      	cmp	r2, #84	; 0x54
  4067a8:	d806      	bhi.n	4067b8 <_free_r+0x180>
  4067aa:	0b1a      	lsrs	r2, r3, #12
  4067ac:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4067b0:	00ff      	lsls	r7, r7, #3
  4067b2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4067b6:	e790      	b.n	4066da <_free_r+0xa2>
  4067b8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4067bc:	d806      	bhi.n	4067cc <_free_r+0x194>
  4067be:	0bda      	lsrs	r2, r3, #15
  4067c0:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4067c4:	00ff      	lsls	r7, r7, #3
  4067c6:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4067ca:	e786      	b.n	4066da <_free_r+0xa2>
  4067cc:	f240 5054 	movw	r0, #1364	; 0x554
  4067d0:	4282      	cmp	r2, r0
  4067d2:	d806      	bhi.n	4067e2 <_free_r+0x1aa>
  4067d4:	0c9a      	lsrs	r2, r3, #18
  4067d6:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4067da:	00ff      	lsls	r7, r7, #3
  4067dc:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4067e0:	e77b      	b.n	4066da <_free_r+0xa2>
  4067e2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4067e6:	257e      	movs	r5, #126	; 0x7e
  4067e8:	e777      	b.n	4066da <_free_r+0xa2>
  4067ea:	f043 0101 	orr.w	r1, r3, #1
  4067ee:	6061      	str	r1, [r4, #4]
  4067f0:	6013      	str	r3, [r2, #0]
  4067f2:	e763      	b.n	4066bc <_free_r+0x84>
  4067f4:	20400430 	.word	0x20400430
  4067f8:	20400438 	.word	0x20400438
  4067fc:	2040083c 	.word	0x2040083c
  406800:	20410d00 	.word	0x20410d00

00406804 <__sfvwrite_r>:
  406804:	6893      	ldr	r3, [r2, #8]
  406806:	2b00      	cmp	r3, #0
  406808:	d073      	beq.n	4068f2 <__sfvwrite_r+0xee>
  40680a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40680e:	898b      	ldrh	r3, [r1, #12]
  406810:	b083      	sub	sp, #12
  406812:	460c      	mov	r4, r1
  406814:	0719      	lsls	r1, r3, #28
  406816:	9000      	str	r0, [sp, #0]
  406818:	4616      	mov	r6, r2
  40681a:	d526      	bpl.n	40686a <__sfvwrite_r+0x66>
  40681c:	6922      	ldr	r2, [r4, #16]
  40681e:	b322      	cbz	r2, 40686a <__sfvwrite_r+0x66>
  406820:	f013 0002 	ands.w	r0, r3, #2
  406824:	6835      	ldr	r5, [r6, #0]
  406826:	d02c      	beq.n	406882 <__sfvwrite_r+0x7e>
  406828:	f04f 0900 	mov.w	r9, #0
  40682c:	4fb0      	ldr	r7, [pc, #704]	; (406af0 <__sfvwrite_r+0x2ec>)
  40682e:	46c8      	mov	r8, r9
  406830:	46b2      	mov	sl, r6
  406832:	45b8      	cmp	r8, r7
  406834:	4643      	mov	r3, r8
  406836:	464a      	mov	r2, r9
  406838:	bf28      	it	cs
  40683a:	463b      	movcs	r3, r7
  40683c:	9800      	ldr	r0, [sp, #0]
  40683e:	f1b8 0f00 	cmp.w	r8, #0
  406842:	d050      	beq.n	4068e6 <__sfvwrite_r+0xe2>
  406844:	69e1      	ldr	r1, [r4, #28]
  406846:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406848:	47b0      	blx	r6
  40684a:	2800      	cmp	r0, #0
  40684c:	dd58      	ble.n	406900 <__sfvwrite_r+0xfc>
  40684e:	f8da 3008 	ldr.w	r3, [sl, #8]
  406852:	1a1b      	subs	r3, r3, r0
  406854:	4481      	add	r9, r0
  406856:	eba8 0800 	sub.w	r8, r8, r0
  40685a:	f8ca 3008 	str.w	r3, [sl, #8]
  40685e:	2b00      	cmp	r3, #0
  406860:	d1e7      	bne.n	406832 <__sfvwrite_r+0x2e>
  406862:	2000      	movs	r0, #0
  406864:	b003      	add	sp, #12
  406866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40686a:	4621      	mov	r1, r4
  40686c:	9800      	ldr	r0, [sp, #0]
  40686e:	f7fe fc89 	bl	405184 <__swsetup_r>
  406872:	2800      	cmp	r0, #0
  406874:	f040 8133 	bne.w	406ade <__sfvwrite_r+0x2da>
  406878:	89a3      	ldrh	r3, [r4, #12]
  40687a:	6835      	ldr	r5, [r6, #0]
  40687c:	f013 0002 	ands.w	r0, r3, #2
  406880:	d1d2      	bne.n	406828 <__sfvwrite_r+0x24>
  406882:	f013 0901 	ands.w	r9, r3, #1
  406886:	d145      	bne.n	406914 <__sfvwrite_r+0x110>
  406888:	464f      	mov	r7, r9
  40688a:	9601      	str	r6, [sp, #4]
  40688c:	b337      	cbz	r7, 4068dc <__sfvwrite_r+0xd8>
  40688e:	059a      	lsls	r2, r3, #22
  406890:	f8d4 8008 	ldr.w	r8, [r4, #8]
  406894:	f140 8083 	bpl.w	40699e <__sfvwrite_r+0x19a>
  406898:	4547      	cmp	r7, r8
  40689a:	46c3      	mov	fp, r8
  40689c:	f0c0 80ab 	bcc.w	4069f6 <__sfvwrite_r+0x1f2>
  4068a0:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4068a4:	f040 80ac 	bne.w	406a00 <__sfvwrite_r+0x1fc>
  4068a8:	6820      	ldr	r0, [r4, #0]
  4068aa:	46ba      	mov	sl, r7
  4068ac:	465a      	mov	r2, fp
  4068ae:	4649      	mov	r1, r9
  4068b0:	f000 fa4e 	bl	406d50 <memmove>
  4068b4:	68a2      	ldr	r2, [r4, #8]
  4068b6:	6823      	ldr	r3, [r4, #0]
  4068b8:	eba2 0208 	sub.w	r2, r2, r8
  4068bc:	445b      	add	r3, fp
  4068be:	60a2      	str	r2, [r4, #8]
  4068c0:	6023      	str	r3, [r4, #0]
  4068c2:	9a01      	ldr	r2, [sp, #4]
  4068c4:	6893      	ldr	r3, [r2, #8]
  4068c6:	eba3 030a 	sub.w	r3, r3, sl
  4068ca:	44d1      	add	r9, sl
  4068cc:	eba7 070a 	sub.w	r7, r7, sl
  4068d0:	6093      	str	r3, [r2, #8]
  4068d2:	2b00      	cmp	r3, #0
  4068d4:	d0c5      	beq.n	406862 <__sfvwrite_r+0x5e>
  4068d6:	89a3      	ldrh	r3, [r4, #12]
  4068d8:	2f00      	cmp	r7, #0
  4068da:	d1d8      	bne.n	40688e <__sfvwrite_r+0x8a>
  4068dc:	f8d5 9000 	ldr.w	r9, [r5]
  4068e0:	686f      	ldr	r7, [r5, #4]
  4068e2:	3508      	adds	r5, #8
  4068e4:	e7d2      	b.n	40688c <__sfvwrite_r+0x88>
  4068e6:	f8d5 9000 	ldr.w	r9, [r5]
  4068ea:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4068ee:	3508      	adds	r5, #8
  4068f0:	e79f      	b.n	406832 <__sfvwrite_r+0x2e>
  4068f2:	2000      	movs	r0, #0
  4068f4:	4770      	bx	lr
  4068f6:	4621      	mov	r1, r4
  4068f8:	9800      	ldr	r0, [sp, #0]
  4068fa:	f7ff fd1f 	bl	40633c <_fflush_r>
  4068fe:	b370      	cbz	r0, 40695e <__sfvwrite_r+0x15a>
  406900:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406908:	f04f 30ff 	mov.w	r0, #4294967295
  40690c:	81a3      	strh	r3, [r4, #12]
  40690e:	b003      	add	sp, #12
  406910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406914:	4681      	mov	r9, r0
  406916:	4633      	mov	r3, r6
  406918:	464e      	mov	r6, r9
  40691a:	46a8      	mov	r8, r5
  40691c:	469a      	mov	sl, r3
  40691e:	464d      	mov	r5, r9
  406920:	b34e      	cbz	r6, 406976 <__sfvwrite_r+0x172>
  406922:	b380      	cbz	r0, 406986 <__sfvwrite_r+0x182>
  406924:	6820      	ldr	r0, [r4, #0]
  406926:	6923      	ldr	r3, [r4, #16]
  406928:	6962      	ldr	r2, [r4, #20]
  40692a:	45b1      	cmp	r9, r6
  40692c:	46cb      	mov	fp, r9
  40692e:	bf28      	it	cs
  406930:	46b3      	movcs	fp, r6
  406932:	4298      	cmp	r0, r3
  406934:	465f      	mov	r7, fp
  406936:	d904      	bls.n	406942 <__sfvwrite_r+0x13e>
  406938:	68a3      	ldr	r3, [r4, #8]
  40693a:	4413      	add	r3, r2
  40693c:	459b      	cmp	fp, r3
  40693e:	f300 80a6 	bgt.w	406a8e <__sfvwrite_r+0x28a>
  406942:	4593      	cmp	fp, r2
  406944:	db4b      	blt.n	4069de <__sfvwrite_r+0x1da>
  406946:	4613      	mov	r3, r2
  406948:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40694a:	69e1      	ldr	r1, [r4, #28]
  40694c:	9800      	ldr	r0, [sp, #0]
  40694e:	462a      	mov	r2, r5
  406950:	47b8      	blx	r7
  406952:	1e07      	subs	r7, r0, #0
  406954:	ddd4      	ble.n	406900 <__sfvwrite_r+0xfc>
  406956:	ebb9 0907 	subs.w	r9, r9, r7
  40695a:	d0cc      	beq.n	4068f6 <__sfvwrite_r+0xf2>
  40695c:	2001      	movs	r0, #1
  40695e:	f8da 3008 	ldr.w	r3, [sl, #8]
  406962:	1bdb      	subs	r3, r3, r7
  406964:	443d      	add	r5, r7
  406966:	1bf6      	subs	r6, r6, r7
  406968:	f8ca 3008 	str.w	r3, [sl, #8]
  40696c:	2b00      	cmp	r3, #0
  40696e:	f43f af78 	beq.w	406862 <__sfvwrite_r+0x5e>
  406972:	2e00      	cmp	r6, #0
  406974:	d1d5      	bne.n	406922 <__sfvwrite_r+0x11e>
  406976:	f108 0308 	add.w	r3, r8, #8
  40697a:	e913 0060 	ldmdb	r3, {r5, r6}
  40697e:	4698      	mov	r8, r3
  406980:	3308      	adds	r3, #8
  406982:	2e00      	cmp	r6, #0
  406984:	d0f9      	beq.n	40697a <__sfvwrite_r+0x176>
  406986:	4632      	mov	r2, r6
  406988:	210a      	movs	r1, #10
  40698a:	4628      	mov	r0, r5
  40698c:	f000 f990 	bl	406cb0 <memchr>
  406990:	2800      	cmp	r0, #0
  406992:	f000 80a1 	beq.w	406ad8 <__sfvwrite_r+0x2d4>
  406996:	3001      	adds	r0, #1
  406998:	eba0 0905 	sub.w	r9, r0, r5
  40699c:	e7c2      	b.n	406924 <__sfvwrite_r+0x120>
  40699e:	6820      	ldr	r0, [r4, #0]
  4069a0:	6923      	ldr	r3, [r4, #16]
  4069a2:	4298      	cmp	r0, r3
  4069a4:	d802      	bhi.n	4069ac <__sfvwrite_r+0x1a8>
  4069a6:	6963      	ldr	r3, [r4, #20]
  4069a8:	429f      	cmp	r7, r3
  4069aa:	d25d      	bcs.n	406a68 <__sfvwrite_r+0x264>
  4069ac:	45b8      	cmp	r8, r7
  4069ae:	bf28      	it	cs
  4069b0:	46b8      	movcs	r8, r7
  4069b2:	4642      	mov	r2, r8
  4069b4:	4649      	mov	r1, r9
  4069b6:	f000 f9cb 	bl	406d50 <memmove>
  4069ba:	68a3      	ldr	r3, [r4, #8]
  4069bc:	6822      	ldr	r2, [r4, #0]
  4069be:	eba3 0308 	sub.w	r3, r3, r8
  4069c2:	4442      	add	r2, r8
  4069c4:	60a3      	str	r3, [r4, #8]
  4069c6:	6022      	str	r2, [r4, #0]
  4069c8:	b10b      	cbz	r3, 4069ce <__sfvwrite_r+0x1ca>
  4069ca:	46c2      	mov	sl, r8
  4069cc:	e779      	b.n	4068c2 <__sfvwrite_r+0xbe>
  4069ce:	4621      	mov	r1, r4
  4069d0:	9800      	ldr	r0, [sp, #0]
  4069d2:	f7ff fcb3 	bl	40633c <_fflush_r>
  4069d6:	2800      	cmp	r0, #0
  4069d8:	d192      	bne.n	406900 <__sfvwrite_r+0xfc>
  4069da:	46c2      	mov	sl, r8
  4069dc:	e771      	b.n	4068c2 <__sfvwrite_r+0xbe>
  4069de:	465a      	mov	r2, fp
  4069e0:	4629      	mov	r1, r5
  4069e2:	f000 f9b5 	bl	406d50 <memmove>
  4069e6:	68a2      	ldr	r2, [r4, #8]
  4069e8:	6823      	ldr	r3, [r4, #0]
  4069ea:	eba2 020b 	sub.w	r2, r2, fp
  4069ee:	445b      	add	r3, fp
  4069f0:	60a2      	str	r2, [r4, #8]
  4069f2:	6023      	str	r3, [r4, #0]
  4069f4:	e7af      	b.n	406956 <__sfvwrite_r+0x152>
  4069f6:	6820      	ldr	r0, [r4, #0]
  4069f8:	46b8      	mov	r8, r7
  4069fa:	46ba      	mov	sl, r7
  4069fc:	46bb      	mov	fp, r7
  4069fe:	e755      	b.n	4068ac <__sfvwrite_r+0xa8>
  406a00:	6962      	ldr	r2, [r4, #20]
  406a02:	6820      	ldr	r0, [r4, #0]
  406a04:	6921      	ldr	r1, [r4, #16]
  406a06:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  406a0a:	eba0 0a01 	sub.w	sl, r0, r1
  406a0e:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  406a12:	f10a 0001 	add.w	r0, sl, #1
  406a16:	ea4f 0868 	mov.w	r8, r8, asr #1
  406a1a:	4438      	add	r0, r7
  406a1c:	4540      	cmp	r0, r8
  406a1e:	4642      	mov	r2, r8
  406a20:	bf84      	itt	hi
  406a22:	4680      	movhi	r8, r0
  406a24:	4642      	movhi	r2, r8
  406a26:	055b      	lsls	r3, r3, #21
  406a28:	d544      	bpl.n	406ab4 <__sfvwrite_r+0x2b0>
  406a2a:	4611      	mov	r1, r2
  406a2c:	9800      	ldr	r0, [sp, #0]
  406a2e:	f7fb fd55 	bl	4024dc <_malloc_r>
  406a32:	4683      	mov	fp, r0
  406a34:	2800      	cmp	r0, #0
  406a36:	d055      	beq.n	406ae4 <__sfvwrite_r+0x2e0>
  406a38:	4652      	mov	r2, sl
  406a3a:	6921      	ldr	r1, [r4, #16]
  406a3c:	f7fb fffe 	bl	402a3c <memcpy>
  406a40:	89a3      	ldrh	r3, [r4, #12]
  406a42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  406a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406a4a:	81a3      	strh	r3, [r4, #12]
  406a4c:	eb0b 000a 	add.w	r0, fp, sl
  406a50:	eba8 030a 	sub.w	r3, r8, sl
  406a54:	f8c4 b010 	str.w	fp, [r4, #16]
  406a58:	f8c4 8014 	str.w	r8, [r4, #20]
  406a5c:	6020      	str	r0, [r4, #0]
  406a5e:	60a3      	str	r3, [r4, #8]
  406a60:	46b8      	mov	r8, r7
  406a62:	46ba      	mov	sl, r7
  406a64:	46bb      	mov	fp, r7
  406a66:	e721      	b.n	4068ac <__sfvwrite_r+0xa8>
  406a68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  406a6c:	42b9      	cmp	r1, r7
  406a6e:	bf28      	it	cs
  406a70:	4639      	movcs	r1, r7
  406a72:	464a      	mov	r2, r9
  406a74:	fb91 f1f3 	sdiv	r1, r1, r3
  406a78:	9800      	ldr	r0, [sp, #0]
  406a7a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406a7c:	fb03 f301 	mul.w	r3, r3, r1
  406a80:	69e1      	ldr	r1, [r4, #28]
  406a82:	47b0      	blx	r6
  406a84:	f1b0 0a00 	subs.w	sl, r0, #0
  406a88:	f73f af1b 	bgt.w	4068c2 <__sfvwrite_r+0xbe>
  406a8c:	e738      	b.n	406900 <__sfvwrite_r+0xfc>
  406a8e:	461a      	mov	r2, r3
  406a90:	4629      	mov	r1, r5
  406a92:	9301      	str	r3, [sp, #4]
  406a94:	f000 f95c 	bl	406d50 <memmove>
  406a98:	6822      	ldr	r2, [r4, #0]
  406a9a:	9b01      	ldr	r3, [sp, #4]
  406a9c:	9800      	ldr	r0, [sp, #0]
  406a9e:	441a      	add	r2, r3
  406aa0:	6022      	str	r2, [r4, #0]
  406aa2:	4621      	mov	r1, r4
  406aa4:	f7ff fc4a 	bl	40633c <_fflush_r>
  406aa8:	9b01      	ldr	r3, [sp, #4]
  406aaa:	2800      	cmp	r0, #0
  406aac:	f47f af28 	bne.w	406900 <__sfvwrite_r+0xfc>
  406ab0:	461f      	mov	r7, r3
  406ab2:	e750      	b.n	406956 <__sfvwrite_r+0x152>
  406ab4:	9800      	ldr	r0, [sp, #0]
  406ab6:	f000 fca9 	bl	40740c <_realloc_r>
  406aba:	4683      	mov	fp, r0
  406abc:	2800      	cmp	r0, #0
  406abe:	d1c5      	bne.n	406a4c <__sfvwrite_r+0x248>
  406ac0:	9d00      	ldr	r5, [sp, #0]
  406ac2:	6921      	ldr	r1, [r4, #16]
  406ac4:	4628      	mov	r0, r5
  406ac6:	f7ff fdb7 	bl	406638 <_free_r>
  406aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406ace:	220c      	movs	r2, #12
  406ad0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  406ad4:	602a      	str	r2, [r5, #0]
  406ad6:	e715      	b.n	406904 <__sfvwrite_r+0x100>
  406ad8:	f106 0901 	add.w	r9, r6, #1
  406adc:	e722      	b.n	406924 <__sfvwrite_r+0x120>
  406ade:	f04f 30ff 	mov.w	r0, #4294967295
  406ae2:	e6bf      	b.n	406864 <__sfvwrite_r+0x60>
  406ae4:	9a00      	ldr	r2, [sp, #0]
  406ae6:	230c      	movs	r3, #12
  406ae8:	6013      	str	r3, [r2, #0]
  406aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406aee:	e709      	b.n	406904 <__sfvwrite_r+0x100>
  406af0:	7ffffc00 	.word	0x7ffffc00

00406af4 <_fwalk_reent>:
  406af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406af8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  406afc:	d01f      	beq.n	406b3e <_fwalk_reent+0x4a>
  406afe:	4688      	mov	r8, r1
  406b00:	4606      	mov	r6, r0
  406b02:	f04f 0900 	mov.w	r9, #0
  406b06:	687d      	ldr	r5, [r7, #4]
  406b08:	68bc      	ldr	r4, [r7, #8]
  406b0a:	3d01      	subs	r5, #1
  406b0c:	d411      	bmi.n	406b32 <_fwalk_reent+0x3e>
  406b0e:	89a3      	ldrh	r3, [r4, #12]
  406b10:	2b01      	cmp	r3, #1
  406b12:	f105 35ff 	add.w	r5, r5, #4294967295
  406b16:	d908      	bls.n	406b2a <_fwalk_reent+0x36>
  406b18:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  406b1c:	3301      	adds	r3, #1
  406b1e:	4621      	mov	r1, r4
  406b20:	4630      	mov	r0, r6
  406b22:	d002      	beq.n	406b2a <_fwalk_reent+0x36>
  406b24:	47c0      	blx	r8
  406b26:	ea49 0900 	orr.w	r9, r9, r0
  406b2a:	1c6b      	adds	r3, r5, #1
  406b2c:	f104 0468 	add.w	r4, r4, #104	; 0x68
  406b30:	d1ed      	bne.n	406b0e <_fwalk_reent+0x1a>
  406b32:	683f      	ldr	r7, [r7, #0]
  406b34:	2f00      	cmp	r7, #0
  406b36:	d1e6      	bne.n	406b06 <_fwalk_reent+0x12>
  406b38:	4648      	mov	r0, r9
  406b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406b3e:	46b9      	mov	r9, r7
  406b40:	4648      	mov	r0, r9
  406b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406b46:	bf00      	nop

00406b48 <__locale_mb_cur_max>:
  406b48:	4b04      	ldr	r3, [pc, #16]	; (406b5c <__locale_mb_cur_max+0x14>)
  406b4a:	4a05      	ldr	r2, [pc, #20]	; (406b60 <__locale_mb_cur_max+0x18>)
  406b4c:	681b      	ldr	r3, [r3, #0]
  406b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  406b50:	2b00      	cmp	r3, #0
  406b52:	bf08      	it	eq
  406b54:	4613      	moveq	r3, r2
  406b56:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  406b5a:	4770      	bx	lr
  406b5c:	20400004 	.word	0x20400004
  406b60:	20400844 	.word	0x20400844

00406b64 <_localeconv_r>:
  406b64:	4a04      	ldr	r2, [pc, #16]	; (406b78 <_localeconv_r+0x14>)
  406b66:	4b05      	ldr	r3, [pc, #20]	; (406b7c <_localeconv_r+0x18>)
  406b68:	6812      	ldr	r2, [r2, #0]
  406b6a:	6b50      	ldr	r0, [r2, #52]	; 0x34
  406b6c:	2800      	cmp	r0, #0
  406b6e:	bf08      	it	eq
  406b70:	4618      	moveq	r0, r3
  406b72:	30f0      	adds	r0, #240	; 0xf0
  406b74:	4770      	bx	lr
  406b76:	bf00      	nop
  406b78:	20400004 	.word	0x20400004
  406b7c:	20400844 	.word	0x20400844

00406b80 <__retarget_lock_init_recursive>:
  406b80:	4770      	bx	lr
  406b82:	bf00      	nop

00406b84 <__retarget_lock_close_recursive>:
  406b84:	4770      	bx	lr
  406b86:	bf00      	nop

00406b88 <__retarget_lock_acquire_recursive>:
  406b88:	4770      	bx	lr
  406b8a:	bf00      	nop

00406b8c <__retarget_lock_release_recursive>:
  406b8c:	4770      	bx	lr
  406b8e:	bf00      	nop

00406b90 <__swhatbuf_r>:
  406b90:	b570      	push	{r4, r5, r6, lr}
  406b92:	460c      	mov	r4, r1
  406b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406b98:	2900      	cmp	r1, #0
  406b9a:	b090      	sub	sp, #64	; 0x40
  406b9c:	4615      	mov	r5, r2
  406b9e:	461e      	mov	r6, r3
  406ba0:	db14      	blt.n	406bcc <__swhatbuf_r+0x3c>
  406ba2:	aa01      	add	r2, sp, #4
  406ba4:	f001 f886 	bl	407cb4 <_fstat_r>
  406ba8:	2800      	cmp	r0, #0
  406baa:	db0f      	blt.n	406bcc <__swhatbuf_r+0x3c>
  406bac:	9a02      	ldr	r2, [sp, #8]
  406bae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  406bb2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  406bb6:	fab2 f282 	clz	r2, r2
  406bba:	0952      	lsrs	r2, r2, #5
  406bbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406bc0:	f44f 6000 	mov.w	r0, #2048	; 0x800
  406bc4:	6032      	str	r2, [r6, #0]
  406bc6:	602b      	str	r3, [r5, #0]
  406bc8:	b010      	add	sp, #64	; 0x40
  406bca:	bd70      	pop	{r4, r5, r6, pc}
  406bcc:	89a2      	ldrh	r2, [r4, #12]
  406bce:	2300      	movs	r3, #0
  406bd0:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  406bd4:	6033      	str	r3, [r6, #0]
  406bd6:	d004      	beq.n	406be2 <__swhatbuf_r+0x52>
  406bd8:	2240      	movs	r2, #64	; 0x40
  406bda:	4618      	mov	r0, r3
  406bdc:	602a      	str	r2, [r5, #0]
  406bde:	b010      	add	sp, #64	; 0x40
  406be0:	bd70      	pop	{r4, r5, r6, pc}
  406be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406be6:	602b      	str	r3, [r5, #0]
  406be8:	b010      	add	sp, #64	; 0x40
  406bea:	bd70      	pop	{r4, r5, r6, pc}

00406bec <__smakebuf_r>:
  406bec:	898a      	ldrh	r2, [r1, #12]
  406bee:	0792      	lsls	r2, r2, #30
  406bf0:	460b      	mov	r3, r1
  406bf2:	d506      	bpl.n	406c02 <__smakebuf_r+0x16>
  406bf4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  406bf8:	2101      	movs	r1, #1
  406bfa:	601a      	str	r2, [r3, #0]
  406bfc:	611a      	str	r2, [r3, #16]
  406bfe:	6159      	str	r1, [r3, #20]
  406c00:	4770      	bx	lr
  406c02:	b5f0      	push	{r4, r5, r6, r7, lr}
  406c04:	b083      	sub	sp, #12
  406c06:	ab01      	add	r3, sp, #4
  406c08:	466a      	mov	r2, sp
  406c0a:	460c      	mov	r4, r1
  406c0c:	4606      	mov	r6, r0
  406c0e:	f7ff ffbf 	bl	406b90 <__swhatbuf_r>
  406c12:	9900      	ldr	r1, [sp, #0]
  406c14:	4605      	mov	r5, r0
  406c16:	4630      	mov	r0, r6
  406c18:	f7fb fc60 	bl	4024dc <_malloc_r>
  406c1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406c20:	b1d8      	cbz	r0, 406c5a <__smakebuf_r+0x6e>
  406c22:	9a01      	ldr	r2, [sp, #4]
  406c24:	4f15      	ldr	r7, [pc, #84]	; (406c7c <__smakebuf_r+0x90>)
  406c26:	9900      	ldr	r1, [sp, #0]
  406c28:	63f7      	str	r7, [r6, #60]	; 0x3c
  406c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406c2e:	81a3      	strh	r3, [r4, #12]
  406c30:	6020      	str	r0, [r4, #0]
  406c32:	6120      	str	r0, [r4, #16]
  406c34:	6161      	str	r1, [r4, #20]
  406c36:	b91a      	cbnz	r2, 406c40 <__smakebuf_r+0x54>
  406c38:	432b      	orrs	r3, r5
  406c3a:	81a3      	strh	r3, [r4, #12]
  406c3c:	b003      	add	sp, #12
  406c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406c40:	4630      	mov	r0, r6
  406c42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406c46:	f001 f849 	bl	407cdc <_isatty_r>
  406c4a:	b1a0      	cbz	r0, 406c76 <__smakebuf_r+0x8a>
  406c4c:	89a3      	ldrh	r3, [r4, #12]
  406c4e:	f023 0303 	bic.w	r3, r3, #3
  406c52:	f043 0301 	orr.w	r3, r3, #1
  406c56:	b21b      	sxth	r3, r3
  406c58:	e7ee      	b.n	406c38 <__smakebuf_r+0x4c>
  406c5a:	059a      	lsls	r2, r3, #22
  406c5c:	d4ee      	bmi.n	406c3c <__smakebuf_r+0x50>
  406c5e:	f023 0303 	bic.w	r3, r3, #3
  406c62:	f104 0243 	add.w	r2, r4, #67	; 0x43
  406c66:	f043 0302 	orr.w	r3, r3, #2
  406c6a:	2101      	movs	r1, #1
  406c6c:	81a3      	strh	r3, [r4, #12]
  406c6e:	6022      	str	r2, [r4, #0]
  406c70:	6122      	str	r2, [r4, #16]
  406c72:	6161      	str	r1, [r4, #20]
  406c74:	e7e2      	b.n	406c3c <__smakebuf_r+0x50>
  406c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406c7a:	e7dd      	b.n	406c38 <__smakebuf_r+0x4c>
  406c7c:	00406391 	.word	0x00406391

00406c80 <__ascii_mbtowc>:
  406c80:	b082      	sub	sp, #8
  406c82:	b149      	cbz	r1, 406c98 <__ascii_mbtowc+0x18>
  406c84:	b15a      	cbz	r2, 406c9e <__ascii_mbtowc+0x1e>
  406c86:	b16b      	cbz	r3, 406ca4 <__ascii_mbtowc+0x24>
  406c88:	7813      	ldrb	r3, [r2, #0]
  406c8a:	600b      	str	r3, [r1, #0]
  406c8c:	7812      	ldrb	r2, [r2, #0]
  406c8e:	1c10      	adds	r0, r2, #0
  406c90:	bf18      	it	ne
  406c92:	2001      	movne	r0, #1
  406c94:	b002      	add	sp, #8
  406c96:	4770      	bx	lr
  406c98:	a901      	add	r1, sp, #4
  406c9a:	2a00      	cmp	r2, #0
  406c9c:	d1f3      	bne.n	406c86 <__ascii_mbtowc+0x6>
  406c9e:	4610      	mov	r0, r2
  406ca0:	b002      	add	sp, #8
  406ca2:	4770      	bx	lr
  406ca4:	f06f 0001 	mvn.w	r0, #1
  406ca8:	e7f4      	b.n	406c94 <__ascii_mbtowc+0x14>
  406caa:	bf00      	nop
  406cac:	0000      	movs	r0, r0
	...

00406cb0 <memchr>:
  406cb0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406cb4:	2a10      	cmp	r2, #16
  406cb6:	db2b      	blt.n	406d10 <memchr+0x60>
  406cb8:	f010 0f07 	tst.w	r0, #7
  406cbc:	d008      	beq.n	406cd0 <memchr+0x20>
  406cbe:	f810 3b01 	ldrb.w	r3, [r0], #1
  406cc2:	3a01      	subs	r2, #1
  406cc4:	428b      	cmp	r3, r1
  406cc6:	d02d      	beq.n	406d24 <memchr+0x74>
  406cc8:	f010 0f07 	tst.w	r0, #7
  406ccc:	b342      	cbz	r2, 406d20 <memchr+0x70>
  406cce:	d1f6      	bne.n	406cbe <memchr+0xe>
  406cd0:	b4f0      	push	{r4, r5, r6, r7}
  406cd2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406cd6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  406cda:	f022 0407 	bic.w	r4, r2, #7
  406cde:	f07f 0700 	mvns.w	r7, #0
  406ce2:	2300      	movs	r3, #0
  406ce4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406ce8:	3c08      	subs	r4, #8
  406cea:	ea85 0501 	eor.w	r5, r5, r1
  406cee:	ea86 0601 	eor.w	r6, r6, r1
  406cf2:	fa85 f547 	uadd8	r5, r5, r7
  406cf6:	faa3 f587 	sel	r5, r3, r7
  406cfa:	fa86 f647 	uadd8	r6, r6, r7
  406cfe:	faa5 f687 	sel	r6, r5, r7
  406d02:	b98e      	cbnz	r6, 406d28 <memchr+0x78>
  406d04:	d1ee      	bne.n	406ce4 <memchr+0x34>
  406d06:	bcf0      	pop	{r4, r5, r6, r7}
  406d08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406d0c:	f002 0207 	and.w	r2, r2, #7
  406d10:	b132      	cbz	r2, 406d20 <memchr+0x70>
  406d12:	f810 3b01 	ldrb.w	r3, [r0], #1
  406d16:	3a01      	subs	r2, #1
  406d18:	ea83 0301 	eor.w	r3, r3, r1
  406d1c:	b113      	cbz	r3, 406d24 <memchr+0x74>
  406d1e:	d1f8      	bne.n	406d12 <memchr+0x62>
  406d20:	2000      	movs	r0, #0
  406d22:	4770      	bx	lr
  406d24:	3801      	subs	r0, #1
  406d26:	4770      	bx	lr
  406d28:	2d00      	cmp	r5, #0
  406d2a:	bf06      	itte	eq
  406d2c:	4635      	moveq	r5, r6
  406d2e:	3803      	subeq	r0, #3
  406d30:	3807      	subne	r0, #7
  406d32:	f015 0f01 	tst.w	r5, #1
  406d36:	d107      	bne.n	406d48 <memchr+0x98>
  406d38:	3001      	adds	r0, #1
  406d3a:	f415 7f80 	tst.w	r5, #256	; 0x100
  406d3e:	bf02      	ittt	eq
  406d40:	3001      	addeq	r0, #1
  406d42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406d46:	3001      	addeq	r0, #1
  406d48:	bcf0      	pop	{r4, r5, r6, r7}
  406d4a:	3801      	subs	r0, #1
  406d4c:	4770      	bx	lr
  406d4e:	bf00      	nop

00406d50 <memmove>:
  406d50:	4288      	cmp	r0, r1
  406d52:	b5f0      	push	{r4, r5, r6, r7, lr}
  406d54:	d90d      	bls.n	406d72 <memmove+0x22>
  406d56:	188b      	adds	r3, r1, r2
  406d58:	4298      	cmp	r0, r3
  406d5a:	d20a      	bcs.n	406d72 <memmove+0x22>
  406d5c:	1884      	adds	r4, r0, r2
  406d5e:	2a00      	cmp	r2, #0
  406d60:	d051      	beq.n	406e06 <memmove+0xb6>
  406d62:	4622      	mov	r2, r4
  406d64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  406d68:	f802 4d01 	strb.w	r4, [r2, #-1]!
  406d6c:	4299      	cmp	r1, r3
  406d6e:	d1f9      	bne.n	406d64 <memmove+0x14>
  406d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406d72:	2a0f      	cmp	r2, #15
  406d74:	d948      	bls.n	406e08 <memmove+0xb8>
  406d76:	ea41 0300 	orr.w	r3, r1, r0
  406d7a:	079b      	lsls	r3, r3, #30
  406d7c:	d146      	bne.n	406e0c <memmove+0xbc>
  406d7e:	f100 0410 	add.w	r4, r0, #16
  406d82:	f101 0310 	add.w	r3, r1, #16
  406d86:	4615      	mov	r5, r2
  406d88:	f853 6c10 	ldr.w	r6, [r3, #-16]
  406d8c:	f844 6c10 	str.w	r6, [r4, #-16]
  406d90:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406d94:	f844 6c0c 	str.w	r6, [r4, #-12]
  406d98:	f853 6c08 	ldr.w	r6, [r3, #-8]
  406d9c:	f844 6c08 	str.w	r6, [r4, #-8]
  406da0:	3d10      	subs	r5, #16
  406da2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  406da6:	f844 6c04 	str.w	r6, [r4, #-4]
  406daa:	2d0f      	cmp	r5, #15
  406dac:	f103 0310 	add.w	r3, r3, #16
  406db0:	f104 0410 	add.w	r4, r4, #16
  406db4:	d8e8      	bhi.n	406d88 <memmove+0x38>
  406db6:	f1a2 0310 	sub.w	r3, r2, #16
  406dba:	f023 030f 	bic.w	r3, r3, #15
  406dbe:	f002 0e0f 	and.w	lr, r2, #15
  406dc2:	3310      	adds	r3, #16
  406dc4:	f1be 0f03 	cmp.w	lr, #3
  406dc8:	4419      	add	r1, r3
  406dca:	4403      	add	r3, r0
  406dcc:	d921      	bls.n	406e12 <memmove+0xc2>
  406dce:	1f1e      	subs	r6, r3, #4
  406dd0:	460d      	mov	r5, r1
  406dd2:	4674      	mov	r4, lr
  406dd4:	3c04      	subs	r4, #4
  406dd6:	f855 7b04 	ldr.w	r7, [r5], #4
  406dda:	f846 7f04 	str.w	r7, [r6, #4]!
  406dde:	2c03      	cmp	r4, #3
  406de0:	d8f8      	bhi.n	406dd4 <memmove+0x84>
  406de2:	f1ae 0404 	sub.w	r4, lr, #4
  406de6:	f024 0403 	bic.w	r4, r4, #3
  406dea:	3404      	adds	r4, #4
  406dec:	4421      	add	r1, r4
  406dee:	4423      	add	r3, r4
  406df0:	f002 0203 	and.w	r2, r2, #3
  406df4:	b162      	cbz	r2, 406e10 <memmove+0xc0>
  406df6:	3b01      	subs	r3, #1
  406df8:	440a      	add	r2, r1
  406dfa:	f811 4b01 	ldrb.w	r4, [r1], #1
  406dfe:	f803 4f01 	strb.w	r4, [r3, #1]!
  406e02:	428a      	cmp	r2, r1
  406e04:	d1f9      	bne.n	406dfa <memmove+0xaa>
  406e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406e08:	4603      	mov	r3, r0
  406e0a:	e7f3      	b.n	406df4 <memmove+0xa4>
  406e0c:	4603      	mov	r3, r0
  406e0e:	e7f2      	b.n	406df6 <memmove+0xa6>
  406e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406e12:	4672      	mov	r2, lr
  406e14:	e7ee      	b.n	406df4 <memmove+0xa4>
  406e16:	bf00      	nop

00406e18 <_Balloc>:
  406e18:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  406e1a:	b570      	push	{r4, r5, r6, lr}
  406e1c:	4605      	mov	r5, r0
  406e1e:	460c      	mov	r4, r1
  406e20:	b14b      	cbz	r3, 406e36 <_Balloc+0x1e>
  406e22:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  406e26:	b180      	cbz	r0, 406e4a <_Balloc+0x32>
  406e28:	6802      	ldr	r2, [r0, #0]
  406e2a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  406e2e:	2300      	movs	r3, #0
  406e30:	6103      	str	r3, [r0, #16]
  406e32:	60c3      	str	r3, [r0, #12]
  406e34:	bd70      	pop	{r4, r5, r6, pc}
  406e36:	2221      	movs	r2, #33	; 0x21
  406e38:	2104      	movs	r1, #4
  406e3a:	f000 fe97 	bl	407b6c <_calloc_r>
  406e3e:	64e8      	str	r0, [r5, #76]	; 0x4c
  406e40:	4603      	mov	r3, r0
  406e42:	2800      	cmp	r0, #0
  406e44:	d1ed      	bne.n	406e22 <_Balloc+0xa>
  406e46:	2000      	movs	r0, #0
  406e48:	bd70      	pop	{r4, r5, r6, pc}
  406e4a:	2101      	movs	r1, #1
  406e4c:	fa01 f604 	lsl.w	r6, r1, r4
  406e50:	1d72      	adds	r2, r6, #5
  406e52:	4628      	mov	r0, r5
  406e54:	0092      	lsls	r2, r2, #2
  406e56:	f000 fe89 	bl	407b6c <_calloc_r>
  406e5a:	2800      	cmp	r0, #0
  406e5c:	d0f3      	beq.n	406e46 <_Balloc+0x2e>
  406e5e:	6044      	str	r4, [r0, #4]
  406e60:	6086      	str	r6, [r0, #8]
  406e62:	e7e4      	b.n	406e2e <_Balloc+0x16>

00406e64 <_Bfree>:
  406e64:	b131      	cbz	r1, 406e74 <_Bfree+0x10>
  406e66:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  406e68:	684a      	ldr	r2, [r1, #4]
  406e6a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  406e6e:	6008      	str	r0, [r1, #0]
  406e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  406e74:	4770      	bx	lr
  406e76:	bf00      	nop

00406e78 <__multadd>:
  406e78:	b5f0      	push	{r4, r5, r6, r7, lr}
  406e7a:	690c      	ldr	r4, [r1, #16]
  406e7c:	b083      	sub	sp, #12
  406e7e:	460d      	mov	r5, r1
  406e80:	4606      	mov	r6, r0
  406e82:	f101 0e14 	add.w	lr, r1, #20
  406e86:	2700      	movs	r7, #0
  406e88:	f8de 0000 	ldr.w	r0, [lr]
  406e8c:	b281      	uxth	r1, r0
  406e8e:	fb02 3301 	mla	r3, r2, r1, r3
  406e92:	0c01      	lsrs	r1, r0, #16
  406e94:	0c18      	lsrs	r0, r3, #16
  406e96:	fb02 0101 	mla	r1, r2, r1, r0
  406e9a:	b29b      	uxth	r3, r3
  406e9c:	3701      	adds	r7, #1
  406e9e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  406ea2:	42bc      	cmp	r4, r7
  406ea4:	f84e 3b04 	str.w	r3, [lr], #4
  406ea8:	ea4f 4311 	mov.w	r3, r1, lsr #16
  406eac:	dcec      	bgt.n	406e88 <__multadd+0x10>
  406eae:	b13b      	cbz	r3, 406ec0 <__multadd+0x48>
  406eb0:	68aa      	ldr	r2, [r5, #8]
  406eb2:	4294      	cmp	r4, r2
  406eb4:	da07      	bge.n	406ec6 <__multadd+0x4e>
  406eb6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  406eba:	3401      	adds	r4, #1
  406ebc:	6153      	str	r3, [r2, #20]
  406ebe:	612c      	str	r4, [r5, #16]
  406ec0:	4628      	mov	r0, r5
  406ec2:	b003      	add	sp, #12
  406ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406ec6:	6869      	ldr	r1, [r5, #4]
  406ec8:	9301      	str	r3, [sp, #4]
  406eca:	3101      	adds	r1, #1
  406ecc:	4630      	mov	r0, r6
  406ece:	f7ff ffa3 	bl	406e18 <_Balloc>
  406ed2:	692a      	ldr	r2, [r5, #16]
  406ed4:	3202      	adds	r2, #2
  406ed6:	f105 010c 	add.w	r1, r5, #12
  406eda:	4607      	mov	r7, r0
  406edc:	0092      	lsls	r2, r2, #2
  406ede:	300c      	adds	r0, #12
  406ee0:	f7fb fdac 	bl	402a3c <memcpy>
  406ee4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  406ee6:	6869      	ldr	r1, [r5, #4]
  406ee8:	9b01      	ldr	r3, [sp, #4]
  406eea:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  406eee:	6028      	str	r0, [r5, #0]
  406ef0:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  406ef4:	463d      	mov	r5, r7
  406ef6:	e7de      	b.n	406eb6 <__multadd+0x3e>

00406ef8 <__hi0bits>:
  406ef8:	0c02      	lsrs	r2, r0, #16
  406efa:	0412      	lsls	r2, r2, #16
  406efc:	4603      	mov	r3, r0
  406efe:	b9b2      	cbnz	r2, 406f2e <__hi0bits+0x36>
  406f00:	0403      	lsls	r3, r0, #16
  406f02:	2010      	movs	r0, #16
  406f04:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  406f08:	bf04      	itt	eq
  406f0a:	021b      	lsleq	r3, r3, #8
  406f0c:	3008      	addeq	r0, #8
  406f0e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  406f12:	bf04      	itt	eq
  406f14:	011b      	lsleq	r3, r3, #4
  406f16:	3004      	addeq	r0, #4
  406f18:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  406f1c:	bf04      	itt	eq
  406f1e:	009b      	lsleq	r3, r3, #2
  406f20:	3002      	addeq	r0, #2
  406f22:	2b00      	cmp	r3, #0
  406f24:	db02      	blt.n	406f2c <__hi0bits+0x34>
  406f26:	005b      	lsls	r3, r3, #1
  406f28:	d403      	bmi.n	406f32 <__hi0bits+0x3a>
  406f2a:	2020      	movs	r0, #32
  406f2c:	4770      	bx	lr
  406f2e:	2000      	movs	r0, #0
  406f30:	e7e8      	b.n	406f04 <__hi0bits+0xc>
  406f32:	3001      	adds	r0, #1
  406f34:	4770      	bx	lr
  406f36:	bf00      	nop

00406f38 <__lo0bits>:
  406f38:	6803      	ldr	r3, [r0, #0]
  406f3a:	f013 0207 	ands.w	r2, r3, #7
  406f3e:	4601      	mov	r1, r0
  406f40:	d007      	beq.n	406f52 <__lo0bits+0x1a>
  406f42:	07da      	lsls	r2, r3, #31
  406f44:	d421      	bmi.n	406f8a <__lo0bits+0x52>
  406f46:	0798      	lsls	r0, r3, #30
  406f48:	d421      	bmi.n	406f8e <__lo0bits+0x56>
  406f4a:	089b      	lsrs	r3, r3, #2
  406f4c:	600b      	str	r3, [r1, #0]
  406f4e:	2002      	movs	r0, #2
  406f50:	4770      	bx	lr
  406f52:	b298      	uxth	r0, r3
  406f54:	b198      	cbz	r0, 406f7e <__lo0bits+0x46>
  406f56:	4610      	mov	r0, r2
  406f58:	f013 0fff 	tst.w	r3, #255	; 0xff
  406f5c:	bf04      	itt	eq
  406f5e:	0a1b      	lsreq	r3, r3, #8
  406f60:	3008      	addeq	r0, #8
  406f62:	071a      	lsls	r2, r3, #28
  406f64:	bf04      	itt	eq
  406f66:	091b      	lsreq	r3, r3, #4
  406f68:	3004      	addeq	r0, #4
  406f6a:	079a      	lsls	r2, r3, #30
  406f6c:	bf04      	itt	eq
  406f6e:	089b      	lsreq	r3, r3, #2
  406f70:	3002      	addeq	r0, #2
  406f72:	07da      	lsls	r2, r3, #31
  406f74:	d407      	bmi.n	406f86 <__lo0bits+0x4e>
  406f76:	085b      	lsrs	r3, r3, #1
  406f78:	d104      	bne.n	406f84 <__lo0bits+0x4c>
  406f7a:	2020      	movs	r0, #32
  406f7c:	4770      	bx	lr
  406f7e:	0c1b      	lsrs	r3, r3, #16
  406f80:	2010      	movs	r0, #16
  406f82:	e7e9      	b.n	406f58 <__lo0bits+0x20>
  406f84:	3001      	adds	r0, #1
  406f86:	600b      	str	r3, [r1, #0]
  406f88:	4770      	bx	lr
  406f8a:	2000      	movs	r0, #0
  406f8c:	4770      	bx	lr
  406f8e:	085b      	lsrs	r3, r3, #1
  406f90:	600b      	str	r3, [r1, #0]
  406f92:	2001      	movs	r0, #1
  406f94:	4770      	bx	lr
  406f96:	bf00      	nop

00406f98 <__i2b>:
  406f98:	b510      	push	{r4, lr}
  406f9a:	460c      	mov	r4, r1
  406f9c:	2101      	movs	r1, #1
  406f9e:	f7ff ff3b 	bl	406e18 <_Balloc>
  406fa2:	2201      	movs	r2, #1
  406fa4:	6144      	str	r4, [r0, #20]
  406fa6:	6102      	str	r2, [r0, #16]
  406fa8:	bd10      	pop	{r4, pc}
  406faa:	bf00      	nop

00406fac <__multiply>:
  406fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406fb0:	690c      	ldr	r4, [r1, #16]
  406fb2:	6915      	ldr	r5, [r2, #16]
  406fb4:	42ac      	cmp	r4, r5
  406fb6:	b083      	sub	sp, #12
  406fb8:	468b      	mov	fp, r1
  406fba:	4616      	mov	r6, r2
  406fbc:	da04      	bge.n	406fc8 <__multiply+0x1c>
  406fbe:	4622      	mov	r2, r4
  406fc0:	46b3      	mov	fp, r6
  406fc2:	462c      	mov	r4, r5
  406fc4:	460e      	mov	r6, r1
  406fc6:	4615      	mov	r5, r2
  406fc8:	f8db 3008 	ldr.w	r3, [fp, #8]
  406fcc:	f8db 1004 	ldr.w	r1, [fp, #4]
  406fd0:	eb04 0805 	add.w	r8, r4, r5
  406fd4:	4598      	cmp	r8, r3
  406fd6:	bfc8      	it	gt
  406fd8:	3101      	addgt	r1, #1
  406fda:	f7ff ff1d 	bl	406e18 <_Balloc>
  406fde:	f100 0914 	add.w	r9, r0, #20
  406fe2:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  406fe6:	45d1      	cmp	r9, sl
  406fe8:	9000      	str	r0, [sp, #0]
  406fea:	d205      	bcs.n	406ff8 <__multiply+0x4c>
  406fec:	464b      	mov	r3, r9
  406fee:	2100      	movs	r1, #0
  406ff0:	f843 1b04 	str.w	r1, [r3], #4
  406ff4:	459a      	cmp	sl, r3
  406ff6:	d8fb      	bhi.n	406ff0 <__multiply+0x44>
  406ff8:	f106 0c14 	add.w	ip, r6, #20
  406ffc:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  407000:	f10b 0b14 	add.w	fp, fp, #20
  407004:	459c      	cmp	ip, r3
  407006:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40700a:	d24c      	bcs.n	4070a6 <__multiply+0xfa>
  40700c:	f8cd a004 	str.w	sl, [sp, #4]
  407010:	469a      	mov	sl, r3
  407012:	f8dc 5000 	ldr.w	r5, [ip]
  407016:	b2af      	uxth	r7, r5
  407018:	b1ef      	cbz	r7, 407056 <__multiply+0xaa>
  40701a:	2100      	movs	r1, #0
  40701c:	464d      	mov	r5, r9
  40701e:	465e      	mov	r6, fp
  407020:	460c      	mov	r4, r1
  407022:	f856 2b04 	ldr.w	r2, [r6], #4
  407026:	6828      	ldr	r0, [r5, #0]
  407028:	b293      	uxth	r3, r2
  40702a:	b281      	uxth	r1, r0
  40702c:	fb07 1303 	mla	r3, r7, r3, r1
  407030:	0c12      	lsrs	r2, r2, #16
  407032:	0c01      	lsrs	r1, r0, #16
  407034:	4423      	add	r3, r4
  407036:	fb07 1102 	mla	r1, r7, r2, r1
  40703a:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40703e:	b29b      	uxth	r3, r3
  407040:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  407044:	45b6      	cmp	lr, r6
  407046:	f845 3b04 	str.w	r3, [r5], #4
  40704a:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40704e:	d8e8      	bhi.n	407022 <__multiply+0x76>
  407050:	602c      	str	r4, [r5, #0]
  407052:	f8dc 5000 	ldr.w	r5, [ip]
  407056:	0c2d      	lsrs	r5, r5, #16
  407058:	d01d      	beq.n	407096 <__multiply+0xea>
  40705a:	f8d9 3000 	ldr.w	r3, [r9]
  40705e:	4648      	mov	r0, r9
  407060:	461c      	mov	r4, r3
  407062:	4659      	mov	r1, fp
  407064:	2200      	movs	r2, #0
  407066:	880e      	ldrh	r6, [r1, #0]
  407068:	0c24      	lsrs	r4, r4, #16
  40706a:	fb05 4406 	mla	r4, r5, r6, r4
  40706e:	4422      	add	r2, r4
  407070:	b29b      	uxth	r3, r3
  407072:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  407076:	f840 3b04 	str.w	r3, [r0], #4
  40707a:	f851 3b04 	ldr.w	r3, [r1], #4
  40707e:	6804      	ldr	r4, [r0, #0]
  407080:	0c1b      	lsrs	r3, r3, #16
  407082:	b2a6      	uxth	r6, r4
  407084:	fb05 6303 	mla	r3, r5, r3, r6
  407088:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40708c:	458e      	cmp	lr, r1
  40708e:	ea4f 4213 	mov.w	r2, r3, lsr #16
  407092:	d8e8      	bhi.n	407066 <__multiply+0xba>
  407094:	6003      	str	r3, [r0, #0]
  407096:	f10c 0c04 	add.w	ip, ip, #4
  40709a:	45e2      	cmp	sl, ip
  40709c:	f109 0904 	add.w	r9, r9, #4
  4070a0:	d8b7      	bhi.n	407012 <__multiply+0x66>
  4070a2:	f8dd a004 	ldr.w	sl, [sp, #4]
  4070a6:	f1b8 0f00 	cmp.w	r8, #0
  4070aa:	dd0b      	ble.n	4070c4 <__multiply+0x118>
  4070ac:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  4070b0:	f1aa 0a04 	sub.w	sl, sl, #4
  4070b4:	b11b      	cbz	r3, 4070be <__multiply+0x112>
  4070b6:	e005      	b.n	4070c4 <__multiply+0x118>
  4070b8:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  4070bc:	b913      	cbnz	r3, 4070c4 <__multiply+0x118>
  4070be:	f1b8 0801 	subs.w	r8, r8, #1
  4070c2:	d1f9      	bne.n	4070b8 <__multiply+0x10c>
  4070c4:	9800      	ldr	r0, [sp, #0]
  4070c6:	f8c0 8010 	str.w	r8, [r0, #16]
  4070ca:	b003      	add	sp, #12
  4070cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004070d0 <__pow5mult>:
  4070d0:	f012 0303 	ands.w	r3, r2, #3
  4070d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4070d8:	4614      	mov	r4, r2
  4070da:	4607      	mov	r7, r0
  4070dc:	d12e      	bne.n	40713c <__pow5mult+0x6c>
  4070de:	460d      	mov	r5, r1
  4070e0:	10a4      	asrs	r4, r4, #2
  4070e2:	d01c      	beq.n	40711e <__pow5mult+0x4e>
  4070e4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  4070e6:	b396      	cbz	r6, 40714e <__pow5mult+0x7e>
  4070e8:	07e3      	lsls	r3, r4, #31
  4070ea:	f04f 0800 	mov.w	r8, #0
  4070ee:	d406      	bmi.n	4070fe <__pow5mult+0x2e>
  4070f0:	1064      	asrs	r4, r4, #1
  4070f2:	d014      	beq.n	40711e <__pow5mult+0x4e>
  4070f4:	6830      	ldr	r0, [r6, #0]
  4070f6:	b1a8      	cbz	r0, 407124 <__pow5mult+0x54>
  4070f8:	4606      	mov	r6, r0
  4070fa:	07e3      	lsls	r3, r4, #31
  4070fc:	d5f8      	bpl.n	4070f0 <__pow5mult+0x20>
  4070fe:	4632      	mov	r2, r6
  407100:	4629      	mov	r1, r5
  407102:	4638      	mov	r0, r7
  407104:	f7ff ff52 	bl	406fac <__multiply>
  407108:	b1b5      	cbz	r5, 407138 <__pow5mult+0x68>
  40710a:	686a      	ldr	r2, [r5, #4]
  40710c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40710e:	1064      	asrs	r4, r4, #1
  407110:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407114:	6029      	str	r1, [r5, #0]
  407116:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40711a:	4605      	mov	r5, r0
  40711c:	d1ea      	bne.n	4070f4 <__pow5mult+0x24>
  40711e:	4628      	mov	r0, r5
  407120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407124:	4632      	mov	r2, r6
  407126:	4631      	mov	r1, r6
  407128:	4638      	mov	r0, r7
  40712a:	f7ff ff3f 	bl	406fac <__multiply>
  40712e:	6030      	str	r0, [r6, #0]
  407130:	f8c0 8000 	str.w	r8, [r0]
  407134:	4606      	mov	r6, r0
  407136:	e7e0      	b.n	4070fa <__pow5mult+0x2a>
  407138:	4605      	mov	r5, r0
  40713a:	e7d9      	b.n	4070f0 <__pow5mult+0x20>
  40713c:	1e5a      	subs	r2, r3, #1
  40713e:	4d0b      	ldr	r5, [pc, #44]	; (40716c <__pow5mult+0x9c>)
  407140:	2300      	movs	r3, #0
  407142:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  407146:	f7ff fe97 	bl	406e78 <__multadd>
  40714a:	4605      	mov	r5, r0
  40714c:	e7c8      	b.n	4070e0 <__pow5mult+0x10>
  40714e:	2101      	movs	r1, #1
  407150:	4638      	mov	r0, r7
  407152:	f7ff fe61 	bl	406e18 <_Balloc>
  407156:	f240 2171 	movw	r1, #625	; 0x271
  40715a:	2201      	movs	r2, #1
  40715c:	2300      	movs	r3, #0
  40715e:	6141      	str	r1, [r0, #20]
  407160:	6102      	str	r2, [r0, #16]
  407162:	4606      	mov	r6, r0
  407164:	64b8      	str	r0, [r7, #72]	; 0x48
  407166:	6003      	str	r3, [r0, #0]
  407168:	e7be      	b.n	4070e8 <__pow5mult+0x18>
  40716a:	bf00      	nop
  40716c:	00409ca0 	.word	0x00409ca0

00407170 <__lshift>:
  407170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407174:	4691      	mov	r9, r2
  407176:	690a      	ldr	r2, [r1, #16]
  407178:	688b      	ldr	r3, [r1, #8]
  40717a:	ea4f 1469 	mov.w	r4, r9, asr #5
  40717e:	eb04 0802 	add.w	r8, r4, r2
  407182:	f108 0501 	add.w	r5, r8, #1
  407186:	429d      	cmp	r5, r3
  407188:	460e      	mov	r6, r1
  40718a:	4607      	mov	r7, r0
  40718c:	6849      	ldr	r1, [r1, #4]
  40718e:	dd04      	ble.n	40719a <__lshift+0x2a>
  407190:	005b      	lsls	r3, r3, #1
  407192:	429d      	cmp	r5, r3
  407194:	f101 0101 	add.w	r1, r1, #1
  407198:	dcfa      	bgt.n	407190 <__lshift+0x20>
  40719a:	4638      	mov	r0, r7
  40719c:	f7ff fe3c 	bl	406e18 <_Balloc>
  4071a0:	2c00      	cmp	r4, #0
  4071a2:	f100 0314 	add.w	r3, r0, #20
  4071a6:	dd06      	ble.n	4071b6 <__lshift+0x46>
  4071a8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  4071ac:	2100      	movs	r1, #0
  4071ae:	f843 1b04 	str.w	r1, [r3], #4
  4071b2:	429a      	cmp	r2, r3
  4071b4:	d1fb      	bne.n	4071ae <__lshift+0x3e>
  4071b6:	6934      	ldr	r4, [r6, #16]
  4071b8:	f106 0114 	add.w	r1, r6, #20
  4071bc:	f019 091f 	ands.w	r9, r9, #31
  4071c0:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  4071c4:	d01d      	beq.n	407202 <__lshift+0x92>
  4071c6:	f1c9 0c20 	rsb	ip, r9, #32
  4071ca:	2200      	movs	r2, #0
  4071cc:	680c      	ldr	r4, [r1, #0]
  4071ce:	fa04 f409 	lsl.w	r4, r4, r9
  4071d2:	4314      	orrs	r4, r2
  4071d4:	f843 4b04 	str.w	r4, [r3], #4
  4071d8:	f851 2b04 	ldr.w	r2, [r1], #4
  4071dc:	458e      	cmp	lr, r1
  4071de:	fa22 f20c 	lsr.w	r2, r2, ip
  4071e2:	d8f3      	bhi.n	4071cc <__lshift+0x5c>
  4071e4:	601a      	str	r2, [r3, #0]
  4071e6:	b10a      	cbz	r2, 4071ec <__lshift+0x7c>
  4071e8:	f108 0502 	add.w	r5, r8, #2
  4071ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4071ee:	6872      	ldr	r2, [r6, #4]
  4071f0:	3d01      	subs	r5, #1
  4071f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4071f6:	6105      	str	r5, [r0, #16]
  4071f8:	6031      	str	r1, [r6, #0]
  4071fa:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  4071fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407202:	3b04      	subs	r3, #4
  407204:	f851 2b04 	ldr.w	r2, [r1], #4
  407208:	f843 2f04 	str.w	r2, [r3, #4]!
  40720c:	458e      	cmp	lr, r1
  40720e:	d8f9      	bhi.n	407204 <__lshift+0x94>
  407210:	e7ec      	b.n	4071ec <__lshift+0x7c>
  407212:	bf00      	nop

00407214 <__mcmp>:
  407214:	b430      	push	{r4, r5}
  407216:	690b      	ldr	r3, [r1, #16]
  407218:	4605      	mov	r5, r0
  40721a:	6900      	ldr	r0, [r0, #16]
  40721c:	1ac0      	subs	r0, r0, r3
  40721e:	d10f      	bne.n	407240 <__mcmp+0x2c>
  407220:	009b      	lsls	r3, r3, #2
  407222:	3514      	adds	r5, #20
  407224:	3114      	adds	r1, #20
  407226:	4419      	add	r1, r3
  407228:	442b      	add	r3, r5
  40722a:	e001      	b.n	407230 <__mcmp+0x1c>
  40722c:	429d      	cmp	r5, r3
  40722e:	d207      	bcs.n	407240 <__mcmp+0x2c>
  407230:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  407234:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  407238:	4294      	cmp	r4, r2
  40723a:	d0f7      	beq.n	40722c <__mcmp+0x18>
  40723c:	d302      	bcc.n	407244 <__mcmp+0x30>
  40723e:	2001      	movs	r0, #1
  407240:	bc30      	pop	{r4, r5}
  407242:	4770      	bx	lr
  407244:	f04f 30ff 	mov.w	r0, #4294967295
  407248:	e7fa      	b.n	407240 <__mcmp+0x2c>
  40724a:	bf00      	nop

0040724c <__mdiff>:
  40724c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407250:	690f      	ldr	r7, [r1, #16]
  407252:	460e      	mov	r6, r1
  407254:	6911      	ldr	r1, [r2, #16]
  407256:	1a7f      	subs	r7, r7, r1
  407258:	2f00      	cmp	r7, #0
  40725a:	4690      	mov	r8, r2
  40725c:	d117      	bne.n	40728e <__mdiff+0x42>
  40725e:	0089      	lsls	r1, r1, #2
  407260:	f106 0514 	add.w	r5, r6, #20
  407264:	f102 0e14 	add.w	lr, r2, #20
  407268:	186b      	adds	r3, r5, r1
  40726a:	4471      	add	r1, lr
  40726c:	e001      	b.n	407272 <__mdiff+0x26>
  40726e:	429d      	cmp	r5, r3
  407270:	d25c      	bcs.n	40732c <__mdiff+0xe0>
  407272:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  407276:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40727a:	42a2      	cmp	r2, r4
  40727c:	d0f7      	beq.n	40726e <__mdiff+0x22>
  40727e:	d25e      	bcs.n	40733e <__mdiff+0xf2>
  407280:	4633      	mov	r3, r6
  407282:	462c      	mov	r4, r5
  407284:	4646      	mov	r6, r8
  407286:	4675      	mov	r5, lr
  407288:	4698      	mov	r8, r3
  40728a:	2701      	movs	r7, #1
  40728c:	e005      	b.n	40729a <__mdiff+0x4e>
  40728e:	db58      	blt.n	407342 <__mdiff+0xf6>
  407290:	f106 0514 	add.w	r5, r6, #20
  407294:	f108 0414 	add.w	r4, r8, #20
  407298:	2700      	movs	r7, #0
  40729a:	6871      	ldr	r1, [r6, #4]
  40729c:	f7ff fdbc 	bl	406e18 <_Balloc>
  4072a0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4072a4:	6936      	ldr	r6, [r6, #16]
  4072a6:	60c7      	str	r7, [r0, #12]
  4072a8:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  4072ac:	46a6      	mov	lr, r4
  4072ae:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  4072b2:	f100 0414 	add.w	r4, r0, #20
  4072b6:	2300      	movs	r3, #0
  4072b8:	f85e 1b04 	ldr.w	r1, [lr], #4
  4072bc:	f855 8b04 	ldr.w	r8, [r5], #4
  4072c0:	b28a      	uxth	r2, r1
  4072c2:	fa13 f388 	uxtah	r3, r3, r8
  4072c6:	0c09      	lsrs	r1, r1, #16
  4072c8:	1a9a      	subs	r2, r3, r2
  4072ca:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  4072ce:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4072d2:	b292      	uxth	r2, r2
  4072d4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4072d8:	45f4      	cmp	ip, lr
  4072da:	f844 2b04 	str.w	r2, [r4], #4
  4072de:	ea4f 4323 	mov.w	r3, r3, asr #16
  4072e2:	d8e9      	bhi.n	4072b8 <__mdiff+0x6c>
  4072e4:	42af      	cmp	r7, r5
  4072e6:	d917      	bls.n	407318 <__mdiff+0xcc>
  4072e8:	46a4      	mov	ip, r4
  4072ea:	46ae      	mov	lr, r5
  4072ec:	f85e 2b04 	ldr.w	r2, [lr], #4
  4072f0:	fa13 f382 	uxtah	r3, r3, r2
  4072f4:	1419      	asrs	r1, r3, #16
  4072f6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  4072fa:	b29b      	uxth	r3, r3
  4072fc:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  407300:	4577      	cmp	r7, lr
  407302:	f84c 2b04 	str.w	r2, [ip], #4
  407306:	ea4f 4321 	mov.w	r3, r1, asr #16
  40730a:	d8ef      	bhi.n	4072ec <__mdiff+0xa0>
  40730c:	43ed      	mvns	r5, r5
  40730e:	442f      	add	r7, r5
  407310:	f027 0703 	bic.w	r7, r7, #3
  407314:	3704      	adds	r7, #4
  407316:	443c      	add	r4, r7
  407318:	3c04      	subs	r4, #4
  40731a:	b922      	cbnz	r2, 407326 <__mdiff+0xda>
  40731c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  407320:	3e01      	subs	r6, #1
  407322:	2b00      	cmp	r3, #0
  407324:	d0fa      	beq.n	40731c <__mdiff+0xd0>
  407326:	6106      	str	r6, [r0, #16]
  407328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40732c:	2100      	movs	r1, #0
  40732e:	f7ff fd73 	bl	406e18 <_Balloc>
  407332:	2201      	movs	r2, #1
  407334:	2300      	movs	r3, #0
  407336:	6102      	str	r2, [r0, #16]
  407338:	6143      	str	r3, [r0, #20]
  40733a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40733e:	4674      	mov	r4, lr
  407340:	e7ab      	b.n	40729a <__mdiff+0x4e>
  407342:	4633      	mov	r3, r6
  407344:	f106 0414 	add.w	r4, r6, #20
  407348:	f102 0514 	add.w	r5, r2, #20
  40734c:	4616      	mov	r6, r2
  40734e:	2701      	movs	r7, #1
  407350:	4698      	mov	r8, r3
  407352:	e7a2      	b.n	40729a <__mdiff+0x4e>

00407354 <__d2b>:
  407354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407358:	b082      	sub	sp, #8
  40735a:	2101      	movs	r1, #1
  40735c:	461c      	mov	r4, r3
  40735e:	f3c3 570a 	ubfx	r7, r3, #20, #11
  407362:	4615      	mov	r5, r2
  407364:	9e08      	ldr	r6, [sp, #32]
  407366:	f7ff fd57 	bl	406e18 <_Balloc>
  40736a:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40736e:	4680      	mov	r8, r0
  407370:	b10f      	cbz	r7, 407376 <__d2b+0x22>
  407372:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  407376:	9401      	str	r4, [sp, #4]
  407378:	b31d      	cbz	r5, 4073c2 <__d2b+0x6e>
  40737a:	a802      	add	r0, sp, #8
  40737c:	f840 5d08 	str.w	r5, [r0, #-8]!
  407380:	f7ff fdda 	bl	406f38 <__lo0bits>
  407384:	2800      	cmp	r0, #0
  407386:	d134      	bne.n	4073f2 <__d2b+0x9e>
  407388:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40738c:	f8c8 2014 	str.w	r2, [r8, #20]
  407390:	2b00      	cmp	r3, #0
  407392:	bf0c      	ite	eq
  407394:	2101      	moveq	r1, #1
  407396:	2102      	movne	r1, #2
  407398:	f8c8 3018 	str.w	r3, [r8, #24]
  40739c:	f8c8 1010 	str.w	r1, [r8, #16]
  4073a0:	b9df      	cbnz	r7, 4073da <__d2b+0x86>
  4073a2:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  4073a6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4073aa:	6030      	str	r0, [r6, #0]
  4073ac:	6918      	ldr	r0, [r3, #16]
  4073ae:	f7ff fda3 	bl	406ef8 <__hi0bits>
  4073b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4073b4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  4073b8:	6018      	str	r0, [r3, #0]
  4073ba:	4640      	mov	r0, r8
  4073bc:	b002      	add	sp, #8
  4073be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4073c2:	a801      	add	r0, sp, #4
  4073c4:	f7ff fdb8 	bl	406f38 <__lo0bits>
  4073c8:	9b01      	ldr	r3, [sp, #4]
  4073ca:	f8c8 3014 	str.w	r3, [r8, #20]
  4073ce:	2101      	movs	r1, #1
  4073d0:	3020      	adds	r0, #32
  4073d2:	f8c8 1010 	str.w	r1, [r8, #16]
  4073d6:	2f00      	cmp	r7, #0
  4073d8:	d0e3      	beq.n	4073a2 <__d2b+0x4e>
  4073da:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4073dc:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  4073e0:	4407      	add	r7, r0
  4073e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4073e6:	6037      	str	r7, [r6, #0]
  4073e8:	6018      	str	r0, [r3, #0]
  4073ea:	4640      	mov	r0, r8
  4073ec:	b002      	add	sp, #8
  4073ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4073f2:	e89d 000a 	ldmia.w	sp, {r1, r3}
  4073f6:	f1c0 0220 	rsb	r2, r0, #32
  4073fa:	fa03 f202 	lsl.w	r2, r3, r2
  4073fe:	430a      	orrs	r2, r1
  407400:	40c3      	lsrs	r3, r0
  407402:	9301      	str	r3, [sp, #4]
  407404:	f8c8 2014 	str.w	r2, [r8, #20]
  407408:	e7c2      	b.n	407390 <__d2b+0x3c>
  40740a:	bf00      	nop

0040740c <_realloc_r>:
  40740c:	2900      	cmp	r1, #0
  40740e:	f000 8095 	beq.w	40753c <_realloc_r+0x130>
  407412:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407416:	460d      	mov	r5, r1
  407418:	4616      	mov	r6, r2
  40741a:	b083      	sub	sp, #12
  40741c:	4680      	mov	r8, r0
  40741e:	f106 070b 	add.w	r7, r6, #11
  407422:	f7fb fbf3 	bl	402c0c <__malloc_lock>
  407426:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40742a:	2f16      	cmp	r7, #22
  40742c:	f02e 0403 	bic.w	r4, lr, #3
  407430:	f1a5 0908 	sub.w	r9, r5, #8
  407434:	d83c      	bhi.n	4074b0 <_realloc_r+0xa4>
  407436:	2210      	movs	r2, #16
  407438:	4617      	mov	r7, r2
  40743a:	42be      	cmp	r6, r7
  40743c:	d83d      	bhi.n	4074ba <_realloc_r+0xae>
  40743e:	4294      	cmp	r4, r2
  407440:	da43      	bge.n	4074ca <_realloc_r+0xbe>
  407442:	4bc4      	ldr	r3, [pc, #784]	; (407754 <_realloc_r+0x348>)
  407444:	6899      	ldr	r1, [r3, #8]
  407446:	eb09 0004 	add.w	r0, r9, r4
  40744a:	4288      	cmp	r0, r1
  40744c:	f000 80b4 	beq.w	4075b8 <_realloc_r+0x1ac>
  407450:	6843      	ldr	r3, [r0, #4]
  407452:	f023 0101 	bic.w	r1, r3, #1
  407456:	4401      	add	r1, r0
  407458:	6849      	ldr	r1, [r1, #4]
  40745a:	07c9      	lsls	r1, r1, #31
  40745c:	d54c      	bpl.n	4074f8 <_realloc_r+0xec>
  40745e:	f01e 0f01 	tst.w	lr, #1
  407462:	f000 809b 	beq.w	40759c <_realloc_r+0x190>
  407466:	4631      	mov	r1, r6
  407468:	4640      	mov	r0, r8
  40746a:	f7fb f837 	bl	4024dc <_malloc_r>
  40746e:	4606      	mov	r6, r0
  407470:	2800      	cmp	r0, #0
  407472:	d03a      	beq.n	4074ea <_realloc_r+0xde>
  407474:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407478:	f023 0301 	bic.w	r3, r3, #1
  40747c:	444b      	add	r3, r9
  40747e:	f1a0 0208 	sub.w	r2, r0, #8
  407482:	429a      	cmp	r2, r3
  407484:	f000 8121 	beq.w	4076ca <_realloc_r+0x2be>
  407488:	1f22      	subs	r2, r4, #4
  40748a:	2a24      	cmp	r2, #36	; 0x24
  40748c:	f200 8107 	bhi.w	40769e <_realloc_r+0x292>
  407490:	2a13      	cmp	r2, #19
  407492:	f200 80db 	bhi.w	40764c <_realloc_r+0x240>
  407496:	4603      	mov	r3, r0
  407498:	462a      	mov	r2, r5
  40749a:	6811      	ldr	r1, [r2, #0]
  40749c:	6019      	str	r1, [r3, #0]
  40749e:	6851      	ldr	r1, [r2, #4]
  4074a0:	6059      	str	r1, [r3, #4]
  4074a2:	6892      	ldr	r2, [r2, #8]
  4074a4:	609a      	str	r2, [r3, #8]
  4074a6:	4629      	mov	r1, r5
  4074a8:	4640      	mov	r0, r8
  4074aa:	f7ff f8c5 	bl	406638 <_free_r>
  4074ae:	e01c      	b.n	4074ea <_realloc_r+0xde>
  4074b0:	f027 0707 	bic.w	r7, r7, #7
  4074b4:	2f00      	cmp	r7, #0
  4074b6:	463a      	mov	r2, r7
  4074b8:	dabf      	bge.n	40743a <_realloc_r+0x2e>
  4074ba:	2600      	movs	r6, #0
  4074bc:	230c      	movs	r3, #12
  4074be:	4630      	mov	r0, r6
  4074c0:	f8c8 3000 	str.w	r3, [r8]
  4074c4:	b003      	add	sp, #12
  4074c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4074ca:	462e      	mov	r6, r5
  4074cc:	1be3      	subs	r3, r4, r7
  4074ce:	2b0f      	cmp	r3, #15
  4074d0:	d81e      	bhi.n	407510 <_realloc_r+0x104>
  4074d2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4074d6:	f003 0301 	and.w	r3, r3, #1
  4074da:	4323      	orrs	r3, r4
  4074dc:	444c      	add	r4, r9
  4074de:	f8c9 3004 	str.w	r3, [r9, #4]
  4074e2:	6863      	ldr	r3, [r4, #4]
  4074e4:	f043 0301 	orr.w	r3, r3, #1
  4074e8:	6063      	str	r3, [r4, #4]
  4074ea:	4640      	mov	r0, r8
  4074ec:	f7fb fb94 	bl	402c18 <__malloc_unlock>
  4074f0:	4630      	mov	r0, r6
  4074f2:	b003      	add	sp, #12
  4074f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4074f8:	f023 0303 	bic.w	r3, r3, #3
  4074fc:	18e1      	adds	r1, r4, r3
  4074fe:	4291      	cmp	r1, r2
  407500:	db1f      	blt.n	407542 <_realloc_r+0x136>
  407502:	68c3      	ldr	r3, [r0, #12]
  407504:	6882      	ldr	r2, [r0, #8]
  407506:	462e      	mov	r6, r5
  407508:	60d3      	str	r3, [r2, #12]
  40750a:	460c      	mov	r4, r1
  40750c:	609a      	str	r2, [r3, #8]
  40750e:	e7dd      	b.n	4074cc <_realloc_r+0xc0>
  407510:	f8d9 2004 	ldr.w	r2, [r9, #4]
  407514:	eb09 0107 	add.w	r1, r9, r7
  407518:	f002 0201 	and.w	r2, r2, #1
  40751c:	444c      	add	r4, r9
  40751e:	f043 0301 	orr.w	r3, r3, #1
  407522:	4317      	orrs	r7, r2
  407524:	f8c9 7004 	str.w	r7, [r9, #4]
  407528:	604b      	str	r3, [r1, #4]
  40752a:	6863      	ldr	r3, [r4, #4]
  40752c:	f043 0301 	orr.w	r3, r3, #1
  407530:	3108      	adds	r1, #8
  407532:	6063      	str	r3, [r4, #4]
  407534:	4640      	mov	r0, r8
  407536:	f7ff f87f 	bl	406638 <_free_r>
  40753a:	e7d6      	b.n	4074ea <_realloc_r+0xde>
  40753c:	4611      	mov	r1, r2
  40753e:	f7fa bfcd 	b.w	4024dc <_malloc_r>
  407542:	f01e 0f01 	tst.w	lr, #1
  407546:	d18e      	bne.n	407466 <_realloc_r+0x5a>
  407548:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40754c:	eba9 0a01 	sub.w	sl, r9, r1
  407550:	f8da 1004 	ldr.w	r1, [sl, #4]
  407554:	f021 0103 	bic.w	r1, r1, #3
  407558:	440b      	add	r3, r1
  40755a:	4423      	add	r3, r4
  40755c:	4293      	cmp	r3, r2
  40755e:	db25      	blt.n	4075ac <_realloc_r+0x1a0>
  407560:	68c2      	ldr	r2, [r0, #12]
  407562:	6881      	ldr	r1, [r0, #8]
  407564:	4656      	mov	r6, sl
  407566:	60ca      	str	r2, [r1, #12]
  407568:	6091      	str	r1, [r2, #8]
  40756a:	f8da 100c 	ldr.w	r1, [sl, #12]
  40756e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407572:	1f22      	subs	r2, r4, #4
  407574:	2a24      	cmp	r2, #36	; 0x24
  407576:	60c1      	str	r1, [r0, #12]
  407578:	6088      	str	r0, [r1, #8]
  40757a:	f200 8094 	bhi.w	4076a6 <_realloc_r+0x29a>
  40757e:	2a13      	cmp	r2, #19
  407580:	d96f      	bls.n	407662 <_realloc_r+0x256>
  407582:	6829      	ldr	r1, [r5, #0]
  407584:	f8ca 1008 	str.w	r1, [sl, #8]
  407588:	6869      	ldr	r1, [r5, #4]
  40758a:	f8ca 100c 	str.w	r1, [sl, #12]
  40758e:	2a1b      	cmp	r2, #27
  407590:	f200 80a2 	bhi.w	4076d8 <_realloc_r+0x2cc>
  407594:	3508      	adds	r5, #8
  407596:	f10a 0210 	add.w	r2, sl, #16
  40759a:	e063      	b.n	407664 <_realloc_r+0x258>
  40759c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4075a0:	eba9 0a03 	sub.w	sl, r9, r3
  4075a4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4075a8:	f021 0103 	bic.w	r1, r1, #3
  4075ac:	1863      	adds	r3, r4, r1
  4075ae:	4293      	cmp	r3, r2
  4075b0:	f6ff af59 	blt.w	407466 <_realloc_r+0x5a>
  4075b4:	4656      	mov	r6, sl
  4075b6:	e7d8      	b.n	40756a <_realloc_r+0x15e>
  4075b8:	6841      	ldr	r1, [r0, #4]
  4075ba:	f021 0b03 	bic.w	fp, r1, #3
  4075be:	44a3      	add	fp, r4
  4075c0:	f107 0010 	add.w	r0, r7, #16
  4075c4:	4583      	cmp	fp, r0
  4075c6:	da56      	bge.n	407676 <_realloc_r+0x26a>
  4075c8:	f01e 0f01 	tst.w	lr, #1
  4075cc:	f47f af4b 	bne.w	407466 <_realloc_r+0x5a>
  4075d0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4075d4:	eba9 0a01 	sub.w	sl, r9, r1
  4075d8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4075dc:	f021 0103 	bic.w	r1, r1, #3
  4075e0:	448b      	add	fp, r1
  4075e2:	4558      	cmp	r0, fp
  4075e4:	dce2      	bgt.n	4075ac <_realloc_r+0x1a0>
  4075e6:	4656      	mov	r6, sl
  4075e8:	f8da 100c 	ldr.w	r1, [sl, #12]
  4075ec:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4075f0:	1f22      	subs	r2, r4, #4
  4075f2:	2a24      	cmp	r2, #36	; 0x24
  4075f4:	60c1      	str	r1, [r0, #12]
  4075f6:	6088      	str	r0, [r1, #8]
  4075f8:	f200 808f 	bhi.w	40771a <_realloc_r+0x30e>
  4075fc:	2a13      	cmp	r2, #19
  4075fe:	f240 808a 	bls.w	407716 <_realloc_r+0x30a>
  407602:	6829      	ldr	r1, [r5, #0]
  407604:	f8ca 1008 	str.w	r1, [sl, #8]
  407608:	6869      	ldr	r1, [r5, #4]
  40760a:	f8ca 100c 	str.w	r1, [sl, #12]
  40760e:	2a1b      	cmp	r2, #27
  407610:	f200 808a 	bhi.w	407728 <_realloc_r+0x31c>
  407614:	3508      	adds	r5, #8
  407616:	f10a 0210 	add.w	r2, sl, #16
  40761a:	6829      	ldr	r1, [r5, #0]
  40761c:	6011      	str	r1, [r2, #0]
  40761e:	6869      	ldr	r1, [r5, #4]
  407620:	6051      	str	r1, [r2, #4]
  407622:	68a9      	ldr	r1, [r5, #8]
  407624:	6091      	str	r1, [r2, #8]
  407626:	eb0a 0107 	add.w	r1, sl, r7
  40762a:	ebab 0207 	sub.w	r2, fp, r7
  40762e:	f042 0201 	orr.w	r2, r2, #1
  407632:	6099      	str	r1, [r3, #8]
  407634:	604a      	str	r2, [r1, #4]
  407636:	f8da 3004 	ldr.w	r3, [sl, #4]
  40763a:	f003 0301 	and.w	r3, r3, #1
  40763e:	431f      	orrs	r7, r3
  407640:	4640      	mov	r0, r8
  407642:	f8ca 7004 	str.w	r7, [sl, #4]
  407646:	f7fb fae7 	bl	402c18 <__malloc_unlock>
  40764a:	e751      	b.n	4074f0 <_realloc_r+0xe4>
  40764c:	682b      	ldr	r3, [r5, #0]
  40764e:	6003      	str	r3, [r0, #0]
  407650:	686b      	ldr	r3, [r5, #4]
  407652:	6043      	str	r3, [r0, #4]
  407654:	2a1b      	cmp	r2, #27
  407656:	d82d      	bhi.n	4076b4 <_realloc_r+0x2a8>
  407658:	f100 0308 	add.w	r3, r0, #8
  40765c:	f105 0208 	add.w	r2, r5, #8
  407660:	e71b      	b.n	40749a <_realloc_r+0x8e>
  407662:	4632      	mov	r2, r6
  407664:	6829      	ldr	r1, [r5, #0]
  407666:	6011      	str	r1, [r2, #0]
  407668:	6869      	ldr	r1, [r5, #4]
  40766a:	6051      	str	r1, [r2, #4]
  40766c:	68a9      	ldr	r1, [r5, #8]
  40766e:	6091      	str	r1, [r2, #8]
  407670:	461c      	mov	r4, r3
  407672:	46d1      	mov	r9, sl
  407674:	e72a      	b.n	4074cc <_realloc_r+0xc0>
  407676:	eb09 0107 	add.w	r1, r9, r7
  40767a:	ebab 0b07 	sub.w	fp, fp, r7
  40767e:	f04b 0201 	orr.w	r2, fp, #1
  407682:	6099      	str	r1, [r3, #8]
  407684:	604a      	str	r2, [r1, #4]
  407686:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40768a:	f003 0301 	and.w	r3, r3, #1
  40768e:	431f      	orrs	r7, r3
  407690:	4640      	mov	r0, r8
  407692:	f845 7c04 	str.w	r7, [r5, #-4]
  407696:	f7fb fabf 	bl	402c18 <__malloc_unlock>
  40769a:	462e      	mov	r6, r5
  40769c:	e728      	b.n	4074f0 <_realloc_r+0xe4>
  40769e:	4629      	mov	r1, r5
  4076a0:	f7ff fb56 	bl	406d50 <memmove>
  4076a4:	e6ff      	b.n	4074a6 <_realloc_r+0x9a>
  4076a6:	4629      	mov	r1, r5
  4076a8:	4630      	mov	r0, r6
  4076aa:	461c      	mov	r4, r3
  4076ac:	46d1      	mov	r9, sl
  4076ae:	f7ff fb4f 	bl	406d50 <memmove>
  4076b2:	e70b      	b.n	4074cc <_realloc_r+0xc0>
  4076b4:	68ab      	ldr	r3, [r5, #8]
  4076b6:	6083      	str	r3, [r0, #8]
  4076b8:	68eb      	ldr	r3, [r5, #12]
  4076ba:	60c3      	str	r3, [r0, #12]
  4076bc:	2a24      	cmp	r2, #36	; 0x24
  4076be:	d017      	beq.n	4076f0 <_realloc_r+0x2e4>
  4076c0:	f100 0310 	add.w	r3, r0, #16
  4076c4:	f105 0210 	add.w	r2, r5, #16
  4076c8:	e6e7      	b.n	40749a <_realloc_r+0x8e>
  4076ca:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4076ce:	f023 0303 	bic.w	r3, r3, #3
  4076d2:	441c      	add	r4, r3
  4076d4:	462e      	mov	r6, r5
  4076d6:	e6f9      	b.n	4074cc <_realloc_r+0xc0>
  4076d8:	68a9      	ldr	r1, [r5, #8]
  4076da:	f8ca 1010 	str.w	r1, [sl, #16]
  4076de:	68e9      	ldr	r1, [r5, #12]
  4076e0:	f8ca 1014 	str.w	r1, [sl, #20]
  4076e4:	2a24      	cmp	r2, #36	; 0x24
  4076e6:	d00c      	beq.n	407702 <_realloc_r+0x2f6>
  4076e8:	3510      	adds	r5, #16
  4076ea:	f10a 0218 	add.w	r2, sl, #24
  4076ee:	e7b9      	b.n	407664 <_realloc_r+0x258>
  4076f0:	692b      	ldr	r3, [r5, #16]
  4076f2:	6103      	str	r3, [r0, #16]
  4076f4:	696b      	ldr	r3, [r5, #20]
  4076f6:	6143      	str	r3, [r0, #20]
  4076f8:	f105 0218 	add.w	r2, r5, #24
  4076fc:	f100 0318 	add.w	r3, r0, #24
  407700:	e6cb      	b.n	40749a <_realloc_r+0x8e>
  407702:	692a      	ldr	r2, [r5, #16]
  407704:	f8ca 2018 	str.w	r2, [sl, #24]
  407708:	696a      	ldr	r2, [r5, #20]
  40770a:	f8ca 201c 	str.w	r2, [sl, #28]
  40770e:	3518      	adds	r5, #24
  407710:	f10a 0220 	add.w	r2, sl, #32
  407714:	e7a6      	b.n	407664 <_realloc_r+0x258>
  407716:	4632      	mov	r2, r6
  407718:	e77f      	b.n	40761a <_realloc_r+0x20e>
  40771a:	4629      	mov	r1, r5
  40771c:	4630      	mov	r0, r6
  40771e:	9301      	str	r3, [sp, #4]
  407720:	f7ff fb16 	bl	406d50 <memmove>
  407724:	9b01      	ldr	r3, [sp, #4]
  407726:	e77e      	b.n	407626 <_realloc_r+0x21a>
  407728:	68a9      	ldr	r1, [r5, #8]
  40772a:	f8ca 1010 	str.w	r1, [sl, #16]
  40772e:	68e9      	ldr	r1, [r5, #12]
  407730:	f8ca 1014 	str.w	r1, [sl, #20]
  407734:	2a24      	cmp	r2, #36	; 0x24
  407736:	d003      	beq.n	407740 <_realloc_r+0x334>
  407738:	3510      	adds	r5, #16
  40773a:	f10a 0218 	add.w	r2, sl, #24
  40773e:	e76c      	b.n	40761a <_realloc_r+0x20e>
  407740:	692a      	ldr	r2, [r5, #16]
  407742:	f8ca 2018 	str.w	r2, [sl, #24]
  407746:	696a      	ldr	r2, [r5, #20]
  407748:	f8ca 201c 	str.w	r2, [sl, #28]
  40774c:	3518      	adds	r5, #24
  40774e:	f10a 0220 	add.w	r2, sl, #32
  407752:	e762      	b.n	40761a <_realloc_r+0x20e>
  407754:	20400430 	.word	0x20400430

00407758 <_raise_r>:
  407758:	291f      	cmp	r1, #31
  40775a:	d828      	bhi.n	4077ae <_raise_r+0x56>
  40775c:	b520      	push	{r5, lr}
  40775e:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
  407762:	b082      	sub	sp, #8
  407764:	4605      	mov	r5, r0
  407766:	b1aa      	cbz	r2, 407794 <_raise_r+0x3c>
  407768:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
  40776c:	b193      	cbz	r3, 407794 <_raise_r+0x3c>
  40776e:	2b01      	cmp	r3, #1
  407770:	d00e      	beq.n	407790 <_raise_r+0x38>
  407772:	1c58      	adds	r0, r3, #1
  407774:	d007      	beq.n	407786 <_raise_r+0x2e>
  407776:	2500      	movs	r5, #0
  407778:	4608      	mov	r0, r1
  40777a:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40777e:	4798      	blx	r3
  407780:	4628      	mov	r0, r5
  407782:	b002      	add	sp, #8
  407784:	bd20      	pop	{r5, pc}
  407786:	2316      	movs	r3, #22
  407788:	2001      	movs	r0, #1
  40778a:	602b      	str	r3, [r5, #0]
  40778c:	b002      	add	sp, #8
  40778e:	bd20      	pop	{r5, pc}
  407790:	2000      	movs	r0, #0
  407792:	e7f6      	b.n	407782 <_raise_r+0x2a>
  407794:	4628      	mov	r0, r5
  407796:	9101      	str	r1, [sp, #4]
  407798:	f000 f82a 	bl	4077f0 <_getpid_r>
  40779c:	9901      	ldr	r1, [sp, #4]
  40779e:	460a      	mov	r2, r1
  4077a0:	4601      	mov	r1, r0
  4077a2:	4628      	mov	r0, r5
  4077a4:	b002      	add	sp, #8
  4077a6:	e8bd 4020 	ldmia.w	sp!, {r5, lr}
  4077aa:	f000 b80d 	b.w	4077c8 <_kill_r>
  4077ae:	2316      	movs	r3, #22
  4077b0:	6003      	str	r3, [r0, #0]
  4077b2:	f04f 30ff 	mov.w	r0, #4294967295
  4077b6:	4770      	bx	lr

004077b8 <raise>:
  4077b8:	4b02      	ldr	r3, [pc, #8]	; (4077c4 <raise+0xc>)
  4077ba:	4601      	mov	r1, r0
  4077bc:	6818      	ldr	r0, [r3, #0]
  4077be:	f7ff bfcb 	b.w	407758 <_raise_r>
  4077c2:	bf00      	nop
  4077c4:	20400004 	.word	0x20400004

004077c8 <_kill_r>:
  4077c8:	b538      	push	{r3, r4, r5, lr}
  4077ca:	460b      	mov	r3, r1
  4077cc:	4c07      	ldr	r4, [pc, #28]	; (4077ec <_kill_r+0x24>)
  4077ce:	4605      	mov	r5, r0
  4077d0:	4611      	mov	r1, r2
  4077d2:	4618      	mov	r0, r3
  4077d4:	2300      	movs	r3, #0
  4077d6:	6023      	str	r3, [r4, #0]
  4077d8:	f7f8 fdc4 	bl	400364 <_kill>
  4077dc:	1c43      	adds	r3, r0, #1
  4077de:	d000      	beq.n	4077e2 <_kill_r+0x1a>
  4077e0:	bd38      	pop	{r3, r4, r5, pc}
  4077e2:	6823      	ldr	r3, [r4, #0]
  4077e4:	2b00      	cmp	r3, #0
  4077e6:	d0fb      	beq.n	4077e0 <_kill_r+0x18>
  4077e8:	602b      	str	r3, [r5, #0]
  4077ea:	bd38      	pop	{r3, r4, r5, pc}
  4077ec:	20410d38 	.word	0x20410d38

004077f0 <_getpid_r>:
  4077f0:	f7f8 bdb9 	b.w	400366 <_getpid>

004077f4 <__sread>:
  4077f4:	b510      	push	{r4, lr}
  4077f6:	460c      	mov	r4, r1
  4077f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4077fc:	f000 fa96 	bl	407d2c <_read_r>
  407800:	2800      	cmp	r0, #0
  407802:	db03      	blt.n	40780c <__sread+0x18>
  407804:	6d23      	ldr	r3, [r4, #80]	; 0x50
  407806:	4403      	add	r3, r0
  407808:	6523      	str	r3, [r4, #80]	; 0x50
  40780a:	bd10      	pop	{r4, pc}
  40780c:	89a3      	ldrh	r3, [r4, #12]
  40780e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  407812:	81a3      	strh	r3, [r4, #12]
  407814:	bd10      	pop	{r4, pc}
  407816:	bf00      	nop

00407818 <__swrite>:
  407818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40781c:	4616      	mov	r6, r2
  40781e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  407822:	461f      	mov	r7, r3
  407824:	05d3      	lsls	r3, r2, #23
  407826:	460c      	mov	r4, r1
  407828:	4605      	mov	r5, r0
  40782a:	d507      	bpl.n	40783c <__swrite+0x24>
  40782c:	2200      	movs	r2, #0
  40782e:	2302      	movs	r3, #2
  407830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407834:	f000 fa64 	bl	407d00 <_lseek_r>
  407838:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40783c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407840:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  407844:	81a2      	strh	r2, [r4, #12]
  407846:	463b      	mov	r3, r7
  407848:	4632      	mov	r2, r6
  40784a:	4628      	mov	r0, r5
  40784c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407850:	f000 b914 	b.w	407a7c <_write_r>

00407854 <__sseek>:
  407854:	b510      	push	{r4, lr}
  407856:	460c      	mov	r4, r1
  407858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40785c:	f000 fa50 	bl	407d00 <_lseek_r>
  407860:	89a3      	ldrh	r3, [r4, #12]
  407862:	1c42      	adds	r2, r0, #1
  407864:	bf0e      	itee	eq
  407866:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40786a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40786e:	6520      	strne	r0, [r4, #80]	; 0x50
  407870:	81a3      	strh	r3, [r4, #12]
  407872:	bd10      	pop	{r4, pc}

00407874 <__sclose>:
  407874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407878:	f000 b9a8 	b.w	407bcc <_close_r>
  40787c:	0000      	movs	r0, r0
	...

00407880 <strlen>:
  407880:	f890 f000 	pld	[r0]
  407884:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  407888:	f020 0107 	bic.w	r1, r0, #7
  40788c:	f06f 0c00 	mvn.w	ip, #0
  407890:	f010 0407 	ands.w	r4, r0, #7
  407894:	f891 f020 	pld	[r1, #32]
  407898:	f040 8049 	bne.w	40792e <strlen+0xae>
  40789c:	f04f 0400 	mov.w	r4, #0
  4078a0:	f06f 0007 	mvn.w	r0, #7
  4078a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4078a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4078ac:	f100 0008 	add.w	r0, r0, #8
  4078b0:	fa82 f24c 	uadd8	r2, r2, ip
  4078b4:	faa4 f28c 	sel	r2, r4, ip
  4078b8:	fa83 f34c 	uadd8	r3, r3, ip
  4078bc:	faa2 f38c 	sel	r3, r2, ip
  4078c0:	bb4b      	cbnz	r3, 407916 <strlen+0x96>
  4078c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4078c6:	fa82 f24c 	uadd8	r2, r2, ip
  4078ca:	f100 0008 	add.w	r0, r0, #8
  4078ce:	faa4 f28c 	sel	r2, r4, ip
  4078d2:	fa83 f34c 	uadd8	r3, r3, ip
  4078d6:	faa2 f38c 	sel	r3, r2, ip
  4078da:	b9e3      	cbnz	r3, 407916 <strlen+0x96>
  4078dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4078e0:	fa82 f24c 	uadd8	r2, r2, ip
  4078e4:	f100 0008 	add.w	r0, r0, #8
  4078e8:	faa4 f28c 	sel	r2, r4, ip
  4078ec:	fa83 f34c 	uadd8	r3, r3, ip
  4078f0:	faa2 f38c 	sel	r3, r2, ip
  4078f4:	b97b      	cbnz	r3, 407916 <strlen+0x96>
  4078f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4078fa:	f101 0120 	add.w	r1, r1, #32
  4078fe:	fa82 f24c 	uadd8	r2, r2, ip
  407902:	f100 0008 	add.w	r0, r0, #8
  407906:	faa4 f28c 	sel	r2, r4, ip
  40790a:	fa83 f34c 	uadd8	r3, r3, ip
  40790e:	faa2 f38c 	sel	r3, r2, ip
  407912:	2b00      	cmp	r3, #0
  407914:	d0c6      	beq.n	4078a4 <strlen+0x24>
  407916:	2a00      	cmp	r2, #0
  407918:	bf04      	itt	eq
  40791a:	3004      	addeq	r0, #4
  40791c:	461a      	moveq	r2, r3
  40791e:	ba12      	rev	r2, r2
  407920:	fab2 f282 	clz	r2, r2
  407924:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  407928:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40792c:	4770      	bx	lr
  40792e:	e9d1 2300 	ldrd	r2, r3, [r1]
  407932:	f004 0503 	and.w	r5, r4, #3
  407936:	f1c4 0000 	rsb	r0, r4, #0
  40793a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40793e:	f014 0f04 	tst.w	r4, #4
  407942:	f891 f040 	pld	[r1, #64]	; 0x40
  407946:	fa0c f505 	lsl.w	r5, ip, r5
  40794a:	ea62 0205 	orn	r2, r2, r5
  40794e:	bf1c      	itt	ne
  407950:	ea63 0305 	ornne	r3, r3, r5
  407954:	4662      	movne	r2, ip
  407956:	f04f 0400 	mov.w	r4, #0
  40795a:	e7a9      	b.n	4078b0 <strlen+0x30>

0040795c <__swbuf_r>:
  40795c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40795e:	460d      	mov	r5, r1
  407960:	4614      	mov	r4, r2
  407962:	4606      	mov	r6, r0
  407964:	b110      	cbz	r0, 40796c <__swbuf_r+0x10>
  407966:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407968:	2b00      	cmp	r3, #0
  40796a:	d04b      	beq.n	407a04 <__swbuf_r+0xa8>
  40796c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407970:	69a3      	ldr	r3, [r4, #24]
  407972:	60a3      	str	r3, [r4, #8]
  407974:	b291      	uxth	r1, r2
  407976:	0708      	lsls	r0, r1, #28
  407978:	d539      	bpl.n	4079ee <__swbuf_r+0x92>
  40797a:	6923      	ldr	r3, [r4, #16]
  40797c:	2b00      	cmp	r3, #0
  40797e:	d036      	beq.n	4079ee <__swbuf_r+0x92>
  407980:	b2ed      	uxtb	r5, r5
  407982:	0489      	lsls	r1, r1, #18
  407984:	462f      	mov	r7, r5
  407986:	d515      	bpl.n	4079b4 <__swbuf_r+0x58>
  407988:	6822      	ldr	r2, [r4, #0]
  40798a:	6961      	ldr	r1, [r4, #20]
  40798c:	1ad3      	subs	r3, r2, r3
  40798e:	428b      	cmp	r3, r1
  407990:	da1c      	bge.n	4079cc <__swbuf_r+0x70>
  407992:	3301      	adds	r3, #1
  407994:	68a1      	ldr	r1, [r4, #8]
  407996:	1c50      	adds	r0, r2, #1
  407998:	3901      	subs	r1, #1
  40799a:	60a1      	str	r1, [r4, #8]
  40799c:	6020      	str	r0, [r4, #0]
  40799e:	7015      	strb	r5, [r2, #0]
  4079a0:	6962      	ldr	r2, [r4, #20]
  4079a2:	429a      	cmp	r2, r3
  4079a4:	d01a      	beq.n	4079dc <__swbuf_r+0x80>
  4079a6:	89a3      	ldrh	r3, [r4, #12]
  4079a8:	07db      	lsls	r3, r3, #31
  4079aa:	d501      	bpl.n	4079b0 <__swbuf_r+0x54>
  4079ac:	2d0a      	cmp	r5, #10
  4079ae:	d015      	beq.n	4079dc <__swbuf_r+0x80>
  4079b0:	4638      	mov	r0, r7
  4079b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4079b4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4079b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4079ba:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4079be:	81a2      	strh	r2, [r4, #12]
  4079c0:	6822      	ldr	r2, [r4, #0]
  4079c2:	6661      	str	r1, [r4, #100]	; 0x64
  4079c4:	6961      	ldr	r1, [r4, #20]
  4079c6:	1ad3      	subs	r3, r2, r3
  4079c8:	428b      	cmp	r3, r1
  4079ca:	dbe2      	blt.n	407992 <__swbuf_r+0x36>
  4079cc:	4621      	mov	r1, r4
  4079ce:	4630      	mov	r0, r6
  4079d0:	f7fe fcb4 	bl	40633c <_fflush_r>
  4079d4:	b940      	cbnz	r0, 4079e8 <__swbuf_r+0x8c>
  4079d6:	6822      	ldr	r2, [r4, #0]
  4079d8:	2301      	movs	r3, #1
  4079da:	e7db      	b.n	407994 <__swbuf_r+0x38>
  4079dc:	4621      	mov	r1, r4
  4079de:	4630      	mov	r0, r6
  4079e0:	f7fe fcac 	bl	40633c <_fflush_r>
  4079e4:	2800      	cmp	r0, #0
  4079e6:	d0e3      	beq.n	4079b0 <__swbuf_r+0x54>
  4079e8:	f04f 37ff 	mov.w	r7, #4294967295
  4079ec:	e7e0      	b.n	4079b0 <__swbuf_r+0x54>
  4079ee:	4621      	mov	r1, r4
  4079f0:	4630      	mov	r0, r6
  4079f2:	f7fd fbc7 	bl	405184 <__swsetup_r>
  4079f6:	2800      	cmp	r0, #0
  4079f8:	d1f6      	bne.n	4079e8 <__swbuf_r+0x8c>
  4079fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4079fe:	6923      	ldr	r3, [r4, #16]
  407a00:	b291      	uxth	r1, r2
  407a02:	e7bd      	b.n	407980 <__swbuf_r+0x24>
  407a04:	f7fe fcf2 	bl	4063ec <__sinit>
  407a08:	e7b0      	b.n	40796c <__swbuf_r+0x10>
  407a0a:	bf00      	nop

00407a0c <_wcrtomb_r>:
  407a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  407a0e:	4606      	mov	r6, r0
  407a10:	b085      	sub	sp, #20
  407a12:	461f      	mov	r7, r3
  407a14:	b189      	cbz	r1, 407a3a <_wcrtomb_r+0x2e>
  407a16:	4c10      	ldr	r4, [pc, #64]	; (407a58 <_wcrtomb_r+0x4c>)
  407a18:	4d10      	ldr	r5, [pc, #64]	; (407a5c <_wcrtomb_r+0x50>)
  407a1a:	6824      	ldr	r4, [r4, #0]
  407a1c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  407a1e:	2c00      	cmp	r4, #0
  407a20:	bf08      	it	eq
  407a22:	462c      	moveq	r4, r5
  407a24:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  407a28:	47a0      	blx	r4
  407a2a:	1c43      	adds	r3, r0, #1
  407a2c:	d103      	bne.n	407a36 <_wcrtomb_r+0x2a>
  407a2e:	2200      	movs	r2, #0
  407a30:	238a      	movs	r3, #138	; 0x8a
  407a32:	603a      	str	r2, [r7, #0]
  407a34:	6033      	str	r3, [r6, #0]
  407a36:	b005      	add	sp, #20
  407a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407a3a:	460c      	mov	r4, r1
  407a3c:	4906      	ldr	r1, [pc, #24]	; (407a58 <_wcrtomb_r+0x4c>)
  407a3e:	4a07      	ldr	r2, [pc, #28]	; (407a5c <_wcrtomb_r+0x50>)
  407a40:	6809      	ldr	r1, [r1, #0]
  407a42:	6b49      	ldr	r1, [r1, #52]	; 0x34
  407a44:	2900      	cmp	r1, #0
  407a46:	bf08      	it	eq
  407a48:	4611      	moveq	r1, r2
  407a4a:	4622      	mov	r2, r4
  407a4c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  407a50:	a901      	add	r1, sp, #4
  407a52:	47a0      	blx	r4
  407a54:	e7e9      	b.n	407a2a <_wcrtomb_r+0x1e>
  407a56:	bf00      	nop
  407a58:	20400004 	.word	0x20400004
  407a5c:	20400844 	.word	0x20400844

00407a60 <__ascii_wctomb>:
  407a60:	b121      	cbz	r1, 407a6c <__ascii_wctomb+0xc>
  407a62:	2aff      	cmp	r2, #255	; 0xff
  407a64:	d804      	bhi.n	407a70 <__ascii_wctomb+0x10>
  407a66:	700a      	strb	r2, [r1, #0]
  407a68:	2001      	movs	r0, #1
  407a6a:	4770      	bx	lr
  407a6c:	4608      	mov	r0, r1
  407a6e:	4770      	bx	lr
  407a70:	238a      	movs	r3, #138	; 0x8a
  407a72:	6003      	str	r3, [r0, #0]
  407a74:	f04f 30ff 	mov.w	r0, #4294967295
  407a78:	4770      	bx	lr
  407a7a:	bf00      	nop

00407a7c <_write_r>:
  407a7c:	b570      	push	{r4, r5, r6, lr}
  407a7e:	460d      	mov	r5, r1
  407a80:	4c08      	ldr	r4, [pc, #32]	; (407aa4 <_write_r+0x28>)
  407a82:	4611      	mov	r1, r2
  407a84:	4606      	mov	r6, r0
  407a86:	461a      	mov	r2, r3
  407a88:	4628      	mov	r0, r5
  407a8a:	2300      	movs	r3, #0
  407a8c:	6023      	str	r3, [r4, #0]
  407a8e:	f7f8 fc4f 	bl	400330 <_write>
  407a92:	1c43      	adds	r3, r0, #1
  407a94:	d000      	beq.n	407a98 <_write_r+0x1c>
  407a96:	bd70      	pop	{r4, r5, r6, pc}
  407a98:	6823      	ldr	r3, [r4, #0]
  407a9a:	2b00      	cmp	r3, #0
  407a9c:	d0fb      	beq.n	407a96 <_write_r+0x1a>
  407a9e:	6033      	str	r3, [r6, #0]
  407aa0:	bd70      	pop	{r4, r5, r6, pc}
  407aa2:	bf00      	nop
  407aa4:	20410d38 	.word	0x20410d38

00407aa8 <__register_exitproc>:
  407aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407aac:	4d2c      	ldr	r5, [pc, #176]	; (407b60 <__register_exitproc+0xb8>)
  407aae:	4606      	mov	r6, r0
  407ab0:	6828      	ldr	r0, [r5, #0]
  407ab2:	4698      	mov	r8, r3
  407ab4:	460f      	mov	r7, r1
  407ab6:	4691      	mov	r9, r2
  407ab8:	f7ff f866 	bl	406b88 <__retarget_lock_acquire_recursive>
  407abc:	4b29      	ldr	r3, [pc, #164]	; (407b64 <__register_exitproc+0xbc>)
  407abe:	681c      	ldr	r4, [r3, #0]
  407ac0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  407ac4:	2b00      	cmp	r3, #0
  407ac6:	d03e      	beq.n	407b46 <__register_exitproc+0x9e>
  407ac8:	685a      	ldr	r2, [r3, #4]
  407aca:	2a1f      	cmp	r2, #31
  407acc:	dc1c      	bgt.n	407b08 <__register_exitproc+0x60>
  407ace:	f102 0e01 	add.w	lr, r2, #1
  407ad2:	b176      	cbz	r6, 407af2 <__register_exitproc+0x4a>
  407ad4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  407ad8:	2401      	movs	r4, #1
  407ada:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  407ade:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  407ae2:	4094      	lsls	r4, r2
  407ae4:	4320      	orrs	r0, r4
  407ae6:	2e02      	cmp	r6, #2
  407ae8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  407aec:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  407af0:	d023      	beq.n	407b3a <__register_exitproc+0x92>
  407af2:	3202      	adds	r2, #2
  407af4:	f8c3 e004 	str.w	lr, [r3, #4]
  407af8:	6828      	ldr	r0, [r5, #0]
  407afa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  407afe:	f7ff f845 	bl	406b8c <__retarget_lock_release_recursive>
  407b02:	2000      	movs	r0, #0
  407b04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407b08:	4b17      	ldr	r3, [pc, #92]	; (407b68 <__register_exitproc+0xc0>)
  407b0a:	b30b      	cbz	r3, 407b50 <__register_exitproc+0xa8>
  407b0c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  407b10:	f7fa fcdc 	bl	4024cc <malloc>
  407b14:	4603      	mov	r3, r0
  407b16:	b1d8      	cbz	r0, 407b50 <__register_exitproc+0xa8>
  407b18:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  407b1c:	6002      	str	r2, [r0, #0]
  407b1e:	2100      	movs	r1, #0
  407b20:	6041      	str	r1, [r0, #4]
  407b22:	460a      	mov	r2, r1
  407b24:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  407b28:	f04f 0e01 	mov.w	lr, #1
  407b2c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  407b30:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  407b34:	2e00      	cmp	r6, #0
  407b36:	d0dc      	beq.n	407af2 <__register_exitproc+0x4a>
  407b38:	e7cc      	b.n	407ad4 <__register_exitproc+0x2c>
  407b3a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  407b3e:	430c      	orrs	r4, r1
  407b40:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  407b44:	e7d5      	b.n	407af2 <__register_exitproc+0x4a>
  407b46:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  407b4a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  407b4e:	e7bb      	b.n	407ac8 <__register_exitproc+0x20>
  407b50:	6828      	ldr	r0, [r5, #0]
  407b52:	f7ff f81b 	bl	406b8c <__retarget_lock_release_recursive>
  407b56:	f04f 30ff 	mov.w	r0, #4294967295
  407b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407b5e:	bf00      	nop
  407b60:	20400840 	.word	0x20400840
  407b64:	00409b08 	.word	0x00409b08
  407b68:	004024cd 	.word	0x004024cd

00407b6c <_calloc_r>:
  407b6c:	b510      	push	{r4, lr}
  407b6e:	fb02 f101 	mul.w	r1, r2, r1
  407b72:	f7fa fcb3 	bl	4024dc <_malloc_r>
  407b76:	4604      	mov	r4, r0
  407b78:	b1d8      	cbz	r0, 407bb2 <_calloc_r+0x46>
  407b7a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  407b7e:	f022 0203 	bic.w	r2, r2, #3
  407b82:	3a04      	subs	r2, #4
  407b84:	2a24      	cmp	r2, #36	; 0x24
  407b86:	d818      	bhi.n	407bba <_calloc_r+0x4e>
  407b88:	2a13      	cmp	r2, #19
  407b8a:	d914      	bls.n	407bb6 <_calloc_r+0x4a>
  407b8c:	2300      	movs	r3, #0
  407b8e:	2a1b      	cmp	r2, #27
  407b90:	6003      	str	r3, [r0, #0]
  407b92:	6043      	str	r3, [r0, #4]
  407b94:	d916      	bls.n	407bc4 <_calloc_r+0x58>
  407b96:	2a24      	cmp	r2, #36	; 0x24
  407b98:	6083      	str	r3, [r0, #8]
  407b9a:	60c3      	str	r3, [r0, #12]
  407b9c:	bf11      	iteee	ne
  407b9e:	f100 0210 	addne.w	r2, r0, #16
  407ba2:	6103      	streq	r3, [r0, #16]
  407ba4:	6143      	streq	r3, [r0, #20]
  407ba6:	f100 0218 	addeq.w	r2, r0, #24
  407baa:	2300      	movs	r3, #0
  407bac:	6013      	str	r3, [r2, #0]
  407bae:	6053      	str	r3, [r2, #4]
  407bb0:	6093      	str	r3, [r2, #8]
  407bb2:	4620      	mov	r0, r4
  407bb4:	bd10      	pop	{r4, pc}
  407bb6:	4602      	mov	r2, r0
  407bb8:	e7f7      	b.n	407baa <_calloc_r+0x3e>
  407bba:	2100      	movs	r1, #0
  407bbc:	f7fa ffd8 	bl	402b70 <memset>
  407bc0:	4620      	mov	r0, r4
  407bc2:	bd10      	pop	{r4, pc}
  407bc4:	f100 0208 	add.w	r2, r0, #8
  407bc8:	e7ef      	b.n	407baa <_calloc_r+0x3e>
  407bca:	bf00      	nop

00407bcc <_close_r>:
  407bcc:	b538      	push	{r3, r4, r5, lr}
  407bce:	4c07      	ldr	r4, [pc, #28]	; (407bec <_close_r+0x20>)
  407bd0:	2300      	movs	r3, #0
  407bd2:	4605      	mov	r5, r0
  407bd4:	4608      	mov	r0, r1
  407bd6:	6023      	str	r3, [r4, #0]
  407bd8:	f7f8 fb9c 	bl	400314 <_close>
  407bdc:	1c43      	adds	r3, r0, #1
  407bde:	d000      	beq.n	407be2 <_close_r+0x16>
  407be0:	bd38      	pop	{r3, r4, r5, pc}
  407be2:	6823      	ldr	r3, [r4, #0]
  407be4:	2b00      	cmp	r3, #0
  407be6:	d0fb      	beq.n	407be0 <_close_r+0x14>
  407be8:	602b      	str	r3, [r5, #0]
  407bea:	bd38      	pop	{r3, r4, r5, pc}
  407bec:	20410d38 	.word	0x20410d38

00407bf0 <_fclose_r>:
  407bf0:	b570      	push	{r4, r5, r6, lr}
  407bf2:	b159      	cbz	r1, 407c0c <_fclose_r+0x1c>
  407bf4:	4605      	mov	r5, r0
  407bf6:	460c      	mov	r4, r1
  407bf8:	b110      	cbz	r0, 407c00 <_fclose_r+0x10>
  407bfa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407bfc:	2b00      	cmp	r3, #0
  407bfe:	d03c      	beq.n	407c7a <_fclose_r+0x8a>
  407c00:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407c02:	07d8      	lsls	r0, r3, #31
  407c04:	d505      	bpl.n	407c12 <_fclose_r+0x22>
  407c06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407c0a:	b92b      	cbnz	r3, 407c18 <_fclose_r+0x28>
  407c0c:	2600      	movs	r6, #0
  407c0e:	4630      	mov	r0, r6
  407c10:	bd70      	pop	{r4, r5, r6, pc}
  407c12:	89a3      	ldrh	r3, [r4, #12]
  407c14:	0599      	lsls	r1, r3, #22
  407c16:	d53c      	bpl.n	407c92 <_fclose_r+0xa2>
  407c18:	4621      	mov	r1, r4
  407c1a:	4628      	mov	r0, r5
  407c1c:	f7fe faee 	bl	4061fc <__sflush_r>
  407c20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  407c22:	4606      	mov	r6, r0
  407c24:	b133      	cbz	r3, 407c34 <_fclose_r+0x44>
  407c26:	69e1      	ldr	r1, [r4, #28]
  407c28:	4628      	mov	r0, r5
  407c2a:	4798      	blx	r3
  407c2c:	2800      	cmp	r0, #0
  407c2e:	bfb8      	it	lt
  407c30:	f04f 36ff 	movlt.w	r6, #4294967295
  407c34:	89a3      	ldrh	r3, [r4, #12]
  407c36:	061a      	lsls	r2, r3, #24
  407c38:	d422      	bmi.n	407c80 <_fclose_r+0x90>
  407c3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  407c3c:	b141      	cbz	r1, 407c50 <_fclose_r+0x60>
  407c3e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407c42:	4299      	cmp	r1, r3
  407c44:	d002      	beq.n	407c4c <_fclose_r+0x5c>
  407c46:	4628      	mov	r0, r5
  407c48:	f7fe fcf6 	bl	406638 <_free_r>
  407c4c:	2300      	movs	r3, #0
  407c4e:	6323      	str	r3, [r4, #48]	; 0x30
  407c50:	6c61      	ldr	r1, [r4, #68]	; 0x44
  407c52:	b121      	cbz	r1, 407c5e <_fclose_r+0x6e>
  407c54:	4628      	mov	r0, r5
  407c56:	f7fe fcef 	bl	406638 <_free_r>
  407c5a:	2300      	movs	r3, #0
  407c5c:	6463      	str	r3, [r4, #68]	; 0x44
  407c5e:	f7fe fbf1 	bl	406444 <__sfp_lock_acquire>
  407c62:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407c64:	2200      	movs	r2, #0
  407c66:	07db      	lsls	r3, r3, #31
  407c68:	81a2      	strh	r2, [r4, #12]
  407c6a:	d50e      	bpl.n	407c8a <_fclose_r+0x9a>
  407c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407c6e:	f7fe ff89 	bl	406b84 <__retarget_lock_close_recursive>
  407c72:	f7fe fbed 	bl	406450 <__sfp_lock_release>
  407c76:	4630      	mov	r0, r6
  407c78:	bd70      	pop	{r4, r5, r6, pc}
  407c7a:	f7fe fbb7 	bl	4063ec <__sinit>
  407c7e:	e7bf      	b.n	407c00 <_fclose_r+0x10>
  407c80:	6921      	ldr	r1, [r4, #16]
  407c82:	4628      	mov	r0, r5
  407c84:	f7fe fcd8 	bl	406638 <_free_r>
  407c88:	e7d7      	b.n	407c3a <_fclose_r+0x4a>
  407c8a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407c8c:	f7fe ff7e 	bl	406b8c <__retarget_lock_release_recursive>
  407c90:	e7ec      	b.n	407c6c <_fclose_r+0x7c>
  407c92:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407c94:	f7fe ff78 	bl	406b88 <__retarget_lock_acquire_recursive>
  407c98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407c9c:	2b00      	cmp	r3, #0
  407c9e:	d1bb      	bne.n	407c18 <_fclose_r+0x28>
  407ca0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  407ca2:	f016 0601 	ands.w	r6, r6, #1
  407ca6:	d1b1      	bne.n	407c0c <_fclose_r+0x1c>
  407ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407caa:	f7fe ff6f 	bl	406b8c <__retarget_lock_release_recursive>
  407cae:	4630      	mov	r0, r6
  407cb0:	bd70      	pop	{r4, r5, r6, pc}
  407cb2:	bf00      	nop

00407cb4 <_fstat_r>:
  407cb4:	b538      	push	{r3, r4, r5, lr}
  407cb6:	460b      	mov	r3, r1
  407cb8:	4c07      	ldr	r4, [pc, #28]	; (407cd8 <_fstat_r+0x24>)
  407cba:	4605      	mov	r5, r0
  407cbc:	4611      	mov	r1, r2
  407cbe:	4618      	mov	r0, r3
  407cc0:	2300      	movs	r3, #0
  407cc2:	6023      	str	r3, [r4, #0]
  407cc4:	f7f8 fb29 	bl	40031a <_fstat>
  407cc8:	1c43      	adds	r3, r0, #1
  407cca:	d000      	beq.n	407cce <_fstat_r+0x1a>
  407ccc:	bd38      	pop	{r3, r4, r5, pc}
  407cce:	6823      	ldr	r3, [r4, #0]
  407cd0:	2b00      	cmp	r3, #0
  407cd2:	d0fb      	beq.n	407ccc <_fstat_r+0x18>
  407cd4:	602b      	str	r3, [r5, #0]
  407cd6:	bd38      	pop	{r3, r4, r5, pc}
  407cd8:	20410d38 	.word	0x20410d38

00407cdc <_isatty_r>:
  407cdc:	b538      	push	{r3, r4, r5, lr}
  407cde:	4c07      	ldr	r4, [pc, #28]	; (407cfc <_isatty_r+0x20>)
  407ce0:	2300      	movs	r3, #0
  407ce2:	4605      	mov	r5, r0
  407ce4:	4608      	mov	r0, r1
  407ce6:	6023      	str	r3, [r4, #0]
  407ce8:	f7f8 fb1c 	bl	400324 <_isatty>
  407cec:	1c43      	adds	r3, r0, #1
  407cee:	d000      	beq.n	407cf2 <_isatty_r+0x16>
  407cf0:	bd38      	pop	{r3, r4, r5, pc}
  407cf2:	6823      	ldr	r3, [r4, #0]
  407cf4:	2b00      	cmp	r3, #0
  407cf6:	d0fb      	beq.n	407cf0 <_isatty_r+0x14>
  407cf8:	602b      	str	r3, [r5, #0]
  407cfa:	bd38      	pop	{r3, r4, r5, pc}
  407cfc:	20410d38 	.word	0x20410d38

00407d00 <_lseek_r>:
  407d00:	b570      	push	{r4, r5, r6, lr}
  407d02:	460d      	mov	r5, r1
  407d04:	4c08      	ldr	r4, [pc, #32]	; (407d28 <_lseek_r+0x28>)
  407d06:	4611      	mov	r1, r2
  407d08:	4606      	mov	r6, r0
  407d0a:	461a      	mov	r2, r3
  407d0c:	4628      	mov	r0, r5
  407d0e:	2300      	movs	r3, #0
  407d10:	6023      	str	r3, [r4, #0]
  407d12:	f7f8 fb09 	bl	400328 <_lseek>
  407d16:	1c43      	adds	r3, r0, #1
  407d18:	d000      	beq.n	407d1c <_lseek_r+0x1c>
  407d1a:	bd70      	pop	{r4, r5, r6, pc}
  407d1c:	6823      	ldr	r3, [r4, #0]
  407d1e:	2b00      	cmp	r3, #0
  407d20:	d0fb      	beq.n	407d1a <_lseek_r+0x1a>
  407d22:	6033      	str	r3, [r6, #0]
  407d24:	bd70      	pop	{r4, r5, r6, pc}
  407d26:	bf00      	nop
  407d28:	20410d38 	.word	0x20410d38

00407d2c <_read_r>:
  407d2c:	b570      	push	{r4, r5, r6, lr}
  407d2e:	460d      	mov	r5, r1
  407d30:	4c08      	ldr	r4, [pc, #32]	; (407d54 <_read_r+0x28>)
  407d32:	4611      	mov	r1, r2
  407d34:	4606      	mov	r6, r0
  407d36:	461a      	mov	r2, r3
  407d38:	4628      	mov	r0, r5
  407d3a:	2300      	movs	r3, #0
  407d3c:	6023      	str	r3, [r4, #0]
  407d3e:	f7f8 faf5 	bl	40032c <_read>
  407d42:	1c43      	adds	r3, r0, #1
  407d44:	d000      	beq.n	407d48 <_read_r+0x1c>
  407d46:	bd70      	pop	{r4, r5, r6, pc}
  407d48:	6823      	ldr	r3, [r4, #0]
  407d4a:	2b00      	cmp	r3, #0
  407d4c:	d0fb      	beq.n	407d46 <_read_r+0x1a>
  407d4e:	6033      	str	r3, [r6, #0]
  407d50:	bd70      	pop	{r4, r5, r6, pc}
  407d52:	bf00      	nop
  407d54:	20410d38 	.word	0x20410d38

00407d58 <__aeabi_drsub>:
  407d58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  407d5c:	e002      	b.n	407d64 <__adddf3>
  407d5e:	bf00      	nop

00407d60 <__aeabi_dsub>:
  407d60:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00407d64 <__adddf3>:
  407d64:	b530      	push	{r4, r5, lr}
  407d66:	ea4f 0441 	mov.w	r4, r1, lsl #1
  407d6a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  407d6e:	ea94 0f05 	teq	r4, r5
  407d72:	bf08      	it	eq
  407d74:	ea90 0f02 	teqeq	r0, r2
  407d78:	bf1f      	itttt	ne
  407d7a:	ea54 0c00 	orrsne.w	ip, r4, r0
  407d7e:	ea55 0c02 	orrsne.w	ip, r5, r2
  407d82:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  407d86:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407d8a:	f000 80e2 	beq.w	407f52 <__adddf3+0x1ee>
  407d8e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  407d92:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  407d96:	bfb8      	it	lt
  407d98:	426d      	neglt	r5, r5
  407d9a:	dd0c      	ble.n	407db6 <__adddf3+0x52>
  407d9c:	442c      	add	r4, r5
  407d9e:	ea80 0202 	eor.w	r2, r0, r2
  407da2:	ea81 0303 	eor.w	r3, r1, r3
  407da6:	ea82 0000 	eor.w	r0, r2, r0
  407daa:	ea83 0101 	eor.w	r1, r3, r1
  407dae:	ea80 0202 	eor.w	r2, r0, r2
  407db2:	ea81 0303 	eor.w	r3, r1, r3
  407db6:	2d36      	cmp	r5, #54	; 0x36
  407db8:	bf88      	it	hi
  407dba:	bd30      	pophi	{r4, r5, pc}
  407dbc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407dc0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407dc4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  407dc8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  407dcc:	d002      	beq.n	407dd4 <__adddf3+0x70>
  407dce:	4240      	negs	r0, r0
  407dd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407dd4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  407dd8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407ddc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  407de0:	d002      	beq.n	407de8 <__adddf3+0x84>
  407de2:	4252      	negs	r2, r2
  407de4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  407de8:	ea94 0f05 	teq	r4, r5
  407dec:	f000 80a7 	beq.w	407f3e <__adddf3+0x1da>
  407df0:	f1a4 0401 	sub.w	r4, r4, #1
  407df4:	f1d5 0e20 	rsbs	lr, r5, #32
  407df8:	db0d      	blt.n	407e16 <__adddf3+0xb2>
  407dfa:	fa02 fc0e 	lsl.w	ip, r2, lr
  407dfe:	fa22 f205 	lsr.w	r2, r2, r5
  407e02:	1880      	adds	r0, r0, r2
  407e04:	f141 0100 	adc.w	r1, r1, #0
  407e08:	fa03 f20e 	lsl.w	r2, r3, lr
  407e0c:	1880      	adds	r0, r0, r2
  407e0e:	fa43 f305 	asr.w	r3, r3, r5
  407e12:	4159      	adcs	r1, r3
  407e14:	e00e      	b.n	407e34 <__adddf3+0xd0>
  407e16:	f1a5 0520 	sub.w	r5, r5, #32
  407e1a:	f10e 0e20 	add.w	lr, lr, #32
  407e1e:	2a01      	cmp	r2, #1
  407e20:	fa03 fc0e 	lsl.w	ip, r3, lr
  407e24:	bf28      	it	cs
  407e26:	f04c 0c02 	orrcs.w	ip, ip, #2
  407e2a:	fa43 f305 	asr.w	r3, r3, r5
  407e2e:	18c0      	adds	r0, r0, r3
  407e30:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  407e34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407e38:	d507      	bpl.n	407e4a <__adddf3+0xe6>
  407e3a:	f04f 0e00 	mov.w	lr, #0
  407e3e:	f1dc 0c00 	rsbs	ip, ip, #0
  407e42:	eb7e 0000 	sbcs.w	r0, lr, r0
  407e46:	eb6e 0101 	sbc.w	r1, lr, r1
  407e4a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  407e4e:	d31b      	bcc.n	407e88 <__adddf3+0x124>
  407e50:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  407e54:	d30c      	bcc.n	407e70 <__adddf3+0x10c>
  407e56:	0849      	lsrs	r1, r1, #1
  407e58:	ea5f 0030 	movs.w	r0, r0, rrx
  407e5c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  407e60:	f104 0401 	add.w	r4, r4, #1
  407e64:	ea4f 5244 	mov.w	r2, r4, lsl #21
  407e68:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  407e6c:	f080 809a 	bcs.w	407fa4 <__adddf3+0x240>
  407e70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  407e74:	bf08      	it	eq
  407e76:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  407e7a:	f150 0000 	adcs.w	r0, r0, #0
  407e7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407e82:	ea41 0105 	orr.w	r1, r1, r5
  407e86:	bd30      	pop	{r4, r5, pc}
  407e88:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  407e8c:	4140      	adcs	r0, r0
  407e8e:	eb41 0101 	adc.w	r1, r1, r1
  407e92:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407e96:	f1a4 0401 	sub.w	r4, r4, #1
  407e9a:	d1e9      	bne.n	407e70 <__adddf3+0x10c>
  407e9c:	f091 0f00 	teq	r1, #0
  407ea0:	bf04      	itt	eq
  407ea2:	4601      	moveq	r1, r0
  407ea4:	2000      	moveq	r0, #0
  407ea6:	fab1 f381 	clz	r3, r1
  407eaa:	bf08      	it	eq
  407eac:	3320      	addeq	r3, #32
  407eae:	f1a3 030b 	sub.w	r3, r3, #11
  407eb2:	f1b3 0220 	subs.w	r2, r3, #32
  407eb6:	da0c      	bge.n	407ed2 <__adddf3+0x16e>
  407eb8:	320c      	adds	r2, #12
  407eba:	dd08      	ble.n	407ece <__adddf3+0x16a>
  407ebc:	f102 0c14 	add.w	ip, r2, #20
  407ec0:	f1c2 020c 	rsb	r2, r2, #12
  407ec4:	fa01 f00c 	lsl.w	r0, r1, ip
  407ec8:	fa21 f102 	lsr.w	r1, r1, r2
  407ecc:	e00c      	b.n	407ee8 <__adddf3+0x184>
  407ece:	f102 0214 	add.w	r2, r2, #20
  407ed2:	bfd8      	it	le
  407ed4:	f1c2 0c20 	rsble	ip, r2, #32
  407ed8:	fa01 f102 	lsl.w	r1, r1, r2
  407edc:	fa20 fc0c 	lsr.w	ip, r0, ip
  407ee0:	bfdc      	itt	le
  407ee2:	ea41 010c 	orrle.w	r1, r1, ip
  407ee6:	4090      	lslle	r0, r2
  407ee8:	1ae4      	subs	r4, r4, r3
  407eea:	bfa2      	ittt	ge
  407eec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  407ef0:	4329      	orrge	r1, r5
  407ef2:	bd30      	popge	{r4, r5, pc}
  407ef4:	ea6f 0404 	mvn.w	r4, r4
  407ef8:	3c1f      	subs	r4, #31
  407efa:	da1c      	bge.n	407f36 <__adddf3+0x1d2>
  407efc:	340c      	adds	r4, #12
  407efe:	dc0e      	bgt.n	407f1e <__adddf3+0x1ba>
  407f00:	f104 0414 	add.w	r4, r4, #20
  407f04:	f1c4 0220 	rsb	r2, r4, #32
  407f08:	fa20 f004 	lsr.w	r0, r0, r4
  407f0c:	fa01 f302 	lsl.w	r3, r1, r2
  407f10:	ea40 0003 	orr.w	r0, r0, r3
  407f14:	fa21 f304 	lsr.w	r3, r1, r4
  407f18:	ea45 0103 	orr.w	r1, r5, r3
  407f1c:	bd30      	pop	{r4, r5, pc}
  407f1e:	f1c4 040c 	rsb	r4, r4, #12
  407f22:	f1c4 0220 	rsb	r2, r4, #32
  407f26:	fa20 f002 	lsr.w	r0, r0, r2
  407f2a:	fa01 f304 	lsl.w	r3, r1, r4
  407f2e:	ea40 0003 	orr.w	r0, r0, r3
  407f32:	4629      	mov	r1, r5
  407f34:	bd30      	pop	{r4, r5, pc}
  407f36:	fa21 f004 	lsr.w	r0, r1, r4
  407f3a:	4629      	mov	r1, r5
  407f3c:	bd30      	pop	{r4, r5, pc}
  407f3e:	f094 0f00 	teq	r4, #0
  407f42:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  407f46:	bf06      	itte	eq
  407f48:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  407f4c:	3401      	addeq	r4, #1
  407f4e:	3d01      	subne	r5, #1
  407f50:	e74e      	b.n	407df0 <__adddf3+0x8c>
  407f52:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407f56:	bf18      	it	ne
  407f58:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407f5c:	d029      	beq.n	407fb2 <__adddf3+0x24e>
  407f5e:	ea94 0f05 	teq	r4, r5
  407f62:	bf08      	it	eq
  407f64:	ea90 0f02 	teqeq	r0, r2
  407f68:	d005      	beq.n	407f76 <__adddf3+0x212>
  407f6a:	ea54 0c00 	orrs.w	ip, r4, r0
  407f6e:	bf04      	itt	eq
  407f70:	4619      	moveq	r1, r3
  407f72:	4610      	moveq	r0, r2
  407f74:	bd30      	pop	{r4, r5, pc}
  407f76:	ea91 0f03 	teq	r1, r3
  407f7a:	bf1e      	ittt	ne
  407f7c:	2100      	movne	r1, #0
  407f7e:	2000      	movne	r0, #0
  407f80:	bd30      	popne	{r4, r5, pc}
  407f82:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  407f86:	d105      	bne.n	407f94 <__adddf3+0x230>
  407f88:	0040      	lsls	r0, r0, #1
  407f8a:	4149      	adcs	r1, r1
  407f8c:	bf28      	it	cs
  407f8e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  407f92:	bd30      	pop	{r4, r5, pc}
  407f94:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  407f98:	bf3c      	itt	cc
  407f9a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  407f9e:	bd30      	popcc	{r4, r5, pc}
  407fa0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407fa4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  407fa8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407fac:	f04f 0000 	mov.w	r0, #0
  407fb0:	bd30      	pop	{r4, r5, pc}
  407fb2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407fb6:	bf1a      	itte	ne
  407fb8:	4619      	movne	r1, r3
  407fba:	4610      	movne	r0, r2
  407fbc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  407fc0:	bf1c      	itt	ne
  407fc2:	460b      	movne	r3, r1
  407fc4:	4602      	movne	r2, r0
  407fc6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  407fca:	bf06      	itte	eq
  407fcc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  407fd0:	ea91 0f03 	teqeq	r1, r3
  407fd4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  407fd8:	bd30      	pop	{r4, r5, pc}
  407fda:	bf00      	nop

00407fdc <__aeabi_ui2d>:
  407fdc:	f090 0f00 	teq	r0, #0
  407fe0:	bf04      	itt	eq
  407fe2:	2100      	moveq	r1, #0
  407fe4:	4770      	bxeq	lr
  407fe6:	b530      	push	{r4, r5, lr}
  407fe8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407fec:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407ff0:	f04f 0500 	mov.w	r5, #0
  407ff4:	f04f 0100 	mov.w	r1, #0
  407ff8:	e750      	b.n	407e9c <__adddf3+0x138>
  407ffa:	bf00      	nop

00407ffc <__aeabi_i2d>:
  407ffc:	f090 0f00 	teq	r0, #0
  408000:	bf04      	itt	eq
  408002:	2100      	moveq	r1, #0
  408004:	4770      	bxeq	lr
  408006:	b530      	push	{r4, r5, lr}
  408008:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40800c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  408010:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  408014:	bf48      	it	mi
  408016:	4240      	negmi	r0, r0
  408018:	f04f 0100 	mov.w	r1, #0
  40801c:	e73e      	b.n	407e9c <__adddf3+0x138>
  40801e:	bf00      	nop

00408020 <__aeabi_f2d>:
  408020:	0042      	lsls	r2, r0, #1
  408022:	ea4f 01e2 	mov.w	r1, r2, asr #3
  408026:	ea4f 0131 	mov.w	r1, r1, rrx
  40802a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40802e:	bf1f      	itttt	ne
  408030:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  408034:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  408038:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40803c:	4770      	bxne	lr
  40803e:	f092 0f00 	teq	r2, #0
  408042:	bf14      	ite	ne
  408044:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  408048:	4770      	bxeq	lr
  40804a:	b530      	push	{r4, r5, lr}
  40804c:	f44f 7460 	mov.w	r4, #896	; 0x380
  408050:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408054:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  408058:	e720      	b.n	407e9c <__adddf3+0x138>
  40805a:	bf00      	nop

0040805c <__aeabi_ul2d>:
  40805c:	ea50 0201 	orrs.w	r2, r0, r1
  408060:	bf08      	it	eq
  408062:	4770      	bxeq	lr
  408064:	b530      	push	{r4, r5, lr}
  408066:	f04f 0500 	mov.w	r5, #0
  40806a:	e00a      	b.n	408082 <__aeabi_l2d+0x16>

0040806c <__aeabi_l2d>:
  40806c:	ea50 0201 	orrs.w	r2, r0, r1
  408070:	bf08      	it	eq
  408072:	4770      	bxeq	lr
  408074:	b530      	push	{r4, r5, lr}
  408076:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40807a:	d502      	bpl.n	408082 <__aeabi_l2d+0x16>
  40807c:	4240      	negs	r0, r0
  40807e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  408082:	f44f 6480 	mov.w	r4, #1024	; 0x400
  408086:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40808a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40808e:	f43f aedc 	beq.w	407e4a <__adddf3+0xe6>
  408092:	f04f 0203 	mov.w	r2, #3
  408096:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40809a:	bf18      	it	ne
  40809c:	3203      	addne	r2, #3
  40809e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4080a2:	bf18      	it	ne
  4080a4:	3203      	addne	r2, #3
  4080a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4080aa:	f1c2 0320 	rsb	r3, r2, #32
  4080ae:	fa00 fc03 	lsl.w	ip, r0, r3
  4080b2:	fa20 f002 	lsr.w	r0, r0, r2
  4080b6:	fa01 fe03 	lsl.w	lr, r1, r3
  4080ba:	ea40 000e 	orr.w	r0, r0, lr
  4080be:	fa21 f102 	lsr.w	r1, r1, r2
  4080c2:	4414      	add	r4, r2
  4080c4:	e6c1      	b.n	407e4a <__adddf3+0xe6>
  4080c6:	bf00      	nop

004080c8 <__aeabi_dmul>:
  4080c8:	b570      	push	{r4, r5, r6, lr}
  4080ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4080ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4080d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4080d6:	bf1d      	ittte	ne
  4080d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4080dc:	ea94 0f0c 	teqne	r4, ip
  4080e0:	ea95 0f0c 	teqne	r5, ip
  4080e4:	f000 f8de 	bleq	4082a4 <__aeabi_dmul+0x1dc>
  4080e8:	442c      	add	r4, r5
  4080ea:	ea81 0603 	eor.w	r6, r1, r3
  4080ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4080f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4080f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4080fa:	bf18      	it	ne
  4080fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  408100:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408104:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  408108:	d038      	beq.n	40817c <__aeabi_dmul+0xb4>
  40810a:	fba0 ce02 	umull	ip, lr, r0, r2
  40810e:	f04f 0500 	mov.w	r5, #0
  408112:	fbe1 e502 	umlal	lr, r5, r1, r2
  408116:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40811a:	fbe0 e503 	umlal	lr, r5, r0, r3
  40811e:	f04f 0600 	mov.w	r6, #0
  408122:	fbe1 5603 	umlal	r5, r6, r1, r3
  408126:	f09c 0f00 	teq	ip, #0
  40812a:	bf18      	it	ne
  40812c:	f04e 0e01 	orrne.w	lr, lr, #1
  408130:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  408134:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  408138:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40813c:	d204      	bcs.n	408148 <__aeabi_dmul+0x80>
  40813e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  408142:	416d      	adcs	r5, r5
  408144:	eb46 0606 	adc.w	r6, r6, r6
  408148:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40814c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  408150:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  408154:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  408158:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40815c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  408160:	bf88      	it	hi
  408162:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408166:	d81e      	bhi.n	4081a6 <__aeabi_dmul+0xde>
  408168:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40816c:	bf08      	it	eq
  40816e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  408172:	f150 0000 	adcs.w	r0, r0, #0
  408176:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40817a:	bd70      	pop	{r4, r5, r6, pc}
  40817c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  408180:	ea46 0101 	orr.w	r1, r6, r1
  408184:	ea40 0002 	orr.w	r0, r0, r2
  408188:	ea81 0103 	eor.w	r1, r1, r3
  40818c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  408190:	bfc2      	ittt	gt
  408192:	ebd4 050c 	rsbsgt	r5, r4, ip
  408196:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40819a:	bd70      	popgt	{r4, r5, r6, pc}
  40819c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4081a0:	f04f 0e00 	mov.w	lr, #0
  4081a4:	3c01      	subs	r4, #1
  4081a6:	f300 80ab 	bgt.w	408300 <__aeabi_dmul+0x238>
  4081aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4081ae:	bfde      	ittt	le
  4081b0:	2000      	movle	r0, #0
  4081b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4081b6:	bd70      	pople	{r4, r5, r6, pc}
  4081b8:	f1c4 0400 	rsb	r4, r4, #0
  4081bc:	3c20      	subs	r4, #32
  4081be:	da35      	bge.n	40822c <__aeabi_dmul+0x164>
  4081c0:	340c      	adds	r4, #12
  4081c2:	dc1b      	bgt.n	4081fc <__aeabi_dmul+0x134>
  4081c4:	f104 0414 	add.w	r4, r4, #20
  4081c8:	f1c4 0520 	rsb	r5, r4, #32
  4081cc:	fa00 f305 	lsl.w	r3, r0, r5
  4081d0:	fa20 f004 	lsr.w	r0, r0, r4
  4081d4:	fa01 f205 	lsl.w	r2, r1, r5
  4081d8:	ea40 0002 	orr.w	r0, r0, r2
  4081dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4081e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4081e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4081e8:	fa21 f604 	lsr.w	r6, r1, r4
  4081ec:	eb42 0106 	adc.w	r1, r2, r6
  4081f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4081f4:	bf08      	it	eq
  4081f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4081fa:	bd70      	pop	{r4, r5, r6, pc}
  4081fc:	f1c4 040c 	rsb	r4, r4, #12
  408200:	f1c4 0520 	rsb	r5, r4, #32
  408204:	fa00 f304 	lsl.w	r3, r0, r4
  408208:	fa20 f005 	lsr.w	r0, r0, r5
  40820c:	fa01 f204 	lsl.w	r2, r1, r4
  408210:	ea40 0002 	orr.w	r0, r0, r2
  408214:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408218:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40821c:	f141 0100 	adc.w	r1, r1, #0
  408220:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408224:	bf08      	it	eq
  408226:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40822a:	bd70      	pop	{r4, r5, r6, pc}
  40822c:	f1c4 0520 	rsb	r5, r4, #32
  408230:	fa00 f205 	lsl.w	r2, r0, r5
  408234:	ea4e 0e02 	orr.w	lr, lr, r2
  408238:	fa20 f304 	lsr.w	r3, r0, r4
  40823c:	fa01 f205 	lsl.w	r2, r1, r5
  408240:	ea43 0302 	orr.w	r3, r3, r2
  408244:	fa21 f004 	lsr.w	r0, r1, r4
  408248:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40824c:	fa21 f204 	lsr.w	r2, r1, r4
  408250:	ea20 0002 	bic.w	r0, r0, r2
  408254:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  408258:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40825c:	bf08      	it	eq
  40825e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408262:	bd70      	pop	{r4, r5, r6, pc}
  408264:	f094 0f00 	teq	r4, #0
  408268:	d10f      	bne.n	40828a <__aeabi_dmul+0x1c2>
  40826a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40826e:	0040      	lsls	r0, r0, #1
  408270:	eb41 0101 	adc.w	r1, r1, r1
  408274:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408278:	bf08      	it	eq
  40827a:	3c01      	subeq	r4, #1
  40827c:	d0f7      	beq.n	40826e <__aeabi_dmul+0x1a6>
  40827e:	ea41 0106 	orr.w	r1, r1, r6
  408282:	f095 0f00 	teq	r5, #0
  408286:	bf18      	it	ne
  408288:	4770      	bxne	lr
  40828a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40828e:	0052      	lsls	r2, r2, #1
  408290:	eb43 0303 	adc.w	r3, r3, r3
  408294:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  408298:	bf08      	it	eq
  40829a:	3d01      	subeq	r5, #1
  40829c:	d0f7      	beq.n	40828e <__aeabi_dmul+0x1c6>
  40829e:	ea43 0306 	orr.w	r3, r3, r6
  4082a2:	4770      	bx	lr
  4082a4:	ea94 0f0c 	teq	r4, ip
  4082a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4082ac:	bf18      	it	ne
  4082ae:	ea95 0f0c 	teqne	r5, ip
  4082b2:	d00c      	beq.n	4082ce <__aeabi_dmul+0x206>
  4082b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4082b8:	bf18      	it	ne
  4082ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4082be:	d1d1      	bne.n	408264 <__aeabi_dmul+0x19c>
  4082c0:	ea81 0103 	eor.w	r1, r1, r3
  4082c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4082c8:	f04f 0000 	mov.w	r0, #0
  4082cc:	bd70      	pop	{r4, r5, r6, pc}
  4082ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4082d2:	bf06      	itte	eq
  4082d4:	4610      	moveq	r0, r2
  4082d6:	4619      	moveq	r1, r3
  4082d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4082dc:	d019      	beq.n	408312 <__aeabi_dmul+0x24a>
  4082de:	ea94 0f0c 	teq	r4, ip
  4082e2:	d102      	bne.n	4082ea <__aeabi_dmul+0x222>
  4082e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4082e8:	d113      	bne.n	408312 <__aeabi_dmul+0x24a>
  4082ea:	ea95 0f0c 	teq	r5, ip
  4082ee:	d105      	bne.n	4082fc <__aeabi_dmul+0x234>
  4082f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4082f4:	bf1c      	itt	ne
  4082f6:	4610      	movne	r0, r2
  4082f8:	4619      	movne	r1, r3
  4082fa:	d10a      	bne.n	408312 <__aeabi_dmul+0x24a>
  4082fc:	ea81 0103 	eor.w	r1, r1, r3
  408300:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408304:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408308:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40830c:	f04f 0000 	mov.w	r0, #0
  408310:	bd70      	pop	{r4, r5, r6, pc}
  408312:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408316:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40831a:	bd70      	pop	{r4, r5, r6, pc}

0040831c <__aeabi_ddiv>:
  40831c:	b570      	push	{r4, r5, r6, lr}
  40831e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  408322:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  408326:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40832a:	bf1d      	ittte	ne
  40832c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  408330:	ea94 0f0c 	teqne	r4, ip
  408334:	ea95 0f0c 	teqne	r5, ip
  408338:	f000 f8a7 	bleq	40848a <__aeabi_ddiv+0x16e>
  40833c:	eba4 0405 	sub.w	r4, r4, r5
  408340:	ea81 0e03 	eor.w	lr, r1, r3
  408344:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408348:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40834c:	f000 8088 	beq.w	408460 <__aeabi_ddiv+0x144>
  408350:	ea4f 3303 	mov.w	r3, r3, lsl #12
  408354:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  408358:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40835c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  408360:	ea4f 2202 	mov.w	r2, r2, lsl #8
  408364:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  408368:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40836c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  408370:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  408374:	429d      	cmp	r5, r3
  408376:	bf08      	it	eq
  408378:	4296      	cmpeq	r6, r2
  40837a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40837e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  408382:	d202      	bcs.n	40838a <__aeabi_ddiv+0x6e>
  408384:	085b      	lsrs	r3, r3, #1
  408386:	ea4f 0232 	mov.w	r2, r2, rrx
  40838a:	1ab6      	subs	r6, r6, r2
  40838c:	eb65 0503 	sbc.w	r5, r5, r3
  408390:	085b      	lsrs	r3, r3, #1
  408392:	ea4f 0232 	mov.w	r2, r2, rrx
  408396:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40839a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40839e:	ebb6 0e02 	subs.w	lr, r6, r2
  4083a2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4083a6:	bf22      	ittt	cs
  4083a8:	1ab6      	subcs	r6, r6, r2
  4083aa:	4675      	movcs	r5, lr
  4083ac:	ea40 000c 	orrcs.w	r0, r0, ip
  4083b0:	085b      	lsrs	r3, r3, #1
  4083b2:	ea4f 0232 	mov.w	r2, r2, rrx
  4083b6:	ebb6 0e02 	subs.w	lr, r6, r2
  4083ba:	eb75 0e03 	sbcs.w	lr, r5, r3
  4083be:	bf22      	ittt	cs
  4083c0:	1ab6      	subcs	r6, r6, r2
  4083c2:	4675      	movcs	r5, lr
  4083c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4083c8:	085b      	lsrs	r3, r3, #1
  4083ca:	ea4f 0232 	mov.w	r2, r2, rrx
  4083ce:	ebb6 0e02 	subs.w	lr, r6, r2
  4083d2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4083d6:	bf22      	ittt	cs
  4083d8:	1ab6      	subcs	r6, r6, r2
  4083da:	4675      	movcs	r5, lr
  4083dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4083e0:	085b      	lsrs	r3, r3, #1
  4083e2:	ea4f 0232 	mov.w	r2, r2, rrx
  4083e6:	ebb6 0e02 	subs.w	lr, r6, r2
  4083ea:	eb75 0e03 	sbcs.w	lr, r5, r3
  4083ee:	bf22      	ittt	cs
  4083f0:	1ab6      	subcs	r6, r6, r2
  4083f2:	4675      	movcs	r5, lr
  4083f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4083f8:	ea55 0e06 	orrs.w	lr, r5, r6
  4083fc:	d018      	beq.n	408430 <__aeabi_ddiv+0x114>
  4083fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
  408402:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  408406:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40840a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40840e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  408412:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  408416:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40841a:	d1c0      	bne.n	40839e <__aeabi_ddiv+0x82>
  40841c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408420:	d10b      	bne.n	40843a <__aeabi_ddiv+0x11e>
  408422:	ea41 0100 	orr.w	r1, r1, r0
  408426:	f04f 0000 	mov.w	r0, #0
  40842a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40842e:	e7b6      	b.n	40839e <__aeabi_ddiv+0x82>
  408430:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408434:	bf04      	itt	eq
  408436:	4301      	orreq	r1, r0
  408438:	2000      	moveq	r0, #0
  40843a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40843e:	bf88      	it	hi
  408440:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408444:	f63f aeaf 	bhi.w	4081a6 <__aeabi_dmul+0xde>
  408448:	ebb5 0c03 	subs.w	ip, r5, r3
  40844c:	bf04      	itt	eq
  40844e:	ebb6 0c02 	subseq.w	ip, r6, r2
  408452:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  408456:	f150 0000 	adcs.w	r0, r0, #0
  40845a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40845e:	bd70      	pop	{r4, r5, r6, pc}
  408460:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  408464:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  408468:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40846c:	bfc2      	ittt	gt
  40846e:	ebd4 050c 	rsbsgt	r5, r4, ip
  408472:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  408476:	bd70      	popgt	{r4, r5, r6, pc}
  408478:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40847c:	f04f 0e00 	mov.w	lr, #0
  408480:	3c01      	subs	r4, #1
  408482:	e690      	b.n	4081a6 <__aeabi_dmul+0xde>
  408484:	ea45 0e06 	orr.w	lr, r5, r6
  408488:	e68d      	b.n	4081a6 <__aeabi_dmul+0xde>
  40848a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40848e:	ea94 0f0c 	teq	r4, ip
  408492:	bf08      	it	eq
  408494:	ea95 0f0c 	teqeq	r5, ip
  408498:	f43f af3b 	beq.w	408312 <__aeabi_dmul+0x24a>
  40849c:	ea94 0f0c 	teq	r4, ip
  4084a0:	d10a      	bne.n	4084b8 <__aeabi_ddiv+0x19c>
  4084a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4084a6:	f47f af34 	bne.w	408312 <__aeabi_dmul+0x24a>
  4084aa:	ea95 0f0c 	teq	r5, ip
  4084ae:	f47f af25 	bne.w	4082fc <__aeabi_dmul+0x234>
  4084b2:	4610      	mov	r0, r2
  4084b4:	4619      	mov	r1, r3
  4084b6:	e72c      	b.n	408312 <__aeabi_dmul+0x24a>
  4084b8:	ea95 0f0c 	teq	r5, ip
  4084bc:	d106      	bne.n	4084cc <__aeabi_ddiv+0x1b0>
  4084be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4084c2:	f43f aefd 	beq.w	4082c0 <__aeabi_dmul+0x1f8>
  4084c6:	4610      	mov	r0, r2
  4084c8:	4619      	mov	r1, r3
  4084ca:	e722      	b.n	408312 <__aeabi_dmul+0x24a>
  4084cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4084d0:	bf18      	it	ne
  4084d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4084d6:	f47f aec5 	bne.w	408264 <__aeabi_dmul+0x19c>
  4084da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4084de:	f47f af0d 	bne.w	4082fc <__aeabi_dmul+0x234>
  4084e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4084e6:	f47f aeeb 	bne.w	4082c0 <__aeabi_dmul+0x1f8>
  4084ea:	e712      	b.n	408312 <__aeabi_dmul+0x24a>

004084ec <__gedf2>:
  4084ec:	f04f 3cff 	mov.w	ip, #4294967295
  4084f0:	e006      	b.n	408500 <__cmpdf2+0x4>
  4084f2:	bf00      	nop

004084f4 <__ledf2>:
  4084f4:	f04f 0c01 	mov.w	ip, #1
  4084f8:	e002      	b.n	408500 <__cmpdf2+0x4>
  4084fa:	bf00      	nop

004084fc <__cmpdf2>:
  4084fc:	f04f 0c01 	mov.w	ip, #1
  408500:	f84d cd04 	str.w	ip, [sp, #-4]!
  408504:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408508:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40850c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408510:	bf18      	it	ne
  408512:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  408516:	d01b      	beq.n	408550 <__cmpdf2+0x54>
  408518:	b001      	add	sp, #4
  40851a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40851e:	bf0c      	ite	eq
  408520:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  408524:	ea91 0f03 	teqne	r1, r3
  408528:	bf02      	ittt	eq
  40852a:	ea90 0f02 	teqeq	r0, r2
  40852e:	2000      	moveq	r0, #0
  408530:	4770      	bxeq	lr
  408532:	f110 0f00 	cmn.w	r0, #0
  408536:	ea91 0f03 	teq	r1, r3
  40853a:	bf58      	it	pl
  40853c:	4299      	cmppl	r1, r3
  40853e:	bf08      	it	eq
  408540:	4290      	cmpeq	r0, r2
  408542:	bf2c      	ite	cs
  408544:	17d8      	asrcs	r0, r3, #31
  408546:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40854a:	f040 0001 	orr.w	r0, r0, #1
  40854e:	4770      	bx	lr
  408550:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408554:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408558:	d102      	bne.n	408560 <__cmpdf2+0x64>
  40855a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40855e:	d107      	bne.n	408570 <__cmpdf2+0x74>
  408560:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408564:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408568:	d1d6      	bne.n	408518 <__cmpdf2+0x1c>
  40856a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40856e:	d0d3      	beq.n	408518 <__cmpdf2+0x1c>
  408570:	f85d 0b04 	ldr.w	r0, [sp], #4
  408574:	4770      	bx	lr
  408576:	bf00      	nop

00408578 <__aeabi_cdrcmple>:
  408578:	4684      	mov	ip, r0
  40857a:	4610      	mov	r0, r2
  40857c:	4662      	mov	r2, ip
  40857e:	468c      	mov	ip, r1
  408580:	4619      	mov	r1, r3
  408582:	4663      	mov	r3, ip
  408584:	e000      	b.n	408588 <__aeabi_cdcmpeq>
  408586:	bf00      	nop

00408588 <__aeabi_cdcmpeq>:
  408588:	b501      	push	{r0, lr}
  40858a:	f7ff ffb7 	bl	4084fc <__cmpdf2>
  40858e:	2800      	cmp	r0, #0
  408590:	bf48      	it	mi
  408592:	f110 0f00 	cmnmi.w	r0, #0
  408596:	bd01      	pop	{r0, pc}

00408598 <__aeabi_dcmpeq>:
  408598:	f84d ed08 	str.w	lr, [sp, #-8]!
  40859c:	f7ff fff4 	bl	408588 <__aeabi_cdcmpeq>
  4085a0:	bf0c      	ite	eq
  4085a2:	2001      	moveq	r0, #1
  4085a4:	2000      	movne	r0, #0
  4085a6:	f85d fb08 	ldr.w	pc, [sp], #8
  4085aa:	bf00      	nop

004085ac <__aeabi_dcmplt>:
  4085ac:	f84d ed08 	str.w	lr, [sp, #-8]!
  4085b0:	f7ff ffea 	bl	408588 <__aeabi_cdcmpeq>
  4085b4:	bf34      	ite	cc
  4085b6:	2001      	movcc	r0, #1
  4085b8:	2000      	movcs	r0, #0
  4085ba:	f85d fb08 	ldr.w	pc, [sp], #8
  4085be:	bf00      	nop

004085c0 <__aeabi_dcmple>:
  4085c0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4085c4:	f7ff ffe0 	bl	408588 <__aeabi_cdcmpeq>
  4085c8:	bf94      	ite	ls
  4085ca:	2001      	movls	r0, #1
  4085cc:	2000      	movhi	r0, #0
  4085ce:	f85d fb08 	ldr.w	pc, [sp], #8
  4085d2:	bf00      	nop

004085d4 <__aeabi_dcmpge>:
  4085d4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4085d8:	f7ff ffce 	bl	408578 <__aeabi_cdrcmple>
  4085dc:	bf94      	ite	ls
  4085de:	2001      	movls	r0, #1
  4085e0:	2000      	movhi	r0, #0
  4085e2:	f85d fb08 	ldr.w	pc, [sp], #8
  4085e6:	bf00      	nop

004085e8 <__aeabi_dcmpgt>:
  4085e8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4085ec:	f7ff ffc4 	bl	408578 <__aeabi_cdrcmple>
  4085f0:	bf34      	ite	cc
  4085f2:	2001      	movcc	r0, #1
  4085f4:	2000      	movcs	r0, #0
  4085f6:	f85d fb08 	ldr.w	pc, [sp], #8
  4085fa:	bf00      	nop

004085fc <__aeabi_dcmpun>:
  4085fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408600:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408604:	d102      	bne.n	40860c <__aeabi_dcmpun+0x10>
  408606:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40860a:	d10a      	bne.n	408622 <__aeabi_dcmpun+0x26>
  40860c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408610:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408614:	d102      	bne.n	40861c <__aeabi_dcmpun+0x20>
  408616:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40861a:	d102      	bne.n	408622 <__aeabi_dcmpun+0x26>
  40861c:	f04f 0000 	mov.w	r0, #0
  408620:	4770      	bx	lr
  408622:	f04f 0001 	mov.w	r0, #1
  408626:	4770      	bx	lr

00408628 <__aeabi_d2iz>:
  408628:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40862c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  408630:	d215      	bcs.n	40865e <__aeabi_d2iz+0x36>
  408632:	d511      	bpl.n	408658 <__aeabi_d2iz+0x30>
  408634:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  408638:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40863c:	d912      	bls.n	408664 <__aeabi_d2iz+0x3c>
  40863e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  408642:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  408646:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40864a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40864e:	fa23 f002 	lsr.w	r0, r3, r2
  408652:	bf18      	it	ne
  408654:	4240      	negne	r0, r0
  408656:	4770      	bx	lr
  408658:	f04f 0000 	mov.w	r0, #0
  40865c:	4770      	bx	lr
  40865e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  408662:	d105      	bne.n	408670 <__aeabi_d2iz+0x48>
  408664:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  408668:	bf08      	it	eq
  40866a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40866e:	4770      	bx	lr
  408670:	f04f 0000 	mov.w	r0, #0
  408674:	4770      	bx	lr
  408676:	bf00      	nop

00408678 <__aeabi_uldivmod>:
  408678:	b953      	cbnz	r3, 408690 <__aeabi_uldivmod+0x18>
  40867a:	b94a      	cbnz	r2, 408690 <__aeabi_uldivmod+0x18>
  40867c:	2900      	cmp	r1, #0
  40867e:	bf08      	it	eq
  408680:	2800      	cmpeq	r0, #0
  408682:	bf1c      	itt	ne
  408684:	f04f 31ff 	movne.w	r1, #4294967295
  408688:	f04f 30ff 	movne.w	r0, #4294967295
  40868c:	f000 b97a 	b.w	408984 <__aeabi_idiv0>
  408690:	f1ad 0c08 	sub.w	ip, sp, #8
  408694:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  408698:	f000 f806 	bl	4086a8 <__udivmoddi4>
  40869c:	f8dd e004 	ldr.w	lr, [sp, #4]
  4086a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4086a4:	b004      	add	sp, #16
  4086a6:	4770      	bx	lr

004086a8 <__udivmoddi4>:
  4086a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4086ac:	468c      	mov	ip, r1
  4086ae:	460d      	mov	r5, r1
  4086b0:	4604      	mov	r4, r0
  4086b2:	9e08      	ldr	r6, [sp, #32]
  4086b4:	2b00      	cmp	r3, #0
  4086b6:	d151      	bne.n	40875c <__udivmoddi4+0xb4>
  4086b8:	428a      	cmp	r2, r1
  4086ba:	4617      	mov	r7, r2
  4086bc:	d96d      	bls.n	40879a <__udivmoddi4+0xf2>
  4086be:	fab2 fe82 	clz	lr, r2
  4086c2:	f1be 0f00 	cmp.w	lr, #0
  4086c6:	d00b      	beq.n	4086e0 <__udivmoddi4+0x38>
  4086c8:	f1ce 0c20 	rsb	ip, lr, #32
  4086cc:	fa01 f50e 	lsl.w	r5, r1, lr
  4086d0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4086d4:	fa02 f70e 	lsl.w	r7, r2, lr
  4086d8:	ea4c 0c05 	orr.w	ip, ip, r5
  4086dc:	fa00 f40e 	lsl.w	r4, r0, lr
  4086e0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4086e4:	0c25      	lsrs	r5, r4, #16
  4086e6:	fbbc f8fa 	udiv	r8, ip, sl
  4086ea:	fa1f f987 	uxth.w	r9, r7
  4086ee:	fb0a cc18 	mls	ip, sl, r8, ip
  4086f2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4086f6:	fb08 f309 	mul.w	r3, r8, r9
  4086fa:	42ab      	cmp	r3, r5
  4086fc:	d90a      	bls.n	408714 <__udivmoddi4+0x6c>
  4086fe:	19ed      	adds	r5, r5, r7
  408700:	f108 32ff 	add.w	r2, r8, #4294967295
  408704:	f080 8123 	bcs.w	40894e <__udivmoddi4+0x2a6>
  408708:	42ab      	cmp	r3, r5
  40870a:	f240 8120 	bls.w	40894e <__udivmoddi4+0x2a6>
  40870e:	f1a8 0802 	sub.w	r8, r8, #2
  408712:	443d      	add	r5, r7
  408714:	1aed      	subs	r5, r5, r3
  408716:	b2a4      	uxth	r4, r4
  408718:	fbb5 f0fa 	udiv	r0, r5, sl
  40871c:	fb0a 5510 	mls	r5, sl, r0, r5
  408720:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  408724:	fb00 f909 	mul.w	r9, r0, r9
  408728:	45a1      	cmp	r9, r4
  40872a:	d909      	bls.n	408740 <__udivmoddi4+0x98>
  40872c:	19e4      	adds	r4, r4, r7
  40872e:	f100 33ff 	add.w	r3, r0, #4294967295
  408732:	f080 810a 	bcs.w	40894a <__udivmoddi4+0x2a2>
  408736:	45a1      	cmp	r9, r4
  408738:	f240 8107 	bls.w	40894a <__udivmoddi4+0x2a2>
  40873c:	3802      	subs	r0, #2
  40873e:	443c      	add	r4, r7
  408740:	eba4 0409 	sub.w	r4, r4, r9
  408744:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408748:	2100      	movs	r1, #0
  40874a:	2e00      	cmp	r6, #0
  40874c:	d061      	beq.n	408812 <__udivmoddi4+0x16a>
  40874e:	fa24 f40e 	lsr.w	r4, r4, lr
  408752:	2300      	movs	r3, #0
  408754:	6034      	str	r4, [r6, #0]
  408756:	6073      	str	r3, [r6, #4]
  408758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40875c:	428b      	cmp	r3, r1
  40875e:	d907      	bls.n	408770 <__udivmoddi4+0xc8>
  408760:	2e00      	cmp	r6, #0
  408762:	d054      	beq.n	40880e <__udivmoddi4+0x166>
  408764:	2100      	movs	r1, #0
  408766:	e886 0021 	stmia.w	r6, {r0, r5}
  40876a:	4608      	mov	r0, r1
  40876c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408770:	fab3 f183 	clz	r1, r3
  408774:	2900      	cmp	r1, #0
  408776:	f040 808e 	bne.w	408896 <__udivmoddi4+0x1ee>
  40877a:	42ab      	cmp	r3, r5
  40877c:	d302      	bcc.n	408784 <__udivmoddi4+0xdc>
  40877e:	4282      	cmp	r2, r0
  408780:	f200 80fa 	bhi.w	408978 <__udivmoddi4+0x2d0>
  408784:	1a84      	subs	r4, r0, r2
  408786:	eb65 0503 	sbc.w	r5, r5, r3
  40878a:	2001      	movs	r0, #1
  40878c:	46ac      	mov	ip, r5
  40878e:	2e00      	cmp	r6, #0
  408790:	d03f      	beq.n	408812 <__udivmoddi4+0x16a>
  408792:	e886 1010 	stmia.w	r6, {r4, ip}
  408796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40879a:	b912      	cbnz	r2, 4087a2 <__udivmoddi4+0xfa>
  40879c:	2701      	movs	r7, #1
  40879e:	fbb7 f7f2 	udiv	r7, r7, r2
  4087a2:	fab7 fe87 	clz	lr, r7
  4087a6:	f1be 0f00 	cmp.w	lr, #0
  4087aa:	d134      	bne.n	408816 <__udivmoddi4+0x16e>
  4087ac:	1beb      	subs	r3, r5, r7
  4087ae:	0c3a      	lsrs	r2, r7, #16
  4087b0:	fa1f fc87 	uxth.w	ip, r7
  4087b4:	2101      	movs	r1, #1
  4087b6:	fbb3 f8f2 	udiv	r8, r3, r2
  4087ba:	0c25      	lsrs	r5, r4, #16
  4087bc:	fb02 3318 	mls	r3, r2, r8, r3
  4087c0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4087c4:	fb0c f308 	mul.w	r3, ip, r8
  4087c8:	42ab      	cmp	r3, r5
  4087ca:	d907      	bls.n	4087dc <__udivmoddi4+0x134>
  4087cc:	19ed      	adds	r5, r5, r7
  4087ce:	f108 30ff 	add.w	r0, r8, #4294967295
  4087d2:	d202      	bcs.n	4087da <__udivmoddi4+0x132>
  4087d4:	42ab      	cmp	r3, r5
  4087d6:	f200 80d1 	bhi.w	40897c <__udivmoddi4+0x2d4>
  4087da:	4680      	mov	r8, r0
  4087dc:	1aed      	subs	r5, r5, r3
  4087de:	b2a3      	uxth	r3, r4
  4087e0:	fbb5 f0f2 	udiv	r0, r5, r2
  4087e4:	fb02 5510 	mls	r5, r2, r0, r5
  4087e8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4087ec:	fb0c fc00 	mul.w	ip, ip, r0
  4087f0:	45a4      	cmp	ip, r4
  4087f2:	d907      	bls.n	408804 <__udivmoddi4+0x15c>
  4087f4:	19e4      	adds	r4, r4, r7
  4087f6:	f100 33ff 	add.w	r3, r0, #4294967295
  4087fa:	d202      	bcs.n	408802 <__udivmoddi4+0x15a>
  4087fc:	45a4      	cmp	ip, r4
  4087fe:	f200 80b8 	bhi.w	408972 <__udivmoddi4+0x2ca>
  408802:	4618      	mov	r0, r3
  408804:	eba4 040c 	sub.w	r4, r4, ip
  408808:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40880c:	e79d      	b.n	40874a <__udivmoddi4+0xa2>
  40880e:	4631      	mov	r1, r6
  408810:	4630      	mov	r0, r6
  408812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408816:	f1ce 0420 	rsb	r4, lr, #32
  40881a:	fa05 f30e 	lsl.w	r3, r5, lr
  40881e:	fa07 f70e 	lsl.w	r7, r7, lr
  408822:	fa20 f804 	lsr.w	r8, r0, r4
  408826:	0c3a      	lsrs	r2, r7, #16
  408828:	fa25 f404 	lsr.w	r4, r5, r4
  40882c:	ea48 0803 	orr.w	r8, r8, r3
  408830:	fbb4 f1f2 	udiv	r1, r4, r2
  408834:	ea4f 4518 	mov.w	r5, r8, lsr #16
  408838:	fb02 4411 	mls	r4, r2, r1, r4
  40883c:	fa1f fc87 	uxth.w	ip, r7
  408840:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  408844:	fb01 f30c 	mul.w	r3, r1, ip
  408848:	42ab      	cmp	r3, r5
  40884a:	fa00 f40e 	lsl.w	r4, r0, lr
  40884e:	d909      	bls.n	408864 <__udivmoddi4+0x1bc>
  408850:	19ed      	adds	r5, r5, r7
  408852:	f101 30ff 	add.w	r0, r1, #4294967295
  408856:	f080 808a 	bcs.w	40896e <__udivmoddi4+0x2c6>
  40885a:	42ab      	cmp	r3, r5
  40885c:	f240 8087 	bls.w	40896e <__udivmoddi4+0x2c6>
  408860:	3902      	subs	r1, #2
  408862:	443d      	add	r5, r7
  408864:	1aeb      	subs	r3, r5, r3
  408866:	fa1f f588 	uxth.w	r5, r8
  40886a:	fbb3 f0f2 	udiv	r0, r3, r2
  40886e:	fb02 3310 	mls	r3, r2, r0, r3
  408872:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408876:	fb00 f30c 	mul.w	r3, r0, ip
  40887a:	42ab      	cmp	r3, r5
  40887c:	d907      	bls.n	40888e <__udivmoddi4+0x1e6>
  40887e:	19ed      	adds	r5, r5, r7
  408880:	f100 38ff 	add.w	r8, r0, #4294967295
  408884:	d26f      	bcs.n	408966 <__udivmoddi4+0x2be>
  408886:	42ab      	cmp	r3, r5
  408888:	d96d      	bls.n	408966 <__udivmoddi4+0x2be>
  40888a:	3802      	subs	r0, #2
  40888c:	443d      	add	r5, r7
  40888e:	1aeb      	subs	r3, r5, r3
  408890:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  408894:	e78f      	b.n	4087b6 <__udivmoddi4+0x10e>
  408896:	f1c1 0720 	rsb	r7, r1, #32
  40889a:	fa22 f807 	lsr.w	r8, r2, r7
  40889e:	408b      	lsls	r3, r1
  4088a0:	fa05 f401 	lsl.w	r4, r5, r1
  4088a4:	ea48 0303 	orr.w	r3, r8, r3
  4088a8:	fa20 fe07 	lsr.w	lr, r0, r7
  4088ac:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4088b0:	40fd      	lsrs	r5, r7
  4088b2:	ea4e 0e04 	orr.w	lr, lr, r4
  4088b6:	fbb5 f9fc 	udiv	r9, r5, ip
  4088ba:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4088be:	fb0c 5519 	mls	r5, ip, r9, r5
  4088c2:	fa1f f883 	uxth.w	r8, r3
  4088c6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4088ca:	fb09 f408 	mul.w	r4, r9, r8
  4088ce:	42ac      	cmp	r4, r5
  4088d0:	fa02 f201 	lsl.w	r2, r2, r1
  4088d4:	fa00 fa01 	lsl.w	sl, r0, r1
  4088d8:	d908      	bls.n	4088ec <__udivmoddi4+0x244>
  4088da:	18ed      	adds	r5, r5, r3
  4088dc:	f109 30ff 	add.w	r0, r9, #4294967295
  4088e0:	d243      	bcs.n	40896a <__udivmoddi4+0x2c2>
  4088e2:	42ac      	cmp	r4, r5
  4088e4:	d941      	bls.n	40896a <__udivmoddi4+0x2c2>
  4088e6:	f1a9 0902 	sub.w	r9, r9, #2
  4088ea:	441d      	add	r5, r3
  4088ec:	1b2d      	subs	r5, r5, r4
  4088ee:	fa1f fe8e 	uxth.w	lr, lr
  4088f2:	fbb5 f0fc 	udiv	r0, r5, ip
  4088f6:	fb0c 5510 	mls	r5, ip, r0, r5
  4088fa:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4088fe:	fb00 f808 	mul.w	r8, r0, r8
  408902:	45a0      	cmp	r8, r4
  408904:	d907      	bls.n	408916 <__udivmoddi4+0x26e>
  408906:	18e4      	adds	r4, r4, r3
  408908:	f100 35ff 	add.w	r5, r0, #4294967295
  40890c:	d229      	bcs.n	408962 <__udivmoddi4+0x2ba>
  40890e:	45a0      	cmp	r8, r4
  408910:	d927      	bls.n	408962 <__udivmoddi4+0x2ba>
  408912:	3802      	subs	r0, #2
  408914:	441c      	add	r4, r3
  408916:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40891a:	eba4 0408 	sub.w	r4, r4, r8
  40891e:	fba0 8902 	umull	r8, r9, r0, r2
  408922:	454c      	cmp	r4, r9
  408924:	46c6      	mov	lr, r8
  408926:	464d      	mov	r5, r9
  408928:	d315      	bcc.n	408956 <__udivmoddi4+0x2ae>
  40892a:	d012      	beq.n	408952 <__udivmoddi4+0x2aa>
  40892c:	b156      	cbz	r6, 408944 <__udivmoddi4+0x29c>
  40892e:	ebba 030e 	subs.w	r3, sl, lr
  408932:	eb64 0405 	sbc.w	r4, r4, r5
  408936:	fa04 f707 	lsl.w	r7, r4, r7
  40893a:	40cb      	lsrs	r3, r1
  40893c:	431f      	orrs	r7, r3
  40893e:	40cc      	lsrs	r4, r1
  408940:	6037      	str	r7, [r6, #0]
  408942:	6074      	str	r4, [r6, #4]
  408944:	2100      	movs	r1, #0
  408946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40894a:	4618      	mov	r0, r3
  40894c:	e6f8      	b.n	408740 <__udivmoddi4+0x98>
  40894e:	4690      	mov	r8, r2
  408950:	e6e0      	b.n	408714 <__udivmoddi4+0x6c>
  408952:	45c2      	cmp	sl, r8
  408954:	d2ea      	bcs.n	40892c <__udivmoddi4+0x284>
  408956:	ebb8 0e02 	subs.w	lr, r8, r2
  40895a:	eb69 0503 	sbc.w	r5, r9, r3
  40895e:	3801      	subs	r0, #1
  408960:	e7e4      	b.n	40892c <__udivmoddi4+0x284>
  408962:	4628      	mov	r0, r5
  408964:	e7d7      	b.n	408916 <__udivmoddi4+0x26e>
  408966:	4640      	mov	r0, r8
  408968:	e791      	b.n	40888e <__udivmoddi4+0x1e6>
  40896a:	4681      	mov	r9, r0
  40896c:	e7be      	b.n	4088ec <__udivmoddi4+0x244>
  40896e:	4601      	mov	r1, r0
  408970:	e778      	b.n	408864 <__udivmoddi4+0x1bc>
  408972:	3802      	subs	r0, #2
  408974:	443c      	add	r4, r7
  408976:	e745      	b.n	408804 <__udivmoddi4+0x15c>
  408978:	4608      	mov	r0, r1
  40897a:	e708      	b.n	40878e <__udivmoddi4+0xe6>
  40897c:	f1a8 0802 	sub.w	r8, r8, #2
  408980:	443d      	add	r5, r7
  408982:	e72b      	b.n	4087dc <__udivmoddi4+0x134>

00408984 <__aeabi_idiv0>:
  408984:	4770      	bx	lr
  408986:	bf00      	nop
  408988:	00000010 	.word	0x00000010
  40898c:	400e1000 	.word	0x400e1000
  408990:	0000030b 	.word	0x0000030b
  408994:	00200000 	.word	0x00200000
  408998:	400e0e00 	.word	0x400e0e00
  40899c:	0000000a 	.word	0x0000000a
  4089a0:	74697845 	.word	0x74697845
  4089a4:	20676e69 	.word	0x20676e69
  4089a8:	68746977 	.word	0x68746977
  4089ac:	61747320 	.word	0x61747320
  4089b0:	20737574 	.word	0x20737574
  4089b4:	0a2e6425 	.word	0x0a2e6425
  4089b8:	00000000 	.word	0x00000000

004089bc <wm8904_access_slow>:
  4089bc:	00000000 0004001a 00050047 00050043     ........G...C...
  4089cc:	0004000b 000c0003 000e0003 0012000c     ................
  4089dc:	00210000 003d0000 00620001 00680005     ..!...=...b...h.
  4089ec:	00740000 00750704 00768000 00771760     ..t...u...v.`.w.
  4089fc:	00740005 00150c05 0014845e 00164006     ..t.....^....@..
  408a0c:	00190042 001a00e8 001b0820 000c0003     B....... .......
  408a1c:	0012000f 002c0010 002d0010 002e0044     ......,...-.D...
  408a2c:	002f0044 005a0011 005a0033 0043000f     D./...Z.3.Z...C.
  408a3c:	004400f0 005a0077 005a00ff 003900b9     ..D.w.Z...Z...9.
  408a4c:	003a00b9                                ..:.

00408a50 <wm8904_access_main>:
  408a50:	00040019 00050043 000c0003 000e0003     ....C...........
  408a60:	0012000f 0014845e 00160006 0019404a     ....^.......J@..
  408a70:	001b0840 00210000 002c0005 002d0005     @.....!...,...-.
  408a80:	002e0000 002f0000 003a00ad 00430003     ....../...:...C.
  408a90:	005a00ff 00620001 00680005 00740004     ..Z...b...h...t.
  408aa0:	00750704 00768000 00771760 00ff55aa     ..u...v.`.w..U..
  408ab0:	50203a57 6e204b43 7320746f 6f707075     W: PCK not suppo
  408ac0:	64657472 0d0a2021 00000000 452d0a0d     rted! ........-E
  408ad0:	6e45202d 20726574 5f494d4e 646e6148     - Enter NMI_Hand
  408ae0:	2172656c 00000000 61480d0a 61466472     ler!......HardFa
  408af0:	20746c75 61207461 65726464 30207373     ult at address 0
  408b00:	0a782558 0000000d 654d0d0a 79726f6d     X%x.......Memory
  408b10:	466d654d 746c7561 504d2820 61662055     MemFault (MPU fa
  408b20:	29746c75 20746120 72646461 20737365     ult) at address 
  408b30:	78255830 00000d0a 75420d0a 61462073     0X%x......Bus Fa
  408b40:	20746c75 61207461 65726464 30207373     ult at address 0
  408b50:	0a782558 0000000d 73550a0d 20656761     X%x.......Usage 
  408b60:	6c756166 74612074 64646120 73736572     fault at address
  408b70:	25583020 00000078                        0X%x...

00408b78 <__func__.10406>:
  408b78:	496f6950 7265746e 74707572 646e6148     PioInterruptHand
  408b88:	0072656c                                ler.

00408b8c <__func__.10435>:
  408b8c:	5f4f4950 666e6f43 72756769 00744965     PIO_ConfigureIt.

00408b9c <__func__.10441>:
  408b9c:	5f4f4950 62616e45 7449656c 00000000     PIO_EnableIt....

00408bac <__func__.10448>:
  408bac:	5f4f4950 61736944 49656c62 00000074     PIO_DisableIt...
  408bbc:	203c2069 4e77645f 6f536d75 65637275     i < _dwNumSource
  408bcc:	00000073 6c2f2e2e 68636269 732f7069     s...../libchip/s
  408bdc:	6372756f 69702f65 74695f6f 0000632e     ource/pio_it.c..
  408bec:	6e695070 00000000 4e77645f 6f536d75     pPin...._dwNumSo
  408bfc:	65637275 203c2073 5f58414d 45544e49     urces < MAX_INTE
  408c0c:	50555252 4f535f54 45435255 00000053     RRUPT_SOURCES...
  408c1c:	6e695070 203d2120 4c4c554e 00000000     pPin != NULL....
  408c2c:	6f467764 20646e75 30203d21 00000000     dwFound != 0....

00408c3c <__func__.10423>:
  408c3c:	5f434d50 62616e45 6550656c 68706972     PMC_EnablePeriph
  408c4c:	6c617265 00000000                       eral....

00408c54 <__func__.10427>:
  408c54:	5f434d50 61736944 50656c62 70697265     PMC_DisablePerip
  408c64:	61726568 0000006c                       heral...

00408c6c <__func__.10449>:
  408c6c:	5f434d50 65507349 68706972 62616e45     PMC_IsPeriphEnab
  408c7c:	0064656c 64497764 36203c20 00000033     led.dwId < 63...
  408c8c:	6c2f2e2e 68636269 732f7069 6372756f     ../libchip/sourc
  408c9c:	6d702f65 00632e63 64497764 49203c20     e/pmc.c.dwId < I
  408cac:	45505f44 48504952 554f435f 0000544e     D_PERIPH_COUNT..

00408cbc <__func__.11129>:
  408cbc:	44746547 79616c65 69546e49 00736b63     GetDelayInTicks.

00408ccc <__func__.11133>:
  408ccc:	54746547 736b6369 00000000              GetTicks....

00408cd8 <__func__.11139>:
  408cd8:	74696157 00000000                       Wait....

00408ce0 <__func__.11148>:
  408ce0:	65656c53 00000070 202d492d 666e6f43     Sleep...-I- Conf
  408cf0:	72756769 79732065 6d657473 63697420     igure system tic
  408d00:	6f74206b 74656720 736d3120 63697420     k to get 1ms tic
  408d10:	6570206b 646f6972 000d0a2e 202d452d     k period....-E- 
  408d20:	54737953 206b6369 666e6f63 72756769     SysTick configur
  408d30:	6f697461 7265206e 0a726f72 0000000d     ation error.....
  408d40:	54737953 436b6369 69666e6f 65727567     SysTickConfigure
  408d50:	00000064 6c2f2e2e 68636269 732f7069     d...../libchip/s
  408d60:	6372756f 69742f65 6974656d 632e6b63     ource/timetick.c
  408d70:	00000000                                ....

00408d74 <__func__.10402>:
  408d74:	5f495754 666e6f43 72756769 73614d65     TWI_ConfigureMas
  408d84:	00726574                                ter.

00408d88 <__func__.10410>:
  408d88:	5f495754 666e6f43 72756769 616c5365     TWI_ConfigureSla
  408d98:	00006576                                ve..

00408d9c <__func__.10414>:
  408d9c:	5f495754 706f7453 00000000              TWI_Stop....

00408da8 <__func__.10421>:
  408da8:	5f495754 72617453 61655274 00000064     TWI_StartRead...

00408db8 <__func__.10425>:
  408db8:	5f495754 64616552 65747942 00000000     TWI_ReadByte....

00408dc8 <__func__.10430>:
  408dc8:	5f495754 74697257 74794265 00000065     TWI_WriteByte...

00408dd8 <__func__.10438>:
  408dd8:	5f495754 72617453 69725774 00006574     TWI_StartWrite..

00408de8 <__func__.10452>:
  408de8:	5f495754 62616e45 7449656c 00000000     TWI_EnableIt....

00408df8 <__func__.10457>:
  408df8:	5f495754 61736944 49656c62 00000074     TWI_DisableIt...

00408e08 <__func__.10461>:
  408e08:	5f495754 53746547 75746174 00000073     TWI_GetStatus...

00408e18 <__func__.10466>:
  408e18:	5f495754 4d746547 656b7361 61745364     TWI_GetMaskedSta
  408e28:	00737574                                tus.

00408e2c <__func__.10470>:
  408e2c:	5f495754 646e6553 504f5453 646e6f43     TWI_SendSTOPCond
  408e3c:	6f697469 0000006e 69775470 00000000     ition...pTwi....
  408e4c:	6c2f2e2e 68636269 732f7069 6372756f     ../libchip/sourc
  408e5c:	77742f65 00632e69 6b437764 20766944     e/twi.c.dwCkDiv 
  408e6c:	0038203c 77547028 543e2d69 53484957     < 8.(pTwi->TWIHS
  408e7c:	2052435f 57542026 5f534849 535f5243     _CR & TWIHS_CR_S
  408e8c:	53494456 3d212029 49575420 435f5348     VDIS) != TWIHS_C
  408e9c:	56535f52 00534944 69775470 203d2120     R_SVDIS.pTwi != 
  408eac:	4c4c554e 00000000 64646128 73736572     NULL....(address
  408ebc:	30202620 29303878 203d3d20 00000030      & 0x80) == 0...
  408ecc:	64616928 73657264 20262073 46467830     (iaddress & 0xFF
  408edc:	30303030 20293030 30203d3d 00000000     000000) == 0....
  408eec:	7a697369 203c2065 00000034 756f7328     isize < 4...(sou
  408efc:	73656372 54202620 53484957 2954495f     rces & TWIHS_IT)
  408f0c:	00000000 72756f73 20736563 57542026     ....sources & TW
  408f1c:	5f534849 00005449                       IHS_IT..

00408f24 <__func__.10436>:
  408f24:	44495754 696e495f 6c616974 00657a69     TWID_Initialize.

00408f34 <__func__.10443>:
  408f34:	44495754 6e61485f 72656c64 00000000     TWID_Handler....

00408f44 <__func__.10456>:
  408f44:	44495754 6165525f 00000064              TWID_Read...

00408f50 <__func__.10478>:
  408f50:	44495754 6972575f 00006574              TWID_Write..

00408f5c <__func__.10493>:
  408f5c:	44495754 616d445f 74696e49 696c6169     TWID_DmaInitiali
  408f6c:	0000657a                                ze..

00408f70 <__func__.10507>:
  408f70:	44495754 616d445f 64616552 00000000     TWID_DmaRead....

00408f80 <__func__.10533>:
  408f80:	44495754 616d445f 74697257 00000065     TWID_DmaWrite...
  408f90:	202d452d 276e6143 6c612074 61636f6c     -E- Can't alloca
  408fa0:	58206574 20414d44 6e616863 0a6c656e     te XDMA channel.
  408fb0:	0000000d 69775470 3d212064 4c554e20     ....pTwid != NUL
  408fc0:	0000004c 6c2f2e2e 68636269 732f7069     L...../libchip/s
  408fd0:	6372756f 77742f65 632e6469 00000000     ource/twid.c....
  408fe0:	61725470 6566736e 3d212072 4c554e20     pTransfer != NUL
  408ff0:	0000004c 202d452d 44495754 6165525f     L...-E- TWID_Rea
  409000:	41203a64 61727420 6566736e 73692072     d: A transfer is
  409010:	726c6120 79646165 6e657020 676e6964      already pending
  409020:	00000d0a 202d452d 44495754 6d695420     ....-E- TWID Tim
  409030:	74756f65 0a524220 0000000d 202d452d     eout BR.....-E- 
  409040:	44495754 6d695420 74756f65 0a435420     TWID Timeout TC.
  409050:	0000000d 202d452d 5f495754 74697257     ....-E- TWI_Writ
  409060:	41203a65 61727420 6566736e 73692072     e: A transfer is
  409070:	726c6120 79646165 6e657020 676e6964      already pending
  409080:	00000d0a 202d452d 44495754 6d695420     ....-E- TWID Tim
  409090:	74756f65 0a534220 0000000d 202d452d     eout BS.....-E- 
  4090a0:	44495754 6d695420 74756f65 32435420     TWID Timeout TC2
  4090b0:	00000d0a 69775470 20616d64 4e203d21     ....pTwidma != N
  4090c0:	004c4c55 69775470 616d6458 54703e2d     ULL.pTwiXdma->pT
  4090d0:	20646977 4e203d21 004c4c55 202d452d     wid != NULL.-E- 
  4090e0:	44495754 414d4420 746f6e20 6e6f6420     TWID DMA not don
  4090f0:	000d0a65 202d452d 44495754 6d695420     e...-E- TWID Tim
  409100:	74756f65 61655220 000d0a64 202d452d     eout Read...-E- 
  409110:	44495754 414d4420 746f6e20 6e6f6420     TWID DMA not don
  409120:	43202c65 6e6e6168 53206c65 65746174     e, Channel State
  409130:	20736920 0d0a6425 00000000 202d452d      is %d......-E- 
  409140:	44495754 6d695420 74756f65 52585420     TWID Timeout TXR
  409150:	0d0a5944 00000000 202d452d 44495754     DY......-E- TWID
  409160:	6d695420 74756f65 69725720 0d0a6574      Timeout Write..
  409170:	00000000                                ....

00409174 <__func__.10396>:
  409174:	414d4458 65475f43 70795474 00000065     XDMAC_GetType...

00409184 <__func__.10400>:
  409184:	414d4458 65475f43 6e6f4374 00676966     XDMAC_GetConfig.

00409194 <__func__.10404>:
  409194:	414d4458 65475f43 62724174 72657469     XDMAC_GetArbiter
  4091a4:	00000000                                ....

004091a8 <__func__.10409>:
  4091a8:	414d4458 6e455f43 656c6261 00744947     XDMAC_EnableGIt.

004091b8 <__func__.10414>:
  4091b8:	414d4458 69445f43 6c626173 74494765     XDMAC_DisableGIt
  4091c8:	00000000                                ....

004091cc <__func__.10418>:
  4091cc:	414d4458 65475f43 74494774 6b73614d     XDMAC_GetGItMask
  4091dc:	00000000                                ....

004091e0 <__func__.10422>:
  4091e0:	414d4458 65475f43 73494774 00000072     XDMAC_GetGIsr...

004091f0 <__func__.10427>:
  4091f0:	414d4458 65475f43 73614d74 4764656b     XDMAC_GetMaskedG
  409200:	00727349                                Isr.

00409204 <__func__.10432>:
  409204:	414d4458 6e455f43 656c6261 6e616843     XDMAC_EnableChan
  409214:	006c656e                                nel.

00409218 <__func__.10437>:
  409218:	414d4458 6e455f43 656c6261 6e616843     XDMAC_EnableChan
  409228:	736c656e 00000000                       nels....

00409230 <__func__.10442>:
  409230:	414d4458 69445f43 6c626173 61684365     XDMAC_DisableCha
  409240:	6c656e6e 00000000                       nnel....

00409248 <__func__.10447>:
  409248:	414d4458 69445f43 6c626173 61684365     XDMAC_DisableCha
  409258:	6c656e6e 00000073                       nnels...

00409260 <__func__.10451>:
  409260:	414d4458 65475f43 6f6c4774 436c6162     XDMAC_GetGlobalC
  409270:	61745368 00737574                       hStatus.

00409278 <__func__.10456>:
  409278:	414d4458 75535f43 6e657073 61655264     XDMAC_SuspendRea
  409288:	61684364 6c656e6e 00000000              dChannel....

00409294 <__func__.10461>:
  409294:	414d4458 75535f43 6e657073 69725764     XDMAC_SuspendWri
  4092a4:	68436574 656e6e61 0000006c              teChannel...

004092b0 <__func__.10466>:
  4092b0:	414d4458 75535f43 6e657073 61655264     XDMAC_SuspendRea
  4092c0:	69725764 68436574 656e6e61 0000006c     dWriteChannel...

004092d0 <__func__.10471>:
  4092d0:	414d4458 65525f43 656d7573 64616552     XDMAC_ResumeRead
  4092e0:	74697257 61684365 6c656e6e 00000000     WriteChannel....

004092f0 <__func__.10476>:
  4092f0:	414d4458 6f535f43 61777466 72546572     XDMAC_SoftwareTr
  409300:	66736e61 65527265 00000071              ansferReq...

0040930c <__func__.10480>:
  40930c:	414d4458 65475f43 666f5374 72617774     XDMAC_GetSoftwar
  40931c:	61725465 6566736e 61745372 00737574     eTransferStatus.

0040932c <__func__.10494>:
  40932c:	414d4458 6e455f43 656c6261 6e616843     XDMAC_EnableChan
  40933c:	496c656e 00000074                       nelIt...

00409344 <__func__.10500>:
  409344:	414d4458 69445f43 6c626173 61684365     XDMAC_DisableCha
  409354:	6c656e6e 00007449                       nnelIt..

0040935c <__func__.10505>:
  40935c:	414d4458 65475f43 61684374 6c656e6e     XDMAC_GetChannel
  40936c:	614d7449 00006b73                       ItMask..

00409374 <__func__.10510>:
  409374:	414d4458 65475f43 61684374 6c656e6e     XDMAC_GetChannel
  409384:	00727349                                Isr.

00409388 <__func__.10485>:
  409388:	414d4458 6f535f43 61777466 6c466572     XDMAC_SoftwareFl
  409398:	52687375 00007165                       ushReq..

004093a0 <__func__.10516>:
  4093a0:	414d4458 65475f43 73614d74 6168436b     XDMAC_GetMaskCha
  4093b0:	6c656e6e 00727349                       nnelIsr.

004093b8 <__func__.10522>:
  4093b8:	414d4458 65535f43 756f5374 41656372     XDMAC_SetSourceA
  4093c8:	00726464                                ddr.

004093cc <__func__.10528>:
  4093cc:	414d4458 65535f43 73654474 616e6974     XDMAC_SetDestina
  4093dc:	6e6f6974 72646441 00000000              tionAddr....

004093e8 <__func__.10535>:
  4093e8:	414d4458 65535f43 73654474 70697263     XDMAC_SetDescrip
  4093f8:	41726f74 00726464                       torAddr.

00409400 <__func__.10541>:
  409400:	414d4458 65535f43 73654474 70697263     XDMAC_SetDescrip
  409410:	43726f74 72746e6f 00006c6f              torControl..

0040941c <__func__.10547>:
  40941c:	414d4458 65535f43 63694d74 6c626f72     XDMAC_SetMicrobl
  40942c:	436b636f 72746e6f 00006c6f              ockControl..

00409438 <__func__.10553>:
  409438:	414d4458 65535f43 6f6c4274 6f436b63     XDMAC_SetBlockCo
  409448:	6f72746e 0000006c                       ntrol...

00409450 <__func__.10559>:
  409450:	414d4458 65535f43 61684374 6c656e6e     XDMAC_SetChannel
  409460:	666e6f43 00006769                       Config..

00409468 <__func__.10564>:
  409468:	414d4458 65475f43 61684374 6c656e6e     XDMAC_GetChannel
  409478:	666e6f43 00006769                       Config..

00409480 <__func__.10570>:
  409480:	414d4458 65535f43 74614474 72745361     XDMAC_SetDataStr
  409490:	5f656469 506d654d 65747461 00006e72     ide_MemPattern..

004094a0 <__func__.10576>:
  4094a0:	414d4458 65535f43 756f5374 4d656372     XDMAC_SetSourceM
  4094b0:	6f726369 636f6c42 7274536b 00656469     icroBlockStride.

004094c0 <__func__.10582>:
  4094c0:	414d4458 65535f43 73654474 616e6974     XDMAC_SetDestina
  4094d0:	6e6f6974 7263694d 6f6c426f 74536b63     tionMicroBlockSt
  4094e0:	65646972 00000000                       ride....

004094e8 <__func__.10587>:
  4094e8:	414d4458 65475f43 44684374 69747365     XDMAC_GetChDesti
  4094f8:	6974616e 64416e6f 00007264 6d645870     nationAddr..pXdm
  409508:	00006361 6c2f2e2e 68636269 732f7069     ac..../libchip/s
  409518:	6372756f 64782f65 2e63616d 00000063     ource/xdmac.c...
  409528:	6e616863 206c656e 4458203c 5f43414d     channel < XDMAC_
  409538:	4e414843 5f4c454e 004d554e 6961646e     CHANNEL_NUM.ndai
  409548:	203c2066 00000032                       f < 2...

00409550 <__FUNCTION__.10400>:
  409550:	414d4458 6c415f44 61636f6c 64586574     XDMAD_AllocateXd
  409560:	4363616d 6e6e6168 00006c65              macChannel..

0040956c <__func__.10410>:
  40956c:	414d4458 6e495f44 61697469 657a696c     XDMAD_Initialize
  40957c:	00000000                                ....

00409580 <__func__.10426>:
  409580:	414d4458 72465f44 68436565 656e6e61     XDMAD_FreeChanne
  409590:	0000006c                                l...

00409594 <__func__.10440>:
  409594:	414d4458 65535f44 6c614374 6361626c     XDMAD_SetCallbac
  4095a4:	0000006b                                k...

004095a8 <__func__.10447>:
  4095a8:	414d4458 72505f44 72617065 61684365     XDMAD_PrepareCha
  4095b8:	6c656e6e 00000000                       nnel....

004095c0 <__func__.10458>:
  4095c0:	414d4458 61485f44 656c646e 00000072     XDMAD_Handler...

004095d0 <__func__.10469>:
  4095d0:	414d4458 73495f44 6e617254 72656673     XDMAD_IsTransfer
  4095e0:	656e6f44 00000000                       Done....

004095e8 <__func__.10479>:
  4095e8:	414d4458 6f435f44 6769666e 54657275     XDMAD_ConfigureT
  4095f8:	736e6172 00726566                       ransfer.

00409600 <__func__.10486>:
  409600:	414d4458 74535f44 54747261 736e6172     XDMAD_StartTrans
  409610:	00726566                                fer.

00409614 <__FUNCTION__.10488>:
  409614:	414d4458 74535f44 54747261 736e6172     XDMAD_StartTrans
  409624:	00726566                                fer.

00409628 <__func__.10494>:
  409628:	414d4458 74535f44 7254706f 66736e61     XDMAD_StopTransf
  409638:	00007265 202d452d 3a3a7325 6c6c4120     er..-E- %s:: All
  409648:	7461636f 206e6f69 6c696166 00006465     ocation failed..
  409658:	202d452d 3a3a7325 6c6c4120 7461636f     -E- %s:: Allocat
  409668:	206e6f69 6c696166 202c6465 206c6c61     ion failed, all 
  409678:	6e616863 736c656e 65726120 63636f20     channels are occ
  409688:	65697075 00000064 6d645870 00006461     upied...pXdmad..
  409698:	6c2f2e2e 68636269 732f7069 6372756f     ../libchip/sourc
  4096a8:	64782f65 2e64616d 00000063 6d645870     e/xdmad.c...pXdm
  4096b8:	21206461 554e203d 00004c4c 616d4470     ad != NULL..pDma
  4096c8:	3d212064 4c554e20 0000004c 202d452d     d != NULL...-E- 
  4096d8:	3a3a7325 4d445820 535f4441 45544154     %s:: XDMAD_STATE
  4096e8:	4552465f 0d0a2045 00000000 202d452d     _FREE ......-E- 
  4096f8:	3a3a7325 4d445820 535f4441 45544154     %s:: XDMAD_STATE
  409708:	4154535f 0a205452 0000000d              _START .....

00409714 <xdmaHwIf>:
  409714:	00000000 00000012 00000000 00000000     ................
  409724:	00000012 00000001 00000000 00000015     ................
  409734:	00000100 00000000 00000015 00000201     ................
  409744:	00000000 0000002a 00000300 00000000     ....*...........
  409754:	0000002a 00000401 00000000 0000002b     *...........+...
  409764:	00000500 00000000 0000002b 00000601     ........+.......
  409774:	00000000 0000000d 00000700 00000000     ................
  409784:	0000000d 00000801 00000000 0000000e     ................
  409794:	00000900 00000000 0000000e 00000a01     ................
  4097a4:	00000000 0000000f 00000b00 00000000     ................
  4097b4:	0000000f 00000c01 00000000 0000001f     ................
  4097c4:	00000d00 00000000 00000013 00000e00     ................
  4097d4:	00000000 00000013 00000f01 00000000     ................
  4097e4:	00000014 00001000 00000000 00000014     ................
  4097f4:	00001101 00000000 00000029 00001200     ........).......
  409804:	00000000 00000029 00001301 00000000     ....)...........
  409814:	00000007 00001400 00000000 00000007     ................
  409824:	00001501 00000000 00000008 00001600     ................
  409834:	00000000 00000008 00001701 00000000     ................
  409844:	0000002c 00001800 00000000 0000002c     ,...........,...
  409854:	00001901 00000000 0000002d 00001a00     ........-.......
  409864:	00000000 0000002d 00001b01 00000000     ....-...........
  409874:	0000002e 00001c00 00000000 0000002e     ................
  409884:	00001d01 00000000 0000001e 00001e00     ................
  409894:	00000000 0000001e 00001f00 00000000     ................
  4098a4:	00000016 00002000 00000000 00000016     ..... ..........
  4098b4:	00002101 00000000 0000000a 00002201     .!..........."..
  4098c4:	00000000 0000001d 00002301 00000000     .........#......
  4098d4:	00000028 00002401 00000000 00000038     (....$......8...
  4098e4:	00002500 00000000 00000038 00002601     .%......8....&..
  4098f4:	00000000 0000003c 00002700 00000000     ....<....'......
  409904:	00000017 00002801 00000000 00000018     .....(..........
  409914:	00002901 00000000 00000019 00002a01     .)...........*..
  409924:	00000000 0000001a 00002b01              .........+..

00409930 <pinsSsc>:
  409930:	00000008 400e0e00 0000000a 00000010     .......@........
  409940:	400e0e00 0000000a 04000000 400e1400     ...@...........@
  409950:	00000110 00000002 400e1000 0000030b     ...........@....
  409960:	00000001 400e1000 0000030b 00000400     .......@........
  409970:	400e0e00 0000020a 00400000 400e0e00     ...@......@....@
  409980:	0000000a 01000000 400e1400 00000110     ...........@....
  409990:	00040000 400e0e00 0000010a 202d572d     .......@....-W- 
  4099a0:	20414d44 66207369 65747361 68742072     DMA is faster th
  4099b0:	43206e61 252d5550 000d0a64 414d4478     an CPU-%d...xDMA
  4099c0:	61686320 6c656e6e 6c6c6120 7461636f      channel allocat
  4099d0:	206e6f69 6f727265 000d0a72 00352e31     ion error...1.5.
  4099e0:	53202d2d 44204353 4120414d 6f696475     -- SSC DMA Audio
  4099f0:	61784520 656c706d 20732520 0d0a2d2d      Example %s --..
  409a00:	00000000 204d4153 20313756 616c7058     ....SAM V71 Xpla
  409a10:	64656e69 746c5520 00006172 25202d2d     ined Ultra..-- %
  409a20:	000d0a73 00434347 343a3030 32313a32     s...GCC.00:42:12
  409a30:	00000000 20636544 32203232 00373130     ....Dec 22 2017.
  409a40:	43202d2d 69706d6f 3a64656c 20732520     -- Compiled: %s 
  409a50:	57207325 20687469 2d2d7325 00000d0a     %s With %s--....
  409a60:	202d462d 74737953 206b6369 666e6f63     -F- Systick conf
  409a70:	72756769 6f697461 7265206e 0a726f72     iguration error.
  409a80:	0000000d 39384d57 6e203430 6620746f     ....WM8904 not f
  409a90:	646e756f 000d0a21 65736e49 4c207472     ound!...Insert L
  409aa0:	2d656e69 63206e69 656c6261 74697720     ine-in cable wit
  409ab0:	43502068 61654820 6f687064 6f20656e     h PC Headphone o
  409ac0:	75707475 000d0a74 7566202c 6974636e     utput..., functi
  409ad0:	203a6e6f 00000000 65737361 6f697472     on: ....assertio
  409ae0:	2522206e 66202273 656c6961 66203a64     n "%s" failed: f
  409af0:	20656c69 22732522 696c202c 2520656e     ile "%s", line %
  409b00:	25732564 00000a73                       d%s%s...

00409b08 <_global_impure_ptr>:
  409b08:	20400008 33323130 37363534 42413938     ..@ 0123456789AB
  409b18:	46454443 00000000 33323130 37363534     CDEF....01234567
  409b28:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  409b38:	0000296c                                l)..

00409b3c <blanks.7217>:
  409b3c:	20202020 20202020 20202020 20202020                     

00409b4c <zeroes.7218>:
  409b4c:	30303030 30303030 30303030 30303030     0000000000000000
  409b5c:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.

00409b6c <blanks.7238>:
  409b6c:	20202020 20202020 20202020 20202020                     

00409b7c <zeroes.7239>:
  409b7c:	30303030 30303030 30303030 30303030     0000000000000000
  409b8c:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  409b9c:	00000043 49534f50 00000058 0000002e     C...POSIX.......
  409bac:	00000000                                ....

00409bb0 <__mprec_bigtens>:
  409bb0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  409bc0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  409bd0:	7f73bf3c 75154fdd                       <.s..O.u

00409bd8 <__mprec_tens>:
  409bd8:	00000000 3ff00000 00000000 40240000     .......?......$@
  409be8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  409bf8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  409c08:	00000000 412e8480 00000000 416312d0     .......A......cA
  409c18:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  409c28:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  409c38:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  409c48:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  409c58:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  409c68:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  409c78:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  409c88:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  409c98:	79d99db4 44ea7843                       ...yCx.D

00409ca0 <p05.6055>:
  409ca0:	00000005 00000019 0000007d              ........}...

00409cac <_ctype_>:
  409cac:	20202000 20202020 28282020 20282828     .         ((((( 
  409cbc:	20202020 20202020 20202020 20202020                     
  409ccc:	10108820 10101010 10101010 10101010      ...............
  409cdc:	04040410 04040404 10040404 10101010     ................
  409cec:	41411010 41414141 01010101 01010101     ..AAAAAA........
  409cfc:	01010101 01010101 01010101 10101010     ................
  409d0c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  409d1c:	02020202 02020202 02020202 10101010     ................
  409d2c:	00000020 00000000 00000000 00000000      ...............
	...

00409db0 <_init>:
  409db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409db2:	bf00      	nop
  409db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409db6:	bc08      	pop	{r3}
  409db8:	469e      	mov	lr, r3
  409dba:	4770      	bx	lr

00409dbc <__init_array_start>:
  409dbc:	0040524d 	.word	0x0040524d

00409dc0 <__frame_dummy_init_array_entry>:
  409dc0:	00400165                                e.@.

00409dc4 <_fini>:
  409dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409dc6:	bf00      	nop
  409dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409dca:	bc08      	pop	{r3}
  409dcc:	469e      	mov	lr, r3
  409dce:	4770      	bx	lr

00409dd0 <__fini_array_start>:
  409dd0:	00400141 	.word	0x00400141
